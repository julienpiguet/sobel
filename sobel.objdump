
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001178c memsz 0x0001178c flags r-x
    LOAD off    0x000127ac vaddr 0x000117ac paddr 0x00013398 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014f84 vaddr 0x00014f84 paddr 0x00014f84 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010db4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b4  00010ff8  00010ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000117ac  00013398  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00014f84  00014f84  00014f84  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015134  00015134  00014398  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014398  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  000143c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000269e2  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c40  00000000  00000000  0003bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c446  00000000  00000000  00045a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025f4  00000000  00000000  00051e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ddb  00000000  00000000  0005446c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018e6c  00000000  00000000  00058247  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000710b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  00071108  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00076566  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076569  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00076575  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00076576  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00076577  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007657b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007657f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00076583  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007658c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00076595  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007659e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000765a9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000765e1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007c0b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010ff8 l    d  .rodata	00000000 .rodata
000117ac l    d  .rwdata	00000000 .rwdata
00014f84 l    d  .bss	00000000 .bss
00015134 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000114fa l     O .rodata	00000010 zeroes.4404
00004a98 l     F .text	000000bc __sbprintf
0001150a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004ca8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067d8 l     F .text	00000008 __fp_unlock
000067ec l     F .text	0000019c __sinit.part.1
00006988 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011cb4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000120f8 l     O .rwdata	00000020 lc_ctype_charset
000120d8 l     O .rwdata	00000020 lc_message_charset
00012118 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001153c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009524 l     F .text	000000fc __sprint_r.part.0
00011670 l     O .rodata	00000010 blanks.4348
00011660 l     O .rodata	00000010 zeroes.4349
0000aab0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e5b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e6c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e6f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e7dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e8bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eb7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013388 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000edf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ef2c l     F .text	00000034 alt_dev_reg
000122f8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f238 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f444 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fa7c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ff2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000103a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000104e0 l     F .text	0000003c alt_get_errno
0001051c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015008 g     O .bss	00000004 alt_instruction_exception_handler
00008bbc g     F .text	00000074 _mprec_log10
00008ca8 g     F .text	0000008c __any_on
0000b04c g     F .text	00000054 _isatty_r
00011548 g     O .rodata	00000028 __mprec_tinytens
0000eab8 g     F .text	0000007c alt_main
000026c4 g     F .text	000000c0 _puts_r
00015034 g     O .bss	00000100 alt_irq
0000b0a0 g     F .text	00000060 _lseek_r
0001149f g     O .rodata	00000009 gy_array
00013398 g       *ABS*	00000000 __flash_rwdata_start
0000d0e4 g     F .text	00000088 .hidden __eqdf2
00015134 g       *ABS*	00000000 __alt_heap_start
00002688 g     F .text	0000003c printf
0000b2b8 g     F .text	0000009c _wcrtomb_r
000093e4 g     F .text	0000005c __sseek
00006b28 g     F .text	00000010 __sinit
0000b160 g     F .text	00000140 __swbuf_r
000075f0 g     F .text	0000007c _setlocale_r
00006990 g     F .text	00000068 __sfmoreglue
0000eb58 g     F .text	00000024 __malloc_unlock
00000a7c g     F .text	00000014 LCD_Write_Command
00014fb4 g     O .bss	00000004 sobel_width
00014ff8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00014f98 g     O .bss	00000004 start_sobel_threshold
00007ab4 g     F .text	0000015c memmove
00000a90 g     F .text	00000014 LCD_Write_Data
00006b10 g     F .text	00000018 _cleanup
00007d38 g     F .text	000000a8 _Balloc
0000d16c g     F .text	000000dc .hidden __gtdf2
000108d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000598 g     F .text	00000024 cam_get_xsize
0000aff0 g     F .text	0000005c _fstat_r
00014fd8 g     O .bss	00000004 errno
00009360 g     F .text	00000008 __seofread
00014fec g     O .bss	00000004 alt_argv
0001b358 g       *ABS*	00000000 _gp
0000edc8 g     F .text	00000030 usleep
00000658 g     F .text	00000074 cam_set_image_pointer
00012178 g     O .rwdata	00000180 alt_fd_list
00001c50 g     F .text	00000010 vga_set_pointer
000108fc g     F .text	00000090 alt_find_dev
0000796c g     F .text	00000148 memcpy
000067e0 g     F .text	0000000c _cleanup_r
0000e3d0 g     F .text	000000dc .hidden __floatsidf
00010464 g     F .text	0000007c alt_io_redirect
0000d248 g     F .text	000000f4 .hidden __ltdf2
00010ff8 g       *ABS*	00000000 __DTOR_END__
00002784 g     F .text	00000014 puts
00010bc8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009298 g     F .text	00000074 __fpclassifyd
00008b18 g     F .text	000000a4 __ratio
0000aa94 g     F .text	0000001c __vfiprintf_internal
0000f63c g     F .text	0000021c altera_avalon_jtag_uart_read
00001e24 g     F .text	00000014 malloc
00002658 g     F .text	00000030 _printf_r
000008d0 g     F .text	00000008 get_grayscale_picture
00001d68 g     F .text	00000064 .hidden __udivsi3
00011058 g     O .rodata	00000128 lens_roll_off_tbl
00000280 g     F .text	00000318 init_camera
0000e818 g     F .text	000000a4 isatty
00011598 g     O .rodata	000000c8 __mprec_tens
0000766c g     F .text	0000000c __locale_charset
00010b38 g     F .text	00000090 alt_icache_flush
00014fd4 g     O .bss	00000004 __malloc_top_pad
00013368 g     O .rwdata	00000004 __mb_cur_max
0000769c g     F .text	0000000c _localeconv_r
0000164c g     F .text	00000138 sobel_x
00008144 g     F .text	0000003c __i2b
00006fac g     F .text	000004bc __sfvwrite_r
00000aa4 g     F .text	00000414 init_LCD
00002798 g     F .text	00000054 _sbrk_r
000005e0 g     F .text	00000078 cam_get_profiling
0000b100 g     F .text	00000060 _read_r
00014fb8 g     O .bss	00000004 sobel_result
00013380 g     O .rwdata	00000004 alt_max_fd
0000ace4 g     F .text	000000f0 _fclose_r
000067a8 g     F .text	00000030 fflush
00014fd0 g     O .bss	00000004 __malloc_max_sbrked_mem
00014fa8 g     O .bss	00000004 start_sobel_y
00014f8c g     O .bss	00000004 grayscale_array
0000bf50 g     F .text	000008ac .hidden __adddf3
000005bc g     F .text	00000024 cam_get_ysize
000088c0 g     F .text	0000010c __b2d
0000ba18 g     F .text	00000538 .hidden __umoddi3
0000e9e4 g     F .text	000000d4 lseek
00000998 g     F .text	0000008c i2c_short_read
00013360 g     O .rwdata	00000004 _global_impure_ptr
00008d34 g     F .text	00000564 _realloc_r
00015134 g       *ABS*	00000000 __bss_end
000102b0 g     F .text	000000f0 alt_iic_isr_register
000107d0 g     F .text	00000108 alt_tick
0000b4a0 g     F .text	00000578 .hidden __udivdi3
0000af4c g     F .text	00000024 _fputwc_r
00011570 g     O .rodata	00000028 __mprec_bigtens
00007f28 g     F .text	00000104 __s2b
0000e4ac g     F .text	000000a8 .hidden __floatunsidf
00008600 g     F .text	00000060 __mcmp
00006b48 g     F .text	00000018 __fp_lock_all
00010264 g     F .text	0000004c alt_ic_irq_enabled
00014f84 g     O .bss	00000004 grayscape_height
00010734 g     F .text	0000009c alt_alarm_stop
00014ffc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012150 g     O .rwdata	00000028 alt_dev_null
00000f44 g     F .text	00000078 transfer_LCD_with_dma
0000ff0c g     F .text	00000020 alt_dcache_flush_all
0000802c g     F .text	00000068 __hi0bits
0000e350 g     F .text	00000080 .hidden __fixdfsi
00013398 g       *ABS*	00000000 __ram_rwdata_end
00013378 g     O .rwdata	00000008 alt_dev_list
0000ee34 g     F .text	000000f8 write
0000fc68 g     F .text	00000020 alt_timestamp_freq
000117ac g       *ABS*	00000000 __ram_rodata_end
0000e72c g     F .text	000000b0 fstat
00014fa4 g     O .bss	00000004 end_sobel_y
0000d248 g     F .text	000000f4 .hidden __ledf2
00008378 g     F .text	00000140 __pow5mult
00009638 g     F .text	0000145c ___vfiprintf_internal_r
00014fe4 g     O .bss	00000004 __nlocale_changed
00001dcc g     F .text	00000058 .hidden __umodsi3
00001c40 g     F .text	00000008 GetSobel_rgb
00015134 g       *ABS*	00000000 end
00001c48 g     F .text	00000008 GetSobelResult
000006f0 g     F .text	00000020 take_picture_blocking
00000750 g     F .text	00000014 DIPSW_get_value
00001a08 g     F .text	00000184 sobel_y_with_rgb
0000f178 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000010 current_image_pointer
00010ff8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000faf4 g     F .text	0000007c alt_avalon_timer_sc_init
0000e554 g     F .text	00000064 .hidden __clzsi2
0000f858 g     F .text	00000224 altera_avalon_jtag_uart_write
00006b38 g     F .text	00000004 __sfp_lock_acquire
00007888 g     F .text	000000e4 memchr
00002884 g     F .text	000021f8 ___vfprintf_internal_r
00006c9c g     F .text	00000310 _free_r
00007678 g     F .text	00000010 __locale_mb_cur_max
000018ec g     F .text	0000011c sobel_y
00011180 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010e44 g     F .text	00000180 __call_exitprocs
00014fe0 g     O .bss	00000004 __mlocale_changed
00013358 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014f9c g     O .bss	00000004 end_conv_grayscale
00015000 g     O .bss	00000004 _alt_tick_rate
000084b8 g     F .text	00000148 __lshift
00015004 g     O .bss	00000004 _alt_nticks
0000ebb8 g     F .text	000000fc read
0000ef98 g     F .text	0000007c alt_sys_init
00014f94 g     O .bss	00000004 end_sobel_threshold
00001784 g     F .text	00000168 sobel_x_with_rgb
00010d2c g     F .text	00000118 __register_exitproc
00008180 g     F .text	000001f8 __multiply
0000f4e4 g     F .text	00000068 altera_avalon_jtag_uart_close
000117ac g       *ABS*	00000000 __ram_rwdata_start
00010ff8 g       *ABS*	00000000 __ram_rodata_start
0001500c g     O .bss	00000028 __malloc_current_mallinfo
000089cc g     F .text	0000014c __d2b
00014fbc g     O .bss	00000004 sobel_height
00000710 g     F .text	00000014 enable_continues_mode
0000f014 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000142c g     F .text	000000f8 init_sobel_arrays
00010a94 g     F .text	000000a4 alt_get_fd
0000fdb4 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000abcc g     F .text	00000054 _close_r
00010cb0 g     F .text	0000007c memcmp
0000f0d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015134 g       *ABS*	00000000 __alt_stack_base
0000f124 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004b54 g     F .text	00000154 __swsetup_r
0000c7fc g     F .text	000008e8 .hidden __divdf3
000069f8 g     F .text	00000118 __sfp
00008c30 g     F .text	00000078 __copybits
000118ac g     O .rwdata	00000408 __malloc_av_
00006b44 g     F .text	00000004 __sinit_lock_release
0000d33c g     F .text	00000718 .hidden __muldf3
0000930c g     F .text	00000054 __sread
0001098c g     F .text	00000108 alt_find_file
0000ff68 g     F .text	000000a4 alt_dev_llist_insert
0000eb34 g     F .text	00000024 __malloc_lock
0000ed18 g     F .text	000000b0 sbrk
0000674c g     F .text	0000005c _fflush_r
0000ac20 g     F .text	000000c4 _calloc_r
000117ac g     O .rwdata	00000100 .hidden __divsi3_table
00014f84 g       *ABS*	00000000 __bss_start
00007c10 g     F .text	00000128 memset
00000fbc g     F .text	00000470 main
00014ff0 g     O .bss	00000004 alt_envp
00014fcc g     O .bss	00000004 __malloc_max_total_mem
000008c0 g     F .text	00000008 get_grayscale_width
0000f074 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b2a0 g     F .text	00000018 __swbuf
00014fc0 g     O .bss	00000004 sobel_x_result
00009440 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000add4 g     F .text	00000014 fclose
0000fb70 g     F .text	00000078 alt_timestamp_start
00004ea8 g     F .text	00001688 _dtoa_r
00001e4c g     F .text	0000080c _malloc_r
0000b414 g     F .text	00000030 __ascii_wctomb
00013384 g     O .rwdata	00000004 alt_errno
00007468 g     F .text	000000c4 _fwalk
00001c70 g     F .text	00000084 .hidden __divsi3
00006b78 g     F .text	00000124 _malloc_trim_r
00010ff8 g       *ABS*	00000000 __CTOR_END__
00014f88 g     O .bss	00000004 grayscale_width
00009448 g     F .text	000000dc strcmp
00000eb8 g     F .text	0000008c transfer_LCD_no_dma
00010ff8 g       *ABS*	00000000 __flash_rodata_start
00010ff8 g       *ABS*	00000000 __DTOR_LIST__
0000d0e4 g     F .text	00000088 .hidden __nedf2
000112c0 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ef60 g     F .text	00000038 alt_irq_init
0000ecb4 g     F .text	00000064 alt_release_fd
000008f0 g     F .text	000000a8 i2c_auto_detect
00011680 g     O .rodata	00000100 .hidden __clz_tab
000006cc g     F .text	00000014 current_image_valid
00014fdc g     O .bss	00000004 _PathLocale
000008d8 g     F .text	00000018 i2c_busy_wait
00010c64 g     F .text	00000014 atexit
0000ab6c g     F .text	00000060 _write_r
000076a8 g     F .text	00000018 setlocale
00013364 g     O .rwdata	00000004 _impure_ptr
00014fe8 g     O .bss	00000004 alt_argc
00006530 g     F .text	0000021c __sflush_r
00014ff4 g     O .bss	00000004 altera_avalon_timer_ts_base
0001006c g     F .text	00000060 _do_dtors
00007694 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000885c g     F .text	00000064 __ulp
00006b60 g     F .text	00000018 __fp_unlock_all
00013370 g     O .rwdata	00000008 alt_fs_list
00014fc4 g     O .bss	00000004 sobel_y_result
00000a24 g     F .text	00000058 i2c_short_write
00014fa0 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f90 g     O .bss	00000002 LCD_height
000076c0 g     F .text	0000000c localeconv
0000fbe8 g     F .text	00000080 alt_timestamp
00014fb0 g     O .bss	00000004 start_sobel_x
00001c60 g     F .text	00000010 vga_set_swap
00010100 g     F .text	00000050 alt_ic_isr_register
00001b8c g     F .text	000000b4 sobel_threshold
00013398 g       *ABS*	00000000 _edata
00015134 g       *ABS*	00000000 _end
0000ade8 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f54c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000114a8 g     O .rodata	00000009 gx_array
000101d8 g     F .text	0000008c alt_ic_irq_disable
00009368 g     F .text	0000007c __swrite
0001335c g     O .rwdata	00000004 __malloc_trim_threshold
00014f92 g     O .bss	00000002 LCD_width
00000764 g     F .text	0000015c conv_grayscale
00007688 g     F .text	0000000c __locale_msgcharset
00010c78 g     F .text	00000038 exit
0000752c g     F .text	000000c4 _fwalk_reent
00008660 g     F .text	000001fc __mdiff
00001cf4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b3c g     F .text	00000004 __sfp_lock_release
000008c8 g     F .text	00000008 get_grayscale_height
00010fc4 g     F .text	00000034 _exit
00001524 g     F .text	00000128 sobel_mac
0000fc88 g     F .text	0000012c alt_alarm_start
000076cc g     F .text	000001bc __smakebuf_r
00014fc8 g     O .bss	00000004 sobel_rgb565
000027ec g     F .text	00000098 strlen
000105e0 g     F .text	00000154 open
0000d16c g     F .text	000000dc .hidden __gedf2
0001336c g     O .rwdata	00000004 __wctomb
00009620 g     F .text	00000018 __sprint_r
000100cc g     F .text	00000034 alt_icache_flush_all
00014fac g     O .bss	00000004 end_sobel_x
0001338c g     O .rwdata	00000004 alt_priority_mask
00010150 g     F .text	00000088 alt_ic_irq_enable
00004a7c g     F .text	0000001c __vfprintf_internal
0000b444 g     F .text	0000005c _wctomb_r
0000da54 g     F .text	000008fc .hidden __subdf3
00008094 g     F .text	000000b0 __lo0bits
00013390 g     O .rwdata	00000008 alt_alarm_list
0001000c g     F .text	00000060 _do_ctors
0000b354 g     F .text	000000c0 wcrtomb
0000e5f4 g     F .text	000000d0 close
0000e924 g     F .text	00000084 alt_load
0000af70 g     F .text	00000080 fputwc
00001e38 g     F .text	00000014 free
00006b40 g     F .text	00000004 __sinit_lock_acquire
00007e08 g     F .text	00000120 __multadd
00007de0 g     F .text	00000028 _Bfree
00000724 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10940d04 	addi	r2,r2,20532
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10940d04 	addi	r2,r2,20532
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72c17 	ldw	r2,-25424(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72c17 	ldw	r2,-25424(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6acd614 	ori	gp,gp,45912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1093e114 	ori	r2,r2,20356

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d44d14 	ori	r3,r3,20788

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e9240 	call	e924 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000eab80 	call	eab8 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     280:	00804034 	movhi	r2,256
     284:	10842744 	addi	r2,r2,4253
     288:	00c00084 	movi	r3,2
     28c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     290:	00804034 	movhi	r2,256
     294:	10841304 	addi	r2,r2,4172
     298:	00c00044 	movi	r3,1
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	008003f4 	movhi	r2,15
     2a4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2a8:	0001883a 	nop
     2ac:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2b0:	103ffd1e 	bne	r2,zero,2a8 <__alt_data_end+0xff0002a8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2b4:	00804034 	movhi	r2,256
     2b8:	10841304 	addi	r2,r2,4172
     2bc:	10000025 	stbio	zero,0(r2)
     2c0:	008003f4 	movhi	r2,15
     2c4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2c8:	0001883a 	nop
     2cc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2d0:	103ffd1e 	bne	r2,zero,2c8 <__alt_data_end+0xff0002c8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2d4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2d8:	01800044 	movi	r6,1
     2dc:	014ce184 	movi	r5,13190
     2e0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	dc800215 	stw	r18,8(sp)
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2f4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     2f8:	000d883a 	mov	r6,zero
     2fc:	014ce184 	movi	r5,13190
     300:	01001e04 	movi	r4,120
     304:	0000a240 	call	a24 <i2c_short_write>
     308:	008003f4 	movhi	r2,15
     30c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     310:	0001883a 	nop
     314:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     318:	103ffd1e 	bne	r2,zero,310 <__alt_data_end+0xff000310>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     31c:	01803104 	movi	r6,196
     320:	014c0684 	movi	r5,12314
     324:	01001e04 	movi	r4,120
     328:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     32c:	01800204 	movi	r6,8
     330:	014c8084 	movi	r5,12802
     334:	01001e04 	movi	r4,120
     338:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     33c:	0180c744 	movi	r6,797
     340:	014cfd04 	movi	r5,13300
     344:	01001e04 	movi	r4,120
     348:	0000a240 	call	a24 <i2c_short_write>
     34c:	008000b4 	movhi	r2,2
     350:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     354:	0001883a 	nop
     358:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     35c:	103ffd1e 	bne	r2,zero,354 <__alt_data_end+0xff000354>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     360:	01a3c254 	movui	r6,36617
     364:	014d0784 	movi	r5,13342
     368:	01001e04 	movi	r4,120
     36c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     370:	01805404 	movi	r6,336
     374:	014d0704 	movi	r5,13340
     378:	01001e04 	movi	r4,120
     37c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     380:	01a3c254 	movui	r6,36617
     384:	014d0784 	movi	r5,13342
     388:	01001e04 	movi	r4,120
     38c:	0000a240 	call	a24 <i2c_short_write>
     390:	008000b4 	movhi	r2,2
     394:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     398:	0001883a 	nop
     39c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3a0:	103ffd1e 	bne	r2,zero,398 <__alt_data_end+0xff000398>
     3a4:	04000074 	movhi	r16,1
     3a8:	8404b004 	addi	r16,r16,4800
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3ac:	01a3c214 	movui	r6,36616
     3b0:	014d0784 	movi	r5,13342
     3b4:	01001e04 	movi	r4,120
     3b8:	0000a240 	call	a24 <i2c_short_write>
     3bc:	84400084 	addi	r17,r16,2
     3c0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3c4:	8980000b 	ldhu	r6,0(r17)
     3c8:	8140000b 	ldhu	r5,0(r16)
     3cc:	01001e04 	movi	r4,120
     3d0:	84000104 	addi	r16,r16,4
     3d4:	0000a240 	call	a24 <i2c_short_write>
     3d8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3dc:	84bff91e 	bne	r16,r18,3c4 <__alt_data_end+0xff0003c4>
     3e0:	04000074 	movhi	r16,1
     3e4:	84046004 	addi	r16,r16,4480
     3e8:	84400084 	addi	r17,r16,2
     3ec:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3f0:	8980000b 	ldhu	r6,0(r17)
     3f4:	8140000b 	ldhu	r5,0(r16)
     3f8:	01001e04 	movi	r4,120
     3fc:	84000104 	addi	r16,r16,4
     400:	0000a240 	call	a24 <i2c_short_write>
     404:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     408:	943ff91e 	bne	r18,r16,3f0 <__alt_data_end+0xff0003f0>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     40c:	018164c4 	movi	r6,1427
     410:	014d6904 	movi	r5,13732
     414:	01001e04 	movi	r4,120
     418:	0000a240 	call	a24 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     41c:	0189e644 	movi	r6,10137
     420:	014ce304 	movi	r5,13196
     424:	01001e04 	movi	r4,120
     428:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     42c:	01991004 	movi	r6,25664
     430:	014ce404 	movi	r5,13200
     434:	01001e04 	movi	r4,120
     438:	0000a240 	call	a24 <i2c_short_write>
     43c:	008000b4 	movhi	r2,2
     440:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     444:	0001883a 	nop
     448:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     44c:	103ffd1e 	bne	r2,zero,444 <__alt_data_end+0xff000444>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     450:	0189e6c4 	movi	r6,10139
     454:	014ce304 	movi	r5,13196
     458:	01001e04 	movi	r4,120
     45c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     460:	01991004 	movi	r6,25664
     464:	014ce404 	movi	r5,13200
     468:	01001e04 	movi	r4,120
     46c:	0000a240 	call	a24 <i2c_short_write>
     470:	008000b4 	movhi	r2,2
     474:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     484:	01a840d4 	movui	r6,41219
     488:	014ce304 	movi	r5,13196
     48c:	01001e04 	movi	r4,120
     490:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     494:	01800144 	movi	r6,5
     498:	014ce404 	movi	r5,13200
     49c:	01001e04 	movi	r4,120
     4a0:	0000a240 	call	a24 <i2c_short_write>
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4ac:	0001883a 	nop
     4b0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4b4:	103ffd1e 	bne	r2,zero,4ac <__alt_data_end+0xff0004ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4b8:	01a840d4 	movui	r6,41219
     4bc:	014ce304 	movi	r5,13196
     4c0:	01001e04 	movi	r4,120
     4c4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4c8:	01800184 	movi	r6,6
     4cc:	014ce404 	movi	r5,13200
     4d0:	01001e04 	movi	r4,120
     4d4:	0000a240 	call	a24 <i2c_short_write>
     4d8:	008000b4 	movhi	r2,2
     4dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4e0:	0001883a 	nop
     4e4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4e8:	103ffd1e 	bne	r2,zero,4e0 <__alt_data_end+0xff0004e0>
     4ec:	04000074 	movhi	r16,1
     4f0:	84041604 	addi	r16,r16,4184
     4f4:	84400084 	addi	r17,r16,2
     4f8:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4fc:	8980000b 	ldhu	r6,0(r17)
     500:	8140000b 	ldhu	r5,0(r16)
     504:	01001e04 	movi	r4,120
     508:	84000104 	addi	r16,r16,4
     50c:	0000a240 	call	a24 <i2c_short_write>
     510:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     514:	943ff91e 	bne	r18,r16,4fc <__alt_data_end+0xff0004fc>
     518:	008003f4 	movhi	r2,15
     51c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     520:	0001883a 	nop
     524:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     528:	103ffd1e 	bne	r2,zero,520 <__alt_data_end+0xff000520>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     52c:	01800804 	movi	r6,32
     530:	014ccb84 	movi	r5,13102
     534:	01001e04 	movi	r4,120
     538:	0000a240 	call	a24 <i2c_short_write>
     53c:	008003f4 	movhi	r2,15
     540:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     544:	0001883a 	nop
     548:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     54c:	103ffd1e 	bne	r2,zero,544 <__alt_data_end+0xff000544>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     550:	01800884 	movi	r6,34
     554:	014d0104 	movi	r5,13316
     558:	01001e04 	movi	r4,120
     55c:	0000a240 	call	a24 <i2c_short_write>
     560:	008003f4 	movhi	r2,15
     564:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     568:	0001883a 	nop
     56c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     570:	103ffd1e 	bne	r2,zero,568 <__alt_data_end+0xff000568>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     574:	018009c4 	movi	r6,39
     578:	014c1004 	movi	r5,12352
     57c:	01001e04 	movi	r4,120
}
     580:	dfc00317 	ldw	ra,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     594:	0000a241 	jmpi	a24 <i2c_short_write>

00000598 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     598:	00c04034 	movhi	r3,256
     59c:	18c41304 	addi	r3,r3,4172
     5a0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5a4:	1080010c 	andi	r2,r2,4
     5a8:	103ffd26 	beq	r2,zero,5a0 <__alt_data_end+0xff0005a0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5ac:	00804034 	movhi	r2,256
     5b0:	10841004 	addi	r2,r2,4160
}
     5b4:	1080002b 	ldhuio	r2,0(r2)
     5b8:	f800283a 	ret

000005bc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5bc:	00c04034 	movhi	r3,256
     5c0:	18c41304 	addi	r3,r3,4172
     5c4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5c8:	1080010c 	andi	r2,r2,4
     5cc:	103ffd26 	beq	r2,zero,5c4 <__alt_data_end+0xff0005c4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5d0:	00804034 	movhi	r2,256
     5d4:	10841104 	addi	r2,r2,4164
}
     5d8:	1080002b 	ldhuio	r2,0(r2)
     5dc:	f800283a 	ret

000005e0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5e0:	00c04034 	movhi	r3,256
     5e4:	18c41304 	addi	r3,r3,4172
     5e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5ec:	1080010c 	andi	r2,r2,4
     5f0:	103ffd26 	beq	r2,zero,5e8 <__alt_data_end+0xff0005e8>
	printf("Nr. of bytes each line    : %d\n",
     5f4:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     5f8:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     5fc:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     600:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     604:	1140002b 	ldhuio	r5,0(r2)
     608:	01000074 	movhi	r4,1
     60c:	2103fe04 	addi	r4,r4,4088
     610:	297fffcc 	andi	r5,r5,65535
     614:	00026880 	call	2688 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     618:	00804034 	movhi	r2,256
     61c:	10841104 	addi	r2,r2,4164
     620:	1140002b 	ldhuio	r5,0(r2)
     624:	01000074 	movhi	r4,1
     628:	21040604 	addi	r4,r4,4120
     62c:	297fffcc 	andi	r5,r5,65535
     630:	00026880 	call	2688 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     634:	00804034 	movhi	r2,256
     638:	10841204 	addi	r2,r2,4168
     63c:	1140002b 	ldhuio	r5,0(r2)
     640:	01000074 	movhi	r4,1
     644:	21040e04 	addi	r4,r4,4152
     648:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     654:	00026881 	jmpi	2688 <printf>

00000658 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     658:	21003fcc 	andi	r4,r4,255
     65c:	2100201c 	xori	r4,r4,128
     660:	213fe004 	addi	r4,r4,-128
     664:	00800044 	movi	r2,1
     668:	20801226 	beq	r4,r2,6b4 <cam_set_image_pointer+0x5c>
     66c:	11000c0e 	bge	r2,r4,6a0 <cam_set_image_pointer+0x48>
     670:	00800084 	movi	r2,2
     674:	20800626 	beq	r4,r2,690 <cam_set_image_pointer+0x38>
     678:	008000c4 	movi	r2,3
     67c:	2080111e 	bne	r4,r2,6c4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     680:	00804034 	movhi	r2,256
     684:	10841704 	addi	r2,r2,4188
     688:	11400035 	stwio	r5,0(r2)
     68c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841604 	addi	r2,r2,4184
     698:	11400035 	stwio	r5,0(r2)
                break;
     69c:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6a0:	2000091e 	bne	r4,zero,6c8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6a4:	00804034 	movhi	r2,256
     6a8:	10841404 	addi	r2,r2,4176
     6ac:	11400035 	stwio	r5,0(r2)
	            break;
     6b0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841504 	addi	r2,r2,4180
     6bc:	11400035 	stwio	r5,0(r2)
                break;
     6c0:	f800283a 	ret
     6c4:	f800283a 	ret
     6c8:	f800283a 	ret

000006cc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6cc:	00804034 	movhi	r2,256
     6d0:	10841304 	addi	r2,r2,4172
     6d4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6d8:	1080800c 	andi	r2,r2,512
     6dc:	f800283a 	ret

000006e0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6e0:	00804034 	movhi	r2,256
     6e4:	10841404 	addi	r2,r2,4176
}
     6e8:	10800037 	ldwio	r2,0(r2)
     6ec:	f800283a 	ret

000006f0 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     6f0:	00c04034 	movhi	r3,256
     6f4:	18c41304 	addi	r3,r3,4172
     6f8:	00800204 	movi	r2,8
     6fc:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     700:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     704:	1080020c 	andi	r2,r2,8
     708:	103ffd1e 	bne	r2,zero,700 <__alt_data_end+0xff000700>
}
     70c:	f800283a 	ret

00000710 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     710:	00804034 	movhi	r2,256
     714:	10841304 	addi	r2,r2,4172
     718:	00c00404 	movi	r3,16
     71c:	10c0002d 	sthio	r3,0(r2)
     720:	f800283a 	ret

00000724 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     724:	00c04034 	movhi	r3,256
     728:	18c41304 	addi	r3,r3,4172
     72c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     730:	1080200c 	andi	r2,r2,128
     734:	1000021e 	bne	r2,zero,740 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     738:	0005883a 	mov	r2,zero
}
     73c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     740:	00804004 	movi	r2,256
     744:	1880002d 	sthio	r2,0(r3)
		return 1;
     748:	00800044 	movi	r2,1
     74c:	f800283a 	ret

00000750 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     750:	00804034 	movhi	r2,256
     754:	10842804 	addi	r2,r2,4256
     758:	10800023 	ldbuio	r2,0(r2)
}
     75c:	0084303a 	nor	r2,zero,r2
     760:	f800283a 	ret

00000764 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     764:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     768:	defff404 	addi	sp,sp,-48
     76c:	dc400315 	stw	r17,12(sp)
     770:	dc000215 	stw	r16,8(sp)
     774:	dfc00b15 	stw	ra,44(sp)
     778:	df000a15 	stw	fp,40(sp)
     77c:	ddc00915 	stw	r23,36(sp)
     780:	dd800815 	stw	r22,32(sp)
     784:	dd400715 	stw	r21,28(sp)
     788:	dd000615 	stw	r20,24(sp)
     78c:	dcc00515 	stw	r19,20(sp)
     790:	dc800415 	stw	r18,16(sp)
     794:	d9800015 	stw	r6,0(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     798:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     79c:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     7a0:	2821883a 	mov	r16,r5
     7a4:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a8:	10000226 	beq	r2,zero,7b4 <conv_grayscale+0x50>
		free(grayscale_array);
     7ac:	1009883a 	mov	r4,r2
     7b0:	0001e380 	call	1e38 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7b4:	d8c00017 	ldw	r3,0(sp)
     7b8:	80c9383a 	mul	r4,r16,r3
     7bc:	0001e240 	call	1e24 <malloc>
	for (y = 0 ; y < height ; y++) {
     7c0:	d8c00017 	ldw	r3,0(sp)
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
     7c4:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     7c8:	00c0310e 	bge	zero,r3,890 <conv_grayscale+0x12c>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7cc:	05000074 	movhi	r20,1
     7d0:	8407883a 	add	r3,r16,r16
     7d4:	a505eb04 	addi	r20,r20,6060
     7d8:	d8c00115 	stw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7dc:	802f883a 	mov	r23,r16
     7e0:	0025883a 	mov	r18,zero
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e4:	070003c4 	movi	fp,15
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7e8:	0400230e 	bge	zero,r16,878 <conv_grayscale+0x114>
     7ec:	bc2bc83a 	sub	r21,r23,r16
     7f0:	882d883a 	mov	r22,r17
     7f4:	00000506 	br	80c <conv_grayscale+0xa8>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7f8:	10800003 	ldbu	r2,0(r2)
     7fc:	98800025 	stbio	r2,0(r19)
     800:	ad400044 	addi	r21,r21,1
     804:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     808:	bd401b26 	beq	r23,r21,878 <conv_grayscale+0x114>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     80c:	b100000b 	ldhu	r4,0(r22)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     810:	01401904 	movi	r5,100
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     814:	2006d2fa 	srli	r3,r4,11
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     818:	2004d17a 	srli	r2,r4,5
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     81c:	200890fa 	slli	r4,r4,3
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     820:	180690fa 	slli	r3,r3,3
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     824:	1085883a 	add	r2,r2,r2
     828:	1085883a 	add	r2,r2,r2
     82c:	10803fcc 	andi	r2,r2,255
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     830:	18c00564 	muli	r3,r3,21
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     834:	10801224 	muli	r2,r2,72
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     838:	21003fcc 	andi	r4,r4,255
     83c:	210001e4 	muli	r4,r4,7
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     840:	10c5883a 	add	r2,r2,r3
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     844:	d0e70d17 	ldw	r3,-25548(gp)
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     848:	2089883a 	add	r4,r4,r2
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     84c:	2004913a 	slli	r2,r4,4
     850:	214eb03a 	or	r7,r4,r5
     854:	1d67883a 	add	r19,r3,r21
     858:	1144b03a 	or	r2,r2,r5
     85c:	1505883a 	add	r2,r2,r20
     860:	e1ffe52e 	bgeu	fp,r7,7f8 <__alt_data_end+0xff0007f8>
     864:	0001c700 	call	1c70 <__divsi3>
     868:	98800025 	stbio	r2,0(r19)
     86c:	ad400044 	addi	r21,r21,1
     870:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     874:	bd7fe51e 	bne	r23,r21,80c <__alt_data_end+0xff00080c>
     878:	d8c00117 	ldw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     87c:	94800044 	addi	r18,r18,1
     880:	bc2f883a 	add	r23,r23,r16
     884:	88e3883a 	add	r17,r17,r3
     888:	d8c00017 	ldw	r3,0(sp)
     88c:	1cbfd61e 	bne	r3,r18,7e8 <__alt_data_end+0xff0007e8>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     890:	dfc00b17 	ldw	ra,44(sp)
     894:	df000a17 	ldw	fp,40(sp)
     898:	ddc00917 	ldw	r23,36(sp)
     89c:	dd800817 	ldw	r22,32(sp)
     8a0:	dd400717 	ldw	r21,28(sp)
     8a4:	dd000617 	ldw	r20,24(sp)
     8a8:	dcc00517 	ldw	r19,20(sp)
     8ac:	dc800417 	ldw	r18,16(sp)
     8b0:	dc400317 	ldw	r17,12(sp)
     8b4:	dc000217 	ldw	r16,8(sp)
     8b8:	dec00c04 	addi	sp,sp,48
     8bc:	f800283a 	ret

000008c0 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     8c0:	d0a70c17 	ldw	r2,-25552(gp)
     8c4:	f800283a 	ret

000008c8 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     8c8:	d0a70b17 	ldw	r2,-25556(gp)
     8cc:	f800283a 	ret

000008d0 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8d0:	d0a70d17 	ldw	r2,-25548(gp)
     8d4:	f800283a 	ret

000008d8 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8d8:	00c04034 	movhi	r3,256
     8dc:	18c42704 	addi	r3,r3,4252
     8e0:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8e4:	108000cc 	andi	r2,r2,3
     8e8:	103ffd1e 	bne	r2,zero,8e0 <__alt_data_end+0xff0008e0>
}
     8ec:	f800283a 	ret

000008f0 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f0:	01004034 	movhi	r4,256
     8f4:	21042704 	addi	r4,r4,4252
     8f8:	00c04034 	movhi	r3,256
     8fc:	18c42704 	addi	r3,r3,4252
     900:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     904:	108000cc 	andi	r2,r2,3
     908:	103ffb1e 	bne	r2,zero,8f8 <__alt_data_end+0xff0008f8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     90c:	00800104 	movi	r2,4
     910:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     914:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     918:	108000cc 	andi	r2,r2,3
     91c:	103ffd1e 	bne	r2,zero,914 <__alt_data_end+0xff000914>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     920:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     924:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     928:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     92c:	dfc00315 	stw	ra,12(sp)
     930:	dc800215 	stw	r18,8(sp)
     934:	dc400115 	stw	r17,4(sp)
     938:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     93c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     940:	01000074 	movhi	r4,1
     944:	2104f604 	addi	r4,r4,5080
     948:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     94c:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     950:	00026880 	call	2688 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     954:	04800a0e 	bge	zero,r18,980 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     958:	04404034 	movhi	r17,256
     95c:	8c442404 	addi	r17,r17,4240
     960:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     964:	89800037 	ldwio	r6,0(r17)
     968:	01000074 	movhi	r4,1
     96c:	800b883a 	mov	r5,r16
     970:	2104ff04 	addi	r4,r4,5116
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     974:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     978:	00026880 	call	2688 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     97c:	943ff81e 	bne	r18,r16,960 <__alt_data_end+0xff000960>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     980:	dfc00317 	ldw	ra,12(sp)
     984:	dc800217 	ldw	r18,8(sp)
     988:	dc400117 	ldw	r17,4(sp)
     98c:	dc000017 	ldw	r16,0(sp)
     990:	dec00404 	addi	sp,sp,16
     994:	f800283a 	ret

00000998 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     998:	01804034 	movhi	r6,256
     99c:	31842704 	addi	r6,r6,4252
     9a0:	00c04034 	movhi	r3,256
     9a4:	18c42704 	addi	r3,r3,4252
     9a8:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9ac:	108000cc 	andi	r2,r2,3
     9b0:	103ffb1e 	bne	r2,zero,9a0 <__alt_data_end+0xff0009a0>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9b4:	00804034 	movhi	r2,256
     9b8:	21003fcc 	andi	r4,r4,255
     9bc:	10842404 	addi	r2,r2,4240
     9c0:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9c4:	00804034 	movhi	r2,256
     9c8:	10842504 	addi	r2,r2,4244
     9cc:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d0:	008010c4 	movi	r2,67
     9d4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9d8:	180b883a 	mov	r5,r3
     9dc:	00c04034 	movhi	r3,256
     9e0:	18c42704 	addi	r3,r3,4252
     9e4:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e8:	108000cc 	andi	r2,r2,3
     9ec:	103ffb1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9f0:	00804034 	movhi	r2,256
     9f4:	21000044 	addi	r4,r4,1
     9f8:	10842404 	addi	r2,r2,4240
     9fc:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a00:	00800884 	movi	r2,34
     a04:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a08:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffd1e 	bne	r2,zero,a08 <__alt_data_end+0xff000a08>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     a14:	00804034 	movhi	r2,256
     a18:	10842604 	addi	r2,r2,4248
}
     a1c:	10800037 	ldwio	r2,0(r2)
     a20:	f800283a 	ret

00000a24 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a24:	01c04034 	movhi	r7,256
     a28:	39c42704 	addi	r7,r7,4252
     a2c:	00c04034 	movhi	r3,256
     a30:	18c42704 	addi	r3,r3,4252
     a34:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a38:	108000cc 	andi	r2,r2,3
     a3c:	103ffb1e 	bne	r2,zero,a2c <__alt_data_end+0xff000a2c>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a40:	00804034 	movhi	r2,256
     a44:	10842404 	addi	r2,r2,4240
     a48:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a4c:	00804034 	movhi	r2,256
     a50:	10842504 	addi	r2,r2,4244
     a54:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a58:	00804034 	movhi	r2,256
     a5c:	10842604 	addi	r2,r2,4248
     a60:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a64:	00801084 	movi	r2,66
     a68:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a6c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a70:	108000cc 	andi	r2,r2,3
     a74:	103ffd1e 	bne	r2,zero,a6c <__alt_data_end+0xff000a6c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a78:	f800283a 	ret

00000a7c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a7c:	00804034 	movhi	r2,256
     a80:	10841804 	addi	r2,r2,4192
     a84:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a88:	01000284 	movi	r4,10
     a8c:	000edc81 	jmpi	edc8 <usleep>

00000a90 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00804034 	movhi	r2,256
     a94:	10841904 	addi	r2,r2,4196
     a98:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a9c:	01000284 	movi	r4,10
     aa0:	000edc81 	jmpi	edc8 <usleep>

00000aa4 <init_LCD>:
}


void init_LCD() {
     aa4:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     aa8:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     aac:	dd400515 	stw	r21,20(sp)
     ab0:	dfc00815 	stw	ra,32(sp)
     ab4:	ddc00715 	stw	r23,28(sp)
     ab8:	dd800615 	stw	r22,24(sp)
     abc:	dd000415 	stw	r20,16(sp)
     ac0:	dcc00315 	stw	r19,12(sp)
     ac4:	dc800215 	stw	r18,8(sp)
     ac8:	dc400115 	stw	r17,4(sp)
     acc:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ad0:	05400084 	movi	r21,2
     ad4:	10841a04 	addi	r2,r2,4200
     ad8:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     adc:	04804034 	movhi	r18,256
     ae0:	94841804 	addi	r18,r18,4192
     ae4:	00800a04 	movi	r2,40
     ae8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     aec:	04000284 	movi	r16,10
     af0:	8009883a 	mov	r4,r16
     af4:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	05c00444 	movi	r23,17
     afc:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	04404034 	movhi	r17,256
     b08:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     b0c:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b10:	0027883a 	mov	r19,zero
     b14:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b18:	8009883a 	mov	r4,r16
     b1c:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b20:	008032c4 	movi	r2,203
     b24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b28:	8009883a 	mov	r4,r16
     b2c:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b30:	00800e44 	movi	r2,57
     b34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	00800b04 	movi	r2,44
     b44:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b48:	8009883a 	mov	r4,r16
     b4c:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b50:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	00800d04 	movi	r2,52
     b60:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b64:	8009883a 	mov	r4,r16
     b68:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b6c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b78:	008033c4 	movi	r2,207
     b7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	05802044 	movi	r22,129
     b98:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00800c04 	movi	r2,48
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00803a04 	movi	r2,232
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	00802144 	movi	r2,133
     bc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bcc:	8009883a 	mov	r4,r16
     bd0:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd4:	05000044 	movi	r20,1
     bd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	00801e44 	movi	r2,121
     be8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bec:	8009883a 	mov	r4,r16
     bf0:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf4:	00803a84 	movi	r2,234
     bf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bfc:	8009883a 	mov	r4,r16
     c00:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00801904 	movi	r2,100
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	008000c4 	movi	r2,3
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800484 	movi	r2,18
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c58:	00803dc4 	movi	r2,247
     c5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c68:	00800804 	movi	r2,32
     c6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c78:	00803004 	movi	r2,192
     c7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	05800984 	movi	r22,38
     c8c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	00800104 	movi	r2,4
     c9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00803044 	movi	r2,193
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc4:	00803144 	movi	r2,197
     cc8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd4:	00800d44 	movi	r2,53
     cd8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800f84 	movi	r2,62
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf4:	008031c4 	movi	r2,199
     cf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00802f84 	movi	r2,190
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00802c44 	movi	r2,177
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	00800404 	movi	r2,16
     d34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d38:	8009883a 	mov	r4,r16
     d3c:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d40:	00800e84 	movi	r2,58
     d44:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	00801544 	movi	r2,85
     d54:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d60:	00802d84 	movi	r2,182
     d64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d74:	8009883a 	mov	r4,r16
     d78:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d7c:	00802884 	movi	r2,162
     d80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	00803c84 	movi	r2,242
     d90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da8:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dc0:	00800d84 	movi	r2,54
     dc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ddc:	00800a84 	movi	r2,42
     de0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dec:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     df0:	8009883a 	mov	r4,r16
     df4:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     df8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e08:	8009883a 	mov	r4,r16
     e0c:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e10:	00803bc4 	movi	r2,239
     e14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e18:	8009883a 	mov	r4,r16
     e1c:	000edc80 	call	edc8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e20:	00800ac4 	movi	r2,43
     e24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e28:	8009883a 	mov	r4,r16
     e2c:	000edc80 	call	edc8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e34:	8009883a 	mov	r4,r16
     e38:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e3c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e40:	8009883a 	mov	r4,r16
     e44:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e48:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e4c:	8009883a 	mov	r4,r16
     e50:	000edc80 	call	edc8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e54:	00800fc4 	movi	r2,63
     e58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e5c:	8009883a 	mov	r4,r16
     e60:	000edc80 	call	edc8 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e64:	00c04034 	movhi	r3,256
     e68:	00803c04 	movi	r2,240
     e6c:	18c41d04 	addi	r3,r3,4212
     e70:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e74:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e78:	00805004 	movi	r2,320
     e7c:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e80:	00800a44 	movi	r2,41
     e84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e88:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e8c:	dfc00817 	ldw	ra,32(sp)
     e90:	ddc00717 	ldw	r23,28(sp)
     e94:	dd800617 	ldw	r22,24(sp)
     e98:	dd400517 	ldw	r21,20(sp)
     e9c:	dd000417 	ldw	r20,16(sp)
     ea0:	dcc00317 	ldw	r19,12(sp)
     ea4:	dc800217 	ldw	r18,8(sp)
     ea8:	dc400117 	ldw	r17,4(sp)
     eac:	dc000017 	ldw	r16,0(sp)
     eb0:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     eb4:	000edc81 	jmpi	edc8 <usleep>

00000eb8 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     eb8:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     ec0:	dc000015 	stw	r16,0(sp)
     ec4:	dfc00415 	stw	ra,16(sp)
     ec8:	dcc00315 	stw	r19,12(sp)
     ecc:	dc800215 	stw	r18,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ed8:	10841e04 	addi	r2,r2,4216
     edc:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ee0:	00804034 	movhi	r2,256
     ee4:	10841804 	addi	r2,r2,4192
     ee8:	00c00b04 	movi	r3,44
     eec:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef0:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ef4:	01000284 	movi	r4,10
     ef8:	000edc80 	call	edc8 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     efc:	90000a26 	beq	r18,zero,f28 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f00:	04c04034 	movhi	r19,256
     f04:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f08:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f0c:	8080000b 	ldhu	r2,0(r16)
     f10:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     f14:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f18:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     f1c:	000edc80 	call	edc8 <usleep>
     f20:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f24:	8cbff91e 	bne	r17,r18,f0c <__alt_data_end+0xff000f0c>
		LCD_Write_Data(data_array[pixels]);
}
     f28:	dfc00417 	ldw	ra,16(sp)
     f2c:	dcc00317 	ldw	r19,12(sp)
     f30:	dc800217 	ldw	r18,8(sp)
     f34:	dc400117 	ldw	r17,4(sp)
     f38:	dc000017 	ldw	r16,0(sp)
     f3c:	dec00504 	addi	sp,sp,20
     f40:	f800283a 	ret

00000f44 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f44:	d0a70e0b 	ldhu	r2,-25544(gp)
     f48:	3080010e 	bge	r6,r2,f50 <transfer_LCD_with_dma+0xc>
     f4c:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f50:	d0e70e8b 	ldhu	r3,-25542(gp)
     f54:	28c0010e 	bge	r5,r3,f5c <transfer_LCD_with_dma+0x18>
     f58:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f5c:	01804034 	movhi	r6,256
     f60:	31841e04 	addi	r6,r6,4216
     f64:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f68:	01404034 	movhi	r5,256
     f6c:	29441b04 	addi	r5,r5,4204
     f70:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f74:	18ffffcc 	andi	r3,r3,65535
     f78:	10bfffcc 	andi	r2,r2,65535
     f7c:	1885383a 	mul	r2,r3,r2
     f80:	00c04034 	movhi	r3,256
     f84:	18c41c04 	addi	r3,r3,4208
     f88:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f8c:	39c03fcc 	andi	r7,r7,255
     f90:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f94:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f98:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f9c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     fa0:	38000326 	beq	r7,zero,fb0 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fa4:	00c04404 	movi	r3,272
     fa8:	10c0002d 	sthio	r3,0(r2)
     fac:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fb0:	00c04004 	movi	r3,256
     fb4:	10c0002d 	sthio	r3,0(r2)
     fb8:	f800283a 	ret

00000fbc <main>:
alt_u32 end_conv_grayscale = 0;
alt_u32 start_sobel_threshold = 0;
alt_u32 end_sobel_threshold = 0;

int main()
{
     fbc:	defff804 	addi	sp,sp,-32
     fc0:	dfc00715 	stw	ra,28(sp)
     fc4:	dd800615 	stw	r22,24(sp)
     fc8:	dd400515 	stw	r21,20(sp)
     fcc:	dd000415 	stw	r20,16(sp)
     fd0:	dcc00315 	stw	r19,12(sp)
     fd4:	dc800215 	stw	r18,8(sp)
     fd8:	dc400115 	stw	r17,4(sp)
     fdc:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     fe0:	0000aa40 	call	aa4 <init_LCD>
  init_camera();
     fe4:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fe8:	01000604 	movi	r4,24
     fec:	0001c600 	call	1c60 <vga_set_swap>
  printf("Hello from Nios II!\n");
     ff0:	01000074 	movhi	r4,1
     ff4:	21050804 	addi	r4,r4,5152
     ff8:	00027840 	call	2784 <puts>
  cam_get_profiling();
     ffc:	00005e00 	call	5e0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1000:	00005980 	call	598 <cam_get_xsize>
    1004:	1021883a 	mov	r16,r2
    1008:	00005bc0 	call	5bc <cam_get_ysize>
    100c:	10bfffcc 	andi	r2,r2,65535
    1010:	813fffcc 	andi	r4,r16,65535
    1014:	2089383a 	mul	r4,r4,r2
			  end_sobel_threshold = 0;

			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
    1018:	04400044 	movi	r17,1
    101c:	04800084 	movi	r18,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1020:	0001e240 	call	1e24 <malloc>
    1024:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1028:	00005980 	call	598 <cam_get_xsize>
    102c:	1021883a 	mov	r16,r2
    1030:	00005bc0 	call	5bc <cam_get_ysize>
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	813fffcc 	andi	r4,r16,65535
    103c:	2089383a 	mul	r4,r4,r2

			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1040:	04e04414 	movui	r19,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1044:	0001e240 	call	1e24 <malloc>
    1048:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    104c:	00005980 	call	598 <cam_get_xsize>
    1050:	1021883a 	mov	r16,r2
    1054:	00005bc0 	call	5bc <cam_get_ysize>
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	813fffcc 	andi	r4,r16,65535
    1060:	2089383a 	mul	r4,r4,r2
    1064:	0001e240 	call	1e24 <malloc>
    1068:	1029883a 	mov	r20,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    106c:	00005980 	call	598 <cam_get_xsize>
    1070:	1021883a 	mov	r16,r2
    1074:	00005bc0 	call	5bc <cam_get_ysize>
    1078:	10bfffcc 	andi	r2,r2,65535
    107c:	813fffcc 	andi	r4,r16,65535
    1080:	2089383a 	mul	r4,r4,r2
    1084:	0001e240 	call	1e24 <malloc>
  cam_set_image_pointer(0,buffer1);
    1088:	b00b883a 	mov	r5,r22
    108c:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1090:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    1094:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1098:	a80b883a 	mov	r5,r21
    109c:	8809883a 	mov	r4,r17
    10a0:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    10a4:	a00b883a 	mov	r5,r20
    10a8:	9009883a 	mov	r4,r18
    10ac:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    10b0:	800b883a 	mov	r5,r16
    10b4:	010000c4 	movi	r4,3
    10b8:	00006580 	call	658 <cam_set_image_pointer>
  enable_continues_mode();
    10bc:	00007100 	call	710 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    10c0:	00005980 	call	598 <cam_get_xsize>
    10c4:	1021883a 	mov	r16,r2
    10c8:	00005bc0 	call	5bc <cam_get_ysize>
    10cc:	813fffcc 	andi	r4,r16,65535
    10d0:	2448d83a 	srl	r4,r4,r17
    10d4:	117fffcc 	andi	r5,r2,65535
    10d8:	000142c0 	call	142c <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    10dc:	00007240 	call	724 <new_image_available>
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	1080201c 	xori	r2,r2,128
    10e8:	10bfe004 	addi	r2,r2,-128
    10ec:	103ffb26 	beq	r2,zero,10dc <__alt_data_end+0xff0010dc>
		  if (current_image_valid()!=0) {
    10f0:	00006cc0 	call	6cc <current_image_valid>
    10f4:	10bfffcc 	andi	r2,r2,65535
    10f8:	10a0001c 	xori	r2,r2,32768
    10fc:	10a00004 	addi	r2,r2,-32768
    1100:	103ff626 	beq	r2,zero,10dc <__alt_data_end+0xff0010dc>

			  alt_timestamp_start();
    1104:	000fb700 	call	fb70 <alt_timestamp_start>
			  start_sobel_x = 0;
    1108:	d0271615 	stw	zero,-25512(gp)
			  end_sobel_x = 0;
    110c:	d0271515 	stw	zero,-25516(gp)
			  start_sobel_y = 0;
    1110:	d0271415 	stw	zero,-25520(gp)
			  end_sobel_y = 0;
    1114:	d0271315 	stw	zero,-25524(gp)
			  start_conv_grayscale = 0;
    1118:	d0271215 	stw	zero,-25528(gp)
			  end_conv_grayscale = 0;
    111c:	d0271115 	stw	zero,-25532(gp)
			  start_sobel_threshold = 0;
    1120:	d0271015 	stw	zero,-25536(gp)
			  end_sobel_threshold = 0;
    1124:	d0270f15 	stw	zero,-25540(gp)

			  current_mode = DIPSW_get_value();
    1128:	00007500 	call	750 <DIPSW_get_value>
    112c:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1130:	00006e00 	call	6e0 <current_image_pointer>
    1134:	1029883a 	mov	r20,r2
		      switch (mode) {
    1138:	808001cc 	andi	r2,r16,7
    113c:	14404626 	beq	r2,r17,1258 <main+0x29c>
    1140:	1000a326 	beq	r2,zero,13d0 <main+0x414>
    1144:	14808d26 	beq	r2,r18,137c <main+0x3c0>
    1148:	00c000c4 	movi	r3,3
    114c:	10c0621e 	bne	r2,r3,12d8 <main+0x31c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 :
		    	  	   start_conv_grayscale = alt_timestamp();
    1150:	000fbe80 	call	fbe8 <alt_timestamp>
    1154:	d0a71215 	stw	r2,-25528(gp)
		    	       conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1158:	00005980 	call	598 <cam_get_xsize>
    115c:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    1160:	00005bc0 	call	5bc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 :
		    	  	   start_conv_grayscale = alt_timestamp();
		    	       conv_grayscale((void *)image,
    1164:	a97fffcc 	andi	r5,r21,65535
    1168:	280ad07a 	srli	r5,r5,1
    116c:	11bfffcc 	andi	r6,r2,65535
    1170:	a009883a 	mov	r4,r20
    1174:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	       end_conv_grayscale = alt_timestamp();
    1178:	000fbe80 	call	fbe8 <alt_timestamp>
    117c:	d0a71115 	stw	r2,-25532(gp)

		               grayscale = get_grayscale_picture();
    1180:	00008d00 	call	8d0 <get_grayscale_picture>
    1184:	1029883a 	mov	r20,r2

		               start_sobel_x = alt_timestamp();
    1188:	000fbe80 	call	fbe8 <alt_timestamp>
		               sobel_x(grayscale);
    118c:	a009883a 	mov	r4,r20
		    		                  cam_get_ysize());
		    	       end_conv_grayscale = alt_timestamp();

		               grayscale = get_grayscale_picture();

		               start_sobel_x = alt_timestamp();
    1190:	d0a71615 	stw	r2,-25512(gp)
		               sobel_x(grayscale);
    1194:	000164c0 	call	164c <sobel_x>
		               end_sobel_x = alt_timestamp();
    1198:	000fbe80 	call	fbe8 <alt_timestamp>
    119c:	d0a71515 	stw	r2,-25516(gp)

		               start_sobel_y = alt_timestamp();
    11a0:	000fbe80 	call	fbe8 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    11a4:	a009883a 	mov	r4,r20

		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();

		               start_sobel_y = alt_timestamp();
    11a8:	d0a71415 	stw	r2,-25520(gp)
		               sobel_y_with_rgb(grayscale);
    11ac:	0001a080 	call	1a08 <sobel_y_with_rgb>
		               end_sobel_y = alt_timestamp();
    11b0:	000fbe80 	call	fbe8 <alt_timestamp>
    11b4:	d0a71315 	stw	r2,-25524(gp)

		               image = GetSobel_rgb();
    11b8:	0001c400 	call	1c40 <GetSobel_rgb>
    11bc:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    11c0:	00005980 	call	598 <cam_get_xsize>
    11c4:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),0);
    11c8:	00005bc0 	call	5bc <cam_get_ysize>
		               start_sobel_y = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               end_sobel_y = alt_timestamp();

		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11cc:	a17fffcc 	andi	r5,r20,65535
    11d0:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11d4:	84003fcc 	andi	r16,r16,255
    11d8:	8400201c 	xori	r16,r16,128
		               start_sobel_y = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               end_sobel_y = alt_timestamp();

		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11dc:	000f883a 	mov	r7,zero
    11e0:	11bfffcc 	andi	r6,r2,65535
    11e4:	acc9883a 	add	r4,r21,r19
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11e8:	843fe004 	addi	r16,r16,-128
		               start_sobel_y = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               end_sobel_y = alt_timestamp();

		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11ec:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11f0:	80008916 	blt	r16,zero,1418 <main+0x45c>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }

		      printf("conv grayscale: %d\n",(end_conv_grayscale-start_conv_grayscale));
    11f4:	d0a71217 	ldw	r2,-25528(gp)
    11f8:	d1671117 	ldw	r5,-25532(gp)
    11fc:	01000074 	movhi	r4,1
    1200:	21050d04 	addi	r4,r4,5172
    1204:	288bc83a 	sub	r5,r5,r2
    1208:	00026880 	call	2688 <printf>
		      printf("sobel x: %d\n",(end_sobel_x-start_sobel_x));
    120c:	d0a71617 	ldw	r2,-25512(gp)
    1210:	d1671517 	ldw	r5,-25516(gp)
    1214:	01000074 	movhi	r4,1
    1218:	21051204 	addi	r4,r4,5192
    121c:	288bc83a 	sub	r5,r5,r2
    1220:	00026880 	call	2688 <printf>
		      printf("sobel y: %d\n",(end_sobel_y-start_sobel_y));
    1224:	d0a71417 	ldw	r2,-25520(gp)
    1228:	d1671317 	ldw	r5,-25524(gp)
    122c:	01000074 	movhi	r4,1
    1230:	21051604 	addi	r4,r4,5208
    1234:	288bc83a 	sub	r5,r5,r2
    1238:	00026880 	call	2688 <printf>
		      printf("sobel threshold: %d\n",(end_sobel_threshold-start_sobel_threshold));
    123c:	d0a71017 	ldw	r2,-25536(gp)
    1240:	d1670f17 	ldw	r5,-25540(gp)
    1244:	01000074 	movhi	r4,1
    1248:	21051a04 	addi	r4,r4,5224
    124c:	288bc83a 	sub	r5,r5,r2
    1250:	00026880 	call	2688 <printf>
    1254:	003fa106 	br	10dc <__alt_data_end+0xff0010dc>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 :
		    	  	   start_conv_grayscale = alt_timestamp();
    1258:	000fbe80 	call	fbe8 <alt_timestamp>
    125c:	d0a71215 	stw	r2,-25528(gp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1260:	00005980 	call	598 <cam_get_xsize>
    1264:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    1268:	00005bc0 	call	5bc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 :
		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    126c:	a97fffcc 	andi	r5,r21,65535
    1270:	280ad07a 	srli	r5,r5,1
    1274:	a009883a 	mov	r4,r20
    1278:	11bfffcc 	andi	r6,r2,65535
    127c:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    1280:	000fbe80 	call	fbe8 <alt_timestamp>
    1284:	d0a71115 	stw	r2,-25532(gp)

		               grayscale = get_grayscale_picture();
    1288:	00008d00 	call	8d0 <get_grayscale_picture>
    128c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1290:	00005980 	call	598 <cam_get_xsize>
    1294:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),1);
    1298:	00005bc0 	call	5bc <cam_get_ysize>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    129c:	a17fffcc 	andi	r5,r20,65535
    12a0:	280ad07a 	srli	r5,r5,1
    12a4:	880f883a 	mov	r7,r17

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a8:	84003fcc 	andi	r16,r16,255
    12ac:	8400201c 	xori	r16,r16,128
                       start_sobel_threshold = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_threshold = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12b0:	11bfffcc 	andi	r6,r2,65535
    12b4:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b8:	843fe004 	addi	r16,r16,-128
                       start_sobel_threshold = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_threshold = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12bc:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c0:	803fcc0e 	bge	r16,zero,11f4 <__alt_data_end+0xff0011f4>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12c4:	01000604 	movi	r4,24
    12c8:	0001c600 	call	1c60 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12cc:	a809883a 	mov	r4,r21
    12d0:	0001c500 	call	1c50 <vga_set_pointer>
    12d4:	003fc706 	br	11f4 <__alt_data_end+0xff0011f4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_conv_grayscale = alt_timestamp();
    12d8:	000fbe80 	call	fbe8 <alt_timestamp>
    12dc:	d0a71215 	stw	r2,-25528(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    12e0:	00005980 	call	598 <cam_get_xsize>
    12e4:	102b883a 	mov	r21,r2
	                                  cam_get_ysize());
    12e8:	00005bc0 	call	5bc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    12ec:	a97fffcc 	andi	r5,r21,65535
    12f0:	280ad07a 	srli	r5,r5,1
    12f4:	11bfffcc 	andi	r6,r2,65535
    12f8:	a009883a 	mov	r4,r20
    12fc:	00007640 	call	764 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    1300:	000fbe80 	call	fbe8 <alt_timestamp>
    1304:	d0a71115 	stw	r2,-25532(gp)

                       grayscale = get_grayscale_picture();
    1308:	00008d00 	call	8d0 <get_grayscale_picture>
    130c:	1029883a 	mov	r20,r2

                       start_sobel_x = alt_timestamp();
    1310:	000fbe80 	call	fbe8 <alt_timestamp>
                       sobel_x(grayscale);
    1314:	a009883a 	mov	r4,r20
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel_x = alt_timestamp();
    1318:	d0a71615 	stw	r2,-25512(gp)
                       sobel_x(grayscale);
    131c:	000164c0 	call	164c <sobel_x>
                       end_sobel_x = alt_timestamp();
    1320:	000fbe80 	call	fbe8 <alt_timestamp>
    1324:	d0a71515 	stw	r2,-25516(gp)

                       start_sobel_y = alt_timestamp();
    1328:	000fbe80 	call	fbe8 <alt_timestamp>
                       sobel_y(grayscale);
    132c:	a009883a 	mov	r4,r20

                       start_sobel_x = alt_timestamp();
                       sobel_x(grayscale);
                       end_sobel_x = alt_timestamp();

                       start_sobel_y = alt_timestamp();
    1330:	d0a71415 	stw	r2,-25520(gp)
                       sobel_y(grayscale);
    1334:	00018ec0 	call	18ec <sobel_y>
                       end_sobel_y = alt_timestamp();
    1338:	000fbe80 	call	fbe8 <alt_timestamp>
    133c:	d0a71315 	stw	r2,-25524(gp)

                       start_sobel_threshold = alt_timestamp();
    1340:	000fbe80 	call	fbe8 <alt_timestamp>
                       sobel_threshold(128);
    1344:	01002004 	movi	r4,128

                       start_sobel_y = alt_timestamp();
                       sobel_y(grayscale);
                       end_sobel_y = alt_timestamp();

                       start_sobel_threshold = alt_timestamp();
    1348:	d0a71015 	stw	r2,-25536(gp)
                       sobel_threshold(128);
    134c:	0001b8c0 	call	1b8c <sobel_threshold>
                       end_sobel_threshold = alt_timestamp();
    1350:	000fbe80 	call	fbe8 <alt_timestamp>
    1354:	d0a70f15 	stw	r2,-25540(gp)

                       grayscale=GetSobelResult();
    1358:	0001c480 	call	1c48 <GetSobelResult>
    135c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1360:	00005980 	call	598 <cam_get_xsize>
    1364:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),1);
    1368:	00005bc0 	call	5bc <cam_get_ysize>
                       start_sobel_threshold = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_threshold = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    136c:	a17fffcc 	andi	r5,r20,65535
    1370:	280ad07a 	srli	r5,r5,1
    1374:	01c00044 	movi	r7,1
    1378:	003fcb06 	br	12a8 <__alt_data_end+0xff0012a8>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 :
		    	  	   start_conv_grayscale = alt_timestamp();
    137c:	000fbe80 	call	fbe8 <alt_timestamp>
    1380:	d0a71215 	stw	r2,-25528(gp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1384:	00005980 	call	598 <cam_get_xsize>
    1388:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    138c:	00005bc0 	call	5bc <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 :
		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1390:	a97fffcc 	andi	r5,r21,65535
    1394:	280ad07a 	srli	r5,r5,1
    1398:	11bfffcc 	andi	r6,r2,65535
    139c:	a009883a 	mov	r4,r20
    13a0:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    13a4:	000fbe80 	call	fbe8 <alt_timestamp>
    13a8:	d0a71115 	stw	r2,-25532(gp)

		               grayscale = get_grayscale_picture();
    13ac:	00008d00 	call	8d0 <get_grayscale_picture>
    13b0:	1029883a 	mov	r20,r2

		               start_sobel_x = alt_timestamp();
    13b4:	000fbe80 	call	fbe8 <alt_timestamp>
		               sobel_x_with_rgb(grayscale);
    13b8:	a009883a 	mov	r4,r20
		    		                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

		               grayscale = get_grayscale_picture();

		               start_sobel_x = alt_timestamp();
    13bc:	d0a71615 	stw	r2,-25512(gp)
		               sobel_x_with_rgb(grayscale);
    13c0:	00017840 	call	1784 <sobel_x_with_rgb>
		               end_sobel_x = alt_timestamp();
    13c4:	000fbe80 	call	fbe8 <alt_timestamp>
    13c8:	d0a71515 	stw	r2,-25516(gp)
    13cc:	003f7a06 	br	11b8 <__alt_data_end+0xff0011b8>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    13d0:	00005980 	call	598 <cam_get_xsize>
    13d4:	102b883a 	mov	r21,r2
		                	cam_get_ysize(),0);
    13d8:	00005bc0 	call	5bc <cam_get_ysize>

			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    13dc:	a97fffcc 	andi	r5,r21,65535
    13e0:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13e4:	84003fcc 	andi	r16,r16,255
    13e8:	8400201c 	xori	r16,r16,128

			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    13ec:	000f883a 	mov	r7,zero
    13f0:	11bfffcc 	andi	r6,r2,65535
    13f4:	a4c9883a 	add	r4,r20,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13f8:	843fe004 	addi	r16,r16,-128

			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    13fc:	0000f440 	call	f44 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1400:	803f7c0e 	bge	r16,zero,11f4 <__alt_data_end+0xff0011f4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1404:	01000204 	movi	r4,8
    1408:	0001c600 	call	1c60 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    140c:	a009883a 	mov	r4,r20
    1410:	0001c500 	call	1c50 <vga_set_pointer>
    1414:	003f7706 	br	11f4 <__alt_data_end+0xff0011f4>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1418:	01000204 	movi	r4,8
    141c:	0001c600 	call	1c60 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1420:	a809883a 	mov	r4,r21
    1424:	0001c500 	call	1c50 <vga_set_pointer>
    1428:	003f7206 	br	11f4 <__alt_data_end+0xff0011f4>

0000142c <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    142c:	defffd04 	addi	sp,sp,-12
    1430:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel", width, height, width*height);
    1434:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1438:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel", width, height, width*height);
    143c:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1440:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel", width, height, width*height);
    1444:	21052004 	addi	r4,r4,5248
    1448:	280d883a 	mov	r6,r5
    144c:	800f883a 	mov	r7,r16
    1450:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1454:	dfc00215 	stw	ra,8(sp)
    1458:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    145c:	d0e71715 	stw	r3,-25508(gp)
	sobel_height = height;
    1460:	d0a71915 	stw	r2,-25500(gp)
	printf("Sobel size: %d x %d = %d pixel", width, height, width*height);
    1464:	00026880 	call	2688 <printf>
	if (sobel_x_result != NULL)
    1468:	d1271a17 	ldw	r4,-25496(gp)
    146c:	20000126 	beq	r4,zero,1474 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    1470:	0001e380 	call	1e38 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1474:	8423883a 	add	r17,r16,r16
    1478:	8809883a 	mov	r4,r17
    147c:	0001e240 	call	1e24 <malloc>
	if (sobel_y_result != NULL)
    1480:	d1271b17 	ldw	r4,-25492(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1484:	d0a71a15 	stw	r2,-25496(gp)
	if (sobel_y_result != NULL)
    1488:	20000126 	beq	r4,zero,1490 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    148c:	0001e380 	call	1e38 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1490:	8809883a 	mov	r4,r17
    1494:	0001e240 	call	1e24 <malloc>
	if (sobel_result != NULL)
    1498:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    149c:	d0a71b15 	stw	r2,-25492(gp)
	if (sobel_result != NULL)
    14a0:	20000126 	beq	r4,zero,14a8 <init_sobel_arrays+0x7c>
		free(sobel_result);
    14a4:	0001e380 	call	1e38 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    14a8:	8009883a 	mov	r4,r16
    14ac:	0001e240 	call	1e24 <malloc>
	if (sobel_rgb565 != NULL)
    14b0:	d1271c17 	ldw	r4,-25488(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    14b4:	d0a71815 	stw	r2,-25504(gp)
	if (sobel_rgb565 != NULL)
    14b8:	20000126 	beq	r4,zero,14c0 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    14bc:	0001e380 	call	1e38 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    14c0:	8809883a 	mov	r4,r17
    14c4:	0001e240 	call	1e24 <malloc>
    14c8:	d0a71c15 	stw	r2,-25488(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    14cc:	0005883a 	mov	r2,zero
    14d0:	04000f0e 	bge	zero,r16,1510 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    14d4:	d1a71a17 	ldw	r6,-25496(gp)
		sobel_y_result[loop] = 0;
    14d8:	d1671b17 	ldw	r5,-25492(gp)
		sobel_result[loop] = 0;
    14dc:	d1271817 	ldw	r4,-25504(gp)
    14e0:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    14e4:	30cd883a 	add	r6,r6,r3
    14e8:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    14ec:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    14f0:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    14f4:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    14f8:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    14fc:	d1271c17 	ldw	r4,-25488(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1500:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1504:	20c7883a 	add	r3,r4,r3
    1508:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    150c:	80bff11e 	bne	r16,r2,14d4 <__alt_data_end+0xff0014d4>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1510:	dfc00217 	ldw	ra,8(sp)
    1514:	dc400117 	ldw	r17,4(sp)
    1518:	dc000017 	ldw	r16,0(sp)
    151c:	dec00304 	addi	sp,sp,12
    1520:	f800283a 	ret

00001524 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1524:	defff904 	addi	sp,sp,-28
    1528:	da400717 	ldw	r9,28(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    152c:	30ffffc4 	addi	r3,r6,-1
    1530:	30800044 	addi	r2,r6,1
    1534:	3251383a 	mul	r8,r6,r9
    1538:	1a47383a 	mul	r3,r3,r9
    153c:	1245383a 	mul	r2,r2,r9
    1540:	29bfffc4 	addi	r6,r5,-1
    1544:	2b000044 	addi	r12,r5,1
    1548:	2211883a 	add	r8,r4,r8
    154c:	2155883a 	add	r10,r4,r5
    1550:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1554:	dfc00615 	stw	ra,24(sp)
    1558:	dd400515 	stw	r21,20(sp)
    155c:	dd000415 	stw	r20,16(sp)
    1560:	dcc00315 	stw	r19,12(sp)
    1564:	dc800215 	stw	r18,8(sp)
    1568:	dc400115 	stw	r17,4(sp)
    156c:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1570:	2085883a 	add	r2,r4,r2
    1574:	415b883a 	add	r13,r8,r5
    1578:	4197883a 	add	r11,r8,r6
    157c:	50d5883a 	add	r10,r10,r3
    1580:	48d3883a 	add	r9,r9,r3
    1584:	2309883a 	add	r4,r4,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1588:	54400003 	ldbu	r17,0(r10)
    158c:	4c000003 	ldbu	r16,0(r9)
    1590:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1594:	20c9883a 	add	r4,r4,r3
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1598:	6c800003 	ldbu	r18,0(r13)
    159c:	5fc00003 	ldbu	ra,0(r11)
    15a0:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    15a4:	4317883a 	add	r11,r8,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15a8:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    15ac:	118d883a 	add	r6,r2,r6
    15b0:	114b883a 	add	r5,r2,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15b4:	3b800047 	ldb	r14,1(r7)
    15b8:	25000003 	ldbu	r20,0(r4)
    15bc:	3a000087 	ldb	r8,2(r7)
    15c0:	5cc00003 	ldbu	r19,0(r11)
    15c4:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15c8:	33c00003 	ldbu	r15,0(r6)
    15cc:	3ac00187 	ldb	r11,6(r7)
    15d0:	2d400003 	ldbu	r21,0(r5)
    15d4:	398001c7 	ldb	r6,7(r7)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    15d8:	130b883a 	add	r5,r2,r12
      }
   }
   return result;
    15dc:	2b000003 	ldbu	r12,0(r5)
    15e0:	39400207 	ldb	r5,8(r7)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15e4:	8295383a 	mul	r10,r16,r10
    15e8:	8b8f383a 	mul	r7,r17,r14
    15ec:	9347383a 	mul	r3,r18,r13
    15f0:	fa53383a 	mul	r9,ra,r9
    15f4:	a211383a 	mul	r8,r20,r8
    15f8:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15fc:	7ac5383a 	mul	r2,r15,r11
    1600:	a98d383a 	mul	r6,r21,r6
    1604:	614b383a 	mul	r5,r12,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1608:	3a8f883a 	add	r7,r7,r10
    160c:	1a47883a 	add	r3,r3,r9
    1610:	3a0f883a 	add	r7,r7,r8
    1614:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1618:	1185883a 	add	r2,r2,r6
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    161c:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1620:	1145883a 	add	r2,r2,r5
}
    1624:	1885883a 	add	r2,r3,r2
    1628:	dfc00617 	ldw	ra,24(sp)
    162c:	dd400517 	ldw	r21,20(sp)
    1630:	dd000417 	ldw	r20,16(sp)
    1634:	dcc00317 	ldw	r19,12(sp)
    1638:	dc800217 	ldw	r18,8(sp)
    163c:	dc400117 	ldw	r17,4(sp)
    1640:	dc000017 	ldw	r16,0(sp)
    1644:	dec00704 	addi	sp,sp,28
    1648:	f800283a 	ret

0000164c <sobel_x>:

void sobel_x( unsigned char *source ) {
    164c:	defff704 	addi	sp,sp,-36
    1650:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1654:	d4671917 	ldw	r17,-25500(gp)
      }
   }
   return result;
}

void sobel_x( unsigned char *source ) {
    1658:	dfc00815 	stw	ra,32(sp)
    165c:	ddc00715 	stw	r23,28(sp)
    1660:	dd800615 	stw	r22,24(sp)
    1664:	dd400515 	stw	r21,20(sp)
    1668:	dd000415 	stw	r20,16(sp)
    166c:	dcc00315 	stw	r19,12(sp)
    1670:	dc800215 	stw	r18,8(sp)
    1674:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1678:	8c7fffc4 	addi	r17,r17,-1
    167c:	00800044 	movi	r2,1
    1680:	14402e0e 	bge	r2,r17,173c <sobel_x+0xf0>
    1684:	d3671717 	ldw	r13,-25508(gp)
    1688:	d3e71a17 	ldw	r15,-25496(gp)
    168c:	03800084 	movi	r14,2
    1690:	6b65883a 	add	r18,r13,r13
    1694:	9385883a 	add	r2,r18,r14
    1698:	2359883a 	add	r12,r4,r13
    169c:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16a0:	7027883a 	mov	r19,r14
    16a4:	736bc83a 	sub	r21,r14,r13
    16a8:	6ba9883a 	add	r20,r13,r14
    16ac:	9b402e0e 	bge	r19,r13,1768 <sobel_x+0x11c>
    16b0:	637f883a 	add	ra,r12,r13
    16b4:	7021883a 	mov	r16,r14
    16b8:	6357c83a 	sub	r11,r12,r13
    16bc:	ab0b883a 	add	r5,r21,r12
    16c0:	62800084 	addi	r10,r12,2
    16c4:	f813883a 	mov	r9,ra
    16c8:	a311883a 	add	r8,r20,r12
    16cc:	780f883a 	mov	r7,r15
    16d0:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    16d4:	2d800003 	ldbu	r22,0(r5)
    16d8:	40c00003 	ldbu	r3,0(r8)
    16dc:	31000003 	ldbu	r4,0(r6)
    16e0:	50800003 	ldbu	r2,0(r10)
    16e4:	b0c7883a 	add	r3,r22,r3
    16e8:	5dc00003 	ldbu	r23,0(r11)
    16ec:	1907c83a 	sub	r3,r3,r4
    16f0:	4d800003 	ldbu	r22,0(r9)
    16f4:	1909c83a 	sub	r4,r3,r4
    16f8:	1087883a 	add	r3,r2,r2
    16fc:	20c7883a 	add	r3,r4,r3
    1700:	1dc5c83a 	sub	r2,r3,r23
    1704:	1585c83a 	sub	r2,r2,r22
    1708:	3880000d 	sth	r2,0(r7)
    170c:	29400044 	addi	r5,r5,1
    1710:	5ac00044 	addi	r11,r11,1
    1714:	31800044 	addi	r6,r6,1
    1718:	52800044 	addi	r10,r10,1
    171c:	4a400044 	addi	r9,r9,1
    1720:	42000044 	addi	r8,r8,1
    1724:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1728:	617fea1e 	bne	r12,r5,16d4 <__alt_data_end+0xff0016d4>
    172c:	73800044 	addi	r14,r14,1
    1730:	f819883a 	mov	r12,ra
    1734:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1738:	847fdc16 	blt	r16,r17,16ac <__alt_data_end+0xff0016ac>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    173c:	dfc00817 	ldw	ra,32(sp)
    1740:	ddc00717 	ldw	r23,28(sp)
    1744:	dd800617 	ldw	r22,24(sp)
    1748:	dd400517 	ldw	r21,20(sp)
    174c:	dd000417 	ldw	r20,16(sp)
    1750:	dcc00317 	ldw	r19,12(sp)
    1754:	dc800217 	ldw	r18,8(sp)
    1758:	dc400117 	ldw	r17,4(sp)
    175c:	dc000017 	ldw	r16,0(sp)
    1760:	dec00904 	addi	sp,sp,36
    1764:	f800283a 	ret
    1768:	7021883a 	mov	r16,r14
    176c:	637f883a 	add	ra,r12,r13
    1770:	73800044 	addi	r14,r14,1
    1774:	f819883a 	mov	r12,ra
    1778:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    177c:	847fcb16 	blt	r16,r17,16ac <__alt_data_end+0xff0016ac>
    1780:	003fee06 	br	173c <__alt_data_end+0xff00173c>

00001784 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1784:	defff604 	addi	sp,sp,-40
    1788:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    178c:	d4e71917 	ldw	r19,-25500(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1790:	dfc00915 	stw	ra,36(sp)
    1794:	df000815 	stw	fp,32(sp)
    1798:	ddc00715 	stw	r23,28(sp)
    179c:	dd800615 	stw	r22,24(sp)
    17a0:	dd400515 	stw	r21,20(sp)
    17a4:	dd000415 	stw	r20,16(sp)
    17a8:	dc800215 	stw	r18,8(sp)
    17ac:	dc400115 	stw	r17,4(sp)
    17b0:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17b4:	00800084 	movi	r2,2
    17b8:	14c03b0e 	bge	r2,r19,18a8 <sobel_x_with_rgb+0x124>
    17bc:	2025883a 	mov	r18,r4
    17c0:	d1271717 	ldw	r4,-25508(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    17c4:	d5671a17 	ldw	r21,-25496(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    17c8:	d5271c17 	ldw	r20,-25488(gp)
    17cc:	23ffffc4 	addi	r15,r4,-1
    17d0:	908f883a 	add	r7,r18,r2
    17d4:	9cffffc4 	addi	r19,r19,-1
    17d8:	200d883a 	mov	r6,r4
    17dc:	04000044 	movi	r16,1
    17e0:	31400044 	addi	r5,r6,1
    17e4:	294b883a 	add	r5,r5,r5
    17e8:	393f883a 	add	ra,r7,r4
    17ec:	a15b883a 	add	r13,r20,r5
    17f0:	3123883a 	add	r17,r6,r4
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    17f4:	02000044 	movi	r8,1
    17f8:	84000044 	addi	r16,r16,1
    17fc:	3b3fff84 	addi	r12,r7,-2
    1800:	918d883a 	add	r6,r18,r6
    1804:	9457883a 	add	r11,r18,r17
    1808:	27d5883a 	add	r10,r4,ra
    180c:	a94b883a 	add	r5,r21,r5
    1810:	f813883a 	mov	r9,ra
    1814:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1818:	43c0200e 	bge	r8,r15,189c <sobel_x_with_rgb+0x118>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    181c:	50800003 	ldbu	r2,0(r10)
    1820:	3dc00003 	ldbu	r23,0(r7)
    1824:	37000003 	ldbu	fp,0(r6)
    1828:	48c00003 	ldbu	r3,0(r9)
    182c:	b8af883a 	add	r23,r23,r2
    1830:	65800003 	ldbu	r22,0(r12)
    1834:	bf2fc83a 	sub	r23,r23,fp
    1838:	58800003 	ldbu	r2,0(r11)
    183c:	bf2fc83a 	sub	r23,r23,fp
    1840:	18c7883a 	add	r3,r3,r3
    1844:	b8c7883a 	add	r3,r23,r3
    1848:	1d87c83a 	sub	r3,r3,r22
    184c:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1850:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    1854:	10bfffcc 	andi	r2,r2,65535
    1858:	10a0001c 	xori	r2,r2,32768
    185c:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1860:	1007d0fa 	srai	r3,r2,3
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1864:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1868:	10001b16 	blt	r2,zero,18d8 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    186c:	180692fa 	slli	r3,r3,11
    1870:	68c0000d 	sth	r3,0(r13)
    1874:	73800084 	addi	r14,r14,2
    1878:	6b400084 	addi	r13,r13,2
    187c:	63000044 	addi	r12,r12,1
    1880:	39c00044 	addi	r7,r7,1
    1884:	31800044 	addi	r6,r6,1
    1888:	4a400044 	addi	r9,r9,1
    188c:	5ac00044 	addi	r11,r11,1
    1890:	52800044 	addi	r10,r10,1
    1894:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1898:	43ffe016 	blt	r8,r15,181c <__alt_data_end+0xff00181c>
    189c:	880d883a 	mov	r6,r17
    18a0:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18a4:	9c3fce1e 	bne	r19,r16,17e0 <__alt_data_end+0xff0017e0>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    18a8:	dfc00917 	ldw	ra,36(sp)
    18ac:	df000817 	ldw	fp,32(sp)
    18b0:	ddc00717 	ldw	r23,28(sp)
    18b4:	dd800617 	ldw	r22,24(sp)
    18b8:	dd400517 	ldw	r21,20(sp)
    18bc:	dd000417 	ldw	r20,16(sp)
    18c0:	dcc00317 	ldw	r19,12(sp)
    18c4:	dc800217 	ldw	r18,8(sp)
    18c8:	dc400117 	ldw	r17,4(sp)
    18cc:	dc000017 	ldw	r16,0(sp)
    18d0:	dec00a04 	addi	sp,sp,40
    18d4:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    18d8:	0085c83a 	sub	r2,zero,r2
    18dc:	1005d0ba 	srai	r2,r2,2
    18e0:	1004917a 	slli	r2,r2,5
    18e4:	7080000d 	sth	r2,0(r14)
    18e8:	003fe206 	br	1874 <__alt_data_end+0xff001874>

000018ec <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18ec:	defff704 	addi	sp,sp,-36
    18f0:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18f4:	d4671917 	ldw	r17,-25500(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18f8:	dfc00815 	stw	ra,32(sp)
    18fc:	ddc00715 	stw	r23,28(sp)
    1900:	dd800615 	stw	r22,24(sp)
    1904:	dd400515 	stw	r21,20(sp)
    1908:	dd000415 	stw	r20,16(sp)
    190c:	dcc00315 	stw	r19,12(sp)
    1910:	dc800215 	stw	r18,8(sp)
    1914:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1918:	8c7fffc4 	addi	r17,r17,-1
    191c:	00800044 	movi	r2,1
    1920:	14402e0e 	bge	r2,r17,19dc <sobel_y+0xf0>
    1924:	d3e71717 	ldw	r15,-25508(gp)
    1928:	d3a71b17 	ldw	r14,-25492(gp)
    192c:	03400084 	movi	r13,2
    1930:	7bff883a 	add	ra,r15,r15
    1934:	fb67883a 	add	r19,ra,r13
    1938:	2019883a 	mov	r12,r4
    193c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1940:	6825883a 	mov	r18,r13
    1944:	f8a9883a 	add	r20,ra,r2
    1948:	6821883a 	mov	r16,r13
    194c:	93c01f0e 	bge	r18,r15,19cc <sobel_y+0xe0>
    1950:	67cb883a 	add	r5,r12,ra
    1954:	6821883a 	mov	r16,r13
    1958:	62800044 	addi	r10,r12,1
    195c:	61000084 	addi	r4,r12,2
    1960:	a313883a 	add	r9,r20,r12
    1964:	9b11883a 	add	r8,r19,r12
    1968:	2bd7c83a 	sub	r11,r5,r15
    196c:	700f883a 	mov	r7,r14
    1970:	600d883a 	mov	r6,r12
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1974:	35800003 	ldbu	r22,0(r6)
    1978:	20c00003 	ldbu	r3,0(r4)
    197c:	50800003 	ldbu	r2,0(r10)
    1980:	4d400003 	ldbu	r21,0(r9)
    1984:	b0c7883a 	add	r3,r22,r3
    1988:	1085883a 	add	r2,r2,r2
    198c:	2dc00003 	ldbu	r23,0(r5)
    1990:	1887883a 	add	r3,r3,r2
    1994:	45800003 	ldbu	r22,0(r8)
    1998:	1d47c83a 	sub	r3,r3,r21
    199c:	1d47c83a 	sub	r3,r3,r21
    19a0:	1dc5c83a 	sub	r2,r3,r23
    19a4:	1585c83a 	sub	r2,r2,r22
    19a8:	3880000d 	sth	r2,0(r7)
    19ac:	21000044 	addi	r4,r4,1
    19b0:	31800044 	addi	r6,r6,1
    19b4:	52800044 	addi	r10,r10,1
    19b8:	29400044 	addi	r5,r5,1
    19bc:	4a400044 	addi	r9,r9,1
    19c0:	42000044 	addi	r8,r8,1
    19c4:	39c00084 	addi	r7,r7,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19c8:	593fea1e 	bne	r11,r4,1974 <__alt_data_end+0xff001974>
    19cc:	6b400044 	addi	r13,r13,1
    19d0:	63d9883a 	add	r12,r12,r15
    19d4:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19d8:	847fdb16 	blt	r16,r17,1948 <__alt_data_end+0xff001948>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    19dc:	dfc00817 	ldw	ra,32(sp)
    19e0:	ddc00717 	ldw	r23,28(sp)
    19e4:	dd800617 	ldw	r22,24(sp)
    19e8:	dd400517 	ldw	r21,20(sp)
    19ec:	dd000417 	ldw	r20,16(sp)
    19f0:	dcc00317 	ldw	r19,12(sp)
    19f4:	dc800217 	ldw	r18,8(sp)
    19f8:	dc400117 	ldw	r17,4(sp)
    19fc:	dc000017 	ldw	r16,0(sp)
    1a00:	dec00904 	addi	sp,sp,36
    1a04:	f800283a 	ret

00001a08 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1a08:	defff504 	addi	sp,sp,-44
    1a0c:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a10:	d5671917 	ldw	r21,-25500(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1a14:	dfc00a15 	stw	ra,40(sp)
    1a18:	df000915 	stw	fp,36(sp)
    1a1c:	ddc00815 	stw	r23,32(sp)
    1a20:	dd800715 	stw	r22,28(sp)
    1a24:	dd000515 	stw	r20,20(sp)
    1a28:	dcc00415 	stw	r19,16(sp)
    1a2c:	dc800315 	stw	r18,12(sp)
    1a30:	dc400215 	stw	r17,8(sp)
    1a34:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a38:	00800084 	movi	r2,2
    1a3c:	1540470e 	bge	r2,r21,1b5c <sobel_y_with_rgb+0x154>
    1a40:	d4271717 	ldw	r16,-25508(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1a44:	d7271b17 	ldw	fp,-25492(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1a48:	d5e71c17 	ldw	r23,-25488(gp)
    1a4c:	842d883a 	add	r22,r16,r16
    1a50:	2029883a 	mov	r20,r4
    1a54:	25bf883a 	add	ra,r4,r22
    1a58:	80c00084 	addi	r3,r16,2
    1a5c:	813fffc4 	addi	r4,r16,-1
    1a60:	a2800044 	addi	r10,r20,1
    1a64:	07ffc83a 	sub	ra,zero,ra
    1a68:	ad7fffc4 	addi	r21,r21,-1
    1a6c:	8005883a 	mov	r2,r16
    1a70:	04400044 	movi	r17,1
    1a74:	d8c00015 	stw	r3,0(sp)
    1a78:	d8c00017 	ldw	r3,0(sp)
    1a7c:	12000044 	addi	r8,r2,1
    1a80:	4211883a 	add	r8,r8,r8
    1a84:	ba1d883a 	add	r14,r23,r8
    1a88:	1427883a 	add	r19,r2,r16
    1a8c:	55a5883a 	add	r18,r10,r22
    1a90:	1885883a 	add	r2,r3,r2
    1a94:	8c400044 	addi	r17,r17,1
    1a98:	537fffc4 	addi	r13,r10,-1
    1a9c:	53000044 	addi	r12,r10,1
    1aa0:	a4d7883a 	add	r11,r20,r19
    1aa4:	a093883a 	add	r9,r20,r2
    1aa8:	e211883a 	add	r8,fp,r8
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1aac:	900f883a 	mov	r7,r18
    1ab0:	701f883a 	mov	r15,r14
    1ab4:	00000b06 	br	1ae4 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1ab8:	180692fa 	slli	r3,r3,11
    1abc:	70c0000d 	sth	r3,0(r14)
    1ac0:	7bc00084 	addi	r15,r15,2
    1ac4:	73800084 	addi	r14,r14,2
    1ac8:	6b400044 	addi	r13,r13,1
    1acc:	52800044 	addi	r10,r10,1
    1ad0:	63000044 	addi	r12,r12,1
    1ad4:	5ac00044 	addi	r11,r11,1
    1ad8:	39c00044 	addi	r7,r7,1
    1adc:	4a400044 	addi	r9,r9,1
    1ae0:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ae4:	3fc5883a 	add	r2,r7,ra
    1ae8:	1100180e 	bge	r2,r4,1b4c <sobel_y_with_rgb+0x144>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1aec:	60800003 	ldbu	r2,0(r12)
    1af0:	69800003 	ldbu	r6,0(r13)
    1af4:	50c00003 	ldbu	r3,0(r10)
    1af8:	39400003 	ldbu	r5,0(r7)
    1afc:	308d883a 	add	r6,r6,r2
    1b00:	18c7883a 	add	r3,r3,r3
    1b04:	58800003 	ldbu	r2,0(r11)
    1b08:	30c7883a 	add	r3,r6,r3
    1b0c:	1947c83a 	sub	r3,r3,r5
    1b10:	49800003 	ldbu	r6,0(r9)
    1b14:	1947c83a 	sub	r3,r3,r5
    1b18:	1885c83a 	sub	r2,r3,r2
    1b1c:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1b20:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1b24:	10bfffcc 	andi	r2,r2,65535
    1b28:	10a0001c 	xori	r2,r2,32768
    1b2c:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1b30:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1b34:	103fe00e 	bge	r2,zero,1ab8 <__alt_data_end+0xff001ab8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1b38:	0085c83a 	sub	r2,zero,r2
    1b3c:	1005d0ba 	srai	r2,r2,2
    1b40:	1004917a 	slli	r2,r2,5
    1b44:	7880000d 	sth	r2,0(r15)
    1b48:	003fdd06 	br	1ac0 <__alt_data_end+0xff001ac0>
    1b4c:	9415c83a 	sub	r10,r18,r16
    1b50:	fc3fc83a 	sub	ra,ra,r16
    1b54:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b58:	ac7fc71e 	bne	r21,r17,1a78 <__alt_data_end+0xff001a78>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1b5c:	dfc00a17 	ldw	ra,40(sp)
    1b60:	df000917 	ldw	fp,36(sp)
    1b64:	ddc00817 	ldw	r23,32(sp)
    1b68:	dd800717 	ldw	r22,28(sp)
    1b6c:	dd400617 	ldw	r21,24(sp)
    1b70:	dd000517 	ldw	r20,20(sp)
    1b74:	dcc00417 	ldw	r19,16(sp)
    1b78:	dc800317 	ldw	r18,12(sp)
    1b7c:	dc400217 	ldw	r17,8(sp)
    1b80:	dc000117 	ldw	r16,4(sp)
    1b84:	dec00b04 	addi	sp,sp,44
    1b88:	f800283a 	ret

00001b8c <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b8c:	d0a71917 	ldw	r2,-25500(gp)
    1b90:	02400084 	movi	r9,2
    1b94:	4880290e 	bge	r9,r2,1c3c <sobel_threshold+0xb0>
    1b98:	223fffcc 	andi	r8,r4,65535
    1b9c:	d0e71717 	ldw	r3,-25508(gp)
    1ba0:	4220001c 	xori	r8,r8,32768
    1ba4:	01c00044 	movi	r7,1
    1ba8:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bac:	48c0200e 	bge	r9,r3,1c30 <sobel_threshold+0xa4>
    1bb0:	01400044 	movi	r5,1
    1bb4:	00000c06 	br	1be8 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1bb8:	2080000f 	ldh	r2,0(r4)
    1bbc:	10001916 	blt	r2,zero,1c24 <sobel_threshold+0x98>
    1bc0:	3085883a 	add	r2,r6,r2
    1bc4:	10bfffcc 	andi	r2,r2,65535
    1bc8:	10a0001c 	xori	r2,r2,32768
    1bcc:	10a00004 	addi	r2,r2,-32768
    1bd0:	4084803a 	cmplt	r2,r8,r2
    1bd4:	0085c83a 	sub	r2,zero,r2
    1bd8:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bdc:	d0e71717 	ldw	r3,-25508(gp)
    1be0:	18bfffc4 	addi	r2,r3,-1
    1be4:	2880110e 	bge	r5,r2,1c2c <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1be8:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bec:	d1a71b17 	ldw	r6,-25492(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bf0:	d1271a17 	ldw	r4,-25496(gp)
    1bf4:	1947883a 	add	r3,r3,r5
    1bf8:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bfc:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1c00:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1c04:	3180000f 	ldh	r6,0(r6)
    1c08:	d0a71817 	ldw	r2,-25504(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c0c:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1c10:	10c7883a 	add	r3,r2,r3
    1c14:	303fe80e 	bge	r6,zero,1bb8 <__alt_data_end+0xff001bb8>
    1c18:	2080000f 	ldh	r2,0(r4)
    1c1c:	018dc83a 	sub	r6,zero,r6
    1c20:	103fe70e 	bge	r2,zero,1bc0 <__alt_data_end+0xff001bc0>
    1c24:	0085c83a 	sub	r2,zero,r2
    1c28:	003fe506 	br	1bc0 <__alt_data_end+0xff001bc0>
    1c2c:	d0a71917 	ldw	r2,-25500(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c30:	39c00044 	addi	r7,r7,1
    1c34:	113fffc4 	addi	r4,r2,-1
    1c38:	393fdc16 	blt	r7,r4,1bac <__alt_data_end+0xff001bac>
    1c3c:	f800283a 	ret

00001c40 <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1c40:	d0a71c17 	ldw	r2,-25488(gp)
    1c44:	f800283a 	ret

00001c48 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1c48:	d0a71817 	ldw	r2,-25504(gp)
    1c4c:	f800283a 	ret

00001c50 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1c50:	00804034 	movhi	r2,256
    1c54:	10843404 	addi	r2,r2,4304
    1c58:	11000035 	stwio	r4,0(r2)
    1c5c:	f800283a 	ret

00001c60 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1c60:	00804034 	movhi	r2,256
    1c64:	10843504 	addi	r2,r2,4308
    1c68:	11000025 	stbio	r4,0(r2)
    1c6c:	f800283a 	ret

00001c70 <__divsi3>:
    1c70:	20001b16 	blt	r4,zero,1ce0 <__divsi3+0x70>
    1c74:	000f883a 	mov	r7,zero
    1c78:	28001616 	blt	r5,zero,1cd4 <__divsi3+0x64>
    1c7c:	200d883a 	mov	r6,r4
    1c80:	29001a2e 	bgeu	r5,r4,1cec <__divsi3+0x7c>
    1c84:	00800804 	movi	r2,32
    1c88:	00c00044 	movi	r3,1
    1c8c:	00000106 	br	1c94 <__divsi3+0x24>
    1c90:	10000d26 	beq	r2,zero,1cc8 <__divsi3+0x58>
    1c94:	294b883a 	add	r5,r5,r5
    1c98:	10bfffc4 	addi	r2,r2,-1
    1c9c:	18c7883a 	add	r3,r3,r3
    1ca0:	293ffb36 	bltu	r5,r4,1c90 <__alt_data_end+0xff001c90>
    1ca4:	0005883a 	mov	r2,zero
    1ca8:	18000726 	beq	r3,zero,1cc8 <__divsi3+0x58>
    1cac:	0005883a 	mov	r2,zero
    1cb0:	31400236 	bltu	r6,r5,1cbc <__divsi3+0x4c>
    1cb4:	314dc83a 	sub	r6,r6,r5
    1cb8:	10c4b03a 	or	r2,r2,r3
    1cbc:	1806d07a 	srli	r3,r3,1
    1cc0:	280ad07a 	srli	r5,r5,1
    1cc4:	183ffa1e 	bne	r3,zero,1cb0 <__alt_data_end+0xff001cb0>
    1cc8:	38000126 	beq	r7,zero,1cd0 <__divsi3+0x60>
    1ccc:	0085c83a 	sub	r2,zero,r2
    1cd0:	f800283a 	ret
    1cd4:	014bc83a 	sub	r5,zero,r5
    1cd8:	39c0005c 	xori	r7,r7,1
    1cdc:	003fe706 	br	1c7c <__alt_data_end+0xff001c7c>
    1ce0:	0109c83a 	sub	r4,zero,r4
    1ce4:	01c00044 	movi	r7,1
    1ce8:	003fe306 	br	1c78 <__alt_data_end+0xff001c78>
    1cec:	00c00044 	movi	r3,1
    1cf0:	003fee06 	br	1cac <__alt_data_end+0xff001cac>

00001cf4 <__modsi3>:
    1cf4:	20001716 	blt	r4,zero,1d54 <__modsi3+0x60>
    1cf8:	000f883a 	mov	r7,zero
    1cfc:	2005883a 	mov	r2,r4
    1d00:	28001216 	blt	r5,zero,1d4c <__modsi3+0x58>
    1d04:	2900162e 	bgeu	r5,r4,1d60 <__modsi3+0x6c>
    1d08:	01800804 	movi	r6,32
    1d0c:	00c00044 	movi	r3,1
    1d10:	00000106 	br	1d18 <__modsi3+0x24>
    1d14:	30000a26 	beq	r6,zero,1d40 <__modsi3+0x4c>
    1d18:	294b883a 	add	r5,r5,r5
    1d1c:	31bfffc4 	addi	r6,r6,-1
    1d20:	18c7883a 	add	r3,r3,r3
    1d24:	293ffb36 	bltu	r5,r4,1d14 <__alt_data_end+0xff001d14>
    1d28:	18000526 	beq	r3,zero,1d40 <__modsi3+0x4c>
    1d2c:	1806d07a 	srli	r3,r3,1
    1d30:	11400136 	bltu	r2,r5,1d38 <__modsi3+0x44>
    1d34:	1145c83a 	sub	r2,r2,r5
    1d38:	280ad07a 	srli	r5,r5,1
    1d3c:	183ffb1e 	bne	r3,zero,1d2c <__alt_data_end+0xff001d2c>
    1d40:	38000126 	beq	r7,zero,1d48 <__modsi3+0x54>
    1d44:	0085c83a 	sub	r2,zero,r2
    1d48:	f800283a 	ret
    1d4c:	014bc83a 	sub	r5,zero,r5
    1d50:	003fec06 	br	1d04 <__alt_data_end+0xff001d04>
    1d54:	0109c83a 	sub	r4,zero,r4
    1d58:	01c00044 	movi	r7,1
    1d5c:	003fe706 	br	1cfc <__alt_data_end+0xff001cfc>
    1d60:	00c00044 	movi	r3,1
    1d64:	003ff106 	br	1d2c <__alt_data_end+0xff001d2c>

00001d68 <__udivsi3>:
    1d68:	200d883a 	mov	r6,r4
    1d6c:	2900152e 	bgeu	r5,r4,1dc4 <__udivsi3+0x5c>
    1d70:	28001416 	blt	r5,zero,1dc4 <__udivsi3+0x5c>
    1d74:	00800804 	movi	r2,32
    1d78:	00c00044 	movi	r3,1
    1d7c:	00000206 	br	1d88 <__udivsi3+0x20>
    1d80:	10000e26 	beq	r2,zero,1dbc <__udivsi3+0x54>
    1d84:	28000516 	blt	r5,zero,1d9c <__udivsi3+0x34>
    1d88:	294b883a 	add	r5,r5,r5
    1d8c:	10bfffc4 	addi	r2,r2,-1
    1d90:	18c7883a 	add	r3,r3,r3
    1d94:	293ffa36 	bltu	r5,r4,1d80 <__alt_data_end+0xff001d80>
    1d98:	18000826 	beq	r3,zero,1dbc <__udivsi3+0x54>
    1d9c:	0005883a 	mov	r2,zero
    1da0:	31400236 	bltu	r6,r5,1dac <__udivsi3+0x44>
    1da4:	314dc83a 	sub	r6,r6,r5
    1da8:	10c4b03a 	or	r2,r2,r3
    1dac:	1806d07a 	srli	r3,r3,1
    1db0:	280ad07a 	srli	r5,r5,1
    1db4:	183ffa1e 	bne	r3,zero,1da0 <__alt_data_end+0xff001da0>
    1db8:	f800283a 	ret
    1dbc:	0005883a 	mov	r2,zero
    1dc0:	f800283a 	ret
    1dc4:	00c00044 	movi	r3,1
    1dc8:	003ff406 	br	1d9c <__alt_data_end+0xff001d9c>

00001dcc <__umodsi3>:
    1dcc:	2005883a 	mov	r2,r4
    1dd0:	2900122e 	bgeu	r5,r4,1e1c <__umodsi3+0x50>
    1dd4:	28001116 	blt	r5,zero,1e1c <__umodsi3+0x50>
    1dd8:	01800804 	movi	r6,32
    1ddc:	00c00044 	movi	r3,1
    1de0:	00000206 	br	1dec <__umodsi3+0x20>
    1de4:	30000c26 	beq	r6,zero,1e18 <__umodsi3+0x4c>
    1de8:	28000516 	blt	r5,zero,1e00 <__umodsi3+0x34>
    1dec:	294b883a 	add	r5,r5,r5
    1df0:	31bfffc4 	addi	r6,r6,-1
    1df4:	18c7883a 	add	r3,r3,r3
    1df8:	293ffa36 	bltu	r5,r4,1de4 <__alt_data_end+0xff001de4>
    1dfc:	18000626 	beq	r3,zero,1e18 <__umodsi3+0x4c>
    1e00:	1806d07a 	srli	r3,r3,1
    1e04:	11400136 	bltu	r2,r5,1e0c <__umodsi3+0x40>
    1e08:	1145c83a 	sub	r2,r2,r5
    1e0c:	280ad07a 	srli	r5,r5,1
    1e10:	183ffb1e 	bne	r3,zero,1e00 <__alt_data_end+0xff001e00>
    1e14:	f800283a 	ret
    1e18:	f800283a 	ret
    1e1c:	00c00044 	movi	r3,1
    1e20:	003ff706 	br	1e00 <__alt_data_end+0xff001e00>

00001e24 <malloc>:
    1e24:	00800074 	movhi	r2,1
    1e28:	108cd904 	addi	r2,r2,13156
    1e2c:	200b883a 	mov	r5,r4
    1e30:	11000017 	ldw	r4,0(r2)
    1e34:	0001e4c1 	jmpi	1e4c <_malloc_r>

00001e38 <free>:
    1e38:	00800074 	movhi	r2,1
    1e3c:	108cd904 	addi	r2,r2,13156
    1e40:	200b883a 	mov	r5,r4
    1e44:	11000017 	ldw	r4,0(r2)
    1e48:	0006c9c1 	jmpi	6c9c <_free_r>

00001e4c <_malloc_r>:
    1e4c:	defff504 	addi	sp,sp,-44
    1e50:	dc800315 	stw	r18,12(sp)
    1e54:	dfc00a15 	stw	ra,40(sp)
    1e58:	df000915 	stw	fp,36(sp)
    1e5c:	ddc00815 	stw	r23,32(sp)
    1e60:	dd800715 	stw	r22,28(sp)
    1e64:	dd400615 	stw	r21,24(sp)
    1e68:	dd000515 	stw	r20,20(sp)
    1e6c:	dcc00415 	stw	r19,16(sp)
    1e70:	dc400215 	stw	r17,8(sp)
    1e74:	dc000115 	stw	r16,4(sp)
    1e78:	288002c4 	addi	r2,r5,11
    1e7c:	00c00584 	movi	r3,22
    1e80:	2025883a 	mov	r18,r4
    1e84:	18807f2e 	bgeu	r3,r2,2084 <_malloc_r+0x238>
    1e88:	047ffe04 	movi	r17,-8
    1e8c:	1462703a 	and	r17,r2,r17
    1e90:	8800a316 	blt	r17,zero,2120 <_malloc_r+0x2d4>
    1e94:	8940a236 	bltu	r17,r5,2120 <_malloc_r+0x2d4>
    1e98:	000eb340 	call	eb34 <__malloc_lock>
    1e9c:	00807dc4 	movi	r2,503
    1ea0:	1441e92e 	bgeu	r2,r17,2648 <_malloc_r+0x7fc>
    1ea4:	8804d27a 	srli	r2,r17,9
    1ea8:	1000a126 	beq	r2,zero,2130 <_malloc_r+0x2e4>
    1eac:	00c00104 	movi	r3,4
    1eb0:	18811e36 	bltu	r3,r2,232c <_malloc_r+0x4e0>
    1eb4:	8804d1ba 	srli	r2,r17,6
    1eb8:	12000e44 	addi	r8,r2,57
    1ebc:	11c00e04 	addi	r7,r2,56
    1ec0:	4209883a 	add	r4,r8,r8
    1ec4:	04c00074 	movhi	r19,1
    1ec8:	2109883a 	add	r4,r4,r4
    1ecc:	9cc62b04 	addi	r19,r19,6316
    1ed0:	2109883a 	add	r4,r4,r4
    1ed4:	9909883a 	add	r4,r19,r4
    1ed8:	24000117 	ldw	r16,4(r4)
    1edc:	213ffe04 	addi	r4,r4,-8
    1ee0:	24009726 	beq	r4,r16,2140 <_malloc_r+0x2f4>
    1ee4:	80800117 	ldw	r2,4(r16)
    1ee8:	01bfff04 	movi	r6,-4
    1eec:	014003c4 	movi	r5,15
    1ef0:	1184703a 	and	r2,r2,r6
    1ef4:	1447c83a 	sub	r3,r2,r17
    1ef8:	28c00716 	blt	r5,r3,1f18 <_malloc_r+0xcc>
    1efc:	1800920e 	bge	r3,zero,2148 <_malloc_r+0x2fc>
    1f00:	84000317 	ldw	r16,12(r16)
    1f04:	24008e26 	beq	r4,r16,2140 <_malloc_r+0x2f4>
    1f08:	80800117 	ldw	r2,4(r16)
    1f0c:	1184703a 	and	r2,r2,r6
    1f10:	1447c83a 	sub	r3,r2,r17
    1f14:	28fff90e 	bge	r5,r3,1efc <__alt_data_end+0xff001efc>
    1f18:	3809883a 	mov	r4,r7
    1f1c:	01800074 	movhi	r6,1
    1f20:	9c000417 	ldw	r16,16(r19)
    1f24:	31862b04 	addi	r6,r6,6316
    1f28:	32000204 	addi	r8,r6,8
    1f2c:	82013426 	beq	r16,r8,2400 <_malloc_r+0x5b4>
    1f30:	80c00117 	ldw	r3,4(r16)
    1f34:	00bfff04 	movi	r2,-4
    1f38:	188e703a 	and	r7,r3,r2
    1f3c:	3c45c83a 	sub	r2,r7,r17
    1f40:	00c003c4 	movi	r3,15
    1f44:	18811f16 	blt	r3,r2,23c4 <_malloc_r+0x578>
    1f48:	32000515 	stw	r8,20(r6)
    1f4c:	32000415 	stw	r8,16(r6)
    1f50:	10007f0e 	bge	r2,zero,2150 <_malloc_r+0x304>
    1f54:	00807fc4 	movi	r2,511
    1f58:	11c0fd36 	bltu	r2,r7,2350 <_malloc_r+0x504>
    1f5c:	3806d0fa 	srli	r3,r7,3
    1f60:	01c00044 	movi	r7,1
    1f64:	30800117 	ldw	r2,4(r6)
    1f68:	19400044 	addi	r5,r3,1
    1f6c:	294b883a 	add	r5,r5,r5
    1f70:	1807d0ba 	srai	r3,r3,2
    1f74:	294b883a 	add	r5,r5,r5
    1f78:	294b883a 	add	r5,r5,r5
    1f7c:	298b883a 	add	r5,r5,r6
    1f80:	38c6983a 	sll	r3,r7,r3
    1f84:	29c00017 	ldw	r7,0(r5)
    1f88:	2a7ffe04 	addi	r9,r5,-8
    1f8c:	1886b03a 	or	r3,r3,r2
    1f90:	82400315 	stw	r9,12(r16)
    1f94:	81c00215 	stw	r7,8(r16)
    1f98:	30c00115 	stw	r3,4(r6)
    1f9c:	2c000015 	stw	r16,0(r5)
    1fa0:	3c000315 	stw	r16,12(r7)
    1fa4:	2005d0ba 	srai	r2,r4,2
    1fa8:	01400044 	movi	r5,1
    1fac:	288a983a 	sll	r5,r5,r2
    1fb0:	19406f36 	bltu	r3,r5,2170 <_malloc_r+0x324>
    1fb4:	28c4703a 	and	r2,r5,r3
    1fb8:	10000a1e 	bne	r2,zero,1fe4 <_malloc_r+0x198>
    1fbc:	00bfff04 	movi	r2,-4
    1fc0:	294b883a 	add	r5,r5,r5
    1fc4:	2088703a 	and	r4,r4,r2
    1fc8:	28c4703a 	and	r2,r5,r3
    1fcc:	21000104 	addi	r4,r4,4
    1fd0:	1000041e 	bne	r2,zero,1fe4 <_malloc_r+0x198>
    1fd4:	294b883a 	add	r5,r5,r5
    1fd8:	28c4703a 	and	r2,r5,r3
    1fdc:	21000104 	addi	r4,r4,4
    1fe0:	103ffc26 	beq	r2,zero,1fd4 <__alt_data_end+0xff001fd4>
    1fe4:	02bfff04 	movi	r10,-4
    1fe8:	024003c4 	movi	r9,15
    1fec:	21800044 	addi	r6,r4,1
    1ff0:	318d883a 	add	r6,r6,r6
    1ff4:	318d883a 	add	r6,r6,r6
    1ff8:	318d883a 	add	r6,r6,r6
    1ffc:	998d883a 	add	r6,r19,r6
    2000:	333ffe04 	addi	r12,r6,-8
    2004:	2017883a 	mov	r11,r4
    2008:	31800104 	addi	r6,r6,4
    200c:	34000017 	ldw	r16,0(r6)
    2010:	31fffd04 	addi	r7,r6,-12
    2014:	81c0041e 	bne	r16,r7,2028 <_malloc_r+0x1dc>
    2018:	0000fb06 	br	2408 <_malloc_r+0x5bc>
    201c:	1801030e 	bge	r3,zero,242c <_malloc_r+0x5e0>
    2020:	84000317 	ldw	r16,12(r16)
    2024:	81c0f826 	beq	r16,r7,2408 <_malloc_r+0x5bc>
    2028:	80800117 	ldw	r2,4(r16)
    202c:	1284703a 	and	r2,r2,r10
    2030:	1447c83a 	sub	r3,r2,r17
    2034:	48fff90e 	bge	r9,r3,201c <__alt_data_end+0xff00201c>
    2038:	80800317 	ldw	r2,12(r16)
    203c:	81000217 	ldw	r4,8(r16)
    2040:	89400054 	ori	r5,r17,1
    2044:	81400115 	stw	r5,4(r16)
    2048:	20800315 	stw	r2,12(r4)
    204c:	11000215 	stw	r4,8(r2)
    2050:	8463883a 	add	r17,r16,r17
    2054:	9c400515 	stw	r17,20(r19)
    2058:	9c400415 	stw	r17,16(r19)
    205c:	18800054 	ori	r2,r3,1
    2060:	88800115 	stw	r2,4(r17)
    2064:	8a000315 	stw	r8,12(r17)
    2068:	8a000215 	stw	r8,8(r17)
    206c:	88e3883a 	add	r17,r17,r3
    2070:	88c00015 	stw	r3,0(r17)
    2074:	9009883a 	mov	r4,r18
    2078:	000eb580 	call	eb58 <__malloc_unlock>
    207c:	80800204 	addi	r2,r16,8
    2080:	00001b06 	br	20f0 <_malloc_r+0x2a4>
    2084:	04400404 	movi	r17,16
    2088:	89402536 	bltu	r17,r5,2120 <_malloc_r+0x2d4>
    208c:	000eb340 	call	eb34 <__malloc_lock>
    2090:	00800184 	movi	r2,6
    2094:	01000084 	movi	r4,2
    2098:	04c00074 	movhi	r19,1
    209c:	1085883a 	add	r2,r2,r2
    20a0:	9cc62b04 	addi	r19,r19,6316
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	9885883a 	add	r2,r19,r2
    20ac:	14000117 	ldw	r16,4(r2)
    20b0:	10fffe04 	addi	r3,r2,-8
    20b4:	80c0d926 	beq	r16,r3,241c <_malloc_r+0x5d0>
    20b8:	80c00117 	ldw	r3,4(r16)
    20bc:	81000317 	ldw	r4,12(r16)
    20c0:	00bfff04 	movi	r2,-4
    20c4:	1884703a 	and	r2,r3,r2
    20c8:	81400217 	ldw	r5,8(r16)
    20cc:	8085883a 	add	r2,r16,r2
    20d0:	10c00117 	ldw	r3,4(r2)
    20d4:	29000315 	stw	r4,12(r5)
    20d8:	21400215 	stw	r5,8(r4)
    20dc:	18c00054 	ori	r3,r3,1
    20e0:	10c00115 	stw	r3,4(r2)
    20e4:	9009883a 	mov	r4,r18
    20e8:	000eb580 	call	eb58 <__malloc_unlock>
    20ec:	80800204 	addi	r2,r16,8
    20f0:	dfc00a17 	ldw	ra,40(sp)
    20f4:	df000917 	ldw	fp,36(sp)
    20f8:	ddc00817 	ldw	r23,32(sp)
    20fc:	dd800717 	ldw	r22,28(sp)
    2100:	dd400617 	ldw	r21,24(sp)
    2104:	dd000517 	ldw	r20,20(sp)
    2108:	dcc00417 	ldw	r19,16(sp)
    210c:	dc800317 	ldw	r18,12(sp)
    2110:	dc400217 	ldw	r17,8(sp)
    2114:	dc000117 	ldw	r16,4(sp)
    2118:	dec00b04 	addi	sp,sp,44
    211c:	f800283a 	ret
    2120:	00800304 	movi	r2,12
    2124:	90800015 	stw	r2,0(r18)
    2128:	0005883a 	mov	r2,zero
    212c:	003ff006 	br	20f0 <__alt_data_end+0xff0020f0>
    2130:	01002004 	movi	r4,128
    2134:	02001004 	movi	r8,64
    2138:	01c00fc4 	movi	r7,63
    213c:	003f6106 	br	1ec4 <__alt_data_end+0xff001ec4>
    2140:	4009883a 	mov	r4,r8
    2144:	003f7506 	br	1f1c <__alt_data_end+0xff001f1c>
    2148:	81000317 	ldw	r4,12(r16)
    214c:	003fde06 	br	20c8 <__alt_data_end+0xff0020c8>
    2150:	81c5883a 	add	r2,r16,r7
    2154:	11400117 	ldw	r5,4(r2)
    2158:	9009883a 	mov	r4,r18
    215c:	29400054 	ori	r5,r5,1
    2160:	11400115 	stw	r5,4(r2)
    2164:	000eb580 	call	eb58 <__malloc_unlock>
    2168:	80800204 	addi	r2,r16,8
    216c:	003fe006 	br	20f0 <__alt_data_end+0xff0020f0>
    2170:	9c000217 	ldw	r16,8(r19)
    2174:	00bfff04 	movi	r2,-4
    2178:	85800117 	ldw	r22,4(r16)
    217c:	b0ac703a 	and	r22,r22,r2
    2180:	b4400336 	bltu	r22,r17,2190 <_malloc_r+0x344>
    2184:	b445c83a 	sub	r2,r22,r17
    2188:	00c003c4 	movi	r3,15
    218c:	18805d16 	blt	r3,r2,2304 <_malloc_r+0x4b8>
    2190:	05c00074 	movhi	r23,1
    2194:	00800074 	movhi	r2,1
    2198:	1093f504 	addi	r2,r2,20436
    219c:	bdccd604 	addi	r23,r23,13144
    21a0:	15400017 	ldw	r21,0(r2)
    21a4:	b8c00017 	ldw	r3,0(r23)
    21a8:	00bfffc4 	movi	r2,-1
    21ac:	858d883a 	add	r6,r16,r22
    21b0:	8d6b883a 	add	r21,r17,r21
    21b4:	1880ea26 	beq	r3,r2,2560 <_malloc_r+0x714>
    21b8:	ad4403c4 	addi	r21,r21,4111
    21bc:	00bc0004 	movi	r2,-4096
    21c0:	a8aa703a 	and	r21,r21,r2
    21c4:	a80b883a 	mov	r5,r21
    21c8:	9009883a 	mov	r4,r18
    21cc:	d9800015 	stw	r6,0(sp)
    21d0:	00027980 	call	2798 <_sbrk_r>
    21d4:	1029883a 	mov	r20,r2
    21d8:	00bfffc4 	movi	r2,-1
    21dc:	d9800017 	ldw	r6,0(sp)
    21e0:	a080e826 	beq	r20,r2,2584 <_malloc_r+0x738>
    21e4:	a180a636 	bltu	r20,r6,2480 <_malloc_r+0x634>
    21e8:	07000074 	movhi	fp,1
    21ec:	e7140304 	addi	fp,fp,20492
    21f0:	e0800017 	ldw	r2,0(fp)
    21f4:	a887883a 	add	r3,r21,r2
    21f8:	e0c00015 	stw	r3,0(fp)
    21fc:	3500e626 	beq	r6,r20,2598 <_malloc_r+0x74c>
    2200:	b9000017 	ldw	r4,0(r23)
    2204:	00bfffc4 	movi	r2,-1
    2208:	2080ee26 	beq	r4,r2,25c4 <_malloc_r+0x778>
    220c:	a185c83a 	sub	r2,r20,r6
    2210:	10c5883a 	add	r2,r2,r3
    2214:	e0800015 	stw	r2,0(fp)
    2218:	a0c001cc 	andi	r3,r20,7
    221c:	1800bc26 	beq	r3,zero,2510 <_malloc_r+0x6c4>
    2220:	a0e9c83a 	sub	r20,r20,r3
    2224:	00840204 	movi	r2,4104
    2228:	a5000204 	addi	r20,r20,8
    222c:	10c7c83a 	sub	r3,r2,r3
    2230:	a545883a 	add	r2,r20,r21
    2234:	1083ffcc 	andi	r2,r2,4095
    2238:	18abc83a 	sub	r21,r3,r2
    223c:	a80b883a 	mov	r5,r21
    2240:	9009883a 	mov	r4,r18
    2244:	00027980 	call	2798 <_sbrk_r>
    2248:	00ffffc4 	movi	r3,-1
    224c:	10c0e126 	beq	r2,r3,25d4 <_malloc_r+0x788>
    2250:	1505c83a 	sub	r2,r2,r20
    2254:	1545883a 	add	r2,r2,r21
    2258:	10800054 	ori	r2,r2,1
    225c:	e0c00017 	ldw	r3,0(fp)
    2260:	9d000215 	stw	r20,8(r19)
    2264:	a0800115 	stw	r2,4(r20)
    2268:	a8c7883a 	add	r3,r21,r3
    226c:	e0c00015 	stw	r3,0(fp)
    2270:	84c00e26 	beq	r16,r19,22ac <_malloc_r+0x460>
    2274:	018003c4 	movi	r6,15
    2278:	3580a72e 	bgeu	r6,r22,2518 <_malloc_r+0x6cc>
    227c:	81400117 	ldw	r5,4(r16)
    2280:	013ffe04 	movi	r4,-8
    2284:	b0bffd04 	addi	r2,r22,-12
    2288:	1104703a 	and	r2,r2,r4
    228c:	2900004c 	andi	r4,r5,1
    2290:	2088b03a 	or	r4,r4,r2
    2294:	81000115 	stw	r4,4(r16)
    2298:	01400144 	movi	r5,5
    229c:	8089883a 	add	r4,r16,r2
    22a0:	21400115 	stw	r5,4(r4)
    22a4:	21400215 	stw	r5,8(r4)
    22a8:	3080cd36 	bltu	r6,r2,25e0 <_malloc_r+0x794>
    22ac:	00800074 	movhi	r2,1
    22b0:	1093f404 	addi	r2,r2,20432
    22b4:	11000017 	ldw	r4,0(r2)
    22b8:	20c0012e 	bgeu	r4,r3,22c0 <_malloc_r+0x474>
    22bc:	10c00015 	stw	r3,0(r2)
    22c0:	00800074 	movhi	r2,1
    22c4:	1093f304 	addi	r2,r2,20428
    22c8:	11000017 	ldw	r4,0(r2)
    22cc:	9c000217 	ldw	r16,8(r19)
    22d0:	20c0012e 	bgeu	r4,r3,22d8 <_malloc_r+0x48c>
    22d4:	10c00015 	stw	r3,0(r2)
    22d8:	80c00117 	ldw	r3,4(r16)
    22dc:	00bfff04 	movi	r2,-4
    22e0:	1886703a 	and	r3,r3,r2
    22e4:	1c45c83a 	sub	r2,r3,r17
    22e8:	1c400236 	bltu	r3,r17,22f4 <_malloc_r+0x4a8>
    22ec:	00c003c4 	movi	r3,15
    22f0:	18800416 	blt	r3,r2,2304 <_malloc_r+0x4b8>
    22f4:	9009883a 	mov	r4,r18
    22f8:	000eb580 	call	eb58 <__malloc_unlock>
    22fc:	0005883a 	mov	r2,zero
    2300:	003f7b06 	br	20f0 <__alt_data_end+0xff0020f0>
    2304:	88c00054 	ori	r3,r17,1
    2308:	80c00115 	stw	r3,4(r16)
    230c:	8463883a 	add	r17,r16,r17
    2310:	10800054 	ori	r2,r2,1
    2314:	9c400215 	stw	r17,8(r19)
    2318:	88800115 	stw	r2,4(r17)
    231c:	9009883a 	mov	r4,r18
    2320:	000eb580 	call	eb58 <__malloc_unlock>
    2324:	80800204 	addi	r2,r16,8
    2328:	003f7106 	br	20f0 <__alt_data_end+0xff0020f0>
    232c:	00c00504 	movi	r3,20
    2330:	18804a2e 	bgeu	r3,r2,245c <_malloc_r+0x610>
    2334:	00c01504 	movi	r3,84
    2338:	18806e36 	bltu	r3,r2,24f4 <_malloc_r+0x6a8>
    233c:	8804d33a 	srli	r2,r17,12
    2340:	12001bc4 	addi	r8,r2,111
    2344:	11c01b84 	addi	r7,r2,110
    2348:	4209883a 	add	r4,r8,r8
    234c:	003edd06 	br	1ec4 <__alt_data_end+0xff001ec4>
    2350:	3804d27a 	srli	r2,r7,9
    2354:	00c00104 	movi	r3,4
    2358:	1880442e 	bgeu	r3,r2,246c <_malloc_r+0x620>
    235c:	00c00504 	movi	r3,20
    2360:	18808136 	bltu	r3,r2,2568 <_malloc_r+0x71c>
    2364:	11401704 	addi	r5,r2,92
    2368:	10c016c4 	addi	r3,r2,91
    236c:	294b883a 	add	r5,r5,r5
    2370:	294b883a 	add	r5,r5,r5
    2374:	294b883a 	add	r5,r5,r5
    2378:	994b883a 	add	r5,r19,r5
    237c:	28800017 	ldw	r2,0(r5)
    2380:	01800074 	movhi	r6,1
    2384:	297ffe04 	addi	r5,r5,-8
    2388:	31862b04 	addi	r6,r6,6316
    238c:	28806526 	beq	r5,r2,2524 <_malloc_r+0x6d8>
    2390:	01bfff04 	movi	r6,-4
    2394:	10c00117 	ldw	r3,4(r2)
    2398:	1986703a 	and	r3,r3,r6
    239c:	38c0022e 	bgeu	r7,r3,23a8 <_malloc_r+0x55c>
    23a0:	10800217 	ldw	r2,8(r2)
    23a4:	28bffb1e 	bne	r5,r2,2394 <__alt_data_end+0xff002394>
    23a8:	11400317 	ldw	r5,12(r2)
    23ac:	98c00117 	ldw	r3,4(r19)
    23b0:	81400315 	stw	r5,12(r16)
    23b4:	80800215 	stw	r2,8(r16)
    23b8:	2c000215 	stw	r16,8(r5)
    23bc:	14000315 	stw	r16,12(r2)
    23c0:	003ef806 	br	1fa4 <__alt_data_end+0xff001fa4>
    23c4:	88c00054 	ori	r3,r17,1
    23c8:	80c00115 	stw	r3,4(r16)
    23cc:	8463883a 	add	r17,r16,r17
    23d0:	34400515 	stw	r17,20(r6)
    23d4:	34400415 	stw	r17,16(r6)
    23d8:	10c00054 	ori	r3,r2,1
    23dc:	8a000315 	stw	r8,12(r17)
    23e0:	8a000215 	stw	r8,8(r17)
    23e4:	88c00115 	stw	r3,4(r17)
    23e8:	88a3883a 	add	r17,r17,r2
    23ec:	88800015 	stw	r2,0(r17)
    23f0:	9009883a 	mov	r4,r18
    23f4:	000eb580 	call	eb58 <__malloc_unlock>
    23f8:	80800204 	addi	r2,r16,8
    23fc:	003f3c06 	br	20f0 <__alt_data_end+0xff0020f0>
    2400:	30c00117 	ldw	r3,4(r6)
    2404:	003ee706 	br	1fa4 <__alt_data_end+0xff001fa4>
    2408:	5ac00044 	addi	r11,r11,1
    240c:	588000cc 	andi	r2,r11,3
    2410:	31800204 	addi	r6,r6,8
    2414:	103efd1e 	bne	r2,zero,200c <__alt_data_end+0xff00200c>
    2418:	00002406 	br	24ac <_malloc_r+0x660>
    241c:	14000317 	ldw	r16,12(r2)
    2420:	143f251e 	bne	r2,r16,20b8 <__alt_data_end+0xff0020b8>
    2424:	21000084 	addi	r4,r4,2
    2428:	003ebc06 	br	1f1c <__alt_data_end+0xff001f1c>
    242c:	8085883a 	add	r2,r16,r2
    2430:	10c00117 	ldw	r3,4(r2)
    2434:	81000317 	ldw	r4,12(r16)
    2438:	81400217 	ldw	r5,8(r16)
    243c:	18c00054 	ori	r3,r3,1
    2440:	10c00115 	stw	r3,4(r2)
    2444:	29000315 	stw	r4,12(r5)
    2448:	21400215 	stw	r5,8(r4)
    244c:	9009883a 	mov	r4,r18
    2450:	000eb580 	call	eb58 <__malloc_unlock>
    2454:	80800204 	addi	r2,r16,8
    2458:	003f2506 	br	20f0 <__alt_data_end+0xff0020f0>
    245c:	12001704 	addi	r8,r2,92
    2460:	11c016c4 	addi	r7,r2,91
    2464:	4209883a 	add	r4,r8,r8
    2468:	003e9606 	br	1ec4 <__alt_data_end+0xff001ec4>
    246c:	3804d1ba 	srli	r2,r7,6
    2470:	11400e44 	addi	r5,r2,57
    2474:	10c00e04 	addi	r3,r2,56
    2478:	294b883a 	add	r5,r5,r5
    247c:	003fbc06 	br	2370 <__alt_data_end+0xff002370>
    2480:	84ff5926 	beq	r16,r19,21e8 <__alt_data_end+0xff0021e8>
    2484:	00800074 	movhi	r2,1
    2488:	10862b04 	addi	r2,r2,6316
    248c:	14000217 	ldw	r16,8(r2)
    2490:	00bfff04 	movi	r2,-4
    2494:	80c00117 	ldw	r3,4(r16)
    2498:	1886703a 	and	r3,r3,r2
    249c:	003f9106 	br	22e4 <__alt_data_end+0xff0022e4>
    24a0:	60800217 	ldw	r2,8(r12)
    24a4:	213fffc4 	addi	r4,r4,-1
    24a8:	1300651e 	bne	r2,r12,2640 <_malloc_r+0x7f4>
    24ac:	208000cc 	andi	r2,r4,3
    24b0:	633ffe04 	addi	r12,r12,-8
    24b4:	103ffa1e 	bne	r2,zero,24a0 <__alt_data_end+0xff0024a0>
    24b8:	98800117 	ldw	r2,4(r19)
    24bc:	0146303a 	nor	r3,zero,r5
    24c0:	1884703a 	and	r2,r3,r2
    24c4:	98800115 	stw	r2,4(r19)
    24c8:	294b883a 	add	r5,r5,r5
    24cc:	117f2836 	bltu	r2,r5,2170 <__alt_data_end+0xff002170>
    24d0:	283f2726 	beq	r5,zero,2170 <__alt_data_end+0xff002170>
    24d4:	2886703a 	and	r3,r5,r2
    24d8:	5809883a 	mov	r4,r11
    24dc:	183ec31e 	bne	r3,zero,1fec <__alt_data_end+0xff001fec>
    24e0:	294b883a 	add	r5,r5,r5
    24e4:	2886703a 	and	r3,r5,r2
    24e8:	21000104 	addi	r4,r4,4
    24ec:	183ffc26 	beq	r3,zero,24e0 <__alt_data_end+0xff0024e0>
    24f0:	003ebe06 	br	1fec <__alt_data_end+0xff001fec>
    24f4:	00c05504 	movi	r3,340
    24f8:	18801236 	bltu	r3,r2,2544 <_malloc_r+0x6f8>
    24fc:	8804d3fa 	srli	r2,r17,15
    2500:	12001e04 	addi	r8,r2,120
    2504:	11c01dc4 	addi	r7,r2,119
    2508:	4209883a 	add	r4,r8,r8
    250c:	003e6d06 	br	1ec4 <__alt_data_end+0xff001ec4>
    2510:	00c40004 	movi	r3,4096
    2514:	003f4606 	br	2230 <__alt_data_end+0xff002230>
    2518:	00800044 	movi	r2,1
    251c:	a0800115 	stw	r2,4(r20)
    2520:	003f7406 	br	22f4 <__alt_data_end+0xff0022f4>
    2524:	1805d0ba 	srai	r2,r3,2
    2528:	01c00044 	movi	r7,1
    252c:	30c00117 	ldw	r3,4(r6)
    2530:	388e983a 	sll	r7,r7,r2
    2534:	2805883a 	mov	r2,r5
    2538:	38c6b03a 	or	r3,r7,r3
    253c:	30c00115 	stw	r3,4(r6)
    2540:	003f9b06 	br	23b0 <__alt_data_end+0xff0023b0>
    2544:	00c15504 	movi	r3,1364
    2548:	18801a36 	bltu	r3,r2,25b4 <_malloc_r+0x768>
    254c:	8804d4ba 	srli	r2,r17,18
    2550:	12001f44 	addi	r8,r2,125
    2554:	11c01f04 	addi	r7,r2,124
    2558:	4209883a 	add	r4,r8,r8
    255c:	003e5906 	br	1ec4 <__alt_data_end+0xff001ec4>
    2560:	ad400404 	addi	r21,r21,16
    2564:	003f1706 	br	21c4 <__alt_data_end+0xff0021c4>
    2568:	00c01504 	movi	r3,84
    256c:	18802336 	bltu	r3,r2,25fc <_malloc_r+0x7b0>
    2570:	3804d33a 	srli	r2,r7,12
    2574:	11401bc4 	addi	r5,r2,111
    2578:	10c01b84 	addi	r3,r2,110
    257c:	294b883a 	add	r5,r5,r5
    2580:	003f7b06 	br	2370 <__alt_data_end+0xff002370>
    2584:	9c000217 	ldw	r16,8(r19)
    2588:	00bfff04 	movi	r2,-4
    258c:	80c00117 	ldw	r3,4(r16)
    2590:	1886703a 	and	r3,r3,r2
    2594:	003f5306 	br	22e4 <__alt_data_end+0xff0022e4>
    2598:	3083ffcc 	andi	r2,r6,4095
    259c:	103f181e 	bne	r2,zero,2200 <__alt_data_end+0xff002200>
    25a0:	99000217 	ldw	r4,8(r19)
    25a4:	b545883a 	add	r2,r22,r21
    25a8:	10800054 	ori	r2,r2,1
    25ac:	20800115 	stw	r2,4(r4)
    25b0:	003f3e06 	br	22ac <__alt_data_end+0xff0022ac>
    25b4:	01003f84 	movi	r4,254
    25b8:	02001fc4 	movi	r8,127
    25bc:	01c01f84 	movi	r7,126
    25c0:	003e4006 	br	1ec4 <__alt_data_end+0xff001ec4>
    25c4:	00800074 	movhi	r2,1
    25c8:	108cd604 	addi	r2,r2,13144
    25cc:	15000015 	stw	r20,0(r2)
    25d0:	003f1106 	br	2218 <__alt_data_end+0xff002218>
    25d4:	00800044 	movi	r2,1
    25d8:	002b883a 	mov	r21,zero
    25dc:	003f1f06 	br	225c <__alt_data_end+0xff00225c>
    25e0:	81400204 	addi	r5,r16,8
    25e4:	9009883a 	mov	r4,r18
    25e8:	0006c9c0 	call	6c9c <_free_r>
    25ec:	00800074 	movhi	r2,1
    25f0:	10940304 	addi	r2,r2,20492
    25f4:	10c00017 	ldw	r3,0(r2)
    25f8:	003f2c06 	br	22ac <__alt_data_end+0xff0022ac>
    25fc:	00c05504 	movi	r3,340
    2600:	18800536 	bltu	r3,r2,2618 <_malloc_r+0x7cc>
    2604:	3804d3fa 	srli	r2,r7,15
    2608:	11401e04 	addi	r5,r2,120
    260c:	10c01dc4 	addi	r3,r2,119
    2610:	294b883a 	add	r5,r5,r5
    2614:	003f5606 	br	2370 <__alt_data_end+0xff002370>
    2618:	00c15504 	movi	r3,1364
    261c:	18800536 	bltu	r3,r2,2634 <_malloc_r+0x7e8>
    2620:	3804d4ba 	srli	r2,r7,18
    2624:	11401f44 	addi	r5,r2,125
    2628:	10c01f04 	addi	r3,r2,124
    262c:	294b883a 	add	r5,r5,r5
    2630:	003f4f06 	br	2370 <__alt_data_end+0xff002370>
    2634:	01403f84 	movi	r5,254
    2638:	00c01f84 	movi	r3,126
    263c:	003f4c06 	br	2370 <__alt_data_end+0xff002370>
    2640:	98800117 	ldw	r2,4(r19)
    2644:	003fa006 	br	24c8 <__alt_data_end+0xff0024c8>
    2648:	8808d0fa 	srli	r4,r17,3
    264c:	20800044 	addi	r2,r4,1
    2650:	1085883a 	add	r2,r2,r2
    2654:	003e9006 	br	2098 <__alt_data_end+0xff002098>

00002658 <_printf_r>:
    2658:	defffd04 	addi	sp,sp,-12
    265c:	2805883a 	mov	r2,r5
    2660:	dfc00015 	stw	ra,0(sp)
    2664:	d9800115 	stw	r6,4(sp)
    2668:	d9c00215 	stw	r7,8(sp)
    266c:	21400217 	ldw	r5,8(r4)
    2670:	d9c00104 	addi	r7,sp,4
    2674:	100d883a 	mov	r6,r2
    2678:	00028840 	call	2884 <___vfprintf_internal_r>
    267c:	dfc00017 	ldw	ra,0(sp)
    2680:	dec00304 	addi	sp,sp,12
    2684:	f800283a 	ret

00002688 <printf>:
    2688:	defffc04 	addi	sp,sp,-16
    268c:	dfc00015 	stw	ra,0(sp)
    2690:	d9400115 	stw	r5,4(sp)
    2694:	d9800215 	stw	r6,8(sp)
    2698:	d9c00315 	stw	r7,12(sp)
    269c:	00800074 	movhi	r2,1
    26a0:	108cd904 	addi	r2,r2,13156
    26a4:	10800017 	ldw	r2,0(r2)
    26a8:	200b883a 	mov	r5,r4
    26ac:	d9800104 	addi	r6,sp,4
    26b0:	11000217 	ldw	r4,8(r2)
    26b4:	0004a7c0 	call	4a7c <__vfprintf_internal>
    26b8:	dfc00017 	ldw	ra,0(sp)
    26bc:	dec00404 	addi	sp,sp,16
    26c0:	f800283a 	ret

000026c4 <_puts_r>:
    26c4:	defff604 	addi	sp,sp,-40
    26c8:	dc000715 	stw	r16,28(sp)
    26cc:	2021883a 	mov	r16,r4
    26d0:	2809883a 	mov	r4,r5
    26d4:	dc400815 	stw	r17,32(sp)
    26d8:	dfc00915 	stw	ra,36(sp)
    26dc:	2823883a 	mov	r17,r5
    26e0:	00027ec0 	call	27ec <strlen>
    26e4:	10c00044 	addi	r3,r2,1
    26e8:	d8800115 	stw	r2,4(sp)
    26ec:	00800074 	movhi	r2,1
    26f0:	10852d04 	addi	r2,r2,5300
    26f4:	d8800215 	stw	r2,8(sp)
    26f8:	00800044 	movi	r2,1
    26fc:	d8800315 	stw	r2,12(sp)
    2700:	00800084 	movi	r2,2
    2704:	dc400015 	stw	r17,0(sp)
    2708:	d8c00615 	stw	r3,24(sp)
    270c:	dec00415 	stw	sp,16(sp)
    2710:	d8800515 	stw	r2,20(sp)
    2714:	80000226 	beq	r16,zero,2720 <_puts_r+0x5c>
    2718:	80800e17 	ldw	r2,56(r16)
    271c:	10001426 	beq	r2,zero,2770 <_puts_r+0xac>
    2720:	81400217 	ldw	r5,8(r16)
    2724:	2880030b 	ldhu	r2,12(r5)
    2728:	10c8000c 	andi	r3,r2,8192
    272c:	1800061e 	bne	r3,zero,2748 <_puts_r+0x84>
    2730:	29001917 	ldw	r4,100(r5)
    2734:	00f7ffc4 	movi	r3,-8193
    2738:	10880014 	ori	r2,r2,8192
    273c:	20c6703a 	and	r3,r4,r3
    2740:	2880030d 	sth	r2,12(r5)
    2744:	28c01915 	stw	r3,100(r5)
    2748:	d9800404 	addi	r6,sp,16
    274c:	8009883a 	mov	r4,r16
    2750:	0006fac0 	call	6fac <__sfvwrite_r>
    2754:	1000091e 	bne	r2,zero,277c <_puts_r+0xb8>
    2758:	00800284 	movi	r2,10
    275c:	dfc00917 	ldw	ra,36(sp)
    2760:	dc400817 	ldw	r17,32(sp)
    2764:	dc000717 	ldw	r16,28(sp)
    2768:	dec00a04 	addi	sp,sp,40
    276c:	f800283a 	ret
    2770:	8009883a 	mov	r4,r16
    2774:	0006b280 	call	6b28 <__sinit>
    2778:	003fe906 	br	2720 <__alt_data_end+0xff002720>
    277c:	00bfffc4 	movi	r2,-1
    2780:	003ff606 	br	275c <__alt_data_end+0xff00275c>

00002784 <puts>:
    2784:	00800074 	movhi	r2,1
    2788:	108cd904 	addi	r2,r2,13156
    278c:	200b883a 	mov	r5,r4
    2790:	11000017 	ldw	r4,0(r2)
    2794:	00026c41 	jmpi	26c4 <_puts_r>

00002798 <_sbrk_r>:
    2798:	defffd04 	addi	sp,sp,-12
    279c:	dc000015 	stw	r16,0(sp)
    27a0:	04000074 	movhi	r16,1
    27a4:	dc400115 	stw	r17,4(sp)
    27a8:	8413f604 	addi	r16,r16,20440
    27ac:	2023883a 	mov	r17,r4
    27b0:	2809883a 	mov	r4,r5
    27b4:	dfc00215 	stw	ra,8(sp)
    27b8:	80000015 	stw	zero,0(r16)
    27bc:	000ed180 	call	ed18 <sbrk>
    27c0:	00ffffc4 	movi	r3,-1
    27c4:	10c00526 	beq	r2,r3,27dc <_sbrk_r+0x44>
    27c8:	dfc00217 	ldw	ra,8(sp)
    27cc:	dc400117 	ldw	r17,4(sp)
    27d0:	dc000017 	ldw	r16,0(sp)
    27d4:	dec00304 	addi	sp,sp,12
    27d8:	f800283a 	ret
    27dc:	80c00017 	ldw	r3,0(r16)
    27e0:	183ff926 	beq	r3,zero,27c8 <__alt_data_end+0xff0027c8>
    27e4:	88c00015 	stw	r3,0(r17)
    27e8:	003ff706 	br	27c8 <__alt_data_end+0xff0027c8>

000027ec <strlen>:
    27ec:	208000cc 	andi	r2,r4,3
    27f0:	10002026 	beq	r2,zero,2874 <strlen+0x88>
    27f4:	20800007 	ldb	r2,0(r4)
    27f8:	10002026 	beq	r2,zero,287c <strlen+0x90>
    27fc:	2005883a 	mov	r2,r4
    2800:	00000206 	br	280c <strlen+0x20>
    2804:	10c00007 	ldb	r3,0(r2)
    2808:	18001826 	beq	r3,zero,286c <strlen+0x80>
    280c:	10800044 	addi	r2,r2,1
    2810:	10c000cc 	andi	r3,r2,3
    2814:	183ffb1e 	bne	r3,zero,2804 <__alt_data_end+0xff002804>
    2818:	10c00017 	ldw	r3,0(r2)
    281c:	01ffbff4 	movhi	r7,65279
    2820:	39ffbfc4 	addi	r7,r7,-257
    2824:	00ca303a 	nor	r5,zero,r3
    2828:	01a02074 	movhi	r6,32897
    282c:	19c7883a 	add	r3,r3,r7
    2830:	31a02004 	addi	r6,r6,-32640
    2834:	1946703a 	and	r3,r3,r5
    2838:	1986703a 	and	r3,r3,r6
    283c:	1800091e 	bne	r3,zero,2864 <strlen+0x78>
    2840:	10800104 	addi	r2,r2,4
    2844:	10c00017 	ldw	r3,0(r2)
    2848:	19cb883a 	add	r5,r3,r7
    284c:	00c6303a 	nor	r3,zero,r3
    2850:	28c6703a 	and	r3,r5,r3
    2854:	1986703a 	and	r3,r3,r6
    2858:	183ff926 	beq	r3,zero,2840 <__alt_data_end+0xff002840>
    285c:	00000106 	br	2864 <strlen+0x78>
    2860:	10800044 	addi	r2,r2,1
    2864:	10c00007 	ldb	r3,0(r2)
    2868:	183ffd1e 	bne	r3,zero,2860 <__alt_data_end+0xff002860>
    286c:	1105c83a 	sub	r2,r2,r4
    2870:	f800283a 	ret
    2874:	2005883a 	mov	r2,r4
    2878:	003fe706 	br	2818 <__alt_data_end+0xff002818>
    287c:	0005883a 	mov	r2,zero
    2880:	f800283a 	ret

00002884 <___vfprintf_internal_r>:
    2884:	deffb804 	addi	sp,sp,-288
    2888:	dfc04715 	stw	ra,284(sp)
    288c:	ddc04515 	stw	r23,276(sp)
    2890:	dd404315 	stw	r21,268(sp)
    2894:	d9002c15 	stw	r4,176(sp)
    2898:	282f883a 	mov	r23,r5
    289c:	302b883a 	mov	r21,r6
    28a0:	d9c02d15 	stw	r7,180(sp)
    28a4:	df004615 	stw	fp,280(sp)
    28a8:	dd804415 	stw	r22,272(sp)
    28ac:	dd004215 	stw	r20,264(sp)
    28b0:	dcc04115 	stw	r19,260(sp)
    28b4:	dc804015 	stw	r18,256(sp)
    28b8:	dc403f15 	stw	r17,252(sp)
    28bc:	dc003e15 	stw	r16,248(sp)
    28c0:	000769c0 	call	769c <_localeconv_r>
    28c4:	10800017 	ldw	r2,0(r2)
    28c8:	1009883a 	mov	r4,r2
    28cc:	d8803415 	stw	r2,208(sp)
    28d0:	00027ec0 	call	27ec <strlen>
    28d4:	d8803715 	stw	r2,220(sp)
    28d8:	d8802c17 	ldw	r2,176(sp)
    28dc:	10000226 	beq	r2,zero,28e8 <___vfprintf_internal_r+0x64>
    28e0:	10800e17 	ldw	r2,56(r2)
    28e4:	1000f926 	beq	r2,zero,2ccc <___vfprintf_internal_r+0x448>
    28e8:	b880030b 	ldhu	r2,12(r23)
    28ec:	10c8000c 	andi	r3,r2,8192
    28f0:	1800061e 	bne	r3,zero,290c <___vfprintf_internal_r+0x88>
    28f4:	b9001917 	ldw	r4,100(r23)
    28f8:	00f7ffc4 	movi	r3,-8193
    28fc:	10880014 	ori	r2,r2,8192
    2900:	20c6703a 	and	r3,r4,r3
    2904:	b880030d 	sth	r2,12(r23)
    2908:	b8c01915 	stw	r3,100(r23)
    290c:	10c0020c 	andi	r3,r2,8
    2910:	1800c126 	beq	r3,zero,2c18 <___vfprintf_internal_r+0x394>
    2914:	b8c00417 	ldw	r3,16(r23)
    2918:	1800bf26 	beq	r3,zero,2c18 <___vfprintf_internal_r+0x394>
    291c:	1080068c 	andi	r2,r2,26
    2920:	00c00284 	movi	r3,10
    2924:	10c0c426 	beq	r2,r3,2c38 <___vfprintf_internal_r+0x3b4>
    2928:	d8c00404 	addi	r3,sp,16
    292c:	05000074 	movhi	r20,1
    2930:	d9001e04 	addi	r4,sp,120
    2934:	a5053e84 	addi	r20,r20,5370
    2938:	d8c01e15 	stw	r3,120(sp)
    293c:	d8002015 	stw	zero,128(sp)
    2940:	d8001f15 	stw	zero,124(sp)
    2944:	d8003315 	stw	zero,204(sp)
    2948:	d8003615 	stw	zero,216(sp)
    294c:	d8003815 	stw	zero,224(sp)
    2950:	1811883a 	mov	r8,r3
    2954:	d8003915 	stw	zero,228(sp)
    2958:	d8003a15 	stw	zero,232(sp)
    295c:	d8002f15 	stw	zero,188(sp)
    2960:	d9002815 	stw	r4,160(sp)
    2964:	a8800007 	ldb	r2,0(r21)
    2968:	10027b26 	beq	r2,zero,3358 <___vfprintf_internal_r+0xad4>
    296c:	00c00944 	movi	r3,37
    2970:	a821883a 	mov	r16,r21
    2974:	10c0021e 	bne	r2,r3,2980 <___vfprintf_internal_r+0xfc>
    2978:	00001406 	br	29cc <___vfprintf_internal_r+0x148>
    297c:	10c00326 	beq	r2,r3,298c <___vfprintf_internal_r+0x108>
    2980:	84000044 	addi	r16,r16,1
    2984:	80800007 	ldb	r2,0(r16)
    2988:	103ffc1e 	bne	r2,zero,297c <__alt_data_end+0xff00297c>
    298c:	8563c83a 	sub	r17,r16,r21
    2990:	88000e26 	beq	r17,zero,29cc <___vfprintf_internal_r+0x148>
    2994:	d8c02017 	ldw	r3,128(sp)
    2998:	d8801f17 	ldw	r2,124(sp)
    299c:	45400015 	stw	r21,0(r8)
    29a0:	1c47883a 	add	r3,r3,r17
    29a4:	10800044 	addi	r2,r2,1
    29a8:	d8c02015 	stw	r3,128(sp)
    29ac:	44400115 	stw	r17,4(r8)
    29b0:	d8801f15 	stw	r2,124(sp)
    29b4:	00c001c4 	movi	r3,7
    29b8:	1880a716 	blt	r3,r2,2c58 <___vfprintf_internal_r+0x3d4>
    29bc:	42000204 	addi	r8,r8,8
    29c0:	d9402f17 	ldw	r5,188(sp)
    29c4:	2c4b883a 	add	r5,r5,r17
    29c8:	d9402f15 	stw	r5,188(sp)
    29cc:	80800007 	ldb	r2,0(r16)
    29d0:	1000a826 	beq	r2,zero,2c74 <___vfprintf_internal_r+0x3f0>
    29d4:	84400047 	ldb	r17,1(r16)
    29d8:	00bfffc4 	movi	r2,-1
    29dc:	85400044 	addi	r21,r16,1
    29e0:	d8002785 	stb	zero,158(sp)
    29e4:	0007883a 	mov	r3,zero
    29e8:	000f883a 	mov	r7,zero
    29ec:	d8802915 	stw	r2,164(sp)
    29f0:	d8003115 	stw	zero,196(sp)
    29f4:	0025883a 	mov	r18,zero
    29f8:	01401604 	movi	r5,88
    29fc:	01800244 	movi	r6,9
    2a00:	02800a84 	movi	r10,42
    2a04:	02401b04 	movi	r9,108
    2a08:	ad400044 	addi	r21,r21,1
    2a0c:	88bff804 	addi	r2,r17,-32
    2a10:	28830436 	bltu	r5,r2,3624 <___vfprintf_internal_r+0xda0>
    2a14:	100490ba 	slli	r2,r2,2
    2a18:	01000034 	movhi	r4,0
    2a1c:	210a8b04 	addi	r4,r4,10796
    2a20:	1105883a 	add	r2,r2,r4
    2a24:	10800017 	ldw	r2,0(r2)
    2a28:	1000683a 	jmp	r2
    2a2c:	00003544 	movi	zero,213
    2a30:	00003624 	muli	zero,zero,216
    2a34:	00003624 	muli	zero,zero,216
    2a38:	00003564 	muli	zero,zero,213
    2a3c:	00003624 	muli	zero,zero,216
    2a40:	00003624 	muli	zero,zero,216
    2a44:	00003624 	muli	zero,zero,216
    2a48:	00003624 	muli	zero,zero,216
    2a4c:	00003624 	muli	zero,zero,216
    2a50:	00003624 	muli	zero,zero,216
    2a54:	00002cd8 	cmpnei	zero,zero,179
    2a58:	00003480 	call	348 <init_camera+0xc8>
    2a5c:	00003624 	muli	zero,zero,216
    2a60:	00002ba0 	cmpeqi	zero,zero,174
    2a64:	00002d00 	call	2d0 <init_camera+0x50>
    2a68:	00003624 	muli	zero,zero,216
    2a6c:	00002d40 	call	2d4 <init_camera+0x54>
    2a70:	00002d4c 	andi	zero,zero,181
    2a74:	00002d4c 	andi	zero,zero,181
    2a78:	00002d4c 	andi	zero,zero,181
    2a7c:	00002d4c 	andi	zero,zero,181
    2a80:	00002d4c 	andi	zero,zero,181
    2a84:	00002d4c 	andi	zero,zero,181
    2a88:	00002d4c 	andi	zero,zero,181
    2a8c:	00002d4c 	andi	zero,zero,181
    2a90:	00002d4c 	andi	zero,zero,181
    2a94:	00003624 	muli	zero,zero,216
    2a98:	00003624 	muli	zero,zero,216
    2a9c:	00003624 	muli	zero,zero,216
    2aa0:	00003624 	muli	zero,zero,216
    2aa4:	00003624 	muli	zero,zero,216
    2aa8:	00003624 	muli	zero,zero,216
    2aac:	00003624 	muli	zero,zero,216
    2ab0:	00003624 	muli	zero,zero,216
    2ab4:	00003624 	muli	zero,zero,216
    2ab8:	00003624 	muli	zero,zero,216
    2abc:	00002d80 	call	2d8 <init_camera+0x58>
    2ac0:	00002e3c 	xorhi	zero,zero,184
    2ac4:	00003624 	muli	zero,zero,216
    2ac8:	00002e3c 	xorhi	zero,zero,184
    2acc:	00003624 	muli	zero,zero,216
    2ad0:	00003624 	muli	zero,zero,216
    2ad4:	00003624 	muli	zero,zero,216
    2ad8:	00003624 	muli	zero,zero,216
    2adc:	00002edc 	xori	zero,zero,187
    2ae0:	00003624 	muli	zero,zero,216
    2ae4:	00003624 	muli	zero,zero,216
    2ae8:	00002ee8 	cmpgeui	zero,zero,187
    2aec:	00003624 	muli	zero,zero,216
    2af0:	00003624 	muli	zero,zero,216
    2af4:	00003624 	muli	zero,zero,216
    2af8:	00003624 	muli	zero,zero,216
    2afc:	00003624 	muli	zero,zero,216
    2b00:	00003360 	cmpeqi	zero,zero,205
    2b04:	00003624 	muli	zero,zero,216
    2b08:	00003624 	muli	zero,zero,216
    2b0c:	000033c0 	call	33c <init_camera+0xbc>
    2b10:	00003624 	muli	zero,zero,216
    2b14:	00003624 	muli	zero,zero,216
    2b18:	00003624 	muli	zero,zero,216
    2b1c:	00003624 	muli	zero,zero,216
    2b20:	00003624 	muli	zero,zero,216
    2b24:	00003624 	muli	zero,zero,216
    2b28:	00003624 	muli	zero,zero,216
    2b2c:	00003624 	muli	zero,zero,216
    2b30:	00003624 	muli	zero,zero,216
    2b34:	00003624 	muli	zero,zero,216
    2b38:	000035d0 	cmplti	zero,zero,215
    2b3c:	00003570 	cmpltui	zero,zero,213
    2b40:	00002e3c 	xorhi	zero,zero,184
    2b44:	00002e3c 	xorhi	zero,zero,184
    2b48:	00002e3c 	xorhi	zero,zero,184
    2b4c:	00003580 	call	358 <init_camera+0xd8>
    2b50:	00003570 	cmpltui	zero,zero,213
    2b54:	00003624 	muli	zero,zero,216
    2b58:	00003624 	muli	zero,zero,216
    2b5c:	0000358c 	andi	zero,zero,214
    2b60:	00003624 	muli	zero,zero,216
    2b64:	0000359c 	xori	zero,zero,214
    2b68:	00003470 	cmpltui	zero,zero,209
    2b6c:	00002bac 	andhi	zero,zero,174
    2b70:	00003490 	cmplti	zero,zero,210
    2b74:	00003624 	muli	zero,zero,216
    2b78:	0000349c 	xori	zero,zero,210
    2b7c:	00003624 	muli	zero,zero,216
    2b80:	000034f8 	rdprs	zero,zero,211
    2b84:	00003624 	muli	zero,zero,216
    2b88:	00003624 	muli	zero,zero,216
    2b8c:	00003508 	cmpgei	zero,zero,212
    2b90:	d9003117 	ldw	r4,196(sp)
    2b94:	d8802d15 	stw	r2,180(sp)
    2b98:	0109c83a 	sub	r4,zero,r4
    2b9c:	d9003115 	stw	r4,196(sp)
    2ba0:	94800114 	ori	r18,r18,4
    2ba4:	ac400007 	ldb	r17,0(r21)
    2ba8:	003f9706 	br	2a08 <__alt_data_end+0xff002a08>
    2bac:	00800c04 	movi	r2,48
    2bb0:	d9002d17 	ldw	r4,180(sp)
    2bb4:	d9402917 	ldw	r5,164(sp)
    2bb8:	d8802705 	stb	r2,156(sp)
    2bbc:	00801e04 	movi	r2,120
    2bc0:	d8802745 	stb	r2,157(sp)
    2bc4:	d8002785 	stb	zero,158(sp)
    2bc8:	20c00104 	addi	r3,r4,4
    2bcc:	24c00017 	ldw	r19,0(r4)
    2bd0:	002d883a 	mov	r22,zero
    2bd4:	90800094 	ori	r2,r18,2
    2bd8:	28029a16 	blt	r5,zero,3644 <___vfprintf_internal_r+0xdc0>
    2bdc:	00bfdfc4 	movi	r2,-129
    2be0:	90a4703a 	and	r18,r18,r2
    2be4:	d8c02d15 	stw	r3,180(sp)
    2be8:	94800094 	ori	r18,r18,2
    2bec:	9802871e 	bne	r19,zero,360c <___vfprintf_internal_r+0xd88>
    2bf0:	00800074 	movhi	r2,1
    2bf4:	10853704 	addi	r2,r2,5340
    2bf8:	d8803915 	stw	r2,228(sp)
    2bfc:	04401e04 	movi	r17,120
    2c00:	d8802917 	ldw	r2,164(sp)
    2c04:	0039883a 	mov	fp,zero
    2c08:	1001e926 	beq	r2,zero,33b0 <___vfprintf_internal_r+0xb2c>
    2c0c:	0027883a 	mov	r19,zero
    2c10:	002d883a 	mov	r22,zero
    2c14:	00020506 	br	342c <___vfprintf_internal_r+0xba8>
    2c18:	d9002c17 	ldw	r4,176(sp)
    2c1c:	b80b883a 	mov	r5,r23
    2c20:	0004b540 	call	4b54 <__swsetup_r>
    2c24:	1005ac1e 	bne	r2,zero,42d8 <___vfprintf_internal_r+0x1a54>
    2c28:	b880030b 	ldhu	r2,12(r23)
    2c2c:	00c00284 	movi	r3,10
    2c30:	1080068c 	andi	r2,r2,26
    2c34:	10ff3c1e 	bne	r2,r3,2928 <__alt_data_end+0xff002928>
    2c38:	b880038f 	ldh	r2,14(r23)
    2c3c:	103f3a16 	blt	r2,zero,2928 <__alt_data_end+0xff002928>
    2c40:	d9c02d17 	ldw	r7,180(sp)
    2c44:	d9002c17 	ldw	r4,176(sp)
    2c48:	a80d883a 	mov	r6,r21
    2c4c:	b80b883a 	mov	r5,r23
    2c50:	0004a980 	call	4a98 <__sbprintf>
    2c54:	00001106 	br	2c9c <___vfprintf_internal_r+0x418>
    2c58:	d9002c17 	ldw	r4,176(sp)
    2c5c:	d9801e04 	addi	r6,sp,120
    2c60:	b80b883a 	mov	r5,r23
    2c64:	00096200 	call	9620 <__sprint_r>
    2c68:	1000081e 	bne	r2,zero,2c8c <___vfprintf_internal_r+0x408>
    2c6c:	da000404 	addi	r8,sp,16
    2c70:	003f5306 	br	29c0 <__alt_data_end+0xff0029c0>
    2c74:	d8802017 	ldw	r2,128(sp)
    2c78:	10000426 	beq	r2,zero,2c8c <___vfprintf_internal_r+0x408>
    2c7c:	d9002c17 	ldw	r4,176(sp)
    2c80:	d9801e04 	addi	r6,sp,120
    2c84:	b80b883a 	mov	r5,r23
    2c88:	00096200 	call	9620 <__sprint_r>
    2c8c:	b880030b 	ldhu	r2,12(r23)
    2c90:	1080100c 	andi	r2,r2,64
    2c94:	1005901e 	bne	r2,zero,42d8 <___vfprintf_internal_r+0x1a54>
    2c98:	d8802f17 	ldw	r2,188(sp)
    2c9c:	dfc04717 	ldw	ra,284(sp)
    2ca0:	df004617 	ldw	fp,280(sp)
    2ca4:	ddc04517 	ldw	r23,276(sp)
    2ca8:	dd804417 	ldw	r22,272(sp)
    2cac:	dd404317 	ldw	r21,268(sp)
    2cb0:	dd004217 	ldw	r20,264(sp)
    2cb4:	dcc04117 	ldw	r19,260(sp)
    2cb8:	dc804017 	ldw	r18,256(sp)
    2cbc:	dc403f17 	ldw	r17,252(sp)
    2cc0:	dc003e17 	ldw	r16,248(sp)
    2cc4:	dec04804 	addi	sp,sp,288
    2cc8:	f800283a 	ret
    2ccc:	d9002c17 	ldw	r4,176(sp)
    2cd0:	0006b280 	call	6b28 <__sinit>
    2cd4:	003f0406 	br	28e8 <__alt_data_end+0xff0028e8>
    2cd8:	d8802d17 	ldw	r2,180(sp)
    2cdc:	d9002d17 	ldw	r4,180(sp)
    2ce0:	10800017 	ldw	r2,0(r2)
    2ce4:	d8803115 	stw	r2,196(sp)
    2ce8:	20800104 	addi	r2,r4,4
    2cec:	d9003117 	ldw	r4,196(sp)
    2cf0:	203fa716 	blt	r4,zero,2b90 <__alt_data_end+0xff002b90>
    2cf4:	d8802d15 	stw	r2,180(sp)
    2cf8:	ac400007 	ldb	r17,0(r21)
    2cfc:	003f4206 	br	2a08 <__alt_data_end+0xff002a08>
    2d00:	ac400007 	ldb	r17,0(r21)
    2d04:	aac00044 	addi	r11,r21,1
    2d08:	8a872826 	beq	r17,r10,49ac <___vfprintf_internal_r+0x2128>
    2d0c:	88bff404 	addi	r2,r17,-48
    2d10:	0009883a 	mov	r4,zero
    2d14:	30867d36 	bltu	r6,r2,470c <___vfprintf_internal_r+0x1e88>
    2d18:	5c400007 	ldb	r17,0(r11)
    2d1c:	210002a4 	muli	r4,r4,10
    2d20:	5d400044 	addi	r21,r11,1
    2d24:	a817883a 	mov	r11,r21
    2d28:	2089883a 	add	r4,r4,r2
    2d2c:	88bff404 	addi	r2,r17,-48
    2d30:	30bff92e 	bgeu	r6,r2,2d18 <__alt_data_end+0xff002d18>
    2d34:	2005c916 	blt	r4,zero,445c <___vfprintf_internal_r+0x1bd8>
    2d38:	d9002915 	stw	r4,164(sp)
    2d3c:	003f3306 	br	2a0c <__alt_data_end+0xff002a0c>
    2d40:	94802014 	ori	r18,r18,128
    2d44:	ac400007 	ldb	r17,0(r21)
    2d48:	003f2f06 	br	2a08 <__alt_data_end+0xff002a08>
    2d4c:	a809883a 	mov	r4,r21
    2d50:	d8003115 	stw	zero,196(sp)
    2d54:	88bff404 	addi	r2,r17,-48
    2d58:	0017883a 	mov	r11,zero
    2d5c:	24400007 	ldb	r17,0(r4)
    2d60:	5ac002a4 	muli	r11,r11,10
    2d64:	ad400044 	addi	r21,r21,1
    2d68:	a809883a 	mov	r4,r21
    2d6c:	12d7883a 	add	r11,r2,r11
    2d70:	88bff404 	addi	r2,r17,-48
    2d74:	30bff92e 	bgeu	r6,r2,2d5c <__alt_data_end+0xff002d5c>
    2d78:	dac03115 	stw	r11,196(sp)
    2d7c:	003f2306 	br	2a0c <__alt_data_end+0xff002a0c>
    2d80:	18c03fcc 	andi	r3,r3,255
    2d84:	18072b1e 	bne	r3,zero,4a34 <___vfprintf_internal_r+0x21b0>
    2d88:	94800414 	ori	r18,r18,16
    2d8c:	9080080c 	andi	r2,r18,32
    2d90:	10037b26 	beq	r2,zero,3b80 <___vfprintf_internal_r+0x12fc>
    2d94:	d9402d17 	ldw	r5,180(sp)
    2d98:	28800117 	ldw	r2,4(r5)
    2d9c:	2cc00017 	ldw	r19,0(r5)
    2da0:	29400204 	addi	r5,r5,8
    2da4:	d9402d15 	stw	r5,180(sp)
    2da8:	102d883a 	mov	r22,r2
    2dac:	10044b16 	blt	r2,zero,3edc <___vfprintf_internal_r+0x1658>
    2db0:	d9402917 	ldw	r5,164(sp)
    2db4:	df002783 	ldbu	fp,158(sp)
    2db8:	2803bc16 	blt	r5,zero,3cac <___vfprintf_internal_r+0x1428>
    2dbc:	00ffdfc4 	movi	r3,-129
    2dc0:	9d84b03a 	or	r2,r19,r22
    2dc4:	90e4703a 	and	r18,r18,r3
    2dc8:	10017726 	beq	r2,zero,33a8 <___vfprintf_internal_r+0xb24>
    2dcc:	b0038326 	beq	r22,zero,3bdc <___vfprintf_internal_r+0x1358>
    2dd0:	dc402a15 	stw	r17,168(sp)
    2dd4:	dc001e04 	addi	r16,sp,120
    2dd8:	b023883a 	mov	r17,r22
    2ddc:	402d883a 	mov	r22,r8
    2de0:	9809883a 	mov	r4,r19
    2de4:	880b883a 	mov	r5,r17
    2de8:	01800284 	movi	r6,10
    2dec:	000f883a 	mov	r7,zero
    2df0:	000ba180 	call	ba18 <__umoddi3>
    2df4:	10800c04 	addi	r2,r2,48
    2df8:	843fffc4 	addi	r16,r16,-1
    2dfc:	9809883a 	mov	r4,r19
    2e00:	880b883a 	mov	r5,r17
    2e04:	80800005 	stb	r2,0(r16)
    2e08:	01800284 	movi	r6,10
    2e0c:	000f883a 	mov	r7,zero
    2e10:	000b4a00 	call	b4a0 <__udivdi3>
    2e14:	1027883a 	mov	r19,r2
    2e18:	10c4b03a 	or	r2,r2,r3
    2e1c:	1823883a 	mov	r17,r3
    2e20:	103fef1e 	bne	r2,zero,2de0 <__alt_data_end+0xff002de0>
    2e24:	d8c02817 	ldw	r3,160(sp)
    2e28:	dc402a17 	ldw	r17,168(sp)
    2e2c:	b011883a 	mov	r8,r22
    2e30:	1c07c83a 	sub	r3,r3,r16
    2e34:	d8c02e15 	stw	r3,184(sp)
    2e38:	00005906 	br	2fa0 <___vfprintf_internal_r+0x71c>
    2e3c:	18c03fcc 	andi	r3,r3,255
    2e40:	1806fa1e 	bne	r3,zero,4a2c <___vfprintf_internal_r+0x21a8>
    2e44:	9080020c 	andi	r2,r18,8
    2e48:	10048a26 	beq	r2,zero,4074 <___vfprintf_internal_r+0x17f0>
    2e4c:	d8c02d17 	ldw	r3,180(sp)
    2e50:	d9002d17 	ldw	r4,180(sp)
    2e54:	d9402d17 	ldw	r5,180(sp)
    2e58:	18c00017 	ldw	r3,0(r3)
    2e5c:	21000117 	ldw	r4,4(r4)
    2e60:	29400204 	addi	r5,r5,8
    2e64:	d8c03615 	stw	r3,216(sp)
    2e68:	d9003815 	stw	r4,224(sp)
    2e6c:	d9402d15 	stw	r5,180(sp)
    2e70:	d9003617 	ldw	r4,216(sp)
    2e74:	d9403817 	ldw	r5,224(sp)
    2e78:	da003d15 	stw	r8,244(sp)
    2e7c:	04000044 	movi	r16,1
    2e80:	00092980 	call	9298 <__fpclassifyd>
    2e84:	da003d17 	ldw	r8,244(sp)
    2e88:	14041f1e 	bne	r2,r16,3f08 <___vfprintf_internal_r+0x1684>
    2e8c:	d9003617 	ldw	r4,216(sp)
    2e90:	d9403817 	ldw	r5,224(sp)
    2e94:	000d883a 	mov	r6,zero
    2e98:	000f883a 	mov	r7,zero
    2e9c:	000d2480 	call	d248 <__ledf2>
    2ea0:	da003d17 	ldw	r8,244(sp)
    2ea4:	1005be16 	blt	r2,zero,45a0 <___vfprintf_internal_r+0x1d1c>
    2ea8:	df002783 	ldbu	fp,158(sp)
    2eac:	008011c4 	movi	r2,71
    2eb0:	1445330e 	bge	r2,r17,4380 <___vfprintf_internal_r+0x1afc>
    2eb4:	04000074 	movhi	r16,1
    2eb8:	84052f04 	addi	r16,r16,5308
    2ebc:	00c000c4 	movi	r3,3
    2ec0:	00bfdfc4 	movi	r2,-129
    2ec4:	d8c02a15 	stw	r3,168(sp)
    2ec8:	90a4703a 	and	r18,r18,r2
    2ecc:	d8c02e15 	stw	r3,184(sp)
    2ed0:	d8002915 	stw	zero,164(sp)
    2ed4:	d8003215 	stw	zero,200(sp)
    2ed8:	00003706 	br	2fb8 <___vfprintf_internal_r+0x734>
    2edc:	94800214 	ori	r18,r18,8
    2ee0:	ac400007 	ldb	r17,0(r21)
    2ee4:	003ec806 	br	2a08 <__alt_data_end+0xff002a08>
    2ee8:	18c03fcc 	andi	r3,r3,255
    2eec:	1806db1e 	bne	r3,zero,4a5c <___vfprintf_internal_r+0x21d8>
    2ef0:	94800414 	ori	r18,r18,16
    2ef4:	9080080c 	andi	r2,r18,32
    2ef8:	1002d826 	beq	r2,zero,3a5c <___vfprintf_internal_r+0x11d8>
    2efc:	d9402d17 	ldw	r5,180(sp)
    2f00:	d8c02917 	ldw	r3,164(sp)
    2f04:	d8002785 	stb	zero,158(sp)
    2f08:	28800204 	addi	r2,r5,8
    2f0c:	2cc00017 	ldw	r19,0(r5)
    2f10:	2d800117 	ldw	r22,4(r5)
    2f14:	18048f16 	blt	r3,zero,4154 <___vfprintf_internal_r+0x18d0>
    2f18:	013fdfc4 	movi	r4,-129
    2f1c:	9d86b03a 	or	r3,r19,r22
    2f20:	d8802d15 	stw	r2,180(sp)
    2f24:	9124703a 	and	r18,r18,r4
    2f28:	1802d91e 	bne	r3,zero,3a90 <___vfprintf_internal_r+0x120c>
    2f2c:	d8c02917 	ldw	r3,164(sp)
    2f30:	0039883a 	mov	fp,zero
    2f34:	1805c326 	beq	r3,zero,4644 <___vfprintf_internal_r+0x1dc0>
    2f38:	0027883a 	mov	r19,zero
    2f3c:	002d883a 	mov	r22,zero
    2f40:	dc001e04 	addi	r16,sp,120
    2f44:	9806d0fa 	srli	r3,r19,3
    2f48:	b008977a 	slli	r4,r22,29
    2f4c:	b02cd0fa 	srli	r22,r22,3
    2f50:	9cc001cc 	andi	r19,r19,7
    2f54:	98800c04 	addi	r2,r19,48
    2f58:	843fffc4 	addi	r16,r16,-1
    2f5c:	20e6b03a 	or	r19,r4,r3
    2f60:	80800005 	stb	r2,0(r16)
    2f64:	9d86b03a 	or	r3,r19,r22
    2f68:	183ff61e 	bne	r3,zero,2f44 <__alt_data_end+0xff002f44>
    2f6c:	90c0004c 	andi	r3,r18,1
    2f70:	18013b26 	beq	r3,zero,3460 <___vfprintf_internal_r+0xbdc>
    2f74:	10803fcc 	andi	r2,r2,255
    2f78:	1080201c 	xori	r2,r2,128
    2f7c:	10bfe004 	addi	r2,r2,-128
    2f80:	00c00c04 	movi	r3,48
    2f84:	10c13626 	beq	r2,r3,3460 <___vfprintf_internal_r+0xbdc>
    2f88:	80ffffc5 	stb	r3,-1(r16)
    2f8c:	d8c02817 	ldw	r3,160(sp)
    2f90:	80bfffc4 	addi	r2,r16,-1
    2f94:	1021883a 	mov	r16,r2
    2f98:	1887c83a 	sub	r3,r3,r2
    2f9c:	d8c02e15 	stw	r3,184(sp)
    2fa0:	d8802e17 	ldw	r2,184(sp)
    2fa4:	d9002917 	ldw	r4,164(sp)
    2fa8:	1100010e 	bge	r2,r4,2fb0 <___vfprintf_internal_r+0x72c>
    2fac:	2005883a 	mov	r2,r4
    2fb0:	d8802a15 	stw	r2,168(sp)
    2fb4:	d8003215 	stw	zero,200(sp)
    2fb8:	e7003fcc 	andi	fp,fp,255
    2fbc:	e700201c 	xori	fp,fp,128
    2fc0:	e73fe004 	addi	fp,fp,-128
    2fc4:	e0000326 	beq	fp,zero,2fd4 <___vfprintf_internal_r+0x750>
    2fc8:	d8c02a17 	ldw	r3,168(sp)
    2fcc:	18c00044 	addi	r3,r3,1
    2fd0:	d8c02a15 	stw	r3,168(sp)
    2fd4:	90c0008c 	andi	r3,r18,2
    2fd8:	d8c02b15 	stw	r3,172(sp)
    2fdc:	18000326 	beq	r3,zero,2fec <___vfprintf_internal_r+0x768>
    2fe0:	d8c02a17 	ldw	r3,168(sp)
    2fe4:	18c00084 	addi	r3,r3,2
    2fe8:	d8c02a15 	stw	r3,168(sp)
    2fec:	90c0210c 	andi	r3,r18,132
    2ff0:	d8c03015 	stw	r3,192(sp)
    2ff4:	1801a31e 	bne	r3,zero,3684 <___vfprintf_internal_r+0xe00>
    2ff8:	d9003117 	ldw	r4,196(sp)
    2ffc:	d8c02a17 	ldw	r3,168(sp)
    3000:	20e7c83a 	sub	r19,r4,r3
    3004:	04c19f0e 	bge	zero,r19,3684 <___vfprintf_internal_r+0xe00>
    3008:	02400404 	movi	r9,16
    300c:	d8c02017 	ldw	r3,128(sp)
    3010:	d8801f17 	ldw	r2,124(sp)
    3014:	4cc50d0e 	bge	r9,r19,444c <___vfprintf_internal_r+0x1bc8>
    3018:	01400074 	movhi	r5,1
    301c:	29454284 	addi	r5,r5,5386
    3020:	dc403b15 	stw	r17,236(sp)
    3024:	d9403515 	stw	r5,212(sp)
    3028:	9823883a 	mov	r17,r19
    302c:	482d883a 	mov	r22,r9
    3030:	9027883a 	mov	r19,r18
    3034:	070001c4 	movi	fp,7
    3038:	8025883a 	mov	r18,r16
    303c:	dc002c17 	ldw	r16,176(sp)
    3040:	00000306 	br	3050 <___vfprintf_internal_r+0x7cc>
    3044:	8c7ffc04 	addi	r17,r17,-16
    3048:	42000204 	addi	r8,r8,8
    304c:	b440130e 	bge	r22,r17,309c <___vfprintf_internal_r+0x818>
    3050:	01000074 	movhi	r4,1
    3054:	18c00404 	addi	r3,r3,16
    3058:	10800044 	addi	r2,r2,1
    305c:	21054284 	addi	r4,r4,5386
    3060:	41000015 	stw	r4,0(r8)
    3064:	45800115 	stw	r22,4(r8)
    3068:	d8c02015 	stw	r3,128(sp)
    306c:	d8801f15 	stw	r2,124(sp)
    3070:	e0bff40e 	bge	fp,r2,3044 <__alt_data_end+0xff003044>
    3074:	d9801e04 	addi	r6,sp,120
    3078:	b80b883a 	mov	r5,r23
    307c:	8009883a 	mov	r4,r16
    3080:	00096200 	call	9620 <__sprint_r>
    3084:	103f011e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3088:	8c7ffc04 	addi	r17,r17,-16
    308c:	d8c02017 	ldw	r3,128(sp)
    3090:	d8801f17 	ldw	r2,124(sp)
    3094:	da000404 	addi	r8,sp,16
    3098:	b47fed16 	blt	r22,r17,3050 <__alt_data_end+0xff003050>
    309c:	9021883a 	mov	r16,r18
    30a0:	9825883a 	mov	r18,r19
    30a4:	8827883a 	mov	r19,r17
    30a8:	dc403b17 	ldw	r17,236(sp)
    30ac:	d9403517 	ldw	r5,212(sp)
    30b0:	98c7883a 	add	r3,r19,r3
    30b4:	10800044 	addi	r2,r2,1
    30b8:	41400015 	stw	r5,0(r8)
    30bc:	44c00115 	stw	r19,4(r8)
    30c0:	d8c02015 	stw	r3,128(sp)
    30c4:	d8801f15 	stw	r2,124(sp)
    30c8:	010001c4 	movi	r4,7
    30cc:	2082a316 	blt	r4,r2,3b5c <___vfprintf_internal_r+0x12d8>
    30d0:	df002787 	ldb	fp,158(sp)
    30d4:	42000204 	addi	r8,r8,8
    30d8:	e0000c26 	beq	fp,zero,310c <___vfprintf_internal_r+0x888>
    30dc:	d8801f17 	ldw	r2,124(sp)
    30e0:	d9002784 	addi	r4,sp,158
    30e4:	18c00044 	addi	r3,r3,1
    30e8:	10800044 	addi	r2,r2,1
    30ec:	41000015 	stw	r4,0(r8)
    30f0:	01000044 	movi	r4,1
    30f4:	41000115 	stw	r4,4(r8)
    30f8:	d8c02015 	stw	r3,128(sp)
    30fc:	d8801f15 	stw	r2,124(sp)
    3100:	010001c4 	movi	r4,7
    3104:	20823c16 	blt	r4,r2,39f8 <___vfprintf_internal_r+0x1174>
    3108:	42000204 	addi	r8,r8,8
    310c:	d8802b17 	ldw	r2,172(sp)
    3110:	10000c26 	beq	r2,zero,3144 <___vfprintf_internal_r+0x8c0>
    3114:	d8801f17 	ldw	r2,124(sp)
    3118:	d9002704 	addi	r4,sp,156
    311c:	18c00084 	addi	r3,r3,2
    3120:	10800044 	addi	r2,r2,1
    3124:	41000015 	stw	r4,0(r8)
    3128:	01000084 	movi	r4,2
    312c:	41000115 	stw	r4,4(r8)
    3130:	d8c02015 	stw	r3,128(sp)
    3134:	d8801f15 	stw	r2,124(sp)
    3138:	010001c4 	movi	r4,7
    313c:	20823616 	blt	r4,r2,3a18 <___vfprintf_internal_r+0x1194>
    3140:	42000204 	addi	r8,r8,8
    3144:	d9003017 	ldw	r4,192(sp)
    3148:	00802004 	movi	r2,128
    314c:	20819926 	beq	r4,r2,37b4 <___vfprintf_internal_r+0xf30>
    3150:	d9402917 	ldw	r5,164(sp)
    3154:	d8802e17 	ldw	r2,184(sp)
    3158:	28adc83a 	sub	r22,r5,r2
    315c:	0580310e 	bge	zero,r22,3224 <___vfprintf_internal_r+0x9a0>
    3160:	07000404 	movi	fp,16
    3164:	d8801f17 	ldw	r2,124(sp)
    3168:	e584140e 	bge	fp,r22,41bc <___vfprintf_internal_r+0x1938>
    316c:	01400074 	movhi	r5,1
    3170:	29453e84 	addi	r5,r5,5370
    3174:	dc402915 	stw	r17,164(sp)
    3178:	d9402b15 	stw	r5,172(sp)
    317c:	b023883a 	mov	r17,r22
    3180:	04c001c4 	movi	r19,7
    3184:	a82d883a 	mov	r22,r21
    3188:	902b883a 	mov	r21,r18
    318c:	8025883a 	mov	r18,r16
    3190:	dc002c17 	ldw	r16,176(sp)
    3194:	00000306 	br	31a4 <___vfprintf_internal_r+0x920>
    3198:	8c7ffc04 	addi	r17,r17,-16
    319c:	42000204 	addi	r8,r8,8
    31a0:	e440110e 	bge	fp,r17,31e8 <___vfprintf_internal_r+0x964>
    31a4:	18c00404 	addi	r3,r3,16
    31a8:	10800044 	addi	r2,r2,1
    31ac:	45000015 	stw	r20,0(r8)
    31b0:	47000115 	stw	fp,4(r8)
    31b4:	d8c02015 	stw	r3,128(sp)
    31b8:	d8801f15 	stw	r2,124(sp)
    31bc:	98bff60e 	bge	r19,r2,3198 <__alt_data_end+0xff003198>
    31c0:	d9801e04 	addi	r6,sp,120
    31c4:	b80b883a 	mov	r5,r23
    31c8:	8009883a 	mov	r4,r16
    31cc:	00096200 	call	9620 <__sprint_r>
    31d0:	103eae1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    31d4:	8c7ffc04 	addi	r17,r17,-16
    31d8:	d8c02017 	ldw	r3,128(sp)
    31dc:	d8801f17 	ldw	r2,124(sp)
    31e0:	da000404 	addi	r8,sp,16
    31e4:	e47fef16 	blt	fp,r17,31a4 <__alt_data_end+0xff0031a4>
    31e8:	9021883a 	mov	r16,r18
    31ec:	a825883a 	mov	r18,r21
    31f0:	b02b883a 	mov	r21,r22
    31f4:	882d883a 	mov	r22,r17
    31f8:	dc402917 	ldw	r17,164(sp)
    31fc:	d9002b17 	ldw	r4,172(sp)
    3200:	1d87883a 	add	r3,r3,r22
    3204:	10800044 	addi	r2,r2,1
    3208:	41000015 	stw	r4,0(r8)
    320c:	45800115 	stw	r22,4(r8)
    3210:	d8c02015 	stw	r3,128(sp)
    3214:	d8801f15 	stw	r2,124(sp)
    3218:	010001c4 	movi	r4,7
    321c:	2081ee16 	blt	r4,r2,39d8 <___vfprintf_internal_r+0x1154>
    3220:	42000204 	addi	r8,r8,8
    3224:	9080400c 	andi	r2,r18,256
    3228:	1001181e 	bne	r2,zero,368c <___vfprintf_internal_r+0xe08>
    322c:	d9402e17 	ldw	r5,184(sp)
    3230:	d8801f17 	ldw	r2,124(sp)
    3234:	44000015 	stw	r16,0(r8)
    3238:	1947883a 	add	r3,r3,r5
    323c:	10800044 	addi	r2,r2,1
    3240:	41400115 	stw	r5,4(r8)
    3244:	d8c02015 	stw	r3,128(sp)
    3248:	d8801f15 	stw	r2,124(sp)
    324c:	010001c4 	movi	r4,7
    3250:	2081d316 	blt	r4,r2,39a0 <___vfprintf_internal_r+0x111c>
    3254:	42000204 	addi	r8,r8,8
    3258:	9480010c 	andi	r18,r18,4
    325c:	90003226 	beq	r18,zero,3328 <___vfprintf_internal_r+0xaa4>
    3260:	d9403117 	ldw	r5,196(sp)
    3264:	d8802a17 	ldw	r2,168(sp)
    3268:	28a1c83a 	sub	r16,r5,r2
    326c:	04002e0e 	bge	zero,r16,3328 <___vfprintf_internal_r+0xaa4>
    3270:	04400404 	movi	r17,16
    3274:	d8801f17 	ldw	r2,124(sp)
    3278:	8c04a20e 	bge	r17,r16,4504 <___vfprintf_internal_r+0x1c80>
    327c:	01400074 	movhi	r5,1
    3280:	29454284 	addi	r5,r5,5386
    3284:	d9403515 	stw	r5,212(sp)
    3288:	048001c4 	movi	r18,7
    328c:	dcc02c17 	ldw	r19,176(sp)
    3290:	00000306 	br	32a0 <___vfprintf_internal_r+0xa1c>
    3294:	843ffc04 	addi	r16,r16,-16
    3298:	42000204 	addi	r8,r8,8
    329c:	8c00130e 	bge	r17,r16,32ec <___vfprintf_internal_r+0xa68>
    32a0:	01000074 	movhi	r4,1
    32a4:	18c00404 	addi	r3,r3,16
    32a8:	10800044 	addi	r2,r2,1
    32ac:	21054284 	addi	r4,r4,5386
    32b0:	41000015 	stw	r4,0(r8)
    32b4:	44400115 	stw	r17,4(r8)
    32b8:	d8c02015 	stw	r3,128(sp)
    32bc:	d8801f15 	stw	r2,124(sp)
    32c0:	90bff40e 	bge	r18,r2,3294 <__alt_data_end+0xff003294>
    32c4:	d9801e04 	addi	r6,sp,120
    32c8:	b80b883a 	mov	r5,r23
    32cc:	9809883a 	mov	r4,r19
    32d0:	00096200 	call	9620 <__sprint_r>
    32d4:	103e6d1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    32d8:	843ffc04 	addi	r16,r16,-16
    32dc:	d8c02017 	ldw	r3,128(sp)
    32e0:	d8801f17 	ldw	r2,124(sp)
    32e4:	da000404 	addi	r8,sp,16
    32e8:	8c3fed16 	blt	r17,r16,32a0 <__alt_data_end+0xff0032a0>
    32ec:	d9403517 	ldw	r5,212(sp)
    32f0:	1c07883a 	add	r3,r3,r16
    32f4:	10800044 	addi	r2,r2,1
    32f8:	41400015 	stw	r5,0(r8)
    32fc:	44000115 	stw	r16,4(r8)
    3300:	d8c02015 	stw	r3,128(sp)
    3304:	d8801f15 	stw	r2,124(sp)
    3308:	010001c4 	movi	r4,7
    330c:	2080060e 	bge	r4,r2,3328 <___vfprintf_internal_r+0xaa4>
    3310:	d9002c17 	ldw	r4,176(sp)
    3314:	d9801e04 	addi	r6,sp,120
    3318:	b80b883a 	mov	r5,r23
    331c:	00096200 	call	9620 <__sprint_r>
    3320:	103e5a1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3324:	d8c02017 	ldw	r3,128(sp)
    3328:	d8803117 	ldw	r2,196(sp)
    332c:	d9002a17 	ldw	r4,168(sp)
    3330:	1100010e 	bge	r2,r4,3338 <___vfprintf_internal_r+0xab4>
    3334:	2005883a 	mov	r2,r4
    3338:	d9402f17 	ldw	r5,188(sp)
    333c:	288b883a 	add	r5,r5,r2
    3340:	d9402f15 	stw	r5,188(sp)
    3344:	18019e1e 	bne	r3,zero,39c0 <___vfprintf_internal_r+0x113c>
    3348:	a8800007 	ldb	r2,0(r21)
    334c:	d8001f15 	stw	zero,124(sp)
    3350:	da000404 	addi	r8,sp,16
    3354:	103d851e 	bne	r2,zero,296c <__alt_data_end+0xff00296c>
    3358:	a821883a 	mov	r16,r21
    335c:	003d9b06 	br	29cc <__alt_data_end+0xff0029cc>
    3360:	18c03fcc 	andi	r3,r3,255
    3364:	1805c11e 	bne	r3,zero,4a6c <___vfprintf_internal_r+0x21e8>
    3368:	94800414 	ori	r18,r18,16
    336c:	9080080c 	andi	r2,r18,32
    3370:	10020c26 	beq	r2,zero,3ba4 <___vfprintf_internal_r+0x1320>
    3374:	d8802d17 	ldw	r2,180(sp)
    3378:	d9002917 	ldw	r4,164(sp)
    337c:	d8002785 	stb	zero,158(sp)
    3380:	10c00204 	addi	r3,r2,8
    3384:	14c00017 	ldw	r19,0(r2)
    3388:	15800117 	ldw	r22,4(r2)
    338c:	20040f16 	blt	r4,zero,43cc <___vfprintf_internal_r+0x1b48>
    3390:	013fdfc4 	movi	r4,-129
    3394:	9d84b03a 	or	r2,r19,r22
    3398:	d8c02d15 	stw	r3,180(sp)
    339c:	9124703a 	and	r18,r18,r4
    33a0:	0039883a 	mov	fp,zero
    33a4:	103e891e 	bne	r2,zero,2dcc <__alt_data_end+0xff002dcc>
    33a8:	d9002917 	ldw	r4,164(sp)
    33ac:	2002c11e 	bne	r4,zero,3eb4 <___vfprintf_internal_r+0x1630>
    33b0:	d8002915 	stw	zero,164(sp)
    33b4:	d8002e15 	stw	zero,184(sp)
    33b8:	dc001e04 	addi	r16,sp,120
    33bc:	003ef806 	br	2fa0 <__alt_data_end+0xff002fa0>
    33c0:	18c03fcc 	andi	r3,r3,255
    33c4:	18059d1e 	bne	r3,zero,4a3c <___vfprintf_internal_r+0x21b8>
    33c8:	01400074 	movhi	r5,1
    33cc:	29453204 	addi	r5,r5,5320
    33d0:	d9403915 	stw	r5,228(sp)
    33d4:	9080080c 	andi	r2,r18,32
    33d8:	10005226 	beq	r2,zero,3524 <___vfprintf_internal_r+0xca0>
    33dc:	d8802d17 	ldw	r2,180(sp)
    33e0:	14c00017 	ldw	r19,0(r2)
    33e4:	15800117 	ldw	r22,4(r2)
    33e8:	10800204 	addi	r2,r2,8
    33ec:	d8802d15 	stw	r2,180(sp)
    33f0:	9080004c 	andi	r2,r18,1
    33f4:	10019026 	beq	r2,zero,3a38 <___vfprintf_internal_r+0x11b4>
    33f8:	9d84b03a 	or	r2,r19,r22
    33fc:	10036926 	beq	r2,zero,41a4 <___vfprintf_internal_r+0x1920>
    3400:	d8c02917 	ldw	r3,164(sp)
    3404:	00800c04 	movi	r2,48
    3408:	d8802705 	stb	r2,156(sp)
    340c:	dc402745 	stb	r17,157(sp)
    3410:	d8002785 	stb	zero,158(sp)
    3414:	90800094 	ori	r2,r18,2
    3418:	18045d16 	blt	r3,zero,4590 <___vfprintf_internal_r+0x1d0c>
    341c:	00bfdfc4 	movi	r2,-129
    3420:	90a4703a 	and	r18,r18,r2
    3424:	94800094 	ori	r18,r18,2
    3428:	0039883a 	mov	fp,zero
    342c:	d9003917 	ldw	r4,228(sp)
    3430:	dc001e04 	addi	r16,sp,120
    3434:	988003cc 	andi	r2,r19,15
    3438:	b006973a 	slli	r3,r22,28
    343c:	2085883a 	add	r2,r4,r2
    3440:	9826d13a 	srli	r19,r19,4
    3444:	10800003 	ldbu	r2,0(r2)
    3448:	b02cd13a 	srli	r22,r22,4
    344c:	843fffc4 	addi	r16,r16,-1
    3450:	1ce6b03a 	or	r19,r3,r19
    3454:	80800005 	stb	r2,0(r16)
    3458:	9d84b03a 	or	r2,r19,r22
    345c:	103ff51e 	bne	r2,zero,3434 <__alt_data_end+0xff003434>
    3460:	d8c02817 	ldw	r3,160(sp)
    3464:	1c07c83a 	sub	r3,r3,r16
    3468:	d8c02e15 	stw	r3,184(sp)
    346c:	003ecc06 	br	2fa0 <__alt_data_end+0xff002fa0>
    3470:	18c03fcc 	andi	r3,r3,255
    3474:	183e9f26 	beq	r3,zero,2ef4 <__alt_data_end+0xff002ef4>
    3478:	d9c02785 	stb	r7,158(sp)
    347c:	003e9d06 	br	2ef4 <__alt_data_end+0xff002ef4>
    3480:	00c00044 	movi	r3,1
    3484:	01c00ac4 	movi	r7,43
    3488:	ac400007 	ldb	r17,0(r21)
    348c:	003d5e06 	br	2a08 <__alt_data_end+0xff002a08>
    3490:	94800814 	ori	r18,r18,32
    3494:	ac400007 	ldb	r17,0(r21)
    3498:	003d5b06 	br	2a08 <__alt_data_end+0xff002a08>
    349c:	d8c02d17 	ldw	r3,180(sp)
    34a0:	d8002785 	stb	zero,158(sp)
    34a4:	1c000017 	ldw	r16,0(r3)
    34a8:	1cc00104 	addi	r19,r3,4
    34ac:	80041926 	beq	r16,zero,4514 <___vfprintf_internal_r+0x1c90>
    34b0:	d9002917 	ldw	r4,164(sp)
    34b4:	2003d016 	blt	r4,zero,43f8 <___vfprintf_internal_r+0x1b74>
    34b8:	200d883a 	mov	r6,r4
    34bc:	000b883a 	mov	r5,zero
    34c0:	8009883a 	mov	r4,r16
    34c4:	da003d15 	stw	r8,244(sp)
    34c8:	00078880 	call	7888 <memchr>
    34cc:	da003d17 	ldw	r8,244(sp)
    34d0:	10045426 	beq	r2,zero,4624 <___vfprintf_internal_r+0x1da0>
    34d4:	1405c83a 	sub	r2,r2,r16
    34d8:	d8802e15 	stw	r2,184(sp)
    34dc:	1003cc16 	blt	r2,zero,4410 <___vfprintf_internal_r+0x1b8c>
    34e0:	df002783 	ldbu	fp,158(sp)
    34e4:	d8802a15 	stw	r2,168(sp)
    34e8:	dcc02d15 	stw	r19,180(sp)
    34ec:	d8002915 	stw	zero,164(sp)
    34f0:	d8003215 	stw	zero,200(sp)
    34f4:	003eb006 	br	2fb8 <__alt_data_end+0xff002fb8>
    34f8:	18c03fcc 	andi	r3,r3,255
    34fc:	183f9b26 	beq	r3,zero,336c <__alt_data_end+0xff00336c>
    3500:	d9c02785 	stb	r7,158(sp)
    3504:	003f9906 	br	336c <__alt_data_end+0xff00336c>
    3508:	18c03fcc 	andi	r3,r3,255
    350c:	1805551e 	bne	r3,zero,4a64 <___vfprintf_internal_r+0x21e0>
    3510:	01400074 	movhi	r5,1
    3514:	29453704 	addi	r5,r5,5340
    3518:	d9403915 	stw	r5,228(sp)
    351c:	9080080c 	andi	r2,r18,32
    3520:	103fae1e 	bne	r2,zero,33dc <__alt_data_end+0xff0033dc>
    3524:	9080040c 	andi	r2,r18,16
    3528:	1002de26 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1820>
    352c:	d8c02d17 	ldw	r3,180(sp)
    3530:	002d883a 	mov	r22,zero
    3534:	1cc00017 	ldw	r19,0(r3)
    3538:	18c00104 	addi	r3,r3,4
    353c:	d8c02d15 	stw	r3,180(sp)
    3540:	003fab06 	br	33f0 <__alt_data_end+0xff0033f0>
    3544:	38803fcc 	andi	r2,r7,255
    3548:	1080201c 	xori	r2,r2,128
    354c:	10bfe004 	addi	r2,r2,-128
    3550:	1002d21e 	bne	r2,zero,409c <___vfprintf_internal_r+0x1818>
    3554:	00c00044 	movi	r3,1
    3558:	01c00804 	movi	r7,32
    355c:	ac400007 	ldb	r17,0(r21)
    3560:	003d2906 	br	2a08 <__alt_data_end+0xff002a08>
    3564:	94800054 	ori	r18,r18,1
    3568:	ac400007 	ldb	r17,0(r21)
    356c:	003d2606 	br	2a08 <__alt_data_end+0xff002a08>
    3570:	18c03fcc 	andi	r3,r3,255
    3574:	183e0526 	beq	r3,zero,2d8c <__alt_data_end+0xff002d8c>
    3578:	d9c02785 	stb	r7,158(sp)
    357c:	003e0306 	br	2d8c <__alt_data_end+0xff002d8c>
    3580:	94801014 	ori	r18,r18,64
    3584:	ac400007 	ldb	r17,0(r21)
    3588:	003d1f06 	br	2a08 <__alt_data_end+0xff002a08>
    358c:	ac400007 	ldb	r17,0(r21)
    3590:	8a438726 	beq	r17,r9,43b0 <___vfprintf_internal_r+0x1b2c>
    3594:	94800414 	ori	r18,r18,16
    3598:	003d1b06 	br	2a08 <__alt_data_end+0xff002a08>
    359c:	18c03fcc 	andi	r3,r3,255
    35a0:	1805341e 	bne	r3,zero,4a74 <___vfprintf_internal_r+0x21f0>
    35a4:	9080080c 	andi	r2,r18,32
    35a8:	1002cd26 	beq	r2,zero,40e0 <___vfprintf_internal_r+0x185c>
    35ac:	d9402d17 	ldw	r5,180(sp)
    35b0:	d9002f17 	ldw	r4,188(sp)
    35b4:	28800017 	ldw	r2,0(r5)
    35b8:	2007d7fa 	srai	r3,r4,31
    35bc:	29400104 	addi	r5,r5,4
    35c0:	d9402d15 	stw	r5,180(sp)
    35c4:	11000015 	stw	r4,0(r2)
    35c8:	10c00115 	stw	r3,4(r2)
    35cc:	003ce506 	br	2964 <__alt_data_end+0xff002964>
    35d0:	d8c02d17 	ldw	r3,180(sp)
    35d4:	d9002d17 	ldw	r4,180(sp)
    35d8:	d8002785 	stb	zero,158(sp)
    35dc:	18800017 	ldw	r2,0(r3)
    35e0:	21000104 	addi	r4,r4,4
    35e4:	00c00044 	movi	r3,1
    35e8:	d8c02a15 	stw	r3,168(sp)
    35ec:	d8801405 	stb	r2,80(sp)
    35f0:	d9002d15 	stw	r4,180(sp)
    35f4:	d8c02e15 	stw	r3,184(sp)
    35f8:	d8002915 	stw	zero,164(sp)
    35fc:	d8003215 	stw	zero,200(sp)
    3600:	dc001404 	addi	r16,sp,80
    3604:	0039883a 	mov	fp,zero
    3608:	003e7206 	br	2fd4 <__alt_data_end+0xff002fd4>
    360c:	01000074 	movhi	r4,1
    3610:	21053704 	addi	r4,r4,5340
    3614:	0039883a 	mov	fp,zero
    3618:	d9003915 	stw	r4,228(sp)
    361c:	04401e04 	movi	r17,120
    3620:	003f8206 	br	342c <__alt_data_end+0xff00342c>
    3624:	18c03fcc 	andi	r3,r3,255
    3628:	1805061e 	bne	r3,zero,4a44 <___vfprintf_internal_r+0x21c0>
    362c:	883d9126 	beq	r17,zero,2c74 <__alt_data_end+0xff002c74>
    3630:	00c00044 	movi	r3,1
    3634:	d8c02a15 	stw	r3,168(sp)
    3638:	dc401405 	stb	r17,80(sp)
    363c:	d8002785 	stb	zero,158(sp)
    3640:	003fec06 	br	35f4 <__alt_data_end+0xff0035f4>
    3644:	01400074 	movhi	r5,1
    3648:	29453704 	addi	r5,r5,5340
    364c:	d9403915 	stw	r5,228(sp)
    3650:	d8c02d15 	stw	r3,180(sp)
    3654:	1025883a 	mov	r18,r2
    3658:	04401e04 	movi	r17,120
    365c:	9d84b03a 	or	r2,r19,r22
    3660:	1000fc1e 	bne	r2,zero,3a54 <___vfprintf_internal_r+0x11d0>
    3664:	0039883a 	mov	fp,zero
    3668:	00800084 	movi	r2,2
    366c:	10803fcc 	andi	r2,r2,255
    3670:	00c00044 	movi	r3,1
    3674:	10c20f26 	beq	r2,r3,3eb4 <___vfprintf_internal_r+0x1630>
    3678:	00c00084 	movi	r3,2
    367c:	10fd6326 	beq	r2,r3,2c0c <__alt_data_end+0xff002c0c>
    3680:	003e2d06 	br	2f38 <__alt_data_end+0xff002f38>
    3684:	d8c02017 	ldw	r3,128(sp)
    3688:	003e9306 	br	30d8 <__alt_data_end+0xff0030d8>
    368c:	00801944 	movi	r2,101
    3690:	14407e0e 	bge	r2,r17,388c <___vfprintf_internal_r+0x1008>
    3694:	d9003617 	ldw	r4,216(sp)
    3698:	d9403817 	ldw	r5,224(sp)
    369c:	000d883a 	mov	r6,zero
    36a0:	000f883a 	mov	r7,zero
    36a4:	d8c03c15 	stw	r3,240(sp)
    36a8:	da003d15 	stw	r8,244(sp)
    36ac:	000d0e40 	call	d0e4 <__eqdf2>
    36b0:	d8c03c17 	ldw	r3,240(sp)
    36b4:	da003d17 	ldw	r8,244(sp)
    36b8:	1000f71e 	bne	r2,zero,3a98 <___vfprintf_internal_r+0x1214>
    36bc:	d8801f17 	ldw	r2,124(sp)
    36c0:	01000074 	movhi	r4,1
    36c4:	21053e04 	addi	r4,r4,5368
    36c8:	18c00044 	addi	r3,r3,1
    36cc:	10800044 	addi	r2,r2,1
    36d0:	41000015 	stw	r4,0(r8)
    36d4:	01000044 	movi	r4,1
    36d8:	41000115 	stw	r4,4(r8)
    36dc:	d8c02015 	stw	r3,128(sp)
    36e0:	d8801f15 	stw	r2,124(sp)
    36e4:	010001c4 	movi	r4,7
    36e8:	2082b816 	blt	r4,r2,41cc <___vfprintf_internal_r+0x1948>
    36ec:	42000204 	addi	r8,r8,8
    36f0:	d8802617 	ldw	r2,152(sp)
    36f4:	d9403317 	ldw	r5,204(sp)
    36f8:	11400216 	blt	r2,r5,3704 <___vfprintf_internal_r+0xe80>
    36fc:	9080004c 	andi	r2,r18,1
    3700:	103ed526 	beq	r2,zero,3258 <__alt_data_end+0xff003258>
    3704:	d8803717 	ldw	r2,220(sp)
    3708:	d9003417 	ldw	r4,208(sp)
    370c:	d9403717 	ldw	r5,220(sp)
    3710:	1887883a 	add	r3,r3,r2
    3714:	d8801f17 	ldw	r2,124(sp)
    3718:	41000015 	stw	r4,0(r8)
    371c:	41400115 	stw	r5,4(r8)
    3720:	10800044 	addi	r2,r2,1
    3724:	d8c02015 	stw	r3,128(sp)
    3728:	d8801f15 	stw	r2,124(sp)
    372c:	010001c4 	movi	r4,7
    3730:	20832916 	blt	r4,r2,43d8 <___vfprintf_internal_r+0x1b54>
    3734:	42000204 	addi	r8,r8,8
    3738:	d8803317 	ldw	r2,204(sp)
    373c:	143fffc4 	addi	r16,r2,-1
    3740:	043ec50e 	bge	zero,r16,3258 <__alt_data_end+0xff003258>
    3744:	04400404 	movi	r17,16
    3748:	d8801f17 	ldw	r2,124(sp)
    374c:	8c00880e 	bge	r17,r16,3970 <___vfprintf_internal_r+0x10ec>
    3750:	01400074 	movhi	r5,1
    3754:	29453e84 	addi	r5,r5,5370
    3758:	d9402b15 	stw	r5,172(sp)
    375c:	058001c4 	movi	r22,7
    3760:	dcc02c17 	ldw	r19,176(sp)
    3764:	00000306 	br	3774 <___vfprintf_internal_r+0xef0>
    3768:	42000204 	addi	r8,r8,8
    376c:	843ffc04 	addi	r16,r16,-16
    3770:	8c00820e 	bge	r17,r16,397c <___vfprintf_internal_r+0x10f8>
    3774:	18c00404 	addi	r3,r3,16
    3778:	10800044 	addi	r2,r2,1
    377c:	45000015 	stw	r20,0(r8)
    3780:	44400115 	stw	r17,4(r8)
    3784:	d8c02015 	stw	r3,128(sp)
    3788:	d8801f15 	stw	r2,124(sp)
    378c:	b0bff60e 	bge	r22,r2,3768 <__alt_data_end+0xff003768>
    3790:	d9801e04 	addi	r6,sp,120
    3794:	b80b883a 	mov	r5,r23
    3798:	9809883a 	mov	r4,r19
    379c:	00096200 	call	9620 <__sprint_r>
    37a0:	103d3a1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    37a4:	d8c02017 	ldw	r3,128(sp)
    37a8:	d8801f17 	ldw	r2,124(sp)
    37ac:	da000404 	addi	r8,sp,16
    37b0:	003fee06 	br	376c <__alt_data_end+0xff00376c>
    37b4:	d9403117 	ldw	r5,196(sp)
    37b8:	d8802a17 	ldw	r2,168(sp)
    37bc:	28adc83a 	sub	r22,r5,r2
    37c0:	05be630e 	bge	zero,r22,3150 <__alt_data_end+0xff003150>
    37c4:	07000404 	movi	fp,16
    37c8:	d8801f17 	ldw	r2,124(sp)
    37cc:	e5838f0e 	bge	fp,r22,460c <___vfprintf_internal_r+0x1d88>
    37d0:	01400074 	movhi	r5,1
    37d4:	29453e84 	addi	r5,r5,5370
    37d8:	dc403015 	stw	r17,192(sp)
    37dc:	d9402b15 	stw	r5,172(sp)
    37e0:	b023883a 	mov	r17,r22
    37e4:	04c001c4 	movi	r19,7
    37e8:	a82d883a 	mov	r22,r21
    37ec:	902b883a 	mov	r21,r18
    37f0:	8025883a 	mov	r18,r16
    37f4:	dc002c17 	ldw	r16,176(sp)
    37f8:	00000306 	br	3808 <___vfprintf_internal_r+0xf84>
    37fc:	8c7ffc04 	addi	r17,r17,-16
    3800:	42000204 	addi	r8,r8,8
    3804:	e440110e 	bge	fp,r17,384c <___vfprintf_internal_r+0xfc8>
    3808:	18c00404 	addi	r3,r3,16
    380c:	10800044 	addi	r2,r2,1
    3810:	45000015 	stw	r20,0(r8)
    3814:	47000115 	stw	fp,4(r8)
    3818:	d8c02015 	stw	r3,128(sp)
    381c:	d8801f15 	stw	r2,124(sp)
    3820:	98bff60e 	bge	r19,r2,37fc <__alt_data_end+0xff0037fc>
    3824:	d9801e04 	addi	r6,sp,120
    3828:	b80b883a 	mov	r5,r23
    382c:	8009883a 	mov	r4,r16
    3830:	00096200 	call	9620 <__sprint_r>
    3834:	103d151e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3838:	8c7ffc04 	addi	r17,r17,-16
    383c:	d8c02017 	ldw	r3,128(sp)
    3840:	d8801f17 	ldw	r2,124(sp)
    3844:	da000404 	addi	r8,sp,16
    3848:	e47fef16 	blt	fp,r17,3808 <__alt_data_end+0xff003808>
    384c:	9021883a 	mov	r16,r18
    3850:	a825883a 	mov	r18,r21
    3854:	b02b883a 	mov	r21,r22
    3858:	882d883a 	mov	r22,r17
    385c:	dc403017 	ldw	r17,192(sp)
    3860:	d9002b17 	ldw	r4,172(sp)
    3864:	1d87883a 	add	r3,r3,r22
    3868:	10800044 	addi	r2,r2,1
    386c:	41000015 	stw	r4,0(r8)
    3870:	45800115 	stw	r22,4(r8)
    3874:	d8c02015 	stw	r3,128(sp)
    3878:	d8801f15 	stw	r2,124(sp)
    387c:	010001c4 	movi	r4,7
    3880:	20818e16 	blt	r4,r2,3ebc <___vfprintf_internal_r+0x1638>
    3884:	42000204 	addi	r8,r8,8
    3888:	003e3106 	br	3150 <__alt_data_end+0xff003150>
    388c:	d9403317 	ldw	r5,204(sp)
    3890:	00800044 	movi	r2,1
    3894:	18c00044 	addi	r3,r3,1
    3898:	1141530e 	bge	r2,r5,3de8 <___vfprintf_internal_r+0x1564>
    389c:	dc401f17 	ldw	r17,124(sp)
    38a0:	00800044 	movi	r2,1
    38a4:	40800115 	stw	r2,4(r8)
    38a8:	8c400044 	addi	r17,r17,1
    38ac:	44000015 	stw	r16,0(r8)
    38b0:	d8c02015 	stw	r3,128(sp)
    38b4:	dc401f15 	stw	r17,124(sp)
    38b8:	008001c4 	movi	r2,7
    38bc:	14416b16 	blt	r2,r17,3e6c <___vfprintf_internal_r+0x15e8>
    38c0:	42000204 	addi	r8,r8,8
    38c4:	d8803717 	ldw	r2,220(sp)
    38c8:	d9003417 	ldw	r4,208(sp)
    38cc:	8c400044 	addi	r17,r17,1
    38d0:	10c7883a 	add	r3,r2,r3
    38d4:	40800115 	stw	r2,4(r8)
    38d8:	41000015 	stw	r4,0(r8)
    38dc:	d8c02015 	stw	r3,128(sp)
    38e0:	dc401f15 	stw	r17,124(sp)
    38e4:	008001c4 	movi	r2,7
    38e8:	14416916 	blt	r2,r17,3e90 <___vfprintf_internal_r+0x160c>
    38ec:	45800204 	addi	r22,r8,8
    38f0:	d9003617 	ldw	r4,216(sp)
    38f4:	d9403817 	ldw	r5,224(sp)
    38f8:	000d883a 	mov	r6,zero
    38fc:	000f883a 	mov	r7,zero
    3900:	d8c03c15 	stw	r3,240(sp)
    3904:	000d0e40 	call	d0e4 <__eqdf2>
    3908:	d8c03c17 	ldw	r3,240(sp)
    390c:	1000bc26 	beq	r2,zero,3c00 <___vfprintf_internal_r+0x137c>
    3910:	d9403317 	ldw	r5,204(sp)
    3914:	84000044 	addi	r16,r16,1
    3918:	8c400044 	addi	r17,r17,1
    391c:	28bfffc4 	addi	r2,r5,-1
    3920:	1887883a 	add	r3,r3,r2
    3924:	b0800115 	stw	r2,4(r22)
    3928:	b4000015 	stw	r16,0(r22)
    392c:	d8c02015 	stw	r3,128(sp)
    3930:	dc401f15 	stw	r17,124(sp)
    3934:	008001c4 	movi	r2,7
    3938:	14414316 	blt	r2,r17,3e48 <___vfprintf_internal_r+0x15c4>
    393c:	b5800204 	addi	r22,r22,8
    3940:	d9003a17 	ldw	r4,232(sp)
    3944:	df0022c4 	addi	fp,sp,139
    3948:	8c400044 	addi	r17,r17,1
    394c:	20c7883a 	add	r3,r4,r3
    3950:	b7000015 	stw	fp,0(r22)
    3954:	b1000115 	stw	r4,4(r22)
    3958:	d8c02015 	stw	r3,128(sp)
    395c:	dc401f15 	stw	r17,124(sp)
    3960:	008001c4 	movi	r2,7
    3964:	14400e16 	blt	r2,r17,39a0 <___vfprintf_internal_r+0x111c>
    3968:	b2000204 	addi	r8,r22,8
    396c:	003e3a06 	br	3258 <__alt_data_end+0xff003258>
    3970:	01000074 	movhi	r4,1
    3974:	21053e84 	addi	r4,r4,5370
    3978:	d9002b15 	stw	r4,172(sp)
    397c:	d9002b17 	ldw	r4,172(sp)
    3980:	1c07883a 	add	r3,r3,r16
    3984:	44000115 	stw	r16,4(r8)
    3988:	41000015 	stw	r4,0(r8)
    398c:	10800044 	addi	r2,r2,1
    3990:	d8c02015 	stw	r3,128(sp)
    3994:	d8801f15 	stw	r2,124(sp)
    3998:	010001c4 	movi	r4,7
    399c:	20be2d0e 	bge	r4,r2,3254 <__alt_data_end+0xff003254>
    39a0:	d9002c17 	ldw	r4,176(sp)
    39a4:	d9801e04 	addi	r6,sp,120
    39a8:	b80b883a 	mov	r5,r23
    39ac:	00096200 	call	9620 <__sprint_r>
    39b0:	103cb61e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    39b4:	d8c02017 	ldw	r3,128(sp)
    39b8:	da000404 	addi	r8,sp,16
    39bc:	003e2606 	br	3258 <__alt_data_end+0xff003258>
    39c0:	d9002c17 	ldw	r4,176(sp)
    39c4:	d9801e04 	addi	r6,sp,120
    39c8:	b80b883a 	mov	r5,r23
    39cc:	00096200 	call	9620 <__sprint_r>
    39d0:	103e5d26 	beq	r2,zero,3348 <__alt_data_end+0xff003348>
    39d4:	003cad06 	br	2c8c <__alt_data_end+0xff002c8c>
    39d8:	d9002c17 	ldw	r4,176(sp)
    39dc:	d9801e04 	addi	r6,sp,120
    39e0:	b80b883a 	mov	r5,r23
    39e4:	00096200 	call	9620 <__sprint_r>
    39e8:	103ca81e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    39ec:	d8c02017 	ldw	r3,128(sp)
    39f0:	da000404 	addi	r8,sp,16
    39f4:	003e0b06 	br	3224 <__alt_data_end+0xff003224>
    39f8:	d9002c17 	ldw	r4,176(sp)
    39fc:	d9801e04 	addi	r6,sp,120
    3a00:	b80b883a 	mov	r5,r23
    3a04:	00096200 	call	9620 <__sprint_r>
    3a08:	103ca01e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3a0c:	d8c02017 	ldw	r3,128(sp)
    3a10:	da000404 	addi	r8,sp,16
    3a14:	003dbd06 	br	310c <__alt_data_end+0xff00310c>
    3a18:	d9002c17 	ldw	r4,176(sp)
    3a1c:	d9801e04 	addi	r6,sp,120
    3a20:	b80b883a 	mov	r5,r23
    3a24:	00096200 	call	9620 <__sprint_r>
    3a28:	103c981e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3a2c:	d8c02017 	ldw	r3,128(sp)
    3a30:	da000404 	addi	r8,sp,16
    3a34:	003dc306 	br	3144 <__alt_data_end+0xff003144>
    3a38:	d8802917 	ldw	r2,164(sp)
    3a3c:	d8002785 	stb	zero,158(sp)
    3a40:	103f0616 	blt	r2,zero,365c <__alt_data_end+0xff00365c>
    3a44:	00ffdfc4 	movi	r3,-129
    3a48:	9d84b03a 	or	r2,r19,r22
    3a4c:	90e4703a 	and	r18,r18,r3
    3a50:	103c6b26 	beq	r2,zero,2c00 <__alt_data_end+0xff002c00>
    3a54:	0039883a 	mov	fp,zero
    3a58:	003e7406 	br	342c <__alt_data_end+0xff00342c>
    3a5c:	9080040c 	andi	r2,r18,16
    3a60:	1001b326 	beq	r2,zero,4130 <___vfprintf_internal_r+0x18ac>
    3a64:	d9002d17 	ldw	r4,180(sp)
    3a68:	d9402917 	ldw	r5,164(sp)
    3a6c:	d8002785 	stb	zero,158(sp)
    3a70:	20800104 	addi	r2,r4,4
    3a74:	24c00017 	ldw	r19,0(r4)
    3a78:	002d883a 	mov	r22,zero
    3a7c:	2801b516 	blt	r5,zero,4154 <___vfprintf_internal_r+0x18d0>
    3a80:	00ffdfc4 	movi	r3,-129
    3a84:	d8802d15 	stw	r2,180(sp)
    3a88:	90e4703a 	and	r18,r18,r3
    3a8c:	983d2726 	beq	r19,zero,2f2c <__alt_data_end+0xff002f2c>
    3a90:	0039883a 	mov	fp,zero
    3a94:	003d2a06 	br	2f40 <__alt_data_end+0xff002f40>
    3a98:	dc402617 	ldw	r17,152(sp)
    3a9c:	0441d30e 	bge	zero,r17,41ec <___vfprintf_internal_r+0x1968>
    3aa0:	dc403217 	ldw	r17,200(sp)
    3aa4:	d8803317 	ldw	r2,204(sp)
    3aa8:	1440010e 	bge	r2,r17,3ab0 <___vfprintf_internal_r+0x122c>
    3aac:	1023883a 	mov	r17,r2
    3ab0:	04400a0e 	bge	zero,r17,3adc <___vfprintf_internal_r+0x1258>
    3ab4:	d8801f17 	ldw	r2,124(sp)
    3ab8:	1c47883a 	add	r3,r3,r17
    3abc:	44000015 	stw	r16,0(r8)
    3ac0:	10800044 	addi	r2,r2,1
    3ac4:	44400115 	stw	r17,4(r8)
    3ac8:	d8c02015 	stw	r3,128(sp)
    3acc:	d8801f15 	stw	r2,124(sp)
    3ad0:	010001c4 	movi	r4,7
    3ad4:	20826516 	blt	r4,r2,446c <___vfprintf_internal_r+0x1be8>
    3ad8:	42000204 	addi	r8,r8,8
    3adc:	88026116 	blt	r17,zero,4464 <___vfprintf_internal_r+0x1be0>
    3ae0:	d9003217 	ldw	r4,200(sp)
    3ae4:	2463c83a 	sub	r17,r4,r17
    3ae8:	04407b0e 	bge	zero,r17,3cd8 <___vfprintf_internal_r+0x1454>
    3aec:	05800404 	movi	r22,16
    3af0:	d8801f17 	ldw	r2,124(sp)
    3af4:	b4419d0e 	bge	r22,r17,416c <___vfprintf_internal_r+0x18e8>
    3af8:	01000074 	movhi	r4,1
    3afc:	21053e84 	addi	r4,r4,5370
    3b00:	d9002b15 	stw	r4,172(sp)
    3b04:	070001c4 	movi	fp,7
    3b08:	dcc02c17 	ldw	r19,176(sp)
    3b0c:	00000306 	br	3b1c <___vfprintf_internal_r+0x1298>
    3b10:	42000204 	addi	r8,r8,8
    3b14:	8c7ffc04 	addi	r17,r17,-16
    3b18:	b441970e 	bge	r22,r17,4178 <___vfprintf_internal_r+0x18f4>
    3b1c:	18c00404 	addi	r3,r3,16
    3b20:	10800044 	addi	r2,r2,1
    3b24:	45000015 	stw	r20,0(r8)
    3b28:	45800115 	stw	r22,4(r8)
    3b2c:	d8c02015 	stw	r3,128(sp)
    3b30:	d8801f15 	stw	r2,124(sp)
    3b34:	e0bff60e 	bge	fp,r2,3b10 <__alt_data_end+0xff003b10>
    3b38:	d9801e04 	addi	r6,sp,120
    3b3c:	b80b883a 	mov	r5,r23
    3b40:	9809883a 	mov	r4,r19
    3b44:	00096200 	call	9620 <__sprint_r>
    3b48:	103c501e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3b4c:	d8c02017 	ldw	r3,128(sp)
    3b50:	d8801f17 	ldw	r2,124(sp)
    3b54:	da000404 	addi	r8,sp,16
    3b58:	003fee06 	br	3b14 <__alt_data_end+0xff003b14>
    3b5c:	d9002c17 	ldw	r4,176(sp)
    3b60:	d9801e04 	addi	r6,sp,120
    3b64:	b80b883a 	mov	r5,r23
    3b68:	00096200 	call	9620 <__sprint_r>
    3b6c:	103c471e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3b70:	d8c02017 	ldw	r3,128(sp)
    3b74:	df002787 	ldb	fp,158(sp)
    3b78:	da000404 	addi	r8,sp,16
    3b7c:	003d5606 	br	30d8 <__alt_data_end+0xff0030d8>
    3b80:	9080040c 	andi	r2,r18,16
    3b84:	10016126 	beq	r2,zero,410c <___vfprintf_internal_r+0x1888>
    3b88:	d8802d17 	ldw	r2,180(sp)
    3b8c:	14c00017 	ldw	r19,0(r2)
    3b90:	10800104 	addi	r2,r2,4
    3b94:	d8802d15 	stw	r2,180(sp)
    3b98:	982dd7fa 	srai	r22,r19,31
    3b9c:	b005883a 	mov	r2,r22
    3ba0:	003c8206 	br	2dac <__alt_data_end+0xff002dac>
    3ba4:	9080040c 	andi	r2,r18,16
    3ba8:	10003526 	beq	r2,zero,3c80 <___vfprintf_internal_r+0x13fc>
    3bac:	d9402d17 	ldw	r5,180(sp)
    3bb0:	d8c02917 	ldw	r3,164(sp)
    3bb4:	d8002785 	stb	zero,158(sp)
    3bb8:	28800104 	addi	r2,r5,4
    3bbc:	2cc00017 	ldw	r19,0(r5)
    3bc0:	002d883a 	mov	r22,zero
    3bc4:	18003716 	blt	r3,zero,3ca4 <___vfprintf_internal_r+0x1420>
    3bc8:	00ffdfc4 	movi	r3,-129
    3bcc:	d8802d15 	stw	r2,180(sp)
    3bd0:	90e4703a 	and	r18,r18,r3
    3bd4:	0039883a 	mov	fp,zero
    3bd8:	983df326 	beq	r19,zero,33a8 <__alt_data_end+0xff0033a8>
    3bdc:	00800244 	movi	r2,9
    3be0:	14fc7b36 	bltu	r2,r19,2dd0 <__alt_data_end+0xff002dd0>
    3be4:	d8c02817 	ldw	r3,160(sp)
    3be8:	dc001dc4 	addi	r16,sp,119
    3bec:	9cc00c04 	addi	r19,r19,48
    3bf0:	1c07c83a 	sub	r3,r3,r16
    3bf4:	dcc01dc5 	stb	r19,119(sp)
    3bf8:	d8c02e15 	stw	r3,184(sp)
    3bfc:	003ce806 	br	2fa0 <__alt_data_end+0xff002fa0>
    3c00:	d8803317 	ldw	r2,204(sp)
    3c04:	143fffc4 	addi	r16,r2,-1
    3c08:	043f4d0e 	bge	zero,r16,3940 <__alt_data_end+0xff003940>
    3c0c:	07000404 	movi	fp,16
    3c10:	e400810e 	bge	fp,r16,3e18 <___vfprintf_internal_r+0x1594>
    3c14:	01400074 	movhi	r5,1
    3c18:	29453e84 	addi	r5,r5,5370
    3c1c:	d9402b15 	stw	r5,172(sp)
    3c20:	01c001c4 	movi	r7,7
    3c24:	dcc02c17 	ldw	r19,176(sp)
    3c28:	00000306 	br	3c38 <___vfprintf_internal_r+0x13b4>
    3c2c:	b5800204 	addi	r22,r22,8
    3c30:	843ffc04 	addi	r16,r16,-16
    3c34:	e4007b0e 	bge	fp,r16,3e24 <___vfprintf_internal_r+0x15a0>
    3c38:	18c00404 	addi	r3,r3,16
    3c3c:	8c400044 	addi	r17,r17,1
    3c40:	b5000015 	stw	r20,0(r22)
    3c44:	b7000115 	stw	fp,4(r22)
    3c48:	d8c02015 	stw	r3,128(sp)
    3c4c:	dc401f15 	stw	r17,124(sp)
    3c50:	3c7ff60e 	bge	r7,r17,3c2c <__alt_data_end+0xff003c2c>
    3c54:	d9801e04 	addi	r6,sp,120
    3c58:	b80b883a 	mov	r5,r23
    3c5c:	9809883a 	mov	r4,r19
    3c60:	d9c03c15 	stw	r7,240(sp)
    3c64:	00096200 	call	9620 <__sprint_r>
    3c68:	d9c03c17 	ldw	r7,240(sp)
    3c6c:	103c071e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3c70:	d8c02017 	ldw	r3,128(sp)
    3c74:	dc401f17 	ldw	r17,124(sp)
    3c78:	dd800404 	addi	r22,sp,16
    3c7c:	003fec06 	br	3c30 <__alt_data_end+0xff003c30>
    3c80:	9080100c 	andi	r2,r18,64
    3c84:	d8002785 	stb	zero,158(sp)
    3c88:	10010e26 	beq	r2,zero,40c4 <___vfprintf_internal_r+0x1840>
    3c8c:	d9002d17 	ldw	r4,180(sp)
    3c90:	d9402917 	ldw	r5,164(sp)
    3c94:	002d883a 	mov	r22,zero
    3c98:	20800104 	addi	r2,r4,4
    3c9c:	24c0000b 	ldhu	r19,0(r4)
    3ca0:	283fc90e 	bge	r5,zero,3bc8 <__alt_data_end+0xff003bc8>
    3ca4:	d8802d15 	stw	r2,180(sp)
    3ca8:	0039883a 	mov	fp,zero
    3cac:	9d84b03a 	or	r2,r19,r22
    3cb0:	103c461e 	bne	r2,zero,2dcc <__alt_data_end+0xff002dcc>
    3cb4:	00800044 	movi	r2,1
    3cb8:	003e6c06 	br	366c <__alt_data_end+0xff00366c>
    3cbc:	d9002c17 	ldw	r4,176(sp)
    3cc0:	d9801e04 	addi	r6,sp,120
    3cc4:	b80b883a 	mov	r5,r23
    3cc8:	00096200 	call	9620 <__sprint_r>
    3ccc:	103bef1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3cd0:	d8c02017 	ldw	r3,128(sp)
    3cd4:	da000404 	addi	r8,sp,16
    3cd8:	d9003217 	ldw	r4,200(sp)
    3cdc:	d8802617 	ldw	r2,152(sp)
    3ce0:	d9403317 	ldw	r5,204(sp)
    3ce4:	8123883a 	add	r17,r16,r4
    3ce8:	11400216 	blt	r2,r5,3cf4 <___vfprintf_internal_r+0x1470>
    3cec:	9100004c 	andi	r4,r18,1
    3cf0:	20000d26 	beq	r4,zero,3d28 <___vfprintf_internal_r+0x14a4>
    3cf4:	d9003717 	ldw	r4,220(sp)
    3cf8:	d9403417 	ldw	r5,208(sp)
    3cfc:	1907883a 	add	r3,r3,r4
    3d00:	d9001f17 	ldw	r4,124(sp)
    3d04:	41400015 	stw	r5,0(r8)
    3d08:	d9403717 	ldw	r5,220(sp)
    3d0c:	21000044 	addi	r4,r4,1
    3d10:	d8c02015 	stw	r3,128(sp)
    3d14:	41400115 	stw	r5,4(r8)
    3d18:	d9001f15 	stw	r4,124(sp)
    3d1c:	014001c4 	movi	r5,7
    3d20:	2901e816 	blt	r5,r4,44c4 <___vfprintf_internal_r+0x1c40>
    3d24:	42000204 	addi	r8,r8,8
    3d28:	d9003317 	ldw	r4,204(sp)
    3d2c:	8121883a 	add	r16,r16,r4
    3d30:	2085c83a 	sub	r2,r4,r2
    3d34:	8461c83a 	sub	r16,r16,r17
    3d38:	1400010e 	bge	r2,r16,3d40 <___vfprintf_internal_r+0x14bc>
    3d3c:	1021883a 	mov	r16,r2
    3d40:	04000a0e 	bge	zero,r16,3d6c <___vfprintf_internal_r+0x14e8>
    3d44:	d9001f17 	ldw	r4,124(sp)
    3d48:	1c07883a 	add	r3,r3,r16
    3d4c:	44400015 	stw	r17,0(r8)
    3d50:	21000044 	addi	r4,r4,1
    3d54:	44000115 	stw	r16,4(r8)
    3d58:	d8c02015 	stw	r3,128(sp)
    3d5c:	d9001f15 	stw	r4,124(sp)
    3d60:	014001c4 	movi	r5,7
    3d64:	2901fb16 	blt	r5,r4,4554 <___vfprintf_internal_r+0x1cd0>
    3d68:	42000204 	addi	r8,r8,8
    3d6c:	8001f716 	blt	r16,zero,454c <___vfprintf_internal_r+0x1cc8>
    3d70:	1421c83a 	sub	r16,r2,r16
    3d74:	043d380e 	bge	zero,r16,3258 <__alt_data_end+0xff003258>
    3d78:	04400404 	movi	r17,16
    3d7c:	d8801f17 	ldw	r2,124(sp)
    3d80:	8c3efb0e 	bge	r17,r16,3970 <__alt_data_end+0xff003970>
    3d84:	01400074 	movhi	r5,1
    3d88:	29453e84 	addi	r5,r5,5370
    3d8c:	d9402b15 	stw	r5,172(sp)
    3d90:	058001c4 	movi	r22,7
    3d94:	dcc02c17 	ldw	r19,176(sp)
    3d98:	00000306 	br	3da8 <___vfprintf_internal_r+0x1524>
    3d9c:	42000204 	addi	r8,r8,8
    3da0:	843ffc04 	addi	r16,r16,-16
    3da4:	8c3ef50e 	bge	r17,r16,397c <__alt_data_end+0xff00397c>
    3da8:	18c00404 	addi	r3,r3,16
    3dac:	10800044 	addi	r2,r2,1
    3db0:	45000015 	stw	r20,0(r8)
    3db4:	44400115 	stw	r17,4(r8)
    3db8:	d8c02015 	stw	r3,128(sp)
    3dbc:	d8801f15 	stw	r2,124(sp)
    3dc0:	b0bff60e 	bge	r22,r2,3d9c <__alt_data_end+0xff003d9c>
    3dc4:	d9801e04 	addi	r6,sp,120
    3dc8:	b80b883a 	mov	r5,r23
    3dcc:	9809883a 	mov	r4,r19
    3dd0:	00096200 	call	9620 <__sprint_r>
    3dd4:	103bad1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3dd8:	d8c02017 	ldw	r3,128(sp)
    3ddc:	d8801f17 	ldw	r2,124(sp)
    3de0:	da000404 	addi	r8,sp,16
    3de4:	003fee06 	br	3da0 <__alt_data_end+0xff003da0>
    3de8:	9088703a 	and	r4,r18,r2
    3dec:	203eab1e 	bne	r4,zero,389c <__alt_data_end+0xff00389c>
    3df0:	dc401f17 	ldw	r17,124(sp)
    3df4:	40800115 	stw	r2,4(r8)
    3df8:	44000015 	stw	r16,0(r8)
    3dfc:	8c400044 	addi	r17,r17,1
    3e00:	d8c02015 	stw	r3,128(sp)
    3e04:	dc401f15 	stw	r17,124(sp)
    3e08:	008001c4 	movi	r2,7
    3e0c:	14400e16 	blt	r2,r17,3e48 <___vfprintf_internal_r+0x15c4>
    3e10:	45800204 	addi	r22,r8,8
    3e14:	003eca06 	br	3940 <__alt_data_end+0xff003940>
    3e18:	01000074 	movhi	r4,1
    3e1c:	21053e84 	addi	r4,r4,5370
    3e20:	d9002b15 	stw	r4,172(sp)
    3e24:	d8802b17 	ldw	r2,172(sp)
    3e28:	1c07883a 	add	r3,r3,r16
    3e2c:	8c400044 	addi	r17,r17,1
    3e30:	b0800015 	stw	r2,0(r22)
    3e34:	b4000115 	stw	r16,4(r22)
    3e38:	d8c02015 	stw	r3,128(sp)
    3e3c:	dc401f15 	stw	r17,124(sp)
    3e40:	008001c4 	movi	r2,7
    3e44:	147ebd0e 	bge	r2,r17,393c <__alt_data_end+0xff00393c>
    3e48:	d9002c17 	ldw	r4,176(sp)
    3e4c:	d9801e04 	addi	r6,sp,120
    3e50:	b80b883a 	mov	r5,r23
    3e54:	00096200 	call	9620 <__sprint_r>
    3e58:	103b8c1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3e5c:	d8c02017 	ldw	r3,128(sp)
    3e60:	dc401f17 	ldw	r17,124(sp)
    3e64:	dd800404 	addi	r22,sp,16
    3e68:	003eb506 	br	3940 <__alt_data_end+0xff003940>
    3e6c:	d9002c17 	ldw	r4,176(sp)
    3e70:	d9801e04 	addi	r6,sp,120
    3e74:	b80b883a 	mov	r5,r23
    3e78:	00096200 	call	9620 <__sprint_r>
    3e7c:	103b831e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3e80:	d8c02017 	ldw	r3,128(sp)
    3e84:	dc401f17 	ldw	r17,124(sp)
    3e88:	da000404 	addi	r8,sp,16
    3e8c:	003e8d06 	br	38c4 <__alt_data_end+0xff0038c4>
    3e90:	d9002c17 	ldw	r4,176(sp)
    3e94:	d9801e04 	addi	r6,sp,120
    3e98:	b80b883a 	mov	r5,r23
    3e9c:	00096200 	call	9620 <__sprint_r>
    3ea0:	103b7a1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3ea4:	d8c02017 	ldw	r3,128(sp)
    3ea8:	dc401f17 	ldw	r17,124(sp)
    3eac:	dd800404 	addi	r22,sp,16
    3eb0:	003e8f06 	br	38f0 <__alt_data_end+0xff0038f0>
    3eb4:	0027883a 	mov	r19,zero
    3eb8:	003f4a06 	br	3be4 <__alt_data_end+0xff003be4>
    3ebc:	d9002c17 	ldw	r4,176(sp)
    3ec0:	d9801e04 	addi	r6,sp,120
    3ec4:	b80b883a 	mov	r5,r23
    3ec8:	00096200 	call	9620 <__sprint_r>
    3ecc:	103b6f1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    3ed0:	d8c02017 	ldw	r3,128(sp)
    3ed4:	da000404 	addi	r8,sp,16
    3ed8:	003c9d06 	br	3150 <__alt_data_end+0xff003150>
    3edc:	04e7c83a 	sub	r19,zero,r19
    3ee0:	9804c03a 	cmpne	r2,r19,zero
    3ee4:	05adc83a 	sub	r22,zero,r22
    3ee8:	b0adc83a 	sub	r22,r22,r2
    3eec:	d8802917 	ldw	r2,164(sp)
    3ef0:	07000b44 	movi	fp,45
    3ef4:	df002785 	stb	fp,158(sp)
    3ef8:	10017b16 	blt	r2,zero,44e8 <___vfprintf_internal_r+0x1c64>
    3efc:	00bfdfc4 	movi	r2,-129
    3f00:	90a4703a 	and	r18,r18,r2
    3f04:	003bb106 	br	2dcc <__alt_data_end+0xff002dcc>
    3f08:	d9003617 	ldw	r4,216(sp)
    3f0c:	d9403817 	ldw	r5,224(sp)
    3f10:	da003d15 	stw	r8,244(sp)
    3f14:	00092980 	call	9298 <__fpclassifyd>
    3f18:	da003d17 	ldw	r8,244(sp)
    3f1c:	1000f026 	beq	r2,zero,42e0 <___vfprintf_internal_r+0x1a5c>
    3f20:	d9002917 	ldw	r4,164(sp)
    3f24:	05bff7c4 	movi	r22,-33
    3f28:	00bfffc4 	movi	r2,-1
    3f2c:	8dac703a 	and	r22,r17,r22
    3f30:	20820026 	beq	r4,r2,4734 <___vfprintf_internal_r+0x1eb0>
    3f34:	008011c4 	movi	r2,71
    3f38:	b081f726 	beq	r22,r2,4718 <___vfprintf_internal_r+0x1e94>
    3f3c:	d9003817 	ldw	r4,224(sp)
    3f40:	90c04014 	ori	r3,r18,256
    3f44:	d8c02b15 	stw	r3,172(sp)
    3f48:	20021516 	blt	r4,zero,47a0 <___vfprintf_internal_r+0x1f1c>
    3f4c:	dcc03817 	ldw	r19,224(sp)
    3f50:	d8002a05 	stb	zero,168(sp)
    3f54:	00801984 	movi	r2,102
    3f58:	8881f926 	beq	r17,r2,4740 <___vfprintf_internal_r+0x1ebc>
    3f5c:	00801184 	movi	r2,70
    3f60:	88821c26 	beq	r17,r2,47d4 <___vfprintf_internal_r+0x1f50>
    3f64:	00801144 	movi	r2,69
    3f68:	b081ef26 	beq	r22,r2,4728 <___vfprintf_internal_r+0x1ea4>
    3f6c:	d8c02917 	ldw	r3,164(sp)
    3f70:	d8802104 	addi	r2,sp,132
    3f74:	d8800315 	stw	r2,12(sp)
    3f78:	d9403617 	ldw	r5,216(sp)
    3f7c:	d8802504 	addi	r2,sp,148
    3f80:	d9002c17 	ldw	r4,176(sp)
    3f84:	d8800215 	stw	r2,8(sp)
    3f88:	d8802604 	addi	r2,sp,152
    3f8c:	d8c00015 	stw	r3,0(sp)
    3f90:	d8800115 	stw	r2,4(sp)
    3f94:	01c00084 	movi	r7,2
    3f98:	980d883a 	mov	r6,r19
    3f9c:	d8c03c15 	stw	r3,240(sp)
    3fa0:	da003d15 	stw	r8,244(sp)
    3fa4:	0004ea80 	call	4ea8 <_dtoa_r>
    3fa8:	1021883a 	mov	r16,r2
    3fac:	008019c4 	movi	r2,103
    3fb0:	d8c03c17 	ldw	r3,240(sp)
    3fb4:	da003d17 	ldw	r8,244(sp)
    3fb8:	88817126 	beq	r17,r2,4580 <___vfprintf_internal_r+0x1cfc>
    3fbc:	008011c4 	movi	r2,71
    3fc0:	88829226 	beq	r17,r2,4a0c <___vfprintf_internal_r+0x2188>
    3fc4:	80f9883a 	add	fp,r16,r3
    3fc8:	d9003617 	ldw	r4,216(sp)
    3fcc:	000d883a 	mov	r6,zero
    3fd0:	000f883a 	mov	r7,zero
    3fd4:	980b883a 	mov	r5,r19
    3fd8:	da003d15 	stw	r8,244(sp)
    3fdc:	000d0e40 	call	d0e4 <__eqdf2>
    3fe0:	da003d17 	ldw	r8,244(sp)
    3fe4:	10018d26 	beq	r2,zero,461c <___vfprintf_internal_r+0x1d98>
    3fe8:	d8802117 	ldw	r2,132(sp)
    3fec:	1700062e 	bgeu	r2,fp,4008 <___vfprintf_internal_r+0x1784>
    3ff0:	01000c04 	movi	r4,48
    3ff4:	10c00044 	addi	r3,r2,1
    3ff8:	d8c02115 	stw	r3,132(sp)
    3ffc:	11000005 	stb	r4,0(r2)
    4000:	d8802117 	ldw	r2,132(sp)
    4004:	173ffb36 	bltu	r2,fp,3ff4 <__alt_data_end+0xff003ff4>
    4008:	1405c83a 	sub	r2,r2,r16
    400c:	d8803315 	stw	r2,204(sp)
    4010:	008011c4 	movi	r2,71
    4014:	b0817626 	beq	r22,r2,45f0 <___vfprintf_internal_r+0x1d6c>
    4018:	00801944 	movi	r2,101
    401c:	1442810e 	bge	r2,r17,4a24 <___vfprintf_internal_r+0x21a0>
    4020:	d8c02617 	ldw	r3,152(sp)
    4024:	00801984 	movi	r2,102
    4028:	d8c03215 	stw	r3,200(sp)
    402c:	8881fe26 	beq	r17,r2,4828 <___vfprintf_internal_r+0x1fa4>
    4030:	d8c03217 	ldw	r3,200(sp)
    4034:	d9003317 	ldw	r4,204(sp)
    4038:	1901dd16 	blt	r3,r4,47b0 <___vfprintf_internal_r+0x1f2c>
    403c:	9480004c 	andi	r18,r18,1
    4040:	90022b1e 	bne	r18,zero,48f0 <___vfprintf_internal_r+0x206c>
    4044:	1805883a 	mov	r2,r3
    4048:	18028016 	blt	r3,zero,4a4c <___vfprintf_internal_r+0x21c8>
    404c:	d8c03217 	ldw	r3,200(sp)
    4050:	044019c4 	movi	r17,103
    4054:	d8c02e15 	stw	r3,184(sp)
    4058:	df002a07 	ldb	fp,168(sp)
    405c:	e001531e 	bne	fp,zero,45ac <___vfprintf_internal_r+0x1d28>
    4060:	df002783 	ldbu	fp,158(sp)
    4064:	d8802a15 	stw	r2,168(sp)
    4068:	dc802b17 	ldw	r18,172(sp)
    406c:	d8002915 	stw	zero,164(sp)
    4070:	003bd106 	br	2fb8 <__alt_data_end+0xff002fb8>
    4074:	d8802d17 	ldw	r2,180(sp)
    4078:	d8c02d17 	ldw	r3,180(sp)
    407c:	d9002d17 	ldw	r4,180(sp)
    4080:	10800017 	ldw	r2,0(r2)
    4084:	18c00117 	ldw	r3,4(r3)
    4088:	21000204 	addi	r4,r4,8
    408c:	d8803615 	stw	r2,216(sp)
    4090:	d8c03815 	stw	r3,224(sp)
    4094:	d9002d15 	stw	r4,180(sp)
    4098:	003b7506 	br	2e70 <__alt_data_end+0xff002e70>
    409c:	ac400007 	ldb	r17,0(r21)
    40a0:	003a5906 	br	2a08 <__alt_data_end+0xff002a08>
    40a4:	9080100c 	andi	r2,r18,64
    40a8:	1000a826 	beq	r2,zero,434c <___vfprintf_internal_r+0x1ac8>
    40ac:	d9002d17 	ldw	r4,180(sp)
    40b0:	002d883a 	mov	r22,zero
    40b4:	24c0000b 	ldhu	r19,0(r4)
    40b8:	21000104 	addi	r4,r4,4
    40bc:	d9002d15 	stw	r4,180(sp)
    40c0:	003ccb06 	br	33f0 <__alt_data_end+0xff0033f0>
    40c4:	d8c02d17 	ldw	r3,180(sp)
    40c8:	d9002917 	ldw	r4,164(sp)
    40cc:	002d883a 	mov	r22,zero
    40d0:	18800104 	addi	r2,r3,4
    40d4:	1cc00017 	ldw	r19,0(r3)
    40d8:	203ebb0e 	bge	r4,zero,3bc8 <__alt_data_end+0xff003bc8>
    40dc:	003ef106 	br	3ca4 <__alt_data_end+0xff003ca4>
    40e0:	9080040c 	andi	r2,r18,16
    40e4:	1000921e 	bne	r2,zero,4330 <___vfprintf_internal_r+0x1aac>
    40e8:	9480100c 	andi	r18,r18,64
    40ec:	90013926 	beq	r18,zero,45d4 <___vfprintf_internal_r+0x1d50>
    40f0:	d9002d17 	ldw	r4,180(sp)
    40f4:	d9402f17 	ldw	r5,188(sp)
    40f8:	20800017 	ldw	r2,0(r4)
    40fc:	21000104 	addi	r4,r4,4
    4100:	d9002d15 	stw	r4,180(sp)
    4104:	1140000d 	sth	r5,0(r2)
    4108:	003a1606 	br	2964 <__alt_data_end+0xff002964>
    410c:	9080100c 	andi	r2,r18,64
    4110:	10008026 	beq	r2,zero,4314 <___vfprintf_internal_r+0x1a90>
    4114:	d8c02d17 	ldw	r3,180(sp)
    4118:	1cc0000f 	ldh	r19,0(r3)
    411c:	18c00104 	addi	r3,r3,4
    4120:	d8c02d15 	stw	r3,180(sp)
    4124:	982dd7fa 	srai	r22,r19,31
    4128:	b005883a 	mov	r2,r22
    412c:	003b1f06 	br	2dac <__alt_data_end+0xff002dac>
    4130:	9080100c 	andi	r2,r18,64
    4134:	d8002785 	stb	zero,158(sp)
    4138:	10008a1e 	bne	r2,zero,4364 <___vfprintf_internal_r+0x1ae0>
    413c:	d9402d17 	ldw	r5,180(sp)
    4140:	d8c02917 	ldw	r3,164(sp)
    4144:	002d883a 	mov	r22,zero
    4148:	28800104 	addi	r2,r5,4
    414c:	2cc00017 	ldw	r19,0(r5)
    4150:	183e4b0e 	bge	r3,zero,3a80 <__alt_data_end+0xff003a80>
    4154:	9d86b03a 	or	r3,r19,r22
    4158:	d8802d15 	stw	r2,180(sp)
    415c:	183e4c1e 	bne	r3,zero,3a90 <__alt_data_end+0xff003a90>
    4160:	0039883a 	mov	fp,zero
    4164:	0005883a 	mov	r2,zero
    4168:	003d4006 	br	366c <__alt_data_end+0xff00366c>
    416c:	01400074 	movhi	r5,1
    4170:	29453e84 	addi	r5,r5,5370
    4174:	d9402b15 	stw	r5,172(sp)
    4178:	d9402b17 	ldw	r5,172(sp)
    417c:	1c47883a 	add	r3,r3,r17
    4180:	10800044 	addi	r2,r2,1
    4184:	41400015 	stw	r5,0(r8)
    4188:	44400115 	stw	r17,4(r8)
    418c:	d8c02015 	stw	r3,128(sp)
    4190:	d8801f15 	stw	r2,124(sp)
    4194:	010001c4 	movi	r4,7
    4198:	20bec816 	blt	r4,r2,3cbc <__alt_data_end+0xff003cbc>
    419c:	42000204 	addi	r8,r8,8
    41a0:	003ecd06 	br	3cd8 <__alt_data_end+0xff003cd8>
    41a4:	d9002917 	ldw	r4,164(sp)
    41a8:	d8002785 	stb	zero,158(sp)
    41ac:	203d2d16 	blt	r4,zero,3664 <__alt_data_end+0xff003664>
    41b0:	00bfdfc4 	movi	r2,-129
    41b4:	90a4703a 	and	r18,r18,r2
    41b8:	003a9106 	br	2c00 <__alt_data_end+0xff002c00>
    41bc:	01000074 	movhi	r4,1
    41c0:	21053e84 	addi	r4,r4,5370
    41c4:	d9002b15 	stw	r4,172(sp)
    41c8:	003c0c06 	br	31fc <__alt_data_end+0xff0031fc>
    41cc:	d9002c17 	ldw	r4,176(sp)
    41d0:	d9801e04 	addi	r6,sp,120
    41d4:	b80b883a 	mov	r5,r23
    41d8:	00096200 	call	9620 <__sprint_r>
    41dc:	103aab1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    41e0:	d8c02017 	ldw	r3,128(sp)
    41e4:	da000404 	addi	r8,sp,16
    41e8:	003d4106 	br	36f0 <__alt_data_end+0xff0036f0>
    41ec:	d8801f17 	ldw	r2,124(sp)
    41f0:	01400074 	movhi	r5,1
    41f4:	01000044 	movi	r4,1
    41f8:	18c00044 	addi	r3,r3,1
    41fc:	10800044 	addi	r2,r2,1
    4200:	29453e04 	addi	r5,r5,5368
    4204:	41000115 	stw	r4,4(r8)
    4208:	41400015 	stw	r5,0(r8)
    420c:	d8c02015 	stw	r3,128(sp)
    4210:	d8801f15 	stw	r2,124(sp)
    4214:	010001c4 	movi	r4,7
    4218:	20805c16 	blt	r4,r2,438c <___vfprintf_internal_r+0x1b08>
    421c:	42000204 	addi	r8,r8,8
    4220:	8800041e 	bne	r17,zero,4234 <___vfprintf_internal_r+0x19b0>
    4224:	d8803317 	ldw	r2,204(sp)
    4228:	1000021e 	bne	r2,zero,4234 <___vfprintf_internal_r+0x19b0>
    422c:	9080004c 	andi	r2,r18,1
    4230:	103c0926 	beq	r2,zero,3258 <__alt_data_end+0xff003258>
    4234:	d9003717 	ldw	r4,220(sp)
    4238:	d8801f17 	ldw	r2,124(sp)
    423c:	d9403417 	ldw	r5,208(sp)
    4240:	20c7883a 	add	r3,r4,r3
    4244:	10800044 	addi	r2,r2,1
    4248:	41000115 	stw	r4,4(r8)
    424c:	41400015 	stw	r5,0(r8)
    4250:	d8c02015 	stw	r3,128(sp)
    4254:	d8801f15 	stw	r2,124(sp)
    4258:	010001c4 	movi	r4,7
    425c:	20812116 	blt	r4,r2,46e4 <___vfprintf_internal_r+0x1e60>
    4260:	42000204 	addi	r8,r8,8
    4264:	0463c83a 	sub	r17,zero,r17
    4268:	0440730e 	bge	zero,r17,4438 <___vfprintf_internal_r+0x1bb4>
    426c:	05800404 	movi	r22,16
    4270:	b440860e 	bge	r22,r17,448c <___vfprintf_internal_r+0x1c08>
    4274:	01400074 	movhi	r5,1
    4278:	29453e84 	addi	r5,r5,5370
    427c:	d9402b15 	stw	r5,172(sp)
    4280:	070001c4 	movi	fp,7
    4284:	dcc02c17 	ldw	r19,176(sp)
    4288:	00000306 	br	4298 <___vfprintf_internal_r+0x1a14>
    428c:	42000204 	addi	r8,r8,8
    4290:	8c7ffc04 	addi	r17,r17,-16
    4294:	b440800e 	bge	r22,r17,4498 <___vfprintf_internal_r+0x1c14>
    4298:	18c00404 	addi	r3,r3,16
    429c:	10800044 	addi	r2,r2,1
    42a0:	45000015 	stw	r20,0(r8)
    42a4:	45800115 	stw	r22,4(r8)
    42a8:	d8c02015 	stw	r3,128(sp)
    42ac:	d8801f15 	stw	r2,124(sp)
    42b0:	e0bff60e 	bge	fp,r2,428c <__alt_data_end+0xff00428c>
    42b4:	d9801e04 	addi	r6,sp,120
    42b8:	b80b883a 	mov	r5,r23
    42bc:	9809883a 	mov	r4,r19
    42c0:	00096200 	call	9620 <__sprint_r>
    42c4:	103a711e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    42c8:	d8c02017 	ldw	r3,128(sp)
    42cc:	d8801f17 	ldw	r2,124(sp)
    42d0:	da000404 	addi	r8,sp,16
    42d4:	003fee06 	br	4290 <__alt_data_end+0xff004290>
    42d8:	00bfffc4 	movi	r2,-1
    42dc:	003a6f06 	br	2c9c <__alt_data_end+0xff002c9c>
    42e0:	008011c4 	movi	r2,71
    42e4:	1440b816 	blt	r2,r17,45c8 <___vfprintf_internal_r+0x1d44>
    42e8:	04000074 	movhi	r16,1
    42ec:	84053004 	addi	r16,r16,5312
    42f0:	00c000c4 	movi	r3,3
    42f4:	00bfdfc4 	movi	r2,-129
    42f8:	d8c02a15 	stw	r3,168(sp)
    42fc:	90a4703a 	and	r18,r18,r2
    4300:	df002783 	ldbu	fp,158(sp)
    4304:	d8c02e15 	stw	r3,184(sp)
    4308:	d8002915 	stw	zero,164(sp)
    430c:	d8003215 	stw	zero,200(sp)
    4310:	003b2906 	br	2fb8 <__alt_data_end+0xff002fb8>
    4314:	d9002d17 	ldw	r4,180(sp)
    4318:	24c00017 	ldw	r19,0(r4)
    431c:	21000104 	addi	r4,r4,4
    4320:	d9002d15 	stw	r4,180(sp)
    4324:	982dd7fa 	srai	r22,r19,31
    4328:	b005883a 	mov	r2,r22
    432c:	003a9f06 	br	2dac <__alt_data_end+0xff002dac>
    4330:	d9402d17 	ldw	r5,180(sp)
    4334:	d8c02f17 	ldw	r3,188(sp)
    4338:	28800017 	ldw	r2,0(r5)
    433c:	29400104 	addi	r5,r5,4
    4340:	d9402d15 	stw	r5,180(sp)
    4344:	10c00015 	stw	r3,0(r2)
    4348:	00398606 	br	2964 <__alt_data_end+0xff002964>
    434c:	d9402d17 	ldw	r5,180(sp)
    4350:	002d883a 	mov	r22,zero
    4354:	2cc00017 	ldw	r19,0(r5)
    4358:	29400104 	addi	r5,r5,4
    435c:	d9402d15 	stw	r5,180(sp)
    4360:	003c2306 	br	33f0 <__alt_data_end+0xff0033f0>
    4364:	d8c02d17 	ldw	r3,180(sp)
    4368:	d9002917 	ldw	r4,164(sp)
    436c:	002d883a 	mov	r22,zero
    4370:	18800104 	addi	r2,r3,4
    4374:	1cc0000b 	ldhu	r19,0(r3)
    4378:	203dc10e 	bge	r4,zero,3a80 <__alt_data_end+0xff003a80>
    437c:	003f7506 	br	4154 <__alt_data_end+0xff004154>
    4380:	04000074 	movhi	r16,1
    4384:	84052e04 	addi	r16,r16,5304
    4388:	003acc06 	br	2ebc <__alt_data_end+0xff002ebc>
    438c:	d9002c17 	ldw	r4,176(sp)
    4390:	d9801e04 	addi	r6,sp,120
    4394:	b80b883a 	mov	r5,r23
    4398:	00096200 	call	9620 <__sprint_r>
    439c:	103a3b1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    43a0:	dc402617 	ldw	r17,152(sp)
    43a4:	d8c02017 	ldw	r3,128(sp)
    43a8:	da000404 	addi	r8,sp,16
    43ac:	003f9c06 	br	4220 <__alt_data_end+0xff004220>
    43b0:	ac400043 	ldbu	r17,1(r21)
    43b4:	94800814 	ori	r18,r18,32
    43b8:	ad400044 	addi	r21,r21,1
    43bc:	8c403fcc 	andi	r17,r17,255
    43c0:	8c40201c 	xori	r17,r17,128
    43c4:	8c7fe004 	addi	r17,r17,-128
    43c8:	00398f06 	br	2a08 <__alt_data_end+0xff002a08>
    43cc:	d8c02d15 	stw	r3,180(sp)
    43d0:	0039883a 	mov	fp,zero
    43d4:	003e3506 	br	3cac <__alt_data_end+0xff003cac>
    43d8:	d9002c17 	ldw	r4,176(sp)
    43dc:	d9801e04 	addi	r6,sp,120
    43e0:	b80b883a 	mov	r5,r23
    43e4:	00096200 	call	9620 <__sprint_r>
    43e8:	103a281e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    43ec:	d8c02017 	ldw	r3,128(sp)
    43f0:	da000404 	addi	r8,sp,16
    43f4:	003cd006 	br	3738 <__alt_data_end+0xff003738>
    43f8:	8009883a 	mov	r4,r16
    43fc:	da003d15 	stw	r8,244(sp)
    4400:	00027ec0 	call	27ec <strlen>
    4404:	d8802e15 	stw	r2,184(sp)
    4408:	da003d17 	ldw	r8,244(sp)
    440c:	103c340e 	bge	r2,zero,34e0 <__alt_data_end+0xff0034e0>
    4410:	0005883a 	mov	r2,zero
    4414:	003c3206 	br	34e0 <__alt_data_end+0xff0034e0>
    4418:	d9002c17 	ldw	r4,176(sp)
    441c:	d9801e04 	addi	r6,sp,120
    4420:	b80b883a 	mov	r5,r23
    4424:	00096200 	call	9620 <__sprint_r>
    4428:	103a181e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    442c:	d8c02017 	ldw	r3,128(sp)
    4430:	d8801f17 	ldw	r2,124(sp)
    4434:	da000404 	addi	r8,sp,16
    4438:	d9403317 	ldw	r5,204(sp)
    443c:	10800044 	addi	r2,r2,1
    4440:	44000015 	stw	r16,0(r8)
    4444:	28c7883a 	add	r3,r5,r3
    4448:	003b7d06 	br	3240 <__alt_data_end+0xff003240>
    444c:	01000074 	movhi	r4,1
    4450:	21054284 	addi	r4,r4,5386
    4454:	d9003515 	stw	r4,212(sp)
    4458:	003b1406 	br	30ac <__alt_data_end+0xff0030ac>
    445c:	013fffc4 	movi	r4,-1
    4460:	003a3506 	br	2d38 <__alt_data_end+0xff002d38>
    4464:	0023883a 	mov	r17,zero
    4468:	003d9d06 	br	3ae0 <__alt_data_end+0xff003ae0>
    446c:	d9002c17 	ldw	r4,176(sp)
    4470:	d9801e04 	addi	r6,sp,120
    4474:	b80b883a 	mov	r5,r23
    4478:	00096200 	call	9620 <__sprint_r>
    447c:	103a031e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    4480:	d8c02017 	ldw	r3,128(sp)
    4484:	da000404 	addi	r8,sp,16
    4488:	003d9406 	br	3adc <__alt_data_end+0xff003adc>
    448c:	01000074 	movhi	r4,1
    4490:	21053e84 	addi	r4,r4,5370
    4494:	d9002b15 	stw	r4,172(sp)
    4498:	d9002b17 	ldw	r4,172(sp)
    449c:	1c47883a 	add	r3,r3,r17
    44a0:	10800044 	addi	r2,r2,1
    44a4:	41000015 	stw	r4,0(r8)
    44a8:	44400115 	stw	r17,4(r8)
    44ac:	d8c02015 	stw	r3,128(sp)
    44b0:	d8801f15 	stw	r2,124(sp)
    44b4:	010001c4 	movi	r4,7
    44b8:	20bfd716 	blt	r4,r2,4418 <__alt_data_end+0xff004418>
    44bc:	42000204 	addi	r8,r8,8
    44c0:	003fdd06 	br	4438 <__alt_data_end+0xff004438>
    44c4:	d9002c17 	ldw	r4,176(sp)
    44c8:	d9801e04 	addi	r6,sp,120
    44cc:	b80b883a 	mov	r5,r23
    44d0:	00096200 	call	9620 <__sprint_r>
    44d4:	1039ed1e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    44d8:	d8802617 	ldw	r2,152(sp)
    44dc:	d8c02017 	ldw	r3,128(sp)
    44e0:	da000404 	addi	r8,sp,16
    44e4:	003e1006 	br	3d28 <__alt_data_end+0xff003d28>
    44e8:	00800044 	movi	r2,1
    44ec:	10803fcc 	andi	r2,r2,255
    44f0:	00c00044 	movi	r3,1
    44f4:	10fa3526 	beq	r2,r3,2dcc <__alt_data_end+0xff002dcc>
    44f8:	00c00084 	movi	r3,2
    44fc:	10fbcb26 	beq	r2,r3,342c <__alt_data_end+0xff00342c>
    4500:	003a8f06 	br	2f40 <__alt_data_end+0xff002f40>
    4504:	01000074 	movhi	r4,1
    4508:	21054284 	addi	r4,r4,5386
    450c:	d9003515 	stw	r4,212(sp)
    4510:	003b7606 	br	32ec <__alt_data_end+0xff0032ec>
    4514:	d8802917 	ldw	r2,164(sp)
    4518:	00c00184 	movi	r3,6
    451c:	1880012e 	bgeu	r3,r2,4524 <___vfprintf_internal_r+0x1ca0>
    4520:	1805883a 	mov	r2,r3
    4524:	d8802e15 	stw	r2,184(sp)
    4528:	1000ef16 	blt	r2,zero,48e8 <___vfprintf_internal_r+0x2064>
    452c:	04000074 	movhi	r16,1
    4530:	d8802a15 	stw	r2,168(sp)
    4534:	dcc02d15 	stw	r19,180(sp)
    4538:	d8002915 	stw	zero,164(sp)
    453c:	d8003215 	stw	zero,200(sp)
    4540:	84053c04 	addi	r16,r16,5360
    4544:	0039883a 	mov	fp,zero
    4548:	003aa206 	br	2fd4 <__alt_data_end+0xff002fd4>
    454c:	0021883a 	mov	r16,zero
    4550:	003e0706 	br	3d70 <__alt_data_end+0xff003d70>
    4554:	d9002c17 	ldw	r4,176(sp)
    4558:	d9801e04 	addi	r6,sp,120
    455c:	b80b883a 	mov	r5,r23
    4560:	00096200 	call	9620 <__sprint_r>
    4564:	1039c91e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    4568:	d8802617 	ldw	r2,152(sp)
    456c:	d9403317 	ldw	r5,204(sp)
    4570:	d8c02017 	ldw	r3,128(sp)
    4574:	da000404 	addi	r8,sp,16
    4578:	2885c83a 	sub	r2,r5,r2
    457c:	003dfb06 	br	3d6c <__alt_data_end+0xff003d6c>
    4580:	9080004c 	andi	r2,r18,1
    4584:	103e8f1e 	bne	r2,zero,3fc4 <__alt_data_end+0xff003fc4>
    4588:	d8802117 	ldw	r2,132(sp)
    458c:	003e9e06 	br	4008 <__alt_data_end+0xff004008>
    4590:	1025883a 	mov	r18,r2
    4594:	0039883a 	mov	fp,zero
    4598:	00800084 	movi	r2,2
    459c:	003fd306 	br	44ec <__alt_data_end+0xff0044ec>
    45a0:	07000b44 	movi	fp,45
    45a4:	df002785 	stb	fp,158(sp)
    45a8:	003a4006 	br	2eac <__alt_data_end+0xff002eac>
    45ac:	00c00b44 	movi	r3,45
    45b0:	d8c02785 	stb	r3,158(sp)
    45b4:	d8802a15 	stw	r2,168(sp)
    45b8:	dc802b17 	ldw	r18,172(sp)
    45bc:	d8002915 	stw	zero,164(sp)
    45c0:	07000b44 	movi	fp,45
    45c4:	003a8006 	br	2fc8 <__alt_data_end+0xff002fc8>
    45c8:	04000074 	movhi	r16,1
    45cc:	84053104 	addi	r16,r16,5316
    45d0:	003f4706 	br	42f0 <__alt_data_end+0xff0042f0>
    45d4:	d8c02d17 	ldw	r3,180(sp)
    45d8:	d9002f17 	ldw	r4,188(sp)
    45dc:	18800017 	ldw	r2,0(r3)
    45e0:	18c00104 	addi	r3,r3,4
    45e4:	d8c02d15 	stw	r3,180(sp)
    45e8:	11000015 	stw	r4,0(r2)
    45ec:	0038dd06 	br	2964 <__alt_data_end+0xff002964>
    45f0:	dd802617 	ldw	r22,152(sp)
    45f4:	00bfff44 	movi	r2,-3
    45f8:	b0801c16 	blt	r22,r2,466c <___vfprintf_internal_r+0x1de8>
    45fc:	d9402917 	ldw	r5,164(sp)
    4600:	2d801a16 	blt	r5,r22,466c <___vfprintf_internal_r+0x1de8>
    4604:	dd803215 	stw	r22,200(sp)
    4608:	003e8906 	br	4030 <__alt_data_end+0xff004030>
    460c:	01000074 	movhi	r4,1
    4610:	21053e84 	addi	r4,r4,5370
    4614:	d9002b15 	stw	r4,172(sp)
    4618:	003c9106 	br	3860 <__alt_data_end+0xff003860>
    461c:	e005883a 	mov	r2,fp
    4620:	003e7906 	br	4008 <__alt_data_end+0xff004008>
    4624:	d9402917 	ldw	r5,164(sp)
    4628:	df002783 	ldbu	fp,158(sp)
    462c:	dcc02d15 	stw	r19,180(sp)
    4630:	d9402a15 	stw	r5,168(sp)
    4634:	d9402e15 	stw	r5,184(sp)
    4638:	d8002915 	stw	zero,164(sp)
    463c:	d8003215 	stw	zero,200(sp)
    4640:	003a5d06 	br	2fb8 <__alt_data_end+0xff002fb8>
    4644:	9080004c 	andi	r2,r18,1
    4648:	0039883a 	mov	fp,zero
    464c:	10000426 	beq	r2,zero,4660 <___vfprintf_internal_r+0x1ddc>
    4650:	00800c04 	movi	r2,48
    4654:	dc001dc4 	addi	r16,sp,119
    4658:	d8801dc5 	stb	r2,119(sp)
    465c:	003b8006 	br	3460 <__alt_data_end+0xff003460>
    4660:	d8002e15 	stw	zero,184(sp)
    4664:	dc001e04 	addi	r16,sp,120
    4668:	003a4d06 	br	2fa0 <__alt_data_end+0xff002fa0>
    466c:	8c7fff84 	addi	r17,r17,-2
    4670:	b5bfffc4 	addi	r22,r22,-1
    4674:	dd802615 	stw	r22,152(sp)
    4678:	dc4022c5 	stb	r17,139(sp)
    467c:	b000bf16 	blt	r22,zero,497c <___vfprintf_internal_r+0x20f8>
    4680:	00800ac4 	movi	r2,43
    4684:	d8802305 	stb	r2,140(sp)
    4688:	00800244 	movi	r2,9
    468c:	15807016 	blt	r2,r22,4850 <___vfprintf_internal_r+0x1fcc>
    4690:	00800c04 	movi	r2,48
    4694:	b5800c04 	addi	r22,r22,48
    4698:	d8802345 	stb	r2,141(sp)
    469c:	dd802385 	stb	r22,142(sp)
    46a0:	d88023c4 	addi	r2,sp,143
    46a4:	df0022c4 	addi	fp,sp,139
    46a8:	d8c03317 	ldw	r3,204(sp)
    46ac:	1739c83a 	sub	fp,r2,fp
    46b0:	d9003317 	ldw	r4,204(sp)
    46b4:	e0c7883a 	add	r3,fp,r3
    46b8:	df003a15 	stw	fp,232(sp)
    46bc:	d8c02e15 	stw	r3,184(sp)
    46c0:	00800044 	movi	r2,1
    46c4:	1100b30e 	bge	r2,r4,4994 <___vfprintf_internal_r+0x2110>
    46c8:	d8c02e17 	ldw	r3,184(sp)
    46cc:	18c00044 	addi	r3,r3,1
    46d0:	d8c02e15 	stw	r3,184(sp)
    46d4:	1805883a 	mov	r2,r3
    46d8:	1800ac16 	blt	r3,zero,498c <___vfprintf_internal_r+0x2108>
    46dc:	d8003215 	stw	zero,200(sp)
    46e0:	003e5d06 	br	4058 <__alt_data_end+0xff004058>
    46e4:	d9002c17 	ldw	r4,176(sp)
    46e8:	d9801e04 	addi	r6,sp,120
    46ec:	b80b883a 	mov	r5,r23
    46f0:	00096200 	call	9620 <__sprint_r>
    46f4:	1039651e 	bne	r2,zero,2c8c <__alt_data_end+0xff002c8c>
    46f8:	dc402617 	ldw	r17,152(sp)
    46fc:	d8c02017 	ldw	r3,128(sp)
    4700:	d8801f17 	ldw	r2,124(sp)
    4704:	da000404 	addi	r8,sp,16
    4708:	003ed606 	br	4264 <__alt_data_end+0xff004264>
    470c:	582b883a 	mov	r21,r11
    4710:	d8002915 	stw	zero,164(sp)
    4714:	0038bd06 	br	2a0c <__alt_data_end+0xff002a0c>
    4718:	d8802917 	ldw	r2,164(sp)
    471c:	103e071e 	bne	r2,zero,3f3c <__alt_data_end+0xff003f3c>
    4720:	dc002915 	stw	r16,164(sp)
    4724:	003e0506 	br	3f3c <__alt_data_end+0xff003f3c>
    4728:	d9002917 	ldw	r4,164(sp)
    472c:	20c00044 	addi	r3,r4,1
    4730:	003e0f06 	br	3f70 <__alt_data_end+0xff003f70>
    4734:	01400184 	movi	r5,6
    4738:	d9402915 	stw	r5,164(sp)
    473c:	003dff06 	br	3f3c <__alt_data_end+0xff003f3c>
    4740:	d8802104 	addi	r2,sp,132
    4744:	d8800315 	stw	r2,12(sp)
    4748:	d8802504 	addi	r2,sp,148
    474c:	d8800215 	stw	r2,8(sp)
    4750:	d8802604 	addi	r2,sp,152
    4754:	d8800115 	stw	r2,4(sp)
    4758:	d8802917 	ldw	r2,164(sp)
    475c:	d9403617 	ldw	r5,216(sp)
    4760:	d9002c17 	ldw	r4,176(sp)
    4764:	d8800015 	stw	r2,0(sp)
    4768:	01c000c4 	movi	r7,3
    476c:	980d883a 	mov	r6,r19
    4770:	da003d15 	stw	r8,244(sp)
    4774:	0004ea80 	call	4ea8 <_dtoa_r>
    4778:	d8c02917 	ldw	r3,164(sp)
    477c:	da003d17 	ldw	r8,244(sp)
    4780:	1021883a 	mov	r16,r2
    4784:	10f9883a 	add	fp,r2,r3
    4788:	81000007 	ldb	r4,0(r16)
    478c:	00800c04 	movi	r2,48
    4790:	20805e26 	beq	r4,r2,490c <___vfprintf_internal_r+0x2088>
    4794:	d8c02617 	ldw	r3,152(sp)
    4798:	e0f9883a 	add	fp,fp,r3
    479c:	003e0a06 	br	3fc8 <__alt_data_end+0xff003fc8>
    47a0:	00c00b44 	movi	r3,45
    47a4:	24e0003c 	xorhi	r19,r4,32768
    47a8:	d8c02a05 	stb	r3,168(sp)
    47ac:	003de906 	br	3f54 <__alt_data_end+0xff003f54>
    47b0:	d8c03217 	ldw	r3,200(sp)
    47b4:	00c07a0e 	bge	zero,r3,49a0 <___vfprintf_internal_r+0x211c>
    47b8:	00800044 	movi	r2,1
    47bc:	d9003317 	ldw	r4,204(sp)
    47c0:	1105883a 	add	r2,r2,r4
    47c4:	d8802e15 	stw	r2,184(sp)
    47c8:	10004e16 	blt	r2,zero,4904 <___vfprintf_internal_r+0x2080>
    47cc:	044019c4 	movi	r17,103
    47d0:	003e2106 	br	4058 <__alt_data_end+0xff004058>
    47d4:	d9002917 	ldw	r4,164(sp)
    47d8:	d8802104 	addi	r2,sp,132
    47dc:	d8800315 	stw	r2,12(sp)
    47e0:	d9000015 	stw	r4,0(sp)
    47e4:	d8802504 	addi	r2,sp,148
    47e8:	d9403617 	ldw	r5,216(sp)
    47ec:	d9002c17 	ldw	r4,176(sp)
    47f0:	d8800215 	stw	r2,8(sp)
    47f4:	d8802604 	addi	r2,sp,152
    47f8:	d8800115 	stw	r2,4(sp)
    47fc:	01c000c4 	movi	r7,3
    4800:	980d883a 	mov	r6,r19
    4804:	da003d15 	stw	r8,244(sp)
    4808:	0004ea80 	call	4ea8 <_dtoa_r>
    480c:	d8c02917 	ldw	r3,164(sp)
    4810:	da003d17 	ldw	r8,244(sp)
    4814:	1021883a 	mov	r16,r2
    4818:	00801184 	movi	r2,70
    481c:	80f9883a 	add	fp,r16,r3
    4820:	88bfd926 	beq	r17,r2,4788 <__alt_data_end+0xff004788>
    4824:	003de806 	br	3fc8 <__alt_data_end+0xff003fc8>
    4828:	d9002917 	ldw	r4,164(sp)
    482c:	00c04d0e 	bge	zero,r3,4964 <___vfprintf_internal_r+0x20e0>
    4830:	2000441e 	bne	r4,zero,4944 <___vfprintf_internal_r+0x20c0>
    4834:	9480004c 	andi	r18,r18,1
    4838:	9000421e 	bne	r18,zero,4944 <___vfprintf_internal_r+0x20c0>
    483c:	1805883a 	mov	r2,r3
    4840:	18007016 	blt	r3,zero,4a04 <___vfprintf_internal_r+0x2180>
    4844:	d8c03217 	ldw	r3,200(sp)
    4848:	d8c02e15 	stw	r3,184(sp)
    484c:	003e0206 	br	4058 <__alt_data_end+0xff004058>
    4850:	df0022c4 	addi	fp,sp,139
    4854:	dc002915 	stw	r16,164(sp)
    4858:	4027883a 	mov	r19,r8
    485c:	e021883a 	mov	r16,fp
    4860:	b009883a 	mov	r4,r22
    4864:	01400284 	movi	r5,10
    4868:	0001cf40 	call	1cf4 <__modsi3>
    486c:	10800c04 	addi	r2,r2,48
    4870:	843fffc4 	addi	r16,r16,-1
    4874:	b009883a 	mov	r4,r22
    4878:	01400284 	movi	r5,10
    487c:	80800005 	stb	r2,0(r16)
    4880:	0001c700 	call	1c70 <__divsi3>
    4884:	102d883a 	mov	r22,r2
    4888:	00800244 	movi	r2,9
    488c:	15bff416 	blt	r2,r22,4860 <__alt_data_end+0xff004860>
    4890:	9811883a 	mov	r8,r19
    4894:	b0800c04 	addi	r2,r22,48
    4898:	8027883a 	mov	r19,r16
    489c:	997fffc4 	addi	r5,r19,-1
    48a0:	98bfffc5 	stb	r2,-1(r19)
    48a4:	dc002917 	ldw	r16,164(sp)
    48a8:	2f006a2e 	bgeu	r5,fp,4a54 <___vfprintf_internal_r+0x21d0>
    48ac:	d9c02384 	addi	r7,sp,142
    48b0:	3ccfc83a 	sub	r7,r7,r19
    48b4:	d9002344 	addi	r4,sp,141
    48b8:	e1cf883a 	add	r7,fp,r7
    48bc:	00000106 	br	48c4 <___vfprintf_internal_r+0x2040>
    48c0:	28800003 	ldbu	r2,0(r5)
    48c4:	20800005 	stb	r2,0(r4)
    48c8:	21000044 	addi	r4,r4,1
    48cc:	29400044 	addi	r5,r5,1
    48d0:	393ffb1e 	bne	r7,r4,48c0 <__alt_data_end+0xff0048c0>
    48d4:	d8802304 	addi	r2,sp,140
    48d8:	14c5c83a 	sub	r2,r2,r19
    48dc:	d8c02344 	addi	r3,sp,141
    48e0:	1885883a 	add	r2,r3,r2
    48e4:	003f7006 	br	46a8 <__alt_data_end+0xff0046a8>
    48e8:	0005883a 	mov	r2,zero
    48ec:	003f0f06 	br	452c <__alt_data_end+0xff00452c>
    48f0:	d8c03217 	ldw	r3,200(sp)
    48f4:	18c00044 	addi	r3,r3,1
    48f8:	d8c02e15 	stw	r3,184(sp)
    48fc:	1805883a 	mov	r2,r3
    4900:	183fb20e 	bge	r3,zero,47cc <__alt_data_end+0xff0047cc>
    4904:	0005883a 	mov	r2,zero
    4908:	003fb006 	br	47cc <__alt_data_end+0xff0047cc>
    490c:	d9003617 	ldw	r4,216(sp)
    4910:	000d883a 	mov	r6,zero
    4914:	000f883a 	mov	r7,zero
    4918:	980b883a 	mov	r5,r19
    491c:	d8c03c15 	stw	r3,240(sp)
    4920:	da003d15 	stw	r8,244(sp)
    4924:	000d0e40 	call	d0e4 <__eqdf2>
    4928:	d8c03c17 	ldw	r3,240(sp)
    492c:	da003d17 	ldw	r8,244(sp)
    4930:	103f9826 	beq	r2,zero,4794 <__alt_data_end+0xff004794>
    4934:	00800044 	movi	r2,1
    4938:	10c7c83a 	sub	r3,r2,r3
    493c:	d8c02615 	stw	r3,152(sp)
    4940:	003f9506 	br	4798 <__alt_data_end+0xff004798>
    4944:	d9002917 	ldw	r4,164(sp)
    4948:	d8c03217 	ldw	r3,200(sp)
    494c:	20800044 	addi	r2,r4,1
    4950:	1885883a 	add	r2,r3,r2
    4954:	d8802e15 	stw	r2,184(sp)
    4958:	103dbf0e 	bge	r2,zero,4058 <__alt_data_end+0xff004058>
    495c:	0005883a 	mov	r2,zero
    4960:	003dbd06 	br	4058 <__alt_data_end+0xff004058>
    4964:	2000211e 	bne	r4,zero,49ec <___vfprintf_internal_r+0x2168>
    4968:	9480004c 	andi	r18,r18,1
    496c:	90001f1e 	bne	r18,zero,49ec <___vfprintf_internal_r+0x2168>
    4970:	00800044 	movi	r2,1
    4974:	d8802e15 	stw	r2,184(sp)
    4978:	003db706 	br	4058 <__alt_data_end+0xff004058>
    497c:	00800b44 	movi	r2,45
    4980:	05adc83a 	sub	r22,zero,r22
    4984:	d8802305 	stb	r2,140(sp)
    4988:	003f3f06 	br	4688 <__alt_data_end+0xff004688>
    498c:	0005883a 	mov	r2,zero
    4990:	003f5206 	br	46dc <__alt_data_end+0xff0046dc>
    4994:	90a4703a 	and	r18,r18,r2
    4998:	903f4e26 	beq	r18,zero,46d4 <__alt_data_end+0xff0046d4>
    499c:	003f4a06 	br	46c8 <__alt_data_end+0xff0046c8>
    49a0:	00800084 	movi	r2,2
    49a4:	10c5c83a 	sub	r2,r2,r3
    49a8:	003f8406 	br	47bc <__alt_data_end+0xff0047bc>
    49ac:	d8802d17 	ldw	r2,180(sp)
    49b0:	d9002d17 	ldw	r4,180(sp)
    49b4:	ac400043 	ldbu	r17,1(r21)
    49b8:	10800017 	ldw	r2,0(r2)
    49bc:	582b883a 	mov	r21,r11
    49c0:	d8802915 	stw	r2,164(sp)
    49c4:	20800104 	addi	r2,r4,4
    49c8:	d9002917 	ldw	r4,164(sp)
    49cc:	d8802d15 	stw	r2,180(sp)
    49d0:	203e7a0e 	bge	r4,zero,43bc <__alt_data_end+0xff0043bc>
    49d4:	8c403fcc 	andi	r17,r17,255
    49d8:	00bfffc4 	movi	r2,-1
    49dc:	8c40201c 	xori	r17,r17,128
    49e0:	d8802915 	stw	r2,164(sp)
    49e4:	8c7fe004 	addi	r17,r17,-128
    49e8:	00380706 	br	2a08 <__alt_data_end+0xff002a08>
    49ec:	d8c02917 	ldw	r3,164(sp)
    49f0:	18c00084 	addi	r3,r3,2
    49f4:	d8c02e15 	stw	r3,184(sp)
    49f8:	1805883a 	mov	r2,r3
    49fc:	183d960e 	bge	r3,zero,4058 <__alt_data_end+0xff004058>
    4a00:	003fd606 	br	495c <__alt_data_end+0xff00495c>
    4a04:	0005883a 	mov	r2,zero
    4a08:	003f8e06 	br	4844 <__alt_data_end+0xff004844>
    4a0c:	9080004c 	andi	r2,r18,1
    4a10:	103f811e 	bne	r2,zero,4818 <__alt_data_end+0xff004818>
    4a14:	d8802117 	ldw	r2,132(sp)
    4a18:	1405c83a 	sub	r2,r2,r16
    4a1c:	d8803315 	stw	r2,204(sp)
    4a20:	b47ef326 	beq	r22,r17,45f0 <__alt_data_end+0xff0045f0>
    4a24:	dd802617 	ldw	r22,152(sp)
    4a28:	003f1106 	br	4670 <__alt_data_end+0xff004670>
    4a2c:	d9c02785 	stb	r7,158(sp)
    4a30:	00390406 	br	2e44 <__alt_data_end+0xff002e44>
    4a34:	d9c02785 	stb	r7,158(sp)
    4a38:	0038d306 	br	2d88 <__alt_data_end+0xff002d88>
    4a3c:	d9c02785 	stb	r7,158(sp)
    4a40:	003a6106 	br	33c8 <__alt_data_end+0xff0033c8>
    4a44:	d9c02785 	stb	r7,158(sp)
    4a48:	003af806 	br	362c <__alt_data_end+0xff00362c>
    4a4c:	0005883a 	mov	r2,zero
    4a50:	003d7e06 	br	404c <__alt_data_end+0xff00404c>
    4a54:	d8802344 	addi	r2,sp,141
    4a58:	003f1306 	br	46a8 <__alt_data_end+0xff0046a8>
    4a5c:	d9c02785 	stb	r7,158(sp)
    4a60:	00392306 	br	2ef0 <__alt_data_end+0xff002ef0>
    4a64:	d9c02785 	stb	r7,158(sp)
    4a68:	003aa906 	br	3510 <__alt_data_end+0xff003510>
    4a6c:	d9c02785 	stb	r7,158(sp)
    4a70:	003a3d06 	br	3368 <__alt_data_end+0xff003368>
    4a74:	d9c02785 	stb	r7,158(sp)
    4a78:	003aca06 	br	35a4 <__alt_data_end+0xff0035a4>

00004a7c <__vfprintf_internal>:
    4a7c:	00800074 	movhi	r2,1
    4a80:	108cd904 	addi	r2,r2,13156
    4a84:	300f883a 	mov	r7,r6
    4a88:	280d883a 	mov	r6,r5
    4a8c:	200b883a 	mov	r5,r4
    4a90:	11000017 	ldw	r4,0(r2)
    4a94:	00028841 	jmpi	2884 <___vfprintf_internal_r>

00004a98 <__sbprintf>:
    4a98:	2880030b 	ldhu	r2,12(r5)
    4a9c:	2ac01917 	ldw	r11,100(r5)
    4aa0:	2a80038b 	ldhu	r10,14(r5)
    4aa4:	2a400717 	ldw	r9,28(r5)
    4aa8:	2a000917 	ldw	r8,36(r5)
    4aac:	defee204 	addi	sp,sp,-1144
    4ab0:	00c10004 	movi	r3,1024
    4ab4:	dc011a15 	stw	r16,1128(sp)
    4ab8:	10bfff4c 	andi	r2,r2,65533
    4abc:	2821883a 	mov	r16,r5
    4ac0:	d8cb883a 	add	r5,sp,r3
    4ac4:	dc811c15 	stw	r18,1136(sp)
    4ac8:	dc411b15 	stw	r17,1132(sp)
    4acc:	dfc11d15 	stw	ra,1140(sp)
    4ad0:	2025883a 	mov	r18,r4
    4ad4:	d881030d 	sth	r2,1036(sp)
    4ad8:	dac11915 	stw	r11,1124(sp)
    4adc:	da81038d 	sth	r10,1038(sp)
    4ae0:	da410715 	stw	r9,1052(sp)
    4ae4:	da010915 	stw	r8,1060(sp)
    4ae8:	dec10015 	stw	sp,1024(sp)
    4aec:	dec10415 	stw	sp,1040(sp)
    4af0:	d8c10215 	stw	r3,1032(sp)
    4af4:	d8c10515 	stw	r3,1044(sp)
    4af8:	d8010615 	stw	zero,1048(sp)
    4afc:	00028840 	call	2884 <___vfprintf_internal_r>
    4b00:	1023883a 	mov	r17,r2
    4b04:	10000416 	blt	r2,zero,4b18 <__sbprintf+0x80>
    4b08:	d9410004 	addi	r5,sp,1024
    4b0c:	9009883a 	mov	r4,r18
    4b10:	000674c0 	call	674c <_fflush_r>
    4b14:	10000d1e 	bne	r2,zero,4b4c <__sbprintf+0xb4>
    4b18:	d881030b 	ldhu	r2,1036(sp)
    4b1c:	1080100c 	andi	r2,r2,64
    4b20:	10000326 	beq	r2,zero,4b30 <__sbprintf+0x98>
    4b24:	8080030b 	ldhu	r2,12(r16)
    4b28:	10801014 	ori	r2,r2,64
    4b2c:	8080030d 	sth	r2,12(r16)
    4b30:	8805883a 	mov	r2,r17
    4b34:	dfc11d17 	ldw	ra,1140(sp)
    4b38:	dc811c17 	ldw	r18,1136(sp)
    4b3c:	dc411b17 	ldw	r17,1132(sp)
    4b40:	dc011a17 	ldw	r16,1128(sp)
    4b44:	dec11e04 	addi	sp,sp,1144
    4b48:	f800283a 	ret
    4b4c:	047fffc4 	movi	r17,-1
    4b50:	003ff106 	br	4b18 <__alt_data_end+0xff004b18>

00004b54 <__swsetup_r>:
    4b54:	00800074 	movhi	r2,1
    4b58:	defffd04 	addi	sp,sp,-12
    4b5c:	108cd904 	addi	r2,r2,13156
    4b60:	dc400115 	stw	r17,4(sp)
    4b64:	2023883a 	mov	r17,r4
    4b68:	11000017 	ldw	r4,0(r2)
    4b6c:	dc000015 	stw	r16,0(sp)
    4b70:	dfc00215 	stw	ra,8(sp)
    4b74:	2821883a 	mov	r16,r5
    4b78:	20000226 	beq	r4,zero,4b84 <__swsetup_r+0x30>
    4b7c:	20800e17 	ldw	r2,56(r4)
    4b80:	10003126 	beq	r2,zero,4c48 <__swsetup_r+0xf4>
    4b84:	8080030b 	ldhu	r2,12(r16)
    4b88:	10c0020c 	andi	r3,r2,8
    4b8c:	1009883a 	mov	r4,r2
    4b90:	18000f26 	beq	r3,zero,4bd0 <__swsetup_r+0x7c>
    4b94:	80c00417 	ldw	r3,16(r16)
    4b98:	18001526 	beq	r3,zero,4bf0 <__swsetup_r+0x9c>
    4b9c:	1100004c 	andi	r4,r2,1
    4ba0:	20001c1e 	bne	r4,zero,4c14 <__swsetup_r+0xc0>
    4ba4:	1080008c 	andi	r2,r2,2
    4ba8:	1000291e 	bne	r2,zero,4c50 <__swsetup_r+0xfc>
    4bac:	80800517 	ldw	r2,20(r16)
    4bb0:	80800215 	stw	r2,8(r16)
    4bb4:	18001c26 	beq	r3,zero,4c28 <__swsetup_r+0xd4>
    4bb8:	0005883a 	mov	r2,zero
    4bbc:	dfc00217 	ldw	ra,8(sp)
    4bc0:	dc400117 	ldw	r17,4(sp)
    4bc4:	dc000017 	ldw	r16,0(sp)
    4bc8:	dec00304 	addi	sp,sp,12
    4bcc:	f800283a 	ret
    4bd0:	2080040c 	andi	r2,r4,16
    4bd4:	10002e26 	beq	r2,zero,4c90 <__swsetup_r+0x13c>
    4bd8:	2080010c 	andi	r2,r4,4
    4bdc:	10001e1e 	bne	r2,zero,4c58 <__swsetup_r+0x104>
    4be0:	80c00417 	ldw	r3,16(r16)
    4be4:	20800214 	ori	r2,r4,8
    4be8:	8080030d 	sth	r2,12(r16)
    4bec:	183feb1e 	bne	r3,zero,4b9c <__alt_data_end+0xff004b9c>
    4bf0:	1100a00c 	andi	r4,r2,640
    4bf4:	01408004 	movi	r5,512
    4bf8:	217fe826 	beq	r4,r5,4b9c <__alt_data_end+0xff004b9c>
    4bfc:	800b883a 	mov	r5,r16
    4c00:	8809883a 	mov	r4,r17
    4c04:	00076cc0 	call	76cc <__smakebuf_r>
    4c08:	8080030b 	ldhu	r2,12(r16)
    4c0c:	80c00417 	ldw	r3,16(r16)
    4c10:	003fe206 	br	4b9c <__alt_data_end+0xff004b9c>
    4c14:	80800517 	ldw	r2,20(r16)
    4c18:	80000215 	stw	zero,8(r16)
    4c1c:	0085c83a 	sub	r2,zero,r2
    4c20:	80800615 	stw	r2,24(r16)
    4c24:	183fe41e 	bne	r3,zero,4bb8 <__alt_data_end+0xff004bb8>
    4c28:	80c0030b 	ldhu	r3,12(r16)
    4c2c:	0005883a 	mov	r2,zero
    4c30:	1900200c 	andi	r4,r3,128
    4c34:	203fe126 	beq	r4,zero,4bbc <__alt_data_end+0xff004bbc>
    4c38:	18c01014 	ori	r3,r3,64
    4c3c:	80c0030d 	sth	r3,12(r16)
    4c40:	00bfffc4 	movi	r2,-1
    4c44:	003fdd06 	br	4bbc <__alt_data_end+0xff004bbc>
    4c48:	0006b280 	call	6b28 <__sinit>
    4c4c:	003fcd06 	br	4b84 <__alt_data_end+0xff004b84>
    4c50:	0005883a 	mov	r2,zero
    4c54:	003fd606 	br	4bb0 <__alt_data_end+0xff004bb0>
    4c58:	81400c17 	ldw	r5,48(r16)
    4c5c:	28000626 	beq	r5,zero,4c78 <__swsetup_r+0x124>
    4c60:	80801004 	addi	r2,r16,64
    4c64:	28800326 	beq	r5,r2,4c74 <__swsetup_r+0x120>
    4c68:	8809883a 	mov	r4,r17
    4c6c:	0006c9c0 	call	6c9c <_free_r>
    4c70:	8100030b 	ldhu	r4,12(r16)
    4c74:	80000c15 	stw	zero,48(r16)
    4c78:	80c00417 	ldw	r3,16(r16)
    4c7c:	00bff6c4 	movi	r2,-37
    4c80:	1108703a 	and	r4,r2,r4
    4c84:	80000115 	stw	zero,4(r16)
    4c88:	80c00015 	stw	r3,0(r16)
    4c8c:	003fd506 	br	4be4 <__alt_data_end+0xff004be4>
    4c90:	00800244 	movi	r2,9
    4c94:	88800015 	stw	r2,0(r17)
    4c98:	20801014 	ori	r2,r4,64
    4c9c:	8080030d 	sth	r2,12(r16)
    4ca0:	00bfffc4 	movi	r2,-1
    4ca4:	003fc506 	br	4bbc <__alt_data_end+0xff004bbc>

00004ca8 <quorem>:
    4ca8:	defff704 	addi	sp,sp,-36
    4cac:	dc800215 	stw	r18,8(sp)
    4cb0:	20800417 	ldw	r2,16(r4)
    4cb4:	2c800417 	ldw	r18,16(r5)
    4cb8:	dfc00815 	stw	ra,32(sp)
    4cbc:	ddc00715 	stw	r23,28(sp)
    4cc0:	dd800615 	stw	r22,24(sp)
    4cc4:	dd400515 	stw	r21,20(sp)
    4cc8:	dd000415 	stw	r20,16(sp)
    4ccc:	dcc00315 	stw	r19,12(sp)
    4cd0:	dc400115 	stw	r17,4(sp)
    4cd4:	dc000015 	stw	r16,0(sp)
    4cd8:	14807116 	blt	r2,r18,4ea0 <quorem+0x1f8>
    4cdc:	94bfffc4 	addi	r18,r18,-1
    4ce0:	94ad883a 	add	r22,r18,r18
    4ce4:	b5ad883a 	add	r22,r22,r22
    4ce8:	2c400504 	addi	r17,r5,20
    4cec:	8da9883a 	add	r20,r17,r22
    4cf0:	25400504 	addi	r21,r4,20
    4cf4:	282f883a 	mov	r23,r5
    4cf8:	adad883a 	add	r22,r21,r22
    4cfc:	a1400017 	ldw	r5,0(r20)
    4d00:	2021883a 	mov	r16,r4
    4d04:	b1000017 	ldw	r4,0(r22)
    4d08:	29400044 	addi	r5,r5,1
    4d0c:	0001d680 	call	1d68 <__udivsi3>
    4d10:	1027883a 	mov	r19,r2
    4d14:	10002c26 	beq	r2,zero,4dc8 <quorem+0x120>
    4d18:	a813883a 	mov	r9,r21
    4d1c:	880b883a 	mov	r5,r17
    4d20:	0009883a 	mov	r4,zero
    4d24:	000d883a 	mov	r6,zero
    4d28:	2a000017 	ldw	r8,0(r5)
    4d2c:	49c00017 	ldw	r7,0(r9)
    4d30:	29400104 	addi	r5,r5,4
    4d34:	40bfffcc 	andi	r2,r8,65535
    4d38:	14c5383a 	mul	r2,r2,r19
    4d3c:	4010d43a 	srli	r8,r8,16
    4d40:	38ffffcc 	andi	r3,r7,65535
    4d44:	1105883a 	add	r2,r2,r4
    4d48:	1008d43a 	srli	r4,r2,16
    4d4c:	44d1383a 	mul	r8,r8,r19
    4d50:	198d883a 	add	r6,r3,r6
    4d54:	10ffffcc 	andi	r3,r2,65535
    4d58:	30c7c83a 	sub	r3,r6,r3
    4d5c:	380ed43a 	srli	r7,r7,16
    4d60:	4105883a 	add	r2,r8,r4
    4d64:	180dd43a 	srai	r6,r3,16
    4d68:	113fffcc 	andi	r4,r2,65535
    4d6c:	390fc83a 	sub	r7,r7,r4
    4d70:	398d883a 	add	r6,r7,r6
    4d74:	300e943a 	slli	r7,r6,16
    4d78:	18ffffcc 	andi	r3,r3,65535
    4d7c:	1008d43a 	srli	r4,r2,16
    4d80:	38ceb03a 	or	r7,r7,r3
    4d84:	49c00015 	stw	r7,0(r9)
    4d88:	300dd43a 	srai	r6,r6,16
    4d8c:	4a400104 	addi	r9,r9,4
    4d90:	a17fe52e 	bgeu	r20,r5,4d28 <__alt_data_end+0xff004d28>
    4d94:	b0800017 	ldw	r2,0(r22)
    4d98:	10000b1e 	bne	r2,zero,4dc8 <quorem+0x120>
    4d9c:	b0bfff04 	addi	r2,r22,-4
    4da0:	a880082e 	bgeu	r21,r2,4dc4 <quorem+0x11c>
    4da4:	b0ffff17 	ldw	r3,-4(r22)
    4da8:	18000326 	beq	r3,zero,4db8 <quorem+0x110>
    4dac:	00000506 	br	4dc4 <quorem+0x11c>
    4db0:	10c00017 	ldw	r3,0(r2)
    4db4:	1800031e 	bne	r3,zero,4dc4 <quorem+0x11c>
    4db8:	10bfff04 	addi	r2,r2,-4
    4dbc:	94bfffc4 	addi	r18,r18,-1
    4dc0:	a8bffb36 	bltu	r21,r2,4db0 <__alt_data_end+0xff004db0>
    4dc4:	84800415 	stw	r18,16(r16)
    4dc8:	b80b883a 	mov	r5,r23
    4dcc:	8009883a 	mov	r4,r16
    4dd0:	00086000 	call	8600 <__mcmp>
    4dd4:	10002616 	blt	r2,zero,4e70 <quorem+0x1c8>
    4dd8:	9cc00044 	addi	r19,r19,1
    4ddc:	a805883a 	mov	r2,r21
    4de0:	000b883a 	mov	r5,zero
    4de4:	11000017 	ldw	r4,0(r2)
    4de8:	89800017 	ldw	r6,0(r17)
    4dec:	10800104 	addi	r2,r2,4
    4df0:	20ffffcc 	andi	r3,r4,65535
    4df4:	194b883a 	add	r5,r3,r5
    4df8:	30ffffcc 	andi	r3,r6,65535
    4dfc:	28c7c83a 	sub	r3,r5,r3
    4e00:	300cd43a 	srli	r6,r6,16
    4e04:	2008d43a 	srli	r4,r4,16
    4e08:	180bd43a 	srai	r5,r3,16
    4e0c:	18ffffcc 	andi	r3,r3,65535
    4e10:	2189c83a 	sub	r4,r4,r6
    4e14:	2149883a 	add	r4,r4,r5
    4e18:	200c943a 	slli	r6,r4,16
    4e1c:	8c400104 	addi	r17,r17,4
    4e20:	200bd43a 	srai	r5,r4,16
    4e24:	30c6b03a 	or	r3,r6,r3
    4e28:	10ffff15 	stw	r3,-4(r2)
    4e2c:	a47fed2e 	bgeu	r20,r17,4de4 <__alt_data_end+0xff004de4>
    4e30:	9485883a 	add	r2,r18,r18
    4e34:	1085883a 	add	r2,r2,r2
    4e38:	a887883a 	add	r3,r21,r2
    4e3c:	18800017 	ldw	r2,0(r3)
    4e40:	10000b1e 	bne	r2,zero,4e70 <quorem+0x1c8>
    4e44:	18bfff04 	addi	r2,r3,-4
    4e48:	a880082e 	bgeu	r21,r2,4e6c <quorem+0x1c4>
    4e4c:	18ffff17 	ldw	r3,-4(r3)
    4e50:	18000326 	beq	r3,zero,4e60 <quorem+0x1b8>
    4e54:	00000506 	br	4e6c <quorem+0x1c4>
    4e58:	10c00017 	ldw	r3,0(r2)
    4e5c:	1800031e 	bne	r3,zero,4e6c <quorem+0x1c4>
    4e60:	10bfff04 	addi	r2,r2,-4
    4e64:	94bfffc4 	addi	r18,r18,-1
    4e68:	a8bffb36 	bltu	r21,r2,4e58 <__alt_data_end+0xff004e58>
    4e6c:	84800415 	stw	r18,16(r16)
    4e70:	9805883a 	mov	r2,r19
    4e74:	dfc00817 	ldw	ra,32(sp)
    4e78:	ddc00717 	ldw	r23,28(sp)
    4e7c:	dd800617 	ldw	r22,24(sp)
    4e80:	dd400517 	ldw	r21,20(sp)
    4e84:	dd000417 	ldw	r20,16(sp)
    4e88:	dcc00317 	ldw	r19,12(sp)
    4e8c:	dc800217 	ldw	r18,8(sp)
    4e90:	dc400117 	ldw	r17,4(sp)
    4e94:	dc000017 	ldw	r16,0(sp)
    4e98:	dec00904 	addi	sp,sp,36
    4e9c:	f800283a 	ret
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	003ff306 	br	4e74 <__alt_data_end+0xff004e74>

00004ea8 <_dtoa_r>:
    4ea8:	20801017 	ldw	r2,64(r4)
    4eac:	deffde04 	addi	sp,sp,-136
    4eb0:	df002015 	stw	fp,128(sp)
    4eb4:	dcc01b15 	stw	r19,108(sp)
    4eb8:	dc801a15 	stw	r18,104(sp)
    4ebc:	dc401915 	stw	r17,100(sp)
    4ec0:	dc001815 	stw	r16,96(sp)
    4ec4:	dfc02115 	stw	ra,132(sp)
    4ec8:	ddc01f15 	stw	r23,124(sp)
    4ecc:	dd801e15 	stw	r22,120(sp)
    4ed0:	dd401d15 	stw	r21,116(sp)
    4ed4:	dd001c15 	stw	r20,112(sp)
    4ed8:	d9c00315 	stw	r7,12(sp)
    4edc:	2039883a 	mov	fp,r4
    4ee0:	3023883a 	mov	r17,r6
    4ee4:	2825883a 	mov	r18,r5
    4ee8:	dc002417 	ldw	r16,144(sp)
    4eec:	3027883a 	mov	r19,r6
    4ef0:	10000826 	beq	r2,zero,4f14 <_dtoa_r+0x6c>
    4ef4:	21801117 	ldw	r6,68(r4)
    4ef8:	00c00044 	movi	r3,1
    4efc:	100b883a 	mov	r5,r2
    4f00:	1986983a 	sll	r3,r3,r6
    4f04:	11800115 	stw	r6,4(r2)
    4f08:	10c00215 	stw	r3,8(r2)
    4f0c:	0007de00 	call	7de0 <_Bfree>
    4f10:	e0001015 	stw	zero,64(fp)
    4f14:	88002e16 	blt	r17,zero,4fd0 <_dtoa_r+0x128>
    4f18:	80000015 	stw	zero,0(r16)
    4f1c:	889ffc2c 	andhi	r2,r17,32752
    4f20:	00dffc34 	movhi	r3,32752
    4f24:	10c01c26 	beq	r2,r3,4f98 <_dtoa_r+0xf0>
    4f28:	000d883a 	mov	r6,zero
    4f2c:	000f883a 	mov	r7,zero
    4f30:	9009883a 	mov	r4,r18
    4f34:	980b883a 	mov	r5,r19
    4f38:	000d0e40 	call	d0e4 <__eqdf2>
    4f3c:	10002b1e 	bne	r2,zero,4fec <_dtoa_r+0x144>
    4f40:	d9c02317 	ldw	r7,140(sp)
    4f44:	00800044 	movi	r2,1
    4f48:	38800015 	stw	r2,0(r7)
    4f4c:	d8802517 	ldw	r2,148(sp)
    4f50:	10019e26 	beq	r2,zero,55cc <_dtoa_r+0x724>
    4f54:	d8c02517 	ldw	r3,148(sp)
    4f58:	00800074 	movhi	r2,1
    4f5c:	10853e44 	addi	r2,r2,5369
    4f60:	18800015 	stw	r2,0(r3)
    4f64:	10bfffc4 	addi	r2,r2,-1
    4f68:	dfc02117 	ldw	ra,132(sp)
    4f6c:	df002017 	ldw	fp,128(sp)
    4f70:	ddc01f17 	ldw	r23,124(sp)
    4f74:	dd801e17 	ldw	r22,120(sp)
    4f78:	dd401d17 	ldw	r21,116(sp)
    4f7c:	dd001c17 	ldw	r20,112(sp)
    4f80:	dcc01b17 	ldw	r19,108(sp)
    4f84:	dc801a17 	ldw	r18,104(sp)
    4f88:	dc401917 	ldw	r17,100(sp)
    4f8c:	dc001817 	ldw	r16,96(sp)
    4f90:	dec02204 	addi	sp,sp,136
    4f94:	f800283a 	ret
    4f98:	d8c02317 	ldw	r3,140(sp)
    4f9c:	0089c3c4 	movi	r2,9999
    4fa0:	18800015 	stw	r2,0(r3)
    4fa4:	90017726 	beq	r18,zero,5584 <_dtoa_r+0x6dc>
    4fa8:	00800074 	movhi	r2,1
    4fac:	10854a04 	addi	r2,r2,5416
    4fb0:	d9002517 	ldw	r4,148(sp)
    4fb4:	203fec26 	beq	r4,zero,4f68 <__alt_data_end+0xff004f68>
    4fb8:	10c000c7 	ldb	r3,3(r2)
    4fbc:	1801781e 	bne	r3,zero,55a0 <_dtoa_r+0x6f8>
    4fc0:	10c000c4 	addi	r3,r2,3
    4fc4:	d9802517 	ldw	r6,148(sp)
    4fc8:	30c00015 	stw	r3,0(r6)
    4fcc:	003fe606 	br	4f68 <__alt_data_end+0xff004f68>
    4fd0:	04e00034 	movhi	r19,32768
    4fd4:	9cffffc4 	addi	r19,r19,-1
    4fd8:	00800044 	movi	r2,1
    4fdc:	8ce6703a 	and	r19,r17,r19
    4fe0:	80800015 	stw	r2,0(r16)
    4fe4:	9823883a 	mov	r17,r19
    4fe8:	003fcc06 	br	4f1c <__alt_data_end+0xff004f1c>
    4fec:	d8800204 	addi	r2,sp,8
    4ff0:	d8800015 	stw	r2,0(sp)
    4ff4:	d9c00104 	addi	r7,sp,4
    4ff8:	900b883a 	mov	r5,r18
    4ffc:	980d883a 	mov	r6,r19
    5000:	e009883a 	mov	r4,fp
    5004:	8820d53a 	srli	r16,r17,20
    5008:	00089cc0 	call	89cc <__d2b>
    500c:	d8800915 	stw	r2,36(sp)
    5010:	8001651e 	bne	r16,zero,55a8 <_dtoa_r+0x700>
    5014:	dd800217 	ldw	r22,8(sp)
    5018:	dc000117 	ldw	r16,4(sp)
    501c:	00800804 	movi	r2,32
    5020:	b421883a 	add	r16,r22,r16
    5024:	80c10c84 	addi	r3,r16,1074
    5028:	10c2d10e 	bge	r2,r3,5b70 <_dtoa_r+0xcc8>
    502c:	00801004 	movi	r2,64
    5030:	81010484 	addi	r4,r16,1042
    5034:	10c7c83a 	sub	r3,r2,r3
    5038:	9108d83a 	srl	r4,r18,r4
    503c:	88e2983a 	sll	r17,r17,r3
    5040:	2448b03a 	or	r4,r4,r17
    5044:	000e4ac0 	call	e4ac <__floatunsidf>
    5048:	017f8434 	movhi	r5,65040
    504c:	01800044 	movi	r6,1
    5050:	1009883a 	mov	r4,r2
    5054:	194b883a 	add	r5,r3,r5
    5058:	843fffc4 	addi	r16,r16,-1
    505c:	d9801115 	stw	r6,68(sp)
    5060:	000d883a 	mov	r6,zero
    5064:	01cffe34 	movhi	r7,16376
    5068:	000da540 	call	da54 <__subdf3>
    506c:	0198dbf4 	movhi	r6,25455
    5070:	01cff4f4 	movhi	r7,16339
    5074:	3190d844 	addi	r6,r6,17249
    5078:	39e1e9c4 	addi	r7,r7,-30809
    507c:	1009883a 	mov	r4,r2
    5080:	180b883a 	mov	r5,r3
    5084:	000d33c0 	call	d33c <__muldf3>
    5088:	01a2d874 	movhi	r6,35681
    508c:	01cff1f4 	movhi	r7,16327
    5090:	31b22cc4 	addi	r6,r6,-14157
    5094:	39e28a04 	addi	r7,r7,-30168
    5098:	180b883a 	mov	r5,r3
    509c:	1009883a 	mov	r4,r2
    50a0:	000bf500 	call	bf50 <__adddf3>
    50a4:	8009883a 	mov	r4,r16
    50a8:	1029883a 	mov	r20,r2
    50ac:	1823883a 	mov	r17,r3
    50b0:	000e3d00 	call	e3d0 <__floatsidf>
    50b4:	019427f4 	movhi	r6,20639
    50b8:	01cff4f4 	movhi	r7,16339
    50bc:	319e7ec4 	addi	r6,r6,31227
    50c0:	39d104c4 	addi	r7,r7,17427
    50c4:	1009883a 	mov	r4,r2
    50c8:	180b883a 	mov	r5,r3
    50cc:	000d33c0 	call	d33c <__muldf3>
    50d0:	100d883a 	mov	r6,r2
    50d4:	180f883a 	mov	r7,r3
    50d8:	a009883a 	mov	r4,r20
    50dc:	880b883a 	mov	r5,r17
    50e0:	000bf500 	call	bf50 <__adddf3>
    50e4:	1009883a 	mov	r4,r2
    50e8:	180b883a 	mov	r5,r3
    50ec:	1029883a 	mov	r20,r2
    50f0:	1823883a 	mov	r17,r3
    50f4:	000e3500 	call	e350 <__fixdfsi>
    50f8:	000d883a 	mov	r6,zero
    50fc:	000f883a 	mov	r7,zero
    5100:	a009883a 	mov	r4,r20
    5104:	880b883a 	mov	r5,r17
    5108:	d8800515 	stw	r2,20(sp)
    510c:	000d2480 	call	d248 <__ledf2>
    5110:	10028716 	blt	r2,zero,5b30 <_dtoa_r+0xc88>
    5114:	d8c00517 	ldw	r3,20(sp)
    5118:	00800584 	movi	r2,22
    511c:	10c27536 	bltu	r2,r3,5af4 <_dtoa_r+0xc4c>
    5120:	180490fa 	slli	r2,r3,3
    5124:	00c00074 	movhi	r3,1
    5128:	18c56604 	addi	r3,r3,5528
    512c:	1885883a 	add	r2,r3,r2
    5130:	11000017 	ldw	r4,0(r2)
    5134:	11400117 	ldw	r5,4(r2)
    5138:	900d883a 	mov	r6,r18
    513c:	980f883a 	mov	r7,r19
    5140:	000d16c0 	call	d16c <__gedf2>
    5144:	00828d0e 	bge	zero,r2,5b7c <_dtoa_r+0xcd4>
    5148:	d9000517 	ldw	r4,20(sp)
    514c:	d8000e15 	stw	zero,56(sp)
    5150:	213fffc4 	addi	r4,r4,-1
    5154:	d9000515 	stw	r4,20(sp)
    5158:	b42dc83a 	sub	r22,r22,r16
    515c:	b5bfffc4 	addi	r22,r22,-1
    5160:	b0026f16 	blt	r22,zero,5b20 <_dtoa_r+0xc78>
    5164:	d8000815 	stw	zero,32(sp)
    5168:	d9c00517 	ldw	r7,20(sp)
    516c:	38026416 	blt	r7,zero,5b00 <_dtoa_r+0xc58>
    5170:	b1ed883a 	add	r22,r22,r7
    5174:	d9c00d15 	stw	r7,52(sp)
    5178:	d8000a15 	stw	zero,40(sp)
    517c:	d9800317 	ldw	r6,12(sp)
    5180:	00800244 	movi	r2,9
    5184:	11811436 	bltu	r2,r6,55d8 <_dtoa_r+0x730>
    5188:	00800144 	movi	r2,5
    518c:	1184e10e 	bge	r2,r6,6514 <_dtoa_r+0x166c>
    5190:	31bfff04 	addi	r6,r6,-4
    5194:	d9800315 	stw	r6,12(sp)
    5198:	0023883a 	mov	r17,zero
    519c:	d9800317 	ldw	r6,12(sp)
    51a0:	008000c4 	movi	r2,3
    51a4:	30836726 	beq	r6,r2,5f44 <_dtoa_r+0x109c>
    51a8:	1183410e 	bge	r2,r6,5eb0 <_dtoa_r+0x1008>
    51ac:	d9c00317 	ldw	r7,12(sp)
    51b0:	00800104 	movi	r2,4
    51b4:	38827c26 	beq	r7,r2,5ba8 <_dtoa_r+0xd00>
    51b8:	00800144 	movi	r2,5
    51bc:	3884c41e 	bne	r7,r2,64d0 <_dtoa_r+0x1628>
    51c0:	00800044 	movi	r2,1
    51c4:	d8800b15 	stw	r2,44(sp)
    51c8:	d8c00517 	ldw	r3,20(sp)
    51cc:	d9002217 	ldw	r4,136(sp)
    51d0:	1907883a 	add	r3,r3,r4
    51d4:	19800044 	addi	r6,r3,1
    51d8:	d8c00c15 	stw	r3,48(sp)
    51dc:	d9800615 	stw	r6,24(sp)
    51e0:	0183a40e 	bge	zero,r6,6074 <_dtoa_r+0x11cc>
    51e4:	d9800617 	ldw	r6,24(sp)
    51e8:	3021883a 	mov	r16,r6
    51ec:	e0001115 	stw	zero,68(fp)
    51f0:	008005c4 	movi	r2,23
    51f4:	1184c92e 	bgeu	r2,r6,651c <_dtoa_r+0x1674>
    51f8:	00c00044 	movi	r3,1
    51fc:	00800104 	movi	r2,4
    5200:	1085883a 	add	r2,r2,r2
    5204:	11000504 	addi	r4,r2,20
    5208:	180b883a 	mov	r5,r3
    520c:	18c00044 	addi	r3,r3,1
    5210:	313ffb2e 	bgeu	r6,r4,5200 <__alt_data_end+0xff005200>
    5214:	e1401115 	stw	r5,68(fp)
    5218:	e009883a 	mov	r4,fp
    521c:	0007d380 	call	7d38 <_Balloc>
    5220:	d8800715 	stw	r2,28(sp)
    5224:	e0801015 	stw	r2,64(fp)
    5228:	00800384 	movi	r2,14
    522c:	1400f736 	bltu	r2,r16,560c <_dtoa_r+0x764>
    5230:	8800f626 	beq	r17,zero,560c <_dtoa_r+0x764>
    5234:	d9c00517 	ldw	r7,20(sp)
    5238:	01c39a0e 	bge	zero,r7,60a4 <_dtoa_r+0x11fc>
    523c:	388003cc 	andi	r2,r7,15
    5240:	100490fa 	slli	r2,r2,3
    5244:	382bd13a 	srai	r21,r7,4
    5248:	00c00074 	movhi	r3,1
    524c:	18c56604 	addi	r3,r3,5528
    5250:	1885883a 	add	r2,r3,r2
    5254:	a8c0040c 	andi	r3,r21,16
    5258:	12400017 	ldw	r9,0(r2)
    525c:	12000117 	ldw	r8,4(r2)
    5260:	18037926 	beq	r3,zero,6048 <_dtoa_r+0x11a0>
    5264:	00800074 	movhi	r2,1
    5268:	10855c04 	addi	r2,r2,5488
    526c:	11800817 	ldw	r6,32(r2)
    5270:	11c00917 	ldw	r7,36(r2)
    5274:	9009883a 	mov	r4,r18
    5278:	980b883a 	mov	r5,r19
    527c:	da001715 	stw	r8,92(sp)
    5280:	da401615 	stw	r9,88(sp)
    5284:	000c7fc0 	call	c7fc <__divdf3>
    5288:	da001717 	ldw	r8,92(sp)
    528c:	da401617 	ldw	r9,88(sp)
    5290:	ad4003cc 	andi	r21,r21,15
    5294:	040000c4 	movi	r16,3
    5298:	1023883a 	mov	r17,r2
    529c:	1829883a 	mov	r20,r3
    52a0:	a8001126 	beq	r21,zero,52e8 <_dtoa_r+0x440>
    52a4:	05c00074 	movhi	r23,1
    52a8:	bdc55c04 	addi	r23,r23,5488
    52ac:	4805883a 	mov	r2,r9
    52b0:	4007883a 	mov	r3,r8
    52b4:	a980004c 	andi	r6,r21,1
    52b8:	1009883a 	mov	r4,r2
    52bc:	a82bd07a 	srai	r21,r21,1
    52c0:	180b883a 	mov	r5,r3
    52c4:	30000426 	beq	r6,zero,52d8 <_dtoa_r+0x430>
    52c8:	b9800017 	ldw	r6,0(r23)
    52cc:	b9c00117 	ldw	r7,4(r23)
    52d0:	84000044 	addi	r16,r16,1
    52d4:	000d33c0 	call	d33c <__muldf3>
    52d8:	bdc00204 	addi	r23,r23,8
    52dc:	a83ff51e 	bne	r21,zero,52b4 <__alt_data_end+0xff0052b4>
    52e0:	1013883a 	mov	r9,r2
    52e4:	1811883a 	mov	r8,r3
    52e8:	480d883a 	mov	r6,r9
    52ec:	400f883a 	mov	r7,r8
    52f0:	8809883a 	mov	r4,r17
    52f4:	a00b883a 	mov	r5,r20
    52f8:	000c7fc0 	call	c7fc <__divdf3>
    52fc:	d8800f15 	stw	r2,60(sp)
    5300:	d8c01015 	stw	r3,64(sp)
    5304:	d8c00e17 	ldw	r3,56(sp)
    5308:	18000626 	beq	r3,zero,5324 <_dtoa_r+0x47c>
    530c:	d9000f17 	ldw	r4,60(sp)
    5310:	d9401017 	ldw	r5,64(sp)
    5314:	000d883a 	mov	r6,zero
    5318:	01cffc34 	movhi	r7,16368
    531c:	000d2480 	call	d248 <__ledf2>
    5320:	10040b16 	blt	r2,zero,6350 <_dtoa_r+0x14a8>
    5324:	8009883a 	mov	r4,r16
    5328:	000e3d00 	call	e3d0 <__floatsidf>
    532c:	d9800f17 	ldw	r6,60(sp)
    5330:	d9c01017 	ldw	r7,64(sp)
    5334:	1009883a 	mov	r4,r2
    5338:	180b883a 	mov	r5,r3
    533c:	000d33c0 	call	d33c <__muldf3>
    5340:	000d883a 	mov	r6,zero
    5344:	01d00734 	movhi	r7,16412
    5348:	1009883a 	mov	r4,r2
    534c:	180b883a 	mov	r5,r3
    5350:	000bf500 	call	bf50 <__adddf3>
    5354:	1021883a 	mov	r16,r2
    5358:	d8800617 	ldw	r2,24(sp)
    535c:	047f3034 	movhi	r17,64704
    5360:	1c63883a 	add	r17,r3,r17
    5364:	10031826 	beq	r2,zero,5fc8 <_dtoa_r+0x1120>
    5368:	d8c00517 	ldw	r3,20(sp)
    536c:	db000617 	ldw	r12,24(sp)
    5370:	d8c01315 	stw	r3,76(sp)
    5374:	d9000b17 	ldw	r4,44(sp)
    5378:	20038f26 	beq	r4,zero,61b8 <_dtoa_r+0x1310>
    537c:	60bfffc4 	addi	r2,r12,-1
    5380:	100490fa 	slli	r2,r2,3
    5384:	00c00074 	movhi	r3,1
    5388:	18c56604 	addi	r3,r3,5528
    538c:	1885883a 	add	r2,r3,r2
    5390:	11800017 	ldw	r6,0(r2)
    5394:	11c00117 	ldw	r7,4(r2)
    5398:	d8800717 	ldw	r2,28(sp)
    539c:	0009883a 	mov	r4,zero
    53a0:	014ff834 	movhi	r5,16352
    53a4:	db001615 	stw	r12,88(sp)
    53a8:	15c00044 	addi	r23,r2,1
    53ac:	000c7fc0 	call	c7fc <__divdf3>
    53b0:	800d883a 	mov	r6,r16
    53b4:	880f883a 	mov	r7,r17
    53b8:	1009883a 	mov	r4,r2
    53bc:	180b883a 	mov	r5,r3
    53c0:	000da540 	call	da54 <__subdf3>
    53c4:	d9401017 	ldw	r5,64(sp)
    53c8:	d9000f17 	ldw	r4,60(sp)
    53cc:	102b883a 	mov	r21,r2
    53d0:	d8c01215 	stw	r3,72(sp)
    53d4:	000e3500 	call	e350 <__fixdfsi>
    53d8:	1009883a 	mov	r4,r2
    53dc:	1029883a 	mov	r20,r2
    53e0:	000e3d00 	call	e3d0 <__floatsidf>
    53e4:	d9000f17 	ldw	r4,60(sp)
    53e8:	d9401017 	ldw	r5,64(sp)
    53ec:	100d883a 	mov	r6,r2
    53f0:	180f883a 	mov	r7,r3
    53f4:	000da540 	call	da54 <__subdf3>
    53f8:	1823883a 	mov	r17,r3
    53fc:	d8c00717 	ldw	r3,28(sp)
    5400:	d9401217 	ldw	r5,72(sp)
    5404:	a2000c04 	addi	r8,r20,48
    5408:	1021883a 	mov	r16,r2
    540c:	1a000005 	stb	r8,0(r3)
    5410:	800d883a 	mov	r6,r16
    5414:	880f883a 	mov	r7,r17
    5418:	a809883a 	mov	r4,r21
    541c:	4029883a 	mov	r20,r8
    5420:	000d16c0 	call	d16c <__gedf2>
    5424:	00841d16 	blt	zero,r2,649c <_dtoa_r+0x15f4>
    5428:	800d883a 	mov	r6,r16
    542c:	880f883a 	mov	r7,r17
    5430:	0009883a 	mov	r4,zero
    5434:	014ffc34 	movhi	r5,16368
    5438:	000da540 	call	da54 <__subdf3>
    543c:	d9401217 	ldw	r5,72(sp)
    5440:	100d883a 	mov	r6,r2
    5444:	180f883a 	mov	r7,r3
    5448:	a809883a 	mov	r4,r21
    544c:	000d16c0 	call	d16c <__gedf2>
    5450:	db001617 	ldw	r12,88(sp)
    5454:	00840e16 	blt	zero,r2,6490 <_dtoa_r+0x15e8>
    5458:	00800044 	movi	r2,1
    545c:	13006b0e 	bge	r2,r12,560c <_dtoa_r+0x764>
    5460:	d9000717 	ldw	r4,28(sp)
    5464:	dd800f15 	stw	r22,60(sp)
    5468:	dcc01015 	stw	r19,64(sp)
    546c:	2319883a 	add	r12,r4,r12
    5470:	dcc01217 	ldw	r19,72(sp)
    5474:	602d883a 	mov	r22,r12
    5478:	dc801215 	stw	r18,72(sp)
    547c:	b825883a 	mov	r18,r23
    5480:	00000906 	br	54a8 <_dtoa_r+0x600>
    5484:	000da540 	call	da54 <__subdf3>
    5488:	a80d883a 	mov	r6,r21
    548c:	980f883a 	mov	r7,r19
    5490:	1009883a 	mov	r4,r2
    5494:	180b883a 	mov	r5,r3
    5498:	000d2480 	call	d248 <__ledf2>
    549c:	1003e816 	blt	r2,zero,6440 <_dtoa_r+0x1598>
    54a0:	b825883a 	mov	r18,r23
    54a4:	bd83e926 	beq	r23,r22,644c <_dtoa_r+0x15a4>
    54a8:	a809883a 	mov	r4,r21
    54ac:	980b883a 	mov	r5,r19
    54b0:	000d883a 	mov	r6,zero
    54b4:	01d00934 	movhi	r7,16420
    54b8:	000d33c0 	call	d33c <__muldf3>
    54bc:	000d883a 	mov	r6,zero
    54c0:	01d00934 	movhi	r7,16420
    54c4:	8009883a 	mov	r4,r16
    54c8:	880b883a 	mov	r5,r17
    54cc:	102b883a 	mov	r21,r2
    54d0:	1827883a 	mov	r19,r3
    54d4:	000d33c0 	call	d33c <__muldf3>
    54d8:	180b883a 	mov	r5,r3
    54dc:	1009883a 	mov	r4,r2
    54e0:	1821883a 	mov	r16,r3
    54e4:	1023883a 	mov	r17,r2
    54e8:	000e3500 	call	e350 <__fixdfsi>
    54ec:	1009883a 	mov	r4,r2
    54f0:	1029883a 	mov	r20,r2
    54f4:	000e3d00 	call	e3d0 <__floatsidf>
    54f8:	8809883a 	mov	r4,r17
    54fc:	800b883a 	mov	r5,r16
    5500:	100d883a 	mov	r6,r2
    5504:	180f883a 	mov	r7,r3
    5508:	000da540 	call	da54 <__subdf3>
    550c:	a5000c04 	addi	r20,r20,48
    5510:	a80d883a 	mov	r6,r21
    5514:	980f883a 	mov	r7,r19
    5518:	1009883a 	mov	r4,r2
    551c:	180b883a 	mov	r5,r3
    5520:	95000005 	stb	r20,0(r18)
    5524:	1021883a 	mov	r16,r2
    5528:	1823883a 	mov	r17,r3
    552c:	000d2480 	call	d248 <__ledf2>
    5530:	bdc00044 	addi	r23,r23,1
    5534:	800d883a 	mov	r6,r16
    5538:	880f883a 	mov	r7,r17
    553c:	0009883a 	mov	r4,zero
    5540:	014ffc34 	movhi	r5,16368
    5544:	103fcf0e 	bge	r2,zero,5484 <__alt_data_end+0xff005484>
    5548:	d8c01317 	ldw	r3,76(sp)
    554c:	d8c00515 	stw	r3,20(sp)
    5550:	d9400917 	ldw	r5,36(sp)
    5554:	e009883a 	mov	r4,fp
    5558:	0007de00 	call	7de0 <_Bfree>
    555c:	d9000517 	ldw	r4,20(sp)
    5560:	d9802317 	ldw	r6,140(sp)
    5564:	d9c02517 	ldw	r7,148(sp)
    5568:	b8000005 	stb	zero,0(r23)
    556c:	20800044 	addi	r2,r4,1
    5570:	30800015 	stw	r2,0(r6)
    5574:	3802aa26 	beq	r7,zero,6020 <_dtoa_r+0x1178>
    5578:	3dc00015 	stw	r23,0(r7)
    557c:	d8800717 	ldw	r2,28(sp)
    5580:	003e7906 	br	4f68 <__alt_data_end+0xff004f68>
    5584:	00800434 	movhi	r2,16
    5588:	10bfffc4 	addi	r2,r2,-1
    558c:	88a2703a 	and	r17,r17,r2
    5590:	883e851e 	bne	r17,zero,4fa8 <__alt_data_end+0xff004fa8>
    5594:	00800074 	movhi	r2,1
    5598:	10854704 	addi	r2,r2,5404
    559c:	003e8406 	br	4fb0 <__alt_data_end+0xff004fb0>
    55a0:	10c00204 	addi	r3,r2,8
    55a4:	003e8706 	br	4fc4 <__alt_data_end+0xff004fc4>
    55a8:	01400434 	movhi	r5,16
    55ac:	297fffc4 	addi	r5,r5,-1
    55b0:	994a703a 	and	r5,r19,r5
    55b4:	9009883a 	mov	r4,r18
    55b8:	843f0044 	addi	r16,r16,-1023
    55bc:	294ffc34 	orhi	r5,r5,16368
    55c0:	dd800217 	ldw	r22,8(sp)
    55c4:	d8001115 	stw	zero,68(sp)
    55c8:	003ea506 	br	5060 <__alt_data_end+0xff005060>
    55cc:	00800074 	movhi	r2,1
    55d0:	10853e04 	addi	r2,r2,5368
    55d4:	003e6406 	br	4f68 <__alt_data_end+0xff004f68>
    55d8:	e0001115 	stw	zero,68(fp)
    55dc:	000b883a 	mov	r5,zero
    55e0:	e009883a 	mov	r4,fp
    55e4:	0007d380 	call	7d38 <_Balloc>
    55e8:	01bfffc4 	movi	r6,-1
    55ec:	01c00044 	movi	r7,1
    55f0:	d8800715 	stw	r2,28(sp)
    55f4:	d9800c15 	stw	r6,48(sp)
    55f8:	e0801015 	stw	r2,64(fp)
    55fc:	d8000315 	stw	zero,12(sp)
    5600:	d9c00b15 	stw	r7,44(sp)
    5604:	d9800615 	stw	r6,24(sp)
    5608:	d8002215 	stw	zero,136(sp)
    560c:	d8800117 	ldw	r2,4(sp)
    5610:	10008916 	blt	r2,zero,5838 <_dtoa_r+0x990>
    5614:	d9000517 	ldw	r4,20(sp)
    5618:	00c00384 	movi	r3,14
    561c:	19008616 	blt	r3,r4,5838 <_dtoa_r+0x990>
    5620:	200490fa 	slli	r2,r4,3
    5624:	00c00074 	movhi	r3,1
    5628:	d9802217 	ldw	r6,136(sp)
    562c:	18c56604 	addi	r3,r3,5528
    5630:	1885883a 	add	r2,r3,r2
    5634:	14000017 	ldw	r16,0(r2)
    5638:	14400117 	ldw	r17,4(r2)
    563c:	30016316 	blt	r6,zero,5bcc <_dtoa_r+0xd24>
    5640:	800d883a 	mov	r6,r16
    5644:	880f883a 	mov	r7,r17
    5648:	9009883a 	mov	r4,r18
    564c:	980b883a 	mov	r5,r19
    5650:	000c7fc0 	call	c7fc <__divdf3>
    5654:	180b883a 	mov	r5,r3
    5658:	1009883a 	mov	r4,r2
    565c:	000e3500 	call	e350 <__fixdfsi>
    5660:	1009883a 	mov	r4,r2
    5664:	102b883a 	mov	r21,r2
    5668:	000e3d00 	call	e3d0 <__floatsidf>
    566c:	800d883a 	mov	r6,r16
    5670:	880f883a 	mov	r7,r17
    5674:	1009883a 	mov	r4,r2
    5678:	180b883a 	mov	r5,r3
    567c:	000d33c0 	call	d33c <__muldf3>
    5680:	100d883a 	mov	r6,r2
    5684:	180f883a 	mov	r7,r3
    5688:	9009883a 	mov	r4,r18
    568c:	980b883a 	mov	r5,r19
    5690:	000da540 	call	da54 <__subdf3>
    5694:	d9c00717 	ldw	r7,28(sp)
    5698:	1009883a 	mov	r4,r2
    569c:	a8800c04 	addi	r2,r21,48
    56a0:	38800005 	stb	r2,0(r7)
    56a4:	3dc00044 	addi	r23,r7,1
    56a8:	d9c00617 	ldw	r7,24(sp)
    56ac:	01800044 	movi	r6,1
    56b0:	180b883a 	mov	r5,r3
    56b4:	2005883a 	mov	r2,r4
    56b8:	39803826 	beq	r7,r6,579c <_dtoa_r+0x8f4>
    56bc:	000d883a 	mov	r6,zero
    56c0:	01d00934 	movhi	r7,16420
    56c4:	000d33c0 	call	d33c <__muldf3>
    56c8:	000d883a 	mov	r6,zero
    56cc:	000f883a 	mov	r7,zero
    56d0:	1009883a 	mov	r4,r2
    56d4:	180b883a 	mov	r5,r3
    56d8:	1025883a 	mov	r18,r2
    56dc:	1827883a 	mov	r19,r3
    56e0:	000d0e40 	call	d0e4 <__eqdf2>
    56e4:	103f9a26 	beq	r2,zero,5550 <__alt_data_end+0xff005550>
    56e8:	d9c00617 	ldw	r7,24(sp)
    56ec:	d8c00717 	ldw	r3,28(sp)
    56f0:	b829883a 	mov	r20,r23
    56f4:	38bfffc4 	addi	r2,r7,-1
    56f8:	18ad883a 	add	r22,r3,r2
    56fc:	00000a06 	br	5728 <_dtoa_r+0x880>
    5700:	000d33c0 	call	d33c <__muldf3>
    5704:	000d883a 	mov	r6,zero
    5708:	000f883a 	mov	r7,zero
    570c:	1009883a 	mov	r4,r2
    5710:	180b883a 	mov	r5,r3
    5714:	1025883a 	mov	r18,r2
    5718:	1827883a 	mov	r19,r3
    571c:	b829883a 	mov	r20,r23
    5720:	000d0e40 	call	d0e4 <__eqdf2>
    5724:	103f8a26 	beq	r2,zero,5550 <__alt_data_end+0xff005550>
    5728:	800d883a 	mov	r6,r16
    572c:	880f883a 	mov	r7,r17
    5730:	9009883a 	mov	r4,r18
    5734:	980b883a 	mov	r5,r19
    5738:	000c7fc0 	call	c7fc <__divdf3>
    573c:	180b883a 	mov	r5,r3
    5740:	1009883a 	mov	r4,r2
    5744:	000e3500 	call	e350 <__fixdfsi>
    5748:	1009883a 	mov	r4,r2
    574c:	102b883a 	mov	r21,r2
    5750:	000e3d00 	call	e3d0 <__floatsidf>
    5754:	800d883a 	mov	r6,r16
    5758:	880f883a 	mov	r7,r17
    575c:	1009883a 	mov	r4,r2
    5760:	180b883a 	mov	r5,r3
    5764:	000d33c0 	call	d33c <__muldf3>
    5768:	100d883a 	mov	r6,r2
    576c:	180f883a 	mov	r7,r3
    5770:	9009883a 	mov	r4,r18
    5774:	980b883a 	mov	r5,r19
    5778:	000da540 	call	da54 <__subdf3>
    577c:	aa000c04 	addi	r8,r21,48
    5780:	a2000005 	stb	r8,0(r20)
    5784:	000d883a 	mov	r6,zero
    5788:	01d00934 	movhi	r7,16420
    578c:	1009883a 	mov	r4,r2
    5790:	180b883a 	mov	r5,r3
    5794:	a5c00044 	addi	r23,r20,1
    5798:	b53fd91e 	bne	r22,r20,5700 <__alt_data_end+0xff005700>
    579c:	100d883a 	mov	r6,r2
    57a0:	180f883a 	mov	r7,r3
    57a4:	1009883a 	mov	r4,r2
    57a8:	180b883a 	mov	r5,r3
    57ac:	000bf500 	call	bf50 <__adddf3>
    57b0:	100d883a 	mov	r6,r2
    57b4:	180f883a 	mov	r7,r3
    57b8:	8009883a 	mov	r4,r16
    57bc:	880b883a 	mov	r5,r17
    57c0:	1027883a 	mov	r19,r2
    57c4:	1825883a 	mov	r18,r3
    57c8:	000d2480 	call	d248 <__ledf2>
    57cc:	10000816 	blt	r2,zero,57f0 <_dtoa_r+0x948>
    57d0:	980d883a 	mov	r6,r19
    57d4:	900f883a 	mov	r7,r18
    57d8:	8009883a 	mov	r4,r16
    57dc:	880b883a 	mov	r5,r17
    57e0:	000d0e40 	call	d0e4 <__eqdf2>
    57e4:	103f5a1e 	bne	r2,zero,5550 <__alt_data_end+0xff005550>
    57e8:	ad40004c 	andi	r21,r21,1
    57ec:	a83f5826 	beq	r21,zero,5550 <__alt_data_end+0xff005550>
    57f0:	bd3fffc3 	ldbu	r20,-1(r23)
    57f4:	b8bfffc4 	addi	r2,r23,-1
    57f8:	1007883a 	mov	r3,r2
    57fc:	01400e44 	movi	r5,57
    5800:	d9800717 	ldw	r6,28(sp)
    5804:	00000506 	br	581c <_dtoa_r+0x974>
    5808:	18ffffc4 	addi	r3,r3,-1
    580c:	11824726 	beq	r2,r6,612c <_dtoa_r+0x1284>
    5810:	1d000003 	ldbu	r20,0(r3)
    5814:	102f883a 	mov	r23,r2
    5818:	10bfffc4 	addi	r2,r2,-1
    581c:	a1003fcc 	andi	r4,r20,255
    5820:	2100201c 	xori	r4,r4,128
    5824:	213fe004 	addi	r4,r4,-128
    5828:	217ff726 	beq	r4,r5,5808 <__alt_data_end+0xff005808>
    582c:	a2000044 	addi	r8,r20,1
    5830:	12000005 	stb	r8,0(r2)
    5834:	003f4606 	br	5550 <__alt_data_end+0xff005550>
    5838:	d9000b17 	ldw	r4,44(sp)
    583c:	2000c826 	beq	r4,zero,5b60 <_dtoa_r+0xcb8>
    5840:	d9800317 	ldw	r6,12(sp)
    5844:	00c00044 	movi	r3,1
    5848:	1980f90e 	bge	r3,r6,5c30 <_dtoa_r+0xd88>
    584c:	d8800617 	ldw	r2,24(sp)
    5850:	d8c00a17 	ldw	r3,40(sp)
    5854:	157fffc4 	addi	r21,r2,-1
    5858:	1d41f316 	blt	r3,r21,6028 <_dtoa_r+0x1180>
    585c:	1d6bc83a 	sub	r21,r3,r21
    5860:	d9c00617 	ldw	r7,24(sp)
    5864:	3802aa16 	blt	r7,zero,6310 <_dtoa_r+0x1468>
    5868:	dd000817 	ldw	r20,32(sp)
    586c:	d8800617 	ldw	r2,24(sp)
    5870:	d8c00817 	ldw	r3,32(sp)
    5874:	01400044 	movi	r5,1
    5878:	e009883a 	mov	r4,fp
    587c:	1887883a 	add	r3,r3,r2
    5880:	d8c00815 	stw	r3,32(sp)
    5884:	b0ad883a 	add	r22,r22,r2
    5888:	00081440 	call	8144 <__i2b>
    588c:	1023883a 	mov	r17,r2
    5890:	a0000826 	beq	r20,zero,58b4 <_dtoa_r+0xa0c>
    5894:	0580070e 	bge	zero,r22,58b4 <_dtoa_r+0xa0c>
    5898:	a005883a 	mov	r2,r20
    589c:	b500b916 	blt	r22,r20,5b84 <_dtoa_r+0xcdc>
    58a0:	d9000817 	ldw	r4,32(sp)
    58a4:	a0a9c83a 	sub	r20,r20,r2
    58a8:	b0adc83a 	sub	r22,r22,r2
    58ac:	2089c83a 	sub	r4,r4,r2
    58b0:	d9000815 	stw	r4,32(sp)
    58b4:	d9800a17 	ldw	r6,40(sp)
    58b8:	0181810e 	bge	zero,r6,5ec0 <_dtoa_r+0x1018>
    58bc:	d9c00b17 	ldw	r7,44(sp)
    58c0:	3800b326 	beq	r7,zero,5b90 <_dtoa_r+0xce8>
    58c4:	a800b226 	beq	r21,zero,5b90 <_dtoa_r+0xce8>
    58c8:	880b883a 	mov	r5,r17
    58cc:	a80d883a 	mov	r6,r21
    58d0:	e009883a 	mov	r4,fp
    58d4:	00083780 	call	8378 <__pow5mult>
    58d8:	d9800917 	ldw	r6,36(sp)
    58dc:	100b883a 	mov	r5,r2
    58e0:	e009883a 	mov	r4,fp
    58e4:	1023883a 	mov	r17,r2
    58e8:	00081800 	call	8180 <__multiply>
    58ec:	1021883a 	mov	r16,r2
    58f0:	d8800a17 	ldw	r2,40(sp)
    58f4:	d9400917 	ldw	r5,36(sp)
    58f8:	e009883a 	mov	r4,fp
    58fc:	1545c83a 	sub	r2,r2,r21
    5900:	d8800a15 	stw	r2,40(sp)
    5904:	0007de00 	call	7de0 <_Bfree>
    5908:	d8c00a17 	ldw	r3,40(sp)
    590c:	18009f1e 	bne	r3,zero,5b8c <_dtoa_r+0xce4>
    5910:	05c00044 	movi	r23,1
    5914:	e009883a 	mov	r4,fp
    5918:	b80b883a 	mov	r5,r23
    591c:	00081440 	call	8144 <__i2b>
    5920:	d9000d17 	ldw	r4,52(sp)
    5924:	102b883a 	mov	r21,r2
    5928:	2000ce26 	beq	r4,zero,5c64 <_dtoa_r+0xdbc>
    592c:	200d883a 	mov	r6,r4
    5930:	100b883a 	mov	r5,r2
    5934:	e009883a 	mov	r4,fp
    5938:	00083780 	call	8378 <__pow5mult>
    593c:	d9800317 	ldw	r6,12(sp)
    5940:	102b883a 	mov	r21,r2
    5944:	b981810e 	bge	r23,r6,5f4c <_dtoa_r+0x10a4>
    5948:	0027883a 	mov	r19,zero
    594c:	a8800417 	ldw	r2,16(r21)
    5950:	05c00804 	movi	r23,32
    5954:	10800104 	addi	r2,r2,4
    5958:	1085883a 	add	r2,r2,r2
    595c:	1085883a 	add	r2,r2,r2
    5960:	a885883a 	add	r2,r21,r2
    5964:	11000017 	ldw	r4,0(r2)
    5968:	000802c0 	call	802c <__hi0bits>
    596c:	b885c83a 	sub	r2,r23,r2
    5970:	1585883a 	add	r2,r2,r22
    5974:	108007cc 	andi	r2,r2,31
    5978:	1000b326 	beq	r2,zero,5c48 <_dtoa_r+0xda0>
    597c:	00c00804 	movi	r3,32
    5980:	1887c83a 	sub	r3,r3,r2
    5984:	01000104 	movi	r4,4
    5988:	20c2cd0e 	bge	r4,r3,64c0 <_dtoa_r+0x1618>
    598c:	00c00704 	movi	r3,28
    5990:	1885c83a 	sub	r2,r3,r2
    5994:	d8c00817 	ldw	r3,32(sp)
    5998:	a0a9883a 	add	r20,r20,r2
    599c:	b0ad883a 	add	r22,r22,r2
    59a0:	1887883a 	add	r3,r3,r2
    59a4:	d8c00815 	stw	r3,32(sp)
    59a8:	d9800817 	ldw	r6,32(sp)
    59ac:	0180040e 	bge	zero,r6,59c0 <_dtoa_r+0xb18>
    59b0:	800b883a 	mov	r5,r16
    59b4:	e009883a 	mov	r4,fp
    59b8:	00084b80 	call	84b8 <__lshift>
    59bc:	1021883a 	mov	r16,r2
    59c0:	0580050e 	bge	zero,r22,59d8 <_dtoa_r+0xb30>
    59c4:	a80b883a 	mov	r5,r21
    59c8:	b00d883a 	mov	r6,r22
    59cc:	e009883a 	mov	r4,fp
    59d0:	00084b80 	call	84b8 <__lshift>
    59d4:	102b883a 	mov	r21,r2
    59d8:	d9c00e17 	ldw	r7,56(sp)
    59dc:	3801211e 	bne	r7,zero,5e64 <_dtoa_r+0xfbc>
    59e0:	d9800617 	ldw	r6,24(sp)
    59e4:	0181380e 	bge	zero,r6,5ec8 <_dtoa_r+0x1020>
    59e8:	d8c00b17 	ldw	r3,44(sp)
    59ec:	1800ab1e 	bne	r3,zero,5c9c <_dtoa_r+0xdf4>
    59f0:	dc800717 	ldw	r18,28(sp)
    59f4:	dcc00617 	ldw	r19,24(sp)
    59f8:	9029883a 	mov	r20,r18
    59fc:	00000206 	br	5a08 <_dtoa_r+0xb60>
    5a00:	0007e080 	call	7e08 <__multadd>
    5a04:	1021883a 	mov	r16,r2
    5a08:	a80b883a 	mov	r5,r21
    5a0c:	8009883a 	mov	r4,r16
    5a10:	0004ca80 	call	4ca8 <quorem>
    5a14:	10800c04 	addi	r2,r2,48
    5a18:	90800005 	stb	r2,0(r18)
    5a1c:	94800044 	addi	r18,r18,1
    5a20:	9507c83a 	sub	r3,r18,r20
    5a24:	000f883a 	mov	r7,zero
    5a28:	01800284 	movi	r6,10
    5a2c:	800b883a 	mov	r5,r16
    5a30:	e009883a 	mov	r4,fp
    5a34:	1cfff216 	blt	r3,r19,5a00 <__alt_data_end+0xff005a00>
    5a38:	1011883a 	mov	r8,r2
    5a3c:	d8800617 	ldw	r2,24(sp)
    5a40:	0082370e 	bge	zero,r2,6320 <_dtoa_r+0x1478>
    5a44:	d9000717 	ldw	r4,28(sp)
    5a48:	0025883a 	mov	r18,zero
    5a4c:	20af883a 	add	r23,r4,r2
    5a50:	01800044 	movi	r6,1
    5a54:	800b883a 	mov	r5,r16
    5a58:	e009883a 	mov	r4,fp
    5a5c:	da001715 	stw	r8,92(sp)
    5a60:	00084b80 	call	84b8 <__lshift>
    5a64:	a80b883a 	mov	r5,r21
    5a68:	1009883a 	mov	r4,r2
    5a6c:	d8800915 	stw	r2,36(sp)
    5a70:	00086000 	call	8600 <__mcmp>
    5a74:	da001717 	ldw	r8,92(sp)
    5a78:	0081800e 	bge	zero,r2,607c <_dtoa_r+0x11d4>
    5a7c:	b93fffc3 	ldbu	r4,-1(r23)
    5a80:	b8bfffc4 	addi	r2,r23,-1
    5a84:	1007883a 	mov	r3,r2
    5a88:	01800e44 	movi	r6,57
    5a8c:	d9c00717 	ldw	r7,28(sp)
    5a90:	00000506 	br	5aa8 <_dtoa_r+0xc00>
    5a94:	18ffffc4 	addi	r3,r3,-1
    5a98:	11c12326 	beq	r2,r7,5f28 <_dtoa_r+0x1080>
    5a9c:	19000003 	ldbu	r4,0(r3)
    5aa0:	102f883a 	mov	r23,r2
    5aa4:	10bfffc4 	addi	r2,r2,-1
    5aa8:	21403fcc 	andi	r5,r4,255
    5aac:	2940201c 	xori	r5,r5,128
    5ab0:	297fe004 	addi	r5,r5,-128
    5ab4:	29bff726 	beq	r5,r6,5a94 <__alt_data_end+0xff005a94>
    5ab8:	21000044 	addi	r4,r4,1
    5abc:	11000005 	stb	r4,0(r2)
    5ac0:	a80b883a 	mov	r5,r21
    5ac4:	e009883a 	mov	r4,fp
    5ac8:	0007de00 	call	7de0 <_Bfree>
    5acc:	883ea026 	beq	r17,zero,5550 <__alt_data_end+0xff005550>
    5ad0:	90000426 	beq	r18,zero,5ae4 <_dtoa_r+0xc3c>
    5ad4:	94400326 	beq	r18,r17,5ae4 <_dtoa_r+0xc3c>
    5ad8:	900b883a 	mov	r5,r18
    5adc:	e009883a 	mov	r4,fp
    5ae0:	0007de00 	call	7de0 <_Bfree>
    5ae4:	880b883a 	mov	r5,r17
    5ae8:	e009883a 	mov	r4,fp
    5aec:	0007de00 	call	7de0 <_Bfree>
    5af0:	003e9706 	br	5550 <__alt_data_end+0xff005550>
    5af4:	01800044 	movi	r6,1
    5af8:	d9800e15 	stw	r6,56(sp)
    5afc:	003d9606 	br	5158 <__alt_data_end+0xff005158>
    5b00:	d8800817 	ldw	r2,32(sp)
    5b04:	d8c00517 	ldw	r3,20(sp)
    5b08:	d8000d15 	stw	zero,52(sp)
    5b0c:	10c5c83a 	sub	r2,r2,r3
    5b10:	00c9c83a 	sub	r4,zero,r3
    5b14:	d8800815 	stw	r2,32(sp)
    5b18:	d9000a15 	stw	r4,40(sp)
    5b1c:	003d9706 	br	517c <__alt_data_end+0xff00517c>
    5b20:	05adc83a 	sub	r22,zero,r22
    5b24:	dd800815 	stw	r22,32(sp)
    5b28:	002d883a 	mov	r22,zero
    5b2c:	003d8e06 	br	5168 <__alt_data_end+0xff005168>
    5b30:	d9000517 	ldw	r4,20(sp)
    5b34:	000e3d00 	call	e3d0 <__floatsidf>
    5b38:	100d883a 	mov	r6,r2
    5b3c:	180f883a 	mov	r7,r3
    5b40:	a009883a 	mov	r4,r20
    5b44:	880b883a 	mov	r5,r17
    5b48:	000d0e40 	call	d0e4 <__eqdf2>
    5b4c:	103d7126 	beq	r2,zero,5114 <__alt_data_end+0xff005114>
    5b50:	d9c00517 	ldw	r7,20(sp)
    5b54:	39ffffc4 	addi	r7,r7,-1
    5b58:	d9c00515 	stw	r7,20(sp)
    5b5c:	003d6d06 	br	5114 <__alt_data_end+0xff005114>
    5b60:	dd400a17 	ldw	r21,40(sp)
    5b64:	dd000817 	ldw	r20,32(sp)
    5b68:	0023883a 	mov	r17,zero
    5b6c:	003f4806 	br	5890 <__alt_data_end+0xff005890>
    5b70:	10e3c83a 	sub	r17,r2,r3
    5b74:	9448983a 	sll	r4,r18,r17
    5b78:	003d3206 	br	5044 <__alt_data_end+0xff005044>
    5b7c:	d8000e15 	stw	zero,56(sp)
    5b80:	003d7506 	br	5158 <__alt_data_end+0xff005158>
    5b84:	b005883a 	mov	r2,r22
    5b88:	003f4506 	br	58a0 <__alt_data_end+0xff0058a0>
    5b8c:	dc000915 	stw	r16,36(sp)
    5b90:	d9800a17 	ldw	r6,40(sp)
    5b94:	d9400917 	ldw	r5,36(sp)
    5b98:	e009883a 	mov	r4,fp
    5b9c:	00083780 	call	8378 <__pow5mult>
    5ba0:	1021883a 	mov	r16,r2
    5ba4:	003f5a06 	br	5910 <__alt_data_end+0xff005910>
    5ba8:	01c00044 	movi	r7,1
    5bac:	d9c00b15 	stw	r7,44(sp)
    5bb0:	d8802217 	ldw	r2,136(sp)
    5bb4:	0081280e 	bge	zero,r2,6058 <_dtoa_r+0x11b0>
    5bb8:	100d883a 	mov	r6,r2
    5bbc:	1021883a 	mov	r16,r2
    5bc0:	d8800c15 	stw	r2,48(sp)
    5bc4:	d8800615 	stw	r2,24(sp)
    5bc8:	003d8806 	br	51ec <__alt_data_end+0xff0051ec>
    5bcc:	d8800617 	ldw	r2,24(sp)
    5bd0:	00be9b16 	blt	zero,r2,5640 <__alt_data_end+0xff005640>
    5bd4:	10010f1e 	bne	r2,zero,6014 <_dtoa_r+0x116c>
    5bd8:	880b883a 	mov	r5,r17
    5bdc:	000d883a 	mov	r6,zero
    5be0:	01d00534 	movhi	r7,16404
    5be4:	8009883a 	mov	r4,r16
    5be8:	000d33c0 	call	d33c <__muldf3>
    5bec:	900d883a 	mov	r6,r18
    5bf0:	980f883a 	mov	r7,r19
    5bf4:	1009883a 	mov	r4,r2
    5bf8:	180b883a 	mov	r5,r3
    5bfc:	000d16c0 	call	d16c <__gedf2>
    5c00:	002b883a 	mov	r21,zero
    5c04:	0023883a 	mov	r17,zero
    5c08:	1000bf16 	blt	r2,zero,5f08 <_dtoa_r+0x1060>
    5c0c:	d9802217 	ldw	r6,136(sp)
    5c10:	ddc00717 	ldw	r23,28(sp)
    5c14:	018c303a 	nor	r6,zero,r6
    5c18:	d9800515 	stw	r6,20(sp)
    5c1c:	a80b883a 	mov	r5,r21
    5c20:	e009883a 	mov	r4,fp
    5c24:	0007de00 	call	7de0 <_Bfree>
    5c28:	883e4926 	beq	r17,zero,5550 <__alt_data_end+0xff005550>
    5c2c:	003fad06 	br	5ae4 <__alt_data_end+0xff005ae4>
    5c30:	d9c01117 	ldw	r7,68(sp)
    5c34:	3801bc26 	beq	r7,zero,6328 <_dtoa_r+0x1480>
    5c38:	10810cc4 	addi	r2,r2,1075
    5c3c:	dd400a17 	ldw	r21,40(sp)
    5c40:	dd000817 	ldw	r20,32(sp)
    5c44:	003f0a06 	br	5870 <__alt_data_end+0xff005870>
    5c48:	00800704 	movi	r2,28
    5c4c:	d9000817 	ldw	r4,32(sp)
    5c50:	a0a9883a 	add	r20,r20,r2
    5c54:	b0ad883a 	add	r22,r22,r2
    5c58:	2089883a 	add	r4,r4,r2
    5c5c:	d9000815 	stw	r4,32(sp)
    5c60:	003f5106 	br	59a8 <__alt_data_end+0xff0059a8>
    5c64:	d8c00317 	ldw	r3,12(sp)
    5c68:	b8c1fc0e 	bge	r23,r3,645c <_dtoa_r+0x15b4>
    5c6c:	0027883a 	mov	r19,zero
    5c70:	b805883a 	mov	r2,r23
    5c74:	003f3e06 	br	5970 <__alt_data_end+0xff005970>
    5c78:	880b883a 	mov	r5,r17
    5c7c:	e009883a 	mov	r4,fp
    5c80:	000f883a 	mov	r7,zero
    5c84:	01800284 	movi	r6,10
    5c88:	0007e080 	call	7e08 <__multadd>
    5c8c:	d9000c17 	ldw	r4,48(sp)
    5c90:	1023883a 	mov	r17,r2
    5c94:	0102040e 	bge	zero,r4,64a8 <_dtoa_r+0x1600>
    5c98:	d9000615 	stw	r4,24(sp)
    5c9c:	0500050e 	bge	zero,r20,5cb4 <_dtoa_r+0xe0c>
    5ca0:	880b883a 	mov	r5,r17
    5ca4:	a00d883a 	mov	r6,r20
    5ca8:	e009883a 	mov	r4,fp
    5cac:	00084b80 	call	84b8 <__lshift>
    5cb0:	1023883a 	mov	r17,r2
    5cb4:	9801241e 	bne	r19,zero,6148 <_dtoa_r+0x12a0>
    5cb8:	8829883a 	mov	r20,r17
    5cbc:	d9000617 	ldw	r4,24(sp)
    5cc0:	dcc00717 	ldw	r19,28(sp)
    5cc4:	9480004c 	andi	r18,r18,1
    5cc8:	20bfffc4 	addi	r2,r4,-1
    5ccc:	9885883a 	add	r2,r19,r2
    5cd0:	d8800415 	stw	r2,16(sp)
    5cd4:	dc800615 	stw	r18,24(sp)
    5cd8:	a80b883a 	mov	r5,r21
    5cdc:	8009883a 	mov	r4,r16
    5ce0:	0004ca80 	call	4ca8 <quorem>
    5ce4:	880b883a 	mov	r5,r17
    5ce8:	8009883a 	mov	r4,r16
    5cec:	102f883a 	mov	r23,r2
    5cf0:	00086000 	call	8600 <__mcmp>
    5cf4:	a80b883a 	mov	r5,r21
    5cf8:	a00d883a 	mov	r6,r20
    5cfc:	e009883a 	mov	r4,fp
    5d00:	102d883a 	mov	r22,r2
    5d04:	00086600 	call	8660 <__mdiff>
    5d08:	1007883a 	mov	r3,r2
    5d0c:	10800317 	ldw	r2,12(r2)
    5d10:	bc800c04 	addi	r18,r23,48
    5d14:	180b883a 	mov	r5,r3
    5d18:	10004e1e 	bne	r2,zero,5e54 <_dtoa_r+0xfac>
    5d1c:	8009883a 	mov	r4,r16
    5d20:	d8c01615 	stw	r3,88(sp)
    5d24:	00086000 	call	8600 <__mcmp>
    5d28:	d8c01617 	ldw	r3,88(sp)
    5d2c:	e009883a 	mov	r4,fp
    5d30:	d8801615 	stw	r2,88(sp)
    5d34:	180b883a 	mov	r5,r3
    5d38:	0007de00 	call	7de0 <_Bfree>
    5d3c:	d8801617 	ldw	r2,88(sp)
    5d40:	1000041e 	bne	r2,zero,5d54 <_dtoa_r+0xeac>
    5d44:	d9800317 	ldw	r6,12(sp)
    5d48:	3000021e 	bne	r6,zero,5d54 <_dtoa_r+0xeac>
    5d4c:	d8c00617 	ldw	r3,24(sp)
    5d50:	18003726 	beq	r3,zero,5e30 <_dtoa_r+0xf88>
    5d54:	b0002016 	blt	r22,zero,5dd8 <_dtoa_r+0xf30>
    5d58:	b000041e 	bne	r22,zero,5d6c <_dtoa_r+0xec4>
    5d5c:	d9000317 	ldw	r4,12(sp)
    5d60:	2000021e 	bne	r4,zero,5d6c <_dtoa_r+0xec4>
    5d64:	d8c00617 	ldw	r3,24(sp)
    5d68:	18001b26 	beq	r3,zero,5dd8 <_dtoa_r+0xf30>
    5d6c:	00810716 	blt	zero,r2,618c <_dtoa_r+0x12e4>
    5d70:	d8c00417 	ldw	r3,16(sp)
    5d74:	9d800044 	addi	r22,r19,1
    5d78:	9c800005 	stb	r18,0(r19)
    5d7c:	b02f883a 	mov	r23,r22
    5d80:	98c10626 	beq	r19,r3,619c <_dtoa_r+0x12f4>
    5d84:	800b883a 	mov	r5,r16
    5d88:	000f883a 	mov	r7,zero
    5d8c:	01800284 	movi	r6,10
    5d90:	e009883a 	mov	r4,fp
    5d94:	0007e080 	call	7e08 <__multadd>
    5d98:	1021883a 	mov	r16,r2
    5d9c:	000f883a 	mov	r7,zero
    5da0:	01800284 	movi	r6,10
    5da4:	880b883a 	mov	r5,r17
    5da8:	e009883a 	mov	r4,fp
    5dac:	8d002526 	beq	r17,r20,5e44 <_dtoa_r+0xf9c>
    5db0:	0007e080 	call	7e08 <__multadd>
    5db4:	a00b883a 	mov	r5,r20
    5db8:	000f883a 	mov	r7,zero
    5dbc:	01800284 	movi	r6,10
    5dc0:	e009883a 	mov	r4,fp
    5dc4:	1023883a 	mov	r17,r2
    5dc8:	0007e080 	call	7e08 <__multadd>
    5dcc:	1029883a 	mov	r20,r2
    5dd0:	b027883a 	mov	r19,r22
    5dd4:	003fc006 	br	5cd8 <__alt_data_end+0xff005cd8>
    5dd8:	9011883a 	mov	r8,r18
    5ddc:	00800e0e 	bge	zero,r2,5e18 <_dtoa_r+0xf70>
    5de0:	800b883a 	mov	r5,r16
    5de4:	01800044 	movi	r6,1
    5de8:	e009883a 	mov	r4,fp
    5dec:	da001715 	stw	r8,92(sp)
    5df0:	00084b80 	call	84b8 <__lshift>
    5df4:	a80b883a 	mov	r5,r21
    5df8:	1009883a 	mov	r4,r2
    5dfc:	1021883a 	mov	r16,r2
    5e00:	00086000 	call	8600 <__mcmp>
    5e04:	da001717 	ldw	r8,92(sp)
    5e08:	0081960e 	bge	zero,r2,6464 <_dtoa_r+0x15bc>
    5e0c:	00800e44 	movi	r2,57
    5e10:	40817026 	beq	r8,r2,63d4 <_dtoa_r+0x152c>
    5e14:	ba000c44 	addi	r8,r23,49
    5e18:	8825883a 	mov	r18,r17
    5e1c:	9dc00044 	addi	r23,r19,1
    5e20:	9a000005 	stb	r8,0(r19)
    5e24:	a023883a 	mov	r17,r20
    5e28:	dc000915 	stw	r16,36(sp)
    5e2c:	003f2406 	br	5ac0 <__alt_data_end+0xff005ac0>
    5e30:	00800e44 	movi	r2,57
    5e34:	9011883a 	mov	r8,r18
    5e38:	90816626 	beq	r18,r2,63d4 <_dtoa_r+0x152c>
    5e3c:	05bff516 	blt	zero,r22,5e14 <__alt_data_end+0xff005e14>
    5e40:	003ff506 	br	5e18 <__alt_data_end+0xff005e18>
    5e44:	0007e080 	call	7e08 <__multadd>
    5e48:	1023883a 	mov	r17,r2
    5e4c:	1029883a 	mov	r20,r2
    5e50:	003fdf06 	br	5dd0 <__alt_data_end+0xff005dd0>
    5e54:	e009883a 	mov	r4,fp
    5e58:	0007de00 	call	7de0 <_Bfree>
    5e5c:	00800044 	movi	r2,1
    5e60:	003fbc06 	br	5d54 <__alt_data_end+0xff005d54>
    5e64:	a80b883a 	mov	r5,r21
    5e68:	8009883a 	mov	r4,r16
    5e6c:	00086000 	call	8600 <__mcmp>
    5e70:	103edb0e 	bge	r2,zero,59e0 <__alt_data_end+0xff0059e0>
    5e74:	800b883a 	mov	r5,r16
    5e78:	000f883a 	mov	r7,zero
    5e7c:	01800284 	movi	r6,10
    5e80:	e009883a 	mov	r4,fp
    5e84:	0007e080 	call	7e08 <__multadd>
    5e88:	1021883a 	mov	r16,r2
    5e8c:	d8800517 	ldw	r2,20(sp)
    5e90:	d8c00b17 	ldw	r3,44(sp)
    5e94:	10bfffc4 	addi	r2,r2,-1
    5e98:	d8800515 	stw	r2,20(sp)
    5e9c:	183f761e 	bne	r3,zero,5c78 <__alt_data_end+0xff005c78>
    5ea0:	d9000c17 	ldw	r4,48(sp)
    5ea4:	0101730e 	bge	zero,r4,6474 <_dtoa_r+0x15cc>
    5ea8:	d9000615 	stw	r4,24(sp)
    5eac:	003ed006 	br	59f0 <__alt_data_end+0xff0059f0>
    5eb0:	00800084 	movi	r2,2
    5eb4:	3081861e 	bne	r6,r2,64d0 <_dtoa_r+0x1628>
    5eb8:	d8000b15 	stw	zero,44(sp)
    5ebc:	003f3c06 	br	5bb0 <__alt_data_end+0xff005bb0>
    5ec0:	dc000917 	ldw	r16,36(sp)
    5ec4:	003e9206 	br	5910 <__alt_data_end+0xff005910>
    5ec8:	d9c00317 	ldw	r7,12(sp)
    5ecc:	00800084 	movi	r2,2
    5ed0:	11fec50e 	bge	r2,r7,59e8 <__alt_data_end+0xff0059e8>
    5ed4:	d9000617 	ldw	r4,24(sp)
    5ed8:	20013c1e 	bne	r4,zero,63cc <_dtoa_r+0x1524>
    5edc:	a80b883a 	mov	r5,r21
    5ee0:	000f883a 	mov	r7,zero
    5ee4:	01800144 	movi	r6,5
    5ee8:	e009883a 	mov	r4,fp
    5eec:	0007e080 	call	7e08 <__multadd>
    5ef0:	100b883a 	mov	r5,r2
    5ef4:	8009883a 	mov	r4,r16
    5ef8:	102b883a 	mov	r21,r2
    5efc:	00086000 	call	8600 <__mcmp>
    5f00:	dc000915 	stw	r16,36(sp)
    5f04:	00bf410e 	bge	zero,r2,5c0c <__alt_data_end+0xff005c0c>
    5f08:	d9c00717 	ldw	r7,28(sp)
    5f0c:	00800c44 	movi	r2,49
    5f10:	38800005 	stb	r2,0(r7)
    5f14:	d8800517 	ldw	r2,20(sp)
    5f18:	3dc00044 	addi	r23,r7,1
    5f1c:	10800044 	addi	r2,r2,1
    5f20:	d8800515 	stw	r2,20(sp)
    5f24:	003f3d06 	br	5c1c <__alt_data_end+0xff005c1c>
    5f28:	d9800517 	ldw	r6,20(sp)
    5f2c:	d9c00717 	ldw	r7,28(sp)
    5f30:	00800c44 	movi	r2,49
    5f34:	31800044 	addi	r6,r6,1
    5f38:	d9800515 	stw	r6,20(sp)
    5f3c:	38800005 	stb	r2,0(r7)
    5f40:	003edf06 	br	5ac0 <__alt_data_end+0xff005ac0>
    5f44:	d8000b15 	stw	zero,44(sp)
    5f48:	003c9f06 	br	51c8 <__alt_data_end+0xff0051c8>
    5f4c:	903e7e1e 	bne	r18,zero,5948 <__alt_data_end+0xff005948>
    5f50:	00800434 	movhi	r2,16
    5f54:	10bfffc4 	addi	r2,r2,-1
    5f58:	9884703a 	and	r2,r19,r2
    5f5c:	1000ea1e 	bne	r2,zero,6308 <_dtoa_r+0x1460>
    5f60:	9cdffc2c 	andhi	r19,r19,32752
    5f64:	9800e826 	beq	r19,zero,6308 <_dtoa_r+0x1460>
    5f68:	d9c00817 	ldw	r7,32(sp)
    5f6c:	b5800044 	addi	r22,r22,1
    5f70:	04c00044 	movi	r19,1
    5f74:	39c00044 	addi	r7,r7,1
    5f78:	d9c00815 	stw	r7,32(sp)
    5f7c:	d8800d17 	ldw	r2,52(sp)
    5f80:	103e721e 	bne	r2,zero,594c <__alt_data_end+0xff00594c>
    5f84:	00800044 	movi	r2,1
    5f88:	003e7906 	br	5970 <__alt_data_end+0xff005970>
    5f8c:	8009883a 	mov	r4,r16
    5f90:	000e3d00 	call	e3d0 <__floatsidf>
    5f94:	d9800f17 	ldw	r6,60(sp)
    5f98:	d9c01017 	ldw	r7,64(sp)
    5f9c:	1009883a 	mov	r4,r2
    5fa0:	180b883a 	mov	r5,r3
    5fa4:	000d33c0 	call	d33c <__muldf3>
    5fa8:	000d883a 	mov	r6,zero
    5fac:	01d00734 	movhi	r7,16412
    5fb0:	1009883a 	mov	r4,r2
    5fb4:	180b883a 	mov	r5,r3
    5fb8:	000bf500 	call	bf50 <__adddf3>
    5fbc:	047f3034 	movhi	r17,64704
    5fc0:	1021883a 	mov	r16,r2
    5fc4:	1c63883a 	add	r17,r3,r17
    5fc8:	d9000f17 	ldw	r4,60(sp)
    5fcc:	d9401017 	ldw	r5,64(sp)
    5fd0:	000d883a 	mov	r6,zero
    5fd4:	01d00534 	movhi	r7,16404
    5fd8:	000da540 	call	da54 <__subdf3>
    5fdc:	800d883a 	mov	r6,r16
    5fe0:	880f883a 	mov	r7,r17
    5fe4:	1009883a 	mov	r4,r2
    5fe8:	180b883a 	mov	r5,r3
    5fec:	102b883a 	mov	r21,r2
    5ff0:	1829883a 	mov	r20,r3
    5ff4:	000d16c0 	call	d16c <__gedf2>
    5ff8:	00806c16 	blt	zero,r2,61ac <_dtoa_r+0x1304>
    5ffc:	89e0003c 	xorhi	r7,r17,32768
    6000:	800d883a 	mov	r6,r16
    6004:	a809883a 	mov	r4,r21
    6008:	a00b883a 	mov	r5,r20
    600c:	000d2480 	call	d248 <__ledf2>
    6010:	103d7e0e 	bge	r2,zero,560c <__alt_data_end+0xff00560c>
    6014:	002b883a 	mov	r21,zero
    6018:	0023883a 	mov	r17,zero
    601c:	003efb06 	br	5c0c <__alt_data_end+0xff005c0c>
    6020:	d8800717 	ldw	r2,28(sp)
    6024:	003bd006 	br	4f68 <__alt_data_end+0xff004f68>
    6028:	d9000a17 	ldw	r4,40(sp)
    602c:	d9800d17 	ldw	r6,52(sp)
    6030:	dd400a15 	stw	r21,40(sp)
    6034:	a905c83a 	sub	r2,r21,r4
    6038:	308d883a 	add	r6,r6,r2
    603c:	d9800d15 	stw	r6,52(sp)
    6040:	002b883a 	mov	r21,zero
    6044:	003e0606 	br	5860 <__alt_data_end+0xff005860>
    6048:	9023883a 	mov	r17,r18
    604c:	9829883a 	mov	r20,r19
    6050:	04000084 	movi	r16,2
    6054:	003c9206 	br	52a0 <__alt_data_end+0xff0052a0>
    6058:	04000044 	movi	r16,1
    605c:	dc000c15 	stw	r16,48(sp)
    6060:	dc000615 	stw	r16,24(sp)
    6064:	dc002215 	stw	r16,136(sp)
    6068:	e0001115 	stw	zero,68(fp)
    606c:	000b883a 	mov	r5,zero
    6070:	003c6906 	br	5218 <__alt_data_end+0xff005218>
    6074:	3021883a 	mov	r16,r6
    6078:	003ffb06 	br	6068 <__alt_data_end+0xff006068>
    607c:	1000021e 	bne	r2,zero,6088 <_dtoa_r+0x11e0>
    6080:	4200004c 	andi	r8,r8,1
    6084:	403e7d1e 	bne	r8,zero,5a7c <__alt_data_end+0xff005a7c>
    6088:	01000c04 	movi	r4,48
    608c:	00000106 	br	6094 <_dtoa_r+0x11ec>
    6090:	102f883a 	mov	r23,r2
    6094:	b8bfffc4 	addi	r2,r23,-1
    6098:	10c00007 	ldb	r3,0(r2)
    609c:	193ffc26 	beq	r3,r4,6090 <__alt_data_end+0xff006090>
    60a0:	003e8706 	br	5ac0 <__alt_data_end+0xff005ac0>
    60a4:	d8800517 	ldw	r2,20(sp)
    60a8:	00a3c83a 	sub	r17,zero,r2
    60ac:	8800a426 	beq	r17,zero,6340 <_dtoa_r+0x1498>
    60b0:	888003cc 	andi	r2,r17,15
    60b4:	100490fa 	slli	r2,r2,3
    60b8:	00c00074 	movhi	r3,1
    60bc:	18c56604 	addi	r3,r3,5528
    60c0:	1885883a 	add	r2,r3,r2
    60c4:	11800017 	ldw	r6,0(r2)
    60c8:	11c00117 	ldw	r7,4(r2)
    60cc:	9009883a 	mov	r4,r18
    60d0:	980b883a 	mov	r5,r19
    60d4:	8823d13a 	srai	r17,r17,4
    60d8:	000d33c0 	call	d33c <__muldf3>
    60dc:	d8800f15 	stw	r2,60(sp)
    60e0:	d8c01015 	stw	r3,64(sp)
    60e4:	8800e826 	beq	r17,zero,6488 <_dtoa_r+0x15e0>
    60e8:	05000074 	movhi	r20,1
    60ec:	a5055c04 	addi	r20,r20,5488
    60f0:	04000084 	movi	r16,2
    60f4:	8980004c 	andi	r6,r17,1
    60f8:	1009883a 	mov	r4,r2
    60fc:	8823d07a 	srai	r17,r17,1
    6100:	180b883a 	mov	r5,r3
    6104:	30000426 	beq	r6,zero,6118 <_dtoa_r+0x1270>
    6108:	a1800017 	ldw	r6,0(r20)
    610c:	a1c00117 	ldw	r7,4(r20)
    6110:	84000044 	addi	r16,r16,1
    6114:	000d33c0 	call	d33c <__muldf3>
    6118:	a5000204 	addi	r20,r20,8
    611c:	883ff51e 	bne	r17,zero,60f4 <__alt_data_end+0xff0060f4>
    6120:	d8800f15 	stw	r2,60(sp)
    6124:	d8c01015 	stw	r3,64(sp)
    6128:	003c7606 	br	5304 <__alt_data_end+0xff005304>
    612c:	00c00c04 	movi	r3,48
    6130:	10c00005 	stb	r3,0(r2)
    6134:	d8c00517 	ldw	r3,20(sp)
    6138:	bd3fffc3 	ldbu	r20,-1(r23)
    613c:	18c00044 	addi	r3,r3,1
    6140:	d8c00515 	stw	r3,20(sp)
    6144:	003db906 	br	582c <__alt_data_end+0xff00582c>
    6148:	89400117 	ldw	r5,4(r17)
    614c:	e009883a 	mov	r4,fp
    6150:	0007d380 	call	7d38 <_Balloc>
    6154:	89800417 	ldw	r6,16(r17)
    6158:	89400304 	addi	r5,r17,12
    615c:	11000304 	addi	r4,r2,12
    6160:	31800084 	addi	r6,r6,2
    6164:	318d883a 	add	r6,r6,r6
    6168:	318d883a 	add	r6,r6,r6
    616c:	1027883a 	mov	r19,r2
    6170:	000796c0 	call	796c <memcpy>
    6174:	01800044 	movi	r6,1
    6178:	980b883a 	mov	r5,r19
    617c:	e009883a 	mov	r4,fp
    6180:	00084b80 	call	84b8 <__lshift>
    6184:	1029883a 	mov	r20,r2
    6188:	003ecc06 	br	5cbc <__alt_data_end+0xff005cbc>
    618c:	00800e44 	movi	r2,57
    6190:	90809026 	beq	r18,r2,63d4 <_dtoa_r+0x152c>
    6194:	92000044 	addi	r8,r18,1
    6198:	003f1f06 	br	5e18 <__alt_data_end+0xff005e18>
    619c:	9011883a 	mov	r8,r18
    61a0:	8825883a 	mov	r18,r17
    61a4:	a023883a 	mov	r17,r20
    61a8:	003e2906 	br	5a50 <__alt_data_end+0xff005a50>
    61ac:	002b883a 	mov	r21,zero
    61b0:	0023883a 	mov	r17,zero
    61b4:	003f5406 	br	5f08 <__alt_data_end+0xff005f08>
    61b8:	61bfffc4 	addi	r6,r12,-1
    61bc:	300490fa 	slli	r2,r6,3
    61c0:	00c00074 	movhi	r3,1
    61c4:	18c56604 	addi	r3,r3,5528
    61c8:	1885883a 	add	r2,r3,r2
    61cc:	11000017 	ldw	r4,0(r2)
    61d0:	11400117 	ldw	r5,4(r2)
    61d4:	d8800717 	ldw	r2,28(sp)
    61d8:	880f883a 	mov	r7,r17
    61dc:	d9801215 	stw	r6,72(sp)
    61e0:	800d883a 	mov	r6,r16
    61e4:	db001615 	stw	r12,88(sp)
    61e8:	15c00044 	addi	r23,r2,1
    61ec:	000d33c0 	call	d33c <__muldf3>
    61f0:	d9401017 	ldw	r5,64(sp)
    61f4:	d9000f17 	ldw	r4,60(sp)
    61f8:	d8c01515 	stw	r3,84(sp)
    61fc:	d8801415 	stw	r2,80(sp)
    6200:	000e3500 	call	e350 <__fixdfsi>
    6204:	1009883a 	mov	r4,r2
    6208:	1021883a 	mov	r16,r2
    620c:	000e3d00 	call	e3d0 <__floatsidf>
    6210:	d9000f17 	ldw	r4,60(sp)
    6214:	d9401017 	ldw	r5,64(sp)
    6218:	100d883a 	mov	r6,r2
    621c:	180f883a 	mov	r7,r3
    6220:	000da540 	call	da54 <__subdf3>
    6224:	1829883a 	mov	r20,r3
    6228:	d8c00717 	ldw	r3,28(sp)
    622c:	84000c04 	addi	r16,r16,48
    6230:	1023883a 	mov	r17,r2
    6234:	1c000005 	stb	r16,0(r3)
    6238:	db001617 	ldw	r12,88(sp)
    623c:	00800044 	movi	r2,1
    6240:	60802226 	beq	r12,r2,62cc <_dtoa_r+0x1424>
    6244:	d9c00717 	ldw	r7,28(sp)
    6248:	8805883a 	mov	r2,r17
    624c:	b82b883a 	mov	r21,r23
    6250:	3b19883a 	add	r12,r7,r12
    6254:	6023883a 	mov	r17,r12
    6258:	a007883a 	mov	r3,r20
    625c:	dc800f15 	stw	r18,60(sp)
    6260:	000d883a 	mov	r6,zero
    6264:	01d00934 	movhi	r7,16420
    6268:	1009883a 	mov	r4,r2
    626c:	180b883a 	mov	r5,r3
    6270:	000d33c0 	call	d33c <__muldf3>
    6274:	180b883a 	mov	r5,r3
    6278:	1009883a 	mov	r4,r2
    627c:	1829883a 	mov	r20,r3
    6280:	1025883a 	mov	r18,r2
    6284:	000e3500 	call	e350 <__fixdfsi>
    6288:	1009883a 	mov	r4,r2
    628c:	1021883a 	mov	r16,r2
    6290:	000e3d00 	call	e3d0 <__floatsidf>
    6294:	100d883a 	mov	r6,r2
    6298:	180f883a 	mov	r7,r3
    629c:	9009883a 	mov	r4,r18
    62a0:	a00b883a 	mov	r5,r20
    62a4:	84000c04 	addi	r16,r16,48
    62a8:	000da540 	call	da54 <__subdf3>
    62ac:	ad400044 	addi	r21,r21,1
    62b0:	ac3fffc5 	stb	r16,-1(r21)
    62b4:	ac7fea1e 	bne	r21,r17,6260 <__alt_data_end+0xff006260>
    62b8:	1023883a 	mov	r17,r2
    62bc:	d8801217 	ldw	r2,72(sp)
    62c0:	dc800f17 	ldw	r18,60(sp)
    62c4:	1829883a 	mov	r20,r3
    62c8:	b8af883a 	add	r23,r23,r2
    62cc:	d9001417 	ldw	r4,80(sp)
    62d0:	d9401517 	ldw	r5,84(sp)
    62d4:	000d883a 	mov	r6,zero
    62d8:	01cff834 	movhi	r7,16352
    62dc:	000bf500 	call	bf50 <__adddf3>
    62e0:	880d883a 	mov	r6,r17
    62e4:	a00f883a 	mov	r7,r20
    62e8:	1009883a 	mov	r4,r2
    62ec:	180b883a 	mov	r5,r3
    62f0:	000d2480 	call	d248 <__ledf2>
    62f4:	10003e0e 	bge	r2,zero,63f0 <_dtoa_r+0x1548>
    62f8:	d9001317 	ldw	r4,76(sp)
    62fc:	bd3fffc3 	ldbu	r20,-1(r23)
    6300:	d9000515 	stw	r4,20(sp)
    6304:	003d3b06 	br	57f4 <__alt_data_end+0xff0057f4>
    6308:	0027883a 	mov	r19,zero
    630c:	003f1b06 	br	5f7c <__alt_data_end+0xff005f7c>
    6310:	d8800817 	ldw	r2,32(sp)
    6314:	11e9c83a 	sub	r20,r2,r7
    6318:	0005883a 	mov	r2,zero
    631c:	003d5406 	br	5870 <__alt_data_end+0xff005870>
    6320:	00800044 	movi	r2,1
    6324:	003dc706 	br	5a44 <__alt_data_end+0xff005a44>
    6328:	d8c00217 	ldw	r3,8(sp)
    632c:	00800d84 	movi	r2,54
    6330:	dd400a17 	ldw	r21,40(sp)
    6334:	10c5c83a 	sub	r2,r2,r3
    6338:	dd000817 	ldw	r20,32(sp)
    633c:	003d4c06 	br	5870 <__alt_data_end+0xff005870>
    6340:	dc800f15 	stw	r18,60(sp)
    6344:	dcc01015 	stw	r19,64(sp)
    6348:	04000084 	movi	r16,2
    634c:	003bed06 	br	5304 <__alt_data_end+0xff005304>
    6350:	d9000617 	ldw	r4,24(sp)
    6354:	203f0d26 	beq	r4,zero,5f8c <__alt_data_end+0xff005f8c>
    6358:	d9800c17 	ldw	r6,48(sp)
    635c:	01bcab0e 	bge	zero,r6,560c <__alt_data_end+0xff00560c>
    6360:	d9401017 	ldw	r5,64(sp)
    6364:	d9000f17 	ldw	r4,60(sp)
    6368:	000d883a 	mov	r6,zero
    636c:	01d00934 	movhi	r7,16420
    6370:	000d33c0 	call	d33c <__muldf3>
    6374:	81000044 	addi	r4,r16,1
    6378:	d8800f15 	stw	r2,60(sp)
    637c:	d8c01015 	stw	r3,64(sp)
    6380:	000e3d00 	call	e3d0 <__floatsidf>
    6384:	d9800f17 	ldw	r6,60(sp)
    6388:	d9c01017 	ldw	r7,64(sp)
    638c:	1009883a 	mov	r4,r2
    6390:	180b883a 	mov	r5,r3
    6394:	000d33c0 	call	d33c <__muldf3>
    6398:	01d00734 	movhi	r7,16412
    639c:	000d883a 	mov	r6,zero
    63a0:	1009883a 	mov	r4,r2
    63a4:	180b883a 	mov	r5,r3
    63a8:	000bf500 	call	bf50 <__adddf3>
    63ac:	d9c00517 	ldw	r7,20(sp)
    63b0:	047f3034 	movhi	r17,64704
    63b4:	1021883a 	mov	r16,r2
    63b8:	39ffffc4 	addi	r7,r7,-1
    63bc:	d9c01315 	stw	r7,76(sp)
    63c0:	1c63883a 	add	r17,r3,r17
    63c4:	db000c17 	ldw	r12,48(sp)
    63c8:	003bea06 	br	5374 <__alt_data_end+0xff005374>
    63cc:	dc000915 	stw	r16,36(sp)
    63d0:	003e0e06 	br	5c0c <__alt_data_end+0xff005c0c>
    63d4:	01000e44 	movi	r4,57
    63d8:	8825883a 	mov	r18,r17
    63dc:	9dc00044 	addi	r23,r19,1
    63e0:	99000005 	stb	r4,0(r19)
    63e4:	a023883a 	mov	r17,r20
    63e8:	dc000915 	stw	r16,36(sp)
    63ec:	003da406 	br	5a80 <__alt_data_end+0xff005a80>
    63f0:	d9801417 	ldw	r6,80(sp)
    63f4:	d9c01517 	ldw	r7,84(sp)
    63f8:	0009883a 	mov	r4,zero
    63fc:	014ff834 	movhi	r5,16352
    6400:	000da540 	call	da54 <__subdf3>
    6404:	880d883a 	mov	r6,r17
    6408:	a00f883a 	mov	r7,r20
    640c:	1009883a 	mov	r4,r2
    6410:	180b883a 	mov	r5,r3
    6414:	000d16c0 	call	d16c <__gedf2>
    6418:	00bc7c0e 	bge	zero,r2,560c <__alt_data_end+0xff00560c>
    641c:	01000c04 	movi	r4,48
    6420:	00000106 	br	6428 <_dtoa_r+0x1580>
    6424:	102f883a 	mov	r23,r2
    6428:	b8bfffc4 	addi	r2,r23,-1
    642c:	10c00007 	ldb	r3,0(r2)
    6430:	193ffc26 	beq	r3,r4,6424 <__alt_data_end+0xff006424>
    6434:	d9801317 	ldw	r6,76(sp)
    6438:	d9800515 	stw	r6,20(sp)
    643c:	003c4406 	br	5550 <__alt_data_end+0xff005550>
    6440:	d9801317 	ldw	r6,76(sp)
    6444:	d9800515 	stw	r6,20(sp)
    6448:	003cea06 	br	57f4 <__alt_data_end+0xff0057f4>
    644c:	dd800f17 	ldw	r22,60(sp)
    6450:	dcc01017 	ldw	r19,64(sp)
    6454:	dc801217 	ldw	r18,72(sp)
    6458:	003c6c06 	br	560c <__alt_data_end+0xff00560c>
    645c:	903e031e 	bne	r18,zero,5c6c <__alt_data_end+0xff005c6c>
    6460:	003ebb06 	br	5f50 <__alt_data_end+0xff005f50>
    6464:	103e6c1e 	bne	r2,zero,5e18 <__alt_data_end+0xff005e18>
    6468:	4080004c 	andi	r2,r8,1
    646c:	103e6a26 	beq	r2,zero,5e18 <__alt_data_end+0xff005e18>
    6470:	003e6606 	br	5e0c <__alt_data_end+0xff005e0c>
    6474:	d8c00317 	ldw	r3,12(sp)
    6478:	00800084 	movi	r2,2
    647c:	10c02916 	blt	r2,r3,6524 <_dtoa_r+0x167c>
    6480:	d9000c17 	ldw	r4,48(sp)
    6484:	003e8806 	br	5ea8 <__alt_data_end+0xff005ea8>
    6488:	04000084 	movi	r16,2
    648c:	003b9d06 	br	5304 <__alt_data_end+0xff005304>
    6490:	d9001317 	ldw	r4,76(sp)
    6494:	d9000515 	stw	r4,20(sp)
    6498:	003cd606 	br	57f4 <__alt_data_end+0xff0057f4>
    649c:	d8801317 	ldw	r2,76(sp)
    64a0:	d8800515 	stw	r2,20(sp)
    64a4:	003c2a06 	br	5550 <__alt_data_end+0xff005550>
    64a8:	d9800317 	ldw	r6,12(sp)
    64ac:	00800084 	movi	r2,2
    64b0:	11801516 	blt	r2,r6,6508 <_dtoa_r+0x1660>
    64b4:	d9c00c17 	ldw	r7,48(sp)
    64b8:	d9c00615 	stw	r7,24(sp)
    64bc:	003df706 	br	5c9c <__alt_data_end+0xff005c9c>
    64c0:	193d3926 	beq	r3,r4,59a8 <__alt_data_end+0xff0059a8>
    64c4:	00c00f04 	movi	r3,60
    64c8:	1885c83a 	sub	r2,r3,r2
    64cc:	003ddf06 	br	5c4c <__alt_data_end+0xff005c4c>
    64d0:	e009883a 	mov	r4,fp
    64d4:	e0001115 	stw	zero,68(fp)
    64d8:	000b883a 	mov	r5,zero
    64dc:	0007d380 	call	7d38 <_Balloc>
    64e0:	d8800715 	stw	r2,28(sp)
    64e4:	d8c00717 	ldw	r3,28(sp)
    64e8:	00bfffc4 	movi	r2,-1
    64ec:	01000044 	movi	r4,1
    64f0:	d8800c15 	stw	r2,48(sp)
    64f4:	e0c01015 	stw	r3,64(fp)
    64f8:	d9000b15 	stw	r4,44(sp)
    64fc:	d8800615 	stw	r2,24(sp)
    6500:	d8002215 	stw	zero,136(sp)
    6504:	003c4106 	br	560c <__alt_data_end+0xff00560c>
    6508:	d8c00c17 	ldw	r3,48(sp)
    650c:	d8c00615 	stw	r3,24(sp)
    6510:	003e7006 	br	5ed4 <__alt_data_end+0xff005ed4>
    6514:	04400044 	movi	r17,1
    6518:	003b2006 	br	519c <__alt_data_end+0xff00519c>
    651c:	000b883a 	mov	r5,zero
    6520:	003b3d06 	br	5218 <__alt_data_end+0xff005218>
    6524:	d8800c17 	ldw	r2,48(sp)
    6528:	d8800615 	stw	r2,24(sp)
    652c:	003e6906 	br	5ed4 <__alt_data_end+0xff005ed4>

00006530 <__sflush_r>:
    6530:	2880030b 	ldhu	r2,12(r5)
    6534:	defffb04 	addi	sp,sp,-20
    6538:	dcc00315 	stw	r19,12(sp)
    653c:	dc400115 	stw	r17,4(sp)
    6540:	dfc00415 	stw	ra,16(sp)
    6544:	dc800215 	stw	r18,8(sp)
    6548:	dc000015 	stw	r16,0(sp)
    654c:	10c0020c 	andi	r3,r2,8
    6550:	2823883a 	mov	r17,r5
    6554:	2027883a 	mov	r19,r4
    6558:	1800311e 	bne	r3,zero,6620 <__sflush_r+0xf0>
    655c:	28c00117 	ldw	r3,4(r5)
    6560:	10820014 	ori	r2,r2,2048
    6564:	2880030d 	sth	r2,12(r5)
    6568:	00c04b0e 	bge	zero,r3,6698 <__sflush_r+0x168>
    656c:	8a000a17 	ldw	r8,40(r17)
    6570:	40002326 	beq	r8,zero,6600 <__sflush_r+0xd0>
    6574:	9c000017 	ldw	r16,0(r19)
    6578:	10c4000c 	andi	r3,r2,4096
    657c:	98000015 	stw	zero,0(r19)
    6580:	18004826 	beq	r3,zero,66a4 <__sflush_r+0x174>
    6584:	89801417 	ldw	r6,80(r17)
    6588:	10c0010c 	andi	r3,r2,4
    658c:	18000626 	beq	r3,zero,65a8 <__sflush_r+0x78>
    6590:	88c00117 	ldw	r3,4(r17)
    6594:	88800c17 	ldw	r2,48(r17)
    6598:	30cdc83a 	sub	r6,r6,r3
    659c:	10000226 	beq	r2,zero,65a8 <__sflush_r+0x78>
    65a0:	88800f17 	ldw	r2,60(r17)
    65a4:	308dc83a 	sub	r6,r6,r2
    65a8:	89400717 	ldw	r5,28(r17)
    65ac:	000f883a 	mov	r7,zero
    65b0:	9809883a 	mov	r4,r19
    65b4:	403ee83a 	callr	r8
    65b8:	00ffffc4 	movi	r3,-1
    65bc:	10c04426 	beq	r2,r3,66d0 <__sflush_r+0x1a0>
    65c0:	88c0030b 	ldhu	r3,12(r17)
    65c4:	89000417 	ldw	r4,16(r17)
    65c8:	88000115 	stw	zero,4(r17)
    65cc:	197dffcc 	andi	r5,r3,63487
    65d0:	8940030d 	sth	r5,12(r17)
    65d4:	89000015 	stw	r4,0(r17)
    65d8:	18c4000c 	andi	r3,r3,4096
    65dc:	18002c1e 	bne	r3,zero,6690 <__sflush_r+0x160>
    65e0:	89400c17 	ldw	r5,48(r17)
    65e4:	9c000015 	stw	r16,0(r19)
    65e8:	28000526 	beq	r5,zero,6600 <__sflush_r+0xd0>
    65ec:	88801004 	addi	r2,r17,64
    65f0:	28800226 	beq	r5,r2,65fc <__sflush_r+0xcc>
    65f4:	9809883a 	mov	r4,r19
    65f8:	0006c9c0 	call	6c9c <_free_r>
    65fc:	88000c15 	stw	zero,48(r17)
    6600:	0005883a 	mov	r2,zero
    6604:	dfc00417 	ldw	ra,16(sp)
    6608:	dcc00317 	ldw	r19,12(sp)
    660c:	dc800217 	ldw	r18,8(sp)
    6610:	dc400117 	ldw	r17,4(sp)
    6614:	dc000017 	ldw	r16,0(sp)
    6618:	dec00504 	addi	sp,sp,20
    661c:	f800283a 	ret
    6620:	2c800417 	ldw	r18,16(r5)
    6624:	903ff626 	beq	r18,zero,6600 <__alt_data_end+0xff006600>
    6628:	2c000017 	ldw	r16,0(r5)
    662c:	108000cc 	andi	r2,r2,3
    6630:	2c800015 	stw	r18,0(r5)
    6634:	84a1c83a 	sub	r16,r16,r18
    6638:	1000131e 	bne	r2,zero,6688 <__sflush_r+0x158>
    663c:	28800517 	ldw	r2,20(r5)
    6640:	88800215 	stw	r2,8(r17)
    6644:	04000316 	blt	zero,r16,6654 <__sflush_r+0x124>
    6648:	003fed06 	br	6600 <__alt_data_end+0xff006600>
    664c:	90a5883a 	add	r18,r18,r2
    6650:	043feb0e 	bge	zero,r16,6600 <__alt_data_end+0xff006600>
    6654:	88800917 	ldw	r2,36(r17)
    6658:	89400717 	ldw	r5,28(r17)
    665c:	800f883a 	mov	r7,r16
    6660:	900d883a 	mov	r6,r18
    6664:	9809883a 	mov	r4,r19
    6668:	103ee83a 	callr	r2
    666c:	80a1c83a 	sub	r16,r16,r2
    6670:	00bff616 	blt	zero,r2,664c <__alt_data_end+0xff00664c>
    6674:	88c0030b 	ldhu	r3,12(r17)
    6678:	00bfffc4 	movi	r2,-1
    667c:	18c01014 	ori	r3,r3,64
    6680:	88c0030d 	sth	r3,12(r17)
    6684:	003fdf06 	br	6604 <__alt_data_end+0xff006604>
    6688:	0005883a 	mov	r2,zero
    668c:	003fec06 	br	6640 <__alt_data_end+0xff006640>
    6690:	88801415 	stw	r2,80(r17)
    6694:	003fd206 	br	65e0 <__alt_data_end+0xff0065e0>
    6698:	28c00f17 	ldw	r3,60(r5)
    669c:	00ffb316 	blt	zero,r3,656c <__alt_data_end+0xff00656c>
    66a0:	003fd706 	br	6600 <__alt_data_end+0xff006600>
    66a4:	89400717 	ldw	r5,28(r17)
    66a8:	000d883a 	mov	r6,zero
    66ac:	01c00044 	movi	r7,1
    66b0:	9809883a 	mov	r4,r19
    66b4:	403ee83a 	callr	r8
    66b8:	100d883a 	mov	r6,r2
    66bc:	00bfffc4 	movi	r2,-1
    66c0:	30801426 	beq	r6,r2,6714 <__sflush_r+0x1e4>
    66c4:	8880030b 	ldhu	r2,12(r17)
    66c8:	8a000a17 	ldw	r8,40(r17)
    66cc:	003fae06 	br	6588 <__alt_data_end+0xff006588>
    66d0:	98c00017 	ldw	r3,0(r19)
    66d4:	183fba26 	beq	r3,zero,65c0 <__alt_data_end+0xff0065c0>
    66d8:	01000744 	movi	r4,29
    66dc:	19000626 	beq	r3,r4,66f8 <__sflush_r+0x1c8>
    66e0:	01000584 	movi	r4,22
    66e4:	19000426 	beq	r3,r4,66f8 <__sflush_r+0x1c8>
    66e8:	88c0030b 	ldhu	r3,12(r17)
    66ec:	18c01014 	ori	r3,r3,64
    66f0:	88c0030d 	sth	r3,12(r17)
    66f4:	003fc306 	br	6604 <__alt_data_end+0xff006604>
    66f8:	8880030b 	ldhu	r2,12(r17)
    66fc:	88c00417 	ldw	r3,16(r17)
    6700:	88000115 	stw	zero,4(r17)
    6704:	10bdffcc 	andi	r2,r2,63487
    6708:	8880030d 	sth	r2,12(r17)
    670c:	88c00015 	stw	r3,0(r17)
    6710:	003fb306 	br	65e0 <__alt_data_end+0xff0065e0>
    6714:	98800017 	ldw	r2,0(r19)
    6718:	103fea26 	beq	r2,zero,66c4 <__alt_data_end+0xff0066c4>
    671c:	00c00744 	movi	r3,29
    6720:	10c00226 	beq	r2,r3,672c <__sflush_r+0x1fc>
    6724:	00c00584 	movi	r3,22
    6728:	10c0031e 	bne	r2,r3,6738 <__sflush_r+0x208>
    672c:	9c000015 	stw	r16,0(r19)
    6730:	0005883a 	mov	r2,zero
    6734:	003fb306 	br	6604 <__alt_data_end+0xff006604>
    6738:	88c0030b 	ldhu	r3,12(r17)
    673c:	3005883a 	mov	r2,r6
    6740:	18c01014 	ori	r3,r3,64
    6744:	88c0030d 	sth	r3,12(r17)
    6748:	003fae06 	br	6604 <__alt_data_end+0xff006604>

0000674c <_fflush_r>:
    674c:	defffd04 	addi	sp,sp,-12
    6750:	dc000115 	stw	r16,4(sp)
    6754:	dfc00215 	stw	ra,8(sp)
    6758:	2021883a 	mov	r16,r4
    675c:	20000226 	beq	r4,zero,6768 <_fflush_r+0x1c>
    6760:	20800e17 	ldw	r2,56(r4)
    6764:	10000c26 	beq	r2,zero,6798 <_fflush_r+0x4c>
    6768:	2880030f 	ldh	r2,12(r5)
    676c:	1000051e 	bne	r2,zero,6784 <_fflush_r+0x38>
    6770:	0005883a 	mov	r2,zero
    6774:	dfc00217 	ldw	ra,8(sp)
    6778:	dc000117 	ldw	r16,4(sp)
    677c:	dec00304 	addi	sp,sp,12
    6780:	f800283a 	ret
    6784:	8009883a 	mov	r4,r16
    6788:	dfc00217 	ldw	ra,8(sp)
    678c:	dc000117 	ldw	r16,4(sp)
    6790:	dec00304 	addi	sp,sp,12
    6794:	00065301 	jmpi	6530 <__sflush_r>
    6798:	d9400015 	stw	r5,0(sp)
    679c:	0006b280 	call	6b28 <__sinit>
    67a0:	d9400017 	ldw	r5,0(sp)
    67a4:	003ff006 	br	6768 <__alt_data_end+0xff006768>

000067a8 <fflush>:
    67a8:	20000526 	beq	r4,zero,67c0 <fflush+0x18>
    67ac:	00800074 	movhi	r2,1
    67b0:	108cd904 	addi	r2,r2,13156
    67b4:	200b883a 	mov	r5,r4
    67b8:	11000017 	ldw	r4,0(r2)
    67bc:	000674c1 	jmpi	674c <_fflush_r>
    67c0:	00800074 	movhi	r2,1
    67c4:	108cd804 	addi	r2,r2,13152
    67c8:	11000017 	ldw	r4,0(r2)
    67cc:	01400034 	movhi	r5,0
    67d0:	2959d304 	addi	r5,r5,26444
    67d4:	000752c1 	jmpi	752c <_fwalk_reent>

000067d8 <__fp_unlock>:
    67d8:	0005883a 	mov	r2,zero
    67dc:	f800283a 	ret

000067e0 <_cleanup_r>:
    67e0:	01400074 	movhi	r5,1
    67e4:	296b3904 	addi	r5,r5,-21276
    67e8:	000752c1 	jmpi	752c <_fwalk_reent>

000067ec <__sinit.part.1>:
    67ec:	defff704 	addi	sp,sp,-36
    67f0:	00c00034 	movhi	r3,0
    67f4:	dfc00815 	stw	ra,32(sp)
    67f8:	ddc00715 	stw	r23,28(sp)
    67fc:	dd800615 	stw	r22,24(sp)
    6800:	dd400515 	stw	r21,20(sp)
    6804:	dd000415 	stw	r20,16(sp)
    6808:	dcc00315 	stw	r19,12(sp)
    680c:	dc800215 	stw	r18,8(sp)
    6810:	dc400115 	stw	r17,4(sp)
    6814:	dc000015 	stw	r16,0(sp)
    6818:	18d9f804 	addi	r3,r3,26592
    681c:	24000117 	ldw	r16,4(r4)
    6820:	20c00f15 	stw	r3,60(r4)
    6824:	2080bb04 	addi	r2,r4,748
    6828:	00c000c4 	movi	r3,3
    682c:	20c0b915 	stw	r3,740(r4)
    6830:	2080ba15 	stw	r2,744(r4)
    6834:	2000b815 	stw	zero,736(r4)
    6838:	05c00204 	movi	r23,8
    683c:	00800104 	movi	r2,4
    6840:	2025883a 	mov	r18,r4
    6844:	b80d883a 	mov	r6,r23
    6848:	81001704 	addi	r4,r16,92
    684c:	000b883a 	mov	r5,zero
    6850:	80000015 	stw	zero,0(r16)
    6854:	80000115 	stw	zero,4(r16)
    6858:	80000215 	stw	zero,8(r16)
    685c:	8080030d 	sth	r2,12(r16)
    6860:	80001915 	stw	zero,100(r16)
    6864:	8000038d 	sth	zero,14(r16)
    6868:	80000415 	stw	zero,16(r16)
    686c:	80000515 	stw	zero,20(r16)
    6870:	80000615 	stw	zero,24(r16)
    6874:	0007c100 	call	7c10 <memset>
    6878:	05800074 	movhi	r22,1
    687c:	94400217 	ldw	r17,8(r18)
    6880:	05400074 	movhi	r21,1
    6884:	05000074 	movhi	r20,1
    6888:	04c00074 	movhi	r19,1
    688c:	b5a4c304 	addi	r22,r22,-27892
    6890:	ad64da04 	addi	r21,r21,-27800
    6894:	a524f904 	addi	r20,r20,-27676
    6898:	9ce51004 	addi	r19,r19,-27584
    689c:	85800815 	stw	r22,32(r16)
    68a0:	85400915 	stw	r21,36(r16)
    68a4:	85000a15 	stw	r20,40(r16)
    68a8:	84c00b15 	stw	r19,44(r16)
    68ac:	84000715 	stw	r16,28(r16)
    68b0:	00800284 	movi	r2,10
    68b4:	8880030d 	sth	r2,12(r17)
    68b8:	00800044 	movi	r2,1
    68bc:	b80d883a 	mov	r6,r23
    68c0:	89001704 	addi	r4,r17,92
    68c4:	000b883a 	mov	r5,zero
    68c8:	88000015 	stw	zero,0(r17)
    68cc:	88000115 	stw	zero,4(r17)
    68d0:	88000215 	stw	zero,8(r17)
    68d4:	88001915 	stw	zero,100(r17)
    68d8:	8880038d 	sth	r2,14(r17)
    68dc:	88000415 	stw	zero,16(r17)
    68e0:	88000515 	stw	zero,20(r17)
    68e4:	88000615 	stw	zero,24(r17)
    68e8:	0007c100 	call	7c10 <memset>
    68ec:	94000317 	ldw	r16,12(r18)
    68f0:	00800484 	movi	r2,18
    68f4:	8c400715 	stw	r17,28(r17)
    68f8:	8d800815 	stw	r22,32(r17)
    68fc:	8d400915 	stw	r21,36(r17)
    6900:	8d000a15 	stw	r20,40(r17)
    6904:	8cc00b15 	stw	r19,44(r17)
    6908:	8080030d 	sth	r2,12(r16)
    690c:	00800084 	movi	r2,2
    6910:	80000015 	stw	zero,0(r16)
    6914:	80000115 	stw	zero,4(r16)
    6918:	80000215 	stw	zero,8(r16)
    691c:	80001915 	stw	zero,100(r16)
    6920:	8080038d 	sth	r2,14(r16)
    6924:	80000415 	stw	zero,16(r16)
    6928:	80000515 	stw	zero,20(r16)
    692c:	80000615 	stw	zero,24(r16)
    6930:	b80d883a 	mov	r6,r23
    6934:	000b883a 	mov	r5,zero
    6938:	81001704 	addi	r4,r16,92
    693c:	0007c100 	call	7c10 <memset>
    6940:	00800044 	movi	r2,1
    6944:	84000715 	stw	r16,28(r16)
    6948:	85800815 	stw	r22,32(r16)
    694c:	85400915 	stw	r21,36(r16)
    6950:	85000a15 	stw	r20,40(r16)
    6954:	84c00b15 	stw	r19,44(r16)
    6958:	90800e15 	stw	r2,56(r18)
    695c:	dfc00817 	ldw	ra,32(sp)
    6960:	ddc00717 	ldw	r23,28(sp)
    6964:	dd800617 	ldw	r22,24(sp)
    6968:	dd400517 	ldw	r21,20(sp)
    696c:	dd000417 	ldw	r20,16(sp)
    6970:	dcc00317 	ldw	r19,12(sp)
    6974:	dc800217 	ldw	r18,8(sp)
    6978:	dc400117 	ldw	r17,4(sp)
    697c:	dc000017 	ldw	r16,0(sp)
    6980:	dec00904 	addi	sp,sp,36
    6984:	f800283a 	ret

00006988 <__fp_lock>:
    6988:	0005883a 	mov	r2,zero
    698c:	f800283a 	ret

00006990 <__sfmoreglue>:
    6990:	defffc04 	addi	sp,sp,-16
    6994:	dc400115 	stw	r17,4(sp)
    6998:	2c7fffc4 	addi	r17,r5,-1
    699c:	8c401a24 	muli	r17,r17,104
    69a0:	dc800215 	stw	r18,8(sp)
    69a4:	2825883a 	mov	r18,r5
    69a8:	89401d04 	addi	r5,r17,116
    69ac:	dc000015 	stw	r16,0(sp)
    69b0:	dfc00315 	stw	ra,12(sp)
    69b4:	0001e4c0 	call	1e4c <_malloc_r>
    69b8:	1021883a 	mov	r16,r2
    69bc:	10000726 	beq	r2,zero,69dc <__sfmoreglue+0x4c>
    69c0:	11000304 	addi	r4,r2,12
    69c4:	10000015 	stw	zero,0(r2)
    69c8:	14800115 	stw	r18,4(r2)
    69cc:	11000215 	stw	r4,8(r2)
    69d0:	89801a04 	addi	r6,r17,104
    69d4:	000b883a 	mov	r5,zero
    69d8:	0007c100 	call	7c10 <memset>
    69dc:	8005883a 	mov	r2,r16
    69e0:	dfc00317 	ldw	ra,12(sp)
    69e4:	dc800217 	ldw	r18,8(sp)
    69e8:	dc400117 	ldw	r17,4(sp)
    69ec:	dc000017 	ldw	r16,0(sp)
    69f0:	dec00404 	addi	sp,sp,16
    69f4:	f800283a 	ret

000069f8 <__sfp>:
    69f8:	defffb04 	addi	sp,sp,-20
    69fc:	dc000015 	stw	r16,0(sp)
    6a00:	04000074 	movhi	r16,1
    6a04:	840cd804 	addi	r16,r16,13152
    6a08:	dcc00315 	stw	r19,12(sp)
    6a0c:	2027883a 	mov	r19,r4
    6a10:	81000017 	ldw	r4,0(r16)
    6a14:	dfc00415 	stw	ra,16(sp)
    6a18:	dc800215 	stw	r18,8(sp)
    6a1c:	20800e17 	ldw	r2,56(r4)
    6a20:	dc400115 	stw	r17,4(sp)
    6a24:	1000021e 	bne	r2,zero,6a30 <__sfp+0x38>
    6a28:	00067ec0 	call	67ec <__sinit.part.1>
    6a2c:	81000017 	ldw	r4,0(r16)
    6a30:	2480b804 	addi	r18,r4,736
    6a34:	047fffc4 	movi	r17,-1
    6a38:	91000117 	ldw	r4,4(r18)
    6a3c:	94000217 	ldw	r16,8(r18)
    6a40:	213fffc4 	addi	r4,r4,-1
    6a44:	20000a16 	blt	r4,zero,6a70 <__sfp+0x78>
    6a48:	8080030f 	ldh	r2,12(r16)
    6a4c:	10000c26 	beq	r2,zero,6a80 <__sfp+0x88>
    6a50:	80c01d04 	addi	r3,r16,116
    6a54:	00000206 	br	6a60 <__sfp+0x68>
    6a58:	18bfe60f 	ldh	r2,-104(r3)
    6a5c:	10000826 	beq	r2,zero,6a80 <__sfp+0x88>
    6a60:	213fffc4 	addi	r4,r4,-1
    6a64:	1c3ffd04 	addi	r16,r3,-12
    6a68:	18c01a04 	addi	r3,r3,104
    6a6c:	247ffa1e 	bne	r4,r17,6a58 <__alt_data_end+0xff006a58>
    6a70:	90800017 	ldw	r2,0(r18)
    6a74:	10001d26 	beq	r2,zero,6aec <__sfp+0xf4>
    6a78:	1025883a 	mov	r18,r2
    6a7c:	003fee06 	br	6a38 <__alt_data_end+0xff006a38>
    6a80:	00bfffc4 	movi	r2,-1
    6a84:	8080038d 	sth	r2,14(r16)
    6a88:	00800044 	movi	r2,1
    6a8c:	8080030d 	sth	r2,12(r16)
    6a90:	80001915 	stw	zero,100(r16)
    6a94:	80000015 	stw	zero,0(r16)
    6a98:	80000215 	stw	zero,8(r16)
    6a9c:	80000115 	stw	zero,4(r16)
    6aa0:	80000415 	stw	zero,16(r16)
    6aa4:	80000515 	stw	zero,20(r16)
    6aa8:	80000615 	stw	zero,24(r16)
    6aac:	01800204 	movi	r6,8
    6ab0:	000b883a 	mov	r5,zero
    6ab4:	81001704 	addi	r4,r16,92
    6ab8:	0007c100 	call	7c10 <memset>
    6abc:	8005883a 	mov	r2,r16
    6ac0:	80000c15 	stw	zero,48(r16)
    6ac4:	80000d15 	stw	zero,52(r16)
    6ac8:	80001115 	stw	zero,68(r16)
    6acc:	80001215 	stw	zero,72(r16)
    6ad0:	dfc00417 	ldw	ra,16(sp)
    6ad4:	dcc00317 	ldw	r19,12(sp)
    6ad8:	dc800217 	ldw	r18,8(sp)
    6adc:	dc400117 	ldw	r17,4(sp)
    6ae0:	dc000017 	ldw	r16,0(sp)
    6ae4:	dec00504 	addi	sp,sp,20
    6ae8:	f800283a 	ret
    6aec:	01400104 	movi	r5,4
    6af0:	9809883a 	mov	r4,r19
    6af4:	00069900 	call	6990 <__sfmoreglue>
    6af8:	90800015 	stw	r2,0(r18)
    6afc:	103fde1e 	bne	r2,zero,6a78 <__alt_data_end+0xff006a78>
    6b00:	00800304 	movi	r2,12
    6b04:	98800015 	stw	r2,0(r19)
    6b08:	0005883a 	mov	r2,zero
    6b0c:	003ff006 	br	6ad0 <__alt_data_end+0xff006ad0>

00006b10 <_cleanup>:
    6b10:	00800074 	movhi	r2,1
    6b14:	108cd804 	addi	r2,r2,13152
    6b18:	11000017 	ldw	r4,0(r2)
    6b1c:	01400074 	movhi	r5,1
    6b20:	296b3904 	addi	r5,r5,-21276
    6b24:	000752c1 	jmpi	752c <_fwalk_reent>

00006b28 <__sinit>:
    6b28:	20800e17 	ldw	r2,56(r4)
    6b2c:	10000126 	beq	r2,zero,6b34 <__sinit+0xc>
    6b30:	f800283a 	ret
    6b34:	00067ec1 	jmpi	67ec <__sinit.part.1>

00006b38 <__sfp_lock_acquire>:
    6b38:	f800283a 	ret

00006b3c <__sfp_lock_release>:
    6b3c:	f800283a 	ret

00006b40 <__sinit_lock_acquire>:
    6b40:	f800283a 	ret

00006b44 <__sinit_lock_release>:
    6b44:	f800283a 	ret

00006b48 <__fp_lock_all>:
    6b48:	00800074 	movhi	r2,1
    6b4c:	108cd904 	addi	r2,r2,13156
    6b50:	11000017 	ldw	r4,0(r2)
    6b54:	01400034 	movhi	r5,0
    6b58:	295a6204 	addi	r5,r5,27016
    6b5c:	00074681 	jmpi	7468 <_fwalk>

00006b60 <__fp_unlock_all>:
    6b60:	00800074 	movhi	r2,1
    6b64:	108cd904 	addi	r2,r2,13156
    6b68:	11000017 	ldw	r4,0(r2)
    6b6c:	01400034 	movhi	r5,0
    6b70:	2959f604 	addi	r5,r5,26584
    6b74:	00074681 	jmpi	7468 <_fwalk>

00006b78 <_malloc_trim_r>:
    6b78:	defffb04 	addi	sp,sp,-20
    6b7c:	dcc00315 	stw	r19,12(sp)
    6b80:	04c00074 	movhi	r19,1
    6b84:	dc800215 	stw	r18,8(sp)
    6b88:	dc400115 	stw	r17,4(sp)
    6b8c:	dc000015 	stw	r16,0(sp)
    6b90:	dfc00415 	stw	ra,16(sp)
    6b94:	2821883a 	mov	r16,r5
    6b98:	9cc62b04 	addi	r19,r19,6316
    6b9c:	2025883a 	mov	r18,r4
    6ba0:	000eb340 	call	eb34 <__malloc_lock>
    6ba4:	98800217 	ldw	r2,8(r19)
    6ba8:	14400117 	ldw	r17,4(r2)
    6bac:	00bfff04 	movi	r2,-4
    6bb0:	88a2703a 	and	r17,r17,r2
    6bb4:	8c21c83a 	sub	r16,r17,r16
    6bb8:	8403fbc4 	addi	r16,r16,4079
    6bbc:	8020d33a 	srli	r16,r16,12
    6bc0:	0083ffc4 	movi	r2,4095
    6bc4:	843fffc4 	addi	r16,r16,-1
    6bc8:	8020933a 	slli	r16,r16,12
    6bcc:	1400060e 	bge	r2,r16,6be8 <_malloc_trim_r+0x70>
    6bd0:	000b883a 	mov	r5,zero
    6bd4:	9009883a 	mov	r4,r18
    6bd8:	00027980 	call	2798 <_sbrk_r>
    6bdc:	98c00217 	ldw	r3,8(r19)
    6be0:	1c47883a 	add	r3,r3,r17
    6be4:	10c00a26 	beq	r2,r3,6c10 <_malloc_trim_r+0x98>
    6be8:	9009883a 	mov	r4,r18
    6bec:	000eb580 	call	eb58 <__malloc_unlock>
    6bf0:	0005883a 	mov	r2,zero
    6bf4:	dfc00417 	ldw	ra,16(sp)
    6bf8:	dcc00317 	ldw	r19,12(sp)
    6bfc:	dc800217 	ldw	r18,8(sp)
    6c00:	dc400117 	ldw	r17,4(sp)
    6c04:	dc000017 	ldw	r16,0(sp)
    6c08:	dec00504 	addi	sp,sp,20
    6c0c:	f800283a 	ret
    6c10:	040bc83a 	sub	r5,zero,r16
    6c14:	9009883a 	mov	r4,r18
    6c18:	00027980 	call	2798 <_sbrk_r>
    6c1c:	00ffffc4 	movi	r3,-1
    6c20:	10c00d26 	beq	r2,r3,6c58 <_malloc_trim_r+0xe0>
    6c24:	00c00074 	movhi	r3,1
    6c28:	18d40304 	addi	r3,r3,20492
    6c2c:	18800017 	ldw	r2,0(r3)
    6c30:	99000217 	ldw	r4,8(r19)
    6c34:	8c23c83a 	sub	r17,r17,r16
    6c38:	8c400054 	ori	r17,r17,1
    6c3c:	1421c83a 	sub	r16,r2,r16
    6c40:	24400115 	stw	r17,4(r4)
    6c44:	9009883a 	mov	r4,r18
    6c48:	1c000015 	stw	r16,0(r3)
    6c4c:	000eb580 	call	eb58 <__malloc_unlock>
    6c50:	00800044 	movi	r2,1
    6c54:	003fe706 	br	6bf4 <__alt_data_end+0xff006bf4>
    6c58:	000b883a 	mov	r5,zero
    6c5c:	9009883a 	mov	r4,r18
    6c60:	00027980 	call	2798 <_sbrk_r>
    6c64:	99000217 	ldw	r4,8(r19)
    6c68:	014003c4 	movi	r5,15
    6c6c:	1107c83a 	sub	r3,r2,r4
    6c70:	28ffdd0e 	bge	r5,r3,6be8 <__alt_data_end+0xff006be8>
    6c74:	01400074 	movhi	r5,1
    6c78:	294cd604 	addi	r5,r5,13144
    6c7c:	29400017 	ldw	r5,0(r5)
    6c80:	18c00054 	ori	r3,r3,1
    6c84:	20c00115 	stw	r3,4(r4)
    6c88:	00c00074 	movhi	r3,1
    6c8c:	1145c83a 	sub	r2,r2,r5
    6c90:	18d40304 	addi	r3,r3,20492
    6c94:	18800015 	stw	r2,0(r3)
    6c98:	003fd306 	br	6be8 <__alt_data_end+0xff006be8>

00006c9c <_free_r>:
    6c9c:	28004126 	beq	r5,zero,6da4 <_free_r+0x108>
    6ca0:	defffd04 	addi	sp,sp,-12
    6ca4:	dc400115 	stw	r17,4(sp)
    6ca8:	dc000015 	stw	r16,0(sp)
    6cac:	2023883a 	mov	r17,r4
    6cb0:	2821883a 	mov	r16,r5
    6cb4:	dfc00215 	stw	ra,8(sp)
    6cb8:	000eb340 	call	eb34 <__malloc_lock>
    6cbc:	81ffff17 	ldw	r7,-4(r16)
    6cc0:	00bfff84 	movi	r2,-2
    6cc4:	01000074 	movhi	r4,1
    6cc8:	81bffe04 	addi	r6,r16,-8
    6ccc:	3884703a 	and	r2,r7,r2
    6cd0:	21062b04 	addi	r4,r4,6316
    6cd4:	308b883a 	add	r5,r6,r2
    6cd8:	2a400117 	ldw	r9,4(r5)
    6cdc:	22000217 	ldw	r8,8(r4)
    6ce0:	00ffff04 	movi	r3,-4
    6ce4:	48c6703a 	and	r3,r9,r3
    6ce8:	2a005726 	beq	r5,r8,6e48 <_free_r+0x1ac>
    6cec:	28c00115 	stw	r3,4(r5)
    6cf0:	39c0004c 	andi	r7,r7,1
    6cf4:	3800091e 	bne	r7,zero,6d1c <_free_r+0x80>
    6cf8:	823ffe17 	ldw	r8,-8(r16)
    6cfc:	22400204 	addi	r9,r4,8
    6d00:	320dc83a 	sub	r6,r6,r8
    6d04:	31c00217 	ldw	r7,8(r6)
    6d08:	1205883a 	add	r2,r2,r8
    6d0c:	3a406526 	beq	r7,r9,6ea4 <_free_r+0x208>
    6d10:	32000317 	ldw	r8,12(r6)
    6d14:	3a000315 	stw	r8,12(r7)
    6d18:	41c00215 	stw	r7,8(r8)
    6d1c:	28cf883a 	add	r7,r5,r3
    6d20:	39c00117 	ldw	r7,4(r7)
    6d24:	39c0004c 	andi	r7,r7,1
    6d28:	38003a26 	beq	r7,zero,6e14 <_free_r+0x178>
    6d2c:	10c00054 	ori	r3,r2,1
    6d30:	30c00115 	stw	r3,4(r6)
    6d34:	3087883a 	add	r3,r6,r2
    6d38:	18800015 	stw	r2,0(r3)
    6d3c:	00c07fc4 	movi	r3,511
    6d40:	18801936 	bltu	r3,r2,6da8 <_free_r+0x10c>
    6d44:	1004d0fa 	srli	r2,r2,3
    6d48:	01c00044 	movi	r7,1
    6d4c:	21400117 	ldw	r5,4(r4)
    6d50:	10c00044 	addi	r3,r2,1
    6d54:	18c7883a 	add	r3,r3,r3
    6d58:	1005d0ba 	srai	r2,r2,2
    6d5c:	18c7883a 	add	r3,r3,r3
    6d60:	18c7883a 	add	r3,r3,r3
    6d64:	1907883a 	add	r3,r3,r4
    6d68:	3884983a 	sll	r2,r7,r2
    6d6c:	19c00017 	ldw	r7,0(r3)
    6d70:	1a3ffe04 	addi	r8,r3,-8
    6d74:	1144b03a 	or	r2,r2,r5
    6d78:	32000315 	stw	r8,12(r6)
    6d7c:	31c00215 	stw	r7,8(r6)
    6d80:	20800115 	stw	r2,4(r4)
    6d84:	19800015 	stw	r6,0(r3)
    6d88:	39800315 	stw	r6,12(r7)
    6d8c:	8809883a 	mov	r4,r17
    6d90:	dfc00217 	ldw	ra,8(sp)
    6d94:	dc400117 	ldw	r17,4(sp)
    6d98:	dc000017 	ldw	r16,0(sp)
    6d9c:	dec00304 	addi	sp,sp,12
    6da0:	000eb581 	jmpi	eb58 <__malloc_unlock>
    6da4:	f800283a 	ret
    6da8:	100ad27a 	srli	r5,r2,9
    6dac:	00c00104 	movi	r3,4
    6db0:	19404a36 	bltu	r3,r5,6edc <_free_r+0x240>
    6db4:	100ad1ba 	srli	r5,r2,6
    6db8:	28c00e44 	addi	r3,r5,57
    6dbc:	18c7883a 	add	r3,r3,r3
    6dc0:	29400e04 	addi	r5,r5,56
    6dc4:	18c7883a 	add	r3,r3,r3
    6dc8:	18c7883a 	add	r3,r3,r3
    6dcc:	1909883a 	add	r4,r3,r4
    6dd0:	20c00017 	ldw	r3,0(r4)
    6dd4:	01c00074 	movhi	r7,1
    6dd8:	213ffe04 	addi	r4,r4,-8
    6ddc:	39c62b04 	addi	r7,r7,6316
    6de0:	20c04426 	beq	r4,r3,6ef4 <_free_r+0x258>
    6de4:	01ffff04 	movi	r7,-4
    6de8:	19400117 	ldw	r5,4(r3)
    6dec:	29ca703a 	and	r5,r5,r7
    6df0:	1140022e 	bgeu	r2,r5,6dfc <_free_r+0x160>
    6df4:	18c00217 	ldw	r3,8(r3)
    6df8:	20fffb1e 	bne	r4,r3,6de8 <__alt_data_end+0xff006de8>
    6dfc:	19000317 	ldw	r4,12(r3)
    6e00:	31000315 	stw	r4,12(r6)
    6e04:	30c00215 	stw	r3,8(r6)
    6e08:	21800215 	stw	r6,8(r4)
    6e0c:	19800315 	stw	r6,12(r3)
    6e10:	003fde06 	br	6d8c <__alt_data_end+0xff006d8c>
    6e14:	29c00217 	ldw	r7,8(r5)
    6e18:	10c5883a 	add	r2,r2,r3
    6e1c:	00c00074 	movhi	r3,1
    6e20:	18c62d04 	addi	r3,r3,6324
    6e24:	38c03b26 	beq	r7,r3,6f14 <_free_r+0x278>
    6e28:	2a000317 	ldw	r8,12(r5)
    6e2c:	11400054 	ori	r5,r2,1
    6e30:	3087883a 	add	r3,r6,r2
    6e34:	3a000315 	stw	r8,12(r7)
    6e38:	41c00215 	stw	r7,8(r8)
    6e3c:	31400115 	stw	r5,4(r6)
    6e40:	18800015 	stw	r2,0(r3)
    6e44:	003fbd06 	br	6d3c <__alt_data_end+0xff006d3c>
    6e48:	39c0004c 	andi	r7,r7,1
    6e4c:	10c5883a 	add	r2,r2,r3
    6e50:	3800071e 	bne	r7,zero,6e70 <_free_r+0x1d4>
    6e54:	81fffe17 	ldw	r7,-8(r16)
    6e58:	31cdc83a 	sub	r6,r6,r7
    6e5c:	30c00317 	ldw	r3,12(r6)
    6e60:	31400217 	ldw	r5,8(r6)
    6e64:	11c5883a 	add	r2,r2,r7
    6e68:	28c00315 	stw	r3,12(r5)
    6e6c:	19400215 	stw	r5,8(r3)
    6e70:	10c00054 	ori	r3,r2,1
    6e74:	30c00115 	stw	r3,4(r6)
    6e78:	00c00074 	movhi	r3,1
    6e7c:	18ccd704 	addi	r3,r3,13148
    6e80:	18c00017 	ldw	r3,0(r3)
    6e84:	21800215 	stw	r6,8(r4)
    6e88:	10ffc036 	bltu	r2,r3,6d8c <__alt_data_end+0xff006d8c>
    6e8c:	00800074 	movhi	r2,1
    6e90:	1093f504 	addi	r2,r2,20436
    6e94:	11400017 	ldw	r5,0(r2)
    6e98:	8809883a 	mov	r4,r17
    6e9c:	0006b780 	call	6b78 <_malloc_trim_r>
    6ea0:	003fba06 	br	6d8c <__alt_data_end+0xff006d8c>
    6ea4:	28c9883a 	add	r4,r5,r3
    6ea8:	21000117 	ldw	r4,4(r4)
    6eac:	2100004c 	andi	r4,r4,1
    6eb0:	2000391e 	bne	r4,zero,6f98 <_free_r+0x2fc>
    6eb4:	29c00217 	ldw	r7,8(r5)
    6eb8:	29000317 	ldw	r4,12(r5)
    6ebc:	1885883a 	add	r2,r3,r2
    6ec0:	10c00054 	ori	r3,r2,1
    6ec4:	39000315 	stw	r4,12(r7)
    6ec8:	21c00215 	stw	r7,8(r4)
    6ecc:	30c00115 	stw	r3,4(r6)
    6ed0:	308d883a 	add	r6,r6,r2
    6ed4:	30800015 	stw	r2,0(r6)
    6ed8:	003fac06 	br	6d8c <__alt_data_end+0xff006d8c>
    6edc:	00c00504 	movi	r3,20
    6ee0:	19401536 	bltu	r3,r5,6f38 <_free_r+0x29c>
    6ee4:	28c01704 	addi	r3,r5,92
    6ee8:	18c7883a 	add	r3,r3,r3
    6eec:	294016c4 	addi	r5,r5,91
    6ef0:	003fb406 	br	6dc4 <__alt_data_end+0xff006dc4>
    6ef4:	280bd0ba 	srai	r5,r5,2
    6ef8:	00c00044 	movi	r3,1
    6efc:	38800117 	ldw	r2,4(r7)
    6f00:	194a983a 	sll	r5,r3,r5
    6f04:	2007883a 	mov	r3,r4
    6f08:	2884b03a 	or	r2,r5,r2
    6f0c:	38800115 	stw	r2,4(r7)
    6f10:	003fbb06 	br	6e00 <__alt_data_end+0xff006e00>
    6f14:	21800515 	stw	r6,20(r4)
    6f18:	21800415 	stw	r6,16(r4)
    6f1c:	10c00054 	ori	r3,r2,1
    6f20:	31c00315 	stw	r7,12(r6)
    6f24:	31c00215 	stw	r7,8(r6)
    6f28:	30c00115 	stw	r3,4(r6)
    6f2c:	308d883a 	add	r6,r6,r2
    6f30:	30800015 	stw	r2,0(r6)
    6f34:	003f9506 	br	6d8c <__alt_data_end+0xff006d8c>
    6f38:	00c01504 	movi	r3,84
    6f3c:	19400536 	bltu	r3,r5,6f54 <_free_r+0x2b8>
    6f40:	100ad33a 	srli	r5,r2,12
    6f44:	28c01bc4 	addi	r3,r5,111
    6f48:	18c7883a 	add	r3,r3,r3
    6f4c:	29401b84 	addi	r5,r5,110
    6f50:	003f9c06 	br	6dc4 <__alt_data_end+0xff006dc4>
    6f54:	00c05504 	movi	r3,340
    6f58:	19400536 	bltu	r3,r5,6f70 <_free_r+0x2d4>
    6f5c:	100ad3fa 	srli	r5,r2,15
    6f60:	28c01e04 	addi	r3,r5,120
    6f64:	18c7883a 	add	r3,r3,r3
    6f68:	29401dc4 	addi	r5,r5,119
    6f6c:	003f9506 	br	6dc4 <__alt_data_end+0xff006dc4>
    6f70:	00c15504 	movi	r3,1364
    6f74:	19400536 	bltu	r3,r5,6f8c <_free_r+0x2f0>
    6f78:	100ad4ba 	srli	r5,r2,18
    6f7c:	28c01f44 	addi	r3,r5,125
    6f80:	18c7883a 	add	r3,r3,r3
    6f84:	29401f04 	addi	r5,r5,124
    6f88:	003f8e06 	br	6dc4 <__alt_data_end+0xff006dc4>
    6f8c:	00c03f84 	movi	r3,254
    6f90:	01401f84 	movi	r5,126
    6f94:	003f8b06 	br	6dc4 <__alt_data_end+0xff006dc4>
    6f98:	10c00054 	ori	r3,r2,1
    6f9c:	30c00115 	stw	r3,4(r6)
    6fa0:	308d883a 	add	r6,r6,r2
    6fa4:	30800015 	stw	r2,0(r6)
    6fa8:	003f7806 	br	6d8c <__alt_data_end+0xff006d8c>

00006fac <__sfvwrite_r>:
    6fac:	30800217 	ldw	r2,8(r6)
    6fb0:	10006726 	beq	r2,zero,7150 <__sfvwrite_r+0x1a4>
    6fb4:	28c0030b 	ldhu	r3,12(r5)
    6fb8:	defff404 	addi	sp,sp,-48
    6fbc:	dd400715 	stw	r21,28(sp)
    6fc0:	dd000615 	stw	r20,24(sp)
    6fc4:	dc000215 	stw	r16,8(sp)
    6fc8:	dfc00b15 	stw	ra,44(sp)
    6fcc:	df000a15 	stw	fp,40(sp)
    6fd0:	ddc00915 	stw	r23,36(sp)
    6fd4:	dd800815 	stw	r22,32(sp)
    6fd8:	dcc00515 	stw	r19,20(sp)
    6fdc:	dc800415 	stw	r18,16(sp)
    6fe0:	dc400315 	stw	r17,12(sp)
    6fe4:	1880020c 	andi	r2,r3,8
    6fe8:	2821883a 	mov	r16,r5
    6fec:	202b883a 	mov	r21,r4
    6ff0:	3029883a 	mov	r20,r6
    6ff4:	10002726 	beq	r2,zero,7094 <__sfvwrite_r+0xe8>
    6ff8:	28800417 	ldw	r2,16(r5)
    6ffc:	10002526 	beq	r2,zero,7094 <__sfvwrite_r+0xe8>
    7000:	1880008c 	andi	r2,r3,2
    7004:	a4400017 	ldw	r17,0(r20)
    7008:	10002a26 	beq	r2,zero,70b4 <__sfvwrite_r+0x108>
    700c:	05a00034 	movhi	r22,32768
    7010:	0027883a 	mov	r19,zero
    7014:	0025883a 	mov	r18,zero
    7018:	b5bf0004 	addi	r22,r22,-1024
    701c:	980d883a 	mov	r6,r19
    7020:	a809883a 	mov	r4,r21
    7024:	90004626 	beq	r18,zero,7140 <__sfvwrite_r+0x194>
    7028:	900f883a 	mov	r7,r18
    702c:	b480022e 	bgeu	r22,r18,7038 <__sfvwrite_r+0x8c>
    7030:	01e00034 	movhi	r7,32768
    7034:	39ff0004 	addi	r7,r7,-1024
    7038:	80800917 	ldw	r2,36(r16)
    703c:	81400717 	ldw	r5,28(r16)
    7040:	103ee83a 	callr	r2
    7044:	0080570e 	bge	zero,r2,71a4 <__sfvwrite_r+0x1f8>
    7048:	a0c00217 	ldw	r3,8(r20)
    704c:	98a7883a 	add	r19,r19,r2
    7050:	90a5c83a 	sub	r18,r18,r2
    7054:	1885c83a 	sub	r2,r3,r2
    7058:	a0800215 	stw	r2,8(r20)
    705c:	103fef1e 	bne	r2,zero,701c <__alt_data_end+0xff00701c>
    7060:	0005883a 	mov	r2,zero
    7064:	dfc00b17 	ldw	ra,44(sp)
    7068:	df000a17 	ldw	fp,40(sp)
    706c:	ddc00917 	ldw	r23,36(sp)
    7070:	dd800817 	ldw	r22,32(sp)
    7074:	dd400717 	ldw	r21,28(sp)
    7078:	dd000617 	ldw	r20,24(sp)
    707c:	dcc00517 	ldw	r19,20(sp)
    7080:	dc800417 	ldw	r18,16(sp)
    7084:	dc400317 	ldw	r17,12(sp)
    7088:	dc000217 	ldw	r16,8(sp)
    708c:	dec00c04 	addi	sp,sp,48
    7090:	f800283a 	ret
    7094:	800b883a 	mov	r5,r16
    7098:	a809883a 	mov	r4,r21
    709c:	0004b540 	call	4b54 <__swsetup_r>
    70a0:	1000eb1e 	bne	r2,zero,7450 <__sfvwrite_r+0x4a4>
    70a4:	80c0030b 	ldhu	r3,12(r16)
    70a8:	a4400017 	ldw	r17,0(r20)
    70ac:	1880008c 	andi	r2,r3,2
    70b0:	103fd61e 	bne	r2,zero,700c <__alt_data_end+0xff00700c>
    70b4:	1880004c 	andi	r2,r3,1
    70b8:	10003f1e 	bne	r2,zero,71b8 <__sfvwrite_r+0x20c>
    70bc:	0039883a 	mov	fp,zero
    70c0:	0025883a 	mov	r18,zero
    70c4:	90001a26 	beq	r18,zero,7130 <__sfvwrite_r+0x184>
    70c8:	1880800c 	andi	r2,r3,512
    70cc:	84c00217 	ldw	r19,8(r16)
    70d0:	10002126 	beq	r2,zero,7158 <__sfvwrite_r+0x1ac>
    70d4:	982f883a 	mov	r23,r19
    70d8:	94c09336 	bltu	r18,r19,7328 <__sfvwrite_r+0x37c>
    70dc:	1881200c 	andi	r2,r3,1152
    70e0:	10009e1e 	bne	r2,zero,735c <__sfvwrite_r+0x3b0>
    70e4:	81000017 	ldw	r4,0(r16)
    70e8:	b80d883a 	mov	r6,r23
    70ec:	e00b883a 	mov	r5,fp
    70f0:	0007ab40 	call	7ab4 <memmove>
    70f4:	80c00217 	ldw	r3,8(r16)
    70f8:	81000017 	ldw	r4,0(r16)
    70fc:	9005883a 	mov	r2,r18
    7100:	1ce7c83a 	sub	r19,r3,r19
    7104:	25cf883a 	add	r7,r4,r23
    7108:	84c00215 	stw	r19,8(r16)
    710c:	81c00015 	stw	r7,0(r16)
    7110:	a0c00217 	ldw	r3,8(r20)
    7114:	e0b9883a 	add	fp,fp,r2
    7118:	90a5c83a 	sub	r18,r18,r2
    711c:	18a7c83a 	sub	r19,r3,r2
    7120:	a4c00215 	stw	r19,8(r20)
    7124:	983fce26 	beq	r19,zero,7060 <__alt_data_end+0xff007060>
    7128:	80c0030b 	ldhu	r3,12(r16)
    712c:	903fe61e 	bne	r18,zero,70c8 <__alt_data_end+0xff0070c8>
    7130:	8f000017 	ldw	fp,0(r17)
    7134:	8c800117 	ldw	r18,4(r17)
    7138:	8c400204 	addi	r17,r17,8
    713c:	003fe106 	br	70c4 <__alt_data_end+0xff0070c4>
    7140:	8cc00017 	ldw	r19,0(r17)
    7144:	8c800117 	ldw	r18,4(r17)
    7148:	8c400204 	addi	r17,r17,8
    714c:	003fb306 	br	701c <__alt_data_end+0xff00701c>
    7150:	0005883a 	mov	r2,zero
    7154:	f800283a 	ret
    7158:	81000017 	ldw	r4,0(r16)
    715c:	80800417 	ldw	r2,16(r16)
    7160:	11005736 	bltu	r2,r4,72c0 <__sfvwrite_r+0x314>
    7164:	85c00517 	ldw	r23,20(r16)
    7168:	95c05536 	bltu	r18,r23,72c0 <__sfvwrite_r+0x314>
    716c:	00a00034 	movhi	r2,32768
    7170:	10bfffc4 	addi	r2,r2,-1
    7174:	9009883a 	mov	r4,r18
    7178:	1480012e 	bgeu	r2,r18,7180 <__sfvwrite_r+0x1d4>
    717c:	1009883a 	mov	r4,r2
    7180:	b80b883a 	mov	r5,r23
    7184:	0001c700 	call	1c70 <__divsi3>
    7188:	15cf383a 	mul	r7,r2,r23
    718c:	81400717 	ldw	r5,28(r16)
    7190:	80800917 	ldw	r2,36(r16)
    7194:	e00d883a 	mov	r6,fp
    7198:	a809883a 	mov	r4,r21
    719c:	103ee83a 	callr	r2
    71a0:	00bfdb16 	blt	zero,r2,7110 <__alt_data_end+0xff007110>
    71a4:	8080030b 	ldhu	r2,12(r16)
    71a8:	10801014 	ori	r2,r2,64
    71ac:	8080030d 	sth	r2,12(r16)
    71b0:	00bfffc4 	movi	r2,-1
    71b4:	003fab06 	br	7064 <__alt_data_end+0xff007064>
    71b8:	0027883a 	mov	r19,zero
    71bc:	0011883a 	mov	r8,zero
    71c0:	0039883a 	mov	fp,zero
    71c4:	0025883a 	mov	r18,zero
    71c8:	90001f26 	beq	r18,zero,7248 <__sfvwrite_r+0x29c>
    71cc:	40005a26 	beq	r8,zero,7338 <__sfvwrite_r+0x38c>
    71d0:	982d883a 	mov	r22,r19
    71d4:	94c0012e 	bgeu	r18,r19,71dc <__sfvwrite_r+0x230>
    71d8:	902d883a 	mov	r22,r18
    71dc:	81000017 	ldw	r4,0(r16)
    71e0:	80800417 	ldw	r2,16(r16)
    71e4:	b02f883a 	mov	r23,r22
    71e8:	81c00517 	ldw	r7,20(r16)
    71ec:	1100032e 	bgeu	r2,r4,71fc <__sfvwrite_r+0x250>
    71f0:	80c00217 	ldw	r3,8(r16)
    71f4:	38c7883a 	add	r3,r7,r3
    71f8:	1d801816 	blt	r3,r22,725c <__sfvwrite_r+0x2b0>
    71fc:	b1c03e16 	blt	r22,r7,72f8 <__sfvwrite_r+0x34c>
    7200:	80800917 	ldw	r2,36(r16)
    7204:	81400717 	ldw	r5,28(r16)
    7208:	e00d883a 	mov	r6,fp
    720c:	da000115 	stw	r8,4(sp)
    7210:	a809883a 	mov	r4,r21
    7214:	103ee83a 	callr	r2
    7218:	102f883a 	mov	r23,r2
    721c:	da000117 	ldw	r8,4(sp)
    7220:	00bfe00e 	bge	zero,r2,71a4 <__alt_data_end+0xff0071a4>
    7224:	9de7c83a 	sub	r19,r19,r23
    7228:	98001f26 	beq	r19,zero,72a8 <__sfvwrite_r+0x2fc>
    722c:	a0800217 	ldw	r2,8(r20)
    7230:	e5f9883a 	add	fp,fp,r23
    7234:	95e5c83a 	sub	r18,r18,r23
    7238:	15efc83a 	sub	r23,r2,r23
    723c:	a5c00215 	stw	r23,8(r20)
    7240:	b83f8726 	beq	r23,zero,7060 <__alt_data_end+0xff007060>
    7244:	903fe11e 	bne	r18,zero,71cc <__alt_data_end+0xff0071cc>
    7248:	8f000017 	ldw	fp,0(r17)
    724c:	8c800117 	ldw	r18,4(r17)
    7250:	0011883a 	mov	r8,zero
    7254:	8c400204 	addi	r17,r17,8
    7258:	003fdb06 	br	71c8 <__alt_data_end+0xff0071c8>
    725c:	180d883a 	mov	r6,r3
    7260:	e00b883a 	mov	r5,fp
    7264:	da000115 	stw	r8,4(sp)
    7268:	d8c00015 	stw	r3,0(sp)
    726c:	0007ab40 	call	7ab4 <memmove>
    7270:	d8c00017 	ldw	r3,0(sp)
    7274:	80800017 	ldw	r2,0(r16)
    7278:	800b883a 	mov	r5,r16
    727c:	a809883a 	mov	r4,r21
    7280:	10c5883a 	add	r2,r2,r3
    7284:	80800015 	stw	r2,0(r16)
    7288:	d8c00015 	stw	r3,0(sp)
    728c:	000674c0 	call	674c <_fflush_r>
    7290:	d8c00017 	ldw	r3,0(sp)
    7294:	da000117 	ldw	r8,4(sp)
    7298:	103fc21e 	bne	r2,zero,71a4 <__alt_data_end+0xff0071a4>
    729c:	182f883a 	mov	r23,r3
    72a0:	9de7c83a 	sub	r19,r19,r23
    72a4:	983fe11e 	bne	r19,zero,722c <__alt_data_end+0xff00722c>
    72a8:	800b883a 	mov	r5,r16
    72ac:	a809883a 	mov	r4,r21
    72b0:	000674c0 	call	674c <_fflush_r>
    72b4:	103fbb1e 	bne	r2,zero,71a4 <__alt_data_end+0xff0071a4>
    72b8:	0011883a 	mov	r8,zero
    72bc:	003fdb06 	br	722c <__alt_data_end+0xff00722c>
    72c0:	94c0012e 	bgeu	r18,r19,72c8 <__sfvwrite_r+0x31c>
    72c4:	9027883a 	mov	r19,r18
    72c8:	980d883a 	mov	r6,r19
    72cc:	e00b883a 	mov	r5,fp
    72d0:	0007ab40 	call	7ab4 <memmove>
    72d4:	80800217 	ldw	r2,8(r16)
    72d8:	80c00017 	ldw	r3,0(r16)
    72dc:	14c5c83a 	sub	r2,r2,r19
    72e0:	1cc7883a 	add	r3,r3,r19
    72e4:	80800215 	stw	r2,8(r16)
    72e8:	80c00015 	stw	r3,0(r16)
    72ec:	10004326 	beq	r2,zero,73fc <__sfvwrite_r+0x450>
    72f0:	9805883a 	mov	r2,r19
    72f4:	003f8606 	br	7110 <__alt_data_end+0xff007110>
    72f8:	b00d883a 	mov	r6,r22
    72fc:	e00b883a 	mov	r5,fp
    7300:	da000115 	stw	r8,4(sp)
    7304:	0007ab40 	call	7ab4 <memmove>
    7308:	80800217 	ldw	r2,8(r16)
    730c:	80c00017 	ldw	r3,0(r16)
    7310:	da000117 	ldw	r8,4(sp)
    7314:	1585c83a 	sub	r2,r2,r22
    7318:	1dad883a 	add	r22,r3,r22
    731c:	80800215 	stw	r2,8(r16)
    7320:	85800015 	stw	r22,0(r16)
    7324:	003fbf06 	br	7224 <__alt_data_end+0xff007224>
    7328:	81000017 	ldw	r4,0(r16)
    732c:	9027883a 	mov	r19,r18
    7330:	902f883a 	mov	r23,r18
    7334:	003f6c06 	br	70e8 <__alt_data_end+0xff0070e8>
    7338:	900d883a 	mov	r6,r18
    733c:	01400284 	movi	r5,10
    7340:	e009883a 	mov	r4,fp
    7344:	00078880 	call	7888 <memchr>
    7348:	10003e26 	beq	r2,zero,7444 <__sfvwrite_r+0x498>
    734c:	10800044 	addi	r2,r2,1
    7350:	1727c83a 	sub	r19,r2,fp
    7354:	02000044 	movi	r8,1
    7358:	003f9d06 	br	71d0 <__alt_data_end+0xff0071d0>
    735c:	80800517 	ldw	r2,20(r16)
    7360:	81400417 	ldw	r5,16(r16)
    7364:	81c00017 	ldw	r7,0(r16)
    7368:	10a7883a 	add	r19,r2,r2
    736c:	9885883a 	add	r2,r19,r2
    7370:	1026d7fa 	srli	r19,r2,31
    7374:	396dc83a 	sub	r22,r7,r5
    7378:	b1000044 	addi	r4,r22,1
    737c:	9885883a 	add	r2,r19,r2
    7380:	1027d07a 	srai	r19,r2,1
    7384:	2485883a 	add	r2,r4,r18
    7388:	980d883a 	mov	r6,r19
    738c:	9880022e 	bgeu	r19,r2,7398 <__sfvwrite_r+0x3ec>
    7390:	1027883a 	mov	r19,r2
    7394:	100d883a 	mov	r6,r2
    7398:	18c1000c 	andi	r3,r3,1024
    739c:	18001c26 	beq	r3,zero,7410 <__sfvwrite_r+0x464>
    73a0:	300b883a 	mov	r5,r6
    73a4:	a809883a 	mov	r4,r21
    73a8:	0001e4c0 	call	1e4c <_malloc_r>
    73ac:	102f883a 	mov	r23,r2
    73b0:	10002926 	beq	r2,zero,7458 <__sfvwrite_r+0x4ac>
    73b4:	81400417 	ldw	r5,16(r16)
    73b8:	b00d883a 	mov	r6,r22
    73bc:	1009883a 	mov	r4,r2
    73c0:	000796c0 	call	796c <memcpy>
    73c4:	8080030b 	ldhu	r2,12(r16)
    73c8:	00fedfc4 	movi	r3,-1153
    73cc:	10c4703a 	and	r2,r2,r3
    73d0:	10802014 	ori	r2,r2,128
    73d4:	8080030d 	sth	r2,12(r16)
    73d8:	bd89883a 	add	r4,r23,r22
    73dc:	9d8fc83a 	sub	r7,r19,r22
    73e0:	85c00415 	stw	r23,16(r16)
    73e4:	84c00515 	stw	r19,20(r16)
    73e8:	81000015 	stw	r4,0(r16)
    73ec:	9027883a 	mov	r19,r18
    73f0:	81c00215 	stw	r7,8(r16)
    73f4:	902f883a 	mov	r23,r18
    73f8:	003f3b06 	br	70e8 <__alt_data_end+0xff0070e8>
    73fc:	800b883a 	mov	r5,r16
    7400:	a809883a 	mov	r4,r21
    7404:	000674c0 	call	674c <_fflush_r>
    7408:	103fb926 	beq	r2,zero,72f0 <__alt_data_end+0xff0072f0>
    740c:	003f6506 	br	71a4 <__alt_data_end+0xff0071a4>
    7410:	a809883a 	mov	r4,r21
    7414:	0008d340 	call	8d34 <_realloc_r>
    7418:	102f883a 	mov	r23,r2
    741c:	103fee1e 	bne	r2,zero,73d8 <__alt_data_end+0xff0073d8>
    7420:	81400417 	ldw	r5,16(r16)
    7424:	a809883a 	mov	r4,r21
    7428:	0006c9c0 	call	6c9c <_free_r>
    742c:	8080030b 	ldhu	r2,12(r16)
    7430:	00ffdfc4 	movi	r3,-129
    7434:	1884703a 	and	r2,r3,r2
    7438:	00c00304 	movi	r3,12
    743c:	a8c00015 	stw	r3,0(r21)
    7440:	003f5906 	br	71a8 <__alt_data_end+0xff0071a8>
    7444:	94c00044 	addi	r19,r18,1
    7448:	02000044 	movi	r8,1
    744c:	003f6006 	br	71d0 <__alt_data_end+0xff0071d0>
    7450:	00bfffc4 	movi	r2,-1
    7454:	003f0306 	br	7064 <__alt_data_end+0xff007064>
    7458:	00800304 	movi	r2,12
    745c:	a8800015 	stw	r2,0(r21)
    7460:	8080030b 	ldhu	r2,12(r16)
    7464:	003f5006 	br	71a8 <__alt_data_end+0xff0071a8>

00007468 <_fwalk>:
    7468:	defff704 	addi	sp,sp,-36
    746c:	dd000415 	stw	r20,16(sp)
    7470:	dfc00815 	stw	ra,32(sp)
    7474:	ddc00715 	stw	r23,28(sp)
    7478:	dd800615 	stw	r22,24(sp)
    747c:	dd400515 	stw	r21,20(sp)
    7480:	dcc00315 	stw	r19,12(sp)
    7484:	dc800215 	stw	r18,8(sp)
    7488:	dc400115 	stw	r17,4(sp)
    748c:	dc000015 	stw	r16,0(sp)
    7490:	2500b804 	addi	r20,r4,736
    7494:	a0002326 	beq	r20,zero,7524 <_fwalk+0xbc>
    7498:	282b883a 	mov	r21,r5
    749c:	002f883a 	mov	r23,zero
    74a0:	05800044 	movi	r22,1
    74a4:	04ffffc4 	movi	r19,-1
    74a8:	a4400117 	ldw	r17,4(r20)
    74ac:	a4800217 	ldw	r18,8(r20)
    74b0:	8c7fffc4 	addi	r17,r17,-1
    74b4:	88000d16 	blt	r17,zero,74ec <_fwalk+0x84>
    74b8:	94000304 	addi	r16,r18,12
    74bc:	94800384 	addi	r18,r18,14
    74c0:	8080000b 	ldhu	r2,0(r16)
    74c4:	8c7fffc4 	addi	r17,r17,-1
    74c8:	813ffd04 	addi	r4,r16,-12
    74cc:	b080042e 	bgeu	r22,r2,74e0 <_fwalk+0x78>
    74d0:	9080000f 	ldh	r2,0(r18)
    74d4:	14c00226 	beq	r2,r19,74e0 <_fwalk+0x78>
    74d8:	a83ee83a 	callr	r21
    74dc:	b8aeb03a 	or	r23,r23,r2
    74e0:	84001a04 	addi	r16,r16,104
    74e4:	94801a04 	addi	r18,r18,104
    74e8:	8cfff51e 	bne	r17,r19,74c0 <__alt_data_end+0xff0074c0>
    74ec:	a5000017 	ldw	r20,0(r20)
    74f0:	a03fed1e 	bne	r20,zero,74a8 <__alt_data_end+0xff0074a8>
    74f4:	b805883a 	mov	r2,r23
    74f8:	dfc00817 	ldw	ra,32(sp)
    74fc:	ddc00717 	ldw	r23,28(sp)
    7500:	dd800617 	ldw	r22,24(sp)
    7504:	dd400517 	ldw	r21,20(sp)
    7508:	dd000417 	ldw	r20,16(sp)
    750c:	dcc00317 	ldw	r19,12(sp)
    7510:	dc800217 	ldw	r18,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00904 	addi	sp,sp,36
    7520:	f800283a 	ret
    7524:	002f883a 	mov	r23,zero
    7528:	003ff206 	br	74f4 <__alt_data_end+0xff0074f4>

0000752c <_fwalk_reent>:
    752c:	defff704 	addi	sp,sp,-36
    7530:	dd000415 	stw	r20,16(sp)
    7534:	dfc00815 	stw	ra,32(sp)
    7538:	ddc00715 	stw	r23,28(sp)
    753c:	dd800615 	stw	r22,24(sp)
    7540:	dd400515 	stw	r21,20(sp)
    7544:	dcc00315 	stw	r19,12(sp)
    7548:	dc800215 	stw	r18,8(sp)
    754c:	dc400115 	stw	r17,4(sp)
    7550:	dc000015 	stw	r16,0(sp)
    7554:	2500b804 	addi	r20,r4,736
    7558:	a0002326 	beq	r20,zero,75e8 <_fwalk_reent+0xbc>
    755c:	282b883a 	mov	r21,r5
    7560:	2027883a 	mov	r19,r4
    7564:	002f883a 	mov	r23,zero
    7568:	05800044 	movi	r22,1
    756c:	04bfffc4 	movi	r18,-1
    7570:	a4400117 	ldw	r17,4(r20)
    7574:	a4000217 	ldw	r16,8(r20)
    7578:	8c7fffc4 	addi	r17,r17,-1
    757c:	88000c16 	blt	r17,zero,75b0 <_fwalk_reent+0x84>
    7580:	84000304 	addi	r16,r16,12
    7584:	8080000b 	ldhu	r2,0(r16)
    7588:	8c7fffc4 	addi	r17,r17,-1
    758c:	817ffd04 	addi	r5,r16,-12
    7590:	b080052e 	bgeu	r22,r2,75a8 <_fwalk_reent+0x7c>
    7594:	8080008f 	ldh	r2,2(r16)
    7598:	9809883a 	mov	r4,r19
    759c:	14800226 	beq	r2,r18,75a8 <_fwalk_reent+0x7c>
    75a0:	a83ee83a 	callr	r21
    75a4:	b8aeb03a 	or	r23,r23,r2
    75a8:	84001a04 	addi	r16,r16,104
    75ac:	8cbff51e 	bne	r17,r18,7584 <__alt_data_end+0xff007584>
    75b0:	a5000017 	ldw	r20,0(r20)
    75b4:	a03fee1e 	bne	r20,zero,7570 <__alt_data_end+0xff007570>
    75b8:	b805883a 	mov	r2,r23
    75bc:	dfc00817 	ldw	ra,32(sp)
    75c0:	ddc00717 	ldw	r23,28(sp)
    75c4:	dd800617 	ldw	r22,24(sp)
    75c8:	dd400517 	ldw	r21,20(sp)
    75cc:	dd000417 	ldw	r20,16(sp)
    75d0:	dcc00317 	ldw	r19,12(sp)
    75d4:	dc800217 	ldw	r18,8(sp)
    75d8:	dc400117 	ldw	r17,4(sp)
    75dc:	dc000017 	ldw	r16,0(sp)
    75e0:	dec00904 	addi	sp,sp,36
    75e4:	f800283a 	ret
    75e8:	002f883a 	mov	r23,zero
    75ec:	003ff206 	br	75b8 <__alt_data_end+0xff0075b8>

000075f0 <_setlocale_r>:
    75f0:	30001b26 	beq	r6,zero,7660 <_setlocale_r+0x70>
    75f4:	01400074 	movhi	r5,1
    75f8:	defffe04 	addi	sp,sp,-8
    75fc:	29454c04 	addi	r5,r5,5424
    7600:	3009883a 	mov	r4,r6
    7604:	dc000015 	stw	r16,0(sp)
    7608:	dfc00115 	stw	ra,4(sp)
    760c:	3021883a 	mov	r16,r6
    7610:	00094480 	call	9448 <strcmp>
    7614:	1000061e 	bne	r2,zero,7630 <_setlocale_r+0x40>
    7618:	00800074 	movhi	r2,1
    761c:	10854b04 	addi	r2,r2,5420
    7620:	dfc00117 	ldw	ra,4(sp)
    7624:	dc000017 	ldw	r16,0(sp)
    7628:	dec00204 	addi	sp,sp,8
    762c:	f800283a 	ret
    7630:	01400074 	movhi	r5,1
    7634:	29454b04 	addi	r5,r5,5420
    7638:	8009883a 	mov	r4,r16
    763c:	00094480 	call	9448 <strcmp>
    7640:	103ff526 	beq	r2,zero,7618 <__alt_data_end+0xff007618>
    7644:	01400074 	movhi	r5,1
    7648:	29451f04 	addi	r5,r5,5244
    764c:	8009883a 	mov	r4,r16
    7650:	00094480 	call	9448 <strcmp>
    7654:	103ff026 	beq	r2,zero,7618 <__alt_data_end+0xff007618>
    7658:	0005883a 	mov	r2,zero
    765c:	003ff006 	br	7620 <__alt_data_end+0xff007620>
    7660:	00800074 	movhi	r2,1
    7664:	10854b04 	addi	r2,r2,5420
    7668:	f800283a 	ret

0000766c <__locale_charset>:
    766c:	00800074 	movhi	r2,1
    7670:	10883e04 	addi	r2,r2,8440
    7674:	f800283a 	ret

00007678 <__locale_mb_cur_max>:
    7678:	00800074 	movhi	r2,1
    767c:	108cda04 	addi	r2,r2,13160
    7680:	10800017 	ldw	r2,0(r2)
    7684:	f800283a 	ret

00007688 <__locale_msgcharset>:
    7688:	00800074 	movhi	r2,1
    768c:	10883604 	addi	r2,r2,8408
    7690:	f800283a 	ret

00007694 <__locale_cjk_lang>:
    7694:	0005883a 	mov	r2,zero
    7698:	f800283a 	ret

0000769c <_localeconv_r>:
    769c:	00800074 	movhi	r2,1
    76a0:	10884604 	addi	r2,r2,8472
    76a4:	f800283a 	ret

000076a8 <setlocale>:
    76a8:	00800074 	movhi	r2,1
    76ac:	108cd904 	addi	r2,r2,13156
    76b0:	280d883a 	mov	r6,r5
    76b4:	200b883a 	mov	r5,r4
    76b8:	11000017 	ldw	r4,0(r2)
    76bc:	00075f01 	jmpi	75f0 <_setlocale_r>

000076c0 <localeconv>:
    76c0:	00800074 	movhi	r2,1
    76c4:	10884604 	addi	r2,r2,8472
    76c8:	f800283a 	ret

000076cc <__smakebuf_r>:
    76cc:	2880030b 	ldhu	r2,12(r5)
    76d0:	10c0008c 	andi	r3,r2,2
    76d4:	1800411e 	bne	r3,zero,77dc <__smakebuf_r+0x110>
    76d8:	deffec04 	addi	sp,sp,-80
    76dc:	dc000f15 	stw	r16,60(sp)
    76e0:	2821883a 	mov	r16,r5
    76e4:	2940038f 	ldh	r5,14(r5)
    76e8:	dc401015 	stw	r17,64(sp)
    76ec:	dfc01315 	stw	ra,76(sp)
    76f0:	dcc01215 	stw	r19,72(sp)
    76f4:	dc801115 	stw	r18,68(sp)
    76f8:	2023883a 	mov	r17,r4
    76fc:	28001c16 	blt	r5,zero,7770 <__smakebuf_r+0xa4>
    7700:	d80d883a 	mov	r6,sp
    7704:	000aff00 	call	aff0 <_fstat_r>
    7708:	10001816 	blt	r2,zero,776c <__smakebuf_r+0xa0>
    770c:	d8800117 	ldw	r2,4(sp)
    7710:	00e00014 	movui	r3,32768
    7714:	10bc000c 	andi	r2,r2,61440
    7718:	14c80020 	cmpeqi	r19,r2,8192
    771c:	10c03726 	beq	r2,r3,77fc <__smakebuf_r+0x130>
    7720:	80c0030b 	ldhu	r3,12(r16)
    7724:	18c20014 	ori	r3,r3,2048
    7728:	80c0030d 	sth	r3,12(r16)
    772c:	00c80004 	movi	r3,8192
    7730:	10c0521e 	bne	r2,r3,787c <__smakebuf_r+0x1b0>
    7734:	8140038f 	ldh	r5,14(r16)
    7738:	8809883a 	mov	r4,r17
    773c:	000b04c0 	call	b04c <_isatty_r>
    7740:	10004c26 	beq	r2,zero,7874 <__smakebuf_r+0x1a8>
    7744:	8080030b 	ldhu	r2,12(r16)
    7748:	80c010c4 	addi	r3,r16,67
    774c:	80c00015 	stw	r3,0(r16)
    7750:	10800054 	ori	r2,r2,1
    7754:	8080030d 	sth	r2,12(r16)
    7758:	00800044 	movi	r2,1
    775c:	80c00415 	stw	r3,16(r16)
    7760:	80800515 	stw	r2,20(r16)
    7764:	04810004 	movi	r18,1024
    7768:	00000706 	br	7788 <__smakebuf_r+0xbc>
    776c:	8080030b 	ldhu	r2,12(r16)
    7770:	10c0200c 	andi	r3,r2,128
    7774:	18001f1e 	bne	r3,zero,77f4 <__smakebuf_r+0x128>
    7778:	04810004 	movi	r18,1024
    777c:	10820014 	ori	r2,r2,2048
    7780:	8080030d 	sth	r2,12(r16)
    7784:	0027883a 	mov	r19,zero
    7788:	900b883a 	mov	r5,r18
    778c:	8809883a 	mov	r4,r17
    7790:	0001e4c0 	call	1e4c <_malloc_r>
    7794:	10002c26 	beq	r2,zero,7848 <__smakebuf_r+0x17c>
    7798:	80c0030b 	ldhu	r3,12(r16)
    779c:	01000034 	movhi	r4,0
    77a0:	2119f804 	addi	r4,r4,26592
    77a4:	89000f15 	stw	r4,60(r17)
    77a8:	18c02014 	ori	r3,r3,128
    77ac:	80c0030d 	sth	r3,12(r16)
    77b0:	80800015 	stw	r2,0(r16)
    77b4:	80800415 	stw	r2,16(r16)
    77b8:	84800515 	stw	r18,20(r16)
    77bc:	98001a1e 	bne	r19,zero,7828 <__smakebuf_r+0x15c>
    77c0:	dfc01317 	ldw	ra,76(sp)
    77c4:	dcc01217 	ldw	r19,72(sp)
    77c8:	dc801117 	ldw	r18,68(sp)
    77cc:	dc401017 	ldw	r17,64(sp)
    77d0:	dc000f17 	ldw	r16,60(sp)
    77d4:	dec01404 	addi	sp,sp,80
    77d8:	f800283a 	ret
    77dc:	288010c4 	addi	r2,r5,67
    77e0:	28800015 	stw	r2,0(r5)
    77e4:	28800415 	stw	r2,16(r5)
    77e8:	00800044 	movi	r2,1
    77ec:	28800515 	stw	r2,20(r5)
    77f0:	f800283a 	ret
    77f4:	04801004 	movi	r18,64
    77f8:	003fe006 	br	777c <__alt_data_end+0xff00777c>
    77fc:	81000a17 	ldw	r4,40(r16)
    7800:	00c00074 	movhi	r3,1
    7804:	18e4f904 	addi	r3,r3,-27676
    7808:	20ffc51e 	bne	r4,r3,7720 <__alt_data_end+0xff007720>
    780c:	8080030b 	ldhu	r2,12(r16)
    7810:	04810004 	movi	r18,1024
    7814:	84801315 	stw	r18,76(r16)
    7818:	1484b03a 	or	r2,r2,r18
    781c:	8080030d 	sth	r2,12(r16)
    7820:	0027883a 	mov	r19,zero
    7824:	003fd806 	br	7788 <__alt_data_end+0xff007788>
    7828:	8140038f 	ldh	r5,14(r16)
    782c:	8809883a 	mov	r4,r17
    7830:	000b04c0 	call	b04c <_isatty_r>
    7834:	103fe226 	beq	r2,zero,77c0 <__alt_data_end+0xff0077c0>
    7838:	8080030b 	ldhu	r2,12(r16)
    783c:	10800054 	ori	r2,r2,1
    7840:	8080030d 	sth	r2,12(r16)
    7844:	003fde06 	br	77c0 <__alt_data_end+0xff0077c0>
    7848:	8080030b 	ldhu	r2,12(r16)
    784c:	10c0800c 	andi	r3,r2,512
    7850:	183fdb1e 	bne	r3,zero,77c0 <__alt_data_end+0xff0077c0>
    7854:	10800094 	ori	r2,r2,2
    7858:	80c010c4 	addi	r3,r16,67
    785c:	8080030d 	sth	r2,12(r16)
    7860:	00800044 	movi	r2,1
    7864:	80c00015 	stw	r3,0(r16)
    7868:	80c00415 	stw	r3,16(r16)
    786c:	80800515 	stw	r2,20(r16)
    7870:	003fd306 	br	77c0 <__alt_data_end+0xff0077c0>
    7874:	04810004 	movi	r18,1024
    7878:	003fc306 	br	7788 <__alt_data_end+0xff007788>
    787c:	0027883a 	mov	r19,zero
    7880:	04810004 	movi	r18,1024
    7884:	003fc006 	br	7788 <__alt_data_end+0xff007788>

00007888 <memchr>:
    7888:	208000cc 	andi	r2,r4,3
    788c:	280f883a 	mov	r7,r5
    7890:	10003426 	beq	r2,zero,7964 <memchr+0xdc>
    7894:	30bfffc4 	addi	r2,r6,-1
    7898:	30001a26 	beq	r6,zero,7904 <memchr+0x7c>
    789c:	20c00003 	ldbu	r3,0(r4)
    78a0:	29803fcc 	andi	r6,r5,255
    78a4:	30c0051e 	bne	r6,r3,78bc <memchr+0x34>
    78a8:	00001806 	br	790c <memchr+0x84>
    78ac:	10001526 	beq	r2,zero,7904 <memchr+0x7c>
    78b0:	20c00003 	ldbu	r3,0(r4)
    78b4:	10bfffc4 	addi	r2,r2,-1
    78b8:	30c01426 	beq	r6,r3,790c <memchr+0x84>
    78bc:	21000044 	addi	r4,r4,1
    78c0:	20c000cc 	andi	r3,r4,3
    78c4:	183ff91e 	bne	r3,zero,78ac <__alt_data_end+0xff0078ac>
    78c8:	020000c4 	movi	r8,3
    78cc:	40801136 	bltu	r8,r2,7914 <memchr+0x8c>
    78d0:	10000c26 	beq	r2,zero,7904 <memchr+0x7c>
    78d4:	20c00003 	ldbu	r3,0(r4)
    78d8:	29403fcc 	andi	r5,r5,255
    78dc:	28c00b26 	beq	r5,r3,790c <memchr+0x84>
    78e0:	20c00044 	addi	r3,r4,1
    78e4:	39803fcc 	andi	r6,r7,255
    78e8:	2089883a 	add	r4,r4,r2
    78ec:	00000306 	br	78fc <memchr+0x74>
    78f0:	18c00044 	addi	r3,r3,1
    78f4:	197fffc3 	ldbu	r5,-1(r3)
    78f8:	31400526 	beq	r6,r5,7910 <memchr+0x88>
    78fc:	1805883a 	mov	r2,r3
    7900:	20fffb1e 	bne	r4,r3,78f0 <__alt_data_end+0xff0078f0>
    7904:	0005883a 	mov	r2,zero
    7908:	f800283a 	ret
    790c:	2005883a 	mov	r2,r4
    7910:	f800283a 	ret
    7914:	28c03fcc 	andi	r3,r5,255
    7918:	1812923a 	slli	r9,r3,8
    791c:	02ffbff4 	movhi	r11,65279
    7920:	02a02074 	movhi	r10,32897
    7924:	48d2b03a 	or	r9,r9,r3
    7928:	4806943a 	slli	r3,r9,16
    792c:	5affbfc4 	addi	r11,r11,-257
    7930:	52a02004 	addi	r10,r10,-32640
    7934:	48d2b03a 	or	r9,r9,r3
    7938:	20c00017 	ldw	r3,0(r4)
    793c:	48c6f03a 	xor	r3,r9,r3
    7940:	1acd883a 	add	r6,r3,r11
    7944:	00c6303a 	nor	r3,zero,r3
    7948:	30c6703a 	and	r3,r6,r3
    794c:	1a86703a 	and	r3,r3,r10
    7950:	183fe01e 	bne	r3,zero,78d4 <__alt_data_end+0xff0078d4>
    7954:	10bfff04 	addi	r2,r2,-4
    7958:	21000104 	addi	r4,r4,4
    795c:	40bff636 	bltu	r8,r2,7938 <__alt_data_end+0xff007938>
    7960:	003fdb06 	br	78d0 <__alt_data_end+0xff0078d0>
    7964:	3005883a 	mov	r2,r6
    7968:	003fd706 	br	78c8 <__alt_data_end+0xff0078c8>

0000796c <memcpy>:
    796c:	defffd04 	addi	sp,sp,-12
    7970:	dfc00215 	stw	ra,8(sp)
    7974:	dc400115 	stw	r17,4(sp)
    7978:	dc000015 	stw	r16,0(sp)
    797c:	00c003c4 	movi	r3,15
    7980:	2005883a 	mov	r2,r4
    7984:	1980452e 	bgeu	r3,r6,7a9c <memcpy+0x130>
    7988:	2906b03a 	or	r3,r5,r4
    798c:	18c000cc 	andi	r3,r3,3
    7990:	1800441e 	bne	r3,zero,7aa4 <memcpy+0x138>
    7994:	347ffc04 	addi	r17,r6,-16
    7998:	8822d13a 	srli	r17,r17,4
    799c:	28c00104 	addi	r3,r5,4
    79a0:	23400104 	addi	r13,r4,4
    79a4:	8820913a 	slli	r16,r17,4
    79a8:	2b000204 	addi	r12,r5,8
    79ac:	22c00204 	addi	r11,r4,8
    79b0:	84000504 	addi	r16,r16,20
    79b4:	2a800304 	addi	r10,r5,12
    79b8:	22400304 	addi	r9,r4,12
    79bc:	2c21883a 	add	r16,r5,r16
    79c0:	2811883a 	mov	r8,r5
    79c4:	200f883a 	mov	r7,r4
    79c8:	41000017 	ldw	r4,0(r8)
    79cc:	1fc00017 	ldw	ra,0(r3)
    79d0:	63c00017 	ldw	r15,0(r12)
    79d4:	39000015 	stw	r4,0(r7)
    79d8:	53800017 	ldw	r14,0(r10)
    79dc:	6fc00015 	stw	ra,0(r13)
    79e0:	5bc00015 	stw	r15,0(r11)
    79e4:	4b800015 	stw	r14,0(r9)
    79e8:	18c00404 	addi	r3,r3,16
    79ec:	39c00404 	addi	r7,r7,16
    79f0:	42000404 	addi	r8,r8,16
    79f4:	6b400404 	addi	r13,r13,16
    79f8:	63000404 	addi	r12,r12,16
    79fc:	5ac00404 	addi	r11,r11,16
    7a00:	52800404 	addi	r10,r10,16
    7a04:	4a400404 	addi	r9,r9,16
    7a08:	1c3fef1e 	bne	r3,r16,79c8 <__alt_data_end+0xff0079c8>
    7a0c:	89c00044 	addi	r7,r17,1
    7a10:	380e913a 	slli	r7,r7,4
    7a14:	310003cc 	andi	r4,r6,15
    7a18:	02c000c4 	movi	r11,3
    7a1c:	11c7883a 	add	r3,r2,r7
    7a20:	29cb883a 	add	r5,r5,r7
    7a24:	5900212e 	bgeu	r11,r4,7aac <memcpy+0x140>
    7a28:	1813883a 	mov	r9,r3
    7a2c:	2811883a 	mov	r8,r5
    7a30:	200f883a 	mov	r7,r4
    7a34:	42800017 	ldw	r10,0(r8)
    7a38:	4a400104 	addi	r9,r9,4
    7a3c:	39ffff04 	addi	r7,r7,-4
    7a40:	4abfff15 	stw	r10,-4(r9)
    7a44:	42000104 	addi	r8,r8,4
    7a48:	59fffa36 	bltu	r11,r7,7a34 <__alt_data_end+0xff007a34>
    7a4c:	213fff04 	addi	r4,r4,-4
    7a50:	2008d0ba 	srli	r4,r4,2
    7a54:	318000cc 	andi	r6,r6,3
    7a58:	21000044 	addi	r4,r4,1
    7a5c:	2109883a 	add	r4,r4,r4
    7a60:	2109883a 	add	r4,r4,r4
    7a64:	1907883a 	add	r3,r3,r4
    7a68:	290b883a 	add	r5,r5,r4
    7a6c:	30000626 	beq	r6,zero,7a88 <memcpy+0x11c>
    7a70:	198d883a 	add	r6,r3,r6
    7a74:	29c00003 	ldbu	r7,0(r5)
    7a78:	18c00044 	addi	r3,r3,1
    7a7c:	29400044 	addi	r5,r5,1
    7a80:	19ffffc5 	stb	r7,-1(r3)
    7a84:	19bffb1e 	bne	r3,r6,7a74 <__alt_data_end+0xff007a74>
    7a88:	dfc00217 	ldw	ra,8(sp)
    7a8c:	dc400117 	ldw	r17,4(sp)
    7a90:	dc000017 	ldw	r16,0(sp)
    7a94:	dec00304 	addi	sp,sp,12
    7a98:	f800283a 	ret
    7a9c:	2007883a 	mov	r3,r4
    7aa0:	003ff206 	br	7a6c <__alt_data_end+0xff007a6c>
    7aa4:	2007883a 	mov	r3,r4
    7aa8:	003ff106 	br	7a70 <__alt_data_end+0xff007a70>
    7aac:	200d883a 	mov	r6,r4
    7ab0:	003fee06 	br	7a6c <__alt_data_end+0xff007a6c>

00007ab4 <memmove>:
    7ab4:	2005883a 	mov	r2,r4
    7ab8:	29000b2e 	bgeu	r5,r4,7ae8 <memmove+0x34>
    7abc:	298f883a 	add	r7,r5,r6
    7ac0:	21c0092e 	bgeu	r4,r7,7ae8 <memmove+0x34>
    7ac4:	2187883a 	add	r3,r4,r6
    7ac8:	198bc83a 	sub	r5,r3,r6
    7acc:	30004826 	beq	r6,zero,7bf0 <memmove+0x13c>
    7ad0:	39ffffc4 	addi	r7,r7,-1
    7ad4:	39000003 	ldbu	r4,0(r7)
    7ad8:	18ffffc4 	addi	r3,r3,-1
    7adc:	19000005 	stb	r4,0(r3)
    7ae0:	28fffb1e 	bne	r5,r3,7ad0 <__alt_data_end+0xff007ad0>
    7ae4:	f800283a 	ret
    7ae8:	00c003c4 	movi	r3,15
    7aec:	1980412e 	bgeu	r3,r6,7bf4 <memmove+0x140>
    7af0:	2886b03a 	or	r3,r5,r2
    7af4:	18c000cc 	andi	r3,r3,3
    7af8:	1800401e 	bne	r3,zero,7bfc <memmove+0x148>
    7afc:	33fffc04 	addi	r15,r6,-16
    7b00:	781ed13a 	srli	r15,r15,4
    7b04:	28c00104 	addi	r3,r5,4
    7b08:	13400104 	addi	r13,r2,4
    7b0c:	781c913a 	slli	r14,r15,4
    7b10:	2b000204 	addi	r12,r5,8
    7b14:	12c00204 	addi	r11,r2,8
    7b18:	73800504 	addi	r14,r14,20
    7b1c:	2a800304 	addi	r10,r5,12
    7b20:	12400304 	addi	r9,r2,12
    7b24:	2b9d883a 	add	r14,r5,r14
    7b28:	2811883a 	mov	r8,r5
    7b2c:	100f883a 	mov	r7,r2
    7b30:	41000017 	ldw	r4,0(r8)
    7b34:	39c00404 	addi	r7,r7,16
    7b38:	18c00404 	addi	r3,r3,16
    7b3c:	393ffc15 	stw	r4,-16(r7)
    7b40:	193ffc17 	ldw	r4,-16(r3)
    7b44:	6b400404 	addi	r13,r13,16
    7b48:	5ac00404 	addi	r11,r11,16
    7b4c:	693ffc15 	stw	r4,-16(r13)
    7b50:	61000017 	ldw	r4,0(r12)
    7b54:	4a400404 	addi	r9,r9,16
    7b58:	42000404 	addi	r8,r8,16
    7b5c:	593ffc15 	stw	r4,-16(r11)
    7b60:	51000017 	ldw	r4,0(r10)
    7b64:	63000404 	addi	r12,r12,16
    7b68:	52800404 	addi	r10,r10,16
    7b6c:	493ffc15 	stw	r4,-16(r9)
    7b70:	1bbfef1e 	bne	r3,r14,7b30 <__alt_data_end+0xff007b30>
    7b74:	79000044 	addi	r4,r15,1
    7b78:	2008913a 	slli	r4,r4,4
    7b7c:	328003cc 	andi	r10,r6,15
    7b80:	02c000c4 	movi	r11,3
    7b84:	1107883a 	add	r3,r2,r4
    7b88:	290b883a 	add	r5,r5,r4
    7b8c:	5a801e2e 	bgeu	r11,r10,7c08 <memmove+0x154>
    7b90:	1813883a 	mov	r9,r3
    7b94:	2811883a 	mov	r8,r5
    7b98:	500f883a 	mov	r7,r10
    7b9c:	41000017 	ldw	r4,0(r8)
    7ba0:	4a400104 	addi	r9,r9,4
    7ba4:	39ffff04 	addi	r7,r7,-4
    7ba8:	493fff15 	stw	r4,-4(r9)
    7bac:	42000104 	addi	r8,r8,4
    7bb0:	59fffa36 	bltu	r11,r7,7b9c <__alt_data_end+0xff007b9c>
    7bb4:	513fff04 	addi	r4,r10,-4
    7bb8:	2008d0ba 	srli	r4,r4,2
    7bbc:	318000cc 	andi	r6,r6,3
    7bc0:	21000044 	addi	r4,r4,1
    7bc4:	2109883a 	add	r4,r4,r4
    7bc8:	2109883a 	add	r4,r4,r4
    7bcc:	1907883a 	add	r3,r3,r4
    7bd0:	290b883a 	add	r5,r5,r4
    7bd4:	30000b26 	beq	r6,zero,7c04 <memmove+0x150>
    7bd8:	198d883a 	add	r6,r3,r6
    7bdc:	29c00003 	ldbu	r7,0(r5)
    7be0:	18c00044 	addi	r3,r3,1
    7be4:	29400044 	addi	r5,r5,1
    7be8:	19ffffc5 	stb	r7,-1(r3)
    7bec:	19bffb1e 	bne	r3,r6,7bdc <__alt_data_end+0xff007bdc>
    7bf0:	f800283a 	ret
    7bf4:	1007883a 	mov	r3,r2
    7bf8:	003ff606 	br	7bd4 <__alt_data_end+0xff007bd4>
    7bfc:	1007883a 	mov	r3,r2
    7c00:	003ff506 	br	7bd8 <__alt_data_end+0xff007bd8>
    7c04:	f800283a 	ret
    7c08:	500d883a 	mov	r6,r10
    7c0c:	003ff106 	br	7bd4 <__alt_data_end+0xff007bd4>

00007c10 <memset>:
    7c10:	20c000cc 	andi	r3,r4,3
    7c14:	2005883a 	mov	r2,r4
    7c18:	18004426 	beq	r3,zero,7d2c <memset+0x11c>
    7c1c:	31ffffc4 	addi	r7,r6,-1
    7c20:	30004026 	beq	r6,zero,7d24 <memset+0x114>
    7c24:	2813883a 	mov	r9,r5
    7c28:	200d883a 	mov	r6,r4
    7c2c:	2007883a 	mov	r3,r4
    7c30:	00000406 	br	7c44 <memset+0x34>
    7c34:	3a3fffc4 	addi	r8,r7,-1
    7c38:	31800044 	addi	r6,r6,1
    7c3c:	38003926 	beq	r7,zero,7d24 <memset+0x114>
    7c40:	400f883a 	mov	r7,r8
    7c44:	18c00044 	addi	r3,r3,1
    7c48:	32400005 	stb	r9,0(r6)
    7c4c:	1a0000cc 	andi	r8,r3,3
    7c50:	403ff81e 	bne	r8,zero,7c34 <__alt_data_end+0xff007c34>
    7c54:	010000c4 	movi	r4,3
    7c58:	21c02d2e 	bgeu	r4,r7,7d10 <memset+0x100>
    7c5c:	29003fcc 	andi	r4,r5,255
    7c60:	200c923a 	slli	r6,r4,8
    7c64:	3108b03a 	or	r4,r6,r4
    7c68:	200c943a 	slli	r6,r4,16
    7c6c:	218cb03a 	or	r6,r4,r6
    7c70:	010003c4 	movi	r4,15
    7c74:	21c0182e 	bgeu	r4,r7,7cd8 <memset+0xc8>
    7c78:	3b3ffc04 	addi	r12,r7,-16
    7c7c:	6018d13a 	srli	r12,r12,4
    7c80:	1a000104 	addi	r8,r3,4
    7c84:	1ac00204 	addi	r11,r3,8
    7c88:	6008913a 	slli	r4,r12,4
    7c8c:	1a800304 	addi	r10,r3,12
    7c90:	1813883a 	mov	r9,r3
    7c94:	21000504 	addi	r4,r4,20
    7c98:	1909883a 	add	r4,r3,r4
    7c9c:	49800015 	stw	r6,0(r9)
    7ca0:	41800015 	stw	r6,0(r8)
    7ca4:	59800015 	stw	r6,0(r11)
    7ca8:	51800015 	stw	r6,0(r10)
    7cac:	42000404 	addi	r8,r8,16
    7cb0:	4a400404 	addi	r9,r9,16
    7cb4:	5ac00404 	addi	r11,r11,16
    7cb8:	52800404 	addi	r10,r10,16
    7cbc:	413ff71e 	bne	r8,r4,7c9c <__alt_data_end+0xff007c9c>
    7cc0:	63000044 	addi	r12,r12,1
    7cc4:	6018913a 	slli	r12,r12,4
    7cc8:	39c003cc 	andi	r7,r7,15
    7ccc:	010000c4 	movi	r4,3
    7cd0:	1b07883a 	add	r3,r3,r12
    7cd4:	21c00e2e 	bgeu	r4,r7,7d10 <memset+0x100>
    7cd8:	1813883a 	mov	r9,r3
    7cdc:	3811883a 	mov	r8,r7
    7ce0:	010000c4 	movi	r4,3
    7ce4:	49800015 	stw	r6,0(r9)
    7ce8:	423fff04 	addi	r8,r8,-4
    7cec:	4a400104 	addi	r9,r9,4
    7cf0:	223ffc36 	bltu	r4,r8,7ce4 <__alt_data_end+0xff007ce4>
    7cf4:	393fff04 	addi	r4,r7,-4
    7cf8:	2008d0ba 	srli	r4,r4,2
    7cfc:	39c000cc 	andi	r7,r7,3
    7d00:	21000044 	addi	r4,r4,1
    7d04:	2109883a 	add	r4,r4,r4
    7d08:	2109883a 	add	r4,r4,r4
    7d0c:	1907883a 	add	r3,r3,r4
    7d10:	38000526 	beq	r7,zero,7d28 <memset+0x118>
    7d14:	19cf883a 	add	r7,r3,r7
    7d18:	19400005 	stb	r5,0(r3)
    7d1c:	18c00044 	addi	r3,r3,1
    7d20:	38fffd1e 	bne	r7,r3,7d18 <__alt_data_end+0xff007d18>
    7d24:	f800283a 	ret
    7d28:	f800283a 	ret
    7d2c:	2007883a 	mov	r3,r4
    7d30:	300f883a 	mov	r7,r6
    7d34:	003fc706 	br	7c54 <__alt_data_end+0xff007c54>

00007d38 <_Balloc>:
    7d38:	20801317 	ldw	r2,76(r4)
    7d3c:	defffc04 	addi	sp,sp,-16
    7d40:	dc400115 	stw	r17,4(sp)
    7d44:	dc000015 	stw	r16,0(sp)
    7d48:	dfc00315 	stw	ra,12(sp)
    7d4c:	dc800215 	stw	r18,8(sp)
    7d50:	2023883a 	mov	r17,r4
    7d54:	2821883a 	mov	r16,r5
    7d58:	10000f26 	beq	r2,zero,7d98 <_Balloc+0x60>
    7d5c:	8407883a 	add	r3,r16,r16
    7d60:	18c7883a 	add	r3,r3,r3
    7d64:	10c7883a 	add	r3,r2,r3
    7d68:	18800017 	ldw	r2,0(r3)
    7d6c:	10001126 	beq	r2,zero,7db4 <_Balloc+0x7c>
    7d70:	11000017 	ldw	r4,0(r2)
    7d74:	19000015 	stw	r4,0(r3)
    7d78:	10000415 	stw	zero,16(r2)
    7d7c:	10000315 	stw	zero,12(r2)
    7d80:	dfc00317 	ldw	ra,12(sp)
    7d84:	dc800217 	ldw	r18,8(sp)
    7d88:	dc400117 	ldw	r17,4(sp)
    7d8c:	dc000017 	ldw	r16,0(sp)
    7d90:	dec00404 	addi	sp,sp,16
    7d94:	f800283a 	ret
    7d98:	01800844 	movi	r6,33
    7d9c:	01400104 	movi	r5,4
    7da0:	000ac200 	call	ac20 <_calloc_r>
    7da4:	88801315 	stw	r2,76(r17)
    7da8:	103fec1e 	bne	r2,zero,7d5c <__alt_data_end+0xff007d5c>
    7dac:	0005883a 	mov	r2,zero
    7db0:	003ff306 	br	7d80 <__alt_data_end+0xff007d80>
    7db4:	01400044 	movi	r5,1
    7db8:	2c24983a 	sll	r18,r5,r16
    7dbc:	8809883a 	mov	r4,r17
    7dc0:	91800144 	addi	r6,r18,5
    7dc4:	318d883a 	add	r6,r6,r6
    7dc8:	318d883a 	add	r6,r6,r6
    7dcc:	000ac200 	call	ac20 <_calloc_r>
    7dd0:	103ff626 	beq	r2,zero,7dac <__alt_data_end+0xff007dac>
    7dd4:	14000115 	stw	r16,4(r2)
    7dd8:	14800215 	stw	r18,8(r2)
    7ddc:	003fe606 	br	7d78 <__alt_data_end+0xff007d78>

00007de0 <_Bfree>:
    7de0:	28000826 	beq	r5,zero,7e04 <_Bfree+0x24>
    7de4:	28c00117 	ldw	r3,4(r5)
    7de8:	20801317 	ldw	r2,76(r4)
    7dec:	18c7883a 	add	r3,r3,r3
    7df0:	18c7883a 	add	r3,r3,r3
    7df4:	10c5883a 	add	r2,r2,r3
    7df8:	10c00017 	ldw	r3,0(r2)
    7dfc:	28c00015 	stw	r3,0(r5)
    7e00:	11400015 	stw	r5,0(r2)
    7e04:	f800283a 	ret

00007e08 <__multadd>:
    7e08:	defffa04 	addi	sp,sp,-24
    7e0c:	dc800315 	stw	r18,12(sp)
    7e10:	dc400215 	stw	r17,8(sp)
    7e14:	dc000115 	stw	r16,4(sp)
    7e18:	2823883a 	mov	r17,r5
    7e1c:	2c000417 	ldw	r16,16(r5)
    7e20:	dfc00515 	stw	ra,20(sp)
    7e24:	dcc00415 	stw	r19,16(sp)
    7e28:	2025883a 	mov	r18,r4
    7e2c:	29400504 	addi	r5,r5,20
    7e30:	0011883a 	mov	r8,zero
    7e34:	28c00017 	ldw	r3,0(r5)
    7e38:	29400104 	addi	r5,r5,4
    7e3c:	42000044 	addi	r8,r8,1
    7e40:	18bfffcc 	andi	r2,r3,65535
    7e44:	1185383a 	mul	r2,r2,r6
    7e48:	1806d43a 	srli	r3,r3,16
    7e4c:	11cf883a 	add	r7,r2,r7
    7e50:	3808d43a 	srli	r4,r7,16
    7e54:	1987383a 	mul	r3,r3,r6
    7e58:	38bfffcc 	andi	r2,r7,65535
    7e5c:	1907883a 	add	r3,r3,r4
    7e60:	1808943a 	slli	r4,r3,16
    7e64:	180ed43a 	srli	r7,r3,16
    7e68:	2085883a 	add	r2,r4,r2
    7e6c:	28bfff15 	stw	r2,-4(r5)
    7e70:	443ff016 	blt	r8,r16,7e34 <__alt_data_end+0xff007e34>
    7e74:	38000926 	beq	r7,zero,7e9c <__multadd+0x94>
    7e78:	88800217 	ldw	r2,8(r17)
    7e7c:	80800f0e 	bge	r16,r2,7ebc <__multadd+0xb4>
    7e80:	80800144 	addi	r2,r16,5
    7e84:	1085883a 	add	r2,r2,r2
    7e88:	1085883a 	add	r2,r2,r2
    7e8c:	8885883a 	add	r2,r17,r2
    7e90:	11c00015 	stw	r7,0(r2)
    7e94:	84000044 	addi	r16,r16,1
    7e98:	8c000415 	stw	r16,16(r17)
    7e9c:	8805883a 	mov	r2,r17
    7ea0:	dfc00517 	ldw	ra,20(sp)
    7ea4:	dcc00417 	ldw	r19,16(sp)
    7ea8:	dc800317 	ldw	r18,12(sp)
    7eac:	dc400217 	ldw	r17,8(sp)
    7eb0:	dc000117 	ldw	r16,4(sp)
    7eb4:	dec00604 	addi	sp,sp,24
    7eb8:	f800283a 	ret
    7ebc:	89400117 	ldw	r5,4(r17)
    7ec0:	9009883a 	mov	r4,r18
    7ec4:	d9c00015 	stw	r7,0(sp)
    7ec8:	29400044 	addi	r5,r5,1
    7ecc:	0007d380 	call	7d38 <_Balloc>
    7ed0:	89800417 	ldw	r6,16(r17)
    7ed4:	89400304 	addi	r5,r17,12
    7ed8:	11000304 	addi	r4,r2,12
    7edc:	31800084 	addi	r6,r6,2
    7ee0:	318d883a 	add	r6,r6,r6
    7ee4:	318d883a 	add	r6,r6,r6
    7ee8:	1027883a 	mov	r19,r2
    7eec:	000796c0 	call	796c <memcpy>
    7ef0:	d9c00017 	ldw	r7,0(sp)
    7ef4:	88000a26 	beq	r17,zero,7f20 <__multadd+0x118>
    7ef8:	88c00117 	ldw	r3,4(r17)
    7efc:	90801317 	ldw	r2,76(r18)
    7f00:	18c7883a 	add	r3,r3,r3
    7f04:	18c7883a 	add	r3,r3,r3
    7f08:	10c5883a 	add	r2,r2,r3
    7f0c:	10c00017 	ldw	r3,0(r2)
    7f10:	88c00015 	stw	r3,0(r17)
    7f14:	14400015 	stw	r17,0(r2)
    7f18:	9823883a 	mov	r17,r19
    7f1c:	003fd806 	br	7e80 <__alt_data_end+0xff007e80>
    7f20:	9823883a 	mov	r17,r19
    7f24:	003fd606 	br	7e80 <__alt_data_end+0xff007e80>

00007f28 <__s2b>:
    7f28:	defff904 	addi	sp,sp,-28
    7f2c:	dc400115 	stw	r17,4(sp)
    7f30:	dc000015 	stw	r16,0(sp)
    7f34:	2023883a 	mov	r17,r4
    7f38:	2821883a 	mov	r16,r5
    7f3c:	39000204 	addi	r4,r7,8
    7f40:	01400244 	movi	r5,9
    7f44:	dcc00315 	stw	r19,12(sp)
    7f48:	dc800215 	stw	r18,8(sp)
    7f4c:	dfc00615 	stw	ra,24(sp)
    7f50:	dd400515 	stw	r21,20(sp)
    7f54:	dd000415 	stw	r20,16(sp)
    7f58:	3825883a 	mov	r18,r7
    7f5c:	3027883a 	mov	r19,r6
    7f60:	0001c700 	call	1c70 <__divsi3>
    7f64:	00c00044 	movi	r3,1
    7f68:	000b883a 	mov	r5,zero
    7f6c:	1880030e 	bge	r3,r2,7f7c <__s2b+0x54>
    7f70:	18c7883a 	add	r3,r3,r3
    7f74:	29400044 	addi	r5,r5,1
    7f78:	18bffd16 	blt	r3,r2,7f70 <__alt_data_end+0xff007f70>
    7f7c:	8809883a 	mov	r4,r17
    7f80:	0007d380 	call	7d38 <_Balloc>
    7f84:	d8c00717 	ldw	r3,28(sp)
    7f88:	10c00515 	stw	r3,20(r2)
    7f8c:	00c00044 	movi	r3,1
    7f90:	10c00415 	stw	r3,16(r2)
    7f94:	00c00244 	movi	r3,9
    7f98:	1cc0210e 	bge	r3,r19,8020 <__s2b+0xf8>
    7f9c:	80eb883a 	add	r21,r16,r3
    7fa0:	a829883a 	mov	r20,r21
    7fa4:	84e1883a 	add	r16,r16,r19
    7fa8:	a1c00007 	ldb	r7,0(r20)
    7fac:	01800284 	movi	r6,10
    7fb0:	a5000044 	addi	r20,r20,1
    7fb4:	100b883a 	mov	r5,r2
    7fb8:	39fff404 	addi	r7,r7,-48
    7fbc:	8809883a 	mov	r4,r17
    7fc0:	0007e080 	call	7e08 <__multadd>
    7fc4:	a43ff81e 	bne	r20,r16,7fa8 <__alt_data_end+0xff007fa8>
    7fc8:	ace1883a 	add	r16,r21,r19
    7fcc:	843ffe04 	addi	r16,r16,-8
    7fd0:	9c800a0e 	bge	r19,r18,7ffc <__s2b+0xd4>
    7fd4:	94e5c83a 	sub	r18,r18,r19
    7fd8:	84a5883a 	add	r18,r16,r18
    7fdc:	81c00007 	ldb	r7,0(r16)
    7fe0:	01800284 	movi	r6,10
    7fe4:	84000044 	addi	r16,r16,1
    7fe8:	100b883a 	mov	r5,r2
    7fec:	39fff404 	addi	r7,r7,-48
    7ff0:	8809883a 	mov	r4,r17
    7ff4:	0007e080 	call	7e08 <__multadd>
    7ff8:	84bff81e 	bne	r16,r18,7fdc <__alt_data_end+0xff007fdc>
    7ffc:	dfc00617 	ldw	ra,24(sp)
    8000:	dd400517 	ldw	r21,20(sp)
    8004:	dd000417 	ldw	r20,16(sp)
    8008:	dcc00317 	ldw	r19,12(sp)
    800c:	dc800217 	ldw	r18,8(sp)
    8010:	dc400117 	ldw	r17,4(sp)
    8014:	dc000017 	ldw	r16,0(sp)
    8018:	dec00704 	addi	sp,sp,28
    801c:	f800283a 	ret
    8020:	84000284 	addi	r16,r16,10
    8024:	1827883a 	mov	r19,r3
    8028:	003fe906 	br	7fd0 <__alt_data_end+0xff007fd0>

0000802c <__hi0bits>:
    802c:	20bfffec 	andhi	r2,r4,65535
    8030:	1000141e 	bne	r2,zero,8084 <__hi0bits+0x58>
    8034:	2008943a 	slli	r4,r4,16
    8038:	00800404 	movi	r2,16
    803c:	20ffc02c 	andhi	r3,r4,65280
    8040:	1800021e 	bne	r3,zero,804c <__hi0bits+0x20>
    8044:	2008923a 	slli	r4,r4,8
    8048:	10800204 	addi	r2,r2,8
    804c:	20fc002c 	andhi	r3,r4,61440
    8050:	1800021e 	bne	r3,zero,805c <__hi0bits+0x30>
    8054:	2008913a 	slli	r4,r4,4
    8058:	10800104 	addi	r2,r2,4
    805c:	20f0002c 	andhi	r3,r4,49152
    8060:	1800031e 	bne	r3,zero,8070 <__hi0bits+0x44>
    8064:	2109883a 	add	r4,r4,r4
    8068:	10800084 	addi	r2,r2,2
    806c:	2109883a 	add	r4,r4,r4
    8070:	20000316 	blt	r4,zero,8080 <__hi0bits+0x54>
    8074:	2110002c 	andhi	r4,r4,16384
    8078:	2000041e 	bne	r4,zero,808c <__hi0bits+0x60>
    807c:	00800804 	movi	r2,32
    8080:	f800283a 	ret
    8084:	0005883a 	mov	r2,zero
    8088:	003fec06 	br	803c <__alt_data_end+0xff00803c>
    808c:	10800044 	addi	r2,r2,1
    8090:	f800283a 	ret

00008094 <__lo0bits>:
    8094:	20c00017 	ldw	r3,0(r4)
    8098:	188001cc 	andi	r2,r3,7
    809c:	10000826 	beq	r2,zero,80c0 <__lo0bits+0x2c>
    80a0:	1880004c 	andi	r2,r3,1
    80a4:	1000211e 	bne	r2,zero,812c <__lo0bits+0x98>
    80a8:	1880008c 	andi	r2,r3,2
    80ac:	1000211e 	bne	r2,zero,8134 <__lo0bits+0xa0>
    80b0:	1806d0ba 	srli	r3,r3,2
    80b4:	00800084 	movi	r2,2
    80b8:	20c00015 	stw	r3,0(r4)
    80bc:	f800283a 	ret
    80c0:	18bfffcc 	andi	r2,r3,65535
    80c4:	10001326 	beq	r2,zero,8114 <__lo0bits+0x80>
    80c8:	0005883a 	mov	r2,zero
    80cc:	19403fcc 	andi	r5,r3,255
    80d0:	2800021e 	bne	r5,zero,80dc <__lo0bits+0x48>
    80d4:	1806d23a 	srli	r3,r3,8
    80d8:	10800204 	addi	r2,r2,8
    80dc:	194003cc 	andi	r5,r3,15
    80e0:	2800021e 	bne	r5,zero,80ec <__lo0bits+0x58>
    80e4:	1806d13a 	srli	r3,r3,4
    80e8:	10800104 	addi	r2,r2,4
    80ec:	194000cc 	andi	r5,r3,3
    80f0:	2800021e 	bne	r5,zero,80fc <__lo0bits+0x68>
    80f4:	1806d0ba 	srli	r3,r3,2
    80f8:	10800084 	addi	r2,r2,2
    80fc:	1940004c 	andi	r5,r3,1
    8100:	2800081e 	bne	r5,zero,8124 <__lo0bits+0x90>
    8104:	1806d07a 	srli	r3,r3,1
    8108:	1800051e 	bne	r3,zero,8120 <__lo0bits+0x8c>
    810c:	00800804 	movi	r2,32
    8110:	f800283a 	ret
    8114:	1806d43a 	srli	r3,r3,16
    8118:	00800404 	movi	r2,16
    811c:	003feb06 	br	80cc <__alt_data_end+0xff0080cc>
    8120:	10800044 	addi	r2,r2,1
    8124:	20c00015 	stw	r3,0(r4)
    8128:	f800283a 	ret
    812c:	0005883a 	mov	r2,zero
    8130:	f800283a 	ret
    8134:	1806d07a 	srli	r3,r3,1
    8138:	00800044 	movi	r2,1
    813c:	20c00015 	stw	r3,0(r4)
    8140:	f800283a 	ret

00008144 <__i2b>:
    8144:	defffd04 	addi	sp,sp,-12
    8148:	dc000015 	stw	r16,0(sp)
    814c:	04000044 	movi	r16,1
    8150:	dc400115 	stw	r17,4(sp)
    8154:	2823883a 	mov	r17,r5
    8158:	800b883a 	mov	r5,r16
    815c:	dfc00215 	stw	ra,8(sp)
    8160:	0007d380 	call	7d38 <_Balloc>
    8164:	14400515 	stw	r17,20(r2)
    8168:	14000415 	stw	r16,16(r2)
    816c:	dfc00217 	ldw	ra,8(sp)
    8170:	dc400117 	ldw	r17,4(sp)
    8174:	dc000017 	ldw	r16,0(sp)
    8178:	dec00304 	addi	sp,sp,12
    817c:	f800283a 	ret

00008180 <__multiply>:
    8180:	defffa04 	addi	sp,sp,-24
    8184:	dcc00315 	stw	r19,12(sp)
    8188:	dc800215 	stw	r18,8(sp)
    818c:	34c00417 	ldw	r19,16(r6)
    8190:	2c800417 	ldw	r18,16(r5)
    8194:	dd000415 	stw	r20,16(sp)
    8198:	dc400115 	stw	r17,4(sp)
    819c:	dfc00515 	stw	ra,20(sp)
    81a0:	dc000015 	stw	r16,0(sp)
    81a4:	2829883a 	mov	r20,r5
    81a8:	3023883a 	mov	r17,r6
    81ac:	94c0050e 	bge	r18,r19,81c4 <__multiply+0x44>
    81b0:	9007883a 	mov	r3,r18
    81b4:	3029883a 	mov	r20,r6
    81b8:	9825883a 	mov	r18,r19
    81bc:	2823883a 	mov	r17,r5
    81c0:	1827883a 	mov	r19,r3
    81c4:	a0800217 	ldw	r2,8(r20)
    81c8:	94e1883a 	add	r16,r18,r19
    81cc:	a1400117 	ldw	r5,4(r20)
    81d0:	1400010e 	bge	r2,r16,81d8 <__multiply+0x58>
    81d4:	29400044 	addi	r5,r5,1
    81d8:	0007d380 	call	7d38 <_Balloc>
    81dc:	8415883a 	add	r10,r16,r16
    81e0:	12c00504 	addi	r11,r2,20
    81e4:	5295883a 	add	r10,r10,r10
    81e8:	5a95883a 	add	r10,r11,r10
    81ec:	5807883a 	mov	r3,r11
    81f0:	5a80032e 	bgeu	r11,r10,8200 <__multiply+0x80>
    81f4:	18000015 	stw	zero,0(r3)
    81f8:	18c00104 	addi	r3,r3,4
    81fc:	1abffd36 	bltu	r3,r10,81f4 <__alt_data_end+0xff0081f4>
    8200:	9ce7883a 	add	r19,r19,r19
    8204:	94a5883a 	add	r18,r18,r18
    8208:	89800504 	addi	r6,r17,20
    820c:	9ce7883a 	add	r19,r19,r19
    8210:	a3400504 	addi	r13,r20,20
    8214:	94a5883a 	add	r18,r18,r18
    8218:	34d9883a 	add	r12,r6,r19
    821c:	6c93883a 	add	r9,r13,r18
    8220:	3300422e 	bgeu	r6,r12,832c <__multiply+0x1ac>
    8224:	37c00017 	ldw	ra,0(r6)
    8228:	fbffffcc 	andi	r15,ra,65535
    822c:	78001b26 	beq	r15,zero,829c <__multiply+0x11c>
    8230:	5811883a 	mov	r8,r11
    8234:	681d883a 	mov	r14,r13
    8238:	000f883a 	mov	r7,zero
    823c:	71000017 	ldw	r4,0(r14)
    8240:	40c00017 	ldw	r3,0(r8)
    8244:	73800104 	addi	r14,r14,4
    8248:	217fffcc 	andi	r5,r4,65535
    824c:	2bcb383a 	mul	r5,r5,r15
    8250:	2008d43a 	srli	r4,r4,16
    8254:	1c7fffcc 	andi	r17,r3,65535
    8258:	2c4b883a 	add	r5,r5,r17
    825c:	29cb883a 	add	r5,r5,r7
    8260:	23c9383a 	mul	r4,r4,r15
    8264:	1806d43a 	srli	r3,r3,16
    8268:	280ed43a 	srli	r7,r5,16
    826c:	297fffcc 	andi	r5,r5,65535
    8270:	20c7883a 	add	r3,r4,r3
    8274:	19c7883a 	add	r3,r3,r7
    8278:	1808943a 	slli	r4,r3,16
    827c:	4023883a 	mov	r17,r8
    8280:	180ed43a 	srli	r7,r3,16
    8284:	214ab03a 	or	r5,r4,r5
    8288:	41400015 	stw	r5,0(r8)
    828c:	42000104 	addi	r8,r8,4
    8290:	727fea36 	bltu	r14,r9,823c <__alt_data_end+0xff00823c>
    8294:	89c00115 	stw	r7,4(r17)
    8298:	37c00017 	ldw	ra,0(r6)
    829c:	f83ed43a 	srli	ra,ra,16
    82a0:	f8001f26 	beq	ra,zero,8320 <__multiply+0x1a0>
    82a4:	58c00017 	ldw	r3,0(r11)
    82a8:	681d883a 	mov	r14,r13
    82ac:	581f883a 	mov	r15,r11
    82b0:	1811883a 	mov	r8,r3
    82b4:	5825883a 	mov	r18,r11
    82b8:	000f883a 	mov	r7,zero
    82bc:	00000106 	br	82c4 <__multiply+0x144>
    82c0:	8825883a 	mov	r18,r17
    82c4:	7140000b 	ldhu	r5,0(r14)
    82c8:	4010d43a 	srli	r8,r8,16
    82cc:	193fffcc 	andi	r4,r3,65535
    82d0:	2fcb383a 	mul	r5,r5,ra
    82d4:	7bc00104 	addi	r15,r15,4
    82d8:	73800104 	addi	r14,r14,4
    82dc:	2a0b883a 	add	r5,r5,r8
    82e0:	29cb883a 	add	r5,r5,r7
    82e4:	2806943a 	slli	r3,r5,16
    82e8:	94400104 	addi	r17,r18,4
    82ec:	280ad43a 	srli	r5,r5,16
    82f0:	1908b03a 	or	r4,r3,r4
    82f4:	793fff15 	stw	r4,-4(r15)
    82f8:	70ffff17 	ldw	r3,-4(r14)
    82fc:	8a000017 	ldw	r8,0(r17)
    8300:	1806d43a 	srli	r3,r3,16
    8304:	413fffcc 	andi	r4,r8,65535
    8308:	1fc7383a 	mul	r3,r3,ra
    830c:	1907883a 	add	r3,r3,r4
    8310:	1947883a 	add	r3,r3,r5
    8314:	180ed43a 	srli	r7,r3,16
    8318:	727fe936 	bltu	r14,r9,82c0 <__alt_data_end+0xff0082c0>
    831c:	90c00115 	stw	r3,4(r18)
    8320:	31800104 	addi	r6,r6,4
    8324:	5ac00104 	addi	r11,r11,4
    8328:	333fbe36 	bltu	r6,r12,8224 <__alt_data_end+0xff008224>
    832c:	0400090e 	bge	zero,r16,8354 <__multiply+0x1d4>
    8330:	50ffff17 	ldw	r3,-4(r10)
    8334:	52bfff04 	addi	r10,r10,-4
    8338:	18000326 	beq	r3,zero,8348 <__multiply+0x1c8>
    833c:	00000506 	br	8354 <__multiply+0x1d4>
    8340:	50c00017 	ldw	r3,0(r10)
    8344:	1800031e 	bne	r3,zero,8354 <__multiply+0x1d4>
    8348:	843fffc4 	addi	r16,r16,-1
    834c:	52bfff04 	addi	r10,r10,-4
    8350:	803ffb1e 	bne	r16,zero,8340 <__alt_data_end+0xff008340>
    8354:	14000415 	stw	r16,16(r2)
    8358:	dfc00517 	ldw	ra,20(sp)
    835c:	dd000417 	ldw	r20,16(sp)
    8360:	dcc00317 	ldw	r19,12(sp)
    8364:	dc800217 	ldw	r18,8(sp)
    8368:	dc400117 	ldw	r17,4(sp)
    836c:	dc000017 	ldw	r16,0(sp)
    8370:	dec00604 	addi	sp,sp,24
    8374:	f800283a 	ret

00008378 <__pow5mult>:
    8378:	defffa04 	addi	sp,sp,-24
    837c:	dcc00315 	stw	r19,12(sp)
    8380:	dc000015 	stw	r16,0(sp)
    8384:	dfc00515 	stw	ra,20(sp)
    8388:	dd000415 	stw	r20,16(sp)
    838c:	dc800215 	stw	r18,8(sp)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	308000cc 	andi	r2,r6,3
    8398:	3021883a 	mov	r16,r6
    839c:	2027883a 	mov	r19,r4
    83a0:	10002f1e 	bne	r2,zero,8460 <__pow5mult+0xe8>
    83a4:	2825883a 	mov	r18,r5
    83a8:	8021d0ba 	srai	r16,r16,2
    83ac:	80001a26 	beq	r16,zero,8418 <__pow5mult+0xa0>
    83b0:	9c401217 	ldw	r17,72(r19)
    83b4:	8800061e 	bne	r17,zero,83d0 <__pow5mult+0x58>
    83b8:	00003406 	br	848c <__pow5mult+0x114>
    83bc:	8021d07a 	srai	r16,r16,1
    83c0:	80001526 	beq	r16,zero,8418 <__pow5mult+0xa0>
    83c4:	88800017 	ldw	r2,0(r17)
    83c8:	10001c26 	beq	r2,zero,843c <__pow5mult+0xc4>
    83cc:	1023883a 	mov	r17,r2
    83d0:	8080004c 	andi	r2,r16,1
    83d4:	103ff926 	beq	r2,zero,83bc <__alt_data_end+0xff0083bc>
    83d8:	880d883a 	mov	r6,r17
    83dc:	900b883a 	mov	r5,r18
    83e0:	9809883a 	mov	r4,r19
    83e4:	00081800 	call	8180 <__multiply>
    83e8:	90001b26 	beq	r18,zero,8458 <__pow5mult+0xe0>
    83ec:	91000117 	ldw	r4,4(r18)
    83f0:	98c01317 	ldw	r3,76(r19)
    83f4:	8021d07a 	srai	r16,r16,1
    83f8:	2109883a 	add	r4,r4,r4
    83fc:	2109883a 	add	r4,r4,r4
    8400:	1907883a 	add	r3,r3,r4
    8404:	19000017 	ldw	r4,0(r3)
    8408:	91000015 	stw	r4,0(r18)
    840c:	1c800015 	stw	r18,0(r3)
    8410:	1025883a 	mov	r18,r2
    8414:	803feb1e 	bne	r16,zero,83c4 <__alt_data_end+0xff0083c4>
    8418:	9005883a 	mov	r2,r18
    841c:	dfc00517 	ldw	ra,20(sp)
    8420:	dd000417 	ldw	r20,16(sp)
    8424:	dcc00317 	ldw	r19,12(sp)
    8428:	dc800217 	ldw	r18,8(sp)
    842c:	dc400117 	ldw	r17,4(sp)
    8430:	dc000017 	ldw	r16,0(sp)
    8434:	dec00604 	addi	sp,sp,24
    8438:	f800283a 	ret
    843c:	880d883a 	mov	r6,r17
    8440:	880b883a 	mov	r5,r17
    8444:	9809883a 	mov	r4,r19
    8448:	00081800 	call	8180 <__multiply>
    844c:	88800015 	stw	r2,0(r17)
    8450:	10000015 	stw	zero,0(r2)
    8454:	003fdd06 	br	83cc <__alt_data_end+0xff0083cc>
    8458:	1025883a 	mov	r18,r2
    845c:	003fd706 	br	83bc <__alt_data_end+0xff0083bc>
    8460:	10bfffc4 	addi	r2,r2,-1
    8464:	1085883a 	add	r2,r2,r2
    8468:	00c00074 	movhi	r3,1
    846c:	18c54f04 	addi	r3,r3,5436
    8470:	1085883a 	add	r2,r2,r2
    8474:	1885883a 	add	r2,r3,r2
    8478:	11800017 	ldw	r6,0(r2)
    847c:	000f883a 	mov	r7,zero
    8480:	0007e080 	call	7e08 <__multadd>
    8484:	1025883a 	mov	r18,r2
    8488:	003fc706 	br	83a8 <__alt_data_end+0xff0083a8>
    848c:	05000044 	movi	r20,1
    8490:	a00b883a 	mov	r5,r20
    8494:	9809883a 	mov	r4,r19
    8498:	0007d380 	call	7d38 <_Balloc>
    849c:	1023883a 	mov	r17,r2
    84a0:	00809c44 	movi	r2,625
    84a4:	88800515 	stw	r2,20(r17)
    84a8:	8d000415 	stw	r20,16(r17)
    84ac:	9c401215 	stw	r17,72(r19)
    84b0:	88000015 	stw	zero,0(r17)
    84b4:	003fc606 	br	83d0 <__alt_data_end+0xff0083d0>

000084b8 <__lshift>:
    84b8:	defff904 	addi	sp,sp,-28
    84bc:	dd400515 	stw	r21,20(sp)
    84c0:	dcc00315 	stw	r19,12(sp)
    84c4:	302bd17a 	srai	r21,r6,5
    84c8:	2cc00417 	ldw	r19,16(r5)
    84cc:	28800217 	ldw	r2,8(r5)
    84d0:	dd000415 	stw	r20,16(sp)
    84d4:	ace7883a 	add	r19,r21,r19
    84d8:	dc800215 	stw	r18,8(sp)
    84dc:	dc400115 	stw	r17,4(sp)
    84e0:	dc000015 	stw	r16,0(sp)
    84e4:	dfc00615 	stw	ra,24(sp)
    84e8:	9c000044 	addi	r16,r19,1
    84ec:	2823883a 	mov	r17,r5
    84f0:	3029883a 	mov	r20,r6
    84f4:	2025883a 	mov	r18,r4
    84f8:	29400117 	ldw	r5,4(r5)
    84fc:	1400030e 	bge	r2,r16,850c <__lshift+0x54>
    8500:	1085883a 	add	r2,r2,r2
    8504:	29400044 	addi	r5,r5,1
    8508:	143ffd16 	blt	r2,r16,8500 <__alt_data_end+0xff008500>
    850c:	9009883a 	mov	r4,r18
    8510:	0007d380 	call	7d38 <_Balloc>
    8514:	10c00504 	addi	r3,r2,20
    8518:	0540070e 	bge	zero,r21,8538 <__lshift+0x80>
    851c:	ad6b883a 	add	r21,r21,r21
    8520:	ad6b883a 	add	r21,r21,r21
    8524:	1809883a 	mov	r4,r3
    8528:	1d47883a 	add	r3,r3,r21
    852c:	20000015 	stw	zero,0(r4)
    8530:	21000104 	addi	r4,r4,4
    8534:	193ffd1e 	bne	r3,r4,852c <__alt_data_end+0xff00852c>
    8538:	8a000417 	ldw	r8,16(r17)
    853c:	89000504 	addi	r4,r17,20
    8540:	a18007cc 	andi	r6,r20,31
    8544:	4211883a 	add	r8,r8,r8
    8548:	4211883a 	add	r8,r8,r8
    854c:	2211883a 	add	r8,r4,r8
    8550:	30002326 	beq	r6,zero,85e0 <__lshift+0x128>
    8554:	02400804 	movi	r9,32
    8558:	4993c83a 	sub	r9,r9,r6
    855c:	000b883a 	mov	r5,zero
    8560:	21c00017 	ldw	r7,0(r4)
    8564:	1815883a 	mov	r10,r3
    8568:	18c00104 	addi	r3,r3,4
    856c:	398e983a 	sll	r7,r7,r6
    8570:	21000104 	addi	r4,r4,4
    8574:	394ab03a 	or	r5,r7,r5
    8578:	197fff15 	stw	r5,-4(r3)
    857c:	217fff17 	ldw	r5,-4(r4)
    8580:	2a4ad83a 	srl	r5,r5,r9
    8584:	223ff636 	bltu	r4,r8,8560 <__alt_data_end+0xff008560>
    8588:	51400115 	stw	r5,4(r10)
    858c:	28001a1e 	bne	r5,zero,85f8 <__lshift+0x140>
    8590:	843fffc4 	addi	r16,r16,-1
    8594:	14000415 	stw	r16,16(r2)
    8598:	88000826 	beq	r17,zero,85bc <__lshift+0x104>
    859c:	89000117 	ldw	r4,4(r17)
    85a0:	90c01317 	ldw	r3,76(r18)
    85a4:	2109883a 	add	r4,r4,r4
    85a8:	2109883a 	add	r4,r4,r4
    85ac:	1907883a 	add	r3,r3,r4
    85b0:	19000017 	ldw	r4,0(r3)
    85b4:	89000015 	stw	r4,0(r17)
    85b8:	1c400015 	stw	r17,0(r3)
    85bc:	dfc00617 	ldw	ra,24(sp)
    85c0:	dd400517 	ldw	r21,20(sp)
    85c4:	dd000417 	ldw	r20,16(sp)
    85c8:	dcc00317 	ldw	r19,12(sp)
    85cc:	dc800217 	ldw	r18,8(sp)
    85d0:	dc400117 	ldw	r17,4(sp)
    85d4:	dc000017 	ldw	r16,0(sp)
    85d8:	dec00704 	addi	sp,sp,28
    85dc:	f800283a 	ret
    85e0:	21400017 	ldw	r5,0(r4)
    85e4:	18c00104 	addi	r3,r3,4
    85e8:	21000104 	addi	r4,r4,4
    85ec:	197fff15 	stw	r5,-4(r3)
    85f0:	223ffb36 	bltu	r4,r8,85e0 <__alt_data_end+0xff0085e0>
    85f4:	003fe606 	br	8590 <__alt_data_end+0xff008590>
    85f8:	9c000084 	addi	r16,r19,2
    85fc:	003fe406 	br	8590 <__alt_data_end+0xff008590>

00008600 <__mcmp>:
    8600:	20800417 	ldw	r2,16(r4)
    8604:	28c00417 	ldw	r3,16(r5)
    8608:	10c5c83a 	sub	r2,r2,r3
    860c:	1000111e 	bne	r2,zero,8654 <__mcmp+0x54>
    8610:	18c7883a 	add	r3,r3,r3
    8614:	18c7883a 	add	r3,r3,r3
    8618:	21000504 	addi	r4,r4,20
    861c:	29400504 	addi	r5,r5,20
    8620:	20c5883a 	add	r2,r4,r3
    8624:	28cb883a 	add	r5,r5,r3
    8628:	00000106 	br	8630 <__mcmp+0x30>
    862c:	20800a2e 	bgeu	r4,r2,8658 <__mcmp+0x58>
    8630:	10bfff04 	addi	r2,r2,-4
    8634:	297fff04 	addi	r5,r5,-4
    8638:	11800017 	ldw	r6,0(r2)
    863c:	28c00017 	ldw	r3,0(r5)
    8640:	30fffa26 	beq	r6,r3,862c <__alt_data_end+0xff00862c>
    8644:	30c00236 	bltu	r6,r3,8650 <__mcmp+0x50>
    8648:	00800044 	movi	r2,1
    864c:	f800283a 	ret
    8650:	00bfffc4 	movi	r2,-1
    8654:	f800283a 	ret
    8658:	0005883a 	mov	r2,zero
    865c:	f800283a 	ret

00008660 <__mdiff>:
    8660:	28c00417 	ldw	r3,16(r5)
    8664:	30800417 	ldw	r2,16(r6)
    8668:	defffa04 	addi	sp,sp,-24
    866c:	dcc00315 	stw	r19,12(sp)
    8670:	dc800215 	stw	r18,8(sp)
    8674:	dfc00515 	stw	ra,20(sp)
    8678:	dd000415 	stw	r20,16(sp)
    867c:	dc400115 	stw	r17,4(sp)
    8680:	dc000015 	stw	r16,0(sp)
    8684:	1887c83a 	sub	r3,r3,r2
    8688:	2825883a 	mov	r18,r5
    868c:	3027883a 	mov	r19,r6
    8690:	1800141e 	bne	r3,zero,86e4 <__mdiff+0x84>
    8694:	1085883a 	add	r2,r2,r2
    8698:	1085883a 	add	r2,r2,r2
    869c:	2a000504 	addi	r8,r5,20
    86a0:	34000504 	addi	r16,r6,20
    86a4:	4087883a 	add	r3,r8,r2
    86a8:	8085883a 	add	r2,r16,r2
    86ac:	00000106 	br	86b4 <__mdiff+0x54>
    86b0:	40c0592e 	bgeu	r8,r3,8818 <__mdiff+0x1b8>
    86b4:	18ffff04 	addi	r3,r3,-4
    86b8:	10bfff04 	addi	r2,r2,-4
    86bc:	19c00017 	ldw	r7,0(r3)
    86c0:	11400017 	ldw	r5,0(r2)
    86c4:	397ffa26 	beq	r7,r5,86b0 <__alt_data_end+0xff0086b0>
    86c8:	3940592e 	bgeu	r7,r5,8830 <__mdiff+0x1d0>
    86cc:	9005883a 	mov	r2,r18
    86d0:	4023883a 	mov	r17,r8
    86d4:	9825883a 	mov	r18,r19
    86d8:	05000044 	movi	r20,1
    86dc:	1027883a 	mov	r19,r2
    86e0:	00000406 	br	86f4 <__mdiff+0x94>
    86e4:	18005616 	blt	r3,zero,8840 <__mdiff+0x1e0>
    86e8:	34400504 	addi	r17,r6,20
    86ec:	2c000504 	addi	r16,r5,20
    86f0:	0029883a 	mov	r20,zero
    86f4:	91400117 	ldw	r5,4(r18)
    86f8:	0007d380 	call	7d38 <_Balloc>
    86fc:	92400417 	ldw	r9,16(r18)
    8700:	9b000417 	ldw	r12,16(r19)
    8704:	12c00504 	addi	r11,r2,20
    8708:	4a51883a 	add	r8,r9,r9
    870c:	6319883a 	add	r12,r12,r12
    8710:	4211883a 	add	r8,r8,r8
    8714:	6319883a 	add	r12,r12,r12
    8718:	15000315 	stw	r20,12(r2)
    871c:	8211883a 	add	r8,r16,r8
    8720:	8b19883a 	add	r12,r17,r12
    8724:	0007883a 	mov	r3,zero
    8728:	81400017 	ldw	r5,0(r16)
    872c:	89c00017 	ldw	r7,0(r17)
    8730:	59800104 	addi	r6,r11,4
    8734:	293fffcc 	andi	r4,r5,65535
    8738:	20c7883a 	add	r3,r4,r3
    873c:	393fffcc 	andi	r4,r7,65535
    8740:	1909c83a 	sub	r4,r3,r4
    8744:	280ad43a 	srli	r5,r5,16
    8748:	380ed43a 	srli	r7,r7,16
    874c:	2007d43a 	srai	r3,r4,16
    8750:	213fffcc 	andi	r4,r4,65535
    8754:	29cbc83a 	sub	r5,r5,r7
    8758:	28c7883a 	add	r3,r5,r3
    875c:	180a943a 	slli	r5,r3,16
    8760:	8c400104 	addi	r17,r17,4
    8764:	84000104 	addi	r16,r16,4
    8768:	2908b03a 	or	r4,r5,r4
    876c:	59000015 	stw	r4,0(r11)
    8770:	1807d43a 	srai	r3,r3,16
    8774:	3015883a 	mov	r10,r6
    8778:	3017883a 	mov	r11,r6
    877c:	8b3fea36 	bltu	r17,r12,8728 <__alt_data_end+0xff008728>
    8780:	8200162e 	bgeu	r16,r8,87dc <__mdiff+0x17c>
    8784:	8017883a 	mov	r11,r16
    8788:	59400017 	ldw	r5,0(r11)
    878c:	31800104 	addi	r6,r6,4
    8790:	5ac00104 	addi	r11,r11,4
    8794:	293fffcc 	andi	r4,r5,65535
    8798:	20c7883a 	add	r3,r4,r3
    879c:	280ed43a 	srli	r7,r5,16
    87a0:	180bd43a 	srai	r5,r3,16
    87a4:	193fffcc 	andi	r4,r3,65535
    87a8:	3947883a 	add	r3,r7,r5
    87ac:	180a943a 	slli	r5,r3,16
    87b0:	1807d43a 	srai	r3,r3,16
    87b4:	2908b03a 	or	r4,r5,r4
    87b8:	313fff15 	stw	r4,-4(r6)
    87bc:	5a3ff236 	bltu	r11,r8,8788 <__alt_data_end+0xff008788>
    87c0:	0406303a 	nor	r3,zero,r16
    87c4:	1a07883a 	add	r3,r3,r8
    87c8:	1806d0ba 	srli	r3,r3,2
    87cc:	18c00044 	addi	r3,r3,1
    87d0:	18c7883a 	add	r3,r3,r3
    87d4:	18c7883a 	add	r3,r3,r3
    87d8:	50d5883a 	add	r10,r10,r3
    87dc:	50ffff04 	addi	r3,r10,-4
    87e0:	2000041e 	bne	r4,zero,87f4 <__mdiff+0x194>
    87e4:	18ffff04 	addi	r3,r3,-4
    87e8:	19000017 	ldw	r4,0(r3)
    87ec:	4a7fffc4 	addi	r9,r9,-1
    87f0:	203ffc26 	beq	r4,zero,87e4 <__alt_data_end+0xff0087e4>
    87f4:	12400415 	stw	r9,16(r2)
    87f8:	dfc00517 	ldw	ra,20(sp)
    87fc:	dd000417 	ldw	r20,16(sp)
    8800:	dcc00317 	ldw	r19,12(sp)
    8804:	dc800217 	ldw	r18,8(sp)
    8808:	dc400117 	ldw	r17,4(sp)
    880c:	dc000017 	ldw	r16,0(sp)
    8810:	dec00604 	addi	sp,sp,24
    8814:	f800283a 	ret
    8818:	000b883a 	mov	r5,zero
    881c:	0007d380 	call	7d38 <_Balloc>
    8820:	00c00044 	movi	r3,1
    8824:	10c00415 	stw	r3,16(r2)
    8828:	10000515 	stw	zero,20(r2)
    882c:	003ff206 	br	87f8 <__alt_data_end+0xff0087f8>
    8830:	8023883a 	mov	r17,r16
    8834:	0029883a 	mov	r20,zero
    8838:	4021883a 	mov	r16,r8
    883c:	003fad06 	br	86f4 <__alt_data_end+0xff0086f4>
    8840:	9005883a 	mov	r2,r18
    8844:	94400504 	addi	r17,r18,20
    8848:	9c000504 	addi	r16,r19,20
    884c:	9825883a 	mov	r18,r19
    8850:	05000044 	movi	r20,1
    8854:	1027883a 	mov	r19,r2
    8858:	003fa606 	br	86f4 <__alt_data_end+0xff0086f4>

0000885c <__ulp>:
    885c:	295ffc2c 	andhi	r5,r5,32752
    8860:	00bf3034 	movhi	r2,64704
    8864:	2887883a 	add	r3,r5,r2
    8868:	00c0020e 	bge	zero,r3,8874 <__ulp+0x18>
    886c:	0005883a 	mov	r2,zero
    8870:	f800283a 	ret
    8874:	00c7c83a 	sub	r3,zero,r3
    8878:	1807d53a 	srai	r3,r3,20
    887c:	008004c4 	movi	r2,19
    8880:	10c00b0e 	bge	r2,r3,88b0 <__ulp+0x54>
    8884:	18bffb04 	addi	r2,r3,-20
    8888:	01000784 	movi	r4,30
    888c:	0007883a 	mov	r3,zero
    8890:	20800516 	blt	r4,r2,88a8 <__ulp+0x4c>
    8894:	010007c4 	movi	r4,31
    8898:	2089c83a 	sub	r4,r4,r2
    889c:	00800044 	movi	r2,1
    88a0:	1104983a 	sll	r2,r2,r4
    88a4:	f800283a 	ret
    88a8:	00800044 	movi	r2,1
    88ac:	f800283a 	ret
    88b0:	01400234 	movhi	r5,8
    88b4:	28c7d83a 	sra	r3,r5,r3
    88b8:	0005883a 	mov	r2,zero
    88bc:	f800283a 	ret

000088c0 <__b2d>:
    88c0:	defffa04 	addi	sp,sp,-24
    88c4:	dc000015 	stw	r16,0(sp)
    88c8:	24000417 	ldw	r16,16(r4)
    88cc:	dc400115 	stw	r17,4(sp)
    88d0:	24400504 	addi	r17,r4,20
    88d4:	8421883a 	add	r16,r16,r16
    88d8:	8421883a 	add	r16,r16,r16
    88dc:	8c21883a 	add	r16,r17,r16
    88e0:	dc800215 	stw	r18,8(sp)
    88e4:	84bfff17 	ldw	r18,-4(r16)
    88e8:	dd000415 	stw	r20,16(sp)
    88ec:	dcc00315 	stw	r19,12(sp)
    88f0:	9009883a 	mov	r4,r18
    88f4:	2829883a 	mov	r20,r5
    88f8:	dfc00515 	stw	ra,20(sp)
    88fc:	000802c0 	call	802c <__hi0bits>
    8900:	00c00804 	movi	r3,32
    8904:	1889c83a 	sub	r4,r3,r2
    8908:	a1000015 	stw	r4,0(r20)
    890c:	01000284 	movi	r4,10
    8910:	84ffff04 	addi	r19,r16,-4
    8914:	20801216 	blt	r4,r2,8960 <__b2d+0xa0>
    8918:	018002c4 	movi	r6,11
    891c:	308dc83a 	sub	r6,r6,r2
    8920:	9186d83a 	srl	r3,r18,r6
    8924:	18cffc34 	orhi	r3,r3,16368
    8928:	8cc0212e 	bgeu	r17,r19,89b0 <__b2d+0xf0>
    892c:	813ffe17 	ldw	r4,-8(r16)
    8930:	218cd83a 	srl	r6,r4,r6
    8934:	10800544 	addi	r2,r2,21
    8938:	9084983a 	sll	r2,r18,r2
    893c:	1184b03a 	or	r2,r2,r6
    8940:	dfc00517 	ldw	ra,20(sp)
    8944:	dd000417 	ldw	r20,16(sp)
    8948:	dcc00317 	ldw	r19,12(sp)
    894c:	dc800217 	ldw	r18,8(sp)
    8950:	dc400117 	ldw	r17,4(sp)
    8954:	dc000017 	ldw	r16,0(sp)
    8958:	dec00604 	addi	sp,sp,24
    895c:	f800283a 	ret
    8960:	8cc00f2e 	bgeu	r17,r19,89a0 <__b2d+0xe0>
    8964:	117ffd44 	addi	r5,r2,-11
    8968:	80bffe17 	ldw	r2,-8(r16)
    896c:	28000e26 	beq	r5,zero,89a8 <__b2d+0xe8>
    8970:	1949c83a 	sub	r4,r3,r5
    8974:	9164983a 	sll	r18,r18,r5
    8978:	1106d83a 	srl	r3,r2,r4
    897c:	81bffe04 	addi	r6,r16,-8
    8980:	948ffc34 	orhi	r18,r18,16368
    8984:	90c6b03a 	or	r3,r18,r3
    8988:	89800e2e 	bgeu	r17,r6,89c4 <__b2d+0x104>
    898c:	81bffd17 	ldw	r6,-12(r16)
    8990:	1144983a 	sll	r2,r2,r5
    8994:	310ad83a 	srl	r5,r6,r4
    8998:	2884b03a 	or	r2,r5,r2
    899c:	003fe806 	br	8940 <__alt_data_end+0xff008940>
    89a0:	10bffd44 	addi	r2,r2,-11
    89a4:	1000041e 	bne	r2,zero,89b8 <__b2d+0xf8>
    89a8:	90cffc34 	orhi	r3,r18,16368
    89ac:	003fe406 	br	8940 <__alt_data_end+0xff008940>
    89b0:	000d883a 	mov	r6,zero
    89b4:	003fdf06 	br	8934 <__alt_data_end+0xff008934>
    89b8:	90a4983a 	sll	r18,r18,r2
    89bc:	0005883a 	mov	r2,zero
    89c0:	003ff906 	br	89a8 <__alt_data_end+0xff0089a8>
    89c4:	1144983a 	sll	r2,r2,r5
    89c8:	003fdd06 	br	8940 <__alt_data_end+0xff008940>

000089cc <__d2b>:
    89cc:	defff804 	addi	sp,sp,-32
    89d0:	dc000215 	stw	r16,8(sp)
    89d4:	3021883a 	mov	r16,r6
    89d8:	dc400315 	stw	r17,12(sp)
    89dc:	8022907a 	slli	r17,r16,1
    89e0:	dd000615 	stw	r20,24(sp)
    89e4:	2829883a 	mov	r20,r5
    89e8:	01400044 	movi	r5,1
    89ec:	dcc00515 	stw	r19,20(sp)
    89f0:	dc800415 	stw	r18,16(sp)
    89f4:	dfc00715 	stw	ra,28(sp)
    89f8:	3825883a 	mov	r18,r7
    89fc:	8822d57a 	srli	r17,r17,21
    8a00:	0007d380 	call	7d38 <_Balloc>
    8a04:	1027883a 	mov	r19,r2
    8a08:	00800434 	movhi	r2,16
    8a0c:	10bfffc4 	addi	r2,r2,-1
    8a10:	808c703a 	and	r6,r16,r2
    8a14:	88000126 	beq	r17,zero,8a1c <__d2b+0x50>
    8a18:	31800434 	orhi	r6,r6,16
    8a1c:	d9800015 	stw	r6,0(sp)
    8a20:	a0002426 	beq	r20,zero,8ab4 <__d2b+0xe8>
    8a24:	d9000104 	addi	r4,sp,4
    8a28:	dd000115 	stw	r20,4(sp)
    8a2c:	00080940 	call	8094 <__lo0bits>
    8a30:	d8c00017 	ldw	r3,0(sp)
    8a34:	10002f1e 	bne	r2,zero,8af4 <__d2b+0x128>
    8a38:	d9000117 	ldw	r4,4(sp)
    8a3c:	99000515 	stw	r4,20(r19)
    8a40:	1821003a 	cmpeq	r16,r3,zero
    8a44:	01000084 	movi	r4,2
    8a48:	2421c83a 	sub	r16,r4,r16
    8a4c:	98c00615 	stw	r3,24(r19)
    8a50:	9c000415 	stw	r16,16(r19)
    8a54:	88001f1e 	bne	r17,zero,8ad4 <__d2b+0x108>
    8a58:	10bef384 	addi	r2,r2,-1074
    8a5c:	90800015 	stw	r2,0(r18)
    8a60:	00900034 	movhi	r2,16384
    8a64:	10bfffc4 	addi	r2,r2,-1
    8a68:	8085883a 	add	r2,r16,r2
    8a6c:	1085883a 	add	r2,r2,r2
    8a70:	1085883a 	add	r2,r2,r2
    8a74:	9885883a 	add	r2,r19,r2
    8a78:	11000517 	ldw	r4,20(r2)
    8a7c:	8020917a 	slli	r16,r16,5
    8a80:	000802c0 	call	802c <__hi0bits>
    8a84:	d8c00817 	ldw	r3,32(sp)
    8a88:	8085c83a 	sub	r2,r16,r2
    8a8c:	18800015 	stw	r2,0(r3)
    8a90:	9805883a 	mov	r2,r19
    8a94:	dfc00717 	ldw	ra,28(sp)
    8a98:	dd000617 	ldw	r20,24(sp)
    8a9c:	dcc00517 	ldw	r19,20(sp)
    8aa0:	dc800417 	ldw	r18,16(sp)
    8aa4:	dc400317 	ldw	r17,12(sp)
    8aa8:	dc000217 	ldw	r16,8(sp)
    8aac:	dec00804 	addi	sp,sp,32
    8ab0:	f800283a 	ret
    8ab4:	d809883a 	mov	r4,sp
    8ab8:	00080940 	call	8094 <__lo0bits>
    8abc:	d8c00017 	ldw	r3,0(sp)
    8ac0:	04000044 	movi	r16,1
    8ac4:	9c000415 	stw	r16,16(r19)
    8ac8:	98c00515 	stw	r3,20(r19)
    8acc:	10800804 	addi	r2,r2,32
    8ad0:	883fe126 	beq	r17,zero,8a58 <__alt_data_end+0xff008a58>
    8ad4:	00c00d44 	movi	r3,53
    8ad8:	8c7ef344 	addi	r17,r17,-1075
    8adc:	88a3883a 	add	r17,r17,r2
    8ae0:	1885c83a 	sub	r2,r3,r2
    8ae4:	d8c00817 	ldw	r3,32(sp)
    8ae8:	94400015 	stw	r17,0(r18)
    8aec:	18800015 	stw	r2,0(r3)
    8af0:	003fe706 	br	8a90 <__alt_data_end+0xff008a90>
    8af4:	01000804 	movi	r4,32
    8af8:	2089c83a 	sub	r4,r4,r2
    8afc:	1908983a 	sll	r4,r3,r4
    8b00:	d9400117 	ldw	r5,4(sp)
    8b04:	1886d83a 	srl	r3,r3,r2
    8b08:	2148b03a 	or	r4,r4,r5
    8b0c:	99000515 	stw	r4,20(r19)
    8b10:	d8c00015 	stw	r3,0(sp)
    8b14:	003fca06 	br	8a40 <__alt_data_end+0xff008a40>

00008b18 <__ratio>:
    8b18:	defff904 	addi	sp,sp,-28
    8b1c:	dc400315 	stw	r17,12(sp)
    8b20:	2823883a 	mov	r17,r5
    8b24:	d9400104 	addi	r5,sp,4
    8b28:	dfc00615 	stw	ra,24(sp)
    8b2c:	dcc00515 	stw	r19,20(sp)
    8b30:	dc800415 	stw	r18,16(sp)
    8b34:	2027883a 	mov	r19,r4
    8b38:	dc000215 	stw	r16,8(sp)
    8b3c:	00088c00 	call	88c0 <__b2d>
    8b40:	d80b883a 	mov	r5,sp
    8b44:	8809883a 	mov	r4,r17
    8b48:	1025883a 	mov	r18,r2
    8b4c:	1821883a 	mov	r16,r3
    8b50:	00088c00 	call	88c0 <__b2d>
    8b54:	8a000417 	ldw	r8,16(r17)
    8b58:	99000417 	ldw	r4,16(r19)
    8b5c:	d9400117 	ldw	r5,4(sp)
    8b60:	2209c83a 	sub	r4,r4,r8
    8b64:	2010917a 	slli	r8,r4,5
    8b68:	d9000017 	ldw	r4,0(sp)
    8b6c:	2909c83a 	sub	r4,r5,r4
    8b70:	4109883a 	add	r4,r8,r4
    8b74:	01000e0e 	bge	zero,r4,8bb0 <__ratio+0x98>
    8b78:	2008953a 	slli	r4,r4,20
    8b7c:	2421883a 	add	r16,r4,r16
    8b80:	100d883a 	mov	r6,r2
    8b84:	180f883a 	mov	r7,r3
    8b88:	9009883a 	mov	r4,r18
    8b8c:	800b883a 	mov	r5,r16
    8b90:	000c7fc0 	call	c7fc <__divdf3>
    8b94:	dfc00617 	ldw	ra,24(sp)
    8b98:	dcc00517 	ldw	r19,20(sp)
    8b9c:	dc800417 	ldw	r18,16(sp)
    8ba0:	dc400317 	ldw	r17,12(sp)
    8ba4:	dc000217 	ldw	r16,8(sp)
    8ba8:	dec00704 	addi	sp,sp,28
    8bac:	f800283a 	ret
    8bb0:	2008953a 	slli	r4,r4,20
    8bb4:	1907c83a 	sub	r3,r3,r4
    8bb8:	003ff106 	br	8b80 <__alt_data_end+0xff008b80>

00008bbc <_mprec_log10>:
    8bbc:	defffe04 	addi	sp,sp,-8
    8bc0:	dc000015 	stw	r16,0(sp)
    8bc4:	dfc00115 	stw	ra,4(sp)
    8bc8:	008005c4 	movi	r2,23
    8bcc:	2021883a 	mov	r16,r4
    8bd0:	11000d0e 	bge	r2,r4,8c08 <_mprec_log10+0x4c>
    8bd4:	0005883a 	mov	r2,zero
    8bd8:	00cffc34 	movhi	r3,16368
    8bdc:	843fffc4 	addi	r16,r16,-1
    8be0:	000d883a 	mov	r6,zero
    8be4:	01d00934 	movhi	r7,16420
    8be8:	1009883a 	mov	r4,r2
    8bec:	180b883a 	mov	r5,r3
    8bf0:	000d33c0 	call	d33c <__muldf3>
    8bf4:	803ff91e 	bne	r16,zero,8bdc <__alt_data_end+0xff008bdc>
    8bf8:	dfc00117 	ldw	ra,4(sp)
    8bfc:	dc000017 	ldw	r16,0(sp)
    8c00:	dec00204 	addi	sp,sp,8
    8c04:	f800283a 	ret
    8c08:	202090fa 	slli	r16,r4,3
    8c0c:	00800074 	movhi	r2,1
    8c10:	10856604 	addi	r2,r2,5528
    8c14:	1421883a 	add	r16,r2,r16
    8c18:	80800017 	ldw	r2,0(r16)
    8c1c:	80c00117 	ldw	r3,4(r16)
    8c20:	dfc00117 	ldw	ra,4(sp)
    8c24:	dc000017 	ldw	r16,0(sp)
    8c28:	dec00204 	addi	sp,sp,8
    8c2c:	f800283a 	ret

00008c30 <__copybits>:
    8c30:	297fffc4 	addi	r5,r5,-1
    8c34:	280fd17a 	srai	r7,r5,5
    8c38:	30c00417 	ldw	r3,16(r6)
    8c3c:	30800504 	addi	r2,r6,20
    8c40:	39c00044 	addi	r7,r7,1
    8c44:	18c7883a 	add	r3,r3,r3
    8c48:	39cf883a 	add	r7,r7,r7
    8c4c:	18c7883a 	add	r3,r3,r3
    8c50:	39cf883a 	add	r7,r7,r7
    8c54:	10c7883a 	add	r3,r2,r3
    8c58:	21cf883a 	add	r7,r4,r7
    8c5c:	10c00d2e 	bgeu	r2,r3,8c94 <__copybits+0x64>
    8c60:	200b883a 	mov	r5,r4
    8c64:	12000017 	ldw	r8,0(r2)
    8c68:	29400104 	addi	r5,r5,4
    8c6c:	10800104 	addi	r2,r2,4
    8c70:	2a3fff15 	stw	r8,-4(r5)
    8c74:	10fffb36 	bltu	r2,r3,8c64 <__alt_data_end+0xff008c64>
    8c78:	1985c83a 	sub	r2,r3,r6
    8c7c:	10bffac4 	addi	r2,r2,-21
    8c80:	1004d0ba 	srli	r2,r2,2
    8c84:	10800044 	addi	r2,r2,1
    8c88:	1085883a 	add	r2,r2,r2
    8c8c:	1085883a 	add	r2,r2,r2
    8c90:	2089883a 	add	r4,r4,r2
    8c94:	21c0032e 	bgeu	r4,r7,8ca4 <__copybits+0x74>
    8c98:	20000015 	stw	zero,0(r4)
    8c9c:	21000104 	addi	r4,r4,4
    8ca0:	21fffd36 	bltu	r4,r7,8c98 <__alt_data_end+0xff008c98>
    8ca4:	f800283a 	ret

00008ca8 <__any_on>:
    8ca8:	20c00417 	ldw	r3,16(r4)
    8cac:	2805d17a 	srai	r2,r5,5
    8cb0:	21000504 	addi	r4,r4,20
    8cb4:	18800d0e 	bge	r3,r2,8cec <__any_on+0x44>
    8cb8:	18c7883a 	add	r3,r3,r3
    8cbc:	18c7883a 	add	r3,r3,r3
    8cc0:	20c7883a 	add	r3,r4,r3
    8cc4:	20c0192e 	bgeu	r4,r3,8d2c <__any_on+0x84>
    8cc8:	18bfff17 	ldw	r2,-4(r3)
    8ccc:	18ffff04 	addi	r3,r3,-4
    8cd0:	1000041e 	bne	r2,zero,8ce4 <__any_on+0x3c>
    8cd4:	20c0142e 	bgeu	r4,r3,8d28 <__any_on+0x80>
    8cd8:	18ffff04 	addi	r3,r3,-4
    8cdc:	19400017 	ldw	r5,0(r3)
    8ce0:	283ffc26 	beq	r5,zero,8cd4 <__alt_data_end+0xff008cd4>
    8ce4:	00800044 	movi	r2,1
    8ce8:	f800283a 	ret
    8cec:	10c00a0e 	bge	r2,r3,8d18 <__any_on+0x70>
    8cf0:	1085883a 	add	r2,r2,r2
    8cf4:	1085883a 	add	r2,r2,r2
    8cf8:	294007cc 	andi	r5,r5,31
    8cfc:	2087883a 	add	r3,r4,r2
    8d00:	283ff026 	beq	r5,zero,8cc4 <__alt_data_end+0xff008cc4>
    8d04:	19800017 	ldw	r6,0(r3)
    8d08:	3144d83a 	srl	r2,r6,r5
    8d0c:	114a983a 	sll	r5,r2,r5
    8d10:	317ff41e 	bne	r6,r5,8ce4 <__alt_data_end+0xff008ce4>
    8d14:	003feb06 	br	8cc4 <__alt_data_end+0xff008cc4>
    8d18:	1085883a 	add	r2,r2,r2
    8d1c:	1085883a 	add	r2,r2,r2
    8d20:	2087883a 	add	r3,r4,r2
    8d24:	003fe706 	br	8cc4 <__alt_data_end+0xff008cc4>
    8d28:	f800283a 	ret
    8d2c:	0005883a 	mov	r2,zero
    8d30:	f800283a 	ret

00008d34 <_realloc_r>:
    8d34:	defff604 	addi	sp,sp,-40
    8d38:	dc800215 	stw	r18,8(sp)
    8d3c:	dfc00915 	stw	ra,36(sp)
    8d40:	df000815 	stw	fp,32(sp)
    8d44:	ddc00715 	stw	r23,28(sp)
    8d48:	dd800615 	stw	r22,24(sp)
    8d4c:	dd400515 	stw	r21,20(sp)
    8d50:	dd000415 	stw	r20,16(sp)
    8d54:	dcc00315 	stw	r19,12(sp)
    8d58:	dc400115 	stw	r17,4(sp)
    8d5c:	dc000015 	stw	r16,0(sp)
    8d60:	3025883a 	mov	r18,r6
    8d64:	2800b726 	beq	r5,zero,9044 <_realloc_r+0x310>
    8d68:	282b883a 	mov	r21,r5
    8d6c:	2029883a 	mov	r20,r4
    8d70:	000eb340 	call	eb34 <__malloc_lock>
    8d74:	a8bfff17 	ldw	r2,-4(r21)
    8d78:	043fff04 	movi	r16,-4
    8d7c:	90c002c4 	addi	r3,r18,11
    8d80:	01000584 	movi	r4,22
    8d84:	acfffe04 	addi	r19,r21,-8
    8d88:	1420703a 	and	r16,r2,r16
    8d8c:	20c0332e 	bgeu	r4,r3,8e5c <_realloc_r+0x128>
    8d90:	047ffe04 	movi	r17,-8
    8d94:	1c62703a 	and	r17,r3,r17
    8d98:	8807883a 	mov	r3,r17
    8d9c:	88005816 	blt	r17,zero,8f00 <_realloc_r+0x1cc>
    8da0:	8c805736 	bltu	r17,r18,8f00 <_realloc_r+0x1cc>
    8da4:	80c0300e 	bge	r16,r3,8e68 <_realloc_r+0x134>
    8da8:	07000074 	movhi	fp,1
    8dac:	e7062b04 	addi	fp,fp,6316
    8db0:	e1c00217 	ldw	r7,8(fp)
    8db4:	9c09883a 	add	r4,r19,r16
    8db8:	22000117 	ldw	r8,4(r4)
    8dbc:	21c06326 	beq	r4,r7,8f4c <_realloc_r+0x218>
    8dc0:	017fff84 	movi	r5,-2
    8dc4:	414a703a 	and	r5,r8,r5
    8dc8:	214b883a 	add	r5,r4,r5
    8dcc:	29800117 	ldw	r6,4(r5)
    8dd0:	3180004c 	andi	r6,r6,1
    8dd4:	30003f26 	beq	r6,zero,8ed4 <_realloc_r+0x1a0>
    8dd8:	1080004c 	andi	r2,r2,1
    8ddc:	10008326 	beq	r2,zero,8fec <_realloc_r+0x2b8>
    8de0:	900b883a 	mov	r5,r18
    8de4:	a009883a 	mov	r4,r20
    8de8:	0001e4c0 	call	1e4c <_malloc_r>
    8dec:	1025883a 	mov	r18,r2
    8df0:	10011e26 	beq	r2,zero,926c <_realloc_r+0x538>
    8df4:	a93fff17 	ldw	r4,-4(r21)
    8df8:	10fffe04 	addi	r3,r2,-8
    8dfc:	00bfff84 	movi	r2,-2
    8e00:	2084703a 	and	r2,r4,r2
    8e04:	9885883a 	add	r2,r19,r2
    8e08:	1880ee26 	beq	r3,r2,91c4 <_realloc_r+0x490>
    8e0c:	81bfff04 	addi	r6,r16,-4
    8e10:	00800904 	movi	r2,36
    8e14:	1180b836 	bltu	r2,r6,90f8 <_realloc_r+0x3c4>
    8e18:	00c004c4 	movi	r3,19
    8e1c:	19809636 	bltu	r3,r6,9078 <_realloc_r+0x344>
    8e20:	9005883a 	mov	r2,r18
    8e24:	a807883a 	mov	r3,r21
    8e28:	19000017 	ldw	r4,0(r3)
    8e2c:	11000015 	stw	r4,0(r2)
    8e30:	19000117 	ldw	r4,4(r3)
    8e34:	11000115 	stw	r4,4(r2)
    8e38:	18c00217 	ldw	r3,8(r3)
    8e3c:	10c00215 	stw	r3,8(r2)
    8e40:	a80b883a 	mov	r5,r21
    8e44:	a009883a 	mov	r4,r20
    8e48:	0006c9c0 	call	6c9c <_free_r>
    8e4c:	a009883a 	mov	r4,r20
    8e50:	000eb580 	call	eb58 <__malloc_unlock>
    8e54:	9005883a 	mov	r2,r18
    8e58:	00001206 	br	8ea4 <_realloc_r+0x170>
    8e5c:	00c00404 	movi	r3,16
    8e60:	1823883a 	mov	r17,r3
    8e64:	003fce06 	br	8da0 <__alt_data_end+0xff008da0>
    8e68:	a825883a 	mov	r18,r21
    8e6c:	8445c83a 	sub	r2,r16,r17
    8e70:	00c003c4 	movi	r3,15
    8e74:	18802636 	bltu	r3,r2,8f10 <_realloc_r+0x1dc>
    8e78:	99800117 	ldw	r6,4(r19)
    8e7c:	9c07883a 	add	r3,r19,r16
    8e80:	3180004c 	andi	r6,r6,1
    8e84:	3420b03a 	or	r16,r6,r16
    8e88:	9c000115 	stw	r16,4(r19)
    8e8c:	18800117 	ldw	r2,4(r3)
    8e90:	10800054 	ori	r2,r2,1
    8e94:	18800115 	stw	r2,4(r3)
    8e98:	a009883a 	mov	r4,r20
    8e9c:	000eb580 	call	eb58 <__malloc_unlock>
    8ea0:	9005883a 	mov	r2,r18
    8ea4:	dfc00917 	ldw	ra,36(sp)
    8ea8:	df000817 	ldw	fp,32(sp)
    8eac:	ddc00717 	ldw	r23,28(sp)
    8eb0:	dd800617 	ldw	r22,24(sp)
    8eb4:	dd400517 	ldw	r21,20(sp)
    8eb8:	dd000417 	ldw	r20,16(sp)
    8ebc:	dcc00317 	ldw	r19,12(sp)
    8ec0:	dc800217 	ldw	r18,8(sp)
    8ec4:	dc400117 	ldw	r17,4(sp)
    8ec8:	dc000017 	ldw	r16,0(sp)
    8ecc:	dec00a04 	addi	sp,sp,40
    8ed0:	f800283a 	ret
    8ed4:	017fff04 	movi	r5,-4
    8ed8:	414a703a 	and	r5,r8,r5
    8edc:	814d883a 	add	r6,r16,r5
    8ee0:	30c01f16 	blt	r6,r3,8f60 <_realloc_r+0x22c>
    8ee4:	20800317 	ldw	r2,12(r4)
    8ee8:	20c00217 	ldw	r3,8(r4)
    8eec:	a825883a 	mov	r18,r21
    8ef0:	3021883a 	mov	r16,r6
    8ef4:	18800315 	stw	r2,12(r3)
    8ef8:	10c00215 	stw	r3,8(r2)
    8efc:	003fdb06 	br	8e6c <__alt_data_end+0xff008e6c>
    8f00:	00800304 	movi	r2,12
    8f04:	a0800015 	stw	r2,0(r20)
    8f08:	0005883a 	mov	r2,zero
    8f0c:	003fe506 	br	8ea4 <__alt_data_end+0xff008ea4>
    8f10:	98c00117 	ldw	r3,4(r19)
    8f14:	9c4b883a 	add	r5,r19,r17
    8f18:	11000054 	ori	r4,r2,1
    8f1c:	18c0004c 	andi	r3,r3,1
    8f20:	1c62b03a 	or	r17,r3,r17
    8f24:	9c400115 	stw	r17,4(r19)
    8f28:	29000115 	stw	r4,4(r5)
    8f2c:	2885883a 	add	r2,r5,r2
    8f30:	10c00117 	ldw	r3,4(r2)
    8f34:	29400204 	addi	r5,r5,8
    8f38:	a009883a 	mov	r4,r20
    8f3c:	18c00054 	ori	r3,r3,1
    8f40:	10c00115 	stw	r3,4(r2)
    8f44:	0006c9c0 	call	6c9c <_free_r>
    8f48:	003fd306 	br	8e98 <__alt_data_end+0xff008e98>
    8f4c:	017fff04 	movi	r5,-4
    8f50:	414a703a 	and	r5,r8,r5
    8f54:	89800404 	addi	r6,r17,16
    8f58:	8151883a 	add	r8,r16,r5
    8f5c:	4180590e 	bge	r8,r6,90c4 <_realloc_r+0x390>
    8f60:	1080004c 	andi	r2,r2,1
    8f64:	103f9e1e 	bne	r2,zero,8de0 <__alt_data_end+0xff008de0>
    8f68:	adbffe17 	ldw	r22,-8(r21)
    8f6c:	00bfff04 	movi	r2,-4
    8f70:	9dadc83a 	sub	r22,r19,r22
    8f74:	b1800117 	ldw	r6,4(r22)
    8f78:	3084703a 	and	r2,r6,r2
    8f7c:	20002026 	beq	r4,zero,9000 <_realloc_r+0x2cc>
    8f80:	80af883a 	add	r23,r16,r2
    8f84:	b96f883a 	add	r23,r23,r5
    8f88:	21c05f26 	beq	r4,r7,9108 <_realloc_r+0x3d4>
    8f8c:	b8c01c16 	blt	r23,r3,9000 <_realloc_r+0x2cc>
    8f90:	20800317 	ldw	r2,12(r4)
    8f94:	20c00217 	ldw	r3,8(r4)
    8f98:	81bfff04 	addi	r6,r16,-4
    8f9c:	01000904 	movi	r4,36
    8fa0:	18800315 	stw	r2,12(r3)
    8fa4:	10c00215 	stw	r3,8(r2)
    8fa8:	b0c00217 	ldw	r3,8(r22)
    8fac:	b0800317 	ldw	r2,12(r22)
    8fb0:	b4800204 	addi	r18,r22,8
    8fb4:	18800315 	stw	r2,12(r3)
    8fb8:	10c00215 	stw	r3,8(r2)
    8fbc:	21801b36 	bltu	r4,r6,902c <_realloc_r+0x2f8>
    8fc0:	008004c4 	movi	r2,19
    8fc4:	1180352e 	bgeu	r2,r6,909c <_realloc_r+0x368>
    8fc8:	a8800017 	ldw	r2,0(r21)
    8fcc:	b0800215 	stw	r2,8(r22)
    8fd0:	a8800117 	ldw	r2,4(r21)
    8fd4:	b0800315 	stw	r2,12(r22)
    8fd8:	008006c4 	movi	r2,27
    8fdc:	11807f36 	bltu	r2,r6,91dc <_realloc_r+0x4a8>
    8fe0:	b0800404 	addi	r2,r22,16
    8fe4:	ad400204 	addi	r21,r21,8
    8fe8:	00002d06 	br	90a0 <_realloc_r+0x36c>
    8fec:	adbffe17 	ldw	r22,-8(r21)
    8ff0:	00bfff04 	movi	r2,-4
    8ff4:	9dadc83a 	sub	r22,r19,r22
    8ff8:	b1000117 	ldw	r4,4(r22)
    8ffc:	2084703a 	and	r2,r4,r2
    9000:	b03f7726 	beq	r22,zero,8de0 <__alt_data_end+0xff008de0>
    9004:	80af883a 	add	r23,r16,r2
    9008:	b8ff7516 	blt	r23,r3,8de0 <__alt_data_end+0xff008de0>
    900c:	b0800317 	ldw	r2,12(r22)
    9010:	b0c00217 	ldw	r3,8(r22)
    9014:	81bfff04 	addi	r6,r16,-4
    9018:	01000904 	movi	r4,36
    901c:	18800315 	stw	r2,12(r3)
    9020:	10c00215 	stw	r3,8(r2)
    9024:	b4800204 	addi	r18,r22,8
    9028:	21bfe52e 	bgeu	r4,r6,8fc0 <__alt_data_end+0xff008fc0>
    902c:	a80b883a 	mov	r5,r21
    9030:	9009883a 	mov	r4,r18
    9034:	0007ab40 	call	7ab4 <memmove>
    9038:	b821883a 	mov	r16,r23
    903c:	b027883a 	mov	r19,r22
    9040:	003f8a06 	br	8e6c <__alt_data_end+0xff008e6c>
    9044:	300b883a 	mov	r5,r6
    9048:	dfc00917 	ldw	ra,36(sp)
    904c:	df000817 	ldw	fp,32(sp)
    9050:	ddc00717 	ldw	r23,28(sp)
    9054:	dd800617 	ldw	r22,24(sp)
    9058:	dd400517 	ldw	r21,20(sp)
    905c:	dd000417 	ldw	r20,16(sp)
    9060:	dcc00317 	ldw	r19,12(sp)
    9064:	dc800217 	ldw	r18,8(sp)
    9068:	dc400117 	ldw	r17,4(sp)
    906c:	dc000017 	ldw	r16,0(sp)
    9070:	dec00a04 	addi	sp,sp,40
    9074:	0001e4c1 	jmpi	1e4c <_malloc_r>
    9078:	a8c00017 	ldw	r3,0(r21)
    907c:	90c00015 	stw	r3,0(r18)
    9080:	a8c00117 	ldw	r3,4(r21)
    9084:	90c00115 	stw	r3,4(r18)
    9088:	00c006c4 	movi	r3,27
    908c:	19804536 	bltu	r3,r6,91a4 <_realloc_r+0x470>
    9090:	90800204 	addi	r2,r18,8
    9094:	a8c00204 	addi	r3,r21,8
    9098:	003f6306 	br	8e28 <__alt_data_end+0xff008e28>
    909c:	9005883a 	mov	r2,r18
    90a0:	a8c00017 	ldw	r3,0(r21)
    90a4:	b821883a 	mov	r16,r23
    90a8:	b027883a 	mov	r19,r22
    90ac:	10c00015 	stw	r3,0(r2)
    90b0:	a8c00117 	ldw	r3,4(r21)
    90b4:	10c00115 	stw	r3,4(r2)
    90b8:	a8c00217 	ldw	r3,8(r21)
    90bc:	10c00215 	stw	r3,8(r2)
    90c0:	003f6a06 	br	8e6c <__alt_data_end+0xff008e6c>
    90c4:	9c67883a 	add	r19,r19,r17
    90c8:	4445c83a 	sub	r2,r8,r17
    90cc:	e4c00215 	stw	r19,8(fp)
    90d0:	10800054 	ori	r2,r2,1
    90d4:	98800115 	stw	r2,4(r19)
    90d8:	a8bfff17 	ldw	r2,-4(r21)
    90dc:	a009883a 	mov	r4,r20
    90e0:	1080004c 	andi	r2,r2,1
    90e4:	1462b03a 	or	r17,r2,r17
    90e8:	ac7fff15 	stw	r17,-4(r21)
    90ec:	000eb580 	call	eb58 <__malloc_unlock>
    90f0:	a805883a 	mov	r2,r21
    90f4:	003f6b06 	br	8ea4 <__alt_data_end+0xff008ea4>
    90f8:	a80b883a 	mov	r5,r21
    90fc:	9009883a 	mov	r4,r18
    9100:	0007ab40 	call	7ab4 <memmove>
    9104:	003f4e06 	br	8e40 <__alt_data_end+0xff008e40>
    9108:	89000404 	addi	r4,r17,16
    910c:	b93fbc16 	blt	r23,r4,9000 <__alt_data_end+0xff009000>
    9110:	b0800317 	ldw	r2,12(r22)
    9114:	b0c00217 	ldw	r3,8(r22)
    9118:	81bfff04 	addi	r6,r16,-4
    911c:	01000904 	movi	r4,36
    9120:	18800315 	stw	r2,12(r3)
    9124:	10c00215 	stw	r3,8(r2)
    9128:	b4800204 	addi	r18,r22,8
    912c:	21804336 	bltu	r4,r6,923c <_realloc_r+0x508>
    9130:	008004c4 	movi	r2,19
    9134:	11803f2e 	bgeu	r2,r6,9234 <_realloc_r+0x500>
    9138:	a8800017 	ldw	r2,0(r21)
    913c:	b0800215 	stw	r2,8(r22)
    9140:	a8800117 	ldw	r2,4(r21)
    9144:	b0800315 	stw	r2,12(r22)
    9148:	008006c4 	movi	r2,27
    914c:	11803f36 	bltu	r2,r6,924c <_realloc_r+0x518>
    9150:	b0800404 	addi	r2,r22,16
    9154:	ad400204 	addi	r21,r21,8
    9158:	a8c00017 	ldw	r3,0(r21)
    915c:	10c00015 	stw	r3,0(r2)
    9160:	a8c00117 	ldw	r3,4(r21)
    9164:	10c00115 	stw	r3,4(r2)
    9168:	a8c00217 	ldw	r3,8(r21)
    916c:	10c00215 	stw	r3,8(r2)
    9170:	b447883a 	add	r3,r22,r17
    9174:	bc45c83a 	sub	r2,r23,r17
    9178:	e0c00215 	stw	r3,8(fp)
    917c:	10800054 	ori	r2,r2,1
    9180:	18800115 	stw	r2,4(r3)
    9184:	b0800117 	ldw	r2,4(r22)
    9188:	a009883a 	mov	r4,r20
    918c:	1080004c 	andi	r2,r2,1
    9190:	1462b03a 	or	r17,r2,r17
    9194:	b4400115 	stw	r17,4(r22)
    9198:	000eb580 	call	eb58 <__malloc_unlock>
    919c:	9005883a 	mov	r2,r18
    91a0:	003f4006 	br	8ea4 <__alt_data_end+0xff008ea4>
    91a4:	a8c00217 	ldw	r3,8(r21)
    91a8:	90c00215 	stw	r3,8(r18)
    91ac:	a8c00317 	ldw	r3,12(r21)
    91b0:	90c00315 	stw	r3,12(r18)
    91b4:	30801126 	beq	r6,r2,91fc <_realloc_r+0x4c8>
    91b8:	90800404 	addi	r2,r18,16
    91bc:	a8c00404 	addi	r3,r21,16
    91c0:	003f1906 	br	8e28 <__alt_data_end+0xff008e28>
    91c4:	90ffff17 	ldw	r3,-4(r18)
    91c8:	00bfff04 	movi	r2,-4
    91cc:	a825883a 	mov	r18,r21
    91d0:	1884703a 	and	r2,r3,r2
    91d4:	80a1883a 	add	r16,r16,r2
    91d8:	003f2406 	br	8e6c <__alt_data_end+0xff008e6c>
    91dc:	a8800217 	ldw	r2,8(r21)
    91e0:	b0800415 	stw	r2,16(r22)
    91e4:	a8800317 	ldw	r2,12(r21)
    91e8:	b0800515 	stw	r2,20(r22)
    91ec:	31000a26 	beq	r6,r4,9218 <_realloc_r+0x4e4>
    91f0:	b0800604 	addi	r2,r22,24
    91f4:	ad400404 	addi	r21,r21,16
    91f8:	003fa906 	br	90a0 <__alt_data_end+0xff0090a0>
    91fc:	a9000417 	ldw	r4,16(r21)
    9200:	90800604 	addi	r2,r18,24
    9204:	a8c00604 	addi	r3,r21,24
    9208:	91000415 	stw	r4,16(r18)
    920c:	a9000517 	ldw	r4,20(r21)
    9210:	91000515 	stw	r4,20(r18)
    9214:	003f0406 	br	8e28 <__alt_data_end+0xff008e28>
    9218:	a8c00417 	ldw	r3,16(r21)
    921c:	ad400604 	addi	r21,r21,24
    9220:	b0800804 	addi	r2,r22,32
    9224:	b0c00615 	stw	r3,24(r22)
    9228:	a8ffff17 	ldw	r3,-4(r21)
    922c:	b0c00715 	stw	r3,28(r22)
    9230:	003f9b06 	br	90a0 <__alt_data_end+0xff0090a0>
    9234:	9005883a 	mov	r2,r18
    9238:	003fc706 	br	9158 <__alt_data_end+0xff009158>
    923c:	a80b883a 	mov	r5,r21
    9240:	9009883a 	mov	r4,r18
    9244:	0007ab40 	call	7ab4 <memmove>
    9248:	003fc906 	br	9170 <__alt_data_end+0xff009170>
    924c:	a8800217 	ldw	r2,8(r21)
    9250:	b0800415 	stw	r2,16(r22)
    9254:	a8800317 	ldw	r2,12(r21)
    9258:	b0800515 	stw	r2,20(r22)
    925c:	31000726 	beq	r6,r4,927c <_realloc_r+0x548>
    9260:	b0800604 	addi	r2,r22,24
    9264:	ad400404 	addi	r21,r21,16
    9268:	003fbb06 	br	9158 <__alt_data_end+0xff009158>
    926c:	a009883a 	mov	r4,r20
    9270:	000eb580 	call	eb58 <__malloc_unlock>
    9274:	0005883a 	mov	r2,zero
    9278:	003f0a06 	br	8ea4 <__alt_data_end+0xff008ea4>
    927c:	a8c00417 	ldw	r3,16(r21)
    9280:	ad400604 	addi	r21,r21,24
    9284:	b0800804 	addi	r2,r22,32
    9288:	b0c00615 	stw	r3,24(r22)
    928c:	a8ffff17 	ldw	r3,-4(r21)
    9290:	b0c00715 	stw	r3,28(r22)
    9294:	003fb006 	br	9158 <__alt_data_end+0xff009158>

00009298 <__fpclassifyd>:
    9298:	00a00034 	movhi	r2,32768
    929c:	10bfffc4 	addi	r2,r2,-1
    92a0:	2884703a 	and	r2,r5,r2
    92a4:	10000726 	beq	r2,zero,92c4 <__fpclassifyd+0x2c>
    92a8:	00fffc34 	movhi	r3,65520
    92ac:	019ff834 	movhi	r6,32736
    92b0:	28c7883a 	add	r3,r5,r3
    92b4:	31bfffc4 	addi	r6,r6,-1
    92b8:	30c00536 	bltu	r6,r3,92d0 <__fpclassifyd+0x38>
    92bc:	00800104 	movi	r2,4
    92c0:	f800283a 	ret
    92c4:	2000021e 	bne	r4,zero,92d0 <__fpclassifyd+0x38>
    92c8:	00800084 	movi	r2,2
    92cc:	f800283a 	ret
    92d0:	00dffc34 	movhi	r3,32752
    92d4:	019ff834 	movhi	r6,32736
    92d8:	28cb883a 	add	r5,r5,r3
    92dc:	31bfffc4 	addi	r6,r6,-1
    92e0:	317ff62e 	bgeu	r6,r5,92bc <__alt_data_end+0xff0092bc>
    92e4:	01400434 	movhi	r5,16
    92e8:	297fffc4 	addi	r5,r5,-1
    92ec:	28800236 	bltu	r5,r2,92f8 <__fpclassifyd+0x60>
    92f0:	008000c4 	movi	r2,3
    92f4:	f800283a 	ret
    92f8:	10c00226 	beq	r2,r3,9304 <__fpclassifyd+0x6c>
    92fc:	0005883a 	mov	r2,zero
    9300:	f800283a 	ret
    9304:	2005003a 	cmpeq	r2,r4,zero
    9308:	f800283a 	ret

0000930c <__sread>:
    930c:	defffe04 	addi	sp,sp,-8
    9310:	dc000015 	stw	r16,0(sp)
    9314:	2821883a 	mov	r16,r5
    9318:	2940038f 	ldh	r5,14(r5)
    931c:	dfc00115 	stw	ra,4(sp)
    9320:	000b1000 	call	b100 <_read_r>
    9324:	10000716 	blt	r2,zero,9344 <__sread+0x38>
    9328:	80c01417 	ldw	r3,80(r16)
    932c:	1887883a 	add	r3,r3,r2
    9330:	80c01415 	stw	r3,80(r16)
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	dc000017 	ldw	r16,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret
    9344:	80c0030b 	ldhu	r3,12(r16)
    9348:	18fbffcc 	andi	r3,r3,61439
    934c:	80c0030d 	sth	r3,12(r16)
    9350:	dfc00117 	ldw	ra,4(sp)
    9354:	dc000017 	ldw	r16,0(sp)
    9358:	dec00204 	addi	sp,sp,8
    935c:	f800283a 	ret

00009360 <__seofread>:
    9360:	0005883a 	mov	r2,zero
    9364:	f800283a 	ret

00009368 <__swrite>:
    9368:	2880030b 	ldhu	r2,12(r5)
    936c:	defffb04 	addi	sp,sp,-20
    9370:	dcc00315 	stw	r19,12(sp)
    9374:	dc800215 	stw	r18,8(sp)
    9378:	dc400115 	stw	r17,4(sp)
    937c:	dc000015 	stw	r16,0(sp)
    9380:	dfc00415 	stw	ra,16(sp)
    9384:	10c0400c 	andi	r3,r2,256
    9388:	2821883a 	mov	r16,r5
    938c:	2023883a 	mov	r17,r4
    9390:	3025883a 	mov	r18,r6
    9394:	3827883a 	mov	r19,r7
    9398:	18000526 	beq	r3,zero,93b0 <__swrite+0x48>
    939c:	2940038f 	ldh	r5,14(r5)
    93a0:	01c00084 	movi	r7,2
    93a4:	000d883a 	mov	r6,zero
    93a8:	000b0a00 	call	b0a0 <_lseek_r>
    93ac:	8080030b 	ldhu	r2,12(r16)
    93b0:	8140038f 	ldh	r5,14(r16)
    93b4:	10bbffcc 	andi	r2,r2,61439
    93b8:	980f883a 	mov	r7,r19
    93bc:	900d883a 	mov	r6,r18
    93c0:	8809883a 	mov	r4,r17
    93c4:	8080030d 	sth	r2,12(r16)
    93c8:	dfc00417 	ldw	ra,16(sp)
    93cc:	dcc00317 	ldw	r19,12(sp)
    93d0:	dc800217 	ldw	r18,8(sp)
    93d4:	dc400117 	ldw	r17,4(sp)
    93d8:	dc000017 	ldw	r16,0(sp)
    93dc:	dec00504 	addi	sp,sp,20
    93e0:	000ab6c1 	jmpi	ab6c <_write_r>

000093e4 <__sseek>:
    93e4:	defffe04 	addi	sp,sp,-8
    93e8:	dc000015 	stw	r16,0(sp)
    93ec:	2821883a 	mov	r16,r5
    93f0:	2940038f 	ldh	r5,14(r5)
    93f4:	dfc00115 	stw	ra,4(sp)
    93f8:	000b0a00 	call	b0a0 <_lseek_r>
    93fc:	00ffffc4 	movi	r3,-1
    9400:	10c00826 	beq	r2,r3,9424 <__sseek+0x40>
    9404:	80c0030b 	ldhu	r3,12(r16)
    9408:	80801415 	stw	r2,80(r16)
    940c:	18c40014 	ori	r3,r3,4096
    9410:	80c0030d 	sth	r3,12(r16)
    9414:	dfc00117 	ldw	ra,4(sp)
    9418:	dc000017 	ldw	r16,0(sp)
    941c:	dec00204 	addi	sp,sp,8
    9420:	f800283a 	ret
    9424:	80c0030b 	ldhu	r3,12(r16)
    9428:	18fbffcc 	andi	r3,r3,61439
    942c:	80c0030d 	sth	r3,12(r16)
    9430:	dfc00117 	ldw	ra,4(sp)
    9434:	dc000017 	ldw	r16,0(sp)
    9438:	dec00204 	addi	sp,sp,8
    943c:	f800283a 	ret

00009440 <__sclose>:
    9440:	2940038f 	ldh	r5,14(r5)
    9444:	000abcc1 	jmpi	abcc <_close_r>

00009448 <strcmp>:
    9448:	2144b03a 	or	r2,r4,r5
    944c:	108000cc 	andi	r2,r2,3
    9450:	1000171e 	bne	r2,zero,94b0 <strcmp+0x68>
    9454:	20800017 	ldw	r2,0(r4)
    9458:	28c00017 	ldw	r3,0(r5)
    945c:	10c0141e 	bne	r2,r3,94b0 <strcmp+0x68>
    9460:	027fbff4 	movhi	r9,65279
    9464:	4a7fbfc4 	addi	r9,r9,-257
    9468:	0086303a 	nor	r3,zero,r2
    946c:	02202074 	movhi	r8,32897
    9470:	1245883a 	add	r2,r2,r9
    9474:	42202004 	addi	r8,r8,-32640
    9478:	10c4703a 	and	r2,r2,r3
    947c:	1204703a 	and	r2,r2,r8
    9480:	10000226 	beq	r2,zero,948c <strcmp+0x44>
    9484:	00002306 	br	9514 <strcmp+0xcc>
    9488:	1000221e 	bne	r2,zero,9514 <strcmp+0xcc>
    948c:	21000104 	addi	r4,r4,4
    9490:	20c00017 	ldw	r3,0(r4)
    9494:	29400104 	addi	r5,r5,4
    9498:	29800017 	ldw	r6,0(r5)
    949c:	1a4f883a 	add	r7,r3,r9
    94a0:	00c4303a 	nor	r2,zero,r3
    94a4:	3884703a 	and	r2,r7,r2
    94a8:	1204703a 	and	r2,r2,r8
    94ac:	19bff626 	beq	r3,r6,9488 <__alt_data_end+0xff009488>
    94b0:	20800003 	ldbu	r2,0(r4)
    94b4:	10c03fcc 	andi	r3,r2,255
    94b8:	18c0201c 	xori	r3,r3,128
    94bc:	18ffe004 	addi	r3,r3,-128
    94c0:	18000c26 	beq	r3,zero,94f4 <strcmp+0xac>
    94c4:	29800007 	ldb	r6,0(r5)
    94c8:	19800326 	beq	r3,r6,94d8 <strcmp+0x90>
    94cc:	00001306 	br	951c <strcmp+0xd4>
    94d0:	29800007 	ldb	r6,0(r5)
    94d4:	11800b1e 	bne	r2,r6,9504 <strcmp+0xbc>
    94d8:	21000044 	addi	r4,r4,1
    94dc:	20c00003 	ldbu	r3,0(r4)
    94e0:	29400044 	addi	r5,r5,1
    94e4:	18803fcc 	andi	r2,r3,255
    94e8:	1080201c 	xori	r2,r2,128
    94ec:	10bfe004 	addi	r2,r2,-128
    94f0:	103ff71e 	bne	r2,zero,94d0 <__alt_data_end+0xff0094d0>
    94f4:	0007883a 	mov	r3,zero
    94f8:	28800003 	ldbu	r2,0(r5)
    94fc:	1885c83a 	sub	r2,r3,r2
    9500:	f800283a 	ret
    9504:	28800003 	ldbu	r2,0(r5)
    9508:	18c03fcc 	andi	r3,r3,255
    950c:	1885c83a 	sub	r2,r3,r2
    9510:	f800283a 	ret
    9514:	0005883a 	mov	r2,zero
    9518:	f800283a 	ret
    951c:	10c03fcc 	andi	r3,r2,255
    9520:	003ff506 	br	94f8 <__alt_data_end+0xff0094f8>

00009524 <__sprint_r.part.0>:
    9524:	28801917 	ldw	r2,100(r5)
    9528:	defff604 	addi	sp,sp,-40
    952c:	dd400515 	stw	r21,20(sp)
    9530:	dfc00915 	stw	ra,36(sp)
    9534:	df000815 	stw	fp,32(sp)
    9538:	ddc00715 	stw	r23,28(sp)
    953c:	dd800615 	stw	r22,24(sp)
    9540:	dd000415 	stw	r20,16(sp)
    9544:	dcc00315 	stw	r19,12(sp)
    9548:	dc800215 	stw	r18,8(sp)
    954c:	dc400115 	stw	r17,4(sp)
    9550:	dc000015 	stw	r16,0(sp)
    9554:	1088000c 	andi	r2,r2,8192
    9558:	302b883a 	mov	r21,r6
    955c:	10002e26 	beq	r2,zero,9618 <__sprint_r.part.0+0xf4>
    9560:	30800217 	ldw	r2,8(r6)
    9564:	35800017 	ldw	r22,0(r6)
    9568:	10002926 	beq	r2,zero,9610 <__sprint_r.part.0+0xec>
    956c:	2827883a 	mov	r19,r5
    9570:	2029883a 	mov	r20,r4
    9574:	b5c00104 	addi	r23,r22,4
    9578:	04bfffc4 	movi	r18,-1
    957c:	bc400017 	ldw	r17,0(r23)
    9580:	b4000017 	ldw	r16,0(r22)
    9584:	0039883a 	mov	fp,zero
    9588:	8822d0ba 	srli	r17,r17,2
    958c:	8800031e 	bne	r17,zero,959c <__sprint_r.part.0+0x78>
    9590:	00001806 	br	95f4 <__sprint_r.part.0+0xd0>
    9594:	84000104 	addi	r16,r16,4
    9598:	8f001526 	beq	r17,fp,95f0 <__sprint_r.part.0+0xcc>
    959c:	81400017 	ldw	r5,0(r16)
    95a0:	980d883a 	mov	r6,r19
    95a4:	a009883a 	mov	r4,r20
    95a8:	000af4c0 	call	af4c <_fputwc_r>
    95ac:	e7000044 	addi	fp,fp,1
    95b0:	14bff81e 	bne	r2,r18,9594 <__alt_data_end+0xff009594>
    95b4:	9005883a 	mov	r2,r18
    95b8:	a8000215 	stw	zero,8(r21)
    95bc:	a8000115 	stw	zero,4(r21)
    95c0:	dfc00917 	ldw	ra,36(sp)
    95c4:	df000817 	ldw	fp,32(sp)
    95c8:	ddc00717 	ldw	r23,28(sp)
    95cc:	dd800617 	ldw	r22,24(sp)
    95d0:	dd400517 	ldw	r21,20(sp)
    95d4:	dd000417 	ldw	r20,16(sp)
    95d8:	dcc00317 	ldw	r19,12(sp)
    95dc:	dc800217 	ldw	r18,8(sp)
    95e0:	dc400117 	ldw	r17,4(sp)
    95e4:	dc000017 	ldw	r16,0(sp)
    95e8:	dec00a04 	addi	sp,sp,40
    95ec:	f800283a 	ret
    95f0:	a8800217 	ldw	r2,8(r21)
    95f4:	8c63883a 	add	r17,r17,r17
    95f8:	8c63883a 	add	r17,r17,r17
    95fc:	1445c83a 	sub	r2,r2,r17
    9600:	a8800215 	stw	r2,8(r21)
    9604:	b5800204 	addi	r22,r22,8
    9608:	bdc00204 	addi	r23,r23,8
    960c:	103fdb1e 	bne	r2,zero,957c <__alt_data_end+0xff00957c>
    9610:	0005883a 	mov	r2,zero
    9614:	003fe806 	br	95b8 <__alt_data_end+0xff0095b8>
    9618:	0006fac0 	call	6fac <__sfvwrite_r>
    961c:	003fe606 	br	95b8 <__alt_data_end+0xff0095b8>

00009620 <__sprint_r>:
    9620:	30c00217 	ldw	r3,8(r6)
    9624:	18000126 	beq	r3,zero,962c <__sprint_r+0xc>
    9628:	00095241 	jmpi	9524 <__sprint_r.part.0>
    962c:	30000115 	stw	zero,4(r6)
    9630:	0005883a 	mov	r2,zero
    9634:	f800283a 	ret

00009638 <___vfiprintf_internal_r>:
    9638:	deffc904 	addi	sp,sp,-220
    963c:	df003515 	stw	fp,212(sp)
    9640:	dd003115 	stw	r20,196(sp)
    9644:	dfc03615 	stw	ra,216(sp)
    9648:	ddc03415 	stw	r23,208(sp)
    964c:	dd803315 	stw	r22,204(sp)
    9650:	dd403215 	stw	r21,200(sp)
    9654:	dcc03015 	stw	r19,192(sp)
    9658:	dc802f15 	stw	r18,188(sp)
    965c:	dc402e15 	stw	r17,184(sp)
    9660:	dc002d15 	stw	r16,180(sp)
    9664:	d9002015 	stw	r4,128(sp)
    9668:	d9c02215 	stw	r7,136(sp)
    966c:	2829883a 	mov	r20,r5
    9670:	3039883a 	mov	fp,r6
    9674:	20000226 	beq	r4,zero,9680 <___vfiprintf_internal_r+0x48>
    9678:	20800e17 	ldw	r2,56(r4)
    967c:	1000cf26 	beq	r2,zero,99bc <___vfiprintf_internal_r+0x384>
    9680:	a080030b 	ldhu	r2,12(r20)
    9684:	10c8000c 	andi	r3,r2,8192
    9688:	1800061e 	bne	r3,zero,96a4 <___vfiprintf_internal_r+0x6c>
    968c:	a1001917 	ldw	r4,100(r20)
    9690:	00f7ffc4 	movi	r3,-8193
    9694:	10880014 	ori	r2,r2,8192
    9698:	20c6703a 	and	r3,r4,r3
    969c:	a080030d 	sth	r2,12(r20)
    96a0:	a0c01915 	stw	r3,100(r20)
    96a4:	10c0020c 	andi	r3,r2,8
    96a8:	1800a926 	beq	r3,zero,9950 <___vfiprintf_internal_r+0x318>
    96ac:	a0c00417 	ldw	r3,16(r20)
    96b0:	1800a726 	beq	r3,zero,9950 <___vfiprintf_internal_r+0x318>
    96b4:	1080068c 	andi	r2,r2,26
    96b8:	00c00284 	movi	r3,10
    96bc:	10c0ac26 	beq	r2,r3,9970 <___vfiprintf_internal_r+0x338>
    96c0:	da801a04 	addi	r10,sp,104
    96c4:	da801e15 	stw	r10,120(sp)
    96c8:	d8801e17 	ldw	r2,120(sp)
    96cc:	da8019c4 	addi	r10,sp,103
    96d0:	05800074 	movhi	r22,1
    96d4:	05c00074 	movhi	r23,1
    96d8:	da801f15 	stw	r10,124(sp)
    96dc:	1295c83a 	sub	r10,r2,r10
    96e0:	b5859c04 	addi	r22,r22,5744
    96e4:	bdc59804 	addi	r23,r23,5728
    96e8:	dec01a15 	stw	sp,104(sp)
    96ec:	d8001c15 	stw	zero,112(sp)
    96f0:	d8001b15 	stw	zero,108(sp)
    96f4:	d8002615 	stw	zero,152(sp)
    96f8:	d8002315 	stw	zero,140(sp)
    96fc:	da802715 	stw	r10,156(sp)
    9700:	d811883a 	mov	r8,sp
    9704:	dd002115 	stw	r20,132(sp)
    9708:	e021883a 	mov	r16,fp
    970c:	80800007 	ldb	r2,0(r16)
    9710:	1003ea26 	beq	r2,zero,a6bc <___vfiprintf_internal_r+0x1084>
    9714:	00c00944 	movi	r3,37
    9718:	8025883a 	mov	r18,r16
    971c:	10c0021e 	bne	r2,r3,9728 <___vfiprintf_internal_r+0xf0>
    9720:	00001606 	br	977c <___vfiprintf_internal_r+0x144>
    9724:	10c00326 	beq	r2,r3,9734 <___vfiprintf_internal_r+0xfc>
    9728:	94800044 	addi	r18,r18,1
    972c:	90800007 	ldb	r2,0(r18)
    9730:	103ffc1e 	bne	r2,zero,9724 <__alt_data_end+0xff009724>
    9734:	9423c83a 	sub	r17,r18,r16
    9738:	88001026 	beq	r17,zero,977c <___vfiprintf_internal_r+0x144>
    973c:	d8c01c17 	ldw	r3,112(sp)
    9740:	d8801b17 	ldw	r2,108(sp)
    9744:	44000015 	stw	r16,0(r8)
    9748:	88c7883a 	add	r3,r17,r3
    974c:	10800044 	addi	r2,r2,1
    9750:	44400115 	stw	r17,4(r8)
    9754:	d8c01c15 	stw	r3,112(sp)
    9758:	d8801b15 	stw	r2,108(sp)
    975c:	010001c4 	movi	r4,7
    9760:	2080760e 	bge	r4,r2,993c <___vfiprintf_internal_r+0x304>
    9764:	1803821e 	bne	r3,zero,a570 <___vfiprintf_internal_r+0xf38>
    9768:	da802317 	ldw	r10,140(sp)
    976c:	d8001b15 	stw	zero,108(sp)
    9770:	d811883a 	mov	r8,sp
    9774:	5455883a 	add	r10,r10,r17
    9778:	da802315 	stw	r10,140(sp)
    977c:	90800007 	ldb	r2,0(r18)
    9780:	10044626 	beq	r2,zero,a89c <___vfiprintf_internal_r+0x1264>
    9784:	90c00047 	ldb	r3,1(r18)
    9788:	94000044 	addi	r16,r18,1
    978c:	d8001d85 	stb	zero,118(sp)
    9790:	0009883a 	mov	r4,zero
    9794:	000f883a 	mov	r7,zero
    9798:	027fffc4 	movi	r9,-1
    979c:	0023883a 	mov	r17,zero
    97a0:	0029883a 	mov	r20,zero
    97a4:	01401604 	movi	r5,88
    97a8:	01800244 	movi	r6,9
    97ac:	03400a84 	movi	r13,42
    97b0:	03001b04 	movi	r12,108
    97b4:	84000044 	addi	r16,r16,1
    97b8:	18bff804 	addi	r2,r3,-32
    97bc:	28827336 	bltu	r5,r2,a18c <___vfiprintf_internal_r+0xb54>
    97c0:	100490ba 	slli	r2,r2,2
    97c4:	02800074 	movhi	r10,1
    97c8:	52a5f604 	addi	r10,r10,-26664
    97cc:	1285883a 	add	r2,r2,r10
    97d0:	10800017 	ldw	r2,0(r2)
    97d4:	1000683a 	jmp	r2
    97d8:	00009ec0 	call	9ec <i2c_short_read+0x54>
    97dc:	0000a18c 	andi	zero,zero,646
    97e0:	0000a18c 	andi	zero,zero,646
    97e4:	00009ee0 	cmpeqi	zero,zero,635
    97e8:	0000a18c 	andi	zero,zero,646
    97ec:	0000a18c 	andi	zero,zero,646
    97f0:	0000a18c 	andi	zero,zero,646
    97f4:	0000a18c 	andi	zero,zero,646
    97f8:	0000a18c 	andi	zero,zero,646
    97fc:	0000a18c 	andi	zero,zero,646
    9800:	0000a0c8 	cmpgei	zero,zero,643
    9804:	0000a0e4 	muli	zero,zero,643
    9808:	0000a18c 	andi	zero,zero,646
    980c:	000099cc 	andi	zero,zero,615
    9810:	0000a0f4 	movhi	zero,643
    9814:	0000a18c 	andi	zero,zero,646
    9818:	00009eec 	andhi	zero,zero,635
    981c:	00009ef8 	rdprs	zero,zero,635
    9820:	00009ef8 	rdprs	zero,zero,635
    9824:	00009ef8 	rdprs	zero,zero,635
    9828:	00009ef8 	rdprs	zero,zero,635
    982c:	00009ef8 	rdprs	zero,zero,635
    9830:	00009ef8 	rdprs	zero,zero,635
    9834:	00009ef8 	rdprs	zero,zero,635
    9838:	00009ef8 	rdprs	zero,zero,635
    983c:	00009ef8 	rdprs	zero,zero,635
    9840:	0000a18c 	andi	zero,zero,646
    9844:	0000a18c 	andi	zero,zero,646
    9848:	0000a18c 	andi	zero,zero,646
    984c:	0000a18c 	andi	zero,zero,646
    9850:	0000a18c 	andi	zero,zero,646
    9854:	0000a18c 	andi	zero,zero,646
    9858:	0000a18c 	andi	zero,zero,646
    985c:	0000a18c 	andi	zero,zero,646
    9860:	0000a18c 	andi	zero,zero,646
    9864:	0000a18c 	andi	zero,zero,646
    9868:	00009f24 	muli	zero,zero,636
    986c:	0000a18c 	andi	zero,zero,646
    9870:	0000a18c 	andi	zero,zero,646
    9874:	0000a18c 	andi	zero,zero,646
    9878:	0000a18c 	andi	zero,zero,646
    987c:	0000a18c 	andi	zero,zero,646
    9880:	0000a18c 	andi	zero,zero,646
    9884:	0000a18c 	andi	zero,zero,646
    9888:	0000a18c 	andi	zero,zero,646
    988c:	0000a18c 	andi	zero,zero,646
    9890:	0000a18c 	andi	zero,zero,646
    9894:	00009f5c 	xori	zero,zero,637
    9898:	0000a18c 	andi	zero,zero,646
    989c:	0000a18c 	andi	zero,zero,646
    98a0:	0000a18c 	andi	zero,zero,646
    98a4:	0000a18c 	andi	zero,zero,646
    98a8:	0000a18c 	andi	zero,zero,646
    98ac:	00009fb4 	movhi	zero,638
    98b0:	0000a18c 	andi	zero,zero,646
    98b4:	0000a18c 	andi	zero,zero,646
    98b8:	0000a024 	muli	zero,zero,640
    98bc:	0000a18c 	andi	zero,zero,646
    98c0:	0000a18c 	andi	zero,zero,646
    98c4:	0000a18c 	andi	zero,zero,646
    98c8:	0000a18c 	andi	zero,zero,646
    98cc:	0000a18c 	andi	zero,zero,646
    98d0:	0000a18c 	andi	zero,zero,646
    98d4:	0000a18c 	andi	zero,zero,646
    98d8:	0000a18c 	andi	zero,zero,646
    98dc:	0000a18c 	andi	zero,zero,646
    98e0:	0000a18c 	andi	zero,zero,646
    98e4:	00009dd0 	cmplti	zero,zero,631
    98e8:	00009dfc 	xorhi	zero,zero,631
    98ec:	0000a18c 	andi	zero,zero,646
    98f0:	0000a18c 	andi	zero,zero,646
    98f4:	0000a18c 	andi	zero,zero,646
    98f8:	0000a134 	movhi	zero,644
    98fc:	00009dfc 	xorhi	zero,zero,631
    9900:	0000a18c 	andi	zero,zero,646
    9904:	0000a18c 	andi	zero,zero,646
    9908:	00009c90 	cmplti	zero,zero,626
    990c:	0000a18c 	andi	zero,zero,646
    9910:	00009ca0 	cmpeqi	zero,zero,626
    9914:	00009cdc 	xori	zero,zero,627
    9918:	000099d8 	cmpnei	zero,zero,615
    991c:	00009c84 	movi	zero,626
    9920:	0000a18c 	andi	zero,zero,646
    9924:	0000a060 	cmpeqi	zero,zero,641
    9928:	0000a18c 	andi	zero,zero,646
    992c:	0000a0b8 	rdprs	zero,zero,642
    9930:	0000a18c 	andi	zero,zero,646
    9934:	0000a18c 	andi	zero,zero,646
    9938:	00009d7c 	xorhi	zero,zero,629
    993c:	42000204 	addi	r8,r8,8
    9940:	da802317 	ldw	r10,140(sp)
    9944:	5455883a 	add	r10,r10,r17
    9948:	da802315 	stw	r10,140(sp)
    994c:	003f8b06 	br	977c <__alt_data_end+0xff00977c>
    9950:	d9002017 	ldw	r4,128(sp)
    9954:	a00b883a 	mov	r5,r20
    9958:	0004b540 	call	4b54 <__swsetup_r>
    995c:	1003b11e 	bne	r2,zero,a824 <___vfiprintf_internal_r+0x11ec>
    9960:	a080030b 	ldhu	r2,12(r20)
    9964:	00c00284 	movi	r3,10
    9968:	1080068c 	andi	r2,r2,26
    996c:	10ff541e 	bne	r2,r3,96c0 <__alt_data_end+0xff0096c0>
    9970:	a080038f 	ldh	r2,14(r20)
    9974:	103f5216 	blt	r2,zero,96c0 <__alt_data_end+0xff0096c0>
    9978:	d9c02217 	ldw	r7,136(sp)
    997c:	d9002017 	ldw	r4,128(sp)
    9980:	e00d883a 	mov	r6,fp
    9984:	a00b883a 	mov	r5,r20
    9988:	000aab00 	call	aab0 <__sbprintf>
    998c:	dfc03617 	ldw	ra,216(sp)
    9990:	df003517 	ldw	fp,212(sp)
    9994:	ddc03417 	ldw	r23,208(sp)
    9998:	dd803317 	ldw	r22,204(sp)
    999c:	dd403217 	ldw	r21,200(sp)
    99a0:	dd003117 	ldw	r20,196(sp)
    99a4:	dcc03017 	ldw	r19,192(sp)
    99a8:	dc802f17 	ldw	r18,188(sp)
    99ac:	dc402e17 	ldw	r17,184(sp)
    99b0:	dc002d17 	ldw	r16,180(sp)
    99b4:	dec03704 	addi	sp,sp,220
    99b8:	f800283a 	ret
    99bc:	0006b280 	call	6b28 <__sinit>
    99c0:	003f2f06 	br	9680 <__alt_data_end+0xff009680>
    99c4:	0463c83a 	sub	r17,zero,r17
    99c8:	d8802215 	stw	r2,136(sp)
    99cc:	a5000114 	ori	r20,r20,4
    99d0:	80c00007 	ldb	r3,0(r16)
    99d4:	003f7706 	br	97b4 <__alt_data_end+0xff0097b4>
    99d8:	00800c04 	movi	r2,48
    99dc:	da802217 	ldw	r10,136(sp)
    99e0:	d8801d05 	stb	r2,116(sp)
    99e4:	00801e04 	movi	r2,120
    99e8:	d8801d45 	stb	r2,117(sp)
    99ec:	d8001d85 	stb	zero,118(sp)
    99f0:	50c00104 	addi	r3,r10,4
    99f4:	54800017 	ldw	r18,0(r10)
    99f8:	0027883a 	mov	r19,zero
    99fc:	a0800094 	ori	r2,r20,2
    9a00:	48030b16 	blt	r9,zero,a630 <___vfiprintf_internal_r+0xff8>
    9a04:	00bfdfc4 	movi	r2,-129
    9a08:	a096703a 	and	r11,r20,r2
    9a0c:	d8c02215 	stw	r3,136(sp)
    9a10:	5d000094 	ori	r20,r11,2
    9a14:	90032b1e 	bne	r18,zero,a6c4 <___vfiprintf_internal_r+0x108c>
    9a18:	00800074 	movhi	r2,1
    9a1c:	10853704 	addi	r2,r2,5340
    9a20:	d8802615 	stw	r2,152(sp)
    9a24:	0039883a 	mov	fp,zero
    9a28:	48017b1e 	bne	r9,zero,a018 <___vfiprintf_internal_r+0x9e0>
    9a2c:	0013883a 	mov	r9,zero
    9a30:	0027883a 	mov	r19,zero
    9a34:	dd401a04 	addi	r21,sp,104
    9a38:	4825883a 	mov	r18,r9
    9a3c:	4cc0010e 	bge	r9,r19,9a44 <___vfiprintf_internal_r+0x40c>
    9a40:	9825883a 	mov	r18,r19
    9a44:	e7003fcc 	andi	fp,fp,255
    9a48:	e700201c 	xori	fp,fp,128
    9a4c:	e73fe004 	addi	fp,fp,-128
    9a50:	e0000126 	beq	fp,zero,9a58 <___vfiprintf_internal_r+0x420>
    9a54:	94800044 	addi	r18,r18,1
    9a58:	a380008c 	andi	r14,r20,2
    9a5c:	70000126 	beq	r14,zero,9a64 <___vfiprintf_internal_r+0x42c>
    9a60:	94800084 	addi	r18,r18,2
    9a64:	a700210c 	andi	fp,r20,132
    9a68:	e001df1e 	bne	fp,zero,a1e8 <___vfiprintf_internal_r+0xbb0>
    9a6c:	8c87c83a 	sub	r3,r17,r18
    9a70:	00c1dd0e 	bge	zero,r3,a1e8 <___vfiprintf_internal_r+0xbb0>
    9a74:	01c00404 	movi	r7,16
    9a78:	d8801c17 	ldw	r2,112(sp)
    9a7c:	38c3ad0e 	bge	r7,r3,a934 <___vfiprintf_internal_r+0x12fc>
    9a80:	02800074 	movhi	r10,1
    9a84:	52859c04 	addi	r10,r10,5744
    9a88:	dc002915 	stw	r16,164(sp)
    9a8c:	d9801b17 	ldw	r6,108(sp)
    9a90:	da802415 	stw	r10,144(sp)
    9a94:	03c001c4 	movi	r15,7
    9a98:	da402515 	stw	r9,148(sp)
    9a9c:	db802815 	stw	r14,160(sp)
    9aa0:	1821883a 	mov	r16,r3
    9aa4:	00000506 	br	9abc <___vfiprintf_internal_r+0x484>
    9aa8:	31400084 	addi	r5,r6,2
    9aac:	42000204 	addi	r8,r8,8
    9ab0:	200d883a 	mov	r6,r4
    9ab4:	843ffc04 	addi	r16,r16,-16
    9ab8:	3c000d0e 	bge	r7,r16,9af0 <___vfiprintf_internal_r+0x4b8>
    9abc:	10800404 	addi	r2,r2,16
    9ac0:	31000044 	addi	r4,r6,1
    9ac4:	45800015 	stw	r22,0(r8)
    9ac8:	41c00115 	stw	r7,4(r8)
    9acc:	d8801c15 	stw	r2,112(sp)
    9ad0:	d9001b15 	stw	r4,108(sp)
    9ad4:	793ff40e 	bge	r15,r4,9aa8 <__alt_data_end+0xff009aa8>
    9ad8:	1001b51e 	bne	r2,zero,a1b0 <___vfiprintf_internal_r+0xb78>
    9adc:	843ffc04 	addi	r16,r16,-16
    9ae0:	000d883a 	mov	r6,zero
    9ae4:	01400044 	movi	r5,1
    9ae8:	d811883a 	mov	r8,sp
    9aec:	3c3ff316 	blt	r7,r16,9abc <__alt_data_end+0xff009abc>
    9af0:	8007883a 	mov	r3,r16
    9af4:	da402517 	ldw	r9,148(sp)
    9af8:	db802817 	ldw	r14,160(sp)
    9afc:	dc002917 	ldw	r16,164(sp)
    9b00:	da802417 	ldw	r10,144(sp)
    9b04:	1885883a 	add	r2,r3,r2
    9b08:	40c00115 	stw	r3,4(r8)
    9b0c:	42800015 	stw	r10,0(r8)
    9b10:	d8801c15 	stw	r2,112(sp)
    9b14:	d9401b15 	stw	r5,108(sp)
    9b18:	00c001c4 	movi	r3,7
    9b1c:	19426016 	blt	r3,r5,a4a0 <___vfiprintf_internal_r+0xe68>
    9b20:	d8c01d87 	ldb	r3,118(sp)
    9b24:	42000204 	addi	r8,r8,8
    9b28:	29000044 	addi	r4,r5,1
    9b2c:	1801b31e 	bne	r3,zero,a1fc <___vfiprintf_internal_r+0xbc4>
    9b30:	7001c026 	beq	r14,zero,a234 <___vfiprintf_internal_r+0xbfc>
    9b34:	d8c01d04 	addi	r3,sp,116
    9b38:	10800084 	addi	r2,r2,2
    9b3c:	40c00015 	stw	r3,0(r8)
    9b40:	00c00084 	movi	r3,2
    9b44:	40c00115 	stw	r3,4(r8)
    9b48:	d8801c15 	stw	r2,112(sp)
    9b4c:	d9001b15 	stw	r4,108(sp)
    9b50:	00c001c4 	movi	r3,7
    9b54:	1902650e 	bge	r3,r4,a4ec <___vfiprintf_internal_r+0xeb4>
    9b58:	10029a1e 	bne	r2,zero,a5c4 <___vfiprintf_internal_r+0xf8c>
    9b5c:	00c02004 	movi	r3,128
    9b60:	01000044 	movi	r4,1
    9b64:	000b883a 	mov	r5,zero
    9b68:	d811883a 	mov	r8,sp
    9b6c:	e0c1b31e 	bne	fp,r3,a23c <___vfiprintf_internal_r+0xc04>
    9b70:	8cb9c83a 	sub	fp,r17,r18
    9b74:	0701b10e 	bge	zero,fp,a23c <___vfiprintf_internal_r+0xc04>
    9b78:	01c00404 	movi	r7,16
    9b7c:	3f03890e 	bge	r7,fp,a9a4 <___vfiprintf_internal_r+0x136c>
    9b80:	00c00074 	movhi	r3,1
    9b84:	18c59804 	addi	r3,r3,5728
    9b88:	d8c02415 	stw	r3,144(sp)
    9b8c:	8007883a 	mov	r3,r16
    9b90:	034001c4 	movi	r13,7
    9b94:	e021883a 	mov	r16,fp
    9b98:	da402515 	stw	r9,148(sp)
    9b9c:	1839883a 	mov	fp,r3
    9ba0:	00000506 	br	9bb8 <___vfiprintf_internal_r+0x580>
    9ba4:	29800084 	addi	r6,r5,2
    9ba8:	42000204 	addi	r8,r8,8
    9bac:	180b883a 	mov	r5,r3
    9bb0:	843ffc04 	addi	r16,r16,-16
    9bb4:	3c000d0e 	bge	r7,r16,9bec <___vfiprintf_internal_r+0x5b4>
    9bb8:	10800404 	addi	r2,r2,16
    9bbc:	28c00044 	addi	r3,r5,1
    9bc0:	45c00015 	stw	r23,0(r8)
    9bc4:	41c00115 	stw	r7,4(r8)
    9bc8:	d8801c15 	stw	r2,112(sp)
    9bcc:	d8c01b15 	stw	r3,108(sp)
    9bd0:	68fff40e 	bge	r13,r3,9ba4 <__alt_data_end+0xff009ba4>
    9bd4:	1002241e 	bne	r2,zero,a468 <___vfiprintf_internal_r+0xe30>
    9bd8:	843ffc04 	addi	r16,r16,-16
    9bdc:	01800044 	movi	r6,1
    9be0:	000b883a 	mov	r5,zero
    9be4:	d811883a 	mov	r8,sp
    9be8:	3c3ff316 	blt	r7,r16,9bb8 <__alt_data_end+0xff009bb8>
    9bec:	da402517 	ldw	r9,148(sp)
    9bf0:	e007883a 	mov	r3,fp
    9bf4:	8039883a 	mov	fp,r16
    9bf8:	1821883a 	mov	r16,r3
    9bfc:	d8c02417 	ldw	r3,144(sp)
    9c00:	1705883a 	add	r2,r2,fp
    9c04:	47000115 	stw	fp,4(r8)
    9c08:	40c00015 	stw	r3,0(r8)
    9c0c:	d8801c15 	stw	r2,112(sp)
    9c10:	d9801b15 	stw	r6,108(sp)
    9c14:	00c001c4 	movi	r3,7
    9c18:	19827616 	blt	r3,r6,a5f4 <___vfiprintf_internal_r+0xfbc>
    9c1c:	4cf9c83a 	sub	fp,r9,r19
    9c20:	42000204 	addi	r8,r8,8
    9c24:	31000044 	addi	r4,r6,1
    9c28:	300b883a 	mov	r5,r6
    9c2c:	07018516 	blt	zero,fp,a244 <___vfiprintf_internal_r+0xc0c>
    9c30:	9885883a 	add	r2,r19,r2
    9c34:	45400015 	stw	r21,0(r8)
    9c38:	44c00115 	stw	r19,4(r8)
    9c3c:	d8801c15 	stw	r2,112(sp)
    9c40:	d9001b15 	stw	r4,108(sp)
    9c44:	00c001c4 	movi	r3,7
    9c48:	1901dd0e 	bge	r3,r4,a3c0 <___vfiprintf_internal_r+0xd88>
    9c4c:	1002401e 	bne	r2,zero,a550 <___vfiprintf_internal_r+0xf18>
    9c50:	d8001b15 	stw	zero,108(sp)
    9c54:	a2c0010c 	andi	r11,r20,4
    9c58:	58000226 	beq	r11,zero,9c64 <___vfiprintf_internal_r+0x62c>
    9c5c:	8ca7c83a 	sub	r19,r17,r18
    9c60:	04c2f216 	blt	zero,r19,a82c <___vfiprintf_internal_r+0x11f4>
    9c64:	8c80010e 	bge	r17,r18,9c6c <___vfiprintf_internal_r+0x634>
    9c68:	9023883a 	mov	r17,r18
    9c6c:	da802317 	ldw	r10,140(sp)
    9c70:	5455883a 	add	r10,r10,r17
    9c74:	da802315 	stw	r10,140(sp)
    9c78:	d8001b15 	stw	zero,108(sp)
    9c7c:	d811883a 	mov	r8,sp
    9c80:	003ea206 	br	970c <__alt_data_end+0xff00970c>
    9c84:	a5000814 	ori	r20,r20,32
    9c88:	80c00007 	ldb	r3,0(r16)
    9c8c:	003ec906 	br	97b4 <__alt_data_end+0xff0097b4>
    9c90:	80c00007 	ldb	r3,0(r16)
    9c94:	1b030926 	beq	r3,r12,a8bc <___vfiprintf_internal_r+0x1284>
    9c98:	a5000414 	ori	r20,r20,16
    9c9c:	003ec506 	br	97b4 <__alt_data_end+0xff0097b4>
    9ca0:	21003fcc 	andi	r4,r4,255
    9ca4:	20035e1e 	bne	r4,zero,aa20 <___vfiprintf_internal_r+0x13e8>
    9ca8:	a080080c 	andi	r2,r20,32
    9cac:	1002a526 	beq	r2,zero,a744 <___vfiprintf_internal_r+0x110c>
    9cb0:	da802217 	ldw	r10,136(sp)
    9cb4:	50800017 	ldw	r2,0(r10)
    9cb8:	da802317 	ldw	r10,140(sp)
    9cbc:	5007d7fa 	srai	r3,r10,31
    9cc0:	da802217 	ldw	r10,136(sp)
    9cc4:	10c00115 	stw	r3,4(r2)
    9cc8:	52800104 	addi	r10,r10,4
    9ccc:	da802215 	stw	r10,136(sp)
    9cd0:	da802317 	ldw	r10,140(sp)
    9cd4:	12800015 	stw	r10,0(r2)
    9cd8:	003e8c06 	br	970c <__alt_data_end+0xff00970c>
    9cdc:	21003fcc 	andi	r4,r4,255
    9ce0:	2003511e 	bne	r4,zero,aa28 <___vfiprintf_internal_r+0x13f0>
    9ce4:	a080080c 	andi	r2,r20,32
    9ce8:	1000a126 	beq	r2,zero,9f70 <___vfiprintf_internal_r+0x938>
    9cec:	da802217 	ldw	r10,136(sp)
    9cf0:	d8001d85 	stb	zero,118(sp)
    9cf4:	50800204 	addi	r2,r10,8
    9cf8:	54800017 	ldw	r18,0(r10)
    9cfc:	54c00117 	ldw	r19,4(r10)
    9d00:	4802b416 	blt	r9,zero,a7d4 <___vfiprintf_internal_r+0x119c>
    9d04:	013fdfc4 	movi	r4,-129
    9d08:	94c6b03a 	or	r3,r18,r19
    9d0c:	d8802215 	stw	r2,136(sp)
    9d10:	a128703a 	and	r20,r20,r4
    9d14:	1800a226 	beq	r3,zero,9fa0 <___vfiprintf_internal_r+0x968>
    9d18:	0039883a 	mov	fp,zero
    9d1c:	dd401a04 	addi	r21,sp,104
    9d20:	9006d0fa 	srli	r3,r18,3
    9d24:	9808977a 	slli	r4,r19,29
    9d28:	9826d0fa 	srli	r19,r19,3
    9d2c:	948001cc 	andi	r18,r18,7
    9d30:	90800c04 	addi	r2,r18,48
    9d34:	ad7fffc4 	addi	r21,r21,-1
    9d38:	20e4b03a 	or	r18,r4,r3
    9d3c:	a8800005 	stb	r2,0(r21)
    9d40:	94c6b03a 	or	r3,r18,r19
    9d44:	183ff61e 	bne	r3,zero,9d20 <__alt_data_end+0xff009d20>
    9d48:	a0c0004c 	andi	r3,r20,1
    9d4c:	18005926 	beq	r3,zero,9eb4 <___vfiprintf_internal_r+0x87c>
    9d50:	10803fcc 	andi	r2,r2,255
    9d54:	1080201c 	xori	r2,r2,128
    9d58:	10bfe004 	addi	r2,r2,-128
    9d5c:	00c00c04 	movi	r3,48
    9d60:	10c05426 	beq	r2,r3,9eb4 <___vfiprintf_internal_r+0x87c>
    9d64:	da801e17 	ldw	r10,120(sp)
    9d68:	a8bfffc4 	addi	r2,r21,-1
    9d6c:	a8ffffc5 	stb	r3,-1(r21)
    9d70:	50a7c83a 	sub	r19,r10,r2
    9d74:	102b883a 	mov	r21,r2
    9d78:	003f2f06 	br	9a38 <__alt_data_end+0xff009a38>
    9d7c:	21003fcc 	andi	r4,r4,255
    9d80:	2003421e 	bne	r4,zero,aa8c <___vfiprintf_internal_r+0x1454>
    9d84:	00800074 	movhi	r2,1
    9d88:	10853704 	addi	r2,r2,5340
    9d8c:	d8802615 	stw	r2,152(sp)
    9d90:	a080080c 	andi	r2,r20,32
    9d94:	1000aa26 	beq	r2,zero,a040 <___vfiprintf_internal_r+0xa08>
    9d98:	da802217 	ldw	r10,136(sp)
    9d9c:	54800017 	ldw	r18,0(r10)
    9da0:	54c00117 	ldw	r19,4(r10)
    9da4:	52800204 	addi	r10,r10,8
    9da8:	da802215 	stw	r10,136(sp)
    9dac:	a080004c 	andi	r2,r20,1
    9db0:	1001d226 	beq	r2,zero,a4fc <___vfiprintf_internal_r+0xec4>
    9db4:	94c4b03a 	or	r2,r18,r19
    9db8:	1002351e 	bne	r2,zero,a690 <___vfiprintf_internal_r+0x1058>
    9dbc:	d8001d85 	stb	zero,118(sp)
    9dc0:	48022216 	blt	r9,zero,a64c <___vfiprintf_internal_r+0x1014>
    9dc4:	00bfdfc4 	movi	r2,-129
    9dc8:	a0a8703a 	and	r20,r20,r2
    9dcc:	003f1506 	br	9a24 <__alt_data_end+0xff009a24>
    9dd0:	da802217 	ldw	r10,136(sp)
    9dd4:	04800044 	movi	r18,1
    9dd8:	d8001d85 	stb	zero,118(sp)
    9ddc:	50800017 	ldw	r2,0(r10)
    9de0:	52800104 	addi	r10,r10,4
    9de4:	da802215 	stw	r10,136(sp)
    9de8:	d8801005 	stb	r2,64(sp)
    9dec:	9027883a 	mov	r19,r18
    9df0:	dd401004 	addi	r21,sp,64
    9df4:	0013883a 	mov	r9,zero
    9df8:	003f1706 	br	9a58 <__alt_data_end+0xff009a58>
    9dfc:	21003fcc 	andi	r4,r4,255
    9e00:	2003201e 	bne	r4,zero,aa84 <___vfiprintf_internal_r+0x144c>
    9e04:	a080080c 	andi	r2,r20,32
    9e08:	10004b26 	beq	r2,zero,9f38 <___vfiprintf_internal_r+0x900>
    9e0c:	da802217 	ldw	r10,136(sp)
    9e10:	50800117 	ldw	r2,4(r10)
    9e14:	54800017 	ldw	r18,0(r10)
    9e18:	52800204 	addi	r10,r10,8
    9e1c:	da802215 	stw	r10,136(sp)
    9e20:	1027883a 	mov	r19,r2
    9e24:	10022c16 	blt	r2,zero,a6d8 <___vfiprintf_internal_r+0x10a0>
    9e28:	df001d83 	ldbu	fp,118(sp)
    9e2c:	48007216 	blt	r9,zero,9ff8 <___vfiprintf_internal_r+0x9c0>
    9e30:	00ffdfc4 	movi	r3,-129
    9e34:	94c4b03a 	or	r2,r18,r19
    9e38:	a0e8703a 	and	r20,r20,r3
    9e3c:	1000cc26 	beq	r2,zero,a170 <___vfiprintf_internal_r+0xb38>
    9e40:	98021026 	beq	r19,zero,a684 <___vfiprintf_internal_r+0x104c>
    9e44:	dc402415 	stw	r17,144(sp)
    9e48:	dc002515 	stw	r16,148(sp)
    9e4c:	9823883a 	mov	r17,r19
    9e50:	9021883a 	mov	r16,r18
    9e54:	dd401a04 	addi	r21,sp,104
    9e58:	4825883a 	mov	r18,r9
    9e5c:	4027883a 	mov	r19,r8
    9e60:	8009883a 	mov	r4,r16
    9e64:	880b883a 	mov	r5,r17
    9e68:	01800284 	movi	r6,10
    9e6c:	000f883a 	mov	r7,zero
    9e70:	000ba180 	call	ba18 <__umoddi3>
    9e74:	10800c04 	addi	r2,r2,48
    9e78:	ad7fffc4 	addi	r21,r21,-1
    9e7c:	8009883a 	mov	r4,r16
    9e80:	880b883a 	mov	r5,r17
    9e84:	a8800005 	stb	r2,0(r21)
    9e88:	01800284 	movi	r6,10
    9e8c:	000f883a 	mov	r7,zero
    9e90:	000b4a00 	call	b4a0 <__udivdi3>
    9e94:	1021883a 	mov	r16,r2
    9e98:	10c4b03a 	or	r2,r2,r3
    9e9c:	1823883a 	mov	r17,r3
    9ea0:	103fef1e 	bne	r2,zero,9e60 <__alt_data_end+0xff009e60>
    9ea4:	dc402417 	ldw	r17,144(sp)
    9ea8:	dc002517 	ldw	r16,148(sp)
    9eac:	9013883a 	mov	r9,r18
    9eb0:	9811883a 	mov	r8,r19
    9eb4:	da801e17 	ldw	r10,120(sp)
    9eb8:	5567c83a 	sub	r19,r10,r21
    9ebc:	003ede06 	br	9a38 <__alt_data_end+0xff009a38>
    9ec0:	38803fcc 	andi	r2,r7,255
    9ec4:	1080201c 	xori	r2,r2,128
    9ec8:	10bfe004 	addi	r2,r2,-128
    9ecc:	1002371e 	bne	r2,zero,a7ac <___vfiprintf_internal_r+0x1174>
    9ed0:	01000044 	movi	r4,1
    9ed4:	01c00804 	movi	r7,32
    9ed8:	80c00007 	ldb	r3,0(r16)
    9edc:	003e3506 	br	97b4 <__alt_data_end+0xff0097b4>
    9ee0:	a5000054 	ori	r20,r20,1
    9ee4:	80c00007 	ldb	r3,0(r16)
    9ee8:	003e3206 	br	97b4 <__alt_data_end+0xff0097b4>
    9eec:	a5002014 	ori	r20,r20,128
    9ef0:	80c00007 	ldb	r3,0(r16)
    9ef4:	003e2f06 	br	97b4 <__alt_data_end+0xff0097b4>
    9ef8:	8015883a 	mov	r10,r16
    9efc:	0023883a 	mov	r17,zero
    9f00:	18bff404 	addi	r2,r3,-48
    9f04:	50c00007 	ldb	r3,0(r10)
    9f08:	8c4002a4 	muli	r17,r17,10
    9f0c:	84000044 	addi	r16,r16,1
    9f10:	8015883a 	mov	r10,r16
    9f14:	1463883a 	add	r17,r2,r17
    9f18:	18bff404 	addi	r2,r3,-48
    9f1c:	30bff92e 	bgeu	r6,r2,9f04 <__alt_data_end+0xff009f04>
    9f20:	003e2506 	br	97b8 <__alt_data_end+0xff0097b8>
    9f24:	21003fcc 	andi	r4,r4,255
    9f28:	2002d41e 	bne	r4,zero,aa7c <___vfiprintf_internal_r+0x1444>
    9f2c:	a5000414 	ori	r20,r20,16
    9f30:	a080080c 	andi	r2,r20,32
    9f34:	103fb51e 	bne	r2,zero,9e0c <__alt_data_end+0xff009e0c>
    9f38:	a080040c 	andi	r2,r20,16
    9f3c:	1001f826 	beq	r2,zero,a720 <___vfiprintf_internal_r+0x10e8>
    9f40:	da802217 	ldw	r10,136(sp)
    9f44:	54800017 	ldw	r18,0(r10)
    9f48:	52800104 	addi	r10,r10,4
    9f4c:	da802215 	stw	r10,136(sp)
    9f50:	9027d7fa 	srai	r19,r18,31
    9f54:	9805883a 	mov	r2,r19
    9f58:	003fb206 	br	9e24 <__alt_data_end+0xff009e24>
    9f5c:	21003fcc 	andi	r4,r4,255
    9f60:	2002c41e 	bne	r4,zero,aa74 <___vfiprintf_internal_r+0x143c>
    9f64:	a5000414 	ori	r20,r20,16
    9f68:	a080080c 	andi	r2,r20,32
    9f6c:	103f5f1e 	bne	r2,zero,9cec <__alt_data_end+0xff009cec>
    9f70:	a080040c 	andi	r2,r20,16
    9f74:	10020f26 	beq	r2,zero,a7b4 <___vfiprintf_internal_r+0x117c>
    9f78:	da802217 	ldw	r10,136(sp)
    9f7c:	d8001d85 	stb	zero,118(sp)
    9f80:	0027883a 	mov	r19,zero
    9f84:	50800104 	addi	r2,r10,4
    9f88:	54800017 	ldw	r18,0(r10)
    9f8c:	48021116 	blt	r9,zero,a7d4 <___vfiprintf_internal_r+0x119c>
    9f90:	00ffdfc4 	movi	r3,-129
    9f94:	d8802215 	stw	r2,136(sp)
    9f98:	a0e8703a 	and	r20,r20,r3
    9f9c:	903f5e1e 	bne	r18,zero,9d18 <__alt_data_end+0xff009d18>
    9fa0:	0039883a 	mov	fp,zero
    9fa4:	4802a626 	beq	r9,zero,aa40 <___vfiprintf_internal_r+0x1408>
    9fa8:	0025883a 	mov	r18,zero
    9fac:	0027883a 	mov	r19,zero
    9fb0:	003f5a06 	br	9d1c <__alt_data_end+0xff009d1c>
    9fb4:	21003fcc 	andi	r4,r4,255
    9fb8:	20029f1e 	bne	r4,zero,aa38 <___vfiprintf_internal_r+0x1400>
    9fbc:	a5000414 	ori	r20,r20,16
    9fc0:	a080080c 	andi	r2,r20,32
    9fc4:	10005e1e 	bne	r2,zero,a140 <___vfiprintf_internal_r+0xb08>
    9fc8:	a080040c 	andi	r2,r20,16
    9fcc:	1001a21e 	bne	r2,zero,a658 <___vfiprintf_internal_r+0x1020>
    9fd0:	a080100c 	andi	r2,r20,64
    9fd4:	d8001d85 	stb	zero,118(sp)
    9fd8:	da802217 	ldw	r10,136(sp)
    9fdc:	1002231e 	bne	r2,zero,a86c <___vfiprintf_internal_r+0x1234>
    9fe0:	50800104 	addi	r2,r10,4
    9fe4:	54800017 	ldw	r18,0(r10)
    9fe8:	0027883a 	mov	r19,zero
    9fec:	4801a00e 	bge	r9,zero,a670 <___vfiprintf_internal_r+0x1038>
    9ff0:	d8802215 	stw	r2,136(sp)
    9ff4:	0039883a 	mov	fp,zero
    9ff8:	94c4b03a 	or	r2,r18,r19
    9ffc:	103f901e 	bne	r2,zero,9e40 <__alt_data_end+0xff009e40>
    a000:	00800044 	movi	r2,1
    a004:	10803fcc 	andi	r2,r2,255
    a008:	00c00044 	movi	r3,1
    a00c:	10c05926 	beq	r2,r3,a174 <___vfiprintf_internal_r+0xb3c>
    a010:	00c00084 	movi	r3,2
    a014:	10ffe41e 	bne	r2,r3,9fa8 <__alt_data_end+0xff009fa8>
    a018:	0025883a 	mov	r18,zero
    a01c:	0027883a 	mov	r19,zero
    a020:	00013d06 	br	a518 <___vfiprintf_internal_r+0xee0>
    a024:	21003fcc 	andi	r4,r4,255
    a028:	2002811e 	bne	r4,zero,aa30 <___vfiprintf_internal_r+0x13f8>
    a02c:	00800074 	movhi	r2,1
    a030:	10853204 	addi	r2,r2,5320
    a034:	d8802615 	stw	r2,152(sp)
    a038:	a080080c 	andi	r2,r20,32
    a03c:	103f561e 	bne	r2,zero,9d98 <__alt_data_end+0xff009d98>
    a040:	a080040c 	andi	r2,r20,16
    a044:	1001d126 	beq	r2,zero,a78c <___vfiprintf_internal_r+0x1154>
    a048:	da802217 	ldw	r10,136(sp)
    a04c:	0027883a 	mov	r19,zero
    a050:	54800017 	ldw	r18,0(r10)
    a054:	52800104 	addi	r10,r10,4
    a058:	da802215 	stw	r10,136(sp)
    a05c:	003f5306 	br	9dac <__alt_data_end+0xff009dac>
    a060:	da802217 	ldw	r10,136(sp)
    a064:	d8001d85 	stb	zero,118(sp)
    a068:	55400017 	ldw	r21,0(r10)
    a06c:	50c00104 	addi	r3,r10,4
    a070:	a8024226 	beq	r21,zero,a97c <___vfiprintf_internal_r+0x1344>
    a074:	48021816 	blt	r9,zero,a8d8 <___vfiprintf_internal_r+0x12a0>
    a078:	480d883a 	mov	r6,r9
    a07c:	000b883a 	mov	r5,zero
    a080:	a809883a 	mov	r4,r21
    a084:	d8c02a15 	stw	r3,168(sp)
    a088:	da002b15 	stw	r8,172(sp)
    a08c:	da402c15 	stw	r9,176(sp)
    a090:	00078880 	call	7888 <memchr>
    a094:	d8c02a17 	ldw	r3,168(sp)
    a098:	da002b17 	ldw	r8,172(sp)
    a09c:	da402c17 	ldw	r9,176(sp)
    a0a0:	10024826 	beq	r2,zero,a9c4 <___vfiprintf_internal_r+0x138c>
    a0a4:	1567c83a 	sub	r19,r2,r21
    a0a8:	df001d83 	ldbu	fp,118(sp)
    a0ac:	d8c02215 	stw	r3,136(sp)
    a0b0:	0013883a 	mov	r9,zero
    a0b4:	003e6006 	br	9a38 <__alt_data_end+0xff009a38>
    a0b8:	21003fcc 	andi	r4,r4,255
    a0bc:	203fc026 	beq	r4,zero,9fc0 <__alt_data_end+0xff009fc0>
    a0c0:	d9c01d85 	stb	r7,118(sp)
    a0c4:	003fbe06 	br	9fc0 <__alt_data_end+0xff009fc0>
    a0c8:	da802217 	ldw	r10,136(sp)
    a0cc:	54400017 	ldw	r17,0(r10)
    a0d0:	50800104 	addi	r2,r10,4
    a0d4:	883e3b16 	blt	r17,zero,99c4 <__alt_data_end+0xff0099c4>
    a0d8:	d8802215 	stw	r2,136(sp)
    a0dc:	80c00007 	ldb	r3,0(r16)
    a0e0:	003db406 	br	97b4 <__alt_data_end+0xff0097b4>
    a0e4:	01000044 	movi	r4,1
    a0e8:	01c00ac4 	movi	r7,43
    a0ec:	80c00007 	ldb	r3,0(r16)
    a0f0:	003db006 	br	97b4 <__alt_data_end+0xff0097b4>
    a0f4:	80c00007 	ldb	r3,0(r16)
    a0f8:	82800044 	addi	r10,r16,1
    a0fc:	1b423c26 	beq	r3,r13,a9f0 <___vfiprintf_internal_r+0x13b8>
    a100:	18bff404 	addi	r2,r3,-48
    a104:	0013883a 	mov	r9,zero
    a108:	30822b36 	bltu	r6,r2,a9b8 <___vfiprintf_internal_r+0x1380>
    a10c:	50c00007 	ldb	r3,0(r10)
    a110:	4a4002a4 	muli	r9,r9,10
    a114:	54000044 	addi	r16,r10,1
    a118:	8015883a 	mov	r10,r16
    a11c:	4893883a 	add	r9,r9,r2
    a120:	18bff404 	addi	r2,r3,-48
    a124:	30bff92e 	bgeu	r6,r2,a10c <__alt_data_end+0xff00a10c>
    a128:	483da30e 	bge	r9,zero,97b8 <__alt_data_end+0xff0097b8>
    a12c:	027fffc4 	movi	r9,-1
    a130:	003da106 	br	97b8 <__alt_data_end+0xff0097b8>
    a134:	a5001014 	ori	r20,r20,64
    a138:	80c00007 	ldb	r3,0(r16)
    a13c:	003d9d06 	br	97b4 <__alt_data_end+0xff0097b4>
    a140:	da802217 	ldw	r10,136(sp)
    a144:	d8001d85 	stb	zero,118(sp)
    a148:	50c00204 	addi	r3,r10,8
    a14c:	54800017 	ldw	r18,0(r10)
    a150:	54c00117 	ldw	r19,4(r10)
    a154:	4801ca16 	blt	r9,zero,a880 <___vfiprintf_internal_r+0x1248>
    a158:	013fdfc4 	movi	r4,-129
    a15c:	94c4b03a 	or	r2,r18,r19
    a160:	d8c02215 	stw	r3,136(sp)
    a164:	a128703a 	and	r20,r20,r4
    a168:	0039883a 	mov	fp,zero
    a16c:	103f341e 	bne	r2,zero,9e40 <__alt_data_end+0xff009e40>
    a170:	483e2e26 	beq	r9,zero,9a2c <__alt_data_end+0xff009a2c>
    a174:	0025883a 	mov	r18,zero
    a178:	94800c04 	addi	r18,r18,48
    a17c:	dc8019c5 	stb	r18,103(sp)
    a180:	dcc02717 	ldw	r19,156(sp)
    a184:	dd4019c4 	addi	r21,sp,103
    a188:	003e2b06 	br	9a38 <__alt_data_end+0xff009a38>
    a18c:	21003fcc 	andi	r4,r4,255
    a190:	2002361e 	bne	r4,zero,aa6c <___vfiprintf_internal_r+0x1434>
    a194:	1801c126 	beq	r3,zero,a89c <___vfiprintf_internal_r+0x1264>
    a198:	04800044 	movi	r18,1
    a19c:	d8c01005 	stb	r3,64(sp)
    a1a0:	d8001d85 	stb	zero,118(sp)
    a1a4:	9027883a 	mov	r19,r18
    a1a8:	dd401004 	addi	r21,sp,64
    a1ac:	003f1106 	br	9df4 <__alt_data_end+0xff009df4>
    a1b0:	d9402117 	ldw	r5,132(sp)
    a1b4:	d9002017 	ldw	r4,128(sp)
    a1b8:	d9801a04 	addi	r6,sp,104
    a1bc:	d9c02b15 	stw	r7,172(sp)
    a1c0:	dbc02a15 	stw	r15,168(sp)
    a1c4:	00095240 	call	9524 <__sprint_r.part.0>
    a1c8:	d9c02b17 	ldw	r7,172(sp)
    a1cc:	dbc02a17 	ldw	r15,168(sp)
    a1d0:	10006d1e 	bne	r2,zero,a388 <___vfiprintf_internal_r+0xd50>
    a1d4:	d9801b17 	ldw	r6,108(sp)
    a1d8:	d8801c17 	ldw	r2,112(sp)
    a1dc:	d811883a 	mov	r8,sp
    a1e0:	31400044 	addi	r5,r6,1
    a1e4:	003e3306 	br	9ab4 <__alt_data_end+0xff009ab4>
    a1e8:	d9401b17 	ldw	r5,108(sp)
    a1ec:	d8801c17 	ldw	r2,112(sp)
    a1f0:	29000044 	addi	r4,r5,1
    a1f4:	d8c01d87 	ldb	r3,118(sp)
    a1f8:	183e4d26 	beq	r3,zero,9b30 <__alt_data_end+0xff009b30>
    a1fc:	00c00044 	movi	r3,1
    a200:	d9401d84 	addi	r5,sp,118
    a204:	10c5883a 	add	r2,r2,r3
    a208:	41400015 	stw	r5,0(r8)
    a20c:	40c00115 	stw	r3,4(r8)
    a210:	d8801c15 	stw	r2,112(sp)
    a214:	d9001b15 	stw	r4,108(sp)
    a218:	014001c4 	movi	r5,7
    a21c:	2900a90e 	bge	r5,r4,a4c4 <___vfiprintf_internal_r+0xe8c>
    a220:	1000da1e 	bne	r2,zero,a58c <___vfiprintf_internal_r+0xf54>
    a224:	7000ab1e 	bne	r14,zero,a4d4 <___vfiprintf_internal_r+0xe9c>
    a228:	000b883a 	mov	r5,zero
    a22c:	1809883a 	mov	r4,r3
    a230:	d811883a 	mov	r8,sp
    a234:	00c02004 	movi	r3,128
    a238:	e0fe4d26 	beq	fp,r3,9b70 <__alt_data_end+0xff009b70>
    a23c:	4cf9c83a 	sub	fp,r9,r19
    a240:	073e7b0e 	bge	zero,fp,9c30 <__alt_data_end+0xff009c30>
    a244:	01c00404 	movi	r7,16
    a248:	3f01900e 	bge	r7,fp,a88c <___vfiprintf_internal_r+0x1254>
    a24c:	00c00074 	movhi	r3,1
    a250:	18c59804 	addi	r3,r3,5728
    a254:	d8c02415 	stw	r3,144(sp)
    a258:	034001c4 	movi	r13,7
    a25c:	00000506 	br	a274 <___vfiprintf_internal_r+0xc3c>
    a260:	29000084 	addi	r4,r5,2
    a264:	42000204 	addi	r8,r8,8
    a268:	180b883a 	mov	r5,r3
    a26c:	e73ffc04 	addi	fp,fp,-16
    a270:	3f000d0e 	bge	r7,fp,a2a8 <___vfiprintf_internal_r+0xc70>
    a274:	10800404 	addi	r2,r2,16
    a278:	28c00044 	addi	r3,r5,1
    a27c:	45c00015 	stw	r23,0(r8)
    a280:	41c00115 	stw	r7,4(r8)
    a284:	d8801c15 	stw	r2,112(sp)
    a288:	d8c01b15 	stw	r3,108(sp)
    a28c:	68fff40e 	bge	r13,r3,a260 <__alt_data_end+0xff00a260>
    a290:	1000101e 	bne	r2,zero,a2d4 <___vfiprintf_internal_r+0xc9c>
    a294:	e73ffc04 	addi	fp,fp,-16
    a298:	01000044 	movi	r4,1
    a29c:	000b883a 	mov	r5,zero
    a2a0:	d811883a 	mov	r8,sp
    a2a4:	3f3ff316 	blt	r7,fp,a274 <__alt_data_end+0xff00a274>
    a2a8:	da802417 	ldw	r10,144(sp)
    a2ac:	1705883a 	add	r2,r2,fp
    a2b0:	47000115 	stw	fp,4(r8)
    a2b4:	42800015 	stw	r10,0(r8)
    a2b8:	d8801c15 	stw	r2,112(sp)
    a2bc:	d9001b15 	stw	r4,108(sp)
    a2c0:	00c001c4 	movi	r3,7
    a2c4:	19003616 	blt	r3,r4,a3a0 <___vfiprintf_internal_r+0xd68>
    a2c8:	42000204 	addi	r8,r8,8
    a2cc:	21000044 	addi	r4,r4,1
    a2d0:	003e5706 	br	9c30 <__alt_data_end+0xff009c30>
    a2d4:	d9402117 	ldw	r5,132(sp)
    a2d8:	d9002017 	ldw	r4,128(sp)
    a2dc:	d9801a04 	addi	r6,sp,104
    a2e0:	d9c02b15 	stw	r7,172(sp)
    a2e4:	db402a15 	stw	r13,168(sp)
    a2e8:	00095240 	call	9524 <__sprint_r.part.0>
    a2ec:	d9c02b17 	ldw	r7,172(sp)
    a2f0:	db402a17 	ldw	r13,168(sp)
    a2f4:	1000241e 	bne	r2,zero,a388 <___vfiprintf_internal_r+0xd50>
    a2f8:	d9401b17 	ldw	r5,108(sp)
    a2fc:	d8801c17 	ldw	r2,112(sp)
    a300:	d811883a 	mov	r8,sp
    a304:	29000044 	addi	r4,r5,1
    a308:	003fd806 	br	a26c <__alt_data_end+0xff00a26c>
    a30c:	d9401b17 	ldw	r5,108(sp)
    a310:	00c00074 	movhi	r3,1
    a314:	18c59c04 	addi	r3,r3,5744
    a318:	d8c02415 	stw	r3,144(sp)
    a31c:	29400044 	addi	r5,r5,1
    a320:	d8c02417 	ldw	r3,144(sp)
    a324:	14c5883a 	add	r2,r2,r19
    a328:	44c00115 	stw	r19,4(r8)
    a32c:	40c00015 	stw	r3,0(r8)
    a330:	d8801c15 	stw	r2,112(sp)
    a334:	d9401b15 	stw	r5,108(sp)
    a338:	00c001c4 	movi	r3,7
    a33c:	1940070e 	bge	r3,r5,a35c <___vfiprintf_internal_r+0xd24>
    a340:	103e4826 	beq	r2,zero,9c64 <__alt_data_end+0xff009c64>
    a344:	d9402117 	ldw	r5,132(sp)
    a348:	d9002017 	ldw	r4,128(sp)
    a34c:	d9801a04 	addi	r6,sp,104
    a350:	00095240 	call	9524 <__sprint_r.part.0>
    a354:	10000c1e 	bne	r2,zero,a388 <___vfiprintf_internal_r+0xd50>
    a358:	d8801c17 	ldw	r2,112(sp)
    a35c:	8c80010e 	bge	r17,r18,a364 <___vfiprintf_internal_r+0xd2c>
    a360:	9023883a 	mov	r17,r18
    a364:	da802317 	ldw	r10,140(sp)
    a368:	5455883a 	add	r10,r10,r17
    a36c:	da802315 	stw	r10,140(sp)
    a370:	103e4126 	beq	r2,zero,9c78 <__alt_data_end+0xff009c78>
    a374:	d9402117 	ldw	r5,132(sp)
    a378:	d9002017 	ldw	r4,128(sp)
    a37c:	d9801a04 	addi	r6,sp,104
    a380:	00095240 	call	9524 <__sprint_r.part.0>
    a384:	103e3c26 	beq	r2,zero,9c78 <__alt_data_end+0xff009c78>
    a388:	dd002117 	ldw	r20,132(sp)
    a38c:	a080030b 	ldhu	r2,12(r20)
    a390:	1080100c 	andi	r2,r2,64
    a394:	1001231e 	bne	r2,zero,a824 <___vfiprintf_internal_r+0x11ec>
    a398:	d8802317 	ldw	r2,140(sp)
    a39c:	003d7b06 	br	998c <__alt_data_end+0xff00998c>
    a3a0:	1000991e 	bne	r2,zero,a608 <___vfiprintf_internal_r+0xfd0>
    a3a4:	00c00044 	movi	r3,1
    a3a8:	9805883a 	mov	r2,r19
    a3ac:	dd400015 	stw	r21,0(sp)
    a3b0:	dcc00115 	stw	r19,4(sp)
    a3b4:	dcc01c15 	stw	r19,112(sp)
    a3b8:	d8c01b15 	stw	r3,108(sp)
    a3bc:	d811883a 	mov	r8,sp
    a3c0:	42000204 	addi	r8,r8,8
    a3c4:	a2c0010c 	andi	r11,r20,4
    a3c8:	583fe426 	beq	r11,zero,a35c <__alt_data_end+0xff00a35c>
    a3cc:	8ca7c83a 	sub	r19,r17,r18
    a3d0:	04ffe20e 	bge	zero,r19,a35c <__alt_data_end+0xff00a35c>
    a3d4:	01c00404 	movi	r7,16
    a3d8:	3cffcc0e 	bge	r7,r19,a30c <__alt_data_end+0xff00a30c>
    a3dc:	02800074 	movhi	r10,1
    a3e0:	52859c04 	addi	r10,r10,5744
    a3e4:	d9001b17 	ldw	r4,108(sp)
    a3e8:	da802415 	stw	r10,144(sp)
    a3ec:	382b883a 	mov	r21,r7
    a3f0:	050001c4 	movi	r20,7
    a3f4:	df002017 	ldw	fp,128(sp)
    a3f8:	00000506 	br	a410 <___vfiprintf_internal_r+0xdd8>
    a3fc:	21400084 	addi	r5,r4,2
    a400:	42000204 	addi	r8,r8,8
    a404:	1809883a 	mov	r4,r3
    a408:	9cfffc04 	addi	r19,r19,-16
    a40c:	acffc40e 	bge	r21,r19,a320 <__alt_data_end+0xff00a320>
    a410:	10800404 	addi	r2,r2,16
    a414:	20c00044 	addi	r3,r4,1
    a418:	45800015 	stw	r22,0(r8)
    a41c:	45400115 	stw	r21,4(r8)
    a420:	d8801c15 	stw	r2,112(sp)
    a424:	d8c01b15 	stw	r3,108(sp)
    a428:	a0fff40e 	bge	r20,r3,a3fc <__alt_data_end+0xff00a3fc>
    a42c:	1000041e 	bne	r2,zero,a440 <___vfiprintf_internal_r+0xe08>
    a430:	01400044 	movi	r5,1
    a434:	0009883a 	mov	r4,zero
    a438:	d811883a 	mov	r8,sp
    a43c:	003ff206 	br	a408 <__alt_data_end+0xff00a408>
    a440:	d9402117 	ldw	r5,132(sp)
    a444:	d9801a04 	addi	r6,sp,104
    a448:	e009883a 	mov	r4,fp
    a44c:	00095240 	call	9524 <__sprint_r.part.0>
    a450:	103fcd1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a454:	d9001b17 	ldw	r4,108(sp)
    a458:	d8801c17 	ldw	r2,112(sp)
    a45c:	d811883a 	mov	r8,sp
    a460:	21400044 	addi	r5,r4,1
    a464:	003fe806 	br	a408 <__alt_data_end+0xff00a408>
    a468:	d9402117 	ldw	r5,132(sp)
    a46c:	d9002017 	ldw	r4,128(sp)
    a470:	d9801a04 	addi	r6,sp,104
    a474:	d9c02b15 	stw	r7,172(sp)
    a478:	db402a15 	stw	r13,168(sp)
    a47c:	00095240 	call	9524 <__sprint_r.part.0>
    a480:	d9c02b17 	ldw	r7,172(sp)
    a484:	db402a17 	ldw	r13,168(sp)
    a488:	103fbf1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a48c:	d9401b17 	ldw	r5,108(sp)
    a490:	d8801c17 	ldw	r2,112(sp)
    a494:	d811883a 	mov	r8,sp
    a498:	29800044 	addi	r6,r5,1
    a49c:	003dc406 	br	9bb0 <__alt_data_end+0xff009bb0>
    a4a0:	1000d21e 	bne	r2,zero,a7ec <___vfiprintf_internal_r+0x11b4>
    a4a4:	d8c01d87 	ldb	r3,118(sp)
    a4a8:	18009526 	beq	r3,zero,a700 <___vfiprintf_internal_r+0x10c8>
    a4ac:	00800044 	movi	r2,1
    a4b0:	d8c01d84 	addi	r3,sp,118
    a4b4:	1009883a 	mov	r4,r2
    a4b8:	d8c00015 	stw	r3,0(sp)
    a4bc:	d8800115 	stw	r2,4(sp)
    a4c0:	d811883a 	mov	r8,sp
    a4c4:	200b883a 	mov	r5,r4
    a4c8:	42000204 	addi	r8,r8,8
    a4cc:	21000044 	addi	r4,r4,1
    a4d0:	003d9706 	br	9b30 <__alt_data_end+0xff009b30>
    a4d4:	d9001d04 	addi	r4,sp,116
    a4d8:	00800084 	movi	r2,2
    a4dc:	d9000015 	stw	r4,0(sp)
    a4e0:	d8800115 	stw	r2,4(sp)
    a4e4:	1809883a 	mov	r4,r3
    a4e8:	d811883a 	mov	r8,sp
    a4ec:	200b883a 	mov	r5,r4
    a4f0:	42000204 	addi	r8,r8,8
    a4f4:	21000044 	addi	r4,r4,1
    a4f8:	003f4e06 	br	a234 <__alt_data_end+0xff00a234>
    a4fc:	d8001d85 	stb	zero,118(sp)
    a500:	48005016 	blt	r9,zero,a644 <___vfiprintf_internal_r+0x100c>
    a504:	00ffdfc4 	movi	r3,-129
    a508:	94c4b03a 	or	r2,r18,r19
    a50c:	a0e8703a 	and	r20,r20,r3
    a510:	103d4426 	beq	r2,zero,9a24 <__alt_data_end+0xff009a24>
    a514:	0039883a 	mov	fp,zero
    a518:	d9002617 	ldw	r4,152(sp)
    a51c:	dd401a04 	addi	r21,sp,104
    a520:	908003cc 	andi	r2,r18,15
    a524:	9806973a 	slli	r3,r19,28
    a528:	2085883a 	add	r2,r4,r2
    a52c:	9024d13a 	srli	r18,r18,4
    a530:	10800003 	ldbu	r2,0(r2)
    a534:	9826d13a 	srli	r19,r19,4
    a538:	ad7fffc4 	addi	r21,r21,-1
    a53c:	1ca4b03a 	or	r18,r3,r18
    a540:	a8800005 	stb	r2,0(r21)
    a544:	94c4b03a 	or	r2,r18,r19
    a548:	103ff51e 	bne	r2,zero,a520 <__alt_data_end+0xff00a520>
    a54c:	003e5906 	br	9eb4 <__alt_data_end+0xff009eb4>
    a550:	d9402117 	ldw	r5,132(sp)
    a554:	d9002017 	ldw	r4,128(sp)
    a558:	d9801a04 	addi	r6,sp,104
    a55c:	00095240 	call	9524 <__sprint_r.part.0>
    a560:	103f891e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a564:	d8801c17 	ldw	r2,112(sp)
    a568:	d811883a 	mov	r8,sp
    a56c:	003f9506 	br	a3c4 <__alt_data_end+0xff00a3c4>
    a570:	d9402117 	ldw	r5,132(sp)
    a574:	d9002017 	ldw	r4,128(sp)
    a578:	d9801a04 	addi	r6,sp,104
    a57c:	00095240 	call	9524 <__sprint_r.part.0>
    a580:	103f811e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a584:	d811883a 	mov	r8,sp
    a588:	003ced06 	br	9940 <__alt_data_end+0xff009940>
    a58c:	d9402117 	ldw	r5,132(sp)
    a590:	d9002017 	ldw	r4,128(sp)
    a594:	d9801a04 	addi	r6,sp,104
    a598:	da402c15 	stw	r9,176(sp)
    a59c:	db802a15 	stw	r14,168(sp)
    a5a0:	00095240 	call	9524 <__sprint_r.part.0>
    a5a4:	da402c17 	ldw	r9,176(sp)
    a5a8:	db802a17 	ldw	r14,168(sp)
    a5ac:	103f761e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a5b0:	d9401b17 	ldw	r5,108(sp)
    a5b4:	d8801c17 	ldw	r2,112(sp)
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	29000044 	addi	r4,r5,1
    a5c0:	003d5b06 	br	9b30 <__alt_data_end+0xff009b30>
    a5c4:	d9402117 	ldw	r5,132(sp)
    a5c8:	d9002017 	ldw	r4,128(sp)
    a5cc:	d9801a04 	addi	r6,sp,104
    a5d0:	da402c15 	stw	r9,176(sp)
    a5d4:	00095240 	call	9524 <__sprint_r.part.0>
    a5d8:	da402c17 	ldw	r9,176(sp)
    a5dc:	103f6a1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a5e0:	d9401b17 	ldw	r5,108(sp)
    a5e4:	d8801c17 	ldw	r2,112(sp)
    a5e8:	d811883a 	mov	r8,sp
    a5ec:	29000044 	addi	r4,r5,1
    a5f0:	003f1006 	br	a234 <__alt_data_end+0xff00a234>
    a5f4:	1000c31e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0x12cc>
    a5f8:	01000044 	movi	r4,1
    a5fc:	000b883a 	mov	r5,zero
    a600:	d811883a 	mov	r8,sp
    a604:	003f0d06 	br	a23c <__alt_data_end+0xff00a23c>
    a608:	d9402117 	ldw	r5,132(sp)
    a60c:	d9002017 	ldw	r4,128(sp)
    a610:	d9801a04 	addi	r6,sp,104
    a614:	00095240 	call	9524 <__sprint_r.part.0>
    a618:	103f5b1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a61c:	d9001b17 	ldw	r4,108(sp)
    a620:	d8801c17 	ldw	r2,112(sp)
    a624:	d811883a 	mov	r8,sp
    a628:	21000044 	addi	r4,r4,1
    a62c:	003d8006 	br	9c30 <__alt_data_end+0xff009c30>
    a630:	01000074 	movhi	r4,1
    a634:	21053704 	addi	r4,r4,5340
    a638:	d9002615 	stw	r4,152(sp)
    a63c:	d8c02215 	stw	r3,136(sp)
    a640:	1029883a 	mov	r20,r2
    a644:	94c4b03a 	or	r2,r18,r19
    a648:	103fb21e 	bne	r2,zero,a514 <__alt_data_end+0xff00a514>
    a64c:	0039883a 	mov	fp,zero
    a650:	00800084 	movi	r2,2
    a654:	003e6b06 	br	a004 <__alt_data_end+0xff00a004>
    a658:	da802217 	ldw	r10,136(sp)
    a65c:	d8001d85 	stb	zero,118(sp)
    a660:	0027883a 	mov	r19,zero
    a664:	50800104 	addi	r2,r10,4
    a668:	54800017 	ldw	r18,0(r10)
    a66c:	483e6016 	blt	r9,zero,9ff0 <__alt_data_end+0xff009ff0>
    a670:	00ffdfc4 	movi	r3,-129
    a674:	d8802215 	stw	r2,136(sp)
    a678:	a0e8703a 	and	r20,r20,r3
    a67c:	0039883a 	mov	fp,zero
    a680:	903ebb26 	beq	r18,zero,a170 <__alt_data_end+0xff00a170>
    a684:	00800244 	movi	r2,9
    a688:	14bdee36 	bltu	r2,r18,9e44 <__alt_data_end+0xff009e44>
    a68c:	003eba06 	br	a178 <__alt_data_end+0xff00a178>
    a690:	00800c04 	movi	r2,48
    a694:	d8c01d45 	stb	r3,117(sp)
    a698:	d8801d05 	stb	r2,116(sp)
    a69c:	d8001d85 	stb	zero,118(sp)
    a6a0:	a0c00094 	ori	r3,r20,2
    a6a4:	4800a916 	blt	r9,zero,a94c <___vfiprintf_internal_r+0x1314>
    a6a8:	00bfdfc4 	movi	r2,-129
    a6ac:	a096703a 	and	r11,r20,r2
    a6b0:	5d000094 	ori	r20,r11,2
    a6b4:	0039883a 	mov	fp,zero
    a6b8:	003f9706 	br	a518 <__alt_data_end+0xff00a518>
    a6bc:	8025883a 	mov	r18,r16
    a6c0:	003c2e06 	br	977c <__alt_data_end+0xff00977c>
    a6c4:	00800074 	movhi	r2,1
    a6c8:	10853704 	addi	r2,r2,5340
    a6cc:	0039883a 	mov	fp,zero
    a6d0:	d8802615 	stw	r2,152(sp)
    a6d4:	003f9006 	br	a518 <__alt_data_end+0xff00a518>
    a6d8:	04a5c83a 	sub	r18,zero,r18
    a6dc:	07000b44 	movi	fp,45
    a6e0:	9004c03a 	cmpne	r2,r18,zero
    a6e4:	04e7c83a 	sub	r19,zero,r19
    a6e8:	df001d85 	stb	fp,118(sp)
    a6ec:	98a7c83a 	sub	r19,r19,r2
    a6f0:	48009f16 	blt	r9,zero,a970 <___vfiprintf_internal_r+0x1338>
    a6f4:	00bfdfc4 	movi	r2,-129
    a6f8:	a0a8703a 	and	r20,r20,r2
    a6fc:	003dd006 	br	9e40 <__alt_data_end+0xff009e40>
    a700:	70004c26 	beq	r14,zero,a834 <___vfiprintf_internal_r+0x11fc>
    a704:	00800084 	movi	r2,2
    a708:	d8c01d04 	addi	r3,sp,116
    a70c:	d8c00015 	stw	r3,0(sp)
    a710:	d8800115 	stw	r2,4(sp)
    a714:	01000044 	movi	r4,1
    a718:	d811883a 	mov	r8,sp
    a71c:	003f7306 	br	a4ec <__alt_data_end+0xff00a4ec>
    a720:	a080100c 	andi	r2,r20,64
    a724:	da802217 	ldw	r10,136(sp)
    a728:	103e0626 	beq	r2,zero,9f44 <__alt_data_end+0xff009f44>
    a72c:	5480000f 	ldh	r18,0(r10)
    a730:	52800104 	addi	r10,r10,4
    a734:	da802215 	stw	r10,136(sp)
    a738:	9027d7fa 	srai	r19,r18,31
    a73c:	9805883a 	mov	r2,r19
    a740:	003db806 	br	9e24 <__alt_data_end+0xff009e24>
    a744:	a080040c 	andi	r2,r20,16
    a748:	1000091e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0x1138>
    a74c:	a2c0100c 	andi	r11,r20,64
    a750:	58000726 	beq	r11,zero,a770 <___vfiprintf_internal_r+0x1138>
    a754:	da802217 	ldw	r10,136(sp)
    a758:	50800017 	ldw	r2,0(r10)
    a75c:	52800104 	addi	r10,r10,4
    a760:	da802215 	stw	r10,136(sp)
    a764:	da802317 	ldw	r10,140(sp)
    a768:	1280000d 	sth	r10,0(r2)
    a76c:	003be706 	br	970c <__alt_data_end+0xff00970c>
    a770:	da802217 	ldw	r10,136(sp)
    a774:	50800017 	ldw	r2,0(r10)
    a778:	52800104 	addi	r10,r10,4
    a77c:	da802215 	stw	r10,136(sp)
    a780:	da802317 	ldw	r10,140(sp)
    a784:	12800015 	stw	r10,0(r2)
    a788:	003be006 	br	970c <__alt_data_end+0xff00970c>
    a78c:	a080100c 	andi	r2,r20,64
    a790:	da802217 	ldw	r10,136(sp)
    a794:	10003026 	beq	r2,zero,a858 <___vfiprintf_internal_r+0x1220>
    a798:	5480000b 	ldhu	r18,0(r10)
    a79c:	52800104 	addi	r10,r10,4
    a7a0:	0027883a 	mov	r19,zero
    a7a4:	da802215 	stw	r10,136(sp)
    a7a8:	003d8006 	br	9dac <__alt_data_end+0xff009dac>
    a7ac:	80c00007 	ldb	r3,0(r16)
    a7b0:	003c0006 	br	97b4 <__alt_data_end+0xff0097b4>
    a7b4:	a080100c 	andi	r2,r20,64
    a7b8:	d8001d85 	stb	zero,118(sp)
    a7bc:	da802217 	ldw	r10,136(sp)
    a7c0:	1000201e 	bne	r2,zero,a844 <___vfiprintf_internal_r+0x120c>
    a7c4:	50800104 	addi	r2,r10,4
    a7c8:	54800017 	ldw	r18,0(r10)
    a7cc:	0027883a 	mov	r19,zero
    a7d0:	483def0e 	bge	r9,zero,9f90 <__alt_data_end+0xff009f90>
    a7d4:	94c6b03a 	or	r3,r18,r19
    a7d8:	d8802215 	stw	r2,136(sp)
    a7dc:	183d4e1e 	bne	r3,zero,9d18 <__alt_data_end+0xff009d18>
    a7e0:	0039883a 	mov	fp,zero
    a7e4:	0005883a 	mov	r2,zero
    a7e8:	003e0606 	br	a004 <__alt_data_end+0xff00a004>
    a7ec:	d9402117 	ldw	r5,132(sp)
    a7f0:	d9002017 	ldw	r4,128(sp)
    a7f4:	d9801a04 	addi	r6,sp,104
    a7f8:	da402c15 	stw	r9,176(sp)
    a7fc:	db802a15 	stw	r14,168(sp)
    a800:	00095240 	call	9524 <__sprint_r.part.0>
    a804:	da402c17 	ldw	r9,176(sp)
    a808:	db802a17 	ldw	r14,168(sp)
    a80c:	103ede1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a810:	d9401b17 	ldw	r5,108(sp)
    a814:	d8801c17 	ldw	r2,112(sp)
    a818:	d811883a 	mov	r8,sp
    a81c:	29000044 	addi	r4,r5,1
    a820:	003e7406 	br	a1f4 <__alt_data_end+0xff00a1f4>
    a824:	00bfffc4 	movi	r2,-1
    a828:	003c5806 	br	998c <__alt_data_end+0xff00998c>
    a82c:	d811883a 	mov	r8,sp
    a830:	003ee806 	br	a3d4 <__alt_data_end+0xff00a3d4>
    a834:	000b883a 	mov	r5,zero
    a838:	01000044 	movi	r4,1
    a83c:	d811883a 	mov	r8,sp
    a840:	003e7c06 	br	a234 <__alt_data_end+0xff00a234>
    a844:	50800104 	addi	r2,r10,4
    a848:	5480000b 	ldhu	r18,0(r10)
    a84c:	0027883a 	mov	r19,zero
    a850:	483dcf0e 	bge	r9,zero,9f90 <__alt_data_end+0xff009f90>
    a854:	003fdf06 	br	a7d4 <__alt_data_end+0xff00a7d4>
    a858:	54800017 	ldw	r18,0(r10)
    a85c:	52800104 	addi	r10,r10,4
    a860:	0027883a 	mov	r19,zero
    a864:	da802215 	stw	r10,136(sp)
    a868:	003d5006 	br	9dac <__alt_data_end+0xff009dac>
    a86c:	50800104 	addi	r2,r10,4
    a870:	5480000b 	ldhu	r18,0(r10)
    a874:	0027883a 	mov	r19,zero
    a878:	483f7d0e 	bge	r9,zero,a670 <__alt_data_end+0xff00a670>
    a87c:	003ddc06 	br	9ff0 <__alt_data_end+0xff009ff0>
    a880:	d8c02215 	stw	r3,136(sp)
    a884:	0039883a 	mov	fp,zero
    a888:	003ddb06 	br	9ff8 <__alt_data_end+0xff009ff8>
    a88c:	02800074 	movhi	r10,1
    a890:	52859804 	addi	r10,r10,5728
    a894:	da802415 	stw	r10,144(sp)
    a898:	003e8306 	br	a2a8 <__alt_data_end+0xff00a2a8>
    a89c:	d8801c17 	ldw	r2,112(sp)
    a8a0:	dd002117 	ldw	r20,132(sp)
    a8a4:	103eb926 	beq	r2,zero,a38c <__alt_data_end+0xff00a38c>
    a8a8:	d9002017 	ldw	r4,128(sp)
    a8ac:	d9801a04 	addi	r6,sp,104
    a8b0:	a00b883a 	mov	r5,r20
    a8b4:	00095240 	call	9524 <__sprint_r.part.0>
    a8b8:	003eb406 	br	a38c <__alt_data_end+0xff00a38c>
    a8bc:	80c00043 	ldbu	r3,1(r16)
    a8c0:	a5000814 	ori	r20,r20,32
    a8c4:	84000044 	addi	r16,r16,1
    a8c8:	18c03fcc 	andi	r3,r3,255
    a8cc:	18c0201c 	xori	r3,r3,128
    a8d0:	18ffe004 	addi	r3,r3,-128
    a8d4:	003bb706 	br	97b4 <__alt_data_end+0xff0097b4>
    a8d8:	a809883a 	mov	r4,r21
    a8dc:	d8c02a15 	stw	r3,168(sp)
    a8e0:	da002b15 	stw	r8,172(sp)
    a8e4:	00027ec0 	call	27ec <strlen>
    a8e8:	d8c02a17 	ldw	r3,168(sp)
    a8ec:	1027883a 	mov	r19,r2
    a8f0:	df001d83 	ldbu	fp,118(sp)
    a8f4:	d8c02215 	stw	r3,136(sp)
    a8f8:	0013883a 	mov	r9,zero
    a8fc:	da002b17 	ldw	r8,172(sp)
    a900:	003c4d06 	br	9a38 <__alt_data_end+0xff009a38>
    a904:	d9402117 	ldw	r5,132(sp)
    a908:	d9002017 	ldw	r4,128(sp)
    a90c:	d9801a04 	addi	r6,sp,104
    a910:	da402c15 	stw	r9,176(sp)
    a914:	00095240 	call	9524 <__sprint_r.part.0>
    a918:	da402c17 	ldw	r9,176(sp)
    a91c:	103e9a1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a920:	d9401b17 	ldw	r5,108(sp)
    a924:	d8801c17 	ldw	r2,112(sp)
    a928:	d811883a 	mov	r8,sp
    a92c:	29000044 	addi	r4,r5,1
    a930:	003e4206 	br	a23c <__alt_data_end+0xff00a23c>
    a934:	d9401b17 	ldw	r5,108(sp)
    a938:	01000074 	movhi	r4,1
    a93c:	21059c04 	addi	r4,r4,5744
    a940:	d9002415 	stw	r4,144(sp)
    a944:	29400044 	addi	r5,r5,1
    a948:	003c6d06 	br	9b00 <__alt_data_end+0xff009b00>
    a94c:	0039883a 	mov	fp,zero
    a950:	00800084 	movi	r2,2
    a954:	10803fcc 	andi	r2,r2,255
    a958:	01000044 	movi	r4,1
    a95c:	11001e26 	beq	r2,r4,a9d8 <___vfiprintf_internal_r+0x13a0>
    a960:	01000084 	movi	r4,2
    a964:	11001e1e 	bne	r2,r4,a9e0 <___vfiprintf_internal_r+0x13a8>
    a968:	1829883a 	mov	r20,r3
    a96c:	003eea06 	br	a518 <__alt_data_end+0xff00a518>
    a970:	a007883a 	mov	r3,r20
    a974:	00800044 	movi	r2,1
    a978:	003ff606 	br	a954 <__alt_data_end+0xff00a954>
    a97c:	00800184 	movi	r2,6
    a980:	1240012e 	bgeu	r2,r9,a988 <___vfiprintf_internal_r+0x1350>
    a984:	1013883a 	mov	r9,r2
    a988:	4827883a 	mov	r19,r9
    a98c:	4825883a 	mov	r18,r9
    a990:	48001516 	blt	r9,zero,a9e8 <___vfiprintf_internal_r+0x13b0>
    a994:	05400074 	movhi	r21,1
    a998:	d8c02215 	stw	r3,136(sp)
    a99c:	ad453c04 	addi	r21,r21,5360
    a9a0:	003d1406 	br	9df4 <__alt_data_end+0xff009df4>
    a9a4:	02800074 	movhi	r10,1
    a9a8:	52859804 	addi	r10,r10,5728
    a9ac:	da802415 	stw	r10,144(sp)
    a9b0:	200d883a 	mov	r6,r4
    a9b4:	003c9106 	br	9bfc <__alt_data_end+0xff009bfc>
    a9b8:	5021883a 	mov	r16,r10
    a9bc:	0013883a 	mov	r9,zero
    a9c0:	003b7d06 	br	97b8 <__alt_data_end+0xff0097b8>
    a9c4:	4827883a 	mov	r19,r9
    a9c8:	df001d83 	ldbu	fp,118(sp)
    a9cc:	d8c02215 	stw	r3,136(sp)
    a9d0:	0013883a 	mov	r9,zero
    a9d4:	003c1806 	br	9a38 <__alt_data_end+0xff009a38>
    a9d8:	1829883a 	mov	r20,r3
    a9dc:	003d1806 	br	9e40 <__alt_data_end+0xff009e40>
    a9e0:	1829883a 	mov	r20,r3
    a9e4:	003ccd06 	br	9d1c <__alt_data_end+0xff009d1c>
    a9e8:	0025883a 	mov	r18,zero
    a9ec:	003fe906 	br	a994 <__alt_data_end+0xff00a994>
    a9f0:	d8802217 	ldw	r2,136(sp)
    a9f4:	80c00043 	ldbu	r3,1(r16)
    a9f8:	5021883a 	mov	r16,r10
    a9fc:	12400017 	ldw	r9,0(r2)
    aa00:	10800104 	addi	r2,r2,4
    aa04:	d8802215 	stw	r2,136(sp)
    aa08:	483faf0e 	bge	r9,zero,a8c8 <__alt_data_end+0xff00a8c8>
    aa0c:	18c03fcc 	andi	r3,r3,255
    aa10:	18c0201c 	xori	r3,r3,128
    aa14:	027fffc4 	movi	r9,-1
    aa18:	18ffe004 	addi	r3,r3,-128
    aa1c:	003b6506 	br	97b4 <__alt_data_end+0xff0097b4>
    aa20:	d9c01d85 	stb	r7,118(sp)
    aa24:	003ca006 	br	9ca8 <__alt_data_end+0xff009ca8>
    aa28:	d9c01d85 	stb	r7,118(sp)
    aa2c:	003cad06 	br	9ce4 <__alt_data_end+0xff009ce4>
    aa30:	d9c01d85 	stb	r7,118(sp)
    aa34:	003d7d06 	br	a02c <__alt_data_end+0xff00a02c>
    aa38:	d9c01d85 	stb	r7,118(sp)
    aa3c:	003d5f06 	br	9fbc <__alt_data_end+0xff009fbc>
    aa40:	a080004c 	andi	r2,r20,1
    aa44:	0039883a 	mov	fp,zero
    aa48:	10000526 	beq	r2,zero,aa60 <___vfiprintf_internal_r+0x1428>
    aa4c:	00800c04 	movi	r2,48
    aa50:	d88019c5 	stb	r2,103(sp)
    aa54:	dcc02717 	ldw	r19,156(sp)
    aa58:	dd4019c4 	addi	r21,sp,103
    aa5c:	003bf606 	br	9a38 <__alt_data_end+0xff009a38>
    aa60:	0027883a 	mov	r19,zero
    aa64:	dd401a04 	addi	r21,sp,104
    aa68:	003bf306 	br	9a38 <__alt_data_end+0xff009a38>
    aa6c:	d9c01d85 	stb	r7,118(sp)
    aa70:	003dc806 	br	a194 <__alt_data_end+0xff00a194>
    aa74:	d9c01d85 	stb	r7,118(sp)
    aa78:	003d3a06 	br	9f64 <__alt_data_end+0xff009f64>
    aa7c:	d9c01d85 	stb	r7,118(sp)
    aa80:	003d2a06 	br	9f2c <__alt_data_end+0xff009f2c>
    aa84:	d9c01d85 	stb	r7,118(sp)
    aa88:	003cde06 	br	9e04 <__alt_data_end+0xff009e04>
    aa8c:	d9c01d85 	stb	r7,118(sp)
    aa90:	003cbc06 	br	9d84 <__alt_data_end+0xff009d84>

0000aa94 <__vfiprintf_internal>:
    aa94:	00800074 	movhi	r2,1
    aa98:	108cd904 	addi	r2,r2,13156
    aa9c:	300f883a 	mov	r7,r6
    aaa0:	280d883a 	mov	r6,r5
    aaa4:	200b883a 	mov	r5,r4
    aaa8:	11000017 	ldw	r4,0(r2)
    aaac:	00096381 	jmpi	9638 <___vfiprintf_internal_r>

0000aab0 <__sbprintf>:
    aab0:	2880030b 	ldhu	r2,12(r5)
    aab4:	2ac01917 	ldw	r11,100(r5)
    aab8:	2a80038b 	ldhu	r10,14(r5)
    aabc:	2a400717 	ldw	r9,28(r5)
    aac0:	2a000917 	ldw	r8,36(r5)
    aac4:	defee204 	addi	sp,sp,-1144
    aac8:	00c10004 	movi	r3,1024
    aacc:	dc011a15 	stw	r16,1128(sp)
    aad0:	10bfff4c 	andi	r2,r2,65533
    aad4:	2821883a 	mov	r16,r5
    aad8:	d8cb883a 	add	r5,sp,r3
    aadc:	dc811c15 	stw	r18,1136(sp)
    aae0:	dc411b15 	stw	r17,1132(sp)
    aae4:	dfc11d15 	stw	ra,1140(sp)
    aae8:	2025883a 	mov	r18,r4
    aaec:	d881030d 	sth	r2,1036(sp)
    aaf0:	dac11915 	stw	r11,1124(sp)
    aaf4:	da81038d 	sth	r10,1038(sp)
    aaf8:	da410715 	stw	r9,1052(sp)
    aafc:	da010915 	stw	r8,1060(sp)
    ab00:	dec10015 	stw	sp,1024(sp)
    ab04:	dec10415 	stw	sp,1040(sp)
    ab08:	d8c10215 	stw	r3,1032(sp)
    ab0c:	d8c10515 	stw	r3,1044(sp)
    ab10:	d8010615 	stw	zero,1048(sp)
    ab14:	00096380 	call	9638 <___vfiprintf_internal_r>
    ab18:	1023883a 	mov	r17,r2
    ab1c:	10000416 	blt	r2,zero,ab30 <__sbprintf+0x80>
    ab20:	d9410004 	addi	r5,sp,1024
    ab24:	9009883a 	mov	r4,r18
    ab28:	000674c0 	call	674c <_fflush_r>
    ab2c:	10000d1e 	bne	r2,zero,ab64 <__sbprintf+0xb4>
    ab30:	d881030b 	ldhu	r2,1036(sp)
    ab34:	1080100c 	andi	r2,r2,64
    ab38:	10000326 	beq	r2,zero,ab48 <__sbprintf+0x98>
    ab3c:	8080030b 	ldhu	r2,12(r16)
    ab40:	10801014 	ori	r2,r2,64
    ab44:	8080030d 	sth	r2,12(r16)
    ab48:	8805883a 	mov	r2,r17
    ab4c:	dfc11d17 	ldw	ra,1140(sp)
    ab50:	dc811c17 	ldw	r18,1136(sp)
    ab54:	dc411b17 	ldw	r17,1132(sp)
    ab58:	dc011a17 	ldw	r16,1128(sp)
    ab5c:	dec11e04 	addi	sp,sp,1144
    ab60:	f800283a 	ret
    ab64:	047fffc4 	movi	r17,-1
    ab68:	003ff106 	br	ab30 <__alt_data_end+0xff00ab30>

0000ab6c <_write_r>:
    ab6c:	defffd04 	addi	sp,sp,-12
    ab70:	2805883a 	mov	r2,r5
    ab74:	dc000015 	stw	r16,0(sp)
    ab78:	04000074 	movhi	r16,1
    ab7c:	dc400115 	stw	r17,4(sp)
    ab80:	300b883a 	mov	r5,r6
    ab84:	8413f604 	addi	r16,r16,20440
    ab88:	2023883a 	mov	r17,r4
    ab8c:	380d883a 	mov	r6,r7
    ab90:	1009883a 	mov	r4,r2
    ab94:	dfc00215 	stw	ra,8(sp)
    ab98:	80000015 	stw	zero,0(r16)
    ab9c:	000ee340 	call	ee34 <write>
    aba0:	00ffffc4 	movi	r3,-1
    aba4:	10c00526 	beq	r2,r3,abbc <_write_r+0x50>
    aba8:	dfc00217 	ldw	ra,8(sp)
    abac:	dc400117 	ldw	r17,4(sp)
    abb0:	dc000017 	ldw	r16,0(sp)
    abb4:	dec00304 	addi	sp,sp,12
    abb8:	f800283a 	ret
    abbc:	80c00017 	ldw	r3,0(r16)
    abc0:	183ff926 	beq	r3,zero,aba8 <__alt_data_end+0xff00aba8>
    abc4:	88c00015 	stw	r3,0(r17)
    abc8:	003ff706 	br	aba8 <__alt_data_end+0xff00aba8>

0000abcc <_close_r>:
    abcc:	defffd04 	addi	sp,sp,-12
    abd0:	dc000015 	stw	r16,0(sp)
    abd4:	04000074 	movhi	r16,1
    abd8:	dc400115 	stw	r17,4(sp)
    abdc:	8413f604 	addi	r16,r16,20440
    abe0:	2023883a 	mov	r17,r4
    abe4:	2809883a 	mov	r4,r5
    abe8:	dfc00215 	stw	ra,8(sp)
    abec:	80000015 	stw	zero,0(r16)
    abf0:	000e5f40 	call	e5f4 <close>
    abf4:	00ffffc4 	movi	r3,-1
    abf8:	10c00526 	beq	r2,r3,ac10 <_close_r+0x44>
    abfc:	dfc00217 	ldw	ra,8(sp)
    ac00:	dc400117 	ldw	r17,4(sp)
    ac04:	dc000017 	ldw	r16,0(sp)
    ac08:	dec00304 	addi	sp,sp,12
    ac0c:	f800283a 	ret
    ac10:	80c00017 	ldw	r3,0(r16)
    ac14:	183ff926 	beq	r3,zero,abfc <__alt_data_end+0xff00abfc>
    ac18:	88c00015 	stw	r3,0(r17)
    ac1c:	003ff706 	br	abfc <__alt_data_end+0xff00abfc>

0000ac20 <_calloc_r>:
    ac20:	298b383a 	mul	r5,r5,r6
    ac24:	defffe04 	addi	sp,sp,-8
    ac28:	dfc00115 	stw	ra,4(sp)
    ac2c:	dc000015 	stw	r16,0(sp)
    ac30:	0001e4c0 	call	1e4c <_malloc_r>
    ac34:	10002926 	beq	r2,zero,acdc <_calloc_r+0xbc>
    ac38:	11bfff17 	ldw	r6,-4(r2)
    ac3c:	1021883a 	mov	r16,r2
    ac40:	00bfff04 	movi	r2,-4
    ac44:	308c703a 	and	r6,r6,r2
    ac48:	00c00904 	movi	r3,36
    ac4c:	308d883a 	add	r6,r6,r2
    ac50:	19801636 	bltu	r3,r6,acac <_calloc_r+0x8c>
    ac54:	008004c4 	movi	r2,19
    ac58:	11800b2e 	bgeu	r2,r6,ac88 <_calloc_r+0x68>
    ac5c:	80000015 	stw	zero,0(r16)
    ac60:	80000115 	stw	zero,4(r16)
    ac64:	008006c4 	movi	r2,27
    ac68:	11801a2e 	bgeu	r2,r6,acd4 <_calloc_r+0xb4>
    ac6c:	80000215 	stw	zero,8(r16)
    ac70:	80000315 	stw	zero,12(r16)
    ac74:	30c0151e 	bne	r6,r3,accc <_calloc_r+0xac>
    ac78:	80000415 	stw	zero,16(r16)
    ac7c:	80800604 	addi	r2,r16,24
    ac80:	80000515 	stw	zero,20(r16)
    ac84:	00000106 	br	ac8c <_calloc_r+0x6c>
    ac88:	8005883a 	mov	r2,r16
    ac8c:	10000015 	stw	zero,0(r2)
    ac90:	10000115 	stw	zero,4(r2)
    ac94:	10000215 	stw	zero,8(r2)
    ac98:	8005883a 	mov	r2,r16
    ac9c:	dfc00117 	ldw	ra,4(sp)
    aca0:	dc000017 	ldw	r16,0(sp)
    aca4:	dec00204 	addi	sp,sp,8
    aca8:	f800283a 	ret
    acac:	000b883a 	mov	r5,zero
    acb0:	8009883a 	mov	r4,r16
    acb4:	0007c100 	call	7c10 <memset>
    acb8:	8005883a 	mov	r2,r16
    acbc:	dfc00117 	ldw	ra,4(sp)
    acc0:	dc000017 	ldw	r16,0(sp)
    acc4:	dec00204 	addi	sp,sp,8
    acc8:	f800283a 	ret
    accc:	80800404 	addi	r2,r16,16
    acd0:	003fee06 	br	ac8c <__alt_data_end+0xff00ac8c>
    acd4:	80800204 	addi	r2,r16,8
    acd8:	003fec06 	br	ac8c <__alt_data_end+0xff00ac8c>
    acdc:	0005883a 	mov	r2,zero
    ace0:	003fee06 	br	ac9c <__alt_data_end+0xff00ac9c>

0000ace4 <_fclose_r>:
    ace4:	28003926 	beq	r5,zero,adcc <_fclose_r+0xe8>
    ace8:	defffc04 	addi	sp,sp,-16
    acec:	dc400115 	stw	r17,4(sp)
    acf0:	dc000015 	stw	r16,0(sp)
    acf4:	dfc00315 	stw	ra,12(sp)
    acf8:	dc800215 	stw	r18,8(sp)
    acfc:	2023883a 	mov	r17,r4
    ad00:	2821883a 	mov	r16,r5
    ad04:	20000226 	beq	r4,zero,ad10 <_fclose_r+0x2c>
    ad08:	20800e17 	ldw	r2,56(r4)
    ad0c:	10002726 	beq	r2,zero,adac <_fclose_r+0xc8>
    ad10:	8080030f 	ldh	r2,12(r16)
    ad14:	1000071e 	bne	r2,zero,ad34 <_fclose_r+0x50>
    ad18:	0005883a 	mov	r2,zero
    ad1c:	dfc00317 	ldw	ra,12(sp)
    ad20:	dc800217 	ldw	r18,8(sp)
    ad24:	dc400117 	ldw	r17,4(sp)
    ad28:	dc000017 	ldw	r16,0(sp)
    ad2c:	dec00404 	addi	sp,sp,16
    ad30:	f800283a 	ret
    ad34:	800b883a 	mov	r5,r16
    ad38:	8809883a 	mov	r4,r17
    ad3c:	00065300 	call	6530 <__sflush_r>
    ad40:	1025883a 	mov	r18,r2
    ad44:	80800b17 	ldw	r2,44(r16)
    ad48:	10000426 	beq	r2,zero,ad5c <_fclose_r+0x78>
    ad4c:	81400717 	ldw	r5,28(r16)
    ad50:	8809883a 	mov	r4,r17
    ad54:	103ee83a 	callr	r2
    ad58:	10001616 	blt	r2,zero,adb4 <_fclose_r+0xd0>
    ad5c:	8080030b 	ldhu	r2,12(r16)
    ad60:	1080200c 	andi	r2,r2,128
    ad64:	1000151e 	bne	r2,zero,adbc <_fclose_r+0xd8>
    ad68:	81400c17 	ldw	r5,48(r16)
    ad6c:	28000526 	beq	r5,zero,ad84 <_fclose_r+0xa0>
    ad70:	80801004 	addi	r2,r16,64
    ad74:	28800226 	beq	r5,r2,ad80 <_fclose_r+0x9c>
    ad78:	8809883a 	mov	r4,r17
    ad7c:	0006c9c0 	call	6c9c <_free_r>
    ad80:	80000c15 	stw	zero,48(r16)
    ad84:	81401117 	ldw	r5,68(r16)
    ad88:	28000326 	beq	r5,zero,ad98 <_fclose_r+0xb4>
    ad8c:	8809883a 	mov	r4,r17
    ad90:	0006c9c0 	call	6c9c <_free_r>
    ad94:	80001115 	stw	zero,68(r16)
    ad98:	0006b380 	call	6b38 <__sfp_lock_acquire>
    ad9c:	8000030d 	sth	zero,12(r16)
    ada0:	0006b3c0 	call	6b3c <__sfp_lock_release>
    ada4:	9005883a 	mov	r2,r18
    ada8:	003fdc06 	br	ad1c <__alt_data_end+0xff00ad1c>
    adac:	0006b280 	call	6b28 <__sinit>
    adb0:	003fd706 	br	ad10 <__alt_data_end+0xff00ad10>
    adb4:	04bfffc4 	movi	r18,-1
    adb8:	003fe806 	br	ad5c <__alt_data_end+0xff00ad5c>
    adbc:	81400417 	ldw	r5,16(r16)
    adc0:	8809883a 	mov	r4,r17
    adc4:	0006c9c0 	call	6c9c <_free_r>
    adc8:	003fe706 	br	ad68 <__alt_data_end+0xff00ad68>
    adcc:	0005883a 	mov	r2,zero
    add0:	f800283a 	ret

0000add4 <fclose>:
    add4:	00800074 	movhi	r2,1
    add8:	108cd904 	addi	r2,r2,13156
    addc:	200b883a 	mov	r5,r4
    ade0:	11000017 	ldw	r4,0(r2)
    ade4:	000ace41 	jmpi	ace4 <_fclose_r>

0000ade8 <__fputwc>:
    ade8:	defff804 	addi	sp,sp,-32
    adec:	dcc00415 	stw	r19,16(sp)
    adf0:	dc800315 	stw	r18,12(sp)
    adf4:	dc000115 	stw	r16,4(sp)
    adf8:	dfc00715 	stw	ra,28(sp)
    adfc:	dd400615 	stw	r21,24(sp)
    ae00:	dd000515 	stw	r20,20(sp)
    ae04:	dc400215 	stw	r17,8(sp)
    ae08:	2027883a 	mov	r19,r4
    ae0c:	2825883a 	mov	r18,r5
    ae10:	3021883a 	mov	r16,r6
    ae14:	00076780 	call	7678 <__locale_mb_cur_max>
    ae18:	00c00044 	movi	r3,1
    ae1c:	10c03e26 	beq	r2,r3,af18 <__fputwc+0x130>
    ae20:	81c01704 	addi	r7,r16,92
    ae24:	900d883a 	mov	r6,r18
    ae28:	d80b883a 	mov	r5,sp
    ae2c:	9809883a 	mov	r4,r19
    ae30:	000b2b80 	call	b2b8 <_wcrtomb_r>
    ae34:	1029883a 	mov	r20,r2
    ae38:	00bfffc4 	movi	r2,-1
    ae3c:	a0802026 	beq	r20,r2,aec0 <__fputwc+0xd8>
    ae40:	d9400003 	ldbu	r5,0(sp)
    ae44:	a0001c26 	beq	r20,zero,aeb8 <__fputwc+0xd0>
    ae48:	0023883a 	mov	r17,zero
    ae4c:	05400284 	movi	r21,10
    ae50:	00000906 	br	ae78 <__fputwc+0x90>
    ae54:	80800017 	ldw	r2,0(r16)
    ae58:	11400005 	stb	r5,0(r2)
    ae5c:	80c00017 	ldw	r3,0(r16)
    ae60:	18c00044 	addi	r3,r3,1
    ae64:	80c00015 	stw	r3,0(r16)
    ae68:	8c400044 	addi	r17,r17,1
    ae6c:	dc45883a 	add	r2,sp,r17
    ae70:	8d00112e 	bgeu	r17,r20,aeb8 <__fputwc+0xd0>
    ae74:	11400003 	ldbu	r5,0(r2)
    ae78:	80c00217 	ldw	r3,8(r16)
    ae7c:	18ffffc4 	addi	r3,r3,-1
    ae80:	80c00215 	stw	r3,8(r16)
    ae84:	183ff30e 	bge	r3,zero,ae54 <__alt_data_end+0xff00ae54>
    ae88:	80800617 	ldw	r2,24(r16)
    ae8c:	18801916 	blt	r3,r2,aef4 <__fputwc+0x10c>
    ae90:	80800017 	ldw	r2,0(r16)
    ae94:	11400005 	stb	r5,0(r2)
    ae98:	80800017 	ldw	r2,0(r16)
    ae9c:	10c00003 	ldbu	r3,0(r2)
    aea0:	10800044 	addi	r2,r2,1
    aea4:	1d402326 	beq	r3,r21,af34 <__fputwc+0x14c>
    aea8:	80800015 	stw	r2,0(r16)
    aeac:	8c400044 	addi	r17,r17,1
    aeb0:	dc45883a 	add	r2,sp,r17
    aeb4:	8d3fef36 	bltu	r17,r20,ae74 <__alt_data_end+0xff00ae74>
    aeb8:	9005883a 	mov	r2,r18
    aebc:	00000406 	br	aed0 <__fputwc+0xe8>
    aec0:	80c0030b 	ldhu	r3,12(r16)
    aec4:	a005883a 	mov	r2,r20
    aec8:	18c01014 	ori	r3,r3,64
    aecc:	80c0030d 	sth	r3,12(r16)
    aed0:	dfc00717 	ldw	ra,28(sp)
    aed4:	dd400617 	ldw	r21,24(sp)
    aed8:	dd000517 	ldw	r20,20(sp)
    aedc:	dcc00417 	ldw	r19,16(sp)
    aee0:	dc800317 	ldw	r18,12(sp)
    aee4:	dc400217 	ldw	r17,8(sp)
    aee8:	dc000117 	ldw	r16,4(sp)
    aeec:	dec00804 	addi	sp,sp,32
    aef0:	f800283a 	ret
    aef4:	800d883a 	mov	r6,r16
    aef8:	29403fcc 	andi	r5,r5,255
    aefc:	9809883a 	mov	r4,r19
    af00:	000b1600 	call	b160 <__swbuf_r>
    af04:	10bfffe0 	cmpeqi	r2,r2,-1
    af08:	10803fcc 	andi	r2,r2,255
    af0c:	103fd626 	beq	r2,zero,ae68 <__alt_data_end+0xff00ae68>
    af10:	00bfffc4 	movi	r2,-1
    af14:	003fee06 	br	aed0 <__alt_data_end+0xff00aed0>
    af18:	90ffffc4 	addi	r3,r18,-1
    af1c:	01003f84 	movi	r4,254
    af20:	20ffbf36 	bltu	r4,r3,ae20 <__alt_data_end+0xff00ae20>
    af24:	900b883a 	mov	r5,r18
    af28:	dc800005 	stb	r18,0(sp)
    af2c:	1029883a 	mov	r20,r2
    af30:	003fc506 	br	ae48 <__alt_data_end+0xff00ae48>
    af34:	800d883a 	mov	r6,r16
    af38:	a80b883a 	mov	r5,r21
    af3c:	9809883a 	mov	r4,r19
    af40:	000b1600 	call	b160 <__swbuf_r>
    af44:	10bfffe0 	cmpeqi	r2,r2,-1
    af48:	003fef06 	br	af08 <__alt_data_end+0xff00af08>

0000af4c <_fputwc_r>:
    af4c:	3080030b 	ldhu	r2,12(r6)
    af50:	10c8000c 	andi	r3,r2,8192
    af54:	1800051e 	bne	r3,zero,af6c <_fputwc_r+0x20>
    af58:	30c01917 	ldw	r3,100(r6)
    af5c:	10880014 	ori	r2,r2,8192
    af60:	3080030d 	sth	r2,12(r6)
    af64:	18880014 	ori	r2,r3,8192
    af68:	30801915 	stw	r2,100(r6)
    af6c:	000ade81 	jmpi	ade8 <__fputwc>

0000af70 <fputwc>:
    af70:	00800074 	movhi	r2,1
    af74:	defffc04 	addi	sp,sp,-16
    af78:	108cd904 	addi	r2,r2,13156
    af7c:	dc000115 	stw	r16,4(sp)
    af80:	14000017 	ldw	r16,0(r2)
    af84:	dc400215 	stw	r17,8(sp)
    af88:	dfc00315 	stw	ra,12(sp)
    af8c:	2023883a 	mov	r17,r4
    af90:	80000226 	beq	r16,zero,af9c <fputwc+0x2c>
    af94:	80800e17 	ldw	r2,56(r16)
    af98:	10001026 	beq	r2,zero,afdc <fputwc+0x6c>
    af9c:	2880030b 	ldhu	r2,12(r5)
    afa0:	10c8000c 	andi	r3,r2,8192
    afa4:	1800051e 	bne	r3,zero,afbc <fputwc+0x4c>
    afa8:	28c01917 	ldw	r3,100(r5)
    afac:	10880014 	ori	r2,r2,8192
    afb0:	2880030d 	sth	r2,12(r5)
    afb4:	18880014 	ori	r2,r3,8192
    afb8:	28801915 	stw	r2,100(r5)
    afbc:	280d883a 	mov	r6,r5
    afc0:	8009883a 	mov	r4,r16
    afc4:	880b883a 	mov	r5,r17
    afc8:	dfc00317 	ldw	ra,12(sp)
    afcc:	dc400217 	ldw	r17,8(sp)
    afd0:	dc000117 	ldw	r16,4(sp)
    afd4:	dec00404 	addi	sp,sp,16
    afd8:	000ade81 	jmpi	ade8 <__fputwc>
    afdc:	8009883a 	mov	r4,r16
    afe0:	d9400015 	stw	r5,0(sp)
    afe4:	0006b280 	call	6b28 <__sinit>
    afe8:	d9400017 	ldw	r5,0(sp)
    afec:	003feb06 	br	af9c <__alt_data_end+0xff00af9c>

0000aff0 <_fstat_r>:
    aff0:	defffd04 	addi	sp,sp,-12
    aff4:	2805883a 	mov	r2,r5
    aff8:	dc000015 	stw	r16,0(sp)
    affc:	04000074 	movhi	r16,1
    b000:	dc400115 	stw	r17,4(sp)
    b004:	8413f604 	addi	r16,r16,20440
    b008:	2023883a 	mov	r17,r4
    b00c:	300b883a 	mov	r5,r6
    b010:	1009883a 	mov	r4,r2
    b014:	dfc00215 	stw	ra,8(sp)
    b018:	80000015 	stw	zero,0(r16)
    b01c:	000e72c0 	call	e72c <fstat>
    b020:	00ffffc4 	movi	r3,-1
    b024:	10c00526 	beq	r2,r3,b03c <_fstat_r+0x4c>
    b028:	dfc00217 	ldw	ra,8(sp)
    b02c:	dc400117 	ldw	r17,4(sp)
    b030:	dc000017 	ldw	r16,0(sp)
    b034:	dec00304 	addi	sp,sp,12
    b038:	f800283a 	ret
    b03c:	80c00017 	ldw	r3,0(r16)
    b040:	183ff926 	beq	r3,zero,b028 <__alt_data_end+0xff00b028>
    b044:	88c00015 	stw	r3,0(r17)
    b048:	003ff706 	br	b028 <__alt_data_end+0xff00b028>

0000b04c <_isatty_r>:
    b04c:	defffd04 	addi	sp,sp,-12
    b050:	dc000015 	stw	r16,0(sp)
    b054:	04000074 	movhi	r16,1
    b058:	dc400115 	stw	r17,4(sp)
    b05c:	8413f604 	addi	r16,r16,20440
    b060:	2023883a 	mov	r17,r4
    b064:	2809883a 	mov	r4,r5
    b068:	dfc00215 	stw	ra,8(sp)
    b06c:	80000015 	stw	zero,0(r16)
    b070:	000e8180 	call	e818 <isatty>
    b074:	00ffffc4 	movi	r3,-1
    b078:	10c00526 	beq	r2,r3,b090 <_isatty_r+0x44>
    b07c:	dfc00217 	ldw	ra,8(sp)
    b080:	dc400117 	ldw	r17,4(sp)
    b084:	dc000017 	ldw	r16,0(sp)
    b088:	dec00304 	addi	sp,sp,12
    b08c:	f800283a 	ret
    b090:	80c00017 	ldw	r3,0(r16)
    b094:	183ff926 	beq	r3,zero,b07c <__alt_data_end+0xff00b07c>
    b098:	88c00015 	stw	r3,0(r17)
    b09c:	003ff706 	br	b07c <__alt_data_end+0xff00b07c>

0000b0a0 <_lseek_r>:
    b0a0:	defffd04 	addi	sp,sp,-12
    b0a4:	2805883a 	mov	r2,r5
    b0a8:	dc000015 	stw	r16,0(sp)
    b0ac:	04000074 	movhi	r16,1
    b0b0:	dc400115 	stw	r17,4(sp)
    b0b4:	300b883a 	mov	r5,r6
    b0b8:	8413f604 	addi	r16,r16,20440
    b0bc:	2023883a 	mov	r17,r4
    b0c0:	380d883a 	mov	r6,r7
    b0c4:	1009883a 	mov	r4,r2
    b0c8:	dfc00215 	stw	ra,8(sp)
    b0cc:	80000015 	stw	zero,0(r16)
    b0d0:	000e9e40 	call	e9e4 <lseek>
    b0d4:	00ffffc4 	movi	r3,-1
    b0d8:	10c00526 	beq	r2,r3,b0f0 <_lseek_r+0x50>
    b0dc:	dfc00217 	ldw	ra,8(sp)
    b0e0:	dc400117 	ldw	r17,4(sp)
    b0e4:	dc000017 	ldw	r16,0(sp)
    b0e8:	dec00304 	addi	sp,sp,12
    b0ec:	f800283a 	ret
    b0f0:	80c00017 	ldw	r3,0(r16)
    b0f4:	183ff926 	beq	r3,zero,b0dc <__alt_data_end+0xff00b0dc>
    b0f8:	88c00015 	stw	r3,0(r17)
    b0fc:	003ff706 	br	b0dc <__alt_data_end+0xff00b0dc>

0000b100 <_read_r>:
    b100:	defffd04 	addi	sp,sp,-12
    b104:	2805883a 	mov	r2,r5
    b108:	dc000015 	stw	r16,0(sp)
    b10c:	04000074 	movhi	r16,1
    b110:	dc400115 	stw	r17,4(sp)
    b114:	300b883a 	mov	r5,r6
    b118:	8413f604 	addi	r16,r16,20440
    b11c:	2023883a 	mov	r17,r4
    b120:	380d883a 	mov	r6,r7
    b124:	1009883a 	mov	r4,r2
    b128:	dfc00215 	stw	ra,8(sp)
    b12c:	80000015 	stw	zero,0(r16)
    b130:	000ebb80 	call	ebb8 <read>
    b134:	00ffffc4 	movi	r3,-1
    b138:	10c00526 	beq	r2,r3,b150 <_read_r+0x50>
    b13c:	dfc00217 	ldw	ra,8(sp)
    b140:	dc400117 	ldw	r17,4(sp)
    b144:	dc000017 	ldw	r16,0(sp)
    b148:	dec00304 	addi	sp,sp,12
    b14c:	f800283a 	ret
    b150:	80c00017 	ldw	r3,0(r16)
    b154:	183ff926 	beq	r3,zero,b13c <__alt_data_end+0xff00b13c>
    b158:	88c00015 	stw	r3,0(r17)
    b15c:	003ff706 	br	b13c <__alt_data_end+0xff00b13c>

0000b160 <__swbuf_r>:
    b160:	defffb04 	addi	sp,sp,-20
    b164:	dcc00315 	stw	r19,12(sp)
    b168:	dc800215 	stw	r18,8(sp)
    b16c:	dc000015 	stw	r16,0(sp)
    b170:	dfc00415 	stw	ra,16(sp)
    b174:	dc400115 	stw	r17,4(sp)
    b178:	2025883a 	mov	r18,r4
    b17c:	2827883a 	mov	r19,r5
    b180:	3021883a 	mov	r16,r6
    b184:	20000226 	beq	r4,zero,b190 <__swbuf_r+0x30>
    b188:	20800e17 	ldw	r2,56(r4)
    b18c:	10004226 	beq	r2,zero,b298 <__swbuf_r+0x138>
    b190:	80800617 	ldw	r2,24(r16)
    b194:	8100030b 	ldhu	r4,12(r16)
    b198:	80800215 	stw	r2,8(r16)
    b19c:	2080020c 	andi	r2,r4,8
    b1a0:	10003626 	beq	r2,zero,b27c <__swbuf_r+0x11c>
    b1a4:	80c00417 	ldw	r3,16(r16)
    b1a8:	18003426 	beq	r3,zero,b27c <__swbuf_r+0x11c>
    b1ac:	2088000c 	andi	r2,r4,8192
    b1b0:	9c403fcc 	andi	r17,r19,255
    b1b4:	10001a26 	beq	r2,zero,b220 <__swbuf_r+0xc0>
    b1b8:	80800017 	ldw	r2,0(r16)
    b1bc:	81000517 	ldw	r4,20(r16)
    b1c0:	10c7c83a 	sub	r3,r2,r3
    b1c4:	1900200e 	bge	r3,r4,b248 <__swbuf_r+0xe8>
    b1c8:	18c00044 	addi	r3,r3,1
    b1cc:	81000217 	ldw	r4,8(r16)
    b1d0:	11400044 	addi	r5,r2,1
    b1d4:	81400015 	stw	r5,0(r16)
    b1d8:	213fffc4 	addi	r4,r4,-1
    b1dc:	81000215 	stw	r4,8(r16)
    b1e0:	14c00005 	stb	r19,0(r2)
    b1e4:	80800517 	ldw	r2,20(r16)
    b1e8:	10c01e26 	beq	r2,r3,b264 <__swbuf_r+0x104>
    b1ec:	8080030b 	ldhu	r2,12(r16)
    b1f0:	1080004c 	andi	r2,r2,1
    b1f4:	10000226 	beq	r2,zero,b200 <__swbuf_r+0xa0>
    b1f8:	00800284 	movi	r2,10
    b1fc:	88801926 	beq	r17,r2,b264 <__swbuf_r+0x104>
    b200:	8805883a 	mov	r2,r17
    b204:	dfc00417 	ldw	ra,16(sp)
    b208:	dcc00317 	ldw	r19,12(sp)
    b20c:	dc800217 	ldw	r18,8(sp)
    b210:	dc400117 	ldw	r17,4(sp)
    b214:	dc000017 	ldw	r16,0(sp)
    b218:	dec00504 	addi	sp,sp,20
    b21c:	f800283a 	ret
    b220:	81401917 	ldw	r5,100(r16)
    b224:	00b7ffc4 	movi	r2,-8193
    b228:	21080014 	ori	r4,r4,8192
    b22c:	2884703a 	and	r2,r5,r2
    b230:	80801915 	stw	r2,100(r16)
    b234:	80800017 	ldw	r2,0(r16)
    b238:	8100030d 	sth	r4,12(r16)
    b23c:	81000517 	ldw	r4,20(r16)
    b240:	10c7c83a 	sub	r3,r2,r3
    b244:	193fe016 	blt	r3,r4,b1c8 <__alt_data_end+0xff00b1c8>
    b248:	800b883a 	mov	r5,r16
    b24c:	9009883a 	mov	r4,r18
    b250:	000674c0 	call	674c <_fflush_r>
    b254:	1000071e 	bne	r2,zero,b274 <__swbuf_r+0x114>
    b258:	80800017 	ldw	r2,0(r16)
    b25c:	00c00044 	movi	r3,1
    b260:	003fda06 	br	b1cc <__alt_data_end+0xff00b1cc>
    b264:	800b883a 	mov	r5,r16
    b268:	9009883a 	mov	r4,r18
    b26c:	000674c0 	call	674c <_fflush_r>
    b270:	103fe326 	beq	r2,zero,b200 <__alt_data_end+0xff00b200>
    b274:	00bfffc4 	movi	r2,-1
    b278:	003fe206 	br	b204 <__alt_data_end+0xff00b204>
    b27c:	800b883a 	mov	r5,r16
    b280:	9009883a 	mov	r4,r18
    b284:	0004b540 	call	4b54 <__swsetup_r>
    b288:	103ffa1e 	bne	r2,zero,b274 <__alt_data_end+0xff00b274>
    b28c:	8100030b 	ldhu	r4,12(r16)
    b290:	80c00417 	ldw	r3,16(r16)
    b294:	003fc506 	br	b1ac <__alt_data_end+0xff00b1ac>
    b298:	0006b280 	call	6b28 <__sinit>
    b29c:	003fbc06 	br	b190 <__alt_data_end+0xff00b190>

0000b2a0 <__swbuf>:
    b2a0:	00800074 	movhi	r2,1
    b2a4:	108cd904 	addi	r2,r2,13156
    b2a8:	280d883a 	mov	r6,r5
    b2ac:	200b883a 	mov	r5,r4
    b2b0:	11000017 	ldw	r4,0(r2)
    b2b4:	000b1601 	jmpi	b160 <__swbuf_r>

0000b2b8 <_wcrtomb_r>:
    b2b8:	defff604 	addi	sp,sp,-40
    b2bc:	00800074 	movhi	r2,1
    b2c0:	dc800815 	stw	r18,32(sp)
    b2c4:	dc400715 	stw	r17,28(sp)
    b2c8:	dc000615 	stw	r16,24(sp)
    b2cc:	108cdb04 	addi	r2,r2,13164
    b2d0:	dfc00915 	stw	ra,36(sp)
    b2d4:	2021883a 	mov	r16,r4
    b2d8:	3823883a 	mov	r17,r7
    b2dc:	14800017 	ldw	r18,0(r2)
    b2e0:	28001426 	beq	r5,zero,b334 <_wcrtomb_r+0x7c>
    b2e4:	d9400415 	stw	r5,16(sp)
    b2e8:	d9800515 	stw	r6,20(sp)
    b2ec:	000766c0 	call	766c <__locale_charset>
    b2f0:	d9800517 	ldw	r6,20(sp)
    b2f4:	d9400417 	ldw	r5,16(sp)
    b2f8:	100f883a 	mov	r7,r2
    b2fc:	dc400015 	stw	r17,0(sp)
    b300:	8009883a 	mov	r4,r16
    b304:	903ee83a 	callr	r18
    b308:	00ffffc4 	movi	r3,-1
    b30c:	10c0031e 	bne	r2,r3,b31c <_wcrtomb_r+0x64>
    b310:	88000015 	stw	zero,0(r17)
    b314:	00c02284 	movi	r3,138
    b318:	80c00015 	stw	r3,0(r16)
    b31c:	dfc00917 	ldw	ra,36(sp)
    b320:	dc800817 	ldw	r18,32(sp)
    b324:	dc400717 	ldw	r17,28(sp)
    b328:	dc000617 	ldw	r16,24(sp)
    b32c:	dec00a04 	addi	sp,sp,40
    b330:	f800283a 	ret
    b334:	000766c0 	call	766c <__locale_charset>
    b338:	100f883a 	mov	r7,r2
    b33c:	dc400015 	stw	r17,0(sp)
    b340:	000d883a 	mov	r6,zero
    b344:	d9400104 	addi	r5,sp,4
    b348:	8009883a 	mov	r4,r16
    b34c:	903ee83a 	callr	r18
    b350:	003fed06 	br	b308 <__alt_data_end+0xff00b308>

0000b354 <wcrtomb>:
    b354:	defff604 	addi	sp,sp,-40
    b358:	00800074 	movhi	r2,1
    b35c:	dc800615 	stw	r18,24(sp)
    b360:	dc400515 	stw	r17,20(sp)
    b364:	108cd904 	addi	r2,r2,13156
    b368:	dfc00915 	stw	ra,36(sp)
    b36c:	dd000815 	stw	r20,32(sp)
    b370:	dcc00715 	stw	r19,28(sp)
    b374:	dc000415 	stw	r16,16(sp)
    b378:	3025883a 	mov	r18,r6
    b37c:	14400017 	ldw	r17,0(r2)
    b380:	20001926 	beq	r4,zero,b3e8 <wcrtomb+0x94>
    b384:	00800074 	movhi	r2,1
    b388:	108cdb04 	addi	r2,r2,13164
    b38c:	15000017 	ldw	r20,0(r2)
    b390:	2021883a 	mov	r16,r4
    b394:	2827883a 	mov	r19,r5
    b398:	000766c0 	call	766c <__locale_charset>
    b39c:	100f883a 	mov	r7,r2
    b3a0:	dc800015 	stw	r18,0(sp)
    b3a4:	980d883a 	mov	r6,r19
    b3a8:	800b883a 	mov	r5,r16
    b3ac:	8809883a 	mov	r4,r17
    b3b0:	a03ee83a 	callr	r20
    b3b4:	00ffffc4 	movi	r3,-1
    b3b8:	10c0031e 	bne	r2,r3,b3c8 <wcrtomb+0x74>
    b3bc:	90000015 	stw	zero,0(r18)
    b3c0:	00c02284 	movi	r3,138
    b3c4:	88c00015 	stw	r3,0(r17)
    b3c8:	dfc00917 	ldw	ra,36(sp)
    b3cc:	dd000817 	ldw	r20,32(sp)
    b3d0:	dcc00717 	ldw	r19,28(sp)
    b3d4:	dc800617 	ldw	r18,24(sp)
    b3d8:	dc400517 	ldw	r17,20(sp)
    b3dc:	dc000417 	ldw	r16,16(sp)
    b3e0:	dec00a04 	addi	sp,sp,40
    b3e4:	f800283a 	ret
    b3e8:	00800074 	movhi	r2,1
    b3ec:	108cdb04 	addi	r2,r2,13164
    b3f0:	14000017 	ldw	r16,0(r2)
    b3f4:	000766c0 	call	766c <__locale_charset>
    b3f8:	100f883a 	mov	r7,r2
    b3fc:	dc800015 	stw	r18,0(sp)
    b400:	000d883a 	mov	r6,zero
    b404:	d9400104 	addi	r5,sp,4
    b408:	8809883a 	mov	r4,r17
    b40c:	803ee83a 	callr	r16
    b410:	003fe806 	br	b3b4 <__alt_data_end+0xff00b3b4>

0000b414 <__ascii_wctomb>:
    b414:	28000526 	beq	r5,zero,b42c <__ascii_wctomb+0x18>
    b418:	00803fc4 	movi	r2,255
    b41c:	11800536 	bltu	r2,r6,b434 <__ascii_wctomb+0x20>
    b420:	29800005 	stb	r6,0(r5)
    b424:	00800044 	movi	r2,1
    b428:	f800283a 	ret
    b42c:	0005883a 	mov	r2,zero
    b430:	f800283a 	ret
    b434:	00802284 	movi	r2,138
    b438:	20800015 	stw	r2,0(r4)
    b43c:	00bfffc4 	movi	r2,-1
    b440:	f800283a 	ret

0000b444 <_wctomb_r>:
    b444:	00800074 	movhi	r2,1
    b448:	defff904 	addi	sp,sp,-28
    b44c:	108cdb04 	addi	r2,r2,13164
    b450:	dfc00615 	stw	ra,24(sp)
    b454:	dc400515 	stw	r17,20(sp)
    b458:	dc000415 	stw	r16,16(sp)
    b45c:	3823883a 	mov	r17,r7
    b460:	14000017 	ldw	r16,0(r2)
    b464:	d9000115 	stw	r4,4(sp)
    b468:	d9400215 	stw	r5,8(sp)
    b46c:	d9800315 	stw	r6,12(sp)
    b470:	000766c0 	call	766c <__locale_charset>
    b474:	d9800317 	ldw	r6,12(sp)
    b478:	d9400217 	ldw	r5,8(sp)
    b47c:	d9000117 	ldw	r4,4(sp)
    b480:	100f883a 	mov	r7,r2
    b484:	dc400015 	stw	r17,0(sp)
    b488:	803ee83a 	callr	r16
    b48c:	dfc00617 	ldw	ra,24(sp)
    b490:	dc400517 	ldw	r17,20(sp)
    b494:	dc000417 	ldw	r16,16(sp)
    b498:	dec00704 	addi	sp,sp,28
    b49c:	f800283a 	ret

0000b4a0 <__udivdi3>:
    b4a0:	defff504 	addi	sp,sp,-44
    b4a4:	dcc00415 	stw	r19,16(sp)
    b4a8:	dc000115 	stw	r16,4(sp)
    b4ac:	dfc00a15 	stw	ra,40(sp)
    b4b0:	df000915 	stw	fp,36(sp)
    b4b4:	ddc00815 	stw	r23,32(sp)
    b4b8:	dd800715 	stw	r22,28(sp)
    b4bc:	dd400615 	stw	r21,24(sp)
    b4c0:	dd000515 	stw	r20,20(sp)
    b4c4:	dc800315 	stw	r18,12(sp)
    b4c8:	dc400215 	stw	r17,8(sp)
    b4cc:	2027883a 	mov	r19,r4
    b4d0:	2821883a 	mov	r16,r5
    b4d4:	3800411e 	bne	r7,zero,b5dc <__udivdi3+0x13c>
    b4d8:	3023883a 	mov	r17,r6
    b4dc:	2025883a 	mov	r18,r4
    b4e0:	2980522e 	bgeu	r5,r6,b62c <__udivdi3+0x18c>
    b4e4:	00bfffd4 	movui	r2,65535
    b4e8:	282d883a 	mov	r22,r5
    b4ec:	1180a836 	bltu	r2,r6,b790 <__udivdi3+0x2f0>
    b4f0:	00803fc4 	movi	r2,255
    b4f4:	1185803a 	cmpltu	r2,r2,r6
    b4f8:	100490fa 	slli	r2,r2,3
    b4fc:	3086d83a 	srl	r3,r6,r2
    b500:	01000074 	movhi	r4,1
    b504:	2105a004 	addi	r4,r4,5760
    b508:	20c7883a 	add	r3,r4,r3
    b50c:	18c00003 	ldbu	r3,0(r3)
    b510:	1885883a 	add	r2,r3,r2
    b514:	00c00804 	movi	r3,32
    b518:	1887c83a 	sub	r3,r3,r2
    b51c:	18000526 	beq	r3,zero,b534 <__udivdi3+0x94>
    b520:	80e0983a 	sll	r16,r16,r3
    b524:	9884d83a 	srl	r2,r19,r2
    b528:	30e2983a 	sll	r17,r6,r3
    b52c:	98e4983a 	sll	r18,r19,r3
    b530:	142cb03a 	or	r22,r2,r16
    b534:	882ad43a 	srli	r21,r17,16
    b538:	b009883a 	mov	r4,r22
    b53c:	8d3fffcc 	andi	r20,r17,65535
    b540:	a80b883a 	mov	r5,r21
    b544:	0001dcc0 	call	1dcc <__umodsi3>
    b548:	b009883a 	mov	r4,r22
    b54c:	a80b883a 	mov	r5,r21
    b550:	1027883a 	mov	r19,r2
    b554:	0001d680 	call	1d68 <__udivsi3>
    b558:	102d883a 	mov	r22,r2
    b55c:	9826943a 	slli	r19,r19,16
    b560:	9004d43a 	srli	r2,r18,16
    b564:	a5a1383a 	mul	r16,r20,r22
    b568:	14c4b03a 	or	r2,r2,r19
    b56c:	1400052e 	bgeu	r2,r16,b584 <__udivdi3+0xe4>
    b570:	1445883a 	add	r2,r2,r17
    b574:	b0ffffc4 	addi	r3,r22,-1
    b578:	14400136 	bltu	r2,r17,b580 <__udivdi3+0xe0>
    b57c:	14012336 	bltu	r2,r16,ba0c <__udivdi3+0x56c>
    b580:	182d883a 	mov	r22,r3
    b584:	1421c83a 	sub	r16,r2,r16
    b588:	a80b883a 	mov	r5,r21
    b58c:	8009883a 	mov	r4,r16
    b590:	0001dcc0 	call	1dcc <__umodsi3>
    b594:	1027883a 	mov	r19,r2
    b598:	a80b883a 	mov	r5,r21
    b59c:	8009883a 	mov	r4,r16
    b5a0:	0001d680 	call	1d68 <__udivsi3>
    b5a4:	9826943a 	slli	r19,r19,16
    b5a8:	a0a9383a 	mul	r20,r20,r2
    b5ac:	94bfffcc 	andi	r18,r18,65535
    b5b0:	94e4b03a 	or	r18,r18,r19
    b5b4:	9500052e 	bgeu	r18,r20,b5cc <__udivdi3+0x12c>
    b5b8:	8ca5883a 	add	r18,r17,r18
    b5bc:	10ffffc4 	addi	r3,r2,-1
    b5c0:	9440f136 	bltu	r18,r17,b988 <__udivdi3+0x4e8>
    b5c4:	9500f02e 	bgeu	r18,r20,b988 <__udivdi3+0x4e8>
    b5c8:	10bfff84 	addi	r2,r2,-2
    b5cc:	b00c943a 	slli	r6,r22,16
    b5d0:	0007883a 	mov	r3,zero
    b5d4:	3084b03a 	or	r2,r6,r2
    b5d8:	00005906 	br	b740 <__udivdi3+0x2a0>
    b5dc:	29c05636 	bltu	r5,r7,b738 <__udivdi3+0x298>
    b5e0:	00bfffd4 	movui	r2,65535
    b5e4:	11c0622e 	bgeu	r2,r7,b770 <__udivdi3+0x2d0>
    b5e8:	00804034 	movhi	r2,256
    b5ec:	10bfffc4 	addi	r2,r2,-1
    b5f0:	11c0ee36 	bltu	r2,r7,b9ac <__udivdi3+0x50c>
    b5f4:	00800404 	movi	r2,16
    b5f8:	3886d83a 	srl	r3,r7,r2
    b5fc:	01000074 	movhi	r4,1
    b600:	2105a004 	addi	r4,r4,5760
    b604:	20c7883a 	add	r3,r4,r3
    b608:	18c00003 	ldbu	r3,0(r3)
    b60c:	05400804 	movi	r21,32
    b610:	1885883a 	add	r2,r3,r2
    b614:	a8abc83a 	sub	r21,r21,r2
    b618:	a800621e 	bne	r21,zero,b7a4 <__udivdi3+0x304>
    b61c:	3c00e936 	bltu	r7,r16,b9c4 <__udivdi3+0x524>
    b620:	9985403a 	cmpgeu	r2,r19,r6
    b624:	0007883a 	mov	r3,zero
    b628:	00004506 	br	b740 <__udivdi3+0x2a0>
    b62c:	3000041e 	bne	r6,zero,b640 <__udivdi3+0x1a0>
    b630:	000b883a 	mov	r5,zero
    b634:	01000044 	movi	r4,1
    b638:	0001d680 	call	1d68 <__udivsi3>
    b63c:	1023883a 	mov	r17,r2
    b640:	00bfffd4 	movui	r2,65535
    b644:	14404e2e 	bgeu	r2,r17,b780 <__udivdi3+0x2e0>
    b648:	00804034 	movhi	r2,256
    b64c:	10bfffc4 	addi	r2,r2,-1
    b650:	1440d836 	bltu	r2,r17,b9b4 <__udivdi3+0x514>
    b654:	00800404 	movi	r2,16
    b658:	8886d83a 	srl	r3,r17,r2
    b65c:	01000074 	movhi	r4,1
    b660:	2105a004 	addi	r4,r4,5760
    b664:	20c7883a 	add	r3,r4,r3
    b668:	18c00003 	ldbu	r3,0(r3)
    b66c:	1885883a 	add	r2,r3,r2
    b670:	00c00804 	movi	r3,32
    b674:	1887c83a 	sub	r3,r3,r2
    b678:	18008f1e 	bne	r3,zero,b8b8 <__udivdi3+0x418>
    b67c:	882ad43a 	srli	r21,r17,16
    b680:	8461c83a 	sub	r16,r16,r17
    b684:	8d3fffcc 	andi	r20,r17,65535
    b688:	00c00044 	movi	r3,1
    b68c:	8009883a 	mov	r4,r16
    b690:	a80b883a 	mov	r5,r21
    b694:	d8c00015 	stw	r3,0(sp)
    b698:	0001dcc0 	call	1dcc <__umodsi3>
    b69c:	8009883a 	mov	r4,r16
    b6a0:	a80b883a 	mov	r5,r21
    b6a4:	1027883a 	mov	r19,r2
    b6a8:	0001d680 	call	1d68 <__udivsi3>
    b6ac:	9826943a 	slli	r19,r19,16
    b6b0:	9008d43a 	srli	r4,r18,16
    b6b4:	1521383a 	mul	r16,r2,r20
    b6b8:	102d883a 	mov	r22,r2
    b6bc:	24c8b03a 	or	r4,r4,r19
    b6c0:	d8c00017 	ldw	r3,0(sp)
    b6c4:	2400052e 	bgeu	r4,r16,b6dc <__udivdi3+0x23c>
    b6c8:	2449883a 	add	r4,r4,r17
    b6cc:	b0bfffc4 	addi	r2,r22,-1
    b6d0:	24400136 	bltu	r4,r17,b6d8 <__udivdi3+0x238>
    b6d4:	2400ca36 	bltu	r4,r16,ba00 <__udivdi3+0x560>
    b6d8:	102d883a 	mov	r22,r2
    b6dc:	2421c83a 	sub	r16,r4,r16
    b6e0:	a80b883a 	mov	r5,r21
    b6e4:	8009883a 	mov	r4,r16
    b6e8:	d8c00015 	stw	r3,0(sp)
    b6ec:	0001dcc0 	call	1dcc <__umodsi3>
    b6f0:	1027883a 	mov	r19,r2
    b6f4:	a80b883a 	mov	r5,r21
    b6f8:	8009883a 	mov	r4,r16
    b6fc:	0001d680 	call	1d68 <__udivsi3>
    b700:	9826943a 	slli	r19,r19,16
    b704:	1529383a 	mul	r20,r2,r20
    b708:	94bfffcc 	andi	r18,r18,65535
    b70c:	94e4b03a 	or	r18,r18,r19
    b710:	d8c00017 	ldw	r3,0(sp)
    b714:	9500052e 	bgeu	r18,r20,b72c <__udivdi3+0x28c>
    b718:	8ca5883a 	add	r18,r17,r18
    b71c:	113fffc4 	addi	r4,r2,-1
    b720:	94409736 	bltu	r18,r17,b980 <__udivdi3+0x4e0>
    b724:	9500962e 	bgeu	r18,r20,b980 <__udivdi3+0x4e0>
    b728:	10bfff84 	addi	r2,r2,-2
    b72c:	b00c943a 	slli	r6,r22,16
    b730:	3084b03a 	or	r2,r6,r2
    b734:	00000206 	br	b740 <__udivdi3+0x2a0>
    b738:	0007883a 	mov	r3,zero
    b73c:	0005883a 	mov	r2,zero
    b740:	dfc00a17 	ldw	ra,40(sp)
    b744:	df000917 	ldw	fp,36(sp)
    b748:	ddc00817 	ldw	r23,32(sp)
    b74c:	dd800717 	ldw	r22,28(sp)
    b750:	dd400617 	ldw	r21,24(sp)
    b754:	dd000517 	ldw	r20,20(sp)
    b758:	dcc00417 	ldw	r19,16(sp)
    b75c:	dc800317 	ldw	r18,12(sp)
    b760:	dc400217 	ldw	r17,8(sp)
    b764:	dc000117 	ldw	r16,4(sp)
    b768:	dec00b04 	addi	sp,sp,44
    b76c:	f800283a 	ret
    b770:	00803fc4 	movi	r2,255
    b774:	11c5803a 	cmpltu	r2,r2,r7
    b778:	100490fa 	slli	r2,r2,3
    b77c:	003f9e06 	br	b5f8 <__alt_data_end+0xff00b5f8>
    b780:	00803fc4 	movi	r2,255
    b784:	1445803a 	cmpltu	r2,r2,r17
    b788:	100490fa 	slli	r2,r2,3
    b78c:	003fb206 	br	b658 <__alt_data_end+0xff00b658>
    b790:	00804034 	movhi	r2,256
    b794:	10bfffc4 	addi	r2,r2,-1
    b798:	11808836 	bltu	r2,r6,b9bc <__udivdi3+0x51c>
    b79c:	00800404 	movi	r2,16
    b7a0:	003f5606 	br	b4fc <__alt_data_end+0xff00b4fc>
    b7a4:	30aed83a 	srl	r23,r6,r2
    b7a8:	3d4e983a 	sll	r7,r7,r21
    b7ac:	80acd83a 	srl	r22,r16,r2
    b7b0:	9884d83a 	srl	r2,r19,r2
    b7b4:	3deeb03a 	or	r23,r7,r23
    b7b8:	b824d43a 	srli	r18,r23,16
    b7bc:	8560983a 	sll	r16,r16,r21
    b7c0:	b009883a 	mov	r4,r22
    b7c4:	900b883a 	mov	r5,r18
    b7c8:	3568983a 	sll	r20,r6,r21
    b7cc:	1420b03a 	or	r16,r2,r16
    b7d0:	0001dcc0 	call	1dcc <__umodsi3>
    b7d4:	b009883a 	mov	r4,r22
    b7d8:	900b883a 	mov	r5,r18
    b7dc:	1023883a 	mov	r17,r2
    b7e0:	0001d680 	call	1d68 <__udivsi3>
    b7e4:	8808943a 	slli	r4,r17,16
    b7e8:	bf3fffcc 	andi	fp,r23,65535
    b7ec:	8006d43a 	srli	r3,r16,16
    b7f0:	e0a3383a 	mul	r17,fp,r2
    b7f4:	100d883a 	mov	r6,r2
    b7f8:	1906b03a 	or	r3,r3,r4
    b7fc:	1c40042e 	bgeu	r3,r17,b810 <__udivdi3+0x370>
    b800:	1dc7883a 	add	r3,r3,r23
    b804:	10bfffc4 	addi	r2,r2,-1
    b808:	1dc0752e 	bgeu	r3,r23,b9e0 <__udivdi3+0x540>
    b80c:	100d883a 	mov	r6,r2
    b810:	1c63c83a 	sub	r17,r3,r17
    b814:	900b883a 	mov	r5,r18
    b818:	8809883a 	mov	r4,r17
    b81c:	d9800015 	stw	r6,0(sp)
    b820:	0001dcc0 	call	1dcc <__umodsi3>
    b824:	102d883a 	mov	r22,r2
    b828:	8809883a 	mov	r4,r17
    b82c:	900b883a 	mov	r5,r18
    b830:	0001d680 	call	1d68 <__udivsi3>
    b834:	b02c943a 	slli	r22,r22,16
    b838:	e089383a 	mul	r4,fp,r2
    b83c:	843fffcc 	andi	r16,r16,65535
    b840:	85a0b03a 	or	r16,r16,r22
    b844:	d9800017 	ldw	r6,0(sp)
    b848:	8100042e 	bgeu	r16,r4,b85c <__udivdi3+0x3bc>
    b84c:	85e1883a 	add	r16,r16,r23
    b850:	10ffffc4 	addi	r3,r2,-1
    b854:	85c05e2e 	bgeu	r16,r23,b9d0 <__udivdi3+0x530>
    b858:	1805883a 	mov	r2,r3
    b85c:	300c943a 	slli	r6,r6,16
    b860:	a17fffcc 	andi	r5,r20,65535
    b864:	a028d43a 	srli	r20,r20,16
    b868:	3084b03a 	or	r2,r6,r2
    b86c:	10ffffcc 	andi	r3,r2,65535
    b870:	100cd43a 	srli	r6,r2,16
    b874:	194f383a 	mul	r7,r3,r5
    b878:	1d07383a 	mul	r3,r3,r20
    b87c:	314b383a 	mul	r5,r6,r5
    b880:	3810d43a 	srli	r8,r7,16
    b884:	8121c83a 	sub	r16,r16,r4
    b888:	1947883a 	add	r3,r3,r5
    b88c:	40c7883a 	add	r3,r8,r3
    b890:	350d383a 	mul	r6,r6,r20
    b894:	1940022e 	bgeu	r3,r5,b8a0 <__udivdi3+0x400>
    b898:	01000074 	movhi	r4,1
    b89c:	310d883a 	add	r6,r6,r4
    b8a0:	1828d43a 	srli	r20,r3,16
    b8a4:	a18d883a 	add	r6,r20,r6
    b8a8:	81803e36 	bltu	r16,r6,b9a4 <__udivdi3+0x504>
    b8ac:	81803826 	beq	r16,r6,b990 <__udivdi3+0x4f0>
    b8b0:	0007883a 	mov	r3,zero
    b8b4:	003fa206 	br	b740 <__alt_data_end+0xff00b740>
    b8b8:	88e2983a 	sll	r17,r17,r3
    b8bc:	80a8d83a 	srl	r20,r16,r2
    b8c0:	80e0983a 	sll	r16,r16,r3
    b8c4:	882ad43a 	srli	r21,r17,16
    b8c8:	9884d83a 	srl	r2,r19,r2
    b8cc:	a009883a 	mov	r4,r20
    b8d0:	a80b883a 	mov	r5,r21
    b8d4:	142eb03a 	or	r23,r2,r16
    b8d8:	98e4983a 	sll	r18,r19,r3
    b8dc:	0001dcc0 	call	1dcc <__umodsi3>
    b8e0:	a009883a 	mov	r4,r20
    b8e4:	a80b883a 	mov	r5,r21
    b8e8:	1021883a 	mov	r16,r2
    b8ec:	0001d680 	call	1d68 <__udivsi3>
    b8f0:	1039883a 	mov	fp,r2
    b8f4:	8d3fffcc 	andi	r20,r17,65535
    b8f8:	8020943a 	slli	r16,r16,16
    b8fc:	b804d43a 	srli	r2,r23,16
    b900:	a72d383a 	mul	r22,r20,fp
    b904:	1404b03a 	or	r2,r2,r16
    b908:	1580062e 	bgeu	r2,r22,b924 <__udivdi3+0x484>
    b90c:	1445883a 	add	r2,r2,r17
    b910:	e0ffffc4 	addi	r3,fp,-1
    b914:	14403836 	bltu	r2,r17,b9f8 <__udivdi3+0x558>
    b918:	1580372e 	bgeu	r2,r22,b9f8 <__udivdi3+0x558>
    b91c:	e73fff84 	addi	fp,fp,-2
    b920:	1445883a 	add	r2,r2,r17
    b924:	15adc83a 	sub	r22,r2,r22
    b928:	a80b883a 	mov	r5,r21
    b92c:	b009883a 	mov	r4,r22
    b930:	0001dcc0 	call	1dcc <__umodsi3>
    b934:	1027883a 	mov	r19,r2
    b938:	b009883a 	mov	r4,r22
    b93c:	a80b883a 	mov	r5,r21
    b940:	0001d680 	call	1d68 <__udivsi3>
    b944:	9826943a 	slli	r19,r19,16
    b948:	a0a1383a 	mul	r16,r20,r2
    b94c:	b93fffcc 	andi	r4,r23,65535
    b950:	24c8b03a 	or	r4,r4,r19
    b954:	2400062e 	bgeu	r4,r16,b970 <__udivdi3+0x4d0>
    b958:	2449883a 	add	r4,r4,r17
    b95c:	10ffffc4 	addi	r3,r2,-1
    b960:	24402336 	bltu	r4,r17,b9f0 <__udivdi3+0x550>
    b964:	2400222e 	bgeu	r4,r16,b9f0 <__udivdi3+0x550>
    b968:	10bfff84 	addi	r2,r2,-2
    b96c:	2449883a 	add	r4,r4,r17
    b970:	e038943a 	slli	fp,fp,16
    b974:	2421c83a 	sub	r16,r4,r16
    b978:	e086b03a 	or	r3,fp,r2
    b97c:	003f4306 	br	b68c <__alt_data_end+0xff00b68c>
    b980:	2005883a 	mov	r2,r4
    b984:	003f6906 	br	b72c <__alt_data_end+0xff00b72c>
    b988:	1805883a 	mov	r2,r3
    b98c:	003f0f06 	br	b5cc <__alt_data_end+0xff00b5cc>
    b990:	1806943a 	slli	r3,r3,16
    b994:	9d66983a 	sll	r19,r19,r21
    b998:	39ffffcc 	andi	r7,r7,65535
    b99c:	19c7883a 	add	r3,r3,r7
    b9a0:	98ffc32e 	bgeu	r19,r3,b8b0 <__alt_data_end+0xff00b8b0>
    b9a4:	10bfffc4 	addi	r2,r2,-1
    b9a8:	003fc106 	br	b8b0 <__alt_data_end+0xff00b8b0>
    b9ac:	00800604 	movi	r2,24
    b9b0:	003f1106 	br	b5f8 <__alt_data_end+0xff00b5f8>
    b9b4:	00800604 	movi	r2,24
    b9b8:	003f2706 	br	b658 <__alt_data_end+0xff00b658>
    b9bc:	00800604 	movi	r2,24
    b9c0:	003ece06 	br	b4fc <__alt_data_end+0xff00b4fc>
    b9c4:	0007883a 	mov	r3,zero
    b9c8:	00800044 	movi	r2,1
    b9cc:	003f5c06 	br	b740 <__alt_data_end+0xff00b740>
    b9d0:	813fa12e 	bgeu	r16,r4,b858 <__alt_data_end+0xff00b858>
    b9d4:	10bfff84 	addi	r2,r2,-2
    b9d8:	85e1883a 	add	r16,r16,r23
    b9dc:	003f9f06 	br	b85c <__alt_data_end+0xff00b85c>
    b9e0:	1c7f8a2e 	bgeu	r3,r17,b80c <__alt_data_end+0xff00b80c>
    b9e4:	31bfff84 	addi	r6,r6,-2
    b9e8:	1dc7883a 	add	r3,r3,r23
    b9ec:	003f8806 	br	b810 <__alt_data_end+0xff00b810>
    b9f0:	1805883a 	mov	r2,r3
    b9f4:	003fde06 	br	b970 <__alt_data_end+0xff00b970>
    b9f8:	1839883a 	mov	fp,r3
    b9fc:	003fc906 	br	b924 <__alt_data_end+0xff00b924>
    ba00:	b5bfff84 	addi	r22,r22,-2
    ba04:	2449883a 	add	r4,r4,r17
    ba08:	003f3406 	br	b6dc <__alt_data_end+0xff00b6dc>
    ba0c:	b5bfff84 	addi	r22,r22,-2
    ba10:	1445883a 	add	r2,r2,r17
    ba14:	003edb06 	br	b584 <__alt_data_end+0xff00b584>

0000ba18 <__umoddi3>:
    ba18:	defff404 	addi	sp,sp,-48
    ba1c:	df000a15 	stw	fp,40(sp)
    ba20:	dc400315 	stw	r17,12(sp)
    ba24:	dc000215 	stw	r16,8(sp)
    ba28:	dfc00b15 	stw	ra,44(sp)
    ba2c:	ddc00915 	stw	r23,36(sp)
    ba30:	dd800815 	stw	r22,32(sp)
    ba34:	dd400715 	stw	r21,28(sp)
    ba38:	dd000615 	stw	r20,24(sp)
    ba3c:	dcc00515 	stw	r19,20(sp)
    ba40:	dc800415 	stw	r18,16(sp)
    ba44:	2021883a 	mov	r16,r4
    ba48:	2823883a 	mov	r17,r5
    ba4c:	2839883a 	mov	fp,r5
    ba50:	38003c1e 	bne	r7,zero,bb44 <__umoddi3+0x12c>
    ba54:	3027883a 	mov	r19,r6
    ba58:	2029883a 	mov	r20,r4
    ba5c:	2980512e 	bgeu	r5,r6,bba4 <__umoddi3+0x18c>
    ba60:	00bfffd4 	movui	r2,65535
    ba64:	11809a36 	bltu	r2,r6,bcd0 <__umoddi3+0x2b8>
    ba68:	01003fc4 	movi	r4,255
    ba6c:	2189803a 	cmpltu	r4,r4,r6
    ba70:	200890fa 	slli	r4,r4,3
    ba74:	3104d83a 	srl	r2,r6,r4
    ba78:	00c00074 	movhi	r3,1
    ba7c:	18c5a004 	addi	r3,r3,5760
    ba80:	1885883a 	add	r2,r3,r2
    ba84:	10c00003 	ldbu	r3,0(r2)
    ba88:	00800804 	movi	r2,32
    ba8c:	1909883a 	add	r4,r3,r4
    ba90:	1125c83a 	sub	r18,r2,r4
    ba94:	90000526 	beq	r18,zero,baac <__umoddi3+0x94>
    ba98:	8ca2983a 	sll	r17,r17,r18
    ba9c:	8108d83a 	srl	r4,r16,r4
    baa0:	34a6983a 	sll	r19,r6,r18
    baa4:	84a8983a 	sll	r20,r16,r18
    baa8:	2478b03a 	or	fp,r4,r17
    baac:	982ed43a 	srli	r23,r19,16
    bab0:	e009883a 	mov	r4,fp
    bab4:	9dbfffcc 	andi	r22,r19,65535
    bab8:	b80b883a 	mov	r5,r23
    babc:	0001dcc0 	call	1dcc <__umodsi3>
    bac0:	e009883a 	mov	r4,fp
    bac4:	b80b883a 	mov	r5,r23
    bac8:	102b883a 	mov	r21,r2
    bacc:	0001d680 	call	1d68 <__udivsi3>
    bad0:	a806943a 	slli	r3,r21,16
    bad4:	a008d43a 	srli	r4,r20,16
    bad8:	b085383a 	mul	r2,r22,r2
    badc:	20c8b03a 	or	r4,r4,r3
    bae0:	2080032e 	bgeu	r4,r2,baf0 <__umoddi3+0xd8>
    bae4:	24c9883a 	add	r4,r4,r19
    bae8:	24c00136 	bltu	r4,r19,baf0 <__umoddi3+0xd8>
    baec:	20811036 	bltu	r4,r2,bf30 <__umoddi3+0x518>
    baf0:	20abc83a 	sub	r21,r4,r2
    baf4:	b80b883a 	mov	r5,r23
    baf8:	a809883a 	mov	r4,r21
    bafc:	0001dcc0 	call	1dcc <__umodsi3>
    bb00:	1023883a 	mov	r17,r2
    bb04:	b80b883a 	mov	r5,r23
    bb08:	a809883a 	mov	r4,r21
    bb0c:	0001d680 	call	1d68 <__udivsi3>
    bb10:	8822943a 	slli	r17,r17,16
    bb14:	b085383a 	mul	r2,r22,r2
    bb18:	a0ffffcc 	andi	r3,r20,65535
    bb1c:	1c46b03a 	or	r3,r3,r17
    bb20:	1880042e 	bgeu	r3,r2,bb34 <__umoddi3+0x11c>
    bb24:	1cc7883a 	add	r3,r3,r19
    bb28:	1cc00236 	bltu	r3,r19,bb34 <__umoddi3+0x11c>
    bb2c:	1880012e 	bgeu	r3,r2,bb34 <__umoddi3+0x11c>
    bb30:	1cc7883a 	add	r3,r3,r19
    bb34:	1885c83a 	sub	r2,r3,r2
    bb38:	1484d83a 	srl	r2,r2,r18
    bb3c:	0007883a 	mov	r3,zero
    bb40:	00004f06 	br	bc80 <__umoddi3+0x268>
    bb44:	29c04c36 	bltu	r5,r7,bc78 <__umoddi3+0x260>
    bb48:	00bfffd4 	movui	r2,65535
    bb4c:	11c0582e 	bgeu	r2,r7,bcb0 <__umoddi3+0x298>
    bb50:	00804034 	movhi	r2,256
    bb54:	10bfffc4 	addi	r2,r2,-1
    bb58:	11c0e736 	bltu	r2,r7,bef8 <__umoddi3+0x4e0>
    bb5c:	01000404 	movi	r4,16
    bb60:	3904d83a 	srl	r2,r7,r4
    bb64:	00c00074 	movhi	r3,1
    bb68:	18c5a004 	addi	r3,r3,5760
    bb6c:	1885883a 	add	r2,r3,r2
    bb70:	14c00003 	ldbu	r19,0(r2)
    bb74:	00c00804 	movi	r3,32
    bb78:	9927883a 	add	r19,r19,r4
    bb7c:	1ce9c83a 	sub	r20,r3,r19
    bb80:	a000581e 	bne	r20,zero,bce4 <__umoddi3+0x2cc>
    bb84:	3c400136 	bltu	r7,r17,bb8c <__umoddi3+0x174>
    bb88:	8180eb36 	bltu	r16,r6,bf38 <__umoddi3+0x520>
    bb8c:	8185c83a 	sub	r2,r16,r6
    bb90:	89e3c83a 	sub	r17,r17,r7
    bb94:	8089803a 	cmpltu	r4,r16,r2
    bb98:	8939c83a 	sub	fp,r17,r4
    bb9c:	e007883a 	mov	r3,fp
    bba0:	00003706 	br	bc80 <__umoddi3+0x268>
    bba4:	3000041e 	bne	r6,zero,bbb8 <__umoddi3+0x1a0>
    bba8:	000b883a 	mov	r5,zero
    bbac:	01000044 	movi	r4,1
    bbb0:	0001d680 	call	1d68 <__udivsi3>
    bbb4:	1027883a 	mov	r19,r2
    bbb8:	00bfffd4 	movui	r2,65535
    bbbc:	14c0402e 	bgeu	r2,r19,bcc0 <__umoddi3+0x2a8>
    bbc0:	00804034 	movhi	r2,256
    bbc4:	10bfffc4 	addi	r2,r2,-1
    bbc8:	14c0cd36 	bltu	r2,r19,bf00 <__umoddi3+0x4e8>
    bbcc:	00800404 	movi	r2,16
    bbd0:	9886d83a 	srl	r3,r19,r2
    bbd4:	01000074 	movhi	r4,1
    bbd8:	2105a004 	addi	r4,r4,5760
    bbdc:	20c7883a 	add	r3,r4,r3
    bbe0:	18c00003 	ldbu	r3,0(r3)
    bbe4:	1887883a 	add	r3,r3,r2
    bbe8:	00800804 	movi	r2,32
    bbec:	10e5c83a 	sub	r18,r2,r3
    bbf0:	9000901e 	bne	r18,zero,be34 <__umoddi3+0x41c>
    bbf4:	982cd43a 	srli	r22,r19,16
    bbf8:	8ce3c83a 	sub	r17,r17,r19
    bbfc:	9d7fffcc 	andi	r21,r19,65535
    bc00:	b00b883a 	mov	r5,r22
    bc04:	8809883a 	mov	r4,r17
    bc08:	0001dcc0 	call	1dcc <__umodsi3>
    bc0c:	8809883a 	mov	r4,r17
    bc10:	b00b883a 	mov	r5,r22
    bc14:	1021883a 	mov	r16,r2
    bc18:	0001d680 	call	1d68 <__udivsi3>
    bc1c:	8006943a 	slli	r3,r16,16
    bc20:	a008d43a 	srli	r4,r20,16
    bc24:	1545383a 	mul	r2,r2,r21
    bc28:	20c8b03a 	or	r4,r4,r3
    bc2c:	2080042e 	bgeu	r4,r2,bc40 <__umoddi3+0x228>
    bc30:	24c9883a 	add	r4,r4,r19
    bc34:	24c00236 	bltu	r4,r19,bc40 <__umoddi3+0x228>
    bc38:	2080012e 	bgeu	r4,r2,bc40 <__umoddi3+0x228>
    bc3c:	24c9883a 	add	r4,r4,r19
    bc40:	20a1c83a 	sub	r16,r4,r2
    bc44:	b00b883a 	mov	r5,r22
    bc48:	8009883a 	mov	r4,r16
    bc4c:	0001dcc0 	call	1dcc <__umodsi3>
    bc50:	1023883a 	mov	r17,r2
    bc54:	b00b883a 	mov	r5,r22
    bc58:	8009883a 	mov	r4,r16
    bc5c:	0001d680 	call	1d68 <__udivsi3>
    bc60:	8822943a 	slli	r17,r17,16
    bc64:	1545383a 	mul	r2,r2,r21
    bc68:	a53fffcc 	andi	r20,r20,65535
    bc6c:	a446b03a 	or	r3,r20,r17
    bc70:	18bfb02e 	bgeu	r3,r2,bb34 <__alt_data_end+0xff00bb34>
    bc74:	003fab06 	br	bb24 <__alt_data_end+0xff00bb24>
    bc78:	2005883a 	mov	r2,r4
    bc7c:	2807883a 	mov	r3,r5
    bc80:	dfc00b17 	ldw	ra,44(sp)
    bc84:	df000a17 	ldw	fp,40(sp)
    bc88:	ddc00917 	ldw	r23,36(sp)
    bc8c:	dd800817 	ldw	r22,32(sp)
    bc90:	dd400717 	ldw	r21,28(sp)
    bc94:	dd000617 	ldw	r20,24(sp)
    bc98:	dcc00517 	ldw	r19,20(sp)
    bc9c:	dc800417 	ldw	r18,16(sp)
    bca0:	dc400317 	ldw	r17,12(sp)
    bca4:	dc000217 	ldw	r16,8(sp)
    bca8:	dec00c04 	addi	sp,sp,48
    bcac:	f800283a 	ret
    bcb0:	04c03fc4 	movi	r19,255
    bcb4:	99c9803a 	cmpltu	r4,r19,r7
    bcb8:	200890fa 	slli	r4,r4,3
    bcbc:	003fa806 	br	bb60 <__alt_data_end+0xff00bb60>
    bcc0:	00803fc4 	movi	r2,255
    bcc4:	14c5803a 	cmpltu	r2,r2,r19
    bcc8:	100490fa 	slli	r2,r2,3
    bccc:	003fc006 	br	bbd0 <__alt_data_end+0xff00bbd0>
    bcd0:	00804034 	movhi	r2,256
    bcd4:	10bfffc4 	addi	r2,r2,-1
    bcd8:	11808b36 	bltu	r2,r6,bf08 <__umoddi3+0x4f0>
    bcdc:	01000404 	movi	r4,16
    bce0:	003f6406 	br	ba74 <__alt_data_end+0xff00ba74>
    bce4:	34c4d83a 	srl	r2,r6,r19
    bce8:	3d0e983a 	sll	r7,r7,r20
    bcec:	8cf8d83a 	srl	fp,r17,r19
    bcf0:	8d10983a 	sll	r8,r17,r20
    bcf4:	38aab03a 	or	r21,r7,r2
    bcf8:	a82cd43a 	srli	r22,r21,16
    bcfc:	84e2d83a 	srl	r17,r16,r19
    bd00:	e009883a 	mov	r4,fp
    bd04:	b00b883a 	mov	r5,r22
    bd08:	8a22b03a 	or	r17,r17,r8
    bd0c:	3524983a 	sll	r18,r6,r20
    bd10:	0001dcc0 	call	1dcc <__umodsi3>
    bd14:	e009883a 	mov	r4,fp
    bd18:	b00b883a 	mov	r5,r22
    bd1c:	102f883a 	mov	r23,r2
    bd20:	0001d680 	call	1d68 <__udivsi3>
    bd24:	100d883a 	mov	r6,r2
    bd28:	b808943a 	slli	r4,r23,16
    bd2c:	aa3fffcc 	andi	r8,r21,65535
    bd30:	8804d43a 	srli	r2,r17,16
    bd34:	41af383a 	mul	r23,r8,r6
    bd38:	8520983a 	sll	r16,r16,r20
    bd3c:	1104b03a 	or	r2,r2,r4
    bd40:	15c0042e 	bgeu	r2,r23,bd54 <__umoddi3+0x33c>
    bd44:	1545883a 	add	r2,r2,r21
    bd48:	30ffffc4 	addi	r3,r6,-1
    bd4c:	1540742e 	bgeu	r2,r21,bf20 <__umoddi3+0x508>
    bd50:	180d883a 	mov	r6,r3
    bd54:	15efc83a 	sub	r23,r2,r23
    bd58:	b00b883a 	mov	r5,r22
    bd5c:	b809883a 	mov	r4,r23
    bd60:	d9800115 	stw	r6,4(sp)
    bd64:	da000015 	stw	r8,0(sp)
    bd68:	0001dcc0 	call	1dcc <__umodsi3>
    bd6c:	b00b883a 	mov	r5,r22
    bd70:	b809883a 	mov	r4,r23
    bd74:	1039883a 	mov	fp,r2
    bd78:	0001d680 	call	1d68 <__udivsi3>
    bd7c:	da000017 	ldw	r8,0(sp)
    bd80:	e038943a 	slli	fp,fp,16
    bd84:	100b883a 	mov	r5,r2
    bd88:	4089383a 	mul	r4,r8,r2
    bd8c:	8a3fffcc 	andi	r8,r17,65535
    bd90:	4710b03a 	or	r8,r8,fp
    bd94:	d9800117 	ldw	r6,4(sp)
    bd98:	4100042e 	bgeu	r8,r4,bdac <__umoddi3+0x394>
    bd9c:	4551883a 	add	r8,r8,r21
    bda0:	10bfffc4 	addi	r2,r2,-1
    bda4:	45405a2e 	bgeu	r8,r21,bf10 <__umoddi3+0x4f8>
    bda8:	100b883a 	mov	r5,r2
    bdac:	300c943a 	slli	r6,r6,16
    bdb0:	91ffffcc 	andi	r7,r18,65535
    bdb4:	9004d43a 	srli	r2,r18,16
    bdb8:	314cb03a 	or	r6,r6,r5
    bdbc:	317fffcc 	andi	r5,r6,65535
    bdc0:	300cd43a 	srli	r6,r6,16
    bdc4:	29d3383a 	mul	r9,r5,r7
    bdc8:	288b383a 	mul	r5,r5,r2
    bdcc:	31cf383a 	mul	r7,r6,r7
    bdd0:	4806d43a 	srli	r3,r9,16
    bdd4:	4111c83a 	sub	r8,r8,r4
    bdd8:	29cb883a 	add	r5,r5,r7
    bddc:	194b883a 	add	r5,r3,r5
    bde0:	3085383a 	mul	r2,r6,r2
    bde4:	29c0022e 	bgeu	r5,r7,bdf0 <__umoddi3+0x3d8>
    bde8:	00c00074 	movhi	r3,1
    bdec:	10c5883a 	add	r2,r2,r3
    bdf0:	2808d43a 	srli	r4,r5,16
    bdf4:	280a943a 	slli	r5,r5,16
    bdf8:	4a7fffcc 	andi	r9,r9,65535
    bdfc:	2085883a 	add	r2,r4,r2
    be00:	2a4b883a 	add	r5,r5,r9
    be04:	40803636 	bltu	r8,r2,bee0 <__umoddi3+0x4c8>
    be08:	40804d26 	beq	r8,r2,bf40 <__umoddi3+0x528>
    be0c:	4089c83a 	sub	r4,r8,r2
    be10:	280f883a 	mov	r7,r5
    be14:	81cfc83a 	sub	r7,r16,r7
    be18:	81c7803a 	cmpltu	r3,r16,r7
    be1c:	20c7c83a 	sub	r3,r4,r3
    be20:	1cc4983a 	sll	r2,r3,r19
    be24:	3d0ed83a 	srl	r7,r7,r20
    be28:	1d06d83a 	srl	r3,r3,r20
    be2c:	11c4b03a 	or	r2,r2,r7
    be30:	003f9306 	br	bc80 <__alt_data_end+0xff00bc80>
    be34:	9ca6983a 	sll	r19,r19,r18
    be38:	88e8d83a 	srl	r20,r17,r3
    be3c:	80c4d83a 	srl	r2,r16,r3
    be40:	982cd43a 	srli	r22,r19,16
    be44:	8ca2983a 	sll	r17,r17,r18
    be48:	a009883a 	mov	r4,r20
    be4c:	b00b883a 	mov	r5,r22
    be50:	1478b03a 	or	fp,r2,r17
    be54:	0001dcc0 	call	1dcc <__umodsi3>
    be58:	a009883a 	mov	r4,r20
    be5c:	b00b883a 	mov	r5,r22
    be60:	1023883a 	mov	r17,r2
    be64:	0001d680 	call	1d68 <__udivsi3>
    be68:	9d7fffcc 	andi	r21,r19,65535
    be6c:	880a943a 	slli	r5,r17,16
    be70:	e008d43a 	srli	r4,fp,16
    be74:	a885383a 	mul	r2,r21,r2
    be78:	84a8983a 	sll	r20,r16,r18
    be7c:	2148b03a 	or	r4,r4,r5
    be80:	2080042e 	bgeu	r4,r2,be94 <__umoddi3+0x47c>
    be84:	24c9883a 	add	r4,r4,r19
    be88:	24c00236 	bltu	r4,r19,be94 <__umoddi3+0x47c>
    be8c:	2080012e 	bgeu	r4,r2,be94 <__umoddi3+0x47c>
    be90:	24c9883a 	add	r4,r4,r19
    be94:	20a3c83a 	sub	r17,r4,r2
    be98:	b00b883a 	mov	r5,r22
    be9c:	8809883a 	mov	r4,r17
    bea0:	0001dcc0 	call	1dcc <__umodsi3>
    bea4:	102f883a 	mov	r23,r2
    bea8:	8809883a 	mov	r4,r17
    beac:	b00b883a 	mov	r5,r22
    beb0:	0001d680 	call	1d68 <__udivsi3>
    beb4:	b82e943a 	slli	r23,r23,16
    beb8:	a885383a 	mul	r2,r21,r2
    bebc:	e13fffcc 	andi	r4,fp,65535
    bec0:	25c8b03a 	or	r4,r4,r23
    bec4:	2080042e 	bgeu	r4,r2,bed8 <__umoddi3+0x4c0>
    bec8:	24c9883a 	add	r4,r4,r19
    becc:	24c00236 	bltu	r4,r19,bed8 <__umoddi3+0x4c0>
    bed0:	2080012e 	bgeu	r4,r2,bed8 <__umoddi3+0x4c0>
    bed4:	24c9883a 	add	r4,r4,r19
    bed8:	20a3c83a 	sub	r17,r4,r2
    bedc:	003f4806 	br	bc00 <__alt_data_end+0xff00bc00>
    bee0:	2c8fc83a 	sub	r7,r5,r18
    bee4:	1545c83a 	sub	r2,r2,r21
    bee8:	29cb803a 	cmpltu	r5,r5,r7
    beec:	1145c83a 	sub	r2,r2,r5
    bef0:	4089c83a 	sub	r4,r8,r2
    bef4:	003fc706 	br	be14 <__alt_data_end+0xff00be14>
    bef8:	01000604 	movi	r4,24
    befc:	003f1806 	br	bb60 <__alt_data_end+0xff00bb60>
    bf00:	00800604 	movi	r2,24
    bf04:	003f3206 	br	bbd0 <__alt_data_end+0xff00bbd0>
    bf08:	01000604 	movi	r4,24
    bf0c:	003ed906 	br	ba74 <__alt_data_end+0xff00ba74>
    bf10:	413fa52e 	bgeu	r8,r4,bda8 <__alt_data_end+0xff00bda8>
    bf14:	297fff84 	addi	r5,r5,-2
    bf18:	4551883a 	add	r8,r8,r21
    bf1c:	003fa306 	br	bdac <__alt_data_end+0xff00bdac>
    bf20:	15ff8b2e 	bgeu	r2,r23,bd50 <__alt_data_end+0xff00bd50>
    bf24:	31bfff84 	addi	r6,r6,-2
    bf28:	1545883a 	add	r2,r2,r21
    bf2c:	003f8906 	br	bd54 <__alt_data_end+0xff00bd54>
    bf30:	24c9883a 	add	r4,r4,r19
    bf34:	003eee06 	br	baf0 <__alt_data_end+0xff00baf0>
    bf38:	8005883a 	mov	r2,r16
    bf3c:	003f1706 	br	bb9c <__alt_data_end+0xff00bb9c>
    bf40:	817fe736 	bltu	r16,r5,bee0 <__alt_data_end+0xff00bee0>
    bf44:	280f883a 	mov	r7,r5
    bf48:	0009883a 	mov	r4,zero
    bf4c:	003fb106 	br	be14 <__alt_data_end+0xff00be14>

0000bf50 <__adddf3>:
    bf50:	02c00434 	movhi	r11,16
    bf54:	5affffc4 	addi	r11,r11,-1
    bf58:	2806d7fa 	srli	r3,r5,31
    bf5c:	2ad4703a 	and	r10,r5,r11
    bf60:	3ad2703a 	and	r9,r7,r11
    bf64:	3804d53a 	srli	r2,r7,20
    bf68:	3018d77a 	srli	r12,r6,29
    bf6c:	280ad53a 	srli	r5,r5,20
    bf70:	501490fa 	slli	r10,r10,3
    bf74:	2010d77a 	srli	r8,r4,29
    bf78:	481290fa 	slli	r9,r9,3
    bf7c:	380ed7fa 	srli	r7,r7,31
    bf80:	defffb04 	addi	sp,sp,-20
    bf84:	dc800215 	stw	r18,8(sp)
    bf88:	dc400115 	stw	r17,4(sp)
    bf8c:	dc000015 	stw	r16,0(sp)
    bf90:	dfc00415 	stw	ra,16(sp)
    bf94:	dcc00315 	stw	r19,12(sp)
    bf98:	1c803fcc 	andi	r18,r3,255
    bf9c:	2c01ffcc 	andi	r16,r5,2047
    bfa0:	5210b03a 	or	r8,r10,r8
    bfa4:	202290fa 	slli	r17,r4,3
    bfa8:	1081ffcc 	andi	r2,r2,2047
    bfac:	4b12b03a 	or	r9,r9,r12
    bfb0:	300c90fa 	slli	r6,r6,3
    bfb4:	91c07526 	beq	r18,r7,c18c <__adddf3+0x23c>
    bfb8:	8087c83a 	sub	r3,r16,r2
    bfbc:	00c0ab0e 	bge	zero,r3,c26c <__adddf3+0x31c>
    bfc0:	10002a1e 	bne	r2,zero,c06c <__adddf3+0x11c>
    bfc4:	4984b03a 	or	r2,r9,r6
    bfc8:	1000961e 	bne	r2,zero,c224 <__adddf3+0x2d4>
    bfcc:	888001cc 	andi	r2,r17,7
    bfd0:	10000726 	beq	r2,zero,bff0 <__adddf3+0xa0>
    bfd4:	888003cc 	andi	r2,r17,15
    bfd8:	00c00104 	movi	r3,4
    bfdc:	10c00426 	beq	r2,r3,bff0 <__adddf3+0xa0>
    bfe0:	88c7883a 	add	r3,r17,r3
    bfe4:	1c63803a 	cmpltu	r17,r3,r17
    bfe8:	4451883a 	add	r8,r8,r17
    bfec:	1823883a 	mov	r17,r3
    bff0:	4080202c 	andhi	r2,r8,128
    bff4:	10005926 	beq	r2,zero,c15c <__adddf3+0x20c>
    bff8:	84000044 	addi	r16,r16,1
    bffc:	0081ffc4 	movi	r2,2047
    c000:	8080ba26 	beq	r16,r2,c2ec <__adddf3+0x39c>
    c004:	00bfe034 	movhi	r2,65408
    c008:	10bfffc4 	addi	r2,r2,-1
    c00c:	4090703a 	and	r8,r8,r2
    c010:	4004977a 	slli	r2,r8,29
    c014:	4010927a 	slli	r8,r8,9
    c018:	8822d0fa 	srli	r17,r17,3
    c01c:	8401ffcc 	andi	r16,r16,2047
    c020:	4010d33a 	srli	r8,r8,12
    c024:	9007883a 	mov	r3,r18
    c028:	1444b03a 	or	r2,r2,r17
    c02c:	8401ffcc 	andi	r16,r16,2047
    c030:	8020953a 	slli	r16,r16,20
    c034:	18c03fcc 	andi	r3,r3,255
    c038:	01000434 	movhi	r4,16
    c03c:	213fffc4 	addi	r4,r4,-1
    c040:	180697fa 	slli	r3,r3,31
    c044:	4110703a 	and	r8,r8,r4
    c048:	4410b03a 	or	r8,r8,r16
    c04c:	40c6b03a 	or	r3,r8,r3
    c050:	dfc00417 	ldw	ra,16(sp)
    c054:	dcc00317 	ldw	r19,12(sp)
    c058:	dc800217 	ldw	r18,8(sp)
    c05c:	dc400117 	ldw	r17,4(sp)
    c060:	dc000017 	ldw	r16,0(sp)
    c064:	dec00504 	addi	sp,sp,20
    c068:	f800283a 	ret
    c06c:	0081ffc4 	movi	r2,2047
    c070:	80bfd626 	beq	r16,r2,bfcc <__alt_data_end+0xff00bfcc>
    c074:	4a402034 	orhi	r9,r9,128
    c078:	00800e04 	movi	r2,56
    c07c:	10c09f16 	blt	r2,r3,c2fc <__adddf3+0x3ac>
    c080:	008007c4 	movi	r2,31
    c084:	10c0c216 	blt	r2,r3,c390 <__adddf3+0x440>
    c088:	00800804 	movi	r2,32
    c08c:	10c5c83a 	sub	r2,r2,r3
    c090:	488a983a 	sll	r5,r9,r2
    c094:	30c8d83a 	srl	r4,r6,r3
    c098:	3084983a 	sll	r2,r6,r2
    c09c:	48c6d83a 	srl	r3,r9,r3
    c0a0:	290cb03a 	or	r6,r5,r4
    c0a4:	1004c03a 	cmpne	r2,r2,zero
    c0a8:	308cb03a 	or	r6,r6,r2
    c0ac:	898dc83a 	sub	r6,r17,r6
    c0b0:	89a3803a 	cmpltu	r17,r17,r6
    c0b4:	40d1c83a 	sub	r8,r8,r3
    c0b8:	4451c83a 	sub	r8,r8,r17
    c0bc:	3023883a 	mov	r17,r6
    c0c0:	4080202c 	andhi	r2,r8,128
    c0c4:	10002326 	beq	r2,zero,c154 <__adddf3+0x204>
    c0c8:	04c02034 	movhi	r19,128
    c0cc:	9cffffc4 	addi	r19,r19,-1
    c0d0:	44e6703a 	and	r19,r8,r19
    c0d4:	98007626 	beq	r19,zero,c2b0 <__adddf3+0x360>
    c0d8:	9809883a 	mov	r4,r19
    c0dc:	000e5540 	call	e554 <__clzsi2>
    c0e0:	10fffe04 	addi	r3,r2,-8
    c0e4:	010007c4 	movi	r4,31
    c0e8:	20c07716 	blt	r4,r3,c2c8 <__adddf3+0x378>
    c0ec:	00800804 	movi	r2,32
    c0f0:	10c5c83a 	sub	r2,r2,r3
    c0f4:	8884d83a 	srl	r2,r17,r2
    c0f8:	98d0983a 	sll	r8,r19,r3
    c0fc:	88e2983a 	sll	r17,r17,r3
    c100:	1204b03a 	or	r2,r2,r8
    c104:	1c007416 	blt	r3,r16,c2d8 <__adddf3+0x388>
    c108:	1c21c83a 	sub	r16,r3,r16
    c10c:	82000044 	addi	r8,r16,1
    c110:	00c007c4 	movi	r3,31
    c114:	1a009116 	blt	r3,r8,c35c <__adddf3+0x40c>
    c118:	00c00804 	movi	r3,32
    c11c:	1a07c83a 	sub	r3,r3,r8
    c120:	8a08d83a 	srl	r4,r17,r8
    c124:	88e2983a 	sll	r17,r17,r3
    c128:	10c6983a 	sll	r3,r2,r3
    c12c:	1210d83a 	srl	r8,r2,r8
    c130:	8804c03a 	cmpne	r2,r17,zero
    c134:	1906b03a 	or	r3,r3,r4
    c138:	18a2b03a 	or	r17,r3,r2
    c13c:	0021883a 	mov	r16,zero
    c140:	003fa206 	br	bfcc <__alt_data_end+0xff00bfcc>
    c144:	1890b03a 	or	r8,r3,r2
    c148:	40017d26 	beq	r8,zero,c740 <__adddf3+0x7f0>
    c14c:	1011883a 	mov	r8,r2
    c150:	1823883a 	mov	r17,r3
    c154:	888001cc 	andi	r2,r17,7
    c158:	103f9e1e 	bne	r2,zero,bfd4 <__alt_data_end+0xff00bfd4>
    c15c:	4004977a 	slli	r2,r8,29
    c160:	8822d0fa 	srli	r17,r17,3
    c164:	4010d0fa 	srli	r8,r8,3
    c168:	9007883a 	mov	r3,r18
    c16c:	1444b03a 	or	r2,r2,r17
    c170:	0101ffc4 	movi	r4,2047
    c174:	81002426 	beq	r16,r4,c208 <__adddf3+0x2b8>
    c178:	8120703a 	and	r16,r16,r4
    c17c:	01000434 	movhi	r4,16
    c180:	213fffc4 	addi	r4,r4,-1
    c184:	4110703a 	and	r8,r8,r4
    c188:	003fa806 	br	c02c <__alt_data_end+0xff00c02c>
    c18c:	8089c83a 	sub	r4,r16,r2
    c190:	01005e0e 	bge	zero,r4,c30c <__adddf3+0x3bc>
    c194:	10002b26 	beq	r2,zero,c244 <__adddf3+0x2f4>
    c198:	0081ffc4 	movi	r2,2047
    c19c:	80bf8b26 	beq	r16,r2,bfcc <__alt_data_end+0xff00bfcc>
    c1a0:	4a402034 	orhi	r9,r9,128
    c1a4:	00800e04 	movi	r2,56
    c1a8:	1100a40e 	bge	r2,r4,c43c <__adddf3+0x4ec>
    c1ac:	498cb03a 	or	r6,r9,r6
    c1b0:	300ac03a 	cmpne	r5,r6,zero
    c1b4:	0013883a 	mov	r9,zero
    c1b8:	2c4b883a 	add	r5,r5,r17
    c1bc:	2c63803a 	cmpltu	r17,r5,r17
    c1c0:	4a11883a 	add	r8,r9,r8
    c1c4:	8a11883a 	add	r8,r17,r8
    c1c8:	2823883a 	mov	r17,r5
    c1cc:	4080202c 	andhi	r2,r8,128
    c1d0:	103fe026 	beq	r2,zero,c154 <__alt_data_end+0xff00c154>
    c1d4:	84000044 	addi	r16,r16,1
    c1d8:	0081ffc4 	movi	r2,2047
    c1dc:	8080d226 	beq	r16,r2,c528 <__adddf3+0x5d8>
    c1e0:	00bfe034 	movhi	r2,65408
    c1e4:	10bfffc4 	addi	r2,r2,-1
    c1e8:	4090703a 	and	r8,r8,r2
    c1ec:	880ad07a 	srli	r5,r17,1
    c1f0:	400897fa 	slli	r4,r8,31
    c1f4:	88c0004c 	andi	r3,r17,1
    c1f8:	28e2b03a 	or	r17,r5,r3
    c1fc:	4010d07a 	srli	r8,r8,1
    c200:	2462b03a 	or	r17,r4,r17
    c204:	003f7106 	br	bfcc <__alt_data_end+0xff00bfcc>
    c208:	4088b03a 	or	r4,r8,r2
    c20c:	20014526 	beq	r4,zero,c724 <__adddf3+0x7d4>
    c210:	01000434 	movhi	r4,16
    c214:	42000234 	orhi	r8,r8,8
    c218:	213fffc4 	addi	r4,r4,-1
    c21c:	4110703a 	and	r8,r8,r4
    c220:	003f8206 	br	c02c <__alt_data_end+0xff00c02c>
    c224:	18ffffc4 	addi	r3,r3,-1
    c228:	1800491e 	bne	r3,zero,c350 <__adddf3+0x400>
    c22c:	898bc83a 	sub	r5,r17,r6
    c230:	8963803a 	cmpltu	r17,r17,r5
    c234:	4251c83a 	sub	r8,r8,r9
    c238:	4451c83a 	sub	r8,r8,r17
    c23c:	2823883a 	mov	r17,r5
    c240:	003f9f06 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c244:	4984b03a 	or	r2,r9,r6
    c248:	103f6026 	beq	r2,zero,bfcc <__alt_data_end+0xff00bfcc>
    c24c:	213fffc4 	addi	r4,r4,-1
    c250:	2000931e 	bne	r4,zero,c4a0 <__adddf3+0x550>
    c254:	898d883a 	add	r6,r17,r6
    c258:	3463803a 	cmpltu	r17,r6,r17
    c25c:	4251883a 	add	r8,r8,r9
    c260:	8a11883a 	add	r8,r17,r8
    c264:	3023883a 	mov	r17,r6
    c268:	003fd806 	br	c1cc <__alt_data_end+0xff00c1cc>
    c26c:	1800541e 	bne	r3,zero,c3c0 <__adddf3+0x470>
    c270:	80800044 	addi	r2,r16,1
    c274:	1081ffcc 	andi	r2,r2,2047
    c278:	00c00044 	movi	r3,1
    c27c:	1880a00e 	bge	r3,r2,c500 <__adddf3+0x5b0>
    c280:	8989c83a 	sub	r4,r17,r6
    c284:	8905803a 	cmpltu	r2,r17,r4
    c288:	4267c83a 	sub	r19,r8,r9
    c28c:	98a7c83a 	sub	r19,r19,r2
    c290:	9880202c 	andhi	r2,r19,128
    c294:	10006326 	beq	r2,zero,c424 <__adddf3+0x4d4>
    c298:	3463c83a 	sub	r17,r6,r17
    c29c:	4a07c83a 	sub	r3,r9,r8
    c2a0:	344d803a 	cmpltu	r6,r6,r17
    c2a4:	19a7c83a 	sub	r19,r3,r6
    c2a8:	3825883a 	mov	r18,r7
    c2ac:	983f8a1e 	bne	r19,zero,c0d8 <__alt_data_end+0xff00c0d8>
    c2b0:	8809883a 	mov	r4,r17
    c2b4:	000e5540 	call	e554 <__clzsi2>
    c2b8:	10800804 	addi	r2,r2,32
    c2bc:	10fffe04 	addi	r3,r2,-8
    c2c0:	010007c4 	movi	r4,31
    c2c4:	20ff890e 	bge	r4,r3,c0ec <__alt_data_end+0xff00c0ec>
    c2c8:	10bff604 	addi	r2,r2,-40
    c2cc:	8884983a 	sll	r2,r17,r2
    c2d0:	0023883a 	mov	r17,zero
    c2d4:	1c3f8c0e 	bge	r3,r16,c108 <__alt_data_end+0xff00c108>
    c2d8:	023fe034 	movhi	r8,65408
    c2dc:	423fffc4 	addi	r8,r8,-1
    c2e0:	80e1c83a 	sub	r16,r16,r3
    c2e4:	1210703a 	and	r8,r2,r8
    c2e8:	003f3806 	br	bfcc <__alt_data_end+0xff00bfcc>
    c2ec:	9007883a 	mov	r3,r18
    c2f0:	0011883a 	mov	r8,zero
    c2f4:	0005883a 	mov	r2,zero
    c2f8:	003f4c06 	br	c02c <__alt_data_end+0xff00c02c>
    c2fc:	498cb03a 	or	r6,r9,r6
    c300:	300cc03a 	cmpne	r6,r6,zero
    c304:	0007883a 	mov	r3,zero
    c308:	003f6806 	br	c0ac <__alt_data_end+0xff00c0ac>
    c30c:	20009c1e 	bne	r4,zero,c580 <__adddf3+0x630>
    c310:	80800044 	addi	r2,r16,1
    c314:	1141ffcc 	andi	r5,r2,2047
    c318:	01000044 	movi	r4,1
    c31c:	2140670e 	bge	r4,r5,c4bc <__adddf3+0x56c>
    c320:	0101ffc4 	movi	r4,2047
    c324:	11007f26 	beq	r2,r4,c524 <__adddf3+0x5d4>
    c328:	898d883a 	add	r6,r17,r6
    c32c:	4247883a 	add	r3,r8,r9
    c330:	3451803a 	cmpltu	r8,r6,r17
    c334:	40d1883a 	add	r8,r8,r3
    c338:	402297fa 	slli	r17,r8,31
    c33c:	300cd07a 	srli	r6,r6,1
    c340:	4010d07a 	srli	r8,r8,1
    c344:	1021883a 	mov	r16,r2
    c348:	89a2b03a 	or	r17,r17,r6
    c34c:	003f1f06 	br	bfcc <__alt_data_end+0xff00bfcc>
    c350:	0081ffc4 	movi	r2,2047
    c354:	80bf481e 	bne	r16,r2,c078 <__alt_data_end+0xff00c078>
    c358:	003f1c06 	br	bfcc <__alt_data_end+0xff00bfcc>
    c35c:	843ff844 	addi	r16,r16,-31
    c360:	01000804 	movi	r4,32
    c364:	1406d83a 	srl	r3,r2,r16
    c368:	41005026 	beq	r8,r4,c4ac <__adddf3+0x55c>
    c36c:	01001004 	movi	r4,64
    c370:	2211c83a 	sub	r8,r4,r8
    c374:	1204983a 	sll	r2,r2,r8
    c378:	88a2b03a 	or	r17,r17,r2
    c37c:	8822c03a 	cmpne	r17,r17,zero
    c380:	1c62b03a 	or	r17,r3,r17
    c384:	0011883a 	mov	r8,zero
    c388:	0021883a 	mov	r16,zero
    c38c:	003f7106 	br	c154 <__alt_data_end+0xff00c154>
    c390:	193ff804 	addi	r4,r3,-32
    c394:	00800804 	movi	r2,32
    c398:	4908d83a 	srl	r4,r9,r4
    c39c:	18804526 	beq	r3,r2,c4b4 <__adddf3+0x564>
    c3a0:	00801004 	movi	r2,64
    c3a4:	10c5c83a 	sub	r2,r2,r3
    c3a8:	4886983a 	sll	r3,r9,r2
    c3ac:	198cb03a 	or	r6,r3,r6
    c3b0:	300cc03a 	cmpne	r6,r6,zero
    c3b4:	218cb03a 	or	r6,r4,r6
    c3b8:	0007883a 	mov	r3,zero
    c3bc:	003f3b06 	br	c0ac <__alt_data_end+0xff00c0ac>
    c3c0:	80002a26 	beq	r16,zero,c46c <__adddf3+0x51c>
    c3c4:	0101ffc4 	movi	r4,2047
    c3c8:	11006826 	beq	r2,r4,c56c <__adddf3+0x61c>
    c3cc:	00c7c83a 	sub	r3,zero,r3
    c3d0:	42002034 	orhi	r8,r8,128
    c3d4:	01000e04 	movi	r4,56
    c3d8:	20c07c16 	blt	r4,r3,c5cc <__adddf3+0x67c>
    c3dc:	010007c4 	movi	r4,31
    c3e0:	20c0da16 	blt	r4,r3,c74c <__adddf3+0x7fc>
    c3e4:	01000804 	movi	r4,32
    c3e8:	20c9c83a 	sub	r4,r4,r3
    c3ec:	4114983a 	sll	r10,r8,r4
    c3f0:	88cad83a 	srl	r5,r17,r3
    c3f4:	8908983a 	sll	r4,r17,r4
    c3f8:	40c6d83a 	srl	r3,r8,r3
    c3fc:	5162b03a 	or	r17,r10,r5
    c400:	2008c03a 	cmpne	r4,r4,zero
    c404:	8922b03a 	or	r17,r17,r4
    c408:	3463c83a 	sub	r17,r6,r17
    c40c:	48c7c83a 	sub	r3,r9,r3
    c410:	344d803a 	cmpltu	r6,r6,r17
    c414:	1991c83a 	sub	r8,r3,r6
    c418:	1021883a 	mov	r16,r2
    c41c:	3825883a 	mov	r18,r7
    c420:	003f2706 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c424:	24d0b03a 	or	r8,r4,r19
    c428:	40001b1e 	bne	r8,zero,c498 <__adddf3+0x548>
    c42c:	0005883a 	mov	r2,zero
    c430:	0007883a 	mov	r3,zero
    c434:	0021883a 	mov	r16,zero
    c438:	003f4d06 	br	c170 <__alt_data_end+0xff00c170>
    c43c:	008007c4 	movi	r2,31
    c440:	11003c16 	blt	r2,r4,c534 <__adddf3+0x5e4>
    c444:	00800804 	movi	r2,32
    c448:	1105c83a 	sub	r2,r2,r4
    c44c:	488e983a 	sll	r7,r9,r2
    c450:	310ad83a 	srl	r5,r6,r4
    c454:	3084983a 	sll	r2,r6,r2
    c458:	4912d83a 	srl	r9,r9,r4
    c45c:	394ab03a 	or	r5,r7,r5
    c460:	1004c03a 	cmpne	r2,r2,zero
    c464:	288ab03a 	or	r5,r5,r2
    c468:	003f5306 	br	c1b8 <__alt_data_end+0xff00c1b8>
    c46c:	4448b03a 	or	r4,r8,r17
    c470:	20003e26 	beq	r4,zero,c56c <__adddf3+0x61c>
    c474:	00c6303a 	nor	r3,zero,r3
    c478:	18003a1e 	bne	r3,zero,c564 <__adddf3+0x614>
    c47c:	3463c83a 	sub	r17,r6,r17
    c480:	4a07c83a 	sub	r3,r9,r8
    c484:	344d803a 	cmpltu	r6,r6,r17
    c488:	1991c83a 	sub	r8,r3,r6
    c48c:	1021883a 	mov	r16,r2
    c490:	3825883a 	mov	r18,r7
    c494:	003f0a06 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c498:	2023883a 	mov	r17,r4
    c49c:	003f0d06 	br	c0d4 <__alt_data_end+0xff00c0d4>
    c4a0:	0081ffc4 	movi	r2,2047
    c4a4:	80bf3f1e 	bne	r16,r2,c1a4 <__alt_data_end+0xff00c1a4>
    c4a8:	003ec806 	br	bfcc <__alt_data_end+0xff00bfcc>
    c4ac:	0005883a 	mov	r2,zero
    c4b0:	003fb106 	br	c378 <__alt_data_end+0xff00c378>
    c4b4:	0007883a 	mov	r3,zero
    c4b8:	003fbc06 	br	c3ac <__alt_data_end+0xff00c3ac>
    c4bc:	4444b03a 	or	r2,r8,r17
    c4c0:	8000871e 	bne	r16,zero,c6e0 <__adddf3+0x790>
    c4c4:	1000ba26 	beq	r2,zero,c7b0 <__adddf3+0x860>
    c4c8:	4984b03a 	or	r2,r9,r6
    c4cc:	103ebf26 	beq	r2,zero,bfcc <__alt_data_end+0xff00bfcc>
    c4d0:	8985883a 	add	r2,r17,r6
    c4d4:	4247883a 	add	r3,r8,r9
    c4d8:	1451803a 	cmpltu	r8,r2,r17
    c4dc:	40d1883a 	add	r8,r8,r3
    c4e0:	40c0202c 	andhi	r3,r8,128
    c4e4:	1023883a 	mov	r17,r2
    c4e8:	183f1a26 	beq	r3,zero,c154 <__alt_data_end+0xff00c154>
    c4ec:	00bfe034 	movhi	r2,65408
    c4f0:	10bfffc4 	addi	r2,r2,-1
    c4f4:	2021883a 	mov	r16,r4
    c4f8:	4090703a 	and	r8,r8,r2
    c4fc:	003eb306 	br	bfcc <__alt_data_end+0xff00bfcc>
    c500:	4444b03a 	or	r2,r8,r17
    c504:	8000291e 	bne	r16,zero,c5ac <__adddf3+0x65c>
    c508:	10004b1e 	bne	r2,zero,c638 <__adddf3+0x6e8>
    c50c:	4990b03a 	or	r8,r9,r6
    c510:	40008b26 	beq	r8,zero,c740 <__adddf3+0x7f0>
    c514:	4811883a 	mov	r8,r9
    c518:	3023883a 	mov	r17,r6
    c51c:	3825883a 	mov	r18,r7
    c520:	003eaa06 	br	bfcc <__alt_data_end+0xff00bfcc>
    c524:	1021883a 	mov	r16,r2
    c528:	0011883a 	mov	r8,zero
    c52c:	0005883a 	mov	r2,zero
    c530:	003f0f06 	br	c170 <__alt_data_end+0xff00c170>
    c534:	217ff804 	addi	r5,r4,-32
    c538:	00800804 	movi	r2,32
    c53c:	494ad83a 	srl	r5,r9,r5
    c540:	20807d26 	beq	r4,r2,c738 <__adddf3+0x7e8>
    c544:	00801004 	movi	r2,64
    c548:	1109c83a 	sub	r4,r2,r4
    c54c:	4912983a 	sll	r9,r9,r4
    c550:	498cb03a 	or	r6,r9,r6
    c554:	300cc03a 	cmpne	r6,r6,zero
    c558:	298ab03a 	or	r5,r5,r6
    c55c:	0013883a 	mov	r9,zero
    c560:	003f1506 	br	c1b8 <__alt_data_end+0xff00c1b8>
    c564:	0101ffc4 	movi	r4,2047
    c568:	113f9a1e 	bne	r2,r4,c3d4 <__alt_data_end+0xff00c3d4>
    c56c:	4811883a 	mov	r8,r9
    c570:	3023883a 	mov	r17,r6
    c574:	1021883a 	mov	r16,r2
    c578:	3825883a 	mov	r18,r7
    c57c:	003e9306 	br	bfcc <__alt_data_end+0xff00bfcc>
    c580:	8000161e 	bne	r16,zero,c5dc <__adddf3+0x68c>
    c584:	444ab03a 	or	r5,r8,r17
    c588:	28005126 	beq	r5,zero,c6d0 <__adddf3+0x780>
    c58c:	0108303a 	nor	r4,zero,r4
    c590:	20004d1e 	bne	r4,zero,c6c8 <__adddf3+0x778>
    c594:	89a3883a 	add	r17,r17,r6
    c598:	4253883a 	add	r9,r8,r9
    c59c:	898d803a 	cmpltu	r6,r17,r6
    c5a0:	3251883a 	add	r8,r6,r9
    c5a4:	1021883a 	mov	r16,r2
    c5a8:	003f0806 	br	c1cc <__alt_data_end+0xff00c1cc>
    c5ac:	1000301e 	bne	r2,zero,c670 <__adddf3+0x720>
    c5b0:	4984b03a 	or	r2,r9,r6
    c5b4:	10007126 	beq	r2,zero,c77c <__adddf3+0x82c>
    c5b8:	4811883a 	mov	r8,r9
    c5bc:	3023883a 	mov	r17,r6
    c5c0:	3825883a 	mov	r18,r7
    c5c4:	0401ffc4 	movi	r16,2047
    c5c8:	003e8006 	br	bfcc <__alt_data_end+0xff00bfcc>
    c5cc:	4462b03a 	or	r17,r8,r17
    c5d0:	8822c03a 	cmpne	r17,r17,zero
    c5d4:	0007883a 	mov	r3,zero
    c5d8:	003f8b06 	br	c408 <__alt_data_end+0xff00c408>
    c5dc:	0141ffc4 	movi	r5,2047
    c5e0:	11403b26 	beq	r2,r5,c6d0 <__adddf3+0x780>
    c5e4:	0109c83a 	sub	r4,zero,r4
    c5e8:	42002034 	orhi	r8,r8,128
    c5ec:	01400e04 	movi	r5,56
    c5f0:	29006716 	blt	r5,r4,c790 <__adddf3+0x840>
    c5f4:	014007c4 	movi	r5,31
    c5f8:	29007016 	blt	r5,r4,c7bc <__adddf3+0x86c>
    c5fc:	01400804 	movi	r5,32
    c600:	290bc83a 	sub	r5,r5,r4
    c604:	4154983a 	sll	r10,r8,r5
    c608:	890ed83a 	srl	r7,r17,r4
    c60c:	894a983a 	sll	r5,r17,r5
    c610:	4108d83a 	srl	r4,r8,r4
    c614:	51e2b03a 	or	r17,r10,r7
    c618:	280ac03a 	cmpne	r5,r5,zero
    c61c:	8962b03a 	or	r17,r17,r5
    c620:	89a3883a 	add	r17,r17,r6
    c624:	2253883a 	add	r9,r4,r9
    c628:	898d803a 	cmpltu	r6,r17,r6
    c62c:	3251883a 	add	r8,r6,r9
    c630:	1021883a 	mov	r16,r2
    c634:	003ee506 	br	c1cc <__alt_data_end+0xff00c1cc>
    c638:	4984b03a 	or	r2,r9,r6
    c63c:	103e6326 	beq	r2,zero,bfcc <__alt_data_end+0xff00bfcc>
    c640:	8987c83a 	sub	r3,r17,r6
    c644:	88c9803a 	cmpltu	r4,r17,r3
    c648:	4245c83a 	sub	r2,r8,r9
    c64c:	1105c83a 	sub	r2,r2,r4
    c650:	1100202c 	andhi	r4,r2,128
    c654:	203ebb26 	beq	r4,zero,c144 <__alt_data_end+0xff00c144>
    c658:	3463c83a 	sub	r17,r6,r17
    c65c:	4a07c83a 	sub	r3,r9,r8
    c660:	344d803a 	cmpltu	r6,r6,r17
    c664:	1991c83a 	sub	r8,r3,r6
    c668:	3825883a 	mov	r18,r7
    c66c:	003e5706 	br	bfcc <__alt_data_end+0xff00bfcc>
    c670:	4984b03a 	or	r2,r9,r6
    c674:	10002e26 	beq	r2,zero,c730 <__adddf3+0x7e0>
    c678:	4004d0fa 	srli	r2,r8,3
    c67c:	8822d0fa 	srli	r17,r17,3
    c680:	4010977a 	slli	r8,r8,29
    c684:	10c0022c 	andhi	r3,r2,8
    c688:	4462b03a 	or	r17,r8,r17
    c68c:	18000826 	beq	r3,zero,c6b0 <__adddf3+0x760>
    c690:	4808d0fa 	srli	r4,r9,3
    c694:	20c0022c 	andhi	r3,r4,8
    c698:	1800051e 	bne	r3,zero,c6b0 <__adddf3+0x760>
    c69c:	300cd0fa 	srli	r6,r6,3
    c6a0:	4806977a 	slli	r3,r9,29
    c6a4:	2005883a 	mov	r2,r4
    c6a8:	3825883a 	mov	r18,r7
    c6ac:	19a2b03a 	or	r17,r3,r6
    c6b0:	8810d77a 	srli	r8,r17,29
    c6b4:	100490fa 	slli	r2,r2,3
    c6b8:	882290fa 	slli	r17,r17,3
    c6bc:	0401ffc4 	movi	r16,2047
    c6c0:	4090b03a 	or	r8,r8,r2
    c6c4:	003e4106 	br	bfcc <__alt_data_end+0xff00bfcc>
    c6c8:	0141ffc4 	movi	r5,2047
    c6cc:	117fc71e 	bne	r2,r5,c5ec <__alt_data_end+0xff00c5ec>
    c6d0:	4811883a 	mov	r8,r9
    c6d4:	3023883a 	mov	r17,r6
    c6d8:	1021883a 	mov	r16,r2
    c6dc:	003e3b06 	br	bfcc <__alt_data_end+0xff00bfcc>
    c6e0:	10002f26 	beq	r2,zero,c7a0 <__adddf3+0x850>
    c6e4:	4984b03a 	or	r2,r9,r6
    c6e8:	10001126 	beq	r2,zero,c730 <__adddf3+0x7e0>
    c6ec:	4004d0fa 	srli	r2,r8,3
    c6f0:	8822d0fa 	srli	r17,r17,3
    c6f4:	4010977a 	slli	r8,r8,29
    c6f8:	10c0022c 	andhi	r3,r2,8
    c6fc:	4462b03a 	or	r17,r8,r17
    c700:	183feb26 	beq	r3,zero,c6b0 <__alt_data_end+0xff00c6b0>
    c704:	4808d0fa 	srli	r4,r9,3
    c708:	20c0022c 	andhi	r3,r4,8
    c70c:	183fe81e 	bne	r3,zero,c6b0 <__alt_data_end+0xff00c6b0>
    c710:	300cd0fa 	srli	r6,r6,3
    c714:	4806977a 	slli	r3,r9,29
    c718:	2005883a 	mov	r2,r4
    c71c:	19a2b03a 	or	r17,r3,r6
    c720:	003fe306 	br	c6b0 <__alt_data_end+0xff00c6b0>
    c724:	0011883a 	mov	r8,zero
    c728:	0005883a 	mov	r2,zero
    c72c:	003e3f06 	br	c02c <__alt_data_end+0xff00c02c>
    c730:	0401ffc4 	movi	r16,2047
    c734:	003e2506 	br	bfcc <__alt_data_end+0xff00bfcc>
    c738:	0013883a 	mov	r9,zero
    c73c:	003f8406 	br	c550 <__alt_data_end+0xff00c550>
    c740:	0005883a 	mov	r2,zero
    c744:	0007883a 	mov	r3,zero
    c748:	003e8906 	br	c170 <__alt_data_end+0xff00c170>
    c74c:	197ff804 	addi	r5,r3,-32
    c750:	01000804 	movi	r4,32
    c754:	414ad83a 	srl	r5,r8,r5
    c758:	19002426 	beq	r3,r4,c7ec <__adddf3+0x89c>
    c75c:	01001004 	movi	r4,64
    c760:	20c7c83a 	sub	r3,r4,r3
    c764:	40c6983a 	sll	r3,r8,r3
    c768:	1c46b03a 	or	r3,r3,r17
    c76c:	1806c03a 	cmpne	r3,r3,zero
    c770:	28e2b03a 	or	r17,r5,r3
    c774:	0007883a 	mov	r3,zero
    c778:	003f2306 	br	c408 <__alt_data_end+0xff00c408>
    c77c:	0007883a 	mov	r3,zero
    c780:	5811883a 	mov	r8,r11
    c784:	00bfffc4 	movi	r2,-1
    c788:	0401ffc4 	movi	r16,2047
    c78c:	003e7806 	br	c170 <__alt_data_end+0xff00c170>
    c790:	4462b03a 	or	r17,r8,r17
    c794:	8822c03a 	cmpne	r17,r17,zero
    c798:	0009883a 	mov	r4,zero
    c79c:	003fa006 	br	c620 <__alt_data_end+0xff00c620>
    c7a0:	4811883a 	mov	r8,r9
    c7a4:	3023883a 	mov	r17,r6
    c7a8:	0401ffc4 	movi	r16,2047
    c7ac:	003e0706 	br	bfcc <__alt_data_end+0xff00bfcc>
    c7b0:	4811883a 	mov	r8,r9
    c7b4:	3023883a 	mov	r17,r6
    c7b8:	003e0406 	br	bfcc <__alt_data_end+0xff00bfcc>
    c7bc:	21fff804 	addi	r7,r4,-32
    c7c0:	01400804 	movi	r5,32
    c7c4:	41ced83a 	srl	r7,r8,r7
    c7c8:	21400a26 	beq	r4,r5,c7f4 <__adddf3+0x8a4>
    c7cc:	01401004 	movi	r5,64
    c7d0:	2909c83a 	sub	r4,r5,r4
    c7d4:	4108983a 	sll	r4,r8,r4
    c7d8:	2448b03a 	or	r4,r4,r17
    c7dc:	2008c03a 	cmpne	r4,r4,zero
    c7e0:	3922b03a 	or	r17,r7,r4
    c7e4:	0009883a 	mov	r4,zero
    c7e8:	003f8d06 	br	c620 <__alt_data_end+0xff00c620>
    c7ec:	0007883a 	mov	r3,zero
    c7f0:	003fdd06 	br	c768 <__alt_data_end+0xff00c768>
    c7f4:	0009883a 	mov	r4,zero
    c7f8:	003ff706 	br	c7d8 <__alt_data_end+0xff00c7d8>

0000c7fc <__divdf3>:
    c7fc:	defff204 	addi	sp,sp,-56
    c800:	dd400915 	stw	r21,36(sp)
    c804:	282ad53a 	srli	r21,r5,20
    c808:	dd000815 	stw	r20,32(sp)
    c80c:	2828d7fa 	srli	r20,r5,31
    c810:	dc000415 	stw	r16,16(sp)
    c814:	04000434 	movhi	r16,16
    c818:	df000c15 	stw	fp,48(sp)
    c81c:	843fffc4 	addi	r16,r16,-1
    c820:	dfc00d15 	stw	ra,52(sp)
    c824:	ddc00b15 	stw	r23,44(sp)
    c828:	dd800a15 	stw	r22,40(sp)
    c82c:	dcc00715 	stw	r19,28(sp)
    c830:	dc800615 	stw	r18,24(sp)
    c834:	dc400515 	stw	r17,20(sp)
    c838:	ad41ffcc 	andi	r21,r21,2047
    c83c:	2c20703a 	and	r16,r5,r16
    c840:	a7003fcc 	andi	fp,r20,255
    c844:	a8006126 	beq	r21,zero,c9cc <__divdf3+0x1d0>
    c848:	0081ffc4 	movi	r2,2047
    c84c:	2025883a 	mov	r18,r4
    c850:	a8803726 	beq	r21,r2,c930 <__divdf3+0x134>
    c854:	80800434 	orhi	r2,r16,16
    c858:	100490fa 	slli	r2,r2,3
    c85c:	2020d77a 	srli	r16,r4,29
    c860:	202490fa 	slli	r18,r4,3
    c864:	ad7f0044 	addi	r21,r21,-1023
    c868:	80a0b03a 	or	r16,r16,r2
    c86c:	0027883a 	mov	r19,zero
    c870:	0013883a 	mov	r9,zero
    c874:	3804d53a 	srli	r2,r7,20
    c878:	382cd7fa 	srli	r22,r7,31
    c87c:	04400434 	movhi	r17,16
    c880:	8c7fffc4 	addi	r17,r17,-1
    c884:	1081ffcc 	andi	r2,r2,2047
    c888:	3011883a 	mov	r8,r6
    c88c:	3c62703a 	and	r17,r7,r17
    c890:	b5c03fcc 	andi	r23,r22,255
    c894:	10006c26 	beq	r2,zero,ca48 <__divdf3+0x24c>
    c898:	00c1ffc4 	movi	r3,2047
    c89c:	10c06426 	beq	r2,r3,ca30 <__divdf3+0x234>
    c8a0:	88c00434 	orhi	r3,r17,16
    c8a4:	180690fa 	slli	r3,r3,3
    c8a8:	3022d77a 	srli	r17,r6,29
    c8ac:	301090fa 	slli	r8,r6,3
    c8b0:	10bf0044 	addi	r2,r2,-1023
    c8b4:	88e2b03a 	or	r17,r17,r3
    c8b8:	000f883a 	mov	r7,zero
    c8bc:	a58cf03a 	xor	r6,r20,r22
    c8c0:	3cc8b03a 	or	r4,r7,r19
    c8c4:	a8abc83a 	sub	r21,r21,r2
    c8c8:	008003c4 	movi	r2,15
    c8cc:	3007883a 	mov	r3,r6
    c8d0:	34c03fcc 	andi	r19,r6,255
    c8d4:	11009036 	bltu	r2,r4,cb18 <__divdf3+0x31c>
    c8d8:	200890ba 	slli	r4,r4,2
    c8dc:	00800074 	movhi	r2,1
    c8e0:	10b23c04 	addi	r2,r2,-14096
    c8e4:	2089883a 	add	r4,r4,r2
    c8e8:	20800017 	ldw	r2,0(r4)
    c8ec:	1000683a 	jmp	r2
    c8f0:	0000cb18 	cmpnei	zero,zero,812
    c8f4:	0000c968 	cmpgeui	zero,zero,805
    c8f8:	0000cb08 	cmpgei	zero,zero,812
    c8fc:	0000c95c 	xori	zero,zero,805
    c900:	0000cb08 	cmpgei	zero,zero,812
    c904:	0000cadc 	xori	zero,zero,811
    c908:	0000cb08 	cmpgei	zero,zero,812
    c90c:	0000c95c 	xori	zero,zero,805
    c910:	0000c968 	cmpgeui	zero,zero,805
    c914:	0000c968 	cmpgeui	zero,zero,805
    c918:	0000cadc 	xori	zero,zero,811
    c91c:	0000c95c 	xori	zero,zero,805
    c920:	0000c94c 	andi	zero,zero,805
    c924:	0000c94c 	andi	zero,zero,805
    c928:	0000c94c 	andi	zero,zero,805
    c92c:	0000cdfc 	xorhi	zero,zero,823
    c930:	2404b03a 	or	r2,r4,r16
    c934:	1000661e 	bne	r2,zero,cad0 <__divdf3+0x2d4>
    c938:	04c00204 	movi	r19,8
    c93c:	0021883a 	mov	r16,zero
    c940:	0025883a 	mov	r18,zero
    c944:	02400084 	movi	r9,2
    c948:	003fca06 	br	c874 <__alt_data_end+0xff00c874>
    c94c:	8023883a 	mov	r17,r16
    c950:	9011883a 	mov	r8,r18
    c954:	e02f883a 	mov	r23,fp
    c958:	480f883a 	mov	r7,r9
    c95c:	00800084 	movi	r2,2
    c960:	3881311e 	bne	r7,r2,ce28 <__divdf3+0x62c>
    c964:	b827883a 	mov	r19,r23
    c968:	98c0004c 	andi	r3,r19,1
    c96c:	0081ffc4 	movi	r2,2047
    c970:	000b883a 	mov	r5,zero
    c974:	0025883a 	mov	r18,zero
    c978:	1004953a 	slli	r2,r2,20
    c97c:	18c03fcc 	andi	r3,r3,255
    c980:	04400434 	movhi	r17,16
    c984:	8c7fffc4 	addi	r17,r17,-1
    c988:	180697fa 	slli	r3,r3,31
    c98c:	2c4a703a 	and	r5,r5,r17
    c990:	288ab03a 	or	r5,r5,r2
    c994:	28c6b03a 	or	r3,r5,r3
    c998:	9005883a 	mov	r2,r18
    c99c:	dfc00d17 	ldw	ra,52(sp)
    c9a0:	df000c17 	ldw	fp,48(sp)
    c9a4:	ddc00b17 	ldw	r23,44(sp)
    c9a8:	dd800a17 	ldw	r22,40(sp)
    c9ac:	dd400917 	ldw	r21,36(sp)
    c9b0:	dd000817 	ldw	r20,32(sp)
    c9b4:	dcc00717 	ldw	r19,28(sp)
    c9b8:	dc800617 	ldw	r18,24(sp)
    c9bc:	dc400517 	ldw	r17,20(sp)
    c9c0:	dc000417 	ldw	r16,16(sp)
    c9c4:	dec00e04 	addi	sp,sp,56
    c9c8:	f800283a 	ret
    c9cc:	2404b03a 	or	r2,r4,r16
    c9d0:	2027883a 	mov	r19,r4
    c9d4:	10003926 	beq	r2,zero,cabc <__divdf3+0x2c0>
    c9d8:	80012e26 	beq	r16,zero,ce94 <__divdf3+0x698>
    c9dc:	8009883a 	mov	r4,r16
    c9e0:	d9800315 	stw	r6,12(sp)
    c9e4:	d9c00215 	stw	r7,8(sp)
    c9e8:	000e5540 	call	e554 <__clzsi2>
    c9ec:	d9800317 	ldw	r6,12(sp)
    c9f0:	d9c00217 	ldw	r7,8(sp)
    c9f4:	113ffd44 	addi	r4,r2,-11
    c9f8:	00c00704 	movi	r3,28
    c9fc:	19012116 	blt	r3,r4,ce84 <__divdf3+0x688>
    ca00:	00c00744 	movi	r3,29
    ca04:	147ffe04 	addi	r17,r2,-8
    ca08:	1907c83a 	sub	r3,r3,r4
    ca0c:	8460983a 	sll	r16,r16,r17
    ca10:	98c6d83a 	srl	r3,r19,r3
    ca14:	9c64983a 	sll	r18,r19,r17
    ca18:	1c20b03a 	or	r16,r3,r16
    ca1c:	1080fcc4 	addi	r2,r2,1011
    ca20:	00abc83a 	sub	r21,zero,r2
    ca24:	0027883a 	mov	r19,zero
    ca28:	0013883a 	mov	r9,zero
    ca2c:	003f9106 	br	c874 <__alt_data_end+0xff00c874>
    ca30:	3446b03a 	or	r3,r6,r17
    ca34:	18001f1e 	bne	r3,zero,cab4 <__divdf3+0x2b8>
    ca38:	0023883a 	mov	r17,zero
    ca3c:	0011883a 	mov	r8,zero
    ca40:	01c00084 	movi	r7,2
    ca44:	003f9d06 	br	c8bc <__alt_data_end+0xff00c8bc>
    ca48:	3446b03a 	or	r3,r6,r17
    ca4c:	18001526 	beq	r3,zero,caa4 <__divdf3+0x2a8>
    ca50:	88011b26 	beq	r17,zero,cec0 <__divdf3+0x6c4>
    ca54:	8809883a 	mov	r4,r17
    ca58:	d9800315 	stw	r6,12(sp)
    ca5c:	da400115 	stw	r9,4(sp)
    ca60:	000e5540 	call	e554 <__clzsi2>
    ca64:	d9800317 	ldw	r6,12(sp)
    ca68:	da400117 	ldw	r9,4(sp)
    ca6c:	113ffd44 	addi	r4,r2,-11
    ca70:	00c00704 	movi	r3,28
    ca74:	19010e16 	blt	r3,r4,ceb0 <__divdf3+0x6b4>
    ca78:	00c00744 	movi	r3,29
    ca7c:	123ffe04 	addi	r8,r2,-8
    ca80:	1907c83a 	sub	r3,r3,r4
    ca84:	8a22983a 	sll	r17,r17,r8
    ca88:	30c6d83a 	srl	r3,r6,r3
    ca8c:	3210983a 	sll	r8,r6,r8
    ca90:	1c62b03a 	or	r17,r3,r17
    ca94:	1080fcc4 	addi	r2,r2,1011
    ca98:	0085c83a 	sub	r2,zero,r2
    ca9c:	000f883a 	mov	r7,zero
    caa0:	003f8606 	br	c8bc <__alt_data_end+0xff00c8bc>
    caa4:	0023883a 	mov	r17,zero
    caa8:	0011883a 	mov	r8,zero
    caac:	01c00044 	movi	r7,1
    cab0:	003f8206 	br	c8bc <__alt_data_end+0xff00c8bc>
    cab4:	01c000c4 	movi	r7,3
    cab8:	003f8006 	br	c8bc <__alt_data_end+0xff00c8bc>
    cabc:	04c00104 	movi	r19,4
    cac0:	0021883a 	mov	r16,zero
    cac4:	0025883a 	mov	r18,zero
    cac8:	02400044 	movi	r9,1
    cacc:	003f6906 	br	c874 <__alt_data_end+0xff00c874>
    cad0:	04c00304 	movi	r19,12
    cad4:	024000c4 	movi	r9,3
    cad8:	003f6606 	br	c874 <__alt_data_end+0xff00c874>
    cadc:	01400434 	movhi	r5,16
    cae0:	0007883a 	mov	r3,zero
    cae4:	297fffc4 	addi	r5,r5,-1
    cae8:	04bfffc4 	movi	r18,-1
    caec:	0081ffc4 	movi	r2,2047
    caf0:	003fa106 	br	c978 <__alt_data_end+0xff00c978>
    caf4:	00c00044 	movi	r3,1
    caf8:	1887c83a 	sub	r3,r3,r2
    cafc:	01000e04 	movi	r4,56
    cb00:	20c1210e 	bge	r4,r3,cf88 <__divdf3+0x78c>
    cb04:	98c0004c 	andi	r3,r19,1
    cb08:	0005883a 	mov	r2,zero
    cb0c:	000b883a 	mov	r5,zero
    cb10:	0025883a 	mov	r18,zero
    cb14:	003f9806 	br	c978 <__alt_data_end+0xff00c978>
    cb18:	8c00fd36 	bltu	r17,r16,cf10 <__divdf3+0x714>
    cb1c:	8440fb26 	beq	r16,r17,cf0c <__divdf3+0x710>
    cb20:	8007883a 	mov	r3,r16
    cb24:	ad7fffc4 	addi	r21,r21,-1
    cb28:	0021883a 	mov	r16,zero
    cb2c:	4004d63a 	srli	r2,r8,24
    cb30:	8822923a 	slli	r17,r17,8
    cb34:	1809883a 	mov	r4,r3
    cb38:	402c923a 	slli	r22,r8,8
    cb3c:	88b8b03a 	or	fp,r17,r2
    cb40:	e028d43a 	srli	r20,fp,16
    cb44:	d8c00015 	stw	r3,0(sp)
    cb48:	e5ffffcc 	andi	r23,fp,65535
    cb4c:	a00b883a 	mov	r5,r20
    cb50:	0001d680 	call	1d68 <__udivsi3>
    cb54:	d8c00017 	ldw	r3,0(sp)
    cb58:	a00b883a 	mov	r5,r20
    cb5c:	d8800315 	stw	r2,12(sp)
    cb60:	1809883a 	mov	r4,r3
    cb64:	0001dcc0 	call	1dcc <__umodsi3>
    cb68:	d9800317 	ldw	r6,12(sp)
    cb6c:	1006943a 	slli	r3,r2,16
    cb70:	9004d43a 	srli	r2,r18,16
    cb74:	b9a3383a 	mul	r17,r23,r6
    cb78:	10c4b03a 	or	r2,r2,r3
    cb7c:	1440062e 	bgeu	r2,r17,cb98 <__divdf3+0x39c>
    cb80:	1705883a 	add	r2,r2,fp
    cb84:	30ffffc4 	addi	r3,r6,-1
    cb88:	1700ee36 	bltu	r2,fp,cf44 <__divdf3+0x748>
    cb8c:	1440ed2e 	bgeu	r2,r17,cf44 <__divdf3+0x748>
    cb90:	31bfff84 	addi	r6,r6,-2
    cb94:	1705883a 	add	r2,r2,fp
    cb98:	1463c83a 	sub	r17,r2,r17
    cb9c:	a00b883a 	mov	r5,r20
    cba0:	8809883a 	mov	r4,r17
    cba4:	d9800315 	stw	r6,12(sp)
    cba8:	0001d680 	call	1d68 <__udivsi3>
    cbac:	a00b883a 	mov	r5,r20
    cbb0:	8809883a 	mov	r4,r17
    cbb4:	d8800215 	stw	r2,8(sp)
    cbb8:	0001dcc0 	call	1dcc <__umodsi3>
    cbbc:	d9c00217 	ldw	r7,8(sp)
    cbc0:	1004943a 	slli	r2,r2,16
    cbc4:	94bfffcc 	andi	r18,r18,65535
    cbc8:	b9d1383a 	mul	r8,r23,r7
    cbcc:	90a4b03a 	or	r18,r18,r2
    cbd0:	d9800317 	ldw	r6,12(sp)
    cbd4:	9200062e 	bgeu	r18,r8,cbf0 <__divdf3+0x3f4>
    cbd8:	9725883a 	add	r18,r18,fp
    cbdc:	38bfffc4 	addi	r2,r7,-1
    cbe0:	9700d636 	bltu	r18,fp,cf3c <__divdf3+0x740>
    cbe4:	9200d52e 	bgeu	r18,r8,cf3c <__divdf3+0x740>
    cbe8:	39ffff84 	addi	r7,r7,-2
    cbec:	9725883a 	add	r18,r18,fp
    cbf0:	3004943a 	slli	r2,r6,16
    cbf4:	b012d43a 	srli	r9,r22,16
    cbf8:	b1bfffcc 	andi	r6,r22,65535
    cbfc:	11e2b03a 	or	r17,r2,r7
    cc00:	8806d43a 	srli	r3,r17,16
    cc04:	893fffcc 	andi	r4,r17,65535
    cc08:	218b383a 	mul	r5,r4,r6
    cc0c:	30c5383a 	mul	r2,r6,r3
    cc10:	2249383a 	mul	r4,r4,r9
    cc14:	280ed43a 	srli	r7,r5,16
    cc18:	9225c83a 	sub	r18,r18,r8
    cc1c:	2089883a 	add	r4,r4,r2
    cc20:	3909883a 	add	r4,r7,r4
    cc24:	1a47383a 	mul	r3,r3,r9
    cc28:	2080022e 	bgeu	r4,r2,cc34 <__divdf3+0x438>
    cc2c:	00800074 	movhi	r2,1
    cc30:	1887883a 	add	r3,r3,r2
    cc34:	2004d43a 	srli	r2,r4,16
    cc38:	2008943a 	slli	r4,r4,16
    cc3c:	297fffcc 	andi	r5,r5,65535
    cc40:	10c7883a 	add	r3,r2,r3
    cc44:	2149883a 	add	r4,r4,r5
    cc48:	90c0a536 	bltu	r18,r3,cee0 <__divdf3+0x6e4>
    cc4c:	90c0bf26 	beq	r18,r3,cf4c <__divdf3+0x750>
    cc50:	90c7c83a 	sub	r3,r18,r3
    cc54:	810fc83a 	sub	r7,r16,r4
    cc58:	81e5803a 	cmpltu	r18,r16,r7
    cc5c:	1ca5c83a 	sub	r18,r3,r18
    cc60:	e480c126 	beq	fp,r18,cf68 <__divdf3+0x76c>
    cc64:	a00b883a 	mov	r5,r20
    cc68:	9009883a 	mov	r4,r18
    cc6c:	d9800315 	stw	r6,12(sp)
    cc70:	d9c00215 	stw	r7,8(sp)
    cc74:	da400115 	stw	r9,4(sp)
    cc78:	0001d680 	call	1d68 <__udivsi3>
    cc7c:	a00b883a 	mov	r5,r20
    cc80:	9009883a 	mov	r4,r18
    cc84:	d8800015 	stw	r2,0(sp)
    cc88:	0001dcc0 	call	1dcc <__umodsi3>
    cc8c:	d9c00217 	ldw	r7,8(sp)
    cc90:	da000017 	ldw	r8,0(sp)
    cc94:	1006943a 	slli	r3,r2,16
    cc98:	3804d43a 	srli	r2,r7,16
    cc9c:	ba21383a 	mul	r16,r23,r8
    cca0:	d9800317 	ldw	r6,12(sp)
    cca4:	10c4b03a 	or	r2,r2,r3
    cca8:	da400117 	ldw	r9,4(sp)
    ccac:	1400062e 	bgeu	r2,r16,ccc8 <__divdf3+0x4cc>
    ccb0:	1705883a 	add	r2,r2,fp
    ccb4:	40ffffc4 	addi	r3,r8,-1
    ccb8:	1700ad36 	bltu	r2,fp,cf70 <__divdf3+0x774>
    ccbc:	1400ac2e 	bgeu	r2,r16,cf70 <__divdf3+0x774>
    ccc0:	423fff84 	addi	r8,r8,-2
    ccc4:	1705883a 	add	r2,r2,fp
    ccc8:	1421c83a 	sub	r16,r2,r16
    cccc:	a00b883a 	mov	r5,r20
    ccd0:	8009883a 	mov	r4,r16
    ccd4:	d9800315 	stw	r6,12(sp)
    ccd8:	d9c00215 	stw	r7,8(sp)
    ccdc:	da000015 	stw	r8,0(sp)
    cce0:	da400115 	stw	r9,4(sp)
    cce4:	0001d680 	call	1d68 <__udivsi3>
    cce8:	8009883a 	mov	r4,r16
    ccec:	a00b883a 	mov	r5,r20
    ccf0:	1025883a 	mov	r18,r2
    ccf4:	0001dcc0 	call	1dcc <__umodsi3>
    ccf8:	d9c00217 	ldw	r7,8(sp)
    ccfc:	1004943a 	slli	r2,r2,16
    cd00:	bcaf383a 	mul	r23,r23,r18
    cd04:	393fffcc 	andi	r4,r7,65535
    cd08:	2088b03a 	or	r4,r4,r2
    cd0c:	d9800317 	ldw	r6,12(sp)
    cd10:	da000017 	ldw	r8,0(sp)
    cd14:	da400117 	ldw	r9,4(sp)
    cd18:	25c0062e 	bgeu	r4,r23,cd34 <__divdf3+0x538>
    cd1c:	2709883a 	add	r4,r4,fp
    cd20:	90bfffc4 	addi	r2,r18,-1
    cd24:	27009436 	bltu	r4,fp,cf78 <__divdf3+0x77c>
    cd28:	25c0932e 	bgeu	r4,r23,cf78 <__divdf3+0x77c>
    cd2c:	94bfff84 	addi	r18,r18,-2
    cd30:	2709883a 	add	r4,r4,fp
    cd34:	4004943a 	slli	r2,r8,16
    cd38:	25efc83a 	sub	r23,r4,r23
    cd3c:	1490b03a 	or	r8,r2,r18
    cd40:	4008d43a 	srli	r4,r8,16
    cd44:	40ffffcc 	andi	r3,r8,65535
    cd48:	30c5383a 	mul	r2,r6,r3
    cd4c:	1a47383a 	mul	r3,r3,r9
    cd50:	310d383a 	mul	r6,r6,r4
    cd54:	100ad43a 	srli	r5,r2,16
    cd58:	4913383a 	mul	r9,r9,r4
    cd5c:	1987883a 	add	r3,r3,r6
    cd60:	28c7883a 	add	r3,r5,r3
    cd64:	1980022e 	bgeu	r3,r6,cd70 <__divdf3+0x574>
    cd68:	01000074 	movhi	r4,1
    cd6c:	4913883a 	add	r9,r9,r4
    cd70:	1808d43a 	srli	r4,r3,16
    cd74:	1806943a 	slli	r3,r3,16
    cd78:	10bfffcc 	andi	r2,r2,65535
    cd7c:	2253883a 	add	r9,r4,r9
    cd80:	1887883a 	add	r3,r3,r2
    cd84:	ba403836 	bltu	r23,r9,ce68 <__divdf3+0x66c>
    cd88:	ba403626 	beq	r23,r9,ce64 <__divdf3+0x668>
    cd8c:	42000054 	ori	r8,r8,1
    cd90:	a880ffc4 	addi	r2,r21,1023
    cd94:	00bf570e 	bge	zero,r2,caf4 <__alt_data_end+0xff00caf4>
    cd98:	40c001cc 	andi	r3,r8,7
    cd9c:	18000726 	beq	r3,zero,cdbc <__divdf3+0x5c0>
    cda0:	40c003cc 	andi	r3,r8,15
    cda4:	01000104 	movi	r4,4
    cda8:	19000426 	beq	r3,r4,cdbc <__divdf3+0x5c0>
    cdac:	4107883a 	add	r3,r8,r4
    cdb0:	1a11803a 	cmpltu	r8,r3,r8
    cdb4:	8a23883a 	add	r17,r17,r8
    cdb8:	1811883a 	mov	r8,r3
    cdbc:	88c0402c 	andhi	r3,r17,256
    cdc0:	18000426 	beq	r3,zero,cdd4 <__divdf3+0x5d8>
    cdc4:	00ffc034 	movhi	r3,65280
    cdc8:	18ffffc4 	addi	r3,r3,-1
    cdcc:	a8810004 	addi	r2,r21,1024
    cdd0:	88e2703a 	and	r17,r17,r3
    cdd4:	00c1ff84 	movi	r3,2046
    cdd8:	18bee316 	blt	r3,r2,c968 <__alt_data_end+0xff00c968>
    cddc:	8824977a 	slli	r18,r17,29
    cde0:	4010d0fa 	srli	r8,r8,3
    cde4:	8822927a 	slli	r17,r17,9
    cde8:	1081ffcc 	andi	r2,r2,2047
    cdec:	9224b03a 	or	r18,r18,r8
    cdf0:	880ad33a 	srli	r5,r17,12
    cdf4:	98c0004c 	andi	r3,r19,1
    cdf8:	003edf06 	br	c978 <__alt_data_end+0xff00c978>
    cdfc:	8080022c 	andhi	r2,r16,8
    ce00:	10001226 	beq	r2,zero,ce4c <__divdf3+0x650>
    ce04:	8880022c 	andhi	r2,r17,8
    ce08:	1000101e 	bne	r2,zero,ce4c <__divdf3+0x650>
    ce0c:	00800434 	movhi	r2,16
    ce10:	89400234 	orhi	r5,r17,8
    ce14:	10bfffc4 	addi	r2,r2,-1
    ce18:	b007883a 	mov	r3,r22
    ce1c:	288a703a 	and	r5,r5,r2
    ce20:	4025883a 	mov	r18,r8
    ce24:	003f3106 	br	caec <__alt_data_end+0xff00caec>
    ce28:	008000c4 	movi	r2,3
    ce2c:	3880a626 	beq	r7,r2,d0c8 <__divdf3+0x8cc>
    ce30:	00800044 	movi	r2,1
    ce34:	3880521e 	bne	r7,r2,cf80 <__divdf3+0x784>
    ce38:	b807883a 	mov	r3,r23
    ce3c:	0005883a 	mov	r2,zero
    ce40:	000b883a 	mov	r5,zero
    ce44:	0025883a 	mov	r18,zero
    ce48:	003ecb06 	br	c978 <__alt_data_end+0xff00c978>
    ce4c:	00800434 	movhi	r2,16
    ce50:	81400234 	orhi	r5,r16,8
    ce54:	10bfffc4 	addi	r2,r2,-1
    ce58:	a007883a 	mov	r3,r20
    ce5c:	288a703a 	and	r5,r5,r2
    ce60:	003f2206 	br	caec <__alt_data_end+0xff00caec>
    ce64:	183fca26 	beq	r3,zero,cd90 <__alt_data_end+0xff00cd90>
    ce68:	e5ef883a 	add	r23,fp,r23
    ce6c:	40bfffc4 	addi	r2,r8,-1
    ce70:	bf00392e 	bgeu	r23,fp,cf58 <__divdf3+0x75c>
    ce74:	1011883a 	mov	r8,r2
    ce78:	ba7fc41e 	bne	r23,r9,cd8c <__alt_data_end+0xff00cd8c>
    ce7c:	b0ffc31e 	bne	r22,r3,cd8c <__alt_data_end+0xff00cd8c>
    ce80:	003fc306 	br	cd90 <__alt_data_end+0xff00cd90>
    ce84:	143ff604 	addi	r16,r2,-40
    ce88:	9c20983a 	sll	r16,r19,r16
    ce8c:	0025883a 	mov	r18,zero
    ce90:	003ee206 	br	ca1c <__alt_data_end+0xff00ca1c>
    ce94:	d9800315 	stw	r6,12(sp)
    ce98:	d9c00215 	stw	r7,8(sp)
    ce9c:	000e5540 	call	e554 <__clzsi2>
    cea0:	10800804 	addi	r2,r2,32
    cea4:	d9c00217 	ldw	r7,8(sp)
    cea8:	d9800317 	ldw	r6,12(sp)
    ceac:	003ed106 	br	c9f4 <__alt_data_end+0xff00c9f4>
    ceb0:	147ff604 	addi	r17,r2,-40
    ceb4:	3462983a 	sll	r17,r6,r17
    ceb8:	0011883a 	mov	r8,zero
    cebc:	003ef506 	br	ca94 <__alt_data_end+0xff00ca94>
    cec0:	3009883a 	mov	r4,r6
    cec4:	d9800315 	stw	r6,12(sp)
    cec8:	da400115 	stw	r9,4(sp)
    cecc:	000e5540 	call	e554 <__clzsi2>
    ced0:	10800804 	addi	r2,r2,32
    ced4:	da400117 	ldw	r9,4(sp)
    ced8:	d9800317 	ldw	r6,12(sp)
    cedc:	003ee306 	br	ca6c <__alt_data_end+0xff00ca6c>
    cee0:	85a1883a 	add	r16,r16,r22
    cee4:	8585803a 	cmpltu	r2,r16,r22
    cee8:	1705883a 	add	r2,r2,fp
    ceec:	14a5883a 	add	r18,r2,r18
    cef0:	88bfffc4 	addi	r2,r17,-1
    cef4:	e4800c2e 	bgeu	fp,r18,cf28 <__divdf3+0x72c>
    cef8:	90c03e36 	bltu	r18,r3,cff4 <__divdf3+0x7f8>
    cefc:	1c806926 	beq	r3,r18,d0a4 <__divdf3+0x8a8>
    cf00:	90c7c83a 	sub	r3,r18,r3
    cf04:	1023883a 	mov	r17,r2
    cf08:	003f5206 	br	cc54 <__alt_data_end+0xff00cc54>
    cf0c:	923f0436 	bltu	r18,r8,cb20 <__alt_data_end+0xff00cb20>
    cf10:	800897fa 	slli	r4,r16,31
    cf14:	9004d07a 	srli	r2,r18,1
    cf18:	8006d07a 	srli	r3,r16,1
    cf1c:	902097fa 	slli	r16,r18,31
    cf20:	20a4b03a 	or	r18,r4,r2
    cf24:	003f0106 	br	cb2c <__alt_data_end+0xff00cb2c>
    cf28:	e4bff51e 	bne	fp,r18,cf00 <__alt_data_end+0xff00cf00>
    cf2c:	85bff22e 	bgeu	r16,r22,cef8 <__alt_data_end+0xff00cef8>
    cf30:	e0c7c83a 	sub	r3,fp,r3
    cf34:	1023883a 	mov	r17,r2
    cf38:	003f4606 	br	cc54 <__alt_data_end+0xff00cc54>
    cf3c:	100f883a 	mov	r7,r2
    cf40:	003f2b06 	br	cbf0 <__alt_data_end+0xff00cbf0>
    cf44:	180d883a 	mov	r6,r3
    cf48:	003f1306 	br	cb98 <__alt_data_end+0xff00cb98>
    cf4c:	813fe436 	bltu	r16,r4,cee0 <__alt_data_end+0xff00cee0>
    cf50:	0007883a 	mov	r3,zero
    cf54:	003f3f06 	br	cc54 <__alt_data_end+0xff00cc54>
    cf58:	ba402c36 	bltu	r23,r9,d00c <__divdf3+0x810>
    cf5c:	4dc05426 	beq	r9,r23,d0b0 <__divdf3+0x8b4>
    cf60:	1011883a 	mov	r8,r2
    cf64:	003f8906 	br	cd8c <__alt_data_end+0xff00cd8c>
    cf68:	023fffc4 	movi	r8,-1
    cf6c:	003f8806 	br	cd90 <__alt_data_end+0xff00cd90>
    cf70:	1811883a 	mov	r8,r3
    cf74:	003f5406 	br	ccc8 <__alt_data_end+0xff00ccc8>
    cf78:	1025883a 	mov	r18,r2
    cf7c:	003f6d06 	br	cd34 <__alt_data_end+0xff00cd34>
    cf80:	b827883a 	mov	r19,r23
    cf84:	003f8206 	br	cd90 <__alt_data_end+0xff00cd90>
    cf88:	010007c4 	movi	r4,31
    cf8c:	20c02616 	blt	r4,r3,d028 <__divdf3+0x82c>
    cf90:	00800804 	movi	r2,32
    cf94:	10c5c83a 	sub	r2,r2,r3
    cf98:	888a983a 	sll	r5,r17,r2
    cf9c:	40c8d83a 	srl	r4,r8,r3
    cfa0:	4084983a 	sll	r2,r8,r2
    cfa4:	88e2d83a 	srl	r17,r17,r3
    cfa8:	2906b03a 	or	r3,r5,r4
    cfac:	1004c03a 	cmpne	r2,r2,zero
    cfb0:	1886b03a 	or	r3,r3,r2
    cfb4:	188001cc 	andi	r2,r3,7
    cfb8:	10000726 	beq	r2,zero,cfd8 <__divdf3+0x7dc>
    cfbc:	188003cc 	andi	r2,r3,15
    cfc0:	01000104 	movi	r4,4
    cfc4:	11000426 	beq	r2,r4,cfd8 <__divdf3+0x7dc>
    cfc8:	1805883a 	mov	r2,r3
    cfcc:	10c00104 	addi	r3,r2,4
    cfd0:	1885803a 	cmpltu	r2,r3,r2
    cfd4:	88a3883a 	add	r17,r17,r2
    cfd8:	8880202c 	andhi	r2,r17,128
    cfdc:	10002726 	beq	r2,zero,d07c <__divdf3+0x880>
    cfe0:	98c0004c 	andi	r3,r19,1
    cfe4:	00800044 	movi	r2,1
    cfe8:	000b883a 	mov	r5,zero
    cfec:	0025883a 	mov	r18,zero
    cff0:	003e6106 	br	c978 <__alt_data_end+0xff00c978>
    cff4:	85a1883a 	add	r16,r16,r22
    cff8:	8585803a 	cmpltu	r2,r16,r22
    cffc:	1705883a 	add	r2,r2,fp
    d000:	14a5883a 	add	r18,r2,r18
    d004:	8c7fff84 	addi	r17,r17,-2
    d008:	003f1106 	br	cc50 <__alt_data_end+0xff00cc50>
    d00c:	b589883a 	add	r4,r22,r22
    d010:	25ad803a 	cmpltu	r22,r4,r22
    d014:	b739883a 	add	fp,r22,fp
    d018:	40bfff84 	addi	r2,r8,-2
    d01c:	bf2f883a 	add	r23,r23,fp
    d020:	202d883a 	mov	r22,r4
    d024:	003f9306 	br	ce74 <__alt_data_end+0xff00ce74>
    d028:	013ff844 	movi	r4,-31
    d02c:	2085c83a 	sub	r2,r4,r2
    d030:	8888d83a 	srl	r4,r17,r2
    d034:	00800804 	movi	r2,32
    d038:	18802126 	beq	r3,r2,d0c0 <__divdf3+0x8c4>
    d03c:	00801004 	movi	r2,64
    d040:	10c5c83a 	sub	r2,r2,r3
    d044:	8884983a 	sll	r2,r17,r2
    d048:	1204b03a 	or	r2,r2,r8
    d04c:	1004c03a 	cmpne	r2,r2,zero
    d050:	2084b03a 	or	r2,r4,r2
    d054:	144001cc 	andi	r17,r2,7
    d058:	88000d1e 	bne	r17,zero,d090 <__divdf3+0x894>
    d05c:	000b883a 	mov	r5,zero
    d060:	1024d0fa 	srli	r18,r2,3
    d064:	98c0004c 	andi	r3,r19,1
    d068:	0005883a 	mov	r2,zero
    d06c:	9464b03a 	or	r18,r18,r17
    d070:	003e4106 	br	c978 <__alt_data_end+0xff00c978>
    d074:	1007883a 	mov	r3,r2
    d078:	0023883a 	mov	r17,zero
    d07c:	880a927a 	slli	r5,r17,9
    d080:	1805883a 	mov	r2,r3
    d084:	8822977a 	slli	r17,r17,29
    d088:	280ad33a 	srli	r5,r5,12
    d08c:	003ff406 	br	d060 <__alt_data_end+0xff00d060>
    d090:	10c003cc 	andi	r3,r2,15
    d094:	01000104 	movi	r4,4
    d098:	193ff626 	beq	r3,r4,d074 <__alt_data_end+0xff00d074>
    d09c:	0023883a 	mov	r17,zero
    d0a0:	003fca06 	br	cfcc <__alt_data_end+0xff00cfcc>
    d0a4:	813fd336 	bltu	r16,r4,cff4 <__alt_data_end+0xff00cff4>
    d0a8:	1023883a 	mov	r17,r2
    d0ac:	003fa806 	br	cf50 <__alt_data_end+0xff00cf50>
    d0b0:	b0ffd636 	bltu	r22,r3,d00c <__alt_data_end+0xff00d00c>
    d0b4:	1011883a 	mov	r8,r2
    d0b8:	b0ff341e 	bne	r22,r3,cd8c <__alt_data_end+0xff00cd8c>
    d0bc:	003f3406 	br	cd90 <__alt_data_end+0xff00cd90>
    d0c0:	0005883a 	mov	r2,zero
    d0c4:	003fe006 	br	d048 <__alt_data_end+0xff00d048>
    d0c8:	00800434 	movhi	r2,16
    d0cc:	89400234 	orhi	r5,r17,8
    d0d0:	10bfffc4 	addi	r2,r2,-1
    d0d4:	b807883a 	mov	r3,r23
    d0d8:	288a703a 	and	r5,r5,r2
    d0dc:	4025883a 	mov	r18,r8
    d0e0:	003e8206 	br	caec <__alt_data_end+0xff00caec>

0000d0e4 <__eqdf2>:
    d0e4:	2804d53a 	srli	r2,r5,20
    d0e8:	3806d53a 	srli	r3,r7,20
    d0ec:	02000434 	movhi	r8,16
    d0f0:	423fffc4 	addi	r8,r8,-1
    d0f4:	1081ffcc 	andi	r2,r2,2047
    d0f8:	0281ffc4 	movi	r10,2047
    d0fc:	2a12703a 	and	r9,r5,r8
    d100:	18c1ffcc 	andi	r3,r3,2047
    d104:	3a10703a 	and	r8,r7,r8
    d108:	280ad7fa 	srli	r5,r5,31
    d10c:	380ed7fa 	srli	r7,r7,31
    d110:	12801026 	beq	r2,r10,d154 <__eqdf2+0x70>
    d114:	0281ffc4 	movi	r10,2047
    d118:	1a800a26 	beq	r3,r10,d144 <__eqdf2+0x60>
    d11c:	10c00226 	beq	r2,r3,d128 <__eqdf2+0x44>
    d120:	00800044 	movi	r2,1
    d124:	f800283a 	ret
    d128:	4a3ffd1e 	bne	r9,r8,d120 <__alt_data_end+0xff00d120>
    d12c:	21bffc1e 	bne	r4,r6,d120 <__alt_data_end+0xff00d120>
    d130:	29c00c26 	beq	r5,r7,d164 <__eqdf2+0x80>
    d134:	103ffa1e 	bne	r2,zero,d120 <__alt_data_end+0xff00d120>
    d138:	2244b03a 	or	r2,r4,r9
    d13c:	1004c03a 	cmpne	r2,r2,zero
    d140:	f800283a 	ret
    d144:	3214b03a 	or	r10,r6,r8
    d148:	503ff426 	beq	r10,zero,d11c <__alt_data_end+0xff00d11c>
    d14c:	00800044 	movi	r2,1
    d150:	f800283a 	ret
    d154:	2254b03a 	or	r10,r4,r9
    d158:	503fee26 	beq	r10,zero,d114 <__alt_data_end+0xff00d114>
    d15c:	00800044 	movi	r2,1
    d160:	f800283a 	ret
    d164:	0005883a 	mov	r2,zero
    d168:	f800283a 	ret

0000d16c <__gedf2>:
    d16c:	2804d53a 	srli	r2,r5,20
    d170:	3806d53a 	srli	r3,r7,20
    d174:	02000434 	movhi	r8,16
    d178:	423fffc4 	addi	r8,r8,-1
    d17c:	1081ffcc 	andi	r2,r2,2047
    d180:	0241ffc4 	movi	r9,2047
    d184:	2a14703a 	and	r10,r5,r8
    d188:	18c1ffcc 	andi	r3,r3,2047
    d18c:	3a10703a 	and	r8,r7,r8
    d190:	280ad7fa 	srli	r5,r5,31
    d194:	380ed7fa 	srli	r7,r7,31
    d198:	12401d26 	beq	r2,r9,d210 <__gedf2+0xa4>
    d19c:	0241ffc4 	movi	r9,2047
    d1a0:	1a401226 	beq	r3,r9,d1ec <__gedf2+0x80>
    d1a4:	1000081e 	bne	r2,zero,d1c8 <__gedf2+0x5c>
    d1a8:	2296b03a 	or	r11,r4,r10
    d1ac:	5813003a 	cmpeq	r9,r11,zero
    d1b0:	1800091e 	bne	r3,zero,d1d8 <__gedf2+0x6c>
    d1b4:	3218b03a 	or	r12,r6,r8
    d1b8:	6000071e 	bne	r12,zero,d1d8 <__gedf2+0x6c>
    d1bc:	0005883a 	mov	r2,zero
    d1c0:	5800101e 	bne	r11,zero,d204 <__gedf2+0x98>
    d1c4:	f800283a 	ret
    d1c8:	18000c1e 	bne	r3,zero,d1fc <__gedf2+0x90>
    d1cc:	3212b03a 	or	r9,r6,r8
    d1d0:	48000c26 	beq	r9,zero,d204 <__gedf2+0x98>
    d1d4:	0013883a 	mov	r9,zero
    d1d8:	39c03fcc 	andi	r7,r7,255
    d1dc:	48000826 	beq	r9,zero,d200 <__gedf2+0x94>
    d1e0:	38000926 	beq	r7,zero,d208 <__gedf2+0x9c>
    d1e4:	00800044 	movi	r2,1
    d1e8:	f800283a 	ret
    d1ec:	3212b03a 	or	r9,r6,r8
    d1f0:	483fec26 	beq	r9,zero,d1a4 <__alt_data_end+0xff00d1a4>
    d1f4:	00bfff84 	movi	r2,-2
    d1f8:	f800283a 	ret
    d1fc:	39c03fcc 	andi	r7,r7,255
    d200:	29c00626 	beq	r5,r7,d21c <__gedf2+0xb0>
    d204:	283ff726 	beq	r5,zero,d1e4 <__alt_data_end+0xff00d1e4>
    d208:	00bfffc4 	movi	r2,-1
    d20c:	f800283a 	ret
    d210:	2292b03a 	or	r9,r4,r10
    d214:	483fe126 	beq	r9,zero,d19c <__alt_data_end+0xff00d19c>
    d218:	003ff606 	br	d1f4 <__alt_data_end+0xff00d1f4>
    d21c:	18bff916 	blt	r3,r2,d204 <__alt_data_end+0xff00d204>
    d220:	10c00316 	blt	r2,r3,d230 <__gedf2+0xc4>
    d224:	42bff736 	bltu	r8,r10,d204 <__alt_data_end+0xff00d204>
    d228:	52000326 	beq	r10,r8,d238 <__gedf2+0xcc>
    d22c:	5200042e 	bgeu	r10,r8,d240 <__gedf2+0xd4>
    d230:	283fec1e 	bne	r5,zero,d1e4 <__alt_data_end+0xff00d1e4>
    d234:	003ff406 	br	d208 <__alt_data_end+0xff00d208>
    d238:	313ff236 	bltu	r6,r4,d204 <__alt_data_end+0xff00d204>
    d23c:	21bffc36 	bltu	r4,r6,d230 <__alt_data_end+0xff00d230>
    d240:	0005883a 	mov	r2,zero
    d244:	f800283a 	ret

0000d248 <__ledf2>:
    d248:	2804d53a 	srli	r2,r5,20
    d24c:	3810d53a 	srli	r8,r7,20
    d250:	00c00434 	movhi	r3,16
    d254:	18ffffc4 	addi	r3,r3,-1
    d258:	1081ffcc 	andi	r2,r2,2047
    d25c:	0241ffc4 	movi	r9,2047
    d260:	28d4703a 	and	r10,r5,r3
    d264:	4201ffcc 	andi	r8,r8,2047
    d268:	38c6703a 	and	r3,r7,r3
    d26c:	280ad7fa 	srli	r5,r5,31
    d270:	380ed7fa 	srli	r7,r7,31
    d274:	12401f26 	beq	r2,r9,d2f4 <__ledf2+0xac>
    d278:	0241ffc4 	movi	r9,2047
    d27c:	42401426 	beq	r8,r9,d2d0 <__ledf2+0x88>
    d280:	1000091e 	bne	r2,zero,d2a8 <__ledf2+0x60>
    d284:	2296b03a 	or	r11,r4,r10
    d288:	5813003a 	cmpeq	r9,r11,zero
    d28c:	29403fcc 	andi	r5,r5,255
    d290:	40000a1e 	bne	r8,zero,d2bc <__ledf2+0x74>
    d294:	30d8b03a 	or	r12,r6,r3
    d298:	6000081e 	bne	r12,zero,d2bc <__ledf2+0x74>
    d29c:	0005883a 	mov	r2,zero
    d2a0:	5800111e 	bne	r11,zero,d2e8 <__ledf2+0xa0>
    d2a4:	f800283a 	ret
    d2a8:	29403fcc 	andi	r5,r5,255
    d2ac:	40000c1e 	bne	r8,zero,d2e0 <__ledf2+0x98>
    d2b0:	30d2b03a 	or	r9,r6,r3
    d2b4:	48000c26 	beq	r9,zero,d2e8 <__ledf2+0xa0>
    d2b8:	0013883a 	mov	r9,zero
    d2bc:	39c03fcc 	andi	r7,r7,255
    d2c0:	48000826 	beq	r9,zero,d2e4 <__ledf2+0x9c>
    d2c4:	38001126 	beq	r7,zero,d30c <__ledf2+0xc4>
    d2c8:	00800044 	movi	r2,1
    d2cc:	f800283a 	ret
    d2d0:	30d2b03a 	or	r9,r6,r3
    d2d4:	483fea26 	beq	r9,zero,d280 <__alt_data_end+0xff00d280>
    d2d8:	00800084 	movi	r2,2
    d2dc:	f800283a 	ret
    d2e0:	39c03fcc 	andi	r7,r7,255
    d2e4:	39400726 	beq	r7,r5,d304 <__ledf2+0xbc>
    d2e8:	2800081e 	bne	r5,zero,d30c <__ledf2+0xc4>
    d2ec:	00800044 	movi	r2,1
    d2f0:	f800283a 	ret
    d2f4:	2292b03a 	or	r9,r4,r10
    d2f8:	483fdf26 	beq	r9,zero,d278 <__alt_data_end+0xff00d278>
    d2fc:	00800084 	movi	r2,2
    d300:	f800283a 	ret
    d304:	4080030e 	bge	r8,r2,d314 <__ledf2+0xcc>
    d308:	383fef26 	beq	r7,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d30c:	00bfffc4 	movi	r2,-1
    d310:	f800283a 	ret
    d314:	123feb16 	blt	r2,r8,d2c4 <__alt_data_end+0xff00d2c4>
    d318:	1abff336 	bltu	r3,r10,d2e8 <__alt_data_end+0xff00d2e8>
    d31c:	50c00326 	beq	r10,r3,d32c <__ledf2+0xe4>
    d320:	50c0042e 	bgeu	r10,r3,d334 <__ledf2+0xec>
    d324:	283fe81e 	bne	r5,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d328:	003ff806 	br	d30c <__alt_data_end+0xff00d30c>
    d32c:	313fee36 	bltu	r6,r4,d2e8 <__alt_data_end+0xff00d2e8>
    d330:	21bffc36 	bltu	r4,r6,d324 <__alt_data_end+0xff00d324>
    d334:	0005883a 	mov	r2,zero
    d338:	f800283a 	ret

0000d33c <__muldf3>:
    d33c:	defff304 	addi	sp,sp,-52
    d340:	2804d53a 	srli	r2,r5,20
    d344:	dd800915 	stw	r22,36(sp)
    d348:	282cd7fa 	srli	r22,r5,31
    d34c:	dc000315 	stw	r16,12(sp)
    d350:	04000434 	movhi	r16,16
    d354:	dd400815 	stw	r21,32(sp)
    d358:	dc800515 	stw	r18,20(sp)
    d35c:	843fffc4 	addi	r16,r16,-1
    d360:	dfc00c15 	stw	ra,48(sp)
    d364:	df000b15 	stw	fp,44(sp)
    d368:	ddc00a15 	stw	r23,40(sp)
    d36c:	dd000715 	stw	r20,28(sp)
    d370:	dcc00615 	stw	r19,24(sp)
    d374:	dc400415 	stw	r17,16(sp)
    d378:	1481ffcc 	andi	r18,r2,2047
    d37c:	2c20703a 	and	r16,r5,r16
    d380:	b02b883a 	mov	r21,r22
    d384:	b2403fcc 	andi	r9,r22,255
    d388:	90006026 	beq	r18,zero,d50c <__muldf3+0x1d0>
    d38c:	0081ffc4 	movi	r2,2047
    d390:	2029883a 	mov	r20,r4
    d394:	90803626 	beq	r18,r2,d470 <__muldf3+0x134>
    d398:	80800434 	orhi	r2,r16,16
    d39c:	100490fa 	slli	r2,r2,3
    d3a0:	2020d77a 	srli	r16,r4,29
    d3a4:	202890fa 	slli	r20,r4,3
    d3a8:	94bf0044 	addi	r18,r18,-1023
    d3ac:	80a0b03a 	or	r16,r16,r2
    d3b0:	0027883a 	mov	r19,zero
    d3b4:	0039883a 	mov	fp,zero
    d3b8:	3804d53a 	srli	r2,r7,20
    d3bc:	382ed7fa 	srli	r23,r7,31
    d3c0:	04400434 	movhi	r17,16
    d3c4:	8c7fffc4 	addi	r17,r17,-1
    d3c8:	1081ffcc 	andi	r2,r2,2047
    d3cc:	3011883a 	mov	r8,r6
    d3d0:	3c62703a 	and	r17,r7,r17
    d3d4:	ba803fcc 	andi	r10,r23,255
    d3d8:	10006d26 	beq	r2,zero,d590 <__muldf3+0x254>
    d3dc:	00c1ffc4 	movi	r3,2047
    d3e0:	10c06526 	beq	r2,r3,d578 <__muldf3+0x23c>
    d3e4:	88c00434 	orhi	r3,r17,16
    d3e8:	180690fa 	slli	r3,r3,3
    d3ec:	3022d77a 	srli	r17,r6,29
    d3f0:	301090fa 	slli	r8,r6,3
    d3f4:	10bf0044 	addi	r2,r2,-1023
    d3f8:	88e2b03a 	or	r17,r17,r3
    d3fc:	000b883a 	mov	r5,zero
    d400:	9085883a 	add	r2,r18,r2
    d404:	2cc8b03a 	or	r4,r5,r19
    d408:	00c003c4 	movi	r3,15
    d40c:	bdacf03a 	xor	r22,r23,r22
    d410:	12c00044 	addi	r11,r2,1
    d414:	19009936 	bltu	r3,r4,d67c <__muldf3+0x340>
    d418:	200890ba 	slli	r4,r4,2
    d41c:	00c00074 	movhi	r3,1
    d420:	18f50c04 	addi	r3,r3,-11216
    d424:	20c9883a 	add	r4,r4,r3
    d428:	20c00017 	ldw	r3,0(r4)
    d42c:	1800683a 	jmp	r3
    d430:	0000d67c 	xorhi	zero,zero,857
    d434:	0000d490 	cmplti	zero,zero,850
    d438:	0000d490 	cmplti	zero,zero,850
    d43c:	0000d48c 	andi	zero,zero,850
    d440:	0000d658 	cmpnei	zero,zero,857
    d444:	0000d658 	cmpnei	zero,zero,857
    d448:	0000d640 	call	d64 <init_LCD+0x2c0>
    d44c:	0000d48c 	andi	zero,zero,850
    d450:	0000d658 	cmpnei	zero,zero,857
    d454:	0000d640 	call	d64 <init_LCD+0x2c0>
    d458:	0000d658 	cmpnei	zero,zero,857
    d45c:	0000d48c 	andi	zero,zero,850
    d460:	0000d668 	cmpgeui	zero,zero,857
    d464:	0000d668 	cmpgeui	zero,zero,857
    d468:	0000d668 	cmpgeui	zero,zero,857
    d46c:	0000d884 	movi	zero,866
    d470:	2404b03a 	or	r2,r4,r16
    d474:	10006f1e 	bne	r2,zero,d634 <__muldf3+0x2f8>
    d478:	04c00204 	movi	r19,8
    d47c:	0021883a 	mov	r16,zero
    d480:	0029883a 	mov	r20,zero
    d484:	07000084 	movi	fp,2
    d488:	003fcb06 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d48c:	502d883a 	mov	r22,r10
    d490:	00800084 	movi	r2,2
    d494:	28805726 	beq	r5,r2,d5f4 <__muldf3+0x2b8>
    d498:	008000c4 	movi	r2,3
    d49c:	28816626 	beq	r5,r2,da38 <__muldf3+0x6fc>
    d4a0:	00800044 	movi	r2,1
    d4a4:	2881411e 	bne	r5,r2,d9ac <__muldf3+0x670>
    d4a8:	b02b883a 	mov	r21,r22
    d4ac:	0005883a 	mov	r2,zero
    d4b0:	000b883a 	mov	r5,zero
    d4b4:	0029883a 	mov	r20,zero
    d4b8:	1004953a 	slli	r2,r2,20
    d4bc:	a8c03fcc 	andi	r3,r21,255
    d4c0:	04400434 	movhi	r17,16
    d4c4:	8c7fffc4 	addi	r17,r17,-1
    d4c8:	180697fa 	slli	r3,r3,31
    d4cc:	2c4a703a 	and	r5,r5,r17
    d4d0:	288ab03a 	or	r5,r5,r2
    d4d4:	28c6b03a 	or	r3,r5,r3
    d4d8:	a005883a 	mov	r2,r20
    d4dc:	dfc00c17 	ldw	ra,48(sp)
    d4e0:	df000b17 	ldw	fp,44(sp)
    d4e4:	ddc00a17 	ldw	r23,40(sp)
    d4e8:	dd800917 	ldw	r22,36(sp)
    d4ec:	dd400817 	ldw	r21,32(sp)
    d4f0:	dd000717 	ldw	r20,28(sp)
    d4f4:	dcc00617 	ldw	r19,24(sp)
    d4f8:	dc800517 	ldw	r18,20(sp)
    d4fc:	dc400417 	ldw	r17,16(sp)
    d500:	dc000317 	ldw	r16,12(sp)
    d504:	dec00d04 	addi	sp,sp,52
    d508:	f800283a 	ret
    d50c:	2404b03a 	or	r2,r4,r16
    d510:	2027883a 	mov	r19,r4
    d514:	10004226 	beq	r2,zero,d620 <__muldf3+0x2e4>
    d518:	8000fc26 	beq	r16,zero,d90c <__muldf3+0x5d0>
    d51c:	8009883a 	mov	r4,r16
    d520:	d9800215 	stw	r6,8(sp)
    d524:	d9c00015 	stw	r7,0(sp)
    d528:	da400115 	stw	r9,4(sp)
    d52c:	000e5540 	call	e554 <__clzsi2>
    d530:	d9800217 	ldw	r6,8(sp)
    d534:	d9c00017 	ldw	r7,0(sp)
    d538:	da400117 	ldw	r9,4(sp)
    d53c:	113ffd44 	addi	r4,r2,-11
    d540:	00c00704 	movi	r3,28
    d544:	1900ed16 	blt	r3,r4,d8fc <__muldf3+0x5c0>
    d548:	00c00744 	movi	r3,29
    d54c:	147ffe04 	addi	r17,r2,-8
    d550:	1907c83a 	sub	r3,r3,r4
    d554:	8460983a 	sll	r16,r16,r17
    d558:	98c6d83a 	srl	r3,r19,r3
    d55c:	9c68983a 	sll	r20,r19,r17
    d560:	1c20b03a 	or	r16,r3,r16
    d564:	1080fcc4 	addi	r2,r2,1011
    d568:	00a5c83a 	sub	r18,zero,r2
    d56c:	0027883a 	mov	r19,zero
    d570:	0039883a 	mov	fp,zero
    d574:	003f9006 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d578:	3446b03a 	or	r3,r6,r17
    d57c:	1800261e 	bne	r3,zero,d618 <__muldf3+0x2dc>
    d580:	0023883a 	mov	r17,zero
    d584:	0011883a 	mov	r8,zero
    d588:	01400084 	movi	r5,2
    d58c:	003f9c06 	br	d400 <__alt_data_end+0xff00d400>
    d590:	3446b03a 	or	r3,r6,r17
    d594:	18001c26 	beq	r3,zero,d608 <__muldf3+0x2cc>
    d598:	8800ce26 	beq	r17,zero,d8d4 <__muldf3+0x598>
    d59c:	8809883a 	mov	r4,r17
    d5a0:	d9800215 	stw	r6,8(sp)
    d5a4:	da400115 	stw	r9,4(sp)
    d5a8:	da800015 	stw	r10,0(sp)
    d5ac:	000e5540 	call	e554 <__clzsi2>
    d5b0:	d9800217 	ldw	r6,8(sp)
    d5b4:	da400117 	ldw	r9,4(sp)
    d5b8:	da800017 	ldw	r10,0(sp)
    d5bc:	113ffd44 	addi	r4,r2,-11
    d5c0:	00c00704 	movi	r3,28
    d5c4:	1900bf16 	blt	r3,r4,d8c4 <__muldf3+0x588>
    d5c8:	00c00744 	movi	r3,29
    d5cc:	123ffe04 	addi	r8,r2,-8
    d5d0:	1907c83a 	sub	r3,r3,r4
    d5d4:	8a22983a 	sll	r17,r17,r8
    d5d8:	30c6d83a 	srl	r3,r6,r3
    d5dc:	3210983a 	sll	r8,r6,r8
    d5e0:	1c62b03a 	or	r17,r3,r17
    d5e4:	1080fcc4 	addi	r2,r2,1011
    d5e8:	0085c83a 	sub	r2,zero,r2
    d5ec:	000b883a 	mov	r5,zero
    d5f0:	003f8306 	br	d400 <__alt_data_end+0xff00d400>
    d5f4:	b02b883a 	mov	r21,r22
    d5f8:	0081ffc4 	movi	r2,2047
    d5fc:	000b883a 	mov	r5,zero
    d600:	0029883a 	mov	r20,zero
    d604:	003fac06 	br	d4b8 <__alt_data_end+0xff00d4b8>
    d608:	0023883a 	mov	r17,zero
    d60c:	0011883a 	mov	r8,zero
    d610:	01400044 	movi	r5,1
    d614:	003f7a06 	br	d400 <__alt_data_end+0xff00d400>
    d618:	014000c4 	movi	r5,3
    d61c:	003f7806 	br	d400 <__alt_data_end+0xff00d400>
    d620:	04c00104 	movi	r19,4
    d624:	0021883a 	mov	r16,zero
    d628:	0029883a 	mov	r20,zero
    d62c:	07000044 	movi	fp,1
    d630:	003f6106 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d634:	04c00304 	movi	r19,12
    d638:	070000c4 	movi	fp,3
    d63c:	003f5e06 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d640:	01400434 	movhi	r5,16
    d644:	002b883a 	mov	r21,zero
    d648:	297fffc4 	addi	r5,r5,-1
    d64c:	053fffc4 	movi	r20,-1
    d650:	0081ffc4 	movi	r2,2047
    d654:	003f9806 	br	d4b8 <__alt_data_end+0xff00d4b8>
    d658:	8023883a 	mov	r17,r16
    d65c:	a011883a 	mov	r8,r20
    d660:	e00b883a 	mov	r5,fp
    d664:	003f8a06 	br	d490 <__alt_data_end+0xff00d490>
    d668:	8023883a 	mov	r17,r16
    d66c:	a011883a 	mov	r8,r20
    d670:	482d883a 	mov	r22,r9
    d674:	e00b883a 	mov	r5,fp
    d678:	003f8506 	br	d490 <__alt_data_end+0xff00d490>
    d67c:	a00ad43a 	srli	r5,r20,16
    d680:	401ad43a 	srli	r13,r8,16
    d684:	a53fffcc 	andi	r20,r20,65535
    d688:	423fffcc 	andi	r8,r8,65535
    d68c:	4519383a 	mul	r12,r8,r20
    d690:	4147383a 	mul	r3,r8,r5
    d694:	6d09383a 	mul	r4,r13,r20
    d698:	600cd43a 	srli	r6,r12,16
    d69c:	2b5d383a 	mul	r14,r5,r13
    d6a0:	20c9883a 	add	r4,r4,r3
    d6a4:	310d883a 	add	r6,r6,r4
    d6a8:	30c0022e 	bgeu	r6,r3,d6b4 <__muldf3+0x378>
    d6ac:	00c00074 	movhi	r3,1
    d6b0:	70dd883a 	add	r14,r14,r3
    d6b4:	8826d43a 	srli	r19,r17,16
    d6b8:	8bffffcc 	andi	r15,r17,65535
    d6bc:	7d23383a 	mul	r17,r15,r20
    d6c0:	7949383a 	mul	r4,r15,r5
    d6c4:	9d29383a 	mul	r20,r19,r20
    d6c8:	8814d43a 	srli	r10,r17,16
    d6cc:	3012943a 	slli	r9,r6,16
    d6d0:	a129883a 	add	r20,r20,r4
    d6d4:	633fffcc 	andi	r12,r12,65535
    d6d8:	5515883a 	add	r10,r10,r20
    d6dc:	3006d43a 	srli	r3,r6,16
    d6e0:	4b13883a 	add	r9,r9,r12
    d6e4:	2ccb383a 	mul	r5,r5,r19
    d6e8:	5100022e 	bgeu	r10,r4,d6f4 <__muldf3+0x3b8>
    d6ec:	01000074 	movhi	r4,1
    d6f0:	290b883a 	add	r5,r5,r4
    d6f4:	802ad43a 	srli	r21,r16,16
    d6f8:	843fffcc 	andi	r16,r16,65535
    d6fc:	440d383a 	mul	r6,r8,r16
    d700:	4565383a 	mul	r18,r8,r21
    d704:	8349383a 	mul	r4,r16,r13
    d708:	500e943a 	slli	r7,r10,16
    d70c:	3010d43a 	srli	r8,r6,16
    d710:	5028d43a 	srli	r20,r10,16
    d714:	2489883a 	add	r4,r4,r18
    d718:	8abfffcc 	andi	r10,r17,65535
    d71c:	3a95883a 	add	r10,r7,r10
    d720:	4119883a 	add	r12,r8,r4
    d724:	a169883a 	add	r20,r20,r5
    d728:	1a87883a 	add	r3,r3,r10
    d72c:	6d5b383a 	mul	r13,r13,r21
    d730:	6480022e 	bgeu	r12,r18,d73c <__muldf3+0x400>
    d734:	01000074 	movhi	r4,1
    d738:	691b883a 	add	r13,r13,r4
    d73c:	7c25383a 	mul	r18,r15,r16
    d740:	7d4b383a 	mul	r5,r15,r21
    d744:	84cf383a 	mul	r7,r16,r19
    d748:	901ed43a 	srli	r15,r18,16
    d74c:	6008d43a 	srli	r4,r12,16
    d750:	6010943a 	slli	r8,r12,16
    d754:	394f883a 	add	r7,r7,r5
    d758:	333fffcc 	andi	r12,r6,65535
    d75c:	79df883a 	add	r15,r15,r7
    d760:	235b883a 	add	r13,r4,r13
    d764:	9d63383a 	mul	r17,r19,r21
    d768:	4309883a 	add	r4,r8,r12
    d76c:	7940022e 	bgeu	r15,r5,d778 <__muldf3+0x43c>
    d770:	01400074 	movhi	r5,1
    d774:	8963883a 	add	r17,r17,r5
    d778:	780a943a 	slli	r5,r15,16
    d77c:	91bfffcc 	andi	r6,r18,65535
    d780:	70c7883a 	add	r3,r14,r3
    d784:	298d883a 	add	r6,r5,r6
    d788:	1a8f803a 	cmpltu	r7,r3,r10
    d78c:	350b883a 	add	r5,r6,r20
    d790:	20c7883a 	add	r3,r4,r3
    d794:	3955883a 	add	r10,r7,r5
    d798:	1909803a 	cmpltu	r4,r3,r4
    d79c:	6a91883a 	add	r8,r13,r10
    d7a0:	780cd43a 	srli	r6,r15,16
    d7a4:	2219883a 	add	r12,r4,r8
    d7a8:	2d0b803a 	cmpltu	r5,r5,r20
    d7ac:	51cf803a 	cmpltu	r7,r10,r7
    d7b0:	29ceb03a 	or	r7,r5,r7
    d7b4:	4351803a 	cmpltu	r8,r8,r13
    d7b8:	610b803a 	cmpltu	r5,r12,r4
    d7bc:	4148b03a 	or	r4,r8,r5
    d7c0:	398f883a 	add	r7,r7,r6
    d7c4:	3909883a 	add	r4,r7,r4
    d7c8:	1810927a 	slli	r8,r3,9
    d7cc:	2449883a 	add	r4,r4,r17
    d7d0:	2008927a 	slli	r4,r4,9
    d7d4:	6022d5fa 	srli	r17,r12,23
    d7d8:	1806d5fa 	srli	r3,r3,23
    d7dc:	4252b03a 	or	r9,r8,r9
    d7e0:	600a927a 	slli	r5,r12,9
    d7e4:	4810c03a 	cmpne	r8,r9,zero
    d7e8:	2462b03a 	or	r17,r4,r17
    d7ec:	40c6b03a 	or	r3,r8,r3
    d7f0:	8900402c 	andhi	r4,r17,256
    d7f4:	1950b03a 	or	r8,r3,r5
    d7f8:	20000726 	beq	r4,zero,d818 <__muldf3+0x4dc>
    d7fc:	4006d07a 	srli	r3,r8,1
    d800:	880497fa 	slli	r2,r17,31
    d804:	4200004c 	andi	r8,r8,1
    d808:	8822d07a 	srli	r17,r17,1
    d80c:	1a10b03a 	or	r8,r3,r8
    d810:	1210b03a 	or	r8,r2,r8
    d814:	5805883a 	mov	r2,r11
    d818:	1140ffc4 	addi	r5,r2,1023
    d81c:	0140440e 	bge	zero,r5,d930 <__muldf3+0x5f4>
    d820:	40c001cc 	andi	r3,r8,7
    d824:	18000726 	beq	r3,zero,d844 <__muldf3+0x508>
    d828:	40c003cc 	andi	r3,r8,15
    d82c:	01000104 	movi	r4,4
    d830:	19000426 	beq	r3,r4,d844 <__muldf3+0x508>
    d834:	4107883a 	add	r3,r8,r4
    d838:	1a11803a 	cmpltu	r8,r3,r8
    d83c:	8a23883a 	add	r17,r17,r8
    d840:	1811883a 	mov	r8,r3
    d844:	88c0402c 	andhi	r3,r17,256
    d848:	18000426 	beq	r3,zero,d85c <__muldf3+0x520>
    d84c:	11410004 	addi	r5,r2,1024
    d850:	00bfc034 	movhi	r2,65280
    d854:	10bfffc4 	addi	r2,r2,-1
    d858:	88a2703a 	and	r17,r17,r2
    d85c:	0081ff84 	movi	r2,2046
    d860:	117f6416 	blt	r2,r5,d5f4 <__alt_data_end+0xff00d5f4>
    d864:	8828977a 	slli	r20,r17,29
    d868:	4010d0fa 	srli	r8,r8,3
    d86c:	8822927a 	slli	r17,r17,9
    d870:	2881ffcc 	andi	r2,r5,2047
    d874:	a228b03a 	or	r20,r20,r8
    d878:	880ad33a 	srli	r5,r17,12
    d87c:	b02b883a 	mov	r21,r22
    d880:	003f0d06 	br	d4b8 <__alt_data_end+0xff00d4b8>
    d884:	8080022c 	andhi	r2,r16,8
    d888:	10000926 	beq	r2,zero,d8b0 <__muldf3+0x574>
    d88c:	8880022c 	andhi	r2,r17,8
    d890:	1000071e 	bne	r2,zero,d8b0 <__muldf3+0x574>
    d894:	00800434 	movhi	r2,16
    d898:	89400234 	orhi	r5,r17,8
    d89c:	10bfffc4 	addi	r2,r2,-1
    d8a0:	b82b883a 	mov	r21,r23
    d8a4:	288a703a 	and	r5,r5,r2
    d8a8:	4029883a 	mov	r20,r8
    d8ac:	003f6806 	br	d650 <__alt_data_end+0xff00d650>
    d8b0:	00800434 	movhi	r2,16
    d8b4:	81400234 	orhi	r5,r16,8
    d8b8:	10bfffc4 	addi	r2,r2,-1
    d8bc:	288a703a 	and	r5,r5,r2
    d8c0:	003f6306 	br	d650 <__alt_data_end+0xff00d650>
    d8c4:	147ff604 	addi	r17,r2,-40
    d8c8:	3462983a 	sll	r17,r6,r17
    d8cc:	0011883a 	mov	r8,zero
    d8d0:	003f4406 	br	d5e4 <__alt_data_end+0xff00d5e4>
    d8d4:	3009883a 	mov	r4,r6
    d8d8:	d9800215 	stw	r6,8(sp)
    d8dc:	da400115 	stw	r9,4(sp)
    d8e0:	da800015 	stw	r10,0(sp)
    d8e4:	000e5540 	call	e554 <__clzsi2>
    d8e8:	10800804 	addi	r2,r2,32
    d8ec:	da800017 	ldw	r10,0(sp)
    d8f0:	da400117 	ldw	r9,4(sp)
    d8f4:	d9800217 	ldw	r6,8(sp)
    d8f8:	003f3006 	br	d5bc <__alt_data_end+0xff00d5bc>
    d8fc:	143ff604 	addi	r16,r2,-40
    d900:	9c20983a 	sll	r16,r19,r16
    d904:	0029883a 	mov	r20,zero
    d908:	003f1606 	br	d564 <__alt_data_end+0xff00d564>
    d90c:	d9800215 	stw	r6,8(sp)
    d910:	d9c00015 	stw	r7,0(sp)
    d914:	da400115 	stw	r9,4(sp)
    d918:	000e5540 	call	e554 <__clzsi2>
    d91c:	10800804 	addi	r2,r2,32
    d920:	da400117 	ldw	r9,4(sp)
    d924:	d9c00017 	ldw	r7,0(sp)
    d928:	d9800217 	ldw	r6,8(sp)
    d92c:	003f0306 	br	d53c <__alt_data_end+0xff00d53c>
    d930:	00c00044 	movi	r3,1
    d934:	1947c83a 	sub	r3,r3,r5
    d938:	00800e04 	movi	r2,56
    d93c:	10feda16 	blt	r2,r3,d4a8 <__alt_data_end+0xff00d4a8>
    d940:	008007c4 	movi	r2,31
    d944:	10c01b16 	blt	r2,r3,d9b4 <__muldf3+0x678>
    d948:	00800804 	movi	r2,32
    d94c:	10c5c83a 	sub	r2,r2,r3
    d950:	888a983a 	sll	r5,r17,r2
    d954:	40c8d83a 	srl	r4,r8,r3
    d958:	4084983a 	sll	r2,r8,r2
    d95c:	88e2d83a 	srl	r17,r17,r3
    d960:	2906b03a 	or	r3,r5,r4
    d964:	1004c03a 	cmpne	r2,r2,zero
    d968:	1886b03a 	or	r3,r3,r2
    d96c:	188001cc 	andi	r2,r3,7
    d970:	10000726 	beq	r2,zero,d990 <__muldf3+0x654>
    d974:	188003cc 	andi	r2,r3,15
    d978:	01000104 	movi	r4,4
    d97c:	11000426 	beq	r2,r4,d990 <__muldf3+0x654>
    d980:	1805883a 	mov	r2,r3
    d984:	10c00104 	addi	r3,r2,4
    d988:	1885803a 	cmpltu	r2,r3,r2
    d98c:	88a3883a 	add	r17,r17,r2
    d990:	8880202c 	andhi	r2,r17,128
    d994:	10001c26 	beq	r2,zero,da08 <__muldf3+0x6cc>
    d998:	b02b883a 	mov	r21,r22
    d99c:	00800044 	movi	r2,1
    d9a0:	000b883a 	mov	r5,zero
    d9a4:	0029883a 	mov	r20,zero
    d9a8:	003ec306 	br	d4b8 <__alt_data_end+0xff00d4b8>
    d9ac:	5805883a 	mov	r2,r11
    d9b0:	003f9906 	br	d818 <__alt_data_end+0xff00d818>
    d9b4:	00bff844 	movi	r2,-31
    d9b8:	1145c83a 	sub	r2,r2,r5
    d9bc:	8888d83a 	srl	r4,r17,r2
    d9c0:	00800804 	movi	r2,32
    d9c4:	18801a26 	beq	r3,r2,da30 <__muldf3+0x6f4>
    d9c8:	00801004 	movi	r2,64
    d9cc:	10c5c83a 	sub	r2,r2,r3
    d9d0:	8884983a 	sll	r2,r17,r2
    d9d4:	1204b03a 	or	r2,r2,r8
    d9d8:	1004c03a 	cmpne	r2,r2,zero
    d9dc:	2084b03a 	or	r2,r4,r2
    d9e0:	144001cc 	andi	r17,r2,7
    d9e4:	88000d1e 	bne	r17,zero,da1c <__muldf3+0x6e0>
    d9e8:	000b883a 	mov	r5,zero
    d9ec:	1028d0fa 	srli	r20,r2,3
    d9f0:	b02b883a 	mov	r21,r22
    d9f4:	0005883a 	mov	r2,zero
    d9f8:	a468b03a 	or	r20,r20,r17
    d9fc:	003eae06 	br	d4b8 <__alt_data_end+0xff00d4b8>
    da00:	1007883a 	mov	r3,r2
    da04:	0023883a 	mov	r17,zero
    da08:	880a927a 	slli	r5,r17,9
    da0c:	1805883a 	mov	r2,r3
    da10:	8822977a 	slli	r17,r17,29
    da14:	280ad33a 	srli	r5,r5,12
    da18:	003ff406 	br	d9ec <__alt_data_end+0xff00d9ec>
    da1c:	10c003cc 	andi	r3,r2,15
    da20:	01000104 	movi	r4,4
    da24:	193ff626 	beq	r3,r4,da00 <__alt_data_end+0xff00da00>
    da28:	0023883a 	mov	r17,zero
    da2c:	003fd506 	br	d984 <__alt_data_end+0xff00d984>
    da30:	0005883a 	mov	r2,zero
    da34:	003fe706 	br	d9d4 <__alt_data_end+0xff00d9d4>
    da38:	00800434 	movhi	r2,16
    da3c:	89400234 	orhi	r5,r17,8
    da40:	10bfffc4 	addi	r2,r2,-1
    da44:	b02b883a 	mov	r21,r22
    da48:	288a703a 	and	r5,r5,r2
    da4c:	4029883a 	mov	r20,r8
    da50:	003eff06 	br	d650 <__alt_data_end+0xff00d650>

0000da54 <__subdf3>:
    da54:	02000434 	movhi	r8,16
    da58:	423fffc4 	addi	r8,r8,-1
    da5c:	defffb04 	addi	sp,sp,-20
    da60:	2a14703a 	and	r10,r5,r8
    da64:	3812d53a 	srli	r9,r7,20
    da68:	3a10703a 	and	r8,r7,r8
    da6c:	2006d77a 	srli	r3,r4,29
    da70:	3004d77a 	srli	r2,r6,29
    da74:	dc000015 	stw	r16,0(sp)
    da78:	501490fa 	slli	r10,r10,3
    da7c:	2820d53a 	srli	r16,r5,20
    da80:	401090fa 	slli	r8,r8,3
    da84:	dc800215 	stw	r18,8(sp)
    da88:	dc400115 	stw	r17,4(sp)
    da8c:	dfc00415 	stw	ra,16(sp)
    da90:	202290fa 	slli	r17,r4,3
    da94:	dcc00315 	stw	r19,12(sp)
    da98:	4a41ffcc 	andi	r9,r9,2047
    da9c:	0101ffc4 	movi	r4,2047
    daa0:	2824d7fa 	srli	r18,r5,31
    daa4:	8401ffcc 	andi	r16,r16,2047
    daa8:	50c6b03a 	or	r3,r10,r3
    daac:	380ed7fa 	srli	r7,r7,31
    dab0:	408ab03a 	or	r5,r8,r2
    dab4:	300c90fa 	slli	r6,r6,3
    dab8:	49009626 	beq	r9,r4,dd14 <__subdf3+0x2c0>
    dabc:	39c0005c 	xori	r7,r7,1
    dac0:	8245c83a 	sub	r2,r16,r9
    dac4:	3c807426 	beq	r7,r18,dc98 <__subdf3+0x244>
    dac8:	0080af0e 	bge	zero,r2,dd88 <__subdf3+0x334>
    dacc:	48002a1e 	bne	r9,zero,db78 <__subdf3+0x124>
    dad0:	2988b03a 	or	r4,r5,r6
    dad4:	20009a1e 	bne	r4,zero,dd40 <__subdf3+0x2ec>
    dad8:	888001cc 	andi	r2,r17,7
    dadc:	10000726 	beq	r2,zero,dafc <__subdf3+0xa8>
    dae0:	888003cc 	andi	r2,r17,15
    dae4:	01000104 	movi	r4,4
    dae8:	11000426 	beq	r2,r4,dafc <__subdf3+0xa8>
    daec:	890b883a 	add	r5,r17,r4
    daf0:	2c63803a 	cmpltu	r17,r5,r17
    daf4:	1c47883a 	add	r3,r3,r17
    daf8:	2823883a 	mov	r17,r5
    dafc:	1880202c 	andhi	r2,r3,128
    db00:	10005926 	beq	r2,zero,dc68 <__subdf3+0x214>
    db04:	84000044 	addi	r16,r16,1
    db08:	0081ffc4 	movi	r2,2047
    db0c:	8080be26 	beq	r16,r2,de08 <__subdf3+0x3b4>
    db10:	017fe034 	movhi	r5,65408
    db14:	297fffc4 	addi	r5,r5,-1
    db18:	1946703a 	and	r3,r3,r5
    db1c:	1804977a 	slli	r2,r3,29
    db20:	1806927a 	slli	r3,r3,9
    db24:	8822d0fa 	srli	r17,r17,3
    db28:	8401ffcc 	andi	r16,r16,2047
    db2c:	180ad33a 	srli	r5,r3,12
    db30:	9100004c 	andi	r4,r18,1
    db34:	1444b03a 	or	r2,r2,r17
    db38:	80c1ffcc 	andi	r3,r16,2047
    db3c:	1820953a 	slli	r16,r3,20
    db40:	20c03fcc 	andi	r3,r4,255
    db44:	180897fa 	slli	r4,r3,31
    db48:	00c00434 	movhi	r3,16
    db4c:	18ffffc4 	addi	r3,r3,-1
    db50:	28c6703a 	and	r3,r5,r3
    db54:	1c06b03a 	or	r3,r3,r16
    db58:	1906b03a 	or	r3,r3,r4
    db5c:	dfc00417 	ldw	ra,16(sp)
    db60:	dcc00317 	ldw	r19,12(sp)
    db64:	dc800217 	ldw	r18,8(sp)
    db68:	dc400117 	ldw	r17,4(sp)
    db6c:	dc000017 	ldw	r16,0(sp)
    db70:	dec00504 	addi	sp,sp,20
    db74:	f800283a 	ret
    db78:	0101ffc4 	movi	r4,2047
    db7c:	813fd626 	beq	r16,r4,dad8 <__alt_data_end+0xff00dad8>
    db80:	29402034 	orhi	r5,r5,128
    db84:	01000e04 	movi	r4,56
    db88:	2080a316 	blt	r4,r2,de18 <__subdf3+0x3c4>
    db8c:	010007c4 	movi	r4,31
    db90:	2080c616 	blt	r4,r2,deac <__subdf3+0x458>
    db94:	01000804 	movi	r4,32
    db98:	2089c83a 	sub	r4,r4,r2
    db9c:	2910983a 	sll	r8,r5,r4
    dba0:	308ed83a 	srl	r7,r6,r2
    dba4:	3108983a 	sll	r4,r6,r4
    dba8:	2884d83a 	srl	r2,r5,r2
    dbac:	41ccb03a 	or	r6,r8,r7
    dbb0:	2008c03a 	cmpne	r4,r4,zero
    dbb4:	310cb03a 	or	r6,r6,r4
    dbb8:	898dc83a 	sub	r6,r17,r6
    dbbc:	89a3803a 	cmpltu	r17,r17,r6
    dbc0:	1887c83a 	sub	r3,r3,r2
    dbc4:	1c47c83a 	sub	r3,r3,r17
    dbc8:	3023883a 	mov	r17,r6
    dbcc:	1880202c 	andhi	r2,r3,128
    dbd0:	10002326 	beq	r2,zero,dc60 <__subdf3+0x20c>
    dbd4:	04c02034 	movhi	r19,128
    dbd8:	9cffffc4 	addi	r19,r19,-1
    dbdc:	1ce6703a 	and	r19,r3,r19
    dbe0:	98007a26 	beq	r19,zero,ddcc <__subdf3+0x378>
    dbe4:	9809883a 	mov	r4,r19
    dbe8:	000e5540 	call	e554 <__clzsi2>
    dbec:	113ffe04 	addi	r4,r2,-8
    dbf0:	00c007c4 	movi	r3,31
    dbf4:	19007b16 	blt	r3,r4,dde4 <__subdf3+0x390>
    dbf8:	00800804 	movi	r2,32
    dbfc:	1105c83a 	sub	r2,r2,r4
    dc00:	8884d83a 	srl	r2,r17,r2
    dc04:	9906983a 	sll	r3,r19,r4
    dc08:	8922983a 	sll	r17,r17,r4
    dc0c:	10c4b03a 	or	r2,r2,r3
    dc10:	24007816 	blt	r4,r16,ddf4 <__subdf3+0x3a0>
    dc14:	2421c83a 	sub	r16,r4,r16
    dc18:	80c00044 	addi	r3,r16,1
    dc1c:	010007c4 	movi	r4,31
    dc20:	20c09516 	blt	r4,r3,de78 <__subdf3+0x424>
    dc24:	01400804 	movi	r5,32
    dc28:	28cbc83a 	sub	r5,r5,r3
    dc2c:	88c8d83a 	srl	r4,r17,r3
    dc30:	8962983a 	sll	r17,r17,r5
    dc34:	114a983a 	sll	r5,r2,r5
    dc38:	10c6d83a 	srl	r3,r2,r3
    dc3c:	8804c03a 	cmpne	r2,r17,zero
    dc40:	290ab03a 	or	r5,r5,r4
    dc44:	28a2b03a 	or	r17,r5,r2
    dc48:	0021883a 	mov	r16,zero
    dc4c:	003fa206 	br	dad8 <__alt_data_end+0xff00dad8>
    dc50:	2090b03a 	or	r8,r4,r2
    dc54:	40018e26 	beq	r8,zero,e290 <__subdf3+0x83c>
    dc58:	1007883a 	mov	r3,r2
    dc5c:	2023883a 	mov	r17,r4
    dc60:	888001cc 	andi	r2,r17,7
    dc64:	103f9e1e 	bne	r2,zero,dae0 <__alt_data_end+0xff00dae0>
    dc68:	1804977a 	slli	r2,r3,29
    dc6c:	8822d0fa 	srli	r17,r17,3
    dc70:	1810d0fa 	srli	r8,r3,3
    dc74:	9100004c 	andi	r4,r18,1
    dc78:	1444b03a 	or	r2,r2,r17
    dc7c:	00c1ffc4 	movi	r3,2047
    dc80:	80c02826 	beq	r16,r3,dd24 <__subdf3+0x2d0>
    dc84:	01400434 	movhi	r5,16
    dc88:	297fffc4 	addi	r5,r5,-1
    dc8c:	80e0703a 	and	r16,r16,r3
    dc90:	414a703a 	and	r5,r8,r5
    dc94:	003fa806 	br	db38 <__alt_data_end+0xff00db38>
    dc98:	0080630e 	bge	zero,r2,de28 <__subdf3+0x3d4>
    dc9c:	48003026 	beq	r9,zero,dd60 <__subdf3+0x30c>
    dca0:	0101ffc4 	movi	r4,2047
    dca4:	813f8c26 	beq	r16,r4,dad8 <__alt_data_end+0xff00dad8>
    dca8:	29402034 	orhi	r5,r5,128
    dcac:	01000e04 	movi	r4,56
    dcb0:	2080a90e 	bge	r4,r2,df58 <__subdf3+0x504>
    dcb4:	298cb03a 	or	r6,r5,r6
    dcb8:	3012c03a 	cmpne	r9,r6,zero
    dcbc:	0005883a 	mov	r2,zero
    dcc0:	4c53883a 	add	r9,r9,r17
    dcc4:	4c63803a 	cmpltu	r17,r9,r17
    dcc8:	10c7883a 	add	r3,r2,r3
    dccc:	88c7883a 	add	r3,r17,r3
    dcd0:	4823883a 	mov	r17,r9
    dcd4:	1880202c 	andhi	r2,r3,128
    dcd8:	1000d026 	beq	r2,zero,e01c <__subdf3+0x5c8>
    dcdc:	84000044 	addi	r16,r16,1
    dce0:	0081ffc4 	movi	r2,2047
    dce4:	8080fe26 	beq	r16,r2,e0e0 <__subdf3+0x68c>
    dce8:	00bfe034 	movhi	r2,65408
    dcec:	10bfffc4 	addi	r2,r2,-1
    dcf0:	1886703a 	and	r3,r3,r2
    dcf4:	880ad07a 	srli	r5,r17,1
    dcf8:	180497fa 	slli	r2,r3,31
    dcfc:	8900004c 	andi	r4,r17,1
    dd00:	2922b03a 	or	r17,r5,r4
    dd04:	1806d07a 	srli	r3,r3,1
    dd08:	1462b03a 	or	r17,r2,r17
    dd0c:	3825883a 	mov	r18,r7
    dd10:	003f7106 	br	dad8 <__alt_data_end+0xff00dad8>
    dd14:	2984b03a 	or	r2,r5,r6
    dd18:	103f6826 	beq	r2,zero,dabc <__alt_data_end+0xff00dabc>
    dd1c:	39c03fcc 	andi	r7,r7,255
    dd20:	003f6706 	br	dac0 <__alt_data_end+0xff00dac0>
    dd24:	4086b03a 	or	r3,r8,r2
    dd28:	18015226 	beq	r3,zero,e274 <__subdf3+0x820>
    dd2c:	00c00434 	movhi	r3,16
    dd30:	41400234 	orhi	r5,r8,8
    dd34:	18ffffc4 	addi	r3,r3,-1
    dd38:	28ca703a 	and	r5,r5,r3
    dd3c:	003f7e06 	br	db38 <__alt_data_end+0xff00db38>
    dd40:	10bfffc4 	addi	r2,r2,-1
    dd44:	1000491e 	bne	r2,zero,de6c <__subdf3+0x418>
    dd48:	898fc83a 	sub	r7,r17,r6
    dd4c:	89e3803a 	cmpltu	r17,r17,r7
    dd50:	1947c83a 	sub	r3,r3,r5
    dd54:	1c47c83a 	sub	r3,r3,r17
    dd58:	3823883a 	mov	r17,r7
    dd5c:	003f9b06 	br	dbcc <__alt_data_end+0xff00dbcc>
    dd60:	2988b03a 	or	r4,r5,r6
    dd64:	203f5c26 	beq	r4,zero,dad8 <__alt_data_end+0xff00dad8>
    dd68:	10bfffc4 	addi	r2,r2,-1
    dd6c:	1000931e 	bne	r2,zero,dfbc <__subdf3+0x568>
    dd70:	898d883a 	add	r6,r17,r6
    dd74:	3463803a 	cmpltu	r17,r6,r17
    dd78:	1947883a 	add	r3,r3,r5
    dd7c:	88c7883a 	add	r3,r17,r3
    dd80:	3023883a 	mov	r17,r6
    dd84:	003fd306 	br	dcd4 <__alt_data_end+0xff00dcd4>
    dd88:	1000541e 	bne	r2,zero,dedc <__subdf3+0x488>
    dd8c:	80800044 	addi	r2,r16,1
    dd90:	1081ffcc 	andi	r2,r2,2047
    dd94:	01000044 	movi	r4,1
    dd98:	2080a20e 	bge	r4,r2,e024 <__subdf3+0x5d0>
    dd9c:	8989c83a 	sub	r4,r17,r6
    dda0:	8905803a 	cmpltu	r2,r17,r4
    dda4:	1967c83a 	sub	r19,r3,r5
    dda8:	98a7c83a 	sub	r19,r19,r2
    ddac:	9880202c 	andhi	r2,r19,128
    ddb0:	10006326 	beq	r2,zero,df40 <__subdf3+0x4ec>
    ddb4:	3463c83a 	sub	r17,r6,r17
    ddb8:	28c7c83a 	sub	r3,r5,r3
    ddbc:	344d803a 	cmpltu	r6,r6,r17
    ddc0:	19a7c83a 	sub	r19,r3,r6
    ddc4:	3825883a 	mov	r18,r7
    ddc8:	983f861e 	bne	r19,zero,dbe4 <__alt_data_end+0xff00dbe4>
    ddcc:	8809883a 	mov	r4,r17
    ddd0:	000e5540 	call	e554 <__clzsi2>
    ddd4:	10800804 	addi	r2,r2,32
    ddd8:	113ffe04 	addi	r4,r2,-8
    dddc:	00c007c4 	movi	r3,31
    dde0:	193f850e 	bge	r3,r4,dbf8 <__alt_data_end+0xff00dbf8>
    dde4:	10bff604 	addi	r2,r2,-40
    dde8:	8884983a 	sll	r2,r17,r2
    ddec:	0023883a 	mov	r17,zero
    ddf0:	243f880e 	bge	r4,r16,dc14 <__alt_data_end+0xff00dc14>
    ddf4:	00ffe034 	movhi	r3,65408
    ddf8:	18ffffc4 	addi	r3,r3,-1
    ddfc:	8121c83a 	sub	r16,r16,r4
    de00:	10c6703a 	and	r3,r2,r3
    de04:	003f3406 	br	dad8 <__alt_data_end+0xff00dad8>
    de08:	9100004c 	andi	r4,r18,1
    de0c:	000b883a 	mov	r5,zero
    de10:	0005883a 	mov	r2,zero
    de14:	003f4806 	br	db38 <__alt_data_end+0xff00db38>
    de18:	298cb03a 	or	r6,r5,r6
    de1c:	300cc03a 	cmpne	r6,r6,zero
    de20:	0005883a 	mov	r2,zero
    de24:	003f6406 	br	dbb8 <__alt_data_end+0xff00dbb8>
    de28:	10009a1e 	bne	r2,zero,e094 <__subdf3+0x640>
    de2c:	82400044 	addi	r9,r16,1
    de30:	4881ffcc 	andi	r2,r9,2047
    de34:	02800044 	movi	r10,1
    de38:	5080670e 	bge	r10,r2,dfd8 <__subdf3+0x584>
    de3c:	0081ffc4 	movi	r2,2047
    de40:	4880af26 	beq	r9,r2,e100 <__subdf3+0x6ac>
    de44:	898d883a 	add	r6,r17,r6
    de48:	1945883a 	add	r2,r3,r5
    de4c:	3447803a 	cmpltu	r3,r6,r17
    de50:	1887883a 	add	r3,r3,r2
    de54:	182297fa 	slli	r17,r3,31
    de58:	300cd07a 	srli	r6,r6,1
    de5c:	1806d07a 	srli	r3,r3,1
    de60:	4821883a 	mov	r16,r9
    de64:	89a2b03a 	or	r17,r17,r6
    de68:	003f1b06 	br	dad8 <__alt_data_end+0xff00dad8>
    de6c:	0101ffc4 	movi	r4,2047
    de70:	813f441e 	bne	r16,r4,db84 <__alt_data_end+0xff00db84>
    de74:	003f1806 	br	dad8 <__alt_data_end+0xff00dad8>
    de78:	843ff844 	addi	r16,r16,-31
    de7c:	01400804 	movi	r5,32
    de80:	1408d83a 	srl	r4,r2,r16
    de84:	19405026 	beq	r3,r5,dfc8 <__subdf3+0x574>
    de88:	01401004 	movi	r5,64
    de8c:	28c7c83a 	sub	r3,r5,r3
    de90:	10c4983a 	sll	r2,r2,r3
    de94:	88a2b03a 	or	r17,r17,r2
    de98:	8822c03a 	cmpne	r17,r17,zero
    de9c:	2462b03a 	or	r17,r4,r17
    dea0:	0007883a 	mov	r3,zero
    dea4:	0021883a 	mov	r16,zero
    dea8:	003f6d06 	br	dc60 <__alt_data_end+0xff00dc60>
    deac:	11fff804 	addi	r7,r2,-32
    deb0:	01000804 	movi	r4,32
    deb4:	29ced83a 	srl	r7,r5,r7
    deb8:	11004526 	beq	r2,r4,dfd0 <__subdf3+0x57c>
    debc:	01001004 	movi	r4,64
    dec0:	2089c83a 	sub	r4,r4,r2
    dec4:	2904983a 	sll	r2,r5,r4
    dec8:	118cb03a 	or	r6,r2,r6
    decc:	300cc03a 	cmpne	r6,r6,zero
    ded0:	398cb03a 	or	r6,r7,r6
    ded4:	0005883a 	mov	r2,zero
    ded8:	003f3706 	br	dbb8 <__alt_data_end+0xff00dbb8>
    dedc:	80002a26 	beq	r16,zero,df88 <__subdf3+0x534>
    dee0:	0101ffc4 	movi	r4,2047
    dee4:	49006626 	beq	r9,r4,e080 <__subdf3+0x62c>
    dee8:	0085c83a 	sub	r2,zero,r2
    deec:	18c02034 	orhi	r3,r3,128
    def0:	01000e04 	movi	r4,56
    def4:	20807e16 	blt	r4,r2,e0f0 <__subdf3+0x69c>
    def8:	010007c4 	movi	r4,31
    defc:	2080e716 	blt	r4,r2,e29c <__subdf3+0x848>
    df00:	01000804 	movi	r4,32
    df04:	2089c83a 	sub	r4,r4,r2
    df08:	1914983a 	sll	r10,r3,r4
    df0c:	8890d83a 	srl	r8,r17,r2
    df10:	8908983a 	sll	r4,r17,r4
    df14:	1884d83a 	srl	r2,r3,r2
    df18:	5222b03a 	or	r17,r10,r8
    df1c:	2006c03a 	cmpne	r3,r4,zero
    df20:	88e2b03a 	or	r17,r17,r3
    df24:	3463c83a 	sub	r17,r6,r17
    df28:	2885c83a 	sub	r2,r5,r2
    df2c:	344d803a 	cmpltu	r6,r6,r17
    df30:	1187c83a 	sub	r3,r2,r6
    df34:	4821883a 	mov	r16,r9
    df38:	3825883a 	mov	r18,r7
    df3c:	003f2306 	br	dbcc <__alt_data_end+0xff00dbcc>
    df40:	24d0b03a 	or	r8,r4,r19
    df44:	40001b1e 	bne	r8,zero,dfb4 <__subdf3+0x560>
    df48:	0005883a 	mov	r2,zero
    df4c:	0009883a 	mov	r4,zero
    df50:	0021883a 	mov	r16,zero
    df54:	003f4906 	br	dc7c <__alt_data_end+0xff00dc7c>
    df58:	010007c4 	movi	r4,31
    df5c:	20803a16 	blt	r4,r2,e048 <__subdf3+0x5f4>
    df60:	01000804 	movi	r4,32
    df64:	2089c83a 	sub	r4,r4,r2
    df68:	2912983a 	sll	r9,r5,r4
    df6c:	3090d83a 	srl	r8,r6,r2
    df70:	3108983a 	sll	r4,r6,r4
    df74:	2884d83a 	srl	r2,r5,r2
    df78:	4a12b03a 	or	r9,r9,r8
    df7c:	2008c03a 	cmpne	r4,r4,zero
    df80:	4912b03a 	or	r9,r9,r4
    df84:	003f4e06 	br	dcc0 <__alt_data_end+0xff00dcc0>
    df88:	1c48b03a 	or	r4,r3,r17
    df8c:	20003c26 	beq	r4,zero,e080 <__subdf3+0x62c>
    df90:	0084303a 	nor	r2,zero,r2
    df94:	1000381e 	bne	r2,zero,e078 <__subdf3+0x624>
    df98:	3463c83a 	sub	r17,r6,r17
    df9c:	28c5c83a 	sub	r2,r5,r3
    dfa0:	344d803a 	cmpltu	r6,r6,r17
    dfa4:	1187c83a 	sub	r3,r2,r6
    dfa8:	4821883a 	mov	r16,r9
    dfac:	3825883a 	mov	r18,r7
    dfb0:	003f0606 	br	dbcc <__alt_data_end+0xff00dbcc>
    dfb4:	2023883a 	mov	r17,r4
    dfb8:	003f0906 	br	dbe0 <__alt_data_end+0xff00dbe0>
    dfbc:	0101ffc4 	movi	r4,2047
    dfc0:	813f3a1e 	bne	r16,r4,dcac <__alt_data_end+0xff00dcac>
    dfc4:	003ec406 	br	dad8 <__alt_data_end+0xff00dad8>
    dfc8:	0005883a 	mov	r2,zero
    dfcc:	003fb106 	br	de94 <__alt_data_end+0xff00de94>
    dfd0:	0005883a 	mov	r2,zero
    dfd4:	003fbc06 	br	dec8 <__alt_data_end+0xff00dec8>
    dfd8:	1c44b03a 	or	r2,r3,r17
    dfdc:	80008e1e 	bne	r16,zero,e218 <__subdf3+0x7c4>
    dfe0:	1000c826 	beq	r2,zero,e304 <__subdf3+0x8b0>
    dfe4:	2984b03a 	or	r2,r5,r6
    dfe8:	103ebb26 	beq	r2,zero,dad8 <__alt_data_end+0xff00dad8>
    dfec:	8989883a 	add	r4,r17,r6
    dff0:	1945883a 	add	r2,r3,r5
    dff4:	2447803a 	cmpltu	r3,r4,r17
    dff8:	1887883a 	add	r3,r3,r2
    dffc:	1880202c 	andhi	r2,r3,128
    e000:	2023883a 	mov	r17,r4
    e004:	103f1626 	beq	r2,zero,dc60 <__alt_data_end+0xff00dc60>
    e008:	00bfe034 	movhi	r2,65408
    e00c:	10bfffc4 	addi	r2,r2,-1
    e010:	5021883a 	mov	r16,r10
    e014:	1886703a 	and	r3,r3,r2
    e018:	003eaf06 	br	dad8 <__alt_data_end+0xff00dad8>
    e01c:	3825883a 	mov	r18,r7
    e020:	003f0f06 	br	dc60 <__alt_data_end+0xff00dc60>
    e024:	1c44b03a 	or	r2,r3,r17
    e028:	8000251e 	bne	r16,zero,e0c0 <__subdf3+0x66c>
    e02c:	1000661e 	bne	r2,zero,e1c8 <__subdf3+0x774>
    e030:	2990b03a 	or	r8,r5,r6
    e034:	40009626 	beq	r8,zero,e290 <__subdf3+0x83c>
    e038:	2807883a 	mov	r3,r5
    e03c:	3023883a 	mov	r17,r6
    e040:	3825883a 	mov	r18,r7
    e044:	003ea406 	br	dad8 <__alt_data_end+0xff00dad8>
    e048:	127ff804 	addi	r9,r2,-32
    e04c:	01000804 	movi	r4,32
    e050:	2a52d83a 	srl	r9,r5,r9
    e054:	11008c26 	beq	r2,r4,e288 <__subdf3+0x834>
    e058:	01001004 	movi	r4,64
    e05c:	2085c83a 	sub	r2,r4,r2
    e060:	2884983a 	sll	r2,r5,r2
    e064:	118cb03a 	or	r6,r2,r6
    e068:	300cc03a 	cmpne	r6,r6,zero
    e06c:	4992b03a 	or	r9,r9,r6
    e070:	0005883a 	mov	r2,zero
    e074:	003f1206 	br	dcc0 <__alt_data_end+0xff00dcc0>
    e078:	0101ffc4 	movi	r4,2047
    e07c:	493f9c1e 	bne	r9,r4,def0 <__alt_data_end+0xff00def0>
    e080:	2807883a 	mov	r3,r5
    e084:	3023883a 	mov	r17,r6
    e088:	4821883a 	mov	r16,r9
    e08c:	3825883a 	mov	r18,r7
    e090:	003e9106 	br	dad8 <__alt_data_end+0xff00dad8>
    e094:	80001f1e 	bne	r16,zero,e114 <__subdf3+0x6c0>
    e098:	1c48b03a 	or	r4,r3,r17
    e09c:	20005a26 	beq	r4,zero,e208 <__subdf3+0x7b4>
    e0a0:	0084303a 	nor	r2,zero,r2
    e0a4:	1000561e 	bne	r2,zero,e200 <__subdf3+0x7ac>
    e0a8:	89a3883a 	add	r17,r17,r6
    e0ac:	1945883a 	add	r2,r3,r5
    e0b0:	898d803a 	cmpltu	r6,r17,r6
    e0b4:	3087883a 	add	r3,r6,r2
    e0b8:	4821883a 	mov	r16,r9
    e0bc:	003f0506 	br	dcd4 <__alt_data_end+0xff00dcd4>
    e0c0:	10002b1e 	bne	r2,zero,e170 <__subdf3+0x71c>
    e0c4:	2984b03a 	or	r2,r5,r6
    e0c8:	10008026 	beq	r2,zero,e2cc <__subdf3+0x878>
    e0cc:	2807883a 	mov	r3,r5
    e0d0:	3023883a 	mov	r17,r6
    e0d4:	3825883a 	mov	r18,r7
    e0d8:	0401ffc4 	movi	r16,2047
    e0dc:	003e7e06 	br	dad8 <__alt_data_end+0xff00dad8>
    e0e0:	3809883a 	mov	r4,r7
    e0e4:	0011883a 	mov	r8,zero
    e0e8:	0005883a 	mov	r2,zero
    e0ec:	003ee306 	br	dc7c <__alt_data_end+0xff00dc7c>
    e0f0:	1c62b03a 	or	r17,r3,r17
    e0f4:	8822c03a 	cmpne	r17,r17,zero
    e0f8:	0005883a 	mov	r2,zero
    e0fc:	003f8906 	br	df24 <__alt_data_end+0xff00df24>
    e100:	3809883a 	mov	r4,r7
    e104:	4821883a 	mov	r16,r9
    e108:	0011883a 	mov	r8,zero
    e10c:	0005883a 	mov	r2,zero
    e110:	003eda06 	br	dc7c <__alt_data_end+0xff00dc7c>
    e114:	0101ffc4 	movi	r4,2047
    e118:	49003b26 	beq	r9,r4,e208 <__subdf3+0x7b4>
    e11c:	0085c83a 	sub	r2,zero,r2
    e120:	18c02034 	orhi	r3,r3,128
    e124:	01000e04 	movi	r4,56
    e128:	20806e16 	blt	r4,r2,e2e4 <__subdf3+0x890>
    e12c:	010007c4 	movi	r4,31
    e130:	20807716 	blt	r4,r2,e310 <__subdf3+0x8bc>
    e134:	01000804 	movi	r4,32
    e138:	2089c83a 	sub	r4,r4,r2
    e13c:	1914983a 	sll	r10,r3,r4
    e140:	8890d83a 	srl	r8,r17,r2
    e144:	8908983a 	sll	r4,r17,r4
    e148:	1884d83a 	srl	r2,r3,r2
    e14c:	5222b03a 	or	r17,r10,r8
    e150:	2006c03a 	cmpne	r3,r4,zero
    e154:	88e2b03a 	or	r17,r17,r3
    e158:	89a3883a 	add	r17,r17,r6
    e15c:	1145883a 	add	r2,r2,r5
    e160:	898d803a 	cmpltu	r6,r17,r6
    e164:	3087883a 	add	r3,r6,r2
    e168:	4821883a 	mov	r16,r9
    e16c:	003ed906 	br	dcd4 <__alt_data_end+0xff00dcd4>
    e170:	2984b03a 	or	r2,r5,r6
    e174:	10004226 	beq	r2,zero,e280 <__subdf3+0x82c>
    e178:	1808d0fa 	srli	r4,r3,3
    e17c:	8822d0fa 	srli	r17,r17,3
    e180:	1806977a 	slli	r3,r3,29
    e184:	2080022c 	andhi	r2,r4,8
    e188:	1c62b03a 	or	r17,r3,r17
    e18c:	10000826 	beq	r2,zero,e1b0 <__subdf3+0x75c>
    e190:	2812d0fa 	srli	r9,r5,3
    e194:	4880022c 	andhi	r2,r9,8
    e198:	1000051e 	bne	r2,zero,e1b0 <__subdf3+0x75c>
    e19c:	300cd0fa 	srli	r6,r6,3
    e1a0:	2804977a 	slli	r2,r5,29
    e1a4:	4809883a 	mov	r4,r9
    e1a8:	3825883a 	mov	r18,r7
    e1ac:	11a2b03a 	or	r17,r2,r6
    e1b0:	8806d77a 	srli	r3,r17,29
    e1b4:	200890fa 	slli	r4,r4,3
    e1b8:	882290fa 	slli	r17,r17,3
    e1bc:	0401ffc4 	movi	r16,2047
    e1c0:	1906b03a 	or	r3,r3,r4
    e1c4:	003e4406 	br	dad8 <__alt_data_end+0xff00dad8>
    e1c8:	2984b03a 	or	r2,r5,r6
    e1cc:	103e4226 	beq	r2,zero,dad8 <__alt_data_end+0xff00dad8>
    e1d0:	8989c83a 	sub	r4,r17,r6
    e1d4:	8911803a 	cmpltu	r8,r17,r4
    e1d8:	1945c83a 	sub	r2,r3,r5
    e1dc:	1205c83a 	sub	r2,r2,r8
    e1e0:	1200202c 	andhi	r8,r2,128
    e1e4:	403e9a26 	beq	r8,zero,dc50 <__alt_data_end+0xff00dc50>
    e1e8:	3463c83a 	sub	r17,r6,r17
    e1ec:	28c5c83a 	sub	r2,r5,r3
    e1f0:	344d803a 	cmpltu	r6,r6,r17
    e1f4:	1187c83a 	sub	r3,r2,r6
    e1f8:	3825883a 	mov	r18,r7
    e1fc:	003e3606 	br	dad8 <__alt_data_end+0xff00dad8>
    e200:	0101ffc4 	movi	r4,2047
    e204:	493fc71e 	bne	r9,r4,e124 <__alt_data_end+0xff00e124>
    e208:	2807883a 	mov	r3,r5
    e20c:	3023883a 	mov	r17,r6
    e210:	4821883a 	mov	r16,r9
    e214:	003e3006 	br	dad8 <__alt_data_end+0xff00dad8>
    e218:	10003626 	beq	r2,zero,e2f4 <__subdf3+0x8a0>
    e21c:	2984b03a 	or	r2,r5,r6
    e220:	10001726 	beq	r2,zero,e280 <__subdf3+0x82c>
    e224:	1808d0fa 	srli	r4,r3,3
    e228:	8822d0fa 	srli	r17,r17,3
    e22c:	1806977a 	slli	r3,r3,29
    e230:	2080022c 	andhi	r2,r4,8
    e234:	1c62b03a 	or	r17,r3,r17
    e238:	10000726 	beq	r2,zero,e258 <__subdf3+0x804>
    e23c:	2812d0fa 	srli	r9,r5,3
    e240:	4880022c 	andhi	r2,r9,8
    e244:	1000041e 	bne	r2,zero,e258 <__subdf3+0x804>
    e248:	300cd0fa 	srli	r6,r6,3
    e24c:	2804977a 	slli	r2,r5,29
    e250:	4809883a 	mov	r4,r9
    e254:	11a2b03a 	or	r17,r2,r6
    e258:	8806d77a 	srli	r3,r17,29
    e25c:	200890fa 	slli	r4,r4,3
    e260:	882290fa 	slli	r17,r17,3
    e264:	3825883a 	mov	r18,r7
    e268:	1906b03a 	or	r3,r3,r4
    e26c:	0401ffc4 	movi	r16,2047
    e270:	003e1906 	br	dad8 <__alt_data_end+0xff00dad8>
    e274:	000b883a 	mov	r5,zero
    e278:	0005883a 	mov	r2,zero
    e27c:	003e2e06 	br	db38 <__alt_data_end+0xff00db38>
    e280:	0401ffc4 	movi	r16,2047
    e284:	003e1406 	br	dad8 <__alt_data_end+0xff00dad8>
    e288:	0005883a 	mov	r2,zero
    e28c:	003f7506 	br	e064 <__alt_data_end+0xff00e064>
    e290:	0005883a 	mov	r2,zero
    e294:	0009883a 	mov	r4,zero
    e298:	003e7806 	br	dc7c <__alt_data_end+0xff00dc7c>
    e29c:	123ff804 	addi	r8,r2,-32
    e2a0:	01000804 	movi	r4,32
    e2a4:	1a10d83a 	srl	r8,r3,r8
    e2a8:	11002526 	beq	r2,r4,e340 <__subdf3+0x8ec>
    e2ac:	01001004 	movi	r4,64
    e2b0:	2085c83a 	sub	r2,r4,r2
    e2b4:	1884983a 	sll	r2,r3,r2
    e2b8:	1444b03a 	or	r2,r2,r17
    e2bc:	1004c03a 	cmpne	r2,r2,zero
    e2c0:	40a2b03a 	or	r17,r8,r2
    e2c4:	0005883a 	mov	r2,zero
    e2c8:	003f1606 	br	df24 <__alt_data_end+0xff00df24>
    e2cc:	02000434 	movhi	r8,16
    e2d0:	0009883a 	mov	r4,zero
    e2d4:	423fffc4 	addi	r8,r8,-1
    e2d8:	00bfffc4 	movi	r2,-1
    e2dc:	0401ffc4 	movi	r16,2047
    e2e0:	003e6606 	br	dc7c <__alt_data_end+0xff00dc7c>
    e2e4:	1c62b03a 	or	r17,r3,r17
    e2e8:	8822c03a 	cmpne	r17,r17,zero
    e2ec:	0005883a 	mov	r2,zero
    e2f0:	003f9906 	br	e158 <__alt_data_end+0xff00e158>
    e2f4:	2807883a 	mov	r3,r5
    e2f8:	3023883a 	mov	r17,r6
    e2fc:	0401ffc4 	movi	r16,2047
    e300:	003df506 	br	dad8 <__alt_data_end+0xff00dad8>
    e304:	2807883a 	mov	r3,r5
    e308:	3023883a 	mov	r17,r6
    e30c:	003df206 	br	dad8 <__alt_data_end+0xff00dad8>
    e310:	123ff804 	addi	r8,r2,-32
    e314:	01000804 	movi	r4,32
    e318:	1a10d83a 	srl	r8,r3,r8
    e31c:	11000a26 	beq	r2,r4,e348 <__subdf3+0x8f4>
    e320:	01001004 	movi	r4,64
    e324:	2085c83a 	sub	r2,r4,r2
    e328:	1884983a 	sll	r2,r3,r2
    e32c:	1444b03a 	or	r2,r2,r17
    e330:	1004c03a 	cmpne	r2,r2,zero
    e334:	40a2b03a 	or	r17,r8,r2
    e338:	0005883a 	mov	r2,zero
    e33c:	003f8606 	br	e158 <__alt_data_end+0xff00e158>
    e340:	0005883a 	mov	r2,zero
    e344:	003fdc06 	br	e2b8 <__alt_data_end+0xff00e2b8>
    e348:	0005883a 	mov	r2,zero
    e34c:	003ff706 	br	e32c <__alt_data_end+0xff00e32c>

0000e350 <__fixdfsi>:
    e350:	280cd53a 	srli	r6,r5,20
    e354:	00c00434 	movhi	r3,16
    e358:	18ffffc4 	addi	r3,r3,-1
    e35c:	3181ffcc 	andi	r6,r6,2047
    e360:	01c0ff84 	movi	r7,1022
    e364:	28c6703a 	and	r3,r5,r3
    e368:	280ad7fa 	srli	r5,r5,31
    e36c:	3980120e 	bge	r7,r6,e3b8 <__fixdfsi+0x68>
    e370:	00810744 	movi	r2,1053
    e374:	11800c16 	blt	r2,r6,e3a8 <__fixdfsi+0x58>
    e378:	00810cc4 	movi	r2,1075
    e37c:	1185c83a 	sub	r2,r2,r6
    e380:	01c007c4 	movi	r7,31
    e384:	18c00434 	orhi	r3,r3,16
    e388:	38800d16 	blt	r7,r2,e3c0 <__fixdfsi+0x70>
    e38c:	31befb44 	addi	r6,r6,-1043
    e390:	2084d83a 	srl	r2,r4,r2
    e394:	1986983a 	sll	r3,r3,r6
    e398:	1884b03a 	or	r2,r3,r2
    e39c:	28000726 	beq	r5,zero,e3bc <__fixdfsi+0x6c>
    e3a0:	0085c83a 	sub	r2,zero,r2
    e3a4:	f800283a 	ret
    e3a8:	00a00034 	movhi	r2,32768
    e3ac:	10bfffc4 	addi	r2,r2,-1
    e3b0:	2885883a 	add	r2,r5,r2
    e3b4:	f800283a 	ret
    e3b8:	0005883a 	mov	r2,zero
    e3bc:	f800283a 	ret
    e3c0:	008104c4 	movi	r2,1043
    e3c4:	1185c83a 	sub	r2,r2,r6
    e3c8:	1884d83a 	srl	r2,r3,r2
    e3cc:	003ff306 	br	e39c <__alt_data_end+0xff00e39c>

0000e3d0 <__floatsidf>:
    e3d0:	defffd04 	addi	sp,sp,-12
    e3d4:	dfc00215 	stw	ra,8(sp)
    e3d8:	dc400115 	stw	r17,4(sp)
    e3dc:	dc000015 	stw	r16,0(sp)
    e3e0:	20002b26 	beq	r4,zero,e490 <__floatsidf+0xc0>
    e3e4:	2023883a 	mov	r17,r4
    e3e8:	2020d7fa 	srli	r16,r4,31
    e3ec:	20002d16 	blt	r4,zero,e4a4 <__floatsidf+0xd4>
    e3f0:	8809883a 	mov	r4,r17
    e3f4:	000e5540 	call	e554 <__clzsi2>
    e3f8:	01410784 	movi	r5,1054
    e3fc:	288bc83a 	sub	r5,r5,r2
    e400:	01010cc4 	movi	r4,1075
    e404:	2149c83a 	sub	r4,r4,r5
    e408:	00c007c4 	movi	r3,31
    e40c:	1900160e 	bge	r3,r4,e468 <__floatsidf+0x98>
    e410:	00c104c4 	movi	r3,1043
    e414:	1947c83a 	sub	r3,r3,r5
    e418:	88c6983a 	sll	r3,r17,r3
    e41c:	00800434 	movhi	r2,16
    e420:	10bfffc4 	addi	r2,r2,-1
    e424:	1886703a 	and	r3,r3,r2
    e428:	2941ffcc 	andi	r5,r5,2047
    e42c:	800d883a 	mov	r6,r16
    e430:	0005883a 	mov	r2,zero
    e434:	280a953a 	slli	r5,r5,20
    e438:	31803fcc 	andi	r6,r6,255
    e43c:	01000434 	movhi	r4,16
    e440:	300c97fa 	slli	r6,r6,31
    e444:	213fffc4 	addi	r4,r4,-1
    e448:	1906703a 	and	r3,r3,r4
    e44c:	1946b03a 	or	r3,r3,r5
    e450:	1986b03a 	or	r3,r3,r6
    e454:	dfc00217 	ldw	ra,8(sp)
    e458:	dc400117 	ldw	r17,4(sp)
    e45c:	dc000017 	ldw	r16,0(sp)
    e460:	dec00304 	addi	sp,sp,12
    e464:	f800283a 	ret
    e468:	00c002c4 	movi	r3,11
    e46c:	1887c83a 	sub	r3,r3,r2
    e470:	88c6d83a 	srl	r3,r17,r3
    e474:	8904983a 	sll	r2,r17,r4
    e478:	01000434 	movhi	r4,16
    e47c:	213fffc4 	addi	r4,r4,-1
    e480:	2941ffcc 	andi	r5,r5,2047
    e484:	1906703a 	and	r3,r3,r4
    e488:	800d883a 	mov	r6,r16
    e48c:	003fe906 	br	e434 <__alt_data_end+0xff00e434>
    e490:	000d883a 	mov	r6,zero
    e494:	000b883a 	mov	r5,zero
    e498:	0007883a 	mov	r3,zero
    e49c:	0005883a 	mov	r2,zero
    e4a0:	003fe406 	br	e434 <__alt_data_end+0xff00e434>
    e4a4:	0123c83a 	sub	r17,zero,r4
    e4a8:	003fd106 	br	e3f0 <__alt_data_end+0xff00e3f0>

0000e4ac <__floatunsidf>:
    e4ac:	defffe04 	addi	sp,sp,-8
    e4b0:	dc000015 	stw	r16,0(sp)
    e4b4:	dfc00115 	stw	ra,4(sp)
    e4b8:	2021883a 	mov	r16,r4
    e4bc:	20002226 	beq	r4,zero,e548 <__floatunsidf+0x9c>
    e4c0:	000e5540 	call	e554 <__clzsi2>
    e4c4:	01010784 	movi	r4,1054
    e4c8:	2089c83a 	sub	r4,r4,r2
    e4cc:	01810cc4 	movi	r6,1075
    e4d0:	310dc83a 	sub	r6,r6,r4
    e4d4:	00c007c4 	movi	r3,31
    e4d8:	1980120e 	bge	r3,r6,e524 <__floatunsidf+0x78>
    e4dc:	00c104c4 	movi	r3,1043
    e4e0:	1907c83a 	sub	r3,r3,r4
    e4e4:	80ca983a 	sll	r5,r16,r3
    e4e8:	00800434 	movhi	r2,16
    e4ec:	10bfffc4 	addi	r2,r2,-1
    e4f0:	2101ffcc 	andi	r4,r4,2047
    e4f4:	0021883a 	mov	r16,zero
    e4f8:	288a703a 	and	r5,r5,r2
    e4fc:	2008953a 	slli	r4,r4,20
    e500:	00c00434 	movhi	r3,16
    e504:	18ffffc4 	addi	r3,r3,-1
    e508:	28c6703a 	and	r3,r5,r3
    e50c:	8005883a 	mov	r2,r16
    e510:	1906b03a 	or	r3,r3,r4
    e514:	dfc00117 	ldw	ra,4(sp)
    e518:	dc000017 	ldw	r16,0(sp)
    e51c:	dec00204 	addi	sp,sp,8
    e520:	f800283a 	ret
    e524:	00c002c4 	movi	r3,11
    e528:	188bc83a 	sub	r5,r3,r2
    e52c:	814ad83a 	srl	r5,r16,r5
    e530:	00c00434 	movhi	r3,16
    e534:	18ffffc4 	addi	r3,r3,-1
    e538:	81a0983a 	sll	r16,r16,r6
    e53c:	2101ffcc 	andi	r4,r4,2047
    e540:	28ca703a 	and	r5,r5,r3
    e544:	003fed06 	br	e4fc <__alt_data_end+0xff00e4fc>
    e548:	0009883a 	mov	r4,zero
    e54c:	000b883a 	mov	r5,zero
    e550:	003fea06 	br	e4fc <__alt_data_end+0xff00e4fc>

0000e554 <__clzsi2>:
    e554:	00bfffd4 	movui	r2,65535
    e558:	11000536 	bltu	r2,r4,e570 <__clzsi2+0x1c>
    e55c:	00803fc4 	movi	r2,255
    e560:	11000f36 	bltu	r2,r4,e5a0 <__clzsi2+0x4c>
    e564:	00800804 	movi	r2,32
    e568:	0007883a 	mov	r3,zero
    e56c:	00000506 	br	e584 <__clzsi2+0x30>
    e570:	00804034 	movhi	r2,256
    e574:	10bfffc4 	addi	r2,r2,-1
    e578:	11000c2e 	bgeu	r2,r4,e5ac <__clzsi2+0x58>
    e57c:	00800204 	movi	r2,8
    e580:	00c00604 	movi	r3,24
    e584:	20c8d83a 	srl	r4,r4,r3
    e588:	00c00074 	movhi	r3,1
    e58c:	18c5a004 	addi	r3,r3,5760
    e590:	1909883a 	add	r4,r3,r4
    e594:	20c00003 	ldbu	r3,0(r4)
    e598:	10c5c83a 	sub	r2,r2,r3
    e59c:	f800283a 	ret
    e5a0:	00800604 	movi	r2,24
    e5a4:	00c00204 	movi	r3,8
    e5a8:	003ff606 	br	e584 <__alt_data_end+0xff00e584>
    e5ac:	00800404 	movi	r2,16
    e5b0:	1007883a 	mov	r3,r2
    e5b4:	003ff306 	br	e584 <__alt_data_end+0xff00e584>

0000e5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e5b8:	defffe04 	addi	sp,sp,-8
    e5bc:	dfc00115 	stw	ra,4(sp)
    e5c0:	df000015 	stw	fp,0(sp)
    e5c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e5c8:	d0a00b17 	ldw	r2,-32724(gp)
    e5cc:	10000326 	beq	r2,zero,e5dc <alt_get_errno+0x24>
    e5d0:	d0a00b17 	ldw	r2,-32724(gp)
    e5d4:	103ee83a 	callr	r2
    e5d8:	00000106 	br	e5e0 <alt_get_errno+0x28>
    e5dc:	d0a72004 	addi	r2,gp,-25472
}
    e5e0:	e037883a 	mov	sp,fp
    e5e4:	dfc00117 	ldw	ra,4(sp)
    e5e8:	df000017 	ldw	fp,0(sp)
    e5ec:	dec00204 	addi	sp,sp,8
    e5f0:	f800283a 	ret

0000e5f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e5f4:	defffb04 	addi	sp,sp,-20
    e5f8:	dfc00415 	stw	ra,16(sp)
    e5fc:	df000315 	stw	fp,12(sp)
    e600:	df000304 	addi	fp,sp,12
    e604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e608:	e0bfff17 	ldw	r2,-4(fp)
    e60c:	10000616 	blt	r2,zero,e628 <close+0x34>
    e610:	e0bfff17 	ldw	r2,-4(fp)
    e614:	10c00324 	muli	r3,r2,12
    e618:	00800074 	movhi	r2,1
    e61c:	10885e04 	addi	r2,r2,8568
    e620:	1885883a 	add	r2,r3,r2
    e624:	00000106 	br	e62c <close+0x38>
    e628:	0005883a 	mov	r2,zero
    e62c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e630:	e0bffd17 	ldw	r2,-12(fp)
    e634:	10001926 	beq	r2,zero,e69c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e638:	e0bffd17 	ldw	r2,-12(fp)
    e63c:	10800017 	ldw	r2,0(r2)
    e640:	10800417 	ldw	r2,16(r2)
    e644:	10000626 	beq	r2,zero,e660 <close+0x6c>
    e648:	e0bffd17 	ldw	r2,-12(fp)
    e64c:	10800017 	ldw	r2,0(r2)
    e650:	10800417 	ldw	r2,16(r2)
    e654:	e13ffd17 	ldw	r4,-12(fp)
    e658:	103ee83a 	callr	r2
    e65c:	00000106 	br	e664 <close+0x70>
    e660:	0005883a 	mov	r2,zero
    e664:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e668:	e13fff17 	ldw	r4,-4(fp)
    e66c:	000ecb40 	call	ecb4 <alt_release_fd>
    if (rval < 0)
    e670:	e0bffe17 	ldw	r2,-8(fp)
    e674:	1000070e 	bge	r2,zero,e694 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e678:	000e5b80 	call	e5b8 <alt_get_errno>
    e67c:	1007883a 	mov	r3,r2
    e680:	e0bffe17 	ldw	r2,-8(fp)
    e684:	0085c83a 	sub	r2,zero,r2
    e688:	18800015 	stw	r2,0(r3)
      return -1;
    e68c:	00bfffc4 	movi	r2,-1
    e690:	00000706 	br	e6b0 <close+0xbc>
    }
    return 0;
    e694:	0005883a 	mov	r2,zero
    e698:	00000506 	br	e6b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e69c:	000e5b80 	call	e5b8 <alt_get_errno>
    e6a0:	1007883a 	mov	r3,r2
    e6a4:	00801444 	movi	r2,81
    e6a8:	18800015 	stw	r2,0(r3)
    return -1;
    e6ac:	00bfffc4 	movi	r2,-1
  }
}
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	dfc00117 	ldw	ra,4(sp)
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00204 	addi	sp,sp,8
    e6c0:	f800283a 	ret

0000e6c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e6c4:	defffc04 	addi	sp,sp,-16
    e6c8:	df000315 	stw	fp,12(sp)
    e6cc:	df000304 	addi	fp,sp,12
    e6d0:	e13ffd15 	stw	r4,-12(fp)
    e6d4:	e17ffe15 	stw	r5,-8(fp)
    e6d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e6dc:	e0bfff17 	ldw	r2,-4(fp)
}
    e6e0:	e037883a 	mov	sp,fp
    e6e4:	df000017 	ldw	fp,0(sp)
    e6e8:	dec00104 	addi	sp,sp,4
    e6ec:	f800283a 	ret

0000e6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e6f0:	defffe04 	addi	sp,sp,-8
    e6f4:	dfc00115 	stw	ra,4(sp)
    e6f8:	df000015 	stw	fp,0(sp)
    e6fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e700:	d0a00b17 	ldw	r2,-32724(gp)
    e704:	10000326 	beq	r2,zero,e714 <alt_get_errno+0x24>
    e708:	d0a00b17 	ldw	r2,-32724(gp)
    e70c:	103ee83a 	callr	r2
    e710:	00000106 	br	e718 <alt_get_errno+0x28>
    e714:	d0a72004 	addi	r2,gp,-25472
}
    e718:	e037883a 	mov	sp,fp
    e71c:	dfc00117 	ldw	ra,4(sp)
    e720:	df000017 	ldw	fp,0(sp)
    e724:	dec00204 	addi	sp,sp,8
    e728:	f800283a 	ret

0000e72c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e72c:	defffb04 	addi	sp,sp,-20
    e730:	dfc00415 	stw	ra,16(sp)
    e734:	df000315 	stw	fp,12(sp)
    e738:	df000304 	addi	fp,sp,12
    e73c:	e13ffe15 	stw	r4,-8(fp)
    e740:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e744:	e0bffe17 	ldw	r2,-8(fp)
    e748:	10000616 	blt	r2,zero,e764 <fstat+0x38>
    e74c:	e0bffe17 	ldw	r2,-8(fp)
    e750:	10c00324 	muli	r3,r2,12
    e754:	00800074 	movhi	r2,1
    e758:	10885e04 	addi	r2,r2,8568
    e75c:	1885883a 	add	r2,r3,r2
    e760:	00000106 	br	e768 <fstat+0x3c>
    e764:	0005883a 	mov	r2,zero
    e768:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e76c:	e0bffd17 	ldw	r2,-12(fp)
    e770:	10001026 	beq	r2,zero,e7b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e774:	e0bffd17 	ldw	r2,-12(fp)
    e778:	10800017 	ldw	r2,0(r2)
    e77c:	10800817 	ldw	r2,32(r2)
    e780:	10000726 	beq	r2,zero,e7a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e784:	e0bffd17 	ldw	r2,-12(fp)
    e788:	10800017 	ldw	r2,0(r2)
    e78c:	10800817 	ldw	r2,32(r2)
    e790:	e17fff17 	ldw	r5,-4(fp)
    e794:	e13ffd17 	ldw	r4,-12(fp)
    e798:	103ee83a 	callr	r2
    e79c:	00000a06 	br	e7c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e7a0:	e0bfff17 	ldw	r2,-4(fp)
    e7a4:	00c80004 	movi	r3,8192
    e7a8:	10c00115 	stw	r3,4(r2)
      return 0;
    e7ac:	0005883a 	mov	r2,zero
    e7b0:	00000506 	br	e7c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7b4:	000e6f00 	call	e6f0 <alt_get_errno>
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	00801444 	movi	r2,81
    e7c0:	18800015 	stw	r2,0(r3)
    return -1;
    e7c4:	00bfffc4 	movi	r2,-1
  }
}
    e7c8:	e037883a 	mov	sp,fp
    e7cc:	dfc00117 	ldw	ra,4(sp)
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00204 	addi	sp,sp,8
    e7d8:	f800283a 	ret

0000e7dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7dc:	defffe04 	addi	sp,sp,-8
    e7e0:	dfc00115 	stw	ra,4(sp)
    e7e4:	df000015 	stw	fp,0(sp)
    e7e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7ec:	d0a00b17 	ldw	r2,-32724(gp)
    e7f0:	10000326 	beq	r2,zero,e800 <alt_get_errno+0x24>
    e7f4:	d0a00b17 	ldw	r2,-32724(gp)
    e7f8:	103ee83a 	callr	r2
    e7fc:	00000106 	br	e804 <alt_get_errno+0x28>
    e800:	d0a72004 	addi	r2,gp,-25472
}
    e804:	e037883a 	mov	sp,fp
    e808:	dfc00117 	ldw	ra,4(sp)
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00204 	addi	sp,sp,8
    e814:	f800283a 	ret

0000e818 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e818:	deffed04 	addi	sp,sp,-76
    e81c:	dfc01215 	stw	ra,72(sp)
    e820:	df001115 	stw	fp,68(sp)
    e824:	df001104 	addi	fp,sp,68
    e828:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e82c:	e0bfff17 	ldw	r2,-4(fp)
    e830:	10000616 	blt	r2,zero,e84c <isatty+0x34>
    e834:	e0bfff17 	ldw	r2,-4(fp)
    e838:	10c00324 	muli	r3,r2,12
    e83c:	00800074 	movhi	r2,1
    e840:	10885e04 	addi	r2,r2,8568
    e844:	1885883a 	add	r2,r3,r2
    e848:	00000106 	br	e850 <isatty+0x38>
    e84c:	0005883a 	mov	r2,zero
    e850:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e854:	e0bfef17 	ldw	r2,-68(fp)
    e858:	10000e26 	beq	r2,zero,e894 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e85c:	e0bfef17 	ldw	r2,-68(fp)
    e860:	10800017 	ldw	r2,0(r2)
    e864:	10800817 	ldw	r2,32(r2)
    e868:	1000021e 	bne	r2,zero,e874 <isatty+0x5c>
    {
      return 1;
    e86c:	00800044 	movi	r2,1
    e870:	00000d06 	br	e8a8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e874:	e0bff004 	addi	r2,fp,-64
    e878:	100b883a 	mov	r5,r2
    e87c:	e13fff17 	ldw	r4,-4(fp)
    e880:	000e72c0 	call	e72c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e884:	e0bff117 	ldw	r2,-60(fp)
    e888:	10880020 	cmpeqi	r2,r2,8192
    e88c:	10803fcc 	andi	r2,r2,255
    e890:	00000506 	br	e8a8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e894:	000e7dc0 	call	e7dc <alt_get_errno>
    e898:	1007883a 	mov	r3,r2
    e89c:	00801444 	movi	r2,81
    e8a0:	18800015 	stw	r2,0(r3)
    return 0;
    e8a4:	0005883a 	mov	r2,zero
  }
}
    e8a8:	e037883a 	mov	sp,fp
    e8ac:	dfc00117 	ldw	ra,4(sp)
    e8b0:	df000017 	ldw	fp,0(sp)
    e8b4:	dec00204 	addi	sp,sp,8
    e8b8:	f800283a 	ret

0000e8bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e8bc:	defffc04 	addi	sp,sp,-16
    e8c0:	df000315 	stw	fp,12(sp)
    e8c4:	df000304 	addi	fp,sp,12
    e8c8:	e13ffd15 	stw	r4,-12(fp)
    e8cc:	e17ffe15 	stw	r5,-8(fp)
    e8d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e8d4:	e0fffe17 	ldw	r3,-8(fp)
    e8d8:	e0bffd17 	ldw	r2,-12(fp)
    e8dc:	18800c26 	beq	r3,r2,e910 <alt_load_section+0x54>
  {
    while( to != end )
    e8e0:	00000806 	br	e904 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e8e4:	e0bffe17 	ldw	r2,-8(fp)
    e8e8:	10c00104 	addi	r3,r2,4
    e8ec:	e0fffe15 	stw	r3,-8(fp)
    e8f0:	e0fffd17 	ldw	r3,-12(fp)
    e8f4:	19000104 	addi	r4,r3,4
    e8f8:	e13ffd15 	stw	r4,-12(fp)
    e8fc:	18c00017 	ldw	r3,0(r3)
    e900:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e904:	e0fffe17 	ldw	r3,-8(fp)
    e908:	e0bfff17 	ldw	r2,-4(fp)
    e90c:	18bff51e 	bne	r3,r2,e8e4 <__alt_data_end+0xff00e8e4>
    {
      *to++ = *from++;
    }
  }
}
    e910:	0001883a 	nop
    e914:	e037883a 	mov	sp,fp
    e918:	df000017 	ldw	fp,0(sp)
    e91c:	dec00104 	addi	sp,sp,4
    e920:	f800283a 	ret

0000e924 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e924:	defffe04 	addi	sp,sp,-8
    e928:	dfc00115 	stw	ra,4(sp)
    e92c:	df000015 	stw	fp,0(sp)
    e930:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e934:	01800074 	movhi	r6,1
    e938:	318ce604 	addi	r6,r6,13208
    e93c:	01400074 	movhi	r5,1
    e940:	2945eb04 	addi	r5,r5,6060
    e944:	01000074 	movhi	r4,1
    e948:	210ce604 	addi	r4,r4,13208
    e94c:	000e8bc0 	call	e8bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e950:	01800034 	movhi	r6,0
    e954:	31809104 	addi	r6,r6,580
    e958:	01400034 	movhi	r5,0
    e95c:	29400804 	addi	r5,r5,32
    e960:	01000034 	movhi	r4,0
    e964:	21000804 	addi	r4,r4,32
    e968:	000e8bc0 	call	e8bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e96c:	01800074 	movhi	r6,1
    e970:	3185eb04 	addi	r6,r6,6060
    e974:	01400074 	movhi	r5,1
    e978:	2943fe04 	addi	r5,r5,4088
    e97c:	01000074 	movhi	r4,1
    e980:	2103fe04 	addi	r4,r4,4088
    e984:	000e8bc0 	call	e8bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e988:	000ff0c0 	call	ff0c <alt_dcache_flush_all>
  alt_icache_flush_all();
    e98c:	00100cc0 	call	100cc <alt_icache_flush_all>
}
    e990:	0001883a 	nop
    e994:	e037883a 	mov	sp,fp
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	df000017 	ldw	fp,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret

0000e9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e9a8:	defffe04 	addi	sp,sp,-8
    e9ac:	dfc00115 	stw	ra,4(sp)
    e9b0:	df000015 	stw	fp,0(sp)
    e9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9b8:	d0a00b17 	ldw	r2,-32724(gp)
    e9bc:	10000326 	beq	r2,zero,e9cc <alt_get_errno+0x24>
    e9c0:	d0a00b17 	ldw	r2,-32724(gp)
    e9c4:	103ee83a 	callr	r2
    e9c8:	00000106 	br	e9d0 <alt_get_errno+0x28>
    e9cc:	d0a72004 	addi	r2,gp,-25472
}
    e9d0:	e037883a 	mov	sp,fp
    e9d4:	dfc00117 	ldw	ra,4(sp)
    e9d8:	df000017 	ldw	fp,0(sp)
    e9dc:	dec00204 	addi	sp,sp,8
    e9e0:	f800283a 	ret

0000e9e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e9e4:	defff904 	addi	sp,sp,-28
    e9e8:	dfc00615 	stw	ra,24(sp)
    e9ec:	df000515 	stw	fp,20(sp)
    e9f0:	df000504 	addi	fp,sp,20
    e9f4:	e13ffd15 	stw	r4,-12(fp)
    e9f8:	e17ffe15 	stw	r5,-8(fp)
    e9fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ea00:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea04:	e0bffd17 	ldw	r2,-12(fp)
    ea08:	10000616 	blt	r2,zero,ea24 <lseek+0x40>
    ea0c:	e0bffd17 	ldw	r2,-12(fp)
    ea10:	10c00324 	muli	r3,r2,12
    ea14:	00800074 	movhi	r2,1
    ea18:	10885e04 	addi	r2,r2,8568
    ea1c:	1885883a 	add	r2,r3,r2
    ea20:	00000106 	br	ea28 <lseek+0x44>
    ea24:	0005883a 	mov	r2,zero
    ea28:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ea2c:	e0bffc17 	ldw	r2,-16(fp)
    ea30:	10001026 	beq	r2,zero,ea74 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ea34:	e0bffc17 	ldw	r2,-16(fp)
    ea38:	10800017 	ldw	r2,0(r2)
    ea3c:	10800717 	ldw	r2,28(r2)
    ea40:	10000926 	beq	r2,zero,ea68 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ea44:	e0bffc17 	ldw	r2,-16(fp)
    ea48:	10800017 	ldw	r2,0(r2)
    ea4c:	10800717 	ldw	r2,28(r2)
    ea50:	e1bfff17 	ldw	r6,-4(fp)
    ea54:	e17ffe17 	ldw	r5,-8(fp)
    ea58:	e13ffc17 	ldw	r4,-16(fp)
    ea5c:	103ee83a 	callr	r2
    ea60:	e0bffb15 	stw	r2,-20(fp)
    ea64:	00000506 	br	ea7c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ea68:	00bfde84 	movi	r2,-134
    ea6c:	e0bffb15 	stw	r2,-20(fp)
    ea70:	00000206 	br	ea7c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ea74:	00bfebc4 	movi	r2,-81
    ea78:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ea7c:	e0bffb17 	ldw	r2,-20(fp)
    ea80:	1000070e 	bge	r2,zero,eaa0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ea84:	000e9a80 	call	e9a8 <alt_get_errno>
    ea88:	1007883a 	mov	r3,r2
    ea8c:	e0bffb17 	ldw	r2,-20(fp)
    ea90:	0085c83a 	sub	r2,zero,r2
    ea94:	18800015 	stw	r2,0(r3)
    rc = -1;
    ea98:	00bfffc4 	movi	r2,-1
    ea9c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
}
    eaa4:	e037883a 	mov	sp,fp
    eaa8:	dfc00117 	ldw	ra,4(sp)
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00204 	addi	sp,sp,8
    eab4:	f800283a 	ret

0000eab8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    eab8:	defffd04 	addi	sp,sp,-12
    eabc:	dfc00215 	stw	ra,8(sp)
    eac0:	df000115 	stw	fp,4(sp)
    eac4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    eac8:	0009883a 	mov	r4,zero
    eacc:	000ef600 	call	ef60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ead0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ead4:	000ef980 	call	ef98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ead8:	01800074 	movhi	r6,1
    eadc:	3185e304 	addi	r6,r6,6028
    eae0:	01400074 	movhi	r5,1
    eae4:	2945e304 	addi	r5,r5,6028
    eae8:	01000074 	movhi	r4,1
    eaec:	2105e304 	addi	r4,r4,6028
    eaf0:	00104640 	call	10464 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    eaf4:	001000c0 	call	1000c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    eaf8:	01000074 	movhi	r4,1
    eafc:	21001b04 	addi	r4,r4,108
    eb00:	0010c640 	call	10c64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eb04:	d0a72417 	ldw	r2,-25456(gp)
    eb08:	d0e72517 	ldw	r3,-25452(gp)
    eb0c:	d1272617 	ldw	r4,-25448(gp)
    eb10:	200d883a 	mov	r6,r4
    eb14:	180b883a 	mov	r5,r3
    eb18:	1009883a 	mov	r4,r2
    eb1c:	0000fbc0 	call	fbc <main>
    eb20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eb24:	01000044 	movi	r4,1
    eb28:	000e5f40 	call	e5f4 <close>
  exit (result);
    eb2c:	e13fff17 	ldw	r4,-4(fp)
    eb30:	0010c780 	call	10c78 <exit>

0000eb34 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eb34:	defffe04 	addi	sp,sp,-8
    eb38:	df000115 	stw	fp,4(sp)
    eb3c:	df000104 	addi	fp,sp,4
    eb40:	e13fff15 	stw	r4,-4(fp)
}
    eb44:	0001883a 	nop
    eb48:	e037883a 	mov	sp,fp
    eb4c:	df000017 	ldw	fp,0(sp)
    eb50:	dec00104 	addi	sp,sp,4
    eb54:	f800283a 	ret

0000eb58 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eb58:	defffe04 	addi	sp,sp,-8
    eb5c:	df000115 	stw	fp,4(sp)
    eb60:	df000104 	addi	fp,sp,4
    eb64:	e13fff15 	stw	r4,-4(fp)
}
    eb68:	0001883a 	nop
    eb6c:	e037883a 	mov	sp,fp
    eb70:	df000017 	ldw	fp,0(sp)
    eb74:	dec00104 	addi	sp,sp,4
    eb78:	f800283a 	ret

0000eb7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb7c:	defffe04 	addi	sp,sp,-8
    eb80:	dfc00115 	stw	ra,4(sp)
    eb84:	df000015 	stw	fp,0(sp)
    eb88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb8c:	d0a00b17 	ldw	r2,-32724(gp)
    eb90:	10000326 	beq	r2,zero,eba0 <alt_get_errno+0x24>
    eb94:	d0a00b17 	ldw	r2,-32724(gp)
    eb98:	103ee83a 	callr	r2
    eb9c:	00000106 	br	eba4 <alt_get_errno+0x28>
    eba0:	d0a72004 	addi	r2,gp,-25472
}
    eba4:	e037883a 	mov	sp,fp
    eba8:	dfc00117 	ldw	ra,4(sp)
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00204 	addi	sp,sp,8
    ebb4:	f800283a 	ret

0000ebb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ebb8:	defff904 	addi	sp,sp,-28
    ebbc:	dfc00615 	stw	ra,24(sp)
    ebc0:	df000515 	stw	fp,20(sp)
    ebc4:	df000504 	addi	fp,sp,20
    ebc8:	e13ffd15 	stw	r4,-12(fp)
    ebcc:	e17ffe15 	stw	r5,-8(fp)
    ebd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ebd4:	e0bffd17 	ldw	r2,-12(fp)
    ebd8:	10000616 	blt	r2,zero,ebf4 <read+0x3c>
    ebdc:	e0bffd17 	ldw	r2,-12(fp)
    ebe0:	10c00324 	muli	r3,r2,12
    ebe4:	00800074 	movhi	r2,1
    ebe8:	10885e04 	addi	r2,r2,8568
    ebec:	1885883a 	add	r2,r3,r2
    ebf0:	00000106 	br	ebf8 <read+0x40>
    ebf4:	0005883a 	mov	r2,zero
    ebf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ebfc:	e0bffb17 	ldw	r2,-20(fp)
    ec00:	10002226 	beq	r2,zero,ec8c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ec04:	e0bffb17 	ldw	r2,-20(fp)
    ec08:	10800217 	ldw	r2,8(r2)
    ec0c:	108000cc 	andi	r2,r2,3
    ec10:	10800060 	cmpeqi	r2,r2,1
    ec14:	1000181e 	bne	r2,zero,ec78 <read+0xc0>
        (fd->dev->read))
    ec18:	e0bffb17 	ldw	r2,-20(fp)
    ec1c:	10800017 	ldw	r2,0(r2)
    ec20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ec24:	10001426 	beq	r2,zero,ec78 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ec28:	e0bffb17 	ldw	r2,-20(fp)
    ec2c:	10800017 	ldw	r2,0(r2)
    ec30:	10800517 	ldw	r2,20(r2)
    ec34:	e0ffff17 	ldw	r3,-4(fp)
    ec38:	180d883a 	mov	r6,r3
    ec3c:	e17ffe17 	ldw	r5,-8(fp)
    ec40:	e13ffb17 	ldw	r4,-20(fp)
    ec44:	103ee83a 	callr	r2
    ec48:	e0bffc15 	stw	r2,-16(fp)
    ec4c:	e0bffc17 	ldw	r2,-16(fp)
    ec50:	1000070e 	bge	r2,zero,ec70 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ec54:	000eb7c0 	call	eb7c <alt_get_errno>
    ec58:	1007883a 	mov	r3,r2
    ec5c:	e0bffc17 	ldw	r2,-16(fp)
    ec60:	0085c83a 	sub	r2,zero,r2
    ec64:	18800015 	stw	r2,0(r3)
          return -1;
    ec68:	00bfffc4 	movi	r2,-1
    ec6c:	00000c06 	br	eca0 <read+0xe8>
        }
        return rval;
    ec70:	e0bffc17 	ldw	r2,-16(fp)
    ec74:	00000a06 	br	eca0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ec78:	000eb7c0 	call	eb7c <alt_get_errno>
    ec7c:	1007883a 	mov	r3,r2
    ec80:	00800344 	movi	r2,13
    ec84:	18800015 	stw	r2,0(r3)
    ec88:	00000406 	br	ec9c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ec8c:	000eb7c0 	call	eb7c <alt_get_errno>
    ec90:	1007883a 	mov	r3,r2
    ec94:	00801444 	movi	r2,81
    ec98:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec9c:	00bfffc4 	movi	r2,-1
}
    eca0:	e037883a 	mov	sp,fp
    eca4:	dfc00117 	ldw	ra,4(sp)
    eca8:	df000017 	ldw	fp,0(sp)
    ecac:	dec00204 	addi	sp,sp,8
    ecb0:	f800283a 	ret

0000ecb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ecb4:	defffe04 	addi	sp,sp,-8
    ecb8:	df000115 	stw	fp,4(sp)
    ecbc:	df000104 	addi	fp,sp,4
    ecc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ecc4:	e0bfff17 	ldw	r2,-4(fp)
    ecc8:	108000d0 	cmplti	r2,r2,3
    eccc:	10000d1e 	bne	r2,zero,ed04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ecd0:	00800074 	movhi	r2,1
    ecd4:	10885e04 	addi	r2,r2,8568
    ecd8:	e0ffff17 	ldw	r3,-4(fp)
    ecdc:	18c00324 	muli	r3,r3,12
    ece0:	10c5883a 	add	r2,r2,r3
    ece4:	10800204 	addi	r2,r2,8
    ece8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ecec:	00800074 	movhi	r2,1
    ecf0:	10885e04 	addi	r2,r2,8568
    ecf4:	e0ffff17 	ldw	r3,-4(fp)
    ecf8:	18c00324 	muli	r3,r3,12
    ecfc:	10c5883a 	add	r2,r2,r3
    ed00:	10000015 	stw	zero,0(r2)
  }
}
    ed04:	0001883a 	nop
    ed08:	e037883a 	mov	sp,fp
    ed0c:	df000017 	ldw	fp,0(sp)
    ed10:	dec00104 	addi	sp,sp,4
    ed14:	f800283a 	ret

0000ed18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ed18:	defff904 	addi	sp,sp,-28
    ed1c:	df000615 	stw	fp,24(sp)
    ed20:	df000604 	addi	fp,sp,24
    ed24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed28:	0005303a 	rdctl	r2,status
    ed2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed30:	e0fffe17 	ldw	r3,-8(fp)
    ed34:	00bfff84 	movi	r2,-2
    ed38:	1884703a 	and	r2,r3,r2
    ed3c:	1001703a 	wrctl	status,r2
  
  return context;
    ed40:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ed44:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ed48:	d0a00c17 	ldw	r2,-32720(gp)
    ed4c:	10c000c4 	addi	r3,r2,3
    ed50:	00bfff04 	movi	r2,-4
    ed54:	1884703a 	and	r2,r3,r2
    ed58:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ed5c:	d0e00c17 	ldw	r3,-32720(gp)
    ed60:	e0bfff17 	ldw	r2,-4(fp)
    ed64:	1887883a 	add	r3,r3,r2
    ed68:	00804034 	movhi	r2,256
    ed6c:	10800004 	addi	r2,r2,0
    ed70:	10c0062e 	bgeu	r2,r3,ed8c <sbrk+0x74>
    ed74:	e0bffb17 	ldw	r2,-20(fp)
    ed78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed7c:	e0bffa17 	ldw	r2,-24(fp)
    ed80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ed84:	00bfffc4 	movi	r2,-1
    ed88:	00000b06 	br	edb8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ed8c:	d0a00c17 	ldw	r2,-32720(gp)
    ed90:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ed94:	d0e00c17 	ldw	r3,-32720(gp)
    ed98:	e0bfff17 	ldw	r2,-4(fp)
    ed9c:	1885883a 	add	r2,r3,r2
    eda0:	d0a00c15 	stw	r2,-32720(gp)
    eda4:	e0bffb17 	ldw	r2,-20(fp)
    eda8:	e0bffc15 	stw	r2,-16(fp)
    edac:	e0bffc17 	ldw	r2,-16(fp)
    edb0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    edb4:	e0bffd17 	ldw	r2,-12(fp)
} 
    edb8:	e037883a 	mov	sp,fp
    edbc:	df000017 	ldw	fp,0(sp)
    edc0:	dec00104 	addi	sp,sp,4
    edc4:	f800283a 	ret

0000edc8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    edc8:	defffd04 	addi	sp,sp,-12
    edcc:	dfc00215 	stw	ra,8(sp)
    edd0:	df000115 	stw	fp,4(sp)
    edd4:	df000104 	addi	fp,sp,4
    edd8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    eddc:	e13fff17 	ldw	r4,-4(fp)
    ede0:	000fdb40 	call	fdb4 <alt_busy_sleep>
}
    ede4:	e037883a 	mov	sp,fp
    ede8:	dfc00117 	ldw	ra,4(sp)
    edec:	df000017 	ldw	fp,0(sp)
    edf0:	dec00204 	addi	sp,sp,8
    edf4:	f800283a 	ret

0000edf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    edf8:	defffe04 	addi	sp,sp,-8
    edfc:	dfc00115 	stw	ra,4(sp)
    ee00:	df000015 	stw	fp,0(sp)
    ee04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee08:	d0a00b17 	ldw	r2,-32724(gp)
    ee0c:	10000326 	beq	r2,zero,ee1c <alt_get_errno+0x24>
    ee10:	d0a00b17 	ldw	r2,-32724(gp)
    ee14:	103ee83a 	callr	r2
    ee18:	00000106 	br	ee20 <alt_get_errno+0x28>
    ee1c:	d0a72004 	addi	r2,gp,-25472
}
    ee20:	e037883a 	mov	sp,fp
    ee24:	dfc00117 	ldw	ra,4(sp)
    ee28:	df000017 	ldw	fp,0(sp)
    ee2c:	dec00204 	addi	sp,sp,8
    ee30:	f800283a 	ret

0000ee34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ee34:	defff904 	addi	sp,sp,-28
    ee38:	dfc00615 	stw	ra,24(sp)
    ee3c:	df000515 	stw	fp,20(sp)
    ee40:	df000504 	addi	fp,sp,20
    ee44:	e13ffd15 	stw	r4,-12(fp)
    ee48:	e17ffe15 	stw	r5,-8(fp)
    ee4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee50:	e0bffd17 	ldw	r2,-12(fp)
    ee54:	10000616 	blt	r2,zero,ee70 <write+0x3c>
    ee58:	e0bffd17 	ldw	r2,-12(fp)
    ee5c:	10c00324 	muli	r3,r2,12
    ee60:	00800074 	movhi	r2,1
    ee64:	10885e04 	addi	r2,r2,8568
    ee68:	1885883a 	add	r2,r3,r2
    ee6c:	00000106 	br	ee74 <write+0x40>
    ee70:	0005883a 	mov	r2,zero
    ee74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ee78:	e0bffb17 	ldw	r2,-20(fp)
    ee7c:	10002126 	beq	r2,zero,ef04 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee80:	e0bffb17 	ldw	r2,-20(fp)
    ee84:	10800217 	ldw	r2,8(r2)
    ee88:	108000cc 	andi	r2,r2,3
    ee8c:	10001826 	beq	r2,zero,eef0 <write+0xbc>
    ee90:	e0bffb17 	ldw	r2,-20(fp)
    ee94:	10800017 	ldw	r2,0(r2)
    ee98:	10800617 	ldw	r2,24(r2)
    ee9c:	10001426 	beq	r2,zero,eef0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    eea0:	e0bffb17 	ldw	r2,-20(fp)
    eea4:	10800017 	ldw	r2,0(r2)
    eea8:	10800617 	ldw	r2,24(r2)
    eeac:	e0ffff17 	ldw	r3,-4(fp)
    eeb0:	180d883a 	mov	r6,r3
    eeb4:	e17ffe17 	ldw	r5,-8(fp)
    eeb8:	e13ffb17 	ldw	r4,-20(fp)
    eebc:	103ee83a 	callr	r2
    eec0:	e0bffc15 	stw	r2,-16(fp)
    eec4:	e0bffc17 	ldw	r2,-16(fp)
    eec8:	1000070e 	bge	r2,zero,eee8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    eecc:	000edf80 	call	edf8 <alt_get_errno>
    eed0:	1007883a 	mov	r3,r2
    eed4:	e0bffc17 	ldw	r2,-16(fp)
    eed8:	0085c83a 	sub	r2,zero,r2
    eedc:	18800015 	stw	r2,0(r3)
        return -1;
    eee0:	00bfffc4 	movi	r2,-1
    eee4:	00000c06 	br	ef18 <write+0xe4>
      }
      return rval;
    eee8:	e0bffc17 	ldw	r2,-16(fp)
    eeec:	00000a06 	br	ef18 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    eef0:	000edf80 	call	edf8 <alt_get_errno>
    eef4:	1007883a 	mov	r3,r2
    eef8:	00800344 	movi	r2,13
    eefc:	18800015 	stw	r2,0(r3)
    ef00:	00000406 	br	ef14 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ef04:	000edf80 	call	edf8 <alt_get_errno>
    ef08:	1007883a 	mov	r3,r2
    ef0c:	00801444 	movi	r2,81
    ef10:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ef14:	00bfffc4 	movi	r2,-1
}
    ef18:	e037883a 	mov	sp,fp
    ef1c:	dfc00117 	ldw	ra,4(sp)
    ef20:	df000017 	ldw	fp,0(sp)
    ef24:	dec00204 	addi	sp,sp,8
    ef28:	f800283a 	ret

0000ef2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ef2c:	defffd04 	addi	sp,sp,-12
    ef30:	dfc00215 	stw	ra,8(sp)
    ef34:	df000115 	stw	fp,4(sp)
    ef38:	df000104 	addi	fp,sp,4
    ef3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ef40:	d1600804 	addi	r5,gp,-32736
    ef44:	e13fff17 	ldw	r4,-4(fp)
    ef48:	000ff680 	call	ff68 <alt_dev_llist_insert>
}
    ef4c:	e037883a 	mov	sp,fp
    ef50:	dfc00117 	ldw	ra,4(sp)
    ef54:	df000017 	ldw	fp,0(sp)
    ef58:	dec00204 	addi	sp,sp,8
    ef5c:	f800283a 	ret

0000ef60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ef60:	defffd04 	addi	sp,sp,-12
    ef64:	dfc00215 	stw	ra,8(sp)
    ef68:	df000115 	stw	fp,4(sp)
    ef6c:	df000104 	addi	fp,sp,4
    ef70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ef74:	00108d80 	call	108d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ef78:	00800044 	movi	r2,1
    ef7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ef80:	0001883a 	nop
    ef84:	e037883a 	mov	sp,fp
    ef88:	dfc00117 	ldw	ra,4(sp)
    ef8c:	df000017 	ldw	fp,0(sp)
    ef90:	dec00204 	addi	sp,sp,8
    ef94:	f800283a 	ret

0000ef98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ef98:	defffe04 	addi	sp,sp,-8
    ef9c:	dfc00115 	stw	ra,4(sp)
    efa0:	df000015 	stw	fp,0(sp)
    efa4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    efa8:	00804034 	movhi	r2,256
    efac:	10840004 	addi	r2,r2,4096
    efb0:	d0a72715 	stw	r2,-25444(gp)
    efb4:	0080bef4 	movhi	r2,763
    efb8:	10bc2004 	addi	r2,r2,-3968
    efbc:	d0a72815 	stw	r2,-25440(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    efc0:	01c0fa04 	movi	r7,1000
    efc4:	01800104 	movi	r6,4
    efc8:	000b883a 	mov	r5,zero
    efcc:	01004034 	movhi	r4,256
    efd0:	21040804 	addi	r4,r4,4128
    efd4:	000faf40 	call	faf4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    efd8:	000d883a 	mov	r6,zero
    efdc:	000b883a 	mov	r5,zero
    efe0:	01000074 	movhi	r4,1
    efe4:	2108c804 	addi	r4,r4,8992
    efe8:	000f1780 	call	f178 <altera_avalon_jtag_uart_init>
    efec:	01000074 	movhi	r4,1
    eff0:	2108be04 	addi	r4,r4,8952
    eff4:	000ef2c0 	call	ef2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    eff8:	0001883a 	nop
}
    effc:	0001883a 	nop
    f000:	e037883a 	mov	sp,fp
    f004:	dfc00117 	ldw	ra,4(sp)
    f008:	df000017 	ldw	fp,0(sp)
    f00c:	dec00204 	addi	sp,sp,8
    f010:	f800283a 	ret

0000f014 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f014:	defffa04 	addi	sp,sp,-24
    f018:	dfc00515 	stw	ra,20(sp)
    f01c:	df000415 	stw	fp,16(sp)
    f020:	df000404 	addi	fp,sp,16
    f024:	e13ffd15 	stw	r4,-12(fp)
    f028:	e17ffe15 	stw	r5,-8(fp)
    f02c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f030:	e0bffd17 	ldw	r2,-12(fp)
    f034:	10800017 	ldw	r2,0(r2)
    f038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f03c:	e0bffc17 	ldw	r2,-16(fp)
    f040:	10c00a04 	addi	r3,r2,40
    f044:	e0bffd17 	ldw	r2,-12(fp)
    f048:	10800217 	ldw	r2,8(r2)
    f04c:	100f883a 	mov	r7,r2
    f050:	e1bfff17 	ldw	r6,-4(fp)
    f054:	e17ffe17 	ldw	r5,-8(fp)
    f058:	1809883a 	mov	r4,r3
    f05c:	000f63c0 	call	f63c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f060:	e037883a 	mov	sp,fp
    f064:	dfc00117 	ldw	ra,4(sp)
    f068:	df000017 	ldw	fp,0(sp)
    f06c:	dec00204 	addi	sp,sp,8
    f070:	f800283a 	ret

0000f074 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f074:	defffa04 	addi	sp,sp,-24
    f078:	dfc00515 	stw	ra,20(sp)
    f07c:	df000415 	stw	fp,16(sp)
    f080:	df000404 	addi	fp,sp,16
    f084:	e13ffd15 	stw	r4,-12(fp)
    f088:	e17ffe15 	stw	r5,-8(fp)
    f08c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f090:	e0bffd17 	ldw	r2,-12(fp)
    f094:	10800017 	ldw	r2,0(r2)
    f098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f09c:	e0bffc17 	ldw	r2,-16(fp)
    f0a0:	10c00a04 	addi	r3,r2,40
    f0a4:	e0bffd17 	ldw	r2,-12(fp)
    f0a8:	10800217 	ldw	r2,8(r2)
    f0ac:	100f883a 	mov	r7,r2
    f0b0:	e1bfff17 	ldw	r6,-4(fp)
    f0b4:	e17ffe17 	ldw	r5,-8(fp)
    f0b8:	1809883a 	mov	r4,r3
    f0bc:	000f8580 	call	f858 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f0c0:	e037883a 	mov	sp,fp
    f0c4:	dfc00117 	ldw	ra,4(sp)
    f0c8:	df000017 	ldw	fp,0(sp)
    f0cc:	dec00204 	addi	sp,sp,8
    f0d0:	f800283a 	ret

0000f0d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f0d4:	defffc04 	addi	sp,sp,-16
    f0d8:	dfc00315 	stw	ra,12(sp)
    f0dc:	df000215 	stw	fp,8(sp)
    f0e0:	df000204 	addi	fp,sp,8
    f0e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f0e8:	e0bfff17 	ldw	r2,-4(fp)
    f0ec:	10800017 	ldw	r2,0(r2)
    f0f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f0f4:	e0bffe17 	ldw	r2,-8(fp)
    f0f8:	10c00a04 	addi	r3,r2,40
    f0fc:	e0bfff17 	ldw	r2,-4(fp)
    f100:	10800217 	ldw	r2,8(r2)
    f104:	100b883a 	mov	r5,r2
    f108:	1809883a 	mov	r4,r3
    f10c:	000f4e40 	call	f4e4 <altera_avalon_jtag_uart_close>
}
    f110:	e037883a 	mov	sp,fp
    f114:	dfc00117 	ldw	ra,4(sp)
    f118:	df000017 	ldw	fp,0(sp)
    f11c:	dec00204 	addi	sp,sp,8
    f120:	f800283a 	ret

0000f124 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f124:	defffa04 	addi	sp,sp,-24
    f128:	dfc00515 	stw	ra,20(sp)
    f12c:	df000415 	stw	fp,16(sp)
    f130:	df000404 	addi	fp,sp,16
    f134:	e13ffd15 	stw	r4,-12(fp)
    f138:	e17ffe15 	stw	r5,-8(fp)
    f13c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f140:	e0bffd17 	ldw	r2,-12(fp)
    f144:	10800017 	ldw	r2,0(r2)
    f148:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f14c:	e0bffc17 	ldw	r2,-16(fp)
    f150:	10800a04 	addi	r2,r2,40
    f154:	e1bfff17 	ldw	r6,-4(fp)
    f158:	e17ffe17 	ldw	r5,-8(fp)
    f15c:	1009883a 	mov	r4,r2
    f160:	000f54c0 	call	f54c <altera_avalon_jtag_uart_ioctl>
}
    f164:	e037883a 	mov	sp,fp
    f168:	dfc00117 	ldw	ra,4(sp)
    f16c:	df000017 	ldw	fp,0(sp)
    f170:	dec00204 	addi	sp,sp,8
    f174:	f800283a 	ret

0000f178 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f178:	defffa04 	addi	sp,sp,-24
    f17c:	dfc00515 	stw	ra,20(sp)
    f180:	df000415 	stw	fp,16(sp)
    f184:	df000404 	addi	fp,sp,16
    f188:	e13ffd15 	stw	r4,-12(fp)
    f18c:	e17ffe15 	stw	r5,-8(fp)
    f190:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f194:	e0bffd17 	ldw	r2,-12(fp)
    f198:	00c00044 	movi	r3,1
    f19c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f1a0:	e0bffd17 	ldw	r2,-12(fp)
    f1a4:	10800017 	ldw	r2,0(r2)
    f1a8:	10800104 	addi	r2,r2,4
    f1ac:	1007883a 	mov	r3,r2
    f1b0:	e0bffd17 	ldw	r2,-12(fp)
    f1b4:	10800817 	ldw	r2,32(r2)
    f1b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f1bc:	e0bffe17 	ldw	r2,-8(fp)
    f1c0:	e0ffff17 	ldw	r3,-4(fp)
    f1c4:	d8000015 	stw	zero,0(sp)
    f1c8:	e1fffd17 	ldw	r7,-12(fp)
    f1cc:	01800074 	movhi	r6,1
    f1d0:	31bc8e04 	addi	r6,r6,-3528
    f1d4:	180b883a 	mov	r5,r3
    f1d8:	1009883a 	mov	r4,r2
    f1dc:	00101000 	call	10100 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f1e0:	e0bffd17 	ldw	r2,-12(fp)
    f1e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f1e8:	e0bffd17 	ldw	r2,-12(fp)
    f1ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f1f0:	d0e72a17 	ldw	r3,-25432(gp)
    f1f4:	e1fffd17 	ldw	r7,-12(fp)
    f1f8:	01800074 	movhi	r6,1
    f1fc:	31bd1104 	addi	r6,r6,-3004
    f200:	180b883a 	mov	r5,r3
    f204:	1009883a 	mov	r4,r2
    f208:	000fc880 	call	fc88 <alt_alarm_start>
    f20c:	1000040e 	bge	r2,zero,f220 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f210:	e0fffd17 	ldw	r3,-12(fp)
    f214:	00a00034 	movhi	r2,32768
    f218:	10bfffc4 	addi	r2,r2,-1
    f21c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f220:	0001883a 	nop
    f224:	e037883a 	mov	sp,fp
    f228:	dfc00117 	ldw	ra,4(sp)
    f22c:	df000017 	ldw	fp,0(sp)
    f230:	dec00204 	addi	sp,sp,8
    f234:	f800283a 	ret

0000f238 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f238:	defff804 	addi	sp,sp,-32
    f23c:	df000715 	stw	fp,28(sp)
    f240:	df000704 	addi	fp,sp,28
    f244:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f248:	e0bfff17 	ldw	r2,-4(fp)
    f24c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f250:	e0bffb17 	ldw	r2,-20(fp)
    f254:	10800017 	ldw	r2,0(r2)
    f258:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f25c:	e0bffc17 	ldw	r2,-16(fp)
    f260:	10800104 	addi	r2,r2,4
    f264:	10800037 	ldwio	r2,0(r2)
    f268:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f26c:	e0bffd17 	ldw	r2,-12(fp)
    f270:	1080c00c 	andi	r2,r2,768
    f274:	10006d26 	beq	r2,zero,f42c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f278:	e0bffd17 	ldw	r2,-12(fp)
    f27c:	1080400c 	andi	r2,r2,256
    f280:	10003526 	beq	r2,zero,f358 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f284:	00800074 	movhi	r2,1
    f288:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f28c:	e0bffb17 	ldw	r2,-20(fp)
    f290:	10800a17 	ldw	r2,40(r2)
    f294:	10800044 	addi	r2,r2,1
    f298:	1081ffcc 	andi	r2,r2,2047
    f29c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f2a0:	e0bffb17 	ldw	r2,-20(fp)
    f2a4:	10c00b17 	ldw	r3,44(r2)
    f2a8:	e0bffe17 	ldw	r2,-8(fp)
    f2ac:	18801526 	beq	r3,r2,f304 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f2b0:	e0bffc17 	ldw	r2,-16(fp)
    f2b4:	10800037 	ldwio	r2,0(r2)
    f2b8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f2bc:	e0bff917 	ldw	r2,-28(fp)
    f2c0:	10a0000c 	andi	r2,r2,32768
    f2c4:	10001126 	beq	r2,zero,f30c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f2c8:	e0bffb17 	ldw	r2,-20(fp)
    f2cc:	10800a17 	ldw	r2,40(r2)
    f2d0:	e0fff917 	ldw	r3,-28(fp)
    f2d4:	1809883a 	mov	r4,r3
    f2d8:	e0fffb17 	ldw	r3,-20(fp)
    f2dc:	1885883a 	add	r2,r3,r2
    f2e0:	10800e04 	addi	r2,r2,56
    f2e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2e8:	e0bffb17 	ldw	r2,-20(fp)
    f2ec:	10800a17 	ldw	r2,40(r2)
    f2f0:	10800044 	addi	r2,r2,1
    f2f4:	10c1ffcc 	andi	r3,r2,2047
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f300:	003fe206 	br	f28c <__alt_data_end+0xff00f28c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f304:	0001883a 	nop
    f308:	00000106 	br	f310 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f30c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f310:	e0bff917 	ldw	r2,-28(fp)
    f314:	10bfffec 	andhi	r2,r2,65535
    f318:	10000f26 	beq	r2,zero,f358 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f31c:	e0bffb17 	ldw	r2,-20(fp)
    f320:	10c00817 	ldw	r3,32(r2)
    f324:	00bfff84 	movi	r2,-2
    f328:	1886703a 	and	r3,r3,r2
    f32c:	e0bffb17 	ldw	r2,-20(fp)
    f330:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f334:	e0bffc17 	ldw	r2,-16(fp)
    f338:	10800104 	addi	r2,r2,4
    f33c:	1007883a 	mov	r3,r2
    f340:	e0bffb17 	ldw	r2,-20(fp)
    f344:	10800817 	ldw	r2,32(r2)
    f348:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f34c:	e0bffc17 	ldw	r2,-16(fp)
    f350:	10800104 	addi	r2,r2,4
    f354:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f358:	e0bffd17 	ldw	r2,-12(fp)
    f35c:	1080800c 	andi	r2,r2,512
    f360:	103fbe26 	beq	r2,zero,f25c <__alt_data_end+0xff00f25c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f364:	e0bffd17 	ldw	r2,-12(fp)
    f368:	1004d43a 	srli	r2,r2,16
    f36c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f370:	00001406 	br	f3c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f374:	e0bffc17 	ldw	r2,-16(fp)
    f378:	e0fffb17 	ldw	r3,-20(fp)
    f37c:	18c00d17 	ldw	r3,52(r3)
    f380:	e13ffb17 	ldw	r4,-20(fp)
    f384:	20c7883a 	add	r3,r4,r3
    f388:	18c20e04 	addi	r3,r3,2104
    f38c:	18c00003 	ldbu	r3,0(r3)
    f390:	18c03fcc 	andi	r3,r3,255
    f394:	18c0201c 	xori	r3,r3,128
    f398:	18ffe004 	addi	r3,r3,-128
    f39c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f3a0:	e0bffb17 	ldw	r2,-20(fp)
    f3a4:	10800d17 	ldw	r2,52(r2)
    f3a8:	10800044 	addi	r2,r2,1
    f3ac:	10c1ffcc 	andi	r3,r2,2047
    f3b0:	e0bffb17 	ldw	r2,-20(fp)
    f3b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f3b8:	e0bffa17 	ldw	r2,-24(fp)
    f3bc:	10bfffc4 	addi	r2,r2,-1
    f3c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f3c4:	e0bffa17 	ldw	r2,-24(fp)
    f3c8:	10000526 	beq	r2,zero,f3e0 <altera_avalon_jtag_uart_irq+0x1a8>
    f3cc:	e0bffb17 	ldw	r2,-20(fp)
    f3d0:	10c00d17 	ldw	r3,52(r2)
    f3d4:	e0bffb17 	ldw	r2,-20(fp)
    f3d8:	10800c17 	ldw	r2,48(r2)
    f3dc:	18bfe51e 	bne	r3,r2,f374 <__alt_data_end+0xff00f374>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f3e0:	e0bffa17 	ldw	r2,-24(fp)
    f3e4:	103f9d26 	beq	r2,zero,f25c <__alt_data_end+0xff00f25c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f3e8:	e0bffb17 	ldw	r2,-20(fp)
    f3ec:	10c00817 	ldw	r3,32(r2)
    f3f0:	00bfff44 	movi	r2,-3
    f3f4:	1886703a 	and	r3,r3,r2
    f3f8:	e0bffb17 	ldw	r2,-20(fp)
    f3fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f400:	e0bffb17 	ldw	r2,-20(fp)
    f404:	10800017 	ldw	r2,0(r2)
    f408:	10800104 	addi	r2,r2,4
    f40c:	1007883a 	mov	r3,r2
    f410:	e0bffb17 	ldw	r2,-20(fp)
    f414:	10800817 	ldw	r2,32(r2)
    f418:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f41c:	e0bffc17 	ldw	r2,-16(fp)
    f420:	10800104 	addi	r2,r2,4
    f424:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f428:	003f8c06 	br	f25c <__alt_data_end+0xff00f25c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f42c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f430:	0001883a 	nop
    f434:	e037883a 	mov	sp,fp
    f438:	df000017 	ldw	fp,0(sp)
    f43c:	dec00104 	addi	sp,sp,4
    f440:	f800283a 	ret

0000f444 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f444:	defff804 	addi	sp,sp,-32
    f448:	df000715 	stw	fp,28(sp)
    f44c:	df000704 	addi	fp,sp,28
    f450:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f454:	e0bffb17 	ldw	r2,-20(fp)
    f458:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f45c:	e0bff917 	ldw	r2,-28(fp)
    f460:	10800017 	ldw	r2,0(r2)
    f464:	10800104 	addi	r2,r2,4
    f468:	10800037 	ldwio	r2,0(r2)
    f46c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f470:	e0bffa17 	ldw	r2,-24(fp)
    f474:	1081000c 	andi	r2,r2,1024
    f478:	10000b26 	beq	r2,zero,f4a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f47c:	e0bff917 	ldw	r2,-28(fp)
    f480:	10800017 	ldw	r2,0(r2)
    f484:	10800104 	addi	r2,r2,4
    f488:	1007883a 	mov	r3,r2
    f48c:	e0bff917 	ldw	r2,-28(fp)
    f490:	10800817 	ldw	r2,32(r2)
    f494:	10810014 	ori	r2,r2,1024
    f498:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f49c:	e0bff917 	ldw	r2,-28(fp)
    f4a0:	10000915 	stw	zero,36(r2)
    f4a4:	00000a06 	br	f4d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f4a8:	e0bff917 	ldw	r2,-28(fp)
    f4ac:	10c00917 	ldw	r3,36(r2)
    f4b0:	00a00034 	movhi	r2,32768
    f4b4:	10bfff04 	addi	r2,r2,-4
    f4b8:	10c00536 	bltu	r2,r3,f4d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f4bc:	e0bff917 	ldw	r2,-28(fp)
    f4c0:	10800917 	ldw	r2,36(r2)
    f4c4:	10c00044 	addi	r3,r2,1
    f4c8:	e0bff917 	ldw	r2,-28(fp)
    f4cc:	10c00915 	stw	r3,36(r2)
    f4d0:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	df000017 	ldw	fp,0(sp)
    f4dc:	dec00104 	addi	sp,sp,4
    f4e0:	f800283a 	ret

0000f4e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f4e4:	defffd04 	addi	sp,sp,-12
    f4e8:	df000215 	stw	fp,8(sp)
    f4ec:	df000204 	addi	fp,sp,8
    f4f0:	e13ffe15 	stw	r4,-8(fp)
    f4f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f4f8:	00000506 	br	f510 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f4fc:	e0bfff17 	ldw	r2,-4(fp)
    f500:	1090000c 	andi	r2,r2,16384
    f504:	10000226 	beq	r2,zero,f510 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f508:	00bffd44 	movi	r2,-11
    f50c:	00000b06 	br	f53c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f510:	e0bffe17 	ldw	r2,-8(fp)
    f514:	10c00d17 	ldw	r3,52(r2)
    f518:	e0bffe17 	ldw	r2,-8(fp)
    f51c:	10800c17 	ldw	r2,48(r2)
    f520:	18800526 	beq	r3,r2,f538 <altera_avalon_jtag_uart_close+0x54>
    f524:	e0bffe17 	ldw	r2,-8(fp)
    f528:	10c00917 	ldw	r3,36(r2)
    f52c:	e0bffe17 	ldw	r2,-8(fp)
    f530:	10800117 	ldw	r2,4(r2)
    f534:	18bff136 	bltu	r3,r2,f4fc <__alt_data_end+0xff00f4fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f538:	0005883a 	mov	r2,zero
}
    f53c:	e037883a 	mov	sp,fp
    f540:	df000017 	ldw	fp,0(sp)
    f544:	dec00104 	addi	sp,sp,4
    f548:	f800283a 	ret

0000f54c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f54c:	defffa04 	addi	sp,sp,-24
    f550:	df000515 	stw	fp,20(sp)
    f554:	df000504 	addi	fp,sp,20
    f558:	e13ffd15 	stw	r4,-12(fp)
    f55c:	e17ffe15 	stw	r5,-8(fp)
    f560:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f564:	00bff9c4 	movi	r2,-25
    f568:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f56c:	e0bffe17 	ldw	r2,-8(fp)
    f570:	10da8060 	cmpeqi	r3,r2,27137
    f574:	1800031e 	bne	r3,zero,f584 <altera_avalon_jtag_uart_ioctl+0x38>
    f578:	109a80a0 	cmpeqi	r2,r2,27138
    f57c:	1000181e 	bne	r2,zero,f5e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f580:	00002906 	br	f628 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f584:	e0bffd17 	ldw	r2,-12(fp)
    f588:	10c00117 	ldw	r3,4(r2)
    f58c:	00a00034 	movhi	r2,32768
    f590:	10bfffc4 	addi	r2,r2,-1
    f594:	18802126 	beq	r3,r2,f61c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f598:	e0bfff17 	ldw	r2,-4(fp)
    f59c:	10800017 	ldw	r2,0(r2)
    f5a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f5a4:	e0bffc17 	ldw	r2,-16(fp)
    f5a8:	10800090 	cmplti	r2,r2,2
    f5ac:	1000061e 	bne	r2,zero,f5c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    f5b0:	e0fffc17 	ldw	r3,-16(fp)
    f5b4:	00a00034 	movhi	r2,32768
    f5b8:	10bfffc4 	addi	r2,r2,-1
    f5bc:	18800226 	beq	r3,r2,f5c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    f5c0:	e0bffc17 	ldw	r2,-16(fp)
    f5c4:	00000206 	br	f5d0 <altera_avalon_jtag_uart_ioctl+0x84>
    f5c8:	00a00034 	movhi	r2,32768
    f5cc:	10bfff84 	addi	r2,r2,-2
    f5d0:	e0fffd17 	ldw	r3,-12(fp)
    f5d4:	18800115 	stw	r2,4(r3)
      rc = 0;
    f5d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f5dc:	00000f06 	br	f61c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	10c00117 	ldw	r3,4(r2)
    f5e8:	00a00034 	movhi	r2,32768
    f5ec:	10bfffc4 	addi	r2,r2,-1
    f5f0:	18800c26 	beq	r3,r2,f624 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f5f4:	e0bffd17 	ldw	r2,-12(fp)
    f5f8:	10c00917 	ldw	r3,36(r2)
    f5fc:	e0bffd17 	ldw	r2,-12(fp)
    f600:	10800117 	ldw	r2,4(r2)
    f604:	1885803a 	cmpltu	r2,r3,r2
    f608:	10c03fcc 	andi	r3,r2,255
    f60c:	e0bfff17 	ldw	r2,-4(fp)
    f610:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f614:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f618:	00000206 	br	f624 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f61c:	0001883a 	nop
    f620:	00000106 	br	f628 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f624:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f628:	e0bffb17 	ldw	r2,-20(fp)
}
    f62c:	e037883a 	mov	sp,fp
    f630:	df000017 	ldw	fp,0(sp)
    f634:	dec00104 	addi	sp,sp,4
    f638:	f800283a 	ret

0000f63c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f63c:	defff304 	addi	sp,sp,-52
    f640:	dfc00c15 	stw	ra,48(sp)
    f644:	df000b15 	stw	fp,44(sp)
    f648:	df000b04 	addi	fp,sp,44
    f64c:	e13ffc15 	stw	r4,-16(fp)
    f650:	e17ffd15 	stw	r5,-12(fp)
    f654:	e1bffe15 	stw	r6,-8(fp)
    f658:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f65c:	e0bffd17 	ldw	r2,-12(fp)
    f660:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f664:	00004706 	br	f784 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f668:	e0bffc17 	ldw	r2,-16(fp)
    f66c:	10800a17 	ldw	r2,40(r2)
    f670:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f674:	e0bffc17 	ldw	r2,-16(fp)
    f678:	10800b17 	ldw	r2,44(r2)
    f67c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f680:	e0fff717 	ldw	r3,-36(fp)
    f684:	e0bff817 	ldw	r2,-32(fp)
    f688:	18800536 	bltu	r3,r2,f6a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f68c:	e0fff717 	ldw	r3,-36(fp)
    f690:	e0bff817 	ldw	r2,-32(fp)
    f694:	1885c83a 	sub	r2,r3,r2
    f698:	e0bff615 	stw	r2,-40(fp)
    f69c:	00000406 	br	f6b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f6a0:	00c20004 	movi	r3,2048
    f6a4:	e0bff817 	ldw	r2,-32(fp)
    f6a8:	1885c83a 	sub	r2,r3,r2
    f6ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f6b0:	e0bff617 	ldw	r2,-40(fp)
    f6b4:	10001e26 	beq	r2,zero,f730 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f6b8:	e0fffe17 	ldw	r3,-8(fp)
    f6bc:	e0bff617 	ldw	r2,-40(fp)
    f6c0:	1880022e 	bgeu	r3,r2,f6cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f6c4:	e0bffe17 	ldw	r2,-8(fp)
    f6c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f6cc:	e0bffc17 	ldw	r2,-16(fp)
    f6d0:	10c00e04 	addi	r3,r2,56
    f6d4:	e0bff817 	ldw	r2,-32(fp)
    f6d8:	1885883a 	add	r2,r3,r2
    f6dc:	e1bff617 	ldw	r6,-40(fp)
    f6e0:	100b883a 	mov	r5,r2
    f6e4:	e13ff517 	ldw	r4,-44(fp)
    f6e8:	000796c0 	call	796c <memcpy>
      ptr   += n;
    f6ec:	e0fff517 	ldw	r3,-44(fp)
    f6f0:	e0bff617 	ldw	r2,-40(fp)
    f6f4:	1885883a 	add	r2,r3,r2
    f6f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f6fc:	e0fffe17 	ldw	r3,-8(fp)
    f700:	e0bff617 	ldw	r2,-40(fp)
    f704:	1885c83a 	sub	r2,r3,r2
    f708:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f70c:	e0fff817 	ldw	r3,-32(fp)
    f710:	e0bff617 	ldw	r2,-40(fp)
    f714:	1885883a 	add	r2,r3,r2
    f718:	10c1ffcc 	andi	r3,r2,2047
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f724:	e0bffe17 	ldw	r2,-8(fp)
    f728:	00bfcf16 	blt	zero,r2,f668 <__alt_data_end+0xff00f668>
    f72c:	00000106 	br	f734 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f730:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f734:	e0fff517 	ldw	r3,-44(fp)
    f738:	e0bffd17 	ldw	r2,-12(fp)
    f73c:	1880141e 	bne	r3,r2,f790 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f740:	e0bfff17 	ldw	r2,-4(fp)
    f744:	1090000c 	andi	r2,r2,16384
    f748:	1000131e 	bne	r2,zero,f798 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f74c:	0001883a 	nop
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10c00a17 	ldw	r3,40(r2)
    f758:	e0bff717 	ldw	r2,-36(fp)
    f75c:	1880051e 	bne	r3,r2,f774 <altera_avalon_jtag_uart_read+0x138>
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10c00917 	ldw	r3,36(r2)
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	10800117 	ldw	r2,4(r2)
    f770:	18bff736 	bltu	r3,r2,f750 <__alt_data_end+0xff00f750>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10c00a17 	ldw	r3,40(r2)
    f77c:	e0bff717 	ldw	r2,-36(fp)
    f780:	18800726 	beq	r3,r2,f7a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f784:	e0bffe17 	ldw	r2,-8(fp)
    f788:	00bfb716 	blt	zero,r2,f668 <__alt_data_end+0xff00f668>
    f78c:	00000506 	br	f7a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f790:	0001883a 	nop
    f794:	00000306 	br	f7a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f798:	0001883a 	nop
    f79c:	00000106 	br	f7a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f7a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f7a4:	e0fff517 	ldw	r3,-44(fp)
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	18801826 	beq	r3,r2,f810 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7b0:	0005303a 	rdctl	r2,status
    f7b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7b8:	e0fffb17 	ldw	r3,-20(fp)
    f7bc:	00bfff84 	movi	r2,-2
    f7c0:	1884703a 	and	r2,r3,r2
    f7c4:	1001703a 	wrctl	status,r2
  
  return context;
    f7c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f7cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f7d0:	e0bffc17 	ldw	r2,-16(fp)
    f7d4:	10800817 	ldw	r2,32(r2)
    f7d8:	10c00054 	ori	r3,r2,1
    f7dc:	e0bffc17 	ldw	r2,-16(fp)
    f7e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	10800017 	ldw	r2,0(r2)
    f7ec:	10800104 	addi	r2,r2,4
    f7f0:	1007883a 	mov	r3,r2
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10800817 	ldw	r2,32(r2)
    f7fc:	18800035 	stwio	r2,0(r3)
    f800:	e0bffa17 	ldw	r2,-24(fp)
    f804:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f808:	e0bff917 	ldw	r2,-28(fp)
    f80c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f810:	e0fff517 	ldw	r3,-44(fp)
    f814:	e0bffd17 	ldw	r2,-12(fp)
    f818:	18800426 	beq	r3,r2,f82c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f81c:	e0fff517 	ldw	r3,-44(fp)
    f820:	e0bffd17 	ldw	r2,-12(fp)
    f824:	1885c83a 	sub	r2,r3,r2
    f828:	00000606 	br	f844 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f82c:	e0bfff17 	ldw	r2,-4(fp)
    f830:	1090000c 	andi	r2,r2,16384
    f834:	10000226 	beq	r2,zero,f840 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f838:	00bffd44 	movi	r2,-11
    f83c:	00000106 	br	f844 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f840:	00bffec4 	movi	r2,-5
}
    f844:	e037883a 	mov	sp,fp
    f848:	dfc00117 	ldw	ra,4(sp)
    f84c:	df000017 	ldw	fp,0(sp)
    f850:	dec00204 	addi	sp,sp,8
    f854:	f800283a 	ret

0000f858 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f858:	defff304 	addi	sp,sp,-52
    f85c:	dfc00c15 	stw	ra,48(sp)
    f860:	df000b15 	stw	fp,44(sp)
    f864:	df000b04 	addi	fp,sp,44
    f868:	e13ffc15 	stw	r4,-16(fp)
    f86c:	e17ffd15 	stw	r5,-12(fp)
    f870:	e1bffe15 	stw	r6,-8(fp)
    f874:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f878:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f87c:	e0bffd17 	ldw	r2,-12(fp)
    f880:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f884:	00003706 	br	f964 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f888:	e0bffc17 	ldw	r2,-16(fp)
    f88c:	10800c17 	ldw	r2,48(r2)
    f890:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f894:	e0bffc17 	ldw	r2,-16(fp)
    f898:	10800d17 	ldw	r2,52(r2)
    f89c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f8a0:	e0fff917 	ldw	r3,-28(fp)
    f8a4:	e0bff517 	ldw	r2,-44(fp)
    f8a8:	1880062e 	bgeu	r3,r2,f8c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f8ac:	e0fff517 	ldw	r3,-44(fp)
    f8b0:	e0bff917 	ldw	r2,-28(fp)
    f8b4:	1885c83a 	sub	r2,r3,r2
    f8b8:	10bfffc4 	addi	r2,r2,-1
    f8bc:	e0bff615 	stw	r2,-40(fp)
    f8c0:	00000b06 	br	f8f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f8c4:	e0bff517 	ldw	r2,-44(fp)
    f8c8:	10000526 	beq	r2,zero,f8e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f8cc:	00c20004 	movi	r3,2048
    f8d0:	e0bff917 	ldw	r2,-28(fp)
    f8d4:	1885c83a 	sub	r2,r3,r2
    f8d8:	e0bff615 	stw	r2,-40(fp)
    f8dc:	00000406 	br	f8f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f8e0:	00c1ffc4 	movi	r3,2047
    f8e4:	e0bff917 	ldw	r2,-28(fp)
    f8e8:	1885c83a 	sub	r2,r3,r2
    f8ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f8f0:	e0bff617 	ldw	r2,-40(fp)
    f8f4:	10001e26 	beq	r2,zero,f970 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f8f8:	e0fffe17 	ldw	r3,-8(fp)
    f8fc:	e0bff617 	ldw	r2,-40(fp)
    f900:	1880022e 	bgeu	r3,r2,f90c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f904:	e0bffe17 	ldw	r2,-8(fp)
    f908:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f90c:	e0bffc17 	ldw	r2,-16(fp)
    f910:	10c20e04 	addi	r3,r2,2104
    f914:	e0bff917 	ldw	r2,-28(fp)
    f918:	1885883a 	add	r2,r3,r2
    f91c:	e1bff617 	ldw	r6,-40(fp)
    f920:	e17ffd17 	ldw	r5,-12(fp)
    f924:	1009883a 	mov	r4,r2
    f928:	000796c0 	call	796c <memcpy>
      ptr   += n;
    f92c:	e0fffd17 	ldw	r3,-12(fp)
    f930:	e0bff617 	ldw	r2,-40(fp)
    f934:	1885883a 	add	r2,r3,r2
    f938:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f93c:	e0fffe17 	ldw	r3,-8(fp)
    f940:	e0bff617 	ldw	r2,-40(fp)
    f944:	1885c83a 	sub	r2,r3,r2
    f948:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f94c:	e0fff917 	ldw	r3,-28(fp)
    f950:	e0bff617 	ldw	r2,-40(fp)
    f954:	1885883a 	add	r2,r3,r2
    f958:	10c1ffcc 	andi	r3,r2,2047
    f95c:	e0bffc17 	ldw	r2,-16(fp)
    f960:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f964:	e0bffe17 	ldw	r2,-8(fp)
    f968:	00bfc716 	blt	zero,r2,f888 <__alt_data_end+0xff00f888>
    f96c:	00000106 	br	f974 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f970:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f974:	0005303a 	rdctl	r2,status
    f978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f97c:	e0fffb17 	ldw	r3,-20(fp)
    f980:	00bfff84 	movi	r2,-2
    f984:	1884703a 	and	r2,r3,r2
    f988:	1001703a 	wrctl	status,r2
  
  return context;
    f98c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f990:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f994:	e0bffc17 	ldw	r2,-16(fp)
    f998:	10800817 	ldw	r2,32(r2)
    f99c:	10c00094 	ori	r3,r2,2
    f9a0:	e0bffc17 	ldw	r2,-16(fp)
    f9a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f9a8:	e0bffc17 	ldw	r2,-16(fp)
    f9ac:	10800017 	ldw	r2,0(r2)
    f9b0:	10800104 	addi	r2,r2,4
    f9b4:	1007883a 	mov	r3,r2
    f9b8:	e0bffc17 	ldw	r2,-16(fp)
    f9bc:	10800817 	ldw	r2,32(r2)
    f9c0:	18800035 	stwio	r2,0(r3)
    f9c4:	e0bffa17 	ldw	r2,-24(fp)
    f9c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9cc:	e0bff817 	ldw	r2,-32(fp)
    f9d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f9d4:	e0bffe17 	ldw	r2,-8(fp)
    f9d8:	0080100e 	bge	zero,r2,fa1c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f9dc:	e0bfff17 	ldw	r2,-4(fp)
    f9e0:	1090000c 	andi	r2,r2,16384
    f9e4:	1000101e 	bne	r2,zero,fa28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f9e8:	0001883a 	nop
    f9ec:	e0bffc17 	ldw	r2,-16(fp)
    f9f0:	10c00d17 	ldw	r3,52(r2)
    f9f4:	e0bff517 	ldw	r2,-44(fp)
    f9f8:	1880051e 	bne	r3,r2,fa10 <altera_avalon_jtag_uart_write+0x1b8>
    f9fc:	e0bffc17 	ldw	r2,-16(fp)
    fa00:	10c00917 	ldw	r3,36(r2)
    fa04:	e0bffc17 	ldw	r2,-16(fp)
    fa08:	10800117 	ldw	r2,4(r2)
    fa0c:	18bff736 	bltu	r3,r2,f9ec <__alt_data_end+0xff00f9ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fa10:	e0bffc17 	ldw	r2,-16(fp)
    fa14:	10800917 	ldw	r2,36(r2)
    fa18:	1000051e 	bne	r2,zero,fa30 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fa1c:	e0bffe17 	ldw	r2,-8(fp)
    fa20:	00bfd016 	blt	zero,r2,f964 <__alt_data_end+0xff00f964>
    fa24:	00000306 	br	fa34 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fa28:	0001883a 	nop
    fa2c:	00000106 	br	fa34 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fa30:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fa34:	e0fffd17 	ldw	r3,-12(fp)
    fa38:	e0bff717 	ldw	r2,-36(fp)
    fa3c:	18800426 	beq	r3,r2,fa50 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fa40:	e0fffd17 	ldw	r3,-12(fp)
    fa44:	e0bff717 	ldw	r2,-36(fp)
    fa48:	1885c83a 	sub	r2,r3,r2
    fa4c:	00000606 	br	fa68 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fa50:	e0bfff17 	ldw	r2,-4(fp)
    fa54:	1090000c 	andi	r2,r2,16384
    fa58:	10000226 	beq	r2,zero,fa64 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fa5c:	00bffd44 	movi	r2,-11
    fa60:	00000106 	br	fa68 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fa64:	00bffec4 	movi	r2,-5
}
    fa68:	e037883a 	mov	sp,fp
    fa6c:	dfc00117 	ldw	ra,4(sp)
    fa70:	df000017 	ldw	fp,0(sp)
    fa74:	dec00204 	addi	sp,sp,8
    fa78:	f800283a 	ret

0000fa7c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fa7c:	defffa04 	addi	sp,sp,-24
    fa80:	dfc00515 	stw	ra,20(sp)
    fa84:	df000415 	stw	fp,16(sp)
    fa88:	df000404 	addi	fp,sp,16
    fa8c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fa90:	0007883a 	mov	r3,zero
    fa94:	e0bfff17 	ldw	r2,-4(fp)
    fa98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fa9c:	e0bfff17 	ldw	r2,-4(fp)
    faa0:	10800104 	addi	r2,r2,4
    faa4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    faa8:	0005303a 	rdctl	r2,status
    faac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fab0:	e0fffd17 	ldw	r3,-12(fp)
    fab4:	00bfff84 	movi	r2,-2
    fab8:	1884703a 	and	r2,r3,r2
    fabc:	1001703a 	wrctl	status,r2
  
  return context;
    fac0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fac4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fac8:	00107d00 	call	107d0 <alt_tick>
    facc:	e0bffc17 	ldw	r2,-16(fp)
    fad0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fad4:	e0bffe17 	ldw	r2,-8(fp)
    fad8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fadc:	0001883a 	nop
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    faf4:	defff804 	addi	sp,sp,-32
    faf8:	dfc00715 	stw	ra,28(sp)
    fafc:	df000615 	stw	fp,24(sp)
    fb00:	df000604 	addi	fp,sp,24
    fb04:	e13ffc15 	stw	r4,-16(fp)
    fb08:	e17ffd15 	stw	r5,-12(fp)
    fb0c:	e1bffe15 	stw	r6,-8(fp)
    fb10:	e1ffff15 	stw	r7,-4(fp)
    fb14:	e0bfff17 	ldw	r2,-4(fp)
    fb18:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fb1c:	d0a72a17 	ldw	r2,-25432(gp)
    fb20:	1000021e 	bne	r2,zero,fb2c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fb24:	e0bffb17 	ldw	r2,-20(fp)
    fb28:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fb2c:	e0bffc17 	ldw	r2,-16(fp)
    fb30:	10800104 	addi	r2,r2,4
    fb34:	00c001c4 	movi	r3,7
    fb38:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fb3c:	d8000015 	stw	zero,0(sp)
    fb40:	e1fffc17 	ldw	r7,-16(fp)
    fb44:	01800074 	movhi	r6,1
    fb48:	31be9f04 	addi	r6,r6,-1412
    fb4c:	e17ffe17 	ldw	r5,-8(fp)
    fb50:	e13ffd17 	ldw	r4,-12(fp)
    fb54:	00101000 	call	10100 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fb58:	0001883a 	nop
    fb5c:	e037883a 	mov	sp,fp
    fb60:	dfc00117 	ldw	ra,4(sp)
    fb64:	df000017 	ldw	fp,0(sp)
    fb68:	dec00204 	addi	sp,sp,8
    fb6c:	f800283a 	ret

0000fb70 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fb70:	defffe04 	addi	sp,sp,-8
    fb74:	df000115 	stw	fp,4(sp)
    fb78:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fb7c:	d0a72717 	ldw	r2,-25444(gp)
    fb80:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fb84:	d0a72817 	ldw	r2,-25440(gp)
    fb88:	1000021e 	bne	r2,zero,fb94 <alt_timestamp_start+0x24>
  {
    return -1;
    fb8c:	00bfffc4 	movi	r2,-1
    fb90:	00001106 	br	fbd8 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fb94:	e0bfff17 	ldw	r2,-4(fp)
    fb98:	10800104 	addi	r2,r2,4
    fb9c:	00c00204 	movi	r3,8
    fba0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	10800204 	addi	r2,r2,8
    fbac:	00ffffd4 	movui	r3,65535
    fbb0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fbb4:	e0bfff17 	ldw	r2,-4(fp)
    fbb8:	10800304 	addi	r2,r2,12
    fbbc:	00ffffd4 	movui	r3,65535
    fbc0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fbc4:	e0bfff17 	ldw	r2,-4(fp)
    fbc8:	10800104 	addi	r2,r2,4
    fbcc:	00c00104 	movi	r3,4
    fbd0:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fbd4:	0005883a 	mov	r2,zero
}
    fbd8:	e037883a 	mov	sp,fp
    fbdc:	df000017 	ldw	fp,0(sp)
    fbe0:	dec00104 	addi	sp,sp,4
    fbe4:	f800283a 	ret

0000fbe8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fbe8:	defffc04 	addi	sp,sp,-16
    fbec:	df000315 	stw	fp,12(sp)
    fbf0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fbf4:	d0a72717 	ldw	r2,-25444(gp)
    fbf8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fbfc:	d0a72817 	ldw	r2,-25440(gp)
    fc00:	1000021e 	bne	r2,zero,fc0c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fc04:	00bfffc4 	movi	r2,-1
    fc08:	00001306 	br	fc58 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fc0c:	e0bffd17 	ldw	r2,-12(fp)
    fc10:	10800404 	addi	r2,r2,16
    fc14:	0007883a 	mov	r3,zero
    fc18:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fc1c:	e0bffd17 	ldw	r2,-12(fp)
    fc20:	10800404 	addi	r2,r2,16
    fc24:	10800037 	ldwio	r2,0(r2)
    fc28:	10bfffcc 	andi	r2,r2,65535
    fc2c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fc30:	e0bffd17 	ldw	r2,-12(fp)
    fc34:	10800504 	addi	r2,r2,20
    fc38:	10800037 	ldwio	r2,0(r2)
    fc3c:	10bfffcc 	andi	r2,r2,65535
    fc40:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fc44:	e0bfff17 	ldw	r2,-4(fp)
    fc48:	1006943a 	slli	r3,r2,16
    fc4c:	e0bffe17 	ldw	r2,-8(fp)
    fc50:	1884b03a 	or	r2,r3,r2
    fc54:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fc58:	e037883a 	mov	sp,fp
    fc5c:	df000017 	ldw	fp,0(sp)
    fc60:	dec00104 	addi	sp,sp,4
    fc64:	f800283a 	ret

0000fc68 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fc68:	deffff04 	addi	sp,sp,-4
    fc6c:	df000015 	stw	fp,0(sp)
    fc70:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fc74:	d0a72817 	ldw	r2,-25440(gp)
}
    fc78:	e037883a 	mov	sp,fp
    fc7c:	df000017 	ldw	fp,0(sp)
    fc80:	dec00104 	addi	sp,sp,4
    fc84:	f800283a 	ret

0000fc88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc88:	defff504 	addi	sp,sp,-44
    fc8c:	df000a15 	stw	fp,40(sp)
    fc90:	df000a04 	addi	fp,sp,40
    fc94:	e13ffc15 	stw	r4,-16(fp)
    fc98:	e17ffd15 	stw	r5,-12(fp)
    fc9c:	e1bffe15 	stw	r6,-8(fp)
    fca0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fca4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fca8:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
    fcac:	10003c26 	beq	r2,zero,fda0 <alt_alarm_start+0x118>
  {
    if (alarm)
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	10003826 	beq	r2,zero,fd98 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fcb8:	e0bffc17 	ldw	r2,-16(fp)
    fcbc:	e0fffe17 	ldw	r3,-8(fp)
    fcc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	e0ffff17 	ldw	r3,-4(fp)
    fccc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcd0:	0005303a 	rdctl	r2,status
    fcd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcd8:	e0fff917 	ldw	r3,-28(fp)
    fcdc:	00bfff84 	movi	r2,-2
    fce0:	1884703a 	and	r2,r3,r2
    fce4:	1001703a 	wrctl	status,r2
  
  return context;
    fce8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fcec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fcf0:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
    fcf4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fcf8:	e0fffd17 	ldw	r3,-12(fp)
    fcfc:	e0bff617 	ldw	r2,-40(fp)
    fd00:	1885883a 	add	r2,r3,r2
    fd04:	10c00044 	addi	r3,r2,1
    fd08:	e0bffc17 	ldw	r2,-16(fp)
    fd0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fd10:	e0bffc17 	ldw	r2,-16(fp)
    fd14:	10c00217 	ldw	r3,8(r2)
    fd18:	e0bff617 	ldw	r2,-40(fp)
    fd1c:	1880042e 	bgeu	r3,r2,fd30 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fd20:	e0bffc17 	ldw	r2,-16(fp)
    fd24:	00c00044 	movi	r3,1
    fd28:	10c00405 	stb	r3,16(r2)
    fd2c:	00000206 	br	fd38 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fd30:	e0bffc17 	ldw	r2,-16(fp)
    fd34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fd38:	e0bffc17 	ldw	r2,-16(fp)
    fd3c:	d0e00e04 	addi	r3,gp,-32712
    fd40:	e0fffa15 	stw	r3,-24(fp)
    fd44:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fd48:	e0bffb17 	ldw	r2,-20(fp)
    fd4c:	e0fffa17 	ldw	r3,-24(fp)
    fd50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fd54:	e0bffa17 	ldw	r2,-24(fp)
    fd58:	10c00017 	ldw	r3,0(r2)
    fd5c:	e0bffb17 	ldw	r2,-20(fp)
    fd60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fd64:	e0bffa17 	ldw	r2,-24(fp)
    fd68:	10800017 	ldw	r2,0(r2)
    fd6c:	e0fffb17 	ldw	r3,-20(fp)
    fd70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fd74:	e0bffa17 	ldw	r2,-24(fp)
    fd78:	e0fffb17 	ldw	r3,-20(fp)
    fd7c:	10c00015 	stw	r3,0(r2)
    fd80:	e0bff817 	ldw	r2,-32(fp)
    fd84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd88:	e0bff717 	ldw	r2,-36(fp)
    fd8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fd90:	0005883a 	mov	r2,zero
    fd94:	00000306 	br	fda4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fd98:	00bffa84 	movi	r2,-22
    fd9c:	00000106 	br	fda4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fda0:	00bfde84 	movi	r2,-134
  }
}
    fda4:	e037883a 	mov	sp,fp
    fda8:	df000017 	ldw	fp,0(sp)
    fdac:	dec00104 	addi	sp,sp,4
    fdb0:	f800283a 	ret

0000fdb4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fdb4:	defffa04 	addi	sp,sp,-24
    fdb8:	dfc00515 	stw	ra,20(sp)
    fdbc:	df000415 	stw	fp,16(sp)
    fdc0:	df000404 	addi	fp,sp,16
    fdc4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fdc8:	008000c4 	movi	r2,3
    fdcc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fdd0:	e0fffd17 	ldw	r3,-12(fp)
    fdd4:	008003f4 	movhi	r2,15
    fdd8:	10909004 	addi	r2,r2,16960
    fddc:	1885383a 	mul	r2,r3,r2
    fde0:	100b883a 	mov	r5,r2
    fde4:	0100bef4 	movhi	r4,763
    fde8:	213c2004 	addi	r4,r4,-3968
    fdec:	0001d680 	call	1d68 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fdf0:	100b883a 	mov	r5,r2
    fdf4:	01200034 	movhi	r4,32768
    fdf8:	213fffc4 	addi	r4,r4,-1
    fdfc:	0001d680 	call	1d68 <__udivsi3>
    fe00:	100b883a 	mov	r5,r2
    fe04:	e13fff17 	ldw	r4,-4(fp)
    fe08:	0001d680 	call	1d68 <__udivsi3>
    fe0c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fe10:	e0bffe17 	ldw	r2,-8(fp)
    fe14:	10002a26 	beq	r2,zero,fec0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fe18:	e03ffc15 	stw	zero,-16(fp)
    fe1c:	00001706 	br	fe7c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fe20:	00a00034 	movhi	r2,32768
    fe24:	10bfffc4 	addi	r2,r2,-1
    fe28:	10bfffc4 	addi	r2,r2,-1
    fe2c:	103ffe1e 	bne	r2,zero,fe28 <__alt_data_end+0xff00fe28>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fe30:	e0fffd17 	ldw	r3,-12(fp)
    fe34:	008003f4 	movhi	r2,15
    fe38:	10909004 	addi	r2,r2,16960
    fe3c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fe40:	100b883a 	mov	r5,r2
    fe44:	0100bef4 	movhi	r4,763
    fe48:	213c2004 	addi	r4,r4,-3968
    fe4c:	0001d680 	call	1d68 <__udivsi3>
    fe50:	100b883a 	mov	r5,r2
    fe54:	01200034 	movhi	r4,32768
    fe58:	213fffc4 	addi	r4,r4,-1
    fe5c:	0001d680 	call	1d68 <__udivsi3>
    fe60:	1007883a 	mov	r3,r2
    fe64:	e0bfff17 	ldw	r2,-4(fp)
    fe68:	10c5c83a 	sub	r2,r2,r3
    fe6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fe70:	e0bffc17 	ldw	r2,-16(fp)
    fe74:	10800044 	addi	r2,r2,1
    fe78:	e0bffc15 	stw	r2,-16(fp)
    fe7c:	e0fffc17 	ldw	r3,-16(fp)
    fe80:	e0bffe17 	ldw	r2,-8(fp)
    fe84:	18bfe616 	blt	r3,r2,fe20 <__alt_data_end+0xff00fe20>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe88:	e0fffd17 	ldw	r3,-12(fp)
    fe8c:	008003f4 	movhi	r2,15
    fe90:	10909004 	addi	r2,r2,16960
    fe94:	1885383a 	mul	r2,r3,r2
    fe98:	100b883a 	mov	r5,r2
    fe9c:	0100bef4 	movhi	r4,763
    fea0:	213c2004 	addi	r4,r4,-3968
    fea4:	0001d680 	call	1d68 <__udivsi3>
    fea8:	1007883a 	mov	r3,r2
    feac:	e0bfff17 	ldw	r2,-4(fp)
    feb0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    feb4:	10bfffc4 	addi	r2,r2,-1
    feb8:	103ffe1e 	bne	r2,zero,feb4 <__alt_data_end+0xff00feb4>
    febc:	00000d06 	br	fef4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fec0:	e0fffd17 	ldw	r3,-12(fp)
    fec4:	008003f4 	movhi	r2,15
    fec8:	10909004 	addi	r2,r2,16960
    fecc:	1885383a 	mul	r2,r3,r2
    fed0:	100b883a 	mov	r5,r2
    fed4:	0100bef4 	movhi	r4,763
    fed8:	213c2004 	addi	r4,r4,-3968
    fedc:	0001d680 	call	1d68 <__udivsi3>
    fee0:	1007883a 	mov	r3,r2
    fee4:	e0bfff17 	ldw	r2,-4(fp)
    fee8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    feec:	10bfffc4 	addi	r2,r2,-1
    fef0:	00bffe16 	blt	zero,r2,feec <__alt_data_end+0xff00feec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fef4:	0005883a 	mov	r2,zero
}
    fef8:	e037883a 	mov	sp,fp
    fefc:	dfc00117 	ldw	ra,4(sp)
    ff00:	df000017 	ldw	fp,0(sp)
    ff04:	dec00204 	addi	sp,sp,8
    ff08:	f800283a 	ret

0000ff0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ff0c:	deffff04 	addi	sp,sp,-4
    ff10:	df000015 	stw	fp,0(sp)
    ff14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ff18:	0001883a 	nop
    ff1c:	e037883a 	mov	sp,fp
    ff20:	df000017 	ldw	fp,0(sp)
    ff24:	dec00104 	addi	sp,sp,4
    ff28:	f800283a 	ret

0000ff2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ff2c:	defffe04 	addi	sp,sp,-8
    ff30:	dfc00115 	stw	ra,4(sp)
    ff34:	df000015 	stw	fp,0(sp)
    ff38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff3c:	d0a00b17 	ldw	r2,-32724(gp)
    ff40:	10000326 	beq	r2,zero,ff50 <alt_get_errno+0x24>
    ff44:	d0a00b17 	ldw	r2,-32724(gp)
    ff48:	103ee83a 	callr	r2
    ff4c:	00000106 	br	ff54 <alt_get_errno+0x28>
    ff50:	d0a72004 	addi	r2,gp,-25472
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	dfc00117 	ldw	ra,4(sp)
    ff5c:	df000017 	ldw	fp,0(sp)
    ff60:	dec00204 	addi	sp,sp,8
    ff64:	f800283a 	ret

0000ff68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ff68:	defffa04 	addi	sp,sp,-24
    ff6c:	dfc00515 	stw	ra,20(sp)
    ff70:	df000415 	stw	fp,16(sp)
    ff74:	df000404 	addi	fp,sp,16
    ff78:	e13ffe15 	stw	r4,-8(fp)
    ff7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff80:	e0bffe17 	ldw	r2,-8(fp)
    ff84:	10000326 	beq	r2,zero,ff94 <alt_dev_llist_insert+0x2c>
    ff88:	e0bffe17 	ldw	r2,-8(fp)
    ff8c:	10800217 	ldw	r2,8(r2)
    ff90:	1000061e 	bne	r2,zero,ffac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff94:	000ff2c0 	call	ff2c <alt_get_errno>
    ff98:	1007883a 	mov	r3,r2
    ff9c:	00800584 	movi	r2,22
    ffa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ffa4:	00bffa84 	movi	r2,-22
    ffa8:	00001306 	br	fff8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ffac:	e0bffe17 	ldw	r2,-8(fp)
    ffb0:	e0ffff17 	ldw	r3,-4(fp)
    ffb4:	e0fffc15 	stw	r3,-16(fp)
    ffb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ffbc:	e0bffd17 	ldw	r2,-12(fp)
    ffc0:	e0fffc17 	ldw	r3,-16(fp)
    ffc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ffc8:	e0bffc17 	ldw	r2,-16(fp)
    ffcc:	10c00017 	ldw	r3,0(r2)
    ffd0:	e0bffd17 	ldw	r2,-12(fp)
    ffd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ffd8:	e0bffc17 	ldw	r2,-16(fp)
    ffdc:	10800017 	ldw	r2,0(r2)
    ffe0:	e0fffd17 	ldw	r3,-12(fp)
    ffe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ffe8:	e0bffc17 	ldw	r2,-16(fp)
    ffec:	e0fffd17 	ldw	r3,-12(fp)
    fff0:	10c00015 	stw	r3,0(r2)

  return 0;  
    fff4:	0005883a 	mov	r2,zero
}
    fff8:	e037883a 	mov	sp,fp
    fffc:	dfc00117 	ldw	ra,4(sp)
   10000:	df000017 	ldw	fp,0(sp)
   10004:	dec00204 	addi	sp,sp,8
   10008:	f800283a 	ret

0001000c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1000c:	defffd04 	addi	sp,sp,-12
   10010:	dfc00215 	stw	ra,8(sp)
   10014:	df000115 	stw	fp,4(sp)
   10018:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1001c:	00800074 	movhi	r2,1
   10020:	1083fd04 	addi	r2,r2,4084
   10024:	e0bfff15 	stw	r2,-4(fp)
   10028:	00000606 	br	10044 <_do_ctors+0x38>
        (*ctor) (); 
   1002c:	e0bfff17 	ldw	r2,-4(fp)
   10030:	10800017 	ldw	r2,0(r2)
   10034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10038:	e0bfff17 	ldw	r2,-4(fp)
   1003c:	10bfff04 	addi	r2,r2,-4
   10040:	e0bfff15 	stw	r2,-4(fp)
   10044:	e0ffff17 	ldw	r3,-4(fp)
   10048:	00800074 	movhi	r2,1
   1004c:	1083fe04 	addi	r2,r2,4088
   10050:	18bff62e 	bgeu	r3,r2,1002c <__alt_data_end+0xff01002c>
        (*ctor) (); 
}
   10054:	0001883a 	nop
   10058:	e037883a 	mov	sp,fp
   1005c:	dfc00117 	ldw	ra,4(sp)
   10060:	df000017 	ldw	fp,0(sp)
   10064:	dec00204 	addi	sp,sp,8
   10068:	f800283a 	ret

0001006c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1006c:	defffd04 	addi	sp,sp,-12
   10070:	dfc00215 	stw	ra,8(sp)
   10074:	df000115 	stw	fp,4(sp)
   10078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1007c:	00800074 	movhi	r2,1
   10080:	1083fd04 	addi	r2,r2,4084
   10084:	e0bfff15 	stw	r2,-4(fp)
   10088:	00000606 	br	100a4 <_do_dtors+0x38>
        (*dtor) (); 
   1008c:	e0bfff17 	ldw	r2,-4(fp)
   10090:	10800017 	ldw	r2,0(r2)
   10094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	10bfff04 	addi	r2,r2,-4
   100a0:	e0bfff15 	stw	r2,-4(fp)
   100a4:	e0ffff17 	ldw	r3,-4(fp)
   100a8:	00800074 	movhi	r2,1
   100ac:	1083fe04 	addi	r2,r2,4088
   100b0:	18bff62e 	bgeu	r3,r2,1008c <__alt_data_end+0xff01008c>
        (*dtor) (); 
}
   100b4:	0001883a 	nop
   100b8:	e037883a 	mov	sp,fp
   100bc:	dfc00117 	ldw	ra,4(sp)
   100c0:	df000017 	ldw	fp,0(sp)
   100c4:	dec00204 	addi	sp,sp,8
   100c8:	f800283a 	ret

000100cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   100cc:	defffe04 	addi	sp,sp,-8
   100d0:	dfc00115 	stw	ra,4(sp)
   100d4:	df000015 	stw	fp,0(sp)
   100d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   100dc:	01440004 	movi	r5,4096
   100e0:	0009883a 	mov	r4,zero
   100e4:	0010b380 	call	10b38 <alt_icache_flush>
#endif
}
   100e8:	0001883a 	nop
   100ec:	e037883a 	mov	sp,fp
   100f0:	dfc00117 	ldw	ra,4(sp)
   100f4:	df000017 	ldw	fp,0(sp)
   100f8:	dec00204 	addi	sp,sp,8
   100fc:	f800283a 	ret

00010100 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10100:	defff904 	addi	sp,sp,-28
   10104:	dfc00615 	stw	ra,24(sp)
   10108:	df000515 	stw	fp,20(sp)
   1010c:	df000504 	addi	fp,sp,20
   10110:	e13ffc15 	stw	r4,-16(fp)
   10114:	e17ffd15 	stw	r5,-12(fp)
   10118:	e1bffe15 	stw	r6,-8(fp)
   1011c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10120:	e0800217 	ldw	r2,8(fp)
   10124:	d8800015 	stw	r2,0(sp)
   10128:	e1ffff17 	ldw	r7,-4(fp)
   1012c:	e1bffe17 	ldw	r6,-8(fp)
   10130:	e17ffd17 	ldw	r5,-12(fp)
   10134:	e13ffc17 	ldw	r4,-16(fp)
   10138:	00102b00 	call	102b0 <alt_iic_isr_register>
}  
   1013c:	e037883a 	mov	sp,fp
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	df000017 	ldw	fp,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret

00010150 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10150:	defff904 	addi	sp,sp,-28
   10154:	df000615 	stw	fp,24(sp)
   10158:	df000604 	addi	fp,sp,24
   1015c:	e13ffe15 	stw	r4,-8(fp)
   10160:	e17fff15 	stw	r5,-4(fp)
   10164:	e0bfff17 	ldw	r2,-4(fp)
   10168:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1016c:	0005303a 	rdctl	r2,status
   10170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10174:	e0fffb17 	ldw	r3,-20(fp)
   10178:	00bfff84 	movi	r2,-2
   1017c:	1884703a 	and	r2,r3,r2
   10180:	1001703a 	wrctl	status,r2
  
  return context;
   10184:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10188:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1018c:	00c00044 	movi	r3,1
   10190:	e0bffa17 	ldw	r2,-24(fp)
   10194:	1884983a 	sll	r2,r3,r2
   10198:	1007883a 	mov	r3,r2
   1019c:	d0a72917 	ldw	r2,-25436(gp)
   101a0:	1884b03a 	or	r2,r3,r2
   101a4:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101a8:	d0a72917 	ldw	r2,-25436(gp)
   101ac:	100170fa 	wrctl	ienable,r2
   101b0:	e0bffc17 	ldw	r2,-16(fp)
   101b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101b8:	e0bffd17 	ldw	r2,-12(fp)
   101bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   101c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   101c4:	0001883a 	nop
}
   101c8:	e037883a 	mov	sp,fp
   101cc:	df000017 	ldw	fp,0(sp)
   101d0:	dec00104 	addi	sp,sp,4
   101d4:	f800283a 	ret

000101d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   101d8:	defff904 	addi	sp,sp,-28
   101dc:	df000615 	stw	fp,24(sp)
   101e0:	df000604 	addi	fp,sp,24
   101e4:	e13ffe15 	stw	r4,-8(fp)
   101e8:	e17fff15 	stw	r5,-4(fp)
   101ec:	e0bfff17 	ldw	r2,-4(fp)
   101f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101f4:	0005303a 	rdctl	r2,status
   101f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101fc:	e0fffb17 	ldw	r3,-20(fp)
   10200:	00bfff84 	movi	r2,-2
   10204:	1884703a 	and	r2,r3,r2
   10208:	1001703a 	wrctl	status,r2
  
  return context;
   1020c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10210:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10214:	00c00044 	movi	r3,1
   10218:	e0bffa17 	ldw	r2,-24(fp)
   1021c:	1884983a 	sll	r2,r3,r2
   10220:	0084303a 	nor	r2,zero,r2
   10224:	1007883a 	mov	r3,r2
   10228:	d0a72917 	ldw	r2,-25436(gp)
   1022c:	1884703a 	and	r2,r3,r2
   10230:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10234:	d0a72917 	ldw	r2,-25436(gp)
   10238:	100170fa 	wrctl	ienable,r2
   1023c:	e0bffc17 	ldw	r2,-16(fp)
   10240:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10244:	e0bffd17 	ldw	r2,-12(fp)
   10248:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1024c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10250:	0001883a 	nop
}
   10254:	e037883a 	mov	sp,fp
   10258:	df000017 	ldw	fp,0(sp)
   1025c:	dec00104 	addi	sp,sp,4
   10260:	f800283a 	ret

00010264 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10264:	defffc04 	addi	sp,sp,-16
   10268:	df000315 	stw	fp,12(sp)
   1026c:	df000304 	addi	fp,sp,12
   10270:	e13ffe15 	stw	r4,-8(fp)
   10274:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10278:	000530fa 	rdctl	r2,ienable
   1027c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10280:	00c00044 	movi	r3,1
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	1884983a 	sll	r2,r3,r2
   1028c:	1007883a 	mov	r3,r2
   10290:	e0bffd17 	ldw	r2,-12(fp)
   10294:	1884703a 	and	r2,r3,r2
   10298:	1004c03a 	cmpne	r2,r2,zero
   1029c:	10803fcc 	andi	r2,r2,255
}
   102a0:	e037883a 	mov	sp,fp
   102a4:	df000017 	ldw	fp,0(sp)
   102a8:	dec00104 	addi	sp,sp,4
   102ac:	f800283a 	ret

000102b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   102b0:	defff504 	addi	sp,sp,-44
   102b4:	dfc00a15 	stw	ra,40(sp)
   102b8:	df000915 	stw	fp,36(sp)
   102bc:	df000904 	addi	fp,sp,36
   102c0:	e13ffc15 	stw	r4,-16(fp)
   102c4:	e17ffd15 	stw	r5,-12(fp)
   102c8:	e1bffe15 	stw	r6,-8(fp)
   102cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   102d0:	00bffa84 	movi	r2,-22
   102d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   102d8:	e0bffd17 	ldw	r2,-12(fp)
   102dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   102e0:	e0bff817 	ldw	r2,-32(fp)
   102e4:	10800808 	cmpgei	r2,r2,32
   102e8:	1000271e 	bne	r2,zero,10388 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102ec:	0005303a 	rdctl	r2,status
   102f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102f4:	e0fffb17 	ldw	r3,-20(fp)
   102f8:	00bfff84 	movi	r2,-2
   102fc:	1884703a 	and	r2,r3,r2
   10300:	1001703a 	wrctl	status,r2
  
  return context;
   10304:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10308:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1030c:	00800074 	movhi	r2,1
   10310:	10940d04 	addi	r2,r2,20532
   10314:	e0fff817 	ldw	r3,-32(fp)
   10318:	180690fa 	slli	r3,r3,3
   1031c:	10c5883a 	add	r2,r2,r3
   10320:	e0fffe17 	ldw	r3,-8(fp)
   10324:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10328:	00800074 	movhi	r2,1
   1032c:	10940d04 	addi	r2,r2,20532
   10330:	e0fff817 	ldw	r3,-32(fp)
   10334:	180690fa 	slli	r3,r3,3
   10338:	10c5883a 	add	r2,r2,r3
   1033c:	10800104 	addi	r2,r2,4
   10340:	e0ffff17 	ldw	r3,-4(fp)
   10344:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	10000526 	beq	r2,zero,10364 <alt_iic_isr_register+0xb4>
   10350:	e0bff817 	ldw	r2,-32(fp)
   10354:	100b883a 	mov	r5,r2
   10358:	e13ffc17 	ldw	r4,-16(fp)
   1035c:	00101500 	call	10150 <alt_ic_irq_enable>
   10360:	00000406 	br	10374 <alt_iic_isr_register+0xc4>
   10364:	e0bff817 	ldw	r2,-32(fp)
   10368:	100b883a 	mov	r5,r2
   1036c:	e13ffc17 	ldw	r4,-16(fp)
   10370:	00101d80 	call	101d8 <alt_ic_irq_disable>
   10374:	e0bff715 	stw	r2,-36(fp)
   10378:	e0bffa17 	ldw	r2,-24(fp)
   1037c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10380:	e0bff917 	ldw	r2,-28(fp)
   10384:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10388:	e0bff717 	ldw	r2,-36(fp)
}
   1038c:	e037883a 	mov	sp,fp
   10390:	dfc00117 	ldw	ra,4(sp)
   10394:	df000017 	ldw	fp,0(sp)
   10398:	dec00204 	addi	sp,sp,8
   1039c:	f800283a 	ret

000103a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   103a0:	defff904 	addi	sp,sp,-28
   103a4:	dfc00615 	stw	ra,24(sp)
   103a8:	df000515 	stw	fp,20(sp)
   103ac:	df000504 	addi	fp,sp,20
   103b0:	e13ffc15 	stw	r4,-16(fp)
   103b4:	e17ffd15 	stw	r5,-12(fp)
   103b8:	e1bffe15 	stw	r6,-8(fp)
   103bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   103c0:	e1bfff17 	ldw	r6,-4(fp)
   103c4:	e17ffe17 	ldw	r5,-8(fp)
   103c8:	e13ffd17 	ldw	r4,-12(fp)
   103cc:	00105e00 	call	105e0 <open>
   103d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   103d4:	e0bffb17 	ldw	r2,-20(fp)
   103d8:	10001c16 	blt	r2,zero,1044c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   103dc:	00800074 	movhi	r2,1
   103e0:	10885e04 	addi	r2,r2,8568
   103e4:	e0fffb17 	ldw	r3,-20(fp)
   103e8:	18c00324 	muli	r3,r3,12
   103ec:	10c5883a 	add	r2,r2,r3
   103f0:	10c00017 	ldw	r3,0(r2)
   103f4:	e0bffc17 	ldw	r2,-16(fp)
   103f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   103fc:	00800074 	movhi	r2,1
   10400:	10885e04 	addi	r2,r2,8568
   10404:	e0fffb17 	ldw	r3,-20(fp)
   10408:	18c00324 	muli	r3,r3,12
   1040c:	10c5883a 	add	r2,r2,r3
   10410:	10800104 	addi	r2,r2,4
   10414:	10c00017 	ldw	r3,0(r2)
   10418:	e0bffc17 	ldw	r2,-16(fp)
   1041c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10420:	00800074 	movhi	r2,1
   10424:	10885e04 	addi	r2,r2,8568
   10428:	e0fffb17 	ldw	r3,-20(fp)
   1042c:	18c00324 	muli	r3,r3,12
   10430:	10c5883a 	add	r2,r2,r3
   10434:	10800204 	addi	r2,r2,8
   10438:	10c00017 	ldw	r3,0(r2)
   1043c:	e0bffc17 	ldw	r2,-16(fp)
   10440:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10444:	e13ffb17 	ldw	r4,-20(fp)
   10448:	000ecb40 	call	ecb4 <alt_release_fd>
  }
} 
   1044c:	0001883a 	nop
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10464:	defffb04 	addi	sp,sp,-20
   10468:	dfc00415 	stw	ra,16(sp)
   1046c:	df000315 	stw	fp,12(sp)
   10470:	df000304 	addi	fp,sp,12
   10474:	e13ffd15 	stw	r4,-12(fp)
   10478:	e17ffe15 	stw	r5,-8(fp)
   1047c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10480:	01c07fc4 	movi	r7,511
   10484:	01800044 	movi	r6,1
   10488:	e17ffd17 	ldw	r5,-12(fp)
   1048c:	01000074 	movhi	r4,1
   10490:	21086104 	addi	r4,r4,8580
   10494:	00103a00 	call	103a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10498:	01c07fc4 	movi	r7,511
   1049c:	000d883a 	mov	r6,zero
   104a0:	e17ffe17 	ldw	r5,-8(fp)
   104a4:	01000074 	movhi	r4,1
   104a8:	21085e04 	addi	r4,r4,8568
   104ac:	00103a00 	call	103a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   104b0:	01c07fc4 	movi	r7,511
   104b4:	01800044 	movi	r6,1
   104b8:	e17fff17 	ldw	r5,-4(fp)
   104bc:	01000074 	movhi	r4,1
   104c0:	21086404 	addi	r4,r4,8592
   104c4:	00103a00 	call	103a0 <alt_open_fd>
}  
   104c8:	0001883a 	nop
   104cc:	e037883a 	mov	sp,fp
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   104e0:	defffe04 	addi	sp,sp,-8
   104e4:	dfc00115 	stw	ra,4(sp)
   104e8:	df000015 	stw	fp,0(sp)
   104ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104f0:	d0a00b17 	ldw	r2,-32724(gp)
   104f4:	10000326 	beq	r2,zero,10504 <alt_get_errno+0x24>
   104f8:	d0a00b17 	ldw	r2,-32724(gp)
   104fc:	103ee83a 	callr	r2
   10500:	00000106 	br	10508 <alt_get_errno+0x28>
   10504:	d0a72004 	addi	r2,gp,-25472
}
   10508:	e037883a 	mov	sp,fp
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	f800283a 	ret

0001051c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1051c:	defffd04 	addi	sp,sp,-12
   10520:	df000215 	stw	fp,8(sp)
   10524:	df000204 	addi	fp,sp,8
   10528:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1052c:	e0bfff17 	ldw	r2,-4(fp)
   10530:	10800217 	ldw	r2,8(r2)
   10534:	10d00034 	orhi	r3,r2,16384
   10538:	e0bfff17 	ldw	r2,-4(fp)
   1053c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10540:	e03ffe15 	stw	zero,-8(fp)
   10544:	00001d06 	br	105bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10548:	00800074 	movhi	r2,1
   1054c:	10885e04 	addi	r2,r2,8568
   10550:	e0fffe17 	ldw	r3,-8(fp)
   10554:	18c00324 	muli	r3,r3,12
   10558:	10c5883a 	add	r2,r2,r3
   1055c:	10c00017 	ldw	r3,0(r2)
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	10800017 	ldw	r2,0(r2)
   10568:	1880111e 	bne	r3,r2,105b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1056c:	00800074 	movhi	r2,1
   10570:	10885e04 	addi	r2,r2,8568
   10574:	e0fffe17 	ldw	r3,-8(fp)
   10578:	18c00324 	muli	r3,r3,12
   1057c:	10c5883a 	add	r2,r2,r3
   10580:	10800204 	addi	r2,r2,8
   10584:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10588:	1000090e 	bge	r2,zero,105b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1058c:	e0bffe17 	ldw	r2,-8(fp)
   10590:	10c00324 	muli	r3,r2,12
   10594:	00800074 	movhi	r2,1
   10598:	10885e04 	addi	r2,r2,8568
   1059c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	18800226 	beq	r3,r2,105b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   105a8:	00bffcc4 	movi	r2,-13
   105ac:	00000806 	br	105d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   105b0:	e0bffe17 	ldw	r2,-8(fp)
   105b4:	10800044 	addi	r2,r2,1
   105b8:	e0bffe15 	stw	r2,-8(fp)
   105bc:	d0a00a17 	ldw	r2,-32728(gp)
   105c0:	1007883a 	mov	r3,r2
   105c4:	e0bffe17 	ldw	r2,-8(fp)
   105c8:	18bfdf2e 	bgeu	r3,r2,10548 <__alt_data_end+0xff010548>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   105cc:	0005883a 	mov	r2,zero
}
   105d0:	e037883a 	mov	sp,fp
   105d4:	df000017 	ldw	fp,0(sp)
   105d8:	dec00104 	addi	sp,sp,4
   105dc:	f800283a 	ret

000105e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   105e0:	defff604 	addi	sp,sp,-40
   105e4:	dfc00915 	stw	ra,36(sp)
   105e8:	df000815 	stw	fp,32(sp)
   105ec:	df000804 	addi	fp,sp,32
   105f0:	e13ffd15 	stw	r4,-12(fp)
   105f4:	e17ffe15 	stw	r5,-8(fp)
   105f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   105fc:	00bfffc4 	movi	r2,-1
   10600:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10604:	00bffb44 	movi	r2,-19
   10608:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1060c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10610:	d1600804 	addi	r5,gp,-32736
   10614:	e13ffd17 	ldw	r4,-12(fp)
   10618:	00108fc0 	call	108fc <alt_find_dev>
   1061c:	e0bff815 	stw	r2,-32(fp)
   10620:	e0bff817 	ldw	r2,-32(fp)
   10624:	1000051e 	bne	r2,zero,1063c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10628:	e13ffd17 	ldw	r4,-12(fp)
   1062c:	001098c0 	call	1098c <alt_find_file>
   10630:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10634:	00800044 	movi	r2,1
   10638:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1063c:	e0bff817 	ldw	r2,-32(fp)
   10640:	10002926 	beq	r2,zero,106e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10644:	e13ff817 	ldw	r4,-32(fp)
   10648:	0010a940 	call	10a94 <alt_get_fd>
   1064c:	e0bff915 	stw	r2,-28(fp)
   10650:	e0bff917 	ldw	r2,-28(fp)
   10654:	1000030e 	bge	r2,zero,10664 <open+0x84>
    {
      status = index;
   10658:	e0bff917 	ldw	r2,-28(fp)
   1065c:	e0bffa15 	stw	r2,-24(fp)
   10660:	00002306 	br	106f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10664:	e0bff917 	ldw	r2,-28(fp)
   10668:	10c00324 	muli	r3,r2,12
   1066c:	00800074 	movhi	r2,1
   10670:	10885e04 	addi	r2,r2,8568
   10674:	1885883a 	add	r2,r3,r2
   10678:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1067c:	e0fffe17 	ldw	r3,-8(fp)
   10680:	00900034 	movhi	r2,16384
   10684:	10bfffc4 	addi	r2,r2,-1
   10688:	1886703a 	and	r3,r3,r2
   1068c:	e0bffc17 	ldw	r2,-16(fp)
   10690:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10694:	e0bffb17 	ldw	r2,-20(fp)
   10698:	1000051e 	bne	r2,zero,106b0 <open+0xd0>
   1069c:	e13ffc17 	ldw	r4,-16(fp)
   106a0:	001051c0 	call	1051c <alt_file_locked>
   106a4:	e0bffa15 	stw	r2,-24(fp)
   106a8:	e0bffa17 	ldw	r2,-24(fp)
   106ac:	10001016 	blt	r2,zero,106f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   106b0:	e0bff817 	ldw	r2,-32(fp)
   106b4:	10800317 	ldw	r2,12(r2)
   106b8:	10000826 	beq	r2,zero,106dc <open+0xfc>
   106bc:	e0bff817 	ldw	r2,-32(fp)
   106c0:	10800317 	ldw	r2,12(r2)
   106c4:	e1ffff17 	ldw	r7,-4(fp)
   106c8:	e1bffe17 	ldw	r6,-8(fp)
   106cc:	e17ffd17 	ldw	r5,-12(fp)
   106d0:	e13ffc17 	ldw	r4,-16(fp)
   106d4:	103ee83a 	callr	r2
   106d8:	00000106 	br	106e0 <open+0x100>
   106dc:	0005883a 	mov	r2,zero
   106e0:	e0bffa15 	stw	r2,-24(fp)
   106e4:	00000206 	br	106f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   106e8:	00bffb44 	movi	r2,-19
   106ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   106f0:	e0bffa17 	ldw	r2,-24(fp)
   106f4:	1000090e 	bge	r2,zero,1071c <open+0x13c>
  {
    alt_release_fd (index);  
   106f8:	e13ff917 	ldw	r4,-28(fp)
   106fc:	000ecb40 	call	ecb4 <alt_release_fd>
    ALT_ERRNO = -status;
   10700:	00104e00 	call	104e0 <alt_get_errno>
   10704:	1007883a 	mov	r3,r2
   10708:	e0bffa17 	ldw	r2,-24(fp)
   1070c:	0085c83a 	sub	r2,zero,r2
   10710:	18800015 	stw	r2,0(r3)
    return -1;
   10714:	00bfffc4 	movi	r2,-1
   10718:	00000106 	br	10720 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1071c:	e0bff917 	ldw	r2,-28(fp)
}
   10720:	e037883a 	mov	sp,fp
   10724:	dfc00117 	ldw	ra,4(sp)
   10728:	df000017 	ldw	fp,0(sp)
   1072c:	dec00204 	addi	sp,sp,8
   10730:	f800283a 	ret

00010734 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10734:	defffa04 	addi	sp,sp,-24
   10738:	df000515 	stw	fp,20(sp)
   1073c:	df000504 	addi	fp,sp,20
   10740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10744:	0005303a 	rdctl	r2,status
   10748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1074c:	e0fffc17 	ldw	r3,-16(fp)
   10750:	00bfff84 	movi	r2,-2
   10754:	1884703a 	and	r2,r3,r2
   10758:	1001703a 	wrctl	status,r2
  
  return context;
   1075c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10760:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10764:	e0bfff17 	ldw	r2,-4(fp)
   10768:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1076c:	e0bffd17 	ldw	r2,-12(fp)
   10770:	10800017 	ldw	r2,0(r2)
   10774:	e0fffd17 	ldw	r3,-12(fp)
   10778:	18c00117 	ldw	r3,4(r3)
   1077c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10780:	e0bffd17 	ldw	r2,-12(fp)
   10784:	10800117 	ldw	r2,4(r2)
   10788:	e0fffd17 	ldw	r3,-12(fp)
   1078c:	18c00017 	ldw	r3,0(r3)
   10790:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10794:	e0bffd17 	ldw	r2,-12(fp)
   10798:	e0fffd17 	ldw	r3,-12(fp)
   1079c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	e0fffd17 	ldw	r3,-12(fp)
   107a8:	10c00015 	stw	r3,0(r2)
   107ac:	e0bffb17 	ldw	r2,-20(fp)
   107b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107b4:	e0bffe17 	ldw	r2,-8(fp)
   107b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   107bc:	0001883a 	nop
   107c0:	e037883a 	mov	sp,fp
   107c4:	df000017 	ldw	fp,0(sp)
   107c8:	dec00104 	addi	sp,sp,4
   107cc:	f800283a 	ret

000107d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   107d0:	defffb04 	addi	sp,sp,-20
   107d4:	dfc00415 	stw	ra,16(sp)
   107d8:	df000315 	stw	fp,12(sp)
   107dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   107e0:	d0a00e17 	ldw	r2,-32712(gp)
   107e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   107e8:	d0a72b17 	ldw	r2,-25428(gp)
   107ec:	10800044 	addi	r2,r2,1
   107f0:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   107f4:	00002e06 	br	108b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   107f8:	e0bffd17 	ldw	r2,-12(fp)
   107fc:	10800017 	ldw	r2,0(r2)
   10800:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	10800403 	ldbu	r2,16(r2)
   1080c:	10803fcc 	andi	r2,r2,255
   10810:	10000426 	beq	r2,zero,10824 <alt_tick+0x54>
   10814:	d0a72b17 	ldw	r2,-25428(gp)
   10818:	1000021e 	bne	r2,zero,10824 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1081c:	e0bffd17 	ldw	r2,-12(fp)
   10820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10824:	e0bffd17 	ldw	r2,-12(fp)
   10828:	10800217 	ldw	r2,8(r2)
   1082c:	d0e72b17 	ldw	r3,-25428(gp)
   10830:	18801d36 	bltu	r3,r2,108a8 <alt_tick+0xd8>
   10834:	e0bffd17 	ldw	r2,-12(fp)
   10838:	10800403 	ldbu	r2,16(r2)
   1083c:	10803fcc 	andi	r2,r2,255
   10840:	1000191e 	bne	r2,zero,108a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	10800317 	ldw	r2,12(r2)
   1084c:	e0fffd17 	ldw	r3,-12(fp)
   10850:	18c00517 	ldw	r3,20(r3)
   10854:	1809883a 	mov	r4,r3
   10858:	103ee83a 	callr	r2
   1085c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	1000031e 	bne	r2,zero,10874 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10868:	e13ffd17 	ldw	r4,-12(fp)
   1086c:	00107340 	call	10734 <alt_alarm_stop>
   10870:	00000d06 	br	108a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10874:	e0bffd17 	ldw	r2,-12(fp)
   10878:	10c00217 	ldw	r3,8(r2)
   1087c:	e0bfff17 	ldw	r2,-4(fp)
   10880:	1887883a 	add	r3,r3,r2
   10884:	e0bffd17 	ldw	r2,-12(fp)
   10888:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10c00217 	ldw	r3,8(r2)
   10894:	d0a72b17 	ldw	r2,-25428(gp)
   10898:	1880032e 	bgeu	r3,r2,108a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1089c:	e0bffd17 	ldw	r2,-12(fp)
   108a0:	00c00044 	movi	r3,1
   108a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   108a8:	e0bffe17 	ldw	r2,-8(fp)
   108ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   108b0:	e0fffd17 	ldw	r3,-12(fp)
   108b4:	d0a00e04 	addi	r2,gp,-32712
   108b8:	18bfcf1e 	bne	r3,r2,107f8 <__alt_data_end+0xff0107f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   108bc:	0001883a 	nop
}
   108c0:	0001883a 	nop
   108c4:	e037883a 	mov	sp,fp
   108c8:	dfc00117 	ldw	ra,4(sp)
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00204 	addi	sp,sp,8
   108d4:	f800283a 	ret

000108d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   108d8:	deffff04 	addi	sp,sp,-4
   108dc:	df000015 	stw	fp,0(sp)
   108e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   108e4:	000170fa 	wrctl	ienable,zero
}
   108e8:	0001883a 	nop
   108ec:	e037883a 	mov	sp,fp
   108f0:	df000017 	ldw	fp,0(sp)
   108f4:	dec00104 	addi	sp,sp,4
   108f8:	f800283a 	ret

000108fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   108fc:	defffa04 	addi	sp,sp,-24
   10900:	dfc00515 	stw	ra,20(sp)
   10904:	df000415 	stw	fp,16(sp)
   10908:	df000404 	addi	fp,sp,16
   1090c:	e13ffe15 	stw	r4,-8(fp)
   10910:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	10800017 	ldw	r2,0(r2)
   1091c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10920:	e13ffe17 	ldw	r4,-8(fp)
   10924:	00027ec0 	call	27ec <strlen>
   10928:	10800044 	addi	r2,r2,1
   1092c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10930:	00000d06 	br	10968 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10934:	e0bffc17 	ldw	r2,-16(fp)
   10938:	10800217 	ldw	r2,8(r2)
   1093c:	e0fffd17 	ldw	r3,-12(fp)
   10940:	180d883a 	mov	r6,r3
   10944:	e17ffe17 	ldw	r5,-8(fp)
   10948:	1009883a 	mov	r4,r2
   1094c:	0010cb00 	call	10cb0 <memcmp>
   10950:	1000021e 	bne	r2,zero,1095c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10954:	e0bffc17 	ldw	r2,-16(fp)
   10958:	00000706 	br	10978 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1095c:	e0bffc17 	ldw	r2,-16(fp)
   10960:	10800017 	ldw	r2,0(r2)
   10964:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10968:	e0fffc17 	ldw	r3,-16(fp)
   1096c:	e0bfff17 	ldw	r2,-4(fp)
   10970:	18bff01e 	bne	r3,r2,10934 <__alt_data_end+0xff010934>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10974:	0005883a 	mov	r2,zero
}
   10978:	e037883a 	mov	sp,fp
   1097c:	dfc00117 	ldw	ra,4(sp)
   10980:	df000017 	ldw	fp,0(sp)
   10984:	dec00204 	addi	sp,sp,8
   10988:	f800283a 	ret

0001098c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1098c:	defffb04 	addi	sp,sp,-20
   10990:	dfc00415 	stw	ra,16(sp)
   10994:	df000315 	stw	fp,12(sp)
   10998:	df000304 	addi	fp,sp,12
   1099c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   109a0:	d0a00617 	ldw	r2,-32744(gp)
   109a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   109a8:	00003106 	br	10a70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	10800217 	ldw	r2,8(r2)
   109b4:	1009883a 	mov	r4,r2
   109b8:	00027ec0 	call	27ec <strlen>
   109bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   109c0:	e0bffd17 	ldw	r2,-12(fp)
   109c4:	10c00217 	ldw	r3,8(r2)
   109c8:	e0bffe17 	ldw	r2,-8(fp)
   109cc:	10bfffc4 	addi	r2,r2,-1
   109d0:	1885883a 	add	r2,r3,r2
   109d4:	10800003 	ldbu	r2,0(r2)
   109d8:	10803fcc 	andi	r2,r2,255
   109dc:	1080201c 	xori	r2,r2,128
   109e0:	10bfe004 	addi	r2,r2,-128
   109e4:	10800bd8 	cmpnei	r2,r2,47
   109e8:	1000031e 	bne	r2,zero,109f8 <alt_find_file+0x6c>
    {
      len -= 1;
   109ec:	e0bffe17 	ldw	r2,-8(fp)
   109f0:	10bfffc4 	addi	r2,r2,-1
   109f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109f8:	e0bffe17 	ldw	r2,-8(fp)
   109fc:	e0ffff17 	ldw	r3,-4(fp)
   10a00:	1885883a 	add	r2,r3,r2
   10a04:	10800003 	ldbu	r2,0(r2)
   10a08:	10803fcc 	andi	r2,r2,255
   10a0c:	1080201c 	xori	r2,r2,128
   10a10:	10bfe004 	addi	r2,r2,-128
   10a14:	10800be0 	cmpeqi	r2,r2,47
   10a18:	1000081e 	bne	r2,zero,10a3c <alt_find_file+0xb0>
   10a1c:	e0bffe17 	ldw	r2,-8(fp)
   10a20:	e0ffff17 	ldw	r3,-4(fp)
   10a24:	1885883a 	add	r2,r3,r2
   10a28:	10800003 	ldbu	r2,0(r2)
   10a2c:	10803fcc 	andi	r2,r2,255
   10a30:	1080201c 	xori	r2,r2,128
   10a34:	10bfe004 	addi	r2,r2,-128
   10a38:	10000a1e 	bne	r2,zero,10a64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10a3c:	e0bffd17 	ldw	r2,-12(fp)
   10a40:	10800217 	ldw	r2,8(r2)
   10a44:	e0fffe17 	ldw	r3,-8(fp)
   10a48:	180d883a 	mov	r6,r3
   10a4c:	e17fff17 	ldw	r5,-4(fp)
   10a50:	1009883a 	mov	r4,r2
   10a54:	0010cb00 	call	10cb0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a58:	1000021e 	bne	r2,zero,10a64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10a5c:	e0bffd17 	ldw	r2,-12(fp)
   10a60:	00000706 	br	10a80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10a64:	e0bffd17 	ldw	r2,-12(fp)
   10a68:	10800017 	ldw	r2,0(r2)
   10a6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a70:	e0fffd17 	ldw	r3,-12(fp)
   10a74:	d0a00604 	addi	r2,gp,-32744
   10a78:	18bfcc1e 	bne	r3,r2,109ac <__alt_data_end+0xff0109ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a7c:	0005883a 	mov	r2,zero
}
   10a80:	e037883a 	mov	sp,fp
   10a84:	dfc00117 	ldw	ra,4(sp)
   10a88:	df000017 	ldw	fp,0(sp)
   10a8c:	dec00204 	addi	sp,sp,8
   10a90:	f800283a 	ret

00010a94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a94:	defffc04 	addi	sp,sp,-16
   10a98:	df000315 	stw	fp,12(sp)
   10a9c:	df000304 	addi	fp,sp,12
   10aa0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10aa4:	00bffa04 	movi	r2,-24
   10aa8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10aac:	e03ffd15 	stw	zero,-12(fp)
   10ab0:	00001906 	br	10b18 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10ab4:	00800074 	movhi	r2,1
   10ab8:	10885e04 	addi	r2,r2,8568
   10abc:	e0fffd17 	ldw	r3,-12(fp)
   10ac0:	18c00324 	muli	r3,r3,12
   10ac4:	10c5883a 	add	r2,r2,r3
   10ac8:	10800017 	ldw	r2,0(r2)
   10acc:	10000f1e 	bne	r2,zero,10b0c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10ad0:	00800074 	movhi	r2,1
   10ad4:	10885e04 	addi	r2,r2,8568
   10ad8:	e0fffd17 	ldw	r3,-12(fp)
   10adc:	18c00324 	muli	r3,r3,12
   10ae0:	10c5883a 	add	r2,r2,r3
   10ae4:	e0ffff17 	ldw	r3,-4(fp)
   10ae8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10aec:	d0e00a17 	ldw	r3,-32728(gp)
   10af0:	e0bffd17 	ldw	r2,-12(fp)
   10af4:	1880020e 	bge	r3,r2,10b00 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10af8:	e0bffd17 	ldw	r2,-12(fp)
   10afc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10b00:	e0bffd17 	ldw	r2,-12(fp)
   10b04:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10b08:	00000606 	br	10b24 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10b0c:	e0bffd17 	ldw	r2,-12(fp)
   10b10:	10800044 	addi	r2,r2,1
   10b14:	e0bffd15 	stw	r2,-12(fp)
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	10800810 	cmplti	r2,r2,32
   10b20:	103fe41e 	bne	r2,zero,10ab4 <__alt_data_end+0xff010ab4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10b24:	e0bffe17 	ldw	r2,-8(fp)
}
   10b28:	e037883a 	mov	sp,fp
   10b2c:	df000017 	ldw	fp,0(sp)
   10b30:	dec00104 	addi	sp,sp,4
   10b34:	f800283a 	ret

00010b38 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10b38:	defffb04 	addi	sp,sp,-20
   10b3c:	df000415 	stw	fp,16(sp)
   10b40:	df000404 	addi	fp,sp,16
   10b44:	e13ffe15 	stw	r4,-8(fp)
   10b48:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	10840070 	cmpltui	r2,r2,4097
   10b54:	1000021e 	bne	r2,zero,10b60 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10b58:	00840004 	movi	r2,4096
   10b5c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10b60:	e0fffe17 	ldw	r3,-8(fp)
   10b64:	e0bfff17 	ldw	r2,-4(fp)
   10b68:	1885883a 	add	r2,r3,r2
   10b6c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b70:	e0bffe17 	ldw	r2,-8(fp)
   10b74:	e0bffc15 	stw	r2,-16(fp)
   10b78:	00000506 	br	10b90 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b84:	e0bffc17 	ldw	r2,-16(fp)
   10b88:	10800804 	addi	r2,r2,32
   10b8c:	e0bffc15 	stw	r2,-16(fp)
   10b90:	e0fffc17 	ldw	r3,-16(fp)
   10b94:	e0bffd17 	ldw	r2,-12(fp)
   10b98:	18bff836 	bltu	r3,r2,10b7c <__alt_data_end+0xff010b7c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	108007cc 	andi	r2,r2,31
   10ba4:	10000226 	beq	r2,zero,10bb0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10ba8:	e0bffc17 	ldw	r2,-16(fp)
   10bac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10bb0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10bb4:	0001883a 	nop
   10bb8:	e037883a 	mov	sp,fp
   10bbc:	df000017 	ldw	fp,0(sp)
   10bc0:	dec00104 	addi	sp,sp,4
   10bc4:	f800283a 	ret

00010bc8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10bc8:	defffe04 	addi	sp,sp,-8
   10bcc:	df000115 	stw	fp,4(sp)
   10bd0:	df000104 	addi	fp,sp,4
   10bd4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10bd8:	e0bfff17 	ldw	r2,-4(fp)
   10bdc:	10bffe84 	addi	r2,r2,-6
   10be0:	10c00428 	cmpgeui	r3,r2,16
   10be4:	18001a1e 	bne	r3,zero,10c50 <alt_exception_cause_generated_bad_addr+0x88>
   10be8:	100690ba 	slli	r3,r2,2
   10bec:	00800074 	movhi	r2,1
   10bf0:	10830004 	addi	r2,r2,3072
   10bf4:	1885883a 	add	r2,r3,r2
   10bf8:	10800017 	ldw	r2,0(r2)
   10bfc:	1000683a 	jmp	r2
   10c00:	00010c40 	call	10c4 <main+0x108>
   10c04:	00010c40 	call	10c4 <main+0x108>
   10c08:	00010c50 	cmplti	zero,zero,1073
   10c0c:	00010c50 	cmplti	zero,zero,1073
   10c10:	00010c50 	cmplti	zero,zero,1073
   10c14:	00010c40 	call	10c4 <main+0x108>
   10c18:	00010c48 	cmpgei	zero,zero,1073
   10c1c:	00010c50 	cmplti	zero,zero,1073
   10c20:	00010c40 	call	10c4 <main+0x108>
   10c24:	00010c40 	call	10c4 <main+0x108>
   10c28:	00010c50 	cmplti	zero,zero,1073
   10c2c:	00010c40 	call	10c4 <main+0x108>
   10c30:	00010c48 	cmpgei	zero,zero,1073
   10c34:	00010c50 	cmplti	zero,zero,1073
   10c38:	00010c50 	cmplti	zero,zero,1073
   10c3c:	00010c40 	call	10c4 <main+0x108>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10c40:	00800044 	movi	r2,1
   10c44:	00000306 	br	10c54 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10c48:	0005883a 	mov	r2,zero
   10c4c:	00000106 	br	10c54 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10c50:	0005883a 	mov	r2,zero
  }
}
   10c54:	e037883a 	mov	sp,fp
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00104 	addi	sp,sp,4
   10c60:	f800283a 	ret

00010c64 <atexit>:
   10c64:	200b883a 	mov	r5,r4
   10c68:	000f883a 	mov	r7,zero
   10c6c:	000d883a 	mov	r6,zero
   10c70:	0009883a 	mov	r4,zero
   10c74:	0010d2c1 	jmpi	10d2c <__register_exitproc>

00010c78 <exit>:
   10c78:	defffe04 	addi	sp,sp,-8
   10c7c:	000b883a 	mov	r5,zero
   10c80:	dc000015 	stw	r16,0(sp)
   10c84:	dfc00115 	stw	ra,4(sp)
   10c88:	2021883a 	mov	r16,r4
   10c8c:	0010e440 	call	10e44 <__call_exitprocs>
   10c90:	00800074 	movhi	r2,1
   10c94:	108cd804 	addi	r2,r2,13152
   10c98:	11000017 	ldw	r4,0(r2)
   10c9c:	20800f17 	ldw	r2,60(r4)
   10ca0:	10000126 	beq	r2,zero,10ca8 <exit+0x30>
   10ca4:	103ee83a 	callr	r2
   10ca8:	8009883a 	mov	r4,r16
   10cac:	0010fc40 	call	10fc4 <_exit>

00010cb0 <memcmp>:
   10cb0:	01c000c4 	movi	r7,3
   10cb4:	3980192e 	bgeu	r7,r6,10d1c <memcmp+0x6c>
   10cb8:	2144b03a 	or	r2,r4,r5
   10cbc:	11c4703a 	and	r2,r2,r7
   10cc0:	10000f26 	beq	r2,zero,10d00 <memcmp+0x50>
   10cc4:	20800003 	ldbu	r2,0(r4)
   10cc8:	28c00003 	ldbu	r3,0(r5)
   10ccc:	10c0151e 	bne	r2,r3,10d24 <memcmp+0x74>
   10cd0:	31bfff84 	addi	r6,r6,-2
   10cd4:	01ffffc4 	movi	r7,-1
   10cd8:	00000406 	br	10cec <memcmp+0x3c>
   10cdc:	20800003 	ldbu	r2,0(r4)
   10ce0:	28c00003 	ldbu	r3,0(r5)
   10ce4:	31bfffc4 	addi	r6,r6,-1
   10ce8:	10c00e1e 	bne	r2,r3,10d24 <memcmp+0x74>
   10cec:	21000044 	addi	r4,r4,1
   10cf0:	29400044 	addi	r5,r5,1
   10cf4:	31fff91e 	bne	r6,r7,10cdc <__alt_data_end+0xff010cdc>
   10cf8:	0005883a 	mov	r2,zero
   10cfc:	f800283a 	ret
   10d00:	20c00017 	ldw	r3,0(r4)
   10d04:	28800017 	ldw	r2,0(r5)
   10d08:	18bfee1e 	bne	r3,r2,10cc4 <__alt_data_end+0xff010cc4>
   10d0c:	31bfff04 	addi	r6,r6,-4
   10d10:	21000104 	addi	r4,r4,4
   10d14:	29400104 	addi	r5,r5,4
   10d18:	39bff936 	bltu	r7,r6,10d00 <__alt_data_end+0xff010d00>
   10d1c:	303fe91e 	bne	r6,zero,10cc4 <__alt_data_end+0xff010cc4>
   10d20:	003ff506 	br	10cf8 <__alt_data_end+0xff010cf8>
   10d24:	10c5c83a 	sub	r2,r2,r3
   10d28:	f800283a 	ret

00010d2c <__register_exitproc>:
   10d2c:	defffa04 	addi	sp,sp,-24
   10d30:	dc000315 	stw	r16,12(sp)
   10d34:	04000074 	movhi	r16,1
   10d38:	840cd804 	addi	r16,r16,13152
   10d3c:	80c00017 	ldw	r3,0(r16)
   10d40:	dc400415 	stw	r17,16(sp)
   10d44:	dfc00515 	stw	ra,20(sp)
   10d48:	18805217 	ldw	r2,328(r3)
   10d4c:	2023883a 	mov	r17,r4
   10d50:	10003726 	beq	r2,zero,10e30 <__register_exitproc+0x104>
   10d54:	10c00117 	ldw	r3,4(r2)
   10d58:	010007c4 	movi	r4,31
   10d5c:	20c00e16 	blt	r4,r3,10d98 <__register_exitproc+0x6c>
   10d60:	1a000044 	addi	r8,r3,1
   10d64:	8800221e 	bne	r17,zero,10df0 <__register_exitproc+0xc4>
   10d68:	18c00084 	addi	r3,r3,2
   10d6c:	18c7883a 	add	r3,r3,r3
   10d70:	18c7883a 	add	r3,r3,r3
   10d74:	12000115 	stw	r8,4(r2)
   10d78:	10c7883a 	add	r3,r2,r3
   10d7c:	19400015 	stw	r5,0(r3)
   10d80:	0005883a 	mov	r2,zero
   10d84:	dfc00517 	ldw	ra,20(sp)
   10d88:	dc400417 	ldw	r17,16(sp)
   10d8c:	dc000317 	ldw	r16,12(sp)
   10d90:	dec00604 	addi	sp,sp,24
   10d94:	f800283a 	ret
   10d98:	00800034 	movhi	r2,0
   10d9c:	10878904 	addi	r2,r2,7716
   10da0:	10002626 	beq	r2,zero,10e3c <__register_exitproc+0x110>
   10da4:	01006404 	movi	r4,400
   10da8:	d9400015 	stw	r5,0(sp)
   10dac:	d9800115 	stw	r6,4(sp)
   10db0:	d9c00215 	stw	r7,8(sp)
   10db4:	0001e240 	call	1e24 <malloc>
   10db8:	d9400017 	ldw	r5,0(sp)
   10dbc:	d9800117 	ldw	r6,4(sp)
   10dc0:	d9c00217 	ldw	r7,8(sp)
   10dc4:	10001d26 	beq	r2,zero,10e3c <__register_exitproc+0x110>
   10dc8:	81000017 	ldw	r4,0(r16)
   10dcc:	10000115 	stw	zero,4(r2)
   10dd0:	02000044 	movi	r8,1
   10dd4:	22405217 	ldw	r9,328(r4)
   10dd8:	0007883a 	mov	r3,zero
   10ddc:	12400015 	stw	r9,0(r2)
   10de0:	20805215 	stw	r2,328(r4)
   10de4:	10006215 	stw	zero,392(r2)
   10de8:	10006315 	stw	zero,396(r2)
   10dec:	883fde26 	beq	r17,zero,10d68 <__alt_data_end+0xff010d68>
   10df0:	18c9883a 	add	r4,r3,r3
   10df4:	2109883a 	add	r4,r4,r4
   10df8:	1109883a 	add	r4,r2,r4
   10dfc:	21802215 	stw	r6,136(r4)
   10e00:	01800044 	movi	r6,1
   10e04:	12406217 	ldw	r9,392(r2)
   10e08:	30cc983a 	sll	r6,r6,r3
   10e0c:	4992b03a 	or	r9,r9,r6
   10e10:	12406215 	stw	r9,392(r2)
   10e14:	21c04215 	stw	r7,264(r4)
   10e18:	01000084 	movi	r4,2
   10e1c:	893fd21e 	bne	r17,r4,10d68 <__alt_data_end+0xff010d68>
   10e20:	11006317 	ldw	r4,396(r2)
   10e24:	218cb03a 	or	r6,r4,r6
   10e28:	11806315 	stw	r6,396(r2)
   10e2c:	003fce06 	br	10d68 <__alt_data_end+0xff010d68>
   10e30:	18805304 	addi	r2,r3,332
   10e34:	18805215 	stw	r2,328(r3)
   10e38:	003fc606 	br	10d54 <__alt_data_end+0xff010d54>
   10e3c:	00bfffc4 	movi	r2,-1
   10e40:	003fd006 	br	10d84 <__alt_data_end+0xff010d84>

00010e44 <__call_exitprocs>:
   10e44:	defff504 	addi	sp,sp,-44
   10e48:	df000915 	stw	fp,36(sp)
   10e4c:	dd400615 	stw	r21,24(sp)
   10e50:	dc800315 	stw	r18,12(sp)
   10e54:	dfc00a15 	stw	ra,40(sp)
   10e58:	ddc00815 	stw	r23,32(sp)
   10e5c:	dd800715 	stw	r22,28(sp)
   10e60:	dd000515 	stw	r20,20(sp)
   10e64:	dcc00415 	stw	r19,16(sp)
   10e68:	dc400215 	stw	r17,8(sp)
   10e6c:	dc000115 	stw	r16,4(sp)
   10e70:	d9000015 	stw	r4,0(sp)
   10e74:	2839883a 	mov	fp,r5
   10e78:	04800044 	movi	r18,1
   10e7c:	057fffc4 	movi	r21,-1
   10e80:	00800074 	movhi	r2,1
   10e84:	108cd804 	addi	r2,r2,13152
   10e88:	12000017 	ldw	r8,0(r2)
   10e8c:	45005217 	ldw	r20,328(r8)
   10e90:	44c05204 	addi	r19,r8,328
   10e94:	a0001c26 	beq	r20,zero,10f08 <__call_exitprocs+0xc4>
   10e98:	a0800117 	ldw	r2,4(r20)
   10e9c:	15ffffc4 	addi	r23,r2,-1
   10ea0:	b8000d16 	blt	r23,zero,10ed8 <__call_exitprocs+0x94>
   10ea4:	14000044 	addi	r16,r2,1
   10ea8:	8421883a 	add	r16,r16,r16
   10eac:	8421883a 	add	r16,r16,r16
   10eb0:	84402004 	addi	r17,r16,128
   10eb4:	a463883a 	add	r17,r20,r17
   10eb8:	a421883a 	add	r16,r20,r16
   10ebc:	e0001e26 	beq	fp,zero,10f38 <__call_exitprocs+0xf4>
   10ec0:	80804017 	ldw	r2,256(r16)
   10ec4:	e0801c26 	beq	fp,r2,10f38 <__call_exitprocs+0xf4>
   10ec8:	bdffffc4 	addi	r23,r23,-1
   10ecc:	843fff04 	addi	r16,r16,-4
   10ed0:	8c7fff04 	addi	r17,r17,-4
   10ed4:	bd7ff91e 	bne	r23,r21,10ebc <__alt_data_end+0xff010ebc>
   10ed8:	00800034 	movhi	r2,0
   10edc:	10878e04 	addi	r2,r2,7736
   10ee0:	10000926 	beq	r2,zero,10f08 <__call_exitprocs+0xc4>
   10ee4:	a0800117 	ldw	r2,4(r20)
   10ee8:	1000301e 	bne	r2,zero,10fac <__call_exitprocs+0x168>
   10eec:	a0800017 	ldw	r2,0(r20)
   10ef0:	10003226 	beq	r2,zero,10fbc <__call_exitprocs+0x178>
   10ef4:	a009883a 	mov	r4,r20
   10ef8:	98800015 	stw	r2,0(r19)
   10efc:	0001e380 	call	1e38 <free>
   10f00:	9d000017 	ldw	r20,0(r19)
   10f04:	a03fe41e 	bne	r20,zero,10e98 <__alt_data_end+0xff010e98>
   10f08:	dfc00a17 	ldw	ra,40(sp)
   10f0c:	df000917 	ldw	fp,36(sp)
   10f10:	ddc00817 	ldw	r23,32(sp)
   10f14:	dd800717 	ldw	r22,28(sp)
   10f18:	dd400617 	ldw	r21,24(sp)
   10f1c:	dd000517 	ldw	r20,20(sp)
   10f20:	dcc00417 	ldw	r19,16(sp)
   10f24:	dc800317 	ldw	r18,12(sp)
   10f28:	dc400217 	ldw	r17,8(sp)
   10f2c:	dc000117 	ldw	r16,4(sp)
   10f30:	dec00b04 	addi	sp,sp,44
   10f34:	f800283a 	ret
   10f38:	a0800117 	ldw	r2,4(r20)
   10f3c:	80c00017 	ldw	r3,0(r16)
   10f40:	10bfffc4 	addi	r2,r2,-1
   10f44:	15c01426 	beq	r2,r23,10f98 <__call_exitprocs+0x154>
   10f48:	80000015 	stw	zero,0(r16)
   10f4c:	183fde26 	beq	r3,zero,10ec8 <__alt_data_end+0xff010ec8>
   10f50:	95c8983a 	sll	r4,r18,r23
   10f54:	a0806217 	ldw	r2,392(r20)
   10f58:	a5800117 	ldw	r22,4(r20)
   10f5c:	2084703a 	and	r2,r4,r2
   10f60:	10000b26 	beq	r2,zero,10f90 <__call_exitprocs+0x14c>
   10f64:	a0806317 	ldw	r2,396(r20)
   10f68:	2088703a 	and	r4,r4,r2
   10f6c:	20000c1e 	bne	r4,zero,10fa0 <__call_exitprocs+0x15c>
   10f70:	89400017 	ldw	r5,0(r17)
   10f74:	d9000017 	ldw	r4,0(sp)
   10f78:	183ee83a 	callr	r3
   10f7c:	a0800117 	ldw	r2,4(r20)
   10f80:	15bfbf1e 	bne	r2,r22,10e80 <__alt_data_end+0xff010e80>
   10f84:	98800017 	ldw	r2,0(r19)
   10f88:	153fcf26 	beq	r2,r20,10ec8 <__alt_data_end+0xff010ec8>
   10f8c:	003fbc06 	br	10e80 <__alt_data_end+0xff010e80>
   10f90:	183ee83a 	callr	r3
   10f94:	003ff906 	br	10f7c <__alt_data_end+0xff010f7c>
   10f98:	a5c00115 	stw	r23,4(r20)
   10f9c:	003feb06 	br	10f4c <__alt_data_end+0xff010f4c>
   10fa0:	89000017 	ldw	r4,0(r17)
   10fa4:	183ee83a 	callr	r3
   10fa8:	003ff406 	br	10f7c <__alt_data_end+0xff010f7c>
   10fac:	a0800017 	ldw	r2,0(r20)
   10fb0:	a027883a 	mov	r19,r20
   10fb4:	1029883a 	mov	r20,r2
   10fb8:	003fb606 	br	10e94 <__alt_data_end+0xff010e94>
   10fbc:	0005883a 	mov	r2,zero
   10fc0:	003ffb06 	br	10fb0 <__alt_data_end+0xff010fb0>

00010fc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10fc4:	defffd04 	addi	sp,sp,-12
   10fc8:	df000215 	stw	fp,8(sp)
   10fcc:	df000204 	addi	fp,sp,8
   10fd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10fd4:	0001883a 	nop
   10fd8:	e0bfff17 	ldw	r2,-4(fp)
   10fdc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10fe0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10fe4:	10000226 	beq	r2,zero,10ff0 <_exit+0x2c>
    ALT_SIM_FAIL();
   10fe8:	002af070 	cmpltui	zero,zero,43969
   10fec:	00000106 	br	10ff4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10ff0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10ff4:	003fff06 	br	10ff4 <__alt_data_end+0xff010ff4>
