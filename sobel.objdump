
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011c4c memsz 0x00011c4c flags r-x
    LOAD off    0x00012c6c vaddr 0x00011c6c paddr 0x00013858 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00015444 vaddr 0x00015444 paddr 0x00015444 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011280  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a8  000114c4  000114c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00011c6c  00013858  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00015444  00015444  00015444  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000155f4  000155f4  00014858  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014858  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d0  00000000  00000000  00014880  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027f71  00000000  00000000  00015950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a106  00000000  00000000  0003d8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c9c0  00000000  00000000  000479c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025d4  00000000  00000000  00054388  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e80  00000000  00000000  0005695c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018cdf  00000000  00000000  0005a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000734bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019a0  00000000  00000000  00073520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000789e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000789e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000789f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000789f6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000789f7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000789fb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000789ff  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00078a03  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00078a0c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00078a15  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00078a1e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00078a29  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00078a61  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007a5fe  00000000  00000000  0007e539  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000114c4 l    d  .rodata	00000000 .rodata
00011c6c l    d  .rwdata	00000000 .rwdata
00015444 l    d  .bss	00000000 .bss
000155f4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011aba l     O .rodata	00000010 zeroes.4404
00005690 l     F .text	000000bc __sbprintf
00011aca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000058a0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000073d0 l     F .text	00000008 __fp_unlock
000073e4 l     F .text	0000019c __sinit.part.1
00007580 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012174 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000125b8 l     O .rwdata	00000020 lc_ctype_charset
00012598 l     O .rwdata	00000020 lc_message_charset
000125d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011afc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a11c l     F .text	000000fc __sprint_r.part.0
00011c30 l     O .rodata	00000010 blanks.4348
00011c20 l     O .rodata	00000010 zeroes.4349
0000b6a8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e7bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e8c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e8f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e9e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000eac0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ebac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ed80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013848 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f1a8 l     F .text	00000034 alt_dev_reg
000127b8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f4b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f6c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fcf8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010248 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000106bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000107fc l     F .text	0000003c alt_get_errno
00010838 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000154c8 g     O .bss	00000004 alt_instruction_exception_handler
000097b4 g     F .text	00000074 _mprec_log10
000098a0 g     F .text	0000008c __any_on
0000bc44 g     F .text	00000054 _isatty_r
00011b08 g     O .rodata	00000028 __mprec_tinytens
0000ecbc g     F .text	0000007c alt_main
000032bc g     F .text	000000c0 _puts_r
000154f4 g     O .bss	00000100 alt_irq
0000bc98 g     F .text	00000060 _lseek_r
00013858 g       *ABS*	00000000 __flash_rwdata_start
0000d3f4 g     F .text	00000088 .hidden __eqdf2
000155f4 g       *ABS*	00000000 __alt_heap_start
00003280 g     F .text	0000003c printf
0000beb0 g     F .text	0000009c _wcrtomb_r
00009fdc g     F .text	0000005c __sseek
00007720 g     F .text	00000010 __sinit
0000bd58 g     F .text	00000140 __swbuf_r
000081e8 g     F .text	0000007c _setlocale_r
00007588 g     F .text	00000068 __sfmoreglue
0000ed5c g     F .text	00000024 __malloc_unlock
00001060 g     F .text	00000014 LCD_Write_Command
00015480 g     O .bss	00000004 sobel_width
0001546c g     O .bss	00000004 start_all
000154b8 g     O .bss	00000004 altera_avalon_timer_ts_freq
000086ac g     F .text	0000015c memmove
00001074 g     F .text	00000014 LCD_Write_Data
00007708 g     F .text	00000018 _cleanup
00015478 g     O .bss	00000004 end_sobel
00008930 g     F .text	000000a8 _Balloc
0000d47c g     F .text	000000dc .hidden __gtdf2
00010bf4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000088c g     F .text	00000024 cam_get_xsize
0000bbe8 g     F .text	0000005c _fstat_r
00015498 g     O .bss	00000004 errno
00009f58 g     F .text	00000008 __seofread
000154ac g     O .bss	00000004 alt_argv
0001b818 g       *ABS*	00000000 _gp
0000f044 g     F .text	00000030 usleep
0000efcc g     F .text	00000078 alt_uncached_malloc
0000094c g     F .text	00000074 cam_set_image_pointer
00012638 g     O .rwdata	00000180 alt_fd_list
00001e54 g     F .text	00000010 vga_set_pointer
00010c18 g     F .text	00000090 alt_find_dev
00008564 g     F .text	00000148 memcpy
000073d8 g     F .text	0000000c _cleanup_r
0000e6e0 g     F .text	000000dc .hidden __floatsidf
00010780 g     F .text	0000007c alt_io_redirect
00015468 g     O .bss	00000004 end_all
0000d558 g     F .text	000000f4 .hidden __ltdf2
000114c4 g       *ABS*	00000000 __DTOR_END__
0000337c g     F .text	00000014 puts
00010ee4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009e90 g     F .text	00000074 __fpclassifyd
00009710 g     F .text	000000a4 __ratio
0000b68c g     F .text	0000001c __vfiprintf_internal
0000f8b8 g     F .text	0000021c altera_avalon_jtag_uart_read
00002a1c g     F .text	00000014 malloc
00003250 g     F .text	00000030 _printf_r
00000ce4 g     F .text	00000008 get_grayscale_picture
00001f6c g     F .text	00000064 .hidden __udivsi3
00011524 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	000005fc init_camera
0000ea1c g     F .text	000000a4 isatty
00011b58 g     O .rodata	000000c8 __mprec_tens
00008264 g     F .text	0000000c __locale_charset
00010e54 g     F .text	00000090 alt_icache_flush
00015494 g     O .bss	00000004 __malloc_top_pad
00015454 g     O .bss	00000004 grayscale_array_int
00013828 g     O .rwdata	00000004 __mb_cur_max
00008294 g     F .text	0000000c _localeconv_r
00008d3c g     F .text	0000003c __i2b
00007ba4 g     F .text	000004bc __sfvwrite_r
00001088 g     F .text	00000408 init_LCD
00003390 g     F .text	00000054 _sbrk_r
000008d4 g     F .text	00000078 cam_get_profiling
0000bcf8 g     F .text	00000060 _read_r
00010188 g     F .text	00000078 alt_dcache_flush
00015484 g     O .bss	00000004 sobel_result
00013840 g     O .rwdata	00000004 alt_max_fd
0000b8dc g     F .text	000000f0 _fclose_r
000073a0 g     F .text	00000030 fflush
00015490 g     O .bss	00000004 __malloc_max_sbrked_mem
00015444 g     O .bss	00000004 size_int
00015458 g     O .bss	00000004 grayscale_array
0000cb48 g     F .text	000008ac .hidden __adddf3
000008b0 g     F .text	00000024 cam_get_ysize
000094b8 g     F .text	0000010c __b2d
0000c610 g     F .text	00000538 .hidden __umoddi3
0000ebe8 g     F .text	000000d4 lseek
00000f7c g     F .text	0000008c i2c_short_read
00013820 g     O .rwdata	00000004 _global_impure_ptr
0000992c g     F .text	00000564 _realloc_r
000155f4 g       *ABS*	00000000 __bss_end
000105cc g     F .text	000000f0 alt_iic_isr_register
00010aec g     F .text	00000108 alt_tick
0000c098 g     F .text	00000578 .hidden __udivdi3
0000bb44 g     F .text	00000024 _fputwc_r
00011b30 g     O .rodata	00000028 __mprec_bigtens
00008b20 g     F .text	00000104 __s2b
00002910 g     F .text	000000a8 .hidden __floatunsidf
000091f8 g     F .text	00000060 __mcmp
00007740 g     F .text	00000018 __fp_lock_all
00010580 g     F .text	0000004c alt_ic_irq_enabled
00015448 g     O .bss	00000004 grayscape_height
00010a50 g     F .text	0000009c alt_alarm_stop
000154bc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012610 g     O .rwdata	00000028 alt_dev_null
000016a0 g     F .text	00000078 transfer_LCD_with_dma
00001c0c g     F .text	00000248 sobel_complete
00010200 g     F .text	00000048 alt_dcache_flush_all
00008c24 g     F .text	00000068 __hi0bits
0000e660 g     F .text	00000080 .hidden __fixdfsi
00013858 g       *ABS*	00000000 __ram_rwdata_end
00013838 g     O .rwdata	00000008 alt_dev_list
0000f0b0 g     F .text	000000f8 write
0000fee4 g     F .text	00000020 alt_timestamp_freq
00011c6c g       *ABS*	00000000 __ram_rodata_end
0000e930 g     F .text	000000b0 fstat
0000d558 g     F .text	000000f4 .hidden __ledf2
00008f70 g     F .text	00000140 __pow5mult
0000a230 g     F .text	0000145c ___vfiprintf_internal_r
000154a4 g     O .bss	00000004 __nlocale_changed
00001fd0 g     F .text	00000058 .hidden __umodsi3
00000c54 g     F .text	00000080 conv_grayscale_init
000155f4 g       *ABS*	00000000 end
00001a78 g     F .text	00000008 GetSobelResult
000009e4 g     F .text	00000020 take_picture_blocking
00000a44 g     F .text	00000014 DIPSW_get_value
0000f3f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000009d4 g     F .text	00000010 current_image_pointer
000114c4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fd70 g     F .text	0000007c alt_avalon_timer_sc_init
000029b8 g     F .text	00000064 .hidden __clzsi2
0000fad4 g     F .text	00000224 altera_avalon_jtag_uart_write
00007730 g     F .text	00000004 __sfp_lock_acquire
00008480 g     F .text	000000e4 memchr
0000347c g     F .text	000021f8 ___vfprintf_internal_r
00007894 g     F .text	00000310 _free_r
00008270 g     F .text	00000010 __locale_mb_cur_max
0001164c g     O .rodata	00000140 noise_reduction_reg_settings_array
00011310 g     F .text	00000180 __call_exitprocs
000154a0 g     O .bss	00000004 __mlocale_changed
00013818 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015470 g     O .bss	00000004 end_conv_grayscale
000154c0 g     O .bss	00000004 _alt_tick_rate
000090b0 g     F .text	00000148 __lshift
000154c4 g     O .bss	00000004 _alt_nticks
0000edbc g     F .text	000000fc read
0000f214 g     F .text	0000007c alt_sys_init
000111f8 g     F .text	00000118 __register_exitproc
00008d78 g     F .text	000001f8 __multiply
0000f760 g     F .text	00000068 altera_avalon_jtag_uart_close
00011c6c g       *ABS*	00000000 __ram_rwdata_start
000114c4 g       *ABS*	00000000 __ram_rodata_start
000154cc g     O .bss	00000028 __malloc_current_mallinfo
000095c4 g     F .text	0000014c __d2b
00015488 g     O .bss	00000004 sobel_height
00015450 g     O .bss	00000004 grayscale_width_int
00000a04 g     F .text	00000014 enable_continues_mode
0000f290 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001a80 g     F .text	0000018c init_sobel_arrays
00010db0 g     F .text	000000a4 alt_get_fd
00010030 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b7c4 g     F .text	00000054 _close_r
0001117c g     F .text	0000007c memcmp
0000f350 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000155f4 g       *ABS*	00000000 __alt_stack_base
0000f3a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000574c g     F .text	00000154 __swsetup_r
00002028 g     F .text	000008e8 .hidden __divdf3
000075f0 g     F .text	00000118 __sfp
00009828 g     F .text	00000078 __copybits
00011d6c g     O .rwdata	00000408 __malloc_av_
0000773c g     F .text	00000004 __sinit_lock_release
0000d64c g     F .text	00000718 .hidden __muldf3
00009f04 g     F .text	00000054 __sread
00010ca8 g     F .text	00000108 alt_find_file
00010284 g     F .text	000000a4 alt_dev_llist_insert
0000ed38 g     F .text	00000024 __malloc_lock
0000ef1c g     F .text	000000b0 sbrk
00007344 g     F .text	0000005c _fflush_r
0000b818 g     F .text	000000c4 _calloc_r
00015464 g     O .bss	00000004 start_global
00011c6c g     O .rwdata	00000100 .hidden __divsi3_table
00015444 g       *ABS*	00000000 __bss_start
00008808 g     F .text	00000128 memset
00001718 g     F .text	00000360 main
000154b0 g     O .bss	00000004 alt_envp
0001548c g     O .bss	00000004 __malloc_max_total_mem
00000cd4 g     F .text	00000008 get_grayscale_width
0000f2f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000be98 g     F .text	00000018 __swbuf
0000a038 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b9cc g     F .text	00000014 fclose
0000fdec g     F .text	00000078 alt_timestamp_start
00005aa0 g     F .text	00001688 _dtoa_r
00002a44 g     F .text	0000080c _malloc_r
0000c00c g     F .text	00000030 __ascii_wctomb
00013844 g     O .rwdata	00000004 alt_errno
00008060 g     F .text	000000c4 _fwalk
0001547c g     O .bss	00000004 start_sobel
00001e74 g     F .text	00000084 .hidden __divsi3
00007770 g     F .text	00000124 _malloc_trim_r
000114c4 g       *ABS*	00000000 __CTOR_END__
0001544c g     O .bss	00000004 grayscale_width
0000a040 g     F .text	000000dc strcmp
00001490 g     F .text	00000210 transfer_LCD_no_dma
000114c4 g       *ABS*	00000000 __flash_rodata_start
000114c4 g       *ABS*	00000000 __DTOR_LIST__
0000d3f4 g     F .text	00000088 .hidden __nedf2
0001178c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f1dc g     F .text	00000038 alt_irq_init
0000eeb8 g     F .text	00000064 alt_release_fd
00000d04 g     F .text	00000278 i2c_auto_detect
00010fcc g     F .text	00000018 memalign
00011978 g     O .rodata	00000100 .hidden __clz_tab
000009c0 g     F .text	00000014 current_image_valid
0001549c g     O .bss	00000004 _PathLocale
00000cec g     F .text	00000018 i2c_busy_wait
00010f80 g     F .text	00000014 atexit
0000b764 g     F .text	00000060 _write_r
000082a0 g     F .text	00000018 setlocale
00013824 g     O .rwdata	00000004 _impure_ptr
000154a8 g     O .bss	00000004 alt_argc
00007128 g     F .text	0000021c __sflush_r
000154b4 g     O .bss	00000004 altera_avalon_timer_ts_base
00010388 g     F .text	00000060 _do_dtors
0000828c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009454 g     F .text	00000064 __ulp
00007758 g     F .text	00000018 __fp_unlock_all
00013830 g     O .rwdata	00000008 alt_fs_list
00001008 g     F .text	00000058 i2c_short_write
00015474 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001545c g     O .bss	00000002 LCD_height
000082b8 g     F .text	0000000c localeconv
0000fe64 g     F .text	00000080 alt_timestamp
00001e64 g     F .text	00000010 vga_set_swap
0001041c g     F .text	00000050 alt_ic_isr_register
00013858 g       *ABS*	00000000 _edata
000155f4 g       *ABS*	00000000 _end
0000b9e0 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f7c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000104f4 g     F .text	0000008c alt_ic_irq_disable
00009f60 g     F .text	0000007c __swrite
0001381c g     O .rwdata	00000004 __malloc_trim_threshold
0001545e g     O .bss	00000002 LCD_width
00000a58 g     F .text	000001fc conv_grayscale
00008280 g     F .text	0000000c __locale_msgcharset
00010f94 g     F .text	00000038 exit
00008124 g     F .text	000000c4 _fwalk_reent
00009258 g     F .text	000001fc __mdiff
00001ef8 g     F .text	00000074 .hidden __modsi3
00010fe4 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007734 g     F .text	00000004 __sfp_lock_release
00000cdc g     F .text	00000008 get_grayscale_height
00011490 g     F .text	00000034 _exit
0000ff04 g     F .text	0000012c alt_alarm_start
000082c4 g     F .text	000001bc __smakebuf_r
000033e4 g     F .text	00000098 strlen
000108fc g     F .text	00000154 open
0000d47c g     F .text	000000dc .hidden __gedf2
0001382c g     O .rwdata	00000004 __wctomb
0000a218 g     F .text	00000018 __sprint_r
000103e8 g     F .text	00000034 alt_icache_flush_all
0001384c g     O .rwdata	00000004 alt_priority_mask
0001046c g     F .text	00000088 alt_ic_irq_enable
00005674 g     F .text	0000001c __vfprintf_internal
0000c03c g     F .text	0000005c _wctomb_r
0000dd64 g     F .text	000008fc .hidden __subdf3
00008c8c g     F .text	000000b0 __lo0bits
00013850 g     O .rwdata	00000008 alt_alarm_list
00010328 g     F .text	00000060 _do_ctors
0000bf4c g     F .text	000000c0 wcrtomb
0000e7f8 g     F .text	000000d0 close
00015460 g     O .bss	00000004 end_global
0000eb28 g     F .text	00000084 alt_load
0000bb68 g     F .text	00000080 fputwc
00002a30 g     F .text	00000014 free
00007738 g     F .text	00000004 __sinit_lock_acquire
00008a00 g     F .text	00000120 __multadd
000089d8 g     F .text	00000028 _Bfree
00000a18 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10953d04 	addi	r2,r2,21748
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10953d04 	addi	r2,r2,21748
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72c17 	ldw	r2,-25424(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72c17 	ldw	r2,-25424(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ae0614 	ori	gp,gp,47128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10951114 	ori	r2,r2,21572

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d57d14 	ori	r3,r3,22004

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000eb280 	call	eb28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ecbc0 	call	ecbc <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	11042744 	addi	r4,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	20c00025 	stbio	r3,0(r4)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	01404034 	movhi	r5,256
     2a4:	29841304 	addi	r6,r5,4172
     2a8:	01c00044 	movi	r7,1
     2ac:	31c00025 	stbio	r7,0(r6)
     2b0:	020003f4 	movhi	r8,15
     2b4:	42509004 	addi	r9,r8,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	0001883a 	nop
     2c0:	0001883a 	nop
     2c4:	0001883a 	nop
     2c8:	0001883a 	nop
     2cc:	0001883a 	nop
     2d0:	0001883a 	nop
     2d4:	0001883a 	nop
     2d8:	4a7ffe04 	addi	r9,r9,-8

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2dc:	483ff61e 	bne	r9,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2e0:	02804034 	movhi	r10,256
     2e4:	52c41304 	addi	r11,r10,4172
     2e8:	58000025 	stbio	zero,0(r11)
     2ec:	030003f4 	movhi	r12,15
     2f0:	63509004 	addi	r13,r12,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2f4:	0001883a 	nop
     2f8:	0001883a 	nop
     2fc:	0001883a 	nop
     300:	0001883a 	nop
     304:	0001883a 	nop
     308:	0001883a 	nop
     30c:	0001883a 	nop
     310:	0001883a 	nop
     314:	6b7ffe04 	addi	r13,r13,-8
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     318:	683ff61e 	bne	r13,zero,2f4 <__alt_data_end+0xff0002f4>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     31c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     320:	01800044 	movi	r6,1
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     32c:	dfc00315 	stw	ra,12(sp)
     330:	dc800215 	stw	r18,8(sp)
     334:	dc400115 	stw	r17,4(sp)
     338:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     33c:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     340:	000d883a 	mov	r6,zero
     344:	014ce184 	movi	r5,13190
     348:	01001e04 	movi	r4,120
     34c:	00010080 	call	1008 <i2c_short_write>
     350:	038003f4 	movhi	r14,15
     354:	73d09004 	addi	r15,r14,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     358:	0001883a 	nop
     35c:	0001883a 	nop
     360:	0001883a 	nop
     364:	0001883a 	nop
     368:	0001883a 	nop
     36c:	0001883a 	nop
     370:	0001883a 	nop
     374:	0001883a 	nop
     378:	7bfffe04 	addi	r15,r15,-8
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     37c:	783ff61e 	bne	r15,zero,358 <__alt_data_end+0xff000358>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     380:	01803104 	movi	r6,196
     384:	014c0684 	movi	r5,12314
     388:	01001e04 	movi	r4,120
     38c:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     390:	01800204 	movi	r6,8
     394:	014c8084 	movi	r5,12802
     398:	01001e04 	movi	r4,120
     39c:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     3a0:	0180c744 	movi	r6,797
     3a4:	014cfd04 	movi	r5,13300
     3a8:	01001e04 	movi	r4,120
     3ac:	040000b4 	movhi	r16,2
     3b0:	00010080 	call	1008 <i2c_short_write>
     3b4:	8461a804 	addi	r17,r16,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3b8:	0001883a 	nop
     3bc:	0001883a 	nop
     3c0:	0001883a 	nop
     3c4:	0001883a 	nop
     3c8:	0001883a 	nop
     3cc:	0001883a 	nop
     3d0:	0001883a 	nop
     3d4:	0001883a 	nop
     3d8:	8c7ffe04 	addi	r17,r17,-8
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     3dc:	883ff61e 	bne	r17,zero,3b8 <__alt_data_end+0xff0003b8>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3e0:	01a3c254 	movui	r6,36617
     3e4:	014d0784 	movi	r5,13342
     3e8:	01001e04 	movi	r4,120
     3ec:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3f0:	01805404 	movi	r6,336
     3f4:	014d0704 	movi	r5,13340
     3f8:	01001e04 	movi	r4,120
     3fc:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     400:	01a3c254 	movui	r6,36617
     404:	014d0784 	movi	r5,13342
     408:	01001e04 	movi	r4,120
     40c:	00010080 	call	1008 <i2c_short_write>
     410:	048000b4 	movhi	r18,2
     414:	90a1a804 	addi	r2,r18,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     418:	0001883a 	nop
     41c:	0001883a 	nop
     420:	0001883a 	nop
     424:	0001883a 	nop
     428:	0001883a 	nop
     42c:	0001883a 	nop
     430:	0001883a 	nop
     434:	0001883a 	nop
     438:	10bffe04 	addi	r2,r2,-8
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     43c:	103ff61e 	bne	r2,zero,418 <__alt_data_end+0xff000418>
     440:	07c00074 	movhi	ra,1
     444:	fc05e304 	addi	r16,ra,6028
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     448:	01a3c214 	movui	r6,36616
     44c:	014d0784 	movi	r5,13342
     450:	01001e04 	movi	r4,120
     454:	00010080 	call	1008 <i2c_short_write>
     458:	84400084 	addi	r17,r16,2
     45c:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	8140000b 	ldhu	r5,0(r16)
     464:	8980000b 	ldhu	r6,0(r17)
     468:	01001e04 	movi	r4,120
     46c:	84000a04 	addi	r16,r16,40
     470:	00010080 	call	1008 <i2c_short_write>
     474:	8980010b 	ldhu	r6,4(r17)
     478:	817ff70b 	ldhu	r5,-36(r16)
     47c:	01001e04 	movi	r4,120
     480:	8c400a04 	addi	r17,r17,40
     484:	00010080 	call	1008 <i2c_short_write>
     488:	89bff80b 	ldhu	r6,-32(r17)
     48c:	817ff80b 	ldhu	r5,-32(r16)
     490:	01001e04 	movi	r4,120
     494:	00010080 	call	1008 <i2c_short_write>
     498:	89bff90b 	ldhu	r6,-28(r17)
     49c:	817ff90b 	ldhu	r5,-28(r16)
     4a0:	01001e04 	movi	r4,120
     4a4:	00010080 	call	1008 <i2c_short_write>
     4a8:	89bffa0b 	ldhu	r6,-24(r17)
     4ac:	817ffa0b 	ldhu	r5,-24(r16)
     4b0:	01001e04 	movi	r4,120
     4b4:	00010080 	call	1008 <i2c_short_write>
     4b8:	89bffb0b 	ldhu	r6,-20(r17)
     4bc:	817ffb0b 	ldhu	r5,-20(r16)
     4c0:	01001e04 	movi	r4,120
     4c4:	00010080 	call	1008 <i2c_short_write>
     4c8:	89bffc0b 	ldhu	r6,-16(r17)
     4cc:	817ffc0b 	ldhu	r5,-16(r16)
     4d0:	01001e04 	movi	r4,120
     4d4:	00010080 	call	1008 <i2c_short_write>
     4d8:	89bffd0b 	ldhu	r6,-12(r17)
     4dc:	817ffd0b 	ldhu	r5,-12(r16)
     4e0:	01001e04 	movi	r4,120
     4e4:	00010080 	call	1008 <i2c_short_write>
     4e8:	89bffe0b 	ldhu	r6,-8(r17)
     4ec:	817ffe0b 	ldhu	r5,-8(r16)
     4f0:	01001e04 	movi	r4,120
     4f4:	00010080 	call	1008 <i2c_short_write>
     4f8:	89bfff0b 	ldhu	r6,-4(r17)
     4fc:	817fff0b 	ldhu	r5,-4(r16)
     500:	01001e04 	movi	r4,120
     504:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     508:	84bfd51e 	bne	r16,r18,460 <__alt_data_end+0xff000460>
     50c:	01000074 	movhi	r4,1
     510:	24059304 	addi	r16,r4,5708
     514:	84400084 	addi	r17,r16,2
     518:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     51c:	8140000b 	ldhu	r5,0(r16)
     520:	8980000b 	ldhu	r6,0(r17)
     524:	01001e04 	movi	r4,120
     528:	84000804 	addi	r16,r16,32
     52c:	00010080 	call	1008 <i2c_short_write>
     530:	8980010b 	ldhu	r6,4(r17)
     534:	817ff90b 	ldhu	r5,-28(r16)
     538:	01001e04 	movi	r4,120
     53c:	8c400804 	addi	r17,r17,32
     540:	00010080 	call	1008 <i2c_short_write>
     544:	89bffa0b 	ldhu	r6,-24(r17)
     548:	817ffa0b 	ldhu	r5,-24(r16)
     54c:	01001e04 	movi	r4,120
     550:	00010080 	call	1008 <i2c_short_write>
     554:	89bffb0b 	ldhu	r6,-20(r17)
     558:	817ffb0b 	ldhu	r5,-20(r16)
     55c:	01001e04 	movi	r4,120
     560:	00010080 	call	1008 <i2c_short_write>
     564:	89bffc0b 	ldhu	r6,-16(r17)
     568:	817ffc0b 	ldhu	r5,-16(r16)
     56c:	01001e04 	movi	r4,120
     570:	00010080 	call	1008 <i2c_short_write>
     574:	89bffd0b 	ldhu	r6,-12(r17)
     578:	817ffd0b 	ldhu	r5,-12(r16)
     57c:	01001e04 	movi	r4,120
     580:	00010080 	call	1008 <i2c_short_write>
     584:	89bffe0b 	ldhu	r6,-8(r17)
     588:	817ffe0b 	ldhu	r5,-8(r16)
     58c:	01001e04 	movi	r4,120
     590:	00010080 	call	1008 <i2c_short_write>
     594:	89bfff0b 	ldhu	r6,-4(r17)
     598:	817fff0b 	ldhu	r5,-4(r16)
     59c:	01001e04 	movi	r4,120
     5a0:	00010080 	call	1008 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     5a4:	943fdd1e 	bne	r18,r16,51c <__alt_data_end+0xff00051c>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     5a8:	018164c4 	movi	r6,1427
     5ac:	014d6904 	movi	r5,13732
     5b0:	01001e04 	movi	r4,120
     5b4:	00010080 	call	1008 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     5b8:	0189e644 	movi	r6,10137
     5bc:	014ce304 	movi	r5,13196
     5c0:	01001e04 	movi	r4,120
     5c4:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     5c8:	014ce404 	movi	r5,13200
     5cc:	01991004 	movi	r6,25664
     5d0:	01001e04 	movi	r4,120
     5d4:	00010080 	call	1008 <i2c_short_write>
     5d8:	00c000b4 	movhi	r3,2
     5dc:	1961a804 	addi	r5,r3,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     5e0:	0001883a 	nop
     5e4:	0001883a 	nop
     5e8:	0001883a 	nop
     5ec:	0001883a 	nop
     5f0:	0001883a 	nop
     5f4:	0001883a 	nop
     5f8:	0001883a 	nop
     5fc:	0001883a 	nop
     600:	297ffe04 	addi	r5,r5,-8
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     604:	283ff61e 	bne	r5,zero,5e0 <__alt_data_end+0xff0005e0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     608:	0189e6c4 	movi	r6,10139
     60c:	014ce304 	movi	r5,13196
     610:	01001e04 	movi	r4,120
     614:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     618:	01991004 	movi	r6,25664
     61c:	014ce404 	movi	r5,13200
     620:	01001e04 	movi	r4,120
     624:	00010080 	call	1008 <i2c_short_write>
     628:	018000b4 	movhi	r6,2
     62c:	31e1a804 	addi	r7,r6,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     630:	0001883a 	nop
     634:	0001883a 	nop
     638:	0001883a 	nop
     63c:	0001883a 	nop
     640:	0001883a 	nop
     644:	0001883a 	nop
     648:	0001883a 	nop
     64c:	0001883a 	nop
     650:	39fffe04 	addi	r7,r7,-8
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     654:	383ff61e 	bne	r7,zero,630 <__alt_data_end+0xff000630>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     658:	01a840d4 	movui	r6,41219
     65c:	014ce304 	movi	r5,13196
     660:	01001e04 	movi	r4,120
     664:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     668:	01800144 	movi	r6,5
     66c:	014ce404 	movi	r5,13200
     670:	01001e04 	movi	r4,120
     674:	00010080 	call	1008 <i2c_short_write>
     678:	020000b4 	movhi	r8,2
     67c:	4261a804 	addi	r9,r8,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     680:	0001883a 	nop
     684:	0001883a 	nop
     688:	0001883a 	nop
     68c:	0001883a 	nop
     690:	0001883a 	nop
     694:	0001883a 	nop
     698:	0001883a 	nop
     69c:	0001883a 	nop
     6a0:	4a7ffe04 	addi	r9,r9,-8
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     6a4:	483ff61e 	bne	r9,zero,680 <__alt_data_end+0xff000680>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     6a8:	01a840d4 	movui	r6,41219
     6ac:	014ce304 	movi	r5,13196
     6b0:	01001e04 	movi	r4,120
     6b4:	00010080 	call	1008 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     6b8:	01800184 	movi	r6,6
     6bc:	014ce404 	movi	r5,13200
     6c0:	01001e04 	movi	r4,120
     6c4:	00010080 	call	1008 <i2c_short_write>
     6c8:	028000b4 	movhi	r10,2
     6cc:	52e1a804 	addi	r11,r10,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     6d0:	0001883a 	nop
     6d4:	0001883a 	nop
     6d8:	0001883a 	nop
     6dc:	0001883a 	nop
     6e0:	0001883a 	nop
     6e4:	0001883a 	nop
     6e8:	0001883a 	nop
     6ec:	0001883a 	nop
     6f0:	5afffe04 	addi	r11,r11,-8
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     6f4:	583ff61e 	bne	r11,zero,6d0 <__alt_data_end+0xff0006d0>
     6f8:	03000074 	movhi	r12,1
     6fc:	64454904 	addi	r17,r12,5412
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     700:	8980008b 	ldhu	r6,2(r17)
     704:	8940000b 	ldhu	r5,0(r17)
     708:	01001e04 	movi	r4,120
     70c:	8c804a04 	addi	r18,r17,296
     710:	00010080 	call	1008 <i2c_short_write>
     714:	8980018b 	ldhu	r6,6(r17)
     718:	8940010b 	ldhu	r5,4(r17)
     71c:	01001e04 	movi	r4,120
     720:	8c000204 	addi	r16,r17,8
     724:	8c400284 	addi	r17,r17,10
     728:	00010080 	call	1008 <i2c_short_write>
     72c:	8140000b 	ldhu	r5,0(r16)
     730:	8980000b 	ldhu	r6,0(r17)
     734:	01001e04 	movi	r4,120
     738:	84000804 	addi	r16,r16,32
     73c:	00010080 	call	1008 <i2c_short_write>
     740:	8980010b 	ldhu	r6,4(r17)
     744:	817ff90b 	ldhu	r5,-28(r16)
     748:	01001e04 	movi	r4,120
     74c:	8c400804 	addi	r17,r17,32
     750:	00010080 	call	1008 <i2c_short_write>
     754:	89bffa0b 	ldhu	r6,-24(r17)
     758:	817ffa0b 	ldhu	r5,-24(r16)
     75c:	01001e04 	movi	r4,120
     760:	00010080 	call	1008 <i2c_short_write>
     764:	89bffb0b 	ldhu	r6,-20(r17)
     768:	817ffb0b 	ldhu	r5,-20(r16)
     76c:	01001e04 	movi	r4,120
     770:	00010080 	call	1008 <i2c_short_write>
     774:	89bffc0b 	ldhu	r6,-16(r17)
     778:	817ffc0b 	ldhu	r5,-16(r16)
     77c:	01001e04 	movi	r4,120
     780:	00010080 	call	1008 <i2c_short_write>
     784:	89bffd0b 	ldhu	r6,-12(r17)
     788:	817ffd0b 	ldhu	r5,-12(r16)
     78c:	01001e04 	movi	r4,120
     790:	00010080 	call	1008 <i2c_short_write>
     794:	89bffe0b 	ldhu	r6,-8(r17)
     798:	817ffe0b 	ldhu	r5,-8(r16)
     79c:	01001e04 	movi	r4,120
     7a0:	00010080 	call	1008 <i2c_short_write>
     7a4:	89bfff0b 	ldhu	r6,-4(r17)
     7a8:	817fff0b 	ldhu	r5,-4(r16)
     7ac:	01001e04 	movi	r4,120
     7b0:	00010080 	call	1008 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     7b4:	943fdd1e 	bne	r18,r16,72c <__alt_data_end+0xff00072c>
     7b8:	034003f4 	movhi	r13,15
     7bc:	6b909004 	addi	r14,r13,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     7c0:	0001883a 	nop
     7c4:	0001883a 	nop
     7c8:	0001883a 	nop
     7cc:	0001883a 	nop
     7d0:	0001883a 	nop
     7d4:	0001883a 	nop
     7d8:	0001883a 	nop
     7dc:	0001883a 	nop
     7e0:	73bffe04 	addi	r14,r14,-8
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     7e4:	703ff61e 	bne	r14,zero,7c0 <__alt_data_end+0xff0007c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     7e8:	01800804 	movi	r6,32
     7ec:	014ccb84 	movi	r5,13102
     7f0:	01001e04 	movi	r4,120
     7f4:	00010080 	call	1008 <i2c_short_write>
     7f8:	03c003f4 	movhi	r15,15
     7fc:	78909004 	addi	r2,r15,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     800:	0001883a 	nop
     804:	0001883a 	nop
     808:	0001883a 	nop
     80c:	0001883a 	nop
     810:	0001883a 	nop
     814:	0001883a 	nop
     818:	0001883a 	nop
     81c:	0001883a 	nop
     820:	10bffe04 	addi	r2,r2,-8
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     824:	103ff61e 	bne	r2,zero,800 <__alt_data_end+0xff000800>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     828:	01001e04 	movi	r4,120
     82c:	01800884 	movi	r6,34
     830:	014d0104 	movi	r5,13316
     834:	00010080 	call	1008 <i2c_short_write>
     838:	010003f4 	movhi	r4,15
     83c:	20d09004 	addi	r3,r4,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     840:	0001883a 	nop
     844:	0001883a 	nop
     848:	0001883a 	nop
     84c:	0001883a 	nop
     850:	0001883a 	nop
     854:	0001883a 	nop
     858:	0001883a 	nop
     85c:	0001883a 	nop
     860:	18fffe04 	addi	r3,r3,-8
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     864:	183ff61e 	bne	r3,zero,840 <__alt_data_end+0xff000840>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     868:	018009c4 	movi	r6,39
     86c:	014c1004 	movi	r5,12352
     870:	01001e04 	movi	r4,120
}
     874:	dfc00317 	ldw	ra,12(sp)
     878:	dc800217 	ldw	r18,8(sp)
     87c:	dc400117 	ldw	r17,4(sp)
     880:	dc000017 	ldw	r16,0(sp)
     884:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     888:	00010081 	jmpi	1008 <i2c_short_write>

0000088c <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     88c:	00c04034 	movhi	r3,256
     890:	19041304 	addi	r4,r3,4172
     894:	20800023 	ldbuio	r2,0(r4)
	} while ((control_reg&CAM_Profile_valid)==0);
     898:	1140010c 	andi	r5,r2,4
     89c:	283ffd26 	beq	r5,zero,894 <__alt_data_end+0xff000894>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     8a0:	01804034 	movhi	r6,256
     8a4:	31c41004 	addi	r7,r6,4160
}
     8a8:	3880002b 	ldhuio	r2,0(r7)
     8ac:	f800283a 	ret

000008b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     8b0:	00c04034 	movhi	r3,256
     8b4:	19041304 	addi	r4,r3,4172
     8b8:	20800023 	ldbuio	r2,0(r4)
	} while ((control_reg&CAM_Profile_valid)==0);
     8bc:	1140010c 	andi	r5,r2,4
     8c0:	283ffd26 	beq	r5,zero,8b8 <__alt_data_end+0xff0008b8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     8c4:	01804034 	movhi	r6,256
     8c8:	31c41104 	addi	r7,r6,4164
}
     8cc:	3880002b 	ldhuio	r2,0(r7)
     8d0:	f800283a 	ret

000008d4 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     8d4:	00c04034 	movhi	r3,256
     8d8:	19041304 	addi	r4,r3,4172
     8dc:	20800023 	ldbuio	r2,0(r4)
	} while ((control_reg&CAM_Profile_valid)==0);
     8e0:	1140010c 	andi	r5,r2,4
     8e4:	283ffd26 	beq	r5,zero,8dc <__alt_data_end+0xff0008dc>
	printf("Nr. of bytes each line    : %d\n",
     8e8:	01804034 	movhi	r6,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     8ec:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     8f0:	31c41004 	addi	r7,r6,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     8f4:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     8f8:	3a00002b 	ldhuio	r8,0(r7)
     8fc:	02400074 	movhi	r9,1
     900:	49053104 	addi	r4,r9,5316
     904:	417fffcc 	andi	r5,r8,65535
     908:	00032800 	call	3280 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     90c:	02804034 	movhi	r10,256
     910:	52c41104 	addi	r11,r10,4164
     914:	5b00002b 	ldhuio	r12,0(r11)
     918:	03400074 	movhi	r13,1
     91c:	69053904 	addi	r4,r13,5348
     920:	617fffcc 	andi	r5,r12,65535
     924:	00032800 	call	3280 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     928:	03804034 	movhi	r14,256
     92c:	73c41204 	addi	r15,r14,4168
     930:	78c0002b 	ldhuio	r3,0(r15)
     934:	01000074 	movhi	r4,1
     938:	21054104 	addi	r4,r4,5380
     93c:	197fffcc 	andi	r5,r3,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     940:	dfc00017 	ldw	ra,0(sp)
     944:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     948:	00032801 	jmpi	3280 <printf>

0000094c <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     94c:	21003fcc 	andi	r4,r4,255
     950:	2080201c 	xori	r2,r4,128
     954:	10ffe004 	addi	r3,r2,-128
     958:	01800044 	movi	r6,1
     95c:	19801226 	beq	r3,r6,9a8 <cam_set_image_pointer+0x5c>
     960:	30c00c0e 	bge	r6,r3,994 <cam_set_image_pointer+0x48>
     964:	02400084 	movi	r9,2
     968:	1a400626 	beq	r3,r9,984 <cam_set_image_pointer+0x38>
     96c:	028000c4 	movi	r10,3
     970:	1a80111e 	bne	r3,r10,9b8 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     974:	02c04034 	movhi	r11,256
     978:	5b041704 	addi	r12,r11,4188
     97c:	61400035 	stwio	r5,0(r12)
     980:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     984:	03404034 	movhi	r13,256
     988:	6b841604 	addi	r14,r13,4184
     98c:	71400035 	stwio	r5,0(r14)
                break;
     990:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     994:	1800091e 	bne	r3,zero,9bc <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     998:	01c04034 	movhi	r7,256
     99c:	3a041404 	addi	r8,r7,4176
     9a0:	41400035 	stwio	r5,0(r8)
	            break;
     9a4:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     9a8:	03c04034 	movhi	r15,256
     9ac:	79041504 	addi	r4,r15,4180
     9b0:	21400035 	stwio	r5,0(r4)
                break;
     9b4:	f800283a 	ret
     9b8:	f800283a 	ret
     9bc:	f800283a 	ret

000009c0 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c0:	00804034 	movhi	r2,256
     9c4:	10c41304 	addi	r3,r2,4172
     9c8:	1900002b 	ldhuio	r4,0(r3)
	return (value&CAM_Current_Image_Valid);
}
     9cc:	2080800c 	andi	r2,r4,512
     9d0:	f800283a 	ret

000009d4 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     9d4:	00804034 	movhi	r2,256
     9d8:	10c41404 	addi	r3,r2,4176
}
     9dc:	18800037 	ldwio	r2,0(r3)
     9e0:	f800283a 	ret

000009e4 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9e4:	00c04034 	movhi	r3,256
     9e8:	19041304 	addi	r4,r3,4172
     9ec:	00800204 	movi	r2,8
     9f0:	2080002d 	sthio	r2,0(r4)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9f4:	2140002b 	ldhuio	r5,0(r4)
	} while ((value&CAM_Busy)!= 0);
     9f8:	2980020c 	andi	r6,r5,8
     9fc:	303ffd1e 	bne	r6,zero,9f4 <__alt_data_end+0xff0009f4>
}
     a00:	f800283a 	ret

00000a04 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a04:	00804034 	movhi	r2,256
     a08:	11041304 	addi	r4,r2,4172
     a0c:	00c00404 	movi	r3,16
     a10:	20c0002d 	sthio	r3,0(r4)
     a14:	f800283a 	ret

00000a18 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a18:	00c04034 	movhi	r3,256
     a1c:	19041304 	addi	r4,r3,4172
     a20:	2080002b 	ldhuio	r2,0(r4)
	if ((value&CAM_IRQ_Generated)!=0) {
     a24:	1140200c 	andi	r5,r2,128
     a28:	2800021e 	bne	r5,zero,a34 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     a2c:	0005883a 	mov	r2,zero
}
     a30:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a34:	01804004 	movi	r6,256
     a38:	2180002d 	sthio	r6,0(r4)
		return 1;
     a3c:	00800044 	movi	r2,1
     a40:	f800283a 	ret

00000a44 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a44:	00804034 	movhi	r2,256
     a48:	10c42804 	addi	r3,r2,4256
     a4c:	19000023 	ldbuio	r4,0(r3)
}
     a50:	0104303a 	nor	r2,zero,r4
     a54:	f800283a 	ret

00000a58 <conv_grayscale>:
int size_int = 0;

void conv_grayscale(void *picture) {
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
     a58:	d1a70b17 	ldw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;
int size_int = 0;

void conv_grayscale(void *picture) {
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
     a5c:	d2270f17 	ldw	r8,-25540(gp)
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
     a60:	3185883a 	add	r2,r6,r6
     a64:	1087883a 	add	r3,r2,r2
     a68:	40d5883a 	add	r10,r8,r3
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     a6c:	4280762e 	bgeu	r8,r10,c48 <conv_grayscale+0x1f0>
     a70:	020e303a 	nor	r7,zero,r8
     a74:	51cb883a 	add	r5,r10,r7
     a78:	2812d0ba 	srli	r9,r5,2

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     a7c:	22c00017 	ldw	r11,0(r4)
     a80:	23000117 	ldw	r12,4(r4)
     a84:	4b4001cc 	andi	r13,r9,7
     a88:	5b1dc0f2 	custom	3,r14,r11,r12
     a8c:	43800015 	stw	r14,0(r8)
			pos++;
     a90:	40800104 	addi	r2,r8,4
     a94:	21400204 	addi	r5,r4,8
     a98:	20c00304 	addi	r3,r4,12
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     a9c:	12806c2e 	bgeu	r2,r10,c50 <conv_grayscale+0x1f8>
     aa0:	68003e26 	beq	r13,zero,b9c <conv_grayscale+0x144>
     aa4:	03c00044 	movi	r15,1
     aa8:	6bc03426 	beq	r13,r15,b7c <conv_grayscale+0x124>
     aac:	01800084 	movi	r6,2
     ab0:	69802b26 	beq	r13,r6,b60 <conv_grayscale+0x108>
     ab4:	01c000c4 	movi	r7,3
     ab8:	69c02226 	beq	r13,r7,b44 <conv_grayscale+0xec>
     abc:	02400104 	movi	r9,4
     ac0:	6a401926 	beq	r13,r9,b28 <conv_grayscale+0xd0>
     ac4:	02c00144 	movi	r11,5
     ac8:	6ac01026 	beq	r13,r11,b0c <conv_grayscale+0xb4>
     acc:	03000184 	movi	r12,6
     ad0:	6b000726 	beq	r13,r12,af0 <conv_grayscale+0x98>

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     ad4:	29400017 	ldw	r5,0(r5)
     ad8:	18c00017 	ldw	r3,0(r3)
     adc:	28dbc0f2 	custom	3,r13,r5,r3
     ae0:	13400015 	stw	r13,0(r2)
     ae4:	21400404 	addi	r5,r4,16
			pos++;
     ae8:	40800204 	addi	r2,r8,8
     aec:	20c00504 	addi	r3,r4,20
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     af0:	29000017 	ldw	r4,0(r5)
     af4:	1a000017 	ldw	r8,0(r3)
     af8:	221dc0f2 	custom	3,r14,r4,r8
     afc:	13800015 	stw	r14,0(r2)
     b00:	29400204 	addi	r5,r5,8
			pos++;
     b04:	10800104 	addi	r2,r2,4
     b08:	18c00204 	addi	r3,r3,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b0c:	2bc00017 	ldw	r15,0(r5)
     b10:	19800017 	ldw	r6,0(r3)
     b14:	798fc0f2 	custom	3,r7,r15,r6
     b18:	11c00015 	stw	r7,0(r2)
     b1c:	29400204 	addi	r5,r5,8
			pos++;
     b20:	10800104 	addi	r2,r2,4
     b24:	18c00204 	addi	r3,r3,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b28:	2a400017 	ldw	r9,0(r5)
     b2c:	1ac00017 	ldw	r11,0(r3)
     b30:	4ad9c0f2 	custom	3,r12,r9,r11
     b34:	13000015 	stw	r12,0(r2)
     b38:	29400204 	addi	r5,r5,8
			pos++;
     b3c:	10800104 	addi	r2,r2,4
     b40:	18c00204 	addi	r3,r3,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b44:	2b400017 	ldw	r13,0(r5)
     b48:	19000017 	ldw	r4,0(r3)
     b4c:	6911c0f2 	custom	3,r8,r13,r4
     b50:	12000015 	stw	r8,0(r2)
     b54:	29400204 	addi	r5,r5,8
			pos++;
     b58:	10800104 	addi	r2,r2,4
     b5c:	18c00204 	addi	r3,r3,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b60:	2b800017 	ldw	r14,0(r5)
     b64:	1bc00017 	ldw	r15,0(r3)
     b68:	73cdc0f2 	custom	3,r6,r14,r15
     b6c:	11800015 	stw	r6,0(r2)
     b70:	29400204 	addi	r5,r5,8
			pos++;
     b74:	10800104 	addi	r2,r2,4
     b78:	18c00204 	addi	r3,r3,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b7c:	2a400017 	ldw	r9,0(r5)
     b80:	19c00017 	ldw	r7,0(r3)
     b84:	49d7c0f2 	custom	3,r11,r9,r7
     b88:	12c00015 	stw	r11,0(r2)
			pos++;
     b8c:	10800104 	addi	r2,r2,4
     b90:	29400204 	addi	r5,r5,8
     b94:	18c00204 	addi	r3,r3,8
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     b98:	12802c2e 	bgeu	r2,r10,c4c <conv_grayscale+0x1f4>

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     b9c:	2b000017 	ldw	r12,0(r5)
     ba0:	1b400017 	ldw	r13,0(r3)
     ba4:	6349c0f2 	custom	3,r4,r12,r13
     ba8:	11000015 	stw	r4,0(r2)
     bac:	2b800217 	ldw	r14,8(r5)
     bb0:	1a000217 	ldw	r8,8(r3)
			pos++;
     bb4:	13c00104 	addi	r15,r2,4
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     bb8:	720dc0f2 	custom	3,r6,r14,r8
     bbc:	79800015 	stw	r6,0(r15)
     bc0:	2a400417 	ldw	r9,16(r5)
     bc4:	1ac00417 	ldw	r11,16(r3)
			pos++;
     bc8:	11c00204 	addi	r7,r2,8
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     bcc:	4ad9c0f2 	custom	3,r12,r9,r11
     bd0:	3b000015 	stw	r12,0(r7)
     bd4:	2b400617 	ldw	r13,24(r5)
     bd8:	19000617 	ldw	r4,24(r3)
			pos++;
     bdc:	13800304 	addi	r14,r2,12
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     be0:	6911c0f2 	custom	3,r8,r13,r4
     be4:	72000015 	stw	r8,0(r14)
     be8:	2bc00817 	ldw	r15,32(r5)
     bec:	19800817 	ldw	r6,32(r3)
			pos++;
     bf0:	12400404 	addi	r9,r2,16
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     bf4:	7997c0f2 	custom	3,r11,r15,r6
     bf8:	4ac00015 	stw	r11,0(r9)
     bfc:	2b000a17 	ldw	r12,40(r5)
     c00:	1b400a17 	ldw	r13,40(r3)
			pos++;
     c04:	11c00504 	addi	r7,r2,20
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     c08:	6349c0f2 	custom	3,r4,r12,r13
     c0c:	39000015 	stw	r4,0(r7)
     c10:	2b800c17 	ldw	r14,48(r5)
     c14:	1a000c17 	ldw	r8,48(r3)
			pos++;
     c18:	13c00604 	addi	r15,r2,24
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     c1c:	720dc0f2 	custom	3,r6,r14,r8
     c20:	79800015 	stw	r6,0(r15)
     c24:	2a400e17 	ldw	r9,56(r5)
     c28:	1ac00e17 	ldw	r11,56(r3)
			pos++;
     c2c:	13000704 	addi	r12,r2,28
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     c30:	4adbc0f2 	custom	3,r13,r9,r11
     c34:	63400015 	stw	r13,0(r12)
			pos++;
     c38:	10800804 	addi	r2,r2,32
     c3c:	29401004 	addi	r5,r5,64
     c40:	18c01004 	addi	r3,r3,64
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     c44:	12bfd536 	bltu	r2,r10,b9c <__alt_data_end+0xff000b9c>
     c48:	f800283a 	ret
     c4c:	f800283a 	ret
     c50:	f800283a 	ret

00000c54 <conv_grayscale_init>:

RETURN
     7b0:	f800283a 	ret
 */

void conv_grayscale_init(int width, int height){
     c54:	defffb04 	addi	sp,sp,-20
     c58:	dc000015 	stw	r16,0(sp)
		grayscale_width = width;
		grayscale_width_int = width>>2;
     c5c:	2021d0ba 	srai	r16,r4,2

RETURN
     7b0:	f800283a 	ret
 */

void conv_grayscale_init(int width, int height){
     c60:	dc400115 	stw	r17,4(sp)
     c64:	2023883a 	mov	r17,r4
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     c68:	d1271017 	ldw	r4,-25536(gp)

RETURN
     7b0:	f800283a 	ret
 */

void conv_grayscale_init(int width, int height){
     c6c:	dc800215 	stw	r18,8(sp)
     c70:	dfc00415 	stw	ra,16(sp)
     c74:	dcc00315 	stw	r19,12(sp)
		grayscale_width = width;
     c78:	d4670d15 	stw	r17,-25548(gp)
		grayscale_width_int = width>>2;
     c7c:	d4270e15 	stw	r16,-25544(gp)
		grayscape_height = height;
     c80:	d1670c15 	stw	r5,-25552(gp)

RETURN
     7b0:	f800283a 	ret
 */

void conv_grayscale_init(int width, int height){
     c84:	2825883a 	mov	r18,r5
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     c88:	20001026 	beq	r4,zero,ccc <conv_grayscale_init+0x78>
			free(grayscale_array);
     c8c:	0002a300 	call	2a30 <free>
     c90:	d4e70c17 	ldw	r19,-25552(gp)
     c94:	d4270e17 	ldw	r16,-25544(gp)
		grayscale_array = (unsigned char *) malloc(width* height);
     c98:	8c89383a 	mul	r4,r17,r18
     c9c:	0002a1c0 	call	2a1c <malloc>
		grayscale_array_int = (unsigned int *) grayscale_array;
		size_int = grayscape_height*grayscale_width_int;
     ca0:	9c07383a 	mul	r3,r19,r16
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
			free(grayscale_array);
		grayscale_array = (unsigned char *) malloc(width* height);
     ca4:	d0a71015 	stw	r2,-25536(gp)
		grayscale_array_int = (unsigned int *) grayscale_array;
     ca8:	d0a70f15 	stw	r2,-25540(gp)
		size_int = grayscape_height*grayscale_width_int;
     cac:	d0e70b15 	stw	r3,-25556(gp)
}
     cb0:	dfc00417 	ldw	ra,16(sp)
     cb4:	dcc00317 	ldw	r19,12(sp)
     cb8:	dc800217 	ldw	r18,8(sp)
     cbc:	dc400117 	ldw	r17,4(sp)
     cc0:	dc000017 	ldw	r16,0(sp)
     cc4:	dec00504 	addi	sp,sp,20
     cc8:	f800283a 	ret
     ccc:	2827883a 	mov	r19,r5
     cd0:	003ff106 	br	c98 <__alt_data_end+0xff000c98>

00000cd4 <get_grayscale_width>:



int get_grayscale_width() {
	return grayscale_width;
}
     cd4:	d0a70d17 	ldw	r2,-25548(gp)
     cd8:	f800283a 	ret

00000cdc <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     cdc:	d0a70c17 	ldw	r2,-25552(gp)
     ce0:	f800283a 	ret

00000ce4 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     ce4:	d0a71017 	ldw	r2,-25536(gp)
     ce8:	f800283a 	ret

00000cec <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     cec:	00c04034 	movhi	r3,256
     cf0:	19042704 	addi	r4,r3,4252
     cf4:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     cf8:	114000cc 	andi	r5,r2,3
     cfc:	283ffd1e 	bne	r5,zero,cf4 <__alt_data_end+0xff000cf4>
}
     d00:	f800283a 	ret

00000d04 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     d04:	01004034 	movhi	r4,256
     d08:	21442704 	addi	r5,r4,4252
     d0c:	00c04034 	movhi	r3,256
     d10:	19842704 	addi	r6,r3,4252
     d14:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     d18:	11c000cc 	andi	r7,r2,3
     d1c:	383ffb1e 	bne	r7,zero,d0c <__alt_data_end+0xff000d0c>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     d20:	02000104 	movi	r8,4
     d24:	32000035 	stwio	r8,0(r6)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     d28:	32400037 	ldwio	r9,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     d2c:	4a8000cc 	andi	r10,r9,3
     d30:	503ffd1e 	bne	r10,zero,d28 <__alt_data_end+0xff000d28>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     d34:	02c04034 	movhi	r11,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     d38:	defffb04 	addi	sp,sp,-20
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     d3c:	5b042504 	addi	r12,r11,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     d40:	dfc00415 	stw	ra,16(sp)
     d44:	dcc00315 	stw	r19,12(sp)
     d48:	dc800215 	stw	r18,8(sp)
     d4c:	dc400115 	stw	r17,4(sp)
     d50:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     d54:	64c00037 	ldwio	r19,0(r12)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d58:	03400074 	movhi	r13,1
     d5c:	69062904 	addi	r4,r13,6308
     d60:	980b883a 	mov	r5,r19
     d64:	00032800 	call	3280 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d68:	04c07d0e 	bge	zero,r19,f60 <i2c_auto_detect+0x25c>
     d6c:	04e5c83a 	sub	r18,zero,r19
     d70:	049c303a 	nor	r14,zero,r18
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d74:	04404034 	movhi	r17,256
     d78:	8c442404 	addi	r17,r17,4240
     d7c:	748001cc 	andi	r18,r14,7
     d80:	88000035 	stwio	zero,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d84:	89800037 	ldwio	r6,0(r17)
     d88:	03c00074 	movhi	r15,1
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d8c:	04000044 	movi	r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d90:	79063204 	addi	r4,r15,6344
     d94:	000b883a 	mov	r5,zero
     d98:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d9c:	9c007026 	beq	r19,r16,f60 <i2c_auto_detect+0x25c>
     da0:	90003d26 	beq	r18,zero,e98 <i2c_auto_detect+0x194>
     da4:	94003426 	beq	r18,r16,e78 <i2c_auto_detect+0x174>
     da8:	07c00084 	movi	ra,2
     dac:	97c02b26 	beq	r18,ra,e5c <i2c_auto_detect+0x158>
     db0:	010000c4 	movi	r4,3
     db4:	91002226 	beq	r18,r4,e40 <i2c_auto_detect+0x13c>
     db8:	01400104 	movi	r5,4
     dbc:	91401926 	beq	r18,r5,e24 <i2c_auto_detect+0x120>
     dc0:	00c00144 	movi	r3,5
     dc4:	90c01026 	beq	r18,r3,e08 <i2c_auto_detect+0x104>
     dc8:	01800184 	movi	r6,6
     dcc:	91800726 	beq	r18,r6,dec <i2c_auto_detect+0xe8>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     dd0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     dd4:	89800037 	ldwio	r6,0(r17)
     dd8:	00800074 	movhi	r2,1
     ddc:	800b883a 	mov	r5,r16
     de0:	11063204 	addi	r4,r2,6344
     de4:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     de8:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     dec:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     df0:	89800037 	ldwio	r6,0(r17)
     df4:	01c00074 	movhi	r7,1
     df8:	800b883a 	mov	r5,r16
     dfc:	39063204 	addi	r4,r7,6344
     e00:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e04:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e08:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e0c:	89800037 	ldwio	r6,0(r17)
     e10:	02000074 	movhi	r8,1
     e14:	800b883a 	mov	r5,r16
     e18:	41063204 	addi	r4,r8,6344
     e1c:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e20:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e24:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e28:	89800037 	ldwio	r6,0(r17)
     e2c:	02400074 	movhi	r9,1
     e30:	800b883a 	mov	r5,r16
     e34:	49063204 	addi	r4,r9,6344
     e38:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e3c:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e40:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e44:	89800037 	ldwio	r6,0(r17)
     e48:	02800074 	movhi	r10,1
     e4c:	800b883a 	mov	r5,r16
     e50:	51063204 	addi	r4,r10,6344
     e54:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e58:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e5c:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e60:	89800037 	ldwio	r6,0(r17)
     e64:	02c00074 	movhi	r11,1
     e68:	800b883a 	mov	r5,r16
     e6c:	59063204 	addi	r4,r11,6344
     e70:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e74:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e78:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e7c:	89800037 	ldwio	r6,0(r17)
     e80:	03000074 	movhi	r12,1
     e84:	800b883a 	mov	r5,r16
     e88:	61063204 	addi	r4,r12,6344
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e8c:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e90:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     e94:	9c003226 	beq	r19,r16,f60 <i2c_auto_detect+0x25c>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     e98:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     e9c:	89800037 	ldwio	r6,0(r17)
     ea0:	03400074 	movhi	r13,1
     ea4:	800b883a 	mov	r5,r16
     ea8:	69063204 	addi	r4,r13,6344
     eac:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     eb0:	81400044 	addi	r5,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     eb4:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     eb8:	89800037 	ldwio	r6,0(r17)
     ebc:	03800074 	movhi	r14,1
     ec0:	71063204 	addi	r4,r14,6344
     ec4:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     ec8:	81400084 	addi	r5,r16,2
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     ecc:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     ed0:	89800037 	ldwio	r6,0(r17)
     ed4:	04800074 	movhi	r18,1
     ed8:	91063204 	addi	r4,r18,6344
     edc:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     ee0:	814000c4 	addi	r5,r16,3
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     ee4:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     ee8:	89800037 	ldwio	r6,0(r17)
     eec:	03c00074 	movhi	r15,1
     ef0:	79063204 	addi	r4,r15,6344
     ef4:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     ef8:	81400104 	addi	r5,r16,4
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     efc:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     f00:	89800037 	ldwio	r6,0(r17)
     f04:	01000074 	movhi	r4,1
     f08:	21063204 	addi	r4,r4,6344
     f0c:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     f10:	81400144 	addi	r5,r16,5
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     f14:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     f18:	89800037 	ldwio	r6,0(r17)
     f1c:	00c00074 	movhi	r3,1
     f20:	19063204 	addi	r4,r3,6344
     f24:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     f28:	81400184 	addi	r5,r16,6
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     f2c:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     f30:	89800037 	ldwio	r6,0(r17)
     f34:	00800074 	movhi	r2,1
     f38:	11063204 	addi	r4,r2,6344
     f3c:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     f40:	814001c4 	addi	r5,r16,7
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     f44:	89400035 	stwio	r5,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     f48:	89800037 	ldwio	r6,0(r17)
     f4c:	01c00074 	movhi	r7,1
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     f50:	84000204 	addi	r16,r16,8
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     f54:	39063204 	addi	r4,r7,6344
     f58:	00032800 	call	3280 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     f5c:	9c3fce1e 	bne	r19,r16,e98 <__alt_data_end+0xff000e98>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     f60:	dfc00417 	ldw	ra,16(sp)
     f64:	dcc00317 	ldw	r19,12(sp)
     f68:	dc800217 	ldw	r18,8(sp)
     f6c:	dc400117 	ldw	r17,4(sp)
     f70:	dc000017 	ldw	r16,0(sp)
     f74:	dec00504 	addi	sp,sp,20
     f78:	f800283a 	ret

00000f7c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     f7c:	01804034 	movhi	r6,256
     f80:	31c42704 	addi	r7,r6,4252
     f84:	00c04034 	movhi	r3,256
     f88:	1a042704 	addi	r8,r3,4252
     f8c:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     f90:	124000cc 	andi	r9,r2,3
     f94:	483ffb1e 	bne	r9,zero,f84 <__alt_data_end+0xff000f84>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     f98:	02804034 	movhi	r10,256
     f9c:	21003fcc 	andi	r4,r4,255
     fa0:	52c42404 	addi	r11,r10,4240
     fa4:	59000025 	stbio	r4,0(r11)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     fa8:	03004034 	movhi	r12,256
     fac:	63442504 	addi	r13,r12,4244
     fb0:	6940002d 	sthio	r5,0(r13)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     fb4:	014010c4 	movi	r5,67
     fb8:	41400025 	stbio	r5,0(r8)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     fbc:	401d883a 	mov	r14,r8
     fc0:	03c04034 	movhi	r15,256
     fc4:	79842704 	addi	r6,r15,4252
     fc8:	71c00037 	ldwio	r7,0(r14)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     fcc:	38c000cc 	andi	r3,r7,3
     fd0:	183ffb1e 	bne	r3,zero,fc0 <__alt_data_end+0xff000fc0>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     fd4:	00804034 	movhi	r2,256
     fd8:	22000044 	addi	r8,r4,1
     fdc:	12442404 	addi	r9,r2,4240
     fe0:	4a000025 	stbio	r8,0(r9)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     fe4:	01000884 	movi	r4,34
     fe8:	31000025 	stbio	r4,0(r6)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     fec:	32800037 	ldwio	r10,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     ff0:	52c000cc 	andi	r11,r10,3
     ff4:	583ffd1e 	bne	r11,zero,fec <__alt_data_end+0xff000fec>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     ff8:	03004034 	movhi	r12,256
     ffc:	63442604 	addi	r13,r12,4248
}
    1000:	68800037 	ldwio	r2,0(r13)
    1004:	f800283a 	ret

00001008 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
    1008:	01c04034 	movhi	r7,256
    100c:	3a042704 	addi	r8,r7,4252
    1010:	00c04034 	movhi	r3,256
    1014:	1a442704 	addi	r9,r3,4252
    1018:	40800037 	ldwio	r2,0(r8)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
    101c:	128000cc 	andi	r10,r2,3
    1020:	503ffb1e 	bne	r10,zero,1010 <__alt_data_end+0xff001010>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
    1024:	02c04034 	movhi	r11,256
    1028:	5b042404 	addi	r12,r11,4240
    102c:	61000025 	stbio	r4,0(r12)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
    1030:	01004034 	movhi	r4,256
    1034:	23442504 	addi	r13,r4,4244
    1038:	6940002d 	sthio	r5,0(r13)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
    103c:	01404034 	movhi	r5,256
    1040:	2b842604 	addi	r14,r5,4248
    1044:	7180002d 	sthio	r6,0(r14)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
    1048:	01801084 	movi	r6,66
    104c:	49800025 	stbio	r6,0(r9)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
    1050:	4bc00037 	ldwio	r15,0(r9)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
    1054:	79c000cc 	andi	r7,r15,3
    1058:	383ffd1e 	bne	r7,zero,1050 <__alt_data_end+0xff001050>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
    105c:	f800283a 	ret

00001060 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1060:	00804034 	movhi	r2,256
    1064:	10c41804 	addi	r3,r2,4192
    1068:	1900002d 	sthio	r4,0(r3)
	usleep(10);
    106c:	01000284 	movi	r4,10
    1070:	000f0441 	jmpi	f044 <usleep>

00001074 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1074:	00804034 	movhi	r2,256
    1078:	10c41904 	addi	r3,r2,4196
    107c:	1900002d 	sthio	r4,0(r3)
	usleep(10);
    1080:	01000284 	movi	r4,10
    1084:	000f0441 	jmpi	f044 <usleep>

00001088 <init_LCD>:
}


void init_LCD() {
    1088:	defff604 	addi	sp,sp,-40
    108c:	dd800615 	stw	r22,24(sp)
    1090:	dd000415 	stw	r20,16(sp)
    1094:	dfc00915 	stw	ra,36(sp)
    1098:	df000815 	stw	fp,32(sp)
    109c:	ddc00715 	stw	r23,28(sp)
    10a0:	dd400515 	stw	r21,20(sp)
    10a4:	dcc00315 	stw	r19,12(sp)
    10a8:	dc800215 	stw	r18,8(sp)
    10ac:	dc400115 	stw	r17,4(sp)
    10b0:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    10b4:	05800084 	movi	r22,2
    10b8:	05004034 	movhi	r20,256
    10bc:	a5841a2d 	sthio	r22,4200(r20)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    10c0:	a4841804 	addi	r18,r20,4192
    10c4:	00800a04 	movi	r2,40
    10c8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
    10cc:	04000284 	movi	r16,10
    10d0:	8009883a 	mov	r4,r16
    10d4:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    10d8:	07000444 	movi	fp,17
    10dc:	9700002d 	sthio	fp,0(r18)
	usleep(10);
    10e0:	8009883a 	mov	r4,r16
    10e4:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    10e8:	0027883a 	mov	r19,zero
    10ec:	a4441904 	addi	r17,r20,4196
    10f0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    10f4:	8009883a 	mov	r4,r16
    10f8:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    10fc:	00c032c4 	movi	r3,203
    1100:	90c0002d 	sthio	r3,0(r18)
	usleep(10);
    1104:	8009883a 	mov	r4,r16
    1108:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    110c:	01000e44 	movi	r4,57
    1110:	8900002d 	sthio	r4,0(r17)
	usleep(10);
    1114:	8009883a 	mov	r4,r16
    1118:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    111c:	01400b04 	movi	r5,44
    1120:	8940002d 	sthio	r5,0(r17)
	usleep(10);
    1124:	8009883a 	mov	r4,r16
    1128:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    112c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    1130:	8009883a 	mov	r4,r16
    1134:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1138:	01800d04 	movi	r6,52
    113c:	8980002d 	sthio	r6,0(r17)
	usleep(10);
    1140:	8009883a 	mov	r4,r16
    1144:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1148:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
    114c:	8009883a 	mov	r4,r16
    1150:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1154:	01c033c4 	movi	r7,207
    1158:	91c0002d 	sthio	r7,0(r18)
	usleep(10);
    115c:	8009883a 	mov	r4,r16
    1160:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1164:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    1168:	8009883a 	mov	r4,r16
    116c:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1170:	05c02044 	movi	r23,129
    1174:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
    1178:	8009883a 	mov	r4,r16
    117c:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1180:	02000c04 	movi	r8,48
    1184:	8a00002d 	sthio	r8,0(r17)
	usleep(10);
    1188:	8009883a 	mov	r4,r16
    118c:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1190:	02403a04 	movi	r9,232
    1194:	9240002d 	sthio	r9,0(r18)
	usleep(10);
    1198:	8009883a 	mov	r4,r16
    119c:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11a0:	02802144 	movi	r10,133
    11a4:	8a80002d 	sthio	r10,0(r17)
	usleep(10);
    11a8:	8009883a 	mov	r4,r16
    11ac:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11b0:	05400044 	movi	r21,1
    11b4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
    11b8:	8009883a 	mov	r4,r16
    11bc:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11c0:	02c01e44 	movi	r11,121
    11c4:	8ac0002d 	sthio	r11,0(r17)
	usleep(10);
    11c8:	8009883a 	mov	r4,r16
    11cc:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    11d0:	03003a84 	movi	r12,234
    11d4:	9300002d 	sthio	r12,0(r18)
	usleep(10);
    11d8:	8009883a 	mov	r4,r16
    11dc:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11e0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    11e4:	8009883a 	mov	r4,r16
    11e8:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11ec:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    11f0:	8009883a 	mov	r4,r16
    11f4:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    11f8:	03401904 	movi	r13,100
    11fc:	8b40002d 	sthio	r13,0(r17)
	usleep(10);
    1200:	8009883a 	mov	r4,r16
    1204:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1208:	038000c4 	movi	r14,3
    120c:	8b80002d 	sthio	r14,0(r17)
	usleep(10);
    1210:	8009883a 	mov	r4,r16
    1214:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1218:	03c00484 	movi	r15,18
    121c:	8bc0002d 	sthio	r15,0(r17)
	usleep(10);
    1220:	8009883a 	mov	r4,r16
    1224:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1228:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
    122c:	8009883a 	mov	r4,r16
    1230:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1234:	00803dc4 	movi	r2,247
    1238:	9080002d 	sthio	r2,0(r18)
	usleep(10);
    123c:	8009883a 	mov	r4,r16
    1240:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1244:	00c00804 	movi	r3,32
    1248:	88c0002d 	sthio	r3,0(r17)
	usleep(10);
    124c:	8009883a 	mov	r4,r16
    1250:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1254:	01003004 	movi	r4,192
    1258:	9100002d 	sthio	r4,0(r18)
	usleep(10);
    125c:	8009883a 	mov	r4,r16
    1260:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1264:	05c00984 	movi	r23,38
    1268:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
    126c:	8009883a 	mov	r4,r16
    1270:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1274:	01400104 	movi	r5,4
    1278:	8940002d 	sthio	r5,0(r17)
	usleep(10);
    127c:	8009883a 	mov	r4,r16
    1280:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1284:	01803044 	movi	r6,193
    1288:	9180002d 	sthio	r6,0(r18)
	usleep(10);
    128c:	8009883a 	mov	r4,r16
    1290:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1294:	8f00002d 	sthio	fp,0(r17)
	usleep(10);
    1298:	8009883a 	mov	r4,r16
    129c:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    12a0:	07003144 	movi	fp,197
    12a4:	9700002d 	sthio	fp,0(r18)
	usleep(10);
    12a8:	8009883a 	mov	r4,r16
    12ac:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    12b0:	01c00d44 	movi	r7,53
    12b4:	89c0002d 	sthio	r7,0(r17)
	usleep(10);
    12b8:	8009883a 	mov	r4,r16
    12bc:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    12c0:	02000f84 	movi	r8,62
    12c4:	8a00002d 	sthio	r8,0(r17)
	usleep(10);
    12c8:	8009883a 	mov	r4,r16
    12cc:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    12d0:	024031c4 	movi	r9,199
    12d4:	9240002d 	sthio	r9,0(r18)
	usleep(10);
    12d8:	8009883a 	mov	r4,r16
    12dc:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    12e0:	02802f84 	movi	r10,190
    12e4:	8a80002d 	sthio	r10,0(r17)
	usleep(10);
    12e8:	8009883a 	mov	r4,r16
    12ec:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    12f0:	02c02c44 	movi	r11,177
    12f4:	92c0002d 	sthio	r11,0(r18)
	usleep(10);
    12f8:	8009883a 	mov	r4,r16
    12fc:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1300:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    1304:	8009883a 	mov	r4,r16
    1308:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    130c:	03000404 	movi	r12,16
    1310:	8b00002d 	sthio	r12,0(r17)
	usleep(10);
    1314:	8009883a 	mov	r4,r16
    1318:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    131c:	03400e84 	movi	r13,58
    1320:	9340002d 	sthio	r13,0(r18)
	usleep(10);
    1324:	8009883a 	mov	r4,r16
    1328:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    132c:	03801544 	movi	r14,85
    1330:	8b80002d 	sthio	r14,0(r17)
	usleep(10);
    1334:	8009883a 	mov	r4,r16
    1338:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    133c:	03c02d84 	movi	r15,182
    1340:	93c0002d 	sthio	r15,0(r18)
	usleep(10);
    1344:	8009883a 	mov	r4,r16
    1348:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    134c:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
    1350:	8009883a 	mov	r4,r16
    1354:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1358:	00802884 	movi	r2,162
    135c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
    1360:	8009883a 	mov	r4,r16
    1364:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1368:	00c03c84 	movi	r3,242
    136c:	90c0002d 	sthio	r3,0(r18)
	usleep(10);
    1370:	8009883a 	mov	r4,r16
    1374:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1378:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
    137c:	8009883a 	mov	r4,r16
    1380:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1384:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
    1388:	8009883a 	mov	r4,r16
    138c:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1390:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
    1394:	8009883a 	mov	r4,r16
    1398:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    139c:	05800d84 	movi	r22,54
    13a0:	9580002d 	sthio	r22,0(r18)
	usleep(10);
    13a4:	8009883a 	mov	r4,r16
    13a8:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    13ac:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    13b0:	8009883a 	mov	r4,r16
    13b4:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    13b8:	01000a84 	movi	r4,42
    13bc:	9100002d 	sthio	r4,0(r18)
	usleep(10);
    13c0:	8009883a 	mov	r4,r16
    13c4:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    13c8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    13cc:	8009883a 	mov	r4,r16
    13d0:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    13d4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    13d8:	8009883a 	mov	r4,r16
    13dc:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    13e0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    13e4:	8009883a 	mov	r4,r16
    13e8:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    13ec:	05c03bc4 	movi	r23,239
    13f0:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
    13f4:	8009883a 	mov	r4,r16
    13f8:	000f0440 	call	f044 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    13fc:	01400ac4 	movi	r5,43
    1400:	9140002d 	sthio	r5,0(r18)
	usleep(10);
    1404:	8009883a 	mov	r4,r16
    1408:	000f0440 	call	f044 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    140c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    1410:	8009883a 	mov	r4,r16
    1414:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1418:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    141c:	8009883a 	mov	r4,r16
    1420:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1424:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
    1428:	8009883a 	mov	r4,r16
    142c:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1430:	04c00fc4 	movi	r19,63
    1434:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
    1438:	8009883a 	mov	r4,r16
    143c:	000f0440 	call	f044 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    1440:	04403c04 	movi	r17,240
    1444:	a4441d35 	stwio	r17,4212(r20)
	LCD_width = 240;
	LCD_height = 320;
    1448:	05005004 	movi	r20,320
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
	LCD_width = 240;
    144c:	d467118d 	sth	r17,-25530(gp)
	LCD_height = 320;
    1450:	d527110d 	sth	r20,-25532(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    1454:	05400a44 	movi	r21,41
    1458:	9540002d 	sthio	r21,0(r18)
	usleep(10);
    145c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
    1460:	dfc00917 	ldw	ra,36(sp)
    1464:	df000817 	ldw	fp,32(sp)
    1468:	ddc00717 	ldw	r23,28(sp)
    146c:	dd800617 	ldw	r22,24(sp)
    1470:	dd400517 	ldw	r21,20(sp)
    1474:	dd000417 	ldw	r20,16(sp)
    1478:	dcc00317 	ldw	r19,12(sp)
    147c:	dc800217 	ldw	r18,8(sp)
    1480:	dc400117 	ldw	r17,4(sp)
    1484:	dc000017 	ldw	r16,0(sp)
    1488:	dec00a04 	addi	sp,sp,40
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
    148c:	000f0441 	jmpi	f044 <usleep>

00001490 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    1490:	defff804 	addi	sp,sp,-32
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1494:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    1498:	dd400515 	stw	r21,20(sp)
    149c:	dfc00715 	stw	ra,28(sp)
    14a0:	dd800615 	stw	r22,24(sp)
    14a4:	dd000415 	stw	r20,16(sp)
    14a8:	dcc00315 	stw	r19,12(sp)
    14ac:	dc800215 	stw	r18,8(sp)
    14b0:	dc400115 	stw	r17,4(sp)
    14b4:	dc000015 	stw	r16,0(sp)
    14b8:	202b883a 	mov	r21,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    14bc:	10c41e04 	addi	r3,r2,4216
    14c0:	19400035 	stwio	r5,0(r3)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
    14c4:	01004034 	movhi	r4,256
    14c8:	21c41804 	addi	r7,r4,4192
    14cc:	02000b04 	movi	r8,44
    14d0:	3a00002d 	sthio	r8,0(r7)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    14d4:	29a7383a 	mul	r19,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
    14d8:	01000284 	movi	r4,10
    14dc:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    14e0:	98006526 	beq	r19,zero,1678 <transfer_LCD_no_dma+0x1e8>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    14e4:	a940000b 	ldhu	r5,0(r21)
    14e8:	9d3fffc4 	addi	r20,r19,-1
    14ec:	04804034 	movhi	r18,256
    14f0:	94841904 	addi	r18,r18,4196
    14f4:	a50001cc 	andi	r20,r20,7
    14f8:	9140002d 	sthio	r5,0(r18)
	usleep(10);
    14fc:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1500:	04400044 	movi	r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
    1504:	000f0440 	call	f044 <usleep>
    1508:	ac000084 	addi	r16,r21,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    150c:	8cc05a26 	beq	r17,r19,1678 <transfer_LCD_no_dma+0x1e8>
    1510:	a0003626 	beq	r20,zero,15ec <transfer_LCD_no_dma+0x15c>
    1514:	a4402e26 	beq	r20,r17,15d0 <transfer_LCD_no_dma+0x140>
    1518:	05800084 	movi	r22,2
    151c:	a5802626 	beq	r20,r22,15b8 <transfer_LCD_no_dma+0x128>
    1520:	018000c4 	movi	r6,3
    1524:	a1801e26 	beq	r20,r6,15a0 <transfer_LCD_no_dma+0x110>
    1528:	02400104 	movi	r9,4
    152c:	a2401626 	beq	r20,r9,1588 <transfer_LCD_no_dma+0xf8>
    1530:	02800144 	movi	r10,5
    1534:	a2800e26 	beq	r20,r10,1570 <transfer_LCD_no_dma+0xe0>
    1538:	02c00184 	movi	r11,6
    153c:	a2c00626 	beq	r20,r11,1558 <transfer_LCD_no_dma+0xc8>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1540:	8300000b 	ldhu	r12,0(r16)
    1544:	9300002d 	sthio	r12,0(r18)
	usleep(10);
    1548:	01000284 	movi	r4,10
    154c:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1550:	b023883a 	mov	r17,r22
    1554:	ac000104 	addi	r16,r21,4
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1558:	8340000b 	ldhu	r13,0(r16)
    155c:	9340002d 	sthio	r13,0(r18)
	usleep(10);
    1560:	01000284 	movi	r4,10
    1564:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1568:	8c400044 	addi	r17,r17,1
    156c:	84000084 	addi	r16,r16,2
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1570:	8380000b 	ldhu	r14,0(r16)
    1574:	9380002d 	sthio	r14,0(r18)
	usleep(10);
    1578:	01000284 	movi	r4,10
    157c:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1580:	8c400044 	addi	r17,r17,1
    1584:	84000084 	addi	r16,r16,2
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    1588:	83c0000b 	ldhu	r15,0(r16)
    158c:	93c0002d 	sthio	r15,0(r18)
	usleep(10);
    1590:	01000284 	movi	r4,10
    1594:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1598:	8c400044 	addi	r17,r17,1
    159c:	84000084 	addi	r16,r16,2
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    15a0:	87c0000b 	ldhu	ra,0(r16)
    15a4:	97c0002d 	sthio	ra,0(r18)
	usleep(10);
    15a8:	01000284 	movi	r4,10
    15ac:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    15b0:	8c400044 	addi	r17,r17,1
    15b4:	84000084 	addi	r16,r16,2
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    15b8:	8540000b 	ldhu	r21,0(r16)
    15bc:	9540002d 	sthio	r21,0(r18)
	usleep(10);
    15c0:	01000284 	movi	r4,10
    15c4:	000f0440 	call	f044 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    15c8:	8c400044 	addi	r17,r17,1
    15cc:	84000084 	addi	r16,r16,2
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    15d0:	8080000b 	ldhu	r2,0(r16)
    15d4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
    15d8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    15dc:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
    15e0:	000f0440 	call	f044 <usleep>
    15e4:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    15e8:	8cc02326 	beq	r17,r19,1678 <transfer_LCD_no_dma+0x1e8>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    15ec:	80c0000b 	ldhu	r3,0(r16)
    15f0:	90c0002d 	sthio	r3,0(r18)
	usleep(10);
    15f4:	01000284 	movi	r4,10
    15f8:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    15fc:	8100008b 	ldhu	r4,2(r16)
    1600:	9100002d 	sthio	r4,0(r18)
	usleep(10);
    1604:	01000284 	movi	r4,10
    1608:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    160c:	81c0010b 	ldhu	r7,4(r16)
    1610:	91c0002d 	sthio	r7,0(r18)
	usleep(10);
    1614:	01000284 	movi	r4,10
    1618:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    161c:	8200018b 	ldhu	r8,6(r16)
    1620:	9200002d 	sthio	r8,0(r18)
	usleep(10);
    1624:	01000284 	movi	r4,10
    1628:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    162c:	8140020b 	ldhu	r5,8(r16)
    1630:	9140002d 	sthio	r5,0(r18)
	usleep(10);
    1634:	01000284 	movi	r4,10
    1638:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    163c:	8500028b 	ldhu	r20,10(r16)
    1640:	9500002d 	sthio	r20,0(r18)
	usleep(10);
    1644:	01000284 	movi	r4,10
    1648:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    164c:	8580030b 	ldhu	r22,12(r16)
    1650:	9580002d 	sthio	r22,0(r18)
	usleep(10);
    1654:	01000284 	movi	r4,10
    1658:	000f0440 	call	f044 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
    165c:	8180038b 	ldhu	r6,14(r16)
    1660:	9180002d 	sthio	r6,0(r18)
	usleep(10);
    1664:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1668:	8c400204 	addi	r17,r17,8
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
    166c:	000f0440 	call	f044 <usleep>
    1670:	84000404 	addi	r16,r16,16
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    1674:	8cffdd1e 	bne	r17,r19,15ec <__alt_data_end+0xff0015ec>
		LCD_Write_Data(data_array[pixels]);
}
    1678:	dfc00717 	ldw	ra,28(sp)
    167c:	dd800617 	ldw	r22,24(sp)
    1680:	dd400517 	ldw	r21,20(sp)
    1684:	dd000417 	ldw	r20,16(sp)
    1688:	dcc00317 	ldw	r19,12(sp)
    168c:	dc800217 	ldw	r18,8(sp)
    1690:	dc400117 	ldw	r17,4(sp)
    1694:	dc000017 	ldw	r16,0(sp)
    1698:	dec00804 	addi	sp,sp,32
    169c:	f800283a 	ret

000016a0 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    16a0:	d0a7110b 	ldhu	r2,-25532(gp)
    16a4:	3080010e 	bge	r6,r2,16ac <transfer_LCD_with_dma+0xc>
    16a8:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    16ac:	d0e7118b 	ldhu	r3,-25530(gp)
    16b0:	28c0010e 	bge	r5,r3,16b8 <transfer_LCD_with_dma+0x18>
    16b4:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    16b8:	01804034 	movhi	r6,256
    16bc:	32041e04 	addi	r8,r6,4216
    16c0:	41400035 	stwio	r5,0(r8)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    16c4:	01404034 	movhi	r5,256
    16c8:	2a441b04 	addi	r9,r5,4204
    16cc:	49000035 	stwio	r4,0(r9)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    16d0:	193fffcc 	andi	r4,r3,65535
    16d4:	12bfffcc 	andi	r10,r2,65535
    16d8:	2297383a 	mul	r11,r4,r10
    16dc:	03004034 	movhi	r12,256
    16e0:	63441c04 	addi	r13,r12,4208
    16e4:	6ac00035 	stwio	r11,0(r13)
	if (grayscale==0)
    16e8:	39c03fcc 	andi	r7,r7,255
    16ec:	3b80201c 	xori	r14,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    16f0:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
    16f4:	73ffe004 	addi	r15,r14,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    16f8:	11841a04 	addi	r6,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
    16fc:	78000326 	beq	r15,zero,170c <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    1700:	00c04404 	movi	r3,272
    1704:	30c0002d 	sthio	r3,0(r6)
    1708:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    170c:	02004004 	movi	r8,256
    1710:	3200002d 	sthio	r8,0(r6)
    1714:	f800283a 	ret

00001718 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
    1718:	defff804 	addi	sp,sp,-32
    171c:	dfc00715 	stw	ra,28(sp)
    1720:	dd800615 	stw	r22,24(sp)
    1724:	dd400515 	stw	r21,20(sp)
    1728:	dd000415 	stw	r20,16(sp)
    172c:	dcc00315 	stw	r19,12(sp)
    1730:	dc800215 	stw	r18,8(sp)
    1734:	dc400115 	stw	r17,4(sp)
    1738:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
    173c:	00010880 	call	1088 <init_LCD>
  init_camera();
    1740:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1744:	01000604 	movi	r4,24
    1748:	0001e640 	call	1e64 <vga_set_swap>
  printf("Hello from Nios II!\n");
    174c:	01000074 	movhi	r4,1
    1750:	21063b04 	addi	r4,r4,6380
    1754:	000337c0 	call	337c <puts>
  cam_get_profiling();
    1758:	00008d40 	call	8d4 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    175c:	000088c0 	call	88c <cam_get_xsize>
    1760:	1021883a 	mov	r16,r2
    1764:	00008b00 	call	8b0 <cam_get_ysize>
    1768:	80ffffcc 	andi	r3,r16,65535
    176c:	10bfffcc 	andi	r2,r2,65535
    1770:	1889383a 	mul	r4,r3,r2
    1774:	05000074 	movhi	r20,1
    1778:	a5071b04 	addi	r20,r20,7276
    177c:	0002a1c0 	call	2a1c <malloc>
    1780:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1784:	000088c0 	call	88c <cam_get_xsize>
    1788:	1023883a 	mov	r17,r2
    178c:	00008b00 	call	8b0 <cam_get_ysize>
    1790:	89bfffcc 	andi	r6,r17,65535
    1794:	117fffcc 	andi	r5,r2,65535
    1798:	3149383a 	mul	r4,r6,r5
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    179c:	04e04414 	movui	r19,33040
		      end_global = alt_timestamp();
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    17a0:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    17a4:	0002a1c0 	call	2a1c <malloc>
    17a8:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    17ac:	000088c0 	call	88c <cam_get_xsize>
    17b0:	1021883a 	mov	r16,r2
    17b4:	00008b00 	call	8b0 <cam_get_ysize>
    17b8:	823fffcc 	andi	r8,r16,65535
    17bc:	11ffffcc 	andi	r7,r2,65535
    17c0:	41c9383a 	mul	r4,r8,r7
    17c4:	0002a1c0 	call	2a1c <malloc>
    17c8:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    17cc:	000088c0 	call	88c <cam_get_xsize>
    17d0:	1021883a 	mov	r16,r2
    17d4:	00008b00 	call	8b0 <cam_get_ysize>
    17d8:	82bfffcc 	andi	r10,r16,65535
    17dc:	127fffcc 	andi	r9,r2,65535
    17e0:	5249383a 	mul	r4,r10,r9
    17e4:	0002a1c0 	call	2a1c <malloc>
  cam_set_image_pointer(0,buffer1);
    17e8:	b00b883a 	mov	r5,r22
    17ec:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    17f0:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    17f4:	000094c0 	call	94c <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    17f8:	a80b883a 	mov	r5,r21
    17fc:	01000044 	movi	r4,1
    1800:	000094c0 	call	94c <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1804:	880b883a 	mov	r5,r17
    1808:	01000084 	movi	r4,2
    180c:	000094c0 	call	94c <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1810:	800b883a 	mov	r5,r16
    1814:	010000c4 	movi	r4,3
    1818:	000094c0 	call	94c <cam_set_image_pointer>
  enable_continues_mode();
    181c:	0000a040 	call	a04 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1820:	000088c0 	call	88c <cam_get_xsize>
    1824:	102d883a 	mov	r22,r2
    1828:	00008b00 	call	8b0 <cam_get_ysize>
    182c:	b2ffffcc 	andi	r11,r22,65535
    1830:	5818d07a 	srli	r12,r11,1
    1834:	137fffcc 	andi	r13,r2,65535
    1838:	6363383a 	mul	r17,r12,r13

	#ifdef LOAD_SOBEL
	  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    183c:	000088c0 	call	88c <cam_get_xsize>
    1840:	102b883a 	mov	r21,r2
    1844:	00008b00 	call	8b0 <cam_get_ysize>
    1848:	abbfffcc 	andi	r14,r21,65535
    184c:	7008d07a 	srli	r4,r14,1
    1850:	117fffcc 	andi	r5,r2,65535
    1854:	0001a800 	call	1a80 <init_sobel_arrays>
	#endif
	#ifdef LOAD_GRAYSCALE
	  conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
    1858:	000088c0 	call	88c <cam_get_xsize>
    185c:	1021883a 	mov	r16,r2
    1860:	00008b00 	call	8b0 <cam_get_ysize>
    1864:	83ffffcc 	andi	r15,r16,65535
    1868:	7808d07a 	srli	r4,r15,1
    186c:	117fffcc 	andi	r5,r2,65535
    1870:	0000c540 	call	c54 <conv_grayscale_init>
	#ifdef LOAD_SOBEL_ALL
	  sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());
	#endif

  do {
	  if (new_image_available() != 0) {
    1874:	0000a180 	call	a18 <new_image_available>
    1878:	11003fcc 	andi	r4,r2,255
    187c:	2080201c 	xori	r2,r4,128
    1880:	10ffe004 	addi	r3,r2,-128
    1884:	183ffb26 	beq	r3,zero,1874 <__alt_data_end+0xff001874>
		  if (current_image_valid()!=0) {
    1888:	00009c00 	call	9c0 <current_image_valid>
    188c:	117fffcc 	andi	r5,r2,65535
    1890:	29a0001c 	xori	r6,r5,32768
    1894:	31e00004 	addi	r7,r6,-32768
    1898:	383ff626 	beq	r7,zero,1874 <__alt_data_end+0xff001874>

			  alt_timestamp_start();
    189c:	000fdec0 	call	fdec <alt_timestamp_start>

			  start_global = alt_timestamp();
    18a0:	000fe640 	call	fe64 <alt_timestamp>
    18a4:	d0a71315 	stw	r2,-25524(gp)
			  current_mode = DIPSW_get_value();
    18a8:	0000a440 	call	a44 <DIPSW_get_value>
    18ac:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    18b0:	00009d40 	call	9d4 <current_image_pointer>
		      switch (mode) {
    18b4:	820001cc 	andi	r8,r16,7
			  alt_timestamp_start();

			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    18b8:	102b883a 	mov	r21,r2
		      switch (mode) {
    18bc:	4000421e 	bne	r8,zero,19c8 <main+0x2b0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    18c0:	000088c0 	call	88c <cam_get_xsize>
    18c4:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    18c8:	00008b00 	call	8b0 <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    18cc:	b37fffcc 	andi	r13,r22,65535
    18d0:	680ad07a 	srli	r5,r13,1
    18d4:	acc9883a 	add	r4,r21,r19
    18d8:	000f883a 	mov	r7,zero
    18dc:	11bfffcc 	andi	r6,r2,65535
    18e0:	00016a00 	call	16a0 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    18e4:	83803fcc 	andi	r14,r16,255
    18e8:	73c0201c 	xori	r15,r14,128
    18ec:	793fe004 	addi	r4,r15,-128
    18f0:	20005c16 	blt	r4,zero,1a64 <main+0x34c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    18f4:	000fe640 	call	fe64 <alt_timestamp>
    18f8:	d0a71215 	stw	r2,-25528(gp)
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    18fc:	d1671617 	ldw	r5,-25512(gp)
    1900:	d0a71717 	ldw	r2,-25508(gp)
    1904:	00c00074 	movhi	r3,1
    1908:	19064004 	addi	r4,r3,6400
    190c:	288bc83a 	sub	r5,r5,r2
    1910:	00032800 	call	3280 <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1914:	d1e71917 	ldw	r7,-25500(gp)
    1918:	d4271817 	ldw	r16,-25504(gp)
    191c:	01800074 	movhi	r6,1
    1920:	31064504 	addi	r4,r6,6420
    1924:	81cbc83a 	sub	r5,r16,r7
    1928:	00032800 	call	3280 <printf>
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    192c:	d2271517 	ldw	r8,-25516(gp)
    1930:	d5671417 	ldw	r21,-25520(gp)
    1934:	aa2dc83a 	sub	r22,r21,r8
    1938:	b452b03a 	or	r9,r22,r17
    193c:	92401d36 	bltu	r18,r9,19b4 <main+0x29c>
    1940:	b03e913a 	slli	ra,r22,4
    1944:	fc54b03a 	or	r10,ra,r17
    1948:	5517883a 	add	r11,r10,r20
    194c:	59800003 	ldbu	r6,0(r11)
    1950:	03000074 	movhi	r12,1
    1954:	61064804 	addi	r4,r12,6432
    1958:	b00b883a 	mov	r5,r22
    195c:	00032800 	call	3280 <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_FREQ));
    1960:	d3671317 	ldw	r13,-25524(gp)
    1964:	d3a71217 	ldw	r14,-25528(gp)
    1968:	7349c83a 	sub	r4,r14,r13
    196c:	00029100 	call	2910 <__floatunsidf>
    1970:	03d06234 	movhi	r15,16776
    1974:	79f5e104 	addi	r7,r15,-10364
    1978:	1009883a 	mov	r4,r2
    197c:	180b883a 	mov	r5,r3
    1980:	000d883a 	mov	r6,zero
    1984:	00020280 	call	2028 <__divdf3>
    1988:	100d883a 	mov	r6,r2
    198c:	180f883a 	mov	r7,r3
    1990:	0009883a 	mov	r4,zero
    1994:	014ffc34 	movhi	r5,16368
    1998:	00020280 	call	2028 <__divdf3>
    199c:	01000074 	movhi	r4,1
    19a0:	100b883a 	mov	r5,r2
    19a4:	180d883a 	mov	r6,r3
    19a8:	21065204 	addi	r4,r4,6472
    19ac:	00032800 	call	3280 <printf>
    19b0:	003fb006 	br	1874 <__alt_data_end+0xff001874>
		      end_global = alt_timestamp();
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    19b4:	880b883a 	mov	r5,r17
    19b8:	b009883a 	mov	r4,r22
    19bc:	0001e740 	call	1e74 <__divsi3>
    19c0:	100d883a 	mov	r6,r2
    19c4:	003fe206 	br	1950 <__alt_data_end+0xff001950>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    19c8:	000fe640 	call	fe64 <alt_timestamp>
    19cc:	d0a71515 	stw	r2,-25516(gp)

						#if defined(LOAD_SOBEL) && defined(LOAD_GRAYSCALE)
						#if defined(LOAD_SOBEL_COMPLETE)
		    	  	   start_conv_grayscale = alt_timestamp();
    19d0:	000fe640 	call	fe64 <alt_timestamp>
		    	  	   conv_grayscale((void *)image);
    19d4:	a809883a 	mov	r4,r21
		      default:
		    	  	   start_all = alt_timestamp();

						#if defined(LOAD_SOBEL) && defined(LOAD_GRAYSCALE)
						#if defined(LOAD_SOBEL_COMPLETE)
		    	  	   start_conv_grayscale = alt_timestamp();
    19d8:	d0a71715 	stw	r2,-25508(gp)
		    	  	   conv_grayscale((void *)image);
    19dc:	0000a580 	call	a58 <conv_grayscale>
		    	  	   end_conv_grayscale = alt_timestamp();
    19e0:	000fe640 	call	fe64 <alt_timestamp>
    19e4:	d0a71615 	stw	r2,-25512(gp)

                       grayscale = get_grayscale_picture();
    19e8:	0000ce40 	call	ce4 <get_grayscale_picture>
    19ec:	102d883a 	mov	r22,r2

                       start_sobel = alt_timestamp();
    19f0:	000fe640 	call	fe64 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    19f4:	b009883a 	mov	r4,r22
    19f8:	01402004 	movi	r5,128
		    	  	   conv_grayscale((void *)image);
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    19fc:	d0a71915 	stw	r2,-25500(gp)
                       sobel_complete(grayscale, 128);
    1a00:	0001c0c0 	call	1c0c <sobel_complete>
                       end_sobel = alt_timestamp();
    1a04:	000fe640 	call	fe64 <alt_timestamp>
    1a08:	d0a71815 	stw	r2,-25504(gp)

						#ifdef LOAD_SOBEL_ALL_FUSION
							sobel_all_complete_fusion((void *)image);
						#endif

                       end_all = alt_timestamp();
    1a0c:	000fe640 	call	fe64 <alt_timestamp>
    1a10:	d0a71415 	stw	r2,-25520(gp)

						#ifdef LOAD_GRAYSCALE
                       	   grayscale=GetSobelResult();
    1a14:	0001a780 	call	1a78 <GetSobelResult>
    1a18:	102d883a 	mov	r22,r2
						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1a1c:	000088c0 	call	88c <cam_get_xsize>
    1a20:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    1a24:	00008b00 	call	8b0 <cam_get_ysize>

						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
    1a28:	aa7fffcc 	andi	r9,r21,65535
    1a2c:	480ad07a 	srli	r5,r9,1
    1a30:	01c00044 	movi	r7,1
    1a34:	11bfffcc 	andi	r6,r2,65535
    1a38:	b1102204 	addi	r4,r22,16520
    1a3c:	00016a00 	call	16a0 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1a40:	82803fcc 	andi	r10,r16,255
    1a44:	52c0201c 	xori	r11,r10,128
    1a48:	5b3fe004 	addi	r12,r11,-128
    1a4c:	603fa90e 	bge	r12,zero,18f4 <__alt_data_end+0xff0018f4>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1a50:	01000604 	movi	r4,24
    1a54:	0001e640 	call	1e64 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1a58:	b009883a 	mov	r4,r22
    1a5c:	0001e540 	call	1e54 <vga_set_pointer>
    1a60:	003fa406 	br	18f4 <__alt_data_end+0xff0018f4>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1a64:	01000204 	movi	r4,8
    1a68:	0001e640 	call	1e64 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1a6c:	a809883a 	mov	r4,r21
    1a70:	0001e540 	call	1e54 <vga_set_pointer>
    1a74:	003f9f06 	br	18f4 <__alt_data_end+0xff0018f4>

00001a78 <GetSobelResult>:
int sobel_width;
int sobel_height;

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1a78:	d0a71b17 	ldw	r2,-25492(gp)
    1a7c:	f800283a 	ret

00001a80 <init_sobel_arrays>:
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    1a80:	defffe04 	addi	sp,sp,-8
    1a84:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1a88:	2161383a 	mul	r16,r4,r5
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    1a8c:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1a90:	01000074 	movhi	r4,1
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    1a94:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1a98:	21065604 	addi	r4,r4,6488
    1a9c:	280d883a 	mov	r6,r5
    1aa0:	800f883a 	mov	r7,r16
    1aa4:	180b883a 	mov	r5,r3
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    1aa8:	dfc00115 	stw	ra,4(sp)
	int loop;
	sobel_width = width;
    1aac:	d0e71a15 	stw	r3,-25496(gp)
	sobel_height = height;
    1ab0:	d0a71c15 	stw	r2,-25488(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1ab4:	00032800 	call	3280 <printf>
	if (sobel_result != NULL)
    1ab8:	d1271b17 	ldw	r4,-25492(gp)
    1abc:	20000126 	beq	r4,zero,1ac4 <init_sobel_arrays+0x44>
		free(sobel_result);
    1ac0:	0002a300 	call	2a30 <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1ac4:	8009883a 	mov	r4,r16
    1ac8:	000efcc0 	call	efcc <alt_uncached_malloc>
    1acc:	d0a71b15 	stw	r2,-25492(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1ad0:	04004a0e 	bge	zero,r16,1bfc <init_sobel_arrays+0x17c>
    1ad4:	040bc83a 	sub	r5,zero,r16
    1ad8:	014c303a 	nor	r6,zero,r5
    1adc:	31c001cc 	andi	r7,r6,7
    1ae0:	0007883a 	mov	r3,zero
    1ae4:	38004126 	beq	r7,zero,1bec <init_sobel_arrays+0x16c>
		sobel_result[loop] = 0;
    1ae8:	10000005 	stb	zero,0(r2)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1aec:	00c00044 	movi	r3,1
    1af0:	d0a71b17 	ldw	r2,-25492(gp)
    1af4:	38c03d26 	beq	r7,r3,1bec <init_sobel_arrays+0x16c>
    1af8:	02000084 	movi	r8,2
    1afc:	3a001c26 	beq	r7,r8,1b70 <init_sobel_arrays+0xf0>
    1b00:	024000c4 	movi	r9,3
    1b04:	3a401626 	beq	r7,r9,1b60 <init_sobel_arrays+0xe0>
    1b08:	02800104 	movi	r10,4
    1b0c:	3a801026 	beq	r7,r10,1b50 <init_sobel_arrays+0xd0>
    1b10:	02c00144 	movi	r11,5
    1b14:	3ac00a26 	beq	r7,r11,1b40 <init_sobel_arrays+0xc0>
    1b18:	03000184 	movi	r12,6
    1b1c:	3b000426 	beq	r7,r12,1b30 <init_sobel_arrays+0xb0>
		sobel_result[loop] = 0;
    1b20:	10db883a 	add	r13,r2,r3
    1b24:	68000005 	stb	zero,0(r13)
    1b28:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b2c:	4007883a 	mov	r3,r8
		sobel_result[loop] = 0;
    1b30:	10dd883a 	add	r14,r2,r3
    1b34:	70000005 	stb	zero,0(r14)
    1b38:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b3c:	18c00044 	addi	r3,r3,1
		sobel_result[loop] = 0;
    1b40:	10df883a 	add	r15,r2,r3
    1b44:	78000005 	stb	zero,0(r15)
    1b48:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b4c:	18c00044 	addi	r3,r3,1
		sobel_result[loop] = 0;
    1b50:	10ff883a 	add	ra,r2,r3
    1b54:	f8000005 	stb	zero,0(ra)
    1b58:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b5c:	18c00044 	addi	r3,r3,1
		sobel_result[loop] = 0;
    1b60:	10c5883a 	add	r2,r2,r3
    1b64:	10000005 	stb	zero,0(r2)
    1b68:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b6c:	18c00044 	addi	r3,r3,1
		sobel_result[loop] = 0;
    1b70:	10c9883a 	add	r4,r2,r3
    1b74:	20000005 	stb	zero,0(r4)
    1b78:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b7c:	18c00044 	addi	r3,r3,1
    1b80:	19800044 	addi	r6,r3,1
		sobel_result[loop] = 0;
    1b84:	10cb883a 	add	r5,r2,r3
    1b88:	28000005 	stb	zero,0(r5)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1b8c:	81801b26 	beq	r16,r6,1bfc <init_sobel_arrays+0x17c>
    1b90:	d1e71b17 	ldw	r7,-25492(gp)
		sobel_result[loop] = 0;
    1b94:	3991883a 	add	r8,r7,r6
    1b98:	40000005 	stb	zero,0(r8)
    1b9c:	d2671b17 	ldw	r9,-25492(gp)
    1ba0:	48d5883a 	add	r10,r9,r3
    1ba4:	50000085 	stb	zero,2(r10)
    1ba8:	d2e71b17 	ldw	r11,-25492(gp)
    1bac:	58d9883a 	add	r12,r11,r3
    1bb0:	600000c5 	stb	zero,3(r12)
    1bb4:	d3671b17 	ldw	r13,-25492(gp)
    1bb8:	68dd883a 	add	r14,r13,r3
    1bbc:	70000105 	stb	zero,4(r14)
    1bc0:	d3e71b17 	ldw	r15,-25492(gp)
    1bc4:	78ff883a 	add	ra,r15,r3
    1bc8:	f8000145 	stb	zero,5(ra)
    1bcc:	d0a71b17 	ldw	r2,-25492(gp)
    1bd0:	10c9883a 	add	r4,r2,r3
    1bd4:	20000185 	stb	zero,6(r4)
    1bd8:	d1671b17 	ldw	r5,-25492(gp)
    1bdc:	28cd883a 	add	r6,r5,r3
    1be0:	300001c5 	stb	zero,7(r6)
    1be4:	d0a71b17 	ldw	r2,-25492(gp)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1be8:	18c00204 	addi	r3,r3,8
		sobel_result[loop] = 0;
    1bec:	10cb883a 	add	r5,r2,r3
    1bf0:	28000005 	stb	zero,0(r5)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1bf4:	19800044 	addi	r6,r3,1
    1bf8:	81bfe51e 	bne	r16,r6,1b90 <__alt_data_end+0xff001b90>
		sobel_result[loop] = 0;
	}
}
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	dc000017 	ldw	r16,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <sobel_complete>:
		}
}
#endif

#if defined(LOAD_SOBEL_COMPLETE) && defined(LOAD_SOBEL_COMPLETE_ONE_LOOP)
void sobel_complete(unsigned char *source, short threshold){
    1c0c:	defff604 	addi	sp,sp,-40
    1c10:	dc000015 	stw	r16,0(sp)
    1c14:	d3271c17 	ldw	r12,-25488(gp)
		int x,y;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = sobel_width-1;
    1c18:	d4271a17 	ldw	r16,-25496(gp)
    1c1c:	297fffcc 	andi	r5,r5,65535
    1c20:	28a0001c 	xori	r2,r5,32768
		}
}
#endif

#if defined(LOAD_SOBEL_COMPLETE) && defined(LOAD_SOBEL_COMPLETE_ONE_LOOP)
void sobel_complete(unsigned char *source, short threshold){
    1c24:	dfc00915 	stw	ra,36(sp)
    1c28:	dc800215 	stw	r18,8(sp)
    1c2c:	dc400115 	stw	r17,4(sp)
    1c30:	df000815 	stw	fp,32(sp)
    1c34:	ddc00715 	stw	r23,28(sp)
    1c38:	dd800615 	stw	r22,24(sp)
    1c3c:	dd400515 	stw	r21,20(sp)
    1c40:	dd000415 	stw	r20,16(sp)
    1c44:	dcc00315 	stw	r19,12(sp)
		int x,y;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = sobel_width-1;
		for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c48:	07c00044 	movi	ra,1
    1c4c:	633fffc4 	addi	r12,r12,-1

				p3 = *(source+y0);
				p6 = *(source+y1);
				p9 = *(source+y2);

				for (x = 1 ; x < width_len ; x++) {
    1c50:	04400084 	movi	r17,2
    1c54:	11600004 	addi	r5,r2,-32768
    1c58:	84bfffc4 	addi	r18,r16,-1
void sobel_complete(unsigned char *source, short threshold){
		int x,y;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = sobel_width-1;
		for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c5c:	fb00710e 	bge	ra,r12,1e24 <sobel_complete+0x218>
				y0 = (y-1)*sobel_width+1;
    1c60:	d2271a17 	ldw	r8,-25496(gp)
    1c64:	fa7fffc4 	addi	r9,ra,-1
			    y1 = y*sobel_width+1;
    1c68:	fa0d383a 	mul	r6,ra,r8
		int x,y;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = sobel_width-1;
		for (y = 1 ; y < (sobel_height-1) ; y++) {
				y0 = (y-1)*sobel_width+1;
    1c6c:	4a1d383a 	mul	r14,r9,r8
			    y1 = y*sobel_width+1;
			    y2 = (y+1)*sobel_width+1;
    1c70:	ffc00044 	addi	ra,ra,1
    1c74:	41ad883a 	add	r22,r8,r6

				p2 = *(source+y0-1);
    1c78:	72800044 	addi	r10,r14,1
				p5 = *(source+y1-1);
    1c7c:	32c00044 	addi	r11,r6,1
				p8 = *(source+y2-1);
    1c80:	b0c00044 	addi	r3,r22,1
		for (y = 1 ; y < (sobel_height-1) ; y++) {
				y0 = (y-1)*sobel_width+1;
			    y1 = y*sobel_width+1;
			    y2 = (y+1)*sobel_width+1;

				p2 = *(source+y0-1);
    1c84:	229f883a 	add	r15,r4,r10
				p5 = *(source+y1-1);
    1c88:	22db883a 	add	r13,r4,r11
				p8 = *(source+y2-1);
    1c8c:	20eb883a 	add	r21,r4,r3
    1c90:	a8bfffc3 	ldbu	r2,-1(r21)
		for (y = 1 ; y < (sobel_height-1) ; y++) {
				y0 = (y-1)*sobel_width+1;
			    y1 = y*sobel_width+1;
			    y2 = (y+1)*sobel_width+1;

				p2 = *(source+y0-1);
    1c94:	79ffffc3 	ldbu	r7,-1(r15)
				p5 = *(source+y1-1);
    1c98:	6dffffc3 	ldbu	r23,-1(r13)
				p8 = *(source+y2-1);

				p3 = *(source+y0);
    1c9c:	7cc00003 	ldbu	r19,0(r15)
				p6 = *(source+y1);
    1ca0:	6d000003 	ldbu	r20,0(r13)
				p9 = *(source+y2);
    1ca4:	ad400003 	ldbu	r21,0(r21)

				for (x = 1 ; x < width_len ; x++) {
    1ca8:	8c3fec0e 	bge	r17,r16,1c5c <__alt_data_end+0xff001c5c>
    1cac:	919f883a 	add	r15,r18,r6
    1cb0:	5bf9c83a 	sub	fp,r11,r15
    1cb4:	0718303a 	nor	r12,zero,fp
    1cb8:	72400084 	addi	r9,r14,2
    1cbc:	b2000084 	addi	r8,r22,2
    1cc0:	33800084 	addi	r14,r6,2
    1cc4:	6580004c 	andi	r22,r12,1
    1cc8:	2253883a 	add	r9,r4,r9
    1ccc:	2395883a 	add	r10,r4,r14
    1cd0:	2211883a 	add	r8,r4,r8
    1cd4:	b0003726 	beq	r22,zero,1db4 <sobel_complete+0x1a8>
					p2 = p3;
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
    1cd8:	4b800003 	ldbu	r14,0(r9)
					p6 = *(source+yc);
					p9 = *(source+y2+x);
    1cdc:	43400003 	ldbu	r13,0(r8)
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
    1ce0:	53000003 	ldbu	r12,0(r10)
					p9 = *(source+y2+x);

					int a = p1 - p9;
					int b = p3 - p7;
    1ce4:	7085c83a 	sub	r2,r14,r2
					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
					p9 = *(source+y2+x);

					int a = p1 - p9;
    1ce8:	3b4fc83a 	sub	r7,r7,r13
					int b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1cec:	38ad883a 	add	r22,r7,r2
    1cf0:	11c5c83a 	sub	r2,r2,r7
    1cf4:	d1e71b17 	ldw	r7,-25492(gp)
    1cf8:	9d47c83a 	sub	r3,r19,r21
    1cfc:	65efc83a 	sub	r23,r12,r23
    1d00:	18f9883a 	add	fp,r3,r3
    1d04:	bdef883a 	add	r23,r23,r23
    1d08:	e587883a 	add	r3,fp,r22
    1d0c:	3ad7883a 	add	r11,r7,r11
    1d10:	b8b9883a 	add	fp,r23,r2
    1d14:	1f2dc132 	custom	4,r22,r3,fp
    1d18:	b16fc0b2 	custom	2,r23,r22,r5
    1d1c:	5dc00025 	stbio	r23,0(r11)
    1d20:	980f883a 	mov	r7,r19
    1d24:	a02f883a 	mov	r23,r20
    1d28:	a805883a 	mov	r2,r21
    1d2c:	4a400044 	addi	r9,r9,1
    1d30:	52800044 	addi	r10,r10,1
    1d34:	42000044 	addi	r8,r8,1
    1d38:	32c00084 	addi	r11,r6,2
					p2 = p3;
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
    1d3c:	7027883a 	mov	r19,r14
					p6 = *(source+yc);
					p9 = *(source+y2+x);
    1d40:	682b883a 	mov	r21,r13
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
    1d44:	6029883a 	mov	r20,r12
    1d48:	00001a06 	br	1db4 <sobel_complete+0x1a8>
					p2 = p3;
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
    1d4c:	b5c00003 	ldbu	r23,0(r22)
					p6 = *(source+yc);
					p9 = *(source+y2+x);
    1d50:	17000003 	ldbu	fp,0(r2)
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
    1d54:	35800003 	ldbu	r22,0(r6)
					p9 = *(source+y2+x);

					int a = p1 - p9;
					int b = p3 - p7;
    1d58:	bd6bc83a 	sub	r21,r23,r21
					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
					p9 = *(source+y2+x);

					int a = p1 - p9;
    1d5c:	9f27c83a 	sub	r19,r19,fp
					int b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1d60:	9d4d883a 	add	r6,r19,r21
    1d64:	acc5c83a 	sub	r2,r21,r19
    1d68:	d5671b17 	ldw	r21,-25492(gp)
    1d6c:	b529c83a 	sub	r20,r22,r20
    1d70:	a529883a 	add	r20,r20,r20
    1d74:	a9cf883a 	add	r7,r21,r7
    1d78:	1987883a 	add	r3,r3,r6
    1d7c:	a0a7883a 	add	r19,r20,r2
    1d80:	1ccdc132 	custom	4,r6,r3,r19
    1d84:	3169c0b2 	custom	2,r20,r6,r5
    1d88:	3d000025 	stbio	r20,0(r7)
					p2 = p3;
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
    1d8c:	b827883a 	mov	r19,r23
    1d90:	4a400084 	addi	r9,r9,2
    1d94:	52800084 	addi	r10,r10,2
    1d98:	42000084 	addi	r8,r8,2
    1d9c:	5ac00084 	addi	r11,r11,2
    1da0:	680f883a 	mov	r7,r13
    1da4:	702f883a 	mov	r23,r14
    1da8:	6005883a 	mov	r2,r12
					p6 = *(source+yc);
					p9 = *(source+y2+x);
    1dac:	e02b883a 	mov	r21,fp
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
    1db0:	b029883a 	mov	r20,r22
					p2 = p3;
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
    1db4:	4b400003 	ldbu	r13,0(r9)
					p6 = *(source+yc);
					p9 = *(source+y2+x);
    1db8:	43000003 	ldbu	r12,0(r8)
					p5 = p6;
					p8 = p9;

					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
    1dbc:	53800003 	ldbu	r14,0(r10)
					p9 = *(source+y2+x);

					int a = p1 - p9;
					int b = p3 - p7;
    1dc0:	68b9c83a 	sub	fp,r13,r2
					yc = y1+x;
					p3 = *(source+y0+x);
					p6 = *(source+yc);
					p9 = *(source+y2+x);

					int a = p1 - p9;
    1dc4:	3b2dc83a 	sub	r22,r7,r12
					int b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1dc8:	b705883a 	add	r2,r22,fp
    1dcc:	e5b9c83a 	sub	fp,fp,r22
    1dd0:	d5a71b17 	ldw	r22,-25492(gp)
    1dd4:	9d4dc83a 	sub	r6,r19,r21
    1dd8:	75cfc83a 	sub	r7,r14,r23
    1ddc:	3187883a 	add	r3,r6,r6
    1de0:	39ef883a 	add	r23,r7,r7
    1de4:	b2cd883a 	add	r6,r22,r11
    1de8:	188f883a 	add	r7,r3,r2
    1dec:	bf07883a 	add	r3,r23,fp
    1df0:	38c5c132 	custom	4,r2,r7,r3
    1df4:	116fc0b2 	custom	2,r23,r2,r5
    1df8:	35c00025 	stbio	r23,0(r6)
    1dfc:	6b39c83a 	sub	fp,r13,r12
    1e00:	59c00044 	addi	r7,r11,1
    1e04:	e707883a 	add	r3,fp,fp
    1e08:	4d800044 	addi	r22,r9,1
    1e0c:	51800044 	addi	r6,r10,1
    1e10:	40800044 	addi	r2,r8,1

				p3 = *(source+y0);
				p6 = *(source+y1);
				p9 = *(source+y2);

				for (x = 1 ; x < width_len ; x++) {
    1e14:	79ffcd1e 	bne	r15,r7,1d4c <__alt_data_end+0xff001d4c>
    1e18:	d3e71c17 	ldw	r15,-25488(gp)
    1e1c:	7b3fffc4 	addi	r12,r15,-1
void sobel_complete(unsigned char *source, short threshold){
		int x,y;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = sobel_width-1;
		for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e20:	fb3f8f16 	blt	ra,r12,1c60 <__alt_data_end+0xff001c60>
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
							ALT_CI_ABSOLUTE_MULTIPLE_0(a + b + 2 * (p2 - p8),b - a + 2 * (p6 - p4))
							,threshold));
				}
			}
}
    1e24:	dfc00917 	ldw	ra,36(sp)
    1e28:	df000817 	ldw	fp,32(sp)
    1e2c:	ddc00717 	ldw	r23,28(sp)
    1e30:	dd800617 	ldw	r22,24(sp)
    1e34:	dd400517 	ldw	r21,20(sp)
    1e38:	dd000417 	ldw	r20,16(sp)
    1e3c:	dcc00317 	ldw	r19,12(sp)
    1e40:	dc800217 	ldw	r18,8(sp)
    1e44:	dc400117 	ldw	r17,4(sp)
    1e48:	dc000017 	ldw	r16,0(sp)
    1e4c:	dec00a04 	addi	sp,sp,40
    1e50:	f800283a 	ret

00001e54 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1e54:	00804034 	movhi	r2,256
    1e58:	10c43404 	addi	r3,r2,4304
    1e5c:	19000035 	stwio	r4,0(r3)
    1e60:	f800283a 	ret

00001e64 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1e64:	00804034 	movhi	r2,256
    1e68:	10c43504 	addi	r3,r2,4308
    1e6c:	19000025 	stbio	r4,0(r3)
    1e70:	f800283a 	ret

00001e74 <__divsi3>:
    1e74:	20001b16 	blt	r4,zero,1ee4 <__divsi3+0x70>
    1e78:	000f883a 	mov	r7,zero
    1e7c:	28001616 	blt	r5,zero,1ed8 <__divsi3+0x64>
    1e80:	200d883a 	mov	r6,r4
    1e84:	29001a2e 	bgeu	r5,r4,1ef0 <__divsi3+0x7c>
    1e88:	00800804 	movi	r2,32
    1e8c:	00c00044 	movi	r3,1
    1e90:	00000106 	br	1e98 <__divsi3+0x24>
    1e94:	10000d26 	beq	r2,zero,1ecc <__divsi3+0x58>
    1e98:	294b883a 	add	r5,r5,r5
    1e9c:	10bfffc4 	addi	r2,r2,-1
    1ea0:	18c7883a 	add	r3,r3,r3
    1ea4:	293ffb36 	bltu	r5,r4,1e94 <__alt_data_end+0xff001e94>
    1ea8:	0005883a 	mov	r2,zero
    1eac:	18000726 	beq	r3,zero,1ecc <__divsi3+0x58>
    1eb0:	0005883a 	mov	r2,zero
    1eb4:	31400236 	bltu	r6,r5,1ec0 <__divsi3+0x4c>
    1eb8:	314dc83a 	sub	r6,r6,r5
    1ebc:	10c4b03a 	or	r2,r2,r3
    1ec0:	1806d07a 	srli	r3,r3,1
    1ec4:	280ad07a 	srli	r5,r5,1
    1ec8:	183ffa1e 	bne	r3,zero,1eb4 <__alt_data_end+0xff001eb4>
    1ecc:	38000126 	beq	r7,zero,1ed4 <__divsi3+0x60>
    1ed0:	0085c83a 	sub	r2,zero,r2
    1ed4:	f800283a 	ret
    1ed8:	014bc83a 	sub	r5,zero,r5
    1edc:	39c0005c 	xori	r7,r7,1
    1ee0:	003fe706 	br	1e80 <__alt_data_end+0xff001e80>
    1ee4:	0109c83a 	sub	r4,zero,r4
    1ee8:	01c00044 	movi	r7,1
    1eec:	003fe306 	br	1e7c <__alt_data_end+0xff001e7c>
    1ef0:	00c00044 	movi	r3,1
    1ef4:	003fee06 	br	1eb0 <__alt_data_end+0xff001eb0>

00001ef8 <__modsi3>:
    1ef8:	20001716 	blt	r4,zero,1f58 <__modsi3+0x60>
    1efc:	000f883a 	mov	r7,zero
    1f00:	2005883a 	mov	r2,r4
    1f04:	28001216 	blt	r5,zero,1f50 <__modsi3+0x58>
    1f08:	2900162e 	bgeu	r5,r4,1f64 <__modsi3+0x6c>
    1f0c:	01800804 	movi	r6,32
    1f10:	00c00044 	movi	r3,1
    1f14:	00000106 	br	1f1c <__modsi3+0x24>
    1f18:	30000a26 	beq	r6,zero,1f44 <__modsi3+0x4c>
    1f1c:	294b883a 	add	r5,r5,r5
    1f20:	31bfffc4 	addi	r6,r6,-1
    1f24:	18c7883a 	add	r3,r3,r3
    1f28:	293ffb36 	bltu	r5,r4,1f18 <__alt_data_end+0xff001f18>
    1f2c:	18000526 	beq	r3,zero,1f44 <__modsi3+0x4c>
    1f30:	1806d07a 	srli	r3,r3,1
    1f34:	11400136 	bltu	r2,r5,1f3c <__modsi3+0x44>
    1f38:	1145c83a 	sub	r2,r2,r5
    1f3c:	280ad07a 	srli	r5,r5,1
    1f40:	183ffb1e 	bne	r3,zero,1f30 <__alt_data_end+0xff001f30>
    1f44:	38000126 	beq	r7,zero,1f4c <__modsi3+0x54>
    1f48:	0085c83a 	sub	r2,zero,r2
    1f4c:	f800283a 	ret
    1f50:	014bc83a 	sub	r5,zero,r5
    1f54:	003fec06 	br	1f08 <__alt_data_end+0xff001f08>
    1f58:	0109c83a 	sub	r4,zero,r4
    1f5c:	01c00044 	movi	r7,1
    1f60:	003fe706 	br	1f00 <__alt_data_end+0xff001f00>
    1f64:	00c00044 	movi	r3,1
    1f68:	003ff106 	br	1f30 <__alt_data_end+0xff001f30>

00001f6c <__udivsi3>:
    1f6c:	200d883a 	mov	r6,r4
    1f70:	2900152e 	bgeu	r5,r4,1fc8 <__udivsi3+0x5c>
    1f74:	28001416 	blt	r5,zero,1fc8 <__udivsi3+0x5c>
    1f78:	00800804 	movi	r2,32
    1f7c:	00c00044 	movi	r3,1
    1f80:	00000206 	br	1f8c <__udivsi3+0x20>
    1f84:	10000e26 	beq	r2,zero,1fc0 <__udivsi3+0x54>
    1f88:	28000516 	blt	r5,zero,1fa0 <__udivsi3+0x34>
    1f8c:	294b883a 	add	r5,r5,r5
    1f90:	10bfffc4 	addi	r2,r2,-1
    1f94:	18c7883a 	add	r3,r3,r3
    1f98:	293ffa36 	bltu	r5,r4,1f84 <__alt_data_end+0xff001f84>
    1f9c:	18000826 	beq	r3,zero,1fc0 <__udivsi3+0x54>
    1fa0:	0005883a 	mov	r2,zero
    1fa4:	31400236 	bltu	r6,r5,1fb0 <__udivsi3+0x44>
    1fa8:	314dc83a 	sub	r6,r6,r5
    1fac:	10c4b03a 	or	r2,r2,r3
    1fb0:	1806d07a 	srli	r3,r3,1
    1fb4:	280ad07a 	srli	r5,r5,1
    1fb8:	183ffa1e 	bne	r3,zero,1fa4 <__alt_data_end+0xff001fa4>
    1fbc:	f800283a 	ret
    1fc0:	0005883a 	mov	r2,zero
    1fc4:	f800283a 	ret
    1fc8:	00c00044 	movi	r3,1
    1fcc:	003ff406 	br	1fa0 <__alt_data_end+0xff001fa0>

00001fd0 <__umodsi3>:
    1fd0:	2005883a 	mov	r2,r4
    1fd4:	2900122e 	bgeu	r5,r4,2020 <__umodsi3+0x50>
    1fd8:	28001116 	blt	r5,zero,2020 <__umodsi3+0x50>
    1fdc:	01800804 	movi	r6,32
    1fe0:	00c00044 	movi	r3,1
    1fe4:	00000206 	br	1ff0 <__umodsi3+0x20>
    1fe8:	30000c26 	beq	r6,zero,201c <__umodsi3+0x4c>
    1fec:	28000516 	blt	r5,zero,2004 <__umodsi3+0x34>
    1ff0:	294b883a 	add	r5,r5,r5
    1ff4:	31bfffc4 	addi	r6,r6,-1
    1ff8:	18c7883a 	add	r3,r3,r3
    1ffc:	293ffa36 	bltu	r5,r4,1fe8 <__alt_data_end+0xff001fe8>
    2000:	18000626 	beq	r3,zero,201c <__umodsi3+0x4c>
    2004:	1806d07a 	srli	r3,r3,1
    2008:	11400136 	bltu	r2,r5,2010 <__umodsi3+0x40>
    200c:	1145c83a 	sub	r2,r2,r5
    2010:	280ad07a 	srli	r5,r5,1
    2014:	183ffb1e 	bne	r3,zero,2004 <__alt_data_end+0xff002004>
    2018:	f800283a 	ret
    201c:	f800283a 	ret
    2020:	00c00044 	movi	r3,1
    2024:	003ff706 	br	2004 <__alt_data_end+0xff002004>

00002028 <__divdf3>:
    2028:	defff204 	addi	sp,sp,-56
    202c:	dd400915 	stw	r21,36(sp)
    2030:	282ad53a 	srli	r21,r5,20
    2034:	dd000815 	stw	r20,32(sp)
    2038:	2828d7fa 	srli	r20,r5,31
    203c:	dc000415 	stw	r16,16(sp)
    2040:	04000434 	movhi	r16,16
    2044:	df000c15 	stw	fp,48(sp)
    2048:	843fffc4 	addi	r16,r16,-1
    204c:	dfc00d15 	stw	ra,52(sp)
    2050:	ddc00b15 	stw	r23,44(sp)
    2054:	dd800a15 	stw	r22,40(sp)
    2058:	dcc00715 	stw	r19,28(sp)
    205c:	dc800615 	stw	r18,24(sp)
    2060:	dc400515 	stw	r17,20(sp)
    2064:	ad41ffcc 	andi	r21,r21,2047
    2068:	2c20703a 	and	r16,r5,r16
    206c:	a7003fcc 	andi	fp,r20,255
    2070:	a8006126 	beq	r21,zero,21f8 <__divdf3+0x1d0>
    2074:	0081ffc4 	movi	r2,2047
    2078:	2025883a 	mov	r18,r4
    207c:	a8803726 	beq	r21,r2,215c <__divdf3+0x134>
    2080:	80800434 	orhi	r2,r16,16
    2084:	100490fa 	slli	r2,r2,3
    2088:	2020d77a 	srli	r16,r4,29
    208c:	202490fa 	slli	r18,r4,3
    2090:	ad7f0044 	addi	r21,r21,-1023
    2094:	80a0b03a 	or	r16,r16,r2
    2098:	0027883a 	mov	r19,zero
    209c:	0013883a 	mov	r9,zero
    20a0:	3804d53a 	srli	r2,r7,20
    20a4:	382cd7fa 	srli	r22,r7,31
    20a8:	04400434 	movhi	r17,16
    20ac:	8c7fffc4 	addi	r17,r17,-1
    20b0:	1081ffcc 	andi	r2,r2,2047
    20b4:	3011883a 	mov	r8,r6
    20b8:	3c62703a 	and	r17,r7,r17
    20bc:	b5c03fcc 	andi	r23,r22,255
    20c0:	10006c26 	beq	r2,zero,2274 <__divdf3+0x24c>
    20c4:	00c1ffc4 	movi	r3,2047
    20c8:	10c06426 	beq	r2,r3,225c <__divdf3+0x234>
    20cc:	88c00434 	orhi	r3,r17,16
    20d0:	180690fa 	slli	r3,r3,3
    20d4:	3022d77a 	srli	r17,r6,29
    20d8:	301090fa 	slli	r8,r6,3
    20dc:	10bf0044 	addi	r2,r2,-1023
    20e0:	88e2b03a 	or	r17,r17,r3
    20e4:	000f883a 	mov	r7,zero
    20e8:	a58cf03a 	xor	r6,r20,r22
    20ec:	3cc8b03a 	or	r4,r7,r19
    20f0:	a8abc83a 	sub	r21,r21,r2
    20f4:	008003c4 	movi	r2,15
    20f8:	3007883a 	mov	r3,r6
    20fc:	34c03fcc 	andi	r19,r6,255
    2100:	11009036 	bltu	r2,r4,2344 <__divdf3+0x31c>
    2104:	200890ba 	slli	r4,r4,2
    2108:	00800034 	movhi	r2,0
    210c:	10884704 	addi	r2,r2,8476
    2110:	2089883a 	add	r4,r4,r2
    2114:	20800017 	ldw	r2,0(r4)
    2118:	1000683a 	jmp	r2
    211c:	00002344 	movi	zero,141
    2120:	00002194 	movui	zero,134
    2124:	00002334 	movhi	zero,140
    2128:	00002188 	cmpgei	zero,zero,134
    212c:	00002334 	movhi	zero,140
    2130:	00002308 	cmpgei	zero,zero,140
    2134:	00002334 	movhi	zero,140
    2138:	00002188 	cmpgei	zero,zero,134
    213c:	00002194 	movui	zero,134
    2140:	00002194 	movui	zero,134
    2144:	00002308 	cmpgei	zero,zero,140
    2148:	00002188 	cmpgei	zero,zero,134
    214c:	00002178 	rdprs	zero,zero,133
    2150:	00002178 	rdprs	zero,zero,133
    2154:	00002178 	rdprs	zero,zero,133
    2158:	00002628 	cmpgeui	zero,zero,152
    215c:	2404b03a 	or	r2,r4,r16
    2160:	1000661e 	bne	r2,zero,22fc <__divdf3+0x2d4>
    2164:	04c00204 	movi	r19,8
    2168:	0021883a 	mov	r16,zero
    216c:	0025883a 	mov	r18,zero
    2170:	02400084 	movi	r9,2
    2174:	003fca06 	br	20a0 <__alt_data_end+0xff0020a0>
    2178:	8023883a 	mov	r17,r16
    217c:	9011883a 	mov	r8,r18
    2180:	e02f883a 	mov	r23,fp
    2184:	480f883a 	mov	r7,r9
    2188:	00800084 	movi	r2,2
    218c:	3881311e 	bne	r7,r2,2654 <__divdf3+0x62c>
    2190:	b827883a 	mov	r19,r23
    2194:	98c0004c 	andi	r3,r19,1
    2198:	0081ffc4 	movi	r2,2047
    219c:	000b883a 	mov	r5,zero
    21a0:	0025883a 	mov	r18,zero
    21a4:	1004953a 	slli	r2,r2,20
    21a8:	18c03fcc 	andi	r3,r3,255
    21ac:	04400434 	movhi	r17,16
    21b0:	8c7fffc4 	addi	r17,r17,-1
    21b4:	180697fa 	slli	r3,r3,31
    21b8:	2c4a703a 	and	r5,r5,r17
    21bc:	288ab03a 	or	r5,r5,r2
    21c0:	28c6b03a 	or	r3,r5,r3
    21c4:	9005883a 	mov	r2,r18
    21c8:	dfc00d17 	ldw	ra,52(sp)
    21cc:	df000c17 	ldw	fp,48(sp)
    21d0:	ddc00b17 	ldw	r23,44(sp)
    21d4:	dd800a17 	ldw	r22,40(sp)
    21d8:	dd400917 	ldw	r21,36(sp)
    21dc:	dd000817 	ldw	r20,32(sp)
    21e0:	dcc00717 	ldw	r19,28(sp)
    21e4:	dc800617 	ldw	r18,24(sp)
    21e8:	dc400517 	ldw	r17,20(sp)
    21ec:	dc000417 	ldw	r16,16(sp)
    21f0:	dec00e04 	addi	sp,sp,56
    21f4:	f800283a 	ret
    21f8:	2404b03a 	or	r2,r4,r16
    21fc:	2027883a 	mov	r19,r4
    2200:	10003926 	beq	r2,zero,22e8 <__divdf3+0x2c0>
    2204:	80012e26 	beq	r16,zero,26c0 <__divdf3+0x698>
    2208:	8009883a 	mov	r4,r16
    220c:	d9800315 	stw	r6,12(sp)
    2210:	d9c00215 	stw	r7,8(sp)
    2214:	00029b80 	call	29b8 <__clzsi2>
    2218:	d9800317 	ldw	r6,12(sp)
    221c:	d9c00217 	ldw	r7,8(sp)
    2220:	113ffd44 	addi	r4,r2,-11
    2224:	00c00704 	movi	r3,28
    2228:	19012116 	blt	r3,r4,26b0 <__divdf3+0x688>
    222c:	00c00744 	movi	r3,29
    2230:	147ffe04 	addi	r17,r2,-8
    2234:	1907c83a 	sub	r3,r3,r4
    2238:	8460983a 	sll	r16,r16,r17
    223c:	98c6d83a 	srl	r3,r19,r3
    2240:	9c64983a 	sll	r18,r19,r17
    2244:	1c20b03a 	or	r16,r3,r16
    2248:	1080fcc4 	addi	r2,r2,1011
    224c:	00abc83a 	sub	r21,zero,r2
    2250:	0027883a 	mov	r19,zero
    2254:	0013883a 	mov	r9,zero
    2258:	003f9106 	br	20a0 <__alt_data_end+0xff0020a0>
    225c:	3446b03a 	or	r3,r6,r17
    2260:	18001f1e 	bne	r3,zero,22e0 <__divdf3+0x2b8>
    2264:	0023883a 	mov	r17,zero
    2268:	0011883a 	mov	r8,zero
    226c:	01c00084 	movi	r7,2
    2270:	003f9d06 	br	20e8 <__alt_data_end+0xff0020e8>
    2274:	3446b03a 	or	r3,r6,r17
    2278:	18001526 	beq	r3,zero,22d0 <__divdf3+0x2a8>
    227c:	88011b26 	beq	r17,zero,26ec <__divdf3+0x6c4>
    2280:	8809883a 	mov	r4,r17
    2284:	d9800315 	stw	r6,12(sp)
    2288:	da400115 	stw	r9,4(sp)
    228c:	00029b80 	call	29b8 <__clzsi2>
    2290:	d9800317 	ldw	r6,12(sp)
    2294:	da400117 	ldw	r9,4(sp)
    2298:	113ffd44 	addi	r4,r2,-11
    229c:	00c00704 	movi	r3,28
    22a0:	19010e16 	blt	r3,r4,26dc <__divdf3+0x6b4>
    22a4:	00c00744 	movi	r3,29
    22a8:	123ffe04 	addi	r8,r2,-8
    22ac:	1907c83a 	sub	r3,r3,r4
    22b0:	8a22983a 	sll	r17,r17,r8
    22b4:	30c6d83a 	srl	r3,r6,r3
    22b8:	3210983a 	sll	r8,r6,r8
    22bc:	1c62b03a 	or	r17,r3,r17
    22c0:	1080fcc4 	addi	r2,r2,1011
    22c4:	0085c83a 	sub	r2,zero,r2
    22c8:	000f883a 	mov	r7,zero
    22cc:	003f8606 	br	20e8 <__alt_data_end+0xff0020e8>
    22d0:	0023883a 	mov	r17,zero
    22d4:	0011883a 	mov	r8,zero
    22d8:	01c00044 	movi	r7,1
    22dc:	003f8206 	br	20e8 <__alt_data_end+0xff0020e8>
    22e0:	01c000c4 	movi	r7,3
    22e4:	003f8006 	br	20e8 <__alt_data_end+0xff0020e8>
    22e8:	04c00104 	movi	r19,4
    22ec:	0021883a 	mov	r16,zero
    22f0:	0025883a 	mov	r18,zero
    22f4:	02400044 	movi	r9,1
    22f8:	003f6906 	br	20a0 <__alt_data_end+0xff0020a0>
    22fc:	04c00304 	movi	r19,12
    2300:	024000c4 	movi	r9,3
    2304:	003f6606 	br	20a0 <__alt_data_end+0xff0020a0>
    2308:	01400434 	movhi	r5,16
    230c:	0007883a 	mov	r3,zero
    2310:	297fffc4 	addi	r5,r5,-1
    2314:	04bfffc4 	movi	r18,-1
    2318:	0081ffc4 	movi	r2,2047
    231c:	003fa106 	br	21a4 <__alt_data_end+0xff0021a4>
    2320:	00c00044 	movi	r3,1
    2324:	1887c83a 	sub	r3,r3,r2
    2328:	01000e04 	movi	r4,56
    232c:	20c1210e 	bge	r4,r3,27b4 <__divdf3+0x78c>
    2330:	98c0004c 	andi	r3,r19,1
    2334:	0005883a 	mov	r2,zero
    2338:	000b883a 	mov	r5,zero
    233c:	0025883a 	mov	r18,zero
    2340:	003f9806 	br	21a4 <__alt_data_end+0xff0021a4>
    2344:	8c00fd36 	bltu	r17,r16,273c <__divdf3+0x714>
    2348:	8440fb26 	beq	r16,r17,2738 <__divdf3+0x710>
    234c:	8007883a 	mov	r3,r16
    2350:	ad7fffc4 	addi	r21,r21,-1
    2354:	0021883a 	mov	r16,zero
    2358:	4004d63a 	srli	r2,r8,24
    235c:	8822923a 	slli	r17,r17,8
    2360:	1809883a 	mov	r4,r3
    2364:	402c923a 	slli	r22,r8,8
    2368:	88b8b03a 	or	fp,r17,r2
    236c:	e028d43a 	srli	r20,fp,16
    2370:	d8c00015 	stw	r3,0(sp)
    2374:	e5ffffcc 	andi	r23,fp,65535
    2378:	a00b883a 	mov	r5,r20
    237c:	0001f6c0 	call	1f6c <__udivsi3>
    2380:	d8c00017 	ldw	r3,0(sp)
    2384:	a00b883a 	mov	r5,r20
    2388:	d8800315 	stw	r2,12(sp)
    238c:	1809883a 	mov	r4,r3
    2390:	0001fd00 	call	1fd0 <__umodsi3>
    2394:	d9800317 	ldw	r6,12(sp)
    2398:	1006943a 	slli	r3,r2,16
    239c:	9004d43a 	srli	r2,r18,16
    23a0:	b9a3383a 	mul	r17,r23,r6
    23a4:	10c4b03a 	or	r2,r2,r3
    23a8:	1440062e 	bgeu	r2,r17,23c4 <__divdf3+0x39c>
    23ac:	1705883a 	add	r2,r2,fp
    23b0:	30ffffc4 	addi	r3,r6,-1
    23b4:	1700ee36 	bltu	r2,fp,2770 <__divdf3+0x748>
    23b8:	1440ed2e 	bgeu	r2,r17,2770 <__divdf3+0x748>
    23bc:	31bfff84 	addi	r6,r6,-2
    23c0:	1705883a 	add	r2,r2,fp
    23c4:	1463c83a 	sub	r17,r2,r17
    23c8:	a00b883a 	mov	r5,r20
    23cc:	8809883a 	mov	r4,r17
    23d0:	d9800315 	stw	r6,12(sp)
    23d4:	0001f6c0 	call	1f6c <__udivsi3>
    23d8:	a00b883a 	mov	r5,r20
    23dc:	8809883a 	mov	r4,r17
    23e0:	d8800215 	stw	r2,8(sp)
    23e4:	0001fd00 	call	1fd0 <__umodsi3>
    23e8:	d9c00217 	ldw	r7,8(sp)
    23ec:	1004943a 	slli	r2,r2,16
    23f0:	94bfffcc 	andi	r18,r18,65535
    23f4:	b9d1383a 	mul	r8,r23,r7
    23f8:	90a4b03a 	or	r18,r18,r2
    23fc:	d9800317 	ldw	r6,12(sp)
    2400:	9200062e 	bgeu	r18,r8,241c <__divdf3+0x3f4>
    2404:	9725883a 	add	r18,r18,fp
    2408:	38bfffc4 	addi	r2,r7,-1
    240c:	9700d636 	bltu	r18,fp,2768 <__divdf3+0x740>
    2410:	9200d52e 	bgeu	r18,r8,2768 <__divdf3+0x740>
    2414:	39ffff84 	addi	r7,r7,-2
    2418:	9725883a 	add	r18,r18,fp
    241c:	3004943a 	slli	r2,r6,16
    2420:	b012d43a 	srli	r9,r22,16
    2424:	b1bfffcc 	andi	r6,r22,65535
    2428:	11e2b03a 	or	r17,r2,r7
    242c:	8806d43a 	srli	r3,r17,16
    2430:	893fffcc 	andi	r4,r17,65535
    2434:	218b383a 	mul	r5,r4,r6
    2438:	30c5383a 	mul	r2,r6,r3
    243c:	2249383a 	mul	r4,r4,r9
    2440:	280ed43a 	srli	r7,r5,16
    2444:	9225c83a 	sub	r18,r18,r8
    2448:	2089883a 	add	r4,r4,r2
    244c:	3909883a 	add	r4,r7,r4
    2450:	1a47383a 	mul	r3,r3,r9
    2454:	2080022e 	bgeu	r4,r2,2460 <__divdf3+0x438>
    2458:	00800074 	movhi	r2,1
    245c:	1887883a 	add	r3,r3,r2
    2460:	2004d43a 	srli	r2,r4,16
    2464:	2008943a 	slli	r4,r4,16
    2468:	297fffcc 	andi	r5,r5,65535
    246c:	10c7883a 	add	r3,r2,r3
    2470:	2149883a 	add	r4,r4,r5
    2474:	90c0a536 	bltu	r18,r3,270c <__divdf3+0x6e4>
    2478:	90c0bf26 	beq	r18,r3,2778 <__divdf3+0x750>
    247c:	90c7c83a 	sub	r3,r18,r3
    2480:	810fc83a 	sub	r7,r16,r4
    2484:	81e5803a 	cmpltu	r18,r16,r7
    2488:	1ca5c83a 	sub	r18,r3,r18
    248c:	e480c126 	beq	fp,r18,2794 <__divdf3+0x76c>
    2490:	a00b883a 	mov	r5,r20
    2494:	9009883a 	mov	r4,r18
    2498:	d9800315 	stw	r6,12(sp)
    249c:	d9c00215 	stw	r7,8(sp)
    24a0:	da400115 	stw	r9,4(sp)
    24a4:	0001f6c0 	call	1f6c <__udivsi3>
    24a8:	a00b883a 	mov	r5,r20
    24ac:	9009883a 	mov	r4,r18
    24b0:	d8800015 	stw	r2,0(sp)
    24b4:	0001fd00 	call	1fd0 <__umodsi3>
    24b8:	d9c00217 	ldw	r7,8(sp)
    24bc:	da000017 	ldw	r8,0(sp)
    24c0:	1006943a 	slli	r3,r2,16
    24c4:	3804d43a 	srli	r2,r7,16
    24c8:	ba21383a 	mul	r16,r23,r8
    24cc:	d9800317 	ldw	r6,12(sp)
    24d0:	10c4b03a 	or	r2,r2,r3
    24d4:	da400117 	ldw	r9,4(sp)
    24d8:	1400062e 	bgeu	r2,r16,24f4 <__divdf3+0x4cc>
    24dc:	1705883a 	add	r2,r2,fp
    24e0:	40ffffc4 	addi	r3,r8,-1
    24e4:	1700ad36 	bltu	r2,fp,279c <__divdf3+0x774>
    24e8:	1400ac2e 	bgeu	r2,r16,279c <__divdf3+0x774>
    24ec:	423fff84 	addi	r8,r8,-2
    24f0:	1705883a 	add	r2,r2,fp
    24f4:	1421c83a 	sub	r16,r2,r16
    24f8:	a00b883a 	mov	r5,r20
    24fc:	8009883a 	mov	r4,r16
    2500:	d9800315 	stw	r6,12(sp)
    2504:	d9c00215 	stw	r7,8(sp)
    2508:	da000015 	stw	r8,0(sp)
    250c:	da400115 	stw	r9,4(sp)
    2510:	0001f6c0 	call	1f6c <__udivsi3>
    2514:	8009883a 	mov	r4,r16
    2518:	a00b883a 	mov	r5,r20
    251c:	1025883a 	mov	r18,r2
    2520:	0001fd00 	call	1fd0 <__umodsi3>
    2524:	d9c00217 	ldw	r7,8(sp)
    2528:	1004943a 	slli	r2,r2,16
    252c:	bcaf383a 	mul	r23,r23,r18
    2530:	393fffcc 	andi	r4,r7,65535
    2534:	2088b03a 	or	r4,r4,r2
    2538:	d9800317 	ldw	r6,12(sp)
    253c:	da000017 	ldw	r8,0(sp)
    2540:	da400117 	ldw	r9,4(sp)
    2544:	25c0062e 	bgeu	r4,r23,2560 <__divdf3+0x538>
    2548:	2709883a 	add	r4,r4,fp
    254c:	90bfffc4 	addi	r2,r18,-1
    2550:	27009436 	bltu	r4,fp,27a4 <__divdf3+0x77c>
    2554:	25c0932e 	bgeu	r4,r23,27a4 <__divdf3+0x77c>
    2558:	94bfff84 	addi	r18,r18,-2
    255c:	2709883a 	add	r4,r4,fp
    2560:	4004943a 	slli	r2,r8,16
    2564:	25efc83a 	sub	r23,r4,r23
    2568:	1490b03a 	or	r8,r2,r18
    256c:	4008d43a 	srli	r4,r8,16
    2570:	40ffffcc 	andi	r3,r8,65535
    2574:	30c5383a 	mul	r2,r6,r3
    2578:	1a47383a 	mul	r3,r3,r9
    257c:	310d383a 	mul	r6,r6,r4
    2580:	100ad43a 	srli	r5,r2,16
    2584:	4913383a 	mul	r9,r9,r4
    2588:	1987883a 	add	r3,r3,r6
    258c:	28c7883a 	add	r3,r5,r3
    2590:	1980022e 	bgeu	r3,r6,259c <__divdf3+0x574>
    2594:	01000074 	movhi	r4,1
    2598:	4913883a 	add	r9,r9,r4
    259c:	1808d43a 	srli	r4,r3,16
    25a0:	1806943a 	slli	r3,r3,16
    25a4:	10bfffcc 	andi	r2,r2,65535
    25a8:	2253883a 	add	r9,r4,r9
    25ac:	1887883a 	add	r3,r3,r2
    25b0:	ba403836 	bltu	r23,r9,2694 <__divdf3+0x66c>
    25b4:	ba403626 	beq	r23,r9,2690 <__divdf3+0x668>
    25b8:	42000054 	ori	r8,r8,1
    25bc:	a880ffc4 	addi	r2,r21,1023
    25c0:	00bf570e 	bge	zero,r2,2320 <__alt_data_end+0xff002320>
    25c4:	40c001cc 	andi	r3,r8,7
    25c8:	18000726 	beq	r3,zero,25e8 <__divdf3+0x5c0>
    25cc:	40c003cc 	andi	r3,r8,15
    25d0:	01000104 	movi	r4,4
    25d4:	19000426 	beq	r3,r4,25e8 <__divdf3+0x5c0>
    25d8:	4107883a 	add	r3,r8,r4
    25dc:	1a11803a 	cmpltu	r8,r3,r8
    25e0:	8a23883a 	add	r17,r17,r8
    25e4:	1811883a 	mov	r8,r3
    25e8:	88c0402c 	andhi	r3,r17,256
    25ec:	18000426 	beq	r3,zero,2600 <__divdf3+0x5d8>
    25f0:	00ffc034 	movhi	r3,65280
    25f4:	18ffffc4 	addi	r3,r3,-1
    25f8:	a8810004 	addi	r2,r21,1024
    25fc:	88e2703a 	and	r17,r17,r3
    2600:	00c1ff84 	movi	r3,2046
    2604:	18bee316 	blt	r3,r2,2194 <__alt_data_end+0xff002194>
    2608:	8824977a 	slli	r18,r17,29
    260c:	4010d0fa 	srli	r8,r8,3
    2610:	8822927a 	slli	r17,r17,9
    2614:	1081ffcc 	andi	r2,r2,2047
    2618:	9224b03a 	or	r18,r18,r8
    261c:	880ad33a 	srli	r5,r17,12
    2620:	98c0004c 	andi	r3,r19,1
    2624:	003edf06 	br	21a4 <__alt_data_end+0xff0021a4>
    2628:	8080022c 	andhi	r2,r16,8
    262c:	10001226 	beq	r2,zero,2678 <__divdf3+0x650>
    2630:	8880022c 	andhi	r2,r17,8
    2634:	1000101e 	bne	r2,zero,2678 <__divdf3+0x650>
    2638:	00800434 	movhi	r2,16
    263c:	89400234 	orhi	r5,r17,8
    2640:	10bfffc4 	addi	r2,r2,-1
    2644:	b007883a 	mov	r3,r22
    2648:	288a703a 	and	r5,r5,r2
    264c:	4025883a 	mov	r18,r8
    2650:	003f3106 	br	2318 <__alt_data_end+0xff002318>
    2654:	008000c4 	movi	r2,3
    2658:	3880a626 	beq	r7,r2,28f4 <__divdf3+0x8cc>
    265c:	00800044 	movi	r2,1
    2660:	3880521e 	bne	r7,r2,27ac <__divdf3+0x784>
    2664:	b807883a 	mov	r3,r23
    2668:	0005883a 	mov	r2,zero
    266c:	000b883a 	mov	r5,zero
    2670:	0025883a 	mov	r18,zero
    2674:	003ecb06 	br	21a4 <__alt_data_end+0xff0021a4>
    2678:	00800434 	movhi	r2,16
    267c:	81400234 	orhi	r5,r16,8
    2680:	10bfffc4 	addi	r2,r2,-1
    2684:	a007883a 	mov	r3,r20
    2688:	288a703a 	and	r5,r5,r2
    268c:	003f2206 	br	2318 <__alt_data_end+0xff002318>
    2690:	183fca26 	beq	r3,zero,25bc <__alt_data_end+0xff0025bc>
    2694:	e5ef883a 	add	r23,fp,r23
    2698:	40bfffc4 	addi	r2,r8,-1
    269c:	bf00392e 	bgeu	r23,fp,2784 <__divdf3+0x75c>
    26a0:	1011883a 	mov	r8,r2
    26a4:	ba7fc41e 	bne	r23,r9,25b8 <__alt_data_end+0xff0025b8>
    26a8:	b0ffc31e 	bne	r22,r3,25b8 <__alt_data_end+0xff0025b8>
    26ac:	003fc306 	br	25bc <__alt_data_end+0xff0025bc>
    26b0:	143ff604 	addi	r16,r2,-40
    26b4:	9c20983a 	sll	r16,r19,r16
    26b8:	0025883a 	mov	r18,zero
    26bc:	003ee206 	br	2248 <__alt_data_end+0xff002248>
    26c0:	d9800315 	stw	r6,12(sp)
    26c4:	d9c00215 	stw	r7,8(sp)
    26c8:	00029b80 	call	29b8 <__clzsi2>
    26cc:	10800804 	addi	r2,r2,32
    26d0:	d9c00217 	ldw	r7,8(sp)
    26d4:	d9800317 	ldw	r6,12(sp)
    26d8:	003ed106 	br	2220 <__alt_data_end+0xff002220>
    26dc:	147ff604 	addi	r17,r2,-40
    26e0:	3462983a 	sll	r17,r6,r17
    26e4:	0011883a 	mov	r8,zero
    26e8:	003ef506 	br	22c0 <__alt_data_end+0xff0022c0>
    26ec:	3009883a 	mov	r4,r6
    26f0:	d9800315 	stw	r6,12(sp)
    26f4:	da400115 	stw	r9,4(sp)
    26f8:	00029b80 	call	29b8 <__clzsi2>
    26fc:	10800804 	addi	r2,r2,32
    2700:	da400117 	ldw	r9,4(sp)
    2704:	d9800317 	ldw	r6,12(sp)
    2708:	003ee306 	br	2298 <__alt_data_end+0xff002298>
    270c:	85a1883a 	add	r16,r16,r22
    2710:	8585803a 	cmpltu	r2,r16,r22
    2714:	1705883a 	add	r2,r2,fp
    2718:	14a5883a 	add	r18,r2,r18
    271c:	88bfffc4 	addi	r2,r17,-1
    2720:	e4800c2e 	bgeu	fp,r18,2754 <__divdf3+0x72c>
    2724:	90c03e36 	bltu	r18,r3,2820 <__divdf3+0x7f8>
    2728:	1c806926 	beq	r3,r18,28d0 <__divdf3+0x8a8>
    272c:	90c7c83a 	sub	r3,r18,r3
    2730:	1023883a 	mov	r17,r2
    2734:	003f5206 	br	2480 <__alt_data_end+0xff002480>
    2738:	923f0436 	bltu	r18,r8,234c <__alt_data_end+0xff00234c>
    273c:	800897fa 	slli	r4,r16,31
    2740:	9004d07a 	srli	r2,r18,1
    2744:	8006d07a 	srli	r3,r16,1
    2748:	902097fa 	slli	r16,r18,31
    274c:	20a4b03a 	or	r18,r4,r2
    2750:	003f0106 	br	2358 <__alt_data_end+0xff002358>
    2754:	e4bff51e 	bne	fp,r18,272c <__alt_data_end+0xff00272c>
    2758:	85bff22e 	bgeu	r16,r22,2724 <__alt_data_end+0xff002724>
    275c:	e0c7c83a 	sub	r3,fp,r3
    2760:	1023883a 	mov	r17,r2
    2764:	003f4606 	br	2480 <__alt_data_end+0xff002480>
    2768:	100f883a 	mov	r7,r2
    276c:	003f2b06 	br	241c <__alt_data_end+0xff00241c>
    2770:	180d883a 	mov	r6,r3
    2774:	003f1306 	br	23c4 <__alt_data_end+0xff0023c4>
    2778:	813fe436 	bltu	r16,r4,270c <__alt_data_end+0xff00270c>
    277c:	0007883a 	mov	r3,zero
    2780:	003f3f06 	br	2480 <__alt_data_end+0xff002480>
    2784:	ba402c36 	bltu	r23,r9,2838 <__divdf3+0x810>
    2788:	4dc05426 	beq	r9,r23,28dc <__divdf3+0x8b4>
    278c:	1011883a 	mov	r8,r2
    2790:	003f8906 	br	25b8 <__alt_data_end+0xff0025b8>
    2794:	023fffc4 	movi	r8,-1
    2798:	003f8806 	br	25bc <__alt_data_end+0xff0025bc>
    279c:	1811883a 	mov	r8,r3
    27a0:	003f5406 	br	24f4 <__alt_data_end+0xff0024f4>
    27a4:	1025883a 	mov	r18,r2
    27a8:	003f6d06 	br	2560 <__alt_data_end+0xff002560>
    27ac:	b827883a 	mov	r19,r23
    27b0:	003f8206 	br	25bc <__alt_data_end+0xff0025bc>
    27b4:	010007c4 	movi	r4,31
    27b8:	20c02616 	blt	r4,r3,2854 <__divdf3+0x82c>
    27bc:	00800804 	movi	r2,32
    27c0:	10c5c83a 	sub	r2,r2,r3
    27c4:	888a983a 	sll	r5,r17,r2
    27c8:	40c8d83a 	srl	r4,r8,r3
    27cc:	4084983a 	sll	r2,r8,r2
    27d0:	88e2d83a 	srl	r17,r17,r3
    27d4:	2906b03a 	or	r3,r5,r4
    27d8:	1004c03a 	cmpne	r2,r2,zero
    27dc:	1886b03a 	or	r3,r3,r2
    27e0:	188001cc 	andi	r2,r3,7
    27e4:	10000726 	beq	r2,zero,2804 <__divdf3+0x7dc>
    27e8:	188003cc 	andi	r2,r3,15
    27ec:	01000104 	movi	r4,4
    27f0:	11000426 	beq	r2,r4,2804 <__divdf3+0x7dc>
    27f4:	1805883a 	mov	r2,r3
    27f8:	10c00104 	addi	r3,r2,4
    27fc:	1885803a 	cmpltu	r2,r3,r2
    2800:	88a3883a 	add	r17,r17,r2
    2804:	8880202c 	andhi	r2,r17,128
    2808:	10002726 	beq	r2,zero,28a8 <__divdf3+0x880>
    280c:	98c0004c 	andi	r3,r19,1
    2810:	00800044 	movi	r2,1
    2814:	000b883a 	mov	r5,zero
    2818:	0025883a 	mov	r18,zero
    281c:	003e6106 	br	21a4 <__alt_data_end+0xff0021a4>
    2820:	85a1883a 	add	r16,r16,r22
    2824:	8585803a 	cmpltu	r2,r16,r22
    2828:	1705883a 	add	r2,r2,fp
    282c:	14a5883a 	add	r18,r2,r18
    2830:	8c7fff84 	addi	r17,r17,-2
    2834:	003f1106 	br	247c <__alt_data_end+0xff00247c>
    2838:	b589883a 	add	r4,r22,r22
    283c:	25ad803a 	cmpltu	r22,r4,r22
    2840:	b739883a 	add	fp,r22,fp
    2844:	40bfff84 	addi	r2,r8,-2
    2848:	bf2f883a 	add	r23,r23,fp
    284c:	202d883a 	mov	r22,r4
    2850:	003f9306 	br	26a0 <__alt_data_end+0xff0026a0>
    2854:	013ff844 	movi	r4,-31
    2858:	2085c83a 	sub	r2,r4,r2
    285c:	8888d83a 	srl	r4,r17,r2
    2860:	00800804 	movi	r2,32
    2864:	18802126 	beq	r3,r2,28ec <__divdf3+0x8c4>
    2868:	00801004 	movi	r2,64
    286c:	10c5c83a 	sub	r2,r2,r3
    2870:	8884983a 	sll	r2,r17,r2
    2874:	1204b03a 	or	r2,r2,r8
    2878:	1004c03a 	cmpne	r2,r2,zero
    287c:	2084b03a 	or	r2,r4,r2
    2880:	144001cc 	andi	r17,r2,7
    2884:	88000d1e 	bne	r17,zero,28bc <__divdf3+0x894>
    2888:	000b883a 	mov	r5,zero
    288c:	1024d0fa 	srli	r18,r2,3
    2890:	98c0004c 	andi	r3,r19,1
    2894:	0005883a 	mov	r2,zero
    2898:	9464b03a 	or	r18,r18,r17
    289c:	003e4106 	br	21a4 <__alt_data_end+0xff0021a4>
    28a0:	1007883a 	mov	r3,r2
    28a4:	0023883a 	mov	r17,zero
    28a8:	880a927a 	slli	r5,r17,9
    28ac:	1805883a 	mov	r2,r3
    28b0:	8822977a 	slli	r17,r17,29
    28b4:	280ad33a 	srli	r5,r5,12
    28b8:	003ff406 	br	288c <__alt_data_end+0xff00288c>
    28bc:	10c003cc 	andi	r3,r2,15
    28c0:	01000104 	movi	r4,4
    28c4:	193ff626 	beq	r3,r4,28a0 <__alt_data_end+0xff0028a0>
    28c8:	0023883a 	mov	r17,zero
    28cc:	003fca06 	br	27f8 <__alt_data_end+0xff0027f8>
    28d0:	813fd336 	bltu	r16,r4,2820 <__alt_data_end+0xff002820>
    28d4:	1023883a 	mov	r17,r2
    28d8:	003fa806 	br	277c <__alt_data_end+0xff00277c>
    28dc:	b0ffd636 	bltu	r22,r3,2838 <__alt_data_end+0xff002838>
    28e0:	1011883a 	mov	r8,r2
    28e4:	b0ff341e 	bne	r22,r3,25b8 <__alt_data_end+0xff0025b8>
    28e8:	003f3406 	br	25bc <__alt_data_end+0xff0025bc>
    28ec:	0005883a 	mov	r2,zero
    28f0:	003fe006 	br	2874 <__alt_data_end+0xff002874>
    28f4:	00800434 	movhi	r2,16
    28f8:	89400234 	orhi	r5,r17,8
    28fc:	10bfffc4 	addi	r2,r2,-1
    2900:	b807883a 	mov	r3,r23
    2904:	288a703a 	and	r5,r5,r2
    2908:	4025883a 	mov	r18,r8
    290c:	003e8206 	br	2318 <__alt_data_end+0xff002318>

00002910 <__floatunsidf>:
    2910:	defffe04 	addi	sp,sp,-8
    2914:	dc000015 	stw	r16,0(sp)
    2918:	dfc00115 	stw	ra,4(sp)
    291c:	2021883a 	mov	r16,r4
    2920:	20002226 	beq	r4,zero,29ac <__floatunsidf+0x9c>
    2924:	00029b80 	call	29b8 <__clzsi2>
    2928:	01010784 	movi	r4,1054
    292c:	2089c83a 	sub	r4,r4,r2
    2930:	01810cc4 	movi	r6,1075
    2934:	310dc83a 	sub	r6,r6,r4
    2938:	00c007c4 	movi	r3,31
    293c:	1980120e 	bge	r3,r6,2988 <__floatunsidf+0x78>
    2940:	00c104c4 	movi	r3,1043
    2944:	1907c83a 	sub	r3,r3,r4
    2948:	80ca983a 	sll	r5,r16,r3
    294c:	00800434 	movhi	r2,16
    2950:	10bfffc4 	addi	r2,r2,-1
    2954:	2101ffcc 	andi	r4,r4,2047
    2958:	0021883a 	mov	r16,zero
    295c:	288a703a 	and	r5,r5,r2
    2960:	2008953a 	slli	r4,r4,20
    2964:	00c00434 	movhi	r3,16
    2968:	18ffffc4 	addi	r3,r3,-1
    296c:	28c6703a 	and	r3,r5,r3
    2970:	8005883a 	mov	r2,r16
    2974:	1906b03a 	or	r3,r3,r4
    2978:	dfc00117 	ldw	ra,4(sp)
    297c:	dc000017 	ldw	r16,0(sp)
    2980:	dec00204 	addi	sp,sp,8
    2984:	f800283a 	ret
    2988:	00c002c4 	movi	r3,11
    298c:	188bc83a 	sub	r5,r3,r2
    2990:	814ad83a 	srl	r5,r16,r5
    2994:	00c00434 	movhi	r3,16
    2998:	18ffffc4 	addi	r3,r3,-1
    299c:	81a0983a 	sll	r16,r16,r6
    29a0:	2101ffcc 	andi	r4,r4,2047
    29a4:	28ca703a 	and	r5,r5,r3
    29a8:	003fed06 	br	2960 <__alt_data_end+0xff002960>
    29ac:	0009883a 	mov	r4,zero
    29b0:	000b883a 	mov	r5,zero
    29b4:	003fea06 	br	2960 <__alt_data_end+0xff002960>

000029b8 <__clzsi2>:
    29b8:	00bfffd4 	movui	r2,65535
    29bc:	11000536 	bltu	r2,r4,29d4 <__clzsi2+0x1c>
    29c0:	00803fc4 	movi	r2,255
    29c4:	11000f36 	bltu	r2,r4,2a04 <__clzsi2+0x4c>
    29c8:	00800804 	movi	r2,32
    29cc:	0007883a 	mov	r3,zero
    29d0:	00000506 	br	29e8 <__clzsi2+0x30>
    29d4:	00804034 	movhi	r2,256
    29d8:	10bfffc4 	addi	r2,r2,-1
    29dc:	11000c2e 	bgeu	r2,r4,2a10 <__clzsi2+0x58>
    29e0:	00800204 	movi	r2,8
    29e4:	00c00604 	movi	r3,24
    29e8:	20c8d83a 	srl	r4,r4,r3
    29ec:	00c00074 	movhi	r3,1
    29f0:	18c65e04 	addi	r3,r3,6520
    29f4:	1909883a 	add	r4,r3,r4
    29f8:	20c00003 	ldbu	r3,0(r4)
    29fc:	10c5c83a 	sub	r2,r2,r3
    2a00:	f800283a 	ret
    2a04:	00800604 	movi	r2,24
    2a08:	00c00204 	movi	r3,8
    2a0c:	003ff606 	br	29e8 <__alt_data_end+0xff0029e8>
    2a10:	00800404 	movi	r2,16
    2a14:	1007883a 	mov	r3,r2
    2a18:	003ff306 	br	29e8 <__alt_data_end+0xff0029e8>

00002a1c <malloc>:
    2a1c:	00800074 	movhi	r2,1
    2a20:	108e0904 	addi	r2,r2,14372
    2a24:	200b883a 	mov	r5,r4
    2a28:	11000017 	ldw	r4,0(r2)
    2a2c:	0002a441 	jmpi	2a44 <_malloc_r>

00002a30 <free>:
    2a30:	00800074 	movhi	r2,1
    2a34:	108e0904 	addi	r2,r2,14372
    2a38:	200b883a 	mov	r5,r4
    2a3c:	11000017 	ldw	r4,0(r2)
    2a40:	00078941 	jmpi	7894 <_free_r>

00002a44 <_malloc_r>:
    2a44:	defff504 	addi	sp,sp,-44
    2a48:	dc800315 	stw	r18,12(sp)
    2a4c:	dfc00a15 	stw	ra,40(sp)
    2a50:	df000915 	stw	fp,36(sp)
    2a54:	ddc00815 	stw	r23,32(sp)
    2a58:	dd800715 	stw	r22,28(sp)
    2a5c:	dd400615 	stw	r21,24(sp)
    2a60:	dd000515 	stw	r20,20(sp)
    2a64:	dcc00415 	stw	r19,16(sp)
    2a68:	dc400215 	stw	r17,8(sp)
    2a6c:	dc000115 	stw	r16,4(sp)
    2a70:	288002c4 	addi	r2,r5,11
    2a74:	00c00584 	movi	r3,22
    2a78:	2025883a 	mov	r18,r4
    2a7c:	18807f2e 	bgeu	r3,r2,2c7c <_malloc_r+0x238>
    2a80:	047ffe04 	movi	r17,-8
    2a84:	1462703a 	and	r17,r2,r17
    2a88:	8800a316 	blt	r17,zero,2d18 <_malloc_r+0x2d4>
    2a8c:	8940a236 	bltu	r17,r5,2d18 <_malloc_r+0x2d4>
    2a90:	000ed380 	call	ed38 <__malloc_lock>
    2a94:	00807dc4 	movi	r2,503
    2a98:	1441e92e 	bgeu	r2,r17,3240 <_malloc_r+0x7fc>
    2a9c:	8804d27a 	srli	r2,r17,9
    2aa0:	1000a126 	beq	r2,zero,2d28 <_malloc_r+0x2e4>
    2aa4:	00c00104 	movi	r3,4
    2aa8:	18811e36 	bltu	r3,r2,2f24 <_malloc_r+0x4e0>
    2aac:	8804d1ba 	srli	r2,r17,6
    2ab0:	12000e44 	addi	r8,r2,57
    2ab4:	11c00e04 	addi	r7,r2,56
    2ab8:	4209883a 	add	r4,r8,r8
    2abc:	04c00074 	movhi	r19,1
    2ac0:	2109883a 	add	r4,r4,r4
    2ac4:	9cc75b04 	addi	r19,r19,7532
    2ac8:	2109883a 	add	r4,r4,r4
    2acc:	9909883a 	add	r4,r19,r4
    2ad0:	24000117 	ldw	r16,4(r4)
    2ad4:	213ffe04 	addi	r4,r4,-8
    2ad8:	24009726 	beq	r4,r16,2d38 <_malloc_r+0x2f4>
    2adc:	80800117 	ldw	r2,4(r16)
    2ae0:	01bfff04 	movi	r6,-4
    2ae4:	014003c4 	movi	r5,15
    2ae8:	1184703a 	and	r2,r2,r6
    2aec:	1447c83a 	sub	r3,r2,r17
    2af0:	28c00716 	blt	r5,r3,2b10 <_malloc_r+0xcc>
    2af4:	1800920e 	bge	r3,zero,2d40 <_malloc_r+0x2fc>
    2af8:	84000317 	ldw	r16,12(r16)
    2afc:	24008e26 	beq	r4,r16,2d38 <_malloc_r+0x2f4>
    2b00:	80800117 	ldw	r2,4(r16)
    2b04:	1184703a 	and	r2,r2,r6
    2b08:	1447c83a 	sub	r3,r2,r17
    2b0c:	28fff90e 	bge	r5,r3,2af4 <__alt_data_end+0xff002af4>
    2b10:	3809883a 	mov	r4,r7
    2b14:	01800074 	movhi	r6,1
    2b18:	9c000417 	ldw	r16,16(r19)
    2b1c:	31875b04 	addi	r6,r6,7532
    2b20:	32000204 	addi	r8,r6,8
    2b24:	82013426 	beq	r16,r8,2ff8 <_malloc_r+0x5b4>
    2b28:	80c00117 	ldw	r3,4(r16)
    2b2c:	00bfff04 	movi	r2,-4
    2b30:	188e703a 	and	r7,r3,r2
    2b34:	3c45c83a 	sub	r2,r7,r17
    2b38:	00c003c4 	movi	r3,15
    2b3c:	18811f16 	blt	r3,r2,2fbc <_malloc_r+0x578>
    2b40:	32000515 	stw	r8,20(r6)
    2b44:	32000415 	stw	r8,16(r6)
    2b48:	10007f0e 	bge	r2,zero,2d48 <_malloc_r+0x304>
    2b4c:	00807fc4 	movi	r2,511
    2b50:	11c0fd36 	bltu	r2,r7,2f48 <_malloc_r+0x504>
    2b54:	3806d0fa 	srli	r3,r7,3
    2b58:	01c00044 	movi	r7,1
    2b5c:	30800117 	ldw	r2,4(r6)
    2b60:	19400044 	addi	r5,r3,1
    2b64:	294b883a 	add	r5,r5,r5
    2b68:	1807d0ba 	srai	r3,r3,2
    2b6c:	294b883a 	add	r5,r5,r5
    2b70:	294b883a 	add	r5,r5,r5
    2b74:	298b883a 	add	r5,r5,r6
    2b78:	38c6983a 	sll	r3,r7,r3
    2b7c:	29c00017 	ldw	r7,0(r5)
    2b80:	2a7ffe04 	addi	r9,r5,-8
    2b84:	1886b03a 	or	r3,r3,r2
    2b88:	82400315 	stw	r9,12(r16)
    2b8c:	81c00215 	stw	r7,8(r16)
    2b90:	30c00115 	stw	r3,4(r6)
    2b94:	2c000015 	stw	r16,0(r5)
    2b98:	3c000315 	stw	r16,12(r7)
    2b9c:	2005d0ba 	srai	r2,r4,2
    2ba0:	01400044 	movi	r5,1
    2ba4:	288a983a 	sll	r5,r5,r2
    2ba8:	19406f36 	bltu	r3,r5,2d68 <_malloc_r+0x324>
    2bac:	28c4703a 	and	r2,r5,r3
    2bb0:	10000a1e 	bne	r2,zero,2bdc <_malloc_r+0x198>
    2bb4:	00bfff04 	movi	r2,-4
    2bb8:	294b883a 	add	r5,r5,r5
    2bbc:	2088703a 	and	r4,r4,r2
    2bc0:	28c4703a 	and	r2,r5,r3
    2bc4:	21000104 	addi	r4,r4,4
    2bc8:	1000041e 	bne	r2,zero,2bdc <_malloc_r+0x198>
    2bcc:	294b883a 	add	r5,r5,r5
    2bd0:	28c4703a 	and	r2,r5,r3
    2bd4:	21000104 	addi	r4,r4,4
    2bd8:	103ffc26 	beq	r2,zero,2bcc <__alt_data_end+0xff002bcc>
    2bdc:	02bfff04 	movi	r10,-4
    2be0:	024003c4 	movi	r9,15
    2be4:	21800044 	addi	r6,r4,1
    2be8:	318d883a 	add	r6,r6,r6
    2bec:	318d883a 	add	r6,r6,r6
    2bf0:	318d883a 	add	r6,r6,r6
    2bf4:	998d883a 	add	r6,r19,r6
    2bf8:	333ffe04 	addi	r12,r6,-8
    2bfc:	2017883a 	mov	r11,r4
    2c00:	31800104 	addi	r6,r6,4
    2c04:	34000017 	ldw	r16,0(r6)
    2c08:	31fffd04 	addi	r7,r6,-12
    2c0c:	81c0041e 	bne	r16,r7,2c20 <_malloc_r+0x1dc>
    2c10:	0000fb06 	br	3000 <_malloc_r+0x5bc>
    2c14:	1801030e 	bge	r3,zero,3024 <_malloc_r+0x5e0>
    2c18:	84000317 	ldw	r16,12(r16)
    2c1c:	81c0f826 	beq	r16,r7,3000 <_malloc_r+0x5bc>
    2c20:	80800117 	ldw	r2,4(r16)
    2c24:	1284703a 	and	r2,r2,r10
    2c28:	1447c83a 	sub	r3,r2,r17
    2c2c:	48fff90e 	bge	r9,r3,2c14 <__alt_data_end+0xff002c14>
    2c30:	80800317 	ldw	r2,12(r16)
    2c34:	81000217 	ldw	r4,8(r16)
    2c38:	89400054 	ori	r5,r17,1
    2c3c:	81400115 	stw	r5,4(r16)
    2c40:	20800315 	stw	r2,12(r4)
    2c44:	11000215 	stw	r4,8(r2)
    2c48:	8463883a 	add	r17,r16,r17
    2c4c:	9c400515 	stw	r17,20(r19)
    2c50:	9c400415 	stw	r17,16(r19)
    2c54:	18800054 	ori	r2,r3,1
    2c58:	88800115 	stw	r2,4(r17)
    2c5c:	8a000315 	stw	r8,12(r17)
    2c60:	8a000215 	stw	r8,8(r17)
    2c64:	88e3883a 	add	r17,r17,r3
    2c68:	88c00015 	stw	r3,0(r17)
    2c6c:	9009883a 	mov	r4,r18
    2c70:	000ed5c0 	call	ed5c <__malloc_unlock>
    2c74:	80800204 	addi	r2,r16,8
    2c78:	00001b06 	br	2ce8 <_malloc_r+0x2a4>
    2c7c:	04400404 	movi	r17,16
    2c80:	89402536 	bltu	r17,r5,2d18 <_malloc_r+0x2d4>
    2c84:	000ed380 	call	ed38 <__malloc_lock>
    2c88:	00800184 	movi	r2,6
    2c8c:	01000084 	movi	r4,2
    2c90:	04c00074 	movhi	r19,1
    2c94:	1085883a 	add	r2,r2,r2
    2c98:	9cc75b04 	addi	r19,r19,7532
    2c9c:	1085883a 	add	r2,r2,r2
    2ca0:	9885883a 	add	r2,r19,r2
    2ca4:	14000117 	ldw	r16,4(r2)
    2ca8:	10fffe04 	addi	r3,r2,-8
    2cac:	80c0d926 	beq	r16,r3,3014 <_malloc_r+0x5d0>
    2cb0:	80c00117 	ldw	r3,4(r16)
    2cb4:	81000317 	ldw	r4,12(r16)
    2cb8:	00bfff04 	movi	r2,-4
    2cbc:	1884703a 	and	r2,r3,r2
    2cc0:	81400217 	ldw	r5,8(r16)
    2cc4:	8085883a 	add	r2,r16,r2
    2cc8:	10c00117 	ldw	r3,4(r2)
    2ccc:	29000315 	stw	r4,12(r5)
    2cd0:	21400215 	stw	r5,8(r4)
    2cd4:	18c00054 	ori	r3,r3,1
    2cd8:	10c00115 	stw	r3,4(r2)
    2cdc:	9009883a 	mov	r4,r18
    2ce0:	000ed5c0 	call	ed5c <__malloc_unlock>
    2ce4:	80800204 	addi	r2,r16,8
    2ce8:	dfc00a17 	ldw	ra,40(sp)
    2cec:	df000917 	ldw	fp,36(sp)
    2cf0:	ddc00817 	ldw	r23,32(sp)
    2cf4:	dd800717 	ldw	r22,28(sp)
    2cf8:	dd400617 	ldw	r21,24(sp)
    2cfc:	dd000517 	ldw	r20,20(sp)
    2d00:	dcc00417 	ldw	r19,16(sp)
    2d04:	dc800317 	ldw	r18,12(sp)
    2d08:	dc400217 	ldw	r17,8(sp)
    2d0c:	dc000117 	ldw	r16,4(sp)
    2d10:	dec00b04 	addi	sp,sp,44
    2d14:	f800283a 	ret
    2d18:	00800304 	movi	r2,12
    2d1c:	90800015 	stw	r2,0(r18)
    2d20:	0005883a 	mov	r2,zero
    2d24:	003ff006 	br	2ce8 <__alt_data_end+0xff002ce8>
    2d28:	01002004 	movi	r4,128
    2d2c:	02001004 	movi	r8,64
    2d30:	01c00fc4 	movi	r7,63
    2d34:	003f6106 	br	2abc <__alt_data_end+0xff002abc>
    2d38:	4009883a 	mov	r4,r8
    2d3c:	003f7506 	br	2b14 <__alt_data_end+0xff002b14>
    2d40:	81000317 	ldw	r4,12(r16)
    2d44:	003fde06 	br	2cc0 <__alt_data_end+0xff002cc0>
    2d48:	81c5883a 	add	r2,r16,r7
    2d4c:	11400117 	ldw	r5,4(r2)
    2d50:	9009883a 	mov	r4,r18
    2d54:	29400054 	ori	r5,r5,1
    2d58:	11400115 	stw	r5,4(r2)
    2d5c:	000ed5c0 	call	ed5c <__malloc_unlock>
    2d60:	80800204 	addi	r2,r16,8
    2d64:	003fe006 	br	2ce8 <__alt_data_end+0xff002ce8>
    2d68:	9c000217 	ldw	r16,8(r19)
    2d6c:	00bfff04 	movi	r2,-4
    2d70:	85800117 	ldw	r22,4(r16)
    2d74:	b0ac703a 	and	r22,r22,r2
    2d78:	b4400336 	bltu	r22,r17,2d88 <_malloc_r+0x344>
    2d7c:	b445c83a 	sub	r2,r22,r17
    2d80:	00c003c4 	movi	r3,15
    2d84:	18805d16 	blt	r3,r2,2efc <_malloc_r+0x4b8>
    2d88:	05c00074 	movhi	r23,1
    2d8c:	00800074 	movhi	r2,1
    2d90:	10952504 	addi	r2,r2,21652
    2d94:	bdce0604 	addi	r23,r23,14360
    2d98:	15400017 	ldw	r21,0(r2)
    2d9c:	b8c00017 	ldw	r3,0(r23)
    2da0:	00bfffc4 	movi	r2,-1
    2da4:	858d883a 	add	r6,r16,r22
    2da8:	8d6b883a 	add	r21,r17,r21
    2dac:	1880ea26 	beq	r3,r2,3158 <_malloc_r+0x714>
    2db0:	ad4403c4 	addi	r21,r21,4111
    2db4:	00bc0004 	movi	r2,-4096
    2db8:	a8aa703a 	and	r21,r21,r2
    2dbc:	a80b883a 	mov	r5,r21
    2dc0:	9009883a 	mov	r4,r18
    2dc4:	d9800015 	stw	r6,0(sp)
    2dc8:	00033900 	call	3390 <_sbrk_r>
    2dcc:	1029883a 	mov	r20,r2
    2dd0:	00bfffc4 	movi	r2,-1
    2dd4:	d9800017 	ldw	r6,0(sp)
    2dd8:	a080e826 	beq	r20,r2,317c <_malloc_r+0x738>
    2ddc:	a180a636 	bltu	r20,r6,3078 <_malloc_r+0x634>
    2de0:	07000074 	movhi	fp,1
    2de4:	e7153304 	addi	fp,fp,21708
    2de8:	e0800017 	ldw	r2,0(fp)
    2dec:	a887883a 	add	r3,r21,r2
    2df0:	e0c00015 	stw	r3,0(fp)
    2df4:	3500e626 	beq	r6,r20,3190 <_malloc_r+0x74c>
    2df8:	b9000017 	ldw	r4,0(r23)
    2dfc:	00bfffc4 	movi	r2,-1
    2e00:	2080ee26 	beq	r4,r2,31bc <_malloc_r+0x778>
    2e04:	a185c83a 	sub	r2,r20,r6
    2e08:	10c5883a 	add	r2,r2,r3
    2e0c:	e0800015 	stw	r2,0(fp)
    2e10:	a0c001cc 	andi	r3,r20,7
    2e14:	1800bc26 	beq	r3,zero,3108 <_malloc_r+0x6c4>
    2e18:	a0e9c83a 	sub	r20,r20,r3
    2e1c:	00840204 	movi	r2,4104
    2e20:	a5000204 	addi	r20,r20,8
    2e24:	10c7c83a 	sub	r3,r2,r3
    2e28:	a545883a 	add	r2,r20,r21
    2e2c:	1083ffcc 	andi	r2,r2,4095
    2e30:	18abc83a 	sub	r21,r3,r2
    2e34:	a80b883a 	mov	r5,r21
    2e38:	9009883a 	mov	r4,r18
    2e3c:	00033900 	call	3390 <_sbrk_r>
    2e40:	00ffffc4 	movi	r3,-1
    2e44:	10c0e126 	beq	r2,r3,31cc <_malloc_r+0x788>
    2e48:	1505c83a 	sub	r2,r2,r20
    2e4c:	1545883a 	add	r2,r2,r21
    2e50:	10800054 	ori	r2,r2,1
    2e54:	e0c00017 	ldw	r3,0(fp)
    2e58:	9d000215 	stw	r20,8(r19)
    2e5c:	a0800115 	stw	r2,4(r20)
    2e60:	a8c7883a 	add	r3,r21,r3
    2e64:	e0c00015 	stw	r3,0(fp)
    2e68:	84c00e26 	beq	r16,r19,2ea4 <_malloc_r+0x460>
    2e6c:	018003c4 	movi	r6,15
    2e70:	3580a72e 	bgeu	r6,r22,3110 <_malloc_r+0x6cc>
    2e74:	81400117 	ldw	r5,4(r16)
    2e78:	013ffe04 	movi	r4,-8
    2e7c:	b0bffd04 	addi	r2,r22,-12
    2e80:	1104703a 	and	r2,r2,r4
    2e84:	2900004c 	andi	r4,r5,1
    2e88:	2088b03a 	or	r4,r4,r2
    2e8c:	81000115 	stw	r4,4(r16)
    2e90:	01400144 	movi	r5,5
    2e94:	8089883a 	add	r4,r16,r2
    2e98:	21400115 	stw	r5,4(r4)
    2e9c:	21400215 	stw	r5,8(r4)
    2ea0:	3080cd36 	bltu	r6,r2,31d8 <_malloc_r+0x794>
    2ea4:	00800074 	movhi	r2,1
    2ea8:	10952404 	addi	r2,r2,21648
    2eac:	11000017 	ldw	r4,0(r2)
    2eb0:	20c0012e 	bgeu	r4,r3,2eb8 <_malloc_r+0x474>
    2eb4:	10c00015 	stw	r3,0(r2)
    2eb8:	00800074 	movhi	r2,1
    2ebc:	10952304 	addi	r2,r2,21644
    2ec0:	11000017 	ldw	r4,0(r2)
    2ec4:	9c000217 	ldw	r16,8(r19)
    2ec8:	20c0012e 	bgeu	r4,r3,2ed0 <_malloc_r+0x48c>
    2ecc:	10c00015 	stw	r3,0(r2)
    2ed0:	80c00117 	ldw	r3,4(r16)
    2ed4:	00bfff04 	movi	r2,-4
    2ed8:	1886703a 	and	r3,r3,r2
    2edc:	1c45c83a 	sub	r2,r3,r17
    2ee0:	1c400236 	bltu	r3,r17,2eec <_malloc_r+0x4a8>
    2ee4:	00c003c4 	movi	r3,15
    2ee8:	18800416 	blt	r3,r2,2efc <_malloc_r+0x4b8>
    2eec:	9009883a 	mov	r4,r18
    2ef0:	000ed5c0 	call	ed5c <__malloc_unlock>
    2ef4:	0005883a 	mov	r2,zero
    2ef8:	003f7b06 	br	2ce8 <__alt_data_end+0xff002ce8>
    2efc:	88c00054 	ori	r3,r17,1
    2f00:	80c00115 	stw	r3,4(r16)
    2f04:	8463883a 	add	r17,r16,r17
    2f08:	10800054 	ori	r2,r2,1
    2f0c:	9c400215 	stw	r17,8(r19)
    2f10:	88800115 	stw	r2,4(r17)
    2f14:	9009883a 	mov	r4,r18
    2f18:	000ed5c0 	call	ed5c <__malloc_unlock>
    2f1c:	80800204 	addi	r2,r16,8
    2f20:	003f7106 	br	2ce8 <__alt_data_end+0xff002ce8>
    2f24:	00c00504 	movi	r3,20
    2f28:	18804a2e 	bgeu	r3,r2,3054 <_malloc_r+0x610>
    2f2c:	00c01504 	movi	r3,84
    2f30:	18806e36 	bltu	r3,r2,30ec <_malloc_r+0x6a8>
    2f34:	8804d33a 	srli	r2,r17,12
    2f38:	12001bc4 	addi	r8,r2,111
    2f3c:	11c01b84 	addi	r7,r2,110
    2f40:	4209883a 	add	r4,r8,r8
    2f44:	003edd06 	br	2abc <__alt_data_end+0xff002abc>
    2f48:	3804d27a 	srli	r2,r7,9
    2f4c:	00c00104 	movi	r3,4
    2f50:	1880442e 	bgeu	r3,r2,3064 <_malloc_r+0x620>
    2f54:	00c00504 	movi	r3,20
    2f58:	18808136 	bltu	r3,r2,3160 <_malloc_r+0x71c>
    2f5c:	11401704 	addi	r5,r2,92
    2f60:	10c016c4 	addi	r3,r2,91
    2f64:	294b883a 	add	r5,r5,r5
    2f68:	294b883a 	add	r5,r5,r5
    2f6c:	294b883a 	add	r5,r5,r5
    2f70:	994b883a 	add	r5,r19,r5
    2f74:	28800017 	ldw	r2,0(r5)
    2f78:	01800074 	movhi	r6,1
    2f7c:	297ffe04 	addi	r5,r5,-8
    2f80:	31875b04 	addi	r6,r6,7532
    2f84:	28806526 	beq	r5,r2,311c <_malloc_r+0x6d8>
    2f88:	01bfff04 	movi	r6,-4
    2f8c:	10c00117 	ldw	r3,4(r2)
    2f90:	1986703a 	and	r3,r3,r6
    2f94:	38c0022e 	bgeu	r7,r3,2fa0 <_malloc_r+0x55c>
    2f98:	10800217 	ldw	r2,8(r2)
    2f9c:	28bffb1e 	bne	r5,r2,2f8c <__alt_data_end+0xff002f8c>
    2fa0:	11400317 	ldw	r5,12(r2)
    2fa4:	98c00117 	ldw	r3,4(r19)
    2fa8:	81400315 	stw	r5,12(r16)
    2fac:	80800215 	stw	r2,8(r16)
    2fb0:	2c000215 	stw	r16,8(r5)
    2fb4:	14000315 	stw	r16,12(r2)
    2fb8:	003ef806 	br	2b9c <__alt_data_end+0xff002b9c>
    2fbc:	88c00054 	ori	r3,r17,1
    2fc0:	80c00115 	stw	r3,4(r16)
    2fc4:	8463883a 	add	r17,r16,r17
    2fc8:	34400515 	stw	r17,20(r6)
    2fcc:	34400415 	stw	r17,16(r6)
    2fd0:	10c00054 	ori	r3,r2,1
    2fd4:	8a000315 	stw	r8,12(r17)
    2fd8:	8a000215 	stw	r8,8(r17)
    2fdc:	88c00115 	stw	r3,4(r17)
    2fe0:	88a3883a 	add	r17,r17,r2
    2fe4:	88800015 	stw	r2,0(r17)
    2fe8:	9009883a 	mov	r4,r18
    2fec:	000ed5c0 	call	ed5c <__malloc_unlock>
    2ff0:	80800204 	addi	r2,r16,8
    2ff4:	003f3c06 	br	2ce8 <__alt_data_end+0xff002ce8>
    2ff8:	30c00117 	ldw	r3,4(r6)
    2ffc:	003ee706 	br	2b9c <__alt_data_end+0xff002b9c>
    3000:	5ac00044 	addi	r11,r11,1
    3004:	588000cc 	andi	r2,r11,3
    3008:	31800204 	addi	r6,r6,8
    300c:	103efd1e 	bne	r2,zero,2c04 <__alt_data_end+0xff002c04>
    3010:	00002406 	br	30a4 <_malloc_r+0x660>
    3014:	14000317 	ldw	r16,12(r2)
    3018:	143f251e 	bne	r2,r16,2cb0 <__alt_data_end+0xff002cb0>
    301c:	21000084 	addi	r4,r4,2
    3020:	003ebc06 	br	2b14 <__alt_data_end+0xff002b14>
    3024:	8085883a 	add	r2,r16,r2
    3028:	10c00117 	ldw	r3,4(r2)
    302c:	81000317 	ldw	r4,12(r16)
    3030:	81400217 	ldw	r5,8(r16)
    3034:	18c00054 	ori	r3,r3,1
    3038:	10c00115 	stw	r3,4(r2)
    303c:	29000315 	stw	r4,12(r5)
    3040:	21400215 	stw	r5,8(r4)
    3044:	9009883a 	mov	r4,r18
    3048:	000ed5c0 	call	ed5c <__malloc_unlock>
    304c:	80800204 	addi	r2,r16,8
    3050:	003f2506 	br	2ce8 <__alt_data_end+0xff002ce8>
    3054:	12001704 	addi	r8,r2,92
    3058:	11c016c4 	addi	r7,r2,91
    305c:	4209883a 	add	r4,r8,r8
    3060:	003e9606 	br	2abc <__alt_data_end+0xff002abc>
    3064:	3804d1ba 	srli	r2,r7,6
    3068:	11400e44 	addi	r5,r2,57
    306c:	10c00e04 	addi	r3,r2,56
    3070:	294b883a 	add	r5,r5,r5
    3074:	003fbc06 	br	2f68 <__alt_data_end+0xff002f68>
    3078:	84ff5926 	beq	r16,r19,2de0 <__alt_data_end+0xff002de0>
    307c:	00800074 	movhi	r2,1
    3080:	10875b04 	addi	r2,r2,7532
    3084:	14000217 	ldw	r16,8(r2)
    3088:	00bfff04 	movi	r2,-4
    308c:	80c00117 	ldw	r3,4(r16)
    3090:	1886703a 	and	r3,r3,r2
    3094:	003f9106 	br	2edc <__alt_data_end+0xff002edc>
    3098:	60800217 	ldw	r2,8(r12)
    309c:	213fffc4 	addi	r4,r4,-1
    30a0:	1300651e 	bne	r2,r12,3238 <_malloc_r+0x7f4>
    30a4:	208000cc 	andi	r2,r4,3
    30a8:	633ffe04 	addi	r12,r12,-8
    30ac:	103ffa1e 	bne	r2,zero,3098 <__alt_data_end+0xff003098>
    30b0:	98800117 	ldw	r2,4(r19)
    30b4:	0146303a 	nor	r3,zero,r5
    30b8:	1884703a 	and	r2,r3,r2
    30bc:	98800115 	stw	r2,4(r19)
    30c0:	294b883a 	add	r5,r5,r5
    30c4:	117f2836 	bltu	r2,r5,2d68 <__alt_data_end+0xff002d68>
    30c8:	283f2726 	beq	r5,zero,2d68 <__alt_data_end+0xff002d68>
    30cc:	2886703a 	and	r3,r5,r2
    30d0:	5809883a 	mov	r4,r11
    30d4:	183ec31e 	bne	r3,zero,2be4 <__alt_data_end+0xff002be4>
    30d8:	294b883a 	add	r5,r5,r5
    30dc:	2886703a 	and	r3,r5,r2
    30e0:	21000104 	addi	r4,r4,4
    30e4:	183ffc26 	beq	r3,zero,30d8 <__alt_data_end+0xff0030d8>
    30e8:	003ebe06 	br	2be4 <__alt_data_end+0xff002be4>
    30ec:	00c05504 	movi	r3,340
    30f0:	18801236 	bltu	r3,r2,313c <_malloc_r+0x6f8>
    30f4:	8804d3fa 	srli	r2,r17,15
    30f8:	12001e04 	addi	r8,r2,120
    30fc:	11c01dc4 	addi	r7,r2,119
    3100:	4209883a 	add	r4,r8,r8
    3104:	003e6d06 	br	2abc <__alt_data_end+0xff002abc>
    3108:	00c40004 	movi	r3,4096
    310c:	003f4606 	br	2e28 <__alt_data_end+0xff002e28>
    3110:	00800044 	movi	r2,1
    3114:	a0800115 	stw	r2,4(r20)
    3118:	003f7406 	br	2eec <__alt_data_end+0xff002eec>
    311c:	1805d0ba 	srai	r2,r3,2
    3120:	01c00044 	movi	r7,1
    3124:	30c00117 	ldw	r3,4(r6)
    3128:	388e983a 	sll	r7,r7,r2
    312c:	2805883a 	mov	r2,r5
    3130:	38c6b03a 	or	r3,r7,r3
    3134:	30c00115 	stw	r3,4(r6)
    3138:	003f9b06 	br	2fa8 <__alt_data_end+0xff002fa8>
    313c:	00c15504 	movi	r3,1364
    3140:	18801a36 	bltu	r3,r2,31ac <_malloc_r+0x768>
    3144:	8804d4ba 	srli	r2,r17,18
    3148:	12001f44 	addi	r8,r2,125
    314c:	11c01f04 	addi	r7,r2,124
    3150:	4209883a 	add	r4,r8,r8
    3154:	003e5906 	br	2abc <__alt_data_end+0xff002abc>
    3158:	ad400404 	addi	r21,r21,16
    315c:	003f1706 	br	2dbc <__alt_data_end+0xff002dbc>
    3160:	00c01504 	movi	r3,84
    3164:	18802336 	bltu	r3,r2,31f4 <_malloc_r+0x7b0>
    3168:	3804d33a 	srli	r2,r7,12
    316c:	11401bc4 	addi	r5,r2,111
    3170:	10c01b84 	addi	r3,r2,110
    3174:	294b883a 	add	r5,r5,r5
    3178:	003f7b06 	br	2f68 <__alt_data_end+0xff002f68>
    317c:	9c000217 	ldw	r16,8(r19)
    3180:	00bfff04 	movi	r2,-4
    3184:	80c00117 	ldw	r3,4(r16)
    3188:	1886703a 	and	r3,r3,r2
    318c:	003f5306 	br	2edc <__alt_data_end+0xff002edc>
    3190:	3083ffcc 	andi	r2,r6,4095
    3194:	103f181e 	bne	r2,zero,2df8 <__alt_data_end+0xff002df8>
    3198:	99000217 	ldw	r4,8(r19)
    319c:	b545883a 	add	r2,r22,r21
    31a0:	10800054 	ori	r2,r2,1
    31a4:	20800115 	stw	r2,4(r4)
    31a8:	003f3e06 	br	2ea4 <__alt_data_end+0xff002ea4>
    31ac:	01003f84 	movi	r4,254
    31b0:	02001fc4 	movi	r8,127
    31b4:	01c01f84 	movi	r7,126
    31b8:	003e4006 	br	2abc <__alt_data_end+0xff002abc>
    31bc:	00800074 	movhi	r2,1
    31c0:	108e0604 	addi	r2,r2,14360
    31c4:	15000015 	stw	r20,0(r2)
    31c8:	003f1106 	br	2e10 <__alt_data_end+0xff002e10>
    31cc:	00800044 	movi	r2,1
    31d0:	002b883a 	mov	r21,zero
    31d4:	003f1f06 	br	2e54 <__alt_data_end+0xff002e54>
    31d8:	81400204 	addi	r5,r16,8
    31dc:	9009883a 	mov	r4,r18
    31e0:	00078940 	call	7894 <_free_r>
    31e4:	00800074 	movhi	r2,1
    31e8:	10953304 	addi	r2,r2,21708
    31ec:	10c00017 	ldw	r3,0(r2)
    31f0:	003f2c06 	br	2ea4 <__alt_data_end+0xff002ea4>
    31f4:	00c05504 	movi	r3,340
    31f8:	18800536 	bltu	r3,r2,3210 <_malloc_r+0x7cc>
    31fc:	3804d3fa 	srli	r2,r7,15
    3200:	11401e04 	addi	r5,r2,120
    3204:	10c01dc4 	addi	r3,r2,119
    3208:	294b883a 	add	r5,r5,r5
    320c:	003f5606 	br	2f68 <__alt_data_end+0xff002f68>
    3210:	00c15504 	movi	r3,1364
    3214:	18800536 	bltu	r3,r2,322c <_malloc_r+0x7e8>
    3218:	3804d4ba 	srli	r2,r7,18
    321c:	11401f44 	addi	r5,r2,125
    3220:	10c01f04 	addi	r3,r2,124
    3224:	294b883a 	add	r5,r5,r5
    3228:	003f4f06 	br	2f68 <__alt_data_end+0xff002f68>
    322c:	01403f84 	movi	r5,254
    3230:	00c01f84 	movi	r3,126
    3234:	003f4c06 	br	2f68 <__alt_data_end+0xff002f68>
    3238:	98800117 	ldw	r2,4(r19)
    323c:	003fa006 	br	30c0 <__alt_data_end+0xff0030c0>
    3240:	8808d0fa 	srli	r4,r17,3
    3244:	20800044 	addi	r2,r4,1
    3248:	1085883a 	add	r2,r2,r2
    324c:	003e9006 	br	2c90 <__alt_data_end+0xff002c90>

00003250 <_printf_r>:
    3250:	defffd04 	addi	sp,sp,-12
    3254:	2805883a 	mov	r2,r5
    3258:	dfc00015 	stw	ra,0(sp)
    325c:	d9800115 	stw	r6,4(sp)
    3260:	d9c00215 	stw	r7,8(sp)
    3264:	21400217 	ldw	r5,8(r4)
    3268:	d9c00104 	addi	r7,sp,4
    326c:	100d883a 	mov	r6,r2
    3270:	000347c0 	call	347c <___vfprintf_internal_r>
    3274:	dfc00017 	ldw	ra,0(sp)
    3278:	dec00304 	addi	sp,sp,12
    327c:	f800283a 	ret

00003280 <printf>:
    3280:	defffc04 	addi	sp,sp,-16
    3284:	dfc00015 	stw	ra,0(sp)
    3288:	d9400115 	stw	r5,4(sp)
    328c:	d9800215 	stw	r6,8(sp)
    3290:	d9c00315 	stw	r7,12(sp)
    3294:	00800074 	movhi	r2,1
    3298:	108e0904 	addi	r2,r2,14372
    329c:	10800017 	ldw	r2,0(r2)
    32a0:	200b883a 	mov	r5,r4
    32a4:	d9800104 	addi	r6,sp,4
    32a8:	11000217 	ldw	r4,8(r2)
    32ac:	00056740 	call	5674 <__vfprintf_internal>
    32b0:	dfc00017 	ldw	ra,0(sp)
    32b4:	dec00404 	addi	sp,sp,16
    32b8:	f800283a 	ret

000032bc <_puts_r>:
    32bc:	defff604 	addi	sp,sp,-40
    32c0:	dc000715 	stw	r16,28(sp)
    32c4:	2021883a 	mov	r16,r4
    32c8:	2809883a 	mov	r4,r5
    32cc:	dc400815 	stw	r17,32(sp)
    32d0:	dfc00915 	stw	ra,36(sp)
    32d4:	2823883a 	mov	r17,r5
    32d8:	00033e40 	call	33e4 <strlen>
    32dc:	10c00044 	addi	r3,r2,1
    32e0:	d8800115 	stw	r2,4(sp)
    32e4:	00800074 	movhi	r2,1
    32e8:	10865104 	addi	r2,r2,6468
    32ec:	d8800215 	stw	r2,8(sp)
    32f0:	00800044 	movi	r2,1
    32f4:	d8800315 	stw	r2,12(sp)
    32f8:	00800084 	movi	r2,2
    32fc:	dc400015 	stw	r17,0(sp)
    3300:	d8c00615 	stw	r3,24(sp)
    3304:	dec00415 	stw	sp,16(sp)
    3308:	d8800515 	stw	r2,20(sp)
    330c:	80000226 	beq	r16,zero,3318 <_puts_r+0x5c>
    3310:	80800e17 	ldw	r2,56(r16)
    3314:	10001426 	beq	r2,zero,3368 <_puts_r+0xac>
    3318:	81400217 	ldw	r5,8(r16)
    331c:	2880030b 	ldhu	r2,12(r5)
    3320:	10c8000c 	andi	r3,r2,8192
    3324:	1800061e 	bne	r3,zero,3340 <_puts_r+0x84>
    3328:	29001917 	ldw	r4,100(r5)
    332c:	00f7ffc4 	movi	r3,-8193
    3330:	10880014 	ori	r2,r2,8192
    3334:	20c6703a 	and	r3,r4,r3
    3338:	2880030d 	sth	r2,12(r5)
    333c:	28c01915 	stw	r3,100(r5)
    3340:	d9800404 	addi	r6,sp,16
    3344:	8009883a 	mov	r4,r16
    3348:	0007ba40 	call	7ba4 <__sfvwrite_r>
    334c:	1000091e 	bne	r2,zero,3374 <_puts_r+0xb8>
    3350:	00800284 	movi	r2,10
    3354:	dfc00917 	ldw	ra,36(sp)
    3358:	dc400817 	ldw	r17,32(sp)
    335c:	dc000717 	ldw	r16,28(sp)
    3360:	dec00a04 	addi	sp,sp,40
    3364:	f800283a 	ret
    3368:	8009883a 	mov	r4,r16
    336c:	00077200 	call	7720 <__sinit>
    3370:	003fe906 	br	3318 <__alt_data_end+0xff003318>
    3374:	00bfffc4 	movi	r2,-1
    3378:	003ff606 	br	3354 <__alt_data_end+0xff003354>

0000337c <puts>:
    337c:	00800074 	movhi	r2,1
    3380:	108e0904 	addi	r2,r2,14372
    3384:	200b883a 	mov	r5,r4
    3388:	11000017 	ldw	r4,0(r2)
    338c:	00032bc1 	jmpi	32bc <_puts_r>

00003390 <_sbrk_r>:
    3390:	defffd04 	addi	sp,sp,-12
    3394:	dc000015 	stw	r16,0(sp)
    3398:	04000074 	movhi	r16,1
    339c:	dc400115 	stw	r17,4(sp)
    33a0:	84152604 	addi	r16,r16,21656
    33a4:	2023883a 	mov	r17,r4
    33a8:	2809883a 	mov	r4,r5
    33ac:	dfc00215 	stw	ra,8(sp)
    33b0:	80000015 	stw	zero,0(r16)
    33b4:	000ef1c0 	call	ef1c <sbrk>
    33b8:	00ffffc4 	movi	r3,-1
    33bc:	10c00526 	beq	r2,r3,33d4 <_sbrk_r+0x44>
    33c0:	dfc00217 	ldw	ra,8(sp)
    33c4:	dc400117 	ldw	r17,4(sp)
    33c8:	dc000017 	ldw	r16,0(sp)
    33cc:	dec00304 	addi	sp,sp,12
    33d0:	f800283a 	ret
    33d4:	80c00017 	ldw	r3,0(r16)
    33d8:	183ff926 	beq	r3,zero,33c0 <__alt_data_end+0xff0033c0>
    33dc:	88c00015 	stw	r3,0(r17)
    33e0:	003ff706 	br	33c0 <__alt_data_end+0xff0033c0>

000033e4 <strlen>:
    33e4:	208000cc 	andi	r2,r4,3
    33e8:	10002026 	beq	r2,zero,346c <strlen+0x88>
    33ec:	20800007 	ldb	r2,0(r4)
    33f0:	10002026 	beq	r2,zero,3474 <strlen+0x90>
    33f4:	2005883a 	mov	r2,r4
    33f8:	00000206 	br	3404 <strlen+0x20>
    33fc:	10c00007 	ldb	r3,0(r2)
    3400:	18001826 	beq	r3,zero,3464 <strlen+0x80>
    3404:	10800044 	addi	r2,r2,1
    3408:	10c000cc 	andi	r3,r2,3
    340c:	183ffb1e 	bne	r3,zero,33fc <__alt_data_end+0xff0033fc>
    3410:	10c00017 	ldw	r3,0(r2)
    3414:	01ffbff4 	movhi	r7,65279
    3418:	39ffbfc4 	addi	r7,r7,-257
    341c:	00ca303a 	nor	r5,zero,r3
    3420:	01a02074 	movhi	r6,32897
    3424:	19c7883a 	add	r3,r3,r7
    3428:	31a02004 	addi	r6,r6,-32640
    342c:	1946703a 	and	r3,r3,r5
    3430:	1986703a 	and	r3,r3,r6
    3434:	1800091e 	bne	r3,zero,345c <strlen+0x78>
    3438:	10800104 	addi	r2,r2,4
    343c:	10c00017 	ldw	r3,0(r2)
    3440:	19cb883a 	add	r5,r3,r7
    3444:	00c6303a 	nor	r3,zero,r3
    3448:	28c6703a 	and	r3,r5,r3
    344c:	1986703a 	and	r3,r3,r6
    3450:	183ff926 	beq	r3,zero,3438 <__alt_data_end+0xff003438>
    3454:	00000106 	br	345c <strlen+0x78>
    3458:	10800044 	addi	r2,r2,1
    345c:	10c00007 	ldb	r3,0(r2)
    3460:	183ffd1e 	bne	r3,zero,3458 <__alt_data_end+0xff003458>
    3464:	1105c83a 	sub	r2,r2,r4
    3468:	f800283a 	ret
    346c:	2005883a 	mov	r2,r4
    3470:	003fe706 	br	3410 <__alt_data_end+0xff003410>
    3474:	0005883a 	mov	r2,zero
    3478:	f800283a 	ret

0000347c <___vfprintf_internal_r>:
    347c:	deffb804 	addi	sp,sp,-288
    3480:	dfc04715 	stw	ra,284(sp)
    3484:	ddc04515 	stw	r23,276(sp)
    3488:	dd404315 	stw	r21,268(sp)
    348c:	d9002c15 	stw	r4,176(sp)
    3490:	282f883a 	mov	r23,r5
    3494:	302b883a 	mov	r21,r6
    3498:	d9c02d15 	stw	r7,180(sp)
    349c:	df004615 	stw	fp,280(sp)
    34a0:	dd804415 	stw	r22,272(sp)
    34a4:	dd004215 	stw	r20,264(sp)
    34a8:	dcc04115 	stw	r19,260(sp)
    34ac:	dc804015 	stw	r18,256(sp)
    34b0:	dc403f15 	stw	r17,252(sp)
    34b4:	dc003e15 	stw	r16,248(sp)
    34b8:	00082940 	call	8294 <_localeconv_r>
    34bc:	10800017 	ldw	r2,0(r2)
    34c0:	1009883a 	mov	r4,r2
    34c4:	d8803415 	stw	r2,208(sp)
    34c8:	00033e40 	call	33e4 <strlen>
    34cc:	d8803715 	stw	r2,220(sp)
    34d0:	d8802c17 	ldw	r2,176(sp)
    34d4:	10000226 	beq	r2,zero,34e0 <___vfprintf_internal_r+0x64>
    34d8:	10800e17 	ldw	r2,56(r2)
    34dc:	1000f926 	beq	r2,zero,38c4 <___vfprintf_internal_r+0x448>
    34e0:	b880030b 	ldhu	r2,12(r23)
    34e4:	10c8000c 	andi	r3,r2,8192
    34e8:	1800061e 	bne	r3,zero,3504 <___vfprintf_internal_r+0x88>
    34ec:	b9001917 	ldw	r4,100(r23)
    34f0:	00f7ffc4 	movi	r3,-8193
    34f4:	10880014 	ori	r2,r2,8192
    34f8:	20c6703a 	and	r3,r4,r3
    34fc:	b880030d 	sth	r2,12(r23)
    3500:	b8c01915 	stw	r3,100(r23)
    3504:	10c0020c 	andi	r3,r2,8
    3508:	1800c126 	beq	r3,zero,3810 <___vfprintf_internal_r+0x394>
    350c:	b8c00417 	ldw	r3,16(r23)
    3510:	1800bf26 	beq	r3,zero,3810 <___vfprintf_internal_r+0x394>
    3514:	1080068c 	andi	r2,r2,26
    3518:	00c00284 	movi	r3,10
    351c:	10c0c426 	beq	r2,r3,3830 <___vfprintf_internal_r+0x3b4>
    3520:	d8c00404 	addi	r3,sp,16
    3524:	05000074 	movhi	r20,1
    3528:	d9001e04 	addi	r4,sp,120
    352c:	a506ae84 	addi	r20,r20,6842
    3530:	d8c01e15 	stw	r3,120(sp)
    3534:	d8002015 	stw	zero,128(sp)
    3538:	d8001f15 	stw	zero,124(sp)
    353c:	d8003315 	stw	zero,204(sp)
    3540:	d8003615 	stw	zero,216(sp)
    3544:	d8003815 	stw	zero,224(sp)
    3548:	1811883a 	mov	r8,r3
    354c:	d8003915 	stw	zero,228(sp)
    3550:	d8003a15 	stw	zero,232(sp)
    3554:	d8002f15 	stw	zero,188(sp)
    3558:	d9002815 	stw	r4,160(sp)
    355c:	a8800007 	ldb	r2,0(r21)
    3560:	10027b26 	beq	r2,zero,3f50 <___vfprintf_internal_r+0xad4>
    3564:	00c00944 	movi	r3,37
    3568:	a821883a 	mov	r16,r21
    356c:	10c0021e 	bne	r2,r3,3578 <___vfprintf_internal_r+0xfc>
    3570:	00001406 	br	35c4 <___vfprintf_internal_r+0x148>
    3574:	10c00326 	beq	r2,r3,3584 <___vfprintf_internal_r+0x108>
    3578:	84000044 	addi	r16,r16,1
    357c:	80800007 	ldb	r2,0(r16)
    3580:	103ffc1e 	bne	r2,zero,3574 <__alt_data_end+0xff003574>
    3584:	8563c83a 	sub	r17,r16,r21
    3588:	88000e26 	beq	r17,zero,35c4 <___vfprintf_internal_r+0x148>
    358c:	d8c02017 	ldw	r3,128(sp)
    3590:	d8801f17 	ldw	r2,124(sp)
    3594:	45400015 	stw	r21,0(r8)
    3598:	1c47883a 	add	r3,r3,r17
    359c:	10800044 	addi	r2,r2,1
    35a0:	d8c02015 	stw	r3,128(sp)
    35a4:	44400115 	stw	r17,4(r8)
    35a8:	d8801f15 	stw	r2,124(sp)
    35ac:	00c001c4 	movi	r3,7
    35b0:	1880a716 	blt	r3,r2,3850 <___vfprintf_internal_r+0x3d4>
    35b4:	42000204 	addi	r8,r8,8
    35b8:	d9402f17 	ldw	r5,188(sp)
    35bc:	2c4b883a 	add	r5,r5,r17
    35c0:	d9402f15 	stw	r5,188(sp)
    35c4:	80800007 	ldb	r2,0(r16)
    35c8:	1000a826 	beq	r2,zero,386c <___vfprintf_internal_r+0x3f0>
    35cc:	84400047 	ldb	r17,1(r16)
    35d0:	00bfffc4 	movi	r2,-1
    35d4:	85400044 	addi	r21,r16,1
    35d8:	d8002785 	stb	zero,158(sp)
    35dc:	0007883a 	mov	r3,zero
    35e0:	000f883a 	mov	r7,zero
    35e4:	d8802915 	stw	r2,164(sp)
    35e8:	d8003115 	stw	zero,196(sp)
    35ec:	0025883a 	mov	r18,zero
    35f0:	01401604 	movi	r5,88
    35f4:	01800244 	movi	r6,9
    35f8:	02800a84 	movi	r10,42
    35fc:	02401b04 	movi	r9,108
    3600:	ad400044 	addi	r21,r21,1
    3604:	88bff804 	addi	r2,r17,-32
    3608:	28830436 	bltu	r5,r2,421c <___vfprintf_internal_r+0xda0>
    360c:	100490ba 	slli	r2,r2,2
    3610:	01000034 	movhi	r4,0
    3614:	210d8904 	addi	r4,r4,13860
    3618:	1105883a 	add	r2,r2,r4
    361c:	10800017 	ldw	r2,0(r2)
    3620:	1000683a 	jmp	r2
    3624:	0000413c 	xorhi	zero,zero,260
    3628:	0000421c 	xori	zero,zero,264
    362c:	0000421c 	xori	zero,zero,264
    3630:	0000415c 	xori	zero,zero,261
    3634:	0000421c 	xori	zero,zero,264
    3638:	0000421c 	xori	zero,zero,264
    363c:	0000421c 	xori	zero,zero,264
    3640:	0000421c 	xori	zero,zero,264
    3644:	0000421c 	xori	zero,zero,264
    3648:	0000421c 	xori	zero,zero,264
    364c:	000038d0 	cmplti	zero,zero,227
    3650:	00004078 	rdprs	zero,zero,257
    3654:	0000421c 	xori	zero,zero,264
    3658:	00003798 	cmpnei	zero,zero,222
    365c:	000038f8 	rdprs	zero,zero,227
    3660:	0000421c 	xori	zero,zero,264
    3664:	00003938 	rdprs	zero,zero,228
    3668:	00003944 	movi	zero,229
    366c:	00003944 	movi	zero,229
    3670:	00003944 	movi	zero,229
    3674:	00003944 	movi	zero,229
    3678:	00003944 	movi	zero,229
    367c:	00003944 	movi	zero,229
    3680:	00003944 	movi	zero,229
    3684:	00003944 	movi	zero,229
    3688:	00003944 	movi	zero,229
    368c:	0000421c 	xori	zero,zero,264
    3690:	0000421c 	xori	zero,zero,264
    3694:	0000421c 	xori	zero,zero,264
    3698:	0000421c 	xori	zero,zero,264
    369c:	0000421c 	xori	zero,zero,264
    36a0:	0000421c 	xori	zero,zero,264
    36a4:	0000421c 	xori	zero,zero,264
    36a8:	0000421c 	xori	zero,zero,264
    36ac:	0000421c 	xori	zero,zero,264
    36b0:	0000421c 	xori	zero,zero,264
    36b4:	00003978 	rdprs	zero,zero,229
    36b8:	00003a34 	movhi	zero,232
    36bc:	0000421c 	xori	zero,zero,264
    36c0:	00003a34 	movhi	zero,232
    36c4:	0000421c 	xori	zero,zero,264
    36c8:	0000421c 	xori	zero,zero,264
    36cc:	0000421c 	xori	zero,zero,264
    36d0:	0000421c 	xori	zero,zero,264
    36d4:	00003ad4 	movui	zero,235
    36d8:	0000421c 	xori	zero,zero,264
    36dc:	0000421c 	xori	zero,zero,264
    36e0:	00003ae0 	cmpeqi	zero,zero,235
    36e4:	0000421c 	xori	zero,zero,264
    36e8:	0000421c 	xori	zero,zero,264
    36ec:	0000421c 	xori	zero,zero,264
    36f0:	0000421c 	xori	zero,zero,264
    36f4:	0000421c 	xori	zero,zero,264
    36f8:	00003f58 	cmpnei	zero,zero,253
    36fc:	0000421c 	xori	zero,zero,264
    3700:	0000421c 	xori	zero,zero,264
    3704:	00003fb8 	rdprs	zero,zero,254
    3708:	0000421c 	xori	zero,zero,264
    370c:	0000421c 	xori	zero,zero,264
    3710:	0000421c 	xori	zero,zero,264
    3714:	0000421c 	xori	zero,zero,264
    3718:	0000421c 	xori	zero,zero,264
    371c:	0000421c 	xori	zero,zero,264
    3720:	0000421c 	xori	zero,zero,264
    3724:	0000421c 	xori	zero,zero,264
    3728:	0000421c 	xori	zero,zero,264
    372c:	0000421c 	xori	zero,zero,264
    3730:	000041c8 	cmpgei	zero,zero,263
    3734:	00004168 	cmpgeui	zero,zero,261
    3738:	00003a34 	movhi	zero,232
    373c:	00003a34 	movhi	zero,232
    3740:	00003a34 	movhi	zero,232
    3744:	00004178 	rdprs	zero,zero,261
    3748:	00004168 	cmpgeui	zero,zero,261
    374c:	0000421c 	xori	zero,zero,264
    3750:	0000421c 	xori	zero,zero,264
    3754:	00004184 	movi	zero,262
    3758:	0000421c 	xori	zero,zero,264
    375c:	00004194 	movui	zero,262
    3760:	00004068 	cmpgeui	zero,zero,257
    3764:	000037a4 	muli	zero,zero,222
    3768:	00004088 	cmpgei	zero,zero,258
    376c:	0000421c 	xori	zero,zero,264
    3770:	00004094 	movui	zero,258
    3774:	0000421c 	xori	zero,zero,264
    3778:	000040f0 	cmpltui	zero,zero,259
    377c:	0000421c 	xori	zero,zero,264
    3780:	0000421c 	xori	zero,zero,264
    3784:	00004100 	call	410 <init_camera+0x180>
    3788:	d9003117 	ldw	r4,196(sp)
    378c:	d8802d15 	stw	r2,180(sp)
    3790:	0109c83a 	sub	r4,zero,r4
    3794:	d9003115 	stw	r4,196(sp)
    3798:	94800114 	ori	r18,r18,4
    379c:	ac400007 	ldb	r17,0(r21)
    37a0:	003f9706 	br	3600 <__alt_data_end+0xff003600>
    37a4:	00800c04 	movi	r2,48
    37a8:	d9002d17 	ldw	r4,180(sp)
    37ac:	d9402917 	ldw	r5,164(sp)
    37b0:	d8802705 	stb	r2,156(sp)
    37b4:	00801e04 	movi	r2,120
    37b8:	d8802745 	stb	r2,157(sp)
    37bc:	d8002785 	stb	zero,158(sp)
    37c0:	20c00104 	addi	r3,r4,4
    37c4:	24c00017 	ldw	r19,0(r4)
    37c8:	002d883a 	mov	r22,zero
    37cc:	90800094 	ori	r2,r18,2
    37d0:	28029a16 	blt	r5,zero,423c <___vfprintf_internal_r+0xdc0>
    37d4:	00bfdfc4 	movi	r2,-129
    37d8:	90a4703a 	and	r18,r18,r2
    37dc:	d8c02d15 	stw	r3,180(sp)
    37e0:	94800094 	ori	r18,r18,2
    37e4:	9802871e 	bne	r19,zero,4204 <___vfprintf_internal_r+0xd88>
    37e8:	00800074 	movhi	r2,1
    37ec:	1086a704 	addi	r2,r2,6812
    37f0:	d8803915 	stw	r2,228(sp)
    37f4:	04401e04 	movi	r17,120
    37f8:	d8802917 	ldw	r2,164(sp)
    37fc:	0039883a 	mov	fp,zero
    3800:	1001e926 	beq	r2,zero,3fa8 <___vfprintf_internal_r+0xb2c>
    3804:	0027883a 	mov	r19,zero
    3808:	002d883a 	mov	r22,zero
    380c:	00020506 	br	4024 <___vfprintf_internal_r+0xba8>
    3810:	d9002c17 	ldw	r4,176(sp)
    3814:	b80b883a 	mov	r5,r23
    3818:	000574c0 	call	574c <__swsetup_r>
    381c:	1005ac1e 	bne	r2,zero,4ed0 <___vfprintf_internal_r+0x1a54>
    3820:	b880030b 	ldhu	r2,12(r23)
    3824:	00c00284 	movi	r3,10
    3828:	1080068c 	andi	r2,r2,26
    382c:	10ff3c1e 	bne	r2,r3,3520 <__alt_data_end+0xff003520>
    3830:	b880038f 	ldh	r2,14(r23)
    3834:	103f3a16 	blt	r2,zero,3520 <__alt_data_end+0xff003520>
    3838:	d9c02d17 	ldw	r7,180(sp)
    383c:	d9002c17 	ldw	r4,176(sp)
    3840:	a80d883a 	mov	r6,r21
    3844:	b80b883a 	mov	r5,r23
    3848:	00056900 	call	5690 <__sbprintf>
    384c:	00001106 	br	3894 <___vfprintf_internal_r+0x418>
    3850:	d9002c17 	ldw	r4,176(sp)
    3854:	d9801e04 	addi	r6,sp,120
    3858:	b80b883a 	mov	r5,r23
    385c:	000a2180 	call	a218 <__sprint_r>
    3860:	1000081e 	bne	r2,zero,3884 <___vfprintf_internal_r+0x408>
    3864:	da000404 	addi	r8,sp,16
    3868:	003f5306 	br	35b8 <__alt_data_end+0xff0035b8>
    386c:	d8802017 	ldw	r2,128(sp)
    3870:	10000426 	beq	r2,zero,3884 <___vfprintf_internal_r+0x408>
    3874:	d9002c17 	ldw	r4,176(sp)
    3878:	d9801e04 	addi	r6,sp,120
    387c:	b80b883a 	mov	r5,r23
    3880:	000a2180 	call	a218 <__sprint_r>
    3884:	b880030b 	ldhu	r2,12(r23)
    3888:	1080100c 	andi	r2,r2,64
    388c:	1005901e 	bne	r2,zero,4ed0 <___vfprintf_internal_r+0x1a54>
    3890:	d8802f17 	ldw	r2,188(sp)
    3894:	dfc04717 	ldw	ra,284(sp)
    3898:	df004617 	ldw	fp,280(sp)
    389c:	ddc04517 	ldw	r23,276(sp)
    38a0:	dd804417 	ldw	r22,272(sp)
    38a4:	dd404317 	ldw	r21,268(sp)
    38a8:	dd004217 	ldw	r20,264(sp)
    38ac:	dcc04117 	ldw	r19,260(sp)
    38b0:	dc804017 	ldw	r18,256(sp)
    38b4:	dc403f17 	ldw	r17,252(sp)
    38b8:	dc003e17 	ldw	r16,248(sp)
    38bc:	dec04804 	addi	sp,sp,288
    38c0:	f800283a 	ret
    38c4:	d9002c17 	ldw	r4,176(sp)
    38c8:	00077200 	call	7720 <__sinit>
    38cc:	003f0406 	br	34e0 <__alt_data_end+0xff0034e0>
    38d0:	d8802d17 	ldw	r2,180(sp)
    38d4:	d9002d17 	ldw	r4,180(sp)
    38d8:	10800017 	ldw	r2,0(r2)
    38dc:	d8803115 	stw	r2,196(sp)
    38e0:	20800104 	addi	r2,r4,4
    38e4:	d9003117 	ldw	r4,196(sp)
    38e8:	203fa716 	blt	r4,zero,3788 <__alt_data_end+0xff003788>
    38ec:	d8802d15 	stw	r2,180(sp)
    38f0:	ac400007 	ldb	r17,0(r21)
    38f4:	003f4206 	br	3600 <__alt_data_end+0xff003600>
    38f8:	ac400007 	ldb	r17,0(r21)
    38fc:	aac00044 	addi	r11,r21,1
    3900:	8a872826 	beq	r17,r10,55a4 <___vfprintf_internal_r+0x2128>
    3904:	88bff404 	addi	r2,r17,-48
    3908:	0009883a 	mov	r4,zero
    390c:	30867d36 	bltu	r6,r2,5304 <___vfprintf_internal_r+0x1e88>
    3910:	5c400007 	ldb	r17,0(r11)
    3914:	210002a4 	muli	r4,r4,10
    3918:	5d400044 	addi	r21,r11,1
    391c:	a817883a 	mov	r11,r21
    3920:	2089883a 	add	r4,r4,r2
    3924:	88bff404 	addi	r2,r17,-48
    3928:	30bff92e 	bgeu	r6,r2,3910 <__alt_data_end+0xff003910>
    392c:	2005c916 	blt	r4,zero,5054 <___vfprintf_internal_r+0x1bd8>
    3930:	d9002915 	stw	r4,164(sp)
    3934:	003f3306 	br	3604 <__alt_data_end+0xff003604>
    3938:	94802014 	ori	r18,r18,128
    393c:	ac400007 	ldb	r17,0(r21)
    3940:	003f2f06 	br	3600 <__alt_data_end+0xff003600>
    3944:	a809883a 	mov	r4,r21
    3948:	d8003115 	stw	zero,196(sp)
    394c:	88bff404 	addi	r2,r17,-48
    3950:	0017883a 	mov	r11,zero
    3954:	24400007 	ldb	r17,0(r4)
    3958:	5ac002a4 	muli	r11,r11,10
    395c:	ad400044 	addi	r21,r21,1
    3960:	a809883a 	mov	r4,r21
    3964:	12d7883a 	add	r11,r2,r11
    3968:	88bff404 	addi	r2,r17,-48
    396c:	30bff92e 	bgeu	r6,r2,3954 <__alt_data_end+0xff003954>
    3970:	dac03115 	stw	r11,196(sp)
    3974:	003f2306 	br	3604 <__alt_data_end+0xff003604>
    3978:	18c03fcc 	andi	r3,r3,255
    397c:	18072b1e 	bne	r3,zero,562c <___vfprintf_internal_r+0x21b0>
    3980:	94800414 	ori	r18,r18,16
    3984:	9080080c 	andi	r2,r18,32
    3988:	10037b26 	beq	r2,zero,4778 <___vfprintf_internal_r+0x12fc>
    398c:	d9402d17 	ldw	r5,180(sp)
    3990:	28800117 	ldw	r2,4(r5)
    3994:	2cc00017 	ldw	r19,0(r5)
    3998:	29400204 	addi	r5,r5,8
    399c:	d9402d15 	stw	r5,180(sp)
    39a0:	102d883a 	mov	r22,r2
    39a4:	10044b16 	blt	r2,zero,4ad4 <___vfprintf_internal_r+0x1658>
    39a8:	d9402917 	ldw	r5,164(sp)
    39ac:	df002783 	ldbu	fp,158(sp)
    39b0:	2803bc16 	blt	r5,zero,48a4 <___vfprintf_internal_r+0x1428>
    39b4:	00ffdfc4 	movi	r3,-129
    39b8:	9d84b03a 	or	r2,r19,r22
    39bc:	90e4703a 	and	r18,r18,r3
    39c0:	10017726 	beq	r2,zero,3fa0 <___vfprintf_internal_r+0xb24>
    39c4:	b0038326 	beq	r22,zero,47d4 <___vfprintf_internal_r+0x1358>
    39c8:	dc402a15 	stw	r17,168(sp)
    39cc:	dc001e04 	addi	r16,sp,120
    39d0:	b023883a 	mov	r17,r22
    39d4:	402d883a 	mov	r22,r8
    39d8:	9809883a 	mov	r4,r19
    39dc:	880b883a 	mov	r5,r17
    39e0:	01800284 	movi	r6,10
    39e4:	000f883a 	mov	r7,zero
    39e8:	000c6100 	call	c610 <__umoddi3>
    39ec:	10800c04 	addi	r2,r2,48
    39f0:	843fffc4 	addi	r16,r16,-1
    39f4:	9809883a 	mov	r4,r19
    39f8:	880b883a 	mov	r5,r17
    39fc:	80800005 	stb	r2,0(r16)
    3a00:	01800284 	movi	r6,10
    3a04:	000f883a 	mov	r7,zero
    3a08:	000c0980 	call	c098 <__udivdi3>
    3a0c:	1027883a 	mov	r19,r2
    3a10:	10c4b03a 	or	r2,r2,r3
    3a14:	1823883a 	mov	r17,r3
    3a18:	103fef1e 	bne	r2,zero,39d8 <__alt_data_end+0xff0039d8>
    3a1c:	d8c02817 	ldw	r3,160(sp)
    3a20:	dc402a17 	ldw	r17,168(sp)
    3a24:	b011883a 	mov	r8,r22
    3a28:	1c07c83a 	sub	r3,r3,r16
    3a2c:	d8c02e15 	stw	r3,184(sp)
    3a30:	00005906 	br	3b98 <___vfprintf_internal_r+0x71c>
    3a34:	18c03fcc 	andi	r3,r3,255
    3a38:	1806fa1e 	bne	r3,zero,5624 <___vfprintf_internal_r+0x21a8>
    3a3c:	9080020c 	andi	r2,r18,8
    3a40:	10048a26 	beq	r2,zero,4c6c <___vfprintf_internal_r+0x17f0>
    3a44:	d8c02d17 	ldw	r3,180(sp)
    3a48:	d9002d17 	ldw	r4,180(sp)
    3a4c:	d9402d17 	ldw	r5,180(sp)
    3a50:	18c00017 	ldw	r3,0(r3)
    3a54:	21000117 	ldw	r4,4(r4)
    3a58:	29400204 	addi	r5,r5,8
    3a5c:	d8c03615 	stw	r3,216(sp)
    3a60:	d9003815 	stw	r4,224(sp)
    3a64:	d9402d15 	stw	r5,180(sp)
    3a68:	d9003617 	ldw	r4,216(sp)
    3a6c:	d9403817 	ldw	r5,224(sp)
    3a70:	da003d15 	stw	r8,244(sp)
    3a74:	04000044 	movi	r16,1
    3a78:	0009e900 	call	9e90 <__fpclassifyd>
    3a7c:	da003d17 	ldw	r8,244(sp)
    3a80:	14041f1e 	bne	r2,r16,4b00 <___vfprintf_internal_r+0x1684>
    3a84:	d9003617 	ldw	r4,216(sp)
    3a88:	d9403817 	ldw	r5,224(sp)
    3a8c:	000d883a 	mov	r6,zero
    3a90:	000f883a 	mov	r7,zero
    3a94:	000d5580 	call	d558 <__ledf2>
    3a98:	da003d17 	ldw	r8,244(sp)
    3a9c:	1005be16 	blt	r2,zero,5198 <___vfprintf_internal_r+0x1d1c>
    3aa0:	df002783 	ldbu	fp,158(sp)
    3aa4:	008011c4 	movi	r2,71
    3aa8:	1445330e 	bge	r2,r17,4f78 <___vfprintf_internal_r+0x1afc>
    3aac:	04000074 	movhi	r16,1
    3ab0:	84069f04 	addi	r16,r16,6780
    3ab4:	00c000c4 	movi	r3,3
    3ab8:	00bfdfc4 	movi	r2,-129
    3abc:	d8c02a15 	stw	r3,168(sp)
    3ac0:	90a4703a 	and	r18,r18,r2
    3ac4:	d8c02e15 	stw	r3,184(sp)
    3ac8:	d8002915 	stw	zero,164(sp)
    3acc:	d8003215 	stw	zero,200(sp)
    3ad0:	00003706 	br	3bb0 <___vfprintf_internal_r+0x734>
    3ad4:	94800214 	ori	r18,r18,8
    3ad8:	ac400007 	ldb	r17,0(r21)
    3adc:	003ec806 	br	3600 <__alt_data_end+0xff003600>
    3ae0:	18c03fcc 	andi	r3,r3,255
    3ae4:	1806db1e 	bne	r3,zero,5654 <___vfprintf_internal_r+0x21d8>
    3ae8:	94800414 	ori	r18,r18,16
    3aec:	9080080c 	andi	r2,r18,32
    3af0:	1002d826 	beq	r2,zero,4654 <___vfprintf_internal_r+0x11d8>
    3af4:	d9402d17 	ldw	r5,180(sp)
    3af8:	d8c02917 	ldw	r3,164(sp)
    3afc:	d8002785 	stb	zero,158(sp)
    3b00:	28800204 	addi	r2,r5,8
    3b04:	2cc00017 	ldw	r19,0(r5)
    3b08:	2d800117 	ldw	r22,4(r5)
    3b0c:	18048f16 	blt	r3,zero,4d4c <___vfprintf_internal_r+0x18d0>
    3b10:	013fdfc4 	movi	r4,-129
    3b14:	9d86b03a 	or	r3,r19,r22
    3b18:	d8802d15 	stw	r2,180(sp)
    3b1c:	9124703a 	and	r18,r18,r4
    3b20:	1802d91e 	bne	r3,zero,4688 <___vfprintf_internal_r+0x120c>
    3b24:	d8c02917 	ldw	r3,164(sp)
    3b28:	0039883a 	mov	fp,zero
    3b2c:	1805c326 	beq	r3,zero,523c <___vfprintf_internal_r+0x1dc0>
    3b30:	0027883a 	mov	r19,zero
    3b34:	002d883a 	mov	r22,zero
    3b38:	dc001e04 	addi	r16,sp,120
    3b3c:	9806d0fa 	srli	r3,r19,3
    3b40:	b008977a 	slli	r4,r22,29
    3b44:	b02cd0fa 	srli	r22,r22,3
    3b48:	9cc001cc 	andi	r19,r19,7
    3b4c:	98800c04 	addi	r2,r19,48
    3b50:	843fffc4 	addi	r16,r16,-1
    3b54:	20e6b03a 	or	r19,r4,r3
    3b58:	80800005 	stb	r2,0(r16)
    3b5c:	9d86b03a 	or	r3,r19,r22
    3b60:	183ff61e 	bne	r3,zero,3b3c <__alt_data_end+0xff003b3c>
    3b64:	90c0004c 	andi	r3,r18,1
    3b68:	18013b26 	beq	r3,zero,4058 <___vfprintf_internal_r+0xbdc>
    3b6c:	10803fcc 	andi	r2,r2,255
    3b70:	1080201c 	xori	r2,r2,128
    3b74:	10bfe004 	addi	r2,r2,-128
    3b78:	00c00c04 	movi	r3,48
    3b7c:	10c13626 	beq	r2,r3,4058 <___vfprintf_internal_r+0xbdc>
    3b80:	80ffffc5 	stb	r3,-1(r16)
    3b84:	d8c02817 	ldw	r3,160(sp)
    3b88:	80bfffc4 	addi	r2,r16,-1
    3b8c:	1021883a 	mov	r16,r2
    3b90:	1887c83a 	sub	r3,r3,r2
    3b94:	d8c02e15 	stw	r3,184(sp)
    3b98:	d8802e17 	ldw	r2,184(sp)
    3b9c:	d9002917 	ldw	r4,164(sp)
    3ba0:	1100010e 	bge	r2,r4,3ba8 <___vfprintf_internal_r+0x72c>
    3ba4:	2005883a 	mov	r2,r4
    3ba8:	d8802a15 	stw	r2,168(sp)
    3bac:	d8003215 	stw	zero,200(sp)
    3bb0:	e7003fcc 	andi	fp,fp,255
    3bb4:	e700201c 	xori	fp,fp,128
    3bb8:	e73fe004 	addi	fp,fp,-128
    3bbc:	e0000326 	beq	fp,zero,3bcc <___vfprintf_internal_r+0x750>
    3bc0:	d8c02a17 	ldw	r3,168(sp)
    3bc4:	18c00044 	addi	r3,r3,1
    3bc8:	d8c02a15 	stw	r3,168(sp)
    3bcc:	90c0008c 	andi	r3,r18,2
    3bd0:	d8c02b15 	stw	r3,172(sp)
    3bd4:	18000326 	beq	r3,zero,3be4 <___vfprintf_internal_r+0x768>
    3bd8:	d8c02a17 	ldw	r3,168(sp)
    3bdc:	18c00084 	addi	r3,r3,2
    3be0:	d8c02a15 	stw	r3,168(sp)
    3be4:	90c0210c 	andi	r3,r18,132
    3be8:	d8c03015 	stw	r3,192(sp)
    3bec:	1801a31e 	bne	r3,zero,427c <___vfprintf_internal_r+0xe00>
    3bf0:	d9003117 	ldw	r4,196(sp)
    3bf4:	d8c02a17 	ldw	r3,168(sp)
    3bf8:	20e7c83a 	sub	r19,r4,r3
    3bfc:	04c19f0e 	bge	zero,r19,427c <___vfprintf_internal_r+0xe00>
    3c00:	02400404 	movi	r9,16
    3c04:	d8c02017 	ldw	r3,128(sp)
    3c08:	d8801f17 	ldw	r2,124(sp)
    3c0c:	4cc50d0e 	bge	r9,r19,5044 <___vfprintf_internal_r+0x1bc8>
    3c10:	01400074 	movhi	r5,1
    3c14:	2946b284 	addi	r5,r5,6858
    3c18:	dc403b15 	stw	r17,236(sp)
    3c1c:	d9403515 	stw	r5,212(sp)
    3c20:	9823883a 	mov	r17,r19
    3c24:	482d883a 	mov	r22,r9
    3c28:	9027883a 	mov	r19,r18
    3c2c:	070001c4 	movi	fp,7
    3c30:	8025883a 	mov	r18,r16
    3c34:	dc002c17 	ldw	r16,176(sp)
    3c38:	00000306 	br	3c48 <___vfprintf_internal_r+0x7cc>
    3c3c:	8c7ffc04 	addi	r17,r17,-16
    3c40:	42000204 	addi	r8,r8,8
    3c44:	b440130e 	bge	r22,r17,3c94 <___vfprintf_internal_r+0x818>
    3c48:	01000074 	movhi	r4,1
    3c4c:	18c00404 	addi	r3,r3,16
    3c50:	10800044 	addi	r2,r2,1
    3c54:	2106b284 	addi	r4,r4,6858
    3c58:	41000015 	stw	r4,0(r8)
    3c5c:	45800115 	stw	r22,4(r8)
    3c60:	d8c02015 	stw	r3,128(sp)
    3c64:	d8801f15 	stw	r2,124(sp)
    3c68:	e0bff40e 	bge	fp,r2,3c3c <__alt_data_end+0xff003c3c>
    3c6c:	d9801e04 	addi	r6,sp,120
    3c70:	b80b883a 	mov	r5,r23
    3c74:	8009883a 	mov	r4,r16
    3c78:	000a2180 	call	a218 <__sprint_r>
    3c7c:	103f011e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    3c80:	8c7ffc04 	addi	r17,r17,-16
    3c84:	d8c02017 	ldw	r3,128(sp)
    3c88:	d8801f17 	ldw	r2,124(sp)
    3c8c:	da000404 	addi	r8,sp,16
    3c90:	b47fed16 	blt	r22,r17,3c48 <__alt_data_end+0xff003c48>
    3c94:	9021883a 	mov	r16,r18
    3c98:	9825883a 	mov	r18,r19
    3c9c:	8827883a 	mov	r19,r17
    3ca0:	dc403b17 	ldw	r17,236(sp)
    3ca4:	d9403517 	ldw	r5,212(sp)
    3ca8:	98c7883a 	add	r3,r19,r3
    3cac:	10800044 	addi	r2,r2,1
    3cb0:	41400015 	stw	r5,0(r8)
    3cb4:	44c00115 	stw	r19,4(r8)
    3cb8:	d8c02015 	stw	r3,128(sp)
    3cbc:	d8801f15 	stw	r2,124(sp)
    3cc0:	010001c4 	movi	r4,7
    3cc4:	2082a316 	blt	r4,r2,4754 <___vfprintf_internal_r+0x12d8>
    3cc8:	df002787 	ldb	fp,158(sp)
    3ccc:	42000204 	addi	r8,r8,8
    3cd0:	e0000c26 	beq	fp,zero,3d04 <___vfprintf_internal_r+0x888>
    3cd4:	d8801f17 	ldw	r2,124(sp)
    3cd8:	d9002784 	addi	r4,sp,158
    3cdc:	18c00044 	addi	r3,r3,1
    3ce0:	10800044 	addi	r2,r2,1
    3ce4:	41000015 	stw	r4,0(r8)
    3ce8:	01000044 	movi	r4,1
    3cec:	41000115 	stw	r4,4(r8)
    3cf0:	d8c02015 	stw	r3,128(sp)
    3cf4:	d8801f15 	stw	r2,124(sp)
    3cf8:	010001c4 	movi	r4,7
    3cfc:	20823c16 	blt	r4,r2,45f0 <___vfprintf_internal_r+0x1174>
    3d00:	42000204 	addi	r8,r8,8
    3d04:	d8802b17 	ldw	r2,172(sp)
    3d08:	10000c26 	beq	r2,zero,3d3c <___vfprintf_internal_r+0x8c0>
    3d0c:	d8801f17 	ldw	r2,124(sp)
    3d10:	d9002704 	addi	r4,sp,156
    3d14:	18c00084 	addi	r3,r3,2
    3d18:	10800044 	addi	r2,r2,1
    3d1c:	41000015 	stw	r4,0(r8)
    3d20:	01000084 	movi	r4,2
    3d24:	41000115 	stw	r4,4(r8)
    3d28:	d8c02015 	stw	r3,128(sp)
    3d2c:	d8801f15 	stw	r2,124(sp)
    3d30:	010001c4 	movi	r4,7
    3d34:	20823616 	blt	r4,r2,4610 <___vfprintf_internal_r+0x1194>
    3d38:	42000204 	addi	r8,r8,8
    3d3c:	d9003017 	ldw	r4,192(sp)
    3d40:	00802004 	movi	r2,128
    3d44:	20819926 	beq	r4,r2,43ac <___vfprintf_internal_r+0xf30>
    3d48:	d9402917 	ldw	r5,164(sp)
    3d4c:	d8802e17 	ldw	r2,184(sp)
    3d50:	28adc83a 	sub	r22,r5,r2
    3d54:	0580310e 	bge	zero,r22,3e1c <___vfprintf_internal_r+0x9a0>
    3d58:	07000404 	movi	fp,16
    3d5c:	d8801f17 	ldw	r2,124(sp)
    3d60:	e584140e 	bge	fp,r22,4db4 <___vfprintf_internal_r+0x1938>
    3d64:	01400074 	movhi	r5,1
    3d68:	2946ae84 	addi	r5,r5,6842
    3d6c:	dc402915 	stw	r17,164(sp)
    3d70:	d9402b15 	stw	r5,172(sp)
    3d74:	b023883a 	mov	r17,r22
    3d78:	04c001c4 	movi	r19,7
    3d7c:	a82d883a 	mov	r22,r21
    3d80:	902b883a 	mov	r21,r18
    3d84:	8025883a 	mov	r18,r16
    3d88:	dc002c17 	ldw	r16,176(sp)
    3d8c:	00000306 	br	3d9c <___vfprintf_internal_r+0x920>
    3d90:	8c7ffc04 	addi	r17,r17,-16
    3d94:	42000204 	addi	r8,r8,8
    3d98:	e440110e 	bge	fp,r17,3de0 <___vfprintf_internal_r+0x964>
    3d9c:	18c00404 	addi	r3,r3,16
    3da0:	10800044 	addi	r2,r2,1
    3da4:	45000015 	stw	r20,0(r8)
    3da8:	47000115 	stw	fp,4(r8)
    3dac:	d8c02015 	stw	r3,128(sp)
    3db0:	d8801f15 	stw	r2,124(sp)
    3db4:	98bff60e 	bge	r19,r2,3d90 <__alt_data_end+0xff003d90>
    3db8:	d9801e04 	addi	r6,sp,120
    3dbc:	b80b883a 	mov	r5,r23
    3dc0:	8009883a 	mov	r4,r16
    3dc4:	000a2180 	call	a218 <__sprint_r>
    3dc8:	103eae1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    3dcc:	8c7ffc04 	addi	r17,r17,-16
    3dd0:	d8c02017 	ldw	r3,128(sp)
    3dd4:	d8801f17 	ldw	r2,124(sp)
    3dd8:	da000404 	addi	r8,sp,16
    3ddc:	e47fef16 	blt	fp,r17,3d9c <__alt_data_end+0xff003d9c>
    3de0:	9021883a 	mov	r16,r18
    3de4:	a825883a 	mov	r18,r21
    3de8:	b02b883a 	mov	r21,r22
    3dec:	882d883a 	mov	r22,r17
    3df0:	dc402917 	ldw	r17,164(sp)
    3df4:	d9002b17 	ldw	r4,172(sp)
    3df8:	1d87883a 	add	r3,r3,r22
    3dfc:	10800044 	addi	r2,r2,1
    3e00:	41000015 	stw	r4,0(r8)
    3e04:	45800115 	stw	r22,4(r8)
    3e08:	d8c02015 	stw	r3,128(sp)
    3e0c:	d8801f15 	stw	r2,124(sp)
    3e10:	010001c4 	movi	r4,7
    3e14:	2081ee16 	blt	r4,r2,45d0 <___vfprintf_internal_r+0x1154>
    3e18:	42000204 	addi	r8,r8,8
    3e1c:	9080400c 	andi	r2,r18,256
    3e20:	1001181e 	bne	r2,zero,4284 <___vfprintf_internal_r+0xe08>
    3e24:	d9402e17 	ldw	r5,184(sp)
    3e28:	d8801f17 	ldw	r2,124(sp)
    3e2c:	44000015 	stw	r16,0(r8)
    3e30:	1947883a 	add	r3,r3,r5
    3e34:	10800044 	addi	r2,r2,1
    3e38:	41400115 	stw	r5,4(r8)
    3e3c:	d8c02015 	stw	r3,128(sp)
    3e40:	d8801f15 	stw	r2,124(sp)
    3e44:	010001c4 	movi	r4,7
    3e48:	2081d316 	blt	r4,r2,4598 <___vfprintf_internal_r+0x111c>
    3e4c:	42000204 	addi	r8,r8,8
    3e50:	9480010c 	andi	r18,r18,4
    3e54:	90003226 	beq	r18,zero,3f20 <___vfprintf_internal_r+0xaa4>
    3e58:	d9403117 	ldw	r5,196(sp)
    3e5c:	d8802a17 	ldw	r2,168(sp)
    3e60:	28a1c83a 	sub	r16,r5,r2
    3e64:	04002e0e 	bge	zero,r16,3f20 <___vfprintf_internal_r+0xaa4>
    3e68:	04400404 	movi	r17,16
    3e6c:	d8801f17 	ldw	r2,124(sp)
    3e70:	8c04a20e 	bge	r17,r16,50fc <___vfprintf_internal_r+0x1c80>
    3e74:	01400074 	movhi	r5,1
    3e78:	2946b284 	addi	r5,r5,6858
    3e7c:	d9403515 	stw	r5,212(sp)
    3e80:	048001c4 	movi	r18,7
    3e84:	dcc02c17 	ldw	r19,176(sp)
    3e88:	00000306 	br	3e98 <___vfprintf_internal_r+0xa1c>
    3e8c:	843ffc04 	addi	r16,r16,-16
    3e90:	42000204 	addi	r8,r8,8
    3e94:	8c00130e 	bge	r17,r16,3ee4 <___vfprintf_internal_r+0xa68>
    3e98:	01000074 	movhi	r4,1
    3e9c:	18c00404 	addi	r3,r3,16
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	2106b284 	addi	r4,r4,6858
    3ea8:	41000015 	stw	r4,0(r8)
    3eac:	44400115 	stw	r17,4(r8)
    3eb0:	d8c02015 	stw	r3,128(sp)
    3eb4:	d8801f15 	stw	r2,124(sp)
    3eb8:	90bff40e 	bge	r18,r2,3e8c <__alt_data_end+0xff003e8c>
    3ebc:	d9801e04 	addi	r6,sp,120
    3ec0:	b80b883a 	mov	r5,r23
    3ec4:	9809883a 	mov	r4,r19
    3ec8:	000a2180 	call	a218 <__sprint_r>
    3ecc:	103e6d1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    3ed0:	843ffc04 	addi	r16,r16,-16
    3ed4:	d8c02017 	ldw	r3,128(sp)
    3ed8:	d8801f17 	ldw	r2,124(sp)
    3edc:	da000404 	addi	r8,sp,16
    3ee0:	8c3fed16 	blt	r17,r16,3e98 <__alt_data_end+0xff003e98>
    3ee4:	d9403517 	ldw	r5,212(sp)
    3ee8:	1c07883a 	add	r3,r3,r16
    3eec:	10800044 	addi	r2,r2,1
    3ef0:	41400015 	stw	r5,0(r8)
    3ef4:	44000115 	stw	r16,4(r8)
    3ef8:	d8c02015 	stw	r3,128(sp)
    3efc:	d8801f15 	stw	r2,124(sp)
    3f00:	010001c4 	movi	r4,7
    3f04:	2080060e 	bge	r4,r2,3f20 <___vfprintf_internal_r+0xaa4>
    3f08:	d9002c17 	ldw	r4,176(sp)
    3f0c:	d9801e04 	addi	r6,sp,120
    3f10:	b80b883a 	mov	r5,r23
    3f14:	000a2180 	call	a218 <__sprint_r>
    3f18:	103e5a1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    3f1c:	d8c02017 	ldw	r3,128(sp)
    3f20:	d8803117 	ldw	r2,196(sp)
    3f24:	d9002a17 	ldw	r4,168(sp)
    3f28:	1100010e 	bge	r2,r4,3f30 <___vfprintf_internal_r+0xab4>
    3f2c:	2005883a 	mov	r2,r4
    3f30:	d9402f17 	ldw	r5,188(sp)
    3f34:	288b883a 	add	r5,r5,r2
    3f38:	d9402f15 	stw	r5,188(sp)
    3f3c:	18019e1e 	bne	r3,zero,45b8 <___vfprintf_internal_r+0x113c>
    3f40:	a8800007 	ldb	r2,0(r21)
    3f44:	d8001f15 	stw	zero,124(sp)
    3f48:	da000404 	addi	r8,sp,16
    3f4c:	103d851e 	bne	r2,zero,3564 <__alt_data_end+0xff003564>
    3f50:	a821883a 	mov	r16,r21
    3f54:	003d9b06 	br	35c4 <__alt_data_end+0xff0035c4>
    3f58:	18c03fcc 	andi	r3,r3,255
    3f5c:	1805c11e 	bne	r3,zero,5664 <___vfprintf_internal_r+0x21e8>
    3f60:	94800414 	ori	r18,r18,16
    3f64:	9080080c 	andi	r2,r18,32
    3f68:	10020c26 	beq	r2,zero,479c <___vfprintf_internal_r+0x1320>
    3f6c:	d8802d17 	ldw	r2,180(sp)
    3f70:	d9002917 	ldw	r4,164(sp)
    3f74:	d8002785 	stb	zero,158(sp)
    3f78:	10c00204 	addi	r3,r2,8
    3f7c:	14c00017 	ldw	r19,0(r2)
    3f80:	15800117 	ldw	r22,4(r2)
    3f84:	20040f16 	blt	r4,zero,4fc4 <___vfprintf_internal_r+0x1b48>
    3f88:	013fdfc4 	movi	r4,-129
    3f8c:	9d84b03a 	or	r2,r19,r22
    3f90:	d8c02d15 	stw	r3,180(sp)
    3f94:	9124703a 	and	r18,r18,r4
    3f98:	0039883a 	mov	fp,zero
    3f9c:	103e891e 	bne	r2,zero,39c4 <__alt_data_end+0xff0039c4>
    3fa0:	d9002917 	ldw	r4,164(sp)
    3fa4:	2002c11e 	bne	r4,zero,4aac <___vfprintf_internal_r+0x1630>
    3fa8:	d8002915 	stw	zero,164(sp)
    3fac:	d8002e15 	stw	zero,184(sp)
    3fb0:	dc001e04 	addi	r16,sp,120
    3fb4:	003ef806 	br	3b98 <__alt_data_end+0xff003b98>
    3fb8:	18c03fcc 	andi	r3,r3,255
    3fbc:	18059d1e 	bne	r3,zero,5634 <___vfprintf_internal_r+0x21b8>
    3fc0:	01400074 	movhi	r5,1
    3fc4:	2946a204 	addi	r5,r5,6792
    3fc8:	d9403915 	stw	r5,228(sp)
    3fcc:	9080080c 	andi	r2,r18,32
    3fd0:	10005226 	beq	r2,zero,411c <___vfprintf_internal_r+0xca0>
    3fd4:	d8802d17 	ldw	r2,180(sp)
    3fd8:	14c00017 	ldw	r19,0(r2)
    3fdc:	15800117 	ldw	r22,4(r2)
    3fe0:	10800204 	addi	r2,r2,8
    3fe4:	d8802d15 	stw	r2,180(sp)
    3fe8:	9080004c 	andi	r2,r18,1
    3fec:	10019026 	beq	r2,zero,4630 <___vfprintf_internal_r+0x11b4>
    3ff0:	9d84b03a 	or	r2,r19,r22
    3ff4:	10036926 	beq	r2,zero,4d9c <___vfprintf_internal_r+0x1920>
    3ff8:	d8c02917 	ldw	r3,164(sp)
    3ffc:	00800c04 	movi	r2,48
    4000:	d8802705 	stb	r2,156(sp)
    4004:	dc402745 	stb	r17,157(sp)
    4008:	d8002785 	stb	zero,158(sp)
    400c:	90800094 	ori	r2,r18,2
    4010:	18045d16 	blt	r3,zero,5188 <___vfprintf_internal_r+0x1d0c>
    4014:	00bfdfc4 	movi	r2,-129
    4018:	90a4703a 	and	r18,r18,r2
    401c:	94800094 	ori	r18,r18,2
    4020:	0039883a 	mov	fp,zero
    4024:	d9003917 	ldw	r4,228(sp)
    4028:	dc001e04 	addi	r16,sp,120
    402c:	988003cc 	andi	r2,r19,15
    4030:	b006973a 	slli	r3,r22,28
    4034:	2085883a 	add	r2,r4,r2
    4038:	9826d13a 	srli	r19,r19,4
    403c:	10800003 	ldbu	r2,0(r2)
    4040:	b02cd13a 	srli	r22,r22,4
    4044:	843fffc4 	addi	r16,r16,-1
    4048:	1ce6b03a 	or	r19,r3,r19
    404c:	80800005 	stb	r2,0(r16)
    4050:	9d84b03a 	or	r2,r19,r22
    4054:	103ff51e 	bne	r2,zero,402c <__alt_data_end+0xff00402c>
    4058:	d8c02817 	ldw	r3,160(sp)
    405c:	1c07c83a 	sub	r3,r3,r16
    4060:	d8c02e15 	stw	r3,184(sp)
    4064:	003ecc06 	br	3b98 <__alt_data_end+0xff003b98>
    4068:	18c03fcc 	andi	r3,r3,255
    406c:	183e9f26 	beq	r3,zero,3aec <__alt_data_end+0xff003aec>
    4070:	d9c02785 	stb	r7,158(sp)
    4074:	003e9d06 	br	3aec <__alt_data_end+0xff003aec>
    4078:	00c00044 	movi	r3,1
    407c:	01c00ac4 	movi	r7,43
    4080:	ac400007 	ldb	r17,0(r21)
    4084:	003d5e06 	br	3600 <__alt_data_end+0xff003600>
    4088:	94800814 	ori	r18,r18,32
    408c:	ac400007 	ldb	r17,0(r21)
    4090:	003d5b06 	br	3600 <__alt_data_end+0xff003600>
    4094:	d8c02d17 	ldw	r3,180(sp)
    4098:	d8002785 	stb	zero,158(sp)
    409c:	1c000017 	ldw	r16,0(r3)
    40a0:	1cc00104 	addi	r19,r3,4
    40a4:	80041926 	beq	r16,zero,510c <___vfprintf_internal_r+0x1c90>
    40a8:	d9002917 	ldw	r4,164(sp)
    40ac:	2003d016 	blt	r4,zero,4ff0 <___vfprintf_internal_r+0x1b74>
    40b0:	200d883a 	mov	r6,r4
    40b4:	000b883a 	mov	r5,zero
    40b8:	8009883a 	mov	r4,r16
    40bc:	da003d15 	stw	r8,244(sp)
    40c0:	00084800 	call	8480 <memchr>
    40c4:	da003d17 	ldw	r8,244(sp)
    40c8:	10045426 	beq	r2,zero,521c <___vfprintf_internal_r+0x1da0>
    40cc:	1405c83a 	sub	r2,r2,r16
    40d0:	d8802e15 	stw	r2,184(sp)
    40d4:	1003cc16 	blt	r2,zero,5008 <___vfprintf_internal_r+0x1b8c>
    40d8:	df002783 	ldbu	fp,158(sp)
    40dc:	d8802a15 	stw	r2,168(sp)
    40e0:	dcc02d15 	stw	r19,180(sp)
    40e4:	d8002915 	stw	zero,164(sp)
    40e8:	d8003215 	stw	zero,200(sp)
    40ec:	003eb006 	br	3bb0 <__alt_data_end+0xff003bb0>
    40f0:	18c03fcc 	andi	r3,r3,255
    40f4:	183f9b26 	beq	r3,zero,3f64 <__alt_data_end+0xff003f64>
    40f8:	d9c02785 	stb	r7,158(sp)
    40fc:	003f9906 	br	3f64 <__alt_data_end+0xff003f64>
    4100:	18c03fcc 	andi	r3,r3,255
    4104:	1805551e 	bne	r3,zero,565c <___vfprintf_internal_r+0x21e0>
    4108:	01400074 	movhi	r5,1
    410c:	2946a704 	addi	r5,r5,6812
    4110:	d9403915 	stw	r5,228(sp)
    4114:	9080080c 	andi	r2,r18,32
    4118:	103fae1e 	bne	r2,zero,3fd4 <__alt_data_end+0xff003fd4>
    411c:	9080040c 	andi	r2,r18,16
    4120:	1002de26 	beq	r2,zero,4c9c <___vfprintf_internal_r+0x1820>
    4124:	d8c02d17 	ldw	r3,180(sp)
    4128:	002d883a 	mov	r22,zero
    412c:	1cc00017 	ldw	r19,0(r3)
    4130:	18c00104 	addi	r3,r3,4
    4134:	d8c02d15 	stw	r3,180(sp)
    4138:	003fab06 	br	3fe8 <__alt_data_end+0xff003fe8>
    413c:	38803fcc 	andi	r2,r7,255
    4140:	1080201c 	xori	r2,r2,128
    4144:	10bfe004 	addi	r2,r2,-128
    4148:	1002d21e 	bne	r2,zero,4c94 <___vfprintf_internal_r+0x1818>
    414c:	00c00044 	movi	r3,1
    4150:	01c00804 	movi	r7,32
    4154:	ac400007 	ldb	r17,0(r21)
    4158:	003d2906 	br	3600 <__alt_data_end+0xff003600>
    415c:	94800054 	ori	r18,r18,1
    4160:	ac400007 	ldb	r17,0(r21)
    4164:	003d2606 	br	3600 <__alt_data_end+0xff003600>
    4168:	18c03fcc 	andi	r3,r3,255
    416c:	183e0526 	beq	r3,zero,3984 <__alt_data_end+0xff003984>
    4170:	d9c02785 	stb	r7,158(sp)
    4174:	003e0306 	br	3984 <__alt_data_end+0xff003984>
    4178:	94801014 	ori	r18,r18,64
    417c:	ac400007 	ldb	r17,0(r21)
    4180:	003d1f06 	br	3600 <__alt_data_end+0xff003600>
    4184:	ac400007 	ldb	r17,0(r21)
    4188:	8a438726 	beq	r17,r9,4fa8 <___vfprintf_internal_r+0x1b2c>
    418c:	94800414 	ori	r18,r18,16
    4190:	003d1b06 	br	3600 <__alt_data_end+0xff003600>
    4194:	18c03fcc 	andi	r3,r3,255
    4198:	1805341e 	bne	r3,zero,566c <___vfprintf_internal_r+0x21f0>
    419c:	9080080c 	andi	r2,r18,32
    41a0:	1002cd26 	beq	r2,zero,4cd8 <___vfprintf_internal_r+0x185c>
    41a4:	d9402d17 	ldw	r5,180(sp)
    41a8:	d9002f17 	ldw	r4,188(sp)
    41ac:	28800017 	ldw	r2,0(r5)
    41b0:	2007d7fa 	srai	r3,r4,31
    41b4:	29400104 	addi	r5,r5,4
    41b8:	d9402d15 	stw	r5,180(sp)
    41bc:	11000015 	stw	r4,0(r2)
    41c0:	10c00115 	stw	r3,4(r2)
    41c4:	003ce506 	br	355c <__alt_data_end+0xff00355c>
    41c8:	d8c02d17 	ldw	r3,180(sp)
    41cc:	d9002d17 	ldw	r4,180(sp)
    41d0:	d8002785 	stb	zero,158(sp)
    41d4:	18800017 	ldw	r2,0(r3)
    41d8:	21000104 	addi	r4,r4,4
    41dc:	00c00044 	movi	r3,1
    41e0:	d8c02a15 	stw	r3,168(sp)
    41e4:	d8801405 	stb	r2,80(sp)
    41e8:	d9002d15 	stw	r4,180(sp)
    41ec:	d8c02e15 	stw	r3,184(sp)
    41f0:	d8002915 	stw	zero,164(sp)
    41f4:	d8003215 	stw	zero,200(sp)
    41f8:	dc001404 	addi	r16,sp,80
    41fc:	0039883a 	mov	fp,zero
    4200:	003e7206 	br	3bcc <__alt_data_end+0xff003bcc>
    4204:	01000074 	movhi	r4,1
    4208:	2106a704 	addi	r4,r4,6812
    420c:	0039883a 	mov	fp,zero
    4210:	d9003915 	stw	r4,228(sp)
    4214:	04401e04 	movi	r17,120
    4218:	003f8206 	br	4024 <__alt_data_end+0xff004024>
    421c:	18c03fcc 	andi	r3,r3,255
    4220:	1805061e 	bne	r3,zero,563c <___vfprintf_internal_r+0x21c0>
    4224:	883d9126 	beq	r17,zero,386c <__alt_data_end+0xff00386c>
    4228:	00c00044 	movi	r3,1
    422c:	d8c02a15 	stw	r3,168(sp)
    4230:	dc401405 	stb	r17,80(sp)
    4234:	d8002785 	stb	zero,158(sp)
    4238:	003fec06 	br	41ec <__alt_data_end+0xff0041ec>
    423c:	01400074 	movhi	r5,1
    4240:	2946a704 	addi	r5,r5,6812
    4244:	d9403915 	stw	r5,228(sp)
    4248:	d8c02d15 	stw	r3,180(sp)
    424c:	1025883a 	mov	r18,r2
    4250:	04401e04 	movi	r17,120
    4254:	9d84b03a 	or	r2,r19,r22
    4258:	1000fc1e 	bne	r2,zero,464c <___vfprintf_internal_r+0x11d0>
    425c:	0039883a 	mov	fp,zero
    4260:	00800084 	movi	r2,2
    4264:	10803fcc 	andi	r2,r2,255
    4268:	00c00044 	movi	r3,1
    426c:	10c20f26 	beq	r2,r3,4aac <___vfprintf_internal_r+0x1630>
    4270:	00c00084 	movi	r3,2
    4274:	10fd6326 	beq	r2,r3,3804 <__alt_data_end+0xff003804>
    4278:	003e2d06 	br	3b30 <__alt_data_end+0xff003b30>
    427c:	d8c02017 	ldw	r3,128(sp)
    4280:	003e9306 	br	3cd0 <__alt_data_end+0xff003cd0>
    4284:	00801944 	movi	r2,101
    4288:	14407e0e 	bge	r2,r17,4484 <___vfprintf_internal_r+0x1008>
    428c:	d9003617 	ldw	r4,216(sp)
    4290:	d9403817 	ldw	r5,224(sp)
    4294:	000d883a 	mov	r6,zero
    4298:	000f883a 	mov	r7,zero
    429c:	d8c03c15 	stw	r3,240(sp)
    42a0:	da003d15 	stw	r8,244(sp)
    42a4:	000d3f40 	call	d3f4 <__eqdf2>
    42a8:	d8c03c17 	ldw	r3,240(sp)
    42ac:	da003d17 	ldw	r8,244(sp)
    42b0:	1000f71e 	bne	r2,zero,4690 <___vfprintf_internal_r+0x1214>
    42b4:	d8801f17 	ldw	r2,124(sp)
    42b8:	01000074 	movhi	r4,1
    42bc:	2106ae04 	addi	r4,r4,6840
    42c0:	18c00044 	addi	r3,r3,1
    42c4:	10800044 	addi	r2,r2,1
    42c8:	41000015 	stw	r4,0(r8)
    42cc:	01000044 	movi	r4,1
    42d0:	41000115 	stw	r4,4(r8)
    42d4:	d8c02015 	stw	r3,128(sp)
    42d8:	d8801f15 	stw	r2,124(sp)
    42dc:	010001c4 	movi	r4,7
    42e0:	2082b816 	blt	r4,r2,4dc4 <___vfprintf_internal_r+0x1948>
    42e4:	42000204 	addi	r8,r8,8
    42e8:	d8802617 	ldw	r2,152(sp)
    42ec:	d9403317 	ldw	r5,204(sp)
    42f0:	11400216 	blt	r2,r5,42fc <___vfprintf_internal_r+0xe80>
    42f4:	9080004c 	andi	r2,r18,1
    42f8:	103ed526 	beq	r2,zero,3e50 <__alt_data_end+0xff003e50>
    42fc:	d8803717 	ldw	r2,220(sp)
    4300:	d9003417 	ldw	r4,208(sp)
    4304:	d9403717 	ldw	r5,220(sp)
    4308:	1887883a 	add	r3,r3,r2
    430c:	d8801f17 	ldw	r2,124(sp)
    4310:	41000015 	stw	r4,0(r8)
    4314:	41400115 	stw	r5,4(r8)
    4318:	10800044 	addi	r2,r2,1
    431c:	d8c02015 	stw	r3,128(sp)
    4320:	d8801f15 	stw	r2,124(sp)
    4324:	010001c4 	movi	r4,7
    4328:	20832916 	blt	r4,r2,4fd0 <___vfprintf_internal_r+0x1b54>
    432c:	42000204 	addi	r8,r8,8
    4330:	d8803317 	ldw	r2,204(sp)
    4334:	143fffc4 	addi	r16,r2,-1
    4338:	043ec50e 	bge	zero,r16,3e50 <__alt_data_end+0xff003e50>
    433c:	04400404 	movi	r17,16
    4340:	d8801f17 	ldw	r2,124(sp)
    4344:	8c00880e 	bge	r17,r16,4568 <___vfprintf_internal_r+0x10ec>
    4348:	01400074 	movhi	r5,1
    434c:	2946ae84 	addi	r5,r5,6842
    4350:	d9402b15 	stw	r5,172(sp)
    4354:	058001c4 	movi	r22,7
    4358:	dcc02c17 	ldw	r19,176(sp)
    435c:	00000306 	br	436c <___vfprintf_internal_r+0xef0>
    4360:	42000204 	addi	r8,r8,8
    4364:	843ffc04 	addi	r16,r16,-16
    4368:	8c00820e 	bge	r17,r16,4574 <___vfprintf_internal_r+0x10f8>
    436c:	18c00404 	addi	r3,r3,16
    4370:	10800044 	addi	r2,r2,1
    4374:	45000015 	stw	r20,0(r8)
    4378:	44400115 	stw	r17,4(r8)
    437c:	d8c02015 	stw	r3,128(sp)
    4380:	d8801f15 	stw	r2,124(sp)
    4384:	b0bff60e 	bge	r22,r2,4360 <__alt_data_end+0xff004360>
    4388:	d9801e04 	addi	r6,sp,120
    438c:	b80b883a 	mov	r5,r23
    4390:	9809883a 	mov	r4,r19
    4394:	000a2180 	call	a218 <__sprint_r>
    4398:	103d3a1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    439c:	d8c02017 	ldw	r3,128(sp)
    43a0:	d8801f17 	ldw	r2,124(sp)
    43a4:	da000404 	addi	r8,sp,16
    43a8:	003fee06 	br	4364 <__alt_data_end+0xff004364>
    43ac:	d9403117 	ldw	r5,196(sp)
    43b0:	d8802a17 	ldw	r2,168(sp)
    43b4:	28adc83a 	sub	r22,r5,r2
    43b8:	05be630e 	bge	zero,r22,3d48 <__alt_data_end+0xff003d48>
    43bc:	07000404 	movi	fp,16
    43c0:	d8801f17 	ldw	r2,124(sp)
    43c4:	e5838f0e 	bge	fp,r22,5204 <___vfprintf_internal_r+0x1d88>
    43c8:	01400074 	movhi	r5,1
    43cc:	2946ae84 	addi	r5,r5,6842
    43d0:	dc403015 	stw	r17,192(sp)
    43d4:	d9402b15 	stw	r5,172(sp)
    43d8:	b023883a 	mov	r17,r22
    43dc:	04c001c4 	movi	r19,7
    43e0:	a82d883a 	mov	r22,r21
    43e4:	902b883a 	mov	r21,r18
    43e8:	8025883a 	mov	r18,r16
    43ec:	dc002c17 	ldw	r16,176(sp)
    43f0:	00000306 	br	4400 <___vfprintf_internal_r+0xf84>
    43f4:	8c7ffc04 	addi	r17,r17,-16
    43f8:	42000204 	addi	r8,r8,8
    43fc:	e440110e 	bge	fp,r17,4444 <___vfprintf_internal_r+0xfc8>
    4400:	18c00404 	addi	r3,r3,16
    4404:	10800044 	addi	r2,r2,1
    4408:	45000015 	stw	r20,0(r8)
    440c:	47000115 	stw	fp,4(r8)
    4410:	d8c02015 	stw	r3,128(sp)
    4414:	d8801f15 	stw	r2,124(sp)
    4418:	98bff60e 	bge	r19,r2,43f4 <__alt_data_end+0xff0043f4>
    441c:	d9801e04 	addi	r6,sp,120
    4420:	b80b883a 	mov	r5,r23
    4424:	8009883a 	mov	r4,r16
    4428:	000a2180 	call	a218 <__sprint_r>
    442c:	103d151e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4430:	8c7ffc04 	addi	r17,r17,-16
    4434:	d8c02017 	ldw	r3,128(sp)
    4438:	d8801f17 	ldw	r2,124(sp)
    443c:	da000404 	addi	r8,sp,16
    4440:	e47fef16 	blt	fp,r17,4400 <__alt_data_end+0xff004400>
    4444:	9021883a 	mov	r16,r18
    4448:	a825883a 	mov	r18,r21
    444c:	b02b883a 	mov	r21,r22
    4450:	882d883a 	mov	r22,r17
    4454:	dc403017 	ldw	r17,192(sp)
    4458:	d9002b17 	ldw	r4,172(sp)
    445c:	1d87883a 	add	r3,r3,r22
    4460:	10800044 	addi	r2,r2,1
    4464:	41000015 	stw	r4,0(r8)
    4468:	45800115 	stw	r22,4(r8)
    446c:	d8c02015 	stw	r3,128(sp)
    4470:	d8801f15 	stw	r2,124(sp)
    4474:	010001c4 	movi	r4,7
    4478:	20818e16 	blt	r4,r2,4ab4 <___vfprintf_internal_r+0x1638>
    447c:	42000204 	addi	r8,r8,8
    4480:	003e3106 	br	3d48 <__alt_data_end+0xff003d48>
    4484:	d9403317 	ldw	r5,204(sp)
    4488:	00800044 	movi	r2,1
    448c:	18c00044 	addi	r3,r3,1
    4490:	1141530e 	bge	r2,r5,49e0 <___vfprintf_internal_r+0x1564>
    4494:	dc401f17 	ldw	r17,124(sp)
    4498:	00800044 	movi	r2,1
    449c:	40800115 	stw	r2,4(r8)
    44a0:	8c400044 	addi	r17,r17,1
    44a4:	44000015 	stw	r16,0(r8)
    44a8:	d8c02015 	stw	r3,128(sp)
    44ac:	dc401f15 	stw	r17,124(sp)
    44b0:	008001c4 	movi	r2,7
    44b4:	14416b16 	blt	r2,r17,4a64 <___vfprintf_internal_r+0x15e8>
    44b8:	42000204 	addi	r8,r8,8
    44bc:	d8803717 	ldw	r2,220(sp)
    44c0:	d9003417 	ldw	r4,208(sp)
    44c4:	8c400044 	addi	r17,r17,1
    44c8:	10c7883a 	add	r3,r2,r3
    44cc:	40800115 	stw	r2,4(r8)
    44d0:	41000015 	stw	r4,0(r8)
    44d4:	d8c02015 	stw	r3,128(sp)
    44d8:	dc401f15 	stw	r17,124(sp)
    44dc:	008001c4 	movi	r2,7
    44e0:	14416916 	blt	r2,r17,4a88 <___vfprintf_internal_r+0x160c>
    44e4:	45800204 	addi	r22,r8,8
    44e8:	d9003617 	ldw	r4,216(sp)
    44ec:	d9403817 	ldw	r5,224(sp)
    44f0:	000d883a 	mov	r6,zero
    44f4:	000f883a 	mov	r7,zero
    44f8:	d8c03c15 	stw	r3,240(sp)
    44fc:	000d3f40 	call	d3f4 <__eqdf2>
    4500:	d8c03c17 	ldw	r3,240(sp)
    4504:	1000bc26 	beq	r2,zero,47f8 <___vfprintf_internal_r+0x137c>
    4508:	d9403317 	ldw	r5,204(sp)
    450c:	84000044 	addi	r16,r16,1
    4510:	8c400044 	addi	r17,r17,1
    4514:	28bfffc4 	addi	r2,r5,-1
    4518:	1887883a 	add	r3,r3,r2
    451c:	b0800115 	stw	r2,4(r22)
    4520:	b4000015 	stw	r16,0(r22)
    4524:	d8c02015 	stw	r3,128(sp)
    4528:	dc401f15 	stw	r17,124(sp)
    452c:	008001c4 	movi	r2,7
    4530:	14414316 	blt	r2,r17,4a40 <___vfprintf_internal_r+0x15c4>
    4534:	b5800204 	addi	r22,r22,8
    4538:	d9003a17 	ldw	r4,232(sp)
    453c:	df0022c4 	addi	fp,sp,139
    4540:	8c400044 	addi	r17,r17,1
    4544:	20c7883a 	add	r3,r4,r3
    4548:	b7000015 	stw	fp,0(r22)
    454c:	b1000115 	stw	r4,4(r22)
    4550:	d8c02015 	stw	r3,128(sp)
    4554:	dc401f15 	stw	r17,124(sp)
    4558:	008001c4 	movi	r2,7
    455c:	14400e16 	blt	r2,r17,4598 <___vfprintf_internal_r+0x111c>
    4560:	b2000204 	addi	r8,r22,8
    4564:	003e3a06 	br	3e50 <__alt_data_end+0xff003e50>
    4568:	01000074 	movhi	r4,1
    456c:	2106ae84 	addi	r4,r4,6842
    4570:	d9002b15 	stw	r4,172(sp)
    4574:	d9002b17 	ldw	r4,172(sp)
    4578:	1c07883a 	add	r3,r3,r16
    457c:	44000115 	stw	r16,4(r8)
    4580:	41000015 	stw	r4,0(r8)
    4584:	10800044 	addi	r2,r2,1
    4588:	d8c02015 	stw	r3,128(sp)
    458c:	d8801f15 	stw	r2,124(sp)
    4590:	010001c4 	movi	r4,7
    4594:	20be2d0e 	bge	r4,r2,3e4c <__alt_data_end+0xff003e4c>
    4598:	d9002c17 	ldw	r4,176(sp)
    459c:	d9801e04 	addi	r6,sp,120
    45a0:	b80b883a 	mov	r5,r23
    45a4:	000a2180 	call	a218 <__sprint_r>
    45a8:	103cb61e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    45ac:	d8c02017 	ldw	r3,128(sp)
    45b0:	da000404 	addi	r8,sp,16
    45b4:	003e2606 	br	3e50 <__alt_data_end+0xff003e50>
    45b8:	d9002c17 	ldw	r4,176(sp)
    45bc:	d9801e04 	addi	r6,sp,120
    45c0:	b80b883a 	mov	r5,r23
    45c4:	000a2180 	call	a218 <__sprint_r>
    45c8:	103e5d26 	beq	r2,zero,3f40 <__alt_data_end+0xff003f40>
    45cc:	003cad06 	br	3884 <__alt_data_end+0xff003884>
    45d0:	d9002c17 	ldw	r4,176(sp)
    45d4:	d9801e04 	addi	r6,sp,120
    45d8:	b80b883a 	mov	r5,r23
    45dc:	000a2180 	call	a218 <__sprint_r>
    45e0:	103ca81e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    45e4:	d8c02017 	ldw	r3,128(sp)
    45e8:	da000404 	addi	r8,sp,16
    45ec:	003e0b06 	br	3e1c <__alt_data_end+0xff003e1c>
    45f0:	d9002c17 	ldw	r4,176(sp)
    45f4:	d9801e04 	addi	r6,sp,120
    45f8:	b80b883a 	mov	r5,r23
    45fc:	000a2180 	call	a218 <__sprint_r>
    4600:	103ca01e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4604:	d8c02017 	ldw	r3,128(sp)
    4608:	da000404 	addi	r8,sp,16
    460c:	003dbd06 	br	3d04 <__alt_data_end+0xff003d04>
    4610:	d9002c17 	ldw	r4,176(sp)
    4614:	d9801e04 	addi	r6,sp,120
    4618:	b80b883a 	mov	r5,r23
    461c:	000a2180 	call	a218 <__sprint_r>
    4620:	103c981e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4624:	d8c02017 	ldw	r3,128(sp)
    4628:	da000404 	addi	r8,sp,16
    462c:	003dc306 	br	3d3c <__alt_data_end+0xff003d3c>
    4630:	d8802917 	ldw	r2,164(sp)
    4634:	d8002785 	stb	zero,158(sp)
    4638:	103f0616 	blt	r2,zero,4254 <__alt_data_end+0xff004254>
    463c:	00ffdfc4 	movi	r3,-129
    4640:	9d84b03a 	or	r2,r19,r22
    4644:	90e4703a 	and	r18,r18,r3
    4648:	103c6b26 	beq	r2,zero,37f8 <__alt_data_end+0xff0037f8>
    464c:	0039883a 	mov	fp,zero
    4650:	003e7406 	br	4024 <__alt_data_end+0xff004024>
    4654:	9080040c 	andi	r2,r18,16
    4658:	1001b326 	beq	r2,zero,4d28 <___vfprintf_internal_r+0x18ac>
    465c:	d9002d17 	ldw	r4,180(sp)
    4660:	d9402917 	ldw	r5,164(sp)
    4664:	d8002785 	stb	zero,158(sp)
    4668:	20800104 	addi	r2,r4,4
    466c:	24c00017 	ldw	r19,0(r4)
    4670:	002d883a 	mov	r22,zero
    4674:	2801b516 	blt	r5,zero,4d4c <___vfprintf_internal_r+0x18d0>
    4678:	00ffdfc4 	movi	r3,-129
    467c:	d8802d15 	stw	r2,180(sp)
    4680:	90e4703a 	and	r18,r18,r3
    4684:	983d2726 	beq	r19,zero,3b24 <__alt_data_end+0xff003b24>
    4688:	0039883a 	mov	fp,zero
    468c:	003d2a06 	br	3b38 <__alt_data_end+0xff003b38>
    4690:	dc402617 	ldw	r17,152(sp)
    4694:	0441d30e 	bge	zero,r17,4de4 <___vfprintf_internal_r+0x1968>
    4698:	dc403217 	ldw	r17,200(sp)
    469c:	d8803317 	ldw	r2,204(sp)
    46a0:	1440010e 	bge	r2,r17,46a8 <___vfprintf_internal_r+0x122c>
    46a4:	1023883a 	mov	r17,r2
    46a8:	04400a0e 	bge	zero,r17,46d4 <___vfprintf_internal_r+0x1258>
    46ac:	d8801f17 	ldw	r2,124(sp)
    46b0:	1c47883a 	add	r3,r3,r17
    46b4:	44000015 	stw	r16,0(r8)
    46b8:	10800044 	addi	r2,r2,1
    46bc:	44400115 	stw	r17,4(r8)
    46c0:	d8c02015 	stw	r3,128(sp)
    46c4:	d8801f15 	stw	r2,124(sp)
    46c8:	010001c4 	movi	r4,7
    46cc:	20826516 	blt	r4,r2,5064 <___vfprintf_internal_r+0x1be8>
    46d0:	42000204 	addi	r8,r8,8
    46d4:	88026116 	blt	r17,zero,505c <___vfprintf_internal_r+0x1be0>
    46d8:	d9003217 	ldw	r4,200(sp)
    46dc:	2463c83a 	sub	r17,r4,r17
    46e0:	04407b0e 	bge	zero,r17,48d0 <___vfprintf_internal_r+0x1454>
    46e4:	05800404 	movi	r22,16
    46e8:	d8801f17 	ldw	r2,124(sp)
    46ec:	b4419d0e 	bge	r22,r17,4d64 <___vfprintf_internal_r+0x18e8>
    46f0:	01000074 	movhi	r4,1
    46f4:	2106ae84 	addi	r4,r4,6842
    46f8:	d9002b15 	stw	r4,172(sp)
    46fc:	070001c4 	movi	fp,7
    4700:	dcc02c17 	ldw	r19,176(sp)
    4704:	00000306 	br	4714 <___vfprintf_internal_r+0x1298>
    4708:	42000204 	addi	r8,r8,8
    470c:	8c7ffc04 	addi	r17,r17,-16
    4710:	b441970e 	bge	r22,r17,4d70 <___vfprintf_internal_r+0x18f4>
    4714:	18c00404 	addi	r3,r3,16
    4718:	10800044 	addi	r2,r2,1
    471c:	45000015 	stw	r20,0(r8)
    4720:	45800115 	stw	r22,4(r8)
    4724:	d8c02015 	stw	r3,128(sp)
    4728:	d8801f15 	stw	r2,124(sp)
    472c:	e0bff60e 	bge	fp,r2,4708 <__alt_data_end+0xff004708>
    4730:	d9801e04 	addi	r6,sp,120
    4734:	b80b883a 	mov	r5,r23
    4738:	9809883a 	mov	r4,r19
    473c:	000a2180 	call	a218 <__sprint_r>
    4740:	103c501e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4744:	d8c02017 	ldw	r3,128(sp)
    4748:	d8801f17 	ldw	r2,124(sp)
    474c:	da000404 	addi	r8,sp,16
    4750:	003fee06 	br	470c <__alt_data_end+0xff00470c>
    4754:	d9002c17 	ldw	r4,176(sp)
    4758:	d9801e04 	addi	r6,sp,120
    475c:	b80b883a 	mov	r5,r23
    4760:	000a2180 	call	a218 <__sprint_r>
    4764:	103c471e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4768:	d8c02017 	ldw	r3,128(sp)
    476c:	df002787 	ldb	fp,158(sp)
    4770:	da000404 	addi	r8,sp,16
    4774:	003d5606 	br	3cd0 <__alt_data_end+0xff003cd0>
    4778:	9080040c 	andi	r2,r18,16
    477c:	10016126 	beq	r2,zero,4d04 <___vfprintf_internal_r+0x1888>
    4780:	d8802d17 	ldw	r2,180(sp)
    4784:	14c00017 	ldw	r19,0(r2)
    4788:	10800104 	addi	r2,r2,4
    478c:	d8802d15 	stw	r2,180(sp)
    4790:	982dd7fa 	srai	r22,r19,31
    4794:	b005883a 	mov	r2,r22
    4798:	003c8206 	br	39a4 <__alt_data_end+0xff0039a4>
    479c:	9080040c 	andi	r2,r18,16
    47a0:	10003526 	beq	r2,zero,4878 <___vfprintf_internal_r+0x13fc>
    47a4:	d9402d17 	ldw	r5,180(sp)
    47a8:	d8c02917 	ldw	r3,164(sp)
    47ac:	d8002785 	stb	zero,158(sp)
    47b0:	28800104 	addi	r2,r5,4
    47b4:	2cc00017 	ldw	r19,0(r5)
    47b8:	002d883a 	mov	r22,zero
    47bc:	18003716 	blt	r3,zero,489c <___vfprintf_internal_r+0x1420>
    47c0:	00ffdfc4 	movi	r3,-129
    47c4:	d8802d15 	stw	r2,180(sp)
    47c8:	90e4703a 	and	r18,r18,r3
    47cc:	0039883a 	mov	fp,zero
    47d0:	983df326 	beq	r19,zero,3fa0 <__alt_data_end+0xff003fa0>
    47d4:	00800244 	movi	r2,9
    47d8:	14fc7b36 	bltu	r2,r19,39c8 <__alt_data_end+0xff0039c8>
    47dc:	d8c02817 	ldw	r3,160(sp)
    47e0:	dc001dc4 	addi	r16,sp,119
    47e4:	9cc00c04 	addi	r19,r19,48
    47e8:	1c07c83a 	sub	r3,r3,r16
    47ec:	dcc01dc5 	stb	r19,119(sp)
    47f0:	d8c02e15 	stw	r3,184(sp)
    47f4:	003ce806 	br	3b98 <__alt_data_end+0xff003b98>
    47f8:	d8803317 	ldw	r2,204(sp)
    47fc:	143fffc4 	addi	r16,r2,-1
    4800:	043f4d0e 	bge	zero,r16,4538 <__alt_data_end+0xff004538>
    4804:	07000404 	movi	fp,16
    4808:	e400810e 	bge	fp,r16,4a10 <___vfprintf_internal_r+0x1594>
    480c:	01400074 	movhi	r5,1
    4810:	2946ae84 	addi	r5,r5,6842
    4814:	d9402b15 	stw	r5,172(sp)
    4818:	01c001c4 	movi	r7,7
    481c:	dcc02c17 	ldw	r19,176(sp)
    4820:	00000306 	br	4830 <___vfprintf_internal_r+0x13b4>
    4824:	b5800204 	addi	r22,r22,8
    4828:	843ffc04 	addi	r16,r16,-16
    482c:	e4007b0e 	bge	fp,r16,4a1c <___vfprintf_internal_r+0x15a0>
    4830:	18c00404 	addi	r3,r3,16
    4834:	8c400044 	addi	r17,r17,1
    4838:	b5000015 	stw	r20,0(r22)
    483c:	b7000115 	stw	fp,4(r22)
    4840:	d8c02015 	stw	r3,128(sp)
    4844:	dc401f15 	stw	r17,124(sp)
    4848:	3c7ff60e 	bge	r7,r17,4824 <__alt_data_end+0xff004824>
    484c:	d9801e04 	addi	r6,sp,120
    4850:	b80b883a 	mov	r5,r23
    4854:	9809883a 	mov	r4,r19
    4858:	d9c03c15 	stw	r7,240(sp)
    485c:	000a2180 	call	a218 <__sprint_r>
    4860:	d9c03c17 	ldw	r7,240(sp)
    4864:	103c071e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4868:	d8c02017 	ldw	r3,128(sp)
    486c:	dc401f17 	ldw	r17,124(sp)
    4870:	dd800404 	addi	r22,sp,16
    4874:	003fec06 	br	4828 <__alt_data_end+0xff004828>
    4878:	9080100c 	andi	r2,r18,64
    487c:	d8002785 	stb	zero,158(sp)
    4880:	10010e26 	beq	r2,zero,4cbc <___vfprintf_internal_r+0x1840>
    4884:	d9002d17 	ldw	r4,180(sp)
    4888:	d9402917 	ldw	r5,164(sp)
    488c:	002d883a 	mov	r22,zero
    4890:	20800104 	addi	r2,r4,4
    4894:	24c0000b 	ldhu	r19,0(r4)
    4898:	283fc90e 	bge	r5,zero,47c0 <__alt_data_end+0xff0047c0>
    489c:	d8802d15 	stw	r2,180(sp)
    48a0:	0039883a 	mov	fp,zero
    48a4:	9d84b03a 	or	r2,r19,r22
    48a8:	103c461e 	bne	r2,zero,39c4 <__alt_data_end+0xff0039c4>
    48ac:	00800044 	movi	r2,1
    48b0:	003e6c06 	br	4264 <__alt_data_end+0xff004264>
    48b4:	d9002c17 	ldw	r4,176(sp)
    48b8:	d9801e04 	addi	r6,sp,120
    48bc:	b80b883a 	mov	r5,r23
    48c0:	000a2180 	call	a218 <__sprint_r>
    48c4:	103bef1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    48c8:	d8c02017 	ldw	r3,128(sp)
    48cc:	da000404 	addi	r8,sp,16
    48d0:	d9003217 	ldw	r4,200(sp)
    48d4:	d8802617 	ldw	r2,152(sp)
    48d8:	d9403317 	ldw	r5,204(sp)
    48dc:	8123883a 	add	r17,r16,r4
    48e0:	11400216 	blt	r2,r5,48ec <___vfprintf_internal_r+0x1470>
    48e4:	9100004c 	andi	r4,r18,1
    48e8:	20000d26 	beq	r4,zero,4920 <___vfprintf_internal_r+0x14a4>
    48ec:	d9003717 	ldw	r4,220(sp)
    48f0:	d9403417 	ldw	r5,208(sp)
    48f4:	1907883a 	add	r3,r3,r4
    48f8:	d9001f17 	ldw	r4,124(sp)
    48fc:	41400015 	stw	r5,0(r8)
    4900:	d9403717 	ldw	r5,220(sp)
    4904:	21000044 	addi	r4,r4,1
    4908:	d8c02015 	stw	r3,128(sp)
    490c:	41400115 	stw	r5,4(r8)
    4910:	d9001f15 	stw	r4,124(sp)
    4914:	014001c4 	movi	r5,7
    4918:	2901e816 	blt	r5,r4,50bc <___vfprintf_internal_r+0x1c40>
    491c:	42000204 	addi	r8,r8,8
    4920:	d9003317 	ldw	r4,204(sp)
    4924:	8121883a 	add	r16,r16,r4
    4928:	2085c83a 	sub	r2,r4,r2
    492c:	8461c83a 	sub	r16,r16,r17
    4930:	1400010e 	bge	r2,r16,4938 <___vfprintf_internal_r+0x14bc>
    4934:	1021883a 	mov	r16,r2
    4938:	04000a0e 	bge	zero,r16,4964 <___vfprintf_internal_r+0x14e8>
    493c:	d9001f17 	ldw	r4,124(sp)
    4940:	1c07883a 	add	r3,r3,r16
    4944:	44400015 	stw	r17,0(r8)
    4948:	21000044 	addi	r4,r4,1
    494c:	44000115 	stw	r16,4(r8)
    4950:	d8c02015 	stw	r3,128(sp)
    4954:	d9001f15 	stw	r4,124(sp)
    4958:	014001c4 	movi	r5,7
    495c:	2901fb16 	blt	r5,r4,514c <___vfprintf_internal_r+0x1cd0>
    4960:	42000204 	addi	r8,r8,8
    4964:	8001f716 	blt	r16,zero,5144 <___vfprintf_internal_r+0x1cc8>
    4968:	1421c83a 	sub	r16,r2,r16
    496c:	043d380e 	bge	zero,r16,3e50 <__alt_data_end+0xff003e50>
    4970:	04400404 	movi	r17,16
    4974:	d8801f17 	ldw	r2,124(sp)
    4978:	8c3efb0e 	bge	r17,r16,4568 <__alt_data_end+0xff004568>
    497c:	01400074 	movhi	r5,1
    4980:	2946ae84 	addi	r5,r5,6842
    4984:	d9402b15 	stw	r5,172(sp)
    4988:	058001c4 	movi	r22,7
    498c:	dcc02c17 	ldw	r19,176(sp)
    4990:	00000306 	br	49a0 <___vfprintf_internal_r+0x1524>
    4994:	42000204 	addi	r8,r8,8
    4998:	843ffc04 	addi	r16,r16,-16
    499c:	8c3ef50e 	bge	r17,r16,4574 <__alt_data_end+0xff004574>
    49a0:	18c00404 	addi	r3,r3,16
    49a4:	10800044 	addi	r2,r2,1
    49a8:	45000015 	stw	r20,0(r8)
    49ac:	44400115 	stw	r17,4(r8)
    49b0:	d8c02015 	stw	r3,128(sp)
    49b4:	d8801f15 	stw	r2,124(sp)
    49b8:	b0bff60e 	bge	r22,r2,4994 <__alt_data_end+0xff004994>
    49bc:	d9801e04 	addi	r6,sp,120
    49c0:	b80b883a 	mov	r5,r23
    49c4:	9809883a 	mov	r4,r19
    49c8:	000a2180 	call	a218 <__sprint_r>
    49cc:	103bad1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    49d0:	d8c02017 	ldw	r3,128(sp)
    49d4:	d8801f17 	ldw	r2,124(sp)
    49d8:	da000404 	addi	r8,sp,16
    49dc:	003fee06 	br	4998 <__alt_data_end+0xff004998>
    49e0:	9088703a 	and	r4,r18,r2
    49e4:	203eab1e 	bne	r4,zero,4494 <__alt_data_end+0xff004494>
    49e8:	dc401f17 	ldw	r17,124(sp)
    49ec:	40800115 	stw	r2,4(r8)
    49f0:	44000015 	stw	r16,0(r8)
    49f4:	8c400044 	addi	r17,r17,1
    49f8:	d8c02015 	stw	r3,128(sp)
    49fc:	dc401f15 	stw	r17,124(sp)
    4a00:	008001c4 	movi	r2,7
    4a04:	14400e16 	blt	r2,r17,4a40 <___vfprintf_internal_r+0x15c4>
    4a08:	45800204 	addi	r22,r8,8
    4a0c:	003eca06 	br	4538 <__alt_data_end+0xff004538>
    4a10:	01000074 	movhi	r4,1
    4a14:	2106ae84 	addi	r4,r4,6842
    4a18:	d9002b15 	stw	r4,172(sp)
    4a1c:	d8802b17 	ldw	r2,172(sp)
    4a20:	1c07883a 	add	r3,r3,r16
    4a24:	8c400044 	addi	r17,r17,1
    4a28:	b0800015 	stw	r2,0(r22)
    4a2c:	b4000115 	stw	r16,4(r22)
    4a30:	d8c02015 	stw	r3,128(sp)
    4a34:	dc401f15 	stw	r17,124(sp)
    4a38:	008001c4 	movi	r2,7
    4a3c:	147ebd0e 	bge	r2,r17,4534 <__alt_data_end+0xff004534>
    4a40:	d9002c17 	ldw	r4,176(sp)
    4a44:	d9801e04 	addi	r6,sp,120
    4a48:	b80b883a 	mov	r5,r23
    4a4c:	000a2180 	call	a218 <__sprint_r>
    4a50:	103b8c1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4a54:	d8c02017 	ldw	r3,128(sp)
    4a58:	dc401f17 	ldw	r17,124(sp)
    4a5c:	dd800404 	addi	r22,sp,16
    4a60:	003eb506 	br	4538 <__alt_data_end+0xff004538>
    4a64:	d9002c17 	ldw	r4,176(sp)
    4a68:	d9801e04 	addi	r6,sp,120
    4a6c:	b80b883a 	mov	r5,r23
    4a70:	000a2180 	call	a218 <__sprint_r>
    4a74:	103b831e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4a78:	d8c02017 	ldw	r3,128(sp)
    4a7c:	dc401f17 	ldw	r17,124(sp)
    4a80:	da000404 	addi	r8,sp,16
    4a84:	003e8d06 	br	44bc <__alt_data_end+0xff0044bc>
    4a88:	d9002c17 	ldw	r4,176(sp)
    4a8c:	d9801e04 	addi	r6,sp,120
    4a90:	b80b883a 	mov	r5,r23
    4a94:	000a2180 	call	a218 <__sprint_r>
    4a98:	103b7a1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4a9c:	d8c02017 	ldw	r3,128(sp)
    4aa0:	dc401f17 	ldw	r17,124(sp)
    4aa4:	dd800404 	addi	r22,sp,16
    4aa8:	003e8f06 	br	44e8 <__alt_data_end+0xff0044e8>
    4aac:	0027883a 	mov	r19,zero
    4ab0:	003f4a06 	br	47dc <__alt_data_end+0xff0047dc>
    4ab4:	d9002c17 	ldw	r4,176(sp)
    4ab8:	d9801e04 	addi	r6,sp,120
    4abc:	b80b883a 	mov	r5,r23
    4ac0:	000a2180 	call	a218 <__sprint_r>
    4ac4:	103b6f1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4ac8:	d8c02017 	ldw	r3,128(sp)
    4acc:	da000404 	addi	r8,sp,16
    4ad0:	003c9d06 	br	3d48 <__alt_data_end+0xff003d48>
    4ad4:	04e7c83a 	sub	r19,zero,r19
    4ad8:	9804c03a 	cmpne	r2,r19,zero
    4adc:	05adc83a 	sub	r22,zero,r22
    4ae0:	b0adc83a 	sub	r22,r22,r2
    4ae4:	d8802917 	ldw	r2,164(sp)
    4ae8:	07000b44 	movi	fp,45
    4aec:	df002785 	stb	fp,158(sp)
    4af0:	10017b16 	blt	r2,zero,50e0 <___vfprintf_internal_r+0x1c64>
    4af4:	00bfdfc4 	movi	r2,-129
    4af8:	90a4703a 	and	r18,r18,r2
    4afc:	003bb106 	br	39c4 <__alt_data_end+0xff0039c4>
    4b00:	d9003617 	ldw	r4,216(sp)
    4b04:	d9403817 	ldw	r5,224(sp)
    4b08:	da003d15 	stw	r8,244(sp)
    4b0c:	0009e900 	call	9e90 <__fpclassifyd>
    4b10:	da003d17 	ldw	r8,244(sp)
    4b14:	1000f026 	beq	r2,zero,4ed8 <___vfprintf_internal_r+0x1a5c>
    4b18:	d9002917 	ldw	r4,164(sp)
    4b1c:	05bff7c4 	movi	r22,-33
    4b20:	00bfffc4 	movi	r2,-1
    4b24:	8dac703a 	and	r22,r17,r22
    4b28:	20820026 	beq	r4,r2,532c <___vfprintf_internal_r+0x1eb0>
    4b2c:	008011c4 	movi	r2,71
    4b30:	b081f726 	beq	r22,r2,5310 <___vfprintf_internal_r+0x1e94>
    4b34:	d9003817 	ldw	r4,224(sp)
    4b38:	90c04014 	ori	r3,r18,256
    4b3c:	d8c02b15 	stw	r3,172(sp)
    4b40:	20021516 	blt	r4,zero,5398 <___vfprintf_internal_r+0x1f1c>
    4b44:	dcc03817 	ldw	r19,224(sp)
    4b48:	d8002a05 	stb	zero,168(sp)
    4b4c:	00801984 	movi	r2,102
    4b50:	8881f926 	beq	r17,r2,5338 <___vfprintf_internal_r+0x1ebc>
    4b54:	00801184 	movi	r2,70
    4b58:	88821c26 	beq	r17,r2,53cc <___vfprintf_internal_r+0x1f50>
    4b5c:	00801144 	movi	r2,69
    4b60:	b081ef26 	beq	r22,r2,5320 <___vfprintf_internal_r+0x1ea4>
    4b64:	d8c02917 	ldw	r3,164(sp)
    4b68:	d8802104 	addi	r2,sp,132
    4b6c:	d8800315 	stw	r2,12(sp)
    4b70:	d9403617 	ldw	r5,216(sp)
    4b74:	d8802504 	addi	r2,sp,148
    4b78:	d9002c17 	ldw	r4,176(sp)
    4b7c:	d8800215 	stw	r2,8(sp)
    4b80:	d8802604 	addi	r2,sp,152
    4b84:	d8c00015 	stw	r3,0(sp)
    4b88:	d8800115 	stw	r2,4(sp)
    4b8c:	01c00084 	movi	r7,2
    4b90:	980d883a 	mov	r6,r19
    4b94:	d8c03c15 	stw	r3,240(sp)
    4b98:	da003d15 	stw	r8,244(sp)
    4b9c:	0005aa00 	call	5aa0 <_dtoa_r>
    4ba0:	1021883a 	mov	r16,r2
    4ba4:	008019c4 	movi	r2,103
    4ba8:	d8c03c17 	ldw	r3,240(sp)
    4bac:	da003d17 	ldw	r8,244(sp)
    4bb0:	88817126 	beq	r17,r2,5178 <___vfprintf_internal_r+0x1cfc>
    4bb4:	008011c4 	movi	r2,71
    4bb8:	88829226 	beq	r17,r2,5604 <___vfprintf_internal_r+0x2188>
    4bbc:	80f9883a 	add	fp,r16,r3
    4bc0:	d9003617 	ldw	r4,216(sp)
    4bc4:	000d883a 	mov	r6,zero
    4bc8:	000f883a 	mov	r7,zero
    4bcc:	980b883a 	mov	r5,r19
    4bd0:	da003d15 	stw	r8,244(sp)
    4bd4:	000d3f40 	call	d3f4 <__eqdf2>
    4bd8:	da003d17 	ldw	r8,244(sp)
    4bdc:	10018d26 	beq	r2,zero,5214 <___vfprintf_internal_r+0x1d98>
    4be0:	d8802117 	ldw	r2,132(sp)
    4be4:	1700062e 	bgeu	r2,fp,4c00 <___vfprintf_internal_r+0x1784>
    4be8:	01000c04 	movi	r4,48
    4bec:	10c00044 	addi	r3,r2,1
    4bf0:	d8c02115 	stw	r3,132(sp)
    4bf4:	11000005 	stb	r4,0(r2)
    4bf8:	d8802117 	ldw	r2,132(sp)
    4bfc:	173ffb36 	bltu	r2,fp,4bec <__alt_data_end+0xff004bec>
    4c00:	1405c83a 	sub	r2,r2,r16
    4c04:	d8803315 	stw	r2,204(sp)
    4c08:	008011c4 	movi	r2,71
    4c0c:	b0817626 	beq	r22,r2,51e8 <___vfprintf_internal_r+0x1d6c>
    4c10:	00801944 	movi	r2,101
    4c14:	1442810e 	bge	r2,r17,561c <___vfprintf_internal_r+0x21a0>
    4c18:	d8c02617 	ldw	r3,152(sp)
    4c1c:	00801984 	movi	r2,102
    4c20:	d8c03215 	stw	r3,200(sp)
    4c24:	8881fe26 	beq	r17,r2,5420 <___vfprintf_internal_r+0x1fa4>
    4c28:	d8c03217 	ldw	r3,200(sp)
    4c2c:	d9003317 	ldw	r4,204(sp)
    4c30:	1901dd16 	blt	r3,r4,53a8 <___vfprintf_internal_r+0x1f2c>
    4c34:	9480004c 	andi	r18,r18,1
    4c38:	90022b1e 	bne	r18,zero,54e8 <___vfprintf_internal_r+0x206c>
    4c3c:	1805883a 	mov	r2,r3
    4c40:	18028016 	blt	r3,zero,5644 <___vfprintf_internal_r+0x21c8>
    4c44:	d8c03217 	ldw	r3,200(sp)
    4c48:	044019c4 	movi	r17,103
    4c4c:	d8c02e15 	stw	r3,184(sp)
    4c50:	df002a07 	ldb	fp,168(sp)
    4c54:	e001531e 	bne	fp,zero,51a4 <___vfprintf_internal_r+0x1d28>
    4c58:	df002783 	ldbu	fp,158(sp)
    4c5c:	d8802a15 	stw	r2,168(sp)
    4c60:	dc802b17 	ldw	r18,172(sp)
    4c64:	d8002915 	stw	zero,164(sp)
    4c68:	003bd106 	br	3bb0 <__alt_data_end+0xff003bb0>
    4c6c:	d8802d17 	ldw	r2,180(sp)
    4c70:	d8c02d17 	ldw	r3,180(sp)
    4c74:	d9002d17 	ldw	r4,180(sp)
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	18c00117 	ldw	r3,4(r3)
    4c80:	21000204 	addi	r4,r4,8
    4c84:	d8803615 	stw	r2,216(sp)
    4c88:	d8c03815 	stw	r3,224(sp)
    4c8c:	d9002d15 	stw	r4,180(sp)
    4c90:	003b7506 	br	3a68 <__alt_data_end+0xff003a68>
    4c94:	ac400007 	ldb	r17,0(r21)
    4c98:	003a5906 	br	3600 <__alt_data_end+0xff003600>
    4c9c:	9080100c 	andi	r2,r18,64
    4ca0:	1000a826 	beq	r2,zero,4f44 <___vfprintf_internal_r+0x1ac8>
    4ca4:	d9002d17 	ldw	r4,180(sp)
    4ca8:	002d883a 	mov	r22,zero
    4cac:	24c0000b 	ldhu	r19,0(r4)
    4cb0:	21000104 	addi	r4,r4,4
    4cb4:	d9002d15 	stw	r4,180(sp)
    4cb8:	003ccb06 	br	3fe8 <__alt_data_end+0xff003fe8>
    4cbc:	d8c02d17 	ldw	r3,180(sp)
    4cc0:	d9002917 	ldw	r4,164(sp)
    4cc4:	002d883a 	mov	r22,zero
    4cc8:	18800104 	addi	r2,r3,4
    4ccc:	1cc00017 	ldw	r19,0(r3)
    4cd0:	203ebb0e 	bge	r4,zero,47c0 <__alt_data_end+0xff0047c0>
    4cd4:	003ef106 	br	489c <__alt_data_end+0xff00489c>
    4cd8:	9080040c 	andi	r2,r18,16
    4cdc:	1000921e 	bne	r2,zero,4f28 <___vfprintf_internal_r+0x1aac>
    4ce0:	9480100c 	andi	r18,r18,64
    4ce4:	90013926 	beq	r18,zero,51cc <___vfprintf_internal_r+0x1d50>
    4ce8:	d9002d17 	ldw	r4,180(sp)
    4cec:	d9402f17 	ldw	r5,188(sp)
    4cf0:	20800017 	ldw	r2,0(r4)
    4cf4:	21000104 	addi	r4,r4,4
    4cf8:	d9002d15 	stw	r4,180(sp)
    4cfc:	1140000d 	sth	r5,0(r2)
    4d00:	003a1606 	br	355c <__alt_data_end+0xff00355c>
    4d04:	9080100c 	andi	r2,r18,64
    4d08:	10008026 	beq	r2,zero,4f0c <___vfprintf_internal_r+0x1a90>
    4d0c:	d8c02d17 	ldw	r3,180(sp)
    4d10:	1cc0000f 	ldh	r19,0(r3)
    4d14:	18c00104 	addi	r3,r3,4
    4d18:	d8c02d15 	stw	r3,180(sp)
    4d1c:	982dd7fa 	srai	r22,r19,31
    4d20:	b005883a 	mov	r2,r22
    4d24:	003b1f06 	br	39a4 <__alt_data_end+0xff0039a4>
    4d28:	9080100c 	andi	r2,r18,64
    4d2c:	d8002785 	stb	zero,158(sp)
    4d30:	10008a1e 	bne	r2,zero,4f5c <___vfprintf_internal_r+0x1ae0>
    4d34:	d9402d17 	ldw	r5,180(sp)
    4d38:	d8c02917 	ldw	r3,164(sp)
    4d3c:	002d883a 	mov	r22,zero
    4d40:	28800104 	addi	r2,r5,4
    4d44:	2cc00017 	ldw	r19,0(r5)
    4d48:	183e4b0e 	bge	r3,zero,4678 <__alt_data_end+0xff004678>
    4d4c:	9d86b03a 	or	r3,r19,r22
    4d50:	d8802d15 	stw	r2,180(sp)
    4d54:	183e4c1e 	bne	r3,zero,4688 <__alt_data_end+0xff004688>
    4d58:	0039883a 	mov	fp,zero
    4d5c:	0005883a 	mov	r2,zero
    4d60:	003d4006 	br	4264 <__alt_data_end+0xff004264>
    4d64:	01400074 	movhi	r5,1
    4d68:	2946ae84 	addi	r5,r5,6842
    4d6c:	d9402b15 	stw	r5,172(sp)
    4d70:	d9402b17 	ldw	r5,172(sp)
    4d74:	1c47883a 	add	r3,r3,r17
    4d78:	10800044 	addi	r2,r2,1
    4d7c:	41400015 	stw	r5,0(r8)
    4d80:	44400115 	stw	r17,4(r8)
    4d84:	d8c02015 	stw	r3,128(sp)
    4d88:	d8801f15 	stw	r2,124(sp)
    4d8c:	010001c4 	movi	r4,7
    4d90:	20bec816 	blt	r4,r2,48b4 <__alt_data_end+0xff0048b4>
    4d94:	42000204 	addi	r8,r8,8
    4d98:	003ecd06 	br	48d0 <__alt_data_end+0xff0048d0>
    4d9c:	d9002917 	ldw	r4,164(sp)
    4da0:	d8002785 	stb	zero,158(sp)
    4da4:	203d2d16 	blt	r4,zero,425c <__alt_data_end+0xff00425c>
    4da8:	00bfdfc4 	movi	r2,-129
    4dac:	90a4703a 	and	r18,r18,r2
    4db0:	003a9106 	br	37f8 <__alt_data_end+0xff0037f8>
    4db4:	01000074 	movhi	r4,1
    4db8:	2106ae84 	addi	r4,r4,6842
    4dbc:	d9002b15 	stw	r4,172(sp)
    4dc0:	003c0c06 	br	3df4 <__alt_data_end+0xff003df4>
    4dc4:	d9002c17 	ldw	r4,176(sp)
    4dc8:	d9801e04 	addi	r6,sp,120
    4dcc:	b80b883a 	mov	r5,r23
    4dd0:	000a2180 	call	a218 <__sprint_r>
    4dd4:	103aab1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4dd8:	d8c02017 	ldw	r3,128(sp)
    4ddc:	da000404 	addi	r8,sp,16
    4de0:	003d4106 	br	42e8 <__alt_data_end+0xff0042e8>
    4de4:	d8801f17 	ldw	r2,124(sp)
    4de8:	01400074 	movhi	r5,1
    4dec:	01000044 	movi	r4,1
    4df0:	18c00044 	addi	r3,r3,1
    4df4:	10800044 	addi	r2,r2,1
    4df8:	2946ae04 	addi	r5,r5,6840
    4dfc:	41000115 	stw	r4,4(r8)
    4e00:	41400015 	stw	r5,0(r8)
    4e04:	d8c02015 	stw	r3,128(sp)
    4e08:	d8801f15 	stw	r2,124(sp)
    4e0c:	010001c4 	movi	r4,7
    4e10:	20805c16 	blt	r4,r2,4f84 <___vfprintf_internal_r+0x1b08>
    4e14:	42000204 	addi	r8,r8,8
    4e18:	8800041e 	bne	r17,zero,4e2c <___vfprintf_internal_r+0x19b0>
    4e1c:	d8803317 	ldw	r2,204(sp)
    4e20:	1000021e 	bne	r2,zero,4e2c <___vfprintf_internal_r+0x19b0>
    4e24:	9080004c 	andi	r2,r18,1
    4e28:	103c0926 	beq	r2,zero,3e50 <__alt_data_end+0xff003e50>
    4e2c:	d9003717 	ldw	r4,220(sp)
    4e30:	d8801f17 	ldw	r2,124(sp)
    4e34:	d9403417 	ldw	r5,208(sp)
    4e38:	20c7883a 	add	r3,r4,r3
    4e3c:	10800044 	addi	r2,r2,1
    4e40:	41000115 	stw	r4,4(r8)
    4e44:	41400015 	stw	r5,0(r8)
    4e48:	d8c02015 	stw	r3,128(sp)
    4e4c:	d8801f15 	stw	r2,124(sp)
    4e50:	010001c4 	movi	r4,7
    4e54:	20812116 	blt	r4,r2,52dc <___vfprintf_internal_r+0x1e60>
    4e58:	42000204 	addi	r8,r8,8
    4e5c:	0463c83a 	sub	r17,zero,r17
    4e60:	0440730e 	bge	zero,r17,5030 <___vfprintf_internal_r+0x1bb4>
    4e64:	05800404 	movi	r22,16
    4e68:	b440860e 	bge	r22,r17,5084 <___vfprintf_internal_r+0x1c08>
    4e6c:	01400074 	movhi	r5,1
    4e70:	2946ae84 	addi	r5,r5,6842
    4e74:	d9402b15 	stw	r5,172(sp)
    4e78:	070001c4 	movi	fp,7
    4e7c:	dcc02c17 	ldw	r19,176(sp)
    4e80:	00000306 	br	4e90 <___vfprintf_internal_r+0x1a14>
    4e84:	42000204 	addi	r8,r8,8
    4e88:	8c7ffc04 	addi	r17,r17,-16
    4e8c:	b440800e 	bge	r22,r17,5090 <___vfprintf_internal_r+0x1c14>
    4e90:	18c00404 	addi	r3,r3,16
    4e94:	10800044 	addi	r2,r2,1
    4e98:	45000015 	stw	r20,0(r8)
    4e9c:	45800115 	stw	r22,4(r8)
    4ea0:	d8c02015 	stw	r3,128(sp)
    4ea4:	d8801f15 	stw	r2,124(sp)
    4ea8:	e0bff60e 	bge	fp,r2,4e84 <__alt_data_end+0xff004e84>
    4eac:	d9801e04 	addi	r6,sp,120
    4eb0:	b80b883a 	mov	r5,r23
    4eb4:	9809883a 	mov	r4,r19
    4eb8:	000a2180 	call	a218 <__sprint_r>
    4ebc:	103a711e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4ec0:	d8c02017 	ldw	r3,128(sp)
    4ec4:	d8801f17 	ldw	r2,124(sp)
    4ec8:	da000404 	addi	r8,sp,16
    4ecc:	003fee06 	br	4e88 <__alt_data_end+0xff004e88>
    4ed0:	00bfffc4 	movi	r2,-1
    4ed4:	003a6f06 	br	3894 <__alt_data_end+0xff003894>
    4ed8:	008011c4 	movi	r2,71
    4edc:	1440b816 	blt	r2,r17,51c0 <___vfprintf_internal_r+0x1d44>
    4ee0:	04000074 	movhi	r16,1
    4ee4:	8406a004 	addi	r16,r16,6784
    4ee8:	00c000c4 	movi	r3,3
    4eec:	00bfdfc4 	movi	r2,-129
    4ef0:	d8c02a15 	stw	r3,168(sp)
    4ef4:	90a4703a 	and	r18,r18,r2
    4ef8:	df002783 	ldbu	fp,158(sp)
    4efc:	d8c02e15 	stw	r3,184(sp)
    4f00:	d8002915 	stw	zero,164(sp)
    4f04:	d8003215 	stw	zero,200(sp)
    4f08:	003b2906 	br	3bb0 <__alt_data_end+0xff003bb0>
    4f0c:	d9002d17 	ldw	r4,180(sp)
    4f10:	24c00017 	ldw	r19,0(r4)
    4f14:	21000104 	addi	r4,r4,4
    4f18:	d9002d15 	stw	r4,180(sp)
    4f1c:	982dd7fa 	srai	r22,r19,31
    4f20:	b005883a 	mov	r2,r22
    4f24:	003a9f06 	br	39a4 <__alt_data_end+0xff0039a4>
    4f28:	d9402d17 	ldw	r5,180(sp)
    4f2c:	d8c02f17 	ldw	r3,188(sp)
    4f30:	28800017 	ldw	r2,0(r5)
    4f34:	29400104 	addi	r5,r5,4
    4f38:	d9402d15 	stw	r5,180(sp)
    4f3c:	10c00015 	stw	r3,0(r2)
    4f40:	00398606 	br	355c <__alt_data_end+0xff00355c>
    4f44:	d9402d17 	ldw	r5,180(sp)
    4f48:	002d883a 	mov	r22,zero
    4f4c:	2cc00017 	ldw	r19,0(r5)
    4f50:	29400104 	addi	r5,r5,4
    4f54:	d9402d15 	stw	r5,180(sp)
    4f58:	003c2306 	br	3fe8 <__alt_data_end+0xff003fe8>
    4f5c:	d8c02d17 	ldw	r3,180(sp)
    4f60:	d9002917 	ldw	r4,164(sp)
    4f64:	002d883a 	mov	r22,zero
    4f68:	18800104 	addi	r2,r3,4
    4f6c:	1cc0000b 	ldhu	r19,0(r3)
    4f70:	203dc10e 	bge	r4,zero,4678 <__alt_data_end+0xff004678>
    4f74:	003f7506 	br	4d4c <__alt_data_end+0xff004d4c>
    4f78:	04000074 	movhi	r16,1
    4f7c:	84069e04 	addi	r16,r16,6776
    4f80:	003acc06 	br	3ab4 <__alt_data_end+0xff003ab4>
    4f84:	d9002c17 	ldw	r4,176(sp)
    4f88:	d9801e04 	addi	r6,sp,120
    4f8c:	b80b883a 	mov	r5,r23
    4f90:	000a2180 	call	a218 <__sprint_r>
    4f94:	103a3b1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4f98:	dc402617 	ldw	r17,152(sp)
    4f9c:	d8c02017 	ldw	r3,128(sp)
    4fa0:	da000404 	addi	r8,sp,16
    4fa4:	003f9c06 	br	4e18 <__alt_data_end+0xff004e18>
    4fa8:	ac400043 	ldbu	r17,1(r21)
    4fac:	94800814 	ori	r18,r18,32
    4fb0:	ad400044 	addi	r21,r21,1
    4fb4:	8c403fcc 	andi	r17,r17,255
    4fb8:	8c40201c 	xori	r17,r17,128
    4fbc:	8c7fe004 	addi	r17,r17,-128
    4fc0:	00398f06 	br	3600 <__alt_data_end+0xff003600>
    4fc4:	d8c02d15 	stw	r3,180(sp)
    4fc8:	0039883a 	mov	fp,zero
    4fcc:	003e3506 	br	48a4 <__alt_data_end+0xff0048a4>
    4fd0:	d9002c17 	ldw	r4,176(sp)
    4fd4:	d9801e04 	addi	r6,sp,120
    4fd8:	b80b883a 	mov	r5,r23
    4fdc:	000a2180 	call	a218 <__sprint_r>
    4fe0:	103a281e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    4fe4:	d8c02017 	ldw	r3,128(sp)
    4fe8:	da000404 	addi	r8,sp,16
    4fec:	003cd006 	br	4330 <__alt_data_end+0xff004330>
    4ff0:	8009883a 	mov	r4,r16
    4ff4:	da003d15 	stw	r8,244(sp)
    4ff8:	00033e40 	call	33e4 <strlen>
    4ffc:	d8802e15 	stw	r2,184(sp)
    5000:	da003d17 	ldw	r8,244(sp)
    5004:	103c340e 	bge	r2,zero,40d8 <__alt_data_end+0xff0040d8>
    5008:	0005883a 	mov	r2,zero
    500c:	003c3206 	br	40d8 <__alt_data_end+0xff0040d8>
    5010:	d9002c17 	ldw	r4,176(sp)
    5014:	d9801e04 	addi	r6,sp,120
    5018:	b80b883a 	mov	r5,r23
    501c:	000a2180 	call	a218 <__sprint_r>
    5020:	103a181e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    5024:	d8c02017 	ldw	r3,128(sp)
    5028:	d8801f17 	ldw	r2,124(sp)
    502c:	da000404 	addi	r8,sp,16
    5030:	d9403317 	ldw	r5,204(sp)
    5034:	10800044 	addi	r2,r2,1
    5038:	44000015 	stw	r16,0(r8)
    503c:	28c7883a 	add	r3,r5,r3
    5040:	003b7d06 	br	3e38 <__alt_data_end+0xff003e38>
    5044:	01000074 	movhi	r4,1
    5048:	2106b284 	addi	r4,r4,6858
    504c:	d9003515 	stw	r4,212(sp)
    5050:	003b1406 	br	3ca4 <__alt_data_end+0xff003ca4>
    5054:	013fffc4 	movi	r4,-1
    5058:	003a3506 	br	3930 <__alt_data_end+0xff003930>
    505c:	0023883a 	mov	r17,zero
    5060:	003d9d06 	br	46d8 <__alt_data_end+0xff0046d8>
    5064:	d9002c17 	ldw	r4,176(sp)
    5068:	d9801e04 	addi	r6,sp,120
    506c:	b80b883a 	mov	r5,r23
    5070:	000a2180 	call	a218 <__sprint_r>
    5074:	103a031e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    5078:	d8c02017 	ldw	r3,128(sp)
    507c:	da000404 	addi	r8,sp,16
    5080:	003d9406 	br	46d4 <__alt_data_end+0xff0046d4>
    5084:	01000074 	movhi	r4,1
    5088:	2106ae84 	addi	r4,r4,6842
    508c:	d9002b15 	stw	r4,172(sp)
    5090:	d9002b17 	ldw	r4,172(sp)
    5094:	1c47883a 	add	r3,r3,r17
    5098:	10800044 	addi	r2,r2,1
    509c:	41000015 	stw	r4,0(r8)
    50a0:	44400115 	stw	r17,4(r8)
    50a4:	d8c02015 	stw	r3,128(sp)
    50a8:	d8801f15 	stw	r2,124(sp)
    50ac:	010001c4 	movi	r4,7
    50b0:	20bfd716 	blt	r4,r2,5010 <__alt_data_end+0xff005010>
    50b4:	42000204 	addi	r8,r8,8
    50b8:	003fdd06 	br	5030 <__alt_data_end+0xff005030>
    50bc:	d9002c17 	ldw	r4,176(sp)
    50c0:	d9801e04 	addi	r6,sp,120
    50c4:	b80b883a 	mov	r5,r23
    50c8:	000a2180 	call	a218 <__sprint_r>
    50cc:	1039ed1e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    50d0:	d8802617 	ldw	r2,152(sp)
    50d4:	d8c02017 	ldw	r3,128(sp)
    50d8:	da000404 	addi	r8,sp,16
    50dc:	003e1006 	br	4920 <__alt_data_end+0xff004920>
    50e0:	00800044 	movi	r2,1
    50e4:	10803fcc 	andi	r2,r2,255
    50e8:	00c00044 	movi	r3,1
    50ec:	10fa3526 	beq	r2,r3,39c4 <__alt_data_end+0xff0039c4>
    50f0:	00c00084 	movi	r3,2
    50f4:	10fbcb26 	beq	r2,r3,4024 <__alt_data_end+0xff004024>
    50f8:	003a8f06 	br	3b38 <__alt_data_end+0xff003b38>
    50fc:	01000074 	movhi	r4,1
    5100:	2106b284 	addi	r4,r4,6858
    5104:	d9003515 	stw	r4,212(sp)
    5108:	003b7606 	br	3ee4 <__alt_data_end+0xff003ee4>
    510c:	d8802917 	ldw	r2,164(sp)
    5110:	00c00184 	movi	r3,6
    5114:	1880012e 	bgeu	r3,r2,511c <___vfprintf_internal_r+0x1ca0>
    5118:	1805883a 	mov	r2,r3
    511c:	d8802e15 	stw	r2,184(sp)
    5120:	1000ef16 	blt	r2,zero,54e0 <___vfprintf_internal_r+0x2064>
    5124:	04000074 	movhi	r16,1
    5128:	d8802a15 	stw	r2,168(sp)
    512c:	dcc02d15 	stw	r19,180(sp)
    5130:	d8002915 	stw	zero,164(sp)
    5134:	d8003215 	stw	zero,200(sp)
    5138:	8406ac04 	addi	r16,r16,6832
    513c:	0039883a 	mov	fp,zero
    5140:	003aa206 	br	3bcc <__alt_data_end+0xff003bcc>
    5144:	0021883a 	mov	r16,zero
    5148:	003e0706 	br	4968 <__alt_data_end+0xff004968>
    514c:	d9002c17 	ldw	r4,176(sp)
    5150:	d9801e04 	addi	r6,sp,120
    5154:	b80b883a 	mov	r5,r23
    5158:	000a2180 	call	a218 <__sprint_r>
    515c:	1039c91e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    5160:	d8802617 	ldw	r2,152(sp)
    5164:	d9403317 	ldw	r5,204(sp)
    5168:	d8c02017 	ldw	r3,128(sp)
    516c:	da000404 	addi	r8,sp,16
    5170:	2885c83a 	sub	r2,r5,r2
    5174:	003dfb06 	br	4964 <__alt_data_end+0xff004964>
    5178:	9080004c 	andi	r2,r18,1
    517c:	103e8f1e 	bne	r2,zero,4bbc <__alt_data_end+0xff004bbc>
    5180:	d8802117 	ldw	r2,132(sp)
    5184:	003e9e06 	br	4c00 <__alt_data_end+0xff004c00>
    5188:	1025883a 	mov	r18,r2
    518c:	0039883a 	mov	fp,zero
    5190:	00800084 	movi	r2,2
    5194:	003fd306 	br	50e4 <__alt_data_end+0xff0050e4>
    5198:	07000b44 	movi	fp,45
    519c:	df002785 	stb	fp,158(sp)
    51a0:	003a4006 	br	3aa4 <__alt_data_end+0xff003aa4>
    51a4:	00c00b44 	movi	r3,45
    51a8:	d8c02785 	stb	r3,158(sp)
    51ac:	d8802a15 	stw	r2,168(sp)
    51b0:	dc802b17 	ldw	r18,172(sp)
    51b4:	d8002915 	stw	zero,164(sp)
    51b8:	07000b44 	movi	fp,45
    51bc:	003a8006 	br	3bc0 <__alt_data_end+0xff003bc0>
    51c0:	04000074 	movhi	r16,1
    51c4:	8406a104 	addi	r16,r16,6788
    51c8:	003f4706 	br	4ee8 <__alt_data_end+0xff004ee8>
    51cc:	d8c02d17 	ldw	r3,180(sp)
    51d0:	d9002f17 	ldw	r4,188(sp)
    51d4:	18800017 	ldw	r2,0(r3)
    51d8:	18c00104 	addi	r3,r3,4
    51dc:	d8c02d15 	stw	r3,180(sp)
    51e0:	11000015 	stw	r4,0(r2)
    51e4:	0038dd06 	br	355c <__alt_data_end+0xff00355c>
    51e8:	dd802617 	ldw	r22,152(sp)
    51ec:	00bfff44 	movi	r2,-3
    51f0:	b0801c16 	blt	r22,r2,5264 <___vfprintf_internal_r+0x1de8>
    51f4:	d9402917 	ldw	r5,164(sp)
    51f8:	2d801a16 	blt	r5,r22,5264 <___vfprintf_internal_r+0x1de8>
    51fc:	dd803215 	stw	r22,200(sp)
    5200:	003e8906 	br	4c28 <__alt_data_end+0xff004c28>
    5204:	01000074 	movhi	r4,1
    5208:	2106ae84 	addi	r4,r4,6842
    520c:	d9002b15 	stw	r4,172(sp)
    5210:	003c9106 	br	4458 <__alt_data_end+0xff004458>
    5214:	e005883a 	mov	r2,fp
    5218:	003e7906 	br	4c00 <__alt_data_end+0xff004c00>
    521c:	d9402917 	ldw	r5,164(sp)
    5220:	df002783 	ldbu	fp,158(sp)
    5224:	dcc02d15 	stw	r19,180(sp)
    5228:	d9402a15 	stw	r5,168(sp)
    522c:	d9402e15 	stw	r5,184(sp)
    5230:	d8002915 	stw	zero,164(sp)
    5234:	d8003215 	stw	zero,200(sp)
    5238:	003a5d06 	br	3bb0 <__alt_data_end+0xff003bb0>
    523c:	9080004c 	andi	r2,r18,1
    5240:	0039883a 	mov	fp,zero
    5244:	10000426 	beq	r2,zero,5258 <___vfprintf_internal_r+0x1ddc>
    5248:	00800c04 	movi	r2,48
    524c:	dc001dc4 	addi	r16,sp,119
    5250:	d8801dc5 	stb	r2,119(sp)
    5254:	003b8006 	br	4058 <__alt_data_end+0xff004058>
    5258:	d8002e15 	stw	zero,184(sp)
    525c:	dc001e04 	addi	r16,sp,120
    5260:	003a4d06 	br	3b98 <__alt_data_end+0xff003b98>
    5264:	8c7fff84 	addi	r17,r17,-2
    5268:	b5bfffc4 	addi	r22,r22,-1
    526c:	dd802615 	stw	r22,152(sp)
    5270:	dc4022c5 	stb	r17,139(sp)
    5274:	b000bf16 	blt	r22,zero,5574 <___vfprintf_internal_r+0x20f8>
    5278:	00800ac4 	movi	r2,43
    527c:	d8802305 	stb	r2,140(sp)
    5280:	00800244 	movi	r2,9
    5284:	15807016 	blt	r2,r22,5448 <___vfprintf_internal_r+0x1fcc>
    5288:	00800c04 	movi	r2,48
    528c:	b5800c04 	addi	r22,r22,48
    5290:	d8802345 	stb	r2,141(sp)
    5294:	dd802385 	stb	r22,142(sp)
    5298:	d88023c4 	addi	r2,sp,143
    529c:	df0022c4 	addi	fp,sp,139
    52a0:	d8c03317 	ldw	r3,204(sp)
    52a4:	1739c83a 	sub	fp,r2,fp
    52a8:	d9003317 	ldw	r4,204(sp)
    52ac:	e0c7883a 	add	r3,fp,r3
    52b0:	df003a15 	stw	fp,232(sp)
    52b4:	d8c02e15 	stw	r3,184(sp)
    52b8:	00800044 	movi	r2,1
    52bc:	1100b30e 	bge	r2,r4,558c <___vfprintf_internal_r+0x2110>
    52c0:	d8c02e17 	ldw	r3,184(sp)
    52c4:	18c00044 	addi	r3,r3,1
    52c8:	d8c02e15 	stw	r3,184(sp)
    52cc:	1805883a 	mov	r2,r3
    52d0:	1800ac16 	blt	r3,zero,5584 <___vfprintf_internal_r+0x2108>
    52d4:	d8003215 	stw	zero,200(sp)
    52d8:	003e5d06 	br	4c50 <__alt_data_end+0xff004c50>
    52dc:	d9002c17 	ldw	r4,176(sp)
    52e0:	d9801e04 	addi	r6,sp,120
    52e4:	b80b883a 	mov	r5,r23
    52e8:	000a2180 	call	a218 <__sprint_r>
    52ec:	1039651e 	bne	r2,zero,3884 <__alt_data_end+0xff003884>
    52f0:	dc402617 	ldw	r17,152(sp)
    52f4:	d8c02017 	ldw	r3,128(sp)
    52f8:	d8801f17 	ldw	r2,124(sp)
    52fc:	da000404 	addi	r8,sp,16
    5300:	003ed606 	br	4e5c <__alt_data_end+0xff004e5c>
    5304:	582b883a 	mov	r21,r11
    5308:	d8002915 	stw	zero,164(sp)
    530c:	0038bd06 	br	3604 <__alt_data_end+0xff003604>
    5310:	d8802917 	ldw	r2,164(sp)
    5314:	103e071e 	bne	r2,zero,4b34 <__alt_data_end+0xff004b34>
    5318:	dc002915 	stw	r16,164(sp)
    531c:	003e0506 	br	4b34 <__alt_data_end+0xff004b34>
    5320:	d9002917 	ldw	r4,164(sp)
    5324:	20c00044 	addi	r3,r4,1
    5328:	003e0f06 	br	4b68 <__alt_data_end+0xff004b68>
    532c:	01400184 	movi	r5,6
    5330:	d9402915 	stw	r5,164(sp)
    5334:	003dff06 	br	4b34 <__alt_data_end+0xff004b34>
    5338:	d8802104 	addi	r2,sp,132
    533c:	d8800315 	stw	r2,12(sp)
    5340:	d8802504 	addi	r2,sp,148
    5344:	d8800215 	stw	r2,8(sp)
    5348:	d8802604 	addi	r2,sp,152
    534c:	d8800115 	stw	r2,4(sp)
    5350:	d8802917 	ldw	r2,164(sp)
    5354:	d9403617 	ldw	r5,216(sp)
    5358:	d9002c17 	ldw	r4,176(sp)
    535c:	d8800015 	stw	r2,0(sp)
    5360:	01c000c4 	movi	r7,3
    5364:	980d883a 	mov	r6,r19
    5368:	da003d15 	stw	r8,244(sp)
    536c:	0005aa00 	call	5aa0 <_dtoa_r>
    5370:	d8c02917 	ldw	r3,164(sp)
    5374:	da003d17 	ldw	r8,244(sp)
    5378:	1021883a 	mov	r16,r2
    537c:	10f9883a 	add	fp,r2,r3
    5380:	81000007 	ldb	r4,0(r16)
    5384:	00800c04 	movi	r2,48
    5388:	20805e26 	beq	r4,r2,5504 <___vfprintf_internal_r+0x2088>
    538c:	d8c02617 	ldw	r3,152(sp)
    5390:	e0f9883a 	add	fp,fp,r3
    5394:	003e0a06 	br	4bc0 <__alt_data_end+0xff004bc0>
    5398:	00c00b44 	movi	r3,45
    539c:	24e0003c 	xorhi	r19,r4,32768
    53a0:	d8c02a05 	stb	r3,168(sp)
    53a4:	003de906 	br	4b4c <__alt_data_end+0xff004b4c>
    53a8:	d8c03217 	ldw	r3,200(sp)
    53ac:	00c07a0e 	bge	zero,r3,5598 <___vfprintf_internal_r+0x211c>
    53b0:	00800044 	movi	r2,1
    53b4:	d9003317 	ldw	r4,204(sp)
    53b8:	1105883a 	add	r2,r2,r4
    53bc:	d8802e15 	stw	r2,184(sp)
    53c0:	10004e16 	blt	r2,zero,54fc <___vfprintf_internal_r+0x2080>
    53c4:	044019c4 	movi	r17,103
    53c8:	003e2106 	br	4c50 <__alt_data_end+0xff004c50>
    53cc:	d9002917 	ldw	r4,164(sp)
    53d0:	d8802104 	addi	r2,sp,132
    53d4:	d8800315 	stw	r2,12(sp)
    53d8:	d9000015 	stw	r4,0(sp)
    53dc:	d8802504 	addi	r2,sp,148
    53e0:	d9403617 	ldw	r5,216(sp)
    53e4:	d9002c17 	ldw	r4,176(sp)
    53e8:	d8800215 	stw	r2,8(sp)
    53ec:	d8802604 	addi	r2,sp,152
    53f0:	d8800115 	stw	r2,4(sp)
    53f4:	01c000c4 	movi	r7,3
    53f8:	980d883a 	mov	r6,r19
    53fc:	da003d15 	stw	r8,244(sp)
    5400:	0005aa00 	call	5aa0 <_dtoa_r>
    5404:	d8c02917 	ldw	r3,164(sp)
    5408:	da003d17 	ldw	r8,244(sp)
    540c:	1021883a 	mov	r16,r2
    5410:	00801184 	movi	r2,70
    5414:	80f9883a 	add	fp,r16,r3
    5418:	88bfd926 	beq	r17,r2,5380 <__alt_data_end+0xff005380>
    541c:	003de806 	br	4bc0 <__alt_data_end+0xff004bc0>
    5420:	d9002917 	ldw	r4,164(sp)
    5424:	00c04d0e 	bge	zero,r3,555c <___vfprintf_internal_r+0x20e0>
    5428:	2000441e 	bne	r4,zero,553c <___vfprintf_internal_r+0x20c0>
    542c:	9480004c 	andi	r18,r18,1
    5430:	9000421e 	bne	r18,zero,553c <___vfprintf_internal_r+0x20c0>
    5434:	1805883a 	mov	r2,r3
    5438:	18007016 	blt	r3,zero,55fc <___vfprintf_internal_r+0x2180>
    543c:	d8c03217 	ldw	r3,200(sp)
    5440:	d8c02e15 	stw	r3,184(sp)
    5444:	003e0206 	br	4c50 <__alt_data_end+0xff004c50>
    5448:	df0022c4 	addi	fp,sp,139
    544c:	dc002915 	stw	r16,164(sp)
    5450:	4027883a 	mov	r19,r8
    5454:	e021883a 	mov	r16,fp
    5458:	b009883a 	mov	r4,r22
    545c:	01400284 	movi	r5,10
    5460:	0001ef80 	call	1ef8 <__modsi3>
    5464:	10800c04 	addi	r2,r2,48
    5468:	843fffc4 	addi	r16,r16,-1
    546c:	b009883a 	mov	r4,r22
    5470:	01400284 	movi	r5,10
    5474:	80800005 	stb	r2,0(r16)
    5478:	0001e740 	call	1e74 <__divsi3>
    547c:	102d883a 	mov	r22,r2
    5480:	00800244 	movi	r2,9
    5484:	15bff416 	blt	r2,r22,5458 <__alt_data_end+0xff005458>
    5488:	9811883a 	mov	r8,r19
    548c:	b0800c04 	addi	r2,r22,48
    5490:	8027883a 	mov	r19,r16
    5494:	997fffc4 	addi	r5,r19,-1
    5498:	98bfffc5 	stb	r2,-1(r19)
    549c:	dc002917 	ldw	r16,164(sp)
    54a0:	2f006a2e 	bgeu	r5,fp,564c <___vfprintf_internal_r+0x21d0>
    54a4:	d9c02384 	addi	r7,sp,142
    54a8:	3ccfc83a 	sub	r7,r7,r19
    54ac:	d9002344 	addi	r4,sp,141
    54b0:	e1cf883a 	add	r7,fp,r7
    54b4:	00000106 	br	54bc <___vfprintf_internal_r+0x2040>
    54b8:	28800003 	ldbu	r2,0(r5)
    54bc:	20800005 	stb	r2,0(r4)
    54c0:	21000044 	addi	r4,r4,1
    54c4:	29400044 	addi	r5,r5,1
    54c8:	393ffb1e 	bne	r7,r4,54b8 <__alt_data_end+0xff0054b8>
    54cc:	d8802304 	addi	r2,sp,140
    54d0:	14c5c83a 	sub	r2,r2,r19
    54d4:	d8c02344 	addi	r3,sp,141
    54d8:	1885883a 	add	r2,r3,r2
    54dc:	003f7006 	br	52a0 <__alt_data_end+0xff0052a0>
    54e0:	0005883a 	mov	r2,zero
    54e4:	003f0f06 	br	5124 <__alt_data_end+0xff005124>
    54e8:	d8c03217 	ldw	r3,200(sp)
    54ec:	18c00044 	addi	r3,r3,1
    54f0:	d8c02e15 	stw	r3,184(sp)
    54f4:	1805883a 	mov	r2,r3
    54f8:	183fb20e 	bge	r3,zero,53c4 <__alt_data_end+0xff0053c4>
    54fc:	0005883a 	mov	r2,zero
    5500:	003fb006 	br	53c4 <__alt_data_end+0xff0053c4>
    5504:	d9003617 	ldw	r4,216(sp)
    5508:	000d883a 	mov	r6,zero
    550c:	000f883a 	mov	r7,zero
    5510:	980b883a 	mov	r5,r19
    5514:	d8c03c15 	stw	r3,240(sp)
    5518:	da003d15 	stw	r8,244(sp)
    551c:	000d3f40 	call	d3f4 <__eqdf2>
    5520:	d8c03c17 	ldw	r3,240(sp)
    5524:	da003d17 	ldw	r8,244(sp)
    5528:	103f9826 	beq	r2,zero,538c <__alt_data_end+0xff00538c>
    552c:	00800044 	movi	r2,1
    5530:	10c7c83a 	sub	r3,r2,r3
    5534:	d8c02615 	stw	r3,152(sp)
    5538:	003f9506 	br	5390 <__alt_data_end+0xff005390>
    553c:	d9002917 	ldw	r4,164(sp)
    5540:	d8c03217 	ldw	r3,200(sp)
    5544:	20800044 	addi	r2,r4,1
    5548:	1885883a 	add	r2,r3,r2
    554c:	d8802e15 	stw	r2,184(sp)
    5550:	103dbf0e 	bge	r2,zero,4c50 <__alt_data_end+0xff004c50>
    5554:	0005883a 	mov	r2,zero
    5558:	003dbd06 	br	4c50 <__alt_data_end+0xff004c50>
    555c:	2000211e 	bne	r4,zero,55e4 <___vfprintf_internal_r+0x2168>
    5560:	9480004c 	andi	r18,r18,1
    5564:	90001f1e 	bne	r18,zero,55e4 <___vfprintf_internal_r+0x2168>
    5568:	00800044 	movi	r2,1
    556c:	d8802e15 	stw	r2,184(sp)
    5570:	003db706 	br	4c50 <__alt_data_end+0xff004c50>
    5574:	00800b44 	movi	r2,45
    5578:	05adc83a 	sub	r22,zero,r22
    557c:	d8802305 	stb	r2,140(sp)
    5580:	003f3f06 	br	5280 <__alt_data_end+0xff005280>
    5584:	0005883a 	mov	r2,zero
    5588:	003f5206 	br	52d4 <__alt_data_end+0xff0052d4>
    558c:	90a4703a 	and	r18,r18,r2
    5590:	903f4e26 	beq	r18,zero,52cc <__alt_data_end+0xff0052cc>
    5594:	003f4a06 	br	52c0 <__alt_data_end+0xff0052c0>
    5598:	00800084 	movi	r2,2
    559c:	10c5c83a 	sub	r2,r2,r3
    55a0:	003f8406 	br	53b4 <__alt_data_end+0xff0053b4>
    55a4:	d8802d17 	ldw	r2,180(sp)
    55a8:	d9002d17 	ldw	r4,180(sp)
    55ac:	ac400043 	ldbu	r17,1(r21)
    55b0:	10800017 	ldw	r2,0(r2)
    55b4:	582b883a 	mov	r21,r11
    55b8:	d8802915 	stw	r2,164(sp)
    55bc:	20800104 	addi	r2,r4,4
    55c0:	d9002917 	ldw	r4,164(sp)
    55c4:	d8802d15 	stw	r2,180(sp)
    55c8:	203e7a0e 	bge	r4,zero,4fb4 <__alt_data_end+0xff004fb4>
    55cc:	8c403fcc 	andi	r17,r17,255
    55d0:	00bfffc4 	movi	r2,-1
    55d4:	8c40201c 	xori	r17,r17,128
    55d8:	d8802915 	stw	r2,164(sp)
    55dc:	8c7fe004 	addi	r17,r17,-128
    55e0:	00380706 	br	3600 <__alt_data_end+0xff003600>
    55e4:	d8c02917 	ldw	r3,164(sp)
    55e8:	18c00084 	addi	r3,r3,2
    55ec:	d8c02e15 	stw	r3,184(sp)
    55f0:	1805883a 	mov	r2,r3
    55f4:	183d960e 	bge	r3,zero,4c50 <__alt_data_end+0xff004c50>
    55f8:	003fd606 	br	5554 <__alt_data_end+0xff005554>
    55fc:	0005883a 	mov	r2,zero
    5600:	003f8e06 	br	543c <__alt_data_end+0xff00543c>
    5604:	9080004c 	andi	r2,r18,1
    5608:	103f811e 	bne	r2,zero,5410 <__alt_data_end+0xff005410>
    560c:	d8802117 	ldw	r2,132(sp)
    5610:	1405c83a 	sub	r2,r2,r16
    5614:	d8803315 	stw	r2,204(sp)
    5618:	b47ef326 	beq	r22,r17,51e8 <__alt_data_end+0xff0051e8>
    561c:	dd802617 	ldw	r22,152(sp)
    5620:	003f1106 	br	5268 <__alt_data_end+0xff005268>
    5624:	d9c02785 	stb	r7,158(sp)
    5628:	00390406 	br	3a3c <__alt_data_end+0xff003a3c>
    562c:	d9c02785 	stb	r7,158(sp)
    5630:	0038d306 	br	3980 <__alt_data_end+0xff003980>
    5634:	d9c02785 	stb	r7,158(sp)
    5638:	003a6106 	br	3fc0 <__alt_data_end+0xff003fc0>
    563c:	d9c02785 	stb	r7,158(sp)
    5640:	003af806 	br	4224 <__alt_data_end+0xff004224>
    5644:	0005883a 	mov	r2,zero
    5648:	003d7e06 	br	4c44 <__alt_data_end+0xff004c44>
    564c:	d8802344 	addi	r2,sp,141
    5650:	003f1306 	br	52a0 <__alt_data_end+0xff0052a0>
    5654:	d9c02785 	stb	r7,158(sp)
    5658:	00392306 	br	3ae8 <__alt_data_end+0xff003ae8>
    565c:	d9c02785 	stb	r7,158(sp)
    5660:	003aa906 	br	4108 <__alt_data_end+0xff004108>
    5664:	d9c02785 	stb	r7,158(sp)
    5668:	003a3d06 	br	3f60 <__alt_data_end+0xff003f60>
    566c:	d9c02785 	stb	r7,158(sp)
    5670:	003aca06 	br	419c <__alt_data_end+0xff00419c>

00005674 <__vfprintf_internal>:
    5674:	00800074 	movhi	r2,1
    5678:	108e0904 	addi	r2,r2,14372
    567c:	300f883a 	mov	r7,r6
    5680:	280d883a 	mov	r6,r5
    5684:	200b883a 	mov	r5,r4
    5688:	11000017 	ldw	r4,0(r2)
    568c:	000347c1 	jmpi	347c <___vfprintf_internal_r>

00005690 <__sbprintf>:
    5690:	2880030b 	ldhu	r2,12(r5)
    5694:	2ac01917 	ldw	r11,100(r5)
    5698:	2a80038b 	ldhu	r10,14(r5)
    569c:	2a400717 	ldw	r9,28(r5)
    56a0:	2a000917 	ldw	r8,36(r5)
    56a4:	defee204 	addi	sp,sp,-1144
    56a8:	00c10004 	movi	r3,1024
    56ac:	dc011a15 	stw	r16,1128(sp)
    56b0:	10bfff4c 	andi	r2,r2,65533
    56b4:	2821883a 	mov	r16,r5
    56b8:	d8cb883a 	add	r5,sp,r3
    56bc:	dc811c15 	stw	r18,1136(sp)
    56c0:	dc411b15 	stw	r17,1132(sp)
    56c4:	dfc11d15 	stw	ra,1140(sp)
    56c8:	2025883a 	mov	r18,r4
    56cc:	d881030d 	sth	r2,1036(sp)
    56d0:	dac11915 	stw	r11,1124(sp)
    56d4:	da81038d 	sth	r10,1038(sp)
    56d8:	da410715 	stw	r9,1052(sp)
    56dc:	da010915 	stw	r8,1060(sp)
    56e0:	dec10015 	stw	sp,1024(sp)
    56e4:	dec10415 	stw	sp,1040(sp)
    56e8:	d8c10215 	stw	r3,1032(sp)
    56ec:	d8c10515 	stw	r3,1044(sp)
    56f0:	d8010615 	stw	zero,1048(sp)
    56f4:	000347c0 	call	347c <___vfprintf_internal_r>
    56f8:	1023883a 	mov	r17,r2
    56fc:	10000416 	blt	r2,zero,5710 <__sbprintf+0x80>
    5700:	d9410004 	addi	r5,sp,1024
    5704:	9009883a 	mov	r4,r18
    5708:	00073440 	call	7344 <_fflush_r>
    570c:	10000d1e 	bne	r2,zero,5744 <__sbprintf+0xb4>
    5710:	d881030b 	ldhu	r2,1036(sp)
    5714:	1080100c 	andi	r2,r2,64
    5718:	10000326 	beq	r2,zero,5728 <__sbprintf+0x98>
    571c:	8080030b 	ldhu	r2,12(r16)
    5720:	10801014 	ori	r2,r2,64
    5724:	8080030d 	sth	r2,12(r16)
    5728:	8805883a 	mov	r2,r17
    572c:	dfc11d17 	ldw	ra,1140(sp)
    5730:	dc811c17 	ldw	r18,1136(sp)
    5734:	dc411b17 	ldw	r17,1132(sp)
    5738:	dc011a17 	ldw	r16,1128(sp)
    573c:	dec11e04 	addi	sp,sp,1144
    5740:	f800283a 	ret
    5744:	047fffc4 	movi	r17,-1
    5748:	003ff106 	br	5710 <__alt_data_end+0xff005710>

0000574c <__swsetup_r>:
    574c:	00800074 	movhi	r2,1
    5750:	defffd04 	addi	sp,sp,-12
    5754:	108e0904 	addi	r2,r2,14372
    5758:	dc400115 	stw	r17,4(sp)
    575c:	2023883a 	mov	r17,r4
    5760:	11000017 	ldw	r4,0(r2)
    5764:	dc000015 	stw	r16,0(sp)
    5768:	dfc00215 	stw	ra,8(sp)
    576c:	2821883a 	mov	r16,r5
    5770:	20000226 	beq	r4,zero,577c <__swsetup_r+0x30>
    5774:	20800e17 	ldw	r2,56(r4)
    5778:	10003126 	beq	r2,zero,5840 <__swsetup_r+0xf4>
    577c:	8080030b 	ldhu	r2,12(r16)
    5780:	10c0020c 	andi	r3,r2,8
    5784:	1009883a 	mov	r4,r2
    5788:	18000f26 	beq	r3,zero,57c8 <__swsetup_r+0x7c>
    578c:	80c00417 	ldw	r3,16(r16)
    5790:	18001526 	beq	r3,zero,57e8 <__swsetup_r+0x9c>
    5794:	1100004c 	andi	r4,r2,1
    5798:	20001c1e 	bne	r4,zero,580c <__swsetup_r+0xc0>
    579c:	1080008c 	andi	r2,r2,2
    57a0:	1000291e 	bne	r2,zero,5848 <__swsetup_r+0xfc>
    57a4:	80800517 	ldw	r2,20(r16)
    57a8:	80800215 	stw	r2,8(r16)
    57ac:	18001c26 	beq	r3,zero,5820 <__swsetup_r+0xd4>
    57b0:	0005883a 	mov	r2,zero
    57b4:	dfc00217 	ldw	ra,8(sp)
    57b8:	dc400117 	ldw	r17,4(sp)
    57bc:	dc000017 	ldw	r16,0(sp)
    57c0:	dec00304 	addi	sp,sp,12
    57c4:	f800283a 	ret
    57c8:	2080040c 	andi	r2,r4,16
    57cc:	10002e26 	beq	r2,zero,5888 <__swsetup_r+0x13c>
    57d0:	2080010c 	andi	r2,r4,4
    57d4:	10001e1e 	bne	r2,zero,5850 <__swsetup_r+0x104>
    57d8:	80c00417 	ldw	r3,16(r16)
    57dc:	20800214 	ori	r2,r4,8
    57e0:	8080030d 	sth	r2,12(r16)
    57e4:	183feb1e 	bne	r3,zero,5794 <__alt_data_end+0xff005794>
    57e8:	1100a00c 	andi	r4,r2,640
    57ec:	01408004 	movi	r5,512
    57f0:	217fe826 	beq	r4,r5,5794 <__alt_data_end+0xff005794>
    57f4:	800b883a 	mov	r5,r16
    57f8:	8809883a 	mov	r4,r17
    57fc:	00082c40 	call	82c4 <__smakebuf_r>
    5800:	8080030b 	ldhu	r2,12(r16)
    5804:	80c00417 	ldw	r3,16(r16)
    5808:	003fe206 	br	5794 <__alt_data_end+0xff005794>
    580c:	80800517 	ldw	r2,20(r16)
    5810:	80000215 	stw	zero,8(r16)
    5814:	0085c83a 	sub	r2,zero,r2
    5818:	80800615 	stw	r2,24(r16)
    581c:	183fe41e 	bne	r3,zero,57b0 <__alt_data_end+0xff0057b0>
    5820:	80c0030b 	ldhu	r3,12(r16)
    5824:	0005883a 	mov	r2,zero
    5828:	1900200c 	andi	r4,r3,128
    582c:	203fe126 	beq	r4,zero,57b4 <__alt_data_end+0xff0057b4>
    5830:	18c01014 	ori	r3,r3,64
    5834:	80c0030d 	sth	r3,12(r16)
    5838:	00bfffc4 	movi	r2,-1
    583c:	003fdd06 	br	57b4 <__alt_data_end+0xff0057b4>
    5840:	00077200 	call	7720 <__sinit>
    5844:	003fcd06 	br	577c <__alt_data_end+0xff00577c>
    5848:	0005883a 	mov	r2,zero
    584c:	003fd606 	br	57a8 <__alt_data_end+0xff0057a8>
    5850:	81400c17 	ldw	r5,48(r16)
    5854:	28000626 	beq	r5,zero,5870 <__swsetup_r+0x124>
    5858:	80801004 	addi	r2,r16,64
    585c:	28800326 	beq	r5,r2,586c <__swsetup_r+0x120>
    5860:	8809883a 	mov	r4,r17
    5864:	00078940 	call	7894 <_free_r>
    5868:	8100030b 	ldhu	r4,12(r16)
    586c:	80000c15 	stw	zero,48(r16)
    5870:	80c00417 	ldw	r3,16(r16)
    5874:	00bff6c4 	movi	r2,-37
    5878:	1108703a 	and	r4,r2,r4
    587c:	80000115 	stw	zero,4(r16)
    5880:	80c00015 	stw	r3,0(r16)
    5884:	003fd506 	br	57dc <__alt_data_end+0xff0057dc>
    5888:	00800244 	movi	r2,9
    588c:	88800015 	stw	r2,0(r17)
    5890:	20801014 	ori	r2,r4,64
    5894:	8080030d 	sth	r2,12(r16)
    5898:	00bfffc4 	movi	r2,-1
    589c:	003fc506 	br	57b4 <__alt_data_end+0xff0057b4>

000058a0 <quorem>:
    58a0:	defff704 	addi	sp,sp,-36
    58a4:	dc800215 	stw	r18,8(sp)
    58a8:	20800417 	ldw	r2,16(r4)
    58ac:	2c800417 	ldw	r18,16(r5)
    58b0:	dfc00815 	stw	ra,32(sp)
    58b4:	ddc00715 	stw	r23,28(sp)
    58b8:	dd800615 	stw	r22,24(sp)
    58bc:	dd400515 	stw	r21,20(sp)
    58c0:	dd000415 	stw	r20,16(sp)
    58c4:	dcc00315 	stw	r19,12(sp)
    58c8:	dc400115 	stw	r17,4(sp)
    58cc:	dc000015 	stw	r16,0(sp)
    58d0:	14807116 	blt	r2,r18,5a98 <quorem+0x1f8>
    58d4:	94bfffc4 	addi	r18,r18,-1
    58d8:	94ad883a 	add	r22,r18,r18
    58dc:	b5ad883a 	add	r22,r22,r22
    58e0:	2c400504 	addi	r17,r5,20
    58e4:	8da9883a 	add	r20,r17,r22
    58e8:	25400504 	addi	r21,r4,20
    58ec:	282f883a 	mov	r23,r5
    58f0:	adad883a 	add	r22,r21,r22
    58f4:	a1400017 	ldw	r5,0(r20)
    58f8:	2021883a 	mov	r16,r4
    58fc:	b1000017 	ldw	r4,0(r22)
    5900:	29400044 	addi	r5,r5,1
    5904:	0001f6c0 	call	1f6c <__udivsi3>
    5908:	1027883a 	mov	r19,r2
    590c:	10002c26 	beq	r2,zero,59c0 <quorem+0x120>
    5910:	a813883a 	mov	r9,r21
    5914:	880b883a 	mov	r5,r17
    5918:	0009883a 	mov	r4,zero
    591c:	000d883a 	mov	r6,zero
    5920:	2a000017 	ldw	r8,0(r5)
    5924:	49c00017 	ldw	r7,0(r9)
    5928:	29400104 	addi	r5,r5,4
    592c:	40bfffcc 	andi	r2,r8,65535
    5930:	14c5383a 	mul	r2,r2,r19
    5934:	4010d43a 	srli	r8,r8,16
    5938:	38ffffcc 	andi	r3,r7,65535
    593c:	1105883a 	add	r2,r2,r4
    5940:	1008d43a 	srli	r4,r2,16
    5944:	44d1383a 	mul	r8,r8,r19
    5948:	198d883a 	add	r6,r3,r6
    594c:	10ffffcc 	andi	r3,r2,65535
    5950:	30c7c83a 	sub	r3,r6,r3
    5954:	380ed43a 	srli	r7,r7,16
    5958:	4105883a 	add	r2,r8,r4
    595c:	180dd43a 	srai	r6,r3,16
    5960:	113fffcc 	andi	r4,r2,65535
    5964:	390fc83a 	sub	r7,r7,r4
    5968:	398d883a 	add	r6,r7,r6
    596c:	300e943a 	slli	r7,r6,16
    5970:	18ffffcc 	andi	r3,r3,65535
    5974:	1008d43a 	srli	r4,r2,16
    5978:	38ceb03a 	or	r7,r7,r3
    597c:	49c00015 	stw	r7,0(r9)
    5980:	300dd43a 	srai	r6,r6,16
    5984:	4a400104 	addi	r9,r9,4
    5988:	a17fe52e 	bgeu	r20,r5,5920 <__alt_data_end+0xff005920>
    598c:	b0800017 	ldw	r2,0(r22)
    5990:	10000b1e 	bne	r2,zero,59c0 <quorem+0x120>
    5994:	b0bfff04 	addi	r2,r22,-4
    5998:	a880082e 	bgeu	r21,r2,59bc <quorem+0x11c>
    599c:	b0ffff17 	ldw	r3,-4(r22)
    59a0:	18000326 	beq	r3,zero,59b0 <quorem+0x110>
    59a4:	00000506 	br	59bc <quorem+0x11c>
    59a8:	10c00017 	ldw	r3,0(r2)
    59ac:	1800031e 	bne	r3,zero,59bc <quorem+0x11c>
    59b0:	10bfff04 	addi	r2,r2,-4
    59b4:	94bfffc4 	addi	r18,r18,-1
    59b8:	a8bffb36 	bltu	r21,r2,59a8 <__alt_data_end+0xff0059a8>
    59bc:	84800415 	stw	r18,16(r16)
    59c0:	b80b883a 	mov	r5,r23
    59c4:	8009883a 	mov	r4,r16
    59c8:	00091f80 	call	91f8 <__mcmp>
    59cc:	10002616 	blt	r2,zero,5a68 <quorem+0x1c8>
    59d0:	9cc00044 	addi	r19,r19,1
    59d4:	a805883a 	mov	r2,r21
    59d8:	000b883a 	mov	r5,zero
    59dc:	11000017 	ldw	r4,0(r2)
    59e0:	89800017 	ldw	r6,0(r17)
    59e4:	10800104 	addi	r2,r2,4
    59e8:	20ffffcc 	andi	r3,r4,65535
    59ec:	194b883a 	add	r5,r3,r5
    59f0:	30ffffcc 	andi	r3,r6,65535
    59f4:	28c7c83a 	sub	r3,r5,r3
    59f8:	300cd43a 	srli	r6,r6,16
    59fc:	2008d43a 	srli	r4,r4,16
    5a00:	180bd43a 	srai	r5,r3,16
    5a04:	18ffffcc 	andi	r3,r3,65535
    5a08:	2189c83a 	sub	r4,r4,r6
    5a0c:	2149883a 	add	r4,r4,r5
    5a10:	200c943a 	slli	r6,r4,16
    5a14:	8c400104 	addi	r17,r17,4
    5a18:	200bd43a 	srai	r5,r4,16
    5a1c:	30c6b03a 	or	r3,r6,r3
    5a20:	10ffff15 	stw	r3,-4(r2)
    5a24:	a47fed2e 	bgeu	r20,r17,59dc <__alt_data_end+0xff0059dc>
    5a28:	9485883a 	add	r2,r18,r18
    5a2c:	1085883a 	add	r2,r2,r2
    5a30:	a887883a 	add	r3,r21,r2
    5a34:	18800017 	ldw	r2,0(r3)
    5a38:	10000b1e 	bne	r2,zero,5a68 <quorem+0x1c8>
    5a3c:	18bfff04 	addi	r2,r3,-4
    5a40:	a880082e 	bgeu	r21,r2,5a64 <quorem+0x1c4>
    5a44:	18ffff17 	ldw	r3,-4(r3)
    5a48:	18000326 	beq	r3,zero,5a58 <quorem+0x1b8>
    5a4c:	00000506 	br	5a64 <quorem+0x1c4>
    5a50:	10c00017 	ldw	r3,0(r2)
    5a54:	1800031e 	bne	r3,zero,5a64 <quorem+0x1c4>
    5a58:	10bfff04 	addi	r2,r2,-4
    5a5c:	94bfffc4 	addi	r18,r18,-1
    5a60:	a8bffb36 	bltu	r21,r2,5a50 <__alt_data_end+0xff005a50>
    5a64:	84800415 	stw	r18,16(r16)
    5a68:	9805883a 	mov	r2,r19
    5a6c:	dfc00817 	ldw	ra,32(sp)
    5a70:	ddc00717 	ldw	r23,28(sp)
    5a74:	dd800617 	ldw	r22,24(sp)
    5a78:	dd400517 	ldw	r21,20(sp)
    5a7c:	dd000417 	ldw	r20,16(sp)
    5a80:	dcc00317 	ldw	r19,12(sp)
    5a84:	dc800217 	ldw	r18,8(sp)
    5a88:	dc400117 	ldw	r17,4(sp)
    5a8c:	dc000017 	ldw	r16,0(sp)
    5a90:	dec00904 	addi	sp,sp,36
    5a94:	f800283a 	ret
    5a98:	0005883a 	mov	r2,zero
    5a9c:	003ff306 	br	5a6c <__alt_data_end+0xff005a6c>

00005aa0 <_dtoa_r>:
    5aa0:	20801017 	ldw	r2,64(r4)
    5aa4:	deffde04 	addi	sp,sp,-136
    5aa8:	df002015 	stw	fp,128(sp)
    5aac:	dcc01b15 	stw	r19,108(sp)
    5ab0:	dc801a15 	stw	r18,104(sp)
    5ab4:	dc401915 	stw	r17,100(sp)
    5ab8:	dc001815 	stw	r16,96(sp)
    5abc:	dfc02115 	stw	ra,132(sp)
    5ac0:	ddc01f15 	stw	r23,124(sp)
    5ac4:	dd801e15 	stw	r22,120(sp)
    5ac8:	dd401d15 	stw	r21,116(sp)
    5acc:	dd001c15 	stw	r20,112(sp)
    5ad0:	d9c00315 	stw	r7,12(sp)
    5ad4:	2039883a 	mov	fp,r4
    5ad8:	3023883a 	mov	r17,r6
    5adc:	2825883a 	mov	r18,r5
    5ae0:	dc002417 	ldw	r16,144(sp)
    5ae4:	3027883a 	mov	r19,r6
    5ae8:	10000826 	beq	r2,zero,5b0c <_dtoa_r+0x6c>
    5aec:	21801117 	ldw	r6,68(r4)
    5af0:	00c00044 	movi	r3,1
    5af4:	100b883a 	mov	r5,r2
    5af8:	1986983a 	sll	r3,r3,r6
    5afc:	11800115 	stw	r6,4(r2)
    5b00:	10c00215 	stw	r3,8(r2)
    5b04:	00089d80 	call	89d8 <_Bfree>
    5b08:	e0001015 	stw	zero,64(fp)
    5b0c:	88002e16 	blt	r17,zero,5bc8 <_dtoa_r+0x128>
    5b10:	80000015 	stw	zero,0(r16)
    5b14:	889ffc2c 	andhi	r2,r17,32752
    5b18:	00dffc34 	movhi	r3,32752
    5b1c:	10c01c26 	beq	r2,r3,5b90 <_dtoa_r+0xf0>
    5b20:	000d883a 	mov	r6,zero
    5b24:	000f883a 	mov	r7,zero
    5b28:	9009883a 	mov	r4,r18
    5b2c:	980b883a 	mov	r5,r19
    5b30:	000d3f40 	call	d3f4 <__eqdf2>
    5b34:	10002b1e 	bne	r2,zero,5be4 <_dtoa_r+0x144>
    5b38:	d9c02317 	ldw	r7,140(sp)
    5b3c:	00800044 	movi	r2,1
    5b40:	38800015 	stw	r2,0(r7)
    5b44:	d8802517 	ldw	r2,148(sp)
    5b48:	10019e26 	beq	r2,zero,61c4 <_dtoa_r+0x724>
    5b4c:	d8c02517 	ldw	r3,148(sp)
    5b50:	00800074 	movhi	r2,1
    5b54:	1086ae44 	addi	r2,r2,6841
    5b58:	18800015 	stw	r2,0(r3)
    5b5c:	10bfffc4 	addi	r2,r2,-1
    5b60:	dfc02117 	ldw	ra,132(sp)
    5b64:	df002017 	ldw	fp,128(sp)
    5b68:	ddc01f17 	ldw	r23,124(sp)
    5b6c:	dd801e17 	ldw	r22,120(sp)
    5b70:	dd401d17 	ldw	r21,116(sp)
    5b74:	dd001c17 	ldw	r20,112(sp)
    5b78:	dcc01b17 	ldw	r19,108(sp)
    5b7c:	dc801a17 	ldw	r18,104(sp)
    5b80:	dc401917 	ldw	r17,100(sp)
    5b84:	dc001817 	ldw	r16,96(sp)
    5b88:	dec02204 	addi	sp,sp,136
    5b8c:	f800283a 	ret
    5b90:	d8c02317 	ldw	r3,140(sp)
    5b94:	0089c3c4 	movi	r2,9999
    5b98:	18800015 	stw	r2,0(r3)
    5b9c:	90017726 	beq	r18,zero,617c <_dtoa_r+0x6dc>
    5ba0:	00800074 	movhi	r2,1
    5ba4:	1086ba04 	addi	r2,r2,6888
    5ba8:	d9002517 	ldw	r4,148(sp)
    5bac:	203fec26 	beq	r4,zero,5b60 <__alt_data_end+0xff005b60>
    5bb0:	10c000c7 	ldb	r3,3(r2)
    5bb4:	1801781e 	bne	r3,zero,6198 <_dtoa_r+0x6f8>
    5bb8:	10c000c4 	addi	r3,r2,3
    5bbc:	d9802517 	ldw	r6,148(sp)
    5bc0:	30c00015 	stw	r3,0(r6)
    5bc4:	003fe606 	br	5b60 <__alt_data_end+0xff005b60>
    5bc8:	04e00034 	movhi	r19,32768
    5bcc:	9cffffc4 	addi	r19,r19,-1
    5bd0:	00800044 	movi	r2,1
    5bd4:	8ce6703a 	and	r19,r17,r19
    5bd8:	80800015 	stw	r2,0(r16)
    5bdc:	9823883a 	mov	r17,r19
    5be0:	003fcc06 	br	5b14 <__alt_data_end+0xff005b14>
    5be4:	d8800204 	addi	r2,sp,8
    5be8:	d8800015 	stw	r2,0(sp)
    5bec:	d9c00104 	addi	r7,sp,4
    5bf0:	900b883a 	mov	r5,r18
    5bf4:	980d883a 	mov	r6,r19
    5bf8:	e009883a 	mov	r4,fp
    5bfc:	8820d53a 	srli	r16,r17,20
    5c00:	00095c40 	call	95c4 <__d2b>
    5c04:	d8800915 	stw	r2,36(sp)
    5c08:	8001651e 	bne	r16,zero,61a0 <_dtoa_r+0x700>
    5c0c:	dd800217 	ldw	r22,8(sp)
    5c10:	dc000117 	ldw	r16,4(sp)
    5c14:	00800804 	movi	r2,32
    5c18:	b421883a 	add	r16,r22,r16
    5c1c:	80c10c84 	addi	r3,r16,1074
    5c20:	10c2d10e 	bge	r2,r3,6768 <_dtoa_r+0xcc8>
    5c24:	00801004 	movi	r2,64
    5c28:	81010484 	addi	r4,r16,1042
    5c2c:	10c7c83a 	sub	r3,r2,r3
    5c30:	9108d83a 	srl	r4,r18,r4
    5c34:	88e2983a 	sll	r17,r17,r3
    5c38:	2448b03a 	or	r4,r4,r17
    5c3c:	00029100 	call	2910 <__floatunsidf>
    5c40:	017f8434 	movhi	r5,65040
    5c44:	01800044 	movi	r6,1
    5c48:	1009883a 	mov	r4,r2
    5c4c:	194b883a 	add	r5,r3,r5
    5c50:	843fffc4 	addi	r16,r16,-1
    5c54:	d9801115 	stw	r6,68(sp)
    5c58:	000d883a 	mov	r6,zero
    5c5c:	01cffe34 	movhi	r7,16376
    5c60:	000dd640 	call	dd64 <__subdf3>
    5c64:	0198dbf4 	movhi	r6,25455
    5c68:	01cff4f4 	movhi	r7,16339
    5c6c:	3190d844 	addi	r6,r6,17249
    5c70:	39e1e9c4 	addi	r7,r7,-30809
    5c74:	1009883a 	mov	r4,r2
    5c78:	180b883a 	mov	r5,r3
    5c7c:	000d64c0 	call	d64c <__muldf3>
    5c80:	01a2d874 	movhi	r6,35681
    5c84:	01cff1f4 	movhi	r7,16327
    5c88:	31b22cc4 	addi	r6,r6,-14157
    5c8c:	39e28a04 	addi	r7,r7,-30168
    5c90:	180b883a 	mov	r5,r3
    5c94:	1009883a 	mov	r4,r2
    5c98:	000cb480 	call	cb48 <__adddf3>
    5c9c:	8009883a 	mov	r4,r16
    5ca0:	1029883a 	mov	r20,r2
    5ca4:	1823883a 	mov	r17,r3
    5ca8:	000e6e00 	call	e6e0 <__floatsidf>
    5cac:	019427f4 	movhi	r6,20639
    5cb0:	01cff4f4 	movhi	r7,16339
    5cb4:	319e7ec4 	addi	r6,r6,31227
    5cb8:	39d104c4 	addi	r7,r7,17427
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	180b883a 	mov	r5,r3
    5cc4:	000d64c0 	call	d64c <__muldf3>
    5cc8:	100d883a 	mov	r6,r2
    5ccc:	180f883a 	mov	r7,r3
    5cd0:	a009883a 	mov	r4,r20
    5cd4:	880b883a 	mov	r5,r17
    5cd8:	000cb480 	call	cb48 <__adddf3>
    5cdc:	1009883a 	mov	r4,r2
    5ce0:	180b883a 	mov	r5,r3
    5ce4:	1029883a 	mov	r20,r2
    5ce8:	1823883a 	mov	r17,r3
    5cec:	000e6600 	call	e660 <__fixdfsi>
    5cf0:	000d883a 	mov	r6,zero
    5cf4:	000f883a 	mov	r7,zero
    5cf8:	a009883a 	mov	r4,r20
    5cfc:	880b883a 	mov	r5,r17
    5d00:	d8800515 	stw	r2,20(sp)
    5d04:	000d5580 	call	d558 <__ledf2>
    5d08:	10028716 	blt	r2,zero,6728 <_dtoa_r+0xc88>
    5d0c:	d8c00517 	ldw	r3,20(sp)
    5d10:	00800584 	movi	r2,22
    5d14:	10c27536 	bltu	r2,r3,66ec <_dtoa_r+0xc4c>
    5d18:	180490fa 	slli	r2,r3,3
    5d1c:	00c00074 	movhi	r3,1
    5d20:	18c6d604 	addi	r3,r3,7000
    5d24:	1885883a 	add	r2,r3,r2
    5d28:	11000017 	ldw	r4,0(r2)
    5d2c:	11400117 	ldw	r5,4(r2)
    5d30:	900d883a 	mov	r6,r18
    5d34:	980f883a 	mov	r7,r19
    5d38:	000d47c0 	call	d47c <__gedf2>
    5d3c:	00828d0e 	bge	zero,r2,6774 <_dtoa_r+0xcd4>
    5d40:	d9000517 	ldw	r4,20(sp)
    5d44:	d8000e15 	stw	zero,56(sp)
    5d48:	213fffc4 	addi	r4,r4,-1
    5d4c:	d9000515 	stw	r4,20(sp)
    5d50:	b42dc83a 	sub	r22,r22,r16
    5d54:	b5bfffc4 	addi	r22,r22,-1
    5d58:	b0026f16 	blt	r22,zero,6718 <_dtoa_r+0xc78>
    5d5c:	d8000815 	stw	zero,32(sp)
    5d60:	d9c00517 	ldw	r7,20(sp)
    5d64:	38026416 	blt	r7,zero,66f8 <_dtoa_r+0xc58>
    5d68:	b1ed883a 	add	r22,r22,r7
    5d6c:	d9c00d15 	stw	r7,52(sp)
    5d70:	d8000a15 	stw	zero,40(sp)
    5d74:	d9800317 	ldw	r6,12(sp)
    5d78:	00800244 	movi	r2,9
    5d7c:	11811436 	bltu	r2,r6,61d0 <_dtoa_r+0x730>
    5d80:	00800144 	movi	r2,5
    5d84:	1184e10e 	bge	r2,r6,710c <_dtoa_r+0x166c>
    5d88:	31bfff04 	addi	r6,r6,-4
    5d8c:	d9800315 	stw	r6,12(sp)
    5d90:	0023883a 	mov	r17,zero
    5d94:	d9800317 	ldw	r6,12(sp)
    5d98:	008000c4 	movi	r2,3
    5d9c:	30836726 	beq	r6,r2,6b3c <_dtoa_r+0x109c>
    5da0:	1183410e 	bge	r2,r6,6aa8 <_dtoa_r+0x1008>
    5da4:	d9c00317 	ldw	r7,12(sp)
    5da8:	00800104 	movi	r2,4
    5dac:	38827c26 	beq	r7,r2,67a0 <_dtoa_r+0xd00>
    5db0:	00800144 	movi	r2,5
    5db4:	3884c41e 	bne	r7,r2,70c8 <_dtoa_r+0x1628>
    5db8:	00800044 	movi	r2,1
    5dbc:	d8800b15 	stw	r2,44(sp)
    5dc0:	d8c00517 	ldw	r3,20(sp)
    5dc4:	d9002217 	ldw	r4,136(sp)
    5dc8:	1907883a 	add	r3,r3,r4
    5dcc:	19800044 	addi	r6,r3,1
    5dd0:	d8c00c15 	stw	r3,48(sp)
    5dd4:	d9800615 	stw	r6,24(sp)
    5dd8:	0183a40e 	bge	zero,r6,6c6c <_dtoa_r+0x11cc>
    5ddc:	d9800617 	ldw	r6,24(sp)
    5de0:	3021883a 	mov	r16,r6
    5de4:	e0001115 	stw	zero,68(fp)
    5de8:	008005c4 	movi	r2,23
    5dec:	1184c92e 	bgeu	r2,r6,7114 <_dtoa_r+0x1674>
    5df0:	00c00044 	movi	r3,1
    5df4:	00800104 	movi	r2,4
    5df8:	1085883a 	add	r2,r2,r2
    5dfc:	11000504 	addi	r4,r2,20
    5e00:	180b883a 	mov	r5,r3
    5e04:	18c00044 	addi	r3,r3,1
    5e08:	313ffb2e 	bgeu	r6,r4,5df8 <__alt_data_end+0xff005df8>
    5e0c:	e1401115 	stw	r5,68(fp)
    5e10:	e009883a 	mov	r4,fp
    5e14:	00089300 	call	8930 <_Balloc>
    5e18:	d8800715 	stw	r2,28(sp)
    5e1c:	e0801015 	stw	r2,64(fp)
    5e20:	00800384 	movi	r2,14
    5e24:	1400f736 	bltu	r2,r16,6204 <_dtoa_r+0x764>
    5e28:	8800f626 	beq	r17,zero,6204 <_dtoa_r+0x764>
    5e2c:	d9c00517 	ldw	r7,20(sp)
    5e30:	01c39a0e 	bge	zero,r7,6c9c <_dtoa_r+0x11fc>
    5e34:	388003cc 	andi	r2,r7,15
    5e38:	100490fa 	slli	r2,r2,3
    5e3c:	382bd13a 	srai	r21,r7,4
    5e40:	00c00074 	movhi	r3,1
    5e44:	18c6d604 	addi	r3,r3,7000
    5e48:	1885883a 	add	r2,r3,r2
    5e4c:	a8c0040c 	andi	r3,r21,16
    5e50:	12400017 	ldw	r9,0(r2)
    5e54:	12000117 	ldw	r8,4(r2)
    5e58:	18037926 	beq	r3,zero,6c40 <_dtoa_r+0x11a0>
    5e5c:	00800074 	movhi	r2,1
    5e60:	1086cc04 	addi	r2,r2,6960
    5e64:	11800817 	ldw	r6,32(r2)
    5e68:	11c00917 	ldw	r7,36(r2)
    5e6c:	9009883a 	mov	r4,r18
    5e70:	980b883a 	mov	r5,r19
    5e74:	da001715 	stw	r8,92(sp)
    5e78:	da401615 	stw	r9,88(sp)
    5e7c:	00020280 	call	2028 <__divdf3>
    5e80:	da001717 	ldw	r8,92(sp)
    5e84:	da401617 	ldw	r9,88(sp)
    5e88:	ad4003cc 	andi	r21,r21,15
    5e8c:	040000c4 	movi	r16,3
    5e90:	1023883a 	mov	r17,r2
    5e94:	1829883a 	mov	r20,r3
    5e98:	a8001126 	beq	r21,zero,5ee0 <_dtoa_r+0x440>
    5e9c:	05c00074 	movhi	r23,1
    5ea0:	bdc6cc04 	addi	r23,r23,6960
    5ea4:	4805883a 	mov	r2,r9
    5ea8:	4007883a 	mov	r3,r8
    5eac:	a980004c 	andi	r6,r21,1
    5eb0:	1009883a 	mov	r4,r2
    5eb4:	a82bd07a 	srai	r21,r21,1
    5eb8:	180b883a 	mov	r5,r3
    5ebc:	30000426 	beq	r6,zero,5ed0 <_dtoa_r+0x430>
    5ec0:	b9800017 	ldw	r6,0(r23)
    5ec4:	b9c00117 	ldw	r7,4(r23)
    5ec8:	84000044 	addi	r16,r16,1
    5ecc:	000d64c0 	call	d64c <__muldf3>
    5ed0:	bdc00204 	addi	r23,r23,8
    5ed4:	a83ff51e 	bne	r21,zero,5eac <__alt_data_end+0xff005eac>
    5ed8:	1013883a 	mov	r9,r2
    5edc:	1811883a 	mov	r8,r3
    5ee0:	480d883a 	mov	r6,r9
    5ee4:	400f883a 	mov	r7,r8
    5ee8:	8809883a 	mov	r4,r17
    5eec:	a00b883a 	mov	r5,r20
    5ef0:	00020280 	call	2028 <__divdf3>
    5ef4:	d8800f15 	stw	r2,60(sp)
    5ef8:	d8c01015 	stw	r3,64(sp)
    5efc:	d8c00e17 	ldw	r3,56(sp)
    5f00:	18000626 	beq	r3,zero,5f1c <_dtoa_r+0x47c>
    5f04:	d9000f17 	ldw	r4,60(sp)
    5f08:	d9401017 	ldw	r5,64(sp)
    5f0c:	000d883a 	mov	r6,zero
    5f10:	01cffc34 	movhi	r7,16368
    5f14:	000d5580 	call	d558 <__ledf2>
    5f18:	10040b16 	blt	r2,zero,6f48 <_dtoa_r+0x14a8>
    5f1c:	8009883a 	mov	r4,r16
    5f20:	000e6e00 	call	e6e0 <__floatsidf>
    5f24:	d9800f17 	ldw	r6,60(sp)
    5f28:	d9c01017 	ldw	r7,64(sp)
    5f2c:	1009883a 	mov	r4,r2
    5f30:	180b883a 	mov	r5,r3
    5f34:	000d64c0 	call	d64c <__muldf3>
    5f38:	000d883a 	mov	r6,zero
    5f3c:	01d00734 	movhi	r7,16412
    5f40:	1009883a 	mov	r4,r2
    5f44:	180b883a 	mov	r5,r3
    5f48:	000cb480 	call	cb48 <__adddf3>
    5f4c:	1021883a 	mov	r16,r2
    5f50:	d8800617 	ldw	r2,24(sp)
    5f54:	047f3034 	movhi	r17,64704
    5f58:	1c63883a 	add	r17,r3,r17
    5f5c:	10031826 	beq	r2,zero,6bc0 <_dtoa_r+0x1120>
    5f60:	d8c00517 	ldw	r3,20(sp)
    5f64:	db000617 	ldw	r12,24(sp)
    5f68:	d8c01315 	stw	r3,76(sp)
    5f6c:	d9000b17 	ldw	r4,44(sp)
    5f70:	20038f26 	beq	r4,zero,6db0 <_dtoa_r+0x1310>
    5f74:	60bfffc4 	addi	r2,r12,-1
    5f78:	100490fa 	slli	r2,r2,3
    5f7c:	00c00074 	movhi	r3,1
    5f80:	18c6d604 	addi	r3,r3,7000
    5f84:	1885883a 	add	r2,r3,r2
    5f88:	11800017 	ldw	r6,0(r2)
    5f8c:	11c00117 	ldw	r7,4(r2)
    5f90:	d8800717 	ldw	r2,28(sp)
    5f94:	0009883a 	mov	r4,zero
    5f98:	014ff834 	movhi	r5,16352
    5f9c:	db001615 	stw	r12,88(sp)
    5fa0:	15c00044 	addi	r23,r2,1
    5fa4:	00020280 	call	2028 <__divdf3>
    5fa8:	800d883a 	mov	r6,r16
    5fac:	880f883a 	mov	r7,r17
    5fb0:	1009883a 	mov	r4,r2
    5fb4:	180b883a 	mov	r5,r3
    5fb8:	000dd640 	call	dd64 <__subdf3>
    5fbc:	d9401017 	ldw	r5,64(sp)
    5fc0:	d9000f17 	ldw	r4,60(sp)
    5fc4:	102b883a 	mov	r21,r2
    5fc8:	d8c01215 	stw	r3,72(sp)
    5fcc:	000e6600 	call	e660 <__fixdfsi>
    5fd0:	1009883a 	mov	r4,r2
    5fd4:	1029883a 	mov	r20,r2
    5fd8:	000e6e00 	call	e6e0 <__floatsidf>
    5fdc:	d9000f17 	ldw	r4,60(sp)
    5fe0:	d9401017 	ldw	r5,64(sp)
    5fe4:	100d883a 	mov	r6,r2
    5fe8:	180f883a 	mov	r7,r3
    5fec:	000dd640 	call	dd64 <__subdf3>
    5ff0:	1823883a 	mov	r17,r3
    5ff4:	d8c00717 	ldw	r3,28(sp)
    5ff8:	d9401217 	ldw	r5,72(sp)
    5ffc:	a2000c04 	addi	r8,r20,48
    6000:	1021883a 	mov	r16,r2
    6004:	1a000005 	stb	r8,0(r3)
    6008:	800d883a 	mov	r6,r16
    600c:	880f883a 	mov	r7,r17
    6010:	a809883a 	mov	r4,r21
    6014:	4029883a 	mov	r20,r8
    6018:	000d47c0 	call	d47c <__gedf2>
    601c:	00841d16 	blt	zero,r2,7094 <_dtoa_r+0x15f4>
    6020:	800d883a 	mov	r6,r16
    6024:	880f883a 	mov	r7,r17
    6028:	0009883a 	mov	r4,zero
    602c:	014ffc34 	movhi	r5,16368
    6030:	000dd640 	call	dd64 <__subdf3>
    6034:	d9401217 	ldw	r5,72(sp)
    6038:	100d883a 	mov	r6,r2
    603c:	180f883a 	mov	r7,r3
    6040:	a809883a 	mov	r4,r21
    6044:	000d47c0 	call	d47c <__gedf2>
    6048:	db001617 	ldw	r12,88(sp)
    604c:	00840e16 	blt	zero,r2,7088 <_dtoa_r+0x15e8>
    6050:	00800044 	movi	r2,1
    6054:	13006b0e 	bge	r2,r12,6204 <_dtoa_r+0x764>
    6058:	d9000717 	ldw	r4,28(sp)
    605c:	dd800f15 	stw	r22,60(sp)
    6060:	dcc01015 	stw	r19,64(sp)
    6064:	2319883a 	add	r12,r4,r12
    6068:	dcc01217 	ldw	r19,72(sp)
    606c:	602d883a 	mov	r22,r12
    6070:	dc801215 	stw	r18,72(sp)
    6074:	b825883a 	mov	r18,r23
    6078:	00000906 	br	60a0 <_dtoa_r+0x600>
    607c:	000dd640 	call	dd64 <__subdf3>
    6080:	a80d883a 	mov	r6,r21
    6084:	980f883a 	mov	r7,r19
    6088:	1009883a 	mov	r4,r2
    608c:	180b883a 	mov	r5,r3
    6090:	000d5580 	call	d558 <__ledf2>
    6094:	1003e816 	blt	r2,zero,7038 <_dtoa_r+0x1598>
    6098:	b825883a 	mov	r18,r23
    609c:	bd83e926 	beq	r23,r22,7044 <_dtoa_r+0x15a4>
    60a0:	a809883a 	mov	r4,r21
    60a4:	980b883a 	mov	r5,r19
    60a8:	000d883a 	mov	r6,zero
    60ac:	01d00934 	movhi	r7,16420
    60b0:	000d64c0 	call	d64c <__muldf3>
    60b4:	000d883a 	mov	r6,zero
    60b8:	01d00934 	movhi	r7,16420
    60bc:	8009883a 	mov	r4,r16
    60c0:	880b883a 	mov	r5,r17
    60c4:	102b883a 	mov	r21,r2
    60c8:	1827883a 	mov	r19,r3
    60cc:	000d64c0 	call	d64c <__muldf3>
    60d0:	180b883a 	mov	r5,r3
    60d4:	1009883a 	mov	r4,r2
    60d8:	1821883a 	mov	r16,r3
    60dc:	1023883a 	mov	r17,r2
    60e0:	000e6600 	call	e660 <__fixdfsi>
    60e4:	1009883a 	mov	r4,r2
    60e8:	1029883a 	mov	r20,r2
    60ec:	000e6e00 	call	e6e0 <__floatsidf>
    60f0:	8809883a 	mov	r4,r17
    60f4:	800b883a 	mov	r5,r16
    60f8:	100d883a 	mov	r6,r2
    60fc:	180f883a 	mov	r7,r3
    6100:	000dd640 	call	dd64 <__subdf3>
    6104:	a5000c04 	addi	r20,r20,48
    6108:	a80d883a 	mov	r6,r21
    610c:	980f883a 	mov	r7,r19
    6110:	1009883a 	mov	r4,r2
    6114:	180b883a 	mov	r5,r3
    6118:	95000005 	stb	r20,0(r18)
    611c:	1021883a 	mov	r16,r2
    6120:	1823883a 	mov	r17,r3
    6124:	000d5580 	call	d558 <__ledf2>
    6128:	bdc00044 	addi	r23,r23,1
    612c:	800d883a 	mov	r6,r16
    6130:	880f883a 	mov	r7,r17
    6134:	0009883a 	mov	r4,zero
    6138:	014ffc34 	movhi	r5,16368
    613c:	103fcf0e 	bge	r2,zero,607c <__alt_data_end+0xff00607c>
    6140:	d8c01317 	ldw	r3,76(sp)
    6144:	d8c00515 	stw	r3,20(sp)
    6148:	d9400917 	ldw	r5,36(sp)
    614c:	e009883a 	mov	r4,fp
    6150:	00089d80 	call	89d8 <_Bfree>
    6154:	d9000517 	ldw	r4,20(sp)
    6158:	d9802317 	ldw	r6,140(sp)
    615c:	d9c02517 	ldw	r7,148(sp)
    6160:	b8000005 	stb	zero,0(r23)
    6164:	20800044 	addi	r2,r4,1
    6168:	30800015 	stw	r2,0(r6)
    616c:	3802aa26 	beq	r7,zero,6c18 <_dtoa_r+0x1178>
    6170:	3dc00015 	stw	r23,0(r7)
    6174:	d8800717 	ldw	r2,28(sp)
    6178:	003e7906 	br	5b60 <__alt_data_end+0xff005b60>
    617c:	00800434 	movhi	r2,16
    6180:	10bfffc4 	addi	r2,r2,-1
    6184:	88a2703a 	and	r17,r17,r2
    6188:	883e851e 	bne	r17,zero,5ba0 <__alt_data_end+0xff005ba0>
    618c:	00800074 	movhi	r2,1
    6190:	1086b704 	addi	r2,r2,6876
    6194:	003e8406 	br	5ba8 <__alt_data_end+0xff005ba8>
    6198:	10c00204 	addi	r3,r2,8
    619c:	003e8706 	br	5bbc <__alt_data_end+0xff005bbc>
    61a0:	01400434 	movhi	r5,16
    61a4:	297fffc4 	addi	r5,r5,-1
    61a8:	994a703a 	and	r5,r19,r5
    61ac:	9009883a 	mov	r4,r18
    61b0:	843f0044 	addi	r16,r16,-1023
    61b4:	294ffc34 	orhi	r5,r5,16368
    61b8:	dd800217 	ldw	r22,8(sp)
    61bc:	d8001115 	stw	zero,68(sp)
    61c0:	003ea506 	br	5c58 <__alt_data_end+0xff005c58>
    61c4:	00800074 	movhi	r2,1
    61c8:	1086ae04 	addi	r2,r2,6840
    61cc:	003e6406 	br	5b60 <__alt_data_end+0xff005b60>
    61d0:	e0001115 	stw	zero,68(fp)
    61d4:	000b883a 	mov	r5,zero
    61d8:	e009883a 	mov	r4,fp
    61dc:	00089300 	call	8930 <_Balloc>
    61e0:	01bfffc4 	movi	r6,-1
    61e4:	01c00044 	movi	r7,1
    61e8:	d8800715 	stw	r2,28(sp)
    61ec:	d9800c15 	stw	r6,48(sp)
    61f0:	e0801015 	stw	r2,64(fp)
    61f4:	d8000315 	stw	zero,12(sp)
    61f8:	d9c00b15 	stw	r7,44(sp)
    61fc:	d9800615 	stw	r6,24(sp)
    6200:	d8002215 	stw	zero,136(sp)
    6204:	d8800117 	ldw	r2,4(sp)
    6208:	10008916 	blt	r2,zero,6430 <_dtoa_r+0x990>
    620c:	d9000517 	ldw	r4,20(sp)
    6210:	00c00384 	movi	r3,14
    6214:	19008616 	blt	r3,r4,6430 <_dtoa_r+0x990>
    6218:	200490fa 	slli	r2,r4,3
    621c:	00c00074 	movhi	r3,1
    6220:	d9802217 	ldw	r6,136(sp)
    6224:	18c6d604 	addi	r3,r3,7000
    6228:	1885883a 	add	r2,r3,r2
    622c:	14000017 	ldw	r16,0(r2)
    6230:	14400117 	ldw	r17,4(r2)
    6234:	30016316 	blt	r6,zero,67c4 <_dtoa_r+0xd24>
    6238:	800d883a 	mov	r6,r16
    623c:	880f883a 	mov	r7,r17
    6240:	9009883a 	mov	r4,r18
    6244:	980b883a 	mov	r5,r19
    6248:	00020280 	call	2028 <__divdf3>
    624c:	180b883a 	mov	r5,r3
    6250:	1009883a 	mov	r4,r2
    6254:	000e6600 	call	e660 <__fixdfsi>
    6258:	1009883a 	mov	r4,r2
    625c:	102b883a 	mov	r21,r2
    6260:	000e6e00 	call	e6e0 <__floatsidf>
    6264:	800d883a 	mov	r6,r16
    6268:	880f883a 	mov	r7,r17
    626c:	1009883a 	mov	r4,r2
    6270:	180b883a 	mov	r5,r3
    6274:	000d64c0 	call	d64c <__muldf3>
    6278:	100d883a 	mov	r6,r2
    627c:	180f883a 	mov	r7,r3
    6280:	9009883a 	mov	r4,r18
    6284:	980b883a 	mov	r5,r19
    6288:	000dd640 	call	dd64 <__subdf3>
    628c:	d9c00717 	ldw	r7,28(sp)
    6290:	1009883a 	mov	r4,r2
    6294:	a8800c04 	addi	r2,r21,48
    6298:	38800005 	stb	r2,0(r7)
    629c:	3dc00044 	addi	r23,r7,1
    62a0:	d9c00617 	ldw	r7,24(sp)
    62a4:	01800044 	movi	r6,1
    62a8:	180b883a 	mov	r5,r3
    62ac:	2005883a 	mov	r2,r4
    62b0:	39803826 	beq	r7,r6,6394 <_dtoa_r+0x8f4>
    62b4:	000d883a 	mov	r6,zero
    62b8:	01d00934 	movhi	r7,16420
    62bc:	000d64c0 	call	d64c <__muldf3>
    62c0:	000d883a 	mov	r6,zero
    62c4:	000f883a 	mov	r7,zero
    62c8:	1009883a 	mov	r4,r2
    62cc:	180b883a 	mov	r5,r3
    62d0:	1025883a 	mov	r18,r2
    62d4:	1827883a 	mov	r19,r3
    62d8:	000d3f40 	call	d3f4 <__eqdf2>
    62dc:	103f9a26 	beq	r2,zero,6148 <__alt_data_end+0xff006148>
    62e0:	d9c00617 	ldw	r7,24(sp)
    62e4:	d8c00717 	ldw	r3,28(sp)
    62e8:	b829883a 	mov	r20,r23
    62ec:	38bfffc4 	addi	r2,r7,-1
    62f0:	18ad883a 	add	r22,r3,r2
    62f4:	00000a06 	br	6320 <_dtoa_r+0x880>
    62f8:	000d64c0 	call	d64c <__muldf3>
    62fc:	000d883a 	mov	r6,zero
    6300:	000f883a 	mov	r7,zero
    6304:	1009883a 	mov	r4,r2
    6308:	180b883a 	mov	r5,r3
    630c:	1025883a 	mov	r18,r2
    6310:	1827883a 	mov	r19,r3
    6314:	b829883a 	mov	r20,r23
    6318:	000d3f40 	call	d3f4 <__eqdf2>
    631c:	103f8a26 	beq	r2,zero,6148 <__alt_data_end+0xff006148>
    6320:	800d883a 	mov	r6,r16
    6324:	880f883a 	mov	r7,r17
    6328:	9009883a 	mov	r4,r18
    632c:	980b883a 	mov	r5,r19
    6330:	00020280 	call	2028 <__divdf3>
    6334:	180b883a 	mov	r5,r3
    6338:	1009883a 	mov	r4,r2
    633c:	000e6600 	call	e660 <__fixdfsi>
    6340:	1009883a 	mov	r4,r2
    6344:	102b883a 	mov	r21,r2
    6348:	000e6e00 	call	e6e0 <__floatsidf>
    634c:	800d883a 	mov	r6,r16
    6350:	880f883a 	mov	r7,r17
    6354:	1009883a 	mov	r4,r2
    6358:	180b883a 	mov	r5,r3
    635c:	000d64c0 	call	d64c <__muldf3>
    6360:	100d883a 	mov	r6,r2
    6364:	180f883a 	mov	r7,r3
    6368:	9009883a 	mov	r4,r18
    636c:	980b883a 	mov	r5,r19
    6370:	000dd640 	call	dd64 <__subdf3>
    6374:	aa000c04 	addi	r8,r21,48
    6378:	a2000005 	stb	r8,0(r20)
    637c:	000d883a 	mov	r6,zero
    6380:	01d00934 	movhi	r7,16420
    6384:	1009883a 	mov	r4,r2
    6388:	180b883a 	mov	r5,r3
    638c:	a5c00044 	addi	r23,r20,1
    6390:	b53fd91e 	bne	r22,r20,62f8 <__alt_data_end+0xff0062f8>
    6394:	100d883a 	mov	r6,r2
    6398:	180f883a 	mov	r7,r3
    639c:	1009883a 	mov	r4,r2
    63a0:	180b883a 	mov	r5,r3
    63a4:	000cb480 	call	cb48 <__adddf3>
    63a8:	100d883a 	mov	r6,r2
    63ac:	180f883a 	mov	r7,r3
    63b0:	8009883a 	mov	r4,r16
    63b4:	880b883a 	mov	r5,r17
    63b8:	1027883a 	mov	r19,r2
    63bc:	1825883a 	mov	r18,r3
    63c0:	000d5580 	call	d558 <__ledf2>
    63c4:	10000816 	blt	r2,zero,63e8 <_dtoa_r+0x948>
    63c8:	980d883a 	mov	r6,r19
    63cc:	900f883a 	mov	r7,r18
    63d0:	8009883a 	mov	r4,r16
    63d4:	880b883a 	mov	r5,r17
    63d8:	000d3f40 	call	d3f4 <__eqdf2>
    63dc:	103f5a1e 	bne	r2,zero,6148 <__alt_data_end+0xff006148>
    63e0:	ad40004c 	andi	r21,r21,1
    63e4:	a83f5826 	beq	r21,zero,6148 <__alt_data_end+0xff006148>
    63e8:	bd3fffc3 	ldbu	r20,-1(r23)
    63ec:	b8bfffc4 	addi	r2,r23,-1
    63f0:	1007883a 	mov	r3,r2
    63f4:	01400e44 	movi	r5,57
    63f8:	d9800717 	ldw	r6,28(sp)
    63fc:	00000506 	br	6414 <_dtoa_r+0x974>
    6400:	18ffffc4 	addi	r3,r3,-1
    6404:	11824726 	beq	r2,r6,6d24 <_dtoa_r+0x1284>
    6408:	1d000003 	ldbu	r20,0(r3)
    640c:	102f883a 	mov	r23,r2
    6410:	10bfffc4 	addi	r2,r2,-1
    6414:	a1003fcc 	andi	r4,r20,255
    6418:	2100201c 	xori	r4,r4,128
    641c:	213fe004 	addi	r4,r4,-128
    6420:	217ff726 	beq	r4,r5,6400 <__alt_data_end+0xff006400>
    6424:	a2000044 	addi	r8,r20,1
    6428:	12000005 	stb	r8,0(r2)
    642c:	003f4606 	br	6148 <__alt_data_end+0xff006148>
    6430:	d9000b17 	ldw	r4,44(sp)
    6434:	2000c826 	beq	r4,zero,6758 <_dtoa_r+0xcb8>
    6438:	d9800317 	ldw	r6,12(sp)
    643c:	00c00044 	movi	r3,1
    6440:	1980f90e 	bge	r3,r6,6828 <_dtoa_r+0xd88>
    6444:	d8800617 	ldw	r2,24(sp)
    6448:	d8c00a17 	ldw	r3,40(sp)
    644c:	157fffc4 	addi	r21,r2,-1
    6450:	1d41f316 	blt	r3,r21,6c20 <_dtoa_r+0x1180>
    6454:	1d6bc83a 	sub	r21,r3,r21
    6458:	d9c00617 	ldw	r7,24(sp)
    645c:	3802aa16 	blt	r7,zero,6f08 <_dtoa_r+0x1468>
    6460:	dd000817 	ldw	r20,32(sp)
    6464:	d8800617 	ldw	r2,24(sp)
    6468:	d8c00817 	ldw	r3,32(sp)
    646c:	01400044 	movi	r5,1
    6470:	e009883a 	mov	r4,fp
    6474:	1887883a 	add	r3,r3,r2
    6478:	d8c00815 	stw	r3,32(sp)
    647c:	b0ad883a 	add	r22,r22,r2
    6480:	0008d3c0 	call	8d3c <__i2b>
    6484:	1023883a 	mov	r17,r2
    6488:	a0000826 	beq	r20,zero,64ac <_dtoa_r+0xa0c>
    648c:	0580070e 	bge	zero,r22,64ac <_dtoa_r+0xa0c>
    6490:	a005883a 	mov	r2,r20
    6494:	b500b916 	blt	r22,r20,677c <_dtoa_r+0xcdc>
    6498:	d9000817 	ldw	r4,32(sp)
    649c:	a0a9c83a 	sub	r20,r20,r2
    64a0:	b0adc83a 	sub	r22,r22,r2
    64a4:	2089c83a 	sub	r4,r4,r2
    64a8:	d9000815 	stw	r4,32(sp)
    64ac:	d9800a17 	ldw	r6,40(sp)
    64b0:	0181810e 	bge	zero,r6,6ab8 <_dtoa_r+0x1018>
    64b4:	d9c00b17 	ldw	r7,44(sp)
    64b8:	3800b326 	beq	r7,zero,6788 <_dtoa_r+0xce8>
    64bc:	a800b226 	beq	r21,zero,6788 <_dtoa_r+0xce8>
    64c0:	880b883a 	mov	r5,r17
    64c4:	a80d883a 	mov	r6,r21
    64c8:	e009883a 	mov	r4,fp
    64cc:	0008f700 	call	8f70 <__pow5mult>
    64d0:	d9800917 	ldw	r6,36(sp)
    64d4:	100b883a 	mov	r5,r2
    64d8:	e009883a 	mov	r4,fp
    64dc:	1023883a 	mov	r17,r2
    64e0:	0008d780 	call	8d78 <__multiply>
    64e4:	1021883a 	mov	r16,r2
    64e8:	d8800a17 	ldw	r2,40(sp)
    64ec:	d9400917 	ldw	r5,36(sp)
    64f0:	e009883a 	mov	r4,fp
    64f4:	1545c83a 	sub	r2,r2,r21
    64f8:	d8800a15 	stw	r2,40(sp)
    64fc:	00089d80 	call	89d8 <_Bfree>
    6500:	d8c00a17 	ldw	r3,40(sp)
    6504:	18009f1e 	bne	r3,zero,6784 <_dtoa_r+0xce4>
    6508:	05c00044 	movi	r23,1
    650c:	e009883a 	mov	r4,fp
    6510:	b80b883a 	mov	r5,r23
    6514:	0008d3c0 	call	8d3c <__i2b>
    6518:	d9000d17 	ldw	r4,52(sp)
    651c:	102b883a 	mov	r21,r2
    6520:	2000ce26 	beq	r4,zero,685c <_dtoa_r+0xdbc>
    6524:	200d883a 	mov	r6,r4
    6528:	100b883a 	mov	r5,r2
    652c:	e009883a 	mov	r4,fp
    6530:	0008f700 	call	8f70 <__pow5mult>
    6534:	d9800317 	ldw	r6,12(sp)
    6538:	102b883a 	mov	r21,r2
    653c:	b981810e 	bge	r23,r6,6b44 <_dtoa_r+0x10a4>
    6540:	0027883a 	mov	r19,zero
    6544:	a8800417 	ldw	r2,16(r21)
    6548:	05c00804 	movi	r23,32
    654c:	10800104 	addi	r2,r2,4
    6550:	1085883a 	add	r2,r2,r2
    6554:	1085883a 	add	r2,r2,r2
    6558:	a885883a 	add	r2,r21,r2
    655c:	11000017 	ldw	r4,0(r2)
    6560:	0008c240 	call	8c24 <__hi0bits>
    6564:	b885c83a 	sub	r2,r23,r2
    6568:	1585883a 	add	r2,r2,r22
    656c:	108007cc 	andi	r2,r2,31
    6570:	1000b326 	beq	r2,zero,6840 <_dtoa_r+0xda0>
    6574:	00c00804 	movi	r3,32
    6578:	1887c83a 	sub	r3,r3,r2
    657c:	01000104 	movi	r4,4
    6580:	20c2cd0e 	bge	r4,r3,70b8 <_dtoa_r+0x1618>
    6584:	00c00704 	movi	r3,28
    6588:	1885c83a 	sub	r2,r3,r2
    658c:	d8c00817 	ldw	r3,32(sp)
    6590:	a0a9883a 	add	r20,r20,r2
    6594:	b0ad883a 	add	r22,r22,r2
    6598:	1887883a 	add	r3,r3,r2
    659c:	d8c00815 	stw	r3,32(sp)
    65a0:	d9800817 	ldw	r6,32(sp)
    65a4:	0180040e 	bge	zero,r6,65b8 <_dtoa_r+0xb18>
    65a8:	800b883a 	mov	r5,r16
    65ac:	e009883a 	mov	r4,fp
    65b0:	00090b00 	call	90b0 <__lshift>
    65b4:	1021883a 	mov	r16,r2
    65b8:	0580050e 	bge	zero,r22,65d0 <_dtoa_r+0xb30>
    65bc:	a80b883a 	mov	r5,r21
    65c0:	b00d883a 	mov	r6,r22
    65c4:	e009883a 	mov	r4,fp
    65c8:	00090b00 	call	90b0 <__lshift>
    65cc:	102b883a 	mov	r21,r2
    65d0:	d9c00e17 	ldw	r7,56(sp)
    65d4:	3801211e 	bne	r7,zero,6a5c <_dtoa_r+0xfbc>
    65d8:	d9800617 	ldw	r6,24(sp)
    65dc:	0181380e 	bge	zero,r6,6ac0 <_dtoa_r+0x1020>
    65e0:	d8c00b17 	ldw	r3,44(sp)
    65e4:	1800ab1e 	bne	r3,zero,6894 <_dtoa_r+0xdf4>
    65e8:	dc800717 	ldw	r18,28(sp)
    65ec:	dcc00617 	ldw	r19,24(sp)
    65f0:	9029883a 	mov	r20,r18
    65f4:	00000206 	br	6600 <_dtoa_r+0xb60>
    65f8:	0008a000 	call	8a00 <__multadd>
    65fc:	1021883a 	mov	r16,r2
    6600:	a80b883a 	mov	r5,r21
    6604:	8009883a 	mov	r4,r16
    6608:	00058a00 	call	58a0 <quorem>
    660c:	10800c04 	addi	r2,r2,48
    6610:	90800005 	stb	r2,0(r18)
    6614:	94800044 	addi	r18,r18,1
    6618:	9507c83a 	sub	r3,r18,r20
    661c:	000f883a 	mov	r7,zero
    6620:	01800284 	movi	r6,10
    6624:	800b883a 	mov	r5,r16
    6628:	e009883a 	mov	r4,fp
    662c:	1cfff216 	blt	r3,r19,65f8 <__alt_data_end+0xff0065f8>
    6630:	1011883a 	mov	r8,r2
    6634:	d8800617 	ldw	r2,24(sp)
    6638:	0082370e 	bge	zero,r2,6f18 <_dtoa_r+0x1478>
    663c:	d9000717 	ldw	r4,28(sp)
    6640:	0025883a 	mov	r18,zero
    6644:	20af883a 	add	r23,r4,r2
    6648:	01800044 	movi	r6,1
    664c:	800b883a 	mov	r5,r16
    6650:	e009883a 	mov	r4,fp
    6654:	da001715 	stw	r8,92(sp)
    6658:	00090b00 	call	90b0 <__lshift>
    665c:	a80b883a 	mov	r5,r21
    6660:	1009883a 	mov	r4,r2
    6664:	d8800915 	stw	r2,36(sp)
    6668:	00091f80 	call	91f8 <__mcmp>
    666c:	da001717 	ldw	r8,92(sp)
    6670:	0081800e 	bge	zero,r2,6c74 <_dtoa_r+0x11d4>
    6674:	b93fffc3 	ldbu	r4,-1(r23)
    6678:	b8bfffc4 	addi	r2,r23,-1
    667c:	1007883a 	mov	r3,r2
    6680:	01800e44 	movi	r6,57
    6684:	d9c00717 	ldw	r7,28(sp)
    6688:	00000506 	br	66a0 <_dtoa_r+0xc00>
    668c:	18ffffc4 	addi	r3,r3,-1
    6690:	11c12326 	beq	r2,r7,6b20 <_dtoa_r+0x1080>
    6694:	19000003 	ldbu	r4,0(r3)
    6698:	102f883a 	mov	r23,r2
    669c:	10bfffc4 	addi	r2,r2,-1
    66a0:	21403fcc 	andi	r5,r4,255
    66a4:	2940201c 	xori	r5,r5,128
    66a8:	297fe004 	addi	r5,r5,-128
    66ac:	29bff726 	beq	r5,r6,668c <__alt_data_end+0xff00668c>
    66b0:	21000044 	addi	r4,r4,1
    66b4:	11000005 	stb	r4,0(r2)
    66b8:	a80b883a 	mov	r5,r21
    66bc:	e009883a 	mov	r4,fp
    66c0:	00089d80 	call	89d8 <_Bfree>
    66c4:	883ea026 	beq	r17,zero,6148 <__alt_data_end+0xff006148>
    66c8:	90000426 	beq	r18,zero,66dc <_dtoa_r+0xc3c>
    66cc:	94400326 	beq	r18,r17,66dc <_dtoa_r+0xc3c>
    66d0:	900b883a 	mov	r5,r18
    66d4:	e009883a 	mov	r4,fp
    66d8:	00089d80 	call	89d8 <_Bfree>
    66dc:	880b883a 	mov	r5,r17
    66e0:	e009883a 	mov	r4,fp
    66e4:	00089d80 	call	89d8 <_Bfree>
    66e8:	003e9706 	br	6148 <__alt_data_end+0xff006148>
    66ec:	01800044 	movi	r6,1
    66f0:	d9800e15 	stw	r6,56(sp)
    66f4:	003d9606 	br	5d50 <__alt_data_end+0xff005d50>
    66f8:	d8800817 	ldw	r2,32(sp)
    66fc:	d8c00517 	ldw	r3,20(sp)
    6700:	d8000d15 	stw	zero,52(sp)
    6704:	10c5c83a 	sub	r2,r2,r3
    6708:	00c9c83a 	sub	r4,zero,r3
    670c:	d8800815 	stw	r2,32(sp)
    6710:	d9000a15 	stw	r4,40(sp)
    6714:	003d9706 	br	5d74 <__alt_data_end+0xff005d74>
    6718:	05adc83a 	sub	r22,zero,r22
    671c:	dd800815 	stw	r22,32(sp)
    6720:	002d883a 	mov	r22,zero
    6724:	003d8e06 	br	5d60 <__alt_data_end+0xff005d60>
    6728:	d9000517 	ldw	r4,20(sp)
    672c:	000e6e00 	call	e6e0 <__floatsidf>
    6730:	100d883a 	mov	r6,r2
    6734:	180f883a 	mov	r7,r3
    6738:	a009883a 	mov	r4,r20
    673c:	880b883a 	mov	r5,r17
    6740:	000d3f40 	call	d3f4 <__eqdf2>
    6744:	103d7126 	beq	r2,zero,5d0c <__alt_data_end+0xff005d0c>
    6748:	d9c00517 	ldw	r7,20(sp)
    674c:	39ffffc4 	addi	r7,r7,-1
    6750:	d9c00515 	stw	r7,20(sp)
    6754:	003d6d06 	br	5d0c <__alt_data_end+0xff005d0c>
    6758:	dd400a17 	ldw	r21,40(sp)
    675c:	dd000817 	ldw	r20,32(sp)
    6760:	0023883a 	mov	r17,zero
    6764:	003f4806 	br	6488 <__alt_data_end+0xff006488>
    6768:	10e3c83a 	sub	r17,r2,r3
    676c:	9448983a 	sll	r4,r18,r17
    6770:	003d3206 	br	5c3c <__alt_data_end+0xff005c3c>
    6774:	d8000e15 	stw	zero,56(sp)
    6778:	003d7506 	br	5d50 <__alt_data_end+0xff005d50>
    677c:	b005883a 	mov	r2,r22
    6780:	003f4506 	br	6498 <__alt_data_end+0xff006498>
    6784:	dc000915 	stw	r16,36(sp)
    6788:	d9800a17 	ldw	r6,40(sp)
    678c:	d9400917 	ldw	r5,36(sp)
    6790:	e009883a 	mov	r4,fp
    6794:	0008f700 	call	8f70 <__pow5mult>
    6798:	1021883a 	mov	r16,r2
    679c:	003f5a06 	br	6508 <__alt_data_end+0xff006508>
    67a0:	01c00044 	movi	r7,1
    67a4:	d9c00b15 	stw	r7,44(sp)
    67a8:	d8802217 	ldw	r2,136(sp)
    67ac:	0081280e 	bge	zero,r2,6c50 <_dtoa_r+0x11b0>
    67b0:	100d883a 	mov	r6,r2
    67b4:	1021883a 	mov	r16,r2
    67b8:	d8800c15 	stw	r2,48(sp)
    67bc:	d8800615 	stw	r2,24(sp)
    67c0:	003d8806 	br	5de4 <__alt_data_end+0xff005de4>
    67c4:	d8800617 	ldw	r2,24(sp)
    67c8:	00be9b16 	blt	zero,r2,6238 <__alt_data_end+0xff006238>
    67cc:	10010f1e 	bne	r2,zero,6c0c <_dtoa_r+0x116c>
    67d0:	880b883a 	mov	r5,r17
    67d4:	000d883a 	mov	r6,zero
    67d8:	01d00534 	movhi	r7,16404
    67dc:	8009883a 	mov	r4,r16
    67e0:	000d64c0 	call	d64c <__muldf3>
    67e4:	900d883a 	mov	r6,r18
    67e8:	980f883a 	mov	r7,r19
    67ec:	1009883a 	mov	r4,r2
    67f0:	180b883a 	mov	r5,r3
    67f4:	000d47c0 	call	d47c <__gedf2>
    67f8:	002b883a 	mov	r21,zero
    67fc:	0023883a 	mov	r17,zero
    6800:	1000bf16 	blt	r2,zero,6b00 <_dtoa_r+0x1060>
    6804:	d9802217 	ldw	r6,136(sp)
    6808:	ddc00717 	ldw	r23,28(sp)
    680c:	018c303a 	nor	r6,zero,r6
    6810:	d9800515 	stw	r6,20(sp)
    6814:	a80b883a 	mov	r5,r21
    6818:	e009883a 	mov	r4,fp
    681c:	00089d80 	call	89d8 <_Bfree>
    6820:	883e4926 	beq	r17,zero,6148 <__alt_data_end+0xff006148>
    6824:	003fad06 	br	66dc <__alt_data_end+0xff0066dc>
    6828:	d9c01117 	ldw	r7,68(sp)
    682c:	3801bc26 	beq	r7,zero,6f20 <_dtoa_r+0x1480>
    6830:	10810cc4 	addi	r2,r2,1075
    6834:	dd400a17 	ldw	r21,40(sp)
    6838:	dd000817 	ldw	r20,32(sp)
    683c:	003f0a06 	br	6468 <__alt_data_end+0xff006468>
    6840:	00800704 	movi	r2,28
    6844:	d9000817 	ldw	r4,32(sp)
    6848:	a0a9883a 	add	r20,r20,r2
    684c:	b0ad883a 	add	r22,r22,r2
    6850:	2089883a 	add	r4,r4,r2
    6854:	d9000815 	stw	r4,32(sp)
    6858:	003f5106 	br	65a0 <__alt_data_end+0xff0065a0>
    685c:	d8c00317 	ldw	r3,12(sp)
    6860:	b8c1fc0e 	bge	r23,r3,7054 <_dtoa_r+0x15b4>
    6864:	0027883a 	mov	r19,zero
    6868:	b805883a 	mov	r2,r23
    686c:	003f3e06 	br	6568 <__alt_data_end+0xff006568>
    6870:	880b883a 	mov	r5,r17
    6874:	e009883a 	mov	r4,fp
    6878:	000f883a 	mov	r7,zero
    687c:	01800284 	movi	r6,10
    6880:	0008a000 	call	8a00 <__multadd>
    6884:	d9000c17 	ldw	r4,48(sp)
    6888:	1023883a 	mov	r17,r2
    688c:	0102040e 	bge	zero,r4,70a0 <_dtoa_r+0x1600>
    6890:	d9000615 	stw	r4,24(sp)
    6894:	0500050e 	bge	zero,r20,68ac <_dtoa_r+0xe0c>
    6898:	880b883a 	mov	r5,r17
    689c:	a00d883a 	mov	r6,r20
    68a0:	e009883a 	mov	r4,fp
    68a4:	00090b00 	call	90b0 <__lshift>
    68a8:	1023883a 	mov	r17,r2
    68ac:	9801241e 	bne	r19,zero,6d40 <_dtoa_r+0x12a0>
    68b0:	8829883a 	mov	r20,r17
    68b4:	d9000617 	ldw	r4,24(sp)
    68b8:	dcc00717 	ldw	r19,28(sp)
    68bc:	9480004c 	andi	r18,r18,1
    68c0:	20bfffc4 	addi	r2,r4,-1
    68c4:	9885883a 	add	r2,r19,r2
    68c8:	d8800415 	stw	r2,16(sp)
    68cc:	dc800615 	stw	r18,24(sp)
    68d0:	a80b883a 	mov	r5,r21
    68d4:	8009883a 	mov	r4,r16
    68d8:	00058a00 	call	58a0 <quorem>
    68dc:	880b883a 	mov	r5,r17
    68e0:	8009883a 	mov	r4,r16
    68e4:	102f883a 	mov	r23,r2
    68e8:	00091f80 	call	91f8 <__mcmp>
    68ec:	a80b883a 	mov	r5,r21
    68f0:	a00d883a 	mov	r6,r20
    68f4:	e009883a 	mov	r4,fp
    68f8:	102d883a 	mov	r22,r2
    68fc:	00092580 	call	9258 <__mdiff>
    6900:	1007883a 	mov	r3,r2
    6904:	10800317 	ldw	r2,12(r2)
    6908:	bc800c04 	addi	r18,r23,48
    690c:	180b883a 	mov	r5,r3
    6910:	10004e1e 	bne	r2,zero,6a4c <_dtoa_r+0xfac>
    6914:	8009883a 	mov	r4,r16
    6918:	d8c01615 	stw	r3,88(sp)
    691c:	00091f80 	call	91f8 <__mcmp>
    6920:	d8c01617 	ldw	r3,88(sp)
    6924:	e009883a 	mov	r4,fp
    6928:	d8801615 	stw	r2,88(sp)
    692c:	180b883a 	mov	r5,r3
    6930:	00089d80 	call	89d8 <_Bfree>
    6934:	d8801617 	ldw	r2,88(sp)
    6938:	1000041e 	bne	r2,zero,694c <_dtoa_r+0xeac>
    693c:	d9800317 	ldw	r6,12(sp)
    6940:	3000021e 	bne	r6,zero,694c <_dtoa_r+0xeac>
    6944:	d8c00617 	ldw	r3,24(sp)
    6948:	18003726 	beq	r3,zero,6a28 <_dtoa_r+0xf88>
    694c:	b0002016 	blt	r22,zero,69d0 <_dtoa_r+0xf30>
    6950:	b000041e 	bne	r22,zero,6964 <_dtoa_r+0xec4>
    6954:	d9000317 	ldw	r4,12(sp)
    6958:	2000021e 	bne	r4,zero,6964 <_dtoa_r+0xec4>
    695c:	d8c00617 	ldw	r3,24(sp)
    6960:	18001b26 	beq	r3,zero,69d0 <_dtoa_r+0xf30>
    6964:	00810716 	blt	zero,r2,6d84 <_dtoa_r+0x12e4>
    6968:	d8c00417 	ldw	r3,16(sp)
    696c:	9d800044 	addi	r22,r19,1
    6970:	9c800005 	stb	r18,0(r19)
    6974:	b02f883a 	mov	r23,r22
    6978:	98c10626 	beq	r19,r3,6d94 <_dtoa_r+0x12f4>
    697c:	800b883a 	mov	r5,r16
    6980:	000f883a 	mov	r7,zero
    6984:	01800284 	movi	r6,10
    6988:	e009883a 	mov	r4,fp
    698c:	0008a000 	call	8a00 <__multadd>
    6990:	1021883a 	mov	r16,r2
    6994:	000f883a 	mov	r7,zero
    6998:	01800284 	movi	r6,10
    699c:	880b883a 	mov	r5,r17
    69a0:	e009883a 	mov	r4,fp
    69a4:	8d002526 	beq	r17,r20,6a3c <_dtoa_r+0xf9c>
    69a8:	0008a000 	call	8a00 <__multadd>
    69ac:	a00b883a 	mov	r5,r20
    69b0:	000f883a 	mov	r7,zero
    69b4:	01800284 	movi	r6,10
    69b8:	e009883a 	mov	r4,fp
    69bc:	1023883a 	mov	r17,r2
    69c0:	0008a000 	call	8a00 <__multadd>
    69c4:	1029883a 	mov	r20,r2
    69c8:	b027883a 	mov	r19,r22
    69cc:	003fc006 	br	68d0 <__alt_data_end+0xff0068d0>
    69d0:	9011883a 	mov	r8,r18
    69d4:	00800e0e 	bge	zero,r2,6a10 <_dtoa_r+0xf70>
    69d8:	800b883a 	mov	r5,r16
    69dc:	01800044 	movi	r6,1
    69e0:	e009883a 	mov	r4,fp
    69e4:	da001715 	stw	r8,92(sp)
    69e8:	00090b00 	call	90b0 <__lshift>
    69ec:	a80b883a 	mov	r5,r21
    69f0:	1009883a 	mov	r4,r2
    69f4:	1021883a 	mov	r16,r2
    69f8:	00091f80 	call	91f8 <__mcmp>
    69fc:	da001717 	ldw	r8,92(sp)
    6a00:	0081960e 	bge	zero,r2,705c <_dtoa_r+0x15bc>
    6a04:	00800e44 	movi	r2,57
    6a08:	40817026 	beq	r8,r2,6fcc <_dtoa_r+0x152c>
    6a0c:	ba000c44 	addi	r8,r23,49
    6a10:	8825883a 	mov	r18,r17
    6a14:	9dc00044 	addi	r23,r19,1
    6a18:	9a000005 	stb	r8,0(r19)
    6a1c:	a023883a 	mov	r17,r20
    6a20:	dc000915 	stw	r16,36(sp)
    6a24:	003f2406 	br	66b8 <__alt_data_end+0xff0066b8>
    6a28:	00800e44 	movi	r2,57
    6a2c:	9011883a 	mov	r8,r18
    6a30:	90816626 	beq	r18,r2,6fcc <_dtoa_r+0x152c>
    6a34:	05bff516 	blt	zero,r22,6a0c <__alt_data_end+0xff006a0c>
    6a38:	003ff506 	br	6a10 <__alt_data_end+0xff006a10>
    6a3c:	0008a000 	call	8a00 <__multadd>
    6a40:	1023883a 	mov	r17,r2
    6a44:	1029883a 	mov	r20,r2
    6a48:	003fdf06 	br	69c8 <__alt_data_end+0xff0069c8>
    6a4c:	e009883a 	mov	r4,fp
    6a50:	00089d80 	call	89d8 <_Bfree>
    6a54:	00800044 	movi	r2,1
    6a58:	003fbc06 	br	694c <__alt_data_end+0xff00694c>
    6a5c:	a80b883a 	mov	r5,r21
    6a60:	8009883a 	mov	r4,r16
    6a64:	00091f80 	call	91f8 <__mcmp>
    6a68:	103edb0e 	bge	r2,zero,65d8 <__alt_data_end+0xff0065d8>
    6a6c:	800b883a 	mov	r5,r16
    6a70:	000f883a 	mov	r7,zero
    6a74:	01800284 	movi	r6,10
    6a78:	e009883a 	mov	r4,fp
    6a7c:	0008a000 	call	8a00 <__multadd>
    6a80:	1021883a 	mov	r16,r2
    6a84:	d8800517 	ldw	r2,20(sp)
    6a88:	d8c00b17 	ldw	r3,44(sp)
    6a8c:	10bfffc4 	addi	r2,r2,-1
    6a90:	d8800515 	stw	r2,20(sp)
    6a94:	183f761e 	bne	r3,zero,6870 <__alt_data_end+0xff006870>
    6a98:	d9000c17 	ldw	r4,48(sp)
    6a9c:	0101730e 	bge	zero,r4,706c <_dtoa_r+0x15cc>
    6aa0:	d9000615 	stw	r4,24(sp)
    6aa4:	003ed006 	br	65e8 <__alt_data_end+0xff0065e8>
    6aa8:	00800084 	movi	r2,2
    6aac:	3081861e 	bne	r6,r2,70c8 <_dtoa_r+0x1628>
    6ab0:	d8000b15 	stw	zero,44(sp)
    6ab4:	003f3c06 	br	67a8 <__alt_data_end+0xff0067a8>
    6ab8:	dc000917 	ldw	r16,36(sp)
    6abc:	003e9206 	br	6508 <__alt_data_end+0xff006508>
    6ac0:	d9c00317 	ldw	r7,12(sp)
    6ac4:	00800084 	movi	r2,2
    6ac8:	11fec50e 	bge	r2,r7,65e0 <__alt_data_end+0xff0065e0>
    6acc:	d9000617 	ldw	r4,24(sp)
    6ad0:	20013c1e 	bne	r4,zero,6fc4 <_dtoa_r+0x1524>
    6ad4:	a80b883a 	mov	r5,r21
    6ad8:	000f883a 	mov	r7,zero
    6adc:	01800144 	movi	r6,5
    6ae0:	e009883a 	mov	r4,fp
    6ae4:	0008a000 	call	8a00 <__multadd>
    6ae8:	100b883a 	mov	r5,r2
    6aec:	8009883a 	mov	r4,r16
    6af0:	102b883a 	mov	r21,r2
    6af4:	00091f80 	call	91f8 <__mcmp>
    6af8:	dc000915 	stw	r16,36(sp)
    6afc:	00bf410e 	bge	zero,r2,6804 <__alt_data_end+0xff006804>
    6b00:	d9c00717 	ldw	r7,28(sp)
    6b04:	00800c44 	movi	r2,49
    6b08:	38800005 	stb	r2,0(r7)
    6b0c:	d8800517 	ldw	r2,20(sp)
    6b10:	3dc00044 	addi	r23,r7,1
    6b14:	10800044 	addi	r2,r2,1
    6b18:	d8800515 	stw	r2,20(sp)
    6b1c:	003f3d06 	br	6814 <__alt_data_end+0xff006814>
    6b20:	d9800517 	ldw	r6,20(sp)
    6b24:	d9c00717 	ldw	r7,28(sp)
    6b28:	00800c44 	movi	r2,49
    6b2c:	31800044 	addi	r6,r6,1
    6b30:	d9800515 	stw	r6,20(sp)
    6b34:	38800005 	stb	r2,0(r7)
    6b38:	003edf06 	br	66b8 <__alt_data_end+0xff0066b8>
    6b3c:	d8000b15 	stw	zero,44(sp)
    6b40:	003c9f06 	br	5dc0 <__alt_data_end+0xff005dc0>
    6b44:	903e7e1e 	bne	r18,zero,6540 <__alt_data_end+0xff006540>
    6b48:	00800434 	movhi	r2,16
    6b4c:	10bfffc4 	addi	r2,r2,-1
    6b50:	9884703a 	and	r2,r19,r2
    6b54:	1000ea1e 	bne	r2,zero,6f00 <_dtoa_r+0x1460>
    6b58:	9cdffc2c 	andhi	r19,r19,32752
    6b5c:	9800e826 	beq	r19,zero,6f00 <_dtoa_r+0x1460>
    6b60:	d9c00817 	ldw	r7,32(sp)
    6b64:	b5800044 	addi	r22,r22,1
    6b68:	04c00044 	movi	r19,1
    6b6c:	39c00044 	addi	r7,r7,1
    6b70:	d9c00815 	stw	r7,32(sp)
    6b74:	d8800d17 	ldw	r2,52(sp)
    6b78:	103e721e 	bne	r2,zero,6544 <__alt_data_end+0xff006544>
    6b7c:	00800044 	movi	r2,1
    6b80:	003e7906 	br	6568 <__alt_data_end+0xff006568>
    6b84:	8009883a 	mov	r4,r16
    6b88:	000e6e00 	call	e6e0 <__floatsidf>
    6b8c:	d9800f17 	ldw	r6,60(sp)
    6b90:	d9c01017 	ldw	r7,64(sp)
    6b94:	1009883a 	mov	r4,r2
    6b98:	180b883a 	mov	r5,r3
    6b9c:	000d64c0 	call	d64c <__muldf3>
    6ba0:	000d883a 	mov	r6,zero
    6ba4:	01d00734 	movhi	r7,16412
    6ba8:	1009883a 	mov	r4,r2
    6bac:	180b883a 	mov	r5,r3
    6bb0:	000cb480 	call	cb48 <__adddf3>
    6bb4:	047f3034 	movhi	r17,64704
    6bb8:	1021883a 	mov	r16,r2
    6bbc:	1c63883a 	add	r17,r3,r17
    6bc0:	d9000f17 	ldw	r4,60(sp)
    6bc4:	d9401017 	ldw	r5,64(sp)
    6bc8:	000d883a 	mov	r6,zero
    6bcc:	01d00534 	movhi	r7,16404
    6bd0:	000dd640 	call	dd64 <__subdf3>
    6bd4:	800d883a 	mov	r6,r16
    6bd8:	880f883a 	mov	r7,r17
    6bdc:	1009883a 	mov	r4,r2
    6be0:	180b883a 	mov	r5,r3
    6be4:	102b883a 	mov	r21,r2
    6be8:	1829883a 	mov	r20,r3
    6bec:	000d47c0 	call	d47c <__gedf2>
    6bf0:	00806c16 	blt	zero,r2,6da4 <_dtoa_r+0x1304>
    6bf4:	89e0003c 	xorhi	r7,r17,32768
    6bf8:	800d883a 	mov	r6,r16
    6bfc:	a809883a 	mov	r4,r21
    6c00:	a00b883a 	mov	r5,r20
    6c04:	000d5580 	call	d558 <__ledf2>
    6c08:	103d7e0e 	bge	r2,zero,6204 <__alt_data_end+0xff006204>
    6c0c:	002b883a 	mov	r21,zero
    6c10:	0023883a 	mov	r17,zero
    6c14:	003efb06 	br	6804 <__alt_data_end+0xff006804>
    6c18:	d8800717 	ldw	r2,28(sp)
    6c1c:	003bd006 	br	5b60 <__alt_data_end+0xff005b60>
    6c20:	d9000a17 	ldw	r4,40(sp)
    6c24:	d9800d17 	ldw	r6,52(sp)
    6c28:	dd400a15 	stw	r21,40(sp)
    6c2c:	a905c83a 	sub	r2,r21,r4
    6c30:	308d883a 	add	r6,r6,r2
    6c34:	d9800d15 	stw	r6,52(sp)
    6c38:	002b883a 	mov	r21,zero
    6c3c:	003e0606 	br	6458 <__alt_data_end+0xff006458>
    6c40:	9023883a 	mov	r17,r18
    6c44:	9829883a 	mov	r20,r19
    6c48:	04000084 	movi	r16,2
    6c4c:	003c9206 	br	5e98 <__alt_data_end+0xff005e98>
    6c50:	04000044 	movi	r16,1
    6c54:	dc000c15 	stw	r16,48(sp)
    6c58:	dc000615 	stw	r16,24(sp)
    6c5c:	dc002215 	stw	r16,136(sp)
    6c60:	e0001115 	stw	zero,68(fp)
    6c64:	000b883a 	mov	r5,zero
    6c68:	003c6906 	br	5e10 <__alt_data_end+0xff005e10>
    6c6c:	3021883a 	mov	r16,r6
    6c70:	003ffb06 	br	6c60 <__alt_data_end+0xff006c60>
    6c74:	1000021e 	bne	r2,zero,6c80 <_dtoa_r+0x11e0>
    6c78:	4200004c 	andi	r8,r8,1
    6c7c:	403e7d1e 	bne	r8,zero,6674 <__alt_data_end+0xff006674>
    6c80:	01000c04 	movi	r4,48
    6c84:	00000106 	br	6c8c <_dtoa_r+0x11ec>
    6c88:	102f883a 	mov	r23,r2
    6c8c:	b8bfffc4 	addi	r2,r23,-1
    6c90:	10c00007 	ldb	r3,0(r2)
    6c94:	193ffc26 	beq	r3,r4,6c88 <__alt_data_end+0xff006c88>
    6c98:	003e8706 	br	66b8 <__alt_data_end+0xff0066b8>
    6c9c:	d8800517 	ldw	r2,20(sp)
    6ca0:	00a3c83a 	sub	r17,zero,r2
    6ca4:	8800a426 	beq	r17,zero,6f38 <_dtoa_r+0x1498>
    6ca8:	888003cc 	andi	r2,r17,15
    6cac:	100490fa 	slli	r2,r2,3
    6cb0:	00c00074 	movhi	r3,1
    6cb4:	18c6d604 	addi	r3,r3,7000
    6cb8:	1885883a 	add	r2,r3,r2
    6cbc:	11800017 	ldw	r6,0(r2)
    6cc0:	11c00117 	ldw	r7,4(r2)
    6cc4:	9009883a 	mov	r4,r18
    6cc8:	980b883a 	mov	r5,r19
    6ccc:	8823d13a 	srai	r17,r17,4
    6cd0:	000d64c0 	call	d64c <__muldf3>
    6cd4:	d8800f15 	stw	r2,60(sp)
    6cd8:	d8c01015 	stw	r3,64(sp)
    6cdc:	8800e826 	beq	r17,zero,7080 <_dtoa_r+0x15e0>
    6ce0:	05000074 	movhi	r20,1
    6ce4:	a506cc04 	addi	r20,r20,6960
    6ce8:	04000084 	movi	r16,2
    6cec:	8980004c 	andi	r6,r17,1
    6cf0:	1009883a 	mov	r4,r2
    6cf4:	8823d07a 	srai	r17,r17,1
    6cf8:	180b883a 	mov	r5,r3
    6cfc:	30000426 	beq	r6,zero,6d10 <_dtoa_r+0x1270>
    6d00:	a1800017 	ldw	r6,0(r20)
    6d04:	a1c00117 	ldw	r7,4(r20)
    6d08:	84000044 	addi	r16,r16,1
    6d0c:	000d64c0 	call	d64c <__muldf3>
    6d10:	a5000204 	addi	r20,r20,8
    6d14:	883ff51e 	bne	r17,zero,6cec <__alt_data_end+0xff006cec>
    6d18:	d8800f15 	stw	r2,60(sp)
    6d1c:	d8c01015 	stw	r3,64(sp)
    6d20:	003c7606 	br	5efc <__alt_data_end+0xff005efc>
    6d24:	00c00c04 	movi	r3,48
    6d28:	10c00005 	stb	r3,0(r2)
    6d2c:	d8c00517 	ldw	r3,20(sp)
    6d30:	bd3fffc3 	ldbu	r20,-1(r23)
    6d34:	18c00044 	addi	r3,r3,1
    6d38:	d8c00515 	stw	r3,20(sp)
    6d3c:	003db906 	br	6424 <__alt_data_end+0xff006424>
    6d40:	89400117 	ldw	r5,4(r17)
    6d44:	e009883a 	mov	r4,fp
    6d48:	00089300 	call	8930 <_Balloc>
    6d4c:	89800417 	ldw	r6,16(r17)
    6d50:	89400304 	addi	r5,r17,12
    6d54:	11000304 	addi	r4,r2,12
    6d58:	31800084 	addi	r6,r6,2
    6d5c:	318d883a 	add	r6,r6,r6
    6d60:	318d883a 	add	r6,r6,r6
    6d64:	1027883a 	mov	r19,r2
    6d68:	00085640 	call	8564 <memcpy>
    6d6c:	01800044 	movi	r6,1
    6d70:	980b883a 	mov	r5,r19
    6d74:	e009883a 	mov	r4,fp
    6d78:	00090b00 	call	90b0 <__lshift>
    6d7c:	1029883a 	mov	r20,r2
    6d80:	003ecc06 	br	68b4 <__alt_data_end+0xff0068b4>
    6d84:	00800e44 	movi	r2,57
    6d88:	90809026 	beq	r18,r2,6fcc <_dtoa_r+0x152c>
    6d8c:	92000044 	addi	r8,r18,1
    6d90:	003f1f06 	br	6a10 <__alt_data_end+0xff006a10>
    6d94:	9011883a 	mov	r8,r18
    6d98:	8825883a 	mov	r18,r17
    6d9c:	a023883a 	mov	r17,r20
    6da0:	003e2906 	br	6648 <__alt_data_end+0xff006648>
    6da4:	002b883a 	mov	r21,zero
    6da8:	0023883a 	mov	r17,zero
    6dac:	003f5406 	br	6b00 <__alt_data_end+0xff006b00>
    6db0:	61bfffc4 	addi	r6,r12,-1
    6db4:	300490fa 	slli	r2,r6,3
    6db8:	00c00074 	movhi	r3,1
    6dbc:	18c6d604 	addi	r3,r3,7000
    6dc0:	1885883a 	add	r2,r3,r2
    6dc4:	11000017 	ldw	r4,0(r2)
    6dc8:	11400117 	ldw	r5,4(r2)
    6dcc:	d8800717 	ldw	r2,28(sp)
    6dd0:	880f883a 	mov	r7,r17
    6dd4:	d9801215 	stw	r6,72(sp)
    6dd8:	800d883a 	mov	r6,r16
    6ddc:	db001615 	stw	r12,88(sp)
    6de0:	15c00044 	addi	r23,r2,1
    6de4:	000d64c0 	call	d64c <__muldf3>
    6de8:	d9401017 	ldw	r5,64(sp)
    6dec:	d9000f17 	ldw	r4,60(sp)
    6df0:	d8c01515 	stw	r3,84(sp)
    6df4:	d8801415 	stw	r2,80(sp)
    6df8:	000e6600 	call	e660 <__fixdfsi>
    6dfc:	1009883a 	mov	r4,r2
    6e00:	1021883a 	mov	r16,r2
    6e04:	000e6e00 	call	e6e0 <__floatsidf>
    6e08:	d9000f17 	ldw	r4,60(sp)
    6e0c:	d9401017 	ldw	r5,64(sp)
    6e10:	100d883a 	mov	r6,r2
    6e14:	180f883a 	mov	r7,r3
    6e18:	000dd640 	call	dd64 <__subdf3>
    6e1c:	1829883a 	mov	r20,r3
    6e20:	d8c00717 	ldw	r3,28(sp)
    6e24:	84000c04 	addi	r16,r16,48
    6e28:	1023883a 	mov	r17,r2
    6e2c:	1c000005 	stb	r16,0(r3)
    6e30:	db001617 	ldw	r12,88(sp)
    6e34:	00800044 	movi	r2,1
    6e38:	60802226 	beq	r12,r2,6ec4 <_dtoa_r+0x1424>
    6e3c:	d9c00717 	ldw	r7,28(sp)
    6e40:	8805883a 	mov	r2,r17
    6e44:	b82b883a 	mov	r21,r23
    6e48:	3b19883a 	add	r12,r7,r12
    6e4c:	6023883a 	mov	r17,r12
    6e50:	a007883a 	mov	r3,r20
    6e54:	dc800f15 	stw	r18,60(sp)
    6e58:	000d883a 	mov	r6,zero
    6e5c:	01d00934 	movhi	r7,16420
    6e60:	1009883a 	mov	r4,r2
    6e64:	180b883a 	mov	r5,r3
    6e68:	000d64c0 	call	d64c <__muldf3>
    6e6c:	180b883a 	mov	r5,r3
    6e70:	1009883a 	mov	r4,r2
    6e74:	1829883a 	mov	r20,r3
    6e78:	1025883a 	mov	r18,r2
    6e7c:	000e6600 	call	e660 <__fixdfsi>
    6e80:	1009883a 	mov	r4,r2
    6e84:	1021883a 	mov	r16,r2
    6e88:	000e6e00 	call	e6e0 <__floatsidf>
    6e8c:	100d883a 	mov	r6,r2
    6e90:	180f883a 	mov	r7,r3
    6e94:	9009883a 	mov	r4,r18
    6e98:	a00b883a 	mov	r5,r20
    6e9c:	84000c04 	addi	r16,r16,48
    6ea0:	000dd640 	call	dd64 <__subdf3>
    6ea4:	ad400044 	addi	r21,r21,1
    6ea8:	ac3fffc5 	stb	r16,-1(r21)
    6eac:	ac7fea1e 	bne	r21,r17,6e58 <__alt_data_end+0xff006e58>
    6eb0:	1023883a 	mov	r17,r2
    6eb4:	d8801217 	ldw	r2,72(sp)
    6eb8:	dc800f17 	ldw	r18,60(sp)
    6ebc:	1829883a 	mov	r20,r3
    6ec0:	b8af883a 	add	r23,r23,r2
    6ec4:	d9001417 	ldw	r4,80(sp)
    6ec8:	d9401517 	ldw	r5,84(sp)
    6ecc:	000d883a 	mov	r6,zero
    6ed0:	01cff834 	movhi	r7,16352
    6ed4:	000cb480 	call	cb48 <__adddf3>
    6ed8:	880d883a 	mov	r6,r17
    6edc:	a00f883a 	mov	r7,r20
    6ee0:	1009883a 	mov	r4,r2
    6ee4:	180b883a 	mov	r5,r3
    6ee8:	000d5580 	call	d558 <__ledf2>
    6eec:	10003e0e 	bge	r2,zero,6fe8 <_dtoa_r+0x1548>
    6ef0:	d9001317 	ldw	r4,76(sp)
    6ef4:	bd3fffc3 	ldbu	r20,-1(r23)
    6ef8:	d9000515 	stw	r4,20(sp)
    6efc:	003d3b06 	br	63ec <__alt_data_end+0xff0063ec>
    6f00:	0027883a 	mov	r19,zero
    6f04:	003f1b06 	br	6b74 <__alt_data_end+0xff006b74>
    6f08:	d8800817 	ldw	r2,32(sp)
    6f0c:	11e9c83a 	sub	r20,r2,r7
    6f10:	0005883a 	mov	r2,zero
    6f14:	003d5406 	br	6468 <__alt_data_end+0xff006468>
    6f18:	00800044 	movi	r2,1
    6f1c:	003dc706 	br	663c <__alt_data_end+0xff00663c>
    6f20:	d8c00217 	ldw	r3,8(sp)
    6f24:	00800d84 	movi	r2,54
    6f28:	dd400a17 	ldw	r21,40(sp)
    6f2c:	10c5c83a 	sub	r2,r2,r3
    6f30:	dd000817 	ldw	r20,32(sp)
    6f34:	003d4c06 	br	6468 <__alt_data_end+0xff006468>
    6f38:	dc800f15 	stw	r18,60(sp)
    6f3c:	dcc01015 	stw	r19,64(sp)
    6f40:	04000084 	movi	r16,2
    6f44:	003bed06 	br	5efc <__alt_data_end+0xff005efc>
    6f48:	d9000617 	ldw	r4,24(sp)
    6f4c:	203f0d26 	beq	r4,zero,6b84 <__alt_data_end+0xff006b84>
    6f50:	d9800c17 	ldw	r6,48(sp)
    6f54:	01bcab0e 	bge	zero,r6,6204 <__alt_data_end+0xff006204>
    6f58:	d9401017 	ldw	r5,64(sp)
    6f5c:	d9000f17 	ldw	r4,60(sp)
    6f60:	000d883a 	mov	r6,zero
    6f64:	01d00934 	movhi	r7,16420
    6f68:	000d64c0 	call	d64c <__muldf3>
    6f6c:	81000044 	addi	r4,r16,1
    6f70:	d8800f15 	stw	r2,60(sp)
    6f74:	d8c01015 	stw	r3,64(sp)
    6f78:	000e6e00 	call	e6e0 <__floatsidf>
    6f7c:	d9800f17 	ldw	r6,60(sp)
    6f80:	d9c01017 	ldw	r7,64(sp)
    6f84:	1009883a 	mov	r4,r2
    6f88:	180b883a 	mov	r5,r3
    6f8c:	000d64c0 	call	d64c <__muldf3>
    6f90:	01d00734 	movhi	r7,16412
    6f94:	000d883a 	mov	r6,zero
    6f98:	1009883a 	mov	r4,r2
    6f9c:	180b883a 	mov	r5,r3
    6fa0:	000cb480 	call	cb48 <__adddf3>
    6fa4:	d9c00517 	ldw	r7,20(sp)
    6fa8:	047f3034 	movhi	r17,64704
    6fac:	1021883a 	mov	r16,r2
    6fb0:	39ffffc4 	addi	r7,r7,-1
    6fb4:	d9c01315 	stw	r7,76(sp)
    6fb8:	1c63883a 	add	r17,r3,r17
    6fbc:	db000c17 	ldw	r12,48(sp)
    6fc0:	003bea06 	br	5f6c <__alt_data_end+0xff005f6c>
    6fc4:	dc000915 	stw	r16,36(sp)
    6fc8:	003e0e06 	br	6804 <__alt_data_end+0xff006804>
    6fcc:	01000e44 	movi	r4,57
    6fd0:	8825883a 	mov	r18,r17
    6fd4:	9dc00044 	addi	r23,r19,1
    6fd8:	99000005 	stb	r4,0(r19)
    6fdc:	a023883a 	mov	r17,r20
    6fe0:	dc000915 	stw	r16,36(sp)
    6fe4:	003da406 	br	6678 <__alt_data_end+0xff006678>
    6fe8:	d9801417 	ldw	r6,80(sp)
    6fec:	d9c01517 	ldw	r7,84(sp)
    6ff0:	0009883a 	mov	r4,zero
    6ff4:	014ff834 	movhi	r5,16352
    6ff8:	000dd640 	call	dd64 <__subdf3>
    6ffc:	880d883a 	mov	r6,r17
    7000:	a00f883a 	mov	r7,r20
    7004:	1009883a 	mov	r4,r2
    7008:	180b883a 	mov	r5,r3
    700c:	000d47c0 	call	d47c <__gedf2>
    7010:	00bc7c0e 	bge	zero,r2,6204 <__alt_data_end+0xff006204>
    7014:	01000c04 	movi	r4,48
    7018:	00000106 	br	7020 <_dtoa_r+0x1580>
    701c:	102f883a 	mov	r23,r2
    7020:	b8bfffc4 	addi	r2,r23,-1
    7024:	10c00007 	ldb	r3,0(r2)
    7028:	193ffc26 	beq	r3,r4,701c <__alt_data_end+0xff00701c>
    702c:	d9801317 	ldw	r6,76(sp)
    7030:	d9800515 	stw	r6,20(sp)
    7034:	003c4406 	br	6148 <__alt_data_end+0xff006148>
    7038:	d9801317 	ldw	r6,76(sp)
    703c:	d9800515 	stw	r6,20(sp)
    7040:	003cea06 	br	63ec <__alt_data_end+0xff0063ec>
    7044:	dd800f17 	ldw	r22,60(sp)
    7048:	dcc01017 	ldw	r19,64(sp)
    704c:	dc801217 	ldw	r18,72(sp)
    7050:	003c6c06 	br	6204 <__alt_data_end+0xff006204>
    7054:	903e031e 	bne	r18,zero,6864 <__alt_data_end+0xff006864>
    7058:	003ebb06 	br	6b48 <__alt_data_end+0xff006b48>
    705c:	103e6c1e 	bne	r2,zero,6a10 <__alt_data_end+0xff006a10>
    7060:	4080004c 	andi	r2,r8,1
    7064:	103e6a26 	beq	r2,zero,6a10 <__alt_data_end+0xff006a10>
    7068:	003e6606 	br	6a04 <__alt_data_end+0xff006a04>
    706c:	d8c00317 	ldw	r3,12(sp)
    7070:	00800084 	movi	r2,2
    7074:	10c02916 	blt	r2,r3,711c <_dtoa_r+0x167c>
    7078:	d9000c17 	ldw	r4,48(sp)
    707c:	003e8806 	br	6aa0 <__alt_data_end+0xff006aa0>
    7080:	04000084 	movi	r16,2
    7084:	003b9d06 	br	5efc <__alt_data_end+0xff005efc>
    7088:	d9001317 	ldw	r4,76(sp)
    708c:	d9000515 	stw	r4,20(sp)
    7090:	003cd606 	br	63ec <__alt_data_end+0xff0063ec>
    7094:	d8801317 	ldw	r2,76(sp)
    7098:	d8800515 	stw	r2,20(sp)
    709c:	003c2a06 	br	6148 <__alt_data_end+0xff006148>
    70a0:	d9800317 	ldw	r6,12(sp)
    70a4:	00800084 	movi	r2,2
    70a8:	11801516 	blt	r2,r6,7100 <_dtoa_r+0x1660>
    70ac:	d9c00c17 	ldw	r7,48(sp)
    70b0:	d9c00615 	stw	r7,24(sp)
    70b4:	003df706 	br	6894 <__alt_data_end+0xff006894>
    70b8:	193d3926 	beq	r3,r4,65a0 <__alt_data_end+0xff0065a0>
    70bc:	00c00f04 	movi	r3,60
    70c0:	1885c83a 	sub	r2,r3,r2
    70c4:	003ddf06 	br	6844 <__alt_data_end+0xff006844>
    70c8:	e009883a 	mov	r4,fp
    70cc:	e0001115 	stw	zero,68(fp)
    70d0:	000b883a 	mov	r5,zero
    70d4:	00089300 	call	8930 <_Balloc>
    70d8:	d8800715 	stw	r2,28(sp)
    70dc:	d8c00717 	ldw	r3,28(sp)
    70e0:	00bfffc4 	movi	r2,-1
    70e4:	01000044 	movi	r4,1
    70e8:	d8800c15 	stw	r2,48(sp)
    70ec:	e0c01015 	stw	r3,64(fp)
    70f0:	d9000b15 	stw	r4,44(sp)
    70f4:	d8800615 	stw	r2,24(sp)
    70f8:	d8002215 	stw	zero,136(sp)
    70fc:	003c4106 	br	6204 <__alt_data_end+0xff006204>
    7100:	d8c00c17 	ldw	r3,48(sp)
    7104:	d8c00615 	stw	r3,24(sp)
    7108:	003e7006 	br	6acc <__alt_data_end+0xff006acc>
    710c:	04400044 	movi	r17,1
    7110:	003b2006 	br	5d94 <__alt_data_end+0xff005d94>
    7114:	000b883a 	mov	r5,zero
    7118:	003b3d06 	br	5e10 <__alt_data_end+0xff005e10>
    711c:	d8800c17 	ldw	r2,48(sp)
    7120:	d8800615 	stw	r2,24(sp)
    7124:	003e6906 	br	6acc <__alt_data_end+0xff006acc>

00007128 <__sflush_r>:
    7128:	2880030b 	ldhu	r2,12(r5)
    712c:	defffb04 	addi	sp,sp,-20
    7130:	dcc00315 	stw	r19,12(sp)
    7134:	dc400115 	stw	r17,4(sp)
    7138:	dfc00415 	stw	ra,16(sp)
    713c:	dc800215 	stw	r18,8(sp)
    7140:	dc000015 	stw	r16,0(sp)
    7144:	10c0020c 	andi	r3,r2,8
    7148:	2823883a 	mov	r17,r5
    714c:	2027883a 	mov	r19,r4
    7150:	1800311e 	bne	r3,zero,7218 <__sflush_r+0xf0>
    7154:	28c00117 	ldw	r3,4(r5)
    7158:	10820014 	ori	r2,r2,2048
    715c:	2880030d 	sth	r2,12(r5)
    7160:	00c04b0e 	bge	zero,r3,7290 <__sflush_r+0x168>
    7164:	8a000a17 	ldw	r8,40(r17)
    7168:	40002326 	beq	r8,zero,71f8 <__sflush_r+0xd0>
    716c:	9c000017 	ldw	r16,0(r19)
    7170:	10c4000c 	andi	r3,r2,4096
    7174:	98000015 	stw	zero,0(r19)
    7178:	18004826 	beq	r3,zero,729c <__sflush_r+0x174>
    717c:	89801417 	ldw	r6,80(r17)
    7180:	10c0010c 	andi	r3,r2,4
    7184:	18000626 	beq	r3,zero,71a0 <__sflush_r+0x78>
    7188:	88c00117 	ldw	r3,4(r17)
    718c:	88800c17 	ldw	r2,48(r17)
    7190:	30cdc83a 	sub	r6,r6,r3
    7194:	10000226 	beq	r2,zero,71a0 <__sflush_r+0x78>
    7198:	88800f17 	ldw	r2,60(r17)
    719c:	308dc83a 	sub	r6,r6,r2
    71a0:	89400717 	ldw	r5,28(r17)
    71a4:	000f883a 	mov	r7,zero
    71a8:	9809883a 	mov	r4,r19
    71ac:	403ee83a 	callr	r8
    71b0:	00ffffc4 	movi	r3,-1
    71b4:	10c04426 	beq	r2,r3,72c8 <__sflush_r+0x1a0>
    71b8:	88c0030b 	ldhu	r3,12(r17)
    71bc:	89000417 	ldw	r4,16(r17)
    71c0:	88000115 	stw	zero,4(r17)
    71c4:	197dffcc 	andi	r5,r3,63487
    71c8:	8940030d 	sth	r5,12(r17)
    71cc:	89000015 	stw	r4,0(r17)
    71d0:	18c4000c 	andi	r3,r3,4096
    71d4:	18002c1e 	bne	r3,zero,7288 <__sflush_r+0x160>
    71d8:	89400c17 	ldw	r5,48(r17)
    71dc:	9c000015 	stw	r16,0(r19)
    71e0:	28000526 	beq	r5,zero,71f8 <__sflush_r+0xd0>
    71e4:	88801004 	addi	r2,r17,64
    71e8:	28800226 	beq	r5,r2,71f4 <__sflush_r+0xcc>
    71ec:	9809883a 	mov	r4,r19
    71f0:	00078940 	call	7894 <_free_r>
    71f4:	88000c15 	stw	zero,48(r17)
    71f8:	0005883a 	mov	r2,zero
    71fc:	dfc00417 	ldw	ra,16(sp)
    7200:	dcc00317 	ldw	r19,12(sp)
    7204:	dc800217 	ldw	r18,8(sp)
    7208:	dc400117 	ldw	r17,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00504 	addi	sp,sp,20
    7214:	f800283a 	ret
    7218:	2c800417 	ldw	r18,16(r5)
    721c:	903ff626 	beq	r18,zero,71f8 <__alt_data_end+0xff0071f8>
    7220:	2c000017 	ldw	r16,0(r5)
    7224:	108000cc 	andi	r2,r2,3
    7228:	2c800015 	stw	r18,0(r5)
    722c:	84a1c83a 	sub	r16,r16,r18
    7230:	1000131e 	bne	r2,zero,7280 <__sflush_r+0x158>
    7234:	28800517 	ldw	r2,20(r5)
    7238:	88800215 	stw	r2,8(r17)
    723c:	04000316 	blt	zero,r16,724c <__sflush_r+0x124>
    7240:	003fed06 	br	71f8 <__alt_data_end+0xff0071f8>
    7244:	90a5883a 	add	r18,r18,r2
    7248:	043feb0e 	bge	zero,r16,71f8 <__alt_data_end+0xff0071f8>
    724c:	88800917 	ldw	r2,36(r17)
    7250:	89400717 	ldw	r5,28(r17)
    7254:	800f883a 	mov	r7,r16
    7258:	900d883a 	mov	r6,r18
    725c:	9809883a 	mov	r4,r19
    7260:	103ee83a 	callr	r2
    7264:	80a1c83a 	sub	r16,r16,r2
    7268:	00bff616 	blt	zero,r2,7244 <__alt_data_end+0xff007244>
    726c:	88c0030b 	ldhu	r3,12(r17)
    7270:	00bfffc4 	movi	r2,-1
    7274:	18c01014 	ori	r3,r3,64
    7278:	88c0030d 	sth	r3,12(r17)
    727c:	003fdf06 	br	71fc <__alt_data_end+0xff0071fc>
    7280:	0005883a 	mov	r2,zero
    7284:	003fec06 	br	7238 <__alt_data_end+0xff007238>
    7288:	88801415 	stw	r2,80(r17)
    728c:	003fd206 	br	71d8 <__alt_data_end+0xff0071d8>
    7290:	28c00f17 	ldw	r3,60(r5)
    7294:	00ffb316 	blt	zero,r3,7164 <__alt_data_end+0xff007164>
    7298:	003fd706 	br	71f8 <__alt_data_end+0xff0071f8>
    729c:	89400717 	ldw	r5,28(r17)
    72a0:	000d883a 	mov	r6,zero
    72a4:	01c00044 	movi	r7,1
    72a8:	9809883a 	mov	r4,r19
    72ac:	403ee83a 	callr	r8
    72b0:	100d883a 	mov	r6,r2
    72b4:	00bfffc4 	movi	r2,-1
    72b8:	30801426 	beq	r6,r2,730c <__sflush_r+0x1e4>
    72bc:	8880030b 	ldhu	r2,12(r17)
    72c0:	8a000a17 	ldw	r8,40(r17)
    72c4:	003fae06 	br	7180 <__alt_data_end+0xff007180>
    72c8:	98c00017 	ldw	r3,0(r19)
    72cc:	183fba26 	beq	r3,zero,71b8 <__alt_data_end+0xff0071b8>
    72d0:	01000744 	movi	r4,29
    72d4:	19000626 	beq	r3,r4,72f0 <__sflush_r+0x1c8>
    72d8:	01000584 	movi	r4,22
    72dc:	19000426 	beq	r3,r4,72f0 <__sflush_r+0x1c8>
    72e0:	88c0030b 	ldhu	r3,12(r17)
    72e4:	18c01014 	ori	r3,r3,64
    72e8:	88c0030d 	sth	r3,12(r17)
    72ec:	003fc306 	br	71fc <__alt_data_end+0xff0071fc>
    72f0:	8880030b 	ldhu	r2,12(r17)
    72f4:	88c00417 	ldw	r3,16(r17)
    72f8:	88000115 	stw	zero,4(r17)
    72fc:	10bdffcc 	andi	r2,r2,63487
    7300:	8880030d 	sth	r2,12(r17)
    7304:	88c00015 	stw	r3,0(r17)
    7308:	003fb306 	br	71d8 <__alt_data_end+0xff0071d8>
    730c:	98800017 	ldw	r2,0(r19)
    7310:	103fea26 	beq	r2,zero,72bc <__alt_data_end+0xff0072bc>
    7314:	00c00744 	movi	r3,29
    7318:	10c00226 	beq	r2,r3,7324 <__sflush_r+0x1fc>
    731c:	00c00584 	movi	r3,22
    7320:	10c0031e 	bne	r2,r3,7330 <__sflush_r+0x208>
    7324:	9c000015 	stw	r16,0(r19)
    7328:	0005883a 	mov	r2,zero
    732c:	003fb306 	br	71fc <__alt_data_end+0xff0071fc>
    7330:	88c0030b 	ldhu	r3,12(r17)
    7334:	3005883a 	mov	r2,r6
    7338:	18c01014 	ori	r3,r3,64
    733c:	88c0030d 	sth	r3,12(r17)
    7340:	003fae06 	br	71fc <__alt_data_end+0xff0071fc>

00007344 <_fflush_r>:
    7344:	defffd04 	addi	sp,sp,-12
    7348:	dc000115 	stw	r16,4(sp)
    734c:	dfc00215 	stw	ra,8(sp)
    7350:	2021883a 	mov	r16,r4
    7354:	20000226 	beq	r4,zero,7360 <_fflush_r+0x1c>
    7358:	20800e17 	ldw	r2,56(r4)
    735c:	10000c26 	beq	r2,zero,7390 <_fflush_r+0x4c>
    7360:	2880030f 	ldh	r2,12(r5)
    7364:	1000051e 	bne	r2,zero,737c <_fflush_r+0x38>
    7368:	0005883a 	mov	r2,zero
    736c:	dfc00217 	ldw	ra,8(sp)
    7370:	dc000117 	ldw	r16,4(sp)
    7374:	dec00304 	addi	sp,sp,12
    7378:	f800283a 	ret
    737c:	8009883a 	mov	r4,r16
    7380:	dfc00217 	ldw	ra,8(sp)
    7384:	dc000117 	ldw	r16,4(sp)
    7388:	dec00304 	addi	sp,sp,12
    738c:	00071281 	jmpi	7128 <__sflush_r>
    7390:	d9400015 	stw	r5,0(sp)
    7394:	00077200 	call	7720 <__sinit>
    7398:	d9400017 	ldw	r5,0(sp)
    739c:	003ff006 	br	7360 <__alt_data_end+0xff007360>

000073a0 <fflush>:
    73a0:	20000526 	beq	r4,zero,73b8 <fflush+0x18>
    73a4:	00800074 	movhi	r2,1
    73a8:	108e0904 	addi	r2,r2,14372
    73ac:	200b883a 	mov	r5,r4
    73b0:	11000017 	ldw	r4,0(r2)
    73b4:	00073441 	jmpi	7344 <_fflush_r>
    73b8:	00800074 	movhi	r2,1
    73bc:	108e0804 	addi	r2,r2,14368
    73c0:	11000017 	ldw	r4,0(r2)
    73c4:	01400034 	movhi	r5,0
    73c8:	295cd104 	addi	r5,r5,29508
    73cc:	00081241 	jmpi	8124 <_fwalk_reent>

000073d0 <__fp_unlock>:
    73d0:	0005883a 	mov	r2,zero
    73d4:	f800283a 	ret

000073d8 <_cleanup_r>:
    73d8:	01400074 	movhi	r5,1
    73dc:	296e3704 	addi	r5,r5,-18212
    73e0:	00081241 	jmpi	8124 <_fwalk_reent>

000073e4 <__sinit.part.1>:
    73e4:	defff704 	addi	sp,sp,-36
    73e8:	00c00034 	movhi	r3,0
    73ec:	dfc00815 	stw	ra,32(sp)
    73f0:	ddc00715 	stw	r23,28(sp)
    73f4:	dd800615 	stw	r22,24(sp)
    73f8:	dd400515 	stw	r21,20(sp)
    73fc:	dd000415 	stw	r20,16(sp)
    7400:	dcc00315 	stw	r19,12(sp)
    7404:	dc800215 	stw	r18,8(sp)
    7408:	dc400115 	stw	r17,4(sp)
    740c:	dc000015 	stw	r16,0(sp)
    7410:	18dcf604 	addi	r3,r3,29656
    7414:	24000117 	ldw	r16,4(r4)
    7418:	20c00f15 	stw	r3,60(r4)
    741c:	2080bb04 	addi	r2,r4,748
    7420:	00c000c4 	movi	r3,3
    7424:	20c0b915 	stw	r3,740(r4)
    7428:	2080ba15 	stw	r2,744(r4)
    742c:	2000b815 	stw	zero,736(r4)
    7430:	05c00204 	movi	r23,8
    7434:	00800104 	movi	r2,4
    7438:	2025883a 	mov	r18,r4
    743c:	b80d883a 	mov	r6,r23
    7440:	81001704 	addi	r4,r16,92
    7444:	000b883a 	mov	r5,zero
    7448:	80000015 	stw	zero,0(r16)
    744c:	80000115 	stw	zero,4(r16)
    7450:	80000215 	stw	zero,8(r16)
    7454:	8080030d 	sth	r2,12(r16)
    7458:	80001915 	stw	zero,100(r16)
    745c:	8000038d 	sth	zero,14(r16)
    7460:	80000415 	stw	zero,16(r16)
    7464:	80000515 	stw	zero,20(r16)
    7468:	80000615 	stw	zero,24(r16)
    746c:	00088080 	call	8808 <memset>
    7470:	05800074 	movhi	r22,1
    7474:	94400217 	ldw	r17,8(r18)
    7478:	05400074 	movhi	r21,1
    747c:	05000074 	movhi	r20,1
    7480:	04c00074 	movhi	r19,1
    7484:	b5a7c104 	addi	r22,r22,-24828
    7488:	ad67d804 	addi	r21,r21,-24736
    748c:	a527f704 	addi	r20,r20,-24612
    7490:	9ce80e04 	addi	r19,r19,-24520
    7494:	85800815 	stw	r22,32(r16)
    7498:	85400915 	stw	r21,36(r16)
    749c:	85000a15 	stw	r20,40(r16)
    74a0:	84c00b15 	stw	r19,44(r16)
    74a4:	84000715 	stw	r16,28(r16)
    74a8:	00800284 	movi	r2,10
    74ac:	8880030d 	sth	r2,12(r17)
    74b0:	00800044 	movi	r2,1
    74b4:	b80d883a 	mov	r6,r23
    74b8:	89001704 	addi	r4,r17,92
    74bc:	000b883a 	mov	r5,zero
    74c0:	88000015 	stw	zero,0(r17)
    74c4:	88000115 	stw	zero,4(r17)
    74c8:	88000215 	stw	zero,8(r17)
    74cc:	88001915 	stw	zero,100(r17)
    74d0:	8880038d 	sth	r2,14(r17)
    74d4:	88000415 	stw	zero,16(r17)
    74d8:	88000515 	stw	zero,20(r17)
    74dc:	88000615 	stw	zero,24(r17)
    74e0:	00088080 	call	8808 <memset>
    74e4:	94000317 	ldw	r16,12(r18)
    74e8:	00800484 	movi	r2,18
    74ec:	8c400715 	stw	r17,28(r17)
    74f0:	8d800815 	stw	r22,32(r17)
    74f4:	8d400915 	stw	r21,36(r17)
    74f8:	8d000a15 	stw	r20,40(r17)
    74fc:	8cc00b15 	stw	r19,44(r17)
    7500:	8080030d 	sth	r2,12(r16)
    7504:	00800084 	movi	r2,2
    7508:	80000015 	stw	zero,0(r16)
    750c:	80000115 	stw	zero,4(r16)
    7510:	80000215 	stw	zero,8(r16)
    7514:	80001915 	stw	zero,100(r16)
    7518:	8080038d 	sth	r2,14(r16)
    751c:	80000415 	stw	zero,16(r16)
    7520:	80000515 	stw	zero,20(r16)
    7524:	80000615 	stw	zero,24(r16)
    7528:	b80d883a 	mov	r6,r23
    752c:	000b883a 	mov	r5,zero
    7530:	81001704 	addi	r4,r16,92
    7534:	00088080 	call	8808 <memset>
    7538:	00800044 	movi	r2,1
    753c:	84000715 	stw	r16,28(r16)
    7540:	85800815 	stw	r22,32(r16)
    7544:	85400915 	stw	r21,36(r16)
    7548:	85000a15 	stw	r20,40(r16)
    754c:	84c00b15 	stw	r19,44(r16)
    7550:	90800e15 	stw	r2,56(r18)
    7554:	dfc00817 	ldw	ra,32(sp)
    7558:	ddc00717 	ldw	r23,28(sp)
    755c:	dd800617 	ldw	r22,24(sp)
    7560:	dd400517 	ldw	r21,20(sp)
    7564:	dd000417 	ldw	r20,16(sp)
    7568:	dcc00317 	ldw	r19,12(sp)
    756c:	dc800217 	ldw	r18,8(sp)
    7570:	dc400117 	ldw	r17,4(sp)
    7574:	dc000017 	ldw	r16,0(sp)
    7578:	dec00904 	addi	sp,sp,36
    757c:	f800283a 	ret

00007580 <__fp_lock>:
    7580:	0005883a 	mov	r2,zero
    7584:	f800283a 	ret

00007588 <__sfmoreglue>:
    7588:	defffc04 	addi	sp,sp,-16
    758c:	dc400115 	stw	r17,4(sp)
    7590:	2c7fffc4 	addi	r17,r5,-1
    7594:	8c401a24 	muli	r17,r17,104
    7598:	dc800215 	stw	r18,8(sp)
    759c:	2825883a 	mov	r18,r5
    75a0:	89401d04 	addi	r5,r17,116
    75a4:	dc000015 	stw	r16,0(sp)
    75a8:	dfc00315 	stw	ra,12(sp)
    75ac:	0002a440 	call	2a44 <_malloc_r>
    75b0:	1021883a 	mov	r16,r2
    75b4:	10000726 	beq	r2,zero,75d4 <__sfmoreglue+0x4c>
    75b8:	11000304 	addi	r4,r2,12
    75bc:	10000015 	stw	zero,0(r2)
    75c0:	14800115 	stw	r18,4(r2)
    75c4:	11000215 	stw	r4,8(r2)
    75c8:	89801a04 	addi	r6,r17,104
    75cc:	000b883a 	mov	r5,zero
    75d0:	00088080 	call	8808 <memset>
    75d4:	8005883a 	mov	r2,r16
    75d8:	dfc00317 	ldw	ra,12(sp)
    75dc:	dc800217 	ldw	r18,8(sp)
    75e0:	dc400117 	ldw	r17,4(sp)
    75e4:	dc000017 	ldw	r16,0(sp)
    75e8:	dec00404 	addi	sp,sp,16
    75ec:	f800283a 	ret

000075f0 <__sfp>:
    75f0:	defffb04 	addi	sp,sp,-20
    75f4:	dc000015 	stw	r16,0(sp)
    75f8:	04000074 	movhi	r16,1
    75fc:	840e0804 	addi	r16,r16,14368
    7600:	dcc00315 	stw	r19,12(sp)
    7604:	2027883a 	mov	r19,r4
    7608:	81000017 	ldw	r4,0(r16)
    760c:	dfc00415 	stw	ra,16(sp)
    7610:	dc800215 	stw	r18,8(sp)
    7614:	20800e17 	ldw	r2,56(r4)
    7618:	dc400115 	stw	r17,4(sp)
    761c:	1000021e 	bne	r2,zero,7628 <__sfp+0x38>
    7620:	00073e40 	call	73e4 <__sinit.part.1>
    7624:	81000017 	ldw	r4,0(r16)
    7628:	2480b804 	addi	r18,r4,736
    762c:	047fffc4 	movi	r17,-1
    7630:	91000117 	ldw	r4,4(r18)
    7634:	94000217 	ldw	r16,8(r18)
    7638:	213fffc4 	addi	r4,r4,-1
    763c:	20000a16 	blt	r4,zero,7668 <__sfp+0x78>
    7640:	8080030f 	ldh	r2,12(r16)
    7644:	10000c26 	beq	r2,zero,7678 <__sfp+0x88>
    7648:	80c01d04 	addi	r3,r16,116
    764c:	00000206 	br	7658 <__sfp+0x68>
    7650:	18bfe60f 	ldh	r2,-104(r3)
    7654:	10000826 	beq	r2,zero,7678 <__sfp+0x88>
    7658:	213fffc4 	addi	r4,r4,-1
    765c:	1c3ffd04 	addi	r16,r3,-12
    7660:	18c01a04 	addi	r3,r3,104
    7664:	247ffa1e 	bne	r4,r17,7650 <__alt_data_end+0xff007650>
    7668:	90800017 	ldw	r2,0(r18)
    766c:	10001d26 	beq	r2,zero,76e4 <__sfp+0xf4>
    7670:	1025883a 	mov	r18,r2
    7674:	003fee06 	br	7630 <__alt_data_end+0xff007630>
    7678:	00bfffc4 	movi	r2,-1
    767c:	8080038d 	sth	r2,14(r16)
    7680:	00800044 	movi	r2,1
    7684:	8080030d 	sth	r2,12(r16)
    7688:	80001915 	stw	zero,100(r16)
    768c:	80000015 	stw	zero,0(r16)
    7690:	80000215 	stw	zero,8(r16)
    7694:	80000115 	stw	zero,4(r16)
    7698:	80000415 	stw	zero,16(r16)
    769c:	80000515 	stw	zero,20(r16)
    76a0:	80000615 	stw	zero,24(r16)
    76a4:	01800204 	movi	r6,8
    76a8:	000b883a 	mov	r5,zero
    76ac:	81001704 	addi	r4,r16,92
    76b0:	00088080 	call	8808 <memset>
    76b4:	8005883a 	mov	r2,r16
    76b8:	80000c15 	stw	zero,48(r16)
    76bc:	80000d15 	stw	zero,52(r16)
    76c0:	80001115 	stw	zero,68(r16)
    76c4:	80001215 	stw	zero,72(r16)
    76c8:	dfc00417 	ldw	ra,16(sp)
    76cc:	dcc00317 	ldw	r19,12(sp)
    76d0:	dc800217 	ldw	r18,8(sp)
    76d4:	dc400117 	ldw	r17,4(sp)
    76d8:	dc000017 	ldw	r16,0(sp)
    76dc:	dec00504 	addi	sp,sp,20
    76e0:	f800283a 	ret
    76e4:	01400104 	movi	r5,4
    76e8:	9809883a 	mov	r4,r19
    76ec:	00075880 	call	7588 <__sfmoreglue>
    76f0:	90800015 	stw	r2,0(r18)
    76f4:	103fde1e 	bne	r2,zero,7670 <__alt_data_end+0xff007670>
    76f8:	00800304 	movi	r2,12
    76fc:	98800015 	stw	r2,0(r19)
    7700:	0005883a 	mov	r2,zero
    7704:	003ff006 	br	76c8 <__alt_data_end+0xff0076c8>

00007708 <_cleanup>:
    7708:	00800074 	movhi	r2,1
    770c:	108e0804 	addi	r2,r2,14368
    7710:	11000017 	ldw	r4,0(r2)
    7714:	01400074 	movhi	r5,1
    7718:	296e3704 	addi	r5,r5,-18212
    771c:	00081241 	jmpi	8124 <_fwalk_reent>

00007720 <__sinit>:
    7720:	20800e17 	ldw	r2,56(r4)
    7724:	10000126 	beq	r2,zero,772c <__sinit+0xc>
    7728:	f800283a 	ret
    772c:	00073e41 	jmpi	73e4 <__sinit.part.1>

00007730 <__sfp_lock_acquire>:
    7730:	f800283a 	ret

00007734 <__sfp_lock_release>:
    7734:	f800283a 	ret

00007738 <__sinit_lock_acquire>:
    7738:	f800283a 	ret

0000773c <__sinit_lock_release>:
    773c:	f800283a 	ret

00007740 <__fp_lock_all>:
    7740:	00800074 	movhi	r2,1
    7744:	108e0904 	addi	r2,r2,14372
    7748:	11000017 	ldw	r4,0(r2)
    774c:	01400034 	movhi	r5,0
    7750:	295d6004 	addi	r5,r5,30080
    7754:	00080601 	jmpi	8060 <_fwalk>

00007758 <__fp_unlock_all>:
    7758:	00800074 	movhi	r2,1
    775c:	108e0904 	addi	r2,r2,14372
    7760:	11000017 	ldw	r4,0(r2)
    7764:	01400034 	movhi	r5,0
    7768:	295cf404 	addi	r5,r5,29648
    776c:	00080601 	jmpi	8060 <_fwalk>

00007770 <_malloc_trim_r>:
    7770:	defffb04 	addi	sp,sp,-20
    7774:	dcc00315 	stw	r19,12(sp)
    7778:	04c00074 	movhi	r19,1
    777c:	dc800215 	stw	r18,8(sp)
    7780:	dc400115 	stw	r17,4(sp)
    7784:	dc000015 	stw	r16,0(sp)
    7788:	dfc00415 	stw	ra,16(sp)
    778c:	2821883a 	mov	r16,r5
    7790:	9cc75b04 	addi	r19,r19,7532
    7794:	2025883a 	mov	r18,r4
    7798:	000ed380 	call	ed38 <__malloc_lock>
    779c:	98800217 	ldw	r2,8(r19)
    77a0:	14400117 	ldw	r17,4(r2)
    77a4:	00bfff04 	movi	r2,-4
    77a8:	88a2703a 	and	r17,r17,r2
    77ac:	8c21c83a 	sub	r16,r17,r16
    77b0:	8403fbc4 	addi	r16,r16,4079
    77b4:	8020d33a 	srli	r16,r16,12
    77b8:	0083ffc4 	movi	r2,4095
    77bc:	843fffc4 	addi	r16,r16,-1
    77c0:	8020933a 	slli	r16,r16,12
    77c4:	1400060e 	bge	r2,r16,77e0 <_malloc_trim_r+0x70>
    77c8:	000b883a 	mov	r5,zero
    77cc:	9009883a 	mov	r4,r18
    77d0:	00033900 	call	3390 <_sbrk_r>
    77d4:	98c00217 	ldw	r3,8(r19)
    77d8:	1c47883a 	add	r3,r3,r17
    77dc:	10c00a26 	beq	r2,r3,7808 <_malloc_trim_r+0x98>
    77e0:	9009883a 	mov	r4,r18
    77e4:	000ed5c0 	call	ed5c <__malloc_unlock>
    77e8:	0005883a 	mov	r2,zero
    77ec:	dfc00417 	ldw	ra,16(sp)
    77f0:	dcc00317 	ldw	r19,12(sp)
    77f4:	dc800217 	ldw	r18,8(sp)
    77f8:	dc400117 	ldw	r17,4(sp)
    77fc:	dc000017 	ldw	r16,0(sp)
    7800:	dec00504 	addi	sp,sp,20
    7804:	f800283a 	ret
    7808:	040bc83a 	sub	r5,zero,r16
    780c:	9009883a 	mov	r4,r18
    7810:	00033900 	call	3390 <_sbrk_r>
    7814:	00ffffc4 	movi	r3,-1
    7818:	10c00d26 	beq	r2,r3,7850 <_malloc_trim_r+0xe0>
    781c:	00c00074 	movhi	r3,1
    7820:	18d53304 	addi	r3,r3,21708
    7824:	18800017 	ldw	r2,0(r3)
    7828:	99000217 	ldw	r4,8(r19)
    782c:	8c23c83a 	sub	r17,r17,r16
    7830:	8c400054 	ori	r17,r17,1
    7834:	1421c83a 	sub	r16,r2,r16
    7838:	24400115 	stw	r17,4(r4)
    783c:	9009883a 	mov	r4,r18
    7840:	1c000015 	stw	r16,0(r3)
    7844:	000ed5c0 	call	ed5c <__malloc_unlock>
    7848:	00800044 	movi	r2,1
    784c:	003fe706 	br	77ec <__alt_data_end+0xff0077ec>
    7850:	000b883a 	mov	r5,zero
    7854:	9009883a 	mov	r4,r18
    7858:	00033900 	call	3390 <_sbrk_r>
    785c:	99000217 	ldw	r4,8(r19)
    7860:	014003c4 	movi	r5,15
    7864:	1107c83a 	sub	r3,r2,r4
    7868:	28ffdd0e 	bge	r5,r3,77e0 <__alt_data_end+0xff0077e0>
    786c:	01400074 	movhi	r5,1
    7870:	294e0604 	addi	r5,r5,14360
    7874:	29400017 	ldw	r5,0(r5)
    7878:	18c00054 	ori	r3,r3,1
    787c:	20c00115 	stw	r3,4(r4)
    7880:	00c00074 	movhi	r3,1
    7884:	1145c83a 	sub	r2,r2,r5
    7888:	18d53304 	addi	r3,r3,21708
    788c:	18800015 	stw	r2,0(r3)
    7890:	003fd306 	br	77e0 <__alt_data_end+0xff0077e0>

00007894 <_free_r>:
    7894:	28004126 	beq	r5,zero,799c <_free_r+0x108>
    7898:	defffd04 	addi	sp,sp,-12
    789c:	dc400115 	stw	r17,4(sp)
    78a0:	dc000015 	stw	r16,0(sp)
    78a4:	2023883a 	mov	r17,r4
    78a8:	2821883a 	mov	r16,r5
    78ac:	dfc00215 	stw	ra,8(sp)
    78b0:	000ed380 	call	ed38 <__malloc_lock>
    78b4:	81ffff17 	ldw	r7,-4(r16)
    78b8:	00bfff84 	movi	r2,-2
    78bc:	01000074 	movhi	r4,1
    78c0:	81bffe04 	addi	r6,r16,-8
    78c4:	3884703a 	and	r2,r7,r2
    78c8:	21075b04 	addi	r4,r4,7532
    78cc:	308b883a 	add	r5,r6,r2
    78d0:	2a400117 	ldw	r9,4(r5)
    78d4:	22000217 	ldw	r8,8(r4)
    78d8:	00ffff04 	movi	r3,-4
    78dc:	48c6703a 	and	r3,r9,r3
    78e0:	2a005726 	beq	r5,r8,7a40 <_free_r+0x1ac>
    78e4:	28c00115 	stw	r3,4(r5)
    78e8:	39c0004c 	andi	r7,r7,1
    78ec:	3800091e 	bne	r7,zero,7914 <_free_r+0x80>
    78f0:	823ffe17 	ldw	r8,-8(r16)
    78f4:	22400204 	addi	r9,r4,8
    78f8:	320dc83a 	sub	r6,r6,r8
    78fc:	31c00217 	ldw	r7,8(r6)
    7900:	1205883a 	add	r2,r2,r8
    7904:	3a406526 	beq	r7,r9,7a9c <_free_r+0x208>
    7908:	32000317 	ldw	r8,12(r6)
    790c:	3a000315 	stw	r8,12(r7)
    7910:	41c00215 	stw	r7,8(r8)
    7914:	28cf883a 	add	r7,r5,r3
    7918:	39c00117 	ldw	r7,4(r7)
    791c:	39c0004c 	andi	r7,r7,1
    7920:	38003a26 	beq	r7,zero,7a0c <_free_r+0x178>
    7924:	10c00054 	ori	r3,r2,1
    7928:	30c00115 	stw	r3,4(r6)
    792c:	3087883a 	add	r3,r6,r2
    7930:	18800015 	stw	r2,0(r3)
    7934:	00c07fc4 	movi	r3,511
    7938:	18801936 	bltu	r3,r2,79a0 <_free_r+0x10c>
    793c:	1004d0fa 	srli	r2,r2,3
    7940:	01c00044 	movi	r7,1
    7944:	21400117 	ldw	r5,4(r4)
    7948:	10c00044 	addi	r3,r2,1
    794c:	18c7883a 	add	r3,r3,r3
    7950:	1005d0ba 	srai	r2,r2,2
    7954:	18c7883a 	add	r3,r3,r3
    7958:	18c7883a 	add	r3,r3,r3
    795c:	1907883a 	add	r3,r3,r4
    7960:	3884983a 	sll	r2,r7,r2
    7964:	19c00017 	ldw	r7,0(r3)
    7968:	1a3ffe04 	addi	r8,r3,-8
    796c:	1144b03a 	or	r2,r2,r5
    7970:	32000315 	stw	r8,12(r6)
    7974:	31c00215 	stw	r7,8(r6)
    7978:	20800115 	stw	r2,4(r4)
    797c:	19800015 	stw	r6,0(r3)
    7980:	39800315 	stw	r6,12(r7)
    7984:	8809883a 	mov	r4,r17
    7988:	dfc00217 	ldw	ra,8(sp)
    798c:	dc400117 	ldw	r17,4(sp)
    7990:	dc000017 	ldw	r16,0(sp)
    7994:	dec00304 	addi	sp,sp,12
    7998:	000ed5c1 	jmpi	ed5c <__malloc_unlock>
    799c:	f800283a 	ret
    79a0:	100ad27a 	srli	r5,r2,9
    79a4:	00c00104 	movi	r3,4
    79a8:	19404a36 	bltu	r3,r5,7ad4 <_free_r+0x240>
    79ac:	100ad1ba 	srli	r5,r2,6
    79b0:	28c00e44 	addi	r3,r5,57
    79b4:	18c7883a 	add	r3,r3,r3
    79b8:	29400e04 	addi	r5,r5,56
    79bc:	18c7883a 	add	r3,r3,r3
    79c0:	18c7883a 	add	r3,r3,r3
    79c4:	1909883a 	add	r4,r3,r4
    79c8:	20c00017 	ldw	r3,0(r4)
    79cc:	01c00074 	movhi	r7,1
    79d0:	213ffe04 	addi	r4,r4,-8
    79d4:	39c75b04 	addi	r7,r7,7532
    79d8:	20c04426 	beq	r4,r3,7aec <_free_r+0x258>
    79dc:	01ffff04 	movi	r7,-4
    79e0:	19400117 	ldw	r5,4(r3)
    79e4:	29ca703a 	and	r5,r5,r7
    79e8:	1140022e 	bgeu	r2,r5,79f4 <_free_r+0x160>
    79ec:	18c00217 	ldw	r3,8(r3)
    79f0:	20fffb1e 	bne	r4,r3,79e0 <__alt_data_end+0xff0079e0>
    79f4:	19000317 	ldw	r4,12(r3)
    79f8:	31000315 	stw	r4,12(r6)
    79fc:	30c00215 	stw	r3,8(r6)
    7a00:	21800215 	stw	r6,8(r4)
    7a04:	19800315 	stw	r6,12(r3)
    7a08:	003fde06 	br	7984 <__alt_data_end+0xff007984>
    7a0c:	29c00217 	ldw	r7,8(r5)
    7a10:	10c5883a 	add	r2,r2,r3
    7a14:	00c00074 	movhi	r3,1
    7a18:	18c75d04 	addi	r3,r3,7540
    7a1c:	38c03b26 	beq	r7,r3,7b0c <_free_r+0x278>
    7a20:	2a000317 	ldw	r8,12(r5)
    7a24:	11400054 	ori	r5,r2,1
    7a28:	3087883a 	add	r3,r6,r2
    7a2c:	3a000315 	stw	r8,12(r7)
    7a30:	41c00215 	stw	r7,8(r8)
    7a34:	31400115 	stw	r5,4(r6)
    7a38:	18800015 	stw	r2,0(r3)
    7a3c:	003fbd06 	br	7934 <__alt_data_end+0xff007934>
    7a40:	39c0004c 	andi	r7,r7,1
    7a44:	10c5883a 	add	r2,r2,r3
    7a48:	3800071e 	bne	r7,zero,7a68 <_free_r+0x1d4>
    7a4c:	81fffe17 	ldw	r7,-8(r16)
    7a50:	31cdc83a 	sub	r6,r6,r7
    7a54:	30c00317 	ldw	r3,12(r6)
    7a58:	31400217 	ldw	r5,8(r6)
    7a5c:	11c5883a 	add	r2,r2,r7
    7a60:	28c00315 	stw	r3,12(r5)
    7a64:	19400215 	stw	r5,8(r3)
    7a68:	10c00054 	ori	r3,r2,1
    7a6c:	30c00115 	stw	r3,4(r6)
    7a70:	00c00074 	movhi	r3,1
    7a74:	18ce0704 	addi	r3,r3,14364
    7a78:	18c00017 	ldw	r3,0(r3)
    7a7c:	21800215 	stw	r6,8(r4)
    7a80:	10ffc036 	bltu	r2,r3,7984 <__alt_data_end+0xff007984>
    7a84:	00800074 	movhi	r2,1
    7a88:	10952504 	addi	r2,r2,21652
    7a8c:	11400017 	ldw	r5,0(r2)
    7a90:	8809883a 	mov	r4,r17
    7a94:	00077700 	call	7770 <_malloc_trim_r>
    7a98:	003fba06 	br	7984 <__alt_data_end+0xff007984>
    7a9c:	28c9883a 	add	r4,r5,r3
    7aa0:	21000117 	ldw	r4,4(r4)
    7aa4:	2100004c 	andi	r4,r4,1
    7aa8:	2000391e 	bne	r4,zero,7b90 <_free_r+0x2fc>
    7aac:	29c00217 	ldw	r7,8(r5)
    7ab0:	29000317 	ldw	r4,12(r5)
    7ab4:	1885883a 	add	r2,r3,r2
    7ab8:	10c00054 	ori	r3,r2,1
    7abc:	39000315 	stw	r4,12(r7)
    7ac0:	21c00215 	stw	r7,8(r4)
    7ac4:	30c00115 	stw	r3,4(r6)
    7ac8:	308d883a 	add	r6,r6,r2
    7acc:	30800015 	stw	r2,0(r6)
    7ad0:	003fac06 	br	7984 <__alt_data_end+0xff007984>
    7ad4:	00c00504 	movi	r3,20
    7ad8:	19401536 	bltu	r3,r5,7b30 <_free_r+0x29c>
    7adc:	28c01704 	addi	r3,r5,92
    7ae0:	18c7883a 	add	r3,r3,r3
    7ae4:	294016c4 	addi	r5,r5,91
    7ae8:	003fb406 	br	79bc <__alt_data_end+0xff0079bc>
    7aec:	280bd0ba 	srai	r5,r5,2
    7af0:	00c00044 	movi	r3,1
    7af4:	38800117 	ldw	r2,4(r7)
    7af8:	194a983a 	sll	r5,r3,r5
    7afc:	2007883a 	mov	r3,r4
    7b00:	2884b03a 	or	r2,r5,r2
    7b04:	38800115 	stw	r2,4(r7)
    7b08:	003fbb06 	br	79f8 <__alt_data_end+0xff0079f8>
    7b0c:	21800515 	stw	r6,20(r4)
    7b10:	21800415 	stw	r6,16(r4)
    7b14:	10c00054 	ori	r3,r2,1
    7b18:	31c00315 	stw	r7,12(r6)
    7b1c:	31c00215 	stw	r7,8(r6)
    7b20:	30c00115 	stw	r3,4(r6)
    7b24:	308d883a 	add	r6,r6,r2
    7b28:	30800015 	stw	r2,0(r6)
    7b2c:	003f9506 	br	7984 <__alt_data_end+0xff007984>
    7b30:	00c01504 	movi	r3,84
    7b34:	19400536 	bltu	r3,r5,7b4c <_free_r+0x2b8>
    7b38:	100ad33a 	srli	r5,r2,12
    7b3c:	28c01bc4 	addi	r3,r5,111
    7b40:	18c7883a 	add	r3,r3,r3
    7b44:	29401b84 	addi	r5,r5,110
    7b48:	003f9c06 	br	79bc <__alt_data_end+0xff0079bc>
    7b4c:	00c05504 	movi	r3,340
    7b50:	19400536 	bltu	r3,r5,7b68 <_free_r+0x2d4>
    7b54:	100ad3fa 	srli	r5,r2,15
    7b58:	28c01e04 	addi	r3,r5,120
    7b5c:	18c7883a 	add	r3,r3,r3
    7b60:	29401dc4 	addi	r5,r5,119
    7b64:	003f9506 	br	79bc <__alt_data_end+0xff0079bc>
    7b68:	00c15504 	movi	r3,1364
    7b6c:	19400536 	bltu	r3,r5,7b84 <_free_r+0x2f0>
    7b70:	100ad4ba 	srli	r5,r2,18
    7b74:	28c01f44 	addi	r3,r5,125
    7b78:	18c7883a 	add	r3,r3,r3
    7b7c:	29401f04 	addi	r5,r5,124
    7b80:	003f8e06 	br	79bc <__alt_data_end+0xff0079bc>
    7b84:	00c03f84 	movi	r3,254
    7b88:	01401f84 	movi	r5,126
    7b8c:	003f8b06 	br	79bc <__alt_data_end+0xff0079bc>
    7b90:	10c00054 	ori	r3,r2,1
    7b94:	30c00115 	stw	r3,4(r6)
    7b98:	308d883a 	add	r6,r6,r2
    7b9c:	30800015 	stw	r2,0(r6)
    7ba0:	003f7806 	br	7984 <__alt_data_end+0xff007984>

00007ba4 <__sfvwrite_r>:
    7ba4:	30800217 	ldw	r2,8(r6)
    7ba8:	10006726 	beq	r2,zero,7d48 <__sfvwrite_r+0x1a4>
    7bac:	28c0030b 	ldhu	r3,12(r5)
    7bb0:	defff404 	addi	sp,sp,-48
    7bb4:	dd400715 	stw	r21,28(sp)
    7bb8:	dd000615 	stw	r20,24(sp)
    7bbc:	dc000215 	stw	r16,8(sp)
    7bc0:	dfc00b15 	stw	ra,44(sp)
    7bc4:	df000a15 	stw	fp,40(sp)
    7bc8:	ddc00915 	stw	r23,36(sp)
    7bcc:	dd800815 	stw	r22,32(sp)
    7bd0:	dcc00515 	stw	r19,20(sp)
    7bd4:	dc800415 	stw	r18,16(sp)
    7bd8:	dc400315 	stw	r17,12(sp)
    7bdc:	1880020c 	andi	r2,r3,8
    7be0:	2821883a 	mov	r16,r5
    7be4:	202b883a 	mov	r21,r4
    7be8:	3029883a 	mov	r20,r6
    7bec:	10002726 	beq	r2,zero,7c8c <__sfvwrite_r+0xe8>
    7bf0:	28800417 	ldw	r2,16(r5)
    7bf4:	10002526 	beq	r2,zero,7c8c <__sfvwrite_r+0xe8>
    7bf8:	1880008c 	andi	r2,r3,2
    7bfc:	a4400017 	ldw	r17,0(r20)
    7c00:	10002a26 	beq	r2,zero,7cac <__sfvwrite_r+0x108>
    7c04:	05a00034 	movhi	r22,32768
    7c08:	0027883a 	mov	r19,zero
    7c0c:	0025883a 	mov	r18,zero
    7c10:	b5bf0004 	addi	r22,r22,-1024
    7c14:	980d883a 	mov	r6,r19
    7c18:	a809883a 	mov	r4,r21
    7c1c:	90004626 	beq	r18,zero,7d38 <__sfvwrite_r+0x194>
    7c20:	900f883a 	mov	r7,r18
    7c24:	b480022e 	bgeu	r22,r18,7c30 <__sfvwrite_r+0x8c>
    7c28:	01e00034 	movhi	r7,32768
    7c2c:	39ff0004 	addi	r7,r7,-1024
    7c30:	80800917 	ldw	r2,36(r16)
    7c34:	81400717 	ldw	r5,28(r16)
    7c38:	103ee83a 	callr	r2
    7c3c:	0080570e 	bge	zero,r2,7d9c <__sfvwrite_r+0x1f8>
    7c40:	a0c00217 	ldw	r3,8(r20)
    7c44:	98a7883a 	add	r19,r19,r2
    7c48:	90a5c83a 	sub	r18,r18,r2
    7c4c:	1885c83a 	sub	r2,r3,r2
    7c50:	a0800215 	stw	r2,8(r20)
    7c54:	103fef1e 	bne	r2,zero,7c14 <__alt_data_end+0xff007c14>
    7c58:	0005883a 	mov	r2,zero
    7c5c:	dfc00b17 	ldw	ra,44(sp)
    7c60:	df000a17 	ldw	fp,40(sp)
    7c64:	ddc00917 	ldw	r23,36(sp)
    7c68:	dd800817 	ldw	r22,32(sp)
    7c6c:	dd400717 	ldw	r21,28(sp)
    7c70:	dd000617 	ldw	r20,24(sp)
    7c74:	dcc00517 	ldw	r19,20(sp)
    7c78:	dc800417 	ldw	r18,16(sp)
    7c7c:	dc400317 	ldw	r17,12(sp)
    7c80:	dc000217 	ldw	r16,8(sp)
    7c84:	dec00c04 	addi	sp,sp,48
    7c88:	f800283a 	ret
    7c8c:	800b883a 	mov	r5,r16
    7c90:	a809883a 	mov	r4,r21
    7c94:	000574c0 	call	574c <__swsetup_r>
    7c98:	1000eb1e 	bne	r2,zero,8048 <__sfvwrite_r+0x4a4>
    7c9c:	80c0030b 	ldhu	r3,12(r16)
    7ca0:	a4400017 	ldw	r17,0(r20)
    7ca4:	1880008c 	andi	r2,r3,2
    7ca8:	103fd61e 	bne	r2,zero,7c04 <__alt_data_end+0xff007c04>
    7cac:	1880004c 	andi	r2,r3,1
    7cb0:	10003f1e 	bne	r2,zero,7db0 <__sfvwrite_r+0x20c>
    7cb4:	0039883a 	mov	fp,zero
    7cb8:	0025883a 	mov	r18,zero
    7cbc:	90001a26 	beq	r18,zero,7d28 <__sfvwrite_r+0x184>
    7cc0:	1880800c 	andi	r2,r3,512
    7cc4:	84c00217 	ldw	r19,8(r16)
    7cc8:	10002126 	beq	r2,zero,7d50 <__sfvwrite_r+0x1ac>
    7ccc:	982f883a 	mov	r23,r19
    7cd0:	94c09336 	bltu	r18,r19,7f20 <__sfvwrite_r+0x37c>
    7cd4:	1881200c 	andi	r2,r3,1152
    7cd8:	10009e1e 	bne	r2,zero,7f54 <__sfvwrite_r+0x3b0>
    7cdc:	81000017 	ldw	r4,0(r16)
    7ce0:	b80d883a 	mov	r6,r23
    7ce4:	e00b883a 	mov	r5,fp
    7ce8:	00086ac0 	call	86ac <memmove>
    7cec:	80c00217 	ldw	r3,8(r16)
    7cf0:	81000017 	ldw	r4,0(r16)
    7cf4:	9005883a 	mov	r2,r18
    7cf8:	1ce7c83a 	sub	r19,r3,r19
    7cfc:	25cf883a 	add	r7,r4,r23
    7d00:	84c00215 	stw	r19,8(r16)
    7d04:	81c00015 	stw	r7,0(r16)
    7d08:	a0c00217 	ldw	r3,8(r20)
    7d0c:	e0b9883a 	add	fp,fp,r2
    7d10:	90a5c83a 	sub	r18,r18,r2
    7d14:	18a7c83a 	sub	r19,r3,r2
    7d18:	a4c00215 	stw	r19,8(r20)
    7d1c:	983fce26 	beq	r19,zero,7c58 <__alt_data_end+0xff007c58>
    7d20:	80c0030b 	ldhu	r3,12(r16)
    7d24:	903fe61e 	bne	r18,zero,7cc0 <__alt_data_end+0xff007cc0>
    7d28:	8f000017 	ldw	fp,0(r17)
    7d2c:	8c800117 	ldw	r18,4(r17)
    7d30:	8c400204 	addi	r17,r17,8
    7d34:	003fe106 	br	7cbc <__alt_data_end+0xff007cbc>
    7d38:	8cc00017 	ldw	r19,0(r17)
    7d3c:	8c800117 	ldw	r18,4(r17)
    7d40:	8c400204 	addi	r17,r17,8
    7d44:	003fb306 	br	7c14 <__alt_data_end+0xff007c14>
    7d48:	0005883a 	mov	r2,zero
    7d4c:	f800283a 	ret
    7d50:	81000017 	ldw	r4,0(r16)
    7d54:	80800417 	ldw	r2,16(r16)
    7d58:	11005736 	bltu	r2,r4,7eb8 <__sfvwrite_r+0x314>
    7d5c:	85c00517 	ldw	r23,20(r16)
    7d60:	95c05536 	bltu	r18,r23,7eb8 <__sfvwrite_r+0x314>
    7d64:	00a00034 	movhi	r2,32768
    7d68:	10bfffc4 	addi	r2,r2,-1
    7d6c:	9009883a 	mov	r4,r18
    7d70:	1480012e 	bgeu	r2,r18,7d78 <__sfvwrite_r+0x1d4>
    7d74:	1009883a 	mov	r4,r2
    7d78:	b80b883a 	mov	r5,r23
    7d7c:	0001e740 	call	1e74 <__divsi3>
    7d80:	15cf383a 	mul	r7,r2,r23
    7d84:	81400717 	ldw	r5,28(r16)
    7d88:	80800917 	ldw	r2,36(r16)
    7d8c:	e00d883a 	mov	r6,fp
    7d90:	a809883a 	mov	r4,r21
    7d94:	103ee83a 	callr	r2
    7d98:	00bfdb16 	blt	zero,r2,7d08 <__alt_data_end+0xff007d08>
    7d9c:	8080030b 	ldhu	r2,12(r16)
    7da0:	10801014 	ori	r2,r2,64
    7da4:	8080030d 	sth	r2,12(r16)
    7da8:	00bfffc4 	movi	r2,-1
    7dac:	003fab06 	br	7c5c <__alt_data_end+0xff007c5c>
    7db0:	0027883a 	mov	r19,zero
    7db4:	0011883a 	mov	r8,zero
    7db8:	0039883a 	mov	fp,zero
    7dbc:	0025883a 	mov	r18,zero
    7dc0:	90001f26 	beq	r18,zero,7e40 <__sfvwrite_r+0x29c>
    7dc4:	40005a26 	beq	r8,zero,7f30 <__sfvwrite_r+0x38c>
    7dc8:	982d883a 	mov	r22,r19
    7dcc:	94c0012e 	bgeu	r18,r19,7dd4 <__sfvwrite_r+0x230>
    7dd0:	902d883a 	mov	r22,r18
    7dd4:	81000017 	ldw	r4,0(r16)
    7dd8:	80800417 	ldw	r2,16(r16)
    7ddc:	b02f883a 	mov	r23,r22
    7de0:	81c00517 	ldw	r7,20(r16)
    7de4:	1100032e 	bgeu	r2,r4,7df4 <__sfvwrite_r+0x250>
    7de8:	80c00217 	ldw	r3,8(r16)
    7dec:	38c7883a 	add	r3,r7,r3
    7df0:	1d801816 	blt	r3,r22,7e54 <__sfvwrite_r+0x2b0>
    7df4:	b1c03e16 	blt	r22,r7,7ef0 <__sfvwrite_r+0x34c>
    7df8:	80800917 	ldw	r2,36(r16)
    7dfc:	81400717 	ldw	r5,28(r16)
    7e00:	e00d883a 	mov	r6,fp
    7e04:	da000115 	stw	r8,4(sp)
    7e08:	a809883a 	mov	r4,r21
    7e0c:	103ee83a 	callr	r2
    7e10:	102f883a 	mov	r23,r2
    7e14:	da000117 	ldw	r8,4(sp)
    7e18:	00bfe00e 	bge	zero,r2,7d9c <__alt_data_end+0xff007d9c>
    7e1c:	9de7c83a 	sub	r19,r19,r23
    7e20:	98001f26 	beq	r19,zero,7ea0 <__sfvwrite_r+0x2fc>
    7e24:	a0800217 	ldw	r2,8(r20)
    7e28:	e5f9883a 	add	fp,fp,r23
    7e2c:	95e5c83a 	sub	r18,r18,r23
    7e30:	15efc83a 	sub	r23,r2,r23
    7e34:	a5c00215 	stw	r23,8(r20)
    7e38:	b83f8726 	beq	r23,zero,7c58 <__alt_data_end+0xff007c58>
    7e3c:	903fe11e 	bne	r18,zero,7dc4 <__alt_data_end+0xff007dc4>
    7e40:	8f000017 	ldw	fp,0(r17)
    7e44:	8c800117 	ldw	r18,4(r17)
    7e48:	0011883a 	mov	r8,zero
    7e4c:	8c400204 	addi	r17,r17,8
    7e50:	003fdb06 	br	7dc0 <__alt_data_end+0xff007dc0>
    7e54:	180d883a 	mov	r6,r3
    7e58:	e00b883a 	mov	r5,fp
    7e5c:	da000115 	stw	r8,4(sp)
    7e60:	d8c00015 	stw	r3,0(sp)
    7e64:	00086ac0 	call	86ac <memmove>
    7e68:	d8c00017 	ldw	r3,0(sp)
    7e6c:	80800017 	ldw	r2,0(r16)
    7e70:	800b883a 	mov	r5,r16
    7e74:	a809883a 	mov	r4,r21
    7e78:	10c5883a 	add	r2,r2,r3
    7e7c:	80800015 	stw	r2,0(r16)
    7e80:	d8c00015 	stw	r3,0(sp)
    7e84:	00073440 	call	7344 <_fflush_r>
    7e88:	d8c00017 	ldw	r3,0(sp)
    7e8c:	da000117 	ldw	r8,4(sp)
    7e90:	103fc21e 	bne	r2,zero,7d9c <__alt_data_end+0xff007d9c>
    7e94:	182f883a 	mov	r23,r3
    7e98:	9de7c83a 	sub	r19,r19,r23
    7e9c:	983fe11e 	bne	r19,zero,7e24 <__alt_data_end+0xff007e24>
    7ea0:	800b883a 	mov	r5,r16
    7ea4:	a809883a 	mov	r4,r21
    7ea8:	00073440 	call	7344 <_fflush_r>
    7eac:	103fbb1e 	bne	r2,zero,7d9c <__alt_data_end+0xff007d9c>
    7eb0:	0011883a 	mov	r8,zero
    7eb4:	003fdb06 	br	7e24 <__alt_data_end+0xff007e24>
    7eb8:	94c0012e 	bgeu	r18,r19,7ec0 <__sfvwrite_r+0x31c>
    7ebc:	9027883a 	mov	r19,r18
    7ec0:	980d883a 	mov	r6,r19
    7ec4:	e00b883a 	mov	r5,fp
    7ec8:	00086ac0 	call	86ac <memmove>
    7ecc:	80800217 	ldw	r2,8(r16)
    7ed0:	80c00017 	ldw	r3,0(r16)
    7ed4:	14c5c83a 	sub	r2,r2,r19
    7ed8:	1cc7883a 	add	r3,r3,r19
    7edc:	80800215 	stw	r2,8(r16)
    7ee0:	80c00015 	stw	r3,0(r16)
    7ee4:	10004326 	beq	r2,zero,7ff4 <__sfvwrite_r+0x450>
    7ee8:	9805883a 	mov	r2,r19
    7eec:	003f8606 	br	7d08 <__alt_data_end+0xff007d08>
    7ef0:	b00d883a 	mov	r6,r22
    7ef4:	e00b883a 	mov	r5,fp
    7ef8:	da000115 	stw	r8,4(sp)
    7efc:	00086ac0 	call	86ac <memmove>
    7f00:	80800217 	ldw	r2,8(r16)
    7f04:	80c00017 	ldw	r3,0(r16)
    7f08:	da000117 	ldw	r8,4(sp)
    7f0c:	1585c83a 	sub	r2,r2,r22
    7f10:	1dad883a 	add	r22,r3,r22
    7f14:	80800215 	stw	r2,8(r16)
    7f18:	85800015 	stw	r22,0(r16)
    7f1c:	003fbf06 	br	7e1c <__alt_data_end+0xff007e1c>
    7f20:	81000017 	ldw	r4,0(r16)
    7f24:	9027883a 	mov	r19,r18
    7f28:	902f883a 	mov	r23,r18
    7f2c:	003f6c06 	br	7ce0 <__alt_data_end+0xff007ce0>
    7f30:	900d883a 	mov	r6,r18
    7f34:	01400284 	movi	r5,10
    7f38:	e009883a 	mov	r4,fp
    7f3c:	00084800 	call	8480 <memchr>
    7f40:	10003e26 	beq	r2,zero,803c <__sfvwrite_r+0x498>
    7f44:	10800044 	addi	r2,r2,1
    7f48:	1727c83a 	sub	r19,r2,fp
    7f4c:	02000044 	movi	r8,1
    7f50:	003f9d06 	br	7dc8 <__alt_data_end+0xff007dc8>
    7f54:	80800517 	ldw	r2,20(r16)
    7f58:	81400417 	ldw	r5,16(r16)
    7f5c:	81c00017 	ldw	r7,0(r16)
    7f60:	10a7883a 	add	r19,r2,r2
    7f64:	9885883a 	add	r2,r19,r2
    7f68:	1026d7fa 	srli	r19,r2,31
    7f6c:	396dc83a 	sub	r22,r7,r5
    7f70:	b1000044 	addi	r4,r22,1
    7f74:	9885883a 	add	r2,r19,r2
    7f78:	1027d07a 	srai	r19,r2,1
    7f7c:	2485883a 	add	r2,r4,r18
    7f80:	980d883a 	mov	r6,r19
    7f84:	9880022e 	bgeu	r19,r2,7f90 <__sfvwrite_r+0x3ec>
    7f88:	1027883a 	mov	r19,r2
    7f8c:	100d883a 	mov	r6,r2
    7f90:	18c1000c 	andi	r3,r3,1024
    7f94:	18001c26 	beq	r3,zero,8008 <__sfvwrite_r+0x464>
    7f98:	300b883a 	mov	r5,r6
    7f9c:	a809883a 	mov	r4,r21
    7fa0:	0002a440 	call	2a44 <_malloc_r>
    7fa4:	102f883a 	mov	r23,r2
    7fa8:	10002926 	beq	r2,zero,8050 <__sfvwrite_r+0x4ac>
    7fac:	81400417 	ldw	r5,16(r16)
    7fb0:	b00d883a 	mov	r6,r22
    7fb4:	1009883a 	mov	r4,r2
    7fb8:	00085640 	call	8564 <memcpy>
    7fbc:	8080030b 	ldhu	r2,12(r16)
    7fc0:	00fedfc4 	movi	r3,-1153
    7fc4:	10c4703a 	and	r2,r2,r3
    7fc8:	10802014 	ori	r2,r2,128
    7fcc:	8080030d 	sth	r2,12(r16)
    7fd0:	bd89883a 	add	r4,r23,r22
    7fd4:	9d8fc83a 	sub	r7,r19,r22
    7fd8:	85c00415 	stw	r23,16(r16)
    7fdc:	84c00515 	stw	r19,20(r16)
    7fe0:	81000015 	stw	r4,0(r16)
    7fe4:	9027883a 	mov	r19,r18
    7fe8:	81c00215 	stw	r7,8(r16)
    7fec:	902f883a 	mov	r23,r18
    7ff0:	003f3b06 	br	7ce0 <__alt_data_end+0xff007ce0>
    7ff4:	800b883a 	mov	r5,r16
    7ff8:	a809883a 	mov	r4,r21
    7ffc:	00073440 	call	7344 <_fflush_r>
    8000:	103fb926 	beq	r2,zero,7ee8 <__alt_data_end+0xff007ee8>
    8004:	003f6506 	br	7d9c <__alt_data_end+0xff007d9c>
    8008:	a809883a 	mov	r4,r21
    800c:	000992c0 	call	992c <_realloc_r>
    8010:	102f883a 	mov	r23,r2
    8014:	103fee1e 	bne	r2,zero,7fd0 <__alt_data_end+0xff007fd0>
    8018:	81400417 	ldw	r5,16(r16)
    801c:	a809883a 	mov	r4,r21
    8020:	00078940 	call	7894 <_free_r>
    8024:	8080030b 	ldhu	r2,12(r16)
    8028:	00ffdfc4 	movi	r3,-129
    802c:	1884703a 	and	r2,r3,r2
    8030:	00c00304 	movi	r3,12
    8034:	a8c00015 	stw	r3,0(r21)
    8038:	003f5906 	br	7da0 <__alt_data_end+0xff007da0>
    803c:	94c00044 	addi	r19,r18,1
    8040:	02000044 	movi	r8,1
    8044:	003f6006 	br	7dc8 <__alt_data_end+0xff007dc8>
    8048:	00bfffc4 	movi	r2,-1
    804c:	003f0306 	br	7c5c <__alt_data_end+0xff007c5c>
    8050:	00800304 	movi	r2,12
    8054:	a8800015 	stw	r2,0(r21)
    8058:	8080030b 	ldhu	r2,12(r16)
    805c:	003f5006 	br	7da0 <__alt_data_end+0xff007da0>

00008060 <_fwalk>:
    8060:	defff704 	addi	sp,sp,-36
    8064:	dd000415 	stw	r20,16(sp)
    8068:	dfc00815 	stw	ra,32(sp)
    806c:	ddc00715 	stw	r23,28(sp)
    8070:	dd800615 	stw	r22,24(sp)
    8074:	dd400515 	stw	r21,20(sp)
    8078:	dcc00315 	stw	r19,12(sp)
    807c:	dc800215 	stw	r18,8(sp)
    8080:	dc400115 	stw	r17,4(sp)
    8084:	dc000015 	stw	r16,0(sp)
    8088:	2500b804 	addi	r20,r4,736
    808c:	a0002326 	beq	r20,zero,811c <_fwalk+0xbc>
    8090:	282b883a 	mov	r21,r5
    8094:	002f883a 	mov	r23,zero
    8098:	05800044 	movi	r22,1
    809c:	04ffffc4 	movi	r19,-1
    80a0:	a4400117 	ldw	r17,4(r20)
    80a4:	a4800217 	ldw	r18,8(r20)
    80a8:	8c7fffc4 	addi	r17,r17,-1
    80ac:	88000d16 	blt	r17,zero,80e4 <_fwalk+0x84>
    80b0:	94000304 	addi	r16,r18,12
    80b4:	94800384 	addi	r18,r18,14
    80b8:	8080000b 	ldhu	r2,0(r16)
    80bc:	8c7fffc4 	addi	r17,r17,-1
    80c0:	813ffd04 	addi	r4,r16,-12
    80c4:	b080042e 	bgeu	r22,r2,80d8 <_fwalk+0x78>
    80c8:	9080000f 	ldh	r2,0(r18)
    80cc:	14c00226 	beq	r2,r19,80d8 <_fwalk+0x78>
    80d0:	a83ee83a 	callr	r21
    80d4:	b8aeb03a 	or	r23,r23,r2
    80d8:	84001a04 	addi	r16,r16,104
    80dc:	94801a04 	addi	r18,r18,104
    80e0:	8cfff51e 	bne	r17,r19,80b8 <__alt_data_end+0xff0080b8>
    80e4:	a5000017 	ldw	r20,0(r20)
    80e8:	a03fed1e 	bne	r20,zero,80a0 <__alt_data_end+0xff0080a0>
    80ec:	b805883a 	mov	r2,r23
    80f0:	dfc00817 	ldw	ra,32(sp)
    80f4:	ddc00717 	ldw	r23,28(sp)
    80f8:	dd800617 	ldw	r22,24(sp)
    80fc:	dd400517 	ldw	r21,20(sp)
    8100:	dd000417 	ldw	r20,16(sp)
    8104:	dcc00317 	ldw	r19,12(sp)
    8108:	dc800217 	ldw	r18,8(sp)
    810c:	dc400117 	ldw	r17,4(sp)
    8110:	dc000017 	ldw	r16,0(sp)
    8114:	dec00904 	addi	sp,sp,36
    8118:	f800283a 	ret
    811c:	002f883a 	mov	r23,zero
    8120:	003ff206 	br	80ec <__alt_data_end+0xff0080ec>

00008124 <_fwalk_reent>:
    8124:	defff704 	addi	sp,sp,-36
    8128:	dd000415 	stw	r20,16(sp)
    812c:	dfc00815 	stw	ra,32(sp)
    8130:	ddc00715 	stw	r23,28(sp)
    8134:	dd800615 	stw	r22,24(sp)
    8138:	dd400515 	stw	r21,20(sp)
    813c:	dcc00315 	stw	r19,12(sp)
    8140:	dc800215 	stw	r18,8(sp)
    8144:	dc400115 	stw	r17,4(sp)
    8148:	dc000015 	stw	r16,0(sp)
    814c:	2500b804 	addi	r20,r4,736
    8150:	a0002326 	beq	r20,zero,81e0 <_fwalk_reent+0xbc>
    8154:	282b883a 	mov	r21,r5
    8158:	2027883a 	mov	r19,r4
    815c:	002f883a 	mov	r23,zero
    8160:	05800044 	movi	r22,1
    8164:	04bfffc4 	movi	r18,-1
    8168:	a4400117 	ldw	r17,4(r20)
    816c:	a4000217 	ldw	r16,8(r20)
    8170:	8c7fffc4 	addi	r17,r17,-1
    8174:	88000c16 	blt	r17,zero,81a8 <_fwalk_reent+0x84>
    8178:	84000304 	addi	r16,r16,12
    817c:	8080000b 	ldhu	r2,0(r16)
    8180:	8c7fffc4 	addi	r17,r17,-1
    8184:	817ffd04 	addi	r5,r16,-12
    8188:	b080052e 	bgeu	r22,r2,81a0 <_fwalk_reent+0x7c>
    818c:	8080008f 	ldh	r2,2(r16)
    8190:	9809883a 	mov	r4,r19
    8194:	14800226 	beq	r2,r18,81a0 <_fwalk_reent+0x7c>
    8198:	a83ee83a 	callr	r21
    819c:	b8aeb03a 	or	r23,r23,r2
    81a0:	84001a04 	addi	r16,r16,104
    81a4:	8cbff51e 	bne	r17,r18,817c <__alt_data_end+0xff00817c>
    81a8:	a5000017 	ldw	r20,0(r20)
    81ac:	a03fee1e 	bne	r20,zero,8168 <__alt_data_end+0xff008168>
    81b0:	b805883a 	mov	r2,r23
    81b4:	dfc00817 	ldw	ra,32(sp)
    81b8:	ddc00717 	ldw	r23,28(sp)
    81bc:	dd800617 	ldw	r22,24(sp)
    81c0:	dd400517 	ldw	r21,20(sp)
    81c4:	dd000417 	ldw	r20,16(sp)
    81c8:	dcc00317 	ldw	r19,12(sp)
    81cc:	dc800217 	ldw	r18,8(sp)
    81d0:	dc400117 	ldw	r17,4(sp)
    81d4:	dc000017 	ldw	r16,0(sp)
    81d8:	dec00904 	addi	sp,sp,36
    81dc:	f800283a 	ret
    81e0:	002f883a 	mov	r23,zero
    81e4:	003ff206 	br	81b0 <__alt_data_end+0xff0081b0>

000081e8 <_setlocale_r>:
    81e8:	30001b26 	beq	r6,zero,8258 <_setlocale_r+0x70>
    81ec:	01400074 	movhi	r5,1
    81f0:	defffe04 	addi	sp,sp,-8
    81f4:	2946bc04 	addi	r5,r5,6896
    81f8:	3009883a 	mov	r4,r6
    81fc:	dc000015 	stw	r16,0(sp)
    8200:	dfc00115 	stw	ra,4(sp)
    8204:	3021883a 	mov	r16,r6
    8208:	000a0400 	call	a040 <strcmp>
    820c:	1000061e 	bne	r2,zero,8228 <_setlocale_r+0x40>
    8210:	00800074 	movhi	r2,1
    8214:	1086bb04 	addi	r2,r2,6892
    8218:	dfc00117 	ldw	ra,4(sp)
    821c:	dc000017 	ldw	r16,0(sp)
    8220:	dec00204 	addi	sp,sp,8
    8224:	f800283a 	ret
    8228:	01400074 	movhi	r5,1
    822c:	2946bb04 	addi	r5,r5,6892
    8230:	8009883a 	mov	r4,r16
    8234:	000a0400 	call	a040 <strcmp>
    8238:	103ff526 	beq	r2,zero,8210 <__alt_data_end+0xff008210>
    823c:	01400074 	movhi	r5,1
    8240:	2946a604 	addi	r5,r5,6808
    8244:	8009883a 	mov	r4,r16
    8248:	000a0400 	call	a040 <strcmp>
    824c:	103ff026 	beq	r2,zero,8210 <__alt_data_end+0xff008210>
    8250:	0005883a 	mov	r2,zero
    8254:	003ff006 	br	8218 <__alt_data_end+0xff008218>
    8258:	00800074 	movhi	r2,1
    825c:	1086bb04 	addi	r2,r2,6892
    8260:	f800283a 	ret

00008264 <__locale_charset>:
    8264:	00800074 	movhi	r2,1
    8268:	10896e04 	addi	r2,r2,9656
    826c:	f800283a 	ret

00008270 <__locale_mb_cur_max>:
    8270:	00800074 	movhi	r2,1
    8274:	108e0a04 	addi	r2,r2,14376
    8278:	10800017 	ldw	r2,0(r2)
    827c:	f800283a 	ret

00008280 <__locale_msgcharset>:
    8280:	00800074 	movhi	r2,1
    8284:	10896604 	addi	r2,r2,9624
    8288:	f800283a 	ret

0000828c <__locale_cjk_lang>:
    828c:	0005883a 	mov	r2,zero
    8290:	f800283a 	ret

00008294 <_localeconv_r>:
    8294:	00800074 	movhi	r2,1
    8298:	10897604 	addi	r2,r2,9688
    829c:	f800283a 	ret

000082a0 <setlocale>:
    82a0:	00800074 	movhi	r2,1
    82a4:	108e0904 	addi	r2,r2,14372
    82a8:	280d883a 	mov	r6,r5
    82ac:	200b883a 	mov	r5,r4
    82b0:	11000017 	ldw	r4,0(r2)
    82b4:	00081e81 	jmpi	81e8 <_setlocale_r>

000082b8 <localeconv>:
    82b8:	00800074 	movhi	r2,1
    82bc:	10897604 	addi	r2,r2,9688
    82c0:	f800283a 	ret

000082c4 <__smakebuf_r>:
    82c4:	2880030b 	ldhu	r2,12(r5)
    82c8:	10c0008c 	andi	r3,r2,2
    82cc:	1800411e 	bne	r3,zero,83d4 <__smakebuf_r+0x110>
    82d0:	deffec04 	addi	sp,sp,-80
    82d4:	dc000f15 	stw	r16,60(sp)
    82d8:	2821883a 	mov	r16,r5
    82dc:	2940038f 	ldh	r5,14(r5)
    82e0:	dc401015 	stw	r17,64(sp)
    82e4:	dfc01315 	stw	ra,76(sp)
    82e8:	dcc01215 	stw	r19,72(sp)
    82ec:	dc801115 	stw	r18,68(sp)
    82f0:	2023883a 	mov	r17,r4
    82f4:	28001c16 	blt	r5,zero,8368 <__smakebuf_r+0xa4>
    82f8:	d80d883a 	mov	r6,sp
    82fc:	000bbe80 	call	bbe8 <_fstat_r>
    8300:	10001816 	blt	r2,zero,8364 <__smakebuf_r+0xa0>
    8304:	d8800117 	ldw	r2,4(sp)
    8308:	00e00014 	movui	r3,32768
    830c:	10bc000c 	andi	r2,r2,61440
    8310:	14c80020 	cmpeqi	r19,r2,8192
    8314:	10c03726 	beq	r2,r3,83f4 <__smakebuf_r+0x130>
    8318:	80c0030b 	ldhu	r3,12(r16)
    831c:	18c20014 	ori	r3,r3,2048
    8320:	80c0030d 	sth	r3,12(r16)
    8324:	00c80004 	movi	r3,8192
    8328:	10c0521e 	bne	r2,r3,8474 <__smakebuf_r+0x1b0>
    832c:	8140038f 	ldh	r5,14(r16)
    8330:	8809883a 	mov	r4,r17
    8334:	000bc440 	call	bc44 <_isatty_r>
    8338:	10004c26 	beq	r2,zero,846c <__smakebuf_r+0x1a8>
    833c:	8080030b 	ldhu	r2,12(r16)
    8340:	80c010c4 	addi	r3,r16,67
    8344:	80c00015 	stw	r3,0(r16)
    8348:	10800054 	ori	r2,r2,1
    834c:	8080030d 	sth	r2,12(r16)
    8350:	00800044 	movi	r2,1
    8354:	80c00415 	stw	r3,16(r16)
    8358:	80800515 	stw	r2,20(r16)
    835c:	04810004 	movi	r18,1024
    8360:	00000706 	br	8380 <__smakebuf_r+0xbc>
    8364:	8080030b 	ldhu	r2,12(r16)
    8368:	10c0200c 	andi	r3,r2,128
    836c:	18001f1e 	bne	r3,zero,83ec <__smakebuf_r+0x128>
    8370:	04810004 	movi	r18,1024
    8374:	10820014 	ori	r2,r2,2048
    8378:	8080030d 	sth	r2,12(r16)
    837c:	0027883a 	mov	r19,zero
    8380:	900b883a 	mov	r5,r18
    8384:	8809883a 	mov	r4,r17
    8388:	0002a440 	call	2a44 <_malloc_r>
    838c:	10002c26 	beq	r2,zero,8440 <__smakebuf_r+0x17c>
    8390:	80c0030b 	ldhu	r3,12(r16)
    8394:	01000034 	movhi	r4,0
    8398:	211cf604 	addi	r4,r4,29656
    839c:	89000f15 	stw	r4,60(r17)
    83a0:	18c02014 	ori	r3,r3,128
    83a4:	80c0030d 	sth	r3,12(r16)
    83a8:	80800015 	stw	r2,0(r16)
    83ac:	80800415 	stw	r2,16(r16)
    83b0:	84800515 	stw	r18,20(r16)
    83b4:	98001a1e 	bne	r19,zero,8420 <__smakebuf_r+0x15c>
    83b8:	dfc01317 	ldw	ra,76(sp)
    83bc:	dcc01217 	ldw	r19,72(sp)
    83c0:	dc801117 	ldw	r18,68(sp)
    83c4:	dc401017 	ldw	r17,64(sp)
    83c8:	dc000f17 	ldw	r16,60(sp)
    83cc:	dec01404 	addi	sp,sp,80
    83d0:	f800283a 	ret
    83d4:	288010c4 	addi	r2,r5,67
    83d8:	28800015 	stw	r2,0(r5)
    83dc:	28800415 	stw	r2,16(r5)
    83e0:	00800044 	movi	r2,1
    83e4:	28800515 	stw	r2,20(r5)
    83e8:	f800283a 	ret
    83ec:	04801004 	movi	r18,64
    83f0:	003fe006 	br	8374 <__alt_data_end+0xff008374>
    83f4:	81000a17 	ldw	r4,40(r16)
    83f8:	00c00074 	movhi	r3,1
    83fc:	18e7f704 	addi	r3,r3,-24612
    8400:	20ffc51e 	bne	r4,r3,8318 <__alt_data_end+0xff008318>
    8404:	8080030b 	ldhu	r2,12(r16)
    8408:	04810004 	movi	r18,1024
    840c:	84801315 	stw	r18,76(r16)
    8410:	1484b03a 	or	r2,r2,r18
    8414:	8080030d 	sth	r2,12(r16)
    8418:	0027883a 	mov	r19,zero
    841c:	003fd806 	br	8380 <__alt_data_end+0xff008380>
    8420:	8140038f 	ldh	r5,14(r16)
    8424:	8809883a 	mov	r4,r17
    8428:	000bc440 	call	bc44 <_isatty_r>
    842c:	103fe226 	beq	r2,zero,83b8 <__alt_data_end+0xff0083b8>
    8430:	8080030b 	ldhu	r2,12(r16)
    8434:	10800054 	ori	r2,r2,1
    8438:	8080030d 	sth	r2,12(r16)
    843c:	003fde06 	br	83b8 <__alt_data_end+0xff0083b8>
    8440:	8080030b 	ldhu	r2,12(r16)
    8444:	10c0800c 	andi	r3,r2,512
    8448:	183fdb1e 	bne	r3,zero,83b8 <__alt_data_end+0xff0083b8>
    844c:	10800094 	ori	r2,r2,2
    8450:	80c010c4 	addi	r3,r16,67
    8454:	8080030d 	sth	r2,12(r16)
    8458:	00800044 	movi	r2,1
    845c:	80c00015 	stw	r3,0(r16)
    8460:	80c00415 	stw	r3,16(r16)
    8464:	80800515 	stw	r2,20(r16)
    8468:	003fd306 	br	83b8 <__alt_data_end+0xff0083b8>
    846c:	04810004 	movi	r18,1024
    8470:	003fc306 	br	8380 <__alt_data_end+0xff008380>
    8474:	0027883a 	mov	r19,zero
    8478:	04810004 	movi	r18,1024
    847c:	003fc006 	br	8380 <__alt_data_end+0xff008380>

00008480 <memchr>:
    8480:	208000cc 	andi	r2,r4,3
    8484:	280f883a 	mov	r7,r5
    8488:	10003426 	beq	r2,zero,855c <memchr+0xdc>
    848c:	30bfffc4 	addi	r2,r6,-1
    8490:	30001a26 	beq	r6,zero,84fc <memchr+0x7c>
    8494:	20c00003 	ldbu	r3,0(r4)
    8498:	29803fcc 	andi	r6,r5,255
    849c:	30c0051e 	bne	r6,r3,84b4 <memchr+0x34>
    84a0:	00001806 	br	8504 <memchr+0x84>
    84a4:	10001526 	beq	r2,zero,84fc <memchr+0x7c>
    84a8:	20c00003 	ldbu	r3,0(r4)
    84ac:	10bfffc4 	addi	r2,r2,-1
    84b0:	30c01426 	beq	r6,r3,8504 <memchr+0x84>
    84b4:	21000044 	addi	r4,r4,1
    84b8:	20c000cc 	andi	r3,r4,3
    84bc:	183ff91e 	bne	r3,zero,84a4 <__alt_data_end+0xff0084a4>
    84c0:	020000c4 	movi	r8,3
    84c4:	40801136 	bltu	r8,r2,850c <memchr+0x8c>
    84c8:	10000c26 	beq	r2,zero,84fc <memchr+0x7c>
    84cc:	20c00003 	ldbu	r3,0(r4)
    84d0:	29403fcc 	andi	r5,r5,255
    84d4:	28c00b26 	beq	r5,r3,8504 <memchr+0x84>
    84d8:	20c00044 	addi	r3,r4,1
    84dc:	39803fcc 	andi	r6,r7,255
    84e0:	2089883a 	add	r4,r4,r2
    84e4:	00000306 	br	84f4 <memchr+0x74>
    84e8:	18c00044 	addi	r3,r3,1
    84ec:	197fffc3 	ldbu	r5,-1(r3)
    84f0:	31400526 	beq	r6,r5,8508 <memchr+0x88>
    84f4:	1805883a 	mov	r2,r3
    84f8:	20fffb1e 	bne	r4,r3,84e8 <__alt_data_end+0xff0084e8>
    84fc:	0005883a 	mov	r2,zero
    8500:	f800283a 	ret
    8504:	2005883a 	mov	r2,r4
    8508:	f800283a 	ret
    850c:	28c03fcc 	andi	r3,r5,255
    8510:	1812923a 	slli	r9,r3,8
    8514:	02ffbff4 	movhi	r11,65279
    8518:	02a02074 	movhi	r10,32897
    851c:	48d2b03a 	or	r9,r9,r3
    8520:	4806943a 	slli	r3,r9,16
    8524:	5affbfc4 	addi	r11,r11,-257
    8528:	52a02004 	addi	r10,r10,-32640
    852c:	48d2b03a 	or	r9,r9,r3
    8530:	20c00017 	ldw	r3,0(r4)
    8534:	48c6f03a 	xor	r3,r9,r3
    8538:	1acd883a 	add	r6,r3,r11
    853c:	00c6303a 	nor	r3,zero,r3
    8540:	30c6703a 	and	r3,r6,r3
    8544:	1a86703a 	and	r3,r3,r10
    8548:	183fe01e 	bne	r3,zero,84cc <__alt_data_end+0xff0084cc>
    854c:	10bfff04 	addi	r2,r2,-4
    8550:	21000104 	addi	r4,r4,4
    8554:	40bff636 	bltu	r8,r2,8530 <__alt_data_end+0xff008530>
    8558:	003fdb06 	br	84c8 <__alt_data_end+0xff0084c8>
    855c:	3005883a 	mov	r2,r6
    8560:	003fd706 	br	84c0 <__alt_data_end+0xff0084c0>

00008564 <memcpy>:
    8564:	defffd04 	addi	sp,sp,-12
    8568:	dfc00215 	stw	ra,8(sp)
    856c:	dc400115 	stw	r17,4(sp)
    8570:	dc000015 	stw	r16,0(sp)
    8574:	00c003c4 	movi	r3,15
    8578:	2005883a 	mov	r2,r4
    857c:	1980452e 	bgeu	r3,r6,8694 <memcpy+0x130>
    8580:	2906b03a 	or	r3,r5,r4
    8584:	18c000cc 	andi	r3,r3,3
    8588:	1800441e 	bne	r3,zero,869c <memcpy+0x138>
    858c:	347ffc04 	addi	r17,r6,-16
    8590:	8822d13a 	srli	r17,r17,4
    8594:	28c00104 	addi	r3,r5,4
    8598:	23400104 	addi	r13,r4,4
    859c:	8820913a 	slli	r16,r17,4
    85a0:	2b000204 	addi	r12,r5,8
    85a4:	22c00204 	addi	r11,r4,8
    85a8:	84000504 	addi	r16,r16,20
    85ac:	2a800304 	addi	r10,r5,12
    85b0:	22400304 	addi	r9,r4,12
    85b4:	2c21883a 	add	r16,r5,r16
    85b8:	2811883a 	mov	r8,r5
    85bc:	200f883a 	mov	r7,r4
    85c0:	41000017 	ldw	r4,0(r8)
    85c4:	1fc00017 	ldw	ra,0(r3)
    85c8:	63c00017 	ldw	r15,0(r12)
    85cc:	39000015 	stw	r4,0(r7)
    85d0:	53800017 	ldw	r14,0(r10)
    85d4:	6fc00015 	stw	ra,0(r13)
    85d8:	5bc00015 	stw	r15,0(r11)
    85dc:	4b800015 	stw	r14,0(r9)
    85e0:	18c00404 	addi	r3,r3,16
    85e4:	39c00404 	addi	r7,r7,16
    85e8:	42000404 	addi	r8,r8,16
    85ec:	6b400404 	addi	r13,r13,16
    85f0:	63000404 	addi	r12,r12,16
    85f4:	5ac00404 	addi	r11,r11,16
    85f8:	52800404 	addi	r10,r10,16
    85fc:	4a400404 	addi	r9,r9,16
    8600:	1c3fef1e 	bne	r3,r16,85c0 <__alt_data_end+0xff0085c0>
    8604:	89c00044 	addi	r7,r17,1
    8608:	380e913a 	slli	r7,r7,4
    860c:	310003cc 	andi	r4,r6,15
    8610:	02c000c4 	movi	r11,3
    8614:	11c7883a 	add	r3,r2,r7
    8618:	29cb883a 	add	r5,r5,r7
    861c:	5900212e 	bgeu	r11,r4,86a4 <memcpy+0x140>
    8620:	1813883a 	mov	r9,r3
    8624:	2811883a 	mov	r8,r5
    8628:	200f883a 	mov	r7,r4
    862c:	42800017 	ldw	r10,0(r8)
    8630:	4a400104 	addi	r9,r9,4
    8634:	39ffff04 	addi	r7,r7,-4
    8638:	4abfff15 	stw	r10,-4(r9)
    863c:	42000104 	addi	r8,r8,4
    8640:	59fffa36 	bltu	r11,r7,862c <__alt_data_end+0xff00862c>
    8644:	213fff04 	addi	r4,r4,-4
    8648:	2008d0ba 	srli	r4,r4,2
    864c:	318000cc 	andi	r6,r6,3
    8650:	21000044 	addi	r4,r4,1
    8654:	2109883a 	add	r4,r4,r4
    8658:	2109883a 	add	r4,r4,r4
    865c:	1907883a 	add	r3,r3,r4
    8660:	290b883a 	add	r5,r5,r4
    8664:	30000626 	beq	r6,zero,8680 <memcpy+0x11c>
    8668:	198d883a 	add	r6,r3,r6
    866c:	29c00003 	ldbu	r7,0(r5)
    8670:	18c00044 	addi	r3,r3,1
    8674:	29400044 	addi	r5,r5,1
    8678:	19ffffc5 	stb	r7,-1(r3)
    867c:	19bffb1e 	bne	r3,r6,866c <__alt_data_end+0xff00866c>
    8680:	dfc00217 	ldw	ra,8(sp)
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	dc000017 	ldw	r16,0(sp)
    868c:	dec00304 	addi	sp,sp,12
    8690:	f800283a 	ret
    8694:	2007883a 	mov	r3,r4
    8698:	003ff206 	br	8664 <__alt_data_end+0xff008664>
    869c:	2007883a 	mov	r3,r4
    86a0:	003ff106 	br	8668 <__alt_data_end+0xff008668>
    86a4:	200d883a 	mov	r6,r4
    86a8:	003fee06 	br	8664 <__alt_data_end+0xff008664>

000086ac <memmove>:
    86ac:	2005883a 	mov	r2,r4
    86b0:	29000b2e 	bgeu	r5,r4,86e0 <memmove+0x34>
    86b4:	298f883a 	add	r7,r5,r6
    86b8:	21c0092e 	bgeu	r4,r7,86e0 <memmove+0x34>
    86bc:	2187883a 	add	r3,r4,r6
    86c0:	198bc83a 	sub	r5,r3,r6
    86c4:	30004826 	beq	r6,zero,87e8 <memmove+0x13c>
    86c8:	39ffffc4 	addi	r7,r7,-1
    86cc:	39000003 	ldbu	r4,0(r7)
    86d0:	18ffffc4 	addi	r3,r3,-1
    86d4:	19000005 	stb	r4,0(r3)
    86d8:	28fffb1e 	bne	r5,r3,86c8 <__alt_data_end+0xff0086c8>
    86dc:	f800283a 	ret
    86e0:	00c003c4 	movi	r3,15
    86e4:	1980412e 	bgeu	r3,r6,87ec <memmove+0x140>
    86e8:	2886b03a 	or	r3,r5,r2
    86ec:	18c000cc 	andi	r3,r3,3
    86f0:	1800401e 	bne	r3,zero,87f4 <memmove+0x148>
    86f4:	33fffc04 	addi	r15,r6,-16
    86f8:	781ed13a 	srli	r15,r15,4
    86fc:	28c00104 	addi	r3,r5,4
    8700:	13400104 	addi	r13,r2,4
    8704:	781c913a 	slli	r14,r15,4
    8708:	2b000204 	addi	r12,r5,8
    870c:	12c00204 	addi	r11,r2,8
    8710:	73800504 	addi	r14,r14,20
    8714:	2a800304 	addi	r10,r5,12
    8718:	12400304 	addi	r9,r2,12
    871c:	2b9d883a 	add	r14,r5,r14
    8720:	2811883a 	mov	r8,r5
    8724:	100f883a 	mov	r7,r2
    8728:	41000017 	ldw	r4,0(r8)
    872c:	39c00404 	addi	r7,r7,16
    8730:	18c00404 	addi	r3,r3,16
    8734:	393ffc15 	stw	r4,-16(r7)
    8738:	193ffc17 	ldw	r4,-16(r3)
    873c:	6b400404 	addi	r13,r13,16
    8740:	5ac00404 	addi	r11,r11,16
    8744:	693ffc15 	stw	r4,-16(r13)
    8748:	61000017 	ldw	r4,0(r12)
    874c:	4a400404 	addi	r9,r9,16
    8750:	42000404 	addi	r8,r8,16
    8754:	593ffc15 	stw	r4,-16(r11)
    8758:	51000017 	ldw	r4,0(r10)
    875c:	63000404 	addi	r12,r12,16
    8760:	52800404 	addi	r10,r10,16
    8764:	493ffc15 	stw	r4,-16(r9)
    8768:	1bbfef1e 	bne	r3,r14,8728 <__alt_data_end+0xff008728>
    876c:	79000044 	addi	r4,r15,1
    8770:	2008913a 	slli	r4,r4,4
    8774:	328003cc 	andi	r10,r6,15
    8778:	02c000c4 	movi	r11,3
    877c:	1107883a 	add	r3,r2,r4
    8780:	290b883a 	add	r5,r5,r4
    8784:	5a801e2e 	bgeu	r11,r10,8800 <memmove+0x154>
    8788:	1813883a 	mov	r9,r3
    878c:	2811883a 	mov	r8,r5
    8790:	500f883a 	mov	r7,r10
    8794:	41000017 	ldw	r4,0(r8)
    8798:	4a400104 	addi	r9,r9,4
    879c:	39ffff04 	addi	r7,r7,-4
    87a0:	493fff15 	stw	r4,-4(r9)
    87a4:	42000104 	addi	r8,r8,4
    87a8:	59fffa36 	bltu	r11,r7,8794 <__alt_data_end+0xff008794>
    87ac:	513fff04 	addi	r4,r10,-4
    87b0:	2008d0ba 	srli	r4,r4,2
    87b4:	318000cc 	andi	r6,r6,3
    87b8:	21000044 	addi	r4,r4,1
    87bc:	2109883a 	add	r4,r4,r4
    87c0:	2109883a 	add	r4,r4,r4
    87c4:	1907883a 	add	r3,r3,r4
    87c8:	290b883a 	add	r5,r5,r4
    87cc:	30000b26 	beq	r6,zero,87fc <memmove+0x150>
    87d0:	198d883a 	add	r6,r3,r6
    87d4:	29c00003 	ldbu	r7,0(r5)
    87d8:	18c00044 	addi	r3,r3,1
    87dc:	29400044 	addi	r5,r5,1
    87e0:	19ffffc5 	stb	r7,-1(r3)
    87e4:	19bffb1e 	bne	r3,r6,87d4 <__alt_data_end+0xff0087d4>
    87e8:	f800283a 	ret
    87ec:	1007883a 	mov	r3,r2
    87f0:	003ff606 	br	87cc <__alt_data_end+0xff0087cc>
    87f4:	1007883a 	mov	r3,r2
    87f8:	003ff506 	br	87d0 <__alt_data_end+0xff0087d0>
    87fc:	f800283a 	ret
    8800:	500d883a 	mov	r6,r10
    8804:	003ff106 	br	87cc <__alt_data_end+0xff0087cc>

00008808 <memset>:
    8808:	20c000cc 	andi	r3,r4,3
    880c:	2005883a 	mov	r2,r4
    8810:	18004426 	beq	r3,zero,8924 <memset+0x11c>
    8814:	31ffffc4 	addi	r7,r6,-1
    8818:	30004026 	beq	r6,zero,891c <memset+0x114>
    881c:	2813883a 	mov	r9,r5
    8820:	200d883a 	mov	r6,r4
    8824:	2007883a 	mov	r3,r4
    8828:	00000406 	br	883c <memset+0x34>
    882c:	3a3fffc4 	addi	r8,r7,-1
    8830:	31800044 	addi	r6,r6,1
    8834:	38003926 	beq	r7,zero,891c <memset+0x114>
    8838:	400f883a 	mov	r7,r8
    883c:	18c00044 	addi	r3,r3,1
    8840:	32400005 	stb	r9,0(r6)
    8844:	1a0000cc 	andi	r8,r3,3
    8848:	403ff81e 	bne	r8,zero,882c <__alt_data_end+0xff00882c>
    884c:	010000c4 	movi	r4,3
    8850:	21c02d2e 	bgeu	r4,r7,8908 <memset+0x100>
    8854:	29003fcc 	andi	r4,r5,255
    8858:	200c923a 	slli	r6,r4,8
    885c:	3108b03a 	or	r4,r6,r4
    8860:	200c943a 	slli	r6,r4,16
    8864:	218cb03a 	or	r6,r4,r6
    8868:	010003c4 	movi	r4,15
    886c:	21c0182e 	bgeu	r4,r7,88d0 <memset+0xc8>
    8870:	3b3ffc04 	addi	r12,r7,-16
    8874:	6018d13a 	srli	r12,r12,4
    8878:	1a000104 	addi	r8,r3,4
    887c:	1ac00204 	addi	r11,r3,8
    8880:	6008913a 	slli	r4,r12,4
    8884:	1a800304 	addi	r10,r3,12
    8888:	1813883a 	mov	r9,r3
    888c:	21000504 	addi	r4,r4,20
    8890:	1909883a 	add	r4,r3,r4
    8894:	49800015 	stw	r6,0(r9)
    8898:	41800015 	stw	r6,0(r8)
    889c:	59800015 	stw	r6,0(r11)
    88a0:	51800015 	stw	r6,0(r10)
    88a4:	42000404 	addi	r8,r8,16
    88a8:	4a400404 	addi	r9,r9,16
    88ac:	5ac00404 	addi	r11,r11,16
    88b0:	52800404 	addi	r10,r10,16
    88b4:	413ff71e 	bne	r8,r4,8894 <__alt_data_end+0xff008894>
    88b8:	63000044 	addi	r12,r12,1
    88bc:	6018913a 	slli	r12,r12,4
    88c0:	39c003cc 	andi	r7,r7,15
    88c4:	010000c4 	movi	r4,3
    88c8:	1b07883a 	add	r3,r3,r12
    88cc:	21c00e2e 	bgeu	r4,r7,8908 <memset+0x100>
    88d0:	1813883a 	mov	r9,r3
    88d4:	3811883a 	mov	r8,r7
    88d8:	010000c4 	movi	r4,3
    88dc:	49800015 	stw	r6,0(r9)
    88e0:	423fff04 	addi	r8,r8,-4
    88e4:	4a400104 	addi	r9,r9,4
    88e8:	223ffc36 	bltu	r4,r8,88dc <__alt_data_end+0xff0088dc>
    88ec:	393fff04 	addi	r4,r7,-4
    88f0:	2008d0ba 	srli	r4,r4,2
    88f4:	39c000cc 	andi	r7,r7,3
    88f8:	21000044 	addi	r4,r4,1
    88fc:	2109883a 	add	r4,r4,r4
    8900:	2109883a 	add	r4,r4,r4
    8904:	1907883a 	add	r3,r3,r4
    8908:	38000526 	beq	r7,zero,8920 <memset+0x118>
    890c:	19cf883a 	add	r7,r3,r7
    8910:	19400005 	stb	r5,0(r3)
    8914:	18c00044 	addi	r3,r3,1
    8918:	38fffd1e 	bne	r7,r3,8910 <__alt_data_end+0xff008910>
    891c:	f800283a 	ret
    8920:	f800283a 	ret
    8924:	2007883a 	mov	r3,r4
    8928:	300f883a 	mov	r7,r6
    892c:	003fc706 	br	884c <__alt_data_end+0xff00884c>

00008930 <_Balloc>:
    8930:	20801317 	ldw	r2,76(r4)
    8934:	defffc04 	addi	sp,sp,-16
    8938:	dc400115 	stw	r17,4(sp)
    893c:	dc000015 	stw	r16,0(sp)
    8940:	dfc00315 	stw	ra,12(sp)
    8944:	dc800215 	stw	r18,8(sp)
    8948:	2023883a 	mov	r17,r4
    894c:	2821883a 	mov	r16,r5
    8950:	10000f26 	beq	r2,zero,8990 <_Balloc+0x60>
    8954:	8407883a 	add	r3,r16,r16
    8958:	18c7883a 	add	r3,r3,r3
    895c:	10c7883a 	add	r3,r2,r3
    8960:	18800017 	ldw	r2,0(r3)
    8964:	10001126 	beq	r2,zero,89ac <_Balloc+0x7c>
    8968:	11000017 	ldw	r4,0(r2)
    896c:	19000015 	stw	r4,0(r3)
    8970:	10000415 	stw	zero,16(r2)
    8974:	10000315 	stw	zero,12(r2)
    8978:	dfc00317 	ldw	ra,12(sp)
    897c:	dc800217 	ldw	r18,8(sp)
    8980:	dc400117 	ldw	r17,4(sp)
    8984:	dc000017 	ldw	r16,0(sp)
    8988:	dec00404 	addi	sp,sp,16
    898c:	f800283a 	ret
    8990:	01800844 	movi	r6,33
    8994:	01400104 	movi	r5,4
    8998:	000b8180 	call	b818 <_calloc_r>
    899c:	88801315 	stw	r2,76(r17)
    89a0:	103fec1e 	bne	r2,zero,8954 <__alt_data_end+0xff008954>
    89a4:	0005883a 	mov	r2,zero
    89a8:	003ff306 	br	8978 <__alt_data_end+0xff008978>
    89ac:	01400044 	movi	r5,1
    89b0:	2c24983a 	sll	r18,r5,r16
    89b4:	8809883a 	mov	r4,r17
    89b8:	91800144 	addi	r6,r18,5
    89bc:	318d883a 	add	r6,r6,r6
    89c0:	318d883a 	add	r6,r6,r6
    89c4:	000b8180 	call	b818 <_calloc_r>
    89c8:	103ff626 	beq	r2,zero,89a4 <__alt_data_end+0xff0089a4>
    89cc:	14000115 	stw	r16,4(r2)
    89d0:	14800215 	stw	r18,8(r2)
    89d4:	003fe606 	br	8970 <__alt_data_end+0xff008970>

000089d8 <_Bfree>:
    89d8:	28000826 	beq	r5,zero,89fc <_Bfree+0x24>
    89dc:	28c00117 	ldw	r3,4(r5)
    89e0:	20801317 	ldw	r2,76(r4)
    89e4:	18c7883a 	add	r3,r3,r3
    89e8:	18c7883a 	add	r3,r3,r3
    89ec:	10c5883a 	add	r2,r2,r3
    89f0:	10c00017 	ldw	r3,0(r2)
    89f4:	28c00015 	stw	r3,0(r5)
    89f8:	11400015 	stw	r5,0(r2)
    89fc:	f800283a 	ret

00008a00 <__multadd>:
    8a00:	defffa04 	addi	sp,sp,-24
    8a04:	dc800315 	stw	r18,12(sp)
    8a08:	dc400215 	stw	r17,8(sp)
    8a0c:	dc000115 	stw	r16,4(sp)
    8a10:	2823883a 	mov	r17,r5
    8a14:	2c000417 	ldw	r16,16(r5)
    8a18:	dfc00515 	stw	ra,20(sp)
    8a1c:	dcc00415 	stw	r19,16(sp)
    8a20:	2025883a 	mov	r18,r4
    8a24:	29400504 	addi	r5,r5,20
    8a28:	0011883a 	mov	r8,zero
    8a2c:	28c00017 	ldw	r3,0(r5)
    8a30:	29400104 	addi	r5,r5,4
    8a34:	42000044 	addi	r8,r8,1
    8a38:	18bfffcc 	andi	r2,r3,65535
    8a3c:	1185383a 	mul	r2,r2,r6
    8a40:	1806d43a 	srli	r3,r3,16
    8a44:	11cf883a 	add	r7,r2,r7
    8a48:	3808d43a 	srli	r4,r7,16
    8a4c:	1987383a 	mul	r3,r3,r6
    8a50:	38bfffcc 	andi	r2,r7,65535
    8a54:	1907883a 	add	r3,r3,r4
    8a58:	1808943a 	slli	r4,r3,16
    8a5c:	180ed43a 	srli	r7,r3,16
    8a60:	2085883a 	add	r2,r4,r2
    8a64:	28bfff15 	stw	r2,-4(r5)
    8a68:	443ff016 	blt	r8,r16,8a2c <__alt_data_end+0xff008a2c>
    8a6c:	38000926 	beq	r7,zero,8a94 <__multadd+0x94>
    8a70:	88800217 	ldw	r2,8(r17)
    8a74:	80800f0e 	bge	r16,r2,8ab4 <__multadd+0xb4>
    8a78:	80800144 	addi	r2,r16,5
    8a7c:	1085883a 	add	r2,r2,r2
    8a80:	1085883a 	add	r2,r2,r2
    8a84:	8885883a 	add	r2,r17,r2
    8a88:	11c00015 	stw	r7,0(r2)
    8a8c:	84000044 	addi	r16,r16,1
    8a90:	8c000415 	stw	r16,16(r17)
    8a94:	8805883a 	mov	r2,r17
    8a98:	dfc00517 	ldw	ra,20(sp)
    8a9c:	dcc00417 	ldw	r19,16(sp)
    8aa0:	dc800317 	ldw	r18,12(sp)
    8aa4:	dc400217 	ldw	r17,8(sp)
    8aa8:	dc000117 	ldw	r16,4(sp)
    8aac:	dec00604 	addi	sp,sp,24
    8ab0:	f800283a 	ret
    8ab4:	89400117 	ldw	r5,4(r17)
    8ab8:	9009883a 	mov	r4,r18
    8abc:	d9c00015 	stw	r7,0(sp)
    8ac0:	29400044 	addi	r5,r5,1
    8ac4:	00089300 	call	8930 <_Balloc>
    8ac8:	89800417 	ldw	r6,16(r17)
    8acc:	89400304 	addi	r5,r17,12
    8ad0:	11000304 	addi	r4,r2,12
    8ad4:	31800084 	addi	r6,r6,2
    8ad8:	318d883a 	add	r6,r6,r6
    8adc:	318d883a 	add	r6,r6,r6
    8ae0:	1027883a 	mov	r19,r2
    8ae4:	00085640 	call	8564 <memcpy>
    8ae8:	d9c00017 	ldw	r7,0(sp)
    8aec:	88000a26 	beq	r17,zero,8b18 <__multadd+0x118>
    8af0:	88c00117 	ldw	r3,4(r17)
    8af4:	90801317 	ldw	r2,76(r18)
    8af8:	18c7883a 	add	r3,r3,r3
    8afc:	18c7883a 	add	r3,r3,r3
    8b00:	10c5883a 	add	r2,r2,r3
    8b04:	10c00017 	ldw	r3,0(r2)
    8b08:	88c00015 	stw	r3,0(r17)
    8b0c:	14400015 	stw	r17,0(r2)
    8b10:	9823883a 	mov	r17,r19
    8b14:	003fd806 	br	8a78 <__alt_data_end+0xff008a78>
    8b18:	9823883a 	mov	r17,r19
    8b1c:	003fd606 	br	8a78 <__alt_data_end+0xff008a78>

00008b20 <__s2b>:
    8b20:	defff904 	addi	sp,sp,-28
    8b24:	dc400115 	stw	r17,4(sp)
    8b28:	dc000015 	stw	r16,0(sp)
    8b2c:	2023883a 	mov	r17,r4
    8b30:	2821883a 	mov	r16,r5
    8b34:	39000204 	addi	r4,r7,8
    8b38:	01400244 	movi	r5,9
    8b3c:	dcc00315 	stw	r19,12(sp)
    8b40:	dc800215 	stw	r18,8(sp)
    8b44:	dfc00615 	stw	ra,24(sp)
    8b48:	dd400515 	stw	r21,20(sp)
    8b4c:	dd000415 	stw	r20,16(sp)
    8b50:	3825883a 	mov	r18,r7
    8b54:	3027883a 	mov	r19,r6
    8b58:	0001e740 	call	1e74 <__divsi3>
    8b5c:	00c00044 	movi	r3,1
    8b60:	000b883a 	mov	r5,zero
    8b64:	1880030e 	bge	r3,r2,8b74 <__s2b+0x54>
    8b68:	18c7883a 	add	r3,r3,r3
    8b6c:	29400044 	addi	r5,r5,1
    8b70:	18bffd16 	blt	r3,r2,8b68 <__alt_data_end+0xff008b68>
    8b74:	8809883a 	mov	r4,r17
    8b78:	00089300 	call	8930 <_Balloc>
    8b7c:	d8c00717 	ldw	r3,28(sp)
    8b80:	10c00515 	stw	r3,20(r2)
    8b84:	00c00044 	movi	r3,1
    8b88:	10c00415 	stw	r3,16(r2)
    8b8c:	00c00244 	movi	r3,9
    8b90:	1cc0210e 	bge	r3,r19,8c18 <__s2b+0xf8>
    8b94:	80eb883a 	add	r21,r16,r3
    8b98:	a829883a 	mov	r20,r21
    8b9c:	84e1883a 	add	r16,r16,r19
    8ba0:	a1c00007 	ldb	r7,0(r20)
    8ba4:	01800284 	movi	r6,10
    8ba8:	a5000044 	addi	r20,r20,1
    8bac:	100b883a 	mov	r5,r2
    8bb0:	39fff404 	addi	r7,r7,-48
    8bb4:	8809883a 	mov	r4,r17
    8bb8:	0008a000 	call	8a00 <__multadd>
    8bbc:	a43ff81e 	bne	r20,r16,8ba0 <__alt_data_end+0xff008ba0>
    8bc0:	ace1883a 	add	r16,r21,r19
    8bc4:	843ffe04 	addi	r16,r16,-8
    8bc8:	9c800a0e 	bge	r19,r18,8bf4 <__s2b+0xd4>
    8bcc:	94e5c83a 	sub	r18,r18,r19
    8bd0:	84a5883a 	add	r18,r16,r18
    8bd4:	81c00007 	ldb	r7,0(r16)
    8bd8:	01800284 	movi	r6,10
    8bdc:	84000044 	addi	r16,r16,1
    8be0:	100b883a 	mov	r5,r2
    8be4:	39fff404 	addi	r7,r7,-48
    8be8:	8809883a 	mov	r4,r17
    8bec:	0008a000 	call	8a00 <__multadd>
    8bf0:	84bff81e 	bne	r16,r18,8bd4 <__alt_data_end+0xff008bd4>
    8bf4:	dfc00617 	ldw	ra,24(sp)
    8bf8:	dd400517 	ldw	r21,20(sp)
    8bfc:	dd000417 	ldw	r20,16(sp)
    8c00:	dcc00317 	ldw	r19,12(sp)
    8c04:	dc800217 	ldw	r18,8(sp)
    8c08:	dc400117 	ldw	r17,4(sp)
    8c0c:	dc000017 	ldw	r16,0(sp)
    8c10:	dec00704 	addi	sp,sp,28
    8c14:	f800283a 	ret
    8c18:	84000284 	addi	r16,r16,10
    8c1c:	1827883a 	mov	r19,r3
    8c20:	003fe906 	br	8bc8 <__alt_data_end+0xff008bc8>

00008c24 <__hi0bits>:
    8c24:	20bfffec 	andhi	r2,r4,65535
    8c28:	1000141e 	bne	r2,zero,8c7c <__hi0bits+0x58>
    8c2c:	2008943a 	slli	r4,r4,16
    8c30:	00800404 	movi	r2,16
    8c34:	20ffc02c 	andhi	r3,r4,65280
    8c38:	1800021e 	bne	r3,zero,8c44 <__hi0bits+0x20>
    8c3c:	2008923a 	slli	r4,r4,8
    8c40:	10800204 	addi	r2,r2,8
    8c44:	20fc002c 	andhi	r3,r4,61440
    8c48:	1800021e 	bne	r3,zero,8c54 <__hi0bits+0x30>
    8c4c:	2008913a 	slli	r4,r4,4
    8c50:	10800104 	addi	r2,r2,4
    8c54:	20f0002c 	andhi	r3,r4,49152
    8c58:	1800031e 	bne	r3,zero,8c68 <__hi0bits+0x44>
    8c5c:	2109883a 	add	r4,r4,r4
    8c60:	10800084 	addi	r2,r2,2
    8c64:	2109883a 	add	r4,r4,r4
    8c68:	20000316 	blt	r4,zero,8c78 <__hi0bits+0x54>
    8c6c:	2110002c 	andhi	r4,r4,16384
    8c70:	2000041e 	bne	r4,zero,8c84 <__hi0bits+0x60>
    8c74:	00800804 	movi	r2,32
    8c78:	f800283a 	ret
    8c7c:	0005883a 	mov	r2,zero
    8c80:	003fec06 	br	8c34 <__alt_data_end+0xff008c34>
    8c84:	10800044 	addi	r2,r2,1
    8c88:	f800283a 	ret

00008c8c <__lo0bits>:
    8c8c:	20c00017 	ldw	r3,0(r4)
    8c90:	188001cc 	andi	r2,r3,7
    8c94:	10000826 	beq	r2,zero,8cb8 <__lo0bits+0x2c>
    8c98:	1880004c 	andi	r2,r3,1
    8c9c:	1000211e 	bne	r2,zero,8d24 <__lo0bits+0x98>
    8ca0:	1880008c 	andi	r2,r3,2
    8ca4:	1000211e 	bne	r2,zero,8d2c <__lo0bits+0xa0>
    8ca8:	1806d0ba 	srli	r3,r3,2
    8cac:	00800084 	movi	r2,2
    8cb0:	20c00015 	stw	r3,0(r4)
    8cb4:	f800283a 	ret
    8cb8:	18bfffcc 	andi	r2,r3,65535
    8cbc:	10001326 	beq	r2,zero,8d0c <__lo0bits+0x80>
    8cc0:	0005883a 	mov	r2,zero
    8cc4:	19403fcc 	andi	r5,r3,255
    8cc8:	2800021e 	bne	r5,zero,8cd4 <__lo0bits+0x48>
    8ccc:	1806d23a 	srli	r3,r3,8
    8cd0:	10800204 	addi	r2,r2,8
    8cd4:	194003cc 	andi	r5,r3,15
    8cd8:	2800021e 	bne	r5,zero,8ce4 <__lo0bits+0x58>
    8cdc:	1806d13a 	srli	r3,r3,4
    8ce0:	10800104 	addi	r2,r2,4
    8ce4:	194000cc 	andi	r5,r3,3
    8ce8:	2800021e 	bne	r5,zero,8cf4 <__lo0bits+0x68>
    8cec:	1806d0ba 	srli	r3,r3,2
    8cf0:	10800084 	addi	r2,r2,2
    8cf4:	1940004c 	andi	r5,r3,1
    8cf8:	2800081e 	bne	r5,zero,8d1c <__lo0bits+0x90>
    8cfc:	1806d07a 	srli	r3,r3,1
    8d00:	1800051e 	bne	r3,zero,8d18 <__lo0bits+0x8c>
    8d04:	00800804 	movi	r2,32
    8d08:	f800283a 	ret
    8d0c:	1806d43a 	srli	r3,r3,16
    8d10:	00800404 	movi	r2,16
    8d14:	003feb06 	br	8cc4 <__alt_data_end+0xff008cc4>
    8d18:	10800044 	addi	r2,r2,1
    8d1c:	20c00015 	stw	r3,0(r4)
    8d20:	f800283a 	ret
    8d24:	0005883a 	mov	r2,zero
    8d28:	f800283a 	ret
    8d2c:	1806d07a 	srli	r3,r3,1
    8d30:	00800044 	movi	r2,1
    8d34:	20c00015 	stw	r3,0(r4)
    8d38:	f800283a 	ret

00008d3c <__i2b>:
    8d3c:	defffd04 	addi	sp,sp,-12
    8d40:	dc000015 	stw	r16,0(sp)
    8d44:	04000044 	movi	r16,1
    8d48:	dc400115 	stw	r17,4(sp)
    8d4c:	2823883a 	mov	r17,r5
    8d50:	800b883a 	mov	r5,r16
    8d54:	dfc00215 	stw	ra,8(sp)
    8d58:	00089300 	call	8930 <_Balloc>
    8d5c:	14400515 	stw	r17,20(r2)
    8d60:	14000415 	stw	r16,16(r2)
    8d64:	dfc00217 	ldw	ra,8(sp)
    8d68:	dc400117 	ldw	r17,4(sp)
    8d6c:	dc000017 	ldw	r16,0(sp)
    8d70:	dec00304 	addi	sp,sp,12
    8d74:	f800283a 	ret

00008d78 <__multiply>:
    8d78:	defffa04 	addi	sp,sp,-24
    8d7c:	dcc00315 	stw	r19,12(sp)
    8d80:	dc800215 	stw	r18,8(sp)
    8d84:	34c00417 	ldw	r19,16(r6)
    8d88:	2c800417 	ldw	r18,16(r5)
    8d8c:	dd000415 	stw	r20,16(sp)
    8d90:	dc400115 	stw	r17,4(sp)
    8d94:	dfc00515 	stw	ra,20(sp)
    8d98:	dc000015 	stw	r16,0(sp)
    8d9c:	2829883a 	mov	r20,r5
    8da0:	3023883a 	mov	r17,r6
    8da4:	94c0050e 	bge	r18,r19,8dbc <__multiply+0x44>
    8da8:	9007883a 	mov	r3,r18
    8dac:	3029883a 	mov	r20,r6
    8db0:	9825883a 	mov	r18,r19
    8db4:	2823883a 	mov	r17,r5
    8db8:	1827883a 	mov	r19,r3
    8dbc:	a0800217 	ldw	r2,8(r20)
    8dc0:	94e1883a 	add	r16,r18,r19
    8dc4:	a1400117 	ldw	r5,4(r20)
    8dc8:	1400010e 	bge	r2,r16,8dd0 <__multiply+0x58>
    8dcc:	29400044 	addi	r5,r5,1
    8dd0:	00089300 	call	8930 <_Balloc>
    8dd4:	8415883a 	add	r10,r16,r16
    8dd8:	12c00504 	addi	r11,r2,20
    8ddc:	5295883a 	add	r10,r10,r10
    8de0:	5a95883a 	add	r10,r11,r10
    8de4:	5807883a 	mov	r3,r11
    8de8:	5a80032e 	bgeu	r11,r10,8df8 <__multiply+0x80>
    8dec:	18000015 	stw	zero,0(r3)
    8df0:	18c00104 	addi	r3,r3,4
    8df4:	1abffd36 	bltu	r3,r10,8dec <__alt_data_end+0xff008dec>
    8df8:	9ce7883a 	add	r19,r19,r19
    8dfc:	94a5883a 	add	r18,r18,r18
    8e00:	89800504 	addi	r6,r17,20
    8e04:	9ce7883a 	add	r19,r19,r19
    8e08:	a3400504 	addi	r13,r20,20
    8e0c:	94a5883a 	add	r18,r18,r18
    8e10:	34d9883a 	add	r12,r6,r19
    8e14:	6c93883a 	add	r9,r13,r18
    8e18:	3300422e 	bgeu	r6,r12,8f24 <__multiply+0x1ac>
    8e1c:	37c00017 	ldw	ra,0(r6)
    8e20:	fbffffcc 	andi	r15,ra,65535
    8e24:	78001b26 	beq	r15,zero,8e94 <__multiply+0x11c>
    8e28:	5811883a 	mov	r8,r11
    8e2c:	681d883a 	mov	r14,r13
    8e30:	000f883a 	mov	r7,zero
    8e34:	71000017 	ldw	r4,0(r14)
    8e38:	40c00017 	ldw	r3,0(r8)
    8e3c:	73800104 	addi	r14,r14,4
    8e40:	217fffcc 	andi	r5,r4,65535
    8e44:	2bcb383a 	mul	r5,r5,r15
    8e48:	2008d43a 	srli	r4,r4,16
    8e4c:	1c7fffcc 	andi	r17,r3,65535
    8e50:	2c4b883a 	add	r5,r5,r17
    8e54:	29cb883a 	add	r5,r5,r7
    8e58:	23c9383a 	mul	r4,r4,r15
    8e5c:	1806d43a 	srli	r3,r3,16
    8e60:	280ed43a 	srli	r7,r5,16
    8e64:	297fffcc 	andi	r5,r5,65535
    8e68:	20c7883a 	add	r3,r4,r3
    8e6c:	19c7883a 	add	r3,r3,r7
    8e70:	1808943a 	slli	r4,r3,16
    8e74:	4023883a 	mov	r17,r8
    8e78:	180ed43a 	srli	r7,r3,16
    8e7c:	214ab03a 	or	r5,r4,r5
    8e80:	41400015 	stw	r5,0(r8)
    8e84:	42000104 	addi	r8,r8,4
    8e88:	727fea36 	bltu	r14,r9,8e34 <__alt_data_end+0xff008e34>
    8e8c:	89c00115 	stw	r7,4(r17)
    8e90:	37c00017 	ldw	ra,0(r6)
    8e94:	f83ed43a 	srli	ra,ra,16
    8e98:	f8001f26 	beq	ra,zero,8f18 <__multiply+0x1a0>
    8e9c:	58c00017 	ldw	r3,0(r11)
    8ea0:	681d883a 	mov	r14,r13
    8ea4:	581f883a 	mov	r15,r11
    8ea8:	1811883a 	mov	r8,r3
    8eac:	5825883a 	mov	r18,r11
    8eb0:	000f883a 	mov	r7,zero
    8eb4:	00000106 	br	8ebc <__multiply+0x144>
    8eb8:	8825883a 	mov	r18,r17
    8ebc:	7140000b 	ldhu	r5,0(r14)
    8ec0:	4010d43a 	srli	r8,r8,16
    8ec4:	193fffcc 	andi	r4,r3,65535
    8ec8:	2fcb383a 	mul	r5,r5,ra
    8ecc:	7bc00104 	addi	r15,r15,4
    8ed0:	73800104 	addi	r14,r14,4
    8ed4:	2a0b883a 	add	r5,r5,r8
    8ed8:	29cb883a 	add	r5,r5,r7
    8edc:	2806943a 	slli	r3,r5,16
    8ee0:	94400104 	addi	r17,r18,4
    8ee4:	280ad43a 	srli	r5,r5,16
    8ee8:	1908b03a 	or	r4,r3,r4
    8eec:	793fff15 	stw	r4,-4(r15)
    8ef0:	70ffff17 	ldw	r3,-4(r14)
    8ef4:	8a000017 	ldw	r8,0(r17)
    8ef8:	1806d43a 	srli	r3,r3,16
    8efc:	413fffcc 	andi	r4,r8,65535
    8f00:	1fc7383a 	mul	r3,r3,ra
    8f04:	1907883a 	add	r3,r3,r4
    8f08:	1947883a 	add	r3,r3,r5
    8f0c:	180ed43a 	srli	r7,r3,16
    8f10:	727fe936 	bltu	r14,r9,8eb8 <__alt_data_end+0xff008eb8>
    8f14:	90c00115 	stw	r3,4(r18)
    8f18:	31800104 	addi	r6,r6,4
    8f1c:	5ac00104 	addi	r11,r11,4
    8f20:	333fbe36 	bltu	r6,r12,8e1c <__alt_data_end+0xff008e1c>
    8f24:	0400090e 	bge	zero,r16,8f4c <__multiply+0x1d4>
    8f28:	50ffff17 	ldw	r3,-4(r10)
    8f2c:	52bfff04 	addi	r10,r10,-4
    8f30:	18000326 	beq	r3,zero,8f40 <__multiply+0x1c8>
    8f34:	00000506 	br	8f4c <__multiply+0x1d4>
    8f38:	50c00017 	ldw	r3,0(r10)
    8f3c:	1800031e 	bne	r3,zero,8f4c <__multiply+0x1d4>
    8f40:	843fffc4 	addi	r16,r16,-1
    8f44:	52bfff04 	addi	r10,r10,-4
    8f48:	803ffb1e 	bne	r16,zero,8f38 <__alt_data_end+0xff008f38>
    8f4c:	14000415 	stw	r16,16(r2)
    8f50:	dfc00517 	ldw	ra,20(sp)
    8f54:	dd000417 	ldw	r20,16(sp)
    8f58:	dcc00317 	ldw	r19,12(sp)
    8f5c:	dc800217 	ldw	r18,8(sp)
    8f60:	dc400117 	ldw	r17,4(sp)
    8f64:	dc000017 	ldw	r16,0(sp)
    8f68:	dec00604 	addi	sp,sp,24
    8f6c:	f800283a 	ret

00008f70 <__pow5mult>:
    8f70:	defffa04 	addi	sp,sp,-24
    8f74:	dcc00315 	stw	r19,12(sp)
    8f78:	dc000015 	stw	r16,0(sp)
    8f7c:	dfc00515 	stw	ra,20(sp)
    8f80:	dd000415 	stw	r20,16(sp)
    8f84:	dc800215 	stw	r18,8(sp)
    8f88:	dc400115 	stw	r17,4(sp)
    8f8c:	308000cc 	andi	r2,r6,3
    8f90:	3021883a 	mov	r16,r6
    8f94:	2027883a 	mov	r19,r4
    8f98:	10002f1e 	bne	r2,zero,9058 <__pow5mult+0xe8>
    8f9c:	2825883a 	mov	r18,r5
    8fa0:	8021d0ba 	srai	r16,r16,2
    8fa4:	80001a26 	beq	r16,zero,9010 <__pow5mult+0xa0>
    8fa8:	9c401217 	ldw	r17,72(r19)
    8fac:	8800061e 	bne	r17,zero,8fc8 <__pow5mult+0x58>
    8fb0:	00003406 	br	9084 <__pow5mult+0x114>
    8fb4:	8021d07a 	srai	r16,r16,1
    8fb8:	80001526 	beq	r16,zero,9010 <__pow5mult+0xa0>
    8fbc:	88800017 	ldw	r2,0(r17)
    8fc0:	10001c26 	beq	r2,zero,9034 <__pow5mult+0xc4>
    8fc4:	1023883a 	mov	r17,r2
    8fc8:	8080004c 	andi	r2,r16,1
    8fcc:	103ff926 	beq	r2,zero,8fb4 <__alt_data_end+0xff008fb4>
    8fd0:	880d883a 	mov	r6,r17
    8fd4:	900b883a 	mov	r5,r18
    8fd8:	9809883a 	mov	r4,r19
    8fdc:	0008d780 	call	8d78 <__multiply>
    8fe0:	90001b26 	beq	r18,zero,9050 <__pow5mult+0xe0>
    8fe4:	91000117 	ldw	r4,4(r18)
    8fe8:	98c01317 	ldw	r3,76(r19)
    8fec:	8021d07a 	srai	r16,r16,1
    8ff0:	2109883a 	add	r4,r4,r4
    8ff4:	2109883a 	add	r4,r4,r4
    8ff8:	1907883a 	add	r3,r3,r4
    8ffc:	19000017 	ldw	r4,0(r3)
    9000:	91000015 	stw	r4,0(r18)
    9004:	1c800015 	stw	r18,0(r3)
    9008:	1025883a 	mov	r18,r2
    900c:	803feb1e 	bne	r16,zero,8fbc <__alt_data_end+0xff008fbc>
    9010:	9005883a 	mov	r2,r18
    9014:	dfc00517 	ldw	ra,20(sp)
    9018:	dd000417 	ldw	r20,16(sp)
    901c:	dcc00317 	ldw	r19,12(sp)
    9020:	dc800217 	ldw	r18,8(sp)
    9024:	dc400117 	ldw	r17,4(sp)
    9028:	dc000017 	ldw	r16,0(sp)
    902c:	dec00604 	addi	sp,sp,24
    9030:	f800283a 	ret
    9034:	880d883a 	mov	r6,r17
    9038:	880b883a 	mov	r5,r17
    903c:	9809883a 	mov	r4,r19
    9040:	0008d780 	call	8d78 <__multiply>
    9044:	88800015 	stw	r2,0(r17)
    9048:	10000015 	stw	zero,0(r2)
    904c:	003fdd06 	br	8fc4 <__alt_data_end+0xff008fc4>
    9050:	1025883a 	mov	r18,r2
    9054:	003fd706 	br	8fb4 <__alt_data_end+0xff008fb4>
    9058:	10bfffc4 	addi	r2,r2,-1
    905c:	1085883a 	add	r2,r2,r2
    9060:	00c00074 	movhi	r3,1
    9064:	18c6bf04 	addi	r3,r3,6908
    9068:	1085883a 	add	r2,r2,r2
    906c:	1885883a 	add	r2,r3,r2
    9070:	11800017 	ldw	r6,0(r2)
    9074:	000f883a 	mov	r7,zero
    9078:	0008a000 	call	8a00 <__multadd>
    907c:	1025883a 	mov	r18,r2
    9080:	003fc706 	br	8fa0 <__alt_data_end+0xff008fa0>
    9084:	05000044 	movi	r20,1
    9088:	a00b883a 	mov	r5,r20
    908c:	9809883a 	mov	r4,r19
    9090:	00089300 	call	8930 <_Balloc>
    9094:	1023883a 	mov	r17,r2
    9098:	00809c44 	movi	r2,625
    909c:	88800515 	stw	r2,20(r17)
    90a0:	8d000415 	stw	r20,16(r17)
    90a4:	9c401215 	stw	r17,72(r19)
    90a8:	88000015 	stw	zero,0(r17)
    90ac:	003fc606 	br	8fc8 <__alt_data_end+0xff008fc8>

000090b0 <__lshift>:
    90b0:	defff904 	addi	sp,sp,-28
    90b4:	dd400515 	stw	r21,20(sp)
    90b8:	dcc00315 	stw	r19,12(sp)
    90bc:	302bd17a 	srai	r21,r6,5
    90c0:	2cc00417 	ldw	r19,16(r5)
    90c4:	28800217 	ldw	r2,8(r5)
    90c8:	dd000415 	stw	r20,16(sp)
    90cc:	ace7883a 	add	r19,r21,r19
    90d0:	dc800215 	stw	r18,8(sp)
    90d4:	dc400115 	stw	r17,4(sp)
    90d8:	dc000015 	stw	r16,0(sp)
    90dc:	dfc00615 	stw	ra,24(sp)
    90e0:	9c000044 	addi	r16,r19,1
    90e4:	2823883a 	mov	r17,r5
    90e8:	3029883a 	mov	r20,r6
    90ec:	2025883a 	mov	r18,r4
    90f0:	29400117 	ldw	r5,4(r5)
    90f4:	1400030e 	bge	r2,r16,9104 <__lshift+0x54>
    90f8:	1085883a 	add	r2,r2,r2
    90fc:	29400044 	addi	r5,r5,1
    9100:	143ffd16 	blt	r2,r16,90f8 <__alt_data_end+0xff0090f8>
    9104:	9009883a 	mov	r4,r18
    9108:	00089300 	call	8930 <_Balloc>
    910c:	10c00504 	addi	r3,r2,20
    9110:	0540070e 	bge	zero,r21,9130 <__lshift+0x80>
    9114:	ad6b883a 	add	r21,r21,r21
    9118:	ad6b883a 	add	r21,r21,r21
    911c:	1809883a 	mov	r4,r3
    9120:	1d47883a 	add	r3,r3,r21
    9124:	20000015 	stw	zero,0(r4)
    9128:	21000104 	addi	r4,r4,4
    912c:	193ffd1e 	bne	r3,r4,9124 <__alt_data_end+0xff009124>
    9130:	8a000417 	ldw	r8,16(r17)
    9134:	89000504 	addi	r4,r17,20
    9138:	a18007cc 	andi	r6,r20,31
    913c:	4211883a 	add	r8,r8,r8
    9140:	4211883a 	add	r8,r8,r8
    9144:	2211883a 	add	r8,r4,r8
    9148:	30002326 	beq	r6,zero,91d8 <__lshift+0x128>
    914c:	02400804 	movi	r9,32
    9150:	4993c83a 	sub	r9,r9,r6
    9154:	000b883a 	mov	r5,zero
    9158:	21c00017 	ldw	r7,0(r4)
    915c:	1815883a 	mov	r10,r3
    9160:	18c00104 	addi	r3,r3,4
    9164:	398e983a 	sll	r7,r7,r6
    9168:	21000104 	addi	r4,r4,4
    916c:	394ab03a 	or	r5,r7,r5
    9170:	197fff15 	stw	r5,-4(r3)
    9174:	217fff17 	ldw	r5,-4(r4)
    9178:	2a4ad83a 	srl	r5,r5,r9
    917c:	223ff636 	bltu	r4,r8,9158 <__alt_data_end+0xff009158>
    9180:	51400115 	stw	r5,4(r10)
    9184:	28001a1e 	bne	r5,zero,91f0 <__lshift+0x140>
    9188:	843fffc4 	addi	r16,r16,-1
    918c:	14000415 	stw	r16,16(r2)
    9190:	88000826 	beq	r17,zero,91b4 <__lshift+0x104>
    9194:	89000117 	ldw	r4,4(r17)
    9198:	90c01317 	ldw	r3,76(r18)
    919c:	2109883a 	add	r4,r4,r4
    91a0:	2109883a 	add	r4,r4,r4
    91a4:	1907883a 	add	r3,r3,r4
    91a8:	19000017 	ldw	r4,0(r3)
    91ac:	89000015 	stw	r4,0(r17)
    91b0:	1c400015 	stw	r17,0(r3)
    91b4:	dfc00617 	ldw	ra,24(sp)
    91b8:	dd400517 	ldw	r21,20(sp)
    91bc:	dd000417 	ldw	r20,16(sp)
    91c0:	dcc00317 	ldw	r19,12(sp)
    91c4:	dc800217 	ldw	r18,8(sp)
    91c8:	dc400117 	ldw	r17,4(sp)
    91cc:	dc000017 	ldw	r16,0(sp)
    91d0:	dec00704 	addi	sp,sp,28
    91d4:	f800283a 	ret
    91d8:	21400017 	ldw	r5,0(r4)
    91dc:	18c00104 	addi	r3,r3,4
    91e0:	21000104 	addi	r4,r4,4
    91e4:	197fff15 	stw	r5,-4(r3)
    91e8:	223ffb36 	bltu	r4,r8,91d8 <__alt_data_end+0xff0091d8>
    91ec:	003fe606 	br	9188 <__alt_data_end+0xff009188>
    91f0:	9c000084 	addi	r16,r19,2
    91f4:	003fe406 	br	9188 <__alt_data_end+0xff009188>

000091f8 <__mcmp>:
    91f8:	20800417 	ldw	r2,16(r4)
    91fc:	28c00417 	ldw	r3,16(r5)
    9200:	10c5c83a 	sub	r2,r2,r3
    9204:	1000111e 	bne	r2,zero,924c <__mcmp+0x54>
    9208:	18c7883a 	add	r3,r3,r3
    920c:	18c7883a 	add	r3,r3,r3
    9210:	21000504 	addi	r4,r4,20
    9214:	29400504 	addi	r5,r5,20
    9218:	20c5883a 	add	r2,r4,r3
    921c:	28cb883a 	add	r5,r5,r3
    9220:	00000106 	br	9228 <__mcmp+0x30>
    9224:	20800a2e 	bgeu	r4,r2,9250 <__mcmp+0x58>
    9228:	10bfff04 	addi	r2,r2,-4
    922c:	297fff04 	addi	r5,r5,-4
    9230:	11800017 	ldw	r6,0(r2)
    9234:	28c00017 	ldw	r3,0(r5)
    9238:	30fffa26 	beq	r6,r3,9224 <__alt_data_end+0xff009224>
    923c:	30c00236 	bltu	r6,r3,9248 <__mcmp+0x50>
    9240:	00800044 	movi	r2,1
    9244:	f800283a 	ret
    9248:	00bfffc4 	movi	r2,-1
    924c:	f800283a 	ret
    9250:	0005883a 	mov	r2,zero
    9254:	f800283a 	ret

00009258 <__mdiff>:
    9258:	28c00417 	ldw	r3,16(r5)
    925c:	30800417 	ldw	r2,16(r6)
    9260:	defffa04 	addi	sp,sp,-24
    9264:	dcc00315 	stw	r19,12(sp)
    9268:	dc800215 	stw	r18,8(sp)
    926c:	dfc00515 	stw	ra,20(sp)
    9270:	dd000415 	stw	r20,16(sp)
    9274:	dc400115 	stw	r17,4(sp)
    9278:	dc000015 	stw	r16,0(sp)
    927c:	1887c83a 	sub	r3,r3,r2
    9280:	2825883a 	mov	r18,r5
    9284:	3027883a 	mov	r19,r6
    9288:	1800141e 	bne	r3,zero,92dc <__mdiff+0x84>
    928c:	1085883a 	add	r2,r2,r2
    9290:	1085883a 	add	r2,r2,r2
    9294:	2a000504 	addi	r8,r5,20
    9298:	34000504 	addi	r16,r6,20
    929c:	4087883a 	add	r3,r8,r2
    92a0:	8085883a 	add	r2,r16,r2
    92a4:	00000106 	br	92ac <__mdiff+0x54>
    92a8:	40c0592e 	bgeu	r8,r3,9410 <__mdiff+0x1b8>
    92ac:	18ffff04 	addi	r3,r3,-4
    92b0:	10bfff04 	addi	r2,r2,-4
    92b4:	19c00017 	ldw	r7,0(r3)
    92b8:	11400017 	ldw	r5,0(r2)
    92bc:	397ffa26 	beq	r7,r5,92a8 <__alt_data_end+0xff0092a8>
    92c0:	3940592e 	bgeu	r7,r5,9428 <__mdiff+0x1d0>
    92c4:	9005883a 	mov	r2,r18
    92c8:	4023883a 	mov	r17,r8
    92cc:	9825883a 	mov	r18,r19
    92d0:	05000044 	movi	r20,1
    92d4:	1027883a 	mov	r19,r2
    92d8:	00000406 	br	92ec <__mdiff+0x94>
    92dc:	18005616 	blt	r3,zero,9438 <__mdiff+0x1e0>
    92e0:	34400504 	addi	r17,r6,20
    92e4:	2c000504 	addi	r16,r5,20
    92e8:	0029883a 	mov	r20,zero
    92ec:	91400117 	ldw	r5,4(r18)
    92f0:	00089300 	call	8930 <_Balloc>
    92f4:	92400417 	ldw	r9,16(r18)
    92f8:	9b000417 	ldw	r12,16(r19)
    92fc:	12c00504 	addi	r11,r2,20
    9300:	4a51883a 	add	r8,r9,r9
    9304:	6319883a 	add	r12,r12,r12
    9308:	4211883a 	add	r8,r8,r8
    930c:	6319883a 	add	r12,r12,r12
    9310:	15000315 	stw	r20,12(r2)
    9314:	8211883a 	add	r8,r16,r8
    9318:	8b19883a 	add	r12,r17,r12
    931c:	0007883a 	mov	r3,zero
    9320:	81400017 	ldw	r5,0(r16)
    9324:	89c00017 	ldw	r7,0(r17)
    9328:	59800104 	addi	r6,r11,4
    932c:	293fffcc 	andi	r4,r5,65535
    9330:	20c7883a 	add	r3,r4,r3
    9334:	393fffcc 	andi	r4,r7,65535
    9338:	1909c83a 	sub	r4,r3,r4
    933c:	280ad43a 	srli	r5,r5,16
    9340:	380ed43a 	srli	r7,r7,16
    9344:	2007d43a 	srai	r3,r4,16
    9348:	213fffcc 	andi	r4,r4,65535
    934c:	29cbc83a 	sub	r5,r5,r7
    9350:	28c7883a 	add	r3,r5,r3
    9354:	180a943a 	slli	r5,r3,16
    9358:	8c400104 	addi	r17,r17,4
    935c:	84000104 	addi	r16,r16,4
    9360:	2908b03a 	or	r4,r5,r4
    9364:	59000015 	stw	r4,0(r11)
    9368:	1807d43a 	srai	r3,r3,16
    936c:	3015883a 	mov	r10,r6
    9370:	3017883a 	mov	r11,r6
    9374:	8b3fea36 	bltu	r17,r12,9320 <__alt_data_end+0xff009320>
    9378:	8200162e 	bgeu	r16,r8,93d4 <__mdiff+0x17c>
    937c:	8017883a 	mov	r11,r16
    9380:	59400017 	ldw	r5,0(r11)
    9384:	31800104 	addi	r6,r6,4
    9388:	5ac00104 	addi	r11,r11,4
    938c:	293fffcc 	andi	r4,r5,65535
    9390:	20c7883a 	add	r3,r4,r3
    9394:	280ed43a 	srli	r7,r5,16
    9398:	180bd43a 	srai	r5,r3,16
    939c:	193fffcc 	andi	r4,r3,65535
    93a0:	3947883a 	add	r3,r7,r5
    93a4:	180a943a 	slli	r5,r3,16
    93a8:	1807d43a 	srai	r3,r3,16
    93ac:	2908b03a 	or	r4,r5,r4
    93b0:	313fff15 	stw	r4,-4(r6)
    93b4:	5a3ff236 	bltu	r11,r8,9380 <__alt_data_end+0xff009380>
    93b8:	0406303a 	nor	r3,zero,r16
    93bc:	1a07883a 	add	r3,r3,r8
    93c0:	1806d0ba 	srli	r3,r3,2
    93c4:	18c00044 	addi	r3,r3,1
    93c8:	18c7883a 	add	r3,r3,r3
    93cc:	18c7883a 	add	r3,r3,r3
    93d0:	50d5883a 	add	r10,r10,r3
    93d4:	50ffff04 	addi	r3,r10,-4
    93d8:	2000041e 	bne	r4,zero,93ec <__mdiff+0x194>
    93dc:	18ffff04 	addi	r3,r3,-4
    93e0:	19000017 	ldw	r4,0(r3)
    93e4:	4a7fffc4 	addi	r9,r9,-1
    93e8:	203ffc26 	beq	r4,zero,93dc <__alt_data_end+0xff0093dc>
    93ec:	12400415 	stw	r9,16(r2)
    93f0:	dfc00517 	ldw	ra,20(sp)
    93f4:	dd000417 	ldw	r20,16(sp)
    93f8:	dcc00317 	ldw	r19,12(sp)
    93fc:	dc800217 	ldw	r18,8(sp)
    9400:	dc400117 	ldw	r17,4(sp)
    9404:	dc000017 	ldw	r16,0(sp)
    9408:	dec00604 	addi	sp,sp,24
    940c:	f800283a 	ret
    9410:	000b883a 	mov	r5,zero
    9414:	00089300 	call	8930 <_Balloc>
    9418:	00c00044 	movi	r3,1
    941c:	10c00415 	stw	r3,16(r2)
    9420:	10000515 	stw	zero,20(r2)
    9424:	003ff206 	br	93f0 <__alt_data_end+0xff0093f0>
    9428:	8023883a 	mov	r17,r16
    942c:	0029883a 	mov	r20,zero
    9430:	4021883a 	mov	r16,r8
    9434:	003fad06 	br	92ec <__alt_data_end+0xff0092ec>
    9438:	9005883a 	mov	r2,r18
    943c:	94400504 	addi	r17,r18,20
    9440:	9c000504 	addi	r16,r19,20
    9444:	9825883a 	mov	r18,r19
    9448:	05000044 	movi	r20,1
    944c:	1027883a 	mov	r19,r2
    9450:	003fa606 	br	92ec <__alt_data_end+0xff0092ec>

00009454 <__ulp>:
    9454:	295ffc2c 	andhi	r5,r5,32752
    9458:	00bf3034 	movhi	r2,64704
    945c:	2887883a 	add	r3,r5,r2
    9460:	00c0020e 	bge	zero,r3,946c <__ulp+0x18>
    9464:	0005883a 	mov	r2,zero
    9468:	f800283a 	ret
    946c:	00c7c83a 	sub	r3,zero,r3
    9470:	1807d53a 	srai	r3,r3,20
    9474:	008004c4 	movi	r2,19
    9478:	10c00b0e 	bge	r2,r3,94a8 <__ulp+0x54>
    947c:	18bffb04 	addi	r2,r3,-20
    9480:	01000784 	movi	r4,30
    9484:	0007883a 	mov	r3,zero
    9488:	20800516 	blt	r4,r2,94a0 <__ulp+0x4c>
    948c:	010007c4 	movi	r4,31
    9490:	2089c83a 	sub	r4,r4,r2
    9494:	00800044 	movi	r2,1
    9498:	1104983a 	sll	r2,r2,r4
    949c:	f800283a 	ret
    94a0:	00800044 	movi	r2,1
    94a4:	f800283a 	ret
    94a8:	01400234 	movhi	r5,8
    94ac:	28c7d83a 	sra	r3,r5,r3
    94b0:	0005883a 	mov	r2,zero
    94b4:	f800283a 	ret

000094b8 <__b2d>:
    94b8:	defffa04 	addi	sp,sp,-24
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	24000417 	ldw	r16,16(r4)
    94c4:	dc400115 	stw	r17,4(sp)
    94c8:	24400504 	addi	r17,r4,20
    94cc:	8421883a 	add	r16,r16,r16
    94d0:	8421883a 	add	r16,r16,r16
    94d4:	8c21883a 	add	r16,r17,r16
    94d8:	dc800215 	stw	r18,8(sp)
    94dc:	84bfff17 	ldw	r18,-4(r16)
    94e0:	dd000415 	stw	r20,16(sp)
    94e4:	dcc00315 	stw	r19,12(sp)
    94e8:	9009883a 	mov	r4,r18
    94ec:	2829883a 	mov	r20,r5
    94f0:	dfc00515 	stw	ra,20(sp)
    94f4:	0008c240 	call	8c24 <__hi0bits>
    94f8:	00c00804 	movi	r3,32
    94fc:	1889c83a 	sub	r4,r3,r2
    9500:	a1000015 	stw	r4,0(r20)
    9504:	01000284 	movi	r4,10
    9508:	84ffff04 	addi	r19,r16,-4
    950c:	20801216 	blt	r4,r2,9558 <__b2d+0xa0>
    9510:	018002c4 	movi	r6,11
    9514:	308dc83a 	sub	r6,r6,r2
    9518:	9186d83a 	srl	r3,r18,r6
    951c:	18cffc34 	orhi	r3,r3,16368
    9520:	8cc0212e 	bgeu	r17,r19,95a8 <__b2d+0xf0>
    9524:	813ffe17 	ldw	r4,-8(r16)
    9528:	218cd83a 	srl	r6,r4,r6
    952c:	10800544 	addi	r2,r2,21
    9530:	9084983a 	sll	r2,r18,r2
    9534:	1184b03a 	or	r2,r2,r6
    9538:	dfc00517 	ldw	ra,20(sp)
    953c:	dd000417 	ldw	r20,16(sp)
    9540:	dcc00317 	ldw	r19,12(sp)
    9544:	dc800217 	ldw	r18,8(sp)
    9548:	dc400117 	ldw	r17,4(sp)
    954c:	dc000017 	ldw	r16,0(sp)
    9550:	dec00604 	addi	sp,sp,24
    9554:	f800283a 	ret
    9558:	8cc00f2e 	bgeu	r17,r19,9598 <__b2d+0xe0>
    955c:	117ffd44 	addi	r5,r2,-11
    9560:	80bffe17 	ldw	r2,-8(r16)
    9564:	28000e26 	beq	r5,zero,95a0 <__b2d+0xe8>
    9568:	1949c83a 	sub	r4,r3,r5
    956c:	9164983a 	sll	r18,r18,r5
    9570:	1106d83a 	srl	r3,r2,r4
    9574:	81bffe04 	addi	r6,r16,-8
    9578:	948ffc34 	orhi	r18,r18,16368
    957c:	90c6b03a 	or	r3,r18,r3
    9580:	89800e2e 	bgeu	r17,r6,95bc <__b2d+0x104>
    9584:	81bffd17 	ldw	r6,-12(r16)
    9588:	1144983a 	sll	r2,r2,r5
    958c:	310ad83a 	srl	r5,r6,r4
    9590:	2884b03a 	or	r2,r5,r2
    9594:	003fe806 	br	9538 <__alt_data_end+0xff009538>
    9598:	10bffd44 	addi	r2,r2,-11
    959c:	1000041e 	bne	r2,zero,95b0 <__b2d+0xf8>
    95a0:	90cffc34 	orhi	r3,r18,16368
    95a4:	003fe406 	br	9538 <__alt_data_end+0xff009538>
    95a8:	000d883a 	mov	r6,zero
    95ac:	003fdf06 	br	952c <__alt_data_end+0xff00952c>
    95b0:	90a4983a 	sll	r18,r18,r2
    95b4:	0005883a 	mov	r2,zero
    95b8:	003ff906 	br	95a0 <__alt_data_end+0xff0095a0>
    95bc:	1144983a 	sll	r2,r2,r5
    95c0:	003fdd06 	br	9538 <__alt_data_end+0xff009538>

000095c4 <__d2b>:
    95c4:	defff804 	addi	sp,sp,-32
    95c8:	dc000215 	stw	r16,8(sp)
    95cc:	3021883a 	mov	r16,r6
    95d0:	dc400315 	stw	r17,12(sp)
    95d4:	8022907a 	slli	r17,r16,1
    95d8:	dd000615 	stw	r20,24(sp)
    95dc:	2829883a 	mov	r20,r5
    95e0:	01400044 	movi	r5,1
    95e4:	dcc00515 	stw	r19,20(sp)
    95e8:	dc800415 	stw	r18,16(sp)
    95ec:	dfc00715 	stw	ra,28(sp)
    95f0:	3825883a 	mov	r18,r7
    95f4:	8822d57a 	srli	r17,r17,21
    95f8:	00089300 	call	8930 <_Balloc>
    95fc:	1027883a 	mov	r19,r2
    9600:	00800434 	movhi	r2,16
    9604:	10bfffc4 	addi	r2,r2,-1
    9608:	808c703a 	and	r6,r16,r2
    960c:	88000126 	beq	r17,zero,9614 <__d2b+0x50>
    9610:	31800434 	orhi	r6,r6,16
    9614:	d9800015 	stw	r6,0(sp)
    9618:	a0002426 	beq	r20,zero,96ac <__d2b+0xe8>
    961c:	d9000104 	addi	r4,sp,4
    9620:	dd000115 	stw	r20,4(sp)
    9624:	0008c8c0 	call	8c8c <__lo0bits>
    9628:	d8c00017 	ldw	r3,0(sp)
    962c:	10002f1e 	bne	r2,zero,96ec <__d2b+0x128>
    9630:	d9000117 	ldw	r4,4(sp)
    9634:	99000515 	stw	r4,20(r19)
    9638:	1821003a 	cmpeq	r16,r3,zero
    963c:	01000084 	movi	r4,2
    9640:	2421c83a 	sub	r16,r4,r16
    9644:	98c00615 	stw	r3,24(r19)
    9648:	9c000415 	stw	r16,16(r19)
    964c:	88001f1e 	bne	r17,zero,96cc <__d2b+0x108>
    9650:	10bef384 	addi	r2,r2,-1074
    9654:	90800015 	stw	r2,0(r18)
    9658:	00900034 	movhi	r2,16384
    965c:	10bfffc4 	addi	r2,r2,-1
    9660:	8085883a 	add	r2,r16,r2
    9664:	1085883a 	add	r2,r2,r2
    9668:	1085883a 	add	r2,r2,r2
    966c:	9885883a 	add	r2,r19,r2
    9670:	11000517 	ldw	r4,20(r2)
    9674:	8020917a 	slli	r16,r16,5
    9678:	0008c240 	call	8c24 <__hi0bits>
    967c:	d8c00817 	ldw	r3,32(sp)
    9680:	8085c83a 	sub	r2,r16,r2
    9684:	18800015 	stw	r2,0(r3)
    9688:	9805883a 	mov	r2,r19
    968c:	dfc00717 	ldw	ra,28(sp)
    9690:	dd000617 	ldw	r20,24(sp)
    9694:	dcc00517 	ldw	r19,20(sp)
    9698:	dc800417 	ldw	r18,16(sp)
    969c:	dc400317 	ldw	r17,12(sp)
    96a0:	dc000217 	ldw	r16,8(sp)
    96a4:	dec00804 	addi	sp,sp,32
    96a8:	f800283a 	ret
    96ac:	d809883a 	mov	r4,sp
    96b0:	0008c8c0 	call	8c8c <__lo0bits>
    96b4:	d8c00017 	ldw	r3,0(sp)
    96b8:	04000044 	movi	r16,1
    96bc:	9c000415 	stw	r16,16(r19)
    96c0:	98c00515 	stw	r3,20(r19)
    96c4:	10800804 	addi	r2,r2,32
    96c8:	883fe126 	beq	r17,zero,9650 <__alt_data_end+0xff009650>
    96cc:	00c00d44 	movi	r3,53
    96d0:	8c7ef344 	addi	r17,r17,-1075
    96d4:	88a3883a 	add	r17,r17,r2
    96d8:	1885c83a 	sub	r2,r3,r2
    96dc:	d8c00817 	ldw	r3,32(sp)
    96e0:	94400015 	stw	r17,0(r18)
    96e4:	18800015 	stw	r2,0(r3)
    96e8:	003fe706 	br	9688 <__alt_data_end+0xff009688>
    96ec:	01000804 	movi	r4,32
    96f0:	2089c83a 	sub	r4,r4,r2
    96f4:	1908983a 	sll	r4,r3,r4
    96f8:	d9400117 	ldw	r5,4(sp)
    96fc:	1886d83a 	srl	r3,r3,r2
    9700:	2148b03a 	or	r4,r4,r5
    9704:	99000515 	stw	r4,20(r19)
    9708:	d8c00015 	stw	r3,0(sp)
    970c:	003fca06 	br	9638 <__alt_data_end+0xff009638>

00009710 <__ratio>:
    9710:	defff904 	addi	sp,sp,-28
    9714:	dc400315 	stw	r17,12(sp)
    9718:	2823883a 	mov	r17,r5
    971c:	d9400104 	addi	r5,sp,4
    9720:	dfc00615 	stw	ra,24(sp)
    9724:	dcc00515 	stw	r19,20(sp)
    9728:	dc800415 	stw	r18,16(sp)
    972c:	2027883a 	mov	r19,r4
    9730:	dc000215 	stw	r16,8(sp)
    9734:	00094b80 	call	94b8 <__b2d>
    9738:	d80b883a 	mov	r5,sp
    973c:	8809883a 	mov	r4,r17
    9740:	1025883a 	mov	r18,r2
    9744:	1821883a 	mov	r16,r3
    9748:	00094b80 	call	94b8 <__b2d>
    974c:	8a000417 	ldw	r8,16(r17)
    9750:	99000417 	ldw	r4,16(r19)
    9754:	d9400117 	ldw	r5,4(sp)
    9758:	2209c83a 	sub	r4,r4,r8
    975c:	2010917a 	slli	r8,r4,5
    9760:	d9000017 	ldw	r4,0(sp)
    9764:	2909c83a 	sub	r4,r5,r4
    9768:	4109883a 	add	r4,r8,r4
    976c:	01000e0e 	bge	zero,r4,97a8 <__ratio+0x98>
    9770:	2008953a 	slli	r4,r4,20
    9774:	2421883a 	add	r16,r4,r16
    9778:	100d883a 	mov	r6,r2
    977c:	180f883a 	mov	r7,r3
    9780:	9009883a 	mov	r4,r18
    9784:	800b883a 	mov	r5,r16
    9788:	00020280 	call	2028 <__divdf3>
    978c:	dfc00617 	ldw	ra,24(sp)
    9790:	dcc00517 	ldw	r19,20(sp)
    9794:	dc800417 	ldw	r18,16(sp)
    9798:	dc400317 	ldw	r17,12(sp)
    979c:	dc000217 	ldw	r16,8(sp)
    97a0:	dec00704 	addi	sp,sp,28
    97a4:	f800283a 	ret
    97a8:	2008953a 	slli	r4,r4,20
    97ac:	1907c83a 	sub	r3,r3,r4
    97b0:	003ff106 	br	9778 <__alt_data_end+0xff009778>

000097b4 <_mprec_log10>:
    97b4:	defffe04 	addi	sp,sp,-8
    97b8:	dc000015 	stw	r16,0(sp)
    97bc:	dfc00115 	stw	ra,4(sp)
    97c0:	008005c4 	movi	r2,23
    97c4:	2021883a 	mov	r16,r4
    97c8:	11000d0e 	bge	r2,r4,9800 <_mprec_log10+0x4c>
    97cc:	0005883a 	mov	r2,zero
    97d0:	00cffc34 	movhi	r3,16368
    97d4:	843fffc4 	addi	r16,r16,-1
    97d8:	000d883a 	mov	r6,zero
    97dc:	01d00934 	movhi	r7,16420
    97e0:	1009883a 	mov	r4,r2
    97e4:	180b883a 	mov	r5,r3
    97e8:	000d64c0 	call	d64c <__muldf3>
    97ec:	803ff91e 	bne	r16,zero,97d4 <__alt_data_end+0xff0097d4>
    97f0:	dfc00117 	ldw	ra,4(sp)
    97f4:	dc000017 	ldw	r16,0(sp)
    97f8:	dec00204 	addi	sp,sp,8
    97fc:	f800283a 	ret
    9800:	202090fa 	slli	r16,r4,3
    9804:	00800074 	movhi	r2,1
    9808:	1086d604 	addi	r2,r2,7000
    980c:	1421883a 	add	r16,r2,r16
    9810:	80800017 	ldw	r2,0(r16)
    9814:	80c00117 	ldw	r3,4(r16)
    9818:	dfc00117 	ldw	ra,4(sp)
    981c:	dc000017 	ldw	r16,0(sp)
    9820:	dec00204 	addi	sp,sp,8
    9824:	f800283a 	ret

00009828 <__copybits>:
    9828:	297fffc4 	addi	r5,r5,-1
    982c:	280fd17a 	srai	r7,r5,5
    9830:	30c00417 	ldw	r3,16(r6)
    9834:	30800504 	addi	r2,r6,20
    9838:	39c00044 	addi	r7,r7,1
    983c:	18c7883a 	add	r3,r3,r3
    9840:	39cf883a 	add	r7,r7,r7
    9844:	18c7883a 	add	r3,r3,r3
    9848:	39cf883a 	add	r7,r7,r7
    984c:	10c7883a 	add	r3,r2,r3
    9850:	21cf883a 	add	r7,r4,r7
    9854:	10c00d2e 	bgeu	r2,r3,988c <__copybits+0x64>
    9858:	200b883a 	mov	r5,r4
    985c:	12000017 	ldw	r8,0(r2)
    9860:	29400104 	addi	r5,r5,4
    9864:	10800104 	addi	r2,r2,4
    9868:	2a3fff15 	stw	r8,-4(r5)
    986c:	10fffb36 	bltu	r2,r3,985c <__alt_data_end+0xff00985c>
    9870:	1985c83a 	sub	r2,r3,r6
    9874:	10bffac4 	addi	r2,r2,-21
    9878:	1004d0ba 	srli	r2,r2,2
    987c:	10800044 	addi	r2,r2,1
    9880:	1085883a 	add	r2,r2,r2
    9884:	1085883a 	add	r2,r2,r2
    9888:	2089883a 	add	r4,r4,r2
    988c:	21c0032e 	bgeu	r4,r7,989c <__copybits+0x74>
    9890:	20000015 	stw	zero,0(r4)
    9894:	21000104 	addi	r4,r4,4
    9898:	21fffd36 	bltu	r4,r7,9890 <__alt_data_end+0xff009890>
    989c:	f800283a 	ret

000098a0 <__any_on>:
    98a0:	20c00417 	ldw	r3,16(r4)
    98a4:	2805d17a 	srai	r2,r5,5
    98a8:	21000504 	addi	r4,r4,20
    98ac:	18800d0e 	bge	r3,r2,98e4 <__any_on+0x44>
    98b0:	18c7883a 	add	r3,r3,r3
    98b4:	18c7883a 	add	r3,r3,r3
    98b8:	20c7883a 	add	r3,r4,r3
    98bc:	20c0192e 	bgeu	r4,r3,9924 <__any_on+0x84>
    98c0:	18bfff17 	ldw	r2,-4(r3)
    98c4:	18ffff04 	addi	r3,r3,-4
    98c8:	1000041e 	bne	r2,zero,98dc <__any_on+0x3c>
    98cc:	20c0142e 	bgeu	r4,r3,9920 <__any_on+0x80>
    98d0:	18ffff04 	addi	r3,r3,-4
    98d4:	19400017 	ldw	r5,0(r3)
    98d8:	283ffc26 	beq	r5,zero,98cc <__alt_data_end+0xff0098cc>
    98dc:	00800044 	movi	r2,1
    98e0:	f800283a 	ret
    98e4:	10c00a0e 	bge	r2,r3,9910 <__any_on+0x70>
    98e8:	1085883a 	add	r2,r2,r2
    98ec:	1085883a 	add	r2,r2,r2
    98f0:	294007cc 	andi	r5,r5,31
    98f4:	2087883a 	add	r3,r4,r2
    98f8:	283ff026 	beq	r5,zero,98bc <__alt_data_end+0xff0098bc>
    98fc:	19800017 	ldw	r6,0(r3)
    9900:	3144d83a 	srl	r2,r6,r5
    9904:	114a983a 	sll	r5,r2,r5
    9908:	317ff41e 	bne	r6,r5,98dc <__alt_data_end+0xff0098dc>
    990c:	003feb06 	br	98bc <__alt_data_end+0xff0098bc>
    9910:	1085883a 	add	r2,r2,r2
    9914:	1085883a 	add	r2,r2,r2
    9918:	2087883a 	add	r3,r4,r2
    991c:	003fe706 	br	98bc <__alt_data_end+0xff0098bc>
    9920:	f800283a 	ret
    9924:	0005883a 	mov	r2,zero
    9928:	f800283a 	ret

0000992c <_realloc_r>:
    992c:	defff604 	addi	sp,sp,-40
    9930:	dc800215 	stw	r18,8(sp)
    9934:	dfc00915 	stw	ra,36(sp)
    9938:	df000815 	stw	fp,32(sp)
    993c:	ddc00715 	stw	r23,28(sp)
    9940:	dd800615 	stw	r22,24(sp)
    9944:	dd400515 	stw	r21,20(sp)
    9948:	dd000415 	stw	r20,16(sp)
    994c:	dcc00315 	stw	r19,12(sp)
    9950:	dc400115 	stw	r17,4(sp)
    9954:	dc000015 	stw	r16,0(sp)
    9958:	3025883a 	mov	r18,r6
    995c:	2800b726 	beq	r5,zero,9c3c <_realloc_r+0x310>
    9960:	282b883a 	mov	r21,r5
    9964:	2029883a 	mov	r20,r4
    9968:	000ed380 	call	ed38 <__malloc_lock>
    996c:	a8bfff17 	ldw	r2,-4(r21)
    9970:	043fff04 	movi	r16,-4
    9974:	90c002c4 	addi	r3,r18,11
    9978:	01000584 	movi	r4,22
    997c:	acfffe04 	addi	r19,r21,-8
    9980:	1420703a 	and	r16,r2,r16
    9984:	20c0332e 	bgeu	r4,r3,9a54 <_realloc_r+0x128>
    9988:	047ffe04 	movi	r17,-8
    998c:	1c62703a 	and	r17,r3,r17
    9990:	8807883a 	mov	r3,r17
    9994:	88005816 	blt	r17,zero,9af8 <_realloc_r+0x1cc>
    9998:	8c805736 	bltu	r17,r18,9af8 <_realloc_r+0x1cc>
    999c:	80c0300e 	bge	r16,r3,9a60 <_realloc_r+0x134>
    99a0:	07000074 	movhi	fp,1
    99a4:	e7075b04 	addi	fp,fp,7532
    99a8:	e1c00217 	ldw	r7,8(fp)
    99ac:	9c09883a 	add	r4,r19,r16
    99b0:	22000117 	ldw	r8,4(r4)
    99b4:	21c06326 	beq	r4,r7,9b44 <_realloc_r+0x218>
    99b8:	017fff84 	movi	r5,-2
    99bc:	414a703a 	and	r5,r8,r5
    99c0:	214b883a 	add	r5,r4,r5
    99c4:	29800117 	ldw	r6,4(r5)
    99c8:	3180004c 	andi	r6,r6,1
    99cc:	30003f26 	beq	r6,zero,9acc <_realloc_r+0x1a0>
    99d0:	1080004c 	andi	r2,r2,1
    99d4:	10008326 	beq	r2,zero,9be4 <_realloc_r+0x2b8>
    99d8:	900b883a 	mov	r5,r18
    99dc:	a009883a 	mov	r4,r20
    99e0:	0002a440 	call	2a44 <_malloc_r>
    99e4:	1025883a 	mov	r18,r2
    99e8:	10011e26 	beq	r2,zero,9e64 <_realloc_r+0x538>
    99ec:	a93fff17 	ldw	r4,-4(r21)
    99f0:	10fffe04 	addi	r3,r2,-8
    99f4:	00bfff84 	movi	r2,-2
    99f8:	2084703a 	and	r2,r4,r2
    99fc:	9885883a 	add	r2,r19,r2
    9a00:	1880ee26 	beq	r3,r2,9dbc <_realloc_r+0x490>
    9a04:	81bfff04 	addi	r6,r16,-4
    9a08:	00800904 	movi	r2,36
    9a0c:	1180b836 	bltu	r2,r6,9cf0 <_realloc_r+0x3c4>
    9a10:	00c004c4 	movi	r3,19
    9a14:	19809636 	bltu	r3,r6,9c70 <_realloc_r+0x344>
    9a18:	9005883a 	mov	r2,r18
    9a1c:	a807883a 	mov	r3,r21
    9a20:	19000017 	ldw	r4,0(r3)
    9a24:	11000015 	stw	r4,0(r2)
    9a28:	19000117 	ldw	r4,4(r3)
    9a2c:	11000115 	stw	r4,4(r2)
    9a30:	18c00217 	ldw	r3,8(r3)
    9a34:	10c00215 	stw	r3,8(r2)
    9a38:	a80b883a 	mov	r5,r21
    9a3c:	a009883a 	mov	r4,r20
    9a40:	00078940 	call	7894 <_free_r>
    9a44:	a009883a 	mov	r4,r20
    9a48:	000ed5c0 	call	ed5c <__malloc_unlock>
    9a4c:	9005883a 	mov	r2,r18
    9a50:	00001206 	br	9a9c <_realloc_r+0x170>
    9a54:	00c00404 	movi	r3,16
    9a58:	1823883a 	mov	r17,r3
    9a5c:	003fce06 	br	9998 <__alt_data_end+0xff009998>
    9a60:	a825883a 	mov	r18,r21
    9a64:	8445c83a 	sub	r2,r16,r17
    9a68:	00c003c4 	movi	r3,15
    9a6c:	18802636 	bltu	r3,r2,9b08 <_realloc_r+0x1dc>
    9a70:	99800117 	ldw	r6,4(r19)
    9a74:	9c07883a 	add	r3,r19,r16
    9a78:	3180004c 	andi	r6,r6,1
    9a7c:	3420b03a 	or	r16,r6,r16
    9a80:	9c000115 	stw	r16,4(r19)
    9a84:	18800117 	ldw	r2,4(r3)
    9a88:	10800054 	ori	r2,r2,1
    9a8c:	18800115 	stw	r2,4(r3)
    9a90:	a009883a 	mov	r4,r20
    9a94:	000ed5c0 	call	ed5c <__malloc_unlock>
    9a98:	9005883a 	mov	r2,r18
    9a9c:	dfc00917 	ldw	ra,36(sp)
    9aa0:	df000817 	ldw	fp,32(sp)
    9aa4:	ddc00717 	ldw	r23,28(sp)
    9aa8:	dd800617 	ldw	r22,24(sp)
    9aac:	dd400517 	ldw	r21,20(sp)
    9ab0:	dd000417 	ldw	r20,16(sp)
    9ab4:	dcc00317 	ldw	r19,12(sp)
    9ab8:	dc800217 	ldw	r18,8(sp)
    9abc:	dc400117 	ldw	r17,4(sp)
    9ac0:	dc000017 	ldw	r16,0(sp)
    9ac4:	dec00a04 	addi	sp,sp,40
    9ac8:	f800283a 	ret
    9acc:	017fff04 	movi	r5,-4
    9ad0:	414a703a 	and	r5,r8,r5
    9ad4:	814d883a 	add	r6,r16,r5
    9ad8:	30c01f16 	blt	r6,r3,9b58 <_realloc_r+0x22c>
    9adc:	20800317 	ldw	r2,12(r4)
    9ae0:	20c00217 	ldw	r3,8(r4)
    9ae4:	a825883a 	mov	r18,r21
    9ae8:	3021883a 	mov	r16,r6
    9aec:	18800315 	stw	r2,12(r3)
    9af0:	10c00215 	stw	r3,8(r2)
    9af4:	003fdb06 	br	9a64 <__alt_data_end+0xff009a64>
    9af8:	00800304 	movi	r2,12
    9afc:	a0800015 	stw	r2,0(r20)
    9b00:	0005883a 	mov	r2,zero
    9b04:	003fe506 	br	9a9c <__alt_data_end+0xff009a9c>
    9b08:	98c00117 	ldw	r3,4(r19)
    9b0c:	9c4b883a 	add	r5,r19,r17
    9b10:	11000054 	ori	r4,r2,1
    9b14:	18c0004c 	andi	r3,r3,1
    9b18:	1c62b03a 	or	r17,r3,r17
    9b1c:	9c400115 	stw	r17,4(r19)
    9b20:	29000115 	stw	r4,4(r5)
    9b24:	2885883a 	add	r2,r5,r2
    9b28:	10c00117 	ldw	r3,4(r2)
    9b2c:	29400204 	addi	r5,r5,8
    9b30:	a009883a 	mov	r4,r20
    9b34:	18c00054 	ori	r3,r3,1
    9b38:	10c00115 	stw	r3,4(r2)
    9b3c:	00078940 	call	7894 <_free_r>
    9b40:	003fd306 	br	9a90 <__alt_data_end+0xff009a90>
    9b44:	017fff04 	movi	r5,-4
    9b48:	414a703a 	and	r5,r8,r5
    9b4c:	89800404 	addi	r6,r17,16
    9b50:	8151883a 	add	r8,r16,r5
    9b54:	4180590e 	bge	r8,r6,9cbc <_realloc_r+0x390>
    9b58:	1080004c 	andi	r2,r2,1
    9b5c:	103f9e1e 	bne	r2,zero,99d8 <__alt_data_end+0xff0099d8>
    9b60:	adbffe17 	ldw	r22,-8(r21)
    9b64:	00bfff04 	movi	r2,-4
    9b68:	9dadc83a 	sub	r22,r19,r22
    9b6c:	b1800117 	ldw	r6,4(r22)
    9b70:	3084703a 	and	r2,r6,r2
    9b74:	20002026 	beq	r4,zero,9bf8 <_realloc_r+0x2cc>
    9b78:	80af883a 	add	r23,r16,r2
    9b7c:	b96f883a 	add	r23,r23,r5
    9b80:	21c05f26 	beq	r4,r7,9d00 <_realloc_r+0x3d4>
    9b84:	b8c01c16 	blt	r23,r3,9bf8 <_realloc_r+0x2cc>
    9b88:	20800317 	ldw	r2,12(r4)
    9b8c:	20c00217 	ldw	r3,8(r4)
    9b90:	81bfff04 	addi	r6,r16,-4
    9b94:	01000904 	movi	r4,36
    9b98:	18800315 	stw	r2,12(r3)
    9b9c:	10c00215 	stw	r3,8(r2)
    9ba0:	b0c00217 	ldw	r3,8(r22)
    9ba4:	b0800317 	ldw	r2,12(r22)
    9ba8:	b4800204 	addi	r18,r22,8
    9bac:	18800315 	stw	r2,12(r3)
    9bb0:	10c00215 	stw	r3,8(r2)
    9bb4:	21801b36 	bltu	r4,r6,9c24 <_realloc_r+0x2f8>
    9bb8:	008004c4 	movi	r2,19
    9bbc:	1180352e 	bgeu	r2,r6,9c94 <_realloc_r+0x368>
    9bc0:	a8800017 	ldw	r2,0(r21)
    9bc4:	b0800215 	stw	r2,8(r22)
    9bc8:	a8800117 	ldw	r2,4(r21)
    9bcc:	b0800315 	stw	r2,12(r22)
    9bd0:	008006c4 	movi	r2,27
    9bd4:	11807f36 	bltu	r2,r6,9dd4 <_realloc_r+0x4a8>
    9bd8:	b0800404 	addi	r2,r22,16
    9bdc:	ad400204 	addi	r21,r21,8
    9be0:	00002d06 	br	9c98 <_realloc_r+0x36c>
    9be4:	adbffe17 	ldw	r22,-8(r21)
    9be8:	00bfff04 	movi	r2,-4
    9bec:	9dadc83a 	sub	r22,r19,r22
    9bf0:	b1000117 	ldw	r4,4(r22)
    9bf4:	2084703a 	and	r2,r4,r2
    9bf8:	b03f7726 	beq	r22,zero,99d8 <__alt_data_end+0xff0099d8>
    9bfc:	80af883a 	add	r23,r16,r2
    9c00:	b8ff7516 	blt	r23,r3,99d8 <__alt_data_end+0xff0099d8>
    9c04:	b0800317 	ldw	r2,12(r22)
    9c08:	b0c00217 	ldw	r3,8(r22)
    9c0c:	81bfff04 	addi	r6,r16,-4
    9c10:	01000904 	movi	r4,36
    9c14:	18800315 	stw	r2,12(r3)
    9c18:	10c00215 	stw	r3,8(r2)
    9c1c:	b4800204 	addi	r18,r22,8
    9c20:	21bfe52e 	bgeu	r4,r6,9bb8 <__alt_data_end+0xff009bb8>
    9c24:	a80b883a 	mov	r5,r21
    9c28:	9009883a 	mov	r4,r18
    9c2c:	00086ac0 	call	86ac <memmove>
    9c30:	b821883a 	mov	r16,r23
    9c34:	b027883a 	mov	r19,r22
    9c38:	003f8a06 	br	9a64 <__alt_data_end+0xff009a64>
    9c3c:	300b883a 	mov	r5,r6
    9c40:	dfc00917 	ldw	ra,36(sp)
    9c44:	df000817 	ldw	fp,32(sp)
    9c48:	ddc00717 	ldw	r23,28(sp)
    9c4c:	dd800617 	ldw	r22,24(sp)
    9c50:	dd400517 	ldw	r21,20(sp)
    9c54:	dd000417 	ldw	r20,16(sp)
    9c58:	dcc00317 	ldw	r19,12(sp)
    9c5c:	dc800217 	ldw	r18,8(sp)
    9c60:	dc400117 	ldw	r17,4(sp)
    9c64:	dc000017 	ldw	r16,0(sp)
    9c68:	dec00a04 	addi	sp,sp,40
    9c6c:	0002a441 	jmpi	2a44 <_malloc_r>
    9c70:	a8c00017 	ldw	r3,0(r21)
    9c74:	90c00015 	stw	r3,0(r18)
    9c78:	a8c00117 	ldw	r3,4(r21)
    9c7c:	90c00115 	stw	r3,4(r18)
    9c80:	00c006c4 	movi	r3,27
    9c84:	19804536 	bltu	r3,r6,9d9c <_realloc_r+0x470>
    9c88:	90800204 	addi	r2,r18,8
    9c8c:	a8c00204 	addi	r3,r21,8
    9c90:	003f6306 	br	9a20 <__alt_data_end+0xff009a20>
    9c94:	9005883a 	mov	r2,r18
    9c98:	a8c00017 	ldw	r3,0(r21)
    9c9c:	b821883a 	mov	r16,r23
    9ca0:	b027883a 	mov	r19,r22
    9ca4:	10c00015 	stw	r3,0(r2)
    9ca8:	a8c00117 	ldw	r3,4(r21)
    9cac:	10c00115 	stw	r3,4(r2)
    9cb0:	a8c00217 	ldw	r3,8(r21)
    9cb4:	10c00215 	stw	r3,8(r2)
    9cb8:	003f6a06 	br	9a64 <__alt_data_end+0xff009a64>
    9cbc:	9c67883a 	add	r19,r19,r17
    9cc0:	4445c83a 	sub	r2,r8,r17
    9cc4:	e4c00215 	stw	r19,8(fp)
    9cc8:	10800054 	ori	r2,r2,1
    9ccc:	98800115 	stw	r2,4(r19)
    9cd0:	a8bfff17 	ldw	r2,-4(r21)
    9cd4:	a009883a 	mov	r4,r20
    9cd8:	1080004c 	andi	r2,r2,1
    9cdc:	1462b03a 	or	r17,r2,r17
    9ce0:	ac7fff15 	stw	r17,-4(r21)
    9ce4:	000ed5c0 	call	ed5c <__malloc_unlock>
    9ce8:	a805883a 	mov	r2,r21
    9cec:	003f6b06 	br	9a9c <__alt_data_end+0xff009a9c>
    9cf0:	a80b883a 	mov	r5,r21
    9cf4:	9009883a 	mov	r4,r18
    9cf8:	00086ac0 	call	86ac <memmove>
    9cfc:	003f4e06 	br	9a38 <__alt_data_end+0xff009a38>
    9d00:	89000404 	addi	r4,r17,16
    9d04:	b93fbc16 	blt	r23,r4,9bf8 <__alt_data_end+0xff009bf8>
    9d08:	b0800317 	ldw	r2,12(r22)
    9d0c:	b0c00217 	ldw	r3,8(r22)
    9d10:	81bfff04 	addi	r6,r16,-4
    9d14:	01000904 	movi	r4,36
    9d18:	18800315 	stw	r2,12(r3)
    9d1c:	10c00215 	stw	r3,8(r2)
    9d20:	b4800204 	addi	r18,r22,8
    9d24:	21804336 	bltu	r4,r6,9e34 <_realloc_r+0x508>
    9d28:	008004c4 	movi	r2,19
    9d2c:	11803f2e 	bgeu	r2,r6,9e2c <_realloc_r+0x500>
    9d30:	a8800017 	ldw	r2,0(r21)
    9d34:	b0800215 	stw	r2,8(r22)
    9d38:	a8800117 	ldw	r2,4(r21)
    9d3c:	b0800315 	stw	r2,12(r22)
    9d40:	008006c4 	movi	r2,27
    9d44:	11803f36 	bltu	r2,r6,9e44 <_realloc_r+0x518>
    9d48:	b0800404 	addi	r2,r22,16
    9d4c:	ad400204 	addi	r21,r21,8
    9d50:	a8c00017 	ldw	r3,0(r21)
    9d54:	10c00015 	stw	r3,0(r2)
    9d58:	a8c00117 	ldw	r3,4(r21)
    9d5c:	10c00115 	stw	r3,4(r2)
    9d60:	a8c00217 	ldw	r3,8(r21)
    9d64:	10c00215 	stw	r3,8(r2)
    9d68:	b447883a 	add	r3,r22,r17
    9d6c:	bc45c83a 	sub	r2,r23,r17
    9d70:	e0c00215 	stw	r3,8(fp)
    9d74:	10800054 	ori	r2,r2,1
    9d78:	18800115 	stw	r2,4(r3)
    9d7c:	b0800117 	ldw	r2,4(r22)
    9d80:	a009883a 	mov	r4,r20
    9d84:	1080004c 	andi	r2,r2,1
    9d88:	1462b03a 	or	r17,r2,r17
    9d8c:	b4400115 	stw	r17,4(r22)
    9d90:	000ed5c0 	call	ed5c <__malloc_unlock>
    9d94:	9005883a 	mov	r2,r18
    9d98:	003f4006 	br	9a9c <__alt_data_end+0xff009a9c>
    9d9c:	a8c00217 	ldw	r3,8(r21)
    9da0:	90c00215 	stw	r3,8(r18)
    9da4:	a8c00317 	ldw	r3,12(r21)
    9da8:	90c00315 	stw	r3,12(r18)
    9dac:	30801126 	beq	r6,r2,9df4 <_realloc_r+0x4c8>
    9db0:	90800404 	addi	r2,r18,16
    9db4:	a8c00404 	addi	r3,r21,16
    9db8:	003f1906 	br	9a20 <__alt_data_end+0xff009a20>
    9dbc:	90ffff17 	ldw	r3,-4(r18)
    9dc0:	00bfff04 	movi	r2,-4
    9dc4:	a825883a 	mov	r18,r21
    9dc8:	1884703a 	and	r2,r3,r2
    9dcc:	80a1883a 	add	r16,r16,r2
    9dd0:	003f2406 	br	9a64 <__alt_data_end+0xff009a64>
    9dd4:	a8800217 	ldw	r2,8(r21)
    9dd8:	b0800415 	stw	r2,16(r22)
    9ddc:	a8800317 	ldw	r2,12(r21)
    9de0:	b0800515 	stw	r2,20(r22)
    9de4:	31000a26 	beq	r6,r4,9e10 <_realloc_r+0x4e4>
    9de8:	b0800604 	addi	r2,r22,24
    9dec:	ad400404 	addi	r21,r21,16
    9df0:	003fa906 	br	9c98 <__alt_data_end+0xff009c98>
    9df4:	a9000417 	ldw	r4,16(r21)
    9df8:	90800604 	addi	r2,r18,24
    9dfc:	a8c00604 	addi	r3,r21,24
    9e00:	91000415 	stw	r4,16(r18)
    9e04:	a9000517 	ldw	r4,20(r21)
    9e08:	91000515 	stw	r4,20(r18)
    9e0c:	003f0406 	br	9a20 <__alt_data_end+0xff009a20>
    9e10:	a8c00417 	ldw	r3,16(r21)
    9e14:	ad400604 	addi	r21,r21,24
    9e18:	b0800804 	addi	r2,r22,32
    9e1c:	b0c00615 	stw	r3,24(r22)
    9e20:	a8ffff17 	ldw	r3,-4(r21)
    9e24:	b0c00715 	stw	r3,28(r22)
    9e28:	003f9b06 	br	9c98 <__alt_data_end+0xff009c98>
    9e2c:	9005883a 	mov	r2,r18
    9e30:	003fc706 	br	9d50 <__alt_data_end+0xff009d50>
    9e34:	a80b883a 	mov	r5,r21
    9e38:	9009883a 	mov	r4,r18
    9e3c:	00086ac0 	call	86ac <memmove>
    9e40:	003fc906 	br	9d68 <__alt_data_end+0xff009d68>
    9e44:	a8800217 	ldw	r2,8(r21)
    9e48:	b0800415 	stw	r2,16(r22)
    9e4c:	a8800317 	ldw	r2,12(r21)
    9e50:	b0800515 	stw	r2,20(r22)
    9e54:	31000726 	beq	r6,r4,9e74 <_realloc_r+0x548>
    9e58:	b0800604 	addi	r2,r22,24
    9e5c:	ad400404 	addi	r21,r21,16
    9e60:	003fbb06 	br	9d50 <__alt_data_end+0xff009d50>
    9e64:	a009883a 	mov	r4,r20
    9e68:	000ed5c0 	call	ed5c <__malloc_unlock>
    9e6c:	0005883a 	mov	r2,zero
    9e70:	003f0a06 	br	9a9c <__alt_data_end+0xff009a9c>
    9e74:	a8c00417 	ldw	r3,16(r21)
    9e78:	ad400604 	addi	r21,r21,24
    9e7c:	b0800804 	addi	r2,r22,32
    9e80:	b0c00615 	stw	r3,24(r22)
    9e84:	a8ffff17 	ldw	r3,-4(r21)
    9e88:	b0c00715 	stw	r3,28(r22)
    9e8c:	003fb006 	br	9d50 <__alt_data_end+0xff009d50>

00009e90 <__fpclassifyd>:
    9e90:	00a00034 	movhi	r2,32768
    9e94:	10bfffc4 	addi	r2,r2,-1
    9e98:	2884703a 	and	r2,r5,r2
    9e9c:	10000726 	beq	r2,zero,9ebc <__fpclassifyd+0x2c>
    9ea0:	00fffc34 	movhi	r3,65520
    9ea4:	019ff834 	movhi	r6,32736
    9ea8:	28c7883a 	add	r3,r5,r3
    9eac:	31bfffc4 	addi	r6,r6,-1
    9eb0:	30c00536 	bltu	r6,r3,9ec8 <__fpclassifyd+0x38>
    9eb4:	00800104 	movi	r2,4
    9eb8:	f800283a 	ret
    9ebc:	2000021e 	bne	r4,zero,9ec8 <__fpclassifyd+0x38>
    9ec0:	00800084 	movi	r2,2
    9ec4:	f800283a 	ret
    9ec8:	00dffc34 	movhi	r3,32752
    9ecc:	019ff834 	movhi	r6,32736
    9ed0:	28cb883a 	add	r5,r5,r3
    9ed4:	31bfffc4 	addi	r6,r6,-1
    9ed8:	317ff62e 	bgeu	r6,r5,9eb4 <__alt_data_end+0xff009eb4>
    9edc:	01400434 	movhi	r5,16
    9ee0:	297fffc4 	addi	r5,r5,-1
    9ee4:	28800236 	bltu	r5,r2,9ef0 <__fpclassifyd+0x60>
    9ee8:	008000c4 	movi	r2,3
    9eec:	f800283a 	ret
    9ef0:	10c00226 	beq	r2,r3,9efc <__fpclassifyd+0x6c>
    9ef4:	0005883a 	mov	r2,zero
    9ef8:	f800283a 	ret
    9efc:	2005003a 	cmpeq	r2,r4,zero
    9f00:	f800283a 	ret

00009f04 <__sread>:
    9f04:	defffe04 	addi	sp,sp,-8
    9f08:	dc000015 	stw	r16,0(sp)
    9f0c:	2821883a 	mov	r16,r5
    9f10:	2940038f 	ldh	r5,14(r5)
    9f14:	dfc00115 	stw	ra,4(sp)
    9f18:	000bcf80 	call	bcf8 <_read_r>
    9f1c:	10000716 	blt	r2,zero,9f3c <__sread+0x38>
    9f20:	80c01417 	ldw	r3,80(r16)
    9f24:	1887883a 	add	r3,r3,r2
    9f28:	80c01415 	stw	r3,80(r16)
    9f2c:	dfc00117 	ldw	ra,4(sp)
    9f30:	dc000017 	ldw	r16,0(sp)
    9f34:	dec00204 	addi	sp,sp,8
    9f38:	f800283a 	ret
    9f3c:	80c0030b 	ldhu	r3,12(r16)
    9f40:	18fbffcc 	andi	r3,r3,61439
    9f44:	80c0030d 	sth	r3,12(r16)
    9f48:	dfc00117 	ldw	ra,4(sp)
    9f4c:	dc000017 	ldw	r16,0(sp)
    9f50:	dec00204 	addi	sp,sp,8
    9f54:	f800283a 	ret

00009f58 <__seofread>:
    9f58:	0005883a 	mov	r2,zero
    9f5c:	f800283a 	ret

00009f60 <__swrite>:
    9f60:	2880030b 	ldhu	r2,12(r5)
    9f64:	defffb04 	addi	sp,sp,-20
    9f68:	dcc00315 	stw	r19,12(sp)
    9f6c:	dc800215 	stw	r18,8(sp)
    9f70:	dc400115 	stw	r17,4(sp)
    9f74:	dc000015 	stw	r16,0(sp)
    9f78:	dfc00415 	stw	ra,16(sp)
    9f7c:	10c0400c 	andi	r3,r2,256
    9f80:	2821883a 	mov	r16,r5
    9f84:	2023883a 	mov	r17,r4
    9f88:	3025883a 	mov	r18,r6
    9f8c:	3827883a 	mov	r19,r7
    9f90:	18000526 	beq	r3,zero,9fa8 <__swrite+0x48>
    9f94:	2940038f 	ldh	r5,14(r5)
    9f98:	01c00084 	movi	r7,2
    9f9c:	000d883a 	mov	r6,zero
    9fa0:	000bc980 	call	bc98 <_lseek_r>
    9fa4:	8080030b 	ldhu	r2,12(r16)
    9fa8:	8140038f 	ldh	r5,14(r16)
    9fac:	10bbffcc 	andi	r2,r2,61439
    9fb0:	980f883a 	mov	r7,r19
    9fb4:	900d883a 	mov	r6,r18
    9fb8:	8809883a 	mov	r4,r17
    9fbc:	8080030d 	sth	r2,12(r16)
    9fc0:	dfc00417 	ldw	ra,16(sp)
    9fc4:	dcc00317 	ldw	r19,12(sp)
    9fc8:	dc800217 	ldw	r18,8(sp)
    9fcc:	dc400117 	ldw	r17,4(sp)
    9fd0:	dc000017 	ldw	r16,0(sp)
    9fd4:	dec00504 	addi	sp,sp,20
    9fd8:	000b7641 	jmpi	b764 <_write_r>

00009fdc <__sseek>:
    9fdc:	defffe04 	addi	sp,sp,-8
    9fe0:	dc000015 	stw	r16,0(sp)
    9fe4:	2821883a 	mov	r16,r5
    9fe8:	2940038f 	ldh	r5,14(r5)
    9fec:	dfc00115 	stw	ra,4(sp)
    9ff0:	000bc980 	call	bc98 <_lseek_r>
    9ff4:	00ffffc4 	movi	r3,-1
    9ff8:	10c00826 	beq	r2,r3,a01c <__sseek+0x40>
    9ffc:	80c0030b 	ldhu	r3,12(r16)
    a000:	80801415 	stw	r2,80(r16)
    a004:	18c40014 	ori	r3,r3,4096
    a008:	80c0030d 	sth	r3,12(r16)
    a00c:	dfc00117 	ldw	ra,4(sp)
    a010:	dc000017 	ldw	r16,0(sp)
    a014:	dec00204 	addi	sp,sp,8
    a018:	f800283a 	ret
    a01c:	80c0030b 	ldhu	r3,12(r16)
    a020:	18fbffcc 	andi	r3,r3,61439
    a024:	80c0030d 	sth	r3,12(r16)
    a028:	dfc00117 	ldw	ra,4(sp)
    a02c:	dc000017 	ldw	r16,0(sp)
    a030:	dec00204 	addi	sp,sp,8
    a034:	f800283a 	ret

0000a038 <__sclose>:
    a038:	2940038f 	ldh	r5,14(r5)
    a03c:	000b7c41 	jmpi	b7c4 <_close_r>

0000a040 <strcmp>:
    a040:	2144b03a 	or	r2,r4,r5
    a044:	108000cc 	andi	r2,r2,3
    a048:	1000171e 	bne	r2,zero,a0a8 <strcmp+0x68>
    a04c:	20800017 	ldw	r2,0(r4)
    a050:	28c00017 	ldw	r3,0(r5)
    a054:	10c0141e 	bne	r2,r3,a0a8 <strcmp+0x68>
    a058:	027fbff4 	movhi	r9,65279
    a05c:	4a7fbfc4 	addi	r9,r9,-257
    a060:	0086303a 	nor	r3,zero,r2
    a064:	02202074 	movhi	r8,32897
    a068:	1245883a 	add	r2,r2,r9
    a06c:	42202004 	addi	r8,r8,-32640
    a070:	10c4703a 	and	r2,r2,r3
    a074:	1204703a 	and	r2,r2,r8
    a078:	10000226 	beq	r2,zero,a084 <strcmp+0x44>
    a07c:	00002306 	br	a10c <strcmp+0xcc>
    a080:	1000221e 	bne	r2,zero,a10c <strcmp+0xcc>
    a084:	21000104 	addi	r4,r4,4
    a088:	20c00017 	ldw	r3,0(r4)
    a08c:	29400104 	addi	r5,r5,4
    a090:	29800017 	ldw	r6,0(r5)
    a094:	1a4f883a 	add	r7,r3,r9
    a098:	00c4303a 	nor	r2,zero,r3
    a09c:	3884703a 	and	r2,r7,r2
    a0a0:	1204703a 	and	r2,r2,r8
    a0a4:	19bff626 	beq	r3,r6,a080 <__alt_data_end+0xff00a080>
    a0a8:	20800003 	ldbu	r2,0(r4)
    a0ac:	10c03fcc 	andi	r3,r2,255
    a0b0:	18c0201c 	xori	r3,r3,128
    a0b4:	18ffe004 	addi	r3,r3,-128
    a0b8:	18000c26 	beq	r3,zero,a0ec <strcmp+0xac>
    a0bc:	29800007 	ldb	r6,0(r5)
    a0c0:	19800326 	beq	r3,r6,a0d0 <strcmp+0x90>
    a0c4:	00001306 	br	a114 <strcmp+0xd4>
    a0c8:	29800007 	ldb	r6,0(r5)
    a0cc:	11800b1e 	bne	r2,r6,a0fc <strcmp+0xbc>
    a0d0:	21000044 	addi	r4,r4,1
    a0d4:	20c00003 	ldbu	r3,0(r4)
    a0d8:	29400044 	addi	r5,r5,1
    a0dc:	18803fcc 	andi	r2,r3,255
    a0e0:	1080201c 	xori	r2,r2,128
    a0e4:	10bfe004 	addi	r2,r2,-128
    a0e8:	103ff71e 	bne	r2,zero,a0c8 <__alt_data_end+0xff00a0c8>
    a0ec:	0007883a 	mov	r3,zero
    a0f0:	28800003 	ldbu	r2,0(r5)
    a0f4:	1885c83a 	sub	r2,r3,r2
    a0f8:	f800283a 	ret
    a0fc:	28800003 	ldbu	r2,0(r5)
    a100:	18c03fcc 	andi	r3,r3,255
    a104:	1885c83a 	sub	r2,r3,r2
    a108:	f800283a 	ret
    a10c:	0005883a 	mov	r2,zero
    a110:	f800283a 	ret
    a114:	10c03fcc 	andi	r3,r2,255
    a118:	003ff506 	br	a0f0 <__alt_data_end+0xff00a0f0>

0000a11c <__sprint_r.part.0>:
    a11c:	28801917 	ldw	r2,100(r5)
    a120:	defff604 	addi	sp,sp,-40
    a124:	dd400515 	stw	r21,20(sp)
    a128:	dfc00915 	stw	ra,36(sp)
    a12c:	df000815 	stw	fp,32(sp)
    a130:	ddc00715 	stw	r23,28(sp)
    a134:	dd800615 	stw	r22,24(sp)
    a138:	dd000415 	stw	r20,16(sp)
    a13c:	dcc00315 	stw	r19,12(sp)
    a140:	dc800215 	stw	r18,8(sp)
    a144:	dc400115 	stw	r17,4(sp)
    a148:	dc000015 	stw	r16,0(sp)
    a14c:	1088000c 	andi	r2,r2,8192
    a150:	302b883a 	mov	r21,r6
    a154:	10002e26 	beq	r2,zero,a210 <__sprint_r.part.0+0xf4>
    a158:	30800217 	ldw	r2,8(r6)
    a15c:	35800017 	ldw	r22,0(r6)
    a160:	10002926 	beq	r2,zero,a208 <__sprint_r.part.0+0xec>
    a164:	2827883a 	mov	r19,r5
    a168:	2029883a 	mov	r20,r4
    a16c:	b5c00104 	addi	r23,r22,4
    a170:	04bfffc4 	movi	r18,-1
    a174:	bc400017 	ldw	r17,0(r23)
    a178:	b4000017 	ldw	r16,0(r22)
    a17c:	0039883a 	mov	fp,zero
    a180:	8822d0ba 	srli	r17,r17,2
    a184:	8800031e 	bne	r17,zero,a194 <__sprint_r.part.0+0x78>
    a188:	00001806 	br	a1ec <__sprint_r.part.0+0xd0>
    a18c:	84000104 	addi	r16,r16,4
    a190:	8f001526 	beq	r17,fp,a1e8 <__sprint_r.part.0+0xcc>
    a194:	81400017 	ldw	r5,0(r16)
    a198:	980d883a 	mov	r6,r19
    a19c:	a009883a 	mov	r4,r20
    a1a0:	000bb440 	call	bb44 <_fputwc_r>
    a1a4:	e7000044 	addi	fp,fp,1
    a1a8:	14bff81e 	bne	r2,r18,a18c <__alt_data_end+0xff00a18c>
    a1ac:	9005883a 	mov	r2,r18
    a1b0:	a8000215 	stw	zero,8(r21)
    a1b4:	a8000115 	stw	zero,4(r21)
    a1b8:	dfc00917 	ldw	ra,36(sp)
    a1bc:	df000817 	ldw	fp,32(sp)
    a1c0:	ddc00717 	ldw	r23,28(sp)
    a1c4:	dd800617 	ldw	r22,24(sp)
    a1c8:	dd400517 	ldw	r21,20(sp)
    a1cc:	dd000417 	ldw	r20,16(sp)
    a1d0:	dcc00317 	ldw	r19,12(sp)
    a1d4:	dc800217 	ldw	r18,8(sp)
    a1d8:	dc400117 	ldw	r17,4(sp)
    a1dc:	dc000017 	ldw	r16,0(sp)
    a1e0:	dec00a04 	addi	sp,sp,40
    a1e4:	f800283a 	ret
    a1e8:	a8800217 	ldw	r2,8(r21)
    a1ec:	8c63883a 	add	r17,r17,r17
    a1f0:	8c63883a 	add	r17,r17,r17
    a1f4:	1445c83a 	sub	r2,r2,r17
    a1f8:	a8800215 	stw	r2,8(r21)
    a1fc:	b5800204 	addi	r22,r22,8
    a200:	bdc00204 	addi	r23,r23,8
    a204:	103fdb1e 	bne	r2,zero,a174 <__alt_data_end+0xff00a174>
    a208:	0005883a 	mov	r2,zero
    a20c:	003fe806 	br	a1b0 <__alt_data_end+0xff00a1b0>
    a210:	0007ba40 	call	7ba4 <__sfvwrite_r>
    a214:	003fe606 	br	a1b0 <__alt_data_end+0xff00a1b0>

0000a218 <__sprint_r>:
    a218:	30c00217 	ldw	r3,8(r6)
    a21c:	18000126 	beq	r3,zero,a224 <__sprint_r+0xc>
    a220:	000a11c1 	jmpi	a11c <__sprint_r.part.0>
    a224:	30000115 	stw	zero,4(r6)
    a228:	0005883a 	mov	r2,zero
    a22c:	f800283a 	ret

0000a230 <___vfiprintf_internal_r>:
    a230:	deffc904 	addi	sp,sp,-220
    a234:	df003515 	stw	fp,212(sp)
    a238:	dd003115 	stw	r20,196(sp)
    a23c:	dfc03615 	stw	ra,216(sp)
    a240:	ddc03415 	stw	r23,208(sp)
    a244:	dd803315 	stw	r22,204(sp)
    a248:	dd403215 	stw	r21,200(sp)
    a24c:	dcc03015 	stw	r19,192(sp)
    a250:	dc802f15 	stw	r18,188(sp)
    a254:	dc402e15 	stw	r17,184(sp)
    a258:	dc002d15 	stw	r16,180(sp)
    a25c:	d9002015 	stw	r4,128(sp)
    a260:	d9c02215 	stw	r7,136(sp)
    a264:	2829883a 	mov	r20,r5
    a268:	3039883a 	mov	fp,r6
    a26c:	20000226 	beq	r4,zero,a278 <___vfiprintf_internal_r+0x48>
    a270:	20800e17 	ldw	r2,56(r4)
    a274:	1000cf26 	beq	r2,zero,a5b4 <___vfiprintf_internal_r+0x384>
    a278:	a080030b 	ldhu	r2,12(r20)
    a27c:	10c8000c 	andi	r3,r2,8192
    a280:	1800061e 	bne	r3,zero,a29c <___vfiprintf_internal_r+0x6c>
    a284:	a1001917 	ldw	r4,100(r20)
    a288:	00f7ffc4 	movi	r3,-8193
    a28c:	10880014 	ori	r2,r2,8192
    a290:	20c6703a 	and	r3,r4,r3
    a294:	a080030d 	sth	r2,12(r20)
    a298:	a0c01915 	stw	r3,100(r20)
    a29c:	10c0020c 	andi	r3,r2,8
    a2a0:	1800a926 	beq	r3,zero,a548 <___vfiprintf_internal_r+0x318>
    a2a4:	a0c00417 	ldw	r3,16(r20)
    a2a8:	1800a726 	beq	r3,zero,a548 <___vfiprintf_internal_r+0x318>
    a2ac:	1080068c 	andi	r2,r2,26
    a2b0:	00c00284 	movi	r3,10
    a2b4:	10c0ac26 	beq	r2,r3,a568 <___vfiprintf_internal_r+0x338>
    a2b8:	da801a04 	addi	r10,sp,104
    a2bc:	da801e15 	stw	r10,120(sp)
    a2c0:	d8801e17 	ldw	r2,120(sp)
    a2c4:	da8019c4 	addi	r10,sp,103
    a2c8:	05800074 	movhi	r22,1
    a2cc:	05c00074 	movhi	r23,1
    a2d0:	da801f15 	stw	r10,124(sp)
    a2d4:	1295c83a 	sub	r10,r2,r10
    a2d8:	b5870c04 	addi	r22,r22,7216
    a2dc:	bdc70804 	addi	r23,r23,7200
    a2e0:	dec01a15 	stw	sp,104(sp)
    a2e4:	d8001c15 	stw	zero,112(sp)
    a2e8:	d8001b15 	stw	zero,108(sp)
    a2ec:	d8002615 	stw	zero,152(sp)
    a2f0:	d8002315 	stw	zero,140(sp)
    a2f4:	da802715 	stw	r10,156(sp)
    a2f8:	d811883a 	mov	r8,sp
    a2fc:	dd002115 	stw	r20,132(sp)
    a300:	e021883a 	mov	r16,fp
    a304:	80800007 	ldb	r2,0(r16)
    a308:	1003ea26 	beq	r2,zero,b2b4 <___vfiprintf_internal_r+0x1084>
    a30c:	00c00944 	movi	r3,37
    a310:	8025883a 	mov	r18,r16
    a314:	10c0021e 	bne	r2,r3,a320 <___vfiprintf_internal_r+0xf0>
    a318:	00001606 	br	a374 <___vfiprintf_internal_r+0x144>
    a31c:	10c00326 	beq	r2,r3,a32c <___vfiprintf_internal_r+0xfc>
    a320:	94800044 	addi	r18,r18,1
    a324:	90800007 	ldb	r2,0(r18)
    a328:	103ffc1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a32c:	9423c83a 	sub	r17,r18,r16
    a330:	88001026 	beq	r17,zero,a374 <___vfiprintf_internal_r+0x144>
    a334:	d8c01c17 	ldw	r3,112(sp)
    a338:	d8801b17 	ldw	r2,108(sp)
    a33c:	44000015 	stw	r16,0(r8)
    a340:	88c7883a 	add	r3,r17,r3
    a344:	10800044 	addi	r2,r2,1
    a348:	44400115 	stw	r17,4(r8)
    a34c:	d8c01c15 	stw	r3,112(sp)
    a350:	d8801b15 	stw	r2,108(sp)
    a354:	010001c4 	movi	r4,7
    a358:	2080760e 	bge	r4,r2,a534 <___vfiprintf_internal_r+0x304>
    a35c:	1803821e 	bne	r3,zero,b168 <___vfiprintf_internal_r+0xf38>
    a360:	da802317 	ldw	r10,140(sp)
    a364:	d8001b15 	stw	zero,108(sp)
    a368:	d811883a 	mov	r8,sp
    a36c:	5455883a 	add	r10,r10,r17
    a370:	da802315 	stw	r10,140(sp)
    a374:	90800007 	ldb	r2,0(r18)
    a378:	10044626 	beq	r2,zero,b494 <___vfiprintf_internal_r+0x1264>
    a37c:	90c00047 	ldb	r3,1(r18)
    a380:	94000044 	addi	r16,r18,1
    a384:	d8001d85 	stb	zero,118(sp)
    a388:	0009883a 	mov	r4,zero
    a38c:	000f883a 	mov	r7,zero
    a390:	027fffc4 	movi	r9,-1
    a394:	0023883a 	mov	r17,zero
    a398:	0029883a 	mov	r20,zero
    a39c:	01401604 	movi	r5,88
    a3a0:	01800244 	movi	r6,9
    a3a4:	03400a84 	movi	r13,42
    a3a8:	03001b04 	movi	r12,108
    a3ac:	84000044 	addi	r16,r16,1
    a3b0:	18bff804 	addi	r2,r3,-32
    a3b4:	28827336 	bltu	r5,r2,ad84 <___vfiprintf_internal_r+0xb54>
    a3b8:	100490ba 	slli	r2,r2,2
    a3bc:	02800074 	movhi	r10,1
    a3c0:	52a8f404 	addi	r10,r10,-23600
    a3c4:	1285883a 	add	r2,r2,r10
    a3c8:	10800017 	ldw	r2,0(r2)
    a3cc:	1000683a 	jmp	r2
    a3d0:	0000aab8 	rdprs	zero,zero,682
    a3d4:	0000ad84 	movi	zero,694
    a3d8:	0000ad84 	movi	zero,694
    a3dc:	0000aad8 	cmpnei	zero,zero,683
    a3e0:	0000ad84 	movi	zero,694
    a3e4:	0000ad84 	movi	zero,694
    a3e8:	0000ad84 	movi	zero,694
    a3ec:	0000ad84 	movi	zero,694
    a3f0:	0000ad84 	movi	zero,694
    a3f4:	0000ad84 	movi	zero,694
    a3f8:	0000acc0 	call	acc <conv_grayscale+0x74>
    a3fc:	0000acdc 	xori	zero,zero,691
    a400:	0000ad84 	movi	zero,694
    a404:	0000a5c4 	movi	zero,663
    a408:	0000acec 	andhi	zero,zero,691
    a40c:	0000ad84 	movi	zero,694
    a410:	0000aae4 	muli	zero,zero,683
    a414:	0000aaf0 	cmpltui	zero,zero,683
    a418:	0000aaf0 	cmpltui	zero,zero,683
    a41c:	0000aaf0 	cmpltui	zero,zero,683
    a420:	0000aaf0 	cmpltui	zero,zero,683
    a424:	0000aaf0 	cmpltui	zero,zero,683
    a428:	0000aaf0 	cmpltui	zero,zero,683
    a42c:	0000aaf0 	cmpltui	zero,zero,683
    a430:	0000aaf0 	cmpltui	zero,zero,683
    a434:	0000aaf0 	cmpltui	zero,zero,683
    a438:	0000ad84 	movi	zero,694
    a43c:	0000ad84 	movi	zero,694
    a440:	0000ad84 	movi	zero,694
    a444:	0000ad84 	movi	zero,694
    a448:	0000ad84 	movi	zero,694
    a44c:	0000ad84 	movi	zero,694
    a450:	0000ad84 	movi	zero,694
    a454:	0000ad84 	movi	zero,694
    a458:	0000ad84 	movi	zero,694
    a45c:	0000ad84 	movi	zero,694
    a460:	0000ab1c 	xori	zero,zero,684
    a464:	0000ad84 	movi	zero,694
    a468:	0000ad84 	movi	zero,694
    a46c:	0000ad84 	movi	zero,694
    a470:	0000ad84 	movi	zero,694
    a474:	0000ad84 	movi	zero,694
    a478:	0000ad84 	movi	zero,694
    a47c:	0000ad84 	movi	zero,694
    a480:	0000ad84 	movi	zero,694
    a484:	0000ad84 	movi	zero,694
    a488:	0000ad84 	movi	zero,694
    a48c:	0000ab54 	movui	zero,685
    a490:	0000ad84 	movi	zero,694
    a494:	0000ad84 	movi	zero,694
    a498:	0000ad84 	movi	zero,694
    a49c:	0000ad84 	movi	zero,694
    a4a0:	0000ad84 	movi	zero,694
    a4a4:	0000abac 	andhi	zero,zero,686
    a4a8:	0000ad84 	movi	zero,694
    a4ac:	0000ad84 	movi	zero,694
    a4b0:	0000ac1c 	xori	zero,zero,688
    a4b4:	0000ad84 	movi	zero,694
    a4b8:	0000ad84 	movi	zero,694
    a4bc:	0000ad84 	movi	zero,694
    a4c0:	0000ad84 	movi	zero,694
    a4c4:	0000ad84 	movi	zero,694
    a4c8:	0000ad84 	movi	zero,694
    a4cc:	0000ad84 	movi	zero,694
    a4d0:	0000ad84 	movi	zero,694
    a4d4:	0000ad84 	movi	zero,694
    a4d8:	0000ad84 	movi	zero,694
    a4dc:	0000a9c8 	cmpgei	zero,zero,679
    a4e0:	0000a9f4 	movhi	zero,679
    a4e4:	0000ad84 	movi	zero,694
    a4e8:	0000ad84 	movi	zero,694
    a4ec:	0000ad84 	movi	zero,694
    a4f0:	0000ad2c 	andhi	zero,zero,692
    a4f4:	0000a9f4 	movhi	zero,679
    a4f8:	0000ad84 	movi	zero,694
    a4fc:	0000ad84 	movi	zero,694
    a500:	0000a888 	cmpgei	zero,zero,674
    a504:	0000ad84 	movi	zero,694
    a508:	0000a898 	cmpnei	zero,zero,674
    a50c:	0000a8d4 	movui	zero,675
    a510:	0000a5d0 	cmplti	zero,zero,663
    a514:	0000a87c 	xorhi	zero,zero,673
    a518:	0000ad84 	movi	zero,694
    a51c:	0000ac58 	cmpnei	zero,zero,689
    a520:	0000ad84 	movi	zero,694
    a524:	0000acb0 	cmpltui	zero,zero,690
    a528:	0000ad84 	movi	zero,694
    a52c:	0000ad84 	movi	zero,694
    a530:	0000a974 	movhi	zero,677
    a534:	42000204 	addi	r8,r8,8
    a538:	da802317 	ldw	r10,140(sp)
    a53c:	5455883a 	add	r10,r10,r17
    a540:	da802315 	stw	r10,140(sp)
    a544:	003f8b06 	br	a374 <__alt_data_end+0xff00a374>
    a548:	d9002017 	ldw	r4,128(sp)
    a54c:	a00b883a 	mov	r5,r20
    a550:	000574c0 	call	574c <__swsetup_r>
    a554:	1003b11e 	bne	r2,zero,b41c <___vfiprintf_internal_r+0x11ec>
    a558:	a080030b 	ldhu	r2,12(r20)
    a55c:	00c00284 	movi	r3,10
    a560:	1080068c 	andi	r2,r2,26
    a564:	10ff541e 	bne	r2,r3,a2b8 <__alt_data_end+0xff00a2b8>
    a568:	a080038f 	ldh	r2,14(r20)
    a56c:	103f5216 	blt	r2,zero,a2b8 <__alt_data_end+0xff00a2b8>
    a570:	d9c02217 	ldw	r7,136(sp)
    a574:	d9002017 	ldw	r4,128(sp)
    a578:	e00d883a 	mov	r6,fp
    a57c:	a00b883a 	mov	r5,r20
    a580:	000b6a80 	call	b6a8 <__sbprintf>
    a584:	dfc03617 	ldw	ra,216(sp)
    a588:	df003517 	ldw	fp,212(sp)
    a58c:	ddc03417 	ldw	r23,208(sp)
    a590:	dd803317 	ldw	r22,204(sp)
    a594:	dd403217 	ldw	r21,200(sp)
    a598:	dd003117 	ldw	r20,196(sp)
    a59c:	dcc03017 	ldw	r19,192(sp)
    a5a0:	dc802f17 	ldw	r18,188(sp)
    a5a4:	dc402e17 	ldw	r17,184(sp)
    a5a8:	dc002d17 	ldw	r16,180(sp)
    a5ac:	dec03704 	addi	sp,sp,220
    a5b0:	f800283a 	ret
    a5b4:	00077200 	call	7720 <__sinit>
    a5b8:	003f2f06 	br	a278 <__alt_data_end+0xff00a278>
    a5bc:	0463c83a 	sub	r17,zero,r17
    a5c0:	d8802215 	stw	r2,136(sp)
    a5c4:	a5000114 	ori	r20,r20,4
    a5c8:	80c00007 	ldb	r3,0(r16)
    a5cc:	003f7706 	br	a3ac <__alt_data_end+0xff00a3ac>
    a5d0:	00800c04 	movi	r2,48
    a5d4:	da802217 	ldw	r10,136(sp)
    a5d8:	d8801d05 	stb	r2,116(sp)
    a5dc:	00801e04 	movi	r2,120
    a5e0:	d8801d45 	stb	r2,117(sp)
    a5e4:	d8001d85 	stb	zero,118(sp)
    a5e8:	50c00104 	addi	r3,r10,4
    a5ec:	54800017 	ldw	r18,0(r10)
    a5f0:	0027883a 	mov	r19,zero
    a5f4:	a0800094 	ori	r2,r20,2
    a5f8:	48030b16 	blt	r9,zero,b228 <___vfiprintf_internal_r+0xff8>
    a5fc:	00bfdfc4 	movi	r2,-129
    a600:	a096703a 	and	r11,r20,r2
    a604:	d8c02215 	stw	r3,136(sp)
    a608:	5d000094 	ori	r20,r11,2
    a60c:	90032b1e 	bne	r18,zero,b2bc <___vfiprintf_internal_r+0x108c>
    a610:	00800074 	movhi	r2,1
    a614:	1086a704 	addi	r2,r2,6812
    a618:	d8802615 	stw	r2,152(sp)
    a61c:	0039883a 	mov	fp,zero
    a620:	48017b1e 	bne	r9,zero,ac10 <___vfiprintf_internal_r+0x9e0>
    a624:	0013883a 	mov	r9,zero
    a628:	0027883a 	mov	r19,zero
    a62c:	dd401a04 	addi	r21,sp,104
    a630:	4825883a 	mov	r18,r9
    a634:	4cc0010e 	bge	r9,r19,a63c <___vfiprintf_internal_r+0x40c>
    a638:	9825883a 	mov	r18,r19
    a63c:	e7003fcc 	andi	fp,fp,255
    a640:	e700201c 	xori	fp,fp,128
    a644:	e73fe004 	addi	fp,fp,-128
    a648:	e0000126 	beq	fp,zero,a650 <___vfiprintf_internal_r+0x420>
    a64c:	94800044 	addi	r18,r18,1
    a650:	a380008c 	andi	r14,r20,2
    a654:	70000126 	beq	r14,zero,a65c <___vfiprintf_internal_r+0x42c>
    a658:	94800084 	addi	r18,r18,2
    a65c:	a700210c 	andi	fp,r20,132
    a660:	e001df1e 	bne	fp,zero,ade0 <___vfiprintf_internal_r+0xbb0>
    a664:	8c87c83a 	sub	r3,r17,r18
    a668:	00c1dd0e 	bge	zero,r3,ade0 <___vfiprintf_internal_r+0xbb0>
    a66c:	01c00404 	movi	r7,16
    a670:	d8801c17 	ldw	r2,112(sp)
    a674:	38c3ad0e 	bge	r7,r3,b52c <___vfiprintf_internal_r+0x12fc>
    a678:	02800074 	movhi	r10,1
    a67c:	52870c04 	addi	r10,r10,7216
    a680:	dc002915 	stw	r16,164(sp)
    a684:	d9801b17 	ldw	r6,108(sp)
    a688:	da802415 	stw	r10,144(sp)
    a68c:	03c001c4 	movi	r15,7
    a690:	da402515 	stw	r9,148(sp)
    a694:	db802815 	stw	r14,160(sp)
    a698:	1821883a 	mov	r16,r3
    a69c:	00000506 	br	a6b4 <___vfiprintf_internal_r+0x484>
    a6a0:	31400084 	addi	r5,r6,2
    a6a4:	42000204 	addi	r8,r8,8
    a6a8:	200d883a 	mov	r6,r4
    a6ac:	843ffc04 	addi	r16,r16,-16
    a6b0:	3c000d0e 	bge	r7,r16,a6e8 <___vfiprintf_internal_r+0x4b8>
    a6b4:	10800404 	addi	r2,r2,16
    a6b8:	31000044 	addi	r4,r6,1
    a6bc:	45800015 	stw	r22,0(r8)
    a6c0:	41c00115 	stw	r7,4(r8)
    a6c4:	d8801c15 	stw	r2,112(sp)
    a6c8:	d9001b15 	stw	r4,108(sp)
    a6cc:	793ff40e 	bge	r15,r4,a6a0 <__alt_data_end+0xff00a6a0>
    a6d0:	1001b51e 	bne	r2,zero,ada8 <___vfiprintf_internal_r+0xb78>
    a6d4:	843ffc04 	addi	r16,r16,-16
    a6d8:	000d883a 	mov	r6,zero
    a6dc:	01400044 	movi	r5,1
    a6e0:	d811883a 	mov	r8,sp
    a6e4:	3c3ff316 	blt	r7,r16,a6b4 <__alt_data_end+0xff00a6b4>
    a6e8:	8007883a 	mov	r3,r16
    a6ec:	da402517 	ldw	r9,148(sp)
    a6f0:	db802817 	ldw	r14,160(sp)
    a6f4:	dc002917 	ldw	r16,164(sp)
    a6f8:	da802417 	ldw	r10,144(sp)
    a6fc:	1885883a 	add	r2,r3,r2
    a700:	40c00115 	stw	r3,4(r8)
    a704:	42800015 	stw	r10,0(r8)
    a708:	d8801c15 	stw	r2,112(sp)
    a70c:	d9401b15 	stw	r5,108(sp)
    a710:	00c001c4 	movi	r3,7
    a714:	19426016 	blt	r3,r5,b098 <___vfiprintf_internal_r+0xe68>
    a718:	d8c01d87 	ldb	r3,118(sp)
    a71c:	42000204 	addi	r8,r8,8
    a720:	29000044 	addi	r4,r5,1
    a724:	1801b31e 	bne	r3,zero,adf4 <___vfiprintf_internal_r+0xbc4>
    a728:	7001c026 	beq	r14,zero,ae2c <___vfiprintf_internal_r+0xbfc>
    a72c:	d8c01d04 	addi	r3,sp,116
    a730:	10800084 	addi	r2,r2,2
    a734:	40c00015 	stw	r3,0(r8)
    a738:	00c00084 	movi	r3,2
    a73c:	40c00115 	stw	r3,4(r8)
    a740:	d8801c15 	stw	r2,112(sp)
    a744:	d9001b15 	stw	r4,108(sp)
    a748:	00c001c4 	movi	r3,7
    a74c:	1902650e 	bge	r3,r4,b0e4 <___vfiprintf_internal_r+0xeb4>
    a750:	10029a1e 	bne	r2,zero,b1bc <___vfiprintf_internal_r+0xf8c>
    a754:	00c02004 	movi	r3,128
    a758:	01000044 	movi	r4,1
    a75c:	000b883a 	mov	r5,zero
    a760:	d811883a 	mov	r8,sp
    a764:	e0c1b31e 	bne	fp,r3,ae34 <___vfiprintf_internal_r+0xc04>
    a768:	8cb9c83a 	sub	fp,r17,r18
    a76c:	0701b10e 	bge	zero,fp,ae34 <___vfiprintf_internal_r+0xc04>
    a770:	01c00404 	movi	r7,16
    a774:	3f03890e 	bge	r7,fp,b59c <___vfiprintf_internal_r+0x136c>
    a778:	00c00074 	movhi	r3,1
    a77c:	18c70804 	addi	r3,r3,7200
    a780:	d8c02415 	stw	r3,144(sp)
    a784:	8007883a 	mov	r3,r16
    a788:	034001c4 	movi	r13,7
    a78c:	e021883a 	mov	r16,fp
    a790:	da402515 	stw	r9,148(sp)
    a794:	1839883a 	mov	fp,r3
    a798:	00000506 	br	a7b0 <___vfiprintf_internal_r+0x580>
    a79c:	29800084 	addi	r6,r5,2
    a7a0:	42000204 	addi	r8,r8,8
    a7a4:	180b883a 	mov	r5,r3
    a7a8:	843ffc04 	addi	r16,r16,-16
    a7ac:	3c000d0e 	bge	r7,r16,a7e4 <___vfiprintf_internal_r+0x5b4>
    a7b0:	10800404 	addi	r2,r2,16
    a7b4:	28c00044 	addi	r3,r5,1
    a7b8:	45c00015 	stw	r23,0(r8)
    a7bc:	41c00115 	stw	r7,4(r8)
    a7c0:	d8801c15 	stw	r2,112(sp)
    a7c4:	d8c01b15 	stw	r3,108(sp)
    a7c8:	68fff40e 	bge	r13,r3,a79c <__alt_data_end+0xff00a79c>
    a7cc:	1002241e 	bne	r2,zero,b060 <___vfiprintf_internal_r+0xe30>
    a7d0:	843ffc04 	addi	r16,r16,-16
    a7d4:	01800044 	movi	r6,1
    a7d8:	000b883a 	mov	r5,zero
    a7dc:	d811883a 	mov	r8,sp
    a7e0:	3c3ff316 	blt	r7,r16,a7b0 <__alt_data_end+0xff00a7b0>
    a7e4:	da402517 	ldw	r9,148(sp)
    a7e8:	e007883a 	mov	r3,fp
    a7ec:	8039883a 	mov	fp,r16
    a7f0:	1821883a 	mov	r16,r3
    a7f4:	d8c02417 	ldw	r3,144(sp)
    a7f8:	1705883a 	add	r2,r2,fp
    a7fc:	47000115 	stw	fp,4(r8)
    a800:	40c00015 	stw	r3,0(r8)
    a804:	d8801c15 	stw	r2,112(sp)
    a808:	d9801b15 	stw	r6,108(sp)
    a80c:	00c001c4 	movi	r3,7
    a810:	19827616 	blt	r3,r6,b1ec <___vfiprintf_internal_r+0xfbc>
    a814:	4cf9c83a 	sub	fp,r9,r19
    a818:	42000204 	addi	r8,r8,8
    a81c:	31000044 	addi	r4,r6,1
    a820:	300b883a 	mov	r5,r6
    a824:	07018516 	blt	zero,fp,ae3c <___vfiprintf_internal_r+0xc0c>
    a828:	9885883a 	add	r2,r19,r2
    a82c:	45400015 	stw	r21,0(r8)
    a830:	44c00115 	stw	r19,4(r8)
    a834:	d8801c15 	stw	r2,112(sp)
    a838:	d9001b15 	stw	r4,108(sp)
    a83c:	00c001c4 	movi	r3,7
    a840:	1901dd0e 	bge	r3,r4,afb8 <___vfiprintf_internal_r+0xd88>
    a844:	1002401e 	bne	r2,zero,b148 <___vfiprintf_internal_r+0xf18>
    a848:	d8001b15 	stw	zero,108(sp)
    a84c:	a2c0010c 	andi	r11,r20,4
    a850:	58000226 	beq	r11,zero,a85c <___vfiprintf_internal_r+0x62c>
    a854:	8ca7c83a 	sub	r19,r17,r18
    a858:	04c2f216 	blt	zero,r19,b424 <___vfiprintf_internal_r+0x11f4>
    a85c:	8c80010e 	bge	r17,r18,a864 <___vfiprintf_internal_r+0x634>
    a860:	9023883a 	mov	r17,r18
    a864:	da802317 	ldw	r10,140(sp)
    a868:	5455883a 	add	r10,r10,r17
    a86c:	da802315 	stw	r10,140(sp)
    a870:	d8001b15 	stw	zero,108(sp)
    a874:	d811883a 	mov	r8,sp
    a878:	003ea206 	br	a304 <__alt_data_end+0xff00a304>
    a87c:	a5000814 	ori	r20,r20,32
    a880:	80c00007 	ldb	r3,0(r16)
    a884:	003ec906 	br	a3ac <__alt_data_end+0xff00a3ac>
    a888:	80c00007 	ldb	r3,0(r16)
    a88c:	1b030926 	beq	r3,r12,b4b4 <___vfiprintf_internal_r+0x1284>
    a890:	a5000414 	ori	r20,r20,16
    a894:	003ec506 	br	a3ac <__alt_data_end+0xff00a3ac>
    a898:	21003fcc 	andi	r4,r4,255
    a89c:	20035e1e 	bne	r4,zero,b618 <___vfiprintf_internal_r+0x13e8>
    a8a0:	a080080c 	andi	r2,r20,32
    a8a4:	1002a526 	beq	r2,zero,b33c <___vfiprintf_internal_r+0x110c>
    a8a8:	da802217 	ldw	r10,136(sp)
    a8ac:	50800017 	ldw	r2,0(r10)
    a8b0:	da802317 	ldw	r10,140(sp)
    a8b4:	5007d7fa 	srai	r3,r10,31
    a8b8:	da802217 	ldw	r10,136(sp)
    a8bc:	10c00115 	stw	r3,4(r2)
    a8c0:	52800104 	addi	r10,r10,4
    a8c4:	da802215 	stw	r10,136(sp)
    a8c8:	da802317 	ldw	r10,140(sp)
    a8cc:	12800015 	stw	r10,0(r2)
    a8d0:	003e8c06 	br	a304 <__alt_data_end+0xff00a304>
    a8d4:	21003fcc 	andi	r4,r4,255
    a8d8:	2003511e 	bne	r4,zero,b620 <___vfiprintf_internal_r+0x13f0>
    a8dc:	a080080c 	andi	r2,r20,32
    a8e0:	1000a126 	beq	r2,zero,ab68 <___vfiprintf_internal_r+0x938>
    a8e4:	da802217 	ldw	r10,136(sp)
    a8e8:	d8001d85 	stb	zero,118(sp)
    a8ec:	50800204 	addi	r2,r10,8
    a8f0:	54800017 	ldw	r18,0(r10)
    a8f4:	54c00117 	ldw	r19,4(r10)
    a8f8:	4802b416 	blt	r9,zero,b3cc <___vfiprintf_internal_r+0x119c>
    a8fc:	013fdfc4 	movi	r4,-129
    a900:	94c6b03a 	or	r3,r18,r19
    a904:	d8802215 	stw	r2,136(sp)
    a908:	a128703a 	and	r20,r20,r4
    a90c:	1800a226 	beq	r3,zero,ab98 <___vfiprintf_internal_r+0x968>
    a910:	0039883a 	mov	fp,zero
    a914:	dd401a04 	addi	r21,sp,104
    a918:	9006d0fa 	srli	r3,r18,3
    a91c:	9808977a 	slli	r4,r19,29
    a920:	9826d0fa 	srli	r19,r19,3
    a924:	948001cc 	andi	r18,r18,7
    a928:	90800c04 	addi	r2,r18,48
    a92c:	ad7fffc4 	addi	r21,r21,-1
    a930:	20e4b03a 	or	r18,r4,r3
    a934:	a8800005 	stb	r2,0(r21)
    a938:	94c6b03a 	or	r3,r18,r19
    a93c:	183ff61e 	bne	r3,zero,a918 <__alt_data_end+0xff00a918>
    a940:	a0c0004c 	andi	r3,r20,1
    a944:	18005926 	beq	r3,zero,aaac <___vfiprintf_internal_r+0x87c>
    a948:	10803fcc 	andi	r2,r2,255
    a94c:	1080201c 	xori	r2,r2,128
    a950:	10bfe004 	addi	r2,r2,-128
    a954:	00c00c04 	movi	r3,48
    a958:	10c05426 	beq	r2,r3,aaac <___vfiprintf_internal_r+0x87c>
    a95c:	da801e17 	ldw	r10,120(sp)
    a960:	a8bfffc4 	addi	r2,r21,-1
    a964:	a8ffffc5 	stb	r3,-1(r21)
    a968:	50a7c83a 	sub	r19,r10,r2
    a96c:	102b883a 	mov	r21,r2
    a970:	003f2f06 	br	a630 <__alt_data_end+0xff00a630>
    a974:	21003fcc 	andi	r4,r4,255
    a978:	2003421e 	bne	r4,zero,b684 <___vfiprintf_internal_r+0x1454>
    a97c:	00800074 	movhi	r2,1
    a980:	1086a704 	addi	r2,r2,6812
    a984:	d8802615 	stw	r2,152(sp)
    a988:	a080080c 	andi	r2,r20,32
    a98c:	1000aa26 	beq	r2,zero,ac38 <___vfiprintf_internal_r+0xa08>
    a990:	da802217 	ldw	r10,136(sp)
    a994:	54800017 	ldw	r18,0(r10)
    a998:	54c00117 	ldw	r19,4(r10)
    a99c:	52800204 	addi	r10,r10,8
    a9a0:	da802215 	stw	r10,136(sp)
    a9a4:	a080004c 	andi	r2,r20,1
    a9a8:	1001d226 	beq	r2,zero,b0f4 <___vfiprintf_internal_r+0xec4>
    a9ac:	94c4b03a 	or	r2,r18,r19
    a9b0:	1002351e 	bne	r2,zero,b288 <___vfiprintf_internal_r+0x1058>
    a9b4:	d8001d85 	stb	zero,118(sp)
    a9b8:	48022216 	blt	r9,zero,b244 <___vfiprintf_internal_r+0x1014>
    a9bc:	00bfdfc4 	movi	r2,-129
    a9c0:	a0a8703a 	and	r20,r20,r2
    a9c4:	003f1506 	br	a61c <__alt_data_end+0xff00a61c>
    a9c8:	da802217 	ldw	r10,136(sp)
    a9cc:	04800044 	movi	r18,1
    a9d0:	d8001d85 	stb	zero,118(sp)
    a9d4:	50800017 	ldw	r2,0(r10)
    a9d8:	52800104 	addi	r10,r10,4
    a9dc:	da802215 	stw	r10,136(sp)
    a9e0:	d8801005 	stb	r2,64(sp)
    a9e4:	9027883a 	mov	r19,r18
    a9e8:	dd401004 	addi	r21,sp,64
    a9ec:	0013883a 	mov	r9,zero
    a9f0:	003f1706 	br	a650 <__alt_data_end+0xff00a650>
    a9f4:	21003fcc 	andi	r4,r4,255
    a9f8:	2003201e 	bne	r4,zero,b67c <___vfiprintf_internal_r+0x144c>
    a9fc:	a080080c 	andi	r2,r20,32
    aa00:	10004b26 	beq	r2,zero,ab30 <___vfiprintf_internal_r+0x900>
    aa04:	da802217 	ldw	r10,136(sp)
    aa08:	50800117 	ldw	r2,4(r10)
    aa0c:	54800017 	ldw	r18,0(r10)
    aa10:	52800204 	addi	r10,r10,8
    aa14:	da802215 	stw	r10,136(sp)
    aa18:	1027883a 	mov	r19,r2
    aa1c:	10022c16 	blt	r2,zero,b2d0 <___vfiprintf_internal_r+0x10a0>
    aa20:	df001d83 	ldbu	fp,118(sp)
    aa24:	48007216 	blt	r9,zero,abf0 <___vfiprintf_internal_r+0x9c0>
    aa28:	00ffdfc4 	movi	r3,-129
    aa2c:	94c4b03a 	or	r2,r18,r19
    aa30:	a0e8703a 	and	r20,r20,r3
    aa34:	1000cc26 	beq	r2,zero,ad68 <___vfiprintf_internal_r+0xb38>
    aa38:	98021026 	beq	r19,zero,b27c <___vfiprintf_internal_r+0x104c>
    aa3c:	dc402415 	stw	r17,144(sp)
    aa40:	dc002515 	stw	r16,148(sp)
    aa44:	9823883a 	mov	r17,r19
    aa48:	9021883a 	mov	r16,r18
    aa4c:	dd401a04 	addi	r21,sp,104
    aa50:	4825883a 	mov	r18,r9
    aa54:	4027883a 	mov	r19,r8
    aa58:	8009883a 	mov	r4,r16
    aa5c:	880b883a 	mov	r5,r17
    aa60:	01800284 	movi	r6,10
    aa64:	000f883a 	mov	r7,zero
    aa68:	000c6100 	call	c610 <__umoddi3>
    aa6c:	10800c04 	addi	r2,r2,48
    aa70:	ad7fffc4 	addi	r21,r21,-1
    aa74:	8009883a 	mov	r4,r16
    aa78:	880b883a 	mov	r5,r17
    aa7c:	a8800005 	stb	r2,0(r21)
    aa80:	01800284 	movi	r6,10
    aa84:	000f883a 	mov	r7,zero
    aa88:	000c0980 	call	c098 <__udivdi3>
    aa8c:	1021883a 	mov	r16,r2
    aa90:	10c4b03a 	or	r2,r2,r3
    aa94:	1823883a 	mov	r17,r3
    aa98:	103fef1e 	bne	r2,zero,aa58 <__alt_data_end+0xff00aa58>
    aa9c:	dc402417 	ldw	r17,144(sp)
    aaa0:	dc002517 	ldw	r16,148(sp)
    aaa4:	9013883a 	mov	r9,r18
    aaa8:	9811883a 	mov	r8,r19
    aaac:	da801e17 	ldw	r10,120(sp)
    aab0:	5567c83a 	sub	r19,r10,r21
    aab4:	003ede06 	br	a630 <__alt_data_end+0xff00a630>
    aab8:	38803fcc 	andi	r2,r7,255
    aabc:	1080201c 	xori	r2,r2,128
    aac0:	10bfe004 	addi	r2,r2,-128
    aac4:	1002371e 	bne	r2,zero,b3a4 <___vfiprintf_internal_r+0x1174>
    aac8:	01000044 	movi	r4,1
    aacc:	01c00804 	movi	r7,32
    aad0:	80c00007 	ldb	r3,0(r16)
    aad4:	003e3506 	br	a3ac <__alt_data_end+0xff00a3ac>
    aad8:	a5000054 	ori	r20,r20,1
    aadc:	80c00007 	ldb	r3,0(r16)
    aae0:	003e3206 	br	a3ac <__alt_data_end+0xff00a3ac>
    aae4:	a5002014 	ori	r20,r20,128
    aae8:	80c00007 	ldb	r3,0(r16)
    aaec:	003e2f06 	br	a3ac <__alt_data_end+0xff00a3ac>
    aaf0:	8015883a 	mov	r10,r16
    aaf4:	0023883a 	mov	r17,zero
    aaf8:	18bff404 	addi	r2,r3,-48
    aafc:	50c00007 	ldb	r3,0(r10)
    ab00:	8c4002a4 	muli	r17,r17,10
    ab04:	84000044 	addi	r16,r16,1
    ab08:	8015883a 	mov	r10,r16
    ab0c:	1463883a 	add	r17,r2,r17
    ab10:	18bff404 	addi	r2,r3,-48
    ab14:	30bff92e 	bgeu	r6,r2,aafc <__alt_data_end+0xff00aafc>
    ab18:	003e2506 	br	a3b0 <__alt_data_end+0xff00a3b0>
    ab1c:	21003fcc 	andi	r4,r4,255
    ab20:	2002d41e 	bne	r4,zero,b674 <___vfiprintf_internal_r+0x1444>
    ab24:	a5000414 	ori	r20,r20,16
    ab28:	a080080c 	andi	r2,r20,32
    ab2c:	103fb51e 	bne	r2,zero,aa04 <__alt_data_end+0xff00aa04>
    ab30:	a080040c 	andi	r2,r20,16
    ab34:	1001f826 	beq	r2,zero,b318 <___vfiprintf_internal_r+0x10e8>
    ab38:	da802217 	ldw	r10,136(sp)
    ab3c:	54800017 	ldw	r18,0(r10)
    ab40:	52800104 	addi	r10,r10,4
    ab44:	da802215 	stw	r10,136(sp)
    ab48:	9027d7fa 	srai	r19,r18,31
    ab4c:	9805883a 	mov	r2,r19
    ab50:	003fb206 	br	aa1c <__alt_data_end+0xff00aa1c>
    ab54:	21003fcc 	andi	r4,r4,255
    ab58:	2002c41e 	bne	r4,zero,b66c <___vfiprintf_internal_r+0x143c>
    ab5c:	a5000414 	ori	r20,r20,16
    ab60:	a080080c 	andi	r2,r20,32
    ab64:	103f5f1e 	bne	r2,zero,a8e4 <__alt_data_end+0xff00a8e4>
    ab68:	a080040c 	andi	r2,r20,16
    ab6c:	10020f26 	beq	r2,zero,b3ac <___vfiprintf_internal_r+0x117c>
    ab70:	da802217 	ldw	r10,136(sp)
    ab74:	d8001d85 	stb	zero,118(sp)
    ab78:	0027883a 	mov	r19,zero
    ab7c:	50800104 	addi	r2,r10,4
    ab80:	54800017 	ldw	r18,0(r10)
    ab84:	48021116 	blt	r9,zero,b3cc <___vfiprintf_internal_r+0x119c>
    ab88:	00ffdfc4 	movi	r3,-129
    ab8c:	d8802215 	stw	r2,136(sp)
    ab90:	a0e8703a 	and	r20,r20,r3
    ab94:	903f5e1e 	bne	r18,zero,a910 <__alt_data_end+0xff00a910>
    ab98:	0039883a 	mov	fp,zero
    ab9c:	4802a626 	beq	r9,zero,b638 <___vfiprintf_internal_r+0x1408>
    aba0:	0025883a 	mov	r18,zero
    aba4:	0027883a 	mov	r19,zero
    aba8:	003f5a06 	br	a914 <__alt_data_end+0xff00a914>
    abac:	21003fcc 	andi	r4,r4,255
    abb0:	20029f1e 	bne	r4,zero,b630 <___vfiprintf_internal_r+0x1400>
    abb4:	a5000414 	ori	r20,r20,16
    abb8:	a080080c 	andi	r2,r20,32
    abbc:	10005e1e 	bne	r2,zero,ad38 <___vfiprintf_internal_r+0xb08>
    abc0:	a080040c 	andi	r2,r20,16
    abc4:	1001a21e 	bne	r2,zero,b250 <___vfiprintf_internal_r+0x1020>
    abc8:	a080100c 	andi	r2,r20,64
    abcc:	d8001d85 	stb	zero,118(sp)
    abd0:	da802217 	ldw	r10,136(sp)
    abd4:	1002231e 	bne	r2,zero,b464 <___vfiprintf_internal_r+0x1234>
    abd8:	50800104 	addi	r2,r10,4
    abdc:	54800017 	ldw	r18,0(r10)
    abe0:	0027883a 	mov	r19,zero
    abe4:	4801a00e 	bge	r9,zero,b268 <___vfiprintf_internal_r+0x1038>
    abe8:	d8802215 	stw	r2,136(sp)
    abec:	0039883a 	mov	fp,zero
    abf0:	94c4b03a 	or	r2,r18,r19
    abf4:	103f901e 	bne	r2,zero,aa38 <__alt_data_end+0xff00aa38>
    abf8:	00800044 	movi	r2,1
    abfc:	10803fcc 	andi	r2,r2,255
    ac00:	00c00044 	movi	r3,1
    ac04:	10c05926 	beq	r2,r3,ad6c <___vfiprintf_internal_r+0xb3c>
    ac08:	00c00084 	movi	r3,2
    ac0c:	10ffe41e 	bne	r2,r3,aba0 <__alt_data_end+0xff00aba0>
    ac10:	0025883a 	mov	r18,zero
    ac14:	0027883a 	mov	r19,zero
    ac18:	00013d06 	br	b110 <___vfiprintf_internal_r+0xee0>
    ac1c:	21003fcc 	andi	r4,r4,255
    ac20:	2002811e 	bne	r4,zero,b628 <___vfiprintf_internal_r+0x13f8>
    ac24:	00800074 	movhi	r2,1
    ac28:	1086a204 	addi	r2,r2,6792
    ac2c:	d8802615 	stw	r2,152(sp)
    ac30:	a080080c 	andi	r2,r20,32
    ac34:	103f561e 	bne	r2,zero,a990 <__alt_data_end+0xff00a990>
    ac38:	a080040c 	andi	r2,r20,16
    ac3c:	1001d126 	beq	r2,zero,b384 <___vfiprintf_internal_r+0x1154>
    ac40:	da802217 	ldw	r10,136(sp)
    ac44:	0027883a 	mov	r19,zero
    ac48:	54800017 	ldw	r18,0(r10)
    ac4c:	52800104 	addi	r10,r10,4
    ac50:	da802215 	stw	r10,136(sp)
    ac54:	003f5306 	br	a9a4 <__alt_data_end+0xff00a9a4>
    ac58:	da802217 	ldw	r10,136(sp)
    ac5c:	d8001d85 	stb	zero,118(sp)
    ac60:	55400017 	ldw	r21,0(r10)
    ac64:	50c00104 	addi	r3,r10,4
    ac68:	a8024226 	beq	r21,zero,b574 <___vfiprintf_internal_r+0x1344>
    ac6c:	48021816 	blt	r9,zero,b4d0 <___vfiprintf_internal_r+0x12a0>
    ac70:	480d883a 	mov	r6,r9
    ac74:	000b883a 	mov	r5,zero
    ac78:	a809883a 	mov	r4,r21
    ac7c:	d8c02a15 	stw	r3,168(sp)
    ac80:	da002b15 	stw	r8,172(sp)
    ac84:	da402c15 	stw	r9,176(sp)
    ac88:	00084800 	call	8480 <memchr>
    ac8c:	d8c02a17 	ldw	r3,168(sp)
    ac90:	da002b17 	ldw	r8,172(sp)
    ac94:	da402c17 	ldw	r9,176(sp)
    ac98:	10024826 	beq	r2,zero,b5bc <___vfiprintf_internal_r+0x138c>
    ac9c:	1567c83a 	sub	r19,r2,r21
    aca0:	df001d83 	ldbu	fp,118(sp)
    aca4:	d8c02215 	stw	r3,136(sp)
    aca8:	0013883a 	mov	r9,zero
    acac:	003e6006 	br	a630 <__alt_data_end+0xff00a630>
    acb0:	21003fcc 	andi	r4,r4,255
    acb4:	203fc026 	beq	r4,zero,abb8 <__alt_data_end+0xff00abb8>
    acb8:	d9c01d85 	stb	r7,118(sp)
    acbc:	003fbe06 	br	abb8 <__alt_data_end+0xff00abb8>
    acc0:	da802217 	ldw	r10,136(sp)
    acc4:	54400017 	ldw	r17,0(r10)
    acc8:	50800104 	addi	r2,r10,4
    accc:	883e3b16 	blt	r17,zero,a5bc <__alt_data_end+0xff00a5bc>
    acd0:	d8802215 	stw	r2,136(sp)
    acd4:	80c00007 	ldb	r3,0(r16)
    acd8:	003db406 	br	a3ac <__alt_data_end+0xff00a3ac>
    acdc:	01000044 	movi	r4,1
    ace0:	01c00ac4 	movi	r7,43
    ace4:	80c00007 	ldb	r3,0(r16)
    ace8:	003db006 	br	a3ac <__alt_data_end+0xff00a3ac>
    acec:	80c00007 	ldb	r3,0(r16)
    acf0:	82800044 	addi	r10,r16,1
    acf4:	1b423c26 	beq	r3,r13,b5e8 <___vfiprintf_internal_r+0x13b8>
    acf8:	18bff404 	addi	r2,r3,-48
    acfc:	0013883a 	mov	r9,zero
    ad00:	30822b36 	bltu	r6,r2,b5b0 <___vfiprintf_internal_r+0x1380>
    ad04:	50c00007 	ldb	r3,0(r10)
    ad08:	4a4002a4 	muli	r9,r9,10
    ad0c:	54000044 	addi	r16,r10,1
    ad10:	8015883a 	mov	r10,r16
    ad14:	4893883a 	add	r9,r9,r2
    ad18:	18bff404 	addi	r2,r3,-48
    ad1c:	30bff92e 	bgeu	r6,r2,ad04 <__alt_data_end+0xff00ad04>
    ad20:	483da30e 	bge	r9,zero,a3b0 <__alt_data_end+0xff00a3b0>
    ad24:	027fffc4 	movi	r9,-1
    ad28:	003da106 	br	a3b0 <__alt_data_end+0xff00a3b0>
    ad2c:	a5001014 	ori	r20,r20,64
    ad30:	80c00007 	ldb	r3,0(r16)
    ad34:	003d9d06 	br	a3ac <__alt_data_end+0xff00a3ac>
    ad38:	da802217 	ldw	r10,136(sp)
    ad3c:	d8001d85 	stb	zero,118(sp)
    ad40:	50c00204 	addi	r3,r10,8
    ad44:	54800017 	ldw	r18,0(r10)
    ad48:	54c00117 	ldw	r19,4(r10)
    ad4c:	4801ca16 	blt	r9,zero,b478 <___vfiprintf_internal_r+0x1248>
    ad50:	013fdfc4 	movi	r4,-129
    ad54:	94c4b03a 	or	r2,r18,r19
    ad58:	d8c02215 	stw	r3,136(sp)
    ad5c:	a128703a 	and	r20,r20,r4
    ad60:	0039883a 	mov	fp,zero
    ad64:	103f341e 	bne	r2,zero,aa38 <__alt_data_end+0xff00aa38>
    ad68:	483e2e26 	beq	r9,zero,a624 <__alt_data_end+0xff00a624>
    ad6c:	0025883a 	mov	r18,zero
    ad70:	94800c04 	addi	r18,r18,48
    ad74:	dc8019c5 	stb	r18,103(sp)
    ad78:	dcc02717 	ldw	r19,156(sp)
    ad7c:	dd4019c4 	addi	r21,sp,103
    ad80:	003e2b06 	br	a630 <__alt_data_end+0xff00a630>
    ad84:	21003fcc 	andi	r4,r4,255
    ad88:	2002361e 	bne	r4,zero,b664 <___vfiprintf_internal_r+0x1434>
    ad8c:	1801c126 	beq	r3,zero,b494 <___vfiprintf_internal_r+0x1264>
    ad90:	04800044 	movi	r18,1
    ad94:	d8c01005 	stb	r3,64(sp)
    ad98:	d8001d85 	stb	zero,118(sp)
    ad9c:	9027883a 	mov	r19,r18
    ada0:	dd401004 	addi	r21,sp,64
    ada4:	003f1106 	br	a9ec <__alt_data_end+0xff00a9ec>
    ada8:	d9402117 	ldw	r5,132(sp)
    adac:	d9002017 	ldw	r4,128(sp)
    adb0:	d9801a04 	addi	r6,sp,104
    adb4:	d9c02b15 	stw	r7,172(sp)
    adb8:	dbc02a15 	stw	r15,168(sp)
    adbc:	000a11c0 	call	a11c <__sprint_r.part.0>
    adc0:	d9c02b17 	ldw	r7,172(sp)
    adc4:	dbc02a17 	ldw	r15,168(sp)
    adc8:	10006d1e 	bne	r2,zero,af80 <___vfiprintf_internal_r+0xd50>
    adcc:	d9801b17 	ldw	r6,108(sp)
    add0:	d8801c17 	ldw	r2,112(sp)
    add4:	d811883a 	mov	r8,sp
    add8:	31400044 	addi	r5,r6,1
    addc:	003e3306 	br	a6ac <__alt_data_end+0xff00a6ac>
    ade0:	d9401b17 	ldw	r5,108(sp)
    ade4:	d8801c17 	ldw	r2,112(sp)
    ade8:	29000044 	addi	r4,r5,1
    adec:	d8c01d87 	ldb	r3,118(sp)
    adf0:	183e4d26 	beq	r3,zero,a728 <__alt_data_end+0xff00a728>
    adf4:	00c00044 	movi	r3,1
    adf8:	d9401d84 	addi	r5,sp,118
    adfc:	10c5883a 	add	r2,r2,r3
    ae00:	41400015 	stw	r5,0(r8)
    ae04:	40c00115 	stw	r3,4(r8)
    ae08:	d8801c15 	stw	r2,112(sp)
    ae0c:	d9001b15 	stw	r4,108(sp)
    ae10:	014001c4 	movi	r5,7
    ae14:	2900a90e 	bge	r5,r4,b0bc <___vfiprintf_internal_r+0xe8c>
    ae18:	1000da1e 	bne	r2,zero,b184 <___vfiprintf_internal_r+0xf54>
    ae1c:	7000ab1e 	bne	r14,zero,b0cc <___vfiprintf_internal_r+0xe9c>
    ae20:	000b883a 	mov	r5,zero
    ae24:	1809883a 	mov	r4,r3
    ae28:	d811883a 	mov	r8,sp
    ae2c:	00c02004 	movi	r3,128
    ae30:	e0fe4d26 	beq	fp,r3,a768 <__alt_data_end+0xff00a768>
    ae34:	4cf9c83a 	sub	fp,r9,r19
    ae38:	073e7b0e 	bge	zero,fp,a828 <__alt_data_end+0xff00a828>
    ae3c:	01c00404 	movi	r7,16
    ae40:	3f01900e 	bge	r7,fp,b484 <___vfiprintf_internal_r+0x1254>
    ae44:	00c00074 	movhi	r3,1
    ae48:	18c70804 	addi	r3,r3,7200
    ae4c:	d8c02415 	stw	r3,144(sp)
    ae50:	034001c4 	movi	r13,7
    ae54:	00000506 	br	ae6c <___vfiprintf_internal_r+0xc3c>
    ae58:	29000084 	addi	r4,r5,2
    ae5c:	42000204 	addi	r8,r8,8
    ae60:	180b883a 	mov	r5,r3
    ae64:	e73ffc04 	addi	fp,fp,-16
    ae68:	3f000d0e 	bge	r7,fp,aea0 <___vfiprintf_internal_r+0xc70>
    ae6c:	10800404 	addi	r2,r2,16
    ae70:	28c00044 	addi	r3,r5,1
    ae74:	45c00015 	stw	r23,0(r8)
    ae78:	41c00115 	stw	r7,4(r8)
    ae7c:	d8801c15 	stw	r2,112(sp)
    ae80:	d8c01b15 	stw	r3,108(sp)
    ae84:	68fff40e 	bge	r13,r3,ae58 <__alt_data_end+0xff00ae58>
    ae88:	1000101e 	bne	r2,zero,aecc <___vfiprintf_internal_r+0xc9c>
    ae8c:	e73ffc04 	addi	fp,fp,-16
    ae90:	01000044 	movi	r4,1
    ae94:	000b883a 	mov	r5,zero
    ae98:	d811883a 	mov	r8,sp
    ae9c:	3f3ff316 	blt	r7,fp,ae6c <__alt_data_end+0xff00ae6c>
    aea0:	da802417 	ldw	r10,144(sp)
    aea4:	1705883a 	add	r2,r2,fp
    aea8:	47000115 	stw	fp,4(r8)
    aeac:	42800015 	stw	r10,0(r8)
    aeb0:	d8801c15 	stw	r2,112(sp)
    aeb4:	d9001b15 	stw	r4,108(sp)
    aeb8:	00c001c4 	movi	r3,7
    aebc:	19003616 	blt	r3,r4,af98 <___vfiprintf_internal_r+0xd68>
    aec0:	42000204 	addi	r8,r8,8
    aec4:	21000044 	addi	r4,r4,1
    aec8:	003e5706 	br	a828 <__alt_data_end+0xff00a828>
    aecc:	d9402117 	ldw	r5,132(sp)
    aed0:	d9002017 	ldw	r4,128(sp)
    aed4:	d9801a04 	addi	r6,sp,104
    aed8:	d9c02b15 	stw	r7,172(sp)
    aedc:	db402a15 	stw	r13,168(sp)
    aee0:	000a11c0 	call	a11c <__sprint_r.part.0>
    aee4:	d9c02b17 	ldw	r7,172(sp)
    aee8:	db402a17 	ldw	r13,168(sp)
    aeec:	1000241e 	bne	r2,zero,af80 <___vfiprintf_internal_r+0xd50>
    aef0:	d9401b17 	ldw	r5,108(sp)
    aef4:	d8801c17 	ldw	r2,112(sp)
    aef8:	d811883a 	mov	r8,sp
    aefc:	29000044 	addi	r4,r5,1
    af00:	003fd806 	br	ae64 <__alt_data_end+0xff00ae64>
    af04:	d9401b17 	ldw	r5,108(sp)
    af08:	00c00074 	movhi	r3,1
    af0c:	18c70c04 	addi	r3,r3,7216
    af10:	d8c02415 	stw	r3,144(sp)
    af14:	29400044 	addi	r5,r5,1
    af18:	d8c02417 	ldw	r3,144(sp)
    af1c:	14c5883a 	add	r2,r2,r19
    af20:	44c00115 	stw	r19,4(r8)
    af24:	40c00015 	stw	r3,0(r8)
    af28:	d8801c15 	stw	r2,112(sp)
    af2c:	d9401b15 	stw	r5,108(sp)
    af30:	00c001c4 	movi	r3,7
    af34:	1940070e 	bge	r3,r5,af54 <___vfiprintf_internal_r+0xd24>
    af38:	103e4826 	beq	r2,zero,a85c <__alt_data_end+0xff00a85c>
    af3c:	d9402117 	ldw	r5,132(sp)
    af40:	d9002017 	ldw	r4,128(sp)
    af44:	d9801a04 	addi	r6,sp,104
    af48:	000a11c0 	call	a11c <__sprint_r.part.0>
    af4c:	10000c1e 	bne	r2,zero,af80 <___vfiprintf_internal_r+0xd50>
    af50:	d8801c17 	ldw	r2,112(sp)
    af54:	8c80010e 	bge	r17,r18,af5c <___vfiprintf_internal_r+0xd2c>
    af58:	9023883a 	mov	r17,r18
    af5c:	da802317 	ldw	r10,140(sp)
    af60:	5455883a 	add	r10,r10,r17
    af64:	da802315 	stw	r10,140(sp)
    af68:	103e4126 	beq	r2,zero,a870 <__alt_data_end+0xff00a870>
    af6c:	d9402117 	ldw	r5,132(sp)
    af70:	d9002017 	ldw	r4,128(sp)
    af74:	d9801a04 	addi	r6,sp,104
    af78:	000a11c0 	call	a11c <__sprint_r.part.0>
    af7c:	103e3c26 	beq	r2,zero,a870 <__alt_data_end+0xff00a870>
    af80:	dd002117 	ldw	r20,132(sp)
    af84:	a080030b 	ldhu	r2,12(r20)
    af88:	1080100c 	andi	r2,r2,64
    af8c:	1001231e 	bne	r2,zero,b41c <___vfiprintf_internal_r+0x11ec>
    af90:	d8802317 	ldw	r2,140(sp)
    af94:	003d7b06 	br	a584 <__alt_data_end+0xff00a584>
    af98:	1000991e 	bne	r2,zero,b200 <___vfiprintf_internal_r+0xfd0>
    af9c:	00c00044 	movi	r3,1
    afa0:	9805883a 	mov	r2,r19
    afa4:	dd400015 	stw	r21,0(sp)
    afa8:	dcc00115 	stw	r19,4(sp)
    afac:	dcc01c15 	stw	r19,112(sp)
    afb0:	d8c01b15 	stw	r3,108(sp)
    afb4:	d811883a 	mov	r8,sp
    afb8:	42000204 	addi	r8,r8,8
    afbc:	a2c0010c 	andi	r11,r20,4
    afc0:	583fe426 	beq	r11,zero,af54 <__alt_data_end+0xff00af54>
    afc4:	8ca7c83a 	sub	r19,r17,r18
    afc8:	04ffe20e 	bge	zero,r19,af54 <__alt_data_end+0xff00af54>
    afcc:	01c00404 	movi	r7,16
    afd0:	3cffcc0e 	bge	r7,r19,af04 <__alt_data_end+0xff00af04>
    afd4:	02800074 	movhi	r10,1
    afd8:	52870c04 	addi	r10,r10,7216
    afdc:	d9001b17 	ldw	r4,108(sp)
    afe0:	da802415 	stw	r10,144(sp)
    afe4:	382b883a 	mov	r21,r7
    afe8:	050001c4 	movi	r20,7
    afec:	df002017 	ldw	fp,128(sp)
    aff0:	00000506 	br	b008 <___vfiprintf_internal_r+0xdd8>
    aff4:	21400084 	addi	r5,r4,2
    aff8:	42000204 	addi	r8,r8,8
    affc:	1809883a 	mov	r4,r3
    b000:	9cfffc04 	addi	r19,r19,-16
    b004:	acffc40e 	bge	r21,r19,af18 <__alt_data_end+0xff00af18>
    b008:	10800404 	addi	r2,r2,16
    b00c:	20c00044 	addi	r3,r4,1
    b010:	45800015 	stw	r22,0(r8)
    b014:	45400115 	stw	r21,4(r8)
    b018:	d8801c15 	stw	r2,112(sp)
    b01c:	d8c01b15 	stw	r3,108(sp)
    b020:	a0fff40e 	bge	r20,r3,aff4 <__alt_data_end+0xff00aff4>
    b024:	1000041e 	bne	r2,zero,b038 <___vfiprintf_internal_r+0xe08>
    b028:	01400044 	movi	r5,1
    b02c:	0009883a 	mov	r4,zero
    b030:	d811883a 	mov	r8,sp
    b034:	003ff206 	br	b000 <__alt_data_end+0xff00b000>
    b038:	d9402117 	ldw	r5,132(sp)
    b03c:	d9801a04 	addi	r6,sp,104
    b040:	e009883a 	mov	r4,fp
    b044:	000a11c0 	call	a11c <__sprint_r.part.0>
    b048:	103fcd1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b04c:	d9001b17 	ldw	r4,108(sp)
    b050:	d8801c17 	ldw	r2,112(sp)
    b054:	d811883a 	mov	r8,sp
    b058:	21400044 	addi	r5,r4,1
    b05c:	003fe806 	br	b000 <__alt_data_end+0xff00b000>
    b060:	d9402117 	ldw	r5,132(sp)
    b064:	d9002017 	ldw	r4,128(sp)
    b068:	d9801a04 	addi	r6,sp,104
    b06c:	d9c02b15 	stw	r7,172(sp)
    b070:	db402a15 	stw	r13,168(sp)
    b074:	000a11c0 	call	a11c <__sprint_r.part.0>
    b078:	d9c02b17 	ldw	r7,172(sp)
    b07c:	db402a17 	ldw	r13,168(sp)
    b080:	103fbf1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b084:	d9401b17 	ldw	r5,108(sp)
    b088:	d8801c17 	ldw	r2,112(sp)
    b08c:	d811883a 	mov	r8,sp
    b090:	29800044 	addi	r6,r5,1
    b094:	003dc406 	br	a7a8 <__alt_data_end+0xff00a7a8>
    b098:	1000d21e 	bne	r2,zero,b3e4 <___vfiprintf_internal_r+0x11b4>
    b09c:	d8c01d87 	ldb	r3,118(sp)
    b0a0:	18009526 	beq	r3,zero,b2f8 <___vfiprintf_internal_r+0x10c8>
    b0a4:	00800044 	movi	r2,1
    b0a8:	d8c01d84 	addi	r3,sp,118
    b0ac:	1009883a 	mov	r4,r2
    b0b0:	d8c00015 	stw	r3,0(sp)
    b0b4:	d8800115 	stw	r2,4(sp)
    b0b8:	d811883a 	mov	r8,sp
    b0bc:	200b883a 	mov	r5,r4
    b0c0:	42000204 	addi	r8,r8,8
    b0c4:	21000044 	addi	r4,r4,1
    b0c8:	003d9706 	br	a728 <__alt_data_end+0xff00a728>
    b0cc:	d9001d04 	addi	r4,sp,116
    b0d0:	00800084 	movi	r2,2
    b0d4:	d9000015 	stw	r4,0(sp)
    b0d8:	d8800115 	stw	r2,4(sp)
    b0dc:	1809883a 	mov	r4,r3
    b0e0:	d811883a 	mov	r8,sp
    b0e4:	200b883a 	mov	r5,r4
    b0e8:	42000204 	addi	r8,r8,8
    b0ec:	21000044 	addi	r4,r4,1
    b0f0:	003f4e06 	br	ae2c <__alt_data_end+0xff00ae2c>
    b0f4:	d8001d85 	stb	zero,118(sp)
    b0f8:	48005016 	blt	r9,zero,b23c <___vfiprintf_internal_r+0x100c>
    b0fc:	00ffdfc4 	movi	r3,-129
    b100:	94c4b03a 	or	r2,r18,r19
    b104:	a0e8703a 	and	r20,r20,r3
    b108:	103d4426 	beq	r2,zero,a61c <__alt_data_end+0xff00a61c>
    b10c:	0039883a 	mov	fp,zero
    b110:	d9002617 	ldw	r4,152(sp)
    b114:	dd401a04 	addi	r21,sp,104
    b118:	908003cc 	andi	r2,r18,15
    b11c:	9806973a 	slli	r3,r19,28
    b120:	2085883a 	add	r2,r4,r2
    b124:	9024d13a 	srli	r18,r18,4
    b128:	10800003 	ldbu	r2,0(r2)
    b12c:	9826d13a 	srli	r19,r19,4
    b130:	ad7fffc4 	addi	r21,r21,-1
    b134:	1ca4b03a 	or	r18,r3,r18
    b138:	a8800005 	stb	r2,0(r21)
    b13c:	94c4b03a 	or	r2,r18,r19
    b140:	103ff51e 	bne	r2,zero,b118 <__alt_data_end+0xff00b118>
    b144:	003e5906 	br	aaac <__alt_data_end+0xff00aaac>
    b148:	d9402117 	ldw	r5,132(sp)
    b14c:	d9002017 	ldw	r4,128(sp)
    b150:	d9801a04 	addi	r6,sp,104
    b154:	000a11c0 	call	a11c <__sprint_r.part.0>
    b158:	103f891e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b15c:	d8801c17 	ldw	r2,112(sp)
    b160:	d811883a 	mov	r8,sp
    b164:	003f9506 	br	afbc <__alt_data_end+0xff00afbc>
    b168:	d9402117 	ldw	r5,132(sp)
    b16c:	d9002017 	ldw	r4,128(sp)
    b170:	d9801a04 	addi	r6,sp,104
    b174:	000a11c0 	call	a11c <__sprint_r.part.0>
    b178:	103f811e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b17c:	d811883a 	mov	r8,sp
    b180:	003ced06 	br	a538 <__alt_data_end+0xff00a538>
    b184:	d9402117 	ldw	r5,132(sp)
    b188:	d9002017 	ldw	r4,128(sp)
    b18c:	d9801a04 	addi	r6,sp,104
    b190:	da402c15 	stw	r9,176(sp)
    b194:	db802a15 	stw	r14,168(sp)
    b198:	000a11c0 	call	a11c <__sprint_r.part.0>
    b19c:	da402c17 	ldw	r9,176(sp)
    b1a0:	db802a17 	ldw	r14,168(sp)
    b1a4:	103f761e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b1a8:	d9401b17 	ldw	r5,108(sp)
    b1ac:	d8801c17 	ldw	r2,112(sp)
    b1b0:	d811883a 	mov	r8,sp
    b1b4:	29000044 	addi	r4,r5,1
    b1b8:	003d5b06 	br	a728 <__alt_data_end+0xff00a728>
    b1bc:	d9402117 	ldw	r5,132(sp)
    b1c0:	d9002017 	ldw	r4,128(sp)
    b1c4:	d9801a04 	addi	r6,sp,104
    b1c8:	da402c15 	stw	r9,176(sp)
    b1cc:	000a11c0 	call	a11c <__sprint_r.part.0>
    b1d0:	da402c17 	ldw	r9,176(sp)
    b1d4:	103f6a1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b1d8:	d9401b17 	ldw	r5,108(sp)
    b1dc:	d8801c17 	ldw	r2,112(sp)
    b1e0:	d811883a 	mov	r8,sp
    b1e4:	29000044 	addi	r4,r5,1
    b1e8:	003f1006 	br	ae2c <__alt_data_end+0xff00ae2c>
    b1ec:	1000c31e 	bne	r2,zero,b4fc <___vfiprintf_internal_r+0x12cc>
    b1f0:	01000044 	movi	r4,1
    b1f4:	000b883a 	mov	r5,zero
    b1f8:	d811883a 	mov	r8,sp
    b1fc:	003f0d06 	br	ae34 <__alt_data_end+0xff00ae34>
    b200:	d9402117 	ldw	r5,132(sp)
    b204:	d9002017 	ldw	r4,128(sp)
    b208:	d9801a04 	addi	r6,sp,104
    b20c:	000a11c0 	call	a11c <__sprint_r.part.0>
    b210:	103f5b1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b214:	d9001b17 	ldw	r4,108(sp)
    b218:	d8801c17 	ldw	r2,112(sp)
    b21c:	d811883a 	mov	r8,sp
    b220:	21000044 	addi	r4,r4,1
    b224:	003d8006 	br	a828 <__alt_data_end+0xff00a828>
    b228:	01000074 	movhi	r4,1
    b22c:	2106a704 	addi	r4,r4,6812
    b230:	d9002615 	stw	r4,152(sp)
    b234:	d8c02215 	stw	r3,136(sp)
    b238:	1029883a 	mov	r20,r2
    b23c:	94c4b03a 	or	r2,r18,r19
    b240:	103fb21e 	bne	r2,zero,b10c <__alt_data_end+0xff00b10c>
    b244:	0039883a 	mov	fp,zero
    b248:	00800084 	movi	r2,2
    b24c:	003e6b06 	br	abfc <__alt_data_end+0xff00abfc>
    b250:	da802217 	ldw	r10,136(sp)
    b254:	d8001d85 	stb	zero,118(sp)
    b258:	0027883a 	mov	r19,zero
    b25c:	50800104 	addi	r2,r10,4
    b260:	54800017 	ldw	r18,0(r10)
    b264:	483e6016 	blt	r9,zero,abe8 <__alt_data_end+0xff00abe8>
    b268:	00ffdfc4 	movi	r3,-129
    b26c:	d8802215 	stw	r2,136(sp)
    b270:	a0e8703a 	and	r20,r20,r3
    b274:	0039883a 	mov	fp,zero
    b278:	903ebb26 	beq	r18,zero,ad68 <__alt_data_end+0xff00ad68>
    b27c:	00800244 	movi	r2,9
    b280:	14bdee36 	bltu	r2,r18,aa3c <__alt_data_end+0xff00aa3c>
    b284:	003eba06 	br	ad70 <__alt_data_end+0xff00ad70>
    b288:	00800c04 	movi	r2,48
    b28c:	d8c01d45 	stb	r3,117(sp)
    b290:	d8801d05 	stb	r2,116(sp)
    b294:	d8001d85 	stb	zero,118(sp)
    b298:	a0c00094 	ori	r3,r20,2
    b29c:	4800a916 	blt	r9,zero,b544 <___vfiprintf_internal_r+0x1314>
    b2a0:	00bfdfc4 	movi	r2,-129
    b2a4:	a096703a 	and	r11,r20,r2
    b2a8:	5d000094 	ori	r20,r11,2
    b2ac:	0039883a 	mov	fp,zero
    b2b0:	003f9706 	br	b110 <__alt_data_end+0xff00b110>
    b2b4:	8025883a 	mov	r18,r16
    b2b8:	003c2e06 	br	a374 <__alt_data_end+0xff00a374>
    b2bc:	00800074 	movhi	r2,1
    b2c0:	1086a704 	addi	r2,r2,6812
    b2c4:	0039883a 	mov	fp,zero
    b2c8:	d8802615 	stw	r2,152(sp)
    b2cc:	003f9006 	br	b110 <__alt_data_end+0xff00b110>
    b2d0:	04a5c83a 	sub	r18,zero,r18
    b2d4:	07000b44 	movi	fp,45
    b2d8:	9004c03a 	cmpne	r2,r18,zero
    b2dc:	04e7c83a 	sub	r19,zero,r19
    b2e0:	df001d85 	stb	fp,118(sp)
    b2e4:	98a7c83a 	sub	r19,r19,r2
    b2e8:	48009f16 	blt	r9,zero,b568 <___vfiprintf_internal_r+0x1338>
    b2ec:	00bfdfc4 	movi	r2,-129
    b2f0:	a0a8703a 	and	r20,r20,r2
    b2f4:	003dd006 	br	aa38 <__alt_data_end+0xff00aa38>
    b2f8:	70004c26 	beq	r14,zero,b42c <___vfiprintf_internal_r+0x11fc>
    b2fc:	00800084 	movi	r2,2
    b300:	d8c01d04 	addi	r3,sp,116
    b304:	d8c00015 	stw	r3,0(sp)
    b308:	d8800115 	stw	r2,4(sp)
    b30c:	01000044 	movi	r4,1
    b310:	d811883a 	mov	r8,sp
    b314:	003f7306 	br	b0e4 <__alt_data_end+0xff00b0e4>
    b318:	a080100c 	andi	r2,r20,64
    b31c:	da802217 	ldw	r10,136(sp)
    b320:	103e0626 	beq	r2,zero,ab3c <__alt_data_end+0xff00ab3c>
    b324:	5480000f 	ldh	r18,0(r10)
    b328:	52800104 	addi	r10,r10,4
    b32c:	da802215 	stw	r10,136(sp)
    b330:	9027d7fa 	srai	r19,r18,31
    b334:	9805883a 	mov	r2,r19
    b338:	003db806 	br	aa1c <__alt_data_end+0xff00aa1c>
    b33c:	a080040c 	andi	r2,r20,16
    b340:	1000091e 	bne	r2,zero,b368 <___vfiprintf_internal_r+0x1138>
    b344:	a2c0100c 	andi	r11,r20,64
    b348:	58000726 	beq	r11,zero,b368 <___vfiprintf_internal_r+0x1138>
    b34c:	da802217 	ldw	r10,136(sp)
    b350:	50800017 	ldw	r2,0(r10)
    b354:	52800104 	addi	r10,r10,4
    b358:	da802215 	stw	r10,136(sp)
    b35c:	da802317 	ldw	r10,140(sp)
    b360:	1280000d 	sth	r10,0(r2)
    b364:	003be706 	br	a304 <__alt_data_end+0xff00a304>
    b368:	da802217 	ldw	r10,136(sp)
    b36c:	50800017 	ldw	r2,0(r10)
    b370:	52800104 	addi	r10,r10,4
    b374:	da802215 	stw	r10,136(sp)
    b378:	da802317 	ldw	r10,140(sp)
    b37c:	12800015 	stw	r10,0(r2)
    b380:	003be006 	br	a304 <__alt_data_end+0xff00a304>
    b384:	a080100c 	andi	r2,r20,64
    b388:	da802217 	ldw	r10,136(sp)
    b38c:	10003026 	beq	r2,zero,b450 <___vfiprintf_internal_r+0x1220>
    b390:	5480000b 	ldhu	r18,0(r10)
    b394:	52800104 	addi	r10,r10,4
    b398:	0027883a 	mov	r19,zero
    b39c:	da802215 	stw	r10,136(sp)
    b3a0:	003d8006 	br	a9a4 <__alt_data_end+0xff00a9a4>
    b3a4:	80c00007 	ldb	r3,0(r16)
    b3a8:	003c0006 	br	a3ac <__alt_data_end+0xff00a3ac>
    b3ac:	a080100c 	andi	r2,r20,64
    b3b0:	d8001d85 	stb	zero,118(sp)
    b3b4:	da802217 	ldw	r10,136(sp)
    b3b8:	1000201e 	bne	r2,zero,b43c <___vfiprintf_internal_r+0x120c>
    b3bc:	50800104 	addi	r2,r10,4
    b3c0:	54800017 	ldw	r18,0(r10)
    b3c4:	0027883a 	mov	r19,zero
    b3c8:	483def0e 	bge	r9,zero,ab88 <__alt_data_end+0xff00ab88>
    b3cc:	94c6b03a 	or	r3,r18,r19
    b3d0:	d8802215 	stw	r2,136(sp)
    b3d4:	183d4e1e 	bne	r3,zero,a910 <__alt_data_end+0xff00a910>
    b3d8:	0039883a 	mov	fp,zero
    b3dc:	0005883a 	mov	r2,zero
    b3e0:	003e0606 	br	abfc <__alt_data_end+0xff00abfc>
    b3e4:	d9402117 	ldw	r5,132(sp)
    b3e8:	d9002017 	ldw	r4,128(sp)
    b3ec:	d9801a04 	addi	r6,sp,104
    b3f0:	da402c15 	stw	r9,176(sp)
    b3f4:	db802a15 	stw	r14,168(sp)
    b3f8:	000a11c0 	call	a11c <__sprint_r.part.0>
    b3fc:	da402c17 	ldw	r9,176(sp)
    b400:	db802a17 	ldw	r14,168(sp)
    b404:	103ede1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b408:	d9401b17 	ldw	r5,108(sp)
    b40c:	d8801c17 	ldw	r2,112(sp)
    b410:	d811883a 	mov	r8,sp
    b414:	29000044 	addi	r4,r5,1
    b418:	003e7406 	br	adec <__alt_data_end+0xff00adec>
    b41c:	00bfffc4 	movi	r2,-1
    b420:	003c5806 	br	a584 <__alt_data_end+0xff00a584>
    b424:	d811883a 	mov	r8,sp
    b428:	003ee806 	br	afcc <__alt_data_end+0xff00afcc>
    b42c:	000b883a 	mov	r5,zero
    b430:	01000044 	movi	r4,1
    b434:	d811883a 	mov	r8,sp
    b438:	003e7c06 	br	ae2c <__alt_data_end+0xff00ae2c>
    b43c:	50800104 	addi	r2,r10,4
    b440:	5480000b 	ldhu	r18,0(r10)
    b444:	0027883a 	mov	r19,zero
    b448:	483dcf0e 	bge	r9,zero,ab88 <__alt_data_end+0xff00ab88>
    b44c:	003fdf06 	br	b3cc <__alt_data_end+0xff00b3cc>
    b450:	54800017 	ldw	r18,0(r10)
    b454:	52800104 	addi	r10,r10,4
    b458:	0027883a 	mov	r19,zero
    b45c:	da802215 	stw	r10,136(sp)
    b460:	003d5006 	br	a9a4 <__alt_data_end+0xff00a9a4>
    b464:	50800104 	addi	r2,r10,4
    b468:	5480000b 	ldhu	r18,0(r10)
    b46c:	0027883a 	mov	r19,zero
    b470:	483f7d0e 	bge	r9,zero,b268 <__alt_data_end+0xff00b268>
    b474:	003ddc06 	br	abe8 <__alt_data_end+0xff00abe8>
    b478:	d8c02215 	stw	r3,136(sp)
    b47c:	0039883a 	mov	fp,zero
    b480:	003ddb06 	br	abf0 <__alt_data_end+0xff00abf0>
    b484:	02800074 	movhi	r10,1
    b488:	52870804 	addi	r10,r10,7200
    b48c:	da802415 	stw	r10,144(sp)
    b490:	003e8306 	br	aea0 <__alt_data_end+0xff00aea0>
    b494:	d8801c17 	ldw	r2,112(sp)
    b498:	dd002117 	ldw	r20,132(sp)
    b49c:	103eb926 	beq	r2,zero,af84 <__alt_data_end+0xff00af84>
    b4a0:	d9002017 	ldw	r4,128(sp)
    b4a4:	d9801a04 	addi	r6,sp,104
    b4a8:	a00b883a 	mov	r5,r20
    b4ac:	000a11c0 	call	a11c <__sprint_r.part.0>
    b4b0:	003eb406 	br	af84 <__alt_data_end+0xff00af84>
    b4b4:	80c00043 	ldbu	r3,1(r16)
    b4b8:	a5000814 	ori	r20,r20,32
    b4bc:	84000044 	addi	r16,r16,1
    b4c0:	18c03fcc 	andi	r3,r3,255
    b4c4:	18c0201c 	xori	r3,r3,128
    b4c8:	18ffe004 	addi	r3,r3,-128
    b4cc:	003bb706 	br	a3ac <__alt_data_end+0xff00a3ac>
    b4d0:	a809883a 	mov	r4,r21
    b4d4:	d8c02a15 	stw	r3,168(sp)
    b4d8:	da002b15 	stw	r8,172(sp)
    b4dc:	00033e40 	call	33e4 <strlen>
    b4e0:	d8c02a17 	ldw	r3,168(sp)
    b4e4:	1027883a 	mov	r19,r2
    b4e8:	df001d83 	ldbu	fp,118(sp)
    b4ec:	d8c02215 	stw	r3,136(sp)
    b4f0:	0013883a 	mov	r9,zero
    b4f4:	da002b17 	ldw	r8,172(sp)
    b4f8:	003c4d06 	br	a630 <__alt_data_end+0xff00a630>
    b4fc:	d9402117 	ldw	r5,132(sp)
    b500:	d9002017 	ldw	r4,128(sp)
    b504:	d9801a04 	addi	r6,sp,104
    b508:	da402c15 	stw	r9,176(sp)
    b50c:	000a11c0 	call	a11c <__sprint_r.part.0>
    b510:	da402c17 	ldw	r9,176(sp)
    b514:	103e9a1e 	bne	r2,zero,af80 <__alt_data_end+0xff00af80>
    b518:	d9401b17 	ldw	r5,108(sp)
    b51c:	d8801c17 	ldw	r2,112(sp)
    b520:	d811883a 	mov	r8,sp
    b524:	29000044 	addi	r4,r5,1
    b528:	003e4206 	br	ae34 <__alt_data_end+0xff00ae34>
    b52c:	d9401b17 	ldw	r5,108(sp)
    b530:	01000074 	movhi	r4,1
    b534:	21070c04 	addi	r4,r4,7216
    b538:	d9002415 	stw	r4,144(sp)
    b53c:	29400044 	addi	r5,r5,1
    b540:	003c6d06 	br	a6f8 <__alt_data_end+0xff00a6f8>
    b544:	0039883a 	mov	fp,zero
    b548:	00800084 	movi	r2,2
    b54c:	10803fcc 	andi	r2,r2,255
    b550:	01000044 	movi	r4,1
    b554:	11001e26 	beq	r2,r4,b5d0 <___vfiprintf_internal_r+0x13a0>
    b558:	01000084 	movi	r4,2
    b55c:	11001e1e 	bne	r2,r4,b5d8 <___vfiprintf_internal_r+0x13a8>
    b560:	1829883a 	mov	r20,r3
    b564:	003eea06 	br	b110 <__alt_data_end+0xff00b110>
    b568:	a007883a 	mov	r3,r20
    b56c:	00800044 	movi	r2,1
    b570:	003ff606 	br	b54c <__alt_data_end+0xff00b54c>
    b574:	00800184 	movi	r2,6
    b578:	1240012e 	bgeu	r2,r9,b580 <___vfiprintf_internal_r+0x1350>
    b57c:	1013883a 	mov	r9,r2
    b580:	4827883a 	mov	r19,r9
    b584:	4825883a 	mov	r18,r9
    b588:	48001516 	blt	r9,zero,b5e0 <___vfiprintf_internal_r+0x13b0>
    b58c:	05400074 	movhi	r21,1
    b590:	d8c02215 	stw	r3,136(sp)
    b594:	ad46ac04 	addi	r21,r21,6832
    b598:	003d1406 	br	a9ec <__alt_data_end+0xff00a9ec>
    b59c:	02800074 	movhi	r10,1
    b5a0:	52870804 	addi	r10,r10,7200
    b5a4:	da802415 	stw	r10,144(sp)
    b5a8:	200d883a 	mov	r6,r4
    b5ac:	003c9106 	br	a7f4 <__alt_data_end+0xff00a7f4>
    b5b0:	5021883a 	mov	r16,r10
    b5b4:	0013883a 	mov	r9,zero
    b5b8:	003b7d06 	br	a3b0 <__alt_data_end+0xff00a3b0>
    b5bc:	4827883a 	mov	r19,r9
    b5c0:	df001d83 	ldbu	fp,118(sp)
    b5c4:	d8c02215 	stw	r3,136(sp)
    b5c8:	0013883a 	mov	r9,zero
    b5cc:	003c1806 	br	a630 <__alt_data_end+0xff00a630>
    b5d0:	1829883a 	mov	r20,r3
    b5d4:	003d1806 	br	aa38 <__alt_data_end+0xff00aa38>
    b5d8:	1829883a 	mov	r20,r3
    b5dc:	003ccd06 	br	a914 <__alt_data_end+0xff00a914>
    b5e0:	0025883a 	mov	r18,zero
    b5e4:	003fe906 	br	b58c <__alt_data_end+0xff00b58c>
    b5e8:	d8802217 	ldw	r2,136(sp)
    b5ec:	80c00043 	ldbu	r3,1(r16)
    b5f0:	5021883a 	mov	r16,r10
    b5f4:	12400017 	ldw	r9,0(r2)
    b5f8:	10800104 	addi	r2,r2,4
    b5fc:	d8802215 	stw	r2,136(sp)
    b600:	483faf0e 	bge	r9,zero,b4c0 <__alt_data_end+0xff00b4c0>
    b604:	18c03fcc 	andi	r3,r3,255
    b608:	18c0201c 	xori	r3,r3,128
    b60c:	027fffc4 	movi	r9,-1
    b610:	18ffe004 	addi	r3,r3,-128
    b614:	003b6506 	br	a3ac <__alt_data_end+0xff00a3ac>
    b618:	d9c01d85 	stb	r7,118(sp)
    b61c:	003ca006 	br	a8a0 <__alt_data_end+0xff00a8a0>
    b620:	d9c01d85 	stb	r7,118(sp)
    b624:	003cad06 	br	a8dc <__alt_data_end+0xff00a8dc>
    b628:	d9c01d85 	stb	r7,118(sp)
    b62c:	003d7d06 	br	ac24 <__alt_data_end+0xff00ac24>
    b630:	d9c01d85 	stb	r7,118(sp)
    b634:	003d5f06 	br	abb4 <__alt_data_end+0xff00abb4>
    b638:	a080004c 	andi	r2,r20,1
    b63c:	0039883a 	mov	fp,zero
    b640:	10000526 	beq	r2,zero,b658 <___vfiprintf_internal_r+0x1428>
    b644:	00800c04 	movi	r2,48
    b648:	d88019c5 	stb	r2,103(sp)
    b64c:	dcc02717 	ldw	r19,156(sp)
    b650:	dd4019c4 	addi	r21,sp,103
    b654:	003bf606 	br	a630 <__alt_data_end+0xff00a630>
    b658:	0027883a 	mov	r19,zero
    b65c:	dd401a04 	addi	r21,sp,104
    b660:	003bf306 	br	a630 <__alt_data_end+0xff00a630>
    b664:	d9c01d85 	stb	r7,118(sp)
    b668:	003dc806 	br	ad8c <__alt_data_end+0xff00ad8c>
    b66c:	d9c01d85 	stb	r7,118(sp)
    b670:	003d3a06 	br	ab5c <__alt_data_end+0xff00ab5c>
    b674:	d9c01d85 	stb	r7,118(sp)
    b678:	003d2a06 	br	ab24 <__alt_data_end+0xff00ab24>
    b67c:	d9c01d85 	stb	r7,118(sp)
    b680:	003cde06 	br	a9fc <__alt_data_end+0xff00a9fc>
    b684:	d9c01d85 	stb	r7,118(sp)
    b688:	003cbc06 	br	a97c <__alt_data_end+0xff00a97c>

0000b68c <__vfiprintf_internal>:
    b68c:	00800074 	movhi	r2,1
    b690:	108e0904 	addi	r2,r2,14372
    b694:	300f883a 	mov	r7,r6
    b698:	280d883a 	mov	r6,r5
    b69c:	200b883a 	mov	r5,r4
    b6a0:	11000017 	ldw	r4,0(r2)
    b6a4:	000a2301 	jmpi	a230 <___vfiprintf_internal_r>

0000b6a8 <__sbprintf>:
    b6a8:	2880030b 	ldhu	r2,12(r5)
    b6ac:	2ac01917 	ldw	r11,100(r5)
    b6b0:	2a80038b 	ldhu	r10,14(r5)
    b6b4:	2a400717 	ldw	r9,28(r5)
    b6b8:	2a000917 	ldw	r8,36(r5)
    b6bc:	defee204 	addi	sp,sp,-1144
    b6c0:	00c10004 	movi	r3,1024
    b6c4:	dc011a15 	stw	r16,1128(sp)
    b6c8:	10bfff4c 	andi	r2,r2,65533
    b6cc:	2821883a 	mov	r16,r5
    b6d0:	d8cb883a 	add	r5,sp,r3
    b6d4:	dc811c15 	stw	r18,1136(sp)
    b6d8:	dc411b15 	stw	r17,1132(sp)
    b6dc:	dfc11d15 	stw	ra,1140(sp)
    b6e0:	2025883a 	mov	r18,r4
    b6e4:	d881030d 	sth	r2,1036(sp)
    b6e8:	dac11915 	stw	r11,1124(sp)
    b6ec:	da81038d 	sth	r10,1038(sp)
    b6f0:	da410715 	stw	r9,1052(sp)
    b6f4:	da010915 	stw	r8,1060(sp)
    b6f8:	dec10015 	stw	sp,1024(sp)
    b6fc:	dec10415 	stw	sp,1040(sp)
    b700:	d8c10215 	stw	r3,1032(sp)
    b704:	d8c10515 	stw	r3,1044(sp)
    b708:	d8010615 	stw	zero,1048(sp)
    b70c:	000a2300 	call	a230 <___vfiprintf_internal_r>
    b710:	1023883a 	mov	r17,r2
    b714:	10000416 	blt	r2,zero,b728 <__sbprintf+0x80>
    b718:	d9410004 	addi	r5,sp,1024
    b71c:	9009883a 	mov	r4,r18
    b720:	00073440 	call	7344 <_fflush_r>
    b724:	10000d1e 	bne	r2,zero,b75c <__sbprintf+0xb4>
    b728:	d881030b 	ldhu	r2,1036(sp)
    b72c:	1080100c 	andi	r2,r2,64
    b730:	10000326 	beq	r2,zero,b740 <__sbprintf+0x98>
    b734:	8080030b 	ldhu	r2,12(r16)
    b738:	10801014 	ori	r2,r2,64
    b73c:	8080030d 	sth	r2,12(r16)
    b740:	8805883a 	mov	r2,r17
    b744:	dfc11d17 	ldw	ra,1140(sp)
    b748:	dc811c17 	ldw	r18,1136(sp)
    b74c:	dc411b17 	ldw	r17,1132(sp)
    b750:	dc011a17 	ldw	r16,1128(sp)
    b754:	dec11e04 	addi	sp,sp,1144
    b758:	f800283a 	ret
    b75c:	047fffc4 	movi	r17,-1
    b760:	003ff106 	br	b728 <__alt_data_end+0xff00b728>

0000b764 <_write_r>:
    b764:	defffd04 	addi	sp,sp,-12
    b768:	2805883a 	mov	r2,r5
    b76c:	dc000015 	stw	r16,0(sp)
    b770:	04000074 	movhi	r16,1
    b774:	dc400115 	stw	r17,4(sp)
    b778:	300b883a 	mov	r5,r6
    b77c:	84152604 	addi	r16,r16,21656
    b780:	2023883a 	mov	r17,r4
    b784:	380d883a 	mov	r6,r7
    b788:	1009883a 	mov	r4,r2
    b78c:	dfc00215 	stw	ra,8(sp)
    b790:	80000015 	stw	zero,0(r16)
    b794:	000f0b00 	call	f0b0 <write>
    b798:	00ffffc4 	movi	r3,-1
    b79c:	10c00526 	beq	r2,r3,b7b4 <_write_r+0x50>
    b7a0:	dfc00217 	ldw	ra,8(sp)
    b7a4:	dc400117 	ldw	r17,4(sp)
    b7a8:	dc000017 	ldw	r16,0(sp)
    b7ac:	dec00304 	addi	sp,sp,12
    b7b0:	f800283a 	ret
    b7b4:	80c00017 	ldw	r3,0(r16)
    b7b8:	183ff926 	beq	r3,zero,b7a0 <__alt_data_end+0xff00b7a0>
    b7bc:	88c00015 	stw	r3,0(r17)
    b7c0:	003ff706 	br	b7a0 <__alt_data_end+0xff00b7a0>

0000b7c4 <_close_r>:
    b7c4:	defffd04 	addi	sp,sp,-12
    b7c8:	dc000015 	stw	r16,0(sp)
    b7cc:	04000074 	movhi	r16,1
    b7d0:	dc400115 	stw	r17,4(sp)
    b7d4:	84152604 	addi	r16,r16,21656
    b7d8:	2023883a 	mov	r17,r4
    b7dc:	2809883a 	mov	r4,r5
    b7e0:	dfc00215 	stw	ra,8(sp)
    b7e4:	80000015 	stw	zero,0(r16)
    b7e8:	000e7f80 	call	e7f8 <close>
    b7ec:	00ffffc4 	movi	r3,-1
    b7f0:	10c00526 	beq	r2,r3,b808 <_close_r+0x44>
    b7f4:	dfc00217 	ldw	ra,8(sp)
    b7f8:	dc400117 	ldw	r17,4(sp)
    b7fc:	dc000017 	ldw	r16,0(sp)
    b800:	dec00304 	addi	sp,sp,12
    b804:	f800283a 	ret
    b808:	80c00017 	ldw	r3,0(r16)
    b80c:	183ff926 	beq	r3,zero,b7f4 <__alt_data_end+0xff00b7f4>
    b810:	88c00015 	stw	r3,0(r17)
    b814:	003ff706 	br	b7f4 <__alt_data_end+0xff00b7f4>

0000b818 <_calloc_r>:
    b818:	298b383a 	mul	r5,r5,r6
    b81c:	defffe04 	addi	sp,sp,-8
    b820:	dfc00115 	stw	ra,4(sp)
    b824:	dc000015 	stw	r16,0(sp)
    b828:	0002a440 	call	2a44 <_malloc_r>
    b82c:	10002926 	beq	r2,zero,b8d4 <_calloc_r+0xbc>
    b830:	11bfff17 	ldw	r6,-4(r2)
    b834:	1021883a 	mov	r16,r2
    b838:	00bfff04 	movi	r2,-4
    b83c:	308c703a 	and	r6,r6,r2
    b840:	00c00904 	movi	r3,36
    b844:	308d883a 	add	r6,r6,r2
    b848:	19801636 	bltu	r3,r6,b8a4 <_calloc_r+0x8c>
    b84c:	008004c4 	movi	r2,19
    b850:	11800b2e 	bgeu	r2,r6,b880 <_calloc_r+0x68>
    b854:	80000015 	stw	zero,0(r16)
    b858:	80000115 	stw	zero,4(r16)
    b85c:	008006c4 	movi	r2,27
    b860:	11801a2e 	bgeu	r2,r6,b8cc <_calloc_r+0xb4>
    b864:	80000215 	stw	zero,8(r16)
    b868:	80000315 	stw	zero,12(r16)
    b86c:	30c0151e 	bne	r6,r3,b8c4 <_calloc_r+0xac>
    b870:	80000415 	stw	zero,16(r16)
    b874:	80800604 	addi	r2,r16,24
    b878:	80000515 	stw	zero,20(r16)
    b87c:	00000106 	br	b884 <_calloc_r+0x6c>
    b880:	8005883a 	mov	r2,r16
    b884:	10000015 	stw	zero,0(r2)
    b888:	10000115 	stw	zero,4(r2)
    b88c:	10000215 	stw	zero,8(r2)
    b890:	8005883a 	mov	r2,r16
    b894:	dfc00117 	ldw	ra,4(sp)
    b898:	dc000017 	ldw	r16,0(sp)
    b89c:	dec00204 	addi	sp,sp,8
    b8a0:	f800283a 	ret
    b8a4:	000b883a 	mov	r5,zero
    b8a8:	8009883a 	mov	r4,r16
    b8ac:	00088080 	call	8808 <memset>
    b8b0:	8005883a 	mov	r2,r16
    b8b4:	dfc00117 	ldw	ra,4(sp)
    b8b8:	dc000017 	ldw	r16,0(sp)
    b8bc:	dec00204 	addi	sp,sp,8
    b8c0:	f800283a 	ret
    b8c4:	80800404 	addi	r2,r16,16
    b8c8:	003fee06 	br	b884 <__alt_data_end+0xff00b884>
    b8cc:	80800204 	addi	r2,r16,8
    b8d0:	003fec06 	br	b884 <__alt_data_end+0xff00b884>
    b8d4:	0005883a 	mov	r2,zero
    b8d8:	003fee06 	br	b894 <__alt_data_end+0xff00b894>

0000b8dc <_fclose_r>:
    b8dc:	28003926 	beq	r5,zero,b9c4 <_fclose_r+0xe8>
    b8e0:	defffc04 	addi	sp,sp,-16
    b8e4:	dc400115 	stw	r17,4(sp)
    b8e8:	dc000015 	stw	r16,0(sp)
    b8ec:	dfc00315 	stw	ra,12(sp)
    b8f0:	dc800215 	stw	r18,8(sp)
    b8f4:	2023883a 	mov	r17,r4
    b8f8:	2821883a 	mov	r16,r5
    b8fc:	20000226 	beq	r4,zero,b908 <_fclose_r+0x2c>
    b900:	20800e17 	ldw	r2,56(r4)
    b904:	10002726 	beq	r2,zero,b9a4 <_fclose_r+0xc8>
    b908:	8080030f 	ldh	r2,12(r16)
    b90c:	1000071e 	bne	r2,zero,b92c <_fclose_r+0x50>
    b910:	0005883a 	mov	r2,zero
    b914:	dfc00317 	ldw	ra,12(sp)
    b918:	dc800217 	ldw	r18,8(sp)
    b91c:	dc400117 	ldw	r17,4(sp)
    b920:	dc000017 	ldw	r16,0(sp)
    b924:	dec00404 	addi	sp,sp,16
    b928:	f800283a 	ret
    b92c:	800b883a 	mov	r5,r16
    b930:	8809883a 	mov	r4,r17
    b934:	00071280 	call	7128 <__sflush_r>
    b938:	1025883a 	mov	r18,r2
    b93c:	80800b17 	ldw	r2,44(r16)
    b940:	10000426 	beq	r2,zero,b954 <_fclose_r+0x78>
    b944:	81400717 	ldw	r5,28(r16)
    b948:	8809883a 	mov	r4,r17
    b94c:	103ee83a 	callr	r2
    b950:	10001616 	blt	r2,zero,b9ac <_fclose_r+0xd0>
    b954:	8080030b 	ldhu	r2,12(r16)
    b958:	1080200c 	andi	r2,r2,128
    b95c:	1000151e 	bne	r2,zero,b9b4 <_fclose_r+0xd8>
    b960:	81400c17 	ldw	r5,48(r16)
    b964:	28000526 	beq	r5,zero,b97c <_fclose_r+0xa0>
    b968:	80801004 	addi	r2,r16,64
    b96c:	28800226 	beq	r5,r2,b978 <_fclose_r+0x9c>
    b970:	8809883a 	mov	r4,r17
    b974:	00078940 	call	7894 <_free_r>
    b978:	80000c15 	stw	zero,48(r16)
    b97c:	81401117 	ldw	r5,68(r16)
    b980:	28000326 	beq	r5,zero,b990 <_fclose_r+0xb4>
    b984:	8809883a 	mov	r4,r17
    b988:	00078940 	call	7894 <_free_r>
    b98c:	80001115 	stw	zero,68(r16)
    b990:	00077300 	call	7730 <__sfp_lock_acquire>
    b994:	8000030d 	sth	zero,12(r16)
    b998:	00077340 	call	7734 <__sfp_lock_release>
    b99c:	9005883a 	mov	r2,r18
    b9a0:	003fdc06 	br	b914 <__alt_data_end+0xff00b914>
    b9a4:	00077200 	call	7720 <__sinit>
    b9a8:	003fd706 	br	b908 <__alt_data_end+0xff00b908>
    b9ac:	04bfffc4 	movi	r18,-1
    b9b0:	003fe806 	br	b954 <__alt_data_end+0xff00b954>
    b9b4:	81400417 	ldw	r5,16(r16)
    b9b8:	8809883a 	mov	r4,r17
    b9bc:	00078940 	call	7894 <_free_r>
    b9c0:	003fe706 	br	b960 <__alt_data_end+0xff00b960>
    b9c4:	0005883a 	mov	r2,zero
    b9c8:	f800283a 	ret

0000b9cc <fclose>:
    b9cc:	00800074 	movhi	r2,1
    b9d0:	108e0904 	addi	r2,r2,14372
    b9d4:	200b883a 	mov	r5,r4
    b9d8:	11000017 	ldw	r4,0(r2)
    b9dc:	000b8dc1 	jmpi	b8dc <_fclose_r>

0000b9e0 <__fputwc>:
    b9e0:	defff804 	addi	sp,sp,-32
    b9e4:	dcc00415 	stw	r19,16(sp)
    b9e8:	dc800315 	stw	r18,12(sp)
    b9ec:	dc000115 	stw	r16,4(sp)
    b9f0:	dfc00715 	stw	ra,28(sp)
    b9f4:	dd400615 	stw	r21,24(sp)
    b9f8:	dd000515 	stw	r20,20(sp)
    b9fc:	dc400215 	stw	r17,8(sp)
    ba00:	2027883a 	mov	r19,r4
    ba04:	2825883a 	mov	r18,r5
    ba08:	3021883a 	mov	r16,r6
    ba0c:	00082700 	call	8270 <__locale_mb_cur_max>
    ba10:	00c00044 	movi	r3,1
    ba14:	10c03e26 	beq	r2,r3,bb10 <__fputwc+0x130>
    ba18:	81c01704 	addi	r7,r16,92
    ba1c:	900d883a 	mov	r6,r18
    ba20:	d80b883a 	mov	r5,sp
    ba24:	9809883a 	mov	r4,r19
    ba28:	000beb00 	call	beb0 <_wcrtomb_r>
    ba2c:	1029883a 	mov	r20,r2
    ba30:	00bfffc4 	movi	r2,-1
    ba34:	a0802026 	beq	r20,r2,bab8 <__fputwc+0xd8>
    ba38:	d9400003 	ldbu	r5,0(sp)
    ba3c:	a0001c26 	beq	r20,zero,bab0 <__fputwc+0xd0>
    ba40:	0023883a 	mov	r17,zero
    ba44:	05400284 	movi	r21,10
    ba48:	00000906 	br	ba70 <__fputwc+0x90>
    ba4c:	80800017 	ldw	r2,0(r16)
    ba50:	11400005 	stb	r5,0(r2)
    ba54:	80c00017 	ldw	r3,0(r16)
    ba58:	18c00044 	addi	r3,r3,1
    ba5c:	80c00015 	stw	r3,0(r16)
    ba60:	8c400044 	addi	r17,r17,1
    ba64:	dc45883a 	add	r2,sp,r17
    ba68:	8d00112e 	bgeu	r17,r20,bab0 <__fputwc+0xd0>
    ba6c:	11400003 	ldbu	r5,0(r2)
    ba70:	80c00217 	ldw	r3,8(r16)
    ba74:	18ffffc4 	addi	r3,r3,-1
    ba78:	80c00215 	stw	r3,8(r16)
    ba7c:	183ff30e 	bge	r3,zero,ba4c <__alt_data_end+0xff00ba4c>
    ba80:	80800617 	ldw	r2,24(r16)
    ba84:	18801916 	blt	r3,r2,baec <__fputwc+0x10c>
    ba88:	80800017 	ldw	r2,0(r16)
    ba8c:	11400005 	stb	r5,0(r2)
    ba90:	80800017 	ldw	r2,0(r16)
    ba94:	10c00003 	ldbu	r3,0(r2)
    ba98:	10800044 	addi	r2,r2,1
    ba9c:	1d402326 	beq	r3,r21,bb2c <__fputwc+0x14c>
    baa0:	80800015 	stw	r2,0(r16)
    baa4:	8c400044 	addi	r17,r17,1
    baa8:	dc45883a 	add	r2,sp,r17
    baac:	8d3fef36 	bltu	r17,r20,ba6c <__alt_data_end+0xff00ba6c>
    bab0:	9005883a 	mov	r2,r18
    bab4:	00000406 	br	bac8 <__fputwc+0xe8>
    bab8:	80c0030b 	ldhu	r3,12(r16)
    babc:	a005883a 	mov	r2,r20
    bac0:	18c01014 	ori	r3,r3,64
    bac4:	80c0030d 	sth	r3,12(r16)
    bac8:	dfc00717 	ldw	ra,28(sp)
    bacc:	dd400617 	ldw	r21,24(sp)
    bad0:	dd000517 	ldw	r20,20(sp)
    bad4:	dcc00417 	ldw	r19,16(sp)
    bad8:	dc800317 	ldw	r18,12(sp)
    badc:	dc400217 	ldw	r17,8(sp)
    bae0:	dc000117 	ldw	r16,4(sp)
    bae4:	dec00804 	addi	sp,sp,32
    bae8:	f800283a 	ret
    baec:	800d883a 	mov	r6,r16
    baf0:	29403fcc 	andi	r5,r5,255
    baf4:	9809883a 	mov	r4,r19
    baf8:	000bd580 	call	bd58 <__swbuf_r>
    bafc:	10bfffe0 	cmpeqi	r2,r2,-1
    bb00:	10803fcc 	andi	r2,r2,255
    bb04:	103fd626 	beq	r2,zero,ba60 <__alt_data_end+0xff00ba60>
    bb08:	00bfffc4 	movi	r2,-1
    bb0c:	003fee06 	br	bac8 <__alt_data_end+0xff00bac8>
    bb10:	90ffffc4 	addi	r3,r18,-1
    bb14:	01003f84 	movi	r4,254
    bb18:	20ffbf36 	bltu	r4,r3,ba18 <__alt_data_end+0xff00ba18>
    bb1c:	900b883a 	mov	r5,r18
    bb20:	dc800005 	stb	r18,0(sp)
    bb24:	1029883a 	mov	r20,r2
    bb28:	003fc506 	br	ba40 <__alt_data_end+0xff00ba40>
    bb2c:	800d883a 	mov	r6,r16
    bb30:	a80b883a 	mov	r5,r21
    bb34:	9809883a 	mov	r4,r19
    bb38:	000bd580 	call	bd58 <__swbuf_r>
    bb3c:	10bfffe0 	cmpeqi	r2,r2,-1
    bb40:	003fef06 	br	bb00 <__alt_data_end+0xff00bb00>

0000bb44 <_fputwc_r>:
    bb44:	3080030b 	ldhu	r2,12(r6)
    bb48:	10c8000c 	andi	r3,r2,8192
    bb4c:	1800051e 	bne	r3,zero,bb64 <_fputwc_r+0x20>
    bb50:	30c01917 	ldw	r3,100(r6)
    bb54:	10880014 	ori	r2,r2,8192
    bb58:	3080030d 	sth	r2,12(r6)
    bb5c:	18880014 	ori	r2,r3,8192
    bb60:	30801915 	stw	r2,100(r6)
    bb64:	000b9e01 	jmpi	b9e0 <__fputwc>

0000bb68 <fputwc>:
    bb68:	00800074 	movhi	r2,1
    bb6c:	defffc04 	addi	sp,sp,-16
    bb70:	108e0904 	addi	r2,r2,14372
    bb74:	dc000115 	stw	r16,4(sp)
    bb78:	14000017 	ldw	r16,0(r2)
    bb7c:	dc400215 	stw	r17,8(sp)
    bb80:	dfc00315 	stw	ra,12(sp)
    bb84:	2023883a 	mov	r17,r4
    bb88:	80000226 	beq	r16,zero,bb94 <fputwc+0x2c>
    bb8c:	80800e17 	ldw	r2,56(r16)
    bb90:	10001026 	beq	r2,zero,bbd4 <fputwc+0x6c>
    bb94:	2880030b 	ldhu	r2,12(r5)
    bb98:	10c8000c 	andi	r3,r2,8192
    bb9c:	1800051e 	bne	r3,zero,bbb4 <fputwc+0x4c>
    bba0:	28c01917 	ldw	r3,100(r5)
    bba4:	10880014 	ori	r2,r2,8192
    bba8:	2880030d 	sth	r2,12(r5)
    bbac:	18880014 	ori	r2,r3,8192
    bbb0:	28801915 	stw	r2,100(r5)
    bbb4:	280d883a 	mov	r6,r5
    bbb8:	8009883a 	mov	r4,r16
    bbbc:	880b883a 	mov	r5,r17
    bbc0:	dfc00317 	ldw	ra,12(sp)
    bbc4:	dc400217 	ldw	r17,8(sp)
    bbc8:	dc000117 	ldw	r16,4(sp)
    bbcc:	dec00404 	addi	sp,sp,16
    bbd0:	000b9e01 	jmpi	b9e0 <__fputwc>
    bbd4:	8009883a 	mov	r4,r16
    bbd8:	d9400015 	stw	r5,0(sp)
    bbdc:	00077200 	call	7720 <__sinit>
    bbe0:	d9400017 	ldw	r5,0(sp)
    bbe4:	003feb06 	br	bb94 <__alt_data_end+0xff00bb94>

0000bbe8 <_fstat_r>:
    bbe8:	defffd04 	addi	sp,sp,-12
    bbec:	2805883a 	mov	r2,r5
    bbf0:	dc000015 	stw	r16,0(sp)
    bbf4:	04000074 	movhi	r16,1
    bbf8:	dc400115 	stw	r17,4(sp)
    bbfc:	84152604 	addi	r16,r16,21656
    bc00:	2023883a 	mov	r17,r4
    bc04:	300b883a 	mov	r5,r6
    bc08:	1009883a 	mov	r4,r2
    bc0c:	dfc00215 	stw	ra,8(sp)
    bc10:	80000015 	stw	zero,0(r16)
    bc14:	000e9300 	call	e930 <fstat>
    bc18:	00ffffc4 	movi	r3,-1
    bc1c:	10c00526 	beq	r2,r3,bc34 <_fstat_r+0x4c>
    bc20:	dfc00217 	ldw	ra,8(sp)
    bc24:	dc400117 	ldw	r17,4(sp)
    bc28:	dc000017 	ldw	r16,0(sp)
    bc2c:	dec00304 	addi	sp,sp,12
    bc30:	f800283a 	ret
    bc34:	80c00017 	ldw	r3,0(r16)
    bc38:	183ff926 	beq	r3,zero,bc20 <__alt_data_end+0xff00bc20>
    bc3c:	88c00015 	stw	r3,0(r17)
    bc40:	003ff706 	br	bc20 <__alt_data_end+0xff00bc20>

0000bc44 <_isatty_r>:
    bc44:	defffd04 	addi	sp,sp,-12
    bc48:	dc000015 	stw	r16,0(sp)
    bc4c:	04000074 	movhi	r16,1
    bc50:	dc400115 	stw	r17,4(sp)
    bc54:	84152604 	addi	r16,r16,21656
    bc58:	2023883a 	mov	r17,r4
    bc5c:	2809883a 	mov	r4,r5
    bc60:	dfc00215 	stw	ra,8(sp)
    bc64:	80000015 	stw	zero,0(r16)
    bc68:	000ea1c0 	call	ea1c <isatty>
    bc6c:	00ffffc4 	movi	r3,-1
    bc70:	10c00526 	beq	r2,r3,bc88 <_isatty_r+0x44>
    bc74:	dfc00217 	ldw	ra,8(sp)
    bc78:	dc400117 	ldw	r17,4(sp)
    bc7c:	dc000017 	ldw	r16,0(sp)
    bc80:	dec00304 	addi	sp,sp,12
    bc84:	f800283a 	ret
    bc88:	80c00017 	ldw	r3,0(r16)
    bc8c:	183ff926 	beq	r3,zero,bc74 <__alt_data_end+0xff00bc74>
    bc90:	88c00015 	stw	r3,0(r17)
    bc94:	003ff706 	br	bc74 <__alt_data_end+0xff00bc74>

0000bc98 <_lseek_r>:
    bc98:	defffd04 	addi	sp,sp,-12
    bc9c:	2805883a 	mov	r2,r5
    bca0:	dc000015 	stw	r16,0(sp)
    bca4:	04000074 	movhi	r16,1
    bca8:	dc400115 	stw	r17,4(sp)
    bcac:	300b883a 	mov	r5,r6
    bcb0:	84152604 	addi	r16,r16,21656
    bcb4:	2023883a 	mov	r17,r4
    bcb8:	380d883a 	mov	r6,r7
    bcbc:	1009883a 	mov	r4,r2
    bcc0:	dfc00215 	stw	ra,8(sp)
    bcc4:	80000015 	stw	zero,0(r16)
    bcc8:	000ebe80 	call	ebe8 <lseek>
    bccc:	00ffffc4 	movi	r3,-1
    bcd0:	10c00526 	beq	r2,r3,bce8 <_lseek_r+0x50>
    bcd4:	dfc00217 	ldw	ra,8(sp)
    bcd8:	dc400117 	ldw	r17,4(sp)
    bcdc:	dc000017 	ldw	r16,0(sp)
    bce0:	dec00304 	addi	sp,sp,12
    bce4:	f800283a 	ret
    bce8:	80c00017 	ldw	r3,0(r16)
    bcec:	183ff926 	beq	r3,zero,bcd4 <__alt_data_end+0xff00bcd4>
    bcf0:	88c00015 	stw	r3,0(r17)
    bcf4:	003ff706 	br	bcd4 <__alt_data_end+0xff00bcd4>

0000bcf8 <_read_r>:
    bcf8:	defffd04 	addi	sp,sp,-12
    bcfc:	2805883a 	mov	r2,r5
    bd00:	dc000015 	stw	r16,0(sp)
    bd04:	04000074 	movhi	r16,1
    bd08:	dc400115 	stw	r17,4(sp)
    bd0c:	300b883a 	mov	r5,r6
    bd10:	84152604 	addi	r16,r16,21656
    bd14:	2023883a 	mov	r17,r4
    bd18:	380d883a 	mov	r6,r7
    bd1c:	1009883a 	mov	r4,r2
    bd20:	dfc00215 	stw	ra,8(sp)
    bd24:	80000015 	stw	zero,0(r16)
    bd28:	000edbc0 	call	edbc <read>
    bd2c:	00ffffc4 	movi	r3,-1
    bd30:	10c00526 	beq	r2,r3,bd48 <_read_r+0x50>
    bd34:	dfc00217 	ldw	ra,8(sp)
    bd38:	dc400117 	ldw	r17,4(sp)
    bd3c:	dc000017 	ldw	r16,0(sp)
    bd40:	dec00304 	addi	sp,sp,12
    bd44:	f800283a 	ret
    bd48:	80c00017 	ldw	r3,0(r16)
    bd4c:	183ff926 	beq	r3,zero,bd34 <__alt_data_end+0xff00bd34>
    bd50:	88c00015 	stw	r3,0(r17)
    bd54:	003ff706 	br	bd34 <__alt_data_end+0xff00bd34>

0000bd58 <__swbuf_r>:
    bd58:	defffb04 	addi	sp,sp,-20
    bd5c:	dcc00315 	stw	r19,12(sp)
    bd60:	dc800215 	stw	r18,8(sp)
    bd64:	dc000015 	stw	r16,0(sp)
    bd68:	dfc00415 	stw	ra,16(sp)
    bd6c:	dc400115 	stw	r17,4(sp)
    bd70:	2025883a 	mov	r18,r4
    bd74:	2827883a 	mov	r19,r5
    bd78:	3021883a 	mov	r16,r6
    bd7c:	20000226 	beq	r4,zero,bd88 <__swbuf_r+0x30>
    bd80:	20800e17 	ldw	r2,56(r4)
    bd84:	10004226 	beq	r2,zero,be90 <__swbuf_r+0x138>
    bd88:	80800617 	ldw	r2,24(r16)
    bd8c:	8100030b 	ldhu	r4,12(r16)
    bd90:	80800215 	stw	r2,8(r16)
    bd94:	2080020c 	andi	r2,r4,8
    bd98:	10003626 	beq	r2,zero,be74 <__swbuf_r+0x11c>
    bd9c:	80c00417 	ldw	r3,16(r16)
    bda0:	18003426 	beq	r3,zero,be74 <__swbuf_r+0x11c>
    bda4:	2088000c 	andi	r2,r4,8192
    bda8:	9c403fcc 	andi	r17,r19,255
    bdac:	10001a26 	beq	r2,zero,be18 <__swbuf_r+0xc0>
    bdb0:	80800017 	ldw	r2,0(r16)
    bdb4:	81000517 	ldw	r4,20(r16)
    bdb8:	10c7c83a 	sub	r3,r2,r3
    bdbc:	1900200e 	bge	r3,r4,be40 <__swbuf_r+0xe8>
    bdc0:	18c00044 	addi	r3,r3,1
    bdc4:	81000217 	ldw	r4,8(r16)
    bdc8:	11400044 	addi	r5,r2,1
    bdcc:	81400015 	stw	r5,0(r16)
    bdd0:	213fffc4 	addi	r4,r4,-1
    bdd4:	81000215 	stw	r4,8(r16)
    bdd8:	14c00005 	stb	r19,0(r2)
    bddc:	80800517 	ldw	r2,20(r16)
    bde0:	10c01e26 	beq	r2,r3,be5c <__swbuf_r+0x104>
    bde4:	8080030b 	ldhu	r2,12(r16)
    bde8:	1080004c 	andi	r2,r2,1
    bdec:	10000226 	beq	r2,zero,bdf8 <__swbuf_r+0xa0>
    bdf0:	00800284 	movi	r2,10
    bdf4:	88801926 	beq	r17,r2,be5c <__swbuf_r+0x104>
    bdf8:	8805883a 	mov	r2,r17
    bdfc:	dfc00417 	ldw	ra,16(sp)
    be00:	dcc00317 	ldw	r19,12(sp)
    be04:	dc800217 	ldw	r18,8(sp)
    be08:	dc400117 	ldw	r17,4(sp)
    be0c:	dc000017 	ldw	r16,0(sp)
    be10:	dec00504 	addi	sp,sp,20
    be14:	f800283a 	ret
    be18:	81401917 	ldw	r5,100(r16)
    be1c:	00b7ffc4 	movi	r2,-8193
    be20:	21080014 	ori	r4,r4,8192
    be24:	2884703a 	and	r2,r5,r2
    be28:	80801915 	stw	r2,100(r16)
    be2c:	80800017 	ldw	r2,0(r16)
    be30:	8100030d 	sth	r4,12(r16)
    be34:	81000517 	ldw	r4,20(r16)
    be38:	10c7c83a 	sub	r3,r2,r3
    be3c:	193fe016 	blt	r3,r4,bdc0 <__alt_data_end+0xff00bdc0>
    be40:	800b883a 	mov	r5,r16
    be44:	9009883a 	mov	r4,r18
    be48:	00073440 	call	7344 <_fflush_r>
    be4c:	1000071e 	bne	r2,zero,be6c <__swbuf_r+0x114>
    be50:	80800017 	ldw	r2,0(r16)
    be54:	00c00044 	movi	r3,1
    be58:	003fda06 	br	bdc4 <__alt_data_end+0xff00bdc4>
    be5c:	800b883a 	mov	r5,r16
    be60:	9009883a 	mov	r4,r18
    be64:	00073440 	call	7344 <_fflush_r>
    be68:	103fe326 	beq	r2,zero,bdf8 <__alt_data_end+0xff00bdf8>
    be6c:	00bfffc4 	movi	r2,-1
    be70:	003fe206 	br	bdfc <__alt_data_end+0xff00bdfc>
    be74:	800b883a 	mov	r5,r16
    be78:	9009883a 	mov	r4,r18
    be7c:	000574c0 	call	574c <__swsetup_r>
    be80:	103ffa1e 	bne	r2,zero,be6c <__alt_data_end+0xff00be6c>
    be84:	8100030b 	ldhu	r4,12(r16)
    be88:	80c00417 	ldw	r3,16(r16)
    be8c:	003fc506 	br	bda4 <__alt_data_end+0xff00bda4>
    be90:	00077200 	call	7720 <__sinit>
    be94:	003fbc06 	br	bd88 <__alt_data_end+0xff00bd88>

0000be98 <__swbuf>:
    be98:	00800074 	movhi	r2,1
    be9c:	108e0904 	addi	r2,r2,14372
    bea0:	280d883a 	mov	r6,r5
    bea4:	200b883a 	mov	r5,r4
    bea8:	11000017 	ldw	r4,0(r2)
    beac:	000bd581 	jmpi	bd58 <__swbuf_r>

0000beb0 <_wcrtomb_r>:
    beb0:	defff604 	addi	sp,sp,-40
    beb4:	00800074 	movhi	r2,1
    beb8:	dc800815 	stw	r18,32(sp)
    bebc:	dc400715 	stw	r17,28(sp)
    bec0:	dc000615 	stw	r16,24(sp)
    bec4:	108e0b04 	addi	r2,r2,14380
    bec8:	dfc00915 	stw	ra,36(sp)
    becc:	2021883a 	mov	r16,r4
    bed0:	3823883a 	mov	r17,r7
    bed4:	14800017 	ldw	r18,0(r2)
    bed8:	28001426 	beq	r5,zero,bf2c <_wcrtomb_r+0x7c>
    bedc:	d9400415 	stw	r5,16(sp)
    bee0:	d9800515 	stw	r6,20(sp)
    bee4:	00082640 	call	8264 <__locale_charset>
    bee8:	d9800517 	ldw	r6,20(sp)
    beec:	d9400417 	ldw	r5,16(sp)
    bef0:	100f883a 	mov	r7,r2
    bef4:	dc400015 	stw	r17,0(sp)
    bef8:	8009883a 	mov	r4,r16
    befc:	903ee83a 	callr	r18
    bf00:	00ffffc4 	movi	r3,-1
    bf04:	10c0031e 	bne	r2,r3,bf14 <_wcrtomb_r+0x64>
    bf08:	88000015 	stw	zero,0(r17)
    bf0c:	00c02284 	movi	r3,138
    bf10:	80c00015 	stw	r3,0(r16)
    bf14:	dfc00917 	ldw	ra,36(sp)
    bf18:	dc800817 	ldw	r18,32(sp)
    bf1c:	dc400717 	ldw	r17,28(sp)
    bf20:	dc000617 	ldw	r16,24(sp)
    bf24:	dec00a04 	addi	sp,sp,40
    bf28:	f800283a 	ret
    bf2c:	00082640 	call	8264 <__locale_charset>
    bf30:	100f883a 	mov	r7,r2
    bf34:	dc400015 	stw	r17,0(sp)
    bf38:	000d883a 	mov	r6,zero
    bf3c:	d9400104 	addi	r5,sp,4
    bf40:	8009883a 	mov	r4,r16
    bf44:	903ee83a 	callr	r18
    bf48:	003fed06 	br	bf00 <__alt_data_end+0xff00bf00>

0000bf4c <wcrtomb>:
    bf4c:	defff604 	addi	sp,sp,-40
    bf50:	00800074 	movhi	r2,1
    bf54:	dc800615 	stw	r18,24(sp)
    bf58:	dc400515 	stw	r17,20(sp)
    bf5c:	108e0904 	addi	r2,r2,14372
    bf60:	dfc00915 	stw	ra,36(sp)
    bf64:	dd000815 	stw	r20,32(sp)
    bf68:	dcc00715 	stw	r19,28(sp)
    bf6c:	dc000415 	stw	r16,16(sp)
    bf70:	3025883a 	mov	r18,r6
    bf74:	14400017 	ldw	r17,0(r2)
    bf78:	20001926 	beq	r4,zero,bfe0 <wcrtomb+0x94>
    bf7c:	00800074 	movhi	r2,1
    bf80:	108e0b04 	addi	r2,r2,14380
    bf84:	15000017 	ldw	r20,0(r2)
    bf88:	2021883a 	mov	r16,r4
    bf8c:	2827883a 	mov	r19,r5
    bf90:	00082640 	call	8264 <__locale_charset>
    bf94:	100f883a 	mov	r7,r2
    bf98:	dc800015 	stw	r18,0(sp)
    bf9c:	980d883a 	mov	r6,r19
    bfa0:	800b883a 	mov	r5,r16
    bfa4:	8809883a 	mov	r4,r17
    bfa8:	a03ee83a 	callr	r20
    bfac:	00ffffc4 	movi	r3,-1
    bfb0:	10c0031e 	bne	r2,r3,bfc0 <wcrtomb+0x74>
    bfb4:	90000015 	stw	zero,0(r18)
    bfb8:	00c02284 	movi	r3,138
    bfbc:	88c00015 	stw	r3,0(r17)
    bfc0:	dfc00917 	ldw	ra,36(sp)
    bfc4:	dd000817 	ldw	r20,32(sp)
    bfc8:	dcc00717 	ldw	r19,28(sp)
    bfcc:	dc800617 	ldw	r18,24(sp)
    bfd0:	dc400517 	ldw	r17,20(sp)
    bfd4:	dc000417 	ldw	r16,16(sp)
    bfd8:	dec00a04 	addi	sp,sp,40
    bfdc:	f800283a 	ret
    bfe0:	00800074 	movhi	r2,1
    bfe4:	108e0b04 	addi	r2,r2,14380
    bfe8:	14000017 	ldw	r16,0(r2)
    bfec:	00082640 	call	8264 <__locale_charset>
    bff0:	100f883a 	mov	r7,r2
    bff4:	dc800015 	stw	r18,0(sp)
    bff8:	000d883a 	mov	r6,zero
    bffc:	d9400104 	addi	r5,sp,4
    c000:	8809883a 	mov	r4,r17
    c004:	803ee83a 	callr	r16
    c008:	003fe806 	br	bfac <__alt_data_end+0xff00bfac>

0000c00c <__ascii_wctomb>:
    c00c:	28000526 	beq	r5,zero,c024 <__ascii_wctomb+0x18>
    c010:	00803fc4 	movi	r2,255
    c014:	11800536 	bltu	r2,r6,c02c <__ascii_wctomb+0x20>
    c018:	29800005 	stb	r6,0(r5)
    c01c:	00800044 	movi	r2,1
    c020:	f800283a 	ret
    c024:	0005883a 	mov	r2,zero
    c028:	f800283a 	ret
    c02c:	00802284 	movi	r2,138
    c030:	20800015 	stw	r2,0(r4)
    c034:	00bfffc4 	movi	r2,-1
    c038:	f800283a 	ret

0000c03c <_wctomb_r>:
    c03c:	00800074 	movhi	r2,1
    c040:	defff904 	addi	sp,sp,-28
    c044:	108e0b04 	addi	r2,r2,14380
    c048:	dfc00615 	stw	ra,24(sp)
    c04c:	dc400515 	stw	r17,20(sp)
    c050:	dc000415 	stw	r16,16(sp)
    c054:	3823883a 	mov	r17,r7
    c058:	14000017 	ldw	r16,0(r2)
    c05c:	d9000115 	stw	r4,4(sp)
    c060:	d9400215 	stw	r5,8(sp)
    c064:	d9800315 	stw	r6,12(sp)
    c068:	00082640 	call	8264 <__locale_charset>
    c06c:	d9800317 	ldw	r6,12(sp)
    c070:	d9400217 	ldw	r5,8(sp)
    c074:	d9000117 	ldw	r4,4(sp)
    c078:	100f883a 	mov	r7,r2
    c07c:	dc400015 	stw	r17,0(sp)
    c080:	803ee83a 	callr	r16
    c084:	dfc00617 	ldw	ra,24(sp)
    c088:	dc400517 	ldw	r17,20(sp)
    c08c:	dc000417 	ldw	r16,16(sp)
    c090:	dec00704 	addi	sp,sp,28
    c094:	f800283a 	ret

0000c098 <__udivdi3>:
    c098:	defff504 	addi	sp,sp,-44
    c09c:	dcc00415 	stw	r19,16(sp)
    c0a0:	dc000115 	stw	r16,4(sp)
    c0a4:	dfc00a15 	stw	ra,40(sp)
    c0a8:	df000915 	stw	fp,36(sp)
    c0ac:	ddc00815 	stw	r23,32(sp)
    c0b0:	dd800715 	stw	r22,28(sp)
    c0b4:	dd400615 	stw	r21,24(sp)
    c0b8:	dd000515 	stw	r20,20(sp)
    c0bc:	dc800315 	stw	r18,12(sp)
    c0c0:	dc400215 	stw	r17,8(sp)
    c0c4:	2027883a 	mov	r19,r4
    c0c8:	2821883a 	mov	r16,r5
    c0cc:	3800411e 	bne	r7,zero,c1d4 <__udivdi3+0x13c>
    c0d0:	3023883a 	mov	r17,r6
    c0d4:	2025883a 	mov	r18,r4
    c0d8:	2980522e 	bgeu	r5,r6,c224 <__udivdi3+0x18c>
    c0dc:	00bfffd4 	movui	r2,65535
    c0e0:	282d883a 	mov	r22,r5
    c0e4:	1180a836 	bltu	r2,r6,c388 <__udivdi3+0x2f0>
    c0e8:	00803fc4 	movi	r2,255
    c0ec:	1185803a 	cmpltu	r2,r2,r6
    c0f0:	100490fa 	slli	r2,r2,3
    c0f4:	3086d83a 	srl	r3,r6,r2
    c0f8:	01000074 	movhi	r4,1
    c0fc:	21065e04 	addi	r4,r4,6520
    c100:	20c7883a 	add	r3,r4,r3
    c104:	18c00003 	ldbu	r3,0(r3)
    c108:	1885883a 	add	r2,r3,r2
    c10c:	00c00804 	movi	r3,32
    c110:	1887c83a 	sub	r3,r3,r2
    c114:	18000526 	beq	r3,zero,c12c <__udivdi3+0x94>
    c118:	80e0983a 	sll	r16,r16,r3
    c11c:	9884d83a 	srl	r2,r19,r2
    c120:	30e2983a 	sll	r17,r6,r3
    c124:	98e4983a 	sll	r18,r19,r3
    c128:	142cb03a 	or	r22,r2,r16
    c12c:	882ad43a 	srli	r21,r17,16
    c130:	b009883a 	mov	r4,r22
    c134:	8d3fffcc 	andi	r20,r17,65535
    c138:	a80b883a 	mov	r5,r21
    c13c:	0001fd00 	call	1fd0 <__umodsi3>
    c140:	b009883a 	mov	r4,r22
    c144:	a80b883a 	mov	r5,r21
    c148:	1027883a 	mov	r19,r2
    c14c:	0001f6c0 	call	1f6c <__udivsi3>
    c150:	102d883a 	mov	r22,r2
    c154:	9826943a 	slli	r19,r19,16
    c158:	9004d43a 	srli	r2,r18,16
    c15c:	a5a1383a 	mul	r16,r20,r22
    c160:	14c4b03a 	or	r2,r2,r19
    c164:	1400052e 	bgeu	r2,r16,c17c <__udivdi3+0xe4>
    c168:	1445883a 	add	r2,r2,r17
    c16c:	b0ffffc4 	addi	r3,r22,-1
    c170:	14400136 	bltu	r2,r17,c178 <__udivdi3+0xe0>
    c174:	14012336 	bltu	r2,r16,c604 <__udivdi3+0x56c>
    c178:	182d883a 	mov	r22,r3
    c17c:	1421c83a 	sub	r16,r2,r16
    c180:	a80b883a 	mov	r5,r21
    c184:	8009883a 	mov	r4,r16
    c188:	0001fd00 	call	1fd0 <__umodsi3>
    c18c:	1027883a 	mov	r19,r2
    c190:	a80b883a 	mov	r5,r21
    c194:	8009883a 	mov	r4,r16
    c198:	0001f6c0 	call	1f6c <__udivsi3>
    c19c:	9826943a 	slli	r19,r19,16
    c1a0:	a0a9383a 	mul	r20,r20,r2
    c1a4:	94bfffcc 	andi	r18,r18,65535
    c1a8:	94e4b03a 	or	r18,r18,r19
    c1ac:	9500052e 	bgeu	r18,r20,c1c4 <__udivdi3+0x12c>
    c1b0:	8ca5883a 	add	r18,r17,r18
    c1b4:	10ffffc4 	addi	r3,r2,-1
    c1b8:	9440f136 	bltu	r18,r17,c580 <__udivdi3+0x4e8>
    c1bc:	9500f02e 	bgeu	r18,r20,c580 <__udivdi3+0x4e8>
    c1c0:	10bfff84 	addi	r2,r2,-2
    c1c4:	b00c943a 	slli	r6,r22,16
    c1c8:	0007883a 	mov	r3,zero
    c1cc:	3084b03a 	or	r2,r6,r2
    c1d0:	00005906 	br	c338 <__udivdi3+0x2a0>
    c1d4:	29c05636 	bltu	r5,r7,c330 <__udivdi3+0x298>
    c1d8:	00bfffd4 	movui	r2,65535
    c1dc:	11c0622e 	bgeu	r2,r7,c368 <__udivdi3+0x2d0>
    c1e0:	00804034 	movhi	r2,256
    c1e4:	10bfffc4 	addi	r2,r2,-1
    c1e8:	11c0ee36 	bltu	r2,r7,c5a4 <__udivdi3+0x50c>
    c1ec:	00800404 	movi	r2,16
    c1f0:	3886d83a 	srl	r3,r7,r2
    c1f4:	01000074 	movhi	r4,1
    c1f8:	21065e04 	addi	r4,r4,6520
    c1fc:	20c7883a 	add	r3,r4,r3
    c200:	18c00003 	ldbu	r3,0(r3)
    c204:	05400804 	movi	r21,32
    c208:	1885883a 	add	r2,r3,r2
    c20c:	a8abc83a 	sub	r21,r21,r2
    c210:	a800621e 	bne	r21,zero,c39c <__udivdi3+0x304>
    c214:	3c00e936 	bltu	r7,r16,c5bc <__udivdi3+0x524>
    c218:	9985403a 	cmpgeu	r2,r19,r6
    c21c:	0007883a 	mov	r3,zero
    c220:	00004506 	br	c338 <__udivdi3+0x2a0>
    c224:	3000041e 	bne	r6,zero,c238 <__udivdi3+0x1a0>
    c228:	000b883a 	mov	r5,zero
    c22c:	01000044 	movi	r4,1
    c230:	0001f6c0 	call	1f6c <__udivsi3>
    c234:	1023883a 	mov	r17,r2
    c238:	00bfffd4 	movui	r2,65535
    c23c:	14404e2e 	bgeu	r2,r17,c378 <__udivdi3+0x2e0>
    c240:	00804034 	movhi	r2,256
    c244:	10bfffc4 	addi	r2,r2,-1
    c248:	1440d836 	bltu	r2,r17,c5ac <__udivdi3+0x514>
    c24c:	00800404 	movi	r2,16
    c250:	8886d83a 	srl	r3,r17,r2
    c254:	01000074 	movhi	r4,1
    c258:	21065e04 	addi	r4,r4,6520
    c25c:	20c7883a 	add	r3,r4,r3
    c260:	18c00003 	ldbu	r3,0(r3)
    c264:	1885883a 	add	r2,r3,r2
    c268:	00c00804 	movi	r3,32
    c26c:	1887c83a 	sub	r3,r3,r2
    c270:	18008f1e 	bne	r3,zero,c4b0 <__udivdi3+0x418>
    c274:	882ad43a 	srli	r21,r17,16
    c278:	8461c83a 	sub	r16,r16,r17
    c27c:	8d3fffcc 	andi	r20,r17,65535
    c280:	00c00044 	movi	r3,1
    c284:	8009883a 	mov	r4,r16
    c288:	a80b883a 	mov	r5,r21
    c28c:	d8c00015 	stw	r3,0(sp)
    c290:	0001fd00 	call	1fd0 <__umodsi3>
    c294:	8009883a 	mov	r4,r16
    c298:	a80b883a 	mov	r5,r21
    c29c:	1027883a 	mov	r19,r2
    c2a0:	0001f6c0 	call	1f6c <__udivsi3>
    c2a4:	9826943a 	slli	r19,r19,16
    c2a8:	9008d43a 	srli	r4,r18,16
    c2ac:	1521383a 	mul	r16,r2,r20
    c2b0:	102d883a 	mov	r22,r2
    c2b4:	24c8b03a 	or	r4,r4,r19
    c2b8:	d8c00017 	ldw	r3,0(sp)
    c2bc:	2400052e 	bgeu	r4,r16,c2d4 <__udivdi3+0x23c>
    c2c0:	2449883a 	add	r4,r4,r17
    c2c4:	b0bfffc4 	addi	r2,r22,-1
    c2c8:	24400136 	bltu	r4,r17,c2d0 <__udivdi3+0x238>
    c2cc:	2400ca36 	bltu	r4,r16,c5f8 <__udivdi3+0x560>
    c2d0:	102d883a 	mov	r22,r2
    c2d4:	2421c83a 	sub	r16,r4,r16
    c2d8:	a80b883a 	mov	r5,r21
    c2dc:	8009883a 	mov	r4,r16
    c2e0:	d8c00015 	stw	r3,0(sp)
    c2e4:	0001fd00 	call	1fd0 <__umodsi3>
    c2e8:	1027883a 	mov	r19,r2
    c2ec:	a80b883a 	mov	r5,r21
    c2f0:	8009883a 	mov	r4,r16
    c2f4:	0001f6c0 	call	1f6c <__udivsi3>
    c2f8:	9826943a 	slli	r19,r19,16
    c2fc:	1529383a 	mul	r20,r2,r20
    c300:	94bfffcc 	andi	r18,r18,65535
    c304:	94e4b03a 	or	r18,r18,r19
    c308:	d8c00017 	ldw	r3,0(sp)
    c30c:	9500052e 	bgeu	r18,r20,c324 <__udivdi3+0x28c>
    c310:	8ca5883a 	add	r18,r17,r18
    c314:	113fffc4 	addi	r4,r2,-1
    c318:	94409736 	bltu	r18,r17,c578 <__udivdi3+0x4e0>
    c31c:	9500962e 	bgeu	r18,r20,c578 <__udivdi3+0x4e0>
    c320:	10bfff84 	addi	r2,r2,-2
    c324:	b00c943a 	slli	r6,r22,16
    c328:	3084b03a 	or	r2,r6,r2
    c32c:	00000206 	br	c338 <__udivdi3+0x2a0>
    c330:	0007883a 	mov	r3,zero
    c334:	0005883a 	mov	r2,zero
    c338:	dfc00a17 	ldw	ra,40(sp)
    c33c:	df000917 	ldw	fp,36(sp)
    c340:	ddc00817 	ldw	r23,32(sp)
    c344:	dd800717 	ldw	r22,28(sp)
    c348:	dd400617 	ldw	r21,24(sp)
    c34c:	dd000517 	ldw	r20,20(sp)
    c350:	dcc00417 	ldw	r19,16(sp)
    c354:	dc800317 	ldw	r18,12(sp)
    c358:	dc400217 	ldw	r17,8(sp)
    c35c:	dc000117 	ldw	r16,4(sp)
    c360:	dec00b04 	addi	sp,sp,44
    c364:	f800283a 	ret
    c368:	00803fc4 	movi	r2,255
    c36c:	11c5803a 	cmpltu	r2,r2,r7
    c370:	100490fa 	slli	r2,r2,3
    c374:	003f9e06 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c378:	00803fc4 	movi	r2,255
    c37c:	1445803a 	cmpltu	r2,r2,r17
    c380:	100490fa 	slli	r2,r2,3
    c384:	003fb206 	br	c250 <__alt_data_end+0xff00c250>
    c388:	00804034 	movhi	r2,256
    c38c:	10bfffc4 	addi	r2,r2,-1
    c390:	11808836 	bltu	r2,r6,c5b4 <__udivdi3+0x51c>
    c394:	00800404 	movi	r2,16
    c398:	003f5606 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c39c:	30aed83a 	srl	r23,r6,r2
    c3a0:	3d4e983a 	sll	r7,r7,r21
    c3a4:	80acd83a 	srl	r22,r16,r2
    c3a8:	9884d83a 	srl	r2,r19,r2
    c3ac:	3deeb03a 	or	r23,r7,r23
    c3b0:	b824d43a 	srli	r18,r23,16
    c3b4:	8560983a 	sll	r16,r16,r21
    c3b8:	b009883a 	mov	r4,r22
    c3bc:	900b883a 	mov	r5,r18
    c3c0:	3568983a 	sll	r20,r6,r21
    c3c4:	1420b03a 	or	r16,r2,r16
    c3c8:	0001fd00 	call	1fd0 <__umodsi3>
    c3cc:	b009883a 	mov	r4,r22
    c3d0:	900b883a 	mov	r5,r18
    c3d4:	1023883a 	mov	r17,r2
    c3d8:	0001f6c0 	call	1f6c <__udivsi3>
    c3dc:	8808943a 	slli	r4,r17,16
    c3e0:	bf3fffcc 	andi	fp,r23,65535
    c3e4:	8006d43a 	srli	r3,r16,16
    c3e8:	e0a3383a 	mul	r17,fp,r2
    c3ec:	100d883a 	mov	r6,r2
    c3f0:	1906b03a 	or	r3,r3,r4
    c3f4:	1c40042e 	bgeu	r3,r17,c408 <__udivdi3+0x370>
    c3f8:	1dc7883a 	add	r3,r3,r23
    c3fc:	10bfffc4 	addi	r2,r2,-1
    c400:	1dc0752e 	bgeu	r3,r23,c5d8 <__udivdi3+0x540>
    c404:	100d883a 	mov	r6,r2
    c408:	1c63c83a 	sub	r17,r3,r17
    c40c:	900b883a 	mov	r5,r18
    c410:	8809883a 	mov	r4,r17
    c414:	d9800015 	stw	r6,0(sp)
    c418:	0001fd00 	call	1fd0 <__umodsi3>
    c41c:	102d883a 	mov	r22,r2
    c420:	8809883a 	mov	r4,r17
    c424:	900b883a 	mov	r5,r18
    c428:	0001f6c0 	call	1f6c <__udivsi3>
    c42c:	b02c943a 	slli	r22,r22,16
    c430:	e089383a 	mul	r4,fp,r2
    c434:	843fffcc 	andi	r16,r16,65535
    c438:	85a0b03a 	or	r16,r16,r22
    c43c:	d9800017 	ldw	r6,0(sp)
    c440:	8100042e 	bgeu	r16,r4,c454 <__udivdi3+0x3bc>
    c444:	85e1883a 	add	r16,r16,r23
    c448:	10ffffc4 	addi	r3,r2,-1
    c44c:	85c05e2e 	bgeu	r16,r23,c5c8 <__udivdi3+0x530>
    c450:	1805883a 	mov	r2,r3
    c454:	300c943a 	slli	r6,r6,16
    c458:	a17fffcc 	andi	r5,r20,65535
    c45c:	a028d43a 	srli	r20,r20,16
    c460:	3084b03a 	or	r2,r6,r2
    c464:	10ffffcc 	andi	r3,r2,65535
    c468:	100cd43a 	srli	r6,r2,16
    c46c:	194f383a 	mul	r7,r3,r5
    c470:	1d07383a 	mul	r3,r3,r20
    c474:	314b383a 	mul	r5,r6,r5
    c478:	3810d43a 	srli	r8,r7,16
    c47c:	8121c83a 	sub	r16,r16,r4
    c480:	1947883a 	add	r3,r3,r5
    c484:	40c7883a 	add	r3,r8,r3
    c488:	350d383a 	mul	r6,r6,r20
    c48c:	1940022e 	bgeu	r3,r5,c498 <__udivdi3+0x400>
    c490:	01000074 	movhi	r4,1
    c494:	310d883a 	add	r6,r6,r4
    c498:	1828d43a 	srli	r20,r3,16
    c49c:	a18d883a 	add	r6,r20,r6
    c4a0:	81803e36 	bltu	r16,r6,c59c <__udivdi3+0x504>
    c4a4:	81803826 	beq	r16,r6,c588 <__udivdi3+0x4f0>
    c4a8:	0007883a 	mov	r3,zero
    c4ac:	003fa206 	br	c338 <__alt_data_end+0xff00c338>
    c4b0:	88e2983a 	sll	r17,r17,r3
    c4b4:	80a8d83a 	srl	r20,r16,r2
    c4b8:	80e0983a 	sll	r16,r16,r3
    c4bc:	882ad43a 	srli	r21,r17,16
    c4c0:	9884d83a 	srl	r2,r19,r2
    c4c4:	a009883a 	mov	r4,r20
    c4c8:	a80b883a 	mov	r5,r21
    c4cc:	142eb03a 	or	r23,r2,r16
    c4d0:	98e4983a 	sll	r18,r19,r3
    c4d4:	0001fd00 	call	1fd0 <__umodsi3>
    c4d8:	a009883a 	mov	r4,r20
    c4dc:	a80b883a 	mov	r5,r21
    c4e0:	1021883a 	mov	r16,r2
    c4e4:	0001f6c0 	call	1f6c <__udivsi3>
    c4e8:	1039883a 	mov	fp,r2
    c4ec:	8d3fffcc 	andi	r20,r17,65535
    c4f0:	8020943a 	slli	r16,r16,16
    c4f4:	b804d43a 	srli	r2,r23,16
    c4f8:	a72d383a 	mul	r22,r20,fp
    c4fc:	1404b03a 	or	r2,r2,r16
    c500:	1580062e 	bgeu	r2,r22,c51c <__udivdi3+0x484>
    c504:	1445883a 	add	r2,r2,r17
    c508:	e0ffffc4 	addi	r3,fp,-1
    c50c:	14403836 	bltu	r2,r17,c5f0 <__udivdi3+0x558>
    c510:	1580372e 	bgeu	r2,r22,c5f0 <__udivdi3+0x558>
    c514:	e73fff84 	addi	fp,fp,-2
    c518:	1445883a 	add	r2,r2,r17
    c51c:	15adc83a 	sub	r22,r2,r22
    c520:	a80b883a 	mov	r5,r21
    c524:	b009883a 	mov	r4,r22
    c528:	0001fd00 	call	1fd0 <__umodsi3>
    c52c:	1027883a 	mov	r19,r2
    c530:	b009883a 	mov	r4,r22
    c534:	a80b883a 	mov	r5,r21
    c538:	0001f6c0 	call	1f6c <__udivsi3>
    c53c:	9826943a 	slli	r19,r19,16
    c540:	a0a1383a 	mul	r16,r20,r2
    c544:	b93fffcc 	andi	r4,r23,65535
    c548:	24c8b03a 	or	r4,r4,r19
    c54c:	2400062e 	bgeu	r4,r16,c568 <__udivdi3+0x4d0>
    c550:	2449883a 	add	r4,r4,r17
    c554:	10ffffc4 	addi	r3,r2,-1
    c558:	24402336 	bltu	r4,r17,c5e8 <__udivdi3+0x550>
    c55c:	2400222e 	bgeu	r4,r16,c5e8 <__udivdi3+0x550>
    c560:	10bfff84 	addi	r2,r2,-2
    c564:	2449883a 	add	r4,r4,r17
    c568:	e038943a 	slli	fp,fp,16
    c56c:	2421c83a 	sub	r16,r4,r16
    c570:	e086b03a 	or	r3,fp,r2
    c574:	003f4306 	br	c284 <__alt_data_end+0xff00c284>
    c578:	2005883a 	mov	r2,r4
    c57c:	003f6906 	br	c324 <__alt_data_end+0xff00c324>
    c580:	1805883a 	mov	r2,r3
    c584:	003f0f06 	br	c1c4 <__alt_data_end+0xff00c1c4>
    c588:	1806943a 	slli	r3,r3,16
    c58c:	9d66983a 	sll	r19,r19,r21
    c590:	39ffffcc 	andi	r7,r7,65535
    c594:	19c7883a 	add	r3,r3,r7
    c598:	98ffc32e 	bgeu	r19,r3,c4a8 <__alt_data_end+0xff00c4a8>
    c59c:	10bfffc4 	addi	r2,r2,-1
    c5a0:	003fc106 	br	c4a8 <__alt_data_end+0xff00c4a8>
    c5a4:	00800604 	movi	r2,24
    c5a8:	003f1106 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c5ac:	00800604 	movi	r2,24
    c5b0:	003f2706 	br	c250 <__alt_data_end+0xff00c250>
    c5b4:	00800604 	movi	r2,24
    c5b8:	003ece06 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c5bc:	0007883a 	mov	r3,zero
    c5c0:	00800044 	movi	r2,1
    c5c4:	003f5c06 	br	c338 <__alt_data_end+0xff00c338>
    c5c8:	813fa12e 	bgeu	r16,r4,c450 <__alt_data_end+0xff00c450>
    c5cc:	10bfff84 	addi	r2,r2,-2
    c5d0:	85e1883a 	add	r16,r16,r23
    c5d4:	003f9f06 	br	c454 <__alt_data_end+0xff00c454>
    c5d8:	1c7f8a2e 	bgeu	r3,r17,c404 <__alt_data_end+0xff00c404>
    c5dc:	31bfff84 	addi	r6,r6,-2
    c5e0:	1dc7883a 	add	r3,r3,r23
    c5e4:	003f8806 	br	c408 <__alt_data_end+0xff00c408>
    c5e8:	1805883a 	mov	r2,r3
    c5ec:	003fde06 	br	c568 <__alt_data_end+0xff00c568>
    c5f0:	1839883a 	mov	fp,r3
    c5f4:	003fc906 	br	c51c <__alt_data_end+0xff00c51c>
    c5f8:	b5bfff84 	addi	r22,r22,-2
    c5fc:	2449883a 	add	r4,r4,r17
    c600:	003f3406 	br	c2d4 <__alt_data_end+0xff00c2d4>
    c604:	b5bfff84 	addi	r22,r22,-2
    c608:	1445883a 	add	r2,r2,r17
    c60c:	003edb06 	br	c17c <__alt_data_end+0xff00c17c>

0000c610 <__umoddi3>:
    c610:	defff404 	addi	sp,sp,-48
    c614:	df000a15 	stw	fp,40(sp)
    c618:	dc400315 	stw	r17,12(sp)
    c61c:	dc000215 	stw	r16,8(sp)
    c620:	dfc00b15 	stw	ra,44(sp)
    c624:	ddc00915 	stw	r23,36(sp)
    c628:	dd800815 	stw	r22,32(sp)
    c62c:	dd400715 	stw	r21,28(sp)
    c630:	dd000615 	stw	r20,24(sp)
    c634:	dcc00515 	stw	r19,20(sp)
    c638:	dc800415 	stw	r18,16(sp)
    c63c:	2021883a 	mov	r16,r4
    c640:	2823883a 	mov	r17,r5
    c644:	2839883a 	mov	fp,r5
    c648:	38003c1e 	bne	r7,zero,c73c <__umoddi3+0x12c>
    c64c:	3027883a 	mov	r19,r6
    c650:	2029883a 	mov	r20,r4
    c654:	2980512e 	bgeu	r5,r6,c79c <__umoddi3+0x18c>
    c658:	00bfffd4 	movui	r2,65535
    c65c:	11809a36 	bltu	r2,r6,c8c8 <__umoddi3+0x2b8>
    c660:	01003fc4 	movi	r4,255
    c664:	2189803a 	cmpltu	r4,r4,r6
    c668:	200890fa 	slli	r4,r4,3
    c66c:	3104d83a 	srl	r2,r6,r4
    c670:	00c00074 	movhi	r3,1
    c674:	18c65e04 	addi	r3,r3,6520
    c678:	1885883a 	add	r2,r3,r2
    c67c:	10c00003 	ldbu	r3,0(r2)
    c680:	00800804 	movi	r2,32
    c684:	1909883a 	add	r4,r3,r4
    c688:	1125c83a 	sub	r18,r2,r4
    c68c:	90000526 	beq	r18,zero,c6a4 <__umoddi3+0x94>
    c690:	8ca2983a 	sll	r17,r17,r18
    c694:	8108d83a 	srl	r4,r16,r4
    c698:	34a6983a 	sll	r19,r6,r18
    c69c:	84a8983a 	sll	r20,r16,r18
    c6a0:	2478b03a 	or	fp,r4,r17
    c6a4:	982ed43a 	srli	r23,r19,16
    c6a8:	e009883a 	mov	r4,fp
    c6ac:	9dbfffcc 	andi	r22,r19,65535
    c6b0:	b80b883a 	mov	r5,r23
    c6b4:	0001fd00 	call	1fd0 <__umodsi3>
    c6b8:	e009883a 	mov	r4,fp
    c6bc:	b80b883a 	mov	r5,r23
    c6c0:	102b883a 	mov	r21,r2
    c6c4:	0001f6c0 	call	1f6c <__udivsi3>
    c6c8:	a806943a 	slli	r3,r21,16
    c6cc:	a008d43a 	srli	r4,r20,16
    c6d0:	b085383a 	mul	r2,r22,r2
    c6d4:	20c8b03a 	or	r4,r4,r3
    c6d8:	2080032e 	bgeu	r4,r2,c6e8 <__umoddi3+0xd8>
    c6dc:	24c9883a 	add	r4,r4,r19
    c6e0:	24c00136 	bltu	r4,r19,c6e8 <__umoddi3+0xd8>
    c6e4:	20811036 	bltu	r4,r2,cb28 <__umoddi3+0x518>
    c6e8:	20abc83a 	sub	r21,r4,r2
    c6ec:	b80b883a 	mov	r5,r23
    c6f0:	a809883a 	mov	r4,r21
    c6f4:	0001fd00 	call	1fd0 <__umodsi3>
    c6f8:	1023883a 	mov	r17,r2
    c6fc:	b80b883a 	mov	r5,r23
    c700:	a809883a 	mov	r4,r21
    c704:	0001f6c0 	call	1f6c <__udivsi3>
    c708:	8822943a 	slli	r17,r17,16
    c70c:	b085383a 	mul	r2,r22,r2
    c710:	a0ffffcc 	andi	r3,r20,65535
    c714:	1c46b03a 	or	r3,r3,r17
    c718:	1880042e 	bgeu	r3,r2,c72c <__umoddi3+0x11c>
    c71c:	1cc7883a 	add	r3,r3,r19
    c720:	1cc00236 	bltu	r3,r19,c72c <__umoddi3+0x11c>
    c724:	1880012e 	bgeu	r3,r2,c72c <__umoddi3+0x11c>
    c728:	1cc7883a 	add	r3,r3,r19
    c72c:	1885c83a 	sub	r2,r3,r2
    c730:	1484d83a 	srl	r2,r2,r18
    c734:	0007883a 	mov	r3,zero
    c738:	00004f06 	br	c878 <__umoddi3+0x268>
    c73c:	29c04c36 	bltu	r5,r7,c870 <__umoddi3+0x260>
    c740:	00bfffd4 	movui	r2,65535
    c744:	11c0582e 	bgeu	r2,r7,c8a8 <__umoddi3+0x298>
    c748:	00804034 	movhi	r2,256
    c74c:	10bfffc4 	addi	r2,r2,-1
    c750:	11c0e736 	bltu	r2,r7,caf0 <__umoddi3+0x4e0>
    c754:	01000404 	movi	r4,16
    c758:	3904d83a 	srl	r2,r7,r4
    c75c:	00c00074 	movhi	r3,1
    c760:	18c65e04 	addi	r3,r3,6520
    c764:	1885883a 	add	r2,r3,r2
    c768:	14c00003 	ldbu	r19,0(r2)
    c76c:	00c00804 	movi	r3,32
    c770:	9927883a 	add	r19,r19,r4
    c774:	1ce9c83a 	sub	r20,r3,r19
    c778:	a000581e 	bne	r20,zero,c8dc <__umoddi3+0x2cc>
    c77c:	3c400136 	bltu	r7,r17,c784 <__umoddi3+0x174>
    c780:	8180eb36 	bltu	r16,r6,cb30 <__umoddi3+0x520>
    c784:	8185c83a 	sub	r2,r16,r6
    c788:	89e3c83a 	sub	r17,r17,r7
    c78c:	8089803a 	cmpltu	r4,r16,r2
    c790:	8939c83a 	sub	fp,r17,r4
    c794:	e007883a 	mov	r3,fp
    c798:	00003706 	br	c878 <__umoddi3+0x268>
    c79c:	3000041e 	bne	r6,zero,c7b0 <__umoddi3+0x1a0>
    c7a0:	000b883a 	mov	r5,zero
    c7a4:	01000044 	movi	r4,1
    c7a8:	0001f6c0 	call	1f6c <__udivsi3>
    c7ac:	1027883a 	mov	r19,r2
    c7b0:	00bfffd4 	movui	r2,65535
    c7b4:	14c0402e 	bgeu	r2,r19,c8b8 <__umoddi3+0x2a8>
    c7b8:	00804034 	movhi	r2,256
    c7bc:	10bfffc4 	addi	r2,r2,-1
    c7c0:	14c0cd36 	bltu	r2,r19,caf8 <__umoddi3+0x4e8>
    c7c4:	00800404 	movi	r2,16
    c7c8:	9886d83a 	srl	r3,r19,r2
    c7cc:	01000074 	movhi	r4,1
    c7d0:	21065e04 	addi	r4,r4,6520
    c7d4:	20c7883a 	add	r3,r4,r3
    c7d8:	18c00003 	ldbu	r3,0(r3)
    c7dc:	1887883a 	add	r3,r3,r2
    c7e0:	00800804 	movi	r2,32
    c7e4:	10e5c83a 	sub	r18,r2,r3
    c7e8:	9000901e 	bne	r18,zero,ca2c <__umoddi3+0x41c>
    c7ec:	982cd43a 	srli	r22,r19,16
    c7f0:	8ce3c83a 	sub	r17,r17,r19
    c7f4:	9d7fffcc 	andi	r21,r19,65535
    c7f8:	b00b883a 	mov	r5,r22
    c7fc:	8809883a 	mov	r4,r17
    c800:	0001fd00 	call	1fd0 <__umodsi3>
    c804:	8809883a 	mov	r4,r17
    c808:	b00b883a 	mov	r5,r22
    c80c:	1021883a 	mov	r16,r2
    c810:	0001f6c0 	call	1f6c <__udivsi3>
    c814:	8006943a 	slli	r3,r16,16
    c818:	a008d43a 	srli	r4,r20,16
    c81c:	1545383a 	mul	r2,r2,r21
    c820:	20c8b03a 	or	r4,r4,r3
    c824:	2080042e 	bgeu	r4,r2,c838 <__umoddi3+0x228>
    c828:	24c9883a 	add	r4,r4,r19
    c82c:	24c00236 	bltu	r4,r19,c838 <__umoddi3+0x228>
    c830:	2080012e 	bgeu	r4,r2,c838 <__umoddi3+0x228>
    c834:	24c9883a 	add	r4,r4,r19
    c838:	20a1c83a 	sub	r16,r4,r2
    c83c:	b00b883a 	mov	r5,r22
    c840:	8009883a 	mov	r4,r16
    c844:	0001fd00 	call	1fd0 <__umodsi3>
    c848:	1023883a 	mov	r17,r2
    c84c:	b00b883a 	mov	r5,r22
    c850:	8009883a 	mov	r4,r16
    c854:	0001f6c0 	call	1f6c <__udivsi3>
    c858:	8822943a 	slli	r17,r17,16
    c85c:	1545383a 	mul	r2,r2,r21
    c860:	a53fffcc 	andi	r20,r20,65535
    c864:	a446b03a 	or	r3,r20,r17
    c868:	18bfb02e 	bgeu	r3,r2,c72c <__alt_data_end+0xff00c72c>
    c86c:	003fab06 	br	c71c <__alt_data_end+0xff00c71c>
    c870:	2005883a 	mov	r2,r4
    c874:	2807883a 	mov	r3,r5
    c878:	dfc00b17 	ldw	ra,44(sp)
    c87c:	df000a17 	ldw	fp,40(sp)
    c880:	ddc00917 	ldw	r23,36(sp)
    c884:	dd800817 	ldw	r22,32(sp)
    c888:	dd400717 	ldw	r21,28(sp)
    c88c:	dd000617 	ldw	r20,24(sp)
    c890:	dcc00517 	ldw	r19,20(sp)
    c894:	dc800417 	ldw	r18,16(sp)
    c898:	dc400317 	ldw	r17,12(sp)
    c89c:	dc000217 	ldw	r16,8(sp)
    c8a0:	dec00c04 	addi	sp,sp,48
    c8a4:	f800283a 	ret
    c8a8:	04c03fc4 	movi	r19,255
    c8ac:	99c9803a 	cmpltu	r4,r19,r7
    c8b0:	200890fa 	slli	r4,r4,3
    c8b4:	003fa806 	br	c758 <__alt_data_end+0xff00c758>
    c8b8:	00803fc4 	movi	r2,255
    c8bc:	14c5803a 	cmpltu	r2,r2,r19
    c8c0:	100490fa 	slli	r2,r2,3
    c8c4:	003fc006 	br	c7c8 <__alt_data_end+0xff00c7c8>
    c8c8:	00804034 	movhi	r2,256
    c8cc:	10bfffc4 	addi	r2,r2,-1
    c8d0:	11808b36 	bltu	r2,r6,cb00 <__umoddi3+0x4f0>
    c8d4:	01000404 	movi	r4,16
    c8d8:	003f6406 	br	c66c <__alt_data_end+0xff00c66c>
    c8dc:	34c4d83a 	srl	r2,r6,r19
    c8e0:	3d0e983a 	sll	r7,r7,r20
    c8e4:	8cf8d83a 	srl	fp,r17,r19
    c8e8:	8d10983a 	sll	r8,r17,r20
    c8ec:	38aab03a 	or	r21,r7,r2
    c8f0:	a82cd43a 	srli	r22,r21,16
    c8f4:	84e2d83a 	srl	r17,r16,r19
    c8f8:	e009883a 	mov	r4,fp
    c8fc:	b00b883a 	mov	r5,r22
    c900:	8a22b03a 	or	r17,r17,r8
    c904:	3524983a 	sll	r18,r6,r20
    c908:	0001fd00 	call	1fd0 <__umodsi3>
    c90c:	e009883a 	mov	r4,fp
    c910:	b00b883a 	mov	r5,r22
    c914:	102f883a 	mov	r23,r2
    c918:	0001f6c0 	call	1f6c <__udivsi3>
    c91c:	100d883a 	mov	r6,r2
    c920:	b808943a 	slli	r4,r23,16
    c924:	aa3fffcc 	andi	r8,r21,65535
    c928:	8804d43a 	srli	r2,r17,16
    c92c:	41af383a 	mul	r23,r8,r6
    c930:	8520983a 	sll	r16,r16,r20
    c934:	1104b03a 	or	r2,r2,r4
    c938:	15c0042e 	bgeu	r2,r23,c94c <__umoddi3+0x33c>
    c93c:	1545883a 	add	r2,r2,r21
    c940:	30ffffc4 	addi	r3,r6,-1
    c944:	1540742e 	bgeu	r2,r21,cb18 <__umoddi3+0x508>
    c948:	180d883a 	mov	r6,r3
    c94c:	15efc83a 	sub	r23,r2,r23
    c950:	b00b883a 	mov	r5,r22
    c954:	b809883a 	mov	r4,r23
    c958:	d9800115 	stw	r6,4(sp)
    c95c:	da000015 	stw	r8,0(sp)
    c960:	0001fd00 	call	1fd0 <__umodsi3>
    c964:	b00b883a 	mov	r5,r22
    c968:	b809883a 	mov	r4,r23
    c96c:	1039883a 	mov	fp,r2
    c970:	0001f6c0 	call	1f6c <__udivsi3>
    c974:	da000017 	ldw	r8,0(sp)
    c978:	e038943a 	slli	fp,fp,16
    c97c:	100b883a 	mov	r5,r2
    c980:	4089383a 	mul	r4,r8,r2
    c984:	8a3fffcc 	andi	r8,r17,65535
    c988:	4710b03a 	or	r8,r8,fp
    c98c:	d9800117 	ldw	r6,4(sp)
    c990:	4100042e 	bgeu	r8,r4,c9a4 <__umoddi3+0x394>
    c994:	4551883a 	add	r8,r8,r21
    c998:	10bfffc4 	addi	r2,r2,-1
    c99c:	45405a2e 	bgeu	r8,r21,cb08 <__umoddi3+0x4f8>
    c9a0:	100b883a 	mov	r5,r2
    c9a4:	300c943a 	slli	r6,r6,16
    c9a8:	91ffffcc 	andi	r7,r18,65535
    c9ac:	9004d43a 	srli	r2,r18,16
    c9b0:	314cb03a 	or	r6,r6,r5
    c9b4:	317fffcc 	andi	r5,r6,65535
    c9b8:	300cd43a 	srli	r6,r6,16
    c9bc:	29d3383a 	mul	r9,r5,r7
    c9c0:	288b383a 	mul	r5,r5,r2
    c9c4:	31cf383a 	mul	r7,r6,r7
    c9c8:	4806d43a 	srli	r3,r9,16
    c9cc:	4111c83a 	sub	r8,r8,r4
    c9d0:	29cb883a 	add	r5,r5,r7
    c9d4:	194b883a 	add	r5,r3,r5
    c9d8:	3085383a 	mul	r2,r6,r2
    c9dc:	29c0022e 	bgeu	r5,r7,c9e8 <__umoddi3+0x3d8>
    c9e0:	00c00074 	movhi	r3,1
    c9e4:	10c5883a 	add	r2,r2,r3
    c9e8:	2808d43a 	srli	r4,r5,16
    c9ec:	280a943a 	slli	r5,r5,16
    c9f0:	4a7fffcc 	andi	r9,r9,65535
    c9f4:	2085883a 	add	r2,r4,r2
    c9f8:	2a4b883a 	add	r5,r5,r9
    c9fc:	40803636 	bltu	r8,r2,cad8 <__umoddi3+0x4c8>
    ca00:	40804d26 	beq	r8,r2,cb38 <__umoddi3+0x528>
    ca04:	4089c83a 	sub	r4,r8,r2
    ca08:	280f883a 	mov	r7,r5
    ca0c:	81cfc83a 	sub	r7,r16,r7
    ca10:	81c7803a 	cmpltu	r3,r16,r7
    ca14:	20c7c83a 	sub	r3,r4,r3
    ca18:	1cc4983a 	sll	r2,r3,r19
    ca1c:	3d0ed83a 	srl	r7,r7,r20
    ca20:	1d06d83a 	srl	r3,r3,r20
    ca24:	11c4b03a 	or	r2,r2,r7
    ca28:	003f9306 	br	c878 <__alt_data_end+0xff00c878>
    ca2c:	9ca6983a 	sll	r19,r19,r18
    ca30:	88e8d83a 	srl	r20,r17,r3
    ca34:	80c4d83a 	srl	r2,r16,r3
    ca38:	982cd43a 	srli	r22,r19,16
    ca3c:	8ca2983a 	sll	r17,r17,r18
    ca40:	a009883a 	mov	r4,r20
    ca44:	b00b883a 	mov	r5,r22
    ca48:	1478b03a 	or	fp,r2,r17
    ca4c:	0001fd00 	call	1fd0 <__umodsi3>
    ca50:	a009883a 	mov	r4,r20
    ca54:	b00b883a 	mov	r5,r22
    ca58:	1023883a 	mov	r17,r2
    ca5c:	0001f6c0 	call	1f6c <__udivsi3>
    ca60:	9d7fffcc 	andi	r21,r19,65535
    ca64:	880a943a 	slli	r5,r17,16
    ca68:	e008d43a 	srli	r4,fp,16
    ca6c:	a885383a 	mul	r2,r21,r2
    ca70:	84a8983a 	sll	r20,r16,r18
    ca74:	2148b03a 	or	r4,r4,r5
    ca78:	2080042e 	bgeu	r4,r2,ca8c <__umoddi3+0x47c>
    ca7c:	24c9883a 	add	r4,r4,r19
    ca80:	24c00236 	bltu	r4,r19,ca8c <__umoddi3+0x47c>
    ca84:	2080012e 	bgeu	r4,r2,ca8c <__umoddi3+0x47c>
    ca88:	24c9883a 	add	r4,r4,r19
    ca8c:	20a3c83a 	sub	r17,r4,r2
    ca90:	b00b883a 	mov	r5,r22
    ca94:	8809883a 	mov	r4,r17
    ca98:	0001fd00 	call	1fd0 <__umodsi3>
    ca9c:	102f883a 	mov	r23,r2
    caa0:	8809883a 	mov	r4,r17
    caa4:	b00b883a 	mov	r5,r22
    caa8:	0001f6c0 	call	1f6c <__udivsi3>
    caac:	b82e943a 	slli	r23,r23,16
    cab0:	a885383a 	mul	r2,r21,r2
    cab4:	e13fffcc 	andi	r4,fp,65535
    cab8:	25c8b03a 	or	r4,r4,r23
    cabc:	2080042e 	bgeu	r4,r2,cad0 <__umoddi3+0x4c0>
    cac0:	24c9883a 	add	r4,r4,r19
    cac4:	24c00236 	bltu	r4,r19,cad0 <__umoddi3+0x4c0>
    cac8:	2080012e 	bgeu	r4,r2,cad0 <__umoddi3+0x4c0>
    cacc:	24c9883a 	add	r4,r4,r19
    cad0:	20a3c83a 	sub	r17,r4,r2
    cad4:	003f4806 	br	c7f8 <__alt_data_end+0xff00c7f8>
    cad8:	2c8fc83a 	sub	r7,r5,r18
    cadc:	1545c83a 	sub	r2,r2,r21
    cae0:	29cb803a 	cmpltu	r5,r5,r7
    cae4:	1145c83a 	sub	r2,r2,r5
    cae8:	4089c83a 	sub	r4,r8,r2
    caec:	003fc706 	br	ca0c <__alt_data_end+0xff00ca0c>
    caf0:	01000604 	movi	r4,24
    caf4:	003f1806 	br	c758 <__alt_data_end+0xff00c758>
    caf8:	00800604 	movi	r2,24
    cafc:	003f3206 	br	c7c8 <__alt_data_end+0xff00c7c8>
    cb00:	01000604 	movi	r4,24
    cb04:	003ed906 	br	c66c <__alt_data_end+0xff00c66c>
    cb08:	413fa52e 	bgeu	r8,r4,c9a0 <__alt_data_end+0xff00c9a0>
    cb0c:	297fff84 	addi	r5,r5,-2
    cb10:	4551883a 	add	r8,r8,r21
    cb14:	003fa306 	br	c9a4 <__alt_data_end+0xff00c9a4>
    cb18:	15ff8b2e 	bgeu	r2,r23,c948 <__alt_data_end+0xff00c948>
    cb1c:	31bfff84 	addi	r6,r6,-2
    cb20:	1545883a 	add	r2,r2,r21
    cb24:	003f8906 	br	c94c <__alt_data_end+0xff00c94c>
    cb28:	24c9883a 	add	r4,r4,r19
    cb2c:	003eee06 	br	c6e8 <__alt_data_end+0xff00c6e8>
    cb30:	8005883a 	mov	r2,r16
    cb34:	003f1706 	br	c794 <__alt_data_end+0xff00c794>
    cb38:	817fe736 	bltu	r16,r5,cad8 <__alt_data_end+0xff00cad8>
    cb3c:	280f883a 	mov	r7,r5
    cb40:	0009883a 	mov	r4,zero
    cb44:	003fb106 	br	ca0c <__alt_data_end+0xff00ca0c>

0000cb48 <__adddf3>:
    cb48:	02c00434 	movhi	r11,16
    cb4c:	5affffc4 	addi	r11,r11,-1
    cb50:	2806d7fa 	srli	r3,r5,31
    cb54:	2ad4703a 	and	r10,r5,r11
    cb58:	3ad2703a 	and	r9,r7,r11
    cb5c:	3804d53a 	srli	r2,r7,20
    cb60:	3018d77a 	srli	r12,r6,29
    cb64:	280ad53a 	srli	r5,r5,20
    cb68:	501490fa 	slli	r10,r10,3
    cb6c:	2010d77a 	srli	r8,r4,29
    cb70:	481290fa 	slli	r9,r9,3
    cb74:	380ed7fa 	srli	r7,r7,31
    cb78:	defffb04 	addi	sp,sp,-20
    cb7c:	dc800215 	stw	r18,8(sp)
    cb80:	dc400115 	stw	r17,4(sp)
    cb84:	dc000015 	stw	r16,0(sp)
    cb88:	dfc00415 	stw	ra,16(sp)
    cb8c:	dcc00315 	stw	r19,12(sp)
    cb90:	1c803fcc 	andi	r18,r3,255
    cb94:	2c01ffcc 	andi	r16,r5,2047
    cb98:	5210b03a 	or	r8,r10,r8
    cb9c:	202290fa 	slli	r17,r4,3
    cba0:	1081ffcc 	andi	r2,r2,2047
    cba4:	4b12b03a 	or	r9,r9,r12
    cba8:	300c90fa 	slli	r6,r6,3
    cbac:	91c07526 	beq	r18,r7,cd84 <__adddf3+0x23c>
    cbb0:	8087c83a 	sub	r3,r16,r2
    cbb4:	00c0ab0e 	bge	zero,r3,ce64 <__adddf3+0x31c>
    cbb8:	10002a1e 	bne	r2,zero,cc64 <__adddf3+0x11c>
    cbbc:	4984b03a 	or	r2,r9,r6
    cbc0:	1000961e 	bne	r2,zero,ce1c <__adddf3+0x2d4>
    cbc4:	888001cc 	andi	r2,r17,7
    cbc8:	10000726 	beq	r2,zero,cbe8 <__adddf3+0xa0>
    cbcc:	888003cc 	andi	r2,r17,15
    cbd0:	00c00104 	movi	r3,4
    cbd4:	10c00426 	beq	r2,r3,cbe8 <__adddf3+0xa0>
    cbd8:	88c7883a 	add	r3,r17,r3
    cbdc:	1c63803a 	cmpltu	r17,r3,r17
    cbe0:	4451883a 	add	r8,r8,r17
    cbe4:	1823883a 	mov	r17,r3
    cbe8:	4080202c 	andhi	r2,r8,128
    cbec:	10005926 	beq	r2,zero,cd54 <__adddf3+0x20c>
    cbf0:	84000044 	addi	r16,r16,1
    cbf4:	0081ffc4 	movi	r2,2047
    cbf8:	8080ba26 	beq	r16,r2,cee4 <__adddf3+0x39c>
    cbfc:	00bfe034 	movhi	r2,65408
    cc00:	10bfffc4 	addi	r2,r2,-1
    cc04:	4090703a 	and	r8,r8,r2
    cc08:	4004977a 	slli	r2,r8,29
    cc0c:	4010927a 	slli	r8,r8,9
    cc10:	8822d0fa 	srli	r17,r17,3
    cc14:	8401ffcc 	andi	r16,r16,2047
    cc18:	4010d33a 	srli	r8,r8,12
    cc1c:	9007883a 	mov	r3,r18
    cc20:	1444b03a 	or	r2,r2,r17
    cc24:	8401ffcc 	andi	r16,r16,2047
    cc28:	8020953a 	slli	r16,r16,20
    cc2c:	18c03fcc 	andi	r3,r3,255
    cc30:	01000434 	movhi	r4,16
    cc34:	213fffc4 	addi	r4,r4,-1
    cc38:	180697fa 	slli	r3,r3,31
    cc3c:	4110703a 	and	r8,r8,r4
    cc40:	4410b03a 	or	r8,r8,r16
    cc44:	40c6b03a 	or	r3,r8,r3
    cc48:	dfc00417 	ldw	ra,16(sp)
    cc4c:	dcc00317 	ldw	r19,12(sp)
    cc50:	dc800217 	ldw	r18,8(sp)
    cc54:	dc400117 	ldw	r17,4(sp)
    cc58:	dc000017 	ldw	r16,0(sp)
    cc5c:	dec00504 	addi	sp,sp,20
    cc60:	f800283a 	ret
    cc64:	0081ffc4 	movi	r2,2047
    cc68:	80bfd626 	beq	r16,r2,cbc4 <__alt_data_end+0xff00cbc4>
    cc6c:	4a402034 	orhi	r9,r9,128
    cc70:	00800e04 	movi	r2,56
    cc74:	10c09f16 	blt	r2,r3,cef4 <__adddf3+0x3ac>
    cc78:	008007c4 	movi	r2,31
    cc7c:	10c0c216 	blt	r2,r3,cf88 <__adddf3+0x440>
    cc80:	00800804 	movi	r2,32
    cc84:	10c5c83a 	sub	r2,r2,r3
    cc88:	488a983a 	sll	r5,r9,r2
    cc8c:	30c8d83a 	srl	r4,r6,r3
    cc90:	3084983a 	sll	r2,r6,r2
    cc94:	48c6d83a 	srl	r3,r9,r3
    cc98:	290cb03a 	or	r6,r5,r4
    cc9c:	1004c03a 	cmpne	r2,r2,zero
    cca0:	308cb03a 	or	r6,r6,r2
    cca4:	898dc83a 	sub	r6,r17,r6
    cca8:	89a3803a 	cmpltu	r17,r17,r6
    ccac:	40d1c83a 	sub	r8,r8,r3
    ccb0:	4451c83a 	sub	r8,r8,r17
    ccb4:	3023883a 	mov	r17,r6
    ccb8:	4080202c 	andhi	r2,r8,128
    ccbc:	10002326 	beq	r2,zero,cd4c <__adddf3+0x204>
    ccc0:	04c02034 	movhi	r19,128
    ccc4:	9cffffc4 	addi	r19,r19,-1
    ccc8:	44e6703a 	and	r19,r8,r19
    cccc:	98007626 	beq	r19,zero,cea8 <__adddf3+0x360>
    ccd0:	9809883a 	mov	r4,r19
    ccd4:	00029b80 	call	29b8 <__clzsi2>
    ccd8:	10fffe04 	addi	r3,r2,-8
    ccdc:	010007c4 	movi	r4,31
    cce0:	20c07716 	blt	r4,r3,cec0 <__adddf3+0x378>
    cce4:	00800804 	movi	r2,32
    cce8:	10c5c83a 	sub	r2,r2,r3
    ccec:	8884d83a 	srl	r2,r17,r2
    ccf0:	98d0983a 	sll	r8,r19,r3
    ccf4:	88e2983a 	sll	r17,r17,r3
    ccf8:	1204b03a 	or	r2,r2,r8
    ccfc:	1c007416 	blt	r3,r16,ced0 <__adddf3+0x388>
    cd00:	1c21c83a 	sub	r16,r3,r16
    cd04:	82000044 	addi	r8,r16,1
    cd08:	00c007c4 	movi	r3,31
    cd0c:	1a009116 	blt	r3,r8,cf54 <__adddf3+0x40c>
    cd10:	00c00804 	movi	r3,32
    cd14:	1a07c83a 	sub	r3,r3,r8
    cd18:	8a08d83a 	srl	r4,r17,r8
    cd1c:	88e2983a 	sll	r17,r17,r3
    cd20:	10c6983a 	sll	r3,r2,r3
    cd24:	1210d83a 	srl	r8,r2,r8
    cd28:	8804c03a 	cmpne	r2,r17,zero
    cd2c:	1906b03a 	or	r3,r3,r4
    cd30:	18a2b03a 	or	r17,r3,r2
    cd34:	0021883a 	mov	r16,zero
    cd38:	003fa206 	br	cbc4 <__alt_data_end+0xff00cbc4>
    cd3c:	1890b03a 	or	r8,r3,r2
    cd40:	40017d26 	beq	r8,zero,d338 <__adddf3+0x7f0>
    cd44:	1011883a 	mov	r8,r2
    cd48:	1823883a 	mov	r17,r3
    cd4c:	888001cc 	andi	r2,r17,7
    cd50:	103f9e1e 	bne	r2,zero,cbcc <__alt_data_end+0xff00cbcc>
    cd54:	4004977a 	slli	r2,r8,29
    cd58:	8822d0fa 	srli	r17,r17,3
    cd5c:	4010d0fa 	srli	r8,r8,3
    cd60:	9007883a 	mov	r3,r18
    cd64:	1444b03a 	or	r2,r2,r17
    cd68:	0101ffc4 	movi	r4,2047
    cd6c:	81002426 	beq	r16,r4,ce00 <__adddf3+0x2b8>
    cd70:	8120703a 	and	r16,r16,r4
    cd74:	01000434 	movhi	r4,16
    cd78:	213fffc4 	addi	r4,r4,-1
    cd7c:	4110703a 	and	r8,r8,r4
    cd80:	003fa806 	br	cc24 <__alt_data_end+0xff00cc24>
    cd84:	8089c83a 	sub	r4,r16,r2
    cd88:	01005e0e 	bge	zero,r4,cf04 <__adddf3+0x3bc>
    cd8c:	10002b26 	beq	r2,zero,ce3c <__adddf3+0x2f4>
    cd90:	0081ffc4 	movi	r2,2047
    cd94:	80bf8b26 	beq	r16,r2,cbc4 <__alt_data_end+0xff00cbc4>
    cd98:	4a402034 	orhi	r9,r9,128
    cd9c:	00800e04 	movi	r2,56
    cda0:	1100a40e 	bge	r2,r4,d034 <__adddf3+0x4ec>
    cda4:	498cb03a 	or	r6,r9,r6
    cda8:	300ac03a 	cmpne	r5,r6,zero
    cdac:	0013883a 	mov	r9,zero
    cdb0:	2c4b883a 	add	r5,r5,r17
    cdb4:	2c63803a 	cmpltu	r17,r5,r17
    cdb8:	4a11883a 	add	r8,r9,r8
    cdbc:	8a11883a 	add	r8,r17,r8
    cdc0:	2823883a 	mov	r17,r5
    cdc4:	4080202c 	andhi	r2,r8,128
    cdc8:	103fe026 	beq	r2,zero,cd4c <__alt_data_end+0xff00cd4c>
    cdcc:	84000044 	addi	r16,r16,1
    cdd0:	0081ffc4 	movi	r2,2047
    cdd4:	8080d226 	beq	r16,r2,d120 <__adddf3+0x5d8>
    cdd8:	00bfe034 	movhi	r2,65408
    cddc:	10bfffc4 	addi	r2,r2,-1
    cde0:	4090703a 	and	r8,r8,r2
    cde4:	880ad07a 	srli	r5,r17,1
    cde8:	400897fa 	slli	r4,r8,31
    cdec:	88c0004c 	andi	r3,r17,1
    cdf0:	28e2b03a 	or	r17,r5,r3
    cdf4:	4010d07a 	srli	r8,r8,1
    cdf8:	2462b03a 	or	r17,r4,r17
    cdfc:	003f7106 	br	cbc4 <__alt_data_end+0xff00cbc4>
    ce00:	4088b03a 	or	r4,r8,r2
    ce04:	20014526 	beq	r4,zero,d31c <__adddf3+0x7d4>
    ce08:	01000434 	movhi	r4,16
    ce0c:	42000234 	orhi	r8,r8,8
    ce10:	213fffc4 	addi	r4,r4,-1
    ce14:	4110703a 	and	r8,r8,r4
    ce18:	003f8206 	br	cc24 <__alt_data_end+0xff00cc24>
    ce1c:	18ffffc4 	addi	r3,r3,-1
    ce20:	1800491e 	bne	r3,zero,cf48 <__adddf3+0x400>
    ce24:	898bc83a 	sub	r5,r17,r6
    ce28:	8963803a 	cmpltu	r17,r17,r5
    ce2c:	4251c83a 	sub	r8,r8,r9
    ce30:	4451c83a 	sub	r8,r8,r17
    ce34:	2823883a 	mov	r17,r5
    ce38:	003f9f06 	br	ccb8 <__alt_data_end+0xff00ccb8>
    ce3c:	4984b03a 	or	r2,r9,r6
    ce40:	103f6026 	beq	r2,zero,cbc4 <__alt_data_end+0xff00cbc4>
    ce44:	213fffc4 	addi	r4,r4,-1
    ce48:	2000931e 	bne	r4,zero,d098 <__adddf3+0x550>
    ce4c:	898d883a 	add	r6,r17,r6
    ce50:	3463803a 	cmpltu	r17,r6,r17
    ce54:	4251883a 	add	r8,r8,r9
    ce58:	8a11883a 	add	r8,r17,r8
    ce5c:	3023883a 	mov	r17,r6
    ce60:	003fd806 	br	cdc4 <__alt_data_end+0xff00cdc4>
    ce64:	1800541e 	bne	r3,zero,cfb8 <__adddf3+0x470>
    ce68:	80800044 	addi	r2,r16,1
    ce6c:	1081ffcc 	andi	r2,r2,2047
    ce70:	00c00044 	movi	r3,1
    ce74:	1880a00e 	bge	r3,r2,d0f8 <__adddf3+0x5b0>
    ce78:	8989c83a 	sub	r4,r17,r6
    ce7c:	8905803a 	cmpltu	r2,r17,r4
    ce80:	4267c83a 	sub	r19,r8,r9
    ce84:	98a7c83a 	sub	r19,r19,r2
    ce88:	9880202c 	andhi	r2,r19,128
    ce8c:	10006326 	beq	r2,zero,d01c <__adddf3+0x4d4>
    ce90:	3463c83a 	sub	r17,r6,r17
    ce94:	4a07c83a 	sub	r3,r9,r8
    ce98:	344d803a 	cmpltu	r6,r6,r17
    ce9c:	19a7c83a 	sub	r19,r3,r6
    cea0:	3825883a 	mov	r18,r7
    cea4:	983f8a1e 	bne	r19,zero,ccd0 <__alt_data_end+0xff00ccd0>
    cea8:	8809883a 	mov	r4,r17
    ceac:	00029b80 	call	29b8 <__clzsi2>
    ceb0:	10800804 	addi	r2,r2,32
    ceb4:	10fffe04 	addi	r3,r2,-8
    ceb8:	010007c4 	movi	r4,31
    cebc:	20ff890e 	bge	r4,r3,cce4 <__alt_data_end+0xff00cce4>
    cec0:	10bff604 	addi	r2,r2,-40
    cec4:	8884983a 	sll	r2,r17,r2
    cec8:	0023883a 	mov	r17,zero
    cecc:	1c3f8c0e 	bge	r3,r16,cd00 <__alt_data_end+0xff00cd00>
    ced0:	023fe034 	movhi	r8,65408
    ced4:	423fffc4 	addi	r8,r8,-1
    ced8:	80e1c83a 	sub	r16,r16,r3
    cedc:	1210703a 	and	r8,r2,r8
    cee0:	003f3806 	br	cbc4 <__alt_data_end+0xff00cbc4>
    cee4:	9007883a 	mov	r3,r18
    cee8:	0011883a 	mov	r8,zero
    ceec:	0005883a 	mov	r2,zero
    cef0:	003f4c06 	br	cc24 <__alt_data_end+0xff00cc24>
    cef4:	498cb03a 	or	r6,r9,r6
    cef8:	300cc03a 	cmpne	r6,r6,zero
    cefc:	0007883a 	mov	r3,zero
    cf00:	003f6806 	br	cca4 <__alt_data_end+0xff00cca4>
    cf04:	20009c1e 	bne	r4,zero,d178 <__adddf3+0x630>
    cf08:	80800044 	addi	r2,r16,1
    cf0c:	1141ffcc 	andi	r5,r2,2047
    cf10:	01000044 	movi	r4,1
    cf14:	2140670e 	bge	r4,r5,d0b4 <__adddf3+0x56c>
    cf18:	0101ffc4 	movi	r4,2047
    cf1c:	11007f26 	beq	r2,r4,d11c <__adddf3+0x5d4>
    cf20:	898d883a 	add	r6,r17,r6
    cf24:	4247883a 	add	r3,r8,r9
    cf28:	3451803a 	cmpltu	r8,r6,r17
    cf2c:	40d1883a 	add	r8,r8,r3
    cf30:	402297fa 	slli	r17,r8,31
    cf34:	300cd07a 	srli	r6,r6,1
    cf38:	4010d07a 	srli	r8,r8,1
    cf3c:	1021883a 	mov	r16,r2
    cf40:	89a2b03a 	or	r17,r17,r6
    cf44:	003f1f06 	br	cbc4 <__alt_data_end+0xff00cbc4>
    cf48:	0081ffc4 	movi	r2,2047
    cf4c:	80bf481e 	bne	r16,r2,cc70 <__alt_data_end+0xff00cc70>
    cf50:	003f1c06 	br	cbc4 <__alt_data_end+0xff00cbc4>
    cf54:	843ff844 	addi	r16,r16,-31
    cf58:	01000804 	movi	r4,32
    cf5c:	1406d83a 	srl	r3,r2,r16
    cf60:	41005026 	beq	r8,r4,d0a4 <__adddf3+0x55c>
    cf64:	01001004 	movi	r4,64
    cf68:	2211c83a 	sub	r8,r4,r8
    cf6c:	1204983a 	sll	r2,r2,r8
    cf70:	88a2b03a 	or	r17,r17,r2
    cf74:	8822c03a 	cmpne	r17,r17,zero
    cf78:	1c62b03a 	or	r17,r3,r17
    cf7c:	0011883a 	mov	r8,zero
    cf80:	0021883a 	mov	r16,zero
    cf84:	003f7106 	br	cd4c <__alt_data_end+0xff00cd4c>
    cf88:	193ff804 	addi	r4,r3,-32
    cf8c:	00800804 	movi	r2,32
    cf90:	4908d83a 	srl	r4,r9,r4
    cf94:	18804526 	beq	r3,r2,d0ac <__adddf3+0x564>
    cf98:	00801004 	movi	r2,64
    cf9c:	10c5c83a 	sub	r2,r2,r3
    cfa0:	4886983a 	sll	r3,r9,r2
    cfa4:	198cb03a 	or	r6,r3,r6
    cfa8:	300cc03a 	cmpne	r6,r6,zero
    cfac:	218cb03a 	or	r6,r4,r6
    cfb0:	0007883a 	mov	r3,zero
    cfb4:	003f3b06 	br	cca4 <__alt_data_end+0xff00cca4>
    cfb8:	80002a26 	beq	r16,zero,d064 <__adddf3+0x51c>
    cfbc:	0101ffc4 	movi	r4,2047
    cfc0:	11006826 	beq	r2,r4,d164 <__adddf3+0x61c>
    cfc4:	00c7c83a 	sub	r3,zero,r3
    cfc8:	42002034 	orhi	r8,r8,128
    cfcc:	01000e04 	movi	r4,56
    cfd0:	20c07c16 	blt	r4,r3,d1c4 <__adddf3+0x67c>
    cfd4:	010007c4 	movi	r4,31
    cfd8:	20c0da16 	blt	r4,r3,d344 <__adddf3+0x7fc>
    cfdc:	01000804 	movi	r4,32
    cfe0:	20c9c83a 	sub	r4,r4,r3
    cfe4:	4114983a 	sll	r10,r8,r4
    cfe8:	88cad83a 	srl	r5,r17,r3
    cfec:	8908983a 	sll	r4,r17,r4
    cff0:	40c6d83a 	srl	r3,r8,r3
    cff4:	5162b03a 	or	r17,r10,r5
    cff8:	2008c03a 	cmpne	r4,r4,zero
    cffc:	8922b03a 	or	r17,r17,r4
    d000:	3463c83a 	sub	r17,r6,r17
    d004:	48c7c83a 	sub	r3,r9,r3
    d008:	344d803a 	cmpltu	r6,r6,r17
    d00c:	1991c83a 	sub	r8,r3,r6
    d010:	1021883a 	mov	r16,r2
    d014:	3825883a 	mov	r18,r7
    d018:	003f2706 	br	ccb8 <__alt_data_end+0xff00ccb8>
    d01c:	24d0b03a 	or	r8,r4,r19
    d020:	40001b1e 	bne	r8,zero,d090 <__adddf3+0x548>
    d024:	0005883a 	mov	r2,zero
    d028:	0007883a 	mov	r3,zero
    d02c:	0021883a 	mov	r16,zero
    d030:	003f4d06 	br	cd68 <__alt_data_end+0xff00cd68>
    d034:	008007c4 	movi	r2,31
    d038:	11003c16 	blt	r2,r4,d12c <__adddf3+0x5e4>
    d03c:	00800804 	movi	r2,32
    d040:	1105c83a 	sub	r2,r2,r4
    d044:	488e983a 	sll	r7,r9,r2
    d048:	310ad83a 	srl	r5,r6,r4
    d04c:	3084983a 	sll	r2,r6,r2
    d050:	4912d83a 	srl	r9,r9,r4
    d054:	394ab03a 	or	r5,r7,r5
    d058:	1004c03a 	cmpne	r2,r2,zero
    d05c:	288ab03a 	or	r5,r5,r2
    d060:	003f5306 	br	cdb0 <__alt_data_end+0xff00cdb0>
    d064:	4448b03a 	or	r4,r8,r17
    d068:	20003e26 	beq	r4,zero,d164 <__adddf3+0x61c>
    d06c:	00c6303a 	nor	r3,zero,r3
    d070:	18003a1e 	bne	r3,zero,d15c <__adddf3+0x614>
    d074:	3463c83a 	sub	r17,r6,r17
    d078:	4a07c83a 	sub	r3,r9,r8
    d07c:	344d803a 	cmpltu	r6,r6,r17
    d080:	1991c83a 	sub	r8,r3,r6
    d084:	1021883a 	mov	r16,r2
    d088:	3825883a 	mov	r18,r7
    d08c:	003f0a06 	br	ccb8 <__alt_data_end+0xff00ccb8>
    d090:	2023883a 	mov	r17,r4
    d094:	003f0d06 	br	cccc <__alt_data_end+0xff00cccc>
    d098:	0081ffc4 	movi	r2,2047
    d09c:	80bf3f1e 	bne	r16,r2,cd9c <__alt_data_end+0xff00cd9c>
    d0a0:	003ec806 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	003fb106 	br	cf70 <__alt_data_end+0xff00cf70>
    d0ac:	0007883a 	mov	r3,zero
    d0b0:	003fbc06 	br	cfa4 <__alt_data_end+0xff00cfa4>
    d0b4:	4444b03a 	or	r2,r8,r17
    d0b8:	8000871e 	bne	r16,zero,d2d8 <__adddf3+0x790>
    d0bc:	1000ba26 	beq	r2,zero,d3a8 <__adddf3+0x860>
    d0c0:	4984b03a 	or	r2,r9,r6
    d0c4:	103ebf26 	beq	r2,zero,cbc4 <__alt_data_end+0xff00cbc4>
    d0c8:	8985883a 	add	r2,r17,r6
    d0cc:	4247883a 	add	r3,r8,r9
    d0d0:	1451803a 	cmpltu	r8,r2,r17
    d0d4:	40d1883a 	add	r8,r8,r3
    d0d8:	40c0202c 	andhi	r3,r8,128
    d0dc:	1023883a 	mov	r17,r2
    d0e0:	183f1a26 	beq	r3,zero,cd4c <__alt_data_end+0xff00cd4c>
    d0e4:	00bfe034 	movhi	r2,65408
    d0e8:	10bfffc4 	addi	r2,r2,-1
    d0ec:	2021883a 	mov	r16,r4
    d0f0:	4090703a 	and	r8,r8,r2
    d0f4:	003eb306 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d0f8:	4444b03a 	or	r2,r8,r17
    d0fc:	8000291e 	bne	r16,zero,d1a4 <__adddf3+0x65c>
    d100:	10004b1e 	bne	r2,zero,d230 <__adddf3+0x6e8>
    d104:	4990b03a 	or	r8,r9,r6
    d108:	40008b26 	beq	r8,zero,d338 <__adddf3+0x7f0>
    d10c:	4811883a 	mov	r8,r9
    d110:	3023883a 	mov	r17,r6
    d114:	3825883a 	mov	r18,r7
    d118:	003eaa06 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d11c:	1021883a 	mov	r16,r2
    d120:	0011883a 	mov	r8,zero
    d124:	0005883a 	mov	r2,zero
    d128:	003f0f06 	br	cd68 <__alt_data_end+0xff00cd68>
    d12c:	217ff804 	addi	r5,r4,-32
    d130:	00800804 	movi	r2,32
    d134:	494ad83a 	srl	r5,r9,r5
    d138:	20807d26 	beq	r4,r2,d330 <__adddf3+0x7e8>
    d13c:	00801004 	movi	r2,64
    d140:	1109c83a 	sub	r4,r2,r4
    d144:	4912983a 	sll	r9,r9,r4
    d148:	498cb03a 	or	r6,r9,r6
    d14c:	300cc03a 	cmpne	r6,r6,zero
    d150:	298ab03a 	or	r5,r5,r6
    d154:	0013883a 	mov	r9,zero
    d158:	003f1506 	br	cdb0 <__alt_data_end+0xff00cdb0>
    d15c:	0101ffc4 	movi	r4,2047
    d160:	113f9a1e 	bne	r2,r4,cfcc <__alt_data_end+0xff00cfcc>
    d164:	4811883a 	mov	r8,r9
    d168:	3023883a 	mov	r17,r6
    d16c:	1021883a 	mov	r16,r2
    d170:	3825883a 	mov	r18,r7
    d174:	003e9306 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d178:	8000161e 	bne	r16,zero,d1d4 <__adddf3+0x68c>
    d17c:	444ab03a 	or	r5,r8,r17
    d180:	28005126 	beq	r5,zero,d2c8 <__adddf3+0x780>
    d184:	0108303a 	nor	r4,zero,r4
    d188:	20004d1e 	bne	r4,zero,d2c0 <__adddf3+0x778>
    d18c:	89a3883a 	add	r17,r17,r6
    d190:	4253883a 	add	r9,r8,r9
    d194:	898d803a 	cmpltu	r6,r17,r6
    d198:	3251883a 	add	r8,r6,r9
    d19c:	1021883a 	mov	r16,r2
    d1a0:	003f0806 	br	cdc4 <__alt_data_end+0xff00cdc4>
    d1a4:	1000301e 	bne	r2,zero,d268 <__adddf3+0x720>
    d1a8:	4984b03a 	or	r2,r9,r6
    d1ac:	10007126 	beq	r2,zero,d374 <__adddf3+0x82c>
    d1b0:	4811883a 	mov	r8,r9
    d1b4:	3023883a 	mov	r17,r6
    d1b8:	3825883a 	mov	r18,r7
    d1bc:	0401ffc4 	movi	r16,2047
    d1c0:	003e8006 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d1c4:	4462b03a 	or	r17,r8,r17
    d1c8:	8822c03a 	cmpne	r17,r17,zero
    d1cc:	0007883a 	mov	r3,zero
    d1d0:	003f8b06 	br	d000 <__alt_data_end+0xff00d000>
    d1d4:	0141ffc4 	movi	r5,2047
    d1d8:	11403b26 	beq	r2,r5,d2c8 <__adddf3+0x780>
    d1dc:	0109c83a 	sub	r4,zero,r4
    d1e0:	42002034 	orhi	r8,r8,128
    d1e4:	01400e04 	movi	r5,56
    d1e8:	29006716 	blt	r5,r4,d388 <__adddf3+0x840>
    d1ec:	014007c4 	movi	r5,31
    d1f0:	29007016 	blt	r5,r4,d3b4 <__adddf3+0x86c>
    d1f4:	01400804 	movi	r5,32
    d1f8:	290bc83a 	sub	r5,r5,r4
    d1fc:	4154983a 	sll	r10,r8,r5
    d200:	890ed83a 	srl	r7,r17,r4
    d204:	894a983a 	sll	r5,r17,r5
    d208:	4108d83a 	srl	r4,r8,r4
    d20c:	51e2b03a 	or	r17,r10,r7
    d210:	280ac03a 	cmpne	r5,r5,zero
    d214:	8962b03a 	or	r17,r17,r5
    d218:	89a3883a 	add	r17,r17,r6
    d21c:	2253883a 	add	r9,r4,r9
    d220:	898d803a 	cmpltu	r6,r17,r6
    d224:	3251883a 	add	r8,r6,r9
    d228:	1021883a 	mov	r16,r2
    d22c:	003ee506 	br	cdc4 <__alt_data_end+0xff00cdc4>
    d230:	4984b03a 	or	r2,r9,r6
    d234:	103e6326 	beq	r2,zero,cbc4 <__alt_data_end+0xff00cbc4>
    d238:	8987c83a 	sub	r3,r17,r6
    d23c:	88c9803a 	cmpltu	r4,r17,r3
    d240:	4245c83a 	sub	r2,r8,r9
    d244:	1105c83a 	sub	r2,r2,r4
    d248:	1100202c 	andhi	r4,r2,128
    d24c:	203ebb26 	beq	r4,zero,cd3c <__alt_data_end+0xff00cd3c>
    d250:	3463c83a 	sub	r17,r6,r17
    d254:	4a07c83a 	sub	r3,r9,r8
    d258:	344d803a 	cmpltu	r6,r6,r17
    d25c:	1991c83a 	sub	r8,r3,r6
    d260:	3825883a 	mov	r18,r7
    d264:	003e5706 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d268:	4984b03a 	or	r2,r9,r6
    d26c:	10002e26 	beq	r2,zero,d328 <__adddf3+0x7e0>
    d270:	4004d0fa 	srli	r2,r8,3
    d274:	8822d0fa 	srli	r17,r17,3
    d278:	4010977a 	slli	r8,r8,29
    d27c:	10c0022c 	andhi	r3,r2,8
    d280:	4462b03a 	or	r17,r8,r17
    d284:	18000826 	beq	r3,zero,d2a8 <__adddf3+0x760>
    d288:	4808d0fa 	srli	r4,r9,3
    d28c:	20c0022c 	andhi	r3,r4,8
    d290:	1800051e 	bne	r3,zero,d2a8 <__adddf3+0x760>
    d294:	300cd0fa 	srli	r6,r6,3
    d298:	4806977a 	slli	r3,r9,29
    d29c:	2005883a 	mov	r2,r4
    d2a0:	3825883a 	mov	r18,r7
    d2a4:	19a2b03a 	or	r17,r3,r6
    d2a8:	8810d77a 	srli	r8,r17,29
    d2ac:	100490fa 	slli	r2,r2,3
    d2b0:	882290fa 	slli	r17,r17,3
    d2b4:	0401ffc4 	movi	r16,2047
    d2b8:	4090b03a 	or	r8,r8,r2
    d2bc:	003e4106 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d2c0:	0141ffc4 	movi	r5,2047
    d2c4:	117fc71e 	bne	r2,r5,d1e4 <__alt_data_end+0xff00d1e4>
    d2c8:	4811883a 	mov	r8,r9
    d2cc:	3023883a 	mov	r17,r6
    d2d0:	1021883a 	mov	r16,r2
    d2d4:	003e3b06 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d2d8:	10002f26 	beq	r2,zero,d398 <__adddf3+0x850>
    d2dc:	4984b03a 	or	r2,r9,r6
    d2e0:	10001126 	beq	r2,zero,d328 <__adddf3+0x7e0>
    d2e4:	4004d0fa 	srli	r2,r8,3
    d2e8:	8822d0fa 	srli	r17,r17,3
    d2ec:	4010977a 	slli	r8,r8,29
    d2f0:	10c0022c 	andhi	r3,r2,8
    d2f4:	4462b03a 	or	r17,r8,r17
    d2f8:	183feb26 	beq	r3,zero,d2a8 <__alt_data_end+0xff00d2a8>
    d2fc:	4808d0fa 	srli	r4,r9,3
    d300:	20c0022c 	andhi	r3,r4,8
    d304:	183fe81e 	bne	r3,zero,d2a8 <__alt_data_end+0xff00d2a8>
    d308:	300cd0fa 	srli	r6,r6,3
    d30c:	4806977a 	slli	r3,r9,29
    d310:	2005883a 	mov	r2,r4
    d314:	19a2b03a 	or	r17,r3,r6
    d318:	003fe306 	br	d2a8 <__alt_data_end+0xff00d2a8>
    d31c:	0011883a 	mov	r8,zero
    d320:	0005883a 	mov	r2,zero
    d324:	003e3f06 	br	cc24 <__alt_data_end+0xff00cc24>
    d328:	0401ffc4 	movi	r16,2047
    d32c:	003e2506 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d330:	0013883a 	mov	r9,zero
    d334:	003f8406 	br	d148 <__alt_data_end+0xff00d148>
    d338:	0005883a 	mov	r2,zero
    d33c:	0007883a 	mov	r3,zero
    d340:	003e8906 	br	cd68 <__alt_data_end+0xff00cd68>
    d344:	197ff804 	addi	r5,r3,-32
    d348:	01000804 	movi	r4,32
    d34c:	414ad83a 	srl	r5,r8,r5
    d350:	19002426 	beq	r3,r4,d3e4 <__adddf3+0x89c>
    d354:	01001004 	movi	r4,64
    d358:	20c7c83a 	sub	r3,r4,r3
    d35c:	40c6983a 	sll	r3,r8,r3
    d360:	1c46b03a 	or	r3,r3,r17
    d364:	1806c03a 	cmpne	r3,r3,zero
    d368:	28e2b03a 	or	r17,r5,r3
    d36c:	0007883a 	mov	r3,zero
    d370:	003f2306 	br	d000 <__alt_data_end+0xff00d000>
    d374:	0007883a 	mov	r3,zero
    d378:	5811883a 	mov	r8,r11
    d37c:	00bfffc4 	movi	r2,-1
    d380:	0401ffc4 	movi	r16,2047
    d384:	003e7806 	br	cd68 <__alt_data_end+0xff00cd68>
    d388:	4462b03a 	or	r17,r8,r17
    d38c:	8822c03a 	cmpne	r17,r17,zero
    d390:	0009883a 	mov	r4,zero
    d394:	003fa006 	br	d218 <__alt_data_end+0xff00d218>
    d398:	4811883a 	mov	r8,r9
    d39c:	3023883a 	mov	r17,r6
    d3a0:	0401ffc4 	movi	r16,2047
    d3a4:	003e0706 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d3a8:	4811883a 	mov	r8,r9
    d3ac:	3023883a 	mov	r17,r6
    d3b0:	003e0406 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d3b4:	21fff804 	addi	r7,r4,-32
    d3b8:	01400804 	movi	r5,32
    d3bc:	41ced83a 	srl	r7,r8,r7
    d3c0:	21400a26 	beq	r4,r5,d3ec <__adddf3+0x8a4>
    d3c4:	01401004 	movi	r5,64
    d3c8:	2909c83a 	sub	r4,r5,r4
    d3cc:	4108983a 	sll	r4,r8,r4
    d3d0:	2448b03a 	or	r4,r4,r17
    d3d4:	2008c03a 	cmpne	r4,r4,zero
    d3d8:	3922b03a 	or	r17,r7,r4
    d3dc:	0009883a 	mov	r4,zero
    d3e0:	003f8d06 	br	d218 <__alt_data_end+0xff00d218>
    d3e4:	0007883a 	mov	r3,zero
    d3e8:	003fdd06 	br	d360 <__alt_data_end+0xff00d360>
    d3ec:	0009883a 	mov	r4,zero
    d3f0:	003ff706 	br	d3d0 <__alt_data_end+0xff00d3d0>

0000d3f4 <__eqdf2>:
    d3f4:	2804d53a 	srli	r2,r5,20
    d3f8:	3806d53a 	srli	r3,r7,20
    d3fc:	02000434 	movhi	r8,16
    d400:	423fffc4 	addi	r8,r8,-1
    d404:	1081ffcc 	andi	r2,r2,2047
    d408:	0281ffc4 	movi	r10,2047
    d40c:	2a12703a 	and	r9,r5,r8
    d410:	18c1ffcc 	andi	r3,r3,2047
    d414:	3a10703a 	and	r8,r7,r8
    d418:	280ad7fa 	srli	r5,r5,31
    d41c:	380ed7fa 	srli	r7,r7,31
    d420:	12801026 	beq	r2,r10,d464 <__eqdf2+0x70>
    d424:	0281ffc4 	movi	r10,2047
    d428:	1a800a26 	beq	r3,r10,d454 <__eqdf2+0x60>
    d42c:	10c00226 	beq	r2,r3,d438 <__eqdf2+0x44>
    d430:	00800044 	movi	r2,1
    d434:	f800283a 	ret
    d438:	4a3ffd1e 	bne	r9,r8,d430 <__alt_data_end+0xff00d430>
    d43c:	21bffc1e 	bne	r4,r6,d430 <__alt_data_end+0xff00d430>
    d440:	29c00c26 	beq	r5,r7,d474 <__eqdf2+0x80>
    d444:	103ffa1e 	bne	r2,zero,d430 <__alt_data_end+0xff00d430>
    d448:	2244b03a 	or	r2,r4,r9
    d44c:	1004c03a 	cmpne	r2,r2,zero
    d450:	f800283a 	ret
    d454:	3214b03a 	or	r10,r6,r8
    d458:	503ff426 	beq	r10,zero,d42c <__alt_data_end+0xff00d42c>
    d45c:	00800044 	movi	r2,1
    d460:	f800283a 	ret
    d464:	2254b03a 	or	r10,r4,r9
    d468:	503fee26 	beq	r10,zero,d424 <__alt_data_end+0xff00d424>
    d46c:	00800044 	movi	r2,1
    d470:	f800283a 	ret
    d474:	0005883a 	mov	r2,zero
    d478:	f800283a 	ret

0000d47c <__gedf2>:
    d47c:	2804d53a 	srli	r2,r5,20
    d480:	3806d53a 	srli	r3,r7,20
    d484:	02000434 	movhi	r8,16
    d488:	423fffc4 	addi	r8,r8,-1
    d48c:	1081ffcc 	andi	r2,r2,2047
    d490:	0241ffc4 	movi	r9,2047
    d494:	2a14703a 	and	r10,r5,r8
    d498:	18c1ffcc 	andi	r3,r3,2047
    d49c:	3a10703a 	and	r8,r7,r8
    d4a0:	280ad7fa 	srli	r5,r5,31
    d4a4:	380ed7fa 	srli	r7,r7,31
    d4a8:	12401d26 	beq	r2,r9,d520 <__gedf2+0xa4>
    d4ac:	0241ffc4 	movi	r9,2047
    d4b0:	1a401226 	beq	r3,r9,d4fc <__gedf2+0x80>
    d4b4:	1000081e 	bne	r2,zero,d4d8 <__gedf2+0x5c>
    d4b8:	2296b03a 	or	r11,r4,r10
    d4bc:	5813003a 	cmpeq	r9,r11,zero
    d4c0:	1800091e 	bne	r3,zero,d4e8 <__gedf2+0x6c>
    d4c4:	3218b03a 	or	r12,r6,r8
    d4c8:	6000071e 	bne	r12,zero,d4e8 <__gedf2+0x6c>
    d4cc:	0005883a 	mov	r2,zero
    d4d0:	5800101e 	bne	r11,zero,d514 <__gedf2+0x98>
    d4d4:	f800283a 	ret
    d4d8:	18000c1e 	bne	r3,zero,d50c <__gedf2+0x90>
    d4dc:	3212b03a 	or	r9,r6,r8
    d4e0:	48000c26 	beq	r9,zero,d514 <__gedf2+0x98>
    d4e4:	0013883a 	mov	r9,zero
    d4e8:	39c03fcc 	andi	r7,r7,255
    d4ec:	48000826 	beq	r9,zero,d510 <__gedf2+0x94>
    d4f0:	38000926 	beq	r7,zero,d518 <__gedf2+0x9c>
    d4f4:	00800044 	movi	r2,1
    d4f8:	f800283a 	ret
    d4fc:	3212b03a 	or	r9,r6,r8
    d500:	483fec26 	beq	r9,zero,d4b4 <__alt_data_end+0xff00d4b4>
    d504:	00bfff84 	movi	r2,-2
    d508:	f800283a 	ret
    d50c:	39c03fcc 	andi	r7,r7,255
    d510:	29c00626 	beq	r5,r7,d52c <__gedf2+0xb0>
    d514:	283ff726 	beq	r5,zero,d4f4 <__alt_data_end+0xff00d4f4>
    d518:	00bfffc4 	movi	r2,-1
    d51c:	f800283a 	ret
    d520:	2292b03a 	or	r9,r4,r10
    d524:	483fe126 	beq	r9,zero,d4ac <__alt_data_end+0xff00d4ac>
    d528:	003ff606 	br	d504 <__alt_data_end+0xff00d504>
    d52c:	18bff916 	blt	r3,r2,d514 <__alt_data_end+0xff00d514>
    d530:	10c00316 	blt	r2,r3,d540 <__gedf2+0xc4>
    d534:	42bff736 	bltu	r8,r10,d514 <__alt_data_end+0xff00d514>
    d538:	52000326 	beq	r10,r8,d548 <__gedf2+0xcc>
    d53c:	5200042e 	bgeu	r10,r8,d550 <__gedf2+0xd4>
    d540:	283fec1e 	bne	r5,zero,d4f4 <__alt_data_end+0xff00d4f4>
    d544:	003ff406 	br	d518 <__alt_data_end+0xff00d518>
    d548:	313ff236 	bltu	r6,r4,d514 <__alt_data_end+0xff00d514>
    d54c:	21bffc36 	bltu	r4,r6,d540 <__alt_data_end+0xff00d540>
    d550:	0005883a 	mov	r2,zero
    d554:	f800283a 	ret

0000d558 <__ledf2>:
    d558:	2804d53a 	srli	r2,r5,20
    d55c:	3810d53a 	srli	r8,r7,20
    d560:	00c00434 	movhi	r3,16
    d564:	18ffffc4 	addi	r3,r3,-1
    d568:	1081ffcc 	andi	r2,r2,2047
    d56c:	0241ffc4 	movi	r9,2047
    d570:	28d4703a 	and	r10,r5,r3
    d574:	4201ffcc 	andi	r8,r8,2047
    d578:	38c6703a 	and	r3,r7,r3
    d57c:	280ad7fa 	srli	r5,r5,31
    d580:	380ed7fa 	srli	r7,r7,31
    d584:	12401f26 	beq	r2,r9,d604 <__ledf2+0xac>
    d588:	0241ffc4 	movi	r9,2047
    d58c:	42401426 	beq	r8,r9,d5e0 <__ledf2+0x88>
    d590:	1000091e 	bne	r2,zero,d5b8 <__ledf2+0x60>
    d594:	2296b03a 	or	r11,r4,r10
    d598:	5813003a 	cmpeq	r9,r11,zero
    d59c:	29403fcc 	andi	r5,r5,255
    d5a0:	40000a1e 	bne	r8,zero,d5cc <__ledf2+0x74>
    d5a4:	30d8b03a 	or	r12,r6,r3
    d5a8:	6000081e 	bne	r12,zero,d5cc <__ledf2+0x74>
    d5ac:	0005883a 	mov	r2,zero
    d5b0:	5800111e 	bne	r11,zero,d5f8 <__ledf2+0xa0>
    d5b4:	f800283a 	ret
    d5b8:	29403fcc 	andi	r5,r5,255
    d5bc:	40000c1e 	bne	r8,zero,d5f0 <__ledf2+0x98>
    d5c0:	30d2b03a 	or	r9,r6,r3
    d5c4:	48000c26 	beq	r9,zero,d5f8 <__ledf2+0xa0>
    d5c8:	0013883a 	mov	r9,zero
    d5cc:	39c03fcc 	andi	r7,r7,255
    d5d0:	48000826 	beq	r9,zero,d5f4 <__ledf2+0x9c>
    d5d4:	38001126 	beq	r7,zero,d61c <__ledf2+0xc4>
    d5d8:	00800044 	movi	r2,1
    d5dc:	f800283a 	ret
    d5e0:	30d2b03a 	or	r9,r6,r3
    d5e4:	483fea26 	beq	r9,zero,d590 <__alt_data_end+0xff00d590>
    d5e8:	00800084 	movi	r2,2
    d5ec:	f800283a 	ret
    d5f0:	39c03fcc 	andi	r7,r7,255
    d5f4:	39400726 	beq	r7,r5,d614 <__ledf2+0xbc>
    d5f8:	2800081e 	bne	r5,zero,d61c <__ledf2+0xc4>
    d5fc:	00800044 	movi	r2,1
    d600:	f800283a 	ret
    d604:	2292b03a 	or	r9,r4,r10
    d608:	483fdf26 	beq	r9,zero,d588 <__alt_data_end+0xff00d588>
    d60c:	00800084 	movi	r2,2
    d610:	f800283a 	ret
    d614:	4080030e 	bge	r8,r2,d624 <__ledf2+0xcc>
    d618:	383fef26 	beq	r7,zero,d5d8 <__alt_data_end+0xff00d5d8>
    d61c:	00bfffc4 	movi	r2,-1
    d620:	f800283a 	ret
    d624:	123feb16 	blt	r2,r8,d5d4 <__alt_data_end+0xff00d5d4>
    d628:	1abff336 	bltu	r3,r10,d5f8 <__alt_data_end+0xff00d5f8>
    d62c:	50c00326 	beq	r10,r3,d63c <__ledf2+0xe4>
    d630:	50c0042e 	bgeu	r10,r3,d644 <__ledf2+0xec>
    d634:	283fe81e 	bne	r5,zero,d5d8 <__alt_data_end+0xff00d5d8>
    d638:	003ff806 	br	d61c <__alt_data_end+0xff00d61c>
    d63c:	313fee36 	bltu	r6,r4,d5f8 <__alt_data_end+0xff00d5f8>
    d640:	21bffc36 	bltu	r4,r6,d634 <__alt_data_end+0xff00d634>
    d644:	0005883a 	mov	r2,zero
    d648:	f800283a 	ret

0000d64c <__muldf3>:
    d64c:	defff304 	addi	sp,sp,-52
    d650:	2804d53a 	srli	r2,r5,20
    d654:	dd800915 	stw	r22,36(sp)
    d658:	282cd7fa 	srli	r22,r5,31
    d65c:	dc000315 	stw	r16,12(sp)
    d660:	04000434 	movhi	r16,16
    d664:	dd400815 	stw	r21,32(sp)
    d668:	dc800515 	stw	r18,20(sp)
    d66c:	843fffc4 	addi	r16,r16,-1
    d670:	dfc00c15 	stw	ra,48(sp)
    d674:	df000b15 	stw	fp,44(sp)
    d678:	ddc00a15 	stw	r23,40(sp)
    d67c:	dd000715 	stw	r20,28(sp)
    d680:	dcc00615 	stw	r19,24(sp)
    d684:	dc400415 	stw	r17,16(sp)
    d688:	1481ffcc 	andi	r18,r2,2047
    d68c:	2c20703a 	and	r16,r5,r16
    d690:	b02b883a 	mov	r21,r22
    d694:	b2403fcc 	andi	r9,r22,255
    d698:	90006026 	beq	r18,zero,d81c <__muldf3+0x1d0>
    d69c:	0081ffc4 	movi	r2,2047
    d6a0:	2029883a 	mov	r20,r4
    d6a4:	90803626 	beq	r18,r2,d780 <__muldf3+0x134>
    d6a8:	80800434 	orhi	r2,r16,16
    d6ac:	100490fa 	slli	r2,r2,3
    d6b0:	2020d77a 	srli	r16,r4,29
    d6b4:	202890fa 	slli	r20,r4,3
    d6b8:	94bf0044 	addi	r18,r18,-1023
    d6bc:	80a0b03a 	or	r16,r16,r2
    d6c0:	0027883a 	mov	r19,zero
    d6c4:	0039883a 	mov	fp,zero
    d6c8:	3804d53a 	srli	r2,r7,20
    d6cc:	382ed7fa 	srli	r23,r7,31
    d6d0:	04400434 	movhi	r17,16
    d6d4:	8c7fffc4 	addi	r17,r17,-1
    d6d8:	1081ffcc 	andi	r2,r2,2047
    d6dc:	3011883a 	mov	r8,r6
    d6e0:	3c62703a 	and	r17,r7,r17
    d6e4:	ba803fcc 	andi	r10,r23,255
    d6e8:	10006d26 	beq	r2,zero,d8a0 <__muldf3+0x254>
    d6ec:	00c1ffc4 	movi	r3,2047
    d6f0:	10c06526 	beq	r2,r3,d888 <__muldf3+0x23c>
    d6f4:	88c00434 	orhi	r3,r17,16
    d6f8:	180690fa 	slli	r3,r3,3
    d6fc:	3022d77a 	srli	r17,r6,29
    d700:	301090fa 	slli	r8,r6,3
    d704:	10bf0044 	addi	r2,r2,-1023
    d708:	88e2b03a 	or	r17,r17,r3
    d70c:	000b883a 	mov	r5,zero
    d710:	9085883a 	add	r2,r18,r2
    d714:	2cc8b03a 	or	r4,r5,r19
    d718:	00c003c4 	movi	r3,15
    d71c:	bdacf03a 	xor	r22,r23,r22
    d720:	12c00044 	addi	r11,r2,1
    d724:	19009936 	bltu	r3,r4,d98c <__muldf3+0x340>
    d728:	200890ba 	slli	r4,r4,2
    d72c:	00c00074 	movhi	r3,1
    d730:	18f5d004 	addi	r3,r3,-10432
    d734:	20c9883a 	add	r4,r4,r3
    d738:	20c00017 	ldw	r3,0(r4)
    d73c:	1800683a 	jmp	r3
    d740:	0000d98c 	andi	zero,zero,870
    d744:	0000d7a0 	cmpeqi	zero,zero,862
    d748:	0000d7a0 	cmpeqi	zero,zero,862
    d74c:	0000d79c 	xori	zero,zero,862
    d750:	0000d968 	cmpgeui	zero,zero,869
    d754:	0000d968 	cmpgeui	zero,zero,869
    d758:	0000d950 	cmplti	zero,zero,869
    d75c:	0000d79c 	xori	zero,zero,862
    d760:	0000d968 	cmpgeui	zero,zero,869
    d764:	0000d950 	cmplti	zero,zero,869
    d768:	0000d968 	cmpgeui	zero,zero,869
    d76c:	0000d79c 	xori	zero,zero,862
    d770:	0000d978 	rdprs	zero,zero,869
    d774:	0000d978 	rdprs	zero,zero,869
    d778:	0000d978 	rdprs	zero,zero,869
    d77c:	0000db94 	movui	zero,878
    d780:	2404b03a 	or	r2,r4,r16
    d784:	10006f1e 	bne	r2,zero,d944 <__muldf3+0x2f8>
    d788:	04c00204 	movi	r19,8
    d78c:	0021883a 	mov	r16,zero
    d790:	0029883a 	mov	r20,zero
    d794:	07000084 	movi	fp,2
    d798:	003fcb06 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d79c:	502d883a 	mov	r22,r10
    d7a0:	00800084 	movi	r2,2
    d7a4:	28805726 	beq	r5,r2,d904 <__muldf3+0x2b8>
    d7a8:	008000c4 	movi	r2,3
    d7ac:	28816626 	beq	r5,r2,dd48 <__muldf3+0x6fc>
    d7b0:	00800044 	movi	r2,1
    d7b4:	2881411e 	bne	r5,r2,dcbc <__muldf3+0x670>
    d7b8:	b02b883a 	mov	r21,r22
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	000b883a 	mov	r5,zero
    d7c4:	0029883a 	mov	r20,zero
    d7c8:	1004953a 	slli	r2,r2,20
    d7cc:	a8c03fcc 	andi	r3,r21,255
    d7d0:	04400434 	movhi	r17,16
    d7d4:	8c7fffc4 	addi	r17,r17,-1
    d7d8:	180697fa 	slli	r3,r3,31
    d7dc:	2c4a703a 	and	r5,r5,r17
    d7e0:	288ab03a 	or	r5,r5,r2
    d7e4:	28c6b03a 	or	r3,r5,r3
    d7e8:	a005883a 	mov	r2,r20
    d7ec:	dfc00c17 	ldw	ra,48(sp)
    d7f0:	df000b17 	ldw	fp,44(sp)
    d7f4:	ddc00a17 	ldw	r23,40(sp)
    d7f8:	dd800917 	ldw	r22,36(sp)
    d7fc:	dd400817 	ldw	r21,32(sp)
    d800:	dd000717 	ldw	r20,28(sp)
    d804:	dcc00617 	ldw	r19,24(sp)
    d808:	dc800517 	ldw	r18,20(sp)
    d80c:	dc400417 	ldw	r17,16(sp)
    d810:	dc000317 	ldw	r16,12(sp)
    d814:	dec00d04 	addi	sp,sp,52
    d818:	f800283a 	ret
    d81c:	2404b03a 	or	r2,r4,r16
    d820:	2027883a 	mov	r19,r4
    d824:	10004226 	beq	r2,zero,d930 <__muldf3+0x2e4>
    d828:	8000fc26 	beq	r16,zero,dc1c <__muldf3+0x5d0>
    d82c:	8009883a 	mov	r4,r16
    d830:	d9800215 	stw	r6,8(sp)
    d834:	d9c00015 	stw	r7,0(sp)
    d838:	da400115 	stw	r9,4(sp)
    d83c:	00029b80 	call	29b8 <__clzsi2>
    d840:	d9800217 	ldw	r6,8(sp)
    d844:	d9c00017 	ldw	r7,0(sp)
    d848:	da400117 	ldw	r9,4(sp)
    d84c:	113ffd44 	addi	r4,r2,-11
    d850:	00c00704 	movi	r3,28
    d854:	1900ed16 	blt	r3,r4,dc0c <__muldf3+0x5c0>
    d858:	00c00744 	movi	r3,29
    d85c:	147ffe04 	addi	r17,r2,-8
    d860:	1907c83a 	sub	r3,r3,r4
    d864:	8460983a 	sll	r16,r16,r17
    d868:	98c6d83a 	srl	r3,r19,r3
    d86c:	9c68983a 	sll	r20,r19,r17
    d870:	1c20b03a 	or	r16,r3,r16
    d874:	1080fcc4 	addi	r2,r2,1011
    d878:	00a5c83a 	sub	r18,zero,r2
    d87c:	0027883a 	mov	r19,zero
    d880:	0039883a 	mov	fp,zero
    d884:	003f9006 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d888:	3446b03a 	or	r3,r6,r17
    d88c:	1800261e 	bne	r3,zero,d928 <__muldf3+0x2dc>
    d890:	0023883a 	mov	r17,zero
    d894:	0011883a 	mov	r8,zero
    d898:	01400084 	movi	r5,2
    d89c:	003f9c06 	br	d710 <__alt_data_end+0xff00d710>
    d8a0:	3446b03a 	or	r3,r6,r17
    d8a4:	18001c26 	beq	r3,zero,d918 <__muldf3+0x2cc>
    d8a8:	8800ce26 	beq	r17,zero,dbe4 <__muldf3+0x598>
    d8ac:	8809883a 	mov	r4,r17
    d8b0:	d9800215 	stw	r6,8(sp)
    d8b4:	da400115 	stw	r9,4(sp)
    d8b8:	da800015 	stw	r10,0(sp)
    d8bc:	00029b80 	call	29b8 <__clzsi2>
    d8c0:	d9800217 	ldw	r6,8(sp)
    d8c4:	da400117 	ldw	r9,4(sp)
    d8c8:	da800017 	ldw	r10,0(sp)
    d8cc:	113ffd44 	addi	r4,r2,-11
    d8d0:	00c00704 	movi	r3,28
    d8d4:	1900bf16 	blt	r3,r4,dbd4 <__muldf3+0x588>
    d8d8:	00c00744 	movi	r3,29
    d8dc:	123ffe04 	addi	r8,r2,-8
    d8e0:	1907c83a 	sub	r3,r3,r4
    d8e4:	8a22983a 	sll	r17,r17,r8
    d8e8:	30c6d83a 	srl	r3,r6,r3
    d8ec:	3210983a 	sll	r8,r6,r8
    d8f0:	1c62b03a 	or	r17,r3,r17
    d8f4:	1080fcc4 	addi	r2,r2,1011
    d8f8:	0085c83a 	sub	r2,zero,r2
    d8fc:	000b883a 	mov	r5,zero
    d900:	003f8306 	br	d710 <__alt_data_end+0xff00d710>
    d904:	b02b883a 	mov	r21,r22
    d908:	0081ffc4 	movi	r2,2047
    d90c:	000b883a 	mov	r5,zero
    d910:	0029883a 	mov	r20,zero
    d914:	003fac06 	br	d7c8 <__alt_data_end+0xff00d7c8>
    d918:	0023883a 	mov	r17,zero
    d91c:	0011883a 	mov	r8,zero
    d920:	01400044 	movi	r5,1
    d924:	003f7a06 	br	d710 <__alt_data_end+0xff00d710>
    d928:	014000c4 	movi	r5,3
    d92c:	003f7806 	br	d710 <__alt_data_end+0xff00d710>
    d930:	04c00104 	movi	r19,4
    d934:	0021883a 	mov	r16,zero
    d938:	0029883a 	mov	r20,zero
    d93c:	07000044 	movi	fp,1
    d940:	003f6106 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d944:	04c00304 	movi	r19,12
    d948:	070000c4 	movi	fp,3
    d94c:	003f5e06 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d950:	01400434 	movhi	r5,16
    d954:	002b883a 	mov	r21,zero
    d958:	297fffc4 	addi	r5,r5,-1
    d95c:	053fffc4 	movi	r20,-1
    d960:	0081ffc4 	movi	r2,2047
    d964:	003f9806 	br	d7c8 <__alt_data_end+0xff00d7c8>
    d968:	8023883a 	mov	r17,r16
    d96c:	a011883a 	mov	r8,r20
    d970:	e00b883a 	mov	r5,fp
    d974:	003f8a06 	br	d7a0 <__alt_data_end+0xff00d7a0>
    d978:	8023883a 	mov	r17,r16
    d97c:	a011883a 	mov	r8,r20
    d980:	482d883a 	mov	r22,r9
    d984:	e00b883a 	mov	r5,fp
    d988:	003f8506 	br	d7a0 <__alt_data_end+0xff00d7a0>
    d98c:	a00ad43a 	srli	r5,r20,16
    d990:	401ad43a 	srli	r13,r8,16
    d994:	a53fffcc 	andi	r20,r20,65535
    d998:	423fffcc 	andi	r8,r8,65535
    d99c:	4519383a 	mul	r12,r8,r20
    d9a0:	4147383a 	mul	r3,r8,r5
    d9a4:	6d09383a 	mul	r4,r13,r20
    d9a8:	600cd43a 	srli	r6,r12,16
    d9ac:	2b5d383a 	mul	r14,r5,r13
    d9b0:	20c9883a 	add	r4,r4,r3
    d9b4:	310d883a 	add	r6,r6,r4
    d9b8:	30c0022e 	bgeu	r6,r3,d9c4 <__muldf3+0x378>
    d9bc:	00c00074 	movhi	r3,1
    d9c0:	70dd883a 	add	r14,r14,r3
    d9c4:	8826d43a 	srli	r19,r17,16
    d9c8:	8bffffcc 	andi	r15,r17,65535
    d9cc:	7d23383a 	mul	r17,r15,r20
    d9d0:	7949383a 	mul	r4,r15,r5
    d9d4:	9d29383a 	mul	r20,r19,r20
    d9d8:	8814d43a 	srli	r10,r17,16
    d9dc:	3012943a 	slli	r9,r6,16
    d9e0:	a129883a 	add	r20,r20,r4
    d9e4:	633fffcc 	andi	r12,r12,65535
    d9e8:	5515883a 	add	r10,r10,r20
    d9ec:	3006d43a 	srli	r3,r6,16
    d9f0:	4b13883a 	add	r9,r9,r12
    d9f4:	2ccb383a 	mul	r5,r5,r19
    d9f8:	5100022e 	bgeu	r10,r4,da04 <__muldf3+0x3b8>
    d9fc:	01000074 	movhi	r4,1
    da00:	290b883a 	add	r5,r5,r4
    da04:	802ad43a 	srli	r21,r16,16
    da08:	843fffcc 	andi	r16,r16,65535
    da0c:	440d383a 	mul	r6,r8,r16
    da10:	4565383a 	mul	r18,r8,r21
    da14:	8349383a 	mul	r4,r16,r13
    da18:	500e943a 	slli	r7,r10,16
    da1c:	3010d43a 	srli	r8,r6,16
    da20:	5028d43a 	srli	r20,r10,16
    da24:	2489883a 	add	r4,r4,r18
    da28:	8abfffcc 	andi	r10,r17,65535
    da2c:	3a95883a 	add	r10,r7,r10
    da30:	4119883a 	add	r12,r8,r4
    da34:	a169883a 	add	r20,r20,r5
    da38:	1a87883a 	add	r3,r3,r10
    da3c:	6d5b383a 	mul	r13,r13,r21
    da40:	6480022e 	bgeu	r12,r18,da4c <__muldf3+0x400>
    da44:	01000074 	movhi	r4,1
    da48:	691b883a 	add	r13,r13,r4
    da4c:	7c25383a 	mul	r18,r15,r16
    da50:	7d4b383a 	mul	r5,r15,r21
    da54:	84cf383a 	mul	r7,r16,r19
    da58:	901ed43a 	srli	r15,r18,16
    da5c:	6008d43a 	srli	r4,r12,16
    da60:	6010943a 	slli	r8,r12,16
    da64:	394f883a 	add	r7,r7,r5
    da68:	333fffcc 	andi	r12,r6,65535
    da6c:	79df883a 	add	r15,r15,r7
    da70:	235b883a 	add	r13,r4,r13
    da74:	9d63383a 	mul	r17,r19,r21
    da78:	4309883a 	add	r4,r8,r12
    da7c:	7940022e 	bgeu	r15,r5,da88 <__muldf3+0x43c>
    da80:	01400074 	movhi	r5,1
    da84:	8963883a 	add	r17,r17,r5
    da88:	780a943a 	slli	r5,r15,16
    da8c:	91bfffcc 	andi	r6,r18,65535
    da90:	70c7883a 	add	r3,r14,r3
    da94:	298d883a 	add	r6,r5,r6
    da98:	1a8f803a 	cmpltu	r7,r3,r10
    da9c:	350b883a 	add	r5,r6,r20
    daa0:	20c7883a 	add	r3,r4,r3
    daa4:	3955883a 	add	r10,r7,r5
    daa8:	1909803a 	cmpltu	r4,r3,r4
    daac:	6a91883a 	add	r8,r13,r10
    dab0:	780cd43a 	srli	r6,r15,16
    dab4:	2219883a 	add	r12,r4,r8
    dab8:	2d0b803a 	cmpltu	r5,r5,r20
    dabc:	51cf803a 	cmpltu	r7,r10,r7
    dac0:	29ceb03a 	or	r7,r5,r7
    dac4:	4351803a 	cmpltu	r8,r8,r13
    dac8:	610b803a 	cmpltu	r5,r12,r4
    dacc:	4148b03a 	or	r4,r8,r5
    dad0:	398f883a 	add	r7,r7,r6
    dad4:	3909883a 	add	r4,r7,r4
    dad8:	1810927a 	slli	r8,r3,9
    dadc:	2449883a 	add	r4,r4,r17
    dae0:	2008927a 	slli	r4,r4,9
    dae4:	6022d5fa 	srli	r17,r12,23
    dae8:	1806d5fa 	srli	r3,r3,23
    daec:	4252b03a 	or	r9,r8,r9
    daf0:	600a927a 	slli	r5,r12,9
    daf4:	4810c03a 	cmpne	r8,r9,zero
    daf8:	2462b03a 	or	r17,r4,r17
    dafc:	40c6b03a 	or	r3,r8,r3
    db00:	8900402c 	andhi	r4,r17,256
    db04:	1950b03a 	or	r8,r3,r5
    db08:	20000726 	beq	r4,zero,db28 <__muldf3+0x4dc>
    db0c:	4006d07a 	srli	r3,r8,1
    db10:	880497fa 	slli	r2,r17,31
    db14:	4200004c 	andi	r8,r8,1
    db18:	8822d07a 	srli	r17,r17,1
    db1c:	1a10b03a 	or	r8,r3,r8
    db20:	1210b03a 	or	r8,r2,r8
    db24:	5805883a 	mov	r2,r11
    db28:	1140ffc4 	addi	r5,r2,1023
    db2c:	0140440e 	bge	zero,r5,dc40 <__muldf3+0x5f4>
    db30:	40c001cc 	andi	r3,r8,7
    db34:	18000726 	beq	r3,zero,db54 <__muldf3+0x508>
    db38:	40c003cc 	andi	r3,r8,15
    db3c:	01000104 	movi	r4,4
    db40:	19000426 	beq	r3,r4,db54 <__muldf3+0x508>
    db44:	4107883a 	add	r3,r8,r4
    db48:	1a11803a 	cmpltu	r8,r3,r8
    db4c:	8a23883a 	add	r17,r17,r8
    db50:	1811883a 	mov	r8,r3
    db54:	88c0402c 	andhi	r3,r17,256
    db58:	18000426 	beq	r3,zero,db6c <__muldf3+0x520>
    db5c:	11410004 	addi	r5,r2,1024
    db60:	00bfc034 	movhi	r2,65280
    db64:	10bfffc4 	addi	r2,r2,-1
    db68:	88a2703a 	and	r17,r17,r2
    db6c:	0081ff84 	movi	r2,2046
    db70:	117f6416 	blt	r2,r5,d904 <__alt_data_end+0xff00d904>
    db74:	8828977a 	slli	r20,r17,29
    db78:	4010d0fa 	srli	r8,r8,3
    db7c:	8822927a 	slli	r17,r17,9
    db80:	2881ffcc 	andi	r2,r5,2047
    db84:	a228b03a 	or	r20,r20,r8
    db88:	880ad33a 	srli	r5,r17,12
    db8c:	b02b883a 	mov	r21,r22
    db90:	003f0d06 	br	d7c8 <__alt_data_end+0xff00d7c8>
    db94:	8080022c 	andhi	r2,r16,8
    db98:	10000926 	beq	r2,zero,dbc0 <__muldf3+0x574>
    db9c:	8880022c 	andhi	r2,r17,8
    dba0:	1000071e 	bne	r2,zero,dbc0 <__muldf3+0x574>
    dba4:	00800434 	movhi	r2,16
    dba8:	89400234 	orhi	r5,r17,8
    dbac:	10bfffc4 	addi	r2,r2,-1
    dbb0:	b82b883a 	mov	r21,r23
    dbb4:	288a703a 	and	r5,r5,r2
    dbb8:	4029883a 	mov	r20,r8
    dbbc:	003f6806 	br	d960 <__alt_data_end+0xff00d960>
    dbc0:	00800434 	movhi	r2,16
    dbc4:	81400234 	orhi	r5,r16,8
    dbc8:	10bfffc4 	addi	r2,r2,-1
    dbcc:	288a703a 	and	r5,r5,r2
    dbd0:	003f6306 	br	d960 <__alt_data_end+0xff00d960>
    dbd4:	147ff604 	addi	r17,r2,-40
    dbd8:	3462983a 	sll	r17,r6,r17
    dbdc:	0011883a 	mov	r8,zero
    dbe0:	003f4406 	br	d8f4 <__alt_data_end+0xff00d8f4>
    dbe4:	3009883a 	mov	r4,r6
    dbe8:	d9800215 	stw	r6,8(sp)
    dbec:	da400115 	stw	r9,4(sp)
    dbf0:	da800015 	stw	r10,0(sp)
    dbf4:	00029b80 	call	29b8 <__clzsi2>
    dbf8:	10800804 	addi	r2,r2,32
    dbfc:	da800017 	ldw	r10,0(sp)
    dc00:	da400117 	ldw	r9,4(sp)
    dc04:	d9800217 	ldw	r6,8(sp)
    dc08:	003f3006 	br	d8cc <__alt_data_end+0xff00d8cc>
    dc0c:	143ff604 	addi	r16,r2,-40
    dc10:	9c20983a 	sll	r16,r19,r16
    dc14:	0029883a 	mov	r20,zero
    dc18:	003f1606 	br	d874 <__alt_data_end+0xff00d874>
    dc1c:	d9800215 	stw	r6,8(sp)
    dc20:	d9c00015 	stw	r7,0(sp)
    dc24:	da400115 	stw	r9,4(sp)
    dc28:	00029b80 	call	29b8 <__clzsi2>
    dc2c:	10800804 	addi	r2,r2,32
    dc30:	da400117 	ldw	r9,4(sp)
    dc34:	d9c00017 	ldw	r7,0(sp)
    dc38:	d9800217 	ldw	r6,8(sp)
    dc3c:	003f0306 	br	d84c <__alt_data_end+0xff00d84c>
    dc40:	00c00044 	movi	r3,1
    dc44:	1947c83a 	sub	r3,r3,r5
    dc48:	00800e04 	movi	r2,56
    dc4c:	10feda16 	blt	r2,r3,d7b8 <__alt_data_end+0xff00d7b8>
    dc50:	008007c4 	movi	r2,31
    dc54:	10c01b16 	blt	r2,r3,dcc4 <__muldf3+0x678>
    dc58:	00800804 	movi	r2,32
    dc5c:	10c5c83a 	sub	r2,r2,r3
    dc60:	888a983a 	sll	r5,r17,r2
    dc64:	40c8d83a 	srl	r4,r8,r3
    dc68:	4084983a 	sll	r2,r8,r2
    dc6c:	88e2d83a 	srl	r17,r17,r3
    dc70:	2906b03a 	or	r3,r5,r4
    dc74:	1004c03a 	cmpne	r2,r2,zero
    dc78:	1886b03a 	or	r3,r3,r2
    dc7c:	188001cc 	andi	r2,r3,7
    dc80:	10000726 	beq	r2,zero,dca0 <__muldf3+0x654>
    dc84:	188003cc 	andi	r2,r3,15
    dc88:	01000104 	movi	r4,4
    dc8c:	11000426 	beq	r2,r4,dca0 <__muldf3+0x654>
    dc90:	1805883a 	mov	r2,r3
    dc94:	10c00104 	addi	r3,r2,4
    dc98:	1885803a 	cmpltu	r2,r3,r2
    dc9c:	88a3883a 	add	r17,r17,r2
    dca0:	8880202c 	andhi	r2,r17,128
    dca4:	10001c26 	beq	r2,zero,dd18 <__muldf3+0x6cc>
    dca8:	b02b883a 	mov	r21,r22
    dcac:	00800044 	movi	r2,1
    dcb0:	000b883a 	mov	r5,zero
    dcb4:	0029883a 	mov	r20,zero
    dcb8:	003ec306 	br	d7c8 <__alt_data_end+0xff00d7c8>
    dcbc:	5805883a 	mov	r2,r11
    dcc0:	003f9906 	br	db28 <__alt_data_end+0xff00db28>
    dcc4:	00bff844 	movi	r2,-31
    dcc8:	1145c83a 	sub	r2,r2,r5
    dccc:	8888d83a 	srl	r4,r17,r2
    dcd0:	00800804 	movi	r2,32
    dcd4:	18801a26 	beq	r3,r2,dd40 <__muldf3+0x6f4>
    dcd8:	00801004 	movi	r2,64
    dcdc:	10c5c83a 	sub	r2,r2,r3
    dce0:	8884983a 	sll	r2,r17,r2
    dce4:	1204b03a 	or	r2,r2,r8
    dce8:	1004c03a 	cmpne	r2,r2,zero
    dcec:	2084b03a 	or	r2,r4,r2
    dcf0:	144001cc 	andi	r17,r2,7
    dcf4:	88000d1e 	bne	r17,zero,dd2c <__muldf3+0x6e0>
    dcf8:	000b883a 	mov	r5,zero
    dcfc:	1028d0fa 	srli	r20,r2,3
    dd00:	b02b883a 	mov	r21,r22
    dd04:	0005883a 	mov	r2,zero
    dd08:	a468b03a 	or	r20,r20,r17
    dd0c:	003eae06 	br	d7c8 <__alt_data_end+0xff00d7c8>
    dd10:	1007883a 	mov	r3,r2
    dd14:	0023883a 	mov	r17,zero
    dd18:	880a927a 	slli	r5,r17,9
    dd1c:	1805883a 	mov	r2,r3
    dd20:	8822977a 	slli	r17,r17,29
    dd24:	280ad33a 	srli	r5,r5,12
    dd28:	003ff406 	br	dcfc <__alt_data_end+0xff00dcfc>
    dd2c:	10c003cc 	andi	r3,r2,15
    dd30:	01000104 	movi	r4,4
    dd34:	193ff626 	beq	r3,r4,dd10 <__alt_data_end+0xff00dd10>
    dd38:	0023883a 	mov	r17,zero
    dd3c:	003fd506 	br	dc94 <__alt_data_end+0xff00dc94>
    dd40:	0005883a 	mov	r2,zero
    dd44:	003fe706 	br	dce4 <__alt_data_end+0xff00dce4>
    dd48:	00800434 	movhi	r2,16
    dd4c:	89400234 	orhi	r5,r17,8
    dd50:	10bfffc4 	addi	r2,r2,-1
    dd54:	b02b883a 	mov	r21,r22
    dd58:	288a703a 	and	r5,r5,r2
    dd5c:	4029883a 	mov	r20,r8
    dd60:	003eff06 	br	d960 <__alt_data_end+0xff00d960>

0000dd64 <__subdf3>:
    dd64:	02000434 	movhi	r8,16
    dd68:	423fffc4 	addi	r8,r8,-1
    dd6c:	defffb04 	addi	sp,sp,-20
    dd70:	2a14703a 	and	r10,r5,r8
    dd74:	3812d53a 	srli	r9,r7,20
    dd78:	3a10703a 	and	r8,r7,r8
    dd7c:	2006d77a 	srli	r3,r4,29
    dd80:	3004d77a 	srli	r2,r6,29
    dd84:	dc000015 	stw	r16,0(sp)
    dd88:	501490fa 	slli	r10,r10,3
    dd8c:	2820d53a 	srli	r16,r5,20
    dd90:	401090fa 	slli	r8,r8,3
    dd94:	dc800215 	stw	r18,8(sp)
    dd98:	dc400115 	stw	r17,4(sp)
    dd9c:	dfc00415 	stw	ra,16(sp)
    dda0:	202290fa 	slli	r17,r4,3
    dda4:	dcc00315 	stw	r19,12(sp)
    dda8:	4a41ffcc 	andi	r9,r9,2047
    ddac:	0101ffc4 	movi	r4,2047
    ddb0:	2824d7fa 	srli	r18,r5,31
    ddb4:	8401ffcc 	andi	r16,r16,2047
    ddb8:	50c6b03a 	or	r3,r10,r3
    ddbc:	380ed7fa 	srli	r7,r7,31
    ddc0:	408ab03a 	or	r5,r8,r2
    ddc4:	300c90fa 	slli	r6,r6,3
    ddc8:	49009626 	beq	r9,r4,e024 <__subdf3+0x2c0>
    ddcc:	39c0005c 	xori	r7,r7,1
    ddd0:	8245c83a 	sub	r2,r16,r9
    ddd4:	3c807426 	beq	r7,r18,dfa8 <__subdf3+0x244>
    ddd8:	0080af0e 	bge	zero,r2,e098 <__subdf3+0x334>
    dddc:	48002a1e 	bne	r9,zero,de88 <__subdf3+0x124>
    dde0:	2988b03a 	or	r4,r5,r6
    dde4:	20009a1e 	bne	r4,zero,e050 <__subdf3+0x2ec>
    dde8:	888001cc 	andi	r2,r17,7
    ddec:	10000726 	beq	r2,zero,de0c <__subdf3+0xa8>
    ddf0:	888003cc 	andi	r2,r17,15
    ddf4:	01000104 	movi	r4,4
    ddf8:	11000426 	beq	r2,r4,de0c <__subdf3+0xa8>
    ddfc:	890b883a 	add	r5,r17,r4
    de00:	2c63803a 	cmpltu	r17,r5,r17
    de04:	1c47883a 	add	r3,r3,r17
    de08:	2823883a 	mov	r17,r5
    de0c:	1880202c 	andhi	r2,r3,128
    de10:	10005926 	beq	r2,zero,df78 <__subdf3+0x214>
    de14:	84000044 	addi	r16,r16,1
    de18:	0081ffc4 	movi	r2,2047
    de1c:	8080be26 	beq	r16,r2,e118 <__subdf3+0x3b4>
    de20:	017fe034 	movhi	r5,65408
    de24:	297fffc4 	addi	r5,r5,-1
    de28:	1946703a 	and	r3,r3,r5
    de2c:	1804977a 	slli	r2,r3,29
    de30:	1806927a 	slli	r3,r3,9
    de34:	8822d0fa 	srli	r17,r17,3
    de38:	8401ffcc 	andi	r16,r16,2047
    de3c:	180ad33a 	srli	r5,r3,12
    de40:	9100004c 	andi	r4,r18,1
    de44:	1444b03a 	or	r2,r2,r17
    de48:	80c1ffcc 	andi	r3,r16,2047
    de4c:	1820953a 	slli	r16,r3,20
    de50:	20c03fcc 	andi	r3,r4,255
    de54:	180897fa 	slli	r4,r3,31
    de58:	00c00434 	movhi	r3,16
    de5c:	18ffffc4 	addi	r3,r3,-1
    de60:	28c6703a 	and	r3,r5,r3
    de64:	1c06b03a 	or	r3,r3,r16
    de68:	1906b03a 	or	r3,r3,r4
    de6c:	dfc00417 	ldw	ra,16(sp)
    de70:	dcc00317 	ldw	r19,12(sp)
    de74:	dc800217 	ldw	r18,8(sp)
    de78:	dc400117 	ldw	r17,4(sp)
    de7c:	dc000017 	ldw	r16,0(sp)
    de80:	dec00504 	addi	sp,sp,20
    de84:	f800283a 	ret
    de88:	0101ffc4 	movi	r4,2047
    de8c:	813fd626 	beq	r16,r4,dde8 <__alt_data_end+0xff00dde8>
    de90:	29402034 	orhi	r5,r5,128
    de94:	01000e04 	movi	r4,56
    de98:	2080a316 	blt	r4,r2,e128 <__subdf3+0x3c4>
    de9c:	010007c4 	movi	r4,31
    dea0:	2080c616 	blt	r4,r2,e1bc <__subdf3+0x458>
    dea4:	01000804 	movi	r4,32
    dea8:	2089c83a 	sub	r4,r4,r2
    deac:	2910983a 	sll	r8,r5,r4
    deb0:	308ed83a 	srl	r7,r6,r2
    deb4:	3108983a 	sll	r4,r6,r4
    deb8:	2884d83a 	srl	r2,r5,r2
    debc:	41ccb03a 	or	r6,r8,r7
    dec0:	2008c03a 	cmpne	r4,r4,zero
    dec4:	310cb03a 	or	r6,r6,r4
    dec8:	898dc83a 	sub	r6,r17,r6
    decc:	89a3803a 	cmpltu	r17,r17,r6
    ded0:	1887c83a 	sub	r3,r3,r2
    ded4:	1c47c83a 	sub	r3,r3,r17
    ded8:	3023883a 	mov	r17,r6
    dedc:	1880202c 	andhi	r2,r3,128
    dee0:	10002326 	beq	r2,zero,df70 <__subdf3+0x20c>
    dee4:	04c02034 	movhi	r19,128
    dee8:	9cffffc4 	addi	r19,r19,-1
    deec:	1ce6703a 	and	r19,r3,r19
    def0:	98007a26 	beq	r19,zero,e0dc <__subdf3+0x378>
    def4:	9809883a 	mov	r4,r19
    def8:	00029b80 	call	29b8 <__clzsi2>
    defc:	113ffe04 	addi	r4,r2,-8
    df00:	00c007c4 	movi	r3,31
    df04:	19007b16 	blt	r3,r4,e0f4 <__subdf3+0x390>
    df08:	00800804 	movi	r2,32
    df0c:	1105c83a 	sub	r2,r2,r4
    df10:	8884d83a 	srl	r2,r17,r2
    df14:	9906983a 	sll	r3,r19,r4
    df18:	8922983a 	sll	r17,r17,r4
    df1c:	10c4b03a 	or	r2,r2,r3
    df20:	24007816 	blt	r4,r16,e104 <__subdf3+0x3a0>
    df24:	2421c83a 	sub	r16,r4,r16
    df28:	80c00044 	addi	r3,r16,1
    df2c:	010007c4 	movi	r4,31
    df30:	20c09516 	blt	r4,r3,e188 <__subdf3+0x424>
    df34:	01400804 	movi	r5,32
    df38:	28cbc83a 	sub	r5,r5,r3
    df3c:	88c8d83a 	srl	r4,r17,r3
    df40:	8962983a 	sll	r17,r17,r5
    df44:	114a983a 	sll	r5,r2,r5
    df48:	10c6d83a 	srl	r3,r2,r3
    df4c:	8804c03a 	cmpne	r2,r17,zero
    df50:	290ab03a 	or	r5,r5,r4
    df54:	28a2b03a 	or	r17,r5,r2
    df58:	0021883a 	mov	r16,zero
    df5c:	003fa206 	br	dde8 <__alt_data_end+0xff00dde8>
    df60:	2090b03a 	or	r8,r4,r2
    df64:	40018e26 	beq	r8,zero,e5a0 <__subdf3+0x83c>
    df68:	1007883a 	mov	r3,r2
    df6c:	2023883a 	mov	r17,r4
    df70:	888001cc 	andi	r2,r17,7
    df74:	103f9e1e 	bne	r2,zero,ddf0 <__alt_data_end+0xff00ddf0>
    df78:	1804977a 	slli	r2,r3,29
    df7c:	8822d0fa 	srli	r17,r17,3
    df80:	1810d0fa 	srli	r8,r3,3
    df84:	9100004c 	andi	r4,r18,1
    df88:	1444b03a 	or	r2,r2,r17
    df8c:	00c1ffc4 	movi	r3,2047
    df90:	80c02826 	beq	r16,r3,e034 <__subdf3+0x2d0>
    df94:	01400434 	movhi	r5,16
    df98:	297fffc4 	addi	r5,r5,-1
    df9c:	80e0703a 	and	r16,r16,r3
    dfa0:	414a703a 	and	r5,r8,r5
    dfa4:	003fa806 	br	de48 <__alt_data_end+0xff00de48>
    dfa8:	0080630e 	bge	zero,r2,e138 <__subdf3+0x3d4>
    dfac:	48003026 	beq	r9,zero,e070 <__subdf3+0x30c>
    dfb0:	0101ffc4 	movi	r4,2047
    dfb4:	813f8c26 	beq	r16,r4,dde8 <__alt_data_end+0xff00dde8>
    dfb8:	29402034 	orhi	r5,r5,128
    dfbc:	01000e04 	movi	r4,56
    dfc0:	2080a90e 	bge	r4,r2,e268 <__subdf3+0x504>
    dfc4:	298cb03a 	or	r6,r5,r6
    dfc8:	3012c03a 	cmpne	r9,r6,zero
    dfcc:	0005883a 	mov	r2,zero
    dfd0:	4c53883a 	add	r9,r9,r17
    dfd4:	4c63803a 	cmpltu	r17,r9,r17
    dfd8:	10c7883a 	add	r3,r2,r3
    dfdc:	88c7883a 	add	r3,r17,r3
    dfe0:	4823883a 	mov	r17,r9
    dfe4:	1880202c 	andhi	r2,r3,128
    dfe8:	1000d026 	beq	r2,zero,e32c <__subdf3+0x5c8>
    dfec:	84000044 	addi	r16,r16,1
    dff0:	0081ffc4 	movi	r2,2047
    dff4:	8080fe26 	beq	r16,r2,e3f0 <__subdf3+0x68c>
    dff8:	00bfe034 	movhi	r2,65408
    dffc:	10bfffc4 	addi	r2,r2,-1
    e000:	1886703a 	and	r3,r3,r2
    e004:	880ad07a 	srli	r5,r17,1
    e008:	180497fa 	slli	r2,r3,31
    e00c:	8900004c 	andi	r4,r17,1
    e010:	2922b03a 	or	r17,r5,r4
    e014:	1806d07a 	srli	r3,r3,1
    e018:	1462b03a 	or	r17,r2,r17
    e01c:	3825883a 	mov	r18,r7
    e020:	003f7106 	br	dde8 <__alt_data_end+0xff00dde8>
    e024:	2984b03a 	or	r2,r5,r6
    e028:	103f6826 	beq	r2,zero,ddcc <__alt_data_end+0xff00ddcc>
    e02c:	39c03fcc 	andi	r7,r7,255
    e030:	003f6706 	br	ddd0 <__alt_data_end+0xff00ddd0>
    e034:	4086b03a 	or	r3,r8,r2
    e038:	18015226 	beq	r3,zero,e584 <__subdf3+0x820>
    e03c:	00c00434 	movhi	r3,16
    e040:	41400234 	orhi	r5,r8,8
    e044:	18ffffc4 	addi	r3,r3,-1
    e048:	28ca703a 	and	r5,r5,r3
    e04c:	003f7e06 	br	de48 <__alt_data_end+0xff00de48>
    e050:	10bfffc4 	addi	r2,r2,-1
    e054:	1000491e 	bne	r2,zero,e17c <__subdf3+0x418>
    e058:	898fc83a 	sub	r7,r17,r6
    e05c:	89e3803a 	cmpltu	r17,r17,r7
    e060:	1947c83a 	sub	r3,r3,r5
    e064:	1c47c83a 	sub	r3,r3,r17
    e068:	3823883a 	mov	r17,r7
    e06c:	003f9b06 	br	dedc <__alt_data_end+0xff00dedc>
    e070:	2988b03a 	or	r4,r5,r6
    e074:	203f5c26 	beq	r4,zero,dde8 <__alt_data_end+0xff00dde8>
    e078:	10bfffc4 	addi	r2,r2,-1
    e07c:	1000931e 	bne	r2,zero,e2cc <__subdf3+0x568>
    e080:	898d883a 	add	r6,r17,r6
    e084:	3463803a 	cmpltu	r17,r6,r17
    e088:	1947883a 	add	r3,r3,r5
    e08c:	88c7883a 	add	r3,r17,r3
    e090:	3023883a 	mov	r17,r6
    e094:	003fd306 	br	dfe4 <__alt_data_end+0xff00dfe4>
    e098:	1000541e 	bne	r2,zero,e1ec <__subdf3+0x488>
    e09c:	80800044 	addi	r2,r16,1
    e0a0:	1081ffcc 	andi	r2,r2,2047
    e0a4:	01000044 	movi	r4,1
    e0a8:	2080a20e 	bge	r4,r2,e334 <__subdf3+0x5d0>
    e0ac:	8989c83a 	sub	r4,r17,r6
    e0b0:	8905803a 	cmpltu	r2,r17,r4
    e0b4:	1967c83a 	sub	r19,r3,r5
    e0b8:	98a7c83a 	sub	r19,r19,r2
    e0bc:	9880202c 	andhi	r2,r19,128
    e0c0:	10006326 	beq	r2,zero,e250 <__subdf3+0x4ec>
    e0c4:	3463c83a 	sub	r17,r6,r17
    e0c8:	28c7c83a 	sub	r3,r5,r3
    e0cc:	344d803a 	cmpltu	r6,r6,r17
    e0d0:	19a7c83a 	sub	r19,r3,r6
    e0d4:	3825883a 	mov	r18,r7
    e0d8:	983f861e 	bne	r19,zero,def4 <__alt_data_end+0xff00def4>
    e0dc:	8809883a 	mov	r4,r17
    e0e0:	00029b80 	call	29b8 <__clzsi2>
    e0e4:	10800804 	addi	r2,r2,32
    e0e8:	113ffe04 	addi	r4,r2,-8
    e0ec:	00c007c4 	movi	r3,31
    e0f0:	193f850e 	bge	r3,r4,df08 <__alt_data_end+0xff00df08>
    e0f4:	10bff604 	addi	r2,r2,-40
    e0f8:	8884983a 	sll	r2,r17,r2
    e0fc:	0023883a 	mov	r17,zero
    e100:	243f880e 	bge	r4,r16,df24 <__alt_data_end+0xff00df24>
    e104:	00ffe034 	movhi	r3,65408
    e108:	18ffffc4 	addi	r3,r3,-1
    e10c:	8121c83a 	sub	r16,r16,r4
    e110:	10c6703a 	and	r3,r2,r3
    e114:	003f3406 	br	dde8 <__alt_data_end+0xff00dde8>
    e118:	9100004c 	andi	r4,r18,1
    e11c:	000b883a 	mov	r5,zero
    e120:	0005883a 	mov	r2,zero
    e124:	003f4806 	br	de48 <__alt_data_end+0xff00de48>
    e128:	298cb03a 	or	r6,r5,r6
    e12c:	300cc03a 	cmpne	r6,r6,zero
    e130:	0005883a 	mov	r2,zero
    e134:	003f6406 	br	dec8 <__alt_data_end+0xff00dec8>
    e138:	10009a1e 	bne	r2,zero,e3a4 <__subdf3+0x640>
    e13c:	82400044 	addi	r9,r16,1
    e140:	4881ffcc 	andi	r2,r9,2047
    e144:	02800044 	movi	r10,1
    e148:	5080670e 	bge	r10,r2,e2e8 <__subdf3+0x584>
    e14c:	0081ffc4 	movi	r2,2047
    e150:	4880af26 	beq	r9,r2,e410 <__subdf3+0x6ac>
    e154:	898d883a 	add	r6,r17,r6
    e158:	1945883a 	add	r2,r3,r5
    e15c:	3447803a 	cmpltu	r3,r6,r17
    e160:	1887883a 	add	r3,r3,r2
    e164:	182297fa 	slli	r17,r3,31
    e168:	300cd07a 	srli	r6,r6,1
    e16c:	1806d07a 	srli	r3,r3,1
    e170:	4821883a 	mov	r16,r9
    e174:	89a2b03a 	or	r17,r17,r6
    e178:	003f1b06 	br	dde8 <__alt_data_end+0xff00dde8>
    e17c:	0101ffc4 	movi	r4,2047
    e180:	813f441e 	bne	r16,r4,de94 <__alt_data_end+0xff00de94>
    e184:	003f1806 	br	dde8 <__alt_data_end+0xff00dde8>
    e188:	843ff844 	addi	r16,r16,-31
    e18c:	01400804 	movi	r5,32
    e190:	1408d83a 	srl	r4,r2,r16
    e194:	19405026 	beq	r3,r5,e2d8 <__subdf3+0x574>
    e198:	01401004 	movi	r5,64
    e19c:	28c7c83a 	sub	r3,r5,r3
    e1a0:	10c4983a 	sll	r2,r2,r3
    e1a4:	88a2b03a 	or	r17,r17,r2
    e1a8:	8822c03a 	cmpne	r17,r17,zero
    e1ac:	2462b03a 	or	r17,r4,r17
    e1b0:	0007883a 	mov	r3,zero
    e1b4:	0021883a 	mov	r16,zero
    e1b8:	003f6d06 	br	df70 <__alt_data_end+0xff00df70>
    e1bc:	11fff804 	addi	r7,r2,-32
    e1c0:	01000804 	movi	r4,32
    e1c4:	29ced83a 	srl	r7,r5,r7
    e1c8:	11004526 	beq	r2,r4,e2e0 <__subdf3+0x57c>
    e1cc:	01001004 	movi	r4,64
    e1d0:	2089c83a 	sub	r4,r4,r2
    e1d4:	2904983a 	sll	r2,r5,r4
    e1d8:	118cb03a 	or	r6,r2,r6
    e1dc:	300cc03a 	cmpne	r6,r6,zero
    e1e0:	398cb03a 	or	r6,r7,r6
    e1e4:	0005883a 	mov	r2,zero
    e1e8:	003f3706 	br	dec8 <__alt_data_end+0xff00dec8>
    e1ec:	80002a26 	beq	r16,zero,e298 <__subdf3+0x534>
    e1f0:	0101ffc4 	movi	r4,2047
    e1f4:	49006626 	beq	r9,r4,e390 <__subdf3+0x62c>
    e1f8:	0085c83a 	sub	r2,zero,r2
    e1fc:	18c02034 	orhi	r3,r3,128
    e200:	01000e04 	movi	r4,56
    e204:	20807e16 	blt	r4,r2,e400 <__subdf3+0x69c>
    e208:	010007c4 	movi	r4,31
    e20c:	2080e716 	blt	r4,r2,e5ac <__subdf3+0x848>
    e210:	01000804 	movi	r4,32
    e214:	2089c83a 	sub	r4,r4,r2
    e218:	1914983a 	sll	r10,r3,r4
    e21c:	8890d83a 	srl	r8,r17,r2
    e220:	8908983a 	sll	r4,r17,r4
    e224:	1884d83a 	srl	r2,r3,r2
    e228:	5222b03a 	or	r17,r10,r8
    e22c:	2006c03a 	cmpne	r3,r4,zero
    e230:	88e2b03a 	or	r17,r17,r3
    e234:	3463c83a 	sub	r17,r6,r17
    e238:	2885c83a 	sub	r2,r5,r2
    e23c:	344d803a 	cmpltu	r6,r6,r17
    e240:	1187c83a 	sub	r3,r2,r6
    e244:	4821883a 	mov	r16,r9
    e248:	3825883a 	mov	r18,r7
    e24c:	003f2306 	br	dedc <__alt_data_end+0xff00dedc>
    e250:	24d0b03a 	or	r8,r4,r19
    e254:	40001b1e 	bne	r8,zero,e2c4 <__subdf3+0x560>
    e258:	0005883a 	mov	r2,zero
    e25c:	0009883a 	mov	r4,zero
    e260:	0021883a 	mov	r16,zero
    e264:	003f4906 	br	df8c <__alt_data_end+0xff00df8c>
    e268:	010007c4 	movi	r4,31
    e26c:	20803a16 	blt	r4,r2,e358 <__subdf3+0x5f4>
    e270:	01000804 	movi	r4,32
    e274:	2089c83a 	sub	r4,r4,r2
    e278:	2912983a 	sll	r9,r5,r4
    e27c:	3090d83a 	srl	r8,r6,r2
    e280:	3108983a 	sll	r4,r6,r4
    e284:	2884d83a 	srl	r2,r5,r2
    e288:	4a12b03a 	or	r9,r9,r8
    e28c:	2008c03a 	cmpne	r4,r4,zero
    e290:	4912b03a 	or	r9,r9,r4
    e294:	003f4e06 	br	dfd0 <__alt_data_end+0xff00dfd0>
    e298:	1c48b03a 	or	r4,r3,r17
    e29c:	20003c26 	beq	r4,zero,e390 <__subdf3+0x62c>
    e2a0:	0084303a 	nor	r2,zero,r2
    e2a4:	1000381e 	bne	r2,zero,e388 <__subdf3+0x624>
    e2a8:	3463c83a 	sub	r17,r6,r17
    e2ac:	28c5c83a 	sub	r2,r5,r3
    e2b0:	344d803a 	cmpltu	r6,r6,r17
    e2b4:	1187c83a 	sub	r3,r2,r6
    e2b8:	4821883a 	mov	r16,r9
    e2bc:	3825883a 	mov	r18,r7
    e2c0:	003f0606 	br	dedc <__alt_data_end+0xff00dedc>
    e2c4:	2023883a 	mov	r17,r4
    e2c8:	003f0906 	br	def0 <__alt_data_end+0xff00def0>
    e2cc:	0101ffc4 	movi	r4,2047
    e2d0:	813f3a1e 	bne	r16,r4,dfbc <__alt_data_end+0xff00dfbc>
    e2d4:	003ec406 	br	dde8 <__alt_data_end+0xff00dde8>
    e2d8:	0005883a 	mov	r2,zero
    e2dc:	003fb106 	br	e1a4 <__alt_data_end+0xff00e1a4>
    e2e0:	0005883a 	mov	r2,zero
    e2e4:	003fbc06 	br	e1d8 <__alt_data_end+0xff00e1d8>
    e2e8:	1c44b03a 	or	r2,r3,r17
    e2ec:	80008e1e 	bne	r16,zero,e528 <__subdf3+0x7c4>
    e2f0:	1000c826 	beq	r2,zero,e614 <__subdf3+0x8b0>
    e2f4:	2984b03a 	or	r2,r5,r6
    e2f8:	103ebb26 	beq	r2,zero,dde8 <__alt_data_end+0xff00dde8>
    e2fc:	8989883a 	add	r4,r17,r6
    e300:	1945883a 	add	r2,r3,r5
    e304:	2447803a 	cmpltu	r3,r4,r17
    e308:	1887883a 	add	r3,r3,r2
    e30c:	1880202c 	andhi	r2,r3,128
    e310:	2023883a 	mov	r17,r4
    e314:	103f1626 	beq	r2,zero,df70 <__alt_data_end+0xff00df70>
    e318:	00bfe034 	movhi	r2,65408
    e31c:	10bfffc4 	addi	r2,r2,-1
    e320:	5021883a 	mov	r16,r10
    e324:	1886703a 	and	r3,r3,r2
    e328:	003eaf06 	br	dde8 <__alt_data_end+0xff00dde8>
    e32c:	3825883a 	mov	r18,r7
    e330:	003f0f06 	br	df70 <__alt_data_end+0xff00df70>
    e334:	1c44b03a 	or	r2,r3,r17
    e338:	8000251e 	bne	r16,zero,e3d0 <__subdf3+0x66c>
    e33c:	1000661e 	bne	r2,zero,e4d8 <__subdf3+0x774>
    e340:	2990b03a 	or	r8,r5,r6
    e344:	40009626 	beq	r8,zero,e5a0 <__subdf3+0x83c>
    e348:	2807883a 	mov	r3,r5
    e34c:	3023883a 	mov	r17,r6
    e350:	3825883a 	mov	r18,r7
    e354:	003ea406 	br	dde8 <__alt_data_end+0xff00dde8>
    e358:	127ff804 	addi	r9,r2,-32
    e35c:	01000804 	movi	r4,32
    e360:	2a52d83a 	srl	r9,r5,r9
    e364:	11008c26 	beq	r2,r4,e598 <__subdf3+0x834>
    e368:	01001004 	movi	r4,64
    e36c:	2085c83a 	sub	r2,r4,r2
    e370:	2884983a 	sll	r2,r5,r2
    e374:	118cb03a 	or	r6,r2,r6
    e378:	300cc03a 	cmpne	r6,r6,zero
    e37c:	4992b03a 	or	r9,r9,r6
    e380:	0005883a 	mov	r2,zero
    e384:	003f1206 	br	dfd0 <__alt_data_end+0xff00dfd0>
    e388:	0101ffc4 	movi	r4,2047
    e38c:	493f9c1e 	bne	r9,r4,e200 <__alt_data_end+0xff00e200>
    e390:	2807883a 	mov	r3,r5
    e394:	3023883a 	mov	r17,r6
    e398:	4821883a 	mov	r16,r9
    e39c:	3825883a 	mov	r18,r7
    e3a0:	003e9106 	br	dde8 <__alt_data_end+0xff00dde8>
    e3a4:	80001f1e 	bne	r16,zero,e424 <__subdf3+0x6c0>
    e3a8:	1c48b03a 	or	r4,r3,r17
    e3ac:	20005a26 	beq	r4,zero,e518 <__subdf3+0x7b4>
    e3b0:	0084303a 	nor	r2,zero,r2
    e3b4:	1000561e 	bne	r2,zero,e510 <__subdf3+0x7ac>
    e3b8:	89a3883a 	add	r17,r17,r6
    e3bc:	1945883a 	add	r2,r3,r5
    e3c0:	898d803a 	cmpltu	r6,r17,r6
    e3c4:	3087883a 	add	r3,r6,r2
    e3c8:	4821883a 	mov	r16,r9
    e3cc:	003f0506 	br	dfe4 <__alt_data_end+0xff00dfe4>
    e3d0:	10002b1e 	bne	r2,zero,e480 <__subdf3+0x71c>
    e3d4:	2984b03a 	or	r2,r5,r6
    e3d8:	10008026 	beq	r2,zero,e5dc <__subdf3+0x878>
    e3dc:	2807883a 	mov	r3,r5
    e3e0:	3023883a 	mov	r17,r6
    e3e4:	3825883a 	mov	r18,r7
    e3e8:	0401ffc4 	movi	r16,2047
    e3ec:	003e7e06 	br	dde8 <__alt_data_end+0xff00dde8>
    e3f0:	3809883a 	mov	r4,r7
    e3f4:	0011883a 	mov	r8,zero
    e3f8:	0005883a 	mov	r2,zero
    e3fc:	003ee306 	br	df8c <__alt_data_end+0xff00df8c>
    e400:	1c62b03a 	or	r17,r3,r17
    e404:	8822c03a 	cmpne	r17,r17,zero
    e408:	0005883a 	mov	r2,zero
    e40c:	003f8906 	br	e234 <__alt_data_end+0xff00e234>
    e410:	3809883a 	mov	r4,r7
    e414:	4821883a 	mov	r16,r9
    e418:	0011883a 	mov	r8,zero
    e41c:	0005883a 	mov	r2,zero
    e420:	003eda06 	br	df8c <__alt_data_end+0xff00df8c>
    e424:	0101ffc4 	movi	r4,2047
    e428:	49003b26 	beq	r9,r4,e518 <__subdf3+0x7b4>
    e42c:	0085c83a 	sub	r2,zero,r2
    e430:	18c02034 	orhi	r3,r3,128
    e434:	01000e04 	movi	r4,56
    e438:	20806e16 	blt	r4,r2,e5f4 <__subdf3+0x890>
    e43c:	010007c4 	movi	r4,31
    e440:	20807716 	blt	r4,r2,e620 <__subdf3+0x8bc>
    e444:	01000804 	movi	r4,32
    e448:	2089c83a 	sub	r4,r4,r2
    e44c:	1914983a 	sll	r10,r3,r4
    e450:	8890d83a 	srl	r8,r17,r2
    e454:	8908983a 	sll	r4,r17,r4
    e458:	1884d83a 	srl	r2,r3,r2
    e45c:	5222b03a 	or	r17,r10,r8
    e460:	2006c03a 	cmpne	r3,r4,zero
    e464:	88e2b03a 	or	r17,r17,r3
    e468:	89a3883a 	add	r17,r17,r6
    e46c:	1145883a 	add	r2,r2,r5
    e470:	898d803a 	cmpltu	r6,r17,r6
    e474:	3087883a 	add	r3,r6,r2
    e478:	4821883a 	mov	r16,r9
    e47c:	003ed906 	br	dfe4 <__alt_data_end+0xff00dfe4>
    e480:	2984b03a 	or	r2,r5,r6
    e484:	10004226 	beq	r2,zero,e590 <__subdf3+0x82c>
    e488:	1808d0fa 	srli	r4,r3,3
    e48c:	8822d0fa 	srli	r17,r17,3
    e490:	1806977a 	slli	r3,r3,29
    e494:	2080022c 	andhi	r2,r4,8
    e498:	1c62b03a 	or	r17,r3,r17
    e49c:	10000826 	beq	r2,zero,e4c0 <__subdf3+0x75c>
    e4a0:	2812d0fa 	srli	r9,r5,3
    e4a4:	4880022c 	andhi	r2,r9,8
    e4a8:	1000051e 	bne	r2,zero,e4c0 <__subdf3+0x75c>
    e4ac:	300cd0fa 	srli	r6,r6,3
    e4b0:	2804977a 	slli	r2,r5,29
    e4b4:	4809883a 	mov	r4,r9
    e4b8:	3825883a 	mov	r18,r7
    e4bc:	11a2b03a 	or	r17,r2,r6
    e4c0:	8806d77a 	srli	r3,r17,29
    e4c4:	200890fa 	slli	r4,r4,3
    e4c8:	882290fa 	slli	r17,r17,3
    e4cc:	0401ffc4 	movi	r16,2047
    e4d0:	1906b03a 	or	r3,r3,r4
    e4d4:	003e4406 	br	dde8 <__alt_data_end+0xff00dde8>
    e4d8:	2984b03a 	or	r2,r5,r6
    e4dc:	103e4226 	beq	r2,zero,dde8 <__alt_data_end+0xff00dde8>
    e4e0:	8989c83a 	sub	r4,r17,r6
    e4e4:	8911803a 	cmpltu	r8,r17,r4
    e4e8:	1945c83a 	sub	r2,r3,r5
    e4ec:	1205c83a 	sub	r2,r2,r8
    e4f0:	1200202c 	andhi	r8,r2,128
    e4f4:	403e9a26 	beq	r8,zero,df60 <__alt_data_end+0xff00df60>
    e4f8:	3463c83a 	sub	r17,r6,r17
    e4fc:	28c5c83a 	sub	r2,r5,r3
    e500:	344d803a 	cmpltu	r6,r6,r17
    e504:	1187c83a 	sub	r3,r2,r6
    e508:	3825883a 	mov	r18,r7
    e50c:	003e3606 	br	dde8 <__alt_data_end+0xff00dde8>
    e510:	0101ffc4 	movi	r4,2047
    e514:	493fc71e 	bne	r9,r4,e434 <__alt_data_end+0xff00e434>
    e518:	2807883a 	mov	r3,r5
    e51c:	3023883a 	mov	r17,r6
    e520:	4821883a 	mov	r16,r9
    e524:	003e3006 	br	dde8 <__alt_data_end+0xff00dde8>
    e528:	10003626 	beq	r2,zero,e604 <__subdf3+0x8a0>
    e52c:	2984b03a 	or	r2,r5,r6
    e530:	10001726 	beq	r2,zero,e590 <__subdf3+0x82c>
    e534:	1808d0fa 	srli	r4,r3,3
    e538:	8822d0fa 	srli	r17,r17,3
    e53c:	1806977a 	slli	r3,r3,29
    e540:	2080022c 	andhi	r2,r4,8
    e544:	1c62b03a 	or	r17,r3,r17
    e548:	10000726 	beq	r2,zero,e568 <__subdf3+0x804>
    e54c:	2812d0fa 	srli	r9,r5,3
    e550:	4880022c 	andhi	r2,r9,8
    e554:	1000041e 	bne	r2,zero,e568 <__subdf3+0x804>
    e558:	300cd0fa 	srli	r6,r6,3
    e55c:	2804977a 	slli	r2,r5,29
    e560:	4809883a 	mov	r4,r9
    e564:	11a2b03a 	or	r17,r2,r6
    e568:	8806d77a 	srli	r3,r17,29
    e56c:	200890fa 	slli	r4,r4,3
    e570:	882290fa 	slli	r17,r17,3
    e574:	3825883a 	mov	r18,r7
    e578:	1906b03a 	or	r3,r3,r4
    e57c:	0401ffc4 	movi	r16,2047
    e580:	003e1906 	br	dde8 <__alt_data_end+0xff00dde8>
    e584:	000b883a 	mov	r5,zero
    e588:	0005883a 	mov	r2,zero
    e58c:	003e2e06 	br	de48 <__alt_data_end+0xff00de48>
    e590:	0401ffc4 	movi	r16,2047
    e594:	003e1406 	br	dde8 <__alt_data_end+0xff00dde8>
    e598:	0005883a 	mov	r2,zero
    e59c:	003f7506 	br	e374 <__alt_data_end+0xff00e374>
    e5a0:	0005883a 	mov	r2,zero
    e5a4:	0009883a 	mov	r4,zero
    e5a8:	003e7806 	br	df8c <__alt_data_end+0xff00df8c>
    e5ac:	123ff804 	addi	r8,r2,-32
    e5b0:	01000804 	movi	r4,32
    e5b4:	1a10d83a 	srl	r8,r3,r8
    e5b8:	11002526 	beq	r2,r4,e650 <__subdf3+0x8ec>
    e5bc:	01001004 	movi	r4,64
    e5c0:	2085c83a 	sub	r2,r4,r2
    e5c4:	1884983a 	sll	r2,r3,r2
    e5c8:	1444b03a 	or	r2,r2,r17
    e5cc:	1004c03a 	cmpne	r2,r2,zero
    e5d0:	40a2b03a 	or	r17,r8,r2
    e5d4:	0005883a 	mov	r2,zero
    e5d8:	003f1606 	br	e234 <__alt_data_end+0xff00e234>
    e5dc:	02000434 	movhi	r8,16
    e5e0:	0009883a 	mov	r4,zero
    e5e4:	423fffc4 	addi	r8,r8,-1
    e5e8:	00bfffc4 	movi	r2,-1
    e5ec:	0401ffc4 	movi	r16,2047
    e5f0:	003e6606 	br	df8c <__alt_data_end+0xff00df8c>
    e5f4:	1c62b03a 	or	r17,r3,r17
    e5f8:	8822c03a 	cmpne	r17,r17,zero
    e5fc:	0005883a 	mov	r2,zero
    e600:	003f9906 	br	e468 <__alt_data_end+0xff00e468>
    e604:	2807883a 	mov	r3,r5
    e608:	3023883a 	mov	r17,r6
    e60c:	0401ffc4 	movi	r16,2047
    e610:	003df506 	br	dde8 <__alt_data_end+0xff00dde8>
    e614:	2807883a 	mov	r3,r5
    e618:	3023883a 	mov	r17,r6
    e61c:	003df206 	br	dde8 <__alt_data_end+0xff00dde8>
    e620:	123ff804 	addi	r8,r2,-32
    e624:	01000804 	movi	r4,32
    e628:	1a10d83a 	srl	r8,r3,r8
    e62c:	11000a26 	beq	r2,r4,e658 <__subdf3+0x8f4>
    e630:	01001004 	movi	r4,64
    e634:	2085c83a 	sub	r2,r4,r2
    e638:	1884983a 	sll	r2,r3,r2
    e63c:	1444b03a 	or	r2,r2,r17
    e640:	1004c03a 	cmpne	r2,r2,zero
    e644:	40a2b03a 	or	r17,r8,r2
    e648:	0005883a 	mov	r2,zero
    e64c:	003f8606 	br	e468 <__alt_data_end+0xff00e468>
    e650:	0005883a 	mov	r2,zero
    e654:	003fdc06 	br	e5c8 <__alt_data_end+0xff00e5c8>
    e658:	0005883a 	mov	r2,zero
    e65c:	003ff706 	br	e63c <__alt_data_end+0xff00e63c>

0000e660 <__fixdfsi>:
    e660:	280cd53a 	srli	r6,r5,20
    e664:	00c00434 	movhi	r3,16
    e668:	18ffffc4 	addi	r3,r3,-1
    e66c:	3181ffcc 	andi	r6,r6,2047
    e670:	01c0ff84 	movi	r7,1022
    e674:	28c6703a 	and	r3,r5,r3
    e678:	280ad7fa 	srli	r5,r5,31
    e67c:	3980120e 	bge	r7,r6,e6c8 <__fixdfsi+0x68>
    e680:	00810744 	movi	r2,1053
    e684:	11800c16 	blt	r2,r6,e6b8 <__fixdfsi+0x58>
    e688:	00810cc4 	movi	r2,1075
    e68c:	1185c83a 	sub	r2,r2,r6
    e690:	01c007c4 	movi	r7,31
    e694:	18c00434 	orhi	r3,r3,16
    e698:	38800d16 	blt	r7,r2,e6d0 <__fixdfsi+0x70>
    e69c:	31befb44 	addi	r6,r6,-1043
    e6a0:	2084d83a 	srl	r2,r4,r2
    e6a4:	1986983a 	sll	r3,r3,r6
    e6a8:	1884b03a 	or	r2,r3,r2
    e6ac:	28000726 	beq	r5,zero,e6cc <__fixdfsi+0x6c>
    e6b0:	0085c83a 	sub	r2,zero,r2
    e6b4:	f800283a 	ret
    e6b8:	00a00034 	movhi	r2,32768
    e6bc:	10bfffc4 	addi	r2,r2,-1
    e6c0:	2885883a 	add	r2,r5,r2
    e6c4:	f800283a 	ret
    e6c8:	0005883a 	mov	r2,zero
    e6cc:	f800283a 	ret
    e6d0:	008104c4 	movi	r2,1043
    e6d4:	1185c83a 	sub	r2,r2,r6
    e6d8:	1884d83a 	srl	r2,r3,r2
    e6dc:	003ff306 	br	e6ac <__alt_data_end+0xff00e6ac>

0000e6e0 <__floatsidf>:
    e6e0:	defffd04 	addi	sp,sp,-12
    e6e4:	dfc00215 	stw	ra,8(sp)
    e6e8:	dc400115 	stw	r17,4(sp)
    e6ec:	dc000015 	stw	r16,0(sp)
    e6f0:	20002b26 	beq	r4,zero,e7a0 <__floatsidf+0xc0>
    e6f4:	2023883a 	mov	r17,r4
    e6f8:	2020d7fa 	srli	r16,r4,31
    e6fc:	20002d16 	blt	r4,zero,e7b4 <__floatsidf+0xd4>
    e700:	8809883a 	mov	r4,r17
    e704:	00029b80 	call	29b8 <__clzsi2>
    e708:	01410784 	movi	r5,1054
    e70c:	288bc83a 	sub	r5,r5,r2
    e710:	01010cc4 	movi	r4,1075
    e714:	2149c83a 	sub	r4,r4,r5
    e718:	00c007c4 	movi	r3,31
    e71c:	1900160e 	bge	r3,r4,e778 <__floatsidf+0x98>
    e720:	00c104c4 	movi	r3,1043
    e724:	1947c83a 	sub	r3,r3,r5
    e728:	88c6983a 	sll	r3,r17,r3
    e72c:	00800434 	movhi	r2,16
    e730:	10bfffc4 	addi	r2,r2,-1
    e734:	1886703a 	and	r3,r3,r2
    e738:	2941ffcc 	andi	r5,r5,2047
    e73c:	800d883a 	mov	r6,r16
    e740:	0005883a 	mov	r2,zero
    e744:	280a953a 	slli	r5,r5,20
    e748:	31803fcc 	andi	r6,r6,255
    e74c:	01000434 	movhi	r4,16
    e750:	300c97fa 	slli	r6,r6,31
    e754:	213fffc4 	addi	r4,r4,-1
    e758:	1906703a 	and	r3,r3,r4
    e75c:	1946b03a 	or	r3,r3,r5
    e760:	1986b03a 	or	r3,r3,r6
    e764:	dfc00217 	ldw	ra,8(sp)
    e768:	dc400117 	ldw	r17,4(sp)
    e76c:	dc000017 	ldw	r16,0(sp)
    e770:	dec00304 	addi	sp,sp,12
    e774:	f800283a 	ret
    e778:	00c002c4 	movi	r3,11
    e77c:	1887c83a 	sub	r3,r3,r2
    e780:	88c6d83a 	srl	r3,r17,r3
    e784:	8904983a 	sll	r2,r17,r4
    e788:	01000434 	movhi	r4,16
    e78c:	213fffc4 	addi	r4,r4,-1
    e790:	2941ffcc 	andi	r5,r5,2047
    e794:	1906703a 	and	r3,r3,r4
    e798:	800d883a 	mov	r6,r16
    e79c:	003fe906 	br	e744 <__alt_data_end+0xff00e744>
    e7a0:	000d883a 	mov	r6,zero
    e7a4:	000b883a 	mov	r5,zero
    e7a8:	0007883a 	mov	r3,zero
    e7ac:	0005883a 	mov	r2,zero
    e7b0:	003fe406 	br	e744 <__alt_data_end+0xff00e744>
    e7b4:	0123c83a 	sub	r17,zero,r4
    e7b8:	003fd106 	br	e700 <__alt_data_end+0xff00e700>

0000e7bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7bc:	defffe04 	addi	sp,sp,-8
    e7c0:	dfc00115 	stw	ra,4(sp)
    e7c4:	df000015 	stw	fp,0(sp)
    e7c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7cc:	d0a00b17 	ldw	r2,-32724(gp)
    e7d0:	10000326 	beq	r2,zero,e7e0 <alt_get_errno+0x24>
    e7d4:	d0a00b17 	ldw	r2,-32724(gp)
    e7d8:	103ee83a 	callr	r2
    e7dc:	00000106 	br	e7e4 <alt_get_errno+0x28>
    e7e0:	d0a72004 	addi	r2,gp,-25472
}
    e7e4:	e037883a 	mov	sp,fp
    e7e8:	dfc00117 	ldw	ra,4(sp)
    e7ec:	df000017 	ldw	fp,0(sp)
    e7f0:	dec00204 	addi	sp,sp,8
    e7f4:	f800283a 	ret

0000e7f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e7f8:	defffb04 	addi	sp,sp,-20
    e7fc:	dfc00415 	stw	ra,16(sp)
    e800:	df000315 	stw	fp,12(sp)
    e804:	df000304 	addi	fp,sp,12
    e808:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e80c:	e0bfff17 	ldw	r2,-4(fp)
    e810:	10000616 	blt	r2,zero,e82c <close+0x34>
    e814:	e0bfff17 	ldw	r2,-4(fp)
    e818:	10c00324 	muli	r3,r2,12
    e81c:	00800074 	movhi	r2,1
    e820:	10898e04 	addi	r2,r2,9784
    e824:	1885883a 	add	r2,r3,r2
    e828:	00000106 	br	e830 <close+0x38>
    e82c:	0005883a 	mov	r2,zero
    e830:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e834:	e0bffd17 	ldw	r2,-12(fp)
    e838:	10001926 	beq	r2,zero,e8a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e83c:	e0bffd17 	ldw	r2,-12(fp)
    e840:	10800017 	ldw	r2,0(r2)
    e844:	10800417 	ldw	r2,16(r2)
    e848:	10000626 	beq	r2,zero,e864 <close+0x6c>
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	10800017 	ldw	r2,0(r2)
    e854:	10800417 	ldw	r2,16(r2)
    e858:	e13ffd17 	ldw	r4,-12(fp)
    e85c:	103ee83a 	callr	r2
    e860:	00000106 	br	e868 <close+0x70>
    e864:	0005883a 	mov	r2,zero
    e868:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e86c:	e13fff17 	ldw	r4,-4(fp)
    e870:	000eeb80 	call	eeb8 <alt_release_fd>
    if (rval < 0)
    e874:	e0bffe17 	ldw	r2,-8(fp)
    e878:	1000070e 	bge	r2,zero,e898 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e87c:	000e7bc0 	call	e7bc <alt_get_errno>
    e880:	1007883a 	mov	r3,r2
    e884:	e0bffe17 	ldw	r2,-8(fp)
    e888:	0085c83a 	sub	r2,zero,r2
    e88c:	18800015 	stw	r2,0(r3)
      return -1;
    e890:	00bfffc4 	movi	r2,-1
    e894:	00000706 	br	e8b4 <close+0xbc>
    }
    return 0;
    e898:	0005883a 	mov	r2,zero
    e89c:	00000506 	br	e8b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e8a0:	000e7bc0 	call	e7bc <alt_get_errno>
    e8a4:	1007883a 	mov	r3,r2
    e8a8:	00801444 	movi	r2,81
    e8ac:	18800015 	stw	r2,0(r3)
    return -1;
    e8b0:	00bfffc4 	movi	r2,-1
  }
}
    e8b4:	e037883a 	mov	sp,fp
    e8b8:	dfc00117 	ldw	ra,4(sp)
    e8bc:	df000017 	ldw	fp,0(sp)
    e8c0:	dec00204 	addi	sp,sp,8
    e8c4:	f800283a 	ret

0000e8c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e8c8:	defffc04 	addi	sp,sp,-16
    e8cc:	df000315 	stw	fp,12(sp)
    e8d0:	df000304 	addi	fp,sp,12
    e8d4:	e13ffd15 	stw	r4,-12(fp)
    e8d8:	e17ffe15 	stw	r5,-8(fp)
    e8dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e8e0:	e0bfff17 	ldw	r2,-4(fp)
}
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	df000017 	ldw	fp,0(sp)
    e8ec:	dec00104 	addi	sp,sp,4
    e8f0:	f800283a 	ret

0000e8f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8f4:	defffe04 	addi	sp,sp,-8
    e8f8:	dfc00115 	stw	ra,4(sp)
    e8fc:	df000015 	stw	fp,0(sp)
    e900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e904:	d0a00b17 	ldw	r2,-32724(gp)
    e908:	10000326 	beq	r2,zero,e918 <alt_get_errno+0x24>
    e90c:	d0a00b17 	ldw	r2,-32724(gp)
    e910:	103ee83a 	callr	r2
    e914:	00000106 	br	e91c <alt_get_errno+0x28>
    e918:	d0a72004 	addi	r2,gp,-25472
}
    e91c:	e037883a 	mov	sp,fp
    e920:	dfc00117 	ldw	ra,4(sp)
    e924:	df000017 	ldw	fp,0(sp)
    e928:	dec00204 	addi	sp,sp,8
    e92c:	f800283a 	ret

0000e930 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e930:	defffb04 	addi	sp,sp,-20
    e934:	dfc00415 	stw	ra,16(sp)
    e938:	df000315 	stw	fp,12(sp)
    e93c:	df000304 	addi	fp,sp,12
    e940:	e13ffe15 	stw	r4,-8(fp)
    e944:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e948:	e0bffe17 	ldw	r2,-8(fp)
    e94c:	10000616 	blt	r2,zero,e968 <fstat+0x38>
    e950:	e0bffe17 	ldw	r2,-8(fp)
    e954:	10c00324 	muli	r3,r2,12
    e958:	00800074 	movhi	r2,1
    e95c:	10898e04 	addi	r2,r2,9784
    e960:	1885883a 	add	r2,r3,r2
    e964:	00000106 	br	e96c <fstat+0x3c>
    e968:	0005883a 	mov	r2,zero
    e96c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e970:	e0bffd17 	ldw	r2,-12(fp)
    e974:	10001026 	beq	r2,zero,e9b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e978:	e0bffd17 	ldw	r2,-12(fp)
    e97c:	10800017 	ldw	r2,0(r2)
    e980:	10800817 	ldw	r2,32(r2)
    e984:	10000726 	beq	r2,zero,e9a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e988:	e0bffd17 	ldw	r2,-12(fp)
    e98c:	10800017 	ldw	r2,0(r2)
    e990:	10800817 	ldw	r2,32(r2)
    e994:	e17fff17 	ldw	r5,-4(fp)
    e998:	e13ffd17 	ldw	r4,-12(fp)
    e99c:	103ee83a 	callr	r2
    e9a0:	00000a06 	br	e9cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e9a4:	e0bfff17 	ldw	r2,-4(fp)
    e9a8:	00c80004 	movi	r3,8192
    e9ac:	10c00115 	stw	r3,4(r2)
      return 0;
    e9b0:	0005883a 	mov	r2,zero
    e9b4:	00000506 	br	e9cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e9b8:	000e8f40 	call	e8f4 <alt_get_errno>
    e9bc:	1007883a 	mov	r3,r2
    e9c0:	00801444 	movi	r2,81
    e9c4:	18800015 	stw	r2,0(r3)
    return -1;
    e9c8:	00bfffc4 	movi	r2,-1
  }
}
    e9cc:	e037883a 	mov	sp,fp
    e9d0:	dfc00117 	ldw	ra,4(sp)
    e9d4:	df000017 	ldw	fp,0(sp)
    e9d8:	dec00204 	addi	sp,sp,8
    e9dc:	f800283a 	ret

0000e9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e9e0:	defffe04 	addi	sp,sp,-8
    e9e4:	dfc00115 	stw	ra,4(sp)
    e9e8:	df000015 	stw	fp,0(sp)
    e9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9f0:	d0a00b17 	ldw	r2,-32724(gp)
    e9f4:	10000326 	beq	r2,zero,ea04 <alt_get_errno+0x24>
    e9f8:	d0a00b17 	ldw	r2,-32724(gp)
    e9fc:	103ee83a 	callr	r2
    ea00:	00000106 	br	ea08 <alt_get_errno+0x28>
    ea04:	d0a72004 	addi	r2,gp,-25472
}
    ea08:	e037883a 	mov	sp,fp
    ea0c:	dfc00117 	ldw	ra,4(sp)
    ea10:	df000017 	ldw	fp,0(sp)
    ea14:	dec00204 	addi	sp,sp,8
    ea18:	f800283a 	ret

0000ea1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ea1c:	deffed04 	addi	sp,sp,-76
    ea20:	dfc01215 	stw	ra,72(sp)
    ea24:	df001115 	stw	fp,68(sp)
    ea28:	df001104 	addi	fp,sp,68
    ea2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea30:	e0bfff17 	ldw	r2,-4(fp)
    ea34:	10000616 	blt	r2,zero,ea50 <isatty+0x34>
    ea38:	e0bfff17 	ldw	r2,-4(fp)
    ea3c:	10c00324 	muli	r3,r2,12
    ea40:	00800074 	movhi	r2,1
    ea44:	10898e04 	addi	r2,r2,9784
    ea48:	1885883a 	add	r2,r3,r2
    ea4c:	00000106 	br	ea54 <isatty+0x38>
    ea50:	0005883a 	mov	r2,zero
    ea54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ea58:	e0bfef17 	ldw	r2,-68(fp)
    ea5c:	10000e26 	beq	r2,zero,ea98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ea60:	e0bfef17 	ldw	r2,-68(fp)
    ea64:	10800017 	ldw	r2,0(r2)
    ea68:	10800817 	ldw	r2,32(r2)
    ea6c:	1000021e 	bne	r2,zero,ea78 <isatty+0x5c>
    {
      return 1;
    ea70:	00800044 	movi	r2,1
    ea74:	00000d06 	br	eaac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ea78:	e0bff004 	addi	r2,fp,-64
    ea7c:	100b883a 	mov	r5,r2
    ea80:	e13fff17 	ldw	r4,-4(fp)
    ea84:	000e9300 	call	e930 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ea88:	e0bff117 	ldw	r2,-60(fp)
    ea8c:	10880020 	cmpeqi	r2,r2,8192
    ea90:	10803fcc 	andi	r2,r2,255
    ea94:	00000506 	br	eaac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ea98:	000e9e00 	call	e9e0 <alt_get_errno>
    ea9c:	1007883a 	mov	r3,r2
    eaa0:	00801444 	movi	r2,81
    eaa4:	18800015 	stw	r2,0(r3)
    return 0;
    eaa8:	0005883a 	mov	r2,zero
  }
}
    eaac:	e037883a 	mov	sp,fp
    eab0:	dfc00117 	ldw	ra,4(sp)
    eab4:	df000017 	ldw	fp,0(sp)
    eab8:	dec00204 	addi	sp,sp,8
    eabc:	f800283a 	ret

0000eac0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    eac0:	defffc04 	addi	sp,sp,-16
    eac4:	df000315 	stw	fp,12(sp)
    eac8:	df000304 	addi	fp,sp,12
    eacc:	e13ffd15 	stw	r4,-12(fp)
    ead0:	e17ffe15 	stw	r5,-8(fp)
    ead4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ead8:	e0fffe17 	ldw	r3,-8(fp)
    eadc:	e0bffd17 	ldw	r2,-12(fp)
    eae0:	18800c26 	beq	r3,r2,eb14 <alt_load_section+0x54>
  {
    while( to != end )
    eae4:	00000806 	br	eb08 <alt_load_section+0x48>
    {
      *to++ = *from++;
    eae8:	e0bffe17 	ldw	r2,-8(fp)
    eaec:	10c00104 	addi	r3,r2,4
    eaf0:	e0fffe15 	stw	r3,-8(fp)
    eaf4:	e0fffd17 	ldw	r3,-12(fp)
    eaf8:	19000104 	addi	r4,r3,4
    eafc:	e13ffd15 	stw	r4,-12(fp)
    eb00:	18c00017 	ldw	r3,0(r3)
    eb04:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    eb08:	e0fffe17 	ldw	r3,-8(fp)
    eb0c:	e0bfff17 	ldw	r2,-4(fp)
    eb10:	18bff51e 	bne	r3,r2,eae8 <__alt_data_end+0xff00eae8>
    {
      *to++ = *from++;
    }
  }
}
    eb14:	0001883a 	nop
    eb18:	e037883a 	mov	sp,fp
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00104 	addi	sp,sp,4
    eb24:	f800283a 	ret

0000eb28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    eb28:	defffe04 	addi	sp,sp,-8
    eb2c:	dfc00115 	stw	ra,4(sp)
    eb30:	df000015 	stw	fp,0(sp)
    eb34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    eb38:	01800074 	movhi	r6,1
    eb3c:	318e1604 	addi	r6,r6,14424
    eb40:	01400074 	movhi	r5,1
    eb44:	29471b04 	addi	r5,r5,7276
    eb48:	01000074 	movhi	r4,1
    eb4c:	210e1604 	addi	r4,r4,14424
    eb50:	000eac00 	call	eac0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    eb54:	01800034 	movhi	r6,0
    eb58:	31809104 	addi	r6,r6,580
    eb5c:	01400034 	movhi	r5,0
    eb60:	29400804 	addi	r5,r5,32
    eb64:	01000034 	movhi	r4,0
    eb68:	21000804 	addi	r4,r4,32
    eb6c:	000eac00 	call	eac0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    eb70:	01800074 	movhi	r6,1
    eb74:	31871b04 	addi	r6,r6,7276
    eb78:	01400074 	movhi	r5,1
    eb7c:	29453104 	addi	r5,r5,5316
    eb80:	01000074 	movhi	r4,1
    eb84:	21053104 	addi	r4,r4,5316
    eb88:	000eac00 	call	eac0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    eb8c:	00102000 	call	10200 <alt_dcache_flush_all>
  alt_icache_flush_all();
    eb90:	00103e80 	call	103e8 <alt_icache_flush_all>
}
    eb94:	0001883a 	nop
    eb98:	e037883a 	mov	sp,fp
    eb9c:	dfc00117 	ldw	ra,4(sp)
    eba0:	df000017 	ldw	fp,0(sp)
    eba4:	dec00204 	addi	sp,sp,8
    eba8:	f800283a 	ret

0000ebac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebac:	defffe04 	addi	sp,sp,-8
    ebb0:	dfc00115 	stw	ra,4(sp)
    ebb4:	df000015 	stw	fp,0(sp)
    ebb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebbc:	d0a00b17 	ldw	r2,-32724(gp)
    ebc0:	10000326 	beq	r2,zero,ebd0 <alt_get_errno+0x24>
    ebc4:	d0a00b17 	ldw	r2,-32724(gp)
    ebc8:	103ee83a 	callr	r2
    ebcc:	00000106 	br	ebd4 <alt_get_errno+0x28>
    ebd0:	d0a72004 	addi	r2,gp,-25472
}
    ebd4:	e037883a 	mov	sp,fp
    ebd8:	dfc00117 	ldw	ra,4(sp)
    ebdc:	df000017 	ldw	fp,0(sp)
    ebe0:	dec00204 	addi	sp,sp,8
    ebe4:	f800283a 	ret

0000ebe8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ebe8:	defff904 	addi	sp,sp,-28
    ebec:	dfc00615 	stw	ra,24(sp)
    ebf0:	df000515 	stw	fp,20(sp)
    ebf4:	df000504 	addi	fp,sp,20
    ebf8:	e13ffd15 	stw	r4,-12(fp)
    ebfc:	e17ffe15 	stw	r5,-8(fp)
    ec00:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ec04:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec08:	e0bffd17 	ldw	r2,-12(fp)
    ec0c:	10000616 	blt	r2,zero,ec28 <lseek+0x40>
    ec10:	e0bffd17 	ldw	r2,-12(fp)
    ec14:	10c00324 	muli	r3,r2,12
    ec18:	00800074 	movhi	r2,1
    ec1c:	10898e04 	addi	r2,r2,9784
    ec20:	1885883a 	add	r2,r3,r2
    ec24:	00000106 	br	ec2c <lseek+0x44>
    ec28:	0005883a 	mov	r2,zero
    ec2c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ec30:	e0bffc17 	ldw	r2,-16(fp)
    ec34:	10001026 	beq	r2,zero,ec78 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ec38:	e0bffc17 	ldw	r2,-16(fp)
    ec3c:	10800017 	ldw	r2,0(r2)
    ec40:	10800717 	ldw	r2,28(r2)
    ec44:	10000926 	beq	r2,zero,ec6c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ec48:	e0bffc17 	ldw	r2,-16(fp)
    ec4c:	10800017 	ldw	r2,0(r2)
    ec50:	10800717 	ldw	r2,28(r2)
    ec54:	e1bfff17 	ldw	r6,-4(fp)
    ec58:	e17ffe17 	ldw	r5,-8(fp)
    ec5c:	e13ffc17 	ldw	r4,-16(fp)
    ec60:	103ee83a 	callr	r2
    ec64:	e0bffb15 	stw	r2,-20(fp)
    ec68:	00000506 	br	ec80 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ec6c:	00bfde84 	movi	r2,-134
    ec70:	e0bffb15 	stw	r2,-20(fp)
    ec74:	00000206 	br	ec80 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ec78:	00bfebc4 	movi	r2,-81
    ec7c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ec80:	e0bffb17 	ldw	r2,-20(fp)
    ec84:	1000070e 	bge	r2,zero,eca4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ec88:	000ebac0 	call	ebac <alt_get_errno>
    ec8c:	1007883a 	mov	r3,r2
    ec90:	e0bffb17 	ldw	r2,-20(fp)
    ec94:	0085c83a 	sub	r2,zero,r2
    ec98:	18800015 	stw	r2,0(r3)
    rc = -1;
    ec9c:	00bfffc4 	movi	r2,-1
    eca0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    eca4:	e0bffb17 	ldw	r2,-20(fp)
}
    eca8:	e037883a 	mov	sp,fp
    ecac:	dfc00117 	ldw	ra,4(sp)
    ecb0:	df000017 	ldw	fp,0(sp)
    ecb4:	dec00204 	addi	sp,sp,8
    ecb8:	f800283a 	ret

0000ecbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ecbc:	defffd04 	addi	sp,sp,-12
    ecc0:	dfc00215 	stw	ra,8(sp)
    ecc4:	df000115 	stw	fp,4(sp)
    ecc8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    eccc:	0009883a 	mov	r4,zero
    ecd0:	000f1dc0 	call	f1dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ecd4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ecd8:	000f2140 	call	f214 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ecdc:	01800074 	movhi	r6,1
    ece0:	31871304 	addi	r6,r6,7244
    ece4:	01400074 	movhi	r5,1
    ece8:	29471304 	addi	r5,r5,7244
    ecec:	01000074 	movhi	r4,1
    ecf0:	21071304 	addi	r4,r4,7244
    ecf4:	00107800 	call	10780 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ecf8:	00103280 	call	10328 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ecfc:	01000074 	movhi	r4,1
    ed00:	2100e204 	addi	r4,r4,904
    ed04:	0010f800 	call	10f80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ed08:	d0a72417 	ldw	r2,-25456(gp)
    ed0c:	d0e72517 	ldw	r3,-25452(gp)
    ed10:	d1272617 	ldw	r4,-25448(gp)
    ed14:	200d883a 	mov	r6,r4
    ed18:	180b883a 	mov	r5,r3
    ed1c:	1009883a 	mov	r4,r2
    ed20:	00017180 	call	1718 <main>
    ed24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ed28:	01000044 	movi	r4,1
    ed2c:	000e7f80 	call	e7f8 <close>
  exit (result);
    ed30:	e13fff17 	ldw	r4,-4(fp)
    ed34:	0010f940 	call	10f94 <exit>

0000ed38 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ed38:	defffe04 	addi	sp,sp,-8
    ed3c:	df000115 	stw	fp,4(sp)
    ed40:	df000104 	addi	fp,sp,4
    ed44:	e13fff15 	stw	r4,-4(fp)
}
    ed48:	0001883a 	nop
    ed4c:	e037883a 	mov	sp,fp
    ed50:	df000017 	ldw	fp,0(sp)
    ed54:	dec00104 	addi	sp,sp,4
    ed58:	f800283a 	ret

0000ed5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ed5c:	defffe04 	addi	sp,sp,-8
    ed60:	df000115 	stw	fp,4(sp)
    ed64:	df000104 	addi	fp,sp,4
    ed68:	e13fff15 	stw	r4,-4(fp)
}
    ed6c:	0001883a 	nop
    ed70:	e037883a 	mov	sp,fp
    ed74:	df000017 	ldw	fp,0(sp)
    ed78:	dec00104 	addi	sp,sp,4
    ed7c:	f800283a 	ret

0000ed80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed80:	defffe04 	addi	sp,sp,-8
    ed84:	dfc00115 	stw	ra,4(sp)
    ed88:	df000015 	stw	fp,0(sp)
    ed8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed90:	d0a00b17 	ldw	r2,-32724(gp)
    ed94:	10000326 	beq	r2,zero,eda4 <alt_get_errno+0x24>
    ed98:	d0a00b17 	ldw	r2,-32724(gp)
    ed9c:	103ee83a 	callr	r2
    eda0:	00000106 	br	eda8 <alt_get_errno+0x28>
    eda4:	d0a72004 	addi	r2,gp,-25472
}
    eda8:	e037883a 	mov	sp,fp
    edac:	dfc00117 	ldw	ra,4(sp)
    edb0:	df000017 	ldw	fp,0(sp)
    edb4:	dec00204 	addi	sp,sp,8
    edb8:	f800283a 	ret

0000edbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    edbc:	defff904 	addi	sp,sp,-28
    edc0:	dfc00615 	stw	ra,24(sp)
    edc4:	df000515 	stw	fp,20(sp)
    edc8:	df000504 	addi	fp,sp,20
    edcc:	e13ffd15 	stw	r4,-12(fp)
    edd0:	e17ffe15 	stw	r5,-8(fp)
    edd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edd8:	e0bffd17 	ldw	r2,-12(fp)
    eddc:	10000616 	blt	r2,zero,edf8 <read+0x3c>
    ede0:	e0bffd17 	ldw	r2,-12(fp)
    ede4:	10c00324 	muli	r3,r2,12
    ede8:	00800074 	movhi	r2,1
    edec:	10898e04 	addi	r2,r2,9784
    edf0:	1885883a 	add	r2,r3,r2
    edf4:	00000106 	br	edfc <read+0x40>
    edf8:	0005883a 	mov	r2,zero
    edfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ee00:	e0bffb17 	ldw	r2,-20(fp)
    ee04:	10002226 	beq	r2,zero,ee90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ee08:	e0bffb17 	ldw	r2,-20(fp)
    ee0c:	10800217 	ldw	r2,8(r2)
    ee10:	108000cc 	andi	r2,r2,3
    ee14:	10800060 	cmpeqi	r2,r2,1
    ee18:	1000181e 	bne	r2,zero,ee7c <read+0xc0>
        (fd->dev->read))
    ee1c:	e0bffb17 	ldw	r2,-20(fp)
    ee20:	10800017 	ldw	r2,0(r2)
    ee24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ee28:	10001426 	beq	r2,zero,ee7c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ee2c:	e0bffb17 	ldw	r2,-20(fp)
    ee30:	10800017 	ldw	r2,0(r2)
    ee34:	10800517 	ldw	r2,20(r2)
    ee38:	e0ffff17 	ldw	r3,-4(fp)
    ee3c:	180d883a 	mov	r6,r3
    ee40:	e17ffe17 	ldw	r5,-8(fp)
    ee44:	e13ffb17 	ldw	r4,-20(fp)
    ee48:	103ee83a 	callr	r2
    ee4c:	e0bffc15 	stw	r2,-16(fp)
    ee50:	e0bffc17 	ldw	r2,-16(fp)
    ee54:	1000070e 	bge	r2,zero,ee74 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ee58:	000ed800 	call	ed80 <alt_get_errno>
    ee5c:	1007883a 	mov	r3,r2
    ee60:	e0bffc17 	ldw	r2,-16(fp)
    ee64:	0085c83a 	sub	r2,zero,r2
    ee68:	18800015 	stw	r2,0(r3)
          return -1;
    ee6c:	00bfffc4 	movi	r2,-1
    ee70:	00000c06 	br	eea4 <read+0xe8>
        }
        return rval;
    ee74:	e0bffc17 	ldw	r2,-16(fp)
    ee78:	00000a06 	br	eea4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ee7c:	000ed800 	call	ed80 <alt_get_errno>
    ee80:	1007883a 	mov	r3,r2
    ee84:	00800344 	movi	r2,13
    ee88:	18800015 	stw	r2,0(r3)
    ee8c:	00000406 	br	eea0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ee90:	000ed800 	call	ed80 <alt_get_errno>
    ee94:	1007883a 	mov	r3,r2
    ee98:	00801444 	movi	r2,81
    ee9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eea0:	00bfffc4 	movi	r2,-1
}
    eea4:	e037883a 	mov	sp,fp
    eea8:	dfc00117 	ldw	ra,4(sp)
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00204 	addi	sp,sp,8
    eeb4:	f800283a 	ret

0000eeb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    eeb8:	defffe04 	addi	sp,sp,-8
    eebc:	df000115 	stw	fp,4(sp)
    eec0:	df000104 	addi	fp,sp,4
    eec4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    eec8:	e0bfff17 	ldw	r2,-4(fp)
    eecc:	108000d0 	cmplti	r2,r2,3
    eed0:	10000d1e 	bne	r2,zero,ef08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    eed4:	00800074 	movhi	r2,1
    eed8:	10898e04 	addi	r2,r2,9784
    eedc:	e0ffff17 	ldw	r3,-4(fp)
    eee0:	18c00324 	muli	r3,r3,12
    eee4:	10c5883a 	add	r2,r2,r3
    eee8:	10800204 	addi	r2,r2,8
    eeec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    eef0:	00800074 	movhi	r2,1
    eef4:	10898e04 	addi	r2,r2,9784
    eef8:	e0ffff17 	ldw	r3,-4(fp)
    eefc:	18c00324 	muli	r3,r3,12
    ef00:	10c5883a 	add	r2,r2,r3
    ef04:	10000015 	stw	zero,0(r2)
  }
}
    ef08:	0001883a 	nop
    ef0c:	e037883a 	mov	sp,fp
    ef10:	df000017 	ldw	fp,0(sp)
    ef14:	dec00104 	addi	sp,sp,4
    ef18:	f800283a 	ret

0000ef1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ef1c:	defff904 	addi	sp,sp,-28
    ef20:	df000615 	stw	fp,24(sp)
    ef24:	df000604 	addi	fp,sp,24
    ef28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef2c:	0005303a 	rdctl	r2,status
    ef30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef34:	e0fffe17 	ldw	r3,-8(fp)
    ef38:	00bfff84 	movi	r2,-2
    ef3c:	1884703a 	and	r2,r3,r2
    ef40:	1001703a 	wrctl	status,r2
  
  return context;
    ef44:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ef48:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ef4c:	d0a00c17 	ldw	r2,-32720(gp)
    ef50:	10c000c4 	addi	r3,r2,3
    ef54:	00bfff04 	movi	r2,-4
    ef58:	1884703a 	and	r2,r3,r2
    ef5c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ef60:	d0e00c17 	ldw	r3,-32720(gp)
    ef64:	e0bfff17 	ldw	r2,-4(fp)
    ef68:	1887883a 	add	r3,r3,r2
    ef6c:	00804034 	movhi	r2,256
    ef70:	10800004 	addi	r2,r2,0
    ef74:	10c0062e 	bgeu	r2,r3,ef90 <sbrk+0x74>
    ef78:	e0bffb17 	ldw	r2,-20(fp)
    ef7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef80:	e0bffa17 	ldw	r2,-24(fp)
    ef84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ef88:	00bfffc4 	movi	r2,-1
    ef8c:	00000b06 	br	efbc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ef90:	d0a00c17 	ldw	r2,-32720(gp)
    ef94:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ef98:	d0e00c17 	ldw	r3,-32720(gp)
    ef9c:	e0bfff17 	ldw	r2,-4(fp)
    efa0:	1885883a 	add	r2,r3,r2
    efa4:	d0a00c15 	stw	r2,-32720(gp)
    efa8:	e0bffb17 	ldw	r2,-20(fp)
    efac:	e0bffc15 	stw	r2,-16(fp)
    efb0:	e0bffc17 	ldw	r2,-16(fp)
    efb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    efb8:	e0bffd17 	ldw	r2,-12(fp)
} 
    efbc:	e037883a 	mov	sp,fp
    efc0:	df000017 	ldw	fp,0(sp)
    efc4:	dec00104 	addi	sp,sp,4
    efc8:	f800283a 	ret

0000efcc <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    efcc:	defffa04 	addi	sp,sp,-24
    efd0:	dfc00515 	stw	ra,20(sp)
    efd4:	df000415 	stw	fp,16(sp)
    efd8:	df000404 	addi	fp,sp,16
    efdc:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
    efe0:	e0bfff17 	ldw	r2,-4(fp)
    efe4:	108007c4 	addi	r2,r2,31
    efe8:	1004d17a 	srli	r2,r2,5
    efec:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eff0:	e0bffc17 	ldw	r2,-16(fp)
    eff4:	1004917a 	slli	r2,r2,5
    eff8:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    effc:	e17ffd17 	ldw	r5,-12(fp)
    f000:	01000804 	movi	r4,32
    f004:	0010fcc0 	call	10fcc <memalign>
    f008:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
    f00c:	e0bffe17 	ldw	r2,-8(fp)
    f010:	1000021e 	bne	r2,zero,f01c <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
    f014:	0005883a 	mov	r2,zero
    f018:	00000506 	br	f030 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    f01c:	e17ffd17 	ldw	r5,-12(fp)
    f020:	e13ffe17 	ldw	r4,-8(fp)
    f024:	00101880 	call	10188 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    f028:	e0bffe17 	ldw	r2,-8(fp)
    f02c:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    f030:	e037883a 	mov	sp,fp
    f034:	dfc00117 	ldw	ra,4(sp)
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00204 	addi	sp,sp,8
    f040:	f800283a 	ret

0000f044 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f044:	defffd04 	addi	sp,sp,-12
    f048:	dfc00215 	stw	ra,8(sp)
    f04c:	df000115 	stw	fp,4(sp)
    f050:	df000104 	addi	fp,sp,4
    f054:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f058:	e13fff17 	ldw	r4,-4(fp)
    f05c:	00100300 	call	10030 <alt_busy_sleep>
}
    f060:	e037883a 	mov	sp,fp
    f064:	dfc00117 	ldw	ra,4(sp)
    f068:	df000017 	ldw	fp,0(sp)
    f06c:	dec00204 	addi	sp,sp,8
    f070:	f800283a 	ret

0000f074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f074:	defffe04 	addi	sp,sp,-8
    f078:	dfc00115 	stw	ra,4(sp)
    f07c:	df000015 	stw	fp,0(sp)
    f080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f084:	d0a00b17 	ldw	r2,-32724(gp)
    f088:	10000326 	beq	r2,zero,f098 <alt_get_errno+0x24>
    f08c:	d0a00b17 	ldw	r2,-32724(gp)
    f090:	103ee83a 	callr	r2
    f094:	00000106 	br	f09c <alt_get_errno+0x28>
    f098:	d0a72004 	addi	r2,gp,-25472
}
    f09c:	e037883a 	mov	sp,fp
    f0a0:	dfc00117 	ldw	ra,4(sp)
    f0a4:	df000017 	ldw	fp,0(sp)
    f0a8:	dec00204 	addi	sp,sp,8
    f0ac:	f800283a 	ret

0000f0b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f0b0:	defff904 	addi	sp,sp,-28
    f0b4:	dfc00615 	stw	ra,24(sp)
    f0b8:	df000515 	stw	fp,20(sp)
    f0bc:	df000504 	addi	fp,sp,20
    f0c0:	e13ffd15 	stw	r4,-12(fp)
    f0c4:	e17ffe15 	stw	r5,-8(fp)
    f0c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10000616 	blt	r2,zero,f0ec <write+0x3c>
    f0d4:	e0bffd17 	ldw	r2,-12(fp)
    f0d8:	10c00324 	muli	r3,r2,12
    f0dc:	00800074 	movhi	r2,1
    f0e0:	10898e04 	addi	r2,r2,9784
    f0e4:	1885883a 	add	r2,r3,r2
    f0e8:	00000106 	br	f0f0 <write+0x40>
    f0ec:	0005883a 	mov	r2,zero
    f0f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f0f4:	e0bffb17 	ldw	r2,-20(fp)
    f0f8:	10002126 	beq	r2,zero,f180 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f0fc:	e0bffb17 	ldw	r2,-20(fp)
    f100:	10800217 	ldw	r2,8(r2)
    f104:	108000cc 	andi	r2,r2,3
    f108:	10001826 	beq	r2,zero,f16c <write+0xbc>
    f10c:	e0bffb17 	ldw	r2,-20(fp)
    f110:	10800017 	ldw	r2,0(r2)
    f114:	10800617 	ldw	r2,24(r2)
    f118:	10001426 	beq	r2,zero,f16c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f11c:	e0bffb17 	ldw	r2,-20(fp)
    f120:	10800017 	ldw	r2,0(r2)
    f124:	10800617 	ldw	r2,24(r2)
    f128:	e0ffff17 	ldw	r3,-4(fp)
    f12c:	180d883a 	mov	r6,r3
    f130:	e17ffe17 	ldw	r5,-8(fp)
    f134:	e13ffb17 	ldw	r4,-20(fp)
    f138:	103ee83a 	callr	r2
    f13c:	e0bffc15 	stw	r2,-16(fp)
    f140:	e0bffc17 	ldw	r2,-16(fp)
    f144:	1000070e 	bge	r2,zero,f164 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f148:	000f0740 	call	f074 <alt_get_errno>
    f14c:	1007883a 	mov	r3,r2
    f150:	e0bffc17 	ldw	r2,-16(fp)
    f154:	0085c83a 	sub	r2,zero,r2
    f158:	18800015 	stw	r2,0(r3)
        return -1;
    f15c:	00bfffc4 	movi	r2,-1
    f160:	00000c06 	br	f194 <write+0xe4>
      }
      return rval;
    f164:	e0bffc17 	ldw	r2,-16(fp)
    f168:	00000a06 	br	f194 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f16c:	000f0740 	call	f074 <alt_get_errno>
    f170:	1007883a 	mov	r3,r2
    f174:	00800344 	movi	r2,13
    f178:	18800015 	stw	r2,0(r3)
    f17c:	00000406 	br	f190 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f180:	000f0740 	call	f074 <alt_get_errno>
    f184:	1007883a 	mov	r3,r2
    f188:	00801444 	movi	r2,81
    f18c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f190:	00bfffc4 	movi	r2,-1
}
    f194:	e037883a 	mov	sp,fp
    f198:	dfc00117 	ldw	ra,4(sp)
    f19c:	df000017 	ldw	fp,0(sp)
    f1a0:	dec00204 	addi	sp,sp,8
    f1a4:	f800283a 	ret

0000f1a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f1a8:	defffd04 	addi	sp,sp,-12
    f1ac:	dfc00215 	stw	ra,8(sp)
    f1b0:	df000115 	stw	fp,4(sp)
    f1b4:	df000104 	addi	fp,sp,4
    f1b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f1bc:	d1600804 	addi	r5,gp,-32736
    f1c0:	e13fff17 	ldw	r4,-4(fp)
    f1c4:	00102840 	call	10284 <alt_dev_llist_insert>
}
    f1c8:	e037883a 	mov	sp,fp
    f1cc:	dfc00117 	ldw	ra,4(sp)
    f1d0:	df000017 	ldw	fp,0(sp)
    f1d4:	dec00204 	addi	sp,sp,8
    f1d8:	f800283a 	ret

0000f1dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f1dc:	defffd04 	addi	sp,sp,-12
    f1e0:	dfc00215 	stw	ra,8(sp)
    f1e4:	df000115 	stw	fp,4(sp)
    f1e8:	df000104 	addi	fp,sp,4
    f1ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f1f0:	0010bf40 	call	10bf4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f1f4:	00800044 	movi	r2,1
    f1f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f1fc:	0001883a 	nop
    f200:	e037883a 	mov	sp,fp
    f204:	dfc00117 	ldw	ra,4(sp)
    f208:	df000017 	ldw	fp,0(sp)
    f20c:	dec00204 	addi	sp,sp,8
    f210:	f800283a 	ret

0000f214 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f214:	defffe04 	addi	sp,sp,-8
    f218:	dfc00115 	stw	ra,4(sp)
    f21c:	df000015 	stw	fp,0(sp)
    f220:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f224:	00804034 	movhi	r2,256
    f228:	10840004 	addi	r2,r2,4096
    f22c:	d0a72715 	stw	r2,-25444(gp)
    f230:	0080bef4 	movhi	r2,763
    f234:	10bc2004 	addi	r2,r2,-3968
    f238:	d0a72815 	stw	r2,-25440(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f23c:	01c0fa04 	movi	r7,1000
    f240:	01800104 	movi	r6,4
    f244:	000b883a 	mov	r5,zero
    f248:	01004034 	movhi	r4,256
    f24c:	21040804 	addi	r4,r4,4128
    f250:	000fd700 	call	fd70 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f254:	000d883a 	mov	r6,zero
    f258:	000b883a 	mov	r5,zero
    f25c:	01000074 	movhi	r4,1
    f260:	2109f804 	addi	r4,r4,10208
    f264:	000f3f40 	call	f3f4 <altera_avalon_jtag_uart_init>
    f268:	01000074 	movhi	r4,1
    f26c:	2109ee04 	addi	r4,r4,10168
    f270:	000f1a80 	call	f1a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f274:	0001883a 	nop
}
    f278:	0001883a 	nop
    f27c:	e037883a 	mov	sp,fp
    f280:	dfc00117 	ldw	ra,4(sp)
    f284:	df000017 	ldw	fp,0(sp)
    f288:	dec00204 	addi	sp,sp,8
    f28c:	f800283a 	ret

0000f290 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f290:	defffa04 	addi	sp,sp,-24
    f294:	dfc00515 	stw	ra,20(sp)
    f298:	df000415 	stw	fp,16(sp)
    f29c:	df000404 	addi	fp,sp,16
    f2a0:	e13ffd15 	stw	r4,-12(fp)
    f2a4:	e17ffe15 	stw	r5,-8(fp)
    f2a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f2ac:	e0bffd17 	ldw	r2,-12(fp)
    f2b0:	10800017 	ldw	r2,0(r2)
    f2b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f2b8:	e0bffc17 	ldw	r2,-16(fp)
    f2bc:	10c00a04 	addi	r3,r2,40
    f2c0:	e0bffd17 	ldw	r2,-12(fp)
    f2c4:	10800217 	ldw	r2,8(r2)
    f2c8:	100f883a 	mov	r7,r2
    f2cc:	e1bfff17 	ldw	r6,-4(fp)
    f2d0:	e17ffe17 	ldw	r5,-8(fp)
    f2d4:	1809883a 	mov	r4,r3
    f2d8:	000f8b80 	call	f8b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f2dc:	e037883a 	mov	sp,fp
    f2e0:	dfc00117 	ldw	ra,4(sp)
    f2e4:	df000017 	ldw	fp,0(sp)
    f2e8:	dec00204 	addi	sp,sp,8
    f2ec:	f800283a 	ret

0000f2f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f2f0:	defffa04 	addi	sp,sp,-24
    f2f4:	dfc00515 	stw	ra,20(sp)
    f2f8:	df000415 	stw	fp,16(sp)
    f2fc:	df000404 	addi	fp,sp,16
    f300:	e13ffd15 	stw	r4,-12(fp)
    f304:	e17ffe15 	stw	r5,-8(fp)
    f308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f30c:	e0bffd17 	ldw	r2,-12(fp)
    f310:	10800017 	ldw	r2,0(r2)
    f314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f318:	e0bffc17 	ldw	r2,-16(fp)
    f31c:	10c00a04 	addi	r3,r2,40
    f320:	e0bffd17 	ldw	r2,-12(fp)
    f324:	10800217 	ldw	r2,8(r2)
    f328:	100f883a 	mov	r7,r2
    f32c:	e1bfff17 	ldw	r6,-4(fp)
    f330:	e17ffe17 	ldw	r5,-8(fp)
    f334:	1809883a 	mov	r4,r3
    f338:	000fad40 	call	fad4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f33c:	e037883a 	mov	sp,fp
    f340:	dfc00117 	ldw	ra,4(sp)
    f344:	df000017 	ldw	fp,0(sp)
    f348:	dec00204 	addi	sp,sp,8
    f34c:	f800283a 	ret

0000f350 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f350:	defffc04 	addi	sp,sp,-16
    f354:	dfc00315 	stw	ra,12(sp)
    f358:	df000215 	stw	fp,8(sp)
    f35c:	df000204 	addi	fp,sp,8
    f360:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f364:	e0bfff17 	ldw	r2,-4(fp)
    f368:	10800017 	ldw	r2,0(r2)
    f36c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f370:	e0bffe17 	ldw	r2,-8(fp)
    f374:	10c00a04 	addi	r3,r2,40
    f378:	e0bfff17 	ldw	r2,-4(fp)
    f37c:	10800217 	ldw	r2,8(r2)
    f380:	100b883a 	mov	r5,r2
    f384:	1809883a 	mov	r4,r3
    f388:	000f7600 	call	f760 <altera_avalon_jtag_uart_close>
}
    f38c:	e037883a 	mov	sp,fp
    f390:	dfc00117 	ldw	ra,4(sp)
    f394:	df000017 	ldw	fp,0(sp)
    f398:	dec00204 	addi	sp,sp,8
    f39c:	f800283a 	ret

0000f3a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f3a0:	defffa04 	addi	sp,sp,-24
    f3a4:	dfc00515 	stw	ra,20(sp)
    f3a8:	df000415 	stw	fp,16(sp)
    f3ac:	df000404 	addi	fp,sp,16
    f3b0:	e13ffd15 	stw	r4,-12(fp)
    f3b4:	e17ffe15 	stw	r5,-8(fp)
    f3b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f3bc:	e0bffd17 	ldw	r2,-12(fp)
    f3c0:	10800017 	ldw	r2,0(r2)
    f3c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f3c8:	e0bffc17 	ldw	r2,-16(fp)
    f3cc:	10800a04 	addi	r2,r2,40
    f3d0:	e1bfff17 	ldw	r6,-4(fp)
    f3d4:	e17ffe17 	ldw	r5,-8(fp)
    f3d8:	1009883a 	mov	r4,r2
    f3dc:	000f7c80 	call	f7c8 <altera_avalon_jtag_uart_ioctl>
}
    f3e0:	e037883a 	mov	sp,fp
    f3e4:	dfc00117 	ldw	ra,4(sp)
    f3e8:	df000017 	ldw	fp,0(sp)
    f3ec:	dec00204 	addi	sp,sp,8
    f3f0:	f800283a 	ret

0000f3f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f3f4:	defffa04 	addi	sp,sp,-24
    f3f8:	dfc00515 	stw	ra,20(sp)
    f3fc:	df000415 	stw	fp,16(sp)
    f400:	df000404 	addi	fp,sp,16
    f404:	e13ffd15 	stw	r4,-12(fp)
    f408:	e17ffe15 	stw	r5,-8(fp)
    f40c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f410:	e0bffd17 	ldw	r2,-12(fp)
    f414:	00c00044 	movi	r3,1
    f418:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f41c:	e0bffd17 	ldw	r2,-12(fp)
    f420:	10800017 	ldw	r2,0(r2)
    f424:	10800104 	addi	r2,r2,4
    f428:	1007883a 	mov	r3,r2
    f42c:	e0bffd17 	ldw	r2,-12(fp)
    f430:	10800817 	ldw	r2,32(r2)
    f434:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f438:	e0bffe17 	ldw	r2,-8(fp)
    f43c:	e0ffff17 	ldw	r3,-4(fp)
    f440:	d8000015 	stw	zero,0(sp)
    f444:	e1fffd17 	ldw	r7,-12(fp)
    f448:	01800074 	movhi	r6,1
    f44c:	31bd2d04 	addi	r6,r6,-2892
    f450:	180b883a 	mov	r5,r3
    f454:	1009883a 	mov	r4,r2
    f458:	001041c0 	call	1041c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f45c:	e0bffd17 	ldw	r2,-12(fp)
    f460:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f464:	e0bffd17 	ldw	r2,-12(fp)
    f468:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f46c:	d0e72a17 	ldw	r3,-25432(gp)
    f470:	e1fffd17 	ldw	r7,-12(fp)
    f474:	01800074 	movhi	r6,1
    f478:	31bdb004 	addi	r6,r6,-2368
    f47c:	180b883a 	mov	r5,r3
    f480:	1009883a 	mov	r4,r2
    f484:	000ff040 	call	ff04 <alt_alarm_start>
    f488:	1000040e 	bge	r2,zero,f49c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f48c:	e0fffd17 	ldw	r3,-12(fp)
    f490:	00a00034 	movhi	r2,32768
    f494:	10bfffc4 	addi	r2,r2,-1
    f498:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f49c:	0001883a 	nop
    f4a0:	e037883a 	mov	sp,fp
    f4a4:	dfc00117 	ldw	ra,4(sp)
    f4a8:	df000017 	ldw	fp,0(sp)
    f4ac:	dec00204 	addi	sp,sp,8
    f4b0:	f800283a 	ret

0000f4b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f4b4:	defff804 	addi	sp,sp,-32
    f4b8:	df000715 	stw	fp,28(sp)
    f4bc:	df000704 	addi	fp,sp,28
    f4c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f4c4:	e0bfff17 	ldw	r2,-4(fp)
    f4c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f4cc:	e0bffb17 	ldw	r2,-20(fp)
    f4d0:	10800017 	ldw	r2,0(r2)
    f4d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f4d8:	e0bffc17 	ldw	r2,-16(fp)
    f4dc:	10800104 	addi	r2,r2,4
    f4e0:	10800037 	ldwio	r2,0(r2)
    f4e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f4e8:	e0bffd17 	ldw	r2,-12(fp)
    f4ec:	1080c00c 	andi	r2,r2,768
    f4f0:	10006d26 	beq	r2,zero,f6a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f4f4:	e0bffd17 	ldw	r2,-12(fp)
    f4f8:	1080400c 	andi	r2,r2,256
    f4fc:	10003526 	beq	r2,zero,f5d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f500:	00800074 	movhi	r2,1
    f504:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f508:	e0bffb17 	ldw	r2,-20(fp)
    f50c:	10800a17 	ldw	r2,40(r2)
    f510:	10800044 	addi	r2,r2,1
    f514:	1081ffcc 	andi	r2,r2,2047
    f518:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f51c:	e0bffb17 	ldw	r2,-20(fp)
    f520:	10c00b17 	ldw	r3,44(r2)
    f524:	e0bffe17 	ldw	r2,-8(fp)
    f528:	18801526 	beq	r3,r2,f580 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f52c:	e0bffc17 	ldw	r2,-16(fp)
    f530:	10800037 	ldwio	r2,0(r2)
    f534:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f538:	e0bff917 	ldw	r2,-28(fp)
    f53c:	10a0000c 	andi	r2,r2,32768
    f540:	10001126 	beq	r2,zero,f588 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f544:	e0bffb17 	ldw	r2,-20(fp)
    f548:	10800a17 	ldw	r2,40(r2)
    f54c:	e0fff917 	ldw	r3,-28(fp)
    f550:	1809883a 	mov	r4,r3
    f554:	e0fffb17 	ldw	r3,-20(fp)
    f558:	1885883a 	add	r2,r3,r2
    f55c:	10800e04 	addi	r2,r2,56
    f560:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f564:	e0bffb17 	ldw	r2,-20(fp)
    f568:	10800a17 	ldw	r2,40(r2)
    f56c:	10800044 	addi	r2,r2,1
    f570:	10c1ffcc 	andi	r3,r2,2047
    f574:	e0bffb17 	ldw	r2,-20(fp)
    f578:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f57c:	003fe206 	br	f508 <__alt_data_end+0xff00f508>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f580:	0001883a 	nop
    f584:	00000106 	br	f58c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f588:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f58c:	e0bff917 	ldw	r2,-28(fp)
    f590:	10bfffec 	andhi	r2,r2,65535
    f594:	10000f26 	beq	r2,zero,f5d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f598:	e0bffb17 	ldw	r2,-20(fp)
    f59c:	10c00817 	ldw	r3,32(r2)
    f5a0:	00bfff84 	movi	r2,-2
    f5a4:	1886703a 	and	r3,r3,r2
    f5a8:	e0bffb17 	ldw	r2,-20(fp)
    f5ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f5b0:	e0bffc17 	ldw	r2,-16(fp)
    f5b4:	10800104 	addi	r2,r2,4
    f5b8:	1007883a 	mov	r3,r2
    f5bc:	e0bffb17 	ldw	r2,-20(fp)
    f5c0:	10800817 	ldw	r2,32(r2)
    f5c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f5c8:	e0bffc17 	ldw	r2,-16(fp)
    f5cc:	10800104 	addi	r2,r2,4
    f5d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f5d4:	e0bffd17 	ldw	r2,-12(fp)
    f5d8:	1080800c 	andi	r2,r2,512
    f5dc:	103fbe26 	beq	r2,zero,f4d8 <__alt_data_end+0xff00f4d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	1004d43a 	srli	r2,r2,16
    f5e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f5ec:	00001406 	br	f640 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f5f0:	e0bffc17 	ldw	r2,-16(fp)
    f5f4:	e0fffb17 	ldw	r3,-20(fp)
    f5f8:	18c00d17 	ldw	r3,52(r3)
    f5fc:	e13ffb17 	ldw	r4,-20(fp)
    f600:	20c7883a 	add	r3,r4,r3
    f604:	18c20e04 	addi	r3,r3,2104
    f608:	18c00003 	ldbu	r3,0(r3)
    f60c:	18c03fcc 	andi	r3,r3,255
    f610:	18c0201c 	xori	r3,r3,128
    f614:	18ffe004 	addi	r3,r3,-128
    f618:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f61c:	e0bffb17 	ldw	r2,-20(fp)
    f620:	10800d17 	ldw	r2,52(r2)
    f624:	10800044 	addi	r2,r2,1
    f628:	10c1ffcc 	andi	r3,r2,2047
    f62c:	e0bffb17 	ldw	r2,-20(fp)
    f630:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f634:	e0bffa17 	ldw	r2,-24(fp)
    f638:	10bfffc4 	addi	r2,r2,-1
    f63c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f640:	e0bffa17 	ldw	r2,-24(fp)
    f644:	10000526 	beq	r2,zero,f65c <altera_avalon_jtag_uart_irq+0x1a8>
    f648:	e0bffb17 	ldw	r2,-20(fp)
    f64c:	10c00d17 	ldw	r3,52(r2)
    f650:	e0bffb17 	ldw	r2,-20(fp)
    f654:	10800c17 	ldw	r2,48(r2)
    f658:	18bfe51e 	bne	r3,r2,f5f0 <__alt_data_end+0xff00f5f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f65c:	e0bffa17 	ldw	r2,-24(fp)
    f660:	103f9d26 	beq	r2,zero,f4d8 <__alt_data_end+0xff00f4d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f664:	e0bffb17 	ldw	r2,-20(fp)
    f668:	10c00817 	ldw	r3,32(r2)
    f66c:	00bfff44 	movi	r2,-3
    f670:	1886703a 	and	r3,r3,r2
    f674:	e0bffb17 	ldw	r2,-20(fp)
    f678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f67c:	e0bffb17 	ldw	r2,-20(fp)
    f680:	10800017 	ldw	r2,0(r2)
    f684:	10800104 	addi	r2,r2,4
    f688:	1007883a 	mov	r3,r2
    f68c:	e0bffb17 	ldw	r2,-20(fp)
    f690:	10800817 	ldw	r2,32(r2)
    f694:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f698:	e0bffc17 	ldw	r2,-16(fp)
    f69c:	10800104 	addi	r2,r2,4
    f6a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f6a4:	003f8c06 	br	f4d8 <__alt_data_end+0xff00f4d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f6a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f6ac:	0001883a 	nop
    f6b0:	e037883a 	mov	sp,fp
    f6b4:	df000017 	ldw	fp,0(sp)
    f6b8:	dec00104 	addi	sp,sp,4
    f6bc:	f800283a 	ret

0000f6c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f6c0:	defff804 	addi	sp,sp,-32
    f6c4:	df000715 	stw	fp,28(sp)
    f6c8:	df000704 	addi	fp,sp,28
    f6cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f6d0:	e0bffb17 	ldw	r2,-20(fp)
    f6d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f6d8:	e0bff917 	ldw	r2,-28(fp)
    f6dc:	10800017 	ldw	r2,0(r2)
    f6e0:	10800104 	addi	r2,r2,4
    f6e4:	10800037 	ldwio	r2,0(r2)
    f6e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f6ec:	e0bffa17 	ldw	r2,-24(fp)
    f6f0:	1081000c 	andi	r2,r2,1024
    f6f4:	10000b26 	beq	r2,zero,f724 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f6f8:	e0bff917 	ldw	r2,-28(fp)
    f6fc:	10800017 	ldw	r2,0(r2)
    f700:	10800104 	addi	r2,r2,4
    f704:	1007883a 	mov	r3,r2
    f708:	e0bff917 	ldw	r2,-28(fp)
    f70c:	10800817 	ldw	r2,32(r2)
    f710:	10810014 	ori	r2,r2,1024
    f714:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f718:	e0bff917 	ldw	r2,-28(fp)
    f71c:	10000915 	stw	zero,36(r2)
    f720:	00000a06 	br	f74c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f724:	e0bff917 	ldw	r2,-28(fp)
    f728:	10c00917 	ldw	r3,36(r2)
    f72c:	00a00034 	movhi	r2,32768
    f730:	10bfff04 	addi	r2,r2,-4
    f734:	10c00536 	bltu	r2,r3,f74c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f738:	e0bff917 	ldw	r2,-28(fp)
    f73c:	10800917 	ldw	r2,36(r2)
    f740:	10c00044 	addi	r3,r2,1
    f744:	e0bff917 	ldw	r2,-28(fp)
    f748:	10c00915 	stw	r3,36(r2)
    f74c:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f750:	e037883a 	mov	sp,fp
    f754:	df000017 	ldw	fp,0(sp)
    f758:	dec00104 	addi	sp,sp,4
    f75c:	f800283a 	ret

0000f760 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f760:	defffd04 	addi	sp,sp,-12
    f764:	df000215 	stw	fp,8(sp)
    f768:	df000204 	addi	fp,sp,8
    f76c:	e13ffe15 	stw	r4,-8(fp)
    f770:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f774:	00000506 	br	f78c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f778:	e0bfff17 	ldw	r2,-4(fp)
    f77c:	1090000c 	andi	r2,r2,16384
    f780:	10000226 	beq	r2,zero,f78c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f784:	00bffd44 	movi	r2,-11
    f788:	00000b06 	br	f7b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f78c:	e0bffe17 	ldw	r2,-8(fp)
    f790:	10c00d17 	ldw	r3,52(r2)
    f794:	e0bffe17 	ldw	r2,-8(fp)
    f798:	10800c17 	ldw	r2,48(r2)
    f79c:	18800526 	beq	r3,r2,f7b4 <altera_avalon_jtag_uart_close+0x54>
    f7a0:	e0bffe17 	ldw	r2,-8(fp)
    f7a4:	10c00917 	ldw	r3,36(r2)
    f7a8:	e0bffe17 	ldw	r2,-8(fp)
    f7ac:	10800117 	ldw	r2,4(r2)
    f7b0:	18bff136 	bltu	r3,r2,f778 <__alt_data_end+0xff00f778>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f7b4:	0005883a 	mov	r2,zero
}
    f7b8:	e037883a 	mov	sp,fp
    f7bc:	df000017 	ldw	fp,0(sp)
    f7c0:	dec00104 	addi	sp,sp,4
    f7c4:	f800283a 	ret

0000f7c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f7c8:	defffa04 	addi	sp,sp,-24
    f7cc:	df000515 	stw	fp,20(sp)
    f7d0:	df000504 	addi	fp,sp,20
    f7d4:	e13ffd15 	stw	r4,-12(fp)
    f7d8:	e17ffe15 	stw	r5,-8(fp)
    f7dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f7e0:	00bff9c4 	movi	r2,-25
    f7e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	10da8060 	cmpeqi	r3,r2,27137
    f7f0:	1800031e 	bne	r3,zero,f800 <altera_avalon_jtag_uart_ioctl+0x38>
    f7f4:	109a80a0 	cmpeqi	r2,r2,27138
    f7f8:	1000181e 	bne	r2,zero,f85c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f7fc:	00002906 	br	f8a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f800:	e0bffd17 	ldw	r2,-12(fp)
    f804:	10c00117 	ldw	r3,4(r2)
    f808:	00a00034 	movhi	r2,32768
    f80c:	10bfffc4 	addi	r2,r2,-1
    f810:	18802126 	beq	r3,r2,f898 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f814:	e0bfff17 	ldw	r2,-4(fp)
    f818:	10800017 	ldw	r2,0(r2)
    f81c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f820:	e0bffc17 	ldw	r2,-16(fp)
    f824:	10800090 	cmplti	r2,r2,2
    f828:	1000061e 	bne	r2,zero,f844 <altera_avalon_jtag_uart_ioctl+0x7c>
    f82c:	e0fffc17 	ldw	r3,-16(fp)
    f830:	00a00034 	movhi	r2,32768
    f834:	10bfffc4 	addi	r2,r2,-1
    f838:	18800226 	beq	r3,r2,f844 <altera_avalon_jtag_uart_ioctl+0x7c>
    f83c:	e0bffc17 	ldw	r2,-16(fp)
    f840:	00000206 	br	f84c <altera_avalon_jtag_uart_ioctl+0x84>
    f844:	00a00034 	movhi	r2,32768
    f848:	10bfff84 	addi	r2,r2,-2
    f84c:	e0fffd17 	ldw	r3,-12(fp)
    f850:	18800115 	stw	r2,4(r3)
      rc = 0;
    f854:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f858:	00000f06 	br	f898 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	10c00117 	ldw	r3,4(r2)
    f864:	00a00034 	movhi	r2,32768
    f868:	10bfffc4 	addi	r2,r2,-1
    f86c:	18800c26 	beq	r3,r2,f8a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f870:	e0bffd17 	ldw	r2,-12(fp)
    f874:	10c00917 	ldw	r3,36(r2)
    f878:	e0bffd17 	ldw	r2,-12(fp)
    f87c:	10800117 	ldw	r2,4(r2)
    f880:	1885803a 	cmpltu	r2,r3,r2
    f884:	10c03fcc 	andi	r3,r2,255
    f888:	e0bfff17 	ldw	r2,-4(fp)
    f88c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f890:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f894:	00000206 	br	f8a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f898:	0001883a 	nop
    f89c:	00000106 	br	f8a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f8a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f8a4:	e0bffb17 	ldw	r2,-20(fp)
}
    f8a8:	e037883a 	mov	sp,fp
    f8ac:	df000017 	ldw	fp,0(sp)
    f8b0:	dec00104 	addi	sp,sp,4
    f8b4:	f800283a 	ret

0000f8b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f8b8:	defff304 	addi	sp,sp,-52
    f8bc:	dfc00c15 	stw	ra,48(sp)
    f8c0:	df000b15 	stw	fp,44(sp)
    f8c4:	df000b04 	addi	fp,sp,44
    f8c8:	e13ffc15 	stw	r4,-16(fp)
    f8cc:	e17ffd15 	stw	r5,-12(fp)
    f8d0:	e1bffe15 	stw	r6,-8(fp)
    f8d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f8d8:	e0bffd17 	ldw	r2,-12(fp)
    f8dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f8e0:	00004706 	br	fa00 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f8e4:	e0bffc17 	ldw	r2,-16(fp)
    f8e8:	10800a17 	ldw	r2,40(r2)
    f8ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10800b17 	ldw	r2,44(r2)
    f8f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f8fc:	e0fff717 	ldw	r3,-36(fp)
    f900:	e0bff817 	ldw	r2,-32(fp)
    f904:	18800536 	bltu	r3,r2,f91c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f908:	e0fff717 	ldw	r3,-36(fp)
    f90c:	e0bff817 	ldw	r2,-32(fp)
    f910:	1885c83a 	sub	r2,r3,r2
    f914:	e0bff615 	stw	r2,-40(fp)
    f918:	00000406 	br	f92c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f91c:	00c20004 	movi	r3,2048
    f920:	e0bff817 	ldw	r2,-32(fp)
    f924:	1885c83a 	sub	r2,r3,r2
    f928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f92c:	e0bff617 	ldw	r2,-40(fp)
    f930:	10001e26 	beq	r2,zero,f9ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f934:	e0fffe17 	ldw	r3,-8(fp)
    f938:	e0bff617 	ldw	r2,-40(fp)
    f93c:	1880022e 	bgeu	r3,r2,f948 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f940:	e0bffe17 	ldw	r2,-8(fp)
    f944:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f948:	e0bffc17 	ldw	r2,-16(fp)
    f94c:	10c00e04 	addi	r3,r2,56
    f950:	e0bff817 	ldw	r2,-32(fp)
    f954:	1885883a 	add	r2,r3,r2
    f958:	e1bff617 	ldw	r6,-40(fp)
    f95c:	100b883a 	mov	r5,r2
    f960:	e13ff517 	ldw	r4,-44(fp)
    f964:	00085640 	call	8564 <memcpy>
      ptr   += n;
    f968:	e0fff517 	ldw	r3,-44(fp)
    f96c:	e0bff617 	ldw	r2,-40(fp)
    f970:	1885883a 	add	r2,r3,r2
    f974:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f978:	e0fffe17 	ldw	r3,-8(fp)
    f97c:	e0bff617 	ldw	r2,-40(fp)
    f980:	1885c83a 	sub	r2,r3,r2
    f984:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f988:	e0fff817 	ldw	r3,-32(fp)
    f98c:	e0bff617 	ldw	r2,-40(fp)
    f990:	1885883a 	add	r2,r3,r2
    f994:	10c1ffcc 	andi	r3,r2,2047
    f998:	e0bffc17 	ldw	r2,-16(fp)
    f99c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f9a0:	e0bffe17 	ldw	r2,-8(fp)
    f9a4:	00bfcf16 	blt	zero,r2,f8e4 <__alt_data_end+0xff00f8e4>
    f9a8:	00000106 	br	f9b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f9ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f9b0:	e0fff517 	ldw	r3,-44(fp)
    f9b4:	e0bffd17 	ldw	r2,-12(fp)
    f9b8:	1880141e 	bne	r3,r2,fa0c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f9bc:	e0bfff17 	ldw	r2,-4(fp)
    f9c0:	1090000c 	andi	r2,r2,16384
    f9c4:	1000131e 	bne	r2,zero,fa14 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f9c8:	0001883a 	nop
    f9cc:	e0bffc17 	ldw	r2,-16(fp)
    f9d0:	10c00a17 	ldw	r3,40(r2)
    f9d4:	e0bff717 	ldw	r2,-36(fp)
    f9d8:	1880051e 	bne	r3,r2,f9f0 <altera_avalon_jtag_uart_read+0x138>
    f9dc:	e0bffc17 	ldw	r2,-16(fp)
    f9e0:	10c00917 	ldw	r3,36(r2)
    f9e4:	e0bffc17 	ldw	r2,-16(fp)
    f9e8:	10800117 	ldw	r2,4(r2)
    f9ec:	18bff736 	bltu	r3,r2,f9cc <__alt_data_end+0xff00f9cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f9f0:	e0bffc17 	ldw	r2,-16(fp)
    f9f4:	10c00a17 	ldw	r3,40(r2)
    f9f8:	e0bff717 	ldw	r2,-36(fp)
    f9fc:	18800726 	beq	r3,r2,fa1c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fa00:	e0bffe17 	ldw	r2,-8(fp)
    fa04:	00bfb716 	blt	zero,r2,f8e4 <__alt_data_end+0xff00f8e4>
    fa08:	00000506 	br	fa20 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fa0c:	0001883a 	nop
    fa10:	00000306 	br	fa20 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fa14:	0001883a 	nop
    fa18:	00000106 	br	fa20 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fa1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fa20:	e0fff517 	ldw	r3,-44(fp)
    fa24:	e0bffd17 	ldw	r2,-12(fp)
    fa28:	18801826 	beq	r3,r2,fa8c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa2c:	0005303a 	rdctl	r2,status
    fa30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa34:	e0fffb17 	ldw	r3,-20(fp)
    fa38:	00bfff84 	movi	r2,-2
    fa3c:	1884703a 	and	r2,r3,r2
    fa40:	1001703a 	wrctl	status,r2
  
  return context;
    fa44:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fa48:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa4c:	e0bffc17 	ldw	r2,-16(fp)
    fa50:	10800817 	ldw	r2,32(r2)
    fa54:	10c00054 	ori	r3,r2,1
    fa58:	e0bffc17 	ldw	r2,-16(fp)
    fa5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fa60:	e0bffc17 	ldw	r2,-16(fp)
    fa64:	10800017 	ldw	r2,0(r2)
    fa68:	10800104 	addi	r2,r2,4
    fa6c:	1007883a 	mov	r3,r2
    fa70:	e0bffc17 	ldw	r2,-16(fp)
    fa74:	10800817 	ldw	r2,32(r2)
    fa78:	18800035 	stwio	r2,0(r3)
    fa7c:	e0bffa17 	ldw	r2,-24(fp)
    fa80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa84:	e0bff917 	ldw	r2,-28(fp)
    fa88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fa8c:	e0fff517 	ldw	r3,-44(fp)
    fa90:	e0bffd17 	ldw	r2,-12(fp)
    fa94:	18800426 	beq	r3,r2,faa8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fa98:	e0fff517 	ldw	r3,-44(fp)
    fa9c:	e0bffd17 	ldw	r2,-12(fp)
    faa0:	1885c83a 	sub	r2,r3,r2
    faa4:	00000606 	br	fac0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    faa8:	e0bfff17 	ldw	r2,-4(fp)
    faac:	1090000c 	andi	r2,r2,16384
    fab0:	10000226 	beq	r2,zero,fabc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fab4:	00bffd44 	movi	r2,-11
    fab8:	00000106 	br	fac0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fabc:	00bffec4 	movi	r2,-5
}
    fac0:	e037883a 	mov	sp,fp
    fac4:	dfc00117 	ldw	ra,4(sp)
    fac8:	df000017 	ldw	fp,0(sp)
    facc:	dec00204 	addi	sp,sp,8
    fad0:	f800283a 	ret

0000fad4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fad4:	defff304 	addi	sp,sp,-52
    fad8:	dfc00c15 	stw	ra,48(sp)
    fadc:	df000b15 	stw	fp,44(sp)
    fae0:	df000b04 	addi	fp,sp,44
    fae4:	e13ffc15 	stw	r4,-16(fp)
    fae8:	e17ffd15 	stw	r5,-12(fp)
    faec:	e1bffe15 	stw	r6,-8(fp)
    faf0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    faf4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    faf8:	e0bffd17 	ldw	r2,-12(fp)
    fafc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fb00:	00003706 	br	fbe0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fb04:	e0bffc17 	ldw	r2,-16(fp)
    fb08:	10800c17 	ldw	r2,48(r2)
    fb0c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fb10:	e0bffc17 	ldw	r2,-16(fp)
    fb14:	10800d17 	ldw	r2,52(r2)
    fb18:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fb1c:	e0fff917 	ldw	r3,-28(fp)
    fb20:	e0bff517 	ldw	r2,-44(fp)
    fb24:	1880062e 	bgeu	r3,r2,fb40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fb28:	e0fff517 	ldw	r3,-44(fp)
    fb2c:	e0bff917 	ldw	r2,-28(fp)
    fb30:	1885c83a 	sub	r2,r3,r2
    fb34:	10bfffc4 	addi	r2,r2,-1
    fb38:	e0bff615 	stw	r2,-40(fp)
    fb3c:	00000b06 	br	fb6c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fb40:	e0bff517 	ldw	r2,-44(fp)
    fb44:	10000526 	beq	r2,zero,fb5c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fb48:	00c20004 	movi	r3,2048
    fb4c:	e0bff917 	ldw	r2,-28(fp)
    fb50:	1885c83a 	sub	r2,r3,r2
    fb54:	e0bff615 	stw	r2,-40(fp)
    fb58:	00000406 	br	fb6c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fb5c:	00c1ffc4 	movi	r3,2047
    fb60:	e0bff917 	ldw	r2,-28(fp)
    fb64:	1885c83a 	sub	r2,r3,r2
    fb68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fb6c:	e0bff617 	ldw	r2,-40(fp)
    fb70:	10001e26 	beq	r2,zero,fbec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fb74:	e0fffe17 	ldw	r3,-8(fp)
    fb78:	e0bff617 	ldw	r2,-40(fp)
    fb7c:	1880022e 	bgeu	r3,r2,fb88 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fb80:	e0bffe17 	ldw	r2,-8(fp)
    fb84:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fb88:	e0bffc17 	ldw	r2,-16(fp)
    fb8c:	10c20e04 	addi	r3,r2,2104
    fb90:	e0bff917 	ldw	r2,-28(fp)
    fb94:	1885883a 	add	r2,r3,r2
    fb98:	e1bff617 	ldw	r6,-40(fp)
    fb9c:	e17ffd17 	ldw	r5,-12(fp)
    fba0:	1009883a 	mov	r4,r2
    fba4:	00085640 	call	8564 <memcpy>
      ptr   += n;
    fba8:	e0fffd17 	ldw	r3,-12(fp)
    fbac:	e0bff617 	ldw	r2,-40(fp)
    fbb0:	1885883a 	add	r2,r3,r2
    fbb4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fbb8:	e0fffe17 	ldw	r3,-8(fp)
    fbbc:	e0bff617 	ldw	r2,-40(fp)
    fbc0:	1885c83a 	sub	r2,r3,r2
    fbc4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fbc8:	e0fff917 	ldw	r3,-28(fp)
    fbcc:	e0bff617 	ldw	r2,-40(fp)
    fbd0:	1885883a 	add	r2,r3,r2
    fbd4:	10c1ffcc 	andi	r3,r2,2047
    fbd8:	e0bffc17 	ldw	r2,-16(fp)
    fbdc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fbe0:	e0bffe17 	ldw	r2,-8(fp)
    fbe4:	00bfc716 	blt	zero,r2,fb04 <__alt_data_end+0xff00fb04>
    fbe8:	00000106 	br	fbf0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fbec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbf0:	0005303a 	rdctl	r2,status
    fbf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbf8:	e0fffb17 	ldw	r3,-20(fp)
    fbfc:	00bfff84 	movi	r2,-2
    fc00:	1884703a 	and	r2,r3,r2
    fc04:	1001703a 	wrctl	status,r2
  
  return context;
    fc08:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fc0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fc10:	e0bffc17 	ldw	r2,-16(fp)
    fc14:	10800817 	ldw	r2,32(r2)
    fc18:	10c00094 	ori	r3,r2,2
    fc1c:	e0bffc17 	ldw	r2,-16(fp)
    fc20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fc24:	e0bffc17 	ldw	r2,-16(fp)
    fc28:	10800017 	ldw	r2,0(r2)
    fc2c:	10800104 	addi	r2,r2,4
    fc30:	1007883a 	mov	r3,r2
    fc34:	e0bffc17 	ldw	r2,-16(fp)
    fc38:	10800817 	ldw	r2,32(r2)
    fc3c:	18800035 	stwio	r2,0(r3)
    fc40:	e0bffa17 	ldw	r2,-24(fp)
    fc44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc48:	e0bff817 	ldw	r2,-32(fp)
    fc4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fc50:	e0bffe17 	ldw	r2,-8(fp)
    fc54:	0080100e 	bge	zero,r2,fc98 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fc58:	e0bfff17 	ldw	r2,-4(fp)
    fc5c:	1090000c 	andi	r2,r2,16384
    fc60:	1000101e 	bne	r2,zero,fca4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fc64:	0001883a 	nop
    fc68:	e0bffc17 	ldw	r2,-16(fp)
    fc6c:	10c00d17 	ldw	r3,52(r2)
    fc70:	e0bff517 	ldw	r2,-44(fp)
    fc74:	1880051e 	bne	r3,r2,fc8c <altera_avalon_jtag_uart_write+0x1b8>
    fc78:	e0bffc17 	ldw	r2,-16(fp)
    fc7c:	10c00917 	ldw	r3,36(r2)
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	10800117 	ldw	r2,4(r2)
    fc88:	18bff736 	bltu	r3,r2,fc68 <__alt_data_end+0xff00fc68>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fc8c:	e0bffc17 	ldw	r2,-16(fp)
    fc90:	10800917 	ldw	r2,36(r2)
    fc94:	1000051e 	bne	r2,zero,fcac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	00bfd016 	blt	zero,r2,fbe0 <__alt_data_end+0xff00fbe0>
    fca0:	00000306 	br	fcb0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fca4:	0001883a 	nop
    fca8:	00000106 	br	fcb0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fcac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fcb0:	e0fffd17 	ldw	r3,-12(fp)
    fcb4:	e0bff717 	ldw	r2,-36(fp)
    fcb8:	18800426 	beq	r3,r2,fccc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fcbc:	e0fffd17 	ldw	r3,-12(fp)
    fcc0:	e0bff717 	ldw	r2,-36(fp)
    fcc4:	1885c83a 	sub	r2,r3,r2
    fcc8:	00000606 	br	fce4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fccc:	e0bfff17 	ldw	r2,-4(fp)
    fcd0:	1090000c 	andi	r2,r2,16384
    fcd4:	10000226 	beq	r2,zero,fce0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fcd8:	00bffd44 	movi	r2,-11
    fcdc:	00000106 	br	fce4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fce0:	00bffec4 	movi	r2,-5
}
    fce4:	e037883a 	mov	sp,fp
    fce8:	dfc00117 	ldw	ra,4(sp)
    fcec:	df000017 	ldw	fp,0(sp)
    fcf0:	dec00204 	addi	sp,sp,8
    fcf4:	f800283a 	ret

0000fcf8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fcf8:	defffa04 	addi	sp,sp,-24
    fcfc:	dfc00515 	stw	ra,20(sp)
    fd00:	df000415 	stw	fp,16(sp)
    fd04:	df000404 	addi	fp,sp,16
    fd08:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fd0c:	0007883a 	mov	r3,zero
    fd10:	e0bfff17 	ldw	r2,-4(fp)
    fd14:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fd18:	e0bfff17 	ldw	r2,-4(fp)
    fd1c:	10800104 	addi	r2,r2,4
    fd20:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd24:	0005303a 	rdctl	r2,status
    fd28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd2c:	e0fffd17 	ldw	r3,-12(fp)
    fd30:	00bfff84 	movi	r2,-2
    fd34:	1884703a 	and	r2,r3,r2
    fd38:	1001703a 	wrctl	status,r2
  
  return context;
    fd3c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fd40:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fd44:	0010aec0 	call	10aec <alt_tick>
    fd48:	e0bffc17 	ldw	r2,-16(fp)
    fd4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd50:	e0bffe17 	ldw	r2,-8(fp)
    fd54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fd58:	0001883a 	nop
    fd5c:	e037883a 	mov	sp,fp
    fd60:	dfc00117 	ldw	ra,4(sp)
    fd64:	df000017 	ldw	fp,0(sp)
    fd68:	dec00204 	addi	sp,sp,8
    fd6c:	f800283a 	ret

0000fd70 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fd70:	defff804 	addi	sp,sp,-32
    fd74:	dfc00715 	stw	ra,28(sp)
    fd78:	df000615 	stw	fp,24(sp)
    fd7c:	df000604 	addi	fp,sp,24
    fd80:	e13ffc15 	stw	r4,-16(fp)
    fd84:	e17ffd15 	stw	r5,-12(fp)
    fd88:	e1bffe15 	stw	r6,-8(fp)
    fd8c:	e1ffff15 	stw	r7,-4(fp)
    fd90:	e0bfff17 	ldw	r2,-4(fp)
    fd94:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fd98:	d0a72a17 	ldw	r2,-25432(gp)
    fd9c:	1000021e 	bne	r2,zero,fda8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fda0:	e0bffb17 	ldw	r2,-20(fp)
    fda4:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fda8:	e0bffc17 	ldw	r2,-16(fp)
    fdac:	10800104 	addi	r2,r2,4
    fdb0:	00c001c4 	movi	r3,7
    fdb4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fdb8:	d8000015 	stw	zero,0(sp)
    fdbc:	e1fffc17 	ldw	r7,-16(fp)
    fdc0:	01800074 	movhi	r6,1
    fdc4:	31bf3e04 	addi	r6,r6,-776
    fdc8:	e17ffe17 	ldw	r5,-8(fp)
    fdcc:	e13ffd17 	ldw	r4,-12(fp)
    fdd0:	001041c0 	call	1041c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fdd4:	0001883a 	nop
    fdd8:	e037883a 	mov	sp,fp
    fddc:	dfc00117 	ldw	ra,4(sp)
    fde0:	df000017 	ldw	fp,0(sp)
    fde4:	dec00204 	addi	sp,sp,8
    fde8:	f800283a 	ret

0000fdec <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fdec:	defffe04 	addi	sp,sp,-8
    fdf0:	df000115 	stw	fp,4(sp)
    fdf4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fdf8:	d0a72717 	ldw	r2,-25444(gp)
    fdfc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fe00:	d0a72817 	ldw	r2,-25440(gp)
    fe04:	1000021e 	bne	r2,zero,fe10 <alt_timestamp_start+0x24>
  {
    return -1;
    fe08:	00bfffc4 	movi	r2,-1
    fe0c:	00001106 	br	fe54 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fe10:	e0bfff17 	ldw	r2,-4(fp)
    fe14:	10800104 	addi	r2,r2,4
    fe18:	00c00204 	movi	r3,8
    fe1c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fe20:	e0bfff17 	ldw	r2,-4(fp)
    fe24:	10800204 	addi	r2,r2,8
    fe28:	00ffffd4 	movui	r3,65535
    fe2c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fe30:	e0bfff17 	ldw	r2,-4(fp)
    fe34:	10800304 	addi	r2,r2,12
    fe38:	00ffffd4 	movui	r3,65535
    fe3c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fe40:	e0bfff17 	ldw	r2,-4(fp)
    fe44:	10800104 	addi	r2,r2,4
    fe48:	00c00104 	movi	r3,4
    fe4c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fe50:	0005883a 	mov	r2,zero
}
    fe54:	e037883a 	mov	sp,fp
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00104 	addi	sp,sp,4
    fe60:	f800283a 	ret

0000fe64 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fe64:	defffc04 	addi	sp,sp,-16
    fe68:	df000315 	stw	fp,12(sp)
    fe6c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fe70:	d0a72717 	ldw	r2,-25444(gp)
    fe74:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fe78:	d0a72817 	ldw	r2,-25440(gp)
    fe7c:	1000021e 	bne	r2,zero,fe88 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fe80:	00bfffc4 	movi	r2,-1
    fe84:	00001306 	br	fed4 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10800404 	addi	r2,r2,16
    fe90:	0007883a 	mov	r3,zero
    fe94:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	10800404 	addi	r2,r2,16
    fea0:	10800037 	ldwio	r2,0(r2)
    fea4:	10bfffcc 	andi	r2,r2,65535
    fea8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    feac:	e0bffd17 	ldw	r2,-12(fp)
    feb0:	10800504 	addi	r2,r2,20
    feb4:	10800037 	ldwio	r2,0(r2)
    feb8:	10bfffcc 	andi	r2,r2,65535
    febc:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fec0:	e0bfff17 	ldw	r2,-4(fp)
    fec4:	1006943a 	slli	r3,r2,16
    fec8:	e0bffe17 	ldw	r2,-8(fp)
    fecc:	1884b03a 	or	r2,r3,r2
    fed0:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fed4:	e037883a 	mov	sp,fp
    fed8:	df000017 	ldw	fp,0(sp)
    fedc:	dec00104 	addi	sp,sp,4
    fee0:	f800283a 	ret

0000fee4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fee4:	deffff04 	addi	sp,sp,-4
    fee8:	df000015 	stw	fp,0(sp)
    feec:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fef0:	d0a72817 	ldw	r2,-25440(gp)
}
    fef4:	e037883a 	mov	sp,fp
    fef8:	df000017 	ldw	fp,0(sp)
    fefc:	dec00104 	addi	sp,sp,4
    ff00:	f800283a 	ret

0000ff04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ff04:	defff504 	addi	sp,sp,-44
    ff08:	df000a15 	stw	fp,40(sp)
    ff0c:	df000a04 	addi	fp,sp,40
    ff10:	e13ffc15 	stw	r4,-16(fp)
    ff14:	e17ffd15 	stw	r5,-12(fp)
    ff18:	e1bffe15 	stw	r6,-8(fp)
    ff1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ff20:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ff24:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
    ff28:	10003c26 	beq	r2,zero,1001c <alt_alarm_start+0x118>
  {
    if (alarm)
    ff2c:	e0bffc17 	ldw	r2,-16(fp)
    ff30:	10003826 	beq	r2,zero,10014 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    ff34:	e0bffc17 	ldw	r2,-16(fp)
    ff38:	e0fffe17 	ldw	r3,-8(fp)
    ff3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ff40:	e0bffc17 	ldw	r2,-16(fp)
    ff44:	e0ffff17 	ldw	r3,-4(fp)
    ff48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff4c:	0005303a 	rdctl	r2,status
    ff50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff54:	e0fff917 	ldw	r3,-28(fp)
    ff58:	00bfff84 	movi	r2,-2
    ff5c:	1884703a 	and	r2,r3,r2
    ff60:	1001703a 	wrctl	status,r2
  
  return context;
    ff64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ff68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ff6c:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
    ff70:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ff74:	e0fffd17 	ldw	r3,-12(fp)
    ff78:	e0bff617 	ldw	r2,-40(fp)
    ff7c:	1885883a 	add	r2,r3,r2
    ff80:	10c00044 	addi	r3,r2,1
    ff84:	e0bffc17 	ldw	r2,-16(fp)
    ff88:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ff8c:	e0bffc17 	ldw	r2,-16(fp)
    ff90:	10c00217 	ldw	r3,8(r2)
    ff94:	e0bff617 	ldw	r2,-40(fp)
    ff98:	1880042e 	bgeu	r3,r2,ffac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ff9c:	e0bffc17 	ldw	r2,-16(fp)
    ffa0:	00c00044 	movi	r3,1
    ffa4:	10c00405 	stb	r3,16(r2)
    ffa8:	00000206 	br	ffb4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ffac:	e0bffc17 	ldw	r2,-16(fp)
    ffb0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ffb4:	e0bffc17 	ldw	r2,-16(fp)
    ffb8:	d0e00e04 	addi	r3,gp,-32712
    ffbc:	e0fffa15 	stw	r3,-24(fp)
    ffc0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ffc4:	e0bffb17 	ldw	r2,-20(fp)
    ffc8:	e0fffa17 	ldw	r3,-24(fp)
    ffcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ffd0:	e0bffa17 	ldw	r2,-24(fp)
    ffd4:	10c00017 	ldw	r3,0(r2)
    ffd8:	e0bffb17 	ldw	r2,-20(fp)
    ffdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ffe0:	e0bffa17 	ldw	r2,-24(fp)
    ffe4:	10800017 	ldw	r2,0(r2)
    ffe8:	e0fffb17 	ldw	r3,-20(fp)
    ffec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fff0:	e0bffa17 	ldw	r2,-24(fp)
    fff4:	e0fffb17 	ldw	r3,-20(fp)
    fff8:	10c00015 	stw	r3,0(r2)
    fffc:	e0bff817 	ldw	r2,-32(fp)
   10000:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10004:	e0bff717 	ldw	r2,-36(fp)
   10008:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1000c:	0005883a 	mov	r2,zero
   10010:	00000306 	br	10020 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10014:	00bffa84 	movi	r2,-22
   10018:	00000106 	br	10020 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1001c:	00bfde84 	movi	r2,-134
  }
}
   10020:	e037883a 	mov	sp,fp
   10024:	df000017 	ldw	fp,0(sp)
   10028:	dec00104 	addi	sp,sp,4
   1002c:	f800283a 	ret

00010030 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10030:	defffa04 	addi	sp,sp,-24
   10034:	dfc00515 	stw	ra,20(sp)
   10038:	df000415 	stw	fp,16(sp)
   1003c:	df000404 	addi	fp,sp,16
   10040:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10044:	008000c4 	movi	r2,3
   10048:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1004c:	e0fffd17 	ldw	r3,-12(fp)
   10050:	008003f4 	movhi	r2,15
   10054:	10909004 	addi	r2,r2,16960
   10058:	1885383a 	mul	r2,r3,r2
   1005c:	100b883a 	mov	r5,r2
   10060:	0100bef4 	movhi	r4,763
   10064:	213c2004 	addi	r4,r4,-3968
   10068:	0001f6c0 	call	1f6c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1006c:	100b883a 	mov	r5,r2
   10070:	01200034 	movhi	r4,32768
   10074:	213fffc4 	addi	r4,r4,-1
   10078:	0001f6c0 	call	1f6c <__udivsi3>
   1007c:	100b883a 	mov	r5,r2
   10080:	e13fff17 	ldw	r4,-4(fp)
   10084:	0001f6c0 	call	1f6c <__udivsi3>
   10088:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1008c:	e0bffe17 	ldw	r2,-8(fp)
   10090:	10002a26 	beq	r2,zero,1013c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10094:	e03ffc15 	stw	zero,-16(fp)
   10098:	00001706 	br	100f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1009c:	00a00034 	movhi	r2,32768
   100a0:	10bfffc4 	addi	r2,r2,-1
   100a4:	10bfffc4 	addi	r2,r2,-1
   100a8:	103ffe1e 	bne	r2,zero,100a4 <__alt_data_end+0xff0100a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   100ac:	e0fffd17 	ldw	r3,-12(fp)
   100b0:	008003f4 	movhi	r2,15
   100b4:	10909004 	addi	r2,r2,16960
   100b8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   100bc:	100b883a 	mov	r5,r2
   100c0:	0100bef4 	movhi	r4,763
   100c4:	213c2004 	addi	r4,r4,-3968
   100c8:	0001f6c0 	call	1f6c <__udivsi3>
   100cc:	100b883a 	mov	r5,r2
   100d0:	01200034 	movhi	r4,32768
   100d4:	213fffc4 	addi	r4,r4,-1
   100d8:	0001f6c0 	call	1f6c <__udivsi3>
   100dc:	1007883a 	mov	r3,r2
   100e0:	e0bfff17 	ldw	r2,-4(fp)
   100e4:	10c5c83a 	sub	r2,r2,r3
   100e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   100ec:	e0bffc17 	ldw	r2,-16(fp)
   100f0:	10800044 	addi	r2,r2,1
   100f4:	e0bffc15 	stw	r2,-16(fp)
   100f8:	e0fffc17 	ldw	r3,-16(fp)
   100fc:	e0bffe17 	ldw	r2,-8(fp)
   10100:	18bfe616 	blt	r3,r2,1009c <__alt_data_end+0xff01009c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10104:	e0fffd17 	ldw	r3,-12(fp)
   10108:	008003f4 	movhi	r2,15
   1010c:	10909004 	addi	r2,r2,16960
   10110:	1885383a 	mul	r2,r3,r2
   10114:	100b883a 	mov	r5,r2
   10118:	0100bef4 	movhi	r4,763
   1011c:	213c2004 	addi	r4,r4,-3968
   10120:	0001f6c0 	call	1f6c <__udivsi3>
   10124:	1007883a 	mov	r3,r2
   10128:	e0bfff17 	ldw	r2,-4(fp)
   1012c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10130:	10bfffc4 	addi	r2,r2,-1
   10134:	103ffe1e 	bne	r2,zero,10130 <__alt_data_end+0xff010130>
   10138:	00000d06 	br	10170 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1013c:	e0fffd17 	ldw	r3,-12(fp)
   10140:	008003f4 	movhi	r2,15
   10144:	10909004 	addi	r2,r2,16960
   10148:	1885383a 	mul	r2,r3,r2
   1014c:	100b883a 	mov	r5,r2
   10150:	0100bef4 	movhi	r4,763
   10154:	213c2004 	addi	r4,r4,-3968
   10158:	0001f6c0 	call	1f6c <__udivsi3>
   1015c:	1007883a 	mov	r3,r2
   10160:	e0bfff17 	ldw	r2,-4(fp)
   10164:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10168:	10bfffc4 	addi	r2,r2,-1
   1016c:	00bffe16 	blt	zero,r2,10168 <__alt_data_end+0xff010168>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10170:	0005883a 	mov	r2,zero
}
   10174:	e037883a 	mov	sp,fp
   10178:	dfc00117 	ldw	ra,4(sp)
   1017c:	df000017 	ldw	fp,0(sp)
   10180:	dec00204 	addi	sp,sp,8
   10184:	f800283a 	ret

00010188 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   10188:	defffb04 	addi	sp,sp,-20
   1018c:	df000415 	stw	fp,16(sp)
   10190:	df000404 	addi	fp,sp,16
   10194:	e13ffe15 	stw	r4,-8(fp)
   10198:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   1019c:	e0fffe17 	ldw	r3,-8(fp)
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	1885883a 	add	r2,r3,r2
   101a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   101ac:	e0bffe17 	ldw	r2,-8(fp)
   101b0:	e0bffc15 	stw	r2,-16(fp)
   101b4:	00000506 	br	101cc <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   101b8:	e0bffc17 	ldw	r2,-16(fp)
   101bc:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   101c0:	e0bffc17 	ldw	r2,-16(fp)
   101c4:	10800804 	addi	r2,r2,32
   101c8:	e0bffc15 	stw	r2,-16(fp)
   101cc:	e0fffc17 	ldw	r3,-16(fp)
   101d0:	e0bffd17 	ldw	r2,-12(fp)
   101d4:	18bff836 	bltu	r3,r2,101b8 <__alt_data_end+0xff0101b8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   101d8:	e0bffe17 	ldw	r2,-8(fp)
   101dc:	108007cc 	andi	r2,r2,31
   101e0:	10000226 	beq	r2,zero,101ec <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   101e4:	e0bffc17 	ldw	r2,-16(fp)
   101e8:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   101ec:	0001883a 	nop
   101f0:	e037883a 	mov	sp,fp
   101f4:	df000017 	ldw	fp,0(sp)
   101f8:	dec00104 	addi	sp,sp,4
   101fc:	f800283a 	ret

00010200 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10200:	defffe04 	addi	sp,sp,-8
   10204:	df000115 	stw	fp,4(sp)
   10208:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1020c:	e03fff15 	stw	zero,-4(fp)
   10210:	00000506 	br	10228 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1021c:	e0bfff17 	ldw	r2,-4(fp)
   10220:	10800804 	addi	r2,r2,32
   10224:	e0bfff15 	stw	r2,-4(fp)
   10228:	e0bfff17 	ldw	r2,-4(fp)
   1022c:	10a00030 	cmpltui	r2,r2,32768
   10230:	103ff81e 	bne	r2,zero,10214 <__alt_data_end+0xff010214>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10234:	0001883a 	nop
   10238:	e037883a 	mov	sp,fp
   1023c:	df000017 	ldw	fp,0(sp)
   10240:	dec00104 	addi	sp,sp,4
   10244:	f800283a 	ret

00010248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10248:	defffe04 	addi	sp,sp,-8
   1024c:	dfc00115 	stw	ra,4(sp)
   10250:	df000015 	stw	fp,0(sp)
   10254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10258:	d0a00b17 	ldw	r2,-32724(gp)
   1025c:	10000326 	beq	r2,zero,1026c <alt_get_errno+0x24>
   10260:	d0a00b17 	ldw	r2,-32724(gp)
   10264:	103ee83a 	callr	r2
   10268:	00000106 	br	10270 <alt_get_errno+0x28>
   1026c:	d0a72004 	addi	r2,gp,-25472
}
   10270:	e037883a 	mov	sp,fp
   10274:	dfc00117 	ldw	ra,4(sp)
   10278:	df000017 	ldw	fp,0(sp)
   1027c:	dec00204 	addi	sp,sp,8
   10280:	f800283a 	ret

00010284 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10284:	defffa04 	addi	sp,sp,-24
   10288:	dfc00515 	stw	ra,20(sp)
   1028c:	df000415 	stw	fp,16(sp)
   10290:	df000404 	addi	fp,sp,16
   10294:	e13ffe15 	stw	r4,-8(fp)
   10298:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1029c:	e0bffe17 	ldw	r2,-8(fp)
   102a0:	10000326 	beq	r2,zero,102b0 <alt_dev_llist_insert+0x2c>
   102a4:	e0bffe17 	ldw	r2,-8(fp)
   102a8:	10800217 	ldw	r2,8(r2)
   102ac:	1000061e 	bne	r2,zero,102c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   102b0:	00102480 	call	10248 <alt_get_errno>
   102b4:	1007883a 	mov	r3,r2
   102b8:	00800584 	movi	r2,22
   102bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   102c0:	00bffa84 	movi	r2,-22
   102c4:	00001306 	br	10314 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   102c8:	e0bffe17 	ldw	r2,-8(fp)
   102cc:	e0ffff17 	ldw	r3,-4(fp)
   102d0:	e0fffc15 	stw	r3,-16(fp)
   102d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   102d8:	e0bffd17 	ldw	r2,-12(fp)
   102dc:	e0fffc17 	ldw	r3,-16(fp)
   102e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   102e4:	e0bffc17 	ldw	r2,-16(fp)
   102e8:	10c00017 	ldw	r3,0(r2)
   102ec:	e0bffd17 	ldw	r2,-12(fp)
   102f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   102f4:	e0bffc17 	ldw	r2,-16(fp)
   102f8:	10800017 	ldw	r2,0(r2)
   102fc:	e0fffd17 	ldw	r3,-12(fp)
   10300:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10304:	e0bffc17 	ldw	r2,-16(fp)
   10308:	e0fffd17 	ldw	r3,-12(fp)
   1030c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10310:	0005883a 	mov	r2,zero
}
   10314:	e037883a 	mov	sp,fp
   10318:	dfc00117 	ldw	ra,4(sp)
   1031c:	df000017 	ldw	fp,0(sp)
   10320:	dec00204 	addi	sp,sp,8
   10324:	f800283a 	ret

00010328 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10328:	defffd04 	addi	sp,sp,-12
   1032c:	dfc00215 	stw	ra,8(sp)
   10330:	df000115 	stw	fp,4(sp)
   10334:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10338:	00800074 	movhi	r2,1
   1033c:	10853004 	addi	r2,r2,5312
   10340:	e0bfff15 	stw	r2,-4(fp)
   10344:	00000606 	br	10360 <_do_ctors+0x38>
        (*ctor) (); 
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	10800017 	ldw	r2,0(r2)
   10350:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10354:	e0bfff17 	ldw	r2,-4(fp)
   10358:	10bfff04 	addi	r2,r2,-4
   1035c:	e0bfff15 	stw	r2,-4(fp)
   10360:	e0ffff17 	ldw	r3,-4(fp)
   10364:	00800074 	movhi	r2,1
   10368:	10853104 	addi	r2,r2,5316
   1036c:	18bff62e 	bgeu	r3,r2,10348 <__alt_data_end+0xff010348>
        (*ctor) (); 
}
   10370:	0001883a 	nop
   10374:	e037883a 	mov	sp,fp
   10378:	dfc00117 	ldw	ra,4(sp)
   1037c:	df000017 	ldw	fp,0(sp)
   10380:	dec00204 	addi	sp,sp,8
   10384:	f800283a 	ret

00010388 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10388:	defffd04 	addi	sp,sp,-12
   1038c:	dfc00215 	stw	ra,8(sp)
   10390:	df000115 	stw	fp,4(sp)
   10394:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10398:	00800074 	movhi	r2,1
   1039c:	10853004 	addi	r2,r2,5312
   103a0:	e0bfff15 	stw	r2,-4(fp)
   103a4:	00000606 	br	103c0 <_do_dtors+0x38>
        (*dtor) (); 
   103a8:	e0bfff17 	ldw	r2,-4(fp)
   103ac:	10800017 	ldw	r2,0(r2)
   103b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   103b4:	e0bfff17 	ldw	r2,-4(fp)
   103b8:	10bfff04 	addi	r2,r2,-4
   103bc:	e0bfff15 	stw	r2,-4(fp)
   103c0:	e0ffff17 	ldw	r3,-4(fp)
   103c4:	00800074 	movhi	r2,1
   103c8:	10853104 	addi	r2,r2,5316
   103cc:	18bff62e 	bgeu	r3,r2,103a8 <__alt_data_end+0xff0103a8>
        (*dtor) (); 
}
   103d0:	0001883a 	nop
   103d4:	e037883a 	mov	sp,fp
   103d8:	dfc00117 	ldw	ra,4(sp)
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00204 	addi	sp,sp,8
   103e4:	f800283a 	ret

000103e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   103e8:	defffe04 	addi	sp,sp,-8
   103ec:	dfc00115 	stw	ra,4(sp)
   103f0:	df000015 	stw	fp,0(sp)
   103f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   103f8:	01440004 	movi	r5,4096
   103fc:	0009883a 	mov	r4,zero
   10400:	0010e540 	call	10e54 <alt_icache_flush>
#endif
}
   10404:	0001883a 	nop
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1041c:	defff904 	addi	sp,sp,-28
   10420:	dfc00615 	stw	ra,24(sp)
   10424:	df000515 	stw	fp,20(sp)
   10428:	df000504 	addi	fp,sp,20
   1042c:	e13ffc15 	stw	r4,-16(fp)
   10430:	e17ffd15 	stw	r5,-12(fp)
   10434:	e1bffe15 	stw	r6,-8(fp)
   10438:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1043c:	e0800217 	ldw	r2,8(fp)
   10440:	d8800015 	stw	r2,0(sp)
   10444:	e1ffff17 	ldw	r7,-4(fp)
   10448:	e1bffe17 	ldw	r6,-8(fp)
   1044c:	e17ffd17 	ldw	r5,-12(fp)
   10450:	e13ffc17 	ldw	r4,-16(fp)
   10454:	00105cc0 	call	105cc <alt_iic_isr_register>
}  
   10458:	e037883a 	mov	sp,fp
   1045c:	dfc00117 	ldw	ra,4(sp)
   10460:	df000017 	ldw	fp,0(sp)
   10464:	dec00204 	addi	sp,sp,8
   10468:	f800283a 	ret

0001046c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1046c:	defff904 	addi	sp,sp,-28
   10470:	df000615 	stw	fp,24(sp)
   10474:	df000604 	addi	fp,sp,24
   10478:	e13ffe15 	stw	r4,-8(fp)
   1047c:	e17fff15 	stw	r5,-4(fp)
   10480:	e0bfff17 	ldw	r2,-4(fp)
   10484:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10488:	0005303a 	rdctl	r2,status
   1048c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10490:	e0fffb17 	ldw	r3,-20(fp)
   10494:	00bfff84 	movi	r2,-2
   10498:	1884703a 	and	r2,r3,r2
   1049c:	1001703a 	wrctl	status,r2
  
  return context;
   104a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   104a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   104a8:	00c00044 	movi	r3,1
   104ac:	e0bffa17 	ldw	r2,-24(fp)
   104b0:	1884983a 	sll	r2,r3,r2
   104b4:	1007883a 	mov	r3,r2
   104b8:	d0a72917 	ldw	r2,-25436(gp)
   104bc:	1884b03a 	or	r2,r3,r2
   104c0:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   104c4:	d0a72917 	ldw	r2,-25436(gp)
   104c8:	100170fa 	wrctl	ienable,r2
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104d4:	e0bffd17 	ldw	r2,-12(fp)
   104d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   104dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   104e0:	0001883a 	nop
}
   104e4:	e037883a 	mov	sp,fp
   104e8:	df000017 	ldw	fp,0(sp)
   104ec:	dec00104 	addi	sp,sp,4
   104f0:	f800283a 	ret

000104f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   104f4:	defff904 	addi	sp,sp,-28
   104f8:	df000615 	stw	fp,24(sp)
   104fc:	df000604 	addi	fp,sp,24
   10500:	e13ffe15 	stw	r4,-8(fp)
   10504:	e17fff15 	stw	r5,-4(fp)
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10510:	0005303a 	rdctl	r2,status
   10514:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10518:	e0fffb17 	ldw	r3,-20(fp)
   1051c:	00bfff84 	movi	r2,-2
   10520:	1884703a 	and	r2,r3,r2
   10524:	1001703a 	wrctl	status,r2
  
  return context;
   10528:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1052c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10530:	00c00044 	movi	r3,1
   10534:	e0bffa17 	ldw	r2,-24(fp)
   10538:	1884983a 	sll	r2,r3,r2
   1053c:	0084303a 	nor	r2,zero,r2
   10540:	1007883a 	mov	r3,r2
   10544:	d0a72917 	ldw	r2,-25436(gp)
   10548:	1884703a 	and	r2,r3,r2
   1054c:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10550:	d0a72917 	ldw	r2,-25436(gp)
   10554:	100170fa 	wrctl	ienable,r2
   10558:	e0bffc17 	ldw	r2,-16(fp)
   1055c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10560:	e0bffd17 	ldw	r2,-12(fp)
   10564:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10568:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1056c:	0001883a 	nop
}
   10570:	e037883a 	mov	sp,fp
   10574:	df000017 	ldw	fp,0(sp)
   10578:	dec00104 	addi	sp,sp,4
   1057c:	f800283a 	ret

00010580 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10580:	defffc04 	addi	sp,sp,-16
   10584:	df000315 	stw	fp,12(sp)
   10588:	df000304 	addi	fp,sp,12
   1058c:	e13ffe15 	stw	r4,-8(fp)
   10590:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10594:	000530fa 	rdctl	r2,ienable
   10598:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1059c:	00c00044 	movi	r3,1
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	1884983a 	sll	r2,r3,r2
   105a8:	1007883a 	mov	r3,r2
   105ac:	e0bffd17 	ldw	r2,-12(fp)
   105b0:	1884703a 	and	r2,r3,r2
   105b4:	1004c03a 	cmpne	r2,r2,zero
   105b8:	10803fcc 	andi	r2,r2,255
}
   105bc:	e037883a 	mov	sp,fp
   105c0:	df000017 	ldw	fp,0(sp)
   105c4:	dec00104 	addi	sp,sp,4
   105c8:	f800283a 	ret

000105cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   105cc:	defff504 	addi	sp,sp,-44
   105d0:	dfc00a15 	stw	ra,40(sp)
   105d4:	df000915 	stw	fp,36(sp)
   105d8:	df000904 	addi	fp,sp,36
   105dc:	e13ffc15 	stw	r4,-16(fp)
   105e0:	e17ffd15 	stw	r5,-12(fp)
   105e4:	e1bffe15 	stw	r6,-8(fp)
   105e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   105ec:	00bffa84 	movi	r2,-22
   105f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   105f4:	e0bffd17 	ldw	r2,-12(fp)
   105f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   105fc:	e0bff817 	ldw	r2,-32(fp)
   10600:	10800808 	cmpgei	r2,r2,32
   10604:	1000271e 	bne	r2,zero,106a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10608:	0005303a 	rdctl	r2,status
   1060c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10610:	e0fffb17 	ldw	r3,-20(fp)
   10614:	00bfff84 	movi	r2,-2
   10618:	1884703a 	and	r2,r3,r2
   1061c:	1001703a 	wrctl	status,r2
  
  return context;
   10620:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10624:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10628:	00800074 	movhi	r2,1
   1062c:	10953d04 	addi	r2,r2,21748
   10630:	e0fff817 	ldw	r3,-32(fp)
   10634:	180690fa 	slli	r3,r3,3
   10638:	10c5883a 	add	r2,r2,r3
   1063c:	e0fffe17 	ldw	r3,-8(fp)
   10640:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10644:	00800074 	movhi	r2,1
   10648:	10953d04 	addi	r2,r2,21748
   1064c:	e0fff817 	ldw	r3,-32(fp)
   10650:	180690fa 	slli	r3,r3,3
   10654:	10c5883a 	add	r2,r2,r3
   10658:	10800104 	addi	r2,r2,4
   1065c:	e0ffff17 	ldw	r3,-4(fp)
   10660:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10664:	e0bffe17 	ldw	r2,-8(fp)
   10668:	10000526 	beq	r2,zero,10680 <alt_iic_isr_register+0xb4>
   1066c:	e0bff817 	ldw	r2,-32(fp)
   10670:	100b883a 	mov	r5,r2
   10674:	e13ffc17 	ldw	r4,-16(fp)
   10678:	001046c0 	call	1046c <alt_ic_irq_enable>
   1067c:	00000406 	br	10690 <alt_iic_isr_register+0xc4>
   10680:	e0bff817 	ldw	r2,-32(fp)
   10684:	100b883a 	mov	r5,r2
   10688:	e13ffc17 	ldw	r4,-16(fp)
   1068c:	00104f40 	call	104f4 <alt_ic_irq_disable>
   10690:	e0bff715 	stw	r2,-36(fp)
   10694:	e0bffa17 	ldw	r2,-24(fp)
   10698:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1069c:	e0bff917 	ldw	r2,-28(fp)
   106a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   106a4:	e0bff717 	ldw	r2,-36(fp)
}
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00204 	addi	sp,sp,8
   106b8:	f800283a 	ret

000106bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   106bc:	defff904 	addi	sp,sp,-28
   106c0:	dfc00615 	stw	ra,24(sp)
   106c4:	df000515 	stw	fp,20(sp)
   106c8:	df000504 	addi	fp,sp,20
   106cc:	e13ffc15 	stw	r4,-16(fp)
   106d0:	e17ffd15 	stw	r5,-12(fp)
   106d4:	e1bffe15 	stw	r6,-8(fp)
   106d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   106dc:	e1bfff17 	ldw	r6,-4(fp)
   106e0:	e17ffe17 	ldw	r5,-8(fp)
   106e4:	e13ffd17 	ldw	r4,-12(fp)
   106e8:	00108fc0 	call	108fc <open>
   106ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   106f0:	e0bffb17 	ldw	r2,-20(fp)
   106f4:	10001c16 	blt	r2,zero,10768 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   106f8:	00800074 	movhi	r2,1
   106fc:	10898e04 	addi	r2,r2,9784
   10700:	e0fffb17 	ldw	r3,-20(fp)
   10704:	18c00324 	muli	r3,r3,12
   10708:	10c5883a 	add	r2,r2,r3
   1070c:	10c00017 	ldw	r3,0(r2)
   10710:	e0bffc17 	ldw	r2,-16(fp)
   10714:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10718:	00800074 	movhi	r2,1
   1071c:	10898e04 	addi	r2,r2,9784
   10720:	e0fffb17 	ldw	r3,-20(fp)
   10724:	18c00324 	muli	r3,r3,12
   10728:	10c5883a 	add	r2,r2,r3
   1072c:	10800104 	addi	r2,r2,4
   10730:	10c00017 	ldw	r3,0(r2)
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1073c:	00800074 	movhi	r2,1
   10740:	10898e04 	addi	r2,r2,9784
   10744:	e0fffb17 	ldw	r3,-20(fp)
   10748:	18c00324 	muli	r3,r3,12
   1074c:	10c5883a 	add	r2,r2,r3
   10750:	10800204 	addi	r2,r2,8
   10754:	10c00017 	ldw	r3,0(r2)
   10758:	e0bffc17 	ldw	r2,-16(fp)
   1075c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10760:	e13ffb17 	ldw	r4,-20(fp)
   10764:	000eeb80 	call	eeb8 <alt_release_fd>
  }
} 
   10768:	0001883a 	nop
   1076c:	e037883a 	mov	sp,fp
   10770:	dfc00117 	ldw	ra,4(sp)
   10774:	df000017 	ldw	fp,0(sp)
   10778:	dec00204 	addi	sp,sp,8
   1077c:	f800283a 	ret

00010780 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10780:	defffb04 	addi	sp,sp,-20
   10784:	dfc00415 	stw	ra,16(sp)
   10788:	df000315 	stw	fp,12(sp)
   1078c:	df000304 	addi	fp,sp,12
   10790:	e13ffd15 	stw	r4,-12(fp)
   10794:	e17ffe15 	stw	r5,-8(fp)
   10798:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1079c:	01c07fc4 	movi	r7,511
   107a0:	01800044 	movi	r6,1
   107a4:	e17ffd17 	ldw	r5,-12(fp)
   107a8:	01000074 	movhi	r4,1
   107ac:	21099104 	addi	r4,r4,9796
   107b0:	00106bc0 	call	106bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   107b4:	01c07fc4 	movi	r7,511
   107b8:	000d883a 	mov	r6,zero
   107bc:	e17ffe17 	ldw	r5,-8(fp)
   107c0:	01000074 	movhi	r4,1
   107c4:	21098e04 	addi	r4,r4,9784
   107c8:	00106bc0 	call	106bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   107cc:	01c07fc4 	movi	r7,511
   107d0:	01800044 	movi	r6,1
   107d4:	e17fff17 	ldw	r5,-4(fp)
   107d8:	01000074 	movhi	r4,1
   107dc:	21099404 	addi	r4,r4,9808
   107e0:	00106bc0 	call	106bc <alt_open_fd>
}  
   107e4:	0001883a 	nop
   107e8:	e037883a 	mov	sp,fp
   107ec:	dfc00117 	ldw	ra,4(sp)
   107f0:	df000017 	ldw	fp,0(sp)
   107f4:	dec00204 	addi	sp,sp,8
   107f8:	f800283a 	ret

000107fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   107fc:	defffe04 	addi	sp,sp,-8
   10800:	dfc00115 	stw	ra,4(sp)
   10804:	df000015 	stw	fp,0(sp)
   10808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1080c:	d0a00b17 	ldw	r2,-32724(gp)
   10810:	10000326 	beq	r2,zero,10820 <alt_get_errno+0x24>
   10814:	d0a00b17 	ldw	r2,-32724(gp)
   10818:	103ee83a 	callr	r2
   1081c:	00000106 	br	10824 <alt_get_errno+0x28>
   10820:	d0a72004 	addi	r2,gp,-25472
}
   10824:	e037883a 	mov	sp,fp
   10828:	dfc00117 	ldw	ra,4(sp)
   1082c:	df000017 	ldw	fp,0(sp)
   10830:	dec00204 	addi	sp,sp,8
   10834:	f800283a 	ret

00010838 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10838:	defffd04 	addi	sp,sp,-12
   1083c:	df000215 	stw	fp,8(sp)
   10840:	df000204 	addi	fp,sp,8
   10844:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10848:	e0bfff17 	ldw	r2,-4(fp)
   1084c:	10800217 	ldw	r2,8(r2)
   10850:	10d00034 	orhi	r3,r2,16384
   10854:	e0bfff17 	ldw	r2,-4(fp)
   10858:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1085c:	e03ffe15 	stw	zero,-8(fp)
   10860:	00001d06 	br	108d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10864:	00800074 	movhi	r2,1
   10868:	10898e04 	addi	r2,r2,9784
   1086c:	e0fffe17 	ldw	r3,-8(fp)
   10870:	18c00324 	muli	r3,r3,12
   10874:	10c5883a 	add	r2,r2,r3
   10878:	10c00017 	ldw	r3,0(r2)
   1087c:	e0bfff17 	ldw	r2,-4(fp)
   10880:	10800017 	ldw	r2,0(r2)
   10884:	1880111e 	bne	r3,r2,108cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10888:	00800074 	movhi	r2,1
   1088c:	10898e04 	addi	r2,r2,9784
   10890:	e0fffe17 	ldw	r3,-8(fp)
   10894:	18c00324 	muli	r3,r3,12
   10898:	10c5883a 	add	r2,r2,r3
   1089c:	10800204 	addi	r2,r2,8
   108a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   108a4:	1000090e 	bge	r2,zero,108cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   108a8:	e0bffe17 	ldw	r2,-8(fp)
   108ac:	10c00324 	muli	r3,r2,12
   108b0:	00800074 	movhi	r2,1
   108b4:	10898e04 	addi	r2,r2,9784
   108b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	18800226 	beq	r3,r2,108cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   108c4:	00bffcc4 	movi	r2,-13
   108c8:	00000806 	br	108ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   108cc:	e0bffe17 	ldw	r2,-8(fp)
   108d0:	10800044 	addi	r2,r2,1
   108d4:	e0bffe15 	stw	r2,-8(fp)
   108d8:	d0a00a17 	ldw	r2,-32728(gp)
   108dc:	1007883a 	mov	r3,r2
   108e0:	e0bffe17 	ldw	r2,-8(fp)
   108e4:	18bfdf2e 	bgeu	r3,r2,10864 <__alt_data_end+0xff010864>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   108e8:	0005883a 	mov	r2,zero
}
   108ec:	e037883a 	mov	sp,fp
   108f0:	df000017 	ldw	fp,0(sp)
   108f4:	dec00104 	addi	sp,sp,4
   108f8:	f800283a 	ret

000108fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   108fc:	defff604 	addi	sp,sp,-40
   10900:	dfc00915 	stw	ra,36(sp)
   10904:	df000815 	stw	fp,32(sp)
   10908:	df000804 	addi	fp,sp,32
   1090c:	e13ffd15 	stw	r4,-12(fp)
   10910:	e17ffe15 	stw	r5,-8(fp)
   10914:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10918:	00bfffc4 	movi	r2,-1
   1091c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10920:	00bffb44 	movi	r2,-19
   10924:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10928:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1092c:	d1600804 	addi	r5,gp,-32736
   10930:	e13ffd17 	ldw	r4,-12(fp)
   10934:	0010c180 	call	10c18 <alt_find_dev>
   10938:	e0bff815 	stw	r2,-32(fp)
   1093c:	e0bff817 	ldw	r2,-32(fp)
   10940:	1000051e 	bne	r2,zero,10958 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10944:	e13ffd17 	ldw	r4,-12(fp)
   10948:	0010ca80 	call	10ca8 <alt_find_file>
   1094c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10950:	00800044 	movi	r2,1
   10954:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10958:	e0bff817 	ldw	r2,-32(fp)
   1095c:	10002926 	beq	r2,zero,10a04 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10960:	e13ff817 	ldw	r4,-32(fp)
   10964:	0010db00 	call	10db0 <alt_get_fd>
   10968:	e0bff915 	stw	r2,-28(fp)
   1096c:	e0bff917 	ldw	r2,-28(fp)
   10970:	1000030e 	bge	r2,zero,10980 <open+0x84>
    {
      status = index;
   10974:	e0bff917 	ldw	r2,-28(fp)
   10978:	e0bffa15 	stw	r2,-24(fp)
   1097c:	00002306 	br	10a0c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10980:	e0bff917 	ldw	r2,-28(fp)
   10984:	10c00324 	muli	r3,r2,12
   10988:	00800074 	movhi	r2,1
   1098c:	10898e04 	addi	r2,r2,9784
   10990:	1885883a 	add	r2,r3,r2
   10994:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10998:	e0fffe17 	ldw	r3,-8(fp)
   1099c:	00900034 	movhi	r2,16384
   109a0:	10bfffc4 	addi	r2,r2,-1
   109a4:	1886703a 	and	r3,r3,r2
   109a8:	e0bffc17 	ldw	r2,-16(fp)
   109ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   109b0:	e0bffb17 	ldw	r2,-20(fp)
   109b4:	1000051e 	bne	r2,zero,109cc <open+0xd0>
   109b8:	e13ffc17 	ldw	r4,-16(fp)
   109bc:	00108380 	call	10838 <alt_file_locked>
   109c0:	e0bffa15 	stw	r2,-24(fp)
   109c4:	e0bffa17 	ldw	r2,-24(fp)
   109c8:	10001016 	blt	r2,zero,10a0c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   109cc:	e0bff817 	ldw	r2,-32(fp)
   109d0:	10800317 	ldw	r2,12(r2)
   109d4:	10000826 	beq	r2,zero,109f8 <open+0xfc>
   109d8:	e0bff817 	ldw	r2,-32(fp)
   109dc:	10800317 	ldw	r2,12(r2)
   109e0:	e1ffff17 	ldw	r7,-4(fp)
   109e4:	e1bffe17 	ldw	r6,-8(fp)
   109e8:	e17ffd17 	ldw	r5,-12(fp)
   109ec:	e13ffc17 	ldw	r4,-16(fp)
   109f0:	103ee83a 	callr	r2
   109f4:	00000106 	br	109fc <open+0x100>
   109f8:	0005883a 	mov	r2,zero
   109fc:	e0bffa15 	stw	r2,-24(fp)
   10a00:	00000206 	br	10a0c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10a04:	00bffb44 	movi	r2,-19
   10a08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10a0c:	e0bffa17 	ldw	r2,-24(fp)
   10a10:	1000090e 	bge	r2,zero,10a38 <open+0x13c>
  {
    alt_release_fd (index);  
   10a14:	e13ff917 	ldw	r4,-28(fp)
   10a18:	000eeb80 	call	eeb8 <alt_release_fd>
    ALT_ERRNO = -status;
   10a1c:	00107fc0 	call	107fc <alt_get_errno>
   10a20:	1007883a 	mov	r3,r2
   10a24:	e0bffa17 	ldw	r2,-24(fp)
   10a28:	0085c83a 	sub	r2,zero,r2
   10a2c:	18800015 	stw	r2,0(r3)
    return -1;
   10a30:	00bfffc4 	movi	r2,-1
   10a34:	00000106 	br	10a3c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10a38:	e0bff917 	ldw	r2,-28(fp)
}
   10a3c:	e037883a 	mov	sp,fp
   10a40:	dfc00117 	ldw	ra,4(sp)
   10a44:	df000017 	ldw	fp,0(sp)
   10a48:	dec00204 	addi	sp,sp,8
   10a4c:	f800283a 	ret

00010a50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10a50:	defffa04 	addi	sp,sp,-24
   10a54:	df000515 	stw	fp,20(sp)
   10a58:	df000504 	addi	fp,sp,20
   10a5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a60:	0005303a 	rdctl	r2,status
   10a64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a68:	e0fffc17 	ldw	r3,-16(fp)
   10a6c:	00bfff84 	movi	r2,-2
   10a70:	1884703a 	and	r2,r3,r2
   10a74:	1001703a 	wrctl	status,r2
  
  return context;
   10a78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10a7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10a80:	e0bfff17 	ldw	r2,-4(fp)
   10a84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10a88:	e0bffd17 	ldw	r2,-12(fp)
   10a8c:	10800017 	ldw	r2,0(r2)
   10a90:	e0fffd17 	ldw	r3,-12(fp)
   10a94:	18c00117 	ldw	r3,4(r3)
   10a98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10a9c:	e0bffd17 	ldw	r2,-12(fp)
   10aa0:	10800117 	ldw	r2,4(r2)
   10aa4:	e0fffd17 	ldw	r3,-12(fp)
   10aa8:	18c00017 	ldw	r3,0(r3)
   10aac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10ab0:	e0bffd17 	ldw	r2,-12(fp)
   10ab4:	e0fffd17 	ldw	r3,-12(fp)
   10ab8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10abc:	e0bffd17 	ldw	r2,-12(fp)
   10ac0:	e0fffd17 	ldw	r3,-12(fp)
   10ac4:	10c00015 	stw	r3,0(r2)
   10ac8:	e0bffb17 	ldw	r2,-20(fp)
   10acc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ad0:	e0bffe17 	ldw	r2,-8(fp)
   10ad4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10ad8:	0001883a 	nop
   10adc:	e037883a 	mov	sp,fp
   10ae0:	df000017 	ldw	fp,0(sp)
   10ae4:	dec00104 	addi	sp,sp,4
   10ae8:	f800283a 	ret

00010aec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10aec:	defffb04 	addi	sp,sp,-20
   10af0:	dfc00415 	stw	ra,16(sp)
   10af4:	df000315 	stw	fp,12(sp)
   10af8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10afc:	d0a00e17 	ldw	r2,-32712(gp)
   10b00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10b04:	d0a72b17 	ldw	r2,-25428(gp)
   10b08:	10800044 	addi	r2,r2,1
   10b0c:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10b10:	00002e06 	br	10bcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10b14:	e0bffd17 	ldw	r2,-12(fp)
   10b18:	10800017 	ldw	r2,0(r2)
   10b1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10b20:	e0bffd17 	ldw	r2,-12(fp)
   10b24:	10800403 	ldbu	r2,16(r2)
   10b28:	10803fcc 	andi	r2,r2,255
   10b2c:	10000426 	beq	r2,zero,10b40 <alt_tick+0x54>
   10b30:	d0a72b17 	ldw	r2,-25428(gp)
   10b34:	1000021e 	bne	r2,zero,10b40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10b38:	e0bffd17 	ldw	r2,-12(fp)
   10b3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10b40:	e0bffd17 	ldw	r2,-12(fp)
   10b44:	10800217 	ldw	r2,8(r2)
   10b48:	d0e72b17 	ldw	r3,-25428(gp)
   10b4c:	18801d36 	bltu	r3,r2,10bc4 <alt_tick+0xd8>
   10b50:	e0bffd17 	ldw	r2,-12(fp)
   10b54:	10800403 	ldbu	r2,16(r2)
   10b58:	10803fcc 	andi	r2,r2,255
   10b5c:	1000191e 	bne	r2,zero,10bc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10b60:	e0bffd17 	ldw	r2,-12(fp)
   10b64:	10800317 	ldw	r2,12(r2)
   10b68:	e0fffd17 	ldw	r3,-12(fp)
   10b6c:	18c00517 	ldw	r3,20(r3)
   10b70:	1809883a 	mov	r4,r3
   10b74:	103ee83a 	callr	r2
   10b78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10b7c:	e0bfff17 	ldw	r2,-4(fp)
   10b80:	1000031e 	bne	r2,zero,10b90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10b84:	e13ffd17 	ldw	r4,-12(fp)
   10b88:	0010a500 	call	10a50 <alt_alarm_stop>
   10b8c:	00000d06 	br	10bc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10b90:	e0bffd17 	ldw	r2,-12(fp)
   10b94:	10c00217 	ldw	r3,8(r2)
   10b98:	e0bfff17 	ldw	r2,-4(fp)
   10b9c:	1887883a 	add	r3,r3,r2
   10ba0:	e0bffd17 	ldw	r2,-12(fp)
   10ba4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	10c00217 	ldw	r3,8(r2)
   10bb0:	d0a72b17 	ldw	r2,-25428(gp)
   10bb4:	1880032e 	bgeu	r3,r2,10bc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	00c00044 	movi	r3,1
   10bc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10bc4:	e0bffe17 	ldw	r2,-8(fp)
   10bc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10bcc:	e0fffd17 	ldw	r3,-12(fp)
   10bd0:	d0a00e04 	addi	r2,gp,-32712
   10bd4:	18bfcf1e 	bne	r3,r2,10b14 <__alt_data_end+0xff010b14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10bd8:	0001883a 	nop
}
   10bdc:	0001883a 	nop
   10be0:	e037883a 	mov	sp,fp
   10be4:	dfc00117 	ldw	ra,4(sp)
   10be8:	df000017 	ldw	fp,0(sp)
   10bec:	dec00204 	addi	sp,sp,8
   10bf0:	f800283a 	ret

00010bf4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10bf4:	deffff04 	addi	sp,sp,-4
   10bf8:	df000015 	stw	fp,0(sp)
   10bfc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10c00:	000170fa 	wrctl	ienable,zero
}
   10c04:	0001883a 	nop
   10c08:	e037883a 	mov	sp,fp
   10c0c:	df000017 	ldw	fp,0(sp)
   10c10:	dec00104 	addi	sp,sp,4
   10c14:	f800283a 	ret

00010c18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10c18:	defffa04 	addi	sp,sp,-24
   10c1c:	dfc00515 	stw	ra,20(sp)
   10c20:	df000415 	stw	fp,16(sp)
   10c24:	df000404 	addi	fp,sp,16
   10c28:	e13ffe15 	stw	r4,-8(fp)
   10c2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10c30:	e0bfff17 	ldw	r2,-4(fp)
   10c34:	10800017 	ldw	r2,0(r2)
   10c38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10c3c:	e13ffe17 	ldw	r4,-8(fp)
   10c40:	00033e40 	call	33e4 <strlen>
   10c44:	10800044 	addi	r2,r2,1
   10c48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10c4c:	00000d06 	br	10c84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10c50:	e0bffc17 	ldw	r2,-16(fp)
   10c54:	10800217 	ldw	r2,8(r2)
   10c58:	e0fffd17 	ldw	r3,-12(fp)
   10c5c:	180d883a 	mov	r6,r3
   10c60:	e17ffe17 	ldw	r5,-8(fp)
   10c64:	1009883a 	mov	r4,r2
   10c68:	001117c0 	call	1117c <memcmp>
   10c6c:	1000021e 	bne	r2,zero,10c78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	00000706 	br	10c94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10c78:	e0bffc17 	ldw	r2,-16(fp)
   10c7c:	10800017 	ldw	r2,0(r2)
   10c80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10c84:	e0fffc17 	ldw	r3,-16(fp)
   10c88:	e0bfff17 	ldw	r2,-4(fp)
   10c8c:	18bff01e 	bne	r3,r2,10c50 <__alt_data_end+0xff010c50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10c90:	0005883a 	mov	r2,zero
}
   10c94:	e037883a 	mov	sp,fp
   10c98:	dfc00117 	ldw	ra,4(sp)
   10c9c:	df000017 	ldw	fp,0(sp)
   10ca0:	dec00204 	addi	sp,sp,8
   10ca4:	f800283a 	ret

00010ca8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ca8:	defffb04 	addi	sp,sp,-20
   10cac:	dfc00415 	stw	ra,16(sp)
   10cb0:	df000315 	stw	fp,12(sp)
   10cb4:	df000304 	addi	fp,sp,12
   10cb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10cbc:	d0a00617 	ldw	r2,-32744(gp)
   10cc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10cc4:	00003106 	br	10d8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10cc8:	e0bffd17 	ldw	r2,-12(fp)
   10ccc:	10800217 	ldw	r2,8(r2)
   10cd0:	1009883a 	mov	r4,r2
   10cd4:	00033e40 	call	33e4 <strlen>
   10cd8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10cdc:	e0bffd17 	ldw	r2,-12(fp)
   10ce0:	10c00217 	ldw	r3,8(r2)
   10ce4:	e0bffe17 	ldw	r2,-8(fp)
   10ce8:	10bfffc4 	addi	r2,r2,-1
   10cec:	1885883a 	add	r2,r3,r2
   10cf0:	10800003 	ldbu	r2,0(r2)
   10cf4:	10803fcc 	andi	r2,r2,255
   10cf8:	1080201c 	xori	r2,r2,128
   10cfc:	10bfe004 	addi	r2,r2,-128
   10d00:	10800bd8 	cmpnei	r2,r2,47
   10d04:	1000031e 	bne	r2,zero,10d14 <alt_find_file+0x6c>
    {
      len -= 1;
   10d08:	e0bffe17 	ldw	r2,-8(fp)
   10d0c:	10bfffc4 	addi	r2,r2,-1
   10d10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10d14:	e0bffe17 	ldw	r2,-8(fp)
   10d18:	e0ffff17 	ldw	r3,-4(fp)
   10d1c:	1885883a 	add	r2,r3,r2
   10d20:	10800003 	ldbu	r2,0(r2)
   10d24:	10803fcc 	andi	r2,r2,255
   10d28:	1080201c 	xori	r2,r2,128
   10d2c:	10bfe004 	addi	r2,r2,-128
   10d30:	10800be0 	cmpeqi	r2,r2,47
   10d34:	1000081e 	bne	r2,zero,10d58 <alt_find_file+0xb0>
   10d38:	e0bffe17 	ldw	r2,-8(fp)
   10d3c:	e0ffff17 	ldw	r3,-4(fp)
   10d40:	1885883a 	add	r2,r3,r2
   10d44:	10800003 	ldbu	r2,0(r2)
   10d48:	10803fcc 	andi	r2,r2,255
   10d4c:	1080201c 	xori	r2,r2,128
   10d50:	10bfe004 	addi	r2,r2,-128
   10d54:	10000a1e 	bne	r2,zero,10d80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10d58:	e0bffd17 	ldw	r2,-12(fp)
   10d5c:	10800217 	ldw	r2,8(r2)
   10d60:	e0fffe17 	ldw	r3,-8(fp)
   10d64:	180d883a 	mov	r6,r3
   10d68:	e17fff17 	ldw	r5,-4(fp)
   10d6c:	1009883a 	mov	r4,r2
   10d70:	001117c0 	call	1117c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10d74:	1000021e 	bne	r2,zero,10d80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10d78:	e0bffd17 	ldw	r2,-12(fp)
   10d7c:	00000706 	br	10d9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10d80:	e0bffd17 	ldw	r2,-12(fp)
   10d84:	10800017 	ldw	r2,0(r2)
   10d88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10d8c:	e0fffd17 	ldw	r3,-12(fp)
   10d90:	d0a00604 	addi	r2,gp,-32744
   10d94:	18bfcc1e 	bne	r3,r2,10cc8 <__alt_data_end+0xff010cc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10d98:	0005883a 	mov	r2,zero
}
   10d9c:	e037883a 	mov	sp,fp
   10da0:	dfc00117 	ldw	ra,4(sp)
   10da4:	df000017 	ldw	fp,0(sp)
   10da8:	dec00204 	addi	sp,sp,8
   10dac:	f800283a 	ret

00010db0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10db0:	defffc04 	addi	sp,sp,-16
   10db4:	df000315 	stw	fp,12(sp)
   10db8:	df000304 	addi	fp,sp,12
   10dbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10dc0:	00bffa04 	movi	r2,-24
   10dc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10dc8:	e03ffd15 	stw	zero,-12(fp)
   10dcc:	00001906 	br	10e34 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10dd0:	00800074 	movhi	r2,1
   10dd4:	10898e04 	addi	r2,r2,9784
   10dd8:	e0fffd17 	ldw	r3,-12(fp)
   10ddc:	18c00324 	muli	r3,r3,12
   10de0:	10c5883a 	add	r2,r2,r3
   10de4:	10800017 	ldw	r2,0(r2)
   10de8:	10000f1e 	bne	r2,zero,10e28 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10dec:	00800074 	movhi	r2,1
   10df0:	10898e04 	addi	r2,r2,9784
   10df4:	e0fffd17 	ldw	r3,-12(fp)
   10df8:	18c00324 	muli	r3,r3,12
   10dfc:	10c5883a 	add	r2,r2,r3
   10e00:	e0ffff17 	ldw	r3,-4(fp)
   10e04:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10e08:	d0e00a17 	ldw	r3,-32728(gp)
   10e0c:	e0bffd17 	ldw	r2,-12(fp)
   10e10:	1880020e 	bge	r3,r2,10e1c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10e1c:	e0bffd17 	ldw	r2,-12(fp)
   10e20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10e24:	00000606 	br	10e40 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10e28:	e0bffd17 	ldw	r2,-12(fp)
   10e2c:	10800044 	addi	r2,r2,1
   10e30:	e0bffd15 	stw	r2,-12(fp)
   10e34:	e0bffd17 	ldw	r2,-12(fp)
   10e38:	10800810 	cmplti	r2,r2,32
   10e3c:	103fe41e 	bne	r2,zero,10dd0 <__alt_data_end+0xff010dd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10e40:	e0bffe17 	ldw	r2,-8(fp)
}
   10e44:	e037883a 	mov	sp,fp
   10e48:	df000017 	ldw	fp,0(sp)
   10e4c:	dec00104 	addi	sp,sp,4
   10e50:	f800283a 	ret

00010e54 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10e54:	defffb04 	addi	sp,sp,-20
   10e58:	df000415 	stw	fp,16(sp)
   10e5c:	df000404 	addi	fp,sp,16
   10e60:	e13ffe15 	stw	r4,-8(fp)
   10e64:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10e68:	e0bfff17 	ldw	r2,-4(fp)
   10e6c:	10840070 	cmpltui	r2,r2,4097
   10e70:	1000021e 	bne	r2,zero,10e7c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10e74:	00840004 	movi	r2,4096
   10e78:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10e7c:	e0fffe17 	ldw	r3,-8(fp)
   10e80:	e0bfff17 	ldw	r2,-4(fp)
   10e84:	1885883a 	add	r2,r3,r2
   10e88:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10e8c:	e0bffe17 	ldw	r2,-8(fp)
   10e90:	e0bffc15 	stw	r2,-16(fp)
   10e94:	00000506 	br	10eac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ea0:	e0bffc17 	ldw	r2,-16(fp)
   10ea4:	10800804 	addi	r2,r2,32
   10ea8:	e0bffc15 	stw	r2,-16(fp)
   10eac:	e0fffc17 	ldw	r3,-16(fp)
   10eb0:	e0bffd17 	ldw	r2,-12(fp)
   10eb4:	18bff836 	bltu	r3,r2,10e98 <__alt_data_end+0xff010e98>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10eb8:	e0bffe17 	ldw	r2,-8(fp)
   10ebc:	108007cc 	andi	r2,r2,31
   10ec0:	10000226 	beq	r2,zero,10ecc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10ec4:	e0bffc17 	ldw	r2,-16(fp)
   10ec8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10ecc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10ed0:	0001883a 	nop
   10ed4:	e037883a 	mov	sp,fp
   10ed8:	df000017 	ldw	fp,0(sp)
   10edc:	dec00104 	addi	sp,sp,4
   10ee0:	f800283a 	ret

00010ee4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10ee4:	defffe04 	addi	sp,sp,-8
   10ee8:	df000115 	stw	fp,4(sp)
   10eec:	df000104 	addi	fp,sp,4
   10ef0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10ef4:	e0bfff17 	ldw	r2,-4(fp)
   10ef8:	10bffe84 	addi	r2,r2,-6
   10efc:	10c00428 	cmpgeui	r3,r2,16
   10f00:	18001a1e 	bne	r3,zero,10f6c <alt_exception_cause_generated_bad_addr+0x88>
   10f04:	100690ba 	slli	r3,r2,2
   10f08:	00800074 	movhi	r2,1
   10f0c:	1083c704 	addi	r2,r2,3868
   10f10:	1885883a 	add	r2,r3,r2
   10f14:	10800017 	ldw	r2,0(r2)
   10f18:	1000683a 	jmp	r2
   10f1c:	00010f5c 	xori	zero,zero,1085
   10f20:	00010f5c 	xori	zero,zero,1085
   10f24:	00010f6c 	andhi	zero,zero,1085
   10f28:	00010f6c 	andhi	zero,zero,1085
   10f2c:	00010f6c 	andhi	zero,zero,1085
   10f30:	00010f5c 	xori	zero,zero,1085
   10f34:	00010f64 	muli	zero,zero,1085
   10f38:	00010f6c 	andhi	zero,zero,1085
   10f3c:	00010f5c 	xori	zero,zero,1085
   10f40:	00010f5c 	xori	zero,zero,1085
   10f44:	00010f6c 	andhi	zero,zero,1085
   10f48:	00010f5c 	xori	zero,zero,1085
   10f4c:	00010f64 	muli	zero,zero,1085
   10f50:	00010f6c 	andhi	zero,zero,1085
   10f54:	00010f6c 	andhi	zero,zero,1085
   10f58:	00010f5c 	xori	zero,zero,1085
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10f5c:	00800044 	movi	r2,1
   10f60:	00000306 	br	10f70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10f64:	0005883a 	mov	r2,zero
   10f68:	00000106 	br	10f70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10f6c:	0005883a 	mov	r2,zero
  }
}
   10f70:	e037883a 	mov	sp,fp
   10f74:	df000017 	ldw	fp,0(sp)
   10f78:	dec00104 	addi	sp,sp,4
   10f7c:	f800283a 	ret

00010f80 <atexit>:
   10f80:	200b883a 	mov	r5,r4
   10f84:	000f883a 	mov	r7,zero
   10f88:	000d883a 	mov	r6,zero
   10f8c:	0009883a 	mov	r4,zero
   10f90:	00111f81 	jmpi	111f8 <__register_exitproc>

00010f94 <exit>:
   10f94:	defffe04 	addi	sp,sp,-8
   10f98:	000b883a 	mov	r5,zero
   10f9c:	dc000015 	stw	r16,0(sp)
   10fa0:	dfc00115 	stw	ra,4(sp)
   10fa4:	2021883a 	mov	r16,r4
   10fa8:	00113100 	call	11310 <__call_exitprocs>
   10fac:	00800074 	movhi	r2,1
   10fb0:	108e0804 	addi	r2,r2,14368
   10fb4:	11000017 	ldw	r4,0(r2)
   10fb8:	20800f17 	ldw	r2,60(r4)
   10fbc:	10000126 	beq	r2,zero,10fc4 <exit+0x30>
   10fc0:	103ee83a 	callr	r2
   10fc4:	8009883a 	mov	r4,r16
   10fc8:	00114900 	call	11490 <_exit>

00010fcc <memalign>:
   10fcc:	00800074 	movhi	r2,1
   10fd0:	108e0904 	addi	r2,r2,14372
   10fd4:	280d883a 	mov	r6,r5
   10fd8:	200b883a 	mov	r5,r4
   10fdc:	11000017 	ldw	r4,0(r2)
   10fe0:	0010fe41 	jmpi	10fe4 <_memalign_r>

00010fe4 <_memalign_r>:
   10fe4:	00800204 	movi	r2,8
   10fe8:	1140532e 	bgeu	r2,r5,11138 <_memalign_r+0x154>
   10fec:	defffa04 	addi	sp,sp,-24
   10ff0:	dd000415 	stw	r20,16(sp)
   10ff4:	dc400115 	stw	r17,4(sp)
   10ff8:	dfc00515 	stw	ra,20(sp)
   10ffc:	dcc00315 	stw	r19,12(sp)
   11000:	dc800215 	stw	r18,8(sp)
   11004:	dc000015 	stw	r16,0(sp)
   11008:	008003c4 	movi	r2,15
   1100c:	2823883a 	mov	r17,r5
   11010:	2029883a 	mov	r20,r4
   11014:	11400136 	bltu	r2,r5,1101c <_memalign_r+0x38>
   11018:	04400404 	movi	r17,16
   1101c:	308002c4 	addi	r2,r6,11
   11020:	00c00584 	movi	r3,22
   11024:	18803e2e 	bgeu	r3,r2,11120 <_memalign_r+0x13c>
   11028:	04bffe04 	movi	r18,-8
   1102c:	14a4703a 	and	r18,r2,r18
   11030:	90003d16 	blt	r18,zero,11128 <_memalign_r+0x144>
   11034:	91803c36 	bltu	r18,r6,11128 <_memalign_r+0x144>
   11038:	89400404 	addi	r5,r17,16
   1103c:	2c8b883a 	add	r5,r5,r18
   11040:	a009883a 	mov	r4,r20
   11044:	0002a440 	call	2a44 <_malloc_r>
   11048:	1027883a 	mov	r19,r2
   1104c:	10004926 	beq	r2,zero,11174 <_memalign_r+0x190>
   11050:	a009883a 	mov	r4,r20
   11054:	000ed380 	call	ed38 <__malloc_lock>
   11058:	880b883a 	mov	r5,r17
   1105c:	9809883a 	mov	r4,r19
   11060:	9c3ffe04 	addi	r16,r19,-8
   11064:	0001fd00 	call	1fd0 <__umodsi3>
   11068:	10001c26 	beq	r2,zero,110dc <_memalign_r+0xf8>
   1106c:	88bfffc4 	addi	r2,r17,-1
   11070:	9887883a 	add	r3,r19,r2
   11074:	0445c83a 	sub	r2,zero,r17
   11078:	1884703a 	and	r2,r3,r2
   1107c:	10bffe04 	addi	r2,r2,-8
   11080:	1409c83a 	sub	r4,r2,r16
   11084:	014003c4 	movi	r5,15
   11088:	8007883a 	mov	r3,r16
   1108c:	29002c0e 	bge	r5,r4,11140 <_memalign_r+0x15c>
   11090:	1021883a 	mov	r16,r2
   11094:	993fff17 	ldw	r4,-4(r19)
   11098:	00bfff04 	movi	r2,-4
   1109c:	80c7c83a 	sub	r3,r16,r3
   110a0:	2084703a 	and	r2,r4,r2
   110a4:	10c5c83a 	sub	r2,r2,r3
   110a8:	11000054 	ori	r4,r2,1
   110ac:	81000115 	stw	r4,4(r16)
   110b0:	8085883a 	add	r2,r16,r2
   110b4:	11800117 	ldw	r6,4(r2)
   110b8:	980b883a 	mov	r5,r19
   110bc:	a009883a 	mov	r4,r20
   110c0:	31800054 	ori	r6,r6,1
   110c4:	11800115 	stw	r6,4(r2)
   110c8:	98bfff17 	ldw	r2,-4(r19)
   110cc:	1080004c 	andi	r2,r2,1
   110d0:	10c6b03a 	or	r3,r2,r3
   110d4:	98ffff15 	stw	r3,-4(r19)
   110d8:	00078940 	call	7894 <_free_r>
   110dc:	80c00117 	ldw	r3,4(r16)
   110e0:	00bfff04 	movi	r2,-4
   110e4:	1884703a 	and	r2,r3,r2
   110e8:	1485c83a 	sub	r2,r2,r18
   110ec:	00c003c4 	movi	r3,15
   110f0:	18801516 	blt	r3,r2,11148 <_memalign_r+0x164>
   110f4:	a009883a 	mov	r4,r20
   110f8:	000ed5c0 	call	ed5c <__malloc_unlock>
   110fc:	80800204 	addi	r2,r16,8
   11100:	dfc00517 	ldw	ra,20(sp)
   11104:	dd000417 	ldw	r20,16(sp)
   11108:	dcc00317 	ldw	r19,12(sp)
   1110c:	dc800217 	ldw	r18,8(sp)
   11110:	dc400117 	ldw	r17,4(sp)
   11114:	dc000017 	ldw	r16,0(sp)
   11118:	dec00604 	addi	sp,sp,24
   1111c:	f800283a 	ret
   11120:	04800404 	movi	r18,16
   11124:	91bfc42e 	bgeu	r18,r6,11038 <__alt_data_end+0xff011038>
   11128:	00800304 	movi	r2,12
   1112c:	a0800015 	stw	r2,0(r20)
   11130:	0005883a 	mov	r2,zero
   11134:	003ff206 	br	11100 <__alt_data_end+0xff011100>
   11138:	300b883a 	mov	r5,r6
   1113c:	0002a441 	jmpi	2a44 <_malloc_r>
   11140:	1461883a 	add	r16,r2,r17
   11144:	003fd306 	br	11094 <__alt_data_end+0xff011094>
   11148:	848b883a 	add	r5,r16,r18
   1114c:	10800054 	ori	r2,r2,1
   11150:	28800115 	stw	r2,4(r5)
   11154:	80800117 	ldw	r2,4(r16)
   11158:	29400204 	addi	r5,r5,8
   1115c:	a009883a 	mov	r4,r20
   11160:	1080004c 	andi	r2,r2,1
   11164:	14a4b03a 	or	r18,r2,r18
   11168:	84800115 	stw	r18,4(r16)
   1116c:	00078940 	call	7894 <_free_r>
   11170:	003fe006 	br	110f4 <__alt_data_end+0xff0110f4>
   11174:	0005883a 	mov	r2,zero
   11178:	003fe106 	br	11100 <__alt_data_end+0xff011100>

0001117c <memcmp>:
   1117c:	01c000c4 	movi	r7,3
   11180:	3980192e 	bgeu	r7,r6,111e8 <memcmp+0x6c>
   11184:	2144b03a 	or	r2,r4,r5
   11188:	11c4703a 	and	r2,r2,r7
   1118c:	10000f26 	beq	r2,zero,111cc <memcmp+0x50>
   11190:	20800003 	ldbu	r2,0(r4)
   11194:	28c00003 	ldbu	r3,0(r5)
   11198:	10c0151e 	bne	r2,r3,111f0 <memcmp+0x74>
   1119c:	31bfff84 	addi	r6,r6,-2
   111a0:	01ffffc4 	movi	r7,-1
   111a4:	00000406 	br	111b8 <memcmp+0x3c>
   111a8:	20800003 	ldbu	r2,0(r4)
   111ac:	28c00003 	ldbu	r3,0(r5)
   111b0:	31bfffc4 	addi	r6,r6,-1
   111b4:	10c00e1e 	bne	r2,r3,111f0 <memcmp+0x74>
   111b8:	21000044 	addi	r4,r4,1
   111bc:	29400044 	addi	r5,r5,1
   111c0:	31fff91e 	bne	r6,r7,111a8 <__alt_data_end+0xff0111a8>
   111c4:	0005883a 	mov	r2,zero
   111c8:	f800283a 	ret
   111cc:	20c00017 	ldw	r3,0(r4)
   111d0:	28800017 	ldw	r2,0(r5)
   111d4:	18bfee1e 	bne	r3,r2,11190 <__alt_data_end+0xff011190>
   111d8:	31bfff04 	addi	r6,r6,-4
   111dc:	21000104 	addi	r4,r4,4
   111e0:	29400104 	addi	r5,r5,4
   111e4:	39bff936 	bltu	r7,r6,111cc <__alt_data_end+0xff0111cc>
   111e8:	303fe91e 	bne	r6,zero,11190 <__alt_data_end+0xff011190>
   111ec:	003ff506 	br	111c4 <__alt_data_end+0xff0111c4>
   111f0:	10c5c83a 	sub	r2,r2,r3
   111f4:	f800283a 	ret

000111f8 <__register_exitproc>:
   111f8:	defffa04 	addi	sp,sp,-24
   111fc:	dc000315 	stw	r16,12(sp)
   11200:	04000074 	movhi	r16,1
   11204:	840e0804 	addi	r16,r16,14368
   11208:	80c00017 	ldw	r3,0(r16)
   1120c:	dc400415 	stw	r17,16(sp)
   11210:	dfc00515 	stw	ra,20(sp)
   11214:	18805217 	ldw	r2,328(r3)
   11218:	2023883a 	mov	r17,r4
   1121c:	10003726 	beq	r2,zero,112fc <__register_exitproc+0x104>
   11220:	10c00117 	ldw	r3,4(r2)
   11224:	010007c4 	movi	r4,31
   11228:	20c00e16 	blt	r4,r3,11264 <__register_exitproc+0x6c>
   1122c:	1a000044 	addi	r8,r3,1
   11230:	8800221e 	bne	r17,zero,112bc <__register_exitproc+0xc4>
   11234:	18c00084 	addi	r3,r3,2
   11238:	18c7883a 	add	r3,r3,r3
   1123c:	18c7883a 	add	r3,r3,r3
   11240:	12000115 	stw	r8,4(r2)
   11244:	10c7883a 	add	r3,r2,r3
   11248:	19400015 	stw	r5,0(r3)
   1124c:	0005883a 	mov	r2,zero
   11250:	dfc00517 	ldw	ra,20(sp)
   11254:	dc400417 	ldw	r17,16(sp)
   11258:	dc000317 	ldw	r16,12(sp)
   1125c:	dec00604 	addi	sp,sp,24
   11260:	f800283a 	ret
   11264:	00800034 	movhi	r2,0
   11268:	108a8704 	addi	r2,r2,10780
   1126c:	10002626 	beq	r2,zero,11308 <__register_exitproc+0x110>
   11270:	01006404 	movi	r4,400
   11274:	d9400015 	stw	r5,0(sp)
   11278:	d9800115 	stw	r6,4(sp)
   1127c:	d9c00215 	stw	r7,8(sp)
   11280:	0002a1c0 	call	2a1c <malloc>
   11284:	d9400017 	ldw	r5,0(sp)
   11288:	d9800117 	ldw	r6,4(sp)
   1128c:	d9c00217 	ldw	r7,8(sp)
   11290:	10001d26 	beq	r2,zero,11308 <__register_exitproc+0x110>
   11294:	81000017 	ldw	r4,0(r16)
   11298:	10000115 	stw	zero,4(r2)
   1129c:	02000044 	movi	r8,1
   112a0:	22405217 	ldw	r9,328(r4)
   112a4:	0007883a 	mov	r3,zero
   112a8:	12400015 	stw	r9,0(r2)
   112ac:	20805215 	stw	r2,328(r4)
   112b0:	10006215 	stw	zero,392(r2)
   112b4:	10006315 	stw	zero,396(r2)
   112b8:	883fde26 	beq	r17,zero,11234 <__alt_data_end+0xff011234>
   112bc:	18c9883a 	add	r4,r3,r3
   112c0:	2109883a 	add	r4,r4,r4
   112c4:	1109883a 	add	r4,r2,r4
   112c8:	21802215 	stw	r6,136(r4)
   112cc:	01800044 	movi	r6,1
   112d0:	12406217 	ldw	r9,392(r2)
   112d4:	30cc983a 	sll	r6,r6,r3
   112d8:	4992b03a 	or	r9,r9,r6
   112dc:	12406215 	stw	r9,392(r2)
   112e0:	21c04215 	stw	r7,264(r4)
   112e4:	01000084 	movi	r4,2
   112e8:	893fd21e 	bne	r17,r4,11234 <__alt_data_end+0xff011234>
   112ec:	11006317 	ldw	r4,396(r2)
   112f0:	218cb03a 	or	r6,r4,r6
   112f4:	11806315 	stw	r6,396(r2)
   112f8:	003fce06 	br	11234 <__alt_data_end+0xff011234>
   112fc:	18805304 	addi	r2,r3,332
   11300:	18805215 	stw	r2,328(r3)
   11304:	003fc606 	br	11220 <__alt_data_end+0xff011220>
   11308:	00bfffc4 	movi	r2,-1
   1130c:	003fd006 	br	11250 <__alt_data_end+0xff011250>

00011310 <__call_exitprocs>:
   11310:	defff504 	addi	sp,sp,-44
   11314:	df000915 	stw	fp,36(sp)
   11318:	dd400615 	stw	r21,24(sp)
   1131c:	dc800315 	stw	r18,12(sp)
   11320:	dfc00a15 	stw	ra,40(sp)
   11324:	ddc00815 	stw	r23,32(sp)
   11328:	dd800715 	stw	r22,28(sp)
   1132c:	dd000515 	stw	r20,20(sp)
   11330:	dcc00415 	stw	r19,16(sp)
   11334:	dc400215 	stw	r17,8(sp)
   11338:	dc000115 	stw	r16,4(sp)
   1133c:	d9000015 	stw	r4,0(sp)
   11340:	2839883a 	mov	fp,r5
   11344:	04800044 	movi	r18,1
   11348:	057fffc4 	movi	r21,-1
   1134c:	00800074 	movhi	r2,1
   11350:	108e0804 	addi	r2,r2,14368
   11354:	12000017 	ldw	r8,0(r2)
   11358:	45005217 	ldw	r20,328(r8)
   1135c:	44c05204 	addi	r19,r8,328
   11360:	a0001c26 	beq	r20,zero,113d4 <__call_exitprocs+0xc4>
   11364:	a0800117 	ldw	r2,4(r20)
   11368:	15ffffc4 	addi	r23,r2,-1
   1136c:	b8000d16 	blt	r23,zero,113a4 <__call_exitprocs+0x94>
   11370:	14000044 	addi	r16,r2,1
   11374:	8421883a 	add	r16,r16,r16
   11378:	8421883a 	add	r16,r16,r16
   1137c:	84402004 	addi	r17,r16,128
   11380:	a463883a 	add	r17,r20,r17
   11384:	a421883a 	add	r16,r20,r16
   11388:	e0001e26 	beq	fp,zero,11404 <__call_exitprocs+0xf4>
   1138c:	80804017 	ldw	r2,256(r16)
   11390:	e0801c26 	beq	fp,r2,11404 <__call_exitprocs+0xf4>
   11394:	bdffffc4 	addi	r23,r23,-1
   11398:	843fff04 	addi	r16,r16,-4
   1139c:	8c7fff04 	addi	r17,r17,-4
   113a0:	bd7ff91e 	bne	r23,r21,11388 <__alt_data_end+0xff011388>
   113a4:	00800034 	movhi	r2,0
   113a8:	108a8c04 	addi	r2,r2,10800
   113ac:	10000926 	beq	r2,zero,113d4 <__call_exitprocs+0xc4>
   113b0:	a0800117 	ldw	r2,4(r20)
   113b4:	1000301e 	bne	r2,zero,11478 <__call_exitprocs+0x168>
   113b8:	a0800017 	ldw	r2,0(r20)
   113bc:	10003226 	beq	r2,zero,11488 <__call_exitprocs+0x178>
   113c0:	a009883a 	mov	r4,r20
   113c4:	98800015 	stw	r2,0(r19)
   113c8:	0002a300 	call	2a30 <free>
   113cc:	9d000017 	ldw	r20,0(r19)
   113d0:	a03fe41e 	bne	r20,zero,11364 <__alt_data_end+0xff011364>
   113d4:	dfc00a17 	ldw	ra,40(sp)
   113d8:	df000917 	ldw	fp,36(sp)
   113dc:	ddc00817 	ldw	r23,32(sp)
   113e0:	dd800717 	ldw	r22,28(sp)
   113e4:	dd400617 	ldw	r21,24(sp)
   113e8:	dd000517 	ldw	r20,20(sp)
   113ec:	dcc00417 	ldw	r19,16(sp)
   113f0:	dc800317 	ldw	r18,12(sp)
   113f4:	dc400217 	ldw	r17,8(sp)
   113f8:	dc000117 	ldw	r16,4(sp)
   113fc:	dec00b04 	addi	sp,sp,44
   11400:	f800283a 	ret
   11404:	a0800117 	ldw	r2,4(r20)
   11408:	80c00017 	ldw	r3,0(r16)
   1140c:	10bfffc4 	addi	r2,r2,-1
   11410:	15c01426 	beq	r2,r23,11464 <__call_exitprocs+0x154>
   11414:	80000015 	stw	zero,0(r16)
   11418:	183fde26 	beq	r3,zero,11394 <__alt_data_end+0xff011394>
   1141c:	95c8983a 	sll	r4,r18,r23
   11420:	a0806217 	ldw	r2,392(r20)
   11424:	a5800117 	ldw	r22,4(r20)
   11428:	2084703a 	and	r2,r4,r2
   1142c:	10000b26 	beq	r2,zero,1145c <__call_exitprocs+0x14c>
   11430:	a0806317 	ldw	r2,396(r20)
   11434:	2088703a 	and	r4,r4,r2
   11438:	20000c1e 	bne	r4,zero,1146c <__call_exitprocs+0x15c>
   1143c:	89400017 	ldw	r5,0(r17)
   11440:	d9000017 	ldw	r4,0(sp)
   11444:	183ee83a 	callr	r3
   11448:	a0800117 	ldw	r2,4(r20)
   1144c:	15bfbf1e 	bne	r2,r22,1134c <__alt_data_end+0xff01134c>
   11450:	98800017 	ldw	r2,0(r19)
   11454:	153fcf26 	beq	r2,r20,11394 <__alt_data_end+0xff011394>
   11458:	003fbc06 	br	1134c <__alt_data_end+0xff01134c>
   1145c:	183ee83a 	callr	r3
   11460:	003ff906 	br	11448 <__alt_data_end+0xff011448>
   11464:	a5c00115 	stw	r23,4(r20)
   11468:	003feb06 	br	11418 <__alt_data_end+0xff011418>
   1146c:	89000017 	ldw	r4,0(r17)
   11470:	183ee83a 	callr	r3
   11474:	003ff406 	br	11448 <__alt_data_end+0xff011448>
   11478:	a0800017 	ldw	r2,0(r20)
   1147c:	a027883a 	mov	r19,r20
   11480:	1029883a 	mov	r20,r2
   11484:	003fb606 	br	11360 <__alt_data_end+0xff011360>
   11488:	0005883a 	mov	r2,zero
   1148c:	003ffb06 	br	1147c <__alt_data_end+0xff01147c>

00011490 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11490:	defffd04 	addi	sp,sp,-12
   11494:	df000215 	stw	fp,8(sp)
   11498:	df000204 	addi	fp,sp,8
   1149c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   114a0:	0001883a 	nop
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   114ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   114b0:	10000226 	beq	r2,zero,114bc <_exit+0x2c>
    ALT_SIM_FAIL();
   114b4:	002af070 	cmpltui	zero,zero,43969
   114b8:	00000106 	br	114c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   114bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   114c0:	003fff06 	br	114c0 <__alt_data_end+0xff0114c0>
