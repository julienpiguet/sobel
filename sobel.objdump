
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011280 memsz 0x00011280 flags r-x
    LOAD off    0x000122a0 vaddr 0x000112a0 paddr 0x00012e8c align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014a78 vaddr 0x00014a78 paddr 0x00014a78 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000108b4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a8  00010af8  00010af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000112a0  00012e8c  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00014a78  00014a78  00014a78  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014c28  00014c28  00013e8c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013e8c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d0  00000000  00000000  00013eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027aa0  00000000  00000000  00014f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a0cd  00000000  00000000  0003ca20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c827  00000000  00000000  00046aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025b4  00000000  00000000  00053314  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e71  00000000  00000000  000558c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018ab2  00000000  00000000  00059739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000721ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  00072250  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000776fe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00077701  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007770d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007770e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007770f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00077713  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00077717  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007771b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00077724  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007772d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00077736  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00077741  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00077779  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078d96  00000000  00000000  0007d251  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010af8 l    d  .rodata	00000000 .rodata
000112a0 l    d  .rwdata	00000000 .rwdata
00014a78 l    d  .bss	00000000 .bss
00014c28 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000110ee l     O .rodata	00000010 zeroes.4404
00004cc4 l     F .text	000000bc __sbprintf
000110fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004ed4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006a04 l     F .text	00000008 __fp_unlock
00006a18 l     F .text	0000019c __sinit.part.1
00006bb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000117a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011bec l     O .rwdata	00000020 lc_ctype_charset
00011bcc l     O .rwdata	00000020 lc_message_charset
00011c0c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011130 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009750 l     F .text	000000fc __sprint_r.part.0
00011264 l     O .rodata	00000010 blanks.4348
00011254 l     O .rodata	00000010 zeroes.4349
0000acdc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ddf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000defc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000df28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e0f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e1e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012e7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000e6a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e7dc l     F .text	00000034 alt_dev_reg
00011dec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000eae8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000ecf4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f32c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f87c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000fcf0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000fe30 l     F .text	0000003c alt_get_errno
0000fe6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014afc g     O .bss	00000004 alt_instruction_exception_handler
00008de8 g     F .text	00000074 _mprec_log10
00008ed4 g     F .text	0000008c __any_on
0000b278 g     F .text	00000054 _isatty_r
0001113c g     O .rodata	00000028 __mprec_tinytens
0000e2f0 g     F .text	0000007c alt_main
000028f0 g     F .text	000000c0 _puts_r
00014b28 g     O .bss	00000100 alt_irq
0000b2cc g     F .text	00000060 _lseek_r
00012e8c g       *ABS*	00000000 __flash_rwdata_start
0000ca28 g     F .text	00000088 .hidden __eqdf2
00014c28 g       *ABS*	00000000 __alt_heap_start
000028b4 g     F .text	0000003c printf
0000b4e4 g     F .text	0000009c _wcrtomb_r
00009610 g     F .text	0000005c __sseek
00006d54 g     F .text	00000010 __sinit
0000b38c g     F .text	00000140 __swbuf_r
0000781c g     F .text	0000007c _setlocale_r
00006bbc g     F .text	00000068 __sfmoreglue
0000e390 g     F .text	00000024 __malloc_unlock
000009f0 g     F .text	00000014 LCD_Write_Command
00014ab4 g     O .bss	00000004 sobel_width
00014aa0 g     O .bss	00000004 start_all
00014aec g     O .bss	00000004 altera_avalon_timer_ts_freq
00007ce0 g     F .text	0000015c memmove
00000a04 g     F .text	00000014 LCD_Write_Data
00006d3c g     F .text	00000018 _cleanup
00014aac g     O .bss	00000004 end_sobel
00007f64 g     F .text	000000a8 _Balloc
0000cab0 g     F .text	000000dc .hidden __gtdf2
00010228 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b21c g     F .text	0000005c _fstat_r
00014acc g     O .bss	00000004 errno
0000958c g     F .text	00000008 __seofread
00014ae0 g     O .bss	00000004 alt_argv
0001ae4c g       *ABS*	00000000 _gp
0000e678 g     F .text	00000030 usleep
0000e600 g     F .text	00000078 alt_uncached_malloc
00000668 g     F .text	00000074 cam_set_image_pointer
00011c6c g     O .rwdata	00000180 alt_fd_list
00001488 g     F .text	00000010 vga_set_pointer
0001024c g     F .text	00000090 alt_find_dev
00007b98 g     F .text	00000148 memcpy
00006a0c g     F .text	0000000c _cleanup_r
0000dd14 g     F .text	000000dc .hidden __floatsidf
0000fdb4 g     F .text	0000007c alt_io_redirect
00014a9c g     O .bss	00000004 end_all
0000cb8c g     F .text	000000f4 .hidden __ltdf2
00010af8 g       *ABS*	00000000 __DTOR_END__
000029b0 g     F .text	00000014 puts
00010518 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000094c4 g     F .text	00000074 __fpclassifyd
00008d44 g     F .text	000000a4 __ratio
0000acc0 g     F .text	0000001c __vfiprintf_internal
0000eeec g     F .text	0000021c altera_avalon_jtag_uart_read
00002050 g     F .text	00000014 malloc
00002884 g     F .text	00000030 _printf_r
00000844 g     F .text	00000008 get_grayscale_picture
000015a0 g     F .text	00000064 .hidden __udivsi3
00010b58 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e050 g     F .text	000000a4 isatty
0001118c g     O .rodata	000000c8 __mprec_tens
00007898 g     F .text	0000000c __locale_charset
00010488 g     F .text	00000090 alt_icache_flush
00014ac8 g     O .bss	00000004 __malloc_top_pad
00014a88 g     O .bss	00000004 grayscale_array_int
00012e5c g     O .rwdata	00000004 __mb_cur_max
000078c8 g     F .text	0000000c _localeconv_r
00008370 g     F .text	0000003c __i2b
000071d8 g     F .text	000004bc __sfvwrite_r
00000a18 g     F .text	00000414 init_LCD
000029c4 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000b32c g     F .text	00000060 _read_r
0000f7bc g     F .text	00000078 alt_dcache_flush
00014ab8 g     O .bss	00000004 sobel_result
00012e74 g     O .rwdata	00000004 alt_max_fd
0000af10 g     F .text	000000f0 _fclose_r
000069d4 g     F .text	00000030 fflush
00014ac4 g     O .bss	00000004 __malloc_max_sbrked_mem
00014a78 g     O .bss	00000004 size_int
00014a8c g     O .bss	00000004 grayscale_array
0000c17c g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008aec g     F .text	0000010c __b2d
0000bc44 g     F .text	00000538 .hidden __umoddi3
0000e21c g     F .text	000000d4 lseek
0000090c g     F .text	0000008c i2c_short_read
00012e54 g     O .rwdata	00000004 _global_impure_ptr
00008f60 g     F .text	00000564 _realloc_r
00014c28 g       *ABS*	00000000 __bss_end
0000fc00 g     F .text	000000f0 alt_iic_isr_register
00010120 g     F .text	00000108 alt_tick
0000b6cc g     F .text	00000578 .hidden __udivdi3
0000b178 g     F .text	00000024 _fputwc_r
00011164 g     O .rodata	00000028 __mprec_bigtens
00008154 g     F .text	00000104 __s2b
00001f44 g     F .text	000000a8 .hidden __floatunsidf
0000882c g     F .text	00000060 __mcmp
00006d74 g     F .text	00000018 __fp_lock_all
0000fbb4 g     F .text	0000004c alt_ic_irq_enabled
00014a7c g     O .bss	00000004 grayscape_height
00010084 g     F .text	0000009c alt_alarm_stop
00014af0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011c44 g     O .rwdata	00000028 alt_dev_null
00000eb8 g     F .text	00000078 transfer_LCD_with_dma
00001318 g     F .text	00000170 sobel_complete
0000f834 g     F .text	00000048 alt_dcache_flush_all
00008258 g     F .text	00000068 __hi0bits
0000dc94 g     F .text	00000080 .hidden __fixdfsi
00012e8c g       *ABS*	00000000 __ram_rwdata_end
00012e6c g     O .rwdata	00000008 alt_dev_list
0000e6e4 g     F .text	000000f8 write
0000f518 g     F .text	00000020 alt_timestamp_freq
000112a0 g       *ABS*	00000000 __ram_rodata_end
0000df64 g     F .text	000000b0 fstat
0000cb8c g     F .text	000000f4 .hidden __ledf2
000085a4 g     F .text	00000140 __pow5mult
00009864 g     F .text	0000145c ___vfiprintf_internal_r
00014ad8 g     O .bss	00000004 __nlocale_changed
00001604 g     F .text	00000058 .hidden __umodsi3
000007b4 g     F .text	00000080 conv_grayscale_init
00014c28 g       *ABS*	00000000 end
00001290 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
0000ea28 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00010af8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f3a4 g     F .text	0000007c alt_avalon_timer_sc_init
00001fec g     F .text	00000064 .hidden __clzsi2
0000f108 g     F .text	00000224 altera_avalon_jtag_uart_write
00006d64 g     F .text	00000004 __sfp_lock_acquire
00007ab4 g     F .text	000000e4 memchr
00002ab0 g     F .text	000021f8 ___vfprintf_internal_r
00006ec8 g     F .text	00000310 _free_r
000078a4 g     F .text	00000010 __locale_mb_cur_max
00010c80 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010944 g     F .text	00000180 __call_exitprocs
00014ad4 g     O .bss	00000004 __mlocale_changed
00012e4c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014aa4 g     O .bss	00000004 end_conv_grayscale
00014af4 g     O .bss	00000004 _alt_tick_rate
000086e4 g     F .text	00000148 __lshift
00014af8 g     O .bss	00000004 _alt_nticks
0000e3f0 g     F .text	000000fc read
0000e848 g     F .text	0000007c alt_sys_init
0001082c g     F .text	00000118 __register_exitproc
000083ac g     F .text	000001f8 __multiply
0000ed94 g     F .text	00000068 altera_avalon_jtag_uart_close
000112a0 g       *ABS*	00000000 __ram_rwdata_start
00010af8 g       *ABS*	00000000 __ram_rodata_start
00014b00 g     O .bss	00000028 __malloc_current_mallinfo
00008bf8 g     F .text	0000014c __d2b
00014abc g     O .bss	00000004 sobel_height
00014a84 g     O .bss	00000004 grayscale_width_int
00000720 g     F .text	00000014 enable_continues_mode
0000e8c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001298 g     F .text	00000080 init_sobel_arrays
000103e4 g     F .text	000000a4 alt_get_fd
0000f664 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000adf8 g     F .text	00000054 _close_r
000107b0 g     F .text	0000007c memcmp
0000e984 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014c28 g       *ABS*	00000000 __alt_stack_base
0000e9d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004d80 g     F .text	00000154 __swsetup_r
0000165c g     F .text	000008e8 .hidden __divdf3
00006c24 g     F .text	00000118 __sfp
00008e5c g     F .text	00000078 __copybits
000113a0 g     O .rwdata	00000408 __malloc_av_
00006d70 g     F .text	00000004 __sinit_lock_release
0000cc80 g     F .text	00000718 .hidden __muldf3
00009538 g     F .text	00000054 __sread
000102dc g     F .text	00000108 alt_find_file
0000f8b8 g     F .text	000000a4 alt_dev_llist_insert
0000e36c g     F .text	00000024 __malloc_lock
0000e550 g     F .text	000000b0 sbrk
00006978 g     F .text	0000005c _fflush_r
0000ae4c g     F .text	000000c4 _calloc_r
00014a98 g     O .bss	00000004 start_global
000112a0 g     O .rwdata	00000100 .hidden __divsi3_table
00014a78 g       *ABS*	00000000 __bss_start
00007e3c g     F .text	00000128 memset
00000f30 g     F .text	00000360 main
00014ae4 g     O .bss	00000004 alt_envp
00014ac0 g     O .bss	00000004 __malloc_max_total_mem
00000834 g     F .text	00000008 get_grayscale_width
0000e924 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b4cc g     F .text	00000018 __swbuf
0000966c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b000 g     F .text	00000014 fclose
0000f420 g     F .text	00000078 alt_timestamp_start
000050d4 g     F .text	00001688 _dtoa_r
00002078 g     F .text	0000080c _malloc_r
0000b640 g     F .text	00000030 __ascii_wctomb
00012e78 g     O .rwdata	00000004 alt_errno
00007694 g     F .text	000000c4 _fwalk
00014ab0 g     O .bss	00000004 start_sobel
000014a8 g     F .text	00000084 .hidden __divsi3
00006da4 g     F .text	00000124 _malloc_trim_r
00010af8 g       *ABS*	00000000 __CTOR_END__
00014a80 g     O .bss	00000004 grayscale_width
00009674 g     F .text	000000dc strcmp
00000e2c g     F .text	0000008c transfer_LCD_no_dma
00010af8 g       *ABS*	00000000 __flash_rodata_start
00010af8 g       *ABS*	00000000 __DTOR_LIST__
0000ca28 g     F .text	00000088 .hidden __nedf2
00010dc0 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000e810 g     F .text	00000038 alt_irq_init
0000e4ec g     F .text	00000064 alt_release_fd
00000864 g     F .text	000000a8 i2c_auto_detect
00010600 g     F .text	00000018 memalign
00010fac g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014ad0 g     O .bss	00000004 _PathLocale
0000084c g     F .text	00000018 i2c_busy_wait
000105b4 g     F .text	00000014 atexit
0000ad98 g     F .text	00000060 _write_r
000078d4 g     F .text	00000018 setlocale
00012e58 g     O .rwdata	00000004 _impure_ptr
00014adc g     O .bss	00000004 alt_argc
0000675c g     F .text	0000021c __sflush_r
00014ae8 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f9bc g     F .text	00000060 _do_dtors
000078c0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008a88 g     F .text	00000064 __ulp
00006d8c g     F .text	00000018 __fp_unlock_all
00012e64 g     O .rwdata	00000008 alt_fs_list
00000998 g     F .text	00000058 i2c_short_write
00014aa8 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014a90 g     O .bss	00000002 LCD_height
000078ec g     F .text	0000000c localeconv
0000f498 g     F .text	00000080 alt_timestamp
00001498 g     F .text	00000010 vga_set_swap
0000fa50 g     F .text	00000050 alt_ic_isr_register
00012e8c g       *ABS*	00000000 _edata
00014c28 g       *ABS*	00000000 _end
0000b014 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000edfc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000fb28 g     F .text	0000008c alt_ic_irq_disable
00009594 g     F .text	0000007c __swrite
00012e50 g     O .rwdata	00000004 __malloc_trim_threshold
00014a92 g     O .bss	00000002 LCD_width
00000774 g     F .text	00000040 conv_grayscale
000078b4 g     F .text	0000000c __locale_msgcharset
000105c8 g     F .text	00000038 exit
00007758 g     F .text	000000c4 _fwalk_reent
0000888c g     F .text	000001fc __mdiff
0000152c g     F .text	00000074 .hidden __modsi3
00010618 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006d68 g     F .text	00000004 __sfp_lock_release
0000083c g     F .text	00000008 get_grayscale_height
00010ac4 g     F .text	00000034 _exit
0000f538 g     F .text	0000012c alt_alarm_start
000078f8 g     F .text	000001bc __smakebuf_r
00002a18 g     F .text	00000098 strlen
0000ff30 g     F .text	00000154 open
0000cab0 g     F .text	000000dc .hidden __gedf2
00012e60 g     O .rwdata	00000004 __wctomb
0000984c g     F .text	00000018 __sprint_r
0000fa1c g     F .text	00000034 alt_icache_flush_all
00012e80 g     O .rwdata	00000004 alt_priority_mask
0000faa0 g     F .text	00000088 alt_ic_irq_enable
00004ca8 g     F .text	0000001c __vfprintf_internal
0000b670 g     F .text	0000005c _wctomb_r
0000d398 g     F .text	000008fc .hidden __subdf3
000082c0 g     F .text	000000b0 __lo0bits
00012e84 g     O .rwdata	00000008 alt_alarm_list
0000f95c g     F .text	00000060 _do_ctors
0000b580 g     F .text	000000c0 wcrtomb
0000de2c g     F .text	000000d0 close
00014a94 g     O .bss	00000004 end_global
0000e15c g     F .text	00000084 alt_load
0000b19c g     F .text	00000080 fputwc
00002064 g     F .text	00000014 free
00006d6c g     F .text	00000004 __sinit_lock_acquire
00008034 g     F .text	00000120 __multadd
0000800c g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1092ca04 	addi	r2,r2,19240
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1092ca04 	addi	r2,r2,19240
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72c17 	ldw	r2,-25424(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72c17 	ldw	r2,-25424(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ab9314 	ori	gp,gp,44620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10929e14 	ori	r2,r2,19064

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d30a14 	ori	r3,r3,19496

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e15c0 	call	e15c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000e2f00 	call	e2f0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009980 	call	998 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009980 	call	998 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009980 	call	998 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84037004 	addi	r16,r16,3520
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009980 	call	998 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009980 	call	998 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84032004 	addi	r16,r16,3200
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009980 	call	998 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009980 	call	998 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009980 	call	998 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009980 	call	998 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009980 	call	998 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009980 	call	998 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009980 	call	998 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	8402d604 	addi	r16,r16,2904
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009980 	call	998 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009980 	call	998 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009980 	call	998 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009981 	jmpi	998 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2102be04 	addi	r4,r4,2808
     620:	297fffcc 	andi	r5,r5,65535
     624:	00028b40 	call	28b4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2102c604 	addi	r4,r4,2840
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00028b40 	call	28b4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2102ce04 	addi	r4,r4,2872
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	00028b41 	jmpi	28b4 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
int size_int = 0;

void conv_grayscale(void *picture) {
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
     774:	d1e70b17 	ldw	r7,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;
int size_int = 0;

void conv_grayscale(void *picture) {
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
     778:	d0a70f17 	ldw	r2,-25540(gp)
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
     77c:	39cf883a 	add	r7,r7,r7
     780:	39cf883a 	add	r7,r7,r7
     784:	11cf883a 	add	r7,r2,r7
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     788:	11c0092e 	bgeu	r2,r7,7b0 <conv_grayscale+0x3c>
     78c:	21400104 	addi	r5,r4,4

			*pos = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl++],pixels[pxl++]);
     790:	20c00017 	ldw	r3,0(r4)
     794:	29800017 	ldw	r6,0(r5)
     798:	1987c0f2 	custom	3,r3,r3,r6
     79c:	10c00015 	stw	r3,0(r2)
			pos++;
     7a0:	10800104 	addi	r2,r2,4
     7a4:	21000204 	addi	r4,r4,8
     7a8:	29400204 	addi	r5,r5,8
	register unsigned int * pos = (unsigned int *)(grayscale_array_int);
	register int pxl = 0;
	register unsigned int * end = (unsigned int *)(grayscale_array_int+size_int);
	register unsigned int *pixels = (unsigned int *)picture;

	while (pos < end) {
     7ac:	11fff836 	bltu	r2,r7,790 <__alt_data_end+0xff000790>
     7b0:	f800283a 	ret

000007b4 <conv_grayscale_init>:
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7b4:	defffb04 	addi	sp,sp,-20
     7b8:	dc000015 	stw	r16,0(sp)
		grayscale_width = width;
		grayscale_width_int = width>>2;
     7bc:	2021d0ba 	srai	r16,r4,2
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7c0:	dc400115 	stw	r17,4(sp)
     7c4:	2023883a 	mov	r17,r4
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7c8:	d1271017 	ldw	r4,-25536(gp)
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7cc:	dc800215 	stw	r18,8(sp)
     7d0:	dfc00415 	stw	ra,16(sp)
     7d4:	dcc00315 	stw	r19,12(sp)
		grayscale_width = width;
     7d8:	d4670d15 	stw	r17,-25548(gp)
		grayscale_width_int = width>>2;
     7dc:	d4270e15 	stw	r16,-25544(gp)
		grayscape_height = height;
     7e0:	d1670c15 	stw	r5,-25552(gp)
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7e4:	2825883a 	mov	r18,r5
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7e8:	20001026 	beq	r4,zero,82c <conv_grayscale_init+0x78>
			free(grayscale_array);
     7ec:	00020640 	call	2064 <free>
     7f0:	d4e70c17 	ldw	r19,-25552(gp)
     7f4:	d4270e17 	ldw	r16,-25544(gp)
		grayscale_array = (unsigned char *) malloc(width* height);
     7f8:	8c89383a 	mul	r4,r17,r18
		grayscale_array_int = (unsigned int *) grayscale_array;
		size_int = grayscape_height*grayscale_width_int;
     7fc:	9c21383a 	mul	r16,r19,r16
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
			free(grayscale_array);
		grayscale_array = (unsigned char *) malloc(width* height);
     800:	00020500 	call	2050 <malloc>
     804:	d0a71015 	stw	r2,-25536(gp)
		grayscale_array_int = (unsigned int *) grayscale_array;
     808:	d0a70f15 	stw	r2,-25540(gp)
		size_int = grayscape_height*grayscale_width_int;
     80c:	d4270b15 	stw	r16,-25556(gp)
}
     810:	dfc00417 	ldw	ra,16(sp)
     814:	dcc00317 	ldw	r19,12(sp)
     818:	dc800217 	ldw	r18,8(sp)
     81c:	dc400117 	ldw	r17,4(sp)
     820:	dc000017 	ldw	r16,0(sp)
     824:	dec00504 	addi	sp,sp,20
     828:	f800283a 	ret
     82c:	2827883a 	mov	r19,r5
     830:	003ff106 	br	7f8 <__alt_data_end+0xff0007f8>

00000834 <get_grayscale_width>:



int get_grayscale_width() {
	return grayscale_width;
}
     834:	d0a70d17 	ldw	r2,-25548(gp)
     838:	f800283a 	ret

0000083c <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     83c:	d0a70c17 	ldw	r2,-25552(gp)
     840:	f800283a 	ret

00000844 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     844:	d0a71017 	ldw	r2,-25536(gp)
     848:	f800283a 	ret

0000084c <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     84c:	00c04034 	movhi	r3,256
     850:	18c42704 	addi	r3,r3,4252
     854:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     858:	108000cc 	andi	r2,r2,3
     85c:	103ffd1e 	bne	r2,zero,854 <__alt_data_end+0xff000854>
}
     860:	f800283a 	ret

00000864 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     864:	01004034 	movhi	r4,256
     868:	21042704 	addi	r4,r4,4252
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffb1e 	bne	r2,zero,86c <__alt_data_end+0xff00086c>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     880:	00800104 	movi	r2,4
     884:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     888:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     88c:	108000cc 	andi	r2,r2,3
     890:	103ffd1e 	bne	r2,zero,888 <__alt_data_end+0xff000888>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     894:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     898:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     89c:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8a0:	dfc00315 	stw	ra,12(sp)
     8a4:	dc800215 	stw	r18,8(sp)
     8a8:	dc400115 	stw	r17,4(sp)
     8ac:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8b0:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8b4:	01000074 	movhi	r4,1
     8b8:	2103b604 	addi	r4,r4,3800
     8bc:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8c0:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8c4:	00028b40 	call	28b4 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8c8:	04800a0e 	bge	zero,r18,8f4 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8cc:	04404034 	movhi	r17,256
     8d0:	8c442404 	addi	r17,r17,4240
     8d4:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8d8:	89800037 	ldwio	r6,0(r17)
     8dc:	01000074 	movhi	r4,1
     8e0:	800b883a 	mov	r5,r16
     8e4:	2103bf04 	addi	r4,r4,3836
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8e8:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8ec:	00028b40 	call	28b4 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8f0:	943ff81e 	bne	r18,r16,8d4 <__alt_data_end+0xff0008d4>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8f4:	dfc00317 	ldw	ra,12(sp)
     8f8:	dc800217 	ldw	r18,8(sp)
     8fc:	dc400117 	ldw	r17,4(sp)
     900:	dc000017 	ldw	r16,0(sp)
     904:	dec00404 	addi	sp,sp,16
     908:	f800283a 	ret

0000090c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     90c:	01804034 	movhi	r6,256
     910:	31842704 	addi	r6,r6,4252
     914:	00c04034 	movhi	r3,256
     918:	18c42704 	addi	r3,r3,4252
     91c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     920:	108000cc 	andi	r2,r2,3
     924:	103ffb1e 	bne	r2,zero,914 <__alt_data_end+0xff000914>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     928:	00804034 	movhi	r2,256
     92c:	21003fcc 	andi	r4,r4,255
     930:	10842404 	addi	r2,r2,4240
     934:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     938:	00804034 	movhi	r2,256
     93c:	10842504 	addi	r2,r2,4244
     940:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     944:	008010c4 	movi	r2,67
     948:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     94c:	180b883a 	mov	r5,r3
     950:	00c04034 	movhi	r3,256
     954:	18c42704 	addi	r3,r3,4252
     958:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     95c:	108000cc 	andi	r2,r2,3
     960:	103ffb1e 	bne	r2,zero,950 <__alt_data_end+0xff000950>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     964:	00804034 	movhi	r2,256
     968:	21000044 	addi	r4,r4,1
     96c:	10842404 	addi	r2,r2,4240
     970:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     974:	00800884 	movi	r2,34
     978:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     97c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     980:	108000cc 	andi	r2,r2,3
     984:	103ffd1e 	bne	r2,zero,97c <__alt_data_end+0xff00097c>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     988:	00804034 	movhi	r2,256
     98c:	10842604 	addi	r2,r2,4248
}
     990:	10800037 	ldwio	r2,0(r2)
     994:	f800283a 	ret

00000998 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     998:	01c04034 	movhi	r7,256
     99c:	39c42704 	addi	r7,r7,4252
     9a0:	00c04034 	movhi	r3,256
     9a4:	18c42704 	addi	r3,r3,4252
     9a8:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9ac:	108000cc 	andi	r2,r2,3
     9b0:	103ffb1e 	bne	r2,zero,9a0 <__alt_data_end+0xff0009a0>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9b4:	00804034 	movhi	r2,256
     9b8:	10842404 	addi	r2,r2,4240
     9bc:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9c0:	00804034 	movhi	r2,256
     9c4:	10842504 	addi	r2,r2,4244
     9c8:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9cc:	00804034 	movhi	r2,256
     9d0:	10842604 	addi	r2,r2,4248
     9d4:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d8:	00801084 	movi	r2,66
     9dc:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9e0:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e4:	108000cc 	andi	r2,r2,3
     9e8:	103ffd1e 	bne	r2,zero,9e0 <__alt_data_end+0xff0009e0>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9ec:	f800283a 	ret

000009f0 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9f0:	00804034 	movhi	r2,256
     9f4:	10841804 	addi	r2,r2,4192
     9f8:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9fc:	01000284 	movi	r4,10
     a00:	000e6781 	jmpi	e678 <usleep>

00000a04 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a04:	00804034 	movhi	r2,256
     a08:	10841904 	addi	r2,r2,4196
     a0c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a10:	01000284 	movi	r4,10
     a14:	000e6781 	jmpi	e678 <usleep>

00000a18 <init_LCD>:
}


void init_LCD() {
     a18:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a1c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a20:	dd400515 	stw	r21,20(sp)
     a24:	dfc00815 	stw	ra,32(sp)
     a28:	ddc00715 	stw	r23,28(sp)
     a2c:	dd800615 	stw	r22,24(sp)
     a30:	dd000415 	stw	r20,16(sp)
     a34:	dcc00315 	stw	r19,12(sp)
     a38:	dc800215 	stw	r18,8(sp)
     a3c:	dc400115 	stw	r17,4(sp)
     a40:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a44:	05400084 	movi	r21,2
     a48:	10841a04 	addi	r2,r2,4200
     a4c:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a50:	04804034 	movhi	r18,256
     a54:	94841804 	addi	r18,r18,4192
     a58:	00800a04 	movi	r2,40
     a5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a60:	04000284 	movi	r16,10
     a64:	8009883a 	mov	r4,r16
     a68:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a6c:	05c00444 	movi	r23,17
     a70:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a74:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a78:	04404034 	movhi	r17,256
     a7c:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a80:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a84:	0027883a 	mov	r19,zero
     a88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a94:	008032c4 	movi	r2,203
     a98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	00800e44 	movi	r2,57
     aa8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aac:	8009883a 	mov	r4,r16
     ab0:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab4:	00800b04 	movi	r2,44
     ab8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     abc:	8009883a 	mov	r4,r16
     ac0:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ac8:	8009883a 	mov	r4,r16
     acc:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad0:	00800d04 	movi	r2,52
     ad4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad8:	8009883a 	mov	r4,r16
     adc:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae0:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aec:	008033c4 	movi	r2,207
     af0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af4:	8009883a 	mov	r4,r16
     af8:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     afc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b08:	05802044 	movi	r22,129
     b0c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b18:	00800c04 	movi	r2,48
     b1c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b28:	00803a04 	movi	r2,232
     b2c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	00802144 	movi	r2,133
     b3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b48:	05000044 	movi	r20,1
     b4c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	00801e44 	movi	r2,121
     b5c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b68:	00803a84 	movi	r2,234
     b6c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b88:	8009883a 	mov	r4,r16
     b8c:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b90:	00801904 	movi	r2,100
     b94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b98:	8009883a 	mov	r4,r16
     b9c:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba0:	008000c4 	movi	r2,3
     ba4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba8:	8009883a 	mov	r4,r16
     bac:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb0:	00800484 	movi	r2,18
     bb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bc4:	8009883a 	mov	r4,r16
     bc8:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bcc:	00803dc4 	movi	r2,247
     bd0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd4:	8009883a 	mov	r4,r16
     bd8:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bdc:	00800804 	movi	r2,32
     be0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be4:	8009883a 	mov	r4,r16
     be8:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bec:	00803004 	movi	r2,192
     bf0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf4:	8009883a 	mov	r4,r16
     bf8:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bfc:	05800984 	movi	r22,38
     c00:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c0c:	00800104 	movi	r2,4
     c10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c1c:	00803044 	movi	r2,193
     c20:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c30:	8009883a 	mov	r4,r16
     c34:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c38:	00803144 	movi	r2,197
     c3c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c48:	00800d44 	movi	r2,53
     c4c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c58:	00800f84 	movi	r2,62
     c5c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c68:	008031c4 	movi	r2,199
     c6c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c78:	00802f84 	movi	r2,190
     c7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c88:	00802c44 	movi	r2,177
     c8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca4:	00800404 	movi	r2,16
     ca8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cac:	8009883a 	mov	r4,r16
     cb0:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb4:	00800e84 	movi	r2,58
     cb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc4:	00801544 	movi	r2,85
     cc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cd4:	00802d84 	movi	r2,182
     cd8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     ce8:	8009883a 	mov	r4,r16
     cec:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf0:	00802884 	movi	r2,162
     cf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cf8:	8009883a 	mov	r4,r16
     cfc:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d00:	00803c84 	movi	r2,242
     d04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d08:	8009883a 	mov	r4,r16
     d0c:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d10:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d14:	8009883a 	mov	r4,r16
     d18:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d1c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d20:	8009883a 	mov	r4,r16
     d24:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d28:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d34:	00800d84 	movi	r2,54
     d38:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d3c:	8009883a 	mov	r4,r16
     d40:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d44:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d50:	00800a84 	movi	r2,42
     d54:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d60:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d64:	8009883a 	mov	r4,r16
     d68:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d6c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d70:	8009883a 	mov	r4,r16
     d74:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d78:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d7c:	8009883a 	mov	r4,r16
     d80:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d84:	00803bc4 	movi	r2,239
     d88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d8c:	8009883a 	mov	r4,r16
     d90:	000e6780 	call	e678 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d94:	00800ac4 	movi	r2,43
     d98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d9c:	8009883a 	mov	r4,r16
     da0:	000e6780 	call	e678 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da8:	8009883a 	mov	r4,r16
     dac:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     db4:	8009883a 	mov	r4,r16
     db8:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dbc:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dc0:	8009883a 	mov	r4,r16
     dc4:	000e6780 	call	e678 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc8:	00800fc4 	movi	r2,63
     dcc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dd0:	8009883a 	mov	r4,r16
     dd4:	000e6780 	call	e678 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dd8:	00c04034 	movhi	r3,256
     ddc:	00803c04 	movi	r2,240
     de0:	18c41d04 	addi	r3,r3,4212
     de4:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     de8:	d0a7118d 	sth	r2,-25530(gp)
	LCD_height = 320;
     dec:	00805004 	movi	r2,320
     df0:	d0a7110d 	sth	r2,-25532(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     df4:	00800a44 	movi	r2,41
     df8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e00:	dfc00817 	ldw	ra,32(sp)
     e04:	ddc00717 	ldw	r23,28(sp)
     e08:	dd800617 	ldw	r22,24(sp)
     e0c:	dd400517 	ldw	r21,20(sp)
     e10:	dd000417 	ldw	r20,16(sp)
     e14:	dcc00317 	ldw	r19,12(sp)
     e18:	dc800217 	ldw	r18,8(sp)
     e1c:	dc400117 	ldw	r17,4(sp)
     e20:	dc000017 	ldw	r16,0(sp)
     e24:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e28:	000e6781 	jmpi	e678 <usleep>

00000e2c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e2c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e30:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e34:	dc000015 	stw	r16,0(sp)
     e38:	dfc00415 	stw	ra,16(sp)
     e3c:	dcc00315 	stw	r19,12(sp)
     e40:	dc800215 	stw	r18,8(sp)
     e44:	dc400115 	stw	r17,4(sp)
     e48:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e4c:	10841e04 	addi	r2,r2,4216
     e50:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e54:	00804034 	movhi	r2,256
     e58:	10841804 	addi	r2,r2,4192
     e5c:	00c00b04 	movi	r3,44
     e60:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e64:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e68:	01000284 	movi	r4,10
     e6c:	000e6780 	call	e678 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e70:	90000a26 	beq	r18,zero,e9c <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e74:	04c04034 	movhi	r19,256
     e78:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e7c:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e80:	8080000b 	ldhu	r2,0(r16)
     e84:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e88:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e8c:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e90:	000e6780 	call	e678 <usleep>
     e94:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e98:	8cbff91e 	bne	r17,r18,e80 <__alt_data_end+0xff000e80>
		LCD_Write_Data(data_array[pixels]);
}
     e9c:	dfc00417 	ldw	ra,16(sp)
     ea0:	dcc00317 	ldw	r19,12(sp)
     ea4:	dc800217 	ldw	r18,8(sp)
     ea8:	dc400117 	ldw	r17,4(sp)
     eac:	dc000017 	ldw	r16,0(sp)
     eb0:	dec00504 	addi	sp,sp,20
     eb4:	f800283a 	ret

00000eb8 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     eb8:	d0a7110b 	ldhu	r2,-25532(gp)
     ebc:	3080010e 	bge	r6,r2,ec4 <transfer_LCD_with_dma+0xc>
     ec0:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     ec4:	d0e7118b 	ldhu	r3,-25530(gp)
     ec8:	28c0010e 	bge	r5,r3,ed0 <transfer_LCD_with_dma+0x18>
     ecc:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ed0:	01804034 	movhi	r6,256
     ed4:	31841e04 	addi	r6,r6,4216
     ed8:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     edc:	01404034 	movhi	r5,256
     ee0:	29441b04 	addi	r5,r5,4204
     ee4:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ee8:	18ffffcc 	andi	r3,r3,65535
     eec:	10bfffcc 	andi	r2,r2,65535
     ef0:	1885383a 	mul	r2,r3,r2
     ef4:	00c04034 	movhi	r3,256
     ef8:	18c41c04 	addi	r3,r3,4208
     efc:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f00:	39c03fcc 	andi	r7,r7,255
     f04:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f08:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f0c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f10:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f14:	38000326 	beq	r7,zero,f24 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f18:	00c04404 	movi	r3,272
     f1c:	10c0002d 	sthio	r3,0(r2)
     f20:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f24:	00c04004 	movi	r3,256
     f28:	10c0002d 	sthio	r3,0(r2)
     f2c:	f800283a 	ret

00000f30 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f30:	defff804 	addi	sp,sp,-32
     f34:	dfc00715 	stw	ra,28(sp)
     f38:	dd800615 	stw	r22,24(sp)
     f3c:	dd400515 	stw	r21,20(sp)
     f40:	dd000415 	stw	r20,16(sp)
     f44:	dcc00315 	stw	r19,12(sp)
     f48:	dc800215 	stw	r18,8(sp)
     f4c:	dc400115 	stw	r17,4(sp)
     f50:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     f54:	0000a180 	call	a18 <init_LCD>
  init_camera();
     f58:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f5c:	01000604 	movi	r4,24
     f60:	00014980 	call	1498 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f64:	01000074 	movhi	r4,1
     f68:	2103c804 	addi	r4,r4,3872
     f6c:	00029b00 	call	29b0 <puts>
  cam_get_profiling();
     f70:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f74:	00005a80 	call	5a8 <cam_get_xsize>
     f78:	1021883a 	mov	r16,r2
     f7c:	00005cc0 	call	5cc <cam_get_ysize>
     f80:	10bfffcc 	andi	r2,r2,65535
     f84:	813fffcc 	andi	r4,r16,65535
     f88:	2089383a 	mul	r4,r4,r2
     f8c:	05000074 	movhi	r20,1
     f90:	a504a804 	addi	r20,r20,4768
     f94:	00020500 	call	2050 <malloc>
     f98:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f9c:	00005a80 	call	5a8 <cam_get_xsize>
     fa0:	1021883a 	mov	r16,r2
     fa4:	00005cc0 	call	5cc <cam_get_ysize>
     fa8:	10bfffcc 	andi	r2,r2,65535
     fac:	813fffcc 	andi	r4,r16,65535
     fb0:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     fb4:	04e04414 	movui	r19,33040
		      end_global = alt_timestamp();
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
     fb8:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fbc:	00020500 	call	2050 <malloc>
     fc0:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fc4:	00005a80 	call	5a8 <cam_get_xsize>
     fc8:	1021883a 	mov	r16,r2
     fcc:	00005cc0 	call	5cc <cam_get_ysize>
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	813fffcc 	andi	r4,r16,65535
     fd8:	2089383a 	mul	r4,r4,r2
     fdc:	00020500 	call	2050 <malloc>
     fe0:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fe4:	00005a80 	call	5a8 <cam_get_xsize>
     fe8:	1021883a 	mov	r16,r2
     fec:	00005cc0 	call	5cc <cam_get_ysize>
     ff0:	10bfffcc 	andi	r2,r2,65535
     ff4:	813fffcc 	andi	r4,r16,65535
     ff8:	2089383a 	mul	r4,r4,r2
     ffc:	00020500 	call	2050 <malloc>
  cam_set_image_pointer(0,buffer1);
    1000:	b00b883a 	mov	r5,r22
    1004:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1008:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    100c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1010:	a80b883a 	mov	r5,r21
    1014:	01000044 	movi	r4,1
    1018:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    101c:	880b883a 	mov	r5,r17
    1020:	01000084 	movi	r4,2
    1024:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1028:	800b883a 	mov	r5,r16
    102c:	010000c4 	movi	r4,3
    1030:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1034:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1038:	00005a80 	call	5a8 <cam_get_xsize>
    103c:	1021883a 	mov	r16,r2
    1040:	00005cc0 	call	5cc <cam_get_ysize>
    1044:	80ffffcc 	andi	r3,r16,65535
    1048:	1806d07a 	srli	r3,r3,1
    104c:	10bfffcc 	andi	r2,r2,65535
    1050:	18a3383a 	mul	r17,r3,r2

	#ifdef LOAD_SOBEL
	  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1054:	00005a80 	call	5a8 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005cc0 	call	5cc <cam_get_ysize>
    1060:	813fffcc 	andi	r4,r16,65535
    1064:	2008d07a 	srli	r4,r4,1
    1068:	117fffcc 	andi	r5,r2,65535
    106c:	00012980 	call	1298 <init_sobel_arrays>
	#endif
	#ifdef LOAD_GRAYSCALE
	  conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
    1070:	00005a80 	call	5a8 <cam_get_xsize>
    1074:	1021883a 	mov	r16,r2
    1078:	00005cc0 	call	5cc <cam_get_ysize>
    107c:	813fffcc 	andi	r4,r16,65535
    1080:	2008d07a 	srli	r4,r4,1
    1084:	117fffcc 	andi	r5,r2,65535
    1088:	00007b40 	call	7b4 <conv_grayscale_init>
	#ifdef LOAD_SOBEL_ALL
	  sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());
	#endif

  do {
	  if (new_image_available() != 0) {
    108c:	00007340 	call	734 <new_image_available>
    1090:	10803fcc 	andi	r2,r2,255
    1094:	1080201c 	xori	r2,r2,128
    1098:	10bfe004 	addi	r2,r2,-128
    109c:	103ffb26 	beq	r2,zero,108c <__alt_data_end+0xff00108c>
		  if (current_image_valid()!=0) {
    10a0:	00006dc0 	call	6dc <current_image_valid>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	10a0001c 	xori	r2,r2,32768
    10ac:	10a00004 	addi	r2,r2,-32768
    10b0:	103ff626 	beq	r2,zero,108c <__alt_data_end+0xff00108c>

			  alt_timestamp_start();
    10b4:	000f4200 	call	f420 <alt_timestamp_start>

			  start_global = alt_timestamp();
    10b8:	000f4980 	call	f498 <alt_timestamp>
    10bc:	d0a71315 	stw	r2,-25524(gp)
			  current_mode = DIPSW_get_value();
    10c0:	00007600 	call	760 <DIPSW_get_value>
    10c4:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    10c8:	00006f00 	call	6f0 <current_image_pointer>
    10cc:	102b883a 	mov	r21,r2
		      switch (mode) {
    10d0:	808001cc 	andi	r2,r16,7
    10d4:	1000421e 	bne	r2,zero,11e0 <main+0x2b0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    10d8:	00005a80 	call	5a8 <cam_get_xsize>
    10dc:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    10e0:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10e4:	b17fffcc 	andi	r5,r22,65535
    10e8:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10ec:	84003fcc 	andi	r16,r16,255
    10f0:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10f4:	000f883a 	mov	r7,zero
    10f8:	11bfffcc 	andi	r6,r2,65535
    10fc:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1100:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1104:	0000eb80 	call	eb8 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1108:	80005c16 	blt	r16,zero,127c <main+0x34c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    110c:	000f4980 	call	f498 <alt_timestamp>
    1110:	d0a71215 	stw	r2,-25528(gp)
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1114:	d1671617 	ldw	r5,-25512(gp)
    1118:	d0a71717 	ldw	r2,-25508(gp)
    111c:	01000074 	movhi	r4,1
    1120:	2103cd04 	addi	r4,r4,3892
    1124:	288bc83a 	sub	r5,r5,r2
    1128:	00028b40 	call	28b4 <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    112c:	d0a71917 	ldw	r2,-25500(gp)
    1130:	d1671817 	ldw	r5,-25504(gp)
    1134:	01000074 	movhi	r4,1
    1138:	2103d204 	addi	r4,r4,3912
    113c:	288bc83a 	sub	r5,r5,r2
    1140:	00028b40 	call	28b4 <printf>
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1144:	d0a71417 	ldw	r2,-25520(gp)
    1148:	d4271517 	ldw	r16,-25516(gp)
    114c:	1421c83a 	sub	r16,r2,r16
    1150:	8444b03a 	or	r2,r16,r17
    1154:	90801d36 	bltu	r18,r2,11cc <main+0x29c>
    1158:	8004913a 	slli	r2,r16,4
    115c:	1444b03a 	or	r2,r2,r17
    1160:	1505883a 	add	r2,r2,r20
    1164:	11800003 	ldbu	r6,0(r2)
    1168:	01000074 	movhi	r4,1
    116c:	800b883a 	mov	r5,r16
    1170:	2103d504 	addi	r4,r4,3924
    1174:	00028b40 	call	28b4 <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    1178:	d0a71317 	ldw	r2,-25524(gp)
    117c:	d1271217 	ldw	r4,-25528(gp)
    1180:	2089c83a 	sub	r4,r4,r2
    1184:	0001f440 	call	1f44 <__floatunsidf>
    1188:	01d06234 	movhi	r7,16776
    118c:	39f5e104 	addi	r7,r7,-10364
    1190:	1009883a 	mov	r4,r2
    1194:	180b883a 	mov	r5,r3
    1198:	000d883a 	mov	r6,zero
    119c:	000165c0 	call	165c <__divdf3>
    11a0:	100d883a 	mov	r6,r2
    11a4:	180f883a 	mov	r7,r3
    11a8:	0009883a 	mov	r4,zero
    11ac:	014ffc34 	movhi	r5,16368
    11b0:	000165c0 	call	165c <__divdf3>
    11b4:	01000074 	movhi	r4,1
    11b8:	100b883a 	mov	r5,r2
    11bc:	180d883a 	mov	r6,r3
    11c0:	2103df04 	addi	r4,r4,3964
    11c4:	00028b40 	call	28b4 <printf>
    11c8:	003fb006 	br	108c <__alt_data_end+0xff00108c>
		      end_global = alt_timestamp();
			#ifdef LOAD_SOBEL_COMPLETE
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
			#endif
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    11cc:	880b883a 	mov	r5,r17
    11d0:	8009883a 	mov	r4,r16
    11d4:	00014a80 	call	14a8 <__divsi3>
    11d8:	100d883a 	mov	r6,r2
    11dc:	003fe206 	br	1168 <__alt_data_end+0xff001168>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11e0:	000f4980 	call	f498 <alt_timestamp>
    11e4:	d0a71515 	stw	r2,-25516(gp)

						#if defined(LOAD_SOBEL) && defined(LOAD_GRAYSCALE)
						#if defined(LOAD_SOBEL_COMPLETE)
		    	  	   start_conv_grayscale = alt_timestamp();
    11e8:	000f4980 	call	f498 <alt_timestamp>
		    	  	   conv_grayscale((void *)image);
    11ec:	a809883a 	mov	r4,r21
		      default:
		    	  	   start_all = alt_timestamp();

						#if defined(LOAD_SOBEL) && defined(LOAD_GRAYSCALE)
						#if defined(LOAD_SOBEL_COMPLETE)
		    	  	   start_conv_grayscale = alt_timestamp();
    11f0:	d0a71715 	stw	r2,-25508(gp)
		    	  	   conv_grayscale((void *)image);
    11f4:	00007740 	call	774 <conv_grayscale>
		    	  	   end_conv_grayscale = alt_timestamp();
    11f8:	000f4980 	call	f498 <alt_timestamp>
    11fc:	d0a71615 	stw	r2,-25512(gp)

                       grayscale = get_grayscale_picture();
    1200:	00008440 	call	844 <get_grayscale_picture>
    1204:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    1208:	000f4980 	call	f498 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    120c:	a809883a 	mov	r4,r21
    1210:	01402004 	movi	r5,128
		    	  	   conv_grayscale((void *)image);
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    1214:	d0a71915 	stw	r2,-25500(gp)
                       sobel_complete(grayscale, 128);
    1218:	00013180 	call	1318 <sobel_complete>
                       end_sobel = alt_timestamp();
    121c:	000f4980 	call	f498 <alt_timestamp>
    1220:	d0a71815 	stw	r2,-25504(gp)

						#ifdef LOAD_SOBEL_ALL_FUSION
							sobel_all_complete_fusion((void *)image);
						#endif

                       end_all = alt_timestamp();
    1224:	000f4980 	call	f498 <alt_timestamp>
    1228:	d0a71415 	stw	r2,-25520(gp)

						#ifdef LOAD_GRAYSCALE
                       	   grayscale=GetSobelResult();
    122c:	00012900 	call	1290 <GetSobelResult>
    1230:	102d883a 	mov	r22,r2
						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1234:	00005a80 	call	5a8 <cam_get_xsize>
    1238:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    123c:	00005cc0 	call	5cc <cam_get_ysize>

						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
    1240:	a97fffcc 	andi	r5,r21,65535
    1244:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1248:	84003fcc 	andi	r16,r16,255
    124c:	8400201c 	xori	r16,r16,128

						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
    1250:	01c00044 	movi	r7,1
    1254:	11bfffcc 	andi	r6,r2,65535
    1258:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    125c:	843fe004 	addi	r16,r16,-128

						#ifdef LOAD_SOBEL_ALL
                       	   grayscale=GetSobelAllResult();
						#endif

		               transfer_LCD_with_dma(&grayscale[16520],
    1260:	0000eb80 	call	eb8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1264:	803fa90e 	bge	r16,zero,110c <__alt_data_end+0xff00110c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1268:	01000604 	movi	r4,24
    126c:	00014980 	call	1498 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1270:	b009883a 	mov	r4,r22
    1274:	00014880 	call	1488 <vga_set_pointer>
    1278:	003fa406 	br	110c <__alt_data_end+0xff00110c>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    127c:	01000204 	movi	r4,8
    1280:	00014980 	call	1498 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1284:	a809883a 	mov	r4,r21
    1288:	00014880 	call	1488 <vga_set_pointer>
    128c:	003f9f06 	br	110c <__alt_data_end+0xff00110c>

00001290 <GetSobelResult>:
int sobel_width;
int sobel_height;

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1290:	d0a71b17 	ldw	r2,-25492(gp)
    1294:	f800283a 	ret

00001298 <init_sobel_arrays>:
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    1298:	defffe04 	addi	sp,sp,-8
    129c:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12a0:	2161383a 	mul	r16,r4,r5
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    12a4:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12a8:	01000074 	movhi	r4,1
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    12ac:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12b0:	2103e304 	addi	r4,r4,3980
    12b4:	280d883a 	mov	r6,r5
    12b8:	800f883a 	mov	r7,r16
    12bc:	180b883a 	mov	r5,r3
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
#else
void init_sobel_arrays(int width , int height) {
    12c0:	dfc00115 	stw	ra,4(sp)
	int loop;
	sobel_width = width;
    12c4:	d0e71a15 	stw	r3,-25496(gp)
	sobel_height = height;
    12c8:	d0a71c15 	stw	r2,-25488(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12cc:	00028b40 	call	28b4 <printf>
	if (sobel_result != NULL)
    12d0:	d1271b17 	ldw	r4,-25492(gp)
    12d4:	20000126 	beq	r4,zero,12dc <init_sobel_arrays+0x44>
		free(sobel_result);
    12d8:	00020640 	call	2064 <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    12dc:	8009883a 	mov	r4,r16
    12e0:	000e6000 	call	e600 <alt_uncached_malloc>
    12e4:	d0a71b15 	stw	r2,-25492(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    12e8:	0400070e 	bge	zero,r16,1308 <init_sobel_arrays+0x70>
    12ec:	0007883a 	mov	r3,zero
    12f0:	00000106 	br	12f8 <init_sobel_arrays+0x60>
    12f4:	d0a71b17 	ldw	r2,-25492(gp)
		sobel_result[loop] = 0;
    12f8:	10c5883a 	add	r2,r2,r3
    12fc:	10000005 	stb	zero,0(r2)
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1300:	18c00044 	addi	r3,r3,1
    1304:	80fffb1e 	bne	r16,r3,12f4 <__alt_data_end+0xff0012f4>
		sobel_result[loop] = 0;
	}
}
    1308:	dfc00117 	ldw	ra,4(sp)
    130c:	dc000017 	ldw	r16,0(sp)
    1310:	dec00204 	addi	sp,sp,8
    1314:	f800283a 	ret

00001318 <sobel_complete>:
}

#endif

#ifdef LOAD_SOBEL_COMPLETE
void sobel_complete(unsigned char *source, short threshold){
    1318:	defff704 	addi	sp,sp,-36
    131c:	dc800215 	stw	r18,8(sp)
    1320:	d3671c17 	ldw	r13,-25488(gp)
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
    1324:	d4a71a17 	ldw	r18,-25496(gp)
}

#endif

#ifdef LOAD_SOBEL_COMPLETE
void sobel_complete(unsigned char *source, short threshold){
    1328:	dc000015 	stw	r16,0(sp)
    132c:	2c3fffcc 	andi	r16,r5,65535
    1330:	8420001c 	xori	r16,r16,32768
    1334:	dd000415 	stw	r20,16(sp)
    1338:	dcc00315 	stw	r19,12(sp)
    133c:	dc400115 	stw	r17,4(sp)
    1340:	dfc00815 	stw	ra,32(sp)
    1344:	ddc00715 	stw	r23,28(sp)
    1348:	dd800615 	stw	r22,24(sp)
    134c:	dd400515 	stw	r21,20(sp)
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1350:	04400044 	movi	r17,1
    1354:	6b7fffc4 	addi	r13,r13,-1

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    1358:	04c00084 	movi	r19,2
    135c:	84200004 	addi	r16,r16,-32768
    1360:	953fffc4 	addi	r20,r18,-1
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1364:	8b403d0e 	bge	r17,r13,145c <sobel_complete+0x144>
			y0 = (y-1)*sobel_width+1;
    1368:	d2271a17 	ldw	r8,-25496(gp)
    136c:	8a7fffc4 	addi	r9,r17,-1
		    y1 = y*sobel_width+1;
    1370:	8a0b383a 	mul	r5,r17,r8
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
    1374:	4a13383a 	mul	r9,r9,r8
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;
    1378:	8c400044 	addi	r17,r17,1
    137c:	4151883a 	add	r8,r8,r5

			p2 = source[y0-1];
    1380:	4a800044 	addi	r10,r9,1
			p5 = source[y1-1];
    1384:	29800044 	addi	r6,r5,1
			p8 = source[y2-1];
    1388:	41c00044 	addi	r7,r8,1
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
			p5 = source[y1-1];
    138c:	2199883a 	add	r12,r4,r6
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    1390:	2295883a 	add	r10,r4,r10
			p5 = source[y1-1];
			p8 = source[y2-1];
    1394:	21cf883a 	add	r7,r4,r7
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
			p5 = source[y1-1];
    1398:	657fffc3 	ldbu	r21,-1(r12)
			p8 = source[y2-1];

			p3 = source[y0];
			p6 = source[y1];
    139c:	67c00003 	ldbu	ra,0(r12)
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    13a0:	50ffffc3 	ldbu	r3,-1(r10)
			p5 = source[y1-1];
			p8 = source[y2-1];
    13a4:	38bfffc3 	ldbu	r2,-1(r7)

			p3 = source[y0];
    13a8:	52c00003 	ldbu	r11,0(r10)
			p6 = source[y1];
			p9 = source[y2];
    13ac:	3b000003 	ldbu	r12,0(r7)

			for (x = 1 ; x < width_len ; x++) {
    13b0:	9cbfec0e 	bge	r19,r18,1364 <__alt_data_end+0xff001364>
    13b4:	2a800084 	addi	r10,r5,2
    13b8:	4a400084 	addi	r9,r9,2
    13bc:	42000084 	addi	r8,r8,2
    13c0:	2253883a 	add	r9,r4,r9
    13c4:	2295883a 	add	r10,r4,r10
    13c8:	2211883a 	add	r8,r4,r8
    13cc:	a14b883a 	add	r5,r20,r5
    13d0:	00000106 	br	13d8 <sobel_complete+0xc0>
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
    13d4:	783f883a 	mov	ra,r15
				p2 = p3;
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
    13d8:	4b800003 	ldbu	r14,0(r9)
				p6 = source[yc];
				p9 = source[y2+x];
    13dc:	43400003 	ldbu	r13,0(r8)

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    13e0:	d1e71b17 	ldw	r7,-25492(gp)
				p3 = source[y0+x];
				p6 = source[yc];
				p9 = source[y2+x];

				a = p1 - p9;
				b = p3 - p7;
    13e4:	7085c83a 	sub	r2,r14,r2
				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
				p9 = source[y2+x];

				a = p1 - p9;
    13e8:	1b47c83a 	sub	r3,r3,r13
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    13ec:	5b2dc83a 	sub	r22,r11,r12
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
    13f0:	53c00003 	ldbu	r15,0(r10)
				p9 = source[y2+x];

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    13f4:	18af883a 	add	r23,r3,r2
    13f8:	b5ad883a 	add	r22,r22,r22
    13fc:	398f883a 	add	r7,r7,r6
    1400:	b5ed883a 	add	r22,r22,r23
    1404:	b02dc072 	custom	1,r22,r22,zero
    1408:	7d6bc83a 	sub	r21,r15,r21
    140c:	ad6b883a 	add	r21,r21,r21
    1410:	10c7c83a 	sub	r3,r2,r3
    1414:	a8c5883a 	add	r2,r21,r3
    1418:	1005c072 	custom	1,r2,r2,zero
    141c:	b085883a 	add	r2,r22,r2
    1420:	1405c0b2 	custom	2,r2,r2,r16
    1424:	38800025 	stbio	r2,0(r7)
    1428:	31800044 	addi	r6,r6,1
    142c:	5807883a 	mov	r3,r11
    1430:	6005883a 	mov	r2,r12
    1434:	f82b883a 	mov	r21,ra
    1438:	4a400044 	addi	r9,r9,1
    143c:	52800044 	addi	r10,r10,1
    1440:	42000044 	addi	r8,r8,1
				p2 = p3;
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
    1444:	7017883a 	mov	r11,r14
				p6 = source[yc];
				p9 = source[y2+x];
    1448:	6819883a 	mov	r12,r13

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    144c:	29bfe11e 	bne	r5,r6,13d4 <__alt_data_end+0xff0013d4>
    1450:	d3671c17 	ldw	r13,-25488(gp)
    1454:	6b7fffc4 	addi	r13,r13,-1
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1458:	8b7fc316 	blt	r17,r13,1368 <__alt_data_end+0xff001368>
						ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
						ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
						,threshold));
			}
		}
}
    145c:	dfc00817 	ldw	ra,32(sp)
    1460:	ddc00717 	ldw	r23,28(sp)
    1464:	dd800617 	ldw	r22,24(sp)
    1468:	dd400517 	ldw	r21,20(sp)
    146c:	dd000417 	ldw	r20,16(sp)
    1470:	dcc00317 	ldw	r19,12(sp)
    1474:	dc800217 	ldw	r18,8(sp)
    1478:	dc400117 	ldw	r17,4(sp)
    147c:	dc000017 	ldw	r16,0(sp)
    1480:	dec00904 	addi	sp,sp,36
    1484:	f800283a 	ret

00001488 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1488:	00804034 	movhi	r2,256
    148c:	10843404 	addi	r2,r2,4304
    1490:	11000035 	stwio	r4,0(r2)
    1494:	f800283a 	ret

00001498 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1498:	00804034 	movhi	r2,256
    149c:	10843504 	addi	r2,r2,4308
    14a0:	11000025 	stbio	r4,0(r2)
    14a4:	f800283a 	ret

000014a8 <__divsi3>:
    14a8:	20001b16 	blt	r4,zero,1518 <__divsi3+0x70>
    14ac:	000f883a 	mov	r7,zero
    14b0:	28001616 	blt	r5,zero,150c <__divsi3+0x64>
    14b4:	200d883a 	mov	r6,r4
    14b8:	29001a2e 	bgeu	r5,r4,1524 <__divsi3+0x7c>
    14bc:	00800804 	movi	r2,32
    14c0:	00c00044 	movi	r3,1
    14c4:	00000106 	br	14cc <__divsi3+0x24>
    14c8:	10000d26 	beq	r2,zero,1500 <__divsi3+0x58>
    14cc:	294b883a 	add	r5,r5,r5
    14d0:	10bfffc4 	addi	r2,r2,-1
    14d4:	18c7883a 	add	r3,r3,r3
    14d8:	293ffb36 	bltu	r5,r4,14c8 <__alt_data_end+0xff0014c8>
    14dc:	0005883a 	mov	r2,zero
    14e0:	18000726 	beq	r3,zero,1500 <__divsi3+0x58>
    14e4:	0005883a 	mov	r2,zero
    14e8:	31400236 	bltu	r6,r5,14f4 <__divsi3+0x4c>
    14ec:	314dc83a 	sub	r6,r6,r5
    14f0:	10c4b03a 	or	r2,r2,r3
    14f4:	1806d07a 	srli	r3,r3,1
    14f8:	280ad07a 	srli	r5,r5,1
    14fc:	183ffa1e 	bne	r3,zero,14e8 <__alt_data_end+0xff0014e8>
    1500:	38000126 	beq	r7,zero,1508 <__divsi3+0x60>
    1504:	0085c83a 	sub	r2,zero,r2
    1508:	f800283a 	ret
    150c:	014bc83a 	sub	r5,zero,r5
    1510:	39c0005c 	xori	r7,r7,1
    1514:	003fe706 	br	14b4 <__alt_data_end+0xff0014b4>
    1518:	0109c83a 	sub	r4,zero,r4
    151c:	01c00044 	movi	r7,1
    1520:	003fe306 	br	14b0 <__alt_data_end+0xff0014b0>
    1524:	00c00044 	movi	r3,1
    1528:	003fee06 	br	14e4 <__alt_data_end+0xff0014e4>

0000152c <__modsi3>:
    152c:	20001716 	blt	r4,zero,158c <__modsi3+0x60>
    1530:	000f883a 	mov	r7,zero
    1534:	2005883a 	mov	r2,r4
    1538:	28001216 	blt	r5,zero,1584 <__modsi3+0x58>
    153c:	2900162e 	bgeu	r5,r4,1598 <__modsi3+0x6c>
    1540:	01800804 	movi	r6,32
    1544:	00c00044 	movi	r3,1
    1548:	00000106 	br	1550 <__modsi3+0x24>
    154c:	30000a26 	beq	r6,zero,1578 <__modsi3+0x4c>
    1550:	294b883a 	add	r5,r5,r5
    1554:	31bfffc4 	addi	r6,r6,-1
    1558:	18c7883a 	add	r3,r3,r3
    155c:	293ffb36 	bltu	r5,r4,154c <__alt_data_end+0xff00154c>
    1560:	18000526 	beq	r3,zero,1578 <__modsi3+0x4c>
    1564:	1806d07a 	srli	r3,r3,1
    1568:	11400136 	bltu	r2,r5,1570 <__modsi3+0x44>
    156c:	1145c83a 	sub	r2,r2,r5
    1570:	280ad07a 	srli	r5,r5,1
    1574:	183ffb1e 	bne	r3,zero,1564 <__alt_data_end+0xff001564>
    1578:	38000126 	beq	r7,zero,1580 <__modsi3+0x54>
    157c:	0085c83a 	sub	r2,zero,r2
    1580:	f800283a 	ret
    1584:	014bc83a 	sub	r5,zero,r5
    1588:	003fec06 	br	153c <__alt_data_end+0xff00153c>
    158c:	0109c83a 	sub	r4,zero,r4
    1590:	01c00044 	movi	r7,1
    1594:	003fe706 	br	1534 <__alt_data_end+0xff001534>
    1598:	00c00044 	movi	r3,1
    159c:	003ff106 	br	1564 <__alt_data_end+0xff001564>

000015a0 <__udivsi3>:
    15a0:	200d883a 	mov	r6,r4
    15a4:	2900152e 	bgeu	r5,r4,15fc <__udivsi3+0x5c>
    15a8:	28001416 	blt	r5,zero,15fc <__udivsi3+0x5c>
    15ac:	00800804 	movi	r2,32
    15b0:	00c00044 	movi	r3,1
    15b4:	00000206 	br	15c0 <__udivsi3+0x20>
    15b8:	10000e26 	beq	r2,zero,15f4 <__udivsi3+0x54>
    15bc:	28000516 	blt	r5,zero,15d4 <__udivsi3+0x34>
    15c0:	294b883a 	add	r5,r5,r5
    15c4:	10bfffc4 	addi	r2,r2,-1
    15c8:	18c7883a 	add	r3,r3,r3
    15cc:	293ffa36 	bltu	r5,r4,15b8 <__alt_data_end+0xff0015b8>
    15d0:	18000826 	beq	r3,zero,15f4 <__udivsi3+0x54>
    15d4:	0005883a 	mov	r2,zero
    15d8:	31400236 	bltu	r6,r5,15e4 <__udivsi3+0x44>
    15dc:	314dc83a 	sub	r6,r6,r5
    15e0:	10c4b03a 	or	r2,r2,r3
    15e4:	1806d07a 	srli	r3,r3,1
    15e8:	280ad07a 	srli	r5,r5,1
    15ec:	183ffa1e 	bne	r3,zero,15d8 <__alt_data_end+0xff0015d8>
    15f0:	f800283a 	ret
    15f4:	0005883a 	mov	r2,zero
    15f8:	f800283a 	ret
    15fc:	00c00044 	movi	r3,1
    1600:	003ff406 	br	15d4 <__alt_data_end+0xff0015d4>

00001604 <__umodsi3>:
    1604:	2005883a 	mov	r2,r4
    1608:	2900122e 	bgeu	r5,r4,1654 <__umodsi3+0x50>
    160c:	28001116 	blt	r5,zero,1654 <__umodsi3+0x50>
    1610:	01800804 	movi	r6,32
    1614:	00c00044 	movi	r3,1
    1618:	00000206 	br	1624 <__umodsi3+0x20>
    161c:	30000c26 	beq	r6,zero,1650 <__umodsi3+0x4c>
    1620:	28000516 	blt	r5,zero,1638 <__umodsi3+0x34>
    1624:	294b883a 	add	r5,r5,r5
    1628:	31bfffc4 	addi	r6,r6,-1
    162c:	18c7883a 	add	r3,r3,r3
    1630:	293ffa36 	bltu	r5,r4,161c <__alt_data_end+0xff00161c>
    1634:	18000626 	beq	r3,zero,1650 <__umodsi3+0x4c>
    1638:	1806d07a 	srli	r3,r3,1
    163c:	11400136 	bltu	r2,r5,1644 <__umodsi3+0x40>
    1640:	1145c83a 	sub	r2,r2,r5
    1644:	280ad07a 	srli	r5,r5,1
    1648:	183ffb1e 	bne	r3,zero,1638 <__alt_data_end+0xff001638>
    164c:	f800283a 	ret
    1650:	f800283a 	ret
    1654:	00c00044 	movi	r3,1
    1658:	003ff706 	br	1638 <__alt_data_end+0xff001638>

0000165c <__divdf3>:
    165c:	defff204 	addi	sp,sp,-56
    1660:	dd400915 	stw	r21,36(sp)
    1664:	282ad53a 	srli	r21,r5,20
    1668:	dd000815 	stw	r20,32(sp)
    166c:	2828d7fa 	srli	r20,r5,31
    1670:	dc000415 	stw	r16,16(sp)
    1674:	04000434 	movhi	r16,16
    1678:	df000c15 	stw	fp,48(sp)
    167c:	843fffc4 	addi	r16,r16,-1
    1680:	dfc00d15 	stw	ra,52(sp)
    1684:	ddc00b15 	stw	r23,44(sp)
    1688:	dd800a15 	stw	r22,40(sp)
    168c:	dcc00715 	stw	r19,28(sp)
    1690:	dc800615 	stw	r18,24(sp)
    1694:	dc400515 	stw	r17,20(sp)
    1698:	ad41ffcc 	andi	r21,r21,2047
    169c:	2c20703a 	and	r16,r5,r16
    16a0:	a7003fcc 	andi	fp,r20,255
    16a4:	a8006126 	beq	r21,zero,182c <__divdf3+0x1d0>
    16a8:	0081ffc4 	movi	r2,2047
    16ac:	2025883a 	mov	r18,r4
    16b0:	a8803726 	beq	r21,r2,1790 <__divdf3+0x134>
    16b4:	80800434 	orhi	r2,r16,16
    16b8:	100490fa 	slli	r2,r2,3
    16bc:	2020d77a 	srli	r16,r4,29
    16c0:	202490fa 	slli	r18,r4,3
    16c4:	ad7f0044 	addi	r21,r21,-1023
    16c8:	80a0b03a 	or	r16,r16,r2
    16cc:	0027883a 	mov	r19,zero
    16d0:	0013883a 	mov	r9,zero
    16d4:	3804d53a 	srli	r2,r7,20
    16d8:	382cd7fa 	srli	r22,r7,31
    16dc:	04400434 	movhi	r17,16
    16e0:	8c7fffc4 	addi	r17,r17,-1
    16e4:	1081ffcc 	andi	r2,r2,2047
    16e8:	3011883a 	mov	r8,r6
    16ec:	3c62703a 	and	r17,r7,r17
    16f0:	b5c03fcc 	andi	r23,r22,255
    16f4:	10006c26 	beq	r2,zero,18a8 <__divdf3+0x24c>
    16f8:	00c1ffc4 	movi	r3,2047
    16fc:	10c06426 	beq	r2,r3,1890 <__divdf3+0x234>
    1700:	88c00434 	orhi	r3,r17,16
    1704:	180690fa 	slli	r3,r3,3
    1708:	3022d77a 	srli	r17,r6,29
    170c:	301090fa 	slli	r8,r6,3
    1710:	10bf0044 	addi	r2,r2,-1023
    1714:	88e2b03a 	or	r17,r17,r3
    1718:	000f883a 	mov	r7,zero
    171c:	a58cf03a 	xor	r6,r20,r22
    1720:	3cc8b03a 	or	r4,r7,r19
    1724:	a8abc83a 	sub	r21,r21,r2
    1728:	008003c4 	movi	r2,15
    172c:	3007883a 	mov	r3,r6
    1730:	34c03fcc 	andi	r19,r6,255
    1734:	11009036 	bltu	r2,r4,1978 <__divdf3+0x31c>
    1738:	200890ba 	slli	r4,r4,2
    173c:	00800034 	movhi	r2,0
    1740:	1085d404 	addi	r2,r2,5968
    1744:	2089883a 	add	r4,r4,r2
    1748:	20800017 	ldw	r2,0(r4)
    174c:	1000683a 	jmp	r2
    1750:	00001978 	rdprs	zero,zero,101
    1754:	000017c8 	cmpgei	zero,zero,95
    1758:	00001968 	cmpgeui	zero,zero,101
    175c:	000017bc 	xorhi	zero,zero,94
    1760:	00001968 	cmpgeui	zero,zero,101
    1764:	0000193c 	xorhi	zero,zero,100
    1768:	00001968 	cmpgeui	zero,zero,101
    176c:	000017bc 	xorhi	zero,zero,94
    1770:	000017c8 	cmpgei	zero,zero,95
    1774:	000017c8 	cmpgei	zero,zero,95
    1778:	0000193c 	xorhi	zero,zero,100
    177c:	000017bc 	xorhi	zero,zero,94
    1780:	000017ac 	andhi	zero,zero,94
    1784:	000017ac 	andhi	zero,zero,94
    1788:	000017ac 	andhi	zero,zero,94
    178c:	00001c5c 	xori	zero,zero,113
    1790:	2404b03a 	or	r2,r4,r16
    1794:	1000661e 	bne	r2,zero,1930 <__divdf3+0x2d4>
    1798:	04c00204 	movi	r19,8
    179c:	0021883a 	mov	r16,zero
    17a0:	0025883a 	mov	r18,zero
    17a4:	02400084 	movi	r9,2
    17a8:	003fca06 	br	16d4 <__alt_data_end+0xff0016d4>
    17ac:	8023883a 	mov	r17,r16
    17b0:	9011883a 	mov	r8,r18
    17b4:	e02f883a 	mov	r23,fp
    17b8:	480f883a 	mov	r7,r9
    17bc:	00800084 	movi	r2,2
    17c0:	3881311e 	bne	r7,r2,1c88 <__divdf3+0x62c>
    17c4:	b827883a 	mov	r19,r23
    17c8:	98c0004c 	andi	r3,r19,1
    17cc:	0081ffc4 	movi	r2,2047
    17d0:	000b883a 	mov	r5,zero
    17d4:	0025883a 	mov	r18,zero
    17d8:	1004953a 	slli	r2,r2,20
    17dc:	18c03fcc 	andi	r3,r3,255
    17e0:	04400434 	movhi	r17,16
    17e4:	8c7fffc4 	addi	r17,r17,-1
    17e8:	180697fa 	slli	r3,r3,31
    17ec:	2c4a703a 	and	r5,r5,r17
    17f0:	288ab03a 	or	r5,r5,r2
    17f4:	28c6b03a 	or	r3,r5,r3
    17f8:	9005883a 	mov	r2,r18
    17fc:	dfc00d17 	ldw	ra,52(sp)
    1800:	df000c17 	ldw	fp,48(sp)
    1804:	ddc00b17 	ldw	r23,44(sp)
    1808:	dd800a17 	ldw	r22,40(sp)
    180c:	dd400917 	ldw	r21,36(sp)
    1810:	dd000817 	ldw	r20,32(sp)
    1814:	dcc00717 	ldw	r19,28(sp)
    1818:	dc800617 	ldw	r18,24(sp)
    181c:	dc400517 	ldw	r17,20(sp)
    1820:	dc000417 	ldw	r16,16(sp)
    1824:	dec00e04 	addi	sp,sp,56
    1828:	f800283a 	ret
    182c:	2404b03a 	or	r2,r4,r16
    1830:	2027883a 	mov	r19,r4
    1834:	10003926 	beq	r2,zero,191c <__divdf3+0x2c0>
    1838:	80012e26 	beq	r16,zero,1cf4 <__divdf3+0x698>
    183c:	8009883a 	mov	r4,r16
    1840:	d9800315 	stw	r6,12(sp)
    1844:	d9c00215 	stw	r7,8(sp)
    1848:	0001fec0 	call	1fec <__clzsi2>
    184c:	d9800317 	ldw	r6,12(sp)
    1850:	d9c00217 	ldw	r7,8(sp)
    1854:	113ffd44 	addi	r4,r2,-11
    1858:	00c00704 	movi	r3,28
    185c:	19012116 	blt	r3,r4,1ce4 <__divdf3+0x688>
    1860:	00c00744 	movi	r3,29
    1864:	147ffe04 	addi	r17,r2,-8
    1868:	1907c83a 	sub	r3,r3,r4
    186c:	8460983a 	sll	r16,r16,r17
    1870:	98c6d83a 	srl	r3,r19,r3
    1874:	9c64983a 	sll	r18,r19,r17
    1878:	1c20b03a 	or	r16,r3,r16
    187c:	1080fcc4 	addi	r2,r2,1011
    1880:	00abc83a 	sub	r21,zero,r2
    1884:	0027883a 	mov	r19,zero
    1888:	0013883a 	mov	r9,zero
    188c:	003f9106 	br	16d4 <__alt_data_end+0xff0016d4>
    1890:	3446b03a 	or	r3,r6,r17
    1894:	18001f1e 	bne	r3,zero,1914 <__divdf3+0x2b8>
    1898:	0023883a 	mov	r17,zero
    189c:	0011883a 	mov	r8,zero
    18a0:	01c00084 	movi	r7,2
    18a4:	003f9d06 	br	171c <__alt_data_end+0xff00171c>
    18a8:	3446b03a 	or	r3,r6,r17
    18ac:	18001526 	beq	r3,zero,1904 <__divdf3+0x2a8>
    18b0:	88011b26 	beq	r17,zero,1d20 <__divdf3+0x6c4>
    18b4:	8809883a 	mov	r4,r17
    18b8:	d9800315 	stw	r6,12(sp)
    18bc:	da400115 	stw	r9,4(sp)
    18c0:	0001fec0 	call	1fec <__clzsi2>
    18c4:	d9800317 	ldw	r6,12(sp)
    18c8:	da400117 	ldw	r9,4(sp)
    18cc:	113ffd44 	addi	r4,r2,-11
    18d0:	00c00704 	movi	r3,28
    18d4:	19010e16 	blt	r3,r4,1d10 <__divdf3+0x6b4>
    18d8:	00c00744 	movi	r3,29
    18dc:	123ffe04 	addi	r8,r2,-8
    18e0:	1907c83a 	sub	r3,r3,r4
    18e4:	8a22983a 	sll	r17,r17,r8
    18e8:	30c6d83a 	srl	r3,r6,r3
    18ec:	3210983a 	sll	r8,r6,r8
    18f0:	1c62b03a 	or	r17,r3,r17
    18f4:	1080fcc4 	addi	r2,r2,1011
    18f8:	0085c83a 	sub	r2,zero,r2
    18fc:	000f883a 	mov	r7,zero
    1900:	003f8606 	br	171c <__alt_data_end+0xff00171c>
    1904:	0023883a 	mov	r17,zero
    1908:	0011883a 	mov	r8,zero
    190c:	01c00044 	movi	r7,1
    1910:	003f8206 	br	171c <__alt_data_end+0xff00171c>
    1914:	01c000c4 	movi	r7,3
    1918:	003f8006 	br	171c <__alt_data_end+0xff00171c>
    191c:	04c00104 	movi	r19,4
    1920:	0021883a 	mov	r16,zero
    1924:	0025883a 	mov	r18,zero
    1928:	02400044 	movi	r9,1
    192c:	003f6906 	br	16d4 <__alt_data_end+0xff0016d4>
    1930:	04c00304 	movi	r19,12
    1934:	024000c4 	movi	r9,3
    1938:	003f6606 	br	16d4 <__alt_data_end+0xff0016d4>
    193c:	01400434 	movhi	r5,16
    1940:	0007883a 	mov	r3,zero
    1944:	297fffc4 	addi	r5,r5,-1
    1948:	04bfffc4 	movi	r18,-1
    194c:	0081ffc4 	movi	r2,2047
    1950:	003fa106 	br	17d8 <__alt_data_end+0xff0017d8>
    1954:	00c00044 	movi	r3,1
    1958:	1887c83a 	sub	r3,r3,r2
    195c:	01000e04 	movi	r4,56
    1960:	20c1210e 	bge	r4,r3,1de8 <__divdf3+0x78c>
    1964:	98c0004c 	andi	r3,r19,1
    1968:	0005883a 	mov	r2,zero
    196c:	000b883a 	mov	r5,zero
    1970:	0025883a 	mov	r18,zero
    1974:	003f9806 	br	17d8 <__alt_data_end+0xff0017d8>
    1978:	8c00fd36 	bltu	r17,r16,1d70 <__divdf3+0x714>
    197c:	8440fb26 	beq	r16,r17,1d6c <__divdf3+0x710>
    1980:	8007883a 	mov	r3,r16
    1984:	ad7fffc4 	addi	r21,r21,-1
    1988:	0021883a 	mov	r16,zero
    198c:	4004d63a 	srli	r2,r8,24
    1990:	8822923a 	slli	r17,r17,8
    1994:	1809883a 	mov	r4,r3
    1998:	402c923a 	slli	r22,r8,8
    199c:	88b8b03a 	or	fp,r17,r2
    19a0:	e028d43a 	srli	r20,fp,16
    19a4:	d8c00015 	stw	r3,0(sp)
    19a8:	e5ffffcc 	andi	r23,fp,65535
    19ac:	a00b883a 	mov	r5,r20
    19b0:	00015a00 	call	15a0 <__udivsi3>
    19b4:	d8c00017 	ldw	r3,0(sp)
    19b8:	a00b883a 	mov	r5,r20
    19bc:	d8800315 	stw	r2,12(sp)
    19c0:	1809883a 	mov	r4,r3
    19c4:	00016040 	call	1604 <__umodsi3>
    19c8:	d9800317 	ldw	r6,12(sp)
    19cc:	1006943a 	slli	r3,r2,16
    19d0:	9004d43a 	srli	r2,r18,16
    19d4:	b9a3383a 	mul	r17,r23,r6
    19d8:	10c4b03a 	or	r2,r2,r3
    19dc:	1440062e 	bgeu	r2,r17,19f8 <__divdf3+0x39c>
    19e0:	1705883a 	add	r2,r2,fp
    19e4:	30ffffc4 	addi	r3,r6,-1
    19e8:	1700ee36 	bltu	r2,fp,1da4 <__divdf3+0x748>
    19ec:	1440ed2e 	bgeu	r2,r17,1da4 <__divdf3+0x748>
    19f0:	31bfff84 	addi	r6,r6,-2
    19f4:	1705883a 	add	r2,r2,fp
    19f8:	1463c83a 	sub	r17,r2,r17
    19fc:	a00b883a 	mov	r5,r20
    1a00:	8809883a 	mov	r4,r17
    1a04:	d9800315 	stw	r6,12(sp)
    1a08:	00015a00 	call	15a0 <__udivsi3>
    1a0c:	a00b883a 	mov	r5,r20
    1a10:	8809883a 	mov	r4,r17
    1a14:	d8800215 	stw	r2,8(sp)
    1a18:	00016040 	call	1604 <__umodsi3>
    1a1c:	d9c00217 	ldw	r7,8(sp)
    1a20:	1004943a 	slli	r2,r2,16
    1a24:	94bfffcc 	andi	r18,r18,65535
    1a28:	b9d1383a 	mul	r8,r23,r7
    1a2c:	90a4b03a 	or	r18,r18,r2
    1a30:	d9800317 	ldw	r6,12(sp)
    1a34:	9200062e 	bgeu	r18,r8,1a50 <__divdf3+0x3f4>
    1a38:	9725883a 	add	r18,r18,fp
    1a3c:	38bfffc4 	addi	r2,r7,-1
    1a40:	9700d636 	bltu	r18,fp,1d9c <__divdf3+0x740>
    1a44:	9200d52e 	bgeu	r18,r8,1d9c <__divdf3+0x740>
    1a48:	39ffff84 	addi	r7,r7,-2
    1a4c:	9725883a 	add	r18,r18,fp
    1a50:	3004943a 	slli	r2,r6,16
    1a54:	b012d43a 	srli	r9,r22,16
    1a58:	b1bfffcc 	andi	r6,r22,65535
    1a5c:	11e2b03a 	or	r17,r2,r7
    1a60:	8806d43a 	srli	r3,r17,16
    1a64:	893fffcc 	andi	r4,r17,65535
    1a68:	218b383a 	mul	r5,r4,r6
    1a6c:	30c5383a 	mul	r2,r6,r3
    1a70:	2249383a 	mul	r4,r4,r9
    1a74:	280ed43a 	srli	r7,r5,16
    1a78:	9225c83a 	sub	r18,r18,r8
    1a7c:	2089883a 	add	r4,r4,r2
    1a80:	3909883a 	add	r4,r7,r4
    1a84:	1a47383a 	mul	r3,r3,r9
    1a88:	2080022e 	bgeu	r4,r2,1a94 <__divdf3+0x438>
    1a8c:	00800074 	movhi	r2,1
    1a90:	1887883a 	add	r3,r3,r2
    1a94:	2004d43a 	srli	r2,r4,16
    1a98:	2008943a 	slli	r4,r4,16
    1a9c:	297fffcc 	andi	r5,r5,65535
    1aa0:	10c7883a 	add	r3,r2,r3
    1aa4:	2149883a 	add	r4,r4,r5
    1aa8:	90c0a536 	bltu	r18,r3,1d40 <__divdf3+0x6e4>
    1aac:	90c0bf26 	beq	r18,r3,1dac <__divdf3+0x750>
    1ab0:	90c7c83a 	sub	r3,r18,r3
    1ab4:	810fc83a 	sub	r7,r16,r4
    1ab8:	81e5803a 	cmpltu	r18,r16,r7
    1abc:	1ca5c83a 	sub	r18,r3,r18
    1ac0:	e480c126 	beq	fp,r18,1dc8 <__divdf3+0x76c>
    1ac4:	a00b883a 	mov	r5,r20
    1ac8:	9009883a 	mov	r4,r18
    1acc:	d9800315 	stw	r6,12(sp)
    1ad0:	d9c00215 	stw	r7,8(sp)
    1ad4:	da400115 	stw	r9,4(sp)
    1ad8:	00015a00 	call	15a0 <__udivsi3>
    1adc:	a00b883a 	mov	r5,r20
    1ae0:	9009883a 	mov	r4,r18
    1ae4:	d8800015 	stw	r2,0(sp)
    1ae8:	00016040 	call	1604 <__umodsi3>
    1aec:	d9c00217 	ldw	r7,8(sp)
    1af0:	da000017 	ldw	r8,0(sp)
    1af4:	1006943a 	slli	r3,r2,16
    1af8:	3804d43a 	srli	r2,r7,16
    1afc:	ba21383a 	mul	r16,r23,r8
    1b00:	d9800317 	ldw	r6,12(sp)
    1b04:	10c4b03a 	or	r2,r2,r3
    1b08:	da400117 	ldw	r9,4(sp)
    1b0c:	1400062e 	bgeu	r2,r16,1b28 <__divdf3+0x4cc>
    1b10:	1705883a 	add	r2,r2,fp
    1b14:	40ffffc4 	addi	r3,r8,-1
    1b18:	1700ad36 	bltu	r2,fp,1dd0 <__divdf3+0x774>
    1b1c:	1400ac2e 	bgeu	r2,r16,1dd0 <__divdf3+0x774>
    1b20:	423fff84 	addi	r8,r8,-2
    1b24:	1705883a 	add	r2,r2,fp
    1b28:	1421c83a 	sub	r16,r2,r16
    1b2c:	a00b883a 	mov	r5,r20
    1b30:	8009883a 	mov	r4,r16
    1b34:	d9800315 	stw	r6,12(sp)
    1b38:	d9c00215 	stw	r7,8(sp)
    1b3c:	da000015 	stw	r8,0(sp)
    1b40:	da400115 	stw	r9,4(sp)
    1b44:	00015a00 	call	15a0 <__udivsi3>
    1b48:	8009883a 	mov	r4,r16
    1b4c:	a00b883a 	mov	r5,r20
    1b50:	1025883a 	mov	r18,r2
    1b54:	00016040 	call	1604 <__umodsi3>
    1b58:	d9c00217 	ldw	r7,8(sp)
    1b5c:	1004943a 	slli	r2,r2,16
    1b60:	bcaf383a 	mul	r23,r23,r18
    1b64:	393fffcc 	andi	r4,r7,65535
    1b68:	2088b03a 	or	r4,r4,r2
    1b6c:	d9800317 	ldw	r6,12(sp)
    1b70:	da000017 	ldw	r8,0(sp)
    1b74:	da400117 	ldw	r9,4(sp)
    1b78:	25c0062e 	bgeu	r4,r23,1b94 <__divdf3+0x538>
    1b7c:	2709883a 	add	r4,r4,fp
    1b80:	90bfffc4 	addi	r2,r18,-1
    1b84:	27009436 	bltu	r4,fp,1dd8 <__divdf3+0x77c>
    1b88:	25c0932e 	bgeu	r4,r23,1dd8 <__divdf3+0x77c>
    1b8c:	94bfff84 	addi	r18,r18,-2
    1b90:	2709883a 	add	r4,r4,fp
    1b94:	4004943a 	slli	r2,r8,16
    1b98:	25efc83a 	sub	r23,r4,r23
    1b9c:	1490b03a 	or	r8,r2,r18
    1ba0:	4008d43a 	srli	r4,r8,16
    1ba4:	40ffffcc 	andi	r3,r8,65535
    1ba8:	30c5383a 	mul	r2,r6,r3
    1bac:	1a47383a 	mul	r3,r3,r9
    1bb0:	310d383a 	mul	r6,r6,r4
    1bb4:	100ad43a 	srli	r5,r2,16
    1bb8:	4913383a 	mul	r9,r9,r4
    1bbc:	1987883a 	add	r3,r3,r6
    1bc0:	28c7883a 	add	r3,r5,r3
    1bc4:	1980022e 	bgeu	r3,r6,1bd0 <__divdf3+0x574>
    1bc8:	01000074 	movhi	r4,1
    1bcc:	4913883a 	add	r9,r9,r4
    1bd0:	1808d43a 	srli	r4,r3,16
    1bd4:	1806943a 	slli	r3,r3,16
    1bd8:	10bfffcc 	andi	r2,r2,65535
    1bdc:	2253883a 	add	r9,r4,r9
    1be0:	1887883a 	add	r3,r3,r2
    1be4:	ba403836 	bltu	r23,r9,1cc8 <__divdf3+0x66c>
    1be8:	ba403626 	beq	r23,r9,1cc4 <__divdf3+0x668>
    1bec:	42000054 	ori	r8,r8,1
    1bf0:	a880ffc4 	addi	r2,r21,1023
    1bf4:	00bf570e 	bge	zero,r2,1954 <__alt_data_end+0xff001954>
    1bf8:	40c001cc 	andi	r3,r8,7
    1bfc:	18000726 	beq	r3,zero,1c1c <__divdf3+0x5c0>
    1c00:	40c003cc 	andi	r3,r8,15
    1c04:	01000104 	movi	r4,4
    1c08:	19000426 	beq	r3,r4,1c1c <__divdf3+0x5c0>
    1c0c:	4107883a 	add	r3,r8,r4
    1c10:	1a11803a 	cmpltu	r8,r3,r8
    1c14:	8a23883a 	add	r17,r17,r8
    1c18:	1811883a 	mov	r8,r3
    1c1c:	88c0402c 	andhi	r3,r17,256
    1c20:	18000426 	beq	r3,zero,1c34 <__divdf3+0x5d8>
    1c24:	00ffc034 	movhi	r3,65280
    1c28:	18ffffc4 	addi	r3,r3,-1
    1c2c:	a8810004 	addi	r2,r21,1024
    1c30:	88e2703a 	and	r17,r17,r3
    1c34:	00c1ff84 	movi	r3,2046
    1c38:	18bee316 	blt	r3,r2,17c8 <__alt_data_end+0xff0017c8>
    1c3c:	8824977a 	slli	r18,r17,29
    1c40:	4010d0fa 	srli	r8,r8,3
    1c44:	8822927a 	slli	r17,r17,9
    1c48:	1081ffcc 	andi	r2,r2,2047
    1c4c:	9224b03a 	or	r18,r18,r8
    1c50:	880ad33a 	srli	r5,r17,12
    1c54:	98c0004c 	andi	r3,r19,1
    1c58:	003edf06 	br	17d8 <__alt_data_end+0xff0017d8>
    1c5c:	8080022c 	andhi	r2,r16,8
    1c60:	10001226 	beq	r2,zero,1cac <__divdf3+0x650>
    1c64:	8880022c 	andhi	r2,r17,8
    1c68:	1000101e 	bne	r2,zero,1cac <__divdf3+0x650>
    1c6c:	00800434 	movhi	r2,16
    1c70:	89400234 	orhi	r5,r17,8
    1c74:	10bfffc4 	addi	r2,r2,-1
    1c78:	b007883a 	mov	r3,r22
    1c7c:	288a703a 	and	r5,r5,r2
    1c80:	4025883a 	mov	r18,r8
    1c84:	003f3106 	br	194c <__alt_data_end+0xff00194c>
    1c88:	008000c4 	movi	r2,3
    1c8c:	3880a626 	beq	r7,r2,1f28 <__divdf3+0x8cc>
    1c90:	00800044 	movi	r2,1
    1c94:	3880521e 	bne	r7,r2,1de0 <__divdf3+0x784>
    1c98:	b807883a 	mov	r3,r23
    1c9c:	0005883a 	mov	r2,zero
    1ca0:	000b883a 	mov	r5,zero
    1ca4:	0025883a 	mov	r18,zero
    1ca8:	003ecb06 	br	17d8 <__alt_data_end+0xff0017d8>
    1cac:	00800434 	movhi	r2,16
    1cb0:	81400234 	orhi	r5,r16,8
    1cb4:	10bfffc4 	addi	r2,r2,-1
    1cb8:	a007883a 	mov	r3,r20
    1cbc:	288a703a 	and	r5,r5,r2
    1cc0:	003f2206 	br	194c <__alt_data_end+0xff00194c>
    1cc4:	183fca26 	beq	r3,zero,1bf0 <__alt_data_end+0xff001bf0>
    1cc8:	e5ef883a 	add	r23,fp,r23
    1ccc:	40bfffc4 	addi	r2,r8,-1
    1cd0:	bf00392e 	bgeu	r23,fp,1db8 <__divdf3+0x75c>
    1cd4:	1011883a 	mov	r8,r2
    1cd8:	ba7fc41e 	bne	r23,r9,1bec <__alt_data_end+0xff001bec>
    1cdc:	b0ffc31e 	bne	r22,r3,1bec <__alt_data_end+0xff001bec>
    1ce0:	003fc306 	br	1bf0 <__alt_data_end+0xff001bf0>
    1ce4:	143ff604 	addi	r16,r2,-40
    1ce8:	9c20983a 	sll	r16,r19,r16
    1cec:	0025883a 	mov	r18,zero
    1cf0:	003ee206 	br	187c <__alt_data_end+0xff00187c>
    1cf4:	d9800315 	stw	r6,12(sp)
    1cf8:	d9c00215 	stw	r7,8(sp)
    1cfc:	0001fec0 	call	1fec <__clzsi2>
    1d00:	10800804 	addi	r2,r2,32
    1d04:	d9c00217 	ldw	r7,8(sp)
    1d08:	d9800317 	ldw	r6,12(sp)
    1d0c:	003ed106 	br	1854 <__alt_data_end+0xff001854>
    1d10:	147ff604 	addi	r17,r2,-40
    1d14:	3462983a 	sll	r17,r6,r17
    1d18:	0011883a 	mov	r8,zero
    1d1c:	003ef506 	br	18f4 <__alt_data_end+0xff0018f4>
    1d20:	3009883a 	mov	r4,r6
    1d24:	d9800315 	stw	r6,12(sp)
    1d28:	da400115 	stw	r9,4(sp)
    1d2c:	0001fec0 	call	1fec <__clzsi2>
    1d30:	10800804 	addi	r2,r2,32
    1d34:	da400117 	ldw	r9,4(sp)
    1d38:	d9800317 	ldw	r6,12(sp)
    1d3c:	003ee306 	br	18cc <__alt_data_end+0xff0018cc>
    1d40:	85a1883a 	add	r16,r16,r22
    1d44:	8585803a 	cmpltu	r2,r16,r22
    1d48:	1705883a 	add	r2,r2,fp
    1d4c:	14a5883a 	add	r18,r2,r18
    1d50:	88bfffc4 	addi	r2,r17,-1
    1d54:	e4800c2e 	bgeu	fp,r18,1d88 <__divdf3+0x72c>
    1d58:	90c03e36 	bltu	r18,r3,1e54 <__divdf3+0x7f8>
    1d5c:	1c806926 	beq	r3,r18,1f04 <__divdf3+0x8a8>
    1d60:	90c7c83a 	sub	r3,r18,r3
    1d64:	1023883a 	mov	r17,r2
    1d68:	003f5206 	br	1ab4 <__alt_data_end+0xff001ab4>
    1d6c:	923f0436 	bltu	r18,r8,1980 <__alt_data_end+0xff001980>
    1d70:	800897fa 	slli	r4,r16,31
    1d74:	9004d07a 	srli	r2,r18,1
    1d78:	8006d07a 	srli	r3,r16,1
    1d7c:	902097fa 	slli	r16,r18,31
    1d80:	20a4b03a 	or	r18,r4,r2
    1d84:	003f0106 	br	198c <__alt_data_end+0xff00198c>
    1d88:	e4bff51e 	bne	fp,r18,1d60 <__alt_data_end+0xff001d60>
    1d8c:	85bff22e 	bgeu	r16,r22,1d58 <__alt_data_end+0xff001d58>
    1d90:	e0c7c83a 	sub	r3,fp,r3
    1d94:	1023883a 	mov	r17,r2
    1d98:	003f4606 	br	1ab4 <__alt_data_end+0xff001ab4>
    1d9c:	100f883a 	mov	r7,r2
    1da0:	003f2b06 	br	1a50 <__alt_data_end+0xff001a50>
    1da4:	180d883a 	mov	r6,r3
    1da8:	003f1306 	br	19f8 <__alt_data_end+0xff0019f8>
    1dac:	813fe436 	bltu	r16,r4,1d40 <__alt_data_end+0xff001d40>
    1db0:	0007883a 	mov	r3,zero
    1db4:	003f3f06 	br	1ab4 <__alt_data_end+0xff001ab4>
    1db8:	ba402c36 	bltu	r23,r9,1e6c <__divdf3+0x810>
    1dbc:	4dc05426 	beq	r9,r23,1f10 <__divdf3+0x8b4>
    1dc0:	1011883a 	mov	r8,r2
    1dc4:	003f8906 	br	1bec <__alt_data_end+0xff001bec>
    1dc8:	023fffc4 	movi	r8,-1
    1dcc:	003f8806 	br	1bf0 <__alt_data_end+0xff001bf0>
    1dd0:	1811883a 	mov	r8,r3
    1dd4:	003f5406 	br	1b28 <__alt_data_end+0xff001b28>
    1dd8:	1025883a 	mov	r18,r2
    1ddc:	003f6d06 	br	1b94 <__alt_data_end+0xff001b94>
    1de0:	b827883a 	mov	r19,r23
    1de4:	003f8206 	br	1bf0 <__alt_data_end+0xff001bf0>
    1de8:	010007c4 	movi	r4,31
    1dec:	20c02616 	blt	r4,r3,1e88 <__divdf3+0x82c>
    1df0:	00800804 	movi	r2,32
    1df4:	10c5c83a 	sub	r2,r2,r3
    1df8:	888a983a 	sll	r5,r17,r2
    1dfc:	40c8d83a 	srl	r4,r8,r3
    1e00:	4084983a 	sll	r2,r8,r2
    1e04:	88e2d83a 	srl	r17,r17,r3
    1e08:	2906b03a 	or	r3,r5,r4
    1e0c:	1004c03a 	cmpne	r2,r2,zero
    1e10:	1886b03a 	or	r3,r3,r2
    1e14:	188001cc 	andi	r2,r3,7
    1e18:	10000726 	beq	r2,zero,1e38 <__divdf3+0x7dc>
    1e1c:	188003cc 	andi	r2,r3,15
    1e20:	01000104 	movi	r4,4
    1e24:	11000426 	beq	r2,r4,1e38 <__divdf3+0x7dc>
    1e28:	1805883a 	mov	r2,r3
    1e2c:	10c00104 	addi	r3,r2,4
    1e30:	1885803a 	cmpltu	r2,r3,r2
    1e34:	88a3883a 	add	r17,r17,r2
    1e38:	8880202c 	andhi	r2,r17,128
    1e3c:	10002726 	beq	r2,zero,1edc <__divdf3+0x880>
    1e40:	98c0004c 	andi	r3,r19,1
    1e44:	00800044 	movi	r2,1
    1e48:	000b883a 	mov	r5,zero
    1e4c:	0025883a 	mov	r18,zero
    1e50:	003e6106 	br	17d8 <__alt_data_end+0xff0017d8>
    1e54:	85a1883a 	add	r16,r16,r22
    1e58:	8585803a 	cmpltu	r2,r16,r22
    1e5c:	1705883a 	add	r2,r2,fp
    1e60:	14a5883a 	add	r18,r2,r18
    1e64:	8c7fff84 	addi	r17,r17,-2
    1e68:	003f1106 	br	1ab0 <__alt_data_end+0xff001ab0>
    1e6c:	b589883a 	add	r4,r22,r22
    1e70:	25ad803a 	cmpltu	r22,r4,r22
    1e74:	b739883a 	add	fp,r22,fp
    1e78:	40bfff84 	addi	r2,r8,-2
    1e7c:	bf2f883a 	add	r23,r23,fp
    1e80:	202d883a 	mov	r22,r4
    1e84:	003f9306 	br	1cd4 <__alt_data_end+0xff001cd4>
    1e88:	013ff844 	movi	r4,-31
    1e8c:	2085c83a 	sub	r2,r4,r2
    1e90:	8888d83a 	srl	r4,r17,r2
    1e94:	00800804 	movi	r2,32
    1e98:	18802126 	beq	r3,r2,1f20 <__divdf3+0x8c4>
    1e9c:	00801004 	movi	r2,64
    1ea0:	10c5c83a 	sub	r2,r2,r3
    1ea4:	8884983a 	sll	r2,r17,r2
    1ea8:	1204b03a 	or	r2,r2,r8
    1eac:	1004c03a 	cmpne	r2,r2,zero
    1eb0:	2084b03a 	or	r2,r4,r2
    1eb4:	144001cc 	andi	r17,r2,7
    1eb8:	88000d1e 	bne	r17,zero,1ef0 <__divdf3+0x894>
    1ebc:	000b883a 	mov	r5,zero
    1ec0:	1024d0fa 	srli	r18,r2,3
    1ec4:	98c0004c 	andi	r3,r19,1
    1ec8:	0005883a 	mov	r2,zero
    1ecc:	9464b03a 	or	r18,r18,r17
    1ed0:	003e4106 	br	17d8 <__alt_data_end+0xff0017d8>
    1ed4:	1007883a 	mov	r3,r2
    1ed8:	0023883a 	mov	r17,zero
    1edc:	880a927a 	slli	r5,r17,9
    1ee0:	1805883a 	mov	r2,r3
    1ee4:	8822977a 	slli	r17,r17,29
    1ee8:	280ad33a 	srli	r5,r5,12
    1eec:	003ff406 	br	1ec0 <__alt_data_end+0xff001ec0>
    1ef0:	10c003cc 	andi	r3,r2,15
    1ef4:	01000104 	movi	r4,4
    1ef8:	193ff626 	beq	r3,r4,1ed4 <__alt_data_end+0xff001ed4>
    1efc:	0023883a 	mov	r17,zero
    1f00:	003fca06 	br	1e2c <__alt_data_end+0xff001e2c>
    1f04:	813fd336 	bltu	r16,r4,1e54 <__alt_data_end+0xff001e54>
    1f08:	1023883a 	mov	r17,r2
    1f0c:	003fa806 	br	1db0 <__alt_data_end+0xff001db0>
    1f10:	b0ffd636 	bltu	r22,r3,1e6c <__alt_data_end+0xff001e6c>
    1f14:	1011883a 	mov	r8,r2
    1f18:	b0ff341e 	bne	r22,r3,1bec <__alt_data_end+0xff001bec>
    1f1c:	003f3406 	br	1bf0 <__alt_data_end+0xff001bf0>
    1f20:	0005883a 	mov	r2,zero
    1f24:	003fe006 	br	1ea8 <__alt_data_end+0xff001ea8>
    1f28:	00800434 	movhi	r2,16
    1f2c:	89400234 	orhi	r5,r17,8
    1f30:	10bfffc4 	addi	r2,r2,-1
    1f34:	b807883a 	mov	r3,r23
    1f38:	288a703a 	and	r5,r5,r2
    1f3c:	4025883a 	mov	r18,r8
    1f40:	003e8206 	br	194c <__alt_data_end+0xff00194c>

00001f44 <__floatunsidf>:
    1f44:	defffe04 	addi	sp,sp,-8
    1f48:	dc000015 	stw	r16,0(sp)
    1f4c:	dfc00115 	stw	ra,4(sp)
    1f50:	2021883a 	mov	r16,r4
    1f54:	20002226 	beq	r4,zero,1fe0 <__floatunsidf+0x9c>
    1f58:	0001fec0 	call	1fec <__clzsi2>
    1f5c:	01010784 	movi	r4,1054
    1f60:	2089c83a 	sub	r4,r4,r2
    1f64:	01810cc4 	movi	r6,1075
    1f68:	310dc83a 	sub	r6,r6,r4
    1f6c:	00c007c4 	movi	r3,31
    1f70:	1980120e 	bge	r3,r6,1fbc <__floatunsidf+0x78>
    1f74:	00c104c4 	movi	r3,1043
    1f78:	1907c83a 	sub	r3,r3,r4
    1f7c:	80ca983a 	sll	r5,r16,r3
    1f80:	00800434 	movhi	r2,16
    1f84:	10bfffc4 	addi	r2,r2,-1
    1f88:	2101ffcc 	andi	r4,r4,2047
    1f8c:	0021883a 	mov	r16,zero
    1f90:	288a703a 	and	r5,r5,r2
    1f94:	2008953a 	slli	r4,r4,20
    1f98:	00c00434 	movhi	r3,16
    1f9c:	18ffffc4 	addi	r3,r3,-1
    1fa0:	28c6703a 	and	r3,r5,r3
    1fa4:	8005883a 	mov	r2,r16
    1fa8:	1906b03a 	or	r3,r3,r4
    1fac:	dfc00117 	ldw	ra,4(sp)
    1fb0:	dc000017 	ldw	r16,0(sp)
    1fb4:	dec00204 	addi	sp,sp,8
    1fb8:	f800283a 	ret
    1fbc:	00c002c4 	movi	r3,11
    1fc0:	188bc83a 	sub	r5,r3,r2
    1fc4:	814ad83a 	srl	r5,r16,r5
    1fc8:	00c00434 	movhi	r3,16
    1fcc:	18ffffc4 	addi	r3,r3,-1
    1fd0:	81a0983a 	sll	r16,r16,r6
    1fd4:	2101ffcc 	andi	r4,r4,2047
    1fd8:	28ca703a 	and	r5,r5,r3
    1fdc:	003fed06 	br	1f94 <__alt_data_end+0xff001f94>
    1fe0:	0009883a 	mov	r4,zero
    1fe4:	000b883a 	mov	r5,zero
    1fe8:	003fea06 	br	1f94 <__alt_data_end+0xff001f94>

00001fec <__clzsi2>:
    1fec:	00bfffd4 	movui	r2,65535
    1ff0:	11000536 	bltu	r2,r4,2008 <__clzsi2+0x1c>
    1ff4:	00803fc4 	movi	r2,255
    1ff8:	11000f36 	bltu	r2,r4,2038 <__clzsi2+0x4c>
    1ffc:	00800804 	movi	r2,32
    2000:	0007883a 	mov	r3,zero
    2004:	00000506 	br	201c <__clzsi2+0x30>
    2008:	00804034 	movhi	r2,256
    200c:	10bfffc4 	addi	r2,r2,-1
    2010:	11000c2e 	bgeu	r2,r4,2044 <__clzsi2+0x58>
    2014:	00800204 	movi	r2,8
    2018:	00c00604 	movi	r3,24
    201c:	20c8d83a 	srl	r4,r4,r3
    2020:	00c00074 	movhi	r3,1
    2024:	18c3eb04 	addi	r3,r3,4012
    2028:	1909883a 	add	r4,r3,r4
    202c:	20c00003 	ldbu	r3,0(r4)
    2030:	10c5c83a 	sub	r2,r2,r3
    2034:	f800283a 	ret
    2038:	00800604 	movi	r2,24
    203c:	00c00204 	movi	r3,8
    2040:	003ff606 	br	201c <__alt_data_end+0xff00201c>
    2044:	00800404 	movi	r2,16
    2048:	1007883a 	mov	r3,r2
    204c:	003ff306 	br	201c <__alt_data_end+0xff00201c>

00002050 <malloc>:
    2050:	00800074 	movhi	r2,1
    2054:	108b9604 	addi	r2,r2,11864
    2058:	200b883a 	mov	r5,r4
    205c:	11000017 	ldw	r4,0(r2)
    2060:	00020781 	jmpi	2078 <_malloc_r>

00002064 <free>:
    2064:	00800074 	movhi	r2,1
    2068:	108b9604 	addi	r2,r2,11864
    206c:	200b883a 	mov	r5,r4
    2070:	11000017 	ldw	r4,0(r2)
    2074:	0006ec81 	jmpi	6ec8 <_free_r>

00002078 <_malloc_r>:
    2078:	defff504 	addi	sp,sp,-44
    207c:	dc800315 	stw	r18,12(sp)
    2080:	dfc00a15 	stw	ra,40(sp)
    2084:	df000915 	stw	fp,36(sp)
    2088:	ddc00815 	stw	r23,32(sp)
    208c:	dd800715 	stw	r22,28(sp)
    2090:	dd400615 	stw	r21,24(sp)
    2094:	dd000515 	stw	r20,20(sp)
    2098:	dcc00415 	stw	r19,16(sp)
    209c:	dc400215 	stw	r17,8(sp)
    20a0:	dc000115 	stw	r16,4(sp)
    20a4:	288002c4 	addi	r2,r5,11
    20a8:	00c00584 	movi	r3,22
    20ac:	2025883a 	mov	r18,r4
    20b0:	18807f2e 	bgeu	r3,r2,22b0 <_malloc_r+0x238>
    20b4:	047ffe04 	movi	r17,-8
    20b8:	1462703a 	and	r17,r2,r17
    20bc:	8800a316 	blt	r17,zero,234c <_malloc_r+0x2d4>
    20c0:	8940a236 	bltu	r17,r5,234c <_malloc_r+0x2d4>
    20c4:	000e36c0 	call	e36c <__malloc_lock>
    20c8:	00807dc4 	movi	r2,503
    20cc:	1441e92e 	bgeu	r2,r17,2874 <_malloc_r+0x7fc>
    20d0:	8804d27a 	srli	r2,r17,9
    20d4:	1000a126 	beq	r2,zero,235c <_malloc_r+0x2e4>
    20d8:	00c00104 	movi	r3,4
    20dc:	18811e36 	bltu	r3,r2,2558 <_malloc_r+0x4e0>
    20e0:	8804d1ba 	srli	r2,r17,6
    20e4:	12000e44 	addi	r8,r2,57
    20e8:	11c00e04 	addi	r7,r2,56
    20ec:	4209883a 	add	r4,r8,r8
    20f0:	04c00074 	movhi	r19,1
    20f4:	2109883a 	add	r4,r4,r4
    20f8:	9cc4e804 	addi	r19,r19,5024
    20fc:	2109883a 	add	r4,r4,r4
    2100:	9909883a 	add	r4,r19,r4
    2104:	24000117 	ldw	r16,4(r4)
    2108:	213ffe04 	addi	r4,r4,-8
    210c:	24009726 	beq	r4,r16,236c <_malloc_r+0x2f4>
    2110:	80800117 	ldw	r2,4(r16)
    2114:	01bfff04 	movi	r6,-4
    2118:	014003c4 	movi	r5,15
    211c:	1184703a 	and	r2,r2,r6
    2120:	1447c83a 	sub	r3,r2,r17
    2124:	28c00716 	blt	r5,r3,2144 <_malloc_r+0xcc>
    2128:	1800920e 	bge	r3,zero,2374 <_malloc_r+0x2fc>
    212c:	84000317 	ldw	r16,12(r16)
    2130:	24008e26 	beq	r4,r16,236c <_malloc_r+0x2f4>
    2134:	80800117 	ldw	r2,4(r16)
    2138:	1184703a 	and	r2,r2,r6
    213c:	1447c83a 	sub	r3,r2,r17
    2140:	28fff90e 	bge	r5,r3,2128 <__alt_data_end+0xff002128>
    2144:	3809883a 	mov	r4,r7
    2148:	01800074 	movhi	r6,1
    214c:	9c000417 	ldw	r16,16(r19)
    2150:	3184e804 	addi	r6,r6,5024
    2154:	32000204 	addi	r8,r6,8
    2158:	82013426 	beq	r16,r8,262c <_malloc_r+0x5b4>
    215c:	80c00117 	ldw	r3,4(r16)
    2160:	00bfff04 	movi	r2,-4
    2164:	188e703a 	and	r7,r3,r2
    2168:	3c45c83a 	sub	r2,r7,r17
    216c:	00c003c4 	movi	r3,15
    2170:	18811f16 	blt	r3,r2,25f0 <_malloc_r+0x578>
    2174:	32000515 	stw	r8,20(r6)
    2178:	32000415 	stw	r8,16(r6)
    217c:	10007f0e 	bge	r2,zero,237c <_malloc_r+0x304>
    2180:	00807fc4 	movi	r2,511
    2184:	11c0fd36 	bltu	r2,r7,257c <_malloc_r+0x504>
    2188:	3806d0fa 	srli	r3,r7,3
    218c:	01c00044 	movi	r7,1
    2190:	30800117 	ldw	r2,4(r6)
    2194:	19400044 	addi	r5,r3,1
    2198:	294b883a 	add	r5,r5,r5
    219c:	1807d0ba 	srai	r3,r3,2
    21a0:	294b883a 	add	r5,r5,r5
    21a4:	294b883a 	add	r5,r5,r5
    21a8:	298b883a 	add	r5,r5,r6
    21ac:	38c6983a 	sll	r3,r7,r3
    21b0:	29c00017 	ldw	r7,0(r5)
    21b4:	2a7ffe04 	addi	r9,r5,-8
    21b8:	1886b03a 	or	r3,r3,r2
    21bc:	82400315 	stw	r9,12(r16)
    21c0:	81c00215 	stw	r7,8(r16)
    21c4:	30c00115 	stw	r3,4(r6)
    21c8:	2c000015 	stw	r16,0(r5)
    21cc:	3c000315 	stw	r16,12(r7)
    21d0:	2005d0ba 	srai	r2,r4,2
    21d4:	01400044 	movi	r5,1
    21d8:	288a983a 	sll	r5,r5,r2
    21dc:	19406f36 	bltu	r3,r5,239c <_malloc_r+0x324>
    21e0:	28c4703a 	and	r2,r5,r3
    21e4:	10000a1e 	bne	r2,zero,2210 <_malloc_r+0x198>
    21e8:	00bfff04 	movi	r2,-4
    21ec:	294b883a 	add	r5,r5,r5
    21f0:	2088703a 	and	r4,r4,r2
    21f4:	28c4703a 	and	r2,r5,r3
    21f8:	21000104 	addi	r4,r4,4
    21fc:	1000041e 	bne	r2,zero,2210 <_malloc_r+0x198>
    2200:	294b883a 	add	r5,r5,r5
    2204:	28c4703a 	and	r2,r5,r3
    2208:	21000104 	addi	r4,r4,4
    220c:	103ffc26 	beq	r2,zero,2200 <__alt_data_end+0xff002200>
    2210:	02bfff04 	movi	r10,-4
    2214:	024003c4 	movi	r9,15
    2218:	21800044 	addi	r6,r4,1
    221c:	318d883a 	add	r6,r6,r6
    2220:	318d883a 	add	r6,r6,r6
    2224:	318d883a 	add	r6,r6,r6
    2228:	998d883a 	add	r6,r19,r6
    222c:	333ffe04 	addi	r12,r6,-8
    2230:	2017883a 	mov	r11,r4
    2234:	31800104 	addi	r6,r6,4
    2238:	34000017 	ldw	r16,0(r6)
    223c:	31fffd04 	addi	r7,r6,-12
    2240:	81c0041e 	bne	r16,r7,2254 <_malloc_r+0x1dc>
    2244:	0000fb06 	br	2634 <_malloc_r+0x5bc>
    2248:	1801030e 	bge	r3,zero,2658 <_malloc_r+0x5e0>
    224c:	84000317 	ldw	r16,12(r16)
    2250:	81c0f826 	beq	r16,r7,2634 <_malloc_r+0x5bc>
    2254:	80800117 	ldw	r2,4(r16)
    2258:	1284703a 	and	r2,r2,r10
    225c:	1447c83a 	sub	r3,r2,r17
    2260:	48fff90e 	bge	r9,r3,2248 <__alt_data_end+0xff002248>
    2264:	80800317 	ldw	r2,12(r16)
    2268:	81000217 	ldw	r4,8(r16)
    226c:	89400054 	ori	r5,r17,1
    2270:	81400115 	stw	r5,4(r16)
    2274:	20800315 	stw	r2,12(r4)
    2278:	11000215 	stw	r4,8(r2)
    227c:	8463883a 	add	r17,r16,r17
    2280:	9c400515 	stw	r17,20(r19)
    2284:	9c400415 	stw	r17,16(r19)
    2288:	18800054 	ori	r2,r3,1
    228c:	88800115 	stw	r2,4(r17)
    2290:	8a000315 	stw	r8,12(r17)
    2294:	8a000215 	stw	r8,8(r17)
    2298:	88e3883a 	add	r17,r17,r3
    229c:	88c00015 	stw	r3,0(r17)
    22a0:	9009883a 	mov	r4,r18
    22a4:	000e3900 	call	e390 <__malloc_unlock>
    22a8:	80800204 	addi	r2,r16,8
    22ac:	00001b06 	br	231c <_malloc_r+0x2a4>
    22b0:	04400404 	movi	r17,16
    22b4:	89402536 	bltu	r17,r5,234c <_malloc_r+0x2d4>
    22b8:	000e36c0 	call	e36c <__malloc_lock>
    22bc:	00800184 	movi	r2,6
    22c0:	01000084 	movi	r4,2
    22c4:	04c00074 	movhi	r19,1
    22c8:	1085883a 	add	r2,r2,r2
    22cc:	9cc4e804 	addi	r19,r19,5024
    22d0:	1085883a 	add	r2,r2,r2
    22d4:	9885883a 	add	r2,r19,r2
    22d8:	14000117 	ldw	r16,4(r2)
    22dc:	10fffe04 	addi	r3,r2,-8
    22e0:	80c0d926 	beq	r16,r3,2648 <_malloc_r+0x5d0>
    22e4:	80c00117 	ldw	r3,4(r16)
    22e8:	81000317 	ldw	r4,12(r16)
    22ec:	00bfff04 	movi	r2,-4
    22f0:	1884703a 	and	r2,r3,r2
    22f4:	81400217 	ldw	r5,8(r16)
    22f8:	8085883a 	add	r2,r16,r2
    22fc:	10c00117 	ldw	r3,4(r2)
    2300:	29000315 	stw	r4,12(r5)
    2304:	21400215 	stw	r5,8(r4)
    2308:	18c00054 	ori	r3,r3,1
    230c:	10c00115 	stw	r3,4(r2)
    2310:	9009883a 	mov	r4,r18
    2314:	000e3900 	call	e390 <__malloc_unlock>
    2318:	80800204 	addi	r2,r16,8
    231c:	dfc00a17 	ldw	ra,40(sp)
    2320:	df000917 	ldw	fp,36(sp)
    2324:	ddc00817 	ldw	r23,32(sp)
    2328:	dd800717 	ldw	r22,28(sp)
    232c:	dd400617 	ldw	r21,24(sp)
    2330:	dd000517 	ldw	r20,20(sp)
    2334:	dcc00417 	ldw	r19,16(sp)
    2338:	dc800317 	ldw	r18,12(sp)
    233c:	dc400217 	ldw	r17,8(sp)
    2340:	dc000117 	ldw	r16,4(sp)
    2344:	dec00b04 	addi	sp,sp,44
    2348:	f800283a 	ret
    234c:	00800304 	movi	r2,12
    2350:	90800015 	stw	r2,0(r18)
    2354:	0005883a 	mov	r2,zero
    2358:	003ff006 	br	231c <__alt_data_end+0xff00231c>
    235c:	01002004 	movi	r4,128
    2360:	02001004 	movi	r8,64
    2364:	01c00fc4 	movi	r7,63
    2368:	003f6106 	br	20f0 <__alt_data_end+0xff0020f0>
    236c:	4009883a 	mov	r4,r8
    2370:	003f7506 	br	2148 <__alt_data_end+0xff002148>
    2374:	81000317 	ldw	r4,12(r16)
    2378:	003fde06 	br	22f4 <__alt_data_end+0xff0022f4>
    237c:	81c5883a 	add	r2,r16,r7
    2380:	11400117 	ldw	r5,4(r2)
    2384:	9009883a 	mov	r4,r18
    2388:	29400054 	ori	r5,r5,1
    238c:	11400115 	stw	r5,4(r2)
    2390:	000e3900 	call	e390 <__malloc_unlock>
    2394:	80800204 	addi	r2,r16,8
    2398:	003fe006 	br	231c <__alt_data_end+0xff00231c>
    239c:	9c000217 	ldw	r16,8(r19)
    23a0:	00bfff04 	movi	r2,-4
    23a4:	85800117 	ldw	r22,4(r16)
    23a8:	b0ac703a 	and	r22,r22,r2
    23ac:	b4400336 	bltu	r22,r17,23bc <_malloc_r+0x344>
    23b0:	b445c83a 	sub	r2,r22,r17
    23b4:	00c003c4 	movi	r3,15
    23b8:	18805d16 	blt	r3,r2,2530 <_malloc_r+0x4b8>
    23bc:	05c00074 	movhi	r23,1
    23c0:	00800074 	movhi	r2,1
    23c4:	1092b204 	addi	r2,r2,19144
    23c8:	bdcb9304 	addi	r23,r23,11852
    23cc:	15400017 	ldw	r21,0(r2)
    23d0:	b8c00017 	ldw	r3,0(r23)
    23d4:	00bfffc4 	movi	r2,-1
    23d8:	858d883a 	add	r6,r16,r22
    23dc:	8d6b883a 	add	r21,r17,r21
    23e0:	1880ea26 	beq	r3,r2,278c <_malloc_r+0x714>
    23e4:	ad4403c4 	addi	r21,r21,4111
    23e8:	00bc0004 	movi	r2,-4096
    23ec:	a8aa703a 	and	r21,r21,r2
    23f0:	a80b883a 	mov	r5,r21
    23f4:	9009883a 	mov	r4,r18
    23f8:	d9800015 	stw	r6,0(sp)
    23fc:	00029c40 	call	29c4 <_sbrk_r>
    2400:	1029883a 	mov	r20,r2
    2404:	00bfffc4 	movi	r2,-1
    2408:	d9800017 	ldw	r6,0(sp)
    240c:	a080e826 	beq	r20,r2,27b0 <_malloc_r+0x738>
    2410:	a180a636 	bltu	r20,r6,26ac <_malloc_r+0x634>
    2414:	07000074 	movhi	fp,1
    2418:	e712c004 	addi	fp,fp,19200
    241c:	e0800017 	ldw	r2,0(fp)
    2420:	a887883a 	add	r3,r21,r2
    2424:	e0c00015 	stw	r3,0(fp)
    2428:	3500e626 	beq	r6,r20,27c4 <_malloc_r+0x74c>
    242c:	b9000017 	ldw	r4,0(r23)
    2430:	00bfffc4 	movi	r2,-1
    2434:	2080ee26 	beq	r4,r2,27f0 <_malloc_r+0x778>
    2438:	a185c83a 	sub	r2,r20,r6
    243c:	10c5883a 	add	r2,r2,r3
    2440:	e0800015 	stw	r2,0(fp)
    2444:	a0c001cc 	andi	r3,r20,7
    2448:	1800bc26 	beq	r3,zero,273c <_malloc_r+0x6c4>
    244c:	a0e9c83a 	sub	r20,r20,r3
    2450:	00840204 	movi	r2,4104
    2454:	a5000204 	addi	r20,r20,8
    2458:	10c7c83a 	sub	r3,r2,r3
    245c:	a545883a 	add	r2,r20,r21
    2460:	1083ffcc 	andi	r2,r2,4095
    2464:	18abc83a 	sub	r21,r3,r2
    2468:	a80b883a 	mov	r5,r21
    246c:	9009883a 	mov	r4,r18
    2470:	00029c40 	call	29c4 <_sbrk_r>
    2474:	00ffffc4 	movi	r3,-1
    2478:	10c0e126 	beq	r2,r3,2800 <_malloc_r+0x788>
    247c:	1505c83a 	sub	r2,r2,r20
    2480:	1545883a 	add	r2,r2,r21
    2484:	10800054 	ori	r2,r2,1
    2488:	e0c00017 	ldw	r3,0(fp)
    248c:	9d000215 	stw	r20,8(r19)
    2490:	a0800115 	stw	r2,4(r20)
    2494:	a8c7883a 	add	r3,r21,r3
    2498:	e0c00015 	stw	r3,0(fp)
    249c:	84c00e26 	beq	r16,r19,24d8 <_malloc_r+0x460>
    24a0:	018003c4 	movi	r6,15
    24a4:	3580a72e 	bgeu	r6,r22,2744 <_malloc_r+0x6cc>
    24a8:	81400117 	ldw	r5,4(r16)
    24ac:	013ffe04 	movi	r4,-8
    24b0:	b0bffd04 	addi	r2,r22,-12
    24b4:	1104703a 	and	r2,r2,r4
    24b8:	2900004c 	andi	r4,r5,1
    24bc:	2088b03a 	or	r4,r4,r2
    24c0:	81000115 	stw	r4,4(r16)
    24c4:	01400144 	movi	r5,5
    24c8:	8089883a 	add	r4,r16,r2
    24cc:	21400115 	stw	r5,4(r4)
    24d0:	21400215 	stw	r5,8(r4)
    24d4:	3080cd36 	bltu	r6,r2,280c <_malloc_r+0x794>
    24d8:	00800074 	movhi	r2,1
    24dc:	1092b104 	addi	r2,r2,19140
    24e0:	11000017 	ldw	r4,0(r2)
    24e4:	20c0012e 	bgeu	r4,r3,24ec <_malloc_r+0x474>
    24e8:	10c00015 	stw	r3,0(r2)
    24ec:	00800074 	movhi	r2,1
    24f0:	1092b004 	addi	r2,r2,19136
    24f4:	11000017 	ldw	r4,0(r2)
    24f8:	9c000217 	ldw	r16,8(r19)
    24fc:	20c0012e 	bgeu	r4,r3,2504 <_malloc_r+0x48c>
    2500:	10c00015 	stw	r3,0(r2)
    2504:	80c00117 	ldw	r3,4(r16)
    2508:	00bfff04 	movi	r2,-4
    250c:	1886703a 	and	r3,r3,r2
    2510:	1c45c83a 	sub	r2,r3,r17
    2514:	1c400236 	bltu	r3,r17,2520 <_malloc_r+0x4a8>
    2518:	00c003c4 	movi	r3,15
    251c:	18800416 	blt	r3,r2,2530 <_malloc_r+0x4b8>
    2520:	9009883a 	mov	r4,r18
    2524:	000e3900 	call	e390 <__malloc_unlock>
    2528:	0005883a 	mov	r2,zero
    252c:	003f7b06 	br	231c <__alt_data_end+0xff00231c>
    2530:	88c00054 	ori	r3,r17,1
    2534:	80c00115 	stw	r3,4(r16)
    2538:	8463883a 	add	r17,r16,r17
    253c:	10800054 	ori	r2,r2,1
    2540:	9c400215 	stw	r17,8(r19)
    2544:	88800115 	stw	r2,4(r17)
    2548:	9009883a 	mov	r4,r18
    254c:	000e3900 	call	e390 <__malloc_unlock>
    2550:	80800204 	addi	r2,r16,8
    2554:	003f7106 	br	231c <__alt_data_end+0xff00231c>
    2558:	00c00504 	movi	r3,20
    255c:	18804a2e 	bgeu	r3,r2,2688 <_malloc_r+0x610>
    2560:	00c01504 	movi	r3,84
    2564:	18806e36 	bltu	r3,r2,2720 <_malloc_r+0x6a8>
    2568:	8804d33a 	srli	r2,r17,12
    256c:	12001bc4 	addi	r8,r2,111
    2570:	11c01b84 	addi	r7,r2,110
    2574:	4209883a 	add	r4,r8,r8
    2578:	003edd06 	br	20f0 <__alt_data_end+0xff0020f0>
    257c:	3804d27a 	srli	r2,r7,9
    2580:	00c00104 	movi	r3,4
    2584:	1880442e 	bgeu	r3,r2,2698 <_malloc_r+0x620>
    2588:	00c00504 	movi	r3,20
    258c:	18808136 	bltu	r3,r2,2794 <_malloc_r+0x71c>
    2590:	11401704 	addi	r5,r2,92
    2594:	10c016c4 	addi	r3,r2,91
    2598:	294b883a 	add	r5,r5,r5
    259c:	294b883a 	add	r5,r5,r5
    25a0:	294b883a 	add	r5,r5,r5
    25a4:	994b883a 	add	r5,r19,r5
    25a8:	28800017 	ldw	r2,0(r5)
    25ac:	01800074 	movhi	r6,1
    25b0:	297ffe04 	addi	r5,r5,-8
    25b4:	3184e804 	addi	r6,r6,5024
    25b8:	28806526 	beq	r5,r2,2750 <_malloc_r+0x6d8>
    25bc:	01bfff04 	movi	r6,-4
    25c0:	10c00117 	ldw	r3,4(r2)
    25c4:	1986703a 	and	r3,r3,r6
    25c8:	38c0022e 	bgeu	r7,r3,25d4 <_malloc_r+0x55c>
    25cc:	10800217 	ldw	r2,8(r2)
    25d0:	28bffb1e 	bne	r5,r2,25c0 <__alt_data_end+0xff0025c0>
    25d4:	11400317 	ldw	r5,12(r2)
    25d8:	98c00117 	ldw	r3,4(r19)
    25dc:	81400315 	stw	r5,12(r16)
    25e0:	80800215 	stw	r2,8(r16)
    25e4:	2c000215 	stw	r16,8(r5)
    25e8:	14000315 	stw	r16,12(r2)
    25ec:	003ef806 	br	21d0 <__alt_data_end+0xff0021d0>
    25f0:	88c00054 	ori	r3,r17,1
    25f4:	80c00115 	stw	r3,4(r16)
    25f8:	8463883a 	add	r17,r16,r17
    25fc:	34400515 	stw	r17,20(r6)
    2600:	34400415 	stw	r17,16(r6)
    2604:	10c00054 	ori	r3,r2,1
    2608:	8a000315 	stw	r8,12(r17)
    260c:	8a000215 	stw	r8,8(r17)
    2610:	88c00115 	stw	r3,4(r17)
    2614:	88a3883a 	add	r17,r17,r2
    2618:	88800015 	stw	r2,0(r17)
    261c:	9009883a 	mov	r4,r18
    2620:	000e3900 	call	e390 <__malloc_unlock>
    2624:	80800204 	addi	r2,r16,8
    2628:	003f3c06 	br	231c <__alt_data_end+0xff00231c>
    262c:	30c00117 	ldw	r3,4(r6)
    2630:	003ee706 	br	21d0 <__alt_data_end+0xff0021d0>
    2634:	5ac00044 	addi	r11,r11,1
    2638:	588000cc 	andi	r2,r11,3
    263c:	31800204 	addi	r6,r6,8
    2640:	103efd1e 	bne	r2,zero,2238 <__alt_data_end+0xff002238>
    2644:	00002406 	br	26d8 <_malloc_r+0x660>
    2648:	14000317 	ldw	r16,12(r2)
    264c:	143f251e 	bne	r2,r16,22e4 <__alt_data_end+0xff0022e4>
    2650:	21000084 	addi	r4,r4,2
    2654:	003ebc06 	br	2148 <__alt_data_end+0xff002148>
    2658:	8085883a 	add	r2,r16,r2
    265c:	10c00117 	ldw	r3,4(r2)
    2660:	81000317 	ldw	r4,12(r16)
    2664:	81400217 	ldw	r5,8(r16)
    2668:	18c00054 	ori	r3,r3,1
    266c:	10c00115 	stw	r3,4(r2)
    2670:	29000315 	stw	r4,12(r5)
    2674:	21400215 	stw	r5,8(r4)
    2678:	9009883a 	mov	r4,r18
    267c:	000e3900 	call	e390 <__malloc_unlock>
    2680:	80800204 	addi	r2,r16,8
    2684:	003f2506 	br	231c <__alt_data_end+0xff00231c>
    2688:	12001704 	addi	r8,r2,92
    268c:	11c016c4 	addi	r7,r2,91
    2690:	4209883a 	add	r4,r8,r8
    2694:	003e9606 	br	20f0 <__alt_data_end+0xff0020f0>
    2698:	3804d1ba 	srli	r2,r7,6
    269c:	11400e44 	addi	r5,r2,57
    26a0:	10c00e04 	addi	r3,r2,56
    26a4:	294b883a 	add	r5,r5,r5
    26a8:	003fbc06 	br	259c <__alt_data_end+0xff00259c>
    26ac:	84ff5926 	beq	r16,r19,2414 <__alt_data_end+0xff002414>
    26b0:	00800074 	movhi	r2,1
    26b4:	1084e804 	addi	r2,r2,5024
    26b8:	14000217 	ldw	r16,8(r2)
    26bc:	00bfff04 	movi	r2,-4
    26c0:	80c00117 	ldw	r3,4(r16)
    26c4:	1886703a 	and	r3,r3,r2
    26c8:	003f9106 	br	2510 <__alt_data_end+0xff002510>
    26cc:	60800217 	ldw	r2,8(r12)
    26d0:	213fffc4 	addi	r4,r4,-1
    26d4:	1300651e 	bne	r2,r12,286c <_malloc_r+0x7f4>
    26d8:	208000cc 	andi	r2,r4,3
    26dc:	633ffe04 	addi	r12,r12,-8
    26e0:	103ffa1e 	bne	r2,zero,26cc <__alt_data_end+0xff0026cc>
    26e4:	98800117 	ldw	r2,4(r19)
    26e8:	0146303a 	nor	r3,zero,r5
    26ec:	1884703a 	and	r2,r3,r2
    26f0:	98800115 	stw	r2,4(r19)
    26f4:	294b883a 	add	r5,r5,r5
    26f8:	117f2836 	bltu	r2,r5,239c <__alt_data_end+0xff00239c>
    26fc:	283f2726 	beq	r5,zero,239c <__alt_data_end+0xff00239c>
    2700:	2886703a 	and	r3,r5,r2
    2704:	5809883a 	mov	r4,r11
    2708:	183ec31e 	bne	r3,zero,2218 <__alt_data_end+0xff002218>
    270c:	294b883a 	add	r5,r5,r5
    2710:	2886703a 	and	r3,r5,r2
    2714:	21000104 	addi	r4,r4,4
    2718:	183ffc26 	beq	r3,zero,270c <__alt_data_end+0xff00270c>
    271c:	003ebe06 	br	2218 <__alt_data_end+0xff002218>
    2720:	00c05504 	movi	r3,340
    2724:	18801236 	bltu	r3,r2,2770 <_malloc_r+0x6f8>
    2728:	8804d3fa 	srli	r2,r17,15
    272c:	12001e04 	addi	r8,r2,120
    2730:	11c01dc4 	addi	r7,r2,119
    2734:	4209883a 	add	r4,r8,r8
    2738:	003e6d06 	br	20f0 <__alt_data_end+0xff0020f0>
    273c:	00c40004 	movi	r3,4096
    2740:	003f4606 	br	245c <__alt_data_end+0xff00245c>
    2744:	00800044 	movi	r2,1
    2748:	a0800115 	stw	r2,4(r20)
    274c:	003f7406 	br	2520 <__alt_data_end+0xff002520>
    2750:	1805d0ba 	srai	r2,r3,2
    2754:	01c00044 	movi	r7,1
    2758:	30c00117 	ldw	r3,4(r6)
    275c:	388e983a 	sll	r7,r7,r2
    2760:	2805883a 	mov	r2,r5
    2764:	38c6b03a 	or	r3,r7,r3
    2768:	30c00115 	stw	r3,4(r6)
    276c:	003f9b06 	br	25dc <__alt_data_end+0xff0025dc>
    2770:	00c15504 	movi	r3,1364
    2774:	18801a36 	bltu	r3,r2,27e0 <_malloc_r+0x768>
    2778:	8804d4ba 	srli	r2,r17,18
    277c:	12001f44 	addi	r8,r2,125
    2780:	11c01f04 	addi	r7,r2,124
    2784:	4209883a 	add	r4,r8,r8
    2788:	003e5906 	br	20f0 <__alt_data_end+0xff0020f0>
    278c:	ad400404 	addi	r21,r21,16
    2790:	003f1706 	br	23f0 <__alt_data_end+0xff0023f0>
    2794:	00c01504 	movi	r3,84
    2798:	18802336 	bltu	r3,r2,2828 <_malloc_r+0x7b0>
    279c:	3804d33a 	srli	r2,r7,12
    27a0:	11401bc4 	addi	r5,r2,111
    27a4:	10c01b84 	addi	r3,r2,110
    27a8:	294b883a 	add	r5,r5,r5
    27ac:	003f7b06 	br	259c <__alt_data_end+0xff00259c>
    27b0:	9c000217 	ldw	r16,8(r19)
    27b4:	00bfff04 	movi	r2,-4
    27b8:	80c00117 	ldw	r3,4(r16)
    27bc:	1886703a 	and	r3,r3,r2
    27c0:	003f5306 	br	2510 <__alt_data_end+0xff002510>
    27c4:	3083ffcc 	andi	r2,r6,4095
    27c8:	103f181e 	bne	r2,zero,242c <__alt_data_end+0xff00242c>
    27cc:	99000217 	ldw	r4,8(r19)
    27d0:	b545883a 	add	r2,r22,r21
    27d4:	10800054 	ori	r2,r2,1
    27d8:	20800115 	stw	r2,4(r4)
    27dc:	003f3e06 	br	24d8 <__alt_data_end+0xff0024d8>
    27e0:	01003f84 	movi	r4,254
    27e4:	02001fc4 	movi	r8,127
    27e8:	01c01f84 	movi	r7,126
    27ec:	003e4006 	br	20f0 <__alt_data_end+0xff0020f0>
    27f0:	00800074 	movhi	r2,1
    27f4:	108b9304 	addi	r2,r2,11852
    27f8:	15000015 	stw	r20,0(r2)
    27fc:	003f1106 	br	2444 <__alt_data_end+0xff002444>
    2800:	00800044 	movi	r2,1
    2804:	002b883a 	mov	r21,zero
    2808:	003f1f06 	br	2488 <__alt_data_end+0xff002488>
    280c:	81400204 	addi	r5,r16,8
    2810:	9009883a 	mov	r4,r18
    2814:	0006ec80 	call	6ec8 <_free_r>
    2818:	00800074 	movhi	r2,1
    281c:	1092c004 	addi	r2,r2,19200
    2820:	10c00017 	ldw	r3,0(r2)
    2824:	003f2c06 	br	24d8 <__alt_data_end+0xff0024d8>
    2828:	00c05504 	movi	r3,340
    282c:	18800536 	bltu	r3,r2,2844 <_malloc_r+0x7cc>
    2830:	3804d3fa 	srli	r2,r7,15
    2834:	11401e04 	addi	r5,r2,120
    2838:	10c01dc4 	addi	r3,r2,119
    283c:	294b883a 	add	r5,r5,r5
    2840:	003f5606 	br	259c <__alt_data_end+0xff00259c>
    2844:	00c15504 	movi	r3,1364
    2848:	18800536 	bltu	r3,r2,2860 <_malloc_r+0x7e8>
    284c:	3804d4ba 	srli	r2,r7,18
    2850:	11401f44 	addi	r5,r2,125
    2854:	10c01f04 	addi	r3,r2,124
    2858:	294b883a 	add	r5,r5,r5
    285c:	003f4f06 	br	259c <__alt_data_end+0xff00259c>
    2860:	01403f84 	movi	r5,254
    2864:	00c01f84 	movi	r3,126
    2868:	003f4c06 	br	259c <__alt_data_end+0xff00259c>
    286c:	98800117 	ldw	r2,4(r19)
    2870:	003fa006 	br	26f4 <__alt_data_end+0xff0026f4>
    2874:	8808d0fa 	srli	r4,r17,3
    2878:	20800044 	addi	r2,r4,1
    287c:	1085883a 	add	r2,r2,r2
    2880:	003e9006 	br	22c4 <__alt_data_end+0xff0022c4>

00002884 <_printf_r>:
    2884:	defffd04 	addi	sp,sp,-12
    2888:	2805883a 	mov	r2,r5
    288c:	dfc00015 	stw	ra,0(sp)
    2890:	d9800115 	stw	r6,4(sp)
    2894:	d9c00215 	stw	r7,8(sp)
    2898:	21400217 	ldw	r5,8(r4)
    289c:	d9c00104 	addi	r7,sp,4
    28a0:	100d883a 	mov	r6,r2
    28a4:	0002ab00 	call	2ab0 <___vfprintf_internal_r>
    28a8:	dfc00017 	ldw	ra,0(sp)
    28ac:	dec00304 	addi	sp,sp,12
    28b0:	f800283a 	ret

000028b4 <printf>:
    28b4:	defffc04 	addi	sp,sp,-16
    28b8:	dfc00015 	stw	ra,0(sp)
    28bc:	d9400115 	stw	r5,4(sp)
    28c0:	d9800215 	stw	r6,8(sp)
    28c4:	d9c00315 	stw	r7,12(sp)
    28c8:	00800074 	movhi	r2,1
    28cc:	108b9604 	addi	r2,r2,11864
    28d0:	10800017 	ldw	r2,0(r2)
    28d4:	200b883a 	mov	r5,r4
    28d8:	d9800104 	addi	r6,sp,4
    28dc:	11000217 	ldw	r4,8(r2)
    28e0:	0004ca80 	call	4ca8 <__vfprintf_internal>
    28e4:	dfc00017 	ldw	ra,0(sp)
    28e8:	dec00404 	addi	sp,sp,16
    28ec:	f800283a 	ret

000028f0 <_puts_r>:
    28f0:	defff604 	addi	sp,sp,-40
    28f4:	dc000715 	stw	r16,28(sp)
    28f8:	2021883a 	mov	r16,r4
    28fc:	2809883a 	mov	r4,r5
    2900:	dc400815 	stw	r17,32(sp)
    2904:	dfc00915 	stw	ra,36(sp)
    2908:	2823883a 	mov	r17,r5
    290c:	0002a180 	call	2a18 <strlen>
    2910:	10c00044 	addi	r3,r2,1
    2914:	d8800115 	stw	r2,4(sp)
    2918:	00800074 	movhi	r2,1
    291c:	1083de04 	addi	r2,r2,3960
    2920:	d8800215 	stw	r2,8(sp)
    2924:	00800044 	movi	r2,1
    2928:	d8800315 	stw	r2,12(sp)
    292c:	00800084 	movi	r2,2
    2930:	dc400015 	stw	r17,0(sp)
    2934:	d8c00615 	stw	r3,24(sp)
    2938:	dec00415 	stw	sp,16(sp)
    293c:	d8800515 	stw	r2,20(sp)
    2940:	80000226 	beq	r16,zero,294c <_puts_r+0x5c>
    2944:	80800e17 	ldw	r2,56(r16)
    2948:	10001426 	beq	r2,zero,299c <_puts_r+0xac>
    294c:	81400217 	ldw	r5,8(r16)
    2950:	2880030b 	ldhu	r2,12(r5)
    2954:	10c8000c 	andi	r3,r2,8192
    2958:	1800061e 	bne	r3,zero,2974 <_puts_r+0x84>
    295c:	29001917 	ldw	r4,100(r5)
    2960:	00f7ffc4 	movi	r3,-8193
    2964:	10880014 	ori	r2,r2,8192
    2968:	20c6703a 	and	r3,r4,r3
    296c:	2880030d 	sth	r2,12(r5)
    2970:	28c01915 	stw	r3,100(r5)
    2974:	d9800404 	addi	r6,sp,16
    2978:	8009883a 	mov	r4,r16
    297c:	00071d80 	call	71d8 <__sfvwrite_r>
    2980:	1000091e 	bne	r2,zero,29a8 <_puts_r+0xb8>
    2984:	00800284 	movi	r2,10
    2988:	dfc00917 	ldw	ra,36(sp)
    298c:	dc400817 	ldw	r17,32(sp)
    2990:	dc000717 	ldw	r16,28(sp)
    2994:	dec00a04 	addi	sp,sp,40
    2998:	f800283a 	ret
    299c:	8009883a 	mov	r4,r16
    29a0:	0006d540 	call	6d54 <__sinit>
    29a4:	003fe906 	br	294c <__alt_data_end+0xff00294c>
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	003ff606 	br	2988 <__alt_data_end+0xff002988>

000029b0 <puts>:
    29b0:	00800074 	movhi	r2,1
    29b4:	108b9604 	addi	r2,r2,11864
    29b8:	200b883a 	mov	r5,r4
    29bc:	11000017 	ldw	r4,0(r2)
    29c0:	00028f01 	jmpi	28f0 <_puts_r>

000029c4 <_sbrk_r>:
    29c4:	defffd04 	addi	sp,sp,-12
    29c8:	dc000015 	stw	r16,0(sp)
    29cc:	04000074 	movhi	r16,1
    29d0:	dc400115 	stw	r17,4(sp)
    29d4:	8412b304 	addi	r16,r16,19148
    29d8:	2023883a 	mov	r17,r4
    29dc:	2809883a 	mov	r4,r5
    29e0:	dfc00215 	stw	ra,8(sp)
    29e4:	80000015 	stw	zero,0(r16)
    29e8:	000e5500 	call	e550 <sbrk>
    29ec:	00ffffc4 	movi	r3,-1
    29f0:	10c00526 	beq	r2,r3,2a08 <_sbrk_r+0x44>
    29f4:	dfc00217 	ldw	ra,8(sp)
    29f8:	dc400117 	ldw	r17,4(sp)
    29fc:	dc000017 	ldw	r16,0(sp)
    2a00:	dec00304 	addi	sp,sp,12
    2a04:	f800283a 	ret
    2a08:	80c00017 	ldw	r3,0(r16)
    2a0c:	183ff926 	beq	r3,zero,29f4 <__alt_data_end+0xff0029f4>
    2a10:	88c00015 	stw	r3,0(r17)
    2a14:	003ff706 	br	29f4 <__alt_data_end+0xff0029f4>

00002a18 <strlen>:
    2a18:	208000cc 	andi	r2,r4,3
    2a1c:	10002026 	beq	r2,zero,2aa0 <strlen+0x88>
    2a20:	20800007 	ldb	r2,0(r4)
    2a24:	10002026 	beq	r2,zero,2aa8 <strlen+0x90>
    2a28:	2005883a 	mov	r2,r4
    2a2c:	00000206 	br	2a38 <strlen+0x20>
    2a30:	10c00007 	ldb	r3,0(r2)
    2a34:	18001826 	beq	r3,zero,2a98 <strlen+0x80>
    2a38:	10800044 	addi	r2,r2,1
    2a3c:	10c000cc 	andi	r3,r2,3
    2a40:	183ffb1e 	bne	r3,zero,2a30 <__alt_data_end+0xff002a30>
    2a44:	10c00017 	ldw	r3,0(r2)
    2a48:	01ffbff4 	movhi	r7,65279
    2a4c:	39ffbfc4 	addi	r7,r7,-257
    2a50:	00ca303a 	nor	r5,zero,r3
    2a54:	01a02074 	movhi	r6,32897
    2a58:	19c7883a 	add	r3,r3,r7
    2a5c:	31a02004 	addi	r6,r6,-32640
    2a60:	1946703a 	and	r3,r3,r5
    2a64:	1986703a 	and	r3,r3,r6
    2a68:	1800091e 	bne	r3,zero,2a90 <strlen+0x78>
    2a6c:	10800104 	addi	r2,r2,4
    2a70:	10c00017 	ldw	r3,0(r2)
    2a74:	19cb883a 	add	r5,r3,r7
    2a78:	00c6303a 	nor	r3,zero,r3
    2a7c:	28c6703a 	and	r3,r5,r3
    2a80:	1986703a 	and	r3,r3,r6
    2a84:	183ff926 	beq	r3,zero,2a6c <__alt_data_end+0xff002a6c>
    2a88:	00000106 	br	2a90 <strlen+0x78>
    2a8c:	10800044 	addi	r2,r2,1
    2a90:	10c00007 	ldb	r3,0(r2)
    2a94:	183ffd1e 	bne	r3,zero,2a8c <__alt_data_end+0xff002a8c>
    2a98:	1105c83a 	sub	r2,r2,r4
    2a9c:	f800283a 	ret
    2aa0:	2005883a 	mov	r2,r4
    2aa4:	003fe706 	br	2a44 <__alt_data_end+0xff002a44>
    2aa8:	0005883a 	mov	r2,zero
    2aac:	f800283a 	ret

00002ab0 <___vfprintf_internal_r>:
    2ab0:	deffb804 	addi	sp,sp,-288
    2ab4:	dfc04715 	stw	ra,284(sp)
    2ab8:	ddc04515 	stw	r23,276(sp)
    2abc:	dd404315 	stw	r21,268(sp)
    2ac0:	d9002c15 	stw	r4,176(sp)
    2ac4:	282f883a 	mov	r23,r5
    2ac8:	302b883a 	mov	r21,r6
    2acc:	d9c02d15 	stw	r7,180(sp)
    2ad0:	df004615 	stw	fp,280(sp)
    2ad4:	dd804415 	stw	r22,272(sp)
    2ad8:	dd004215 	stw	r20,264(sp)
    2adc:	dcc04115 	stw	r19,260(sp)
    2ae0:	dc804015 	stw	r18,256(sp)
    2ae4:	dc403f15 	stw	r17,252(sp)
    2ae8:	dc003e15 	stw	r16,248(sp)
    2aec:	00078c80 	call	78c8 <_localeconv_r>
    2af0:	10800017 	ldw	r2,0(r2)
    2af4:	1009883a 	mov	r4,r2
    2af8:	d8803415 	stw	r2,208(sp)
    2afc:	0002a180 	call	2a18 <strlen>
    2b00:	d8803715 	stw	r2,220(sp)
    2b04:	d8802c17 	ldw	r2,176(sp)
    2b08:	10000226 	beq	r2,zero,2b14 <___vfprintf_internal_r+0x64>
    2b0c:	10800e17 	ldw	r2,56(r2)
    2b10:	1000f926 	beq	r2,zero,2ef8 <___vfprintf_internal_r+0x448>
    2b14:	b880030b 	ldhu	r2,12(r23)
    2b18:	10c8000c 	andi	r3,r2,8192
    2b1c:	1800061e 	bne	r3,zero,2b38 <___vfprintf_internal_r+0x88>
    2b20:	b9001917 	ldw	r4,100(r23)
    2b24:	00f7ffc4 	movi	r3,-8193
    2b28:	10880014 	ori	r2,r2,8192
    2b2c:	20c6703a 	and	r3,r4,r3
    2b30:	b880030d 	sth	r2,12(r23)
    2b34:	b8c01915 	stw	r3,100(r23)
    2b38:	10c0020c 	andi	r3,r2,8
    2b3c:	1800c126 	beq	r3,zero,2e44 <___vfprintf_internal_r+0x394>
    2b40:	b8c00417 	ldw	r3,16(r23)
    2b44:	1800bf26 	beq	r3,zero,2e44 <___vfprintf_internal_r+0x394>
    2b48:	1080068c 	andi	r2,r2,26
    2b4c:	00c00284 	movi	r3,10
    2b50:	10c0c426 	beq	r2,r3,2e64 <___vfprintf_internal_r+0x3b4>
    2b54:	d8c00404 	addi	r3,sp,16
    2b58:	05000074 	movhi	r20,1
    2b5c:	d9001e04 	addi	r4,sp,120
    2b60:	a5043b84 	addi	r20,r20,4334
    2b64:	d8c01e15 	stw	r3,120(sp)
    2b68:	d8002015 	stw	zero,128(sp)
    2b6c:	d8001f15 	stw	zero,124(sp)
    2b70:	d8003315 	stw	zero,204(sp)
    2b74:	d8003615 	stw	zero,216(sp)
    2b78:	d8003815 	stw	zero,224(sp)
    2b7c:	1811883a 	mov	r8,r3
    2b80:	d8003915 	stw	zero,228(sp)
    2b84:	d8003a15 	stw	zero,232(sp)
    2b88:	d8002f15 	stw	zero,188(sp)
    2b8c:	d9002815 	stw	r4,160(sp)
    2b90:	a8800007 	ldb	r2,0(r21)
    2b94:	10027b26 	beq	r2,zero,3584 <___vfprintf_internal_r+0xad4>
    2b98:	00c00944 	movi	r3,37
    2b9c:	a821883a 	mov	r16,r21
    2ba0:	10c0021e 	bne	r2,r3,2bac <___vfprintf_internal_r+0xfc>
    2ba4:	00001406 	br	2bf8 <___vfprintf_internal_r+0x148>
    2ba8:	10c00326 	beq	r2,r3,2bb8 <___vfprintf_internal_r+0x108>
    2bac:	84000044 	addi	r16,r16,1
    2bb0:	80800007 	ldb	r2,0(r16)
    2bb4:	103ffc1e 	bne	r2,zero,2ba8 <__alt_data_end+0xff002ba8>
    2bb8:	8563c83a 	sub	r17,r16,r21
    2bbc:	88000e26 	beq	r17,zero,2bf8 <___vfprintf_internal_r+0x148>
    2bc0:	d8c02017 	ldw	r3,128(sp)
    2bc4:	d8801f17 	ldw	r2,124(sp)
    2bc8:	45400015 	stw	r21,0(r8)
    2bcc:	1c47883a 	add	r3,r3,r17
    2bd0:	10800044 	addi	r2,r2,1
    2bd4:	d8c02015 	stw	r3,128(sp)
    2bd8:	44400115 	stw	r17,4(r8)
    2bdc:	d8801f15 	stw	r2,124(sp)
    2be0:	00c001c4 	movi	r3,7
    2be4:	1880a716 	blt	r3,r2,2e84 <___vfprintf_internal_r+0x3d4>
    2be8:	42000204 	addi	r8,r8,8
    2bec:	d9402f17 	ldw	r5,188(sp)
    2bf0:	2c4b883a 	add	r5,r5,r17
    2bf4:	d9402f15 	stw	r5,188(sp)
    2bf8:	80800007 	ldb	r2,0(r16)
    2bfc:	1000a826 	beq	r2,zero,2ea0 <___vfprintf_internal_r+0x3f0>
    2c00:	84400047 	ldb	r17,1(r16)
    2c04:	00bfffc4 	movi	r2,-1
    2c08:	85400044 	addi	r21,r16,1
    2c0c:	d8002785 	stb	zero,158(sp)
    2c10:	0007883a 	mov	r3,zero
    2c14:	000f883a 	mov	r7,zero
    2c18:	d8802915 	stw	r2,164(sp)
    2c1c:	d8003115 	stw	zero,196(sp)
    2c20:	0025883a 	mov	r18,zero
    2c24:	01401604 	movi	r5,88
    2c28:	01800244 	movi	r6,9
    2c2c:	02800a84 	movi	r10,42
    2c30:	02401b04 	movi	r9,108
    2c34:	ad400044 	addi	r21,r21,1
    2c38:	88bff804 	addi	r2,r17,-32
    2c3c:	28830436 	bltu	r5,r2,3850 <___vfprintf_internal_r+0xda0>
    2c40:	100490ba 	slli	r2,r2,2
    2c44:	01000034 	movhi	r4,0
    2c48:	210b1604 	addi	r4,r4,11352
    2c4c:	1105883a 	add	r2,r2,r4
    2c50:	10800017 	ldw	r2,0(r2)
    2c54:	1000683a 	jmp	r2
    2c58:	00003770 	cmpltui	zero,zero,221
    2c5c:	00003850 	cmplti	zero,zero,225
    2c60:	00003850 	cmplti	zero,zero,225
    2c64:	00003790 	cmplti	zero,zero,222
    2c68:	00003850 	cmplti	zero,zero,225
    2c6c:	00003850 	cmplti	zero,zero,225
    2c70:	00003850 	cmplti	zero,zero,225
    2c74:	00003850 	cmplti	zero,zero,225
    2c78:	00003850 	cmplti	zero,zero,225
    2c7c:	00003850 	cmplti	zero,zero,225
    2c80:	00002f04 	movi	zero,188
    2c84:	000036ac 	andhi	zero,zero,218
    2c88:	00003850 	cmplti	zero,zero,225
    2c8c:	00002dcc 	andi	zero,zero,183
    2c90:	00002f2c 	andhi	zero,zero,188
    2c94:	00003850 	cmplti	zero,zero,225
    2c98:	00002f6c 	andhi	zero,zero,189
    2c9c:	00002f78 	rdprs	zero,zero,189
    2ca0:	00002f78 	rdprs	zero,zero,189
    2ca4:	00002f78 	rdprs	zero,zero,189
    2ca8:	00002f78 	rdprs	zero,zero,189
    2cac:	00002f78 	rdprs	zero,zero,189
    2cb0:	00002f78 	rdprs	zero,zero,189
    2cb4:	00002f78 	rdprs	zero,zero,189
    2cb8:	00002f78 	rdprs	zero,zero,189
    2cbc:	00002f78 	rdprs	zero,zero,189
    2cc0:	00003850 	cmplti	zero,zero,225
    2cc4:	00003850 	cmplti	zero,zero,225
    2cc8:	00003850 	cmplti	zero,zero,225
    2ccc:	00003850 	cmplti	zero,zero,225
    2cd0:	00003850 	cmplti	zero,zero,225
    2cd4:	00003850 	cmplti	zero,zero,225
    2cd8:	00003850 	cmplti	zero,zero,225
    2cdc:	00003850 	cmplti	zero,zero,225
    2ce0:	00003850 	cmplti	zero,zero,225
    2ce4:	00003850 	cmplti	zero,zero,225
    2ce8:	00002fac 	andhi	zero,zero,190
    2cec:	00003068 	cmpgeui	zero,zero,193
    2cf0:	00003850 	cmplti	zero,zero,225
    2cf4:	00003068 	cmpgeui	zero,zero,193
    2cf8:	00003850 	cmplti	zero,zero,225
    2cfc:	00003850 	cmplti	zero,zero,225
    2d00:	00003850 	cmplti	zero,zero,225
    2d04:	00003850 	cmplti	zero,zero,225
    2d08:	00003108 	cmpgei	zero,zero,196
    2d0c:	00003850 	cmplti	zero,zero,225
    2d10:	00003850 	cmplti	zero,zero,225
    2d14:	00003114 	movui	zero,196
    2d18:	00003850 	cmplti	zero,zero,225
    2d1c:	00003850 	cmplti	zero,zero,225
    2d20:	00003850 	cmplti	zero,zero,225
    2d24:	00003850 	cmplti	zero,zero,225
    2d28:	00003850 	cmplti	zero,zero,225
    2d2c:	0000358c 	andi	zero,zero,214
    2d30:	00003850 	cmplti	zero,zero,225
    2d34:	00003850 	cmplti	zero,zero,225
    2d38:	000035ec 	andhi	zero,zero,215
    2d3c:	00003850 	cmplti	zero,zero,225
    2d40:	00003850 	cmplti	zero,zero,225
    2d44:	00003850 	cmplti	zero,zero,225
    2d48:	00003850 	cmplti	zero,zero,225
    2d4c:	00003850 	cmplti	zero,zero,225
    2d50:	00003850 	cmplti	zero,zero,225
    2d54:	00003850 	cmplti	zero,zero,225
    2d58:	00003850 	cmplti	zero,zero,225
    2d5c:	00003850 	cmplti	zero,zero,225
    2d60:	00003850 	cmplti	zero,zero,225
    2d64:	000037fc 	xorhi	zero,zero,223
    2d68:	0000379c 	xori	zero,zero,222
    2d6c:	00003068 	cmpgeui	zero,zero,193
    2d70:	00003068 	cmpgeui	zero,zero,193
    2d74:	00003068 	cmpgeui	zero,zero,193
    2d78:	000037ac 	andhi	zero,zero,222
    2d7c:	0000379c 	xori	zero,zero,222
    2d80:	00003850 	cmplti	zero,zero,225
    2d84:	00003850 	cmplti	zero,zero,225
    2d88:	000037b8 	rdprs	zero,zero,222
    2d8c:	00003850 	cmplti	zero,zero,225
    2d90:	000037c8 	cmpgei	zero,zero,223
    2d94:	0000369c 	xori	zero,zero,218
    2d98:	00002dd8 	cmpnei	zero,zero,183
    2d9c:	000036bc 	xorhi	zero,zero,218
    2da0:	00003850 	cmplti	zero,zero,225
    2da4:	000036c8 	cmpgei	zero,zero,219
    2da8:	00003850 	cmplti	zero,zero,225
    2dac:	00003724 	muli	zero,zero,220
    2db0:	00003850 	cmplti	zero,zero,225
    2db4:	00003850 	cmplti	zero,zero,225
    2db8:	00003734 	movhi	zero,220
    2dbc:	d9003117 	ldw	r4,196(sp)
    2dc0:	d8802d15 	stw	r2,180(sp)
    2dc4:	0109c83a 	sub	r4,zero,r4
    2dc8:	d9003115 	stw	r4,196(sp)
    2dcc:	94800114 	ori	r18,r18,4
    2dd0:	ac400007 	ldb	r17,0(r21)
    2dd4:	003f9706 	br	2c34 <__alt_data_end+0xff002c34>
    2dd8:	00800c04 	movi	r2,48
    2ddc:	d9002d17 	ldw	r4,180(sp)
    2de0:	d9402917 	ldw	r5,164(sp)
    2de4:	d8802705 	stb	r2,156(sp)
    2de8:	00801e04 	movi	r2,120
    2dec:	d8802745 	stb	r2,157(sp)
    2df0:	d8002785 	stb	zero,158(sp)
    2df4:	20c00104 	addi	r3,r4,4
    2df8:	24c00017 	ldw	r19,0(r4)
    2dfc:	002d883a 	mov	r22,zero
    2e00:	90800094 	ori	r2,r18,2
    2e04:	28029a16 	blt	r5,zero,3870 <___vfprintf_internal_r+0xdc0>
    2e08:	00bfdfc4 	movi	r2,-129
    2e0c:	90a4703a 	and	r18,r18,r2
    2e10:	d8c02d15 	stw	r3,180(sp)
    2e14:	94800094 	ori	r18,r18,2
    2e18:	9802871e 	bne	r19,zero,3838 <___vfprintf_internal_r+0xd88>
    2e1c:	00800074 	movhi	r2,1
    2e20:	10843404 	addi	r2,r2,4304
    2e24:	d8803915 	stw	r2,228(sp)
    2e28:	04401e04 	movi	r17,120
    2e2c:	d8802917 	ldw	r2,164(sp)
    2e30:	0039883a 	mov	fp,zero
    2e34:	1001e926 	beq	r2,zero,35dc <___vfprintf_internal_r+0xb2c>
    2e38:	0027883a 	mov	r19,zero
    2e3c:	002d883a 	mov	r22,zero
    2e40:	00020506 	br	3658 <___vfprintf_internal_r+0xba8>
    2e44:	d9002c17 	ldw	r4,176(sp)
    2e48:	b80b883a 	mov	r5,r23
    2e4c:	0004d800 	call	4d80 <__swsetup_r>
    2e50:	1005ac1e 	bne	r2,zero,4504 <___vfprintf_internal_r+0x1a54>
    2e54:	b880030b 	ldhu	r2,12(r23)
    2e58:	00c00284 	movi	r3,10
    2e5c:	1080068c 	andi	r2,r2,26
    2e60:	10ff3c1e 	bne	r2,r3,2b54 <__alt_data_end+0xff002b54>
    2e64:	b880038f 	ldh	r2,14(r23)
    2e68:	103f3a16 	blt	r2,zero,2b54 <__alt_data_end+0xff002b54>
    2e6c:	d9c02d17 	ldw	r7,180(sp)
    2e70:	d9002c17 	ldw	r4,176(sp)
    2e74:	a80d883a 	mov	r6,r21
    2e78:	b80b883a 	mov	r5,r23
    2e7c:	0004cc40 	call	4cc4 <__sbprintf>
    2e80:	00001106 	br	2ec8 <___vfprintf_internal_r+0x418>
    2e84:	d9002c17 	ldw	r4,176(sp)
    2e88:	d9801e04 	addi	r6,sp,120
    2e8c:	b80b883a 	mov	r5,r23
    2e90:	000984c0 	call	984c <__sprint_r>
    2e94:	1000081e 	bne	r2,zero,2eb8 <___vfprintf_internal_r+0x408>
    2e98:	da000404 	addi	r8,sp,16
    2e9c:	003f5306 	br	2bec <__alt_data_end+0xff002bec>
    2ea0:	d8802017 	ldw	r2,128(sp)
    2ea4:	10000426 	beq	r2,zero,2eb8 <___vfprintf_internal_r+0x408>
    2ea8:	d9002c17 	ldw	r4,176(sp)
    2eac:	d9801e04 	addi	r6,sp,120
    2eb0:	b80b883a 	mov	r5,r23
    2eb4:	000984c0 	call	984c <__sprint_r>
    2eb8:	b880030b 	ldhu	r2,12(r23)
    2ebc:	1080100c 	andi	r2,r2,64
    2ec0:	1005901e 	bne	r2,zero,4504 <___vfprintf_internal_r+0x1a54>
    2ec4:	d8802f17 	ldw	r2,188(sp)
    2ec8:	dfc04717 	ldw	ra,284(sp)
    2ecc:	df004617 	ldw	fp,280(sp)
    2ed0:	ddc04517 	ldw	r23,276(sp)
    2ed4:	dd804417 	ldw	r22,272(sp)
    2ed8:	dd404317 	ldw	r21,268(sp)
    2edc:	dd004217 	ldw	r20,264(sp)
    2ee0:	dcc04117 	ldw	r19,260(sp)
    2ee4:	dc804017 	ldw	r18,256(sp)
    2ee8:	dc403f17 	ldw	r17,252(sp)
    2eec:	dc003e17 	ldw	r16,248(sp)
    2ef0:	dec04804 	addi	sp,sp,288
    2ef4:	f800283a 	ret
    2ef8:	d9002c17 	ldw	r4,176(sp)
    2efc:	0006d540 	call	6d54 <__sinit>
    2f00:	003f0406 	br	2b14 <__alt_data_end+0xff002b14>
    2f04:	d8802d17 	ldw	r2,180(sp)
    2f08:	d9002d17 	ldw	r4,180(sp)
    2f0c:	10800017 	ldw	r2,0(r2)
    2f10:	d8803115 	stw	r2,196(sp)
    2f14:	20800104 	addi	r2,r4,4
    2f18:	d9003117 	ldw	r4,196(sp)
    2f1c:	203fa716 	blt	r4,zero,2dbc <__alt_data_end+0xff002dbc>
    2f20:	d8802d15 	stw	r2,180(sp)
    2f24:	ac400007 	ldb	r17,0(r21)
    2f28:	003f4206 	br	2c34 <__alt_data_end+0xff002c34>
    2f2c:	ac400007 	ldb	r17,0(r21)
    2f30:	aac00044 	addi	r11,r21,1
    2f34:	8a872826 	beq	r17,r10,4bd8 <___vfprintf_internal_r+0x2128>
    2f38:	88bff404 	addi	r2,r17,-48
    2f3c:	0009883a 	mov	r4,zero
    2f40:	30867d36 	bltu	r6,r2,4938 <___vfprintf_internal_r+0x1e88>
    2f44:	5c400007 	ldb	r17,0(r11)
    2f48:	210002a4 	muli	r4,r4,10
    2f4c:	5d400044 	addi	r21,r11,1
    2f50:	a817883a 	mov	r11,r21
    2f54:	2089883a 	add	r4,r4,r2
    2f58:	88bff404 	addi	r2,r17,-48
    2f5c:	30bff92e 	bgeu	r6,r2,2f44 <__alt_data_end+0xff002f44>
    2f60:	2005c916 	blt	r4,zero,4688 <___vfprintf_internal_r+0x1bd8>
    2f64:	d9002915 	stw	r4,164(sp)
    2f68:	003f3306 	br	2c38 <__alt_data_end+0xff002c38>
    2f6c:	94802014 	ori	r18,r18,128
    2f70:	ac400007 	ldb	r17,0(r21)
    2f74:	003f2f06 	br	2c34 <__alt_data_end+0xff002c34>
    2f78:	a809883a 	mov	r4,r21
    2f7c:	d8003115 	stw	zero,196(sp)
    2f80:	88bff404 	addi	r2,r17,-48
    2f84:	0017883a 	mov	r11,zero
    2f88:	24400007 	ldb	r17,0(r4)
    2f8c:	5ac002a4 	muli	r11,r11,10
    2f90:	ad400044 	addi	r21,r21,1
    2f94:	a809883a 	mov	r4,r21
    2f98:	12d7883a 	add	r11,r2,r11
    2f9c:	88bff404 	addi	r2,r17,-48
    2fa0:	30bff92e 	bgeu	r6,r2,2f88 <__alt_data_end+0xff002f88>
    2fa4:	dac03115 	stw	r11,196(sp)
    2fa8:	003f2306 	br	2c38 <__alt_data_end+0xff002c38>
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	18072b1e 	bne	r3,zero,4c60 <___vfprintf_internal_r+0x21b0>
    2fb4:	94800414 	ori	r18,r18,16
    2fb8:	9080080c 	andi	r2,r18,32
    2fbc:	10037b26 	beq	r2,zero,3dac <___vfprintf_internal_r+0x12fc>
    2fc0:	d9402d17 	ldw	r5,180(sp)
    2fc4:	28800117 	ldw	r2,4(r5)
    2fc8:	2cc00017 	ldw	r19,0(r5)
    2fcc:	29400204 	addi	r5,r5,8
    2fd0:	d9402d15 	stw	r5,180(sp)
    2fd4:	102d883a 	mov	r22,r2
    2fd8:	10044b16 	blt	r2,zero,4108 <___vfprintf_internal_r+0x1658>
    2fdc:	d9402917 	ldw	r5,164(sp)
    2fe0:	df002783 	ldbu	fp,158(sp)
    2fe4:	2803bc16 	blt	r5,zero,3ed8 <___vfprintf_internal_r+0x1428>
    2fe8:	00ffdfc4 	movi	r3,-129
    2fec:	9d84b03a 	or	r2,r19,r22
    2ff0:	90e4703a 	and	r18,r18,r3
    2ff4:	10017726 	beq	r2,zero,35d4 <___vfprintf_internal_r+0xb24>
    2ff8:	b0038326 	beq	r22,zero,3e08 <___vfprintf_internal_r+0x1358>
    2ffc:	dc402a15 	stw	r17,168(sp)
    3000:	dc001e04 	addi	r16,sp,120
    3004:	b023883a 	mov	r17,r22
    3008:	402d883a 	mov	r22,r8
    300c:	9809883a 	mov	r4,r19
    3010:	880b883a 	mov	r5,r17
    3014:	01800284 	movi	r6,10
    3018:	000f883a 	mov	r7,zero
    301c:	000bc440 	call	bc44 <__umoddi3>
    3020:	10800c04 	addi	r2,r2,48
    3024:	843fffc4 	addi	r16,r16,-1
    3028:	9809883a 	mov	r4,r19
    302c:	880b883a 	mov	r5,r17
    3030:	80800005 	stb	r2,0(r16)
    3034:	01800284 	movi	r6,10
    3038:	000f883a 	mov	r7,zero
    303c:	000b6cc0 	call	b6cc <__udivdi3>
    3040:	1027883a 	mov	r19,r2
    3044:	10c4b03a 	or	r2,r2,r3
    3048:	1823883a 	mov	r17,r3
    304c:	103fef1e 	bne	r2,zero,300c <__alt_data_end+0xff00300c>
    3050:	d8c02817 	ldw	r3,160(sp)
    3054:	dc402a17 	ldw	r17,168(sp)
    3058:	b011883a 	mov	r8,r22
    305c:	1c07c83a 	sub	r3,r3,r16
    3060:	d8c02e15 	stw	r3,184(sp)
    3064:	00005906 	br	31cc <___vfprintf_internal_r+0x71c>
    3068:	18c03fcc 	andi	r3,r3,255
    306c:	1806fa1e 	bne	r3,zero,4c58 <___vfprintf_internal_r+0x21a8>
    3070:	9080020c 	andi	r2,r18,8
    3074:	10048a26 	beq	r2,zero,42a0 <___vfprintf_internal_r+0x17f0>
    3078:	d8c02d17 	ldw	r3,180(sp)
    307c:	d9002d17 	ldw	r4,180(sp)
    3080:	d9402d17 	ldw	r5,180(sp)
    3084:	18c00017 	ldw	r3,0(r3)
    3088:	21000117 	ldw	r4,4(r4)
    308c:	29400204 	addi	r5,r5,8
    3090:	d8c03615 	stw	r3,216(sp)
    3094:	d9003815 	stw	r4,224(sp)
    3098:	d9402d15 	stw	r5,180(sp)
    309c:	d9003617 	ldw	r4,216(sp)
    30a0:	d9403817 	ldw	r5,224(sp)
    30a4:	da003d15 	stw	r8,244(sp)
    30a8:	04000044 	movi	r16,1
    30ac:	00094c40 	call	94c4 <__fpclassifyd>
    30b0:	da003d17 	ldw	r8,244(sp)
    30b4:	14041f1e 	bne	r2,r16,4134 <___vfprintf_internal_r+0x1684>
    30b8:	d9003617 	ldw	r4,216(sp)
    30bc:	d9403817 	ldw	r5,224(sp)
    30c0:	000d883a 	mov	r6,zero
    30c4:	000f883a 	mov	r7,zero
    30c8:	000cb8c0 	call	cb8c <__ledf2>
    30cc:	da003d17 	ldw	r8,244(sp)
    30d0:	1005be16 	blt	r2,zero,47cc <___vfprintf_internal_r+0x1d1c>
    30d4:	df002783 	ldbu	fp,158(sp)
    30d8:	008011c4 	movi	r2,71
    30dc:	1445330e 	bge	r2,r17,45ac <___vfprintf_internal_r+0x1afc>
    30e0:	04000074 	movhi	r16,1
    30e4:	84042c04 	addi	r16,r16,4272
    30e8:	00c000c4 	movi	r3,3
    30ec:	00bfdfc4 	movi	r2,-129
    30f0:	d8c02a15 	stw	r3,168(sp)
    30f4:	90a4703a 	and	r18,r18,r2
    30f8:	d8c02e15 	stw	r3,184(sp)
    30fc:	d8002915 	stw	zero,164(sp)
    3100:	d8003215 	stw	zero,200(sp)
    3104:	00003706 	br	31e4 <___vfprintf_internal_r+0x734>
    3108:	94800214 	ori	r18,r18,8
    310c:	ac400007 	ldb	r17,0(r21)
    3110:	003ec806 	br	2c34 <__alt_data_end+0xff002c34>
    3114:	18c03fcc 	andi	r3,r3,255
    3118:	1806db1e 	bne	r3,zero,4c88 <___vfprintf_internal_r+0x21d8>
    311c:	94800414 	ori	r18,r18,16
    3120:	9080080c 	andi	r2,r18,32
    3124:	1002d826 	beq	r2,zero,3c88 <___vfprintf_internal_r+0x11d8>
    3128:	d9402d17 	ldw	r5,180(sp)
    312c:	d8c02917 	ldw	r3,164(sp)
    3130:	d8002785 	stb	zero,158(sp)
    3134:	28800204 	addi	r2,r5,8
    3138:	2cc00017 	ldw	r19,0(r5)
    313c:	2d800117 	ldw	r22,4(r5)
    3140:	18048f16 	blt	r3,zero,4380 <___vfprintf_internal_r+0x18d0>
    3144:	013fdfc4 	movi	r4,-129
    3148:	9d86b03a 	or	r3,r19,r22
    314c:	d8802d15 	stw	r2,180(sp)
    3150:	9124703a 	and	r18,r18,r4
    3154:	1802d91e 	bne	r3,zero,3cbc <___vfprintf_internal_r+0x120c>
    3158:	d8c02917 	ldw	r3,164(sp)
    315c:	0039883a 	mov	fp,zero
    3160:	1805c326 	beq	r3,zero,4870 <___vfprintf_internal_r+0x1dc0>
    3164:	0027883a 	mov	r19,zero
    3168:	002d883a 	mov	r22,zero
    316c:	dc001e04 	addi	r16,sp,120
    3170:	9806d0fa 	srli	r3,r19,3
    3174:	b008977a 	slli	r4,r22,29
    3178:	b02cd0fa 	srli	r22,r22,3
    317c:	9cc001cc 	andi	r19,r19,7
    3180:	98800c04 	addi	r2,r19,48
    3184:	843fffc4 	addi	r16,r16,-1
    3188:	20e6b03a 	or	r19,r4,r3
    318c:	80800005 	stb	r2,0(r16)
    3190:	9d86b03a 	or	r3,r19,r22
    3194:	183ff61e 	bne	r3,zero,3170 <__alt_data_end+0xff003170>
    3198:	90c0004c 	andi	r3,r18,1
    319c:	18013b26 	beq	r3,zero,368c <___vfprintf_internal_r+0xbdc>
    31a0:	10803fcc 	andi	r2,r2,255
    31a4:	1080201c 	xori	r2,r2,128
    31a8:	10bfe004 	addi	r2,r2,-128
    31ac:	00c00c04 	movi	r3,48
    31b0:	10c13626 	beq	r2,r3,368c <___vfprintf_internal_r+0xbdc>
    31b4:	80ffffc5 	stb	r3,-1(r16)
    31b8:	d8c02817 	ldw	r3,160(sp)
    31bc:	80bfffc4 	addi	r2,r16,-1
    31c0:	1021883a 	mov	r16,r2
    31c4:	1887c83a 	sub	r3,r3,r2
    31c8:	d8c02e15 	stw	r3,184(sp)
    31cc:	d8802e17 	ldw	r2,184(sp)
    31d0:	d9002917 	ldw	r4,164(sp)
    31d4:	1100010e 	bge	r2,r4,31dc <___vfprintf_internal_r+0x72c>
    31d8:	2005883a 	mov	r2,r4
    31dc:	d8802a15 	stw	r2,168(sp)
    31e0:	d8003215 	stw	zero,200(sp)
    31e4:	e7003fcc 	andi	fp,fp,255
    31e8:	e700201c 	xori	fp,fp,128
    31ec:	e73fe004 	addi	fp,fp,-128
    31f0:	e0000326 	beq	fp,zero,3200 <___vfprintf_internal_r+0x750>
    31f4:	d8c02a17 	ldw	r3,168(sp)
    31f8:	18c00044 	addi	r3,r3,1
    31fc:	d8c02a15 	stw	r3,168(sp)
    3200:	90c0008c 	andi	r3,r18,2
    3204:	d8c02b15 	stw	r3,172(sp)
    3208:	18000326 	beq	r3,zero,3218 <___vfprintf_internal_r+0x768>
    320c:	d8c02a17 	ldw	r3,168(sp)
    3210:	18c00084 	addi	r3,r3,2
    3214:	d8c02a15 	stw	r3,168(sp)
    3218:	90c0210c 	andi	r3,r18,132
    321c:	d8c03015 	stw	r3,192(sp)
    3220:	1801a31e 	bne	r3,zero,38b0 <___vfprintf_internal_r+0xe00>
    3224:	d9003117 	ldw	r4,196(sp)
    3228:	d8c02a17 	ldw	r3,168(sp)
    322c:	20e7c83a 	sub	r19,r4,r3
    3230:	04c19f0e 	bge	zero,r19,38b0 <___vfprintf_internal_r+0xe00>
    3234:	02400404 	movi	r9,16
    3238:	d8c02017 	ldw	r3,128(sp)
    323c:	d8801f17 	ldw	r2,124(sp)
    3240:	4cc50d0e 	bge	r9,r19,4678 <___vfprintf_internal_r+0x1bc8>
    3244:	01400074 	movhi	r5,1
    3248:	29443f84 	addi	r5,r5,4350
    324c:	dc403b15 	stw	r17,236(sp)
    3250:	d9403515 	stw	r5,212(sp)
    3254:	9823883a 	mov	r17,r19
    3258:	482d883a 	mov	r22,r9
    325c:	9027883a 	mov	r19,r18
    3260:	070001c4 	movi	fp,7
    3264:	8025883a 	mov	r18,r16
    3268:	dc002c17 	ldw	r16,176(sp)
    326c:	00000306 	br	327c <___vfprintf_internal_r+0x7cc>
    3270:	8c7ffc04 	addi	r17,r17,-16
    3274:	42000204 	addi	r8,r8,8
    3278:	b440130e 	bge	r22,r17,32c8 <___vfprintf_internal_r+0x818>
    327c:	01000074 	movhi	r4,1
    3280:	18c00404 	addi	r3,r3,16
    3284:	10800044 	addi	r2,r2,1
    3288:	21043f84 	addi	r4,r4,4350
    328c:	41000015 	stw	r4,0(r8)
    3290:	45800115 	stw	r22,4(r8)
    3294:	d8c02015 	stw	r3,128(sp)
    3298:	d8801f15 	stw	r2,124(sp)
    329c:	e0bff40e 	bge	fp,r2,3270 <__alt_data_end+0xff003270>
    32a0:	d9801e04 	addi	r6,sp,120
    32a4:	b80b883a 	mov	r5,r23
    32a8:	8009883a 	mov	r4,r16
    32ac:	000984c0 	call	984c <__sprint_r>
    32b0:	103f011e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    32b4:	8c7ffc04 	addi	r17,r17,-16
    32b8:	d8c02017 	ldw	r3,128(sp)
    32bc:	d8801f17 	ldw	r2,124(sp)
    32c0:	da000404 	addi	r8,sp,16
    32c4:	b47fed16 	blt	r22,r17,327c <__alt_data_end+0xff00327c>
    32c8:	9021883a 	mov	r16,r18
    32cc:	9825883a 	mov	r18,r19
    32d0:	8827883a 	mov	r19,r17
    32d4:	dc403b17 	ldw	r17,236(sp)
    32d8:	d9403517 	ldw	r5,212(sp)
    32dc:	98c7883a 	add	r3,r19,r3
    32e0:	10800044 	addi	r2,r2,1
    32e4:	41400015 	stw	r5,0(r8)
    32e8:	44c00115 	stw	r19,4(r8)
    32ec:	d8c02015 	stw	r3,128(sp)
    32f0:	d8801f15 	stw	r2,124(sp)
    32f4:	010001c4 	movi	r4,7
    32f8:	2082a316 	blt	r4,r2,3d88 <___vfprintf_internal_r+0x12d8>
    32fc:	df002787 	ldb	fp,158(sp)
    3300:	42000204 	addi	r8,r8,8
    3304:	e0000c26 	beq	fp,zero,3338 <___vfprintf_internal_r+0x888>
    3308:	d8801f17 	ldw	r2,124(sp)
    330c:	d9002784 	addi	r4,sp,158
    3310:	18c00044 	addi	r3,r3,1
    3314:	10800044 	addi	r2,r2,1
    3318:	41000015 	stw	r4,0(r8)
    331c:	01000044 	movi	r4,1
    3320:	41000115 	stw	r4,4(r8)
    3324:	d8c02015 	stw	r3,128(sp)
    3328:	d8801f15 	stw	r2,124(sp)
    332c:	010001c4 	movi	r4,7
    3330:	20823c16 	blt	r4,r2,3c24 <___vfprintf_internal_r+0x1174>
    3334:	42000204 	addi	r8,r8,8
    3338:	d8802b17 	ldw	r2,172(sp)
    333c:	10000c26 	beq	r2,zero,3370 <___vfprintf_internal_r+0x8c0>
    3340:	d8801f17 	ldw	r2,124(sp)
    3344:	d9002704 	addi	r4,sp,156
    3348:	18c00084 	addi	r3,r3,2
    334c:	10800044 	addi	r2,r2,1
    3350:	41000015 	stw	r4,0(r8)
    3354:	01000084 	movi	r4,2
    3358:	41000115 	stw	r4,4(r8)
    335c:	d8c02015 	stw	r3,128(sp)
    3360:	d8801f15 	stw	r2,124(sp)
    3364:	010001c4 	movi	r4,7
    3368:	20823616 	blt	r4,r2,3c44 <___vfprintf_internal_r+0x1194>
    336c:	42000204 	addi	r8,r8,8
    3370:	d9003017 	ldw	r4,192(sp)
    3374:	00802004 	movi	r2,128
    3378:	20819926 	beq	r4,r2,39e0 <___vfprintf_internal_r+0xf30>
    337c:	d9402917 	ldw	r5,164(sp)
    3380:	d8802e17 	ldw	r2,184(sp)
    3384:	28adc83a 	sub	r22,r5,r2
    3388:	0580310e 	bge	zero,r22,3450 <___vfprintf_internal_r+0x9a0>
    338c:	07000404 	movi	fp,16
    3390:	d8801f17 	ldw	r2,124(sp)
    3394:	e584140e 	bge	fp,r22,43e8 <___vfprintf_internal_r+0x1938>
    3398:	01400074 	movhi	r5,1
    339c:	29443b84 	addi	r5,r5,4334
    33a0:	dc402915 	stw	r17,164(sp)
    33a4:	d9402b15 	stw	r5,172(sp)
    33a8:	b023883a 	mov	r17,r22
    33ac:	04c001c4 	movi	r19,7
    33b0:	a82d883a 	mov	r22,r21
    33b4:	902b883a 	mov	r21,r18
    33b8:	8025883a 	mov	r18,r16
    33bc:	dc002c17 	ldw	r16,176(sp)
    33c0:	00000306 	br	33d0 <___vfprintf_internal_r+0x920>
    33c4:	8c7ffc04 	addi	r17,r17,-16
    33c8:	42000204 	addi	r8,r8,8
    33cc:	e440110e 	bge	fp,r17,3414 <___vfprintf_internal_r+0x964>
    33d0:	18c00404 	addi	r3,r3,16
    33d4:	10800044 	addi	r2,r2,1
    33d8:	45000015 	stw	r20,0(r8)
    33dc:	47000115 	stw	fp,4(r8)
    33e0:	d8c02015 	stw	r3,128(sp)
    33e4:	d8801f15 	stw	r2,124(sp)
    33e8:	98bff60e 	bge	r19,r2,33c4 <__alt_data_end+0xff0033c4>
    33ec:	d9801e04 	addi	r6,sp,120
    33f0:	b80b883a 	mov	r5,r23
    33f4:	8009883a 	mov	r4,r16
    33f8:	000984c0 	call	984c <__sprint_r>
    33fc:	103eae1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3400:	8c7ffc04 	addi	r17,r17,-16
    3404:	d8c02017 	ldw	r3,128(sp)
    3408:	d8801f17 	ldw	r2,124(sp)
    340c:	da000404 	addi	r8,sp,16
    3410:	e47fef16 	blt	fp,r17,33d0 <__alt_data_end+0xff0033d0>
    3414:	9021883a 	mov	r16,r18
    3418:	a825883a 	mov	r18,r21
    341c:	b02b883a 	mov	r21,r22
    3420:	882d883a 	mov	r22,r17
    3424:	dc402917 	ldw	r17,164(sp)
    3428:	d9002b17 	ldw	r4,172(sp)
    342c:	1d87883a 	add	r3,r3,r22
    3430:	10800044 	addi	r2,r2,1
    3434:	41000015 	stw	r4,0(r8)
    3438:	45800115 	stw	r22,4(r8)
    343c:	d8c02015 	stw	r3,128(sp)
    3440:	d8801f15 	stw	r2,124(sp)
    3444:	010001c4 	movi	r4,7
    3448:	2081ee16 	blt	r4,r2,3c04 <___vfprintf_internal_r+0x1154>
    344c:	42000204 	addi	r8,r8,8
    3450:	9080400c 	andi	r2,r18,256
    3454:	1001181e 	bne	r2,zero,38b8 <___vfprintf_internal_r+0xe08>
    3458:	d9402e17 	ldw	r5,184(sp)
    345c:	d8801f17 	ldw	r2,124(sp)
    3460:	44000015 	stw	r16,0(r8)
    3464:	1947883a 	add	r3,r3,r5
    3468:	10800044 	addi	r2,r2,1
    346c:	41400115 	stw	r5,4(r8)
    3470:	d8c02015 	stw	r3,128(sp)
    3474:	d8801f15 	stw	r2,124(sp)
    3478:	010001c4 	movi	r4,7
    347c:	2081d316 	blt	r4,r2,3bcc <___vfprintf_internal_r+0x111c>
    3480:	42000204 	addi	r8,r8,8
    3484:	9480010c 	andi	r18,r18,4
    3488:	90003226 	beq	r18,zero,3554 <___vfprintf_internal_r+0xaa4>
    348c:	d9403117 	ldw	r5,196(sp)
    3490:	d8802a17 	ldw	r2,168(sp)
    3494:	28a1c83a 	sub	r16,r5,r2
    3498:	04002e0e 	bge	zero,r16,3554 <___vfprintf_internal_r+0xaa4>
    349c:	04400404 	movi	r17,16
    34a0:	d8801f17 	ldw	r2,124(sp)
    34a4:	8c04a20e 	bge	r17,r16,4730 <___vfprintf_internal_r+0x1c80>
    34a8:	01400074 	movhi	r5,1
    34ac:	29443f84 	addi	r5,r5,4350
    34b0:	d9403515 	stw	r5,212(sp)
    34b4:	048001c4 	movi	r18,7
    34b8:	dcc02c17 	ldw	r19,176(sp)
    34bc:	00000306 	br	34cc <___vfprintf_internal_r+0xa1c>
    34c0:	843ffc04 	addi	r16,r16,-16
    34c4:	42000204 	addi	r8,r8,8
    34c8:	8c00130e 	bge	r17,r16,3518 <___vfprintf_internal_r+0xa68>
    34cc:	01000074 	movhi	r4,1
    34d0:	18c00404 	addi	r3,r3,16
    34d4:	10800044 	addi	r2,r2,1
    34d8:	21043f84 	addi	r4,r4,4350
    34dc:	41000015 	stw	r4,0(r8)
    34e0:	44400115 	stw	r17,4(r8)
    34e4:	d8c02015 	stw	r3,128(sp)
    34e8:	d8801f15 	stw	r2,124(sp)
    34ec:	90bff40e 	bge	r18,r2,34c0 <__alt_data_end+0xff0034c0>
    34f0:	d9801e04 	addi	r6,sp,120
    34f4:	b80b883a 	mov	r5,r23
    34f8:	9809883a 	mov	r4,r19
    34fc:	000984c0 	call	984c <__sprint_r>
    3500:	103e6d1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3504:	843ffc04 	addi	r16,r16,-16
    3508:	d8c02017 	ldw	r3,128(sp)
    350c:	d8801f17 	ldw	r2,124(sp)
    3510:	da000404 	addi	r8,sp,16
    3514:	8c3fed16 	blt	r17,r16,34cc <__alt_data_end+0xff0034cc>
    3518:	d9403517 	ldw	r5,212(sp)
    351c:	1c07883a 	add	r3,r3,r16
    3520:	10800044 	addi	r2,r2,1
    3524:	41400015 	stw	r5,0(r8)
    3528:	44000115 	stw	r16,4(r8)
    352c:	d8c02015 	stw	r3,128(sp)
    3530:	d8801f15 	stw	r2,124(sp)
    3534:	010001c4 	movi	r4,7
    3538:	2080060e 	bge	r4,r2,3554 <___vfprintf_internal_r+0xaa4>
    353c:	d9002c17 	ldw	r4,176(sp)
    3540:	d9801e04 	addi	r6,sp,120
    3544:	b80b883a 	mov	r5,r23
    3548:	000984c0 	call	984c <__sprint_r>
    354c:	103e5a1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3550:	d8c02017 	ldw	r3,128(sp)
    3554:	d8803117 	ldw	r2,196(sp)
    3558:	d9002a17 	ldw	r4,168(sp)
    355c:	1100010e 	bge	r2,r4,3564 <___vfprintf_internal_r+0xab4>
    3560:	2005883a 	mov	r2,r4
    3564:	d9402f17 	ldw	r5,188(sp)
    3568:	288b883a 	add	r5,r5,r2
    356c:	d9402f15 	stw	r5,188(sp)
    3570:	18019e1e 	bne	r3,zero,3bec <___vfprintf_internal_r+0x113c>
    3574:	a8800007 	ldb	r2,0(r21)
    3578:	d8001f15 	stw	zero,124(sp)
    357c:	da000404 	addi	r8,sp,16
    3580:	103d851e 	bne	r2,zero,2b98 <__alt_data_end+0xff002b98>
    3584:	a821883a 	mov	r16,r21
    3588:	003d9b06 	br	2bf8 <__alt_data_end+0xff002bf8>
    358c:	18c03fcc 	andi	r3,r3,255
    3590:	1805c11e 	bne	r3,zero,4c98 <___vfprintf_internal_r+0x21e8>
    3594:	94800414 	ori	r18,r18,16
    3598:	9080080c 	andi	r2,r18,32
    359c:	10020c26 	beq	r2,zero,3dd0 <___vfprintf_internal_r+0x1320>
    35a0:	d8802d17 	ldw	r2,180(sp)
    35a4:	d9002917 	ldw	r4,164(sp)
    35a8:	d8002785 	stb	zero,158(sp)
    35ac:	10c00204 	addi	r3,r2,8
    35b0:	14c00017 	ldw	r19,0(r2)
    35b4:	15800117 	ldw	r22,4(r2)
    35b8:	20040f16 	blt	r4,zero,45f8 <___vfprintf_internal_r+0x1b48>
    35bc:	013fdfc4 	movi	r4,-129
    35c0:	9d84b03a 	or	r2,r19,r22
    35c4:	d8c02d15 	stw	r3,180(sp)
    35c8:	9124703a 	and	r18,r18,r4
    35cc:	0039883a 	mov	fp,zero
    35d0:	103e891e 	bne	r2,zero,2ff8 <__alt_data_end+0xff002ff8>
    35d4:	d9002917 	ldw	r4,164(sp)
    35d8:	2002c11e 	bne	r4,zero,40e0 <___vfprintf_internal_r+0x1630>
    35dc:	d8002915 	stw	zero,164(sp)
    35e0:	d8002e15 	stw	zero,184(sp)
    35e4:	dc001e04 	addi	r16,sp,120
    35e8:	003ef806 	br	31cc <__alt_data_end+0xff0031cc>
    35ec:	18c03fcc 	andi	r3,r3,255
    35f0:	18059d1e 	bne	r3,zero,4c68 <___vfprintf_internal_r+0x21b8>
    35f4:	01400074 	movhi	r5,1
    35f8:	29442f04 	addi	r5,r5,4284
    35fc:	d9403915 	stw	r5,228(sp)
    3600:	9080080c 	andi	r2,r18,32
    3604:	10005226 	beq	r2,zero,3750 <___vfprintf_internal_r+0xca0>
    3608:	d8802d17 	ldw	r2,180(sp)
    360c:	14c00017 	ldw	r19,0(r2)
    3610:	15800117 	ldw	r22,4(r2)
    3614:	10800204 	addi	r2,r2,8
    3618:	d8802d15 	stw	r2,180(sp)
    361c:	9080004c 	andi	r2,r18,1
    3620:	10019026 	beq	r2,zero,3c64 <___vfprintf_internal_r+0x11b4>
    3624:	9d84b03a 	or	r2,r19,r22
    3628:	10036926 	beq	r2,zero,43d0 <___vfprintf_internal_r+0x1920>
    362c:	d8c02917 	ldw	r3,164(sp)
    3630:	00800c04 	movi	r2,48
    3634:	d8802705 	stb	r2,156(sp)
    3638:	dc402745 	stb	r17,157(sp)
    363c:	d8002785 	stb	zero,158(sp)
    3640:	90800094 	ori	r2,r18,2
    3644:	18045d16 	blt	r3,zero,47bc <___vfprintf_internal_r+0x1d0c>
    3648:	00bfdfc4 	movi	r2,-129
    364c:	90a4703a 	and	r18,r18,r2
    3650:	94800094 	ori	r18,r18,2
    3654:	0039883a 	mov	fp,zero
    3658:	d9003917 	ldw	r4,228(sp)
    365c:	dc001e04 	addi	r16,sp,120
    3660:	988003cc 	andi	r2,r19,15
    3664:	b006973a 	slli	r3,r22,28
    3668:	2085883a 	add	r2,r4,r2
    366c:	9826d13a 	srli	r19,r19,4
    3670:	10800003 	ldbu	r2,0(r2)
    3674:	b02cd13a 	srli	r22,r22,4
    3678:	843fffc4 	addi	r16,r16,-1
    367c:	1ce6b03a 	or	r19,r3,r19
    3680:	80800005 	stb	r2,0(r16)
    3684:	9d84b03a 	or	r2,r19,r22
    3688:	103ff51e 	bne	r2,zero,3660 <__alt_data_end+0xff003660>
    368c:	d8c02817 	ldw	r3,160(sp)
    3690:	1c07c83a 	sub	r3,r3,r16
    3694:	d8c02e15 	stw	r3,184(sp)
    3698:	003ecc06 	br	31cc <__alt_data_end+0xff0031cc>
    369c:	18c03fcc 	andi	r3,r3,255
    36a0:	183e9f26 	beq	r3,zero,3120 <__alt_data_end+0xff003120>
    36a4:	d9c02785 	stb	r7,158(sp)
    36a8:	003e9d06 	br	3120 <__alt_data_end+0xff003120>
    36ac:	00c00044 	movi	r3,1
    36b0:	01c00ac4 	movi	r7,43
    36b4:	ac400007 	ldb	r17,0(r21)
    36b8:	003d5e06 	br	2c34 <__alt_data_end+0xff002c34>
    36bc:	94800814 	ori	r18,r18,32
    36c0:	ac400007 	ldb	r17,0(r21)
    36c4:	003d5b06 	br	2c34 <__alt_data_end+0xff002c34>
    36c8:	d8c02d17 	ldw	r3,180(sp)
    36cc:	d8002785 	stb	zero,158(sp)
    36d0:	1c000017 	ldw	r16,0(r3)
    36d4:	1cc00104 	addi	r19,r3,4
    36d8:	80041926 	beq	r16,zero,4740 <___vfprintf_internal_r+0x1c90>
    36dc:	d9002917 	ldw	r4,164(sp)
    36e0:	2003d016 	blt	r4,zero,4624 <___vfprintf_internal_r+0x1b74>
    36e4:	200d883a 	mov	r6,r4
    36e8:	000b883a 	mov	r5,zero
    36ec:	8009883a 	mov	r4,r16
    36f0:	da003d15 	stw	r8,244(sp)
    36f4:	0007ab40 	call	7ab4 <memchr>
    36f8:	da003d17 	ldw	r8,244(sp)
    36fc:	10045426 	beq	r2,zero,4850 <___vfprintf_internal_r+0x1da0>
    3700:	1405c83a 	sub	r2,r2,r16
    3704:	d8802e15 	stw	r2,184(sp)
    3708:	1003cc16 	blt	r2,zero,463c <___vfprintf_internal_r+0x1b8c>
    370c:	df002783 	ldbu	fp,158(sp)
    3710:	d8802a15 	stw	r2,168(sp)
    3714:	dcc02d15 	stw	r19,180(sp)
    3718:	d8002915 	stw	zero,164(sp)
    371c:	d8003215 	stw	zero,200(sp)
    3720:	003eb006 	br	31e4 <__alt_data_end+0xff0031e4>
    3724:	18c03fcc 	andi	r3,r3,255
    3728:	183f9b26 	beq	r3,zero,3598 <__alt_data_end+0xff003598>
    372c:	d9c02785 	stb	r7,158(sp)
    3730:	003f9906 	br	3598 <__alt_data_end+0xff003598>
    3734:	18c03fcc 	andi	r3,r3,255
    3738:	1805551e 	bne	r3,zero,4c90 <___vfprintf_internal_r+0x21e0>
    373c:	01400074 	movhi	r5,1
    3740:	29443404 	addi	r5,r5,4304
    3744:	d9403915 	stw	r5,228(sp)
    3748:	9080080c 	andi	r2,r18,32
    374c:	103fae1e 	bne	r2,zero,3608 <__alt_data_end+0xff003608>
    3750:	9080040c 	andi	r2,r18,16
    3754:	1002de26 	beq	r2,zero,42d0 <___vfprintf_internal_r+0x1820>
    3758:	d8c02d17 	ldw	r3,180(sp)
    375c:	002d883a 	mov	r22,zero
    3760:	1cc00017 	ldw	r19,0(r3)
    3764:	18c00104 	addi	r3,r3,4
    3768:	d8c02d15 	stw	r3,180(sp)
    376c:	003fab06 	br	361c <__alt_data_end+0xff00361c>
    3770:	38803fcc 	andi	r2,r7,255
    3774:	1080201c 	xori	r2,r2,128
    3778:	10bfe004 	addi	r2,r2,-128
    377c:	1002d21e 	bne	r2,zero,42c8 <___vfprintf_internal_r+0x1818>
    3780:	00c00044 	movi	r3,1
    3784:	01c00804 	movi	r7,32
    3788:	ac400007 	ldb	r17,0(r21)
    378c:	003d2906 	br	2c34 <__alt_data_end+0xff002c34>
    3790:	94800054 	ori	r18,r18,1
    3794:	ac400007 	ldb	r17,0(r21)
    3798:	003d2606 	br	2c34 <__alt_data_end+0xff002c34>
    379c:	18c03fcc 	andi	r3,r3,255
    37a0:	183e0526 	beq	r3,zero,2fb8 <__alt_data_end+0xff002fb8>
    37a4:	d9c02785 	stb	r7,158(sp)
    37a8:	003e0306 	br	2fb8 <__alt_data_end+0xff002fb8>
    37ac:	94801014 	ori	r18,r18,64
    37b0:	ac400007 	ldb	r17,0(r21)
    37b4:	003d1f06 	br	2c34 <__alt_data_end+0xff002c34>
    37b8:	ac400007 	ldb	r17,0(r21)
    37bc:	8a438726 	beq	r17,r9,45dc <___vfprintf_internal_r+0x1b2c>
    37c0:	94800414 	ori	r18,r18,16
    37c4:	003d1b06 	br	2c34 <__alt_data_end+0xff002c34>
    37c8:	18c03fcc 	andi	r3,r3,255
    37cc:	1805341e 	bne	r3,zero,4ca0 <___vfprintf_internal_r+0x21f0>
    37d0:	9080080c 	andi	r2,r18,32
    37d4:	1002cd26 	beq	r2,zero,430c <___vfprintf_internal_r+0x185c>
    37d8:	d9402d17 	ldw	r5,180(sp)
    37dc:	d9002f17 	ldw	r4,188(sp)
    37e0:	28800017 	ldw	r2,0(r5)
    37e4:	2007d7fa 	srai	r3,r4,31
    37e8:	29400104 	addi	r5,r5,4
    37ec:	d9402d15 	stw	r5,180(sp)
    37f0:	11000015 	stw	r4,0(r2)
    37f4:	10c00115 	stw	r3,4(r2)
    37f8:	003ce506 	br	2b90 <__alt_data_end+0xff002b90>
    37fc:	d8c02d17 	ldw	r3,180(sp)
    3800:	d9002d17 	ldw	r4,180(sp)
    3804:	d8002785 	stb	zero,158(sp)
    3808:	18800017 	ldw	r2,0(r3)
    380c:	21000104 	addi	r4,r4,4
    3810:	00c00044 	movi	r3,1
    3814:	d8c02a15 	stw	r3,168(sp)
    3818:	d8801405 	stb	r2,80(sp)
    381c:	d9002d15 	stw	r4,180(sp)
    3820:	d8c02e15 	stw	r3,184(sp)
    3824:	d8002915 	stw	zero,164(sp)
    3828:	d8003215 	stw	zero,200(sp)
    382c:	dc001404 	addi	r16,sp,80
    3830:	0039883a 	mov	fp,zero
    3834:	003e7206 	br	3200 <__alt_data_end+0xff003200>
    3838:	01000074 	movhi	r4,1
    383c:	21043404 	addi	r4,r4,4304
    3840:	0039883a 	mov	fp,zero
    3844:	d9003915 	stw	r4,228(sp)
    3848:	04401e04 	movi	r17,120
    384c:	003f8206 	br	3658 <__alt_data_end+0xff003658>
    3850:	18c03fcc 	andi	r3,r3,255
    3854:	1805061e 	bne	r3,zero,4c70 <___vfprintf_internal_r+0x21c0>
    3858:	883d9126 	beq	r17,zero,2ea0 <__alt_data_end+0xff002ea0>
    385c:	00c00044 	movi	r3,1
    3860:	d8c02a15 	stw	r3,168(sp)
    3864:	dc401405 	stb	r17,80(sp)
    3868:	d8002785 	stb	zero,158(sp)
    386c:	003fec06 	br	3820 <__alt_data_end+0xff003820>
    3870:	01400074 	movhi	r5,1
    3874:	29443404 	addi	r5,r5,4304
    3878:	d9403915 	stw	r5,228(sp)
    387c:	d8c02d15 	stw	r3,180(sp)
    3880:	1025883a 	mov	r18,r2
    3884:	04401e04 	movi	r17,120
    3888:	9d84b03a 	or	r2,r19,r22
    388c:	1000fc1e 	bne	r2,zero,3c80 <___vfprintf_internal_r+0x11d0>
    3890:	0039883a 	mov	fp,zero
    3894:	00800084 	movi	r2,2
    3898:	10803fcc 	andi	r2,r2,255
    389c:	00c00044 	movi	r3,1
    38a0:	10c20f26 	beq	r2,r3,40e0 <___vfprintf_internal_r+0x1630>
    38a4:	00c00084 	movi	r3,2
    38a8:	10fd6326 	beq	r2,r3,2e38 <__alt_data_end+0xff002e38>
    38ac:	003e2d06 	br	3164 <__alt_data_end+0xff003164>
    38b0:	d8c02017 	ldw	r3,128(sp)
    38b4:	003e9306 	br	3304 <__alt_data_end+0xff003304>
    38b8:	00801944 	movi	r2,101
    38bc:	14407e0e 	bge	r2,r17,3ab8 <___vfprintf_internal_r+0x1008>
    38c0:	d9003617 	ldw	r4,216(sp)
    38c4:	d9403817 	ldw	r5,224(sp)
    38c8:	000d883a 	mov	r6,zero
    38cc:	000f883a 	mov	r7,zero
    38d0:	d8c03c15 	stw	r3,240(sp)
    38d4:	da003d15 	stw	r8,244(sp)
    38d8:	000ca280 	call	ca28 <__eqdf2>
    38dc:	d8c03c17 	ldw	r3,240(sp)
    38e0:	da003d17 	ldw	r8,244(sp)
    38e4:	1000f71e 	bne	r2,zero,3cc4 <___vfprintf_internal_r+0x1214>
    38e8:	d8801f17 	ldw	r2,124(sp)
    38ec:	01000074 	movhi	r4,1
    38f0:	21043b04 	addi	r4,r4,4332
    38f4:	18c00044 	addi	r3,r3,1
    38f8:	10800044 	addi	r2,r2,1
    38fc:	41000015 	stw	r4,0(r8)
    3900:	01000044 	movi	r4,1
    3904:	41000115 	stw	r4,4(r8)
    3908:	d8c02015 	stw	r3,128(sp)
    390c:	d8801f15 	stw	r2,124(sp)
    3910:	010001c4 	movi	r4,7
    3914:	2082b816 	blt	r4,r2,43f8 <___vfprintf_internal_r+0x1948>
    3918:	42000204 	addi	r8,r8,8
    391c:	d8802617 	ldw	r2,152(sp)
    3920:	d9403317 	ldw	r5,204(sp)
    3924:	11400216 	blt	r2,r5,3930 <___vfprintf_internal_r+0xe80>
    3928:	9080004c 	andi	r2,r18,1
    392c:	103ed526 	beq	r2,zero,3484 <__alt_data_end+0xff003484>
    3930:	d8803717 	ldw	r2,220(sp)
    3934:	d9003417 	ldw	r4,208(sp)
    3938:	d9403717 	ldw	r5,220(sp)
    393c:	1887883a 	add	r3,r3,r2
    3940:	d8801f17 	ldw	r2,124(sp)
    3944:	41000015 	stw	r4,0(r8)
    3948:	41400115 	stw	r5,4(r8)
    394c:	10800044 	addi	r2,r2,1
    3950:	d8c02015 	stw	r3,128(sp)
    3954:	d8801f15 	stw	r2,124(sp)
    3958:	010001c4 	movi	r4,7
    395c:	20832916 	blt	r4,r2,4604 <___vfprintf_internal_r+0x1b54>
    3960:	42000204 	addi	r8,r8,8
    3964:	d8803317 	ldw	r2,204(sp)
    3968:	143fffc4 	addi	r16,r2,-1
    396c:	043ec50e 	bge	zero,r16,3484 <__alt_data_end+0xff003484>
    3970:	04400404 	movi	r17,16
    3974:	d8801f17 	ldw	r2,124(sp)
    3978:	8c00880e 	bge	r17,r16,3b9c <___vfprintf_internal_r+0x10ec>
    397c:	01400074 	movhi	r5,1
    3980:	29443b84 	addi	r5,r5,4334
    3984:	d9402b15 	stw	r5,172(sp)
    3988:	058001c4 	movi	r22,7
    398c:	dcc02c17 	ldw	r19,176(sp)
    3990:	00000306 	br	39a0 <___vfprintf_internal_r+0xef0>
    3994:	42000204 	addi	r8,r8,8
    3998:	843ffc04 	addi	r16,r16,-16
    399c:	8c00820e 	bge	r17,r16,3ba8 <___vfprintf_internal_r+0x10f8>
    39a0:	18c00404 	addi	r3,r3,16
    39a4:	10800044 	addi	r2,r2,1
    39a8:	45000015 	stw	r20,0(r8)
    39ac:	44400115 	stw	r17,4(r8)
    39b0:	d8c02015 	stw	r3,128(sp)
    39b4:	d8801f15 	stw	r2,124(sp)
    39b8:	b0bff60e 	bge	r22,r2,3994 <__alt_data_end+0xff003994>
    39bc:	d9801e04 	addi	r6,sp,120
    39c0:	b80b883a 	mov	r5,r23
    39c4:	9809883a 	mov	r4,r19
    39c8:	000984c0 	call	984c <__sprint_r>
    39cc:	103d3a1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    39d0:	d8c02017 	ldw	r3,128(sp)
    39d4:	d8801f17 	ldw	r2,124(sp)
    39d8:	da000404 	addi	r8,sp,16
    39dc:	003fee06 	br	3998 <__alt_data_end+0xff003998>
    39e0:	d9403117 	ldw	r5,196(sp)
    39e4:	d8802a17 	ldw	r2,168(sp)
    39e8:	28adc83a 	sub	r22,r5,r2
    39ec:	05be630e 	bge	zero,r22,337c <__alt_data_end+0xff00337c>
    39f0:	07000404 	movi	fp,16
    39f4:	d8801f17 	ldw	r2,124(sp)
    39f8:	e5838f0e 	bge	fp,r22,4838 <___vfprintf_internal_r+0x1d88>
    39fc:	01400074 	movhi	r5,1
    3a00:	29443b84 	addi	r5,r5,4334
    3a04:	dc403015 	stw	r17,192(sp)
    3a08:	d9402b15 	stw	r5,172(sp)
    3a0c:	b023883a 	mov	r17,r22
    3a10:	04c001c4 	movi	r19,7
    3a14:	a82d883a 	mov	r22,r21
    3a18:	902b883a 	mov	r21,r18
    3a1c:	8025883a 	mov	r18,r16
    3a20:	dc002c17 	ldw	r16,176(sp)
    3a24:	00000306 	br	3a34 <___vfprintf_internal_r+0xf84>
    3a28:	8c7ffc04 	addi	r17,r17,-16
    3a2c:	42000204 	addi	r8,r8,8
    3a30:	e440110e 	bge	fp,r17,3a78 <___vfprintf_internal_r+0xfc8>
    3a34:	18c00404 	addi	r3,r3,16
    3a38:	10800044 	addi	r2,r2,1
    3a3c:	45000015 	stw	r20,0(r8)
    3a40:	47000115 	stw	fp,4(r8)
    3a44:	d8c02015 	stw	r3,128(sp)
    3a48:	d8801f15 	stw	r2,124(sp)
    3a4c:	98bff60e 	bge	r19,r2,3a28 <__alt_data_end+0xff003a28>
    3a50:	d9801e04 	addi	r6,sp,120
    3a54:	b80b883a 	mov	r5,r23
    3a58:	8009883a 	mov	r4,r16
    3a5c:	000984c0 	call	984c <__sprint_r>
    3a60:	103d151e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3a64:	8c7ffc04 	addi	r17,r17,-16
    3a68:	d8c02017 	ldw	r3,128(sp)
    3a6c:	d8801f17 	ldw	r2,124(sp)
    3a70:	da000404 	addi	r8,sp,16
    3a74:	e47fef16 	blt	fp,r17,3a34 <__alt_data_end+0xff003a34>
    3a78:	9021883a 	mov	r16,r18
    3a7c:	a825883a 	mov	r18,r21
    3a80:	b02b883a 	mov	r21,r22
    3a84:	882d883a 	mov	r22,r17
    3a88:	dc403017 	ldw	r17,192(sp)
    3a8c:	d9002b17 	ldw	r4,172(sp)
    3a90:	1d87883a 	add	r3,r3,r22
    3a94:	10800044 	addi	r2,r2,1
    3a98:	41000015 	stw	r4,0(r8)
    3a9c:	45800115 	stw	r22,4(r8)
    3aa0:	d8c02015 	stw	r3,128(sp)
    3aa4:	d8801f15 	stw	r2,124(sp)
    3aa8:	010001c4 	movi	r4,7
    3aac:	20818e16 	blt	r4,r2,40e8 <___vfprintf_internal_r+0x1638>
    3ab0:	42000204 	addi	r8,r8,8
    3ab4:	003e3106 	br	337c <__alt_data_end+0xff00337c>
    3ab8:	d9403317 	ldw	r5,204(sp)
    3abc:	00800044 	movi	r2,1
    3ac0:	18c00044 	addi	r3,r3,1
    3ac4:	1141530e 	bge	r2,r5,4014 <___vfprintf_internal_r+0x1564>
    3ac8:	dc401f17 	ldw	r17,124(sp)
    3acc:	00800044 	movi	r2,1
    3ad0:	40800115 	stw	r2,4(r8)
    3ad4:	8c400044 	addi	r17,r17,1
    3ad8:	44000015 	stw	r16,0(r8)
    3adc:	d8c02015 	stw	r3,128(sp)
    3ae0:	dc401f15 	stw	r17,124(sp)
    3ae4:	008001c4 	movi	r2,7
    3ae8:	14416b16 	blt	r2,r17,4098 <___vfprintf_internal_r+0x15e8>
    3aec:	42000204 	addi	r8,r8,8
    3af0:	d8803717 	ldw	r2,220(sp)
    3af4:	d9003417 	ldw	r4,208(sp)
    3af8:	8c400044 	addi	r17,r17,1
    3afc:	10c7883a 	add	r3,r2,r3
    3b00:	40800115 	stw	r2,4(r8)
    3b04:	41000015 	stw	r4,0(r8)
    3b08:	d8c02015 	stw	r3,128(sp)
    3b0c:	dc401f15 	stw	r17,124(sp)
    3b10:	008001c4 	movi	r2,7
    3b14:	14416916 	blt	r2,r17,40bc <___vfprintf_internal_r+0x160c>
    3b18:	45800204 	addi	r22,r8,8
    3b1c:	d9003617 	ldw	r4,216(sp)
    3b20:	d9403817 	ldw	r5,224(sp)
    3b24:	000d883a 	mov	r6,zero
    3b28:	000f883a 	mov	r7,zero
    3b2c:	d8c03c15 	stw	r3,240(sp)
    3b30:	000ca280 	call	ca28 <__eqdf2>
    3b34:	d8c03c17 	ldw	r3,240(sp)
    3b38:	1000bc26 	beq	r2,zero,3e2c <___vfprintf_internal_r+0x137c>
    3b3c:	d9403317 	ldw	r5,204(sp)
    3b40:	84000044 	addi	r16,r16,1
    3b44:	8c400044 	addi	r17,r17,1
    3b48:	28bfffc4 	addi	r2,r5,-1
    3b4c:	1887883a 	add	r3,r3,r2
    3b50:	b0800115 	stw	r2,4(r22)
    3b54:	b4000015 	stw	r16,0(r22)
    3b58:	d8c02015 	stw	r3,128(sp)
    3b5c:	dc401f15 	stw	r17,124(sp)
    3b60:	008001c4 	movi	r2,7
    3b64:	14414316 	blt	r2,r17,4074 <___vfprintf_internal_r+0x15c4>
    3b68:	b5800204 	addi	r22,r22,8
    3b6c:	d9003a17 	ldw	r4,232(sp)
    3b70:	df0022c4 	addi	fp,sp,139
    3b74:	8c400044 	addi	r17,r17,1
    3b78:	20c7883a 	add	r3,r4,r3
    3b7c:	b7000015 	stw	fp,0(r22)
    3b80:	b1000115 	stw	r4,4(r22)
    3b84:	d8c02015 	stw	r3,128(sp)
    3b88:	dc401f15 	stw	r17,124(sp)
    3b8c:	008001c4 	movi	r2,7
    3b90:	14400e16 	blt	r2,r17,3bcc <___vfprintf_internal_r+0x111c>
    3b94:	b2000204 	addi	r8,r22,8
    3b98:	003e3a06 	br	3484 <__alt_data_end+0xff003484>
    3b9c:	01000074 	movhi	r4,1
    3ba0:	21043b84 	addi	r4,r4,4334
    3ba4:	d9002b15 	stw	r4,172(sp)
    3ba8:	d9002b17 	ldw	r4,172(sp)
    3bac:	1c07883a 	add	r3,r3,r16
    3bb0:	44000115 	stw	r16,4(r8)
    3bb4:	41000015 	stw	r4,0(r8)
    3bb8:	10800044 	addi	r2,r2,1
    3bbc:	d8c02015 	stw	r3,128(sp)
    3bc0:	d8801f15 	stw	r2,124(sp)
    3bc4:	010001c4 	movi	r4,7
    3bc8:	20be2d0e 	bge	r4,r2,3480 <__alt_data_end+0xff003480>
    3bcc:	d9002c17 	ldw	r4,176(sp)
    3bd0:	d9801e04 	addi	r6,sp,120
    3bd4:	b80b883a 	mov	r5,r23
    3bd8:	000984c0 	call	984c <__sprint_r>
    3bdc:	103cb61e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3be0:	d8c02017 	ldw	r3,128(sp)
    3be4:	da000404 	addi	r8,sp,16
    3be8:	003e2606 	br	3484 <__alt_data_end+0xff003484>
    3bec:	d9002c17 	ldw	r4,176(sp)
    3bf0:	d9801e04 	addi	r6,sp,120
    3bf4:	b80b883a 	mov	r5,r23
    3bf8:	000984c0 	call	984c <__sprint_r>
    3bfc:	103e5d26 	beq	r2,zero,3574 <__alt_data_end+0xff003574>
    3c00:	003cad06 	br	2eb8 <__alt_data_end+0xff002eb8>
    3c04:	d9002c17 	ldw	r4,176(sp)
    3c08:	d9801e04 	addi	r6,sp,120
    3c0c:	b80b883a 	mov	r5,r23
    3c10:	000984c0 	call	984c <__sprint_r>
    3c14:	103ca81e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3c18:	d8c02017 	ldw	r3,128(sp)
    3c1c:	da000404 	addi	r8,sp,16
    3c20:	003e0b06 	br	3450 <__alt_data_end+0xff003450>
    3c24:	d9002c17 	ldw	r4,176(sp)
    3c28:	d9801e04 	addi	r6,sp,120
    3c2c:	b80b883a 	mov	r5,r23
    3c30:	000984c0 	call	984c <__sprint_r>
    3c34:	103ca01e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3c38:	d8c02017 	ldw	r3,128(sp)
    3c3c:	da000404 	addi	r8,sp,16
    3c40:	003dbd06 	br	3338 <__alt_data_end+0xff003338>
    3c44:	d9002c17 	ldw	r4,176(sp)
    3c48:	d9801e04 	addi	r6,sp,120
    3c4c:	b80b883a 	mov	r5,r23
    3c50:	000984c0 	call	984c <__sprint_r>
    3c54:	103c981e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3c58:	d8c02017 	ldw	r3,128(sp)
    3c5c:	da000404 	addi	r8,sp,16
    3c60:	003dc306 	br	3370 <__alt_data_end+0xff003370>
    3c64:	d8802917 	ldw	r2,164(sp)
    3c68:	d8002785 	stb	zero,158(sp)
    3c6c:	103f0616 	blt	r2,zero,3888 <__alt_data_end+0xff003888>
    3c70:	00ffdfc4 	movi	r3,-129
    3c74:	9d84b03a 	or	r2,r19,r22
    3c78:	90e4703a 	and	r18,r18,r3
    3c7c:	103c6b26 	beq	r2,zero,2e2c <__alt_data_end+0xff002e2c>
    3c80:	0039883a 	mov	fp,zero
    3c84:	003e7406 	br	3658 <__alt_data_end+0xff003658>
    3c88:	9080040c 	andi	r2,r18,16
    3c8c:	1001b326 	beq	r2,zero,435c <___vfprintf_internal_r+0x18ac>
    3c90:	d9002d17 	ldw	r4,180(sp)
    3c94:	d9402917 	ldw	r5,164(sp)
    3c98:	d8002785 	stb	zero,158(sp)
    3c9c:	20800104 	addi	r2,r4,4
    3ca0:	24c00017 	ldw	r19,0(r4)
    3ca4:	002d883a 	mov	r22,zero
    3ca8:	2801b516 	blt	r5,zero,4380 <___vfprintf_internal_r+0x18d0>
    3cac:	00ffdfc4 	movi	r3,-129
    3cb0:	d8802d15 	stw	r2,180(sp)
    3cb4:	90e4703a 	and	r18,r18,r3
    3cb8:	983d2726 	beq	r19,zero,3158 <__alt_data_end+0xff003158>
    3cbc:	0039883a 	mov	fp,zero
    3cc0:	003d2a06 	br	316c <__alt_data_end+0xff00316c>
    3cc4:	dc402617 	ldw	r17,152(sp)
    3cc8:	0441d30e 	bge	zero,r17,4418 <___vfprintf_internal_r+0x1968>
    3ccc:	dc403217 	ldw	r17,200(sp)
    3cd0:	d8803317 	ldw	r2,204(sp)
    3cd4:	1440010e 	bge	r2,r17,3cdc <___vfprintf_internal_r+0x122c>
    3cd8:	1023883a 	mov	r17,r2
    3cdc:	04400a0e 	bge	zero,r17,3d08 <___vfprintf_internal_r+0x1258>
    3ce0:	d8801f17 	ldw	r2,124(sp)
    3ce4:	1c47883a 	add	r3,r3,r17
    3ce8:	44000015 	stw	r16,0(r8)
    3cec:	10800044 	addi	r2,r2,1
    3cf0:	44400115 	stw	r17,4(r8)
    3cf4:	d8c02015 	stw	r3,128(sp)
    3cf8:	d8801f15 	stw	r2,124(sp)
    3cfc:	010001c4 	movi	r4,7
    3d00:	20826516 	blt	r4,r2,4698 <___vfprintf_internal_r+0x1be8>
    3d04:	42000204 	addi	r8,r8,8
    3d08:	88026116 	blt	r17,zero,4690 <___vfprintf_internal_r+0x1be0>
    3d0c:	d9003217 	ldw	r4,200(sp)
    3d10:	2463c83a 	sub	r17,r4,r17
    3d14:	04407b0e 	bge	zero,r17,3f04 <___vfprintf_internal_r+0x1454>
    3d18:	05800404 	movi	r22,16
    3d1c:	d8801f17 	ldw	r2,124(sp)
    3d20:	b4419d0e 	bge	r22,r17,4398 <___vfprintf_internal_r+0x18e8>
    3d24:	01000074 	movhi	r4,1
    3d28:	21043b84 	addi	r4,r4,4334
    3d2c:	d9002b15 	stw	r4,172(sp)
    3d30:	070001c4 	movi	fp,7
    3d34:	dcc02c17 	ldw	r19,176(sp)
    3d38:	00000306 	br	3d48 <___vfprintf_internal_r+0x1298>
    3d3c:	42000204 	addi	r8,r8,8
    3d40:	8c7ffc04 	addi	r17,r17,-16
    3d44:	b441970e 	bge	r22,r17,43a4 <___vfprintf_internal_r+0x18f4>
    3d48:	18c00404 	addi	r3,r3,16
    3d4c:	10800044 	addi	r2,r2,1
    3d50:	45000015 	stw	r20,0(r8)
    3d54:	45800115 	stw	r22,4(r8)
    3d58:	d8c02015 	stw	r3,128(sp)
    3d5c:	d8801f15 	stw	r2,124(sp)
    3d60:	e0bff60e 	bge	fp,r2,3d3c <__alt_data_end+0xff003d3c>
    3d64:	d9801e04 	addi	r6,sp,120
    3d68:	b80b883a 	mov	r5,r23
    3d6c:	9809883a 	mov	r4,r19
    3d70:	000984c0 	call	984c <__sprint_r>
    3d74:	103c501e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3d78:	d8c02017 	ldw	r3,128(sp)
    3d7c:	d8801f17 	ldw	r2,124(sp)
    3d80:	da000404 	addi	r8,sp,16
    3d84:	003fee06 	br	3d40 <__alt_data_end+0xff003d40>
    3d88:	d9002c17 	ldw	r4,176(sp)
    3d8c:	d9801e04 	addi	r6,sp,120
    3d90:	b80b883a 	mov	r5,r23
    3d94:	000984c0 	call	984c <__sprint_r>
    3d98:	103c471e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3d9c:	d8c02017 	ldw	r3,128(sp)
    3da0:	df002787 	ldb	fp,158(sp)
    3da4:	da000404 	addi	r8,sp,16
    3da8:	003d5606 	br	3304 <__alt_data_end+0xff003304>
    3dac:	9080040c 	andi	r2,r18,16
    3db0:	10016126 	beq	r2,zero,4338 <___vfprintf_internal_r+0x1888>
    3db4:	d8802d17 	ldw	r2,180(sp)
    3db8:	14c00017 	ldw	r19,0(r2)
    3dbc:	10800104 	addi	r2,r2,4
    3dc0:	d8802d15 	stw	r2,180(sp)
    3dc4:	982dd7fa 	srai	r22,r19,31
    3dc8:	b005883a 	mov	r2,r22
    3dcc:	003c8206 	br	2fd8 <__alt_data_end+0xff002fd8>
    3dd0:	9080040c 	andi	r2,r18,16
    3dd4:	10003526 	beq	r2,zero,3eac <___vfprintf_internal_r+0x13fc>
    3dd8:	d9402d17 	ldw	r5,180(sp)
    3ddc:	d8c02917 	ldw	r3,164(sp)
    3de0:	d8002785 	stb	zero,158(sp)
    3de4:	28800104 	addi	r2,r5,4
    3de8:	2cc00017 	ldw	r19,0(r5)
    3dec:	002d883a 	mov	r22,zero
    3df0:	18003716 	blt	r3,zero,3ed0 <___vfprintf_internal_r+0x1420>
    3df4:	00ffdfc4 	movi	r3,-129
    3df8:	d8802d15 	stw	r2,180(sp)
    3dfc:	90e4703a 	and	r18,r18,r3
    3e00:	0039883a 	mov	fp,zero
    3e04:	983df326 	beq	r19,zero,35d4 <__alt_data_end+0xff0035d4>
    3e08:	00800244 	movi	r2,9
    3e0c:	14fc7b36 	bltu	r2,r19,2ffc <__alt_data_end+0xff002ffc>
    3e10:	d8c02817 	ldw	r3,160(sp)
    3e14:	dc001dc4 	addi	r16,sp,119
    3e18:	9cc00c04 	addi	r19,r19,48
    3e1c:	1c07c83a 	sub	r3,r3,r16
    3e20:	dcc01dc5 	stb	r19,119(sp)
    3e24:	d8c02e15 	stw	r3,184(sp)
    3e28:	003ce806 	br	31cc <__alt_data_end+0xff0031cc>
    3e2c:	d8803317 	ldw	r2,204(sp)
    3e30:	143fffc4 	addi	r16,r2,-1
    3e34:	043f4d0e 	bge	zero,r16,3b6c <__alt_data_end+0xff003b6c>
    3e38:	07000404 	movi	fp,16
    3e3c:	e400810e 	bge	fp,r16,4044 <___vfprintf_internal_r+0x1594>
    3e40:	01400074 	movhi	r5,1
    3e44:	29443b84 	addi	r5,r5,4334
    3e48:	d9402b15 	stw	r5,172(sp)
    3e4c:	01c001c4 	movi	r7,7
    3e50:	dcc02c17 	ldw	r19,176(sp)
    3e54:	00000306 	br	3e64 <___vfprintf_internal_r+0x13b4>
    3e58:	b5800204 	addi	r22,r22,8
    3e5c:	843ffc04 	addi	r16,r16,-16
    3e60:	e4007b0e 	bge	fp,r16,4050 <___vfprintf_internal_r+0x15a0>
    3e64:	18c00404 	addi	r3,r3,16
    3e68:	8c400044 	addi	r17,r17,1
    3e6c:	b5000015 	stw	r20,0(r22)
    3e70:	b7000115 	stw	fp,4(r22)
    3e74:	d8c02015 	stw	r3,128(sp)
    3e78:	dc401f15 	stw	r17,124(sp)
    3e7c:	3c7ff60e 	bge	r7,r17,3e58 <__alt_data_end+0xff003e58>
    3e80:	d9801e04 	addi	r6,sp,120
    3e84:	b80b883a 	mov	r5,r23
    3e88:	9809883a 	mov	r4,r19
    3e8c:	d9c03c15 	stw	r7,240(sp)
    3e90:	000984c0 	call	984c <__sprint_r>
    3e94:	d9c03c17 	ldw	r7,240(sp)
    3e98:	103c071e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3e9c:	d8c02017 	ldw	r3,128(sp)
    3ea0:	dc401f17 	ldw	r17,124(sp)
    3ea4:	dd800404 	addi	r22,sp,16
    3ea8:	003fec06 	br	3e5c <__alt_data_end+0xff003e5c>
    3eac:	9080100c 	andi	r2,r18,64
    3eb0:	d8002785 	stb	zero,158(sp)
    3eb4:	10010e26 	beq	r2,zero,42f0 <___vfprintf_internal_r+0x1840>
    3eb8:	d9002d17 	ldw	r4,180(sp)
    3ebc:	d9402917 	ldw	r5,164(sp)
    3ec0:	002d883a 	mov	r22,zero
    3ec4:	20800104 	addi	r2,r4,4
    3ec8:	24c0000b 	ldhu	r19,0(r4)
    3ecc:	283fc90e 	bge	r5,zero,3df4 <__alt_data_end+0xff003df4>
    3ed0:	d8802d15 	stw	r2,180(sp)
    3ed4:	0039883a 	mov	fp,zero
    3ed8:	9d84b03a 	or	r2,r19,r22
    3edc:	103c461e 	bne	r2,zero,2ff8 <__alt_data_end+0xff002ff8>
    3ee0:	00800044 	movi	r2,1
    3ee4:	003e6c06 	br	3898 <__alt_data_end+0xff003898>
    3ee8:	d9002c17 	ldw	r4,176(sp)
    3eec:	d9801e04 	addi	r6,sp,120
    3ef0:	b80b883a 	mov	r5,r23
    3ef4:	000984c0 	call	984c <__sprint_r>
    3ef8:	103bef1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    3efc:	d8c02017 	ldw	r3,128(sp)
    3f00:	da000404 	addi	r8,sp,16
    3f04:	d9003217 	ldw	r4,200(sp)
    3f08:	d8802617 	ldw	r2,152(sp)
    3f0c:	d9403317 	ldw	r5,204(sp)
    3f10:	8123883a 	add	r17,r16,r4
    3f14:	11400216 	blt	r2,r5,3f20 <___vfprintf_internal_r+0x1470>
    3f18:	9100004c 	andi	r4,r18,1
    3f1c:	20000d26 	beq	r4,zero,3f54 <___vfprintf_internal_r+0x14a4>
    3f20:	d9003717 	ldw	r4,220(sp)
    3f24:	d9403417 	ldw	r5,208(sp)
    3f28:	1907883a 	add	r3,r3,r4
    3f2c:	d9001f17 	ldw	r4,124(sp)
    3f30:	41400015 	stw	r5,0(r8)
    3f34:	d9403717 	ldw	r5,220(sp)
    3f38:	21000044 	addi	r4,r4,1
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	41400115 	stw	r5,4(r8)
    3f44:	d9001f15 	stw	r4,124(sp)
    3f48:	014001c4 	movi	r5,7
    3f4c:	2901e816 	blt	r5,r4,46f0 <___vfprintf_internal_r+0x1c40>
    3f50:	42000204 	addi	r8,r8,8
    3f54:	d9003317 	ldw	r4,204(sp)
    3f58:	8121883a 	add	r16,r16,r4
    3f5c:	2085c83a 	sub	r2,r4,r2
    3f60:	8461c83a 	sub	r16,r16,r17
    3f64:	1400010e 	bge	r2,r16,3f6c <___vfprintf_internal_r+0x14bc>
    3f68:	1021883a 	mov	r16,r2
    3f6c:	04000a0e 	bge	zero,r16,3f98 <___vfprintf_internal_r+0x14e8>
    3f70:	d9001f17 	ldw	r4,124(sp)
    3f74:	1c07883a 	add	r3,r3,r16
    3f78:	44400015 	stw	r17,0(r8)
    3f7c:	21000044 	addi	r4,r4,1
    3f80:	44000115 	stw	r16,4(r8)
    3f84:	d8c02015 	stw	r3,128(sp)
    3f88:	d9001f15 	stw	r4,124(sp)
    3f8c:	014001c4 	movi	r5,7
    3f90:	2901fb16 	blt	r5,r4,4780 <___vfprintf_internal_r+0x1cd0>
    3f94:	42000204 	addi	r8,r8,8
    3f98:	8001f716 	blt	r16,zero,4778 <___vfprintf_internal_r+0x1cc8>
    3f9c:	1421c83a 	sub	r16,r2,r16
    3fa0:	043d380e 	bge	zero,r16,3484 <__alt_data_end+0xff003484>
    3fa4:	04400404 	movi	r17,16
    3fa8:	d8801f17 	ldw	r2,124(sp)
    3fac:	8c3efb0e 	bge	r17,r16,3b9c <__alt_data_end+0xff003b9c>
    3fb0:	01400074 	movhi	r5,1
    3fb4:	29443b84 	addi	r5,r5,4334
    3fb8:	d9402b15 	stw	r5,172(sp)
    3fbc:	058001c4 	movi	r22,7
    3fc0:	dcc02c17 	ldw	r19,176(sp)
    3fc4:	00000306 	br	3fd4 <___vfprintf_internal_r+0x1524>
    3fc8:	42000204 	addi	r8,r8,8
    3fcc:	843ffc04 	addi	r16,r16,-16
    3fd0:	8c3ef50e 	bge	r17,r16,3ba8 <__alt_data_end+0xff003ba8>
    3fd4:	18c00404 	addi	r3,r3,16
    3fd8:	10800044 	addi	r2,r2,1
    3fdc:	45000015 	stw	r20,0(r8)
    3fe0:	44400115 	stw	r17,4(r8)
    3fe4:	d8c02015 	stw	r3,128(sp)
    3fe8:	d8801f15 	stw	r2,124(sp)
    3fec:	b0bff60e 	bge	r22,r2,3fc8 <__alt_data_end+0xff003fc8>
    3ff0:	d9801e04 	addi	r6,sp,120
    3ff4:	b80b883a 	mov	r5,r23
    3ff8:	9809883a 	mov	r4,r19
    3ffc:	000984c0 	call	984c <__sprint_r>
    4000:	103bad1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4004:	d8c02017 	ldw	r3,128(sp)
    4008:	d8801f17 	ldw	r2,124(sp)
    400c:	da000404 	addi	r8,sp,16
    4010:	003fee06 	br	3fcc <__alt_data_end+0xff003fcc>
    4014:	9088703a 	and	r4,r18,r2
    4018:	203eab1e 	bne	r4,zero,3ac8 <__alt_data_end+0xff003ac8>
    401c:	dc401f17 	ldw	r17,124(sp)
    4020:	40800115 	stw	r2,4(r8)
    4024:	44000015 	stw	r16,0(r8)
    4028:	8c400044 	addi	r17,r17,1
    402c:	d8c02015 	stw	r3,128(sp)
    4030:	dc401f15 	stw	r17,124(sp)
    4034:	008001c4 	movi	r2,7
    4038:	14400e16 	blt	r2,r17,4074 <___vfprintf_internal_r+0x15c4>
    403c:	45800204 	addi	r22,r8,8
    4040:	003eca06 	br	3b6c <__alt_data_end+0xff003b6c>
    4044:	01000074 	movhi	r4,1
    4048:	21043b84 	addi	r4,r4,4334
    404c:	d9002b15 	stw	r4,172(sp)
    4050:	d8802b17 	ldw	r2,172(sp)
    4054:	1c07883a 	add	r3,r3,r16
    4058:	8c400044 	addi	r17,r17,1
    405c:	b0800015 	stw	r2,0(r22)
    4060:	b4000115 	stw	r16,4(r22)
    4064:	d8c02015 	stw	r3,128(sp)
    4068:	dc401f15 	stw	r17,124(sp)
    406c:	008001c4 	movi	r2,7
    4070:	147ebd0e 	bge	r2,r17,3b68 <__alt_data_end+0xff003b68>
    4074:	d9002c17 	ldw	r4,176(sp)
    4078:	d9801e04 	addi	r6,sp,120
    407c:	b80b883a 	mov	r5,r23
    4080:	000984c0 	call	984c <__sprint_r>
    4084:	103b8c1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4088:	d8c02017 	ldw	r3,128(sp)
    408c:	dc401f17 	ldw	r17,124(sp)
    4090:	dd800404 	addi	r22,sp,16
    4094:	003eb506 	br	3b6c <__alt_data_end+0xff003b6c>
    4098:	d9002c17 	ldw	r4,176(sp)
    409c:	d9801e04 	addi	r6,sp,120
    40a0:	b80b883a 	mov	r5,r23
    40a4:	000984c0 	call	984c <__sprint_r>
    40a8:	103b831e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    40ac:	d8c02017 	ldw	r3,128(sp)
    40b0:	dc401f17 	ldw	r17,124(sp)
    40b4:	da000404 	addi	r8,sp,16
    40b8:	003e8d06 	br	3af0 <__alt_data_end+0xff003af0>
    40bc:	d9002c17 	ldw	r4,176(sp)
    40c0:	d9801e04 	addi	r6,sp,120
    40c4:	b80b883a 	mov	r5,r23
    40c8:	000984c0 	call	984c <__sprint_r>
    40cc:	103b7a1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    40d0:	d8c02017 	ldw	r3,128(sp)
    40d4:	dc401f17 	ldw	r17,124(sp)
    40d8:	dd800404 	addi	r22,sp,16
    40dc:	003e8f06 	br	3b1c <__alt_data_end+0xff003b1c>
    40e0:	0027883a 	mov	r19,zero
    40e4:	003f4a06 	br	3e10 <__alt_data_end+0xff003e10>
    40e8:	d9002c17 	ldw	r4,176(sp)
    40ec:	d9801e04 	addi	r6,sp,120
    40f0:	b80b883a 	mov	r5,r23
    40f4:	000984c0 	call	984c <__sprint_r>
    40f8:	103b6f1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    40fc:	d8c02017 	ldw	r3,128(sp)
    4100:	da000404 	addi	r8,sp,16
    4104:	003c9d06 	br	337c <__alt_data_end+0xff00337c>
    4108:	04e7c83a 	sub	r19,zero,r19
    410c:	9804c03a 	cmpne	r2,r19,zero
    4110:	05adc83a 	sub	r22,zero,r22
    4114:	b0adc83a 	sub	r22,r22,r2
    4118:	d8802917 	ldw	r2,164(sp)
    411c:	07000b44 	movi	fp,45
    4120:	df002785 	stb	fp,158(sp)
    4124:	10017b16 	blt	r2,zero,4714 <___vfprintf_internal_r+0x1c64>
    4128:	00bfdfc4 	movi	r2,-129
    412c:	90a4703a 	and	r18,r18,r2
    4130:	003bb106 	br	2ff8 <__alt_data_end+0xff002ff8>
    4134:	d9003617 	ldw	r4,216(sp)
    4138:	d9403817 	ldw	r5,224(sp)
    413c:	da003d15 	stw	r8,244(sp)
    4140:	00094c40 	call	94c4 <__fpclassifyd>
    4144:	da003d17 	ldw	r8,244(sp)
    4148:	1000f026 	beq	r2,zero,450c <___vfprintf_internal_r+0x1a5c>
    414c:	d9002917 	ldw	r4,164(sp)
    4150:	05bff7c4 	movi	r22,-33
    4154:	00bfffc4 	movi	r2,-1
    4158:	8dac703a 	and	r22,r17,r22
    415c:	20820026 	beq	r4,r2,4960 <___vfprintf_internal_r+0x1eb0>
    4160:	008011c4 	movi	r2,71
    4164:	b081f726 	beq	r22,r2,4944 <___vfprintf_internal_r+0x1e94>
    4168:	d9003817 	ldw	r4,224(sp)
    416c:	90c04014 	ori	r3,r18,256
    4170:	d8c02b15 	stw	r3,172(sp)
    4174:	20021516 	blt	r4,zero,49cc <___vfprintf_internal_r+0x1f1c>
    4178:	dcc03817 	ldw	r19,224(sp)
    417c:	d8002a05 	stb	zero,168(sp)
    4180:	00801984 	movi	r2,102
    4184:	8881f926 	beq	r17,r2,496c <___vfprintf_internal_r+0x1ebc>
    4188:	00801184 	movi	r2,70
    418c:	88821c26 	beq	r17,r2,4a00 <___vfprintf_internal_r+0x1f50>
    4190:	00801144 	movi	r2,69
    4194:	b081ef26 	beq	r22,r2,4954 <___vfprintf_internal_r+0x1ea4>
    4198:	d8c02917 	ldw	r3,164(sp)
    419c:	d8802104 	addi	r2,sp,132
    41a0:	d8800315 	stw	r2,12(sp)
    41a4:	d9403617 	ldw	r5,216(sp)
    41a8:	d8802504 	addi	r2,sp,148
    41ac:	d9002c17 	ldw	r4,176(sp)
    41b0:	d8800215 	stw	r2,8(sp)
    41b4:	d8802604 	addi	r2,sp,152
    41b8:	d8c00015 	stw	r3,0(sp)
    41bc:	d8800115 	stw	r2,4(sp)
    41c0:	01c00084 	movi	r7,2
    41c4:	980d883a 	mov	r6,r19
    41c8:	d8c03c15 	stw	r3,240(sp)
    41cc:	da003d15 	stw	r8,244(sp)
    41d0:	00050d40 	call	50d4 <_dtoa_r>
    41d4:	1021883a 	mov	r16,r2
    41d8:	008019c4 	movi	r2,103
    41dc:	d8c03c17 	ldw	r3,240(sp)
    41e0:	da003d17 	ldw	r8,244(sp)
    41e4:	88817126 	beq	r17,r2,47ac <___vfprintf_internal_r+0x1cfc>
    41e8:	008011c4 	movi	r2,71
    41ec:	88829226 	beq	r17,r2,4c38 <___vfprintf_internal_r+0x2188>
    41f0:	80f9883a 	add	fp,r16,r3
    41f4:	d9003617 	ldw	r4,216(sp)
    41f8:	000d883a 	mov	r6,zero
    41fc:	000f883a 	mov	r7,zero
    4200:	980b883a 	mov	r5,r19
    4204:	da003d15 	stw	r8,244(sp)
    4208:	000ca280 	call	ca28 <__eqdf2>
    420c:	da003d17 	ldw	r8,244(sp)
    4210:	10018d26 	beq	r2,zero,4848 <___vfprintf_internal_r+0x1d98>
    4214:	d8802117 	ldw	r2,132(sp)
    4218:	1700062e 	bgeu	r2,fp,4234 <___vfprintf_internal_r+0x1784>
    421c:	01000c04 	movi	r4,48
    4220:	10c00044 	addi	r3,r2,1
    4224:	d8c02115 	stw	r3,132(sp)
    4228:	11000005 	stb	r4,0(r2)
    422c:	d8802117 	ldw	r2,132(sp)
    4230:	173ffb36 	bltu	r2,fp,4220 <__alt_data_end+0xff004220>
    4234:	1405c83a 	sub	r2,r2,r16
    4238:	d8803315 	stw	r2,204(sp)
    423c:	008011c4 	movi	r2,71
    4240:	b0817626 	beq	r22,r2,481c <___vfprintf_internal_r+0x1d6c>
    4244:	00801944 	movi	r2,101
    4248:	1442810e 	bge	r2,r17,4c50 <___vfprintf_internal_r+0x21a0>
    424c:	d8c02617 	ldw	r3,152(sp)
    4250:	00801984 	movi	r2,102
    4254:	d8c03215 	stw	r3,200(sp)
    4258:	8881fe26 	beq	r17,r2,4a54 <___vfprintf_internal_r+0x1fa4>
    425c:	d8c03217 	ldw	r3,200(sp)
    4260:	d9003317 	ldw	r4,204(sp)
    4264:	1901dd16 	blt	r3,r4,49dc <___vfprintf_internal_r+0x1f2c>
    4268:	9480004c 	andi	r18,r18,1
    426c:	90022b1e 	bne	r18,zero,4b1c <___vfprintf_internal_r+0x206c>
    4270:	1805883a 	mov	r2,r3
    4274:	18028016 	blt	r3,zero,4c78 <___vfprintf_internal_r+0x21c8>
    4278:	d8c03217 	ldw	r3,200(sp)
    427c:	044019c4 	movi	r17,103
    4280:	d8c02e15 	stw	r3,184(sp)
    4284:	df002a07 	ldb	fp,168(sp)
    4288:	e001531e 	bne	fp,zero,47d8 <___vfprintf_internal_r+0x1d28>
    428c:	df002783 	ldbu	fp,158(sp)
    4290:	d8802a15 	stw	r2,168(sp)
    4294:	dc802b17 	ldw	r18,172(sp)
    4298:	d8002915 	stw	zero,164(sp)
    429c:	003bd106 	br	31e4 <__alt_data_end+0xff0031e4>
    42a0:	d8802d17 	ldw	r2,180(sp)
    42a4:	d8c02d17 	ldw	r3,180(sp)
    42a8:	d9002d17 	ldw	r4,180(sp)
    42ac:	10800017 	ldw	r2,0(r2)
    42b0:	18c00117 	ldw	r3,4(r3)
    42b4:	21000204 	addi	r4,r4,8
    42b8:	d8803615 	stw	r2,216(sp)
    42bc:	d8c03815 	stw	r3,224(sp)
    42c0:	d9002d15 	stw	r4,180(sp)
    42c4:	003b7506 	br	309c <__alt_data_end+0xff00309c>
    42c8:	ac400007 	ldb	r17,0(r21)
    42cc:	003a5906 	br	2c34 <__alt_data_end+0xff002c34>
    42d0:	9080100c 	andi	r2,r18,64
    42d4:	1000a826 	beq	r2,zero,4578 <___vfprintf_internal_r+0x1ac8>
    42d8:	d9002d17 	ldw	r4,180(sp)
    42dc:	002d883a 	mov	r22,zero
    42e0:	24c0000b 	ldhu	r19,0(r4)
    42e4:	21000104 	addi	r4,r4,4
    42e8:	d9002d15 	stw	r4,180(sp)
    42ec:	003ccb06 	br	361c <__alt_data_end+0xff00361c>
    42f0:	d8c02d17 	ldw	r3,180(sp)
    42f4:	d9002917 	ldw	r4,164(sp)
    42f8:	002d883a 	mov	r22,zero
    42fc:	18800104 	addi	r2,r3,4
    4300:	1cc00017 	ldw	r19,0(r3)
    4304:	203ebb0e 	bge	r4,zero,3df4 <__alt_data_end+0xff003df4>
    4308:	003ef106 	br	3ed0 <__alt_data_end+0xff003ed0>
    430c:	9080040c 	andi	r2,r18,16
    4310:	1000921e 	bne	r2,zero,455c <___vfprintf_internal_r+0x1aac>
    4314:	9480100c 	andi	r18,r18,64
    4318:	90013926 	beq	r18,zero,4800 <___vfprintf_internal_r+0x1d50>
    431c:	d9002d17 	ldw	r4,180(sp)
    4320:	d9402f17 	ldw	r5,188(sp)
    4324:	20800017 	ldw	r2,0(r4)
    4328:	21000104 	addi	r4,r4,4
    432c:	d9002d15 	stw	r4,180(sp)
    4330:	1140000d 	sth	r5,0(r2)
    4334:	003a1606 	br	2b90 <__alt_data_end+0xff002b90>
    4338:	9080100c 	andi	r2,r18,64
    433c:	10008026 	beq	r2,zero,4540 <___vfprintf_internal_r+0x1a90>
    4340:	d8c02d17 	ldw	r3,180(sp)
    4344:	1cc0000f 	ldh	r19,0(r3)
    4348:	18c00104 	addi	r3,r3,4
    434c:	d8c02d15 	stw	r3,180(sp)
    4350:	982dd7fa 	srai	r22,r19,31
    4354:	b005883a 	mov	r2,r22
    4358:	003b1f06 	br	2fd8 <__alt_data_end+0xff002fd8>
    435c:	9080100c 	andi	r2,r18,64
    4360:	d8002785 	stb	zero,158(sp)
    4364:	10008a1e 	bne	r2,zero,4590 <___vfprintf_internal_r+0x1ae0>
    4368:	d9402d17 	ldw	r5,180(sp)
    436c:	d8c02917 	ldw	r3,164(sp)
    4370:	002d883a 	mov	r22,zero
    4374:	28800104 	addi	r2,r5,4
    4378:	2cc00017 	ldw	r19,0(r5)
    437c:	183e4b0e 	bge	r3,zero,3cac <__alt_data_end+0xff003cac>
    4380:	9d86b03a 	or	r3,r19,r22
    4384:	d8802d15 	stw	r2,180(sp)
    4388:	183e4c1e 	bne	r3,zero,3cbc <__alt_data_end+0xff003cbc>
    438c:	0039883a 	mov	fp,zero
    4390:	0005883a 	mov	r2,zero
    4394:	003d4006 	br	3898 <__alt_data_end+0xff003898>
    4398:	01400074 	movhi	r5,1
    439c:	29443b84 	addi	r5,r5,4334
    43a0:	d9402b15 	stw	r5,172(sp)
    43a4:	d9402b17 	ldw	r5,172(sp)
    43a8:	1c47883a 	add	r3,r3,r17
    43ac:	10800044 	addi	r2,r2,1
    43b0:	41400015 	stw	r5,0(r8)
    43b4:	44400115 	stw	r17,4(r8)
    43b8:	d8c02015 	stw	r3,128(sp)
    43bc:	d8801f15 	stw	r2,124(sp)
    43c0:	010001c4 	movi	r4,7
    43c4:	20bec816 	blt	r4,r2,3ee8 <__alt_data_end+0xff003ee8>
    43c8:	42000204 	addi	r8,r8,8
    43cc:	003ecd06 	br	3f04 <__alt_data_end+0xff003f04>
    43d0:	d9002917 	ldw	r4,164(sp)
    43d4:	d8002785 	stb	zero,158(sp)
    43d8:	203d2d16 	blt	r4,zero,3890 <__alt_data_end+0xff003890>
    43dc:	00bfdfc4 	movi	r2,-129
    43e0:	90a4703a 	and	r18,r18,r2
    43e4:	003a9106 	br	2e2c <__alt_data_end+0xff002e2c>
    43e8:	01000074 	movhi	r4,1
    43ec:	21043b84 	addi	r4,r4,4334
    43f0:	d9002b15 	stw	r4,172(sp)
    43f4:	003c0c06 	br	3428 <__alt_data_end+0xff003428>
    43f8:	d9002c17 	ldw	r4,176(sp)
    43fc:	d9801e04 	addi	r6,sp,120
    4400:	b80b883a 	mov	r5,r23
    4404:	000984c0 	call	984c <__sprint_r>
    4408:	103aab1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    440c:	d8c02017 	ldw	r3,128(sp)
    4410:	da000404 	addi	r8,sp,16
    4414:	003d4106 	br	391c <__alt_data_end+0xff00391c>
    4418:	d8801f17 	ldw	r2,124(sp)
    441c:	01400074 	movhi	r5,1
    4420:	01000044 	movi	r4,1
    4424:	18c00044 	addi	r3,r3,1
    4428:	10800044 	addi	r2,r2,1
    442c:	29443b04 	addi	r5,r5,4332
    4430:	41000115 	stw	r4,4(r8)
    4434:	41400015 	stw	r5,0(r8)
    4438:	d8c02015 	stw	r3,128(sp)
    443c:	d8801f15 	stw	r2,124(sp)
    4440:	010001c4 	movi	r4,7
    4444:	20805c16 	blt	r4,r2,45b8 <___vfprintf_internal_r+0x1b08>
    4448:	42000204 	addi	r8,r8,8
    444c:	8800041e 	bne	r17,zero,4460 <___vfprintf_internal_r+0x19b0>
    4450:	d8803317 	ldw	r2,204(sp)
    4454:	1000021e 	bne	r2,zero,4460 <___vfprintf_internal_r+0x19b0>
    4458:	9080004c 	andi	r2,r18,1
    445c:	103c0926 	beq	r2,zero,3484 <__alt_data_end+0xff003484>
    4460:	d9003717 	ldw	r4,220(sp)
    4464:	d8801f17 	ldw	r2,124(sp)
    4468:	d9403417 	ldw	r5,208(sp)
    446c:	20c7883a 	add	r3,r4,r3
    4470:	10800044 	addi	r2,r2,1
    4474:	41000115 	stw	r4,4(r8)
    4478:	41400015 	stw	r5,0(r8)
    447c:	d8c02015 	stw	r3,128(sp)
    4480:	d8801f15 	stw	r2,124(sp)
    4484:	010001c4 	movi	r4,7
    4488:	20812116 	blt	r4,r2,4910 <___vfprintf_internal_r+0x1e60>
    448c:	42000204 	addi	r8,r8,8
    4490:	0463c83a 	sub	r17,zero,r17
    4494:	0440730e 	bge	zero,r17,4664 <___vfprintf_internal_r+0x1bb4>
    4498:	05800404 	movi	r22,16
    449c:	b440860e 	bge	r22,r17,46b8 <___vfprintf_internal_r+0x1c08>
    44a0:	01400074 	movhi	r5,1
    44a4:	29443b84 	addi	r5,r5,4334
    44a8:	d9402b15 	stw	r5,172(sp)
    44ac:	070001c4 	movi	fp,7
    44b0:	dcc02c17 	ldw	r19,176(sp)
    44b4:	00000306 	br	44c4 <___vfprintf_internal_r+0x1a14>
    44b8:	42000204 	addi	r8,r8,8
    44bc:	8c7ffc04 	addi	r17,r17,-16
    44c0:	b440800e 	bge	r22,r17,46c4 <___vfprintf_internal_r+0x1c14>
    44c4:	18c00404 	addi	r3,r3,16
    44c8:	10800044 	addi	r2,r2,1
    44cc:	45000015 	stw	r20,0(r8)
    44d0:	45800115 	stw	r22,4(r8)
    44d4:	d8c02015 	stw	r3,128(sp)
    44d8:	d8801f15 	stw	r2,124(sp)
    44dc:	e0bff60e 	bge	fp,r2,44b8 <__alt_data_end+0xff0044b8>
    44e0:	d9801e04 	addi	r6,sp,120
    44e4:	b80b883a 	mov	r5,r23
    44e8:	9809883a 	mov	r4,r19
    44ec:	000984c0 	call	984c <__sprint_r>
    44f0:	103a711e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    44f4:	d8c02017 	ldw	r3,128(sp)
    44f8:	d8801f17 	ldw	r2,124(sp)
    44fc:	da000404 	addi	r8,sp,16
    4500:	003fee06 	br	44bc <__alt_data_end+0xff0044bc>
    4504:	00bfffc4 	movi	r2,-1
    4508:	003a6f06 	br	2ec8 <__alt_data_end+0xff002ec8>
    450c:	008011c4 	movi	r2,71
    4510:	1440b816 	blt	r2,r17,47f4 <___vfprintf_internal_r+0x1d44>
    4514:	04000074 	movhi	r16,1
    4518:	84042d04 	addi	r16,r16,4276
    451c:	00c000c4 	movi	r3,3
    4520:	00bfdfc4 	movi	r2,-129
    4524:	d8c02a15 	stw	r3,168(sp)
    4528:	90a4703a 	and	r18,r18,r2
    452c:	df002783 	ldbu	fp,158(sp)
    4530:	d8c02e15 	stw	r3,184(sp)
    4534:	d8002915 	stw	zero,164(sp)
    4538:	d8003215 	stw	zero,200(sp)
    453c:	003b2906 	br	31e4 <__alt_data_end+0xff0031e4>
    4540:	d9002d17 	ldw	r4,180(sp)
    4544:	24c00017 	ldw	r19,0(r4)
    4548:	21000104 	addi	r4,r4,4
    454c:	d9002d15 	stw	r4,180(sp)
    4550:	982dd7fa 	srai	r22,r19,31
    4554:	b005883a 	mov	r2,r22
    4558:	003a9f06 	br	2fd8 <__alt_data_end+0xff002fd8>
    455c:	d9402d17 	ldw	r5,180(sp)
    4560:	d8c02f17 	ldw	r3,188(sp)
    4564:	28800017 	ldw	r2,0(r5)
    4568:	29400104 	addi	r5,r5,4
    456c:	d9402d15 	stw	r5,180(sp)
    4570:	10c00015 	stw	r3,0(r2)
    4574:	00398606 	br	2b90 <__alt_data_end+0xff002b90>
    4578:	d9402d17 	ldw	r5,180(sp)
    457c:	002d883a 	mov	r22,zero
    4580:	2cc00017 	ldw	r19,0(r5)
    4584:	29400104 	addi	r5,r5,4
    4588:	d9402d15 	stw	r5,180(sp)
    458c:	003c2306 	br	361c <__alt_data_end+0xff00361c>
    4590:	d8c02d17 	ldw	r3,180(sp)
    4594:	d9002917 	ldw	r4,164(sp)
    4598:	002d883a 	mov	r22,zero
    459c:	18800104 	addi	r2,r3,4
    45a0:	1cc0000b 	ldhu	r19,0(r3)
    45a4:	203dc10e 	bge	r4,zero,3cac <__alt_data_end+0xff003cac>
    45a8:	003f7506 	br	4380 <__alt_data_end+0xff004380>
    45ac:	04000074 	movhi	r16,1
    45b0:	84042b04 	addi	r16,r16,4268
    45b4:	003acc06 	br	30e8 <__alt_data_end+0xff0030e8>
    45b8:	d9002c17 	ldw	r4,176(sp)
    45bc:	d9801e04 	addi	r6,sp,120
    45c0:	b80b883a 	mov	r5,r23
    45c4:	000984c0 	call	984c <__sprint_r>
    45c8:	103a3b1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    45cc:	dc402617 	ldw	r17,152(sp)
    45d0:	d8c02017 	ldw	r3,128(sp)
    45d4:	da000404 	addi	r8,sp,16
    45d8:	003f9c06 	br	444c <__alt_data_end+0xff00444c>
    45dc:	ac400043 	ldbu	r17,1(r21)
    45e0:	94800814 	ori	r18,r18,32
    45e4:	ad400044 	addi	r21,r21,1
    45e8:	8c403fcc 	andi	r17,r17,255
    45ec:	8c40201c 	xori	r17,r17,128
    45f0:	8c7fe004 	addi	r17,r17,-128
    45f4:	00398f06 	br	2c34 <__alt_data_end+0xff002c34>
    45f8:	d8c02d15 	stw	r3,180(sp)
    45fc:	0039883a 	mov	fp,zero
    4600:	003e3506 	br	3ed8 <__alt_data_end+0xff003ed8>
    4604:	d9002c17 	ldw	r4,176(sp)
    4608:	d9801e04 	addi	r6,sp,120
    460c:	b80b883a 	mov	r5,r23
    4610:	000984c0 	call	984c <__sprint_r>
    4614:	103a281e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4618:	d8c02017 	ldw	r3,128(sp)
    461c:	da000404 	addi	r8,sp,16
    4620:	003cd006 	br	3964 <__alt_data_end+0xff003964>
    4624:	8009883a 	mov	r4,r16
    4628:	da003d15 	stw	r8,244(sp)
    462c:	0002a180 	call	2a18 <strlen>
    4630:	d8802e15 	stw	r2,184(sp)
    4634:	da003d17 	ldw	r8,244(sp)
    4638:	103c340e 	bge	r2,zero,370c <__alt_data_end+0xff00370c>
    463c:	0005883a 	mov	r2,zero
    4640:	003c3206 	br	370c <__alt_data_end+0xff00370c>
    4644:	d9002c17 	ldw	r4,176(sp)
    4648:	d9801e04 	addi	r6,sp,120
    464c:	b80b883a 	mov	r5,r23
    4650:	000984c0 	call	984c <__sprint_r>
    4654:	103a181e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4658:	d8c02017 	ldw	r3,128(sp)
    465c:	d8801f17 	ldw	r2,124(sp)
    4660:	da000404 	addi	r8,sp,16
    4664:	d9403317 	ldw	r5,204(sp)
    4668:	10800044 	addi	r2,r2,1
    466c:	44000015 	stw	r16,0(r8)
    4670:	28c7883a 	add	r3,r5,r3
    4674:	003b7d06 	br	346c <__alt_data_end+0xff00346c>
    4678:	01000074 	movhi	r4,1
    467c:	21043f84 	addi	r4,r4,4350
    4680:	d9003515 	stw	r4,212(sp)
    4684:	003b1406 	br	32d8 <__alt_data_end+0xff0032d8>
    4688:	013fffc4 	movi	r4,-1
    468c:	003a3506 	br	2f64 <__alt_data_end+0xff002f64>
    4690:	0023883a 	mov	r17,zero
    4694:	003d9d06 	br	3d0c <__alt_data_end+0xff003d0c>
    4698:	d9002c17 	ldw	r4,176(sp)
    469c:	d9801e04 	addi	r6,sp,120
    46a0:	b80b883a 	mov	r5,r23
    46a4:	000984c0 	call	984c <__sprint_r>
    46a8:	103a031e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    46ac:	d8c02017 	ldw	r3,128(sp)
    46b0:	da000404 	addi	r8,sp,16
    46b4:	003d9406 	br	3d08 <__alt_data_end+0xff003d08>
    46b8:	01000074 	movhi	r4,1
    46bc:	21043b84 	addi	r4,r4,4334
    46c0:	d9002b15 	stw	r4,172(sp)
    46c4:	d9002b17 	ldw	r4,172(sp)
    46c8:	1c47883a 	add	r3,r3,r17
    46cc:	10800044 	addi	r2,r2,1
    46d0:	41000015 	stw	r4,0(r8)
    46d4:	44400115 	stw	r17,4(r8)
    46d8:	d8c02015 	stw	r3,128(sp)
    46dc:	d8801f15 	stw	r2,124(sp)
    46e0:	010001c4 	movi	r4,7
    46e4:	20bfd716 	blt	r4,r2,4644 <__alt_data_end+0xff004644>
    46e8:	42000204 	addi	r8,r8,8
    46ec:	003fdd06 	br	4664 <__alt_data_end+0xff004664>
    46f0:	d9002c17 	ldw	r4,176(sp)
    46f4:	d9801e04 	addi	r6,sp,120
    46f8:	b80b883a 	mov	r5,r23
    46fc:	000984c0 	call	984c <__sprint_r>
    4700:	1039ed1e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4704:	d8802617 	ldw	r2,152(sp)
    4708:	d8c02017 	ldw	r3,128(sp)
    470c:	da000404 	addi	r8,sp,16
    4710:	003e1006 	br	3f54 <__alt_data_end+0xff003f54>
    4714:	00800044 	movi	r2,1
    4718:	10803fcc 	andi	r2,r2,255
    471c:	00c00044 	movi	r3,1
    4720:	10fa3526 	beq	r2,r3,2ff8 <__alt_data_end+0xff002ff8>
    4724:	00c00084 	movi	r3,2
    4728:	10fbcb26 	beq	r2,r3,3658 <__alt_data_end+0xff003658>
    472c:	003a8f06 	br	316c <__alt_data_end+0xff00316c>
    4730:	01000074 	movhi	r4,1
    4734:	21043f84 	addi	r4,r4,4350
    4738:	d9003515 	stw	r4,212(sp)
    473c:	003b7606 	br	3518 <__alt_data_end+0xff003518>
    4740:	d8802917 	ldw	r2,164(sp)
    4744:	00c00184 	movi	r3,6
    4748:	1880012e 	bgeu	r3,r2,4750 <___vfprintf_internal_r+0x1ca0>
    474c:	1805883a 	mov	r2,r3
    4750:	d8802e15 	stw	r2,184(sp)
    4754:	1000ef16 	blt	r2,zero,4b14 <___vfprintf_internal_r+0x2064>
    4758:	04000074 	movhi	r16,1
    475c:	d8802a15 	stw	r2,168(sp)
    4760:	dcc02d15 	stw	r19,180(sp)
    4764:	d8002915 	stw	zero,164(sp)
    4768:	d8003215 	stw	zero,200(sp)
    476c:	84043904 	addi	r16,r16,4324
    4770:	0039883a 	mov	fp,zero
    4774:	003aa206 	br	3200 <__alt_data_end+0xff003200>
    4778:	0021883a 	mov	r16,zero
    477c:	003e0706 	br	3f9c <__alt_data_end+0xff003f9c>
    4780:	d9002c17 	ldw	r4,176(sp)
    4784:	d9801e04 	addi	r6,sp,120
    4788:	b80b883a 	mov	r5,r23
    478c:	000984c0 	call	984c <__sprint_r>
    4790:	1039c91e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4794:	d8802617 	ldw	r2,152(sp)
    4798:	d9403317 	ldw	r5,204(sp)
    479c:	d8c02017 	ldw	r3,128(sp)
    47a0:	da000404 	addi	r8,sp,16
    47a4:	2885c83a 	sub	r2,r5,r2
    47a8:	003dfb06 	br	3f98 <__alt_data_end+0xff003f98>
    47ac:	9080004c 	andi	r2,r18,1
    47b0:	103e8f1e 	bne	r2,zero,41f0 <__alt_data_end+0xff0041f0>
    47b4:	d8802117 	ldw	r2,132(sp)
    47b8:	003e9e06 	br	4234 <__alt_data_end+0xff004234>
    47bc:	1025883a 	mov	r18,r2
    47c0:	0039883a 	mov	fp,zero
    47c4:	00800084 	movi	r2,2
    47c8:	003fd306 	br	4718 <__alt_data_end+0xff004718>
    47cc:	07000b44 	movi	fp,45
    47d0:	df002785 	stb	fp,158(sp)
    47d4:	003a4006 	br	30d8 <__alt_data_end+0xff0030d8>
    47d8:	00c00b44 	movi	r3,45
    47dc:	d8c02785 	stb	r3,158(sp)
    47e0:	d8802a15 	stw	r2,168(sp)
    47e4:	dc802b17 	ldw	r18,172(sp)
    47e8:	d8002915 	stw	zero,164(sp)
    47ec:	07000b44 	movi	fp,45
    47f0:	003a8006 	br	31f4 <__alt_data_end+0xff0031f4>
    47f4:	04000074 	movhi	r16,1
    47f8:	84042e04 	addi	r16,r16,4280
    47fc:	003f4706 	br	451c <__alt_data_end+0xff00451c>
    4800:	d8c02d17 	ldw	r3,180(sp)
    4804:	d9002f17 	ldw	r4,188(sp)
    4808:	18800017 	ldw	r2,0(r3)
    480c:	18c00104 	addi	r3,r3,4
    4810:	d8c02d15 	stw	r3,180(sp)
    4814:	11000015 	stw	r4,0(r2)
    4818:	0038dd06 	br	2b90 <__alt_data_end+0xff002b90>
    481c:	dd802617 	ldw	r22,152(sp)
    4820:	00bfff44 	movi	r2,-3
    4824:	b0801c16 	blt	r22,r2,4898 <___vfprintf_internal_r+0x1de8>
    4828:	d9402917 	ldw	r5,164(sp)
    482c:	2d801a16 	blt	r5,r22,4898 <___vfprintf_internal_r+0x1de8>
    4830:	dd803215 	stw	r22,200(sp)
    4834:	003e8906 	br	425c <__alt_data_end+0xff00425c>
    4838:	01000074 	movhi	r4,1
    483c:	21043b84 	addi	r4,r4,4334
    4840:	d9002b15 	stw	r4,172(sp)
    4844:	003c9106 	br	3a8c <__alt_data_end+0xff003a8c>
    4848:	e005883a 	mov	r2,fp
    484c:	003e7906 	br	4234 <__alt_data_end+0xff004234>
    4850:	d9402917 	ldw	r5,164(sp)
    4854:	df002783 	ldbu	fp,158(sp)
    4858:	dcc02d15 	stw	r19,180(sp)
    485c:	d9402a15 	stw	r5,168(sp)
    4860:	d9402e15 	stw	r5,184(sp)
    4864:	d8002915 	stw	zero,164(sp)
    4868:	d8003215 	stw	zero,200(sp)
    486c:	003a5d06 	br	31e4 <__alt_data_end+0xff0031e4>
    4870:	9080004c 	andi	r2,r18,1
    4874:	0039883a 	mov	fp,zero
    4878:	10000426 	beq	r2,zero,488c <___vfprintf_internal_r+0x1ddc>
    487c:	00800c04 	movi	r2,48
    4880:	dc001dc4 	addi	r16,sp,119
    4884:	d8801dc5 	stb	r2,119(sp)
    4888:	003b8006 	br	368c <__alt_data_end+0xff00368c>
    488c:	d8002e15 	stw	zero,184(sp)
    4890:	dc001e04 	addi	r16,sp,120
    4894:	003a4d06 	br	31cc <__alt_data_end+0xff0031cc>
    4898:	8c7fff84 	addi	r17,r17,-2
    489c:	b5bfffc4 	addi	r22,r22,-1
    48a0:	dd802615 	stw	r22,152(sp)
    48a4:	dc4022c5 	stb	r17,139(sp)
    48a8:	b000bf16 	blt	r22,zero,4ba8 <___vfprintf_internal_r+0x20f8>
    48ac:	00800ac4 	movi	r2,43
    48b0:	d8802305 	stb	r2,140(sp)
    48b4:	00800244 	movi	r2,9
    48b8:	15807016 	blt	r2,r22,4a7c <___vfprintf_internal_r+0x1fcc>
    48bc:	00800c04 	movi	r2,48
    48c0:	b5800c04 	addi	r22,r22,48
    48c4:	d8802345 	stb	r2,141(sp)
    48c8:	dd802385 	stb	r22,142(sp)
    48cc:	d88023c4 	addi	r2,sp,143
    48d0:	df0022c4 	addi	fp,sp,139
    48d4:	d8c03317 	ldw	r3,204(sp)
    48d8:	1739c83a 	sub	fp,r2,fp
    48dc:	d9003317 	ldw	r4,204(sp)
    48e0:	e0c7883a 	add	r3,fp,r3
    48e4:	df003a15 	stw	fp,232(sp)
    48e8:	d8c02e15 	stw	r3,184(sp)
    48ec:	00800044 	movi	r2,1
    48f0:	1100b30e 	bge	r2,r4,4bc0 <___vfprintf_internal_r+0x2110>
    48f4:	d8c02e17 	ldw	r3,184(sp)
    48f8:	18c00044 	addi	r3,r3,1
    48fc:	d8c02e15 	stw	r3,184(sp)
    4900:	1805883a 	mov	r2,r3
    4904:	1800ac16 	blt	r3,zero,4bb8 <___vfprintf_internal_r+0x2108>
    4908:	d8003215 	stw	zero,200(sp)
    490c:	003e5d06 	br	4284 <__alt_data_end+0xff004284>
    4910:	d9002c17 	ldw	r4,176(sp)
    4914:	d9801e04 	addi	r6,sp,120
    4918:	b80b883a 	mov	r5,r23
    491c:	000984c0 	call	984c <__sprint_r>
    4920:	1039651e 	bne	r2,zero,2eb8 <__alt_data_end+0xff002eb8>
    4924:	dc402617 	ldw	r17,152(sp)
    4928:	d8c02017 	ldw	r3,128(sp)
    492c:	d8801f17 	ldw	r2,124(sp)
    4930:	da000404 	addi	r8,sp,16
    4934:	003ed606 	br	4490 <__alt_data_end+0xff004490>
    4938:	582b883a 	mov	r21,r11
    493c:	d8002915 	stw	zero,164(sp)
    4940:	0038bd06 	br	2c38 <__alt_data_end+0xff002c38>
    4944:	d8802917 	ldw	r2,164(sp)
    4948:	103e071e 	bne	r2,zero,4168 <__alt_data_end+0xff004168>
    494c:	dc002915 	stw	r16,164(sp)
    4950:	003e0506 	br	4168 <__alt_data_end+0xff004168>
    4954:	d9002917 	ldw	r4,164(sp)
    4958:	20c00044 	addi	r3,r4,1
    495c:	003e0f06 	br	419c <__alt_data_end+0xff00419c>
    4960:	01400184 	movi	r5,6
    4964:	d9402915 	stw	r5,164(sp)
    4968:	003dff06 	br	4168 <__alt_data_end+0xff004168>
    496c:	d8802104 	addi	r2,sp,132
    4970:	d8800315 	stw	r2,12(sp)
    4974:	d8802504 	addi	r2,sp,148
    4978:	d8800215 	stw	r2,8(sp)
    497c:	d8802604 	addi	r2,sp,152
    4980:	d8800115 	stw	r2,4(sp)
    4984:	d8802917 	ldw	r2,164(sp)
    4988:	d9403617 	ldw	r5,216(sp)
    498c:	d9002c17 	ldw	r4,176(sp)
    4990:	d8800015 	stw	r2,0(sp)
    4994:	01c000c4 	movi	r7,3
    4998:	980d883a 	mov	r6,r19
    499c:	da003d15 	stw	r8,244(sp)
    49a0:	00050d40 	call	50d4 <_dtoa_r>
    49a4:	d8c02917 	ldw	r3,164(sp)
    49a8:	da003d17 	ldw	r8,244(sp)
    49ac:	1021883a 	mov	r16,r2
    49b0:	10f9883a 	add	fp,r2,r3
    49b4:	81000007 	ldb	r4,0(r16)
    49b8:	00800c04 	movi	r2,48
    49bc:	20805e26 	beq	r4,r2,4b38 <___vfprintf_internal_r+0x2088>
    49c0:	d8c02617 	ldw	r3,152(sp)
    49c4:	e0f9883a 	add	fp,fp,r3
    49c8:	003e0a06 	br	41f4 <__alt_data_end+0xff0041f4>
    49cc:	00c00b44 	movi	r3,45
    49d0:	24e0003c 	xorhi	r19,r4,32768
    49d4:	d8c02a05 	stb	r3,168(sp)
    49d8:	003de906 	br	4180 <__alt_data_end+0xff004180>
    49dc:	d8c03217 	ldw	r3,200(sp)
    49e0:	00c07a0e 	bge	zero,r3,4bcc <___vfprintf_internal_r+0x211c>
    49e4:	00800044 	movi	r2,1
    49e8:	d9003317 	ldw	r4,204(sp)
    49ec:	1105883a 	add	r2,r2,r4
    49f0:	d8802e15 	stw	r2,184(sp)
    49f4:	10004e16 	blt	r2,zero,4b30 <___vfprintf_internal_r+0x2080>
    49f8:	044019c4 	movi	r17,103
    49fc:	003e2106 	br	4284 <__alt_data_end+0xff004284>
    4a00:	d9002917 	ldw	r4,164(sp)
    4a04:	d8802104 	addi	r2,sp,132
    4a08:	d8800315 	stw	r2,12(sp)
    4a0c:	d9000015 	stw	r4,0(sp)
    4a10:	d8802504 	addi	r2,sp,148
    4a14:	d9403617 	ldw	r5,216(sp)
    4a18:	d9002c17 	ldw	r4,176(sp)
    4a1c:	d8800215 	stw	r2,8(sp)
    4a20:	d8802604 	addi	r2,sp,152
    4a24:	d8800115 	stw	r2,4(sp)
    4a28:	01c000c4 	movi	r7,3
    4a2c:	980d883a 	mov	r6,r19
    4a30:	da003d15 	stw	r8,244(sp)
    4a34:	00050d40 	call	50d4 <_dtoa_r>
    4a38:	d8c02917 	ldw	r3,164(sp)
    4a3c:	da003d17 	ldw	r8,244(sp)
    4a40:	1021883a 	mov	r16,r2
    4a44:	00801184 	movi	r2,70
    4a48:	80f9883a 	add	fp,r16,r3
    4a4c:	88bfd926 	beq	r17,r2,49b4 <__alt_data_end+0xff0049b4>
    4a50:	003de806 	br	41f4 <__alt_data_end+0xff0041f4>
    4a54:	d9002917 	ldw	r4,164(sp)
    4a58:	00c04d0e 	bge	zero,r3,4b90 <___vfprintf_internal_r+0x20e0>
    4a5c:	2000441e 	bne	r4,zero,4b70 <___vfprintf_internal_r+0x20c0>
    4a60:	9480004c 	andi	r18,r18,1
    4a64:	9000421e 	bne	r18,zero,4b70 <___vfprintf_internal_r+0x20c0>
    4a68:	1805883a 	mov	r2,r3
    4a6c:	18007016 	blt	r3,zero,4c30 <___vfprintf_internal_r+0x2180>
    4a70:	d8c03217 	ldw	r3,200(sp)
    4a74:	d8c02e15 	stw	r3,184(sp)
    4a78:	003e0206 	br	4284 <__alt_data_end+0xff004284>
    4a7c:	df0022c4 	addi	fp,sp,139
    4a80:	dc002915 	stw	r16,164(sp)
    4a84:	4027883a 	mov	r19,r8
    4a88:	e021883a 	mov	r16,fp
    4a8c:	b009883a 	mov	r4,r22
    4a90:	01400284 	movi	r5,10
    4a94:	000152c0 	call	152c <__modsi3>
    4a98:	10800c04 	addi	r2,r2,48
    4a9c:	843fffc4 	addi	r16,r16,-1
    4aa0:	b009883a 	mov	r4,r22
    4aa4:	01400284 	movi	r5,10
    4aa8:	80800005 	stb	r2,0(r16)
    4aac:	00014a80 	call	14a8 <__divsi3>
    4ab0:	102d883a 	mov	r22,r2
    4ab4:	00800244 	movi	r2,9
    4ab8:	15bff416 	blt	r2,r22,4a8c <__alt_data_end+0xff004a8c>
    4abc:	9811883a 	mov	r8,r19
    4ac0:	b0800c04 	addi	r2,r22,48
    4ac4:	8027883a 	mov	r19,r16
    4ac8:	997fffc4 	addi	r5,r19,-1
    4acc:	98bfffc5 	stb	r2,-1(r19)
    4ad0:	dc002917 	ldw	r16,164(sp)
    4ad4:	2f006a2e 	bgeu	r5,fp,4c80 <___vfprintf_internal_r+0x21d0>
    4ad8:	d9c02384 	addi	r7,sp,142
    4adc:	3ccfc83a 	sub	r7,r7,r19
    4ae0:	d9002344 	addi	r4,sp,141
    4ae4:	e1cf883a 	add	r7,fp,r7
    4ae8:	00000106 	br	4af0 <___vfprintf_internal_r+0x2040>
    4aec:	28800003 	ldbu	r2,0(r5)
    4af0:	20800005 	stb	r2,0(r4)
    4af4:	21000044 	addi	r4,r4,1
    4af8:	29400044 	addi	r5,r5,1
    4afc:	393ffb1e 	bne	r7,r4,4aec <__alt_data_end+0xff004aec>
    4b00:	d8802304 	addi	r2,sp,140
    4b04:	14c5c83a 	sub	r2,r2,r19
    4b08:	d8c02344 	addi	r3,sp,141
    4b0c:	1885883a 	add	r2,r3,r2
    4b10:	003f7006 	br	48d4 <__alt_data_end+0xff0048d4>
    4b14:	0005883a 	mov	r2,zero
    4b18:	003f0f06 	br	4758 <__alt_data_end+0xff004758>
    4b1c:	d8c03217 	ldw	r3,200(sp)
    4b20:	18c00044 	addi	r3,r3,1
    4b24:	d8c02e15 	stw	r3,184(sp)
    4b28:	1805883a 	mov	r2,r3
    4b2c:	183fb20e 	bge	r3,zero,49f8 <__alt_data_end+0xff0049f8>
    4b30:	0005883a 	mov	r2,zero
    4b34:	003fb006 	br	49f8 <__alt_data_end+0xff0049f8>
    4b38:	d9003617 	ldw	r4,216(sp)
    4b3c:	000d883a 	mov	r6,zero
    4b40:	000f883a 	mov	r7,zero
    4b44:	980b883a 	mov	r5,r19
    4b48:	d8c03c15 	stw	r3,240(sp)
    4b4c:	da003d15 	stw	r8,244(sp)
    4b50:	000ca280 	call	ca28 <__eqdf2>
    4b54:	d8c03c17 	ldw	r3,240(sp)
    4b58:	da003d17 	ldw	r8,244(sp)
    4b5c:	103f9826 	beq	r2,zero,49c0 <__alt_data_end+0xff0049c0>
    4b60:	00800044 	movi	r2,1
    4b64:	10c7c83a 	sub	r3,r2,r3
    4b68:	d8c02615 	stw	r3,152(sp)
    4b6c:	003f9506 	br	49c4 <__alt_data_end+0xff0049c4>
    4b70:	d9002917 	ldw	r4,164(sp)
    4b74:	d8c03217 	ldw	r3,200(sp)
    4b78:	20800044 	addi	r2,r4,1
    4b7c:	1885883a 	add	r2,r3,r2
    4b80:	d8802e15 	stw	r2,184(sp)
    4b84:	103dbf0e 	bge	r2,zero,4284 <__alt_data_end+0xff004284>
    4b88:	0005883a 	mov	r2,zero
    4b8c:	003dbd06 	br	4284 <__alt_data_end+0xff004284>
    4b90:	2000211e 	bne	r4,zero,4c18 <___vfprintf_internal_r+0x2168>
    4b94:	9480004c 	andi	r18,r18,1
    4b98:	90001f1e 	bne	r18,zero,4c18 <___vfprintf_internal_r+0x2168>
    4b9c:	00800044 	movi	r2,1
    4ba0:	d8802e15 	stw	r2,184(sp)
    4ba4:	003db706 	br	4284 <__alt_data_end+0xff004284>
    4ba8:	00800b44 	movi	r2,45
    4bac:	05adc83a 	sub	r22,zero,r22
    4bb0:	d8802305 	stb	r2,140(sp)
    4bb4:	003f3f06 	br	48b4 <__alt_data_end+0xff0048b4>
    4bb8:	0005883a 	mov	r2,zero
    4bbc:	003f5206 	br	4908 <__alt_data_end+0xff004908>
    4bc0:	90a4703a 	and	r18,r18,r2
    4bc4:	903f4e26 	beq	r18,zero,4900 <__alt_data_end+0xff004900>
    4bc8:	003f4a06 	br	48f4 <__alt_data_end+0xff0048f4>
    4bcc:	00800084 	movi	r2,2
    4bd0:	10c5c83a 	sub	r2,r2,r3
    4bd4:	003f8406 	br	49e8 <__alt_data_end+0xff0049e8>
    4bd8:	d8802d17 	ldw	r2,180(sp)
    4bdc:	d9002d17 	ldw	r4,180(sp)
    4be0:	ac400043 	ldbu	r17,1(r21)
    4be4:	10800017 	ldw	r2,0(r2)
    4be8:	582b883a 	mov	r21,r11
    4bec:	d8802915 	stw	r2,164(sp)
    4bf0:	20800104 	addi	r2,r4,4
    4bf4:	d9002917 	ldw	r4,164(sp)
    4bf8:	d8802d15 	stw	r2,180(sp)
    4bfc:	203e7a0e 	bge	r4,zero,45e8 <__alt_data_end+0xff0045e8>
    4c00:	8c403fcc 	andi	r17,r17,255
    4c04:	00bfffc4 	movi	r2,-1
    4c08:	8c40201c 	xori	r17,r17,128
    4c0c:	d8802915 	stw	r2,164(sp)
    4c10:	8c7fe004 	addi	r17,r17,-128
    4c14:	00380706 	br	2c34 <__alt_data_end+0xff002c34>
    4c18:	d8c02917 	ldw	r3,164(sp)
    4c1c:	18c00084 	addi	r3,r3,2
    4c20:	d8c02e15 	stw	r3,184(sp)
    4c24:	1805883a 	mov	r2,r3
    4c28:	183d960e 	bge	r3,zero,4284 <__alt_data_end+0xff004284>
    4c2c:	003fd606 	br	4b88 <__alt_data_end+0xff004b88>
    4c30:	0005883a 	mov	r2,zero
    4c34:	003f8e06 	br	4a70 <__alt_data_end+0xff004a70>
    4c38:	9080004c 	andi	r2,r18,1
    4c3c:	103f811e 	bne	r2,zero,4a44 <__alt_data_end+0xff004a44>
    4c40:	d8802117 	ldw	r2,132(sp)
    4c44:	1405c83a 	sub	r2,r2,r16
    4c48:	d8803315 	stw	r2,204(sp)
    4c4c:	b47ef326 	beq	r22,r17,481c <__alt_data_end+0xff00481c>
    4c50:	dd802617 	ldw	r22,152(sp)
    4c54:	003f1106 	br	489c <__alt_data_end+0xff00489c>
    4c58:	d9c02785 	stb	r7,158(sp)
    4c5c:	00390406 	br	3070 <__alt_data_end+0xff003070>
    4c60:	d9c02785 	stb	r7,158(sp)
    4c64:	0038d306 	br	2fb4 <__alt_data_end+0xff002fb4>
    4c68:	d9c02785 	stb	r7,158(sp)
    4c6c:	003a6106 	br	35f4 <__alt_data_end+0xff0035f4>
    4c70:	d9c02785 	stb	r7,158(sp)
    4c74:	003af806 	br	3858 <__alt_data_end+0xff003858>
    4c78:	0005883a 	mov	r2,zero
    4c7c:	003d7e06 	br	4278 <__alt_data_end+0xff004278>
    4c80:	d8802344 	addi	r2,sp,141
    4c84:	003f1306 	br	48d4 <__alt_data_end+0xff0048d4>
    4c88:	d9c02785 	stb	r7,158(sp)
    4c8c:	00392306 	br	311c <__alt_data_end+0xff00311c>
    4c90:	d9c02785 	stb	r7,158(sp)
    4c94:	003aa906 	br	373c <__alt_data_end+0xff00373c>
    4c98:	d9c02785 	stb	r7,158(sp)
    4c9c:	003a3d06 	br	3594 <__alt_data_end+0xff003594>
    4ca0:	d9c02785 	stb	r7,158(sp)
    4ca4:	003aca06 	br	37d0 <__alt_data_end+0xff0037d0>

00004ca8 <__vfprintf_internal>:
    4ca8:	00800074 	movhi	r2,1
    4cac:	108b9604 	addi	r2,r2,11864
    4cb0:	300f883a 	mov	r7,r6
    4cb4:	280d883a 	mov	r6,r5
    4cb8:	200b883a 	mov	r5,r4
    4cbc:	11000017 	ldw	r4,0(r2)
    4cc0:	0002ab01 	jmpi	2ab0 <___vfprintf_internal_r>

00004cc4 <__sbprintf>:
    4cc4:	2880030b 	ldhu	r2,12(r5)
    4cc8:	2ac01917 	ldw	r11,100(r5)
    4ccc:	2a80038b 	ldhu	r10,14(r5)
    4cd0:	2a400717 	ldw	r9,28(r5)
    4cd4:	2a000917 	ldw	r8,36(r5)
    4cd8:	defee204 	addi	sp,sp,-1144
    4cdc:	00c10004 	movi	r3,1024
    4ce0:	dc011a15 	stw	r16,1128(sp)
    4ce4:	10bfff4c 	andi	r2,r2,65533
    4ce8:	2821883a 	mov	r16,r5
    4cec:	d8cb883a 	add	r5,sp,r3
    4cf0:	dc811c15 	stw	r18,1136(sp)
    4cf4:	dc411b15 	stw	r17,1132(sp)
    4cf8:	dfc11d15 	stw	ra,1140(sp)
    4cfc:	2025883a 	mov	r18,r4
    4d00:	d881030d 	sth	r2,1036(sp)
    4d04:	dac11915 	stw	r11,1124(sp)
    4d08:	da81038d 	sth	r10,1038(sp)
    4d0c:	da410715 	stw	r9,1052(sp)
    4d10:	da010915 	stw	r8,1060(sp)
    4d14:	dec10015 	stw	sp,1024(sp)
    4d18:	dec10415 	stw	sp,1040(sp)
    4d1c:	d8c10215 	stw	r3,1032(sp)
    4d20:	d8c10515 	stw	r3,1044(sp)
    4d24:	d8010615 	stw	zero,1048(sp)
    4d28:	0002ab00 	call	2ab0 <___vfprintf_internal_r>
    4d2c:	1023883a 	mov	r17,r2
    4d30:	10000416 	blt	r2,zero,4d44 <__sbprintf+0x80>
    4d34:	d9410004 	addi	r5,sp,1024
    4d38:	9009883a 	mov	r4,r18
    4d3c:	00069780 	call	6978 <_fflush_r>
    4d40:	10000d1e 	bne	r2,zero,4d78 <__sbprintf+0xb4>
    4d44:	d881030b 	ldhu	r2,1036(sp)
    4d48:	1080100c 	andi	r2,r2,64
    4d4c:	10000326 	beq	r2,zero,4d5c <__sbprintf+0x98>
    4d50:	8080030b 	ldhu	r2,12(r16)
    4d54:	10801014 	ori	r2,r2,64
    4d58:	8080030d 	sth	r2,12(r16)
    4d5c:	8805883a 	mov	r2,r17
    4d60:	dfc11d17 	ldw	ra,1140(sp)
    4d64:	dc811c17 	ldw	r18,1136(sp)
    4d68:	dc411b17 	ldw	r17,1132(sp)
    4d6c:	dc011a17 	ldw	r16,1128(sp)
    4d70:	dec11e04 	addi	sp,sp,1144
    4d74:	f800283a 	ret
    4d78:	047fffc4 	movi	r17,-1
    4d7c:	003ff106 	br	4d44 <__alt_data_end+0xff004d44>

00004d80 <__swsetup_r>:
    4d80:	00800074 	movhi	r2,1
    4d84:	defffd04 	addi	sp,sp,-12
    4d88:	108b9604 	addi	r2,r2,11864
    4d8c:	dc400115 	stw	r17,4(sp)
    4d90:	2023883a 	mov	r17,r4
    4d94:	11000017 	ldw	r4,0(r2)
    4d98:	dc000015 	stw	r16,0(sp)
    4d9c:	dfc00215 	stw	ra,8(sp)
    4da0:	2821883a 	mov	r16,r5
    4da4:	20000226 	beq	r4,zero,4db0 <__swsetup_r+0x30>
    4da8:	20800e17 	ldw	r2,56(r4)
    4dac:	10003126 	beq	r2,zero,4e74 <__swsetup_r+0xf4>
    4db0:	8080030b 	ldhu	r2,12(r16)
    4db4:	10c0020c 	andi	r3,r2,8
    4db8:	1009883a 	mov	r4,r2
    4dbc:	18000f26 	beq	r3,zero,4dfc <__swsetup_r+0x7c>
    4dc0:	80c00417 	ldw	r3,16(r16)
    4dc4:	18001526 	beq	r3,zero,4e1c <__swsetup_r+0x9c>
    4dc8:	1100004c 	andi	r4,r2,1
    4dcc:	20001c1e 	bne	r4,zero,4e40 <__swsetup_r+0xc0>
    4dd0:	1080008c 	andi	r2,r2,2
    4dd4:	1000291e 	bne	r2,zero,4e7c <__swsetup_r+0xfc>
    4dd8:	80800517 	ldw	r2,20(r16)
    4ddc:	80800215 	stw	r2,8(r16)
    4de0:	18001c26 	beq	r3,zero,4e54 <__swsetup_r+0xd4>
    4de4:	0005883a 	mov	r2,zero
    4de8:	dfc00217 	ldw	ra,8(sp)
    4dec:	dc400117 	ldw	r17,4(sp)
    4df0:	dc000017 	ldw	r16,0(sp)
    4df4:	dec00304 	addi	sp,sp,12
    4df8:	f800283a 	ret
    4dfc:	2080040c 	andi	r2,r4,16
    4e00:	10002e26 	beq	r2,zero,4ebc <__swsetup_r+0x13c>
    4e04:	2080010c 	andi	r2,r4,4
    4e08:	10001e1e 	bne	r2,zero,4e84 <__swsetup_r+0x104>
    4e0c:	80c00417 	ldw	r3,16(r16)
    4e10:	20800214 	ori	r2,r4,8
    4e14:	8080030d 	sth	r2,12(r16)
    4e18:	183feb1e 	bne	r3,zero,4dc8 <__alt_data_end+0xff004dc8>
    4e1c:	1100a00c 	andi	r4,r2,640
    4e20:	01408004 	movi	r5,512
    4e24:	217fe826 	beq	r4,r5,4dc8 <__alt_data_end+0xff004dc8>
    4e28:	800b883a 	mov	r5,r16
    4e2c:	8809883a 	mov	r4,r17
    4e30:	00078f80 	call	78f8 <__smakebuf_r>
    4e34:	8080030b 	ldhu	r2,12(r16)
    4e38:	80c00417 	ldw	r3,16(r16)
    4e3c:	003fe206 	br	4dc8 <__alt_data_end+0xff004dc8>
    4e40:	80800517 	ldw	r2,20(r16)
    4e44:	80000215 	stw	zero,8(r16)
    4e48:	0085c83a 	sub	r2,zero,r2
    4e4c:	80800615 	stw	r2,24(r16)
    4e50:	183fe41e 	bne	r3,zero,4de4 <__alt_data_end+0xff004de4>
    4e54:	80c0030b 	ldhu	r3,12(r16)
    4e58:	0005883a 	mov	r2,zero
    4e5c:	1900200c 	andi	r4,r3,128
    4e60:	203fe126 	beq	r4,zero,4de8 <__alt_data_end+0xff004de8>
    4e64:	18c01014 	ori	r3,r3,64
    4e68:	80c0030d 	sth	r3,12(r16)
    4e6c:	00bfffc4 	movi	r2,-1
    4e70:	003fdd06 	br	4de8 <__alt_data_end+0xff004de8>
    4e74:	0006d540 	call	6d54 <__sinit>
    4e78:	003fcd06 	br	4db0 <__alt_data_end+0xff004db0>
    4e7c:	0005883a 	mov	r2,zero
    4e80:	003fd606 	br	4ddc <__alt_data_end+0xff004ddc>
    4e84:	81400c17 	ldw	r5,48(r16)
    4e88:	28000626 	beq	r5,zero,4ea4 <__swsetup_r+0x124>
    4e8c:	80801004 	addi	r2,r16,64
    4e90:	28800326 	beq	r5,r2,4ea0 <__swsetup_r+0x120>
    4e94:	8809883a 	mov	r4,r17
    4e98:	0006ec80 	call	6ec8 <_free_r>
    4e9c:	8100030b 	ldhu	r4,12(r16)
    4ea0:	80000c15 	stw	zero,48(r16)
    4ea4:	80c00417 	ldw	r3,16(r16)
    4ea8:	00bff6c4 	movi	r2,-37
    4eac:	1108703a 	and	r4,r2,r4
    4eb0:	80000115 	stw	zero,4(r16)
    4eb4:	80c00015 	stw	r3,0(r16)
    4eb8:	003fd506 	br	4e10 <__alt_data_end+0xff004e10>
    4ebc:	00800244 	movi	r2,9
    4ec0:	88800015 	stw	r2,0(r17)
    4ec4:	20801014 	ori	r2,r4,64
    4ec8:	8080030d 	sth	r2,12(r16)
    4ecc:	00bfffc4 	movi	r2,-1
    4ed0:	003fc506 	br	4de8 <__alt_data_end+0xff004de8>

00004ed4 <quorem>:
    4ed4:	defff704 	addi	sp,sp,-36
    4ed8:	dc800215 	stw	r18,8(sp)
    4edc:	20800417 	ldw	r2,16(r4)
    4ee0:	2c800417 	ldw	r18,16(r5)
    4ee4:	dfc00815 	stw	ra,32(sp)
    4ee8:	ddc00715 	stw	r23,28(sp)
    4eec:	dd800615 	stw	r22,24(sp)
    4ef0:	dd400515 	stw	r21,20(sp)
    4ef4:	dd000415 	stw	r20,16(sp)
    4ef8:	dcc00315 	stw	r19,12(sp)
    4efc:	dc400115 	stw	r17,4(sp)
    4f00:	dc000015 	stw	r16,0(sp)
    4f04:	14807116 	blt	r2,r18,50cc <quorem+0x1f8>
    4f08:	94bfffc4 	addi	r18,r18,-1
    4f0c:	94ad883a 	add	r22,r18,r18
    4f10:	b5ad883a 	add	r22,r22,r22
    4f14:	2c400504 	addi	r17,r5,20
    4f18:	8da9883a 	add	r20,r17,r22
    4f1c:	25400504 	addi	r21,r4,20
    4f20:	282f883a 	mov	r23,r5
    4f24:	adad883a 	add	r22,r21,r22
    4f28:	a1400017 	ldw	r5,0(r20)
    4f2c:	2021883a 	mov	r16,r4
    4f30:	b1000017 	ldw	r4,0(r22)
    4f34:	29400044 	addi	r5,r5,1
    4f38:	00015a00 	call	15a0 <__udivsi3>
    4f3c:	1027883a 	mov	r19,r2
    4f40:	10002c26 	beq	r2,zero,4ff4 <quorem+0x120>
    4f44:	a813883a 	mov	r9,r21
    4f48:	880b883a 	mov	r5,r17
    4f4c:	0009883a 	mov	r4,zero
    4f50:	000d883a 	mov	r6,zero
    4f54:	2a000017 	ldw	r8,0(r5)
    4f58:	49c00017 	ldw	r7,0(r9)
    4f5c:	29400104 	addi	r5,r5,4
    4f60:	40bfffcc 	andi	r2,r8,65535
    4f64:	14c5383a 	mul	r2,r2,r19
    4f68:	4010d43a 	srli	r8,r8,16
    4f6c:	38ffffcc 	andi	r3,r7,65535
    4f70:	1105883a 	add	r2,r2,r4
    4f74:	1008d43a 	srli	r4,r2,16
    4f78:	44d1383a 	mul	r8,r8,r19
    4f7c:	198d883a 	add	r6,r3,r6
    4f80:	10ffffcc 	andi	r3,r2,65535
    4f84:	30c7c83a 	sub	r3,r6,r3
    4f88:	380ed43a 	srli	r7,r7,16
    4f8c:	4105883a 	add	r2,r8,r4
    4f90:	180dd43a 	srai	r6,r3,16
    4f94:	113fffcc 	andi	r4,r2,65535
    4f98:	390fc83a 	sub	r7,r7,r4
    4f9c:	398d883a 	add	r6,r7,r6
    4fa0:	300e943a 	slli	r7,r6,16
    4fa4:	18ffffcc 	andi	r3,r3,65535
    4fa8:	1008d43a 	srli	r4,r2,16
    4fac:	38ceb03a 	or	r7,r7,r3
    4fb0:	49c00015 	stw	r7,0(r9)
    4fb4:	300dd43a 	srai	r6,r6,16
    4fb8:	4a400104 	addi	r9,r9,4
    4fbc:	a17fe52e 	bgeu	r20,r5,4f54 <__alt_data_end+0xff004f54>
    4fc0:	b0800017 	ldw	r2,0(r22)
    4fc4:	10000b1e 	bne	r2,zero,4ff4 <quorem+0x120>
    4fc8:	b0bfff04 	addi	r2,r22,-4
    4fcc:	a880082e 	bgeu	r21,r2,4ff0 <quorem+0x11c>
    4fd0:	b0ffff17 	ldw	r3,-4(r22)
    4fd4:	18000326 	beq	r3,zero,4fe4 <quorem+0x110>
    4fd8:	00000506 	br	4ff0 <quorem+0x11c>
    4fdc:	10c00017 	ldw	r3,0(r2)
    4fe0:	1800031e 	bne	r3,zero,4ff0 <quorem+0x11c>
    4fe4:	10bfff04 	addi	r2,r2,-4
    4fe8:	94bfffc4 	addi	r18,r18,-1
    4fec:	a8bffb36 	bltu	r21,r2,4fdc <__alt_data_end+0xff004fdc>
    4ff0:	84800415 	stw	r18,16(r16)
    4ff4:	b80b883a 	mov	r5,r23
    4ff8:	8009883a 	mov	r4,r16
    4ffc:	000882c0 	call	882c <__mcmp>
    5000:	10002616 	blt	r2,zero,509c <quorem+0x1c8>
    5004:	9cc00044 	addi	r19,r19,1
    5008:	a805883a 	mov	r2,r21
    500c:	000b883a 	mov	r5,zero
    5010:	11000017 	ldw	r4,0(r2)
    5014:	89800017 	ldw	r6,0(r17)
    5018:	10800104 	addi	r2,r2,4
    501c:	20ffffcc 	andi	r3,r4,65535
    5020:	194b883a 	add	r5,r3,r5
    5024:	30ffffcc 	andi	r3,r6,65535
    5028:	28c7c83a 	sub	r3,r5,r3
    502c:	300cd43a 	srli	r6,r6,16
    5030:	2008d43a 	srli	r4,r4,16
    5034:	180bd43a 	srai	r5,r3,16
    5038:	18ffffcc 	andi	r3,r3,65535
    503c:	2189c83a 	sub	r4,r4,r6
    5040:	2149883a 	add	r4,r4,r5
    5044:	200c943a 	slli	r6,r4,16
    5048:	8c400104 	addi	r17,r17,4
    504c:	200bd43a 	srai	r5,r4,16
    5050:	30c6b03a 	or	r3,r6,r3
    5054:	10ffff15 	stw	r3,-4(r2)
    5058:	a47fed2e 	bgeu	r20,r17,5010 <__alt_data_end+0xff005010>
    505c:	9485883a 	add	r2,r18,r18
    5060:	1085883a 	add	r2,r2,r2
    5064:	a887883a 	add	r3,r21,r2
    5068:	18800017 	ldw	r2,0(r3)
    506c:	10000b1e 	bne	r2,zero,509c <quorem+0x1c8>
    5070:	18bfff04 	addi	r2,r3,-4
    5074:	a880082e 	bgeu	r21,r2,5098 <quorem+0x1c4>
    5078:	18ffff17 	ldw	r3,-4(r3)
    507c:	18000326 	beq	r3,zero,508c <quorem+0x1b8>
    5080:	00000506 	br	5098 <quorem+0x1c4>
    5084:	10c00017 	ldw	r3,0(r2)
    5088:	1800031e 	bne	r3,zero,5098 <quorem+0x1c4>
    508c:	10bfff04 	addi	r2,r2,-4
    5090:	94bfffc4 	addi	r18,r18,-1
    5094:	a8bffb36 	bltu	r21,r2,5084 <__alt_data_end+0xff005084>
    5098:	84800415 	stw	r18,16(r16)
    509c:	9805883a 	mov	r2,r19
    50a0:	dfc00817 	ldw	ra,32(sp)
    50a4:	ddc00717 	ldw	r23,28(sp)
    50a8:	dd800617 	ldw	r22,24(sp)
    50ac:	dd400517 	ldw	r21,20(sp)
    50b0:	dd000417 	ldw	r20,16(sp)
    50b4:	dcc00317 	ldw	r19,12(sp)
    50b8:	dc800217 	ldw	r18,8(sp)
    50bc:	dc400117 	ldw	r17,4(sp)
    50c0:	dc000017 	ldw	r16,0(sp)
    50c4:	dec00904 	addi	sp,sp,36
    50c8:	f800283a 	ret
    50cc:	0005883a 	mov	r2,zero
    50d0:	003ff306 	br	50a0 <__alt_data_end+0xff0050a0>

000050d4 <_dtoa_r>:
    50d4:	20801017 	ldw	r2,64(r4)
    50d8:	deffde04 	addi	sp,sp,-136
    50dc:	df002015 	stw	fp,128(sp)
    50e0:	dcc01b15 	stw	r19,108(sp)
    50e4:	dc801a15 	stw	r18,104(sp)
    50e8:	dc401915 	stw	r17,100(sp)
    50ec:	dc001815 	stw	r16,96(sp)
    50f0:	dfc02115 	stw	ra,132(sp)
    50f4:	ddc01f15 	stw	r23,124(sp)
    50f8:	dd801e15 	stw	r22,120(sp)
    50fc:	dd401d15 	stw	r21,116(sp)
    5100:	dd001c15 	stw	r20,112(sp)
    5104:	d9c00315 	stw	r7,12(sp)
    5108:	2039883a 	mov	fp,r4
    510c:	3023883a 	mov	r17,r6
    5110:	2825883a 	mov	r18,r5
    5114:	dc002417 	ldw	r16,144(sp)
    5118:	3027883a 	mov	r19,r6
    511c:	10000826 	beq	r2,zero,5140 <_dtoa_r+0x6c>
    5120:	21801117 	ldw	r6,68(r4)
    5124:	00c00044 	movi	r3,1
    5128:	100b883a 	mov	r5,r2
    512c:	1986983a 	sll	r3,r3,r6
    5130:	11800115 	stw	r6,4(r2)
    5134:	10c00215 	stw	r3,8(r2)
    5138:	000800c0 	call	800c <_Bfree>
    513c:	e0001015 	stw	zero,64(fp)
    5140:	88002e16 	blt	r17,zero,51fc <_dtoa_r+0x128>
    5144:	80000015 	stw	zero,0(r16)
    5148:	889ffc2c 	andhi	r2,r17,32752
    514c:	00dffc34 	movhi	r3,32752
    5150:	10c01c26 	beq	r2,r3,51c4 <_dtoa_r+0xf0>
    5154:	000d883a 	mov	r6,zero
    5158:	000f883a 	mov	r7,zero
    515c:	9009883a 	mov	r4,r18
    5160:	980b883a 	mov	r5,r19
    5164:	000ca280 	call	ca28 <__eqdf2>
    5168:	10002b1e 	bne	r2,zero,5218 <_dtoa_r+0x144>
    516c:	d9c02317 	ldw	r7,140(sp)
    5170:	00800044 	movi	r2,1
    5174:	38800015 	stw	r2,0(r7)
    5178:	d8802517 	ldw	r2,148(sp)
    517c:	10019e26 	beq	r2,zero,57f8 <_dtoa_r+0x724>
    5180:	d8c02517 	ldw	r3,148(sp)
    5184:	00800074 	movhi	r2,1
    5188:	10843b44 	addi	r2,r2,4333
    518c:	18800015 	stw	r2,0(r3)
    5190:	10bfffc4 	addi	r2,r2,-1
    5194:	dfc02117 	ldw	ra,132(sp)
    5198:	df002017 	ldw	fp,128(sp)
    519c:	ddc01f17 	ldw	r23,124(sp)
    51a0:	dd801e17 	ldw	r22,120(sp)
    51a4:	dd401d17 	ldw	r21,116(sp)
    51a8:	dd001c17 	ldw	r20,112(sp)
    51ac:	dcc01b17 	ldw	r19,108(sp)
    51b0:	dc801a17 	ldw	r18,104(sp)
    51b4:	dc401917 	ldw	r17,100(sp)
    51b8:	dc001817 	ldw	r16,96(sp)
    51bc:	dec02204 	addi	sp,sp,136
    51c0:	f800283a 	ret
    51c4:	d8c02317 	ldw	r3,140(sp)
    51c8:	0089c3c4 	movi	r2,9999
    51cc:	18800015 	stw	r2,0(r3)
    51d0:	90017726 	beq	r18,zero,57b0 <_dtoa_r+0x6dc>
    51d4:	00800074 	movhi	r2,1
    51d8:	10844704 	addi	r2,r2,4380
    51dc:	d9002517 	ldw	r4,148(sp)
    51e0:	203fec26 	beq	r4,zero,5194 <__alt_data_end+0xff005194>
    51e4:	10c000c7 	ldb	r3,3(r2)
    51e8:	1801781e 	bne	r3,zero,57cc <_dtoa_r+0x6f8>
    51ec:	10c000c4 	addi	r3,r2,3
    51f0:	d9802517 	ldw	r6,148(sp)
    51f4:	30c00015 	stw	r3,0(r6)
    51f8:	003fe606 	br	5194 <__alt_data_end+0xff005194>
    51fc:	04e00034 	movhi	r19,32768
    5200:	9cffffc4 	addi	r19,r19,-1
    5204:	00800044 	movi	r2,1
    5208:	8ce6703a 	and	r19,r17,r19
    520c:	80800015 	stw	r2,0(r16)
    5210:	9823883a 	mov	r17,r19
    5214:	003fcc06 	br	5148 <__alt_data_end+0xff005148>
    5218:	d8800204 	addi	r2,sp,8
    521c:	d8800015 	stw	r2,0(sp)
    5220:	d9c00104 	addi	r7,sp,4
    5224:	900b883a 	mov	r5,r18
    5228:	980d883a 	mov	r6,r19
    522c:	e009883a 	mov	r4,fp
    5230:	8820d53a 	srli	r16,r17,20
    5234:	0008bf80 	call	8bf8 <__d2b>
    5238:	d8800915 	stw	r2,36(sp)
    523c:	8001651e 	bne	r16,zero,57d4 <_dtoa_r+0x700>
    5240:	dd800217 	ldw	r22,8(sp)
    5244:	dc000117 	ldw	r16,4(sp)
    5248:	00800804 	movi	r2,32
    524c:	b421883a 	add	r16,r22,r16
    5250:	80c10c84 	addi	r3,r16,1074
    5254:	10c2d10e 	bge	r2,r3,5d9c <_dtoa_r+0xcc8>
    5258:	00801004 	movi	r2,64
    525c:	81010484 	addi	r4,r16,1042
    5260:	10c7c83a 	sub	r3,r2,r3
    5264:	9108d83a 	srl	r4,r18,r4
    5268:	88e2983a 	sll	r17,r17,r3
    526c:	2448b03a 	or	r4,r4,r17
    5270:	0001f440 	call	1f44 <__floatunsidf>
    5274:	017f8434 	movhi	r5,65040
    5278:	01800044 	movi	r6,1
    527c:	1009883a 	mov	r4,r2
    5280:	194b883a 	add	r5,r3,r5
    5284:	843fffc4 	addi	r16,r16,-1
    5288:	d9801115 	stw	r6,68(sp)
    528c:	000d883a 	mov	r6,zero
    5290:	01cffe34 	movhi	r7,16376
    5294:	000d3980 	call	d398 <__subdf3>
    5298:	0198dbf4 	movhi	r6,25455
    529c:	01cff4f4 	movhi	r7,16339
    52a0:	3190d844 	addi	r6,r6,17249
    52a4:	39e1e9c4 	addi	r7,r7,-30809
    52a8:	1009883a 	mov	r4,r2
    52ac:	180b883a 	mov	r5,r3
    52b0:	000cc800 	call	cc80 <__muldf3>
    52b4:	01a2d874 	movhi	r6,35681
    52b8:	01cff1f4 	movhi	r7,16327
    52bc:	31b22cc4 	addi	r6,r6,-14157
    52c0:	39e28a04 	addi	r7,r7,-30168
    52c4:	180b883a 	mov	r5,r3
    52c8:	1009883a 	mov	r4,r2
    52cc:	000c17c0 	call	c17c <__adddf3>
    52d0:	8009883a 	mov	r4,r16
    52d4:	1029883a 	mov	r20,r2
    52d8:	1823883a 	mov	r17,r3
    52dc:	000dd140 	call	dd14 <__floatsidf>
    52e0:	019427f4 	movhi	r6,20639
    52e4:	01cff4f4 	movhi	r7,16339
    52e8:	319e7ec4 	addi	r6,r6,31227
    52ec:	39d104c4 	addi	r7,r7,17427
    52f0:	1009883a 	mov	r4,r2
    52f4:	180b883a 	mov	r5,r3
    52f8:	000cc800 	call	cc80 <__muldf3>
    52fc:	100d883a 	mov	r6,r2
    5300:	180f883a 	mov	r7,r3
    5304:	a009883a 	mov	r4,r20
    5308:	880b883a 	mov	r5,r17
    530c:	000c17c0 	call	c17c <__adddf3>
    5310:	1009883a 	mov	r4,r2
    5314:	180b883a 	mov	r5,r3
    5318:	1029883a 	mov	r20,r2
    531c:	1823883a 	mov	r17,r3
    5320:	000dc940 	call	dc94 <__fixdfsi>
    5324:	000d883a 	mov	r6,zero
    5328:	000f883a 	mov	r7,zero
    532c:	a009883a 	mov	r4,r20
    5330:	880b883a 	mov	r5,r17
    5334:	d8800515 	stw	r2,20(sp)
    5338:	000cb8c0 	call	cb8c <__ledf2>
    533c:	10028716 	blt	r2,zero,5d5c <_dtoa_r+0xc88>
    5340:	d8c00517 	ldw	r3,20(sp)
    5344:	00800584 	movi	r2,22
    5348:	10c27536 	bltu	r2,r3,5d20 <_dtoa_r+0xc4c>
    534c:	180490fa 	slli	r2,r3,3
    5350:	00c00074 	movhi	r3,1
    5354:	18c46304 	addi	r3,r3,4492
    5358:	1885883a 	add	r2,r3,r2
    535c:	11000017 	ldw	r4,0(r2)
    5360:	11400117 	ldw	r5,4(r2)
    5364:	900d883a 	mov	r6,r18
    5368:	980f883a 	mov	r7,r19
    536c:	000cab00 	call	cab0 <__gedf2>
    5370:	00828d0e 	bge	zero,r2,5da8 <_dtoa_r+0xcd4>
    5374:	d9000517 	ldw	r4,20(sp)
    5378:	d8000e15 	stw	zero,56(sp)
    537c:	213fffc4 	addi	r4,r4,-1
    5380:	d9000515 	stw	r4,20(sp)
    5384:	b42dc83a 	sub	r22,r22,r16
    5388:	b5bfffc4 	addi	r22,r22,-1
    538c:	b0026f16 	blt	r22,zero,5d4c <_dtoa_r+0xc78>
    5390:	d8000815 	stw	zero,32(sp)
    5394:	d9c00517 	ldw	r7,20(sp)
    5398:	38026416 	blt	r7,zero,5d2c <_dtoa_r+0xc58>
    539c:	b1ed883a 	add	r22,r22,r7
    53a0:	d9c00d15 	stw	r7,52(sp)
    53a4:	d8000a15 	stw	zero,40(sp)
    53a8:	d9800317 	ldw	r6,12(sp)
    53ac:	00800244 	movi	r2,9
    53b0:	11811436 	bltu	r2,r6,5804 <_dtoa_r+0x730>
    53b4:	00800144 	movi	r2,5
    53b8:	1184e10e 	bge	r2,r6,6740 <_dtoa_r+0x166c>
    53bc:	31bfff04 	addi	r6,r6,-4
    53c0:	d9800315 	stw	r6,12(sp)
    53c4:	0023883a 	mov	r17,zero
    53c8:	d9800317 	ldw	r6,12(sp)
    53cc:	008000c4 	movi	r2,3
    53d0:	30836726 	beq	r6,r2,6170 <_dtoa_r+0x109c>
    53d4:	1183410e 	bge	r2,r6,60dc <_dtoa_r+0x1008>
    53d8:	d9c00317 	ldw	r7,12(sp)
    53dc:	00800104 	movi	r2,4
    53e0:	38827c26 	beq	r7,r2,5dd4 <_dtoa_r+0xd00>
    53e4:	00800144 	movi	r2,5
    53e8:	3884c41e 	bne	r7,r2,66fc <_dtoa_r+0x1628>
    53ec:	00800044 	movi	r2,1
    53f0:	d8800b15 	stw	r2,44(sp)
    53f4:	d8c00517 	ldw	r3,20(sp)
    53f8:	d9002217 	ldw	r4,136(sp)
    53fc:	1907883a 	add	r3,r3,r4
    5400:	19800044 	addi	r6,r3,1
    5404:	d8c00c15 	stw	r3,48(sp)
    5408:	d9800615 	stw	r6,24(sp)
    540c:	0183a40e 	bge	zero,r6,62a0 <_dtoa_r+0x11cc>
    5410:	d9800617 	ldw	r6,24(sp)
    5414:	3021883a 	mov	r16,r6
    5418:	e0001115 	stw	zero,68(fp)
    541c:	008005c4 	movi	r2,23
    5420:	1184c92e 	bgeu	r2,r6,6748 <_dtoa_r+0x1674>
    5424:	00c00044 	movi	r3,1
    5428:	00800104 	movi	r2,4
    542c:	1085883a 	add	r2,r2,r2
    5430:	11000504 	addi	r4,r2,20
    5434:	180b883a 	mov	r5,r3
    5438:	18c00044 	addi	r3,r3,1
    543c:	313ffb2e 	bgeu	r6,r4,542c <__alt_data_end+0xff00542c>
    5440:	e1401115 	stw	r5,68(fp)
    5444:	e009883a 	mov	r4,fp
    5448:	0007f640 	call	7f64 <_Balloc>
    544c:	d8800715 	stw	r2,28(sp)
    5450:	e0801015 	stw	r2,64(fp)
    5454:	00800384 	movi	r2,14
    5458:	1400f736 	bltu	r2,r16,5838 <_dtoa_r+0x764>
    545c:	8800f626 	beq	r17,zero,5838 <_dtoa_r+0x764>
    5460:	d9c00517 	ldw	r7,20(sp)
    5464:	01c39a0e 	bge	zero,r7,62d0 <_dtoa_r+0x11fc>
    5468:	388003cc 	andi	r2,r7,15
    546c:	100490fa 	slli	r2,r2,3
    5470:	382bd13a 	srai	r21,r7,4
    5474:	00c00074 	movhi	r3,1
    5478:	18c46304 	addi	r3,r3,4492
    547c:	1885883a 	add	r2,r3,r2
    5480:	a8c0040c 	andi	r3,r21,16
    5484:	12400017 	ldw	r9,0(r2)
    5488:	12000117 	ldw	r8,4(r2)
    548c:	18037926 	beq	r3,zero,6274 <_dtoa_r+0x11a0>
    5490:	00800074 	movhi	r2,1
    5494:	10845904 	addi	r2,r2,4452
    5498:	11800817 	ldw	r6,32(r2)
    549c:	11c00917 	ldw	r7,36(r2)
    54a0:	9009883a 	mov	r4,r18
    54a4:	980b883a 	mov	r5,r19
    54a8:	da001715 	stw	r8,92(sp)
    54ac:	da401615 	stw	r9,88(sp)
    54b0:	000165c0 	call	165c <__divdf3>
    54b4:	da001717 	ldw	r8,92(sp)
    54b8:	da401617 	ldw	r9,88(sp)
    54bc:	ad4003cc 	andi	r21,r21,15
    54c0:	040000c4 	movi	r16,3
    54c4:	1023883a 	mov	r17,r2
    54c8:	1829883a 	mov	r20,r3
    54cc:	a8001126 	beq	r21,zero,5514 <_dtoa_r+0x440>
    54d0:	05c00074 	movhi	r23,1
    54d4:	bdc45904 	addi	r23,r23,4452
    54d8:	4805883a 	mov	r2,r9
    54dc:	4007883a 	mov	r3,r8
    54e0:	a980004c 	andi	r6,r21,1
    54e4:	1009883a 	mov	r4,r2
    54e8:	a82bd07a 	srai	r21,r21,1
    54ec:	180b883a 	mov	r5,r3
    54f0:	30000426 	beq	r6,zero,5504 <_dtoa_r+0x430>
    54f4:	b9800017 	ldw	r6,0(r23)
    54f8:	b9c00117 	ldw	r7,4(r23)
    54fc:	84000044 	addi	r16,r16,1
    5500:	000cc800 	call	cc80 <__muldf3>
    5504:	bdc00204 	addi	r23,r23,8
    5508:	a83ff51e 	bne	r21,zero,54e0 <__alt_data_end+0xff0054e0>
    550c:	1013883a 	mov	r9,r2
    5510:	1811883a 	mov	r8,r3
    5514:	480d883a 	mov	r6,r9
    5518:	400f883a 	mov	r7,r8
    551c:	8809883a 	mov	r4,r17
    5520:	a00b883a 	mov	r5,r20
    5524:	000165c0 	call	165c <__divdf3>
    5528:	d8800f15 	stw	r2,60(sp)
    552c:	d8c01015 	stw	r3,64(sp)
    5530:	d8c00e17 	ldw	r3,56(sp)
    5534:	18000626 	beq	r3,zero,5550 <_dtoa_r+0x47c>
    5538:	d9000f17 	ldw	r4,60(sp)
    553c:	d9401017 	ldw	r5,64(sp)
    5540:	000d883a 	mov	r6,zero
    5544:	01cffc34 	movhi	r7,16368
    5548:	000cb8c0 	call	cb8c <__ledf2>
    554c:	10040b16 	blt	r2,zero,657c <_dtoa_r+0x14a8>
    5550:	8009883a 	mov	r4,r16
    5554:	000dd140 	call	dd14 <__floatsidf>
    5558:	d9800f17 	ldw	r6,60(sp)
    555c:	d9c01017 	ldw	r7,64(sp)
    5560:	1009883a 	mov	r4,r2
    5564:	180b883a 	mov	r5,r3
    5568:	000cc800 	call	cc80 <__muldf3>
    556c:	000d883a 	mov	r6,zero
    5570:	01d00734 	movhi	r7,16412
    5574:	1009883a 	mov	r4,r2
    5578:	180b883a 	mov	r5,r3
    557c:	000c17c0 	call	c17c <__adddf3>
    5580:	1021883a 	mov	r16,r2
    5584:	d8800617 	ldw	r2,24(sp)
    5588:	047f3034 	movhi	r17,64704
    558c:	1c63883a 	add	r17,r3,r17
    5590:	10031826 	beq	r2,zero,61f4 <_dtoa_r+0x1120>
    5594:	d8c00517 	ldw	r3,20(sp)
    5598:	db000617 	ldw	r12,24(sp)
    559c:	d8c01315 	stw	r3,76(sp)
    55a0:	d9000b17 	ldw	r4,44(sp)
    55a4:	20038f26 	beq	r4,zero,63e4 <_dtoa_r+0x1310>
    55a8:	60bfffc4 	addi	r2,r12,-1
    55ac:	100490fa 	slli	r2,r2,3
    55b0:	00c00074 	movhi	r3,1
    55b4:	18c46304 	addi	r3,r3,4492
    55b8:	1885883a 	add	r2,r3,r2
    55bc:	11800017 	ldw	r6,0(r2)
    55c0:	11c00117 	ldw	r7,4(r2)
    55c4:	d8800717 	ldw	r2,28(sp)
    55c8:	0009883a 	mov	r4,zero
    55cc:	014ff834 	movhi	r5,16352
    55d0:	db001615 	stw	r12,88(sp)
    55d4:	15c00044 	addi	r23,r2,1
    55d8:	000165c0 	call	165c <__divdf3>
    55dc:	800d883a 	mov	r6,r16
    55e0:	880f883a 	mov	r7,r17
    55e4:	1009883a 	mov	r4,r2
    55e8:	180b883a 	mov	r5,r3
    55ec:	000d3980 	call	d398 <__subdf3>
    55f0:	d9401017 	ldw	r5,64(sp)
    55f4:	d9000f17 	ldw	r4,60(sp)
    55f8:	102b883a 	mov	r21,r2
    55fc:	d8c01215 	stw	r3,72(sp)
    5600:	000dc940 	call	dc94 <__fixdfsi>
    5604:	1009883a 	mov	r4,r2
    5608:	1029883a 	mov	r20,r2
    560c:	000dd140 	call	dd14 <__floatsidf>
    5610:	d9000f17 	ldw	r4,60(sp)
    5614:	d9401017 	ldw	r5,64(sp)
    5618:	100d883a 	mov	r6,r2
    561c:	180f883a 	mov	r7,r3
    5620:	000d3980 	call	d398 <__subdf3>
    5624:	1823883a 	mov	r17,r3
    5628:	d8c00717 	ldw	r3,28(sp)
    562c:	d9401217 	ldw	r5,72(sp)
    5630:	a2000c04 	addi	r8,r20,48
    5634:	1021883a 	mov	r16,r2
    5638:	1a000005 	stb	r8,0(r3)
    563c:	800d883a 	mov	r6,r16
    5640:	880f883a 	mov	r7,r17
    5644:	a809883a 	mov	r4,r21
    5648:	4029883a 	mov	r20,r8
    564c:	000cab00 	call	cab0 <__gedf2>
    5650:	00841d16 	blt	zero,r2,66c8 <_dtoa_r+0x15f4>
    5654:	800d883a 	mov	r6,r16
    5658:	880f883a 	mov	r7,r17
    565c:	0009883a 	mov	r4,zero
    5660:	014ffc34 	movhi	r5,16368
    5664:	000d3980 	call	d398 <__subdf3>
    5668:	d9401217 	ldw	r5,72(sp)
    566c:	100d883a 	mov	r6,r2
    5670:	180f883a 	mov	r7,r3
    5674:	a809883a 	mov	r4,r21
    5678:	000cab00 	call	cab0 <__gedf2>
    567c:	db001617 	ldw	r12,88(sp)
    5680:	00840e16 	blt	zero,r2,66bc <_dtoa_r+0x15e8>
    5684:	00800044 	movi	r2,1
    5688:	13006b0e 	bge	r2,r12,5838 <_dtoa_r+0x764>
    568c:	d9000717 	ldw	r4,28(sp)
    5690:	dd800f15 	stw	r22,60(sp)
    5694:	dcc01015 	stw	r19,64(sp)
    5698:	2319883a 	add	r12,r4,r12
    569c:	dcc01217 	ldw	r19,72(sp)
    56a0:	602d883a 	mov	r22,r12
    56a4:	dc801215 	stw	r18,72(sp)
    56a8:	b825883a 	mov	r18,r23
    56ac:	00000906 	br	56d4 <_dtoa_r+0x600>
    56b0:	000d3980 	call	d398 <__subdf3>
    56b4:	a80d883a 	mov	r6,r21
    56b8:	980f883a 	mov	r7,r19
    56bc:	1009883a 	mov	r4,r2
    56c0:	180b883a 	mov	r5,r3
    56c4:	000cb8c0 	call	cb8c <__ledf2>
    56c8:	1003e816 	blt	r2,zero,666c <_dtoa_r+0x1598>
    56cc:	b825883a 	mov	r18,r23
    56d0:	bd83e926 	beq	r23,r22,6678 <_dtoa_r+0x15a4>
    56d4:	a809883a 	mov	r4,r21
    56d8:	980b883a 	mov	r5,r19
    56dc:	000d883a 	mov	r6,zero
    56e0:	01d00934 	movhi	r7,16420
    56e4:	000cc800 	call	cc80 <__muldf3>
    56e8:	000d883a 	mov	r6,zero
    56ec:	01d00934 	movhi	r7,16420
    56f0:	8009883a 	mov	r4,r16
    56f4:	880b883a 	mov	r5,r17
    56f8:	102b883a 	mov	r21,r2
    56fc:	1827883a 	mov	r19,r3
    5700:	000cc800 	call	cc80 <__muldf3>
    5704:	180b883a 	mov	r5,r3
    5708:	1009883a 	mov	r4,r2
    570c:	1821883a 	mov	r16,r3
    5710:	1023883a 	mov	r17,r2
    5714:	000dc940 	call	dc94 <__fixdfsi>
    5718:	1009883a 	mov	r4,r2
    571c:	1029883a 	mov	r20,r2
    5720:	000dd140 	call	dd14 <__floatsidf>
    5724:	8809883a 	mov	r4,r17
    5728:	800b883a 	mov	r5,r16
    572c:	100d883a 	mov	r6,r2
    5730:	180f883a 	mov	r7,r3
    5734:	000d3980 	call	d398 <__subdf3>
    5738:	a5000c04 	addi	r20,r20,48
    573c:	a80d883a 	mov	r6,r21
    5740:	980f883a 	mov	r7,r19
    5744:	1009883a 	mov	r4,r2
    5748:	180b883a 	mov	r5,r3
    574c:	95000005 	stb	r20,0(r18)
    5750:	1021883a 	mov	r16,r2
    5754:	1823883a 	mov	r17,r3
    5758:	000cb8c0 	call	cb8c <__ledf2>
    575c:	bdc00044 	addi	r23,r23,1
    5760:	800d883a 	mov	r6,r16
    5764:	880f883a 	mov	r7,r17
    5768:	0009883a 	mov	r4,zero
    576c:	014ffc34 	movhi	r5,16368
    5770:	103fcf0e 	bge	r2,zero,56b0 <__alt_data_end+0xff0056b0>
    5774:	d8c01317 	ldw	r3,76(sp)
    5778:	d8c00515 	stw	r3,20(sp)
    577c:	d9400917 	ldw	r5,36(sp)
    5780:	e009883a 	mov	r4,fp
    5784:	000800c0 	call	800c <_Bfree>
    5788:	d9000517 	ldw	r4,20(sp)
    578c:	d9802317 	ldw	r6,140(sp)
    5790:	d9c02517 	ldw	r7,148(sp)
    5794:	b8000005 	stb	zero,0(r23)
    5798:	20800044 	addi	r2,r4,1
    579c:	30800015 	stw	r2,0(r6)
    57a0:	3802aa26 	beq	r7,zero,624c <_dtoa_r+0x1178>
    57a4:	3dc00015 	stw	r23,0(r7)
    57a8:	d8800717 	ldw	r2,28(sp)
    57ac:	003e7906 	br	5194 <__alt_data_end+0xff005194>
    57b0:	00800434 	movhi	r2,16
    57b4:	10bfffc4 	addi	r2,r2,-1
    57b8:	88a2703a 	and	r17,r17,r2
    57bc:	883e851e 	bne	r17,zero,51d4 <__alt_data_end+0xff0051d4>
    57c0:	00800074 	movhi	r2,1
    57c4:	10844404 	addi	r2,r2,4368
    57c8:	003e8406 	br	51dc <__alt_data_end+0xff0051dc>
    57cc:	10c00204 	addi	r3,r2,8
    57d0:	003e8706 	br	51f0 <__alt_data_end+0xff0051f0>
    57d4:	01400434 	movhi	r5,16
    57d8:	297fffc4 	addi	r5,r5,-1
    57dc:	994a703a 	and	r5,r19,r5
    57e0:	9009883a 	mov	r4,r18
    57e4:	843f0044 	addi	r16,r16,-1023
    57e8:	294ffc34 	orhi	r5,r5,16368
    57ec:	dd800217 	ldw	r22,8(sp)
    57f0:	d8001115 	stw	zero,68(sp)
    57f4:	003ea506 	br	528c <__alt_data_end+0xff00528c>
    57f8:	00800074 	movhi	r2,1
    57fc:	10843b04 	addi	r2,r2,4332
    5800:	003e6406 	br	5194 <__alt_data_end+0xff005194>
    5804:	e0001115 	stw	zero,68(fp)
    5808:	000b883a 	mov	r5,zero
    580c:	e009883a 	mov	r4,fp
    5810:	0007f640 	call	7f64 <_Balloc>
    5814:	01bfffc4 	movi	r6,-1
    5818:	01c00044 	movi	r7,1
    581c:	d8800715 	stw	r2,28(sp)
    5820:	d9800c15 	stw	r6,48(sp)
    5824:	e0801015 	stw	r2,64(fp)
    5828:	d8000315 	stw	zero,12(sp)
    582c:	d9c00b15 	stw	r7,44(sp)
    5830:	d9800615 	stw	r6,24(sp)
    5834:	d8002215 	stw	zero,136(sp)
    5838:	d8800117 	ldw	r2,4(sp)
    583c:	10008916 	blt	r2,zero,5a64 <_dtoa_r+0x990>
    5840:	d9000517 	ldw	r4,20(sp)
    5844:	00c00384 	movi	r3,14
    5848:	19008616 	blt	r3,r4,5a64 <_dtoa_r+0x990>
    584c:	200490fa 	slli	r2,r4,3
    5850:	00c00074 	movhi	r3,1
    5854:	d9802217 	ldw	r6,136(sp)
    5858:	18c46304 	addi	r3,r3,4492
    585c:	1885883a 	add	r2,r3,r2
    5860:	14000017 	ldw	r16,0(r2)
    5864:	14400117 	ldw	r17,4(r2)
    5868:	30016316 	blt	r6,zero,5df8 <_dtoa_r+0xd24>
    586c:	800d883a 	mov	r6,r16
    5870:	880f883a 	mov	r7,r17
    5874:	9009883a 	mov	r4,r18
    5878:	980b883a 	mov	r5,r19
    587c:	000165c0 	call	165c <__divdf3>
    5880:	180b883a 	mov	r5,r3
    5884:	1009883a 	mov	r4,r2
    5888:	000dc940 	call	dc94 <__fixdfsi>
    588c:	1009883a 	mov	r4,r2
    5890:	102b883a 	mov	r21,r2
    5894:	000dd140 	call	dd14 <__floatsidf>
    5898:	800d883a 	mov	r6,r16
    589c:	880f883a 	mov	r7,r17
    58a0:	1009883a 	mov	r4,r2
    58a4:	180b883a 	mov	r5,r3
    58a8:	000cc800 	call	cc80 <__muldf3>
    58ac:	100d883a 	mov	r6,r2
    58b0:	180f883a 	mov	r7,r3
    58b4:	9009883a 	mov	r4,r18
    58b8:	980b883a 	mov	r5,r19
    58bc:	000d3980 	call	d398 <__subdf3>
    58c0:	d9c00717 	ldw	r7,28(sp)
    58c4:	1009883a 	mov	r4,r2
    58c8:	a8800c04 	addi	r2,r21,48
    58cc:	38800005 	stb	r2,0(r7)
    58d0:	3dc00044 	addi	r23,r7,1
    58d4:	d9c00617 	ldw	r7,24(sp)
    58d8:	01800044 	movi	r6,1
    58dc:	180b883a 	mov	r5,r3
    58e0:	2005883a 	mov	r2,r4
    58e4:	39803826 	beq	r7,r6,59c8 <_dtoa_r+0x8f4>
    58e8:	000d883a 	mov	r6,zero
    58ec:	01d00934 	movhi	r7,16420
    58f0:	000cc800 	call	cc80 <__muldf3>
    58f4:	000d883a 	mov	r6,zero
    58f8:	000f883a 	mov	r7,zero
    58fc:	1009883a 	mov	r4,r2
    5900:	180b883a 	mov	r5,r3
    5904:	1025883a 	mov	r18,r2
    5908:	1827883a 	mov	r19,r3
    590c:	000ca280 	call	ca28 <__eqdf2>
    5910:	103f9a26 	beq	r2,zero,577c <__alt_data_end+0xff00577c>
    5914:	d9c00617 	ldw	r7,24(sp)
    5918:	d8c00717 	ldw	r3,28(sp)
    591c:	b829883a 	mov	r20,r23
    5920:	38bfffc4 	addi	r2,r7,-1
    5924:	18ad883a 	add	r22,r3,r2
    5928:	00000a06 	br	5954 <_dtoa_r+0x880>
    592c:	000cc800 	call	cc80 <__muldf3>
    5930:	000d883a 	mov	r6,zero
    5934:	000f883a 	mov	r7,zero
    5938:	1009883a 	mov	r4,r2
    593c:	180b883a 	mov	r5,r3
    5940:	1025883a 	mov	r18,r2
    5944:	1827883a 	mov	r19,r3
    5948:	b829883a 	mov	r20,r23
    594c:	000ca280 	call	ca28 <__eqdf2>
    5950:	103f8a26 	beq	r2,zero,577c <__alt_data_end+0xff00577c>
    5954:	800d883a 	mov	r6,r16
    5958:	880f883a 	mov	r7,r17
    595c:	9009883a 	mov	r4,r18
    5960:	980b883a 	mov	r5,r19
    5964:	000165c0 	call	165c <__divdf3>
    5968:	180b883a 	mov	r5,r3
    596c:	1009883a 	mov	r4,r2
    5970:	000dc940 	call	dc94 <__fixdfsi>
    5974:	1009883a 	mov	r4,r2
    5978:	102b883a 	mov	r21,r2
    597c:	000dd140 	call	dd14 <__floatsidf>
    5980:	800d883a 	mov	r6,r16
    5984:	880f883a 	mov	r7,r17
    5988:	1009883a 	mov	r4,r2
    598c:	180b883a 	mov	r5,r3
    5990:	000cc800 	call	cc80 <__muldf3>
    5994:	100d883a 	mov	r6,r2
    5998:	180f883a 	mov	r7,r3
    599c:	9009883a 	mov	r4,r18
    59a0:	980b883a 	mov	r5,r19
    59a4:	000d3980 	call	d398 <__subdf3>
    59a8:	aa000c04 	addi	r8,r21,48
    59ac:	a2000005 	stb	r8,0(r20)
    59b0:	000d883a 	mov	r6,zero
    59b4:	01d00934 	movhi	r7,16420
    59b8:	1009883a 	mov	r4,r2
    59bc:	180b883a 	mov	r5,r3
    59c0:	a5c00044 	addi	r23,r20,1
    59c4:	b53fd91e 	bne	r22,r20,592c <__alt_data_end+0xff00592c>
    59c8:	100d883a 	mov	r6,r2
    59cc:	180f883a 	mov	r7,r3
    59d0:	1009883a 	mov	r4,r2
    59d4:	180b883a 	mov	r5,r3
    59d8:	000c17c0 	call	c17c <__adddf3>
    59dc:	100d883a 	mov	r6,r2
    59e0:	180f883a 	mov	r7,r3
    59e4:	8009883a 	mov	r4,r16
    59e8:	880b883a 	mov	r5,r17
    59ec:	1027883a 	mov	r19,r2
    59f0:	1825883a 	mov	r18,r3
    59f4:	000cb8c0 	call	cb8c <__ledf2>
    59f8:	10000816 	blt	r2,zero,5a1c <_dtoa_r+0x948>
    59fc:	980d883a 	mov	r6,r19
    5a00:	900f883a 	mov	r7,r18
    5a04:	8009883a 	mov	r4,r16
    5a08:	880b883a 	mov	r5,r17
    5a0c:	000ca280 	call	ca28 <__eqdf2>
    5a10:	103f5a1e 	bne	r2,zero,577c <__alt_data_end+0xff00577c>
    5a14:	ad40004c 	andi	r21,r21,1
    5a18:	a83f5826 	beq	r21,zero,577c <__alt_data_end+0xff00577c>
    5a1c:	bd3fffc3 	ldbu	r20,-1(r23)
    5a20:	b8bfffc4 	addi	r2,r23,-1
    5a24:	1007883a 	mov	r3,r2
    5a28:	01400e44 	movi	r5,57
    5a2c:	d9800717 	ldw	r6,28(sp)
    5a30:	00000506 	br	5a48 <_dtoa_r+0x974>
    5a34:	18ffffc4 	addi	r3,r3,-1
    5a38:	11824726 	beq	r2,r6,6358 <_dtoa_r+0x1284>
    5a3c:	1d000003 	ldbu	r20,0(r3)
    5a40:	102f883a 	mov	r23,r2
    5a44:	10bfffc4 	addi	r2,r2,-1
    5a48:	a1003fcc 	andi	r4,r20,255
    5a4c:	2100201c 	xori	r4,r4,128
    5a50:	213fe004 	addi	r4,r4,-128
    5a54:	217ff726 	beq	r4,r5,5a34 <__alt_data_end+0xff005a34>
    5a58:	a2000044 	addi	r8,r20,1
    5a5c:	12000005 	stb	r8,0(r2)
    5a60:	003f4606 	br	577c <__alt_data_end+0xff00577c>
    5a64:	d9000b17 	ldw	r4,44(sp)
    5a68:	2000c826 	beq	r4,zero,5d8c <_dtoa_r+0xcb8>
    5a6c:	d9800317 	ldw	r6,12(sp)
    5a70:	00c00044 	movi	r3,1
    5a74:	1980f90e 	bge	r3,r6,5e5c <_dtoa_r+0xd88>
    5a78:	d8800617 	ldw	r2,24(sp)
    5a7c:	d8c00a17 	ldw	r3,40(sp)
    5a80:	157fffc4 	addi	r21,r2,-1
    5a84:	1d41f316 	blt	r3,r21,6254 <_dtoa_r+0x1180>
    5a88:	1d6bc83a 	sub	r21,r3,r21
    5a8c:	d9c00617 	ldw	r7,24(sp)
    5a90:	3802aa16 	blt	r7,zero,653c <_dtoa_r+0x1468>
    5a94:	dd000817 	ldw	r20,32(sp)
    5a98:	d8800617 	ldw	r2,24(sp)
    5a9c:	d8c00817 	ldw	r3,32(sp)
    5aa0:	01400044 	movi	r5,1
    5aa4:	e009883a 	mov	r4,fp
    5aa8:	1887883a 	add	r3,r3,r2
    5aac:	d8c00815 	stw	r3,32(sp)
    5ab0:	b0ad883a 	add	r22,r22,r2
    5ab4:	00083700 	call	8370 <__i2b>
    5ab8:	1023883a 	mov	r17,r2
    5abc:	a0000826 	beq	r20,zero,5ae0 <_dtoa_r+0xa0c>
    5ac0:	0580070e 	bge	zero,r22,5ae0 <_dtoa_r+0xa0c>
    5ac4:	a005883a 	mov	r2,r20
    5ac8:	b500b916 	blt	r22,r20,5db0 <_dtoa_r+0xcdc>
    5acc:	d9000817 	ldw	r4,32(sp)
    5ad0:	a0a9c83a 	sub	r20,r20,r2
    5ad4:	b0adc83a 	sub	r22,r22,r2
    5ad8:	2089c83a 	sub	r4,r4,r2
    5adc:	d9000815 	stw	r4,32(sp)
    5ae0:	d9800a17 	ldw	r6,40(sp)
    5ae4:	0181810e 	bge	zero,r6,60ec <_dtoa_r+0x1018>
    5ae8:	d9c00b17 	ldw	r7,44(sp)
    5aec:	3800b326 	beq	r7,zero,5dbc <_dtoa_r+0xce8>
    5af0:	a800b226 	beq	r21,zero,5dbc <_dtoa_r+0xce8>
    5af4:	880b883a 	mov	r5,r17
    5af8:	a80d883a 	mov	r6,r21
    5afc:	e009883a 	mov	r4,fp
    5b00:	00085a40 	call	85a4 <__pow5mult>
    5b04:	d9800917 	ldw	r6,36(sp)
    5b08:	100b883a 	mov	r5,r2
    5b0c:	e009883a 	mov	r4,fp
    5b10:	1023883a 	mov	r17,r2
    5b14:	00083ac0 	call	83ac <__multiply>
    5b18:	1021883a 	mov	r16,r2
    5b1c:	d8800a17 	ldw	r2,40(sp)
    5b20:	d9400917 	ldw	r5,36(sp)
    5b24:	e009883a 	mov	r4,fp
    5b28:	1545c83a 	sub	r2,r2,r21
    5b2c:	d8800a15 	stw	r2,40(sp)
    5b30:	000800c0 	call	800c <_Bfree>
    5b34:	d8c00a17 	ldw	r3,40(sp)
    5b38:	18009f1e 	bne	r3,zero,5db8 <_dtoa_r+0xce4>
    5b3c:	05c00044 	movi	r23,1
    5b40:	e009883a 	mov	r4,fp
    5b44:	b80b883a 	mov	r5,r23
    5b48:	00083700 	call	8370 <__i2b>
    5b4c:	d9000d17 	ldw	r4,52(sp)
    5b50:	102b883a 	mov	r21,r2
    5b54:	2000ce26 	beq	r4,zero,5e90 <_dtoa_r+0xdbc>
    5b58:	200d883a 	mov	r6,r4
    5b5c:	100b883a 	mov	r5,r2
    5b60:	e009883a 	mov	r4,fp
    5b64:	00085a40 	call	85a4 <__pow5mult>
    5b68:	d9800317 	ldw	r6,12(sp)
    5b6c:	102b883a 	mov	r21,r2
    5b70:	b981810e 	bge	r23,r6,6178 <_dtoa_r+0x10a4>
    5b74:	0027883a 	mov	r19,zero
    5b78:	a8800417 	ldw	r2,16(r21)
    5b7c:	05c00804 	movi	r23,32
    5b80:	10800104 	addi	r2,r2,4
    5b84:	1085883a 	add	r2,r2,r2
    5b88:	1085883a 	add	r2,r2,r2
    5b8c:	a885883a 	add	r2,r21,r2
    5b90:	11000017 	ldw	r4,0(r2)
    5b94:	00082580 	call	8258 <__hi0bits>
    5b98:	b885c83a 	sub	r2,r23,r2
    5b9c:	1585883a 	add	r2,r2,r22
    5ba0:	108007cc 	andi	r2,r2,31
    5ba4:	1000b326 	beq	r2,zero,5e74 <_dtoa_r+0xda0>
    5ba8:	00c00804 	movi	r3,32
    5bac:	1887c83a 	sub	r3,r3,r2
    5bb0:	01000104 	movi	r4,4
    5bb4:	20c2cd0e 	bge	r4,r3,66ec <_dtoa_r+0x1618>
    5bb8:	00c00704 	movi	r3,28
    5bbc:	1885c83a 	sub	r2,r3,r2
    5bc0:	d8c00817 	ldw	r3,32(sp)
    5bc4:	a0a9883a 	add	r20,r20,r2
    5bc8:	b0ad883a 	add	r22,r22,r2
    5bcc:	1887883a 	add	r3,r3,r2
    5bd0:	d8c00815 	stw	r3,32(sp)
    5bd4:	d9800817 	ldw	r6,32(sp)
    5bd8:	0180040e 	bge	zero,r6,5bec <_dtoa_r+0xb18>
    5bdc:	800b883a 	mov	r5,r16
    5be0:	e009883a 	mov	r4,fp
    5be4:	00086e40 	call	86e4 <__lshift>
    5be8:	1021883a 	mov	r16,r2
    5bec:	0580050e 	bge	zero,r22,5c04 <_dtoa_r+0xb30>
    5bf0:	a80b883a 	mov	r5,r21
    5bf4:	b00d883a 	mov	r6,r22
    5bf8:	e009883a 	mov	r4,fp
    5bfc:	00086e40 	call	86e4 <__lshift>
    5c00:	102b883a 	mov	r21,r2
    5c04:	d9c00e17 	ldw	r7,56(sp)
    5c08:	3801211e 	bne	r7,zero,6090 <_dtoa_r+0xfbc>
    5c0c:	d9800617 	ldw	r6,24(sp)
    5c10:	0181380e 	bge	zero,r6,60f4 <_dtoa_r+0x1020>
    5c14:	d8c00b17 	ldw	r3,44(sp)
    5c18:	1800ab1e 	bne	r3,zero,5ec8 <_dtoa_r+0xdf4>
    5c1c:	dc800717 	ldw	r18,28(sp)
    5c20:	dcc00617 	ldw	r19,24(sp)
    5c24:	9029883a 	mov	r20,r18
    5c28:	00000206 	br	5c34 <_dtoa_r+0xb60>
    5c2c:	00080340 	call	8034 <__multadd>
    5c30:	1021883a 	mov	r16,r2
    5c34:	a80b883a 	mov	r5,r21
    5c38:	8009883a 	mov	r4,r16
    5c3c:	0004ed40 	call	4ed4 <quorem>
    5c40:	10800c04 	addi	r2,r2,48
    5c44:	90800005 	stb	r2,0(r18)
    5c48:	94800044 	addi	r18,r18,1
    5c4c:	9507c83a 	sub	r3,r18,r20
    5c50:	000f883a 	mov	r7,zero
    5c54:	01800284 	movi	r6,10
    5c58:	800b883a 	mov	r5,r16
    5c5c:	e009883a 	mov	r4,fp
    5c60:	1cfff216 	blt	r3,r19,5c2c <__alt_data_end+0xff005c2c>
    5c64:	1011883a 	mov	r8,r2
    5c68:	d8800617 	ldw	r2,24(sp)
    5c6c:	0082370e 	bge	zero,r2,654c <_dtoa_r+0x1478>
    5c70:	d9000717 	ldw	r4,28(sp)
    5c74:	0025883a 	mov	r18,zero
    5c78:	20af883a 	add	r23,r4,r2
    5c7c:	01800044 	movi	r6,1
    5c80:	800b883a 	mov	r5,r16
    5c84:	e009883a 	mov	r4,fp
    5c88:	da001715 	stw	r8,92(sp)
    5c8c:	00086e40 	call	86e4 <__lshift>
    5c90:	a80b883a 	mov	r5,r21
    5c94:	1009883a 	mov	r4,r2
    5c98:	d8800915 	stw	r2,36(sp)
    5c9c:	000882c0 	call	882c <__mcmp>
    5ca0:	da001717 	ldw	r8,92(sp)
    5ca4:	0081800e 	bge	zero,r2,62a8 <_dtoa_r+0x11d4>
    5ca8:	b93fffc3 	ldbu	r4,-1(r23)
    5cac:	b8bfffc4 	addi	r2,r23,-1
    5cb0:	1007883a 	mov	r3,r2
    5cb4:	01800e44 	movi	r6,57
    5cb8:	d9c00717 	ldw	r7,28(sp)
    5cbc:	00000506 	br	5cd4 <_dtoa_r+0xc00>
    5cc0:	18ffffc4 	addi	r3,r3,-1
    5cc4:	11c12326 	beq	r2,r7,6154 <_dtoa_r+0x1080>
    5cc8:	19000003 	ldbu	r4,0(r3)
    5ccc:	102f883a 	mov	r23,r2
    5cd0:	10bfffc4 	addi	r2,r2,-1
    5cd4:	21403fcc 	andi	r5,r4,255
    5cd8:	2940201c 	xori	r5,r5,128
    5cdc:	297fe004 	addi	r5,r5,-128
    5ce0:	29bff726 	beq	r5,r6,5cc0 <__alt_data_end+0xff005cc0>
    5ce4:	21000044 	addi	r4,r4,1
    5ce8:	11000005 	stb	r4,0(r2)
    5cec:	a80b883a 	mov	r5,r21
    5cf0:	e009883a 	mov	r4,fp
    5cf4:	000800c0 	call	800c <_Bfree>
    5cf8:	883ea026 	beq	r17,zero,577c <__alt_data_end+0xff00577c>
    5cfc:	90000426 	beq	r18,zero,5d10 <_dtoa_r+0xc3c>
    5d00:	94400326 	beq	r18,r17,5d10 <_dtoa_r+0xc3c>
    5d04:	900b883a 	mov	r5,r18
    5d08:	e009883a 	mov	r4,fp
    5d0c:	000800c0 	call	800c <_Bfree>
    5d10:	880b883a 	mov	r5,r17
    5d14:	e009883a 	mov	r4,fp
    5d18:	000800c0 	call	800c <_Bfree>
    5d1c:	003e9706 	br	577c <__alt_data_end+0xff00577c>
    5d20:	01800044 	movi	r6,1
    5d24:	d9800e15 	stw	r6,56(sp)
    5d28:	003d9606 	br	5384 <__alt_data_end+0xff005384>
    5d2c:	d8800817 	ldw	r2,32(sp)
    5d30:	d8c00517 	ldw	r3,20(sp)
    5d34:	d8000d15 	stw	zero,52(sp)
    5d38:	10c5c83a 	sub	r2,r2,r3
    5d3c:	00c9c83a 	sub	r4,zero,r3
    5d40:	d8800815 	stw	r2,32(sp)
    5d44:	d9000a15 	stw	r4,40(sp)
    5d48:	003d9706 	br	53a8 <__alt_data_end+0xff0053a8>
    5d4c:	05adc83a 	sub	r22,zero,r22
    5d50:	dd800815 	stw	r22,32(sp)
    5d54:	002d883a 	mov	r22,zero
    5d58:	003d8e06 	br	5394 <__alt_data_end+0xff005394>
    5d5c:	d9000517 	ldw	r4,20(sp)
    5d60:	000dd140 	call	dd14 <__floatsidf>
    5d64:	100d883a 	mov	r6,r2
    5d68:	180f883a 	mov	r7,r3
    5d6c:	a009883a 	mov	r4,r20
    5d70:	880b883a 	mov	r5,r17
    5d74:	000ca280 	call	ca28 <__eqdf2>
    5d78:	103d7126 	beq	r2,zero,5340 <__alt_data_end+0xff005340>
    5d7c:	d9c00517 	ldw	r7,20(sp)
    5d80:	39ffffc4 	addi	r7,r7,-1
    5d84:	d9c00515 	stw	r7,20(sp)
    5d88:	003d6d06 	br	5340 <__alt_data_end+0xff005340>
    5d8c:	dd400a17 	ldw	r21,40(sp)
    5d90:	dd000817 	ldw	r20,32(sp)
    5d94:	0023883a 	mov	r17,zero
    5d98:	003f4806 	br	5abc <__alt_data_end+0xff005abc>
    5d9c:	10e3c83a 	sub	r17,r2,r3
    5da0:	9448983a 	sll	r4,r18,r17
    5da4:	003d3206 	br	5270 <__alt_data_end+0xff005270>
    5da8:	d8000e15 	stw	zero,56(sp)
    5dac:	003d7506 	br	5384 <__alt_data_end+0xff005384>
    5db0:	b005883a 	mov	r2,r22
    5db4:	003f4506 	br	5acc <__alt_data_end+0xff005acc>
    5db8:	dc000915 	stw	r16,36(sp)
    5dbc:	d9800a17 	ldw	r6,40(sp)
    5dc0:	d9400917 	ldw	r5,36(sp)
    5dc4:	e009883a 	mov	r4,fp
    5dc8:	00085a40 	call	85a4 <__pow5mult>
    5dcc:	1021883a 	mov	r16,r2
    5dd0:	003f5a06 	br	5b3c <__alt_data_end+0xff005b3c>
    5dd4:	01c00044 	movi	r7,1
    5dd8:	d9c00b15 	stw	r7,44(sp)
    5ddc:	d8802217 	ldw	r2,136(sp)
    5de0:	0081280e 	bge	zero,r2,6284 <_dtoa_r+0x11b0>
    5de4:	100d883a 	mov	r6,r2
    5de8:	1021883a 	mov	r16,r2
    5dec:	d8800c15 	stw	r2,48(sp)
    5df0:	d8800615 	stw	r2,24(sp)
    5df4:	003d8806 	br	5418 <__alt_data_end+0xff005418>
    5df8:	d8800617 	ldw	r2,24(sp)
    5dfc:	00be9b16 	blt	zero,r2,586c <__alt_data_end+0xff00586c>
    5e00:	10010f1e 	bne	r2,zero,6240 <_dtoa_r+0x116c>
    5e04:	880b883a 	mov	r5,r17
    5e08:	000d883a 	mov	r6,zero
    5e0c:	01d00534 	movhi	r7,16404
    5e10:	8009883a 	mov	r4,r16
    5e14:	000cc800 	call	cc80 <__muldf3>
    5e18:	900d883a 	mov	r6,r18
    5e1c:	980f883a 	mov	r7,r19
    5e20:	1009883a 	mov	r4,r2
    5e24:	180b883a 	mov	r5,r3
    5e28:	000cab00 	call	cab0 <__gedf2>
    5e2c:	002b883a 	mov	r21,zero
    5e30:	0023883a 	mov	r17,zero
    5e34:	1000bf16 	blt	r2,zero,6134 <_dtoa_r+0x1060>
    5e38:	d9802217 	ldw	r6,136(sp)
    5e3c:	ddc00717 	ldw	r23,28(sp)
    5e40:	018c303a 	nor	r6,zero,r6
    5e44:	d9800515 	stw	r6,20(sp)
    5e48:	a80b883a 	mov	r5,r21
    5e4c:	e009883a 	mov	r4,fp
    5e50:	000800c0 	call	800c <_Bfree>
    5e54:	883e4926 	beq	r17,zero,577c <__alt_data_end+0xff00577c>
    5e58:	003fad06 	br	5d10 <__alt_data_end+0xff005d10>
    5e5c:	d9c01117 	ldw	r7,68(sp)
    5e60:	3801bc26 	beq	r7,zero,6554 <_dtoa_r+0x1480>
    5e64:	10810cc4 	addi	r2,r2,1075
    5e68:	dd400a17 	ldw	r21,40(sp)
    5e6c:	dd000817 	ldw	r20,32(sp)
    5e70:	003f0a06 	br	5a9c <__alt_data_end+0xff005a9c>
    5e74:	00800704 	movi	r2,28
    5e78:	d9000817 	ldw	r4,32(sp)
    5e7c:	a0a9883a 	add	r20,r20,r2
    5e80:	b0ad883a 	add	r22,r22,r2
    5e84:	2089883a 	add	r4,r4,r2
    5e88:	d9000815 	stw	r4,32(sp)
    5e8c:	003f5106 	br	5bd4 <__alt_data_end+0xff005bd4>
    5e90:	d8c00317 	ldw	r3,12(sp)
    5e94:	b8c1fc0e 	bge	r23,r3,6688 <_dtoa_r+0x15b4>
    5e98:	0027883a 	mov	r19,zero
    5e9c:	b805883a 	mov	r2,r23
    5ea0:	003f3e06 	br	5b9c <__alt_data_end+0xff005b9c>
    5ea4:	880b883a 	mov	r5,r17
    5ea8:	e009883a 	mov	r4,fp
    5eac:	000f883a 	mov	r7,zero
    5eb0:	01800284 	movi	r6,10
    5eb4:	00080340 	call	8034 <__multadd>
    5eb8:	d9000c17 	ldw	r4,48(sp)
    5ebc:	1023883a 	mov	r17,r2
    5ec0:	0102040e 	bge	zero,r4,66d4 <_dtoa_r+0x1600>
    5ec4:	d9000615 	stw	r4,24(sp)
    5ec8:	0500050e 	bge	zero,r20,5ee0 <_dtoa_r+0xe0c>
    5ecc:	880b883a 	mov	r5,r17
    5ed0:	a00d883a 	mov	r6,r20
    5ed4:	e009883a 	mov	r4,fp
    5ed8:	00086e40 	call	86e4 <__lshift>
    5edc:	1023883a 	mov	r17,r2
    5ee0:	9801241e 	bne	r19,zero,6374 <_dtoa_r+0x12a0>
    5ee4:	8829883a 	mov	r20,r17
    5ee8:	d9000617 	ldw	r4,24(sp)
    5eec:	dcc00717 	ldw	r19,28(sp)
    5ef0:	9480004c 	andi	r18,r18,1
    5ef4:	20bfffc4 	addi	r2,r4,-1
    5ef8:	9885883a 	add	r2,r19,r2
    5efc:	d8800415 	stw	r2,16(sp)
    5f00:	dc800615 	stw	r18,24(sp)
    5f04:	a80b883a 	mov	r5,r21
    5f08:	8009883a 	mov	r4,r16
    5f0c:	0004ed40 	call	4ed4 <quorem>
    5f10:	880b883a 	mov	r5,r17
    5f14:	8009883a 	mov	r4,r16
    5f18:	102f883a 	mov	r23,r2
    5f1c:	000882c0 	call	882c <__mcmp>
    5f20:	a80b883a 	mov	r5,r21
    5f24:	a00d883a 	mov	r6,r20
    5f28:	e009883a 	mov	r4,fp
    5f2c:	102d883a 	mov	r22,r2
    5f30:	000888c0 	call	888c <__mdiff>
    5f34:	1007883a 	mov	r3,r2
    5f38:	10800317 	ldw	r2,12(r2)
    5f3c:	bc800c04 	addi	r18,r23,48
    5f40:	180b883a 	mov	r5,r3
    5f44:	10004e1e 	bne	r2,zero,6080 <_dtoa_r+0xfac>
    5f48:	8009883a 	mov	r4,r16
    5f4c:	d8c01615 	stw	r3,88(sp)
    5f50:	000882c0 	call	882c <__mcmp>
    5f54:	d8c01617 	ldw	r3,88(sp)
    5f58:	e009883a 	mov	r4,fp
    5f5c:	d8801615 	stw	r2,88(sp)
    5f60:	180b883a 	mov	r5,r3
    5f64:	000800c0 	call	800c <_Bfree>
    5f68:	d8801617 	ldw	r2,88(sp)
    5f6c:	1000041e 	bne	r2,zero,5f80 <_dtoa_r+0xeac>
    5f70:	d9800317 	ldw	r6,12(sp)
    5f74:	3000021e 	bne	r6,zero,5f80 <_dtoa_r+0xeac>
    5f78:	d8c00617 	ldw	r3,24(sp)
    5f7c:	18003726 	beq	r3,zero,605c <_dtoa_r+0xf88>
    5f80:	b0002016 	blt	r22,zero,6004 <_dtoa_r+0xf30>
    5f84:	b000041e 	bne	r22,zero,5f98 <_dtoa_r+0xec4>
    5f88:	d9000317 	ldw	r4,12(sp)
    5f8c:	2000021e 	bne	r4,zero,5f98 <_dtoa_r+0xec4>
    5f90:	d8c00617 	ldw	r3,24(sp)
    5f94:	18001b26 	beq	r3,zero,6004 <_dtoa_r+0xf30>
    5f98:	00810716 	blt	zero,r2,63b8 <_dtoa_r+0x12e4>
    5f9c:	d8c00417 	ldw	r3,16(sp)
    5fa0:	9d800044 	addi	r22,r19,1
    5fa4:	9c800005 	stb	r18,0(r19)
    5fa8:	b02f883a 	mov	r23,r22
    5fac:	98c10626 	beq	r19,r3,63c8 <_dtoa_r+0x12f4>
    5fb0:	800b883a 	mov	r5,r16
    5fb4:	000f883a 	mov	r7,zero
    5fb8:	01800284 	movi	r6,10
    5fbc:	e009883a 	mov	r4,fp
    5fc0:	00080340 	call	8034 <__multadd>
    5fc4:	1021883a 	mov	r16,r2
    5fc8:	000f883a 	mov	r7,zero
    5fcc:	01800284 	movi	r6,10
    5fd0:	880b883a 	mov	r5,r17
    5fd4:	e009883a 	mov	r4,fp
    5fd8:	8d002526 	beq	r17,r20,6070 <_dtoa_r+0xf9c>
    5fdc:	00080340 	call	8034 <__multadd>
    5fe0:	a00b883a 	mov	r5,r20
    5fe4:	000f883a 	mov	r7,zero
    5fe8:	01800284 	movi	r6,10
    5fec:	e009883a 	mov	r4,fp
    5ff0:	1023883a 	mov	r17,r2
    5ff4:	00080340 	call	8034 <__multadd>
    5ff8:	1029883a 	mov	r20,r2
    5ffc:	b027883a 	mov	r19,r22
    6000:	003fc006 	br	5f04 <__alt_data_end+0xff005f04>
    6004:	9011883a 	mov	r8,r18
    6008:	00800e0e 	bge	zero,r2,6044 <_dtoa_r+0xf70>
    600c:	800b883a 	mov	r5,r16
    6010:	01800044 	movi	r6,1
    6014:	e009883a 	mov	r4,fp
    6018:	da001715 	stw	r8,92(sp)
    601c:	00086e40 	call	86e4 <__lshift>
    6020:	a80b883a 	mov	r5,r21
    6024:	1009883a 	mov	r4,r2
    6028:	1021883a 	mov	r16,r2
    602c:	000882c0 	call	882c <__mcmp>
    6030:	da001717 	ldw	r8,92(sp)
    6034:	0081960e 	bge	zero,r2,6690 <_dtoa_r+0x15bc>
    6038:	00800e44 	movi	r2,57
    603c:	40817026 	beq	r8,r2,6600 <_dtoa_r+0x152c>
    6040:	ba000c44 	addi	r8,r23,49
    6044:	8825883a 	mov	r18,r17
    6048:	9dc00044 	addi	r23,r19,1
    604c:	9a000005 	stb	r8,0(r19)
    6050:	a023883a 	mov	r17,r20
    6054:	dc000915 	stw	r16,36(sp)
    6058:	003f2406 	br	5cec <__alt_data_end+0xff005cec>
    605c:	00800e44 	movi	r2,57
    6060:	9011883a 	mov	r8,r18
    6064:	90816626 	beq	r18,r2,6600 <_dtoa_r+0x152c>
    6068:	05bff516 	blt	zero,r22,6040 <__alt_data_end+0xff006040>
    606c:	003ff506 	br	6044 <__alt_data_end+0xff006044>
    6070:	00080340 	call	8034 <__multadd>
    6074:	1023883a 	mov	r17,r2
    6078:	1029883a 	mov	r20,r2
    607c:	003fdf06 	br	5ffc <__alt_data_end+0xff005ffc>
    6080:	e009883a 	mov	r4,fp
    6084:	000800c0 	call	800c <_Bfree>
    6088:	00800044 	movi	r2,1
    608c:	003fbc06 	br	5f80 <__alt_data_end+0xff005f80>
    6090:	a80b883a 	mov	r5,r21
    6094:	8009883a 	mov	r4,r16
    6098:	000882c0 	call	882c <__mcmp>
    609c:	103edb0e 	bge	r2,zero,5c0c <__alt_data_end+0xff005c0c>
    60a0:	800b883a 	mov	r5,r16
    60a4:	000f883a 	mov	r7,zero
    60a8:	01800284 	movi	r6,10
    60ac:	e009883a 	mov	r4,fp
    60b0:	00080340 	call	8034 <__multadd>
    60b4:	1021883a 	mov	r16,r2
    60b8:	d8800517 	ldw	r2,20(sp)
    60bc:	d8c00b17 	ldw	r3,44(sp)
    60c0:	10bfffc4 	addi	r2,r2,-1
    60c4:	d8800515 	stw	r2,20(sp)
    60c8:	183f761e 	bne	r3,zero,5ea4 <__alt_data_end+0xff005ea4>
    60cc:	d9000c17 	ldw	r4,48(sp)
    60d0:	0101730e 	bge	zero,r4,66a0 <_dtoa_r+0x15cc>
    60d4:	d9000615 	stw	r4,24(sp)
    60d8:	003ed006 	br	5c1c <__alt_data_end+0xff005c1c>
    60dc:	00800084 	movi	r2,2
    60e0:	3081861e 	bne	r6,r2,66fc <_dtoa_r+0x1628>
    60e4:	d8000b15 	stw	zero,44(sp)
    60e8:	003f3c06 	br	5ddc <__alt_data_end+0xff005ddc>
    60ec:	dc000917 	ldw	r16,36(sp)
    60f0:	003e9206 	br	5b3c <__alt_data_end+0xff005b3c>
    60f4:	d9c00317 	ldw	r7,12(sp)
    60f8:	00800084 	movi	r2,2
    60fc:	11fec50e 	bge	r2,r7,5c14 <__alt_data_end+0xff005c14>
    6100:	d9000617 	ldw	r4,24(sp)
    6104:	20013c1e 	bne	r4,zero,65f8 <_dtoa_r+0x1524>
    6108:	a80b883a 	mov	r5,r21
    610c:	000f883a 	mov	r7,zero
    6110:	01800144 	movi	r6,5
    6114:	e009883a 	mov	r4,fp
    6118:	00080340 	call	8034 <__multadd>
    611c:	100b883a 	mov	r5,r2
    6120:	8009883a 	mov	r4,r16
    6124:	102b883a 	mov	r21,r2
    6128:	000882c0 	call	882c <__mcmp>
    612c:	dc000915 	stw	r16,36(sp)
    6130:	00bf410e 	bge	zero,r2,5e38 <__alt_data_end+0xff005e38>
    6134:	d9c00717 	ldw	r7,28(sp)
    6138:	00800c44 	movi	r2,49
    613c:	38800005 	stb	r2,0(r7)
    6140:	d8800517 	ldw	r2,20(sp)
    6144:	3dc00044 	addi	r23,r7,1
    6148:	10800044 	addi	r2,r2,1
    614c:	d8800515 	stw	r2,20(sp)
    6150:	003f3d06 	br	5e48 <__alt_data_end+0xff005e48>
    6154:	d9800517 	ldw	r6,20(sp)
    6158:	d9c00717 	ldw	r7,28(sp)
    615c:	00800c44 	movi	r2,49
    6160:	31800044 	addi	r6,r6,1
    6164:	d9800515 	stw	r6,20(sp)
    6168:	38800005 	stb	r2,0(r7)
    616c:	003edf06 	br	5cec <__alt_data_end+0xff005cec>
    6170:	d8000b15 	stw	zero,44(sp)
    6174:	003c9f06 	br	53f4 <__alt_data_end+0xff0053f4>
    6178:	903e7e1e 	bne	r18,zero,5b74 <__alt_data_end+0xff005b74>
    617c:	00800434 	movhi	r2,16
    6180:	10bfffc4 	addi	r2,r2,-1
    6184:	9884703a 	and	r2,r19,r2
    6188:	1000ea1e 	bne	r2,zero,6534 <_dtoa_r+0x1460>
    618c:	9cdffc2c 	andhi	r19,r19,32752
    6190:	9800e826 	beq	r19,zero,6534 <_dtoa_r+0x1460>
    6194:	d9c00817 	ldw	r7,32(sp)
    6198:	b5800044 	addi	r22,r22,1
    619c:	04c00044 	movi	r19,1
    61a0:	39c00044 	addi	r7,r7,1
    61a4:	d9c00815 	stw	r7,32(sp)
    61a8:	d8800d17 	ldw	r2,52(sp)
    61ac:	103e721e 	bne	r2,zero,5b78 <__alt_data_end+0xff005b78>
    61b0:	00800044 	movi	r2,1
    61b4:	003e7906 	br	5b9c <__alt_data_end+0xff005b9c>
    61b8:	8009883a 	mov	r4,r16
    61bc:	000dd140 	call	dd14 <__floatsidf>
    61c0:	d9800f17 	ldw	r6,60(sp)
    61c4:	d9c01017 	ldw	r7,64(sp)
    61c8:	1009883a 	mov	r4,r2
    61cc:	180b883a 	mov	r5,r3
    61d0:	000cc800 	call	cc80 <__muldf3>
    61d4:	000d883a 	mov	r6,zero
    61d8:	01d00734 	movhi	r7,16412
    61dc:	1009883a 	mov	r4,r2
    61e0:	180b883a 	mov	r5,r3
    61e4:	000c17c0 	call	c17c <__adddf3>
    61e8:	047f3034 	movhi	r17,64704
    61ec:	1021883a 	mov	r16,r2
    61f0:	1c63883a 	add	r17,r3,r17
    61f4:	d9000f17 	ldw	r4,60(sp)
    61f8:	d9401017 	ldw	r5,64(sp)
    61fc:	000d883a 	mov	r6,zero
    6200:	01d00534 	movhi	r7,16404
    6204:	000d3980 	call	d398 <__subdf3>
    6208:	800d883a 	mov	r6,r16
    620c:	880f883a 	mov	r7,r17
    6210:	1009883a 	mov	r4,r2
    6214:	180b883a 	mov	r5,r3
    6218:	102b883a 	mov	r21,r2
    621c:	1829883a 	mov	r20,r3
    6220:	000cab00 	call	cab0 <__gedf2>
    6224:	00806c16 	blt	zero,r2,63d8 <_dtoa_r+0x1304>
    6228:	89e0003c 	xorhi	r7,r17,32768
    622c:	800d883a 	mov	r6,r16
    6230:	a809883a 	mov	r4,r21
    6234:	a00b883a 	mov	r5,r20
    6238:	000cb8c0 	call	cb8c <__ledf2>
    623c:	103d7e0e 	bge	r2,zero,5838 <__alt_data_end+0xff005838>
    6240:	002b883a 	mov	r21,zero
    6244:	0023883a 	mov	r17,zero
    6248:	003efb06 	br	5e38 <__alt_data_end+0xff005e38>
    624c:	d8800717 	ldw	r2,28(sp)
    6250:	003bd006 	br	5194 <__alt_data_end+0xff005194>
    6254:	d9000a17 	ldw	r4,40(sp)
    6258:	d9800d17 	ldw	r6,52(sp)
    625c:	dd400a15 	stw	r21,40(sp)
    6260:	a905c83a 	sub	r2,r21,r4
    6264:	308d883a 	add	r6,r6,r2
    6268:	d9800d15 	stw	r6,52(sp)
    626c:	002b883a 	mov	r21,zero
    6270:	003e0606 	br	5a8c <__alt_data_end+0xff005a8c>
    6274:	9023883a 	mov	r17,r18
    6278:	9829883a 	mov	r20,r19
    627c:	04000084 	movi	r16,2
    6280:	003c9206 	br	54cc <__alt_data_end+0xff0054cc>
    6284:	04000044 	movi	r16,1
    6288:	dc000c15 	stw	r16,48(sp)
    628c:	dc000615 	stw	r16,24(sp)
    6290:	dc002215 	stw	r16,136(sp)
    6294:	e0001115 	stw	zero,68(fp)
    6298:	000b883a 	mov	r5,zero
    629c:	003c6906 	br	5444 <__alt_data_end+0xff005444>
    62a0:	3021883a 	mov	r16,r6
    62a4:	003ffb06 	br	6294 <__alt_data_end+0xff006294>
    62a8:	1000021e 	bne	r2,zero,62b4 <_dtoa_r+0x11e0>
    62ac:	4200004c 	andi	r8,r8,1
    62b0:	403e7d1e 	bne	r8,zero,5ca8 <__alt_data_end+0xff005ca8>
    62b4:	01000c04 	movi	r4,48
    62b8:	00000106 	br	62c0 <_dtoa_r+0x11ec>
    62bc:	102f883a 	mov	r23,r2
    62c0:	b8bfffc4 	addi	r2,r23,-1
    62c4:	10c00007 	ldb	r3,0(r2)
    62c8:	193ffc26 	beq	r3,r4,62bc <__alt_data_end+0xff0062bc>
    62cc:	003e8706 	br	5cec <__alt_data_end+0xff005cec>
    62d0:	d8800517 	ldw	r2,20(sp)
    62d4:	00a3c83a 	sub	r17,zero,r2
    62d8:	8800a426 	beq	r17,zero,656c <_dtoa_r+0x1498>
    62dc:	888003cc 	andi	r2,r17,15
    62e0:	100490fa 	slli	r2,r2,3
    62e4:	00c00074 	movhi	r3,1
    62e8:	18c46304 	addi	r3,r3,4492
    62ec:	1885883a 	add	r2,r3,r2
    62f0:	11800017 	ldw	r6,0(r2)
    62f4:	11c00117 	ldw	r7,4(r2)
    62f8:	9009883a 	mov	r4,r18
    62fc:	980b883a 	mov	r5,r19
    6300:	8823d13a 	srai	r17,r17,4
    6304:	000cc800 	call	cc80 <__muldf3>
    6308:	d8800f15 	stw	r2,60(sp)
    630c:	d8c01015 	stw	r3,64(sp)
    6310:	8800e826 	beq	r17,zero,66b4 <_dtoa_r+0x15e0>
    6314:	05000074 	movhi	r20,1
    6318:	a5045904 	addi	r20,r20,4452
    631c:	04000084 	movi	r16,2
    6320:	8980004c 	andi	r6,r17,1
    6324:	1009883a 	mov	r4,r2
    6328:	8823d07a 	srai	r17,r17,1
    632c:	180b883a 	mov	r5,r3
    6330:	30000426 	beq	r6,zero,6344 <_dtoa_r+0x1270>
    6334:	a1800017 	ldw	r6,0(r20)
    6338:	a1c00117 	ldw	r7,4(r20)
    633c:	84000044 	addi	r16,r16,1
    6340:	000cc800 	call	cc80 <__muldf3>
    6344:	a5000204 	addi	r20,r20,8
    6348:	883ff51e 	bne	r17,zero,6320 <__alt_data_end+0xff006320>
    634c:	d8800f15 	stw	r2,60(sp)
    6350:	d8c01015 	stw	r3,64(sp)
    6354:	003c7606 	br	5530 <__alt_data_end+0xff005530>
    6358:	00c00c04 	movi	r3,48
    635c:	10c00005 	stb	r3,0(r2)
    6360:	d8c00517 	ldw	r3,20(sp)
    6364:	bd3fffc3 	ldbu	r20,-1(r23)
    6368:	18c00044 	addi	r3,r3,1
    636c:	d8c00515 	stw	r3,20(sp)
    6370:	003db906 	br	5a58 <__alt_data_end+0xff005a58>
    6374:	89400117 	ldw	r5,4(r17)
    6378:	e009883a 	mov	r4,fp
    637c:	0007f640 	call	7f64 <_Balloc>
    6380:	89800417 	ldw	r6,16(r17)
    6384:	89400304 	addi	r5,r17,12
    6388:	11000304 	addi	r4,r2,12
    638c:	31800084 	addi	r6,r6,2
    6390:	318d883a 	add	r6,r6,r6
    6394:	318d883a 	add	r6,r6,r6
    6398:	1027883a 	mov	r19,r2
    639c:	0007b980 	call	7b98 <memcpy>
    63a0:	01800044 	movi	r6,1
    63a4:	980b883a 	mov	r5,r19
    63a8:	e009883a 	mov	r4,fp
    63ac:	00086e40 	call	86e4 <__lshift>
    63b0:	1029883a 	mov	r20,r2
    63b4:	003ecc06 	br	5ee8 <__alt_data_end+0xff005ee8>
    63b8:	00800e44 	movi	r2,57
    63bc:	90809026 	beq	r18,r2,6600 <_dtoa_r+0x152c>
    63c0:	92000044 	addi	r8,r18,1
    63c4:	003f1f06 	br	6044 <__alt_data_end+0xff006044>
    63c8:	9011883a 	mov	r8,r18
    63cc:	8825883a 	mov	r18,r17
    63d0:	a023883a 	mov	r17,r20
    63d4:	003e2906 	br	5c7c <__alt_data_end+0xff005c7c>
    63d8:	002b883a 	mov	r21,zero
    63dc:	0023883a 	mov	r17,zero
    63e0:	003f5406 	br	6134 <__alt_data_end+0xff006134>
    63e4:	61bfffc4 	addi	r6,r12,-1
    63e8:	300490fa 	slli	r2,r6,3
    63ec:	00c00074 	movhi	r3,1
    63f0:	18c46304 	addi	r3,r3,4492
    63f4:	1885883a 	add	r2,r3,r2
    63f8:	11000017 	ldw	r4,0(r2)
    63fc:	11400117 	ldw	r5,4(r2)
    6400:	d8800717 	ldw	r2,28(sp)
    6404:	880f883a 	mov	r7,r17
    6408:	d9801215 	stw	r6,72(sp)
    640c:	800d883a 	mov	r6,r16
    6410:	db001615 	stw	r12,88(sp)
    6414:	15c00044 	addi	r23,r2,1
    6418:	000cc800 	call	cc80 <__muldf3>
    641c:	d9401017 	ldw	r5,64(sp)
    6420:	d9000f17 	ldw	r4,60(sp)
    6424:	d8c01515 	stw	r3,84(sp)
    6428:	d8801415 	stw	r2,80(sp)
    642c:	000dc940 	call	dc94 <__fixdfsi>
    6430:	1009883a 	mov	r4,r2
    6434:	1021883a 	mov	r16,r2
    6438:	000dd140 	call	dd14 <__floatsidf>
    643c:	d9000f17 	ldw	r4,60(sp)
    6440:	d9401017 	ldw	r5,64(sp)
    6444:	100d883a 	mov	r6,r2
    6448:	180f883a 	mov	r7,r3
    644c:	000d3980 	call	d398 <__subdf3>
    6450:	1829883a 	mov	r20,r3
    6454:	d8c00717 	ldw	r3,28(sp)
    6458:	84000c04 	addi	r16,r16,48
    645c:	1023883a 	mov	r17,r2
    6460:	1c000005 	stb	r16,0(r3)
    6464:	db001617 	ldw	r12,88(sp)
    6468:	00800044 	movi	r2,1
    646c:	60802226 	beq	r12,r2,64f8 <_dtoa_r+0x1424>
    6470:	d9c00717 	ldw	r7,28(sp)
    6474:	8805883a 	mov	r2,r17
    6478:	b82b883a 	mov	r21,r23
    647c:	3b19883a 	add	r12,r7,r12
    6480:	6023883a 	mov	r17,r12
    6484:	a007883a 	mov	r3,r20
    6488:	dc800f15 	stw	r18,60(sp)
    648c:	000d883a 	mov	r6,zero
    6490:	01d00934 	movhi	r7,16420
    6494:	1009883a 	mov	r4,r2
    6498:	180b883a 	mov	r5,r3
    649c:	000cc800 	call	cc80 <__muldf3>
    64a0:	180b883a 	mov	r5,r3
    64a4:	1009883a 	mov	r4,r2
    64a8:	1829883a 	mov	r20,r3
    64ac:	1025883a 	mov	r18,r2
    64b0:	000dc940 	call	dc94 <__fixdfsi>
    64b4:	1009883a 	mov	r4,r2
    64b8:	1021883a 	mov	r16,r2
    64bc:	000dd140 	call	dd14 <__floatsidf>
    64c0:	100d883a 	mov	r6,r2
    64c4:	180f883a 	mov	r7,r3
    64c8:	9009883a 	mov	r4,r18
    64cc:	a00b883a 	mov	r5,r20
    64d0:	84000c04 	addi	r16,r16,48
    64d4:	000d3980 	call	d398 <__subdf3>
    64d8:	ad400044 	addi	r21,r21,1
    64dc:	ac3fffc5 	stb	r16,-1(r21)
    64e0:	ac7fea1e 	bne	r21,r17,648c <__alt_data_end+0xff00648c>
    64e4:	1023883a 	mov	r17,r2
    64e8:	d8801217 	ldw	r2,72(sp)
    64ec:	dc800f17 	ldw	r18,60(sp)
    64f0:	1829883a 	mov	r20,r3
    64f4:	b8af883a 	add	r23,r23,r2
    64f8:	d9001417 	ldw	r4,80(sp)
    64fc:	d9401517 	ldw	r5,84(sp)
    6500:	000d883a 	mov	r6,zero
    6504:	01cff834 	movhi	r7,16352
    6508:	000c17c0 	call	c17c <__adddf3>
    650c:	880d883a 	mov	r6,r17
    6510:	a00f883a 	mov	r7,r20
    6514:	1009883a 	mov	r4,r2
    6518:	180b883a 	mov	r5,r3
    651c:	000cb8c0 	call	cb8c <__ledf2>
    6520:	10003e0e 	bge	r2,zero,661c <_dtoa_r+0x1548>
    6524:	d9001317 	ldw	r4,76(sp)
    6528:	bd3fffc3 	ldbu	r20,-1(r23)
    652c:	d9000515 	stw	r4,20(sp)
    6530:	003d3b06 	br	5a20 <__alt_data_end+0xff005a20>
    6534:	0027883a 	mov	r19,zero
    6538:	003f1b06 	br	61a8 <__alt_data_end+0xff0061a8>
    653c:	d8800817 	ldw	r2,32(sp)
    6540:	11e9c83a 	sub	r20,r2,r7
    6544:	0005883a 	mov	r2,zero
    6548:	003d5406 	br	5a9c <__alt_data_end+0xff005a9c>
    654c:	00800044 	movi	r2,1
    6550:	003dc706 	br	5c70 <__alt_data_end+0xff005c70>
    6554:	d8c00217 	ldw	r3,8(sp)
    6558:	00800d84 	movi	r2,54
    655c:	dd400a17 	ldw	r21,40(sp)
    6560:	10c5c83a 	sub	r2,r2,r3
    6564:	dd000817 	ldw	r20,32(sp)
    6568:	003d4c06 	br	5a9c <__alt_data_end+0xff005a9c>
    656c:	dc800f15 	stw	r18,60(sp)
    6570:	dcc01015 	stw	r19,64(sp)
    6574:	04000084 	movi	r16,2
    6578:	003bed06 	br	5530 <__alt_data_end+0xff005530>
    657c:	d9000617 	ldw	r4,24(sp)
    6580:	203f0d26 	beq	r4,zero,61b8 <__alt_data_end+0xff0061b8>
    6584:	d9800c17 	ldw	r6,48(sp)
    6588:	01bcab0e 	bge	zero,r6,5838 <__alt_data_end+0xff005838>
    658c:	d9401017 	ldw	r5,64(sp)
    6590:	d9000f17 	ldw	r4,60(sp)
    6594:	000d883a 	mov	r6,zero
    6598:	01d00934 	movhi	r7,16420
    659c:	000cc800 	call	cc80 <__muldf3>
    65a0:	81000044 	addi	r4,r16,1
    65a4:	d8800f15 	stw	r2,60(sp)
    65a8:	d8c01015 	stw	r3,64(sp)
    65ac:	000dd140 	call	dd14 <__floatsidf>
    65b0:	d9800f17 	ldw	r6,60(sp)
    65b4:	d9c01017 	ldw	r7,64(sp)
    65b8:	1009883a 	mov	r4,r2
    65bc:	180b883a 	mov	r5,r3
    65c0:	000cc800 	call	cc80 <__muldf3>
    65c4:	01d00734 	movhi	r7,16412
    65c8:	000d883a 	mov	r6,zero
    65cc:	1009883a 	mov	r4,r2
    65d0:	180b883a 	mov	r5,r3
    65d4:	000c17c0 	call	c17c <__adddf3>
    65d8:	d9c00517 	ldw	r7,20(sp)
    65dc:	047f3034 	movhi	r17,64704
    65e0:	1021883a 	mov	r16,r2
    65e4:	39ffffc4 	addi	r7,r7,-1
    65e8:	d9c01315 	stw	r7,76(sp)
    65ec:	1c63883a 	add	r17,r3,r17
    65f0:	db000c17 	ldw	r12,48(sp)
    65f4:	003bea06 	br	55a0 <__alt_data_end+0xff0055a0>
    65f8:	dc000915 	stw	r16,36(sp)
    65fc:	003e0e06 	br	5e38 <__alt_data_end+0xff005e38>
    6600:	01000e44 	movi	r4,57
    6604:	8825883a 	mov	r18,r17
    6608:	9dc00044 	addi	r23,r19,1
    660c:	99000005 	stb	r4,0(r19)
    6610:	a023883a 	mov	r17,r20
    6614:	dc000915 	stw	r16,36(sp)
    6618:	003da406 	br	5cac <__alt_data_end+0xff005cac>
    661c:	d9801417 	ldw	r6,80(sp)
    6620:	d9c01517 	ldw	r7,84(sp)
    6624:	0009883a 	mov	r4,zero
    6628:	014ff834 	movhi	r5,16352
    662c:	000d3980 	call	d398 <__subdf3>
    6630:	880d883a 	mov	r6,r17
    6634:	a00f883a 	mov	r7,r20
    6638:	1009883a 	mov	r4,r2
    663c:	180b883a 	mov	r5,r3
    6640:	000cab00 	call	cab0 <__gedf2>
    6644:	00bc7c0e 	bge	zero,r2,5838 <__alt_data_end+0xff005838>
    6648:	01000c04 	movi	r4,48
    664c:	00000106 	br	6654 <_dtoa_r+0x1580>
    6650:	102f883a 	mov	r23,r2
    6654:	b8bfffc4 	addi	r2,r23,-1
    6658:	10c00007 	ldb	r3,0(r2)
    665c:	193ffc26 	beq	r3,r4,6650 <__alt_data_end+0xff006650>
    6660:	d9801317 	ldw	r6,76(sp)
    6664:	d9800515 	stw	r6,20(sp)
    6668:	003c4406 	br	577c <__alt_data_end+0xff00577c>
    666c:	d9801317 	ldw	r6,76(sp)
    6670:	d9800515 	stw	r6,20(sp)
    6674:	003cea06 	br	5a20 <__alt_data_end+0xff005a20>
    6678:	dd800f17 	ldw	r22,60(sp)
    667c:	dcc01017 	ldw	r19,64(sp)
    6680:	dc801217 	ldw	r18,72(sp)
    6684:	003c6c06 	br	5838 <__alt_data_end+0xff005838>
    6688:	903e031e 	bne	r18,zero,5e98 <__alt_data_end+0xff005e98>
    668c:	003ebb06 	br	617c <__alt_data_end+0xff00617c>
    6690:	103e6c1e 	bne	r2,zero,6044 <__alt_data_end+0xff006044>
    6694:	4080004c 	andi	r2,r8,1
    6698:	103e6a26 	beq	r2,zero,6044 <__alt_data_end+0xff006044>
    669c:	003e6606 	br	6038 <__alt_data_end+0xff006038>
    66a0:	d8c00317 	ldw	r3,12(sp)
    66a4:	00800084 	movi	r2,2
    66a8:	10c02916 	blt	r2,r3,6750 <_dtoa_r+0x167c>
    66ac:	d9000c17 	ldw	r4,48(sp)
    66b0:	003e8806 	br	60d4 <__alt_data_end+0xff0060d4>
    66b4:	04000084 	movi	r16,2
    66b8:	003b9d06 	br	5530 <__alt_data_end+0xff005530>
    66bc:	d9001317 	ldw	r4,76(sp)
    66c0:	d9000515 	stw	r4,20(sp)
    66c4:	003cd606 	br	5a20 <__alt_data_end+0xff005a20>
    66c8:	d8801317 	ldw	r2,76(sp)
    66cc:	d8800515 	stw	r2,20(sp)
    66d0:	003c2a06 	br	577c <__alt_data_end+0xff00577c>
    66d4:	d9800317 	ldw	r6,12(sp)
    66d8:	00800084 	movi	r2,2
    66dc:	11801516 	blt	r2,r6,6734 <_dtoa_r+0x1660>
    66e0:	d9c00c17 	ldw	r7,48(sp)
    66e4:	d9c00615 	stw	r7,24(sp)
    66e8:	003df706 	br	5ec8 <__alt_data_end+0xff005ec8>
    66ec:	193d3926 	beq	r3,r4,5bd4 <__alt_data_end+0xff005bd4>
    66f0:	00c00f04 	movi	r3,60
    66f4:	1885c83a 	sub	r2,r3,r2
    66f8:	003ddf06 	br	5e78 <__alt_data_end+0xff005e78>
    66fc:	e009883a 	mov	r4,fp
    6700:	e0001115 	stw	zero,68(fp)
    6704:	000b883a 	mov	r5,zero
    6708:	0007f640 	call	7f64 <_Balloc>
    670c:	d8800715 	stw	r2,28(sp)
    6710:	d8c00717 	ldw	r3,28(sp)
    6714:	00bfffc4 	movi	r2,-1
    6718:	01000044 	movi	r4,1
    671c:	d8800c15 	stw	r2,48(sp)
    6720:	e0c01015 	stw	r3,64(fp)
    6724:	d9000b15 	stw	r4,44(sp)
    6728:	d8800615 	stw	r2,24(sp)
    672c:	d8002215 	stw	zero,136(sp)
    6730:	003c4106 	br	5838 <__alt_data_end+0xff005838>
    6734:	d8c00c17 	ldw	r3,48(sp)
    6738:	d8c00615 	stw	r3,24(sp)
    673c:	003e7006 	br	6100 <__alt_data_end+0xff006100>
    6740:	04400044 	movi	r17,1
    6744:	003b2006 	br	53c8 <__alt_data_end+0xff0053c8>
    6748:	000b883a 	mov	r5,zero
    674c:	003b3d06 	br	5444 <__alt_data_end+0xff005444>
    6750:	d8800c17 	ldw	r2,48(sp)
    6754:	d8800615 	stw	r2,24(sp)
    6758:	003e6906 	br	6100 <__alt_data_end+0xff006100>

0000675c <__sflush_r>:
    675c:	2880030b 	ldhu	r2,12(r5)
    6760:	defffb04 	addi	sp,sp,-20
    6764:	dcc00315 	stw	r19,12(sp)
    6768:	dc400115 	stw	r17,4(sp)
    676c:	dfc00415 	stw	ra,16(sp)
    6770:	dc800215 	stw	r18,8(sp)
    6774:	dc000015 	stw	r16,0(sp)
    6778:	10c0020c 	andi	r3,r2,8
    677c:	2823883a 	mov	r17,r5
    6780:	2027883a 	mov	r19,r4
    6784:	1800311e 	bne	r3,zero,684c <__sflush_r+0xf0>
    6788:	28c00117 	ldw	r3,4(r5)
    678c:	10820014 	ori	r2,r2,2048
    6790:	2880030d 	sth	r2,12(r5)
    6794:	00c04b0e 	bge	zero,r3,68c4 <__sflush_r+0x168>
    6798:	8a000a17 	ldw	r8,40(r17)
    679c:	40002326 	beq	r8,zero,682c <__sflush_r+0xd0>
    67a0:	9c000017 	ldw	r16,0(r19)
    67a4:	10c4000c 	andi	r3,r2,4096
    67a8:	98000015 	stw	zero,0(r19)
    67ac:	18004826 	beq	r3,zero,68d0 <__sflush_r+0x174>
    67b0:	89801417 	ldw	r6,80(r17)
    67b4:	10c0010c 	andi	r3,r2,4
    67b8:	18000626 	beq	r3,zero,67d4 <__sflush_r+0x78>
    67bc:	88c00117 	ldw	r3,4(r17)
    67c0:	88800c17 	ldw	r2,48(r17)
    67c4:	30cdc83a 	sub	r6,r6,r3
    67c8:	10000226 	beq	r2,zero,67d4 <__sflush_r+0x78>
    67cc:	88800f17 	ldw	r2,60(r17)
    67d0:	308dc83a 	sub	r6,r6,r2
    67d4:	89400717 	ldw	r5,28(r17)
    67d8:	000f883a 	mov	r7,zero
    67dc:	9809883a 	mov	r4,r19
    67e0:	403ee83a 	callr	r8
    67e4:	00ffffc4 	movi	r3,-1
    67e8:	10c04426 	beq	r2,r3,68fc <__sflush_r+0x1a0>
    67ec:	88c0030b 	ldhu	r3,12(r17)
    67f0:	89000417 	ldw	r4,16(r17)
    67f4:	88000115 	stw	zero,4(r17)
    67f8:	197dffcc 	andi	r5,r3,63487
    67fc:	8940030d 	sth	r5,12(r17)
    6800:	89000015 	stw	r4,0(r17)
    6804:	18c4000c 	andi	r3,r3,4096
    6808:	18002c1e 	bne	r3,zero,68bc <__sflush_r+0x160>
    680c:	89400c17 	ldw	r5,48(r17)
    6810:	9c000015 	stw	r16,0(r19)
    6814:	28000526 	beq	r5,zero,682c <__sflush_r+0xd0>
    6818:	88801004 	addi	r2,r17,64
    681c:	28800226 	beq	r5,r2,6828 <__sflush_r+0xcc>
    6820:	9809883a 	mov	r4,r19
    6824:	0006ec80 	call	6ec8 <_free_r>
    6828:	88000c15 	stw	zero,48(r17)
    682c:	0005883a 	mov	r2,zero
    6830:	dfc00417 	ldw	ra,16(sp)
    6834:	dcc00317 	ldw	r19,12(sp)
    6838:	dc800217 	ldw	r18,8(sp)
    683c:	dc400117 	ldw	r17,4(sp)
    6840:	dc000017 	ldw	r16,0(sp)
    6844:	dec00504 	addi	sp,sp,20
    6848:	f800283a 	ret
    684c:	2c800417 	ldw	r18,16(r5)
    6850:	903ff626 	beq	r18,zero,682c <__alt_data_end+0xff00682c>
    6854:	2c000017 	ldw	r16,0(r5)
    6858:	108000cc 	andi	r2,r2,3
    685c:	2c800015 	stw	r18,0(r5)
    6860:	84a1c83a 	sub	r16,r16,r18
    6864:	1000131e 	bne	r2,zero,68b4 <__sflush_r+0x158>
    6868:	28800517 	ldw	r2,20(r5)
    686c:	88800215 	stw	r2,8(r17)
    6870:	04000316 	blt	zero,r16,6880 <__sflush_r+0x124>
    6874:	003fed06 	br	682c <__alt_data_end+0xff00682c>
    6878:	90a5883a 	add	r18,r18,r2
    687c:	043feb0e 	bge	zero,r16,682c <__alt_data_end+0xff00682c>
    6880:	88800917 	ldw	r2,36(r17)
    6884:	89400717 	ldw	r5,28(r17)
    6888:	800f883a 	mov	r7,r16
    688c:	900d883a 	mov	r6,r18
    6890:	9809883a 	mov	r4,r19
    6894:	103ee83a 	callr	r2
    6898:	80a1c83a 	sub	r16,r16,r2
    689c:	00bff616 	blt	zero,r2,6878 <__alt_data_end+0xff006878>
    68a0:	88c0030b 	ldhu	r3,12(r17)
    68a4:	00bfffc4 	movi	r2,-1
    68a8:	18c01014 	ori	r3,r3,64
    68ac:	88c0030d 	sth	r3,12(r17)
    68b0:	003fdf06 	br	6830 <__alt_data_end+0xff006830>
    68b4:	0005883a 	mov	r2,zero
    68b8:	003fec06 	br	686c <__alt_data_end+0xff00686c>
    68bc:	88801415 	stw	r2,80(r17)
    68c0:	003fd206 	br	680c <__alt_data_end+0xff00680c>
    68c4:	28c00f17 	ldw	r3,60(r5)
    68c8:	00ffb316 	blt	zero,r3,6798 <__alt_data_end+0xff006798>
    68cc:	003fd706 	br	682c <__alt_data_end+0xff00682c>
    68d0:	89400717 	ldw	r5,28(r17)
    68d4:	000d883a 	mov	r6,zero
    68d8:	01c00044 	movi	r7,1
    68dc:	9809883a 	mov	r4,r19
    68e0:	403ee83a 	callr	r8
    68e4:	100d883a 	mov	r6,r2
    68e8:	00bfffc4 	movi	r2,-1
    68ec:	30801426 	beq	r6,r2,6940 <__sflush_r+0x1e4>
    68f0:	8880030b 	ldhu	r2,12(r17)
    68f4:	8a000a17 	ldw	r8,40(r17)
    68f8:	003fae06 	br	67b4 <__alt_data_end+0xff0067b4>
    68fc:	98c00017 	ldw	r3,0(r19)
    6900:	183fba26 	beq	r3,zero,67ec <__alt_data_end+0xff0067ec>
    6904:	01000744 	movi	r4,29
    6908:	19000626 	beq	r3,r4,6924 <__sflush_r+0x1c8>
    690c:	01000584 	movi	r4,22
    6910:	19000426 	beq	r3,r4,6924 <__sflush_r+0x1c8>
    6914:	88c0030b 	ldhu	r3,12(r17)
    6918:	18c01014 	ori	r3,r3,64
    691c:	88c0030d 	sth	r3,12(r17)
    6920:	003fc306 	br	6830 <__alt_data_end+0xff006830>
    6924:	8880030b 	ldhu	r2,12(r17)
    6928:	88c00417 	ldw	r3,16(r17)
    692c:	88000115 	stw	zero,4(r17)
    6930:	10bdffcc 	andi	r2,r2,63487
    6934:	8880030d 	sth	r2,12(r17)
    6938:	88c00015 	stw	r3,0(r17)
    693c:	003fb306 	br	680c <__alt_data_end+0xff00680c>
    6940:	98800017 	ldw	r2,0(r19)
    6944:	103fea26 	beq	r2,zero,68f0 <__alt_data_end+0xff0068f0>
    6948:	00c00744 	movi	r3,29
    694c:	10c00226 	beq	r2,r3,6958 <__sflush_r+0x1fc>
    6950:	00c00584 	movi	r3,22
    6954:	10c0031e 	bne	r2,r3,6964 <__sflush_r+0x208>
    6958:	9c000015 	stw	r16,0(r19)
    695c:	0005883a 	mov	r2,zero
    6960:	003fb306 	br	6830 <__alt_data_end+0xff006830>
    6964:	88c0030b 	ldhu	r3,12(r17)
    6968:	3005883a 	mov	r2,r6
    696c:	18c01014 	ori	r3,r3,64
    6970:	88c0030d 	sth	r3,12(r17)
    6974:	003fae06 	br	6830 <__alt_data_end+0xff006830>

00006978 <_fflush_r>:
    6978:	defffd04 	addi	sp,sp,-12
    697c:	dc000115 	stw	r16,4(sp)
    6980:	dfc00215 	stw	ra,8(sp)
    6984:	2021883a 	mov	r16,r4
    6988:	20000226 	beq	r4,zero,6994 <_fflush_r+0x1c>
    698c:	20800e17 	ldw	r2,56(r4)
    6990:	10000c26 	beq	r2,zero,69c4 <_fflush_r+0x4c>
    6994:	2880030f 	ldh	r2,12(r5)
    6998:	1000051e 	bne	r2,zero,69b0 <_fflush_r+0x38>
    699c:	0005883a 	mov	r2,zero
    69a0:	dfc00217 	ldw	ra,8(sp)
    69a4:	dc000117 	ldw	r16,4(sp)
    69a8:	dec00304 	addi	sp,sp,12
    69ac:	f800283a 	ret
    69b0:	8009883a 	mov	r4,r16
    69b4:	dfc00217 	ldw	ra,8(sp)
    69b8:	dc000117 	ldw	r16,4(sp)
    69bc:	dec00304 	addi	sp,sp,12
    69c0:	000675c1 	jmpi	675c <__sflush_r>
    69c4:	d9400015 	stw	r5,0(sp)
    69c8:	0006d540 	call	6d54 <__sinit>
    69cc:	d9400017 	ldw	r5,0(sp)
    69d0:	003ff006 	br	6994 <__alt_data_end+0xff006994>

000069d4 <fflush>:
    69d4:	20000526 	beq	r4,zero,69ec <fflush+0x18>
    69d8:	00800074 	movhi	r2,1
    69dc:	108b9604 	addi	r2,r2,11864
    69e0:	200b883a 	mov	r5,r4
    69e4:	11000017 	ldw	r4,0(r2)
    69e8:	00069781 	jmpi	6978 <_fflush_r>
    69ec:	00800074 	movhi	r2,1
    69f0:	108b9504 	addi	r2,r2,11860
    69f4:	11000017 	ldw	r4,0(r2)
    69f8:	01400034 	movhi	r5,0
    69fc:	295a5e04 	addi	r5,r5,27000
    6a00:	00077581 	jmpi	7758 <_fwalk_reent>

00006a04 <__fp_unlock>:
    6a04:	0005883a 	mov	r2,zero
    6a08:	f800283a 	ret

00006a0c <_cleanup_r>:
    6a0c:	01400074 	movhi	r5,1
    6a10:	296bc404 	addi	r5,r5,-20720
    6a14:	00077581 	jmpi	7758 <_fwalk_reent>

00006a18 <__sinit.part.1>:
    6a18:	defff704 	addi	sp,sp,-36
    6a1c:	00c00034 	movhi	r3,0
    6a20:	dfc00815 	stw	ra,32(sp)
    6a24:	ddc00715 	stw	r23,28(sp)
    6a28:	dd800615 	stw	r22,24(sp)
    6a2c:	dd400515 	stw	r21,20(sp)
    6a30:	dd000415 	stw	r20,16(sp)
    6a34:	dcc00315 	stw	r19,12(sp)
    6a38:	dc800215 	stw	r18,8(sp)
    6a3c:	dc400115 	stw	r17,4(sp)
    6a40:	dc000015 	stw	r16,0(sp)
    6a44:	18da8304 	addi	r3,r3,27148
    6a48:	24000117 	ldw	r16,4(r4)
    6a4c:	20c00f15 	stw	r3,60(r4)
    6a50:	2080bb04 	addi	r2,r4,748
    6a54:	00c000c4 	movi	r3,3
    6a58:	20c0b915 	stw	r3,740(r4)
    6a5c:	2080ba15 	stw	r2,744(r4)
    6a60:	2000b815 	stw	zero,736(r4)
    6a64:	05c00204 	movi	r23,8
    6a68:	00800104 	movi	r2,4
    6a6c:	2025883a 	mov	r18,r4
    6a70:	b80d883a 	mov	r6,r23
    6a74:	81001704 	addi	r4,r16,92
    6a78:	000b883a 	mov	r5,zero
    6a7c:	80000015 	stw	zero,0(r16)
    6a80:	80000115 	stw	zero,4(r16)
    6a84:	80000215 	stw	zero,8(r16)
    6a88:	8080030d 	sth	r2,12(r16)
    6a8c:	80001915 	stw	zero,100(r16)
    6a90:	8000038d 	sth	zero,14(r16)
    6a94:	80000415 	stw	zero,16(r16)
    6a98:	80000515 	stw	zero,20(r16)
    6a9c:	80000615 	stw	zero,24(r16)
    6aa0:	0007e3c0 	call	7e3c <memset>
    6aa4:	05800074 	movhi	r22,1
    6aa8:	94400217 	ldw	r17,8(r18)
    6aac:	05400074 	movhi	r21,1
    6ab0:	05000074 	movhi	r20,1
    6ab4:	04c00074 	movhi	r19,1
    6ab8:	b5a54e04 	addi	r22,r22,-27336
    6abc:	ad656504 	addi	r21,r21,-27244
    6ac0:	a5258404 	addi	r20,r20,-27120
    6ac4:	9ce59b04 	addi	r19,r19,-27028
    6ac8:	85800815 	stw	r22,32(r16)
    6acc:	85400915 	stw	r21,36(r16)
    6ad0:	85000a15 	stw	r20,40(r16)
    6ad4:	84c00b15 	stw	r19,44(r16)
    6ad8:	84000715 	stw	r16,28(r16)
    6adc:	00800284 	movi	r2,10
    6ae0:	8880030d 	sth	r2,12(r17)
    6ae4:	00800044 	movi	r2,1
    6ae8:	b80d883a 	mov	r6,r23
    6aec:	89001704 	addi	r4,r17,92
    6af0:	000b883a 	mov	r5,zero
    6af4:	88000015 	stw	zero,0(r17)
    6af8:	88000115 	stw	zero,4(r17)
    6afc:	88000215 	stw	zero,8(r17)
    6b00:	88001915 	stw	zero,100(r17)
    6b04:	8880038d 	sth	r2,14(r17)
    6b08:	88000415 	stw	zero,16(r17)
    6b0c:	88000515 	stw	zero,20(r17)
    6b10:	88000615 	stw	zero,24(r17)
    6b14:	0007e3c0 	call	7e3c <memset>
    6b18:	94000317 	ldw	r16,12(r18)
    6b1c:	00800484 	movi	r2,18
    6b20:	8c400715 	stw	r17,28(r17)
    6b24:	8d800815 	stw	r22,32(r17)
    6b28:	8d400915 	stw	r21,36(r17)
    6b2c:	8d000a15 	stw	r20,40(r17)
    6b30:	8cc00b15 	stw	r19,44(r17)
    6b34:	8080030d 	sth	r2,12(r16)
    6b38:	00800084 	movi	r2,2
    6b3c:	80000015 	stw	zero,0(r16)
    6b40:	80000115 	stw	zero,4(r16)
    6b44:	80000215 	stw	zero,8(r16)
    6b48:	80001915 	stw	zero,100(r16)
    6b4c:	8080038d 	sth	r2,14(r16)
    6b50:	80000415 	stw	zero,16(r16)
    6b54:	80000515 	stw	zero,20(r16)
    6b58:	80000615 	stw	zero,24(r16)
    6b5c:	b80d883a 	mov	r6,r23
    6b60:	000b883a 	mov	r5,zero
    6b64:	81001704 	addi	r4,r16,92
    6b68:	0007e3c0 	call	7e3c <memset>
    6b6c:	00800044 	movi	r2,1
    6b70:	84000715 	stw	r16,28(r16)
    6b74:	85800815 	stw	r22,32(r16)
    6b78:	85400915 	stw	r21,36(r16)
    6b7c:	85000a15 	stw	r20,40(r16)
    6b80:	84c00b15 	stw	r19,44(r16)
    6b84:	90800e15 	stw	r2,56(r18)
    6b88:	dfc00817 	ldw	ra,32(sp)
    6b8c:	ddc00717 	ldw	r23,28(sp)
    6b90:	dd800617 	ldw	r22,24(sp)
    6b94:	dd400517 	ldw	r21,20(sp)
    6b98:	dd000417 	ldw	r20,16(sp)
    6b9c:	dcc00317 	ldw	r19,12(sp)
    6ba0:	dc800217 	ldw	r18,8(sp)
    6ba4:	dc400117 	ldw	r17,4(sp)
    6ba8:	dc000017 	ldw	r16,0(sp)
    6bac:	dec00904 	addi	sp,sp,36
    6bb0:	f800283a 	ret

00006bb4 <__fp_lock>:
    6bb4:	0005883a 	mov	r2,zero
    6bb8:	f800283a 	ret

00006bbc <__sfmoreglue>:
    6bbc:	defffc04 	addi	sp,sp,-16
    6bc0:	dc400115 	stw	r17,4(sp)
    6bc4:	2c7fffc4 	addi	r17,r5,-1
    6bc8:	8c401a24 	muli	r17,r17,104
    6bcc:	dc800215 	stw	r18,8(sp)
    6bd0:	2825883a 	mov	r18,r5
    6bd4:	89401d04 	addi	r5,r17,116
    6bd8:	dc000015 	stw	r16,0(sp)
    6bdc:	dfc00315 	stw	ra,12(sp)
    6be0:	00020780 	call	2078 <_malloc_r>
    6be4:	1021883a 	mov	r16,r2
    6be8:	10000726 	beq	r2,zero,6c08 <__sfmoreglue+0x4c>
    6bec:	11000304 	addi	r4,r2,12
    6bf0:	10000015 	stw	zero,0(r2)
    6bf4:	14800115 	stw	r18,4(r2)
    6bf8:	11000215 	stw	r4,8(r2)
    6bfc:	89801a04 	addi	r6,r17,104
    6c00:	000b883a 	mov	r5,zero
    6c04:	0007e3c0 	call	7e3c <memset>
    6c08:	8005883a 	mov	r2,r16
    6c0c:	dfc00317 	ldw	ra,12(sp)
    6c10:	dc800217 	ldw	r18,8(sp)
    6c14:	dc400117 	ldw	r17,4(sp)
    6c18:	dc000017 	ldw	r16,0(sp)
    6c1c:	dec00404 	addi	sp,sp,16
    6c20:	f800283a 	ret

00006c24 <__sfp>:
    6c24:	defffb04 	addi	sp,sp,-20
    6c28:	dc000015 	stw	r16,0(sp)
    6c2c:	04000074 	movhi	r16,1
    6c30:	840b9504 	addi	r16,r16,11860
    6c34:	dcc00315 	stw	r19,12(sp)
    6c38:	2027883a 	mov	r19,r4
    6c3c:	81000017 	ldw	r4,0(r16)
    6c40:	dfc00415 	stw	ra,16(sp)
    6c44:	dc800215 	stw	r18,8(sp)
    6c48:	20800e17 	ldw	r2,56(r4)
    6c4c:	dc400115 	stw	r17,4(sp)
    6c50:	1000021e 	bne	r2,zero,6c5c <__sfp+0x38>
    6c54:	0006a180 	call	6a18 <__sinit.part.1>
    6c58:	81000017 	ldw	r4,0(r16)
    6c5c:	2480b804 	addi	r18,r4,736
    6c60:	047fffc4 	movi	r17,-1
    6c64:	91000117 	ldw	r4,4(r18)
    6c68:	94000217 	ldw	r16,8(r18)
    6c6c:	213fffc4 	addi	r4,r4,-1
    6c70:	20000a16 	blt	r4,zero,6c9c <__sfp+0x78>
    6c74:	8080030f 	ldh	r2,12(r16)
    6c78:	10000c26 	beq	r2,zero,6cac <__sfp+0x88>
    6c7c:	80c01d04 	addi	r3,r16,116
    6c80:	00000206 	br	6c8c <__sfp+0x68>
    6c84:	18bfe60f 	ldh	r2,-104(r3)
    6c88:	10000826 	beq	r2,zero,6cac <__sfp+0x88>
    6c8c:	213fffc4 	addi	r4,r4,-1
    6c90:	1c3ffd04 	addi	r16,r3,-12
    6c94:	18c01a04 	addi	r3,r3,104
    6c98:	247ffa1e 	bne	r4,r17,6c84 <__alt_data_end+0xff006c84>
    6c9c:	90800017 	ldw	r2,0(r18)
    6ca0:	10001d26 	beq	r2,zero,6d18 <__sfp+0xf4>
    6ca4:	1025883a 	mov	r18,r2
    6ca8:	003fee06 	br	6c64 <__alt_data_end+0xff006c64>
    6cac:	00bfffc4 	movi	r2,-1
    6cb0:	8080038d 	sth	r2,14(r16)
    6cb4:	00800044 	movi	r2,1
    6cb8:	8080030d 	sth	r2,12(r16)
    6cbc:	80001915 	stw	zero,100(r16)
    6cc0:	80000015 	stw	zero,0(r16)
    6cc4:	80000215 	stw	zero,8(r16)
    6cc8:	80000115 	stw	zero,4(r16)
    6ccc:	80000415 	stw	zero,16(r16)
    6cd0:	80000515 	stw	zero,20(r16)
    6cd4:	80000615 	stw	zero,24(r16)
    6cd8:	01800204 	movi	r6,8
    6cdc:	000b883a 	mov	r5,zero
    6ce0:	81001704 	addi	r4,r16,92
    6ce4:	0007e3c0 	call	7e3c <memset>
    6ce8:	8005883a 	mov	r2,r16
    6cec:	80000c15 	stw	zero,48(r16)
    6cf0:	80000d15 	stw	zero,52(r16)
    6cf4:	80001115 	stw	zero,68(r16)
    6cf8:	80001215 	stw	zero,72(r16)
    6cfc:	dfc00417 	ldw	ra,16(sp)
    6d00:	dcc00317 	ldw	r19,12(sp)
    6d04:	dc800217 	ldw	r18,8(sp)
    6d08:	dc400117 	ldw	r17,4(sp)
    6d0c:	dc000017 	ldw	r16,0(sp)
    6d10:	dec00504 	addi	sp,sp,20
    6d14:	f800283a 	ret
    6d18:	01400104 	movi	r5,4
    6d1c:	9809883a 	mov	r4,r19
    6d20:	0006bbc0 	call	6bbc <__sfmoreglue>
    6d24:	90800015 	stw	r2,0(r18)
    6d28:	103fde1e 	bne	r2,zero,6ca4 <__alt_data_end+0xff006ca4>
    6d2c:	00800304 	movi	r2,12
    6d30:	98800015 	stw	r2,0(r19)
    6d34:	0005883a 	mov	r2,zero
    6d38:	003ff006 	br	6cfc <__alt_data_end+0xff006cfc>

00006d3c <_cleanup>:
    6d3c:	00800074 	movhi	r2,1
    6d40:	108b9504 	addi	r2,r2,11860
    6d44:	11000017 	ldw	r4,0(r2)
    6d48:	01400074 	movhi	r5,1
    6d4c:	296bc404 	addi	r5,r5,-20720
    6d50:	00077581 	jmpi	7758 <_fwalk_reent>

00006d54 <__sinit>:
    6d54:	20800e17 	ldw	r2,56(r4)
    6d58:	10000126 	beq	r2,zero,6d60 <__sinit+0xc>
    6d5c:	f800283a 	ret
    6d60:	0006a181 	jmpi	6a18 <__sinit.part.1>

00006d64 <__sfp_lock_acquire>:
    6d64:	f800283a 	ret

00006d68 <__sfp_lock_release>:
    6d68:	f800283a 	ret

00006d6c <__sinit_lock_acquire>:
    6d6c:	f800283a 	ret

00006d70 <__sinit_lock_release>:
    6d70:	f800283a 	ret

00006d74 <__fp_lock_all>:
    6d74:	00800074 	movhi	r2,1
    6d78:	108b9604 	addi	r2,r2,11864
    6d7c:	11000017 	ldw	r4,0(r2)
    6d80:	01400034 	movhi	r5,0
    6d84:	295aed04 	addi	r5,r5,27572
    6d88:	00076941 	jmpi	7694 <_fwalk>

00006d8c <__fp_unlock_all>:
    6d8c:	00800074 	movhi	r2,1
    6d90:	108b9604 	addi	r2,r2,11864
    6d94:	11000017 	ldw	r4,0(r2)
    6d98:	01400034 	movhi	r5,0
    6d9c:	295a8104 	addi	r5,r5,27140
    6da0:	00076941 	jmpi	7694 <_fwalk>

00006da4 <_malloc_trim_r>:
    6da4:	defffb04 	addi	sp,sp,-20
    6da8:	dcc00315 	stw	r19,12(sp)
    6dac:	04c00074 	movhi	r19,1
    6db0:	dc800215 	stw	r18,8(sp)
    6db4:	dc400115 	stw	r17,4(sp)
    6db8:	dc000015 	stw	r16,0(sp)
    6dbc:	dfc00415 	stw	ra,16(sp)
    6dc0:	2821883a 	mov	r16,r5
    6dc4:	9cc4e804 	addi	r19,r19,5024
    6dc8:	2025883a 	mov	r18,r4
    6dcc:	000e36c0 	call	e36c <__malloc_lock>
    6dd0:	98800217 	ldw	r2,8(r19)
    6dd4:	14400117 	ldw	r17,4(r2)
    6dd8:	00bfff04 	movi	r2,-4
    6ddc:	88a2703a 	and	r17,r17,r2
    6de0:	8c21c83a 	sub	r16,r17,r16
    6de4:	8403fbc4 	addi	r16,r16,4079
    6de8:	8020d33a 	srli	r16,r16,12
    6dec:	0083ffc4 	movi	r2,4095
    6df0:	843fffc4 	addi	r16,r16,-1
    6df4:	8020933a 	slli	r16,r16,12
    6df8:	1400060e 	bge	r2,r16,6e14 <_malloc_trim_r+0x70>
    6dfc:	000b883a 	mov	r5,zero
    6e00:	9009883a 	mov	r4,r18
    6e04:	00029c40 	call	29c4 <_sbrk_r>
    6e08:	98c00217 	ldw	r3,8(r19)
    6e0c:	1c47883a 	add	r3,r3,r17
    6e10:	10c00a26 	beq	r2,r3,6e3c <_malloc_trim_r+0x98>
    6e14:	9009883a 	mov	r4,r18
    6e18:	000e3900 	call	e390 <__malloc_unlock>
    6e1c:	0005883a 	mov	r2,zero
    6e20:	dfc00417 	ldw	ra,16(sp)
    6e24:	dcc00317 	ldw	r19,12(sp)
    6e28:	dc800217 	ldw	r18,8(sp)
    6e2c:	dc400117 	ldw	r17,4(sp)
    6e30:	dc000017 	ldw	r16,0(sp)
    6e34:	dec00504 	addi	sp,sp,20
    6e38:	f800283a 	ret
    6e3c:	040bc83a 	sub	r5,zero,r16
    6e40:	9009883a 	mov	r4,r18
    6e44:	00029c40 	call	29c4 <_sbrk_r>
    6e48:	00ffffc4 	movi	r3,-1
    6e4c:	10c00d26 	beq	r2,r3,6e84 <_malloc_trim_r+0xe0>
    6e50:	00c00074 	movhi	r3,1
    6e54:	18d2c004 	addi	r3,r3,19200
    6e58:	18800017 	ldw	r2,0(r3)
    6e5c:	99000217 	ldw	r4,8(r19)
    6e60:	8c23c83a 	sub	r17,r17,r16
    6e64:	8c400054 	ori	r17,r17,1
    6e68:	1421c83a 	sub	r16,r2,r16
    6e6c:	24400115 	stw	r17,4(r4)
    6e70:	9009883a 	mov	r4,r18
    6e74:	1c000015 	stw	r16,0(r3)
    6e78:	000e3900 	call	e390 <__malloc_unlock>
    6e7c:	00800044 	movi	r2,1
    6e80:	003fe706 	br	6e20 <__alt_data_end+0xff006e20>
    6e84:	000b883a 	mov	r5,zero
    6e88:	9009883a 	mov	r4,r18
    6e8c:	00029c40 	call	29c4 <_sbrk_r>
    6e90:	99000217 	ldw	r4,8(r19)
    6e94:	014003c4 	movi	r5,15
    6e98:	1107c83a 	sub	r3,r2,r4
    6e9c:	28ffdd0e 	bge	r5,r3,6e14 <__alt_data_end+0xff006e14>
    6ea0:	01400074 	movhi	r5,1
    6ea4:	294b9304 	addi	r5,r5,11852
    6ea8:	29400017 	ldw	r5,0(r5)
    6eac:	18c00054 	ori	r3,r3,1
    6eb0:	20c00115 	stw	r3,4(r4)
    6eb4:	00c00074 	movhi	r3,1
    6eb8:	1145c83a 	sub	r2,r2,r5
    6ebc:	18d2c004 	addi	r3,r3,19200
    6ec0:	18800015 	stw	r2,0(r3)
    6ec4:	003fd306 	br	6e14 <__alt_data_end+0xff006e14>

00006ec8 <_free_r>:
    6ec8:	28004126 	beq	r5,zero,6fd0 <_free_r+0x108>
    6ecc:	defffd04 	addi	sp,sp,-12
    6ed0:	dc400115 	stw	r17,4(sp)
    6ed4:	dc000015 	stw	r16,0(sp)
    6ed8:	2023883a 	mov	r17,r4
    6edc:	2821883a 	mov	r16,r5
    6ee0:	dfc00215 	stw	ra,8(sp)
    6ee4:	000e36c0 	call	e36c <__malloc_lock>
    6ee8:	81ffff17 	ldw	r7,-4(r16)
    6eec:	00bfff84 	movi	r2,-2
    6ef0:	01000074 	movhi	r4,1
    6ef4:	81bffe04 	addi	r6,r16,-8
    6ef8:	3884703a 	and	r2,r7,r2
    6efc:	2104e804 	addi	r4,r4,5024
    6f00:	308b883a 	add	r5,r6,r2
    6f04:	2a400117 	ldw	r9,4(r5)
    6f08:	22000217 	ldw	r8,8(r4)
    6f0c:	00ffff04 	movi	r3,-4
    6f10:	48c6703a 	and	r3,r9,r3
    6f14:	2a005726 	beq	r5,r8,7074 <_free_r+0x1ac>
    6f18:	28c00115 	stw	r3,4(r5)
    6f1c:	39c0004c 	andi	r7,r7,1
    6f20:	3800091e 	bne	r7,zero,6f48 <_free_r+0x80>
    6f24:	823ffe17 	ldw	r8,-8(r16)
    6f28:	22400204 	addi	r9,r4,8
    6f2c:	320dc83a 	sub	r6,r6,r8
    6f30:	31c00217 	ldw	r7,8(r6)
    6f34:	1205883a 	add	r2,r2,r8
    6f38:	3a406526 	beq	r7,r9,70d0 <_free_r+0x208>
    6f3c:	32000317 	ldw	r8,12(r6)
    6f40:	3a000315 	stw	r8,12(r7)
    6f44:	41c00215 	stw	r7,8(r8)
    6f48:	28cf883a 	add	r7,r5,r3
    6f4c:	39c00117 	ldw	r7,4(r7)
    6f50:	39c0004c 	andi	r7,r7,1
    6f54:	38003a26 	beq	r7,zero,7040 <_free_r+0x178>
    6f58:	10c00054 	ori	r3,r2,1
    6f5c:	30c00115 	stw	r3,4(r6)
    6f60:	3087883a 	add	r3,r6,r2
    6f64:	18800015 	stw	r2,0(r3)
    6f68:	00c07fc4 	movi	r3,511
    6f6c:	18801936 	bltu	r3,r2,6fd4 <_free_r+0x10c>
    6f70:	1004d0fa 	srli	r2,r2,3
    6f74:	01c00044 	movi	r7,1
    6f78:	21400117 	ldw	r5,4(r4)
    6f7c:	10c00044 	addi	r3,r2,1
    6f80:	18c7883a 	add	r3,r3,r3
    6f84:	1005d0ba 	srai	r2,r2,2
    6f88:	18c7883a 	add	r3,r3,r3
    6f8c:	18c7883a 	add	r3,r3,r3
    6f90:	1907883a 	add	r3,r3,r4
    6f94:	3884983a 	sll	r2,r7,r2
    6f98:	19c00017 	ldw	r7,0(r3)
    6f9c:	1a3ffe04 	addi	r8,r3,-8
    6fa0:	1144b03a 	or	r2,r2,r5
    6fa4:	32000315 	stw	r8,12(r6)
    6fa8:	31c00215 	stw	r7,8(r6)
    6fac:	20800115 	stw	r2,4(r4)
    6fb0:	19800015 	stw	r6,0(r3)
    6fb4:	39800315 	stw	r6,12(r7)
    6fb8:	8809883a 	mov	r4,r17
    6fbc:	dfc00217 	ldw	ra,8(sp)
    6fc0:	dc400117 	ldw	r17,4(sp)
    6fc4:	dc000017 	ldw	r16,0(sp)
    6fc8:	dec00304 	addi	sp,sp,12
    6fcc:	000e3901 	jmpi	e390 <__malloc_unlock>
    6fd0:	f800283a 	ret
    6fd4:	100ad27a 	srli	r5,r2,9
    6fd8:	00c00104 	movi	r3,4
    6fdc:	19404a36 	bltu	r3,r5,7108 <_free_r+0x240>
    6fe0:	100ad1ba 	srli	r5,r2,6
    6fe4:	28c00e44 	addi	r3,r5,57
    6fe8:	18c7883a 	add	r3,r3,r3
    6fec:	29400e04 	addi	r5,r5,56
    6ff0:	18c7883a 	add	r3,r3,r3
    6ff4:	18c7883a 	add	r3,r3,r3
    6ff8:	1909883a 	add	r4,r3,r4
    6ffc:	20c00017 	ldw	r3,0(r4)
    7000:	01c00074 	movhi	r7,1
    7004:	213ffe04 	addi	r4,r4,-8
    7008:	39c4e804 	addi	r7,r7,5024
    700c:	20c04426 	beq	r4,r3,7120 <_free_r+0x258>
    7010:	01ffff04 	movi	r7,-4
    7014:	19400117 	ldw	r5,4(r3)
    7018:	29ca703a 	and	r5,r5,r7
    701c:	1140022e 	bgeu	r2,r5,7028 <_free_r+0x160>
    7020:	18c00217 	ldw	r3,8(r3)
    7024:	20fffb1e 	bne	r4,r3,7014 <__alt_data_end+0xff007014>
    7028:	19000317 	ldw	r4,12(r3)
    702c:	31000315 	stw	r4,12(r6)
    7030:	30c00215 	stw	r3,8(r6)
    7034:	21800215 	stw	r6,8(r4)
    7038:	19800315 	stw	r6,12(r3)
    703c:	003fde06 	br	6fb8 <__alt_data_end+0xff006fb8>
    7040:	29c00217 	ldw	r7,8(r5)
    7044:	10c5883a 	add	r2,r2,r3
    7048:	00c00074 	movhi	r3,1
    704c:	18c4ea04 	addi	r3,r3,5032
    7050:	38c03b26 	beq	r7,r3,7140 <_free_r+0x278>
    7054:	2a000317 	ldw	r8,12(r5)
    7058:	11400054 	ori	r5,r2,1
    705c:	3087883a 	add	r3,r6,r2
    7060:	3a000315 	stw	r8,12(r7)
    7064:	41c00215 	stw	r7,8(r8)
    7068:	31400115 	stw	r5,4(r6)
    706c:	18800015 	stw	r2,0(r3)
    7070:	003fbd06 	br	6f68 <__alt_data_end+0xff006f68>
    7074:	39c0004c 	andi	r7,r7,1
    7078:	10c5883a 	add	r2,r2,r3
    707c:	3800071e 	bne	r7,zero,709c <_free_r+0x1d4>
    7080:	81fffe17 	ldw	r7,-8(r16)
    7084:	31cdc83a 	sub	r6,r6,r7
    7088:	30c00317 	ldw	r3,12(r6)
    708c:	31400217 	ldw	r5,8(r6)
    7090:	11c5883a 	add	r2,r2,r7
    7094:	28c00315 	stw	r3,12(r5)
    7098:	19400215 	stw	r5,8(r3)
    709c:	10c00054 	ori	r3,r2,1
    70a0:	30c00115 	stw	r3,4(r6)
    70a4:	00c00074 	movhi	r3,1
    70a8:	18cb9404 	addi	r3,r3,11856
    70ac:	18c00017 	ldw	r3,0(r3)
    70b0:	21800215 	stw	r6,8(r4)
    70b4:	10ffc036 	bltu	r2,r3,6fb8 <__alt_data_end+0xff006fb8>
    70b8:	00800074 	movhi	r2,1
    70bc:	1092b204 	addi	r2,r2,19144
    70c0:	11400017 	ldw	r5,0(r2)
    70c4:	8809883a 	mov	r4,r17
    70c8:	0006da40 	call	6da4 <_malloc_trim_r>
    70cc:	003fba06 	br	6fb8 <__alt_data_end+0xff006fb8>
    70d0:	28c9883a 	add	r4,r5,r3
    70d4:	21000117 	ldw	r4,4(r4)
    70d8:	2100004c 	andi	r4,r4,1
    70dc:	2000391e 	bne	r4,zero,71c4 <_free_r+0x2fc>
    70e0:	29c00217 	ldw	r7,8(r5)
    70e4:	29000317 	ldw	r4,12(r5)
    70e8:	1885883a 	add	r2,r3,r2
    70ec:	10c00054 	ori	r3,r2,1
    70f0:	39000315 	stw	r4,12(r7)
    70f4:	21c00215 	stw	r7,8(r4)
    70f8:	30c00115 	stw	r3,4(r6)
    70fc:	308d883a 	add	r6,r6,r2
    7100:	30800015 	stw	r2,0(r6)
    7104:	003fac06 	br	6fb8 <__alt_data_end+0xff006fb8>
    7108:	00c00504 	movi	r3,20
    710c:	19401536 	bltu	r3,r5,7164 <_free_r+0x29c>
    7110:	28c01704 	addi	r3,r5,92
    7114:	18c7883a 	add	r3,r3,r3
    7118:	294016c4 	addi	r5,r5,91
    711c:	003fb406 	br	6ff0 <__alt_data_end+0xff006ff0>
    7120:	280bd0ba 	srai	r5,r5,2
    7124:	00c00044 	movi	r3,1
    7128:	38800117 	ldw	r2,4(r7)
    712c:	194a983a 	sll	r5,r3,r5
    7130:	2007883a 	mov	r3,r4
    7134:	2884b03a 	or	r2,r5,r2
    7138:	38800115 	stw	r2,4(r7)
    713c:	003fbb06 	br	702c <__alt_data_end+0xff00702c>
    7140:	21800515 	stw	r6,20(r4)
    7144:	21800415 	stw	r6,16(r4)
    7148:	10c00054 	ori	r3,r2,1
    714c:	31c00315 	stw	r7,12(r6)
    7150:	31c00215 	stw	r7,8(r6)
    7154:	30c00115 	stw	r3,4(r6)
    7158:	308d883a 	add	r6,r6,r2
    715c:	30800015 	stw	r2,0(r6)
    7160:	003f9506 	br	6fb8 <__alt_data_end+0xff006fb8>
    7164:	00c01504 	movi	r3,84
    7168:	19400536 	bltu	r3,r5,7180 <_free_r+0x2b8>
    716c:	100ad33a 	srli	r5,r2,12
    7170:	28c01bc4 	addi	r3,r5,111
    7174:	18c7883a 	add	r3,r3,r3
    7178:	29401b84 	addi	r5,r5,110
    717c:	003f9c06 	br	6ff0 <__alt_data_end+0xff006ff0>
    7180:	00c05504 	movi	r3,340
    7184:	19400536 	bltu	r3,r5,719c <_free_r+0x2d4>
    7188:	100ad3fa 	srli	r5,r2,15
    718c:	28c01e04 	addi	r3,r5,120
    7190:	18c7883a 	add	r3,r3,r3
    7194:	29401dc4 	addi	r5,r5,119
    7198:	003f9506 	br	6ff0 <__alt_data_end+0xff006ff0>
    719c:	00c15504 	movi	r3,1364
    71a0:	19400536 	bltu	r3,r5,71b8 <_free_r+0x2f0>
    71a4:	100ad4ba 	srli	r5,r2,18
    71a8:	28c01f44 	addi	r3,r5,125
    71ac:	18c7883a 	add	r3,r3,r3
    71b0:	29401f04 	addi	r5,r5,124
    71b4:	003f8e06 	br	6ff0 <__alt_data_end+0xff006ff0>
    71b8:	00c03f84 	movi	r3,254
    71bc:	01401f84 	movi	r5,126
    71c0:	003f8b06 	br	6ff0 <__alt_data_end+0xff006ff0>
    71c4:	10c00054 	ori	r3,r2,1
    71c8:	30c00115 	stw	r3,4(r6)
    71cc:	308d883a 	add	r6,r6,r2
    71d0:	30800015 	stw	r2,0(r6)
    71d4:	003f7806 	br	6fb8 <__alt_data_end+0xff006fb8>

000071d8 <__sfvwrite_r>:
    71d8:	30800217 	ldw	r2,8(r6)
    71dc:	10006726 	beq	r2,zero,737c <__sfvwrite_r+0x1a4>
    71e0:	28c0030b 	ldhu	r3,12(r5)
    71e4:	defff404 	addi	sp,sp,-48
    71e8:	dd400715 	stw	r21,28(sp)
    71ec:	dd000615 	stw	r20,24(sp)
    71f0:	dc000215 	stw	r16,8(sp)
    71f4:	dfc00b15 	stw	ra,44(sp)
    71f8:	df000a15 	stw	fp,40(sp)
    71fc:	ddc00915 	stw	r23,36(sp)
    7200:	dd800815 	stw	r22,32(sp)
    7204:	dcc00515 	stw	r19,20(sp)
    7208:	dc800415 	stw	r18,16(sp)
    720c:	dc400315 	stw	r17,12(sp)
    7210:	1880020c 	andi	r2,r3,8
    7214:	2821883a 	mov	r16,r5
    7218:	202b883a 	mov	r21,r4
    721c:	3029883a 	mov	r20,r6
    7220:	10002726 	beq	r2,zero,72c0 <__sfvwrite_r+0xe8>
    7224:	28800417 	ldw	r2,16(r5)
    7228:	10002526 	beq	r2,zero,72c0 <__sfvwrite_r+0xe8>
    722c:	1880008c 	andi	r2,r3,2
    7230:	a4400017 	ldw	r17,0(r20)
    7234:	10002a26 	beq	r2,zero,72e0 <__sfvwrite_r+0x108>
    7238:	05a00034 	movhi	r22,32768
    723c:	0027883a 	mov	r19,zero
    7240:	0025883a 	mov	r18,zero
    7244:	b5bf0004 	addi	r22,r22,-1024
    7248:	980d883a 	mov	r6,r19
    724c:	a809883a 	mov	r4,r21
    7250:	90004626 	beq	r18,zero,736c <__sfvwrite_r+0x194>
    7254:	900f883a 	mov	r7,r18
    7258:	b480022e 	bgeu	r22,r18,7264 <__sfvwrite_r+0x8c>
    725c:	01e00034 	movhi	r7,32768
    7260:	39ff0004 	addi	r7,r7,-1024
    7264:	80800917 	ldw	r2,36(r16)
    7268:	81400717 	ldw	r5,28(r16)
    726c:	103ee83a 	callr	r2
    7270:	0080570e 	bge	zero,r2,73d0 <__sfvwrite_r+0x1f8>
    7274:	a0c00217 	ldw	r3,8(r20)
    7278:	98a7883a 	add	r19,r19,r2
    727c:	90a5c83a 	sub	r18,r18,r2
    7280:	1885c83a 	sub	r2,r3,r2
    7284:	a0800215 	stw	r2,8(r20)
    7288:	103fef1e 	bne	r2,zero,7248 <__alt_data_end+0xff007248>
    728c:	0005883a 	mov	r2,zero
    7290:	dfc00b17 	ldw	ra,44(sp)
    7294:	df000a17 	ldw	fp,40(sp)
    7298:	ddc00917 	ldw	r23,36(sp)
    729c:	dd800817 	ldw	r22,32(sp)
    72a0:	dd400717 	ldw	r21,28(sp)
    72a4:	dd000617 	ldw	r20,24(sp)
    72a8:	dcc00517 	ldw	r19,20(sp)
    72ac:	dc800417 	ldw	r18,16(sp)
    72b0:	dc400317 	ldw	r17,12(sp)
    72b4:	dc000217 	ldw	r16,8(sp)
    72b8:	dec00c04 	addi	sp,sp,48
    72bc:	f800283a 	ret
    72c0:	800b883a 	mov	r5,r16
    72c4:	a809883a 	mov	r4,r21
    72c8:	0004d800 	call	4d80 <__swsetup_r>
    72cc:	1000eb1e 	bne	r2,zero,767c <__sfvwrite_r+0x4a4>
    72d0:	80c0030b 	ldhu	r3,12(r16)
    72d4:	a4400017 	ldw	r17,0(r20)
    72d8:	1880008c 	andi	r2,r3,2
    72dc:	103fd61e 	bne	r2,zero,7238 <__alt_data_end+0xff007238>
    72e0:	1880004c 	andi	r2,r3,1
    72e4:	10003f1e 	bne	r2,zero,73e4 <__sfvwrite_r+0x20c>
    72e8:	0039883a 	mov	fp,zero
    72ec:	0025883a 	mov	r18,zero
    72f0:	90001a26 	beq	r18,zero,735c <__sfvwrite_r+0x184>
    72f4:	1880800c 	andi	r2,r3,512
    72f8:	84c00217 	ldw	r19,8(r16)
    72fc:	10002126 	beq	r2,zero,7384 <__sfvwrite_r+0x1ac>
    7300:	982f883a 	mov	r23,r19
    7304:	94c09336 	bltu	r18,r19,7554 <__sfvwrite_r+0x37c>
    7308:	1881200c 	andi	r2,r3,1152
    730c:	10009e1e 	bne	r2,zero,7588 <__sfvwrite_r+0x3b0>
    7310:	81000017 	ldw	r4,0(r16)
    7314:	b80d883a 	mov	r6,r23
    7318:	e00b883a 	mov	r5,fp
    731c:	0007ce00 	call	7ce0 <memmove>
    7320:	80c00217 	ldw	r3,8(r16)
    7324:	81000017 	ldw	r4,0(r16)
    7328:	9005883a 	mov	r2,r18
    732c:	1ce7c83a 	sub	r19,r3,r19
    7330:	25cf883a 	add	r7,r4,r23
    7334:	84c00215 	stw	r19,8(r16)
    7338:	81c00015 	stw	r7,0(r16)
    733c:	a0c00217 	ldw	r3,8(r20)
    7340:	e0b9883a 	add	fp,fp,r2
    7344:	90a5c83a 	sub	r18,r18,r2
    7348:	18a7c83a 	sub	r19,r3,r2
    734c:	a4c00215 	stw	r19,8(r20)
    7350:	983fce26 	beq	r19,zero,728c <__alt_data_end+0xff00728c>
    7354:	80c0030b 	ldhu	r3,12(r16)
    7358:	903fe61e 	bne	r18,zero,72f4 <__alt_data_end+0xff0072f4>
    735c:	8f000017 	ldw	fp,0(r17)
    7360:	8c800117 	ldw	r18,4(r17)
    7364:	8c400204 	addi	r17,r17,8
    7368:	003fe106 	br	72f0 <__alt_data_end+0xff0072f0>
    736c:	8cc00017 	ldw	r19,0(r17)
    7370:	8c800117 	ldw	r18,4(r17)
    7374:	8c400204 	addi	r17,r17,8
    7378:	003fb306 	br	7248 <__alt_data_end+0xff007248>
    737c:	0005883a 	mov	r2,zero
    7380:	f800283a 	ret
    7384:	81000017 	ldw	r4,0(r16)
    7388:	80800417 	ldw	r2,16(r16)
    738c:	11005736 	bltu	r2,r4,74ec <__sfvwrite_r+0x314>
    7390:	85c00517 	ldw	r23,20(r16)
    7394:	95c05536 	bltu	r18,r23,74ec <__sfvwrite_r+0x314>
    7398:	00a00034 	movhi	r2,32768
    739c:	10bfffc4 	addi	r2,r2,-1
    73a0:	9009883a 	mov	r4,r18
    73a4:	1480012e 	bgeu	r2,r18,73ac <__sfvwrite_r+0x1d4>
    73a8:	1009883a 	mov	r4,r2
    73ac:	b80b883a 	mov	r5,r23
    73b0:	00014a80 	call	14a8 <__divsi3>
    73b4:	15cf383a 	mul	r7,r2,r23
    73b8:	81400717 	ldw	r5,28(r16)
    73bc:	80800917 	ldw	r2,36(r16)
    73c0:	e00d883a 	mov	r6,fp
    73c4:	a809883a 	mov	r4,r21
    73c8:	103ee83a 	callr	r2
    73cc:	00bfdb16 	blt	zero,r2,733c <__alt_data_end+0xff00733c>
    73d0:	8080030b 	ldhu	r2,12(r16)
    73d4:	10801014 	ori	r2,r2,64
    73d8:	8080030d 	sth	r2,12(r16)
    73dc:	00bfffc4 	movi	r2,-1
    73e0:	003fab06 	br	7290 <__alt_data_end+0xff007290>
    73e4:	0027883a 	mov	r19,zero
    73e8:	0011883a 	mov	r8,zero
    73ec:	0039883a 	mov	fp,zero
    73f0:	0025883a 	mov	r18,zero
    73f4:	90001f26 	beq	r18,zero,7474 <__sfvwrite_r+0x29c>
    73f8:	40005a26 	beq	r8,zero,7564 <__sfvwrite_r+0x38c>
    73fc:	982d883a 	mov	r22,r19
    7400:	94c0012e 	bgeu	r18,r19,7408 <__sfvwrite_r+0x230>
    7404:	902d883a 	mov	r22,r18
    7408:	81000017 	ldw	r4,0(r16)
    740c:	80800417 	ldw	r2,16(r16)
    7410:	b02f883a 	mov	r23,r22
    7414:	81c00517 	ldw	r7,20(r16)
    7418:	1100032e 	bgeu	r2,r4,7428 <__sfvwrite_r+0x250>
    741c:	80c00217 	ldw	r3,8(r16)
    7420:	38c7883a 	add	r3,r7,r3
    7424:	1d801816 	blt	r3,r22,7488 <__sfvwrite_r+0x2b0>
    7428:	b1c03e16 	blt	r22,r7,7524 <__sfvwrite_r+0x34c>
    742c:	80800917 	ldw	r2,36(r16)
    7430:	81400717 	ldw	r5,28(r16)
    7434:	e00d883a 	mov	r6,fp
    7438:	da000115 	stw	r8,4(sp)
    743c:	a809883a 	mov	r4,r21
    7440:	103ee83a 	callr	r2
    7444:	102f883a 	mov	r23,r2
    7448:	da000117 	ldw	r8,4(sp)
    744c:	00bfe00e 	bge	zero,r2,73d0 <__alt_data_end+0xff0073d0>
    7450:	9de7c83a 	sub	r19,r19,r23
    7454:	98001f26 	beq	r19,zero,74d4 <__sfvwrite_r+0x2fc>
    7458:	a0800217 	ldw	r2,8(r20)
    745c:	e5f9883a 	add	fp,fp,r23
    7460:	95e5c83a 	sub	r18,r18,r23
    7464:	15efc83a 	sub	r23,r2,r23
    7468:	a5c00215 	stw	r23,8(r20)
    746c:	b83f8726 	beq	r23,zero,728c <__alt_data_end+0xff00728c>
    7470:	903fe11e 	bne	r18,zero,73f8 <__alt_data_end+0xff0073f8>
    7474:	8f000017 	ldw	fp,0(r17)
    7478:	8c800117 	ldw	r18,4(r17)
    747c:	0011883a 	mov	r8,zero
    7480:	8c400204 	addi	r17,r17,8
    7484:	003fdb06 	br	73f4 <__alt_data_end+0xff0073f4>
    7488:	180d883a 	mov	r6,r3
    748c:	e00b883a 	mov	r5,fp
    7490:	da000115 	stw	r8,4(sp)
    7494:	d8c00015 	stw	r3,0(sp)
    7498:	0007ce00 	call	7ce0 <memmove>
    749c:	d8c00017 	ldw	r3,0(sp)
    74a0:	80800017 	ldw	r2,0(r16)
    74a4:	800b883a 	mov	r5,r16
    74a8:	a809883a 	mov	r4,r21
    74ac:	10c5883a 	add	r2,r2,r3
    74b0:	80800015 	stw	r2,0(r16)
    74b4:	d8c00015 	stw	r3,0(sp)
    74b8:	00069780 	call	6978 <_fflush_r>
    74bc:	d8c00017 	ldw	r3,0(sp)
    74c0:	da000117 	ldw	r8,4(sp)
    74c4:	103fc21e 	bne	r2,zero,73d0 <__alt_data_end+0xff0073d0>
    74c8:	182f883a 	mov	r23,r3
    74cc:	9de7c83a 	sub	r19,r19,r23
    74d0:	983fe11e 	bne	r19,zero,7458 <__alt_data_end+0xff007458>
    74d4:	800b883a 	mov	r5,r16
    74d8:	a809883a 	mov	r4,r21
    74dc:	00069780 	call	6978 <_fflush_r>
    74e0:	103fbb1e 	bne	r2,zero,73d0 <__alt_data_end+0xff0073d0>
    74e4:	0011883a 	mov	r8,zero
    74e8:	003fdb06 	br	7458 <__alt_data_end+0xff007458>
    74ec:	94c0012e 	bgeu	r18,r19,74f4 <__sfvwrite_r+0x31c>
    74f0:	9027883a 	mov	r19,r18
    74f4:	980d883a 	mov	r6,r19
    74f8:	e00b883a 	mov	r5,fp
    74fc:	0007ce00 	call	7ce0 <memmove>
    7500:	80800217 	ldw	r2,8(r16)
    7504:	80c00017 	ldw	r3,0(r16)
    7508:	14c5c83a 	sub	r2,r2,r19
    750c:	1cc7883a 	add	r3,r3,r19
    7510:	80800215 	stw	r2,8(r16)
    7514:	80c00015 	stw	r3,0(r16)
    7518:	10004326 	beq	r2,zero,7628 <__sfvwrite_r+0x450>
    751c:	9805883a 	mov	r2,r19
    7520:	003f8606 	br	733c <__alt_data_end+0xff00733c>
    7524:	b00d883a 	mov	r6,r22
    7528:	e00b883a 	mov	r5,fp
    752c:	da000115 	stw	r8,4(sp)
    7530:	0007ce00 	call	7ce0 <memmove>
    7534:	80800217 	ldw	r2,8(r16)
    7538:	80c00017 	ldw	r3,0(r16)
    753c:	da000117 	ldw	r8,4(sp)
    7540:	1585c83a 	sub	r2,r2,r22
    7544:	1dad883a 	add	r22,r3,r22
    7548:	80800215 	stw	r2,8(r16)
    754c:	85800015 	stw	r22,0(r16)
    7550:	003fbf06 	br	7450 <__alt_data_end+0xff007450>
    7554:	81000017 	ldw	r4,0(r16)
    7558:	9027883a 	mov	r19,r18
    755c:	902f883a 	mov	r23,r18
    7560:	003f6c06 	br	7314 <__alt_data_end+0xff007314>
    7564:	900d883a 	mov	r6,r18
    7568:	01400284 	movi	r5,10
    756c:	e009883a 	mov	r4,fp
    7570:	0007ab40 	call	7ab4 <memchr>
    7574:	10003e26 	beq	r2,zero,7670 <__sfvwrite_r+0x498>
    7578:	10800044 	addi	r2,r2,1
    757c:	1727c83a 	sub	r19,r2,fp
    7580:	02000044 	movi	r8,1
    7584:	003f9d06 	br	73fc <__alt_data_end+0xff0073fc>
    7588:	80800517 	ldw	r2,20(r16)
    758c:	81400417 	ldw	r5,16(r16)
    7590:	81c00017 	ldw	r7,0(r16)
    7594:	10a7883a 	add	r19,r2,r2
    7598:	9885883a 	add	r2,r19,r2
    759c:	1026d7fa 	srli	r19,r2,31
    75a0:	396dc83a 	sub	r22,r7,r5
    75a4:	b1000044 	addi	r4,r22,1
    75a8:	9885883a 	add	r2,r19,r2
    75ac:	1027d07a 	srai	r19,r2,1
    75b0:	2485883a 	add	r2,r4,r18
    75b4:	980d883a 	mov	r6,r19
    75b8:	9880022e 	bgeu	r19,r2,75c4 <__sfvwrite_r+0x3ec>
    75bc:	1027883a 	mov	r19,r2
    75c0:	100d883a 	mov	r6,r2
    75c4:	18c1000c 	andi	r3,r3,1024
    75c8:	18001c26 	beq	r3,zero,763c <__sfvwrite_r+0x464>
    75cc:	300b883a 	mov	r5,r6
    75d0:	a809883a 	mov	r4,r21
    75d4:	00020780 	call	2078 <_malloc_r>
    75d8:	102f883a 	mov	r23,r2
    75dc:	10002926 	beq	r2,zero,7684 <__sfvwrite_r+0x4ac>
    75e0:	81400417 	ldw	r5,16(r16)
    75e4:	b00d883a 	mov	r6,r22
    75e8:	1009883a 	mov	r4,r2
    75ec:	0007b980 	call	7b98 <memcpy>
    75f0:	8080030b 	ldhu	r2,12(r16)
    75f4:	00fedfc4 	movi	r3,-1153
    75f8:	10c4703a 	and	r2,r2,r3
    75fc:	10802014 	ori	r2,r2,128
    7600:	8080030d 	sth	r2,12(r16)
    7604:	bd89883a 	add	r4,r23,r22
    7608:	9d8fc83a 	sub	r7,r19,r22
    760c:	85c00415 	stw	r23,16(r16)
    7610:	84c00515 	stw	r19,20(r16)
    7614:	81000015 	stw	r4,0(r16)
    7618:	9027883a 	mov	r19,r18
    761c:	81c00215 	stw	r7,8(r16)
    7620:	902f883a 	mov	r23,r18
    7624:	003f3b06 	br	7314 <__alt_data_end+0xff007314>
    7628:	800b883a 	mov	r5,r16
    762c:	a809883a 	mov	r4,r21
    7630:	00069780 	call	6978 <_fflush_r>
    7634:	103fb926 	beq	r2,zero,751c <__alt_data_end+0xff00751c>
    7638:	003f6506 	br	73d0 <__alt_data_end+0xff0073d0>
    763c:	a809883a 	mov	r4,r21
    7640:	0008f600 	call	8f60 <_realloc_r>
    7644:	102f883a 	mov	r23,r2
    7648:	103fee1e 	bne	r2,zero,7604 <__alt_data_end+0xff007604>
    764c:	81400417 	ldw	r5,16(r16)
    7650:	a809883a 	mov	r4,r21
    7654:	0006ec80 	call	6ec8 <_free_r>
    7658:	8080030b 	ldhu	r2,12(r16)
    765c:	00ffdfc4 	movi	r3,-129
    7660:	1884703a 	and	r2,r3,r2
    7664:	00c00304 	movi	r3,12
    7668:	a8c00015 	stw	r3,0(r21)
    766c:	003f5906 	br	73d4 <__alt_data_end+0xff0073d4>
    7670:	94c00044 	addi	r19,r18,1
    7674:	02000044 	movi	r8,1
    7678:	003f6006 	br	73fc <__alt_data_end+0xff0073fc>
    767c:	00bfffc4 	movi	r2,-1
    7680:	003f0306 	br	7290 <__alt_data_end+0xff007290>
    7684:	00800304 	movi	r2,12
    7688:	a8800015 	stw	r2,0(r21)
    768c:	8080030b 	ldhu	r2,12(r16)
    7690:	003f5006 	br	73d4 <__alt_data_end+0xff0073d4>

00007694 <_fwalk>:
    7694:	defff704 	addi	sp,sp,-36
    7698:	dd000415 	stw	r20,16(sp)
    769c:	dfc00815 	stw	ra,32(sp)
    76a0:	ddc00715 	stw	r23,28(sp)
    76a4:	dd800615 	stw	r22,24(sp)
    76a8:	dd400515 	stw	r21,20(sp)
    76ac:	dcc00315 	stw	r19,12(sp)
    76b0:	dc800215 	stw	r18,8(sp)
    76b4:	dc400115 	stw	r17,4(sp)
    76b8:	dc000015 	stw	r16,0(sp)
    76bc:	2500b804 	addi	r20,r4,736
    76c0:	a0002326 	beq	r20,zero,7750 <_fwalk+0xbc>
    76c4:	282b883a 	mov	r21,r5
    76c8:	002f883a 	mov	r23,zero
    76cc:	05800044 	movi	r22,1
    76d0:	04ffffc4 	movi	r19,-1
    76d4:	a4400117 	ldw	r17,4(r20)
    76d8:	a4800217 	ldw	r18,8(r20)
    76dc:	8c7fffc4 	addi	r17,r17,-1
    76e0:	88000d16 	blt	r17,zero,7718 <_fwalk+0x84>
    76e4:	94000304 	addi	r16,r18,12
    76e8:	94800384 	addi	r18,r18,14
    76ec:	8080000b 	ldhu	r2,0(r16)
    76f0:	8c7fffc4 	addi	r17,r17,-1
    76f4:	813ffd04 	addi	r4,r16,-12
    76f8:	b080042e 	bgeu	r22,r2,770c <_fwalk+0x78>
    76fc:	9080000f 	ldh	r2,0(r18)
    7700:	14c00226 	beq	r2,r19,770c <_fwalk+0x78>
    7704:	a83ee83a 	callr	r21
    7708:	b8aeb03a 	or	r23,r23,r2
    770c:	84001a04 	addi	r16,r16,104
    7710:	94801a04 	addi	r18,r18,104
    7714:	8cfff51e 	bne	r17,r19,76ec <__alt_data_end+0xff0076ec>
    7718:	a5000017 	ldw	r20,0(r20)
    771c:	a03fed1e 	bne	r20,zero,76d4 <__alt_data_end+0xff0076d4>
    7720:	b805883a 	mov	r2,r23
    7724:	dfc00817 	ldw	ra,32(sp)
    7728:	ddc00717 	ldw	r23,28(sp)
    772c:	dd800617 	ldw	r22,24(sp)
    7730:	dd400517 	ldw	r21,20(sp)
    7734:	dd000417 	ldw	r20,16(sp)
    7738:	dcc00317 	ldw	r19,12(sp)
    773c:	dc800217 	ldw	r18,8(sp)
    7740:	dc400117 	ldw	r17,4(sp)
    7744:	dc000017 	ldw	r16,0(sp)
    7748:	dec00904 	addi	sp,sp,36
    774c:	f800283a 	ret
    7750:	002f883a 	mov	r23,zero
    7754:	003ff206 	br	7720 <__alt_data_end+0xff007720>

00007758 <_fwalk_reent>:
    7758:	defff704 	addi	sp,sp,-36
    775c:	dd000415 	stw	r20,16(sp)
    7760:	dfc00815 	stw	ra,32(sp)
    7764:	ddc00715 	stw	r23,28(sp)
    7768:	dd800615 	stw	r22,24(sp)
    776c:	dd400515 	stw	r21,20(sp)
    7770:	dcc00315 	stw	r19,12(sp)
    7774:	dc800215 	stw	r18,8(sp)
    7778:	dc400115 	stw	r17,4(sp)
    777c:	dc000015 	stw	r16,0(sp)
    7780:	2500b804 	addi	r20,r4,736
    7784:	a0002326 	beq	r20,zero,7814 <_fwalk_reent+0xbc>
    7788:	282b883a 	mov	r21,r5
    778c:	2027883a 	mov	r19,r4
    7790:	002f883a 	mov	r23,zero
    7794:	05800044 	movi	r22,1
    7798:	04bfffc4 	movi	r18,-1
    779c:	a4400117 	ldw	r17,4(r20)
    77a0:	a4000217 	ldw	r16,8(r20)
    77a4:	8c7fffc4 	addi	r17,r17,-1
    77a8:	88000c16 	blt	r17,zero,77dc <_fwalk_reent+0x84>
    77ac:	84000304 	addi	r16,r16,12
    77b0:	8080000b 	ldhu	r2,0(r16)
    77b4:	8c7fffc4 	addi	r17,r17,-1
    77b8:	817ffd04 	addi	r5,r16,-12
    77bc:	b080052e 	bgeu	r22,r2,77d4 <_fwalk_reent+0x7c>
    77c0:	8080008f 	ldh	r2,2(r16)
    77c4:	9809883a 	mov	r4,r19
    77c8:	14800226 	beq	r2,r18,77d4 <_fwalk_reent+0x7c>
    77cc:	a83ee83a 	callr	r21
    77d0:	b8aeb03a 	or	r23,r23,r2
    77d4:	84001a04 	addi	r16,r16,104
    77d8:	8cbff51e 	bne	r17,r18,77b0 <__alt_data_end+0xff0077b0>
    77dc:	a5000017 	ldw	r20,0(r20)
    77e0:	a03fee1e 	bne	r20,zero,779c <__alt_data_end+0xff00779c>
    77e4:	b805883a 	mov	r2,r23
    77e8:	dfc00817 	ldw	ra,32(sp)
    77ec:	ddc00717 	ldw	r23,28(sp)
    77f0:	dd800617 	ldw	r22,24(sp)
    77f4:	dd400517 	ldw	r21,20(sp)
    77f8:	dd000417 	ldw	r20,16(sp)
    77fc:	dcc00317 	ldw	r19,12(sp)
    7800:	dc800217 	ldw	r18,8(sp)
    7804:	dc400117 	ldw	r17,4(sp)
    7808:	dc000017 	ldw	r16,0(sp)
    780c:	dec00904 	addi	sp,sp,36
    7810:	f800283a 	ret
    7814:	002f883a 	mov	r23,zero
    7818:	003ff206 	br	77e4 <__alt_data_end+0xff0077e4>

0000781c <_setlocale_r>:
    781c:	30001b26 	beq	r6,zero,788c <_setlocale_r+0x70>
    7820:	01400074 	movhi	r5,1
    7824:	defffe04 	addi	sp,sp,-8
    7828:	29444904 	addi	r5,r5,4388
    782c:	3009883a 	mov	r4,r6
    7830:	dc000015 	stw	r16,0(sp)
    7834:	dfc00115 	stw	ra,4(sp)
    7838:	3021883a 	mov	r16,r6
    783c:	00096740 	call	9674 <strcmp>
    7840:	1000061e 	bne	r2,zero,785c <_setlocale_r+0x40>
    7844:	00800074 	movhi	r2,1
    7848:	10844804 	addi	r2,r2,4384
    784c:	dfc00117 	ldw	ra,4(sp)
    7850:	dc000017 	ldw	r16,0(sp)
    7854:	dec00204 	addi	sp,sp,8
    7858:	f800283a 	ret
    785c:	01400074 	movhi	r5,1
    7860:	29444804 	addi	r5,r5,4384
    7864:	8009883a 	mov	r4,r16
    7868:	00096740 	call	9674 <strcmp>
    786c:	103ff526 	beq	r2,zero,7844 <__alt_data_end+0xff007844>
    7870:	01400074 	movhi	r5,1
    7874:	29443304 	addi	r5,r5,4300
    7878:	8009883a 	mov	r4,r16
    787c:	00096740 	call	9674 <strcmp>
    7880:	103ff026 	beq	r2,zero,7844 <__alt_data_end+0xff007844>
    7884:	0005883a 	mov	r2,zero
    7888:	003ff006 	br	784c <__alt_data_end+0xff00784c>
    788c:	00800074 	movhi	r2,1
    7890:	10844804 	addi	r2,r2,4384
    7894:	f800283a 	ret

00007898 <__locale_charset>:
    7898:	00800074 	movhi	r2,1
    789c:	1086fb04 	addi	r2,r2,7148
    78a0:	f800283a 	ret

000078a4 <__locale_mb_cur_max>:
    78a4:	00800074 	movhi	r2,1
    78a8:	108b9704 	addi	r2,r2,11868
    78ac:	10800017 	ldw	r2,0(r2)
    78b0:	f800283a 	ret

000078b4 <__locale_msgcharset>:
    78b4:	00800074 	movhi	r2,1
    78b8:	1086f304 	addi	r2,r2,7116
    78bc:	f800283a 	ret

000078c0 <__locale_cjk_lang>:
    78c0:	0005883a 	mov	r2,zero
    78c4:	f800283a 	ret

000078c8 <_localeconv_r>:
    78c8:	00800074 	movhi	r2,1
    78cc:	10870304 	addi	r2,r2,7180
    78d0:	f800283a 	ret

000078d4 <setlocale>:
    78d4:	00800074 	movhi	r2,1
    78d8:	108b9604 	addi	r2,r2,11864
    78dc:	280d883a 	mov	r6,r5
    78e0:	200b883a 	mov	r5,r4
    78e4:	11000017 	ldw	r4,0(r2)
    78e8:	000781c1 	jmpi	781c <_setlocale_r>

000078ec <localeconv>:
    78ec:	00800074 	movhi	r2,1
    78f0:	10870304 	addi	r2,r2,7180
    78f4:	f800283a 	ret

000078f8 <__smakebuf_r>:
    78f8:	2880030b 	ldhu	r2,12(r5)
    78fc:	10c0008c 	andi	r3,r2,2
    7900:	1800411e 	bne	r3,zero,7a08 <__smakebuf_r+0x110>
    7904:	deffec04 	addi	sp,sp,-80
    7908:	dc000f15 	stw	r16,60(sp)
    790c:	2821883a 	mov	r16,r5
    7910:	2940038f 	ldh	r5,14(r5)
    7914:	dc401015 	stw	r17,64(sp)
    7918:	dfc01315 	stw	ra,76(sp)
    791c:	dcc01215 	stw	r19,72(sp)
    7920:	dc801115 	stw	r18,68(sp)
    7924:	2023883a 	mov	r17,r4
    7928:	28001c16 	blt	r5,zero,799c <__smakebuf_r+0xa4>
    792c:	d80d883a 	mov	r6,sp
    7930:	000b21c0 	call	b21c <_fstat_r>
    7934:	10001816 	blt	r2,zero,7998 <__smakebuf_r+0xa0>
    7938:	d8800117 	ldw	r2,4(sp)
    793c:	00e00014 	movui	r3,32768
    7940:	10bc000c 	andi	r2,r2,61440
    7944:	14c80020 	cmpeqi	r19,r2,8192
    7948:	10c03726 	beq	r2,r3,7a28 <__smakebuf_r+0x130>
    794c:	80c0030b 	ldhu	r3,12(r16)
    7950:	18c20014 	ori	r3,r3,2048
    7954:	80c0030d 	sth	r3,12(r16)
    7958:	00c80004 	movi	r3,8192
    795c:	10c0521e 	bne	r2,r3,7aa8 <__smakebuf_r+0x1b0>
    7960:	8140038f 	ldh	r5,14(r16)
    7964:	8809883a 	mov	r4,r17
    7968:	000b2780 	call	b278 <_isatty_r>
    796c:	10004c26 	beq	r2,zero,7aa0 <__smakebuf_r+0x1a8>
    7970:	8080030b 	ldhu	r2,12(r16)
    7974:	80c010c4 	addi	r3,r16,67
    7978:	80c00015 	stw	r3,0(r16)
    797c:	10800054 	ori	r2,r2,1
    7980:	8080030d 	sth	r2,12(r16)
    7984:	00800044 	movi	r2,1
    7988:	80c00415 	stw	r3,16(r16)
    798c:	80800515 	stw	r2,20(r16)
    7990:	04810004 	movi	r18,1024
    7994:	00000706 	br	79b4 <__smakebuf_r+0xbc>
    7998:	8080030b 	ldhu	r2,12(r16)
    799c:	10c0200c 	andi	r3,r2,128
    79a0:	18001f1e 	bne	r3,zero,7a20 <__smakebuf_r+0x128>
    79a4:	04810004 	movi	r18,1024
    79a8:	10820014 	ori	r2,r2,2048
    79ac:	8080030d 	sth	r2,12(r16)
    79b0:	0027883a 	mov	r19,zero
    79b4:	900b883a 	mov	r5,r18
    79b8:	8809883a 	mov	r4,r17
    79bc:	00020780 	call	2078 <_malloc_r>
    79c0:	10002c26 	beq	r2,zero,7a74 <__smakebuf_r+0x17c>
    79c4:	80c0030b 	ldhu	r3,12(r16)
    79c8:	01000034 	movhi	r4,0
    79cc:	211a8304 	addi	r4,r4,27148
    79d0:	89000f15 	stw	r4,60(r17)
    79d4:	18c02014 	ori	r3,r3,128
    79d8:	80c0030d 	sth	r3,12(r16)
    79dc:	80800015 	stw	r2,0(r16)
    79e0:	80800415 	stw	r2,16(r16)
    79e4:	84800515 	stw	r18,20(r16)
    79e8:	98001a1e 	bne	r19,zero,7a54 <__smakebuf_r+0x15c>
    79ec:	dfc01317 	ldw	ra,76(sp)
    79f0:	dcc01217 	ldw	r19,72(sp)
    79f4:	dc801117 	ldw	r18,68(sp)
    79f8:	dc401017 	ldw	r17,64(sp)
    79fc:	dc000f17 	ldw	r16,60(sp)
    7a00:	dec01404 	addi	sp,sp,80
    7a04:	f800283a 	ret
    7a08:	288010c4 	addi	r2,r5,67
    7a0c:	28800015 	stw	r2,0(r5)
    7a10:	28800415 	stw	r2,16(r5)
    7a14:	00800044 	movi	r2,1
    7a18:	28800515 	stw	r2,20(r5)
    7a1c:	f800283a 	ret
    7a20:	04801004 	movi	r18,64
    7a24:	003fe006 	br	79a8 <__alt_data_end+0xff0079a8>
    7a28:	81000a17 	ldw	r4,40(r16)
    7a2c:	00c00074 	movhi	r3,1
    7a30:	18e58404 	addi	r3,r3,-27120
    7a34:	20ffc51e 	bne	r4,r3,794c <__alt_data_end+0xff00794c>
    7a38:	8080030b 	ldhu	r2,12(r16)
    7a3c:	04810004 	movi	r18,1024
    7a40:	84801315 	stw	r18,76(r16)
    7a44:	1484b03a 	or	r2,r2,r18
    7a48:	8080030d 	sth	r2,12(r16)
    7a4c:	0027883a 	mov	r19,zero
    7a50:	003fd806 	br	79b4 <__alt_data_end+0xff0079b4>
    7a54:	8140038f 	ldh	r5,14(r16)
    7a58:	8809883a 	mov	r4,r17
    7a5c:	000b2780 	call	b278 <_isatty_r>
    7a60:	103fe226 	beq	r2,zero,79ec <__alt_data_end+0xff0079ec>
    7a64:	8080030b 	ldhu	r2,12(r16)
    7a68:	10800054 	ori	r2,r2,1
    7a6c:	8080030d 	sth	r2,12(r16)
    7a70:	003fde06 	br	79ec <__alt_data_end+0xff0079ec>
    7a74:	8080030b 	ldhu	r2,12(r16)
    7a78:	10c0800c 	andi	r3,r2,512
    7a7c:	183fdb1e 	bne	r3,zero,79ec <__alt_data_end+0xff0079ec>
    7a80:	10800094 	ori	r2,r2,2
    7a84:	80c010c4 	addi	r3,r16,67
    7a88:	8080030d 	sth	r2,12(r16)
    7a8c:	00800044 	movi	r2,1
    7a90:	80c00015 	stw	r3,0(r16)
    7a94:	80c00415 	stw	r3,16(r16)
    7a98:	80800515 	stw	r2,20(r16)
    7a9c:	003fd306 	br	79ec <__alt_data_end+0xff0079ec>
    7aa0:	04810004 	movi	r18,1024
    7aa4:	003fc306 	br	79b4 <__alt_data_end+0xff0079b4>
    7aa8:	0027883a 	mov	r19,zero
    7aac:	04810004 	movi	r18,1024
    7ab0:	003fc006 	br	79b4 <__alt_data_end+0xff0079b4>

00007ab4 <memchr>:
    7ab4:	208000cc 	andi	r2,r4,3
    7ab8:	280f883a 	mov	r7,r5
    7abc:	10003426 	beq	r2,zero,7b90 <memchr+0xdc>
    7ac0:	30bfffc4 	addi	r2,r6,-1
    7ac4:	30001a26 	beq	r6,zero,7b30 <memchr+0x7c>
    7ac8:	20c00003 	ldbu	r3,0(r4)
    7acc:	29803fcc 	andi	r6,r5,255
    7ad0:	30c0051e 	bne	r6,r3,7ae8 <memchr+0x34>
    7ad4:	00001806 	br	7b38 <memchr+0x84>
    7ad8:	10001526 	beq	r2,zero,7b30 <memchr+0x7c>
    7adc:	20c00003 	ldbu	r3,0(r4)
    7ae0:	10bfffc4 	addi	r2,r2,-1
    7ae4:	30c01426 	beq	r6,r3,7b38 <memchr+0x84>
    7ae8:	21000044 	addi	r4,r4,1
    7aec:	20c000cc 	andi	r3,r4,3
    7af0:	183ff91e 	bne	r3,zero,7ad8 <__alt_data_end+0xff007ad8>
    7af4:	020000c4 	movi	r8,3
    7af8:	40801136 	bltu	r8,r2,7b40 <memchr+0x8c>
    7afc:	10000c26 	beq	r2,zero,7b30 <memchr+0x7c>
    7b00:	20c00003 	ldbu	r3,0(r4)
    7b04:	29403fcc 	andi	r5,r5,255
    7b08:	28c00b26 	beq	r5,r3,7b38 <memchr+0x84>
    7b0c:	20c00044 	addi	r3,r4,1
    7b10:	39803fcc 	andi	r6,r7,255
    7b14:	2089883a 	add	r4,r4,r2
    7b18:	00000306 	br	7b28 <memchr+0x74>
    7b1c:	18c00044 	addi	r3,r3,1
    7b20:	197fffc3 	ldbu	r5,-1(r3)
    7b24:	31400526 	beq	r6,r5,7b3c <memchr+0x88>
    7b28:	1805883a 	mov	r2,r3
    7b2c:	20fffb1e 	bne	r4,r3,7b1c <__alt_data_end+0xff007b1c>
    7b30:	0005883a 	mov	r2,zero
    7b34:	f800283a 	ret
    7b38:	2005883a 	mov	r2,r4
    7b3c:	f800283a 	ret
    7b40:	28c03fcc 	andi	r3,r5,255
    7b44:	1812923a 	slli	r9,r3,8
    7b48:	02ffbff4 	movhi	r11,65279
    7b4c:	02a02074 	movhi	r10,32897
    7b50:	48d2b03a 	or	r9,r9,r3
    7b54:	4806943a 	slli	r3,r9,16
    7b58:	5affbfc4 	addi	r11,r11,-257
    7b5c:	52a02004 	addi	r10,r10,-32640
    7b60:	48d2b03a 	or	r9,r9,r3
    7b64:	20c00017 	ldw	r3,0(r4)
    7b68:	48c6f03a 	xor	r3,r9,r3
    7b6c:	1acd883a 	add	r6,r3,r11
    7b70:	00c6303a 	nor	r3,zero,r3
    7b74:	30c6703a 	and	r3,r6,r3
    7b78:	1a86703a 	and	r3,r3,r10
    7b7c:	183fe01e 	bne	r3,zero,7b00 <__alt_data_end+0xff007b00>
    7b80:	10bfff04 	addi	r2,r2,-4
    7b84:	21000104 	addi	r4,r4,4
    7b88:	40bff636 	bltu	r8,r2,7b64 <__alt_data_end+0xff007b64>
    7b8c:	003fdb06 	br	7afc <__alt_data_end+0xff007afc>
    7b90:	3005883a 	mov	r2,r6
    7b94:	003fd706 	br	7af4 <__alt_data_end+0xff007af4>

00007b98 <memcpy>:
    7b98:	defffd04 	addi	sp,sp,-12
    7b9c:	dfc00215 	stw	ra,8(sp)
    7ba0:	dc400115 	stw	r17,4(sp)
    7ba4:	dc000015 	stw	r16,0(sp)
    7ba8:	00c003c4 	movi	r3,15
    7bac:	2005883a 	mov	r2,r4
    7bb0:	1980452e 	bgeu	r3,r6,7cc8 <memcpy+0x130>
    7bb4:	2906b03a 	or	r3,r5,r4
    7bb8:	18c000cc 	andi	r3,r3,3
    7bbc:	1800441e 	bne	r3,zero,7cd0 <memcpy+0x138>
    7bc0:	347ffc04 	addi	r17,r6,-16
    7bc4:	8822d13a 	srli	r17,r17,4
    7bc8:	28c00104 	addi	r3,r5,4
    7bcc:	23400104 	addi	r13,r4,4
    7bd0:	8820913a 	slli	r16,r17,4
    7bd4:	2b000204 	addi	r12,r5,8
    7bd8:	22c00204 	addi	r11,r4,8
    7bdc:	84000504 	addi	r16,r16,20
    7be0:	2a800304 	addi	r10,r5,12
    7be4:	22400304 	addi	r9,r4,12
    7be8:	2c21883a 	add	r16,r5,r16
    7bec:	2811883a 	mov	r8,r5
    7bf0:	200f883a 	mov	r7,r4
    7bf4:	41000017 	ldw	r4,0(r8)
    7bf8:	1fc00017 	ldw	ra,0(r3)
    7bfc:	63c00017 	ldw	r15,0(r12)
    7c00:	39000015 	stw	r4,0(r7)
    7c04:	53800017 	ldw	r14,0(r10)
    7c08:	6fc00015 	stw	ra,0(r13)
    7c0c:	5bc00015 	stw	r15,0(r11)
    7c10:	4b800015 	stw	r14,0(r9)
    7c14:	18c00404 	addi	r3,r3,16
    7c18:	39c00404 	addi	r7,r7,16
    7c1c:	42000404 	addi	r8,r8,16
    7c20:	6b400404 	addi	r13,r13,16
    7c24:	63000404 	addi	r12,r12,16
    7c28:	5ac00404 	addi	r11,r11,16
    7c2c:	52800404 	addi	r10,r10,16
    7c30:	4a400404 	addi	r9,r9,16
    7c34:	1c3fef1e 	bne	r3,r16,7bf4 <__alt_data_end+0xff007bf4>
    7c38:	89c00044 	addi	r7,r17,1
    7c3c:	380e913a 	slli	r7,r7,4
    7c40:	310003cc 	andi	r4,r6,15
    7c44:	02c000c4 	movi	r11,3
    7c48:	11c7883a 	add	r3,r2,r7
    7c4c:	29cb883a 	add	r5,r5,r7
    7c50:	5900212e 	bgeu	r11,r4,7cd8 <memcpy+0x140>
    7c54:	1813883a 	mov	r9,r3
    7c58:	2811883a 	mov	r8,r5
    7c5c:	200f883a 	mov	r7,r4
    7c60:	42800017 	ldw	r10,0(r8)
    7c64:	4a400104 	addi	r9,r9,4
    7c68:	39ffff04 	addi	r7,r7,-4
    7c6c:	4abfff15 	stw	r10,-4(r9)
    7c70:	42000104 	addi	r8,r8,4
    7c74:	59fffa36 	bltu	r11,r7,7c60 <__alt_data_end+0xff007c60>
    7c78:	213fff04 	addi	r4,r4,-4
    7c7c:	2008d0ba 	srli	r4,r4,2
    7c80:	318000cc 	andi	r6,r6,3
    7c84:	21000044 	addi	r4,r4,1
    7c88:	2109883a 	add	r4,r4,r4
    7c8c:	2109883a 	add	r4,r4,r4
    7c90:	1907883a 	add	r3,r3,r4
    7c94:	290b883a 	add	r5,r5,r4
    7c98:	30000626 	beq	r6,zero,7cb4 <memcpy+0x11c>
    7c9c:	198d883a 	add	r6,r3,r6
    7ca0:	29c00003 	ldbu	r7,0(r5)
    7ca4:	18c00044 	addi	r3,r3,1
    7ca8:	29400044 	addi	r5,r5,1
    7cac:	19ffffc5 	stb	r7,-1(r3)
    7cb0:	19bffb1e 	bne	r3,r6,7ca0 <__alt_data_end+0xff007ca0>
    7cb4:	dfc00217 	ldw	ra,8(sp)
    7cb8:	dc400117 	ldw	r17,4(sp)
    7cbc:	dc000017 	ldw	r16,0(sp)
    7cc0:	dec00304 	addi	sp,sp,12
    7cc4:	f800283a 	ret
    7cc8:	2007883a 	mov	r3,r4
    7ccc:	003ff206 	br	7c98 <__alt_data_end+0xff007c98>
    7cd0:	2007883a 	mov	r3,r4
    7cd4:	003ff106 	br	7c9c <__alt_data_end+0xff007c9c>
    7cd8:	200d883a 	mov	r6,r4
    7cdc:	003fee06 	br	7c98 <__alt_data_end+0xff007c98>

00007ce0 <memmove>:
    7ce0:	2005883a 	mov	r2,r4
    7ce4:	29000b2e 	bgeu	r5,r4,7d14 <memmove+0x34>
    7ce8:	298f883a 	add	r7,r5,r6
    7cec:	21c0092e 	bgeu	r4,r7,7d14 <memmove+0x34>
    7cf0:	2187883a 	add	r3,r4,r6
    7cf4:	198bc83a 	sub	r5,r3,r6
    7cf8:	30004826 	beq	r6,zero,7e1c <memmove+0x13c>
    7cfc:	39ffffc4 	addi	r7,r7,-1
    7d00:	39000003 	ldbu	r4,0(r7)
    7d04:	18ffffc4 	addi	r3,r3,-1
    7d08:	19000005 	stb	r4,0(r3)
    7d0c:	28fffb1e 	bne	r5,r3,7cfc <__alt_data_end+0xff007cfc>
    7d10:	f800283a 	ret
    7d14:	00c003c4 	movi	r3,15
    7d18:	1980412e 	bgeu	r3,r6,7e20 <memmove+0x140>
    7d1c:	2886b03a 	or	r3,r5,r2
    7d20:	18c000cc 	andi	r3,r3,3
    7d24:	1800401e 	bne	r3,zero,7e28 <memmove+0x148>
    7d28:	33fffc04 	addi	r15,r6,-16
    7d2c:	781ed13a 	srli	r15,r15,4
    7d30:	28c00104 	addi	r3,r5,4
    7d34:	13400104 	addi	r13,r2,4
    7d38:	781c913a 	slli	r14,r15,4
    7d3c:	2b000204 	addi	r12,r5,8
    7d40:	12c00204 	addi	r11,r2,8
    7d44:	73800504 	addi	r14,r14,20
    7d48:	2a800304 	addi	r10,r5,12
    7d4c:	12400304 	addi	r9,r2,12
    7d50:	2b9d883a 	add	r14,r5,r14
    7d54:	2811883a 	mov	r8,r5
    7d58:	100f883a 	mov	r7,r2
    7d5c:	41000017 	ldw	r4,0(r8)
    7d60:	39c00404 	addi	r7,r7,16
    7d64:	18c00404 	addi	r3,r3,16
    7d68:	393ffc15 	stw	r4,-16(r7)
    7d6c:	193ffc17 	ldw	r4,-16(r3)
    7d70:	6b400404 	addi	r13,r13,16
    7d74:	5ac00404 	addi	r11,r11,16
    7d78:	693ffc15 	stw	r4,-16(r13)
    7d7c:	61000017 	ldw	r4,0(r12)
    7d80:	4a400404 	addi	r9,r9,16
    7d84:	42000404 	addi	r8,r8,16
    7d88:	593ffc15 	stw	r4,-16(r11)
    7d8c:	51000017 	ldw	r4,0(r10)
    7d90:	63000404 	addi	r12,r12,16
    7d94:	52800404 	addi	r10,r10,16
    7d98:	493ffc15 	stw	r4,-16(r9)
    7d9c:	1bbfef1e 	bne	r3,r14,7d5c <__alt_data_end+0xff007d5c>
    7da0:	79000044 	addi	r4,r15,1
    7da4:	2008913a 	slli	r4,r4,4
    7da8:	328003cc 	andi	r10,r6,15
    7dac:	02c000c4 	movi	r11,3
    7db0:	1107883a 	add	r3,r2,r4
    7db4:	290b883a 	add	r5,r5,r4
    7db8:	5a801e2e 	bgeu	r11,r10,7e34 <memmove+0x154>
    7dbc:	1813883a 	mov	r9,r3
    7dc0:	2811883a 	mov	r8,r5
    7dc4:	500f883a 	mov	r7,r10
    7dc8:	41000017 	ldw	r4,0(r8)
    7dcc:	4a400104 	addi	r9,r9,4
    7dd0:	39ffff04 	addi	r7,r7,-4
    7dd4:	493fff15 	stw	r4,-4(r9)
    7dd8:	42000104 	addi	r8,r8,4
    7ddc:	59fffa36 	bltu	r11,r7,7dc8 <__alt_data_end+0xff007dc8>
    7de0:	513fff04 	addi	r4,r10,-4
    7de4:	2008d0ba 	srli	r4,r4,2
    7de8:	318000cc 	andi	r6,r6,3
    7dec:	21000044 	addi	r4,r4,1
    7df0:	2109883a 	add	r4,r4,r4
    7df4:	2109883a 	add	r4,r4,r4
    7df8:	1907883a 	add	r3,r3,r4
    7dfc:	290b883a 	add	r5,r5,r4
    7e00:	30000b26 	beq	r6,zero,7e30 <memmove+0x150>
    7e04:	198d883a 	add	r6,r3,r6
    7e08:	29c00003 	ldbu	r7,0(r5)
    7e0c:	18c00044 	addi	r3,r3,1
    7e10:	29400044 	addi	r5,r5,1
    7e14:	19ffffc5 	stb	r7,-1(r3)
    7e18:	19bffb1e 	bne	r3,r6,7e08 <__alt_data_end+0xff007e08>
    7e1c:	f800283a 	ret
    7e20:	1007883a 	mov	r3,r2
    7e24:	003ff606 	br	7e00 <__alt_data_end+0xff007e00>
    7e28:	1007883a 	mov	r3,r2
    7e2c:	003ff506 	br	7e04 <__alt_data_end+0xff007e04>
    7e30:	f800283a 	ret
    7e34:	500d883a 	mov	r6,r10
    7e38:	003ff106 	br	7e00 <__alt_data_end+0xff007e00>

00007e3c <memset>:
    7e3c:	20c000cc 	andi	r3,r4,3
    7e40:	2005883a 	mov	r2,r4
    7e44:	18004426 	beq	r3,zero,7f58 <memset+0x11c>
    7e48:	31ffffc4 	addi	r7,r6,-1
    7e4c:	30004026 	beq	r6,zero,7f50 <memset+0x114>
    7e50:	2813883a 	mov	r9,r5
    7e54:	200d883a 	mov	r6,r4
    7e58:	2007883a 	mov	r3,r4
    7e5c:	00000406 	br	7e70 <memset+0x34>
    7e60:	3a3fffc4 	addi	r8,r7,-1
    7e64:	31800044 	addi	r6,r6,1
    7e68:	38003926 	beq	r7,zero,7f50 <memset+0x114>
    7e6c:	400f883a 	mov	r7,r8
    7e70:	18c00044 	addi	r3,r3,1
    7e74:	32400005 	stb	r9,0(r6)
    7e78:	1a0000cc 	andi	r8,r3,3
    7e7c:	403ff81e 	bne	r8,zero,7e60 <__alt_data_end+0xff007e60>
    7e80:	010000c4 	movi	r4,3
    7e84:	21c02d2e 	bgeu	r4,r7,7f3c <memset+0x100>
    7e88:	29003fcc 	andi	r4,r5,255
    7e8c:	200c923a 	slli	r6,r4,8
    7e90:	3108b03a 	or	r4,r6,r4
    7e94:	200c943a 	slli	r6,r4,16
    7e98:	218cb03a 	or	r6,r4,r6
    7e9c:	010003c4 	movi	r4,15
    7ea0:	21c0182e 	bgeu	r4,r7,7f04 <memset+0xc8>
    7ea4:	3b3ffc04 	addi	r12,r7,-16
    7ea8:	6018d13a 	srli	r12,r12,4
    7eac:	1a000104 	addi	r8,r3,4
    7eb0:	1ac00204 	addi	r11,r3,8
    7eb4:	6008913a 	slli	r4,r12,4
    7eb8:	1a800304 	addi	r10,r3,12
    7ebc:	1813883a 	mov	r9,r3
    7ec0:	21000504 	addi	r4,r4,20
    7ec4:	1909883a 	add	r4,r3,r4
    7ec8:	49800015 	stw	r6,0(r9)
    7ecc:	41800015 	stw	r6,0(r8)
    7ed0:	59800015 	stw	r6,0(r11)
    7ed4:	51800015 	stw	r6,0(r10)
    7ed8:	42000404 	addi	r8,r8,16
    7edc:	4a400404 	addi	r9,r9,16
    7ee0:	5ac00404 	addi	r11,r11,16
    7ee4:	52800404 	addi	r10,r10,16
    7ee8:	413ff71e 	bne	r8,r4,7ec8 <__alt_data_end+0xff007ec8>
    7eec:	63000044 	addi	r12,r12,1
    7ef0:	6018913a 	slli	r12,r12,4
    7ef4:	39c003cc 	andi	r7,r7,15
    7ef8:	010000c4 	movi	r4,3
    7efc:	1b07883a 	add	r3,r3,r12
    7f00:	21c00e2e 	bgeu	r4,r7,7f3c <memset+0x100>
    7f04:	1813883a 	mov	r9,r3
    7f08:	3811883a 	mov	r8,r7
    7f0c:	010000c4 	movi	r4,3
    7f10:	49800015 	stw	r6,0(r9)
    7f14:	423fff04 	addi	r8,r8,-4
    7f18:	4a400104 	addi	r9,r9,4
    7f1c:	223ffc36 	bltu	r4,r8,7f10 <__alt_data_end+0xff007f10>
    7f20:	393fff04 	addi	r4,r7,-4
    7f24:	2008d0ba 	srli	r4,r4,2
    7f28:	39c000cc 	andi	r7,r7,3
    7f2c:	21000044 	addi	r4,r4,1
    7f30:	2109883a 	add	r4,r4,r4
    7f34:	2109883a 	add	r4,r4,r4
    7f38:	1907883a 	add	r3,r3,r4
    7f3c:	38000526 	beq	r7,zero,7f54 <memset+0x118>
    7f40:	19cf883a 	add	r7,r3,r7
    7f44:	19400005 	stb	r5,0(r3)
    7f48:	18c00044 	addi	r3,r3,1
    7f4c:	38fffd1e 	bne	r7,r3,7f44 <__alt_data_end+0xff007f44>
    7f50:	f800283a 	ret
    7f54:	f800283a 	ret
    7f58:	2007883a 	mov	r3,r4
    7f5c:	300f883a 	mov	r7,r6
    7f60:	003fc706 	br	7e80 <__alt_data_end+0xff007e80>

00007f64 <_Balloc>:
    7f64:	20801317 	ldw	r2,76(r4)
    7f68:	defffc04 	addi	sp,sp,-16
    7f6c:	dc400115 	stw	r17,4(sp)
    7f70:	dc000015 	stw	r16,0(sp)
    7f74:	dfc00315 	stw	ra,12(sp)
    7f78:	dc800215 	stw	r18,8(sp)
    7f7c:	2023883a 	mov	r17,r4
    7f80:	2821883a 	mov	r16,r5
    7f84:	10000f26 	beq	r2,zero,7fc4 <_Balloc+0x60>
    7f88:	8407883a 	add	r3,r16,r16
    7f8c:	18c7883a 	add	r3,r3,r3
    7f90:	10c7883a 	add	r3,r2,r3
    7f94:	18800017 	ldw	r2,0(r3)
    7f98:	10001126 	beq	r2,zero,7fe0 <_Balloc+0x7c>
    7f9c:	11000017 	ldw	r4,0(r2)
    7fa0:	19000015 	stw	r4,0(r3)
    7fa4:	10000415 	stw	zero,16(r2)
    7fa8:	10000315 	stw	zero,12(r2)
    7fac:	dfc00317 	ldw	ra,12(sp)
    7fb0:	dc800217 	ldw	r18,8(sp)
    7fb4:	dc400117 	ldw	r17,4(sp)
    7fb8:	dc000017 	ldw	r16,0(sp)
    7fbc:	dec00404 	addi	sp,sp,16
    7fc0:	f800283a 	ret
    7fc4:	01800844 	movi	r6,33
    7fc8:	01400104 	movi	r5,4
    7fcc:	000ae4c0 	call	ae4c <_calloc_r>
    7fd0:	88801315 	stw	r2,76(r17)
    7fd4:	103fec1e 	bne	r2,zero,7f88 <__alt_data_end+0xff007f88>
    7fd8:	0005883a 	mov	r2,zero
    7fdc:	003ff306 	br	7fac <__alt_data_end+0xff007fac>
    7fe0:	01400044 	movi	r5,1
    7fe4:	2c24983a 	sll	r18,r5,r16
    7fe8:	8809883a 	mov	r4,r17
    7fec:	91800144 	addi	r6,r18,5
    7ff0:	318d883a 	add	r6,r6,r6
    7ff4:	318d883a 	add	r6,r6,r6
    7ff8:	000ae4c0 	call	ae4c <_calloc_r>
    7ffc:	103ff626 	beq	r2,zero,7fd8 <__alt_data_end+0xff007fd8>
    8000:	14000115 	stw	r16,4(r2)
    8004:	14800215 	stw	r18,8(r2)
    8008:	003fe606 	br	7fa4 <__alt_data_end+0xff007fa4>

0000800c <_Bfree>:
    800c:	28000826 	beq	r5,zero,8030 <_Bfree+0x24>
    8010:	28c00117 	ldw	r3,4(r5)
    8014:	20801317 	ldw	r2,76(r4)
    8018:	18c7883a 	add	r3,r3,r3
    801c:	18c7883a 	add	r3,r3,r3
    8020:	10c5883a 	add	r2,r2,r3
    8024:	10c00017 	ldw	r3,0(r2)
    8028:	28c00015 	stw	r3,0(r5)
    802c:	11400015 	stw	r5,0(r2)
    8030:	f800283a 	ret

00008034 <__multadd>:
    8034:	defffa04 	addi	sp,sp,-24
    8038:	dc800315 	stw	r18,12(sp)
    803c:	dc400215 	stw	r17,8(sp)
    8040:	dc000115 	stw	r16,4(sp)
    8044:	2823883a 	mov	r17,r5
    8048:	2c000417 	ldw	r16,16(r5)
    804c:	dfc00515 	stw	ra,20(sp)
    8050:	dcc00415 	stw	r19,16(sp)
    8054:	2025883a 	mov	r18,r4
    8058:	29400504 	addi	r5,r5,20
    805c:	0011883a 	mov	r8,zero
    8060:	28c00017 	ldw	r3,0(r5)
    8064:	29400104 	addi	r5,r5,4
    8068:	42000044 	addi	r8,r8,1
    806c:	18bfffcc 	andi	r2,r3,65535
    8070:	1185383a 	mul	r2,r2,r6
    8074:	1806d43a 	srli	r3,r3,16
    8078:	11cf883a 	add	r7,r2,r7
    807c:	3808d43a 	srli	r4,r7,16
    8080:	1987383a 	mul	r3,r3,r6
    8084:	38bfffcc 	andi	r2,r7,65535
    8088:	1907883a 	add	r3,r3,r4
    808c:	1808943a 	slli	r4,r3,16
    8090:	180ed43a 	srli	r7,r3,16
    8094:	2085883a 	add	r2,r4,r2
    8098:	28bfff15 	stw	r2,-4(r5)
    809c:	443ff016 	blt	r8,r16,8060 <__alt_data_end+0xff008060>
    80a0:	38000926 	beq	r7,zero,80c8 <__multadd+0x94>
    80a4:	88800217 	ldw	r2,8(r17)
    80a8:	80800f0e 	bge	r16,r2,80e8 <__multadd+0xb4>
    80ac:	80800144 	addi	r2,r16,5
    80b0:	1085883a 	add	r2,r2,r2
    80b4:	1085883a 	add	r2,r2,r2
    80b8:	8885883a 	add	r2,r17,r2
    80bc:	11c00015 	stw	r7,0(r2)
    80c0:	84000044 	addi	r16,r16,1
    80c4:	8c000415 	stw	r16,16(r17)
    80c8:	8805883a 	mov	r2,r17
    80cc:	dfc00517 	ldw	ra,20(sp)
    80d0:	dcc00417 	ldw	r19,16(sp)
    80d4:	dc800317 	ldw	r18,12(sp)
    80d8:	dc400217 	ldw	r17,8(sp)
    80dc:	dc000117 	ldw	r16,4(sp)
    80e0:	dec00604 	addi	sp,sp,24
    80e4:	f800283a 	ret
    80e8:	89400117 	ldw	r5,4(r17)
    80ec:	9009883a 	mov	r4,r18
    80f0:	d9c00015 	stw	r7,0(sp)
    80f4:	29400044 	addi	r5,r5,1
    80f8:	0007f640 	call	7f64 <_Balloc>
    80fc:	89800417 	ldw	r6,16(r17)
    8100:	89400304 	addi	r5,r17,12
    8104:	11000304 	addi	r4,r2,12
    8108:	31800084 	addi	r6,r6,2
    810c:	318d883a 	add	r6,r6,r6
    8110:	318d883a 	add	r6,r6,r6
    8114:	1027883a 	mov	r19,r2
    8118:	0007b980 	call	7b98 <memcpy>
    811c:	d9c00017 	ldw	r7,0(sp)
    8120:	88000a26 	beq	r17,zero,814c <__multadd+0x118>
    8124:	88c00117 	ldw	r3,4(r17)
    8128:	90801317 	ldw	r2,76(r18)
    812c:	18c7883a 	add	r3,r3,r3
    8130:	18c7883a 	add	r3,r3,r3
    8134:	10c5883a 	add	r2,r2,r3
    8138:	10c00017 	ldw	r3,0(r2)
    813c:	88c00015 	stw	r3,0(r17)
    8140:	14400015 	stw	r17,0(r2)
    8144:	9823883a 	mov	r17,r19
    8148:	003fd806 	br	80ac <__alt_data_end+0xff0080ac>
    814c:	9823883a 	mov	r17,r19
    8150:	003fd606 	br	80ac <__alt_data_end+0xff0080ac>

00008154 <__s2b>:
    8154:	defff904 	addi	sp,sp,-28
    8158:	dc400115 	stw	r17,4(sp)
    815c:	dc000015 	stw	r16,0(sp)
    8160:	2023883a 	mov	r17,r4
    8164:	2821883a 	mov	r16,r5
    8168:	39000204 	addi	r4,r7,8
    816c:	01400244 	movi	r5,9
    8170:	dcc00315 	stw	r19,12(sp)
    8174:	dc800215 	stw	r18,8(sp)
    8178:	dfc00615 	stw	ra,24(sp)
    817c:	dd400515 	stw	r21,20(sp)
    8180:	dd000415 	stw	r20,16(sp)
    8184:	3825883a 	mov	r18,r7
    8188:	3027883a 	mov	r19,r6
    818c:	00014a80 	call	14a8 <__divsi3>
    8190:	00c00044 	movi	r3,1
    8194:	000b883a 	mov	r5,zero
    8198:	1880030e 	bge	r3,r2,81a8 <__s2b+0x54>
    819c:	18c7883a 	add	r3,r3,r3
    81a0:	29400044 	addi	r5,r5,1
    81a4:	18bffd16 	blt	r3,r2,819c <__alt_data_end+0xff00819c>
    81a8:	8809883a 	mov	r4,r17
    81ac:	0007f640 	call	7f64 <_Balloc>
    81b0:	d8c00717 	ldw	r3,28(sp)
    81b4:	10c00515 	stw	r3,20(r2)
    81b8:	00c00044 	movi	r3,1
    81bc:	10c00415 	stw	r3,16(r2)
    81c0:	00c00244 	movi	r3,9
    81c4:	1cc0210e 	bge	r3,r19,824c <__s2b+0xf8>
    81c8:	80eb883a 	add	r21,r16,r3
    81cc:	a829883a 	mov	r20,r21
    81d0:	84e1883a 	add	r16,r16,r19
    81d4:	a1c00007 	ldb	r7,0(r20)
    81d8:	01800284 	movi	r6,10
    81dc:	a5000044 	addi	r20,r20,1
    81e0:	100b883a 	mov	r5,r2
    81e4:	39fff404 	addi	r7,r7,-48
    81e8:	8809883a 	mov	r4,r17
    81ec:	00080340 	call	8034 <__multadd>
    81f0:	a43ff81e 	bne	r20,r16,81d4 <__alt_data_end+0xff0081d4>
    81f4:	ace1883a 	add	r16,r21,r19
    81f8:	843ffe04 	addi	r16,r16,-8
    81fc:	9c800a0e 	bge	r19,r18,8228 <__s2b+0xd4>
    8200:	94e5c83a 	sub	r18,r18,r19
    8204:	84a5883a 	add	r18,r16,r18
    8208:	81c00007 	ldb	r7,0(r16)
    820c:	01800284 	movi	r6,10
    8210:	84000044 	addi	r16,r16,1
    8214:	100b883a 	mov	r5,r2
    8218:	39fff404 	addi	r7,r7,-48
    821c:	8809883a 	mov	r4,r17
    8220:	00080340 	call	8034 <__multadd>
    8224:	84bff81e 	bne	r16,r18,8208 <__alt_data_end+0xff008208>
    8228:	dfc00617 	ldw	ra,24(sp)
    822c:	dd400517 	ldw	r21,20(sp)
    8230:	dd000417 	ldw	r20,16(sp)
    8234:	dcc00317 	ldw	r19,12(sp)
    8238:	dc800217 	ldw	r18,8(sp)
    823c:	dc400117 	ldw	r17,4(sp)
    8240:	dc000017 	ldw	r16,0(sp)
    8244:	dec00704 	addi	sp,sp,28
    8248:	f800283a 	ret
    824c:	84000284 	addi	r16,r16,10
    8250:	1827883a 	mov	r19,r3
    8254:	003fe906 	br	81fc <__alt_data_end+0xff0081fc>

00008258 <__hi0bits>:
    8258:	20bfffec 	andhi	r2,r4,65535
    825c:	1000141e 	bne	r2,zero,82b0 <__hi0bits+0x58>
    8260:	2008943a 	slli	r4,r4,16
    8264:	00800404 	movi	r2,16
    8268:	20ffc02c 	andhi	r3,r4,65280
    826c:	1800021e 	bne	r3,zero,8278 <__hi0bits+0x20>
    8270:	2008923a 	slli	r4,r4,8
    8274:	10800204 	addi	r2,r2,8
    8278:	20fc002c 	andhi	r3,r4,61440
    827c:	1800021e 	bne	r3,zero,8288 <__hi0bits+0x30>
    8280:	2008913a 	slli	r4,r4,4
    8284:	10800104 	addi	r2,r2,4
    8288:	20f0002c 	andhi	r3,r4,49152
    828c:	1800031e 	bne	r3,zero,829c <__hi0bits+0x44>
    8290:	2109883a 	add	r4,r4,r4
    8294:	10800084 	addi	r2,r2,2
    8298:	2109883a 	add	r4,r4,r4
    829c:	20000316 	blt	r4,zero,82ac <__hi0bits+0x54>
    82a0:	2110002c 	andhi	r4,r4,16384
    82a4:	2000041e 	bne	r4,zero,82b8 <__hi0bits+0x60>
    82a8:	00800804 	movi	r2,32
    82ac:	f800283a 	ret
    82b0:	0005883a 	mov	r2,zero
    82b4:	003fec06 	br	8268 <__alt_data_end+0xff008268>
    82b8:	10800044 	addi	r2,r2,1
    82bc:	f800283a 	ret

000082c0 <__lo0bits>:
    82c0:	20c00017 	ldw	r3,0(r4)
    82c4:	188001cc 	andi	r2,r3,7
    82c8:	10000826 	beq	r2,zero,82ec <__lo0bits+0x2c>
    82cc:	1880004c 	andi	r2,r3,1
    82d0:	1000211e 	bne	r2,zero,8358 <__lo0bits+0x98>
    82d4:	1880008c 	andi	r2,r3,2
    82d8:	1000211e 	bne	r2,zero,8360 <__lo0bits+0xa0>
    82dc:	1806d0ba 	srli	r3,r3,2
    82e0:	00800084 	movi	r2,2
    82e4:	20c00015 	stw	r3,0(r4)
    82e8:	f800283a 	ret
    82ec:	18bfffcc 	andi	r2,r3,65535
    82f0:	10001326 	beq	r2,zero,8340 <__lo0bits+0x80>
    82f4:	0005883a 	mov	r2,zero
    82f8:	19403fcc 	andi	r5,r3,255
    82fc:	2800021e 	bne	r5,zero,8308 <__lo0bits+0x48>
    8300:	1806d23a 	srli	r3,r3,8
    8304:	10800204 	addi	r2,r2,8
    8308:	194003cc 	andi	r5,r3,15
    830c:	2800021e 	bne	r5,zero,8318 <__lo0bits+0x58>
    8310:	1806d13a 	srli	r3,r3,4
    8314:	10800104 	addi	r2,r2,4
    8318:	194000cc 	andi	r5,r3,3
    831c:	2800021e 	bne	r5,zero,8328 <__lo0bits+0x68>
    8320:	1806d0ba 	srli	r3,r3,2
    8324:	10800084 	addi	r2,r2,2
    8328:	1940004c 	andi	r5,r3,1
    832c:	2800081e 	bne	r5,zero,8350 <__lo0bits+0x90>
    8330:	1806d07a 	srli	r3,r3,1
    8334:	1800051e 	bne	r3,zero,834c <__lo0bits+0x8c>
    8338:	00800804 	movi	r2,32
    833c:	f800283a 	ret
    8340:	1806d43a 	srli	r3,r3,16
    8344:	00800404 	movi	r2,16
    8348:	003feb06 	br	82f8 <__alt_data_end+0xff0082f8>
    834c:	10800044 	addi	r2,r2,1
    8350:	20c00015 	stw	r3,0(r4)
    8354:	f800283a 	ret
    8358:	0005883a 	mov	r2,zero
    835c:	f800283a 	ret
    8360:	1806d07a 	srli	r3,r3,1
    8364:	00800044 	movi	r2,1
    8368:	20c00015 	stw	r3,0(r4)
    836c:	f800283a 	ret

00008370 <__i2b>:
    8370:	defffd04 	addi	sp,sp,-12
    8374:	dc000015 	stw	r16,0(sp)
    8378:	04000044 	movi	r16,1
    837c:	dc400115 	stw	r17,4(sp)
    8380:	2823883a 	mov	r17,r5
    8384:	800b883a 	mov	r5,r16
    8388:	dfc00215 	stw	ra,8(sp)
    838c:	0007f640 	call	7f64 <_Balloc>
    8390:	14400515 	stw	r17,20(r2)
    8394:	14000415 	stw	r16,16(r2)
    8398:	dfc00217 	ldw	ra,8(sp)
    839c:	dc400117 	ldw	r17,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00304 	addi	sp,sp,12
    83a8:	f800283a 	ret

000083ac <__multiply>:
    83ac:	defffa04 	addi	sp,sp,-24
    83b0:	dcc00315 	stw	r19,12(sp)
    83b4:	dc800215 	stw	r18,8(sp)
    83b8:	34c00417 	ldw	r19,16(r6)
    83bc:	2c800417 	ldw	r18,16(r5)
    83c0:	dd000415 	stw	r20,16(sp)
    83c4:	dc400115 	stw	r17,4(sp)
    83c8:	dfc00515 	stw	ra,20(sp)
    83cc:	dc000015 	stw	r16,0(sp)
    83d0:	2829883a 	mov	r20,r5
    83d4:	3023883a 	mov	r17,r6
    83d8:	94c0050e 	bge	r18,r19,83f0 <__multiply+0x44>
    83dc:	9007883a 	mov	r3,r18
    83e0:	3029883a 	mov	r20,r6
    83e4:	9825883a 	mov	r18,r19
    83e8:	2823883a 	mov	r17,r5
    83ec:	1827883a 	mov	r19,r3
    83f0:	a0800217 	ldw	r2,8(r20)
    83f4:	94e1883a 	add	r16,r18,r19
    83f8:	a1400117 	ldw	r5,4(r20)
    83fc:	1400010e 	bge	r2,r16,8404 <__multiply+0x58>
    8400:	29400044 	addi	r5,r5,1
    8404:	0007f640 	call	7f64 <_Balloc>
    8408:	8415883a 	add	r10,r16,r16
    840c:	12c00504 	addi	r11,r2,20
    8410:	5295883a 	add	r10,r10,r10
    8414:	5a95883a 	add	r10,r11,r10
    8418:	5807883a 	mov	r3,r11
    841c:	5a80032e 	bgeu	r11,r10,842c <__multiply+0x80>
    8420:	18000015 	stw	zero,0(r3)
    8424:	18c00104 	addi	r3,r3,4
    8428:	1abffd36 	bltu	r3,r10,8420 <__alt_data_end+0xff008420>
    842c:	9ce7883a 	add	r19,r19,r19
    8430:	94a5883a 	add	r18,r18,r18
    8434:	89800504 	addi	r6,r17,20
    8438:	9ce7883a 	add	r19,r19,r19
    843c:	a3400504 	addi	r13,r20,20
    8440:	94a5883a 	add	r18,r18,r18
    8444:	34d9883a 	add	r12,r6,r19
    8448:	6c93883a 	add	r9,r13,r18
    844c:	3300422e 	bgeu	r6,r12,8558 <__multiply+0x1ac>
    8450:	37c00017 	ldw	ra,0(r6)
    8454:	fbffffcc 	andi	r15,ra,65535
    8458:	78001b26 	beq	r15,zero,84c8 <__multiply+0x11c>
    845c:	5811883a 	mov	r8,r11
    8460:	681d883a 	mov	r14,r13
    8464:	000f883a 	mov	r7,zero
    8468:	71000017 	ldw	r4,0(r14)
    846c:	40c00017 	ldw	r3,0(r8)
    8470:	73800104 	addi	r14,r14,4
    8474:	217fffcc 	andi	r5,r4,65535
    8478:	2bcb383a 	mul	r5,r5,r15
    847c:	2008d43a 	srli	r4,r4,16
    8480:	1c7fffcc 	andi	r17,r3,65535
    8484:	2c4b883a 	add	r5,r5,r17
    8488:	29cb883a 	add	r5,r5,r7
    848c:	23c9383a 	mul	r4,r4,r15
    8490:	1806d43a 	srli	r3,r3,16
    8494:	280ed43a 	srli	r7,r5,16
    8498:	297fffcc 	andi	r5,r5,65535
    849c:	20c7883a 	add	r3,r4,r3
    84a0:	19c7883a 	add	r3,r3,r7
    84a4:	1808943a 	slli	r4,r3,16
    84a8:	4023883a 	mov	r17,r8
    84ac:	180ed43a 	srli	r7,r3,16
    84b0:	214ab03a 	or	r5,r4,r5
    84b4:	41400015 	stw	r5,0(r8)
    84b8:	42000104 	addi	r8,r8,4
    84bc:	727fea36 	bltu	r14,r9,8468 <__alt_data_end+0xff008468>
    84c0:	89c00115 	stw	r7,4(r17)
    84c4:	37c00017 	ldw	ra,0(r6)
    84c8:	f83ed43a 	srli	ra,ra,16
    84cc:	f8001f26 	beq	ra,zero,854c <__multiply+0x1a0>
    84d0:	58c00017 	ldw	r3,0(r11)
    84d4:	681d883a 	mov	r14,r13
    84d8:	581f883a 	mov	r15,r11
    84dc:	1811883a 	mov	r8,r3
    84e0:	5825883a 	mov	r18,r11
    84e4:	000f883a 	mov	r7,zero
    84e8:	00000106 	br	84f0 <__multiply+0x144>
    84ec:	8825883a 	mov	r18,r17
    84f0:	7140000b 	ldhu	r5,0(r14)
    84f4:	4010d43a 	srli	r8,r8,16
    84f8:	193fffcc 	andi	r4,r3,65535
    84fc:	2fcb383a 	mul	r5,r5,ra
    8500:	7bc00104 	addi	r15,r15,4
    8504:	73800104 	addi	r14,r14,4
    8508:	2a0b883a 	add	r5,r5,r8
    850c:	29cb883a 	add	r5,r5,r7
    8510:	2806943a 	slli	r3,r5,16
    8514:	94400104 	addi	r17,r18,4
    8518:	280ad43a 	srli	r5,r5,16
    851c:	1908b03a 	or	r4,r3,r4
    8520:	793fff15 	stw	r4,-4(r15)
    8524:	70ffff17 	ldw	r3,-4(r14)
    8528:	8a000017 	ldw	r8,0(r17)
    852c:	1806d43a 	srli	r3,r3,16
    8530:	413fffcc 	andi	r4,r8,65535
    8534:	1fc7383a 	mul	r3,r3,ra
    8538:	1907883a 	add	r3,r3,r4
    853c:	1947883a 	add	r3,r3,r5
    8540:	180ed43a 	srli	r7,r3,16
    8544:	727fe936 	bltu	r14,r9,84ec <__alt_data_end+0xff0084ec>
    8548:	90c00115 	stw	r3,4(r18)
    854c:	31800104 	addi	r6,r6,4
    8550:	5ac00104 	addi	r11,r11,4
    8554:	333fbe36 	bltu	r6,r12,8450 <__alt_data_end+0xff008450>
    8558:	0400090e 	bge	zero,r16,8580 <__multiply+0x1d4>
    855c:	50ffff17 	ldw	r3,-4(r10)
    8560:	52bfff04 	addi	r10,r10,-4
    8564:	18000326 	beq	r3,zero,8574 <__multiply+0x1c8>
    8568:	00000506 	br	8580 <__multiply+0x1d4>
    856c:	50c00017 	ldw	r3,0(r10)
    8570:	1800031e 	bne	r3,zero,8580 <__multiply+0x1d4>
    8574:	843fffc4 	addi	r16,r16,-1
    8578:	52bfff04 	addi	r10,r10,-4
    857c:	803ffb1e 	bne	r16,zero,856c <__alt_data_end+0xff00856c>
    8580:	14000415 	stw	r16,16(r2)
    8584:	dfc00517 	ldw	ra,20(sp)
    8588:	dd000417 	ldw	r20,16(sp)
    858c:	dcc00317 	ldw	r19,12(sp)
    8590:	dc800217 	ldw	r18,8(sp)
    8594:	dc400117 	ldw	r17,4(sp)
    8598:	dc000017 	ldw	r16,0(sp)
    859c:	dec00604 	addi	sp,sp,24
    85a0:	f800283a 	ret

000085a4 <__pow5mult>:
    85a4:	defffa04 	addi	sp,sp,-24
    85a8:	dcc00315 	stw	r19,12(sp)
    85ac:	dc000015 	stw	r16,0(sp)
    85b0:	dfc00515 	stw	ra,20(sp)
    85b4:	dd000415 	stw	r20,16(sp)
    85b8:	dc800215 	stw	r18,8(sp)
    85bc:	dc400115 	stw	r17,4(sp)
    85c0:	308000cc 	andi	r2,r6,3
    85c4:	3021883a 	mov	r16,r6
    85c8:	2027883a 	mov	r19,r4
    85cc:	10002f1e 	bne	r2,zero,868c <__pow5mult+0xe8>
    85d0:	2825883a 	mov	r18,r5
    85d4:	8021d0ba 	srai	r16,r16,2
    85d8:	80001a26 	beq	r16,zero,8644 <__pow5mult+0xa0>
    85dc:	9c401217 	ldw	r17,72(r19)
    85e0:	8800061e 	bne	r17,zero,85fc <__pow5mult+0x58>
    85e4:	00003406 	br	86b8 <__pow5mult+0x114>
    85e8:	8021d07a 	srai	r16,r16,1
    85ec:	80001526 	beq	r16,zero,8644 <__pow5mult+0xa0>
    85f0:	88800017 	ldw	r2,0(r17)
    85f4:	10001c26 	beq	r2,zero,8668 <__pow5mult+0xc4>
    85f8:	1023883a 	mov	r17,r2
    85fc:	8080004c 	andi	r2,r16,1
    8600:	103ff926 	beq	r2,zero,85e8 <__alt_data_end+0xff0085e8>
    8604:	880d883a 	mov	r6,r17
    8608:	900b883a 	mov	r5,r18
    860c:	9809883a 	mov	r4,r19
    8610:	00083ac0 	call	83ac <__multiply>
    8614:	90001b26 	beq	r18,zero,8684 <__pow5mult+0xe0>
    8618:	91000117 	ldw	r4,4(r18)
    861c:	98c01317 	ldw	r3,76(r19)
    8620:	8021d07a 	srai	r16,r16,1
    8624:	2109883a 	add	r4,r4,r4
    8628:	2109883a 	add	r4,r4,r4
    862c:	1907883a 	add	r3,r3,r4
    8630:	19000017 	ldw	r4,0(r3)
    8634:	91000015 	stw	r4,0(r18)
    8638:	1c800015 	stw	r18,0(r3)
    863c:	1025883a 	mov	r18,r2
    8640:	803feb1e 	bne	r16,zero,85f0 <__alt_data_end+0xff0085f0>
    8644:	9005883a 	mov	r2,r18
    8648:	dfc00517 	ldw	ra,20(sp)
    864c:	dd000417 	ldw	r20,16(sp)
    8650:	dcc00317 	ldw	r19,12(sp)
    8654:	dc800217 	ldw	r18,8(sp)
    8658:	dc400117 	ldw	r17,4(sp)
    865c:	dc000017 	ldw	r16,0(sp)
    8660:	dec00604 	addi	sp,sp,24
    8664:	f800283a 	ret
    8668:	880d883a 	mov	r6,r17
    866c:	880b883a 	mov	r5,r17
    8670:	9809883a 	mov	r4,r19
    8674:	00083ac0 	call	83ac <__multiply>
    8678:	88800015 	stw	r2,0(r17)
    867c:	10000015 	stw	zero,0(r2)
    8680:	003fdd06 	br	85f8 <__alt_data_end+0xff0085f8>
    8684:	1025883a 	mov	r18,r2
    8688:	003fd706 	br	85e8 <__alt_data_end+0xff0085e8>
    868c:	10bfffc4 	addi	r2,r2,-1
    8690:	1085883a 	add	r2,r2,r2
    8694:	00c00074 	movhi	r3,1
    8698:	18c44c04 	addi	r3,r3,4400
    869c:	1085883a 	add	r2,r2,r2
    86a0:	1885883a 	add	r2,r3,r2
    86a4:	11800017 	ldw	r6,0(r2)
    86a8:	000f883a 	mov	r7,zero
    86ac:	00080340 	call	8034 <__multadd>
    86b0:	1025883a 	mov	r18,r2
    86b4:	003fc706 	br	85d4 <__alt_data_end+0xff0085d4>
    86b8:	05000044 	movi	r20,1
    86bc:	a00b883a 	mov	r5,r20
    86c0:	9809883a 	mov	r4,r19
    86c4:	0007f640 	call	7f64 <_Balloc>
    86c8:	1023883a 	mov	r17,r2
    86cc:	00809c44 	movi	r2,625
    86d0:	88800515 	stw	r2,20(r17)
    86d4:	8d000415 	stw	r20,16(r17)
    86d8:	9c401215 	stw	r17,72(r19)
    86dc:	88000015 	stw	zero,0(r17)
    86e0:	003fc606 	br	85fc <__alt_data_end+0xff0085fc>

000086e4 <__lshift>:
    86e4:	defff904 	addi	sp,sp,-28
    86e8:	dd400515 	stw	r21,20(sp)
    86ec:	dcc00315 	stw	r19,12(sp)
    86f0:	302bd17a 	srai	r21,r6,5
    86f4:	2cc00417 	ldw	r19,16(r5)
    86f8:	28800217 	ldw	r2,8(r5)
    86fc:	dd000415 	stw	r20,16(sp)
    8700:	ace7883a 	add	r19,r21,r19
    8704:	dc800215 	stw	r18,8(sp)
    8708:	dc400115 	stw	r17,4(sp)
    870c:	dc000015 	stw	r16,0(sp)
    8710:	dfc00615 	stw	ra,24(sp)
    8714:	9c000044 	addi	r16,r19,1
    8718:	2823883a 	mov	r17,r5
    871c:	3029883a 	mov	r20,r6
    8720:	2025883a 	mov	r18,r4
    8724:	29400117 	ldw	r5,4(r5)
    8728:	1400030e 	bge	r2,r16,8738 <__lshift+0x54>
    872c:	1085883a 	add	r2,r2,r2
    8730:	29400044 	addi	r5,r5,1
    8734:	143ffd16 	blt	r2,r16,872c <__alt_data_end+0xff00872c>
    8738:	9009883a 	mov	r4,r18
    873c:	0007f640 	call	7f64 <_Balloc>
    8740:	10c00504 	addi	r3,r2,20
    8744:	0540070e 	bge	zero,r21,8764 <__lshift+0x80>
    8748:	ad6b883a 	add	r21,r21,r21
    874c:	ad6b883a 	add	r21,r21,r21
    8750:	1809883a 	mov	r4,r3
    8754:	1d47883a 	add	r3,r3,r21
    8758:	20000015 	stw	zero,0(r4)
    875c:	21000104 	addi	r4,r4,4
    8760:	193ffd1e 	bne	r3,r4,8758 <__alt_data_end+0xff008758>
    8764:	8a000417 	ldw	r8,16(r17)
    8768:	89000504 	addi	r4,r17,20
    876c:	a18007cc 	andi	r6,r20,31
    8770:	4211883a 	add	r8,r8,r8
    8774:	4211883a 	add	r8,r8,r8
    8778:	2211883a 	add	r8,r4,r8
    877c:	30002326 	beq	r6,zero,880c <__lshift+0x128>
    8780:	02400804 	movi	r9,32
    8784:	4993c83a 	sub	r9,r9,r6
    8788:	000b883a 	mov	r5,zero
    878c:	21c00017 	ldw	r7,0(r4)
    8790:	1815883a 	mov	r10,r3
    8794:	18c00104 	addi	r3,r3,4
    8798:	398e983a 	sll	r7,r7,r6
    879c:	21000104 	addi	r4,r4,4
    87a0:	394ab03a 	or	r5,r7,r5
    87a4:	197fff15 	stw	r5,-4(r3)
    87a8:	217fff17 	ldw	r5,-4(r4)
    87ac:	2a4ad83a 	srl	r5,r5,r9
    87b0:	223ff636 	bltu	r4,r8,878c <__alt_data_end+0xff00878c>
    87b4:	51400115 	stw	r5,4(r10)
    87b8:	28001a1e 	bne	r5,zero,8824 <__lshift+0x140>
    87bc:	843fffc4 	addi	r16,r16,-1
    87c0:	14000415 	stw	r16,16(r2)
    87c4:	88000826 	beq	r17,zero,87e8 <__lshift+0x104>
    87c8:	89000117 	ldw	r4,4(r17)
    87cc:	90c01317 	ldw	r3,76(r18)
    87d0:	2109883a 	add	r4,r4,r4
    87d4:	2109883a 	add	r4,r4,r4
    87d8:	1907883a 	add	r3,r3,r4
    87dc:	19000017 	ldw	r4,0(r3)
    87e0:	89000015 	stw	r4,0(r17)
    87e4:	1c400015 	stw	r17,0(r3)
    87e8:	dfc00617 	ldw	ra,24(sp)
    87ec:	dd400517 	ldw	r21,20(sp)
    87f0:	dd000417 	ldw	r20,16(sp)
    87f4:	dcc00317 	ldw	r19,12(sp)
    87f8:	dc800217 	ldw	r18,8(sp)
    87fc:	dc400117 	ldw	r17,4(sp)
    8800:	dc000017 	ldw	r16,0(sp)
    8804:	dec00704 	addi	sp,sp,28
    8808:	f800283a 	ret
    880c:	21400017 	ldw	r5,0(r4)
    8810:	18c00104 	addi	r3,r3,4
    8814:	21000104 	addi	r4,r4,4
    8818:	197fff15 	stw	r5,-4(r3)
    881c:	223ffb36 	bltu	r4,r8,880c <__alt_data_end+0xff00880c>
    8820:	003fe606 	br	87bc <__alt_data_end+0xff0087bc>
    8824:	9c000084 	addi	r16,r19,2
    8828:	003fe406 	br	87bc <__alt_data_end+0xff0087bc>

0000882c <__mcmp>:
    882c:	20800417 	ldw	r2,16(r4)
    8830:	28c00417 	ldw	r3,16(r5)
    8834:	10c5c83a 	sub	r2,r2,r3
    8838:	1000111e 	bne	r2,zero,8880 <__mcmp+0x54>
    883c:	18c7883a 	add	r3,r3,r3
    8840:	18c7883a 	add	r3,r3,r3
    8844:	21000504 	addi	r4,r4,20
    8848:	29400504 	addi	r5,r5,20
    884c:	20c5883a 	add	r2,r4,r3
    8850:	28cb883a 	add	r5,r5,r3
    8854:	00000106 	br	885c <__mcmp+0x30>
    8858:	20800a2e 	bgeu	r4,r2,8884 <__mcmp+0x58>
    885c:	10bfff04 	addi	r2,r2,-4
    8860:	297fff04 	addi	r5,r5,-4
    8864:	11800017 	ldw	r6,0(r2)
    8868:	28c00017 	ldw	r3,0(r5)
    886c:	30fffa26 	beq	r6,r3,8858 <__alt_data_end+0xff008858>
    8870:	30c00236 	bltu	r6,r3,887c <__mcmp+0x50>
    8874:	00800044 	movi	r2,1
    8878:	f800283a 	ret
    887c:	00bfffc4 	movi	r2,-1
    8880:	f800283a 	ret
    8884:	0005883a 	mov	r2,zero
    8888:	f800283a 	ret

0000888c <__mdiff>:
    888c:	28c00417 	ldw	r3,16(r5)
    8890:	30800417 	ldw	r2,16(r6)
    8894:	defffa04 	addi	sp,sp,-24
    8898:	dcc00315 	stw	r19,12(sp)
    889c:	dc800215 	stw	r18,8(sp)
    88a0:	dfc00515 	stw	ra,20(sp)
    88a4:	dd000415 	stw	r20,16(sp)
    88a8:	dc400115 	stw	r17,4(sp)
    88ac:	dc000015 	stw	r16,0(sp)
    88b0:	1887c83a 	sub	r3,r3,r2
    88b4:	2825883a 	mov	r18,r5
    88b8:	3027883a 	mov	r19,r6
    88bc:	1800141e 	bne	r3,zero,8910 <__mdiff+0x84>
    88c0:	1085883a 	add	r2,r2,r2
    88c4:	1085883a 	add	r2,r2,r2
    88c8:	2a000504 	addi	r8,r5,20
    88cc:	34000504 	addi	r16,r6,20
    88d0:	4087883a 	add	r3,r8,r2
    88d4:	8085883a 	add	r2,r16,r2
    88d8:	00000106 	br	88e0 <__mdiff+0x54>
    88dc:	40c0592e 	bgeu	r8,r3,8a44 <__mdiff+0x1b8>
    88e0:	18ffff04 	addi	r3,r3,-4
    88e4:	10bfff04 	addi	r2,r2,-4
    88e8:	19c00017 	ldw	r7,0(r3)
    88ec:	11400017 	ldw	r5,0(r2)
    88f0:	397ffa26 	beq	r7,r5,88dc <__alt_data_end+0xff0088dc>
    88f4:	3940592e 	bgeu	r7,r5,8a5c <__mdiff+0x1d0>
    88f8:	9005883a 	mov	r2,r18
    88fc:	4023883a 	mov	r17,r8
    8900:	9825883a 	mov	r18,r19
    8904:	05000044 	movi	r20,1
    8908:	1027883a 	mov	r19,r2
    890c:	00000406 	br	8920 <__mdiff+0x94>
    8910:	18005616 	blt	r3,zero,8a6c <__mdiff+0x1e0>
    8914:	34400504 	addi	r17,r6,20
    8918:	2c000504 	addi	r16,r5,20
    891c:	0029883a 	mov	r20,zero
    8920:	91400117 	ldw	r5,4(r18)
    8924:	0007f640 	call	7f64 <_Balloc>
    8928:	92400417 	ldw	r9,16(r18)
    892c:	9b000417 	ldw	r12,16(r19)
    8930:	12c00504 	addi	r11,r2,20
    8934:	4a51883a 	add	r8,r9,r9
    8938:	6319883a 	add	r12,r12,r12
    893c:	4211883a 	add	r8,r8,r8
    8940:	6319883a 	add	r12,r12,r12
    8944:	15000315 	stw	r20,12(r2)
    8948:	8211883a 	add	r8,r16,r8
    894c:	8b19883a 	add	r12,r17,r12
    8950:	0007883a 	mov	r3,zero
    8954:	81400017 	ldw	r5,0(r16)
    8958:	89c00017 	ldw	r7,0(r17)
    895c:	59800104 	addi	r6,r11,4
    8960:	293fffcc 	andi	r4,r5,65535
    8964:	20c7883a 	add	r3,r4,r3
    8968:	393fffcc 	andi	r4,r7,65535
    896c:	1909c83a 	sub	r4,r3,r4
    8970:	280ad43a 	srli	r5,r5,16
    8974:	380ed43a 	srli	r7,r7,16
    8978:	2007d43a 	srai	r3,r4,16
    897c:	213fffcc 	andi	r4,r4,65535
    8980:	29cbc83a 	sub	r5,r5,r7
    8984:	28c7883a 	add	r3,r5,r3
    8988:	180a943a 	slli	r5,r3,16
    898c:	8c400104 	addi	r17,r17,4
    8990:	84000104 	addi	r16,r16,4
    8994:	2908b03a 	or	r4,r5,r4
    8998:	59000015 	stw	r4,0(r11)
    899c:	1807d43a 	srai	r3,r3,16
    89a0:	3015883a 	mov	r10,r6
    89a4:	3017883a 	mov	r11,r6
    89a8:	8b3fea36 	bltu	r17,r12,8954 <__alt_data_end+0xff008954>
    89ac:	8200162e 	bgeu	r16,r8,8a08 <__mdiff+0x17c>
    89b0:	8017883a 	mov	r11,r16
    89b4:	59400017 	ldw	r5,0(r11)
    89b8:	31800104 	addi	r6,r6,4
    89bc:	5ac00104 	addi	r11,r11,4
    89c0:	293fffcc 	andi	r4,r5,65535
    89c4:	20c7883a 	add	r3,r4,r3
    89c8:	280ed43a 	srli	r7,r5,16
    89cc:	180bd43a 	srai	r5,r3,16
    89d0:	193fffcc 	andi	r4,r3,65535
    89d4:	3947883a 	add	r3,r7,r5
    89d8:	180a943a 	slli	r5,r3,16
    89dc:	1807d43a 	srai	r3,r3,16
    89e0:	2908b03a 	or	r4,r5,r4
    89e4:	313fff15 	stw	r4,-4(r6)
    89e8:	5a3ff236 	bltu	r11,r8,89b4 <__alt_data_end+0xff0089b4>
    89ec:	0406303a 	nor	r3,zero,r16
    89f0:	1a07883a 	add	r3,r3,r8
    89f4:	1806d0ba 	srli	r3,r3,2
    89f8:	18c00044 	addi	r3,r3,1
    89fc:	18c7883a 	add	r3,r3,r3
    8a00:	18c7883a 	add	r3,r3,r3
    8a04:	50d5883a 	add	r10,r10,r3
    8a08:	50ffff04 	addi	r3,r10,-4
    8a0c:	2000041e 	bne	r4,zero,8a20 <__mdiff+0x194>
    8a10:	18ffff04 	addi	r3,r3,-4
    8a14:	19000017 	ldw	r4,0(r3)
    8a18:	4a7fffc4 	addi	r9,r9,-1
    8a1c:	203ffc26 	beq	r4,zero,8a10 <__alt_data_end+0xff008a10>
    8a20:	12400415 	stw	r9,16(r2)
    8a24:	dfc00517 	ldw	ra,20(sp)
    8a28:	dd000417 	ldw	r20,16(sp)
    8a2c:	dcc00317 	ldw	r19,12(sp)
    8a30:	dc800217 	ldw	r18,8(sp)
    8a34:	dc400117 	ldw	r17,4(sp)
    8a38:	dc000017 	ldw	r16,0(sp)
    8a3c:	dec00604 	addi	sp,sp,24
    8a40:	f800283a 	ret
    8a44:	000b883a 	mov	r5,zero
    8a48:	0007f640 	call	7f64 <_Balloc>
    8a4c:	00c00044 	movi	r3,1
    8a50:	10c00415 	stw	r3,16(r2)
    8a54:	10000515 	stw	zero,20(r2)
    8a58:	003ff206 	br	8a24 <__alt_data_end+0xff008a24>
    8a5c:	8023883a 	mov	r17,r16
    8a60:	0029883a 	mov	r20,zero
    8a64:	4021883a 	mov	r16,r8
    8a68:	003fad06 	br	8920 <__alt_data_end+0xff008920>
    8a6c:	9005883a 	mov	r2,r18
    8a70:	94400504 	addi	r17,r18,20
    8a74:	9c000504 	addi	r16,r19,20
    8a78:	9825883a 	mov	r18,r19
    8a7c:	05000044 	movi	r20,1
    8a80:	1027883a 	mov	r19,r2
    8a84:	003fa606 	br	8920 <__alt_data_end+0xff008920>

00008a88 <__ulp>:
    8a88:	295ffc2c 	andhi	r5,r5,32752
    8a8c:	00bf3034 	movhi	r2,64704
    8a90:	2887883a 	add	r3,r5,r2
    8a94:	00c0020e 	bge	zero,r3,8aa0 <__ulp+0x18>
    8a98:	0005883a 	mov	r2,zero
    8a9c:	f800283a 	ret
    8aa0:	00c7c83a 	sub	r3,zero,r3
    8aa4:	1807d53a 	srai	r3,r3,20
    8aa8:	008004c4 	movi	r2,19
    8aac:	10c00b0e 	bge	r2,r3,8adc <__ulp+0x54>
    8ab0:	18bffb04 	addi	r2,r3,-20
    8ab4:	01000784 	movi	r4,30
    8ab8:	0007883a 	mov	r3,zero
    8abc:	20800516 	blt	r4,r2,8ad4 <__ulp+0x4c>
    8ac0:	010007c4 	movi	r4,31
    8ac4:	2089c83a 	sub	r4,r4,r2
    8ac8:	00800044 	movi	r2,1
    8acc:	1104983a 	sll	r2,r2,r4
    8ad0:	f800283a 	ret
    8ad4:	00800044 	movi	r2,1
    8ad8:	f800283a 	ret
    8adc:	01400234 	movhi	r5,8
    8ae0:	28c7d83a 	sra	r3,r5,r3
    8ae4:	0005883a 	mov	r2,zero
    8ae8:	f800283a 	ret

00008aec <__b2d>:
    8aec:	defffa04 	addi	sp,sp,-24
    8af0:	dc000015 	stw	r16,0(sp)
    8af4:	24000417 	ldw	r16,16(r4)
    8af8:	dc400115 	stw	r17,4(sp)
    8afc:	24400504 	addi	r17,r4,20
    8b00:	8421883a 	add	r16,r16,r16
    8b04:	8421883a 	add	r16,r16,r16
    8b08:	8c21883a 	add	r16,r17,r16
    8b0c:	dc800215 	stw	r18,8(sp)
    8b10:	84bfff17 	ldw	r18,-4(r16)
    8b14:	dd000415 	stw	r20,16(sp)
    8b18:	dcc00315 	stw	r19,12(sp)
    8b1c:	9009883a 	mov	r4,r18
    8b20:	2829883a 	mov	r20,r5
    8b24:	dfc00515 	stw	ra,20(sp)
    8b28:	00082580 	call	8258 <__hi0bits>
    8b2c:	00c00804 	movi	r3,32
    8b30:	1889c83a 	sub	r4,r3,r2
    8b34:	a1000015 	stw	r4,0(r20)
    8b38:	01000284 	movi	r4,10
    8b3c:	84ffff04 	addi	r19,r16,-4
    8b40:	20801216 	blt	r4,r2,8b8c <__b2d+0xa0>
    8b44:	018002c4 	movi	r6,11
    8b48:	308dc83a 	sub	r6,r6,r2
    8b4c:	9186d83a 	srl	r3,r18,r6
    8b50:	18cffc34 	orhi	r3,r3,16368
    8b54:	8cc0212e 	bgeu	r17,r19,8bdc <__b2d+0xf0>
    8b58:	813ffe17 	ldw	r4,-8(r16)
    8b5c:	218cd83a 	srl	r6,r4,r6
    8b60:	10800544 	addi	r2,r2,21
    8b64:	9084983a 	sll	r2,r18,r2
    8b68:	1184b03a 	or	r2,r2,r6
    8b6c:	dfc00517 	ldw	ra,20(sp)
    8b70:	dd000417 	ldw	r20,16(sp)
    8b74:	dcc00317 	ldw	r19,12(sp)
    8b78:	dc800217 	ldw	r18,8(sp)
    8b7c:	dc400117 	ldw	r17,4(sp)
    8b80:	dc000017 	ldw	r16,0(sp)
    8b84:	dec00604 	addi	sp,sp,24
    8b88:	f800283a 	ret
    8b8c:	8cc00f2e 	bgeu	r17,r19,8bcc <__b2d+0xe0>
    8b90:	117ffd44 	addi	r5,r2,-11
    8b94:	80bffe17 	ldw	r2,-8(r16)
    8b98:	28000e26 	beq	r5,zero,8bd4 <__b2d+0xe8>
    8b9c:	1949c83a 	sub	r4,r3,r5
    8ba0:	9164983a 	sll	r18,r18,r5
    8ba4:	1106d83a 	srl	r3,r2,r4
    8ba8:	81bffe04 	addi	r6,r16,-8
    8bac:	948ffc34 	orhi	r18,r18,16368
    8bb0:	90c6b03a 	or	r3,r18,r3
    8bb4:	89800e2e 	bgeu	r17,r6,8bf0 <__b2d+0x104>
    8bb8:	81bffd17 	ldw	r6,-12(r16)
    8bbc:	1144983a 	sll	r2,r2,r5
    8bc0:	310ad83a 	srl	r5,r6,r4
    8bc4:	2884b03a 	or	r2,r5,r2
    8bc8:	003fe806 	br	8b6c <__alt_data_end+0xff008b6c>
    8bcc:	10bffd44 	addi	r2,r2,-11
    8bd0:	1000041e 	bne	r2,zero,8be4 <__b2d+0xf8>
    8bd4:	90cffc34 	orhi	r3,r18,16368
    8bd8:	003fe406 	br	8b6c <__alt_data_end+0xff008b6c>
    8bdc:	000d883a 	mov	r6,zero
    8be0:	003fdf06 	br	8b60 <__alt_data_end+0xff008b60>
    8be4:	90a4983a 	sll	r18,r18,r2
    8be8:	0005883a 	mov	r2,zero
    8bec:	003ff906 	br	8bd4 <__alt_data_end+0xff008bd4>
    8bf0:	1144983a 	sll	r2,r2,r5
    8bf4:	003fdd06 	br	8b6c <__alt_data_end+0xff008b6c>

00008bf8 <__d2b>:
    8bf8:	defff804 	addi	sp,sp,-32
    8bfc:	dc000215 	stw	r16,8(sp)
    8c00:	3021883a 	mov	r16,r6
    8c04:	dc400315 	stw	r17,12(sp)
    8c08:	8022907a 	slli	r17,r16,1
    8c0c:	dd000615 	stw	r20,24(sp)
    8c10:	2829883a 	mov	r20,r5
    8c14:	01400044 	movi	r5,1
    8c18:	dcc00515 	stw	r19,20(sp)
    8c1c:	dc800415 	stw	r18,16(sp)
    8c20:	dfc00715 	stw	ra,28(sp)
    8c24:	3825883a 	mov	r18,r7
    8c28:	8822d57a 	srli	r17,r17,21
    8c2c:	0007f640 	call	7f64 <_Balloc>
    8c30:	1027883a 	mov	r19,r2
    8c34:	00800434 	movhi	r2,16
    8c38:	10bfffc4 	addi	r2,r2,-1
    8c3c:	808c703a 	and	r6,r16,r2
    8c40:	88000126 	beq	r17,zero,8c48 <__d2b+0x50>
    8c44:	31800434 	orhi	r6,r6,16
    8c48:	d9800015 	stw	r6,0(sp)
    8c4c:	a0002426 	beq	r20,zero,8ce0 <__d2b+0xe8>
    8c50:	d9000104 	addi	r4,sp,4
    8c54:	dd000115 	stw	r20,4(sp)
    8c58:	00082c00 	call	82c0 <__lo0bits>
    8c5c:	d8c00017 	ldw	r3,0(sp)
    8c60:	10002f1e 	bne	r2,zero,8d20 <__d2b+0x128>
    8c64:	d9000117 	ldw	r4,4(sp)
    8c68:	99000515 	stw	r4,20(r19)
    8c6c:	1821003a 	cmpeq	r16,r3,zero
    8c70:	01000084 	movi	r4,2
    8c74:	2421c83a 	sub	r16,r4,r16
    8c78:	98c00615 	stw	r3,24(r19)
    8c7c:	9c000415 	stw	r16,16(r19)
    8c80:	88001f1e 	bne	r17,zero,8d00 <__d2b+0x108>
    8c84:	10bef384 	addi	r2,r2,-1074
    8c88:	90800015 	stw	r2,0(r18)
    8c8c:	00900034 	movhi	r2,16384
    8c90:	10bfffc4 	addi	r2,r2,-1
    8c94:	8085883a 	add	r2,r16,r2
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	9885883a 	add	r2,r19,r2
    8ca4:	11000517 	ldw	r4,20(r2)
    8ca8:	8020917a 	slli	r16,r16,5
    8cac:	00082580 	call	8258 <__hi0bits>
    8cb0:	d8c00817 	ldw	r3,32(sp)
    8cb4:	8085c83a 	sub	r2,r16,r2
    8cb8:	18800015 	stw	r2,0(r3)
    8cbc:	9805883a 	mov	r2,r19
    8cc0:	dfc00717 	ldw	ra,28(sp)
    8cc4:	dd000617 	ldw	r20,24(sp)
    8cc8:	dcc00517 	ldw	r19,20(sp)
    8ccc:	dc800417 	ldw	r18,16(sp)
    8cd0:	dc400317 	ldw	r17,12(sp)
    8cd4:	dc000217 	ldw	r16,8(sp)
    8cd8:	dec00804 	addi	sp,sp,32
    8cdc:	f800283a 	ret
    8ce0:	d809883a 	mov	r4,sp
    8ce4:	00082c00 	call	82c0 <__lo0bits>
    8ce8:	d8c00017 	ldw	r3,0(sp)
    8cec:	04000044 	movi	r16,1
    8cf0:	9c000415 	stw	r16,16(r19)
    8cf4:	98c00515 	stw	r3,20(r19)
    8cf8:	10800804 	addi	r2,r2,32
    8cfc:	883fe126 	beq	r17,zero,8c84 <__alt_data_end+0xff008c84>
    8d00:	00c00d44 	movi	r3,53
    8d04:	8c7ef344 	addi	r17,r17,-1075
    8d08:	88a3883a 	add	r17,r17,r2
    8d0c:	1885c83a 	sub	r2,r3,r2
    8d10:	d8c00817 	ldw	r3,32(sp)
    8d14:	94400015 	stw	r17,0(r18)
    8d18:	18800015 	stw	r2,0(r3)
    8d1c:	003fe706 	br	8cbc <__alt_data_end+0xff008cbc>
    8d20:	01000804 	movi	r4,32
    8d24:	2089c83a 	sub	r4,r4,r2
    8d28:	1908983a 	sll	r4,r3,r4
    8d2c:	d9400117 	ldw	r5,4(sp)
    8d30:	1886d83a 	srl	r3,r3,r2
    8d34:	2148b03a 	or	r4,r4,r5
    8d38:	99000515 	stw	r4,20(r19)
    8d3c:	d8c00015 	stw	r3,0(sp)
    8d40:	003fca06 	br	8c6c <__alt_data_end+0xff008c6c>

00008d44 <__ratio>:
    8d44:	defff904 	addi	sp,sp,-28
    8d48:	dc400315 	stw	r17,12(sp)
    8d4c:	2823883a 	mov	r17,r5
    8d50:	d9400104 	addi	r5,sp,4
    8d54:	dfc00615 	stw	ra,24(sp)
    8d58:	dcc00515 	stw	r19,20(sp)
    8d5c:	dc800415 	stw	r18,16(sp)
    8d60:	2027883a 	mov	r19,r4
    8d64:	dc000215 	stw	r16,8(sp)
    8d68:	0008aec0 	call	8aec <__b2d>
    8d6c:	d80b883a 	mov	r5,sp
    8d70:	8809883a 	mov	r4,r17
    8d74:	1025883a 	mov	r18,r2
    8d78:	1821883a 	mov	r16,r3
    8d7c:	0008aec0 	call	8aec <__b2d>
    8d80:	8a000417 	ldw	r8,16(r17)
    8d84:	99000417 	ldw	r4,16(r19)
    8d88:	d9400117 	ldw	r5,4(sp)
    8d8c:	2209c83a 	sub	r4,r4,r8
    8d90:	2010917a 	slli	r8,r4,5
    8d94:	d9000017 	ldw	r4,0(sp)
    8d98:	2909c83a 	sub	r4,r5,r4
    8d9c:	4109883a 	add	r4,r8,r4
    8da0:	01000e0e 	bge	zero,r4,8ddc <__ratio+0x98>
    8da4:	2008953a 	slli	r4,r4,20
    8da8:	2421883a 	add	r16,r4,r16
    8dac:	100d883a 	mov	r6,r2
    8db0:	180f883a 	mov	r7,r3
    8db4:	9009883a 	mov	r4,r18
    8db8:	800b883a 	mov	r5,r16
    8dbc:	000165c0 	call	165c <__divdf3>
    8dc0:	dfc00617 	ldw	ra,24(sp)
    8dc4:	dcc00517 	ldw	r19,20(sp)
    8dc8:	dc800417 	ldw	r18,16(sp)
    8dcc:	dc400317 	ldw	r17,12(sp)
    8dd0:	dc000217 	ldw	r16,8(sp)
    8dd4:	dec00704 	addi	sp,sp,28
    8dd8:	f800283a 	ret
    8ddc:	2008953a 	slli	r4,r4,20
    8de0:	1907c83a 	sub	r3,r3,r4
    8de4:	003ff106 	br	8dac <__alt_data_end+0xff008dac>

00008de8 <_mprec_log10>:
    8de8:	defffe04 	addi	sp,sp,-8
    8dec:	dc000015 	stw	r16,0(sp)
    8df0:	dfc00115 	stw	ra,4(sp)
    8df4:	008005c4 	movi	r2,23
    8df8:	2021883a 	mov	r16,r4
    8dfc:	11000d0e 	bge	r2,r4,8e34 <_mprec_log10+0x4c>
    8e00:	0005883a 	mov	r2,zero
    8e04:	00cffc34 	movhi	r3,16368
    8e08:	843fffc4 	addi	r16,r16,-1
    8e0c:	000d883a 	mov	r6,zero
    8e10:	01d00934 	movhi	r7,16420
    8e14:	1009883a 	mov	r4,r2
    8e18:	180b883a 	mov	r5,r3
    8e1c:	000cc800 	call	cc80 <__muldf3>
    8e20:	803ff91e 	bne	r16,zero,8e08 <__alt_data_end+0xff008e08>
    8e24:	dfc00117 	ldw	ra,4(sp)
    8e28:	dc000017 	ldw	r16,0(sp)
    8e2c:	dec00204 	addi	sp,sp,8
    8e30:	f800283a 	ret
    8e34:	202090fa 	slli	r16,r4,3
    8e38:	00800074 	movhi	r2,1
    8e3c:	10846304 	addi	r2,r2,4492
    8e40:	1421883a 	add	r16,r2,r16
    8e44:	80800017 	ldw	r2,0(r16)
    8e48:	80c00117 	ldw	r3,4(r16)
    8e4c:	dfc00117 	ldw	ra,4(sp)
    8e50:	dc000017 	ldw	r16,0(sp)
    8e54:	dec00204 	addi	sp,sp,8
    8e58:	f800283a 	ret

00008e5c <__copybits>:
    8e5c:	297fffc4 	addi	r5,r5,-1
    8e60:	280fd17a 	srai	r7,r5,5
    8e64:	30c00417 	ldw	r3,16(r6)
    8e68:	30800504 	addi	r2,r6,20
    8e6c:	39c00044 	addi	r7,r7,1
    8e70:	18c7883a 	add	r3,r3,r3
    8e74:	39cf883a 	add	r7,r7,r7
    8e78:	18c7883a 	add	r3,r3,r3
    8e7c:	39cf883a 	add	r7,r7,r7
    8e80:	10c7883a 	add	r3,r2,r3
    8e84:	21cf883a 	add	r7,r4,r7
    8e88:	10c00d2e 	bgeu	r2,r3,8ec0 <__copybits+0x64>
    8e8c:	200b883a 	mov	r5,r4
    8e90:	12000017 	ldw	r8,0(r2)
    8e94:	29400104 	addi	r5,r5,4
    8e98:	10800104 	addi	r2,r2,4
    8e9c:	2a3fff15 	stw	r8,-4(r5)
    8ea0:	10fffb36 	bltu	r2,r3,8e90 <__alt_data_end+0xff008e90>
    8ea4:	1985c83a 	sub	r2,r3,r6
    8ea8:	10bffac4 	addi	r2,r2,-21
    8eac:	1004d0ba 	srli	r2,r2,2
    8eb0:	10800044 	addi	r2,r2,1
    8eb4:	1085883a 	add	r2,r2,r2
    8eb8:	1085883a 	add	r2,r2,r2
    8ebc:	2089883a 	add	r4,r4,r2
    8ec0:	21c0032e 	bgeu	r4,r7,8ed0 <__copybits+0x74>
    8ec4:	20000015 	stw	zero,0(r4)
    8ec8:	21000104 	addi	r4,r4,4
    8ecc:	21fffd36 	bltu	r4,r7,8ec4 <__alt_data_end+0xff008ec4>
    8ed0:	f800283a 	ret

00008ed4 <__any_on>:
    8ed4:	20c00417 	ldw	r3,16(r4)
    8ed8:	2805d17a 	srai	r2,r5,5
    8edc:	21000504 	addi	r4,r4,20
    8ee0:	18800d0e 	bge	r3,r2,8f18 <__any_on+0x44>
    8ee4:	18c7883a 	add	r3,r3,r3
    8ee8:	18c7883a 	add	r3,r3,r3
    8eec:	20c7883a 	add	r3,r4,r3
    8ef0:	20c0192e 	bgeu	r4,r3,8f58 <__any_on+0x84>
    8ef4:	18bfff17 	ldw	r2,-4(r3)
    8ef8:	18ffff04 	addi	r3,r3,-4
    8efc:	1000041e 	bne	r2,zero,8f10 <__any_on+0x3c>
    8f00:	20c0142e 	bgeu	r4,r3,8f54 <__any_on+0x80>
    8f04:	18ffff04 	addi	r3,r3,-4
    8f08:	19400017 	ldw	r5,0(r3)
    8f0c:	283ffc26 	beq	r5,zero,8f00 <__alt_data_end+0xff008f00>
    8f10:	00800044 	movi	r2,1
    8f14:	f800283a 	ret
    8f18:	10c00a0e 	bge	r2,r3,8f44 <__any_on+0x70>
    8f1c:	1085883a 	add	r2,r2,r2
    8f20:	1085883a 	add	r2,r2,r2
    8f24:	294007cc 	andi	r5,r5,31
    8f28:	2087883a 	add	r3,r4,r2
    8f2c:	283ff026 	beq	r5,zero,8ef0 <__alt_data_end+0xff008ef0>
    8f30:	19800017 	ldw	r6,0(r3)
    8f34:	3144d83a 	srl	r2,r6,r5
    8f38:	114a983a 	sll	r5,r2,r5
    8f3c:	317ff41e 	bne	r6,r5,8f10 <__alt_data_end+0xff008f10>
    8f40:	003feb06 	br	8ef0 <__alt_data_end+0xff008ef0>
    8f44:	1085883a 	add	r2,r2,r2
    8f48:	1085883a 	add	r2,r2,r2
    8f4c:	2087883a 	add	r3,r4,r2
    8f50:	003fe706 	br	8ef0 <__alt_data_end+0xff008ef0>
    8f54:	f800283a 	ret
    8f58:	0005883a 	mov	r2,zero
    8f5c:	f800283a 	ret

00008f60 <_realloc_r>:
    8f60:	defff604 	addi	sp,sp,-40
    8f64:	dc800215 	stw	r18,8(sp)
    8f68:	dfc00915 	stw	ra,36(sp)
    8f6c:	df000815 	stw	fp,32(sp)
    8f70:	ddc00715 	stw	r23,28(sp)
    8f74:	dd800615 	stw	r22,24(sp)
    8f78:	dd400515 	stw	r21,20(sp)
    8f7c:	dd000415 	stw	r20,16(sp)
    8f80:	dcc00315 	stw	r19,12(sp)
    8f84:	dc400115 	stw	r17,4(sp)
    8f88:	dc000015 	stw	r16,0(sp)
    8f8c:	3025883a 	mov	r18,r6
    8f90:	2800b726 	beq	r5,zero,9270 <_realloc_r+0x310>
    8f94:	282b883a 	mov	r21,r5
    8f98:	2029883a 	mov	r20,r4
    8f9c:	000e36c0 	call	e36c <__malloc_lock>
    8fa0:	a8bfff17 	ldw	r2,-4(r21)
    8fa4:	043fff04 	movi	r16,-4
    8fa8:	90c002c4 	addi	r3,r18,11
    8fac:	01000584 	movi	r4,22
    8fb0:	acfffe04 	addi	r19,r21,-8
    8fb4:	1420703a 	and	r16,r2,r16
    8fb8:	20c0332e 	bgeu	r4,r3,9088 <_realloc_r+0x128>
    8fbc:	047ffe04 	movi	r17,-8
    8fc0:	1c62703a 	and	r17,r3,r17
    8fc4:	8807883a 	mov	r3,r17
    8fc8:	88005816 	blt	r17,zero,912c <_realloc_r+0x1cc>
    8fcc:	8c805736 	bltu	r17,r18,912c <_realloc_r+0x1cc>
    8fd0:	80c0300e 	bge	r16,r3,9094 <_realloc_r+0x134>
    8fd4:	07000074 	movhi	fp,1
    8fd8:	e704e804 	addi	fp,fp,5024
    8fdc:	e1c00217 	ldw	r7,8(fp)
    8fe0:	9c09883a 	add	r4,r19,r16
    8fe4:	22000117 	ldw	r8,4(r4)
    8fe8:	21c06326 	beq	r4,r7,9178 <_realloc_r+0x218>
    8fec:	017fff84 	movi	r5,-2
    8ff0:	414a703a 	and	r5,r8,r5
    8ff4:	214b883a 	add	r5,r4,r5
    8ff8:	29800117 	ldw	r6,4(r5)
    8ffc:	3180004c 	andi	r6,r6,1
    9000:	30003f26 	beq	r6,zero,9100 <_realloc_r+0x1a0>
    9004:	1080004c 	andi	r2,r2,1
    9008:	10008326 	beq	r2,zero,9218 <_realloc_r+0x2b8>
    900c:	900b883a 	mov	r5,r18
    9010:	a009883a 	mov	r4,r20
    9014:	00020780 	call	2078 <_malloc_r>
    9018:	1025883a 	mov	r18,r2
    901c:	10011e26 	beq	r2,zero,9498 <_realloc_r+0x538>
    9020:	a93fff17 	ldw	r4,-4(r21)
    9024:	10fffe04 	addi	r3,r2,-8
    9028:	00bfff84 	movi	r2,-2
    902c:	2084703a 	and	r2,r4,r2
    9030:	9885883a 	add	r2,r19,r2
    9034:	1880ee26 	beq	r3,r2,93f0 <_realloc_r+0x490>
    9038:	81bfff04 	addi	r6,r16,-4
    903c:	00800904 	movi	r2,36
    9040:	1180b836 	bltu	r2,r6,9324 <_realloc_r+0x3c4>
    9044:	00c004c4 	movi	r3,19
    9048:	19809636 	bltu	r3,r6,92a4 <_realloc_r+0x344>
    904c:	9005883a 	mov	r2,r18
    9050:	a807883a 	mov	r3,r21
    9054:	19000017 	ldw	r4,0(r3)
    9058:	11000015 	stw	r4,0(r2)
    905c:	19000117 	ldw	r4,4(r3)
    9060:	11000115 	stw	r4,4(r2)
    9064:	18c00217 	ldw	r3,8(r3)
    9068:	10c00215 	stw	r3,8(r2)
    906c:	a80b883a 	mov	r5,r21
    9070:	a009883a 	mov	r4,r20
    9074:	0006ec80 	call	6ec8 <_free_r>
    9078:	a009883a 	mov	r4,r20
    907c:	000e3900 	call	e390 <__malloc_unlock>
    9080:	9005883a 	mov	r2,r18
    9084:	00001206 	br	90d0 <_realloc_r+0x170>
    9088:	00c00404 	movi	r3,16
    908c:	1823883a 	mov	r17,r3
    9090:	003fce06 	br	8fcc <__alt_data_end+0xff008fcc>
    9094:	a825883a 	mov	r18,r21
    9098:	8445c83a 	sub	r2,r16,r17
    909c:	00c003c4 	movi	r3,15
    90a0:	18802636 	bltu	r3,r2,913c <_realloc_r+0x1dc>
    90a4:	99800117 	ldw	r6,4(r19)
    90a8:	9c07883a 	add	r3,r19,r16
    90ac:	3180004c 	andi	r6,r6,1
    90b0:	3420b03a 	or	r16,r6,r16
    90b4:	9c000115 	stw	r16,4(r19)
    90b8:	18800117 	ldw	r2,4(r3)
    90bc:	10800054 	ori	r2,r2,1
    90c0:	18800115 	stw	r2,4(r3)
    90c4:	a009883a 	mov	r4,r20
    90c8:	000e3900 	call	e390 <__malloc_unlock>
    90cc:	9005883a 	mov	r2,r18
    90d0:	dfc00917 	ldw	ra,36(sp)
    90d4:	df000817 	ldw	fp,32(sp)
    90d8:	ddc00717 	ldw	r23,28(sp)
    90dc:	dd800617 	ldw	r22,24(sp)
    90e0:	dd400517 	ldw	r21,20(sp)
    90e4:	dd000417 	ldw	r20,16(sp)
    90e8:	dcc00317 	ldw	r19,12(sp)
    90ec:	dc800217 	ldw	r18,8(sp)
    90f0:	dc400117 	ldw	r17,4(sp)
    90f4:	dc000017 	ldw	r16,0(sp)
    90f8:	dec00a04 	addi	sp,sp,40
    90fc:	f800283a 	ret
    9100:	017fff04 	movi	r5,-4
    9104:	414a703a 	and	r5,r8,r5
    9108:	814d883a 	add	r6,r16,r5
    910c:	30c01f16 	blt	r6,r3,918c <_realloc_r+0x22c>
    9110:	20800317 	ldw	r2,12(r4)
    9114:	20c00217 	ldw	r3,8(r4)
    9118:	a825883a 	mov	r18,r21
    911c:	3021883a 	mov	r16,r6
    9120:	18800315 	stw	r2,12(r3)
    9124:	10c00215 	stw	r3,8(r2)
    9128:	003fdb06 	br	9098 <__alt_data_end+0xff009098>
    912c:	00800304 	movi	r2,12
    9130:	a0800015 	stw	r2,0(r20)
    9134:	0005883a 	mov	r2,zero
    9138:	003fe506 	br	90d0 <__alt_data_end+0xff0090d0>
    913c:	98c00117 	ldw	r3,4(r19)
    9140:	9c4b883a 	add	r5,r19,r17
    9144:	11000054 	ori	r4,r2,1
    9148:	18c0004c 	andi	r3,r3,1
    914c:	1c62b03a 	or	r17,r3,r17
    9150:	9c400115 	stw	r17,4(r19)
    9154:	29000115 	stw	r4,4(r5)
    9158:	2885883a 	add	r2,r5,r2
    915c:	10c00117 	ldw	r3,4(r2)
    9160:	29400204 	addi	r5,r5,8
    9164:	a009883a 	mov	r4,r20
    9168:	18c00054 	ori	r3,r3,1
    916c:	10c00115 	stw	r3,4(r2)
    9170:	0006ec80 	call	6ec8 <_free_r>
    9174:	003fd306 	br	90c4 <__alt_data_end+0xff0090c4>
    9178:	017fff04 	movi	r5,-4
    917c:	414a703a 	and	r5,r8,r5
    9180:	89800404 	addi	r6,r17,16
    9184:	8151883a 	add	r8,r16,r5
    9188:	4180590e 	bge	r8,r6,92f0 <_realloc_r+0x390>
    918c:	1080004c 	andi	r2,r2,1
    9190:	103f9e1e 	bne	r2,zero,900c <__alt_data_end+0xff00900c>
    9194:	adbffe17 	ldw	r22,-8(r21)
    9198:	00bfff04 	movi	r2,-4
    919c:	9dadc83a 	sub	r22,r19,r22
    91a0:	b1800117 	ldw	r6,4(r22)
    91a4:	3084703a 	and	r2,r6,r2
    91a8:	20002026 	beq	r4,zero,922c <_realloc_r+0x2cc>
    91ac:	80af883a 	add	r23,r16,r2
    91b0:	b96f883a 	add	r23,r23,r5
    91b4:	21c05f26 	beq	r4,r7,9334 <_realloc_r+0x3d4>
    91b8:	b8c01c16 	blt	r23,r3,922c <_realloc_r+0x2cc>
    91bc:	20800317 	ldw	r2,12(r4)
    91c0:	20c00217 	ldw	r3,8(r4)
    91c4:	81bfff04 	addi	r6,r16,-4
    91c8:	01000904 	movi	r4,36
    91cc:	18800315 	stw	r2,12(r3)
    91d0:	10c00215 	stw	r3,8(r2)
    91d4:	b0c00217 	ldw	r3,8(r22)
    91d8:	b0800317 	ldw	r2,12(r22)
    91dc:	b4800204 	addi	r18,r22,8
    91e0:	18800315 	stw	r2,12(r3)
    91e4:	10c00215 	stw	r3,8(r2)
    91e8:	21801b36 	bltu	r4,r6,9258 <_realloc_r+0x2f8>
    91ec:	008004c4 	movi	r2,19
    91f0:	1180352e 	bgeu	r2,r6,92c8 <_realloc_r+0x368>
    91f4:	a8800017 	ldw	r2,0(r21)
    91f8:	b0800215 	stw	r2,8(r22)
    91fc:	a8800117 	ldw	r2,4(r21)
    9200:	b0800315 	stw	r2,12(r22)
    9204:	008006c4 	movi	r2,27
    9208:	11807f36 	bltu	r2,r6,9408 <_realloc_r+0x4a8>
    920c:	b0800404 	addi	r2,r22,16
    9210:	ad400204 	addi	r21,r21,8
    9214:	00002d06 	br	92cc <_realloc_r+0x36c>
    9218:	adbffe17 	ldw	r22,-8(r21)
    921c:	00bfff04 	movi	r2,-4
    9220:	9dadc83a 	sub	r22,r19,r22
    9224:	b1000117 	ldw	r4,4(r22)
    9228:	2084703a 	and	r2,r4,r2
    922c:	b03f7726 	beq	r22,zero,900c <__alt_data_end+0xff00900c>
    9230:	80af883a 	add	r23,r16,r2
    9234:	b8ff7516 	blt	r23,r3,900c <__alt_data_end+0xff00900c>
    9238:	b0800317 	ldw	r2,12(r22)
    923c:	b0c00217 	ldw	r3,8(r22)
    9240:	81bfff04 	addi	r6,r16,-4
    9244:	01000904 	movi	r4,36
    9248:	18800315 	stw	r2,12(r3)
    924c:	10c00215 	stw	r3,8(r2)
    9250:	b4800204 	addi	r18,r22,8
    9254:	21bfe52e 	bgeu	r4,r6,91ec <__alt_data_end+0xff0091ec>
    9258:	a80b883a 	mov	r5,r21
    925c:	9009883a 	mov	r4,r18
    9260:	0007ce00 	call	7ce0 <memmove>
    9264:	b821883a 	mov	r16,r23
    9268:	b027883a 	mov	r19,r22
    926c:	003f8a06 	br	9098 <__alt_data_end+0xff009098>
    9270:	300b883a 	mov	r5,r6
    9274:	dfc00917 	ldw	ra,36(sp)
    9278:	df000817 	ldw	fp,32(sp)
    927c:	ddc00717 	ldw	r23,28(sp)
    9280:	dd800617 	ldw	r22,24(sp)
    9284:	dd400517 	ldw	r21,20(sp)
    9288:	dd000417 	ldw	r20,16(sp)
    928c:	dcc00317 	ldw	r19,12(sp)
    9290:	dc800217 	ldw	r18,8(sp)
    9294:	dc400117 	ldw	r17,4(sp)
    9298:	dc000017 	ldw	r16,0(sp)
    929c:	dec00a04 	addi	sp,sp,40
    92a0:	00020781 	jmpi	2078 <_malloc_r>
    92a4:	a8c00017 	ldw	r3,0(r21)
    92a8:	90c00015 	stw	r3,0(r18)
    92ac:	a8c00117 	ldw	r3,4(r21)
    92b0:	90c00115 	stw	r3,4(r18)
    92b4:	00c006c4 	movi	r3,27
    92b8:	19804536 	bltu	r3,r6,93d0 <_realloc_r+0x470>
    92bc:	90800204 	addi	r2,r18,8
    92c0:	a8c00204 	addi	r3,r21,8
    92c4:	003f6306 	br	9054 <__alt_data_end+0xff009054>
    92c8:	9005883a 	mov	r2,r18
    92cc:	a8c00017 	ldw	r3,0(r21)
    92d0:	b821883a 	mov	r16,r23
    92d4:	b027883a 	mov	r19,r22
    92d8:	10c00015 	stw	r3,0(r2)
    92dc:	a8c00117 	ldw	r3,4(r21)
    92e0:	10c00115 	stw	r3,4(r2)
    92e4:	a8c00217 	ldw	r3,8(r21)
    92e8:	10c00215 	stw	r3,8(r2)
    92ec:	003f6a06 	br	9098 <__alt_data_end+0xff009098>
    92f0:	9c67883a 	add	r19,r19,r17
    92f4:	4445c83a 	sub	r2,r8,r17
    92f8:	e4c00215 	stw	r19,8(fp)
    92fc:	10800054 	ori	r2,r2,1
    9300:	98800115 	stw	r2,4(r19)
    9304:	a8bfff17 	ldw	r2,-4(r21)
    9308:	a009883a 	mov	r4,r20
    930c:	1080004c 	andi	r2,r2,1
    9310:	1462b03a 	or	r17,r2,r17
    9314:	ac7fff15 	stw	r17,-4(r21)
    9318:	000e3900 	call	e390 <__malloc_unlock>
    931c:	a805883a 	mov	r2,r21
    9320:	003f6b06 	br	90d0 <__alt_data_end+0xff0090d0>
    9324:	a80b883a 	mov	r5,r21
    9328:	9009883a 	mov	r4,r18
    932c:	0007ce00 	call	7ce0 <memmove>
    9330:	003f4e06 	br	906c <__alt_data_end+0xff00906c>
    9334:	89000404 	addi	r4,r17,16
    9338:	b93fbc16 	blt	r23,r4,922c <__alt_data_end+0xff00922c>
    933c:	b0800317 	ldw	r2,12(r22)
    9340:	b0c00217 	ldw	r3,8(r22)
    9344:	81bfff04 	addi	r6,r16,-4
    9348:	01000904 	movi	r4,36
    934c:	18800315 	stw	r2,12(r3)
    9350:	10c00215 	stw	r3,8(r2)
    9354:	b4800204 	addi	r18,r22,8
    9358:	21804336 	bltu	r4,r6,9468 <_realloc_r+0x508>
    935c:	008004c4 	movi	r2,19
    9360:	11803f2e 	bgeu	r2,r6,9460 <_realloc_r+0x500>
    9364:	a8800017 	ldw	r2,0(r21)
    9368:	b0800215 	stw	r2,8(r22)
    936c:	a8800117 	ldw	r2,4(r21)
    9370:	b0800315 	stw	r2,12(r22)
    9374:	008006c4 	movi	r2,27
    9378:	11803f36 	bltu	r2,r6,9478 <_realloc_r+0x518>
    937c:	b0800404 	addi	r2,r22,16
    9380:	ad400204 	addi	r21,r21,8
    9384:	a8c00017 	ldw	r3,0(r21)
    9388:	10c00015 	stw	r3,0(r2)
    938c:	a8c00117 	ldw	r3,4(r21)
    9390:	10c00115 	stw	r3,4(r2)
    9394:	a8c00217 	ldw	r3,8(r21)
    9398:	10c00215 	stw	r3,8(r2)
    939c:	b447883a 	add	r3,r22,r17
    93a0:	bc45c83a 	sub	r2,r23,r17
    93a4:	e0c00215 	stw	r3,8(fp)
    93a8:	10800054 	ori	r2,r2,1
    93ac:	18800115 	stw	r2,4(r3)
    93b0:	b0800117 	ldw	r2,4(r22)
    93b4:	a009883a 	mov	r4,r20
    93b8:	1080004c 	andi	r2,r2,1
    93bc:	1462b03a 	or	r17,r2,r17
    93c0:	b4400115 	stw	r17,4(r22)
    93c4:	000e3900 	call	e390 <__malloc_unlock>
    93c8:	9005883a 	mov	r2,r18
    93cc:	003f4006 	br	90d0 <__alt_data_end+0xff0090d0>
    93d0:	a8c00217 	ldw	r3,8(r21)
    93d4:	90c00215 	stw	r3,8(r18)
    93d8:	a8c00317 	ldw	r3,12(r21)
    93dc:	90c00315 	stw	r3,12(r18)
    93e0:	30801126 	beq	r6,r2,9428 <_realloc_r+0x4c8>
    93e4:	90800404 	addi	r2,r18,16
    93e8:	a8c00404 	addi	r3,r21,16
    93ec:	003f1906 	br	9054 <__alt_data_end+0xff009054>
    93f0:	90ffff17 	ldw	r3,-4(r18)
    93f4:	00bfff04 	movi	r2,-4
    93f8:	a825883a 	mov	r18,r21
    93fc:	1884703a 	and	r2,r3,r2
    9400:	80a1883a 	add	r16,r16,r2
    9404:	003f2406 	br	9098 <__alt_data_end+0xff009098>
    9408:	a8800217 	ldw	r2,8(r21)
    940c:	b0800415 	stw	r2,16(r22)
    9410:	a8800317 	ldw	r2,12(r21)
    9414:	b0800515 	stw	r2,20(r22)
    9418:	31000a26 	beq	r6,r4,9444 <_realloc_r+0x4e4>
    941c:	b0800604 	addi	r2,r22,24
    9420:	ad400404 	addi	r21,r21,16
    9424:	003fa906 	br	92cc <__alt_data_end+0xff0092cc>
    9428:	a9000417 	ldw	r4,16(r21)
    942c:	90800604 	addi	r2,r18,24
    9430:	a8c00604 	addi	r3,r21,24
    9434:	91000415 	stw	r4,16(r18)
    9438:	a9000517 	ldw	r4,20(r21)
    943c:	91000515 	stw	r4,20(r18)
    9440:	003f0406 	br	9054 <__alt_data_end+0xff009054>
    9444:	a8c00417 	ldw	r3,16(r21)
    9448:	ad400604 	addi	r21,r21,24
    944c:	b0800804 	addi	r2,r22,32
    9450:	b0c00615 	stw	r3,24(r22)
    9454:	a8ffff17 	ldw	r3,-4(r21)
    9458:	b0c00715 	stw	r3,28(r22)
    945c:	003f9b06 	br	92cc <__alt_data_end+0xff0092cc>
    9460:	9005883a 	mov	r2,r18
    9464:	003fc706 	br	9384 <__alt_data_end+0xff009384>
    9468:	a80b883a 	mov	r5,r21
    946c:	9009883a 	mov	r4,r18
    9470:	0007ce00 	call	7ce0 <memmove>
    9474:	003fc906 	br	939c <__alt_data_end+0xff00939c>
    9478:	a8800217 	ldw	r2,8(r21)
    947c:	b0800415 	stw	r2,16(r22)
    9480:	a8800317 	ldw	r2,12(r21)
    9484:	b0800515 	stw	r2,20(r22)
    9488:	31000726 	beq	r6,r4,94a8 <_realloc_r+0x548>
    948c:	b0800604 	addi	r2,r22,24
    9490:	ad400404 	addi	r21,r21,16
    9494:	003fbb06 	br	9384 <__alt_data_end+0xff009384>
    9498:	a009883a 	mov	r4,r20
    949c:	000e3900 	call	e390 <__malloc_unlock>
    94a0:	0005883a 	mov	r2,zero
    94a4:	003f0a06 	br	90d0 <__alt_data_end+0xff0090d0>
    94a8:	a8c00417 	ldw	r3,16(r21)
    94ac:	ad400604 	addi	r21,r21,24
    94b0:	b0800804 	addi	r2,r22,32
    94b4:	b0c00615 	stw	r3,24(r22)
    94b8:	a8ffff17 	ldw	r3,-4(r21)
    94bc:	b0c00715 	stw	r3,28(r22)
    94c0:	003fb006 	br	9384 <__alt_data_end+0xff009384>

000094c4 <__fpclassifyd>:
    94c4:	00a00034 	movhi	r2,32768
    94c8:	10bfffc4 	addi	r2,r2,-1
    94cc:	2884703a 	and	r2,r5,r2
    94d0:	10000726 	beq	r2,zero,94f0 <__fpclassifyd+0x2c>
    94d4:	00fffc34 	movhi	r3,65520
    94d8:	019ff834 	movhi	r6,32736
    94dc:	28c7883a 	add	r3,r5,r3
    94e0:	31bfffc4 	addi	r6,r6,-1
    94e4:	30c00536 	bltu	r6,r3,94fc <__fpclassifyd+0x38>
    94e8:	00800104 	movi	r2,4
    94ec:	f800283a 	ret
    94f0:	2000021e 	bne	r4,zero,94fc <__fpclassifyd+0x38>
    94f4:	00800084 	movi	r2,2
    94f8:	f800283a 	ret
    94fc:	00dffc34 	movhi	r3,32752
    9500:	019ff834 	movhi	r6,32736
    9504:	28cb883a 	add	r5,r5,r3
    9508:	31bfffc4 	addi	r6,r6,-1
    950c:	317ff62e 	bgeu	r6,r5,94e8 <__alt_data_end+0xff0094e8>
    9510:	01400434 	movhi	r5,16
    9514:	297fffc4 	addi	r5,r5,-1
    9518:	28800236 	bltu	r5,r2,9524 <__fpclassifyd+0x60>
    951c:	008000c4 	movi	r2,3
    9520:	f800283a 	ret
    9524:	10c00226 	beq	r2,r3,9530 <__fpclassifyd+0x6c>
    9528:	0005883a 	mov	r2,zero
    952c:	f800283a 	ret
    9530:	2005003a 	cmpeq	r2,r4,zero
    9534:	f800283a 	ret

00009538 <__sread>:
    9538:	defffe04 	addi	sp,sp,-8
    953c:	dc000015 	stw	r16,0(sp)
    9540:	2821883a 	mov	r16,r5
    9544:	2940038f 	ldh	r5,14(r5)
    9548:	dfc00115 	stw	ra,4(sp)
    954c:	000b32c0 	call	b32c <_read_r>
    9550:	10000716 	blt	r2,zero,9570 <__sread+0x38>
    9554:	80c01417 	ldw	r3,80(r16)
    9558:	1887883a 	add	r3,r3,r2
    955c:	80c01415 	stw	r3,80(r16)
    9560:	dfc00117 	ldw	ra,4(sp)
    9564:	dc000017 	ldw	r16,0(sp)
    9568:	dec00204 	addi	sp,sp,8
    956c:	f800283a 	ret
    9570:	80c0030b 	ldhu	r3,12(r16)
    9574:	18fbffcc 	andi	r3,r3,61439
    9578:	80c0030d 	sth	r3,12(r16)
    957c:	dfc00117 	ldw	ra,4(sp)
    9580:	dc000017 	ldw	r16,0(sp)
    9584:	dec00204 	addi	sp,sp,8
    9588:	f800283a 	ret

0000958c <__seofread>:
    958c:	0005883a 	mov	r2,zero
    9590:	f800283a 	ret

00009594 <__swrite>:
    9594:	2880030b 	ldhu	r2,12(r5)
    9598:	defffb04 	addi	sp,sp,-20
    959c:	dcc00315 	stw	r19,12(sp)
    95a0:	dc800215 	stw	r18,8(sp)
    95a4:	dc400115 	stw	r17,4(sp)
    95a8:	dc000015 	stw	r16,0(sp)
    95ac:	dfc00415 	stw	ra,16(sp)
    95b0:	10c0400c 	andi	r3,r2,256
    95b4:	2821883a 	mov	r16,r5
    95b8:	2023883a 	mov	r17,r4
    95bc:	3025883a 	mov	r18,r6
    95c0:	3827883a 	mov	r19,r7
    95c4:	18000526 	beq	r3,zero,95dc <__swrite+0x48>
    95c8:	2940038f 	ldh	r5,14(r5)
    95cc:	01c00084 	movi	r7,2
    95d0:	000d883a 	mov	r6,zero
    95d4:	000b2cc0 	call	b2cc <_lseek_r>
    95d8:	8080030b 	ldhu	r2,12(r16)
    95dc:	8140038f 	ldh	r5,14(r16)
    95e0:	10bbffcc 	andi	r2,r2,61439
    95e4:	980f883a 	mov	r7,r19
    95e8:	900d883a 	mov	r6,r18
    95ec:	8809883a 	mov	r4,r17
    95f0:	8080030d 	sth	r2,12(r16)
    95f4:	dfc00417 	ldw	ra,16(sp)
    95f8:	dcc00317 	ldw	r19,12(sp)
    95fc:	dc800217 	ldw	r18,8(sp)
    9600:	dc400117 	ldw	r17,4(sp)
    9604:	dc000017 	ldw	r16,0(sp)
    9608:	dec00504 	addi	sp,sp,20
    960c:	000ad981 	jmpi	ad98 <_write_r>

00009610 <__sseek>:
    9610:	defffe04 	addi	sp,sp,-8
    9614:	dc000015 	stw	r16,0(sp)
    9618:	2821883a 	mov	r16,r5
    961c:	2940038f 	ldh	r5,14(r5)
    9620:	dfc00115 	stw	ra,4(sp)
    9624:	000b2cc0 	call	b2cc <_lseek_r>
    9628:	00ffffc4 	movi	r3,-1
    962c:	10c00826 	beq	r2,r3,9650 <__sseek+0x40>
    9630:	80c0030b 	ldhu	r3,12(r16)
    9634:	80801415 	stw	r2,80(r16)
    9638:	18c40014 	ori	r3,r3,4096
    963c:	80c0030d 	sth	r3,12(r16)
    9640:	dfc00117 	ldw	ra,4(sp)
    9644:	dc000017 	ldw	r16,0(sp)
    9648:	dec00204 	addi	sp,sp,8
    964c:	f800283a 	ret
    9650:	80c0030b 	ldhu	r3,12(r16)
    9654:	18fbffcc 	andi	r3,r3,61439
    9658:	80c0030d 	sth	r3,12(r16)
    965c:	dfc00117 	ldw	ra,4(sp)
    9660:	dc000017 	ldw	r16,0(sp)
    9664:	dec00204 	addi	sp,sp,8
    9668:	f800283a 	ret

0000966c <__sclose>:
    966c:	2940038f 	ldh	r5,14(r5)
    9670:	000adf81 	jmpi	adf8 <_close_r>

00009674 <strcmp>:
    9674:	2144b03a 	or	r2,r4,r5
    9678:	108000cc 	andi	r2,r2,3
    967c:	1000171e 	bne	r2,zero,96dc <strcmp+0x68>
    9680:	20800017 	ldw	r2,0(r4)
    9684:	28c00017 	ldw	r3,0(r5)
    9688:	10c0141e 	bne	r2,r3,96dc <strcmp+0x68>
    968c:	027fbff4 	movhi	r9,65279
    9690:	4a7fbfc4 	addi	r9,r9,-257
    9694:	0086303a 	nor	r3,zero,r2
    9698:	02202074 	movhi	r8,32897
    969c:	1245883a 	add	r2,r2,r9
    96a0:	42202004 	addi	r8,r8,-32640
    96a4:	10c4703a 	and	r2,r2,r3
    96a8:	1204703a 	and	r2,r2,r8
    96ac:	10000226 	beq	r2,zero,96b8 <strcmp+0x44>
    96b0:	00002306 	br	9740 <strcmp+0xcc>
    96b4:	1000221e 	bne	r2,zero,9740 <strcmp+0xcc>
    96b8:	21000104 	addi	r4,r4,4
    96bc:	20c00017 	ldw	r3,0(r4)
    96c0:	29400104 	addi	r5,r5,4
    96c4:	29800017 	ldw	r6,0(r5)
    96c8:	1a4f883a 	add	r7,r3,r9
    96cc:	00c4303a 	nor	r2,zero,r3
    96d0:	3884703a 	and	r2,r7,r2
    96d4:	1204703a 	and	r2,r2,r8
    96d8:	19bff626 	beq	r3,r6,96b4 <__alt_data_end+0xff0096b4>
    96dc:	20800003 	ldbu	r2,0(r4)
    96e0:	10c03fcc 	andi	r3,r2,255
    96e4:	18c0201c 	xori	r3,r3,128
    96e8:	18ffe004 	addi	r3,r3,-128
    96ec:	18000c26 	beq	r3,zero,9720 <strcmp+0xac>
    96f0:	29800007 	ldb	r6,0(r5)
    96f4:	19800326 	beq	r3,r6,9704 <strcmp+0x90>
    96f8:	00001306 	br	9748 <strcmp+0xd4>
    96fc:	29800007 	ldb	r6,0(r5)
    9700:	11800b1e 	bne	r2,r6,9730 <strcmp+0xbc>
    9704:	21000044 	addi	r4,r4,1
    9708:	20c00003 	ldbu	r3,0(r4)
    970c:	29400044 	addi	r5,r5,1
    9710:	18803fcc 	andi	r2,r3,255
    9714:	1080201c 	xori	r2,r2,128
    9718:	10bfe004 	addi	r2,r2,-128
    971c:	103ff71e 	bne	r2,zero,96fc <__alt_data_end+0xff0096fc>
    9720:	0007883a 	mov	r3,zero
    9724:	28800003 	ldbu	r2,0(r5)
    9728:	1885c83a 	sub	r2,r3,r2
    972c:	f800283a 	ret
    9730:	28800003 	ldbu	r2,0(r5)
    9734:	18c03fcc 	andi	r3,r3,255
    9738:	1885c83a 	sub	r2,r3,r2
    973c:	f800283a 	ret
    9740:	0005883a 	mov	r2,zero
    9744:	f800283a 	ret
    9748:	10c03fcc 	andi	r3,r2,255
    974c:	003ff506 	br	9724 <__alt_data_end+0xff009724>

00009750 <__sprint_r.part.0>:
    9750:	28801917 	ldw	r2,100(r5)
    9754:	defff604 	addi	sp,sp,-40
    9758:	dd400515 	stw	r21,20(sp)
    975c:	dfc00915 	stw	ra,36(sp)
    9760:	df000815 	stw	fp,32(sp)
    9764:	ddc00715 	stw	r23,28(sp)
    9768:	dd800615 	stw	r22,24(sp)
    976c:	dd000415 	stw	r20,16(sp)
    9770:	dcc00315 	stw	r19,12(sp)
    9774:	dc800215 	stw	r18,8(sp)
    9778:	dc400115 	stw	r17,4(sp)
    977c:	dc000015 	stw	r16,0(sp)
    9780:	1088000c 	andi	r2,r2,8192
    9784:	302b883a 	mov	r21,r6
    9788:	10002e26 	beq	r2,zero,9844 <__sprint_r.part.0+0xf4>
    978c:	30800217 	ldw	r2,8(r6)
    9790:	35800017 	ldw	r22,0(r6)
    9794:	10002926 	beq	r2,zero,983c <__sprint_r.part.0+0xec>
    9798:	2827883a 	mov	r19,r5
    979c:	2029883a 	mov	r20,r4
    97a0:	b5c00104 	addi	r23,r22,4
    97a4:	04bfffc4 	movi	r18,-1
    97a8:	bc400017 	ldw	r17,0(r23)
    97ac:	b4000017 	ldw	r16,0(r22)
    97b0:	0039883a 	mov	fp,zero
    97b4:	8822d0ba 	srli	r17,r17,2
    97b8:	8800031e 	bne	r17,zero,97c8 <__sprint_r.part.0+0x78>
    97bc:	00001806 	br	9820 <__sprint_r.part.0+0xd0>
    97c0:	84000104 	addi	r16,r16,4
    97c4:	8f001526 	beq	r17,fp,981c <__sprint_r.part.0+0xcc>
    97c8:	81400017 	ldw	r5,0(r16)
    97cc:	980d883a 	mov	r6,r19
    97d0:	a009883a 	mov	r4,r20
    97d4:	000b1780 	call	b178 <_fputwc_r>
    97d8:	e7000044 	addi	fp,fp,1
    97dc:	14bff81e 	bne	r2,r18,97c0 <__alt_data_end+0xff0097c0>
    97e0:	9005883a 	mov	r2,r18
    97e4:	a8000215 	stw	zero,8(r21)
    97e8:	a8000115 	stw	zero,4(r21)
    97ec:	dfc00917 	ldw	ra,36(sp)
    97f0:	df000817 	ldw	fp,32(sp)
    97f4:	ddc00717 	ldw	r23,28(sp)
    97f8:	dd800617 	ldw	r22,24(sp)
    97fc:	dd400517 	ldw	r21,20(sp)
    9800:	dd000417 	ldw	r20,16(sp)
    9804:	dcc00317 	ldw	r19,12(sp)
    9808:	dc800217 	ldw	r18,8(sp)
    980c:	dc400117 	ldw	r17,4(sp)
    9810:	dc000017 	ldw	r16,0(sp)
    9814:	dec00a04 	addi	sp,sp,40
    9818:	f800283a 	ret
    981c:	a8800217 	ldw	r2,8(r21)
    9820:	8c63883a 	add	r17,r17,r17
    9824:	8c63883a 	add	r17,r17,r17
    9828:	1445c83a 	sub	r2,r2,r17
    982c:	a8800215 	stw	r2,8(r21)
    9830:	b5800204 	addi	r22,r22,8
    9834:	bdc00204 	addi	r23,r23,8
    9838:	103fdb1e 	bne	r2,zero,97a8 <__alt_data_end+0xff0097a8>
    983c:	0005883a 	mov	r2,zero
    9840:	003fe806 	br	97e4 <__alt_data_end+0xff0097e4>
    9844:	00071d80 	call	71d8 <__sfvwrite_r>
    9848:	003fe606 	br	97e4 <__alt_data_end+0xff0097e4>

0000984c <__sprint_r>:
    984c:	30c00217 	ldw	r3,8(r6)
    9850:	18000126 	beq	r3,zero,9858 <__sprint_r+0xc>
    9854:	00097501 	jmpi	9750 <__sprint_r.part.0>
    9858:	30000115 	stw	zero,4(r6)
    985c:	0005883a 	mov	r2,zero
    9860:	f800283a 	ret

00009864 <___vfiprintf_internal_r>:
    9864:	deffc904 	addi	sp,sp,-220
    9868:	df003515 	stw	fp,212(sp)
    986c:	dd003115 	stw	r20,196(sp)
    9870:	dfc03615 	stw	ra,216(sp)
    9874:	ddc03415 	stw	r23,208(sp)
    9878:	dd803315 	stw	r22,204(sp)
    987c:	dd403215 	stw	r21,200(sp)
    9880:	dcc03015 	stw	r19,192(sp)
    9884:	dc802f15 	stw	r18,188(sp)
    9888:	dc402e15 	stw	r17,184(sp)
    988c:	dc002d15 	stw	r16,180(sp)
    9890:	d9002015 	stw	r4,128(sp)
    9894:	d9c02215 	stw	r7,136(sp)
    9898:	2829883a 	mov	r20,r5
    989c:	3039883a 	mov	fp,r6
    98a0:	20000226 	beq	r4,zero,98ac <___vfiprintf_internal_r+0x48>
    98a4:	20800e17 	ldw	r2,56(r4)
    98a8:	1000cf26 	beq	r2,zero,9be8 <___vfiprintf_internal_r+0x384>
    98ac:	a080030b 	ldhu	r2,12(r20)
    98b0:	10c8000c 	andi	r3,r2,8192
    98b4:	1800061e 	bne	r3,zero,98d0 <___vfiprintf_internal_r+0x6c>
    98b8:	a1001917 	ldw	r4,100(r20)
    98bc:	00f7ffc4 	movi	r3,-8193
    98c0:	10880014 	ori	r2,r2,8192
    98c4:	20c6703a 	and	r3,r4,r3
    98c8:	a080030d 	sth	r2,12(r20)
    98cc:	a0c01915 	stw	r3,100(r20)
    98d0:	10c0020c 	andi	r3,r2,8
    98d4:	1800a926 	beq	r3,zero,9b7c <___vfiprintf_internal_r+0x318>
    98d8:	a0c00417 	ldw	r3,16(r20)
    98dc:	1800a726 	beq	r3,zero,9b7c <___vfiprintf_internal_r+0x318>
    98e0:	1080068c 	andi	r2,r2,26
    98e4:	00c00284 	movi	r3,10
    98e8:	10c0ac26 	beq	r2,r3,9b9c <___vfiprintf_internal_r+0x338>
    98ec:	da801a04 	addi	r10,sp,104
    98f0:	da801e15 	stw	r10,120(sp)
    98f4:	d8801e17 	ldw	r2,120(sp)
    98f8:	da8019c4 	addi	r10,sp,103
    98fc:	05800074 	movhi	r22,1
    9900:	05c00074 	movhi	r23,1
    9904:	da801f15 	stw	r10,124(sp)
    9908:	1295c83a 	sub	r10,r2,r10
    990c:	b5849904 	addi	r22,r22,4708
    9910:	bdc49504 	addi	r23,r23,4692
    9914:	dec01a15 	stw	sp,104(sp)
    9918:	d8001c15 	stw	zero,112(sp)
    991c:	d8001b15 	stw	zero,108(sp)
    9920:	d8002615 	stw	zero,152(sp)
    9924:	d8002315 	stw	zero,140(sp)
    9928:	da802715 	stw	r10,156(sp)
    992c:	d811883a 	mov	r8,sp
    9930:	dd002115 	stw	r20,132(sp)
    9934:	e021883a 	mov	r16,fp
    9938:	80800007 	ldb	r2,0(r16)
    993c:	1003ea26 	beq	r2,zero,a8e8 <___vfiprintf_internal_r+0x1084>
    9940:	00c00944 	movi	r3,37
    9944:	8025883a 	mov	r18,r16
    9948:	10c0021e 	bne	r2,r3,9954 <___vfiprintf_internal_r+0xf0>
    994c:	00001606 	br	99a8 <___vfiprintf_internal_r+0x144>
    9950:	10c00326 	beq	r2,r3,9960 <___vfiprintf_internal_r+0xfc>
    9954:	94800044 	addi	r18,r18,1
    9958:	90800007 	ldb	r2,0(r18)
    995c:	103ffc1e 	bne	r2,zero,9950 <__alt_data_end+0xff009950>
    9960:	9423c83a 	sub	r17,r18,r16
    9964:	88001026 	beq	r17,zero,99a8 <___vfiprintf_internal_r+0x144>
    9968:	d8c01c17 	ldw	r3,112(sp)
    996c:	d8801b17 	ldw	r2,108(sp)
    9970:	44000015 	stw	r16,0(r8)
    9974:	88c7883a 	add	r3,r17,r3
    9978:	10800044 	addi	r2,r2,1
    997c:	44400115 	stw	r17,4(r8)
    9980:	d8c01c15 	stw	r3,112(sp)
    9984:	d8801b15 	stw	r2,108(sp)
    9988:	010001c4 	movi	r4,7
    998c:	2080760e 	bge	r4,r2,9b68 <___vfiprintf_internal_r+0x304>
    9990:	1803821e 	bne	r3,zero,a79c <___vfiprintf_internal_r+0xf38>
    9994:	da802317 	ldw	r10,140(sp)
    9998:	d8001b15 	stw	zero,108(sp)
    999c:	d811883a 	mov	r8,sp
    99a0:	5455883a 	add	r10,r10,r17
    99a4:	da802315 	stw	r10,140(sp)
    99a8:	90800007 	ldb	r2,0(r18)
    99ac:	10044626 	beq	r2,zero,aac8 <___vfiprintf_internal_r+0x1264>
    99b0:	90c00047 	ldb	r3,1(r18)
    99b4:	94000044 	addi	r16,r18,1
    99b8:	d8001d85 	stb	zero,118(sp)
    99bc:	0009883a 	mov	r4,zero
    99c0:	000f883a 	mov	r7,zero
    99c4:	027fffc4 	movi	r9,-1
    99c8:	0023883a 	mov	r17,zero
    99cc:	0029883a 	mov	r20,zero
    99d0:	01401604 	movi	r5,88
    99d4:	01800244 	movi	r6,9
    99d8:	03400a84 	movi	r13,42
    99dc:	03001b04 	movi	r12,108
    99e0:	84000044 	addi	r16,r16,1
    99e4:	18bff804 	addi	r2,r3,-32
    99e8:	28827336 	bltu	r5,r2,a3b8 <___vfiprintf_internal_r+0xb54>
    99ec:	100490ba 	slli	r2,r2,2
    99f0:	02800074 	movhi	r10,1
    99f4:	52a68104 	addi	r10,r10,-26108
    99f8:	1285883a 	add	r2,r2,r10
    99fc:	10800017 	ldw	r2,0(r2)
    9a00:	1000683a 	jmp	r2
    9a04:	0000a0ec 	andhi	zero,zero,643
    9a08:	0000a3b8 	rdprs	zero,zero,654
    9a0c:	0000a3b8 	rdprs	zero,zero,654
    9a10:	0000a10c 	andi	zero,zero,644
    9a14:	0000a3b8 	rdprs	zero,zero,654
    9a18:	0000a3b8 	rdprs	zero,zero,654
    9a1c:	0000a3b8 	rdprs	zero,zero,654
    9a20:	0000a3b8 	rdprs	zero,zero,654
    9a24:	0000a3b8 	rdprs	zero,zero,654
    9a28:	0000a3b8 	rdprs	zero,zero,654
    9a2c:	0000a2f4 	movhi	zero,651
    9a30:	0000a310 	cmplti	zero,zero,652
    9a34:	0000a3b8 	rdprs	zero,zero,654
    9a38:	00009bf8 	rdprs	zero,zero,623
    9a3c:	0000a320 	cmpeqi	zero,zero,652
    9a40:	0000a3b8 	rdprs	zero,zero,654
    9a44:	0000a118 	cmpnei	zero,zero,644
    9a48:	0000a124 	muli	zero,zero,644
    9a4c:	0000a124 	muli	zero,zero,644
    9a50:	0000a124 	muli	zero,zero,644
    9a54:	0000a124 	muli	zero,zero,644
    9a58:	0000a124 	muli	zero,zero,644
    9a5c:	0000a124 	muli	zero,zero,644
    9a60:	0000a124 	muli	zero,zero,644
    9a64:	0000a124 	muli	zero,zero,644
    9a68:	0000a124 	muli	zero,zero,644
    9a6c:	0000a3b8 	rdprs	zero,zero,654
    9a70:	0000a3b8 	rdprs	zero,zero,654
    9a74:	0000a3b8 	rdprs	zero,zero,654
    9a78:	0000a3b8 	rdprs	zero,zero,654
    9a7c:	0000a3b8 	rdprs	zero,zero,654
    9a80:	0000a3b8 	rdprs	zero,zero,654
    9a84:	0000a3b8 	rdprs	zero,zero,654
    9a88:	0000a3b8 	rdprs	zero,zero,654
    9a8c:	0000a3b8 	rdprs	zero,zero,654
    9a90:	0000a3b8 	rdprs	zero,zero,654
    9a94:	0000a150 	cmplti	zero,zero,645
    9a98:	0000a3b8 	rdprs	zero,zero,654
    9a9c:	0000a3b8 	rdprs	zero,zero,654
    9aa0:	0000a3b8 	rdprs	zero,zero,654
    9aa4:	0000a3b8 	rdprs	zero,zero,654
    9aa8:	0000a3b8 	rdprs	zero,zero,654
    9aac:	0000a3b8 	rdprs	zero,zero,654
    9ab0:	0000a3b8 	rdprs	zero,zero,654
    9ab4:	0000a3b8 	rdprs	zero,zero,654
    9ab8:	0000a3b8 	rdprs	zero,zero,654
    9abc:	0000a3b8 	rdprs	zero,zero,654
    9ac0:	0000a188 	cmpgei	zero,zero,646
    9ac4:	0000a3b8 	rdprs	zero,zero,654
    9ac8:	0000a3b8 	rdprs	zero,zero,654
    9acc:	0000a3b8 	rdprs	zero,zero,654
    9ad0:	0000a3b8 	rdprs	zero,zero,654
    9ad4:	0000a3b8 	rdprs	zero,zero,654
    9ad8:	0000a1e0 	cmpeqi	zero,zero,647
    9adc:	0000a3b8 	rdprs	zero,zero,654
    9ae0:	0000a3b8 	rdprs	zero,zero,654
    9ae4:	0000a250 	cmplti	zero,zero,649
    9ae8:	0000a3b8 	rdprs	zero,zero,654
    9aec:	0000a3b8 	rdprs	zero,zero,654
    9af0:	0000a3b8 	rdprs	zero,zero,654
    9af4:	0000a3b8 	rdprs	zero,zero,654
    9af8:	0000a3b8 	rdprs	zero,zero,654
    9afc:	0000a3b8 	rdprs	zero,zero,654
    9b00:	0000a3b8 	rdprs	zero,zero,654
    9b04:	0000a3b8 	rdprs	zero,zero,654
    9b08:	0000a3b8 	rdprs	zero,zero,654
    9b0c:	0000a3b8 	rdprs	zero,zero,654
    9b10:	00009ffc 	xorhi	zero,zero,639
    9b14:	0000a028 	cmpgeui	zero,zero,640
    9b18:	0000a3b8 	rdprs	zero,zero,654
    9b1c:	0000a3b8 	rdprs	zero,zero,654
    9b20:	0000a3b8 	rdprs	zero,zero,654
    9b24:	0000a360 	cmpeqi	zero,zero,653
    9b28:	0000a028 	cmpgeui	zero,zero,640
    9b2c:	0000a3b8 	rdprs	zero,zero,654
    9b30:	0000a3b8 	rdprs	zero,zero,654
    9b34:	00009ebc 	xorhi	zero,zero,634
    9b38:	0000a3b8 	rdprs	zero,zero,654
    9b3c:	00009ecc 	andi	zero,zero,635
    9b40:	00009f08 	cmpgei	zero,zero,636
    9b44:	00009c04 	movi	zero,624
    9b48:	00009eb0 	cmpltui	zero,zero,634
    9b4c:	0000a3b8 	rdprs	zero,zero,654
    9b50:	0000a28c 	andi	zero,zero,650
    9b54:	0000a3b8 	rdprs	zero,zero,654
    9b58:	0000a2e4 	muli	zero,zero,651
    9b5c:	0000a3b8 	rdprs	zero,zero,654
    9b60:	0000a3b8 	rdprs	zero,zero,654
    9b64:	00009fa8 	cmpgeui	zero,zero,638
    9b68:	42000204 	addi	r8,r8,8
    9b6c:	da802317 	ldw	r10,140(sp)
    9b70:	5455883a 	add	r10,r10,r17
    9b74:	da802315 	stw	r10,140(sp)
    9b78:	003f8b06 	br	99a8 <__alt_data_end+0xff0099a8>
    9b7c:	d9002017 	ldw	r4,128(sp)
    9b80:	a00b883a 	mov	r5,r20
    9b84:	0004d800 	call	4d80 <__swsetup_r>
    9b88:	1003b11e 	bne	r2,zero,aa50 <___vfiprintf_internal_r+0x11ec>
    9b8c:	a080030b 	ldhu	r2,12(r20)
    9b90:	00c00284 	movi	r3,10
    9b94:	1080068c 	andi	r2,r2,26
    9b98:	10ff541e 	bne	r2,r3,98ec <__alt_data_end+0xff0098ec>
    9b9c:	a080038f 	ldh	r2,14(r20)
    9ba0:	103f5216 	blt	r2,zero,98ec <__alt_data_end+0xff0098ec>
    9ba4:	d9c02217 	ldw	r7,136(sp)
    9ba8:	d9002017 	ldw	r4,128(sp)
    9bac:	e00d883a 	mov	r6,fp
    9bb0:	a00b883a 	mov	r5,r20
    9bb4:	000acdc0 	call	acdc <__sbprintf>
    9bb8:	dfc03617 	ldw	ra,216(sp)
    9bbc:	df003517 	ldw	fp,212(sp)
    9bc0:	ddc03417 	ldw	r23,208(sp)
    9bc4:	dd803317 	ldw	r22,204(sp)
    9bc8:	dd403217 	ldw	r21,200(sp)
    9bcc:	dd003117 	ldw	r20,196(sp)
    9bd0:	dcc03017 	ldw	r19,192(sp)
    9bd4:	dc802f17 	ldw	r18,188(sp)
    9bd8:	dc402e17 	ldw	r17,184(sp)
    9bdc:	dc002d17 	ldw	r16,180(sp)
    9be0:	dec03704 	addi	sp,sp,220
    9be4:	f800283a 	ret
    9be8:	0006d540 	call	6d54 <__sinit>
    9bec:	003f2f06 	br	98ac <__alt_data_end+0xff0098ac>
    9bf0:	0463c83a 	sub	r17,zero,r17
    9bf4:	d8802215 	stw	r2,136(sp)
    9bf8:	a5000114 	ori	r20,r20,4
    9bfc:	80c00007 	ldb	r3,0(r16)
    9c00:	003f7706 	br	99e0 <__alt_data_end+0xff0099e0>
    9c04:	00800c04 	movi	r2,48
    9c08:	da802217 	ldw	r10,136(sp)
    9c0c:	d8801d05 	stb	r2,116(sp)
    9c10:	00801e04 	movi	r2,120
    9c14:	d8801d45 	stb	r2,117(sp)
    9c18:	d8001d85 	stb	zero,118(sp)
    9c1c:	50c00104 	addi	r3,r10,4
    9c20:	54800017 	ldw	r18,0(r10)
    9c24:	0027883a 	mov	r19,zero
    9c28:	a0800094 	ori	r2,r20,2
    9c2c:	48030b16 	blt	r9,zero,a85c <___vfiprintf_internal_r+0xff8>
    9c30:	00bfdfc4 	movi	r2,-129
    9c34:	a096703a 	and	r11,r20,r2
    9c38:	d8c02215 	stw	r3,136(sp)
    9c3c:	5d000094 	ori	r20,r11,2
    9c40:	90032b1e 	bne	r18,zero,a8f0 <___vfiprintf_internal_r+0x108c>
    9c44:	00800074 	movhi	r2,1
    9c48:	10843404 	addi	r2,r2,4304
    9c4c:	d8802615 	stw	r2,152(sp)
    9c50:	0039883a 	mov	fp,zero
    9c54:	48017b1e 	bne	r9,zero,a244 <___vfiprintf_internal_r+0x9e0>
    9c58:	0013883a 	mov	r9,zero
    9c5c:	0027883a 	mov	r19,zero
    9c60:	dd401a04 	addi	r21,sp,104
    9c64:	4825883a 	mov	r18,r9
    9c68:	4cc0010e 	bge	r9,r19,9c70 <___vfiprintf_internal_r+0x40c>
    9c6c:	9825883a 	mov	r18,r19
    9c70:	e7003fcc 	andi	fp,fp,255
    9c74:	e700201c 	xori	fp,fp,128
    9c78:	e73fe004 	addi	fp,fp,-128
    9c7c:	e0000126 	beq	fp,zero,9c84 <___vfiprintf_internal_r+0x420>
    9c80:	94800044 	addi	r18,r18,1
    9c84:	a380008c 	andi	r14,r20,2
    9c88:	70000126 	beq	r14,zero,9c90 <___vfiprintf_internal_r+0x42c>
    9c8c:	94800084 	addi	r18,r18,2
    9c90:	a700210c 	andi	fp,r20,132
    9c94:	e001df1e 	bne	fp,zero,a414 <___vfiprintf_internal_r+0xbb0>
    9c98:	8c87c83a 	sub	r3,r17,r18
    9c9c:	00c1dd0e 	bge	zero,r3,a414 <___vfiprintf_internal_r+0xbb0>
    9ca0:	01c00404 	movi	r7,16
    9ca4:	d8801c17 	ldw	r2,112(sp)
    9ca8:	38c3ad0e 	bge	r7,r3,ab60 <___vfiprintf_internal_r+0x12fc>
    9cac:	02800074 	movhi	r10,1
    9cb0:	52849904 	addi	r10,r10,4708
    9cb4:	dc002915 	stw	r16,164(sp)
    9cb8:	d9801b17 	ldw	r6,108(sp)
    9cbc:	da802415 	stw	r10,144(sp)
    9cc0:	03c001c4 	movi	r15,7
    9cc4:	da402515 	stw	r9,148(sp)
    9cc8:	db802815 	stw	r14,160(sp)
    9ccc:	1821883a 	mov	r16,r3
    9cd0:	00000506 	br	9ce8 <___vfiprintf_internal_r+0x484>
    9cd4:	31400084 	addi	r5,r6,2
    9cd8:	42000204 	addi	r8,r8,8
    9cdc:	200d883a 	mov	r6,r4
    9ce0:	843ffc04 	addi	r16,r16,-16
    9ce4:	3c000d0e 	bge	r7,r16,9d1c <___vfiprintf_internal_r+0x4b8>
    9ce8:	10800404 	addi	r2,r2,16
    9cec:	31000044 	addi	r4,r6,1
    9cf0:	45800015 	stw	r22,0(r8)
    9cf4:	41c00115 	stw	r7,4(r8)
    9cf8:	d8801c15 	stw	r2,112(sp)
    9cfc:	d9001b15 	stw	r4,108(sp)
    9d00:	793ff40e 	bge	r15,r4,9cd4 <__alt_data_end+0xff009cd4>
    9d04:	1001b51e 	bne	r2,zero,a3dc <___vfiprintf_internal_r+0xb78>
    9d08:	843ffc04 	addi	r16,r16,-16
    9d0c:	000d883a 	mov	r6,zero
    9d10:	01400044 	movi	r5,1
    9d14:	d811883a 	mov	r8,sp
    9d18:	3c3ff316 	blt	r7,r16,9ce8 <__alt_data_end+0xff009ce8>
    9d1c:	8007883a 	mov	r3,r16
    9d20:	da402517 	ldw	r9,148(sp)
    9d24:	db802817 	ldw	r14,160(sp)
    9d28:	dc002917 	ldw	r16,164(sp)
    9d2c:	da802417 	ldw	r10,144(sp)
    9d30:	1885883a 	add	r2,r3,r2
    9d34:	40c00115 	stw	r3,4(r8)
    9d38:	42800015 	stw	r10,0(r8)
    9d3c:	d8801c15 	stw	r2,112(sp)
    9d40:	d9401b15 	stw	r5,108(sp)
    9d44:	00c001c4 	movi	r3,7
    9d48:	19426016 	blt	r3,r5,a6cc <___vfiprintf_internal_r+0xe68>
    9d4c:	d8c01d87 	ldb	r3,118(sp)
    9d50:	42000204 	addi	r8,r8,8
    9d54:	29000044 	addi	r4,r5,1
    9d58:	1801b31e 	bne	r3,zero,a428 <___vfiprintf_internal_r+0xbc4>
    9d5c:	7001c026 	beq	r14,zero,a460 <___vfiprintf_internal_r+0xbfc>
    9d60:	d8c01d04 	addi	r3,sp,116
    9d64:	10800084 	addi	r2,r2,2
    9d68:	40c00015 	stw	r3,0(r8)
    9d6c:	00c00084 	movi	r3,2
    9d70:	40c00115 	stw	r3,4(r8)
    9d74:	d8801c15 	stw	r2,112(sp)
    9d78:	d9001b15 	stw	r4,108(sp)
    9d7c:	00c001c4 	movi	r3,7
    9d80:	1902650e 	bge	r3,r4,a718 <___vfiprintf_internal_r+0xeb4>
    9d84:	10029a1e 	bne	r2,zero,a7f0 <___vfiprintf_internal_r+0xf8c>
    9d88:	00c02004 	movi	r3,128
    9d8c:	01000044 	movi	r4,1
    9d90:	000b883a 	mov	r5,zero
    9d94:	d811883a 	mov	r8,sp
    9d98:	e0c1b31e 	bne	fp,r3,a468 <___vfiprintf_internal_r+0xc04>
    9d9c:	8cb9c83a 	sub	fp,r17,r18
    9da0:	0701b10e 	bge	zero,fp,a468 <___vfiprintf_internal_r+0xc04>
    9da4:	01c00404 	movi	r7,16
    9da8:	3f03890e 	bge	r7,fp,abd0 <___vfiprintf_internal_r+0x136c>
    9dac:	00c00074 	movhi	r3,1
    9db0:	18c49504 	addi	r3,r3,4692
    9db4:	d8c02415 	stw	r3,144(sp)
    9db8:	8007883a 	mov	r3,r16
    9dbc:	034001c4 	movi	r13,7
    9dc0:	e021883a 	mov	r16,fp
    9dc4:	da402515 	stw	r9,148(sp)
    9dc8:	1839883a 	mov	fp,r3
    9dcc:	00000506 	br	9de4 <___vfiprintf_internal_r+0x580>
    9dd0:	29800084 	addi	r6,r5,2
    9dd4:	42000204 	addi	r8,r8,8
    9dd8:	180b883a 	mov	r5,r3
    9ddc:	843ffc04 	addi	r16,r16,-16
    9de0:	3c000d0e 	bge	r7,r16,9e18 <___vfiprintf_internal_r+0x5b4>
    9de4:	10800404 	addi	r2,r2,16
    9de8:	28c00044 	addi	r3,r5,1
    9dec:	45c00015 	stw	r23,0(r8)
    9df0:	41c00115 	stw	r7,4(r8)
    9df4:	d8801c15 	stw	r2,112(sp)
    9df8:	d8c01b15 	stw	r3,108(sp)
    9dfc:	68fff40e 	bge	r13,r3,9dd0 <__alt_data_end+0xff009dd0>
    9e00:	1002241e 	bne	r2,zero,a694 <___vfiprintf_internal_r+0xe30>
    9e04:	843ffc04 	addi	r16,r16,-16
    9e08:	01800044 	movi	r6,1
    9e0c:	000b883a 	mov	r5,zero
    9e10:	d811883a 	mov	r8,sp
    9e14:	3c3ff316 	blt	r7,r16,9de4 <__alt_data_end+0xff009de4>
    9e18:	da402517 	ldw	r9,148(sp)
    9e1c:	e007883a 	mov	r3,fp
    9e20:	8039883a 	mov	fp,r16
    9e24:	1821883a 	mov	r16,r3
    9e28:	d8c02417 	ldw	r3,144(sp)
    9e2c:	1705883a 	add	r2,r2,fp
    9e30:	47000115 	stw	fp,4(r8)
    9e34:	40c00015 	stw	r3,0(r8)
    9e38:	d8801c15 	stw	r2,112(sp)
    9e3c:	d9801b15 	stw	r6,108(sp)
    9e40:	00c001c4 	movi	r3,7
    9e44:	19827616 	blt	r3,r6,a820 <___vfiprintf_internal_r+0xfbc>
    9e48:	4cf9c83a 	sub	fp,r9,r19
    9e4c:	42000204 	addi	r8,r8,8
    9e50:	31000044 	addi	r4,r6,1
    9e54:	300b883a 	mov	r5,r6
    9e58:	07018516 	blt	zero,fp,a470 <___vfiprintf_internal_r+0xc0c>
    9e5c:	9885883a 	add	r2,r19,r2
    9e60:	45400015 	stw	r21,0(r8)
    9e64:	44c00115 	stw	r19,4(r8)
    9e68:	d8801c15 	stw	r2,112(sp)
    9e6c:	d9001b15 	stw	r4,108(sp)
    9e70:	00c001c4 	movi	r3,7
    9e74:	1901dd0e 	bge	r3,r4,a5ec <___vfiprintf_internal_r+0xd88>
    9e78:	1002401e 	bne	r2,zero,a77c <___vfiprintf_internal_r+0xf18>
    9e7c:	d8001b15 	stw	zero,108(sp)
    9e80:	a2c0010c 	andi	r11,r20,4
    9e84:	58000226 	beq	r11,zero,9e90 <___vfiprintf_internal_r+0x62c>
    9e88:	8ca7c83a 	sub	r19,r17,r18
    9e8c:	04c2f216 	blt	zero,r19,aa58 <___vfiprintf_internal_r+0x11f4>
    9e90:	8c80010e 	bge	r17,r18,9e98 <___vfiprintf_internal_r+0x634>
    9e94:	9023883a 	mov	r17,r18
    9e98:	da802317 	ldw	r10,140(sp)
    9e9c:	5455883a 	add	r10,r10,r17
    9ea0:	da802315 	stw	r10,140(sp)
    9ea4:	d8001b15 	stw	zero,108(sp)
    9ea8:	d811883a 	mov	r8,sp
    9eac:	003ea206 	br	9938 <__alt_data_end+0xff009938>
    9eb0:	a5000814 	ori	r20,r20,32
    9eb4:	80c00007 	ldb	r3,0(r16)
    9eb8:	003ec906 	br	99e0 <__alt_data_end+0xff0099e0>
    9ebc:	80c00007 	ldb	r3,0(r16)
    9ec0:	1b030926 	beq	r3,r12,aae8 <___vfiprintf_internal_r+0x1284>
    9ec4:	a5000414 	ori	r20,r20,16
    9ec8:	003ec506 	br	99e0 <__alt_data_end+0xff0099e0>
    9ecc:	21003fcc 	andi	r4,r4,255
    9ed0:	20035e1e 	bne	r4,zero,ac4c <___vfiprintf_internal_r+0x13e8>
    9ed4:	a080080c 	andi	r2,r20,32
    9ed8:	1002a526 	beq	r2,zero,a970 <___vfiprintf_internal_r+0x110c>
    9edc:	da802217 	ldw	r10,136(sp)
    9ee0:	50800017 	ldw	r2,0(r10)
    9ee4:	da802317 	ldw	r10,140(sp)
    9ee8:	5007d7fa 	srai	r3,r10,31
    9eec:	da802217 	ldw	r10,136(sp)
    9ef0:	10c00115 	stw	r3,4(r2)
    9ef4:	52800104 	addi	r10,r10,4
    9ef8:	da802215 	stw	r10,136(sp)
    9efc:	da802317 	ldw	r10,140(sp)
    9f00:	12800015 	stw	r10,0(r2)
    9f04:	003e8c06 	br	9938 <__alt_data_end+0xff009938>
    9f08:	21003fcc 	andi	r4,r4,255
    9f0c:	2003511e 	bne	r4,zero,ac54 <___vfiprintf_internal_r+0x13f0>
    9f10:	a080080c 	andi	r2,r20,32
    9f14:	1000a126 	beq	r2,zero,a19c <___vfiprintf_internal_r+0x938>
    9f18:	da802217 	ldw	r10,136(sp)
    9f1c:	d8001d85 	stb	zero,118(sp)
    9f20:	50800204 	addi	r2,r10,8
    9f24:	54800017 	ldw	r18,0(r10)
    9f28:	54c00117 	ldw	r19,4(r10)
    9f2c:	4802b416 	blt	r9,zero,aa00 <___vfiprintf_internal_r+0x119c>
    9f30:	013fdfc4 	movi	r4,-129
    9f34:	94c6b03a 	or	r3,r18,r19
    9f38:	d8802215 	stw	r2,136(sp)
    9f3c:	a128703a 	and	r20,r20,r4
    9f40:	1800a226 	beq	r3,zero,a1cc <___vfiprintf_internal_r+0x968>
    9f44:	0039883a 	mov	fp,zero
    9f48:	dd401a04 	addi	r21,sp,104
    9f4c:	9006d0fa 	srli	r3,r18,3
    9f50:	9808977a 	slli	r4,r19,29
    9f54:	9826d0fa 	srli	r19,r19,3
    9f58:	948001cc 	andi	r18,r18,7
    9f5c:	90800c04 	addi	r2,r18,48
    9f60:	ad7fffc4 	addi	r21,r21,-1
    9f64:	20e4b03a 	or	r18,r4,r3
    9f68:	a8800005 	stb	r2,0(r21)
    9f6c:	94c6b03a 	or	r3,r18,r19
    9f70:	183ff61e 	bne	r3,zero,9f4c <__alt_data_end+0xff009f4c>
    9f74:	a0c0004c 	andi	r3,r20,1
    9f78:	18005926 	beq	r3,zero,a0e0 <___vfiprintf_internal_r+0x87c>
    9f7c:	10803fcc 	andi	r2,r2,255
    9f80:	1080201c 	xori	r2,r2,128
    9f84:	10bfe004 	addi	r2,r2,-128
    9f88:	00c00c04 	movi	r3,48
    9f8c:	10c05426 	beq	r2,r3,a0e0 <___vfiprintf_internal_r+0x87c>
    9f90:	da801e17 	ldw	r10,120(sp)
    9f94:	a8bfffc4 	addi	r2,r21,-1
    9f98:	a8ffffc5 	stb	r3,-1(r21)
    9f9c:	50a7c83a 	sub	r19,r10,r2
    9fa0:	102b883a 	mov	r21,r2
    9fa4:	003f2f06 	br	9c64 <__alt_data_end+0xff009c64>
    9fa8:	21003fcc 	andi	r4,r4,255
    9fac:	2003421e 	bne	r4,zero,acb8 <___vfiprintf_internal_r+0x1454>
    9fb0:	00800074 	movhi	r2,1
    9fb4:	10843404 	addi	r2,r2,4304
    9fb8:	d8802615 	stw	r2,152(sp)
    9fbc:	a080080c 	andi	r2,r20,32
    9fc0:	1000aa26 	beq	r2,zero,a26c <___vfiprintf_internal_r+0xa08>
    9fc4:	da802217 	ldw	r10,136(sp)
    9fc8:	54800017 	ldw	r18,0(r10)
    9fcc:	54c00117 	ldw	r19,4(r10)
    9fd0:	52800204 	addi	r10,r10,8
    9fd4:	da802215 	stw	r10,136(sp)
    9fd8:	a080004c 	andi	r2,r20,1
    9fdc:	1001d226 	beq	r2,zero,a728 <___vfiprintf_internal_r+0xec4>
    9fe0:	94c4b03a 	or	r2,r18,r19
    9fe4:	1002351e 	bne	r2,zero,a8bc <___vfiprintf_internal_r+0x1058>
    9fe8:	d8001d85 	stb	zero,118(sp)
    9fec:	48022216 	blt	r9,zero,a878 <___vfiprintf_internal_r+0x1014>
    9ff0:	00bfdfc4 	movi	r2,-129
    9ff4:	a0a8703a 	and	r20,r20,r2
    9ff8:	003f1506 	br	9c50 <__alt_data_end+0xff009c50>
    9ffc:	da802217 	ldw	r10,136(sp)
    a000:	04800044 	movi	r18,1
    a004:	d8001d85 	stb	zero,118(sp)
    a008:	50800017 	ldw	r2,0(r10)
    a00c:	52800104 	addi	r10,r10,4
    a010:	da802215 	stw	r10,136(sp)
    a014:	d8801005 	stb	r2,64(sp)
    a018:	9027883a 	mov	r19,r18
    a01c:	dd401004 	addi	r21,sp,64
    a020:	0013883a 	mov	r9,zero
    a024:	003f1706 	br	9c84 <__alt_data_end+0xff009c84>
    a028:	21003fcc 	andi	r4,r4,255
    a02c:	2003201e 	bne	r4,zero,acb0 <___vfiprintf_internal_r+0x144c>
    a030:	a080080c 	andi	r2,r20,32
    a034:	10004b26 	beq	r2,zero,a164 <___vfiprintf_internal_r+0x900>
    a038:	da802217 	ldw	r10,136(sp)
    a03c:	50800117 	ldw	r2,4(r10)
    a040:	54800017 	ldw	r18,0(r10)
    a044:	52800204 	addi	r10,r10,8
    a048:	da802215 	stw	r10,136(sp)
    a04c:	1027883a 	mov	r19,r2
    a050:	10022c16 	blt	r2,zero,a904 <___vfiprintf_internal_r+0x10a0>
    a054:	df001d83 	ldbu	fp,118(sp)
    a058:	48007216 	blt	r9,zero,a224 <___vfiprintf_internal_r+0x9c0>
    a05c:	00ffdfc4 	movi	r3,-129
    a060:	94c4b03a 	or	r2,r18,r19
    a064:	a0e8703a 	and	r20,r20,r3
    a068:	1000cc26 	beq	r2,zero,a39c <___vfiprintf_internal_r+0xb38>
    a06c:	98021026 	beq	r19,zero,a8b0 <___vfiprintf_internal_r+0x104c>
    a070:	dc402415 	stw	r17,144(sp)
    a074:	dc002515 	stw	r16,148(sp)
    a078:	9823883a 	mov	r17,r19
    a07c:	9021883a 	mov	r16,r18
    a080:	dd401a04 	addi	r21,sp,104
    a084:	4825883a 	mov	r18,r9
    a088:	4027883a 	mov	r19,r8
    a08c:	8009883a 	mov	r4,r16
    a090:	880b883a 	mov	r5,r17
    a094:	01800284 	movi	r6,10
    a098:	000f883a 	mov	r7,zero
    a09c:	000bc440 	call	bc44 <__umoddi3>
    a0a0:	10800c04 	addi	r2,r2,48
    a0a4:	ad7fffc4 	addi	r21,r21,-1
    a0a8:	8009883a 	mov	r4,r16
    a0ac:	880b883a 	mov	r5,r17
    a0b0:	a8800005 	stb	r2,0(r21)
    a0b4:	01800284 	movi	r6,10
    a0b8:	000f883a 	mov	r7,zero
    a0bc:	000b6cc0 	call	b6cc <__udivdi3>
    a0c0:	1021883a 	mov	r16,r2
    a0c4:	10c4b03a 	or	r2,r2,r3
    a0c8:	1823883a 	mov	r17,r3
    a0cc:	103fef1e 	bne	r2,zero,a08c <__alt_data_end+0xff00a08c>
    a0d0:	dc402417 	ldw	r17,144(sp)
    a0d4:	dc002517 	ldw	r16,148(sp)
    a0d8:	9013883a 	mov	r9,r18
    a0dc:	9811883a 	mov	r8,r19
    a0e0:	da801e17 	ldw	r10,120(sp)
    a0e4:	5567c83a 	sub	r19,r10,r21
    a0e8:	003ede06 	br	9c64 <__alt_data_end+0xff009c64>
    a0ec:	38803fcc 	andi	r2,r7,255
    a0f0:	1080201c 	xori	r2,r2,128
    a0f4:	10bfe004 	addi	r2,r2,-128
    a0f8:	1002371e 	bne	r2,zero,a9d8 <___vfiprintf_internal_r+0x1174>
    a0fc:	01000044 	movi	r4,1
    a100:	01c00804 	movi	r7,32
    a104:	80c00007 	ldb	r3,0(r16)
    a108:	003e3506 	br	99e0 <__alt_data_end+0xff0099e0>
    a10c:	a5000054 	ori	r20,r20,1
    a110:	80c00007 	ldb	r3,0(r16)
    a114:	003e3206 	br	99e0 <__alt_data_end+0xff0099e0>
    a118:	a5002014 	ori	r20,r20,128
    a11c:	80c00007 	ldb	r3,0(r16)
    a120:	003e2f06 	br	99e0 <__alt_data_end+0xff0099e0>
    a124:	8015883a 	mov	r10,r16
    a128:	0023883a 	mov	r17,zero
    a12c:	18bff404 	addi	r2,r3,-48
    a130:	50c00007 	ldb	r3,0(r10)
    a134:	8c4002a4 	muli	r17,r17,10
    a138:	84000044 	addi	r16,r16,1
    a13c:	8015883a 	mov	r10,r16
    a140:	1463883a 	add	r17,r2,r17
    a144:	18bff404 	addi	r2,r3,-48
    a148:	30bff92e 	bgeu	r6,r2,a130 <__alt_data_end+0xff00a130>
    a14c:	003e2506 	br	99e4 <__alt_data_end+0xff0099e4>
    a150:	21003fcc 	andi	r4,r4,255
    a154:	2002d41e 	bne	r4,zero,aca8 <___vfiprintf_internal_r+0x1444>
    a158:	a5000414 	ori	r20,r20,16
    a15c:	a080080c 	andi	r2,r20,32
    a160:	103fb51e 	bne	r2,zero,a038 <__alt_data_end+0xff00a038>
    a164:	a080040c 	andi	r2,r20,16
    a168:	1001f826 	beq	r2,zero,a94c <___vfiprintf_internal_r+0x10e8>
    a16c:	da802217 	ldw	r10,136(sp)
    a170:	54800017 	ldw	r18,0(r10)
    a174:	52800104 	addi	r10,r10,4
    a178:	da802215 	stw	r10,136(sp)
    a17c:	9027d7fa 	srai	r19,r18,31
    a180:	9805883a 	mov	r2,r19
    a184:	003fb206 	br	a050 <__alt_data_end+0xff00a050>
    a188:	21003fcc 	andi	r4,r4,255
    a18c:	2002c41e 	bne	r4,zero,aca0 <___vfiprintf_internal_r+0x143c>
    a190:	a5000414 	ori	r20,r20,16
    a194:	a080080c 	andi	r2,r20,32
    a198:	103f5f1e 	bne	r2,zero,9f18 <__alt_data_end+0xff009f18>
    a19c:	a080040c 	andi	r2,r20,16
    a1a0:	10020f26 	beq	r2,zero,a9e0 <___vfiprintf_internal_r+0x117c>
    a1a4:	da802217 	ldw	r10,136(sp)
    a1a8:	d8001d85 	stb	zero,118(sp)
    a1ac:	0027883a 	mov	r19,zero
    a1b0:	50800104 	addi	r2,r10,4
    a1b4:	54800017 	ldw	r18,0(r10)
    a1b8:	48021116 	blt	r9,zero,aa00 <___vfiprintf_internal_r+0x119c>
    a1bc:	00ffdfc4 	movi	r3,-129
    a1c0:	d8802215 	stw	r2,136(sp)
    a1c4:	a0e8703a 	and	r20,r20,r3
    a1c8:	903f5e1e 	bne	r18,zero,9f44 <__alt_data_end+0xff009f44>
    a1cc:	0039883a 	mov	fp,zero
    a1d0:	4802a626 	beq	r9,zero,ac6c <___vfiprintf_internal_r+0x1408>
    a1d4:	0025883a 	mov	r18,zero
    a1d8:	0027883a 	mov	r19,zero
    a1dc:	003f5a06 	br	9f48 <__alt_data_end+0xff009f48>
    a1e0:	21003fcc 	andi	r4,r4,255
    a1e4:	20029f1e 	bne	r4,zero,ac64 <___vfiprintf_internal_r+0x1400>
    a1e8:	a5000414 	ori	r20,r20,16
    a1ec:	a080080c 	andi	r2,r20,32
    a1f0:	10005e1e 	bne	r2,zero,a36c <___vfiprintf_internal_r+0xb08>
    a1f4:	a080040c 	andi	r2,r20,16
    a1f8:	1001a21e 	bne	r2,zero,a884 <___vfiprintf_internal_r+0x1020>
    a1fc:	a080100c 	andi	r2,r20,64
    a200:	d8001d85 	stb	zero,118(sp)
    a204:	da802217 	ldw	r10,136(sp)
    a208:	1002231e 	bne	r2,zero,aa98 <___vfiprintf_internal_r+0x1234>
    a20c:	50800104 	addi	r2,r10,4
    a210:	54800017 	ldw	r18,0(r10)
    a214:	0027883a 	mov	r19,zero
    a218:	4801a00e 	bge	r9,zero,a89c <___vfiprintf_internal_r+0x1038>
    a21c:	d8802215 	stw	r2,136(sp)
    a220:	0039883a 	mov	fp,zero
    a224:	94c4b03a 	or	r2,r18,r19
    a228:	103f901e 	bne	r2,zero,a06c <__alt_data_end+0xff00a06c>
    a22c:	00800044 	movi	r2,1
    a230:	10803fcc 	andi	r2,r2,255
    a234:	00c00044 	movi	r3,1
    a238:	10c05926 	beq	r2,r3,a3a0 <___vfiprintf_internal_r+0xb3c>
    a23c:	00c00084 	movi	r3,2
    a240:	10ffe41e 	bne	r2,r3,a1d4 <__alt_data_end+0xff00a1d4>
    a244:	0025883a 	mov	r18,zero
    a248:	0027883a 	mov	r19,zero
    a24c:	00013d06 	br	a744 <___vfiprintf_internal_r+0xee0>
    a250:	21003fcc 	andi	r4,r4,255
    a254:	2002811e 	bne	r4,zero,ac5c <___vfiprintf_internal_r+0x13f8>
    a258:	00800074 	movhi	r2,1
    a25c:	10842f04 	addi	r2,r2,4284
    a260:	d8802615 	stw	r2,152(sp)
    a264:	a080080c 	andi	r2,r20,32
    a268:	103f561e 	bne	r2,zero,9fc4 <__alt_data_end+0xff009fc4>
    a26c:	a080040c 	andi	r2,r20,16
    a270:	1001d126 	beq	r2,zero,a9b8 <___vfiprintf_internal_r+0x1154>
    a274:	da802217 	ldw	r10,136(sp)
    a278:	0027883a 	mov	r19,zero
    a27c:	54800017 	ldw	r18,0(r10)
    a280:	52800104 	addi	r10,r10,4
    a284:	da802215 	stw	r10,136(sp)
    a288:	003f5306 	br	9fd8 <__alt_data_end+0xff009fd8>
    a28c:	da802217 	ldw	r10,136(sp)
    a290:	d8001d85 	stb	zero,118(sp)
    a294:	55400017 	ldw	r21,0(r10)
    a298:	50c00104 	addi	r3,r10,4
    a29c:	a8024226 	beq	r21,zero,aba8 <___vfiprintf_internal_r+0x1344>
    a2a0:	48021816 	blt	r9,zero,ab04 <___vfiprintf_internal_r+0x12a0>
    a2a4:	480d883a 	mov	r6,r9
    a2a8:	000b883a 	mov	r5,zero
    a2ac:	a809883a 	mov	r4,r21
    a2b0:	d8c02a15 	stw	r3,168(sp)
    a2b4:	da002b15 	stw	r8,172(sp)
    a2b8:	da402c15 	stw	r9,176(sp)
    a2bc:	0007ab40 	call	7ab4 <memchr>
    a2c0:	d8c02a17 	ldw	r3,168(sp)
    a2c4:	da002b17 	ldw	r8,172(sp)
    a2c8:	da402c17 	ldw	r9,176(sp)
    a2cc:	10024826 	beq	r2,zero,abf0 <___vfiprintf_internal_r+0x138c>
    a2d0:	1567c83a 	sub	r19,r2,r21
    a2d4:	df001d83 	ldbu	fp,118(sp)
    a2d8:	d8c02215 	stw	r3,136(sp)
    a2dc:	0013883a 	mov	r9,zero
    a2e0:	003e6006 	br	9c64 <__alt_data_end+0xff009c64>
    a2e4:	21003fcc 	andi	r4,r4,255
    a2e8:	203fc026 	beq	r4,zero,a1ec <__alt_data_end+0xff00a1ec>
    a2ec:	d9c01d85 	stb	r7,118(sp)
    a2f0:	003fbe06 	br	a1ec <__alt_data_end+0xff00a1ec>
    a2f4:	da802217 	ldw	r10,136(sp)
    a2f8:	54400017 	ldw	r17,0(r10)
    a2fc:	50800104 	addi	r2,r10,4
    a300:	883e3b16 	blt	r17,zero,9bf0 <__alt_data_end+0xff009bf0>
    a304:	d8802215 	stw	r2,136(sp)
    a308:	80c00007 	ldb	r3,0(r16)
    a30c:	003db406 	br	99e0 <__alt_data_end+0xff0099e0>
    a310:	01000044 	movi	r4,1
    a314:	01c00ac4 	movi	r7,43
    a318:	80c00007 	ldb	r3,0(r16)
    a31c:	003db006 	br	99e0 <__alt_data_end+0xff0099e0>
    a320:	80c00007 	ldb	r3,0(r16)
    a324:	82800044 	addi	r10,r16,1
    a328:	1b423c26 	beq	r3,r13,ac1c <___vfiprintf_internal_r+0x13b8>
    a32c:	18bff404 	addi	r2,r3,-48
    a330:	0013883a 	mov	r9,zero
    a334:	30822b36 	bltu	r6,r2,abe4 <___vfiprintf_internal_r+0x1380>
    a338:	50c00007 	ldb	r3,0(r10)
    a33c:	4a4002a4 	muli	r9,r9,10
    a340:	54000044 	addi	r16,r10,1
    a344:	8015883a 	mov	r10,r16
    a348:	4893883a 	add	r9,r9,r2
    a34c:	18bff404 	addi	r2,r3,-48
    a350:	30bff92e 	bgeu	r6,r2,a338 <__alt_data_end+0xff00a338>
    a354:	483da30e 	bge	r9,zero,99e4 <__alt_data_end+0xff0099e4>
    a358:	027fffc4 	movi	r9,-1
    a35c:	003da106 	br	99e4 <__alt_data_end+0xff0099e4>
    a360:	a5001014 	ori	r20,r20,64
    a364:	80c00007 	ldb	r3,0(r16)
    a368:	003d9d06 	br	99e0 <__alt_data_end+0xff0099e0>
    a36c:	da802217 	ldw	r10,136(sp)
    a370:	d8001d85 	stb	zero,118(sp)
    a374:	50c00204 	addi	r3,r10,8
    a378:	54800017 	ldw	r18,0(r10)
    a37c:	54c00117 	ldw	r19,4(r10)
    a380:	4801ca16 	blt	r9,zero,aaac <___vfiprintf_internal_r+0x1248>
    a384:	013fdfc4 	movi	r4,-129
    a388:	94c4b03a 	or	r2,r18,r19
    a38c:	d8c02215 	stw	r3,136(sp)
    a390:	a128703a 	and	r20,r20,r4
    a394:	0039883a 	mov	fp,zero
    a398:	103f341e 	bne	r2,zero,a06c <__alt_data_end+0xff00a06c>
    a39c:	483e2e26 	beq	r9,zero,9c58 <__alt_data_end+0xff009c58>
    a3a0:	0025883a 	mov	r18,zero
    a3a4:	94800c04 	addi	r18,r18,48
    a3a8:	dc8019c5 	stb	r18,103(sp)
    a3ac:	dcc02717 	ldw	r19,156(sp)
    a3b0:	dd4019c4 	addi	r21,sp,103
    a3b4:	003e2b06 	br	9c64 <__alt_data_end+0xff009c64>
    a3b8:	21003fcc 	andi	r4,r4,255
    a3bc:	2002361e 	bne	r4,zero,ac98 <___vfiprintf_internal_r+0x1434>
    a3c0:	1801c126 	beq	r3,zero,aac8 <___vfiprintf_internal_r+0x1264>
    a3c4:	04800044 	movi	r18,1
    a3c8:	d8c01005 	stb	r3,64(sp)
    a3cc:	d8001d85 	stb	zero,118(sp)
    a3d0:	9027883a 	mov	r19,r18
    a3d4:	dd401004 	addi	r21,sp,64
    a3d8:	003f1106 	br	a020 <__alt_data_end+0xff00a020>
    a3dc:	d9402117 	ldw	r5,132(sp)
    a3e0:	d9002017 	ldw	r4,128(sp)
    a3e4:	d9801a04 	addi	r6,sp,104
    a3e8:	d9c02b15 	stw	r7,172(sp)
    a3ec:	dbc02a15 	stw	r15,168(sp)
    a3f0:	00097500 	call	9750 <__sprint_r.part.0>
    a3f4:	d9c02b17 	ldw	r7,172(sp)
    a3f8:	dbc02a17 	ldw	r15,168(sp)
    a3fc:	10006d1e 	bne	r2,zero,a5b4 <___vfiprintf_internal_r+0xd50>
    a400:	d9801b17 	ldw	r6,108(sp)
    a404:	d8801c17 	ldw	r2,112(sp)
    a408:	d811883a 	mov	r8,sp
    a40c:	31400044 	addi	r5,r6,1
    a410:	003e3306 	br	9ce0 <__alt_data_end+0xff009ce0>
    a414:	d9401b17 	ldw	r5,108(sp)
    a418:	d8801c17 	ldw	r2,112(sp)
    a41c:	29000044 	addi	r4,r5,1
    a420:	d8c01d87 	ldb	r3,118(sp)
    a424:	183e4d26 	beq	r3,zero,9d5c <__alt_data_end+0xff009d5c>
    a428:	00c00044 	movi	r3,1
    a42c:	d9401d84 	addi	r5,sp,118
    a430:	10c5883a 	add	r2,r2,r3
    a434:	41400015 	stw	r5,0(r8)
    a438:	40c00115 	stw	r3,4(r8)
    a43c:	d8801c15 	stw	r2,112(sp)
    a440:	d9001b15 	stw	r4,108(sp)
    a444:	014001c4 	movi	r5,7
    a448:	2900a90e 	bge	r5,r4,a6f0 <___vfiprintf_internal_r+0xe8c>
    a44c:	1000da1e 	bne	r2,zero,a7b8 <___vfiprintf_internal_r+0xf54>
    a450:	7000ab1e 	bne	r14,zero,a700 <___vfiprintf_internal_r+0xe9c>
    a454:	000b883a 	mov	r5,zero
    a458:	1809883a 	mov	r4,r3
    a45c:	d811883a 	mov	r8,sp
    a460:	00c02004 	movi	r3,128
    a464:	e0fe4d26 	beq	fp,r3,9d9c <__alt_data_end+0xff009d9c>
    a468:	4cf9c83a 	sub	fp,r9,r19
    a46c:	073e7b0e 	bge	zero,fp,9e5c <__alt_data_end+0xff009e5c>
    a470:	01c00404 	movi	r7,16
    a474:	3f01900e 	bge	r7,fp,aab8 <___vfiprintf_internal_r+0x1254>
    a478:	00c00074 	movhi	r3,1
    a47c:	18c49504 	addi	r3,r3,4692
    a480:	d8c02415 	stw	r3,144(sp)
    a484:	034001c4 	movi	r13,7
    a488:	00000506 	br	a4a0 <___vfiprintf_internal_r+0xc3c>
    a48c:	29000084 	addi	r4,r5,2
    a490:	42000204 	addi	r8,r8,8
    a494:	180b883a 	mov	r5,r3
    a498:	e73ffc04 	addi	fp,fp,-16
    a49c:	3f000d0e 	bge	r7,fp,a4d4 <___vfiprintf_internal_r+0xc70>
    a4a0:	10800404 	addi	r2,r2,16
    a4a4:	28c00044 	addi	r3,r5,1
    a4a8:	45c00015 	stw	r23,0(r8)
    a4ac:	41c00115 	stw	r7,4(r8)
    a4b0:	d8801c15 	stw	r2,112(sp)
    a4b4:	d8c01b15 	stw	r3,108(sp)
    a4b8:	68fff40e 	bge	r13,r3,a48c <__alt_data_end+0xff00a48c>
    a4bc:	1000101e 	bne	r2,zero,a500 <___vfiprintf_internal_r+0xc9c>
    a4c0:	e73ffc04 	addi	fp,fp,-16
    a4c4:	01000044 	movi	r4,1
    a4c8:	000b883a 	mov	r5,zero
    a4cc:	d811883a 	mov	r8,sp
    a4d0:	3f3ff316 	blt	r7,fp,a4a0 <__alt_data_end+0xff00a4a0>
    a4d4:	da802417 	ldw	r10,144(sp)
    a4d8:	1705883a 	add	r2,r2,fp
    a4dc:	47000115 	stw	fp,4(r8)
    a4e0:	42800015 	stw	r10,0(r8)
    a4e4:	d8801c15 	stw	r2,112(sp)
    a4e8:	d9001b15 	stw	r4,108(sp)
    a4ec:	00c001c4 	movi	r3,7
    a4f0:	19003616 	blt	r3,r4,a5cc <___vfiprintf_internal_r+0xd68>
    a4f4:	42000204 	addi	r8,r8,8
    a4f8:	21000044 	addi	r4,r4,1
    a4fc:	003e5706 	br	9e5c <__alt_data_end+0xff009e5c>
    a500:	d9402117 	ldw	r5,132(sp)
    a504:	d9002017 	ldw	r4,128(sp)
    a508:	d9801a04 	addi	r6,sp,104
    a50c:	d9c02b15 	stw	r7,172(sp)
    a510:	db402a15 	stw	r13,168(sp)
    a514:	00097500 	call	9750 <__sprint_r.part.0>
    a518:	d9c02b17 	ldw	r7,172(sp)
    a51c:	db402a17 	ldw	r13,168(sp)
    a520:	1000241e 	bne	r2,zero,a5b4 <___vfiprintf_internal_r+0xd50>
    a524:	d9401b17 	ldw	r5,108(sp)
    a528:	d8801c17 	ldw	r2,112(sp)
    a52c:	d811883a 	mov	r8,sp
    a530:	29000044 	addi	r4,r5,1
    a534:	003fd806 	br	a498 <__alt_data_end+0xff00a498>
    a538:	d9401b17 	ldw	r5,108(sp)
    a53c:	00c00074 	movhi	r3,1
    a540:	18c49904 	addi	r3,r3,4708
    a544:	d8c02415 	stw	r3,144(sp)
    a548:	29400044 	addi	r5,r5,1
    a54c:	d8c02417 	ldw	r3,144(sp)
    a550:	14c5883a 	add	r2,r2,r19
    a554:	44c00115 	stw	r19,4(r8)
    a558:	40c00015 	stw	r3,0(r8)
    a55c:	d8801c15 	stw	r2,112(sp)
    a560:	d9401b15 	stw	r5,108(sp)
    a564:	00c001c4 	movi	r3,7
    a568:	1940070e 	bge	r3,r5,a588 <___vfiprintf_internal_r+0xd24>
    a56c:	103e4826 	beq	r2,zero,9e90 <__alt_data_end+0xff009e90>
    a570:	d9402117 	ldw	r5,132(sp)
    a574:	d9002017 	ldw	r4,128(sp)
    a578:	d9801a04 	addi	r6,sp,104
    a57c:	00097500 	call	9750 <__sprint_r.part.0>
    a580:	10000c1e 	bne	r2,zero,a5b4 <___vfiprintf_internal_r+0xd50>
    a584:	d8801c17 	ldw	r2,112(sp)
    a588:	8c80010e 	bge	r17,r18,a590 <___vfiprintf_internal_r+0xd2c>
    a58c:	9023883a 	mov	r17,r18
    a590:	da802317 	ldw	r10,140(sp)
    a594:	5455883a 	add	r10,r10,r17
    a598:	da802315 	stw	r10,140(sp)
    a59c:	103e4126 	beq	r2,zero,9ea4 <__alt_data_end+0xff009ea4>
    a5a0:	d9402117 	ldw	r5,132(sp)
    a5a4:	d9002017 	ldw	r4,128(sp)
    a5a8:	d9801a04 	addi	r6,sp,104
    a5ac:	00097500 	call	9750 <__sprint_r.part.0>
    a5b0:	103e3c26 	beq	r2,zero,9ea4 <__alt_data_end+0xff009ea4>
    a5b4:	dd002117 	ldw	r20,132(sp)
    a5b8:	a080030b 	ldhu	r2,12(r20)
    a5bc:	1080100c 	andi	r2,r2,64
    a5c0:	1001231e 	bne	r2,zero,aa50 <___vfiprintf_internal_r+0x11ec>
    a5c4:	d8802317 	ldw	r2,140(sp)
    a5c8:	003d7b06 	br	9bb8 <__alt_data_end+0xff009bb8>
    a5cc:	1000991e 	bne	r2,zero,a834 <___vfiprintf_internal_r+0xfd0>
    a5d0:	00c00044 	movi	r3,1
    a5d4:	9805883a 	mov	r2,r19
    a5d8:	dd400015 	stw	r21,0(sp)
    a5dc:	dcc00115 	stw	r19,4(sp)
    a5e0:	dcc01c15 	stw	r19,112(sp)
    a5e4:	d8c01b15 	stw	r3,108(sp)
    a5e8:	d811883a 	mov	r8,sp
    a5ec:	42000204 	addi	r8,r8,8
    a5f0:	a2c0010c 	andi	r11,r20,4
    a5f4:	583fe426 	beq	r11,zero,a588 <__alt_data_end+0xff00a588>
    a5f8:	8ca7c83a 	sub	r19,r17,r18
    a5fc:	04ffe20e 	bge	zero,r19,a588 <__alt_data_end+0xff00a588>
    a600:	01c00404 	movi	r7,16
    a604:	3cffcc0e 	bge	r7,r19,a538 <__alt_data_end+0xff00a538>
    a608:	02800074 	movhi	r10,1
    a60c:	52849904 	addi	r10,r10,4708
    a610:	d9001b17 	ldw	r4,108(sp)
    a614:	da802415 	stw	r10,144(sp)
    a618:	382b883a 	mov	r21,r7
    a61c:	050001c4 	movi	r20,7
    a620:	df002017 	ldw	fp,128(sp)
    a624:	00000506 	br	a63c <___vfiprintf_internal_r+0xdd8>
    a628:	21400084 	addi	r5,r4,2
    a62c:	42000204 	addi	r8,r8,8
    a630:	1809883a 	mov	r4,r3
    a634:	9cfffc04 	addi	r19,r19,-16
    a638:	acffc40e 	bge	r21,r19,a54c <__alt_data_end+0xff00a54c>
    a63c:	10800404 	addi	r2,r2,16
    a640:	20c00044 	addi	r3,r4,1
    a644:	45800015 	stw	r22,0(r8)
    a648:	45400115 	stw	r21,4(r8)
    a64c:	d8801c15 	stw	r2,112(sp)
    a650:	d8c01b15 	stw	r3,108(sp)
    a654:	a0fff40e 	bge	r20,r3,a628 <__alt_data_end+0xff00a628>
    a658:	1000041e 	bne	r2,zero,a66c <___vfiprintf_internal_r+0xe08>
    a65c:	01400044 	movi	r5,1
    a660:	0009883a 	mov	r4,zero
    a664:	d811883a 	mov	r8,sp
    a668:	003ff206 	br	a634 <__alt_data_end+0xff00a634>
    a66c:	d9402117 	ldw	r5,132(sp)
    a670:	d9801a04 	addi	r6,sp,104
    a674:	e009883a 	mov	r4,fp
    a678:	00097500 	call	9750 <__sprint_r.part.0>
    a67c:	103fcd1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a680:	d9001b17 	ldw	r4,108(sp)
    a684:	d8801c17 	ldw	r2,112(sp)
    a688:	d811883a 	mov	r8,sp
    a68c:	21400044 	addi	r5,r4,1
    a690:	003fe806 	br	a634 <__alt_data_end+0xff00a634>
    a694:	d9402117 	ldw	r5,132(sp)
    a698:	d9002017 	ldw	r4,128(sp)
    a69c:	d9801a04 	addi	r6,sp,104
    a6a0:	d9c02b15 	stw	r7,172(sp)
    a6a4:	db402a15 	stw	r13,168(sp)
    a6a8:	00097500 	call	9750 <__sprint_r.part.0>
    a6ac:	d9c02b17 	ldw	r7,172(sp)
    a6b0:	db402a17 	ldw	r13,168(sp)
    a6b4:	103fbf1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a6b8:	d9401b17 	ldw	r5,108(sp)
    a6bc:	d8801c17 	ldw	r2,112(sp)
    a6c0:	d811883a 	mov	r8,sp
    a6c4:	29800044 	addi	r6,r5,1
    a6c8:	003dc406 	br	9ddc <__alt_data_end+0xff009ddc>
    a6cc:	1000d21e 	bne	r2,zero,aa18 <___vfiprintf_internal_r+0x11b4>
    a6d0:	d8c01d87 	ldb	r3,118(sp)
    a6d4:	18009526 	beq	r3,zero,a92c <___vfiprintf_internal_r+0x10c8>
    a6d8:	00800044 	movi	r2,1
    a6dc:	d8c01d84 	addi	r3,sp,118
    a6e0:	1009883a 	mov	r4,r2
    a6e4:	d8c00015 	stw	r3,0(sp)
    a6e8:	d8800115 	stw	r2,4(sp)
    a6ec:	d811883a 	mov	r8,sp
    a6f0:	200b883a 	mov	r5,r4
    a6f4:	42000204 	addi	r8,r8,8
    a6f8:	21000044 	addi	r4,r4,1
    a6fc:	003d9706 	br	9d5c <__alt_data_end+0xff009d5c>
    a700:	d9001d04 	addi	r4,sp,116
    a704:	00800084 	movi	r2,2
    a708:	d9000015 	stw	r4,0(sp)
    a70c:	d8800115 	stw	r2,4(sp)
    a710:	1809883a 	mov	r4,r3
    a714:	d811883a 	mov	r8,sp
    a718:	200b883a 	mov	r5,r4
    a71c:	42000204 	addi	r8,r8,8
    a720:	21000044 	addi	r4,r4,1
    a724:	003f4e06 	br	a460 <__alt_data_end+0xff00a460>
    a728:	d8001d85 	stb	zero,118(sp)
    a72c:	48005016 	blt	r9,zero,a870 <___vfiprintf_internal_r+0x100c>
    a730:	00ffdfc4 	movi	r3,-129
    a734:	94c4b03a 	or	r2,r18,r19
    a738:	a0e8703a 	and	r20,r20,r3
    a73c:	103d4426 	beq	r2,zero,9c50 <__alt_data_end+0xff009c50>
    a740:	0039883a 	mov	fp,zero
    a744:	d9002617 	ldw	r4,152(sp)
    a748:	dd401a04 	addi	r21,sp,104
    a74c:	908003cc 	andi	r2,r18,15
    a750:	9806973a 	slli	r3,r19,28
    a754:	2085883a 	add	r2,r4,r2
    a758:	9024d13a 	srli	r18,r18,4
    a75c:	10800003 	ldbu	r2,0(r2)
    a760:	9826d13a 	srli	r19,r19,4
    a764:	ad7fffc4 	addi	r21,r21,-1
    a768:	1ca4b03a 	or	r18,r3,r18
    a76c:	a8800005 	stb	r2,0(r21)
    a770:	94c4b03a 	or	r2,r18,r19
    a774:	103ff51e 	bne	r2,zero,a74c <__alt_data_end+0xff00a74c>
    a778:	003e5906 	br	a0e0 <__alt_data_end+0xff00a0e0>
    a77c:	d9402117 	ldw	r5,132(sp)
    a780:	d9002017 	ldw	r4,128(sp)
    a784:	d9801a04 	addi	r6,sp,104
    a788:	00097500 	call	9750 <__sprint_r.part.0>
    a78c:	103f891e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a790:	d8801c17 	ldw	r2,112(sp)
    a794:	d811883a 	mov	r8,sp
    a798:	003f9506 	br	a5f0 <__alt_data_end+0xff00a5f0>
    a79c:	d9402117 	ldw	r5,132(sp)
    a7a0:	d9002017 	ldw	r4,128(sp)
    a7a4:	d9801a04 	addi	r6,sp,104
    a7a8:	00097500 	call	9750 <__sprint_r.part.0>
    a7ac:	103f811e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a7b0:	d811883a 	mov	r8,sp
    a7b4:	003ced06 	br	9b6c <__alt_data_end+0xff009b6c>
    a7b8:	d9402117 	ldw	r5,132(sp)
    a7bc:	d9002017 	ldw	r4,128(sp)
    a7c0:	d9801a04 	addi	r6,sp,104
    a7c4:	da402c15 	stw	r9,176(sp)
    a7c8:	db802a15 	stw	r14,168(sp)
    a7cc:	00097500 	call	9750 <__sprint_r.part.0>
    a7d0:	da402c17 	ldw	r9,176(sp)
    a7d4:	db802a17 	ldw	r14,168(sp)
    a7d8:	103f761e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a7dc:	d9401b17 	ldw	r5,108(sp)
    a7e0:	d8801c17 	ldw	r2,112(sp)
    a7e4:	d811883a 	mov	r8,sp
    a7e8:	29000044 	addi	r4,r5,1
    a7ec:	003d5b06 	br	9d5c <__alt_data_end+0xff009d5c>
    a7f0:	d9402117 	ldw	r5,132(sp)
    a7f4:	d9002017 	ldw	r4,128(sp)
    a7f8:	d9801a04 	addi	r6,sp,104
    a7fc:	da402c15 	stw	r9,176(sp)
    a800:	00097500 	call	9750 <__sprint_r.part.0>
    a804:	da402c17 	ldw	r9,176(sp)
    a808:	103f6a1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a80c:	d9401b17 	ldw	r5,108(sp)
    a810:	d8801c17 	ldw	r2,112(sp)
    a814:	d811883a 	mov	r8,sp
    a818:	29000044 	addi	r4,r5,1
    a81c:	003f1006 	br	a460 <__alt_data_end+0xff00a460>
    a820:	1000c31e 	bne	r2,zero,ab30 <___vfiprintf_internal_r+0x12cc>
    a824:	01000044 	movi	r4,1
    a828:	000b883a 	mov	r5,zero
    a82c:	d811883a 	mov	r8,sp
    a830:	003f0d06 	br	a468 <__alt_data_end+0xff00a468>
    a834:	d9402117 	ldw	r5,132(sp)
    a838:	d9002017 	ldw	r4,128(sp)
    a83c:	d9801a04 	addi	r6,sp,104
    a840:	00097500 	call	9750 <__sprint_r.part.0>
    a844:	103f5b1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    a848:	d9001b17 	ldw	r4,108(sp)
    a84c:	d8801c17 	ldw	r2,112(sp)
    a850:	d811883a 	mov	r8,sp
    a854:	21000044 	addi	r4,r4,1
    a858:	003d8006 	br	9e5c <__alt_data_end+0xff009e5c>
    a85c:	01000074 	movhi	r4,1
    a860:	21043404 	addi	r4,r4,4304
    a864:	d9002615 	stw	r4,152(sp)
    a868:	d8c02215 	stw	r3,136(sp)
    a86c:	1029883a 	mov	r20,r2
    a870:	94c4b03a 	or	r2,r18,r19
    a874:	103fb21e 	bne	r2,zero,a740 <__alt_data_end+0xff00a740>
    a878:	0039883a 	mov	fp,zero
    a87c:	00800084 	movi	r2,2
    a880:	003e6b06 	br	a230 <__alt_data_end+0xff00a230>
    a884:	da802217 	ldw	r10,136(sp)
    a888:	d8001d85 	stb	zero,118(sp)
    a88c:	0027883a 	mov	r19,zero
    a890:	50800104 	addi	r2,r10,4
    a894:	54800017 	ldw	r18,0(r10)
    a898:	483e6016 	blt	r9,zero,a21c <__alt_data_end+0xff00a21c>
    a89c:	00ffdfc4 	movi	r3,-129
    a8a0:	d8802215 	stw	r2,136(sp)
    a8a4:	a0e8703a 	and	r20,r20,r3
    a8a8:	0039883a 	mov	fp,zero
    a8ac:	903ebb26 	beq	r18,zero,a39c <__alt_data_end+0xff00a39c>
    a8b0:	00800244 	movi	r2,9
    a8b4:	14bdee36 	bltu	r2,r18,a070 <__alt_data_end+0xff00a070>
    a8b8:	003eba06 	br	a3a4 <__alt_data_end+0xff00a3a4>
    a8bc:	00800c04 	movi	r2,48
    a8c0:	d8c01d45 	stb	r3,117(sp)
    a8c4:	d8801d05 	stb	r2,116(sp)
    a8c8:	d8001d85 	stb	zero,118(sp)
    a8cc:	a0c00094 	ori	r3,r20,2
    a8d0:	4800a916 	blt	r9,zero,ab78 <___vfiprintf_internal_r+0x1314>
    a8d4:	00bfdfc4 	movi	r2,-129
    a8d8:	a096703a 	and	r11,r20,r2
    a8dc:	5d000094 	ori	r20,r11,2
    a8e0:	0039883a 	mov	fp,zero
    a8e4:	003f9706 	br	a744 <__alt_data_end+0xff00a744>
    a8e8:	8025883a 	mov	r18,r16
    a8ec:	003c2e06 	br	99a8 <__alt_data_end+0xff0099a8>
    a8f0:	00800074 	movhi	r2,1
    a8f4:	10843404 	addi	r2,r2,4304
    a8f8:	0039883a 	mov	fp,zero
    a8fc:	d8802615 	stw	r2,152(sp)
    a900:	003f9006 	br	a744 <__alt_data_end+0xff00a744>
    a904:	04a5c83a 	sub	r18,zero,r18
    a908:	07000b44 	movi	fp,45
    a90c:	9004c03a 	cmpne	r2,r18,zero
    a910:	04e7c83a 	sub	r19,zero,r19
    a914:	df001d85 	stb	fp,118(sp)
    a918:	98a7c83a 	sub	r19,r19,r2
    a91c:	48009f16 	blt	r9,zero,ab9c <___vfiprintf_internal_r+0x1338>
    a920:	00bfdfc4 	movi	r2,-129
    a924:	a0a8703a 	and	r20,r20,r2
    a928:	003dd006 	br	a06c <__alt_data_end+0xff00a06c>
    a92c:	70004c26 	beq	r14,zero,aa60 <___vfiprintf_internal_r+0x11fc>
    a930:	00800084 	movi	r2,2
    a934:	d8c01d04 	addi	r3,sp,116
    a938:	d8c00015 	stw	r3,0(sp)
    a93c:	d8800115 	stw	r2,4(sp)
    a940:	01000044 	movi	r4,1
    a944:	d811883a 	mov	r8,sp
    a948:	003f7306 	br	a718 <__alt_data_end+0xff00a718>
    a94c:	a080100c 	andi	r2,r20,64
    a950:	da802217 	ldw	r10,136(sp)
    a954:	103e0626 	beq	r2,zero,a170 <__alt_data_end+0xff00a170>
    a958:	5480000f 	ldh	r18,0(r10)
    a95c:	52800104 	addi	r10,r10,4
    a960:	da802215 	stw	r10,136(sp)
    a964:	9027d7fa 	srai	r19,r18,31
    a968:	9805883a 	mov	r2,r19
    a96c:	003db806 	br	a050 <__alt_data_end+0xff00a050>
    a970:	a080040c 	andi	r2,r20,16
    a974:	1000091e 	bne	r2,zero,a99c <___vfiprintf_internal_r+0x1138>
    a978:	a2c0100c 	andi	r11,r20,64
    a97c:	58000726 	beq	r11,zero,a99c <___vfiprintf_internal_r+0x1138>
    a980:	da802217 	ldw	r10,136(sp)
    a984:	50800017 	ldw	r2,0(r10)
    a988:	52800104 	addi	r10,r10,4
    a98c:	da802215 	stw	r10,136(sp)
    a990:	da802317 	ldw	r10,140(sp)
    a994:	1280000d 	sth	r10,0(r2)
    a998:	003be706 	br	9938 <__alt_data_end+0xff009938>
    a99c:	da802217 	ldw	r10,136(sp)
    a9a0:	50800017 	ldw	r2,0(r10)
    a9a4:	52800104 	addi	r10,r10,4
    a9a8:	da802215 	stw	r10,136(sp)
    a9ac:	da802317 	ldw	r10,140(sp)
    a9b0:	12800015 	stw	r10,0(r2)
    a9b4:	003be006 	br	9938 <__alt_data_end+0xff009938>
    a9b8:	a080100c 	andi	r2,r20,64
    a9bc:	da802217 	ldw	r10,136(sp)
    a9c0:	10003026 	beq	r2,zero,aa84 <___vfiprintf_internal_r+0x1220>
    a9c4:	5480000b 	ldhu	r18,0(r10)
    a9c8:	52800104 	addi	r10,r10,4
    a9cc:	0027883a 	mov	r19,zero
    a9d0:	da802215 	stw	r10,136(sp)
    a9d4:	003d8006 	br	9fd8 <__alt_data_end+0xff009fd8>
    a9d8:	80c00007 	ldb	r3,0(r16)
    a9dc:	003c0006 	br	99e0 <__alt_data_end+0xff0099e0>
    a9e0:	a080100c 	andi	r2,r20,64
    a9e4:	d8001d85 	stb	zero,118(sp)
    a9e8:	da802217 	ldw	r10,136(sp)
    a9ec:	1000201e 	bne	r2,zero,aa70 <___vfiprintf_internal_r+0x120c>
    a9f0:	50800104 	addi	r2,r10,4
    a9f4:	54800017 	ldw	r18,0(r10)
    a9f8:	0027883a 	mov	r19,zero
    a9fc:	483def0e 	bge	r9,zero,a1bc <__alt_data_end+0xff00a1bc>
    aa00:	94c6b03a 	or	r3,r18,r19
    aa04:	d8802215 	stw	r2,136(sp)
    aa08:	183d4e1e 	bne	r3,zero,9f44 <__alt_data_end+0xff009f44>
    aa0c:	0039883a 	mov	fp,zero
    aa10:	0005883a 	mov	r2,zero
    aa14:	003e0606 	br	a230 <__alt_data_end+0xff00a230>
    aa18:	d9402117 	ldw	r5,132(sp)
    aa1c:	d9002017 	ldw	r4,128(sp)
    aa20:	d9801a04 	addi	r6,sp,104
    aa24:	da402c15 	stw	r9,176(sp)
    aa28:	db802a15 	stw	r14,168(sp)
    aa2c:	00097500 	call	9750 <__sprint_r.part.0>
    aa30:	da402c17 	ldw	r9,176(sp)
    aa34:	db802a17 	ldw	r14,168(sp)
    aa38:	103ede1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    aa3c:	d9401b17 	ldw	r5,108(sp)
    aa40:	d8801c17 	ldw	r2,112(sp)
    aa44:	d811883a 	mov	r8,sp
    aa48:	29000044 	addi	r4,r5,1
    aa4c:	003e7406 	br	a420 <__alt_data_end+0xff00a420>
    aa50:	00bfffc4 	movi	r2,-1
    aa54:	003c5806 	br	9bb8 <__alt_data_end+0xff009bb8>
    aa58:	d811883a 	mov	r8,sp
    aa5c:	003ee806 	br	a600 <__alt_data_end+0xff00a600>
    aa60:	000b883a 	mov	r5,zero
    aa64:	01000044 	movi	r4,1
    aa68:	d811883a 	mov	r8,sp
    aa6c:	003e7c06 	br	a460 <__alt_data_end+0xff00a460>
    aa70:	50800104 	addi	r2,r10,4
    aa74:	5480000b 	ldhu	r18,0(r10)
    aa78:	0027883a 	mov	r19,zero
    aa7c:	483dcf0e 	bge	r9,zero,a1bc <__alt_data_end+0xff00a1bc>
    aa80:	003fdf06 	br	aa00 <__alt_data_end+0xff00aa00>
    aa84:	54800017 	ldw	r18,0(r10)
    aa88:	52800104 	addi	r10,r10,4
    aa8c:	0027883a 	mov	r19,zero
    aa90:	da802215 	stw	r10,136(sp)
    aa94:	003d5006 	br	9fd8 <__alt_data_end+0xff009fd8>
    aa98:	50800104 	addi	r2,r10,4
    aa9c:	5480000b 	ldhu	r18,0(r10)
    aaa0:	0027883a 	mov	r19,zero
    aaa4:	483f7d0e 	bge	r9,zero,a89c <__alt_data_end+0xff00a89c>
    aaa8:	003ddc06 	br	a21c <__alt_data_end+0xff00a21c>
    aaac:	d8c02215 	stw	r3,136(sp)
    aab0:	0039883a 	mov	fp,zero
    aab4:	003ddb06 	br	a224 <__alt_data_end+0xff00a224>
    aab8:	02800074 	movhi	r10,1
    aabc:	52849504 	addi	r10,r10,4692
    aac0:	da802415 	stw	r10,144(sp)
    aac4:	003e8306 	br	a4d4 <__alt_data_end+0xff00a4d4>
    aac8:	d8801c17 	ldw	r2,112(sp)
    aacc:	dd002117 	ldw	r20,132(sp)
    aad0:	103eb926 	beq	r2,zero,a5b8 <__alt_data_end+0xff00a5b8>
    aad4:	d9002017 	ldw	r4,128(sp)
    aad8:	d9801a04 	addi	r6,sp,104
    aadc:	a00b883a 	mov	r5,r20
    aae0:	00097500 	call	9750 <__sprint_r.part.0>
    aae4:	003eb406 	br	a5b8 <__alt_data_end+0xff00a5b8>
    aae8:	80c00043 	ldbu	r3,1(r16)
    aaec:	a5000814 	ori	r20,r20,32
    aaf0:	84000044 	addi	r16,r16,1
    aaf4:	18c03fcc 	andi	r3,r3,255
    aaf8:	18c0201c 	xori	r3,r3,128
    aafc:	18ffe004 	addi	r3,r3,-128
    ab00:	003bb706 	br	99e0 <__alt_data_end+0xff0099e0>
    ab04:	a809883a 	mov	r4,r21
    ab08:	d8c02a15 	stw	r3,168(sp)
    ab0c:	da002b15 	stw	r8,172(sp)
    ab10:	0002a180 	call	2a18 <strlen>
    ab14:	d8c02a17 	ldw	r3,168(sp)
    ab18:	1027883a 	mov	r19,r2
    ab1c:	df001d83 	ldbu	fp,118(sp)
    ab20:	d8c02215 	stw	r3,136(sp)
    ab24:	0013883a 	mov	r9,zero
    ab28:	da002b17 	ldw	r8,172(sp)
    ab2c:	003c4d06 	br	9c64 <__alt_data_end+0xff009c64>
    ab30:	d9402117 	ldw	r5,132(sp)
    ab34:	d9002017 	ldw	r4,128(sp)
    ab38:	d9801a04 	addi	r6,sp,104
    ab3c:	da402c15 	stw	r9,176(sp)
    ab40:	00097500 	call	9750 <__sprint_r.part.0>
    ab44:	da402c17 	ldw	r9,176(sp)
    ab48:	103e9a1e 	bne	r2,zero,a5b4 <__alt_data_end+0xff00a5b4>
    ab4c:	d9401b17 	ldw	r5,108(sp)
    ab50:	d8801c17 	ldw	r2,112(sp)
    ab54:	d811883a 	mov	r8,sp
    ab58:	29000044 	addi	r4,r5,1
    ab5c:	003e4206 	br	a468 <__alt_data_end+0xff00a468>
    ab60:	d9401b17 	ldw	r5,108(sp)
    ab64:	01000074 	movhi	r4,1
    ab68:	21049904 	addi	r4,r4,4708
    ab6c:	d9002415 	stw	r4,144(sp)
    ab70:	29400044 	addi	r5,r5,1
    ab74:	003c6d06 	br	9d2c <__alt_data_end+0xff009d2c>
    ab78:	0039883a 	mov	fp,zero
    ab7c:	00800084 	movi	r2,2
    ab80:	10803fcc 	andi	r2,r2,255
    ab84:	01000044 	movi	r4,1
    ab88:	11001e26 	beq	r2,r4,ac04 <___vfiprintf_internal_r+0x13a0>
    ab8c:	01000084 	movi	r4,2
    ab90:	11001e1e 	bne	r2,r4,ac0c <___vfiprintf_internal_r+0x13a8>
    ab94:	1829883a 	mov	r20,r3
    ab98:	003eea06 	br	a744 <__alt_data_end+0xff00a744>
    ab9c:	a007883a 	mov	r3,r20
    aba0:	00800044 	movi	r2,1
    aba4:	003ff606 	br	ab80 <__alt_data_end+0xff00ab80>
    aba8:	00800184 	movi	r2,6
    abac:	1240012e 	bgeu	r2,r9,abb4 <___vfiprintf_internal_r+0x1350>
    abb0:	1013883a 	mov	r9,r2
    abb4:	4827883a 	mov	r19,r9
    abb8:	4825883a 	mov	r18,r9
    abbc:	48001516 	blt	r9,zero,ac14 <___vfiprintf_internal_r+0x13b0>
    abc0:	05400074 	movhi	r21,1
    abc4:	d8c02215 	stw	r3,136(sp)
    abc8:	ad443904 	addi	r21,r21,4324
    abcc:	003d1406 	br	a020 <__alt_data_end+0xff00a020>
    abd0:	02800074 	movhi	r10,1
    abd4:	52849504 	addi	r10,r10,4692
    abd8:	da802415 	stw	r10,144(sp)
    abdc:	200d883a 	mov	r6,r4
    abe0:	003c9106 	br	9e28 <__alt_data_end+0xff009e28>
    abe4:	5021883a 	mov	r16,r10
    abe8:	0013883a 	mov	r9,zero
    abec:	003b7d06 	br	99e4 <__alt_data_end+0xff0099e4>
    abf0:	4827883a 	mov	r19,r9
    abf4:	df001d83 	ldbu	fp,118(sp)
    abf8:	d8c02215 	stw	r3,136(sp)
    abfc:	0013883a 	mov	r9,zero
    ac00:	003c1806 	br	9c64 <__alt_data_end+0xff009c64>
    ac04:	1829883a 	mov	r20,r3
    ac08:	003d1806 	br	a06c <__alt_data_end+0xff00a06c>
    ac0c:	1829883a 	mov	r20,r3
    ac10:	003ccd06 	br	9f48 <__alt_data_end+0xff009f48>
    ac14:	0025883a 	mov	r18,zero
    ac18:	003fe906 	br	abc0 <__alt_data_end+0xff00abc0>
    ac1c:	d8802217 	ldw	r2,136(sp)
    ac20:	80c00043 	ldbu	r3,1(r16)
    ac24:	5021883a 	mov	r16,r10
    ac28:	12400017 	ldw	r9,0(r2)
    ac2c:	10800104 	addi	r2,r2,4
    ac30:	d8802215 	stw	r2,136(sp)
    ac34:	483faf0e 	bge	r9,zero,aaf4 <__alt_data_end+0xff00aaf4>
    ac38:	18c03fcc 	andi	r3,r3,255
    ac3c:	18c0201c 	xori	r3,r3,128
    ac40:	027fffc4 	movi	r9,-1
    ac44:	18ffe004 	addi	r3,r3,-128
    ac48:	003b6506 	br	99e0 <__alt_data_end+0xff0099e0>
    ac4c:	d9c01d85 	stb	r7,118(sp)
    ac50:	003ca006 	br	9ed4 <__alt_data_end+0xff009ed4>
    ac54:	d9c01d85 	stb	r7,118(sp)
    ac58:	003cad06 	br	9f10 <__alt_data_end+0xff009f10>
    ac5c:	d9c01d85 	stb	r7,118(sp)
    ac60:	003d7d06 	br	a258 <__alt_data_end+0xff00a258>
    ac64:	d9c01d85 	stb	r7,118(sp)
    ac68:	003d5f06 	br	a1e8 <__alt_data_end+0xff00a1e8>
    ac6c:	a080004c 	andi	r2,r20,1
    ac70:	0039883a 	mov	fp,zero
    ac74:	10000526 	beq	r2,zero,ac8c <___vfiprintf_internal_r+0x1428>
    ac78:	00800c04 	movi	r2,48
    ac7c:	d88019c5 	stb	r2,103(sp)
    ac80:	dcc02717 	ldw	r19,156(sp)
    ac84:	dd4019c4 	addi	r21,sp,103
    ac88:	003bf606 	br	9c64 <__alt_data_end+0xff009c64>
    ac8c:	0027883a 	mov	r19,zero
    ac90:	dd401a04 	addi	r21,sp,104
    ac94:	003bf306 	br	9c64 <__alt_data_end+0xff009c64>
    ac98:	d9c01d85 	stb	r7,118(sp)
    ac9c:	003dc806 	br	a3c0 <__alt_data_end+0xff00a3c0>
    aca0:	d9c01d85 	stb	r7,118(sp)
    aca4:	003d3a06 	br	a190 <__alt_data_end+0xff00a190>
    aca8:	d9c01d85 	stb	r7,118(sp)
    acac:	003d2a06 	br	a158 <__alt_data_end+0xff00a158>
    acb0:	d9c01d85 	stb	r7,118(sp)
    acb4:	003cde06 	br	a030 <__alt_data_end+0xff00a030>
    acb8:	d9c01d85 	stb	r7,118(sp)
    acbc:	003cbc06 	br	9fb0 <__alt_data_end+0xff009fb0>

0000acc0 <__vfiprintf_internal>:
    acc0:	00800074 	movhi	r2,1
    acc4:	108b9604 	addi	r2,r2,11864
    acc8:	300f883a 	mov	r7,r6
    accc:	280d883a 	mov	r6,r5
    acd0:	200b883a 	mov	r5,r4
    acd4:	11000017 	ldw	r4,0(r2)
    acd8:	00098641 	jmpi	9864 <___vfiprintf_internal_r>

0000acdc <__sbprintf>:
    acdc:	2880030b 	ldhu	r2,12(r5)
    ace0:	2ac01917 	ldw	r11,100(r5)
    ace4:	2a80038b 	ldhu	r10,14(r5)
    ace8:	2a400717 	ldw	r9,28(r5)
    acec:	2a000917 	ldw	r8,36(r5)
    acf0:	defee204 	addi	sp,sp,-1144
    acf4:	00c10004 	movi	r3,1024
    acf8:	dc011a15 	stw	r16,1128(sp)
    acfc:	10bfff4c 	andi	r2,r2,65533
    ad00:	2821883a 	mov	r16,r5
    ad04:	d8cb883a 	add	r5,sp,r3
    ad08:	dc811c15 	stw	r18,1136(sp)
    ad0c:	dc411b15 	stw	r17,1132(sp)
    ad10:	dfc11d15 	stw	ra,1140(sp)
    ad14:	2025883a 	mov	r18,r4
    ad18:	d881030d 	sth	r2,1036(sp)
    ad1c:	dac11915 	stw	r11,1124(sp)
    ad20:	da81038d 	sth	r10,1038(sp)
    ad24:	da410715 	stw	r9,1052(sp)
    ad28:	da010915 	stw	r8,1060(sp)
    ad2c:	dec10015 	stw	sp,1024(sp)
    ad30:	dec10415 	stw	sp,1040(sp)
    ad34:	d8c10215 	stw	r3,1032(sp)
    ad38:	d8c10515 	stw	r3,1044(sp)
    ad3c:	d8010615 	stw	zero,1048(sp)
    ad40:	00098640 	call	9864 <___vfiprintf_internal_r>
    ad44:	1023883a 	mov	r17,r2
    ad48:	10000416 	blt	r2,zero,ad5c <__sbprintf+0x80>
    ad4c:	d9410004 	addi	r5,sp,1024
    ad50:	9009883a 	mov	r4,r18
    ad54:	00069780 	call	6978 <_fflush_r>
    ad58:	10000d1e 	bne	r2,zero,ad90 <__sbprintf+0xb4>
    ad5c:	d881030b 	ldhu	r2,1036(sp)
    ad60:	1080100c 	andi	r2,r2,64
    ad64:	10000326 	beq	r2,zero,ad74 <__sbprintf+0x98>
    ad68:	8080030b 	ldhu	r2,12(r16)
    ad6c:	10801014 	ori	r2,r2,64
    ad70:	8080030d 	sth	r2,12(r16)
    ad74:	8805883a 	mov	r2,r17
    ad78:	dfc11d17 	ldw	ra,1140(sp)
    ad7c:	dc811c17 	ldw	r18,1136(sp)
    ad80:	dc411b17 	ldw	r17,1132(sp)
    ad84:	dc011a17 	ldw	r16,1128(sp)
    ad88:	dec11e04 	addi	sp,sp,1144
    ad8c:	f800283a 	ret
    ad90:	047fffc4 	movi	r17,-1
    ad94:	003ff106 	br	ad5c <__alt_data_end+0xff00ad5c>

0000ad98 <_write_r>:
    ad98:	defffd04 	addi	sp,sp,-12
    ad9c:	2805883a 	mov	r2,r5
    ada0:	dc000015 	stw	r16,0(sp)
    ada4:	04000074 	movhi	r16,1
    ada8:	dc400115 	stw	r17,4(sp)
    adac:	300b883a 	mov	r5,r6
    adb0:	8412b304 	addi	r16,r16,19148
    adb4:	2023883a 	mov	r17,r4
    adb8:	380d883a 	mov	r6,r7
    adbc:	1009883a 	mov	r4,r2
    adc0:	dfc00215 	stw	ra,8(sp)
    adc4:	80000015 	stw	zero,0(r16)
    adc8:	000e6e40 	call	e6e4 <write>
    adcc:	00ffffc4 	movi	r3,-1
    add0:	10c00526 	beq	r2,r3,ade8 <_write_r+0x50>
    add4:	dfc00217 	ldw	ra,8(sp)
    add8:	dc400117 	ldw	r17,4(sp)
    addc:	dc000017 	ldw	r16,0(sp)
    ade0:	dec00304 	addi	sp,sp,12
    ade4:	f800283a 	ret
    ade8:	80c00017 	ldw	r3,0(r16)
    adec:	183ff926 	beq	r3,zero,add4 <__alt_data_end+0xff00add4>
    adf0:	88c00015 	stw	r3,0(r17)
    adf4:	003ff706 	br	add4 <__alt_data_end+0xff00add4>

0000adf8 <_close_r>:
    adf8:	defffd04 	addi	sp,sp,-12
    adfc:	dc000015 	stw	r16,0(sp)
    ae00:	04000074 	movhi	r16,1
    ae04:	dc400115 	stw	r17,4(sp)
    ae08:	8412b304 	addi	r16,r16,19148
    ae0c:	2023883a 	mov	r17,r4
    ae10:	2809883a 	mov	r4,r5
    ae14:	dfc00215 	stw	ra,8(sp)
    ae18:	80000015 	stw	zero,0(r16)
    ae1c:	000de2c0 	call	de2c <close>
    ae20:	00ffffc4 	movi	r3,-1
    ae24:	10c00526 	beq	r2,r3,ae3c <_close_r+0x44>
    ae28:	dfc00217 	ldw	ra,8(sp)
    ae2c:	dc400117 	ldw	r17,4(sp)
    ae30:	dc000017 	ldw	r16,0(sp)
    ae34:	dec00304 	addi	sp,sp,12
    ae38:	f800283a 	ret
    ae3c:	80c00017 	ldw	r3,0(r16)
    ae40:	183ff926 	beq	r3,zero,ae28 <__alt_data_end+0xff00ae28>
    ae44:	88c00015 	stw	r3,0(r17)
    ae48:	003ff706 	br	ae28 <__alt_data_end+0xff00ae28>

0000ae4c <_calloc_r>:
    ae4c:	298b383a 	mul	r5,r5,r6
    ae50:	defffe04 	addi	sp,sp,-8
    ae54:	dfc00115 	stw	ra,4(sp)
    ae58:	dc000015 	stw	r16,0(sp)
    ae5c:	00020780 	call	2078 <_malloc_r>
    ae60:	10002926 	beq	r2,zero,af08 <_calloc_r+0xbc>
    ae64:	11bfff17 	ldw	r6,-4(r2)
    ae68:	1021883a 	mov	r16,r2
    ae6c:	00bfff04 	movi	r2,-4
    ae70:	308c703a 	and	r6,r6,r2
    ae74:	00c00904 	movi	r3,36
    ae78:	308d883a 	add	r6,r6,r2
    ae7c:	19801636 	bltu	r3,r6,aed8 <_calloc_r+0x8c>
    ae80:	008004c4 	movi	r2,19
    ae84:	11800b2e 	bgeu	r2,r6,aeb4 <_calloc_r+0x68>
    ae88:	80000015 	stw	zero,0(r16)
    ae8c:	80000115 	stw	zero,4(r16)
    ae90:	008006c4 	movi	r2,27
    ae94:	11801a2e 	bgeu	r2,r6,af00 <_calloc_r+0xb4>
    ae98:	80000215 	stw	zero,8(r16)
    ae9c:	80000315 	stw	zero,12(r16)
    aea0:	30c0151e 	bne	r6,r3,aef8 <_calloc_r+0xac>
    aea4:	80000415 	stw	zero,16(r16)
    aea8:	80800604 	addi	r2,r16,24
    aeac:	80000515 	stw	zero,20(r16)
    aeb0:	00000106 	br	aeb8 <_calloc_r+0x6c>
    aeb4:	8005883a 	mov	r2,r16
    aeb8:	10000015 	stw	zero,0(r2)
    aebc:	10000115 	stw	zero,4(r2)
    aec0:	10000215 	stw	zero,8(r2)
    aec4:	8005883a 	mov	r2,r16
    aec8:	dfc00117 	ldw	ra,4(sp)
    aecc:	dc000017 	ldw	r16,0(sp)
    aed0:	dec00204 	addi	sp,sp,8
    aed4:	f800283a 	ret
    aed8:	000b883a 	mov	r5,zero
    aedc:	8009883a 	mov	r4,r16
    aee0:	0007e3c0 	call	7e3c <memset>
    aee4:	8005883a 	mov	r2,r16
    aee8:	dfc00117 	ldw	ra,4(sp)
    aeec:	dc000017 	ldw	r16,0(sp)
    aef0:	dec00204 	addi	sp,sp,8
    aef4:	f800283a 	ret
    aef8:	80800404 	addi	r2,r16,16
    aefc:	003fee06 	br	aeb8 <__alt_data_end+0xff00aeb8>
    af00:	80800204 	addi	r2,r16,8
    af04:	003fec06 	br	aeb8 <__alt_data_end+0xff00aeb8>
    af08:	0005883a 	mov	r2,zero
    af0c:	003fee06 	br	aec8 <__alt_data_end+0xff00aec8>

0000af10 <_fclose_r>:
    af10:	28003926 	beq	r5,zero,aff8 <_fclose_r+0xe8>
    af14:	defffc04 	addi	sp,sp,-16
    af18:	dc400115 	stw	r17,4(sp)
    af1c:	dc000015 	stw	r16,0(sp)
    af20:	dfc00315 	stw	ra,12(sp)
    af24:	dc800215 	stw	r18,8(sp)
    af28:	2023883a 	mov	r17,r4
    af2c:	2821883a 	mov	r16,r5
    af30:	20000226 	beq	r4,zero,af3c <_fclose_r+0x2c>
    af34:	20800e17 	ldw	r2,56(r4)
    af38:	10002726 	beq	r2,zero,afd8 <_fclose_r+0xc8>
    af3c:	8080030f 	ldh	r2,12(r16)
    af40:	1000071e 	bne	r2,zero,af60 <_fclose_r+0x50>
    af44:	0005883a 	mov	r2,zero
    af48:	dfc00317 	ldw	ra,12(sp)
    af4c:	dc800217 	ldw	r18,8(sp)
    af50:	dc400117 	ldw	r17,4(sp)
    af54:	dc000017 	ldw	r16,0(sp)
    af58:	dec00404 	addi	sp,sp,16
    af5c:	f800283a 	ret
    af60:	800b883a 	mov	r5,r16
    af64:	8809883a 	mov	r4,r17
    af68:	000675c0 	call	675c <__sflush_r>
    af6c:	1025883a 	mov	r18,r2
    af70:	80800b17 	ldw	r2,44(r16)
    af74:	10000426 	beq	r2,zero,af88 <_fclose_r+0x78>
    af78:	81400717 	ldw	r5,28(r16)
    af7c:	8809883a 	mov	r4,r17
    af80:	103ee83a 	callr	r2
    af84:	10001616 	blt	r2,zero,afe0 <_fclose_r+0xd0>
    af88:	8080030b 	ldhu	r2,12(r16)
    af8c:	1080200c 	andi	r2,r2,128
    af90:	1000151e 	bne	r2,zero,afe8 <_fclose_r+0xd8>
    af94:	81400c17 	ldw	r5,48(r16)
    af98:	28000526 	beq	r5,zero,afb0 <_fclose_r+0xa0>
    af9c:	80801004 	addi	r2,r16,64
    afa0:	28800226 	beq	r5,r2,afac <_fclose_r+0x9c>
    afa4:	8809883a 	mov	r4,r17
    afa8:	0006ec80 	call	6ec8 <_free_r>
    afac:	80000c15 	stw	zero,48(r16)
    afb0:	81401117 	ldw	r5,68(r16)
    afb4:	28000326 	beq	r5,zero,afc4 <_fclose_r+0xb4>
    afb8:	8809883a 	mov	r4,r17
    afbc:	0006ec80 	call	6ec8 <_free_r>
    afc0:	80001115 	stw	zero,68(r16)
    afc4:	0006d640 	call	6d64 <__sfp_lock_acquire>
    afc8:	8000030d 	sth	zero,12(r16)
    afcc:	0006d680 	call	6d68 <__sfp_lock_release>
    afd0:	9005883a 	mov	r2,r18
    afd4:	003fdc06 	br	af48 <__alt_data_end+0xff00af48>
    afd8:	0006d540 	call	6d54 <__sinit>
    afdc:	003fd706 	br	af3c <__alt_data_end+0xff00af3c>
    afe0:	04bfffc4 	movi	r18,-1
    afe4:	003fe806 	br	af88 <__alt_data_end+0xff00af88>
    afe8:	81400417 	ldw	r5,16(r16)
    afec:	8809883a 	mov	r4,r17
    aff0:	0006ec80 	call	6ec8 <_free_r>
    aff4:	003fe706 	br	af94 <__alt_data_end+0xff00af94>
    aff8:	0005883a 	mov	r2,zero
    affc:	f800283a 	ret

0000b000 <fclose>:
    b000:	00800074 	movhi	r2,1
    b004:	108b9604 	addi	r2,r2,11864
    b008:	200b883a 	mov	r5,r4
    b00c:	11000017 	ldw	r4,0(r2)
    b010:	000af101 	jmpi	af10 <_fclose_r>

0000b014 <__fputwc>:
    b014:	defff804 	addi	sp,sp,-32
    b018:	dcc00415 	stw	r19,16(sp)
    b01c:	dc800315 	stw	r18,12(sp)
    b020:	dc000115 	stw	r16,4(sp)
    b024:	dfc00715 	stw	ra,28(sp)
    b028:	dd400615 	stw	r21,24(sp)
    b02c:	dd000515 	stw	r20,20(sp)
    b030:	dc400215 	stw	r17,8(sp)
    b034:	2027883a 	mov	r19,r4
    b038:	2825883a 	mov	r18,r5
    b03c:	3021883a 	mov	r16,r6
    b040:	00078a40 	call	78a4 <__locale_mb_cur_max>
    b044:	00c00044 	movi	r3,1
    b048:	10c03e26 	beq	r2,r3,b144 <__fputwc+0x130>
    b04c:	81c01704 	addi	r7,r16,92
    b050:	900d883a 	mov	r6,r18
    b054:	d80b883a 	mov	r5,sp
    b058:	9809883a 	mov	r4,r19
    b05c:	000b4e40 	call	b4e4 <_wcrtomb_r>
    b060:	1029883a 	mov	r20,r2
    b064:	00bfffc4 	movi	r2,-1
    b068:	a0802026 	beq	r20,r2,b0ec <__fputwc+0xd8>
    b06c:	d9400003 	ldbu	r5,0(sp)
    b070:	a0001c26 	beq	r20,zero,b0e4 <__fputwc+0xd0>
    b074:	0023883a 	mov	r17,zero
    b078:	05400284 	movi	r21,10
    b07c:	00000906 	br	b0a4 <__fputwc+0x90>
    b080:	80800017 	ldw	r2,0(r16)
    b084:	11400005 	stb	r5,0(r2)
    b088:	80c00017 	ldw	r3,0(r16)
    b08c:	18c00044 	addi	r3,r3,1
    b090:	80c00015 	stw	r3,0(r16)
    b094:	8c400044 	addi	r17,r17,1
    b098:	dc45883a 	add	r2,sp,r17
    b09c:	8d00112e 	bgeu	r17,r20,b0e4 <__fputwc+0xd0>
    b0a0:	11400003 	ldbu	r5,0(r2)
    b0a4:	80c00217 	ldw	r3,8(r16)
    b0a8:	18ffffc4 	addi	r3,r3,-1
    b0ac:	80c00215 	stw	r3,8(r16)
    b0b0:	183ff30e 	bge	r3,zero,b080 <__alt_data_end+0xff00b080>
    b0b4:	80800617 	ldw	r2,24(r16)
    b0b8:	18801916 	blt	r3,r2,b120 <__fputwc+0x10c>
    b0bc:	80800017 	ldw	r2,0(r16)
    b0c0:	11400005 	stb	r5,0(r2)
    b0c4:	80800017 	ldw	r2,0(r16)
    b0c8:	10c00003 	ldbu	r3,0(r2)
    b0cc:	10800044 	addi	r2,r2,1
    b0d0:	1d402326 	beq	r3,r21,b160 <__fputwc+0x14c>
    b0d4:	80800015 	stw	r2,0(r16)
    b0d8:	8c400044 	addi	r17,r17,1
    b0dc:	dc45883a 	add	r2,sp,r17
    b0e0:	8d3fef36 	bltu	r17,r20,b0a0 <__alt_data_end+0xff00b0a0>
    b0e4:	9005883a 	mov	r2,r18
    b0e8:	00000406 	br	b0fc <__fputwc+0xe8>
    b0ec:	80c0030b 	ldhu	r3,12(r16)
    b0f0:	a005883a 	mov	r2,r20
    b0f4:	18c01014 	ori	r3,r3,64
    b0f8:	80c0030d 	sth	r3,12(r16)
    b0fc:	dfc00717 	ldw	ra,28(sp)
    b100:	dd400617 	ldw	r21,24(sp)
    b104:	dd000517 	ldw	r20,20(sp)
    b108:	dcc00417 	ldw	r19,16(sp)
    b10c:	dc800317 	ldw	r18,12(sp)
    b110:	dc400217 	ldw	r17,8(sp)
    b114:	dc000117 	ldw	r16,4(sp)
    b118:	dec00804 	addi	sp,sp,32
    b11c:	f800283a 	ret
    b120:	800d883a 	mov	r6,r16
    b124:	29403fcc 	andi	r5,r5,255
    b128:	9809883a 	mov	r4,r19
    b12c:	000b38c0 	call	b38c <__swbuf_r>
    b130:	10bfffe0 	cmpeqi	r2,r2,-1
    b134:	10803fcc 	andi	r2,r2,255
    b138:	103fd626 	beq	r2,zero,b094 <__alt_data_end+0xff00b094>
    b13c:	00bfffc4 	movi	r2,-1
    b140:	003fee06 	br	b0fc <__alt_data_end+0xff00b0fc>
    b144:	90ffffc4 	addi	r3,r18,-1
    b148:	01003f84 	movi	r4,254
    b14c:	20ffbf36 	bltu	r4,r3,b04c <__alt_data_end+0xff00b04c>
    b150:	900b883a 	mov	r5,r18
    b154:	dc800005 	stb	r18,0(sp)
    b158:	1029883a 	mov	r20,r2
    b15c:	003fc506 	br	b074 <__alt_data_end+0xff00b074>
    b160:	800d883a 	mov	r6,r16
    b164:	a80b883a 	mov	r5,r21
    b168:	9809883a 	mov	r4,r19
    b16c:	000b38c0 	call	b38c <__swbuf_r>
    b170:	10bfffe0 	cmpeqi	r2,r2,-1
    b174:	003fef06 	br	b134 <__alt_data_end+0xff00b134>

0000b178 <_fputwc_r>:
    b178:	3080030b 	ldhu	r2,12(r6)
    b17c:	10c8000c 	andi	r3,r2,8192
    b180:	1800051e 	bne	r3,zero,b198 <_fputwc_r+0x20>
    b184:	30c01917 	ldw	r3,100(r6)
    b188:	10880014 	ori	r2,r2,8192
    b18c:	3080030d 	sth	r2,12(r6)
    b190:	18880014 	ori	r2,r3,8192
    b194:	30801915 	stw	r2,100(r6)
    b198:	000b0141 	jmpi	b014 <__fputwc>

0000b19c <fputwc>:
    b19c:	00800074 	movhi	r2,1
    b1a0:	defffc04 	addi	sp,sp,-16
    b1a4:	108b9604 	addi	r2,r2,11864
    b1a8:	dc000115 	stw	r16,4(sp)
    b1ac:	14000017 	ldw	r16,0(r2)
    b1b0:	dc400215 	stw	r17,8(sp)
    b1b4:	dfc00315 	stw	ra,12(sp)
    b1b8:	2023883a 	mov	r17,r4
    b1bc:	80000226 	beq	r16,zero,b1c8 <fputwc+0x2c>
    b1c0:	80800e17 	ldw	r2,56(r16)
    b1c4:	10001026 	beq	r2,zero,b208 <fputwc+0x6c>
    b1c8:	2880030b 	ldhu	r2,12(r5)
    b1cc:	10c8000c 	andi	r3,r2,8192
    b1d0:	1800051e 	bne	r3,zero,b1e8 <fputwc+0x4c>
    b1d4:	28c01917 	ldw	r3,100(r5)
    b1d8:	10880014 	ori	r2,r2,8192
    b1dc:	2880030d 	sth	r2,12(r5)
    b1e0:	18880014 	ori	r2,r3,8192
    b1e4:	28801915 	stw	r2,100(r5)
    b1e8:	280d883a 	mov	r6,r5
    b1ec:	8009883a 	mov	r4,r16
    b1f0:	880b883a 	mov	r5,r17
    b1f4:	dfc00317 	ldw	ra,12(sp)
    b1f8:	dc400217 	ldw	r17,8(sp)
    b1fc:	dc000117 	ldw	r16,4(sp)
    b200:	dec00404 	addi	sp,sp,16
    b204:	000b0141 	jmpi	b014 <__fputwc>
    b208:	8009883a 	mov	r4,r16
    b20c:	d9400015 	stw	r5,0(sp)
    b210:	0006d540 	call	6d54 <__sinit>
    b214:	d9400017 	ldw	r5,0(sp)
    b218:	003feb06 	br	b1c8 <__alt_data_end+0xff00b1c8>

0000b21c <_fstat_r>:
    b21c:	defffd04 	addi	sp,sp,-12
    b220:	2805883a 	mov	r2,r5
    b224:	dc000015 	stw	r16,0(sp)
    b228:	04000074 	movhi	r16,1
    b22c:	dc400115 	stw	r17,4(sp)
    b230:	8412b304 	addi	r16,r16,19148
    b234:	2023883a 	mov	r17,r4
    b238:	300b883a 	mov	r5,r6
    b23c:	1009883a 	mov	r4,r2
    b240:	dfc00215 	stw	ra,8(sp)
    b244:	80000015 	stw	zero,0(r16)
    b248:	000df640 	call	df64 <fstat>
    b24c:	00ffffc4 	movi	r3,-1
    b250:	10c00526 	beq	r2,r3,b268 <_fstat_r+0x4c>
    b254:	dfc00217 	ldw	ra,8(sp)
    b258:	dc400117 	ldw	r17,4(sp)
    b25c:	dc000017 	ldw	r16,0(sp)
    b260:	dec00304 	addi	sp,sp,12
    b264:	f800283a 	ret
    b268:	80c00017 	ldw	r3,0(r16)
    b26c:	183ff926 	beq	r3,zero,b254 <__alt_data_end+0xff00b254>
    b270:	88c00015 	stw	r3,0(r17)
    b274:	003ff706 	br	b254 <__alt_data_end+0xff00b254>

0000b278 <_isatty_r>:
    b278:	defffd04 	addi	sp,sp,-12
    b27c:	dc000015 	stw	r16,0(sp)
    b280:	04000074 	movhi	r16,1
    b284:	dc400115 	stw	r17,4(sp)
    b288:	8412b304 	addi	r16,r16,19148
    b28c:	2023883a 	mov	r17,r4
    b290:	2809883a 	mov	r4,r5
    b294:	dfc00215 	stw	ra,8(sp)
    b298:	80000015 	stw	zero,0(r16)
    b29c:	000e0500 	call	e050 <isatty>
    b2a0:	00ffffc4 	movi	r3,-1
    b2a4:	10c00526 	beq	r2,r3,b2bc <_isatty_r+0x44>
    b2a8:	dfc00217 	ldw	ra,8(sp)
    b2ac:	dc400117 	ldw	r17,4(sp)
    b2b0:	dc000017 	ldw	r16,0(sp)
    b2b4:	dec00304 	addi	sp,sp,12
    b2b8:	f800283a 	ret
    b2bc:	80c00017 	ldw	r3,0(r16)
    b2c0:	183ff926 	beq	r3,zero,b2a8 <__alt_data_end+0xff00b2a8>
    b2c4:	88c00015 	stw	r3,0(r17)
    b2c8:	003ff706 	br	b2a8 <__alt_data_end+0xff00b2a8>

0000b2cc <_lseek_r>:
    b2cc:	defffd04 	addi	sp,sp,-12
    b2d0:	2805883a 	mov	r2,r5
    b2d4:	dc000015 	stw	r16,0(sp)
    b2d8:	04000074 	movhi	r16,1
    b2dc:	dc400115 	stw	r17,4(sp)
    b2e0:	300b883a 	mov	r5,r6
    b2e4:	8412b304 	addi	r16,r16,19148
    b2e8:	2023883a 	mov	r17,r4
    b2ec:	380d883a 	mov	r6,r7
    b2f0:	1009883a 	mov	r4,r2
    b2f4:	dfc00215 	stw	ra,8(sp)
    b2f8:	80000015 	stw	zero,0(r16)
    b2fc:	000e21c0 	call	e21c <lseek>
    b300:	00ffffc4 	movi	r3,-1
    b304:	10c00526 	beq	r2,r3,b31c <_lseek_r+0x50>
    b308:	dfc00217 	ldw	ra,8(sp)
    b30c:	dc400117 	ldw	r17,4(sp)
    b310:	dc000017 	ldw	r16,0(sp)
    b314:	dec00304 	addi	sp,sp,12
    b318:	f800283a 	ret
    b31c:	80c00017 	ldw	r3,0(r16)
    b320:	183ff926 	beq	r3,zero,b308 <__alt_data_end+0xff00b308>
    b324:	88c00015 	stw	r3,0(r17)
    b328:	003ff706 	br	b308 <__alt_data_end+0xff00b308>

0000b32c <_read_r>:
    b32c:	defffd04 	addi	sp,sp,-12
    b330:	2805883a 	mov	r2,r5
    b334:	dc000015 	stw	r16,0(sp)
    b338:	04000074 	movhi	r16,1
    b33c:	dc400115 	stw	r17,4(sp)
    b340:	300b883a 	mov	r5,r6
    b344:	8412b304 	addi	r16,r16,19148
    b348:	2023883a 	mov	r17,r4
    b34c:	380d883a 	mov	r6,r7
    b350:	1009883a 	mov	r4,r2
    b354:	dfc00215 	stw	ra,8(sp)
    b358:	80000015 	stw	zero,0(r16)
    b35c:	000e3f00 	call	e3f0 <read>
    b360:	00ffffc4 	movi	r3,-1
    b364:	10c00526 	beq	r2,r3,b37c <_read_r+0x50>
    b368:	dfc00217 	ldw	ra,8(sp)
    b36c:	dc400117 	ldw	r17,4(sp)
    b370:	dc000017 	ldw	r16,0(sp)
    b374:	dec00304 	addi	sp,sp,12
    b378:	f800283a 	ret
    b37c:	80c00017 	ldw	r3,0(r16)
    b380:	183ff926 	beq	r3,zero,b368 <__alt_data_end+0xff00b368>
    b384:	88c00015 	stw	r3,0(r17)
    b388:	003ff706 	br	b368 <__alt_data_end+0xff00b368>

0000b38c <__swbuf_r>:
    b38c:	defffb04 	addi	sp,sp,-20
    b390:	dcc00315 	stw	r19,12(sp)
    b394:	dc800215 	stw	r18,8(sp)
    b398:	dc000015 	stw	r16,0(sp)
    b39c:	dfc00415 	stw	ra,16(sp)
    b3a0:	dc400115 	stw	r17,4(sp)
    b3a4:	2025883a 	mov	r18,r4
    b3a8:	2827883a 	mov	r19,r5
    b3ac:	3021883a 	mov	r16,r6
    b3b0:	20000226 	beq	r4,zero,b3bc <__swbuf_r+0x30>
    b3b4:	20800e17 	ldw	r2,56(r4)
    b3b8:	10004226 	beq	r2,zero,b4c4 <__swbuf_r+0x138>
    b3bc:	80800617 	ldw	r2,24(r16)
    b3c0:	8100030b 	ldhu	r4,12(r16)
    b3c4:	80800215 	stw	r2,8(r16)
    b3c8:	2080020c 	andi	r2,r4,8
    b3cc:	10003626 	beq	r2,zero,b4a8 <__swbuf_r+0x11c>
    b3d0:	80c00417 	ldw	r3,16(r16)
    b3d4:	18003426 	beq	r3,zero,b4a8 <__swbuf_r+0x11c>
    b3d8:	2088000c 	andi	r2,r4,8192
    b3dc:	9c403fcc 	andi	r17,r19,255
    b3e0:	10001a26 	beq	r2,zero,b44c <__swbuf_r+0xc0>
    b3e4:	80800017 	ldw	r2,0(r16)
    b3e8:	81000517 	ldw	r4,20(r16)
    b3ec:	10c7c83a 	sub	r3,r2,r3
    b3f0:	1900200e 	bge	r3,r4,b474 <__swbuf_r+0xe8>
    b3f4:	18c00044 	addi	r3,r3,1
    b3f8:	81000217 	ldw	r4,8(r16)
    b3fc:	11400044 	addi	r5,r2,1
    b400:	81400015 	stw	r5,0(r16)
    b404:	213fffc4 	addi	r4,r4,-1
    b408:	81000215 	stw	r4,8(r16)
    b40c:	14c00005 	stb	r19,0(r2)
    b410:	80800517 	ldw	r2,20(r16)
    b414:	10c01e26 	beq	r2,r3,b490 <__swbuf_r+0x104>
    b418:	8080030b 	ldhu	r2,12(r16)
    b41c:	1080004c 	andi	r2,r2,1
    b420:	10000226 	beq	r2,zero,b42c <__swbuf_r+0xa0>
    b424:	00800284 	movi	r2,10
    b428:	88801926 	beq	r17,r2,b490 <__swbuf_r+0x104>
    b42c:	8805883a 	mov	r2,r17
    b430:	dfc00417 	ldw	ra,16(sp)
    b434:	dcc00317 	ldw	r19,12(sp)
    b438:	dc800217 	ldw	r18,8(sp)
    b43c:	dc400117 	ldw	r17,4(sp)
    b440:	dc000017 	ldw	r16,0(sp)
    b444:	dec00504 	addi	sp,sp,20
    b448:	f800283a 	ret
    b44c:	81401917 	ldw	r5,100(r16)
    b450:	00b7ffc4 	movi	r2,-8193
    b454:	21080014 	ori	r4,r4,8192
    b458:	2884703a 	and	r2,r5,r2
    b45c:	80801915 	stw	r2,100(r16)
    b460:	80800017 	ldw	r2,0(r16)
    b464:	8100030d 	sth	r4,12(r16)
    b468:	81000517 	ldw	r4,20(r16)
    b46c:	10c7c83a 	sub	r3,r2,r3
    b470:	193fe016 	blt	r3,r4,b3f4 <__alt_data_end+0xff00b3f4>
    b474:	800b883a 	mov	r5,r16
    b478:	9009883a 	mov	r4,r18
    b47c:	00069780 	call	6978 <_fflush_r>
    b480:	1000071e 	bne	r2,zero,b4a0 <__swbuf_r+0x114>
    b484:	80800017 	ldw	r2,0(r16)
    b488:	00c00044 	movi	r3,1
    b48c:	003fda06 	br	b3f8 <__alt_data_end+0xff00b3f8>
    b490:	800b883a 	mov	r5,r16
    b494:	9009883a 	mov	r4,r18
    b498:	00069780 	call	6978 <_fflush_r>
    b49c:	103fe326 	beq	r2,zero,b42c <__alt_data_end+0xff00b42c>
    b4a0:	00bfffc4 	movi	r2,-1
    b4a4:	003fe206 	br	b430 <__alt_data_end+0xff00b430>
    b4a8:	800b883a 	mov	r5,r16
    b4ac:	9009883a 	mov	r4,r18
    b4b0:	0004d800 	call	4d80 <__swsetup_r>
    b4b4:	103ffa1e 	bne	r2,zero,b4a0 <__alt_data_end+0xff00b4a0>
    b4b8:	8100030b 	ldhu	r4,12(r16)
    b4bc:	80c00417 	ldw	r3,16(r16)
    b4c0:	003fc506 	br	b3d8 <__alt_data_end+0xff00b3d8>
    b4c4:	0006d540 	call	6d54 <__sinit>
    b4c8:	003fbc06 	br	b3bc <__alt_data_end+0xff00b3bc>

0000b4cc <__swbuf>:
    b4cc:	00800074 	movhi	r2,1
    b4d0:	108b9604 	addi	r2,r2,11864
    b4d4:	280d883a 	mov	r6,r5
    b4d8:	200b883a 	mov	r5,r4
    b4dc:	11000017 	ldw	r4,0(r2)
    b4e0:	000b38c1 	jmpi	b38c <__swbuf_r>

0000b4e4 <_wcrtomb_r>:
    b4e4:	defff604 	addi	sp,sp,-40
    b4e8:	00800074 	movhi	r2,1
    b4ec:	dc800815 	stw	r18,32(sp)
    b4f0:	dc400715 	stw	r17,28(sp)
    b4f4:	dc000615 	stw	r16,24(sp)
    b4f8:	108b9804 	addi	r2,r2,11872
    b4fc:	dfc00915 	stw	ra,36(sp)
    b500:	2021883a 	mov	r16,r4
    b504:	3823883a 	mov	r17,r7
    b508:	14800017 	ldw	r18,0(r2)
    b50c:	28001426 	beq	r5,zero,b560 <_wcrtomb_r+0x7c>
    b510:	d9400415 	stw	r5,16(sp)
    b514:	d9800515 	stw	r6,20(sp)
    b518:	00078980 	call	7898 <__locale_charset>
    b51c:	d9800517 	ldw	r6,20(sp)
    b520:	d9400417 	ldw	r5,16(sp)
    b524:	100f883a 	mov	r7,r2
    b528:	dc400015 	stw	r17,0(sp)
    b52c:	8009883a 	mov	r4,r16
    b530:	903ee83a 	callr	r18
    b534:	00ffffc4 	movi	r3,-1
    b538:	10c0031e 	bne	r2,r3,b548 <_wcrtomb_r+0x64>
    b53c:	88000015 	stw	zero,0(r17)
    b540:	00c02284 	movi	r3,138
    b544:	80c00015 	stw	r3,0(r16)
    b548:	dfc00917 	ldw	ra,36(sp)
    b54c:	dc800817 	ldw	r18,32(sp)
    b550:	dc400717 	ldw	r17,28(sp)
    b554:	dc000617 	ldw	r16,24(sp)
    b558:	dec00a04 	addi	sp,sp,40
    b55c:	f800283a 	ret
    b560:	00078980 	call	7898 <__locale_charset>
    b564:	100f883a 	mov	r7,r2
    b568:	dc400015 	stw	r17,0(sp)
    b56c:	000d883a 	mov	r6,zero
    b570:	d9400104 	addi	r5,sp,4
    b574:	8009883a 	mov	r4,r16
    b578:	903ee83a 	callr	r18
    b57c:	003fed06 	br	b534 <__alt_data_end+0xff00b534>

0000b580 <wcrtomb>:
    b580:	defff604 	addi	sp,sp,-40
    b584:	00800074 	movhi	r2,1
    b588:	dc800615 	stw	r18,24(sp)
    b58c:	dc400515 	stw	r17,20(sp)
    b590:	108b9604 	addi	r2,r2,11864
    b594:	dfc00915 	stw	ra,36(sp)
    b598:	dd000815 	stw	r20,32(sp)
    b59c:	dcc00715 	stw	r19,28(sp)
    b5a0:	dc000415 	stw	r16,16(sp)
    b5a4:	3025883a 	mov	r18,r6
    b5a8:	14400017 	ldw	r17,0(r2)
    b5ac:	20001926 	beq	r4,zero,b614 <wcrtomb+0x94>
    b5b0:	00800074 	movhi	r2,1
    b5b4:	108b9804 	addi	r2,r2,11872
    b5b8:	15000017 	ldw	r20,0(r2)
    b5bc:	2021883a 	mov	r16,r4
    b5c0:	2827883a 	mov	r19,r5
    b5c4:	00078980 	call	7898 <__locale_charset>
    b5c8:	100f883a 	mov	r7,r2
    b5cc:	dc800015 	stw	r18,0(sp)
    b5d0:	980d883a 	mov	r6,r19
    b5d4:	800b883a 	mov	r5,r16
    b5d8:	8809883a 	mov	r4,r17
    b5dc:	a03ee83a 	callr	r20
    b5e0:	00ffffc4 	movi	r3,-1
    b5e4:	10c0031e 	bne	r2,r3,b5f4 <wcrtomb+0x74>
    b5e8:	90000015 	stw	zero,0(r18)
    b5ec:	00c02284 	movi	r3,138
    b5f0:	88c00015 	stw	r3,0(r17)
    b5f4:	dfc00917 	ldw	ra,36(sp)
    b5f8:	dd000817 	ldw	r20,32(sp)
    b5fc:	dcc00717 	ldw	r19,28(sp)
    b600:	dc800617 	ldw	r18,24(sp)
    b604:	dc400517 	ldw	r17,20(sp)
    b608:	dc000417 	ldw	r16,16(sp)
    b60c:	dec00a04 	addi	sp,sp,40
    b610:	f800283a 	ret
    b614:	00800074 	movhi	r2,1
    b618:	108b9804 	addi	r2,r2,11872
    b61c:	14000017 	ldw	r16,0(r2)
    b620:	00078980 	call	7898 <__locale_charset>
    b624:	100f883a 	mov	r7,r2
    b628:	dc800015 	stw	r18,0(sp)
    b62c:	000d883a 	mov	r6,zero
    b630:	d9400104 	addi	r5,sp,4
    b634:	8809883a 	mov	r4,r17
    b638:	803ee83a 	callr	r16
    b63c:	003fe806 	br	b5e0 <__alt_data_end+0xff00b5e0>

0000b640 <__ascii_wctomb>:
    b640:	28000526 	beq	r5,zero,b658 <__ascii_wctomb+0x18>
    b644:	00803fc4 	movi	r2,255
    b648:	11800536 	bltu	r2,r6,b660 <__ascii_wctomb+0x20>
    b64c:	29800005 	stb	r6,0(r5)
    b650:	00800044 	movi	r2,1
    b654:	f800283a 	ret
    b658:	0005883a 	mov	r2,zero
    b65c:	f800283a 	ret
    b660:	00802284 	movi	r2,138
    b664:	20800015 	stw	r2,0(r4)
    b668:	00bfffc4 	movi	r2,-1
    b66c:	f800283a 	ret

0000b670 <_wctomb_r>:
    b670:	00800074 	movhi	r2,1
    b674:	defff904 	addi	sp,sp,-28
    b678:	108b9804 	addi	r2,r2,11872
    b67c:	dfc00615 	stw	ra,24(sp)
    b680:	dc400515 	stw	r17,20(sp)
    b684:	dc000415 	stw	r16,16(sp)
    b688:	3823883a 	mov	r17,r7
    b68c:	14000017 	ldw	r16,0(r2)
    b690:	d9000115 	stw	r4,4(sp)
    b694:	d9400215 	stw	r5,8(sp)
    b698:	d9800315 	stw	r6,12(sp)
    b69c:	00078980 	call	7898 <__locale_charset>
    b6a0:	d9800317 	ldw	r6,12(sp)
    b6a4:	d9400217 	ldw	r5,8(sp)
    b6a8:	d9000117 	ldw	r4,4(sp)
    b6ac:	100f883a 	mov	r7,r2
    b6b0:	dc400015 	stw	r17,0(sp)
    b6b4:	803ee83a 	callr	r16
    b6b8:	dfc00617 	ldw	ra,24(sp)
    b6bc:	dc400517 	ldw	r17,20(sp)
    b6c0:	dc000417 	ldw	r16,16(sp)
    b6c4:	dec00704 	addi	sp,sp,28
    b6c8:	f800283a 	ret

0000b6cc <__udivdi3>:
    b6cc:	defff504 	addi	sp,sp,-44
    b6d0:	dcc00415 	stw	r19,16(sp)
    b6d4:	dc000115 	stw	r16,4(sp)
    b6d8:	dfc00a15 	stw	ra,40(sp)
    b6dc:	df000915 	stw	fp,36(sp)
    b6e0:	ddc00815 	stw	r23,32(sp)
    b6e4:	dd800715 	stw	r22,28(sp)
    b6e8:	dd400615 	stw	r21,24(sp)
    b6ec:	dd000515 	stw	r20,20(sp)
    b6f0:	dc800315 	stw	r18,12(sp)
    b6f4:	dc400215 	stw	r17,8(sp)
    b6f8:	2027883a 	mov	r19,r4
    b6fc:	2821883a 	mov	r16,r5
    b700:	3800411e 	bne	r7,zero,b808 <__udivdi3+0x13c>
    b704:	3023883a 	mov	r17,r6
    b708:	2025883a 	mov	r18,r4
    b70c:	2980522e 	bgeu	r5,r6,b858 <__udivdi3+0x18c>
    b710:	00bfffd4 	movui	r2,65535
    b714:	282d883a 	mov	r22,r5
    b718:	1180a836 	bltu	r2,r6,b9bc <__udivdi3+0x2f0>
    b71c:	00803fc4 	movi	r2,255
    b720:	1185803a 	cmpltu	r2,r2,r6
    b724:	100490fa 	slli	r2,r2,3
    b728:	3086d83a 	srl	r3,r6,r2
    b72c:	01000074 	movhi	r4,1
    b730:	2103eb04 	addi	r4,r4,4012
    b734:	20c7883a 	add	r3,r4,r3
    b738:	18c00003 	ldbu	r3,0(r3)
    b73c:	1885883a 	add	r2,r3,r2
    b740:	00c00804 	movi	r3,32
    b744:	1887c83a 	sub	r3,r3,r2
    b748:	18000526 	beq	r3,zero,b760 <__udivdi3+0x94>
    b74c:	80e0983a 	sll	r16,r16,r3
    b750:	9884d83a 	srl	r2,r19,r2
    b754:	30e2983a 	sll	r17,r6,r3
    b758:	98e4983a 	sll	r18,r19,r3
    b75c:	142cb03a 	or	r22,r2,r16
    b760:	882ad43a 	srli	r21,r17,16
    b764:	b009883a 	mov	r4,r22
    b768:	8d3fffcc 	andi	r20,r17,65535
    b76c:	a80b883a 	mov	r5,r21
    b770:	00016040 	call	1604 <__umodsi3>
    b774:	b009883a 	mov	r4,r22
    b778:	a80b883a 	mov	r5,r21
    b77c:	1027883a 	mov	r19,r2
    b780:	00015a00 	call	15a0 <__udivsi3>
    b784:	102d883a 	mov	r22,r2
    b788:	9826943a 	slli	r19,r19,16
    b78c:	9004d43a 	srli	r2,r18,16
    b790:	a5a1383a 	mul	r16,r20,r22
    b794:	14c4b03a 	or	r2,r2,r19
    b798:	1400052e 	bgeu	r2,r16,b7b0 <__udivdi3+0xe4>
    b79c:	1445883a 	add	r2,r2,r17
    b7a0:	b0ffffc4 	addi	r3,r22,-1
    b7a4:	14400136 	bltu	r2,r17,b7ac <__udivdi3+0xe0>
    b7a8:	14012336 	bltu	r2,r16,bc38 <__udivdi3+0x56c>
    b7ac:	182d883a 	mov	r22,r3
    b7b0:	1421c83a 	sub	r16,r2,r16
    b7b4:	a80b883a 	mov	r5,r21
    b7b8:	8009883a 	mov	r4,r16
    b7bc:	00016040 	call	1604 <__umodsi3>
    b7c0:	1027883a 	mov	r19,r2
    b7c4:	a80b883a 	mov	r5,r21
    b7c8:	8009883a 	mov	r4,r16
    b7cc:	00015a00 	call	15a0 <__udivsi3>
    b7d0:	9826943a 	slli	r19,r19,16
    b7d4:	a0a9383a 	mul	r20,r20,r2
    b7d8:	94bfffcc 	andi	r18,r18,65535
    b7dc:	94e4b03a 	or	r18,r18,r19
    b7e0:	9500052e 	bgeu	r18,r20,b7f8 <__udivdi3+0x12c>
    b7e4:	8ca5883a 	add	r18,r17,r18
    b7e8:	10ffffc4 	addi	r3,r2,-1
    b7ec:	9440f136 	bltu	r18,r17,bbb4 <__udivdi3+0x4e8>
    b7f0:	9500f02e 	bgeu	r18,r20,bbb4 <__udivdi3+0x4e8>
    b7f4:	10bfff84 	addi	r2,r2,-2
    b7f8:	b00c943a 	slli	r6,r22,16
    b7fc:	0007883a 	mov	r3,zero
    b800:	3084b03a 	or	r2,r6,r2
    b804:	00005906 	br	b96c <__udivdi3+0x2a0>
    b808:	29c05636 	bltu	r5,r7,b964 <__udivdi3+0x298>
    b80c:	00bfffd4 	movui	r2,65535
    b810:	11c0622e 	bgeu	r2,r7,b99c <__udivdi3+0x2d0>
    b814:	00804034 	movhi	r2,256
    b818:	10bfffc4 	addi	r2,r2,-1
    b81c:	11c0ee36 	bltu	r2,r7,bbd8 <__udivdi3+0x50c>
    b820:	00800404 	movi	r2,16
    b824:	3886d83a 	srl	r3,r7,r2
    b828:	01000074 	movhi	r4,1
    b82c:	2103eb04 	addi	r4,r4,4012
    b830:	20c7883a 	add	r3,r4,r3
    b834:	18c00003 	ldbu	r3,0(r3)
    b838:	05400804 	movi	r21,32
    b83c:	1885883a 	add	r2,r3,r2
    b840:	a8abc83a 	sub	r21,r21,r2
    b844:	a800621e 	bne	r21,zero,b9d0 <__udivdi3+0x304>
    b848:	3c00e936 	bltu	r7,r16,bbf0 <__udivdi3+0x524>
    b84c:	9985403a 	cmpgeu	r2,r19,r6
    b850:	0007883a 	mov	r3,zero
    b854:	00004506 	br	b96c <__udivdi3+0x2a0>
    b858:	3000041e 	bne	r6,zero,b86c <__udivdi3+0x1a0>
    b85c:	000b883a 	mov	r5,zero
    b860:	01000044 	movi	r4,1
    b864:	00015a00 	call	15a0 <__udivsi3>
    b868:	1023883a 	mov	r17,r2
    b86c:	00bfffd4 	movui	r2,65535
    b870:	14404e2e 	bgeu	r2,r17,b9ac <__udivdi3+0x2e0>
    b874:	00804034 	movhi	r2,256
    b878:	10bfffc4 	addi	r2,r2,-1
    b87c:	1440d836 	bltu	r2,r17,bbe0 <__udivdi3+0x514>
    b880:	00800404 	movi	r2,16
    b884:	8886d83a 	srl	r3,r17,r2
    b888:	01000074 	movhi	r4,1
    b88c:	2103eb04 	addi	r4,r4,4012
    b890:	20c7883a 	add	r3,r4,r3
    b894:	18c00003 	ldbu	r3,0(r3)
    b898:	1885883a 	add	r2,r3,r2
    b89c:	00c00804 	movi	r3,32
    b8a0:	1887c83a 	sub	r3,r3,r2
    b8a4:	18008f1e 	bne	r3,zero,bae4 <__udivdi3+0x418>
    b8a8:	882ad43a 	srli	r21,r17,16
    b8ac:	8461c83a 	sub	r16,r16,r17
    b8b0:	8d3fffcc 	andi	r20,r17,65535
    b8b4:	00c00044 	movi	r3,1
    b8b8:	8009883a 	mov	r4,r16
    b8bc:	a80b883a 	mov	r5,r21
    b8c0:	d8c00015 	stw	r3,0(sp)
    b8c4:	00016040 	call	1604 <__umodsi3>
    b8c8:	8009883a 	mov	r4,r16
    b8cc:	a80b883a 	mov	r5,r21
    b8d0:	1027883a 	mov	r19,r2
    b8d4:	00015a00 	call	15a0 <__udivsi3>
    b8d8:	9826943a 	slli	r19,r19,16
    b8dc:	9008d43a 	srli	r4,r18,16
    b8e0:	1521383a 	mul	r16,r2,r20
    b8e4:	102d883a 	mov	r22,r2
    b8e8:	24c8b03a 	or	r4,r4,r19
    b8ec:	d8c00017 	ldw	r3,0(sp)
    b8f0:	2400052e 	bgeu	r4,r16,b908 <__udivdi3+0x23c>
    b8f4:	2449883a 	add	r4,r4,r17
    b8f8:	b0bfffc4 	addi	r2,r22,-1
    b8fc:	24400136 	bltu	r4,r17,b904 <__udivdi3+0x238>
    b900:	2400ca36 	bltu	r4,r16,bc2c <__udivdi3+0x560>
    b904:	102d883a 	mov	r22,r2
    b908:	2421c83a 	sub	r16,r4,r16
    b90c:	a80b883a 	mov	r5,r21
    b910:	8009883a 	mov	r4,r16
    b914:	d8c00015 	stw	r3,0(sp)
    b918:	00016040 	call	1604 <__umodsi3>
    b91c:	1027883a 	mov	r19,r2
    b920:	a80b883a 	mov	r5,r21
    b924:	8009883a 	mov	r4,r16
    b928:	00015a00 	call	15a0 <__udivsi3>
    b92c:	9826943a 	slli	r19,r19,16
    b930:	1529383a 	mul	r20,r2,r20
    b934:	94bfffcc 	andi	r18,r18,65535
    b938:	94e4b03a 	or	r18,r18,r19
    b93c:	d8c00017 	ldw	r3,0(sp)
    b940:	9500052e 	bgeu	r18,r20,b958 <__udivdi3+0x28c>
    b944:	8ca5883a 	add	r18,r17,r18
    b948:	113fffc4 	addi	r4,r2,-1
    b94c:	94409736 	bltu	r18,r17,bbac <__udivdi3+0x4e0>
    b950:	9500962e 	bgeu	r18,r20,bbac <__udivdi3+0x4e0>
    b954:	10bfff84 	addi	r2,r2,-2
    b958:	b00c943a 	slli	r6,r22,16
    b95c:	3084b03a 	or	r2,r6,r2
    b960:	00000206 	br	b96c <__udivdi3+0x2a0>
    b964:	0007883a 	mov	r3,zero
    b968:	0005883a 	mov	r2,zero
    b96c:	dfc00a17 	ldw	ra,40(sp)
    b970:	df000917 	ldw	fp,36(sp)
    b974:	ddc00817 	ldw	r23,32(sp)
    b978:	dd800717 	ldw	r22,28(sp)
    b97c:	dd400617 	ldw	r21,24(sp)
    b980:	dd000517 	ldw	r20,20(sp)
    b984:	dcc00417 	ldw	r19,16(sp)
    b988:	dc800317 	ldw	r18,12(sp)
    b98c:	dc400217 	ldw	r17,8(sp)
    b990:	dc000117 	ldw	r16,4(sp)
    b994:	dec00b04 	addi	sp,sp,44
    b998:	f800283a 	ret
    b99c:	00803fc4 	movi	r2,255
    b9a0:	11c5803a 	cmpltu	r2,r2,r7
    b9a4:	100490fa 	slli	r2,r2,3
    b9a8:	003f9e06 	br	b824 <__alt_data_end+0xff00b824>
    b9ac:	00803fc4 	movi	r2,255
    b9b0:	1445803a 	cmpltu	r2,r2,r17
    b9b4:	100490fa 	slli	r2,r2,3
    b9b8:	003fb206 	br	b884 <__alt_data_end+0xff00b884>
    b9bc:	00804034 	movhi	r2,256
    b9c0:	10bfffc4 	addi	r2,r2,-1
    b9c4:	11808836 	bltu	r2,r6,bbe8 <__udivdi3+0x51c>
    b9c8:	00800404 	movi	r2,16
    b9cc:	003f5606 	br	b728 <__alt_data_end+0xff00b728>
    b9d0:	30aed83a 	srl	r23,r6,r2
    b9d4:	3d4e983a 	sll	r7,r7,r21
    b9d8:	80acd83a 	srl	r22,r16,r2
    b9dc:	9884d83a 	srl	r2,r19,r2
    b9e0:	3deeb03a 	or	r23,r7,r23
    b9e4:	b824d43a 	srli	r18,r23,16
    b9e8:	8560983a 	sll	r16,r16,r21
    b9ec:	b009883a 	mov	r4,r22
    b9f0:	900b883a 	mov	r5,r18
    b9f4:	3568983a 	sll	r20,r6,r21
    b9f8:	1420b03a 	or	r16,r2,r16
    b9fc:	00016040 	call	1604 <__umodsi3>
    ba00:	b009883a 	mov	r4,r22
    ba04:	900b883a 	mov	r5,r18
    ba08:	1023883a 	mov	r17,r2
    ba0c:	00015a00 	call	15a0 <__udivsi3>
    ba10:	8808943a 	slli	r4,r17,16
    ba14:	bf3fffcc 	andi	fp,r23,65535
    ba18:	8006d43a 	srli	r3,r16,16
    ba1c:	e0a3383a 	mul	r17,fp,r2
    ba20:	100d883a 	mov	r6,r2
    ba24:	1906b03a 	or	r3,r3,r4
    ba28:	1c40042e 	bgeu	r3,r17,ba3c <__udivdi3+0x370>
    ba2c:	1dc7883a 	add	r3,r3,r23
    ba30:	10bfffc4 	addi	r2,r2,-1
    ba34:	1dc0752e 	bgeu	r3,r23,bc0c <__udivdi3+0x540>
    ba38:	100d883a 	mov	r6,r2
    ba3c:	1c63c83a 	sub	r17,r3,r17
    ba40:	900b883a 	mov	r5,r18
    ba44:	8809883a 	mov	r4,r17
    ba48:	d9800015 	stw	r6,0(sp)
    ba4c:	00016040 	call	1604 <__umodsi3>
    ba50:	102d883a 	mov	r22,r2
    ba54:	8809883a 	mov	r4,r17
    ba58:	900b883a 	mov	r5,r18
    ba5c:	00015a00 	call	15a0 <__udivsi3>
    ba60:	b02c943a 	slli	r22,r22,16
    ba64:	e089383a 	mul	r4,fp,r2
    ba68:	843fffcc 	andi	r16,r16,65535
    ba6c:	85a0b03a 	or	r16,r16,r22
    ba70:	d9800017 	ldw	r6,0(sp)
    ba74:	8100042e 	bgeu	r16,r4,ba88 <__udivdi3+0x3bc>
    ba78:	85e1883a 	add	r16,r16,r23
    ba7c:	10ffffc4 	addi	r3,r2,-1
    ba80:	85c05e2e 	bgeu	r16,r23,bbfc <__udivdi3+0x530>
    ba84:	1805883a 	mov	r2,r3
    ba88:	300c943a 	slli	r6,r6,16
    ba8c:	a17fffcc 	andi	r5,r20,65535
    ba90:	a028d43a 	srli	r20,r20,16
    ba94:	3084b03a 	or	r2,r6,r2
    ba98:	10ffffcc 	andi	r3,r2,65535
    ba9c:	100cd43a 	srli	r6,r2,16
    baa0:	194f383a 	mul	r7,r3,r5
    baa4:	1d07383a 	mul	r3,r3,r20
    baa8:	314b383a 	mul	r5,r6,r5
    baac:	3810d43a 	srli	r8,r7,16
    bab0:	8121c83a 	sub	r16,r16,r4
    bab4:	1947883a 	add	r3,r3,r5
    bab8:	40c7883a 	add	r3,r8,r3
    babc:	350d383a 	mul	r6,r6,r20
    bac0:	1940022e 	bgeu	r3,r5,bacc <__udivdi3+0x400>
    bac4:	01000074 	movhi	r4,1
    bac8:	310d883a 	add	r6,r6,r4
    bacc:	1828d43a 	srli	r20,r3,16
    bad0:	a18d883a 	add	r6,r20,r6
    bad4:	81803e36 	bltu	r16,r6,bbd0 <__udivdi3+0x504>
    bad8:	81803826 	beq	r16,r6,bbbc <__udivdi3+0x4f0>
    badc:	0007883a 	mov	r3,zero
    bae0:	003fa206 	br	b96c <__alt_data_end+0xff00b96c>
    bae4:	88e2983a 	sll	r17,r17,r3
    bae8:	80a8d83a 	srl	r20,r16,r2
    baec:	80e0983a 	sll	r16,r16,r3
    baf0:	882ad43a 	srli	r21,r17,16
    baf4:	9884d83a 	srl	r2,r19,r2
    baf8:	a009883a 	mov	r4,r20
    bafc:	a80b883a 	mov	r5,r21
    bb00:	142eb03a 	or	r23,r2,r16
    bb04:	98e4983a 	sll	r18,r19,r3
    bb08:	00016040 	call	1604 <__umodsi3>
    bb0c:	a009883a 	mov	r4,r20
    bb10:	a80b883a 	mov	r5,r21
    bb14:	1021883a 	mov	r16,r2
    bb18:	00015a00 	call	15a0 <__udivsi3>
    bb1c:	1039883a 	mov	fp,r2
    bb20:	8d3fffcc 	andi	r20,r17,65535
    bb24:	8020943a 	slli	r16,r16,16
    bb28:	b804d43a 	srli	r2,r23,16
    bb2c:	a72d383a 	mul	r22,r20,fp
    bb30:	1404b03a 	or	r2,r2,r16
    bb34:	1580062e 	bgeu	r2,r22,bb50 <__udivdi3+0x484>
    bb38:	1445883a 	add	r2,r2,r17
    bb3c:	e0ffffc4 	addi	r3,fp,-1
    bb40:	14403836 	bltu	r2,r17,bc24 <__udivdi3+0x558>
    bb44:	1580372e 	bgeu	r2,r22,bc24 <__udivdi3+0x558>
    bb48:	e73fff84 	addi	fp,fp,-2
    bb4c:	1445883a 	add	r2,r2,r17
    bb50:	15adc83a 	sub	r22,r2,r22
    bb54:	a80b883a 	mov	r5,r21
    bb58:	b009883a 	mov	r4,r22
    bb5c:	00016040 	call	1604 <__umodsi3>
    bb60:	1027883a 	mov	r19,r2
    bb64:	b009883a 	mov	r4,r22
    bb68:	a80b883a 	mov	r5,r21
    bb6c:	00015a00 	call	15a0 <__udivsi3>
    bb70:	9826943a 	slli	r19,r19,16
    bb74:	a0a1383a 	mul	r16,r20,r2
    bb78:	b93fffcc 	andi	r4,r23,65535
    bb7c:	24c8b03a 	or	r4,r4,r19
    bb80:	2400062e 	bgeu	r4,r16,bb9c <__udivdi3+0x4d0>
    bb84:	2449883a 	add	r4,r4,r17
    bb88:	10ffffc4 	addi	r3,r2,-1
    bb8c:	24402336 	bltu	r4,r17,bc1c <__udivdi3+0x550>
    bb90:	2400222e 	bgeu	r4,r16,bc1c <__udivdi3+0x550>
    bb94:	10bfff84 	addi	r2,r2,-2
    bb98:	2449883a 	add	r4,r4,r17
    bb9c:	e038943a 	slli	fp,fp,16
    bba0:	2421c83a 	sub	r16,r4,r16
    bba4:	e086b03a 	or	r3,fp,r2
    bba8:	003f4306 	br	b8b8 <__alt_data_end+0xff00b8b8>
    bbac:	2005883a 	mov	r2,r4
    bbb0:	003f6906 	br	b958 <__alt_data_end+0xff00b958>
    bbb4:	1805883a 	mov	r2,r3
    bbb8:	003f0f06 	br	b7f8 <__alt_data_end+0xff00b7f8>
    bbbc:	1806943a 	slli	r3,r3,16
    bbc0:	9d66983a 	sll	r19,r19,r21
    bbc4:	39ffffcc 	andi	r7,r7,65535
    bbc8:	19c7883a 	add	r3,r3,r7
    bbcc:	98ffc32e 	bgeu	r19,r3,badc <__alt_data_end+0xff00badc>
    bbd0:	10bfffc4 	addi	r2,r2,-1
    bbd4:	003fc106 	br	badc <__alt_data_end+0xff00badc>
    bbd8:	00800604 	movi	r2,24
    bbdc:	003f1106 	br	b824 <__alt_data_end+0xff00b824>
    bbe0:	00800604 	movi	r2,24
    bbe4:	003f2706 	br	b884 <__alt_data_end+0xff00b884>
    bbe8:	00800604 	movi	r2,24
    bbec:	003ece06 	br	b728 <__alt_data_end+0xff00b728>
    bbf0:	0007883a 	mov	r3,zero
    bbf4:	00800044 	movi	r2,1
    bbf8:	003f5c06 	br	b96c <__alt_data_end+0xff00b96c>
    bbfc:	813fa12e 	bgeu	r16,r4,ba84 <__alt_data_end+0xff00ba84>
    bc00:	10bfff84 	addi	r2,r2,-2
    bc04:	85e1883a 	add	r16,r16,r23
    bc08:	003f9f06 	br	ba88 <__alt_data_end+0xff00ba88>
    bc0c:	1c7f8a2e 	bgeu	r3,r17,ba38 <__alt_data_end+0xff00ba38>
    bc10:	31bfff84 	addi	r6,r6,-2
    bc14:	1dc7883a 	add	r3,r3,r23
    bc18:	003f8806 	br	ba3c <__alt_data_end+0xff00ba3c>
    bc1c:	1805883a 	mov	r2,r3
    bc20:	003fde06 	br	bb9c <__alt_data_end+0xff00bb9c>
    bc24:	1839883a 	mov	fp,r3
    bc28:	003fc906 	br	bb50 <__alt_data_end+0xff00bb50>
    bc2c:	b5bfff84 	addi	r22,r22,-2
    bc30:	2449883a 	add	r4,r4,r17
    bc34:	003f3406 	br	b908 <__alt_data_end+0xff00b908>
    bc38:	b5bfff84 	addi	r22,r22,-2
    bc3c:	1445883a 	add	r2,r2,r17
    bc40:	003edb06 	br	b7b0 <__alt_data_end+0xff00b7b0>

0000bc44 <__umoddi3>:
    bc44:	defff404 	addi	sp,sp,-48
    bc48:	df000a15 	stw	fp,40(sp)
    bc4c:	dc400315 	stw	r17,12(sp)
    bc50:	dc000215 	stw	r16,8(sp)
    bc54:	dfc00b15 	stw	ra,44(sp)
    bc58:	ddc00915 	stw	r23,36(sp)
    bc5c:	dd800815 	stw	r22,32(sp)
    bc60:	dd400715 	stw	r21,28(sp)
    bc64:	dd000615 	stw	r20,24(sp)
    bc68:	dcc00515 	stw	r19,20(sp)
    bc6c:	dc800415 	stw	r18,16(sp)
    bc70:	2021883a 	mov	r16,r4
    bc74:	2823883a 	mov	r17,r5
    bc78:	2839883a 	mov	fp,r5
    bc7c:	38003c1e 	bne	r7,zero,bd70 <__umoddi3+0x12c>
    bc80:	3027883a 	mov	r19,r6
    bc84:	2029883a 	mov	r20,r4
    bc88:	2980512e 	bgeu	r5,r6,bdd0 <__umoddi3+0x18c>
    bc8c:	00bfffd4 	movui	r2,65535
    bc90:	11809a36 	bltu	r2,r6,befc <__umoddi3+0x2b8>
    bc94:	01003fc4 	movi	r4,255
    bc98:	2189803a 	cmpltu	r4,r4,r6
    bc9c:	200890fa 	slli	r4,r4,3
    bca0:	3104d83a 	srl	r2,r6,r4
    bca4:	00c00074 	movhi	r3,1
    bca8:	18c3eb04 	addi	r3,r3,4012
    bcac:	1885883a 	add	r2,r3,r2
    bcb0:	10c00003 	ldbu	r3,0(r2)
    bcb4:	00800804 	movi	r2,32
    bcb8:	1909883a 	add	r4,r3,r4
    bcbc:	1125c83a 	sub	r18,r2,r4
    bcc0:	90000526 	beq	r18,zero,bcd8 <__umoddi3+0x94>
    bcc4:	8ca2983a 	sll	r17,r17,r18
    bcc8:	8108d83a 	srl	r4,r16,r4
    bccc:	34a6983a 	sll	r19,r6,r18
    bcd0:	84a8983a 	sll	r20,r16,r18
    bcd4:	2478b03a 	or	fp,r4,r17
    bcd8:	982ed43a 	srli	r23,r19,16
    bcdc:	e009883a 	mov	r4,fp
    bce0:	9dbfffcc 	andi	r22,r19,65535
    bce4:	b80b883a 	mov	r5,r23
    bce8:	00016040 	call	1604 <__umodsi3>
    bcec:	e009883a 	mov	r4,fp
    bcf0:	b80b883a 	mov	r5,r23
    bcf4:	102b883a 	mov	r21,r2
    bcf8:	00015a00 	call	15a0 <__udivsi3>
    bcfc:	a806943a 	slli	r3,r21,16
    bd00:	a008d43a 	srli	r4,r20,16
    bd04:	b085383a 	mul	r2,r22,r2
    bd08:	20c8b03a 	or	r4,r4,r3
    bd0c:	2080032e 	bgeu	r4,r2,bd1c <__umoddi3+0xd8>
    bd10:	24c9883a 	add	r4,r4,r19
    bd14:	24c00136 	bltu	r4,r19,bd1c <__umoddi3+0xd8>
    bd18:	20811036 	bltu	r4,r2,c15c <__umoddi3+0x518>
    bd1c:	20abc83a 	sub	r21,r4,r2
    bd20:	b80b883a 	mov	r5,r23
    bd24:	a809883a 	mov	r4,r21
    bd28:	00016040 	call	1604 <__umodsi3>
    bd2c:	1023883a 	mov	r17,r2
    bd30:	b80b883a 	mov	r5,r23
    bd34:	a809883a 	mov	r4,r21
    bd38:	00015a00 	call	15a0 <__udivsi3>
    bd3c:	8822943a 	slli	r17,r17,16
    bd40:	b085383a 	mul	r2,r22,r2
    bd44:	a0ffffcc 	andi	r3,r20,65535
    bd48:	1c46b03a 	or	r3,r3,r17
    bd4c:	1880042e 	bgeu	r3,r2,bd60 <__umoddi3+0x11c>
    bd50:	1cc7883a 	add	r3,r3,r19
    bd54:	1cc00236 	bltu	r3,r19,bd60 <__umoddi3+0x11c>
    bd58:	1880012e 	bgeu	r3,r2,bd60 <__umoddi3+0x11c>
    bd5c:	1cc7883a 	add	r3,r3,r19
    bd60:	1885c83a 	sub	r2,r3,r2
    bd64:	1484d83a 	srl	r2,r2,r18
    bd68:	0007883a 	mov	r3,zero
    bd6c:	00004f06 	br	beac <__umoddi3+0x268>
    bd70:	29c04c36 	bltu	r5,r7,bea4 <__umoddi3+0x260>
    bd74:	00bfffd4 	movui	r2,65535
    bd78:	11c0582e 	bgeu	r2,r7,bedc <__umoddi3+0x298>
    bd7c:	00804034 	movhi	r2,256
    bd80:	10bfffc4 	addi	r2,r2,-1
    bd84:	11c0e736 	bltu	r2,r7,c124 <__umoddi3+0x4e0>
    bd88:	01000404 	movi	r4,16
    bd8c:	3904d83a 	srl	r2,r7,r4
    bd90:	00c00074 	movhi	r3,1
    bd94:	18c3eb04 	addi	r3,r3,4012
    bd98:	1885883a 	add	r2,r3,r2
    bd9c:	14c00003 	ldbu	r19,0(r2)
    bda0:	00c00804 	movi	r3,32
    bda4:	9927883a 	add	r19,r19,r4
    bda8:	1ce9c83a 	sub	r20,r3,r19
    bdac:	a000581e 	bne	r20,zero,bf10 <__umoddi3+0x2cc>
    bdb0:	3c400136 	bltu	r7,r17,bdb8 <__umoddi3+0x174>
    bdb4:	8180eb36 	bltu	r16,r6,c164 <__umoddi3+0x520>
    bdb8:	8185c83a 	sub	r2,r16,r6
    bdbc:	89e3c83a 	sub	r17,r17,r7
    bdc0:	8089803a 	cmpltu	r4,r16,r2
    bdc4:	8939c83a 	sub	fp,r17,r4
    bdc8:	e007883a 	mov	r3,fp
    bdcc:	00003706 	br	beac <__umoddi3+0x268>
    bdd0:	3000041e 	bne	r6,zero,bde4 <__umoddi3+0x1a0>
    bdd4:	000b883a 	mov	r5,zero
    bdd8:	01000044 	movi	r4,1
    bddc:	00015a00 	call	15a0 <__udivsi3>
    bde0:	1027883a 	mov	r19,r2
    bde4:	00bfffd4 	movui	r2,65535
    bde8:	14c0402e 	bgeu	r2,r19,beec <__umoddi3+0x2a8>
    bdec:	00804034 	movhi	r2,256
    bdf0:	10bfffc4 	addi	r2,r2,-1
    bdf4:	14c0cd36 	bltu	r2,r19,c12c <__umoddi3+0x4e8>
    bdf8:	00800404 	movi	r2,16
    bdfc:	9886d83a 	srl	r3,r19,r2
    be00:	01000074 	movhi	r4,1
    be04:	2103eb04 	addi	r4,r4,4012
    be08:	20c7883a 	add	r3,r4,r3
    be0c:	18c00003 	ldbu	r3,0(r3)
    be10:	1887883a 	add	r3,r3,r2
    be14:	00800804 	movi	r2,32
    be18:	10e5c83a 	sub	r18,r2,r3
    be1c:	9000901e 	bne	r18,zero,c060 <__umoddi3+0x41c>
    be20:	982cd43a 	srli	r22,r19,16
    be24:	8ce3c83a 	sub	r17,r17,r19
    be28:	9d7fffcc 	andi	r21,r19,65535
    be2c:	b00b883a 	mov	r5,r22
    be30:	8809883a 	mov	r4,r17
    be34:	00016040 	call	1604 <__umodsi3>
    be38:	8809883a 	mov	r4,r17
    be3c:	b00b883a 	mov	r5,r22
    be40:	1021883a 	mov	r16,r2
    be44:	00015a00 	call	15a0 <__udivsi3>
    be48:	8006943a 	slli	r3,r16,16
    be4c:	a008d43a 	srli	r4,r20,16
    be50:	1545383a 	mul	r2,r2,r21
    be54:	20c8b03a 	or	r4,r4,r3
    be58:	2080042e 	bgeu	r4,r2,be6c <__umoddi3+0x228>
    be5c:	24c9883a 	add	r4,r4,r19
    be60:	24c00236 	bltu	r4,r19,be6c <__umoddi3+0x228>
    be64:	2080012e 	bgeu	r4,r2,be6c <__umoddi3+0x228>
    be68:	24c9883a 	add	r4,r4,r19
    be6c:	20a1c83a 	sub	r16,r4,r2
    be70:	b00b883a 	mov	r5,r22
    be74:	8009883a 	mov	r4,r16
    be78:	00016040 	call	1604 <__umodsi3>
    be7c:	1023883a 	mov	r17,r2
    be80:	b00b883a 	mov	r5,r22
    be84:	8009883a 	mov	r4,r16
    be88:	00015a00 	call	15a0 <__udivsi3>
    be8c:	8822943a 	slli	r17,r17,16
    be90:	1545383a 	mul	r2,r2,r21
    be94:	a53fffcc 	andi	r20,r20,65535
    be98:	a446b03a 	or	r3,r20,r17
    be9c:	18bfb02e 	bgeu	r3,r2,bd60 <__alt_data_end+0xff00bd60>
    bea0:	003fab06 	br	bd50 <__alt_data_end+0xff00bd50>
    bea4:	2005883a 	mov	r2,r4
    bea8:	2807883a 	mov	r3,r5
    beac:	dfc00b17 	ldw	ra,44(sp)
    beb0:	df000a17 	ldw	fp,40(sp)
    beb4:	ddc00917 	ldw	r23,36(sp)
    beb8:	dd800817 	ldw	r22,32(sp)
    bebc:	dd400717 	ldw	r21,28(sp)
    bec0:	dd000617 	ldw	r20,24(sp)
    bec4:	dcc00517 	ldw	r19,20(sp)
    bec8:	dc800417 	ldw	r18,16(sp)
    becc:	dc400317 	ldw	r17,12(sp)
    bed0:	dc000217 	ldw	r16,8(sp)
    bed4:	dec00c04 	addi	sp,sp,48
    bed8:	f800283a 	ret
    bedc:	04c03fc4 	movi	r19,255
    bee0:	99c9803a 	cmpltu	r4,r19,r7
    bee4:	200890fa 	slli	r4,r4,3
    bee8:	003fa806 	br	bd8c <__alt_data_end+0xff00bd8c>
    beec:	00803fc4 	movi	r2,255
    bef0:	14c5803a 	cmpltu	r2,r2,r19
    bef4:	100490fa 	slli	r2,r2,3
    bef8:	003fc006 	br	bdfc <__alt_data_end+0xff00bdfc>
    befc:	00804034 	movhi	r2,256
    bf00:	10bfffc4 	addi	r2,r2,-1
    bf04:	11808b36 	bltu	r2,r6,c134 <__umoddi3+0x4f0>
    bf08:	01000404 	movi	r4,16
    bf0c:	003f6406 	br	bca0 <__alt_data_end+0xff00bca0>
    bf10:	34c4d83a 	srl	r2,r6,r19
    bf14:	3d0e983a 	sll	r7,r7,r20
    bf18:	8cf8d83a 	srl	fp,r17,r19
    bf1c:	8d10983a 	sll	r8,r17,r20
    bf20:	38aab03a 	or	r21,r7,r2
    bf24:	a82cd43a 	srli	r22,r21,16
    bf28:	84e2d83a 	srl	r17,r16,r19
    bf2c:	e009883a 	mov	r4,fp
    bf30:	b00b883a 	mov	r5,r22
    bf34:	8a22b03a 	or	r17,r17,r8
    bf38:	3524983a 	sll	r18,r6,r20
    bf3c:	00016040 	call	1604 <__umodsi3>
    bf40:	e009883a 	mov	r4,fp
    bf44:	b00b883a 	mov	r5,r22
    bf48:	102f883a 	mov	r23,r2
    bf4c:	00015a00 	call	15a0 <__udivsi3>
    bf50:	100d883a 	mov	r6,r2
    bf54:	b808943a 	slli	r4,r23,16
    bf58:	aa3fffcc 	andi	r8,r21,65535
    bf5c:	8804d43a 	srli	r2,r17,16
    bf60:	41af383a 	mul	r23,r8,r6
    bf64:	8520983a 	sll	r16,r16,r20
    bf68:	1104b03a 	or	r2,r2,r4
    bf6c:	15c0042e 	bgeu	r2,r23,bf80 <__umoddi3+0x33c>
    bf70:	1545883a 	add	r2,r2,r21
    bf74:	30ffffc4 	addi	r3,r6,-1
    bf78:	1540742e 	bgeu	r2,r21,c14c <__umoddi3+0x508>
    bf7c:	180d883a 	mov	r6,r3
    bf80:	15efc83a 	sub	r23,r2,r23
    bf84:	b00b883a 	mov	r5,r22
    bf88:	b809883a 	mov	r4,r23
    bf8c:	d9800115 	stw	r6,4(sp)
    bf90:	da000015 	stw	r8,0(sp)
    bf94:	00016040 	call	1604 <__umodsi3>
    bf98:	b00b883a 	mov	r5,r22
    bf9c:	b809883a 	mov	r4,r23
    bfa0:	1039883a 	mov	fp,r2
    bfa4:	00015a00 	call	15a0 <__udivsi3>
    bfa8:	da000017 	ldw	r8,0(sp)
    bfac:	e038943a 	slli	fp,fp,16
    bfb0:	100b883a 	mov	r5,r2
    bfb4:	4089383a 	mul	r4,r8,r2
    bfb8:	8a3fffcc 	andi	r8,r17,65535
    bfbc:	4710b03a 	or	r8,r8,fp
    bfc0:	d9800117 	ldw	r6,4(sp)
    bfc4:	4100042e 	bgeu	r8,r4,bfd8 <__umoddi3+0x394>
    bfc8:	4551883a 	add	r8,r8,r21
    bfcc:	10bfffc4 	addi	r2,r2,-1
    bfd0:	45405a2e 	bgeu	r8,r21,c13c <__umoddi3+0x4f8>
    bfd4:	100b883a 	mov	r5,r2
    bfd8:	300c943a 	slli	r6,r6,16
    bfdc:	91ffffcc 	andi	r7,r18,65535
    bfe0:	9004d43a 	srli	r2,r18,16
    bfe4:	314cb03a 	or	r6,r6,r5
    bfe8:	317fffcc 	andi	r5,r6,65535
    bfec:	300cd43a 	srli	r6,r6,16
    bff0:	29d3383a 	mul	r9,r5,r7
    bff4:	288b383a 	mul	r5,r5,r2
    bff8:	31cf383a 	mul	r7,r6,r7
    bffc:	4806d43a 	srli	r3,r9,16
    c000:	4111c83a 	sub	r8,r8,r4
    c004:	29cb883a 	add	r5,r5,r7
    c008:	194b883a 	add	r5,r3,r5
    c00c:	3085383a 	mul	r2,r6,r2
    c010:	29c0022e 	bgeu	r5,r7,c01c <__umoddi3+0x3d8>
    c014:	00c00074 	movhi	r3,1
    c018:	10c5883a 	add	r2,r2,r3
    c01c:	2808d43a 	srli	r4,r5,16
    c020:	280a943a 	slli	r5,r5,16
    c024:	4a7fffcc 	andi	r9,r9,65535
    c028:	2085883a 	add	r2,r4,r2
    c02c:	2a4b883a 	add	r5,r5,r9
    c030:	40803636 	bltu	r8,r2,c10c <__umoddi3+0x4c8>
    c034:	40804d26 	beq	r8,r2,c16c <__umoddi3+0x528>
    c038:	4089c83a 	sub	r4,r8,r2
    c03c:	280f883a 	mov	r7,r5
    c040:	81cfc83a 	sub	r7,r16,r7
    c044:	81c7803a 	cmpltu	r3,r16,r7
    c048:	20c7c83a 	sub	r3,r4,r3
    c04c:	1cc4983a 	sll	r2,r3,r19
    c050:	3d0ed83a 	srl	r7,r7,r20
    c054:	1d06d83a 	srl	r3,r3,r20
    c058:	11c4b03a 	or	r2,r2,r7
    c05c:	003f9306 	br	beac <__alt_data_end+0xff00beac>
    c060:	9ca6983a 	sll	r19,r19,r18
    c064:	88e8d83a 	srl	r20,r17,r3
    c068:	80c4d83a 	srl	r2,r16,r3
    c06c:	982cd43a 	srli	r22,r19,16
    c070:	8ca2983a 	sll	r17,r17,r18
    c074:	a009883a 	mov	r4,r20
    c078:	b00b883a 	mov	r5,r22
    c07c:	1478b03a 	or	fp,r2,r17
    c080:	00016040 	call	1604 <__umodsi3>
    c084:	a009883a 	mov	r4,r20
    c088:	b00b883a 	mov	r5,r22
    c08c:	1023883a 	mov	r17,r2
    c090:	00015a00 	call	15a0 <__udivsi3>
    c094:	9d7fffcc 	andi	r21,r19,65535
    c098:	880a943a 	slli	r5,r17,16
    c09c:	e008d43a 	srli	r4,fp,16
    c0a0:	a885383a 	mul	r2,r21,r2
    c0a4:	84a8983a 	sll	r20,r16,r18
    c0a8:	2148b03a 	or	r4,r4,r5
    c0ac:	2080042e 	bgeu	r4,r2,c0c0 <__umoddi3+0x47c>
    c0b0:	24c9883a 	add	r4,r4,r19
    c0b4:	24c00236 	bltu	r4,r19,c0c0 <__umoddi3+0x47c>
    c0b8:	2080012e 	bgeu	r4,r2,c0c0 <__umoddi3+0x47c>
    c0bc:	24c9883a 	add	r4,r4,r19
    c0c0:	20a3c83a 	sub	r17,r4,r2
    c0c4:	b00b883a 	mov	r5,r22
    c0c8:	8809883a 	mov	r4,r17
    c0cc:	00016040 	call	1604 <__umodsi3>
    c0d0:	102f883a 	mov	r23,r2
    c0d4:	8809883a 	mov	r4,r17
    c0d8:	b00b883a 	mov	r5,r22
    c0dc:	00015a00 	call	15a0 <__udivsi3>
    c0e0:	b82e943a 	slli	r23,r23,16
    c0e4:	a885383a 	mul	r2,r21,r2
    c0e8:	e13fffcc 	andi	r4,fp,65535
    c0ec:	25c8b03a 	or	r4,r4,r23
    c0f0:	2080042e 	bgeu	r4,r2,c104 <__umoddi3+0x4c0>
    c0f4:	24c9883a 	add	r4,r4,r19
    c0f8:	24c00236 	bltu	r4,r19,c104 <__umoddi3+0x4c0>
    c0fc:	2080012e 	bgeu	r4,r2,c104 <__umoddi3+0x4c0>
    c100:	24c9883a 	add	r4,r4,r19
    c104:	20a3c83a 	sub	r17,r4,r2
    c108:	003f4806 	br	be2c <__alt_data_end+0xff00be2c>
    c10c:	2c8fc83a 	sub	r7,r5,r18
    c110:	1545c83a 	sub	r2,r2,r21
    c114:	29cb803a 	cmpltu	r5,r5,r7
    c118:	1145c83a 	sub	r2,r2,r5
    c11c:	4089c83a 	sub	r4,r8,r2
    c120:	003fc706 	br	c040 <__alt_data_end+0xff00c040>
    c124:	01000604 	movi	r4,24
    c128:	003f1806 	br	bd8c <__alt_data_end+0xff00bd8c>
    c12c:	00800604 	movi	r2,24
    c130:	003f3206 	br	bdfc <__alt_data_end+0xff00bdfc>
    c134:	01000604 	movi	r4,24
    c138:	003ed906 	br	bca0 <__alt_data_end+0xff00bca0>
    c13c:	413fa52e 	bgeu	r8,r4,bfd4 <__alt_data_end+0xff00bfd4>
    c140:	297fff84 	addi	r5,r5,-2
    c144:	4551883a 	add	r8,r8,r21
    c148:	003fa306 	br	bfd8 <__alt_data_end+0xff00bfd8>
    c14c:	15ff8b2e 	bgeu	r2,r23,bf7c <__alt_data_end+0xff00bf7c>
    c150:	31bfff84 	addi	r6,r6,-2
    c154:	1545883a 	add	r2,r2,r21
    c158:	003f8906 	br	bf80 <__alt_data_end+0xff00bf80>
    c15c:	24c9883a 	add	r4,r4,r19
    c160:	003eee06 	br	bd1c <__alt_data_end+0xff00bd1c>
    c164:	8005883a 	mov	r2,r16
    c168:	003f1706 	br	bdc8 <__alt_data_end+0xff00bdc8>
    c16c:	817fe736 	bltu	r16,r5,c10c <__alt_data_end+0xff00c10c>
    c170:	280f883a 	mov	r7,r5
    c174:	0009883a 	mov	r4,zero
    c178:	003fb106 	br	c040 <__alt_data_end+0xff00c040>

0000c17c <__adddf3>:
    c17c:	02c00434 	movhi	r11,16
    c180:	5affffc4 	addi	r11,r11,-1
    c184:	2806d7fa 	srli	r3,r5,31
    c188:	2ad4703a 	and	r10,r5,r11
    c18c:	3ad2703a 	and	r9,r7,r11
    c190:	3804d53a 	srli	r2,r7,20
    c194:	3018d77a 	srli	r12,r6,29
    c198:	280ad53a 	srli	r5,r5,20
    c19c:	501490fa 	slli	r10,r10,3
    c1a0:	2010d77a 	srli	r8,r4,29
    c1a4:	481290fa 	slli	r9,r9,3
    c1a8:	380ed7fa 	srli	r7,r7,31
    c1ac:	defffb04 	addi	sp,sp,-20
    c1b0:	dc800215 	stw	r18,8(sp)
    c1b4:	dc400115 	stw	r17,4(sp)
    c1b8:	dc000015 	stw	r16,0(sp)
    c1bc:	dfc00415 	stw	ra,16(sp)
    c1c0:	dcc00315 	stw	r19,12(sp)
    c1c4:	1c803fcc 	andi	r18,r3,255
    c1c8:	2c01ffcc 	andi	r16,r5,2047
    c1cc:	5210b03a 	or	r8,r10,r8
    c1d0:	202290fa 	slli	r17,r4,3
    c1d4:	1081ffcc 	andi	r2,r2,2047
    c1d8:	4b12b03a 	or	r9,r9,r12
    c1dc:	300c90fa 	slli	r6,r6,3
    c1e0:	91c07526 	beq	r18,r7,c3b8 <__adddf3+0x23c>
    c1e4:	8087c83a 	sub	r3,r16,r2
    c1e8:	00c0ab0e 	bge	zero,r3,c498 <__adddf3+0x31c>
    c1ec:	10002a1e 	bne	r2,zero,c298 <__adddf3+0x11c>
    c1f0:	4984b03a 	or	r2,r9,r6
    c1f4:	1000961e 	bne	r2,zero,c450 <__adddf3+0x2d4>
    c1f8:	888001cc 	andi	r2,r17,7
    c1fc:	10000726 	beq	r2,zero,c21c <__adddf3+0xa0>
    c200:	888003cc 	andi	r2,r17,15
    c204:	00c00104 	movi	r3,4
    c208:	10c00426 	beq	r2,r3,c21c <__adddf3+0xa0>
    c20c:	88c7883a 	add	r3,r17,r3
    c210:	1c63803a 	cmpltu	r17,r3,r17
    c214:	4451883a 	add	r8,r8,r17
    c218:	1823883a 	mov	r17,r3
    c21c:	4080202c 	andhi	r2,r8,128
    c220:	10005926 	beq	r2,zero,c388 <__adddf3+0x20c>
    c224:	84000044 	addi	r16,r16,1
    c228:	0081ffc4 	movi	r2,2047
    c22c:	8080ba26 	beq	r16,r2,c518 <__adddf3+0x39c>
    c230:	00bfe034 	movhi	r2,65408
    c234:	10bfffc4 	addi	r2,r2,-1
    c238:	4090703a 	and	r8,r8,r2
    c23c:	4004977a 	slli	r2,r8,29
    c240:	4010927a 	slli	r8,r8,9
    c244:	8822d0fa 	srli	r17,r17,3
    c248:	8401ffcc 	andi	r16,r16,2047
    c24c:	4010d33a 	srli	r8,r8,12
    c250:	9007883a 	mov	r3,r18
    c254:	1444b03a 	or	r2,r2,r17
    c258:	8401ffcc 	andi	r16,r16,2047
    c25c:	8020953a 	slli	r16,r16,20
    c260:	18c03fcc 	andi	r3,r3,255
    c264:	01000434 	movhi	r4,16
    c268:	213fffc4 	addi	r4,r4,-1
    c26c:	180697fa 	slli	r3,r3,31
    c270:	4110703a 	and	r8,r8,r4
    c274:	4410b03a 	or	r8,r8,r16
    c278:	40c6b03a 	or	r3,r8,r3
    c27c:	dfc00417 	ldw	ra,16(sp)
    c280:	dcc00317 	ldw	r19,12(sp)
    c284:	dc800217 	ldw	r18,8(sp)
    c288:	dc400117 	ldw	r17,4(sp)
    c28c:	dc000017 	ldw	r16,0(sp)
    c290:	dec00504 	addi	sp,sp,20
    c294:	f800283a 	ret
    c298:	0081ffc4 	movi	r2,2047
    c29c:	80bfd626 	beq	r16,r2,c1f8 <__alt_data_end+0xff00c1f8>
    c2a0:	4a402034 	orhi	r9,r9,128
    c2a4:	00800e04 	movi	r2,56
    c2a8:	10c09f16 	blt	r2,r3,c528 <__adddf3+0x3ac>
    c2ac:	008007c4 	movi	r2,31
    c2b0:	10c0c216 	blt	r2,r3,c5bc <__adddf3+0x440>
    c2b4:	00800804 	movi	r2,32
    c2b8:	10c5c83a 	sub	r2,r2,r3
    c2bc:	488a983a 	sll	r5,r9,r2
    c2c0:	30c8d83a 	srl	r4,r6,r3
    c2c4:	3084983a 	sll	r2,r6,r2
    c2c8:	48c6d83a 	srl	r3,r9,r3
    c2cc:	290cb03a 	or	r6,r5,r4
    c2d0:	1004c03a 	cmpne	r2,r2,zero
    c2d4:	308cb03a 	or	r6,r6,r2
    c2d8:	898dc83a 	sub	r6,r17,r6
    c2dc:	89a3803a 	cmpltu	r17,r17,r6
    c2e0:	40d1c83a 	sub	r8,r8,r3
    c2e4:	4451c83a 	sub	r8,r8,r17
    c2e8:	3023883a 	mov	r17,r6
    c2ec:	4080202c 	andhi	r2,r8,128
    c2f0:	10002326 	beq	r2,zero,c380 <__adddf3+0x204>
    c2f4:	04c02034 	movhi	r19,128
    c2f8:	9cffffc4 	addi	r19,r19,-1
    c2fc:	44e6703a 	and	r19,r8,r19
    c300:	98007626 	beq	r19,zero,c4dc <__adddf3+0x360>
    c304:	9809883a 	mov	r4,r19
    c308:	0001fec0 	call	1fec <__clzsi2>
    c30c:	10fffe04 	addi	r3,r2,-8
    c310:	010007c4 	movi	r4,31
    c314:	20c07716 	blt	r4,r3,c4f4 <__adddf3+0x378>
    c318:	00800804 	movi	r2,32
    c31c:	10c5c83a 	sub	r2,r2,r3
    c320:	8884d83a 	srl	r2,r17,r2
    c324:	98d0983a 	sll	r8,r19,r3
    c328:	88e2983a 	sll	r17,r17,r3
    c32c:	1204b03a 	or	r2,r2,r8
    c330:	1c007416 	blt	r3,r16,c504 <__adddf3+0x388>
    c334:	1c21c83a 	sub	r16,r3,r16
    c338:	82000044 	addi	r8,r16,1
    c33c:	00c007c4 	movi	r3,31
    c340:	1a009116 	blt	r3,r8,c588 <__adddf3+0x40c>
    c344:	00c00804 	movi	r3,32
    c348:	1a07c83a 	sub	r3,r3,r8
    c34c:	8a08d83a 	srl	r4,r17,r8
    c350:	88e2983a 	sll	r17,r17,r3
    c354:	10c6983a 	sll	r3,r2,r3
    c358:	1210d83a 	srl	r8,r2,r8
    c35c:	8804c03a 	cmpne	r2,r17,zero
    c360:	1906b03a 	or	r3,r3,r4
    c364:	18a2b03a 	or	r17,r3,r2
    c368:	0021883a 	mov	r16,zero
    c36c:	003fa206 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c370:	1890b03a 	or	r8,r3,r2
    c374:	40017d26 	beq	r8,zero,c96c <__adddf3+0x7f0>
    c378:	1011883a 	mov	r8,r2
    c37c:	1823883a 	mov	r17,r3
    c380:	888001cc 	andi	r2,r17,7
    c384:	103f9e1e 	bne	r2,zero,c200 <__alt_data_end+0xff00c200>
    c388:	4004977a 	slli	r2,r8,29
    c38c:	8822d0fa 	srli	r17,r17,3
    c390:	4010d0fa 	srli	r8,r8,3
    c394:	9007883a 	mov	r3,r18
    c398:	1444b03a 	or	r2,r2,r17
    c39c:	0101ffc4 	movi	r4,2047
    c3a0:	81002426 	beq	r16,r4,c434 <__adddf3+0x2b8>
    c3a4:	8120703a 	and	r16,r16,r4
    c3a8:	01000434 	movhi	r4,16
    c3ac:	213fffc4 	addi	r4,r4,-1
    c3b0:	4110703a 	and	r8,r8,r4
    c3b4:	003fa806 	br	c258 <__alt_data_end+0xff00c258>
    c3b8:	8089c83a 	sub	r4,r16,r2
    c3bc:	01005e0e 	bge	zero,r4,c538 <__adddf3+0x3bc>
    c3c0:	10002b26 	beq	r2,zero,c470 <__adddf3+0x2f4>
    c3c4:	0081ffc4 	movi	r2,2047
    c3c8:	80bf8b26 	beq	r16,r2,c1f8 <__alt_data_end+0xff00c1f8>
    c3cc:	4a402034 	orhi	r9,r9,128
    c3d0:	00800e04 	movi	r2,56
    c3d4:	1100a40e 	bge	r2,r4,c668 <__adddf3+0x4ec>
    c3d8:	498cb03a 	or	r6,r9,r6
    c3dc:	300ac03a 	cmpne	r5,r6,zero
    c3e0:	0013883a 	mov	r9,zero
    c3e4:	2c4b883a 	add	r5,r5,r17
    c3e8:	2c63803a 	cmpltu	r17,r5,r17
    c3ec:	4a11883a 	add	r8,r9,r8
    c3f0:	8a11883a 	add	r8,r17,r8
    c3f4:	2823883a 	mov	r17,r5
    c3f8:	4080202c 	andhi	r2,r8,128
    c3fc:	103fe026 	beq	r2,zero,c380 <__alt_data_end+0xff00c380>
    c400:	84000044 	addi	r16,r16,1
    c404:	0081ffc4 	movi	r2,2047
    c408:	8080d226 	beq	r16,r2,c754 <__adddf3+0x5d8>
    c40c:	00bfe034 	movhi	r2,65408
    c410:	10bfffc4 	addi	r2,r2,-1
    c414:	4090703a 	and	r8,r8,r2
    c418:	880ad07a 	srli	r5,r17,1
    c41c:	400897fa 	slli	r4,r8,31
    c420:	88c0004c 	andi	r3,r17,1
    c424:	28e2b03a 	or	r17,r5,r3
    c428:	4010d07a 	srli	r8,r8,1
    c42c:	2462b03a 	or	r17,r4,r17
    c430:	003f7106 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c434:	4088b03a 	or	r4,r8,r2
    c438:	20014526 	beq	r4,zero,c950 <__adddf3+0x7d4>
    c43c:	01000434 	movhi	r4,16
    c440:	42000234 	orhi	r8,r8,8
    c444:	213fffc4 	addi	r4,r4,-1
    c448:	4110703a 	and	r8,r8,r4
    c44c:	003f8206 	br	c258 <__alt_data_end+0xff00c258>
    c450:	18ffffc4 	addi	r3,r3,-1
    c454:	1800491e 	bne	r3,zero,c57c <__adddf3+0x400>
    c458:	898bc83a 	sub	r5,r17,r6
    c45c:	8963803a 	cmpltu	r17,r17,r5
    c460:	4251c83a 	sub	r8,r8,r9
    c464:	4451c83a 	sub	r8,r8,r17
    c468:	2823883a 	mov	r17,r5
    c46c:	003f9f06 	br	c2ec <__alt_data_end+0xff00c2ec>
    c470:	4984b03a 	or	r2,r9,r6
    c474:	103f6026 	beq	r2,zero,c1f8 <__alt_data_end+0xff00c1f8>
    c478:	213fffc4 	addi	r4,r4,-1
    c47c:	2000931e 	bne	r4,zero,c6cc <__adddf3+0x550>
    c480:	898d883a 	add	r6,r17,r6
    c484:	3463803a 	cmpltu	r17,r6,r17
    c488:	4251883a 	add	r8,r8,r9
    c48c:	8a11883a 	add	r8,r17,r8
    c490:	3023883a 	mov	r17,r6
    c494:	003fd806 	br	c3f8 <__alt_data_end+0xff00c3f8>
    c498:	1800541e 	bne	r3,zero,c5ec <__adddf3+0x470>
    c49c:	80800044 	addi	r2,r16,1
    c4a0:	1081ffcc 	andi	r2,r2,2047
    c4a4:	00c00044 	movi	r3,1
    c4a8:	1880a00e 	bge	r3,r2,c72c <__adddf3+0x5b0>
    c4ac:	8989c83a 	sub	r4,r17,r6
    c4b0:	8905803a 	cmpltu	r2,r17,r4
    c4b4:	4267c83a 	sub	r19,r8,r9
    c4b8:	98a7c83a 	sub	r19,r19,r2
    c4bc:	9880202c 	andhi	r2,r19,128
    c4c0:	10006326 	beq	r2,zero,c650 <__adddf3+0x4d4>
    c4c4:	3463c83a 	sub	r17,r6,r17
    c4c8:	4a07c83a 	sub	r3,r9,r8
    c4cc:	344d803a 	cmpltu	r6,r6,r17
    c4d0:	19a7c83a 	sub	r19,r3,r6
    c4d4:	3825883a 	mov	r18,r7
    c4d8:	983f8a1e 	bne	r19,zero,c304 <__alt_data_end+0xff00c304>
    c4dc:	8809883a 	mov	r4,r17
    c4e0:	0001fec0 	call	1fec <__clzsi2>
    c4e4:	10800804 	addi	r2,r2,32
    c4e8:	10fffe04 	addi	r3,r2,-8
    c4ec:	010007c4 	movi	r4,31
    c4f0:	20ff890e 	bge	r4,r3,c318 <__alt_data_end+0xff00c318>
    c4f4:	10bff604 	addi	r2,r2,-40
    c4f8:	8884983a 	sll	r2,r17,r2
    c4fc:	0023883a 	mov	r17,zero
    c500:	1c3f8c0e 	bge	r3,r16,c334 <__alt_data_end+0xff00c334>
    c504:	023fe034 	movhi	r8,65408
    c508:	423fffc4 	addi	r8,r8,-1
    c50c:	80e1c83a 	sub	r16,r16,r3
    c510:	1210703a 	and	r8,r2,r8
    c514:	003f3806 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c518:	9007883a 	mov	r3,r18
    c51c:	0011883a 	mov	r8,zero
    c520:	0005883a 	mov	r2,zero
    c524:	003f4c06 	br	c258 <__alt_data_end+0xff00c258>
    c528:	498cb03a 	or	r6,r9,r6
    c52c:	300cc03a 	cmpne	r6,r6,zero
    c530:	0007883a 	mov	r3,zero
    c534:	003f6806 	br	c2d8 <__alt_data_end+0xff00c2d8>
    c538:	20009c1e 	bne	r4,zero,c7ac <__adddf3+0x630>
    c53c:	80800044 	addi	r2,r16,1
    c540:	1141ffcc 	andi	r5,r2,2047
    c544:	01000044 	movi	r4,1
    c548:	2140670e 	bge	r4,r5,c6e8 <__adddf3+0x56c>
    c54c:	0101ffc4 	movi	r4,2047
    c550:	11007f26 	beq	r2,r4,c750 <__adddf3+0x5d4>
    c554:	898d883a 	add	r6,r17,r6
    c558:	4247883a 	add	r3,r8,r9
    c55c:	3451803a 	cmpltu	r8,r6,r17
    c560:	40d1883a 	add	r8,r8,r3
    c564:	402297fa 	slli	r17,r8,31
    c568:	300cd07a 	srli	r6,r6,1
    c56c:	4010d07a 	srli	r8,r8,1
    c570:	1021883a 	mov	r16,r2
    c574:	89a2b03a 	or	r17,r17,r6
    c578:	003f1f06 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c57c:	0081ffc4 	movi	r2,2047
    c580:	80bf481e 	bne	r16,r2,c2a4 <__alt_data_end+0xff00c2a4>
    c584:	003f1c06 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c588:	843ff844 	addi	r16,r16,-31
    c58c:	01000804 	movi	r4,32
    c590:	1406d83a 	srl	r3,r2,r16
    c594:	41005026 	beq	r8,r4,c6d8 <__adddf3+0x55c>
    c598:	01001004 	movi	r4,64
    c59c:	2211c83a 	sub	r8,r4,r8
    c5a0:	1204983a 	sll	r2,r2,r8
    c5a4:	88a2b03a 	or	r17,r17,r2
    c5a8:	8822c03a 	cmpne	r17,r17,zero
    c5ac:	1c62b03a 	or	r17,r3,r17
    c5b0:	0011883a 	mov	r8,zero
    c5b4:	0021883a 	mov	r16,zero
    c5b8:	003f7106 	br	c380 <__alt_data_end+0xff00c380>
    c5bc:	193ff804 	addi	r4,r3,-32
    c5c0:	00800804 	movi	r2,32
    c5c4:	4908d83a 	srl	r4,r9,r4
    c5c8:	18804526 	beq	r3,r2,c6e0 <__adddf3+0x564>
    c5cc:	00801004 	movi	r2,64
    c5d0:	10c5c83a 	sub	r2,r2,r3
    c5d4:	4886983a 	sll	r3,r9,r2
    c5d8:	198cb03a 	or	r6,r3,r6
    c5dc:	300cc03a 	cmpne	r6,r6,zero
    c5e0:	218cb03a 	or	r6,r4,r6
    c5e4:	0007883a 	mov	r3,zero
    c5e8:	003f3b06 	br	c2d8 <__alt_data_end+0xff00c2d8>
    c5ec:	80002a26 	beq	r16,zero,c698 <__adddf3+0x51c>
    c5f0:	0101ffc4 	movi	r4,2047
    c5f4:	11006826 	beq	r2,r4,c798 <__adddf3+0x61c>
    c5f8:	00c7c83a 	sub	r3,zero,r3
    c5fc:	42002034 	orhi	r8,r8,128
    c600:	01000e04 	movi	r4,56
    c604:	20c07c16 	blt	r4,r3,c7f8 <__adddf3+0x67c>
    c608:	010007c4 	movi	r4,31
    c60c:	20c0da16 	blt	r4,r3,c978 <__adddf3+0x7fc>
    c610:	01000804 	movi	r4,32
    c614:	20c9c83a 	sub	r4,r4,r3
    c618:	4114983a 	sll	r10,r8,r4
    c61c:	88cad83a 	srl	r5,r17,r3
    c620:	8908983a 	sll	r4,r17,r4
    c624:	40c6d83a 	srl	r3,r8,r3
    c628:	5162b03a 	or	r17,r10,r5
    c62c:	2008c03a 	cmpne	r4,r4,zero
    c630:	8922b03a 	or	r17,r17,r4
    c634:	3463c83a 	sub	r17,r6,r17
    c638:	48c7c83a 	sub	r3,r9,r3
    c63c:	344d803a 	cmpltu	r6,r6,r17
    c640:	1991c83a 	sub	r8,r3,r6
    c644:	1021883a 	mov	r16,r2
    c648:	3825883a 	mov	r18,r7
    c64c:	003f2706 	br	c2ec <__alt_data_end+0xff00c2ec>
    c650:	24d0b03a 	or	r8,r4,r19
    c654:	40001b1e 	bne	r8,zero,c6c4 <__adddf3+0x548>
    c658:	0005883a 	mov	r2,zero
    c65c:	0007883a 	mov	r3,zero
    c660:	0021883a 	mov	r16,zero
    c664:	003f4d06 	br	c39c <__alt_data_end+0xff00c39c>
    c668:	008007c4 	movi	r2,31
    c66c:	11003c16 	blt	r2,r4,c760 <__adddf3+0x5e4>
    c670:	00800804 	movi	r2,32
    c674:	1105c83a 	sub	r2,r2,r4
    c678:	488e983a 	sll	r7,r9,r2
    c67c:	310ad83a 	srl	r5,r6,r4
    c680:	3084983a 	sll	r2,r6,r2
    c684:	4912d83a 	srl	r9,r9,r4
    c688:	394ab03a 	or	r5,r7,r5
    c68c:	1004c03a 	cmpne	r2,r2,zero
    c690:	288ab03a 	or	r5,r5,r2
    c694:	003f5306 	br	c3e4 <__alt_data_end+0xff00c3e4>
    c698:	4448b03a 	or	r4,r8,r17
    c69c:	20003e26 	beq	r4,zero,c798 <__adddf3+0x61c>
    c6a0:	00c6303a 	nor	r3,zero,r3
    c6a4:	18003a1e 	bne	r3,zero,c790 <__adddf3+0x614>
    c6a8:	3463c83a 	sub	r17,r6,r17
    c6ac:	4a07c83a 	sub	r3,r9,r8
    c6b0:	344d803a 	cmpltu	r6,r6,r17
    c6b4:	1991c83a 	sub	r8,r3,r6
    c6b8:	1021883a 	mov	r16,r2
    c6bc:	3825883a 	mov	r18,r7
    c6c0:	003f0a06 	br	c2ec <__alt_data_end+0xff00c2ec>
    c6c4:	2023883a 	mov	r17,r4
    c6c8:	003f0d06 	br	c300 <__alt_data_end+0xff00c300>
    c6cc:	0081ffc4 	movi	r2,2047
    c6d0:	80bf3f1e 	bne	r16,r2,c3d0 <__alt_data_end+0xff00c3d0>
    c6d4:	003ec806 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c6d8:	0005883a 	mov	r2,zero
    c6dc:	003fb106 	br	c5a4 <__alt_data_end+0xff00c5a4>
    c6e0:	0007883a 	mov	r3,zero
    c6e4:	003fbc06 	br	c5d8 <__alt_data_end+0xff00c5d8>
    c6e8:	4444b03a 	or	r2,r8,r17
    c6ec:	8000871e 	bne	r16,zero,c90c <__adddf3+0x790>
    c6f0:	1000ba26 	beq	r2,zero,c9dc <__adddf3+0x860>
    c6f4:	4984b03a 	or	r2,r9,r6
    c6f8:	103ebf26 	beq	r2,zero,c1f8 <__alt_data_end+0xff00c1f8>
    c6fc:	8985883a 	add	r2,r17,r6
    c700:	4247883a 	add	r3,r8,r9
    c704:	1451803a 	cmpltu	r8,r2,r17
    c708:	40d1883a 	add	r8,r8,r3
    c70c:	40c0202c 	andhi	r3,r8,128
    c710:	1023883a 	mov	r17,r2
    c714:	183f1a26 	beq	r3,zero,c380 <__alt_data_end+0xff00c380>
    c718:	00bfe034 	movhi	r2,65408
    c71c:	10bfffc4 	addi	r2,r2,-1
    c720:	2021883a 	mov	r16,r4
    c724:	4090703a 	and	r8,r8,r2
    c728:	003eb306 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c72c:	4444b03a 	or	r2,r8,r17
    c730:	8000291e 	bne	r16,zero,c7d8 <__adddf3+0x65c>
    c734:	10004b1e 	bne	r2,zero,c864 <__adddf3+0x6e8>
    c738:	4990b03a 	or	r8,r9,r6
    c73c:	40008b26 	beq	r8,zero,c96c <__adddf3+0x7f0>
    c740:	4811883a 	mov	r8,r9
    c744:	3023883a 	mov	r17,r6
    c748:	3825883a 	mov	r18,r7
    c74c:	003eaa06 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c750:	1021883a 	mov	r16,r2
    c754:	0011883a 	mov	r8,zero
    c758:	0005883a 	mov	r2,zero
    c75c:	003f0f06 	br	c39c <__alt_data_end+0xff00c39c>
    c760:	217ff804 	addi	r5,r4,-32
    c764:	00800804 	movi	r2,32
    c768:	494ad83a 	srl	r5,r9,r5
    c76c:	20807d26 	beq	r4,r2,c964 <__adddf3+0x7e8>
    c770:	00801004 	movi	r2,64
    c774:	1109c83a 	sub	r4,r2,r4
    c778:	4912983a 	sll	r9,r9,r4
    c77c:	498cb03a 	or	r6,r9,r6
    c780:	300cc03a 	cmpne	r6,r6,zero
    c784:	298ab03a 	or	r5,r5,r6
    c788:	0013883a 	mov	r9,zero
    c78c:	003f1506 	br	c3e4 <__alt_data_end+0xff00c3e4>
    c790:	0101ffc4 	movi	r4,2047
    c794:	113f9a1e 	bne	r2,r4,c600 <__alt_data_end+0xff00c600>
    c798:	4811883a 	mov	r8,r9
    c79c:	3023883a 	mov	r17,r6
    c7a0:	1021883a 	mov	r16,r2
    c7a4:	3825883a 	mov	r18,r7
    c7a8:	003e9306 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c7ac:	8000161e 	bne	r16,zero,c808 <__adddf3+0x68c>
    c7b0:	444ab03a 	or	r5,r8,r17
    c7b4:	28005126 	beq	r5,zero,c8fc <__adddf3+0x780>
    c7b8:	0108303a 	nor	r4,zero,r4
    c7bc:	20004d1e 	bne	r4,zero,c8f4 <__adddf3+0x778>
    c7c0:	89a3883a 	add	r17,r17,r6
    c7c4:	4253883a 	add	r9,r8,r9
    c7c8:	898d803a 	cmpltu	r6,r17,r6
    c7cc:	3251883a 	add	r8,r6,r9
    c7d0:	1021883a 	mov	r16,r2
    c7d4:	003f0806 	br	c3f8 <__alt_data_end+0xff00c3f8>
    c7d8:	1000301e 	bne	r2,zero,c89c <__adddf3+0x720>
    c7dc:	4984b03a 	or	r2,r9,r6
    c7e0:	10007126 	beq	r2,zero,c9a8 <__adddf3+0x82c>
    c7e4:	4811883a 	mov	r8,r9
    c7e8:	3023883a 	mov	r17,r6
    c7ec:	3825883a 	mov	r18,r7
    c7f0:	0401ffc4 	movi	r16,2047
    c7f4:	003e8006 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c7f8:	4462b03a 	or	r17,r8,r17
    c7fc:	8822c03a 	cmpne	r17,r17,zero
    c800:	0007883a 	mov	r3,zero
    c804:	003f8b06 	br	c634 <__alt_data_end+0xff00c634>
    c808:	0141ffc4 	movi	r5,2047
    c80c:	11403b26 	beq	r2,r5,c8fc <__adddf3+0x780>
    c810:	0109c83a 	sub	r4,zero,r4
    c814:	42002034 	orhi	r8,r8,128
    c818:	01400e04 	movi	r5,56
    c81c:	29006716 	blt	r5,r4,c9bc <__adddf3+0x840>
    c820:	014007c4 	movi	r5,31
    c824:	29007016 	blt	r5,r4,c9e8 <__adddf3+0x86c>
    c828:	01400804 	movi	r5,32
    c82c:	290bc83a 	sub	r5,r5,r4
    c830:	4154983a 	sll	r10,r8,r5
    c834:	890ed83a 	srl	r7,r17,r4
    c838:	894a983a 	sll	r5,r17,r5
    c83c:	4108d83a 	srl	r4,r8,r4
    c840:	51e2b03a 	or	r17,r10,r7
    c844:	280ac03a 	cmpne	r5,r5,zero
    c848:	8962b03a 	or	r17,r17,r5
    c84c:	89a3883a 	add	r17,r17,r6
    c850:	2253883a 	add	r9,r4,r9
    c854:	898d803a 	cmpltu	r6,r17,r6
    c858:	3251883a 	add	r8,r6,r9
    c85c:	1021883a 	mov	r16,r2
    c860:	003ee506 	br	c3f8 <__alt_data_end+0xff00c3f8>
    c864:	4984b03a 	or	r2,r9,r6
    c868:	103e6326 	beq	r2,zero,c1f8 <__alt_data_end+0xff00c1f8>
    c86c:	8987c83a 	sub	r3,r17,r6
    c870:	88c9803a 	cmpltu	r4,r17,r3
    c874:	4245c83a 	sub	r2,r8,r9
    c878:	1105c83a 	sub	r2,r2,r4
    c87c:	1100202c 	andhi	r4,r2,128
    c880:	203ebb26 	beq	r4,zero,c370 <__alt_data_end+0xff00c370>
    c884:	3463c83a 	sub	r17,r6,r17
    c888:	4a07c83a 	sub	r3,r9,r8
    c88c:	344d803a 	cmpltu	r6,r6,r17
    c890:	1991c83a 	sub	r8,r3,r6
    c894:	3825883a 	mov	r18,r7
    c898:	003e5706 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c89c:	4984b03a 	or	r2,r9,r6
    c8a0:	10002e26 	beq	r2,zero,c95c <__adddf3+0x7e0>
    c8a4:	4004d0fa 	srli	r2,r8,3
    c8a8:	8822d0fa 	srli	r17,r17,3
    c8ac:	4010977a 	slli	r8,r8,29
    c8b0:	10c0022c 	andhi	r3,r2,8
    c8b4:	4462b03a 	or	r17,r8,r17
    c8b8:	18000826 	beq	r3,zero,c8dc <__adddf3+0x760>
    c8bc:	4808d0fa 	srli	r4,r9,3
    c8c0:	20c0022c 	andhi	r3,r4,8
    c8c4:	1800051e 	bne	r3,zero,c8dc <__adddf3+0x760>
    c8c8:	300cd0fa 	srli	r6,r6,3
    c8cc:	4806977a 	slli	r3,r9,29
    c8d0:	2005883a 	mov	r2,r4
    c8d4:	3825883a 	mov	r18,r7
    c8d8:	19a2b03a 	or	r17,r3,r6
    c8dc:	8810d77a 	srli	r8,r17,29
    c8e0:	100490fa 	slli	r2,r2,3
    c8e4:	882290fa 	slli	r17,r17,3
    c8e8:	0401ffc4 	movi	r16,2047
    c8ec:	4090b03a 	or	r8,r8,r2
    c8f0:	003e4106 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c8f4:	0141ffc4 	movi	r5,2047
    c8f8:	117fc71e 	bne	r2,r5,c818 <__alt_data_end+0xff00c818>
    c8fc:	4811883a 	mov	r8,r9
    c900:	3023883a 	mov	r17,r6
    c904:	1021883a 	mov	r16,r2
    c908:	003e3b06 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c90c:	10002f26 	beq	r2,zero,c9cc <__adddf3+0x850>
    c910:	4984b03a 	or	r2,r9,r6
    c914:	10001126 	beq	r2,zero,c95c <__adddf3+0x7e0>
    c918:	4004d0fa 	srli	r2,r8,3
    c91c:	8822d0fa 	srli	r17,r17,3
    c920:	4010977a 	slli	r8,r8,29
    c924:	10c0022c 	andhi	r3,r2,8
    c928:	4462b03a 	or	r17,r8,r17
    c92c:	183feb26 	beq	r3,zero,c8dc <__alt_data_end+0xff00c8dc>
    c930:	4808d0fa 	srli	r4,r9,3
    c934:	20c0022c 	andhi	r3,r4,8
    c938:	183fe81e 	bne	r3,zero,c8dc <__alt_data_end+0xff00c8dc>
    c93c:	300cd0fa 	srli	r6,r6,3
    c940:	4806977a 	slli	r3,r9,29
    c944:	2005883a 	mov	r2,r4
    c948:	19a2b03a 	or	r17,r3,r6
    c94c:	003fe306 	br	c8dc <__alt_data_end+0xff00c8dc>
    c950:	0011883a 	mov	r8,zero
    c954:	0005883a 	mov	r2,zero
    c958:	003e3f06 	br	c258 <__alt_data_end+0xff00c258>
    c95c:	0401ffc4 	movi	r16,2047
    c960:	003e2506 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c964:	0013883a 	mov	r9,zero
    c968:	003f8406 	br	c77c <__alt_data_end+0xff00c77c>
    c96c:	0005883a 	mov	r2,zero
    c970:	0007883a 	mov	r3,zero
    c974:	003e8906 	br	c39c <__alt_data_end+0xff00c39c>
    c978:	197ff804 	addi	r5,r3,-32
    c97c:	01000804 	movi	r4,32
    c980:	414ad83a 	srl	r5,r8,r5
    c984:	19002426 	beq	r3,r4,ca18 <__adddf3+0x89c>
    c988:	01001004 	movi	r4,64
    c98c:	20c7c83a 	sub	r3,r4,r3
    c990:	40c6983a 	sll	r3,r8,r3
    c994:	1c46b03a 	or	r3,r3,r17
    c998:	1806c03a 	cmpne	r3,r3,zero
    c99c:	28e2b03a 	or	r17,r5,r3
    c9a0:	0007883a 	mov	r3,zero
    c9a4:	003f2306 	br	c634 <__alt_data_end+0xff00c634>
    c9a8:	0007883a 	mov	r3,zero
    c9ac:	5811883a 	mov	r8,r11
    c9b0:	00bfffc4 	movi	r2,-1
    c9b4:	0401ffc4 	movi	r16,2047
    c9b8:	003e7806 	br	c39c <__alt_data_end+0xff00c39c>
    c9bc:	4462b03a 	or	r17,r8,r17
    c9c0:	8822c03a 	cmpne	r17,r17,zero
    c9c4:	0009883a 	mov	r4,zero
    c9c8:	003fa006 	br	c84c <__alt_data_end+0xff00c84c>
    c9cc:	4811883a 	mov	r8,r9
    c9d0:	3023883a 	mov	r17,r6
    c9d4:	0401ffc4 	movi	r16,2047
    c9d8:	003e0706 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c9dc:	4811883a 	mov	r8,r9
    c9e0:	3023883a 	mov	r17,r6
    c9e4:	003e0406 	br	c1f8 <__alt_data_end+0xff00c1f8>
    c9e8:	21fff804 	addi	r7,r4,-32
    c9ec:	01400804 	movi	r5,32
    c9f0:	41ced83a 	srl	r7,r8,r7
    c9f4:	21400a26 	beq	r4,r5,ca20 <__adddf3+0x8a4>
    c9f8:	01401004 	movi	r5,64
    c9fc:	2909c83a 	sub	r4,r5,r4
    ca00:	4108983a 	sll	r4,r8,r4
    ca04:	2448b03a 	or	r4,r4,r17
    ca08:	2008c03a 	cmpne	r4,r4,zero
    ca0c:	3922b03a 	or	r17,r7,r4
    ca10:	0009883a 	mov	r4,zero
    ca14:	003f8d06 	br	c84c <__alt_data_end+0xff00c84c>
    ca18:	0007883a 	mov	r3,zero
    ca1c:	003fdd06 	br	c994 <__alt_data_end+0xff00c994>
    ca20:	0009883a 	mov	r4,zero
    ca24:	003ff706 	br	ca04 <__alt_data_end+0xff00ca04>

0000ca28 <__eqdf2>:
    ca28:	2804d53a 	srli	r2,r5,20
    ca2c:	3806d53a 	srli	r3,r7,20
    ca30:	02000434 	movhi	r8,16
    ca34:	423fffc4 	addi	r8,r8,-1
    ca38:	1081ffcc 	andi	r2,r2,2047
    ca3c:	0281ffc4 	movi	r10,2047
    ca40:	2a12703a 	and	r9,r5,r8
    ca44:	18c1ffcc 	andi	r3,r3,2047
    ca48:	3a10703a 	and	r8,r7,r8
    ca4c:	280ad7fa 	srli	r5,r5,31
    ca50:	380ed7fa 	srli	r7,r7,31
    ca54:	12801026 	beq	r2,r10,ca98 <__eqdf2+0x70>
    ca58:	0281ffc4 	movi	r10,2047
    ca5c:	1a800a26 	beq	r3,r10,ca88 <__eqdf2+0x60>
    ca60:	10c00226 	beq	r2,r3,ca6c <__eqdf2+0x44>
    ca64:	00800044 	movi	r2,1
    ca68:	f800283a 	ret
    ca6c:	4a3ffd1e 	bne	r9,r8,ca64 <__alt_data_end+0xff00ca64>
    ca70:	21bffc1e 	bne	r4,r6,ca64 <__alt_data_end+0xff00ca64>
    ca74:	29c00c26 	beq	r5,r7,caa8 <__eqdf2+0x80>
    ca78:	103ffa1e 	bne	r2,zero,ca64 <__alt_data_end+0xff00ca64>
    ca7c:	2244b03a 	or	r2,r4,r9
    ca80:	1004c03a 	cmpne	r2,r2,zero
    ca84:	f800283a 	ret
    ca88:	3214b03a 	or	r10,r6,r8
    ca8c:	503ff426 	beq	r10,zero,ca60 <__alt_data_end+0xff00ca60>
    ca90:	00800044 	movi	r2,1
    ca94:	f800283a 	ret
    ca98:	2254b03a 	or	r10,r4,r9
    ca9c:	503fee26 	beq	r10,zero,ca58 <__alt_data_end+0xff00ca58>
    caa0:	00800044 	movi	r2,1
    caa4:	f800283a 	ret
    caa8:	0005883a 	mov	r2,zero
    caac:	f800283a 	ret

0000cab0 <__gedf2>:
    cab0:	2804d53a 	srli	r2,r5,20
    cab4:	3806d53a 	srli	r3,r7,20
    cab8:	02000434 	movhi	r8,16
    cabc:	423fffc4 	addi	r8,r8,-1
    cac0:	1081ffcc 	andi	r2,r2,2047
    cac4:	0241ffc4 	movi	r9,2047
    cac8:	2a14703a 	and	r10,r5,r8
    cacc:	18c1ffcc 	andi	r3,r3,2047
    cad0:	3a10703a 	and	r8,r7,r8
    cad4:	280ad7fa 	srli	r5,r5,31
    cad8:	380ed7fa 	srli	r7,r7,31
    cadc:	12401d26 	beq	r2,r9,cb54 <__gedf2+0xa4>
    cae0:	0241ffc4 	movi	r9,2047
    cae4:	1a401226 	beq	r3,r9,cb30 <__gedf2+0x80>
    cae8:	1000081e 	bne	r2,zero,cb0c <__gedf2+0x5c>
    caec:	2296b03a 	or	r11,r4,r10
    caf0:	5813003a 	cmpeq	r9,r11,zero
    caf4:	1800091e 	bne	r3,zero,cb1c <__gedf2+0x6c>
    caf8:	3218b03a 	or	r12,r6,r8
    cafc:	6000071e 	bne	r12,zero,cb1c <__gedf2+0x6c>
    cb00:	0005883a 	mov	r2,zero
    cb04:	5800101e 	bne	r11,zero,cb48 <__gedf2+0x98>
    cb08:	f800283a 	ret
    cb0c:	18000c1e 	bne	r3,zero,cb40 <__gedf2+0x90>
    cb10:	3212b03a 	or	r9,r6,r8
    cb14:	48000c26 	beq	r9,zero,cb48 <__gedf2+0x98>
    cb18:	0013883a 	mov	r9,zero
    cb1c:	39c03fcc 	andi	r7,r7,255
    cb20:	48000826 	beq	r9,zero,cb44 <__gedf2+0x94>
    cb24:	38000926 	beq	r7,zero,cb4c <__gedf2+0x9c>
    cb28:	00800044 	movi	r2,1
    cb2c:	f800283a 	ret
    cb30:	3212b03a 	or	r9,r6,r8
    cb34:	483fec26 	beq	r9,zero,cae8 <__alt_data_end+0xff00cae8>
    cb38:	00bfff84 	movi	r2,-2
    cb3c:	f800283a 	ret
    cb40:	39c03fcc 	andi	r7,r7,255
    cb44:	29c00626 	beq	r5,r7,cb60 <__gedf2+0xb0>
    cb48:	283ff726 	beq	r5,zero,cb28 <__alt_data_end+0xff00cb28>
    cb4c:	00bfffc4 	movi	r2,-1
    cb50:	f800283a 	ret
    cb54:	2292b03a 	or	r9,r4,r10
    cb58:	483fe126 	beq	r9,zero,cae0 <__alt_data_end+0xff00cae0>
    cb5c:	003ff606 	br	cb38 <__alt_data_end+0xff00cb38>
    cb60:	18bff916 	blt	r3,r2,cb48 <__alt_data_end+0xff00cb48>
    cb64:	10c00316 	blt	r2,r3,cb74 <__gedf2+0xc4>
    cb68:	42bff736 	bltu	r8,r10,cb48 <__alt_data_end+0xff00cb48>
    cb6c:	52000326 	beq	r10,r8,cb7c <__gedf2+0xcc>
    cb70:	5200042e 	bgeu	r10,r8,cb84 <__gedf2+0xd4>
    cb74:	283fec1e 	bne	r5,zero,cb28 <__alt_data_end+0xff00cb28>
    cb78:	003ff406 	br	cb4c <__alt_data_end+0xff00cb4c>
    cb7c:	313ff236 	bltu	r6,r4,cb48 <__alt_data_end+0xff00cb48>
    cb80:	21bffc36 	bltu	r4,r6,cb74 <__alt_data_end+0xff00cb74>
    cb84:	0005883a 	mov	r2,zero
    cb88:	f800283a 	ret

0000cb8c <__ledf2>:
    cb8c:	2804d53a 	srli	r2,r5,20
    cb90:	3810d53a 	srli	r8,r7,20
    cb94:	00c00434 	movhi	r3,16
    cb98:	18ffffc4 	addi	r3,r3,-1
    cb9c:	1081ffcc 	andi	r2,r2,2047
    cba0:	0241ffc4 	movi	r9,2047
    cba4:	28d4703a 	and	r10,r5,r3
    cba8:	4201ffcc 	andi	r8,r8,2047
    cbac:	38c6703a 	and	r3,r7,r3
    cbb0:	280ad7fa 	srli	r5,r5,31
    cbb4:	380ed7fa 	srli	r7,r7,31
    cbb8:	12401f26 	beq	r2,r9,cc38 <__ledf2+0xac>
    cbbc:	0241ffc4 	movi	r9,2047
    cbc0:	42401426 	beq	r8,r9,cc14 <__ledf2+0x88>
    cbc4:	1000091e 	bne	r2,zero,cbec <__ledf2+0x60>
    cbc8:	2296b03a 	or	r11,r4,r10
    cbcc:	5813003a 	cmpeq	r9,r11,zero
    cbd0:	29403fcc 	andi	r5,r5,255
    cbd4:	40000a1e 	bne	r8,zero,cc00 <__ledf2+0x74>
    cbd8:	30d8b03a 	or	r12,r6,r3
    cbdc:	6000081e 	bne	r12,zero,cc00 <__ledf2+0x74>
    cbe0:	0005883a 	mov	r2,zero
    cbe4:	5800111e 	bne	r11,zero,cc2c <__ledf2+0xa0>
    cbe8:	f800283a 	ret
    cbec:	29403fcc 	andi	r5,r5,255
    cbf0:	40000c1e 	bne	r8,zero,cc24 <__ledf2+0x98>
    cbf4:	30d2b03a 	or	r9,r6,r3
    cbf8:	48000c26 	beq	r9,zero,cc2c <__ledf2+0xa0>
    cbfc:	0013883a 	mov	r9,zero
    cc00:	39c03fcc 	andi	r7,r7,255
    cc04:	48000826 	beq	r9,zero,cc28 <__ledf2+0x9c>
    cc08:	38001126 	beq	r7,zero,cc50 <__ledf2+0xc4>
    cc0c:	00800044 	movi	r2,1
    cc10:	f800283a 	ret
    cc14:	30d2b03a 	or	r9,r6,r3
    cc18:	483fea26 	beq	r9,zero,cbc4 <__alt_data_end+0xff00cbc4>
    cc1c:	00800084 	movi	r2,2
    cc20:	f800283a 	ret
    cc24:	39c03fcc 	andi	r7,r7,255
    cc28:	39400726 	beq	r7,r5,cc48 <__ledf2+0xbc>
    cc2c:	2800081e 	bne	r5,zero,cc50 <__ledf2+0xc4>
    cc30:	00800044 	movi	r2,1
    cc34:	f800283a 	ret
    cc38:	2292b03a 	or	r9,r4,r10
    cc3c:	483fdf26 	beq	r9,zero,cbbc <__alt_data_end+0xff00cbbc>
    cc40:	00800084 	movi	r2,2
    cc44:	f800283a 	ret
    cc48:	4080030e 	bge	r8,r2,cc58 <__ledf2+0xcc>
    cc4c:	383fef26 	beq	r7,zero,cc0c <__alt_data_end+0xff00cc0c>
    cc50:	00bfffc4 	movi	r2,-1
    cc54:	f800283a 	ret
    cc58:	123feb16 	blt	r2,r8,cc08 <__alt_data_end+0xff00cc08>
    cc5c:	1abff336 	bltu	r3,r10,cc2c <__alt_data_end+0xff00cc2c>
    cc60:	50c00326 	beq	r10,r3,cc70 <__ledf2+0xe4>
    cc64:	50c0042e 	bgeu	r10,r3,cc78 <__ledf2+0xec>
    cc68:	283fe81e 	bne	r5,zero,cc0c <__alt_data_end+0xff00cc0c>
    cc6c:	003ff806 	br	cc50 <__alt_data_end+0xff00cc50>
    cc70:	313fee36 	bltu	r6,r4,cc2c <__alt_data_end+0xff00cc2c>
    cc74:	21bffc36 	bltu	r4,r6,cc68 <__alt_data_end+0xff00cc68>
    cc78:	0005883a 	mov	r2,zero
    cc7c:	f800283a 	ret

0000cc80 <__muldf3>:
    cc80:	defff304 	addi	sp,sp,-52
    cc84:	2804d53a 	srli	r2,r5,20
    cc88:	dd800915 	stw	r22,36(sp)
    cc8c:	282cd7fa 	srli	r22,r5,31
    cc90:	dc000315 	stw	r16,12(sp)
    cc94:	04000434 	movhi	r16,16
    cc98:	dd400815 	stw	r21,32(sp)
    cc9c:	dc800515 	stw	r18,20(sp)
    cca0:	843fffc4 	addi	r16,r16,-1
    cca4:	dfc00c15 	stw	ra,48(sp)
    cca8:	df000b15 	stw	fp,44(sp)
    ccac:	ddc00a15 	stw	r23,40(sp)
    ccb0:	dd000715 	stw	r20,28(sp)
    ccb4:	dcc00615 	stw	r19,24(sp)
    ccb8:	dc400415 	stw	r17,16(sp)
    ccbc:	1481ffcc 	andi	r18,r2,2047
    ccc0:	2c20703a 	and	r16,r5,r16
    ccc4:	b02b883a 	mov	r21,r22
    ccc8:	b2403fcc 	andi	r9,r22,255
    cccc:	90006026 	beq	r18,zero,ce50 <__muldf3+0x1d0>
    ccd0:	0081ffc4 	movi	r2,2047
    ccd4:	2029883a 	mov	r20,r4
    ccd8:	90803626 	beq	r18,r2,cdb4 <__muldf3+0x134>
    ccdc:	80800434 	orhi	r2,r16,16
    cce0:	100490fa 	slli	r2,r2,3
    cce4:	2020d77a 	srli	r16,r4,29
    cce8:	202890fa 	slli	r20,r4,3
    ccec:	94bf0044 	addi	r18,r18,-1023
    ccf0:	80a0b03a 	or	r16,r16,r2
    ccf4:	0027883a 	mov	r19,zero
    ccf8:	0039883a 	mov	fp,zero
    ccfc:	3804d53a 	srli	r2,r7,20
    cd00:	382ed7fa 	srli	r23,r7,31
    cd04:	04400434 	movhi	r17,16
    cd08:	8c7fffc4 	addi	r17,r17,-1
    cd0c:	1081ffcc 	andi	r2,r2,2047
    cd10:	3011883a 	mov	r8,r6
    cd14:	3c62703a 	and	r17,r7,r17
    cd18:	ba803fcc 	andi	r10,r23,255
    cd1c:	10006d26 	beq	r2,zero,ced4 <__muldf3+0x254>
    cd20:	00c1ffc4 	movi	r3,2047
    cd24:	10c06526 	beq	r2,r3,cebc <__muldf3+0x23c>
    cd28:	88c00434 	orhi	r3,r17,16
    cd2c:	180690fa 	slli	r3,r3,3
    cd30:	3022d77a 	srli	r17,r6,29
    cd34:	301090fa 	slli	r8,r6,3
    cd38:	10bf0044 	addi	r2,r2,-1023
    cd3c:	88e2b03a 	or	r17,r17,r3
    cd40:	000b883a 	mov	r5,zero
    cd44:	9085883a 	add	r2,r18,r2
    cd48:	2cc8b03a 	or	r4,r5,r19
    cd4c:	00c003c4 	movi	r3,15
    cd50:	bdacf03a 	xor	r22,r23,r22
    cd54:	12c00044 	addi	r11,r2,1
    cd58:	19009936 	bltu	r3,r4,cfc0 <__muldf3+0x340>
    cd5c:	200890ba 	slli	r4,r4,2
    cd60:	00c00074 	movhi	r3,1
    cd64:	18f35d04 	addi	r3,r3,-12940
    cd68:	20c9883a 	add	r4,r4,r3
    cd6c:	20c00017 	ldw	r3,0(r4)
    cd70:	1800683a 	jmp	r3
    cd74:	0000cfc0 	call	cfc <init_LCD+0x2e4>
    cd78:	0000cdd4 	movui	zero,823
    cd7c:	0000cdd4 	movui	zero,823
    cd80:	0000cdd0 	cmplti	zero,zero,823
    cd84:	0000cf9c 	xori	zero,zero,830
    cd88:	0000cf9c 	xori	zero,zero,830
    cd8c:	0000cf84 	movi	zero,830
    cd90:	0000cdd0 	cmplti	zero,zero,823
    cd94:	0000cf9c 	xori	zero,zero,830
    cd98:	0000cf84 	movi	zero,830
    cd9c:	0000cf9c 	xori	zero,zero,830
    cda0:	0000cdd0 	cmplti	zero,zero,823
    cda4:	0000cfac 	andhi	zero,zero,830
    cda8:	0000cfac 	andhi	zero,zero,830
    cdac:	0000cfac 	andhi	zero,zero,830
    cdb0:	0000d1c8 	cmpgei	zero,zero,839
    cdb4:	2404b03a 	or	r2,r4,r16
    cdb8:	10006f1e 	bne	r2,zero,cf78 <__muldf3+0x2f8>
    cdbc:	04c00204 	movi	r19,8
    cdc0:	0021883a 	mov	r16,zero
    cdc4:	0029883a 	mov	r20,zero
    cdc8:	07000084 	movi	fp,2
    cdcc:	003fcb06 	br	ccfc <__alt_data_end+0xff00ccfc>
    cdd0:	502d883a 	mov	r22,r10
    cdd4:	00800084 	movi	r2,2
    cdd8:	28805726 	beq	r5,r2,cf38 <__muldf3+0x2b8>
    cddc:	008000c4 	movi	r2,3
    cde0:	28816626 	beq	r5,r2,d37c <__muldf3+0x6fc>
    cde4:	00800044 	movi	r2,1
    cde8:	2881411e 	bne	r5,r2,d2f0 <__muldf3+0x670>
    cdec:	b02b883a 	mov	r21,r22
    cdf0:	0005883a 	mov	r2,zero
    cdf4:	000b883a 	mov	r5,zero
    cdf8:	0029883a 	mov	r20,zero
    cdfc:	1004953a 	slli	r2,r2,20
    ce00:	a8c03fcc 	andi	r3,r21,255
    ce04:	04400434 	movhi	r17,16
    ce08:	8c7fffc4 	addi	r17,r17,-1
    ce0c:	180697fa 	slli	r3,r3,31
    ce10:	2c4a703a 	and	r5,r5,r17
    ce14:	288ab03a 	or	r5,r5,r2
    ce18:	28c6b03a 	or	r3,r5,r3
    ce1c:	a005883a 	mov	r2,r20
    ce20:	dfc00c17 	ldw	ra,48(sp)
    ce24:	df000b17 	ldw	fp,44(sp)
    ce28:	ddc00a17 	ldw	r23,40(sp)
    ce2c:	dd800917 	ldw	r22,36(sp)
    ce30:	dd400817 	ldw	r21,32(sp)
    ce34:	dd000717 	ldw	r20,28(sp)
    ce38:	dcc00617 	ldw	r19,24(sp)
    ce3c:	dc800517 	ldw	r18,20(sp)
    ce40:	dc400417 	ldw	r17,16(sp)
    ce44:	dc000317 	ldw	r16,12(sp)
    ce48:	dec00d04 	addi	sp,sp,52
    ce4c:	f800283a 	ret
    ce50:	2404b03a 	or	r2,r4,r16
    ce54:	2027883a 	mov	r19,r4
    ce58:	10004226 	beq	r2,zero,cf64 <__muldf3+0x2e4>
    ce5c:	8000fc26 	beq	r16,zero,d250 <__muldf3+0x5d0>
    ce60:	8009883a 	mov	r4,r16
    ce64:	d9800215 	stw	r6,8(sp)
    ce68:	d9c00015 	stw	r7,0(sp)
    ce6c:	da400115 	stw	r9,4(sp)
    ce70:	0001fec0 	call	1fec <__clzsi2>
    ce74:	d9800217 	ldw	r6,8(sp)
    ce78:	d9c00017 	ldw	r7,0(sp)
    ce7c:	da400117 	ldw	r9,4(sp)
    ce80:	113ffd44 	addi	r4,r2,-11
    ce84:	00c00704 	movi	r3,28
    ce88:	1900ed16 	blt	r3,r4,d240 <__muldf3+0x5c0>
    ce8c:	00c00744 	movi	r3,29
    ce90:	147ffe04 	addi	r17,r2,-8
    ce94:	1907c83a 	sub	r3,r3,r4
    ce98:	8460983a 	sll	r16,r16,r17
    ce9c:	98c6d83a 	srl	r3,r19,r3
    cea0:	9c68983a 	sll	r20,r19,r17
    cea4:	1c20b03a 	or	r16,r3,r16
    cea8:	1080fcc4 	addi	r2,r2,1011
    ceac:	00a5c83a 	sub	r18,zero,r2
    ceb0:	0027883a 	mov	r19,zero
    ceb4:	0039883a 	mov	fp,zero
    ceb8:	003f9006 	br	ccfc <__alt_data_end+0xff00ccfc>
    cebc:	3446b03a 	or	r3,r6,r17
    cec0:	1800261e 	bne	r3,zero,cf5c <__muldf3+0x2dc>
    cec4:	0023883a 	mov	r17,zero
    cec8:	0011883a 	mov	r8,zero
    cecc:	01400084 	movi	r5,2
    ced0:	003f9c06 	br	cd44 <__alt_data_end+0xff00cd44>
    ced4:	3446b03a 	or	r3,r6,r17
    ced8:	18001c26 	beq	r3,zero,cf4c <__muldf3+0x2cc>
    cedc:	8800ce26 	beq	r17,zero,d218 <__muldf3+0x598>
    cee0:	8809883a 	mov	r4,r17
    cee4:	d9800215 	stw	r6,8(sp)
    cee8:	da400115 	stw	r9,4(sp)
    ceec:	da800015 	stw	r10,0(sp)
    cef0:	0001fec0 	call	1fec <__clzsi2>
    cef4:	d9800217 	ldw	r6,8(sp)
    cef8:	da400117 	ldw	r9,4(sp)
    cefc:	da800017 	ldw	r10,0(sp)
    cf00:	113ffd44 	addi	r4,r2,-11
    cf04:	00c00704 	movi	r3,28
    cf08:	1900bf16 	blt	r3,r4,d208 <__muldf3+0x588>
    cf0c:	00c00744 	movi	r3,29
    cf10:	123ffe04 	addi	r8,r2,-8
    cf14:	1907c83a 	sub	r3,r3,r4
    cf18:	8a22983a 	sll	r17,r17,r8
    cf1c:	30c6d83a 	srl	r3,r6,r3
    cf20:	3210983a 	sll	r8,r6,r8
    cf24:	1c62b03a 	or	r17,r3,r17
    cf28:	1080fcc4 	addi	r2,r2,1011
    cf2c:	0085c83a 	sub	r2,zero,r2
    cf30:	000b883a 	mov	r5,zero
    cf34:	003f8306 	br	cd44 <__alt_data_end+0xff00cd44>
    cf38:	b02b883a 	mov	r21,r22
    cf3c:	0081ffc4 	movi	r2,2047
    cf40:	000b883a 	mov	r5,zero
    cf44:	0029883a 	mov	r20,zero
    cf48:	003fac06 	br	cdfc <__alt_data_end+0xff00cdfc>
    cf4c:	0023883a 	mov	r17,zero
    cf50:	0011883a 	mov	r8,zero
    cf54:	01400044 	movi	r5,1
    cf58:	003f7a06 	br	cd44 <__alt_data_end+0xff00cd44>
    cf5c:	014000c4 	movi	r5,3
    cf60:	003f7806 	br	cd44 <__alt_data_end+0xff00cd44>
    cf64:	04c00104 	movi	r19,4
    cf68:	0021883a 	mov	r16,zero
    cf6c:	0029883a 	mov	r20,zero
    cf70:	07000044 	movi	fp,1
    cf74:	003f6106 	br	ccfc <__alt_data_end+0xff00ccfc>
    cf78:	04c00304 	movi	r19,12
    cf7c:	070000c4 	movi	fp,3
    cf80:	003f5e06 	br	ccfc <__alt_data_end+0xff00ccfc>
    cf84:	01400434 	movhi	r5,16
    cf88:	002b883a 	mov	r21,zero
    cf8c:	297fffc4 	addi	r5,r5,-1
    cf90:	053fffc4 	movi	r20,-1
    cf94:	0081ffc4 	movi	r2,2047
    cf98:	003f9806 	br	cdfc <__alt_data_end+0xff00cdfc>
    cf9c:	8023883a 	mov	r17,r16
    cfa0:	a011883a 	mov	r8,r20
    cfa4:	e00b883a 	mov	r5,fp
    cfa8:	003f8a06 	br	cdd4 <__alt_data_end+0xff00cdd4>
    cfac:	8023883a 	mov	r17,r16
    cfb0:	a011883a 	mov	r8,r20
    cfb4:	482d883a 	mov	r22,r9
    cfb8:	e00b883a 	mov	r5,fp
    cfbc:	003f8506 	br	cdd4 <__alt_data_end+0xff00cdd4>
    cfc0:	a00ad43a 	srli	r5,r20,16
    cfc4:	401ad43a 	srli	r13,r8,16
    cfc8:	a53fffcc 	andi	r20,r20,65535
    cfcc:	423fffcc 	andi	r8,r8,65535
    cfd0:	4519383a 	mul	r12,r8,r20
    cfd4:	4147383a 	mul	r3,r8,r5
    cfd8:	6d09383a 	mul	r4,r13,r20
    cfdc:	600cd43a 	srli	r6,r12,16
    cfe0:	2b5d383a 	mul	r14,r5,r13
    cfe4:	20c9883a 	add	r4,r4,r3
    cfe8:	310d883a 	add	r6,r6,r4
    cfec:	30c0022e 	bgeu	r6,r3,cff8 <__muldf3+0x378>
    cff0:	00c00074 	movhi	r3,1
    cff4:	70dd883a 	add	r14,r14,r3
    cff8:	8826d43a 	srli	r19,r17,16
    cffc:	8bffffcc 	andi	r15,r17,65535
    d000:	7d23383a 	mul	r17,r15,r20
    d004:	7949383a 	mul	r4,r15,r5
    d008:	9d29383a 	mul	r20,r19,r20
    d00c:	8814d43a 	srli	r10,r17,16
    d010:	3012943a 	slli	r9,r6,16
    d014:	a129883a 	add	r20,r20,r4
    d018:	633fffcc 	andi	r12,r12,65535
    d01c:	5515883a 	add	r10,r10,r20
    d020:	3006d43a 	srli	r3,r6,16
    d024:	4b13883a 	add	r9,r9,r12
    d028:	2ccb383a 	mul	r5,r5,r19
    d02c:	5100022e 	bgeu	r10,r4,d038 <__muldf3+0x3b8>
    d030:	01000074 	movhi	r4,1
    d034:	290b883a 	add	r5,r5,r4
    d038:	802ad43a 	srli	r21,r16,16
    d03c:	843fffcc 	andi	r16,r16,65535
    d040:	440d383a 	mul	r6,r8,r16
    d044:	4565383a 	mul	r18,r8,r21
    d048:	8349383a 	mul	r4,r16,r13
    d04c:	500e943a 	slli	r7,r10,16
    d050:	3010d43a 	srli	r8,r6,16
    d054:	5028d43a 	srli	r20,r10,16
    d058:	2489883a 	add	r4,r4,r18
    d05c:	8abfffcc 	andi	r10,r17,65535
    d060:	3a95883a 	add	r10,r7,r10
    d064:	4119883a 	add	r12,r8,r4
    d068:	a169883a 	add	r20,r20,r5
    d06c:	1a87883a 	add	r3,r3,r10
    d070:	6d5b383a 	mul	r13,r13,r21
    d074:	6480022e 	bgeu	r12,r18,d080 <__muldf3+0x400>
    d078:	01000074 	movhi	r4,1
    d07c:	691b883a 	add	r13,r13,r4
    d080:	7c25383a 	mul	r18,r15,r16
    d084:	7d4b383a 	mul	r5,r15,r21
    d088:	84cf383a 	mul	r7,r16,r19
    d08c:	901ed43a 	srli	r15,r18,16
    d090:	6008d43a 	srli	r4,r12,16
    d094:	6010943a 	slli	r8,r12,16
    d098:	394f883a 	add	r7,r7,r5
    d09c:	333fffcc 	andi	r12,r6,65535
    d0a0:	79df883a 	add	r15,r15,r7
    d0a4:	235b883a 	add	r13,r4,r13
    d0a8:	9d63383a 	mul	r17,r19,r21
    d0ac:	4309883a 	add	r4,r8,r12
    d0b0:	7940022e 	bgeu	r15,r5,d0bc <__muldf3+0x43c>
    d0b4:	01400074 	movhi	r5,1
    d0b8:	8963883a 	add	r17,r17,r5
    d0bc:	780a943a 	slli	r5,r15,16
    d0c0:	91bfffcc 	andi	r6,r18,65535
    d0c4:	70c7883a 	add	r3,r14,r3
    d0c8:	298d883a 	add	r6,r5,r6
    d0cc:	1a8f803a 	cmpltu	r7,r3,r10
    d0d0:	350b883a 	add	r5,r6,r20
    d0d4:	20c7883a 	add	r3,r4,r3
    d0d8:	3955883a 	add	r10,r7,r5
    d0dc:	1909803a 	cmpltu	r4,r3,r4
    d0e0:	6a91883a 	add	r8,r13,r10
    d0e4:	780cd43a 	srli	r6,r15,16
    d0e8:	2219883a 	add	r12,r4,r8
    d0ec:	2d0b803a 	cmpltu	r5,r5,r20
    d0f0:	51cf803a 	cmpltu	r7,r10,r7
    d0f4:	29ceb03a 	or	r7,r5,r7
    d0f8:	4351803a 	cmpltu	r8,r8,r13
    d0fc:	610b803a 	cmpltu	r5,r12,r4
    d100:	4148b03a 	or	r4,r8,r5
    d104:	398f883a 	add	r7,r7,r6
    d108:	3909883a 	add	r4,r7,r4
    d10c:	1810927a 	slli	r8,r3,9
    d110:	2449883a 	add	r4,r4,r17
    d114:	2008927a 	slli	r4,r4,9
    d118:	6022d5fa 	srli	r17,r12,23
    d11c:	1806d5fa 	srli	r3,r3,23
    d120:	4252b03a 	or	r9,r8,r9
    d124:	600a927a 	slli	r5,r12,9
    d128:	4810c03a 	cmpne	r8,r9,zero
    d12c:	2462b03a 	or	r17,r4,r17
    d130:	40c6b03a 	or	r3,r8,r3
    d134:	8900402c 	andhi	r4,r17,256
    d138:	1950b03a 	or	r8,r3,r5
    d13c:	20000726 	beq	r4,zero,d15c <__muldf3+0x4dc>
    d140:	4006d07a 	srli	r3,r8,1
    d144:	880497fa 	slli	r2,r17,31
    d148:	4200004c 	andi	r8,r8,1
    d14c:	8822d07a 	srli	r17,r17,1
    d150:	1a10b03a 	or	r8,r3,r8
    d154:	1210b03a 	or	r8,r2,r8
    d158:	5805883a 	mov	r2,r11
    d15c:	1140ffc4 	addi	r5,r2,1023
    d160:	0140440e 	bge	zero,r5,d274 <__muldf3+0x5f4>
    d164:	40c001cc 	andi	r3,r8,7
    d168:	18000726 	beq	r3,zero,d188 <__muldf3+0x508>
    d16c:	40c003cc 	andi	r3,r8,15
    d170:	01000104 	movi	r4,4
    d174:	19000426 	beq	r3,r4,d188 <__muldf3+0x508>
    d178:	4107883a 	add	r3,r8,r4
    d17c:	1a11803a 	cmpltu	r8,r3,r8
    d180:	8a23883a 	add	r17,r17,r8
    d184:	1811883a 	mov	r8,r3
    d188:	88c0402c 	andhi	r3,r17,256
    d18c:	18000426 	beq	r3,zero,d1a0 <__muldf3+0x520>
    d190:	11410004 	addi	r5,r2,1024
    d194:	00bfc034 	movhi	r2,65280
    d198:	10bfffc4 	addi	r2,r2,-1
    d19c:	88a2703a 	and	r17,r17,r2
    d1a0:	0081ff84 	movi	r2,2046
    d1a4:	117f6416 	blt	r2,r5,cf38 <__alt_data_end+0xff00cf38>
    d1a8:	8828977a 	slli	r20,r17,29
    d1ac:	4010d0fa 	srli	r8,r8,3
    d1b0:	8822927a 	slli	r17,r17,9
    d1b4:	2881ffcc 	andi	r2,r5,2047
    d1b8:	a228b03a 	or	r20,r20,r8
    d1bc:	880ad33a 	srli	r5,r17,12
    d1c0:	b02b883a 	mov	r21,r22
    d1c4:	003f0d06 	br	cdfc <__alt_data_end+0xff00cdfc>
    d1c8:	8080022c 	andhi	r2,r16,8
    d1cc:	10000926 	beq	r2,zero,d1f4 <__muldf3+0x574>
    d1d0:	8880022c 	andhi	r2,r17,8
    d1d4:	1000071e 	bne	r2,zero,d1f4 <__muldf3+0x574>
    d1d8:	00800434 	movhi	r2,16
    d1dc:	89400234 	orhi	r5,r17,8
    d1e0:	10bfffc4 	addi	r2,r2,-1
    d1e4:	b82b883a 	mov	r21,r23
    d1e8:	288a703a 	and	r5,r5,r2
    d1ec:	4029883a 	mov	r20,r8
    d1f0:	003f6806 	br	cf94 <__alt_data_end+0xff00cf94>
    d1f4:	00800434 	movhi	r2,16
    d1f8:	81400234 	orhi	r5,r16,8
    d1fc:	10bfffc4 	addi	r2,r2,-1
    d200:	288a703a 	and	r5,r5,r2
    d204:	003f6306 	br	cf94 <__alt_data_end+0xff00cf94>
    d208:	147ff604 	addi	r17,r2,-40
    d20c:	3462983a 	sll	r17,r6,r17
    d210:	0011883a 	mov	r8,zero
    d214:	003f4406 	br	cf28 <__alt_data_end+0xff00cf28>
    d218:	3009883a 	mov	r4,r6
    d21c:	d9800215 	stw	r6,8(sp)
    d220:	da400115 	stw	r9,4(sp)
    d224:	da800015 	stw	r10,0(sp)
    d228:	0001fec0 	call	1fec <__clzsi2>
    d22c:	10800804 	addi	r2,r2,32
    d230:	da800017 	ldw	r10,0(sp)
    d234:	da400117 	ldw	r9,4(sp)
    d238:	d9800217 	ldw	r6,8(sp)
    d23c:	003f3006 	br	cf00 <__alt_data_end+0xff00cf00>
    d240:	143ff604 	addi	r16,r2,-40
    d244:	9c20983a 	sll	r16,r19,r16
    d248:	0029883a 	mov	r20,zero
    d24c:	003f1606 	br	cea8 <__alt_data_end+0xff00cea8>
    d250:	d9800215 	stw	r6,8(sp)
    d254:	d9c00015 	stw	r7,0(sp)
    d258:	da400115 	stw	r9,4(sp)
    d25c:	0001fec0 	call	1fec <__clzsi2>
    d260:	10800804 	addi	r2,r2,32
    d264:	da400117 	ldw	r9,4(sp)
    d268:	d9c00017 	ldw	r7,0(sp)
    d26c:	d9800217 	ldw	r6,8(sp)
    d270:	003f0306 	br	ce80 <__alt_data_end+0xff00ce80>
    d274:	00c00044 	movi	r3,1
    d278:	1947c83a 	sub	r3,r3,r5
    d27c:	00800e04 	movi	r2,56
    d280:	10feda16 	blt	r2,r3,cdec <__alt_data_end+0xff00cdec>
    d284:	008007c4 	movi	r2,31
    d288:	10c01b16 	blt	r2,r3,d2f8 <__muldf3+0x678>
    d28c:	00800804 	movi	r2,32
    d290:	10c5c83a 	sub	r2,r2,r3
    d294:	888a983a 	sll	r5,r17,r2
    d298:	40c8d83a 	srl	r4,r8,r3
    d29c:	4084983a 	sll	r2,r8,r2
    d2a0:	88e2d83a 	srl	r17,r17,r3
    d2a4:	2906b03a 	or	r3,r5,r4
    d2a8:	1004c03a 	cmpne	r2,r2,zero
    d2ac:	1886b03a 	or	r3,r3,r2
    d2b0:	188001cc 	andi	r2,r3,7
    d2b4:	10000726 	beq	r2,zero,d2d4 <__muldf3+0x654>
    d2b8:	188003cc 	andi	r2,r3,15
    d2bc:	01000104 	movi	r4,4
    d2c0:	11000426 	beq	r2,r4,d2d4 <__muldf3+0x654>
    d2c4:	1805883a 	mov	r2,r3
    d2c8:	10c00104 	addi	r3,r2,4
    d2cc:	1885803a 	cmpltu	r2,r3,r2
    d2d0:	88a3883a 	add	r17,r17,r2
    d2d4:	8880202c 	andhi	r2,r17,128
    d2d8:	10001c26 	beq	r2,zero,d34c <__muldf3+0x6cc>
    d2dc:	b02b883a 	mov	r21,r22
    d2e0:	00800044 	movi	r2,1
    d2e4:	000b883a 	mov	r5,zero
    d2e8:	0029883a 	mov	r20,zero
    d2ec:	003ec306 	br	cdfc <__alt_data_end+0xff00cdfc>
    d2f0:	5805883a 	mov	r2,r11
    d2f4:	003f9906 	br	d15c <__alt_data_end+0xff00d15c>
    d2f8:	00bff844 	movi	r2,-31
    d2fc:	1145c83a 	sub	r2,r2,r5
    d300:	8888d83a 	srl	r4,r17,r2
    d304:	00800804 	movi	r2,32
    d308:	18801a26 	beq	r3,r2,d374 <__muldf3+0x6f4>
    d30c:	00801004 	movi	r2,64
    d310:	10c5c83a 	sub	r2,r2,r3
    d314:	8884983a 	sll	r2,r17,r2
    d318:	1204b03a 	or	r2,r2,r8
    d31c:	1004c03a 	cmpne	r2,r2,zero
    d320:	2084b03a 	or	r2,r4,r2
    d324:	144001cc 	andi	r17,r2,7
    d328:	88000d1e 	bne	r17,zero,d360 <__muldf3+0x6e0>
    d32c:	000b883a 	mov	r5,zero
    d330:	1028d0fa 	srli	r20,r2,3
    d334:	b02b883a 	mov	r21,r22
    d338:	0005883a 	mov	r2,zero
    d33c:	a468b03a 	or	r20,r20,r17
    d340:	003eae06 	br	cdfc <__alt_data_end+0xff00cdfc>
    d344:	1007883a 	mov	r3,r2
    d348:	0023883a 	mov	r17,zero
    d34c:	880a927a 	slli	r5,r17,9
    d350:	1805883a 	mov	r2,r3
    d354:	8822977a 	slli	r17,r17,29
    d358:	280ad33a 	srli	r5,r5,12
    d35c:	003ff406 	br	d330 <__alt_data_end+0xff00d330>
    d360:	10c003cc 	andi	r3,r2,15
    d364:	01000104 	movi	r4,4
    d368:	193ff626 	beq	r3,r4,d344 <__alt_data_end+0xff00d344>
    d36c:	0023883a 	mov	r17,zero
    d370:	003fd506 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d374:	0005883a 	mov	r2,zero
    d378:	003fe706 	br	d318 <__alt_data_end+0xff00d318>
    d37c:	00800434 	movhi	r2,16
    d380:	89400234 	orhi	r5,r17,8
    d384:	10bfffc4 	addi	r2,r2,-1
    d388:	b02b883a 	mov	r21,r22
    d38c:	288a703a 	and	r5,r5,r2
    d390:	4029883a 	mov	r20,r8
    d394:	003eff06 	br	cf94 <__alt_data_end+0xff00cf94>

0000d398 <__subdf3>:
    d398:	02000434 	movhi	r8,16
    d39c:	423fffc4 	addi	r8,r8,-1
    d3a0:	defffb04 	addi	sp,sp,-20
    d3a4:	2a14703a 	and	r10,r5,r8
    d3a8:	3812d53a 	srli	r9,r7,20
    d3ac:	3a10703a 	and	r8,r7,r8
    d3b0:	2006d77a 	srli	r3,r4,29
    d3b4:	3004d77a 	srli	r2,r6,29
    d3b8:	dc000015 	stw	r16,0(sp)
    d3bc:	501490fa 	slli	r10,r10,3
    d3c0:	2820d53a 	srli	r16,r5,20
    d3c4:	401090fa 	slli	r8,r8,3
    d3c8:	dc800215 	stw	r18,8(sp)
    d3cc:	dc400115 	stw	r17,4(sp)
    d3d0:	dfc00415 	stw	ra,16(sp)
    d3d4:	202290fa 	slli	r17,r4,3
    d3d8:	dcc00315 	stw	r19,12(sp)
    d3dc:	4a41ffcc 	andi	r9,r9,2047
    d3e0:	0101ffc4 	movi	r4,2047
    d3e4:	2824d7fa 	srli	r18,r5,31
    d3e8:	8401ffcc 	andi	r16,r16,2047
    d3ec:	50c6b03a 	or	r3,r10,r3
    d3f0:	380ed7fa 	srli	r7,r7,31
    d3f4:	408ab03a 	or	r5,r8,r2
    d3f8:	300c90fa 	slli	r6,r6,3
    d3fc:	49009626 	beq	r9,r4,d658 <__subdf3+0x2c0>
    d400:	39c0005c 	xori	r7,r7,1
    d404:	8245c83a 	sub	r2,r16,r9
    d408:	3c807426 	beq	r7,r18,d5dc <__subdf3+0x244>
    d40c:	0080af0e 	bge	zero,r2,d6cc <__subdf3+0x334>
    d410:	48002a1e 	bne	r9,zero,d4bc <__subdf3+0x124>
    d414:	2988b03a 	or	r4,r5,r6
    d418:	20009a1e 	bne	r4,zero,d684 <__subdf3+0x2ec>
    d41c:	888001cc 	andi	r2,r17,7
    d420:	10000726 	beq	r2,zero,d440 <__subdf3+0xa8>
    d424:	888003cc 	andi	r2,r17,15
    d428:	01000104 	movi	r4,4
    d42c:	11000426 	beq	r2,r4,d440 <__subdf3+0xa8>
    d430:	890b883a 	add	r5,r17,r4
    d434:	2c63803a 	cmpltu	r17,r5,r17
    d438:	1c47883a 	add	r3,r3,r17
    d43c:	2823883a 	mov	r17,r5
    d440:	1880202c 	andhi	r2,r3,128
    d444:	10005926 	beq	r2,zero,d5ac <__subdf3+0x214>
    d448:	84000044 	addi	r16,r16,1
    d44c:	0081ffc4 	movi	r2,2047
    d450:	8080be26 	beq	r16,r2,d74c <__subdf3+0x3b4>
    d454:	017fe034 	movhi	r5,65408
    d458:	297fffc4 	addi	r5,r5,-1
    d45c:	1946703a 	and	r3,r3,r5
    d460:	1804977a 	slli	r2,r3,29
    d464:	1806927a 	slli	r3,r3,9
    d468:	8822d0fa 	srli	r17,r17,3
    d46c:	8401ffcc 	andi	r16,r16,2047
    d470:	180ad33a 	srli	r5,r3,12
    d474:	9100004c 	andi	r4,r18,1
    d478:	1444b03a 	or	r2,r2,r17
    d47c:	80c1ffcc 	andi	r3,r16,2047
    d480:	1820953a 	slli	r16,r3,20
    d484:	20c03fcc 	andi	r3,r4,255
    d488:	180897fa 	slli	r4,r3,31
    d48c:	00c00434 	movhi	r3,16
    d490:	18ffffc4 	addi	r3,r3,-1
    d494:	28c6703a 	and	r3,r5,r3
    d498:	1c06b03a 	or	r3,r3,r16
    d49c:	1906b03a 	or	r3,r3,r4
    d4a0:	dfc00417 	ldw	ra,16(sp)
    d4a4:	dcc00317 	ldw	r19,12(sp)
    d4a8:	dc800217 	ldw	r18,8(sp)
    d4ac:	dc400117 	ldw	r17,4(sp)
    d4b0:	dc000017 	ldw	r16,0(sp)
    d4b4:	dec00504 	addi	sp,sp,20
    d4b8:	f800283a 	ret
    d4bc:	0101ffc4 	movi	r4,2047
    d4c0:	813fd626 	beq	r16,r4,d41c <__alt_data_end+0xff00d41c>
    d4c4:	29402034 	orhi	r5,r5,128
    d4c8:	01000e04 	movi	r4,56
    d4cc:	2080a316 	blt	r4,r2,d75c <__subdf3+0x3c4>
    d4d0:	010007c4 	movi	r4,31
    d4d4:	2080c616 	blt	r4,r2,d7f0 <__subdf3+0x458>
    d4d8:	01000804 	movi	r4,32
    d4dc:	2089c83a 	sub	r4,r4,r2
    d4e0:	2910983a 	sll	r8,r5,r4
    d4e4:	308ed83a 	srl	r7,r6,r2
    d4e8:	3108983a 	sll	r4,r6,r4
    d4ec:	2884d83a 	srl	r2,r5,r2
    d4f0:	41ccb03a 	or	r6,r8,r7
    d4f4:	2008c03a 	cmpne	r4,r4,zero
    d4f8:	310cb03a 	or	r6,r6,r4
    d4fc:	898dc83a 	sub	r6,r17,r6
    d500:	89a3803a 	cmpltu	r17,r17,r6
    d504:	1887c83a 	sub	r3,r3,r2
    d508:	1c47c83a 	sub	r3,r3,r17
    d50c:	3023883a 	mov	r17,r6
    d510:	1880202c 	andhi	r2,r3,128
    d514:	10002326 	beq	r2,zero,d5a4 <__subdf3+0x20c>
    d518:	04c02034 	movhi	r19,128
    d51c:	9cffffc4 	addi	r19,r19,-1
    d520:	1ce6703a 	and	r19,r3,r19
    d524:	98007a26 	beq	r19,zero,d710 <__subdf3+0x378>
    d528:	9809883a 	mov	r4,r19
    d52c:	0001fec0 	call	1fec <__clzsi2>
    d530:	113ffe04 	addi	r4,r2,-8
    d534:	00c007c4 	movi	r3,31
    d538:	19007b16 	blt	r3,r4,d728 <__subdf3+0x390>
    d53c:	00800804 	movi	r2,32
    d540:	1105c83a 	sub	r2,r2,r4
    d544:	8884d83a 	srl	r2,r17,r2
    d548:	9906983a 	sll	r3,r19,r4
    d54c:	8922983a 	sll	r17,r17,r4
    d550:	10c4b03a 	or	r2,r2,r3
    d554:	24007816 	blt	r4,r16,d738 <__subdf3+0x3a0>
    d558:	2421c83a 	sub	r16,r4,r16
    d55c:	80c00044 	addi	r3,r16,1
    d560:	010007c4 	movi	r4,31
    d564:	20c09516 	blt	r4,r3,d7bc <__subdf3+0x424>
    d568:	01400804 	movi	r5,32
    d56c:	28cbc83a 	sub	r5,r5,r3
    d570:	88c8d83a 	srl	r4,r17,r3
    d574:	8962983a 	sll	r17,r17,r5
    d578:	114a983a 	sll	r5,r2,r5
    d57c:	10c6d83a 	srl	r3,r2,r3
    d580:	8804c03a 	cmpne	r2,r17,zero
    d584:	290ab03a 	or	r5,r5,r4
    d588:	28a2b03a 	or	r17,r5,r2
    d58c:	0021883a 	mov	r16,zero
    d590:	003fa206 	br	d41c <__alt_data_end+0xff00d41c>
    d594:	2090b03a 	or	r8,r4,r2
    d598:	40018e26 	beq	r8,zero,dbd4 <__subdf3+0x83c>
    d59c:	1007883a 	mov	r3,r2
    d5a0:	2023883a 	mov	r17,r4
    d5a4:	888001cc 	andi	r2,r17,7
    d5a8:	103f9e1e 	bne	r2,zero,d424 <__alt_data_end+0xff00d424>
    d5ac:	1804977a 	slli	r2,r3,29
    d5b0:	8822d0fa 	srli	r17,r17,3
    d5b4:	1810d0fa 	srli	r8,r3,3
    d5b8:	9100004c 	andi	r4,r18,1
    d5bc:	1444b03a 	or	r2,r2,r17
    d5c0:	00c1ffc4 	movi	r3,2047
    d5c4:	80c02826 	beq	r16,r3,d668 <__subdf3+0x2d0>
    d5c8:	01400434 	movhi	r5,16
    d5cc:	297fffc4 	addi	r5,r5,-1
    d5d0:	80e0703a 	and	r16,r16,r3
    d5d4:	414a703a 	and	r5,r8,r5
    d5d8:	003fa806 	br	d47c <__alt_data_end+0xff00d47c>
    d5dc:	0080630e 	bge	zero,r2,d76c <__subdf3+0x3d4>
    d5e0:	48003026 	beq	r9,zero,d6a4 <__subdf3+0x30c>
    d5e4:	0101ffc4 	movi	r4,2047
    d5e8:	813f8c26 	beq	r16,r4,d41c <__alt_data_end+0xff00d41c>
    d5ec:	29402034 	orhi	r5,r5,128
    d5f0:	01000e04 	movi	r4,56
    d5f4:	2080a90e 	bge	r4,r2,d89c <__subdf3+0x504>
    d5f8:	298cb03a 	or	r6,r5,r6
    d5fc:	3012c03a 	cmpne	r9,r6,zero
    d600:	0005883a 	mov	r2,zero
    d604:	4c53883a 	add	r9,r9,r17
    d608:	4c63803a 	cmpltu	r17,r9,r17
    d60c:	10c7883a 	add	r3,r2,r3
    d610:	88c7883a 	add	r3,r17,r3
    d614:	4823883a 	mov	r17,r9
    d618:	1880202c 	andhi	r2,r3,128
    d61c:	1000d026 	beq	r2,zero,d960 <__subdf3+0x5c8>
    d620:	84000044 	addi	r16,r16,1
    d624:	0081ffc4 	movi	r2,2047
    d628:	8080fe26 	beq	r16,r2,da24 <__subdf3+0x68c>
    d62c:	00bfe034 	movhi	r2,65408
    d630:	10bfffc4 	addi	r2,r2,-1
    d634:	1886703a 	and	r3,r3,r2
    d638:	880ad07a 	srli	r5,r17,1
    d63c:	180497fa 	slli	r2,r3,31
    d640:	8900004c 	andi	r4,r17,1
    d644:	2922b03a 	or	r17,r5,r4
    d648:	1806d07a 	srli	r3,r3,1
    d64c:	1462b03a 	or	r17,r2,r17
    d650:	3825883a 	mov	r18,r7
    d654:	003f7106 	br	d41c <__alt_data_end+0xff00d41c>
    d658:	2984b03a 	or	r2,r5,r6
    d65c:	103f6826 	beq	r2,zero,d400 <__alt_data_end+0xff00d400>
    d660:	39c03fcc 	andi	r7,r7,255
    d664:	003f6706 	br	d404 <__alt_data_end+0xff00d404>
    d668:	4086b03a 	or	r3,r8,r2
    d66c:	18015226 	beq	r3,zero,dbb8 <__subdf3+0x820>
    d670:	00c00434 	movhi	r3,16
    d674:	41400234 	orhi	r5,r8,8
    d678:	18ffffc4 	addi	r3,r3,-1
    d67c:	28ca703a 	and	r5,r5,r3
    d680:	003f7e06 	br	d47c <__alt_data_end+0xff00d47c>
    d684:	10bfffc4 	addi	r2,r2,-1
    d688:	1000491e 	bne	r2,zero,d7b0 <__subdf3+0x418>
    d68c:	898fc83a 	sub	r7,r17,r6
    d690:	89e3803a 	cmpltu	r17,r17,r7
    d694:	1947c83a 	sub	r3,r3,r5
    d698:	1c47c83a 	sub	r3,r3,r17
    d69c:	3823883a 	mov	r17,r7
    d6a0:	003f9b06 	br	d510 <__alt_data_end+0xff00d510>
    d6a4:	2988b03a 	or	r4,r5,r6
    d6a8:	203f5c26 	beq	r4,zero,d41c <__alt_data_end+0xff00d41c>
    d6ac:	10bfffc4 	addi	r2,r2,-1
    d6b0:	1000931e 	bne	r2,zero,d900 <__subdf3+0x568>
    d6b4:	898d883a 	add	r6,r17,r6
    d6b8:	3463803a 	cmpltu	r17,r6,r17
    d6bc:	1947883a 	add	r3,r3,r5
    d6c0:	88c7883a 	add	r3,r17,r3
    d6c4:	3023883a 	mov	r17,r6
    d6c8:	003fd306 	br	d618 <__alt_data_end+0xff00d618>
    d6cc:	1000541e 	bne	r2,zero,d820 <__subdf3+0x488>
    d6d0:	80800044 	addi	r2,r16,1
    d6d4:	1081ffcc 	andi	r2,r2,2047
    d6d8:	01000044 	movi	r4,1
    d6dc:	2080a20e 	bge	r4,r2,d968 <__subdf3+0x5d0>
    d6e0:	8989c83a 	sub	r4,r17,r6
    d6e4:	8905803a 	cmpltu	r2,r17,r4
    d6e8:	1967c83a 	sub	r19,r3,r5
    d6ec:	98a7c83a 	sub	r19,r19,r2
    d6f0:	9880202c 	andhi	r2,r19,128
    d6f4:	10006326 	beq	r2,zero,d884 <__subdf3+0x4ec>
    d6f8:	3463c83a 	sub	r17,r6,r17
    d6fc:	28c7c83a 	sub	r3,r5,r3
    d700:	344d803a 	cmpltu	r6,r6,r17
    d704:	19a7c83a 	sub	r19,r3,r6
    d708:	3825883a 	mov	r18,r7
    d70c:	983f861e 	bne	r19,zero,d528 <__alt_data_end+0xff00d528>
    d710:	8809883a 	mov	r4,r17
    d714:	0001fec0 	call	1fec <__clzsi2>
    d718:	10800804 	addi	r2,r2,32
    d71c:	113ffe04 	addi	r4,r2,-8
    d720:	00c007c4 	movi	r3,31
    d724:	193f850e 	bge	r3,r4,d53c <__alt_data_end+0xff00d53c>
    d728:	10bff604 	addi	r2,r2,-40
    d72c:	8884983a 	sll	r2,r17,r2
    d730:	0023883a 	mov	r17,zero
    d734:	243f880e 	bge	r4,r16,d558 <__alt_data_end+0xff00d558>
    d738:	00ffe034 	movhi	r3,65408
    d73c:	18ffffc4 	addi	r3,r3,-1
    d740:	8121c83a 	sub	r16,r16,r4
    d744:	10c6703a 	and	r3,r2,r3
    d748:	003f3406 	br	d41c <__alt_data_end+0xff00d41c>
    d74c:	9100004c 	andi	r4,r18,1
    d750:	000b883a 	mov	r5,zero
    d754:	0005883a 	mov	r2,zero
    d758:	003f4806 	br	d47c <__alt_data_end+0xff00d47c>
    d75c:	298cb03a 	or	r6,r5,r6
    d760:	300cc03a 	cmpne	r6,r6,zero
    d764:	0005883a 	mov	r2,zero
    d768:	003f6406 	br	d4fc <__alt_data_end+0xff00d4fc>
    d76c:	10009a1e 	bne	r2,zero,d9d8 <__subdf3+0x640>
    d770:	82400044 	addi	r9,r16,1
    d774:	4881ffcc 	andi	r2,r9,2047
    d778:	02800044 	movi	r10,1
    d77c:	5080670e 	bge	r10,r2,d91c <__subdf3+0x584>
    d780:	0081ffc4 	movi	r2,2047
    d784:	4880af26 	beq	r9,r2,da44 <__subdf3+0x6ac>
    d788:	898d883a 	add	r6,r17,r6
    d78c:	1945883a 	add	r2,r3,r5
    d790:	3447803a 	cmpltu	r3,r6,r17
    d794:	1887883a 	add	r3,r3,r2
    d798:	182297fa 	slli	r17,r3,31
    d79c:	300cd07a 	srli	r6,r6,1
    d7a0:	1806d07a 	srli	r3,r3,1
    d7a4:	4821883a 	mov	r16,r9
    d7a8:	89a2b03a 	or	r17,r17,r6
    d7ac:	003f1b06 	br	d41c <__alt_data_end+0xff00d41c>
    d7b0:	0101ffc4 	movi	r4,2047
    d7b4:	813f441e 	bne	r16,r4,d4c8 <__alt_data_end+0xff00d4c8>
    d7b8:	003f1806 	br	d41c <__alt_data_end+0xff00d41c>
    d7bc:	843ff844 	addi	r16,r16,-31
    d7c0:	01400804 	movi	r5,32
    d7c4:	1408d83a 	srl	r4,r2,r16
    d7c8:	19405026 	beq	r3,r5,d90c <__subdf3+0x574>
    d7cc:	01401004 	movi	r5,64
    d7d0:	28c7c83a 	sub	r3,r5,r3
    d7d4:	10c4983a 	sll	r2,r2,r3
    d7d8:	88a2b03a 	or	r17,r17,r2
    d7dc:	8822c03a 	cmpne	r17,r17,zero
    d7e0:	2462b03a 	or	r17,r4,r17
    d7e4:	0007883a 	mov	r3,zero
    d7e8:	0021883a 	mov	r16,zero
    d7ec:	003f6d06 	br	d5a4 <__alt_data_end+0xff00d5a4>
    d7f0:	11fff804 	addi	r7,r2,-32
    d7f4:	01000804 	movi	r4,32
    d7f8:	29ced83a 	srl	r7,r5,r7
    d7fc:	11004526 	beq	r2,r4,d914 <__subdf3+0x57c>
    d800:	01001004 	movi	r4,64
    d804:	2089c83a 	sub	r4,r4,r2
    d808:	2904983a 	sll	r2,r5,r4
    d80c:	118cb03a 	or	r6,r2,r6
    d810:	300cc03a 	cmpne	r6,r6,zero
    d814:	398cb03a 	or	r6,r7,r6
    d818:	0005883a 	mov	r2,zero
    d81c:	003f3706 	br	d4fc <__alt_data_end+0xff00d4fc>
    d820:	80002a26 	beq	r16,zero,d8cc <__subdf3+0x534>
    d824:	0101ffc4 	movi	r4,2047
    d828:	49006626 	beq	r9,r4,d9c4 <__subdf3+0x62c>
    d82c:	0085c83a 	sub	r2,zero,r2
    d830:	18c02034 	orhi	r3,r3,128
    d834:	01000e04 	movi	r4,56
    d838:	20807e16 	blt	r4,r2,da34 <__subdf3+0x69c>
    d83c:	010007c4 	movi	r4,31
    d840:	2080e716 	blt	r4,r2,dbe0 <__subdf3+0x848>
    d844:	01000804 	movi	r4,32
    d848:	2089c83a 	sub	r4,r4,r2
    d84c:	1914983a 	sll	r10,r3,r4
    d850:	8890d83a 	srl	r8,r17,r2
    d854:	8908983a 	sll	r4,r17,r4
    d858:	1884d83a 	srl	r2,r3,r2
    d85c:	5222b03a 	or	r17,r10,r8
    d860:	2006c03a 	cmpne	r3,r4,zero
    d864:	88e2b03a 	or	r17,r17,r3
    d868:	3463c83a 	sub	r17,r6,r17
    d86c:	2885c83a 	sub	r2,r5,r2
    d870:	344d803a 	cmpltu	r6,r6,r17
    d874:	1187c83a 	sub	r3,r2,r6
    d878:	4821883a 	mov	r16,r9
    d87c:	3825883a 	mov	r18,r7
    d880:	003f2306 	br	d510 <__alt_data_end+0xff00d510>
    d884:	24d0b03a 	or	r8,r4,r19
    d888:	40001b1e 	bne	r8,zero,d8f8 <__subdf3+0x560>
    d88c:	0005883a 	mov	r2,zero
    d890:	0009883a 	mov	r4,zero
    d894:	0021883a 	mov	r16,zero
    d898:	003f4906 	br	d5c0 <__alt_data_end+0xff00d5c0>
    d89c:	010007c4 	movi	r4,31
    d8a0:	20803a16 	blt	r4,r2,d98c <__subdf3+0x5f4>
    d8a4:	01000804 	movi	r4,32
    d8a8:	2089c83a 	sub	r4,r4,r2
    d8ac:	2912983a 	sll	r9,r5,r4
    d8b0:	3090d83a 	srl	r8,r6,r2
    d8b4:	3108983a 	sll	r4,r6,r4
    d8b8:	2884d83a 	srl	r2,r5,r2
    d8bc:	4a12b03a 	or	r9,r9,r8
    d8c0:	2008c03a 	cmpne	r4,r4,zero
    d8c4:	4912b03a 	or	r9,r9,r4
    d8c8:	003f4e06 	br	d604 <__alt_data_end+0xff00d604>
    d8cc:	1c48b03a 	or	r4,r3,r17
    d8d0:	20003c26 	beq	r4,zero,d9c4 <__subdf3+0x62c>
    d8d4:	0084303a 	nor	r2,zero,r2
    d8d8:	1000381e 	bne	r2,zero,d9bc <__subdf3+0x624>
    d8dc:	3463c83a 	sub	r17,r6,r17
    d8e0:	28c5c83a 	sub	r2,r5,r3
    d8e4:	344d803a 	cmpltu	r6,r6,r17
    d8e8:	1187c83a 	sub	r3,r2,r6
    d8ec:	4821883a 	mov	r16,r9
    d8f0:	3825883a 	mov	r18,r7
    d8f4:	003f0606 	br	d510 <__alt_data_end+0xff00d510>
    d8f8:	2023883a 	mov	r17,r4
    d8fc:	003f0906 	br	d524 <__alt_data_end+0xff00d524>
    d900:	0101ffc4 	movi	r4,2047
    d904:	813f3a1e 	bne	r16,r4,d5f0 <__alt_data_end+0xff00d5f0>
    d908:	003ec406 	br	d41c <__alt_data_end+0xff00d41c>
    d90c:	0005883a 	mov	r2,zero
    d910:	003fb106 	br	d7d8 <__alt_data_end+0xff00d7d8>
    d914:	0005883a 	mov	r2,zero
    d918:	003fbc06 	br	d80c <__alt_data_end+0xff00d80c>
    d91c:	1c44b03a 	or	r2,r3,r17
    d920:	80008e1e 	bne	r16,zero,db5c <__subdf3+0x7c4>
    d924:	1000c826 	beq	r2,zero,dc48 <__subdf3+0x8b0>
    d928:	2984b03a 	or	r2,r5,r6
    d92c:	103ebb26 	beq	r2,zero,d41c <__alt_data_end+0xff00d41c>
    d930:	8989883a 	add	r4,r17,r6
    d934:	1945883a 	add	r2,r3,r5
    d938:	2447803a 	cmpltu	r3,r4,r17
    d93c:	1887883a 	add	r3,r3,r2
    d940:	1880202c 	andhi	r2,r3,128
    d944:	2023883a 	mov	r17,r4
    d948:	103f1626 	beq	r2,zero,d5a4 <__alt_data_end+0xff00d5a4>
    d94c:	00bfe034 	movhi	r2,65408
    d950:	10bfffc4 	addi	r2,r2,-1
    d954:	5021883a 	mov	r16,r10
    d958:	1886703a 	and	r3,r3,r2
    d95c:	003eaf06 	br	d41c <__alt_data_end+0xff00d41c>
    d960:	3825883a 	mov	r18,r7
    d964:	003f0f06 	br	d5a4 <__alt_data_end+0xff00d5a4>
    d968:	1c44b03a 	or	r2,r3,r17
    d96c:	8000251e 	bne	r16,zero,da04 <__subdf3+0x66c>
    d970:	1000661e 	bne	r2,zero,db0c <__subdf3+0x774>
    d974:	2990b03a 	or	r8,r5,r6
    d978:	40009626 	beq	r8,zero,dbd4 <__subdf3+0x83c>
    d97c:	2807883a 	mov	r3,r5
    d980:	3023883a 	mov	r17,r6
    d984:	3825883a 	mov	r18,r7
    d988:	003ea406 	br	d41c <__alt_data_end+0xff00d41c>
    d98c:	127ff804 	addi	r9,r2,-32
    d990:	01000804 	movi	r4,32
    d994:	2a52d83a 	srl	r9,r5,r9
    d998:	11008c26 	beq	r2,r4,dbcc <__subdf3+0x834>
    d99c:	01001004 	movi	r4,64
    d9a0:	2085c83a 	sub	r2,r4,r2
    d9a4:	2884983a 	sll	r2,r5,r2
    d9a8:	118cb03a 	or	r6,r2,r6
    d9ac:	300cc03a 	cmpne	r6,r6,zero
    d9b0:	4992b03a 	or	r9,r9,r6
    d9b4:	0005883a 	mov	r2,zero
    d9b8:	003f1206 	br	d604 <__alt_data_end+0xff00d604>
    d9bc:	0101ffc4 	movi	r4,2047
    d9c0:	493f9c1e 	bne	r9,r4,d834 <__alt_data_end+0xff00d834>
    d9c4:	2807883a 	mov	r3,r5
    d9c8:	3023883a 	mov	r17,r6
    d9cc:	4821883a 	mov	r16,r9
    d9d0:	3825883a 	mov	r18,r7
    d9d4:	003e9106 	br	d41c <__alt_data_end+0xff00d41c>
    d9d8:	80001f1e 	bne	r16,zero,da58 <__subdf3+0x6c0>
    d9dc:	1c48b03a 	or	r4,r3,r17
    d9e0:	20005a26 	beq	r4,zero,db4c <__subdf3+0x7b4>
    d9e4:	0084303a 	nor	r2,zero,r2
    d9e8:	1000561e 	bne	r2,zero,db44 <__subdf3+0x7ac>
    d9ec:	89a3883a 	add	r17,r17,r6
    d9f0:	1945883a 	add	r2,r3,r5
    d9f4:	898d803a 	cmpltu	r6,r17,r6
    d9f8:	3087883a 	add	r3,r6,r2
    d9fc:	4821883a 	mov	r16,r9
    da00:	003f0506 	br	d618 <__alt_data_end+0xff00d618>
    da04:	10002b1e 	bne	r2,zero,dab4 <__subdf3+0x71c>
    da08:	2984b03a 	or	r2,r5,r6
    da0c:	10008026 	beq	r2,zero,dc10 <__subdf3+0x878>
    da10:	2807883a 	mov	r3,r5
    da14:	3023883a 	mov	r17,r6
    da18:	3825883a 	mov	r18,r7
    da1c:	0401ffc4 	movi	r16,2047
    da20:	003e7e06 	br	d41c <__alt_data_end+0xff00d41c>
    da24:	3809883a 	mov	r4,r7
    da28:	0011883a 	mov	r8,zero
    da2c:	0005883a 	mov	r2,zero
    da30:	003ee306 	br	d5c0 <__alt_data_end+0xff00d5c0>
    da34:	1c62b03a 	or	r17,r3,r17
    da38:	8822c03a 	cmpne	r17,r17,zero
    da3c:	0005883a 	mov	r2,zero
    da40:	003f8906 	br	d868 <__alt_data_end+0xff00d868>
    da44:	3809883a 	mov	r4,r7
    da48:	4821883a 	mov	r16,r9
    da4c:	0011883a 	mov	r8,zero
    da50:	0005883a 	mov	r2,zero
    da54:	003eda06 	br	d5c0 <__alt_data_end+0xff00d5c0>
    da58:	0101ffc4 	movi	r4,2047
    da5c:	49003b26 	beq	r9,r4,db4c <__subdf3+0x7b4>
    da60:	0085c83a 	sub	r2,zero,r2
    da64:	18c02034 	orhi	r3,r3,128
    da68:	01000e04 	movi	r4,56
    da6c:	20806e16 	blt	r4,r2,dc28 <__subdf3+0x890>
    da70:	010007c4 	movi	r4,31
    da74:	20807716 	blt	r4,r2,dc54 <__subdf3+0x8bc>
    da78:	01000804 	movi	r4,32
    da7c:	2089c83a 	sub	r4,r4,r2
    da80:	1914983a 	sll	r10,r3,r4
    da84:	8890d83a 	srl	r8,r17,r2
    da88:	8908983a 	sll	r4,r17,r4
    da8c:	1884d83a 	srl	r2,r3,r2
    da90:	5222b03a 	or	r17,r10,r8
    da94:	2006c03a 	cmpne	r3,r4,zero
    da98:	88e2b03a 	or	r17,r17,r3
    da9c:	89a3883a 	add	r17,r17,r6
    daa0:	1145883a 	add	r2,r2,r5
    daa4:	898d803a 	cmpltu	r6,r17,r6
    daa8:	3087883a 	add	r3,r6,r2
    daac:	4821883a 	mov	r16,r9
    dab0:	003ed906 	br	d618 <__alt_data_end+0xff00d618>
    dab4:	2984b03a 	or	r2,r5,r6
    dab8:	10004226 	beq	r2,zero,dbc4 <__subdf3+0x82c>
    dabc:	1808d0fa 	srli	r4,r3,3
    dac0:	8822d0fa 	srli	r17,r17,3
    dac4:	1806977a 	slli	r3,r3,29
    dac8:	2080022c 	andhi	r2,r4,8
    dacc:	1c62b03a 	or	r17,r3,r17
    dad0:	10000826 	beq	r2,zero,daf4 <__subdf3+0x75c>
    dad4:	2812d0fa 	srli	r9,r5,3
    dad8:	4880022c 	andhi	r2,r9,8
    dadc:	1000051e 	bne	r2,zero,daf4 <__subdf3+0x75c>
    dae0:	300cd0fa 	srli	r6,r6,3
    dae4:	2804977a 	slli	r2,r5,29
    dae8:	4809883a 	mov	r4,r9
    daec:	3825883a 	mov	r18,r7
    daf0:	11a2b03a 	or	r17,r2,r6
    daf4:	8806d77a 	srli	r3,r17,29
    daf8:	200890fa 	slli	r4,r4,3
    dafc:	882290fa 	slli	r17,r17,3
    db00:	0401ffc4 	movi	r16,2047
    db04:	1906b03a 	or	r3,r3,r4
    db08:	003e4406 	br	d41c <__alt_data_end+0xff00d41c>
    db0c:	2984b03a 	or	r2,r5,r6
    db10:	103e4226 	beq	r2,zero,d41c <__alt_data_end+0xff00d41c>
    db14:	8989c83a 	sub	r4,r17,r6
    db18:	8911803a 	cmpltu	r8,r17,r4
    db1c:	1945c83a 	sub	r2,r3,r5
    db20:	1205c83a 	sub	r2,r2,r8
    db24:	1200202c 	andhi	r8,r2,128
    db28:	403e9a26 	beq	r8,zero,d594 <__alt_data_end+0xff00d594>
    db2c:	3463c83a 	sub	r17,r6,r17
    db30:	28c5c83a 	sub	r2,r5,r3
    db34:	344d803a 	cmpltu	r6,r6,r17
    db38:	1187c83a 	sub	r3,r2,r6
    db3c:	3825883a 	mov	r18,r7
    db40:	003e3606 	br	d41c <__alt_data_end+0xff00d41c>
    db44:	0101ffc4 	movi	r4,2047
    db48:	493fc71e 	bne	r9,r4,da68 <__alt_data_end+0xff00da68>
    db4c:	2807883a 	mov	r3,r5
    db50:	3023883a 	mov	r17,r6
    db54:	4821883a 	mov	r16,r9
    db58:	003e3006 	br	d41c <__alt_data_end+0xff00d41c>
    db5c:	10003626 	beq	r2,zero,dc38 <__subdf3+0x8a0>
    db60:	2984b03a 	or	r2,r5,r6
    db64:	10001726 	beq	r2,zero,dbc4 <__subdf3+0x82c>
    db68:	1808d0fa 	srli	r4,r3,3
    db6c:	8822d0fa 	srli	r17,r17,3
    db70:	1806977a 	slli	r3,r3,29
    db74:	2080022c 	andhi	r2,r4,8
    db78:	1c62b03a 	or	r17,r3,r17
    db7c:	10000726 	beq	r2,zero,db9c <__subdf3+0x804>
    db80:	2812d0fa 	srli	r9,r5,3
    db84:	4880022c 	andhi	r2,r9,8
    db88:	1000041e 	bne	r2,zero,db9c <__subdf3+0x804>
    db8c:	300cd0fa 	srli	r6,r6,3
    db90:	2804977a 	slli	r2,r5,29
    db94:	4809883a 	mov	r4,r9
    db98:	11a2b03a 	or	r17,r2,r6
    db9c:	8806d77a 	srli	r3,r17,29
    dba0:	200890fa 	slli	r4,r4,3
    dba4:	882290fa 	slli	r17,r17,3
    dba8:	3825883a 	mov	r18,r7
    dbac:	1906b03a 	or	r3,r3,r4
    dbb0:	0401ffc4 	movi	r16,2047
    dbb4:	003e1906 	br	d41c <__alt_data_end+0xff00d41c>
    dbb8:	000b883a 	mov	r5,zero
    dbbc:	0005883a 	mov	r2,zero
    dbc0:	003e2e06 	br	d47c <__alt_data_end+0xff00d47c>
    dbc4:	0401ffc4 	movi	r16,2047
    dbc8:	003e1406 	br	d41c <__alt_data_end+0xff00d41c>
    dbcc:	0005883a 	mov	r2,zero
    dbd0:	003f7506 	br	d9a8 <__alt_data_end+0xff00d9a8>
    dbd4:	0005883a 	mov	r2,zero
    dbd8:	0009883a 	mov	r4,zero
    dbdc:	003e7806 	br	d5c0 <__alt_data_end+0xff00d5c0>
    dbe0:	123ff804 	addi	r8,r2,-32
    dbe4:	01000804 	movi	r4,32
    dbe8:	1a10d83a 	srl	r8,r3,r8
    dbec:	11002526 	beq	r2,r4,dc84 <__subdf3+0x8ec>
    dbf0:	01001004 	movi	r4,64
    dbf4:	2085c83a 	sub	r2,r4,r2
    dbf8:	1884983a 	sll	r2,r3,r2
    dbfc:	1444b03a 	or	r2,r2,r17
    dc00:	1004c03a 	cmpne	r2,r2,zero
    dc04:	40a2b03a 	or	r17,r8,r2
    dc08:	0005883a 	mov	r2,zero
    dc0c:	003f1606 	br	d868 <__alt_data_end+0xff00d868>
    dc10:	02000434 	movhi	r8,16
    dc14:	0009883a 	mov	r4,zero
    dc18:	423fffc4 	addi	r8,r8,-1
    dc1c:	00bfffc4 	movi	r2,-1
    dc20:	0401ffc4 	movi	r16,2047
    dc24:	003e6606 	br	d5c0 <__alt_data_end+0xff00d5c0>
    dc28:	1c62b03a 	or	r17,r3,r17
    dc2c:	8822c03a 	cmpne	r17,r17,zero
    dc30:	0005883a 	mov	r2,zero
    dc34:	003f9906 	br	da9c <__alt_data_end+0xff00da9c>
    dc38:	2807883a 	mov	r3,r5
    dc3c:	3023883a 	mov	r17,r6
    dc40:	0401ffc4 	movi	r16,2047
    dc44:	003df506 	br	d41c <__alt_data_end+0xff00d41c>
    dc48:	2807883a 	mov	r3,r5
    dc4c:	3023883a 	mov	r17,r6
    dc50:	003df206 	br	d41c <__alt_data_end+0xff00d41c>
    dc54:	123ff804 	addi	r8,r2,-32
    dc58:	01000804 	movi	r4,32
    dc5c:	1a10d83a 	srl	r8,r3,r8
    dc60:	11000a26 	beq	r2,r4,dc8c <__subdf3+0x8f4>
    dc64:	01001004 	movi	r4,64
    dc68:	2085c83a 	sub	r2,r4,r2
    dc6c:	1884983a 	sll	r2,r3,r2
    dc70:	1444b03a 	or	r2,r2,r17
    dc74:	1004c03a 	cmpne	r2,r2,zero
    dc78:	40a2b03a 	or	r17,r8,r2
    dc7c:	0005883a 	mov	r2,zero
    dc80:	003f8606 	br	da9c <__alt_data_end+0xff00da9c>
    dc84:	0005883a 	mov	r2,zero
    dc88:	003fdc06 	br	dbfc <__alt_data_end+0xff00dbfc>
    dc8c:	0005883a 	mov	r2,zero
    dc90:	003ff706 	br	dc70 <__alt_data_end+0xff00dc70>

0000dc94 <__fixdfsi>:
    dc94:	280cd53a 	srli	r6,r5,20
    dc98:	00c00434 	movhi	r3,16
    dc9c:	18ffffc4 	addi	r3,r3,-1
    dca0:	3181ffcc 	andi	r6,r6,2047
    dca4:	01c0ff84 	movi	r7,1022
    dca8:	28c6703a 	and	r3,r5,r3
    dcac:	280ad7fa 	srli	r5,r5,31
    dcb0:	3980120e 	bge	r7,r6,dcfc <__fixdfsi+0x68>
    dcb4:	00810744 	movi	r2,1053
    dcb8:	11800c16 	blt	r2,r6,dcec <__fixdfsi+0x58>
    dcbc:	00810cc4 	movi	r2,1075
    dcc0:	1185c83a 	sub	r2,r2,r6
    dcc4:	01c007c4 	movi	r7,31
    dcc8:	18c00434 	orhi	r3,r3,16
    dccc:	38800d16 	blt	r7,r2,dd04 <__fixdfsi+0x70>
    dcd0:	31befb44 	addi	r6,r6,-1043
    dcd4:	2084d83a 	srl	r2,r4,r2
    dcd8:	1986983a 	sll	r3,r3,r6
    dcdc:	1884b03a 	or	r2,r3,r2
    dce0:	28000726 	beq	r5,zero,dd00 <__fixdfsi+0x6c>
    dce4:	0085c83a 	sub	r2,zero,r2
    dce8:	f800283a 	ret
    dcec:	00a00034 	movhi	r2,32768
    dcf0:	10bfffc4 	addi	r2,r2,-1
    dcf4:	2885883a 	add	r2,r5,r2
    dcf8:	f800283a 	ret
    dcfc:	0005883a 	mov	r2,zero
    dd00:	f800283a 	ret
    dd04:	008104c4 	movi	r2,1043
    dd08:	1185c83a 	sub	r2,r2,r6
    dd0c:	1884d83a 	srl	r2,r3,r2
    dd10:	003ff306 	br	dce0 <__alt_data_end+0xff00dce0>

0000dd14 <__floatsidf>:
    dd14:	defffd04 	addi	sp,sp,-12
    dd18:	dfc00215 	stw	ra,8(sp)
    dd1c:	dc400115 	stw	r17,4(sp)
    dd20:	dc000015 	stw	r16,0(sp)
    dd24:	20002b26 	beq	r4,zero,ddd4 <__floatsidf+0xc0>
    dd28:	2023883a 	mov	r17,r4
    dd2c:	2020d7fa 	srli	r16,r4,31
    dd30:	20002d16 	blt	r4,zero,dde8 <__floatsidf+0xd4>
    dd34:	8809883a 	mov	r4,r17
    dd38:	0001fec0 	call	1fec <__clzsi2>
    dd3c:	01410784 	movi	r5,1054
    dd40:	288bc83a 	sub	r5,r5,r2
    dd44:	01010cc4 	movi	r4,1075
    dd48:	2149c83a 	sub	r4,r4,r5
    dd4c:	00c007c4 	movi	r3,31
    dd50:	1900160e 	bge	r3,r4,ddac <__floatsidf+0x98>
    dd54:	00c104c4 	movi	r3,1043
    dd58:	1947c83a 	sub	r3,r3,r5
    dd5c:	88c6983a 	sll	r3,r17,r3
    dd60:	00800434 	movhi	r2,16
    dd64:	10bfffc4 	addi	r2,r2,-1
    dd68:	1886703a 	and	r3,r3,r2
    dd6c:	2941ffcc 	andi	r5,r5,2047
    dd70:	800d883a 	mov	r6,r16
    dd74:	0005883a 	mov	r2,zero
    dd78:	280a953a 	slli	r5,r5,20
    dd7c:	31803fcc 	andi	r6,r6,255
    dd80:	01000434 	movhi	r4,16
    dd84:	300c97fa 	slli	r6,r6,31
    dd88:	213fffc4 	addi	r4,r4,-1
    dd8c:	1906703a 	and	r3,r3,r4
    dd90:	1946b03a 	or	r3,r3,r5
    dd94:	1986b03a 	or	r3,r3,r6
    dd98:	dfc00217 	ldw	ra,8(sp)
    dd9c:	dc400117 	ldw	r17,4(sp)
    dda0:	dc000017 	ldw	r16,0(sp)
    dda4:	dec00304 	addi	sp,sp,12
    dda8:	f800283a 	ret
    ddac:	00c002c4 	movi	r3,11
    ddb0:	1887c83a 	sub	r3,r3,r2
    ddb4:	88c6d83a 	srl	r3,r17,r3
    ddb8:	8904983a 	sll	r2,r17,r4
    ddbc:	01000434 	movhi	r4,16
    ddc0:	213fffc4 	addi	r4,r4,-1
    ddc4:	2941ffcc 	andi	r5,r5,2047
    ddc8:	1906703a 	and	r3,r3,r4
    ddcc:	800d883a 	mov	r6,r16
    ddd0:	003fe906 	br	dd78 <__alt_data_end+0xff00dd78>
    ddd4:	000d883a 	mov	r6,zero
    ddd8:	000b883a 	mov	r5,zero
    dddc:	0007883a 	mov	r3,zero
    dde0:	0005883a 	mov	r2,zero
    dde4:	003fe406 	br	dd78 <__alt_data_end+0xff00dd78>
    dde8:	0123c83a 	sub	r17,zero,r4
    ddec:	003fd106 	br	dd34 <__alt_data_end+0xff00dd34>

0000ddf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ddf0:	defffe04 	addi	sp,sp,-8
    ddf4:	dfc00115 	stw	ra,4(sp)
    ddf8:	df000015 	stw	fp,0(sp)
    ddfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de00:	d0a00b17 	ldw	r2,-32724(gp)
    de04:	10000326 	beq	r2,zero,de14 <alt_get_errno+0x24>
    de08:	d0a00b17 	ldw	r2,-32724(gp)
    de0c:	103ee83a 	callr	r2
    de10:	00000106 	br	de18 <alt_get_errno+0x28>
    de14:	d0a72004 	addi	r2,gp,-25472
}
    de18:	e037883a 	mov	sp,fp
    de1c:	dfc00117 	ldw	ra,4(sp)
    de20:	df000017 	ldw	fp,0(sp)
    de24:	dec00204 	addi	sp,sp,8
    de28:	f800283a 	ret

0000de2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    de2c:	defffb04 	addi	sp,sp,-20
    de30:	dfc00415 	stw	ra,16(sp)
    de34:	df000315 	stw	fp,12(sp)
    de38:	df000304 	addi	fp,sp,12
    de3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    de40:	e0bfff17 	ldw	r2,-4(fp)
    de44:	10000616 	blt	r2,zero,de60 <close+0x34>
    de48:	e0bfff17 	ldw	r2,-4(fp)
    de4c:	10c00324 	muli	r3,r2,12
    de50:	00800074 	movhi	r2,1
    de54:	10871b04 	addi	r2,r2,7276
    de58:	1885883a 	add	r2,r3,r2
    de5c:	00000106 	br	de64 <close+0x38>
    de60:	0005883a 	mov	r2,zero
    de64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    de68:	e0bffd17 	ldw	r2,-12(fp)
    de6c:	10001926 	beq	r2,zero,ded4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    de70:	e0bffd17 	ldw	r2,-12(fp)
    de74:	10800017 	ldw	r2,0(r2)
    de78:	10800417 	ldw	r2,16(r2)
    de7c:	10000626 	beq	r2,zero,de98 <close+0x6c>
    de80:	e0bffd17 	ldw	r2,-12(fp)
    de84:	10800017 	ldw	r2,0(r2)
    de88:	10800417 	ldw	r2,16(r2)
    de8c:	e13ffd17 	ldw	r4,-12(fp)
    de90:	103ee83a 	callr	r2
    de94:	00000106 	br	de9c <close+0x70>
    de98:	0005883a 	mov	r2,zero
    de9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dea0:	e13fff17 	ldw	r4,-4(fp)
    dea4:	000e4ec0 	call	e4ec <alt_release_fd>
    if (rval < 0)
    dea8:	e0bffe17 	ldw	r2,-8(fp)
    deac:	1000070e 	bge	r2,zero,decc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    deb0:	000ddf00 	call	ddf0 <alt_get_errno>
    deb4:	1007883a 	mov	r3,r2
    deb8:	e0bffe17 	ldw	r2,-8(fp)
    debc:	0085c83a 	sub	r2,zero,r2
    dec0:	18800015 	stw	r2,0(r3)
      return -1;
    dec4:	00bfffc4 	movi	r2,-1
    dec8:	00000706 	br	dee8 <close+0xbc>
    }
    return 0;
    decc:	0005883a 	mov	r2,zero
    ded0:	00000506 	br	dee8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ded4:	000ddf00 	call	ddf0 <alt_get_errno>
    ded8:	1007883a 	mov	r3,r2
    dedc:	00801444 	movi	r2,81
    dee0:	18800015 	stw	r2,0(r3)
    return -1;
    dee4:	00bfffc4 	movi	r2,-1
  }
}
    dee8:	e037883a 	mov	sp,fp
    deec:	dfc00117 	ldw	ra,4(sp)
    def0:	df000017 	ldw	fp,0(sp)
    def4:	dec00204 	addi	sp,sp,8
    def8:	f800283a 	ret

0000defc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    defc:	defffc04 	addi	sp,sp,-16
    df00:	df000315 	stw	fp,12(sp)
    df04:	df000304 	addi	fp,sp,12
    df08:	e13ffd15 	stw	r4,-12(fp)
    df0c:	e17ffe15 	stw	r5,-8(fp)
    df10:	e1bfff15 	stw	r6,-4(fp)
  return len;
    df14:	e0bfff17 	ldw	r2,-4(fp)
}
    df18:	e037883a 	mov	sp,fp
    df1c:	df000017 	ldw	fp,0(sp)
    df20:	dec00104 	addi	sp,sp,4
    df24:	f800283a 	ret

0000df28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df28:	defffe04 	addi	sp,sp,-8
    df2c:	dfc00115 	stw	ra,4(sp)
    df30:	df000015 	stw	fp,0(sp)
    df34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    df38:	d0a00b17 	ldw	r2,-32724(gp)
    df3c:	10000326 	beq	r2,zero,df4c <alt_get_errno+0x24>
    df40:	d0a00b17 	ldw	r2,-32724(gp)
    df44:	103ee83a 	callr	r2
    df48:	00000106 	br	df50 <alt_get_errno+0x28>
    df4c:	d0a72004 	addi	r2,gp,-25472
}
    df50:	e037883a 	mov	sp,fp
    df54:	dfc00117 	ldw	ra,4(sp)
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00204 	addi	sp,sp,8
    df60:	f800283a 	ret

0000df64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    df64:	defffb04 	addi	sp,sp,-20
    df68:	dfc00415 	stw	ra,16(sp)
    df6c:	df000315 	stw	fp,12(sp)
    df70:	df000304 	addi	fp,sp,12
    df74:	e13ffe15 	stw	r4,-8(fp)
    df78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    df7c:	e0bffe17 	ldw	r2,-8(fp)
    df80:	10000616 	blt	r2,zero,df9c <fstat+0x38>
    df84:	e0bffe17 	ldw	r2,-8(fp)
    df88:	10c00324 	muli	r3,r2,12
    df8c:	00800074 	movhi	r2,1
    df90:	10871b04 	addi	r2,r2,7276
    df94:	1885883a 	add	r2,r3,r2
    df98:	00000106 	br	dfa0 <fstat+0x3c>
    df9c:	0005883a 	mov	r2,zero
    dfa0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    dfa4:	e0bffd17 	ldw	r2,-12(fp)
    dfa8:	10001026 	beq	r2,zero,dfec <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dfac:	e0bffd17 	ldw	r2,-12(fp)
    dfb0:	10800017 	ldw	r2,0(r2)
    dfb4:	10800817 	ldw	r2,32(r2)
    dfb8:	10000726 	beq	r2,zero,dfd8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    dfbc:	e0bffd17 	ldw	r2,-12(fp)
    dfc0:	10800017 	ldw	r2,0(r2)
    dfc4:	10800817 	ldw	r2,32(r2)
    dfc8:	e17fff17 	ldw	r5,-4(fp)
    dfcc:	e13ffd17 	ldw	r4,-12(fp)
    dfd0:	103ee83a 	callr	r2
    dfd4:	00000a06 	br	e000 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dfd8:	e0bfff17 	ldw	r2,-4(fp)
    dfdc:	00c80004 	movi	r3,8192
    dfe0:	10c00115 	stw	r3,4(r2)
      return 0;
    dfe4:	0005883a 	mov	r2,zero
    dfe8:	00000506 	br	e000 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dfec:	000df280 	call	df28 <alt_get_errno>
    dff0:	1007883a 	mov	r3,r2
    dff4:	00801444 	movi	r2,81
    dff8:	18800015 	stw	r2,0(r3)
    return -1;
    dffc:	00bfffc4 	movi	r2,-1
  }
}
    e000:	e037883a 	mov	sp,fp
    e004:	dfc00117 	ldw	ra,4(sp)
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00204 	addi	sp,sp,8
    e010:	f800283a 	ret

0000e014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e014:	defffe04 	addi	sp,sp,-8
    e018:	dfc00115 	stw	ra,4(sp)
    e01c:	df000015 	stw	fp,0(sp)
    e020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e024:	d0a00b17 	ldw	r2,-32724(gp)
    e028:	10000326 	beq	r2,zero,e038 <alt_get_errno+0x24>
    e02c:	d0a00b17 	ldw	r2,-32724(gp)
    e030:	103ee83a 	callr	r2
    e034:	00000106 	br	e03c <alt_get_errno+0x28>
    e038:	d0a72004 	addi	r2,gp,-25472
}
    e03c:	e037883a 	mov	sp,fp
    e040:	dfc00117 	ldw	ra,4(sp)
    e044:	df000017 	ldw	fp,0(sp)
    e048:	dec00204 	addi	sp,sp,8
    e04c:	f800283a 	ret

0000e050 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e050:	deffed04 	addi	sp,sp,-76
    e054:	dfc01215 	stw	ra,72(sp)
    e058:	df001115 	stw	fp,68(sp)
    e05c:	df001104 	addi	fp,sp,68
    e060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e064:	e0bfff17 	ldw	r2,-4(fp)
    e068:	10000616 	blt	r2,zero,e084 <isatty+0x34>
    e06c:	e0bfff17 	ldw	r2,-4(fp)
    e070:	10c00324 	muli	r3,r2,12
    e074:	00800074 	movhi	r2,1
    e078:	10871b04 	addi	r2,r2,7276
    e07c:	1885883a 	add	r2,r3,r2
    e080:	00000106 	br	e088 <isatty+0x38>
    e084:	0005883a 	mov	r2,zero
    e088:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e08c:	e0bfef17 	ldw	r2,-68(fp)
    e090:	10000e26 	beq	r2,zero,e0cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e094:	e0bfef17 	ldw	r2,-68(fp)
    e098:	10800017 	ldw	r2,0(r2)
    e09c:	10800817 	ldw	r2,32(r2)
    e0a0:	1000021e 	bne	r2,zero,e0ac <isatty+0x5c>
    {
      return 1;
    e0a4:	00800044 	movi	r2,1
    e0a8:	00000d06 	br	e0e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e0ac:	e0bff004 	addi	r2,fp,-64
    e0b0:	100b883a 	mov	r5,r2
    e0b4:	e13fff17 	ldw	r4,-4(fp)
    e0b8:	000df640 	call	df64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e0bc:	e0bff117 	ldw	r2,-60(fp)
    e0c0:	10880020 	cmpeqi	r2,r2,8192
    e0c4:	10803fcc 	andi	r2,r2,255
    e0c8:	00000506 	br	e0e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e0cc:	000e0140 	call	e014 <alt_get_errno>
    e0d0:	1007883a 	mov	r3,r2
    e0d4:	00801444 	movi	r2,81
    e0d8:	18800015 	stw	r2,0(r3)
    return 0;
    e0dc:	0005883a 	mov	r2,zero
  }
}
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e0f4:	defffc04 	addi	sp,sp,-16
    e0f8:	df000315 	stw	fp,12(sp)
    e0fc:	df000304 	addi	fp,sp,12
    e100:	e13ffd15 	stw	r4,-12(fp)
    e104:	e17ffe15 	stw	r5,-8(fp)
    e108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e10c:	e0fffe17 	ldw	r3,-8(fp)
    e110:	e0bffd17 	ldw	r2,-12(fp)
    e114:	18800c26 	beq	r3,r2,e148 <alt_load_section+0x54>
  {
    while( to != end )
    e118:	00000806 	br	e13c <alt_load_section+0x48>
    {
      *to++ = *from++;
    e11c:	e0bffe17 	ldw	r2,-8(fp)
    e120:	10c00104 	addi	r3,r2,4
    e124:	e0fffe15 	stw	r3,-8(fp)
    e128:	e0fffd17 	ldw	r3,-12(fp)
    e12c:	19000104 	addi	r4,r3,4
    e130:	e13ffd15 	stw	r4,-12(fp)
    e134:	18c00017 	ldw	r3,0(r3)
    e138:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e13c:	e0fffe17 	ldw	r3,-8(fp)
    e140:	e0bfff17 	ldw	r2,-4(fp)
    e144:	18bff51e 	bne	r3,r2,e11c <__alt_data_end+0xff00e11c>
    {
      *to++ = *from++;
    }
  }
}
    e148:	0001883a 	nop
    e14c:	e037883a 	mov	sp,fp
    e150:	df000017 	ldw	fp,0(sp)
    e154:	dec00104 	addi	sp,sp,4
    e158:	f800283a 	ret

0000e15c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e15c:	defffe04 	addi	sp,sp,-8
    e160:	dfc00115 	stw	ra,4(sp)
    e164:	df000015 	stw	fp,0(sp)
    e168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e16c:	01800074 	movhi	r6,1
    e170:	318ba304 	addi	r6,r6,11916
    e174:	01400074 	movhi	r5,1
    e178:	2944a804 	addi	r5,r5,4768
    e17c:	01000074 	movhi	r4,1
    e180:	210ba304 	addi	r4,r4,11916
    e184:	000e0f40 	call	e0f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e188:	01800034 	movhi	r6,0
    e18c:	31809104 	addi	r6,r6,580
    e190:	01400034 	movhi	r5,0
    e194:	29400804 	addi	r5,r5,32
    e198:	01000034 	movhi	r4,0
    e19c:	21000804 	addi	r4,r4,32
    e1a0:	000e0f40 	call	e0f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e1a4:	01800074 	movhi	r6,1
    e1a8:	3184a804 	addi	r6,r6,4768
    e1ac:	01400074 	movhi	r5,1
    e1b0:	2942be04 	addi	r5,r5,2808
    e1b4:	01000074 	movhi	r4,1
    e1b8:	2102be04 	addi	r4,r4,2808
    e1bc:	000e0f40 	call	e0f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e1c0:	000f8340 	call	f834 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e1c4:	000fa1c0 	call	fa1c <alt_icache_flush_all>
}
    e1c8:	0001883a 	nop
    e1cc:	e037883a 	mov	sp,fp
    e1d0:	dfc00117 	ldw	ra,4(sp)
    e1d4:	df000017 	ldw	fp,0(sp)
    e1d8:	dec00204 	addi	sp,sp,8
    e1dc:	f800283a 	ret

0000e1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e1e0:	defffe04 	addi	sp,sp,-8
    e1e4:	dfc00115 	stw	ra,4(sp)
    e1e8:	df000015 	stw	fp,0(sp)
    e1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e1f0:	d0a00b17 	ldw	r2,-32724(gp)
    e1f4:	10000326 	beq	r2,zero,e204 <alt_get_errno+0x24>
    e1f8:	d0a00b17 	ldw	r2,-32724(gp)
    e1fc:	103ee83a 	callr	r2
    e200:	00000106 	br	e208 <alt_get_errno+0x28>
    e204:	d0a72004 	addi	r2,gp,-25472
}
    e208:	e037883a 	mov	sp,fp
    e20c:	dfc00117 	ldw	ra,4(sp)
    e210:	df000017 	ldw	fp,0(sp)
    e214:	dec00204 	addi	sp,sp,8
    e218:	f800283a 	ret

0000e21c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e21c:	defff904 	addi	sp,sp,-28
    e220:	dfc00615 	stw	ra,24(sp)
    e224:	df000515 	stw	fp,20(sp)
    e228:	df000504 	addi	fp,sp,20
    e22c:	e13ffd15 	stw	r4,-12(fp)
    e230:	e17ffe15 	stw	r5,-8(fp)
    e234:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e238:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e23c:	e0bffd17 	ldw	r2,-12(fp)
    e240:	10000616 	blt	r2,zero,e25c <lseek+0x40>
    e244:	e0bffd17 	ldw	r2,-12(fp)
    e248:	10c00324 	muli	r3,r2,12
    e24c:	00800074 	movhi	r2,1
    e250:	10871b04 	addi	r2,r2,7276
    e254:	1885883a 	add	r2,r3,r2
    e258:	00000106 	br	e260 <lseek+0x44>
    e25c:	0005883a 	mov	r2,zero
    e260:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	10001026 	beq	r2,zero,e2ac <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e26c:	e0bffc17 	ldw	r2,-16(fp)
    e270:	10800017 	ldw	r2,0(r2)
    e274:	10800717 	ldw	r2,28(r2)
    e278:	10000926 	beq	r2,zero,e2a0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e27c:	e0bffc17 	ldw	r2,-16(fp)
    e280:	10800017 	ldw	r2,0(r2)
    e284:	10800717 	ldw	r2,28(r2)
    e288:	e1bfff17 	ldw	r6,-4(fp)
    e28c:	e17ffe17 	ldw	r5,-8(fp)
    e290:	e13ffc17 	ldw	r4,-16(fp)
    e294:	103ee83a 	callr	r2
    e298:	e0bffb15 	stw	r2,-20(fp)
    e29c:	00000506 	br	e2b4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e2a0:	00bfde84 	movi	r2,-134
    e2a4:	e0bffb15 	stw	r2,-20(fp)
    e2a8:	00000206 	br	e2b4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e2ac:	00bfebc4 	movi	r2,-81
    e2b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e2b4:	e0bffb17 	ldw	r2,-20(fp)
    e2b8:	1000070e 	bge	r2,zero,e2d8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e2bc:	000e1e00 	call	e1e0 <alt_get_errno>
    e2c0:	1007883a 	mov	r3,r2
    e2c4:	e0bffb17 	ldw	r2,-20(fp)
    e2c8:	0085c83a 	sub	r2,zero,r2
    e2cc:	18800015 	stw	r2,0(r3)
    rc = -1;
    e2d0:	00bfffc4 	movi	r2,-1
    e2d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e2d8:	e0bffb17 	ldw	r2,-20(fp)
}
    e2dc:	e037883a 	mov	sp,fp
    e2e0:	dfc00117 	ldw	ra,4(sp)
    e2e4:	df000017 	ldw	fp,0(sp)
    e2e8:	dec00204 	addi	sp,sp,8
    e2ec:	f800283a 	ret

0000e2f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e2f0:	defffd04 	addi	sp,sp,-12
    e2f4:	dfc00215 	stw	ra,8(sp)
    e2f8:	df000115 	stw	fp,4(sp)
    e2fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e300:	0009883a 	mov	r4,zero
    e304:	000e8100 	call	e810 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e308:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e30c:	000e8480 	call	e848 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e310:	01800074 	movhi	r6,1
    e314:	3184a004 	addi	r6,r6,4736
    e318:	01400074 	movhi	r5,1
    e31c:	2944a004 	addi	r5,r5,4736
    e320:	01000074 	movhi	r4,1
    e324:	2104a004 	addi	r4,r4,4736
    e328:	000fdb40 	call	fdb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e32c:	000f95c0 	call	f95c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e330:	01000074 	movhi	r4,1
    e334:	213e6f04 	addi	r4,r4,-1604
    e338:	00105b40 	call	105b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e33c:	d0a72417 	ldw	r2,-25456(gp)
    e340:	d0e72517 	ldw	r3,-25452(gp)
    e344:	d1272617 	ldw	r4,-25448(gp)
    e348:	200d883a 	mov	r6,r4
    e34c:	180b883a 	mov	r5,r3
    e350:	1009883a 	mov	r4,r2
    e354:	0000f300 	call	f30 <main>
    e358:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e35c:	01000044 	movi	r4,1
    e360:	000de2c0 	call	de2c <close>
  exit (result);
    e364:	e13fff17 	ldw	r4,-4(fp)
    e368:	00105c80 	call	105c8 <exit>

0000e36c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e36c:	defffe04 	addi	sp,sp,-8
    e370:	df000115 	stw	fp,4(sp)
    e374:	df000104 	addi	fp,sp,4
    e378:	e13fff15 	stw	r4,-4(fp)
}
    e37c:	0001883a 	nop
    e380:	e037883a 	mov	sp,fp
    e384:	df000017 	ldw	fp,0(sp)
    e388:	dec00104 	addi	sp,sp,4
    e38c:	f800283a 	ret

0000e390 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e390:	defffe04 	addi	sp,sp,-8
    e394:	df000115 	stw	fp,4(sp)
    e398:	df000104 	addi	fp,sp,4
    e39c:	e13fff15 	stw	r4,-4(fp)
}
    e3a0:	0001883a 	nop
    e3a4:	e037883a 	mov	sp,fp
    e3a8:	df000017 	ldw	fp,0(sp)
    e3ac:	dec00104 	addi	sp,sp,4
    e3b0:	f800283a 	ret

0000e3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e3b4:	defffe04 	addi	sp,sp,-8
    e3b8:	dfc00115 	stw	ra,4(sp)
    e3bc:	df000015 	stw	fp,0(sp)
    e3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e3c4:	d0a00b17 	ldw	r2,-32724(gp)
    e3c8:	10000326 	beq	r2,zero,e3d8 <alt_get_errno+0x24>
    e3cc:	d0a00b17 	ldw	r2,-32724(gp)
    e3d0:	103ee83a 	callr	r2
    e3d4:	00000106 	br	e3dc <alt_get_errno+0x28>
    e3d8:	d0a72004 	addi	r2,gp,-25472
}
    e3dc:	e037883a 	mov	sp,fp
    e3e0:	dfc00117 	ldw	ra,4(sp)
    e3e4:	df000017 	ldw	fp,0(sp)
    e3e8:	dec00204 	addi	sp,sp,8
    e3ec:	f800283a 	ret

0000e3f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e3f0:	defff904 	addi	sp,sp,-28
    e3f4:	dfc00615 	stw	ra,24(sp)
    e3f8:	df000515 	stw	fp,20(sp)
    e3fc:	df000504 	addi	fp,sp,20
    e400:	e13ffd15 	stw	r4,-12(fp)
    e404:	e17ffe15 	stw	r5,-8(fp)
    e408:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e40c:	e0bffd17 	ldw	r2,-12(fp)
    e410:	10000616 	blt	r2,zero,e42c <read+0x3c>
    e414:	e0bffd17 	ldw	r2,-12(fp)
    e418:	10c00324 	muli	r3,r2,12
    e41c:	00800074 	movhi	r2,1
    e420:	10871b04 	addi	r2,r2,7276
    e424:	1885883a 	add	r2,r3,r2
    e428:	00000106 	br	e430 <read+0x40>
    e42c:	0005883a 	mov	r2,zero
    e430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e434:	e0bffb17 	ldw	r2,-20(fp)
    e438:	10002226 	beq	r2,zero,e4c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e43c:	e0bffb17 	ldw	r2,-20(fp)
    e440:	10800217 	ldw	r2,8(r2)
    e444:	108000cc 	andi	r2,r2,3
    e448:	10800060 	cmpeqi	r2,r2,1
    e44c:	1000181e 	bne	r2,zero,e4b0 <read+0xc0>
        (fd->dev->read))
    e450:	e0bffb17 	ldw	r2,-20(fp)
    e454:	10800017 	ldw	r2,0(r2)
    e458:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e45c:	10001426 	beq	r2,zero,e4b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e460:	e0bffb17 	ldw	r2,-20(fp)
    e464:	10800017 	ldw	r2,0(r2)
    e468:	10800517 	ldw	r2,20(r2)
    e46c:	e0ffff17 	ldw	r3,-4(fp)
    e470:	180d883a 	mov	r6,r3
    e474:	e17ffe17 	ldw	r5,-8(fp)
    e478:	e13ffb17 	ldw	r4,-20(fp)
    e47c:	103ee83a 	callr	r2
    e480:	e0bffc15 	stw	r2,-16(fp)
    e484:	e0bffc17 	ldw	r2,-16(fp)
    e488:	1000070e 	bge	r2,zero,e4a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    e48c:	000e3b40 	call	e3b4 <alt_get_errno>
    e490:	1007883a 	mov	r3,r2
    e494:	e0bffc17 	ldw	r2,-16(fp)
    e498:	0085c83a 	sub	r2,zero,r2
    e49c:	18800015 	stw	r2,0(r3)
          return -1;
    e4a0:	00bfffc4 	movi	r2,-1
    e4a4:	00000c06 	br	e4d8 <read+0xe8>
        }
        return rval;
    e4a8:	e0bffc17 	ldw	r2,-16(fp)
    e4ac:	00000a06 	br	e4d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e4b0:	000e3b40 	call	e3b4 <alt_get_errno>
    e4b4:	1007883a 	mov	r3,r2
    e4b8:	00800344 	movi	r2,13
    e4bc:	18800015 	stw	r2,0(r3)
    e4c0:	00000406 	br	e4d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e4c4:	000e3b40 	call	e3b4 <alt_get_errno>
    e4c8:	1007883a 	mov	r3,r2
    e4cc:	00801444 	movi	r2,81
    e4d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e4d4:	00bfffc4 	movi	r2,-1
}
    e4d8:	e037883a 	mov	sp,fp
    e4dc:	dfc00117 	ldw	ra,4(sp)
    e4e0:	df000017 	ldw	fp,0(sp)
    e4e4:	dec00204 	addi	sp,sp,8
    e4e8:	f800283a 	ret

0000e4ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e4ec:	defffe04 	addi	sp,sp,-8
    e4f0:	df000115 	stw	fp,4(sp)
    e4f4:	df000104 	addi	fp,sp,4
    e4f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e4fc:	e0bfff17 	ldw	r2,-4(fp)
    e500:	108000d0 	cmplti	r2,r2,3
    e504:	10000d1e 	bne	r2,zero,e53c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    e508:	00800074 	movhi	r2,1
    e50c:	10871b04 	addi	r2,r2,7276
    e510:	e0ffff17 	ldw	r3,-4(fp)
    e514:	18c00324 	muli	r3,r3,12
    e518:	10c5883a 	add	r2,r2,r3
    e51c:	10800204 	addi	r2,r2,8
    e520:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e524:	00800074 	movhi	r2,1
    e528:	10871b04 	addi	r2,r2,7276
    e52c:	e0ffff17 	ldw	r3,-4(fp)
    e530:	18c00324 	muli	r3,r3,12
    e534:	10c5883a 	add	r2,r2,r3
    e538:	10000015 	stw	zero,0(r2)
  }
}
    e53c:	0001883a 	nop
    e540:	e037883a 	mov	sp,fp
    e544:	df000017 	ldw	fp,0(sp)
    e548:	dec00104 	addi	sp,sp,4
    e54c:	f800283a 	ret

0000e550 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e550:	defff904 	addi	sp,sp,-28
    e554:	df000615 	stw	fp,24(sp)
    e558:	df000604 	addi	fp,sp,24
    e55c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e560:	0005303a 	rdctl	r2,status
    e564:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e568:	e0fffe17 	ldw	r3,-8(fp)
    e56c:	00bfff84 	movi	r2,-2
    e570:	1884703a 	and	r2,r3,r2
    e574:	1001703a 	wrctl	status,r2
  
  return context;
    e578:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e57c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e580:	d0a00c17 	ldw	r2,-32720(gp)
    e584:	10c000c4 	addi	r3,r2,3
    e588:	00bfff04 	movi	r2,-4
    e58c:	1884703a 	and	r2,r3,r2
    e590:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e594:	d0e00c17 	ldw	r3,-32720(gp)
    e598:	e0bfff17 	ldw	r2,-4(fp)
    e59c:	1887883a 	add	r3,r3,r2
    e5a0:	00804034 	movhi	r2,256
    e5a4:	10800004 	addi	r2,r2,0
    e5a8:	10c0062e 	bgeu	r2,r3,e5c4 <sbrk+0x74>
    e5ac:	e0bffb17 	ldw	r2,-20(fp)
    e5b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5b4:	e0bffa17 	ldw	r2,-24(fp)
    e5b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e5bc:	00bfffc4 	movi	r2,-1
    e5c0:	00000b06 	br	e5f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e5c4:	d0a00c17 	ldw	r2,-32720(gp)
    e5c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e5cc:	d0e00c17 	ldw	r3,-32720(gp)
    e5d0:	e0bfff17 	ldw	r2,-4(fp)
    e5d4:	1885883a 	add	r2,r3,r2
    e5d8:	d0a00c15 	stw	r2,-32720(gp)
    e5dc:	e0bffb17 	ldw	r2,-20(fp)
    e5e0:	e0bffc15 	stw	r2,-16(fp)
    e5e4:	e0bffc17 	ldw	r2,-16(fp)
    e5e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e5ec:	e0bffd17 	ldw	r2,-12(fp)
} 
    e5f0:	e037883a 	mov	sp,fp
    e5f4:	df000017 	ldw	fp,0(sp)
    e5f8:	dec00104 	addi	sp,sp,4
    e5fc:	f800283a 	ret

0000e600 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    e600:	defffa04 	addi	sp,sp,-24
    e604:	dfc00515 	stw	ra,20(sp)
    e608:	df000415 	stw	fp,16(sp)
    e60c:	df000404 	addi	fp,sp,16
    e610:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
    e614:	e0bfff17 	ldw	r2,-4(fp)
    e618:	108007c4 	addi	r2,r2,31
    e61c:	1004d17a 	srli	r2,r2,5
    e620:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    e624:	e0bffc17 	ldw	r2,-16(fp)
    e628:	1004917a 	slli	r2,r2,5
    e62c:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    e630:	e17ffd17 	ldw	r5,-12(fp)
    e634:	01000804 	movi	r4,32
    e638:	00106000 	call	10600 <memalign>
    e63c:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
    e640:	e0bffe17 	ldw	r2,-8(fp)
    e644:	1000021e 	bne	r2,zero,e650 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
    e648:	0005883a 	mov	r2,zero
    e64c:	00000506 	br	e664 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    e650:	e17ffd17 	ldw	r5,-12(fp)
    e654:	e13ffe17 	ldw	r4,-8(fp)
    e658:	000f7bc0 	call	f7bc <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    e65c:	e0bffe17 	ldw	r2,-8(fp)
    e660:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    e664:	e037883a 	mov	sp,fp
    e668:	dfc00117 	ldw	ra,4(sp)
    e66c:	df000017 	ldw	fp,0(sp)
    e670:	dec00204 	addi	sp,sp,8
    e674:	f800283a 	ret

0000e678 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    e678:	defffd04 	addi	sp,sp,-12
    e67c:	dfc00215 	stw	ra,8(sp)
    e680:	df000115 	stw	fp,4(sp)
    e684:	df000104 	addi	fp,sp,4
    e688:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    e68c:	e13fff17 	ldw	r4,-4(fp)
    e690:	000f6640 	call	f664 <alt_busy_sleep>
}
    e694:	e037883a 	mov	sp,fp
    e698:	dfc00117 	ldw	ra,4(sp)
    e69c:	df000017 	ldw	fp,0(sp)
    e6a0:	dec00204 	addi	sp,sp,8
    e6a4:	f800283a 	ret

0000e6a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e6a8:	defffe04 	addi	sp,sp,-8
    e6ac:	dfc00115 	stw	ra,4(sp)
    e6b0:	df000015 	stw	fp,0(sp)
    e6b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e6b8:	d0a00b17 	ldw	r2,-32724(gp)
    e6bc:	10000326 	beq	r2,zero,e6cc <alt_get_errno+0x24>
    e6c0:	d0a00b17 	ldw	r2,-32724(gp)
    e6c4:	103ee83a 	callr	r2
    e6c8:	00000106 	br	e6d0 <alt_get_errno+0x28>
    e6cc:	d0a72004 	addi	r2,gp,-25472
}
    e6d0:	e037883a 	mov	sp,fp
    e6d4:	dfc00117 	ldw	ra,4(sp)
    e6d8:	df000017 	ldw	fp,0(sp)
    e6dc:	dec00204 	addi	sp,sp,8
    e6e0:	f800283a 	ret

0000e6e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e6e4:	defff904 	addi	sp,sp,-28
    e6e8:	dfc00615 	stw	ra,24(sp)
    e6ec:	df000515 	stw	fp,20(sp)
    e6f0:	df000504 	addi	fp,sp,20
    e6f4:	e13ffd15 	stw	r4,-12(fp)
    e6f8:	e17ffe15 	stw	r5,-8(fp)
    e6fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e700:	e0bffd17 	ldw	r2,-12(fp)
    e704:	10000616 	blt	r2,zero,e720 <write+0x3c>
    e708:	e0bffd17 	ldw	r2,-12(fp)
    e70c:	10c00324 	muli	r3,r2,12
    e710:	00800074 	movhi	r2,1
    e714:	10871b04 	addi	r2,r2,7276
    e718:	1885883a 	add	r2,r3,r2
    e71c:	00000106 	br	e724 <write+0x40>
    e720:	0005883a 	mov	r2,zero
    e724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e728:	e0bffb17 	ldw	r2,-20(fp)
    e72c:	10002126 	beq	r2,zero,e7b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e730:	e0bffb17 	ldw	r2,-20(fp)
    e734:	10800217 	ldw	r2,8(r2)
    e738:	108000cc 	andi	r2,r2,3
    e73c:	10001826 	beq	r2,zero,e7a0 <write+0xbc>
    e740:	e0bffb17 	ldw	r2,-20(fp)
    e744:	10800017 	ldw	r2,0(r2)
    e748:	10800617 	ldw	r2,24(r2)
    e74c:	10001426 	beq	r2,zero,e7a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e750:	e0bffb17 	ldw	r2,-20(fp)
    e754:	10800017 	ldw	r2,0(r2)
    e758:	10800617 	ldw	r2,24(r2)
    e75c:	e0ffff17 	ldw	r3,-4(fp)
    e760:	180d883a 	mov	r6,r3
    e764:	e17ffe17 	ldw	r5,-8(fp)
    e768:	e13ffb17 	ldw	r4,-20(fp)
    e76c:	103ee83a 	callr	r2
    e770:	e0bffc15 	stw	r2,-16(fp)
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	1000070e 	bge	r2,zero,e798 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e77c:	000e6a80 	call	e6a8 <alt_get_errno>
    e780:	1007883a 	mov	r3,r2
    e784:	e0bffc17 	ldw	r2,-16(fp)
    e788:	0085c83a 	sub	r2,zero,r2
    e78c:	18800015 	stw	r2,0(r3)
        return -1;
    e790:	00bfffc4 	movi	r2,-1
    e794:	00000c06 	br	e7c8 <write+0xe4>
      }
      return rval;
    e798:	e0bffc17 	ldw	r2,-16(fp)
    e79c:	00000a06 	br	e7c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e7a0:	000e6a80 	call	e6a8 <alt_get_errno>
    e7a4:	1007883a 	mov	r3,r2
    e7a8:	00800344 	movi	r2,13
    e7ac:	18800015 	stw	r2,0(r3)
    e7b0:	00000406 	br	e7c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e7b4:	000e6a80 	call	e6a8 <alt_get_errno>
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	00801444 	movi	r2,81
    e7c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e7c4:	00bfffc4 	movi	r2,-1
}
    e7c8:	e037883a 	mov	sp,fp
    e7cc:	dfc00117 	ldw	ra,4(sp)
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00204 	addi	sp,sp,8
    e7d8:	f800283a 	ret

0000e7dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e7dc:	defffd04 	addi	sp,sp,-12
    e7e0:	dfc00215 	stw	ra,8(sp)
    e7e4:	df000115 	stw	fp,4(sp)
    e7e8:	df000104 	addi	fp,sp,4
    e7ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e7f0:	d1600804 	addi	r5,gp,-32736
    e7f4:	e13fff17 	ldw	r4,-4(fp)
    e7f8:	000f8b80 	call	f8b8 <alt_dev_llist_insert>
}
    e7fc:	e037883a 	mov	sp,fp
    e800:	dfc00117 	ldw	ra,4(sp)
    e804:	df000017 	ldw	fp,0(sp)
    e808:	dec00204 	addi	sp,sp,8
    e80c:	f800283a 	ret

0000e810 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e810:	defffd04 	addi	sp,sp,-12
    e814:	dfc00215 	stw	ra,8(sp)
    e818:	df000115 	stw	fp,4(sp)
    e81c:	df000104 	addi	fp,sp,4
    e820:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e824:	00102280 	call	10228 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e828:	00800044 	movi	r2,1
    e82c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e830:	0001883a 	nop
    e834:	e037883a 	mov	sp,fp
    e838:	dfc00117 	ldw	ra,4(sp)
    e83c:	df000017 	ldw	fp,0(sp)
    e840:	dec00204 	addi	sp,sp,8
    e844:	f800283a 	ret

0000e848 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e848:	defffe04 	addi	sp,sp,-8
    e84c:	dfc00115 	stw	ra,4(sp)
    e850:	df000015 	stw	fp,0(sp)
    e854:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    e858:	00804034 	movhi	r2,256
    e85c:	10840004 	addi	r2,r2,4096
    e860:	d0a72715 	stw	r2,-25444(gp)
    e864:	0080bef4 	movhi	r2,763
    e868:	10bc2004 	addi	r2,r2,-3968
    e86c:	d0a72815 	stw	r2,-25440(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    e870:	01c0fa04 	movi	r7,1000
    e874:	01800104 	movi	r6,4
    e878:	000b883a 	mov	r5,zero
    e87c:	01004034 	movhi	r4,256
    e880:	21040804 	addi	r4,r4,4128
    e884:	000f3a40 	call	f3a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    e888:	000d883a 	mov	r6,zero
    e88c:	000b883a 	mov	r5,zero
    e890:	01000074 	movhi	r4,1
    e894:	21078504 	addi	r4,r4,7700
    e898:	000ea280 	call	ea28 <altera_avalon_jtag_uart_init>
    e89c:	01000074 	movhi	r4,1
    e8a0:	21077b04 	addi	r4,r4,7660
    e8a4:	000e7dc0 	call	e7dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    e8a8:	0001883a 	nop
}
    e8ac:	0001883a 	nop
    e8b0:	e037883a 	mov	sp,fp
    e8b4:	dfc00117 	ldw	ra,4(sp)
    e8b8:	df000017 	ldw	fp,0(sp)
    e8bc:	dec00204 	addi	sp,sp,8
    e8c0:	f800283a 	ret

0000e8c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e8c4:	defffa04 	addi	sp,sp,-24
    e8c8:	dfc00515 	stw	ra,20(sp)
    e8cc:	df000415 	stw	fp,16(sp)
    e8d0:	df000404 	addi	fp,sp,16
    e8d4:	e13ffd15 	stw	r4,-12(fp)
    e8d8:	e17ffe15 	stw	r5,-8(fp)
    e8dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e8e0:	e0bffd17 	ldw	r2,-12(fp)
    e8e4:	10800017 	ldw	r2,0(r2)
    e8e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e8ec:	e0bffc17 	ldw	r2,-16(fp)
    e8f0:	10c00a04 	addi	r3,r2,40
    e8f4:	e0bffd17 	ldw	r2,-12(fp)
    e8f8:	10800217 	ldw	r2,8(r2)
    e8fc:	100f883a 	mov	r7,r2
    e900:	e1bfff17 	ldw	r6,-4(fp)
    e904:	e17ffe17 	ldw	r5,-8(fp)
    e908:	1809883a 	mov	r4,r3
    e90c:	000eeec0 	call	eeec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e910:	e037883a 	mov	sp,fp
    e914:	dfc00117 	ldw	ra,4(sp)
    e918:	df000017 	ldw	fp,0(sp)
    e91c:	dec00204 	addi	sp,sp,8
    e920:	f800283a 	ret

0000e924 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e924:	defffa04 	addi	sp,sp,-24
    e928:	dfc00515 	stw	ra,20(sp)
    e92c:	df000415 	stw	fp,16(sp)
    e930:	df000404 	addi	fp,sp,16
    e934:	e13ffd15 	stw	r4,-12(fp)
    e938:	e17ffe15 	stw	r5,-8(fp)
    e93c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e940:	e0bffd17 	ldw	r2,-12(fp)
    e944:	10800017 	ldw	r2,0(r2)
    e948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e94c:	e0bffc17 	ldw	r2,-16(fp)
    e950:	10c00a04 	addi	r3,r2,40
    e954:	e0bffd17 	ldw	r2,-12(fp)
    e958:	10800217 	ldw	r2,8(r2)
    e95c:	100f883a 	mov	r7,r2
    e960:	e1bfff17 	ldw	r6,-4(fp)
    e964:	e17ffe17 	ldw	r5,-8(fp)
    e968:	1809883a 	mov	r4,r3
    e96c:	000f1080 	call	f108 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e970:	e037883a 	mov	sp,fp
    e974:	dfc00117 	ldw	ra,4(sp)
    e978:	df000017 	ldw	fp,0(sp)
    e97c:	dec00204 	addi	sp,sp,8
    e980:	f800283a 	ret

0000e984 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e984:	defffc04 	addi	sp,sp,-16
    e988:	dfc00315 	stw	ra,12(sp)
    e98c:	df000215 	stw	fp,8(sp)
    e990:	df000204 	addi	fp,sp,8
    e994:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e998:	e0bfff17 	ldw	r2,-4(fp)
    e99c:	10800017 	ldw	r2,0(r2)
    e9a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e9a4:	e0bffe17 	ldw	r2,-8(fp)
    e9a8:	10c00a04 	addi	r3,r2,40
    e9ac:	e0bfff17 	ldw	r2,-4(fp)
    e9b0:	10800217 	ldw	r2,8(r2)
    e9b4:	100b883a 	mov	r5,r2
    e9b8:	1809883a 	mov	r4,r3
    e9bc:	000ed940 	call	ed94 <altera_avalon_jtag_uart_close>
}
    e9c0:	e037883a 	mov	sp,fp
    e9c4:	dfc00117 	ldw	ra,4(sp)
    e9c8:	df000017 	ldw	fp,0(sp)
    e9cc:	dec00204 	addi	sp,sp,8
    e9d0:	f800283a 	ret

0000e9d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e9d4:	defffa04 	addi	sp,sp,-24
    e9d8:	dfc00515 	stw	ra,20(sp)
    e9dc:	df000415 	stw	fp,16(sp)
    e9e0:	df000404 	addi	fp,sp,16
    e9e4:	e13ffd15 	stw	r4,-12(fp)
    e9e8:	e17ffe15 	stw	r5,-8(fp)
    e9ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e9f0:	e0bffd17 	ldw	r2,-12(fp)
    e9f4:	10800017 	ldw	r2,0(r2)
    e9f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e9fc:	e0bffc17 	ldw	r2,-16(fp)
    ea00:	10800a04 	addi	r2,r2,40
    ea04:	e1bfff17 	ldw	r6,-4(fp)
    ea08:	e17ffe17 	ldw	r5,-8(fp)
    ea0c:	1009883a 	mov	r4,r2
    ea10:	000edfc0 	call	edfc <altera_avalon_jtag_uart_ioctl>
}
    ea14:	e037883a 	mov	sp,fp
    ea18:	dfc00117 	ldw	ra,4(sp)
    ea1c:	df000017 	ldw	fp,0(sp)
    ea20:	dec00204 	addi	sp,sp,8
    ea24:	f800283a 	ret

0000ea28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ea28:	defffa04 	addi	sp,sp,-24
    ea2c:	dfc00515 	stw	ra,20(sp)
    ea30:	df000415 	stw	fp,16(sp)
    ea34:	df000404 	addi	fp,sp,16
    ea38:	e13ffd15 	stw	r4,-12(fp)
    ea3c:	e17ffe15 	stw	r5,-8(fp)
    ea40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea44:	e0bffd17 	ldw	r2,-12(fp)
    ea48:	00c00044 	movi	r3,1
    ea4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ea50:	e0bffd17 	ldw	r2,-12(fp)
    ea54:	10800017 	ldw	r2,0(r2)
    ea58:	10800104 	addi	r2,r2,4
    ea5c:	1007883a 	mov	r3,r2
    ea60:	e0bffd17 	ldw	r2,-12(fp)
    ea64:	10800817 	ldw	r2,32(r2)
    ea68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ea6c:	e0bffe17 	ldw	r2,-8(fp)
    ea70:	e0ffff17 	ldw	r3,-4(fp)
    ea74:	d8000015 	stw	zero,0(sp)
    ea78:	e1fffd17 	ldw	r7,-12(fp)
    ea7c:	01800074 	movhi	r6,1
    ea80:	31baba04 	addi	r6,r6,-5400
    ea84:	180b883a 	mov	r5,r3
    ea88:	1009883a 	mov	r4,r2
    ea8c:	000fa500 	call	fa50 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ea90:	e0bffd17 	ldw	r2,-12(fp)
    ea94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ea98:	e0bffd17 	ldw	r2,-12(fp)
    ea9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    eaa0:	d0e72a17 	ldw	r3,-25432(gp)
    eaa4:	e1fffd17 	ldw	r7,-12(fp)
    eaa8:	01800074 	movhi	r6,1
    eaac:	31bb3d04 	addi	r6,r6,-4876
    eab0:	180b883a 	mov	r5,r3
    eab4:	1009883a 	mov	r4,r2
    eab8:	000f5380 	call	f538 <alt_alarm_start>
    eabc:	1000040e 	bge	r2,zero,ead0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    eac0:	e0fffd17 	ldw	r3,-12(fp)
    eac4:	00a00034 	movhi	r2,32768
    eac8:	10bfffc4 	addi	r2,r2,-1
    eacc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ead0:	0001883a 	nop
    ead4:	e037883a 	mov	sp,fp
    ead8:	dfc00117 	ldw	ra,4(sp)
    eadc:	df000017 	ldw	fp,0(sp)
    eae0:	dec00204 	addi	sp,sp,8
    eae4:	f800283a 	ret

0000eae8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    eae8:	defff804 	addi	sp,sp,-32
    eaec:	df000715 	stw	fp,28(sp)
    eaf0:	df000704 	addi	fp,sp,28
    eaf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    eaf8:	e0bfff17 	ldw	r2,-4(fp)
    eafc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    eb00:	e0bffb17 	ldw	r2,-20(fp)
    eb04:	10800017 	ldw	r2,0(r2)
    eb08:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eb0c:	e0bffc17 	ldw	r2,-16(fp)
    eb10:	10800104 	addi	r2,r2,4
    eb14:	10800037 	ldwio	r2,0(r2)
    eb18:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    eb1c:	e0bffd17 	ldw	r2,-12(fp)
    eb20:	1080c00c 	andi	r2,r2,768
    eb24:	10006d26 	beq	r2,zero,ecdc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    eb28:	e0bffd17 	ldw	r2,-12(fp)
    eb2c:	1080400c 	andi	r2,r2,256
    eb30:	10003526 	beq	r2,zero,ec08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    eb34:	00800074 	movhi	r2,1
    eb38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eb3c:	e0bffb17 	ldw	r2,-20(fp)
    eb40:	10800a17 	ldw	r2,40(r2)
    eb44:	10800044 	addi	r2,r2,1
    eb48:	1081ffcc 	andi	r2,r2,2047
    eb4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    eb50:	e0bffb17 	ldw	r2,-20(fp)
    eb54:	10c00b17 	ldw	r3,44(r2)
    eb58:	e0bffe17 	ldw	r2,-8(fp)
    eb5c:	18801526 	beq	r3,r2,ebb4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    eb60:	e0bffc17 	ldw	r2,-16(fp)
    eb64:	10800037 	ldwio	r2,0(r2)
    eb68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    eb6c:	e0bff917 	ldw	r2,-28(fp)
    eb70:	10a0000c 	andi	r2,r2,32768
    eb74:	10001126 	beq	r2,zero,ebbc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    eb78:	e0bffb17 	ldw	r2,-20(fp)
    eb7c:	10800a17 	ldw	r2,40(r2)
    eb80:	e0fff917 	ldw	r3,-28(fp)
    eb84:	1809883a 	mov	r4,r3
    eb88:	e0fffb17 	ldw	r3,-20(fp)
    eb8c:	1885883a 	add	r2,r3,r2
    eb90:	10800e04 	addi	r2,r2,56
    eb94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eb98:	e0bffb17 	ldw	r2,-20(fp)
    eb9c:	10800a17 	ldw	r2,40(r2)
    eba0:	10800044 	addi	r2,r2,1
    eba4:	10c1ffcc 	andi	r3,r2,2047
    eba8:	e0bffb17 	ldw	r2,-20(fp)
    ebac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ebb0:	003fe206 	br	eb3c <__alt_data_end+0xff00eb3c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ebb4:	0001883a 	nop
    ebb8:	00000106 	br	ebc0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ebbc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ebc0:	e0bff917 	ldw	r2,-28(fp)
    ebc4:	10bfffec 	andhi	r2,r2,65535
    ebc8:	10000f26 	beq	r2,zero,ec08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ebcc:	e0bffb17 	ldw	r2,-20(fp)
    ebd0:	10c00817 	ldw	r3,32(r2)
    ebd4:	00bfff84 	movi	r2,-2
    ebd8:	1886703a 	and	r3,r3,r2
    ebdc:	e0bffb17 	ldw	r2,-20(fp)
    ebe0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ebe4:	e0bffc17 	ldw	r2,-16(fp)
    ebe8:	10800104 	addi	r2,r2,4
    ebec:	1007883a 	mov	r3,r2
    ebf0:	e0bffb17 	ldw	r2,-20(fp)
    ebf4:	10800817 	ldw	r2,32(r2)
    ebf8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ebfc:	e0bffc17 	ldw	r2,-16(fp)
    ec00:	10800104 	addi	r2,r2,4
    ec04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ec08:	e0bffd17 	ldw	r2,-12(fp)
    ec0c:	1080800c 	andi	r2,r2,512
    ec10:	103fbe26 	beq	r2,zero,eb0c <__alt_data_end+0xff00eb0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ec14:	e0bffd17 	ldw	r2,-12(fp)
    ec18:	1004d43a 	srli	r2,r2,16
    ec1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ec20:	00001406 	br	ec74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ec24:	e0bffc17 	ldw	r2,-16(fp)
    ec28:	e0fffb17 	ldw	r3,-20(fp)
    ec2c:	18c00d17 	ldw	r3,52(r3)
    ec30:	e13ffb17 	ldw	r4,-20(fp)
    ec34:	20c7883a 	add	r3,r4,r3
    ec38:	18c20e04 	addi	r3,r3,2104
    ec3c:	18c00003 	ldbu	r3,0(r3)
    ec40:	18c03fcc 	andi	r3,r3,255
    ec44:	18c0201c 	xori	r3,r3,128
    ec48:	18ffe004 	addi	r3,r3,-128
    ec4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec50:	e0bffb17 	ldw	r2,-20(fp)
    ec54:	10800d17 	ldw	r2,52(r2)
    ec58:	10800044 	addi	r2,r2,1
    ec5c:	10c1ffcc 	andi	r3,r2,2047
    ec60:	e0bffb17 	ldw	r2,-20(fp)
    ec64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ec68:	e0bffa17 	ldw	r2,-24(fp)
    ec6c:	10bfffc4 	addi	r2,r2,-1
    ec70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ec74:	e0bffa17 	ldw	r2,-24(fp)
    ec78:	10000526 	beq	r2,zero,ec90 <altera_avalon_jtag_uart_irq+0x1a8>
    ec7c:	e0bffb17 	ldw	r2,-20(fp)
    ec80:	10c00d17 	ldw	r3,52(r2)
    ec84:	e0bffb17 	ldw	r2,-20(fp)
    ec88:	10800c17 	ldw	r2,48(r2)
    ec8c:	18bfe51e 	bne	r3,r2,ec24 <__alt_data_end+0xff00ec24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ec90:	e0bffa17 	ldw	r2,-24(fp)
    ec94:	103f9d26 	beq	r2,zero,eb0c <__alt_data_end+0xff00eb0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ec98:	e0bffb17 	ldw	r2,-20(fp)
    ec9c:	10c00817 	ldw	r3,32(r2)
    eca0:	00bfff44 	movi	r2,-3
    eca4:	1886703a 	and	r3,r3,r2
    eca8:	e0bffb17 	ldw	r2,-20(fp)
    ecac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ecb0:	e0bffb17 	ldw	r2,-20(fp)
    ecb4:	10800017 	ldw	r2,0(r2)
    ecb8:	10800104 	addi	r2,r2,4
    ecbc:	1007883a 	mov	r3,r2
    ecc0:	e0bffb17 	ldw	r2,-20(fp)
    ecc4:	10800817 	ldw	r2,32(r2)
    ecc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eccc:	e0bffc17 	ldw	r2,-16(fp)
    ecd0:	10800104 	addi	r2,r2,4
    ecd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ecd8:	003f8c06 	br	eb0c <__alt_data_end+0xff00eb0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    ecdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ece0:	0001883a 	nop
    ece4:	e037883a 	mov	sp,fp
    ece8:	df000017 	ldw	fp,0(sp)
    ecec:	dec00104 	addi	sp,sp,4
    ecf0:	f800283a 	ret

0000ecf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ecf4:	defff804 	addi	sp,sp,-32
    ecf8:	df000715 	stw	fp,28(sp)
    ecfc:	df000704 	addi	fp,sp,28
    ed00:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ed04:	e0bffb17 	ldw	r2,-20(fp)
    ed08:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ed0c:	e0bff917 	ldw	r2,-28(fp)
    ed10:	10800017 	ldw	r2,0(r2)
    ed14:	10800104 	addi	r2,r2,4
    ed18:	10800037 	ldwio	r2,0(r2)
    ed1c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ed20:	e0bffa17 	ldw	r2,-24(fp)
    ed24:	1081000c 	andi	r2,r2,1024
    ed28:	10000b26 	beq	r2,zero,ed58 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ed2c:	e0bff917 	ldw	r2,-28(fp)
    ed30:	10800017 	ldw	r2,0(r2)
    ed34:	10800104 	addi	r2,r2,4
    ed38:	1007883a 	mov	r3,r2
    ed3c:	e0bff917 	ldw	r2,-28(fp)
    ed40:	10800817 	ldw	r2,32(r2)
    ed44:	10810014 	ori	r2,r2,1024
    ed48:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    ed4c:	e0bff917 	ldw	r2,-28(fp)
    ed50:	10000915 	stw	zero,36(r2)
    ed54:	00000a06 	br	ed80 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ed58:	e0bff917 	ldw	r2,-28(fp)
    ed5c:	10c00917 	ldw	r3,36(r2)
    ed60:	00a00034 	movhi	r2,32768
    ed64:	10bfff04 	addi	r2,r2,-4
    ed68:	10c00536 	bltu	r2,r3,ed80 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    ed6c:	e0bff917 	ldw	r2,-28(fp)
    ed70:	10800917 	ldw	r2,36(r2)
    ed74:	10c00044 	addi	r3,r2,1
    ed78:	e0bff917 	ldw	r2,-28(fp)
    ed7c:	10c00915 	stw	r3,36(r2)
    ed80:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ed84:	e037883a 	mov	sp,fp
    ed88:	df000017 	ldw	fp,0(sp)
    ed8c:	dec00104 	addi	sp,sp,4
    ed90:	f800283a 	ret

0000ed94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ed94:	defffd04 	addi	sp,sp,-12
    ed98:	df000215 	stw	fp,8(sp)
    ed9c:	df000204 	addi	fp,sp,8
    eda0:	e13ffe15 	stw	r4,-8(fp)
    eda4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eda8:	00000506 	br	edc0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    edac:	e0bfff17 	ldw	r2,-4(fp)
    edb0:	1090000c 	andi	r2,r2,16384
    edb4:	10000226 	beq	r2,zero,edc0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    edb8:	00bffd44 	movi	r2,-11
    edbc:	00000b06 	br	edec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    edc0:	e0bffe17 	ldw	r2,-8(fp)
    edc4:	10c00d17 	ldw	r3,52(r2)
    edc8:	e0bffe17 	ldw	r2,-8(fp)
    edcc:	10800c17 	ldw	r2,48(r2)
    edd0:	18800526 	beq	r3,r2,ede8 <altera_avalon_jtag_uart_close+0x54>
    edd4:	e0bffe17 	ldw	r2,-8(fp)
    edd8:	10c00917 	ldw	r3,36(r2)
    eddc:	e0bffe17 	ldw	r2,-8(fp)
    ede0:	10800117 	ldw	r2,4(r2)
    ede4:	18bff136 	bltu	r3,r2,edac <__alt_data_end+0xff00edac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ede8:	0005883a 	mov	r2,zero
}
    edec:	e037883a 	mov	sp,fp
    edf0:	df000017 	ldw	fp,0(sp)
    edf4:	dec00104 	addi	sp,sp,4
    edf8:	f800283a 	ret

0000edfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    edfc:	defffa04 	addi	sp,sp,-24
    ee00:	df000515 	stw	fp,20(sp)
    ee04:	df000504 	addi	fp,sp,20
    ee08:	e13ffd15 	stw	r4,-12(fp)
    ee0c:	e17ffe15 	stw	r5,-8(fp)
    ee10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ee14:	00bff9c4 	movi	r2,-25
    ee18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ee1c:	e0bffe17 	ldw	r2,-8(fp)
    ee20:	10da8060 	cmpeqi	r3,r2,27137
    ee24:	1800031e 	bne	r3,zero,ee34 <altera_avalon_jtag_uart_ioctl+0x38>
    ee28:	109a80a0 	cmpeqi	r2,r2,27138
    ee2c:	1000181e 	bne	r2,zero,ee90 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ee30:	00002906 	br	eed8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ee34:	e0bffd17 	ldw	r2,-12(fp)
    ee38:	10c00117 	ldw	r3,4(r2)
    ee3c:	00a00034 	movhi	r2,32768
    ee40:	10bfffc4 	addi	r2,r2,-1
    ee44:	18802126 	beq	r3,r2,eecc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ee48:	e0bfff17 	ldw	r2,-4(fp)
    ee4c:	10800017 	ldw	r2,0(r2)
    ee50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ee54:	e0bffc17 	ldw	r2,-16(fp)
    ee58:	10800090 	cmplti	r2,r2,2
    ee5c:	1000061e 	bne	r2,zero,ee78 <altera_avalon_jtag_uart_ioctl+0x7c>
    ee60:	e0fffc17 	ldw	r3,-16(fp)
    ee64:	00a00034 	movhi	r2,32768
    ee68:	10bfffc4 	addi	r2,r2,-1
    ee6c:	18800226 	beq	r3,r2,ee78 <altera_avalon_jtag_uart_ioctl+0x7c>
    ee70:	e0bffc17 	ldw	r2,-16(fp)
    ee74:	00000206 	br	ee80 <altera_avalon_jtag_uart_ioctl+0x84>
    ee78:	00a00034 	movhi	r2,32768
    ee7c:	10bfff84 	addi	r2,r2,-2
    ee80:	e0fffd17 	ldw	r3,-12(fp)
    ee84:	18800115 	stw	r2,4(r3)
      rc = 0;
    ee88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ee8c:	00000f06 	br	eecc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ee90:	e0bffd17 	ldw	r2,-12(fp)
    ee94:	10c00117 	ldw	r3,4(r2)
    ee98:	00a00034 	movhi	r2,32768
    ee9c:	10bfffc4 	addi	r2,r2,-1
    eea0:	18800c26 	beq	r3,r2,eed4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eea4:	e0bffd17 	ldw	r2,-12(fp)
    eea8:	10c00917 	ldw	r3,36(r2)
    eeac:	e0bffd17 	ldw	r2,-12(fp)
    eeb0:	10800117 	ldw	r2,4(r2)
    eeb4:	1885803a 	cmpltu	r2,r3,r2
    eeb8:	10c03fcc 	andi	r3,r2,255
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    eec4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    eec8:	00000206 	br	eed4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    eecc:	0001883a 	nop
    eed0:	00000106 	br	eed8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    eed4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    eed8:	e0bffb17 	ldw	r2,-20(fp)
}
    eedc:	e037883a 	mov	sp,fp
    eee0:	df000017 	ldw	fp,0(sp)
    eee4:	dec00104 	addi	sp,sp,4
    eee8:	f800283a 	ret

0000eeec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    eeec:	defff304 	addi	sp,sp,-52
    eef0:	dfc00c15 	stw	ra,48(sp)
    eef4:	df000b15 	stw	fp,44(sp)
    eef8:	df000b04 	addi	fp,sp,44
    eefc:	e13ffc15 	stw	r4,-16(fp)
    ef00:	e17ffd15 	stw	r5,-12(fp)
    ef04:	e1bffe15 	stw	r6,-8(fp)
    ef08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ef0c:	e0bffd17 	ldw	r2,-12(fp)
    ef10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ef14:	00004706 	br	f034 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ef18:	e0bffc17 	ldw	r2,-16(fp)
    ef1c:	10800a17 	ldw	r2,40(r2)
    ef20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ef24:	e0bffc17 	ldw	r2,-16(fp)
    ef28:	10800b17 	ldw	r2,44(r2)
    ef2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ef30:	e0fff717 	ldw	r3,-36(fp)
    ef34:	e0bff817 	ldw	r2,-32(fp)
    ef38:	18800536 	bltu	r3,r2,ef50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ef3c:	e0fff717 	ldw	r3,-36(fp)
    ef40:	e0bff817 	ldw	r2,-32(fp)
    ef44:	1885c83a 	sub	r2,r3,r2
    ef48:	e0bff615 	stw	r2,-40(fp)
    ef4c:	00000406 	br	ef60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ef50:	00c20004 	movi	r3,2048
    ef54:	e0bff817 	ldw	r2,-32(fp)
    ef58:	1885c83a 	sub	r2,r3,r2
    ef5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ef60:	e0bff617 	ldw	r2,-40(fp)
    ef64:	10001e26 	beq	r2,zero,efe0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ef68:	e0fffe17 	ldw	r3,-8(fp)
    ef6c:	e0bff617 	ldw	r2,-40(fp)
    ef70:	1880022e 	bgeu	r3,r2,ef7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ef74:	e0bffe17 	ldw	r2,-8(fp)
    ef78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ef7c:	e0bffc17 	ldw	r2,-16(fp)
    ef80:	10c00e04 	addi	r3,r2,56
    ef84:	e0bff817 	ldw	r2,-32(fp)
    ef88:	1885883a 	add	r2,r3,r2
    ef8c:	e1bff617 	ldw	r6,-40(fp)
    ef90:	100b883a 	mov	r5,r2
    ef94:	e13ff517 	ldw	r4,-44(fp)
    ef98:	0007b980 	call	7b98 <memcpy>
      ptr   += n;
    ef9c:	e0fff517 	ldw	r3,-44(fp)
    efa0:	e0bff617 	ldw	r2,-40(fp)
    efa4:	1885883a 	add	r2,r3,r2
    efa8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    efac:	e0fffe17 	ldw	r3,-8(fp)
    efb0:	e0bff617 	ldw	r2,-40(fp)
    efb4:	1885c83a 	sub	r2,r3,r2
    efb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    efbc:	e0fff817 	ldw	r3,-32(fp)
    efc0:	e0bff617 	ldw	r2,-40(fp)
    efc4:	1885883a 	add	r2,r3,r2
    efc8:	10c1ffcc 	andi	r3,r2,2047
    efcc:	e0bffc17 	ldw	r2,-16(fp)
    efd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    efd4:	e0bffe17 	ldw	r2,-8(fp)
    efd8:	00bfcf16 	blt	zero,r2,ef18 <__alt_data_end+0xff00ef18>
    efdc:	00000106 	br	efe4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    efe0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    efe4:	e0fff517 	ldw	r3,-44(fp)
    efe8:	e0bffd17 	ldw	r2,-12(fp)
    efec:	1880141e 	bne	r3,r2,f040 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    eff0:	e0bfff17 	ldw	r2,-4(fp)
    eff4:	1090000c 	andi	r2,r2,16384
    eff8:	1000131e 	bne	r2,zero,f048 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    effc:	0001883a 	nop
    f000:	e0bffc17 	ldw	r2,-16(fp)
    f004:	10c00a17 	ldw	r3,40(r2)
    f008:	e0bff717 	ldw	r2,-36(fp)
    f00c:	1880051e 	bne	r3,r2,f024 <altera_avalon_jtag_uart_read+0x138>
    f010:	e0bffc17 	ldw	r2,-16(fp)
    f014:	10c00917 	ldw	r3,36(r2)
    f018:	e0bffc17 	ldw	r2,-16(fp)
    f01c:	10800117 	ldw	r2,4(r2)
    f020:	18bff736 	bltu	r3,r2,f000 <__alt_data_end+0xff00f000>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f024:	e0bffc17 	ldw	r2,-16(fp)
    f028:	10c00a17 	ldw	r3,40(r2)
    f02c:	e0bff717 	ldw	r2,-36(fp)
    f030:	18800726 	beq	r3,r2,f050 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f034:	e0bffe17 	ldw	r2,-8(fp)
    f038:	00bfb716 	blt	zero,r2,ef18 <__alt_data_end+0xff00ef18>
    f03c:	00000506 	br	f054 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f040:	0001883a 	nop
    f044:	00000306 	br	f054 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f048:	0001883a 	nop
    f04c:	00000106 	br	f054 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f050:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f054:	e0fff517 	ldw	r3,-44(fp)
    f058:	e0bffd17 	ldw	r2,-12(fp)
    f05c:	18801826 	beq	r3,r2,f0c0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f060:	0005303a 	rdctl	r2,status
    f064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f068:	e0fffb17 	ldw	r3,-20(fp)
    f06c:	00bfff84 	movi	r2,-2
    f070:	1884703a 	and	r2,r3,r2
    f074:	1001703a 	wrctl	status,r2
  
  return context;
    f078:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f07c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f080:	e0bffc17 	ldw	r2,-16(fp)
    f084:	10800817 	ldw	r2,32(r2)
    f088:	10c00054 	ori	r3,r2,1
    f08c:	e0bffc17 	ldw	r2,-16(fp)
    f090:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f094:	e0bffc17 	ldw	r2,-16(fp)
    f098:	10800017 	ldw	r2,0(r2)
    f09c:	10800104 	addi	r2,r2,4
    f0a0:	1007883a 	mov	r3,r2
    f0a4:	e0bffc17 	ldw	r2,-16(fp)
    f0a8:	10800817 	ldw	r2,32(r2)
    f0ac:	18800035 	stwio	r2,0(r3)
    f0b0:	e0bffa17 	ldw	r2,-24(fp)
    f0b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0b8:	e0bff917 	ldw	r2,-28(fp)
    f0bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f0c0:	e0fff517 	ldw	r3,-44(fp)
    f0c4:	e0bffd17 	ldw	r2,-12(fp)
    f0c8:	18800426 	beq	r3,r2,f0dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f0cc:	e0fff517 	ldw	r3,-44(fp)
    f0d0:	e0bffd17 	ldw	r2,-12(fp)
    f0d4:	1885c83a 	sub	r2,r3,r2
    f0d8:	00000606 	br	f0f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f0dc:	e0bfff17 	ldw	r2,-4(fp)
    f0e0:	1090000c 	andi	r2,r2,16384
    f0e4:	10000226 	beq	r2,zero,f0f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f0e8:	00bffd44 	movi	r2,-11
    f0ec:	00000106 	br	f0f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f0f0:	00bffec4 	movi	r2,-5
}
    f0f4:	e037883a 	mov	sp,fp
    f0f8:	dfc00117 	ldw	ra,4(sp)
    f0fc:	df000017 	ldw	fp,0(sp)
    f100:	dec00204 	addi	sp,sp,8
    f104:	f800283a 	ret

0000f108 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f108:	defff304 	addi	sp,sp,-52
    f10c:	dfc00c15 	stw	ra,48(sp)
    f110:	df000b15 	stw	fp,44(sp)
    f114:	df000b04 	addi	fp,sp,44
    f118:	e13ffc15 	stw	r4,-16(fp)
    f11c:	e17ffd15 	stw	r5,-12(fp)
    f120:	e1bffe15 	stw	r6,-8(fp)
    f124:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f128:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f12c:	e0bffd17 	ldw	r2,-12(fp)
    f130:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f134:	00003706 	br	f214 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f138:	e0bffc17 	ldw	r2,-16(fp)
    f13c:	10800c17 	ldw	r2,48(r2)
    f140:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f144:	e0bffc17 	ldw	r2,-16(fp)
    f148:	10800d17 	ldw	r2,52(r2)
    f14c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f150:	e0fff917 	ldw	r3,-28(fp)
    f154:	e0bff517 	ldw	r2,-44(fp)
    f158:	1880062e 	bgeu	r3,r2,f174 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f15c:	e0fff517 	ldw	r3,-44(fp)
    f160:	e0bff917 	ldw	r2,-28(fp)
    f164:	1885c83a 	sub	r2,r3,r2
    f168:	10bfffc4 	addi	r2,r2,-1
    f16c:	e0bff615 	stw	r2,-40(fp)
    f170:	00000b06 	br	f1a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f174:	e0bff517 	ldw	r2,-44(fp)
    f178:	10000526 	beq	r2,zero,f190 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f17c:	00c20004 	movi	r3,2048
    f180:	e0bff917 	ldw	r2,-28(fp)
    f184:	1885c83a 	sub	r2,r3,r2
    f188:	e0bff615 	stw	r2,-40(fp)
    f18c:	00000406 	br	f1a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f190:	00c1ffc4 	movi	r3,2047
    f194:	e0bff917 	ldw	r2,-28(fp)
    f198:	1885c83a 	sub	r2,r3,r2
    f19c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f1a0:	e0bff617 	ldw	r2,-40(fp)
    f1a4:	10001e26 	beq	r2,zero,f220 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f1a8:	e0fffe17 	ldw	r3,-8(fp)
    f1ac:	e0bff617 	ldw	r2,-40(fp)
    f1b0:	1880022e 	bgeu	r3,r2,f1bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f1b4:	e0bffe17 	ldw	r2,-8(fp)
    f1b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f1bc:	e0bffc17 	ldw	r2,-16(fp)
    f1c0:	10c20e04 	addi	r3,r2,2104
    f1c4:	e0bff917 	ldw	r2,-28(fp)
    f1c8:	1885883a 	add	r2,r3,r2
    f1cc:	e1bff617 	ldw	r6,-40(fp)
    f1d0:	e17ffd17 	ldw	r5,-12(fp)
    f1d4:	1009883a 	mov	r4,r2
    f1d8:	0007b980 	call	7b98 <memcpy>
      ptr   += n;
    f1dc:	e0fffd17 	ldw	r3,-12(fp)
    f1e0:	e0bff617 	ldw	r2,-40(fp)
    f1e4:	1885883a 	add	r2,r3,r2
    f1e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f1ec:	e0fffe17 	ldw	r3,-8(fp)
    f1f0:	e0bff617 	ldw	r2,-40(fp)
    f1f4:	1885c83a 	sub	r2,r3,r2
    f1f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1fc:	e0fff917 	ldw	r3,-28(fp)
    f200:	e0bff617 	ldw	r2,-40(fp)
    f204:	1885883a 	add	r2,r3,r2
    f208:	10c1ffcc 	andi	r3,r2,2047
    f20c:	e0bffc17 	ldw	r2,-16(fp)
    f210:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f214:	e0bffe17 	ldw	r2,-8(fp)
    f218:	00bfc716 	blt	zero,r2,f138 <__alt_data_end+0xff00f138>
    f21c:	00000106 	br	f224 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f220:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f224:	0005303a 	rdctl	r2,status
    f228:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f22c:	e0fffb17 	ldw	r3,-20(fp)
    f230:	00bfff84 	movi	r2,-2
    f234:	1884703a 	and	r2,r3,r2
    f238:	1001703a 	wrctl	status,r2
  
  return context;
    f23c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f240:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f244:	e0bffc17 	ldw	r2,-16(fp)
    f248:	10800817 	ldw	r2,32(r2)
    f24c:	10c00094 	ori	r3,r2,2
    f250:	e0bffc17 	ldw	r2,-16(fp)
    f254:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f258:	e0bffc17 	ldw	r2,-16(fp)
    f25c:	10800017 	ldw	r2,0(r2)
    f260:	10800104 	addi	r2,r2,4
    f264:	1007883a 	mov	r3,r2
    f268:	e0bffc17 	ldw	r2,-16(fp)
    f26c:	10800817 	ldw	r2,32(r2)
    f270:	18800035 	stwio	r2,0(r3)
    f274:	e0bffa17 	ldw	r2,-24(fp)
    f278:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f27c:	e0bff817 	ldw	r2,-32(fp)
    f280:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f284:	e0bffe17 	ldw	r2,-8(fp)
    f288:	0080100e 	bge	zero,r2,f2cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f28c:	e0bfff17 	ldw	r2,-4(fp)
    f290:	1090000c 	andi	r2,r2,16384
    f294:	1000101e 	bne	r2,zero,f2d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f298:	0001883a 	nop
    f29c:	e0bffc17 	ldw	r2,-16(fp)
    f2a0:	10c00d17 	ldw	r3,52(r2)
    f2a4:	e0bff517 	ldw	r2,-44(fp)
    f2a8:	1880051e 	bne	r3,r2,f2c0 <altera_avalon_jtag_uart_write+0x1b8>
    f2ac:	e0bffc17 	ldw	r2,-16(fp)
    f2b0:	10c00917 	ldw	r3,36(r2)
    f2b4:	e0bffc17 	ldw	r2,-16(fp)
    f2b8:	10800117 	ldw	r2,4(r2)
    f2bc:	18bff736 	bltu	r3,r2,f29c <__alt_data_end+0xff00f29c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f2c0:	e0bffc17 	ldw	r2,-16(fp)
    f2c4:	10800917 	ldw	r2,36(r2)
    f2c8:	1000051e 	bne	r2,zero,f2e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f2cc:	e0bffe17 	ldw	r2,-8(fp)
    f2d0:	00bfd016 	blt	zero,r2,f214 <__alt_data_end+0xff00f214>
    f2d4:	00000306 	br	f2e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f2d8:	0001883a 	nop
    f2dc:	00000106 	br	f2e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f2e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f2e4:	e0fffd17 	ldw	r3,-12(fp)
    f2e8:	e0bff717 	ldw	r2,-36(fp)
    f2ec:	18800426 	beq	r3,r2,f300 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f2f0:	e0fffd17 	ldw	r3,-12(fp)
    f2f4:	e0bff717 	ldw	r2,-36(fp)
    f2f8:	1885c83a 	sub	r2,r3,r2
    f2fc:	00000606 	br	f318 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f300:	e0bfff17 	ldw	r2,-4(fp)
    f304:	1090000c 	andi	r2,r2,16384
    f308:	10000226 	beq	r2,zero,f314 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f30c:	00bffd44 	movi	r2,-11
    f310:	00000106 	br	f318 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f314:	00bffec4 	movi	r2,-5
}
    f318:	e037883a 	mov	sp,fp
    f31c:	dfc00117 	ldw	ra,4(sp)
    f320:	df000017 	ldw	fp,0(sp)
    f324:	dec00204 	addi	sp,sp,8
    f328:	f800283a 	ret

0000f32c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f32c:	defffa04 	addi	sp,sp,-24
    f330:	dfc00515 	stw	ra,20(sp)
    f334:	df000415 	stw	fp,16(sp)
    f338:	df000404 	addi	fp,sp,16
    f33c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f340:	0007883a 	mov	r3,zero
    f344:	e0bfff17 	ldw	r2,-4(fp)
    f348:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f34c:	e0bfff17 	ldw	r2,-4(fp)
    f350:	10800104 	addi	r2,r2,4
    f354:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f358:	0005303a 	rdctl	r2,status
    f35c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f360:	e0fffd17 	ldw	r3,-12(fp)
    f364:	00bfff84 	movi	r2,-2
    f368:	1884703a 	and	r2,r3,r2
    f36c:	1001703a 	wrctl	status,r2
  
  return context;
    f370:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f374:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    f378:	00101200 	call	10120 <alt_tick>
    f37c:	e0bffc17 	ldw	r2,-16(fp)
    f380:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f384:	e0bffe17 	ldw	r2,-8(fp)
    f388:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f38c:	0001883a 	nop
    f390:	e037883a 	mov	sp,fp
    f394:	dfc00117 	ldw	ra,4(sp)
    f398:	df000017 	ldw	fp,0(sp)
    f39c:	dec00204 	addi	sp,sp,8
    f3a0:	f800283a 	ret

0000f3a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f3a4:	defff804 	addi	sp,sp,-32
    f3a8:	dfc00715 	stw	ra,28(sp)
    f3ac:	df000615 	stw	fp,24(sp)
    f3b0:	df000604 	addi	fp,sp,24
    f3b4:	e13ffc15 	stw	r4,-16(fp)
    f3b8:	e17ffd15 	stw	r5,-12(fp)
    f3bc:	e1bffe15 	stw	r6,-8(fp)
    f3c0:	e1ffff15 	stw	r7,-4(fp)
    f3c4:	e0bfff17 	ldw	r2,-4(fp)
    f3c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f3cc:	d0a72a17 	ldw	r2,-25432(gp)
    f3d0:	1000021e 	bne	r2,zero,f3dc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    f3d4:	e0bffb17 	ldw	r2,-20(fp)
    f3d8:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f3dc:	e0bffc17 	ldw	r2,-16(fp)
    f3e0:	10800104 	addi	r2,r2,4
    f3e4:	00c001c4 	movi	r3,7
    f3e8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f3ec:	d8000015 	stw	zero,0(sp)
    f3f0:	e1fffc17 	ldw	r7,-16(fp)
    f3f4:	01800074 	movhi	r6,1
    f3f8:	31bccb04 	addi	r6,r6,-3284
    f3fc:	e17ffe17 	ldw	r5,-8(fp)
    f400:	e13ffd17 	ldw	r4,-12(fp)
    f404:	000fa500 	call	fa50 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f408:	0001883a 	nop
    f40c:	e037883a 	mov	sp,fp
    f410:	dfc00117 	ldw	ra,4(sp)
    f414:	df000017 	ldw	fp,0(sp)
    f418:	dec00204 	addi	sp,sp,8
    f41c:	f800283a 	ret

0000f420 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    f420:	defffe04 	addi	sp,sp,-8
    f424:	df000115 	stw	fp,4(sp)
    f428:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    f42c:	d0a72717 	ldw	r2,-25444(gp)
    f430:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    f434:	d0a72817 	ldw	r2,-25440(gp)
    f438:	1000021e 	bne	r2,zero,f444 <alt_timestamp_start+0x24>
  {
    return -1;
    f43c:	00bfffc4 	movi	r2,-1
    f440:	00001106 	br	f488 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f444:	e0bfff17 	ldw	r2,-4(fp)
    f448:	10800104 	addi	r2,r2,4
    f44c:	00c00204 	movi	r3,8
    f450:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f454:	e0bfff17 	ldw	r2,-4(fp)
    f458:	10800204 	addi	r2,r2,8
    f45c:	00ffffd4 	movui	r3,65535
    f460:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f464:	e0bfff17 	ldw	r2,-4(fp)
    f468:	10800304 	addi	r2,r2,12
    f46c:	00ffffd4 	movui	r3,65535
    f470:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f474:	e0bfff17 	ldw	r2,-4(fp)
    f478:	10800104 	addi	r2,r2,4
    f47c:	00c00104 	movi	r3,4
    f480:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    f484:	0005883a 	mov	r2,zero
}
    f488:	e037883a 	mov	sp,fp
    f48c:	df000017 	ldw	fp,0(sp)
    f490:	dec00104 	addi	sp,sp,4
    f494:	f800283a 	ret

0000f498 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    f498:	defffc04 	addi	sp,sp,-16
    f49c:	df000315 	stw	fp,12(sp)
    f4a0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    f4a4:	d0a72717 	ldw	r2,-25444(gp)
    f4a8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    f4ac:	d0a72817 	ldw	r2,-25440(gp)
    f4b0:	1000021e 	bne	r2,zero,f4bc <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f4b4:	00bfffc4 	movi	r2,-1
    f4b8:	00001306 	br	f508 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f4bc:	e0bffd17 	ldw	r2,-12(fp)
    f4c0:	10800404 	addi	r2,r2,16
    f4c4:	0007883a 	mov	r3,zero
    f4c8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f4cc:	e0bffd17 	ldw	r2,-12(fp)
    f4d0:	10800404 	addi	r2,r2,16
    f4d4:	10800037 	ldwio	r2,0(r2)
    f4d8:	10bfffcc 	andi	r2,r2,65535
    f4dc:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f4e0:	e0bffd17 	ldw	r2,-12(fp)
    f4e4:	10800504 	addi	r2,r2,20
    f4e8:	10800037 	ldwio	r2,0(r2)
    f4ec:	10bfffcc 	andi	r2,r2,65535
    f4f0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f4f4:	e0bfff17 	ldw	r2,-4(fp)
    f4f8:	1006943a 	slli	r3,r2,16
    f4fc:	e0bffe17 	ldw	r2,-8(fp)
    f500:	1884b03a 	or	r2,r3,r2
    f504:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    f508:	e037883a 	mov	sp,fp
    f50c:	df000017 	ldw	fp,0(sp)
    f510:	dec00104 	addi	sp,sp,4
    f514:	f800283a 	ret

0000f518 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    f518:	deffff04 	addi	sp,sp,-4
    f51c:	df000015 	stw	fp,0(sp)
    f520:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    f524:	d0a72817 	ldw	r2,-25440(gp)
}
    f528:	e037883a 	mov	sp,fp
    f52c:	df000017 	ldw	fp,0(sp)
    f530:	dec00104 	addi	sp,sp,4
    f534:	f800283a 	ret

0000f538 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f538:	defff504 	addi	sp,sp,-44
    f53c:	df000a15 	stw	fp,40(sp)
    f540:	df000a04 	addi	fp,sp,40
    f544:	e13ffc15 	stw	r4,-16(fp)
    f548:	e17ffd15 	stw	r5,-12(fp)
    f54c:	e1bffe15 	stw	r6,-8(fp)
    f550:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f554:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f558:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
    f55c:	10003c26 	beq	r2,zero,f650 <alt_alarm_start+0x118>
  {
    if (alarm)
    f560:	e0bffc17 	ldw	r2,-16(fp)
    f564:	10003826 	beq	r2,zero,f648 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    f568:	e0bffc17 	ldw	r2,-16(fp)
    f56c:	e0fffe17 	ldw	r3,-8(fp)
    f570:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f574:	e0bffc17 	ldw	r2,-16(fp)
    f578:	e0ffff17 	ldw	r3,-4(fp)
    f57c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f580:	0005303a 	rdctl	r2,status
    f584:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f588:	e0fff917 	ldw	r3,-28(fp)
    f58c:	00bfff84 	movi	r2,-2
    f590:	1884703a 	and	r2,r3,r2
    f594:	1001703a 	wrctl	status,r2
  
  return context;
    f598:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f59c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f5a0:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
    f5a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f5a8:	e0fffd17 	ldw	r3,-12(fp)
    f5ac:	e0bff617 	ldw	r2,-40(fp)
    f5b0:	1885883a 	add	r2,r3,r2
    f5b4:	10c00044 	addi	r3,r2,1
    f5b8:	e0bffc17 	ldw	r2,-16(fp)
    f5bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f5c0:	e0bffc17 	ldw	r2,-16(fp)
    f5c4:	10c00217 	ldw	r3,8(r2)
    f5c8:	e0bff617 	ldw	r2,-40(fp)
    f5cc:	1880042e 	bgeu	r3,r2,f5e0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    f5d0:	e0bffc17 	ldw	r2,-16(fp)
    f5d4:	00c00044 	movi	r3,1
    f5d8:	10c00405 	stb	r3,16(r2)
    f5dc:	00000206 	br	f5e8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    f5e0:	e0bffc17 	ldw	r2,-16(fp)
    f5e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f5e8:	e0bffc17 	ldw	r2,-16(fp)
    f5ec:	d0e00e04 	addi	r3,gp,-32712
    f5f0:	e0fffa15 	stw	r3,-24(fp)
    f5f4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f5f8:	e0bffb17 	ldw	r2,-20(fp)
    f5fc:	e0fffa17 	ldw	r3,-24(fp)
    f600:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f604:	e0bffa17 	ldw	r2,-24(fp)
    f608:	10c00017 	ldw	r3,0(r2)
    f60c:	e0bffb17 	ldw	r2,-20(fp)
    f610:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f614:	e0bffa17 	ldw	r2,-24(fp)
    f618:	10800017 	ldw	r2,0(r2)
    f61c:	e0fffb17 	ldw	r3,-20(fp)
    f620:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f624:	e0bffa17 	ldw	r2,-24(fp)
    f628:	e0fffb17 	ldw	r3,-20(fp)
    f62c:	10c00015 	stw	r3,0(r2)
    f630:	e0bff817 	ldw	r2,-32(fp)
    f634:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f638:	e0bff717 	ldw	r2,-36(fp)
    f63c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f640:	0005883a 	mov	r2,zero
    f644:	00000306 	br	f654 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    f648:	00bffa84 	movi	r2,-22
    f64c:	00000106 	br	f654 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    f650:	00bfde84 	movi	r2,-134
  }
}
    f654:	e037883a 	mov	sp,fp
    f658:	df000017 	ldw	fp,0(sp)
    f65c:	dec00104 	addi	sp,sp,4
    f660:	f800283a 	ret

0000f664 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f664:	defffa04 	addi	sp,sp,-24
    f668:	dfc00515 	stw	ra,20(sp)
    f66c:	df000415 	stw	fp,16(sp)
    f670:	df000404 	addi	fp,sp,16
    f674:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    f678:	008000c4 	movi	r2,3
    f67c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    f680:	e0fffd17 	ldw	r3,-12(fp)
    f684:	008003f4 	movhi	r2,15
    f688:	10909004 	addi	r2,r2,16960
    f68c:	1885383a 	mul	r2,r3,r2
    f690:	100b883a 	mov	r5,r2
    f694:	0100bef4 	movhi	r4,763
    f698:	213c2004 	addi	r4,r4,-3968
    f69c:	00015a00 	call	15a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f6a0:	100b883a 	mov	r5,r2
    f6a4:	01200034 	movhi	r4,32768
    f6a8:	213fffc4 	addi	r4,r4,-1
    f6ac:	00015a00 	call	15a0 <__udivsi3>
    f6b0:	100b883a 	mov	r5,r2
    f6b4:	e13fff17 	ldw	r4,-4(fp)
    f6b8:	00015a00 	call	15a0 <__udivsi3>
    f6bc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f6c0:	e0bffe17 	ldw	r2,-8(fp)
    f6c4:	10002a26 	beq	r2,zero,f770 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    f6c8:	e03ffc15 	stw	zero,-16(fp)
    f6cc:	00001706 	br	f72c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f6d0:	00a00034 	movhi	r2,32768
    f6d4:	10bfffc4 	addi	r2,r2,-1
    f6d8:	10bfffc4 	addi	r2,r2,-1
    f6dc:	103ffe1e 	bne	r2,zero,f6d8 <__alt_data_end+0xff00f6d8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    f6e0:	e0fffd17 	ldw	r3,-12(fp)
    f6e4:	008003f4 	movhi	r2,15
    f6e8:	10909004 	addi	r2,r2,16960
    f6ec:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f6f0:	100b883a 	mov	r5,r2
    f6f4:	0100bef4 	movhi	r4,763
    f6f8:	213c2004 	addi	r4,r4,-3968
    f6fc:	00015a00 	call	15a0 <__udivsi3>
    f700:	100b883a 	mov	r5,r2
    f704:	01200034 	movhi	r4,32768
    f708:	213fffc4 	addi	r4,r4,-1
    f70c:	00015a00 	call	15a0 <__udivsi3>
    f710:	1007883a 	mov	r3,r2
    f714:	e0bfff17 	ldw	r2,-4(fp)
    f718:	10c5c83a 	sub	r2,r2,r3
    f71c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f720:	e0bffc17 	ldw	r2,-16(fp)
    f724:	10800044 	addi	r2,r2,1
    f728:	e0bffc15 	stw	r2,-16(fp)
    f72c:	e0fffc17 	ldw	r3,-16(fp)
    f730:	e0bffe17 	ldw	r2,-8(fp)
    f734:	18bfe616 	blt	r3,r2,f6d0 <__alt_data_end+0xff00f6d0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f738:	e0fffd17 	ldw	r3,-12(fp)
    f73c:	008003f4 	movhi	r2,15
    f740:	10909004 	addi	r2,r2,16960
    f744:	1885383a 	mul	r2,r3,r2
    f748:	100b883a 	mov	r5,r2
    f74c:	0100bef4 	movhi	r4,763
    f750:	213c2004 	addi	r4,r4,-3968
    f754:	00015a00 	call	15a0 <__udivsi3>
    f758:	1007883a 	mov	r3,r2
    f75c:	e0bfff17 	ldw	r2,-4(fp)
    f760:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f764:	10bfffc4 	addi	r2,r2,-1
    f768:	103ffe1e 	bne	r2,zero,f764 <__alt_data_end+0xff00f764>
    f76c:	00000d06 	br	f7a4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f770:	e0fffd17 	ldw	r3,-12(fp)
    f774:	008003f4 	movhi	r2,15
    f778:	10909004 	addi	r2,r2,16960
    f77c:	1885383a 	mul	r2,r3,r2
    f780:	100b883a 	mov	r5,r2
    f784:	0100bef4 	movhi	r4,763
    f788:	213c2004 	addi	r4,r4,-3968
    f78c:	00015a00 	call	15a0 <__udivsi3>
    f790:	1007883a 	mov	r3,r2
    f794:	e0bfff17 	ldw	r2,-4(fp)
    f798:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f79c:	10bfffc4 	addi	r2,r2,-1
    f7a0:	00bffe16 	blt	zero,r2,f79c <__alt_data_end+0xff00f79c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f7a4:	0005883a 	mov	r2,zero
}
    f7a8:	e037883a 	mov	sp,fp
    f7ac:	dfc00117 	ldw	ra,4(sp)
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00204 	addi	sp,sp,8
    f7b8:	f800283a 	ret

0000f7bc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    f7bc:	defffb04 	addi	sp,sp,-20
    f7c0:	df000415 	stw	fp,16(sp)
    f7c4:	df000404 	addi	fp,sp,16
    f7c8:	e13ffe15 	stw	r4,-8(fp)
    f7cc:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f7d0:	e0fffe17 	ldw	r3,-8(fp)
    f7d4:	e0bfff17 	ldw	r2,-4(fp)
    f7d8:	1885883a 	add	r2,r3,r2
    f7dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f7e0:	e0bffe17 	ldw	r2,-8(fp)
    f7e4:	e0bffc15 	stw	r2,-16(fp)
    f7e8:	00000506 	br	f800 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
    f7ec:	e0bffc17 	ldw	r2,-16(fp)
    f7f0:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10800804 	addi	r2,r2,32
    f7fc:	e0bffc15 	stw	r2,-16(fp)
    f800:	e0fffc17 	ldw	r3,-16(fp)
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	18bff836 	bltu	r3,r2,f7ec <__alt_data_end+0xff00f7ec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f80c:	e0bffe17 	ldw	r2,-8(fp)
    f810:	108007cc 	andi	r2,r2,31
    f814:	10000226 	beq	r2,zero,f820 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
    f818:	e0bffc17 	ldw	r2,-16(fp)
    f81c:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f820:	0001883a 	nop
    f824:	e037883a 	mov	sp,fp
    f828:	df000017 	ldw	fp,0(sp)
    f82c:	dec00104 	addi	sp,sp,4
    f830:	f800283a 	ret

0000f834 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f834:	defffe04 	addi	sp,sp,-8
    f838:	df000115 	stw	fp,4(sp)
    f83c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f840:	e03fff15 	stw	zero,-4(fp)
    f844:	00000506 	br	f85c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f848:	e0bfff17 	ldw	r2,-4(fp)
    f84c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f850:	e0bfff17 	ldw	r2,-4(fp)
    f854:	10800804 	addi	r2,r2,32
    f858:	e0bfff15 	stw	r2,-4(fp)
    f85c:	e0bfff17 	ldw	r2,-4(fp)
    f860:	10a00030 	cmpltui	r2,r2,32768
    f864:	103ff81e 	bne	r2,zero,f848 <__alt_data_end+0xff00f848>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f868:	0001883a 	nop
    f86c:	e037883a 	mov	sp,fp
    f870:	df000017 	ldw	fp,0(sp)
    f874:	dec00104 	addi	sp,sp,4
    f878:	f800283a 	ret

0000f87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f87c:	defffe04 	addi	sp,sp,-8
    f880:	dfc00115 	stw	ra,4(sp)
    f884:	df000015 	stw	fp,0(sp)
    f888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f88c:	d0a00b17 	ldw	r2,-32724(gp)
    f890:	10000326 	beq	r2,zero,f8a0 <alt_get_errno+0x24>
    f894:	d0a00b17 	ldw	r2,-32724(gp)
    f898:	103ee83a 	callr	r2
    f89c:	00000106 	br	f8a4 <alt_get_errno+0x28>
    f8a0:	d0a72004 	addi	r2,gp,-25472
}
    f8a4:	e037883a 	mov	sp,fp
    f8a8:	dfc00117 	ldw	ra,4(sp)
    f8ac:	df000017 	ldw	fp,0(sp)
    f8b0:	dec00204 	addi	sp,sp,8
    f8b4:	f800283a 	ret

0000f8b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f8b8:	defffa04 	addi	sp,sp,-24
    f8bc:	dfc00515 	stw	ra,20(sp)
    f8c0:	df000415 	stw	fp,16(sp)
    f8c4:	df000404 	addi	fp,sp,16
    f8c8:	e13ffe15 	stw	r4,-8(fp)
    f8cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f8d0:	e0bffe17 	ldw	r2,-8(fp)
    f8d4:	10000326 	beq	r2,zero,f8e4 <alt_dev_llist_insert+0x2c>
    f8d8:	e0bffe17 	ldw	r2,-8(fp)
    f8dc:	10800217 	ldw	r2,8(r2)
    f8e0:	1000061e 	bne	r2,zero,f8fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f8e4:	000f87c0 	call	f87c <alt_get_errno>
    f8e8:	1007883a 	mov	r3,r2
    f8ec:	00800584 	movi	r2,22
    f8f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f8f4:	00bffa84 	movi	r2,-22
    f8f8:	00001306 	br	f948 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f8fc:	e0bffe17 	ldw	r2,-8(fp)
    f900:	e0ffff17 	ldw	r3,-4(fp)
    f904:	e0fffc15 	stw	r3,-16(fp)
    f908:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f90c:	e0bffd17 	ldw	r2,-12(fp)
    f910:	e0fffc17 	ldw	r3,-16(fp)
    f914:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f918:	e0bffc17 	ldw	r2,-16(fp)
    f91c:	10c00017 	ldw	r3,0(r2)
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f928:	e0bffc17 	ldw	r2,-16(fp)
    f92c:	10800017 	ldw	r2,0(r2)
    f930:	e0fffd17 	ldw	r3,-12(fp)
    f934:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f938:	e0bffc17 	ldw	r2,-16(fp)
    f93c:	e0fffd17 	ldw	r3,-12(fp)
    f940:	10c00015 	stw	r3,0(r2)

  return 0;  
    f944:	0005883a 	mov	r2,zero
}
    f948:	e037883a 	mov	sp,fp
    f94c:	dfc00117 	ldw	ra,4(sp)
    f950:	df000017 	ldw	fp,0(sp)
    f954:	dec00204 	addi	sp,sp,8
    f958:	f800283a 	ret

0000f95c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f95c:	defffd04 	addi	sp,sp,-12
    f960:	dfc00215 	stw	ra,8(sp)
    f964:	df000115 	stw	fp,4(sp)
    f968:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f96c:	00800074 	movhi	r2,1
    f970:	1082bd04 	addi	r2,r2,2804
    f974:	e0bfff15 	stw	r2,-4(fp)
    f978:	00000606 	br	f994 <_do_ctors+0x38>
        (*ctor) (); 
    f97c:	e0bfff17 	ldw	r2,-4(fp)
    f980:	10800017 	ldw	r2,0(r2)
    f984:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f988:	e0bfff17 	ldw	r2,-4(fp)
    f98c:	10bfff04 	addi	r2,r2,-4
    f990:	e0bfff15 	stw	r2,-4(fp)
    f994:	e0ffff17 	ldw	r3,-4(fp)
    f998:	00800074 	movhi	r2,1
    f99c:	1082be04 	addi	r2,r2,2808
    f9a0:	18bff62e 	bgeu	r3,r2,f97c <__alt_data_end+0xff00f97c>
        (*ctor) (); 
}
    f9a4:	0001883a 	nop
    f9a8:	e037883a 	mov	sp,fp
    f9ac:	dfc00117 	ldw	ra,4(sp)
    f9b0:	df000017 	ldw	fp,0(sp)
    f9b4:	dec00204 	addi	sp,sp,8
    f9b8:	f800283a 	ret

0000f9bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f9bc:	defffd04 	addi	sp,sp,-12
    f9c0:	dfc00215 	stw	ra,8(sp)
    f9c4:	df000115 	stw	fp,4(sp)
    f9c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f9cc:	00800074 	movhi	r2,1
    f9d0:	1082bd04 	addi	r2,r2,2804
    f9d4:	e0bfff15 	stw	r2,-4(fp)
    f9d8:	00000606 	br	f9f4 <_do_dtors+0x38>
        (*dtor) (); 
    f9dc:	e0bfff17 	ldw	r2,-4(fp)
    f9e0:	10800017 	ldw	r2,0(r2)
    f9e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f9e8:	e0bfff17 	ldw	r2,-4(fp)
    f9ec:	10bfff04 	addi	r2,r2,-4
    f9f0:	e0bfff15 	stw	r2,-4(fp)
    f9f4:	e0ffff17 	ldw	r3,-4(fp)
    f9f8:	00800074 	movhi	r2,1
    f9fc:	1082be04 	addi	r2,r2,2808
    fa00:	18bff62e 	bgeu	r3,r2,f9dc <__alt_data_end+0xff00f9dc>
        (*dtor) (); 
}
    fa04:	0001883a 	nop
    fa08:	e037883a 	mov	sp,fp
    fa0c:	dfc00117 	ldw	ra,4(sp)
    fa10:	df000017 	ldw	fp,0(sp)
    fa14:	dec00204 	addi	sp,sp,8
    fa18:	f800283a 	ret

0000fa1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    fa1c:	defffe04 	addi	sp,sp,-8
    fa20:	dfc00115 	stw	ra,4(sp)
    fa24:	df000015 	stw	fp,0(sp)
    fa28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fa2c:	01440004 	movi	r5,4096
    fa30:	0009883a 	mov	r4,zero
    fa34:	00104880 	call	10488 <alt_icache_flush>
#endif
}
    fa38:	0001883a 	nop
    fa3c:	e037883a 	mov	sp,fp
    fa40:	dfc00117 	ldw	ra,4(sp)
    fa44:	df000017 	ldw	fp,0(sp)
    fa48:	dec00204 	addi	sp,sp,8
    fa4c:	f800283a 	ret

0000fa50 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    fa50:	defff904 	addi	sp,sp,-28
    fa54:	dfc00615 	stw	ra,24(sp)
    fa58:	df000515 	stw	fp,20(sp)
    fa5c:	df000504 	addi	fp,sp,20
    fa60:	e13ffc15 	stw	r4,-16(fp)
    fa64:	e17ffd15 	stw	r5,-12(fp)
    fa68:	e1bffe15 	stw	r6,-8(fp)
    fa6c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    fa70:	e0800217 	ldw	r2,8(fp)
    fa74:	d8800015 	stw	r2,0(sp)
    fa78:	e1ffff17 	ldw	r7,-4(fp)
    fa7c:	e1bffe17 	ldw	r6,-8(fp)
    fa80:	e17ffd17 	ldw	r5,-12(fp)
    fa84:	e13ffc17 	ldw	r4,-16(fp)
    fa88:	000fc000 	call	fc00 <alt_iic_isr_register>
}  
    fa8c:	e037883a 	mov	sp,fp
    fa90:	dfc00117 	ldw	ra,4(sp)
    fa94:	df000017 	ldw	fp,0(sp)
    fa98:	dec00204 	addi	sp,sp,8
    fa9c:	f800283a 	ret

0000faa0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    faa0:	defff904 	addi	sp,sp,-28
    faa4:	df000615 	stw	fp,24(sp)
    faa8:	df000604 	addi	fp,sp,24
    faac:	e13ffe15 	stw	r4,-8(fp)
    fab0:	e17fff15 	stw	r5,-4(fp)
    fab4:	e0bfff17 	ldw	r2,-4(fp)
    fab8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fabc:	0005303a 	rdctl	r2,status
    fac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fac4:	e0fffb17 	ldw	r3,-20(fp)
    fac8:	00bfff84 	movi	r2,-2
    facc:	1884703a 	and	r2,r3,r2
    fad0:	1001703a 	wrctl	status,r2
  
  return context;
    fad4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fad8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    fadc:	00c00044 	movi	r3,1
    fae0:	e0bffa17 	ldw	r2,-24(fp)
    fae4:	1884983a 	sll	r2,r3,r2
    fae8:	1007883a 	mov	r3,r2
    faec:	d0a72917 	ldw	r2,-25436(gp)
    faf0:	1884b03a 	or	r2,r3,r2
    faf4:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    faf8:	d0a72917 	ldw	r2,-25436(gp)
    fafc:	100170fa 	wrctl	ienable,r2
    fb00:	e0bffc17 	ldw	r2,-16(fp)
    fb04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb08:	e0bffd17 	ldw	r2,-12(fp)
    fb0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fb10:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    fb14:	0001883a 	nop
}
    fb18:	e037883a 	mov	sp,fp
    fb1c:	df000017 	ldw	fp,0(sp)
    fb20:	dec00104 	addi	sp,sp,4
    fb24:	f800283a 	ret

0000fb28 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    fb28:	defff904 	addi	sp,sp,-28
    fb2c:	df000615 	stw	fp,24(sp)
    fb30:	df000604 	addi	fp,sp,24
    fb34:	e13ffe15 	stw	r4,-8(fp)
    fb38:	e17fff15 	stw	r5,-4(fp)
    fb3c:	e0bfff17 	ldw	r2,-4(fp)
    fb40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb44:	0005303a 	rdctl	r2,status
    fb48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb4c:	e0fffb17 	ldw	r3,-20(fp)
    fb50:	00bfff84 	movi	r2,-2
    fb54:	1884703a 	and	r2,r3,r2
    fb58:	1001703a 	wrctl	status,r2
  
  return context;
    fb5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fb60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    fb64:	00c00044 	movi	r3,1
    fb68:	e0bffa17 	ldw	r2,-24(fp)
    fb6c:	1884983a 	sll	r2,r3,r2
    fb70:	0084303a 	nor	r2,zero,r2
    fb74:	1007883a 	mov	r3,r2
    fb78:	d0a72917 	ldw	r2,-25436(gp)
    fb7c:	1884703a 	and	r2,r3,r2
    fb80:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fb84:	d0a72917 	ldw	r2,-25436(gp)
    fb88:	100170fa 	wrctl	ienable,r2
    fb8c:	e0bffc17 	ldw	r2,-16(fp)
    fb90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb94:	e0bffd17 	ldw	r2,-12(fp)
    fb98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fb9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    fba0:	0001883a 	nop
}
    fba4:	e037883a 	mov	sp,fp
    fba8:	df000017 	ldw	fp,0(sp)
    fbac:	dec00104 	addi	sp,sp,4
    fbb0:	f800283a 	ret

0000fbb4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    fbb4:	defffc04 	addi	sp,sp,-16
    fbb8:	df000315 	stw	fp,12(sp)
    fbbc:	df000304 	addi	fp,sp,12
    fbc0:	e13ffe15 	stw	r4,-8(fp)
    fbc4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    fbc8:	000530fa 	rdctl	r2,ienable
    fbcc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    fbd0:	00c00044 	movi	r3,1
    fbd4:	e0bfff17 	ldw	r2,-4(fp)
    fbd8:	1884983a 	sll	r2,r3,r2
    fbdc:	1007883a 	mov	r3,r2
    fbe0:	e0bffd17 	ldw	r2,-12(fp)
    fbe4:	1884703a 	and	r2,r3,r2
    fbe8:	1004c03a 	cmpne	r2,r2,zero
    fbec:	10803fcc 	andi	r2,r2,255
}
    fbf0:	e037883a 	mov	sp,fp
    fbf4:	df000017 	ldw	fp,0(sp)
    fbf8:	dec00104 	addi	sp,sp,4
    fbfc:	f800283a 	ret

0000fc00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    fc00:	defff504 	addi	sp,sp,-44
    fc04:	dfc00a15 	stw	ra,40(sp)
    fc08:	df000915 	stw	fp,36(sp)
    fc0c:	df000904 	addi	fp,sp,36
    fc10:	e13ffc15 	stw	r4,-16(fp)
    fc14:	e17ffd15 	stw	r5,-12(fp)
    fc18:	e1bffe15 	stw	r6,-8(fp)
    fc1c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    fc20:	00bffa84 	movi	r2,-22
    fc24:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    fc28:	e0bffd17 	ldw	r2,-12(fp)
    fc2c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    fc30:	e0bff817 	ldw	r2,-32(fp)
    fc34:	10800808 	cmpgei	r2,r2,32
    fc38:	1000271e 	bne	r2,zero,fcd8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc3c:	0005303a 	rdctl	r2,status
    fc40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc44:	e0fffb17 	ldw	r3,-20(fp)
    fc48:	00bfff84 	movi	r2,-2
    fc4c:	1884703a 	and	r2,r3,r2
    fc50:	1001703a 	wrctl	status,r2
  
  return context;
    fc54:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    fc58:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    fc5c:	00800074 	movhi	r2,1
    fc60:	1092ca04 	addi	r2,r2,19240
    fc64:	e0fff817 	ldw	r3,-32(fp)
    fc68:	180690fa 	slli	r3,r3,3
    fc6c:	10c5883a 	add	r2,r2,r3
    fc70:	e0fffe17 	ldw	r3,-8(fp)
    fc74:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    fc78:	00800074 	movhi	r2,1
    fc7c:	1092ca04 	addi	r2,r2,19240
    fc80:	e0fff817 	ldw	r3,-32(fp)
    fc84:	180690fa 	slli	r3,r3,3
    fc88:	10c5883a 	add	r2,r2,r3
    fc8c:	10800104 	addi	r2,r2,4
    fc90:	e0ffff17 	ldw	r3,-4(fp)
    fc94:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	10000526 	beq	r2,zero,fcb4 <alt_iic_isr_register+0xb4>
    fca0:	e0bff817 	ldw	r2,-32(fp)
    fca4:	100b883a 	mov	r5,r2
    fca8:	e13ffc17 	ldw	r4,-16(fp)
    fcac:	000faa00 	call	faa0 <alt_ic_irq_enable>
    fcb0:	00000406 	br	fcc4 <alt_iic_isr_register+0xc4>
    fcb4:	e0bff817 	ldw	r2,-32(fp)
    fcb8:	100b883a 	mov	r5,r2
    fcbc:	e13ffc17 	ldw	r4,-16(fp)
    fcc0:	000fb280 	call	fb28 <alt_ic_irq_disable>
    fcc4:	e0bff715 	stw	r2,-36(fp)
    fcc8:	e0bffa17 	ldw	r2,-24(fp)
    fccc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fcd0:	e0bff917 	ldw	r2,-28(fp)
    fcd4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    fcd8:	e0bff717 	ldw	r2,-36(fp)
}
    fcdc:	e037883a 	mov	sp,fp
    fce0:	dfc00117 	ldw	ra,4(sp)
    fce4:	df000017 	ldw	fp,0(sp)
    fce8:	dec00204 	addi	sp,sp,8
    fcec:	f800283a 	ret

0000fcf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    fcf0:	defff904 	addi	sp,sp,-28
    fcf4:	dfc00615 	stw	ra,24(sp)
    fcf8:	df000515 	stw	fp,20(sp)
    fcfc:	df000504 	addi	fp,sp,20
    fd00:	e13ffc15 	stw	r4,-16(fp)
    fd04:	e17ffd15 	stw	r5,-12(fp)
    fd08:	e1bffe15 	stw	r6,-8(fp)
    fd0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    fd10:	e1bfff17 	ldw	r6,-4(fp)
    fd14:	e17ffe17 	ldw	r5,-8(fp)
    fd18:	e13ffd17 	ldw	r4,-12(fp)
    fd1c:	000ff300 	call	ff30 <open>
    fd20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    fd24:	e0bffb17 	ldw	r2,-20(fp)
    fd28:	10001c16 	blt	r2,zero,fd9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd2c:	00800074 	movhi	r2,1
    fd30:	10871b04 	addi	r2,r2,7276
    fd34:	e0fffb17 	ldw	r3,-20(fp)
    fd38:	18c00324 	muli	r3,r3,12
    fd3c:	10c5883a 	add	r2,r2,r3
    fd40:	10c00017 	ldw	r3,0(r2)
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd4c:	00800074 	movhi	r2,1
    fd50:	10871b04 	addi	r2,r2,7276
    fd54:	e0fffb17 	ldw	r3,-20(fp)
    fd58:	18c00324 	muli	r3,r3,12
    fd5c:	10c5883a 	add	r2,r2,r3
    fd60:	10800104 	addi	r2,r2,4
    fd64:	10c00017 	ldw	r3,0(r2)
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    fd70:	00800074 	movhi	r2,1
    fd74:	10871b04 	addi	r2,r2,7276
    fd78:	e0fffb17 	ldw	r3,-20(fp)
    fd7c:	18c00324 	muli	r3,r3,12
    fd80:	10c5883a 	add	r2,r2,r3
    fd84:	10800204 	addi	r2,r2,8
    fd88:	10c00017 	ldw	r3,0(r2)
    fd8c:	e0bffc17 	ldw	r2,-16(fp)
    fd90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    fd94:	e13ffb17 	ldw	r4,-20(fp)
    fd98:	000e4ec0 	call	e4ec <alt_release_fd>
  }
} 
    fd9c:	0001883a 	nop
    fda0:	e037883a 	mov	sp,fp
    fda4:	dfc00117 	ldw	ra,4(sp)
    fda8:	df000017 	ldw	fp,0(sp)
    fdac:	dec00204 	addi	sp,sp,8
    fdb0:	f800283a 	ret

0000fdb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    fdb4:	defffb04 	addi	sp,sp,-20
    fdb8:	dfc00415 	stw	ra,16(sp)
    fdbc:	df000315 	stw	fp,12(sp)
    fdc0:	df000304 	addi	fp,sp,12
    fdc4:	e13ffd15 	stw	r4,-12(fp)
    fdc8:	e17ffe15 	stw	r5,-8(fp)
    fdcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    fdd0:	01c07fc4 	movi	r7,511
    fdd4:	01800044 	movi	r6,1
    fdd8:	e17ffd17 	ldw	r5,-12(fp)
    fddc:	01000074 	movhi	r4,1
    fde0:	21071e04 	addi	r4,r4,7288
    fde4:	000fcf00 	call	fcf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    fde8:	01c07fc4 	movi	r7,511
    fdec:	000d883a 	mov	r6,zero
    fdf0:	e17ffe17 	ldw	r5,-8(fp)
    fdf4:	01000074 	movhi	r4,1
    fdf8:	21071b04 	addi	r4,r4,7276
    fdfc:	000fcf00 	call	fcf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    fe00:	01c07fc4 	movi	r7,511
    fe04:	01800044 	movi	r6,1
    fe08:	e17fff17 	ldw	r5,-4(fp)
    fe0c:	01000074 	movhi	r4,1
    fe10:	21072104 	addi	r4,r4,7300
    fe14:	000fcf00 	call	fcf0 <alt_open_fd>
}  
    fe18:	0001883a 	nop
    fe1c:	e037883a 	mov	sp,fp
    fe20:	dfc00117 	ldw	ra,4(sp)
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00204 	addi	sp,sp,8
    fe2c:	f800283a 	ret

0000fe30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe30:	defffe04 	addi	sp,sp,-8
    fe34:	dfc00115 	stw	ra,4(sp)
    fe38:	df000015 	stw	fp,0(sp)
    fe3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe40:	d0a00b17 	ldw	r2,-32724(gp)
    fe44:	10000326 	beq	r2,zero,fe54 <alt_get_errno+0x24>
    fe48:	d0a00b17 	ldw	r2,-32724(gp)
    fe4c:	103ee83a 	callr	r2
    fe50:	00000106 	br	fe58 <alt_get_errno+0x28>
    fe54:	d0a72004 	addi	r2,gp,-25472
}
    fe58:	e037883a 	mov	sp,fp
    fe5c:	dfc00117 	ldw	ra,4(sp)
    fe60:	df000017 	ldw	fp,0(sp)
    fe64:	dec00204 	addi	sp,sp,8
    fe68:	f800283a 	ret

0000fe6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fe6c:	defffd04 	addi	sp,sp,-12
    fe70:	df000215 	stw	fp,8(sp)
    fe74:	df000204 	addi	fp,sp,8
    fe78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fe7c:	e0bfff17 	ldw	r2,-4(fp)
    fe80:	10800217 	ldw	r2,8(r2)
    fe84:	10d00034 	orhi	r3,r2,16384
    fe88:	e0bfff17 	ldw	r2,-4(fp)
    fe8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fe90:	e03ffe15 	stw	zero,-8(fp)
    fe94:	00001d06 	br	ff0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fe98:	00800074 	movhi	r2,1
    fe9c:	10871b04 	addi	r2,r2,7276
    fea0:	e0fffe17 	ldw	r3,-8(fp)
    fea4:	18c00324 	muli	r3,r3,12
    fea8:	10c5883a 	add	r2,r2,r3
    feac:	10c00017 	ldw	r3,0(r2)
    feb0:	e0bfff17 	ldw	r2,-4(fp)
    feb4:	10800017 	ldw	r2,0(r2)
    feb8:	1880111e 	bne	r3,r2,ff00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    febc:	00800074 	movhi	r2,1
    fec0:	10871b04 	addi	r2,r2,7276
    fec4:	e0fffe17 	ldw	r3,-8(fp)
    fec8:	18c00324 	muli	r3,r3,12
    fecc:	10c5883a 	add	r2,r2,r3
    fed0:	10800204 	addi	r2,r2,8
    fed4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fed8:	1000090e 	bge	r2,zero,ff00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fedc:	e0bffe17 	ldw	r2,-8(fp)
    fee0:	10c00324 	muli	r3,r2,12
    fee4:	00800074 	movhi	r2,1
    fee8:	10871b04 	addi	r2,r2,7276
    feec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fef0:	e0bfff17 	ldw	r2,-4(fp)
    fef4:	18800226 	beq	r3,r2,ff00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    fef8:	00bffcc4 	movi	r2,-13
    fefc:	00000806 	br	ff20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ff00:	e0bffe17 	ldw	r2,-8(fp)
    ff04:	10800044 	addi	r2,r2,1
    ff08:	e0bffe15 	stw	r2,-8(fp)
    ff0c:	d0a00a17 	ldw	r2,-32728(gp)
    ff10:	1007883a 	mov	r3,r2
    ff14:	e0bffe17 	ldw	r2,-8(fp)
    ff18:	18bfdf2e 	bgeu	r3,r2,fe98 <__alt_data_end+0xff00fe98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ff1c:	0005883a 	mov	r2,zero
}
    ff20:	e037883a 	mov	sp,fp
    ff24:	df000017 	ldw	fp,0(sp)
    ff28:	dec00104 	addi	sp,sp,4
    ff2c:	f800283a 	ret

0000ff30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ff30:	defff604 	addi	sp,sp,-40
    ff34:	dfc00915 	stw	ra,36(sp)
    ff38:	df000815 	stw	fp,32(sp)
    ff3c:	df000804 	addi	fp,sp,32
    ff40:	e13ffd15 	stw	r4,-12(fp)
    ff44:	e17ffe15 	stw	r5,-8(fp)
    ff48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ff4c:	00bfffc4 	movi	r2,-1
    ff50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ff54:	00bffb44 	movi	r2,-19
    ff58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ff5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ff60:	d1600804 	addi	r5,gp,-32736
    ff64:	e13ffd17 	ldw	r4,-12(fp)
    ff68:	001024c0 	call	1024c <alt_find_dev>
    ff6c:	e0bff815 	stw	r2,-32(fp)
    ff70:	e0bff817 	ldw	r2,-32(fp)
    ff74:	1000051e 	bne	r2,zero,ff8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ff78:	e13ffd17 	ldw	r4,-12(fp)
    ff7c:	00102dc0 	call	102dc <alt_find_file>
    ff80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ff84:	00800044 	movi	r2,1
    ff88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ff8c:	e0bff817 	ldw	r2,-32(fp)
    ff90:	10002926 	beq	r2,zero,10038 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ff94:	e13ff817 	ldw	r4,-32(fp)
    ff98:	00103e40 	call	103e4 <alt_get_fd>
    ff9c:	e0bff915 	stw	r2,-28(fp)
    ffa0:	e0bff917 	ldw	r2,-28(fp)
    ffa4:	1000030e 	bge	r2,zero,ffb4 <open+0x84>
    {
      status = index;
    ffa8:	e0bff917 	ldw	r2,-28(fp)
    ffac:	e0bffa15 	stw	r2,-24(fp)
    ffb0:	00002306 	br	10040 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    ffb4:	e0bff917 	ldw	r2,-28(fp)
    ffb8:	10c00324 	muli	r3,r2,12
    ffbc:	00800074 	movhi	r2,1
    ffc0:	10871b04 	addi	r2,r2,7276
    ffc4:	1885883a 	add	r2,r3,r2
    ffc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ffcc:	e0fffe17 	ldw	r3,-8(fp)
    ffd0:	00900034 	movhi	r2,16384
    ffd4:	10bfffc4 	addi	r2,r2,-1
    ffd8:	1886703a 	and	r3,r3,r2
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ffe4:	e0bffb17 	ldw	r2,-20(fp)
    ffe8:	1000051e 	bne	r2,zero,10000 <open+0xd0>
    ffec:	e13ffc17 	ldw	r4,-16(fp)
    fff0:	000fe6c0 	call	fe6c <alt_file_locked>
    fff4:	e0bffa15 	stw	r2,-24(fp)
    fff8:	e0bffa17 	ldw	r2,-24(fp)
    fffc:	10001016 	blt	r2,zero,10040 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10000:	e0bff817 	ldw	r2,-32(fp)
   10004:	10800317 	ldw	r2,12(r2)
   10008:	10000826 	beq	r2,zero,1002c <open+0xfc>
   1000c:	e0bff817 	ldw	r2,-32(fp)
   10010:	10800317 	ldw	r2,12(r2)
   10014:	e1ffff17 	ldw	r7,-4(fp)
   10018:	e1bffe17 	ldw	r6,-8(fp)
   1001c:	e17ffd17 	ldw	r5,-12(fp)
   10020:	e13ffc17 	ldw	r4,-16(fp)
   10024:	103ee83a 	callr	r2
   10028:	00000106 	br	10030 <open+0x100>
   1002c:	0005883a 	mov	r2,zero
   10030:	e0bffa15 	stw	r2,-24(fp)
   10034:	00000206 	br	10040 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10038:	00bffb44 	movi	r2,-19
   1003c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10040:	e0bffa17 	ldw	r2,-24(fp)
   10044:	1000090e 	bge	r2,zero,1006c <open+0x13c>
  {
    alt_release_fd (index);  
   10048:	e13ff917 	ldw	r4,-28(fp)
   1004c:	000e4ec0 	call	e4ec <alt_release_fd>
    ALT_ERRNO = -status;
   10050:	000fe300 	call	fe30 <alt_get_errno>
   10054:	1007883a 	mov	r3,r2
   10058:	e0bffa17 	ldw	r2,-24(fp)
   1005c:	0085c83a 	sub	r2,zero,r2
   10060:	18800015 	stw	r2,0(r3)
    return -1;
   10064:	00bfffc4 	movi	r2,-1
   10068:	00000106 	br	10070 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1006c:	e0bff917 	ldw	r2,-28(fp)
}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10084:	defffa04 	addi	sp,sp,-24
   10088:	df000515 	stw	fp,20(sp)
   1008c:	df000504 	addi	fp,sp,20
   10090:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10094:	0005303a 	rdctl	r2,status
   10098:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1009c:	e0fffc17 	ldw	r3,-16(fp)
   100a0:	00bfff84 	movi	r2,-2
   100a4:	1884703a 	and	r2,r3,r2
   100a8:	1001703a 	wrctl	status,r2
  
  return context;
   100ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   100b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   100b4:	e0bfff17 	ldw	r2,-4(fp)
   100b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	10800017 	ldw	r2,0(r2)
   100c4:	e0fffd17 	ldw	r3,-12(fp)
   100c8:	18c00117 	ldw	r3,4(r3)
   100cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   100d0:	e0bffd17 	ldw	r2,-12(fp)
   100d4:	10800117 	ldw	r2,4(r2)
   100d8:	e0fffd17 	ldw	r3,-12(fp)
   100dc:	18c00017 	ldw	r3,0(r3)
   100e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   100e4:	e0bffd17 	ldw	r2,-12(fp)
   100e8:	e0fffd17 	ldw	r3,-12(fp)
   100ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   100f0:	e0bffd17 	ldw	r2,-12(fp)
   100f4:	e0fffd17 	ldw	r3,-12(fp)
   100f8:	10c00015 	stw	r3,0(r2)
   100fc:	e0bffb17 	ldw	r2,-20(fp)
   10100:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10104:	e0bffe17 	ldw	r2,-8(fp)
   10108:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1010c:	0001883a 	nop
   10110:	e037883a 	mov	sp,fp
   10114:	df000017 	ldw	fp,0(sp)
   10118:	dec00104 	addi	sp,sp,4
   1011c:	f800283a 	ret

00010120 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10120:	defffb04 	addi	sp,sp,-20
   10124:	dfc00415 	stw	ra,16(sp)
   10128:	df000315 	stw	fp,12(sp)
   1012c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10130:	d0a00e17 	ldw	r2,-32712(gp)
   10134:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10138:	d0a72b17 	ldw	r2,-25428(gp)
   1013c:	10800044 	addi	r2,r2,1
   10140:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10144:	00002e06 	br	10200 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10148:	e0bffd17 	ldw	r2,-12(fp)
   1014c:	10800017 	ldw	r2,0(r2)
   10150:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10154:	e0bffd17 	ldw	r2,-12(fp)
   10158:	10800403 	ldbu	r2,16(r2)
   1015c:	10803fcc 	andi	r2,r2,255
   10160:	10000426 	beq	r2,zero,10174 <alt_tick+0x54>
   10164:	d0a72b17 	ldw	r2,-25428(gp)
   10168:	1000021e 	bne	r2,zero,10174 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1016c:	e0bffd17 	ldw	r2,-12(fp)
   10170:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10174:	e0bffd17 	ldw	r2,-12(fp)
   10178:	10800217 	ldw	r2,8(r2)
   1017c:	d0e72b17 	ldw	r3,-25428(gp)
   10180:	18801d36 	bltu	r3,r2,101f8 <alt_tick+0xd8>
   10184:	e0bffd17 	ldw	r2,-12(fp)
   10188:	10800403 	ldbu	r2,16(r2)
   1018c:	10803fcc 	andi	r2,r2,255
   10190:	1000191e 	bne	r2,zero,101f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800317 	ldw	r2,12(r2)
   1019c:	e0fffd17 	ldw	r3,-12(fp)
   101a0:	18c00517 	ldw	r3,20(r3)
   101a4:	1809883a 	mov	r4,r3
   101a8:	103ee83a 	callr	r2
   101ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   101b0:	e0bfff17 	ldw	r2,-4(fp)
   101b4:	1000031e 	bne	r2,zero,101c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   101b8:	e13ffd17 	ldw	r4,-12(fp)
   101bc:	00100840 	call	10084 <alt_alarm_stop>
   101c0:	00000d06 	br	101f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   101c4:	e0bffd17 	ldw	r2,-12(fp)
   101c8:	10c00217 	ldw	r3,8(r2)
   101cc:	e0bfff17 	ldw	r2,-4(fp)
   101d0:	1887883a 	add	r3,r3,r2
   101d4:	e0bffd17 	ldw	r2,-12(fp)
   101d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   101dc:	e0bffd17 	ldw	r2,-12(fp)
   101e0:	10c00217 	ldw	r3,8(r2)
   101e4:	d0a72b17 	ldw	r2,-25428(gp)
   101e8:	1880032e 	bgeu	r3,r2,101f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	00c00044 	movi	r3,1
   101f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   101f8:	e0bffe17 	ldw	r2,-8(fp)
   101fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	d0a00e04 	addi	r2,gp,-32712
   10208:	18bfcf1e 	bne	r3,r2,10148 <__alt_data_end+0xff010148>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1020c:	0001883a 	nop
}
   10210:	0001883a 	nop
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

00010228 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10228:	deffff04 	addi	sp,sp,-4
   1022c:	df000015 	stw	fp,0(sp)
   10230:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10234:	000170fa 	wrctl	ienable,zero
}
   10238:	0001883a 	nop
   1023c:	e037883a 	mov	sp,fp
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00104 	addi	sp,sp,4
   10248:	f800283a 	ret

0001024c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1024c:	defffa04 	addi	sp,sp,-24
   10250:	dfc00515 	stw	ra,20(sp)
   10254:	df000415 	stw	fp,16(sp)
   10258:	df000404 	addi	fp,sp,16
   1025c:	e13ffe15 	stw	r4,-8(fp)
   10260:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10264:	e0bfff17 	ldw	r2,-4(fp)
   10268:	10800017 	ldw	r2,0(r2)
   1026c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10270:	e13ffe17 	ldw	r4,-8(fp)
   10274:	0002a180 	call	2a18 <strlen>
   10278:	10800044 	addi	r2,r2,1
   1027c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10280:	00000d06 	br	102b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10284:	e0bffc17 	ldw	r2,-16(fp)
   10288:	10800217 	ldw	r2,8(r2)
   1028c:	e0fffd17 	ldw	r3,-12(fp)
   10290:	180d883a 	mov	r6,r3
   10294:	e17ffe17 	ldw	r5,-8(fp)
   10298:	1009883a 	mov	r4,r2
   1029c:	00107b00 	call	107b0 <memcmp>
   102a0:	1000021e 	bne	r2,zero,102ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   102a4:	e0bffc17 	ldw	r2,-16(fp)
   102a8:	00000706 	br	102c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   102ac:	e0bffc17 	ldw	r2,-16(fp)
   102b0:	10800017 	ldw	r2,0(r2)
   102b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   102b8:	e0fffc17 	ldw	r3,-16(fp)
   102bc:	e0bfff17 	ldw	r2,-4(fp)
   102c0:	18bff01e 	bne	r3,r2,10284 <__alt_data_end+0xff010284>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   102c4:	0005883a 	mov	r2,zero
}
   102c8:	e037883a 	mov	sp,fp
   102cc:	dfc00117 	ldw	ra,4(sp)
   102d0:	df000017 	ldw	fp,0(sp)
   102d4:	dec00204 	addi	sp,sp,8
   102d8:	f800283a 	ret

000102dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   102dc:	defffb04 	addi	sp,sp,-20
   102e0:	dfc00415 	stw	ra,16(sp)
   102e4:	df000315 	stw	fp,12(sp)
   102e8:	df000304 	addi	fp,sp,12
   102ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   102f0:	d0a00617 	ldw	r2,-32744(gp)
   102f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   102f8:	00003106 	br	103c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   102fc:	e0bffd17 	ldw	r2,-12(fp)
   10300:	10800217 	ldw	r2,8(r2)
   10304:	1009883a 	mov	r4,r2
   10308:	0002a180 	call	2a18 <strlen>
   1030c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	10c00217 	ldw	r3,8(r2)
   10318:	e0bffe17 	ldw	r2,-8(fp)
   1031c:	10bfffc4 	addi	r2,r2,-1
   10320:	1885883a 	add	r2,r3,r2
   10324:	10800003 	ldbu	r2,0(r2)
   10328:	10803fcc 	andi	r2,r2,255
   1032c:	1080201c 	xori	r2,r2,128
   10330:	10bfe004 	addi	r2,r2,-128
   10334:	10800bd8 	cmpnei	r2,r2,47
   10338:	1000031e 	bne	r2,zero,10348 <alt_find_file+0x6c>
    {
      len -= 1;
   1033c:	e0bffe17 	ldw	r2,-8(fp)
   10340:	10bfffc4 	addi	r2,r2,-1
   10344:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	e0ffff17 	ldw	r3,-4(fp)
   10350:	1885883a 	add	r2,r3,r2
   10354:	10800003 	ldbu	r2,0(r2)
   10358:	10803fcc 	andi	r2,r2,255
   1035c:	1080201c 	xori	r2,r2,128
   10360:	10bfe004 	addi	r2,r2,-128
   10364:	10800be0 	cmpeqi	r2,r2,47
   10368:	1000081e 	bne	r2,zero,1038c <alt_find_file+0xb0>
   1036c:	e0bffe17 	ldw	r2,-8(fp)
   10370:	e0ffff17 	ldw	r3,-4(fp)
   10374:	1885883a 	add	r2,r3,r2
   10378:	10800003 	ldbu	r2,0(r2)
   1037c:	10803fcc 	andi	r2,r2,255
   10380:	1080201c 	xori	r2,r2,128
   10384:	10bfe004 	addi	r2,r2,-128
   10388:	10000a1e 	bne	r2,zero,103b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	10800217 	ldw	r2,8(r2)
   10394:	e0fffe17 	ldw	r3,-8(fp)
   10398:	180d883a 	mov	r6,r3
   1039c:	e17fff17 	ldw	r5,-4(fp)
   103a0:	1009883a 	mov	r4,r2
   103a4:	00107b00 	call	107b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   103a8:	1000021e 	bne	r2,zero,103b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   103ac:	e0bffd17 	ldw	r2,-12(fp)
   103b0:	00000706 	br	103d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   103b4:	e0bffd17 	ldw	r2,-12(fp)
   103b8:	10800017 	ldw	r2,0(r2)
   103bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   103c0:	e0fffd17 	ldw	r3,-12(fp)
   103c4:	d0a00604 	addi	r2,gp,-32744
   103c8:	18bfcc1e 	bne	r3,r2,102fc <__alt_data_end+0xff0102fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   103cc:	0005883a 	mov	r2,zero
}
   103d0:	e037883a 	mov	sp,fp
   103d4:	dfc00117 	ldw	ra,4(sp)
   103d8:	df000017 	ldw	fp,0(sp)
   103dc:	dec00204 	addi	sp,sp,8
   103e0:	f800283a 	ret

000103e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   103e4:	defffc04 	addi	sp,sp,-16
   103e8:	df000315 	stw	fp,12(sp)
   103ec:	df000304 	addi	fp,sp,12
   103f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   103f4:	00bffa04 	movi	r2,-24
   103f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   103fc:	e03ffd15 	stw	zero,-12(fp)
   10400:	00001906 	br	10468 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10404:	00800074 	movhi	r2,1
   10408:	10871b04 	addi	r2,r2,7276
   1040c:	e0fffd17 	ldw	r3,-12(fp)
   10410:	18c00324 	muli	r3,r3,12
   10414:	10c5883a 	add	r2,r2,r3
   10418:	10800017 	ldw	r2,0(r2)
   1041c:	10000f1e 	bne	r2,zero,1045c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10420:	00800074 	movhi	r2,1
   10424:	10871b04 	addi	r2,r2,7276
   10428:	e0fffd17 	ldw	r3,-12(fp)
   1042c:	18c00324 	muli	r3,r3,12
   10430:	10c5883a 	add	r2,r2,r3
   10434:	e0ffff17 	ldw	r3,-4(fp)
   10438:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1043c:	d0e00a17 	ldw	r3,-32728(gp)
   10440:	e0bffd17 	ldw	r2,-12(fp)
   10444:	1880020e 	bge	r3,r2,10450 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10448:	e0bffd17 	ldw	r2,-12(fp)
   1044c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10450:	e0bffd17 	ldw	r2,-12(fp)
   10454:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10458:	00000606 	br	10474 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1045c:	e0bffd17 	ldw	r2,-12(fp)
   10460:	10800044 	addi	r2,r2,1
   10464:	e0bffd15 	stw	r2,-12(fp)
   10468:	e0bffd17 	ldw	r2,-12(fp)
   1046c:	10800810 	cmplti	r2,r2,32
   10470:	103fe41e 	bne	r2,zero,10404 <__alt_data_end+0xff010404>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10474:	e0bffe17 	ldw	r2,-8(fp)
}
   10478:	e037883a 	mov	sp,fp
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00104 	addi	sp,sp,4
   10484:	f800283a 	ret

00010488 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10488:	defffb04 	addi	sp,sp,-20
   1048c:	df000415 	stw	fp,16(sp)
   10490:	df000404 	addi	fp,sp,16
   10494:	e13ffe15 	stw	r4,-8(fp)
   10498:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1049c:	e0bfff17 	ldw	r2,-4(fp)
   104a0:	10840070 	cmpltui	r2,r2,4097
   104a4:	1000021e 	bne	r2,zero,104b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   104a8:	00840004 	movi	r2,4096
   104ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   104b0:	e0fffe17 	ldw	r3,-8(fp)
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	1885883a 	add	r2,r3,r2
   104bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   104c0:	e0bffe17 	ldw	r2,-8(fp)
   104c4:	e0bffc15 	stw	r2,-16(fp)
   104c8:	00000506 	br	104e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   104d4:	e0bffc17 	ldw	r2,-16(fp)
   104d8:	10800804 	addi	r2,r2,32
   104dc:	e0bffc15 	stw	r2,-16(fp)
   104e0:	e0fffc17 	ldw	r3,-16(fp)
   104e4:	e0bffd17 	ldw	r2,-12(fp)
   104e8:	18bff836 	bltu	r3,r2,104cc <__alt_data_end+0xff0104cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   104ec:	e0bffe17 	ldw	r2,-8(fp)
   104f0:	108007cc 	andi	r2,r2,31
   104f4:	10000226 	beq	r2,zero,10500 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   104f8:	e0bffc17 	ldw	r2,-16(fp)
   104fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10500:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10504:	0001883a 	nop
   10508:	e037883a 	mov	sp,fp
   1050c:	df000017 	ldw	fp,0(sp)
   10510:	dec00104 	addi	sp,sp,4
   10514:	f800283a 	ret

00010518 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10518:	defffe04 	addi	sp,sp,-8
   1051c:	df000115 	stw	fp,4(sp)
   10520:	df000104 	addi	fp,sp,4
   10524:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10528:	e0bfff17 	ldw	r2,-4(fp)
   1052c:	10bffe84 	addi	r2,r2,-6
   10530:	10c00428 	cmpgeui	r3,r2,16
   10534:	18001a1e 	bne	r3,zero,105a0 <alt_exception_cause_generated_bad_addr+0x88>
   10538:	100690ba 	slli	r3,r2,2
   1053c:	00800074 	movhi	r2,1
   10540:	10815404 	addi	r2,r2,1360
   10544:	1885883a 	add	r2,r3,r2
   10548:	10800017 	ldw	r2,0(r2)
   1054c:	1000683a 	jmp	r2
   10550:	00010590 	cmplti	zero,zero,1046
   10554:	00010590 	cmplti	zero,zero,1046
   10558:	000105a0 	cmpeqi	zero,zero,1046
   1055c:	000105a0 	cmpeqi	zero,zero,1046
   10560:	000105a0 	cmpeqi	zero,zero,1046
   10564:	00010590 	cmplti	zero,zero,1046
   10568:	00010598 	cmpnei	zero,zero,1046
   1056c:	000105a0 	cmpeqi	zero,zero,1046
   10570:	00010590 	cmplti	zero,zero,1046
   10574:	00010590 	cmplti	zero,zero,1046
   10578:	000105a0 	cmpeqi	zero,zero,1046
   1057c:	00010590 	cmplti	zero,zero,1046
   10580:	00010598 	cmpnei	zero,zero,1046
   10584:	000105a0 	cmpeqi	zero,zero,1046
   10588:	000105a0 	cmpeqi	zero,zero,1046
   1058c:	00010590 	cmplti	zero,zero,1046
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10590:	00800044 	movi	r2,1
   10594:	00000306 	br	105a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10598:	0005883a 	mov	r2,zero
   1059c:	00000106 	br	105a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   105a0:	0005883a 	mov	r2,zero
  }
}
   105a4:	e037883a 	mov	sp,fp
   105a8:	df000017 	ldw	fp,0(sp)
   105ac:	dec00104 	addi	sp,sp,4
   105b0:	f800283a 	ret

000105b4 <atexit>:
   105b4:	200b883a 	mov	r5,r4
   105b8:	000f883a 	mov	r7,zero
   105bc:	000d883a 	mov	r6,zero
   105c0:	0009883a 	mov	r4,zero
   105c4:	001082c1 	jmpi	1082c <__register_exitproc>

000105c8 <exit>:
   105c8:	defffe04 	addi	sp,sp,-8
   105cc:	000b883a 	mov	r5,zero
   105d0:	dc000015 	stw	r16,0(sp)
   105d4:	dfc00115 	stw	ra,4(sp)
   105d8:	2021883a 	mov	r16,r4
   105dc:	00109440 	call	10944 <__call_exitprocs>
   105e0:	00800074 	movhi	r2,1
   105e4:	108b9504 	addi	r2,r2,11860
   105e8:	11000017 	ldw	r4,0(r2)
   105ec:	20800f17 	ldw	r2,60(r4)
   105f0:	10000126 	beq	r2,zero,105f8 <exit+0x30>
   105f4:	103ee83a 	callr	r2
   105f8:	8009883a 	mov	r4,r16
   105fc:	0010ac40 	call	10ac4 <_exit>

00010600 <memalign>:
   10600:	00800074 	movhi	r2,1
   10604:	108b9604 	addi	r2,r2,11864
   10608:	280d883a 	mov	r6,r5
   1060c:	200b883a 	mov	r5,r4
   10610:	11000017 	ldw	r4,0(r2)
   10614:	00106181 	jmpi	10618 <_memalign_r>

00010618 <_memalign_r>:
   10618:	00800204 	movi	r2,8
   1061c:	1140532e 	bgeu	r2,r5,1076c <_memalign_r+0x154>
   10620:	defffa04 	addi	sp,sp,-24
   10624:	dd000415 	stw	r20,16(sp)
   10628:	dc400115 	stw	r17,4(sp)
   1062c:	dfc00515 	stw	ra,20(sp)
   10630:	dcc00315 	stw	r19,12(sp)
   10634:	dc800215 	stw	r18,8(sp)
   10638:	dc000015 	stw	r16,0(sp)
   1063c:	008003c4 	movi	r2,15
   10640:	2823883a 	mov	r17,r5
   10644:	2029883a 	mov	r20,r4
   10648:	11400136 	bltu	r2,r5,10650 <_memalign_r+0x38>
   1064c:	04400404 	movi	r17,16
   10650:	308002c4 	addi	r2,r6,11
   10654:	00c00584 	movi	r3,22
   10658:	18803e2e 	bgeu	r3,r2,10754 <_memalign_r+0x13c>
   1065c:	04bffe04 	movi	r18,-8
   10660:	14a4703a 	and	r18,r2,r18
   10664:	90003d16 	blt	r18,zero,1075c <_memalign_r+0x144>
   10668:	91803c36 	bltu	r18,r6,1075c <_memalign_r+0x144>
   1066c:	89400404 	addi	r5,r17,16
   10670:	2c8b883a 	add	r5,r5,r18
   10674:	a009883a 	mov	r4,r20
   10678:	00020780 	call	2078 <_malloc_r>
   1067c:	1027883a 	mov	r19,r2
   10680:	10004926 	beq	r2,zero,107a8 <_memalign_r+0x190>
   10684:	a009883a 	mov	r4,r20
   10688:	000e36c0 	call	e36c <__malloc_lock>
   1068c:	880b883a 	mov	r5,r17
   10690:	9809883a 	mov	r4,r19
   10694:	9c3ffe04 	addi	r16,r19,-8
   10698:	00016040 	call	1604 <__umodsi3>
   1069c:	10001c26 	beq	r2,zero,10710 <_memalign_r+0xf8>
   106a0:	88bfffc4 	addi	r2,r17,-1
   106a4:	9887883a 	add	r3,r19,r2
   106a8:	0445c83a 	sub	r2,zero,r17
   106ac:	1884703a 	and	r2,r3,r2
   106b0:	10bffe04 	addi	r2,r2,-8
   106b4:	1409c83a 	sub	r4,r2,r16
   106b8:	014003c4 	movi	r5,15
   106bc:	8007883a 	mov	r3,r16
   106c0:	29002c0e 	bge	r5,r4,10774 <_memalign_r+0x15c>
   106c4:	1021883a 	mov	r16,r2
   106c8:	993fff17 	ldw	r4,-4(r19)
   106cc:	00bfff04 	movi	r2,-4
   106d0:	80c7c83a 	sub	r3,r16,r3
   106d4:	2084703a 	and	r2,r4,r2
   106d8:	10c5c83a 	sub	r2,r2,r3
   106dc:	11000054 	ori	r4,r2,1
   106e0:	81000115 	stw	r4,4(r16)
   106e4:	8085883a 	add	r2,r16,r2
   106e8:	11800117 	ldw	r6,4(r2)
   106ec:	980b883a 	mov	r5,r19
   106f0:	a009883a 	mov	r4,r20
   106f4:	31800054 	ori	r6,r6,1
   106f8:	11800115 	stw	r6,4(r2)
   106fc:	98bfff17 	ldw	r2,-4(r19)
   10700:	1080004c 	andi	r2,r2,1
   10704:	10c6b03a 	or	r3,r2,r3
   10708:	98ffff15 	stw	r3,-4(r19)
   1070c:	0006ec80 	call	6ec8 <_free_r>
   10710:	80c00117 	ldw	r3,4(r16)
   10714:	00bfff04 	movi	r2,-4
   10718:	1884703a 	and	r2,r3,r2
   1071c:	1485c83a 	sub	r2,r2,r18
   10720:	00c003c4 	movi	r3,15
   10724:	18801516 	blt	r3,r2,1077c <_memalign_r+0x164>
   10728:	a009883a 	mov	r4,r20
   1072c:	000e3900 	call	e390 <__malloc_unlock>
   10730:	80800204 	addi	r2,r16,8
   10734:	dfc00517 	ldw	ra,20(sp)
   10738:	dd000417 	ldw	r20,16(sp)
   1073c:	dcc00317 	ldw	r19,12(sp)
   10740:	dc800217 	ldw	r18,8(sp)
   10744:	dc400117 	ldw	r17,4(sp)
   10748:	dc000017 	ldw	r16,0(sp)
   1074c:	dec00604 	addi	sp,sp,24
   10750:	f800283a 	ret
   10754:	04800404 	movi	r18,16
   10758:	91bfc42e 	bgeu	r18,r6,1066c <__alt_data_end+0xff01066c>
   1075c:	00800304 	movi	r2,12
   10760:	a0800015 	stw	r2,0(r20)
   10764:	0005883a 	mov	r2,zero
   10768:	003ff206 	br	10734 <__alt_data_end+0xff010734>
   1076c:	300b883a 	mov	r5,r6
   10770:	00020781 	jmpi	2078 <_malloc_r>
   10774:	1461883a 	add	r16,r2,r17
   10778:	003fd306 	br	106c8 <__alt_data_end+0xff0106c8>
   1077c:	848b883a 	add	r5,r16,r18
   10780:	10800054 	ori	r2,r2,1
   10784:	28800115 	stw	r2,4(r5)
   10788:	80800117 	ldw	r2,4(r16)
   1078c:	29400204 	addi	r5,r5,8
   10790:	a009883a 	mov	r4,r20
   10794:	1080004c 	andi	r2,r2,1
   10798:	14a4b03a 	or	r18,r2,r18
   1079c:	84800115 	stw	r18,4(r16)
   107a0:	0006ec80 	call	6ec8 <_free_r>
   107a4:	003fe006 	br	10728 <__alt_data_end+0xff010728>
   107a8:	0005883a 	mov	r2,zero
   107ac:	003fe106 	br	10734 <__alt_data_end+0xff010734>

000107b0 <memcmp>:
   107b0:	01c000c4 	movi	r7,3
   107b4:	3980192e 	bgeu	r7,r6,1081c <memcmp+0x6c>
   107b8:	2144b03a 	or	r2,r4,r5
   107bc:	11c4703a 	and	r2,r2,r7
   107c0:	10000f26 	beq	r2,zero,10800 <memcmp+0x50>
   107c4:	20800003 	ldbu	r2,0(r4)
   107c8:	28c00003 	ldbu	r3,0(r5)
   107cc:	10c0151e 	bne	r2,r3,10824 <memcmp+0x74>
   107d0:	31bfff84 	addi	r6,r6,-2
   107d4:	01ffffc4 	movi	r7,-1
   107d8:	00000406 	br	107ec <memcmp+0x3c>
   107dc:	20800003 	ldbu	r2,0(r4)
   107e0:	28c00003 	ldbu	r3,0(r5)
   107e4:	31bfffc4 	addi	r6,r6,-1
   107e8:	10c00e1e 	bne	r2,r3,10824 <memcmp+0x74>
   107ec:	21000044 	addi	r4,r4,1
   107f0:	29400044 	addi	r5,r5,1
   107f4:	31fff91e 	bne	r6,r7,107dc <__alt_data_end+0xff0107dc>
   107f8:	0005883a 	mov	r2,zero
   107fc:	f800283a 	ret
   10800:	20c00017 	ldw	r3,0(r4)
   10804:	28800017 	ldw	r2,0(r5)
   10808:	18bfee1e 	bne	r3,r2,107c4 <__alt_data_end+0xff0107c4>
   1080c:	31bfff04 	addi	r6,r6,-4
   10810:	21000104 	addi	r4,r4,4
   10814:	29400104 	addi	r5,r5,4
   10818:	39bff936 	bltu	r7,r6,10800 <__alt_data_end+0xff010800>
   1081c:	303fe91e 	bne	r6,zero,107c4 <__alt_data_end+0xff0107c4>
   10820:	003ff506 	br	107f8 <__alt_data_end+0xff0107f8>
   10824:	10c5c83a 	sub	r2,r2,r3
   10828:	f800283a 	ret

0001082c <__register_exitproc>:
   1082c:	defffa04 	addi	sp,sp,-24
   10830:	dc000315 	stw	r16,12(sp)
   10834:	04000074 	movhi	r16,1
   10838:	840b9504 	addi	r16,r16,11860
   1083c:	80c00017 	ldw	r3,0(r16)
   10840:	dc400415 	stw	r17,16(sp)
   10844:	dfc00515 	stw	ra,20(sp)
   10848:	18805217 	ldw	r2,328(r3)
   1084c:	2023883a 	mov	r17,r4
   10850:	10003726 	beq	r2,zero,10930 <__register_exitproc+0x104>
   10854:	10c00117 	ldw	r3,4(r2)
   10858:	010007c4 	movi	r4,31
   1085c:	20c00e16 	blt	r4,r3,10898 <__register_exitproc+0x6c>
   10860:	1a000044 	addi	r8,r3,1
   10864:	8800221e 	bne	r17,zero,108f0 <__register_exitproc+0xc4>
   10868:	18c00084 	addi	r3,r3,2
   1086c:	18c7883a 	add	r3,r3,r3
   10870:	18c7883a 	add	r3,r3,r3
   10874:	12000115 	stw	r8,4(r2)
   10878:	10c7883a 	add	r3,r2,r3
   1087c:	19400015 	stw	r5,0(r3)
   10880:	0005883a 	mov	r2,zero
   10884:	dfc00517 	ldw	ra,20(sp)
   10888:	dc400417 	ldw	r17,16(sp)
   1088c:	dc000317 	ldw	r16,12(sp)
   10890:	dec00604 	addi	sp,sp,24
   10894:	f800283a 	ret
   10898:	00800034 	movhi	r2,0
   1089c:	10881404 	addi	r2,r2,8272
   108a0:	10002626 	beq	r2,zero,1093c <__register_exitproc+0x110>
   108a4:	01006404 	movi	r4,400
   108a8:	d9400015 	stw	r5,0(sp)
   108ac:	d9800115 	stw	r6,4(sp)
   108b0:	d9c00215 	stw	r7,8(sp)
   108b4:	00020500 	call	2050 <malloc>
   108b8:	d9400017 	ldw	r5,0(sp)
   108bc:	d9800117 	ldw	r6,4(sp)
   108c0:	d9c00217 	ldw	r7,8(sp)
   108c4:	10001d26 	beq	r2,zero,1093c <__register_exitproc+0x110>
   108c8:	81000017 	ldw	r4,0(r16)
   108cc:	10000115 	stw	zero,4(r2)
   108d0:	02000044 	movi	r8,1
   108d4:	22405217 	ldw	r9,328(r4)
   108d8:	0007883a 	mov	r3,zero
   108dc:	12400015 	stw	r9,0(r2)
   108e0:	20805215 	stw	r2,328(r4)
   108e4:	10006215 	stw	zero,392(r2)
   108e8:	10006315 	stw	zero,396(r2)
   108ec:	883fde26 	beq	r17,zero,10868 <__alt_data_end+0xff010868>
   108f0:	18c9883a 	add	r4,r3,r3
   108f4:	2109883a 	add	r4,r4,r4
   108f8:	1109883a 	add	r4,r2,r4
   108fc:	21802215 	stw	r6,136(r4)
   10900:	01800044 	movi	r6,1
   10904:	12406217 	ldw	r9,392(r2)
   10908:	30cc983a 	sll	r6,r6,r3
   1090c:	4992b03a 	or	r9,r9,r6
   10910:	12406215 	stw	r9,392(r2)
   10914:	21c04215 	stw	r7,264(r4)
   10918:	01000084 	movi	r4,2
   1091c:	893fd21e 	bne	r17,r4,10868 <__alt_data_end+0xff010868>
   10920:	11006317 	ldw	r4,396(r2)
   10924:	218cb03a 	or	r6,r4,r6
   10928:	11806315 	stw	r6,396(r2)
   1092c:	003fce06 	br	10868 <__alt_data_end+0xff010868>
   10930:	18805304 	addi	r2,r3,332
   10934:	18805215 	stw	r2,328(r3)
   10938:	003fc606 	br	10854 <__alt_data_end+0xff010854>
   1093c:	00bfffc4 	movi	r2,-1
   10940:	003fd006 	br	10884 <__alt_data_end+0xff010884>

00010944 <__call_exitprocs>:
   10944:	defff504 	addi	sp,sp,-44
   10948:	df000915 	stw	fp,36(sp)
   1094c:	dd400615 	stw	r21,24(sp)
   10950:	dc800315 	stw	r18,12(sp)
   10954:	dfc00a15 	stw	ra,40(sp)
   10958:	ddc00815 	stw	r23,32(sp)
   1095c:	dd800715 	stw	r22,28(sp)
   10960:	dd000515 	stw	r20,20(sp)
   10964:	dcc00415 	stw	r19,16(sp)
   10968:	dc400215 	stw	r17,8(sp)
   1096c:	dc000115 	stw	r16,4(sp)
   10970:	d9000015 	stw	r4,0(sp)
   10974:	2839883a 	mov	fp,r5
   10978:	04800044 	movi	r18,1
   1097c:	057fffc4 	movi	r21,-1
   10980:	00800074 	movhi	r2,1
   10984:	108b9504 	addi	r2,r2,11860
   10988:	12000017 	ldw	r8,0(r2)
   1098c:	45005217 	ldw	r20,328(r8)
   10990:	44c05204 	addi	r19,r8,328
   10994:	a0001c26 	beq	r20,zero,10a08 <__call_exitprocs+0xc4>
   10998:	a0800117 	ldw	r2,4(r20)
   1099c:	15ffffc4 	addi	r23,r2,-1
   109a0:	b8000d16 	blt	r23,zero,109d8 <__call_exitprocs+0x94>
   109a4:	14000044 	addi	r16,r2,1
   109a8:	8421883a 	add	r16,r16,r16
   109ac:	8421883a 	add	r16,r16,r16
   109b0:	84402004 	addi	r17,r16,128
   109b4:	a463883a 	add	r17,r20,r17
   109b8:	a421883a 	add	r16,r20,r16
   109bc:	e0001e26 	beq	fp,zero,10a38 <__call_exitprocs+0xf4>
   109c0:	80804017 	ldw	r2,256(r16)
   109c4:	e0801c26 	beq	fp,r2,10a38 <__call_exitprocs+0xf4>
   109c8:	bdffffc4 	addi	r23,r23,-1
   109cc:	843fff04 	addi	r16,r16,-4
   109d0:	8c7fff04 	addi	r17,r17,-4
   109d4:	bd7ff91e 	bne	r23,r21,109bc <__alt_data_end+0xff0109bc>
   109d8:	00800034 	movhi	r2,0
   109dc:	10881904 	addi	r2,r2,8292
   109e0:	10000926 	beq	r2,zero,10a08 <__call_exitprocs+0xc4>
   109e4:	a0800117 	ldw	r2,4(r20)
   109e8:	1000301e 	bne	r2,zero,10aac <__call_exitprocs+0x168>
   109ec:	a0800017 	ldw	r2,0(r20)
   109f0:	10003226 	beq	r2,zero,10abc <__call_exitprocs+0x178>
   109f4:	a009883a 	mov	r4,r20
   109f8:	98800015 	stw	r2,0(r19)
   109fc:	00020640 	call	2064 <free>
   10a00:	9d000017 	ldw	r20,0(r19)
   10a04:	a03fe41e 	bne	r20,zero,10998 <__alt_data_end+0xff010998>
   10a08:	dfc00a17 	ldw	ra,40(sp)
   10a0c:	df000917 	ldw	fp,36(sp)
   10a10:	ddc00817 	ldw	r23,32(sp)
   10a14:	dd800717 	ldw	r22,28(sp)
   10a18:	dd400617 	ldw	r21,24(sp)
   10a1c:	dd000517 	ldw	r20,20(sp)
   10a20:	dcc00417 	ldw	r19,16(sp)
   10a24:	dc800317 	ldw	r18,12(sp)
   10a28:	dc400217 	ldw	r17,8(sp)
   10a2c:	dc000117 	ldw	r16,4(sp)
   10a30:	dec00b04 	addi	sp,sp,44
   10a34:	f800283a 	ret
   10a38:	a0800117 	ldw	r2,4(r20)
   10a3c:	80c00017 	ldw	r3,0(r16)
   10a40:	10bfffc4 	addi	r2,r2,-1
   10a44:	15c01426 	beq	r2,r23,10a98 <__call_exitprocs+0x154>
   10a48:	80000015 	stw	zero,0(r16)
   10a4c:	183fde26 	beq	r3,zero,109c8 <__alt_data_end+0xff0109c8>
   10a50:	95c8983a 	sll	r4,r18,r23
   10a54:	a0806217 	ldw	r2,392(r20)
   10a58:	a5800117 	ldw	r22,4(r20)
   10a5c:	2084703a 	and	r2,r4,r2
   10a60:	10000b26 	beq	r2,zero,10a90 <__call_exitprocs+0x14c>
   10a64:	a0806317 	ldw	r2,396(r20)
   10a68:	2088703a 	and	r4,r4,r2
   10a6c:	20000c1e 	bne	r4,zero,10aa0 <__call_exitprocs+0x15c>
   10a70:	89400017 	ldw	r5,0(r17)
   10a74:	d9000017 	ldw	r4,0(sp)
   10a78:	183ee83a 	callr	r3
   10a7c:	a0800117 	ldw	r2,4(r20)
   10a80:	15bfbf1e 	bne	r2,r22,10980 <__alt_data_end+0xff010980>
   10a84:	98800017 	ldw	r2,0(r19)
   10a88:	153fcf26 	beq	r2,r20,109c8 <__alt_data_end+0xff0109c8>
   10a8c:	003fbc06 	br	10980 <__alt_data_end+0xff010980>
   10a90:	183ee83a 	callr	r3
   10a94:	003ff906 	br	10a7c <__alt_data_end+0xff010a7c>
   10a98:	a5c00115 	stw	r23,4(r20)
   10a9c:	003feb06 	br	10a4c <__alt_data_end+0xff010a4c>
   10aa0:	89000017 	ldw	r4,0(r17)
   10aa4:	183ee83a 	callr	r3
   10aa8:	003ff406 	br	10a7c <__alt_data_end+0xff010a7c>
   10aac:	a0800017 	ldw	r2,0(r20)
   10ab0:	a027883a 	mov	r19,r20
   10ab4:	1029883a 	mov	r20,r2
   10ab8:	003fb606 	br	10994 <__alt_data_end+0xff010994>
   10abc:	0005883a 	mov	r2,zero
   10ac0:	003ffb06 	br	10ab0 <__alt_data_end+0xff010ab0>

00010ac4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10ac4:	defffd04 	addi	sp,sp,-12
   10ac8:	df000215 	stw	fp,8(sp)
   10acc:	df000204 	addi	fp,sp,8
   10ad0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10ad4:	0001883a 	nop
   10ad8:	e0bfff17 	ldw	r2,-4(fp)
   10adc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10ae0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10ae4:	10000226 	beq	r2,zero,10af0 <_exit+0x2c>
    ALT_SIM_FAIL();
   10ae8:	002af070 	cmpltui	zero,zero,43969
   10aec:	00000106 	br	10af4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10af0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10af4:	003fff06 	br	10af4 <__alt_data_end+0xff010af4>
