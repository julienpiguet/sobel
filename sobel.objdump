
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001171c memsz 0x0001171c flags r-x
    LOAD off    0x0001273c vaddr 0x0001173c paddr 0x00013328 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014f14 vaddr 0x00014f14 paddr 0x00014f14 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d3c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00010f80  00010f80  00011f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  0001173c  00013328  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00014f14  00014f14  00014f14  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000150c4  000150c4  00014328  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014328  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  00014350  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000267e6  00000000  00000000  000153a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c50  00000000  00000000  0003bb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c444  00000000  00000000  000457d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025e8  00000000  00000000  00051c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003dec  00000000  00000000  00054204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018dd7  00000000  00000000  00057ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00070dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001968  00000000  00000000  00070e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007628e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076291  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007629d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007629e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007629f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000762a3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000762a7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000762ab  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000762b4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000762bd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000762c6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000762d1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00076309  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00075d3a  00000000  00000000  0007bde1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010f80 l    d  .rodata	00000000 .rodata
0001173c l    d  .rwdata	00000000 .rwdata
00014f14 l    d  .bss	00000000 .bss
000150c4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001158a l     O .rodata	00000010 zeroes.4404
000053ec l     F .text	000000bc __sbprintf
0001159a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000055fc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000712c l     F .text	00000008 __fp_unlock
00007140 l     F .text	0000019c __sinit.part.1
000072dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011c44 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012088 l     O .rwdata	00000020 lc_ctype_charset
00012068 l     O .rwdata	00000020 lc_message_charset
000120a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000115cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009e78 l     F .text	000000fc __sprint_r.part.0
00011700 l     O .rodata	00000010 blanks.4348
000116f0 l     O .rodata	00000010 zeroes.4349
0000b404 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e518 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e624 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e73c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e81c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eadc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013318 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ed58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ee8c l     F .text	00000034 alt_dev_reg
00012288 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f198 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f3a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f9dc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000feb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010328 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010468 l     F .text	0000003c alt_get_errno
000104a4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014f98 g     O .bss	00000004 alt_instruction_exception_handler
00009510 g     F .text	00000074 _mprec_log10
000095fc g     F .text	0000008c __any_on
0000b9a0 g     F .text	00000054 _isatty_r
000115d8 g     O .rodata	00000028 __mprec_tinytens
0000ea18 g     F .text	0000007c alt_main
00003018 g     F .text	000000c0 _puts_r
00014fc4 g     O .bss	00000100 alt_irq
0000b9f4 g     F .text	00000060 _lseek_r
00011434 g     O .rodata	00000009 gy_array
00013328 g       *ABS*	00000000 __flash_rwdata_start
0000d150 g     F .text	00000088 .hidden __eqdf2
000150c4 g       *ABS*	00000000 __alt_heap_start
00002fdc g     F .text	0000003c printf
0000bc0c g     F .text	0000009c _wcrtomb_r
00009d38 g     F .text	0000005c __sseek
0000747c g     F .text	00000010 __sinit
0000bab4 g     F .text	00000140 __swbuf_r
00007f44 g     F .text	0000007c _setlocale_r
000072e4 g     F .text	00000068 __sfmoreglue
0000eab8 g     F .text	00000024 __malloc_unlock
000009dc g     F .text	00000014 LCD_Write_Command
00014f44 g     O .bss	00000004 sobel_width
00014f30 g     O .bss	00000004 start_all
00014f88 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008408 g     F .text	0000015c memmove
000009f0 g     F .text	00000014 LCD_Write_Data
00007464 g     F .text	00000018 _cleanup
00014f3c g     O .bss	00000004 end_sobel
0000868c g     F .text	000000a8 _Balloc
0000d1d8 g     F .text	000000dc .hidden __gtdf2
00010860 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b944 g     F .text	0000005c _fstat_r
00014f68 g     O .bss	00000004 errno
00009cb4 g     F .text	00000008 __seofread
00014f7c g     O .bss	00000004 alt_argv
0001b2e8 g       *ABS*	00000000 _gp
0000ed28 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
00012108 g     O .rwdata	00000180 alt_fd_list
00001bb0 g     F .text	00000010 vga_set_pointer
00010884 g     F .text	00000090 alt_find_dev
000082c0 g     F .text	00000148 memcpy
00007134 g     F .text	0000000c _cleanup_r
0000e43c g     F .text	000000dc .hidden __floatsidf
000103ec g     F .text	0000007c alt_io_redirect
00014f2c g     O .bss	00000004 end_all
0000d2b4 g     F .text	000000f4 .hidden __ltdf2
00010f80 g       *ABS*	00000000 __DTOR_END__
000030d8 g     F .text	00000014 puts
00010b50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009bec g     F .text	00000074 __fpclassifyd
0000946c g     F .text	000000a4 __ratio
0000b3e8 g     F .text	0000001c __vfiprintf_internal
0000f59c g     F .text	0000021c altera_avalon_jtag_uart_read
00002778 g     F .text	00000014 malloc
00002fac g     F .text	00000030 _printf_r
00000830 g     F .text	00000008 get_grayscale_picture
00001cc8 g     F .text	00000064 .hidden __udivsi3
00010fe0 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e778 g     F .text	000000a4 isatty
00011628 g     O .rodata	000000c8 __mprec_tens
00007fc0 g     F .text	0000000c __locale_charset
00010ac0 g     F .text	00000090 alt_icache_flush
00014f64 g     O .bss	00000004 __malloc_top_pad
000132f8 g     O .rwdata	00000004 __mb_cur_max
00007ff0 g     F .text	0000000c _localeconv_r
0000142c g     F .text	00000140 sobel_x
00008a98 g     F .text	0000003c __i2b
00007900 g     F .text	000004bc __sfvwrite_r
00000a04 g     F .text	00000414 init_LCD
000030ec g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000ba54 g     F .text	00000060 _read_r
00014f48 g     O .bss	00000004 sobel_result
00013310 g     O .rwdata	00000004 alt_max_fd
0000b638 g     F .text	000000f0 _fclose_r
000070fc g     F .text	00000030 fflush
00014f60 g     O .bss	00000004 __malloc_max_sbrked_mem
00014f1c g     O .bss	00000004 grayscale_array
0000c8a4 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00009214 g     F .text	0000010c __b2d
0000c36c g     F .text	00000538 .hidden __umoddi3
0000e944 g     F .text	000000d4 lseek
000008f8 g     F .text	0000008c i2c_short_read
000132f0 g     O .rwdata	00000004 _global_impure_ptr
00009688 g     F .text	00000564 _realloc_r
000150c4 g       *ABS*	00000000 __bss_end
00010238 g     F .text	000000f0 alt_iic_isr_register
00010758 g     F .text	00000108 alt_tick
0000bdf4 g     F .text	00000578 .hidden __udivdi3
0000b8a0 g     F .text	00000024 _fputwc_r
00011600 g     O .rodata	00000028 __mprec_bigtens
0000887c g     F .text	00000104 __s2b
0000266c g     F .text	000000a8 .hidden __floatunsidf
00008f54 g     F .text	00000060 __mcmp
0000749c g     F .text	00000018 __fp_lock_all
000101ec g     F .text	0000004c alt_ic_irq_enabled
00014f14 g     O .bss	00000004 grayscape_height
000106bc g     F .text	0000009c alt_alarm_stop
00014f8c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000120e0 g     O .rwdata	00000028 alt_dev_null
00000ea4 g     F .text	00000078 transfer_LCD_with_dma
00001a1c g     F .text	00000184 sobel_complete
0000fe6c g     F .text	00000048 alt_dcache_flush_all
00008980 g     F .text	00000068 __hi0bits
0000e3bc g     F .text	00000080 .hidden __fixdfsi
00013328 g       *ABS*	00000000 __ram_rwdata_end
00013308 g     O .rwdata	00000008 alt_dev_list
0000ed94 g     F .text	000000f8 write
0000fbc8 g     F .text	00000020 alt_timestamp_freq
0001173c g       *ABS*	00000000 __ram_rodata_end
0000e68c g     F .text	000000b0 fstat
0000d2b4 g     F .text	000000f4 .hidden __ledf2
00008ccc g     F .text	00000140 __pow5mult
00009f8c g     F .text	0000145c ___vfiprintf_internal_r
00014f74 g     O .bss	00000004 __nlocale_changed
00001d2c g     F .text	00000058 .hidden __umodsi3
00001ba0 g     F .text	00000008 GetSobel_rgb
000150c4 g       *ABS*	00000000 end
00001ba8 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001800 g     F .text	00000168 sobel_y_with_rgb
0000f0d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00010f80 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fa54 g     F .text	0000007c alt_avalon_timer_sc_init
00002714 g     F .text	00000064 .hidden __clzsi2
0000f7b8 g     F .text	00000224 altera_avalon_jtag_uart_write
0000748c g     F .text	00000004 __sfp_lock_acquire
000081dc g     F .text	000000e4 memchr
000031d8 g     F .text	000021f8 ___vfprintf_internal_r
000075f0 g     F .text	00000310 _free_r
00007fcc g     F .text	00000010 __locale_mb_cur_max
000016e8 g     F .text	00000118 sobel_y
00011108 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010dcc g     F .text	00000180 __call_exitprocs
00014f70 g     O .bss	00000004 __mlocale_changed
000132e8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014f34 g     O .bss	00000004 end_conv_grayscale
00014f90 g     O .bss	00000004 _alt_tick_rate
00008e0c g     F .text	00000148 __lshift
00014f94 g     O .bss	00000004 _alt_nticks
0000eb18 g     F .text	000000fc read
0000eef8 g     F .text	0000007c alt_sys_init
0000156c g     F .text	0000017c sobel_x_with_rgb
00010cb4 g     F .text	00000118 __register_exitproc
00008ad4 g     F .text	000001f8 __multiply
0000f444 g     F .text	00000068 altera_avalon_jtag_uart_close
0001173c g       *ABS*	00000000 __ram_rwdata_start
00010f80 g       *ABS*	00000000 __ram_rodata_start
00014f9c g     O .bss	00000028 __malloc_current_mallinfo
00009320 g     F .text	0000014c __d2b
00014f4c g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000ef74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001278 g     F .text	000000f8 init_sobel_arrays
00010a1c g     F .text	000000a4 alt_get_fd
0000fd14 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b520 g     F .text	00000054 _close_r
00010c38 g     F .text	0000007c memcmp
0000f034 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000150c4 g       *ABS*	00000000 __alt_stack_base
0000f084 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000054a8 g     F .text	00000154 __swsetup_r
00001d84 g     F .text	000008e8 .hidden __divdf3
0000734c g     F .text	00000118 __sfp
00009584 g     F .text	00000078 __copybits
0001183c g     O .rwdata	00000408 __malloc_av_
00007498 g     F .text	00000004 __sinit_lock_release
0000d3a8 g     F .text	00000718 .hidden __muldf3
00009c60 g     F .text	00000054 __sread
00010914 g     F .text	00000108 alt_find_file
0000fef0 g     F .text	000000a4 alt_dev_llist_insert
0000ea94 g     F .text	00000024 __malloc_lock
0000ec78 g     F .text	000000b0 sbrk
000070a0 g     F .text	0000005c _fflush_r
0000b574 g     F .text	000000c4 _calloc_r
00014f28 g     O .bss	00000004 start_global
0001173c g     O .rwdata	00000100 .hidden __divsi3_table
00014f14 g       *ABS*	00000000 __bss_start
00008564 g     F .text	00000128 memset
00000f1c g     F .text	0000035c main
00014f80 g     O .bss	00000004 alt_envp
00014f5c g     O .bss	00000004 __malloc_max_total_mem
00000820 g     F .text	00000008 get_grayscale_width
0000efd4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000bbf4 g     F .text	00000018 __swbuf
00014f50 g     O .bss	00000004 sobel_x_result
00009d94 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b728 g     F .text	00000014 fclose
0000fad0 g     F .text	00000078 alt_timestamp_start
000057fc g     F .text	00001688 _dtoa_r
000027a0 g     F .text	0000080c _malloc_r
0000bd68 g     F .text	00000030 __ascii_wctomb
00013314 g     O .rwdata	00000004 alt_errno
00007dbc g     F .text	000000c4 _fwalk
00014f40 g     O .bss	00000004 start_sobel
00001bd0 g     F .text	00000084 .hidden __divsi3
000074cc g     F .text	00000124 _malloc_trim_r
00010f80 g       *ABS*	00000000 __CTOR_END__
00014f18 g     O .bss	00000004 grayscale_width
00009d9c g     F .text	000000dc strcmp
00000e18 g     F .text	0000008c transfer_LCD_no_dma
00010f80 g       *ABS*	00000000 __flash_rodata_start
00010f80 g       *ABS*	00000000 __DTOR_LIST__
0000d150 g     F .text	00000088 .hidden __nedf2
00011248 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eec0 g     F .text	00000038 alt_irq_init
0000ec14 g     F .text	00000064 alt_release_fd
00000850 g     F .text	000000a8 i2c_auto_detect
00011446 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014f6c g     O .bss	00000004 _PathLocale
00000838 g     F .text	00000018 i2c_busy_wait
00010bec g     F .text	00000014 atexit
0000b4c0 g     F .text	00000060 _write_r
00007ffc g     F .text	00000018 setlocale
000132f4 g     O .rwdata	00000004 _impure_ptr
00014f78 g     O .bss	00000004 alt_argc
00006e84 g     F .text	0000021c __sflush_r
00014f84 g     O .bss	00000004 altera_avalon_timer_ts_base
0000fff4 g     F .text	00000060 _do_dtors
00007fe8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000091b0 g     F .text	00000064 __ulp
000074b4 g     F .text	00000018 __fp_unlock_all
00013300 g     O .rwdata	00000008 alt_fs_list
00014f54 g     O .bss	00000004 sobel_y_result
00000984 g     F .text	00000058 i2c_short_write
00014f38 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f20 g     O .bss	00000002 LCD_height
00008014 g     F .text	0000000c localeconv
0000fb48 g     F .text	00000080 alt_timestamp
00001bc0 g     F .text	00000010 vga_set_swap
00010088 g     F .text	00000050 alt_ic_isr_register
00001968 g     F .text	000000b4 sobel_threshold
00013328 g       *ABS*	00000000 _edata
000150c4 g       *ABS*	00000000 _end
0000b73c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f4ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001143d g     O .rodata	00000009 gx_array
00010160 g     F .text	0000008c alt_ic_irq_disable
00009cbc g     F .text	0000007c __swrite
000132ec g     O .rwdata	00000004 __malloc_trim_threshold
00014f22 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000ac conv_grayscale
00007fdc g     F .text	0000000c __locale_msgcharset
00010c00 g     F .text	00000038 exit
00007e80 g     F .text	000000c4 _fwalk_reent
00008fb4 g     F .text	000001fc __mdiff
00001c54 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007490 g     F .text	00000004 __sfp_lock_release
00000828 g     F .text	00000008 get_grayscale_height
00010f4c g     F .text	00000034 _exit
00001370 g     F .text	000000bc sobel_mac
0000fbe8 g     F .text	0000012c alt_alarm_start
00008020 g     F .text	000001bc __smakebuf_r
00014f58 g     O .bss	00000004 sobel_rgb565
00003140 g     F .text	00000098 strlen
00010568 g     F .text	00000154 open
0000d1d8 g     F .text	000000dc .hidden __gedf2
000132fc g     O .rwdata	00000004 __wctomb
00009f74 g     F .text	00000018 __sprint_r
00010054 g     F .text	00000034 alt_icache_flush_all
0001331c g     O .rwdata	00000004 alt_priority_mask
000100d8 g     F .text	00000088 alt_ic_irq_enable
000053d0 g     F .text	0000001c __vfprintf_internal
0000bd98 g     F .text	0000005c _wctomb_r
0000dac0 g     F .text	000008fc .hidden __subdf3
000089e8 g     F .text	000000b0 __lo0bits
00013320 g     O .rwdata	00000008 alt_alarm_list
0000ff94 g     F .text	00000060 _do_ctors
0000bca8 g     F .text	000000c0 wcrtomb
0000e554 g     F .text	000000d0 close
00014f24 g     O .bss	00000004 end_global
0000e884 g     F .text	00000084 alt_load
0000b8c4 g     F .text	00000080 fputwc
0000278c g     F .text	00000014 free
00007494 g     F .text	00000004 __sinit_lock_acquire
0000875c g     F .text	00000120 __multadd
00008734 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1093f104 	addi	r2,r2,20420
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1093f104 	addi	r2,r2,20420
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72c17 	ldw	r2,-25424(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72c17 	ldw	r2,-25424(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6acba14 	ori	gp,gp,45800
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	1093c514 	ori	r2,r2,20244

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d43114 	ori	r3,r3,20676

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e8840 	call	e884 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ea180 	call	ea18 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009840 	call	984 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009840 	call	984 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009840 	call	984 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84049204 	addi	r16,r16,4680
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009840 	call	984 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009840 	call	984 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84044204 	addi	r16,r16,4360
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009840 	call	984 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009840 	call	984 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009840 	call	984 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009840 	call	984 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009840 	call	984 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009840 	call	984 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	8403f804 	addi	r16,r16,4064
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009840 	call	984 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009840 	call	984 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009840 	call	984 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009841 	jmpi	984 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2103e004 	addi	r4,r4,3968
     620:	297fffcc 	andi	r5,r5,65535
     624:	0002fdc0 	call	2fdc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2103e804 	addi	r4,r4,4000
     63c:	297fffcc 	andi	r5,r5,65535
     640:	0002fdc0 	call	2fdc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2103f004 	addi	r4,r4,4032
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	0002fdc1 	jmpi	2fdc <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
     78c:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     790:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     794:	2821883a 	mov	r16,r5
     798:	3025883a 	mov	r18,r6
     79c:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
		free(grayscale_array);
     7a4:	1009883a 	mov	r4,r2
     7a8:	000278c0 	call	278c <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7ac:	8489383a 	mul	r4,r16,r18
     7b0:	00027780 	call	2778 <malloc>
     7b4:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     7b8:	0480130e 	bge	zero,r18,808 <conv_grayscale+0x94>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	8809883a 	mov	r4,r17
     7c4:	8013883a 	mov	r9,r16
     7c8:	000b883a 	mov	r5,zero
		for (x = 0 ; x < width ; x++) {
     7cc:	04000a0e 	bge	zero,r16,7f8 <conv_grayscale+0x84>
     7d0:	4c05c83a 	sub	r2,r9,r16
     7d4:	2011883a 	mov	r8,r4
			gray = ALT_CI_RGB2GRAY_0(pixels[y*width+x]);
     7d8:	41c0000b 	ldhu	r7,0(r8)
     7dc:	380fc032 	custom	0,r7,r7,zero
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e0:	d0e70d17 	ldw	r3,-25548(gp)
     7e4:	1887883a 	add	r3,r3,r2
     7e8:	19c00025 	stbio	r7,0(r3)
     7ec:	10800044 	addi	r2,r2,1
     7f0:	42000084 	addi	r8,r8,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7f4:	48bff81e 	bne	r9,r2,7d8 <__alt_data_end+0xff0007d8>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7f8:	29400044 	addi	r5,r5,1
     7fc:	2189883a 	add	r4,r4,r6
     800:	4c13883a 	add	r9,r9,r16
     804:	917ff11e 	bne	r18,r5,7cc <__alt_data_end+0xff0007cc>
		for (x = 0 ; x < width ; x++) {
			gray = ALT_CI_RGB2GRAY_0(pixels[y*width+x]);
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     808:	dfc00317 	ldw	ra,12(sp)
     80c:	dc800217 	ldw	r18,8(sp)
     810:	dc400117 	ldw	r17,4(sp)
     814:	dc000017 	ldw	r16,0(sp)
     818:	dec00404 	addi	sp,sp,16
     81c:	f800283a 	ret

00000820 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     820:	d0a70c17 	ldw	r2,-25552(gp)
     824:	f800283a 	ret

00000828 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     828:	d0a70b17 	ldw	r2,-25556(gp)
     82c:	f800283a 	ret

00000830 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     830:	d0a70d17 	ldw	r2,-25548(gp)
     834:	f800283a 	ret

00000838 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	00c04034 	movhi	r3,256
     83c:	18c42704 	addi	r3,r3,4252
     840:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     844:	108000cc 	andi	r2,r2,3
     848:	103ffd1e 	bne	r2,zero,840 <__alt_data_end+0xff000840>
}
     84c:	f800283a 	ret

00000850 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     850:	01004034 	movhi	r4,256
     854:	21042704 	addi	r4,r4,4252
     858:	00c04034 	movhi	r3,256
     85c:	18c42704 	addi	r3,r3,4252
     860:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     864:	108000cc 	andi	r2,r2,3
     868:	103ffb1e 	bne	r2,zero,858 <__alt_data_end+0xff000858>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     86c:	00800104 	movi	r2,4
     870:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     874:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <__alt_data_end+0xff000874>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     880:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     884:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     888:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     88c:	dfc00315 	stw	ra,12(sp)
     890:	dc800215 	stw	r18,8(sp)
     894:	dc400115 	stw	r17,4(sp)
     898:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     89c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8a0:	01000074 	movhi	r4,1
     8a4:	2104d804 	addi	r4,r4,4960
     8a8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8ac:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8b0:	0002fdc0 	call	2fdc <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8b4:	04800a0e 	bge	zero,r18,8e0 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8b8:	04404034 	movhi	r17,256
     8bc:	8c442404 	addi	r17,r17,4240
     8c0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8c4:	89800037 	ldwio	r6,0(r17)
     8c8:	01000074 	movhi	r4,1
     8cc:	800b883a 	mov	r5,r16
     8d0:	2104e104 	addi	r4,r4,4996
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8d4:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8d8:	0002fdc0 	call	2fdc <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8dc:	943ff81e 	bne	r18,r16,8c0 <__alt_data_end+0xff0008c0>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8e0:	dfc00317 	ldw	ra,12(sp)
     8e4:	dc800217 	ldw	r18,8(sp)
     8e8:	dc400117 	ldw	r17,4(sp)
     8ec:	dc000017 	ldw	r16,0(sp)
     8f0:	dec00404 	addi	sp,sp,16
     8f4:	f800283a 	ret

000008f8 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f8:	01804034 	movhi	r6,256
     8fc:	31842704 	addi	r6,r6,4252
     900:	00c04034 	movhi	r3,256
     904:	18c42704 	addi	r3,r3,4252
     908:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     90c:	108000cc 	andi	r2,r2,3
     910:	103ffb1e 	bne	r2,zero,900 <__alt_data_end+0xff000900>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     914:	00804034 	movhi	r2,256
     918:	21003fcc 	andi	r4,r4,255
     91c:	10842404 	addi	r2,r2,4240
     920:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     924:	00804034 	movhi	r2,256
     928:	10842504 	addi	r2,r2,4244
     92c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     930:	008010c4 	movi	r2,67
     934:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     938:	180b883a 	mov	r5,r3
     93c:	00c04034 	movhi	r3,256
     940:	18c42704 	addi	r3,r3,4252
     944:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     948:	108000cc 	andi	r2,r2,3
     94c:	103ffb1e 	bne	r2,zero,93c <__alt_data_end+0xff00093c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     950:	00804034 	movhi	r2,256
     954:	21000044 	addi	r4,r4,1
     958:	10842404 	addi	r2,r2,4240
     95c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     960:	00800884 	movi	r2,34
     964:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     968:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     96c:	108000cc 	andi	r2,r2,3
     970:	103ffd1e 	bne	r2,zero,968 <__alt_data_end+0xff000968>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     974:	00804034 	movhi	r2,256
     978:	10842604 	addi	r2,r2,4248
}
     97c:	10800037 	ldwio	r2,0(r2)
     980:	f800283a 	ret

00000984 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     984:	01c04034 	movhi	r7,256
     988:	39c42704 	addi	r7,r7,4252
     98c:	00c04034 	movhi	r3,256
     990:	18c42704 	addi	r3,r3,4252
     994:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     998:	108000cc 	andi	r2,r2,3
     99c:	103ffb1e 	bne	r2,zero,98c <__alt_data_end+0xff00098c>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9a0:	00804034 	movhi	r2,256
     9a4:	10842404 	addi	r2,r2,4240
     9a8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9ac:	00804034 	movhi	r2,256
     9b0:	10842504 	addi	r2,r2,4244
     9b4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9b8:	00804034 	movhi	r2,256
     9bc:	10842604 	addi	r2,r2,4248
     9c0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9c4:	00801084 	movi	r2,66
     9c8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9cc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9d0:	108000cc 	andi	r2,r2,3
     9d4:	103ffd1e 	bne	r2,zero,9cc <__alt_data_end+0xff0009cc>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9d8:	f800283a 	ret

000009dc <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9dc:	00804034 	movhi	r2,256
     9e0:	10841804 	addi	r2,r2,4192
     9e4:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9e8:	01000284 	movi	r4,10
     9ec:	000ed281 	jmpi	ed28 <usleep>

000009f0 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	00804034 	movhi	r2,256
     9f4:	10841904 	addi	r2,r2,4196
     9f8:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9fc:	01000284 	movi	r4,10
     a00:	000ed281 	jmpi	ed28 <usleep>

00000a04 <init_LCD>:
}


void init_LCD() {
     a04:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a08:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a0c:	dd400515 	stw	r21,20(sp)
     a10:	dfc00815 	stw	ra,32(sp)
     a14:	ddc00715 	stw	r23,28(sp)
     a18:	dd800615 	stw	r22,24(sp)
     a1c:	dd000415 	stw	r20,16(sp)
     a20:	dcc00315 	stw	r19,12(sp)
     a24:	dc800215 	stw	r18,8(sp)
     a28:	dc400115 	stw	r17,4(sp)
     a2c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a30:	05400084 	movi	r21,2
     a34:	10841a04 	addi	r2,r2,4200
     a38:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a3c:	04804034 	movhi	r18,256
     a40:	94841804 	addi	r18,r18,4192
     a44:	00800a04 	movi	r2,40
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	04000284 	movi	r16,10
     a50:	8009883a 	mov	r4,r16
     a54:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a58:	05c00444 	movi	r23,17
     a5c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a60:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	04404034 	movhi	r17,256
     a68:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a6c:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a70:	0027883a 	mov	r19,zero
     a74:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a78:	8009883a 	mov	r4,r16
     a7c:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a80:	008032c4 	movi	r2,203
     a84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a88:	8009883a 	mov	r4,r16
     a8c:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00800e44 	movi	r2,57
     a94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	00800b04 	movi	r2,44
     aa4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00800d04 	movi	r2,52
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ad0:	8009883a 	mov	r4,r16
     ad4:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ad8:	008033c4 	movi	r2,207
     adc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af4:	05802044 	movi	r22,129
     af8:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	00800c04 	movi	r2,48
     b08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b14:	00803a04 	movi	r2,232
     b18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	00802144 	movi	r2,133
     b28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b2c:	8009883a 	mov	r4,r16
     b30:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b34:	05000044 	movi	r20,1
     b38:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b3c:	8009883a 	mov	r4,r16
     b40:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b44:	00801e44 	movi	r2,121
     b48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803a84 	movi	r2,234
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b68:	8009883a 	mov	r4,r16
     b6c:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b74:	8009883a 	mov	r4,r16
     b78:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b7c:	00801904 	movi	r2,100
     b80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b84:	8009883a 	mov	r4,r16
     b88:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b8c:	008000c4 	movi	r2,3
     b90:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b94:	8009883a 	mov	r4,r16
     b98:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b9c:	00800484 	movi	r2,18
     ba0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba4:	8009883a 	mov	r4,r16
     ba8:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bac:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb8:	00803dc4 	movi	r2,247
     bbc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc8:	00800804 	movi	r2,32
     bcc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd8:	00803004 	movi	r2,192
     bdc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be0:	8009883a 	mov	r4,r16
     be4:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be8:	05800984 	movi	r22,38
     bec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bf0:	8009883a 	mov	r4,r16
     bf4:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf8:	00800104 	movi	r2,4
     bfc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c00:	8009883a 	mov	r4,r16
     c04:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c08:	00803044 	movi	r2,193
     c0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c10:	8009883a 	mov	r4,r16
     c14:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c18:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c1c:	8009883a 	mov	r4,r16
     c20:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c24:	00803144 	movi	r2,197
     c28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c2c:	8009883a 	mov	r4,r16
     c30:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c34:	00800d44 	movi	r2,53
     c38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	00800f84 	movi	r2,62
     c48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c54:	008031c4 	movi	r2,199
     c58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c5c:	8009883a 	mov	r4,r16
     c60:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c64:	00802f84 	movi	r2,190
     c68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c6c:	8009883a 	mov	r4,r16
     c70:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c74:	00802c44 	movi	r2,177
     c78:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c7c:	8009883a 	mov	r4,r16
     c80:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c84:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c88:	8009883a 	mov	r4,r16
     c8c:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c90:	00800404 	movi	r2,16
     c94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca0:	00800e84 	movi	r2,58
     ca4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00801544 	movi	r2,85
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00802d84 	movi	r2,182
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	00802884 	movi	r2,162
     ce0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce4:	8009883a 	mov	r4,r16
     ce8:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cec:	00803c84 	movi	r2,242
     cf0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf4:	8009883a 	mov	r4,r16
     cf8:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cfc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d00:	8009883a 	mov	r4,r16
     d04:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d08:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d14:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
     d1c:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800d84 	movi	r2,54
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d3c:	00800a84 	movi	r2,42
     d40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d44:	8009883a 	mov	r4,r16
     d48:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d4c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d58:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	00803bc4 	movi	r2,239
     d74:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000ed280 	call	ed28 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00800ac4 	movi	r2,43
     d84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d88:	8009883a 	mov	r4,r16
     d8c:	000ed280 	call	ed28 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000ed280 	call	ed28 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	00800fc4 	movi	r2,63
     db8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000ed280 	call	ed28 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dc4:	00c04034 	movhi	r3,256
     dc8:	00803c04 	movi	r2,240
     dcc:	18c41d04 	addi	r3,r3,4212
     dd0:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dd4:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     dd8:	00805004 	movi	r2,320
     ddc:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     de0:	00800a44 	movi	r2,41
     de4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de8:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     dec:	dfc00817 	ldw	ra,32(sp)
     df0:	ddc00717 	ldw	r23,28(sp)
     df4:	dd800617 	ldw	r22,24(sp)
     df8:	dd400517 	ldw	r21,20(sp)
     dfc:	dd000417 	ldw	r20,16(sp)
     e00:	dcc00317 	ldw	r19,12(sp)
     e04:	dc800217 	ldw	r18,8(sp)
     e08:	dc400117 	ldw	r17,4(sp)
     e0c:	dc000017 	ldw	r16,0(sp)
     e10:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e14:	000ed281 	jmpi	ed28 <usleep>

00000e18 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e18:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e1c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e20:	dc000015 	stw	r16,0(sp)
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	dcc00315 	stw	r19,12(sp)
     e2c:	dc800215 	stw	r18,8(sp)
     e30:	dc400115 	stw	r17,4(sp)
     e34:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e38:	10841e04 	addi	r2,r2,4216
     e3c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e40:	00804034 	movhi	r2,256
     e44:	10841804 	addi	r2,r2,4192
     e48:	00c00b04 	movi	r3,44
     e4c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e50:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e54:	01000284 	movi	r4,10
     e58:	000ed280 	call	ed28 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e5c:	90000a26 	beq	r18,zero,e88 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e60:	04c04034 	movhi	r19,256
     e64:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e68:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e6c:	8080000b 	ldhu	r2,0(r16)
     e70:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e74:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e78:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e7c:	000ed280 	call	ed28 <usleep>
     e80:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e84:	8cbff91e 	bne	r17,r18,e6c <__alt_data_end+0xff000e6c>
		LCD_Write_Data(data_array[pixels]);
}
     e88:	dfc00417 	ldw	ra,16(sp)
     e8c:	dcc00317 	ldw	r19,12(sp)
     e90:	dc800217 	ldw	r18,8(sp)
     e94:	dc400117 	ldw	r17,4(sp)
     e98:	dc000017 	ldw	r16,0(sp)
     e9c:	dec00504 	addi	sp,sp,20
     ea0:	f800283a 	ret

00000ea4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ea4:	d0a70e0b 	ldhu	r2,-25544(gp)
     ea8:	3080010e 	bge	r6,r2,eb0 <transfer_LCD_with_dma+0xc>
     eac:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     eb0:	d0e70e8b 	ldhu	r3,-25542(gp)
     eb4:	28c0010e 	bge	r5,r3,ebc <transfer_LCD_with_dma+0x18>
     eb8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	01804034 	movhi	r6,256
     ec0:	31841e04 	addi	r6,r6,4216
     ec4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     ec8:	01404034 	movhi	r5,256
     ecc:	29441b04 	addi	r5,r5,4204
     ed0:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ed4:	18ffffcc 	andi	r3,r3,65535
     ed8:	10bfffcc 	andi	r2,r2,65535
     edc:	1885383a 	mul	r2,r3,r2
     ee0:	00c04034 	movhi	r3,256
     ee4:	18c41c04 	addi	r3,r3,4208
     ee8:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     eec:	39c03fcc 	andi	r7,r7,255
     ef0:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ef4:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ef8:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     efc:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f00:	38000326 	beq	r7,zero,f10 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f04:	00c04404 	movi	r3,272
     f08:	10c0002d 	sthio	r3,0(r2)
     f0c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f10:	00c04004 	movi	r3,256
     f14:	10c0002d 	sthio	r3,0(r2)
     f18:	f800283a 	ret

00000f1c <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f1c:	defff804 	addi	sp,sp,-32
     f20:	dfc00715 	stw	ra,28(sp)
     f24:	dd800615 	stw	r22,24(sp)
     f28:	dd400515 	stw	r21,20(sp)
     f2c:	dd000415 	stw	r20,16(sp)
     f30:	dcc00315 	stw	r19,12(sp)
     f34:	dc800215 	stw	r18,8(sp)
     f38:	dc400115 	stw	r17,4(sp)
     f3c:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     f40:	0000a040 	call	a04 <init_LCD>
  init_camera();
     f44:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f48:	01000604 	movi	r4,24
     f4c:	0001bc00 	call	1bc0 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f50:	01000074 	movhi	r4,1
     f54:	2104ea04 	addi	r4,r4,5032
     f58:	00030d80 	call	30d8 <puts>
  cam_get_profiling();
     f5c:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f60:	00005a80 	call	5a8 <cam_get_xsize>
     f64:	1021883a 	mov	r16,r2
     f68:	00005cc0 	call	5cc <cam_get_ysize>
     f6c:	10bfffcc 	andi	r2,r2,65535
     f70:	813fffcc 	andi	r4,r16,65535
     f74:	2089383a 	mul	r4,r4,r2
     f78:	05000074 	movhi	r20,1
     f7c:	a505cf04 	addi	r20,r20,5948
     f80:	00027780 	call	2778 <malloc>
     f84:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f88:	00005a80 	call	5a8 <cam_get_xsize>
     f8c:	1021883a 	mov	r16,r2
     f90:	00005cc0 	call	5cc <cam_get_ysize>
     f94:	10bfffcc 	andi	r2,r2,65535
     f98:	813fffcc 	andi	r4,r16,65535
     f9c:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     fa0:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
     fa4:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fa8:	00027780 	call	2778 <malloc>
     fac:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb0:	00005a80 	call	5a8 <cam_get_xsize>
     fb4:	1021883a 	mov	r16,r2
     fb8:	00005cc0 	call	5cc <cam_get_ysize>
     fbc:	10bfffcc 	andi	r2,r2,65535
     fc0:	813fffcc 	andi	r4,r16,65535
     fc4:	2089383a 	mul	r4,r4,r2
     fc8:	00027780 	call	2778 <malloc>
     fcc:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd0:	00005a80 	call	5a8 <cam_get_xsize>
     fd4:	1021883a 	mov	r16,r2
     fd8:	00005cc0 	call	5cc <cam_get_ysize>
     fdc:	10bfffcc 	andi	r2,r2,65535
     fe0:	813fffcc 	andi	r4,r16,65535
     fe4:	2089383a 	mul	r4,r4,r2
     fe8:	00027780 	call	2778 <malloc>
  cam_set_image_pointer(0,buffer1);
     fec:	b00b883a 	mov	r5,r22
     ff0:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff4:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     ff8:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     ffc:	a80b883a 	mov	r5,r21
    1000:	01000044 	movi	r4,1
    1004:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1008:	880b883a 	mov	r5,r17
    100c:	01000084 	movi	r4,2
    1010:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1014:	800b883a 	mov	r5,r16
    1018:	010000c4 	movi	r4,3
    101c:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1020:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1024:	00005a80 	call	5a8 <cam_get_xsize>
    1028:	1021883a 	mov	r16,r2
    102c:	00005cc0 	call	5cc <cam_get_ysize>
    1030:	813fffcc 	andi	r4,r16,65535
    1034:	2008d07a 	srli	r4,r4,1
    1038:	117fffcc 	andi	r5,r2,65535
    103c:	00012780 	call	1278 <init_sobel_arrays>
  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1040:	00005a80 	call	5a8 <cam_get_xsize>
    1044:	1021883a 	mov	r16,r2
    1048:	00005cc0 	call	5cc <cam_get_ysize>
    104c:	80ffffcc 	andi	r3,r16,65535
    1050:	1806d07a 	srli	r3,r3,1
    1054:	10bfffcc 	andi	r2,r2,65535
    1058:	18a3383a 	mul	r17,r3,r2

  do {
	  if (new_image_available() != 0) {
    105c:	00007340 	call	734 <new_image_available>
    1060:	10803fcc 	andi	r2,r2,255
    1064:	1080201c 	xori	r2,r2,128
    1068:	10bfe004 	addi	r2,r2,-128
    106c:	103ffb26 	beq	r2,zero,105c <__alt_data_end+0xff00105c>
		  if (current_image_valid()!=0) {
    1070:	00006dc0 	call	6dc <current_image_valid>
    1074:	10bfffcc 	andi	r2,r2,65535
    1078:	10a0001c 	xori	r2,r2,32768
    107c:	10a00004 	addi	r2,r2,-32768
    1080:	103ff626 	beq	r2,zero,105c <__alt_data_end+0xff00105c>

			  alt_timestamp_start();
    1084:	000fad00 	call	fad0 <alt_timestamp_start>

			  start_global = alt_timestamp();
    1088:	000fb480 	call	fb48 <alt_timestamp>
    108c:	d0a71015 	stw	r2,-25536(gp)
			  current_mode = DIPSW_get_value();
    1090:	00007600 	call	760 <DIPSW_get_value>
    1094:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1098:	00006f00 	call	6f0 <current_image_pointer>
    109c:	102b883a 	mov	r21,r2
		      switch (mode) {
    10a0:	808001cc 	andi	r2,r16,7
    10a4:	1000421e 	bne	r2,zero,11b0 <main+0x294>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    10a8:	00005a80 	call	5a8 <cam_get_xsize>
    10ac:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    10b0:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10b4:	b17fffcc 	andi	r5,r22,65535
    10b8:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10bc:	84003fcc 	andi	r16,r16,255
    10c0:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10c4:	000f883a 	mov	r7,zero
    10c8:	11bfffcc 	andi	r6,r2,65535
    10cc:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10d0:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10d4:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10d8:	80006216 	blt	r16,zero,1264 <main+0x348>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    10dc:	000fb480 	call	fb48 <alt_timestamp>
    10e0:	d0a70f15 	stw	r2,-25540(gp)
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    10e4:	d1671317 	ldw	r5,-25524(gp)
    10e8:	d0a71417 	ldw	r2,-25520(gp)
    10ec:	01000074 	movhi	r4,1
    10f0:	2104ef04 	addi	r4,r4,5052
    10f4:	288bc83a 	sub	r5,r5,r2
    10f8:	0002fdc0 	call	2fdc <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    10fc:	d0a71617 	ldw	r2,-25512(gp)
    1100:	d1671517 	ldw	r5,-25516(gp)
    1104:	01000074 	movhi	r4,1
    1108:	2104f404 	addi	r4,r4,5072
    110c:	288bc83a 	sub	r5,r5,r2
    1110:	0002fdc0 	call	2fdc <printf>
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1114:	d0a71117 	ldw	r2,-25532(gp)
    1118:	d4271217 	ldw	r16,-25528(gp)
    111c:	1421c83a 	sub	r16,r2,r16
    1120:	8444b03a 	or	r2,r16,r17
    1124:	90801d36 	bltu	r18,r2,119c <main+0x280>
    1128:	8004913a 	slli	r2,r16,4
    112c:	1444b03a 	or	r2,r2,r17
    1130:	1505883a 	add	r2,r2,r20
    1134:	11800003 	ldbu	r6,0(r2)
    1138:	01000074 	movhi	r4,1
    113c:	800b883a 	mov	r5,r16
    1140:	2104f704 	addi	r4,r4,5084
    1144:	0002fdc0 	call	2fdc <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    1148:	d0a71017 	ldw	r2,-25536(gp)
    114c:	d1270f17 	ldw	r4,-25540(gp)
    1150:	2089c83a 	sub	r4,r4,r2
    1154:	000266c0 	call	266c <__floatunsidf>
    1158:	01d06234 	movhi	r7,16776
    115c:	39f5e104 	addi	r7,r7,-10364
    1160:	1009883a 	mov	r4,r2
    1164:	180b883a 	mov	r5,r3
    1168:	000d883a 	mov	r6,zero
    116c:	0001d840 	call	1d84 <__divdf3>
    1170:	100d883a 	mov	r6,r2
    1174:	180f883a 	mov	r7,r3
    1178:	0009883a 	mov	r4,zero
    117c:	014ffc34 	movhi	r5,16368
    1180:	0001d840 	call	1d84 <__divdf3>
    1184:	01000074 	movhi	r4,1
    1188:	100b883a 	mov	r5,r2
    118c:	180d883a 	mov	r6,r3
    1190:	21050104 	addi	r4,r4,5124
    1194:	0002fdc0 	call	2fdc <printf>
    1198:	003fb006 	br	105c <__alt_data_end+0xff00105c>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    119c:	880b883a 	mov	r5,r17
    11a0:	8009883a 	mov	r4,r16
    11a4:	0001bd00 	call	1bd0 <__divsi3>
    11a8:	100d883a 	mov	r6,r2
    11ac:	003fe206 	br	1138 <__alt_data_end+0xff001138>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11b0:	000fb480 	call	fb48 <alt_timestamp>
    11b4:	d0a71215 	stw	r2,-25528(gp)
		    	  	   start_conv_grayscale = alt_timestamp();
    11b8:	000fb480 	call	fb48 <alt_timestamp>
    11bc:	d0a71415 	stw	r2,-25520(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    11c0:	00005a80 	call	5a8 <cam_get_xsize>
    11c4:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    11c8:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11cc:	b17fffcc 	andi	r5,r22,65535
    11d0:	280ad07a 	srli	r5,r5,1
    11d4:	11bfffcc 	andi	r6,r2,65535
    11d8:	a809883a 	mov	r4,r21
    11dc:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    11e0:	000fb480 	call	fb48 <alt_timestamp>
    11e4:	d0a71315 	stw	r2,-25524(gp)

                       grayscale = get_grayscale_picture();
    11e8:	00008300 	call	830 <get_grayscale_picture>
    11ec:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    11f0:	000fb480 	call	fb48 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    11f4:	a809883a 	mov	r4,r21
    11f8:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    11fc:	d0a71615 	stw	r2,-25512(gp)
                       sobel_complete(grayscale, 128);
    1200:	0001a1c0 	call	1a1c <sobel_complete>
                       end_sobel = alt_timestamp();
    1204:	000fb480 	call	fb48 <alt_timestamp>
    1208:	d0a71515 	stw	r2,-25516(gp)
                       end_all = alt_timestamp();
    120c:	000fb480 	call	fb48 <alt_timestamp>
    1210:	d0a71115 	stw	r2,-25532(gp)

                       grayscale=GetSobelResult();
    1214:	0001ba80 	call	1ba8 <GetSobelResult>
    1218:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    121c:	00005a80 	call	5a8 <cam_get_xsize>
    1220:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    1224:	00005cc0 	call	5cc <cam_get_ysize>
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1228:	a97fffcc 	andi	r5,r21,65535
    122c:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1230:	84003fcc 	andi	r16,r16,255
    1234:	8400201c 	xori	r16,r16,128
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1238:	01c00044 	movi	r7,1
    123c:	11bfffcc 	andi	r6,r2,65535
    1240:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1244:	843fe004 	addi	r16,r16,-128
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1248:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    124c:	803fa30e 	bge	r16,zero,10dc <__alt_data_end+0xff0010dc>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1250:	01000604 	movi	r4,24
    1254:	0001bc00 	call	1bc0 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1258:	b009883a 	mov	r4,r22
    125c:	0001bb00 	call	1bb0 <vga_set_pointer>
    1260:	003f9e06 	br	10dc <__alt_data_end+0xff0010dc>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1264:	01000204 	movi	r4,8
    1268:	0001bc00 	call	1bc0 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    126c:	a809883a 	mov	r4,r21
    1270:	0001bb00 	call	1bb0 <vga_set_pointer>
    1274:	003f9906 	br	10dc <__alt_data_end+0xff0010dc>

00001278 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1278:	defffd04 	addi	sp,sp,-12
    127c:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1280:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1284:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1288:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    128c:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1290:	21050504 	addi	r4,r4,5140
    1294:	280d883a 	mov	r6,r5
    1298:	800f883a 	mov	r7,r16
    129c:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12a0:	dfc00215 	stw	ra,8(sp)
    12a4:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    12a8:	d0e71715 	stw	r3,-25508(gp)
	sobel_height = height;
    12ac:	d0a71915 	stw	r2,-25500(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12b0:	0002fdc0 	call	2fdc <printf>
	if (sobel_x_result != NULL)
    12b4:	d1271a17 	ldw	r4,-25496(gp)
    12b8:	20000126 	beq	r4,zero,12c0 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    12bc:	000278c0 	call	278c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12c0:	8423883a 	add	r17,r16,r16
    12c4:	8809883a 	mov	r4,r17
    12c8:	00027780 	call	2778 <malloc>
	if (sobel_y_result != NULL)
    12cc:	d1271b17 	ldw	r4,-25492(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12d0:	d0a71a15 	stw	r2,-25496(gp)
	if (sobel_y_result != NULL)
    12d4:	20000126 	beq	r4,zero,12dc <init_sobel_arrays+0x64>
		free(sobel_y_result);
    12d8:	000278c0 	call	278c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12dc:	8809883a 	mov	r4,r17
    12e0:	00027780 	call	2778 <malloc>
	if (sobel_result != NULL)
    12e4:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12e8:	d0a71b15 	stw	r2,-25492(gp)
	if (sobel_result != NULL)
    12ec:	20000126 	beq	r4,zero,12f4 <init_sobel_arrays+0x7c>
		free(sobel_result);
    12f0:	000278c0 	call	278c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12f4:	8009883a 	mov	r4,r16
    12f8:	00027780 	call	2778 <malloc>
	if (sobel_rgb565 != NULL)
    12fc:	d1271c17 	ldw	r4,-25488(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1300:	d0a71815 	stw	r2,-25504(gp)
	if (sobel_rgb565 != NULL)
    1304:	20000126 	beq	r4,zero,130c <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    1308:	000278c0 	call	278c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    130c:	8809883a 	mov	r4,r17
    1310:	00027780 	call	2778 <malloc>
    1314:	d0a71c15 	stw	r2,-25488(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1318:	0005883a 	mov	r2,zero
    131c:	04000f0e 	bge	zero,r16,135c <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    1320:	d1a71a17 	ldw	r6,-25496(gp)
		sobel_y_result[loop] = 0;
    1324:	d1671b17 	ldw	r5,-25492(gp)
		sobel_result[loop] = 0;
    1328:	d1271817 	ldw	r4,-25504(gp)
    132c:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1330:	30cd883a 	add	r6,r6,r3
    1334:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    1338:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    133c:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1340:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    1344:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    1348:	d1271c17 	ldw	r4,-25488(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    134c:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1350:	20c7883a 	add	r3,r4,r3
    1354:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1358:	80bff11e 	bne	r16,r2,1320 <__alt_data_end+0xff001320>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    135c:	dfc00217 	ldw	ra,8(sp)
    1360:	dc400117 	ldw	r17,4(sp)
    1364:	dc000017 	ldw	r16,0(sp)
    1368:	dec00304 	addi	sp,sp,12
    136c:	f800283a 	ret

00001370 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1370:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1374:	31bfffc4 	addi	r6,r6,-1
    1378:	38c00047 	ldb	r3,1(r7)
    137c:	328d383a 	mul	r6,r6,r10
    1380:	3b8000c7 	ldb	r14,3(r7)
    1384:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1388:	5185883a 	add	r2,r10,r6
    138c:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1390:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    1394:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1398:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    139c:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a0:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13a4:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a8:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13ac:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13b0:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13b4:	49000043 	ldbu	r4,1(r9)
    13b8:	3a800147 	ldb	r10,5(r7)
    13bc:	139d383a 	mul	r14,r2,r14
    13c0:	60d9383a 	mul	r12,r12,r3
    13c4:	68800003 	ldbu	r2,0(r13)
    13c8:	38c001c7 	ldb	r3,7(r7)
    13cc:	5a17383a 	mul	r11,r11,r8
    13d0:	33ffffc3 	ldbu	r15,-1(r6)
    13d4:	3a000007 	ldb	r8,0(r7)
    13d8:	2295383a 	mul	r10,r4,r10
    13dc:	31000043 	ldbu	r4,1(r6)
    13e0:	39800087 	ldb	r6,2(r7)
    13e4:	730b883a 	add	r5,r14,r12
    13e8:	10d3383a 	mul	r9,r2,r3
    13ec:	6b3fffc3 	ldbu	r12,-1(r13)
    13f0:	38c00187 	ldb	r3,6(r7)
    13f4:	2acb883a 	add	r5,r5,r11
    13f8:	7a11383a 	mul	r8,r15,r8
    13fc:	6ac00043 	ldbu	r11,1(r13)
    1400:	39c00207 	ldb	r7,8(r7)
    1404:	2a8b883a 	add	r5,r5,r10
    1408:	2189383a 	mul	r4,r4,r6
    140c:	2a45883a 	add	r2,r5,r9
    1410:	60c7383a 	mul	r3,r12,r3
    1414:	1205883a 	add	r2,r2,r8
    1418:	59cb383a 	mul	r5,r11,r7
    141c:	1105883a 	add	r2,r2,r4
    1420:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    1424:	1145883a 	add	r2,r2,r5
    1428:	f800283a 	ret

0000142c <sobel_x>:

void sobel_x( unsigned char *source ) {
    142c:	defff604 	addi	sp,sp,-40
    1430:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1434:	d4671917 	ldw	r17,-25500(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    1438:	dfc00915 	stw	ra,36(sp)
    143c:	df000815 	stw	fp,32(sp)
    1440:	ddc00715 	stw	r23,28(sp)
    1444:	dd800615 	stw	r22,24(sp)
    1448:	dd400515 	stw	r21,20(sp)
    144c:	dd000415 	stw	r20,16(sp)
    1450:	dcc00315 	stw	r19,12(sp)
    1454:	dc800215 	stw	r18,8(sp)
    1458:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    145c:	8c7fffc4 	addi	r17,r17,-1
    1460:	00800044 	movi	r2,1
    1464:	14402e0e 	bge	r2,r17,1520 <sobel_x+0xf4>
    1468:	d3671717 	ldw	r13,-25508(gp)
    146c:	d3e71a17 	ldw	r15,-25496(gp)
    1470:	03800084 	movi	r14,2
    1474:	6b65883a 	add	r18,r13,r13
    1478:	9385883a 	add	r2,r18,r14
    147c:	2359883a 	add	r12,r4,r13
    1480:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1484:	7027883a 	mov	r19,r14
    1488:	736bc83a 	sub	r21,r14,r13
    148c:	6ba9883a 	add	r20,r13,r14
    1490:	9b402f0e 	bge	r19,r13,1550 <sobel_x+0x124>
    1494:	637f883a 	add	ra,r12,r13
    1498:	7021883a 	mov	r16,r14
    149c:	6357c83a 	sub	r11,r12,r13
    14a0:	ab0b883a 	add	r5,r21,r12
    14a4:	62800084 	addi	r10,r12,2
    14a8:	f813883a 	mov	r9,ra
    14ac:	a311883a 	add	r8,r20,r12
    14b0:	780f883a 	mov	r7,r15
    14b4:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14b8:	29000003 	ldbu	r4,0(r5)
    14bc:	40c00003 	ldbu	r3,0(r8)
    14c0:	37000003 	ldbu	fp,0(r6)
    14c4:	50800003 	ldbu	r2,0(r10)
    14c8:	20c7883a 	add	r3,r4,r3
    14cc:	5dc00003 	ldbu	r23,0(r11)
    14d0:	1f07c83a 	sub	r3,r3,fp
    14d4:	4d800003 	ldbu	r22,0(r9)
    14d8:	1f09c83a 	sub	r4,r3,fp
    14dc:	1087883a 	add	r3,r2,r2
    14e0:	20c7883a 	add	r3,r4,r3
    14e4:	1dc5c83a 	sub	r2,r3,r23
    14e8:	1585c83a 	sub	r2,r2,r22
    14ec:	3880000d 	sth	r2,0(r7)
    14f0:	29400044 	addi	r5,r5,1
    14f4:	5ac00044 	addi	r11,r11,1
    14f8:	31800044 	addi	r6,r6,1
    14fc:	52800044 	addi	r10,r10,1
    1500:	4a400044 	addi	r9,r9,1
    1504:	42000044 	addi	r8,r8,1
    1508:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    150c:	617fea1e 	bne	r12,r5,14b8 <__alt_data_end+0xff0014b8>
    1510:	73800044 	addi	r14,r14,1
    1514:	f819883a 	mov	r12,ra
    1518:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    151c:	847fdc16 	blt	r16,r17,1490 <__alt_data_end+0xff001490>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1520:	dfc00917 	ldw	ra,36(sp)
    1524:	df000817 	ldw	fp,32(sp)
    1528:	ddc00717 	ldw	r23,28(sp)
    152c:	dd800617 	ldw	r22,24(sp)
    1530:	dd400517 	ldw	r21,20(sp)
    1534:	dd000417 	ldw	r20,16(sp)
    1538:	dcc00317 	ldw	r19,12(sp)
    153c:	dc800217 	ldw	r18,8(sp)
    1540:	dc400117 	ldw	r17,4(sp)
    1544:	dc000017 	ldw	r16,0(sp)
    1548:	dec00a04 	addi	sp,sp,40
    154c:	f800283a 	ret
    1550:	7021883a 	mov	r16,r14
    1554:	637f883a 	add	ra,r12,r13
    1558:	73800044 	addi	r14,r14,1
    155c:	f819883a 	mov	r12,ra
    1560:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1564:	847fca16 	blt	r16,r17,1490 <__alt_data_end+0xff001490>
    1568:	003fed06 	br	1520 <__alt_data_end+0xff001520>

0000156c <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    156c:	defff504 	addi	sp,sp,-44
    1570:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1574:	d5a71917 	ldw	r22,-25500(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1578:	dfc00a15 	stw	ra,40(sp)
    157c:	df000915 	stw	fp,36(sp)
    1580:	ddc00815 	stw	r23,32(sp)
    1584:	dd400615 	stw	r21,24(sp)
    1588:	dd000515 	stw	r20,20(sp)
    158c:	dcc00415 	stw	r19,16(sp)
    1590:	dc800315 	stw	r18,12(sp)
    1594:	dc400215 	stw	r17,8(sp)
    1598:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    159c:	b5bfffc4 	addi	r22,r22,-1
    15a0:	00800044 	movi	r2,1
    15a4:	1580440e 	bge	r2,r22,16b8 <sobel_x_with_rgb+0x14c>
    15a8:	d7e71717 	ldw	ra,-25508(gp)
    15ac:	d4a71a17 	ldw	r18,-25496(gp)
    15b0:	d4671c17 	ldw	r17,-25488(gp)
    15b4:	ffe9883a 	add	r20,ra,ra
    15b8:	a0800084 	addi	r2,r20,2
    15bc:	04000084 	movi	r16,2
    15c0:	90a5883a 	add	r18,r18,r2
    15c4:	88a3883a 	add	r17,r17,r2
    15c8:	fc05883a 	add	r2,ra,r16
    15cc:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15d0:	802f883a 	mov	r23,r16
    15d4:	87f9c83a 	sub	fp,r16,ra
    15d8:	d8800015 	stw	r2,0(sp)
    15dc:	bfc02f0e 	bge	r23,ra,169c <sobel_x_with_rgb+0x130>
    15e0:	d8800017 	ldw	r2,0(sp)
    15e4:	7fe7883a 	add	r19,r15,ra
    15e8:	802b883a 	mov	r21,r16
    15ec:	7fdbc83a 	sub	r13,r15,ra
    15f0:	e3cf883a 	add	r7,fp,r15
    15f4:	7b000084 	addi	r12,r15,2
    15f8:	9817883a 	mov	r11,r19
    15fc:	13d5883a 	add	r10,r2,r15
    1600:	881d883a 	mov	r14,r17
    1604:	9013883a 	mov	r9,r18
    1608:	7811883a 	mov	r8,r15
    160c:	00000b06 	br	163c <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1610:	180692fa 	slli	r3,r3,11
    1614:	70c0000d 	sth	r3,0(r14)
    1618:	39c00044 	addi	r7,r7,1
    161c:	6b400044 	addi	r13,r13,1
    1620:	42000044 	addi	r8,r8,1
    1624:	63000044 	addi	r12,r12,1
    1628:	5ac00044 	addi	r11,r11,1
    162c:	52800044 	addi	r10,r10,1
    1630:	4a400084 	addi	r9,r9,2
    1634:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1638:	79c01a26 	beq	r15,r7,16a4 <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    163c:	50800003 	ldbu	r2,0(r10)
    1640:	39400003 	ldbu	r5,0(r7)
    1644:	41800003 	ldbu	r6,0(r8)
    1648:	60c00003 	ldbu	r3,0(r12)
    164c:	288b883a 	add	r5,r5,r2
    1650:	298bc83a 	sub	r5,r5,r6
    1654:	68800003 	ldbu	r2,0(r13)
    1658:	59000003 	ldbu	r4,0(r11)
    165c:	298bc83a 	sub	r5,r5,r6
    1660:	18c7883a 	add	r3,r3,r3
    1664:	28c7883a 	add	r3,r5,r3
    1668:	1887c83a 	sub	r3,r3,r2
    166c:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1670:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    1674:	10bfffcc 	andi	r2,r2,65535
    1678:	10a0001c 	xori	r2,r2,32768
    167c:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1680:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1684:	103fe20e 	bge	r2,zero,1610 <__alt_data_end+0xff001610>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1688:	0085c83a 	sub	r2,zero,r2
    168c:	1005d0ba 	srai	r2,r2,2
    1690:	1004917a 	slli	r2,r2,5
    1694:	7080000d 	sth	r2,0(r14)
    1698:	003fdf06 	br	1618 <__alt_data_end+0xff001618>
    169c:	802b883a 	mov	r21,r16
    16a0:	7fe7883a 	add	r19,r15,ra
    16a4:	84000044 	addi	r16,r16,1
    16a8:	981f883a 	mov	r15,r19
    16ac:	9525883a 	add	r18,r18,r20
    16b0:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16b4:	adbfc916 	blt	r21,r22,15dc <__alt_data_end+0xff0015dc>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16b8:	dfc00a17 	ldw	ra,40(sp)
    16bc:	df000917 	ldw	fp,36(sp)
    16c0:	ddc00817 	ldw	r23,32(sp)
    16c4:	dd800717 	ldw	r22,28(sp)
    16c8:	dd400617 	ldw	r21,24(sp)
    16cc:	dd000517 	ldw	r20,20(sp)
    16d0:	dcc00417 	ldw	r19,16(sp)
    16d4:	dc800317 	ldw	r18,12(sp)
    16d8:	dc400217 	ldw	r17,8(sp)
    16dc:	dc000117 	ldw	r16,4(sp)
    16e0:	dec00b04 	addi	sp,sp,44
    16e4:	f800283a 	ret

000016e8 <sobel_y>:

void sobel_y( unsigned char *source ) {
    16e8:	defff704 	addi	sp,sp,-36
    16ec:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16f0:	d4671917 	ldw	r17,-25500(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    16f4:	dfc00815 	stw	ra,32(sp)
    16f8:	ddc00715 	stw	r23,28(sp)
    16fc:	dd800615 	stw	r22,24(sp)
    1700:	dd400515 	stw	r21,20(sp)
    1704:	dd000415 	stw	r20,16(sp)
    1708:	dcc00315 	stw	r19,12(sp)
    170c:	dc800215 	stw	r18,8(sp)
    1710:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1714:	8c7fffc4 	addi	r17,r17,-1
    1718:	00800044 	movi	r2,1
    171c:	14402d0e 	bge	r2,r17,17d4 <sobel_y+0xec>
    1720:	d3e71717 	ldw	r15,-25508(gp)
    1724:	d3a71b17 	ldw	r14,-25492(gp)
    1728:	03400084 	movi	r13,2
    172c:	7bff883a 	add	ra,r15,r15
    1730:	fb67883a 	add	r19,ra,r13
    1734:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1738:	6825883a 	mov	r18,r13
    173c:	f8a9883a 	add	r20,ra,r2
    1740:	6821883a 	mov	r16,r13
    1744:	93c01f0e 	bge	r18,r15,17c4 <sobel_y+0xdc>
    1748:	27cd883a 	add	r6,r4,ra
    174c:	6821883a 	mov	r16,r13
    1750:	22c00044 	addi	r11,r4,1
    1754:	22800084 	addi	r10,r4,2
    1758:	a113883a 	add	r9,r20,r4
    175c:	990b883a 	add	r5,r19,r4
    1760:	7999883a 	add	r12,r15,r6
    1764:	7011883a 	mov	r8,r14
    1768:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    176c:	3d800003 	ldbu	r22,0(r7)
    1770:	50c00003 	ldbu	r3,0(r10)
    1774:	58800003 	ldbu	r2,0(r11)
    1778:	4d400003 	ldbu	r21,0(r9)
    177c:	b0c7883a 	add	r3,r22,r3
    1780:	1085883a 	add	r2,r2,r2
    1784:	35c00003 	ldbu	r23,0(r6)
    1788:	1887883a 	add	r3,r3,r2
    178c:	2d800003 	ldbu	r22,0(r5)
    1790:	1d47c83a 	sub	r3,r3,r21
    1794:	1d47c83a 	sub	r3,r3,r21
    1798:	1dc5c83a 	sub	r2,r3,r23
    179c:	1585c83a 	sub	r2,r2,r22
    17a0:	4080000d 	sth	r2,0(r8)
    17a4:	29400044 	addi	r5,r5,1
    17a8:	39c00044 	addi	r7,r7,1
    17ac:	5ac00044 	addi	r11,r11,1
    17b0:	52800044 	addi	r10,r10,1
    17b4:	4a400044 	addi	r9,r9,1
    17b8:	31800044 	addi	r6,r6,1
    17bc:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17c0:	617fea1e 	bne	r12,r5,176c <__alt_data_end+0xff00176c>
    17c4:	6b400044 	addi	r13,r13,1
    17c8:	23c9883a 	add	r4,r4,r15
    17cc:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17d0:	847fdb16 	blt	r16,r17,1740 <__alt_data_end+0xff001740>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    17d4:	dfc00817 	ldw	ra,32(sp)
    17d8:	ddc00717 	ldw	r23,28(sp)
    17dc:	dd800617 	ldw	r22,24(sp)
    17e0:	dd400517 	ldw	r21,20(sp)
    17e4:	dd000417 	ldw	r20,16(sp)
    17e8:	dcc00317 	ldw	r19,12(sp)
    17ec:	dc800217 	ldw	r18,8(sp)
    17f0:	dc400117 	ldw	r17,4(sp)
    17f4:	dc000017 	ldw	r16,0(sp)
    17f8:	dec00904 	addi	sp,sp,36
    17fc:	f800283a 	ret

00001800 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1800:	defff604 	addi	sp,sp,-40
    1804:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1808:	d4e71917 	ldw	r19,-25500(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    180c:	dfc00915 	stw	ra,36(sp)
    1810:	df000815 	stw	fp,32(sp)
    1814:	ddc00715 	stw	r23,28(sp)
    1818:	dd800615 	stw	r22,24(sp)
    181c:	dd400515 	stw	r21,20(sp)
    1820:	dd000415 	stw	r20,16(sp)
    1824:	dc800215 	stw	r18,8(sp)
    1828:	dc400115 	stw	r17,4(sp)
    182c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1830:	9cffffc4 	addi	r19,r19,-1
    1834:	00800044 	movi	r2,1
    1838:	14c03f0e 	bge	r2,r19,1938 <sobel_y_with_rgb+0x138>
    183c:	d4671717 	ldw	r17,-25508(gp)
    1840:	d4271b17 	ldw	r16,-25492(gp)
    1844:	d7e71c17 	ldw	ra,-25488(gp)
    1848:	8c5d883a 	add	r14,r17,r17
    184c:	75000084 	addi	r20,r14,2
    1850:	03c00084 	movi	r15,2
    1854:	8521883a 	add	r16,r16,r20
    1858:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    185c:	782b883a 	mov	r21,r15
    1860:	70ad883a 	add	r22,r14,r2
    1864:	7825883a 	mov	r18,r15
    1868:	ac402e0e 	bge	r21,r17,1924 <sobel_y_with_rgb+0x124>
    186c:	238d883a 	add	r6,r4,r14
    1870:	7825883a 	mov	r18,r15
    1874:	22c00044 	addi	r11,r4,1
    1878:	22800084 	addi	r10,r4,2
    187c:	b113883a 	add	r9,r22,r4
    1880:	a10b883a 	add	r5,r20,r4
    1884:	899b883a 	add	r13,r17,r6
    1888:	f819883a 	mov	r12,ra
    188c:	8011883a 	mov	r8,r16
    1890:	200f883a 	mov	r7,r4
    1894:	00000b06 	br	18c4 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1898:	180692fa 	slli	r3,r3,11
    189c:	60c0000d 	sth	r3,0(r12)
    18a0:	29400044 	addi	r5,r5,1
    18a4:	39c00044 	addi	r7,r7,1
    18a8:	5ac00044 	addi	r11,r11,1
    18ac:	52800044 	addi	r10,r10,1
    18b0:	4a400044 	addi	r9,r9,1
    18b4:	31800044 	addi	r6,r6,1
    18b8:	42000084 	addi	r8,r8,2
    18bc:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18c0:	69401826 	beq	r13,r5,1924 <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    18c4:	50800003 	ldbu	r2,0(r10)
    18c8:	3f000003 	ldbu	fp,0(r7)
    18cc:	58c00003 	ldbu	r3,0(r11)
    18d0:	4dc00003 	ldbu	r23,0(r9)
    18d4:	e0b9883a 	add	fp,fp,r2
    18d8:	18c7883a 	add	r3,r3,r3
    18dc:	30800003 	ldbu	r2,0(r6)
    18e0:	e0c7883a 	add	r3,fp,r3
    18e4:	1dc7c83a 	sub	r3,r3,r23
    18e8:	2f000003 	ldbu	fp,0(r5)
    18ec:	1dc7c83a 	sub	r3,r3,r23
    18f0:	1885c83a 	sub	r2,r3,r2
    18f4:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    18f8:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    18fc:	10bfffcc 	andi	r2,r2,65535
    1900:	10a0001c 	xori	r2,r2,32768
    1904:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1908:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    190c:	103fe20e 	bge	r2,zero,1898 <__alt_data_end+0xff001898>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1910:	0085c83a 	sub	r2,zero,r2
    1914:	1005d0ba 	srai	r2,r2,2
    1918:	1004917a 	slli	r2,r2,5
    191c:	6080000d 	sth	r2,0(r12)
    1920:	003fdf06 	br	18a0 <__alt_data_end+0xff0018a0>
    1924:	7bc00044 	addi	r15,r15,1
    1928:	2449883a 	add	r4,r4,r17
    192c:	83a1883a 	add	r16,r16,r14
    1930:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1934:	94ffcb16 	blt	r18,r19,1864 <__alt_data_end+0xff001864>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1938:	dfc00917 	ldw	ra,36(sp)
    193c:	df000817 	ldw	fp,32(sp)
    1940:	ddc00717 	ldw	r23,28(sp)
    1944:	dd800617 	ldw	r22,24(sp)
    1948:	dd400517 	ldw	r21,20(sp)
    194c:	dd000417 	ldw	r20,16(sp)
    1950:	dcc00317 	ldw	r19,12(sp)
    1954:	dc800217 	ldw	r18,8(sp)
    1958:	dc400117 	ldw	r17,4(sp)
    195c:	dc000017 	ldw	r16,0(sp)
    1960:	dec00a04 	addi	sp,sp,40
    1964:	f800283a 	ret

00001968 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1968:	d0a71917 	ldw	r2,-25500(gp)
    196c:	02400084 	movi	r9,2
    1970:	4880290e 	bge	r9,r2,1a18 <sobel_threshold+0xb0>
    1974:	223fffcc 	andi	r8,r4,65535
    1978:	d0e71717 	ldw	r3,-25508(gp)
    197c:	4220001c 	xori	r8,r8,32768
    1980:	01c00044 	movi	r7,1
    1984:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1988:	48c0200e 	bge	r9,r3,1a0c <sobel_threshold+0xa4>
    198c:	01400044 	movi	r5,1
    1990:	00000c06 	br	19c4 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1994:	2080000f 	ldh	r2,0(r4)
    1998:	10001916 	blt	r2,zero,1a00 <sobel_threshold+0x98>
    199c:	3085883a 	add	r2,r6,r2
    19a0:	10bfffcc 	andi	r2,r2,65535
    19a4:	10a0001c 	xori	r2,r2,32768
    19a8:	10a00004 	addi	r2,r2,-32768
    19ac:	4084803a 	cmplt	r2,r8,r2
    19b0:	0085c83a 	sub	r2,zero,r2
    19b4:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19b8:	d0e71717 	ldw	r3,-25508(gp)
    19bc:	18bfffc4 	addi	r2,r3,-1
    19c0:	2880110e 	bge	r5,r2,1a08 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19c4:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19c8:	d1a71b17 	ldw	r6,-25492(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19cc:	d1271a17 	ldw	r4,-25496(gp)
    19d0:	1947883a 	add	r3,r3,r5
    19d4:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19d8:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19dc:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19e0:	3180000f 	ldh	r6,0(r6)
    19e4:	d0a71817 	ldw	r2,-25504(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19e8:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19ec:	10c7883a 	add	r3,r2,r3
    19f0:	303fe80e 	bge	r6,zero,1994 <__alt_data_end+0xff001994>
    19f4:	2080000f 	ldh	r2,0(r4)
    19f8:	018dc83a 	sub	r6,zero,r6
    19fc:	103fe70e 	bge	r2,zero,199c <__alt_data_end+0xff00199c>
    1a00:	0085c83a 	sub	r2,zero,r2
    1a04:	003fe506 	br	199c <__alt_data_end+0xff00199c>
    1a08:	d0a71917 	ldw	r2,-25500(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a0c:	39c00044 	addi	r7,r7,1
    1a10:	113fffc4 	addi	r4,r2,-1
    1a14:	393fdc16 	blt	r7,r4,1988 <__alt_data_end+0xff001988>
    1a18:	f800283a 	ret

00001a1c <sobel_complete>:
	}
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a1c:	d1671917 	ldw	r5,-25500(gp)
    1a20:	02800084 	movi	r10,2
    1a24:	51405d0e 	bge	r10,r5,1b9c <sobel_complete+0x180>
    1a28:	d0e71717 	ldw	r3,-25508(gp)
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1a2c:	defffa04 	addi	sp,sp,-24
    1a30:	dfc00515 	stw	ra,20(sp)
    1a34:	dd000415 	stw	r20,16(sp)
    1a38:	dcc00315 	stw	r19,12(sp)
    1a3c:	dc800215 	stw	r18,8(sp)
    1a40:	dc400115 	stw	r17,4(sp)
    1a44:	dc000015 	stw	r16,0(sp)
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a48:	501f883a 	mov	r15,r10
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a4c:	03402004 	movi	r13,128
    1a50:	52ffffc4 	addi	r11,r10,-1
    1a54:	501d883a 	mov	r14,r10
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a58:	78c0460e 	bge	r15,r3,1b74 <sobel_complete+0x158>
    1a5c:	533fff84 	addi	r12,r10,-2
    1a60:	501d883a 	mov	r14,r10
    1a64:	02000044 	movi	r8,1
    1a68:	00000606 	br	1a84 <sobel_complete+0x68>
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a6c:	00803fc4 	movi	r2,255
    1a70:	18800025 	stbio	r2,0(r3)
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a74:	d0e71717 	ldw	r3,-25508(gp)
    1a78:	4811883a 	mov	r8,r9
    1a7c:	18bfffc4 	addi	r2,r3,-1
    1a80:	48803b0e 	bge	r9,r2,1b70 <sobel_complete+0x154>
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1a84:	1b3f383a 	mul	ra,r3,r12
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1a88:	1a8f383a 	mul	r7,r3,r10
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1a8c:	42400044 	addi	r9,r8,1
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1a90:	27e5883a 	add	r18,r4,ra
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1a94:	21e9883a 	add	r20,r4,r7
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1a98:	9205883a 	add	r2,r18,r8
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1a9c:	11400003 	ldbu	r5,0(r2)
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1aa0:	a205883a 	add	r2,r20,r8
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1aa4:	10800003 	ldbu	r2,0(r2)
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1aa8:	924d883a 	add	r6,r18,r9
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1aac:	2261883a 	add	r16,r4,r9
    1ab0:	447fffc4 	addi	r17,r8,-1
			sum = ALT_CI_ABSOLUTE_0(value);
    1ab4:	31800003 	ldbu	r6,0(r6)
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1ab8:	81cf883a 	add	r7,r16,r7
			sum = ALT_CI_ABSOLUTE_0(value);
    1abc:	294b883a 	add	r5,r5,r5
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1ac0:	9465883a 	add	r18,r18,r17
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1ac4:	288bc83a 	sub	r5,r5,r2
    1ac8:	39c00003 	ldbu	r7,0(r7)
    1acc:	94c00003 	ldbu	r19,0(r18)
    1ad0:	2885c83a 	sub	r2,r5,r2
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1ad4:	a469883a 	add	r20,r20,r17
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1ad8:	1185883a 	add	r2,r2,r6
    1adc:	a4800003 	ldbu	r18,0(r20)
    1ae0:	11c5c83a 	sub	r2,r2,r7
    1ae4:	14c5883a 	add	r2,r2,r19
    1ae8:	1485c83a 	sub	r2,r2,r18
    1aec:	10bfffcc 	andi	r2,r2,65535
    1af0:	10a0001c 	xori	r2,r2,32768
    1af4:	10a00004 	addi	r2,r2,-32768
    1af8:	1005c072 	custom	1,r2,r2,zero
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1afc:	1ac7383a 	mul	r3,r3,r11
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1b00:	87ff883a 	add	ra,r16,ra
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1b04:	ffc00003 	ldbu	ra,0(ra)
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
    1b08:	20cb883a 	add	r5,r4,r3
    1b0c:	2c63883a 	add	r17,r5,r17
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1b10:	89400003 	ldbu	r5,0(r17)
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1b14:	80e1883a 	add	r16,r16,r3
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1b18:	81800003 	ldbu	r6,0(r16)
    1b1c:	295fffe4 	muli	r5,r5,32767
    1b20:	f9ff883a 	add	ra,ra,r7
    1b24:	fccfc83a 	sub	r7,ra,r19
    1b28:	298b883a 	add	r5,r5,r6
    1b2c:	3c8fc83a 	sub	r7,r7,r18
    1b30:	294b883a 	add	r5,r5,r5
    1b34:	394b883a 	add	r5,r7,r5
    1b38:	297fffcc 	andi	r5,r5,65535
    1b3c:	2960001c 	xori	r5,r5,32768
    1b40:	29600004 	addi	r5,r5,-32768
    1b44:	280bc072 	custom	1,r5,r5,zero
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b48:	2885883a 	add	r2,r5,r2
    1b4c:	1a07883a 	add	r3,r3,r8
    1b50:	10bfffcc 	andi	r2,r2,65535
    1b54:	d2271817 	ldw	r8,-25504(gp)
    1b58:	10a0001c 	xori	r2,r2,32768
    1b5c:	10a00004 	addi	r2,r2,-32768
    1b60:	40c7883a 	add	r3,r8,r3
    1b64:	68bfc116 	blt	r13,r2,1a6c <__alt_data_end+0xff001a6c>
    1b68:	0005883a 	mov	r2,zero
    1b6c:	003fc006 	br	1a70 <__alt_data_end+0xff001a70>
    1b70:	d1671917 	ldw	r5,-25500(gp)
	}
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b74:	28bfffc4 	addi	r2,r5,-1
    1b78:	52800044 	addi	r10,r10,1
    1b7c:	70bfb416 	blt	r14,r2,1a50 <__alt_data_end+0xff001a50>
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1b80:	dfc00517 	ldw	ra,20(sp)
    1b84:	dd000417 	ldw	r20,16(sp)
    1b88:	dcc00317 	ldw	r19,12(sp)
    1b8c:	dc800217 	ldw	r18,8(sp)
    1b90:	dc400117 	ldw	r17,4(sp)
    1b94:	dc000017 	ldw	r16,0(sp)
    1b98:	dec00604 	addi	sp,sp,24
    1b9c:	f800283a 	ret

00001ba0 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1ba0:	d0a71c17 	ldw	r2,-25488(gp)
    1ba4:	f800283a 	ret

00001ba8 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1ba8:	d0a71817 	ldw	r2,-25504(gp)
    1bac:	f800283a 	ret

00001bb0 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1bb0:	00804034 	movhi	r2,256
    1bb4:	10843404 	addi	r2,r2,4304
    1bb8:	11000035 	stwio	r4,0(r2)
    1bbc:	f800283a 	ret

00001bc0 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1bc0:	00804034 	movhi	r2,256
    1bc4:	10843504 	addi	r2,r2,4308
    1bc8:	11000025 	stbio	r4,0(r2)
    1bcc:	f800283a 	ret

00001bd0 <__divsi3>:
    1bd0:	20001b16 	blt	r4,zero,1c40 <__divsi3+0x70>
    1bd4:	000f883a 	mov	r7,zero
    1bd8:	28001616 	blt	r5,zero,1c34 <__divsi3+0x64>
    1bdc:	200d883a 	mov	r6,r4
    1be0:	29001a2e 	bgeu	r5,r4,1c4c <__divsi3+0x7c>
    1be4:	00800804 	movi	r2,32
    1be8:	00c00044 	movi	r3,1
    1bec:	00000106 	br	1bf4 <__divsi3+0x24>
    1bf0:	10000d26 	beq	r2,zero,1c28 <__divsi3+0x58>
    1bf4:	294b883a 	add	r5,r5,r5
    1bf8:	10bfffc4 	addi	r2,r2,-1
    1bfc:	18c7883a 	add	r3,r3,r3
    1c00:	293ffb36 	bltu	r5,r4,1bf0 <__alt_data_end+0xff001bf0>
    1c04:	0005883a 	mov	r2,zero
    1c08:	18000726 	beq	r3,zero,1c28 <__divsi3+0x58>
    1c0c:	0005883a 	mov	r2,zero
    1c10:	31400236 	bltu	r6,r5,1c1c <__divsi3+0x4c>
    1c14:	314dc83a 	sub	r6,r6,r5
    1c18:	10c4b03a 	or	r2,r2,r3
    1c1c:	1806d07a 	srli	r3,r3,1
    1c20:	280ad07a 	srli	r5,r5,1
    1c24:	183ffa1e 	bne	r3,zero,1c10 <__alt_data_end+0xff001c10>
    1c28:	38000126 	beq	r7,zero,1c30 <__divsi3+0x60>
    1c2c:	0085c83a 	sub	r2,zero,r2
    1c30:	f800283a 	ret
    1c34:	014bc83a 	sub	r5,zero,r5
    1c38:	39c0005c 	xori	r7,r7,1
    1c3c:	003fe706 	br	1bdc <__alt_data_end+0xff001bdc>
    1c40:	0109c83a 	sub	r4,zero,r4
    1c44:	01c00044 	movi	r7,1
    1c48:	003fe306 	br	1bd8 <__alt_data_end+0xff001bd8>
    1c4c:	00c00044 	movi	r3,1
    1c50:	003fee06 	br	1c0c <__alt_data_end+0xff001c0c>

00001c54 <__modsi3>:
    1c54:	20001716 	blt	r4,zero,1cb4 <__modsi3+0x60>
    1c58:	000f883a 	mov	r7,zero
    1c5c:	2005883a 	mov	r2,r4
    1c60:	28001216 	blt	r5,zero,1cac <__modsi3+0x58>
    1c64:	2900162e 	bgeu	r5,r4,1cc0 <__modsi3+0x6c>
    1c68:	01800804 	movi	r6,32
    1c6c:	00c00044 	movi	r3,1
    1c70:	00000106 	br	1c78 <__modsi3+0x24>
    1c74:	30000a26 	beq	r6,zero,1ca0 <__modsi3+0x4c>
    1c78:	294b883a 	add	r5,r5,r5
    1c7c:	31bfffc4 	addi	r6,r6,-1
    1c80:	18c7883a 	add	r3,r3,r3
    1c84:	293ffb36 	bltu	r5,r4,1c74 <__alt_data_end+0xff001c74>
    1c88:	18000526 	beq	r3,zero,1ca0 <__modsi3+0x4c>
    1c8c:	1806d07a 	srli	r3,r3,1
    1c90:	11400136 	bltu	r2,r5,1c98 <__modsi3+0x44>
    1c94:	1145c83a 	sub	r2,r2,r5
    1c98:	280ad07a 	srli	r5,r5,1
    1c9c:	183ffb1e 	bne	r3,zero,1c8c <__alt_data_end+0xff001c8c>
    1ca0:	38000126 	beq	r7,zero,1ca8 <__modsi3+0x54>
    1ca4:	0085c83a 	sub	r2,zero,r2
    1ca8:	f800283a 	ret
    1cac:	014bc83a 	sub	r5,zero,r5
    1cb0:	003fec06 	br	1c64 <__alt_data_end+0xff001c64>
    1cb4:	0109c83a 	sub	r4,zero,r4
    1cb8:	01c00044 	movi	r7,1
    1cbc:	003fe706 	br	1c5c <__alt_data_end+0xff001c5c>
    1cc0:	00c00044 	movi	r3,1
    1cc4:	003ff106 	br	1c8c <__alt_data_end+0xff001c8c>

00001cc8 <__udivsi3>:
    1cc8:	200d883a 	mov	r6,r4
    1ccc:	2900152e 	bgeu	r5,r4,1d24 <__udivsi3+0x5c>
    1cd0:	28001416 	blt	r5,zero,1d24 <__udivsi3+0x5c>
    1cd4:	00800804 	movi	r2,32
    1cd8:	00c00044 	movi	r3,1
    1cdc:	00000206 	br	1ce8 <__udivsi3+0x20>
    1ce0:	10000e26 	beq	r2,zero,1d1c <__udivsi3+0x54>
    1ce4:	28000516 	blt	r5,zero,1cfc <__udivsi3+0x34>
    1ce8:	294b883a 	add	r5,r5,r5
    1cec:	10bfffc4 	addi	r2,r2,-1
    1cf0:	18c7883a 	add	r3,r3,r3
    1cf4:	293ffa36 	bltu	r5,r4,1ce0 <__alt_data_end+0xff001ce0>
    1cf8:	18000826 	beq	r3,zero,1d1c <__udivsi3+0x54>
    1cfc:	0005883a 	mov	r2,zero
    1d00:	31400236 	bltu	r6,r5,1d0c <__udivsi3+0x44>
    1d04:	314dc83a 	sub	r6,r6,r5
    1d08:	10c4b03a 	or	r2,r2,r3
    1d0c:	1806d07a 	srli	r3,r3,1
    1d10:	280ad07a 	srli	r5,r5,1
    1d14:	183ffa1e 	bne	r3,zero,1d00 <__alt_data_end+0xff001d00>
    1d18:	f800283a 	ret
    1d1c:	0005883a 	mov	r2,zero
    1d20:	f800283a 	ret
    1d24:	00c00044 	movi	r3,1
    1d28:	003ff406 	br	1cfc <__alt_data_end+0xff001cfc>

00001d2c <__umodsi3>:
    1d2c:	2005883a 	mov	r2,r4
    1d30:	2900122e 	bgeu	r5,r4,1d7c <__umodsi3+0x50>
    1d34:	28001116 	blt	r5,zero,1d7c <__umodsi3+0x50>
    1d38:	01800804 	movi	r6,32
    1d3c:	00c00044 	movi	r3,1
    1d40:	00000206 	br	1d4c <__umodsi3+0x20>
    1d44:	30000c26 	beq	r6,zero,1d78 <__umodsi3+0x4c>
    1d48:	28000516 	blt	r5,zero,1d60 <__umodsi3+0x34>
    1d4c:	294b883a 	add	r5,r5,r5
    1d50:	31bfffc4 	addi	r6,r6,-1
    1d54:	18c7883a 	add	r3,r3,r3
    1d58:	293ffa36 	bltu	r5,r4,1d44 <__alt_data_end+0xff001d44>
    1d5c:	18000626 	beq	r3,zero,1d78 <__umodsi3+0x4c>
    1d60:	1806d07a 	srli	r3,r3,1
    1d64:	11400136 	bltu	r2,r5,1d6c <__umodsi3+0x40>
    1d68:	1145c83a 	sub	r2,r2,r5
    1d6c:	280ad07a 	srli	r5,r5,1
    1d70:	183ffb1e 	bne	r3,zero,1d60 <__alt_data_end+0xff001d60>
    1d74:	f800283a 	ret
    1d78:	f800283a 	ret
    1d7c:	00c00044 	movi	r3,1
    1d80:	003ff706 	br	1d60 <__alt_data_end+0xff001d60>

00001d84 <__divdf3>:
    1d84:	defff204 	addi	sp,sp,-56
    1d88:	dd400915 	stw	r21,36(sp)
    1d8c:	282ad53a 	srli	r21,r5,20
    1d90:	dd000815 	stw	r20,32(sp)
    1d94:	2828d7fa 	srli	r20,r5,31
    1d98:	dc000415 	stw	r16,16(sp)
    1d9c:	04000434 	movhi	r16,16
    1da0:	df000c15 	stw	fp,48(sp)
    1da4:	843fffc4 	addi	r16,r16,-1
    1da8:	dfc00d15 	stw	ra,52(sp)
    1dac:	ddc00b15 	stw	r23,44(sp)
    1db0:	dd800a15 	stw	r22,40(sp)
    1db4:	dcc00715 	stw	r19,28(sp)
    1db8:	dc800615 	stw	r18,24(sp)
    1dbc:	dc400515 	stw	r17,20(sp)
    1dc0:	ad41ffcc 	andi	r21,r21,2047
    1dc4:	2c20703a 	and	r16,r5,r16
    1dc8:	a7003fcc 	andi	fp,r20,255
    1dcc:	a8006126 	beq	r21,zero,1f54 <__divdf3+0x1d0>
    1dd0:	0081ffc4 	movi	r2,2047
    1dd4:	2025883a 	mov	r18,r4
    1dd8:	a8803726 	beq	r21,r2,1eb8 <__divdf3+0x134>
    1ddc:	80800434 	orhi	r2,r16,16
    1de0:	100490fa 	slli	r2,r2,3
    1de4:	2020d77a 	srli	r16,r4,29
    1de8:	202490fa 	slli	r18,r4,3
    1dec:	ad7f0044 	addi	r21,r21,-1023
    1df0:	80a0b03a 	or	r16,r16,r2
    1df4:	0027883a 	mov	r19,zero
    1df8:	0013883a 	mov	r9,zero
    1dfc:	3804d53a 	srli	r2,r7,20
    1e00:	382cd7fa 	srli	r22,r7,31
    1e04:	04400434 	movhi	r17,16
    1e08:	8c7fffc4 	addi	r17,r17,-1
    1e0c:	1081ffcc 	andi	r2,r2,2047
    1e10:	3011883a 	mov	r8,r6
    1e14:	3c62703a 	and	r17,r7,r17
    1e18:	b5c03fcc 	andi	r23,r22,255
    1e1c:	10006c26 	beq	r2,zero,1fd0 <__divdf3+0x24c>
    1e20:	00c1ffc4 	movi	r3,2047
    1e24:	10c06426 	beq	r2,r3,1fb8 <__divdf3+0x234>
    1e28:	88c00434 	orhi	r3,r17,16
    1e2c:	180690fa 	slli	r3,r3,3
    1e30:	3022d77a 	srli	r17,r6,29
    1e34:	301090fa 	slli	r8,r6,3
    1e38:	10bf0044 	addi	r2,r2,-1023
    1e3c:	88e2b03a 	or	r17,r17,r3
    1e40:	000f883a 	mov	r7,zero
    1e44:	a58cf03a 	xor	r6,r20,r22
    1e48:	3cc8b03a 	or	r4,r7,r19
    1e4c:	a8abc83a 	sub	r21,r21,r2
    1e50:	008003c4 	movi	r2,15
    1e54:	3007883a 	mov	r3,r6
    1e58:	34c03fcc 	andi	r19,r6,255
    1e5c:	11009036 	bltu	r2,r4,20a0 <__divdf3+0x31c>
    1e60:	200890ba 	slli	r4,r4,2
    1e64:	00800034 	movhi	r2,0
    1e68:	10879e04 	addi	r2,r2,7800
    1e6c:	2089883a 	add	r4,r4,r2
    1e70:	20800017 	ldw	r2,0(r4)
    1e74:	1000683a 	jmp	r2
    1e78:	000020a0 	cmpeqi	zero,zero,130
    1e7c:	00001ef0 	cmpltui	zero,zero,123
    1e80:	00002090 	cmplti	zero,zero,130
    1e84:	00001ee4 	muli	zero,zero,123
    1e88:	00002090 	cmplti	zero,zero,130
    1e8c:	00002064 	muli	zero,zero,129
    1e90:	00002090 	cmplti	zero,zero,130
    1e94:	00001ee4 	muli	zero,zero,123
    1e98:	00001ef0 	cmpltui	zero,zero,123
    1e9c:	00001ef0 	cmpltui	zero,zero,123
    1ea0:	00002064 	muli	zero,zero,129
    1ea4:	00001ee4 	muli	zero,zero,123
    1ea8:	00001ed4 	movui	zero,123
    1eac:	00001ed4 	movui	zero,123
    1eb0:	00001ed4 	movui	zero,123
    1eb4:	00002384 	movi	zero,142
    1eb8:	2404b03a 	or	r2,r4,r16
    1ebc:	1000661e 	bne	r2,zero,2058 <__divdf3+0x2d4>
    1ec0:	04c00204 	movi	r19,8
    1ec4:	0021883a 	mov	r16,zero
    1ec8:	0025883a 	mov	r18,zero
    1ecc:	02400084 	movi	r9,2
    1ed0:	003fca06 	br	1dfc <__alt_data_end+0xff001dfc>
    1ed4:	8023883a 	mov	r17,r16
    1ed8:	9011883a 	mov	r8,r18
    1edc:	e02f883a 	mov	r23,fp
    1ee0:	480f883a 	mov	r7,r9
    1ee4:	00800084 	movi	r2,2
    1ee8:	3881311e 	bne	r7,r2,23b0 <__divdf3+0x62c>
    1eec:	b827883a 	mov	r19,r23
    1ef0:	98c0004c 	andi	r3,r19,1
    1ef4:	0081ffc4 	movi	r2,2047
    1ef8:	000b883a 	mov	r5,zero
    1efc:	0025883a 	mov	r18,zero
    1f00:	1004953a 	slli	r2,r2,20
    1f04:	18c03fcc 	andi	r3,r3,255
    1f08:	04400434 	movhi	r17,16
    1f0c:	8c7fffc4 	addi	r17,r17,-1
    1f10:	180697fa 	slli	r3,r3,31
    1f14:	2c4a703a 	and	r5,r5,r17
    1f18:	288ab03a 	or	r5,r5,r2
    1f1c:	28c6b03a 	or	r3,r5,r3
    1f20:	9005883a 	mov	r2,r18
    1f24:	dfc00d17 	ldw	ra,52(sp)
    1f28:	df000c17 	ldw	fp,48(sp)
    1f2c:	ddc00b17 	ldw	r23,44(sp)
    1f30:	dd800a17 	ldw	r22,40(sp)
    1f34:	dd400917 	ldw	r21,36(sp)
    1f38:	dd000817 	ldw	r20,32(sp)
    1f3c:	dcc00717 	ldw	r19,28(sp)
    1f40:	dc800617 	ldw	r18,24(sp)
    1f44:	dc400517 	ldw	r17,20(sp)
    1f48:	dc000417 	ldw	r16,16(sp)
    1f4c:	dec00e04 	addi	sp,sp,56
    1f50:	f800283a 	ret
    1f54:	2404b03a 	or	r2,r4,r16
    1f58:	2027883a 	mov	r19,r4
    1f5c:	10003926 	beq	r2,zero,2044 <__divdf3+0x2c0>
    1f60:	80012e26 	beq	r16,zero,241c <__divdf3+0x698>
    1f64:	8009883a 	mov	r4,r16
    1f68:	d9800315 	stw	r6,12(sp)
    1f6c:	d9c00215 	stw	r7,8(sp)
    1f70:	00027140 	call	2714 <__clzsi2>
    1f74:	d9800317 	ldw	r6,12(sp)
    1f78:	d9c00217 	ldw	r7,8(sp)
    1f7c:	113ffd44 	addi	r4,r2,-11
    1f80:	00c00704 	movi	r3,28
    1f84:	19012116 	blt	r3,r4,240c <__divdf3+0x688>
    1f88:	00c00744 	movi	r3,29
    1f8c:	147ffe04 	addi	r17,r2,-8
    1f90:	1907c83a 	sub	r3,r3,r4
    1f94:	8460983a 	sll	r16,r16,r17
    1f98:	98c6d83a 	srl	r3,r19,r3
    1f9c:	9c64983a 	sll	r18,r19,r17
    1fa0:	1c20b03a 	or	r16,r3,r16
    1fa4:	1080fcc4 	addi	r2,r2,1011
    1fa8:	00abc83a 	sub	r21,zero,r2
    1fac:	0027883a 	mov	r19,zero
    1fb0:	0013883a 	mov	r9,zero
    1fb4:	003f9106 	br	1dfc <__alt_data_end+0xff001dfc>
    1fb8:	3446b03a 	or	r3,r6,r17
    1fbc:	18001f1e 	bne	r3,zero,203c <__divdf3+0x2b8>
    1fc0:	0023883a 	mov	r17,zero
    1fc4:	0011883a 	mov	r8,zero
    1fc8:	01c00084 	movi	r7,2
    1fcc:	003f9d06 	br	1e44 <__alt_data_end+0xff001e44>
    1fd0:	3446b03a 	or	r3,r6,r17
    1fd4:	18001526 	beq	r3,zero,202c <__divdf3+0x2a8>
    1fd8:	88011b26 	beq	r17,zero,2448 <__divdf3+0x6c4>
    1fdc:	8809883a 	mov	r4,r17
    1fe0:	d9800315 	stw	r6,12(sp)
    1fe4:	da400115 	stw	r9,4(sp)
    1fe8:	00027140 	call	2714 <__clzsi2>
    1fec:	d9800317 	ldw	r6,12(sp)
    1ff0:	da400117 	ldw	r9,4(sp)
    1ff4:	113ffd44 	addi	r4,r2,-11
    1ff8:	00c00704 	movi	r3,28
    1ffc:	19010e16 	blt	r3,r4,2438 <__divdf3+0x6b4>
    2000:	00c00744 	movi	r3,29
    2004:	123ffe04 	addi	r8,r2,-8
    2008:	1907c83a 	sub	r3,r3,r4
    200c:	8a22983a 	sll	r17,r17,r8
    2010:	30c6d83a 	srl	r3,r6,r3
    2014:	3210983a 	sll	r8,r6,r8
    2018:	1c62b03a 	or	r17,r3,r17
    201c:	1080fcc4 	addi	r2,r2,1011
    2020:	0085c83a 	sub	r2,zero,r2
    2024:	000f883a 	mov	r7,zero
    2028:	003f8606 	br	1e44 <__alt_data_end+0xff001e44>
    202c:	0023883a 	mov	r17,zero
    2030:	0011883a 	mov	r8,zero
    2034:	01c00044 	movi	r7,1
    2038:	003f8206 	br	1e44 <__alt_data_end+0xff001e44>
    203c:	01c000c4 	movi	r7,3
    2040:	003f8006 	br	1e44 <__alt_data_end+0xff001e44>
    2044:	04c00104 	movi	r19,4
    2048:	0021883a 	mov	r16,zero
    204c:	0025883a 	mov	r18,zero
    2050:	02400044 	movi	r9,1
    2054:	003f6906 	br	1dfc <__alt_data_end+0xff001dfc>
    2058:	04c00304 	movi	r19,12
    205c:	024000c4 	movi	r9,3
    2060:	003f6606 	br	1dfc <__alt_data_end+0xff001dfc>
    2064:	01400434 	movhi	r5,16
    2068:	0007883a 	mov	r3,zero
    206c:	297fffc4 	addi	r5,r5,-1
    2070:	04bfffc4 	movi	r18,-1
    2074:	0081ffc4 	movi	r2,2047
    2078:	003fa106 	br	1f00 <__alt_data_end+0xff001f00>
    207c:	00c00044 	movi	r3,1
    2080:	1887c83a 	sub	r3,r3,r2
    2084:	01000e04 	movi	r4,56
    2088:	20c1210e 	bge	r4,r3,2510 <__divdf3+0x78c>
    208c:	98c0004c 	andi	r3,r19,1
    2090:	0005883a 	mov	r2,zero
    2094:	000b883a 	mov	r5,zero
    2098:	0025883a 	mov	r18,zero
    209c:	003f9806 	br	1f00 <__alt_data_end+0xff001f00>
    20a0:	8c00fd36 	bltu	r17,r16,2498 <__divdf3+0x714>
    20a4:	8440fb26 	beq	r16,r17,2494 <__divdf3+0x710>
    20a8:	8007883a 	mov	r3,r16
    20ac:	ad7fffc4 	addi	r21,r21,-1
    20b0:	0021883a 	mov	r16,zero
    20b4:	4004d63a 	srli	r2,r8,24
    20b8:	8822923a 	slli	r17,r17,8
    20bc:	1809883a 	mov	r4,r3
    20c0:	402c923a 	slli	r22,r8,8
    20c4:	88b8b03a 	or	fp,r17,r2
    20c8:	e028d43a 	srli	r20,fp,16
    20cc:	d8c00015 	stw	r3,0(sp)
    20d0:	e5ffffcc 	andi	r23,fp,65535
    20d4:	a00b883a 	mov	r5,r20
    20d8:	0001cc80 	call	1cc8 <__udivsi3>
    20dc:	d8c00017 	ldw	r3,0(sp)
    20e0:	a00b883a 	mov	r5,r20
    20e4:	d8800315 	stw	r2,12(sp)
    20e8:	1809883a 	mov	r4,r3
    20ec:	0001d2c0 	call	1d2c <__umodsi3>
    20f0:	d9800317 	ldw	r6,12(sp)
    20f4:	1006943a 	slli	r3,r2,16
    20f8:	9004d43a 	srli	r2,r18,16
    20fc:	b9a3383a 	mul	r17,r23,r6
    2100:	10c4b03a 	or	r2,r2,r3
    2104:	1440062e 	bgeu	r2,r17,2120 <__divdf3+0x39c>
    2108:	1705883a 	add	r2,r2,fp
    210c:	30ffffc4 	addi	r3,r6,-1
    2110:	1700ee36 	bltu	r2,fp,24cc <__divdf3+0x748>
    2114:	1440ed2e 	bgeu	r2,r17,24cc <__divdf3+0x748>
    2118:	31bfff84 	addi	r6,r6,-2
    211c:	1705883a 	add	r2,r2,fp
    2120:	1463c83a 	sub	r17,r2,r17
    2124:	a00b883a 	mov	r5,r20
    2128:	8809883a 	mov	r4,r17
    212c:	d9800315 	stw	r6,12(sp)
    2130:	0001cc80 	call	1cc8 <__udivsi3>
    2134:	a00b883a 	mov	r5,r20
    2138:	8809883a 	mov	r4,r17
    213c:	d8800215 	stw	r2,8(sp)
    2140:	0001d2c0 	call	1d2c <__umodsi3>
    2144:	d9c00217 	ldw	r7,8(sp)
    2148:	1004943a 	slli	r2,r2,16
    214c:	94bfffcc 	andi	r18,r18,65535
    2150:	b9d1383a 	mul	r8,r23,r7
    2154:	90a4b03a 	or	r18,r18,r2
    2158:	d9800317 	ldw	r6,12(sp)
    215c:	9200062e 	bgeu	r18,r8,2178 <__divdf3+0x3f4>
    2160:	9725883a 	add	r18,r18,fp
    2164:	38bfffc4 	addi	r2,r7,-1
    2168:	9700d636 	bltu	r18,fp,24c4 <__divdf3+0x740>
    216c:	9200d52e 	bgeu	r18,r8,24c4 <__divdf3+0x740>
    2170:	39ffff84 	addi	r7,r7,-2
    2174:	9725883a 	add	r18,r18,fp
    2178:	3004943a 	slli	r2,r6,16
    217c:	b012d43a 	srli	r9,r22,16
    2180:	b1bfffcc 	andi	r6,r22,65535
    2184:	11e2b03a 	or	r17,r2,r7
    2188:	8806d43a 	srli	r3,r17,16
    218c:	893fffcc 	andi	r4,r17,65535
    2190:	218b383a 	mul	r5,r4,r6
    2194:	30c5383a 	mul	r2,r6,r3
    2198:	2249383a 	mul	r4,r4,r9
    219c:	280ed43a 	srli	r7,r5,16
    21a0:	9225c83a 	sub	r18,r18,r8
    21a4:	2089883a 	add	r4,r4,r2
    21a8:	3909883a 	add	r4,r7,r4
    21ac:	1a47383a 	mul	r3,r3,r9
    21b0:	2080022e 	bgeu	r4,r2,21bc <__divdf3+0x438>
    21b4:	00800074 	movhi	r2,1
    21b8:	1887883a 	add	r3,r3,r2
    21bc:	2004d43a 	srli	r2,r4,16
    21c0:	2008943a 	slli	r4,r4,16
    21c4:	297fffcc 	andi	r5,r5,65535
    21c8:	10c7883a 	add	r3,r2,r3
    21cc:	2149883a 	add	r4,r4,r5
    21d0:	90c0a536 	bltu	r18,r3,2468 <__divdf3+0x6e4>
    21d4:	90c0bf26 	beq	r18,r3,24d4 <__divdf3+0x750>
    21d8:	90c7c83a 	sub	r3,r18,r3
    21dc:	810fc83a 	sub	r7,r16,r4
    21e0:	81e5803a 	cmpltu	r18,r16,r7
    21e4:	1ca5c83a 	sub	r18,r3,r18
    21e8:	e480c126 	beq	fp,r18,24f0 <__divdf3+0x76c>
    21ec:	a00b883a 	mov	r5,r20
    21f0:	9009883a 	mov	r4,r18
    21f4:	d9800315 	stw	r6,12(sp)
    21f8:	d9c00215 	stw	r7,8(sp)
    21fc:	da400115 	stw	r9,4(sp)
    2200:	0001cc80 	call	1cc8 <__udivsi3>
    2204:	a00b883a 	mov	r5,r20
    2208:	9009883a 	mov	r4,r18
    220c:	d8800015 	stw	r2,0(sp)
    2210:	0001d2c0 	call	1d2c <__umodsi3>
    2214:	d9c00217 	ldw	r7,8(sp)
    2218:	da000017 	ldw	r8,0(sp)
    221c:	1006943a 	slli	r3,r2,16
    2220:	3804d43a 	srli	r2,r7,16
    2224:	ba21383a 	mul	r16,r23,r8
    2228:	d9800317 	ldw	r6,12(sp)
    222c:	10c4b03a 	or	r2,r2,r3
    2230:	da400117 	ldw	r9,4(sp)
    2234:	1400062e 	bgeu	r2,r16,2250 <__divdf3+0x4cc>
    2238:	1705883a 	add	r2,r2,fp
    223c:	40ffffc4 	addi	r3,r8,-1
    2240:	1700ad36 	bltu	r2,fp,24f8 <__divdf3+0x774>
    2244:	1400ac2e 	bgeu	r2,r16,24f8 <__divdf3+0x774>
    2248:	423fff84 	addi	r8,r8,-2
    224c:	1705883a 	add	r2,r2,fp
    2250:	1421c83a 	sub	r16,r2,r16
    2254:	a00b883a 	mov	r5,r20
    2258:	8009883a 	mov	r4,r16
    225c:	d9800315 	stw	r6,12(sp)
    2260:	d9c00215 	stw	r7,8(sp)
    2264:	da000015 	stw	r8,0(sp)
    2268:	da400115 	stw	r9,4(sp)
    226c:	0001cc80 	call	1cc8 <__udivsi3>
    2270:	8009883a 	mov	r4,r16
    2274:	a00b883a 	mov	r5,r20
    2278:	1025883a 	mov	r18,r2
    227c:	0001d2c0 	call	1d2c <__umodsi3>
    2280:	d9c00217 	ldw	r7,8(sp)
    2284:	1004943a 	slli	r2,r2,16
    2288:	bcaf383a 	mul	r23,r23,r18
    228c:	393fffcc 	andi	r4,r7,65535
    2290:	2088b03a 	or	r4,r4,r2
    2294:	d9800317 	ldw	r6,12(sp)
    2298:	da000017 	ldw	r8,0(sp)
    229c:	da400117 	ldw	r9,4(sp)
    22a0:	25c0062e 	bgeu	r4,r23,22bc <__divdf3+0x538>
    22a4:	2709883a 	add	r4,r4,fp
    22a8:	90bfffc4 	addi	r2,r18,-1
    22ac:	27009436 	bltu	r4,fp,2500 <__divdf3+0x77c>
    22b0:	25c0932e 	bgeu	r4,r23,2500 <__divdf3+0x77c>
    22b4:	94bfff84 	addi	r18,r18,-2
    22b8:	2709883a 	add	r4,r4,fp
    22bc:	4004943a 	slli	r2,r8,16
    22c0:	25efc83a 	sub	r23,r4,r23
    22c4:	1490b03a 	or	r8,r2,r18
    22c8:	4008d43a 	srli	r4,r8,16
    22cc:	40ffffcc 	andi	r3,r8,65535
    22d0:	30c5383a 	mul	r2,r6,r3
    22d4:	1a47383a 	mul	r3,r3,r9
    22d8:	310d383a 	mul	r6,r6,r4
    22dc:	100ad43a 	srli	r5,r2,16
    22e0:	4913383a 	mul	r9,r9,r4
    22e4:	1987883a 	add	r3,r3,r6
    22e8:	28c7883a 	add	r3,r5,r3
    22ec:	1980022e 	bgeu	r3,r6,22f8 <__divdf3+0x574>
    22f0:	01000074 	movhi	r4,1
    22f4:	4913883a 	add	r9,r9,r4
    22f8:	1808d43a 	srli	r4,r3,16
    22fc:	1806943a 	slli	r3,r3,16
    2300:	10bfffcc 	andi	r2,r2,65535
    2304:	2253883a 	add	r9,r4,r9
    2308:	1887883a 	add	r3,r3,r2
    230c:	ba403836 	bltu	r23,r9,23f0 <__divdf3+0x66c>
    2310:	ba403626 	beq	r23,r9,23ec <__divdf3+0x668>
    2314:	42000054 	ori	r8,r8,1
    2318:	a880ffc4 	addi	r2,r21,1023
    231c:	00bf570e 	bge	zero,r2,207c <__alt_data_end+0xff00207c>
    2320:	40c001cc 	andi	r3,r8,7
    2324:	18000726 	beq	r3,zero,2344 <__divdf3+0x5c0>
    2328:	40c003cc 	andi	r3,r8,15
    232c:	01000104 	movi	r4,4
    2330:	19000426 	beq	r3,r4,2344 <__divdf3+0x5c0>
    2334:	4107883a 	add	r3,r8,r4
    2338:	1a11803a 	cmpltu	r8,r3,r8
    233c:	8a23883a 	add	r17,r17,r8
    2340:	1811883a 	mov	r8,r3
    2344:	88c0402c 	andhi	r3,r17,256
    2348:	18000426 	beq	r3,zero,235c <__divdf3+0x5d8>
    234c:	00ffc034 	movhi	r3,65280
    2350:	18ffffc4 	addi	r3,r3,-1
    2354:	a8810004 	addi	r2,r21,1024
    2358:	88e2703a 	and	r17,r17,r3
    235c:	00c1ff84 	movi	r3,2046
    2360:	18bee316 	blt	r3,r2,1ef0 <__alt_data_end+0xff001ef0>
    2364:	8824977a 	slli	r18,r17,29
    2368:	4010d0fa 	srli	r8,r8,3
    236c:	8822927a 	slli	r17,r17,9
    2370:	1081ffcc 	andi	r2,r2,2047
    2374:	9224b03a 	or	r18,r18,r8
    2378:	880ad33a 	srli	r5,r17,12
    237c:	98c0004c 	andi	r3,r19,1
    2380:	003edf06 	br	1f00 <__alt_data_end+0xff001f00>
    2384:	8080022c 	andhi	r2,r16,8
    2388:	10001226 	beq	r2,zero,23d4 <__divdf3+0x650>
    238c:	8880022c 	andhi	r2,r17,8
    2390:	1000101e 	bne	r2,zero,23d4 <__divdf3+0x650>
    2394:	00800434 	movhi	r2,16
    2398:	89400234 	orhi	r5,r17,8
    239c:	10bfffc4 	addi	r2,r2,-1
    23a0:	b007883a 	mov	r3,r22
    23a4:	288a703a 	and	r5,r5,r2
    23a8:	4025883a 	mov	r18,r8
    23ac:	003f3106 	br	2074 <__alt_data_end+0xff002074>
    23b0:	008000c4 	movi	r2,3
    23b4:	3880a626 	beq	r7,r2,2650 <__divdf3+0x8cc>
    23b8:	00800044 	movi	r2,1
    23bc:	3880521e 	bne	r7,r2,2508 <__divdf3+0x784>
    23c0:	b807883a 	mov	r3,r23
    23c4:	0005883a 	mov	r2,zero
    23c8:	000b883a 	mov	r5,zero
    23cc:	0025883a 	mov	r18,zero
    23d0:	003ecb06 	br	1f00 <__alt_data_end+0xff001f00>
    23d4:	00800434 	movhi	r2,16
    23d8:	81400234 	orhi	r5,r16,8
    23dc:	10bfffc4 	addi	r2,r2,-1
    23e0:	a007883a 	mov	r3,r20
    23e4:	288a703a 	and	r5,r5,r2
    23e8:	003f2206 	br	2074 <__alt_data_end+0xff002074>
    23ec:	183fca26 	beq	r3,zero,2318 <__alt_data_end+0xff002318>
    23f0:	e5ef883a 	add	r23,fp,r23
    23f4:	40bfffc4 	addi	r2,r8,-1
    23f8:	bf00392e 	bgeu	r23,fp,24e0 <__divdf3+0x75c>
    23fc:	1011883a 	mov	r8,r2
    2400:	ba7fc41e 	bne	r23,r9,2314 <__alt_data_end+0xff002314>
    2404:	b0ffc31e 	bne	r22,r3,2314 <__alt_data_end+0xff002314>
    2408:	003fc306 	br	2318 <__alt_data_end+0xff002318>
    240c:	143ff604 	addi	r16,r2,-40
    2410:	9c20983a 	sll	r16,r19,r16
    2414:	0025883a 	mov	r18,zero
    2418:	003ee206 	br	1fa4 <__alt_data_end+0xff001fa4>
    241c:	d9800315 	stw	r6,12(sp)
    2420:	d9c00215 	stw	r7,8(sp)
    2424:	00027140 	call	2714 <__clzsi2>
    2428:	10800804 	addi	r2,r2,32
    242c:	d9c00217 	ldw	r7,8(sp)
    2430:	d9800317 	ldw	r6,12(sp)
    2434:	003ed106 	br	1f7c <__alt_data_end+0xff001f7c>
    2438:	147ff604 	addi	r17,r2,-40
    243c:	3462983a 	sll	r17,r6,r17
    2440:	0011883a 	mov	r8,zero
    2444:	003ef506 	br	201c <__alt_data_end+0xff00201c>
    2448:	3009883a 	mov	r4,r6
    244c:	d9800315 	stw	r6,12(sp)
    2450:	da400115 	stw	r9,4(sp)
    2454:	00027140 	call	2714 <__clzsi2>
    2458:	10800804 	addi	r2,r2,32
    245c:	da400117 	ldw	r9,4(sp)
    2460:	d9800317 	ldw	r6,12(sp)
    2464:	003ee306 	br	1ff4 <__alt_data_end+0xff001ff4>
    2468:	85a1883a 	add	r16,r16,r22
    246c:	8585803a 	cmpltu	r2,r16,r22
    2470:	1705883a 	add	r2,r2,fp
    2474:	14a5883a 	add	r18,r2,r18
    2478:	88bfffc4 	addi	r2,r17,-1
    247c:	e4800c2e 	bgeu	fp,r18,24b0 <__divdf3+0x72c>
    2480:	90c03e36 	bltu	r18,r3,257c <__divdf3+0x7f8>
    2484:	1c806926 	beq	r3,r18,262c <__divdf3+0x8a8>
    2488:	90c7c83a 	sub	r3,r18,r3
    248c:	1023883a 	mov	r17,r2
    2490:	003f5206 	br	21dc <__alt_data_end+0xff0021dc>
    2494:	923f0436 	bltu	r18,r8,20a8 <__alt_data_end+0xff0020a8>
    2498:	800897fa 	slli	r4,r16,31
    249c:	9004d07a 	srli	r2,r18,1
    24a0:	8006d07a 	srli	r3,r16,1
    24a4:	902097fa 	slli	r16,r18,31
    24a8:	20a4b03a 	or	r18,r4,r2
    24ac:	003f0106 	br	20b4 <__alt_data_end+0xff0020b4>
    24b0:	e4bff51e 	bne	fp,r18,2488 <__alt_data_end+0xff002488>
    24b4:	85bff22e 	bgeu	r16,r22,2480 <__alt_data_end+0xff002480>
    24b8:	e0c7c83a 	sub	r3,fp,r3
    24bc:	1023883a 	mov	r17,r2
    24c0:	003f4606 	br	21dc <__alt_data_end+0xff0021dc>
    24c4:	100f883a 	mov	r7,r2
    24c8:	003f2b06 	br	2178 <__alt_data_end+0xff002178>
    24cc:	180d883a 	mov	r6,r3
    24d0:	003f1306 	br	2120 <__alt_data_end+0xff002120>
    24d4:	813fe436 	bltu	r16,r4,2468 <__alt_data_end+0xff002468>
    24d8:	0007883a 	mov	r3,zero
    24dc:	003f3f06 	br	21dc <__alt_data_end+0xff0021dc>
    24e0:	ba402c36 	bltu	r23,r9,2594 <__divdf3+0x810>
    24e4:	4dc05426 	beq	r9,r23,2638 <__divdf3+0x8b4>
    24e8:	1011883a 	mov	r8,r2
    24ec:	003f8906 	br	2314 <__alt_data_end+0xff002314>
    24f0:	023fffc4 	movi	r8,-1
    24f4:	003f8806 	br	2318 <__alt_data_end+0xff002318>
    24f8:	1811883a 	mov	r8,r3
    24fc:	003f5406 	br	2250 <__alt_data_end+0xff002250>
    2500:	1025883a 	mov	r18,r2
    2504:	003f6d06 	br	22bc <__alt_data_end+0xff0022bc>
    2508:	b827883a 	mov	r19,r23
    250c:	003f8206 	br	2318 <__alt_data_end+0xff002318>
    2510:	010007c4 	movi	r4,31
    2514:	20c02616 	blt	r4,r3,25b0 <__divdf3+0x82c>
    2518:	00800804 	movi	r2,32
    251c:	10c5c83a 	sub	r2,r2,r3
    2520:	888a983a 	sll	r5,r17,r2
    2524:	40c8d83a 	srl	r4,r8,r3
    2528:	4084983a 	sll	r2,r8,r2
    252c:	88e2d83a 	srl	r17,r17,r3
    2530:	2906b03a 	or	r3,r5,r4
    2534:	1004c03a 	cmpne	r2,r2,zero
    2538:	1886b03a 	or	r3,r3,r2
    253c:	188001cc 	andi	r2,r3,7
    2540:	10000726 	beq	r2,zero,2560 <__divdf3+0x7dc>
    2544:	188003cc 	andi	r2,r3,15
    2548:	01000104 	movi	r4,4
    254c:	11000426 	beq	r2,r4,2560 <__divdf3+0x7dc>
    2550:	1805883a 	mov	r2,r3
    2554:	10c00104 	addi	r3,r2,4
    2558:	1885803a 	cmpltu	r2,r3,r2
    255c:	88a3883a 	add	r17,r17,r2
    2560:	8880202c 	andhi	r2,r17,128
    2564:	10002726 	beq	r2,zero,2604 <__divdf3+0x880>
    2568:	98c0004c 	andi	r3,r19,1
    256c:	00800044 	movi	r2,1
    2570:	000b883a 	mov	r5,zero
    2574:	0025883a 	mov	r18,zero
    2578:	003e6106 	br	1f00 <__alt_data_end+0xff001f00>
    257c:	85a1883a 	add	r16,r16,r22
    2580:	8585803a 	cmpltu	r2,r16,r22
    2584:	1705883a 	add	r2,r2,fp
    2588:	14a5883a 	add	r18,r2,r18
    258c:	8c7fff84 	addi	r17,r17,-2
    2590:	003f1106 	br	21d8 <__alt_data_end+0xff0021d8>
    2594:	b589883a 	add	r4,r22,r22
    2598:	25ad803a 	cmpltu	r22,r4,r22
    259c:	b739883a 	add	fp,r22,fp
    25a0:	40bfff84 	addi	r2,r8,-2
    25a4:	bf2f883a 	add	r23,r23,fp
    25a8:	202d883a 	mov	r22,r4
    25ac:	003f9306 	br	23fc <__alt_data_end+0xff0023fc>
    25b0:	013ff844 	movi	r4,-31
    25b4:	2085c83a 	sub	r2,r4,r2
    25b8:	8888d83a 	srl	r4,r17,r2
    25bc:	00800804 	movi	r2,32
    25c0:	18802126 	beq	r3,r2,2648 <__divdf3+0x8c4>
    25c4:	00801004 	movi	r2,64
    25c8:	10c5c83a 	sub	r2,r2,r3
    25cc:	8884983a 	sll	r2,r17,r2
    25d0:	1204b03a 	or	r2,r2,r8
    25d4:	1004c03a 	cmpne	r2,r2,zero
    25d8:	2084b03a 	or	r2,r4,r2
    25dc:	144001cc 	andi	r17,r2,7
    25e0:	88000d1e 	bne	r17,zero,2618 <__divdf3+0x894>
    25e4:	000b883a 	mov	r5,zero
    25e8:	1024d0fa 	srli	r18,r2,3
    25ec:	98c0004c 	andi	r3,r19,1
    25f0:	0005883a 	mov	r2,zero
    25f4:	9464b03a 	or	r18,r18,r17
    25f8:	003e4106 	br	1f00 <__alt_data_end+0xff001f00>
    25fc:	1007883a 	mov	r3,r2
    2600:	0023883a 	mov	r17,zero
    2604:	880a927a 	slli	r5,r17,9
    2608:	1805883a 	mov	r2,r3
    260c:	8822977a 	slli	r17,r17,29
    2610:	280ad33a 	srli	r5,r5,12
    2614:	003ff406 	br	25e8 <__alt_data_end+0xff0025e8>
    2618:	10c003cc 	andi	r3,r2,15
    261c:	01000104 	movi	r4,4
    2620:	193ff626 	beq	r3,r4,25fc <__alt_data_end+0xff0025fc>
    2624:	0023883a 	mov	r17,zero
    2628:	003fca06 	br	2554 <__alt_data_end+0xff002554>
    262c:	813fd336 	bltu	r16,r4,257c <__alt_data_end+0xff00257c>
    2630:	1023883a 	mov	r17,r2
    2634:	003fa806 	br	24d8 <__alt_data_end+0xff0024d8>
    2638:	b0ffd636 	bltu	r22,r3,2594 <__alt_data_end+0xff002594>
    263c:	1011883a 	mov	r8,r2
    2640:	b0ff341e 	bne	r22,r3,2314 <__alt_data_end+0xff002314>
    2644:	003f3406 	br	2318 <__alt_data_end+0xff002318>
    2648:	0005883a 	mov	r2,zero
    264c:	003fe006 	br	25d0 <__alt_data_end+0xff0025d0>
    2650:	00800434 	movhi	r2,16
    2654:	89400234 	orhi	r5,r17,8
    2658:	10bfffc4 	addi	r2,r2,-1
    265c:	b807883a 	mov	r3,r23
    2660:	288a703a 	and	r5,r5,r2
    2664:	4025883a 	mov	r18,r8
    2668:	003e8206 	br	2074 <__alt_data_end+0xff002074>

0000266c <__floatunsidf>:
    266c:	defffe04 	addi	sp,sp,-8
    2670:	dc000015 	stw	r16,0(sp)
    2674:	dfc00115 	stw	ra,4(sp)
    2678:	2021883a 	mov	r16,r4
    267c:	20002226 	beq	r4,zero,2708 <__floatunsidf+0x9c>
    2680:	00027140 	call	2714 <__clzsi2>
    2684:	01010784 	movi	r4,1054
    2688:	2089c83a 	sub	r4,r4,r2
    268c:	01810cc4 	movi	r6,1075
    2690:	310dc83a 	sub	r6,r6,r4
    2694:	00c007c4 	movi	r3,31
    2698:	1980120e 	bge	r3,r6,26e4 <__floatunsidf+0x78>
    269c:	00c104c4 	movi	r3,1043
    26a0:	1907c83a 	sub	r3,r3,r4
    26a4:	80ca983a 	sll	r5,r16,r3
    26a8:	00800434 	movhi	r2,16
    26ac:	10bfffc4 	addi	r2,r2,-1
    26b0:	2101ffcc 	andi	r4,r4,2047
    26b4:	0021883a 	mov	r16,zero
    26b8:	288a703a 	and	r5,r5,r2
    26bc:	2008953a 	slli	r4,r4,20
    26c0:	00c00434 	movhi	r3,16
    26c4:	18ffffc4 	addi	r3,r3,-1
    26c8:	28c6703a 	and	r3,r5,r3
    26cc:	8005883a 	mov	r2,r16
    26d0:	1906b03a 	or	r3,r3,r4
    26d4:	dfc00117 	ldw	ra,4(sp)
    26d8:	dc000017 	ldw	r16,0(sp)
    26dc:	dec00204 	addi	sp,sp,8
    26e0:	f800283a 	ret
    26e4:	00c002c4 	movi	r3,11
    26e8:	188bc83a 	sub	r5,r3,r2
    26ec:	814ad83a 	srl	r5,r16,r5
    26f0:	00c00434 	movhi	r3,16
    26f4:	18ffffc4 	addi	r3,r3,-1
    26f8:	81a0983a 	sll	r16,r16,r6
    26fc:	2101ffcc 	andi	r4,r4,2047
    2700:	28ca703a 	and	r5,r5,r3
    2704:	003fed06 	br	26bc <__alt_data_end+0xff0026bc>
    2708:	0009883a 	mov	r4,zero
    270c:	000b883a 	mov	r5,zero
    2710:	003fea06 	br	26bc <__alt_data_end+0xff0026bc>

00002714 <__clzsi2>:
    2714:	00bfffd4 	movui	r2,65535
    2718:	11000536 	bltu	r2,r4,2730 <__clzsi2+0x1c>
    271c:	00803fc4 	movi	r2,255
    2720:	11000f36 	bltu	r2,r4,2760 <__clzsi2+0x4c>
    2724:	00800804 	movi	r2,32
    2728:	0007883a 	mov	r3,zero
    272c:	00000506 	br	2744 <__clzsi2+0x30>
    2730:	00804034 	movhi	r2,256
    2734:	10bfffc4 	addi	r2,r2,-1
    2738:	11000c2e 	bgeu	r2,r4,276c <__clzsi2+0x58>
    273c:	00800204 	movi	r2,8
    2740:	00c00604 	movi	r3,24
    2744:	20c8d83a 	srl	r4,r4,r3
    2748:	00c00074 	movhi	r3,1
    274c:	18c51184 	addi	r3,r3,5190
    2750:	1909883a 	add	r4,r3,r4
    2754:	20c00003 	ldbu	r3,0(r4)
    2758:	10c5c83a 	sub	r2,r2,r3
    275c:	f800283a 	ret
    2760:	00800604 	movi	r2,24
    2764:	00c00204 	movi	r3,8
    2768:	003ff606 	br	2744 <__alt_data_end+0xff002744>
    276c:	00800404 	movi	r2,16
    2770:	1007883a 	mov	r3,r2
    2774:	003ff306 	br	2744 <__alt_data_end+0xff002744>

00002778 <malloc>:
    2778:	00800074 	movhi	r2,1
    277c:	108cbd04 	addi	r2,r2,13044
    2780:	200b883a 	mov	r5,r4
    2784:	11000017 	ldw	r4,0(r2)
    2788:	00027a01 	jmpi	27a0 <_malloc_r>

0000278c <free>:
    278c:	00800074 	movhi	r2,1
    2790:	108cbd04 	addi	r2,r2,13044
    2794:	200b883a 	mov	r5,r4
    2798:	11000017 	ldw	r4,0(r2)
    279c:	00075f01 	jmpi	75f0 <_free_r>

000027a0 <_malloc_r>:
    27a0:	defff504 	addi	sp,sp,-44
    27a4:	dc800315 	stw	r18,12(sp)
    27a8:	dfc00a15 	stw	ra,40(sp)
    27ac:	df000915 	stw	fp,36(sp)
    27b0:	ddc00815 	stw	r23,32(sp)
    27b4:	dd800715 	stw	r22,28(sp)
    27b8:	dd400615 	stw	r21,24(sp)
    27bc:	dd000515 	stw	r20,20(sp)
    27c0:	dcc00415 	stw	r19,16(sp)
    27c4:	dc400215 	stw	r17,8(sp)
    27c8:	dc000115 	stw	r16,4(sp)
    27cc:	288002c4 	addi	r2,r5,11
    27d0:	00c00584 	movi	r3,22
    27d4:	2025883a 	mov	r18,r4
    27d8:	18807f2e 	bgeu	r3,r2,29d8 <_malloc_r+0x238>
    27dc:	047ffe04 	movi	r17,-8
    27e0:	1462703a 	and	r17,r2,r17
    27e4:	8800a316 	blt	r17,zero,2a74 <_malloc_r+0x2d4>
    27e8:	8940a236 	bltu	r17,r5,2a74 <_malloc_r+0x2d4>
    27ec:	000ea940 	call	ea94 <__malloc_lock>
    27f0:	00807dc4 	movi	r2,503
    27f4:	1441e92e 	bgeu	r2,r17,2f9c <_malloc_r+0x7fc>
    27f8:	8804d27a 	srli	r2,r17,9
    27fc:	1000a126 	beq	r2,zero,2a84 <_malloc_r+0x2e4>
    2800:	00c00104 	movi	r3,4
    2804:	18811e36 	bltu	r3,r2,2c80 <_malloc_r+0x4e0>
    2808:	8804d1ba 	srli	r2,r17,6
    280c:	12000e44 	addi	r8,r2,57
    2810:	11c00e04 	addi	r7,r2,56
    2814:	4209883a 	add	r4,r8,r8
    2818:	04c00074 	movhi	r19,1
    281c:	2109883a 	add	r4,r4,r4
    2820:	9cc60f04 	addi	r19,r19,6204
    2824:	2109883a 	add	r4,r4,r4
    2828:	9909883a 	add	r4,r19,r4
    282c:	24000117 	ldw	r16,4(r4)
    2830:	213ffe04 	addi	r4,r4,-8
    2834:	24009726 	beq	r4,r16,2a94 <_malloc_r+0x2f4>
    2838:	80800117 	ldw	r2,4(r16)
    283c:	01bfff04 	movi	r6,-4
    2840:	014003c4 	movi	r5,15
    2844:	1184703a 	and	r2,r2,r6
    2848:	1447c83a 	sub	r3,r2,r17
    284c:	28c00716 	blt	r5,r3,286c <_malloc_r+0xcc>
    2850:	1800920e 	bge	r3,zero,2a9c <_malloc_r+0x2fc>
    2854:	84000317 	ldw	r16,12(r16)
    2858:	24008e26 	beq	r4,r16,2a94 <_malloc_r+0x2f4>
    285c:	80800117 	ldw	r2,4(r16)
    2860:	1184703a 	and	r2,r2,r6
    2864:	1447c83a 	sub	r3,r2,r17
    2868:	28fff90e 	bge	r5,r3,2850 <__alt_data_end+0xff002850>
    286c:	3809883a 	mov	r4,r7
    2870:	01800074 	movhi	r6,1
    2874:	9c000417 	ldw	r16,16(r19)
    2878:	31860f04 	addi	r6,r6,6204
    287c:	32000204 	addi	r8,r6,8
    2880:	82013426 	beq	r16,r8,2d54 <_malloc_r+0x5b4>
    2884:	80c00117 	ldw	r3,4(r16)
    2888:	00bfff04 	movi	r2,-4
    288c:	188e703a 	and	r7,r3,r2
    2890:	3c45c83a 	sub	r2,r7,r17
    2894:	00c003c4 	movi	r3,15
    2898:	18811f16 	blt	r3,r2,2d18 <_malloc_r+0x578>
    289c:	32000515 	stw	r8,20(r6)
    28a0:	32000415 	stw	r8,16(r6)
    28a4:	10007f0e 	bge	r2,zero,2aa4 <_malloc_r+0x304>
    28a8:	00807fc4 	movi	r2,511
    28ac:	11c0fd36 	bltu	r2,r7,2ca4 <_malloc_r+0x504>
    28b0:	3806d0fa 	srli	r3,r7,3
    28b4:	01c00044 	movi	r7,1
    28b8:	30800117 	ldw	r2,4(r6)
    28bc:	19400044 	addi	r5,r3,1
    28c0:	294b883a 	add	r5,r5,r5
    28c4:	1807d0ba 	srai	r3,r3,2
    28c8:	294b883a 	add	r5,r5,r5
    28cc:	294b883a 	add	r5,r5,r5
    28d0:	298b883a 	add	r5,r5,r6
    28d4:	38c6983a 	sll	r3,r7,r3
    28d8:	29c00017 	ldw	r7,0(r5)
    28dc:	2a7ffe04 	addi	r9,r5,-8
    28e0:	1886b03a 	or	r3,r3,r2
    28e4:	82400315 	stw	r9,12(r16)
    28e8:	81c00215 	stw	r7,8(r16)
    28ec:	30c00115 	stw	r3,4(r6)
    28f0:	2c000015 	stw	r16,0(r5)
    28f4:	3c000315 	stw	r16,12(r7)
    28f8:	2005d0ba 	srai	r2,r4,2
    28fc:	01400044 	movi	r5,1
    2900:	288a983a 	sll	r5,r5,r2
    2904:	19406f36 	bltu	r3,r5,2ac4 <_malloc_r+0x324>
    2908:	28c4703a 	and	r2,r5,r3
    290c:	10000a1e 	bne	r2,zero,2938 <_malloc_r+0x198>
    2910:	00bfff04 	movi	r2,-4
    2914:	294b883a 	add	r5,r5,r5
    2918:	2088703a 	and	r4,r4,r2
    291c:	28c4703a 	and	r2,r5,r3
    2920:	21000104 	addi	r4,r4,4
    2924:	1000041e 	bne	r2,zero,2938 <_malloc_r+0x198>
    2928:	294b883a 	add	r5,r5,r5
    292c:	28c4703a 	and	r2,r5,r3
    2930:	21000104 	addi	r4,r4,4
    2934:	103ffc26 	beq	r2,zero,2928 <__alt_data_end+0xff002928>
    2938:	02bfff04 	movi	r10,-4
    293c:	024003c4 	movi	r9,15
    2940:	21800044 	addi	r6,r4,1
    2944:	318d883a 	add	r6,r6,r6
    2948:	318d883a 	add	r6,r6,r6
    294c:	318d883a 	add	r6,r6,r6
    2950:	998d883a 	add	r6,r19,r6
    2954:	333ffe04 	addi	r12,r6,-8
    2958:	2017883a 	mov	r11,r4
    295c:	31800104 	addi	r6,r6,4
    2960:	34000017 	ldw	r16,0(r6)
    2964:	31fffd04 	addi	r7,r6,-12
    2968:	81c0041e 	bne	r16,r7,297c <_malloc_r+0x1dc>
    296c:	0000fb06 	br	2d5c <_malloc_r+0x5bc>
    2970:	1801030e 	bge	r3,zero,2d80 <_malloc_r+0x5e0>
    2974:	84000317 	ldw	r16,12(r16)
    2978:	81c0f826 	beq	r16,r7,2d5c <_malloc_r+0x5bc>
    297c:	80800117 	ldw	r2,4(r16)
    2980:	1284703a 	and	r2,r2,r10
    2984:	1447c83a 	sub	r3,r2,r17
    2988:	48fff90e 	bge	r9,r3,2970 <__alt_data_end+0xff002970>
    298c:	80800317 	ldw	r2,12(r16)
    2990:	81000217 	ldw	r4,8(r16)
    2994:	89400054 	ori	r5,r17,1
    2998:	81400115 	stw	r5,4(r16)
    299c:	20800315 	stw	r2,12(r4)
    29a0:	11000215 	stw	r4,8(r2)
    29a4:	8463883a 	add	r17,r16,r17
    29a8:	9c400515 	stw	r17,20(r19)
    29ac:	9c400415 	stw	r17,16(r19)
    29b0:	18800054 	ori	r2,r3,1
    29b4:	88800115 	stw	r2,4(r17)
    29b8:	8a000315 	stw	r8,12(r17)
    29bc:	8a000215 	stw	r8,8(r17)
    29c0:	88e3883a 	add	r17,r17,r3
    29c4:	88c00015 	stw	r3,0(r17)
    29c8:	9009883a 	mov	r4,r18
    29cc:	000eab80 	call	eab8 <__malloc_unlock>
    29d0:	80800204 	addi	r2,r16,8
    29d4:	00001b06 	br	2a44 <_malloc_r+0x2a4>
    29d8:	04400404 	movi	r17,16
    29dc:	89402536 	bltu	r17,r5,2a74 <_malloc_r+0x2d4>
    29e0:	000ea940 	call	ea94 <__malloc_lock>
    29e4:	00800184 	movi	r2,6
    29e8:	01000084 	movi	r4,2
    29ec:	04c00074 	movhi	r19,1
    29f0:	1085883a 	add	r2,r2,r2
    29f4:	9cc60f04 	addi	r19,r19,6204
    29f8:	1085883a 	add	r2,r2,r2
    29fc:	9885883a 	add	r2,r19,r2
    2a00:	14000117 	ldw	r16,4(r2)
    2a04:	10fffe04 	addi	r3,r2,-8
    2a08:	80c0d926 	beq	r16,r3,2d70 <_malloc_r+0x5d0>
    2a0c:	80c00117 	ldw	r3,4(r16)
    2a10:	81000317 	ldw	r4,12(r16)
    2a14:	00bfff04 	movi	r2,-4
    2a18:	1884703a 	and	r2,r3,r2
    2a1c:	81400217 	ldw	r5,8(r16)
    2a20:	8085883a 	add	r2,r16,r2
    2a24:	10c00117 	ldw	r3,4(r2)
    2a28:	29000315 	stw	r4,12(r5)
    2a2c:	21400215 	stw	r5,8(r4)
    2a30:	18c00054 	ori	r3,r3,1
    2a34:	10c00115 	stw	r3,4(r2)
    2a38:	9009883a 	mov	r4,r18
    2a3c:	000eab80 	call	eab8 <__malloc_unlock>
    2a40:	80800204 	addi	r2,r16,8
    2a44:	dfc00a17 	ldw	ra,40(sp)
    2a48:	df000917 	ldw	fp,36(sp)
    2a4c:	ddc00817 	ldw	r23,32(sp)
    2a50:	dd800717 	ldw	r22,28(sp)
    2a54:	dd400617 	ldw	r21,24(sp)
    2a58:	dd000517 	ldw	r20,20(sp)
    2a5c:	dcc00417 	ldw	r19,16(sp)
    2a60:	dc800317 	ldw	r18,12(sp)
    2a64:	dc400217 	ldw	r17,8(sp)
    2a68:	dc000117 	ldw	r16,4(sp)
    2a6c:	dec00b04 	addi	sp,sp,44
    2a70:	f800283a 	ret
    2a74:	00800304 	movi	r2,12
    2a78:	90800015 	stw	r2,0(r18)
    2a7c:	0005883a 	mov	r2,zero
    2a80:	003ff006 	br	2a44 <__alt_data_end+0xff002a44>
    2a84:	01002004 	movi	r4,128
    2a88:	02001004 	movi	r8,64
    2a8c:	01c00fc4 	movi	r7,63
    2a90:	003f6106 	br	2818 <__alt_data_end+0xff002818>
    2a94:	4009883a 	mov	r4,r8
    2a98:	003f7506 	br	2870 <__alt_data_end+0xff002870>
    2a9c:	81000317 	ldw	r4,12(r16)
    2aa0:	003fde06 	br	2a1c <__alt_data_end+0xff002a1c>
    2aa4:	81c5883a 	add	r2,r16,r7
    2aa8:	11400117 	ldw	r5,4(r2)
    2aac:	9009883a 	mov	r4,r18
    2ab0:	29400054 	ori	r5,r5,1
    2ab4:	11400115 	stw	r5,4(r2)
    2ab8:	000eab80 	call	eab8 <__malloc_unlock>
    2abc:	80800204 	addi	r2,r16,8
    2ac0:	003fe006 	br	2a44 <__alt_data_end+0xff002a44>
    2ac4:	9c000217 	ldw	r16,8(r19)
    2ac8:	00bfff04 	movi	r2,-4
    2acc:	85800117 	ldw	r22,4(r16)
    2ad0:	b0ac703a 	and	r22,r22,r2
    2ad4:	b4400336 	bltu	r22,r17,2ae4 <_malloc_r+0x344>
    2ad8:	b445c83a 	sub	r2,r22,r17
    2adc:	00c003c4 	movi	r3,15
    2ae0:	18805d16 	blt	r3,r2,2c58 <_malloc_r+0x4b8>
    2ae4:	05c00074 	movhi	r23,1
    2ae8:	00800074 	movhi	r2,1
    2aec:	1093d904 	addi	r2,r2,20324
    2af0:	bdccba04 	addi	r23,r23,13032
    2af4:	15400017 	ldw	r21,0(r2)
    2af8:	b8c00017 	ldw	r3,0(r23)
    2afc:	00bfffc4 	movi	r2,-1
    2b00:	858d883a 	add	r6,r16,r22
    2b04:	8d6b883a 	add	r21,r17,r21
    2b08:	1880ea26 	beq	r3,r2,2eb4 <_malloc_r+0x714>
    2b0c:	ad4403c4 	addi	r21,r21,4111
    2b10:	00bc0004 	movi	r2,-4096
    2b14:	a8aa703a 	and	r21,r21,r2
    2b18:	a80b883a 	mov	r5,r21
    2b1c:	9009883a 	mov	r4,r18
    2b20:	d9800015 	stw	r6,0(sp)
    2b24:	00030ec0 	call	30ec <_sbrk_r>
    2b28:	1029883a 	mov	r20,r2
    2b2c:	00bfffc4 	movi	r2,-1
    2b30:	d9800017 	ldw	r6,0(sp)
    2b34:	a080e826 	beq	r20,r2,2ed8 <_malloc_r+0x738>
    2b38:	a180a636 	bltu	r20,r6,2dd4 <_malloc_r+0x634>
    2b3c:	07000074 	movhi	fp,1
    2b40:	e713e704 	addi	fp,fp,20380
    2b44:	e0800017 	ldw	r2,0(fp)
    2b48:	a887883a 	add	r3,r21,r2
    2b4c:	e0c00015 	stw	r3,0(fp)
    2b50:	3500e626 	beq	r6,r20,2eec <_malloc_r+0x74c>
    2b54:	b9000017 	ldw	r4,0(r23)
    2b58:	00bfffc4 	movi	r2,-1
    2b5c:	2080ee26 	beq	r4,r2,2f18 <_malloc_r+0x778>
    2b60:	a185c83a 	sub	r2,r20,r6
    2b64:	10c5883a 	add	r2,r2,r3
    2b68:	e0800015 	stw	r2,0(fp)
    2b6c:	a0c001cc 	andi	r3,r20,7
    2b70:	1800bc26 	beq	r3,zero,2e64 <_malloc_r+0x6c4>
    2b74:	a0e9c83a 	sub	r20,r20,r3
    2b78:	00840204 	movi	r2,4104
    2b7c:	a5000204 	addi	r20,r20,8
    2b80:	10c7c83a 	sub	r3,r2,r3
    2b84:	a545883a 	add	r2,r20,r21
    2b88:	1083ffcc 	andi	r2,r2,4095
    2b8c:	18abc83a 	sub	r21,r3,r2
    2b90:	a80b883a 	mov	r5,r21
    2b94:	9009883a 	mov	r4,r18
    2b98:	00030ec0 	call	30ec <_sbrk_r>
    2b9c:	00ffffc4 	movi	r3,-1
    2ba0:	10c0e126 	beq	r2,r3,2f28 <_malloc_r+0x788>
    2ba4:	1505c83a 	sub	r2,r2,r20
    2ba8:	1545883a 	add	r2,r2,r21
    2bac:	10800054 	ori	r2,r2,1
    2bb0:	e0c00017 	ldw	r3,0(fp)
    2bb4:	9d000215 	stw	r20,8(r19)
    2bb8:	a0800115 	stw	r2,4(r20)
    2bbc:	a8c7883a 	add	r3,r21,r3
    2bc0:	e0c00015 	stw	r3,0(fp)
    2bc4:	84c00e26 	beq	r16,r19,2c00 <_malloc_r+0x460>
    2bc8:	018003c4 	movi	r6,15
    2bcc:	3580a72e 	bgeu	r6,r22,2e6c <_malloc_r+0x6cc>
    2bd0:	81400117 	ldw	r5,4(r16)
    2bd4:	013ffe04 	movi	r4,-8
    2bd8:	b0bffd04 	addi	r2,r22,-12
    2bdc:	1104703a 	and	r2,r2,r4
    2be0:	2900004c 	andi	r4,r5,1
    2be4:	2088b03a 	or	r4,r4,r2
    2be8:	81000115 	stw	r4,4(r16)
    2bec:	01400144 	movi	r5,5
    2bf0:	8089883a 	add	r4,r16,r2
    2bf4:	21400115 	stw	r5,4(r4)
    2bf8:	21400215 	stw	r5,8(r4)
    2bfc:	3080cd36 	bltu	r6,r2,2f34 <_malloc_r+0x794>
    2c00:	00800074 	movhi	r2,1
    2c04:	1093d804 	addi	r2,r2,20320
    2c08:	11000017 	ldw	r4,0(r2)
    2c0c:	20c0012e 	bgeu	r4,r3,2c14 <_malloc_r+0x474>
    2c10:	10c00015 	stw	r3,0(r2)
    2c14:	00800074 	movhi	r2,1
    2c18:	1093d704 	addi	r2,r2,20316
    2c1c:	11000017 	ldw	r4,0(r2)
    2c20:	9c000217 	ldw	r16,8(r19)
    2c24:	20c0012e 	bgeu	r4,r3,2c2c <_malloc_r+0x48c>
    2c28:	10c00015 	stw	r3,0(r2)
    2c2c:	80c00117 	ldw	r3,4(r16)
    2c30:	00bfff04 	movi	r2,-4
    2c34:	1886703a 	and	r3,r3,r2
    2c38:	1c45c83a 	sub	r2,r3,r17
    2c3c:	1c400236 	bltu	r3,r17,2c48 <_malloc_r+0x4a8>
    2c40:	00c003c4 	movi	r3,15
    2c44:	18800416 	blt	r3,r2,2c58 <_malloc_r+0x4b8>
    2c48:	9009883a 	mov	r4,r18
    2c4c:	000eab80 	call	eab8 <__malloc_unlock>
    2c50:	0005883a 	mov	r2,zero
    2c54:	003f7b06 	br	2a44 <__alt_data_end+0xff002a44>
    2c58:	88c00054 	ori	r3,r17,1
    2c5c:	80c00115 	stw	r3,4(r16)
    2c60:	8463883a 	add	r17,r16,r17
    2c64:	10800054 	ori	r2,r2,1
    2c68:	9c400215 	stw	r17,8(r19)
    2c6c:	88800115 	stw	r2,4(r17)
    2c70:	9009883a 	mov	r4,r18
    2c74:	000eab80 	call	eab8 <__malloc_unlock>
    2c78:	80800204 	addi	r2,r16,8
    2c7c:	003f7106 	br	2a44 <__alt_data_end+0xff002a44>
    2c80:	00c00504 	movi	r3,20
    2c84:	18804a2e 	bgeu	r3,r2,2db0 <_malloc_r+0x610>
    2c88:	00c01504 	movi	r3,84
    2c8c:	18806e36 	bltu	r3,r2,2e48 <_malloc_r+0x6a8>
    2c90:	8804d33a 	srli	r2,r17,12
    2c94:	12001bc4 	addi	r8,r2,111
    2c98:	11c01b84 	addi	r7,r2,110
    2c9c:	4209883a 	add	r4,r8,r8
    2ca0:	003edd06 	br	2818 <__alt_data_end+0xff002818>
    2ca4:	3804d27a 	srli	r2,r7,9
    2ca8:	00c00104 	movi	r3,4
    2cac:	1880442e 	bgeu	r3,r2,2dc0 <_malloc_r+0x620>
    2cb0:	00c00504 	movi	r3,20
    2cb4:	18808136 	bltu	r3,r2,2ebc <_malloc_r+0x71c>
    2cb8:	11401704 	addi	r5,r2,92
    2cbc:	10c016c4 	addi	r3,r2,91
    2cc0:	294b883a 	add	r5,r5,r5
    2cc4:	294b883a 	add	r5,r5,r5
    2cc8:	294b883a 	add	r5,r5,r5
    2ccc:	994b883a 	add	r5,r19,r5
    2cd0:	28800017 	ldw	r2,0(r5)
    2cd4:	01800074 	movhi	r6,1
    2cd8:	297ffe04 	addi	r5,r5,-8
    2cdc:	31860f04 	addi	r6,r6,6204
    2ce0:	28806526 	beq	r5,r2,2e78 <_malloc_r+0x6d8>
    2ce4:	01bfff04 	movi	r6,-4
    2ce8:	10c00117 	ldw	r3,4(r2)
    2cec:	1986703a 	and	r3,r3,r6
    2cf0:	38c0022e 	bgeu	r7,r3,2cfc <_malloc_r+0x55c>
    2cf4:	10800217 	ldw	r2,8(r2)
    2cf8:	28bffb1e 	bne	r5,r2,2ce8 <__alt_data_end+0xff002ce8>
    2cfc:	11400317 	ldw	r5,12(r2)
    2d00:	98c00117 	ldw	r3,4(r19)
    2d04:	81400315 	stw	r5,12(r16)
    2d08:	80800215 	stw	r2,8(r16)
    2d0c:	2c000215 	stw	r16,8(r5)
    2d10:	14000315 	stw	r16,12(r2)
    2d14:	003ef806 	br	28f8 <__alt_data_end+0xff0028f8>
    2d18:	88c00054 	ori	r3,r17,1
    2d1c:	80c00115 	stw	r3,4(r16)
    2d20:	8463883a 	add	r17,r16,r17
    2d24:	34400515 	stw	r17,20(r6)
    2d28:	34400415 	stw	r17,16(r6)
    2d2c:	10c00054 	ori	r3,r2,1
    2d30:	8a000315 	stw	r8,12(r17)
    2d34:	8a000215 	stw	r8,8(r17)
    2d38:	88c00115 	stw	r3,4(r17)
    2d3c:	88a3883a 	add	r17,r17,r2
    2d40:	88800015 	stw	r2,0(r17)
    2d44:	9009883a 	mov	r4,r18
    2d48:	000eab80 	call	eab8 <__malloc_unlock>
    2d4c:	80800204 	addi	r2,r16,8
    2d50:	003f3c06 	br	2a44 <__alt_data_end+0xff002a44>
    2d54:	30c00117 	ldw	r3,4(r6)
    2d58:	003ee706 	br	28f8 <__alt_data_end+0xff0028f8>
    2d5c:	5ac00044 	addi	r11,r11,1
    2d60:	588000cc 	andi	r2,r11,3
    2d64:	31800204 	addi	r6,r6,8
    2d68:	103efd1e 	bne	r2,zero,2960 <__alt_data_end+0xff002960>
    2d6c:	00002406 	br	2e00 <_malloc_r+0x660>
    2d70:	14000317 	ldw	r16,12(r2)
    2d74:	143f251e 	bne	r2,r16,2a0c <__alt_data_end+0xff002a0c>
    2d78:	21000084 	addi	r4,r4,2
    2d7c:	003ebc06 	br	2870 <__alt_data_end+0xff002870>
    2d80:	8085883a 	add	r2,r16,r2
    2d84:	10c00117 	ldw	r3,4(r2)
    2d88:	81000317 	ldw	r4,12(r16)
    2d8c:	81400217 	ldw	r5,8(r16)
    2d90:	18c00054 	ori	r3,r3,1
    2d94:	10c00115 	stw	r3,4(r2)
    2d98:	29000315 	stw	r4,12(r5)
    2d9c:	21400215 	stw	r5,8(r4)
    2da0:	9009883a 	mov	r4,r18
    2da4:	000eab80 	call	eab8 <__malloc_unlock>
    2da8:	80800204 	addi	r2,r16,8
    2dac:	003f2506 	br	2a44 <__alt_data_end+0xff002a44>
    2db0:	12001704 	addi	r8,r2,92
    2db4:	11c016c4 	addi	r7,r2,91
    2db8:	4209883a 	add	r4,r8,r8
    2dbc:	003e9606 	br	2818 <__alt_data_end+0xff002818>
    2dc0:	3804d1ba 	srli	r2,r7,6
    2dc4:	11400e44 	addi	r5,r2,57
    2dc8:	10c00e04 	addi	r3,r2,56
    2dcc:	294b883a 	add	r5,r5,r5
    2dd0:	003fbc06 	br	2cc4 <__alt_data_end+0xff002cc4>
    2dd4:	84ff5926 	beq	r16,r19,2b3c <__alt_data_end+0xff002b3c>
    2dd8:	00800074 	movhi	r2,1
    2ddc:	10860f04 	addi	r2,r2,6204
    2de0:	14000217 	ldw	r16,8(r2)
    2de4:	00bfff04 	movi	r2,-4
    2de8:	80c00117 	ldw	r3,4(r16)
    2dec:	1886703a 	and	r3,r3,r2
    2df0:	003f9106 	br	2c38 <__alt_data_end+0xff002c38>
    2df4:	60800217 	ldw	r2,8(r12)
    2df8:	213fffc4 	addi	r4,r4,-1
    2dfc:	1300651e 	bne	r2,r12,2f94 <_malloc_r+0x7f4>
    2e00:	208000cc 	andi	r2,r4,3
    2e04:	633ffe04 	addi	r12,r12,-8
    2e08:	103ffa1e 	bne	r2,zero,2df4 <__alt_data_end+0xff002df4>
    2e0c:	98800117 	ldw	r2,4(r19)
    2e10:	0146303a 	nor	r3,zero,r5
    2e14:	1884703a 	and	r2,r3,r2
    2e18:	98800115 	stw	r2,4(r19)
    2e1c:	294b883a 	add	r5,r5,r5
    2e20:	117f2836 	bltu	r2,r5,2ac4 <__alt_data_end+0xff002ac4>
    2e24:	283f2726 	beq	r5,zero,2ac4 <__alt_data_end+0xff002ac4>
    2e28:	2886703a 	and	r3,r5,r2
    2e2c:	5809883a 	mov	r4,r11
    2e30:	183ec31e 	bne	r3,zero,2940 <__alt_data_end+0xff002940>
    2e34:	294b883a 	add	r5,r5,r5
    2e38:	2886703a 	and	r3,r5,r2
    2e3c:	21000104 	addi	r4,r4,4
    2e40:	183ffc26 	beq	r3,zero,2e34 <__alt_data_end+0xff002e34>
    2e44:	003ebe06 	br	2940 <__alt_data_end+0xff002940>
    2e48:	00c05504 	movi	r3,340
    2e4c:	18801236 	bltu	r3,r2,2e98 <_malloc_r+0x6f8>
    2e50:	8804d3fa 	srli	r2,r17,15
    2e54:	12001e04 	addi	r8,r2,120
    2e58:	11c01dc4 	addi	r7,r2,119
    2e5c:	4209883a 	add	r4,r8,r8
    2e60:	003e6d06 	br	2818 <__alt_data_end+0xff002818>
    2e64:	00c40004 	movi	r3,4096
    2e68:	003f4606 	br	2b84 <__alt_data_end+0xff002b84>
    2e6c:	00800044 	movi	r2,1
    2e70:	a0800115 	stw	r2,4(r20)
    2e74:	003f7406 	br	2c48 <__alt_data_end+0xff002c48>
    2e78:	1805d0ba 	srai	r2,r3,2
    2e7c:	01c00044 	movi	r7,1
    2e80:	30c00117 	ldw	r3,4(r6)
    2e84:	388e983a 	sll	r7,r7,r2
    2e88:	2805883a 	mov	r2,r5
    2e8c:	38c6b03a 	or	r3,r7,r3
    2e90:	30c00115 	stw	r3,4(r6)
    2e94:	003f9b06 	br	2d04 <__alt_data_end+0xff002d04>
    2e98:	00c15504 	movi	r3,1364
    2e9c:	18801a36 	bltu	r3,r2,2f08 <_malloc_r+0x768>
    2ea0:	8804d4ba 	srli	r2,r17,18
    2ea4:	12001f44 	addi	r8,r2,125
    2ea8:	11c01f04 	addi	r7,r2,124
    2eac:	4209883a 	add	r4,r8,r8
    2eb0:	003e5906 	br	2818 <__alt_data_end+0xff002818>
    2eb4:	ad400404 	addi	r21,r21,16
    2eb8:	003f1706 	br	2b18 <__alt_data_end+0xff002b18>
    2ebc:	00c01504 	movi	r3,84
    2ec0:	18802336 	bltu	r3,r2,2f50 <_malloc_r+0x7b0>
    2ec4:	3804d33a 	srli	r2,r7,12
    2ec8:	11401bc4 	addi	r5,r2,111
    2ecc:	10c01b84 	addi	r3,r2,110
    2ed0:	294b883a 	add	r5,r5,r5
    2ed4:	003f7b06 	br	2cc4 <__alt_data_end+0xff002cc4>
    2ed8:	9c000217 	ldw	r16,8(r19)
    2edc:	00bfff04 	movi	r2,-4
    2ee0:	80c00117 	ldw	r3,4(r16)
    2ee4:	1886703a 	and	r3,r3,r2
    2ee8:	003f5306 	br	2c38 <__alt_data_end+0xff002c38>
    2eec:	3083ffcc 	andi	r2,r6,4095
    2ef0:	103f181e 	bne	r2,zero,2b54 <__alt_data_end+0xff002b54>
    2ef4:	99000217 	ldw	r4,8(r19)
    2ef8:	b545883a 	add	r2,r22,r21
    2efc:	10800054 	ori	r2,r2,1
    2f00:	20800115 	stw	r2,4(r4)
    2f04:	003f3e06 	br	2c00 <__alt_data_end+0xff002c00>
    2f08:	01003f84 	movi	r4,254
    2f0c:	02001fc4 	movi	r8,127
    2f10:	01c01f84 	movi	r7,126
    2f14:	003e4006 	br	2818 <__alt_data_end+0xff002818>
    2f18:	00800074 	movhi	r2,1
    2f1c:	108cba04 	addi	r2,r2,13032
    2f20:	15000015 	stw	r20,0(r2)
    2f24:	003f1106 	br	2b6c <__alt_data_end+0xff002b6c>
    2f28:	00800044 	movi	r2,1
    2f2c:	002b883a 	mov	r21,zero
    2f30:	003f1f06 	br	2bb0 <__alt_data_end+0xff002bb0>
    2f34:	81400204 	addi	r5,r16,8
    2f38:	9009883a 	mov	r4,r18
    2f3c:	00075f00 	call	75f0 <_free_r>
    2f40:	00800074 	movhi	r2,1
    2f44:	1093e704 	addi	r2,r2,20380
    2f48:	10c00017 	ldw	r3,0(r2)
    2f4c:	003f2c06 	br	2c00 <__alt_data_end+0xff002c00>
    2f50:	00c05504 	movi	r3,340
    2f54:	18800536 	bltu	r3,r2,2f6c <_malloc_r+0x7cc>
    2f58:	3804d3fa 	srli	r2,r7,15
    2f5c:	11401e04 	addi	r5,r2,120
    2f60:	10c01dc4 	addi	r3,r2,119
    2f64:	294b883a 	add	r5,r5,r5
    2f68:	003f5606 	br	2cc4 <__alt_data_end+0xff002cc4>
    2f6c:	00c15504 	movi	r3,1364
    2f70:	18800536 	bltu	r3,r2,2f88 <_malloc_r+0x7e8>
    2f74:	3804d4ba 	srli	r2,r7,18
    2f78:	11401f44 	addi	r5,r2,125
    2f7c:	10c01f04 	addi	r3,r2,124
    2f80:	294b883a 	add	r5,r5,r5
    2f84:	003f4f06 	br	2cc4 <__alt_data_end+0xff002cc4>
    2f88:	01403f84 	movi	r5,254
    2f8c:	00c01f84 	movi	r3,126
    2f90:	003f4c06 	br	2cc4 <__alt_data_end+0xff002cc4>
    2f94:	98800117 	ldw	r2,4(r19)
    2f98:	003fa006 	br	2e1c <__alt_data_end+0xff002e1c>
    2f9c:	8808d0fa 	srli	r4,r17,3
    2fa0:	20800044 	addi	r2,r4,1
    2fa4:	1085883a 	add	r2,r2,r2
    2fa8:	003e9006 	br	29ec <__alt_data_end+0xff0029ec>

00002fac <_printf_r>:
    2fac:	defffd04 	addi	sp,sp,-12
    2fb0:	2805883a 	mov	r2,r5
    2fb4:	dfc00015 	stw	ra,0(sp)
    2fb8:	d9800115 	stw	r6,4(sp)
    2fbc:	d9c00215 	stw	r7,8(sp)
    2fc0:	21400217 	ldw	r5,8(r4)
    2fc4:	d9c00104 	addi	r7,sp,4
    2fc8:	100d883a 	mov	r6,r2
    2fcc:	00031d80 	call	31d8 <___vfprintf_internal_r>
    2fd0:	dfc00017 	ldw	ra,0(sp)
    2fd4:	dec00304 	addi	sp,sp,12
    2fd8:	f800283a 	ret

00002fdc <printf>:
    2fdc:	defffc04 	addi	sp,sp,-16
    2fe0:	dfc00015 	stw	ra,0(sp)
    2fe4:	d9400115 	stw	r5,4(sp)
    2fe8:	d9800215 	stw	r6,8(sp)
    2fec:	d9c00315 	stw	r7,12(sp)
    2ff0:	00800074 	movhi	r2,1
    2ff4:	108cbd04 	addi	r2,r2,13044
    2ff8:	10800017 	ldw	r2,0(r2)
    2ffc:	200b883a 	mov	r5,r4
    3000:	d9800104 	addi	r6,sp,4
    3004:	11000217 	ldw	r4,8(r2)
    3008:	00053d00 	call	53d0 <__vfprintf_internal>
    300c:	dfc00017 	ldw	ra,0(sp)
    3010:	dec00404 	addi	sp,sp,16
    3014:	f800283a 	ret

00003018 <_puts_r>:
    3018:	defff604 	addi	sp,sp,-40
    301c:	dc000715 	stw	r16,28(sp)
    3020:	2021883a 	mov	r16,r4
    3024:	2809883a 	mov	r4,r5
    3028:	dc400815 	stw	r17,32(sp)
    302c:	dfc00915 	stw	ra,36(sp)
    3030:	2823883a 	mov	r17,r5
    3034:	00031400 	call	3140 <strlen>
    3038:	10c00044 	addi	r3,r2,1
    303c:	d8800115 	stw	r2,4(sp)
    3040:	00800074 	movhi	r2,1
    3044:	10850004 	addi	r2,r2,5120
    3048:	d8800215 	stw	r2,8(sp)
    304c:	00800044 	movi	r2,1
    3050:	d8800315 	stw	r2,12(sp)
    3054:	00800084 	movi	r2,2
    3058:	dc400015 	stw	r17,0(sp)
    305c:	d8c00615 	stw	r3,24(sp)
    3060:	dec00415 	stw	sp,16(sp)
    3064:	d8800515 	stw	r2,20(sp)
    3068:	80000226 	beq	r16,zero,3074 <_puts_r+0x5c>
    306c:	80800e17 	ldw	r2,56(r16)
    3070:	10001426 	beq	r2,zero,30c4 <_puts_r+0xac>
    3074:	81400217 	ldw	r5,8(r16)
    3078:	2880030b 	ldhu	r2,12(r5)
    307c:	10c8000c 	andi	r3,r2,8192
    3080:	1800061e 	bne	r3,zero,309c <_puts_r+0x84>
    3084:	29001917 	ldw	r4,100(r5)
    3088:	00f7ffc4 	movi	r3,-8193
    308c:	10880014 	ori	r2,r2,8192
    3090:	20c6703a 	and	r3,r4,r3
    3094:	2880030d 	sth	r2,12(r5)
    3098:	28c01915 	stw	r3,100(r5)
    309c:	d9800404 	addi	r6,sp,16
    30a0:	8009883a 	mov	r4,r16
    30a4:	00079000 	call	7900 <__sfvwrite_r>
    30a8:	1000091e 	bne	r2,zero,30d0 <_puts_r+0xb8>
    30ac:	00800284 	movi	r2,10
    30b0:	dfc00917 	ldw	ra,36(sp)
    30b4:	dc400817 	ldw	r17,32(sp)
    30b8:	dc000717 	ldw	r16,28(sp)
    30bc:	dec00a04 	addi	sp,sp,40
    30c0:	f800283a 	ret
    30c4:	8009883a 	mov	r4,r16
    30c8:	000747c0 	call	747c <__sinit>
    30cc:	003fe906 	br	3074 <__alt_data_end+0xff003074>
    30d0:	00bfffc4 	movi	r2,-1
    30d4:	003ff606 	br	30b0 <__alt_data_end+0xff0030b0>

000030d8 <puts>:
    30d8:	00800074 	movhi	r2,1
    30dc:	108cbd04 	addi	r2,r2,13044
    30e0:	200b883a 	mov	r5,r4
    30e4:	11000017 	ldw	r4,0(r2)
    30e8:	00030181 	jmpi	3018 <_puts_r>

000030ec <_sbrk_r>:
    30ec:	defffd04 	addi	sp,sp,-12
    30f0:	dc000015 	stw	r16,0(sp)
    30f4:	04000074 	movhi	r16,1
    30f8:	dc400115 	stw	r17,4(sp)
    30fc:	8413da04 	addi	r16,r16,20328
    3100:	2023883a 	mov	r17,r4
    3104:	2809883a 	mov	r4,r5
    3108:	dfc00215 	stw	ra,8(sp)
    310c:	80000015 	stw	zero,0(r16)
    3110:	000ec780 	call	ec78 <sbrk>
    3114:	00ffffc4 	movi	r3,-1
    3118:	10c00526 	beq	r2,r3,3130 <_sbrk_r+0x44>
    311c:	dfc00217 	ldw	ra,8(sp)
    3120:	dc400117 	ldw	r17,4(sp)
    3124:	dc000017 	ldw	r16,0(sp)
    3128:	dec00304 	addi	sp,sp,12
    312c:	f800283a 	ret
    3130:	80c00017 	ldw	r3,0(r16)
    3134:	183ff926 	beq	r3,zero,311c <__alt_data_end+0xff00311c>
    3138:	88c00015 	stw	r3,0(r17)
    313c:	003ff706 	br	311c <__alt_data_end+0xff00311c>

00003140 <strlen>:
    3140:	208000cc 	andi	r2,r4,3
    3144:	10002026 	beq	r2,zero,31c8 <strlen+0x88>
    3148:	20800007 	ldb	r2,0(r4)
    314c:	10002026 	beq	r2,zero,31d0 <strlen+0x90>
    3150:	2005883a 	mov	r2,r4
    3154:	00000206 	br	3160 <strlen+0x20>
    3158:	10c00007 	ldb	r3,0(r2)
    315c:	18001826 	beq	r3,zero,31c0 <strlen+0x80>
    3160:	10800044 	addi	r2,r2,1
    3164:	10c000cc 	andi	r3,r2,3
    3168:	183ffb1e 	bne	r3,zero,3158 <__alt_data_end+0xff003158>
    316c:	10c00017 	ldw	r3,0(r2)
    3170:	01ffbff4 	movhi	r7,65279
    3174:	39ffbfc4 	addi	r7,r7,-257
    3178:	00ca303a 	nor	r5,zero,r3
    317c:	01a02074 	movhi	r6,32897
    3180:	19c7883a 	add	r3,r3,r7
    3184:	31a02004 	addi	r6,r6,-32640
    3188:	1946703a 	and	r3,r3,r5
    318c:	1986703a 	and	r3,r3,r6
    3190:	1800091e 	bne	r3,zero,31b8 <strlen+0x78>
    3194:	10800104 	addi	r2,r2,4
    3198:	10c00017 	ldw	r3,0(r2)
    319c:	19cb883a 	add	r5,r3,r7
    31a0:	00c6303a 	nor	r3,zero,r3
    31a4:	28c6703a 	and	r3,r5,r3
    31a8:	1986703a 	and	r3,r3,r6
    31ac:	183ff926 	beq	r3,zero,3194 <__alt_data_end+0xff003194>
    31b0:	00000106 	br	31b8 <strlen+0x78>
    31b4:	10800044 	addi	r2,r2,1
    31b8:	10c00007 	ldb	r3,0(r2)
    31bc:	183ffd1e 	bne	r3,zero,31b4 <__alt_data_end+0xff0031b4>
    31c0:	1105c83a 	sub	r2,r2,r4
    31c4:	f800283a 	ret
    31c8:	2005883a 	mov	r2,r4
    31cc:	003fe706 	br	316c <__alt_data_end+0xff00316c>
    31d0:	0005883a 	mov	r2,zero
    31d4:	f800283a 	ret

000031d8 <___vfprintf_internal_r>:
    31d8:	deffb804 	addi	sp,sp,-288
    31dc:	dfc04715 	stw	ra,284(sp)
    31e0:	ddc04515 	stw	r23,276(sp)
    31e4:	dd404315 	stw	r21,268(sp)
    31e8:	d9002c15 	stw	r4,176(sp)
    31ec:	282f883a 	mov	r23,r5
    31f0:	302b883a 	mov	r21,r6
    31f4:	d9c02d15 	stw	r7,180(sp)
    31f8:	df004615 	stw	fp,280(sp)
    31fc:	dd804415 	stw	r22,272(sp)
    3200:	dd004215 	stw	r20,264(sp)
    3204:	dcc04115 	stw	r19,260(sp)
    3208:	dc804015 	stw	r18,256(sp)
    320c:	dc403f15 	stw	r17,252(sp)
    3210:	dc003e15 	stw	r16,248(sp)
    3214:	0007ff00 	call	7ff0 <_localeconv_r>
    3218:	10800017 	ldw	r2,0(r2)
    321c:	1009883a 	mov	r4,r2
    3220:	d8803415 	stw	r2,208(sp)
    3224:	00031400 	call	3140 <strlen>
    3228:	d8803715 	stw	r2,220(sp)
    322c:	d8802c17 	ldw	r2,176(sp)
    3230:	10000226 	beq	r2,zero,323c <___vfprintf_internal_r+0x64>
    3234:	10800e17 	ldw	r2,56(r2)
    3238:	1000f926 	beq	r2,zero,3620 <___vfprintf_internal_r+0x448>
    323c:	b880030b 	ldhu	r2,12(r23)
    3240:	10c8000c 	andi	r3,r2,8192
    3244:	1800061e 	bne	r3,zero,3260 <___vfprintf_internal_r+0x88>
    3248:	b9001917 	ldw	r4,100(r23)
    324c:	00f7ffc4 	movi	r3,-8193
    3250:	10880014 	ori	r2,r2,8192
    3254:	20c6703a 	and	r3,r4,r3
    3258:	b880030d 	sth	r2,12(r23)
    325c:	b8c01915 	stw	r3,100(r23)
    3260:	10c0020c 	andi	r3,r2,8
    3264:	1800c126 	beq	r3,zero,356c <___vfprintf_internal_r+0x394>
    3268:	b8c00417 	ldw	r3,16(r23)
    326c:	1800bf26 	beq	r3,zero,356c <___vfprintf_internal_r+0x394>
    3270:	1080068c 	andi	r2,r2,26
    3274:	00c00284 	movi	r3,10
    3278:	10c0c426 	beq	r2,r3,358c <___vfprintf_internal_r+0x3b4>
    327c:	d8c00404 	addi	r3,sp,16
    3280:	05000074 	movhi	r20,1
    3284:	d9001e04 	addi	r4,sp,120
    3288:	a5056284 	addi	r20,r20,5514
    328c:	d8c01e15 	stw	r3,120(sp)
    3290:	d8002015 	stw	zero,128(sp)
    3294:	d8001f15 	stw	zero,124(sp)
    3298:	d8003315 	stw	zero,204(sp)
    329c:	d8003615 	stw	zero,216(sp)
    32a0:	d8003815 	stw	zero,224(sp)
    32a4:	1811883a 	mov	r8,r3
    32a8:	d8003915 	stw	zero,228(sp)
    32ac:	d8003a15 	stw	zero,232(sp)
    32b0:	d8002f15 	stw	zero,188(sp)
    32b4:	d9002815 	stw	r4,160(sp)
    32b8:	a8800007 	ldb	r2,0(r21)
    32bc:	10027b26 	beq	r2,zero,3cac <___vfprintf_internal_r+0xad4>
    32c0:	00c00944 	movi	r3,37
    32c4:	a821883a 	mov	r16,r21
    32c8:	10c0021e 	bne	r2,r3,32d4 <___vfprintf_internal_r+0xfc>
    32cc:	00001406 	br	3320 <___vfprintf_internal_r+0x148>
    32d0:	10c00326 	beq	r2,r3,32e0 <___vfprintf_internal_r+0x108>
    32d4:	84000044 	addi	r16,r16,1
    32d8:	80800007 	ldb	r2,0(r16)
    32dc:	103ffc1e 	bne	r2,zero,32d0 <__alt_data_end+0xff0032d0>
    32e0:	8563c83a 	sub	r17,r16,r21
    32e4:	88000e26 	beq	r17,zero,3320 <___vfprintf_internal_r+0x148>
    32e8:	d8c02017 	ldw	r3,128(sp)
    32ec:	d8801f17 	ldw	r2,124(sp)
    32f0:	45400015 	stw	r21,0(r8)
    32f4:	1c47883a 	add	r3,r3,r17
    32f8:	10800044 	addi	r2,r2,1
    32fc:	d8c02015 	stw	r3,128(sp)
    3300:	44400115 	stw	r17,4(r8)
    3304:	d8801f15 	stw	r2,124(sp)
    3308:	00c001c4 	movi	r3,7
    330c:	1880a716 	blt	r3,r2,35ac <___vfprintf_internal_r+0x3d4>
    3310:	42000204 	addi	r8,r8,8
    3314:	d9402f17 	ldw	r5,188(sp)
    3318:	2c4b883a 	add	r5,r5,r17
    331c:	d9402f15 	stw	r5,188(sp)
    3320:	80800007 	ldb	r2,0(r16)
    3324:	1000a826 	beq	r2,zero,35c8 <___vfprintf_internal_r+0x3f0>
    3328:	84400047 	ldb	r17,1(r16)
    332c:	00bfffc4 	movi	r2,-1
    3330:	85400044 	addi	r21,r16,1
    3334:	d8002785 	stb	zero,158(sp)
    3338:	0007883a 	mov	r3,zero
    333c:	000f883a 	mov	r7,zero
    3340:	d8802915 	stw	r2,164(sp)
    3344:	d8003115 	stw	zero,196(sp)
    3348:	0025883a 	mov	r18,zero
    334c:	01401604 	movi	r5,88
    3350:	01800244 	movi	r6,9
    3354:	02800a84 	movi	r10,42
    3358:	02401b04 	movi	r9,108
    335c:	ad400044 	addi	r21,r21,1
    3360:	88bff804 	addi	r2,r17,-32
    3364:	28830436 	bltu	r5,r2,3f78 <___vfprintf_internal_r+0xda0>
    3368:	100490ba 	slli	r2,r2,2
    336c:	01000034 	movhi	r4,0
    3370:	210ce004 	addi	r4,r4,13184
    3374:	1105883a 	add	r2,r2,r4
    3378:	10800017 	ldw	r2,0(r2)
    337c:	1000683a 	jmp	r2
    3380:	00003e98 	cmpnei	zero,zero,250
    3384:	00003f78 	rdprs	zero,zero,253
    3388:	00003f78 	rdprs	zero,zero,253
    338c:	00003eb8 	rdprs	zero,zero,250
    3390:	00003f78 	rdprs	zero,zero,253
    3394:	00003f78 	rdprs	zero,zero,253
    3398:	00003f78 	rdprs	zero,zero,253
    339c:	00003f78 	rdprs	zero,zero,253
    33a0:	00003f78 	rdprs	zero,zero,253
    33a4:	00003f78 	rdprs	zero,zero,253
    33a8:	0000362c 	andhi	zero,zero,216
    33ac:	00003dd4 	movui	zero,247
    33b0:	00003f78 	rdprs	zero,zero,253
    33b4:	000034f4 	movhi	zero,211
    33b8:	00003654 	movui	zero,217
    33bc:	00003f78 	rdprs	zero,zero,253
    33c0:	00003694 	movui	zero,218
    33c4:	000036a0 	cmpeqi	zero,zero,218
    33c8:	000036a0 	cmpeqi	zero,zero,218
    33cc:	000036a0 	cmpeqi	zero,zero,218
    33d0:	000036a0 	cmpeqi	zero,zero,218
    33d4:	000036a0 	cmpeqi	zero,zero,218
    33d8:	000036a0 	cmpeqi	zero,zero,218
    33dc:	000036a0 	cmpeqi	zero,zero,218
    33e0:	000036a0 	cmpeqi	zero,zero,218
    33e4:	000036a0 	cmpeqi	zero,zero,218
    33e8:	00003f78 	rdprs	zero,zero,253
    33ec:	00003f78 	rdprs	zero,zero,253
    33f0:	00003f78 	rdprs	zero,zero,253
    33f4:	00003f78 	rdprs	zero,zero,253
    33f8:	00003f78 	rdprs	zero,zero,253
    33fc:	00003f78 	rdprs	zero,zero,253
    3400:	00003f78 	rdprs	zero,zero,253
    3404:	00003f78 	rdprs	zero,zero,253
    3408:	00003f78 	rdprs	zero,zero,253
    340c:	00003f78 	rdprs	zero,zero,253
    3410:	000036d4 	movui	zero,219
    3414:	00003790 	cmplti	zero,zero,222
    3418:	00003f78 	rdprs	zero,zero,253
    341c:	00003790 	cmplti	zero,zero,222
    3420:	00003f78 	rdprs	zero,zero,253
    3424:	00003f78 	rdprs	zero,zero,253
    3428:	00003f78 	rdprs	zero,zero,253
    342c:	00003f78 	rdprs	zero,zero,253
    3430:	00003830 	cmpltui	zero,zero,224
    3434:	00003f78 	rdprs	zero,zero,253
    3438:	00003f78 	rdprs	zero,zero,253
    343c:	0000383c 	xorhi	zero,zero,224
    3440:	00003f78 	rdprs	zero,zero,253
    3444:	00003f78 	rdprs	zero,zero,253
    3448:	00003f78 	rdprs	zero,zero,253
    344c:	00003f78 	rdprs	zero,zero,253
    3450:	00003f78 	rdprs	zero,zero,253
    3454:	00003cb4 	movhi	zero,242
    3458:	00003f78 	rdprs	zero,zero,253
    345c:	00003f78 	rdprs	zero,zero,253
    3460:	00003d14 	movui	zero,244
    3464:	00003f78 	rdprs	zero,zero,253
    3468:	00003f78 	rdprs	zero,zero,253
    346c:	00003f78 	rdprs	zero,zero,253
    3470:	00003f78 	rdprs	zero,zero,253
    3474:	00003f78 	rdprs	zero,zero,253
    3478:	00003f78 	rdprs	zero,zero,253
    347c:	00003f78 	rdprs	zero,zero,253
    3480:	00003f78 	rdprs	zero,zero,253
    3484:	00003f78 	rdprs	zero,zero,253
    3488:	00003f78 	rdprs	zero,zero,253
    348c:	00003f24 	muli	zero,zero,252
    3490:	00003ec4 	movi	zero,251
    3494:	00003790 	cmplti	zero,zero,222
    3498:	00003790 	cmplti	zero,zero,222
    349c:	00003790 	cmplti	zero,zero,222
    34a0:	00003ed4 	movui	zero,251
    34a4:	00003ec4 	movi	zero,251
    34a8:	00003f78 	rdprs	zero,zero,253
    34ac:	00003f78 	rdprs	zero,zero,253
    34b0:	00003ee0 	cmpeqi	zero,zero,251
    34b4:	00003f78 	rdprs	zero,zero,253
    34b8:	00003ef0 	cmpltui	zero,zero,251
    34bc:	00003dc4 	movi	zero,247
    34c0:	00003500 	call	350 <init_camera+0xc0>
    34c4:	00003de4 	muli	zero,zero,247
    34c8:	00003f78 	rdprs	zero,zero,253
    34cc:	00003df0 	cmpltui	zero,zero,247
    34d0:	00003f78 	rdprs	zero,zero,253
    34d4:	00003e4c 	andi	zero,zero,249
    34d8:	00003f78 	rdprs	zero,zero,253
    34dc:	00003f78 	rdprs	zero,zero,253
    34e0:	00003e5c 	xori	zero,zero,249
    34e4:	d9003117 	ldw	r4,196(sp)
    34e8:	d8802d15 	stw	r2,180(sp)
    34ec:	0109c83a 	sub	r4,zero,r4
    34f0:	d9003115 	stw	r4,196(sp)
    34f4:	94800114 	ori	r18,r18,4
    34f8:	ac400007 	ldb	r17,0(r21)
    34fc:	003f9706 	br	335c <__alt_data_end+0xff00335c>
    3500:	00800c04 	movi	r2,48
    3504:	d9002d17 	ldw	r4,180(sp)
    3508:	d9402917 	ldw	r5,164(sp)
    350c:	d8802705 	stb	r2,156(sp)
    3510:	00801e04 	movi	r2,120
    3514:	d8802745 	stb	r2,157(sp)
    3518:	d8002785 	stb	zero,158(sp)
    351c:	20c00104 	addi	r3,r4,4
    3520:	24c00017 	ldw	r19,0(r4)
    3524:	002d883a 	mov	r22,zero
    3528:	90800094 	ori	r2,r18,2
    352c:	28029a16 	blt	r5,zero,3f98 <___vfprintf_internal_r+0xdc0>
    3530:	00bfdfc4 	movi	r2,-129
    3534:	90a4703a 	and	r18,r18,r2
    3538:	d8c02d15 	stw	r3,180(sp)
    353c:	94800094 	ori	r18,r18,2
    3540:	9802871e 	bne	r19,zero,3f60 <___vfprintf_internal_r+0xd88>
    3544:	00800074 	movhi	r2,1
    3548:	10855b04 	addi	r2,r2,5484
    354c:	d8803915 	stw	r2,228(sp)
    3550:	04401e04 	movi	r17,120
    3554:	d8802917 	ldw	r2,164(sp)
    3558:	0039883a 	mov	fp,zero
    355c:	1001e926 	beq	r2,zero,3d04 <___vfprintf_internal_r+0xb2c>
    3560:	0027883a 	mov	r19,zero
    3564:	002d883a 	mov	r22,zero
    3568:	00020506 	br	3d80 <___vfprintf_internal_r+0xba8>
    356c:	d9002c17 	ldw	r4,176(sp)
    3570:	b80b883a 	mov	r5,r23
    3574:	00054a80 	call	54a8 <__swsetup_r>
    3578:	1005ac1e 	bne	r2,zero,4c2c <___vfprintf_internal_r+0x1a54>
    357c:	b880030b 	ldhu	r2,12(r23)
    3580:	00c00284 	movi	r3,10
    3584:	1080068c 	andi	r2,r2,26
    3588:	10ff3c1e 	bne	r2,r3,327c <__alt_data_end+0xff00327c>
    358c:	b880038f 	ldh	r2,14(r23)
    3590:	103f3a16 	blt	r2,zero,327c <__alt_data_end+0xff00327c>
    3594:	d9c02d17 	ldw	r7,180(sp)
    3598:	d9002c17 	ldw	r4,176(sp)
    359c:	a80d883a 	mov	r6,r21
    35a0:	b80b883a 	mov	r5,r23
    35a4:	00053ec0 	call	53ec <__sbprintf>
    35a8:	00001106 	br	35f0 <___vfprintf_internal_r+0x418>
    35ac:	d9002c17 	ldw	r4,176(sp)
    35b0:	d9801e04 	addi	r6,sp,120
    35b4:	b80b883a 	mov	r5,r23
    35b8:	0009f740 	call	9f74 <__sprint_r>
    35bc:	1000081e 	bne	r2,zero,35e0 <___vfprintf_internal_r+0x408>
    35c0:	da000404 	addi	r8,sp,16
    35c4:	003f5306 	br	3314 <__alt_data_end+0xff003314>
    35c8:	d8802017 	ldw	r2,128(sp)
    35cc:	10000426 	beq	r2,zero,35e0 <___vfprintf_internal_r+0x408>
    35d0:	d9002c17 	ldw	r4,176(sp)
    35d4:	d9801e04 	addi	r6,sp,120
    35d8:	b80b883a 	mov	r5,r23
    35dc:	0009f740 	call	9f74 <__sprint_r>
    35e0:	b880030b 	ldhu	r2,12(r23)
    35e4:	1080100c 	andi	r2,r2,64
    35e8:	1005901e 	bne	r2,zero,4c2c <___vfprintf_internal_r+0x1a54>
    35ec:	d8802f17 	ldw	r2,188(sp)
    35f0:	dfc04717 	ldw	ra,284(sp)
    35f4:	df004617 	ldw	fp,280(sp)
    35f8:	ddc04517 	ldw	r23,276(sp)
    35fc:	dd804417 	ldw	r22,272(sp)
    3600:	dd404317 	ldw	r21,268(sp)
    3604:	dd004217 	ldw	r20,264(sp)
    3608:	dcc04117 	ldw	r19,260(sp)
    360c:	dc804017 	ldw	r18,256(sp)
    3610:	dc403f17 	ldw	r17,252(sp)
    3614:	dc003e17 	ldw	r16,248(sp)
    3618:	dec04804 	addi	sp,sp,288
    361c:	f800283a 	ret
    3620:	d9002c17 	ldw	r4,176(sp)
    3624:	000747c0 	call	747c <__sinit>
    3628:	003f0406 	br	323c <__alt_data_end+0xff00323c>
    362c:	d8802d17 	ldw	r2,180(sp)
    3630:	d9002d17 	ldw	r4,180(sp)
    3634:	10800017 	ldw	r2,0(r2)
    3638:	d8803115 	stw	r2,196(sp)
    363c:	20800104 	addi	r2,r4,4
    3640:	d9003117 	ldw	r4,196(sp)
    3644:	203fa716 	blt	r4,zero,34e4 <__alt_data_end+0xff0034e4>
    3648:	d8802d15 	stw	r2,180(sp)
    364c:	ac400007 	ldb	r17,0(r21)
    3650:	003f4206 	br	335c <__alt_data_end+0xff00335c>
    3654:	ac400007 	ldb	r17,0(r21)
    3658:	aac00044 	addi	r11,r21,1
    365c:	8a872826 	beq	r17,r10,5300 <___vfprintf_internal_r+0x2128>
    3660:	88bff404 	addi	r2,r17,-48
    3664:	0009883a 	mov	r4,zero
    3668:	30867d36 	bltu	r6,r2,5060 <___vfprintf_internal_r+0x1e88>
    366c:	5c400007 	ldb	r17,0(r11)
    3670:	210002a4 	muli	r4,r4,10
    3674:	5d400044 	addi	r21,r11,1
    3678:	a817883a 	mov	r11,r21
    367c:	2089883a 	add	r4,r4,r2
    3680:	88bff404 	addi	r2,r17,-48
    3684:	30bff92e 	bgeu	r6,r2,366c <__alt_data_end+0xff00366c>
    3688:	2005c916 	blt	r4,zero,4db0 <___vfprintf_internal_r+0x1bd8>
    368c:	d9002915 	stw	r4,164(sp)
    3690:	003f3306 	br	3360 <__alt_data_end+0xff003360>
    3694:	94802014 	ori	r18,r18,128
    3698:	ac400007 	ldb	r17,0(r21)
    369c:	003f2f06 	br	335c <__alt_data_end+0xff00335c>
    36a0:	a809883a 	mov	r4,r21
    36a4:	d8003115 	stw	zero,196(sp)
    36a8:	88bff404 	addi	r2,r17,-48
    36ac:	0017883a 	mov	r11,zero
    36b0:	24400007 	ldb	r17,0(r4)
    36b4:	5ac002a4 	muli	r11,r11,10
    36b8:	ad400044 	addi	r21,r21,1
    36bc:	a809883a 	mov	r4,r21
    36c0:	12d7883a 	add	r11,r2,r11
    36c4:	88bff404 	addi	r2,r17,-48
    36c8:	30bff92e 	bgeu	r6,r2,36b0 <__alt_data_end+0xff0036b0>
    36cc:	dac03115 	stw	r11,196(sp)
    36d0:	003f2306 	br	3360 <__alt_data_end+0xff003360>
    36d4:	18c03fcc 	andi	r3,r3,255
    36d8:	18072b1e 	bne	r3,zero,5388 <___vfprintf_internal_r+0x21b0>
    36dc:	94800414 	ori	r18,r18,16
    36e0:	9080080c 	andi	r2,r18,32
    36e4:	10037b26 	beq	r2,zero,44d4 <___vfprintf_internal_r+0x12fc>
    36e8:	d9402d17 	ldw	r5,180(sp)
    36ec:	28800117 	ldw	r2,4(r5)
    36f0:	2cc00017 	ldw	r19,0(r5)
    36f4:	29400204 	addi	r5,r5,8
    36f8:	d9402d15 	stw	r5,180(sp)
    36fc:	102d883a 	mov	r22,r2
    3700:	10044b16 	blt	r2,zero,4830 <___vfprintf_internal_r+0x1658>
    3704:	d9402917 	ldw	r5,164(sp)
    3708:	df002783 	ldbu	fp,158(sp)
    370c:	2803bc16 	blt	r5,zero,4600 <___vfprintf_internal_r+0x1428>
    3710:	00ffdfc4 	movi	r3,-129
    3714:	9d84b03a 	or	r2,r19,r22
    3718:	90e4703a 	and	r18,r18,r3
    371c:	10017726 	beq	r2,zero,3cfc <___vfprintf_internal_r+0xb24>
    3720:	b0038326 	beq	r22,zero,4530 <___vfprintf_internal_r+0x1358>
    3724:	dc402a15 	stw	r17,168(sp)
    3728:	dc001e04 	addi	r16,sp,120
    372c:	b023883a 	mov	r17,r22
    3730:	402d883a 	mov	r22,r8
    3734:	9809883a 	mov	r4,r19
    3738:	880b883a 	mov	r5,r17
    373c:	01800284 	movi	r6,10
    3740:	000f883a 	mov	r7,zero
    3744:	000c36c0 	call	c36c <__umoddi3>
    3748:	10800c04 	addi	r2,r2,48
    374c:	843fffc4 	addi	r16,r16,-1
    3750:	9809883a 	mov	r4,r19
    3754:	880b883a 	mov	r5,r17
    3758:	80800005 	stb	r2,0(r16)
    375c:	01800284 	movi	r6,10
    3760:	000f883a 	mov	r7,zero
    3764:	000bdf40 	call	bdf4 <__udivdi3>
    3768:	1027883a 	mov	r19,r2
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1823883a 	mov	r17,r3
    3774:	103fef1e 	bne	r2,zero,3734 <__alt_data_end+0xff003734>
    3778:	d8c02817 	ldw	r3,160(sp)
    377c:	dc402a17 	ldw	r17,168(sp)
    3780:	b011883a 	mov	r8,r22
    3784:	1c07c83a 	sub	r3,r3,r16
    3788:	d8c02e15 	stw	r3,184(sp)
    378c:	00005906 	br	38f4 <___vfprintf_internal_r+0x71c>
    3790:	18c03fcc 	andi	r3,r3,255
    3794:	1806fa1e 	bne	r3,zero,5380 <___vfprintf_internal_r+0x21a8>
    3798:	9080020c 	andi	r2,r18,8
    379c:	10048a26 	beq	r2,zero,49c8 <___vfprintf_internal_r+0x17f0>
    37a0:	d8c02d17 	ldw	r3,180(sp)
    37a4:	d9002d17 	ldw	r4,180(sp)
    37a8:	d9402d17 	ldw	r5,180(sp)
    37ac:	18c00017 	ldw	r3,0(r3)
    37b0:	21000117 	ldw	r4,4(r4)
    37b4:	29400204 	addi	r5,r5,8
    37b8:	d8c03615 	stw	r3,216(sp)
    37bc:	d9003815 	stw	r4,224(sp)
    37c0:	d9402d15 	stw	r5,180(sp)
    37c4:	d9003617 	ldw	r4,216(sp)
    37c8:	d9403817 	ldw	r5,224(sp)
    37cc:	da003d15 	stw	r8,244(sp)
    37d0:	04000044 	movi	r16,1
    37d4:	0009bec0 	call	9bec <__fpclassifyd>
    37d8:	da003d17 	ldw	r8,244(sp)
    37dc:	14041f1e 	bne	r2,r16,485c <___vfprintf_internal_r+0x1684>
    37e0:	d9003617 	ldw	r4,216(sp)
    37e4:	d9403817 	ldw	r5,224(sp)
    37e8:	000d883a 	mov	r6,zero
    37ec:	000f883a 	mov	r7,zero
    37f0:	000d2b40 	call	d2b4 <__ledf2>
    37f4:	da003d17 	ldw	r8,244(sp)
    37f8:	1005be16 	blt	r2,zero,4ef4 <___vfprintf_internal_r+0x1d1c>
    37fc:	df002783 	ldbu	fp,158(sp)
    3800:	008011c4 	movi	r2,71
    3804:	1445330e 	bge	r2,r17,4cd4 <___vfprintf_internal_r+0x1afc>
    3808:	04000074 	movhi	r16,1
    380c:	84055304 	addi	r16,r16,5452
    3810:	00c000c4 	movi	r3,3
    3814:	00bfdfc4 	movi	r2,-129
    3818:	d8c02a15 	stw	r3,168(sp)
    381c:	90a4703a 	and	r18,r18,r2
    3820:	d8c02e15 	stw	r3,184(sp)
    3824:	d8002915 	stw	zero,164(sp)
    3828:	d8003215 	stw	zero,200(sp)
    382c:	00003706 	br	390c <___vfprintf_internal_r+0x734>
    3830:	94800214 	ori	r18,r18,8
    3834:	ac400007 	ldb	r17,0(r21)
    3838:	003ec806 	br	335c <__alt_data_end+0xff00335c>
    383c:	18c03fcc 	andi	r3,r3,255
    3840:	1806db1e 	bne	r3,zero,53b0 <___vfprintf_internal_r+0x21d8>
    3844:	94800414 	ori	r18,r18,16
    3848:	9080080c 	andi	r2,r18,32
    384c:	1002d826 	beq	r2,zero,43b0 <___vfprintf_internal_r+0x11d8>
    3850:	d9402d17 	ldw	r5,180(sp)
    3854:	d8c02917 	ldw	r3,164(sp)
    3858:	d8002785 	stb	zero,158(sp)
    385c:	28800204 	addi	r2,r5,8
    3860:	2cc00017 	ldw	r19,0(r5)
    3864:	2d800117 	ldw	r22,4(r5)
    3868:	18048f16 	blt	r3,zero,4aa8 <___vfprintf_internal_r+0x18d0>
    386c:	013fdfc4 	movi	r4,-129
    3870:	9d86b03a 	or	r3,r19,r22
    3874:	d8802d15 	stw	r2,180(sp)
    3878:	9124703a 	and	r18,r18,r4
    387c:	1802d91e 	bne	r3,zero,43e4 <___vfprintf_internal_r+0x120c>
    3880:	d8c02917 	ldw	r3,164(sp)
    3884:	0039883a 	mov	fp,zero
    3888:	1805c326 	beq	r3,zero,4f98 <___vfprintf_internal_r+0x1dc0>
    388c:	0027883a 	mov	r19,zero
    3890:	002d883a 	mov	r22,zero
    3894:	dc001e04 	addi	r16,sp,120
    3898:	9806d0fa 	srli	r3,r19,3
    389c:	b008977a 	slli	r4,r22,29
    38a0:	b02cd0fa 	srli	r22,r22,3
    38a4:	9cc001cc 	andi	r19,r19,7
    38a8:	98800c04 	addi	r2,r19,48
    38ac:	843fffc4 	addi	r16,r16,-1
    38b0:	20e6b03a 	or	r19,r4,r3
    38b4:	80800005 	stb	r2,0(r16)
    38b8:	9d86b03a 	or	r3,r19,r22
    38bc:	183ff61e 	bne	r3,zero,3898 <__alt_data_end+0xff003898>
    38c0:	90c0004c 	andi	r3,r18,1
    38c4:	18013b26 	beq	r3,zero,3db4 <___vfprintf_internal_r+0xbdc>
    38c8:	10803fcc 	andi	r2,r2,255
    38cc:	1080201c 	xori	r2,r2,128
    38d0:	10bfe004 	addi	r2,r2,-128
    38d4:	00c00c04 	movi	r3,48
    38d8:	10c13626 	beq	r2,r3,3db4 <___vfprintf_internal_r+0xbdc>
    38dc:	80ffffc5 	stb	r3,-1(r16)
    38e0:	d8c02817 	ldw	r3,160(sp)
    38e4:	80bfffc4 	addi	r2,r16,-1
    38e8:	1021883a 	mov	r16,r2
    38ec:	1887c83a 	sub	r3,r3,r2
    38f0:	d8c02e15 	stw	r3,184(sp)
    38f4:	d8802e17 	ldw	r2,184(sp)
    38f8:	d9002917 	ldw	r4,164(sp)
    38fc:	1100010e 	bge	r2,r4,3904 <___vfprintf_internal_r+0x72c>
    3900:	2005883a 	mov	r2,r4
    3904:	d8802a15 	stw	r2,168(sp)
    3908:	d8003215 	stw	zero,200(sp)
    390c:	e7003fcc 	andi	fp,fp,255
    3910:	e700201c 	xori	fp,fp,128
    3914:	e73fe004 	addi	fp,fp,-128
    3918:	e0000326 	beq	fp,zero,3928 <___vfprintf_internal_r+0x750>
    391c:	d8c02a17 	ldw	r3,168(sp)
    3920:	18c00044 	addi	r3,r3,1
    3924:	d8c02a15 	stw	r3,168(sp)
    3928:	90c0008c 	andi	r3,r18,2
    392c:	d8c02b15 	stw	r3,172(sp)
    3930:	18000326 	beq	r3,zero,3940 <___vfprintf_internal_r+0x768>
    3934:	d8c02a17 	ldw	r3,168(sp)
    3938:	18c00084 	addi	r3,r3,2
    393c:	d8c02a15 	stw	r3,168(sp)
    3940:	90c0210c 	andi	r3,r18,132
    3944:	d8c03015 	stw	r3,192(sp)
    3948:	1801a31e 	bne	r3,zero,3fd8 <___vfprintf_internal_r+0xe00>
    394c:	d9003117 	ldw	r4,196(sp)
    3950:	d8c02a17 	ldw	r3,168(sp)
    3954:	20e7c83a 	sub	r19,r4,r3
    3958:	04c19f0e 	bge	zero,r19,3fd8 <___vfprintf_internal_r+0xe00>
    395c:	02400404 	movi	r9,16
    3960:	d8c02017 	ldw	r3,128(sp)
    3964:	d8801f17 	ldw	r2,124(sp)
    3968:	4cc50d0e 	bge	r9,r19,4da0 <___vfprintf_internal_r+0x1bc8>
    396c:	01400074 	movhi	r5,1
    3970:	29456684 	addi	r5,r5,5530
    3974:	dc403b15 	stw	r17,236(sp)
    3978:	d9403515 	stw	r5,212(sp)
    397c:	9823883a 	mov	r17,r19
    3980:	482d883a 	mov	r22,r9
    3984:	9027883a 	mov	r19,r18
    3988:	070001c4 	movi	fp,7
    398c:	8025883a 	mov	r18,r16
    3990:	dc002c17 	ldw	r16,176(sp)
    3994:	00000306 	br	39a4 <___vfprintf_internal_r+0x7cc>
    3998:	8c7ffc04 	addi	r17,r17,-16
    399c:	42000204 	addi	r8,r8,8
    39a0:	b440130e 	bge	r22,r17,39f0 <___vfprintf_internal_r+0x818>
    39a4:	01000074 	movhi	r4,1
    39a8:	18c00404 	addi	r3,r3,16
    39ac:	10800044 	addi	r2,r2,1
    39b0:	21056684 	addi	r4,r4,5530
    39b4:	41000015 	stw	r4,0(r8)
    39b8:	45800115 	stw	r22,4(r8)
    39bc:	d8c02015 	stw	r3,128(sp)
    39c0:	d8801f15 	stw	r2,124(sp)
    39c4:	e0bff40e 	bge	fp,r2,3998 <__alt_data_end+0xff003998>
    39c8:	d9801e04 	addi	r6,sp,120
    39cc:	b80b883a 	mov	r5,r23
    39d0:	8009883a 	mov	r4,r16
    39d4:	0009f740 	call	9f74 <__sprint_r>
    39d8:	103f011e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    39dc:	8c7ffc04 	addi	r17,r17,-16
    39e0:	d8c02017 	ldw	r3,128(sp)
    39e4:	d8801f17 	ldw	r2,124(sp)
    39e8:	da000404 	addi	r8,sp,16
    39ec:	b47fed16 	blt	r22,r17,39a4 <__alt_data_end+0xff0039a4>
    39f0:	9021883a 	mov	r16,r18
    39f4:	9825883a 	mov	r18,r19
    39f8:	8827883a 	mov	r19,r17
    39fc:	dc403b17 	ldw	r17,236(sp)
    3a00:	d9403517 	ldw	r5,212(sp)
    3a04:	98c7883a 	add	r3,r19,r3
    3a08:	10800044 	addi	r2,r2,1
    3a0c:	41400015 	stw	r5,0(r8)
    3a10:	44c00115 	stw	r19,4(r8)
    3a14:	d8c02015 	stw	r3,128(sp)
    3a18:	d8801f15 	stw	r2,124(sp)
    3a1c:	010001c4 	movi	r4,7
    3a20:	2082a316 	blt	r4,r2,44b0 <___vfprintf_internal_r+0x12d8>
    3a24:	df002787 	ldb	fp,158(sp)
    3a28:	42000204 	addi	r8,r8,8
    3a2c:	e0000c26 	beq	fp,zero,3a60 <___vfprintf_internal_r+0x888>
    3a30:	d8801f17 	ldw	r2,124(sp)
    3a34:	d9002784 	addi	r4,sp,158
    3a38:	18c00044 	addi	r3,r3,1
    3a3c:	10800044 	addi	r2,r2,1
    3a40:	41000015 	stw	r4,0(r8)
    3a44:	01000044 	movi	r4,1
    3a48:	41000115 	stw	r4,4(r8)
    3a4c:	d8c02015 	stw	r3,128(sp)
    3a50:	d8801f15 	stw	r2,124(sp)
    3a54:	010001c4 	movi	r4,7
    3a58:	20823c16 	blt	r4,r2,434c <___vfprintf_internal_r+0x1174>
    3a5c:	42000204 	addi	r8,r8,8
    3a60:	d8802b17 	ldw	r2,172(sp)
    3a64:	10000c26 	beq	r2,zero,3a98 <___vfprintf_internal_r+0x8c0>
    3a68:	d8801f17 	ldw	r2,124(sp)
    3a6c:	d9002704 	addi	r4,sp,156
    3a70:	18c00084 	addi	r3,r3,2
    3a74:	10800044 	addi	r2,r2,1
    3a78:	41000015 	stw	r4,0(r8)
    3a7c:	01000084 	movi	r4,2
    3a80:	41000115 	stw	r4,4(r8)
    3a84:	d8c02015 	stw	r3,128(sp)
    3a88:	d8801f15 	stw	r2,124(sp)
    3a8c:	010001c4 	movi	r4,7
    3a90:	20823616 	blt	r4,r2,436c <___vfprintf_internal_r+0x1194>
    3a94:	42000204 	addi	r8,r8,8
    3a98:	d9003017 	ldw	r4,192(sp)
    3a9c:	00802004 	movi	r2,128
    3aa0:	20819926 	beq	r4,r2,4108 <___vfprintf_internal_r+0xf30>
    3aa4:	d9402917 	ldw	r5,164(sp)
    3aa8:	d8802e17 	ldw	r2,184(sp)
    3aac:	28adc83a 	sub	r22,r5,r2
    3ab0:	0580310e 	bge	zero,r22,3b78 <___vfprintf_internal_r+0x9a0>
    3ab4:	07000404 	movi	fp,16
    3ab8:	d8801f17 	ldw	r2,124(sp)
    3abc:	e584140e 	bge	fp,r22,4b10 <___vfprintf_internal_r+0x1938>
    3ac0:	01400074 	movhi	r5,1
    3ac4:	29456284 	addi	r5,r5,5514
    3ac8:	dc402915 	stw	r17,164(sp)
    3acc:	d9402b15 	stw	r5,172(sp)
    3ad0:	b023883a 	mov	r17,r22
    3ad4:	04c001c4 	movi	r19,7
    3ad8:	a82d883a 	mov	r22,r21
    3adc:	902b883a 	mov	r21,r18
    3ae0:	8025883a 	mov	r18,r16
    3ae4:	dc002c17 	ldw	r16,176(sp)
    3ae8:	00000306 	br	3af8 <___vfprintf_internal_r+0x920>
    3aec:	8c7ffc04 	addi	r17,r17,-16
    3af0:	42000204 	addi	r8,r8,8
    3af4:	e440110e 	bge	fp,r17,3b3c <___vfprintf_internal_r+0x964>
    3af8:	18c00404 	addi	r3,r3,16
    3afc:	10800044 	addi	r2,r2,1
    3b00:	45000015 	stw	r20,0(r8)
    3b04:	47000115 	stw	fp,4(r8)
    3b08:	d8c02015 	stw	r3,128(sp)
    3b0c:	d8801f15 	stw	r2,124(sp)
    3b10:	98bff60e 	bge	r19,r2,3aec <__alt_data_end+0xff003aec>
    3b14:	d9801e04 	addi	r6,sp,120
    3b18:	b80b883a 	mov	r5,r23
    3b1c:	8009883a 	mov	r4,r16
    3b20:	0009f740 	call	9f74 <__sprint_r>
    3b24:	103eae1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    3b28:	8c7ffc04 	addi	r17,r17,-16
    3b2c:	d8c02017 	ldw	r3,128(sp)
    3b30:	d8801f17 	ldw	r2,124(sp)
    3b34:	da000404 	addi	r8,sp,16
    3b38:	e47fef16 	blt	fp,r17,3af8 <__alt_data_end+0xff003af8>
    3b3c:	9021883a 	mov	r16,r18
    3b40:	a825883a 	mov	r18,r21
    3b44:	b02b883a 	mov	r21,r22
    3b48:	882d883a 	mov	r22,r17
    3b4c:	dc402917 	ldw	r17,164(sp)
    3b50:	d9002b17 	ldw	r4,172(sp)
    3b54:	1d87883a 	add	r3,r3,r22
    3b58:	10800044 	addi	r2,r2,1
    3b5c:	41000015 	stw	r4,0(r8)
    3b60:	45800115 	stw	r22,4(r8)
    3b64:	d8c02015 	stw	r3,128(sp)
    3b68:	d8801f15 	stw	r2,124(sp)
    3b6c:	010001c4 	movi	r4,7
    3b70:	2081ee16 	blt	r4,r2,432c <___vfprintf_internal_r+0x1154>
    3b74:	42000204 	addi	r8,r8,8
    3b78:	9080400c 	andi	r2,r18,256
    3b7c:	1001181e 	bne	r2,zero,3fe0 <___vfprintf_internal_r+0xe08>
    3b80:	d9402e17 	ldw	r5,184(sp)
    3b84:	d8801f17 	ldw	r2,124(sp)
    3b88:	44000015 	stw	r16,0(r8)
    3b8c:	1947883a 	add	r3,r3,r5
    3b90:	10800044 	addi	r2,r2,1
    3b94:	41400115 	stw	r5,4(r8)
    3b98:	d8c02015 	stw	r3,128(sp)
    3b9c:	d8801f15 	stw	r2,124(sp)
    3ba0:	010001c4 	movi	r4,7
    3ba4:	2081d316 	blt	r4,r2,42f4 <___vfprintf_internal_r+0x111c>
    3ba8:	42000204 	addi	r8,r8,8
    3bac:	9480010c 	andi	r18,r18,4
    3bb0:	90003226 	beq	r18,zero,3c7c <___vfprintf_internal_r+0xaa4>
    3bb4:	d9403117 	ldw	r5,196(sp)
    3bb8:	d8802a17 	ldw	r2,168(sp)
    3bbc:	28a1c83a 	sub	r16,r5,r2
    3bc0:	04002e0e 	bge	zero,r16,3c7c <___vfprintf_internal_r+0xaa4>
    3bc4:	04400404 	movi	r17,16
    3bc8:	d8801f17 	ldw	r2,124(sp)
    3bcc:	8c04a20e 	bge	r17,r16,4e58 <___vfprintf_internal_r+0x1c80>
    3bd0:	01400074 	movhi	r5,1
    3bd4:	29456684 	addi	r5,r5,5530
    3bd8:	d9403515 	stw	r5,212(sp)
    3bdc:	048001c4 	movi	r18,7
    3be0:	dcc02c17 	ldw	r19,176(sp)
    3be4:	00000306 	br	3bf4 <___vfprintf_internal_r+0xa1c>
    3be8:	843ffc04 	addi	r16,r16,-16
    3bec:	42000204 	addi	r8,r8,8
    3bf0:	8c00130e 	bge	r17,r16,3c40 <___vfprintf_internal_r+0xa68>
    3bf4:	01000074 	movhi	r4,1
    3bf8:	18c00404 	addi	r3,r3,16
    3bfc:	10800044 	addi	r2,r2,1
    3c00:	21056684 	addi	r4,r4,5530
    3c04:	41000015 	stw	r4,0(r8)
    3c08:	44400115 	stw	r17,4(r8)
    3c0c:	d8c02015 	stw	r3,128(sp)
    3c10:	d8801f15 	stw	r2,124(sp)
    3c14:	90bff40e 	bge	r18,r2,3be8 <__alt_data_end+0xff003be8>
    3c18:	d9801e04 	addi	r6,sp,120
    3c1c:	b80b883a 	mov	r5,r23
    3c20:	9809883a 	mov	r4,r19
    3c24:	0009f740 	call	9f74 <__sprint_r>
    3c28:	103e6d1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    3c2c:	843ffc04 	addi	r16,r16,-16
    3c30:	d8c02017 	ldw	r3,128(sp)
    3c34:	d8801f17 	ldw	r2,124(sp)
    3c38:	da000404 	addi	r8,sp,16
    3c3c:	8c3fed16 	blt	r17,r16,3bf4 <__alt_data_end+0xff003bf4>
    3c40:	d9403517 	ldw	r5,212(sp)
    3c44:	1c07883a 	add	r3,r3,r16
    3c48:	10800044 	addi	r2,r2,1
    3c4c:	41400015 	stw	r5,0(r8)
    3c50:	44000115 	stw	r16,4(r8)
    3c54:	d8c02015 	stw	r3,128(sp)
    3c58:	d8801f15 	stw	r2,124(sp)
    3c5c:	010001c4 	movi	r4,7
    3c60:	2080060e 	bge	r4,r2,3c7c <___vfprintf_internal_r+0xaa4>
    3c64:	d9002c17 	ldw	r4,176(sp)
    3c68:	d9801e04 	addi	r6,sp,120
    3c6c:	b80b883a 	mov	r5,r23
    3c70:	0009f740 	call	9f74 <__sprint_r>
    3c74:	103e5a1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    3c78:	d8c02017 	ldw	r3,128(sp)
    3c7c:	d8803117 	ldw	r2,196(sp)
    3c80:	d9002a17 	ldw	r4,168(sp)
    3c84:	1100010e 	bge	r2,r4,3c8c <___vfprintf_internal_r+0xab4>
    3c88:	2005883a 	mov	r2,r4
    3c8c:	d9402f17 	ldw	r5,188(sp)
    3c90:	288b883a 	add	r5,r5,r2
    3c94:	d9402f15 	stw	r5,188(sp)
    3c98:	18019e1e 	bne	r3,zero,4314 <___vfprintf_internal_r+0x113c>
    3c9c:	a8800007 	ldb	r2,0(r21)
    3ca0:	d8001f15 	stw	zero,124(sp)
    3ca4:	da000404 	addi	r8,sp,16
    3ca8:	103d851e 	bne	r2,zero,32c0 <__alt_data_end+0xff0032c0>
    3cac:	a821883a 	mov	r16,r21
    3cb0:	003d9b06 	br	3320 <__alt_data_end+0xff003320>
    3cb4:	18c03fcc 	andi	r3,r3,255
    3cb8:	1805c11e 	bne	r3,zero,53c0 <___vfprintf_internal_r+0x21e8>
    3cbc:	94800414 	ori	r18,r18,16
    3cc0:	9080080c 	andi	r2,r18,32
    3cc4:	10020c26 	beq	r2,zero,44f8 <___vfprintf_internal_r+0x1320>
    3cc8:	d8802d17 	ldw	r2,180(sp)
    3ccc:	d9002917 	ldw	r4,164(sp)
    3cd0:	d8002785 	stb	zero,158(sp)
    3cd4:	10c00204 	addi	r3,r2,8
    3cd8:	14c00017 	ldw	r19,0(r2)
    3cdc:	15800117 	ldw	r22,4(r2)
    3ce0:	20040f16 	blt	r4,zero,4d20 <___vfprintf_internal_r+0x1b48>
    3ce4:	013fdfc4 	movi	r4,-129
    3ce8:	9d84b03a 	or	r2,r19,r22
    3cec:	d8c02d15 	stw	r3,180(sp)
    3cf0:	9124703a 	and	r18,r18,r4
    3cf4:	0039883a 	mov	fp,zero
    3cf8:	103e891e 	bne	r2,zero,3720 <__alt_data_end+0xff003720>
    3cfc:	d9002917 	ldw	r4,164(sp)
    3d00:	2002c11e 	bne	r4,zero,4808 <___vfprintf_internal_r+0x1630>
    3d04:	d8002915 	stw	zero,164(sp)
    3d08:	d8002e15 	stw	zero,184(sp)
    3d0c:	dc001e04 	addi	r16,sp,120
    3d10:	003ef806 	br	38f4 <__alt_data_end+0xff0038f4>
    3d14:	18c03fcc 	andi	r3,r3,255
    3d18:	18059d1e 	bne	r3,zero,5390 <___vfprintf_internal_r+0x21b8>
    3d1c:	01400074 	movhi	r5,1
    3d20:	29455604 	addi	r5,r5,5464
    3d24:	d9403915 	stw	r5,228(sp)
    3d28:	9080080c 	andi	r2,r18,32
    3d2c:	10005226 	beq	r2,zero,3e78 <___vfprintf_internal_r+0xca0>
    3d30:	d8802d17 	ldw	r2,180(sp)
    3d34:	14c00017 	ldw	r19,0(r2)
    3d38:	15800117 	ldw	r22,4(r2)
    3d3c:	10800204 	addi	r2,r2,8
    3d40:	d8802d15 	stw	r2,180(sp)
    3d44:	9080004c 	andi	r2,r18,1
    3d48:	10019026 	beq	r2,zero,438c <___vfprintf_internal_r+0x11b4>
    3d4c:	9d84b03a 	or	r2,r19,r22
    3d50:	10036926 	beq	r2,zero,4af8 <___vfprintf_internal_r+0x1920>
    3d54:	d8c02917 	ldw	r3,164(sp)
    3d58:	00800c04 	movi	r2,48
    3d5c:	d8802705 	stb	r2,156(sp)
    3d60:	dc402745 	stb	r17,157(sp)
    3d64:	d8002785 	stb	zero,158(sp)
    3d68:	90800094 	ori	r2,r18,2
    3d6c:	18045d16 	blt	r3,zero,4ee4 <___vfprintf_internal_r+0x1d0c>
    3d70:	00bfdfc4 	movi	r2,-129
    3d74:	90a4703a 	and	r18,r18,r2
    3d78:	94800094 	ori	r18,r18,2
    3d7c:	0039883a 	mov	fp,zero
    3d80:	d9003917 	ldw	r4,228(sp)
    3d84:	dc001e04 	addi	r16,sp,120
    3d88:	988003cc 	andi	r2,r19,15
    3d8c:	b006973a 	slli	r3,r22,28
    3d90:	2085883a 	add	r2,r4,r2
    3d94:	9826d13a 	srli	r19,r19,4
    3d98:	10800003 	ldbu	r2,0(r2)
    3d9c:	b02cd13a 	srli	r22,r22,4
    3da0:	843fffc4 	addi	r16,r16,-1
    3da4:	1ce6b03a 	or	r19,r3,r19
    3da8:	80800005 	stb	r2,0(r16)
    3dac:	9d84b03a 	or	r2,r19,r22
    3db0:	103ff51e 	bne	r2,zero,3d88 <__alt_data_end+0xff003d88>
    3db4:	d8c02817 	ldw	r3,160(sp)
    3db8:	1c07c83a 	sub	r3,r3,r16
    3dbc:	d8c02e15 	stw	r3,184(sp)
    3dc0:	003ecc06 	br	38f4 <__alt_data_end+0xff0038f4>
    3dc4:	18c03fcc 	andi	r3,r3,255
    3dc8:	183e9f26 	beq	r3,zero,3848 <__alt_data_end+0xff003848>
    3dcc:	d9c02785 	stb	r7,158(sp)
    3dd0:	003e9d06 	br	3848 <__alt_data_end+0xff003848>
    3dd4:	00c00044 	movi	r3,1
    3dd8:	01c00ac4 	movi	r7,43
    3ddc:	ac400007 	ldb	r17,0(r21)
    3de0:	003d5e06 	br	335c <__alt_data_end+0xff00335c>
    3de4:	94800814 	ori	r18,r18,32
    3de8:	ac400007 	ldb	r17,0(r21)
    3dec:	003d5b06 	br	335c <__alt_data_end+0xff00335c>
    3df0:	d8c02d17 	ldw	r3,180(sp)
    3df4:	d8002785 	stb	zero,158(sp)
    3df8:	1c000017 	ldw	r16,0(r3)
    3dfc:	1cc00104 	addi	r19,r3,4
    3e00:	80041926 	beq	r16,zero,4e68 <___vfprintf_internal_r+0x1c90>
    3e04:	d9002917 	ldw	r4,164(sp)
    3e08:	2003d016 	blt	r4,zero,4d4c <___vfprintf_internal_r+0x1b74>
    3e0c:	200d883a 	mov	r6,r4
    3e10:	000b883a 	mov	r5,zero
    3e14:	8009883a 	mov	r4,r16
    3e18:	da003d15 	stw	r8,244(sp)
    3e1c:	00081dc0 	call	81dc <memchr>
    3e20:	da003d17 	ldw	r8,244(sp)
    3e24:	10045426 	beq	r2,zero,4f78 <___vfprintf_internal_r+0x1da0>
    3e28:	1405c83a 	sub	r2,r2,r16
    3e2c:	d8802e15 	stw	r2,184(sp)
    3e30:	1003cc16 	blt	r2,zero,4d64 <___vfprintf_internal_r+0x1b8c>
    3e34:	df002783 	ldbu	fp,158(sp)
    3e38:	d8802a15 	stw	r2,168(sp)
    3e3c:	dcc02d15 	stw	r19,180(sp)
    3e40:	d8002915 	stw	zero,164(sp)
    3e44:	d8003215 	stw	zero,200(sp)
    3e48:	003eb006 	br	390c <__alt_data_end+0xff00390c>
    3e4c:	18c03fcc 	andi	r3,r3,255
    3e50:	183f9b26 	beq	r3,zero,3cc0 <__alt_data_end+0xff003cc0>
    3e54:	d9c02785 	stb	r7,158(sp)
    3e58:	003f9906 	br	3cc0 <__alt_data_end+0xff003cc0>
    3e5c:	18c03fcc 	andi	r3,r3,255
    3e60:	1805551e 	bne	r3,zero,53b8 <___vfprintf_internal_r+0x21e0>
    3e64:	01400074 	movhi	r5,1
    3e68:	29455b04 	addi	r5,r5,5484
    3e6c:	d9403915 	stw	r5,228(sp)
    3e70:	9080080c 	andi	r2,r18,32
    3e74:	103fae1e 	bne	r2,zero,3d30 <__alt_data_end+0xff003d30>
    3e78:	9080040c 	andi	r2,r18,16
    3e7c:	1002de26 	beq	r2,zero,49f8 <___vfprintf_internal_r+0x1820>
    3e80:	d8c02d17 	ldw	r3,180(sp)
    3e84:	002d883a 	mov	r22,zero
    3e88:	1cc00017 	ldw	r19,0(r3)
    3e8c:	18c00104 	addi	r3,r3,4
    3e90:	d8c02d15 	stw	r3,180(sp)
    3e94:	003fab06 	br	3d44 <__alt_data_end+0xff003d44>
    3e98:	38803fcc 	andi	r2,r7,255
    3e9c:	1080201c 	xori	r2,r2,128
    3ea0:	10bfe004 	addi	r2,r2,-128
    3ea4:	1002d21e 	bne	r2,zero,49f0 <___vfprintf_internal_r+0x1818>
    3ea8:	00c00044 	movi	r3,1
    3eac:	01c00804 	movi	r7,32
    3eb0:	ac400007 	ldb	r17,0(r21)
    3eb4:	003d2906 	br	335c <__alt_data_end+0xff00335c>
    3eb8:	94800054 	ori	r18,r18,1
    3ebc:	ac400007 	ldb	r17,0(r21)
    3ec0:	003d2606 	br	335c <__alt_data_end+0xff00335c>
    3ec4:	18c03fcc 	andi	r3,r3,255
    3ec8:	183e0526 	beq	r3,zero,36e0 <__alt_data_end+0xff0036e0>
    3ecc:	d9c02785 	stb	r7,158(sp)
    3ed0:	003e0306 	br	36e0 <__alt_data_end+0xff0036e0>
    3ed4:	94801014 	ori	r18,r18,64
    3ed8:	ac400007 	ldb	r17,0(r21)
    3edc:	003d1f06 	br	335c <__alt_data_end+0xff00335c>
    3ee0:	ac400007 	ldb	r17,0(r21)
    3ee4:	8a438726 	beq	r17,r9,4d04 <___vfprintf_internal_r+0x1b2c>
    3ee8:	94800414 	ori	r18,r18,16
    3eec:	003d1b06 	br	335c <__alt_data_end+0xff00335c>
    3ef0:	18c03fcc 	andi	r3,r3,255
    3ef4:	1805341e 	bne	r3,zero,53c8 <___vfprintf_internal_r+0x21f0>
    3ef8:	9080080c 	andi	r2,r18,32
    3efc:	1002cd26 	beq	r2,zero,4a34 <___vfprintf_internal_r+0x185c>
    3f00:	d9402d17 	ldw	r5,180(sp)
    3f04:	d9002f17 	ldw	r4,188(sp)
    3f08:	28800017 	ldw	r2,0(r5)
    3f0c:	2007d7fa 	srai	r3,r4,31
    3f10:	29400104 	addi	r5,r5,4
    3f14:	d9402d15 	stw	r5,180(sp)
    3f18:	11000015 	stw	r4,0(r2)
    3f1c:	10c00115 	stw	r3,4(r2)
    3f20:	003ce506 	br	32b8 <__alt_data_end+0xff0032b8>
    3f24:	d8c02d17 	ldw	r3,180(sp)
    3f28:	d9002d17 	ldw	r4,180(sp)
    3f2c:	d8002785 	stb	zero,158(sp)
    3f30:	18800017 	ldw	r2,0(r3)
    3f34:	21000104 	addi	r4,r4,4
    3f38:	00c00044 	movi	r3,1
    3f3c:	d8c02a15 	stw	r3,168(sp)
    3f40:	d8801405 	stb	r2,80(sp)
    3f44:	d9002d15 	stw	r4,180(sp)
    3f48:	d8c02e15 	stw	r3,184(sp)
    3f4c:	d8002915 	stw	zero,164(sp)
    3f50:	d8003215 	stw	zero,200(sp)
    3f54:	dc001404 	addi	r16,sp,80
    3f58:	0039883a 	mov	fp,zero
    3f5c:	003e7206 	br	3928 <__alt_data_end+0xff003928>
    3f60:	01000074 	movhi	r4,1
    3f64:	21055b04 	addi	r4,r4,5484
    3f68:	0039883a 	mov	fp,zero
    3f6c:	d9003915 	stw	r4,228(sp)
    3f70:	04401e04 	movi	r17,120
    3f74:	003f8206 	br	3d80 <__alt_data_end+0xff003d80>
    3f78:	18c03fcc 	andi	r3,r3,255
    3f7c:	1805061e 	bne	r3,zero,5398 <___vfprintf_internal_r+0x21c0>
    3f80:	883d9126 	beq	r17,zero,35c8 <__alt_data_end+0xff0035c8>
    3f84:	00c00044 	movi	r3,1
    3f88:	d8c02a15 	stw	r3,168(sp)
    3f8c:	dc401405 	stb	r17,80(sp)
    3f90:	d8002785 	stb	zero,158(sp)
    3f94:	003fec06 	br	3f48 <__alt_data_end+0xff003f48>
    3f98:	01400074 	movhi	r5,1
    3f9c:	29455b04 	addi	r5,r5,5484
    3fa0:	d9403915 	stw	r5,228(sp)
    3fa4:	d8c02d15 	stw	r3,180(sp)
    3fa8:	1025883a 	mov	r18,r2
    3fac:	04401e04 	movi	r17,120
    3fb0:	9d84b03a 	or	r2,r19,r22
    3fb4:	1000fc1e 	bne	r2,zero,43a8 <___vfprintf_internal_r+0x11d0>
    3fb8:	0039883a 	mov	fp,zero
    3fbc:	00800084 	movi	r2,2
    3fc0:	10803fcc 	andi	r2,r2,255
    3fc4:	00c00044 	movi	r3,1
    3fc8:	10c20f26 	beq	r2,r3,4808 <___vfprintf_internal_r+0x1630>
    3fcc:	00c00084 	movi	r3,2
    3fd0:	10fd6326 	beq	r2,r3,3560 <__alt_data_end+0xff003560>
    3fd4:	003e2d06 	br	388c <__alt_data_end+0xff00388c>
    3fd8:	d8c02017 	ldw	r3,128(sp)
    3fdc:	003e9306 	br	3a2c <__alt_data_end+0xff003a2c>
    3fe0:	00801944 	movi	r2,101
    3fe4:	14407e0e 	bge	r2,r17,41e0 <___vfprintf_internal_r+0x1008>
    3fe8:	d9003617 	ldw	r4,216(sp)
    3fec:	d9403817 	ldw	r5,224(sp)
    3ff0:	000d883a 	mov	r6,zero
    3ff4:	000f883a 	mov	r7,zero
    3ff8:	d8c03c15 	stw	r3,240(sp)
    3ffc:	da003d15 	stw	r8,244(sp)
    4000:	000d1500 	call	d150 <__eqdf2>
    4004:	d8c03c17 	ldw	r3,240(sp)
    4008:	da003d17 	ldw	r8,244(sp)
    400c:	1000f71e 	bne	r2,zero,43ec <___vfprintf_internal_r+0x1214>
    4010:	d8801f17 	ldw	r2,124(sp)
    4014:	01000074 	movhi	r4,1
    4018:	21056204 	addi	r4,r4,5512
    401c:	18c00044 	addi	r3,r3,1
    4020:	10800044 	addi	r2,r2,1
    4024:	41000015 	stw	r4,0(r8)
    4028:	01000044 	movi	r4,1
    402c:	41000115 	stw	r4,4(r8)
    4030:	d8c02015 	stw	r3,128(sp)
    4034:	d8801f15 	stw	r2,124(sp)
    4038:	010001c4 	movi	r4,7
    403c:	2082b816 	blt	r4,r2,4b20 <___vfprintf_internal_r+0x1948>
    4040:	42000204 	addi	r8,r8,8
    4044:	d8802617 	ldw	r2,152(sp)
    4048:	d9403317 	ldw	r5,204(sp)
    404c:	11400216 	blt	r2,r5,4058 <___vfprintf_internal_r+0xe80>
    4050:	9080004c 	andi	r2,r18,1
    4054:	103ed526 	beq	r2,zero,3bac <__alt_data_end+0xff003bac>
    4058:	d8803717 	ldw	r2,220(sp)
    405c:	d9003417 	ldw	r4,208(sp)
    4060:	d9403717 	ldw	r5,220(sp)
    4064:	1887883a 	add	r3,r3,r2
    4068:	d8801f17 	ldw	r2,124(sp)
    406c:	41000015 	stw	r4,0(r8)
    4070:	41400115 	stw	r5,4(r8)
    4074:	10800044 	addi	r2,r2,1
    4078:	d8c02015 	stw	r3,128(sp)
    407c:	d8801f15 	stw	r2,124(sp)
    4080:	010001c4 	movi	r4,7
    4084:	20832916 	blt	r4,r2,4d2c <___vfprintf_internal_r+0x1b54>
    4088:	42000204 	addi	r8,r8,8
    408c:	d8803317 	ldw	r2,204(sp)
    4090:	143fffc4 	addi	r16,r2,-1
    4094:	043ec50e 	bge	zero,r16,3bac <__alt_data_end+0xff003bac>
    4098:	04400404 	movi	r17,16
    409c:	d8801f17 	ldw	r2,124(sp)
    40a0:	8c00880e 	bge	r17,r16,42c4 <___vfprintf_internal_r+0x10ec>
    40a4:	01400074 	movhi	r5,1
    40a8:	29456284 	addi	r5,r5,5514
    40ac:	d9402b15 	stw	r5,172(sp)
    40b0:	058001c4 	movi	r22,7
    40b4:	dcc02c17 	ldw	r19,176(sp)
    40b8:	00000306 	br	40c8 <___vfprintf_internal_r+0xef0>
    40bc:	42000204 	addi	r8,r8,8
    40c0:	843ffc04 	addi	r16,r16,-16
    40c4:	8c00820e 	bge	r17,r16,42d0 <___vfprintf_internal_r+0x10f8>
    40c8:	18c00404 	addi	r3,r3,16
    40cc:	10800044 	addi	r2,r2,1
    40d0:	45000015 	stw	r20,0(r8)
    40d4:	44400115 	stw	r17,4(r8)
    40d8:	d8c02015 	stw	r3,128(sp)
    40dc:	d8801f15 	stw	r2,124(sp)
    40e0:	b0bff60e 	bge	r22,r2,40bc <__alt_data_end+0xff0040bc>
    40e4:	d9801e04 	addi	r6,sp,120
    40e8:	b80b883a 	mov	r5,r23
    40ec:	9809883a 	mov	r4,r19
    40f0:	0009f740 	call	9f74 <__sprint_r>
    40f4:	103d3a1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    40f8:	d8c02017 	ldw	r3,128(sp)
    40fc:	d8801f17 	ldw	r2,124(sp)
    4100:	da000404 	addi	r8,sp,16
    4104:	003fee06 	br	40c0 <__alt_data_end+0xff0040c0>
    4108:	d9403117 	ldw	r5,196(sp)
    410c:	d8802a17 	ldw	r2,168(sp)
    4110:	28adc83a 	sub	r22,r5,r2
    4114:	05be630e 	bge	zero,r22,3aa4 <__alt_data_end+0xff003aa4>
    4118:	07000404 	movi	fp,16
    411c:	d8801f17 	ldw	r2,124(sp)
    4120:	e5838f0e 	bge	fp,r22,4f60 <___vfprintf_internal_r+0x1d88>
    4124:	01400074 	movhi	r5,1
    4128:	29456284 	addi	r5,r5,5514
    412c:	dc403015 	stw	r17,192(sp)
    4130:	d9402b15 	stw	r5,172(sp)
    4134:	b023883a 	mov	r17,r22
    4138:	04c001c4 	movi	r19,7
    413c:	a82d883a 	mov	r22,r21
    4140:	902b883a 	mov	r21,r18
    4144:	8025883a 	mov	r18,r16
    4148:	dc002c17 	ldw	r16,176(sp)
    414c:	00000306 	br	415c <___vfprintf_internal_r+0xf84>
    4150:	8c7ffc04 	addi	r17,r17,-16
    4154:	42000204 	addi	r8,r8,8
    4158:	e440110e 	bge	fp,r17,41a0 <___vfprintf_internal_r+0xfc8>
    415c:	18c00404 	addi	r3,r3,16
    4160:	10800044 	addi	r2,r2,1
    4164:	45000015 	stw	r20,0(r8)
    4168:	47000115 	stw	fp,4(r8)
    416c:	d8c02015 	stw	r3,128(sp)
    4170:	d8801f15 	stw	r2,124(sp)
    4174:	98bff60e 	bge	r19,r2,4150 <__alt_data_end+0xff004150>
    4178:	d9801e04 	addi	r6,sp,120
    417c:	b80b883a 	mov	r5,r23
    4180:	8009883a 	mov	r4,r16
    4184:	0009f740 	call	9f74 <__sprint_r>
    4188:	103d151e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    418c:	8c7ffc04 	addi	r17,r17,-16
    4190:	d8c02017 	ldw	r3,128(sp)
    4194:	d8801f17 	ldw	r2,124(sp)
    4198:	da000404 	addi	r8,sp,16
    419c:	e47fef16 	blt	fp,r17,415c <__alt_data_end+0xff00415c>
    41a0:	9021883a 	mov	r16,r18
    41a4:	a825883a 	mov	r18,r21
    41a8:	b02b883a 	mov	r21,r22
    41ac:	882d883a 	mov	r22,r17
    41b0:	dc403017 	ldw	r17,192(sp)
    41b4:	d9002b17 	ldw	r4,172(sp)
    41b8:	1d87883a 	add	r3,r3,r22
    41bc:	10800044 	addi	r2,r2,1
    41c0:	41000015 	stw	r4,0(r8)
    41c4:	45800115 	stw	r22,4(r8)
    41c8:	d8c02015 	stw	r3,128(sp)
    41cc:	d8801f15 	stw	r2,124(sp)
    41d0:	010001c4 	movi	r4,7
    41d4:	20818e16 	blt	r4,r2,4810 <___vfprintf_internal_r+0x1638>
    41d8:	42000204 	addi	r8,r8,8
    41dc:	003e3106 	br	3aa4 <__alt_data_end+0xff003aa4>
    41e0:	d9403317 	ldw	r5,204(sp)
    41e4:	00800044 	movi	r2,1
    41e8:	18c00044 	addi	r3,r3,1
    41ec:	1141530e 	bge	r2,r5,473c <___vfprintf_internal_r+0x1564>
    41f0:	dc401f17 	ldw	r17,124(sp)
    41f4:	00800044 	movi	r2,1
    41f8:	40800115 	stw	r2,4(r8)
    41fc:	8c400044 	addi	r17,r17,1
    4200:	44000015 	stw	r16,0(r8)
    4204:	d8c02015 	stw	r3,128(sp)
    4208:	dc401f15 	stw	r17,124(sp)
    420c:	008001c4 	movi	r2,7
    4210:	14416b16 	blt	r2,r17,47c0 <___vfprintf_internal_r+0x15e8>
    4214:	42000204 	addi	r8,r8,8
    4218:	d8803717 	ldw	r2,220(sp)
    421c:	d9003417 	ldw	r4,208(sp)
    4220:	8c400044 	addi	r17,r17,1
    4224:	10c7883a 	add	r3,r2,r3
    4228:	40800115 	stw	r2,4(r8)
    422c:	41000015 	stw	r4,0(r8)
    4230:	d8c02015 	stw	r3,128(sp)
    4234:	dc401f15 	stw	r17,124(sp)
    4238:	008001c4 	movi	r2,7
    423c:	14416916 	blt	r2,r17,47e4 <___vfprintf_internal_r+0x160c>
    4240:	45800204 	addi	r22,r8,8
    4244:	d9003617 	ldw	r4,216(sp)
    4248:	d9403817 	ldw	r5,224(sp)
    424c:	000d883a 	mov	r6,zero
    4250:	000f883a 	mov	r7,zero
    4254:	d8c03c15 	stw	r3,240(sp)
    4258:	000d1500 	call	d150 <__eqdf2>
    425c:	d8c03c17 	ldw	r3,240(sp)
    4260:	1000bc26 	beq	r2,zero,4554 <___vfprintf_internal_r+0x137c>
    4264:	d9403317 	ldw	r5,204(sp)
    4268:	84000044 	addi	r16,r16,1
    426c:	8c400044 	addi	r17,r17,1
    4270:	28bfffc4 	addi	r2,r5,-1
    4274:	1887883a 	add	r3,r3,r2
    4278:	b0800115 	stw	r2,4(r22)
    427c:	b4000015 	stw	r16,0(r22)
    4280:	d8c02015 	stw	r3,128(sp)
    4284:	dc401f15 	stw	r17,124(sp)
    4288:	008001c4 	movi	r2,7
    428c:	14414316 	blt	r2,r17,479c <___vfprintf_internal_r+0x15c4>
    4290:	b5800204 	addi	r22,r22,8
    4294:	d9003a17 	ldw	r4,232(sp)
    4298:	df0022c4 	addi	fp,sp,139
    429c:	8c400044 	addi	r17,r17,1
    42a0:	20c7883a 	add	r3,r4,r3
    42a4:	b7000015 	stw	fp,0(r22)
    42a8:	b1000115 	stw	r4,4(r22)
    42ac:	d8c02015 	stw	r3,128(sp)
    42b0:	dc401f15 	stw	r17,124(sp)
    42b4:	008001c4 	movi	r2,7
    42b8:	14400e16 	blt	r2,r17,42f4 <___vfprintf_internal_r+0x111c>
    42bc:	b2000204 	addi	r8,r22,8
    42c0:	003e3a06 	br	3bac <__alt_data_end+0xff003bac>
    42c4:	01000074 	movhi	r4,1
    42c8:	21056284 	addi	r4,r4,5514
    42cc:	d9002b15 	stw	r4,172(sp)
    42d0:	d9002b17 	ldw	r4,172(sp)
    42d4:	1c07883a 	add	r3,r3,r16
    42d8:	44000115 	stw	r16,4(r8)
    42dc:	41000015 	stw	r4,0(r8)
    42e0:	10800044 	addi	r2,r2,1
    42e4:	d8c02015 	stw	r3,128(sp)
    42e8:	d8801f15 	stw	r2,124(sp)
    42ec:	010001c4 	movi	r4,7
    42f0:	20be2d0e 	bge	r4,r2,3ba8 <__alt_data_end+0xff003ba8>
    42f4:	d9002c17 	ldw	r4,176(sp)
    42f8:	d9801e04 	addi	r6,sp,120
    42fc:	b80b883a 	mov	r5,r23
    4300:	0009f740 	call	9f74 <__sprint_r>
    4304:	103cb61e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4308:	d8c02017 	ldw	r3,128(sp)
    430c:	da000404 	addi	r8,sp,16
    4310:	003e2606 	br	3bac <__alt_data_end+0xff003bac>
    4314:	d9002c17 	ldw	r4,176(sp)
    4318:	d9801e04 	addi	r6,sp,120
    431c:	b80b883a 	mov	r5,r23
    4320:	0009f740 	call	9f74 <__sprint_r>
    4324:	103e5d26 	beq	r2,zero,3c9c <__alt_data_end+0xff003c9c>
    4328:	003cad06 	br	35e0 <__alt_data_end+0xff0035e0>
    432c:	d9002c17 	ldw	r4,176(sp)
    4330:	d9801e04 	addi	r6,sp,120
    4334:	b80b883a 	mov	r5,r23
    4338:	0009f740 	call	9f74 <__sprint_r>
    433c:	103ca81e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4340:	d8c02017 	ldw	r3,128(sp)
    4344:	da000404 	addi	r8,sp,16
    4348:	003e0b06 	br	3b78 <__alt_data_end+0xff003b78>
    434c:	d9002c17 	ldw	r4,176(sp)
    4350:	d9801e04 	addi	r6,sp,120
    4354:	b80b883a 	mov	r5,r23
    4358:	0009f740 	call	9f74 <__sprint_r>
    435c:	103ca01e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4360:	d8c02017 	ldw	r3,128(sp)
    4364:	da000404 	addi	r8,sp,16
    4368:	003dbd06 	br	3a60 <__alt_data_end+0xff003a60>
    436c:	d9002c17 	ldw	r4,176(sp)
    4370:	d9801e04 	addi	r6,sp,120
    4374:	b80b883a 	mov	r5,r23
    4378:	0009f740 	call	9f74 <__sprint_r>
    437c:	103c981e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4380:	d8c02017 	ldw	r3,128(sp)
    4384:	da000404 	addi	r8,sp,16
    4388:	003dc306 	br	3a98 <__alt_data_end+0xff003a98>
    438c:	d8802917 	ldw	r2,164(sp)
    4390:	d8002785 	stb	zero,158(sp)
    4394:	103f0616 	blt	r2,zero,3fb0 <__alt_data_end+0xff003fb0>
    4398:	00ffdfc4 	movi	r3,-129
    439c:	9d84b03a 	or	r2,r19,r22
    43a0:	90e4703a 	and	r18,r18,r3
    43a4:	103c6b26 	beq	r2,zero,3554 <__alt_data_end+0xff003554>
    43a8:	0039883a 	mov	fp,zero
    43ac:	003e7406 	br	3d80 <__alt_data_end+0xff003d80>
    43b0:	9080040c 	andi	r2,r18,16
    43b4:	1001b326 	beq	r2,zero,4a84 <___vfprintf_internal_r+0x18ac>
    43b8:	d9002d17 	ldw	r4,180(sp)
    43bc:	d9402917 	ldw	r5,164(sp)
    43c0:	d8002785 	stb	zero,158(sp)
    43c4:	20800104 	addi	r2,r4,4
    43c8:	24c00017 	ldw	r19,0(r4)
    43cc:	002d883a 	mov	r22,zero
    43d0:	2801b516 	blt	r5,zero,4aa8 <___vfprintf_internal_r+0x18d0>
    43d4:	00ffdfc4 	movi	r3,-129
    43d8:	d8802d15 	stw	r2,180(sp)
    43dc:	90e4703a 	and	r18,r18,r3
    43e0:	983d2726 	beq	r19,zero,3880 <__alt_data_end+0xff003880>
    43e4:	0039883a 	mov	fp,zero
    43e8:	003d2a06 	br	3894 <__alt_data_end+0xff003894>
    43ec:	dc402617 	ldw	r17,152(sp)
    43f0:	0441d30e 	bge	zero,r17,4b40 <___vfprintf_internal_r+0x1968>
    43f4:	dc403217 	ldw	r17,200(sp)
    43f8:	d8803317 	ldw	r2,204(sp)
    43fc:	1440010e 	bge	r2,r17,4404 <___vfprintf_internal_r+0x122c>
    4400:	1023883a 	mov	r17,r2
    4404:	04400a0e 	bge	zero,r17,4430 <___vfprintf_internal_r+0x1258>
    4408:	d8801f17 	ldw	r2,124(sp)
    440c:	1c47883a 	add	r3,r3,r17
    4410:	44000015 	stw	r16,0(r8)
    4414:	10800044 	addi	r2,r2,1
    4418:	44400115 	stw	r17,4(r8)
    441c:	d8c02015 	stw	r3,128(sp)
    4420:	d8801f15 	stw	r2,124(sp)
    4424:	010001c4 	movi	r4,7
    4428:	20826516 	blt	r4,r2,4dc0 <___vfprintf_internal_r+0x1be8>
    442c:	42000204 	addi	r8,r8,8
    4430:	88026116 	blt	r17,zero,4db8 <___vfprintf_internal_r+0x1be0>
    4434:	d9003217 	ldw	r4,200(sp)
    4438:	2463c83a 	sub	r17,r4,r17
    443c:	04407b0e 	bge	zero,r17,462c <___vfprintf_internal_r+0x1454>
    4440:	05800404 	movi	r22,16
    4444:	d8801f17 	ldw	r2,124(sp)
    4448:	b4419d0e 	bge	r22,r17,4ac0 <___vfprintf_internal_r+0x18e8>
    444c:	01000074 	movhi	r4,1
    4450:	21056284 	addi	r4,r4,5514
    4454:	d9002b15 	stw	r4,172(sp)
    4458:	070001c4 	movi	fp,7
    445c:	dcc02c17 	ldw	r19,176(sp)
    4460:	00000306 	br	4470 <___vfprintf_internal_r+0x1298>
    4464:	42000204 	addi	r8,r8,8
    4468:	8c7ffc04 	addi	r17,r17,-16
    446c:	b441970e 	bge	r22,r17,4acc <___vfprintf_internal_r+0x18f4>
    4470:	18c00404 	addi	r3,r3,16
    4474:	10800044 	addi	r2,r2,1
    4478:	45000015 	stw	r20,0(r8)
    447c:	45800115 	stw	r22,4(r8)
    4480:	d8c02015 	stw	r3,128(sp)
    4484:	d8801f15 	stw	r2,124(sp)
    4488:	e0bff60e 	bge	fp,r2,4464 <__alt_data_end+0xff004464>
    448c:	d9801e04 	addi	r6,sp,120
    4490:	b80b883a 	mov	r5,r23
    4494:	9809883a 	mov	r4,r19
    4498:	0009f740 	call	9f74 <__sprint_r>
    449c:	103c501e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    44a0:	d8c02017 	ldw	r3,128(sp)
    44a4:	d8801f17 	ldw	r2,124(sp)
    44a8:	da000404 	addi	r8,sp,16
    44ac:	003fee06 	br	4468 <__alt_data_end+0xff004468>
    44b0:	d9002c17 	ldw	r4,176(sp)
    44b4:	d9801e04 	addi	r6,sp,120
    44b8:	b80b883a 	mov	r5,r23
    44bc:	0009f740 	call	9f74 <__sprint_r>
    44c0:	103c471e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    44c4:	d8c02017 	ldw	r3,128(sp)
    44c8:	df002787 	ldb	fp,158(sp)
    44cc:	da000404 	addi	r8,sp,16
    44d0:	003d5606 	br	3a2c <__alt_data_end+0xff003a2c>
    44d4:	9080040c 	andi	r2,r18,16
    44d8:	10016126 	beq	r2,zero,4a60 <___vfprintf_internal_r+0x1888>
    44dc:	d8802d17 	ldw	r2,180(sp)
    44e0:	14c00017 	ldw	r19,0(r2)
    44e4:	10800104 	addi	r2,r2,4
    44e8:	d8802d15 	stw	r2,180(sp)
    44ec:	982dd7fa 	srai	r22,r19,31
    44f0:	b005883a 	mov	r2,r22
    44f4:	003c8206 	br	3700 <__alt_data_end+0xff003700>
    44f8:	9080040c 	andi	r2,r18,16
    44fc:	10003526 	beq	r2,zero,45d4 <___vfprintf_internal_r+0x13fc>
    4500:	d9402d17 	ldw	r5,180(sp)
    4504:	d8c02917 	ldw	r3,164(sp)
    4508:	d8002785 	stb	zero,158(sp)
    450c:	28800104 	addi	r2,r5,4
    4510:	2cc00017 	ldw	r19,0(r5)
    4514:	002d883a 	mov	r22,zero
    4518:	18003716 	blt	r3,zero,45f8 <___vfprintf_internal_r+0x1420>
    451c:	00ffdfc4 	movi	r3,-129
    4520:	d8802d15 	stw	r2,180(sp)
    4524:	90e4703a 	and	r18,r18,r3
    4528:	0039883a 	mov	fp,zero
    452c:	983df326 	beq	r19,zero,3cfc <__alt_data_end+0xff003cfc>
    4530:	00800244 	movi	r2,9
    4534:	14fc7b36 	bltu	r2,r19,3724 <__alt_data_end+0xff003724>
    4538:	d8c02817 	ldw	r3,160(sp)
    453c:	dc001dc4 	addi	r16,sp,119
    4540:	9cc00c04 	addi	r19,r19,48
    4544:	1c07c83a 	sub	r3,r3,r16
    4548:	dcc01dc5 	stb	r19,119(sp)
    454c:	d8c02e15 	stw	r3,184(sp)
    4550:	003ce806 	br	38f4 <__alt_data_end+0xff0038f4>
    4554:	d8803317 	ldw	r2,204(sp)
    4558:	143fffc4 	addi	r16,r2,-1
    455c:	043f4d0e 	bge	zero,r16,4294 <__alt_data_end+0xff004294>
    4560:	07000404 	movi	fp,16
    4564:	e400810e 	bge	fp,r16,476c <___vfprintf_internal_r+0x1594>
    4568:	01400074 	movhi	r5,1
    456c:	29456284 	addi	r5,r5,5514
    4570:	d9402b15 	stw	r5,172(sp)
    4574:	01c001c4 	movi	r7,7
    4578:	dcc02c17 	ldw	r19,176(sp)
    457c:	00000306 	br	458c <___vfprintf_internal_r+0x13b4>
    4580:	b5800204 	addi	r22,r22,8
    4584:	843ffc04 	addi	r16,r16,-16
    4588:	e4007b0e 	bge	fp,r16,4778 <___vfprintf_internal_r+0x15a0>
    458c:	18c00404 	addi	r3,r3,16
    4590:	8c400044 	addi	r17,r17,1
    4594:	b5000015 	stw	r20,0(r22)
    4598:	b7000115 	stw	fp,4(r22)
    459c:	d8c02015 	stw	r3,128(sp)
    45a0:	dc401f15 	stw	r17,124(sp)
    45a4:	3c7ff60e 	bge	r7,r17,4580 <__alt_data_end+0xff004580>
    45a8:	d9801e04 	addi	r6,sp,120
    45ac:	b80b883a 	mov	r5,r23
    45b0:	9809883a 	mov	r4,r19
    45b4:	d9c03c15 	stw	r7,240(sp)
    45b8:	0009f740 	call	9f74 <__sprint_r>
    45bc:	d9c03c17 	ldw	r7,240(sp)
    45c0:	103c071e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    45c4:	d8c02017 	ldw	r3,128(sp)
    45c8:	dc401f17 	ldw	r17,124(sp)
    45cc:	dd800404 	addi	r22,sp,16
    45d0:	003fec06 	br	4584 <__alt_data_end+0xff004584>
    45d4:	9080100c 	andi	r2,r18,64
    45d8:	d8002785 	stb	zero,158(sp)
    45dc:	10010e26 	beq	r2,zero,4a18 <___vfprintf_internal_r+0x1840>
    45e0:	d9002d17 	ldw	r4,180(sp)
    45e4:	d9402917 	ldw	r5,164(sp)
    45e8:	002d883a 	mov	r22,zero
    45ec:	20800104 	addi	r2,r4,4
    45f0:	24c0000b 	ldhu	r19,0(r4)
    45f4:	283fc90e 	bge	r5,zero,451c <__alt_data_end+0xff00451c>
    45f8:	d8802d15 	stw	r2,180(sp)
    45fc:	0039883a 	mov	fp,zero
    4600:	9d84b03a 	or	r2,r19,r22
    4604:	103c461e 	bne	r2,zero,3720 <__alt_data_end+0xff003720>
    4608:	00800044 	movi	r2,1
    460c:	003e6c06 	br	3fc0 <__alt_data_end+0xff003fc0>
    4610:	d9002c17 	ldw	r4,176(sp)
    4614:	d9801e04 	addi	r6,sp,120
    4618:	b80b883a 	mov	r5,r23
    461c:	0009f740 	call	9f74 <__sprint_r>
    4620:	103bef1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4624:	d8c02017 	ldw	r3,128(sp)
    4628:	da000404 	addi	r8,sp,16
    462c:	d9003217 	ldw	r4,200(sp)
    4630:	d8802617 	ldw	r2,152(sp)
    4634:	d9403317 	ldw	r5,204(sp)
    4638:	8123883a 	add	r17,r16,r4
    463c:	11400216 	blt	r2,r5,4648 <___vfprintf_internal_r+0x1470>
    4640:	9100004c 	andi	r4,r18,1
    4644:	20000d26 	beq	r4,zero,467c <___vfprintf_internal_r+0x14a4>
    4648:	d9003717 	ldw	r4,220(sp)
    464c:	d9403417 	ldw	r5,208(sp)
    4650:	1907883a 	add	r3,r3,r4
    4654:	d9001f17 	ldw	r4,124(sp)
    4658:	41400015 	stw	r5,0(r8)
    465c:	d9403717 	ldw	r5,220(sp)
    4660:	21000044 	addi	r4,r4,1
    4664:	d8c02015 	stw	r3,128(sp)
    4668:	41400115 	stw	r5,4(r8)
    466c:	d9001f15 	stw	r4,124(sp)
    4670:	014001c4 	movi	r5,7
    4674:	2901e816 	blt	r5,r4,4e18 <___vfprintf_internal_r+0x1c40>
    4678:	42000204 	addi	r8,r8,8
    467c:	d9003317 	ldw	r4,204(sp)
    4680:	8121883a 	add	r16,r16,r4
    4684:	2085c83a 	sub	r2,r4,r2
    4688:	8461c83a 	sub	r16,r16,r17
    468c:	1400010e 	bge	r2,r16,4694 <___vfprintf_internal_r+0x14bc>
    4690:	1021883a 	mov	r16,r2
    4694:	04000a0e 	bge	zero,r16,46c0 <___vfprintf_internal_r+0x14e8>
    4698:	d9001f17 	ldw	r4,124(sp)
    469c:	1c07883a 	add	r3,r3,r16
    46a0:	44400015 	stw	r17,0(r8)
    46a4:	21000044 	addi	r4,r4,1
    46a8:	44000115 	stw	r16,4(r8)
    46ac:	d8c02015 	stw	r3,128(sp)
    46b0:	d9001f15 	stw	r4,124(sp)
    46b4:	014001c4 	movi	r5,7
    46b8:	2901fb16 	blt	r5,r4,4ea8 <___vfprintf_internal_r+0x1cd0>
    46bc:	42000204 	addi	r8,r8,8
    46c0:	8001f716 	blt	r16,zero,4ea0 <___vfprintf_internal_r+0x1cc8>
    46c4:	1421c83a 	sub	r16,r2,r16
    46c8:	043d380e 	bge	zero,r16,3bac <__alt_data_end+0xff003bac>
    46cc:	04400404 	movi	r17,16
    46d0:	d8801f17 	ldw	r2,124(sp)
    46d4:	8c3efb0e 	bge	r17,r16,42c4 <__alt_data_end+0xff0042c4>
    46d8:	01400074 	movhi	r5,1
    46dc:	29456284 	addi	r5,r5,5514
    46e0:	d9402b15 	stw	r5,172(sp)
    46e4:	058001c4 	movi	r22,7
    46e8:	dcc02c17 	ldw	r19,176(sp)
    46ec:	00000306 	br	46fc <___vfprintf_internal_r+0x1524>
    46f0:	42000204 	addi	r8,r8,8
    46f4:	843ffc04 	addi	r16,r16,-16
    46f8:	8c3ef50e 	bge	r17,r16,42d0 <__alt_data_end+0xff0042d0>
    46fc:	18c00404 	addi	r3,r3,16
    4700:	10800044 	addi	r2,r2,1
    4704:	45000015 	stw	r20,0(r8)
    4708:	44400115 	stw	r17,4(r8)
    470c:	d8c02015 	stw	r3,128(sp)
    4710:	d8801f15 	stw	r2,124(sp)
    4714:	b0bff60e 	bge	r22,r2,46f0 <__alt_data_end+0xff0046f0>
    4718:	d9801e04 	addi	r6,sp,120
    471c:	b80b883a 	mov	r5,r23
    4720:	9809883a 	mov	r4,r19
    4724:	0009f740 	call	9f74 <__sprint_r>
    4728:	103bad1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    472c:	d8c02017 	ldw	r3,128(sp)
    4730:	d8801f17 	ldw	r2,124(sp)
    4734:	da000404 	addi	r8,sp,16
    4738:	003fee06 	br	46f4 <__alt_data_end+0xff0046f4>
    473c:	9088703a 	and	r4,r18,r2
    4740:	203eab1e 	bne	r4,zero,41f0 <__alt_data_end+0xff0041f0>
    4744:	dc401f17 	ldw	r17,124(sp)
    4748:	40800115 	stw	r2,4(r8)
    474c:	44000015 	stw	r16,0(r8)
    4750:	8c400044 	addi	r17,r17,1
    4754:	d8c02015 	stw	r3,128(sp)
    4758:	dc401f15 	stw	r17,124(sp)
    475c:	008001c4 	movi	r2,7
    4760:	14400e16 	blt	r2,r17,479c <___vfprintf_internal_r+0x15c4>
    4764:	45800204 	addi	r22,r8,8
    4768:	003eca06 	br	4294 <__alt_data_end+0xff004294>
    476c:	01000074 	movhi	r4,1
    4770:	21056284 	addi	r4,r4,5514
    4774:	d9002b15 	stw	r4,172(sp)
    4778:	d8802b17 	ldw	r2,172(sp)
    477c:	1c07883a 	add	r3,r3,r16
    4780:	8c400044 	addi	r17,r17,1
    4784:	b0800015 	stw	r2,0(r22)
    4788:	b4000115 	stw	r16,4(r22)
    478c:	d8c02015 	stw	r3,128(sp)
    4790:	dc401f15 	stw	r17,124(sp)
    4794:	008001c4 	movi	r2,7
    4798:	147ebd0e 	bge	r2,r17,4290 <__alt_data_end+0xff004290>
    479c:	d9002c17 	ldw	r4,176(sp)
    47a0:	d9801e04 	addi	r6,sp,120
    47a4:	b80b883a 	mov	r5,r23
    47a8:	0009f740 	call	9f74 <__sprint_r>
    47ac:	103b8c1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    47b0:	d8c02017 	ldw	r3,128(sp)
    47b4:	dc401f17 	ldw	r17,124(sp)
    47b8:	dd800404 	addi	r22,sp,16
    47bc:	003eb506 	br	4294 <__alt_data_end+0xff004294>
    47c0:	d9002c17 	ldw	r4,176(sp)
    47c4:	d9801e04 	addi	r6,sp,120
    47c8:	b80b883a 	mov	r5,r23
    47cc:	0009f740 	call	9f74 <__sprint_r>
    47d0:	103b831e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    47d4:	d8c02017 	ldw	r3,128(sp)
    47d8:	dc401f17 	ldw	r17,124(sp)
    47dc:	da000404 	addi	r8,sp,16
    47e0:	003e8d06 	br	4218 <__alt_data_end+0xff004218>
    47e4:	d9002c17 	ldw	r4,176(sp)
    47e8:	d9801e04 	addi	r6,sp,120
    47ec:	b80b883a 	mov	r5,r23
    47f0:	0009f740 	call	9f74 <__sprint_r>
    47f4:	103b7a1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    47f8:	d8c02017 	ldw	r3,128(sp)
    47fc:	dc401f17 	ldw	r17,124(sp)
    4800:	dd800404 	addi	r22,sp,16
    4804:	003e8f06 	br	4244 <__alt_data_end+0xff004244>
    4808:	0027883a 	mov	r19,zero
    480c:	003f4a06 	br	4538 <__alt_data_end+0xff004538>
    4810:	d9002c17 	ldw	r4,176(sp)
    4814:	d9801e04 	addi	r6,sp,120
    4818:	b80b883a 	mov	r5,r23
    481c:	0009f740 	call	9f74 <__sprint_r>
    4820:	103b6f1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4824:	d8c02017 	ldw	r3,128(sp)
    4828:	da000404 	addi	r8,sp,16
    482c:	003c9d06 	br	3aa4 <__alt_data_end+0xff003aa4>
    4830:	04e7c83a 	sub	r19,zero,r19
    4834:	9804c03a 	cmpne	r2,r19,zero
    4838:	05adc83a 	sub	r22,zero,r22
    483c:	b0adc83a 	sub	r22,r22,r2
    4840:	d8802917 	ldw	r2,164(sp)
    4844:	07000b44 	movi	fp,45
    4848:	df002785 	stb	fp,158(sp)
    484c:	10017b16 	blt	r2,zero,4e3c <___vfprintf_internal_r+0x1c64>
    4850:	00bfdfc4 	movi	r2,-129
    4854:	90a4703a 	and	r18,r18,r2
    4858:	003bb106 	br	3720 <__alt_data_end+0xff003720>
    485c:	d9003617 	ldw	r4,216(sp)
    4860:	d9403817 	ldw	r5,224(sp)
    4864:	da003d15 	stw	r8,244(sp)
    4868:	0009bec0 	call	9bec <__fpclassifyd>
    486c:	da003d17 	ldw	r8,244(sp)
    4870:	1000f026 	beq	r2,zero,4c34 <___vfprintf_internal_r+0x1a5c>
    4874:	d9002917 	ldw	r4,164(sp)
    4878:	05bff7c4 	movi	r22,-33
    487c:	00bfffc4 	movi	r2,-1
    4880:	8dac703a 	and	r22,r17,r22
    4884:	20820026 	beq	r4,r2,5088 <___vfprintf_internal_r+0x1eb0>
    4888:	008011c4 	movi	r2,71
    488c:	b081f726 	beq	r22,r2,506c <___vfprintf_internal_r+0x1e94>
    4890:	d9003817 	ldw	r4,224(sp)
    4894:	90c04014 	ori	r3,r18,256
    4898:	d8c02b15 	stw	r3,172(sp)
    489c:	20021516 	blt	r4,zero,50f4 <___vfprintf_internal_r+0x1f1c>
    48a0:	dcc03817 	ldw	r19,224(sp)
    48a4:	d8002a05 	stb	zero,168(sp)
    48a8:	00801984 	movi	r2,102
    48ac:	8881f926 	beq	r17,r2,5094 <___vfprintf_internal_r+0x1ebc>
    48b0:	00801184 	movi	r2,70
    48b4:	88821c26 	beq	r17,r2,5128 <___vfprintf_internal_r+0x1f50>
    48b8:	00801144 	movi	r2,69
    48bc:	b081ef26 	beq	r22,r2,507c <___vfprintf_internal_r+0x1ea4>
    48c0:	d8c02917 	ldw	r3,164(sp)
    48c4:	d8802104 	addi	r2,sp,132
    48c8:	d8800315 	stw	r2,12(sp)
    48cc:	d9403617 	ldw	r5,216(sp)
    48d0:	d8802504 	addi	r2,sp,148
    48d4:	d9002c17 	ldw	r4,176(sp)
    48d8:	d8800215 	stw	r2,8(sp)
    48dc:	d8802604 	addi	r2,sp,152
    48e0:	d8c00015 	stw	r3,0(sp)
    48e4:	d8800115 	stw	r2,4(sp)
    48e8:	01c00084 	movi	r7,2
    48ec:	980d883a 	mov	r6,r19
    48f0:	d8c03c15 	stw	r3,240(sp)
    48f4:	da003d15 	stw	r8,244(sp)
    48f8:	00057fc0 	call	57fc <_dtoa_r>
    48fc:	1021883a 	mov	r16,r2
    4900:	008019c4 	movi	r2,103
    4904:	d8c03c17 	ldw	r3,240(sp)
    4908:	da003d17 	ldw	r8,244(sp)
    490c:	88817126 	beq	r17,r2,4ed4 <___vfprintf_internal_r+0x1cfc>
    4910:	008011c4 	movi	r2,71
    4914:	88829226 	beq	r17,r2,5360 <___vfprintf_internal_r+0x2188>
    4918:	80f9883a 	add	fp,r16,r3
    491c:	d9003617 	ldw	r4,216(sp)
    4920:	000d883a 	mov	r6,zero
    4924:	000f883a 	mov	r7,zero
    4928:	980b883a 	mov	r5,r19
    492c:	da003d15 	stw	r8,244(sp)
    4930:	000d1500 	call	d150 <__eqdf2>
    4934:	da003d17 	ldw	r8,244(sp)
    4938:	10018d26 	beq	r2,zero,4f70 <___vfprintf_internal_r+0x1d98>
    493c:	d8802117 	ldw	r2,132(sp)
    4940:	1700062e 	bgeu	r2,fp,495c <___vfprintf_internal_r+0x1784>
    4944:	01000c04 	movi	r4,48
    4948:	10c00044 	addi	r3,r2,1
    494c:	d8c02115 	stw	r3,132(sp)
    4950:	11000005 	stb	r4,0(r2)
    4954:	d8802117 	ldw	r2,132(sp)
    4958:	173ffb36 	bltu	r2,fp,4948 <__alt_data_end+0xff004948>
    495c:	1405c83a 	sub	r2,r2,r16
    4960:	d8803315 	stw	r2,204(sp)
    4964:	008011c4 	movi	r2,71
    4968:	b0817626 	beq	r22,r2,4f44 <___vfprintf_internal_r+0x1d6c>
    496c:	00801944 	movi	r2,101
    4970:	1442810e 	bge	r2,r17,5378 <___vfprintf_internal_r+0x21a0>
    4974:	d8c02617 	ldw	r3,152(sp)
    4978:	00801984 	movi	r2,102
    497c:	d8c03215 	stw	r3,200(sp)
    4980:	8881fe26 	beq	r17,r2,517c <___vfprintf_internal_r+0x1fa4>
    4984:	d8c03217 	ldw	r3,200(sp)
    4988:	d9003317 	ldw	r4,204(sp)
    498c:	1901dd16 	blt	r3,r4,5104 <___vfprintf_internal_r+0x1f2c>
    4990:	9480004c 	andi	r18,r18,1
    4994:	90022b1e 	bne	r18,zero,5244 <___vfprintf_internal_r+0x206c>
    4998:	1805883a 	mov	r2,r3
    499c:	18028016 	blt	r3,zero,53a0 <___vfprintf_internal_r+0x21c8>
    49a0:	d8c03217 	ldw	r3,200(sp)
    49a4:	044019c4 	movi	r17,103
    49a8:	d8c02e15 	stw	r3,184(sp)
    49ac:	df002a07 	ldb	fp,168(sp)
    49b0:	e001531e 	bne	fp,zero,4f00 <___vfprintf_internal_r+0x1d28>
    49b4:	df002783 	ldbu	fp,158(sp)
    49b8:	d8802a15 	stw	r2,168(sp)
    49bc:	dc802b17 	ldw	r18,172(sp)
    49c0:	d8002915 	stw	zero,164(sp)
    49c4:	003bd106 	br	390c <__alt_data_end+0xff00390c>
    49c8:	d8802d17 	ldw	r2,180(sp)
    49cc:	d8c02d17 	ldw	r3,180(sp)
    49d0:	d9002d17 	ldw	r4,180(sp)
    49d4:	10800017 	ldw	r2,0(r2)
    49d8:	18c00117 	ldw	r3,4(r3)
    49dc:	21000204 	addi	r4,r4,8
    49e0:	d8803615 	stw	r2,216(sp)
    49e4:	d8c03815 	stw	r3,224(sp)
    49e8:	d9002d15 	stw	r4,180(sp)
    49ec:	003b7506 	br	37c4 <__alt_data_end+0xff0037c4>
    49f0:	ac400007 	ldb	r17,0(r21)
    49f4:	003a5906 	br	335c <__alt_data_end+0xff00335c>
    49f8:	9080100c 	andi	r2,r18,64
    49fc:	1000a826 	beq	r2,zero,4ca0 <___vfprintf_internal_r+0x1ac8>
    4a00:	d9002d17 	ldw	r4,180(sp)
    4a04:	002d883a 	mov	r22,zero
    4a08:	24c0000b 	ldhu	r19,0(r4)
    4a0c:	21000104 	addi	r4,r4,4
    4a10:	d9002d15 	stw	r4,180(sp)
    4a14:	003ccb06 	br	3d44 <__alt_data_end+0xff003d44>
    4a18:	d8c02d17 	ldw	r3,180(sp)
    4a1c:	d9002917 	ldw	r4,164(sp)
    4a20:	002d883a 	mov	r22,zero
    4a24:	18800104 	addi	r2,r3,4
    4a28:	1cc00017 	ldw	r19,0(r3)
    4a2c:	203ebb0e 	bge	r4,zero,451c <__alt_data_end+0xff00451c>
    4a30:	003ef106 	br	45f8 <__alt_data_end+0xff0045f8>
    4a34:	9080040c 	andi	r2,r18,16
    4a38:	1000921e 	bne	r2,zero,4c84 <___vfprintf_internal_r+0x1aac>
    4a3c:	9480100c 	andi	r18,r18,64
    4a40:	90013926 	beq	r18,zero,4f28 <___vfprintf_internal_r+0x1d50>
    4a44:	d9002d17 	ldw	r4,180(sp)
    4a48:	d9402f17 	ldw	r5,188(sp)
    4a4c:	20800017 	ldw	r2,0(r4)
    4a50:	21000104 	addi	r4,r4,4
    4a54:	d9002d15 	stw	r4,180(sp)
    4a58:	1140000d 	sth	r5,0(r2)
    4a5c:	003a1606 	br	32b8 <__alt_data_end+0xff0032b8>
    4a60:	9080100c 	andi	r2,r18,64
    4a64:	10008026 	beq	r2,zero,4c68 <___vfprintf_internal_r+0x1a90>
    4a68:	d8c02d17 	ldw	r3,180(sp)
    4a6c:	1cc0000f 	ldh	r19,0(r3)
    4a70:	18c00104 	addi	r3,r3,4
    4a74:	d8c02d15 	stw	r3,180(sp)
    4a78:	982dd7fa 	srai	r22,r19,31
    4a7c:	b005883a 	mov	r2,r22
    4a80:	003b1f06 	br	3700 <__alt_data_end+0xff003700>
    4a84:	9080100c 	andi	r2,r18,64
    4a88:	d8002785 	stb	zero,158(sp)
    4a8c:	10008a1e 	bne	r2,zero,4cb8 <___vfprintf_internal_r+0x1ae0>
    4a90:	d9402d17 	ldw	r5,180(sp)
    4a94:	d8c02917 	ldw	r3,164(sp)
    4a98:	002d883a 	mov	r22,zero
    4a9c:	28800104 	addi	r2,r5,4
    4aa0:	2cc00017 	ldw	r19,0(r5)
    4aa4:	183e4b0e 	bge	r3,zero,43d4 <__alt_data_end+0xff0043d4>
    4aa8:	9d86b03a 	or	r3,r19,r22
    4aac:	d8802d15 	stw	r2,180(sp)
    4ab0:	183e4c1e 	bne	r3,zero,43e4 <__alt_data_end+0xff0043e4>
    4ab4:	0039883a 	mov	fp,zero
    4ab8:	0005883a 	mov	r2,zero
    4abc:	003d4006 	br	3fc0 <__alt_data_end+0xff003fc0>
    4ac0:	01400074 	movhi	r5,1
    4ac4:	29456284 	addi	r5,r5,5514
    4ac8:	d9402b15 	stw	r5,172(sp)
    4acc:	d9402b17 	ldw	r5,172(sp)
    4ad0:	1c47883a 	add	r3,r3,r17
    4ad4:	10800044 	addi	r2,r2,1
    4ad8:	41400015 	stw	r5,0(r8)
    4adc:	44400115 	stw	r17,4(r8)
    4ae0:	d8c02015 	stw	r3,128(sp)
    4ae4:	d8801f15 	stw	r2,124(sp)
    4ae8:	010001c4 	movi	r4,7
    4aec:	20bec816 	blt	r4,r2,4610 <__alt_data_end+0xff004610>
    4af0:	42000204 	addi	r8,r8,8
    4af4:	003ecd06 	br	462c <__alt_data_end+0xff00462c>
    4af8:	d9002917 	ldw	r4,164(sp)
    4afc:	d8002785 	stb	zero,158(sp)
    4b00:	203d2d16 	blt	r4,zero,3fb8 <__alt_data_end+0xff003fb8>
    4b04:	00bfdfc4 	movi	r2,-129
    4b08:	90a4703a 	and	r18,r18,r2
    4b0c:	003a9106 	br	3554 <__alt_data_end+0xff003554>
    4b10:	01000074 	movhi	r4,1
    4b14:	21056284 	addi	r4,r4,5514
    4b18:	d9002b15 	stw	r4,172(sp)
    4b1c:	003c0c06 	br	3b50 <__alt_data_end+0xff003b50>
    4b20:	d9002c17 	ldw	r4,176(sp)
    4b24:	d9801e04 	addi	r6,sp,120
    4b28:	b80b883a 	mov	r5,r23
    4b2c:	0009f740 	call	9f74 <__sprint_r>
    4b30:	103aab1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4b34:	d8c02017 	ldw	r3,128(sp)
    4b38:	da000404 	addi	r8,sp,16
    4b3c:	003d4106 	br	4044 <__alt_data_end+0xff004044>
    4b40:	d8801f17 	ldw	r2,124(sp)
    4b44:	01400074 	movhi	r5,1
    4b48:	01000044 	movi	r4,1
    4b4c:	18c00044 	addi	r3,r3,1
    4b50:	10800044 	addi	r2,r2,1
    4b54:	29456204 	addi	r5,r5,5512
    4b58:	41000115 	stw	r4,4(r8)
    4b5c:	41400015 	stw	r5,0(r8)
    4b60:	d8c02015 	stw	r3,128(sp)
    4b64:	d8801f15 	stw	r2,124(sp)
    4b68:	010001c4 	movi	r4,7
    4b6c:	20805c16 	blt	r4,r2,4ce0 <___vfprintf_internal_r+0x1b08>
    4b70:	42000204 	addi	r8,r8,8
    4b74:	8800041e 	bne	r17,zero,4b88 <___vfprintf_internal_r+0x19b0>
    4b78:	d8803317 	ldw	r2,204(sp)
    4b7c:	1000021e 	bne	r2,zero,4b88 <___vfprintf_internal_r+0x19b0>
    4b80:	9080004c 	andi	r2,r18,1
    4b84:	103c0926 	beq	r2,zero,3bac <__alt_data_end+0xff003bac>
    4b88:	d9003717 	ldw	r4,220(sp)
    4b8c:	d8801f17 	ldw	r2,124(sp)
    4b90:	d9403417 	ldw	r5,208(sp)
    4b94:	20c7883a 	add	r3,r4,r3
    4b98:	10800044 	addi	r2,r2,1
    4b9c:	41000115 	stw	r4,4(r8)
    4ba0:	41400015 	stw	r5,0(r8)
    4ba4:	d8c02015 	stw	r3,128(sp)
    4ba8:	d8801f15 	stw	r2,124(sp)
    4bac:	010001c4 	movi	r4,7
    4bb0:	20812116 	blt	r4,r2,5038 <___vfprintf_internal_r+0x1e60>
    4bb4:	42000204 	addi	r8,r8,8
    4bb8:	0463c83a 	sub	r17,zero,r17
    4bbc:	0440730e 	bge	zero,r17,4d8c <___vfprintf_internal_r+0x1bb4>
    4bc0:	05800404 	movi	r22,16
    4bc4:	b440860e 	bge	r22,r17,4de0 <___vfprintf_internal_r+0x1c08>
    4bc8:	01400074 	movhi	r5,1
    4bcc:	29456284 	addi	r5,r5,5514
    4bd0:	d9402b15 	stw	r5,172(sp)
    4bd4:	070001c4 	movi	fp,7
    4bd8:	dcc02c17 	ldw	r19,176(sp)
    4bdc:	00000306 	br	4bec <___vfprintf_internal_r+0x1a14>
    4be0:	42000204 	addi	r8,r8,8
    4be4:	8c7ffc04 	addi	r17,r17,-16
    4be8:	b440800e 	bge	r22,r17,4dec <___vfprintf_internal_r+0x1c14>
    4bec:	18c00404 	addi	r3,r3,16
    4bf0:	10800044 	addi	r2,r2,1
    4bf4:	45000015 	stw	r20,0(r8)
    4bf8:	45800115 	stw	r22,4(r8)
    4bfc:	d8c02015 	stw	r3,128(sp)
    4c00:	d8801f15 	stw	r2,124(sp)
    4c04:	e0bff60e 	bge	fp,r2,4be0 <__alt_data_end+0xff004be0>
    4c08:	d9801e04 	addi	r6,sp,120
    4c0c:	b80b883a 	mov	r5,r23
    4c10:	9809883a 	mov	r4,r19
    4c14:	0009f740 	call	9f74 <__sprint_r>
    4c18:	103a711e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4c1c:	d8c02017 	ldw	r3,128(sp)
    4c20:	d8801f17 	ldw	r2,124(sp)
    4c24:	da000404 	addi	r8,sp,16
    4c28:	003fee06 	br	4be4 <__alt_data_end+0xff004be4>
    4c2c:	00bfffc4 	movi	r2,-1
    4c30:	003a6f06 	br	35f0 <__alt_data_end+0xff0035f0>
    4c34:	008011c4 	movi	r2,71
    4c38:	1440b816 	blt	r2,r17,4f1c <___vfprintf_internal_r+0x1d44>
    4c3c:	04000074 	movhi	r16,1
    4c40:	84055404 	addi	r16,r16,5456
    4c44:	00c000c4 	movi	r3,3
    4c48:	00bfdfc4 	movi	r2,-129
    4c4c:	d8c02a15 	stw	r3,168(sp)
    4c50:	90a4703a 	and	r18,r18,r2
    4c54:	df002783 	ldbu	fp,158(sp)
    4c58:	d8c02e15 	stw	r3,184(sp)
    4c5c:	d8002915 	stw	zero,164(sp)
    4c60:	d8003215 	stw	zero,200(sp)
    4c64:	003b2906 	br	390c <__alt_data_end+0xff00390c>
    4c68:	d9002d17 	ldw	r4,180(sp)
    4c6c:	24c00017 	ldw	r19,0(r4)
    4c70:	21000104 	addi	r4,r4,4
    4c74:	d9002d15 	stw	r4,180(sp)
    4c78:	982dd7fa 	srai	r22,r19,31
    4c7c:	b005883a 	mov	r2,r22
    4c80:	003a9f06 	br	3700 <__alt_data_end+0xff003700>
    4c84:	d9402d17 	ldw	r5,180(sp)
    4c88:	d8c02f17 	ldw	r3,188(sp)
    4c8c:	28800017 	ldw	r2,0(r5)
    4c90:	29400104 	addi	r5,r5,4
    4c94:	d9402d15 	stw	r5,180(sp)
    4c98:	10c00015 	stw	r3,0(r2)
    4c9c:	00398606 	br	32b8 <__alt_data_end+0xff0032b8>
    4ca0:	d9402d17 	ldw	r5,180(sp)
    4ca4:	002d883a 	mov	r22,zero
    4ca8:	2cc00017 	ldw	r19,0(r5)
    4cac:	29400104 	addi	r5,r5,4
    4cb0:	d9402d15 	stw	r5,180(sp)
    4cb4:	003c2306 	br	3d44 <__alt_data_end+0xff003d44>
    4cb8:	d8c02d17 	ldw	r3,180(sp)
    4cbc:	d9002917 	ldw	r4,164(sp)
    4cc0:	002d883a 	mov	r22,zero
    4cc4:	18800104 	addi	r2,r3,4
    4cc8:	1cc0000b 	ldhu	r19,0(r3)
    4ccc:	203dc10e 	bge	r4,zero,43d4 <__alt_data_end+0xff0043d4>
    4cd0:	003f7506 	br	4aa8 <__alt_data_end+0xff004aa8>
    4cd4:	04000074 	movhi	r16,1
    4cd8:	84055204 	addi	r16,r16,5448
    4cdc:	003acc06 	br	3810 <__alt_data_end+0xff003810>
    4ce0:	d9002c17 	ldw	r4,176(sp)
    4ce4:	d9801e04 	addi	r6,sp,120
    4ce8:	b80b883a 	mov	r5,r23
    4cec:	0009f740 	call	9f74 <__sprint_r>
    4cf0:	103a3b1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4cf4:	dc402617 	ldw	r17,152(sp)
    4cf8:	d8c02017 	ldw	r3,128(sp)
    4cfc:	da000404 	addi	r8,sp,16
    4d00:	003f9c06 	br	4b74 <__alt_data_end+0xff004b74>
    4d04:	ac400043 	ldbu	r17,1(r21)
    4d08:	94800814 	ori	r18,r18,32
    4d0c:	ad400044 	addi	r21,r21,1
    4d10:	8c403fcc 	andi	r17,r17,255
    4d14:	8c40201c 	xori	r17,r17,128
    4d18:	8c7fe004 	addi	r17,r17,-128
    4d1c:	00398f06 	br	335c <__alt_data_end+0xff00335c>
    4d20:	d8c02d15 	stw	r3,180(sp)
    4d24:	0039883a 	mov	fp,zero
    4d28:	003e3506 	br	4600 <__alt_data_end+0xff004600>
    4d2c:	d9002c17 	ldw	r4,176(sp)
    4d30:	d9801e04 	addi	r6,sp,120
    4d34:	b80b883a 	mov	r5,r23
    4d38:	0009f740 	call	9f74 <__sprint_r>
    4d3c:	103a281e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4d40:	d8c02017 	ldw	r3,128(sp)
    4d44:	da000404 	addi	r8,sp,16
    4d48:	003cd006 	br	408c <__alt_data_end+0xff00408c>
    4d4c:	8009883a 	mov	r4,r16
    4d50:	da003d15 	stw	r8,244(sp)
    4d54:	00031400 	call	3140 <strlen>
    4d58:	d8802e15 	stw	r2,184(sp)
    4d5c:	da003d17 	ldw	r8,244(sp)
    4d60:	103c340e 	bge	r2,zero,3e34 <__alt_data_end+0xff003e34>
    4d64:	0005883a 	mov	r2,zero
    4d68:	003c3206 	br	3e34 <__alt_data_end+0xff003e34>
    4d6c:	d9002c17 	ldw	r4,176(sp)
    4d70:	d9801e04 	addi	r6,sp,120
    4d74:	b80b883a 	mov	r5,r23
    4d78:	0009f740 	call	9f74 <__sprint_r>
    4d7c:	103a181e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4d80:	d8c02017 	ldw	r3,128(sp)
    4d84:	d8801f17 	ldw	r2,124(sp)
    4d88:	da000404 	addi	r8,sp,16
    4d8c:	d9403317 	ldw	r5,204(sp)
    4d90:	10800044 	addi	r2,r2,1
    4d94:	44000015 	stw	r16,0(r8)
    4d98:	28c7883a 	add	r3,r5,r3
    4d9c:	003b7d06 	br	3b94 <__alt_data_end+0xff003b94>
    4da0:	01000074 	movhi	r4,1
    4da4:	21056684 	addi	r4,r4,5530
    4da8:	d9003515 	stw	r4,212(sp)
    4dac:	003b1406 	br	3a00 <__alt_data_end+0xff003a00>
    4db0:	013fffc4 	movi	r4,-1
    4db4:	003a3506 	br	368c <__alt_data_end+0xff00368c>
    4db8:	0023883a 	mov	r17,zero
    4dbc:	003d9d06 	br	4434 <__alt_data_end+0xff004434>
    4dc0:	d9002c17 	ldw	r4,176(sp)
    4dc4:	d9801e04 	addi	r6,sp,120
    4dc8:	b80b883a 	mov	r5,r23
    4dcc:	0009f740 	call	9f74 <__sprint_r>
    4dd0:	103a031e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4dd4:	d8c02017 	ldw	r3,128(sp)
    4dd8:	da000404 	addi	r8,sp,16
    4ddc:	003d9406 	br	4430 <__alt_data_end+0xff004430>
    4de0:	01000074 	movhi	r4,1
    4de4:	21056284 	addi	r4,r4,5514
    4de8:	d9002b15 	stw	r4,172(sp)
    4dec:	d9002b17 	ldw	r4,172(sp)
    4df0:	1c47883a 	add	r3,r3,r17
    4df4:	10800044 	addi	r2,r2,1
    4df8:	41000015 	stw	r4,0(r8)
    4dfc:	44400115 	stw	r17,4(r8)
    4e00:	d8c02015 	stw	r3,128(sp)
    4e04:	d8801f15 	stw	r2,124(sp)
    4e08:	010001c4 	movi	r4,7
    4e0c:	20bfd716 	blt	r4,r2,4d6c <__alt_data_end+0xff004d6c>
    4e10:	42000204 	addi	r8,r8,8
    4e14:	003fdd06 	br	4d8c <__alt_data_end+0xff004d8c>
    4e18:	d9002c17 	ldw	r4,176(sp)
    4e1c:	d9801e04 	addi	r6,sp,120
    4e20:	b80b883a 	mov	r5,r23
    4e24:	0009f740 	call	9f74 <__sprint_r>
    4e28:	1039ed1e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4e2c:	d8802617 	ldw	r2,152(sp)
    4e30:	d8c02017 	ldw	r3,128(sp)
    4e34:	da000404 	addi	r8,sp,16
    4e38:	003e1006 	br	467c <__alt_data_end+0xff00467c>
    4e3c:	00800044 	movi	r2,1
    4e40:	10803fcc 	andi	r2,r2,255
    4e44:	00c00044 	movi	r3,1
    4e48:	10fa3526 	beq	r2,r3,3720 <__alt_data_end+0xff003720>
    4e4c:	00c00084 	movi	r3,2
    4e50:	10fbcb26 	beq	r2,r3,3d80 <__alt_data_end+0xff003d80>
    4e54:	003a8f06 	br	3894 <__alt_data_end+0xff003894>
    4e58:	01000074 	movhi	r4,1
    4e5c:	21056684 	addi	r4,r4,5530
    4e60:	d9003515 	stw	r4,212(sp)
    4e64:	003b7606 	br	3c40 <__alt_data_end+0xff003c40>
    4e68:	d8802917 	ldw	r2,164(sp)
    4e6c:	00c00184 	movi	r3,6
    4e70:	1880012e 	bgeu	r3,r2,4e78 <___vfprintf_internal_r+0x1ca0>
    4e74:	1805883a 	mov	r2,r3
    4e78:	d8802e15 	stw	r2,184(sp)
    4e7c:	1000ef16 	blt	r2,zero,523c <___vfprintf_internal_r+0x2064>
    4e80:	04000074 	movhi	r16,1
    4e84:	d8802a15 	stw	r2,168(sp)
    4e88:	dcc02d15 	stw	r19,180(sp)
    4e8c:	d8002915 	stw	zero,164(sp)
    4e90:	d8003215 	stw	zero,200(sp)
    4e94:	84056004 	addi	r16,r16,5504
    4e98:	0039883a 	mov	fp,zero
    4e9c:	003aa206 	br	3928 <__alt_data_end+0xff003928>
    4ea0:	0021883a 	mov	r16,zero
    4ea4:	003e0706 	br	46c4 <__alt_data_end+0xff0046c4>
    4ea8:	d9002c17 	ldw	r4,176(sp)
    4eac:	d9801e04 	addi	r6,sp,120
    4eb0:	b80b883a 	mov	r5,r23
    4eb4:	0009f740 	call	9f74 <__sprint_r>
    4eb8:	1039c91e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    4ebc:	d8802617 	ldw	r2,152(sp)
    4ec0:	d9403317 	ldw	r5,204(sp)
    4ec4:	d8c02017 	ldw	r3,128(sp)
    4ec8:	da000404 	addi	r8,sp,16
    4ecc:	2885c83a 	sub	r2,r5,r2
    4ed0:	003dfb06 	br	46c0 <__alt_data_end+0xff0046c0>
    4ed4:	9080004c 	andi	r2,r18,1
    4ed8:	103e8f1e 	bne	r2,zero,4918 <__alt_data_end+0xff004918>
    4edc:	d8802117 	ldw	r2,132(sp)
    4ee0:	003e9e06 	br	495c <__alt_data_end+0xff00495c>
    4ee4:	1025883a 	mov	r18,r2
    4ee8:	0039883a 	mov	fp,zero
    4eec:	00800084 	movi	r2,2
    4ef0:	003fd306 	br	4e40 <__alt_data_end+0xff004e40>
    4ef4:	07000b44 	movi	fp,45
    4ef8:	df002785 	stb	fp,158(sp)
    4efc:	003a4006 	br	3800 <__alt_data_end+0xff003800>
    4f00:	00c00b44 	movi	r3,45
    4f04:	d8c02785 	stb	r3,158(sp)
    4f08:	d8802a15 	stw	r2,168(sp)
    4f0c:	dc802b17 	ldw	r18,172(sp)
    4f10:	d8002915 	stw	zero,164(sp)
    4f14:	07000b44 	movi	fp,45
    4f18:	003a8006 	br	391c <__alt_data_end+0xff00391c>
    4f1c:	04000074 	movhi	r16,1
    4f20:	84055504 	addi	r16,r16,5460
    4f24:	003f4706 	br	4c44 <__alt_data_end+0xff004c44>
    4f28:	d8c02d17 	ldw	r3,180(sp)
    4f2c:	d9002f17 	ldw	r4,188(sp)
    4f30:	18800017 	ldw	r2,0(r3)
    4f34:	18c00104 	addi	r3,r3,4
    4f38:	d8c02d15 	stw	r3,180(sp)
    4f3c:	11000015 	stw	r4,0(r2)
    4f40:	0038dd06 	br	32b8 <__alt_data_end+0xff0032b8>
    4f44:	dd802617 	ldw	r22,152(sp)
    4f48:	00bfff44 	movi	r2,-3
    4f4c:	b0801c16 	blt	r22,r2,4fc0 <___vfprintf_internal_r+0x1de8>
    4f50:	d9402917 	ldw	r5,164(sp)
    4f54:	2d801a16 	blt	r5,r22,4fc0 <___vfprintf_internal_r+0x1de8>
    4f58:	dd803215 	stw	r22,200(sp)
    4f5c:	003e8906 	br	4984 <__alt_data_end+0xff004984>
    4f60:	01000074 	movhi	r4,1
    4f64:	21056284 	addi	r4,r4,5514
    4f68:	d9002b15 	stw	r4,172(sp)
    4f6c:	003c9106 	br	41b4 <__alt_data_end+0xff0041b4>
    4f70:	e005883a 	mov	r2,fp
    4f74:	003e7906 	br	495c <__alt_data_end+0xff00495c>
    4f78:	d9402917 	ldw	r5,164(sp)
    4f7c:	df002783 	ldbu	fp,158(sp)
    4f80:	dcc02d15 	stw	r19,180(sp)
    4f84:	d9402a15 	stw	r5,168(sp)
    4f88:	d9402e15 	stw	r5,184(sp)
    4f8c:	d8002915 	stw	zero,164(sp)
    4f90:	d8003215 	stw	zero,200(sp)
    4f94:	003a5d06 	br	390c <__alt_data_end+0xff00390c>
    4f98:	9080004c 	andi	r2,r18,1
    4f9c:	0039883a 	mov	fp,zero
    4fa0:	10000426 	beq	r2,zero,4fb4 <___vfprintf_internal_r+0x1ddc>
    4fa4:	00800c04 	movi	r2,48
    4fa8:	dc001dc4 	addi	r16,sp,119
    4fac:	d8801dc5 	stb	r2,119(sp)
    4fb0:	003b8006 	br	3db4 <__alt_data_end+0xff003db4>
    4fb4:	d8002e15 	stw	zero,184(sp)
    4fb8:	dc001e04 	addi	r16,sp,120
    4fbc:	003a4d06 	br	38f4 <__alt_data_end+0xff0038f4>
    4fc0:	8c7fff84 	addi	r17,r17,-2
    4fc4:	b5bfffc4 	addi	r22,r22,-1
    4fc8:	dd802615 	stw	r22,152(sp)
    4fcc:	dc4022c5 	stb	r17,139(sp)
    4fd0:	b000bf16 	blt	r22,zero,52d0 <___vfprintf_internal_r+0x20f8>
    4fd4:	00800ac4 	movi	r2,43
    4fd8:	d8802305 	stb	r2,140(sp)
    4fdc:	00800244 	movi	r2,9
    4fe0:	15807016 	blt	r2,r22,51a4 <___vfprintf_internal_r+0x1fcc>
    4fe4:	00800c04 	movi	r2,48
    4fe8:	b5800c04 	addi	r22,r22,48
    4fec:	d8802345 	stb	r2,141(sp)
    4ff0:	dd802385 	stb	r22,142(sp)
    4ff4:	d88023c4 	addi	r2,sp,143
    4ff8:	df0022c4 	addi	fp,sp,139
    4ffc:	d8c03317 	ldw	r3,204(sp)
    5000:	1739c83a 	sub	fp,r2,fp
    5004:	d9003317 	ldw	r4,204(sp)
    5008:	e0c7883a 	add	r3,fp,r3
    500c:	df003a15 	stw	fp,232(sp)
    5010:	d8c02e15 	stw	r3,184(sp)
    5014:	00800044 	movi	r2,1
    5018:	1100b30e 	bge	r2,r4,52e8 <___vfprintf_internal_r+0x2110>
    501c:	d8c02e17 	ldw	r3,184(sp)
    5020:	18c00044 	addi	r3,r3,1
    5024:	d8c02e15 	stw	r3,184(sp)
    5028:	1805883a 	mov	r2,r3
    502c:	1800ac16 	blt	r3,zero,52e0 <___vfprintf_internal_r+0x2108>
    5030:	d8003215 	stw	zero,200(sp)
    5034:	003e5d06 	br	49ac <__alt_data_end+0xff0049ac>
    5038:	d9002c17 	ldw	r4,176(sp)
    503c:	d9801e04 	addi	r6,sp,120
    5040:	b80b883a 	mov	r5,r23
    5044:	0009f740 	call	9f74 <__sprint_r>
    5048:	1039651e 	bne	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    504c:	dc402617 	ldw	r17,152(sp)
    5050:	d8c02017 	ldw	r3,128(sp)
    5054:	d8801f17 	ldw	r2,124(sp)
    5058:	da000404 	addi	r8,sp,16
    505c:	003ed606 	br	4bb8 <__alt_data_end+0xff004bb8>
    5060:	582b883a 	mov	r21,r11
    5064:	d8002915 	stw	zero,164(sp)
    5068:	0038bd06 	br	3360 <__alt_data_end+0xff003360>
    506c:	d8802917 	ldw	r2,164(sp)
    5070:	103e071e 	bne	r2,zero,4890 <__alt_data_end+0xff004890>
    5074:	dc002915 	stw	r16,164(sp)
    5078:	003e0506 	br	4890 <__alt_data_end+0xff004890>
    507c:	d9002917 	ldw	r4,164(sp)
    5080:	20c00044 	addi	r3,r4,1
    5084:	003e0f06 	br	48c4 <__alt_data_end+0xff0048c4>
    5088:	01400184 	movi	r5,6
    508c:	d9402915 	stw	r5,164(sp)
    5090:	003dff06 	br	4890 <__alt_data_end+0xff004890>
    5094:	d8802104 	addi	r2,sp,132
    5098:	d8800315 	stw	r2,12(sp)
    509c:	d8802504 	addi	r2,sp,148
    50a0:	d8800215 	stw	r2,8(sp)
    50a4:	d8802604 	addi	r2,sp,152
    50a8:	d8800115 	stw	r2,4(sp)
    50ac:	d8802917 	ldw	r2,164(sp)
    50b0:	d9403617 	ldw	r5,216(sp)
    50b4:	d9002c17 	ldw	r4,176(sp)
    50b8:	d8800015 	stw	r2,0(sp)
    50bc:	01c000c4 	movi	r7,3
    50c0:	980d883a 	mov	r6,r19
    50c4:	da003d15 	stw	r8,244(sp)
    50c8:	00057fc0 	call	57fc <_dtoa_r>
    50cc:	d8c02917 	ldw	r3,164(sp)
    50d0:	da003d17 	ldw	r8,244(sp)
    50d4:	1021883a 	mov	r16,r2
    50d8:	10f9883a 	add	fp,r2,r3
    50dc:	81000007 	ldb	r4,0(r16)
    50e0:	00800c04 	movi	r2,48
    50e4:	20805e26 	beq	r4,r2,5260 <___vfprintf_internal_r+0x2088>
    50e8:	d8c02617 	ldw	r3,152(sp)
    50ec:	e0f9883a 	add	fp,fp,r3
    50f0:	003e0a06 	br	491c <__alt_data_end+0xff00491c>
    50f4:	00c00b44 	movi	r3,45
    50f8:	24e0003c 	xorhi	r19,r4,32768
    50fc:	d8c02a05 	stb	r3,168(sp)
    5100:	003de906 	br	48a8 <__alt_data_end+0xff0048a8>
    5104:	d8c03217 	ldw	r3,200(sp)
    5108:	00c07a0e 	bge	zero,r3,52f4 <___vfprintf_internal_r+0x211c>
    510c:	00800044 	movi	r2,1
    5110:	d9003317 	ldw	r4,204(sp)
    5114:	1105883a 	add	r2,r2,r4
    5118:	d8802e15 	stw	r2,184(sp)
    511c:	10004e16 	blt	r2,zero,5258 <___vfprintf_internal_r+0x2080>
    5120:	044019c4 	movi	r17,103
    5124:	003e2106 	br	49ac <__alt_data_end+0xff0049ac>
    5128:	d9002917 	ldw	r4,164(sp)
    512c:	d8802104 	addi	r2,sp,132
    5130:	d8800315 	stw	r2,12(sp)
    5134:	d9000015 	stw	r4,0(sp)
    5138:	d8802504 	addi	r2,sp,148
    513c:	d9403617 	ldw	r5,216(sp)
    5140:	d9002c17 	ldw	r4,176(sp)
    5144:	d8800215 	stw	r2,8(sp)
    5148:	d8802604 	addi	r2,sp,152
    514c:	d8800115 	stw	r2,4(sp)
    5150:	01c000c4 	movi	r7,3
    5154:	980d883a 	mov	r6,r19
    5158:	da003d15 	stw	r8,244(sp)
    515c:	00057fc0 	call	57fc <_dtoa_r>
    5160:	d8c02917 	ldw	r3,164(sp)
    5164:	da003d17 	ldw	r8,244(sp)
    5168:	1021883a 	mov	r16,r2
    516c:	00801184 	movi	r2,70
    5170:	80f9883a 	add	fp,r16,r3
    5174:	88bfd926 	beq	r17,r2,50dc <__alt_data_end+0xff0050dc>
    5178:	003de806 	br	491c <__alt_data_end+0xff00491c>
    517c:	d9002917 	ldw	r4,164(sp)
    5180:	00c04d0e 	bge	zero,r3,52b8 <___vfprintf_internal_r+0x20e0>
    5184:	2000441e 	bne	r4,zero,5298 <___vfprintf_internal_r+0x20c0>
    5188:	9480004c 	andi	r18,r18,1
    518c:	9000421e 	bne	r18,zero,5298 <___vfprintf_internal_r+0x20c0>
    5190:	1805883a 	mov	r2,r3
    5194:	18007016 	blt	r3,zero,5358 <___vfprintf_internal_r+0x2180>
    5198:	d8c03217 	ldw	r3,200(sp)
    519c:	d8c02e15 	stw	r3,184(sp)
    51a0:	003e0206 	br	49ac <__alt_data_end+0xff0049ac>
    51a4:	df0022c4 	addi	fp,sp,139
    51a8:	dc002915 	stw	r16,164(sp)
    51ac:	4027883a 	mov	r19,r8
    51b0:	e021883a 	mov	r16,fp
    51b4:	b009883a 	mov	r4,r22
    51b8:	01400284 	movi	r5,10
    51bc:	0001c540 	call	1c54 <__modsi3>
    51c0:	10800c04 	addi	r2,r2,48
    51c4:	843fffc4 	addi	r16,r16,-1
    51c8:	b009883a 	mov	r4,r22
    51cc:	01400284 	movi	r5,10
    51d0:	80800005 	stb	r2,0(r16)
    51d4:	0001bd00 	call	1bd0 <__divsi3>
    51d8:	102d883a 	mov	r22,r2
    51dc:	00800244 	movi	r2,9
    51e0:	15bff416 	blt	r2,r22,51b4 <__alt_data_end+0xff0051b4>
    51e4:	9811883a 	mov	r8,r19
    51e8:	b0800c04 	addi	r2,r22,48
    51ec:	8027883a 	mov	r19,r16
    51f0:	997fffc4 	addi	r5,r19,-1
    51f4:	98bfffc5 	stb	r2,-1(r19)
    51f8:	dc002917 	ldw	r16,164(sp)
    51fc:	2f006a2e 	bgeu	r5,fp,53a8 <___vfprintf_internal_r+0x21d0>
    5200:	d9c02384 	addi	r7,sp,142
    5204:	3ccfc83a 	sub	r7,r7,r19
    5208:	d9002344 	addi	r4,sp,141
    520c:	e1cf883a 	add	r7,fp,r7
    5210:	00000106 	br	5218 <___vfprintf_internal_r+0x2040>
    5214:	28800003 	ldbu	r2,0(r5)
    5218:	20800005 	stb	r2,0(r4)
    521c:	21000044 	addi	r4,r4,1
    5220:	29400044 	addi	r5,r5,1
    5224:	393ffb1e 	bne	r7,r4,5214 <__alt_data_end+0xff005214>
    5228:	d8802304 	addi	r2,sp,140
    522c:	14c5c83a 	sub	r2,r2,r19
    5230:	d8c02344 	addi	r3,sp,141
    5234:	1885883a 	add	r2,r3,r2
    5238:	003f7006 	br	4ffc <__alt_data_end+0xff004ffc>
    523c:	0005883a 	mov	r2,zero
    5240:	003f0f06 	br	4e80 <__alt_data_end+0xff004e80>
    5244:	d8c03217 	ldw	r3,200(sp)
    5248:	18c00044 	addi	r3,r3,1
    524c:	d8c02e15 	stw	r3,184(sp)
    5250:	1805883a 	mov	r2,r3
    5254:	183fb20e 	bge	r3,zero,5120 <__alt_data_end+0xff005120>
    5258:	0005883a 	mov	r2,zero
    525c:	003fb006 	br	5120 <__alt_data_end+0xff005120>
    5260:	d9003617 	ldw	r4,216(sp)
    5264:	000d883a 	mov	r6,zero
    5268:	000f883a 	mov	r7,zero
    526c:	980b883a 	mov	r5,r19
    5270:	d8c03c15 	stw	r3,240(sp)
    5274:	da003d15 	stw	r8,244(sp)
    5278:	000d1500 	call	d150 <__eqdf2>
    527c:	d8c03c17 	ldw	r3,240(sp)
    5280:	da003d17 	ldw	r8,244(sp)
    5284:	103f9826 	beq	r2,zero,50e8 <__alt_data_end+0xff0050e8>
    5288:	00800044 	movi	r2,1
    528c:	10c7c83a 	sub	r3,r2,r3
    5290:	d8c02615 	stw	r3,152(sp)
    5294:	003f9506 	br	50ec <__alt_data_end+0xff0050ec>
    5298:	d9002917 	ldw	r4,164(sp)
    529c:	d8c03217 	ldw	r3,200(sp)
    52a0:	20800044 	addi	r2,r4,1
    52a4:	1885883a 	add	r2,r3,r2
    52a8:	d8802e15 	stw	r2,184(sp)
    52ac:	103dbf0e 	bge	r2,zero,49ac <__alt_data_end+0xff0049ac>
    52b0:	0005883a 	mov	r2,zero
    52b4:	003dbd06 	br	49ac <__alt_data_end+0xff0049ac>
    52b8:	2000211e 	bne	r4,zero,5340 <___vfprintf_internal_r+0x2168>
    52bc:	9480004c 	andi	r18,r18,1
    52c0:	90001f1e 	bne	r18,zero,5340 <___vfprintf_internal_r+0x2168>
    52c4:	00800044 	movi	r2,1
    52c8:	d8802e15 	stw	r2,184(sp)
    52cc:	003db706 	br	49ac <__alt_data_end+0xff0049ac>
    52d0:	00800b44 	movi	r2,45
    52d4:	05adc83a 	sub	r22,zero,r22
    52d8:	d8802305 	stb	r2,140(sp)
    52dc:	003f3f06 	br	4fdc <__alt_data_end+0xff004fdc>
    52e0:	0005883a 	mov	r2,zero
    52e4:	003f5206 	br	5030 <__alt_data_end+0xff005030>
    52e8:	90a4703a 	and	r18,r18,r2
    52ec:	903f4e26 	beq	r18,zero,5028 <__alt_data_end+0xff005028>
    52f0:	003f4a06 	br	501c <__alt_data_end+0xff00501c>
    52f4:	00800084 	movi	r2,2
    52f8:	10c5c83a 	sub	r2,r2,r3
    52fc:	003f8406 	br	5110 <__alt_data_end+0xff005110>
    5300:	d8802d17 	ldw	r2,180(sp)
    5304:	d9002d17 	ldw	r4,180(sp)
    5308:	ac400043 	ldbu	r17,1(r21)
    530c:	10800017 	ldw	r2,0(r2)
    5310:	582b883a 	mov	r21,r11
    5314:	d8802915 	stw	r2,164(sp)
    5318:	20800104 	addi	r2,r4,4
    531c:	d9002917 	ldw	r4,164(sp)
    5320:	d8802d15 	stw	r2,180(sp)
    5324:	203e7a0e 	bge	r4,zero,4d10 <__alt_data_end+0xff004d10>
    5328:	8c403fcc 	andi	r17,r17,255
    532c:	00bfffc4 	movi	r2,-1
    5330:	8c40201c 	xori	r17,r17,128
    5334:	d8802915 	stw	r2,164(sp)
    5338:	8c7fe004 	addi	r17,r17,-128
    533c:	00380706 	br	335c <__alt_data_end+0xff00335c>
    5340:	d8c02917 	ldw	r3,164(sp)
    5344:	18c00084 	addi	r3,r3,2
    5348:	d8c02e15 	stw	r3,184(sp)
    534c:	1805883a 	mov	r2,r3
    5350:	183d960e 	bge	r3,zero,49ac <__alt_data_end+0xff0049ac>
    5354:	003fd606 	br	52b0 <__alt_data_end+0xff0052b0>
    5358:	0005883a 	mov	r2,zero
    535c:	003f8e06 	br	5198 <__alt_data_end+0xff005198>
    5360:	9080004c 	andi	r2,r18,1
    5364:	103f811e 	bne	r2,zero,516c <__alt_data_end+0xff00516c>
    5368:	d8802117 	ldw	r2,132(sp)
    536c:	1405c83a 	sub	r2,r2,r16
    5370:	d8803315 	stw	r2,204(sp)
    5374:	b47ef326 	beq	r22,r17,4f44 <__alt_data_end+0xff004f44>
    5378:	dd802617 	ldw	r22,152(sp)
    537c:	003f1106 	br	4fc4 <__alt_data_end+0xff004fc4>
    5380:	d9c02785 	stb	r7,158(sp)
    5384:	00390406 	br	3798 <__alt_data_end+0xff003798>
    5388:	d9c02785 	stb	r7,158(sp)
    538c:	0038d306 	br	36dc <__alt_data_end+0xff0036dc>
    5390:	d9c02785 	stb	r7,158(sp)
    5394:	003a6106 	br	3d1c <__alt_data_end+0xff003d1c>
    5398:	d9c02785 	stb	r7,158(sp)
    539c:	003af806 	br	3f80 <__alt_data_end+0xff003f80>
    53a0:	0005883a 	mov	r2,zero
    53a4:	003d7e06 	br	49a0 <__alt_data_end+0xff0049a0>
    53a8:	d8802344 	addi	r2,sp,141
    53ac:	003f1306 	br	4ffc <__alt_data_end+0xff004ffc>
    53b0:	d9c02785 	stb	r7,158(sp)
    53b4:	00392306 	br	3844 <__alt_data_end+0xff003844>
    53b8:	d9c02785 	stb	r7,158(sp)
    53bc:	003aa906 	br	3e64 <__alt_data_end+0xff003e64>
    53c0:	d9c02785 	stb	r7,158(sp)
    53c4:	003a3d06 	br	3cbc <__alt_data_end+0xff003cbc>
    53c8:	d9c02785 	stb	r7,158(sp)
    53cc:	003aca06 	br	3ef8 <__alt_data_end+0xff003ef8>

000053d0 <__vfprintf_internal>:
    53d0:	00800074 	movhi	r2,1
    53d4:	108cbd04 	addi	r2,r2,13044
    53d8:	300f883a 	mov	r7,r6
    53dc:	280d883a 	mov	r6,r5
    53e0:	200b883a 	mov	r5,r4
    53e4:	11000017 	ldw	r4,0(r2)
    53e8:	00031d81 	jmpi	31d8 <___vfprintf_internal_r>

000053ec <__sbprintf>:
    53ec:	2880030b 	ldhu	r2,12(r5)
    53f0:	2ac01917 	ldw	r11,100(r5)
    53f4:	2a80038b 	ldhu	r10,14(r5)
    53f8:	2a400717 	ldw	r9,28(r5)
    53fc:	2a000917 	ldw	r8,36(r5)
    5400:	defee204 	addi	sp,sp,-1144
    5404:	00c10004 	movi	r3,1024
    5408:	dc011a15 	stw	r16,1128(sp)
    540c:	10bfff4c 	andi	r2,r2,65533
    5410:	2821883a 	mov	r16,r5
    5414:	d8cb883a 	add	r5,sp,r3
    5418:	dc811c15 	stw	r18,1136(sp)
    541c:	dc411b15 	stw	r17,1132(sp)
    5420:	dfc11d15 	stw	ra,1140(sp)
    5424:	2025883a 	mov	r18,r4
    5428:	d881030d 	sth	r2,1036(sp)
    542c:	dac11915 	stw	r11,1124(sp)
    5430:	da81038d 	sth	r10,1038(sp)
    5434:	da410715 	stw	r9,1052(sp)
    5438:	da010915 	stw	r8,1060(sp)
    543c:	dec10015 	stw	sp,1024(sp)
    5440:	dec10415 	stw	sp,1040(sp)
    5444:	d8c10215 	stw	r3,1032(sp)
    5448:	d8c10515 	stw	r3,1044(sp)
    544c:	d8010615 	stw	zero,1048(sp)
    5450:	00031d80 	call	31d8 <___vfprintf_internal_r>
    5454:	1023883a 	mov	r17,r2
    5458:	10000416 	blt	r2,zero,546c <__sbprintf+0x80>
    545c:	d9410004 	addi	r5,sp,1024
    5460:	9009883a 	mov	r4,r18
    5464:	00070a00 	call	70a0 <_fflush_r>
    5468:	10000d1e 	bne	r2,zero,54a0 <__sbprintf+0xb4>
    546c:	d881030b 	ldhu	r2,1036(sp)
    5470:	1080100c 	andi	r2,r2,64
    5474:	10000326 	beq	r2,zero,5484 <__sbprintf+0x98>
    5478:	8080030b 	ldhu	r2,12(r16)
    547c:	10801014 	ori	r2,r2,64
    5480:	8080030d 	sth	r2,12(r16)
    5484:	8805883a 	mov	r2,r17
    5488:	dfc11d17 	ldw	ra,1140(sp)
    548c:	dc811c17 	ldw	r18,1136(sp)
    5490:	dc411b17 	ldw	r17,1132(sp)
    5494:	dc011a17 	ldw	r16,1128(sp)
    5498:	dec11e04 	addi	sp,sp,1144
    549c:	f800283a 	ret
    54a0:	047fffc4 	movi	r17,-1
    54a4:	003ff106 	br	546c <__alt_data_end+0xff00546c>

000054a8 <__swsetup_r>:
    54a8:	00800074 	movhi	r2,1
    54ac:	defffd04 	addi	sp,sp,-12
    54b0:	108cbd04 	addi	r2,r2,13044
    54b4:	dc400115 	stw	r17,4(sp)
    54b8:	2023883a 	mov	r17,r4
    54bc:	11000017 	ldw	r4,0(r2)
    54c0:	dc000015 	stw	r16,0(sp)
    54c4:	dfc00215 	stw	ra,8(sp)
    54c8:	2821883a 	mov	r16,r5
    54cc:	20000226 	beq	r4,zero,54d8 <__swsetup_r+0x30>
    54d0:	20800e17 	ldw	r2,56(r4)
    54d4:	10003126 	beq	r2,zero,559c <__swsetup_r+0xf4>
    54d8:	8080030b 	ldhu	r2,12(r16)
    54dc:	10c0020c 	andi	r3,r2,8
    54e0:	1009883a 	mov	r4,r2
    54e4:	18000f26 	beq	r3,zero,5524 <__swsetup_r+0x7c>
    54e8:	80c00417 	ldw	r3,16(r16)
    54ec:	18001526 	beq	r3,zero,5544 <__swsetup_r+0x9c>
    54f0:	1100004c 	andi	r4,r2,1
    54f4:	20001c1e 	bne	r4,zero,5568 <__swsetup_r+0xc0>
    54f8:	1080008c 	andi	r2,r2,2
    54fc:	1000291e 	bne	r2,zero,55a4 <__swsetup_r+0xfc>
    5500:	80800517 	ldw	r2,20(r16)
    5504:	80800215 	stw	r2,8(r16)
    5508:	18001c26 	beq	r3,zero,557c <__swsetup_r+0xd4>
    550c:	0005883a 	mov	r2,zero
    5510:	dfc00217 	ldw	ra,8(sp)
    5514:	dc400117 	ldw	r17,4(sp)
    5518:	dc000017 	ldw	r16,0(sp)
    551c:	dec00304 	addi	sp,sp,12
    5520:	f800283a 	ret
    5524:	2080040c 	andi	r2,r4,16
    5528:	10002e26 	beq	r2,zero,55e4 <__swsetup_r+0x13c>
    552c:	2080010c 	andi	r2,r4,4
    5530:	10001e1e 	bne	r2,zero,55ac <__swsetup_r+0x104>
    5534:	80c00417 	ldw	r3,16(r16)
    5538:	20800214 	ori	r2,r4,8
    553c:	8080030d 	sth	r2,12(r16)
    5540:	183feb1e 	bne	r3,zero,54f0 <__alt_data_end+0xff0054f0>
    5544:	1100a00c 	andi	r4,r2,640
    5548:	01408004 	movi	r5,512
    554c:	217fe826 	beq	r4,r5,54f0 <__alt_data_end+0xff0054f0>
    5550:	800b883a 	mov	r5,r16
    5554:	8809883a 	mov	r4,r17
    5558:	00080200 	call	8020 <__smakebuf_r>
    555c:	8080030b 	ldhu	r2,12(r16)
    5560:	80c00417 	ldw	r3,16(r16)
    5564:	003fe206 	br	54f0 <__alt_data_end+0xff0054f0>
    5568:	80800517 	ldw	r2,20(r16)
    556c:	80000215 	stw	zero,8(r16)
    5570:	0085c83a 	sub	r2,zero,r2
    5574:	80800615 	stw	r2,24(r16)
    5578:	183fe41e 	bne	r3,zero,550c <__alt_data_end+0xff00550c>
    557c:	80c0030b 	ldhu	r3,12(r16)
    5580:	0005883a 	mov	r2,zero
    5584:	1900200c 	andi	r4,r3,128
    5588:	203fe126 	beq	r4,zero,5510 <__alt_data_end+0xff005510>
    558c:	18c01014 	ori	r3,r3,64
    5590:	80c0030d 	sth	r3,12(r16)
    5594:	00bfffc4 	movi	r2,-1
    5598:	003fdd06 	br	5510 <__alt_data_end+0xff005510>
    559c:	000747c0 	call	747c <__sinit>
    55a0:	003fcd06 	br	54d8 <__alt_data_end+0xff0054d8>
    55a4:	0005883a 	mov	r2,zero
    55a8:	003fd606 	br	5504 <__alt_data_end+0xff005504>
    55ac:	81400c17 	ldw	r5,48(r16)
    55b0:	28000626 	beq	r5,zero,55cc <__swsetup_r+0x124>
    55b4:	80801004 	addi	r2,r16,64
    55b8:	28800326 	beq	r5,r2,55c8 <__swsetup_r+0x120>
    55bc:	8809883a 	mov	r4,r17
    55c0:	00075f00 	call	75f0 <_free_r>
    55c4:	8100030b 	ldhu	r4,12(r16)
    55c8:	80000c15 	stw	zero,48(r16)
    55cc:	80c00417 	ldw	r3,16(r16)
    55d0:	00bff6c4 	movi	r2,-37
    55d4:	1108703a 	and	r4,r2,r4
    55d8:	80000115 	stw	zero,4(r16)
    55dc:	80c00015 	stw	r3,0(r16)
    55e0:	003fd506 	br	5538 <__alt_data_end+0xff005538>
    55e4:	00800244 	movi	r2,9
    55e8:	88800015 	stw	r2,0(r17)
    55ec:	20801014 	ori	r2,r4,64
    55f0:	8080030d 	sth	r2,12(r16)
    55f4:	00bfffc4 	movi	r2,-1
    55f8:	003fc506 	br	5510 <__alt_data_end+0xff005510>

000055fc <quorem>:
    55fc:	defff704 	addi	sp,sp,-36
    5600:	dc800215 	stw	r18,8(sp)
    5604:	20800417 	ldw	r2,16(r4)
    5608:	2c800417 	ldw	r18,16(r5)
    560c:	dfc00815 	stw	ra,32(sp)
    5610:	ddc00715 	stw	r23,28(sp)
    5614:	dd800615 	stw	r22,24(sp)
    5618:	dd400515 	stw	r21,20(sp)
    561c:	dd000415 	stw	r20,16(sp)
    5620:	dcc00315 	stw	r19,12(sp)
    5624:	dc400115 	stw	r17,4(sp)
    5628:	dc000015 	stw	r16,0(sp)
    562c:	14807116 	blt	r2,r18,57f4 <quorem+0x1f8>
    5630:	94bfffc4 	addi	r18,r18,-1
    5634:	94ad883a 	add	r22,r18,r18
    5638:	b5ad883a 	add	r22,r22,r22
    563c:	2c400504 	addi	r17,r5,20
    5640:	8da9883a 	add	r20,r17,r22
    5644:	25400504 	addi	r21,r4,20
    5648:	282f883a 	mov	r23,r5
    564c:	adad883a 	add	r22,r21,r22
    5650:	a1400017 	ldw	r5,0(r20)
    5654:	2021883a 	mov	r16,r4
    5658:	b1000017 	ldw	r4,0(r22)
    565c:	29400044 	addi	r5,r5,1
    5660:	0001cc80 	call	1cc8 <__udivsi3>
    5664:	1027883a 	mov	r19,r2
    5668:	10002c26 	beq	r2,zero,571c <quorem+0x120>
    566c:	a813883a 	mov	r9,r21
    5670:	880b883a 	mov	r5,r17
    5674:	0009883a 	mov	r4,zero
    5678:	000d883a 	mov	r6,zero
    567c:	2a000017 	ldw	r8,0(r5)
    5680:	49c00017 	ldw	r7,0(r9)
    5684:	29400104 	addi	r5,r5,4
    5688:	40bfffcc 	andi	r2,r8,65535
    568c:	14c5383a 	mul	r2,r2,r19
    5690:	4010d43a 	srli	r8,r8,16
    5694:	38ffffcc 	andi	r3,r7,65535
    5698:	1105883a 	add	r2,r2,r4
    569c:	1008d43a 	srli	r4,r2,16
    56a0:	44d1383a 	mul	r8,r8,r19
    56a4:	198d883a 	add	r6,r3,r6
    56a8:	10ffffcc 	andi	r3,r2,65535
    56ac:	30c7c83a 	sub	r3,r6,r3
    56b0:	380ed43a 	srli	r7,r7,16
    56b4:	4105883a 	add	r2,r8,r4
    56b8:	180dd43a 	srai	r6,r3,16
    56bc:	113fffcc 	andi	r4,r2,65535
    56c0:	390fc83a 	sub	r7,r7,r4
    56c4:	398d883a 	add	r6,r7,r6
    56c8:	300e943a 	slli	r7,r6,16
    56cc:	18ffffcc 	andi	r3,r3,65535
    56d0:	1008d43a 	srli	r4,r2,16
    56d4:	38ceb03a 	or	r7,r7,r3
    56d8:	49c00015 	stw	r7,0(r9)
    56dc:	300dd43a 	srai	r6,r6,16
    56e0:	4a400104 	addi	r9,r9,4
    56e4:	a17fe52e 	bgeu	r20,r5,567c <__alt_data_end+0xff00567c>
    56e8:	b0800017 	ldw	r2,0(r22)
    56ec:	10000b1e 	bne	r2,zero,571c <quorem+0x120>
    56f0:	b0bfff04 	addi	r2,r22,-4
    56f4:	a880082e 	bgeu	r21,r2,5718 <quorem+0x11c>
    56f8:	b0ffff17 	ldw	r3,-4(r22)
    56fc:	18000326 	beq	r3,zero,570c <quorem+0x110>
    5700:	00000506 	br	5718 <quorem+0x11c>
    5704:	10c00017 	ldw	r3,0(r2)
    5708:	1800031e 	bne	r3,zero,5718 <quorem+0x11c>
    570c:	10bfff04 	addi	r2,r2,-4
    5710:	94bfffc4 	addi	r18,r18,-1
    5714:	a8bffb36 	bltu	r21,r2,5704 <__alt_data_end+0xff005704>
    5718:	84800415 	stw	r18,16(r16)
    571c:	b80b883a 	mov	r5,r23
    5720:	8009883a 	mov	r4,r16
    5724:	0008f540 	call	8f54 <__mcmp>
    5728:	10002616 	blt	r2,zero,57c4 <quorem+0x1c8>
    572c:	9cc00044 	addi	r19,r19,1
    5730:	a805883a 	mov	r2,r21
    5734:	000b883a 	mov	r5,zero
    5738:	11000017 	ldw	r4,0(r2)
    573c:	89800017 	ldw	r6,0(r17)
    5740:	10800104 	addi	r2,r2,4
    5744:	20ffffcc 	andi	r3,r4,65535
    5748:	194b883a 	add	r5,r3,r5
    574c:	30ffffcc 	andi	r3,r6,65535
    5750:	28c7c83a 	sub	r3,r5,r3
    5754:	300cd43a 	srli	r6,r6,16
    5758:	2008d43a 	srli	r4,r4,16
    575c:	180bd43a 	srai	r5,r3,16
    5760:	18ffffcc 	andi	r3,r3,65535
    5764:	2189c83a 	sub	r4,r4,r6
    5768:	2149883a 	add	r4,r4,r5
    576c:	200c943a 	slli	r6,r4,16
    5770:	8c400104 	addi	r17,r17,4
    5774:	200bd43a 	srai	r5,r4,16
    5778:	30c6b03a 	or	r3,r6,r3
    577c:	10ffff15 	stw	r3,-4(r2)
    5780:	a47fed2e 	bgeu	r20,r17,5738 <__alt_data_end+0xff005738>
    5784:	9485883a 	add	r2,r18,r18
    5788:	1085883a 	add	r2,r2,r2
    578c:	a887883a 	add	r3,r21,r2
    5790:	18800017 	ldw	r2,0(r3)
    5794:	10000b1e 	bne	r2,zero,57c4 <quorem+0x1c8>
    5798:	18bfff04 	addi	r2,r3,-4
    579c:	a880082e 	bgeu	r21,r2,57c0 <quorem+0x1c4>
    57a0:	18ffff17 	ldw	r3,-4(r3)
    57a4:	18000326 	beq	r3,zero,57b4 <quorem+0x1b8>
    57a8:	00000506 	br	57c0 <quorem+0x1c4>
    57ac:	10c00017 	ldw	r3,0(r2)
    57b0:	1800031e 	bne	r3,zero,57c0 <quorem+0x1c4>
    57b4:	10bfff04 	addi	r2,r2,-4
    57b8:	94bfffc4 	addi	r18,r18,-1
    57bc:	a8bffb36 	bltu	r21,r2,57ac <__alt_data_end+0xff0057ac>
    57c0:	84800415 	stw	r18,16(r16)
    57c4:	9805883a 	mov	r2,r19
    57c8:	dfc00817 	ldw	ra,32(sp)
    57cc:	ddc00717 	ldw	r23,28(sp)
    57d0:	dd800617 	ldw	r22,24(sp)
    57d4:	dd400517 	ldw	r21,20(sp)
    57d8:	dd000417 	ldw	r20,16(sp)
    57dc:	dcc00317 	ldw	r19,12(sp)
    57e0:	dc800217 	ldw	r18,8(sp)
    57e4:	dc400117 	ldw	r17,4(sp)
    57e8:	dc000017 	ldw	r16,0(sp)
    57ec:	dec00904 	addi	sp,sp,36
    57f0:	f800283a 	ret
    57f4:	0005883a 	mov	r2,zero
    57f8:	003ff306 	br	57c8 <__alt_data_end+0xff0057c8>

000057fc <_dtoa_r>:
    57fc:	20801017 	ldw	r2,64(r4)
    5800:	deffde04 	addi	sp,sp,-136
    5804:	df002015 	stw	fp,128(sp)
    5808:	dcc01b15 	stw	r19,108(sp)
    580c:	dc801a15 	stw	r18,104(sp)
    5810:	dc401915 	stw	r17,100(sp)
    5814:	dc001815 	stw	r16,96(sp)
    5818:	dfc02115 	stw	ra,132(sp)
    581c:	ddc01f15 	stw	r23,124(sp)
    5820:	dd801e15 	stw	r22,120(sp)
    5824:	dd401d15 	stw	r21,116(sp)
    5828:	dd001c15 	stw	r20,112(sp)
    582c:	d9c00315 	stw	r7,12(sp)
    5830:	2039883a 	mov	fp,r4
    5834:	3023883a 	mov	r17,r6
    5838:	2825883a 	mov	r18,r5
    583c:	dc002417 	ldw	r16,144(sp)
    5840:	3027883a 	mov	r19,r6
    5844:	10000826 	beq	r2,zero,5868 <_dtoa_r+0x6c>
    5848:	21801117 	ldw	r6,68(r4)
    584c:	00c00044 	movi	r3,1
    5850:	100b883a 	mov	r5,r2
    5854:	1986983a 	sll	r3,r3,r6
    5858:	11800115 	stw	r6,4(r2)
    585c:	10c00215 	stw	r3,8(r2)
    5860:	00087340 	call	8734 <_Bfree>
    5864:	e0001015 	stw	zero,64(fp)
    5868:	88002e16 	blt	r17,zero,5924 <_dtoa_r+0x128>
    586c:	80000015 	stw	zero,0(r16)
    5870:	889ffc2c 	andhi	r2,r17,32752
    5874:	00dffc34 	movhi	r3,32752
    5878:	10c01c26 	beq	r2,r3,58ec <_dtoa_r+0xf0>
    587c:	000d883a 	mov	r6,zero
    5880:	000f883a 	mov	r7,zero
    5884:	9009883a 	mov	r4,r18
    5888:	980b883a 	mov	r5,r19
    588c:	000d1500 	call	d150 <__eqdf2>
    5890:	10002b1e 	bne	r2,zero,5940 <_dtoa_r+0x144>
    5894:	d9c02317 	ldw	r7,140(sp)
    5898:	00800044 	movi	r2,1
    589c:	38800015 	stw	r2,0(r7)
    58a0:	d8802517 	ldw	r2,148(sp)
    58a4:	10019e26 	beq	r2,zero,5f20 <_dtoa_r+0x724>
    58a8:	d8c02517 	ldw	r3,148(sp)
    58ac:	00800074 	movhi	r2,1
    58b0:	10856244 	addi	r2,r2,5513
    58b4:	18800015 	stw	r2,0(r3)
    58b8:	10bfffc4 	addi	r2,r2,-1
    58bc:	dfc02117 	ldw	ra,132(sp)
    58c0:	df002017 	ldw	fp,128(sp)
    58c4:	ddc01f17 	ldw	r23,124(sp)
    58c8:	dd801e17 	ldw	r22,120(sp)
    58cc:	dd401d17 	ldw	r21,116(sp)
    58d0:	dd001c17 	ldw	r20,112(sp)
    58d4:	dcc01b17 	ldw	r19,108(sp)
    58d8:	dc801a17 	ldw	r18,104(sp)
    58dc:	dc401917 	ldw	r17,100(sp)
    58e0:	dc001817 	ldw	r16,96(sp)
    58e4:	dec02204 	addi	sp,sp,136
    58e8:	f800283a 	ret
    58ec:	d8c02317 	ldw	r3,140(sp)
    58f0:	0089c3c4 	movi	r2,9999
    58f4:	18800015 	stw	r2,0(r3)
    58f8:	90017726 	beq	r18,zero,5ed8 <_dtoa_r+0x6dc>
    58fc:	00800074 	movhi	r2,1
    5900:	10856e04 	addi	r2,r2,5560
    5904:	d9002517 	ldw	r4,148(sp)
    5908:	203fec26 	beq	r4,zero,58bc <__alt_data_end+0xff0058bc>
    590c:	10c000c7 	ldb	r3,3(r2)
    5910:	1801781e 	bne	r3,zero,5ef4 <_dtoa_r+0x6f8>
    5914:	10c000c4 	addi	r3,r2,3
    5918:	d9802517 	ldw	r6,148(sp)
    591c:	30c00015 	stw	r3,0(r6)
    5920:	003fe606 	br	58bc <__alt_data_end+0xff0058bc>
    5924:	04e00034 	movhi	r19,32768
    5928:	9cffffc4 	addi	r19,r19,-1
    592c:	00800044 	movi	r2,1
    5930:	8ce6703a 	and	r19,r17,r19
    5934:	80800015 	stw	r2,0(r16)
    5938:	9823883a 	mov	r17,r19
    593c:	003fcc06 	br	5870 <__alt_data_end+0xff005870>
    5940:	d8800204 	addi	r2,sp,8
    5944:	d8800015 	stw	r2,0(sp)
    5948:	d9c00104 	addi	r7,sp,4
    594c:	900b883a 	mov	r5,r18
    5950:	980d883a 	mov	r6,r19
    5954:	e009883a 	mov	r4,fp
    5958:	8820d53a 	srli	r16,r17,20
    595c:	00093200 	call	9320 <__d2b>
    5960:	d8800915 	stw	r2,36(sp)
    5964:	8001651e 	bne	r16,zero,5efc <_dtoa_r+0x700>
    5968:	dd800217 	ldw	r22,8(sp)
    596c:	dc000117 	ldw	r16,4(sp)
    5970:	00800804 	movi	r2,32
    5974:	b421883a 	add	r16,r22,r16
    5978:	80c10c84 	addi	r3,r16,1074
    597c:	10c2d10e 	bge	r2,r3,64c4 <_dtoa_r+0xcc8>
    5980:	00801004 	movi	r2,64
    5984:	81010484 	addi	r4,r16,1042
    5988:	10c7c83a 	sub	r3,r2,r3
    598c:	9108d83a 	srl	r4,r18,r4
    5990:	88e2983a 	sll	r17,r17,r3
    5994:	2448b03a 	or	r4,r4,r17
    5998:	000266c0 	call	266c <__floatunsidf>
    599c:	017f8434 	movhi	r5,65040
    59a0:	01800044 	movi	r6,1
    59a4:	1009883a 	mov	r4,r2
    59a8:	194b883a 	add	r5,r3,r5
    59ac:	843fffc4 	addi	r16,r16,-1
    59b0:	d9801115 	stw	r6,68(sp)
    59b4:	000d883a 	mov	r6,zero
    59b8:	01cffe34 	movhi	r7,16376
    59bc:	000dac00 	call	dac0 <__subdf3>
    59c0:	0198dbf4 	movhi	r6,25455
    59c4:	01cff4f4 	movhi	r7,16339
    59c8:	3190d844 	addi	r6,r6,17249
    59cc:	39e1e9c4 	addi	r7,r7,-30809
    59d0:	1009883a 	mov	r4,r2
    59d4:	180b883a 	mov	r5,r3
    59d8:	000d3a80 	call	d3a8 <__muldf3>
    59dc:	01a2d874 	movhi	r6,35681
    59e0:	01cff1f4 	movhi	r7,16327
    59e4:	31b22cc4 	addi	r6,r6,-14157
    59e8:	39e28a04 	addi	r7,r7,-30168
    59ec:	180b883a 	mov	r5,r3
    59f0:	1009883a 	mov	r4,r2
    59f4:	000c8a40 	call	c8a4 <__adddf3>
    59f8:	8009883a 	mov	r4,r16
    59fc:	1029883a 	mov	r20,r2
    5a00:	1823883a 	mov	r17,r3
    5a04:	000e43c0 	call	e43c <__floatsidf>
    5a08:	019427f4 	movhi	r6,20639
    5a0c:	01cff4f4 	movhi	r7,16339
    5a10:	319e7ec4 	addi	r6,r6,31227
    5a14:	39d104c4 	addi	r7,r7,17427
    5a18:	1009883a 	mov	r4,r2
    5a1c:	180b883a 	mov	r5,r3
    5a20:	000d3a80 	call	d3a8 <__muldf3>
    5a24:	100d883a 	mov	r6,r2
    5a28:	180f883a 	mov	r7,r3
    5a2c:	a009883a 	mov	r4,r20
    5a30:	880b883a 	mov	r5,r17
    5a34:	000c8a40 	call	c8a4 <__adddf3>
    5a38:	1009883a 	mov	r4,r2
    5a3c:	180b883a 	mov	r5,r3
    5a40:	1029883a 	mov	r20,r2
    5a44:	1823883a 	mov	r17,r3
    5a48:	000e3bc0 	call	e3bc <__fixdfsi>
    5a4c:	000d883a 	mov	r6,zero
    5a50:	000f883a 	mov	r7,zero
    5a54:	a009883a 	mov	r4,r20
    5a58:	880b883a 	mov	r5,r17
    5a5c:	d8800515 	stw	r2,20(sp)
    5a60:	000d2b40 	call	d2b4 <__ledf2>
    5a64:	10028716 	blt	r2,zero,6484 <_dtoa_r+0xc88>
    5a68:	d8c00517 	ldw	r3,20(sp)
    5a6c:	00800584 	movi	r2,22
    5a70:	10c27536 	bltu	r2,r3,6448 <_dtoa_r+0xc4c>
    5a74:	180490fa 	slli	r2,r3,3
    5a78:	00c00074 	movhi	r3,1
    5a7c:	18c58a04 	addi	r3,r3,5672
    5a80:	1885883a 	add	r2,r3,r2
    5a84:	11000017 	ldw	r4,0(r2)
    5a88:	11400117 	ldw	r5,4(r2)
    5a8c:	900d883a 	mov	r6,r18
    5a90:	980f883a 	mov	r7,r19
    5a94:	000d1d80 	call	d1d8 <__gedf2>
    5a98:	00828d0e 	bge	zero,r2,64d0 <_dtoa_r+0xcd4>
    5a9c:	d9000517 	ldw	r4,20(sp)
    5aa0:	d8000e15 	stw	zero,56(sp)
    5aa4:	213fffc4 	addi	r4,r4,-1
    5aa8:	d9000515 	stw	r4,20(sp)
    5aac:	b42dc83a 	sub	r22,r22,r16
    5ab0:	b5bfffc4 	addi	r22,r22,-1
    5ab4:	b0026f16 	blt	r22,zero,6474 <_dtoa_r+0xc78>
    5ab8:	d8000815 	stw	zero,32(sp)
    5abc:	d9c00517 	ldw	r7,20(sp)
    5ac0:	38026416 	blt	r7,zero,6454 <_dtoa_r+0xc58>
    5ac4:	b1ed883a 	add	r22,r22,r7
    5ac8:	d9c00d15 	stw	r7,52(sp)
    5acc:	d8000a15 	stw	zero,40(sp)
    5ad0:	d9800317 	ldw	r6,12(sp)
    5ad4:	00800244 	movi	r2,9
    5ad8:	11811436 	bltu	r2,r6,5f2c <_dtoa_r+0x730>
    5adc:	00800144 	movi	r2,5
    5ae0:	1184e10e 	bge	r2,r6,6e68 <_dtoa_r+0x166c>
    5ae4:	31bfff04 	addi	r6,r6,-4
    5ae8:	d9800315 	stw	r6,12(sp)
    5aec:	0023883a 	mov	r17,zero
    5af0:	d9800317 	ldw	r6,12(sp)
    5af4:	008000c4 	movi	r2,3
    5af8:	30836726 	beq	r6,r2,6898 <_dtoa_r+0x109c>
    5afc:	1183410e 	bge	r2,r6,6804 <_dtoa_r+0x1008>
    5b00:	d9c00317 	ldw	r7,12(sp)
    5b04:	00800104 	movi	r2,4
    5b08:	38827c26 	beq	r7,r2,64fc <_dtoa_r+0xd00>
    5b0c:	00800144 	movi	r2,5
    5b10:	3884c41e 	bne	r7,r2,6e24 <_dtoa_r+0x1628>
    5b14:	00800044 	movi	r2,1
    5b18:	d8800b15 	stw	r2,44(sp)
    5b1c:	d8c00517 	ldw	r3,20(sp)
    5b20:	d9002217 	ldw	r4,136(sp)
    5b24:	1907883a 	add	r3,r3,r4
    5b28:	19800044 	addi	r6,r3,1
    5b2c:	d8c00c15 	stw	r3,48(sp)
    5b30:	d9800615 	stw	r6,24(sp)
    5b34:	0183a40e 	bge	zero,r6,69c8 <_dtoa_r+0x11cc>
    5b38:	d9800617 	ldw	r6,24(sp)
    5b3c:	3021883a 	mov	r16,r6
    5b40:	e0001115 	stw	zero,68(fp)
    5b44:	008005c4 	movi	r2,23
    5b48:	1184c92e 	bgeu	r2,r6,6e70 <_dtoa_r+0x1674>
    5b4c:	00c00044 	movi	r3,1
    5b50:	00800104 	movi	r2,4
    5b54:	1085883a 	add	r2,r2,r2
    5b58:	11000504 	addi	r4,r2,20
    5b5c:	180b883a 	mov	r5,r3
    5b60:	18c00044 	addi	r3,r3,1
    5b64:	313ffb2e 	bgeu	r6,r4,5b54 <__alt_data_end+0xff005b54>
    5b68:	e1401115 	stw	r5,68(fp)
    5b6c:	e009883a 	mov	r4,fp
    5b70:	000868c0 	call	868c <_Balloc>
    5b74:	d8800715 	stw	r2,28(sp)
    5b78:	e0801015 	stw	r2,64(fp)
    5b7c:	00800384 	movi	r2,14
    5b80:	1400f736 	bltu	r2,r16,5f60 <_dtoa_r+0x764>
    5b84:	8800f626 	beq	r17,zero,5f60 <_dtoa_r+0x764>
    5b88:	d9c00517 	ldw	r7,20(sp)
    5b8c:	01c39a0e 	bge	zero,r7,69f8 <_dtoa_r+0x11fc>
    5b90:	388003cc 	andi	r2,r7,15
    5b94:	100490fa 	slli	r2,r2,3
    5b98:	382bd13a 	srai	r21,r7,4
    5b9c:	00c00074 	movhi	r3,1
    5ba0:	18c58a04 	addi	r3,r3,5672
    5ba4:	1885883a 	add	r2,r3,r2
    5ba8:	a8c0040c 	andi	r3,r21,16
    5bac:	12400017 	ldw	r9,0(r2)
    5bb0:	12000117 	ldw	r8,4(r2)
    5bb4:	18037926 	beq	r3,zero,699c <_dtoa_r+0x11a0>
    5bb8:	00800074 	movhi	r2,1
    5bbc:	10858004 	addi	r2,r2,5632
    5bc0:	11800817 	ldw	r6,32(r2)
    5bc4:	11c00917 	ldw	r7,36(r2)
    5bc8:	9009883a 	mov	r4,r18
    5bcc:	980b883a 	mov	r5,r19
    5bd0:	da001715 	stw	r8,92(sp)
    5bd4:	da401615 	stw	r9,88(sp)
    5bd8:	0001d840 	call	1d84 <__divdf3>
    5bdc:	da001717 	ldw	r8,92(sp)
    5be0:	da401617 	ldw	r9,88(sp)
    5be4:	ad4003cc 	andi	r21,r21,15
    5be8:	040000c4 	movi	r16,3
    5bec:	1023883a 	mov	r17,r2
    5bf0:	1829883a 	mov	r20,r3
    5bf4:	a8001126 	beq	r21,zero,5c3c <_dtoa_r+0x440>
    5bf8:	05c00074 	movhi	r23,1
    5bfc:	bdc58004 	addi	r23,r23,5632
    5c00:	4805883a 	mov	r2,r9
    5c04:	4007883a 	mov	r3,r8
    5c08:	a980004c 	andi	r6,r21,1
    5c0c:	1009883a 	mov	r4,r2
    5c10:	a82bd07a 	srai	r21,r21,1
    5c14:	180b883a 	mov	r5,r3
    5c18:	30000426 	beq	r6,zero,5c2c <_dtoa_r+0x430>
    5c1c:	b9800017 	ldw	r6,0(r23)
    5c20:	b9c00117 	ldw	r7,4(r23)
    5c24:	84000044 	addi	r16,r16,1
    5c28:	000d3a80 	call	d3a8 <__muldf3>
    5c2c:	bdc00204 	addi	r23,r23,8
    5c30:	a83ff51e 	bne	r21,zero,5c08 <__alt_data_end+0xff005c08>
    5c34:	1013883a 	mov	r9,r2
    5c38:	1811883a 	mov	r8,r3
    5c3c:	480d883a 	mov	r6,r9
    5c40:	400f883a 	mov	r7,r8
    5c44:	8809883a 	mov	r4,r17
    5c48:	a00b883a 	mov	r5,r20
    5c4c:	0001d840 	call	1d84 <__divdf3>
    5c50:	d8800f15 	stw	r2,60(sp)
    5c54:	d8c01015 	stw	r3,64(sp)
    5c58:	d8c00e17 	ldw	r3,56(sp)
    5c5c:	18000626 	beq	r3,zero,5c78 <_dtoa_r+0x47c>
    5c60:	d9000f17 	ldw	r4,60(sp)
    5c64:	d9401017 	ldw	r5,64(sp)
    5c68:	000d883a 	mov	r6,zero
    5c6c:	01cffc34 	movhi	r7,16368
    5c70:	000d2b40 	call	d2b4 <__ledf2>
    5c74:	10040b16 	blt	r2,zero,6ca4 <_dtoa_r+0x14a8>
    5c78:	8009883a 	mov	r4,r16
    5c7c:	000e43c0 	call	e43c <__floatsidf>
    5c80:	d9800f17 	ldw	r6,60(sp)
    5c84:	d9c01017 	ldw	r7,64(sp)
    5c88:	1009883a 	mov	r4,r2
    5c8c:	180b883a 	mov	r5,r3
    5c90:	000d3a80 	call	d3a8 <__muldf3>
    5c94:	000d883a 	mov	r6,zero
    5c98:	01d00734 	movhi	r7,16412
    5c9c:	1009883a 	mov	r4,r2
    5ca0:	180b883a 	mov	r5,r3
    5ca4:	000c8a40 	call	c8a4 <__adddf3>
    5ca8:	1021883a 	mov	r16,r2
    5cac:	d8800617 	ldw	r2,24(sp)
    5cb0:	047f3034 	movhi	r17,64704
    5cb4:	1c63883a 	add	r17,r3,r17
    5cb8:	10031826 	beq	r2,zero,691c <_dtoa_r+0x1120>
    5cbc:	d8c00517 	ldw	r3,20(sp)
    5cc0:	db000617 	ldw	r12,24(sp)
    5cc4:	d8c01315 	stw	r3,76(sp)
    5cc8:	d9000b17 	ldw	r4,44(sp)
    5ccc:	20038f26 	beq	r4,zero,6b0c <_dtoa_r+0x1310>
    5cd0:	60bfffc4 	addi	r2,r12,-1
    5cd4:	100490fa 	slli	r2,r2,3
    5cd8:	00c00074 	movhi	r3,1
    5cdc:	18c58a04 	addi	r3,r3,5672
    5ce0:	1885883a 	add	r2,r3,r2
    5ce4:	11800017 	ldw	r6,0(r2)
    5ce8:	11c00117 	ldw	r7,4(r2)
    5cec:	d8800717 	ldw	r2,28(sp)
    5cf0:	0009883a 	mov	r4,zero
    5cf4:	014ff834 	movhi	r5,16352
    5cf8:	db001615 	stw	r12,88(sp)
    5cfc:	15c00044 	addi	r23,r2,1
    5d00:	0001d840 	call	1d84 <__divdf3>
    5d04:	800d883a 	mov	r6,r16
    5d08:	880f883a 	mov	r7,r17
    5d0c:	1009883a 	mov	r4,r2
    5d10:	180b883a 	mov	r5,r3
    5d14:	000dac00 	call	dac0 <__subdf3>
    5d18:	d9401017 	ldw	r5,64(sp)
    5d1c:	d9000f17 	ldw	r4,60(sp)
    5d20:	102b883a 	mov	r21,r2
    5d24:	d8c01215 	stw	r3,72(sp)
    5d28:	000e3bc0 	call	e3bc <__fixdfsi>
    5d2c:	1009883a 	mov	r4,r2
    5d30:	1029883a 	mov	r20,r2
    5d34:	000e43c0 	call	e43c <__floatsidf>
    5d38:	d9000f17 	ldw	r4,60(sp)
    5d3c:	d9401017 	ldw	r5,64(sp)
    5d40:	100d883a 	mov	r6,r2
    5d44:	180f883a 	mov	r7,r3
    5d48:	000dac00 	call	dac0 <__subdf3>
    5d4c:	1823883a 	mov	r17,r3
    5d50:	d8c00717 	ldw	r3,28(sp)
    5d54:	d9401217 	ldw	r5,72(sp)
    5d58:	a2000c04 	addi	r8,r20,48
    5d5c:	1021883a 	mov	r16,r2
    5d60:	1a000005 	stb	r8,0(r3)
    5d64:	800d883a 	mov	r6,r16
    5d68:	880f883a 	mov	r7,r17
    5d6c:	a809883a 	mov	r4,r21
    5d70:	4029883a 	mov	r20,r8
    5d74:	000d1d80 	call	d1d8 <__gedf2>
    5d78:	00841d16 	blt	zero,r2,6df0 <_dtoa_r+0x15f4>
    5d7c:	800d883a 	mov	r6,r16
    5d80:	880f883a 	mov	r7,r17
    5d84:	0009883a 	mov	r4,zero
    5d88:	014ffc34 	movhi	r5,16368
    5d8c:	000dac00 	call	dac0 <__subdf3>
    5d90:	d9401217 	ldw	r5,72(sp)
    5d94:	100d883a 	mov	r6,r2
    5d98:	180f883a 	mov	r7,r3
    5d9c:	a809883a 	mov	r4,r21
    5da0:	000d1d80 	call	d1d8 <__gedf2>
    5da4:	db001617 	ldw	r12,88(sp)
    5da8:	00840e16 	blt	zero,r2,6de4 <_dtoa_r+0x15e8>
    5dac:	00800044 	movi	r2,1
    5db0:	13006b0e 	bge	r2,r12,5f60 <_dtoa_r+0x764>
    5db4:	d9000717 	ldw	r4,28(sp)
    5db8:	dd800f15 	stw	r22,60(sp)
    5dbc:	dcc01015 	stw	r19,64(sp)
    5dc0:	2319883a 	add	r12,r4,r12
    5dc4:	dcc01217 	ldw	r19,72(sp)
    5dc8:	602d883a 	mov	r22,r12
    5dcc:	dc801215 	stw	r18,72(sp)
    5dd0:	b825883a 	mov	r18,r23
    5dd4:	00000906 	br	5dfc <_dtoa_r+0x600>
    5dd8:	000dac00 	call	dac0 <__subdf3>
    5ddc:	a80d883a 	mov	r6,r21
    5de0:	980f883a 	mov	r7,r19
    5de4:	1009883a 	mov	r4,r2
    5de8:	180b883a 	mov	r5,r3
    5dec:	000d2b40 	call	d2b4 <__ledf2>
    5df0:	1003e816 	blt	r2,zero,6d94 <_dtoa_r+0x1598>
    5df4:	b825883a 	mov	r18,r23
    5df8:	bd83e926 	beq	r23,r22,6da0 <_dtoa_r+0x15a4>
    5dfc:	a809883a 	mov	r4,r21
    5e00:	980b883a 	mov	r5,r19
    5e04:	000d883a 	mov	r6,zero
    5e08:	01d00934 	movhi	r7,16420
    5e0c:	000d3a80 	call	d3a8 <__muldf3>
    5e10:	000d883a 	mov	r6,zero
    5e14:	01d00934 	movhi	r7,16420
    5e18:	8009883a 	mov	r4,r16
    5e1c:	880b883a 	mov	r5,r17
    5e20:	102b883a 	mov	r21,r2
    5e24:	1827883a 	mov	r19,r3
    5e28:	000d3a80 	call	d3a8 <__muldf3>
    5e2c:	180b883a 	mov	r5,r3
    5e30:	1009883a 	mov	r4,r2
    5e34:	1821883a 	mov	r16,r3
    5e38:	1023883a 	mov	r17,r2
    5e3c:	000e3bc0 	call	e3bc <__fixdfsi>
    5e40:	1009883a 	mov	r4,r2
    5e44:	1029883a 	mov	r20,r2
    5e48:	000e43c0 	call	e43c <__floatsidf>
    5e4c:	8809883a 	mov	r4,r17
    5e50:	800b883a 	mov	r5,r16
    5e54:	100d883a 	mov	r6,r2
    5e58:	180f883a 	mov	r7,r3
    5e5c:	000dac00 	call	dac0 <__subdf3>
    5e60:	a5000c04 	addi	r20,r20,48
    5e64:	a80d883a 	mov	r6,r21
    5e68:	980f883a 	mov	r7,r19
    5e6c:	1009883a 	mov	r4,r2
    5e70:	180b883a 	mov	r5,r3
    5e74:	95000005 	stb	r20,0(r18)
    5e78:	1021883a 	mov	r16,r2
    5e7c:	1823883a 	mov	r17,r3
    5e80:	000d2b40 	call	d2b4 <__ledf2>
    5e84:	bdc00044 	addi	r23,r23,1
    5e88:	800d883a 	mov	r6,r16
    5e8c:	880f883a 	mov	r7,r17
    5e90:	0009883a 	mov	r4,zero
    5e94:	014ffc34 	movhi	r5,16368
    5e98:	103fcf0e 	bge	r2,zero,5dd8 <__alt_data_end+0xff005dd8>
    5e9c:	d8c01317 	ldw	r3,76(sp)
    5ea0:	d8c00515 	stw	r3,20(sp)
    5ea4:	d9400917 	ldw	r5,36(sp)
    5ea8:	e009883a 	mov	r4,fp
    5eac:	00087340 	call	8734 <_Bfree>
    5eb0:	d9000517 	ldw	r4,20(sp)
    5eb4:	d9802317 	ldw	r6,140(sp)
    5eb8:	d9c02517 	ldw	r7,148(sp)
    5ebc:	b8000005 	stb	zero,0(r23)
    5ec0:	20800044 	addi	r2,r4,1
    5ec4:	30800015 	stw	r2,0(r6)
    5ec8:	3802aa26 	beq	r7,zero,6974 <_dtoa_r+0x1178>
    5ecc:	3dc00015 	stw	r23,0(r7)
    5ed0:	d8800717 	ldw	r2,28(sp)
    5ed4:	003e7906 	br	58bc <__alt_data_end+0xff0058bc>
    5ed8:	00800434 	movhi	r2,16
    5edc:	10bfffc4 	addi	r2,r2,-1
    5ee0:	88a2703a 	and	r17,r17,r2
    5ee4:	883e851e 	bne	r17,zero,58fc <__alt_data_end+0xff0058fc>
    5ee8:	00800074 	movhi	r2,1
    5eec:	10856b04 	addi	r2,r2,5548
    5ef0:	003e8406 	br	5904 <__alt_data_end+0xff005904>
    5ef4:	10c00204 	addi	r3,r2,8
    5ef8:	003e8706 	br	5918 <__alt_data_end+0xff005918>
    5efc:	01400434 	movhi	r5,16
    5f00:	297fffc4 	addi	r5,r5,-1
    5f04:	994a703a 	and	r5,r19,r5
    5f08:	9009883a 	mov	r4,r18
    5f0c:	843f0044 	addi	r16,r16,-1023
    5f10:	294ffc34 	orhi	r5,r5,16368
    5f14:	dd800217 	ldw	r22,8(sp)
    5f18:	d8001115 	stw	zero,68(sp)
    5f1c:	003ea506 	br	59b4 <__alt_data_end+0xff0059b4>
    5f20:	00800074 	movhi	r2,1
    5f24:	10856204 	addi	r2,r2,5512
    5f28:	003e6406 	br	58bc <__alt_data_end+0xff0058bc>
    5f2c:	e0001115 	stw	zero,68(fp)
    5f30:	000b883a 	mov	r5,zero
    5f34:	e009883a 	mov	r4,fp
    5f38:	000868c0 	call	868c <_Balloc>
    5f3c:	01bfffc4 	movi	r6,-1
    5f40:	01c00044 	movi	r7,1
    5f44:	d8800715 	stw	r2,28(sp)
    5f48:	d9800c15 	stw	r6,48(sp)
    5f4c:	e0801015 	stw	r2,64(fp)
    5f50:	d8000315 	stw	zero,12(sp)
    5f54:	d9c00b15 	stw	r7,44(sp)
    5f58:	d9800615 	stw	r6,24(sp)
    5f5c:	d8002215 	stw	zero,136(sp)
    5f60:	d8800117 	ldw	r2,4(sp)
    5f64:	10008916 	blt	r2,zero,618c <_dtoa_r+0x990>
    5f68:	d9000517 	ldw	r4,20(sp)
    5f6c:	00c00384 	movi	r3,14
    5f70:	19008616 	blt	r3,r4,618c <_dtoa_r+0x990>
    5f74:	200490fa 	slli	r2,r4,3
    5f78:	00c00074 	movhi	r3,1
    5f7c:	d9802217 	ldw	r6,136(sp)
    5f80:	18c58a04 	addi	r3,r3,5672
    5f84:	1885883a 	add	r2,r3,r2
    5f88:	14000017 	ldw	r16,0(r2)
    5f8c:	14400117 	ldw	r17,4(r2)
    5f90:	30016316 	blt	r6,zero,6520 <_dtoa_r+0xd24>
    5f94:	800d883a 	mov	r6,r16
    5f98:	880f883a 	mov	r7,r17
    5f9c:	9009883a 	mov	r4,r18
    5fa0:	980b883a 	mov	r5,r19
    5fa4:	0001d840 	call	1d84 <__divdf3>
    5fa8:	180b883a 	mov	r5,r3
    5fac:	1009883a 	mov	r4,r2
    5fb0:	000e3bc0 	call	e3bc <__fixdfsi>
    5fb4:	1009883a 	mov	r4,r2
    5fb8:	102b883a 	mov	r21,r2
    5fbc:	000e43c0 	call	e43c <__floatsidf>
    5fc0:	800d883a 	mov	r6,r16
    5fc4:	880f883a 	mov	r7,r17
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	180b883a 	mov	r5,r3
    5fd0:	000d3a80 	call	d3a8 <__muldf3>
    5fd4:	100d883a 	mov	r6,r2
    5fd8:	180f883a 	mov	r7,r3
    5fdc:	9009883a 	mov	r4,r18
    5fe0:	980b883a 	mov	r5,r19
    5fe4:	000dac00 	call	dac0 <__subdf3>
    5fe8:	d9c00717 	ldw	r7,28(sp)
    5fec:	1009883a 	mov	r4,r2
    5ff0:	a8800c04 	addi	r2,r21,48
    5ff4:	38800005 	stb	r2,0(r7)
    5ff8:	3dc00044 	addi	r23,r7,1
    5ffc:	d9c00617 	ldw	r7,24(sp)
    6000:	01800044 	movi	r6,1
    6004:	180b883a 	mov	r5,r3
    6008:	2005883a 	mov	r2,r4
    600c:	39803826 	beq	r7,r6,60f0 <_dtoa_r+0x8f4>
    6010:	000d883a 	mov	r6,zero
    6014:	01d00934 	movhi	r7,16420
    6018:	000d3a80 	call	d3a8 <__muldf3>
    601c:	000d883a 	mov	r6,zero
    6020:	000f883a 	mov	r7,zero
    6024:	1009883a 	mov	r4,r2
    6028:	180b883a 	mov	r5,r3
    602c:	1025883a 	mov	r18,r2
    6030:	1827883a 	mov	r19,r3
    6034:	000d1500 	call	d150 <__eqdf2>
    6038:	103f9a26 	beq	r2,zero,5ea4 <__alt_data_end+0xff005ea4>
    603c:	d9c00617 	ldw	r7,24(sp)
    6040:	d8c00717 	ldw	r3,28(sp)
    6044:	b829883a 	mov	r20,r23
    6048:	38bfffc4 	addi	r2,r7,-1
    604c:	18ad883a 	add	r22,r3,r2
    6050:	00000a06 	br	607c <_dtoa_r+0x880>
    6054:	000d3a80 	call	d3a8 <__muldf3>
    6058:	000d883a 	mov	r6,zero
    605c:	000f883a 	mov	r7,zero
    6060:	1009883a 	mov	r4,r2
    6064:	180b883a 	mov	r5,r3
    6068:	1025883a 	mov	r18,r2
    606c:	1827883a 	mov	r19,r3
    6070:	b829883a 	mov	r20,r23
    6074:	000d1500 	call	d150 <__eqdf2>
    6078:	103f8a26 	beq	r2,zero,5ea4 <__alt_data_end+0xff005ea4>
    607c:	800d883a 	mov	r6,r16
    6080:	880f883a 	mov	r7,r17
    6084:	9009883a 	mov	r4,r18
    6088:	980b883a 	mov	r5,r19
    608c:	0001d840 	call	1d84 <__divdf3>
    6090:	180b883a 	mov	r5,r3
    6094:	1009883a 	mov	r4,r2
    6098:	000e3bc0 	call	e3bc <__fixdfsi>
    609c:	1009883a 	mov	r4,r2
    60a0:	102b883a 	mov	r21,r2
    60a4:	000e43c0 	call	e43c <__floatsidf>
    60a8:	800d883a 	mov	r6,r16
    60ac:	880f883a 	mov	r7,r17
    60b0:	1009883a 	mov	r4,r2
    60b4:	180b883a 	mov	r5,r3
    60b8:	000d3a80 	call	d3a8 <__muldf3>
    60bc:	100d883a 	mov	r6,r2
    60c0:	180f883a 	mov	r7,r3
    60c4:	9009883a 	mov	r4,r18
    60c8:	980b883a 	mov	r5,r19
    60cc:	000dac00 	call	dac0 <__subdf3>
    60d0:	aa000c04 	addi	r8,r21,48
    60d4:	a2000005 	stb	r8,0(r20)
    60d8:	000d883a 	mov	r6,zero
    60dc:	01d00934 	movhi	r7,16420
    60e0:	1009883a 	mov	r4,r2
    60e4:	180b883a 	mov	r5,r3
    60e8:	a5c00044 	addi	r23,r20,1
    60ec:	b53fd91e 	bne	r22,r20,6054 <__alt_data_end+0xff006054>
    60f0:	100d883a 	mov	r6,r2
    60f4:	180f883a 	mov	r7,r3
    60f8:	1009883a 	mov	r4,r2
    60fc:	180b883a 	mov	r5,r3
    6100:	000c8a40 	call	c8a4 <__adddf3>
    6104:	100d883a 	mov	r6,r2
    6108:	180f883a 	mov	r7,r3
    610c:	8009883a 	mov	r4,r16
    6110:	880b883a 	mov	r5,r17
    6114:	1027883a 	mov	r19,r2
    6118:	1825883a 	mov	r18,r3
    611c:	000d2b40 	call	d2b4 <__ledf2>
    6120:	10000816 	blt	r2,zero,6144 <_dtoa_r+0x948>
    6124:	980d883a 	mov	r6,r19
    6128:	900f883a 	mov	r7,r18
    612c:	8009883a 	mov	r4,r16
    6130:	880b883a 	mov	r5,r17
    6134:	000d1500 	call	d150 <__eqdf2>
    6138:	103f5a1e 	bne	r2,zero,5ea4 <__alt_data_end+0xff005ea4>
    613c:	ad40004c 	andi	r21,r21,1
    6140:	a83f5826 	beq	r21,zero,5ea4 <__alt_data_end+0xff005ea4>
    6144:	bd3fffc3 	ldbu	r20,-1(r23)
    6148:	b8bfffc4 	addi	r2,r23,-1
    614c:	1007883a 	mov	r3,r2
    6150:	01400e44 	movi	r5,57
    6154:	d9800717 	ldw	r6,28(sp)
    6158:	00000506 	br	6170 <_dtoa_r+0x974>
    615c:	18ffffc4 	addi	r3,r3,-1
    6160:	11824726 	beq	r2,r6,6a80 <_dtoa_r+0x1284>
    6164:	1d000003 	ldbu	r20,0(r3)
    6168:	102f883a 	mov	r23,r2
    616c:	10bfffc4 	addi	r2,r2,-1
    6170:	a1003fcc 	andi	r4,r20,255
    6174:	2100201c 	xori	r4,r4,128
    6178:	213fe004 	addi	r4,r4,-128
    617c:	217ff726 	beq	r4,r5,615c <__alt_data_end+0xff00615c>
    6180:	a2000044 	addi	r8,r20,1
    6184:	12000005 	stb	r8,0(r2)
    6188:	003f4606 	br	5ea4 <__alt_data_end+0xff005ea4>
    618c:	d9000b17 	ldw	r4,44(sp)
    6190:	2000c826 	beq	r4,zero,64b4 <_dtoa_r+0xcb8>
    6194:	d9800317 	ldw	r6,12(sp)
    6198:	00c00044 	movi	r3,1
    619c:	1980f90e 	bge	r3,r6,6584 <_dtoa_r+0xd88>
    61a0:	d8800617 	ldw	r2,24(sp)
    61a4:	d8c00a17 	ldw	r3,40(sp)
    61a8:	157fffc4 	addi	r21,r2,-1
    61ac:	1d41f316 	blt	r3,r21,697c <_dtoa_r+0x1180>
    61b0:	1d6bc83a 	sub	r21,r3,r21
    61b4:	d9c00617 	ldw	r7,24(sp)
    61b8:	3802aa16 	blt	r7,zero,6c64 <_dtoa_r+0x1468>
    61bc:	dd000817 	ldw	r20,32(sp)
    61c0:	d8800617 	ldw	r2,24(sp)
    61c4:	d8c00817 	ldw	r3,32(sp)
    61c8:	01400044 	movi	r5,1
    61cc:	e009883a 	mov	r4,fp
    61d0:	1887883a 	add	r3,r3,r2
    61d4:	d8c00815 	stw	r3,32(sp)
    61d8:	b0ad883a 	add	r22,r22,r2
    61dc:	0008a980 	call	8a98 <__i2b>
    61e0:	1023883a 	mov	r17,r2
    61e4:	a0000826 	beq	r20,zero,6208 <_dtoa_r+0xa0c>
    61e8:	0580070e 	bge	zero,r22,6208 <_dtoa_r+0xa0c>
    61ec:	a005883a 	mov	r2,r20
    61f0:	b500b916 	blt	r22,r20,64d8 <_dtoa_r+0xcdc>
    61f4:	d9000817 	ldw	r4,32(sp)
    61f8:	a0a9c83a 	sub	r20,r20,r2
    61fc:	b0adc83a 	sub	r22,r22,r2
    6200:	2089c83a 	sub	r4,r4,r2
    6204:	d9000815 	stw	r4,32(sp)
    6208:	d9800a17 	ldw	r6,40(sp)
    620c:	0181810e 	bge	zero,r6,6814 <_dtoa_r+0x1018>
    6210:	d9c00b17 	ldw	r7,44(sp)
    6214:	3800b326 	beq	r7,zero,64e4 <_dtoa_r+0xce8>
    6218:	a800b226 	beq	r21,zero,64e4 <_dtoa_r+0xce8>
    621c:	880b883a 	mov	r5,r17
    6220:	a80d883a 	mov	r6,r21
    6224:	e009883a 	mov	r4,fp
    6228:	0008ccc0 	call	8ccc <__pow5mult>
    622c:	d9800917 	ldw	r6,36(sp)
    6230:	100b883a 	mov	r5,r2
    6234:	e009883a 	mov	r4,fp
    6238:	1023883a 	mov	r17,r2
    623c:	0008ad40 	call	8ad4 <__multiply>
    6240:	1021883a 	mov	r16,r2
    6244:	d8800a17 	ldw	r2,40(sp)
    6248:	d9400917 	ldw	r5,36(sp)
    624c:	e009883a 	mov	r4,fp
    6250:	1545c83a 	sub	r2,r2,r21
    6254:	d8800a15 	stw	r2,40(sp)
    6258:	00087340 	call	8734 <_Bfree>
    625c:	d8c00a17 	ldw	r3,40(sp)
    6260:	18009f1e 	bne	r3,zero,64e0 <_dtoa_r+0xce4>
    6264:	05c00044 	movi	r23,1
    6268:	e009883a 	mov	r4,fp
    626c:	b80b883a 	mov	r5,r23
    6270:	0008a980 	call	8a98 <__i2b>
    6274:	d9000d17 	ldw	r4,52(sp)
    6278:	102b883a 	mov	r21,r2
    627c:	2000ce26 	beq	r4,zero,65b8 <_dtoa_r+0xdbc>
    6280:	200d883a 	mov	r6,r4
    6284:	100b883a 	mov	r5,r2
    6288:	e009883a 	mov	r4,fp
    628c:	0008ccc0 	call	8ccc <__pow5mult>
    6290:	d9800317 	ldw	r6,12(sp)
    6294:	102b883a 	mov	r21,r2
    6298:	b981810e 	bge	r23,r6,68a0 <_dtoa_r+0x10a4>
    629c:	0027883a 	mov	r19,zero
    62a0:	a8800417 	ldw	r2,16(r21)
    62a4:	05c00804 	movi	r23,32
    62a8:	10800104 	addi	r2,r2,4
    62ac:	1085883a 	add	r2,r2,r2
    62b0:	1085883a 	add	r2,r2,r2
    62b4:	a885883a 	add	r2,r21,r2
    62b8:	11000017 	ldw	r4,0(r2)
    62bc:	00089800 	call	8980 <__hi0bits>
    62c0:	b885c83a 	sub	r2,r23,r2
    62c4:	1585883a 	add	r2,r2,r22
    62c8:	108007cc 	andi	r2,r2,31
    62cc:	1000b326 	beq	r2,zero,659c <_dtoa_r+0xda0>
    62d0:	00c00804 	movi	r3,32
    62d4:	1887c83a 	sub	r3,r3,r2
    62d8:	01000104 	movi	r4,4
    62dc:	20c2cd0e 	bge	r4,r3,6e14 <_dtoa_r+0x1618>
    62e0:	00c00704 	movi	r3,28
    62e4:	1885c83a 	sub	r2,r3,r2
    62e8:	d8c00817 	ldw	r3,32(sp)
    62ec:	a0a9883a 	add	r20,r20,r2
    62f0:	b0ad883a 	add	r22,r22,r2
    62f4:	1887883a 	add	r3,r3,r2
    62f8:	d8c00815 	stw	r3,32(sp)
    62fc:	d9800817 	ldw	r6,32(sp)
    6300:	0180040e 	bge	zero,r6,6314 <_dtoa_r+0xb18>
    6304:	800b883a 	mov	r5,r16
    6308:	e009883a 	mov	r4,fp
    630c:	0008e0c0 	call	8e0c <__lshift>
    6310:	1021883a 	mov	r16,r2
    6314:	0580050e 	bge	zero,r22,632c <_dtoa_r+0xb30>
    6318:	a80b883a 	mov	r5,r21
    631c:	b00d883a 	mov	r6,r22
    6320:	e009883a 	mov	r4,fp
    6324:	0008e0c0 	call	8e0c <__lshift>
    6328:	102b883a 	mov	r21,r2
    632c:	d9c00e17 	ldw	r7,56(sp)
    6330:	3801211e 	bne	r7,zero,67b8 <_dtoa_r+0xfbc>
    6334:	d9800617 	ldw	r6,24(sp)
    6338:	0181380e 	bge	zero,r6,681c <_dtoa_r+0x1020>
    633c:	d8c00b17 	ldw	r3,44(sp)
    6340:	1800ab1e 	bne	r3,zero,65f0 <_dtoa_r+0xdf4>
    6344:	dc800717 	ldw	r18,28(sp)
    6348:	dcc00617 	ldw	r19,24(sp)
    634c:	9029883a 	mov	r20,r18
    6350:	00000206 	br	635c <_dtoa_r+0xb60>
    6354:	000875c0 	call	875c <__multadd>
    6358:	1021883a 	mov	r16,r2
    635c:	a80b883a 	mov	r5,r21
    6360:	8009883a 	mov	r4,r16
    6364:	00055fc0 	call	55fc <quorem>
    6368:	10800c04 	addi	r2,r2,48
    636c:	90800005 	stb	r2,0(r18)
    6370:	94800044 	addi	r18,r18,1
    6374:	9507c83a 	sub	r3,r18,r20
    6378:	000f883a 	mov	r7,zero
    637c:	01800284 	movi	r6,10
    6380:	800b883a 	mov	r5,r16
    6384:	e009883a 	mov	r4,fp
    6388:	1cfff216 	blt	r3,r19,6354 <__alt_data_end+0xff006354>
    638c:	1011883a 	mov	r8,r2
    6390:	d8800617 	ldw	r2,24(sp)
    6394:	0082370e 	bge	zero,r2,6c74 <_dtoa_r+0x1478>
    6398:	d9000717 	ldw	r4,28(sp)
    639c:	0025883a 	mov	r18,zero
    63a0:	20af883a 	add	r23,r4,r2
    63a4:	01800044 	movi	r6,1
    63a8:	800b883a 	mov	r5,r16
    63ac:	e009883a 	mov	r4,fp
    63b0:	da001715 	stw	r8,92(sp)
    63b4:	0008e0c0 	call	8e0c <__lshift>
    63b8:	a80b883a 	mov	r5,r21
    63bc:	1009883a 	mov	r4,r2
    63c0:	d8800915 	stw	r2,36(sp)
    63c4:	0008f540 	call	8f54 <__mcmp>
    63c8:	da001717 	ldw	r8,92(sp)
    63cc:	0081800e 	bge	zero,r2,69d0 <_dtoa_r+0x11d4>
    63d0:	b93fffc3 	ldbu	r4,-1(r23)
    63d4:	b8bfffc4 	addi	r2,r23,-1
    63d8:	1007883a 	mov	r3,r2
    63dc:	01800e44 	movi	r6,57
    63e0:	d9c00717 	ldw	r7,28(sp)
    63e4:	00000506 	br	63fc <_dtoa_r+0xc00>
    63e8:	18ffffc4 	addi	r3,r3,-1
    63ec:	11c12326 	beq	r2,r7,687c <_dtoa_r+0x1080>
    63f0:	19000003 	ldbu	r4,0(r3)
    63f4:	102f883a 	mov	r23,r2
    63f8:	10bfffc4 	addi	r2,r2,-1
    63fc:	21403fcc 	andi	r5,r4,255
    6400:	2940201c 	xori	r5,r5,128
    6404:	297fe004 	addi	r5,r5,-128
    6408:	29bff726 	beq	r5,r6,63e8 <__alt_data_end+0xff0063e8>
    640c:	21000044 	addi	r4,r4,1
    6410:	11000005 	stb	r4,0(r2)
    6414:	a80b883a 	mov	r5,r21
    6418:	e009883a 	mov	r4,fp
    641c:	00087340 	call	8734 <_Bfree>
    6420:	883ea026 	beq	r17,zero,5ea4 <__alt_data_end+0xff005ea4>
    6424:	90000426 	beq	r18,zero,6438 <_dtoa_r+0xc3c>
    6428:	94400326 	beq	r18,r17,6438 <_dtoa_r+0xc3c>
    642c:	900b883a 	mov	r5,r18
    6430:	e009883a 	mov	r4,fp
    6434:	00087340 	call	8734 <_Bfree>
    6438:	880b883a 	mov	r5,r17
    643c:	e009883a 	mov	r4,fp
    6440:	00087340 	call	8734 <_Bfree>
    6444:	003e9706 	br	5ea4 <__alt_data_end+0xff005ea4>
    6448:	01800044 	movi	r6,1
    644c:	d9800e15 	stw	r6,56(sp)
    6450:	003d9606 	br	5aac <__alt_data_end+0xff005aac>
    6454:	d8800817 	ldw	r2,32(sp)
    6458:	d8c00517 	ldw	r3,20(sp)
    645c:	d8000d15 	stw	zero,52(sp)
    6460:	10c5c83a 	sub	r2,r2,r3
    6464:	00c9c83a 	sub	r4,zero,r3
    6468:	d8800815 	stw	r2,32(sp)
    646c:	d9000a15 	stw	r4,40(sp)
    6470:	003d9706 	br	5ad0 <__alt_data_end+0xff005ad0>
    6474:	05adc83a 	sub	r22,zero,r22
    6478:	dd800815 	stw	r22,32(sp)
    647c:	002d883a 	mov	r22,zero
    6480:	003d8e06 	br	5abc <__alt_data_end+0xff005abc>
    6484:	d9000517 	ldw	r4,20(sp)
    6488:	000e43c0 	call	e43c <__floatsidf>
    648c:	100d883a 	mov	r6,r2
    6490:	180f883a 	mov	r7,r3
    6494:	a009883a 	mov	r4,r20
    6498:	880b883a 	mov	r5,r17
    649c:	000d1500 	call	d150 <__eqdf2>
    64a0:	103d7126 	beq	r2,zero,5a68 <__alt_data_end+0xff005a68>
    64a4:	d9c00517 	ldw	r7,20(sp)
    64a8:	39ffffc4 	addi	r7,r7,-1
    64ac:	d9c00515 	stw	r7,20(sp)
    64b0:	003d6d06 	br	5a68 <__alt_data_end+0xff005a68>
    64b4:	dd400a17 	ldw	r21,40(sp)
    64b8:	dd000817 	ldw	r20,32(sp)
    64bc:	0023883a 	mov	r17,zero
    64c0:	003f4806 	br	61e4 <__alt_data_end+0xff0061e4>
    64c4:	10e3c83a 	sub	r17,r2,r3
    64c8:	9448983a 	sll	r4,r18,r17
    64cc:	003d3206 	br	5998 <__alt_data_end+0xff005998>
    64d0:	d8000e15 	stw	zero,56(sp)
    64d4:	003d7506 	br	5aac <__alt_data_end+0xff005aac>
    64d8:	b005883a 	mov	r2,r22
    64dc:	003f4506 	br	61f4 <__alt_data_end+0xff0061f4>
    64e0:	dc000915 	stw	r16,36(sp)
    64e4:	d9800a17 	ldw	r6,40(sp)
    64e8:	d9400917 	ldw	r5,36(sp)
    64ec:	e009883a 	mov	r4,fp
    64f0:	0008ccc0 	call	8ccc <__pow5mult>
    64f4:	1021883a 	mov	r16,r2
    64f8:	003f5a06 	br	6264 <__alt_data_end+0xff006264>
    64fc:	01c00044 	movi	r7,1
    6500:	d9c00b15 	stw	r7,44(sp)
    6504:	d8802217 	ldw	r2,136(sp)
    6508:	0081280e 	bge	zero,r2,69ac <_dtoa_r+0x11b0>
    650c:	100d883a 	mov	r6,r2
    6510:	1021883a 	mov	r16,r2
    6514:	d8800c15 	stw	r2,48(sp)
    6518:	d8800615 	stw	r2,24(sp)
    651c:	003d8806 	br	5b40 <__alt_data_end+0xff005b40>
    6520:	d8800617 	ldw	r2,24(sp)
    6524:	00be9b16 	blt	zero,r2,5f94 <__alt_data_end+0xff005f94>
    6528:	10010f1e 	bne	r2,zero,6968 <_dtoa_r+0x116c>
    652c:	880b883a 	mov	r5,r17
    6530:	000d883a 	mov	r6,zero
    6534:	01d00534 	movhi	r7,16404
    6538:	8009883a 	mov	r4,r16
    653c:	000d3a80 	call	d3a8 <__muldf3>
    6540:	900d883a 	mov	r6,r18
    6544:	980f883a 	mov	r7,r19
    6548:	1009883a 	mov	r4,r2
    654c:	180b883a 	mov	r5,r3
    6550:	000d1d80 	call	d1d8 <__gedf2>
    6554:	002b883a 	mov	r21,zero
    6558:	0023883a 	mov	r17,zero
    655c:	1000bf16 	blt	r2,zero,685c <_dtoa_r+0x1060>
    6560:	d9802217 	ldw	r6,136(sp)
    6564:	ddc00717 	ldw	r23,28(sp)
    6568:	018c303a 	nor	r6,zero,r6
    656c:	d9800515 	stw	r6,20(sp)
    6570:	a80b883a 	mov	r5,r21
    6574:	e009883a 	mov	r4,fp
    6578:	00087340 	call	8734 <_Bfree>
    657c:	883e4926 	beq	r17,zero,5ea4 <__alt_data_end+0xff005ea4>
    6580:	003fad06 	br	6438 <__alt_data_end+0xff006438>
    6584:	d9c01117 	ldw	r7,68(sp)
    6588:	3801bc26 	beq	r7,zero,6c7c <_dtoa_r+0x1480>
    658c:	10810cc4 	addi	r2,r2,1075
    6590:	dd400a17 	ldw	r21,40(sp)
    6594:	dd000817 	ldw	r20,32(sp)
    6598:	003f0a06 	br	61c4 <__alt_data_end+0xff0061c4>
    659c:	00800704 	movi	r2,28
    65a0:	d9000817 	ldw	r4,32(sp)
    65a4:	a0a9883a 	add	r20,r20,r2
    65a8:	b0ad883a 	add	r22,r22,r2
    65ac:	2089883a 	add	r4,r4,r2
    65b0:	d9000815 	stw	r4,32(sp)
    65b4:	003f5106 	br	62fc <__alt_data_end+0xff0062fc>
    65b8:	d8c00317 	ldw	r3,12(sp)
    65bc:	b8c1fc0e 	bge	r23,r3,6db0 <_dtoa_r+0x15b4>
    65c0:	0027883a 	mov	r19,zero
    65c4:	b805883a 	mov	r2,r23
    65c8:	003f3e06 	br	62c4 <__alt_data_end+0xff0062c4>
    65cc:	880b883a 	mov	r5,r17
    65d0:	e009883a 	mov	r4,fp
    65d4:	000f883a 	mov	r7,zero
    65d8:	01800284 	movi	r6,10
    65dc:	000875c0 	call	875c <__multadd>
    65e0:	d9000c17 	ldw	r4,48(sp)
    65e4:	1023883a 	mov	r17,r2
    65e8:	0102040e 	bge	zero,r4,6dfc <_dtoa_r+0x1600>
    65ec:	d9000615 	stw	r4,24(sp)
    65f0:	0500050e 	bge	zero,r20,6608 <_dtoa_r+0xe0c>
    65f4:	880b883a 	mov	r5,r17
    65f8:	a00d883a 	mov	r6,r20
    65fc:	e009883a 	mov	r4,fp
    6600:	0008e0c0 	call	8e0c <__lshift>
    6604:	1023883a 	mov	r17,r2
    6608:	9801241e 	bne	r19,zero,6a9c <_dtoa_r+0x12a0>
    660c:	8829883a 	mov	r20,r17
    6610:	d9000617 	ldw	r4,24(sp)
    6614:	dcc00717 	ldw	r19,28(sp)
    6618:	9480004c 	andi	r18,r18,1
    661c:	20bfffc4 	addi	r2,r4,-1
    6620:	9885883a 	add	r2,r19,r2
    6624:	d8800415 	stw	r2,16(sp)
    6628:	dc800615 	stw	r18,24(sp)
    662c:	a80b883a 	mov	r5,r21
    6630:	8009883a 	mov	r4,r16
    6634:	00055fc0 	call	55fc <quorem>
    6638:	880b883a 	mov	r5,r17
    663c:	8009883a 	mov	r4,r16
    6640:	102f883a 	mov	r23,r2
    6644:	0008f540 	call	8f54 <__mcmp>
    6648:	a80b883a 	mov	r5,r21
    664c:	a00d883a 	mov	r6,r20
    6650:	e009883a 	mov	r4,fp
    6654:	102d883a 	mov	r22,r2
    6658:	0008fb40 	call	8fb4 <__mdiff>
    665c:	1007883a 	mov	r3,r2
    6660:	10800317 	ldw	r2,12(r2)
    6664:	bc800c04 	addi	r18,r23,48
    6668:	180b883a 	mov	r5,r3
    666c:	10004e1e 	bne	r2,zero,67a8 <_dtoa_r+0xfac>
    6670:	8009883a 	mov	r4,r16
    6674:	d8c01615 	stw	r3,88(sp)
    6678:	0008f540 	call	8f54 <__mcmp>
    667c:	d8c01617 	ldw	r3,88(sp)
    6680:	e009883a 	mov	r4,fp
    6684:	d8801615 	stw	r2,88(sp)
    6688:	180b883a 	mov	r5,r3
    668c:	00087340 	call	8734 <_Bfree>
    6690:	d8801617 	ldw	r2,88(sp)
    6694:	1000041e 	bne	r2,zero,66a8 <_dtoa_r+0xeac>
    6698:	d9800317 	ldw	r6,12(sp)
    669c:	3000021e 	bne	r6,zero,66a8 <_dtoa_r+0xeac>
    66a0:	d8c00617 	ldw	r3,24(sp)
    66a4:	18003726 	beq	r3,zero,6784 <_dtoa_r+0xf88>
    66a8:	b0002016 	blt	r22,zero,672c <_dtoa_r+0xf30>
    66ac:	b000041e 	bne	r22,zero,66c0 <_dtoa_r+0xec4>
    66b0:	d9000317 	ldw	r4,12(sp)
    66b4:	2000021e 	bne	r4,zero,66c0 <_dtoa_r+0xec4>
    66b8:	d8c00617 	ldw	r3,24(sp)
    66bc:	18001b26 	beq	r3,zero,672c <_dtoa_r+0xf30>
    66c0:	00810716 	blt	zero,r2,6ae0 <_dtoa_r+0x12e4>
    66c4:	d8c00417 	ldw	r3,16(sp)
    66c8:	9d800044 	addi	r22,r19,1
    66cc:	9c800005 	stb	r18,0(r19)
    66d0:	b02f883a 	mov	r23,r22
    66d4:	98c10626 	beq	r19,r3,6af0 <_dtoa_r+0x12f4>
    66d8:	800b883a 	mov	r5,r16
    66dc:	000f883a 	mov	r7,zero
    66e0:	01800284 	movi	r6,10
    66e4:	e009883a 	mov	r4,fp
    66e8:	000875c0 	call	875c <__multadd>
    66ec:	1021883a 	mov	r16,r2
    66f0:	000f883a 	mov	r7,zero
    66f4:	01800284 	movi	r6,10
    66f8:	880b883a 	mov	r5,r17
    66fc:	e009883a 	mov	r4,fp
    6700:	8d002526 	beq	r17,r20,6798 <_dtoa_r+0xf9c>
    6704:	000875c0 	call	875c <__multadd>
    6708:	a00b883a 	mov	r5,r20
    670c:	000f883a 	mov	r7,zero
    6710:	01800284 	movi	r6,10
    6714:	e009883a 	mov	r4,fp
    6718:	1023883a 	mov	r17,r2
    671c:	000875c0 	call	875c <__multadd>
    6720:	1029883a 	mov	r20,r2
    6724:	b027883a 	mov	r19,r22
    6728:	003fc006 	br	662c <__alt_data_end+0xff00662c>
    672c:	9011883a 	mov	r8,r18
    6730:	00800e0e 	bge	zero,r2,676c <_dtoa_r+0xf70>
    6734:	800b883a 	mov	r5,r16
    6738:	01800044 	movi	r6,1
    673c:	e009883a 	mov	r4,fp
    6740:	da001715 	stw	r8,92(sp)
    6744:	0008e0c0 	call	8e0c <__lshift>
    6748:	a80b883a 	mov	r5,r21
    674c:	1009883a 	mov	r4,r2
    6750:	1021883a 	mov	r16,r2
    6754:	0008f540 	call	8f54 <__mcmp>
    6758:	da001717 	ldw	r8,92(sp)
    675c:	0081960e 	bge	zero,r2,6db8 <_dtoa_r+0x15bc>
    6760:	00800e44 	movi	r2,57
    6764:	40817026 	beq	r8,r2,6d28 <_dtoa_r+0x152c>
    6768:	ba000c44 	addi	r8,r23,49
    676c:	8825883a 	mov	r18,r17
    6770:	9dc00044 	addi	r23,r19,1
    6774:	9a000005 	stb	r8,0(r19)
    6778:	a023883a 	mov	r17,r20
    677c:	dc000915 	stw	r16,36(sp)
    6780:	003f2406 	br	6414 <__alt_data_end+0xff006414>
    6784:	00800e44 	movi	r2,57
    6788:	9011883a 	mov	r8,r18
    678c:	90816626 	beq	r18,r2,6d28 <_dtoa_r+0x152c>
    6790:	05bff516 	blt	zero,r22,6768 <__alt_data_end+0xff006768>
    6794:	003ff506 	br	676c <__alt_data_end+0xff00676c>
    6798:	000875c0 	call	875c <__multadd>
    679c:	1023883a 	mov	r17,r2
    67a0:	1029883a 	mov	r20,r2
    67a4:	003fdf06 	br	6724 <__alt_data_end+0xff006724>
    67a8:	e009883a 	mov	r4,fp
    67ac:	00087340 	call	8734 <_Bfree>
    67b0:	00800044 	movi	r2,1
    67b4:	003fbc06 	br	66a8 <__alt_data_end+0xff0066a8>
    67b8:	a80b883a 	mov	r5,r21
    67bc:	8009883a 	mov	r4,r16
    67c0:	0008f540 	call	8f54 <__mcmp>
    67c4:	103edb0e 	bge	r2,zero,6334 <__alt_data_end+0xff006334>
    67c8:	800b883a 	mov	r5,r16
    67cc:	000f883a 	mov	r7,zero
    67d0:	01800284 	movi	r6,10
    67d4:	e009883a 	mov	r4,fp
    67d8:	000875c0 	call	875c <__multadd>
    67dc:	1021883a 	mov	r16,r2
    67e0:	d8800517 	ldw	r2,20(sp)
    67e4:	d8c00b17 	ldw	r3,44(sp)
    67e8:	10bfffc4 	addi	r2,r2,-1
    67ec:	d8800515 	stw	r2,20(sp)
    67f0:	183f761e 	bne	r3,zero,65cc <__alt_data_end+0xff0065cc>
    67f4:	d9000c17 	ldw	r4,48(sp)
    67f8:	0101730e 	bge	zero,r4,6dc8 <_dtoa_r+0x15cc>
    67fc:	d9000615 	stw	r4,24(sp)
    6800:	003ed006 	br	6344 <__alt_data_end+0xff006344>
    6804:	00800084 	movi	r2,2
    6808:	3081861e 	bne	r6,r2,6e24 <_dtoa_r+0x1628>
    680c:	d8000b15 	stw	zero,44(sp)
    6810:	003f3c06 	br	6504 <__alt_data_end+0xff006504>
    6814:	dc000917 	ldw	r16,36(sp)
    6818:	003e9206 	br	6264 <__alt_data_end+0xff006264>
    681c:	d9c00317 	ldw	r7,12(sp)
    6820:	00800084 	movi	r2,2
    6824:	11fec50e 	bge	r2,r7,633c <__alt_data_end+0xff00633c>
    6828:	d9000617 	ldw	r4,24(sp)
    682c:	20013c1e 	bne	r4,zero,6d20 <_dtoa_r+0x1524>
    6830:	a80b883a 	mov	r5,r21
    6834:	000f883a 	mov	r7,zero
    6838:	01800144 	movi	r6,5
    683c:	e009883a 	mov	r4,fp
    6840:	000875c0 	call	875c <__multadd>
    6844:	100b883a 	mov	r5,r2
    6848:	8009883a 	mov	r4,r16
    684c:	102b883a 	mov	r21,r2
    6850:	0008f540 	call	8f54 <__mcmp>
    6854:	dc000915 	stw	r16,36(sp)
    6858:	00bf410e 	bge	zero,r2,6560 <__alt_data_end+0xff006560>
    685c:	d9c00717 	ldw	r7,28(sp)
    6860:	00800c44 	movi	r2,49
    6864:	38800005 	stb	r2,0(r7)
    6868:	d8800517 	ldw	r2,20(sp)
    686c:	3dc00044 	addi	r23,r7,1
    6870:	10800044 	addi	r2,r2,1
    6874:	d8800515 	stw	r2,20(sp)
    6878:	003f3d06 	br	6570 <__alt_data_end+0xff006570>
    687c:	d9800517 	ldw	r6,20(sp)
    6880:	d9c00717 	ldw	r7,28(sp)
    6884:	00800c44 	movi	r2,49
    6888:	31800044 	addi	r6,r6,1
    688c:	d9800515 	stw	r6,20(sp)
    6890:	38800005 	stb	r2,0(r7)
    6894:	003edf06 	br	6414 <__alt_data_end+0xff006414>
    6898:	d8000b15 	stw	zero,44(sp)
    689c:	003c9f06 	br	5b1c <__alt_data_end+0xff005b1c>
    68a0:	903e7e1e 	bne	r18,zero,629c <__alt_data_end+0xff00629c>
    68a4:	00800434 	movhi	r2,16
    68a8:	10bfffc4 	addi	r2,r2,-1
    68ac:	9884703a 	and	r2,r19,r2
    68b0:	1000ea1e 	bne	r2,zero,6c5c <_dtoa_r+0x1460>
    68b4:	9cdffc2c 	andhi	r19,r19,32752
    68b8:	9800e826 	beq	r19,zero,6c5c <_dtoa_r+0x1460>
    68bc:	d9c00817 	ldw	r7,32(sp)
    68c0:	b5800044 	addi	r22,r22,1
    68c4:	04c00044 	movi	r19,1
    68c8:	39c00044 	addi	r7,r7,1
    68cc:	d9c00815 	stw	r7,32(sp)
    68d0:	d8800d17 	ldw	r2,52(sp)
    68d4:	103e721e 	bne	r2,zero,62a0 <__alt_data_end+0xff0062a0>
    68d8:	00800044 	movi	r2,1
    68dc:	003e7906 	br	62c4 <__alt_data_end+0xff0062c4>
    68e0:	8009883a 	mov	r4,r16
    68e4:	000e43c0 	call	e43c <__floatsidf>
    68e8:	d9800f17 	ldw	r6,60(sp)
    68ec:	d9c01017 	ldw	r7,64(sp)
    68f0:	1009883a 	mov	r4,r2
    68f4:	180b883a 	mov	r5,r3
    68f8:	000d3a80 	call	d3a8 <__muldf3>
    68fc:	000d883a 	mov	r6,zero
    6900:	01d00734 	movhi	r7,16412
    6904:	1009883a 	mov	r4,r2
    6908:	180b883a 	mov	r5,r3
    690c:	000c8a40 	call	c8a4 <__adddf3>
    6910:	047f3034 	movhi	r17,64704
    6914:	1021883a 	mov	r16,r2
    6918:	1c63883a 	add	r17,r3,r17
    691c:	d9000f17 	ldw	r4,60(sp)
    6920:	d9401017 	ldw	r5,64(sp)
    6924:	000d883a 	mov	r6,zero
    6928:	01d00534 	movhi	r7,16404
    692c:	000dac00 	call	dac0 <__subdf3>
    6930:	800d883a 	mov	r6,r16
    6934:	880f883a 	mov	r7,r17
    6938:	1009883a 	mov	r4,r2
    693c:	180b883a 	mov	r5,r3
    6940:	102b883a 	mov	r21,r2
    6944:	1829883a 	mov	r20,r3
    6948:	000d1d80 	call	d1d8 <__gedf2>
    694c:	00806c16 	blt	zero,r2,6b00 <_dtoa_r+0x1304>
    6950:	89e0003c 	xorhi	r7,r17,32768
    6954:	800d883a 	mov	r6,r16
    6958:	a809883a 	mov	r4,r21
    695c:	a00b883a 	mov	r5,r20
    6960:	000d2b40 	call	d2b4 <__ledf2>
    6964:	103d7e0e 	bge	r2,zero,5f60 <__alt_data_end+0xff005f60>
    6968:	002b883a 	mov	r21,zero
    696c:	0023883a 	mov	r17,zero
    6970:	003efb06 	br	6560 <__alt_data_end+0xff006560>
    6974:	d8800717 	ldw	r2,28(sp)
    6978:	003bd006 	br	58bc <__alt_data_end+0xff0058bc>
    697c:	d9000a17 	ldw	r4,40(sp)
    6980:	d9800d17 	ldw	r6,52(sp)
    6984:	dd400a15 	stw	r21,40(sp)
    6988:	a905c83a 	sub	r2,r21,r4
    698c:	308d883a 	add	r6,r6,r2
    6990:	d9800d15 	stw	r6,52(sp)
    6994:	002b883a 	mov	r21,zero
    6998:	003e0606 	br	61b4 <__alt_data_end+0xff0061b4>
    699c:	9023883a 	mov	r17,r18
    69a0:	9829883a 	mov	r20,r19
    69a4:	04000084 	movi	r16,2
    69a8:	003c9206 	br	5bf4 <__alt_data_end+0xff005bf4>
    69ac:	04000044 	movi	r16,1
    69b0:	dc000c15 	stw	r16,48(sp)
    69b4:	dc000615 	stw	r16,24(sp)
    69b8:	dc002215 	stw	r16,136(sp)
    69bc:	e0001115 	stw	zero,68(fp)
    69c0:	000b883a 	mov	r5,zero
    69c4:	003c6906 	br	5b6c <__alt_data_end+0xff005b6c>
    69c8:	3021883a 	mov	r16,r6
    69cc:	003ffb06 	br	69bc <__alt_data_end+0xff0069bc>
    69d0:	1000021e 	bne	r2,zero,69dc <_dtoa_r+0x11e0>
    69d4:	4200004c 	andi	r8,r8,1
    69d8:	403e7d1e 	bne	r8,zero,63d0 <__alt_data_end+0xff0063d0>
    69dc:	01000c04 	movi	r4,48
    69e0:	00000106 	br	69e8 <_dtoa_r+0x11ec>
    69e4:	102f883a 	mov	r23,r2
    69e8:	b8bfffc4 	addi	r2,r23,-1
    69ec:	10c00007 	ldb	r3,0(r2)
    69f0:	193ffc26 	beq	r3,r4,69e4 <__alt_data_end+0xff0069e4>
    69f4:	003e8706 	br	6414 <__alt_data_end+0xff006414>
    69f8:	d8800517 	ldw	r2,20(sp)
    69fc:	00a3c83a 	sub	r17,zero,r2
    6a00:	8800a426 	beq	r17,zero,6c94 <_dtoa_r+0x1498>
    6a04:	888003cc 	andi	r2,r17,15
    6a08:	100490fa 	slli	r2,r2,3
    6a0c:	00c00074 	movhi	r3,1
    6a10:	18c58a04 	addi	r3,r3,5672
    6a14:	1885883a 	add	r2,r3,r2
    6a18:	11800017 	ldw	r6,0(r2)
    6a1c:	11c00117 	ldw	r7,4(r2)
    6a20:	9009883a 	mov	r4,r18
    6a24:	980b883a 	mov	r5,r19
    6a28:	8823d13a 	srai	r17,r17,4
    6a2c:	000d3a80 	call	d3a8 <__muldf3>
    6a30:	d8800f15 	stw	r2,60(sp)
    6a34:	d8c01015 	stw	r3,64(sp)
    6a38:	8800e826 	beq	r17,zero,6ddc <_dtoa_r+0x15e0>
    6a3c:	05000074 	movhi	r20,1
    6a40:	a5058004 	addi	r20,r20,5632
    6a44:	04000084 	movi	r16,2
    6a48:	8980004c 	andi	r6,r17,1
    6a4c:	1009883a 	mov	r4,r2
    6a50:	8823d07a 	srai	r17,r17,1
    6a54:	180b883a 	mov	r5,r3
    6a58:	30000426 	beq	r6,zero,6a6c <_dtoa_r+0x1270>
    6a5c:	a1800017 	ldw	r6,0(r20)
    6a60:	a1c00117 	ldw	r7,4(r20)
    6a64:	84000044 	addi	r16,r16,1
    6a68:	000d3a80 	call	d3a8 <__muldf3>
    6a6c:	a5000204 	addi	r20,r20,8
    6a70:	883ff51e 	bne	r17,zero,6a48 <__alt_data_end+0xff006a48>
    6a74:	d8800f15 	stw	r2,60(sp)
    6a78:	d8c01015 	stw	r3,64(sp)
    6a7c:	003c7606 	br	5c58 <__alt_data_end+0xff005c58>
    6a80:	00c00c04 	movi	r3,48
    6a84:	10c00005 	stb	r3,0(r2)
    6a88:	d8c00517 	ldw	r3,20(sp)
    6a8c:	bd3fffc3 	ldbu	r20,-1(r23)
    6a90:	18c00044 	addi	r3,r3,1
    6a94:	d8c00515 	stw	r3,20(sp)
    6a98:	003db906 	br	6180 <__alt_data_end+0xff006180>
    6a9c:	89400117 	ldw	r5,4(r17)
    6aa0:	e009883a 	mov	r4,fp
    6aa4:	000868c0 	call	868c <_Balloc>
    6aa8:	89800417 	ldw	r6,16(r17)
    6aac:	89400304 	addi	r5,r17,12
    6ab0:	11000304 	addi	r4,r2,12
    6ab4:	31800084 	addi	r6,r6,2
    6ab8:	318d883a 	add	r6,r6,r6
    6abc:	318d883a 	add	r6,r6,r6
    6ac0:	1027883a 	mov	r19,r2
    6ac4:	00082c00 	call	82c0 <memcpy>
    6ac8:	01800044 	movi	r6,1
    6acc:	980b883a 	mov	r5,r19
    6ad0:	e009883a 	mov	r4,fp
    6ad4:	0008e0c0 	call	8e0c <__lshift>
    6ad8:	1029883a 	mov	r20,r2
    6adc:	003ecc06 	br	6610 <__alt_data_end+0xff006610>
    6ae0:	00800e44 	movi	r2,57
    6ae4:	90809026 	beq	r18,r2,6d28 <_dtoa_r+0x152c>
    6ae8:	92000044 	addi	r8,r18,1
    6aec:	003f1f06 	br	676c <__alt_data_end+0xff00676c>
    6af0:	9011883a 	mov	r8,r18
    6af4:	8825883a 	mov	r18,r17
    6af8:	a023883a 	mov	r17,r20
    6afc:	003e2906 	br	63a4 <__alt_data_end+0xff0063a4>
    6b00:	002b883a 	mov	r21,zero
    6b04:	0023883a 	mov	r17,zero
    6b08:	003f5406 	br	685c <__alt_data_end+0xff00685c>
    6b0c:	61bfffc4 	addi	r6,r12,-1
    6b10:	300490fa 	slli	r2,r6,3
    6b14:	00c00074 	movhi	r3,1
    6b18:	18c58a04 	addi	r3,r3,5672
    6b1c:	1885883a 	add	r2,r3,r2
    6b20:	11000017 	ldw	r4,0(r2)
    6b24:	11400117 	ldw	r5,4(r2)
    6b28:	d8800717 	ldw	r2,28(sp)
    6b2c:	880f883a 	mov	r7,r17
    6b30:	d9801215 	stw	r6,72(sp)
    6b34:	800d883a 	mov	r6,r16
    6b38:	db001615 	stw	r12,88(sp)
    6b3c:	15c00044 	addi	r23,r2,1
    6b40:	000d3a80 	call	d3a8 <__muldf3>
    6b44:	d9401017 	ldw	r5,64(sp)
    6b48:	d9000f17 	ldw	r4,60(sp)
    6b4c:	d8c01515 	stw	r3,84(sp)
    6b50:	d8801415 	stw	r2,80(sp)
    6b54:	000e3bc0 	call	e3bc <__fixdfsi>
    6b58:	1009883a 	mov	r4,r2
    6b5c:	1021883a 	mov	r16,r2
    6b60:	000e43c0 	call	e43c <__floatsidf>
    6b64:	d9000f17 	ldw	r4,60(sp)
    6b68:	d9401017 	ldw	r5,64(sp)
    6b6c:	100d883a 	mov	r6,r2
    6b70:	180f883a 	mov	r7,r3
    6b74:	000dac00 	call	dac0 <__subdf3>
    6b78:	1829883a 	mov	r20,r3
    6b7c:	d8c00717 	ldw	r3,28(sp)
    6b80:	84000c04 	addi	r16,r16,48
    6b84:	1023883a 	mov	r17,r2
    6b88:	1c000005 	stb	r16,0(r3)
    6b8c:	db001617 	ldw	r12,88(sp)
    6b90:	00800044 	movi	r2,1
    6b94:	60802226 	beq	r12,r2,6c20 <_dtoa_r+0x1424>
    6b98:	d9c00717 	ldw	r7,28(sp)
    6b9c:	8805883a 	mov	r2,r17
    6ba0:	b82b883a 	mov	r21,r23
    6ba4:	3b19883a 	add	r12,r7,r12
    6ba8:	6023883a 	mov	r17,r12
    6bac:	a007883a 	mov	r3,r20
    6bb0:	dc800f15 	stw	r18,60(sp)
    6bb4:	000d883a 	mov	r6,zero
    6bb8:	01d00934 	movhi	r7,16420
    6bbc:	1009883a 	mov	r4,r2
    6bc0:	180b883a 	mov	r5,r3
    6bc4:	000d3a80 	call	d3a8 <__muldf3>
    6bc8:	180b883a 	mov	r5,r3
    6bcc:	1009883a 	mov	r4,r2
    6bd0:	1829883a 	mov	r20,r3
    6bd4:	1025883a 	mov	r18,r2
    6bd8:	000e3bc0 	call	e3bc <__fixdfsi>
    6bdc:	1009883a 	mov	r4,r2
    6be0:	1021883a 	mov	r16,r2
    6be4:	000e43c0 	call	e43c <__floatsidf>
    6be8:	100d883a 	mov	r6,r2
    6bec:	180f883a 	mov	r7,r3
    6bf0:	9009883a 	mov	r4,r18
    6bf4:	a00b883a 	mov	r5,r20
    6bf8:	84000c04 	addi	r16,r16,48
    6bfc:	000dac00 	call	dac0 <__subdf3>
    6c00:	ad400044 	addi	r21,r21,1
    6c04:	ac3fffc5 	stb	r16,-1(r21)
    6c08:	ac7fea1e 	bne	r21,r17,6bb4 <__alt_data_end+0xff006bb4>
    6c0c:	1023883a 	mov	r17,r2
    6c10:	d8801217 	ldw	r2,72(sp)
    6c14:	dc800f17 	ldw	r18,60(sp)
    6c18:	1829883a 	mov	r20,r3
    6c1c:	b8af883a 	add	r23,r23,r2
    6c20:	d9001417 	ldw	r4,80(sp)
    6c24:	d9401517 	ldw	r5,84(sp)
    6c28:	000d883a 	mov	r6,zero
    6c2c:	01cff834 	movhi	r7,16352
    6c30:	000c8a40 	call	c8a4 <__adddf3>
    6c34:	880d883a 	mov	r6,r17
    6c38:	a00f883a 	mov	r7,r20
    6c3c:	1009883a 	mov	r4,r2
    6c40:	180b883a 	mov	r5,r3
    6c44:	000d2b40 	call	d2b4 <__ledf2>
    6c48:	10003e0e 	bge	r2,zero,6d44 <_dtoa_r+0x1548>
    6c4c:	d9001317 	ldw	r4,76(sp)
    6c50:	bd3fffc3 	ldbu	r20,-1(r23)
    6c54:	d9000515 	stw	r4,20(sp)
    6c58:	003d3b06 	br	6148 <__alt_data_end+0xff006148>
    6c5c:	0027883a 	mov	r19,zero
    6c60:	003f1b06 	br	68d0 <__alt_data_end+0xff0068d0>
    6c64:	d8800817 	ldw	r2,32(sp)
    6c68:	11e9c83a 	sub	r20,r2,r7
    6c6c:	0005883a 	mov	r2,zero
    6c70:	003d5406 	br	61c4 <__alt_data_end+0xff0061c4>
    6c74:	00800044 	movi	r2,1
    6c78:	003dc706 	br	6398 <__alt_data_end+0xff006398>
    6c7c:	d8c00217 	ldw	r3,8(sp)
    6c80:	00800d84 	movi	r2,54
    6c84:	dd400a17 	ldw	r21,40(sp)
    6c88:	10c5c83a 	sub	r2,r2,r3
    6c8c:	dd000817 	ldw	r20,32(sp)
    6c90:	003d4c06 	br	61c4 <__alt_data_end+0xff0061c4>
    6c94:	dc800f15 	stw	r18,60(sp)
    6c98:	dcc01015 	stw	r19,64(sp)
    6c9c:	04000084 	movi	r16,2
    6ca0:	003bed06 	br	5c58 <__alt_data_end+0xff005c58>
    6ca4:	d9000617 	ldw	r4,24(sp)
    6ca8:	203f0d26 	beq	r4,zero,68e0 <__alt_data_end+0xff0068e0>
    6cac:	d9800c17 	ldw	r6,48(sp)
    6cb0:	01bcab0e 	bge	zero,r6,5f60 <__alt_data_end+0xff005f60>
    6cb4:	d9401017 	ldw	r5,64(sp)
    6cb8:	d9000f17 	ldw	r4,60(sp)
    6cbc:	000d883a 	mov	r6,zero
    6cc0:	01d00934 	movhi	r7,16420
    6cc4:	000d3a80 	call	d3a8 <__muldf3>
    6cc8:	81000044 	addi	r4,r16,1
    6ccc:	d8800f15 	stw	r2,60(sp)
    6cd0:	d8c01015 	stw	r3,64(sp)
    6cd4:	000e43c0 	call	e43c <__floatsidf>
    6cd8:	d9800f17 	ldw	r6,60(sp)
    6cdc:	d9c01017 	ldw	r7,64(sp)
    6ce0:	1009883a 	mov	r4,r2
    6ce4:	180b883a 	mov	r5,r3
    6ce8:	000d3a80 	call	d3a8 <__muldf3>
    6cec:	01d00734 	movhi	r7,16412
    6cf0:	000d883a 	mov	r6,zero
    6cf4:	1009883a 	mov	r4,r2
    6cf8:	180b883a 	mov	r5,r3
    6cfc:	000c8a40 	call	c8a4 <__adddf3>
    6d00:	d9c00517 	ldw	r7,20(sp)
    6d04:	047f3034 	movhi	r17,64704
    6d08:	1021883a 	mov	r16,r2
    6d0c:	39ffffc4 	addi	r7,r7,-1
    6d10:	d9c01315 	stw	r7,76(sp)
    6d14:	1c63883a 	add	r17,r3,r17
    6d18:	db000c17 	ldw	r12,48(sp)
    6d1c:	003bea06 	br	5cc8 <__alt_data_end+0xff005cc8>
    6d20:	dc000915 	stw	r16,36(sp)
    6d24:	003e0e06 	br	6560 <__alt_data_end+0xff006560>
    6d28:	01000e44 	movi	r4,57
    6d2c:	8825883a 	mov	r18,r17
    6d30:	9dc00044 	addi	r23,r19,1
    6d34:	99000005 	stb	r4,0(r19)
    6d38:	a023883a 	mov	r17,r20
    6d3c:	dc000915 	stw	r16,36(sp)
    6d40:	003da406 	br	63d4 <__alt_data_end+0xff0063d4>
    6d44:	d9801417 	ldw	r6,80(sp)
    6d48:	d9c01517 	ldw	r7,84(sp)
    6d4c:	0009883a 	mov	r4,zero
    6d50:	014ff834 	movhi	r5,16352
    6d54:	000dac00 	call	dac0 <__subdf3>
    6d58:	880d883a 	mov	r6,r17
    6d5c:	a00f883a 	mov	r7,r20
    6d60:	1009883a 	mov	r4,r2
    6d64:	180b883a 	mov	r5,r3
    6d68:	000d1d80 	call	d1d8 <__gedf2>
    6d6c:	00bc7c0e 	bge	zero,r2,5f60 <__alt_data_end+0xff005f60>
    6d70:	01000c04 	movi	r4,48
    6d74:	00000106 	br	6d7c <_dtoa_r+0x1580>
    6d78:	102f883a 	mov	r23,r2
    6d7c:	b8bfffc4 	addi	r2,r23,-1
    6d80:	10c00007 	ldb	r3,0(r2)
    6d84:	193ffc26 	beq	r3,r4,6d78 <__alt_data_end+0xff006d78>
    6d88:	d9801317 	ldw	r6,76(sp)
    6d8c:	d9800515 	stw	r6,20(sp)
    6d90:	003c4406 	br	5ea4 <__alt_data_end+0xff005ea4>
    6d94:	d9801317 	ldw	r6,76(sp)
    6d98:	d9800515 	stw	r6,20(sp)
    6d9c:	003cea06 	br	6148 <__alt_data_end+0xff006148>
    6da0:	dd800f17 	ldw	r22,60(sp)
    6da4:	dcc01017 	ldw	r19,64(sp)
    6da8:	dc801217 	ldw	r18,72(sp)
    6dac:	003c6c06 	br	5f60 <__alt_data_end+0xff005f60>
    6db0:	903e031e 	bne	r18,zero,65c0 <__alt_data_end+0xff0065c0>
    6db4:	003ebb06 	br	68a4 <__alt_data_end+0xff0068a4>
    6db8:	103e6c1e 	bne	r2,zero,676c <__alt_data_end+0xff00676c>
    6dbc:	4080004c 	andi	r2,r8,1
    6dc0:	103e6a26 	beq	r2,zero,676c <__alt_data_end+0xff00676c>
    6dc4:	003e6606 	br	6760 <__alt_data_end+0xff006760>
    6dc8:	d8c00317 	ldw	r3,12(sp)
    6dcc:	00800084 	movi	r2,2
    6dd0:	10c02916 	blt	r2,r3,6e78 <_dtoa_r+0x167c>
    6dd4:	d9000c17 	ldw	r4,48(sp)
    6dd8:	003e8806 	br	67fc <__alt_data_end+0xff0067fc>
    6ddc:	04000084 	movi	r16,2
    6de0:	003b9d06 	br	5c58 <__alt_data_end+0xff005c58>
    6de4:	d9001317 	ldw	r4,76(sp)
    6de8:	d9000515 	stw	r4,20(sp)
    6dec:	003cd606 	br	6148 <__alt_data_end+0xff006148>
    6df0:	d8801317 	ldw	r2,76(sp)
    6df4:	d8800515 	stw	r2,20(sp)
    6df8:	003c2a06 	br	5ea4 <__alt_data_end+0xff005ea4>
    6dfc:	d9800317 	ldw	r6,12(sp)
    6e00:	00800084 	movi	r2,2
    6e04:	11801516 	blt	r2,r6,6e5c <_dtoa_r+0x1660>
    6e08:	d9c00c17 	ldw	r7,48(sp)
    6e0c:	d9c00615 	stw	r7,24(sp)
    6e10:	003df706 	br	65f0 <__alt_data_end+0xff0065f0>
    6e14:	193d3926 	beq	r3,r4,62fc <__alt_data_end+0xff0062fc>
    6e18:	00c00f04 	movi	r3,60
    6e1c:	1885c83a 	sub	r2,r3,r2
    6e20:	003ddf06 	br	65a0 <__alt_data_end+0xff0065a0>
    6e24:	e009883a 	mov	r4,fp
    6e28:	e0001115 	stw	zero,68(fp)
    6e2c:	000b883a 	mov	r5,zero
    6e30:	000868c0 	call	868c <_Balloc>
    6e34:	d8800715 	stw	r2,28(sp)
    6e38:	d8c00717 	ldw	r3,28(sp)
    6e3c:	00bfffc4 	movi	r2,-1
    6e40:	01000044 	movi	r4,1
    6e44:	d8800c15 	stw	r2,48(sp)
    6e48:	e0c01015 	stw	r3,64(fp)
    6e4c:	d9000b15 	stw	r4,44(sp)
    6e50:	d8800615 	stw	r2,24(sp)
    6e54:	d8002215 	stw	zero,136(sp)
    6e58:	003c4106 	br	5f60 <__alt_data_end+0xff005f60>
    6e5c:	d8c00c17 	ldw	r3,48(sp)
    6e60:	d8c00615 	stw	r3,24(sp)
    6e64:	003e7006 	br	6828 <__alt_data_end+0xff006828>
    6e68:	04400044 	movi	r17,1
    6e6c:	003b2006 	br	5af0 <__alt_data_end+0xff005af0>
    6e70:	000b883a 	mov	r5,zero
    6e74:	003b3d06 	br	5b6c <__alt_data_end+0xff005b6c>
    6e78:	d8800c17 	ldw	r2,48(sp)
    6e7c:	d8800615 	stw	r2,24(sp)
    6e80:	003e6906 	br	6828 <__alt_data_end+0xff006828>

00006e84 <__sflush_r>:
    6e84:	2880030b 	ldhu	r2,12(r5)
    6e88:	defffb04 	addi	sp,sp,-20
    6e8c:	dcc00315 	stw	r19,12(sp)
    6e90:	dc400115 	stw	r17,4(sp)
    6e94:	dfc00415 	stw	ra,16(sp)
    6e98:	dc800215 	stw	r18,8(sp)
    6e9c:	dc000015 	stw	r16,0(sp)
    6ea0:	10c0020c 	andi	r3,r2,8
    6ea4:	2823883a 	mov	r17,r5
    6ea8:	2027883a 	mov	r19,r4
    6eac:	1800311e 	bne	r3,zero,6f74 <__sflush_r+0xf0>
    6eb0:	28c00117 	ldw	r3,4(r5)
    6eb4:	10820014 	ori	r2,r2,2048
    6eb8:	2880030d 	sth	r2,12(r5)
    6ebc:	00c04b0e 	bge	zero,r3,6fec <__sflush_r+0x168>
    6ec0:	8a000a17 	ldw	r8,40(r17)
    6ec4:	40002326 	beq	r8,zero,6f54 <__sflush_r+0xd0>
    6ec8:	9c000017 	ldw	r16,0(r19)
    6ecc:	10c4000c 	andi	r3,r2,4096
    6ed0:	98000015 	stw	zero,0(r19)
    6ed4:	18004826 	beq	r3,zero,6ff8 <__sflush_r+0x174>
    6ed8:	89801417 	ldw	r6,80(r17)
    6edc:	10c0010c 	andi	r3,r2,4
    6ee0:	18000626 	beq	r3,zero,6efc <__sflush_r+0x78>
    6ee4:	88c00117 	ldw	r3,4(r17)
    6ee8:	88800c17 	ldw	r2,48(r17)
    6eec:	30cdc83a 	sub	r6,r6,r3
    6ef0:	10000226 	beq	r2,zero,6efc <__sflush_r+0x78>
    6ef4:	88800f17 	ldw	r2,60(r17)
    6ef8:	308dc83a 	sub	r6,r6,r2
    6efc:	89400717 	ldw	r5,28(r17)
    6f00:	000f883a 	mov	r7,zero
    6f04:	9809883a 	mov	r4,r19
    6f08:	403ee83a 	callr	r8
    6f0c:	00ffffc4 	movi	r3,-1
    6f10:	10c04426 	beq	r2,r3,7024 <__sflush_r+0x1a0>
    6f14:	88c0030b 	ldhu	r3,12(r17)
    6f18:	89000417 	ldw	r4,16(r17)
    6f1c:	88000115 	stw	zero,4(r17)
    6f20:	197dffcc 	andi	r5,r3,63487
    6f24:	8940030d 	sth	r5,12(r17)
    6f28:	89000015 	stw	r4,0(r17)
    6f2c:	18c4000c 	andi	r3,r3,4096
    6f30:	18002c1e 	bne	r3,zero,6fe4 <__sflush_r+0x160>
    6f34:	89400c17 	ldw	r5,48(r17)
    6f38:	9c000015 	stw	r16,0(r19)
    6f3c:	28000526 	beq	r5,zero,6f54 <__sflush_r+0xd0>
    6f40:	88801004 	addi	r2,r17,64
    6f44:	28800226 	beq	r5,r2,6f50 <__sflush_r+0xcc>
    6f48:	9809883a 	mov	r4,r19
    6f4c:	00075f00 	call	75f0 <_free_r>
    6f50:	88000c15 	stw	zero,48(r17)
    6f54:	0005883a 	mov	r2,zero
    6f58:	dfc00417 	ldw	ra,16(sp)
    6f5c:	dcc00317 	ldw	r19,12(sp)
    6f60:	dc800217 	ldw	r18,8(sp)
    6f64:	dc400117 	ldw	r17,4(sp)
    6f68:	dc000017 	ldw	r16,0(sp)
    6f6c:	dec00504 	addi	sp,sp,20
    6f70:	f800283a 	ret
    6f74:	2c800417 	ldw	r18,16(r5)
    6f78:	903ff626 	beq	r18,zero,6f54 <__alt_data_end+0xff006f54>
    6f7c:	2c000017 	ldw	r16,0(r5)
    6f80:	108000cc 	andi	r2,r2,3
    6f84:	2c800015 	stw	r18,0(r5)
    6f88:	84a1c83a 	sub	r16,r16,r18
    6f8c:	1000131e 	bne	r2,zero,6fdc <__sflush_r+0x158>
    6f90:	28800517 	ldw	r2,20(r5)
    6f94:	88800215 	stw	r2,8(r17)
    6f98:	04000316 	blt	zero,r16,6fa8 <__sflush_r+0x124>
    6f9c:	003fed06 	br	6f54 <__alt_data_end+0xff006f54>
    6fa0:	90a5883a 	add	r18,r18,r2
    6fa4:	043feb0e 	bge	zero,r16,6f54 <__alt_data_end+0xff006f54>
    6fa8:	88800917 	ldw	r2,36(r17)
    6fac:	89400717 	ldw	r5,28(r17)
    6fb0:	800f883a 	mov	r7,r16
    6fb4:	900d883a 	mov	r6,r18
    6fb8:	9809883a 	mov	r4,r19
    6fbc:	103ee83a 	callr	r2
    6fc0:	80a1c83a 	sub	r16,r16,r2
    6fc4:	00bff616 	blt	zero,r2,6fa0 <__alt_data_end+0xff006fa0>
    6fc8:	88c0030b 	ldhu	r3,12(r17)
    6fcc:	00bfffc4 	movi	r2,-1
    6fd0:	18c01014 	ori	r3,r3,64
    6fd4:	88c0030d 	sth	r3,12(r17)
    6fd8:	003fdf06 	br	6f58 <__alt_data_end+0xff006f58>
    6fdc:	0005883a 	mov	r2,zero
    6fe0:	003fec06 	br	6f94 <__alt_data_end+0xff006f94>
    6fe4:	88801415 	stw	r2,80(r17)
    6fe8:	003fd206 	br	6f34 <__alt_data_end+0xff006f34>
    6fec:	28c00f17 	ldw	r3,60(r5)
    6ff0:	00ffb316 	blt	zero,r3,6ec0 <__alt_data_end+0xff006ec0>
    6ff4:	003fd706 	br	6f54 <__alt_data_end+0xff006f54>
    6ff8:	89400717 	ldw	r5,28(r17)
    6ffc:	000d883a 	mov	r6,zero
    7000:	01c00044 	movi	r7,1
    7004:	9809883a 	mov	r4,r19
    7008:	403ee83a 	callr	r8
    700c:	100d883a 	mov	r6,r2
    7010:	00bfffc4 	movi	r2,-1
    7014:	30801426 	beq	r6,r2,7068 <__sflush_r+0x1e4>
    7018:	8880030b 	ldhu	r2,12(r17)
    701c:	8a000a17 	ldw	r8,40(r17)
    7020:	003fae06 	br	6edc <__alt_data_end+0xff006edc>
    7024:	98c00017 	ldw	r3,0(r19)
    7028:	183fba26 	beq	r3,zero,6f14 <__alt_data_end+0xff006f14>
    702c:	01000744 	movi	r4,29
    7030:	19000626 	beq	r3,r4,704c <__sflush_r+0x1c8>
    7034:	01000584 	movi	r4,22
    7038:	19000426 	beq	r3,r4,704c <__sflush_r+0x1c8>
    703c:	88c0030b 	ldhu	r3,12(r17)
    7040:	18c01014 	ori	r3,r3,64
    7044:	88c0030d 	sth	r3,12(r17)
    7048:	003fc306 	br	6f58 <__alt_data_end+0xff006f58>
    704c:	8880030b 	ldhu	r2,12(r17)
    7050:	88c00417 	ldw	r3,16(r17)
    7054:	88000115 	stw	zero,4(r17)
    7058:	10bdffcc 	andi	r2,r2,63487
    705c:	8880030d 	sth	r2,12(r17)
    7060:	88c00015 	stw	r3,0(r17)
    7064:	003fb306 	br	6f34 <__alt_data_end+0xff006f34>
    7068:	98800017 	ldw	r2,0(r19)
    706c:	103fea26 	beq	r2,zero,7018 <__alt_data_end+0xff007018>
    7070:	00c00744 	movi	r3,29
    7074:	10c00226 	beq	r2,r3,7080 <__sflush_r+0x1fc>
    7078:	00c00584 	movi	r3,22
    707c:	10c0031e 	bne	r2,r3,708c <__sflush_r+0x208>
    7080:	9c000015 	stw	r16,0(r19)
    7084:	0005883a 	mov	r2,zero
    7088:	003fb306 	br	6f58 <__alt_data_end+0xff006f58>
    708c:	88c0030b 	ldhu	r3,12(r17)
    7090:	3005883a 	mov	r2,r6
    7094:	18c01014 	ori	r3,r3,64
    7098:	88c0030d 	sth	r3,12(r17)
    709c:	003fae06 	br	6f58 <__alt_data_end+0xff006f58>

000070a0 <_fflush_r>:
    70a0:	defffd04 	addi	sp,sp,-12
    70a4:	dc000115 	stw	r16,4(sp)
    70a8:	dfc00215 	stw	ra,8(sp)
    70ac:	2021883a 	mov	r16,r4
    70b0:	20000226 	beq	r4,zero,70bc <_fflush_r+0x1c>
    70b4:	20800e17 	ldw	r2,56(r4)
    70b8:	10000c26 	beq	r2,zero,70ec <_fflush_r+0x4c>
    70bc:	2880030f 	ldh	r2,12(r5)
    70c0:	1000051e 	bne	r2,zero,70d8 <_fflush_r+0x38>
    70c4:	0005883a 	mov	r2,zero
    70c8:	dfc00217 	ldw	ra,8(sp)
    70cc:	dc000117 	ldw	r16,4(sp)
    70d0:	dec00304 	addi	sp,sp,12
    70d4:	f800283a 	ret
    70d8:	8009883a 	mov	r4,r16
    70dc:	dfc00217 	ldw	ra,8(sp)
    70e0:	dc000117 	ldw	r16,4(sp)
    70e4:	dec00304 	addi	sp,sp,12
    70e8:	0006e841 	jmpi	6e84 <__sflush_r>
    70ec:	d9400015 	stw	r5,0(sp)
    70f0:	000747c0 	call	747c <__sinit>
    70f4:	d9400017 	ldw	r5,0(sp)
    70f8:	003ff006 	br	70bc <__alt_data_end+0xff0070bc>

000070fc <fflush>:
    70fc:	20000526 	beq	r4,zero,7114 <fflush+0x18>
    7100:	00800074 	movhi	r2,1
    7104:	108cbd04 	addi	r2,r2,13044
    7108:	200b883a 	mov	r5,r4
    710c:	11000017 	ldw	r4,0(r2)
    7110:	00070a01 	jmpi	70a0 <_fflush_r>
    7114:	00800074 	movhi	r2,1
    7118:	108cbc04 	addi	r2,r2,13040
    711c:	11000017 	ldw	r4,0(r2)
    7120:	01400034 	movhi	r5,0
    7124:	295c2804 	addi	r5,r5,28832
    7128:	0007e801 	jmpi	7e80 <_fwalk_reent>

0000712c <__fp_unlock>:
    712c:	0005883a 	mov	r2,zero
    7130:	f800283a 	ret

00007134 <_cleanup_r>:
    7134:	01400074 	movhi	r5,1
    7138:	296d8e04 	addi	r5,r5,-18888
    713c:	0007e801 	jmpi	7e80 <_fwalk_reent>

00007140 <__sinit.part.1>:
    7140:	defff704 	addi	sp,sp,-36
    7144:	00c00034 	movhi	r3,0
    7148:	dfc00815 	stw	ra,32(sp)
    714c:	ddc00715 	stw	r23,28(sp)
    7150:	dd800615 	stw	r22,24(sp)
    7154:	dd400515 	stw	r21,20(sp)
    7158:	dd000415 	stw	r20,16(sp)
    715c:	dcc00315 	stw	r19,12(sp)
    7160:	dc800215 	stw	r18,8(sp)
    7164:	dc400115 	stw	r17,4(sp)
    7168:	dc000015 	stw	r16,0(sp)
    716c:	18dc4d04 	addi	r3,r3,28980
    7170:	24000117 	ldw	r16,4(r4)
    7174:	20c00f15 	stw	r3,60(r4)
    7178:	2080bb04 	addi	r2,r4,748
    717c:	00c000c4 	movi	r3,3
    7180:	20c0b915 	stw	r3,740(r4)
    7184:	2080ba15 	stw	r2,744(r4)
    7188:	2000b815 	stw	zero,736(r4)
    718c:	05c00204 	movi	r23,8
    7190:	00800104 	movi	r2,4
    7194:	2025883a 	mov	r18,r4
    7198:	b80d883a 	mov	r6,r23
    719c:	81001704 	addi	r4,r16,92
    71a0:	000b883a 	mov	r5,zero
    71a4:	80000015 	stw	zero,0(r16)
    71a8:	80000115 	stw	zero,4(r16)
    71ac:	80000215 	stw	zero,8(r16)
    71b0:	8080030d 	sth	r2,12(r16)
    71b4:	80001915 	stw	zero,100(r16)
    71b8:	8000038d 	sth	zero,14(r16)
    71bc:	80000415 	stw	zero,16(r16)
    71c0:	80000515 	stw	zero,20(r16)
    71c4:	80000615 	stw	zero,24(r16)
    71c8:	00085640 	call	8564 <memset>
    71cc:	05800074 	movhi	r22,1
    71d0:	94400217 	ldw	r17,8(r18)
    71d4:	05400074 	movhi	r21,1
    71d8:	05000074 	movhi	r20,1
    71dc:	04c00074 	movhi	r19,1
    71e0:	b5a71804 	addi	r22,r22,-25504
    71e4:	ad672f04 	addi	r21,r21,-25412
    71e8:	a5274e04 	addi	r20,r20,-25288
    71ec:	9ce76504 	addi	r19,r19,-25196
    71f0:	85800815 	stw	r22,32(r16)
    71f4:	85400915 	stw	r21,36(r16)
    71f8:	85000a15 	stw	r20,40(r16)
    71fc:	84c00b15 	stw	r19,44(r16)
    7200:	84000715 	stw	r16,28(r16)
    7204:	00800284 	movi	r2,10
    7208:	8880030d 	sth	r2,12(r17)
    720c:	00800044 	movi	r2,1
    7210:	b80d883a 	mov	r6,r23
    7214:	89001704 	addi	r4,r17,92
    7218:	000b883a 	mov	r5,zero
    721c:	88000015 	stw	zero,0(r17)
    7220:	88000115 	stw	zero,4(r17)
    7224:	88000215 	stw	zero,8(r17)
    7228:	88001915 	stw	zero,100(r17)
    722c:	8880038d 	sth	r2,14(r17)
    7230:	88000415 	stw	zero,16(r17)
    7234:	88000515 	stw	zero,20(r17)
    7238:	88000615 	stw	zero,24(r17)
    723c:	00085640 	call	8564 <memset>
    7240:	94000317 	ldw	r16,12(r18)
    7244:	00800484 	movi	r2,18
    7248:	8c400715 	stw	r17,28(r17)
    724c:	8d800815 	stw	r22,32(r17)
    7250:	8d400915 	stw	r21,36(r17)
    7254:	8d000a15 	stw	r20,40(r17)
    7258:	8cc00b15 	stw	r19,44(r17)
    725c:	8080030d 	sth	r2,12(r16)
    7260:	00800084 	movi	r2,2
    7264:	80000015 	stw	zero,0(r16)
    7268:	80000115 	stw	zero,4(r16)
    726c:	80000215 	stw	zero,8(r16)
    7270:	80001915 	stw	zero,100(r16)
    7274:	8080038d 	sth	r2,14(r16)
    7278:	80000415 	stw	zero,16(r16)
    727c:	80000515 	stw	zero,20(r16)
    7280:	80000615 	stw	zero,24(r16)
    7284:	b80d883a 	mov	r6,r23
    7288:	000b883a 	mov	r5,zero
    728c:	81001704 	addi	r4,r16,92
    7290:	00085640 	call	8564 <memset>
    7294:	00800044 	movi	r2,1
    7298:	84000715 	stw	r16,28(r16)
    729c:	85800815 	stw	r22,32(r16)
    72a0:	85400915 	stw	r21,36(r16)
    72a4:	85000a15 	stw	r20,40(r16)
    72a8:	84c00b15 	stw	r19,44(r16)
    72ac:	90800e15 	stw	r2,56(r18)
    72b0:	dfc00817 	ldw	ra,32(sp)
    72b4:	ddc00717 	ldw	r23,28(sp)
    72b8:	dd800617 	ldw	r22,24(sp)
    72bc:	dd400517 	ldw	r21,20(sp)
    72c0:	dd000417 	ldw	r20,16(sp)
    72c4:	dcc00317 	ldw	r19,12(sp)
    72c8:	dc800217 	ldw	r18,8(sp)
    72cc:	dc400117 	ldw	r17,4(sp)
    72d0:	dc000017 	ldw	r16,0(sp)
    72d4:	dec00904 	addi	sp,sp,36
    72d8:	f800283a 	ret

000072dc <__fp_lock>:
    72dc:	0005883a 	mov	r2,zero
    72e0:	f800283a 	ret

000072e4 <__sfmoreglue>:
    72e4:	defffc04 	addi	sp,sp,-16
    72e8:	dc400115 	stw	r17,4(sp)
    72ec:	2c7fffc4 	addi	r17,r5,-1
    72f0:	8c401a24 	muli	r17,r17,104
    72f4:	dc800215 	stw	r18,8(sp)
    72f8:	2825883a 	mov	r18,r5
    72fc:	89401d04 	addi	r5,r17,116
    7300:	dc000015 	stw	r16,0(sp)
    7304:	dfc00315 	stw	ra,12(sp)
    7308:	00027a00 	call	27a0 <_malloc_r>
    730c:	1021883a 	mov	r16,r2
    7310:	10000726 	beq	r2,zero,7330 <__sfmoreglue+0x4c>
    7314:	11000304 	addi	r4,r2,12
    7318:	10000015 	stw	zero,0(r2)
    731c:	14800115 	stw	r18,4(r2)
    7320:	11000215 	stw	r4,8(r2)
    7324:	89801a04 	addi	r6,r17,104
    7328:	000b883a 	mov	r5,zero
    732c:	00085640 	call	8564 <memset>
    7330:	8005883a 	mov	r2,r16
    7334:	dfc00317 	ldw	ra,12(sp)
    7338:	dc800217 	ldw	r18,8(sp)
    733c:	dc400117 	ldw	r17,4(sp)
    7340:	dc000017 	ldw	r16,0(sp)
    7344:	dec00404 	addi	sp,sp,16
    7348:	f800283a 	ret

0000734c <__sfp>:
    734c:	defffb04 	addi	sp,sp,-20
    7350:	dc000015 	stw	r16,0(sp)
    7354:	04000074 	movhi	r16,1
    7358:	840cbc04 	addi	r16,r16,13040
    735c:	dcc00315 	stw	r19,12(sp)
    7360:	2027883a 	mov	r19,r4
    7364:	81000017 	ldw	r4,0(r16)
    7368:	dfc00415 	stw	ra,16(sp)
    736c:	dc800215 	stw	r18,8(sp)
    7370:	20800e17 	ldw	r2,56(r4)
    7374:	dc400115 	stw	r17,4(sp)
    7378:	1000021e 	bne	r2,zero,7384 <__sfp+0x38>
    737c:	00071400 	call	7140 <__sinit.part.1>
    7380:	81000017 	ldw	r4,0(r16)
    7384:	2480b804 	addi	r18,r4,736
    7388:	047fffc4 	movi	r17,-1
    738c:	91000117 	ldw	r4,4(r18)
    7390:	94000217 	ldw	r16,8(r18)
    7394:	213fffc4 	addi	r4,r4,-1
    7398:	20000a16 	blt	r4,zero,73c4 <__sfp+0x78>
    739c:	8080030f 	ldh	r2,12(r16)
    73a0:	10000c26 	beq	r2,zero,73d4 <__sfp+0x88>
    73a4:	80c01d04 	addi	r3,r16,116
    73a8:	00000206 	br	73b4 <__sfp+0x68>
    73ac:	18bfe60f 	ldh	r2,-104(r3)
    73b0:	10000826 	beq	r2,zero,73d4 <__sfp+0x88>
    73b4:	213fffc4 	addi	r4,r4,-1
    73b8:	1c3ffd04 	addi	r16,r3,-12
    73bc:	18c01a04 	addi	r3,r3,104
    73c0:	247ffa1e 	bne	r4,r17,73ac <__alt_data_end+0xff0073ac>
    73c4:	90800017 	ldw	r2,0(r18)
    73c8:	10001d26 	beq	r2,zero,7440 <__sfp+0xf4>
    73cc:	1025883a 	mov	r18,r2
    73d0:	003fee06 	br	738c <__alt_data_end+0xff00738c>
    73d4:	00bfffc4 	movi	r2,-1
    73d8:	8080038d 	sth	r2,14(r16)
    73dc:	00800044 	movi	r2,1
    73e0:	8080030d 	sth	r2,12(r16)
    73e4:	80001915 	stw	zero,100(r16)
    73e8:	80000015 	stw	zero,0(r16)
    73ec:	80000215 	stw	zero,8(r16)
    73f0:	80000115 	stw	zero,4(r16)
    73f4:	80000415 	stw	zero,16(r16)
    73f8:	80000515 	stw	zero,20(r16)
    73fc:	80000615 	stw	zero,24(r16)
    7400:	01800204 	movi	r6,8
    7404:	000b883a 	mov	r5,zero
    7408:	81001704 	addi	r4,r16,92
    740c:	00085640 	call	8564 <memset>
    7410:	8005883a 	mov	r2,r16
    7414:	80000c15 	stw	zero,48(r16)
    7418:	80000d15 	stw	zero,52(r16)
    741c:	80001115 	stw	zero,68(r16)
    7420:	80001215 	stw	zero,72(r16)
    7424:	dfc00417 	ldw	ra,16(sp)
    7428:	dcc00317 	ldw	r19,12(sp)
    742c:	dc800217 	ldw	r18,8(sp)
    7430:	dc400117 	ldw	r17,4(sp)
    7434:	dc000017 	ldw	r16,0(sp)
    7438:	dec00504 	addi	sp,sp,20
    743c:	f800283a 	ret
    7440:	01400104 	movi	r5,4
    7444:	9809883a 	mov	r4,r19
    7448:	00072e40 	call	72e4 <__sfmoreglue>
    744c:	90800015 	stw	r2,0(r18)
    7450:	103fde1e 	bne	r2,zero,73cc <__alt_data_end+0xff0073cc>
    7454:	00800304 	movi	r2,12
    7458:	98800015 	stw	r2,0(r19)
    745c:	0005883a 	mov	r2,zero
    7460:	003ff006 	br	7424 <__alt_data_end+0xff007424>

00007464 <_cleanup>:
    7464:	00800074 	movhi	r2,1
    7468:	108cbc04 	addi	r2,r2,13040
    746c:	11000017 	ldw	r4,0(r2)
    7470:	01400074 	movhi	r5,1
    7474:	296d8e04 	addi	r5,r5,-18888
    7478:	0007e801 	jmpi	7e80 <_fwalk_reent>

0000747c <__sinit>:
    747c:	20800e17 	ldw	r2,56(r4)
    7480:	10000126 	beq	r2,zero,7488 <__sinit+0xc>
    7484:	f800283a 	ret
    7488:	00071401 	jmpi	7140 <__sinit.part.1>

0000748c <__sfp_lock_acquire>:
    748c:	f800283a 	ret

00007490 <__sfp_lock_release>:
    7490:	f800283a 	ret

00007494 <__sinit_lock_acquire>:
    7494:	f800283a 	ret

00007498 <__sinit_lock_release>:
    7498:	f800283a 	ret

0000749c <__fp_lock_all>:
    749c:	00800074 	movhi	r2,1
    74a0:	108cbd04 	addi	r2,r2,13044
    74a4:	11000017 	ldw	r4,0(r2)
    74a8:	01400034 	movhi	r5,0
    74ac:	295cb704 	addi	r5,r5,29404
    74b0:	0007dbc1 	jmpi	7dbc <_fwalk>

000074b4 <__fp_unlock_all>:
    74b4:	00800074 	movhi	r2,1
    74b8:	108cbd04 	addi	r2,r2,13044
    74bc:	11000017 	ldw	r4,0(r2)
    74c0:	01400034 	movhi	r5,0
    74c4:	295c4b04 	addi	r5,r5,28972
    74c8:	0007dbc1 	jmpi	7dbc <_fwalk>

000074cc <_malloc_trim_r>:
    74cc:	defffb04 	addi	sp,sp,-20
    74d0:	dcc00315 	stw	r19,12(sp)
    74d4:	04c00074 	movhi	r19,1
    74d8:	dc800215 	stw	r18,8(sp)
    74dc:	dc400115 	stw	r17,4(sp)
    74e0:	dc000015 	stw	r16,0(sp)
    74e4:	dfc00415 	stw	ra,16(sp)
    74e8:	2821883a 	mov	r16,r5
    74ec:	9cc60f04 	addi	r19,r19,6204
    74f0:	2025883a 	mov	r18,r4
    74f4:	000ea940 	call	ea94 <__malloc_lock>
    74f8:	98800217 	ldw	r2,8(r19)
    74fc:	14400117 	ldw	r17,4(r2)
    7500:	00bfff04 	movi	r2,-4
    7504:	88a2703a 	and	r17,r17,r2
    7508:	8c21c83a 	sub	r16,r17,r16
    750c:	8403fbc4 	addi	r16,r16,4079
    7510:	8020d33a 	srli	r16,r16,12
    7514:	0083ffc4 	movi	r2,4095
    7518:	843fffc4 	addi	r16,r16,-1
    751c:	8020933a 	slli	r16,r16,12
    7520:	1400060e 	bge	r2,r16,753c <_malloc_trim_r+0x70>
    7524:	000b883a 	mov	r5,zero
    7528:	9009883a 	mov	r4,r18
    752c:	00030ec0 	call	30ec <_sbrk_r>
    7530:	98c00217 	ldw	r3,8(r19)
    7534:	1c47883a 	add	r3,r3,r17
    7538:	10c00a26 	beq	r2,r3,7564 <_malloc_trim_r+0x98>
    753c:	9009883a 	mov	r4,r18
    7540:	000eab80 	call	eab8 <__malloc_unlock>
    7544:	0005883a 	mov	r2,zero
    7548:	dfc00417 	ldw	ra,16(sp)
    754c:	dcc00317 	ldw	r19,12(sp)
    7550:	dc800217 	ldw	r18,8(sp)
    7554:	dc400117 	ldw	r17,4(sp)
    7558:	dc000017 	ldw	r16,0(sp)
    755c:	dec00504 	addi	sp,sp,20
    7560:	f800283a 	ret
    7564:	040bc83a 	sub	r5,zero,r16
    7568:	9009883a 	mov	r4,r18
    756c:	00030ec0 	call	30ec <_sbrk_r>
    7570:	00ffffc4 	movi	r3,-1
    7574:	10c00d26 	beq	r2,r3,75ac <_malloc_trim_r+0xe0>
    7578:	00c00074 	movhi	r3,1
    757c:	18d3e704 	addi	r3,r3,20380
    7580:	18800017 	ldw	r2,0(r3)
    7584:	99000217 	ldw	r4,8(r19)
    7588:	8c23c83a 	sub	r17,r17,r16
    758c:	8c400054 	ori	r17,r17,1
    7590:	1421c83a 	sub	r16,r2,r16
    7594:	24400115 	stw	r17,4(r4)
    7598:	9009883a 	mov	r4,r18
    759c:	1c000015 	stw	r16,0(r3)
    75a0:	000eab80 	call	eab8 <__malloc_unlock>
    75a4:	00800044 	movi	r2,1
    75a8:	003fe706 	br	7548 <__alt_data_end+0xff007548>
    75ac:	000b883a 	mov	r5,zero
    75b0:	9009883a 	mov	r4,r18
    75b4:	00030ec0 	call	30ec <_sbrk_r>
    75b8:	99000217 	ldw	r4,8(r19)
    75bc:	014003c4 	movi	r5,15
    75c0:	1107c83a 	sub	r3,r2,r4
    75c4:	28ffdd0e 	bge	r5,r3,753c <__alt_data_end+0xff00753c>
    75c8:	01400074 	movhi	r5,1
    75cc:	294cba04 	addi	r5,r5,13032
    75d0:	29400017 	ldw	r5,0(r5)
    75d4:	18c00054 	ori	r3,r3,1
    75d8:	20c00115 	stw	r3,4(r4)
    75dc:	00c00074 	movhi	r3,1
    75e0:	1145c83a 	sub	r2,r2,r5
    75e4:	18d3e704 	addi	r3,r3,20380
    75e8:	18800015 	stw	r2,0(r3)
    75ec:	003fd306 	br	753c <__alt_data_end+0xff00753c>

000075f0 <_free_r>:
    75f0:	28004126 	beq	r5,zero,76f8 <_free_r+0x108>
    75f4:	defffd04 	addi	sp,sp,-12
    75f8:	dc400115 	stw	r17,4(sp)
    75fc:	dc000015 	stw	r16,0(sp)
    7600:	2023883a 	mov	r17,r4
    7604:	2821883a 	mov	r16,r5
    7608:	dfc00215 	stw	ra,8(sp)
    760c:	000ea940 	call	ea94 <__malloc_lock>
    7610:	81ffff17 	ldw	r7,-4(r16)
    7614:	00bfff84 	movi	r2,-2
    7618:	01000074 	movhi	r4,1
    761c:	81bffe04 	addi	r6,r16,-8
    7620:	3884703a 	and	r2,r7,r2
    7624:	21060f04 	addi	r4,r4,6204
    7628:	308b883a 	add	r5,r6,r2
    762c:	2a400117 	ldw	r9,4(r5)
    7630:	22000217 	ldw	r8,8(r4)
    7634:	00ffff04 	movi	r3,-4
    7638:	48c6703a 	and	r3,r9,r3
    763c:	2a005726 	beq	r5,r8,779c <_free_r+0x1ac>
    7640:	28c00115 	stw	r3,4(r5)
    7644:	39c0004c 	andi	r7,r7,1
    7648:	3800091e 	bne	r7,zero,7670 <_free_r+0x80>
    764c:	823ffe17 	ldw	r8,-8(r16)
    7650:	22400204 	addi	r9,r4,8
    7654:	320dc83a 	sub	r6,r6,r8
    7658:	31c00217 	ldw	r7,8(r6)
    765c:	1205883a 	add	r2,r2,r8
    7660:	3a406526 	beq	r7,r9,77f8 <_free_r+0x208>
    7664:	32000317 	ldw	r8,12(r6)
    7668:	3a000315 	stw	r8,12(r7)
    766c:	41c00215 	stw	r7,8(r8)
    7670:	28cf883a 	add	r7,r5,r3
    7674:	39c00117 	ldw	r7,4(r7)
    7678:	39c0004c 	andi	r7,r7,1
    767c:	38003a26 	beq	r7,zero,7768 <_free_r+0x178>
    7680:	10c00054 	ori	r3,r2,1
    7684:	30c00115 	stw	r3,4(r6)
    7688:	3087883a 	add	r3,r6,r2
    768c:	18800015 	stw	r2,0(r3)
    7690:	00c07fc4 	movi	r3,511
    7694:	18801936 	bltu	r3,r2,76fc <_free_r+0x10c>
    7698:	1004d0fa 	srli	r2,r2,3
    769c:	01c00044 	movi	r7,1
    76a0:	21400117 	ldw	r5,4(r4)
    76a4:	10c00044 	addi	r3,r2,1
    76a8:	18c7883a 	add	r3,r3,r3
    76ac:	1005d0ba 	srai	r2,r2,2
    76b0:	18c7883a 	add	r3,r3,r3
    76b4:	18c7883a 	add	r3,r3,r3
    76b8:	1907883a 	add	r3,r3,r4
    76bc:	3884983a 	sll	r2,r7,r2
    76c0:	19c00017 	ldw	r7,0(r3)
    76c4:	1a3ffe04 	addi	r8,r3,-8
    76c8:	1144b03a 	or	r2,r2,r5
    76cc:	32000315 	stw	r8,12(r6)
    76d0:	31c00215 	stw	r7,8(r6)
    76d4:	20800115 	stw	r2,4(r4)
    76d8:	19800015 	stw	r6,0(r3)
    76dc:	39800315 	stw	r6,12(r7)
    76e0:	8809883a 	mov	r4,r17
    76e4:	dfc00217 	ldw	ra,8(sp)
    76e8:	dc400117 	ldw	r17,4(sp)
    76ec:	dc000017 	ldw	r16,0(sp)
    76f0:	dec00304 	addi	sp,sp,12
    76f4:	000eab81 	jmpi	eab8 <__malloc_unlock>
    76f8:	f800283a 	ret
    76fc:	100ad27a 	srli	r5,r2,9
    7700:	00c00104 	movi	r3,4
    7704:	19404a36 	bltu	r3,r5,7830 <_free_r+0x240>
    7708:	100ad1ba 	srli	r5,r2,6
    770c:	28c00e44 	addi	r3,r5,57
    7710:	18c7883a 	add	r3,r3,r3
    7714:	29400e04 	addi	r5,r5,56
    7718:	18c7883a 	add	r3,r3,r3
    771c:	18c7883a 	add	r3,r3,r3
    7720:	1909883a 	add	r4,r3,r4
    7724:	20c00017 	ldw	r3,0(r4)
    7728:	01c00074 	movhi	r7,1
    772c:	213ffe04 	addi	r4,r4,-8
    7730:	39c60f04 	addi	r7,r7,6204
    7734:	20c04426 	beq	r4,r3,7848 <_free_r+0x258>
    7738:	01ffff04 	movi	r7,-4
    773c:	19400117 	ldw	r5,4(r3)
    7740:	29ca703a 	and	r5,r5,r7
    7744:	1140022e 	bgeu	r2,r5,7750 <_free_r+0x160>
    7748:	18c00217 	ldw	r3,8(r3)
    774c:	20fffb1e 	bne	r4,r3,773c <__alt_data_end+0xff00773c>
    7750:	19000317 	ldw	r4,12(r3)
    7754:	31000315 	stw	r4,12(r6)
    7758:	30c00215 	stw	r3,8(r6)
    775c:	21800215 	stw	r6,8(r4)
    7760:	19800315 	stw	r6,12(r3)
    7764:	003fde06 	br	76e0 <__alt_data_end+0xff0076e0>
    7768:	29c00217 	ldw	r7,8(r5)
    776c:	10c5883a 	add	r2,r2,r3
    7770:	00c00074 	movhi	r3,1
    7774:	18c61104 	addi	r3,r3,6212
    7778:	38c03b26 	beq	r7,r3,7868 <_free_r+0x278>
    777c:	2a000317 	ldw	r8,12(r5)
    7780:	11400054 	ori	r5,r2,1
    7784:	3087883a 	add	r3,r6,r2
    7788:	3a000315 	stw	r8,12(r7)
    778c:	41c00215 	stw	r7,8(r8)
    7790:	31400115 	stw	r5,4(r6)
    7794:	18800015 	stw	r2,0(r3)
    7798:	003fbd06 	br	7690 <__alt_data_end+0xff007690>
    779c:	39c0004c 	andi	r7,r7,1
    77a0:	10c5883a 	add	r2,r2,r3
    77a4:	3800071e 	bne	r7,zero,77c4 <_free_r+0x1d4>
    77a8:	81fffe17 	ldw	r7,-8(r16)
    77ac:	31cdc83a 	sub	r6,r6,r7
    77b0:	30c00317 	ldw	r3,12(r6)
    77b4:	31400217 	ldw	r5,8(r6)
    77b8:	11c5883a 	add	r2,r2,r7
    77bc:	28c00315 	stw	r3,12(r5)
    77c0:	19400215 	stw	r5,8(r3)
    77c4:	10c00054 	ori	r3,r2,1
    77c8:	30c00115 	stw	r3,4(r6)
    77cc:	00c00074 	movhi	r3,1
    77d0:	18ccbb04 	addi	r3,r3,13036
    77d4:	18c00017 	ldw	r3,0(r3)
    77d8:	21800215 	stw	r6,8(r4)
    77dc:	10ffc036 	bltu	r2,r3,76e0 <__alt_data_end+0xff0076e0>
    77e0:	00800074 	movhi	r2,1
    77e4:	1093d904 	addi	r2,r2,20324
    77e8:	11400017 	ldw	r5,0(r2)
    77ec:	8809883a 	mov	r4,r17
    77f0:	00074cc0 	call	74cc <_malloc_trim_r>
    77f4:	003fba06 	br	76e0 <__alt_data_end+0xff0076e0>
    77f8:	28c9883a 	add	r4,r5,r3
    77fc:	21000117 	ldw	r4,4(r4)
    7800:	2100004c 	andi	r4,r4,1
    7804:	2000391e 	bne	r4,zero,78ec <_free_r+0x2fc>
    7808:	29c00217 	ldw	r7,8(r5)
    780c:	29000317 	ldw	r4,12(r5)
    7810:	1885883a 	add	r2,r3,r2
    7814:	10c00054 	ori	r3,r2,1
    7818:	39000315 	stw	r4,12(r7)
    781c:	21c00215 	stw	r7,8(r4)
    7820:	30c00115 	stw	r3,4(r6)
    7824:	308d883a 	add	r6,r6,r2
    7828:	30800015 	stw	r2,0(r6)
    782c:	003fac06 	br	76e0 <__alt_data_end+0xff0076e0>
    7830:	00c00504 	movi	r3,20
    7834:	19401536 	bltu	r3,r5,788c <_free_r+0x29c>
    7838:	28c01704 	addi	r3,r5,92
    783c:	18c7883a 	add	r3,r3,r3
    7840:	294016c4 	addi	r5,r5,91
    7844:	003fb406 	br	7718 <__alt_data_end+0xff007718>
    7848:	280bd0ba 	srai	r5,r5,2
    784c:	00c00044 	movi	r3,1
    7850:	38800117 	ldw	r2,4(r7)
    7854:	194a983a 	sll	r5,r3,r5
    7858:	2007883a 	mov	r3,r4
    785c:	2884b03a 	or	r2,r5,r2
    7860:	38800115 	stw	r2,4(r7)
    7864:	003fbb06 	br	7754 <__alt_data_end+0xff007754>
    7868:	21800515 	stw	r6,20(r4)
    786c:	21800415 	stw	r6,16(r4)
    7870:	10c00054 	ori	r3,r2,1
    7874:	31c00315 	stw	r7,12(r6)
    7878:	31c00215 	stw	r7,8(r6)
    787c:	30c00115 	stw	r3,4(r6)
    7880:	308d883a 	add	r6,r6,r2
    7884:	30800015 	stw	r2,0(r6)
    7888:	003f9506 	br	76e0 <__alt_data_end+0xff0076e0>
    788c:	00c01504 	movi	r3,84
    7890:	19400536 	bltu	r3,r5,78a8 <_free_r+0x2b8>
    7894:	100ad33a 	srli	r5,r2,12
    7898:	28c01bc4 	addi	r3,r5,111
    789c:	18c7883a 	add	r3,r3,r3
    78a0:	29401b84 	addi	r5,r5,110
    78a4:	003f9c06 	br	7718 <__alt_data_end+0xff007718>
    78a8:	00c05504 	movi	r3,340
    78ac:	19400536 	bltu	r3,r5,78c4 <_free_r+0x2d4>
    78b0:	100ad3fa 	srli	r5,r2,15
    78b4:	28c01e04 	addi	r3,r5,120
    78b8:	18c7883a 	add	r3,r3,r3
    78bc:	29401dc4 	addi	r5,r5,119
    78c0:	003f9506 	br	7718 <__alt_data_end+0xff007718>
    78c4:	00c15504 	movi	r3,1364
    78c8:	19400536 	bltu	r3,r5,78e0 <_free_r+0x2f0>
    78cc:	100ad4ba 	srli	r5,r2,18
    78d0:	28c01f44 	addi	r3,r5,125
    78d4:	18c7883a 	add	r3,r3,r3
    78d8:	29401f04 	addi	r5,r5,124
    78dc:	003f8e06 	br	7718 <__alt_data_end+0xff007718>
    78e0:	00c03f84 	movi	r3,254
    78e4:	01401f84 	movi	r5,126
    78e8:	003f8b06 	br	7718 <__alt_data_end+0xff007718>
    78ec:	10c00054 	ori	r3,r2,1
    78f0:	30c00115 	stw	r3,4(r6)
    78f4:	308d883a 	add	r6,r6,r2
    78f8:	30800015 	stw	r2,0(r6)
    78fc:	003f7806 	br	76e0 <__alt_data_end+0xff0076e0>

00007900 <__sfvwrite_r>:
    7900:	30800217 	ldw	r2,8(r6)
    7904:	10006726 	beq	r2,zero,7aa4 <__sfvwrite_r+0x1a4>
    7908:	28c0030b 	ldhu	r3,12(r5)
    790c:	defff404 	addi	sp,sp,-48
    7910:	dd400715 	stw	r21,28(sp)
    7914:	dd000615 	stw	r20,24(sp)
    7918:	dc000215 	stw	r16,8(sp)
    791c:	dfc00b15 	stw	ra,44(sp)
    7920:	df000a15 	stw	fp,40(sp)
    7924:	ddc00915 	stw	r23,36(sp)
    7928:	dd800815 	stw	r22,32(sp)
    792c:	dcc00515 	stw	r19,20(sp)
    7930:	dc800415 	stw	r18,16(sp)
    7934:	dc400315 	stw	r17,12(sp)
    7938:	1880020c 	andi	r2,r3,8
    793c:	2821883a 	mov	r16,r5
    7940:	202b883a 	mov	r21,r4
    7944:	3029883a 	mov	r20,r6
    7948:	10002726 	beq	r2,zero,79e8 <__sfvwrite_r+0xe8>
    794c:	28800417 	ldw	r2,16(r5)
    7950:	10002526 	beq	r2,zero,79e8 <__sfvwrite_r+0xe8>
    7954:	1880008c 	andi	r2,r3,2
    7958:	a4400017 	ldw	r17,0(r20)
    795c:	10002a26 	beq	r2,zero,7a08 <__sfvwrite_r+0x108>
    7960:	05a00034 	movhi	r22,32768
    7964:	0027883a 	mov	r19,zero
    7968:	0025883a 	mov	r18,zero
    796c:	b5bf0004 	addi	r22,r22,-1024
    7970:	980d883a 	mov	r6,r19
    7974:	a809883a 	mov	r4,r21
    7978:	90004626 	beq	r18,zero,7a94 <__sfvwrite_r+0x194>
    797c:	900f883a 	mov	r7,r18
    7980:	b480022e 	bgeu	r22,r18,798c <__sfvwrite_r+0x8c>
    7984:	01e00034 	movhi	r7,32768
    7988:	39ff0004 	addi	r7,r7,-1024
    798c:	80800917 	ldw	r2,36(r16)
    7990:	81400717 	ldw	r5,28(r16)
    7994:	103ee83a 	callr	r2
    7998:	0080570e 	bge	zero,r2,7af8 <__sfvwrite_r+0x1f8>
    799c:	a0c00217 	ldw	r3,8(r20)
    79a0:	98a7883a 	add	r19,r19,r2
    79a4:	90a5c83a 	sub	r18,r18,r2
    79a8:	1885c83a 	sub	r2,r3,r2
    79ac:	a0800215 	stw	r2,8(r20)
    79b0:	103fef1e 	bne	r2,zero,7970 <__alt_data_end+0xff007970>
    79b4:	0005883a 	mov	r2,zero
    79b8:	dfc00b17 	ldw	ra,44(sp)
    79bc:	df000a17 	ldw	fp,40(sp)
    79c0:	ddc00917 	ldw	r23,36(sp)
    79c4:	dd800817 	ldw	r22,32(sp)
    79c8:	dd400717 	ldw	r21,28(sp)
    79cc:	dd000617 	ldw	r20,24(sp)
    79d0:	dcc00517 	ldw	r19,20(sp)
    79d4:	dc800417 	ldw	r18,16(sp)
    79d8:	dc400317 	ldw	r17,12(sp)
    79dc:	dc000217 	ldw	r16,8(sp)
    79e0:	dec00c04 	addi	sp,sp,48
    79e4:	f800283a 	ret
    79e8:	800b883a 	mov	r5,r16
    79ec:	a809883a 	mov	r4,r21
    79f0:	00054a80 	call	54a8 <__swsetup_r>
    79f4:	1000eb1e 	bne	r2,zero,7da4 <__sfvwrite_r+0x4a4>
    79f8:	80c0030b 	ldhu	r3,12(r16)
    79fc:	a4400017 	ldw	r17,0(r20)
    7a00:	1880008c 	andi	r2,r3,2
    7a04:	103fd61e 	bne	r2,zero,7960 <__alt_data_end+0xff007960>
    7a08:	1880004c 	andi	r2,r3,1
    7a0c:	10003f1e 	bne	r2,zero,7b0c <__sfvwrite_r+0x20c>
    7a10:	0039883a 	mov	fp,zero
    7a14:	0025883a 	mov	r18,zero
    7a18:	90001a26 	beq	r18,zero,7a84 <__sfvwrite_r+0x184>
    7a1c:	1880800c 	andi	r2,r3,512
    7a20:	84c00217 	ldw	r19,8(r16)
    7a24:	10002126 	beq	r2,zero,7aac <__sfvwrite_r+0x1ac>
    7a28:	982f883a 	mov	r23,r19
    7a2c:	94c09336 	bltu	r18,r19,7c7c <__sfvwrite_r+0x37c>
    7a30:	1881200c 	andi	r2,r3,1152
    7a34:	10009e1e 	bne	r2,zero,7cb0 <__sfvwrite_r+0x3b0>
    7a38:	81000017 	ldw	r4,0(r16)
    7a3c:	b80d883a 	mov	r6,r23
    7a40:	e00b883a 	mov	r5,fp
    7a44:	00084080 	call	8408 <memmove>
    7a48:	80c00217 	ldw	r3,8(r16)
    7a4c:	81000017 	ldw	r4,0(r16)
    7a50:	9005883a 	mov	r2,r18
    7a54:	1ce7c83a 	sub	r19,r3,r19
    7a58:	25cf883a 	add	r7,r4,r23
    7a5c:	84c00215 	stw	r19,8(r16)
    7a60:	81c00015 	stw	r7,0(r16)
    7a64:	a0c00217 	ldw	r3,8(r20)
    7a68:	e0b9883a 	add	fp,fp,r2
    7a6c:	90a5c83a 	sub	r18,r18,r2
    7a70:	18a7c83a 	sub	r19,r3,r2
    7a74:	a4c00215 	stw	r19,8(r20)
    7a78:	983fce26 	beq	r19,zero,79b4 <__alt_data_end+0xff0079b4>
    7a7c:	80c0030b 	ldhu	r3,12(r16)
    7a80:	903fe61e 	bne	r18,zero,7a1c <__alt_data_end+0xff007a1c>
    7a84:	8f000017 	ldw	fp,0(r17)
    7a88:	8c800117 	ldw	r18,4(r17)
    7a8c:	8c400204 	addi	r17,r17,8
    7a90:	003fe106 	br	7a18 <__alt_data_end+0xff007a18>
    7a94:	8cc00017 	ldw	r19,0(r17)
    7a98:	8c800117 	ldw	r18,4(r17)
    7a9c:	8c400204 	addi	r17,r17,8
    7aa0:	003fb306 	br	7970 <__alt_data_end+0xff007970>
    7aa4:	0005883a 	mov	r2,zero
    7aa8:	f800283a 	ret
    7aac:	81000017 	ldw	r4,0(r16)
    7ab0:	80800417 	ldw	r2,16(r16)
    7ab4:	11005736 	bltu	r2,r4,7c14 <__sfvwrite_r+0x314>
    7ab8:	85c00517 	ldw	r23,20(r16)
    7abc:	95c05536 	bltu	r18,r23,7c14 <__sfvwrite_r+0x314>
    7ac0:	00a00034 	movhi	r2,32768
    7ac4:	10bfffc4 	addi	r2,r2,-1
    7ac8:	9009883a 	mov	r4,r18
    7acc:	1480012e 	bgeu	r2,r18,7ad4 <__sfvwrite_r+0x1d4>
    7ad0:	1009883a 	mov	r4,r2
    7ad4:	b80b883a 	mov	r5,r23
    7ad8:	0001bd00 	call	1bd0 <__divsi3>
    7adc:	15cf383a 	mul	r7,r2,r23
    7ae0:	81400717 	ldw	r5,28(r16)
    7ae4:	80800917 	ldw	r2,36(r16)
    7ae8:	e00d883a 	mov	r6,fp
    7aec:	a809883a 	mov	r4,r21
    7af0:	103ee83a 	callr	r2
    7af4:	00bfdb16 	blt	zero,r2,7a64 <__alt_data_end+0xff007a64>
    7af8:	8080030b 	ldhu	r2,12(r16)
    7afc:	10801014 	ori	r2,r2,64
    7b00:	8080030d 	sth	r2,12(r16)
    7b04:	00bfffc4 	movi	r2,-1
    7b08:	003fab06 	br	79b8 <__alt_data_end+0xff0079b8>
    7b0c:	0027883a 	mov	r19,zero
    7b10:	0011883a 	mov	r8,zero
    7b14:	0039883a 	mov	fp,zero
    7b18:	0025883a 	mov	r18,zero
    7b1c:	90001f26 	beq	r18,zero,7b9c <__sfvwrite_r+0x29c>
    7b20:	40005a26 	beq	r8,zero,7c8c <__sfvwrite_r+0x38c>
    7b24:	982d883a 	mov	r22,r19
    7b28:	94c0012e 	bgeu	r18,r19,7b30 <__sfvwrite_r+0x230>
    7b2c:	902d883a 	mov	r22,r18
    7b30:	81000017 	ldw	r4,0(r16)
    7b34:	80800417 	ldw	r2,16(r16)
    7b38:	b02f883a 	mov	r23,r22
    7b3c:	81c00517 	ldw	r7,20(r16)
    7b40:	1100032e 	bgeu	r2,r4,7b50 <__sfvwrite_r+0x250>
    7b44:	80c00217 	ldw	r3,8(r16)
    7b48:	38c7883a 	add	r3,r7,r3
    7b4c:	1d801816 	blt	r3,r22,7bb0 <__sfvwrite_r+0x2b0>
    7b50:	b1c03e16 	blt	r22,r7,7c4c <__sfvwrite_r+0x34c>
    7b54:	80800917 	ldw	r2,36(r16)
    7b58:	81400717 	ldw	r5,28(r16)
    7b5c:	e00d883a 	mov	r6,fp
    7b60:	da000115 	stw	r8,4(sp)
    7b64:	a809883a 	mov	r4,r21
    7b68:	103ee83a 	callr	r2
    7b6c:	102f883a 	mov	r23,r2
    7b70:	da000117 	ldw	r8,4(sp)
    7b74:	00bfe00e 	bge	zero,r2,7af8 <__alt_data_end+0xff007af8>
    7b78:	9de7c83a 	sub	r19,r19,r23
    7b7c:	98001f26 	beq	r19,zero,7bfc <__sfvwrite_r+0x2fc>
    7b80:	a0800217 	ldw	r2,8(r20)
    7b84:	e5f9883a 	add	fp,fp,r23
    7b88:	95e5c83a 	sub	r18,r18,r23
    7b8c:	15efc83a 	sub	r23,r2,r23
    7b90:	a5c00215 	stw	r23,8(r20)
    7b94:	b83f8726 	beq	r23,zero,79b4 <__alt_data_end+0xff0079b4>
    7b98:	903fe11e 	bne	r18,zero,7b20 <__alt_data_end+0xff007b20>
    7b9c:	8f000017 	ldw	fp,0(r17)
    7ba0:	8c800117 	ldw	r18,4(r17)
    7ba4:	0011883a 	mov	r8,zero
    7ba8:	8c400204 	addi	r17,r17,8
    7bac:	003fdb06 	br	7b1c <__alt_data_end+0xff007b1c>
    7bb0:	180d883a 	mov	r6,r3
    7bb4:	e00b883a 	mov	r5,fp
    7bb8:	da000115 	stw	r8,4(sp)
    7bbc:	d8c00015 	stw	r3,0(sp)
    7bc0:	00084080 	call	8408 <memmove>
    7bc4:	d8c00017 	ldw	r3,0(sp)
    7bc8:	80800017 	ldw	r2,0(r16)
    7bcc:	800b883a 	mov	r5,r16
    7bd0:	a809883a 	mov	r4,r21
    7bd4:	10c5883a 	add	r2,r2,r3
    7bd8:	80800015 	stw	r2,0(r16)
    7bdc:	d8c00015 	stw	r3,0(sp)
    7be0:	00070a00 	call	70a0 <_fflush_r>
    7be4:	d8c00017 	ldw	r3,0(sp)
    7be8:	da000117 	ldw	r8,4(sp)
    7bec:	103fc21e 	bne	r2,zero,7af8 <__alt_data_end+0xff007af8>
    7bf0:	182f883a 	mov	r23,r3
    7bf4:	9de7c83a 	sub	r19,r19,r23
    7bf8:	983fe11e 	bne	r19,zero,7b80 <__alt_data_end+0xff007b80>
    7bfc:	800b883a 	mov	r5,r16
    7c00:	a809883a 	mov	r4,r21
    7c04:	00070a00 	call	70a0 <_fflush_r>
    7c08:	103fbb1e 	bne	r2,zero,7af8 <__alt_data_end+0xff007af8>
    7c0c:	0011883a 	mov	r8,zero
    7c10:	003fdb06 	br	7b80 <__alt_data_end+0xff007b80>
    7c14:	94c0012e 	bgeu	r18,r19,7c1c <__sfvwrite_r+0x31c>
    7c18:	9027883a 	mov	r19,r18
    7c1c:	980d883a 	mov	r6,r19
    7c20:	e00b883a 	mov	r5,fp
    7c24:	00084080 	call	8408 <memmove>
    7c28:	80800217 	ldw	r2,8(r16)
    7c2c:	80c00017 	ldw	r3,0(r16)
    7c30:	14c5c83a 	sub	r2,r2,r19
    7c34:	1cc7883a 	add	r3,r3,r19
    7c38:	80800215 	stw	r2,8(r16)
    7c3c:	80c00015 	stw	r3,0(r16)
    7c40:	10004326 	beq	r2,zero,7d50 <__sfvwrite_r+0x450>
    7c44:	9805883a 	mov	r2,r19
    7c48:	003f8606 	br	7a64 <__alt_data_end+0xff007a64>
    7c4c:	b00d883a 	mov	r6,r22
    7c50:	e00b883a 	mov	r5,fp
    7c54:	da000115 	stw	r8,4(sp)
    7c58:	00084080 	call	8408 <memmove>
    7c5c:	80800217 	ldw	r2,8(r16)
    7c60:	80c00017 	ldw	r3,0(r16)
    7c64:	da000117 	ldw	r8,4(sp)
    7c68:	1585c83a 	sub	r2,r2,r22
    7c6c:	1dad883a 	add	r22,r3,r22
    7c70:	80800215 	stw	r2,8(r16)
    7c74:	85800015 	stw	r22,0(r16)
    7c78:	003fbf06 	br	7b78 <__alt_data_end+0xff007b78>
    7c7c:	81000017 	ldw	r4,0(r16)
    7c80:	9027883a 	mov	r19,r18
    7c84:	902f883a 	mov	r23,r18
    7c88:	003f6c06 	br	7a3c <__alt_data_end+0xff007a3c>
    7c8c:	900d883a 	mov	r6,r18
    7c90:	01400284 	movi	r5,10
    7c94:	e009883a 	mov	r4,fp
    7c98:	00081dc0 	call	81dc <memchr>
    7c9c:	10003e26 	beq	r2,zero,7d98 <__sfvwrite_r+0x498>
    7ca0:	10800044 	addi	r2,r2,1
    7ca4:	1727c83a 	sub	r19,r2,fp
    7ca8:	02000044 	movi	r8,1
    7cac:	003f9d06 	br	7b24 <__alt_data_end+0xff007b24>
    7cb0:	80800517 	ldw	r2,20(r16)
    7cb4:	81400417 	ldw	r5,16(r16)
    7cb8:	81c00017 	ldw	r7,0(r16)
    7cbc:	10a7883a 	add	r19,r2,r2
    7cc0:	9885883a 	add	r2,r19,r2
    7cc4:	1026d7fa 	srli	r19,r2,31
    7cc8:	396dc83a 	sub	r22,r7,r5
    7ccc:	b1000044 	addi	r4,r22,1
    7cd0:	9885883a 	add	r2,r19,r2
    7cd4:	1027d07a 	srai	r19,r2,1
    7cd8:	2485883a 	add	r2,r4,r18
    7cdc:	980d883a 	mov	r6,r19
    7ce0:	9880022e 	bgeu	r19,r2,7cec <__sfvwrite_r+0x3ec>
    7ce4:	1027883a 	mov	r19,r2
    7ce8:	100d883a 	mov	r6,r2
    7cec:	18c1000c 	andi	r3,r3,1024
    7cf0:	18001c26 	beq	r3,zero,7d64 <__sfvwrite_r+0x464>
    7cf4:	300b883a 	mov	r5,r6
    7cf8:	a809883a 	mov	r4,r21
    7cfc:	00027a00 	call	27a0 <_malloc_r>
    7d00:	102f883a 	mov	r23,r2
    7d04:	10002926 	beq	r2,zero,7dac <__sfvwrite_r+0x4ac>
    7d08:	81400417 	ldw	r5,16(r16)
    7d0c:	b00d883a 	mov	r6,r22
    7d10:	1009883a 	mov	r4,r2
    7d14:	00082c00 	call	82c0 <memcpy>
    7d18:	8080030b 	ldhu	r2,12(r16)
    7d1c:	00fedfc4 	movi	r3,-1153
    7d20:	10c4703a 	and	r2,r2,r3
    7d24:	10802014 	ori	r2,r2,128
    7d28:	8080030d 	sth	r2,12(r16)
    7d2c:	bd89883a 	add	r4,r23,r22
    7d30:	9d8fc83a 	sub	r7,r19,r22
    7d34:	85c00415 	stw	r23,16(r16)
    7d38:	84c00515 	stw	r19,20(r16)
    7d3c:	81000015 	stw	r4,0(r16)
    7d40:	9027883a 	mov	r19,r18
    7d44:	81c00215 	stw	r7,8(r16)
    7d48:	902f883a 	mov	r23,r18
    7d4c:	003f3b06 	br	7a3c <__alt_data_end+0xff007a3c>
    7d50:	800b883a 	mov	r5,r16
    7d54:	a809883a 	mov	r4,r21
    7d58:	00070a00 	call	70a0 <_fflush_r>
    7d5c:	103fb926 	beq	r2,zero,7c44 <__alt_data_end+0xff007c44>
    7d60:	003f6506 	br	7af8 <__alt_data_end+0xff007af8>
    7d64:	a809883a 	mov	r4,r21
    7d68:	00096880 	call	9688 <_realloc_r>
    7d6c:	102f883a 	mov	r23,r2
    7d70:	103fee1e 	bne	r2,zero,7d2c <__alt_data_end+0xff007d2c>
    7d74:	81400417 	ldw	r5,16(r16)
    7d78:	a809883a 	mov	r4,r21
    7d7c:	00075f00 	call	75f0 <_free_r>
    7d80:	8080030b 	ldhu	r2,12(r16)
    7d84:	00ffdfc4 	movi	r3,-129
    7d88:	1884703a 	and	r2,r3,r2
    7d8c:	00c00304 	movi	r3,12
    7d90:	a8c00015 	stw	r3,0(r21)
    7d94:	003f5906 	br	7afc <__alt_data_end+0xff007afc>
    7d98:	94c00044 	addi	r19,r18,1
    7d9c:	02000044 	movi	r8,1
    7da0:	003f6006 	br	7b24 <__alt_data_end+0xff007b24>
    7da4:	00bfffc4 	movi	r2,-1
    7da8:	003f0306 	br	79b8 <__alt_data_end+0xff0079b8>
    7dac:	00800304 	movi	r2,12
    7db0:	a8800015 	stw	r2,0(r21)
    7db4:	8080030b 	ldhu	r2,12(r16)
    7db8:	003f5006 	br	7afc <__alt_data_end+0xff007afc>

00007dbc <_fwalk>:
    7dbc:	defff704 	addi	sp,sp,-36
    7dc0:	dd000415 	stw	r20,16(sp)
    7dc4:	dfc00815 	stw	ra,32(sp)
    7dc8:	ddc00715 	stw	r23,28(sp)
    7dcc:	dd800615 	stw	r22,24(sp)
    7dd0:	dd400515 	stw	r21,20(sp)
    7dd4:	dcc00315 	stw	r19,12(sp)
    7dd8:	dc800215 	stw	r18,8(sp)
    7ddc:	dc400115 	stw	r17,4(sp)
    7de0:	dc000015 	stw	r16,0(sp)
    7de4:	2500b804 	addi	r20,r4,736
    7de8:	a0002326 	beq	r20,zero,7e78 <_fwalk+0xbc>
    7dec:	282b883a 	mov	r21,r5
    7df0:	002f883a 	mov	r23,zero
    7df4:	05800044 	movi	r22,1
    7df8:	04ffffc4 	movi	r19,-1
    7dfc:	a4400117 	ldw	r17,4(r20)
    7e00:	a4800217 	ldw	r18,8(r20)
    7e04:	8c7fffc4 	addi	r17,r17,-1
    7e08:	88000d16 	blt	r17,zero,7e40 <_fwalk+0x84>
    7e0c:	94000304 	addi	r16,r18,12
    7e10:	94800384 	addi	r18,r18,14
    7e14:	8080000b 	ldhu	r2,0(r16)
    7e18:	8c7fffc4 	addi	r17,r17,-1
    7e1c:	813ffd04 	addi	r4,r16,-12
    7e20:	b080042e 	bgeu	r22,r2,7e34 <_fwalk+0x78>
    7e24:	9080000f 	ldh	r2,0(r18)
    7e28:	14c00226 	beq	r2,r19,7e34 <_fwalk+0x78>
    7e2c:	a83ee83a 	callr	r21
    7e30:	b8aeb03a 	or	r23,r23,r2
    7e34:	84001a04 	addi	r16,r16,104
    7e38:	94801a04 	addi	r18,r18,104
    7e3c:	8cfff51e 	bne	r17,r19,7e14 <__alt_data_end+0xff007e14>
    7e40:	a5000017 	ldw	r20,0(r20)
    7e44:	a03fed1e 	bne	r20,zero,7dfc <__alt_data_end+0xff007dfc>
    7e48:	b805883a 	mov	r2,r23
    7e4c:	dfc00817 	ldw	ra,32(sp)
    7e50:	ddc00717 	ldw	r23,28(sp)
    7e54:	dd800617 	ldw	r22,24(sp)
    7e58:	dd400517 	ldw	r21,20(sp)
    7e5c:	dd000417 	ldw	r20,16(sp)
    7e60:	dcc00317 	ldw	r19,12(sp)
    7e64:	dc800217 	ldw	r18,8(sp)
    7e68:	dc400117 	ldw	r17,4(sp)
    7e6c:	dc000017 	ldw	r16,0(sp)
    7e70:	dec00904 	addi	sp,sp,36
    7e74:	f800283a 	ret
    7e78:	002f883a 	mov	r23,zero
    7e7c:	003ff206 	br	7e48 <__alt_data_end+0xff007e48>

00007e80 <_fwalk_reent>:
    7e80:	defff704 	addi	sp,sp,-36
    7e84:	dd000415 	stw	r20,16(sp)
    7e88:	dfc00815 	stw	ra,32(sp)
    7e8c:	ddc00715 	stw	r23,28(sp)
    7e90:	dd800615 	stw	r22,24(sp)
    7e94:	dd400515 	stw	r21,20(sp)
    7e98:	dcc00315 	stw	r19,12(sp)
    7e9c:	dc800215 	stw	r18,8(sp)
    7ea0:	dc400115 	stw	r17,4(sp)
    7ea4:	dc000015 	stw	r16,0(sp)
    7ea8:	2500b804 	addi	r20,r4,736
    7eac:	a0002326 	beq	r20,zero,7f3c <_fwalk_reent+0xbc>
    7eb0:	282b883a 	mov	r21,r5
    7eb4:	2027883a 	mov	r19,r4
    7eb8:	002f883a 	mov	r23,zero
    7ebc:	05800044 	movi	r22,1
    7ec0:	04bfffc4 	movi	r18,-1
    7ec4:	a4400117 	ldw	r17,4(r20)
    7ec8:	a4000217 	ldw	r16,8(r20)
    7ecc:	8c7fffc4 	addi	r17,r17,-1
    7ed0:	88000c16 	blt	r17,zero,7f04 <_fwalk_reent+0x84>
    7ed4:	84000304 	addi	r16,r16,12
    7ed8:	8080000b 	ldhu	r2,0(r16)
    7edc:	8c7fffc4 	addi	r17,r17,-1
    7ee0:	817ffd04 	addi	r5,r16,-12
    7ee4:	b080052e 	bgeu	r22,r2,7efc <_fwalk_reent+0x7c>
    7ee8:	8080008f 	ldh	r2,2(r16)
    7eec:	9809883a 	mov	r4,r19
    7ef0:	14800226 	beq	r2,r18,7efc <_fwalk_reent+0x7c>
    7ef4:	a83ee83a 	callr	r21
    7ef8:	b8aeb03a 	or	r23,r23,r2
    7efc:	84001a04 	addi	r16,r16,104
    7f00:	8cbff51e 	bne	r17,r18,7ed8 <__alt_data_end+0xff007ed8>
    7f04:	a5000017 	ldw	r20,0(r20)
    7f08:	a03fee1e 	bne	r20,zero,7ec4 <__alt_data_end+0xff007ec4>
    7f0c:	b805883a 	mov	r2,r23
    7f10:	dfc00817 	ldw	ra,32(sp)
    7f14:	ddc00717 	ldw	r23,28(sp)
    7f18:	dd800617 	ldw	r22,24(sp)
    7f1c:	dd400517 	ldw	r21,20(sp)
    7f20:	dd000417 	ldw	r20,16(sp)
    7f24:	dcc00317 	ldw	r19,12(sp)
    7f28:	dc800217 	ldw	r18,8(sp)
    7f2c:	dc400117 	ldw	r17,4(sp)
    7f30:	dc000017 	ldw	r16,0(sp)
    7f34:	dec00904 	addi	sp,sp,36
    7f38:	f800283a 	ret
    7f3c:	002f883a 	mov	r23,zero
    7f40:	003ff206 	br	7f0c <__alt_data_end+0xff007f0c>

00007f44 <_setlocale_r>:
    7f44:	30001b26 	beq	r6,zero,7fb4 <_setlocale_r+0x70>
    7f48:	01400074 	movhi	r5,1
    7f4c:	defffe04 	addi	sp,sp,-8
    7f50:	29457004 	addi	r5,r5,5568
    7f54:	3009883a 	mov	r4,r6
    7f58:	dc000015 	stw	r16,0(sp)
    7f5c:	dfc00115 	stw	ra,4(sp)
    7f60:	3021883a 	mov	r16,r6
    7f64:	0009d9c0 	call	9d9c <strcmp>
    7f68:	1000061e 	bne	r2,zero,7f84 <_setlocale_r+0x40>
    7f6c:	00800074 	movhi	r2,1
    7f70:	10856f04 	addi	r2,r2,5564
    7f74:	dfc00117 	ldw	ra,4(sp)
    7f78:	dc000017 	ldw	r16,0(sp)
    7f7c:	dec00204 	addi	sp,sp,8
    7f80:	f800283a 	ret
    7f84:	01400074 	movhi	r5,1
    7f88:	29456f04 	addi	r5,r5,5564
    7f8c:	8009883a 	mov	r4,r16
    7f90:	0009d9c0 	call	9d9c <strcmp>
    7f94:	103ff526 	beq	r2,zero,7f6c <__alt_data_end+0xff007f6c>
    7f98:	01400074 	movhi	r5,1
    7f9c:	29455a04 	addi	r5,r5,5480
    7fa0:	8009883a 	mov	r4,r16
    7fa4:	0009d9c0 	call	9d9c <strcmp>
    7fa8:	103ff026 	beq	r2,zero,7f6c <__alt_data_end+0xff007f6c>
    7fac:	0005883a 	mov	r2,zero
    7fb0:	003ff006 	br	7f74 <__alt_data_end+0xff007f74>
    7fb4:	00800074 	movhi	r2,1
    7fb8:	10856f04 	addi	r2,r2,5564
    7fbc:	f800283a 	ret

00007fc0 <__locale_charset>:
    7fc0:	00800074 	movhi	r2,1
    7fc4:	10882204 	addi	r2,r2,8328
    7fc8:	f800283a 	ret

00007fcc <__locale_mb_cur_max>:
    7fcc:	00800074 	movhi	r2,1
    7fd0:	108cbe04 	addi	r2,r2,13048
    7fd4:	10800017 	ldw	r2,0(r2)
    7fd8:	f800283a 	ret

00007fdc <__locale_msgcharset>:
    7fdc:	00800074 	movhi	r2,1
    7fe0:	10881a04 	addi	r2,r2,8296
    7fe4:	f800283a 	ret

00007fe8 <__locale_cjk_lang>:
    7fe8:	0005883a 	mov	r2,zero
    7fec:	f800283a 	ret

00007ff0 <_localeconv_r>:
    7ff0:	00800074 	movhi	r2,1
    7ff4:	10882a04 	addi	r2,r2,8360
    7ff8:	f800283a 	ret

00007ffc <setlocale>:
    7ffc:	00800074 	movhi	r2,1
    8000:	108cbd04 	addi	r2,r2,13044
    8004:	280d883a 	mov	r6,r5
    8008:	200b883a 	mov	r5,r4
    800c:	11000017 	ldw	r4,0(r2)
    8010:	0007f441 	jmpi	7f44 <_setlocale_r>

00008014 <localeconv>:
    8014:	00800074 	movhi	r2,1
    8018:	10882a04 	addi	r2,r2,8360
    801c:	f800283a 	ret

00008020 <__smakebuf_r>:
    8020:	2880030b 	ldhu	r2,12(r5)
    8024:	10c0008c 	andi	r3,r2,2
    8028:	1800411e 	bne	r3,zero,8130 <__smakebuf_r+0x110>
    802c:	deffec04 	addi	sp,sp,-80
    8030:	dc000f15 	stw	r16,60(sp)
    8034:	2821883a 	mov	r16,r5
    8038:	2940038f 	ldh	r5,14(r5)
    803c:	dc401015 	stw	r17,64(sp)
    8040:	dfc01315 	stw	ra,76(sp)
    8044:	dcc01215 	stw	r19,72(sp)
    8048:	dc801115 	stw	r18,68(sp)
    804c:	2023883a 	mov	r17,r4
    8050:	28001c16 	blt	r5,zero,80c4 <__smakebuf_r+0xa4>
    8054:	d80d883a 	mov	r6,sp
    8058:	000b9440 	call	b944 <_fstat_r>
    805c:	10001816 	blt	r2,zero,80c0 <__smakebuf_r+0xa0>
    8060:	d8800117 	ldw	r2,4(sp)
    8064:	00e00014 	movui	r3,32768
    8068:	10bc000c 	andi	r2,r2,61440
    806c:	14c80020 	cmpeqi	r19,r2,8192
    8070:	10c03726 	beq	r2,r3,8150 <__smakebuf_r+0x130>
    8074:	80c0030b 	ldhu	r3,12(r16)
    8078:	18c20014 	ori	r3,r3,2048
    807c:	80c0030d 	sth	r3,12(r16)
    8080:	00c80004 	movi	r3,8192
    8084:	10c0521e 	bne	r2,r3,81d0 <__smakebuf_r+0x1b0>
    8088:	8140038f 	ldh	r5,14(r16)
    808c:	8809883a 	mov	r4,r17
    8090:	000b9a00 	call	b9a0 <_isatty_r>
    8094:	10004c26 	beq	r2,zero,81c8 <__smakebuf_r+0x1a8>
    8098:	8080030b 	ldhu	r2,12(r16)
    809c:	80c010c4 	addi	r3,r16,67
    80a0:	80c00015 	stw	r3,0(r16)
    80a4:	10800054 	ori	r2,r2,1
    80a8:	8080030d 	sth	r2,12(r16)
    80ac:	00800044 	movi	r2,1
    80b0:	80c00415 	stw	r3,16(r16)
    80b4:	80800515 	stw	r2,20(r16)
    80b8:	04810004 	movi	r18,1024
    80bc:	00000706 	br	80dc <__smakebuf_r+0xbc>
    80c0:	8080030b 	ldhu	r2,12(r16)
    80c4:	10c0200c 	andi	r3,r2,128
    80c8:	18001f1e 	bne	r3,zero,8148 <__smakebuf_r+0x128>
    80cc:	04810004 	movi	r18,1024
    80d0:	10820014 	ori	r2,r2,2048
    80d4:	8080030d 	sth	r2,12(r16)
    80d8:	0027883a 	mov	r19,zero
    80dc:	900b883a 	mov	r5,r18
    80e0:	8809883a 	mov	r4,r17
    80e4:	00027a00 	call	27a0 <_malloc_r>
    80e8:	10002c26 	beq	r2,zero,819c <__smakebuf_r+0x17c>
    80ec:	80c0030b 	ldhu	r3,12(r16)
    80f0:	01000034 	movhi	r4,0
    80f4:	211c4d04 	addi	r4,r4,28980
    80f8:	89000f15 	stw	r4,60(r17)
    80fc:	18c02014 	ori	r3,r3,128
    8100:	80c0030d 	sth	r3,12(r16)
    8104:	80800015 	stw	r2,0(r16)
    8108:	80800415 	stw	r2,16(r16)
    810c:	84800515 	stw	r18,20(r16)
    8110:	98001a1e 	bne	r19,zero,817c <__smakebuf_r+0x15c>
    8114:	dfc01317 	ldw	ra,76(sp)
    8118:	dcc01217 	ldw	r19,72(sp)
    811c:	dc801117 	ldw	r18,68(sp)
    8120:	dc401017 	ldw	r17,64(sp)
    8124:	dc000f17 	ldw	r16,60(sp)
    8128:	dec01404 	addi	sp,sp,80
    812c:	f800283a 	ret
    8130:	288010c4 	addi	r2,r5,67
    8134:	28800015 	stw	r2,0(r5)
    8138:	28800415 	stw	r2,16(r5)
    813c:	00800044 	movi	r2,1
    8140:	28800515 	stw	r2,20(r5)
    8144:	f800283a 	ret
    8148:	04801004 	movi	r18,64
    814c:	003fe006 	br	80d0 <__alt_data_end+0xff0080d0>
    8150:	81000a17 	ldw	r4,40(r16)
    8154:	00c00074 	movhi	r3,1
    8158:	18e74e04 	addi	r3,r3,-25288
    815c:	20ffc51e 	bne	r4,r3,8074 <__alt_data_end+0xff008074>
    8160:	8080030b 	ldhu	r2,12(r16)
    8164:	04810004 	movi	r18,1024
    8168:	84801315 	stw	r18,76(r16)
    816c:	1484b03a 	or	r2,r2,r18
    8170:	8080030d 	sth	r2,12(r16)
    8174:	0027883a 	mov	r19,zero
    8178:	003fd806 	br	80dc <__alt_data_end+0xff0080dc>
    817c:	8140038f 	ldh	r5,14(r16)
    8180:	8809883a 	mov	r4,r17
    8184:	000b9a00 	call	b9a0 <_isatty_r>
    8188:	103fe226 	beq	r2,zero,8114 <__alt_data_end+0xff008114>
    818c:	8080030b 	ldhu	r2,12(r16)
    8190:	10800054 	ori	r2,r2,1
    8194:	8080030d 	sth	r2,12(r16)
    8198:	003fde06 	br	8114 <__alt_data_end+0xff008114>
    819c:	8080030b 	ldhu	r2,12(r16)
    81a0:	10c0800c 	andi	r3,r2,512
    81a4:	183fdb1e 	bne	r3,zero,8114 <__alt_data_end+0xff008114>
    81a8:	10800094 	ori	r2,r2,2
    81ac:	80c010c4 	addi	r3,r16,67
    81b0:	8080030d 	sth	r2,12(r16)
    81b4:	00800044 	movi	r2,1
    81b8:	80c00015 	stw	r3,0(r16)
    81bc:	80c00415 	stw	r3,16(r16)
    81c0:	80800515 	stw	r2,20(r16)
    81c4:	003fd306 	br	8114 <__alt_data_end+0xff008114>
    81c8:	04810004 	movi	r18,1024
    81cc:	003fc306 	br	80dc <__alt_data_end+0xff0080dc>
    81d0:	0027883a 	mov	r19,zero
    81d4:	04810004 	movi	r18,1024
    81d8:	003fc006 	br	80dc <__alt_data_end+0xff0080dc>

000081dc <memchr>:
    81dc:	208000cc 	andi	r2,r4,3
    81e0:	280f883a 	mov	r7,r5
    81e4:	10003426 	beq	r2,zero,82b8 <memchr+0xdc>
    81e8:	30bfffc4 	addi	r2,r6,-1
    81ec:	30001a26 	beq	r6,zero,8258 <memchr+0x7c>
    81f0:	20c00003 	ldbu	r3,0(r4)
    81f4:	29803fcc 	andi	r6,r5,255
    81f8:	30c0051e 	bne	r6,r3,8210 <memchr+0x34>
    81fc:	00001806 	br	8260 <memchr+0x84>
    8200:	10001526 	beq	r2,zero,8258 <memchr+0x7c>
    8204:	20c00003 	ldbu	r3,0(r4)
    8208:	10bfffc4 	addi	r2,r2,-1
    820c:	30c01426 	beq	r6,r3,8260 <memchr+0x84>
    8210:	21000044 	addi	r4,r4,1
    8214:	20c000cc 	andi	r3,r4,3
    8218:	183ff91e 	bne	r3,zero,8200 <__alt_data_end+0xff008200>
    821c:	020000c4 	movi	r8,3
    8220:	40801136 	bltu	r8,r2,8268 <memchr+0x8c>
    8224:	10000c26 	beq	r2,zero,8258 <memchr+0x7c>
    8228:	20c00003 	ldbu	r3,0(r4)
    822c:	29403fcc 	andi	r5,r5,255
    8230:	28c00b26 	beq	r5,r3,8260 <memchr+0x84>
    8234:	20c00044 	addi	r3,r4,1
    8238:	39803fcc 	andi	r6,r7,255
    823c:	2089883a 	add	r4,r4,r2
    8240:	00000306 	br	8250 <memchr+0x74>
    8244:	18c00044 	addi	r3,r3,1
    8248:	197fffc3 	ldbu	r5,-1(r3)
    824c:	31400526 	beq	r6,r5,8264 <memchr+0x88>
    8250:	1805883a 	mov	r2,r3
    8254:	20fffb1e 	bne	r4,r3,8244 <__alt_data_end+0xff008244>
    8258:	0005883a 	mov	r2,zero
    825c:	f800283a 	ret
    8260:	2005883a 	mov	r2,r4
    8264:	f800283a 	ret
    8268:	28c03fcc 	andi	r3,r5,255
    826c:	1812923a 	slli	r9,r3,8
    8270:	02ffbff4 	movhi	r11,65279
    8274:	02a02074 	movhi	r10,32897
    8278:	48d2b03a 	or	r9,r9,r3
    827c:	4806943a 	slli	r3,r9,16
    8280:	5affbfc4 	addi	r11,r11,-257
    8284:	52a02004 	addi	r10,r10,-32640
    8288:	48d2b03a 	or	r9,r9,r3
    828c:	20c00017 	ldw	r3,0(r4)
    8290:	48c6f03a 	xor	r3,r9,r3
    8294:	1acd883a 	add	r6,r3,r11
    8298:	00c6303a 	nor	r3,zero,r3
    829c:	30c6703a 	and	r3,r6,r3
    82a0:	1a86703a 	and	r3,r3,r10
    82a4:	183fe01e 	bne	r3,zero,8228 <__alt_data_end+0xff008228>
    82a8:	10bfff04 	addi	r2,r2,-4
    82ac:	21000104 	addi	r4,r4,4
    82b0:	40bff636 	bltu	r8,r2,828c <__alt_data_end+0xff00828c>
    82b4:	003fdb06 	br	8224 <__alt_data_end+0xff008224>
    82b8:	3005883a 	mov	r2,r6
    82bc:	003fd706 	br	821c <__alt_data_end+0xff00821c>

000082c0 <memcpy>:
    82c0:	defffd04 	addi	sp,sp,-12
    82c4:	dfc00215 	stw	ra,8(sp)
    82c8:	dc400115 	stw	r17,4(sp)
    82cc:	dc000015 	stw	r16,0(sp)
    82d0:	00c003c4 	movi	r3,15
    82d4:	2005883a 	mov	r2,r4
    82d8:	1980452e 	bgeu	r3,r6,83f0 <memcpy+0x130>
    82dc:	2906b03a 	or	r3,r5,r4
    82e0:	18c000cc 	andi	r3,r3,3
    82e4:	1800441e 	bne	r3,zero,83f8 <memcpy+0x138>
    82e8:	347ffc04 	addi	r17,r6,-16
    82ec:	8822d13a 	srli	r17,r17,4
    82f0:	28c00104 	addi	r3,r5,4
    82f4:	23400104 	addi	r13,r4,4
    82f8:	8820913a 	slli	r16,r17,4
    82fc:	2b000204 	addi	r12,r5,8
    8300:	22c00204 	addi	r11,r4,8
    8304:	84000504 	addi	r16,r16,20
    8308:	2a800304 	addi	r10,r5,12
    830c:	22400304 	addi	r9,r4,12
    8310:	2c21883a 	add	r16,r5,r16
    8314:	2811883a 	mov	r8,r5
    8318:	200f883a 	mov	r7,r4
    831c:	41000017 	ldw	r4,0(r8)
    8320:	1fc00017 	ldw	ra,0(r3)
    8324:	63c00017 	ldw	r15,0(r12)
    8328:	39000015 	stw	r4,0(r7)
    832c:	53800017 	ldw	r14,0(r10)
    8330:	6fc00015 	stw	ra,0(r13)
    8334:	5bc00015 	stw	r15,0(r11)
    8338:	4b800015 	stw	r14,0(r9)
    833c:	18c00404 	addi	r3,r3,16
    8340:	39c00404 	addi	r7,r7,16
    8344:	42000404 	addi	r8,r8,16
    8348:	6b400404 	addi	r13,r13,16
    834c:	63000404 	addi	r12,r12,16
    8350:	5ac00404 	addi	r11,r11,16
    8354:	52800404 	addi	r10,r10,16
    8358:	4a400404 	addi	r9,r9,16
    835c:	1c3fef1e 	bne	r3,r16,831c <__alt_data_end+0xff00831c>
    8360:	89c00044 	addi	r7,r17,1
    8364:	380e913a 	slli	r7,r7,4
    8368:	310003cc 	andi	r4,r6,15
    836c:	02c000c4 	movi	r11,3
    8370:	11c7883a 	add	r3,r2,r7
    8374:	29cb883a 	add	r5,r5,r7
    8378:	5900212e 	bgeu	r11,r4,8400 <memcpy+0x140>
    837c:	1813883a 	mov	r9,r3
    8380:	2811883a 	mov	r8,r5
    8384:	200f883a 	mov	r7,r4
    8388:	42800017 	ldw	r10,0(r8)
    838c:	4a400104 	addi	r9,r9,4
    8390:	39ffff04 	addi	r7,r7,-4
    8394:	4abfff15 	stw	r10,-4(r9)
    8398:	42000104 	addi	r8,r8,4
    839c:	59fffa36 	bltu	r11,r7,8388 <__alt_data_end+0xff008388>
    83a0:	213fff04 	addi	r4,r4,-4
    83a4:	2008d0ba 	srli	r4,r4,2
    83a8:	318000cc 	andi	r6,r6,3
    83ac:	21000044 	addi	r4,r4,1
    83b0:	2109883a 	add	r4,r4,r4
    83b4:	2109883a 	add	r4,r4,r4
    83b8:	1907883a 	add	r3,r3,r4
    83bc:	290b883a 	add	r5,r5,r4
    83c0:	30000626 	beq	r6,zero,83dc <memcpy+0x11c>
    83c4:	198d883a 	add	r6,r3,r6
    83c8:	29c00003 	ldbu	r7,0(r5)
    83cc:	18c00044 	addi	r3,r3,1
    83d0:	29400044 	addi	r5,r5,1
    83d4:	19ffffc5 	stb	r7,-1(r3)
    83d8:	19bffb1e 	bne	r3,r6,83c8 <__alt_data_end+0xff0083c8>
    83dc:	dfc00217 	ldw	ra,8(sp)
    83e0:	dc400117 	ldw	r17,4(sp)
    83e4:	dc000017 	ldw	r16,0(sp)
    83e8:	dec00304 	addi	sp,sp,12
    83ec:	f800283a 	ret
    83f0:	2007883a 	mov	r3,r4
    83f4:	003ff206 	br	83c0 <__alt_data_end+0xff0083c0>
    83f8:	2007883a 	mov	r3,r4
    83fc:	003ff106 	br	83c4 <__alt_data_end+0xff0083c4>
    8400:	200d883a 	mov	r6,r4
    8404:	003fee06 	br	83c0 <__alt_data_end+0xff0083c0>

00008408 <memmove>:
    8408:	2005883a 	mov	r2,r4
    840c:	29000b2e 	bgeu	r5,r4,843c <memmove+0x34>
    8410:	298f883a 	add	r7,r5,r6
    8414:	21c0092e 	bgeu	r4,r7,843c <memmove+0x34>
    8418:	2187883a 	add	r3,r4,r6
    841c:	198bc83a 	sub	r5,r3,r6
    8420:	30004826 	beq	r6,zero,8544 <memmove+0x13c>
    8424:	39ffffc4 	addi	r7,r7,-1
    8428:	39000003 	ldbu	r4,0(r7)
    842c:	18ffffc4 	addi	r3,r3,-1
    8430:	19000005 	stb	r4,0(r3)
    8434:	28fffb1e 	bne	r5,r3,8424 <__alt_data_end+0xff008424>
    8438:	f800283a 	ret
    843c:	00c003c4 	movi	r3,15
    8440:	1980412e 	bgeu	r3,r6,8548 <memmove+0x140>
    8444:	2886b03a 	or	r3,r5,r2
    8448:	18c000cc 	andi	r3,r3,3
    844c:	1800401e 	bne	r3,zero,8550 <memmove+0x148>
    8450:	33fffc04 	addi	r15,r6,-16
    8454:	781ed13a 	srli	r15,r15,4
    8458:	28c00104 	addi	r3,r5,4
    845c:	13400104 	addi	r13,r2,4
    8460:	781c913a 	slli	r14,r15,4
    8464:	2b000204 	addi	r12,r5,8
    8468:	12c00204 	addi	r11,r2,8
    846c:	73800504 	addi	r14,r14,20
    8470:	2a800304 	addi	r10,r5,12
    8474:	12400304 	addi	r9,r2,12
    8478:	2b9d883a 	add	r14,r5,r14
    847c:	2811883a 	mov	r8,r5
    8480:	100f883a 	mov	r7,r2
    8484:	41000017 	ldw	r4,0(r8)
    8488:	39c00404 	addi	r7,r7,16
    848c:	18c00404 	addi	r3,r3,16
    8490:	393ffc15 	stw	r4,-16(r7)
    8494:	193ffc17 	ldw	r4,-16(r3)
    8498:	6b400404 	addi	r13,r13,16
    849c:	5ac00404 	addi	r11,r11,16
    84a0:	693ffc15 	stw	r4,-16(r13)
    84a4:	61000017 	ldw	r4,0(r12)
    84a8:	4a400404 	addi	r9,r9,16
    84ac:	42000404 	addi	r8,r8,16
    84b0:	593ffc15 	stw	r4,-16(r11)
    84b4:	51000017 	ldw	r4,0(r10)
    84b8:	63000404 	addi	r12,r12,16
    84bc:	52800404 	addi	r10,r10,16
    84c0:	493ffc15 	stw	r4,-16(r9)
    84c4:	1bbfef1e 	bne	r3,r14,8484 <__alt_data_end+0xff008484>
    84c8:	79000044 	addi	r4,r15,1
    84cc:	2008913a 	slli	r4,r4,4
    84d0:	328003cc 	andi	r10,r6,15
    84d4:	02c000c4 	movi	r11,3
    84d8:	1107883a 	add	r3,r2,r4
    84dc:	290b883a 	add	r5,r5,r4
    84e0:	5a801e2e 	bgeu	r11,r10,855c <memmove+0x154>
    84e4:	1813883a 	mov	r9,r3
    84e8:	2811883a 	mov	r8,r5
    84ec:	500f883a 	mov	r7,r10
    84f0:	41000017 	ldw	r4,0(r8)
    84f4:	4a400104 	addi	r9,r9,4
    84f8:	39ffff04 	addi	r7,r7,-4
    84fc:	493fff15 	stw	r4,-4(r9)
    8500:	42000104 	addi	r8,r8,4
    8504:	59fffa36 	bltu	r11,r7,84f0 <__alt_data_end+0xff0084f0>
    8508:	513fff04 	addi	r4,r10,-4
    850c:	2008d0ba 	srli	r4,r4,2
    8510:	318000cc 	andi	r6,r6,3
    8514:	21000044 	addi	r4,r4,1
    8518:	2109883a 	add	r4,r4,r4
    851c:	2109883a 	add	r4,r4,r4
    8520:	1907883a 	add	r3,r3,r4
    8524:	290b883a 	add	r5,r5,r4
    8528:	30000b26 	beq	r6,zero,8558 <memmove+0x150>
    852c:	198d883a 	add	r6,r3,r6
    8530:	29c00003 	ldbu	r7,0(r5)
    8534:	18c00044 	addi	r3,r3,1
    8538:	29400044 	addi	r5,r5,1
    853c:	19ffffc5 	stb	r7,-1(r3)
    8540:	19bffb1e 	bne	r3,r6,8530 <__alt_data_end+0xff008530>
    8544:	f800283a 	ret
    8548:	1007883a 	mov	r3,r2
    854c:	003ff606 	br	8528 <__alt_data_end+0xff008528>
    8550:	1007883a 	mov	r3,r2
    8554:	003ff506 	br	852c <__alt_data_end+0xff00852c>
    8558:	f800283a 	ret
    855c:	500d883a 	mov	r6,r10
    8560:	003ff106 	br	8528 <__alt_data_end+0xff008528>

00008564 <memset>:
    8564:	20c000cc 	andi	r3,r4,3
    8568:	2005883a 	mov	r2,r4
    856c:	18004426 	beq	r3,zero,8680 <memset+0x11c>
    8570:	31ffffc4 	addi	r7,r6,-1
    8574:	30004026 	beq	r6,zero,8678 <memset+0x114>
    8578:	2813883a 	mov	r9,r5
    857c:	200d883a 	mov	r6,r4
    8580:	2007883a 	mov	r3,r4
    8584:	00000406 	br	8598 <memset+0x34>
    8588:	3a3fffc4 	addi	r8,r7,-1
    858c:	31800044 	addi	r6,r6,1
    8590:	38003926 	beq	r7,zero,8678 <memset+0x114>
    8594:	400f883a 	mov	r7,r8
    8598:	18c00044 	addi	r3,r3,1
    859c:	32400005 	stb	r9,0(r6)
    85a0:	1a0000cc 	andi	r8,r3,3
    85a4:	403ff81e 	bne	r8,zero,8588 <__alt_data_end+0xff008588>
    85a8:	010000c4 	movi	r4,3
    85ac:	21c02d2e 	bgeu	r4,r7,8664 <memset+0x100>
    85b0:	29003fcc 	andi	r4,r5,255
    85b4:	200c923a 	slli	r6,r4,8
    85b8:	3108b03a 	or	r4,r6,r4
    85bc:	200c943a 	slli	r6,r4,16
    85c0:	218cb03a 	or	r6,r4,r6
    85c4:	010003c4 	movi	r4,15
    85c8:	21c0182e 	bgeu	r4,r7,862c <memset+0xc8>
    85cc:	3b3ffc04 	addi	r12,r7,-16
    85d0:	6018d13a 	srli	r12,r12,4
    85d4:	1a000104 	addi	r8,r3,4
    85d8:	1ac00204 	addi	r11,r3,8
    85dc:	6008913a 	slli	r4,r12,4
    85e0:	1a800304 	addi	r10,r3,12
    85e4:	1813883a 	mov	r9,r3
    85e8:	21000504 	addi	r4,r4,20
    85ec:	1909883a 	add	r4,r3,r4
    85f0:	49800015 	stw	r6,0(r9)
    85f4:	41800015 	stw	r6,0(r8)
    85f8:	59800015 	stw	r6,0(r11)
    85fc:	51800015 	stw	r6,0(r10)
    8600:	42000404 	addi	r8,r8,16
    8604:	4a400404 	addi	r9,r9,16
    8608:	5ac00404 	addi	r11,r11,16
    860c:	52800404 	addi	r10,r10,16
    8610:	413ff71e 	bne	r8,r4,85f0 <__alt_data_end+0xff0085f0>
    8614:	63000044 	addi	r12,r12,1
    8618:	6018913a 	slli	r12,r12,4
    861c:	39c003cc 	andi	r7,r7,15
    8620:	010000c4 	movi	r4,3
    8624:	1b07883a 	add	r3,r3,r12
    8628:	21c00e2e 	bgeu	r4,r7,8664 <memset+0x100>
    862c:	1813883a 	mov	r9,r3
    8630:	3811883a 	mov	r8,r7
    8634:	010000c4 	movi	r4,3
    8638:	49800015 	stw	r6,0(r9)
    863c:	423fff04 	addi	r8,r8,-4
    8640:	4a400104 	addi	r9,r9,4
    8644:	223ffc36 	bltu	r4,r8,8638 <__alt_data_end+0xff008638>
    8648:	393fff04 	addi	r4,r7,-4
    864c:	2008d0ba 	srli	r4,r4,2
    8650:	39c000cc 	andi	r7,r7,3
    8654:	21000044 	addi	r4,r4,1
    8658:	2109883a 	add	r4,r4,r4
    865c:	2109883a 	add	r4,r4,r4
    8660:	1907883a 	add	r3,r3,r4
    8664:	38000526 	beq	r7,zero,867c <memset+0x118>
    8668:	19cf883a 	add	r7,r3,r7
    866c:	19400005 	stb	r5,0(r3)
    8670:	18c00044 	addi	r3,r3,1
    8674:	38fffd1e 	bne	r7,r3,866c <__alt_data_end+0xff00866c>
    8678:	f800283a 	ret
    867c:	f800283a 	ret
    8680:	2007883a 	mov	r3,r4
    8684:	300f883a 	mov	r7,r6
    8688:	003fc706 	br	85a8 <__alt_data_end+0xff0085a8>

0000868c <_Balloc>:
    868c:	20801317 	ldw	r2,76(r4)
    8690:	defffc04 	addi	sp,sp,-16
    8694:	dc400115 	stw	r17,4(sp)
    8698:	dc000015 	stw	r16,0(sp)
    869c:	dfc00315 	stw	ra,12(sp)
    86a0:	dc800215 	stw	r18,8(sp)
    86a4:	2023883a 	mov	r17,r4
    86a8:	2821883a 	mov	r16,r5
    86ac:	10000f26 	beq	r2,zero,86ec <_Balloc+0x60>
    86b0:	8407883a 	add	r3,r16,r16
    86b4:	18c7883a 	add	r3,r3,r3
    86b8:	10c7883a 	add	r3,r2,r3
    86bc:	18800017 	ldw	r2,0(r3)
    86c0:	10001126 	beq	r2,zero,8708 <_Balloc+0x7c>
    86c4:	11000017 	ldw	r4,0(r2)
    86c8:	19000015 	stw	r4,0(r3)
    86cc:	10000415 	stw	zero,16(r2)
    86d0:	10000315 	stw	zero,12(r2)
    86d4:	dfc00317 	ldw	ra,12(sp)
    86d8:	dc800217 	ldw	r18,8(sp)
    86dc:	dc400117 	ldw	r17,4(sp)
    86e0:	dc000017 	ldw	r16,0(sp)
    86e4:	dec00404 	addi	sp,sp,16
    86e8:	f800283a 	ret
    86ec:	01800844 	movi	r6,33
    86f0:	01400104 	movi	r5,4
    86f4:	000b5740 	call	b574 <_calloc_r>
    86f8:	88801315 	stw	r2,76(r17)
    86fc:	103fec1e 	bne	r2,zero,86b0 <__alt_data_end+0xff0086b0>
    8700:	0005883a 	mov	r2,zero
    8704:	003ff306 	br	86d4 <__alt_data_end+0xff0086d4>
    8708:	01400044 	movi	r5,1
    870c:	2c24983a 	sll	r18,r5,r16
    8710:	8809883a 	mov	r4,r17
    8714:	91800144 	addi	r6,r18,5
    8718:	318d883a 	add	r6,r6,r6
    871c:	318d883a 	add	r6,r6,r6
    8720:	000b5740 	call	b574 <_calloc_r>
    8724:	103ff626 	beq	r2,zero,8700 <__alt_data_end+0xff008700>
    8728:	14000115 	stw	r16,4(r2)
    872c:	14800215 	stw	r18,8(r2)
    8730:	003fe606 	br	86cc <__alt_data_end+0xff0086cc>

00008734 <_Bfree>:
    8734:	28000826 	beq	r5,zero,8758 <_Bfree+0x24>
    8738:	28c00117 	ldw	r3,4(r5)
    873c:	20801317 	ldw	r2,76(r4)
    8740:	18c7883a 	add	r3,r3,r3
    8744:	18c7883a 	add	r3,r3,r3
    8748:	10c5883a 	add	r2,r2,r3
    874c:	10c00017 	ldw	r3,0(r2)
    8750:	28c00015 	stw	r3,0(r5)
    8754:	11400015 	stw	r5,0(r2)
    8758:	f800283a 	ret

0000875c <__multadd>:
    875c:	defffa04 	addi	sp,sp,-24
    8760:	dc800315 	stw	r18,12(sp)
    8764:	dc400215 	stw	r17,8(sp)
    8768:	dc000115 	stw	r16,4(sp)
    876c:	2823883a 	mov	r17,r5
    8770:	2c000417 	ldw	r16,16(r5)
    8774:	dfc00515 	stw	ra,20(sp)
    8778:	dcc00415 	stw	r19,16(sp)
    877c:	2025883a 	mov	r18,r4
    8780:	29400504 	addi	r5,r5,20
    8784:	0011883a 	mov	r8,zero
    8788:	28c00017 	ldw	r3,0(r5)
    878c:	29400104 	addi	r5,r5,4
    8790:	42000044 	addi	r8,r8,1
    8794:	18bfffcc 	andi	r2,r3,65535
    8798:	1185383a 	mul	r2,r2,r6
    879c:	1806d43a 	srli	r3,r3,16
    87a0:	11cf883a 	add	r7,r2,r7
    87a4:	3808d43a 	srli	r4,r7,16
    87a8:	1987383a 	mul	r3,r3,r6
    87ac:	38bfffcc 	andi	r2,r7,65535
    87b0:	1907883a 	add	r3,r3,r4
    87b4:	1808943a 	slli	r4,r3,16
    87b8:	180ed43a 	srli	r7,r3,16
    87bc:	2085883a 	add	r2,r4,r2
    87c0:	28bfff15 	stw	r2,-4(r5)
    87c4:	443ff016 	blt	r8,r16,8788 <__alt_data_end+0xff008788>
    87c8:	38000926 	beq	r7,zero,87f0 <__multadd+0x94>
    87cc:	88800217 	ldw	r2,8(r17)
    87d0:	80800f0e 	bge	r16,r2,8810 <__multadd+0xb4>
    87d4:	80800144 	addi	r2,r16,5
    87d8:	1085883a 	add	r2,r2,r2
    87dc:	1085883a 	add	r2,r2,r2
    87e0:	8885883a 	add	r2,r17,r2
    87e4:	11c00015 	stw	r7,0(r2)
    87e8:	84000044 	addi	r16,r16,1
    87ec:	8c000415 	stw	r16,16(r17)
    87f0:	8805883a 	mov	r2,r17
    87f4:	dfc00517 	ldw	ra,20(sp)
    87f8:	dcc00417 	ldw	r19,16(sp)
    87fc:	dc800317 	ldw	r18,12(sp)
    8800:	dc400217 	ldw	r17,8(sp)
    8804:	dc000117 	ldw	r16,4(sp)
    8808:	dec00604 	addi	sp,sp,24
    880c:	f800283a 	ret
    8810:	89400117 	ldw	r5,4(r17)
    8814:	9009883a 	mov	r4,r18
    8818:	d9c00015 	stw	r7,0(sp)
    881c:	29400044 	addi	r5,r5,1
    8820:	000868c0 	call	868c <_Balloc>
    8824:	89800417 	ldw	r6,16(r17)
    8828:	89400304 	addi	r5,r17,12
    882c:	11000304 	addi	r4,r2,12
    8830:	31800084 	addi	r6,r6,2
    8834:	318d883a 	add	r6,r6,r6
    8838:	318d883a 	add	r6,r6,r6
    883c:	1027883a 	mov	r19,r2
    8840:	00082c00 	call	82c0 <memcpy>
    8844:	d9c00017 	ldw	r7,0(sp)
    8848:	88000a26 	beq	r17,zero,8874 <__multadd+0x118>
    884c:	88c00117 	ldw	r3,4(r17)
    8850:	90801317 	ldw	r2,76(r18)
    8854:	18c7883a 	add	r3,r3,r3
    8858:	18c7883a 	add	r3,r3,r3
    885c:	10c5883a 	add	r2,r2,r3
    8860:	10c00017 	ldw	r3,0(r2)
    8864:	88c00015 	stw	r3,0(r17)
    8868:	14400015 	stw	r17,0(r2)
    886c:	9823883a 	mov	r17,r19
    8870:	003fd806 	br	87d4 <__alt_data_end+0xff0087d4>
    8874:	9823883a 	mov	r17,r19
    8878:	003fd606 	br	87d4 <__alt_data_end+0xff0087d4>

0000887c <__s2b>:
    887c:	defff904 	addi	sp,sp,-28
    8880:	dc400115 	stw	r17,4(sp)
    8884:	dc000015 	stw	r16,0(sp)
    8888:	2023883a 	mov	r17,r4
    888c:	2821883a 	mov	r16,r5
    8890:	39000204 	addi	r4,r7,8
    8894:	01400244 	movi	r5,9
    8898:	dcc00315 	stw	r19,12(sp)
    889c:	dc800215 	stw	r18,8(sp)
    88a0:	dfc00615 	stw	ra,24(sp)
    88a4:	dd400515 	stw	r21,20(sp)
    88a8:	dd000415 	stw	r20,16(sp)
    88ac:	3825883a 	mov	r18,r7
    88b0:	3027883a 	mov	r19,r6
    88b4:	0001bd00 	call	1bd0 <__divsi3>
    88b8:	00c00044 	movi	r3,1
    88bc:	000b883a 	mov	r5,zero
    88c0:	1880030e 	bge	r3,r2,88d0 <__s2b+0x54>
    88c4:	18c7883a 	add	r3,r3,r3
    88c8:	29400044 	addi	r5,r5,1
    88cc:	18bffd16 	blt	r3,r2,88c4 <__alt_data_end+0xff0088c4>
    88d0:	8809883a 	mov	r4,r17
    88d4:	000868c0 	call	868c <_Balloc>
    88d8:	d8c00717 	ldw	r3,28(sp)
    88dc:	10c00515 	stw	r3,20(r2)
    88e0:	00c00044 	movi	r3,1
    88e4:	10c00415 	stw	r3,16(r2)
    88e8:	00c00244 	movi	r3,9
    88ec:	1cc0210e 	bge	r3,r19,8974 <__s2b+0xf8>
    88f0:	80eb883a 	add	r21,r16,r3
    88f4:	a829883a 	mov	r20,r21
    88f8:	84e1883a 	add	r16,r16,r19
    88fc:	a1c00007 	ldb	r7,0(r20)
    8900:	01800284 	movi	r6,10
    8904:	a5000044 	addi	r20,r20,1
    8908:	100b883a 	mov	r5,r2
    890c:	39fff404 	addi	r7,r7,-48
    8910:	8809883a 	mov	r4,r17
    8914:	000875c0 	call	875c <__multadd>
    8918:	a43ff81e 	bne	r20,r16,88fc <__alt_data_end+0xff0088fc>
    891c:	ace1883a 	add	r16,r21,r19
    8920:	843ffe04 	addi	r16,r16,-8
    8924:	9c800a0e 	bge	r19,r18,8950 <__s2b+0xd4>
    8928:	94e5c83a 	sub	r18,r18,r19
    892c:	84a5883a 	add	r18,r16,r18
    8930:	81c00007 	ldb	r7,0(r16)
    8934:	01800284 	movi	r6,10
    8938:	84000044 	addi	r16,r16,1
    893c:	100b883a 	mov	r5,r2
    8940:	39fff404 	addi	r7,r7,-48
    8944:	8809883a 	mov	r4,r17
    8948:	000875c0 	call	875c <__multadd>
    894c:	84bff81e 	bne	r16,r18,8930 <__alt_data_end+0xff008930>
    8950:	dfc00617 	ldw	ra,24(sp)
    8954:	dd400517 	ldw	r21,20(sp)
    8958:	dd000417 	ldw	r20,16(sp)
    895c:	dcc00317 	ldw	r19,12(sp)
    8960:	dc800217 	ldw	r18,8(sp)
    8964:	dc400117 	ldw	r17,4(sp)
    8968:	dc000017 	ldw	r16,0(sp)
    896c:	dec00704 	addi	sp,sp,28
    8970:	f800283a 	ret
    8974:	84000284 	addi	r16,r16,10
    8978:	1827883a 	mov	r19,r3
    897c:	003fe906 	br	8924 <__alt_data_end+0xff008924>

00008980 <__hi0bits>:
    8980:	20bfffec 	andhi	r2,r4,65535
    8984:	1000141e 	bne	r2,zero,89d8 <__hi0bits+0x58>
    8988:	2008943a 	slli	r4,r4,16
    898c:	00800404 	movi	r2,16
    8990:	20ffc02c 	andhi	r3,r4,65280
    8994:	1800021e 	bne	r3,zero,89a0 <__hi0bits+0x20>
    8998:	2008923a 	slli	r4,r4,8
    899c:	10800204 	addi	r2,r2,8
    89a0:	20fc002c 	andhi	r3,r4,61440
    89a4:	1800021e 	bne	r3,zero,89b0 <__hi0bits+0x30>
    89a8:	2008913a 	slli	r4,r4,4
    89ac:	10800104 	addi	r2,r2,4
    89b0:	20f0002c 	andhi	r3,r4,49152
    89b4:	1800031e 	bne	r3,zero,89c4 <__hi0bits+0x44>
    89b8:	2109883a 	add	r4,r4,r4
    89bc:	10800084 	addi	r2,r2,2
    89c0:	2109883a 	add	r4,r4,r4
    89c4:	20000316 	blt	r4,zero,89d4 <__hi0bits+0x54>
    89c8:	2110002c 	andhi	r4,r4,16384
    89cc:	2000041e 	bne	r4,zero,89e0 <__hi0bits+0x60>
    89d0:	00800804 	movi	r2,32
    89d4:	f800283a 	ret
    89d8:	0005883a 	mov	r2,zero
    89dc:	003fec06 	br	8990 <__alt_data_end+0xff008990>
    89e0:	10800044 	addi	r2,r2,1
    89e4:	f800283a 	ret

000089e8 <__lo0bits>:
    89e8:	20c00017 	ldw	r3,0(r4)
    89ec:	188001cc 	andi	r2,r3,7
    89f0:	10000826 	beq	r2,zero,8a14 <__lo0bits+0x2c>
    89f4:	1880004c 	andi	r2,r3,1
    89f8:	1000211e 	bne	r2,zero,8a80 <__lo0bits+0x98>
    89fc:	1880008c 	andi	r2,r3,2
    8a00:	1000211e 	bne	r2,zero,8a88 <__lo0bits+0xa0>
    8a04:	1806d0ba 	srli	r3,r3,2
    8a08:	00800084 	movi	r2,2
    8a0c:	20c00015 	stw	r3,0(r4)
    8a10:	f800283a 	ret
    8a14:	18bfffcc 	andi	r2,r3,65535
    8a18:	10001326 	beq	r2,zero,8a68 <__lo0bits+0x80>
    8a1c:	0005883a 	mov	r2,zero
    8a20:	19403fcc 	andi	r5,r3,255
    8a24:	2800021e 	bne	r5,zero,8a30 <__lo0bits+0x48>
    8a28:	1806d23a 	srli	r3,r3,8
    8a2c:	10800204 	addi	r2,r2,8
    8a30:	194003cc 	andi	r5,r3,15
    8a34:	2800021e 	bne	r5,zero,8a40 <__lo0bits+0x58>
    8a38:	1806d13a 	srli	r3,r3,4
    8a3c:	10800104 	addi	r2,r2,4
    8a40:	194000cc 	andi	r5,r3,3
    8a44:	2800021e 	bne	r5,zero,8a50 <__lo0bits+0x68>
    8a48:	1806d0ba 	srli	r3,r3,2
    8a4c:	10800084 	addi	r2,r2,2
    8a50:	1940004c 	andi	r5,r3,1
    8a54:	2800081e 	bne	r5,zero,8a78 <__lo0bits+0x90>
    8a58:	1806d07a 	srli	r3,r3,1
    8a5c:	1800051e 	bne	r3,zero,8a74 <__lo0bits+0x8c>
    8a60:	00800804 	movi	r2,32
    8a64:	f800283a 	ret
    8a68:	1806d43a 	srli	r3,r3,16
    8a6c:	00800404 	movi	r2,16
    8a70:	003feb06 	br	8a20 <__alt_data_end+0xff008a20>
    8a74:	10800044 	addi	r2,r2,1
    8a78:	20c00015 	stw	r3,0(r4)
    8a7c:	f800283a 	ret
    8a80:	0005883a 	mov	r2,zero
    8a84:	f800283a 	ret
    8a88:	1806d07a 	srli	r3,r3,1
    8a8c:	00800044 	movi	r2,1
    8a90:	20c00015 	stw	r3,0(r4)
    8a94:	f800283a 	ret

00008a98 <__i2b>:
    8a98:	defffd04 	addi	sp,sp,-12
    8a9c:	dc000015 	stw	r16,0(sp)
    8aa0:	04000044 	movi	r16,1
    8aa4:	dc400115 	stw	r17,4(sp)
    8aa8:	2823883a 	mov	r17,r5
    8aac:	800b883a 	mov	r5,r16
    8ab0:	dfc00215 	stw	ra,8(sp)
    8ab4:	000868c0 	call	868c <_Balloc>
    8ab8:	14400515 	stw	r17,20(r2)
    8abc:	14000415 	stw	r16,16(r2)
    8ac0:	dfc00217 	ldw	ra,8(sp)
    8ac4:	dc400117 	ldw	r17,4(sp)
    8ac8:	dc000017 	ldw	r16,0(sp)
    8acc:	dec00304 	addi	sp,sp,12
    8ad0:	f800283a 	ret

00008ad4 <__multiply>:
    8ad4:	defffa04 	addi	sp,sp,-24
    8ad8:	dcc00315 	stw	r19,12(sp)
    8adc:	dc800215 	stw	r18,8(sp)
    8ae0:	34c00417 	ldw	r19,16(r6)
    8ae4:	2c800417 	ldw	r18,16(r5)
    8ae8:	dd000415 	stw	r20,16(sp)
    8aec:	dc400115 	stw	r17,4(sp)
    8af0:	dfc00515 	stw	ra,20(sp)
    8af4:	dc000015 	stw	r16,0(sp)
    8af8:	2829883a 	mov	r20,r5
    8afc:	3023883a 	mov	r17,r6
    8b00:	94c0050e 	bge	r18,r19,8b18 <__multiply+0x44>
    8b04:	9007883a 	mov	r3,r18
    8b08:	3029883a 	mov	r20,r6
    8b0c:	9825883a 	mov	r18,r19
    8b10:	2823883a 	mov	r17,r5
    8b14:	1827883a 	mov	r19,r3
    8b18:	a0800217 	ldw	r2,8(r20)
    8b1c:	94e1883a 	add	r16,r18,r19
    8b20:	a1400117 	ldw	r5,4(r20)
    8b24:	1400010e 	bge	r2,r16,8b2c <__multiply+0x58>
    8b28:	29400044 	addi	r5,r5,1
    8b2c:	000868c0 	call	868c <_Balloc>
    8b30:	8415883a 	add	r10,r16,r16
    8b34:	12c00504 	addi	r11,r2,20
    8b38:	5295883a 	add	r10,r10,r10
    8b3c:	5a95883a 	add	r10,r11,r10
    8b40:	5807883a 	mov	r3,r11
    8b44:	5a80032e 	bgeu	r11,r10,8b54 <__multiply+0x80>
    8b48:	18000015 	stw	zero,0(r3)
    8b4c:	18c00104 	addi	r3,r3,4
    8b50:	1abffd36 	bltu	r3,r10,8b48 <__alt_data_end+0xff008b48>
    8b54:	9ce7883a 	add	r19,r19,r19
    8b58:	94a5883a 	add	r18,r18,r18
    8b5c:	89800504 	addi	r6,r17,20
    8b60:	9ce7883a 	add	r19,r19,r19
    8b64:	a3400504 	addi	r13,r20,20
    8b68:	94a5883a 	add	r18,r18,r18
    8b6c:	34d9883a 	add	r12,r6,r19
    8b70:	6c93883a 	add	r9,r13,r18
    8b74:	3300422e 	bgeu	r6,r12,8c80 <__multiply+0x1ac>
    8b78:	37c00017 	ldw	ra,0(r6)
    8b7c:	fbffffcc 	andi	r15,ra,65535
    8b80:	78001b26 	beq	r15,zero,8bf0 <__multiply+0x11c>
    8b84:	5811883a 	mov	r8,r11
    8b88:	681d883a 	mov	r14,r13
    8b8c:	000f883a 	mov	r7,zero
    8b90:	71000017 	ldw	r4,0(r14)
    8b94:	40c00017 	ldw	r3,0(r8)
    8b98:	73800104 	addi	r14,r14,4
    8b9c:	217fffcc 	andi	r5,r4,65535
    8ba0:	2bcb383a 	mul	r5,r5,r15
    8ba4:	2008d43a 	srli	r4,r4,16
    8ba8:	1c7fffcc 	andi	r17,r3,65535
    8bac:	2c4b883a 	add	r5,r5,r17
    8bb0:	29cb883a 	add	r5,r5,r7
    8bb4:	23c9383a 	mul	r4,r4,r15
    8bb8:	1806d43a 	srli	r3,r3,16
    8bbc:	280ed43a 	srli	r7,r5,16
    8bc0:	297fffcc 	andi	r5,r5,65535
    8bc4:	20c7883a 	add	r3,r4,r3
    8bc8:	19c7883a 	add	r3,r3,r7
    8bcc:	1808943a 	slli	r4,r3,16
    8bd0:	4023883a 	mov	r17,r8
    8bd4:	180ed43a 	srli	r7,r3,16
    8bd8:	214ab03a 	or	r5,r4,r5
    8bdc:	41400015 	stw	r5,0(r8)
    8be0:	42000104 	addi	r8,r8,4
    8be4:	727fea36 	bltu	r14,r9,8b90 <__alt_data_end+0xff008b90>
    8be8:	89c00115 	stw	r7,4(r17)
    8bec:	37c00017 	ldw	ra,0(r6)
    8bf0:	f83ed43a 	srli	ra,ra,16
    8bf4:	f8001f26 	beq	ra,zero,8c74 <__multiply+0x1a0>
    8bf8:	58c00017 	ldw	r3,0(r11)
    8bfc:	681d883a 	mov	r14,r13
    8c00:	581f883a 	mov	r15,r11
    8c04:	1811883a 	mov	r8,r3
    8c08:	5825883a 	mov	r18,r11
    8c0c:	000f883a 	mov	r7,zero
    8c10:	00000106 	br	8c18 <__multiply+0x144>
    8c14:	8825883a 	mov	r18,r17
    8c18:	7140000b 	ldhu	r5,0(r14)
    8c1c:	4010d43a 	srli	r8,r8,16
    8c20:	193fffcc 	andi	r4,r3,65535
    8c24:	2fcb383a 	mul	r5,r5,ra
    8c28:	7bc00104 	addi	r15,r15,4
    8c2c:	73800104 	addi	r14,r14,4
    8c30:	2a0b883a 	add	r5,r5,r8
    8c34:	29cb883a 	add	r5,r5,r7
    8c38:	2806943a 	slli	r3,r5,16
    8c3c:	94400104 	addi	r17,r18,4
    8c40:	280ad43a 	srli	r5,r5,16
    8c44:	1908b03a 	or	r4,r3,r4
    8c48:	793fff15 	stw	r4,-4(r15)
    8c4c:	70ffff17 	ldw	r3,-4(r14)
    8c50:	8a000017 	ldw	r8,0(r17)
    8c54:	1806d43a 	srli	r3,r3,16
    8c58:	413fffcc 	andi	r4,r8,65535
    8c5c:	1fc7383a 	mul	r3,r3,ra
    8c60:	1907883a 	add	r3,r3,r4
    8c64:	1947883a 	add	r3,r3,r5
    8c68:	180ed43a 	srli	r7,r3,16
    8c6c:	727fe936 	bltu	r14,r9,8c14 <__alt_data_end+0xff008c14>
    8c70:	90c00115 	stw	r3,4(r18)
    8c74:	31800104 	addi	r6,r6,4
    8c78:	5ac00104 	addi	r11,r11,4
    8c7c:	333fbe36 	bltu	r6,r12,8b78 <__alt_data_end+0xff008b78>
    8c80:	0400090e 	bge	zero,r16,8ca8 <__multiply+0x1d4>
    8c84:	50ffff17 	ldw	r3,-4(r10)
    8c88:	52bfff04 	addi	r10,r10,-4
    8c8c:	18000326 	beq	r3,zero,8c9c <__multiply+0x1c8>
    8c90:	00000506 	br	8ca8 <__multiply+0x1d4>
    8c94:	50c00017 	ldw	r3,0(r10)
    8c98:	1800031e 	bne	r3,zero,8ca8 <__multiply+0x1d4>
    8c9c:	843fffc4 	addi	r16,r16,-1
    8ca0:	52bfff04 	addi	r10,r10,-4
    8ca4:	803ffb1e 	bne	r16,zero,8c94 <__alt_data_end+0xff008c94>
    8ca8:	14000415 	stw	r16,16(r2)
    8cac:	dfc00517 	ldw	ra,20(sp)
    8cb0:	dd000417 	ldw	r20,16(sp)
    8cb4:	dcc00317 	ldw	r19,12(sp)
    8cb8:	dc800217 	ldw	r18,8(sp)
    8cbc:	dc400117 	ldw	r17,4(sp)
    8cc0:	dc000017 	ldw	r16,0(sp)
    8cc4:	dec00604 	addi	sp,sp,24
    8cc8:	f800283a 	ret

00008ccc <__pow5mult>:
    8ccc:	defffa04 	addi	sp,sp,-24
    8cd0:	dcc00315 	stw	r19,12(sp)
    8cd4:	dc000015 	stw	r16,0(sp)
    8cd8:	dfc00515 	stw	ra,20(sp)
    8cdc:	dd000415 	stw	r20,16(sp)
    8ce0:	dc800215 	stw	r18,8(sp)
    8ce4:	dc400115 	stw	r17,4(sp)
    8ce8:	308000cc 	andi	r2,r6,3
    8cec:	3021883a 	mov	r16,r6
    8cf0:	2027883a 	mov	r19,r4
    8cf4:	10002f1e 	bne	r2,zero,8db4 <__pow5mult+0xe8>
    8cf8:	2825883a 	mov	r18,r5
    8cfc:	8021d0ba 	srai	r16,r16,2
    8d00:	80001a26 	beq	r16,zero,8d6c <__pow5mult+0xa0>
    8d04:	9c401217 	ldw	r17,72(r19)
    8d08:	8800061e 	bne	r17,zero,8d24 <__pow5mult+0x58>
    8d0c:	00003406 	br	8de0 <__pow5mult+0x114>
    8d10:	8021d07a 	srai	r16,r16,1
    8d14:	80001526 	beq	r16,zero,8d6c <__pow5mult+0xa0>
    8d18:	88800017 	ldw	r2,0(r17)
    8d1c:	10001c26 	beq	r2,zero,8d90 <__pow5mult+0xc4>
    8d20:	1023883a 	mov	r17,r2
    8d24:	8080004c 	andi	r2,r16,1
    8d28:	103ff926 	beq	r2,zero,8d10 <__alt_data_end+0xff008d10>
    8d2c:	880d883a 	mov	r6,r17
    8d30:	900b883a 	mov	r5,r18
    8d34:	9809883a 	mov	r4,r19
    8d38:	0008ad40 	call	8ad4 <__multiply>
    8d3c:	90001b26 	beq	r18,zero,8dac <__pow5mult+0xe0>
    8d40:	91000117 	ldw	r4,4(r18)
    8d44:	98c01317 	ldw	r3,76(r19)
    8d48:	8021d07a 	srai	r16,r16,1
    8d4c:	2109883a 	add	r4,r4,r4
    8d50:	2109883a 	add	r4,r4,r4
    8d54:	1907883a 	add	r3,r3,r4
    8d58:	19000017 	ldw	r4,0(r3)
    8d5c:	91000015 	stw	r4,0(r18)
    8d60:	1c800015 	stw	r18,0(r3)
    8d64:	1025883a 	mov	r18,r2
    8d68:	803feb1e 	bne	r16,zero,8d18 <__alt_data_end+0xff008d18>
    8d6c:	9005883a 	mov	r2,r18
    8d70:	dfc00517 	ldw	ra,20(sp)
    8d74:	dd000417 	ldw	r20,16(sp)
    8d78:	dcc00317 	ldw	r19,12(sp)
    8d7c:	dc800217 	ldw	r18,8(sp)
    8d80:	dc400117 	ldw	r17,4(sp)
    8d84:	dc000017 	ldw	r16,0(sp)
    8d88:	dec00604 	addi	sp,sp,24
    8d8c:	f800283a 	ret
    8d90:	880d883a 	mov	r6,r17
    8d94:	880b883a 	mov	r5,r17
    8d98:	9809883a 	mov	r4,r19
    8d9c:	0008ad40 	call	8ad4 <__multiply>
    8da0:	88800015 	stw	r2,0(r17)
    8da4:	10000015 	stw	zero,0(r2)
    8da8:	003fdd06 	br	8d20 <__alt_data_end+0xff008d20>
    8dac:	1025883a 	mov	r18,r2
    8db0:	003fd706 	br	8d10 <__alt_data_end+0xff008d10>
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	1085883a 	add	r2,r2,r2
    8dbc:	00c00074 	movhi	r3,1
    8dc0:	18c57304 	addi	r3,r3,5580
    8dc4:	1085883a 	add	r2,r2,r2
    8dc8:	1885883a 	add	r2,r3,r2
    8dcc:	11800017 	ldw	r6,0(r2)
    8dd0:	000f883a 	mov	r7,zero
    8dd4:	000875c0 	call	875c <__multadd>
    8dd8:	1025883a 	mov	r18,r2
    8ddc:	003fc706 	br	8cfc <__alt_data_end+0xff008cfc>
    8de0:	05000044 	movi	r20,1
    8de4:	a00b883a 	mov	r5,r20
    8de8:	9809883a 	mov	r4,r19
    8dec:	000868c0 	call	868c <_Balloc>
    8df0:	1023883a 	mov	r17,r2
    8df4:	00809c44 	movi	r2,625
    8df8:	88800515 	stw	r2,20(r17)
    8dfc:	8d000415 	stw	r20,16(r17)
    8e00:	9c401215 	stw	r17,72(r19)
    8e04:	88000015 	stw	zero,0(r17)
    8e08:	003fc606 	br	8d24 <__alt_data_end+0xff008d24>

00008e0c <__lshift>:
    8e0c:	defff904 	addi	sp,sp,-28
    8e10:	dd400515 	stw	r21,20(sp)
    8e14:	dcc00315 	stw	r19,12(sp)
    8e18:	302bd17a 	srai	r21,r6,5
    8e1c:	2cc00417 	ldw	r19,16(r5)
    8e20:	28800217 	ldw	r2,8(r5)
    8e24:	dd000415 	stw	r20,16(sp)
    8e28:	ace7883a 	add	r19,r21,r19
    8e2c:	dc800215 	stw	r18,8(sp)
    8e30:	dc400115 	stw	r17,4(sp)
    8e34:	dc000015 	stw	r16,0(sp)
    8e38:	dfc00615 	stw	ra,24(sp)
    8e3c:	9c000044 	addi	r16,r19,1
    8e40:	2823883a 	mov	r17,r5
    8e44:	3029883a 	mov	r20,r6
    8e48:	2025883a 	mov	r18,r4
    8e4c:	29400117 	ldw	r5,4(r5)
    8e50:	1400030e 	bge	r2,r16,8e60 <__lshift+0x54>
    8e54:	1085883a 	add	r2,r2,r2
    8e58:	29400044 	addi	r5,r5,1
    8e5c:	143ffd16 	blt	r2,r16,8e54 <__alt_data_end+0xff008e54>
    8e60:	9009883a 	mov	r4,r18
    8e64:	000868c0 	call	868c <_Balloc>
    8e68:	10c00504 	addi	r3,r2,20
    8e6c:	0540070e 	bge	zero,r21,8e8c <__lshift+0x80>
    8e70:	ad6b883a 	add	r21,r21,r21
    8e74:	ad6b883a 	add	r21,r21,r21
    8e78:	1809883a 	mov	r4,r3
    8e7c:	1d47883a 	add	r3,r3,r21
    8e80:	20000015 	stw	zero,0(r4)
    8e84:	21000104 	addi	r4,r4,4
    8e88:	193ffd1e 	bne	r3,r4,8e80 <__alt_data_end+0xff008e80>
    8e8c:	8a000417 	ldw	r8,16(r17)
    8e90:	89000504 	addi	r4,r17,20
    8e94:	a18007cc 	andi	r6,r20,31
    8e98:	4211883a 	add	r8,r8,r8
    8e9c:	4211883a 	add	r8,r8,r8
    8ea0:	2211883a 	add	r8,r4,r8
    8ea4:	30002326 	beq	r6,zero,8f34 <__lshift+0x128>
    8ea8:	02400804 	movi	r9,32
    8eac:	4993c83a 	sub	r9,r9,r6
    8eb0:	000b883a 	mov	r5,zero
    8eb4:	21c00017 	ldw	r7,0(r4)
    8eb8:	1815883a 	mov	r10,r3
    8ebc:	18c00104 	addi	r3,r3,4
    8ec0:	398e983a 	sll	r7,r7,r6
    8ec4:	21000104 	addi	r4,r4,4
    8ec8:	394ab03a 	or	r5,r7,r5
    8ecc:	197fff15 	stw	r5,-4(r3)
    8ed0:	217fff17 	ldw	r5,-4(r4)
    8ed4:	2a4ad83a 	srl	r5,r5,r9
    8ed8:	223ff636 	bltu	r4,r8,8eb4 <__alt_data_end+0xff008eb4>
    8edc:	51400115 	stw	r5,4(r10)
    8ee0:	28001a1e 	bne	r5,zero,8f4c <__lshift+0x140>
    8ee4:	843fffc4 	addi	r16,r16,-1
    8ee8:	14000415 	stw	r16,16(r2)
    8eec:	88000826 	beq	r17,zero,8f10 <__lshift+0x104>
    8ef0:	89000117 	ldw	r4,4(r17)
    8ef4:	90c01317 	ldw	r3,76(r18)
    8ef8:	2109883a 	add	r4,r4,r4
    8efc:	2109883a 	add	r4,r4,r4
    8f00:	1907883a 	add	r3,r3,r4
    8f04:	19000017 	ldw	r4,0(r3)
    8f08:	89000015 	stw	r4,0(r17)
    8f0c:	1c400015 	stw	r17,0(r3)
    8f10:	dfc00617 	ldw	ra,24(sp)
    8f14:	dd400517 	ldw	r21,20(sp)
    8f18:	dd000417 	ldw	r20,16(sp)
    8f1c:	dcc00317 	ldw	r19,12(sp)
    8f20:	dc800217 	ldw	r18,8(sp)
    8f24:	dc400117 	ldw	r17,4(sp)
    8f28:	dc000017 	ldw	r16,0(sp)
    8f2c:	dec00704 	addi	sp,sp,28
    8f30:	f800283a 	ret
    8f34:	21400017 	ldw	r5,0(r4)
    8f38:	18c00104 	addi	r3,r3,4
    8f3c:	21000104 	addi	r4,r4,4
    8f40:	197fff15 	stw	r5,-4(r3)
    8f44:	223ffb36 	bltu	r4,r8,8f34 <__alt_data_end+0xff008f34>
    8f48:	003fe606 	br	8ee4 <__alt_data_end+0xff008ee4>
    8f4c:	9c000084 	addi	r16,r19,2
    8f50:	003fe406 	br	8ee4 <__alt_data_end+0xff008ee4>

00008f54 <__mcmp>:
    8f54:	20800417 	ldw	r2,16(r4)
    8f58:	28c00417 	ldw	r3,16(r5)
    8f5c:	10c5c83a 	sub	r2,r2,r3
    8f60:	1000111e 	bne	r2,zero,8fa8 <__mcmp+0x54>
    8f64:	18c7883a 	add	r3,r3,r3
    8f68:	18c7883a 	add	r3,r3,r3
    8f6c:	21000504 	addi	r4,r4,20
    8f70:	29400504 	addi	r5,r5,20
    8f74:	20c5883a 	add	r2,r4,r3
    8f78:	28cb883a 	add	r5,r5,r3
    8f7c:	00000106 	br	8f84 <__mcmp+0x30>
    8f80:	20800a2e 	bgeu	r4,r2,8fac <__mcmp+0x58>
    8f84:	10bfff04 	addi	r2,r2,-4
    8f88:	297fff04 	addi	r5,r5,-4
    8f8c:	11800017 	ldw	r6,0(r2)
    8f90:	28c00017 	ldw	r3,0(r5)
    8f94:	30fffa26 	beq	r6,r3,8f80 <__alt_data_end+0xff008f80>
    8f98:	30c00236 	bltu	r6,r3,8fa4 <__mcmp+0x50>
    8f9c:	00800044 	movi	r2,1
    8fa0:	f800283a 	ret
    8fa4:	00bfffc4 	movi	r2,-1
    8fa8:	f800283a 	ret
    8fac:	0005883a 	mov	r2,zero
    8fb0:	f800283a 	ret

00008fb4 <__mdiff>:
    8fb4:	28c00417 	ldw	r3,16(r5)
    8fb8:	30800417 	ldw	r2,16(r6)
    8fbc:	defffa04 	addi	sp,sp,-24
    8fc0:	dcc00315 	stw	r19,12(sp)
    8fc4:	dc800215 	stw	r18,8(sp)
    8fc8:	dfc00515 	stw	ra,20(sp)
    8fcc:	dd000415 	stw	r20,16(sp)
    8fd0:	dc400115 	stw	r17,4(sp)
    8fd4:	dc000015 	stw	r16,0(sp)
    8fd8:	1887c83a 	sub	r3,r3,r2
    8fdc:	2825883a 	mov	r18,r5
    8fe0:	3027883a 	mov	r19,r6
    8fe4:	1800141e 	bne	r3,zero,9038 <__mdiff+0x84>
    8fe8:	1085883a 	add	r2,r2,r2
    8fec:	1085883a 	add	r2,r2,r2
    8ff0:	2a000504 	addi	r8,r5,20
    8ff4:	34000504 	addi	r16,r6,20
    8ff8:	4087883a 	add	r3,r8,r2
    8ffc:	8085883a 	add	r2,r16,r2
    9000:	00000106 	br	9008 <__mdiff+0x54>
    9004:	40c0592e 	bgeu	r8,r3,916c <__mdiff+0x1b8>
    9008:	18ffff04 	addi	r3,r3,-4
    900c:	10bfff04 	addi	r2,r2,-4
    9010:	19c00017 	ldw	r7,0(r3)
    9014:	11400017 	ldw	r5,0(r2)
    9018:	397ffa26 	beq	r7,r5,9004 <__alt_data_end+0xff009004>
    901c:	3940592e 	bgeu	r7,r5,9184 <__mdiff+0x1d0>
    9020:	9005883a 	mov	r2,r18
    9024:	4023883a 	mov	r17,r8
    9028:	9825883a 	mov	r18,r19
    902c:	05000044 	movi	r20,1
    9030:	1027883a 	mov	r19,r2
    9034:	00000406 	br	9048 <__mdiff+0x94>
    9038:	18005616 	blt	r3,zero,9194 <__mdiff+0x1e0>
    903c:	34400504 	addi	r17,r6,20
    9040:	2c000504 	addi	r16,r5,20
    9044:	0029883a 	mov	r20,zero
    9048:	91400117 	ldw	r5,4(r18)
    904c:	000868c0 	call	868c <_Balloc>
    9050:	92400417 	ldw	r9,16(r18)
    9054:	9b000417 	ldw	r12,16(r19)
    9058:	12c00504 	addi	r11,r2,20
    905c:	4a51883a 	add	r8,r9,r9
    9060:	6319883a 	add	r12,r12,r12
    9064:	4211883a 	add	r8,r8,r8
    9068:	6319883a 	add	r12,r12,r12
    906c:	15000315 	stw	r20,12(r2)
    9070:	8211883a 	add	r8,r16,r8
    9074:	8b19883a 	add	r12,r17,r12
    9078:	0007883a 	mov	r3,zero
    907c:	81400017 	ldw	r5,0(r16)
    9080:	89c00017 	ldw	r7,0(r17)
    9084:	59800104 	addi	r6,r11,4
    9088:	293fffcc 	andi	r4,r5,65535
    908c:	20c7883a 	add	r3,r4,r3
    9090:	393fffcc 	andi	r4,r7,65535
    9094:	1909c83a 	sub	r4,r3,r4
    9098:	280ad43a 	srli	r5,r5,16
    909c:	380ed43a 	srli	r7,r7,16
    90a0:	2007d43a 	srai	r3,r4,16
    90a4:	213fffcc 	andi	r4,r4,65535
    90a8:	29cbc83a 	sub	r5,r5,r7
    90ac:	28c7883a 	add	r3,r5,r3
    90b0:	180a943a 	slli	r5,r3,16
    90b4:	8c400104 	addi	r17,r17,4
    90b8:	84000104 	addi	r16,r16,4
    90bc:	2908b03a 	or	r4,r5,r4
    90c0:	59000015 	stw	r4,0(r11)
    90c4:	1807d43a 	srai	r3,r3,16
    90c8:	3015883a 	mov	r10,r6
    90cc:	3017883a 	mov	r11,r6
    90d0:	8b3fea36 	bltu	r17,r12,907c <__alt_data_end+0xff00907c>
    90d4:	8200162e 	bgeu	r16,r8,9130 <__mdiff+0x17c>
    90d8:	8017883a 	mov	r11,r16
    90dc:	59400017 	ldw	r5,0(r11)
    90e0:	31800104 	addi	r6,r6,4
    90e4:	5ac00104 	addi	r11,r11,4
    90e8:	293fffcc 	andi	r4,r5,65535
    90ec:	20c7883a 	add	r3,r4,r3
    90f0:	280ed43a 	srli	r7,r5,16
    90f4:	180bd43a 	srai	r5,r3,16
    90f8:	193fffcc 	andi	r4,r3,65535
    90fc:	3947883a 	add	r3,r7,r5
    9100:	180a943a 	slli	r5,r3,16
    9104:	1807d43a 	srai	r3,r3,16
    9108:	2908b03a 	or	r4,r5,r4
    910c:	313fff15 	stw	r4,-4(r6)
    9110:	5a3ff236 	bltu	r11,r8,90dc <__alt_data_end+0xff0090dc>
    9114:	0406303a 	nor	r3,zero,r16
    9118:	1a07883a 	add	r3,r3,r8
    911c:	1806d0ba 	srli	r3,r3,2
    9120:	18c00044 	addi	r3,r3,1
    9124:	18c7883a 	add	r3,r3,r3
    9128:	18c7883a 	add	r3,r3,r3
    912c:	50d5883a 	add	r10,r10,r3
    9130:	50ffff04 	addi	r3,r10,-4
    9134:	2000041e 	bne	r4,zero,9148 <__mdiff+0x194>
    9138:	18ffff04 	addi	r3,r3,-4
    913c:	19000017 	ldw	r4,0(r3)
    9140:	4a7fffc4 	addi	r9,r9,-1
    9144:	203ffc26 	beq	r4,zero,9138 <__alt_data_end+0xff009138>
    9148:	12400415 	stw	r9,16(r2)
    914c:	dfc00517 	ldw	ra,20(sp)
    9150:	dd000417 	ldw	r20,16(sp)
    9154:	dcc00317 	ldw	r19,12(sp)
    9158:	dc800217 	ldw	r18,8(sp)
    915c:	dc400117 	ldw	r17,4(sp)
    9160:	dc000017 	ldw	r16,0(sp)
    9164:	dec00604 	addi	sp,sp,24
    9168:	f800283a 	ret
    916c:	000b883a 	mov	r5,zero
    9170:	000868c0 	call	868c <_Balloc>
    9174:	00c00044 	movi	r3,1
    9178:	10c00415 	stw	r3,16(r2)
    917c:	10000515 	stw	zero,20(r2)
    9180:	003ff206 	br	914c <__alt_data_end+0xff00914c>
    9184:	8023883a 	mov	r17,r16
    9188:	0029883a 	mov	r20,zero
    918c:	4021883a 	mov	r16,r8
    9190:	003fad06 	br	9048 <__alt_data_end+0xff009048>
    9194:	9005883a 	mov	r2,r18
    9198:	94400504 	addi	r17,r18,20
    919c:	9c000504 	addi	r16,r19,20
    91a0:	9825883a 	mov	r18,r19
    91a4:	05000044 	movi	r20,1
    91a8:	1027883a 	mov	r19,r2
    91ac:	003fa606 	br	9048 <__alt_data_end+0xff009048>

000091b0 <__ulp>:
    91b0:	295ffc2c 	andhi	r5,r5,32752
    91b4:	00bf3034 	movhi	r2,64704
    91b8:	2887883a 	add	r3,r5,r2
    91bc:	00c0020e 	bge	zero,r3,91c8 <__ulp+0x18>
    91c0:	0005883a 	mov	r2,zero
    91c4:	f800283a 	ret
    91c8:	00c7c83a 	sub	r3,zero,r3
    91cc:	1807d53a 	srai	r3,r3,20
    91d0:	008004c4 	movi	r2,19
    91d4:	10c00b0e 	bge	r2,r3,9204 <__ulp+0x54>
    91d8:	18bffb04 	addi	r2,r3,-20
    91dc:	01000784 	movi	r4,30
    91e0:	0007883a 	mov	r3,zero
    91e4:	20800516 	blt	r4,r2,91fc <__ulp+0x4c>
    91e8:	010007c4 	movi	r4,31
    91ec:	2089c83a 	sub	r4,r4,r2
    91f0:	00800044 	movi	r2,1
    91f4:	1104983a 	sll	r2,r2,r4
    91f8:	f800283a 	ret
    91fc:	00800044 	movi	r2,1
    9200:	f800283a 	ret
    9204:	01400234 	movhi	r5,8
    9208:	28c7d83a 	sra	r3,r5,r3
    920c:	0005883a 	mov	r2,zero
    9210:	f800283a 	ret

00009214 <__b2d>:
    9214:	defffa04 	addi	sp,sp,-24
    9218:	dc000015 	stw	r16,0(sp)
    921c:	24000417 	ldw	r16,16(r4)
    9220:	dc400115 	stw	r17,4(sp)
    9224:	24400504 	addi	r17,r4,20
    9228:	8421883a 	add	r16,r16,r16
    922c:	8421883a 	add	r16,r16,r16
    9230:	8c21883a 	add	r16,r17,r16
    9234:	dc800215 	stw	r18,8(sp)
    9238:	84bfff17 	ldw	r18,-4(r16)
    923c:	dd000415 	stw	r20,16(sp)
    9240:	dcc00315 	stw	r19,12(sp)
    9244:	9009883a 	mov	r4,r18
    9248:	2829883a 	mov	r20,r5
    924c:	dfc00515 	stw	ra,20(sp)
    9250:	00089800 	call	8980 <__hi0bits>
    9254:	00c00804 	movi	r3,32
    9258:	1889c83a 	sub	r4,r3,r2
    925c:	a1000015 	stw	r4,0(r20)
    9260:	01000284 	movi	r4,10
    9264:	84ffff04 	addi	r19,r16,-4
    9268:	20801216 	blt	r4,r2,92b4 <__b2d+0xa0>
    926c:	018002c4 	movi	r6,11
    9270:	308dc83a 	sub	r6,r6,r2
    9274:	9186d83a 	srl	r3,r18,r6
    9278:	18cffc34 	orhi	r3,r3,16368
    927c:	8cc0212e 	bgeu	r17,r19,9304 <__b2d+0xf0>
    9280:	813ffe17 	ldw	r4,-8(r16)
    9284:	218cd83a 	srl	r6,r4,r6
    9288:	10800544 	addi	r2,r2,21
    928c:	9084983a 	sll	r2,r18,r2
    9290:	1184b03a 	or	r2,r2,r6
    9294:	dfc00517 	ldw	ra,20(sp)
    9298:	dd000417 	ldw	r20,16(sp)
    929c:	dcc00317 	ldw	r19,12(sp)
    92a0:	dc800217 	ldw	r18,8(sp)
    92a4:	dc400117 	ldw	r17,4(sp)
    92a8:	dc000017 	ldw	r16,0(sp)
    92ac:	dec00604 	addi	sp,sp,24
    92b0:	f800283a 	ret
    92b4:	8cc00f2e 	bgeu	r17,r19,92f4 <__b2d+0xe0>
    92b8:	117ffd44 	addi	r5,r2,-11
    92bc:	80bffe17 	ldw	r2,-8(r16)
    92c0:	28000e26 	beq	r5,zero,92fc <__b2d+0xe8>
    92c4:	1949c83a 	sub	r4,r3,r5
    92c8:	9164983a 	sll	r18,r18,r5
    92cc:	1106d83a 	srl	r3,r2,r4
    92d0:	81bffe04 	addi	r6,r16,-8
    92d4:	948ffc34 	orhi	r18,r18,16368
    92d8:	90c6b03a 	or	r3,r18,r3
    92dc:	89800e2e 	bgeu	r17,r6,9318 <__b2d+0x104>
    92e0:	81bffd17 	ldw	r6,-12(r16)
    92e4:	1144983a 	sll	r2,r2,r5
    92e8:	310ad83a 	srl	r5,r6,r4
    92ec:	2884b03a 	or	r2,r5,r2
    92f0:	003fe806 	br	9294 <__alt_data_end+0xff009294>
    92f4:	10bffd44 	addi	r2,r2,-11
    92f8:	1000041e 	bne	r2,zero,930c <__b2d+0xf8>
    92fc:	90cffc34 	orhi	r3,r18,16368
    9300:	003fe406 	br	9294 <__alt_data_end+0xff009294>
    9304:	000d883a 	mov	r6,zero
    9308:	003fdf06 	br	9288 <__alt_data_end+0xff009288>
    930c:	90a4983a 	sll	r18,r18,r2
    9310:	0005883a 	mov	r2,zero
    9314:	003ff906 	br	92fc <__alt_data_end+0xff0092fc>
    9318:	1144983a 	sll	r2,r2,r5
    931c:	003fdd06 	br	9294 <__alt_data_end+0xff009294>

00009320 <__d2b>:
    9320:	defff804 	addi	sp,sp,-32
    9324:	dc000215 	stw	r16,8(sp)
    9328:	3021883a 	mov	r16,r6
    932c:	dc400315 	stw	r17,12(sp)
    9330:	8022907a 	slli	r17,r16,1
    9334:	dd000615 	stw	r20,24(sp)
    9338:	2829883a 	mov	r20,r5
    933c:	01400044 	movi	r5,1
    9340:	dcc00515 	stw	r19,20(sp)
    9344:	dc800415 	stw	r18,16(sp)
    9348:	dfc00715 	stw	ra,28(sp)
    934c:	3825883a 	mov	r18,r7
    9350:	8822d57a 	srli	r17,r17,21
    9354:	000868c0 	call	868c <_Balloc>
    9358:	1027883a 	mov	r19,r2
    935c:	00800434 	movhi	r2,16
    9360:	10bfffc4 	addi	r2,r2,-1
    9364:	808c703a 	and	r6,r16,r2
    9368:	88000126 	beq	r17,zero,9370 <__d2b+0x50>
    936c:	31800434 	orhi	r6,r6,16
    9370:	d9800015 	stw	r6,0(sp)
    9374:	a0002426 	beq	r20,zero,9408 <__d2b+0xe8>
    9378:	d9000104 	addi	r4,sp,4
    937c:	dd000115 	stw	r20,4(sp)
    9380:	00089e80 	call	89e8 <__lo0bits>
    9384:	d8c00017 	ldw	r3,0(sp)
    9388:	10002f1e 	bne	r2,zero,9448 <__d2b+0x128>
    938c:	d9000117 	ldw	r4,4(sp)
    9390:	99000515 	stw	r4,20(r19)
    9394:	1821003a 	cmpeq	r16,r3,zero
    9398:	01000084 	movi	r4,2
    939c:	2421c83a 	sub	r16,r4,r16
    93a0:	98c00615 	stw	r3,24(r19)
    93a4:	9c000415 	stw	r16,16(r19)
    93a8:	88001f1e 	bne	r17,zero,9428 <__d2b+0x108>
    93ac:	10bef384 	addi	r2,r2,-1074
    93b0:	90800015 	stw	r2,0(r18)
    93b4:	00900034 	movhi	r2,16384
    93b8:	10bfffc4 	addi	r2,r2,-1
    93bc:	8085883a 	add	r2,r16,r2
    93c0:	1085883a 	add	r2,r2,r2
    93c4:	1085883a 	add	r2,r2,r2
    93c8:	9885883a 	add	r2,r19,r2
    93cc:	11000517 	ldw	r4,20(r2)
    93d0:	8020917a 	slli	r16,r16,5
    93d4:	00089800 	call	8980 <__hi0bits>
    93d8:	d8c00817 	ldw	r3,32(sp)
    93dc:	8085c83a 	sub	r2,r16,r2
    93e0:	18800015 	stw	r2,0(r3)
    93e4:	9805883a 	mov	r2,r19
    93e8:	dfc00717 	ldw	ra,28(sp)
    93ec:	dd000617 	ldw	r20,24(sp)
    93f0:	dcc00517 	ldw	r19,20(sp)
    93f4:	dc800417 	ldw	r18,16(sp)
    93f8:	dc400317 	ldw	r17,12(sp)
    93fc:	dc000217 	ldw	r16,8(sp)
    9400:	dec00804 	addi	sp,sp,32
    9404:	f800283a 	ret
    9408:	d809883a 	mov	r4,sp
    940c:	00089e80 	call	89e8 <__lo0bits>
    9410:	d8c00017 	ldw	r3,0(sp)
    9414:	04000044 	movi	r16,1
    9418:	9c000415 	stw	r16,16(r19)
    941c:	98c00515 	stw	r3,20(r19)
    9420:	10800804 	addi	r2,r2,32
    9424:	883fe126 	beq	r17,zero,93ac <__alt_data_end+0xff0093ac>
    9428:	00c00d44 	movi	r3,53
    942c:	8c7ef344 	addi	r17,r17,-1075
    9430:	88a3883a 	add	r17,r17,r2
    9434:	1885c83a 	sub	r2,r3,r2
    9438:	d8c00817 	ldw	r3,32(sp)
    943c:	94400015 	stw	r17,0(r18)
    9440:	18800015 	stw	r2,0(r3)
    9444:	003fe706 	br	93e4 <__alt_data_end+0xff0093e4>
    9448:	01000804 	movi	r4,32
    944c:	2089c83a 	sub	r4,r4,r2
    9450:	1908983a 	sll	r4,r3,r4
    9454:	d9400117 	ldw	r5,4(sp)
    9458:	1886d83a 	srl	r3,r3,r2
    945c:	2148b03a 	or	r4,r4,r5
    9460:	99000515 	stw	r4,20(r19)
    9464:	d8c00015 	stw	r3,0(sp)
    9468:	003fca06 	br	9394 <__alt_data_end+0xff009394>

0000946c <__ratio>:
    946c:	defff904 	addi	sp,sp,-28
    9470:	dc400315 	stw	r17,12(sp)
    9474:	2823883a 	mov	r17,r5
    9478:	d9400104 	addi	r5,sp,4
    947c:	dfc00615 	stw	ra,24(sp)
    9480:	dcc00515 	stw	r19,20(sp)
    9484:	dc800415 	stw	r18,16(sp)
    9488:	2027883a 	mov	r19,r4
    948c:	dc000215 	stw	r16,8(sp)
    9490:	00092140 	call	9214 <__b2d>
    9494:	d80b883a 	mov	r5,sp
    9498:	8809883a 	mov	r4,r17
    949c:	1025883a 	mov	r18,r2
    94a0:	1821883a 	mov	r16,r3
    94a4:	00092140 	call	9214 <__b2d>
    94a8:	8a000417 	ldw	r8,16(r17)
    94ac:	99000417 	ldw	r4,16(r19)
    94b0:	d9400117 	ldw	r5,4(sp)
    94b4:	2209c83a 	sub	r4,r4,r8
    94b8:	2010917a 	slli	r8,r4,5
    94bc:	d9000017 	ldw	r4,0(sp)
    94c0:	2909c83a 	sub	r4,r5,r4
    94c4:	4109883a 	add	r4,r8,r4
    94c8:	01000e0e 	bge	zero,r4,9504 <__ratio+0x98>
    94cc:	2008953a 	slli	r4,r4,20
    94d0:	2421883a 	add	r16,r4,r16
    94d4:	100d883a 	mov	r6,r2
    94d8:	180f883a 	mov	r7,r3
    94dc:	9009883a 	mov	r4,r18
    94e0:	800b883a 	mov	r5,r16
    94e4:	0001d840 	call	1d84 <__divdf3>
    94e8:	dfc00617 	ldw	ra,24(sp)
    94ec:	dcc00517 	ldw	r19,20(sp)
    94f0:	dc800417 	ldw	r18,16(sp)
    94f4:	dc400317 	ldw	r17,12(sp)
    94f8:	dc000217 	ldw	r16,8(sp)
    94fc:	dec00704 	addi	sp,sp,28
    9500:	f800283a 	ret
    9504:	2008953a 	slli	r4,r4,20
    9508:	1907c83a 	sub	r3,r3,r4
    950c:	003ff106 	br	94d4 <__alt_data_end+0xff0094d4>

00009510 <_mprec_log10>:
    9510:	defffe04 	addi	sp,sp,-8
    9514:	dc000015 	stw	r16,0(sp)
    9518:	dfc00115 	stw	ra,4(sp)
    951c:	008005c4 	movi	r2,23
    9520:	2021883a 	mov	r16,r4
    9524:	11000d0e 	bge	r2,r4,955c <_mprec_log10+0x4c>
    9528:	0005883a 	mov	r2,zero
    952c:	00cffc34 	movhi	r3,16368
    9530:	843fffc4 	addi	r16,r16,-1
    9534:	000d883a 	mov	r6,zero
    9538:	01d00934 	movhi	r7,16420
    953c:	1009883a 	mov	r4,r2
    9540:	180b883a 	mov	r5,r3
    9544:	000d3a80 	call	d3a8 <__muldf3>
    9548:	803ff91e 	bne	r16,zero,9530 <__alt_data_end+0xff009530>
    954c:	dfc00117 	ldw	ra,4(sp)
    9550:	dc000017 	ldw	r16,0(sp)
    9554:	dec00204 	addi	sp,sp,8
    9558:	f800283a 	ret
    955c:	202090fa 	slli	r16,r4,3
    9560:	00800074 	movhi	r2,1
    9564:	10858a04 	addi	r2,r2,5672
    9568:	1421883a 	add	r16,r2,r16
    956c:	80800017 	ldw	r2,0(r16)
    9570:	80c00117 	ldw	r3,4(r16)
    9574:	dfc00117 	ldw	ra,4(sp)
    9578:	dc000017 	ldw	r16,0(sp)
    957c:	dec00204 	addi	sp,sp,8
    9580:	f800283a 	ret

00009584 <__copybits>:
    9584:	297fffc4 	addi	r5,r5,-1
    9588:	280fd17a 	srai	r7,r5,5
    958c:	30c00417 	ldw	r3,16(r6)
    9590:	30800504 	addi	r2,r6,20
    9594:	39c00044 	addi	r7,r7,1
    9598:	18c7883a 	add	r3,r3,r3
    959c:	39cf883a 	add	r7,r7,r7
    95a0:	18c7883a 	add	r3,r3,r3
    95a4:	39cf883a 	add	r7,r7,r7
    95a8:	10c7883a 	add	r3,r2,r3
    95ac:	21cf883a 	add	r7,r4,r7
    95b0:	10c00d2e 	bgeu	r2,r3,95e8 <__copybits+0x64>
    95b4:	200b883a 	mov	r5,r4
    95b8:	12000017 	ldw	r8,0(r2)
    95bc:	29400104 	addi	r5,r5,4
    95c0:	10800104 	addi	r2,r2,4
    95c4:	2a3fff15 	stw	r8,-4(r5)
    95c8:	10fffb36 	bltu	r2,r3,95b8 <__alt_data_end+0xff0095b8>
    95cc:	1985c83a 	sub	r2,r3,r6
    95d0:	10bffac4 	addi	r2,r2,-21
    95d4:	1004d0ba 	srli	r2,r2,2
    95d8:	10800044 	addi	r2,r2,1
    95dc:	1085883a 	add	r2,r2,r2
    95e0:	1085883a 	add	r2,r2,r2
    95e4:	2089883a 	add	r4,r4,r2
    95e8:	21c0032e 	bgeu	r4,r7,95f8 <__copybits+0x74>
    95ec:	20000015 	stw	zero,0(r4)
    95f0:	21000104 	addi	r4,r4,4
    95f4:	21fffd36 	bltu	r4,r7,95ec <__alt_data_end+0xff0095ec>
    95f8:	f800283a 	ret

000095fc <__any_on>:
    95fc:	20c00417 	ldw	r3,16(r4)
    9600:	2805d17a 	srai	r2,r5,5
    9604:	21000504 	addi	r4,r4,20
    9608:	18800d0e 	bge	r3,r2,9640 <__any_on+0x44>
    960c:	18c7883a 	add	r3,r3,r3
    9610:	18c7883a 	add	r3,r3,r3
    9614:	20c7883a 	add	r3,r4,r3
    9618:	20c0192e 	bgeu	r4,r3,9680 <__any_on+0x84>
    961c:	18bfff17 	ldw	r2,-4(r3)
    9620:	18ffff04 	addi	r3,r3,-4
    9624:	1000041e 	bne	r2,zero,9638 <__any_on+0x3c>
    9628:	20c0142e 	bgeu	r4,r3,967c <__any_on+0x80>
    962c:	18ffff04 	addi	r3,r3,-4
    9630:	19400017 	ldw	r5,0(r3)
    9634:	283ffc26 	beq	r5,zero,9628 <__alt_data_end+0xff009628>
    9638:	00800044 	movi	r2,1
    963c:	f800283a 	ret
    9640:	10c00a0e 	bge	r2,r3,966c <__any_on+0x70>
    9644:	1085883a 	add	r2,r2,r2
    9648:	1085883a 	add	r2,r2,r2
    964c:	294007cc 	andi	r5,r5,31
    9650:	2087883a 	add	r3,r4,r2
    9654:	283ff026 	beq	r5,zero,9618 <__alt_data_end+0xff009618>
    9658:	19800017 	ldw	r6,0(r3)
    965c:	3144d83a 	srl	r2,r6,r5
    9660:	114a983a 	sll	r5,r2,r5
    9664:	317ff41e 	bne	r6,r5,9638 <__alt_data_end+0xff009638>
    9668:	003feb06 	br	9618 <__alt_data_end+0xff009618>
    966c:	1085883a 	add	r2,r2,r2
    9670:	1085883a 	add	r2,r2,r2
    9674:	2087883a 	add	r3,r4,r2
    9678:	003fe706 	br	9618 <__alt_data_end+0xff009618>
    967c:	f800283a 	ret
    9680:	0005883a 	mov	r2,zero
    9684:	f800283a 	ret

00009688 <_realloc_r>:
    9688:	defff604 	addi	sp,sp,-40
    968c:	dc800215 	stw	r18,8(sp)
    9690:	dfc00915 	stw	ra,36(sp)
    9694:	df000815 	stw	fp,32(sp)
    9698:	ddc00715 	stw	r23,28(sp)
    969c:	dd800615 	stw	r22,24(sp)
    96a0:	dd400515 	stw	r21,20(sp)
    96a4:	dd000415 	stw	r20,16(sp)
    96a8:	dcc00315 	stw	r19,12(sp)
    96ac:	dc400115 	stw	r17,4(sp)
    96b0:	dc000015 	stw	r16,0(sp)
    96b4:	3025883a 	mov	r18,r6
    96b8:	2800b726 	beq	r5,zero,9998 <_realloc_r+0x310>
    96bc:	282b883a 	mov	r21,r5
    96c0:	2029883a 	mov	r20,r4
    96c4:	000ea940 	call	ea94 <__malloc_lock>
    96c8:	a8bfff17 	ldw	r2,-4(r21)
    96cc:	043fff04 	movi	r16,-4
    96d0:	90c002c4 	addi	r3,r18,11
    96d4:	01000584 	movi	r4,22
    96d8:	acfffe04 	addi	r19,r21,-8
    96dc:	1420703a 	and	r16,r2,r16
    96e0:	20c0332e 	bgeu	r4,r3,97b0 <_realloc_r+0x128>
    96e4:	047ffe04 	movi	r17,-8
    96e8:	1c62703a 	and	r17,r3,r17
    96ec:	8807883a 	mov	r3,r17
    96f0:	88005816 	blt	r17,zero,9854 <_realloc_r+0x1cc>
    96f4:	8c805736 	bltu	r17,r18,9854 <_realloc_r+0x1cc>
    96f8:	80c0300e 	bge	r16,r3,97bc <_realloc_r+0x134>
    96fc:	07000074 	movhi	fp,1
    9700:	e7060f04 	addi	fp,fp,6204
    9704:	e1c00217 	ldw	r7,8(fp)
    9708:	9c09883a 	add	r4,r19,r16
    970c:	22000117 	ldw	r8,4(r4)
    9710:	21c06326 	beq	r4,r7,98a0 <_realloc_r+0x218>
    9714:	017fff84 	movi	r5,-2
    9718:	414a703a 	and	r5,r8,r5
    971c:	214b883a 	add	r5,r4,r5
    9720:	29800117 	ldw	r6,4(r5)
    9724:	3180004c 	andi	r6,r6,1
    9728:	30003f26 	beq	r6,zero,9828 <_realloc_r+0x1a0>
    972c:	1080004c 	andi	r2,r2,1
    9730:	10008326 	beq	r2,zero,9940 <_realloc_r+0x2b8>
    9734:	900b883a 	mov	r5,r18
    9738:	a009883a 	mov	r4,r20
    973c:	00027a00 	call	27a0 <_malloc_r>
    9740:	1025883a 	mov	r18,r2
    9744:	10011e26 	beq	r2,zero,9bc0 <_realloc_r+0x538>
    9748:	a93fff17 	ldw	r4,-4(r21)
    974c:	10fffe04 	addi	r3,r2,-8
    9750:	00bfff84 	movi	r2,-2
    9754:	2084703a 	and	r2,r4,r2
    9758:	9885883a 	add	r2,r19,r2
    975c:	1880ee26 	beq	r3,r2,9b18 <_realloc_r+0x490>
    9760:	81bfff04 	addi	r6,r16,-4
    9764:	00800904 	movi	r2,36
    9768:	1180b836 	bltu	r2,r6,9a4c <_realloc_r+0x3c4>
    976c:	00c004c4 	movi	r3,19
    9770:	19809636 	bltu	r3,r6,99cc <_realloc_r+0x344>
    9774:	9005883a 	mov	r2,r18
    9778:	a807883a 	mov	r3,r21
    977c:	19000017 	ldw	r4,0(r3)
    9780:	11000015 	stw	r4,0(r2)
    9784:	19000117 	ldw	r4,4(r3)
    9788:	11000115 	stw	r4,4(r2)
    978c:	18c00217 	ldw	r3,8(r3)
    9790:	10c00215 	stw	r3,8(r2)
    9794:	a80b883a 	mov	r5,r21
    9798:	a009883a 	mov	r4,r20
    979c:	00075f00 	call	75f0 <_free_r>
    97a0:	a009883a 	mov	r4,r20
    97a4:	000eab80 	call	eab8 <__malloc_unlock>
    97a8:	9005883a 	mov	r2,r18
    97ac:	00001206 	br	97f8 <_realloc_r+0x170>
    97b0:	00c00404 	movi	r3,16
    97b4:	1823883a 	mov	r17,r3
    97b8:	003fce06 	br	96f4 <__alt_data_end+0xff0096f4>
    97bc:	a825883a 	mov	r18,r21
    97c0:	8445c83a 	sub	r2,r16,r17
    97c4:	00c003c4 	movi	r3,15
    97c8:	18802636 	bltu	r3,r2,9864 <_realloc_r+0x1dc>
    97cc:	99800117 	ldw	r6,4(r19)
    97d0:	9c07883a 	add	r3,r19,r16
    97d4:	3180004c 	andi	r6,r6,1
    97d8:	3420b03a 	or	r16,r6,r16
    97dc:	9c000115 	stw	r16,4(r19)
    97e0:	18800117 	ldw	r2,4(r3)
    97e4:	10800054 	ori	r2,r2,1
    97e8:	18800115 	stw	r2,4(r3)
    97ec:	a009883a 	mov	r4,r20
    97f0:	000eab80 	call	eab8 <__malloc_unlock>
    97f4:	9005883a 	mov	r2,r18
    97f8:	dfc00917 	ldw	ra,36(sp)
    97fc:	df000817 	ldw	fp,32(sp)
    9800:	ddc00717 	ldw	r23,28(sp)
    9804:	dd800617 	ldw	r22,24(sp)
    9808:	dd400517 	ldw	r21,20(sp)
    980c:	dd000417 	ldw	r20,16(sp)
    9810:	dcc00317 	ldw	r19,12(sp)
    9814:	dc800217 	ldw	r18,8(sp)
    9818:	dc400117 	ldw	r17,4(sp)
    981c:	dc000017 	ldw	r16,0(sp)
    9820:	dec00a04 	addi	sp,sp,40
    9824:	f800283a 	ret
    9828:	017fff04 	movi	r5,-4
    982c:	414a703a 	and	r5,r8,r5
    9830:	814d883a 	add	r6,r16,r5
    9834:	30c01f16 	blt	r6,r3,98b4 <_realloc_r+0x22c>
    9838:	20800317 	ldw	r2,12(r4)
    983c:	20c00217 	ldw	r3,8(r4)
    9840:	a825883a 	mov	r18,r21
    9844:	3021883a 	mov	r16,r6
    9848:	18800315 	stw	r2,12(r3)
    984c:	10c00215 	stw	r3,8(r2)
    9850:	003fdb06 	br	97c0 <__alt_data_end+0xff0097c0>
    9854:	00800304 	movi	r2,12
    9858:	a0800015 	stw	r2,0(r20)
    985c:	0005883a 	mov	r2,zero
    9860:	003fe506 	br	97f8 <__alt_data_end+0xff0097f8>
    9864:	98c00117 	ldw	r3,4(r19)
    9868:	9c4b883a 	add	r5,r19,r17
    986c:	11000054 	ori	r4,r2,1
    9870:	18c0004c 	andi	r3,r3,1
    9874:	1c62b03a 	or	r17,r3,r17
    9878:	9c400115 	stw	r17,4(r19)
    987c:	29000115 	stw	r4,4(r5)
    9880:	2885883a 	add	r2,r5,r2
    9884:	10c00117 	ldw	r3,4(r2)
    9888:	29400204 	addi	r5,r5,8
    988c:	a009883a 	mov	r4,r20
    9890:	18c00054 	ori	r3,r3,1
    9894:	10c00115 	stw	r3,4(r2)
    9898:	00075f00 	call	75f0 <_free_r>
    989c:	003fd306 	br	97ec <__alt_data_end+0xff0097ec>
    98a0:	017fff04 	movi	r5,-4
    98a4:	414a703a 	and	r5,r8,r5
    98a8:	89800404 	addi	r6,r17,16
    98ac:	8151883a 	add	r8,r16,r5
    98b0:	4180590e 	bge	r8,r6,9a18 <_realloc_r+0x390>
    98b4:	1080004c 	andi	r2,r2,1
    98b8:	103f9e1e 	bne	r2,zero,9734 <__alt_data_end+0xff009734>
    98bc:	adbffe17 	ldw	r22,-8(r21)
    98c0:	00bfff04 	movi	r2,-4
    98c4:	9dadc83a 	sub	r22,r19,r22
    98c8:	b1800117 	ldw	r6,4(r22)
    98cc:	3084703a 	and	r2,r6,r2
    98d0:	20002026 	beq	r4,zero,9954 <_realloc_r+0x2cc>
    98d4:	80af883a 	add	r23,r16,r2
    98d8:	b96f883a 	add	r23,r23,r5
    98dc:	21c05f26 	beq	r4,r7,9a5c <_realloc_r+0x3d4>
    98e0:	b8c01c16 	blt	r23,r3,9954 <_realloc_r+0x2cc>
    98e4:	20800317 	ldw	r2,12(r4)
    98e8:	20c00217 	ldw	r3,8(r4)
    98ec:	81bfff04 	addi	r6,r16,-4
    98f0:	01000904 	movi	r4,36
    98f4:	18800315 	stw	r2,12(r3)
    98f8:	10c00215 	stw	r3,8(r2)
    98fc:	b0c00217 	ldw	r3,8(r22)
    9900:	b0800317 	ldw	r2,12(r22)
    9904:	b4800204 	addi	r18,r22,8
    9908:	18800315 	stw	r2,12(r3)
    990c:	10c00215 	stw	r3,8(r2)
    9910:	21801b36 	bltu	r4,r6,9980 <_realloc_r+0x2f8>
    9914:	008004c4 	movi	r2,19
    9918:	1180352e 	bgeu	r2,r6,99f0 <_realloc_r+0x368>
    991c:	a8800017 	ldw	r2,0(r21)
    9920:	b0800215 	stw	r2,8(r22)
    9924:	a8800117 	ldw	r2,4(r21)
    9928:	b0800315 	stw	r2,12(r22)
    992c:	008006c4 	movi	r2,27
    9930:	11807f36 	bltu	r2,r6,9b30 <_realloc_r+0x4a8>
    9934:	b0800404 	addi	r2,r22,16
    9938:	ad400204 	addi	r21,r21,8
    993c:	00002d06 	br	99f4 <_realloc_r+0x36c>
    9940:	adbffe17 	ldw	r22,-8(r21)
    9944:	00bfff04 	movi	r2,-4
    9948:	9dadc83a 	sub	r22,r19,r22
    994c:	b1000117 	ldw	r4,4(r22)
    9950:	2084703a 	and	r2,r4,r2
    9954:	b03f7726 	beq	r22,zero,9734 <__alt_data_end+0xff009734>
    9958:	80af883a 	add	r23,r16,r2
    995c:	b8ff7516 	blt	r23,r3,9734 <__alt_data_end+0xff009734>
    9960:	b0800317 	ldw	r2,12(r22)
    9964:	b0c00217 	ldw	r3,8(r22)
    9968:	81bfff04 	addi	r6,r16,-4
    996c:	01000904 	movi	r4,36
    9970:	18800315 	stw	r2,12(r3)
    9974:	10c00215 	stw	r3,8(r2)
    9978:	b4800204 	addi	r18,r22,8
    997c:	21bfe52e 	bgeu	r4,r6,9914 <__alt_data_end+0xff009914>
    9980:	a80b883a 	mov	r5,r21
    9984:	9009883a 	mov	r4,r18
    9988:	00084080 	call	8408 <memmove>
    998c:	b821883a 	mov	r16,r23
    9990:	b027883a 	mov	r19,r22
    9994:	003f8a06 	br	97c0 <__alt_data_end+0xff0097c0>
    9998:	300b883a 	mov	r5,r6
    999c:	dfc00917 	ldw	ra,36(sp)
    99a0:	df000817 	ldw	fp,32(sp)
    99a4:	ddc00717 	ldw	r23,28(sp)
    99a8:	dd800617 	ldw	r22,24(sp)
    99ac:	dd400517 	ldw	r21,20(sp)
    99b0:	dd000417 	ldw	r20,16(sp)
    99b4:	dcc00317 	ldw	r19,12(sp)
    99b8:	dc800217 	ldw	r18,8(sp)
    99bc:	dc400117 	ldw	r17,4(sp)
    99c0:	dc000017 	ldw	r16,0(sp)
    99c4:	dec00a04 	addi	sp,sp,40
    99c8:	00027a01 	jmpi	27a0 <_malloc_r>
    99cc:	a8c00017 	ldw	r3,0(r21)
    99d0:	90c00015 	stw	r3,0(r18)
    99d4:	a8c00117 	ldw	r3,4(r21)
    99d8:	90c00115 	stw	r3,4(r18)
    99dc:	00c006c4 	movi	r3,27
    99e0:	19804536 	bltu	r3,r6,9af8 <_realloc_r+0x470>
    99e4:	90800204 	addi	r2,r18,8
    99e8:	a8c00204 	addi	r3,r21,8
    99ec:	003f6306 	br	977c <__alt_data_end+0xff00977c>
    99f0:	9005883a 	mov	r2,r18
    99f4:	a8c00017 	ldw	r3,0(r21)
    99f8:	b821883a 	mov	r16,r23
    99fc:	b027883a 	mov	r19,r22
    9a00:	10c00015 	stw	r3,0(r2)
    9a04:	a8c00117 	ldw	r3,4(r21)
    9a08:	10c00115 	stw	r3,4(r2)
    9a0c:	a8c00217 	ldw	r3,8(r21)
    9a10:	10c00215 	stw	r3,8(r2)
    9a14:	003f6a06 	br	97c0 <__alt_data_end+0xff0097c0>
    9a18:	9c67883a 	add	r19,r19,r17
    9a1c:	4445c83a 	sub	r2,r8,r17
    9a20:	e4c00215 	stw	r19,8(fp)
    9a24:	10800054 	ori	r2,r2,1
    9a28:	98800115 	stw	r2,4(r19)
    9a2c:	a8bfff17 	ldw	r2,-4(r21)
    9a30:	a009883a 	mov	r4,r20
    9a34:	1080004c 	andi	r2,r2,1
    9a38:	1462b03a 	or	r17,r2,r17
    9a3c:	ac7fff15 	stw	r17,-4(r21)
    9a40:	000eab80 	call	eab8 <__malloc_unlock>
    9a44:	a805883a 	mov	r2,r21
    9a48:	003f6b06 	br	97f8 <__alt_data_end+0xff0097f8>
    9a4c:	a80b883a 	mov	r5,r21
    9a50:	9009883a 	mov	r4,r18
    9a54:	00084080 	call	8408 <memmove>
    9a58:	003f4e06 	br	9794 <__alt_data_end+0xff009794>
    9a5c:	89000404 	addi	r4,r17,16
    9a60:	b93fbc16 	blt	r23,r4,9954 <__alt_data_end+0xff009954>
    9a64:	b0800317 	ldw	r2,12(r22)
    9a68:	b0c00217 	ldw	r3,8(r22)
    9a6c:	81bfff04 	addi	r6,r16,-4
    9a70:	01000904 	movi	r4,36
    9a74:	18800315 	stw	r2,12(r3)
    9a78:	10c00215 	stw	r3,8(r2)
    9a7c:	b4800204 	addi	r18,r22,8
    9a80:	21804336 	bltu	r4,r6,9b90 <_realloc_r+0x508>
    9a84:	008004c4 	movi	r2,19
    9a88:	11803f2e 	bgeu	r2,r6,9b88 <_realloc_r+0x500>
    9a8c:	a8800017 	ldw	r2,0(r21)
    9a90:	b0800215 	stw	r2,8(r22)
    9a94:	a8800117 	ldw	r2,4(r21)
    9a98:	b0800315 	stw	r2,12(r22)
    9a9c:	008006c4 	movi	r2,27
    9aa0:	11803f36 	bltu	r2,r6,9ba0 <_realloc_r+0x518>
    9aa4:	b0800404 	addi	r2,r22,16
    9aa8:	ad400204 	addi	r21,r21,8
    9aac:	a8c00017 	ldw	r3,0(r21)
    9ab0:	10c00015 	stw	r3,0(r2)
    9ab4:	a8c00117 	ldw	r3,4(r21)
    9ab8:	10c00115 	stw	r3,4(r2)
    9abc:	a8c00217 	ldw	r3,8(r21)
    9ac0:	10c00215 	stw	r3,8(r2)
    9ac4:	b447883a 	add	r3,r22,r17
    9ac8:	bc45c83a 	sub	r2,r23,r17
    9acc:	e0c00215 	stw	r3,8(fp)
    9ad0:	10800054 	ori	r2,r2,1
    9ad4:	18800115 	stw	r2,4(r3)
    9ad8:	b0800117 	ldw	r2,4(r22)
    9adc:	a009883a 	mov	r4,r20
    9ae0:	1080004c 	andi	r2,r2,1
    9ae4:	1462b03a 	or	r17,r2,r17
    9ae8:	b4400115 	stw	r17,4(r22)
    9aec:	000eab80 	call	eab8 <__malloc_unlock>
    9af0:	9005883a 	mov	r2,r18
    9af4:	003f4006 	br	97f8 <__alt_data_end+0xff0097f8>
    9af8:	a8c00217 	ldw	r3,8(r21)
    9afc:	90c00215 	stw	r3,8(r18)
    9b00:	a8c00317 	ldw	r3,12(r21)
    9b04:	90c00315 	stw	r3,12(r18)
    9b08:	30801126 	beq	r6,r2,9b50 <_realloc_r+0x4c8>
    9b0c:	90800404 	addi	r2,r18,16
    9b10:	a8c00404 	addi	r3,r21,16
    9b14:	003f1906 	br	977c <__alt_data_end+0xff00977c>
    9b18:	90ffff17 	ldw	r3,-4(r18)
    9b1c:	00bfff04 	movi	r2,-4
    9b20:	a825883a 	mov	r18,r21
    9b24:	1884703a 	and	r2,r3,r2
    9b28:	80a1883a 	add	r16,r16,r2
    9b2c:	003f2406 	br	97c0 <__alt_data_end+0xff0097c0>
    9b30:	a8800217 	ldw	r2,8(r21)
    9b34:	b0800415 	stw	r2,16(r22)
    9b38:	a8800317 	ldw	r2,12(r21)
    9b3c:	b0800515 	stw	r2,20(r22)
    9b40:	31000a26 	beq	r6,r4,9b6c <_realloc_r+0x4e4>
    9b44:	b0800604 	addi	r2,r22,24
    9b48:	ad400404 	addi	r21,r21,16
    9b4c:	003fa906 	br	99f4 <__alt_data_end+0xff0099f4>
    9b50:	a9000417 	ldw	r4,16(r21)
    9b54:	90800604 	addi	r2,r18,24
    9b58:	a8c00604 	addi	r3,r21,24
    9b5c:	91000415 	stw	r4,16(r18)
    9b60:	a9000517 	ldw	r4,20(r21)
    9b64:	91000515 	stw	r4,20(r18)
    9b68:	003f0406 	br	977c <__alt_data_end+0xff00977c>
    9b6c:	a8c00417 	ldw	r3,16(r21)
    9b70:	ad400604 	addi	r21,r21,24
    9b74:	b0800804 	addi	r2,r22,32
    9b78:	b0c00615 	stw	r3,24(r22)
    9b7c:	a8ffff17 	ldw	r3,-4(r21)
    9b80:	b0c00715 	stw	r3,28(r22)
    9b84:	003f9b06 	br	99f4 <__alt_data_end+0xff0099f4>
    9b88:	9005883a 	mov	r2,r18
    9b8c:	003fc706 	br	9aac <__alt_data_end+0xff009aac>
    9b90:	a80b883a 	mov	r5,r21
    9b94:	9009883a 	mov	r4,r18
    9b98:	00084080 	call	8408 <memmove>
    9b9c:	003fc906 	br	9ac4 <__alt_data_end+0xff009ac4>
    9ba0:	a8800217 	ldw	r2,8(r21)
    9ba4:	b0800415 	stw	r2,16(r22)
    9ba8:	a8800317 	ldw	r2,12(r21)
    9bac:	b0800515 	stw	r2,20(r22)
    9bb0:	31000726 	beq	r6,r4,9bd0 <_realloc_r+0x548>
    9bb4:	b0800604 	addi	r2,r22,24
    9bb8:	ad400404 	addi	r21,r21,16
    9bbc:	003fbb06 	br	9aac <__alt_data_end+0xff009aac>
    9bc0:	a009883a 	mov	r4,r20
    9bc4:	000eab80 	call	eab8 <__malloc_unlock>
    9bc8:	0005883a 	mov	r2,zero
    9bcc:	003f0a06 	br	97f8 <__alt_data_end+0xff0097f8>
    9bd0:	a8c00417 	ldw	r3,16(r21)
    9bd4:	ad400604 	addi	r21,r21,24
    9bd8:	b0800804 	addi	r2,r22,32
    9bdc:	b0c00615 	stw	r3,24(r22)
    9be0:	a8ffff17 	ldw	r3,-4(r21)
    9be4:	b0c00715 	stw	r3,28(r22)
    9be8:	003fb006 	br	9aac <__alt_data_end+0xff009aac>

00009bec <__fpclassifyd>:
    9bec:	00a00034 	movhi	r2,32768
    9bf0:	10bfffc4 	addi	r2,r2,-1
    9bf4:	2884703a 	and	r2,r5,r2
    9bf8:	10000726 	beq	r2,zero,9c18 <__fpclassifyd+0x2c>
    9bfc:	00fffc34 	movhi	r3,65520
    9c00:	019ff834 	movhi	r6,32736
    9c04:	28c7883a 	add	r3,r5,r3
    9c08:	31bfffc4 	addi	r6,r6,-1
    9c0c:	30c00536 	bltu	r6,r3,9c24 <__fpclassifyd+0x38>
    9c10:	00800104 	movi	r2,4
    9c14:	f800283a 	ret
    9c18:	2000021e 	bne	r4,zero,9c24 <__fpclassifyd+0x38>
    9c1c:	00800084 	movi	r2,2
    9c20:	f800283a 	ret
    9c24:	00dffc34 	movhi	r3,32752
    9c28:	019ff834 	movhi	r6,32736
    9c2c:	28cb883a 	add	r5,r5,r3
    9c30:	31bfffc4 	addi	r6,r6,-1
    9c34:	317ff62e 	bgeu	r6,r5,9c10 <__alt_data_end+0xff009c10>
    9c38:	01400434 	movhi	r5,16
    9c3c:	297fffc4 	addi	r5,r5,-1
    9c40:	28800236 	bltu	r5,r2,9c4c <__fpclassifyd+0x60>
    9c44:	008000c4 	movi	r2,3
    9c48:	f800283a 	ret
    9c4c:	10c00226 	beq	r2,r3,9c58 <__fpclassifyd+0x6c>
    9c50:	0005883a 	mov	r2,zero
    9c54:	f800283a 	ret
    9c58:	2005003a 	cmpeq	r2,r4,zero
    9c5c:	f800283a 	ret

00009c60 <__sread>:
    9c60:	defffe04 	addi	sp,sp,-8
    9c64:	dc000015 	stw	r16,0(sp)
    9c68:	2821883a 	mov	r16,r5
    9c6c:	2940038f 	ldh	r5,14(r5)
    9c70:	dfc00115 	stw	ra,4(sp)
    9c74:	000ba540 	call	ba54 <_read_r>
    9c78:	10000716 	blt	r2,zero,9c98 <__sread+0x38>
    9c7c:	80c01417 	ldw	r3,80(r16)
    9c80:	1887883a 	add	r3,r3,r2
    9c84:	80c01415 	stw	r3,80(r16)
    9c88:	dfc00117 	ldw	ra,4(sp)
    9c8c:	dc000017 	ldw	r16,0(sp)
    9c90:	dec00204 	addi	sp,sp,8
    9c94:	f800283a 	ret
    9c98:	80c0030b 	ldhu	r3,12(r16)
    9c9c:	18fbffcc 	andi	r3,r3,61439
    9ca0:	80c0030d 	sth	r3,12(r16)
    9ca4:	dfc00117 	ldw	ra,4(sp)
    9ca8:	dc000017 	ldw	r16,0(sp)
    9cac:	dec00204 	addi	sp,sp,8
    9cb0:	f800283a 	ret

00009cb4 <__seofread>:
    9cb4:	0005883a 	mov	r2,zero
    9cb8:	f800283a 	ret

00009cbc <__swrite>:
    9cbc:	2880030b 	ldhu	r2,12(r5)
    9cc0:	defffb04 	addi	sp,sp,-20
    9cc4:	dcc00315 	stw	r19,12(sp)
    9cc8:	dc800215 	stw	r18,8(sp)
    9ccc:	dc400115 	stw	r17,4(sp)
    9cd0:	dc000015 	stw	r16,0(sp)
    9cd4:	dfc00415 	stw	ra,16(sp)
    9cd8:	10c0400c 	andi	r3,r2,256
    9cdc:	2821883a 	mov	r16,r5
    9ce0:	2023883a 	mov	r17,r4
    9ce4:	3025883a 	mov	r18,r6
    9ce8:	3827883a 	mov	r19,r7
    9cec:	18000526 	beq	r3,zero,9d04 <__swrite+0x48>
    9cf0:	2940038f 	ldh	r5,14(r5)
    9cf4:	01c00084 	movi	r7,2
    9cf8:	000d883a 	mov	r6,zero
    9cfc:	000b9f40 	call	b9f4 <_lseek_r>
    9d00:	8080030b 	ldhu	r2,12(r16)
    9d04:	8140038f 	ldh	r5,14(r16)
    9d08:	10bbffcc 	andi	r2,r2,61439
    9d0c:	980f883a 	mov	r7,r19
    9d10:	900d883a 	mov	r6,r18
    9d14:	8809883a 	mov	r4,r17
    9d18:	8080030d 	sth	r2,12(r16)
    9d1c:	dfc00417 	ldw	ra,16(sp)
    9d20:	dcc00317 	ldw	r19,12(sp)
    9d24:	dc800217 	ldw	r18,8(sp)
    9d28:	dc400117 	ldw	r17,4(sp)
    9d2c:	dc000017 	ldw	r16,0(sp)
    9d30:	dec00504 	addi	sp,sp,20
    9d34:	000b4c01 	jmpi	b4c0 <_write_r>

00009d38 <__sseek>:
    9d38:	defffe04 	addi	sp,sp,-8
    9d3c:	dc000015 	stw	r16,0(sp)
    9d40:	2821883a 	mov	r16,r5
    9d44:	2940038f 	ldh	r5,14(r5)
    9d48:	dfc00115 	stw	ra,4(sp)
    9d4c:	000b9f40 	call	b9f4 <_lseek_r>
    9d50:	00ffffc4 	movi	r3,-1
    9d54:	10c00826 	beq	r2,r3,9d78 <__sseek+0x40>
    9d58:	80c0030b 	ldhu	r3,12(r16)
    9d5c:	80801415 	stw	r2,80(r16)
    9d60:	18c40014 	ori	r3,r3,4096
    9d64:	80c0030d 	sth	r3,12(r16)
    9d68:	dfc00117 	ldw	ra,4(sp)
    9d6c:	dc000017 	ldw	r16,0(sp)
    9d70:	dec00204 	addi	sp,sp,8
    9d74:	f800283a 	ret
    9d78:	80c0030b 	ldhu	r3,12(r16)
    9d7c:	18fbffcc 	andi	r3,r3,61439
    9d80:	80c0030d 	sth	r3,12(r16)
    9d84:	dfc00117 	ldw	ra,4(sp)
    9d88:	dc000017 	ldw	r16,0(sp)
    9d8c:	dec00204 	addi	sp,sp,8
    9d90:	f800283a 	ret

00009d94 <__sclose>:
    9d94:	2940038f 	ldh	r5,14(r5)
    9d98:	000b5201 	jmpi	b520 <_close_r>

00009d9c <strcmp>:
    9d9c:	2144b03a 	or	r2,r4,r5
    9da0:	108000cc 	andi	r2,r2,3
    9da4:	1000171e 	bne	r2,zero,9e04 <strcmp+0x68>
    9da8:	20800017 	ldw	r2,0(r4)
    9dac:	28c00017 	ldw	r3,0(r5)
    9db0:	10c0141e 	bne	r2,r3,9e04 <strcmp+0x68>
    9db4:	027fbff4 	movhi	r9,65279
    9db8:	4a7fbfc4 	addi	r9,r9,-257
    9dbc:	0086303a 	nor	r3,zero,r2
    9dc0:	02202074 	movhi	r8,32897
    9dc4:	1245883a 	add	r2,r2,r9
    9dc8:	42202004 	addi	r8,r8,-32640
    9dcc:	10c4703a 	and	r2,r2,r3
    9dd0:	1204703a 	and	r2,r2,r8
    9dd4:	10000226 	beq	r2,zero,9de0 <strcmp+0x44>
    9dd8:	00002306 	br	9e68 <strcmp+0xcc>
    9ddc:	1000221e 	bne	r2,zero,9e68 <strcmp+0xcc>
    9de0:	21000104 	addi	r4,r4,4
    9de4:	20c00017 	ldw	r3,0(r4)
    9de8:	29400104 	addi	r5,r5,4
    9dec:	29800017 	ldw	r6,0(r5)
    9df0:	1a4f883a 	add	r7,r3,r9
    9df4:	00c4303a 	nor	r2,zero,r3
    9df8:	3884703a 	and	r2,r7,r2
    9dfc:	1204703a 	and	r2,r2,r8
    9e00:	19bff626 	beq	r3,r6,9ddc <__alt_data_end+0xff009ddc>
    9e04:	20800003 	ldbu	r2,0(r4)
    9e08:	10c03fcc 	andi	r3,r2,255
    9e0c:	18c0201c 	xori	r3,r3,128
    9e10:	18ffe004 	addi	r3,r3,-128
    9e14:	18000c26 	beq	r3,zero,9e48 <strcmp+0xac>
    9e18:	29800007 	ldb	r6,0(r5)
    9e1c:	19800326 	beq	r3,r6,9e2c <strcmp+0x90>
    9e20:	00001306 	br	9e70 <strcmp+0xd4>
    9e24:	29800007 	ldb	r6,0(r5)
    9e28:	11800b1e 	bne	r2,r6,9e58 <strcmp+0xbc>
    9e2c:	21000044 	addi	r4,r4,1
    9e30:	20c00003 	ldbu	r3,0(r4)
    9e34:	29400044 	addi	r5,r5,1
    9e38:	18803fcc 	andi	r2,r3,255
    9e3c:	1080201c 	xori	r2,r2,128
    9e40:	10bfe004 	addi	r2,r2,-128
    9e44:	103ff71e 	bne	r2,zero,9e24 <__alt_data_end+0xff009e24>
    9e48:	0007883a 	mov	r3,zero
    9e4c:	28800003 	ldbu	r2,0(r5)
    9e50:	1885c83a 	sub	r2,r3,r2
    9e54:	f800283a 	ret
    9e58:	28800003 	ldbu	r2,0(r5)
    9e5c:	18c03fcc 	andi	r3,r3,255
    9e60:	1885c83a 	sub	r2,r3,r2
    9e64:	f800283a 	ret
    9e68:	0005883a 	mov	r2,zero
    9e6c:	f800283a 	ret
    9e70:	10c03fcc 	andi	r3,r2,255
    9e74:	003ff506 	br	9e4c <__alt_data_end+0xff009e4c>

00009e78 <__sprint_r.part.0>:
    9e78:	28801917 	ldw	r2,100(r5)
    9e7c:	defff604 	addi	sp,sp,-40
    9e80:	dd400515 	stw	r21,20(sp)
    9e84:	dfc00915 	stw	ra,36(sp)
    9e88:	df000815 	stw	fp,32(sp)
    9e8c:	ddc00715 	stw	r23,28(sp)
    9e90:	dd800615 	stw	r22,24(sp)
    9e94:	dd000415 	stw	r20,16(sp)
    9e98:	dcc00315 	stw	r19,12(sp)
    9e9c:	dc800215 	stw	r18,8(sp)
    9ea0:	dc400115 	stw	r17,4(sp)
    9ea4:	dc000015 	stw	r16,0(sp)
    9ea8:	1088000c 	andi	r2,r2,8192
    9eac:	302b883a 	mov	r21,r6
    9eb0:	10002e26 	beq	r2,zero,9f6c <__sprint_r.part.0+0xf4>
    9eb4:	30800217 	ldw	r2,8(r6)
    9eb8:	35800017 	ldw	r22,0(r6)
    9ebc:	10002926 	beq	r2,zero,9f64 <__sprint_r.part.0+0xec>
    9ec0:	2827883a 	mov	r19,r5
    9ec4:	2029883a 	mov	r20,r4
    9ec8:	b5c00104 	addi	r23,r22,4
    9ecc:	04bfffc4 	movi	r18,-1
    9ed0:	bc400017 	ldw	r17,0(r23)
    9ed4:	b4000017 	ldw	r16,0(r22)
    9ed8:	0039883a 	mov	fp,zero
    9edc:	8822d0ba 	srli	r17,r17,2
    9ee0:	8800031e 	bne	r17,zero,9ef0 <__sprint_r.part.0+0x78>
    9ee4:	00001806 	br	9f48 <__sprint_r.part.0+0xd0>
    9ee8:	84000104 	addi	r16,r16,4
    9eec:	8f001526 	beq	r17,fp,9f44 <__sprint_r.part.0+0xcc>
    9ef0:	81400017 	ldw	r5,0(r16)
    9ef4:	980d883a 	mov	r6,r19
    9ef8:	a009883a 	mov	r4,r20
    9efc:	000b8a00 	call	b8a0 <_fputwc_r>
    9f00:	e7000044 	addi	fp,fp,1
    9f04:	14bff81e 	bne	r2,r18,9ee8 <__alt_data_end+0xff009ee8>
    9f08:	9005883a 	mov	r2,r18
    9f0c:	a8000215 	stw	zero,8(r21)
    9f10:	a8000115 	stw	zero,4(r21)
    9f14:	dfc00917 	ldw	ra,36(sp)
    9f18:	df000817 	ldw	fp,32(sp)
    9f1c:	ddc00717 	ldw	r23,28(sp)
    9f20:	dd800617 	ldw	r22,24(sp)
    9f24:	dd400517 	ldw	r21,20(sp)
    9f28:	dd000417 	ldw	r20,16(sp)
    9f2c:	dcc00317 	ldw	r19,12(sp)
    9f30:	dc800217 	ldw	r18,8(sp)
    9f34:	dc400117 	ldw	r17,4(sp)
    9f38:	dc000017 	ldw	r16,0(sp)
    9f3c:	dec00a04 	addi	sp,sp,40
    9f40:	f800283a 	ret
    9f44:	a8800217 	ldw	r2,8(r21)
    9f48:	8c63883a 	add	r17,r17,r17
    9f4c:	8c63883a 	add	r17,r17,r17
    9f50:	1445c83a 	sub	r2,r2,r17
    9f54:	a8800215 	stw	r2,8(r21)
    9f58:	b5800204 	addi	r22,r22,8
    9f5c:	bdc00204 	addi	r23,r23,8
    9f60:	103fdb1e 	bne	r2,zero,9ed0 <__alt_data_end+0xff009ed0>
    9f64:	0005883a 	mov	r2,zero
    9f68:	003fe806 	br	9f0c <__alt_data_end+0xff009f0c>
    9f6c:	00079000 	call	7900 <__sfvwrite_r>
    9f70:	003fe606 	br	9f0c <__alt_data_end+0xff009f0c>

00009f74 <__sprint_r>:
    9f74:	30c00217 	ldw	r3,8(r6)
    9f78:	18000126 	beq	r3,zero,9f80 <__sprint_r+0xc>
    9f7c:	0009e781 	jmpi	9e78 <__sprint_r.part.0>
    9f80:	30000115 	stw	zero,4(r6)
    9f84:	0005883a 	mov	r2,zero
    9f88:	f800283a 	ret

00009f8c <___vfiprintf_internal_r>:
    9f8c:	deffc904 	addi	sp,sp,-220
    9f90:	df003515 	stw	fp,212(sp)
    9f94:	dd003115 	stw	r20,196(sp)
    9f98:	dfc03615 	stw	ra,216(sp)
    9f9c:	ddc03415 	stw	r23,208(sp)
    9fa0:	dd803315 	stw	r22,204(sp)
    9fa4:	dd403215 	stw	r21,200(sp)
    9fa8:	dcc03015 	stw	r19,192(sp)
    9fac:	dc802f15 	stw	r18,188(sp)
    9fb0:	dc402e15 	stw	r17,184(sp)
    9fb4:	dc002d15 	stw	r16,180(sp)
    9fb8:	d9002015 	stw	r4,128(sp)
    9fbc:	d9c02215 	stw	r7,136(sp)
    9fc0:	2829883a 	mov	r20,r5
    9fc4:	3039883a 	mov	fp,r6
    9fc8:	20000226 	beq	r4,zero,9fd4 <___vfiprintf_internal_r+0x48>
    9fcc:	20800e17 	ldw	r2,56(r4)
    9fd0:	1000cf26 	beq	r2,zero,a310 <___vfiprintf_internal_r+0x384>
    9fd4:	a080030b 	ldhu	r2,12(r20)
    9fd8:	10c8000c 	andi	r3,r2,8192
    9fdc:	1800061e 	bne	r3,zero,9ff8 <___vfiprintf_internal_r+0x6c>
    9fe0:	a1001917 	ldw	r4,100(r20)
    9fe4:	00f7ffc4 	movi	r3,-8193
    9fe8:	10880014 	ori	r2,r2,8192
    9fec:	20c6703a 	and	r3,r4,r3
    9ff0:	a080030d 	sth	r2,12(r20)
    9ff4:	a0c01915 	stw	r3,100(r20)
    9ff8:	10c0020c 	andi	r3,r2,8
    9ffc:	1800a926 	beq	r3,zero,a2a4 <___vfiprintf_internal_r+0x318>
    a000:	a0c00417 	ldw	r3,16(r20)
    a004:	1800a726 	beq	r3,zero,a2a4 <___vfiprintf_internal_r+0x318>
    a008:	1080068c 	andi	r2,r2,26
    a00c:	00c00284 	movi	r3,10
    a010:	10c0ac26 	beq	r2,r3,a2c4 <___vfiprintf_internal_r+0x338>
    a014:	da801a04 	addi	r10,sp,104
    a018:	da801e15 	stw	r10,120(sp)
    a01c:	d8801e17 	ldw	r2,120(sp)
    a020:	da8019c4 	addi	r10,sp,103
    a024:	05800074 	movhi	r22,1
    a028:	05c00074 	movhi	r23,1
    a02c:	da801f15 	stw	r10,124(sp)
    a030:	1295c83a 	sub	r10,r2,r10
    a034:	b585c004 	addi	r22,r22,5888
    a038:	bdc5bc04 	addi	r23,r23,5872
    a03c:	dec01a15 	stw	sp,104(sp)
    a040:	d8001c15 	stw	zero,112(sp)
    a044:	d8001b15 	stw	zero,108(sp)
    a048:	d8002615 	stw	zero,152(sp)
    a04c:	d8002315 	stw	zero,140(sp)
    a050:	da802715 	stw	r10,156(sp)
    a054:	d811883a 	mov	r8,sp
    a058:	dd002115 	stw	r20,132(sp)
    a05c:	e021883a 	mov	r16,fp
    a060:	80800007 	ldb	r2,0(r16)
    a064:	1003ea26 	beq	r2,zero,b010 <___vfiprintf_internal_r+0x1084>
    a068:	00c00944 	movi	r3,37
    a06c:	8025883a 	mov	r18,r16
    a070:	10c0021e 	bne	r2,r3,a07c <___vfiprintf_internal_r+0xf0>
    a074:	00001606 	br	a0d0 <___vfiprintf_internal_r+0x144>
    a078:	10c00326 	beq	r2,r3,a088 <___vfiprintf_internal_r+0xfc>
    a07c:	94800044 	addi	r18,r18,1
    a080:	90800007 	ldb	r2,0(r18)
    a084:	103ffc1e 	bne	r2,zero,a078 <__alt_data_end+0xff00a078>
    a088:	9423c83a 	sub	r17,r18,r16
    a08c:	88001026 	beq	r17,zero,a0d0 <___vfiprintf_internal_r+0x144>
    a090:	d8c01c17 	ldw	r3,112(sp)
    a094:	d8801b17 	ldw	r2,108(sp)
    a098:	44000015 	stw	r16,0(r8)
    a09c:	88c7883a 	add	r3,r17,r3
    a0a0:	10800044 	addi	r2,r2,1
    a0a4:	44400115 	stw	r17,4(r8)
    a0a8:	d8c01c15 	stw	r3,112(sp)
    a0ac:	d8801b15 	stw	r2,108(sp)
    a0b0:	010001c4 	movi	r4,7
    a0b4:	2080760e 	bge	r4,r2,a290 <___vfiprintf_internal_r+0x304>
    a0b8:	1803821e 	bne	r3,zero,aec4 <___vfiprintf_internal_r+0xf38>
    a0bc:	da802317 	ldw	r10,140(sp)
    a0c0:	d8001b15 	stw	zero,108(sp)
    a0c4:	d811883a 	mov	r8,sp
    a0c8:	5455883a 	add	r10,r10,r17
    a0cc:	da802315 	stw	r10,140(sp)
    a0d0:	90800007 	ldb	r2,0(r18)
    a0d4:	10044626 	beq	r2,zero,b1f0 <___vfiprintf_internal_r+0x1264>
    a0d8:	90c00047 	ldb	r3,1(r18)
    a0dc:	94000044 	addi	r16,r18,1
    a0e0:	d8001d85 	stb	zero,118(sp)
    a0e4:	0009883a 	mov	r4,zero
    a0e8:	000f883a 	mov	r7,zero
    a0ec:	027fffc4 	movi	r9,-1
    a0f0:	0023883a 	mov	r17,zero
    a0f4:	0029883a 	mov	r20,zero
    a0f8:	01401604 	movi	r5,88
    a0fc:	01800244 	movi	r6,9
    a100:	03400a84 	movi	r13,42
    a104:	03001b04 	movi	r12,108
    a108:	84000044 	addi	r16,r16,1
    a10c:	18bff804 	addi	r2,r3,-32
    a110:	28827336 	bltu	r5,r2,aae0 <___vfiprintf_internal_r+0xb54>
    a114:	100490ba 	slli	r2,r2,2
    a118:	02800074 	movhi	r10,1
    a11c:	52a84b04 	addi	r10,r10,-24276
    a120:	1285883a 	add	r2,r2,r10
    a124:	10800017 	ldw	r2,0(r2)
    a128:	1000683a 	jmp	r2
    a12c:	0000a814 	movui	zero,672
    a130:	0000aae0 	cmpeqi	zero,zero,683
    a134:	0000aae0 	cmpeqi	zero,zero,683
    a138:	0000a834 	movhi	zero,672
    a13c:	0000aae0 	cmpeqi	zero,zero,683
    a140:	0000aae0 	cmpeqi	zero,zero,683
    a144:	0000aae0 	cmpeqi	zero,zero,683
    a148:	0000aae0 	cmpeqi	zero,zero,683
    a14c:	0000aae0 	cmpeqi	zero,zero,683
    a150:	0000aae0 	cmpeqi	zero,zero,683
    a154:	0000aa1c 	xori	zero,zero,680
    a158:	0000aa38 	rdprs	zero,zero,680
    a15c:	0000aae0 	cmpeqi	zero,zero,683
    a160:	0000a320 	cmpeqi	zero,zero,652
    a164:	0000aa48 	cmpgei	zero,zero,681
    a168:	0000aae0 	cmpeqi	zero,zero,683
    a16c:	0000a840 	call	a84 <init_LCD+0x80>
    a170:	0000a84c 	andi	zero,zero,673
    a174:	0000a84c 	andi	zero,zero,673
    a178:	0000a84c 	andi	zero,zero,673
    a17c:	0000a84c 	andi	zero,zero,673
    a180:	0000a84c 	andi	zero,zero,673
    a184:	0000a84c 	andi	zero,zero,673
    a188:	0000a84c 	andi	zero,zero,673
    a18c:	0000a84c 	andi	zero,zero,673
    a190:	0000a84c 	andi	zero,zero,673
    a194:	0000aae0 	cmpeqi	zero,zero,683
    a198:	0000aae0 	cmpeqi	zero,zero,683
    a19c:	0000aae0 	cmpeqi	zero,zero,683
    a1a0:	0000aae0 	cmpeqi	zero,zero,683
    a1a4:	0000aae0 	cmpeqi	zero,zero,683
    a1a8:	0000aae0 	cmpeqi	zero,zero,683
    a1ac:	0000aae0 	cmpeqi	zero,zero,683
    a1b0:	0000aae0 	cmpeqi	zero,zero,683
    a1b4:	0000aae0 	cmpeqi	zero,zero,683
    a1b8:	0000aae0 	cmpeqi	zero,zero,683
    a1bc:	0000a878 	rdprs	zero,zero,673
    a1c0:	0000aae0 	cmpeqi	zero,zero,683
    a1c4:	0000aae0 	cmpeqi	zero,zero,683
    a1c8:	0000aae0 	cmpeqi	zero,zero,683
    a1cc:	0000aae0 	cmpeqi	zero,zero,683
    a1d0:	0000aae0 	cmpeqi	zero,zero,683
    a1d4:	0000aae0 	cmpeqi	zero,zero,683
    a1d8:	0000aae0 	cmpeqi	zero,zero,683
    a1dc:	0000aae0 	cmpeqi	zero,zero,683
    a1e0:	0000aae0 	cmpeqi	zero,zero,683
    a1e4:	0000aae0 	cmpeqi	zero,zero,683
    a1e8:	0000a8b0 	cmpltui	zero,zero,674
    a1ec:	0000aae0 	cmpeqi	zero,zero,683
    a1f0:	0000aae0 	cmpeqi	zero,zero,683
    a1f4:	0000aae0 	cmpeqi	zero,zero,683
    a1f8:	0000aae0 	cmpeqi	zero,zero,683
    a1fc:	0000aae0 	cmpeqi	zero,zero,683
    a200:	0000a908 	cmpgei	zero,zero,676
    a204:	0000aae0 	cmpeqi	zero,zero,683
    a208:	0000aae0 	cmpeqi	zero,zero,683
    a20c:	0000a978 	rdprs	zero,zero,677
    a210:	0000aae0 	cmpeqi	zero,zero,683
    a214:	0000aae0 	cmpeqi	zero,zero,683
    a218:	0000aae0 	cmpeqi	zero,zero,683
    a21c:	0000aae0 	cmpeqi	zero,zero,683
    a220:	0000aae0 	cmpeqi	zero,zero,683
    a224:	0000aae0 	cmpeqi	zero,zero,683
    a228:	0000aae0 	cmpeqi	zero,zero,683
    a22c:	0000aae0 	cmpeqi	zero,zero,683
    a230:	0000aae0 	cmpeqi	zero,zero,683
    a234:	0000aae0 	cmpeqi	zero,zero,683
    a238:	0000a724 	muli	zero,zero,668
    a23c:	0000a750 	cmplti	zero,zero,669
    a240:	0000aae0 	cmpeqi	zero,zero,683
    a244:	0000aae0 	cmpeqi	zero,zero,683
    a248:	0000aae0 	cmpeqi	zero,zero,683
    a24c:	0000aa88 	cmpgei	zero,zero,682
    a250:	0000a750 	cmplti	zero,zero,669
    a254:	0000aae0 	cmpeqi	zero,zero,683
    a258:	0000aae0 	cmpeqi	zero,zero,683
    a25c:	0000a5e4 	muli	zero,zero,663
    a260:	0000aae0 	cmpeqi	zero,zero,683
    a264:	0000a5f4 	movhi	zero,663
    a268:	0000a630 	cmpltui	zero,zero,664
    a26c:	0000a32c 	andhi	zero,zero,652
    a270:	0000a5d8 	cmpnei	zero,zero,663
    a274:	0000aae0 	cmpeqi	zero,zero,683
    a278:	0000a9b4 	movhi	zero,678
    a27c:	0000aae0 	cmpeqi	zero,zero,683
    a280:	0000aa0c 	andi	zero,zero,680
    a284:	0000aae0 	cmpeqi	zero,zero,683
    a288:	0000aae0 	cmpeqi	zero,zero,683
    a28c:	0000a6d0 	cmplti	zero,zero,667
    a290:	42000204 	addi	r8,r8,8
    a294:	da802317 	ldw	r10,140(sp)
    a298:	5455883a 	add	r10,r10,r17
    a29c:	da802315 	stw	r10,140(sp)
    a2a0:	003f8b06 	br	a0d0 <__alt_data_end+0xff00a0d0>
    a2a4:	d9002017 	ldw	r4,128(sp)
    a2a8:	a00b883a 	mov	r5,r20
    a2ac:	00054a80 	call	54a8 <__swsetup_r>
    a2b0:	1003b11e 	bne	r2,zero,b178 <___vfiprintf_internal_r+0x11ec>
    a2b4:	a080030b 	ldhu	r2,12(r20)
    a2b8:	00c00284 	movi	r3,10
    a2bc:	1080068c 	andi	r2,r2,26
    a2c0:	10ff541e 	bne	r2,r3,a014 <__alt_data_end+0xff00a014>
    a2c4:	a080038f 	ldh	r2,14(r20)
    a2c8:	103f5216 	blt	r2,zero,a014 <__alt_data_end+0xff00a014>
    a2cc:	d9c02217 	ldw	r7,136(sp)
    a2d0:	d9002017 	ldw	r4,128(sp)
    a2d4:	e00d883a 	mov	r6,fp
    a2d8:	a00b883a 	mov	r5,r20
    a2dc:	000b4040 	call	b404 <__sbprintf>
    a2e0:	dfc03617 	ldw	ra,216(sp)
    a2e4:	df003517 	ldw	fp,212(sp)
    a2e8:	ddc03417 	ldw	r23,208(sp)
    a2ec:	dd803317 	ldw	r22,204(sp)
    a2f0:	dd403217 	ldw	r21,200(sp)
    a2f4:	dd003117 	ldw	r20,196(sp)
    a2f8:	dcc03017 	ldw	r19,192(sp)
    a2fc:	dc802f17 	ldw	r18,188(sp)
    a300:	dc402e17 	ldw	r17,184(sp)
    a304:	dc002d17 	ldw	r16,180(sp)
    a308:	dec03704 	addi	sp,sp,220
    a30c:	f800283a 	ret
    a310:	000747c0 	call	747c <__sinit>
    a314:	003f2f06 	br	9fd4 <__alt_data_end+0xff009fd4>
    a318:	0463c83a 	sub	r17,zero,r17
    a31c:	d8802215 	stw	r2,136(sp)
    a320:	a5000114 	ori	r20,r20,4
    a324:	80c00007 	ldb	r3,0(r16)
    a328:	003f7706 	br	a108 <__alt_data_end+0xff00a108>
    a32c:	00800c04 	movi	r2,48
    a330:	da802217 	ldw	r10,136(sp)
    a334:	d8801d05 	stb	r2,116(sp)
    a338:	00801e04 	movi	r2,120
    a33c:	d8801d45 	stb	r2,117(sp)
    a340:	d8001d85 	stb	zero,118(sp)
    a344:	50c00104 	addi	r3,r10,4
    a348:	54800017 	ldw	r18,0(r10)
    a34c:	0027883a 	mov	r19,zero
    a350:	a0800094 	ori	r2,r20,2
    a354:	48030b16 	blt	r9,zero,af84 <___vfiprintf_internal_r+0xff8>
    a358:	00bfdfc4 	movi	r2,-129
    a35c:	a096703a 	and	r11,r20,r2
    a360:	d8c02215 	stw	r3,136(sp)
    a364:	5d000094 	ori	r20,r11,2
    a368:	90032b1e 	bne	r18,zero,b018 <___vfiprintf_internal_r+0x108c>
    a36c:	00800074 	movhi	r2,1
    a370:	10855b04 	addi	r2,r2,5484
    a374:	d8802615 	stw	r2,152(sp)
    a378:	0039883a 	mov	fp,zero
    a37c:	48017b1e 	bne	r9,zero,a96c <___vfiprintf_internal_r+0x9e0>
    a380:	0013883a 	mov	r9,zero
    a384:	0027883a 	mov	r19,zero
    a388:	dd401a04 	addi	r21,sp,104
    a38c:	4825883a 	mov	r18,r9
    a390:	4cc0010e 	bge	r9,r19,a398 <___vfiprintf_internal_r+0x40c>
    a394:	9825883a 	mov	r18,r19
    a398:	e7003fcc 	andi	fp,fp,255
    a39c:	e700201c 	xori	fp,fp,128
    a3a0:	e73fe004 	addi	fp,fp,-128
    a3a4:	e0000126 	beq	fp,zero,a3ac <___vfiprintf_internal_r+0x420>
    a3a8:	94800044 	addi	r18,r18,1
    a3ac:	a380008c 	andi	r14,r20,2
    a3b0:	70000126 	beq	r14,zero,a3b8 <___vfiprintf_internal_r+0x42c>
    a3b4:	94800084 	addi	r18,r18,2
    a3b8:	a700210c 	andi	fp,r20,132
    a3bc:	e001df1e 	bne	fp,zero,ab3c <___vfiprintf_internal_r+0xbb0>
    a3c0:	8c87c83a 	sub	r3,r17,r18
    a3c4:	00c1dd0e 	bge	zero,r3,ab3c <___vfiprintf_internal_r+0xbb0>
    a3c8:	01c00404 	movi	r7,16
    a3cc:	d8801c17 	ldw	r2,112(sp)
    a3d0:	38c3ad0e 	bge	r7,r3,b288 <___vfiprintf_internal_r+0x12fc>
    a3d4:	02800074 	movhi	r10,1
    a3d8:	5285c004 	addi	r10,r10,5888
    a3dc:	dc002915 	stw	r16,164(sp)
    a3e0:	d9801b17 	ldw	r6,108(sp)
    a3e4:	da802415 	stw	r10,144(sp)
    a3e8:	03c001c4 	movi	r15,7
    a3ec:	da402515 	stw	r9,148(sp)
    a3f0:	db802815 	stw	r14,160(sp)
    a3f4:	1821883a 	mov	r16,r3
    a3f8:	00000506 	br	a410 <___vfiprintf_internal_r+0x484>
    a3fc:	31400084 	addi	r5,r6,2
    a400:	42000204 	addi	r8,r8,8
    a404:	200d883a 	mov	r6,r4
    a408:	843ffc04 	addi	r16,r16,-16
    a40c:	3c000d0e 	bge	r7,r16,a444 <___vfiprintf_internal_r+0x4b8>
    a410:	10800404 	addi	r2,r2,16
    a414:	31000044 	addi	r4,r6,1
    a418:	45800015 	stw	r22,0(r8)
    a41c:	41c00115 	stw	r7,4(r8)
    a420:	d8801c15 	stw	r2,112(sp)
    a424:	d9001b15 	stw	r4,108(sp)
    a428:	793ff40e 	bge	r15,r4,a3fc <__alt_data_end+0xff00a3fc>
    a42c:	1001b51e 	bne	r2,zero,ab04 <___vfiprintf_internal_r+0xb78>
    a430:	843ffc04 	addi	r16,r16,-16
    a434:	000d883a 	mov	r6,zero
    a438:	01400044 	movi	r5,1
    a43c:	d811883a 	mov	r8,sp
    a440:	3c3ff316 	blt	r7,r16,a410 <__alt_data_end+0xff00a410>
    a444:	8007883a 	mov	r3,r16
    a448:	da402517 	ldw	r9,148(sp)
    a44c:	db802817 	ldw	r14,160(sp)
    a450:	dc002917 	ldw	r16,164(sp)
    a454:	da802417 	ldw	r10,144(sp)
    a458:	1885883a 	add	r2,r3,r2
    a45c:	40c00115 	stw	r3,4(r8)
    a460:	42800015 	stw	r10,0(r8)
    a464:	d8801c15 	stw	r2,112(sp)
    a468:	d9401b15 	stw	r5,108(sp)
    a46c:	00c001c4 	movi	r3,7
    a470:	19426016 	blt	r3,r5,adf4 <___vfiprintf_internal_r+0xe68>
    a474:	d8c01d87 	ldb	r3,118(sp)
    a478:	42000204 	addi	r8,r8,8
    a47c:	29000044 	addi	r4,r5,1
    a480:	1801b31e 	bne	r3,zero,ab50 <___vfiprintf_internal_r+0xbc4>
    a484:	7001c026 	beq	r14,zero,ab88 <___vfiprintf_internal_r+0xbfc>
    a488:	d8c01d04 	addi	r3,sp,116
    a48c:	10800084 	addi	r2,r2,2
    a490:	40c00015 	stw	r3,0(r8)
    a494:	00c00084 	movi	r3,2
    a498:	40c00115 	stw	r3,4(r8)
    a49c:	d8801c15 	stw	r2,112(sp)
    a4a0:	d9001b15 	stw	r4,108(sp)
    a4a4:	00c001c4 	movi	r3,7
    a4a8:	1902650e 	bge	r3,r4,ae40 <___vfiprintf_internal_r+0xeb4>
    a4ac:	10029a1e 	bne	r2,zero,af18 <___vfiprintf_internal_r+0xf8c>
    a4b0:	00c02004 	movi	r3,128
    a4b4:	01000044 	movi	r4,1
    a4b8:	000b883a 	mov	r5,zero
    a4bc:	d811883a 	mov	r8,sp
    a4c0:	e0c1b31e 	bne	fp,r3,ab90 <___vfiprintf_internal_r+0xc04>
    a4c4:	8cb9c83a 	sub	fp,r17,r18
    a4c8:	0701b10e 	bge	zero,fp,ab90 <___vfiprintf_internal_r+0xc04>
    a4cc:	01c00404 	movi	r7,16
    a4d0:	3f03890e 	bge	r7,fp,b2f8 <___vfiprintf_internal_r+0x136c>
    a4d4:	00c00074 	movhi	r3,1
    a4d8:	18c5bc04 	addi	r3,r3,5872
    a4dc:	d8c02415 	stw	r3,144(sp)
    a4e0:	8007883a 	mov	r3,r16
    a4e4:	034001c4 	movi	r13,7
    a4e8:	e021883a 	mov	r16,fp
    a4ec:	da402515 	stw	r9,148(sp)
    a4f0:	1839883a 	mov	fp,r3
    a4f4:	00000506 	br	a50c <___vfiprintf_internal_r+0x580>
    a4f8:	29800084 	addi	r6,r5,2
    a4fc:	42000204 	addi	r8,r8,8
    a500:	180b883a 	mov	r5,r3
    a504:	843ffc04 	addi	r16,r16,-16
    a508:	3c000d0e 	bge	r7,r16,a540 <___vfiprintf_internal_r+0x5b4>
    a50c:	10800404 	addi	r2,r2,16
    a510:	28c00044 	addi	r3,r5,1
    a514:	45c00015 	stw	r23,0(r8)
    a518:	41c00115 	stw	r7,4(r8)
    a51c:	d8801c15 	stw	r2,112(sp)
    a520:	d8c01b15 	stw	r3,108(sp)
    a524:	68fff40e 	bge	r13,r3,a4f8 <__alt_data_end+0xff00a4f8>
    a528:	1002241e 	bne	r2,zero,adbc <___vfiprintf_internal_r+0xe30>
    a52c:	843ffc04 	addi	r16,r16,-16
    a530:	01800044 	movi	r6,1
    a534:	000b883a 	mov	r5,zero
    a538:	d811883a 	mov	r8,sp
    a53c:	3c3ff316 	blt	r7,r16,a50c <__alt_data_end+0xff00a50c>
    a540:	da402517 	ldw	r9,148(sp)
    a544:	e007883a 	mov	r3,fp
    a548:	8039883a 	mov	fp,r16
    a54c:	1821883a 	mov	r16,r3
    a550:	d8c02417 	ldw	r3,144(sp)
    a554:	1705883a 	add	r2,r2,fp
    a558:	47000115 	stw	fp,4(r8)
    a55c:	40c00015 	stw	r3,0(r8)
    a560:	d8801c15 	stw	r2,112(sp)
    a564:	d9801b15 	stw	r6,108(sp)
    a568:	00c001c4 	movi	r3,7
    a56c:	19827616 	blt	r3,r6,af48 <___vfiprintf_internal_r+0xfbc>
    a570:	4cf9c83a 	sub	fp,r9,r19
    a574:	42000204 	addi	r8,r8,8
    a578:	31000044 	addi	r4,r6,1
    a57c:	300b883a 	mov	r5,r6
    a580:	07018516 	blt	zero,fp,ab98 <___vfiprintf_internal_r+0xc0c>
    a584:	9885883a 	add	r2,r19,r2
    a588:	45400015 	stw	r21,0(r8)
    a58c:	44c00115 	stw	r19,4(r8)
    a590:	d8801c15 	stw	r2,112(sp)
    a594:	d9001b15 	stw	r4,108(sp)
    a598:	00c001c4 	movi	r3,7
    a59c:	1901dd0e 	bge	r3,r4,ad14 <___vfiprintf_internal_r+0xd88>
    a5a0:	1002401e 	bne	r2,zero,aea4 <___vfiprintf_internal_r+0xf18>
    a5a4:	d8001b15 	stw	zero,108(sp)
    a5a8:	a2c0010c 	andi	r11,r20,4
    a5ac:	58000226 	beq	r11,zero,a5b8 <___vfiprintf_internal_r+0x62c>
    a5b0:	8ca7c83a 	sub	r19,r17,r18
    a5b4:	04c2f216 	blt	zero,r19,b180 <___vfiprintf_internal_r+0x11f4>
    a5b8:	8c80010e 	bge	r17,r18,a5c0 <___vfiprintf_internal_r+0x634>
    a5bc:	9023883a 	mov	r17,r18
    a5c0:	da802317 	ldw	r10,140(sp)
    a5c4:	5455883a 	add	r10,r10,r17
    a5c8:	da802315 	stw	r10,140(sp)
    a5cc:	d8001b15 	stw	zero,108(sp)
    a5d0:	d811883a 	mov	r8,sp
    a5d4:	003ea206 	br	a060 <__alt_data_end+0xff00a060>
    a5d8:	a5000814 	ori	r20,r20,32
    a5dc:	80c00007 	ldb	r3,0(r16)
    a5e0:	003ec906 	br	a108 <__alt_data_end+0xff00a108>
    a5e4:	80c00007 	ldb	r3,0(r16)
    a5e8:	1b030926 	beq	r3,r12,b210 <___vfiprintf_internal_r+0x1284>
    a5ec:	a5000414 	ori	r20,r20,16
    a5f0:	003ec506 	br	a108 <__alt_data_end+0xff00a108>
    a5f4:	21003fcc 	andi	r4,r4,255
    a5f8:	20035e1e 	bne	r4,zero,b374 <___vfiprintf_internal_r+0x13e8>
    a5fc:	a080080c 	andi	r2,r20,32
    a600:	1002a526 	beq	r2,zero,b098 <___vfiprintf_internal_r+0x110c>
    a604:	da802217 	ldw	r10,136(sp)
    a608:	50800017 	ldw	r2,0(r10)
    a60c:	da802317 	ldw	r10,140(sp)
    a610:	5007d7fa 	srai	r3,r10,31
    a614:	da802217 	ldw	r10,136(sp)
    a618:	10c00115 	stw	r3,4(r2)
    a61c:	52800104 	addi	r10,r10,4
    a620:	da802215 	stw	r10,136(sp)
    a624:	da802317 	ldw	r10,140(sp)
    a628:	12800015 	stw	r10,0(r2)
    a62c:	003e8c06 	br	a060 <__alt_data_end+0xff00a060>
    a630:	21003fcc 	andi	r4,r4,255
    a634:	2003511e 	bne	r4,zero,b37c <___vfiprintf_internal_r+0x13f0>
    a638:	a080080c 	andi	r2,r20,32
    a63c:	1000a126 	beq	r2,zero,a8c4 <___vfiprintf_internal_r+0x938>
    a640:	da802217 	ldw	r10,136(sp)
    a644:	d8001d85 	stb	zero,118(sp)
    a648:	50800204 	addi	r2,r10,8
    a64c:	54800017 	ldw	r18,0(r10)
    a650:	54c00117 	ldw	r19,4(r10)
    a654:	4802b416 	blt	r9,zero,b128 <___vfiprintf_internal_r+0x119c>
    a658:	013fdfc4 	movi	r4,-129
    a65c:	94c6b03a 	or	r3,r18,r19
    a660:	d8802215 	stw	r2,136(sp)
    a664:	a128703a 	and	r20,r20,r4
    a668:	1800a226 	beq	r3,zero,a8f4 <___vfiprintf_internal_r+0x968>
    a66c:	0039883a 	mov	fp,zero
    a670:	dd401a04 	addi	r21,sp,104
    a674:	9006d0fa 	srli	r3,r18,3
    a678:	9808977a 	slli	r4,r19,29
    a67c:	9826d0fa 	srli	r19,r19,3
    a680:	948001cc 	andi	r18,r18,7
    a684:	90800c04 	addi	r2,r18,48
    a688:	ad7fffc4 	addi	r21,r21,-1
    a68c:	20e4b03a 	or	r18,r4,r3
    a690:	a8800005 	stb	r2,0(r21)
    a694:	94c6b03a 	or	r3,r18,r19
    a698:	183ff61e 	bne	r3,zero,a674 <__alt_data_end+0xff00a674>
    a69c:	a0c0004c 	andi	r3,r20,1
    a6a0:	18005926 	beq	r3,zero,a808 <___vfiprintf_internal_r+0x87c>
    a6a4:	10803fcc 	andi	r2,r2,255
    a6a8:	1080201c 	xori	r2,r2,128
    a6ac:	10bfe004 	addi	r2,r2,-128
    a6b0:	00c00c04 	movi	r3,48
    a6b4:	10c05426 	beq	r2,r3,a808 <___vfiprintf_internal_r+0x87c>
    a6b8:	da801e17 	ldw	r10,120(sp)
    a6bc:	a8bfffc4 	addi	r2,r21,-1
    a6c0:	a8ffffc5 	stb	r3,-1(r21)
    a6c4:	50a7c83a 	sub	r19,r10,r2
    a6c8:	102b883a 	mov	r21,r2
    a6cc:	003f2f06 	br	a38c <__alt_data_end+0xff00a38c>
    a6d0:	21003fcc 	andi	r4,r4,255
    a6d4:	2003421e 	bne	r4,zero,b3e0 <___vfiprintf_internal_r+0x1454>
    a6d8:	00800074 	movhi	r2,1
    a6dc:	10855b04 	addi	r2,r2,5484
    a6e0:	d8802615 	stw	r2,152(sp)
    a6e4:	a080080c 	andi	r2,r20,32
    a6e8:	1000aa26 	beq	r2,zero,a994 <___vfiprintf_internal_r+0xa08>
    a6ec:	da802217 	ldw	r10,136(sp)
    a6f0:	54800017 	ldw	r18,0(r10)
    a6f4:	54c00117 	ldw	r19,4(r10)
    a6f8:	52800204 	addi	r10,r10,8
    a6fc:	da802215 	stw	r10,136(sp)
    a700:	a080004c 	andi	r2,r20,1
    a704:	1001d226 	beq	r2,zero,ae50 <___vfiprintf_internal_r+0xec4>
    a708:	94c4b03a 	or	r2,r18,r19
    a70c:	1002351e 	bne	r2,zero,afe4 <___vfiprintf_internal_r+0x1058>
    a710:	d8001d85 	stb	zero,118(sp)
    a714:	48022216 	blt	r9,zero,afa0 <___vfiprintf_internal_r+0x1014>
    a718:	00bfdfc4 	movi	r2,-129
    a71c:	a0a8703a 	and	r20,r20,r2
    a720:	003f1506 	br	a378 <__alt_data_end+0xff00a378>
    a724:	da802217 	ldw	r10,136(sp)
    a728:	04800044 	movi	r18,1
    a72c:	d8001d85 	stb	zero,118(sp)
    a730:	50800017 	ldw	r2,0(r10)
    a734:	52800104 	addi	r10,r10,4
    a738:	da802215 	stw	r10,136(sp)
    a73c:	d8801005 	stb	r2,64(sp)
    a740:	9027883a 	mov	r19,r18
    a744:	dd401004 	addi	r21,sp,64
    a748:	0013883a 	mov	r9,zero
    a74c:	003f1706 	br	a3ac <__alt_data_end+0xff00a3ac>
    a750:	21003fcc 	andi	r4,r4,255
    a754:	2003201e 	bne	r4,zero,b3d8 <___vfiprintf_internal_r+0x144c>
    a758:	a080080c 	andi	r2,r20,32
    a75c:	10004b26 	beq	r2,zero,a88c <___vfiprintf_internal_r+0x900>
    a760:	da802217 	ldw	r10,136(sp)
    a764:	50800117 	ldw	r2,4(r10)
    a768:	54800017 	ldw	r18,0(r10)
    a76c:	52800204 	addi	r10,r10,8
    a770:	da802215 	stw	r10,136(sp)
    a774:	1027883a 	mov	r19,r2
    a778:	10022c16 	blt	r2,zero,b02c <___vfiprintf_internal_r+0x10a0>
    a77c:	df001d83 	ldbu	fp,118(sp)
    a780:	48007216 	blt	r9,zero,a94c <___vfiprintf_internal_r+0x9c0>
    a784:	00ffdfc4 	movi	r3,-129
    a788:	94c4b03a 	or	r2,r18,r19
    a78c:	a0e8703a 	and	r20,r20,r3
    a790:	1000cc26 	beq	r2,zero,aac4 <___vfiprintf_internal_r+0xb38>
    a794:	98021026 	beq	r19,zero,afd8 <___vfiprintf_internal_r+0x104c>
    a798:	dc402415 	stw	r17,144(sp)
    a79c:	dc002515 	stw	r16,148(sp)
    a7a0:	9823883a 	mov	r17,r19
    a7a4:	9021883a 	mov	r16,r18
    a7a8:	dd401a04 	addi	r21,sp,104
    a7ac:	4825883a 	mov	r18,r9
    a7b0:	4027883a 	mov	r19,r8
    a7b4:	8009883a 	mov	r4,r16
    a7b8:	880b883a 	mov	r5,r17
    a7bc:	01800284 	movi	r6,10
    a7c0:	000f883a 	mov	r7,zero
    a7c4:	000c36c0 	call	c36c <__umoddi3>
    a7c8:	10800c04 	addi	r2,r2,48
    a7cc:	ad7fffc4 	addi	r21,r21,-1
    a7d0:	8009883a 	mov	r4,r16
    a7d4:	880b883a 	mov	r5,r17
    a7d8:	a8800005 	stb	r2,0(r21)
    a7dc:	01800284 	movi	r6,10
    a7e0:	000f883a 	mov	r7,zero
    a7e4:	000bdf40 	call	bdf4 <__udivdi3>
    a7e8:	1021883a 	mov	r16,r2
    a7ec:	10c4b03a 	or	r2,r2,r3
    a7f0:	1823883a 	mov	r17,r3
    a7f4:	103fef1e 	bne	r2,zero,a7b4 <__alt_data_end+0xff00a7b4>
    a7f8:	dc402417 	ldw	r17,144(sp)
    a7fc:	dc002517 	ldw	r16,148(sp)
    a800:	9013883a 	mov	r9,r18
    a804:	9811883a 	mov	r8,r19
    a808:	da801e17 	ldw	r10,120(sp)
    a80c:	5567c83a 	sub	r19,r10,r21
    a810:	003ede06 	br	a38c <__alt_data_end+0xff00a38c>
    a814:	38803fcc 	andi	r2,r7,255
    a818:	1080201c 	xori	r2,r2,128
    a81c:	10bfe004 	addi	r2,r2,-128
    a820:	1002371e 	bne	r2,zero,b100 <___vfiprintf_internal_r+0x1174>
    a824:	01000044 	movi	r4,1
    a828:	01c00804 	movi	r7,32
    a82c:	80c00007 	ldb	r3,0(r16)
    a830:	003e3506 	br	a108 <__alt_data_end+0xff00a108>
    a834:	a5000054 	ori	r20,r20,1
    a838:	80c00007 	ldb	r3,0(r16)
    a83c:	003e3206 	br	a108 <__alt_data_end+0xff00a108>
    a840:	a5002014 	ori	r20,r20,128
    a844:	80c00007 	ldb	r3,0(r16)
    a848:	003e2f06 	br	a108 <__alt_data_end+0xff00a108>
    a84c:	8015883a 	mov	r10,r16
    a850:	0023883a 	mov	r17,zero
    a854:	18bff404 	addi	r2,r3,-48
    a858:	50c00007 	ldb	r3,0(r10)
    a85c:	8c4002a4 	muli	r17,r17,10
    a860:	84000044 	addi	r16,r16,1
    a864:	8015883a 	mov	r10,r16
    a868:	1463883a 	add	r17,r2,r17
    a86c:	18bff404 	addi	r2,r3,-48
    a870:	30bff92e 	bgeu	r6,r2,a858 <__alt_data_end+0xff00a858>
    a874:	003e2506 	br	a10c <__alt_data_end+0xff00a10c>
    a878:	21003fcc 	andi	r4,r4,255
    a87c:	2002d41e 	bne	r4,zero,b3d0 <___vfiprintf_internal_r+0x1444>
    a880:	a5000414 	ori	r20,r20,16
    a884:	a080080c 	andi	r2,r20,32
    a888:	103fb51e 	bne	r2,zero,a760 <__alt_data_end+0xff00a760>
    a88c:	a080040c 	andi	r2,r20,16
    a890:	1001f826 	beq	r2,zero,b074 <___vfiprintf_internal_r+0x10e8>
    a894:	da802217 	ldw	r10,136(sp)
    a898:	54800017 	ldw	r18,0(r10)
    a89c:	52800104 	addi	r10,r10,4
    a8a0:	da802215 	stw	r10,136(sp)
    a8a4:	9027d7fa 	srai	r19,r18,31
    a8a8:	9805883a 	mov	r2,r19
    a8ac:	003fb206 	br	a778 <__alt_data_end+0xff00a778>
    a8b0:	21003fcc 	andi	r4,r4,255
    a8b4:	2002c41e 	bne	r4,zero,b3c8 <___vfiprintf_internal_r+0x143c>
    a8b8:	a5000414 	ori	r20,r20,16
    a8bc:	a080080c 	andi	r2,r20,32
    a8c0:	103f5f1e 	bne	r2,zero,a640 <__alt_data_end+0xff00a640>
    a8c4:	a080040c 	andi	r2,r20,16
    a8c8:	10020f26 	beq	r2,zero,b108 <___vfiprintf_internal_r+0x117c>
    a8cc:	da802217 	ldw	r10,136(sp)
    a8d0:	d8001d85 	stb	zero,118(sp)
    a8d4:	0027883a 	mov	r19,zero
    a8d8:	50800104 	addi	r2,r10,4
    a8dc:	54800017 	ldw	r18,0(r10)
    a8e0:	48021116 	blt	r9,zero,b128 <___vfiprintf_internal_r+0x119c>
    a8e4:	00ffdfc4 	movi	r3,-129
    a8e8:	d8802215 	stw	r2,136(sp)
    a8ec:	a0e8703a 	and	r20,r20,r3
    a8f0:	903f5e1e 	bne	r18,zero,a66c <__alt_data_end+0xff00a66c>
    a8f4:	0039883a 	mov	fp,zero
    a8f8:	4802a626 	beq	r9,zero,b394 <___vfiprintf_internal_r+0x1408>
    a8fc:	0025883a 	mov	r18,zero
    a900:	0027883a 	mov	r19,zero
    a904:	003f5a06 	br	a670 <__alt_data_end+0xff00a670>
    a908:	21003fcc 	andi	r4,r4,255
    a90c:	20029f1e 	bne	r4,zero,b38c <___vfiprintf_internal_r+0x1400>
    a910:	a5000414 	ori	r20,r20,16
    a914:	a080080c 	andi	r2,r20,32
    a918:	10005e1e 	bne	r2,zero,aa94 <___vfiprintf_internal_r+0xb08>
    a91c:	a080040c 	andi	r2,r20,16
    a920:	1001a21e 	bne	r2,zero,afac <___vfiprintf_internal_r+0x1020>
    a924:	a080100c 	andi	r2,r20,64
    a928:	d8001d85 	stb	zero,118(sp)
    a92c:	da802217 	ldw	r10,136(sp)
    a930:	1002231e 	bne	r2,zero,b1c0 <___vfiprintf_internal_r+0x1234>
    a934:	50800104 	addi	r2,r10,4
    a938:	54800017 	ldw	r18,0(r10)
    a93c:	0027883a 	mov	r19,zero
    a940:	4801a00e 	bge	r9,zero,afc4 <___vfiprintf_internal_r+0x1038>
    a944:	d8802215 	stw	r2,136(sp)
    a948:	0039883a 	mov	fp,zero
    a94c:	94c4b03a 	or	r2,r18,r19
    a950:	103f901e 	bne	r2,zero,a794 <__alt_data_end+0xff00a794>
    a954:	00800044 	movi	r2,1
    a958:	10803fcc 	andi	r2,r2,255
    a95c:	00c00044 	movi	r3,1
    a960:	10c05926 	beq	r2,r3,aac8 <___vfiprintf_internal_r+0xb3c>
    a964:	00c00084 	movi	r3,2
    a968:	10ffe41e 	bne	r2,r3,a8fc <__alt_data_end+0xff00a8fc>
    a96c:	0025883a 	mov	r18,zero
    a970:	0027883a 	mov	r19,zero
    a974:	00013d06 	br	ae6c <___vfiprintf_internal_r+0xee0>
    a978:	21003fcc 	andi	r4,r4,255
    a97c:	2002811e 	bne	r4,zero,b384 <___vfiprintf_internal_r+0x13f8>
    a980:	00800074 	movhi	r2,1
    a984:	10855604 	addi	r2,r2,5464
    a988:	d8802615 	stw	r2,152(sp)
    a98c:	a080080c 	andi	r2,r20,32
    a990:	103f561e 	bne	r2,zero,a6ec <__alt_data_end+0xff00a6ec>
    a994:	a080040c 	andi	r2,r20,16
    a998:	1001d126 	beq	r2,zero,b0e0 <___vfiprintf_internal_r+0x1154>
    a99c:	da802217 	ldw	r10,136(sp)
    a9a0:	0027883a 	mov	r19,zero
    a9a4:	54800017 	ldw	r18,0(r10)
    a9a8:	52800104 	addi	r10,r10,4
    a9ac:	da802215 	stw	r10,136(sp)
    a9b0:	003f5306 	br	a700 <__alt_data_end+0xff00a700>
    a9b4:	da802217 	ldw	r10,136(sp)
    a9b8:	d8001d85 	stb	zero,118(sp)
    a9bc:	55400017 	ldw	r21,0(r10)
    a9c0:	50c00104 	addi	r3,r10,4
    a9c4:	a8024226 	beq	r21,zero,b2d0 <___vfiprintf_internal_r+0x1344>
    a9c8:	48021816 	blt	r9,zero,b22c <___vfiprintf_internal_r+0x12a0>
    a9cc:	480d883a 	mov	r6,r9
    a9d0:	000b883a 	mov	r5,zero
    a9d4:	a809883a 	mov	r4,r21
    a9d8:	d8c02a15 	stw	r3,168(sp)
    a9dc:	da002b15 	stw	r8,172(sp)
    a9e0:	da402c15 	stw	r9,176(sp)
    a9e4:	00081dc0 	call	81dc <memchr>
    a9e8:	d8c02a17 	ldw	r3,168(sp)
    a9ec:	da002b17 	ldw	r8,172(sp)
    a9f0:	da402c17 	ldw	r9,176(sp)
    a9f4:	10024826 	beq	r2,zero,b318 <___vfiprintf_internal_r+0x138c>
    a9f8:	1567c83a 	sub	r19,r2,r21
    a9fc:	df001d83 	ldbu	fp,118(sp)
    aa00:	d8c02215 	stw	r3,136(sp)
    aa04:	0013883a 	mov	r9,zero
    aa08:	003e6006 	br	a38c <__alt_data_end+0xff00a38c>
    aa0c:	21003fcc 	andi	r4,r4,255
    aa10:	203fc026 	beq	r4,zero,a914 <__alt_data_end+0xff00a914>
    aa14:	d9c01d85 	stb	r7,118(sp)
    aa18:	003fbe06 	br	a914 <__alt_data_end+0xff00a914>
    aa1c:	da802217 	ldw	r10,136(sp)
    aa20:	54400017 	ldw	r17,0(r10)
    aa24:	50800104 	addi	r2,r10,4
    aa28:	883e3b16 	blt	r17,zero,a318 <__alt_data_end+0xff00a318>
    aa2c:	d8802215 	stw	r2,136(sp)
    aa30:	80c00007 	ldb	r3,0(r16)
    aa34:	003db406 	br	a108 <__alt_data_end+0xff00a108>
    aa38:	01000044 	movi	r4,1
    aa3c:	01c00ac4 	movi	r7,43
    aa40:	80c00007 	ldb	r3,0(r16)
    aa44:	003db006 	br	a108 <__alt_data_end+0xff00a108>
    aa48:	80c00007 	ldb	r3,0(r16)
    aa4c:	82800044 	addi	r10,r16,1
    aa50:	1b423c26 	beq	r3,r13,b344 <___vfiprintf_internal_r+0x13b8>
    aa54:	18bff404 	addi	r2,r3,-48
    aa58:	0013883a 	mov	r9,zero
    aa5c:	30822b36 	bltu	r6,r2,b30c <___vfiprintf_internal_r+0x1380>
    aa60:	50c00007 	ldb	r3,0(r10)
    aa64:	4a4002a4 	muli	r9,r9,10
    aa68:	54000044 	addi	r16,r10,1
    aa6c:	8015883a 	mov	r10,r16
    aa70:	4893883a 	add	r9,r9,r2
    aa74:	18bff404 	addi	r2,r3,-48
    aa78:	30bff92e 	bgeu	r6,r2,aa60 <__alt_data_end+0xff00aa60>
    aa7c:	483da30e 	bge	r9,zero,a10c <__alt_data_end+0xff00a10c>
    aa80:	027fffc4 	movi	r9,-1
    aa84:	003da106 	br	a10c <__alt_data_end+0xff00a10c>
    aa88:	a5001014 	ori	r20,r20,64
    aa8c:	80c00007 	ldb	r3,0(r16)
    aa90:	003d9d06 	br	a108 <__alt_data_end+0xff00a108>
    aa94:	da802217 	ldw	r10,136(sp)
    aa98:	d8001d85 	stb	zero,118(sp)
    aa9c:	50c00204 	addi	r3,r10,8
    aaa0:	54800017 	ldw	r18,0(r10)
    aaa4:	54c00117 	ldw	r19,4(r10)
    aaa8:	4801ca16 	blt	r9,zero,b1d4 <___vfiprintf_internal_r+0x1248>
    aaac:	013fdfc4 	movi	r4,-129
    aab0:	94c4b03a 	or	r2,r18,r19
    aab4:	d8c02215 	stw	r3,136(sp)
    aab8:	a128703a 	and	r20,r20,r4
    aabc:	0039883a 	mov	fp,zero
    aac0:	103f341e 	bne	r2,zero,a794 <__alt_data_end+0xff00a794>
    aac4:	483e2e26 	beq	r9,zero,a380 <__alt_data_end+0xff00a380>
    aac8:	0025883a 	mov	r18,zero
    aacc:	94800c04 	addi	r18,r18,48
    aad0:	dc8019c5 	stb	r18,103(sp)
    aad4:	dcc02717 	ldw	r19,156(sp)
    aad8:	dd4019c4 	addi	r21,sp,103
    aadc:	003e2b06 	br	a38c <__alt_data_end+0xff00a38c>
    aae0:	21003fcc 	andi	r4,r4,255
    aae4:	2002361e 	bne	r4,zero,b3c0 <___vfiprintf_internal_r+0x1434>
    aae8:	1801c126 	beq	r3,zero,b1f0 <___vfiprintf_internal_r+0x1264>
    aaec:	04800044 	movi	r18,1
    aaf0:	d8c01005 	stb	r3,64(sp)
    aaf4:	d8001d85 	stb	zero,118(sp)
    aaf8:	9027883a 	mov	r19,r18
    aafc:	dd401004 	addi	r21,sp,64
    ab00:	003f1106 	br	a748 <__alt_data_end+0xff00a748>
    ab04:	d9402117 	ldw	r5,132(sp)
    ab08:	d9002017 	ldw	r4,128(sp)
    ab0c:	d9801a04 	addi	r6,sp,104
    ab10:	d9c02b15 	stw	r7,172(sp)
    ab14:	dbc02a15 	stw	r15,168(sp)
    ab18:	0009e780 	call	9e78 <__sprint_r.part.0>
    ab1c:	d9c02b17 	ldw	r7,172(sp)
    ab20:	dbc02a17 	ldw	r15,168(sp)
    ab24:	10006d1e 	bne	r2,zero,acdc <___vfiprintf_internal_r+0xd50>
    ab28:	d9801b17 	ldw	r6,108(sp)
    ab2c:	d8801c17 	ldw	r2,112(sp)
    ab30:	d811883a 	mov	r8,sp
    ab34:	31400044 	addi	r5,r6,1
    ab38:	003e3306 	br	a408 <__alt_data_end+0xff00a408>
    ab3c:	d9401b17 	ldw	r5,108(sp)
    ab40:	d8801c17 	ldw	r2,112(sp)
    ab44:	29000044 	addi	r4,r5,1
    ab48:	d8c01d87 	ldb	r3,118(sp)
    ab4c:	183e4d26 	beq	r3,zero,a484 <__alt_data_end+0xff00a484>
    ab50:	00c00044 	movi	r3,1
    ab54:	d9401d84 	addi	r5,sp,118
    ab58:	10c5883a 	add	r2,r2,r3
    ab5c:	41400015 	stw	r5,0(r8)
    ab60:	40c00115 	stw	r3,4(r8)
    ab64:	d8801c15 	stw	r2,112(sp)
    ab68:	d9001b15 	stw	r4,108(sp)
    ab6c:	014001c4 	movi	r5,7
    ab70:	2900a90e 	bge	r5,r4,ae18 <___vfiprintf_internal_r+0xe8c>
    ab74:	1000da1e 	bne	r2,zero,aee0 <___vfiprintf_internal_r+0xf54>
    ab78:	7000ab1e 	bne	r14,zero,ae28 <___vfiprintf_internal_r+0xe9c>
    ab7c:	000b883a 	mov	r5,zero
    ab80:	1809883a 	mov	r4,r3
    ab84:	d811883a 	mov	r8,sp
    ab88:	00c02004 	movi	r3,128
    ab8c:	e0fe4d26 	beq	fp,r3,a4c4 <__alt_data_end+0xff00a4c4>
    ab90:	4cf9c83a 	sub	fp,r9,r19
    ab94:	073e7b0e 	bge	zero,fp,a584 <__alt_data_end+0xff00a584>
    ab98:	01c00404 	movi	r7,16
    ab9c:	3f01900e 	bge	r7,fp,b1e0 <___vfiprintf_internal_r+0x1254>
    aba0:	00c00074 	movhi	r3,1
    aba4:	18c5bc04 	addi	r3,r3,5872
    aba8:	d8c02415 	stw	r3,144(sp)
    abac:	034001c4 	movi	r13,7
    abb0:	00000506 	br	abc8 <___vfiprintf_internal_r+0xc3c>
    abb4:	29000084 	addi	r4,r5,2
    abb8:	42000204 	addi	r8,r8,8
    abbc:	180b883a 	mov	r5,r3
    abc0:	e73ffc04 	addi	fp,fp,-16
    abc4:	3f000d0e 	bge	r7,fp,abfc <___vfiprintf_internal_r+0xc70>
    abc8:	10800404 	addi	r2,r2,16
    abcc:	28c00044 	addi	r3,r5,1
    abd0:	45c00015 	stw	r23,0(r8)
    abd4:	41c00115 	stw	r7,4(r8)
    abd8:	d8801c15 	stw	r2,112(sp)
    abdc:	d8c01b15 	stw	r3,108(sp)
    abe0:	68fff40e 	bge	r13,r3,abb4 <__alt_data_end+0xff00abb4>
    abe4:	1000101e 	bne	r2,zero,ac28 <___vfiprintf_internal_r+0xc9c>
    abe8:	e73ffc04 	addi	fp,fp,-16
    abec:	01000044 	movi	r4,1
    abf0:	000b883a 	mov	r5,zero
    abf4:	d811883a 	mov	r8,sp
    abf8:	3f3ff316 	blt	r7,fp,abc8 <__alt_data_end+0xff00abc8>
    abfc:	da802417 	ldw	r10,144(sp)
    ac00:	1705883a 	add	r2,r2,fp
    ac04:	47000115 	stw	fp,4(r8)
    ac08:	42800015 	stw	r10,0(r8)
    ac0c:	d8801c15 	stw	r2,112(sp)
    ac10:	d9001b15 	stw	r4,108(sp)
    ac14:	00c001c4 	movi	r3,7
    ac18:	19003616 	blt	r3,r4,acf4 <___vfiprintf_internal_r+0xd68>
    ac1c:	42000204 	addi	r8,r8,8
    ac20:	21000044 	addi	r4,r4,1
    ac24:	003e5706 	br	a584 <__alt_data_end+0xff00a584>
    ac28:	d9402117 	ldw	r5,132(sp)
    ac2c:	d9002017 	ldw	r4,128(sp)
    ac30:	d9801a04 	addi	r6,sp,104
    ac34:	d9c02b15 	stw	r7,172(sp)
    ac38:	db402a15 	stw	r13,168(sp)
    ac3c:	0009e780 	call	9e78 <__sprint_r.part.0>
    ac40:	d9c02b17 	ldw	r7,172(sp)
    ac44:	db402a17 	ldw	r13,168(sp)
    ac48:	1000241e 	bne	r2,zero,acdc <___vfiprintf_internal_r+0xd50>
    ac4c:	d9401b17 	ldw	r5,108(sp)
    ac50:	d8801c17 	ldw	r2,112(sp)
    ac54:	d811883a 	mov	r8,sp
    ac58:	29000044 	addi	r4,r5,1
    ac5c:	003fd806 	br	abc0 <__alt_data_end+0xff00abc0>
    ac60:	d9401b17 	ldw	r5,108(sp)
    ac64:	00c00074 	movhi	r3,1
    ac68:	18c5c004 	addi	r3,r3,5888
    ac6c:	d8c02415 	stw	r3,144(sp)
    ac70:	29400044 	addi	r5,r5,1
    ac74:	d8c02417 	ldw	r3,144(sp)
    ac78:	14c5883a 	add	r2,r2,r19
    ac7c:	44c00115 	stw	r19,4(r8)
    ac80:	40c00015 	stw	r3,0(r8)
    ac84:	d8801c15 	stw	r2,112(sp)
    ac88:	d9401b15 	stw	r5,108(sp)
    ac8c:	00c001c4 	movi	r3,7
    ac90:	1940070e 	bge	r3,r5,acb0 <___vfiprintf_internal_r+0xd24>
    ac94:	103e4826 	beq	r2,zero,a5b8 <__alt_data_end+0xff00a5b8>
    ac98:	d9402117 	ldw	r5,132(sp)
    ac9c:	d9002017 	ldw	r4,128(sp)
    aca0:	d9801a04 	addi	r6,sp,104
    aca4:	0009e780 	call	9e78 <__sprint_r.part.0>
    aca8:	10000c1e 	bne	r2,zero,acdc <___vfiprintf_internal_r+0xd50>
    acac:	d8801c17 	ldw	r2,112(sp)
    acb0:	8c80010e 	bge	r17,r18,acb8 <___vfiprintf_internal_r+0xd2c>
    acb4:	9023883a 	mov	r17,r18
    acb8:	da802317 	ldw	r10,140(sp)
    acbc:	5455883a 	add	r10,r10,r17
    acc0:	da802315 	stw	r10,140(sp)
    acc4:	103e4126 	beq	r2,zero,a5cc <__alt_data_end+0xff00a5cc>
    acc8:	d9402117 	ldw	r5,132(sp)
    accc:	d9002017 	ldw	r4,128(sp)
    acd0:	d9801a04 	addi	r6,sp,104
    acd4:	0009e780 	call	9e78 <__sprint_r.part.0>
    acd8:	103e3c26 	beq	r2,zero,a5cc <__alt_data_end+0xff00a5cc>
    acdc:	dd002117 	ldw	r20,132(sp)
    ace0:	a080030b 	ldhu	r2,12(r20)
    ace4:	1080100c 	andi	r2,r2,64
    ace8:	1001231e 	bne	r2,zero,b178 <___vfiprintf_internal_r+0x11ec>
    acec:	d8802317 	ldw	r2,140(sp)
    acf0:	003d7b06 	br	a2e0 <__alt_data_end+0xff00a2e0>
    acf4:	1000991e 	bne	r2,zero,af5c <___vfiprintf_internal_r+0xfd0>
    acf8:	00c00044 	movi	r3,1
    acfc:	9805883a 	mov	r2,r19
    ad00:	dd400015 	stw	r21,0(sp)
    ad04:	dcc00115 	stw	r19,4(sp)
    ad08:	dcc01c15 	stw	r19,112(sp)
    ad0c:	d8c01b15 	stw	r3,108(sp)
    ad10:	d811883a 	mov	r8,sp
    ad14:	42000204 	addi	r8,r8,8
    ad18:	a2c0010c 	andi	r11,r20,4
    ad1c:	583fe426 	beq	r11,zero,acb0 <__alt_data_end+0xff00acb0>
    ad20:	8ca7c83a 	sub	r19,r17,r18
    ad24:	04ffe20e 	bge	zero,r19,acb0 <__alt_data_end+0xff00acb0>
    ad28:	01c00404 	movi	r7,16
    ad2c:	3cffcc0e 	bge	r7,r19,ac60 <__alt_data_end+0xff00ac60>
    ad30:	02800074 	movhi	r10,1
    ad34:	5285c004 	addi	r10,r10,5888
    ad38:	d9001b17 	ldw	r4,108(sp)
    ad3c:	da802415 	stw	r10,144(sp)
    ad40:	382b883a 	mov	r21,r7
    ad44:	050001c4 	movi	r20,7
    ad48:	df002017 	ldw	fp,128(sp)
    ad4c:	00000506 	br	ad64 <___vfiprintf_internal_r+0xdd8>
    ad50:	21400084 	addi	r5,r4,2
    ad54:	42000204 	addi	r8,r8,8
    ad58:	1809883a 	mov	r4,r3
    ad5c:	9cfffc04 	addi	r19,r19,-16
    ad60:	acffc40e 	bge	r21,r19,ac74 <__alt_data_end+0xff00ac74>
    ad64:	10800404 	addi	r2,r2,16
    ad68:	20c00044 	addi	r3,r4,1
    ad6c:	45800015 	stw	r22,0(r8)
    ad70:	45400115 	stw	r21,4(r8)
    ad74:	d8801c15 	stw	r2,112(sp)
    ad78:	d8c01b15 	stw	r3,108(sp)
    ad7c:	a0fff40e 	bge	r20,r3,ad50 <__alt_data_end+0xff00ad50>
    ad80:	1000041e 	bne	r2,zero,ad94 <___vfiprintf_internal_r+0xe08>
    ad84:	01400044 	movi	r5,1
    ad88:	0009883a 	mov	r4,zero
    ad8c:	d811883a 	mov	r8,sp
    ad90:	003ff206 	br	ad5c <__alt_data_end+0xff00ad5c>
    ad94:	d9402117 	ldw	r5,132(sp)
    ad98:	d9801a04 	addi	r6,sp,104
    ad9c:	e009883a 	mov	r4,fp
    ada0:	0009e780 	call	9e78 <__sprint_r.part.0>
    ada4:	103fcd1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    ada8:	d9001b17 	ldw	r4,108(sp)
    adac:	d8801c17 	ldw	r2,112(sp)
    adb0:	d811883a 	mov	r8,sp
    adb4:	21400044 	addi	r5,r4,1
    adb8:	003fe806 	br	ad5c <__alt_data_end+0xff00ad5c>
    adbc:	d9402117 	ldw	r5,132(sp)
    adc0:	d9002017 	ldw	r4,128(sp)
    adc4:	d9801a04 	addi	r6,sp,104
    adc8:	d9c02b15 	stw	r7,172(sp)
    adcc:	db402a15 	stw	r13,168(sp)
    add0:	0009e780 	call	9e78 <__sprint_r.part.0>
    add4:	d9c02b17 	ldw	r7,172(sp)
    add8:	db402a17 	ldw	r13,168(sp)
    addc:	103fbf1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    ade0:	d9401b17 	ldw	r5,108(sp)
    ade4:	d8801c17 	ldw	r2,112(sp)
    ade8:	d811883a 	mov	r8,sp
    adec:	29800044 	addi	r6,r5,1
    adf0:	003dc406 	br	a504 <__alt_data_end+0xff00a504>
    adf4:	1000d21e 	bne	r2,zero,b140 <___vfiprintf_internal_r+0x11b4>
    adf8:	d8c01d87 	ldb	r3,118(sp)
    adfc:	18009526 	beq	r3,zero,b054 <___vfiprintf_internal_r+0x10c8>
    ae00:	00800044 	movi	r2,1
    ae04:	d8c01d84 	addi	r3,sp,118
    ae08:	1009883a 	mov	r4,r2
    ae0c:	d8c00015 	stw	r3,0(sp)
    ae10:	d8800115 	stw	r2,4(sp)
    ae14:	d811883a 	mov	r8,sp
    ae18:	200b883a 	mov	r5,r4
    ae1c:	42000204 	addi	r8,r8,8
    ae20:	21000044 	addi	r4,r4,1
    ae24:	003d9706 	br	a484 <__alt_data_end+0xff00a484>
    ae28:	d9001d04 	addi	r4,sp,116
    ae2c:	00800084 	movi	r2,2
    ae30:	d9000015 	stw	r4,0(sp)
    ae34:	d8800115 	stw	r2,4(sp)
    ae38:	1809883a 	mov	r4,r3
    ae3c:	d811883a 	mov	r8,sp
    ae40:	200b883a 	mov	r5,r4
    ae44:	42000204 	addi	r8,r8,8
    ae48:	21000044 	addi	r4,r4,1
    ae4c:	003f4e06 	br	ab88 <__alt_data_end+0xff00ab88>
    ae50:	d8001d85 	stb	zero,118(sp)
    ae54:	48005016 	blt	r9,zero,af98 <___vfiprintf_internal_r+0x100c>
    ae58:	00ffdfc4 	movi	r3,-129
    ae5c:	94c4b03a 	or	r2,r18,r19
    ae60:	a0e8703a 	and	r20,r20,r3
    ae64:	103d4426 	beq	r2,zero,a378 <__alt_data_end+0xff00a378>
    ae68:	0039883a 	mov	fp,zero
    ae6c:	d9002617 	ldw	r4,152(sp)
    ae70:	dd401a04 	addi	r21,sp,104
    ae74:	908003cc 	andi	r2,r18,15
    ae78:	9806973a 	slli	r3,r19,28
    ae7c:	2085883a 	add	r2,r4,r2
    ae80:	9024d13a 	srli	r18,r18,4
    ae84:	10800003 	ldbu	r2,0(r2)
    ae88:	9826d13a 	srli	r19,r19,4
    ae8c:	ad7fffc4 	addi	r21,r21,-1
    ae90:	1ca4b03a 	or	r18,r3,r18
    ae94:	a8800005 	stb	r2,0(r21)
    ae98:	94c4b03a 	or	r2,r18,r19
    ae9c:	103ff51e 	bne	r2,zero,ae74 <__alt_data_end+0xff00ae74>
    aea0:	003e5906 	br	a808 <__alt_data_end+0xff00a808>
    aea4:	d9402117 	ldw	r5,132(sp)
    aea8:	d9002017 	ldw	r4,128(sp)
    aeac:	d9801a04 	addi	r6,sp,104
    aeb0:	0009e780 	call	9e78 <__sprint_r.part.0>
    aeb4:	103f891e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    aeb8:	d8801c17 	ldw	r2,112(sp)
    aebc:	d811883a 	mov	r8,sp
    aec0:	003f9506 	br	ad18 <__alt_data_end+0xff00ad18>
    aec4:	d9402117 	ldw	r5,132(sp)
    aec8:	d9002017 	ldw	r4,128(sp)
    aecc:	d9801a04 	addi	r6,sp,104
    aed0:	0009e780 	call	9e78 <__sprint_r.part.0>
    aed4:	103f811e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    aed8:	d811883a 	mov	r8,sp
    aedc:	003ced06 	br	a294 <__alt_data_end+0xff00a294>
    aee0:	d9402117 	ldw	r5,132(sp)
    aee4:	d9002017 	ldw	r4,128(sp)
    aee8:	d9801a04 	addi	r6,sp,104
    aeec:	da402c15 	stw	r9,176(sp)
    aef0:	db802a15 	stw	r14,168(sp)
    aef4:	0009e780 	call	9e78 <__sprint_r.part.0>
    aef8:	da402c17 	ldw	r9,176(sp)
    aefc:	db802a17 	ldw	r14,168(sp)
    af00:	103f761e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    af04:	d9401b17 	ldw	r5,108(sp)
    af08:	d8801c17 	ldw	r2,112(sp)
    af0c:	d811883a 	mov	r8,sp
    af10:	29000044 	addi	r4,r5,1
    af14:	003d5b06 	br	a484 <__alt_data_end+0xff00a484>
    af18:	d9402117 	ldw	r5,132(sp)
    af1c:	d9002017 	ldw	r4,128(sp)
    af20:	d9801a04 	addi	r6,sp,104
    af24:	da402c15 	stw	r9,176(sp)
    af28:	0009e780 	call	9e78 <__sprint_r.part.0>
    af2c:	da402c17 	ldw	r9,176(sp)
    af30:	103f6a1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    af34:	d9401b17 	ldw	r5,108(sp)
    af38:	d8801c17 	ldw	r2,112(sp)
    af3c:	d811883a 	mov	r8,sp
    af40:	29000044 	addi	r4,r5,1
    af44:	003f1006 	br	ab88 <__alt_data_end+0xff00ab88>
    af48:	1000c31e 	bne	r2,zero,b258 <___vfiprintf_internal_r+0x12cc>
    af4c:	01000044 	movi	r4,1
    af50:	000b883a 	mov	r5,zero
    af54:	d811883a 	mov	r8,sp
    af58:	003f0d06 	br	ab90 <__alt_data_end+0xff00ab90>
    af5c:	d9402117 	ldw	r5,132(sp)
    af60:	d9002017 	ldw	r4,128(sp)
    af64:	d9801a04 	addi	r6,sp,104
    af68:	0009e780 	call	9e78 <__sprint_r.part.0>
    af6c:	103f5b1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    af70:	d9001b17 	ldw	r4,108(sp)
    af74:	d8801c17 	ldw	r2,112(sp)
    af78:	d811883a 	mov	r8,sp
    af7c:	21000044 	addi	r4,r4,1
    af80:	003d8006 	br	a584 <__alt_data_end+0xff00a584>
    af84:	01000074 	movhi	r4,1
    af88:	21055b04 	addi	r4,r4,5484
    af8c:	d9002615 	stw	r4,152(sp)
    af90:	d8c02215 	stw	r3,136(sp)
    af94:	1029883a 	mov	r20,r2
    af98:	94c4b03a 	or	r2,r18,r19
    af9c:	103fb21e 	bne	r2,zero,ae68 <__alt_data_end+0xff00ae68>
    afa0:	0039883a 	mov	fp,zero
    afa4:	00800084 	movi	r2,2
    afa8:	003e6b06 	br	a958 <__alt_data_end+0xff00a958>
    afac:	da802217 	ldw	r10,136(sp)
    afb0:	d8001d85 	stb	zero,118(sp)
    afb4:	0027883a 	mov	r19,zero
    afb8:	50800104 	addi	r2,r10,4
    afbc:	54800017 	ldw	r18,0(r10)
    afc0:	483e6016 	blt	r9,zero,a944 <__alt_data_end+0xff00a944>
    afc4:	00ffdfc4 	movi	r3,-129
    afc8:	d8802215 	stw	r2,136(sp)
    afcc:	a0e8703a 	and	r20,r20,r3
    afd0:	0039883a 	mov	fp,zero
    afd4:	903ebb26 	beq	r18,zero,aac4 <__alt_data_end+0xff00aac4>
    afd8:	00800244 	movi	r2,9
    afdc:	14bdee36 	bltu	r2,r18,a798 <__alt_data_end+0xff00a798>
    afe0:	003eba06 	br	aacc <__alt_data_end+0xff00aacc>
    afe4:	00800c04 	movi	r2,48
    afe8:	d8c01d45 	stb	r3,117(sp)
    afec:	d8801d05 	stb	r2,116(sp)
    aff0:	d8001d85 	stb	zero,118(sp)
    aff4:	a0c00094 	ori	r3,r20,2
    aff8:	4800a916 	blt	r9,zero,b2a0 <___vfiprintf_internal_r+0x1314>
    affc:	00bfdfc4 	movi	r2,-129
    b000:	a096703a 	and	r11,r20,r2
    b004:	5d000094 	ori	r20,r11,2
    b008:	0039883a 	mov	fp,zero
    b00c:	003f9706 	br	ae6c <__alt_data_end+0xff00ae6c>
    b010:	8025883a 	mov	r18,r16
    b014:	003c2e06 	br	a0d0 <__alt_data_end+0xff00a0d0>
    b018:	00800074 	movhi	r2,1
    b01c:	10855b04 	addi	r2,r2,5484
    b020:	0039883a 	mov	fp,zero
    b024:	d8802615 	stw	r2,152(sp)
    b028:	003f9006 	br	ae6c <__alt_data_end+0xff00ae6c>
    b02c:	04a5c83a 	sub	r18,zero,r18
    b030:	07000b44 	movi	fp,45
    b034:	9004c03a 	cmpne	r2,r18,zero
    b038:	04e7c83a 	sub	r19,zero,r19
    b03c:	df001d85 	stb	fp,118(sp)
    b040:	98a7c83a 	sub	r19,r19,r2
    b044:	48009f16 	blt	r9,zero,b2c4 <___vfiprintf_internal_r+0x1338>
    b048:	00bfdfc4 	movi	r2,-129
    b04c:	a0a8703a 	and	r20,r20,r2
    b050:	003dd006 	br	a794 <__alt_data_end+0xff00a794>
    b054:	70004c26 	beq	r14,zero,b188 <___vfiprintf_internal_r+0x11fc>
    b058:	00800084 	movi	r2,2
    b05c:	d8c01d04 	addi	r3,sp,116
    b060:	d8c00015 	stw	r3,0(sp)
    b064:	d8800115 	stw	r2,4(sp)
    b068:	01000044 	movi	r4,1
    b06c:	d811883a 	mov	r8,sp
    b070:	003f7306 	br	ae40 <__alt_data_end+0xff00ae40>
    b074:	a080100c 	andi	r2,r20,64
    b078:	da802217 	ldw	r10,136(sp)
    b07c:	103e0626 	beq	r2,zero,a898 <__alt_data_end+0xff00a898>
    b080:	5480000f 	ldh	r18,0(r10)
    b084:	52800104 	addi	r10,r10,4
    b088:	da802215 	stw	r10,136(sp)
    b08c:	9027d7fa 	srai	r19,r18,31
    b090:	9805883a 	mov	r2,r19
    b094:	003db806 	br	a778 <__alt_data_end+0xff00a778>
    b098:	a080040c 	andi	r2,r20,16
    b09c:	1000091e 	bne	r2,zero,b0c4 <___vfiprintf_internal_r+0x1138>
    b0a0:	a2c0100c 	andi	r11,r20,64
    b0a4:	58000726 	beq	r11,zero,b0c4 <___vfiprintf_internal_r+0x1138>
    b0a8:	da802217 	ldw	r10,136(sp)
    b0ac:	50800017 	ldw	r2,0(r10)
    b0b0:	52800104 	addi	r10,r10,4
    b0b4:	da802215 	stw	r10,136(sp)
    b0b8:	da802317 	ldw	r10,140(sp)
    b0bc:	1280000d 	sth	r10,0(r2)
    b0c0:	003be706 	br	a060 <__alt_data_end+0xff00a060>
    b0c4:	da802217 	ldw	r10,136(sp)
    b0c8:	50800017 	ldw	r2,0(r10)
    b0cc:	52800104 	addi	r10,r10,4
    b0d0:	da802215 	stw	r10,136(sp)
    b0d4:	da802317 	ldw	r10,140(sp)
    b0d8:	12800015 	stw	r10,0(r2)
    b0dc:	003be006 	br	a060 <__alt_data_end+0xff00a060>
    b0e0:	a080100c 	andi	r2,r20,64
    b0e4:	da802217 	ldw	r10,136(sp)
    b0e8:	10003026 	beq	r2,zero,b1ac <___vfiprintf_internal_r+0x1220>
    b0ec:	5480000b 	ldhu	r18,0(r10)
    b0f0:	52800104 	addi	r10,r10,4
    b0f4:	0027883a 	mov	r19,zero
    b0f8:	da802215 	stw	r10,136(sp)
    b0fc:	003d8006 	br	a700 <__alt_data_end+0xff00a700>
    b100:	80c00007 	ldb	r3,0(r16)
    b104:	003c0006 	br	a108 <__alt_data_end+0xff00a108>
    b108:	a080100c 	andi	r2,r20,64
    b10c:	d8001d85 	stb	zero,118(sp)
    b110:	da802217 	ldw	r10,136(sp)
    b114:	1000201e 	bne	r2,zero,b198 <___vfiprintf_internal_r+0x120c>
    b118:	50800104 	addi	r2,r10,4
    b11c:	54800017 	ldw	r18,0(r10)
    b120:	0027883a 	mov	r19,zero
    b124:	483def0e 	bge	r9,zero,a8e4 <__alt_data_end+0xff00a8e4>
    b128:	94c6b03a 	or	r3,r18,r19
    b12c:	d8802215 	stw	r2,136(sp)
    b130:	183d4e1e 	bne	r3,zero,a66c <__alt_data_end+0xff00a66c>
    b134:	0039883a 	mov	fp,zero
    b138:	0005883a 	mov	r2,zero
    b13c:	003e0606 	br	a958 <__alt_data_end+0xff00a958>
    b140:	d9402117 	ldw	r5,132(sp)
    b144:	d9002017 	ldw	r4,128(sp)
    b148:	d9801a04 	addi	r6,sp,104
    b14c:	da402c15 	stw	r9,176(sp)
    b150:	db802a15 	stw	r14,168(sp)
    b154:	0009e780 	call	9e78 <__sprint_r.part.0>
    b158:	da402c17 	ldw	r9,176(sp)
    b15c:	db802a17 	ldw	r14,168(sp)
    b160:	103ede1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    b164:	d9401b17 	ldw	r5,108(sp)
    b168:	d8801c17 	ldw	r2,112(sp)
    b16c:	d811883a 	mov	r8,sp
    b170:	29000044 	addi	r4,r5,1
    b174:	003e7406 	br	ab48 <__alt_data_end+0xff00ab48>
    b178:	00bfffc4 	movi	r2,-1
    b17c:	003c5806 	br	a2e0 <__alt_data_end+0xff00a2e0>
    b180:	d811883a 	mov	r8,sp
    b184:	003ee806 	br	ad28 <__alt_data_end+0xff00ad28>
    b188:	000b883a 	mov	r5,zero
    b18c:	01000044 	movi	r4,1
    b190:	d811883a 	mov	r8,sp
    b194:	003e7c06 	br	ab88 <__alt_data_end+0xff00ab88>
    b198:	50800104 	addi	r2,r10,4
    b19c:	5480000b 	ldhu	r18,0(r10)
    b1a0:	0027883a 	mov	r19,zero
    b1a4:	483dcf0e 	bge	r9,zero,a8e4 <__alt_data_end+0xff00a8e4>
    b1a8:	003fdf06 	br	b128 <__alt_data_end+0xff00b128>
    b1ac:	54800017 	ldw	r18,0(r10)
    b1b0:	52800104 	addi	r10,r10,4
    b1b4:	0027883a 	mov	r19,zero
    b1b8:	da802215 	stw	r10,136(sp)
    b1bc:	003d5006 	br	a700 <__alt_data_end+0xff00a700>
    b1c0:	50800104 	addi	r2,r10,4
    b1c4:	5480000b 	ldhu	r18,0(r10)
    b1c8:	0027883a 	mov	r19,zero
    b1cc:	483f7d0e 	bge	r9,zero,afc4 <__alt_data_end+0xff00afc4>
    b1d0:	003ddc06 	br	a944 <__alt_data_end+0xff00a944>
    b1d4:	d8c02215 	stw	r3,136(sp)
    b1d8:	0039883a 	mov	fp,zero
    b1dc:	003ddb06 	br	a94c <__alt_data_end+0xff00a94c>
    b1e0:	02800074 	movhi	r10,1
    b1e4:	5285bc04 	addi	r10,r10,5872
    b1e8:	da802415 	stw	r10,144(sp)
    b1ec:	003e8306 	br	abfc <__alt_data_end+0xff00abfc>
    b1f0:	d8801c17 	ldw	r2,112(sp)
    b1f4:	dd002117 	ldw	r20,132(sp)
    b1f8:	103eb926 	beq	r2,zero,ace0 <__alt_data_end+0xff00ace0>
    b1fc:	d9002017 	ldw	r4,128(sp)
    b200:	d9801a04 	addi	r6,sp,104
    b204:	a00b883a 	mov	r5,r20
    b208:	0009e780 	call	9e78 <__sprint_r.part.0>
    b20c:	003eb406 	br	ace0 <__alt_data_end+0xff00ace0>
    b210:	80c00043 	ldbu	r3,1(r16)
    b214:	a5000814 	ori	r20,r20,32
    b218:	84000044 	addi	r16,r16,1
    b21c:	18c03fcc 	andi	r3,r3,255
    b220:	18c0201c 	xori	r3,r3,128
    b224:	18ffe004 	addi	r3,r3,-128
    b228:	003bb706 	br	a108 <__alt_data_end+0xff00a108>
    b22c:	a809883a 	mov	r4,r21
    b230:	d8c02a15 	stw	r3,168(sp)
    b234:	da002b15 	stw	r8,172(sp)
    b238:	00031400 	call	3140 <strlen>
    b23c:	d8c02a17 	ldw	r3,168(sp)
    b240:	1027883a 	mov	r19,r2
    b244:	df001d83 	ldbu	fp,118(sp)
    b248:	d8c02215 	stw	r3,136(sp)
    b24c:	0013883a 	mov	r9,zero
    b250:	da002b17 	ldw	r8,172(sp)
    b254:	003c4d06 	br	a38c <__alt_data_end+0xff00a38c>
    b258:	d9402117 	ldw	r5,132(sp)
    b25c:	d9002017 	ldw	r4,128(sp)
    b260:	d9801a04 	addi	r6,sp,104
    b264:	da402c15 	stw	r9,176(sp)
    b268:	0009e780 	call	9e78 <__sprint_r.part.0>
    b26c:	da402c17 	ldw	r9,176(sp)
    b270:	103e9a1e 	bne	r2,zero,acdc <__alt_data_end+0xff00acdc>
    b274:	d9401b17 	ldw	r5,108(sp)
    b278:	d8801c17 	ldw	r2,112(sp)
    b27c:	d811883a 	mov	r8,sp
    b280:	29000044 	addi	r4,r5,1
    b284:	003e4206 	br	ab90 <__alt_data_end+0xff00ab90>
    b288:	d9401b17 	ldw	r5,108(sp)
    b28c:	01000074 	movhi	r4,1
    b290:	2105c004 	addi	r4,r4,5888
    b294:	d9002415 	stw	r4,144(sp)
    b298:	29400044 	addi	r5,r5,1
    b29c:	003c6d06 	br	a454 <__alt_data_end+0xff00a454>
    b2a0:	0039883a 	mov	fp,zero
    b2a4:	00800084 	movi	r2,2
    b2a8:	10803fcc 	andi	r2,r2,255
    b2ac:	01000044 	movi	r4,1
    b2b0:	11001e26 	beq	r2,r4,b32c <___vfiprintf_internal_r+0x13a0>
    b2b4:	01000084 	movi	r4,2
    b2b8:	11001e1e 	bne	r2,r4,b334 <___vfiprintf_internal_r+0x13a8>
    b2bc:	1829883a 	mov	r20,r3
    b2c0:	003eea06 	br	ae6c <__alt_data_end+0xff00ae6c>
    b2c4:	a007883a 	mov	r3,r20
    b2c8:	00800044 	movi	r2,1
    b2cc:	003ff606 	br	b2a8 <__alt_data_end+0xff00b2a8>
    b2d0:	00800184 	movi	r2,6
    b2d4:	1240012e 	bgeu	r2,r9,b2dc <___vfiprintf_internal_r+0x1350>
    b2d8:	1013883a 	mov	r9,r2
    b2dc:	4827883a 	mov	r19,r9
    b2e0:	4825883a 	mov	r18,r9
    b2e4:	48001516 	blt	r9,zero,b33c <___vfiprintf_internal_r+0x13b0>
    b2e8:	05400074 	movhi	r21,1
    b2ec:	d8c02215 	stw	r3,136(sp)
    b2f0:	ad456004 	addi	r21,r21,5504
    b2f4:	003d1406 	br	a748 <__alt_data_end+0xff00a748>
    b2f8:	02800074 	movhi	r10,1
    b2fc:	5285bc04 	addi	r10,r10,5872
    b300:	da802415 	stw	r10,144(sp)
    b304:	200d883a 	mov	r6,r4
    b308:	003c9106 	br	a550 <__alt_data_end+0xff00a550>
    b30c:	5021883a 	mov	r16,r10
    b310:	0013883a 	mov	r9,zero
    b314:	003b7d06 	br	a10c <__alt_data_end+0xff00a10c>
    b318:	4827883a 	mov	r19,r9
    b31c:	df001d83 	ldbu	fp,118(sp)
    b320:	d8c02215 	stw	r3,136(sp)
    b324:	0013883a 	mov	r9,zero
    b328:	003c1806 	br	a38c <__alt_data_end+0xff00a38c>
    b32c:	1829883a 	mov	r20,r3
    b330:	003d1806 	br	a794 <__alt_data_end+0xff00a794>
    b334:	1829883a 	mov	r20,r3
    b338:	003ccd06 	br	a670 <__alt_data_end+0xff00a670>
    b33c:	0025883a 	mov	r18,zero
    b340:	003fe906 	br	b2e8 <__alt_data_end+0xff00b2e8>
    b344:	d8802217 	ldw	r2,136(sp)
    b348:	80c00043 	ldbu	r3,1(r16)
    b34c:	5021883a 	mov	r16,r10
    b350:	12400017 	ldw	r9,0(r2)
    b354:	10800104 	addi	r2,r2,4
    b358:	d8802215 	stw	r2,136(sp)
    b35c:	483faf0e 	bge	r9,zero,b21c <__alt_data_end+0xff00b21c>
    b360:	18c03fcc 	andi	r3,r3,255
    b364:	18c0201c 	xori	r3,r3,128
    b368:	027fffc4 	movi	r9,-1
    b36c:	18ffe004 	addi	r3,r3,-128
    b370:	003b6506 	br	a108 <__alt_data_end+0xff00a108>
    b374:	d9c01d85 	stb	r7,118(sp)
    b378:	003ca006 	br	a5fc <__alt_data_end+0xff00a5fc>
    b37c:	d9c01d85 	stb	r7,118(sp)
    b380:	003cad06 	br	a638 <__alt_data_end+0xff00a638>
    b384:	d9c01d85 	stb	r7,118(sp)
    b388:	003d7d06 	br	a980 <__alt_data_end+0xff00a980>
    b38c:	d9c01d85 	stb	r7,118(sp)
    b390:	003d5f06 	br	a910 <__alt_data_end+0xff00a910>
    b394:	a080004c 	andi	r2,r20,1
    b398:	0039883a 	mov	fp,zero
    b39c:	10000526 	beq	r2,zero,b3b4 <___vfiprintf_internal_r+0x1428>
    b3a0:	00800c04 	movi	r2,48
    b3a4:	d88019c5 	stb	r2,103(sp)
    b3a8:	dcc02717 	ldw	r19,156(sp)
    b3ac:	dd4019c4 	addi	r21,sp,103
    b3b0:	003bf606 	br	a38c <__alt_data_end+0xff00a38c>
    b3b4:	0027883a 	mov	r19,zero
    b3b8:	dd401a04 	addi	r21,sp,104
    b3bc:	003bf306 	br	a38c <__alt_data_end+0xff00a38c>
    b3c0:	d9c01d85 	stb	r7,118(sp)
    b3c4:	003dc806 	br	aae8 <__alt_data_end+0xff00aae8>
    b3c8:	d9c01d85 	stb	r7,118(sp)
    b3cc:	003d3a06 	br	a8b8 <__alt_data_end+0xff00a8b8>
    b3d0:	d9c01d85 	stb	r7,118(sp)
    b3d4:	003d2a06 	br	a880 <__alt_data_end+0xff00a880>
    b3d8:	d9c01d85 	stb	r7,118(sp)
    b3dc:	003cde06 	br	a758 <__alt_data_end+0xff00a758>
    b3e0:	d9c01d85 	stb	r7,118(sp)
    b3e4:	003cbc06 	br	a6d8 <__alt_data_end+0xff00a6d8>

0000b3e8 <__vfiprintf_internal>:
    b3e8:	00800074 	movhi	r2,1
    b3ec:	108cbd04 	addi	r2,r2,13044
    b3f0:	300f883a 	mov	r7,r6
    b3f4:	280d883a 	mov	r6,r5
    b3f8:	200b883a 	mov	r5,r4
    b3fc:	11000017 	ldw	r4,0(r2)
    b400:	0009f8c1 	jmpi	9f8c <___vfiprintf_internal_r>

0000b404 <__sbprintf>:
    b404:	2880030b 	ldhu	r2,12(r5)
    b408:	2ac01917 	ldw	r11,100(r5)
    b40c:	2a80038b 	ldhu	r10,14(r5)
    b410:	2a400717 	ldw	r9,28(r5)
    b414:	2a000917 	ldw	r8,36(r5)
    b418:	defee204 	addi	sp,sp,-1144
    b41c:	00c10004 	movi	r3,1024
    b420:	dc011a15 	stw	r16,1128(sp)
    b424:	10bfff4c 	andi	r2,r2,65533
    b428:	2821883a 	mov	r16,r5
    b42c:	d8cb883a 	add	r5,sp,r3
    b430:	dc811c15 	stw	r18,1136(sp)
    b434:	dc411b15 	stw	r17,1132(sp)
    b438:	dfc11d15 	stw	ra,1140(sp)
    b43c:	2025883a 	mov	r18,r4
    b440:	d881030d 	sth	r2,1036(sp)
    b444:	dac11915 	stw	r11,1124(sp)
    b448:	da81038d 	sth	r10,1038(sp)
    b44c:	da410715 	stw	r9,1052(sp)
    b450:	da010915 	stw	r8,1060(sp)
    b454:	dec10015 	stw	sp,1024(sp)
    b458:	dec10415 	stw	sp,1040(sp)
    b45c:	d8c10215 	stw	r3,1032(sp)
    b460:	d8c10515 	stw	r3,1044(sp)
    b464:	d8010615 	stw	zero,1048(sp)
    b468:	0009f8c0 	call	9f8c <___vfiprintf_internal_r>
    b46c:	1023883a 	mov	r17,r2
    b470:	10000416 	blt	r2,zero,b484 <__sbprintf+0x80>
    b474:	d9410004 	addi	r5,sp,1024
    b478:	9009883a 	mov	r4,r18
    b47c:	00070a00 	call	70a0 <_fflush_r>
    b480:	10000d1e 	bne	r2,zero,b4b8 <__sbprintf+0xb4>
    b484:	d881030b 	ldhu	r2,1036(sp)
    b488:	1080100c 	andi	r2,r2,64
    b48c:	10000326 	beq	r2,zero,b49c <__sbprintf+0x98>
    b490:	8080030b 	ldhu	r2,12(r16)
    b494:	10801014 	ori	r2,r2,64
    b498:	8080030d 	sth	r2,12(r16)
    b49c:	8805883a 	mov	r2,r17
    b4a0:	dfc11d17 	ldw	ra,1140(sp)
    b4a4:	dc811c17 	ldw	r18,1136(sp)
    b4a8:	dc411b17 	ldw	r17,1132(sp)
    b4ac:	dc011a17 	ldw	r16,1128(sp)
    b4b0:	dec11e04 	addi	sp,sp,1144
    b4b4:	f800283a 	ret
    b4b8:	047fffc4 	movi	r17,-1
    b4bc:	003ff106 	br	b484 <__alt_data_end+0xff00b484>

0000b4c0 <_write_r>:
    b4c0:	defffd04 	addi	sp,sp,-12
    b4c4:	2805883a 	mov	r2,r5
    b4c8:	dc000015 	stw	r16,0(sp)
    b4cc:	04000074 	movhi	r16,1
    b4d0:	dc400115 	stw	r17,4(sp)
    b4d4:	300b883a 	mov	r5,r6
    b4d8:	8413da04 	addi	r16,r16,20328
    b4dc:	2023883a 	mov	r17,r4
    b4e0:	380d883a 	mov	r6,r7
    b4e4:	1009883a 	mov	r4,r2
    b4e8:	dfc00215 	stw	ra,8(sp)
    b4ec:	80000015 	stw	zero,0(r16)
    b4f0:	000ed940 	call	ed94 <write>
    b4f4:	00ffffc4 	movi	r3,-1
    b4f8:	10c00526 	beq	r2,r3,b510 <_write_r+0x50>
    b4fc:	dfc00217 	ldw	ra,8(sp)
    b500:	dc400117 	ldw	r17,4(sp)
    b504:	dc000017 	ldw	r16,0(sp)
    b508:	dec00304 	addi	sp,sp,12
    b50c:	f800283a 	ret
    b510:	80c00017 	ldw	r3,0(r16)
    b514:	183ff926 	beq	r3,zero,b4fc <__alt_data_end+0xff00b4fc>
    b518:	88c00015 	stw	r3,0(r17)
    b51c:	003ff706 	br	b4fc <__alt_data_end+0xff00b4fc>

0000b520 <_close_r>:
    b520:	defffd04 	addi	sp,sp,-12
    b524:	dc000015 	stw	r16,0(sp)
    b528:	04000074 	movhi	r16,1
    b52c:	dc400115 	stw	r17,4(sp)
    b530:	8413da04 	addi	r16,r16,20328
    b534:	2023883a 	mov	r17,r4
    b538:	2809883a 	mov	r4,r5
    b53c:	dfc00215 	stw	ra,8(sp)
    b540:	80000015 	stw	zero,0(r16)
    b544:	000e5540 	call	e554 <close>
    b548:	00ffffc4 	movi	r3,-1
    b54c:	10c00526 	beq	r2,r3,b564 <_close_r+0x44>
    b550:	dfc00217 	ldw	ra,8(sp)
    b554:	dc400117 	ldw	r17,4(sp)
    b558:	dc000017 	ldw	r16,0(sp)
    b55c:	dec00304 	addi	sp,sp,12
    b560:	f800283a 	ret
    b564:	80c00017 	ldw	r3,0(r16)
    b568:	183ff926 	beq	r3,zero,b550 <__alt_data_end+0xff00b550>
    b56c:	88c00015 	stw	r3,0(r17)
    b570:	003ff706 	br	b550 <__alt_data_end+0xff00b550>

0000b574 <_calloc_r>:
    b574:	298b383a 	mul	r5,r5,r6
    b578:	defffe04 	addi	sp,sp,-8
    b57c:	dfc00115 	stw	ra,4(sp)
    b580:	dc000015 	stw	r16,0(sp)
    b584:	00027a00 	call	27a0 <_malloc_r>
    b588:	10002926 	beq	r2,zero,b630 <_calloc_r+0xbc>
    b58c:	11bfff17 	ldw	r6,-4(r2)
    b590:	1021883a 	mov	r16,r2
    b594:	00bfff04 	movi	r2,-4
    b598:	308c703a 	and	r6,r6,r2
    b59c:	00c00904 	movi	r3,36
    b5a0:	308d883a 	add	r6,r6,r2
    b5a4:	19801636 	bltu	r3,r6,b600 <_calloc_r+0x8c>
    b5a8:	008004c4 	movi	r2,19
    b5ac:	11800b2e 	bgeu	r2,r6,b5dc <_calloc_r+0x68>
    b5b0:	80000015 	stw	zero,0(r16)
    b5b4:	80000115 	stw	zero,4(r16)
    b5b8:	008006c4 	movi	r2,27
    b5bc:	11801a2e 	bgeu	r2,r6,b628 <_calloc_r+0xb4>
    b5c0:	80000215 	stw	zero,8(r16)
    b5c4:	80000315 	stw	zero,12(r16)
    b5c8:	30c0151e 	bne	r6,r3,b620 <_calloc_r+0xac>
    b5cc:	80000415 	stw	zero,16(r16)
    b5d0:	80800604 	addi	r2,r16,24
    b5d4:	80000515 	stw	zero,20(r16)
    b5d8:	00000106 	br	b5e0 <_calloc_r+0x6c>
    b5dc:	8005883a 	mov	r2,r16
    b5e0:	10000015 	stw	zero,0(r2)
    b5e4:	10000115 	stw	zero,4(r2)
    b5e8:	10000215 	stw	zero,8(r2)
    b5ec:	8005883a 	mov	r2,r16
    b5f0:	dfc00117 	ldw	ra,4(sp)
    b5f4:	dc000017 	ldw	r16,0(sp)
    b5f8:	dec00204 	addi	sp,sp,8
    b5fc:	f800283a 	ret
    b600:	000b883a 	mov	r5,zero
    b604:	8009883a 	mov	r4,r16
    b608:	00085640 	call	8564 <memset>
    b60c:	8005883a 	mov	r2,r16
    b610:	dfc00117 	ldw	ra,4(sp)
    b614:	dc000017 	ldw	r16,0(sp)
    b618:	dec00204 	addi	sp,sp,8
    b61c:	f800283a 	ret
    b620:	80800404 	addi	r2,r16,16
    b624:	003fee06 	br	b5e0 <__alt_data_end+0xff00b5e0>
    b628:	80800204 	addi	r2,r16,8
    b62c:	003fec06 	br	b5e0 <__alt_data_end+0xff00b5e0>
    b630:	0005883a 	mov	r2,zero
    b634:	003fee06 	br	b5f0 <__alt_data_end+0xff00b5f0>

0000b638 <_fclose_r>:
    b638:	28003926 	beq	r5,zero,b720 <_fclose_r+0xe8>
    b63c:	defffc04 	addi	sp,sp,-16
    b640:	dc400115 	stw	r17,4(sp)
    b644:	dc000015 	stw	r16,0(sp)
    b648:	dfc00315 	stw	ra,12(sp)
    b64c:	dc800215 	stw	r18,8(sp)
    b650:	2023883a 	mov	r17,r4
    b654:	2821883a 	mov	r16,r5
    b658:	20000226 	beq	r4,zero,b664 <_fclose_r+0x2c>
    b65c:	20800e17 	ldw	r2,56(r4)
    b660:	10002726 	beq	r2,zero,b700 <_fclose_r+0xc8>
    b664:	8080030f 	ldh	r2,12(r16)
    b668:	1000071e 	bne	r2,zero,b688 <_fclose_r+0x50>
    b66c:	0005883a 	mov	r2,zero
    b670:	dfc00317 	ldw	ra,12(sp)
    b674:	dc800217 	ldw	r18,8(sp)
    b678:	dc400117 	ldw	r17,4(sp)
    b67c:	dc000017 	ldw	r16,0(sp)
    b680:	dec00404 	addi	sp,sp,16
    b684:	f800283a 	ret
    b688:	800b883a 	mov	r5,r16
    b68c:	8809883a 	mov	r4,r17
    b690:	0006e840 	call	6e84 <__sflush_r>
    b694:	1025883a 	mov	r18,r2
    b698:	80800b17 	ldw	r2,44(r16)
    b69c:	10000426 	beq	r2,zero,b6b0 <_fclose_r+0x78>
    b6a0:	81400717 	ldw	r5,28(r16)
    b6a4:	8809883a 	mov	r4,r17
    b6a8:	103ee83a 	callr	r2
    b6ac:	10001616 	blt	r2,zero,b708 <_fclose_r+0xd0>
    b6b0:	8080030b 	ldhu	r2,12(r16)
    b6b4:	1080200c 	andi	r2,r2,128
    b6b8:	1000151e 	bne	r2,zero,b710 <_fclose_r+0xd8>
    b6bc:	81400c17 	ldw	r5,48(r16)
    b6c0:	28000526 	beq	r5,zero,b6d8 <_fclose_r+0xa0>
    b6c4:	80801004 	addi	r2,r16,64
    b6c8:	28800226 	beq	r5,r2,b6d4 <_fclose_r+0x9c>
    b6cc:	8809883a 	mov	r4,r17
    b6d0:	00075f00 	call	75f0 <_free_r>
    b6d4:	80000c15 	stw	zero,48(r16)
    b6d8:	81401117 	ldw	r5,68(r16)
    b6dc:	28000326 	beq	r5,zero,b6ec <_fclose_r+0xb4>
    b6e0:	8809883a 	mov	r4,r17
    b6e4:	00075f00 	call	75f0 <_free_r>
    b6e8:	80001115 	stw	zero,68(r16)
    b6ec:	000748c0 	call	748c <__sfp_lock_acquire>
    b6f0:	8000030d 	sth	zero,12(r16)
    b6f4:	00074900 	call	7490 <__sfp_lock_release>
    b6f8:	9005883a 	mov	r2,r18
    b6fc:	003fdc06 	br	b670 <__alt_data_end+0xff00b670>
    b700:	000747c0 	call	747c <__sinit>
    b704:	003fd706 	br	b664 <__alt_data_end+0xff00b664>
    b708:	04bfffc4 	movi	r18,-1
    b70c:	003fe806 	br	b6b0 <__alt_data_end+0xff00b6b0>
    b710:	81400417 	ldw	r5,16(r16)
    b714:	8809883a 	mov	r4,r17
    b718:	00075f00 	call	75f0 <_free_r>
    b71c:	003fe706 	br	b6bc <__alt_data_end+0xff00b6bc>
    b720:	0005883a 	mov	r2,zero
    b724:	f800283a 	ret

0000b728 <fclose>:
    b728:	00800074 	movhi	r2,1
    b72c:	108cbd04 	addi	r2,r2,13044
    b730:	200b883a 	mov	r5,r4
    b734:	11000017 	ldw	r4,0(r2)
    b738:	000b6381 	jmpi	b638 <_fclose_r>

0000b73c <__fputwc>:
    b73c:	defff804 	addi	sp,sp,-32
    b740:	dcc00415 	stw	r19,16(sp)
    b744:	dc800315 	stw	r18,12(sp)
    b748:	dc000115 	stw	r16,4(sp)
    b74c:	dfc00715 	stw	ra,28(sp)
    b750:	dd400615 	stw	r21,24(sp)
    b754:	dd000515 	stw	r20,20(sp)
    b758:	dc400215 	stw	r17,8(sp)
    b75c:	2027883a 	mov	r19,r4
    b760:	2825883a 	mov	r18,r5
    b764:	3021883a 	mov	r16,r6
    b768:	0007fcc0 	call	7fcc <__locale_mb_cur_max>
    b76c:	00c00044 	movi	r3,1
    b770:	10c03e26 	beq	r2,r3,b86c <__fputwc+0x130>
    b774:	81c01704 	addi	r7,r16,92
    b778:	900d883a 	mov	r6,r18
    b77c:	d80b883a 	mov	r5,sp
    b780:	9809883a 	mov	r4,r19
    b784:	000bc0c0 	call	bc0c <_wcrtomb_r>
    b788:	1029883a 	mov	r20,r2
    b78c:	00bfffc4 	movi	r2,-1
    b790:	a0802026 	beq	r20,r2,b814 <__fputwc+0xd8>
    b794:	d9400003 	ldbu	r5,0(sp)
    b798:	a0001c26 	beq	r20,zero,b80c <__fputwc+0xd0>
    b79c:	0023883a 	mov	r17,zero
    b7a0:	05400284 	movi	r21,10
    b7a4:	00000906 	br	b7cc <__fputwc+0x90>
    b7a8:	80800017 	ldw	r2,0(r16)
    b7ac:	11400005 	stb	r5,0(r2)
    b7b0:	80c00017 	ldw	r3,0(r16)
    b7b4:	18c00044 	addi	r3,r3,1
    b7b8:	80c00015 	stw	r3,0(r16)
    b7bc:	8c400044 	addi	r17,r17,1
    b7c0:	dc45883a 	add	r2,sp,r17
    b7c4:	8d00112e 	bgeu	r17,r20,b80c <__fputwc+0xd0>
    b7c8:	11400003 	ldbu	r5,0(r2)
    b7cc:	80c00217 	ldw	r3,8(r16)
    b7d0:	18ffffc4 	addi	r3,r3,-1
    b7d4:	80c00215 	stw	r3,8(r16)
    b7d8:	183ff30e 	bge	r3,zero,b7a8 <__alt_data_end+0xff00b7a8>
    b7dc:	80800617 	ldw	r2,24(r16)
    b7e0:	18801916 	blt	r3,r2,b848 <__fputwc+0x10c>
    b7e4:	80800017 	ldw	r2,0(r16)
    b7e8:	11400005 	stb	r5,0(r2)
    b7ec:	80800017 	ldw	r2,0(r16)
    b7f0:	10c00003 	ldbu	r3,0(r2)
    b7f4:	10800044 	addi	r2,r2,1
    b7f8:	1d402326 	beq	r3,r21,b888 <__fputwc+0x14c>
    b7fc:	80800015 	stw	r2,0(r16)
    b800:	8c400044 	addi	r17,r17,1
    b804:	dc45883a 	add	r2,sp,r17
    b808:	8d3fef36 	bltu	r17,r20,b7c8 <__alt_data_end+0xff00b7c8>
    b80c:	9005883a 	mov	r2,r18
    b810:	00000406 	br	b824 <__fputwc+0xe8>
    b814:	80c0030b 	ldhu	r3,12(r16)
    b818:	a005883a 	mov	r2,r20
    b81c:	18c01014 	ori	r3,r3,64
    b820:	80c0030d 	sth	r3,12(r16)
    b824:	dfc00717 	ldw	ra,28(sp)
    b828:	dd400617 	ldw	r21,24(sp)
    b82c:	dd000517 	ldw	r20,20(sp)
    b830:	dcc00417 	ldw	r19,16(sp)
    b834:	dc800317 	ldw	r18,12(sp)
    b838:	dc400217 	ldw	r17,8(sp)
    b83c:	dc000117 	ldw	r16,4(sp)
    b840:	dec00804 	addi	sp,sp,32
    b844:	f800283a 	ret
    b848:	800d883a 	mov	r6,r16
    b84c:	29403fcc 	andi	r5,r5,255
    b850:	9809883a 	mov	r4,r19
    b854:	000bab40 	call	bab4 <__swbuf_r>
    b858:	10bfffe0 	cmpeqi	r2,r2,-1
    b85c:	10803fcc 	andi	r2,r2,255
    b860:	103fd626 	beq	r2,zero,b7bc <__alt_data_end+0xff00b7bc>
    b864:	00bfffc4 	movi	r2,-1
    b868:	003fee06 	br	b824 <__alt_data_end+0xff00b824>
    b86c:	90ffffc4 	addi	r3,r18,-1
    b870:	01003f84 	movi	r4,254
    b874:	20ffbf36 	bltu	r4,r3,b774 <__alt_data_end+0xff00b774>
    b878:	900b883a 	mov	r5,r18
    b87c:	dc800005 	stb	r18,0(sp)
    b880:	1029883a 	mov	r20,r2
    b884:	003fc506 	br	b79c <__alt_data_end+0xff00b79c>
    b888:	800d883a 	mov	r6,r16
    b88c:	a80b883a 	mov	r5,r21
    b890:	9809883a 	mov	r4,r19
    b894:	000bab40 	call	bab4 <__swbuf_r>
    b898:	10bfffe0 	cmpeqi	r2,r2,-1
    b89c:	003fef06 	br	b85c <__alt_data_end+0xff00b85c>

0000b8a0 <_fputwc_r>:
    b8a0:	3080030b 	ldhu	r2,12(r6)
    b8a4:	10c8000c 	andi	r3,r2,8192
    b8a8:	1800051e 	bne	r3,zero,b8c0 <_fputwc_r+0x20>
    b8ac:	30c01917 	ldw	r3,100(r6)
    b8b0:	10880014 	ori	r2,r2,8192
    b8b4:	3080030d 	sth	r2,12(r6)
    b8b8:	18880014 	ori	r2,r3,8192
    b8bc:	30801915 	stw	r2,100(r6)
    b8c0:	000b73c1 	jmpi	b73c <__fputwc>

0000b8c4 <fputwc>:
    b8c4:	00800074 	movhi	r2,1
    b8c8:	defffc04 	addi	sp,sp,-16
    b8cc:	108cbd04 	addi	r2,r2,13044
    b8d0:	dc000115 	stw	r16,4(sp)
    b8d4:	14000017 	ldw	r16,0(r2)
    b8d8:	dc400215 	stw	r17,8(sp)
    b8dc:	dfc00315 	stw	ra,12(sp)
    b8e0:	2023883a 	mov	r17,r4
    b8e4:	80000226 	beq	r16,zero,b8f0 <fputwc+0x2c>
    b8e8:	80800e17 	ldw	r2,56(r16)
    b8ec:	10001026 	beq	r2,zero,b930 <fputwc+0x6c>
    b8f0:	2880030b 	ldhu	r2,12(r5)
    b8f4:	10c8000c 	andi	r3,r2,8192
    b8f8:	1800051e 	bne	r3,zero,b910 <fputwc+0x4c>
    b8fc:	28c01917 	ldw	r3,100(r5)
    b900:	10880014 	ori	r2,r2,8192
    b904:	2880030d 	sth	r2,12(r5)
    b908:	18880014 	ori	r2,r3,8192
    b90c:	28801915 	stw	r2,100(r5)
    b910:	280d883a 	mov	r6,r5
    b914:	8009883a 	mov	r4,r16
    b918:	880b883a 	mov	r5,r17
    b91c:	dfc00317 	ldw	ra,12(sp)
    b920:	dc400217 	ldw	r17,8(sp)
    b924:	dc000117 	ldw	r16,4(sp)
    b928:	dec00404 	addi	sp,sp,16
    b92c:	000b73c1 	jmpi	b73c <__fputwc>
    b930:	8009883a 	mov	r4,r16
    b934:	d9400015 	stw	r5,0(sp)
    b938:	000747c0 	call	747c <__sinit>
    b93c:	d9400017 	ldw	r5,0(sp)
    b940:	003feb06 	br	b8f0 <__alt_data_end+0xff00b8f0>

0000b944 <_fstat_r>:
    b944:	defffd04 	addi	sp,sp,-12
    b948:	2805883a 	mov	r2,r5
    b94c:	dc000015 	stw	r16,0(sp)
    b950:	04000074 	movhi	r16,1
    b954:	dc400115 	stw	r17,4(sp)
    b958:	8413da04 	addi	r16,r16,20328
    b95c:	2023883a 	mov	r17,r4
    b960:	300b883a 	mov	r5,r6
    b964:	1009883a 	mov	r4,r2
    b968:	dfc00215 	stw	ra,8(sp)
    b96c:	80000015 	stw	zero,0(r16)
    b970:	000e68c0 	call	e68c <fstat>
    b974:	00ffffc4 	movi	r3,-1
    b978:	10c00526 	beq	r2,r3,b990 <_fstat_r+0x4c>
    b97c:	dfc00217 	ldw	ra,8(sp)
    b980:	dc400117 	ldw	r17,4(sp)
    b984:	dc000017 	ldw	r16,0(sp)
    b988:	dec00304 	addi	sp,sp,12
    b98c:	f800283a 	ret
    b990:	80c00017 	ldw	r3,0(r16)
    b994:	183ff926 	beq	r3,zero,b97c <__alt_data_end+0xff00b97c>
    b998:	88c00015 	stw	r3,0(r17)
    b99c:	003ff706 	br	b97c <__alt_data_end+0xff00b97c>

0000b9a0 <_isatty_r>:
    b9a0:	defffd04 	addi	sp,sp,-12
    b9a4:	dc000015 	stw	r16,0(sp)
    b9a8:	04000074 	movhi	r16,1
    b9ac:	dc400115 	stw	r17,4(sp)
    b9b0:	8413da04 	addi	r16,r16,20328
    b9b4:	2023883a 	mov	r17,r4
    b9b8:	2809883a 	mov	r4,r5
    b9bc:	dfc00215 	stw	ra,8(sp)
    b9c0:	80000015 	stw	zero,0(r16)
    b9c4:	000e7780 	call	e778 <isatty>
    b9c8:	00ffffc4 	movi	r3,-1
    b9cc:	10c00526 	beq	r2,r3,b9e4 <_isatty_r+0x44>
    b9d0:	dfc00217 	ldw	ra,8(sp)
    b9d4:	dc400117 	ldw	r17,4(sp)
    b9d8:	dc000017 	ldw	r16,0(sp)
    b9dc:	dec00304 	addi	sp,sp,12
    b9e0:	f800283a 	ret
    b9e4:	80c00017 	ldw	r3,0(r16)
    b9e8:	183ff926 	beq	r3,zero,b9d0 <__alt_data_end+0xff00b9d0>
    b9ec:	88c00015 	stw	r3,0(r17)
    b9f0:	003ff706 	br	b9d0 <__alt_data_end+0xff00b9d0>

0000b9f4 <_lseek_r>:
    b9f4:	defffd04 	addi	sp,sp,-12
    b9f8:	2805883a 	mov	r2,r5
    b9fc:	dc000015 	stw	r16,0(sp)
    ba00:	04000074 	movhi	r16,1
    ba04:	dc400115 	stw	r17,4(sp)
    ba08:	300b883a 	mov	r5,r6
    ba0c:	8413da04 	addi	r16,r16,20328
    ba10:	2023883a 	mov	r17,r4
    ba14:	380d883a 	mov	r6,r7
    ba18:	1009883a 	mov	r4,r2
    ba1c:	dfc00215 	stw	ra,8(sp)
    ba20:	80000015 	stw	zero,0(r16)
    ba24:	000e9440 	call	e944 <lseek>
    ba28:	00ffffc4 	movi	r3,-1
    ba2c:	10c00526 	beq	r2,r3,ba44 <_lseek_r+0x50>
    ba30:	dfc00217 	ldw	ra,8(sp)
    ba34:	dc400117 	ldw	r17,4(sp)
    ba38:	dc000017 	ldw	r16,0(sp)
    ba3c:	dec00304 	addi	sp,sp,12
    ba40:	f800283a 	ret
    ba44:	80c00017 	ldw	r3,0(r16)
    ba48:	183ff926 	beq	r3,zero,ba30 <__alt_data_end+0xff00ba30>
    ba4c:	88c00015 	stw	r3,0(r17)
    ba50:	003ff706 	br	ba30 <__alt_data_end+0xff00ba30>

0000ba54 <_read_r>:
    ba54:	defffd04 	addi	sp,sp,-12
    ba58:	2805883a 	mov	r2,r5
    ba5c:	dc000015 	stw	r16,0(sp)
    ba60:	04000074 	movhi	r16,1
    ba64:	dc400115 	stw	r17,4(sp)
    ba68:	300b883a 	mov	r5,r6
    ba6c:	8413da04 	addi	r16,r16,20328
    ba70:	2023883a 	mov	r17,r4
    ba74:	380d883a 	mov	r6,r7
    ba78:	1009883a 	mov	r4,r2
    ba7c:	dfc00215 	stw	ra,8(sp)
    ba80:	80000015 	stw	zero,0(r16)
    ba84:	000eb180 	call	eb18 <read>
    ba88:	00ffffc4 	movi	r3,-1
    ba8c:	10c00526 	beq	r2,r3,baa4 <_read_r+0x50>
    ba90:	dfc00217 	ldw	ra,8(sp)
    ba94:	dc400117 	ldw	r17,4(sp)
    ba98:	dc000017 	ldw	r16,0(sp)
    ba9c:	dec00304 	addi	sp,sp,12
    baa0:	f800283a 	ret
    baa4:	80c00017 	ldw	r3,0(r16)
    baa8:	183ff926 	beq	r3,zero,ba90 <__alt_data_end+0xff00ba90>
    baac:	88c00015 	stw	r3,0(r17)
    bab0:	003ff706 	br	ba90 <__alt_data_end+0xff00ba90>

0000bab4 <__swbuf_r>:
    bab4:	defffb04 	addi	sp,sp,-20
    bab8:	dcc00315 	stw	r19,12(sp)
    babc:	dc800215 	stw	r18,8(sp)
    bac0:	dc000015 	stw	r16,0(sp)
    bac4:	dfc00415 	stw	ra,16(sp)
    bac8:	dc400115 	stw	r17,4(sp)
    bacc:	2025883a 	mov	r18,r4
    bad0:	2827883a 	mov	r19,r5
    bad4:	3021883a 	mov	r16,r6
    bad8:	20000226 	beq	r4,zero,bae4 <__swbuf_r+0x30>
    badc:	20800e17 	ldw	r2,56(r4)
    bae0:	10004226 	beq	r2,zero,bbec <__swbuf_r+0x138>
    bae4:	80800617 	ldw	r2,24(r16)
    bae8:	8100030b 	ldhu	r4,12(r16)
    baec:	80800215 	stw	r2,8(r16)
    baf0:	2080020c 	andi	r2,r4,8
    baf4:	10003626 	beq	r2,zero,bbd0 <__swbuf_r+0x11c>
    baf8:	80c00417 	ldw	r3,16(r16)
    bafc:	18003426 	beq	r3,zero,bbd0 <__swbuf_r+0x11c>
    bb00:	2088000c 	andi	r2,r4,8192
    bb04:	9c403fcc 	andi	r17,r19,255
    bb08:	10001a26 	beq	r2,zero,bb74 <__swbuf_r+0xc0>
    bb0c:	80800017 	ldw	r2,0(r16)
    bb10:	81000517 	ldw	r4,20(r16)
    bb14:	10c7c83a 	sub	r3,r2,r3
    bb18:	1900200e 	bge	r3,r4,bb9c <__swbuf_r+0xe8>
    bb1c:	18c00044 	addi	r3,r3,1
    bb20:	81000217 	ldw	r4,8(r16)
    bb24:	11400044 	addi	r5,r2,1
    bb28:	81400015 	stw	r5,0(r16)
    bb2c:	213fffc4 	addi	r4,r4,-1
    bb30:	81000215 	stw	r4,8(r16)
    bb34:	14c00005 	stb	r19,0(r2)
    bb38:	80800517 	ldw	r2,20(r16)
    bb3c:	10c01e26 	beq	r2,r3,bbb8 <__swbuf_r+0x104>
    bb40:	8080030b 	ldhu	r2,12(r16)
    bb44:	1080004c 	andi	r2,r2,1
    bb48:	10000226 	beq	r2,zero,bb54 <__swbuf_r+0xa0>
    bb4c:	00800284 	movi	r2,10
    bb50:	88801926 	beq	r17,r2,bbb8 <__swbuf_r+0x104>
    bb54:	8805883a 	mov	r2,r17
    bb58:	dfc00417 	ldw	ra,16(sp)
    bb5c:	dcc00317 	ldw	r19,12(sp)
    bb60:	dc800217 	ldw	r18,8(sp)
    bb64:	dc400117 	ldw	r17,4(sp)
    bb68:	dc000017 	ldw	r16,0(sp)
    bb6c:	dec00504 	addi	sp,sp,20
    bb70:	f800283a 	ret
    bb74:	81401917 	ldw	r5,100(r16)
    bb78:	00b7ffc4 	movi	r2,-8193
    bb7c:	21080014 	ori	r4,r4,8192
    bb80:	2884703a 	and	r2,r5,r2
    bb84:	80801915 	stw	r2,100(r16)
    bb88:	80800017 	ldw	r2,0(r16)
    bb8c:	8100030d 	sth	r4,12(r16)
    bb90:	81000517 	ldw	r4,20(r16)
    bb94:	10c7c83a 	sub	r3,r2,r3
    bb98:	193fe016 	blt	r3,r4,bb1c <__alt_data_end+0xff00bb1c>
    bb9c:	800b883a 	mov	r5,r16
    bba0:	9009883a 	mov	r4,r18
    bba4:	00070a00 	call	70a0 <_fflush_r>
    bba8:	1000071e 	bne	r2,zero,bbc8 <__swbuf_r+0x114>
    bbac:	80800017 	ldw	r2,0(r16)
    bbb0:	00c00044 	movi	r3,1
    bbb4:	003fda06 	br	bb20 <__alt_data_end+0xff00bb20>
    bbb8:	800b883a 	mov	r5,r16
    bbbc:	9009883a 	mov	r4,r18
    bbc0:	00070a00 	call	70a0 <_fflush_r>
    bbc4:	103fe326 	beq	r2,zero,bb54 <__alt_data_end+0xff00bb54>
    bbc8:	00bfffc4 	movi	r2,-1
    bbcc:	003fe206 	br	bb58 <__alt_data_end+0xff00bb58>
    bbd0:	800b883a 	mov	r5,r16
    bbd4:	9009883a 	mov	r4,r18
    bbd8:	00054a80 	call	54a8 <__swsetup_r>
    bbdc:	103ffa1e 	bne	r2,zero,bbc8 <__alt_data_end+0xff00bbc8>
    bbe0:	8100030b 	ldhu	r4,12(r16)
    bbe4:	80c00417 	ldw	r3,16(r16)
    bbe8:	003fc506 	br	bb00 <__alt_data_end+0xff00bb00>
    bbec:	000747c0 	call	747c <__sinit>
    bbf0:	003fbc06 	br	bae4 <__alt_data_end+0xff00bae4>

0000bbf4 <__swbuf>:
    bbf4:	00800074 	movhi	r2,1
    bbf8:	108cbd04 	addi	r2,r2,13044
    bbfc:	280d883a 	mov	r6,r5
    bc00:	200b883a 	mov	r5,r4
    bc04:	11000017 	ldw	r4,0(r2)
    bc08:	000bab41 	jmpi	bab4 <__swbuf_r>

0000bc0c <_wcrtomb_r>:
    bc0c:	defff604 	addi	sp,sp,-40
    bc10:	00800074 	movhi	r2,1
    bc14:	dc800815 	stw	r18,32(sp)
    bc18:	dc400715 	stw	r17,28(sp)
    bc1c:	dc000615 	stw	r16,24(sp)
    bc20:	108cbf04 	addi	r2,r2,13052
    bc24:	dfc00915 	stw	ra,36(sp)
    bc28:	2021883a 	mov	r16,r4
    bc2c:	3823883a 	mov	r17,r7
    bc30:	14800017 	ldw	r18,0(r2)
    bc34:	28001426 	beq	r5,zero,bc88 <_wcrtomb_r+0x7c>
    bc38:	d9400415 	stw	r5,16(sp)
    bc3c:	d9800515 	stw	r6,20(sp)
    bc40:	0007fc00 	call	7fc0 <__locale_charset>
    bc44:	d9800517 	ldw	r6,20(sp)
    bc48:	d9400417 	ldw	r5,16(sp)
    bc4c:	100f883a 	mov	r7,r2
    bc50:	dc400015 	stw	r17,0(sp)
    bc54:	8009883a 	mov	r4,r16
    bc58:	903ee83a 	callr	r18
    bc5c:	00ffffc4 	movi	r3,-1
    bc60:	10c0031e 	bne	r2,r3,bc70 <_wcrtomb_r+0x64>
    bc64:	88000015 	stw	zero,0(r17)
    bc68:	00c02284 	movi	r3,138
    bc6c:	80c00015 	stw	r3,0(r16)
    bc70:	dfc00917 	ldw	ra,36(sp)
    bc74:	dc800817 	ldw	r18,32(sp)
    bc78:	dc400717 	ldw	r17,28(sp)
    bc7c:	dc000617 	ldw	r16,24(sp)
    bc80:	dec00a04 	addi	sp,sp,40
    bc84:	f800283a 	ret
    bc88:	0007fc00 	call	7fc0 <__locale_charset>
    bc8c:	100f883a 	mov	r7,r2
    bc90:	dc400015 	stw	r17,0(sp)
    bc94:	000d883a 	mov	r6,zero
    bc98:	d9400104 	addi	r5,sp,4
    bc9c:	8009883a 	mov	r4,r16
    bca0:	903ee83a 	callr	r18
    bca4:	003fed06 	br	bc5c <__alt_data_end+0xff00bc5c>

0000bca8 <wcrtomb>:
    bca8:	defff604 	addi	sp,sp,-40
    bcac:	00800074 	movhi	r2,1
    bcb0:	dc800615 	stw	r18,24(sp)
    bcb4:	dc400515 	stw	r17,20(sp)
    bcb8:	108cbd04 	addi	r2,r2,13044
    bcbc:	dfc00915 	stw	ra,36(sp)
    bcc0:	dd000815 	stw	r20,32(sp)
    bcc4:	dcc00715 	stw	r19,28(sp)
    bcc8:	dc000415 	stw	r16,16(sp)
    bccc:	3025883a 	mov	r18,r6
    bcd0:	14400017 	ldw	r17,0(r2)
    bcd4:	20001926 	beq	r4,zero,bd3c <wcrtomb+0x94>
    bcd8:	00800074 	movhi	r2,1
    bcdc:	108cbf04 	addi	r2,r2,13052
    bce0:	15000017 	ldw	r20,0(r2)
    bce4:	2021883a 	mov	r16,r4
    bce8:	2827883a 	mov	r19,r5
    bcec:	0007fc00 	call	7fc0 <__locale_charset>
    bcf0:	100f883a 	mov	r7,r2
    bcf4:	dc800015 	stw	r18,0(sp)
    bcf8:	980d883a 	mov	r6,r19
    bcfc:	800b883a 	mov	r5,r16
    bd00:	8809883a 	mov	r4,r17
    bd04:	a03ee83a 	callr	r20
    bd08:	00ffffc4 	movi	r3,-1
    bd0c:	10c0031e 	bne	r2,r3,bd1c <wcrtomb+0x74>
    bd10:	90000015 	stw	zero,0(r18)
    bd14:	00c02284 	movi	r3,138
    bd18:	88c00015 	stw	r3,0(r17)
    bd1c:	dfc00917 	ldw	ra,36(sp)
    bd20:	dd000817 	ldw	r20,32(sp)
    bd24:	dcc00717 	ldw	r19,28(sp)
    bd28:	dc800617 	ldw	r18,24(sp)
    bd2c:	dc400517 	ldw	r17,20(sp)
    bd30:	dc000417 	ldw	r16,16(sp)
    bd34:	dec00a04 	addi	sp,sp,40
    bd38:	f800283a 	ret
    bd3c:	00800074 	movhi	r2,1
    bd40:	108cbf04 	addi	r2,r2,13052
    bd44:	14000017 	ldw	r16,0(r2)
    bd48:	0007fc00 	call	7fc0 <__locale_charset>
    bd4c:	100f883a 	mov	r7,r2
    bd50:	dc800015 	stw	r18,0(sp)
    bd54:	000d883a 	mov	r6,zero
    bd58:	d9400104 	addi	r5,sp,4
    bd5c:	8809883a 	mov	r4,r17
    bd60:	803ee83a 	callr	r16
    bd64:	003fe806 	br	bd08 <__alt_data_end+0xff00bd08>

0000bd68 <__ascii_wctomb>:
    bd68:	28000526 	beq	r5,zero,bd80 <__ascii_wctomb+0x18>
    bd6c:	00803fc4 	movi	r2,255
    bd70:	11800536 	bltu	r2,r6,bd88 <__ascii_wctomb+0x20>
    bd74:	29800005 	stb	r6,0(r5)
    bd78:	00800044 	movi	r2,1
    bd7c:	f800283a 	ret
    bd80:	0005883a 	mov	r2,zero
    bd84:	f800283a 	ret
    bd88:	00802284 	movi	r2,138
    bd8c:	20800015 	stw	r2,0(r4)
    bd90:	00bfffc4 	movi	r2,-1
    bd94:	f800283a 	ret

0000bd98 <_wctomb_r>:
    bd98:	00800074 	movhi	r2,1
    bd9c:	defff904 	addi	sp,sp,-28
    bda0:	108cbf04 	addi	r2,r2,13052
    bda4:	dfc00615 	stw	ra,24(sp)
    bda8:	dc400515 	stw	r17,20(sp)
    bdac:	dc000415 	stw	r16,16(sp)
    bdb0:	3823883a 	mov	r17,r7
    bdb4:	14000017 	ldw	r16,0(r2)
    bdb8:	d9000115 	stw	r4,4(sp)
    bdbc:	d9400215 	stw	r5,8(sp)
    bdc0:	d9800315 	stw	r6,12(sp)
    bdc4:	0007fc00 	call	7fc0 <__locale_charset>
    bdc8:	d9800317 	ldw	r6,12(sp)
    bdcc:	d9400217 	ldw	r5,8(sp)
    bdd0:	d9000117 	ldw	r4,4(sp)
    bdd4:	100f883a 	mov	r7,r2
    bdd8:	dc400015 	stw	r17,0(sp)
    bddc:	803ee83a 	callr	r16
    bde0:	dfc00617 	ldw	ra,24(sp)
    bde4:	dc400517 	ldw	r17,20(sp)
    bde8:	dc000417 	ldw	r16,16(sp)
    bdec:	dec00704 	addi	sp,sp,28
    bdf0:	f800283a 	ret

0000bdf4 <__udivdi3>:
    bdf4:	defff504 	addi	sp,sp,-44
    bdf8:	dcc00415 	stw	r19,16(sp)
    bdfc:	dc000115 	stw	r16,4(sp)
    be00:	dfc00a15 	stw	ra,40(sp)
    be04:	df000915 	stw	fp,36(sp)
    be08:	ddc00815 	stw	r23,32(sp)
    be0c:	dd800715 	stw	r22,28(sp)
    be10:	dd400615 	stw	r21,24(sp)
    be14:	dd000515 	stw	r20,20(sp)
    be18:	dc800315 	stw	r18,12(sp)
    be1c:	dc400215 	stw	r17,8(sp)
    be20:	2027883a 	mov	r19,r4
    be24:	2821883a 	mov	r16,r5
    be28:	3800411e 	bne	r7,zero,bf30 <__udivdi3+0x13c>
    be2c:	3023883a 	mov	r17,r6
    be30:	2025883a 	mov	r18,r4
    be34:	2980522e 	bgeu	r5,r6,bf80 <__udivdi3+0x18c>
    be38:	00bfffd4 	movui	r2,65535
    be3c:	282d883a 	mov	r22,r5
    be40:	1180a836 	bltu	r2,r6,c0e4 <__udivdi3+0x2f0>
    be44:	00803fc4 	movi	r2,255
    be48:	1185803a 	cmpltu	r2,r2,r6
    be4c:	100490fa 	slli	r2,r2,3
    be50:	3086d83a 	srl	r3,r6,r2
    be54:	01000074 	movhi	r4,1
    be58:	21051184 	addi	r4,r4,5190
    be5c:	20c7883a 	add	r3,r4,r3
    be60:	18c00003 	ldbu	r3,0(r3)
    be64:	1885883a 	add	r2,r3,r2
    be68:	00c00804 	movi	r3,32
    be6c:	1887c83a 	sub	r3,r3,r2
    be70:	18000526 	beq	r3,zero,be88 <__udivdi3+0x94>
    be74:	80e0983a 	sll	r16,r16,r3
    be78:	9884d83a 	srl	r2,r19,r2
    be7c:	30e2983a 	sll	r17,r6,r3
    be80:	98e4983a 	sll	r18,r19,r3
    be84:	142cb03a 	or	r22,r2,r16
    be88:	882ad43a 	srli	r21,r17,16
    be8c:	b009883a 	mov	r4,r22
    be90:	8d3fffcc 	andi	r20,r17,65535
    be94:	a80b883a 	mov	r5,r21
    be98:	0001d2c0 	call	1d2c <__umodsi3>
    be9c:	b009883a 	mov	r4,r22
    bea0:	a80b883a 	mov	r5,r21
    bea4:	1027883a 	mov	r19,r2
    bea8:	0001cc80 	call	1cc8 <__udivsi3>
    beac:	102d883a 	mov	r22,r2
    beb0:	9826943a 	slli	r19,r19,16
    beb4:	9004d43a 	srli	r2,r18,16
    beb8:	a5a1383a 	mul	r16,r20,r22
    bebc:	14c4b03a 	or	r2,r2,r19
    bec0:	1400052e 	bgeu	r2,r16,bed8 <__udivdi3+0xe4>
    bec4:	1445883a 	add	r2,r2,r17
    bec8:	b0ffffc4 	addi	r3,r22,-1
    becc:	14400136 	bltu	r2,r17,bed4 <__udivdi3+0xe0>
    bed0:	14012336 	bltu	r2,r16,c360 <__udivdi3+0x56c>
    bed4:	182d883a 	mov	r22,r3
    bed8:	1421c83a 	sub	r16,r2,r16
    bedc:	a80b883a 	mov	r5,r21
    bee0:	8009883a 	mov	r4,r16
    bee4:	0001d2c0 	call	1d2c <__umodsi3>
    bee8:	1027883a 	mov	r19,r2
    beec:	a80b883a 	mov	r5,r21
    bef0:	8009883a 	mov	r4,r16
    bef4:	0001cc80 	call	1cc8 <__udivsi3>
    bef8:	9826943a 	slli	r19,r19,16
    befc:	a0a9383a 	mul	r20,r20,r2
    bf00:	94bfffcc 	andi	r18,r18,65535
    bf04:	94e4b03a 	or	r18,r18,r19
    bf08:	9500052e 	bgeu	r18,r20,bf20 <__udivdi3+0x12c>
    bf0c:	8ca5883a 	add	r18,r17,r18
    bf10:	10ffffc4 	addi	r3,r2,-1
    bf14:	9440f136 	bltu	r18,r17,c2dc <__udivdi3+0x4e8>
    bf18:	9500f02e 	bgeu	r18,r20,c2dc <__udivdi3+0x4e8>
    bf1c:	10bfff84 	addi	r2,r2,-2
    bf20:	b00c943a 	slli	r6,r22,16
    bf24:	0007883a 	mov	r3,zero
    bf28:	3084b03a 	or	r2,r6,r2
    bf2c:	00005906 	br	c094 <__udivdi3+0x2a0>
    bf30:	29c05636 	bltu	r5,r7,c08c <__udivdi3+0x298>
    bf34:	00bfffd4 	movui	r2,65535
    bf38:	11c0622e 	bgeu	r2,r7,c0c4 <__udivdi3+0x2d0>
    bf3c:	00804034 	movhi	r2,256
    bf40:	10bfffc4 	addi	r2,r2,-1
    bf44:	11c0ee36 	bltu	r2,r7,c300 <__udivdi3+0x50c>
    bf48:	00800404 	movi	r2,16
    bf4c:	3886d83a 	srl	r3,r7,r2
    bf50:	01000074 	movhi	r4,1
    bf54:	21051184 	addi	r4,r4,5190
    bf58:	20c7883a 	add	r3,r4,r3
    bf5c:	18c00003 	ldbu	r3,0(r3)
    bf60:	05400804 	movi	r21,32
    bf64:	1885883a 	add	r2,r3,r2
    bf68:	a8abc83a 	sub	r21,r21,r2
    bf6c:	a800621e 	bne	r21,zero,c0f8 <__udivdi3+0x304>
    bf70:	3c00e936 	bltu	r7,r16,c318 <__udivdi3+0x524>
    bf74:	9985403a 	cmpgeu	r2,r19,r6
    bf78:	0007883a 	mov	r3,zero
    bf7c:	00004506 	br	c094 <__udivdi3+0x2a0>
    bf80:	3000041e 	bne	r6,zero,bf94 <__udivdi3+0x1a0>
    bf84:	000b883a 	mov	r5,zero
    bf88:	01000044 	movi	r4,1
    bf8c:	0001cc80 	call	1cc8 <__udivsi3>
    bf90:	1023883a 	mov	r17,r2
    bf94:	00bfffd4 	movui	r2,65535
    bf98:	14404e2e 	bgeu	r2,r17,c0d4 <__udivdi3+0x2e0>
    bf9c:	00804034 	movhi	r2,256
    bfa0:	10bfffc4 	addi	r2,r2,-1
    bfa4:	1440d836 	bltu	r2,r17,c308 <__udivdi3+0x514>
    bfa8:	00800404 	movi	r2,16
    bfac:	8886d83a 	srl	r3,r17,r2
    bfb0:	01000074 	movhi	r4,1
    bfb4:	21051184 	addi	r4,r4,5190
    bfb8:	20c7883a 	add	r3,r4,r3
    bfbc:	18c00003 	ldbu	r3,0(r3)
    bfc0:	1885883a 	add	r2,r3,r2
    bfc4:	00c00804 	movi	r3,32
    bfc8:	1887c83a 	sub	r3,r3,r2
    bfcc:	18008f1e 	bne	r3,zero,c20c <__udivdi3+0x418>
    bfd0:	882ad43a 	srli	r21,r17,16
    bfd4:	8461c83a 	sub	r16,r16,r17
    bfd8:	8d3fffcc 	andi	r20,r17,65535
    bfdc:	00c00044 	movi	r3,1
    bfe0:	8009883a 	mov	r4,r16
    bfe4:	a80b883a 	mov	r5,r21
    bfe8:	d8c00015 	stw	r3,0(sp)
    bfec:	0001d2c0 	call	1d2c <__umodsi3>
    bff0:	8009883a 	mov	r4,r16
    bff4:	a80b883a 	mov	r5,r21
    bff8:	1027883a 	mov	r19,r2
    bffc:	0001cc80 	call	1cc8 <__udivsi3>
    c000:	9826943a 	slli	r19,r19,16
    c004:	9008d43a 	srli	r4,r18,16
    c008:	1521383a 	mul	r16,r2,r20
    c00c:	102d883a 	mov	r22,r2
    c010:	24c8b03a 	or	r4,r4,r19
    c014:	d8c00017 	ldw	r3,0(sp)
    c018:	2400052e 	bgeu	r4,r16,c030 <__udivdi3+0x23c>
    c01c:	2449883a 	add	r4,r4,r17
    c020:	b0bfffc4 	addi	r2,r22,-1
    c024:	24400136 	bltu	r4,r17,c02c <__udivdi3+0x238>
    c028:	2400ca36 	bltu	r4,r16,c354 <__udivdi3+0x560>
    c02c:	102d883a 	mov	r22,r2
    c030:	2421c83a 	sub	r16,r4,r16
    c034:	a80b883a 	mov	r5,r21
    c038:	8009883a 	mov	r4,r16
    c03c:	d8c00015 	stw	r3,0(sp)
    c040:	0001d2c0 	call	1d2c <__umodsi3>
    c044:	1027883a 	mov	r19,r2
    c048:	a80b883a 	mov	r5,r21
    c04c:	8009883a 	mov	r4,r16
    c050:	0001cc80 	call	1cc8 <__udivsi3>
    c054:	9826943a 	slli	r19,r19,16
    c058:	1529383a 	mul	r20,r2,r20
    c05c:	94bfffcc 	andi	r18,r18,65535
    c060:	94e4b03a 	or	r18,r18,r19
    c064:	d8c00017 	ldw	r3,0(sp)
    c068:	9500052e 	bgeu	r18,r20,c080 <__udivdi3+0x28c>
    c06c:	8ca5883a 	add	r18,r17,r18
    c070:	113fffc4 	addi	r4,r2,-1
    c074:	94409736 	bltu	r18,r17,c2d4 <__udivdi3+0x4e0>
    c078:	9500962e 	bgeu	r18,r20,c2d4 <__udivdi3+0x4e0>
    c07c:	10bfff84 	addi	r2,r2,-2
    c080:	b00c943a 	slli	r6,r22,16
    c084:	3084b03a 	or	r2,r6,r2
    c088:	00000206 	br	c094 <__udivdi3+0x2a0>
    c08c:	0007883a 	mov	r3,zero
    c090:	0005883a 	mov	r2,zero
    c094:	dfc00a17 	ldw	ra,40(sp)
    c098:	df000917 	ldw	fp,36(sp)
    c09c:	ddc00817 	ldw	r23,32(sp)
    c0a0:	dd800717 	ldw	r22,28(sp)
    c0a4:	dd400617 	ldw	r21,24(sp)
    c0a8:	dd000517 	ldw	r20,20(sp)
    c0ac:	dcc00417 	ldw	r19,16(sp)
    c0b0:	dc800317 	ldw	r18,12(sp)
    c0b4:	dc400217 	ldw	r17,8(sp)
    c0b8:	dc000117 	ldw	r16,4(sp)
    c0bc:	dec00b04 	addi	sp,sp,44
    c0c0:	f800283a 	ret
    c0c4:	00803fc4 	movi	r2,255
    c0c8:	11c5803a 	cmpltu	r2,r2,r7
    c0cc:	100490fa 	slli	r2,r2,3
    c0d0:	003f9e06 	br	bf4c <__alt_data_end+0xff00bf4c>
    c0d4:	00803fc4 	movi	r2,255
    c0d8:	1445803a 	cmpltu	r2,r2,r17
    c0dc:	100490fa 	slli	r2,r2,3
    c0e0:	003fb206 	br	bfac <__alt_data_end+0xff00bfac>
    c0e4:	00804034 	movhi	r2,256
    c0e8:	10bfffc4 	addi	r2,r2,-1
    c0ec:	11808836 	bltu	r2,r6,c310 <__udivdi3+0x51c>
    c0f0:	00800404 	movi	r2,16
    c0f4:	003f5606 	br	be50 <__alt_data_end+0xff00be50>
    c0f8:	30aed83a 	srl	r23,r6,r2
    c0fc:	3d4e983a 	sll	r7,r7,r21
    c100:	80acd83a 	srl	r22,r16,r2
    c104:	9884d83a 	srl	r2,r19,r2
    c108:	3deeb03a 	or	r23,r7,r23
    c10c:	b824d43a 	srli	r18,r23,16
    c110:	8560983a 	sll	r16,r16,r21
    c114:	b009883a 	mov	r4,r22
    c118:	900b883a 	mov	r5,r18
    c11c:	3568983a 	sll	r20,r6,r21
    c120:	1420b03a 	or	r16,r2,r16
    c124:	0001d2c0 	call	1d2c <__umodsi3>
    c128:	b009883a 	mov	r4,r22
    c12c:	900b883a 	mov	r5,r18
    c130:	1023883a 	mov	r17,r2
    c134:	0001cc80 	call	1cc8 <__udivsi3>
    c138:	8808943a 	slli	r4,r17,16
    c13c:	bf3fffcc 	andi	fp,r23,65535
    c140:	8006d43a 	srli	r3,r16,16
    c144:	e0a3383a 	mul	r17,fp,r2
    c148:	100d883a 	mov	r6,r2
    c14c:	1906b03a 	or	r3,r3,r4
    c150:	1c40042e 	bgeu	r3,r17,c164 <__udivdi3+0x370>
    c154:	1dc7883a 	add	r3,r3,r23
    c158:	10bfffc4 	addi	r2,r2,-1
    c15c:	1dc0752e 	bgeu	r3,r23,c334 <__udivdi3+0x540>
    c160:	100d883a 	mov	r6,r2
    c164:	1c63c83a 	sub	r17,r3,r17
    c168:	900b883a 	mov	r5,r18
    c16c:	8809883a 	mov	r4,r17
    c170:	d9800015 	stw	r6,0(sp)
    c174:	0001d2c0 	call	1d2c <__umodsi3>
    c178:	102d883a 	mov	r22,r2
    c17c:	8809883a 	mov	r4,r17
    c180:	900b883a 	mov	r5,r18
    c184:	0001cc80 	call	1cc8 <__udivsi3>
    c188:	b02c943a 	slli	r22,r22,16
    c18c:	e089383a 	mul	r4,fp,r2
    c190:	843fffcc 	andi	r16,r16,65535
    c194:	85a0b03a 	or	r16,r16,r22
    c198:	d9800017 	ldw	r6,0(sp)
    c19c:	8100042e 	bgeu	r16,r4,c1b0 <__udivdi3+0x3bc>
    c1a0:	85e1883a 	add	r16,r16,r23
    c1a4:	10ffffc4 	addi	r3,r2,-1
    c1a8:	85c05e2e 	bgeu	r16,r23,c324 <__udivdi3+0x530>
    c1ac:	1805883a 	mov	r2,r3
    c1b0:	300c943a 	slli	r6,r6,16
    c1b4:	a17fffcc 	andi	r5,r20,65535
    c1b8:	a028d43a 	srli	r20,r20,16
    c1bc:	3084b03a 	or	r2,r6,r2
    c1c0:	10ffffcc 	andi	r3,r2,65535
    c1c4:	100cd43a 	srli	r6,r2,16
    c1c8:	194f383a 	mul	r7,r3,r5
    c1cc:	1d07383a 	mul	r3,r3,r20
    c1d0:	314b383a 	mul	r5,r6,r5
    c1d4:	3810d43a 	srli	r8,r7,16
    c1d8:	8121c83a 	sub	r16,r16,r4
    c1dc:	1947883a 	add	r3,r3,r5
    c1e0:	40c7883a 	add	r3,r8,r3
    c1e4:	350d383a 	mul	r6,r6,r20
    c1e8:	1940022e 	bgeu	r3,r5,c1f4 <__udivdi3+0x400>
    c1ec:	01000074 	movhi	r4,1
    c1f0:	310d883a 	add	r6,r6,r4
    c1f4:	1828d43a 	srli	r20,r3,16
    c1f8:	a18d883a 	add	r6,r20,r6
    c1fc:	81803e36 	bltu	r16,r6,c2f8 <__udivdi3+0x504>
    c200:	81803826 	beq	r16,r6,c2e4 <__udivdi3+0x4f0>
    c204:	0007883a 	mov	r3,zero
    c208:	003fa206 	br	c094 <__alt_data_end+0xff00c094>
    c20c:	88e2983a 	sll	r17,r17,r3
    c210:	80a8d83a 	srl	r20,r16,r2
    c214:	80e0983a 	sll	r16,r16,r3
    c218:	882ad43a 	srli	r21,r17,16
    c21c:	9884d83a 	srl	r2,r19,r2
    c220:	a009883a 	mov	r4,r20
    c224:	a80b883a 	mov	r5,r21
    c228:	142eb03a 	or	r23,r2,r16
    c22c:	98e4983a 	sll	r18,r19,r3
    c230:	0001d2c0 	call	1d2c <__umodsi3>
    c234:	a009883a 	mov	r4,r20
    c238:	a80b883a 	mov	r5,r21
    c23c:	1021883a 	mov	r16,r2
    c240:	0001cc80 	call	1cc8 <__udivsi3>
    c244:	1039883a 	mov	fp,r2
    c248:	8d3fffcc 	andi	r20,r17,65535
    c24c:	8020943a 	slli	r16,r16,16
    c250:	b804d43a 	srli	r2,r23,16
    c254:	a72d383a 	mul	r22,r20,fp
    c258:	1404b03a 	or	r2,r2,r16
    c25c:	1580062e 	bgeu	r2,r22,c278 <__udivdi3+0x484>
    c260:	1445883a 	add	r2,r2,r17
    c264:	e0ffffc4 	addi	r3,fp,-1
    c268:	14403836 	bltu	r2,r17,c34c <__udivdi3+0x558>
    c26c:	1580372e 	bgeu	r2,r22,c34c <__udivdi3+0x558>
    c270:	e73fff84 	addi	fp,fp,-2
    c274:	1445883a 	add	r2,r2,r17
    c278:	15adc83a 	sub	r22,r2,r22
    c27c:	a80b883a 	mov	r5,r21
    c280:	b009883a 	mov	r4,r22
    c284:	0001d2c0 	call	1d2c <__umodsi3>
    c288:	1027883a 	mov	r19,r2
    c28c:	b009883a 	mov	r4,r22
    c290:	a80b883a 	mov	r5,r21
    c294:	0001cc80 	call	1cc8 <__udivsi3>
    c298:	9826943a 	slli	r19,r19,16
    c29c:	a0a1383a 	mul	r16,r20,r2
    c2a0:	b93fffcc 	andi	r4,r23,65535
    c2a4:	24c8b03a 	or	r4,r4,r19
    c2a8:	2400062e 	bgeu	r4,r16,c2c4 <__udivdi3+0x4d0>
    c2ac:	2449883a 	add	r4,r4,r17
    c2b0:	10ffffc4 	addi	r3,r2,-1
    c2b4:	24402336 	bltu	r4,r17,c344 <__udivdi3+0x550>
    c2b8:	2400222e 	bgeu	r4,r16,c344 <__udivdi3+0x550>
    c2bc:	10bfff84 	addi	r2,r2,-2
    c2c0:	2449883a 	add	r4,r4,r17
    c2c4:	e038943a 	slli	fp,fp,16
    c2c8:	2421c83a 	sub	r16,r4,r16
    c2cc:	e086b03a 	or	r3,fp,r2
    c2d0:	003f4306 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c2d4:	2005883a 	mov	r2,r4
    c2d8:	003f6906 	br	c080 <__alt_data_end+0xff00c080>
    c2dc:	1805883a 	mov	r2,r3
    c2e0:	003f0f06 	br	bf20 <__alt_data_end+0xff00bf20>
    c2e4:	1806943a 	slli	r3,r3,16
    c2e8:	9d66983a 	sll	r19,r19,r21
    c2ec:	39ffffcc 	andi	r7,r7,65535
    c2f0:	19c7883a 	add	r3,r3,r7
    c2f4:	98ffc32e 	bgeu	r19,r3,c204 <__alt_data_end+0xff00c204>
    c2f8:	10bfffc4 	addi	r2,r2,-1
    c2fc:	003fc106 	br	c204 <__alt_data_end+0xff00c204>
    c300:	00800604 	movi	r2,24
    c304:	003f1106 	br	bf4c <__alt_data_end+0xff00bf4c>
    c308:	00800604 	movi	r2,24
    c30c:	003f2706 	br	bfac <__alt_data_end+0xff00bfac>
    c310:	00800604 	movi	r2,24
    c314:	003ece06 	br	be50 <__alt_data_end+0xff00be50>
    c318:	0007883a 	mov	r3,zero
    c31c:	00800044 	movi	r2,1
    c320:	003f5c06 	br	c094 <__alt_data_end+0xff00c094>
    c324:	813fa12e 	bgeu	r16,r4,c1ac <__alt_data_end+0xff00c1ac>
    c328:	10bfff84 	addi	r2,r2,-2
    c32c:	85e1883a 	add	r16,r16,r23
    c330:	003f9f06 	br	c1b0 <__alt_data_end+0xff00c1b0>
    c334:	1c7f8a2e 	bgeu	r3,r17,c160 <__alt_data_end+0xff00c160>
    c338:	31bfff84 	addi	r6,r6,-2
    c33c:	1dc7883a 	add	r3,r3,r23
    c340:	003f8806 	br	c164 <__alt_data_end+0xff00c164>
    c344:	1805883a 	mov	r2,r3
    c348:	003fde06 	br	c2c4 <__alt_data_end+0xff00c2c4>
    c34c:	1839883a 	mov	fp,r3
    c350:	003fc906 	br	c278 <__alt_data_end+0xff00c278>
    c354:	b5bfff84 	addi	r22,r22,-2
    c358:	2449883a 	add	r4,r4,r17
    c35c:	003f3406 	br	c030 <__alt_data_end+0xff00c030>
    c360:	b5bfff84 	addi	r22,r22,-2
    c364:	1445883a 	add	r2,r2,r17
    c368:	003edb06 	br	bed8 <__alt_data_end+0xff00bed8>

0000c36c <__umoddi3>:
    c36c:	defff404 	addi	sp,sp,-48
    c370:	df000a15 	stw	fp,40(sp)
    c374:	dc400315 	stw	r17,12(sp)
    c378:	dc000215 	stw	r16,8(sp)
    c37c:	dfc00b15 	stw	ra,44(sp)
    c380:	ddc00915 	stw	r23,36(sp)
    c384:	dd800815 	stw	r22,32(sp)
    c388:	dd400715 	stw	r21,28(sp)
    c38c:	dd000615 	stw	r20,24(sp)
    c390:	dcc00515 	stw	r19,20(sp)
    c394:	dc800415 	stw	r18,16(sp)
    c398:	2021883a 	mov	r16,r4
    c39c:	2823883a 	mov	r17,r5
    c3a0:	2839883a 	mov	fp,r5
    c3a4:	38003c1e 	bne	r7,zero,c498 <__umoddi3+0x12c>
    c3a8:	3027883a 	mov	r19,r6
    c3ac:	2029883a 	mov	r20,r4
    c3b0:	2980512e 	bgeu	r5,r6,c4f8 <__umoddi3+0x18c>
    c3b4:	00bfffd4 	movui	r2,65535
    c3b8:	11809a36 	bltu	r2,r6,c624 <__umoddi3+0x2b8>
    c3bc:	01003fc4 	movi	r4,255
    c3c0:	2189803a 	cmpltu	r4,r4,r6
    c3c4:	200890fa 	slli	r4,r4,3
    c3c8:	3104d83a 	srl	r2,r6,r4
    c3cc:	00c00074 	movhi	r3,1
    c3d0:	18c51184 	addi	r3,r3,5190
    c3d4:	1885883a 	add	r2,r3,r2
    c3d8:	10c00003 	ldbu	r3,0(r2)
    c3dc:	00800804 	movi	r2,32
    c3e0:	1909883a 	add	r4,r3,r4
    c3e4:	1125c83a 	sub	r18,r2,r4
    c3e8:	90000526 	beq	r18,zero,c400 <__umoddi3+0x94>
    c3ec:	8ca2983a 	sll	r17,r17,r18
    c3f0:	8108d83a 	srl	r4,r16,r4
    c3f4:	34a6983a 	sll	r19,r6,r18
    c3f8:	84a8983a 	sll	r20,r16,r18
    c3fc:	2478b03a 	or	fp,r4,r17
    c400:	982ed43a 	srli	r23,r19,16
    c404:	e009883a 	mov	r4,fp
    c408:	9dbfffcc 	andi	r22,r19,65535
    c40c:	b80b883a 	mov	r5,r23
    c410:	0001d2c0 	call	1d2c <__umodsi3>
    c414:	e009883a 	mov	r4,fp
    c418:	b80b883a 	mov	r5,r23
    c41c:	102b883a 	mov	r21,r2
    c420:	0001cc80 	call	1cc8 <__udivsi3>
    c424:	a806943a 	slli	r3,r21,16
    c428:	a008d43a 	srli	r4,r20,16
    c42c:	b085383a 	mul	r2,r22,r2
    c430:	20c8b03a 	or	r4,r4,r3
    c434:	2080032e 	bgeu	r4,r2,c444 <__umoddi3+0xd8>
    c438:	24c9883a 	add	r4,r4,r19
    c43c:	24c00136 	bltu	r4,r19,c444 <__umoddi3+0xd8>
    c440:	20811036 	bltu	r4,r2,c884 <__umoddi3+0x518>
    c444:	20abc83a 	sub	r21,r4,r2
    c448:	b80b883a 	mov	r5,r23
    c44c:	a809883a 	mov	r4,r21
    c450:	0001d2c0 	call	1d2c <__umodsi3>
    c454:	1023883a 	mov	r17,r2
    c458:	b80b883a 	mov	r5,r23
    c45c:	a809883a 	mov	r4,r21
    c460:	0001cc80 	call	1cc8 <__udivsi3>
    c464:	8822943a 	slli	r17,r17,16
    c468:	b085383a 	mul	r2,r22,r2
    c46c:	a0ffffcc 	andi	r3,r20,65535
    c470:	1c46b03a 	or	r3,r3,r17
    c474:	1880042e 	bgeu	r3,r2,c488 <__umoddi3+0x11c>
    c478:	1cc7883a 	add	r3,r3,r19
    c47c:	1cc00236 	bltu	r3,r19,c488 <__umoddi3+0x11c>
    c480:	1880012e 	bgeu	r3,r2,c488 <__umoddi3+0x11c>
    c484:	1cc7883a 	add	r3,r3,r19
    c488:	1885c83a 	sub	r2,r3,r2
    c48c:	1484d83a 	srl	r2,r2,r18
    c490:	0007883a 	mov	r3,zero
    c494:	00004f06 	br	c5d4 <__umoddi3+0x268>
    c498:	29c04c36 	bltu	r5,r7,c5cc <__umoddi3+0x260>
    c49c:	00bfffd4 	movui	r2,65535
    c4a0:	11c0582e 	bgeu	r2,r7,c604 <__umoddi3+0x298>
    c4a4:	00804034 	movhi	r2,256
    c4a8:	10bfffc4 	addi	r2,r2,-1
    c4ac:	11c0e736 	bltu	r2,r7,c84c <__umoddi3+0x4e0>
    c4b0:	01000404 	movi	r4,16
    c4b4:	3904d83a 	srl	r2,r7,r4
    c4b8:	00c00074 	movhi	r3,1
    c4bc:	18c51184 	addi	r3,r3,5190
    c4c0:	1885883a 	add	r2,r3,r2
    c4c4:	14c00003 	ldbu	r19,0(r2)
    c4c8:	00c00804 	movi	r3,32
    c4cc:	9927883a 	add	r19,r19,r4
    c4d0:	1ce9c83a 	sub	r20,r3,r19
    c4d4:	a000581e 	bne	r20,zero,c638 <__umoddi3+0x2cc>
    c4d8:	3c400136 	bltu	r7,r17,c4e0 <__umoddi3+0x174>
    c4dc:	8180eb36 	bltu	r16,r6,c88c <__umoddi3+0x520>
    c4e0:	8185c83a 	sub	r2,r16,r6
    c4e4:	89e3c83a 	sub	r17,r17,r7
    c4e8:	8089803a 	cmpltu	r4,r16,r2
    c4ec:	8939c83a 	sub	fp,r17,r4
    c4f0:	e007883a 	mov	r3,fp
    c4f4:	00003706 	br	c5d4 <__umoddi3+0x268>
    c4f8:	3000041e 	bne	r6,zero,c50c <__umoddi3+0x1a0>
    c4fc:	000b883a 	mov	r5,zero
    c500:	01000044 	movi	r4,1
    c504:	0001cc80 	call	1cc8 <__udivsi3>
    c508:	1027883a 	mov	r19,r2
    c50c:	00bfffd4 	movui	r2,65535
    c510:	14c0402e 	bgeu	r2,r19,c614 <__umoddi3+0x2a8>
    c514:	00804034 	movhi	r2,256
    c518:	10bfffc4 	addi	r2,r2,-1
    c51c:	14c0cd36 	bltu	r2,r19,c854 <__umoddi3+0x4e8>
    c520:	00800404 	movi	r2,16
    c524:	9886d83a 	srl	r3,r19,r2
    c528:	01000074 	movhi	r4,1
    c52c:	21051184 	addi	r4,r4,5190
    c530:	20c7883a 	add	r3,r4,r3
    c534:	18c00003 	ldbu	r3,0(r3)
    c538:	1887883a 	add	r3,r3,r2
    c53c:	00800804 	movi	r2,32
    c540:	10e5c83a 	sub	r18,r2,r3
    c544:	9000901e 	bne	r18,zero,c788 <__umoddi3+0x41c>
    c548:	982cd43a 	srli	r22,r19,16
    c54c:	8ce3c83a 	sub	r17,r17,r19
    c550:	9d7fffcc 	andi	r21,r19,65535
    c554:	b00b883a 	mov	r5,r22
    c558:	8809883a 	mov	r4,r17
    c55c:	0001d2c0 	call	1d2c <__umodsi3>
    c560:	8809883a 	mov	r4,r17
    c564:	b00b883a 	mov	r5,r22
    c568:	1021883a 	mov	r16,r2
    c56c:	0001cc80 	call	1cc8 <__udivsi3>
    c570:	8006943a 	slli	r3,r16,16
    c574:	a008d43a 	srli	r4,r20,16
    c578:	1545383a 	mul	r2,r2,r21
    c57c:	20c8b03a 	or	r4,r4,r3
    c580:	2080042e 	bgeu	r4,r2,c594 <__umoddi3+0x228>
    c584:	24c9883a 	add	r4,r4,r19
    c588:	24c00236 	bltu	r4,r19,c594 <__umoddi3+0x228>
    c58c:	2080012e 	bgeu	r4,r2,c594 <__umoddi3+0x228>
    c590:	24c9883a 	add	r4,r4,r19
    c594:	20a1c83a 	sub	r16,r4,r2
    c598:	b00b883a 	mov	r5,r22
    c59c:	8009883a 	mov	r4,r16
    c5a0:	0001d2c0 	call	1d2c <__umodsi3>
    c5a4:	1023883a 	mov	r17,r2
    c5a8:	b00b883a 	mov	r5,r22
    c5ac:	8009883a 	mov	r4,r16
    c5b0:	0001cc80 	call	1cc8 <__udivsi3>
    c5b4:	8822943a 	slli	r17,r17,16
    c5b8:	1545383a 	mul	r2,r2,r21
    c5bc:	a53fffcc 	andi	r20,r20,65535
    c5c0:	a446b03a 	or	r3,r20,r17
    c5c4:	18bfb02e 	bgeu	r3,r2,c488 <__alt_data_end+0xff00c488>
    c5c8:	003fab06 	br	c478 <__alt_data_end+0xff00c478>
    c5cc:	2005883a 	mov	r2,r4
    c5d0:	2807883a 	mov	r3,r5
    c5d4:	dfc00b17 	ldw	ra,44(sp)
    c5d8:	df000a17 	ldw	fp,40(sp)
    c5dc:	ddc00917 	ldw	r23,36(sp)
    c5e0:	dd800817 	ldw	r22,32(sp)
    c5e4:	dd400717 	ldw	r21,28(sp)
    c5e8:	dd000617 	ldw	r20,24(sp)
    c5ec:	dcc00517 	ldw	r19,20(sp)
    c5f0:	dc800417 	ldw	r18,16(sp)
    c5f4:	dc400317 	ldw	r17,12(sp)
    c5f8:	dc000217 	ldw	r16,8(sp)
    c5fc:	dec00c04 	addi	sp,sp,48
    c600:	f800283a 	ret
    c604:	04c03fc4 	movi	r19,255
    c608:	99c9803a 	cmpltu	r4,r19,r7
    c60c:	200890fa 	slli	r4,r4,3
    c610:	003fa806 	br	c4b4 <__alt_data_end+0xff00c4b4>
    c614:	00803fc4 	movi	r2,255
    c618:	14c5803a 	cmpltu	r2,r2,r19
    c61c:	100490fa 	slli	r2,r2,3
    c620:	003fc006 	br	c524 <__alt_data_end+0xff00c524>
    c624:	00804034 	movhi	r2,256
    c628:	10bfffc4 	addi	r2,r2,-1
    c62c:	11808b36 	bltu	r2,r6,c85c <__umoddi3+0x4f0>
    c630:	01000404 	movi	r4,16
    c634:	003f6406 	br	c3c8 <__alt_data_end+0xff00c3c8>
    c638:	34c4d83a 	srl	r2,r6,r19
    c63c:	3d0e983a 	sll	r7,r7,r20
    c640:	8cf8d83a 	srl	fp,r17,r19
    c644:	8d10983a 	sll	r8,r17,r20
    c648:	38aab03a 	or	r21,r7,r2
    c64c:	a82cd43a 	srli	r22,r21,16
    c650:	84e2d83a 	srl	r17,r16,r19
    c654:	e009883a 	mov	r4,fp
    c658:	b00b883a 	mov	r5,r22
    c65c:	8a22b03a 	or	r17,r17,r8
    c660:	3524983a 	sll	r18,r6,r20
    c664:	0001d2c0 	call	1d2c <__umodsi3>
    c668:	e009883a 	mov	r4,fp
    c66c:	b00b883a 	mov	r5,r22
    c670:	102f883a 	mov	r23,r2
    c674:	0001cc80 	call	1cc8 <__udivsi3>
    c678:	100d883a 	mov	r6,r2
    c67c:	b808943a 	slli	r4,r23,16
    c680:	aa3fffcc 	andi	r8,r21,65535
    c684:	8804d43a 	srli	r2,r17,16
    c688:	41af383a 	mul	r23,r8,r6
    c68c:	8520983a 	sll	r16,r16,r20
    c690:	1104b03a 	or	r2,r2,r4
    c694:	15c0042e 	bgeu	r2,r23,c6a8 <__umoddi3+0x33c>
    c698:	1545883a 	add	r2,r2,r21
    c69c:	30ffffc4 	addi	r3,r6,-1
    c6a0:	1540742e 	bgeu	r2,r21,c874 <__umoddi3+0x508>
    c6a4:	180d883a 	mov	r6,r3
    c6a8:	15efc83a 	sub	r23,r2,r23
    c6ac:	b00b883a 	mov	r5,r22
    c6b0:	b809883a 	mov	r4,r23
    c6b4:	d9800115 	stw	r6,4(sp)
    c6b8:	da000015 	stw	r8,0(sp)
    c6bc:	0001d2c0 	call	1d2c <__umodsi3>
    c6c0:	b00b883a 	mov	r5,r22
    c6c4:	b809883a 	mov	r4,r23
    c6c8:	1039883a 	mov	fp,r2
    c6cc:	0001cc80 	call	1cc8 <__udivsi3>
    c6d0:	da000017 	ldw	r8,0(sp)
    c6d4:	e038943a 	slli	fp,fp,16
    c6d8:	100b883a 	mov	r5,r2
    c6dc:	4089383a 	mul	r4,r8,r2
    c6e0:	8a3fffcc 	andi	r8,r17,65535
    c6e4:	4710b03a 	or	r8,r8,fp
    c6e8:	d9800117 	ldw	r6,4(sp)
    c6ec:	4100042e 	bgeu	r8,r4,c700 <__umoddi3+0x394>
    c6f0:	4551883a 	add	r8,r8,r21
    c6f4:	10bfffc4 	addi	r2,r2,-1
    c6f8:	45405a2e 	bgeu	r8,r21,c864 <__umoddi3+0x4f8>
    c6fc:	100b883a 	mov	r5,r2
    c700:	300c943a 	slli	r6,r6,16
    c704:	91ffffcc 	andi	r7,r18,65535
    c708:	9004d43a 	srli	r2,r18,16
    c70c:	314cb03a 	or	r6,r6,r5
    c710:	317fffcc 	andi	r5,r6,65535
    c714:	300cd43a 	srli	r6,r6,16
    c718:	29d3383a 	mul	r9,r5,r7
    c71c:	288b383a 	mul	r5,r5,r2
    c720:	31cf383a 	mul	r7,r6,r7
    c724:	4806d43a 	srli	r3,r9,16
    c728:	4111c83a 	sub	r8,r8,r4
    c72c:	29cb883a 	add	r5,r5,r7
    c730:	194b883a 	add	r5,r3,r5
    c734:	3085383a 	mul	r2,r6,r2
    c738:	29c0022e 	bgeu	r5,r7,c744 <__umoddi3+0x3d8>
    c73c:	00c00074 	movhi	r3,1
    c740:	10c5883a 	add	r2,r2,r3
    c744:	2808d43a 	srli	r4,r5,16
    c748:	280a943a 	slli	r5,r5,16
    c74c:	4a7fffcc 	andi	r9,r9,65535
    c750:	2085883a 	add	r2,r4,r2
    c754:	2a4b883a 	add	r5,r5,r9
    c758:	40803636 	bltu	r8,r2,c834 <__umoddi3+0x4c8>
    c75c:	40804d26 	beq	r8,r2,c894 <__umoddi3+0x528>
    c760:	4089c83a 	sub	r4,r8,r2
    c764:	280f883a 	mov	r7,r5
    c768:	81cfc83a 	sub	r7,r16,r7
    c76c:	81c7803a 	cmpltu	r3,r16,r7
    c770:	20c7c83a 	sub	r3,r4,r3
    c774:	1cc4983a 	sll	r2,r3,r19
    c778:	3d0ed83a 	srl	r7,r7,r20
    c77c:	1d06d83a 	srl	r3,r3,r20
    c780:	11c4b03a 	or	r2,r2,r7
    c784:	003f9306 	br	c5d4 <__alt_data_end+0xff00c5d4>
    c788:	9ca6983a 	sll	r19,r19,r18
    c78c:	88e8d83a 	srl	r20,r17,r3
    c790:	80c4d83a 	srl	r2,r16,r3
    c794:	982cd43a 	srli	r22,r19,16
    c798:	8ca2983a 	sll	r17,r17,r18
    c79c:	a009883a 	mov	r4,r20
    c7a0:	b00b883a 	mov	r5,r22
    c7a4:	1478b03a 	or	fp,r2,r17
    c7a8:	0001d2c0 	call	1d2c <__umodsi3>
    c7ac:	a009883a 	mov	r4,r20
    c7b0:	b00b883a 	mov	r5,r22
    c7b4:	1023883a 	mov	r17,r2
    c7b8:	0001cc80 	call	1cc8 <__udivsi3>
    c7bc:	9d7fffcc 	andi	r21,r19,65535
    c7c0:	880a943a 	slli	r5,r17,16
    c7c4:	e008d43a 	srli	r4,fp,16
    c7c8:	a885383a 	mul	r2,r21,r2
    c7cc:	84a8983a 	sll	r20,r16,r18
    c7d0:	2148b03a 	or	r4,r4,r5
    c7d4:	2080042e 	bgeu	r4,r2,c7e8 <__umoddi3+0x47c>
    c7d8:	24c9883a 	add	r4,r4,r19
    c7dc:	24c00236 	bltu	r4,r19,c7e8 <__umoddi3+0x47c>
    c7e0:	2080012e 	bgeu	r4,r2,c7e8 <__umoddi3+0x47c>
    c7e4:	24c9883a 	add	r4,r4,r19
    c7e8:	20a3c83a 	sub	r17,r4,r2
    c7ec:	b00b883a 	mov	r5,r22
    c7f0:	8809883a 	mov	r4,r17
    c7f4:	0001d2c0 	call	1d2c <__umodsi3>
    c7f8:	102f883a 	mov	r23,r2
    c7fc:	8809883a 	mov	r4,r17
    c800:	b00b883a 	mov	r5,r22
    c804:	0001cc80 	call	1cc8 <__udivsi3>
    c808:	b82e943a 	slli	r23,r23,16
    c80c:	a885383a 	mul	r2,r21,r2
    c810:	e13fffcc 	andi	r4,fp,65535
    c814:	25c8b03a 	or	r4,r4,r23
    c818:	2080042e 	bgeu	r4,r2,c82c <__umoddi3+0x4c0>
    c81c:	24c9883a 	add	r4,r4,r19
    c820:	24c00236 	bltu	r4,r19,c82c <__umoddi3+0x4c0>
    c824:	2080012e 	bgeu	r4,r2,c82c <__umoddi3+0x4c0>
    c828:	24c9883a 	add	r4,r4,r19
    c82c:	20a3c83a 	sub	r17,r4,r2
    c830:	003f4806 	br	c554 <__alt_data_end+0xff00c554>
    c834:	2c8fc83a 	sub	r7,r5,r18
    c838:	1545c83a 	sub	r2,r2,r21
    c83c:	29cb803a 	cmpltu	r5,r5,r7
    c840:	1145c83a 	sub	r2,r2,r5
    c844:	4089c83a 	sub	r4,r8,r2
    c848:	003fc706 	br	c768 <__alt_data_end+0xff00c768>
    c84c:	01000604 	movi	r4,24
    c850:	003f1806 	br	c4b4 <__alt_data_end+0xff00c4b4>
    c854:	00800604 	movi	r2,24
    c858:	003f3206 	br	c524 <__alt_data_end+0xff00c524>
    c85c:	01000604 	movi	r4,24
    c860:	003ed906 	br	c3c8 <__alt_data_end+0xff00c3c8>
    c864:	413fa52e 	bgeu	r8,r4,c6fc <__alt_data_end+0xff00c6fc>
    c868:	297fff84 	addi	r5,r5,-2
    c86c:	4551883a 	add	r8,r8,r21
    c870:	003fa306 	br	c700 <__alt_data_end+0xff00c700>
    c874:	15ff8b2e 	bgeu	r2,r23,c6a4 <__alt_data_end+0xff00c6a4>
    c878:	31bfff84 	addi	r6,r6,-2
    c87c:	1545883a 	add	r2,r2,r21
    c880:	003f8906 	br	c6a8 <__alt_data_end+0xff00c6a8>
    c884:	24c9883a 	add	r4,r4,r19
    c888:	003eee06 	br	c444 <__alt_data_end+0xff00c444>
    c88c:	8005883a 	mov	r2,r16
    c890:	003f1706 	br	c4f0 <__alt_data_end+0xff00c4f0>
    c894:	817fe736 	bltu	r16,r5,c834 <__alt_data_end+0xff00c834>
    c898:	280f883a 	mov	r7,r5
    c89c:	0009883a 	mov	r4,zero
    c8a0:	003fb106 	br	c768 <__alt_data_end+0xff00c768>

0000c8a4 <__adddf3>:
    c8a4:	02c00434 	movhi	r11,16
    c8a8:	5affffc4 	addi	r11,r11,-1
    c8ac:	2806d7fa 	srli	r3,r5,31
    c8b0:	2ad4703a 	and	r10,r5,r11
    c8b4:	3ad2703a 	and	r9,r7,r11
    c8b8:	3804d53a 	srli	r2,r7,20
    c8bc:	3018d77a 	srli	r12,r6,29
    c8c0:	280ad53a 	srli	r5,r5,20
    c8c4:	501490fa 	slli	r10,r10,3
    c8c8:	2010d77a 	srli	r8,r4,29
    c8cc:	481290fa 	slli	r9,r9,3
    c8d0:	380ed7fa 	srli	r7,r7,31
    c8d4:	defffb04 	addi	sp,sp,-20
    c8d8:	dc800215 	stw	r18,8(sp)
    c8dc:	dc400115 	stw	r17,4(sp)
    c8e0:	dc000015 	stw	r16,0(sp)
    c8e4:	dfc00415 	stw	ra,16(sp)
    c8e8:	dcc00315 	stw	r19,12(sp)
    c8ec:	1c803fcc 	andi	r18,r3,255
    c8f0:	2c01ffcc 	andi	r16,r5,2047
    c8f4:	5210b03a 	or	r8,r10,r8
    c8f8:	202290fa 	slli	r17,r4,3
    c8fc:	1081ffcc 	andi	r2,r2,2047
    c900:	4b12b03a 	or	r9,r9,r12
    c904:	300c90fa 	slli	r6,r6,3
    c908:	91c07526 	beq	r18,r7,cae0 <__adddf3+0x23c>
    c90c:	8087c83a 	sub	r3,r16,r2
    c910:	00c0ab0e 	bge	zero,r3,cbc0 <__adddf3+0x31c>
    c914:	10002a1e 	bne	r2,zero,c9c0 <__adddf3+0x11c>
    c918:	4984b03a 	or	r2,r9,r6
    c91c:	1000961e 	bne	r2,zero,cb78 <__adddf3+0x2d4>
    c920:	888001cc 	andi	r2,r17,7
    c924:	10000726 	beq	r2,zero,c944 <__adddf3+0xa0>
    c928:	888003cc 	andi	r2,r17,15
    c92c:	00c00104 	movi	r3,4
    c930:	10c00426 	beq	r2,r3,c944 <__adddf3+0xa0>
    c934:	88c7883a 	add	r3,r17,r3
    c938:	1c63803a 	cmpltu	r17,r3,r17
    c93c:	4451883a 	add	r8,r8,r17
    c940:	1823883a 	mov	r17,r3
    c944:	4080202c 	andhi	r2,r8,128
    c948:	10005926 	beq	r2,zero,cab0 <__adddf3+0x20c>
    c94c:	84000044 	addi	r16,r16,1
    c950:	0081ffc4 	movi	r2,2047
    c954:	8080ba26 	beq	r16,r2,cc40 <__adddf3+0x39c>
    c958:	00bfe034 	movhi	r2,65408
    c95c:	10bfffc4 	addi	r2,r2,-1
    c960:	4090703a 	and	r8,r8,r2
    c964:	4004977a 	slli	r2,r8,29
    c968:	4010927a 	slli	r8,r8,9
    c96c:	8822d0fa 	srli	r17,r17,3
    c970:	8401ffcc 	andi	r16,r16,2047
    c974:	4010d33a 	srli	r8,r8,12
    c978:	9007883a 	mov	r3,r18
    c97c:	1444b03a 	or	r2,r2,r17
    c980:	8401ffcc 	andi	r16,r16,2047
    c984:	8020953a 	slli	r16,r16,20
    c988:	18c03fcc 	andi	r3,r3,255
    c98c:	01000434 	movhi	r4,16
    c990:	213fffc4 	addi	r4,r4,-1
    c994:	180697fa 	slli	r3,r3,31
    c998:	4110703a 	and	r8,r8,r4
    c99c:	4410b03a 	or	r8,r8,r16
    c9a0:	40c6b03a 	or	r3,r8,r3
    c9a4:	dfc00417 	ldw	ra,16(sp)
    c9a8:	dcc00317 	ldw	r19,12(sp)
    c9ac:	dc800217 	ldw	r18,8(sp)
    c9b0:	dc400117 	ldw	r17,4(sp)
    c9b4:	dc000017 	ldw	r16,0(sp)
    c9b8:	dec00504 	addi	sp,sp,20
    c9bc:	f800283a 	ret
    c9c0:	0081ffc4 	movi	r2,2047
    c9c4:	80bfd626 	beq	r16,r2,c920 <__alt_data_end+0xff00c920>
    c9c8:	4a402034 	orhi	r9,r9,128
    c9cc:	00800e04 	movi	r2,56
    c9d0:	10c09f16 	blt	r2,r3,cc50 <__adddf3+0x3ac>
    c9d4:	008007c4 	movi	r2,31
    c9d8:	10c0c216 	blt	r2,r3,cce4 <__adddf3+0x440>
    c9dc:	00800804 	movi	r2,32
    c9e0:	10c5c83a 	sub	r2,r2,r3
    c9e4:	488a983a 	sll	r5,r9,r2
    c9e8:	30c8d83a 	srl	r4,r6,r3
    c9ec:	3084983a 	sll	r2,r6,r2
    c9f0:	48c6d83a 	srl	r3,r9,r3
    c9f4:	290cb03a 	or	r6,r5,r4
    c9f8:	1004c03a 	cmpne	r2,r2,zero
    c9fc:	308cb03a 	or	r6,r6,r2
    ca00:	898dc83a 	sub	r6,r17,r6
    ca04:	89a3803a 	cmpltu	r17,r17,r6
    ca08:	40d1c83a 	sub	r8,r8,r3
    ca0c:	4451c83a 	sub	r8,r8,r17
    ca10:	3023883a 	mov	r17,r6
    ca14:	4080202c 	andhi	r2,r8,128
    ca18:	10002326 	beq	r2,zero,caa8 <__adddf3+0x204>
    ca1c:	04c02034 	movhi	r19,128
    ca20:	9cffffc4 	addi	r19,r19,-1
    ca24:	44e6703a 	and	r19,r8,r19
    ca28:	98007626 	beq	r19,zero,cc04 <__adddf3+0x360>
    ca2c:	9809883a 	mov	r4,r19
    ca30:	00027140 	call	2714 <__clzsi2>
    ca34:	10fffe04 	addi	r3,r2,-8
    ca38:	010007c4 	movi	r4,31
    ca3c:	20c07716 	blt	r4,r3,cc1c <__adddf3+0x378>
    ca40:	00800804 	movi	r2,32
    ca44:	10c5c83a 	sub	r2,r2,r3
    ca48:	8884d83a 	srl	r2,r17,r2
    ca4c:	98d0983a 	sll	r8,r19,r3
    ca50:	88e2983a 	sll	r17,r17,r3
    ca54:	1204b03a 	or	r2,r2,r8
    ca58:	1c007416 	blt	r3,r16,cc2c <__adddf3+0x388>
    ca5c:	1c21c83a 	sub	r16,r3,r16
    ca60:	82000044 	addi	r8,r16,1
    ca64:	00c007c4 	movi	r3,31
    ca68:	1a009116 	blt	r3,r8,ccb0 <__adddf3+0x40c>
    ca6c:	00c00804 	movi	r3,32
    ca70:	1a07c83a 	sub	r3,r3,r8
    ca74:	8a08d83a 	srl	r4,r17,r8
    ca78:	88e2983a 	sll	r17,r17,r3
    ca7c:	10c6983a 	sll	r3,r2,r3
    ca80:	1210d83a 	srl	r8,r2,r8
    ca84:	8804c03a 	cmpne	r2,r17,zero
    ca88:	1906b03a 	or	r3,r3,r4
    ca8c:	18a2b03a 	or	r17,r3,r2
    ca90:	0021883a 	mov	r16,zero
    ca94:	003fa206 	br	c920 <__alt_data_end+0xff00c920>
    ca98:	1890b03a 	or	r8,r3,r2
    ca9c:	40017d26 	beq	r8,zero,d094 <__adddf3+0x7f0>
    caa0:	1011883a 	mov	r8,r2
    caa4:	1823883a 	mov	r17,r3
    caa8:	888001cc 	andi	r2,r17,7
    caac:	103f9e1e 	bne	r2,zero,c928 <__alt_data_end+0xff00c928>
    cab0:	4004977a 	slli	r2,r8,29
    cab4:	8822d0fa 	srli	r17,r17,3
    cab8:	4010d0fa 	srli	r8,r8,3
    cabc:	9007883a 	mov	r3,r18
    cac0:	1444b03a 	or	r2,r2,r17
    cac4:	0101ffc4 	movi	r4,2047
    cac8:	81002426 	beq	r16,r4,cb5c <__adddf3+0x2b8>
    cacc:	8120703a 	and	r16,r16,r4
    cad0:	01000434 	movhi	r4,16
    cad4:	213fffc4 	addi	r4,r4,-1
    cad8:	4110703a 	and	r8,r8,r4
    cadc:	003fa806 	br	c980 <__alt_data_end+0xff00c980>
    cae0:	8089c83a 	sub	r4,r16,r2
    cae4:	01005e0e 	bge	zero,r4,cc60 <__adddf3+0x3bc>
    cae8:	10002b26 	beq	r2,zero,cb98 <__adddf3+0x2f4>
    caec:	0081ffc4 	movi	r2,2047
    caf0:	80bf8b26 	beq	r16,r2,c920 <__alt_data_end+0xff00c920>
    caf4:	4a402034 	orhi	r9,r9,128
    caf8:	00800e04 	movi	r2,56
    cafc:	1100a40e 	bge	r2,r4,cd90 <__adddf3+0x4ec>
    cb00:	498cb03a 	or	r6,r9,r6
    cb04:	300ac03a 	cmpne	r5,r6,zero
    cb08:	0013883a 	mov	r9,zero
    cb0c:	2c4b883a 	add	r5,r5,r17
    cb10:	2c63803a 	cmpltu	r17,r5,r17
    cb14:	4a11883a 	add	r8,r9,r8
    cb18:	8a11883a 	add	r8,r17,r8
    cb1c:	2823883a 	mov	r17,r5
    cb20:	4080202c 	andhi	r2,r8,128
    cb24:	103fe026 	beq	r2,zero,caa8 <__alt_data_end+0xff00caa8>
    cb28:	84000044 	addi	r16,r16,1
    cb2c:	0081ffc4 	movi	r2,2047
    cb30:	8080d226 	beq	r16,r2,ce7c <__adddf3+0x5d8>
    cb34:	00bfe034 	movhi	r2,65408
    cb38:	10bfffc4 	addi	r2,r2,-1
    cb3c:	4090703a 	and	r8,r8,r2
    cb40:	880ad07a 	srli	r5,r17,1
    cb44:	400897fa 	slli	r4,r8,31
    cb48:	88c0004c 	andi	r3,r17,1
    cb4c:	28e2b03a 	or	r17,r5,r3
    cb50:	4010d07a 	srli	r8,r8,1
    cb54:	2462b03a 	or	r17,r4,r17
    cb58:	003f7106 	br	c920 <__alt_data_end+0xff00c920>
    cb5c:	4088b03a 	or	r4,r8,r2
    cb60:	20014526 	beq	r4,zero,d078 <__adddf3+0x7d4>
    cb64:	01000434 	movhi	r4,16
    cb68:	42000234 	orhi	r8,r8,8
    cb6c:	213fffc4 	addi	r4,r4,-1
    cb70:	4110703a 	and	r8,r8,r4
    cb74:	003f8206 	br	c980 <__alt_data_end+0xff00c980>
    cb78:	18ffffc4 	addi	r3,r3,-1
    cb7c:	1800491e 	bne	r3,zero,cca4 <__adddf3+0x400>
    cb80:	898bc83a 	sub	r5,r17,r6
    cb84:	8963803a 	cmpltu	r17,r17,r5
    cb88:	4251c83a 	sub	r8,r8,r9
    cb8c:	4451c83a 	sub	r8,r8,r17
    cb90:	2823883a 	mov	r17,r5
    cb94:	003f9f06 	br	ca14 <__alt_data_end+0xff00ca14>
    cb98:	4984b03a 	or	r2,r9,r6
    cb9c:	103f6026 	beq	r2,zero,c920 <__alt_data_end+0xff00c920>
    cba0:	213fffc4 	addi	r4,r4,-1
    cba4:	2000931e 	bne	r4,zero,cdf4 <__adddf3+0x550>
    cba8:	898d883a 	add	r6,r17,r6
    cbac:	3463803a 	cmpltu	r17,r6,r17
    cbb0:	4251883a 	add	r8,r8,r9
    cbb4:	8a11883a 	add	r8,r17,r8
    cbb8:	3023883a 	mov	r17,r6
    cbbc:	003fd806 	br	cb20 <__alt_data_end+0xff00cb20>
    cbc0:	1800541e 	bne	r3,zero,cd14 <__adddf3+0x470>
    cbc4:	80800044 	addi	r2,r16,1
    cbc8:	1081ffcc 	andi	r2,r2,2047
    cbcc:	00c00044 	movi	r3,1
    cbd0:	1880a00e 	bge	r3,r2,ce54 <__adddf3+0x5b0>
    cbd4:	8989c83a 	sub	r4,r17,r6
    cbd8:	8905803a 	cmpltu	r2,r17,r4
    cbdc:	4267c83a 	sub	r19,r8,r9
    cbe0:	98a7c83a 	sub	r19,r19,r2
    cbe4:	9880202c 	andhi	r2,r19,128
    cbe8:	10006326 	beq	r2,zero,cd78 <__adddf3+0x4d4>
    cbec:	3463c83a 	sub	r17,r6,r17
    cbf0:	4a07c83a 	sub	r3,r9,r8
    cbf4:	344d803a 	cmpltu	r6,r6,r17
    cbf8:	19a7c83a 	sub	r19,r3,r6
    cbfc:	3825883a 	mov	r18,r7
    cc00:	983f8a1e 	bne	r19,zero,ca2c <__alt_data_end+0xff00ca2c>
    cc04:	8809883a 	mov	r4,r17
    cc08:	00027140 	call	2714 <__clzsi2>
    cc0c:	10800804 	addi	r2,r2,32
    cc10:	10fffe04 	addi	r3,r2,-8
    cc14:	010007c4 	movi	r4,31
    cc18:	20ff890e 	bge	r4,r3,ca40 <__alt_data_end+0xff00ca40>
    cc1c:	10bff604 	addi	r2,r2,-40
    cc20:	8884983a 	sll	r2,r17,r2
    cc24:	0023883a 	mov	r17,zero
    cc28:	1c3f8c0e 	bge	r3,r16,ca5c <__alt_data_end+0xff00ca5c>
    cc2c:	023fe034 	movhi	r8,65408
    cc30:	423fffc4 	addi	r8,r8,-1
    cc34:	80e1c83a 	sub	r16,r16,r3
    cc38:	1210703a 	and	r8,r2,r8
    cc3c:	003f3806 	br	c920 <__alt_data_end+0xff00c920>
    cc40:	9007883a 	mov	r3,r18
    cc44:	0011883a 	mov	r8,zero
    cc48:	0005883a 	mov	r2,zero
    cc4c:	003f4c06 	br	c980 <__alt_data_end+0xff00c980>
    cc50:	498cb03a 	or	r6,r9,r6
    cc54:	300cc03a 	cmpne	r6,r6,zero
    cc58:	0007883a 	mov	r3,zero
    cc5c:	003f6806 	br	ca00 <__alt_data_end+0xff00ca00>
    cc60:	20009c1e 	bne	r4,zero,ced4 <__adddf3+0x630>
    cc64:	80800044 	addi	r2,r16,1
    cc68:	1141ffcc 	andi	r5,r2,2047
    cc6c:	01000044 	movi	r4,1
    cc70:	2140670e 	bge	r4,r5,ce10 <__adddf3+0x56c>
    cc74:	0101ffc4 	movi	r4,2047
    cc78:	11007f26 	beq	r2,r4,ce78 <__adddf3+0x5d4>
    cc7c:	898d883a 	add	r6,r17,r6
    cc80:	4247883a 	add	r3,r8,r9
    cc84:	3451803a 	cmpltu	r8,r6,r17
    cc88:	40d1883a 	add	r8,r8,r3
    cc8c:	402297fa 	slli	r17,r8,31
    cc90:	300cd07a 	srli	r6,r6,1
    cc94:	4010d07a 	srli	r8,r8,1
    cc98:	1021883a 	mov	r16,r2
    cc9c:	89a2b03a 	or	r17,r17,r6
    cca0:	003f1f06 	br	c920 <__alt_data_end+0xff00c920>
    cca4:	0081ffc4 	movi	r2,2047
    cca8:	80bf481e 	bne	r16,r2,c9cc <__alt_data_end+0xff00c9cc>
    ccac:	003f1c06 	br	c920 <__alt_data_end+0xff00c920>
    ccb0:	843ff844 	addi	r16,r16,-31
    ccb4:	01000804 	movi	r4,32
    ccb8:	1406d83a 	srl	r3,r2,r16
    ccbc:	41005026 	beq	r8,r4,ce00 <__adddf3+0x55c>
    ccc0:	01001004 	movi	r4,64
    ccc4:	2211c83a 	sub	r8,r4,r8
    ccc8:	1204983a 	sll	r2,r2,r8
    cccc:	88a2b03a 	or	r17,r17,r2
    ccd0:	8822c03a 	cmpne	r17,r17,zero
    ccd4:	1c62b03a 	or	r17,r3,r17
    ccd8:	0011883a 	mov	r8,zero
    ccdc:	0021883a 	mov	r16,zero
    cce0:	003f7106 	br	caa8 <__alt_data_end+0xff00caa8>
    cce4:	193ff804 	addi	r4,r3,-32
    cce8:	00800804 	movi	r2,32
    ccec:	4908d83a 	srl	r4,r9,r4
    ccf0:	18804526 	beq	r3,r2,ce08 <__adddf3+0x564>
    ccf4:	00801004 	movi	r2,64
    ccf8:	10c5c83a 	sub	r2,r2,r3
    ccfc:	4886983a 	sll	r3,r9,r2
    cd00:	198cb03a 	or	r6,r3,r6
    cd04:	300cc03a 	cmpne	r6,r6,zero
    cd08:	218cb03a 	or	r6,r4,r6
    cd0c:	0007883a 	mov	r3,zero
    cd10:	003f3b06 	br	ca00 <__alt_data_end+0xff00ca00>
    cd14:	80002a26 	beq	r16,zero,cdc0 <__adddf3+0x51c>
    cd18:	0101ffc4 	movi	r4,2047
    cd1c:	11006826 	beq	r2,r4,cec0 <__adddf3+0x61c>
    cd20:	00c7c83a 	sub	r3,zero,r3
    cd24:	42002034 	orhi	r8,r8,128
    cd28:	01000e04 	movi	r4,56
    cd2c:	20c07c16 	blt	r4,r3,cf20 <__adddf3+0x67c>
    cd30:	010007c4 	movi	r4,31
    cd34:	20c0da16 	blt	r4,r3,d0a0 <__adddf3+0x7fc>
    cd38:	01000804 	movi	r4,32
    cd3c:	20c9c83a 	sub	r4,r4,r3
    cd40:	4114983a 	sll	r10,r8,r4
    cd44:	88cad83a 	srl	r5,r17,r3
    cd48:	8908983a 	sll	r4,r17,r4
    cd4c:	40c6d83a 	srl	r3,r8,r3
    cd50:	5162b03a 	or	r17,r10,r5
    cd54:	2008c03a 	cmpne	r4,r4,zero
    cd58:	8922b03a 	or	r17,r17,r4
    cd5c:	3463c83a 	sub	r17,r6,r17
    cd60:	48c7c83a 	sub	r3,r9,r3
    cd64:	344d803a 	cmpltu	r6,r6,r17
    cd68:	1991c83a 	sub	r8,r3,r6
    cd6c:	1021883a 	mov	r16,r2
    cd70:	3825883a 	mov	r18,r7
    cd74:	003f2706 	br	ca14 <__alt_data_end+0xff00ca14>
    cd78:	24d0b03a 	or	r8,r4,r19
    cd7c:	40001b1e 	bne	r8,zero,cdec <__adddf3+0x548>
    cd80:	0005883a 	mov	r2,zero
    cd84:	0007883a 	mov	r3,zero
    cd88:	0021883a 	mov	r16,zero
    cd8c:	003f4d06 	br	cac4 <__alt_data_end+0xff00cac4>
    cd90:	008007c4 	movi	r2,31
    cd94:	11003c16 	blt	r2,r4,ce88 <__adddf3+0x5e4>
    cd98:	00800804 	movi	r2,32
    cd9c:	1105c83a 	sub	r2,r2,r4
    cda0:	488e983a 	sll	r7,r9,r2
    cda4:	310ad83a 	srl	r5,r6,r4
    cda8:	3084983a 	sll	r2,r6,r2
    cdac:	4912d83a 	srl	r9,r9,r4
    cdb0:	394ab03a 	or	r5,r7,r5
    cdb4:	1004c03a 	cmpne	r2,r2,zero
    cdb8:	288ab03a 	or	r5,r5,r2
    cdbc:	003f5306 	br	cb0c <__alt_data_end+0xff00cb0c>
    cdc0:	4448b03a 	or	r4,r8,r17
    cdc4:	20003e26 	beq	r4,zero,cec0 <__adddf3+0x61c>
    cdc8:	00c6303a 	nor	r3,zero,r3
    cdcc:	18003a1e 	bne	r3,zero,ceb8 <__adddf3+0x614>
    cdd0:	3463c83a 	sub	r17,r6,r17
    cdd4:	4a07c83a 	sub	r3,r9,r8
    cdd8:	344d803a 	cmpltu	r6,r6,r17
    cddc:	1991c83a 	sub	r8,r3,r6
    cde0:	1021883a 	mov	r16,r2
    cde4:	3825883a 	mov	r18,r7
    cde8:	003f0a06 	br	ca14 <__alt_data_end+0xff00ca14>
    cdec:	2023883a 	mov	r17,r4
    cdf0:	003f0d06 	br	ca28 <__alt_data_end+0xff00ca28>
    cdf4:	0081ffc4 	movi	r2,2047
    cdf8:	80bf3f1e 	bne	r16,r2,caf8 <__alt_data_end+0xff00caf8>
    cdfc:	003ec806 	br	c920 <__alt_data_end+0xff00c920>
    ce00:	0005883a 	mov	r2,zero
    ce04:	003fb106 	br	cccc <__alt_data_end+0xff00cccc>
    ce08:	0007883a 	mov	r3,zero
    ce0c:	003fbc06 	br	cd00 <__alt_data_end+0xff00cd00>
    ce10:	4444b03a 	or	r2,r8,r17
    ce14:	8000871e 	bne	r16,zero,d034 <__adddf3+0x790>
    ce18:	1000ba26 	beq	r2,zero,d104 <__adddf3+0x860>
    ce1c:	4984b03a 	or	r2,r9,r6
    ce20:	103ebf26 	beq	r2,zero,c920 <__alt_data_end+0xff00c920>
    ce24:	8985883a 	add	r2,r17,r6
    ce28:	4247883a 	add	r3,r8,r9
    ce2c:	1451803a 	cmpltu	r8,r2,r17
    ce30:	40d1883a 	add	r8,r8,r3
    ce34:	40c0202c 	andhi	r3,r8,128
    ce38:	1023883a 	mov	r17,r2
    ce3c:	183f1a26 	beq	r3,zero,caa8 <__alt_data_end+0xff00caa8>
    ce40:	00bfe034 	movhi	r2,65408
    ce44:	10bfffc4 	addi	r2,r2,-1
    ce48:	2021883a 	mov	r16,r4
    ce4c:	4090703a 	and	r8,r8,r2
    ce50:	003eb306 	br	c920 <__alt_data_end+0xff00c920>
    ce54:	4444b03a 	or	r2,r8,r17
    ce58:	8000291e 	bne	r16,zero,cf00 <__adddf3+0x65c>
    ce5c:	10004b1e 	bne	r2,zero,cf8c <__adddf3+0x6e8>
    ce60:	4990b03a 	or	r8,r9,r6
    ce64:	40008b26 	beq	r8,zero,d094 <__adddf3+0x7f0>
    ce68:	4811883a 	mov	r8,r9
    ce6c:	3023883a 	mov	r17,r6
    ce70:	3825883a 	mov	r18,r7
    ce74:	003eaa06 	br	c920 <__alt_data_end+0xff00c920>
    ce78:	1021883a 	mov	r16,r2
    ce7c:	0011883a 	mov	r8,zero
    ce80:	0005883a 	mov	r2,zero
    ce84:	003f0f06 	br	cac4 <__alt_data_end+0xff00cac4>
    ce88:	217ff804 	addi	r5,r4,-32
    ce8c:	00800804 	movi	r2,32
    ce90:	494ad83a 	srl	r5,r9,r5
    ce94:	20807d26 	beq	r4,r2,d08c <__adddf3+0x7e8>
    ce98:	00801004 	movi	r2,64
    ce9c:	1109c83a 	sub	r4,r2,r4
    cea0:	4912983a 	sll	r9,r9,r4
    cea4:	498cb03a 	or	r6,r9,r6
    cea8:	300cc03a 	cmpne	r6,r6,zero
    ceac:	298ab03a 	or	r5,r5,r6
    ceb0:	0013883a 	mov	r9,zero
    ceb4:	003f1506 	br	cb0c <__alt_data_end+0xff00cb0c>
    ceb8:	0101ffc4 	movi	r4,2047
    cebc:	113f9a1e 	bne	r2,r4,cd28 <__alt_data_end+0xff00cd28>
    cec0:	4811883a 	mov	r8,r9
    cec4:	3023883a 	mov	r17,r6
    cec8:	1021883a 	mov	r16,r2
    cecc:	3825883a 	mov	r18,r7
    ced0:	003e9306 	br	c920 <__alt_data_end+0xff00c920>
    ced4:	8000161e 	bne	r16,zero,cf30 <__adddf3+0x68c>
    ced8:	444ab03a 	or	r5,r8,r17
    cedc:	28005126 	beq	r5,zero,d024 <__adddf3+0x780>
    cee0:	0108303a 	nor	r4,zero,r4
    cee4:	20004d1e 	bne	r4,zero,d01c <__adddf3+0x778>
    cee8:	89a3883a 	add	r17,r17,r6
    ceec:	4253883a 	add	r9,r8,r9
    cef0:	898d803a 	cmpltu	r6,r17,r6
    cef4:	3251883a 	add	r8,r6,r9
    cef8:	1021883a 	mov	r16,r2
    cefc:	003f0806 	br	cb20 <__alt_data_end+0xff00cb20>
    cf00:	1000301e 	bne	r2,zero,cfc4 <__adddf3+0x720>
    cf04:	4984b03a 	or	r2,r9,r6
    cf08:	10007126 	beq	r2,zero,d0d0 <__adddf3+0x82c>
    cf0c:	4811883a 	mov	r8,r9
    cf10:	3023883a 	mov	r17,r6
    cf14:	3825883a 	mov	r18,r7
    cf18:	0401ffc4 	movi	r16,2047
    cf1c:	003e8006 	br	c920 <__alt_data_end+0xff00c920>
    cf20:	4462b03a 	or	r17,r8,r17
    cf24:	8822c03a 	cmpne	r17,r17,zero
    cf28:	0007883a 	mov	r3,zero
    cf2c:	003f8b06 	br	cd5c <__alt_data_end+0xff00cd5c>
    cf30:	0141ffc4 	movi	r5,2047
    cf34:	11403b26 	beq	r2,r5,d024 <__adddf3+0x780>
    cf38:	0109c83a 	sub	r4,zero,r4
    cf3c:	42002034 	orhi	r8,r8,128
    cf40:	01400e04 	movi	r5,56
    cf44:	29006716 	blt	r5,r4,d0e4 <__adddf3+0x840>
    cf48:	014007c4 	movi	r5,31
    cf4c:	29007016 	blt	r5,r4,d110 <__adddf3+0x86c>
    cf50:	01400804 	movi	r5,32
    cf54:	290bc83a 	sub	r5,r5,r4
    cf58:	4154983a 	sll	r10,r8,r5
    cf5c:	890ed83a 	srl	r7,r17,r4
    cf60:	894a983a 	sll	r5,r17,r5
    cf64:	4108d83a 	srl	r4,r8,r4
    cf68:	51e2b03a 	or	r17,r10,r7
    cf6c:	280ac03a 	cmpne	r5,r5,zero
    cf70:	8962b03a 	or	r17,r17,r5
    cf74:	89a3883a 	add	r17,r17,r6
    cf78:	2253883a 	add	r9,r4,r9
    cf7c:	898d803a 	cmpltu	r6,r17,r6
    cf80:	3251883a 	add	r8,r6,r9
    cf84:	1021883a 	mov	r16,r2
    cf88:	003ee506 	br	cb20 <__alt_data_end+0xff00cb20>
    cf8c:	4984b03a 	or	r2,r9,r6
    cf90:	103e6326 	beq	r2,zero,c920 <__alt_data_end+0xff00c920>
    cf94:	8987c83a 	sub	r3,r17,r6
    cf98:	88c9803a 	cmpltu	r4,r17,r3
    cf9c:	4245c83a 	sub	r2,r8,r9
    cfa0:	1105c83a 	sub	r2,r2,r4
    cfa4:	1100202c 	andhi	r4,r2,128
    cfa8:	203ebb26 	beq	r4,zero,ca98 <__alt_data_end+0xff00ca98>
    cfac:	3463c83a 	sub	r17,r6,r17
    cfb0:	4a07c83a 	sub	r3,r9,r8
    cfb4:	344d803a 	cmpltu	r6,r6,r17
    cfb8:	1991c83a 	sub	r8,r3,r6
    cfbc:	3825883a 	mov	r18,r7
    cfc0:	003e5706 	br	c920 <__alt_data_end+0xff00c920>
    cfc4:	4984b03a 	or	r2,r9,r6
    cfc8:	10002e26 	beq	r2,zero,d084 <__adddf3+0x7e0>
    cfcc:	4004d0fa 	srli	r2,r8,3
    cfd0:	8822d0fa 	srli	r17,r17,3
    cfd4:	4010977a 	slli	r8,r8,29
    cfd8:	10c0022c 	andhi	r3,r2,8
    cfdc:	4462b03a 	or	r17,r8,r17
    cfe0:	18000826 	beq	r3,zero,d004 <__adddf3+0x760>
    cfe4:	4808d0fa 	srli	r4,r9,3
    cfe8:	20c0022c 	andhi	r3,r4,8
    cfec:	1800051e 	bne	r3,zero,d004 <__adddf3+0x760>
    cff0:	300cd0fa 	srli	r6,r6,3
    cff4:	4806977a 	slli	r3,r9,29
    cff8:	2005883a 	mov	r2,r4
    cffc:	3825883a 	mov	r18,r7
    d000:	19a2b03a 	or	r17,r3,r6
    d004:	8810d77a 	srli	r8,r17,29
    d008:	100490fa 	slli	r2,r2,3
    d00c:	882290fa 	slli	r17,r17,3
    d010:	0401ffc4 	movi	r16,2047
    d014:	4090b03a 	or	r8,r8,r2
    d018:	003e4106 	br	c920 <__alt_data_end+0xff00c920>
    d01c:	0141ffc4 	movi	r5,2047
    d020:	117fc71e 	bne	r2,r5,cf40 <__alt_data_end+0xff00cf40>
    d024:	4811883a 	mov	r8,r9
    d028:	3023883a 	mov	r17,r6
    d02c:	1021883a 	mov	r16,r2
    d030:	003e3b06 	br	c920 <__alt_data_end+0xff00c920>
    d034:	10002f26 	beq	r2,zero,d0f4 <__adddf3+0x850>
    d038:	4984b03a 	or	r2,r9,r6
    d03c:	10001126 	beq	r2,zero,d084 <__adddf3+0x7e0>
    d040:	4004d0fa 	srli	r2,r8,3
    d044:	8822d0fa 	srli	r17,r17,3
    d048:	4010977a 	slli	r8,r8,29
    d04c:	10c0022c 	andhi	r3,r2,8
    d050:	4462b03a 	or	r17,r8,r17
    d054:	183feb26 	beq	r3,zero,d004 <__alt_data_end+0xff00d004>
    d058:	4808d0fa 	srli	r4,r9,3
    d05c:	20c0022c 	andhi	r3,r4,8
    d060:	183fe81e 	bne	r3,zero,d004 <__alt_data_end+0xff00d004>
    d064:	300cd0fa 	srli	r6,r6,3
    d068:	4806977a 	slli	r3,r9,29
    d06c:	2005883a 	mov	r2,r4
    d070:	19a2b03a 	or	r17,r3,r6
    d074:	003fe306 	br	d004 <__alt_data_end+0xff00d004>
    d078:	0011883a 	mov	r8,zero
    d07c:	0005883a 	mov	r2,zero
    d080:	003e3f06 	br	c980 <__alt_data_end+0xff00c980>
    d084:	0401ffc4 	movi	r16,2047
    d088:	003e2506 	br	c920 <__alt_data_end+0xff00c920>
    d08c:	0013883a 	mov	r9,zero
    d090:	003f8406 	br	cea4 <__alt_data_end+0xff00cea4>
    d094:	0005883a 	mov	r2,zero
    d098:	0007883a 	mov	r3,zero
    d09c:	003e8906 	br	cac4 <__alt_data_end+0xff00cac4>
    d0a0:	197ff804 	addi	r5,r3,-32
    d0a4:	01000804 	movi	r4,32
    d0a8:	414ad83a 	srl	r5,r8,r5
    d0ac:	19002426 	beq	r3,r4,d140 <__adddf3+0x89c>
    d0b0:	01001004 	movi	r4,64
    d0b4:	20c7c83a 	sub	r3,r4,r3
    d0b8:	40c6983a 	sll	r3,r8,r3
    d0bc:	1c46b03a 	or	r3,r3,r17
    d0c0:	1806c03a 	cmpne	r3,r3,zero
    d0c4:	28e2b03a 	or	r17,r5,r3
    d0c8:	0007883a 	mov	r3,zero
    d0cc:	003f2306 	br	cd5c <__alt_data_end+0xff00cd5c>
    d0d0:	0007883a 	mov	r3,zero
    d0d4:	5811883a 	mov	r8,r11
    d0d8:	00bfffc4 	movi	r2,-1
    d0dc:	0401ffc4 	movi	r16,2047
    d0e0:	003e7806 	br	cac4 <__alt_data_end+0xff00cac4>
    d0e4:	4462b03a 	or	r17,r8,r17
    d0e8:	8822c03a 	cmpne	r17,r17,zero
    d0ec:	0009883a 	mov	r4,zero
    d0f0:	003fa006 	br	cf74 <__alt_data_end+0xff00cf74>
    d0f4:	4811883a 	mov	r8,r9
    d0f8:	3023883a 	mov	r17,r6
    d0fc:	0401ffc4 	movi	r16,2047
    d100:	003e0706 	br	c920 <__alt_data_end+0xff00c920>
    d104:	4811883a 	mov	r8,r9
    d108:	3023883a 	mov	r17,r6
    d10c:	003e0406 	br	c920 <__alt_data_end+0xff00c920>
    d110:	21fff804 	addi	r7,r4,-32
    d114:	01400804 	movi	r5,32
    d118:	41ced83a 	srl	r7,r8,r7
    d11c:	21400a26 	beq	r4,r5,d148 <__adddf3+0x8a4>
    d120:	01401004 	movi	r5,64
    d124:	2909c83a 	sub	r4,r5,r4
    d128:	4108983a 	sll	r4,r8,r4
    d12c:	2448b03a 	or	r4,r4,r17
    d130:	2008c03a 	cmpne	r4,r4,zero
    d134:	3922b03a 	or	r17,r7,r4
    d138:	0009883a 	mov	r4,zero
    d13c:	003f8d06 	br	cf74 <__alt_data_end+0xff00cf74>
    d140:	0007883a 	mov	r3,zero
    d144:	003fdd06 	br	d0bc <__alt_data_end+0xff00d0bc>
    d148:	0009883a 	mov	r4,zero
    d14c:	003ff706 	br	d12c <__alt_data_end+0xff00d12c>

0000d150 <__eqdf2>:
    d150:	2804d53a 	srli	r2,r5,20
    d154:	3806d53a 	srli	r3,r7,20
    d158:	02000434 	movhi	r8,16
    d15c:	423fffc4 	addi	r8,r8,-1
    d160:	1081ffcc 	andi	r2,r2,2047
    d164:	0281ffc4 	movi	r10,2047
    d168:	2a12703a 	and	r9,r5,r8
    d16c:	18c1ffcc 	andi	r3,r3,2047
    d170:	3a10703a 	and	r8,r7,r8
    d174:	280ad7fa 	srli	r5,r5,31
    d178:	380ed7fa 	srli	r7,r7,31
    d17c:	12801026 	beq	r2,r10,d1c0 <__eqdf2+0x70>
    d180:	0281ffc4 	movi	r10,2047
    d184:	1a800a26 	beq	r3,r10,d1b0 <__eqdf2+0x60>
    d188:	10c00226 	beq	r2,r3,d194 <__eqdf2+0x44>
    d18c:	00800044 	movi	r2,1
    d190:	f800283a 	ret
    d194:	4a3ffd1e 	bne	r9,r8,d18c <__alt_data_end+0xff00d18c>
    d198:	21bffc1e 	bne	r4,r6,d18c <__alt_data_end+0xff00d18c>
    d19c:	29c00c26 	beq	r5,r7,d1d0 <__eqdf2+0x80>
    d1a0:	103ffa1e 	bne	r2,zero,d18c <__alt_data_end+0xff00d18c>
    d1a4:	2244b03a 	or	r2,r4,r9
    d1a8:	1004c03a 	cmpne	r2,r2,zero
    d1ac:	f800283a 	ret
    d1b0:	3214b03a 	or	r10,r6,r8
    d1b4:	503ff426 	beq	r10,zero,d188 <__alt_data_end+0xff00d188>
    d1b8:	00800044 	movi	r2,1
    d1bc:	f800283a 	ret
    d1c0:	2254b03a 	or	r10,r4,r9
    d1c4:	503fee26 	beq	r10,zero,d180 <__alt_data_end+0xff00d180>
    d1c8:	00800044 	movi	r2,1
    d1cc:	f800283a 	ret
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	f800283a 	ret

0000d1d8 <__gedf2>:
    d1d8:	2804d53a 	srli	r2,r5,20
    d1dc:	3806d53a 	srli	r3,r7,20
    d1e0:	02000434 	movhi	r8,16
    d1e4:	423fffc4 	addi	r8,r8,-1
    d1e8:	1081ffcc 	andi	r2,r2,2047
    d1ec:	0241ffc4 	movi	r9,2047
    d1f0:	2a14703a 	and	r10,r5,r8
    d1f4:	18c1ffcc 	andi	r3,r3,2047
    d1f8:	3a10703a 	and	r8,r7,r8
    d1fc:	280ad7fa 	srli	r5,r5,31
    d200:	380ed7fa 	srli	r7,r7,31
    d204:	12401d26 	beq	r2,r9,d27c <__gedf2+0xa4>
    d208:	0241ffc4 	movi	r9,2047
    d20c:	1a401226 	beq	r3,r9,d258 <__gedf2+0x80>
    d210:	1000081e 	bne	r2,zero,d234 <__gedf2+0x5c>
    d214:	2296b03a 	or	r11,r4,r10
    d218:	5813003a 	cmpeq	r9,r11,zero
    d21c:	1800091e 	bne	r3,zero,d244 <__gedf2+0x6c>
    d220:	3218b03a 	or	r12,r6,r8
    d224:	6000071e 	bne	r12,zero,d244 <__gedf2+0x6c>
    d228:	0005883a 	mov	r2,zero
    d22c:	5800101e 	bne	r11,zero,d270 <__gedf2+0x98>
    d230:	f800283a 	ret
    d234:	18000c1e 	bne	r3,zero,d268 <__gedf2+0x90>
    d238:	3212b03a 	or	r9,r6,r8
    d23c:	48000c26 	beq	r9,zero,d270 <__gedf2+0x98>
    d240:	0013883a 	mov	r9,zero
    d244:	39c03fcc 	andi	r7,r7,255
    d248:	48000826 	beq	r9,zero,d26c <__gedf2+0x94>
    d24c:	38000926 	beq	r7,zero,d274 <__gedf2+0x9c>
    d250:	00800044 	movi	r2,1
    d254:	f800283a 	ret
    d258:	3212b03a 	or	r9,r6,r8
    d25c:	483fec26 	beq	r9,zero,d210 <__alt_data_end+0xff00d210>
    d260:	00bfff84 	movi	r2,-2
    d264:	f800283a 	ret
    d268:	39c03fcc 	andi	r7,r7,255
    d26c:	29c00626 	beq	r5,r7,d288 <__gedf2+0xb0>
    d270:	283ff726 	beq	r5,zero,d250 <__alt_data_end+0xff00d250>
    d274:	00bfffc4 	movi	r2,-1
    d278:	f800283a 	ret
    d27c:	2292b03a 	or	r9,r4,r10
    d280:	483fe126 	beq	r9,zero,d208 <__alt_data_end+0xff00d208>
    d284:	003ff606 	br	d260 <__alt_data_end+0xff00d260>
    d288:	18bff916 	blt	r3,r2,d270 <__alt_data_end+0xff00d270>
    d28c:	10c00316 	blt	r2,r3,d29c <__gedf2+0xc4>
    d290:	42bff736 	bltu	r8,r10,d270 <__alt_data_end+0xff00d270>
    d294:	52000326 	beq	r10,r8,d2a4 <__gedf2+0xcc>
    d298:	5200042e 	bgeu	r10,r8,d2ac <__gedf2+0xd4>
    d29c:	283fec1e 	bne	r5,zero,d250 <__alt_data_end+0xff00d250>
    d2a0:	003ff406 	br	d274 <__alt_data_end+0xff00d274>
    d2a4:	313ff236 	bltu	r6,r4,d270 <__alt_data_end+0xff00d270>
    d2a8:	21bffc36 	bltu	r4,r6,d29c <__alt_data_end+0xff00d29c>
    d2ac:	0005883a 	mov	r2,zero
    d2b0:	f800283a 	ret

0000d2b4 <__ledf2>:
    d2b4:	2804d53a 	srli	r2,r5,20
    d2b8:	3810d53a 	srli	r8,r7,20
    d2bc:	00c00434 	movhi	r3,16
    d2c0:	18ffffc4 	addi	r3,r3,-1
    d2c4:	1081ffcc 	andi	r2,r2,2047
    d2c8:	0241ffc4 	movi	r9,2047
    d2cc:	28d4703a 	and	r10,r5,r3
    d2d0:	4201ffcc 	andi	r8,r8,2047
    d2d4:	38c6703a 	and	r3,r7,r3
    d2d8:	280ad7fa 	srli	r5,r5,31
    d2dc:	380ed7fa 	srli	r7,r7,31
    d2e0:	12401f26 	beq	r2,r9,d360 <__ledf2+0xac>
    d2e4:	0241ffc4 	movi	r9,2047
    d2e8:	42401426 	beq	r8,r9,d33c <__ledf2+0x88>
    d2ec:	1000091e 	bne	r2,zero,d314 <__ledf2+0x60>
    d2f0:	2296b03a 	or	r11,r4,r10
    d2f4:	5813003a 	cmpeq	r9,r11,zero
    d2f8:	29403fcc 	andi	r5,r5,255
    d2fc:	40000a1e 	bne	r8,zero,d328 <__ledf2+0x74>
    d300:	30d8b03a 	or	r12,r6,r3
    d304:	6000081e 	bne	r12,zero,d328 <__ledf2+0x74>
    d308:	0005883a 	mov	r2,zero
    d30c:	5800111e 	bne	r11,zero,d354 <__ledf2+0xa0>
    d310:	f800283a 	ret
    d314:	29403fcc 	andi	r5,r5,255
    d318:	40000c1e 	bne	r8,zero,d34c <__ledf2+0x98>
    d31c:	30d2b03a 	or	r9,r6,r3
    d320:	48000c26 	beq	r9,zero,d354 <__ledf2+0xa0>
    d324:	0013883a 	mov	r9,zero
    d328:	39c03fcc 	andi	r7,r7,255
    d32c:	48000826 	beq	r9,zero,d350 <__ledf2+0x9c>
    d330:	38001126 	beq	r7,zero,d378 <__ledf2+0xc4>
    d334:	00800044 	movi	r2,1
    d338:	f800283a 	ret
    d33c:	30d2b03a 	or	r9,r6,r3
    d340:	483fea26 	beq	r9,zero,d2ec <__alt_data_end+0xff00d2ec>
    d344:	00800084 	movi	r2,2
    d348:	f800283a 	ret
    d34c:	39c03fcc 	andi	r7,r7,255
    d350:	39400726 	beq	r7,r5,d370 <__ledf2+0xbc>
    d354:	2800081e 	bne	r5,zero,d378 <__ledf2+0xc4>
    d358:	00800044 	movi	r2,1
    d35c:	f800283a 	ret
    d360:	2292b03a 	or	r9,r4,r10
    d364:	483fdf26 	beq	r9,zero,d2e4 <__alt_data_end+0xff00d2e4>
    d368:	00800084 	movi	r2,2
    d36c:	f800283a 	ret
    d370:	4080030e 	bge	r8,r2,d380 <__ledf2+0xcc>
    d374:	383fef26 	beq	r7,zero,d334 <__alt_data_end+0xff00d334>
    d378:	00bfffc4 	movi	r2,-1
    d37c:	f800283a 	ret
    d380:	123feb16 	blt	r2,r8,d330 <__alt_data_end+0xff00d330>
    d384:	1abff336 	bltu	r3,r10,d354 <__alt_data_end+0xff00d354>
    d388:	50c00326 	beq	r10,r3,d398 <__ledf2+0xe4>
    d38c:	50c0042e 	bgeu	r10,r3,d3a0 <__ledf2+0xec>
    d390:	283fe81e 	bne	r5,zero,d334 <__alt_data_end+0xff00d334>
    d394:	003ff806 	br	d378 <__alt_data_end+0xff00d378>
    d398:	313fee36 	bltu	r6,r4,d354 <__alt_data_end+0xff00d354>
    d39c:	21bffc36 	bltu	r4,r6,d390 <__alt_data_end+0xff00d390>
    d3a0:	0005883a 	mov	r2,zero
    d3a4:	f800283a 	ret

0000d3a8 <__muldf3>:
    d3a8:	defff304 	addi	sp,sp,-52
    d3ac:	2804d53a 	srli	r2,r5,20
    d3b0:	dd800915 	stw	r22,36(sp)
    d3b4:	282cd7fa 	srli	r22,r5,31
    d3b8:	dc000315 	stw	r16,12(sp)
    d3bc:	04000434 	movhi	r16,16
    d3c0:	dd400815 	stw	r21,32(sp)
    d3c4:	dc800515 	stw	r18,20(sp)
    d3c8:	843fffc4 	addi	r16,r16,-1
    d3cc:	dfc00c15 	stw	ra,48(sp)
    d3d0:	df000b15 	stw	fp,44(sp)
    d3d4:	ddc00a15 	stw	r23,40(sp)
    d3d8:	dd000715 	stw	r20,28(sp)
    d3dc:	dcc00615 	stw	r19,24(sp)
    d3e0:	dc400415 	stw	r17,16(sp)
    d3e4:	1481ffcc 	andi	r18,r2,2047
    d3e8:	2c20703a 	and	r16,r5,r16
    d3ec:	b02b883a 	mov	r21,r22
    d3f0:	b2403fcc 	andi	r9,r22,255
    d3f4:	90006026 	beq	r18,zero,d578 <__muldf3+0x1d0>
    d3f8:	0081ffc4 	movi	r2,2047
    d3fc:	2029883a 	mov	r20,r4
    d400:	90803626 	beq	r18,r2,d4dc <__muldf3+0x134>
    d404:	80800434 	orhi	r2,r16,16
    d408:	100490fa 	slli	r2,r2,3
    d40c:	2020d77a 	srli	r16,r4,29
    d410:	202890fa 	slli	r20,r4,3
    d414:	94bf0044 	addi	r18,r18,-1023
    d418:	80a0b03a 	or	r16,r16,r2
    d41c:	0027883a 	mov	r19,zero
    d420:	0039883a 	mov	fp,zero
    d424:	3804d53a 	srli	r2,r7,20
    d428:	382ed7fa 	srli	r23,r7,31
    d42c:	04400434 	movhi	r17,16
    d430:	8c7fffc4 	addi	r17,r17,-1
    d434:	1081ffcc 	andi	r2,r2,2047
    d438:	3011883a 	mov	r8,r6
    d43c:	3c62703a 	and	r17,r7,r17
    d440:	ba803fcc 	andi	r10,r23,255
    d444:	10006d26 	beq	r2,zero,d5fc <__muldf3+0x254>
    d448:	00c1ffc4 	movi	r3,2047
    d44c:	10c06526 	beq	r2,r3,d5e4 <__muldf3+0x23c>
    d450:	88c00434 	orhi	r3,r17,16
    d454:	180690fa 	slli	r3,r3,3
    d458:	3022d77a 	srli	r17,r6,29
    d45c:	301090fa 	slli	r8,r6,3
    d460:	10bf0044 	addi	r2,r2,-1023
    d464:	88e2b03a 	or	r17,r17,r3
    d468:	000b883a 	mov	r5,zero
    d46c:	9085883a 	add	r2,r18,r2
    d470:	2cc8b03a 	or	r4,r5,r19
    d474:	00c003c4 	movi	r3,15
    d478:	bdacf03a 	xor	r22,r23,r22
    d47c:	12c00044 	addi	r11,r2,1
    d480:	19009936 	bltu	r3,r4,d6e8 <__muldf3+0x340>
    d484:	200890ba 	slli	r4,r4,2
    d488:	00c00074 	movhi	r3,1
    d48c:	18f52704 	addi	r3,r3,-11108
    d490:	20c9883a 	add	r4,r4,r3
    d494:	20c00017 	ldw	r3,0(r4)
    d498:	1800683a 	jmp	r3
    d49c:	0000d6e8 	cmpgeui	zero,zero,859
    d4a0:	0000d4fc 	xorhi	zero,zero,851
    d4a4:	0000d4fc 	xorhi	zero,zero,851
    d4a8:	0000d4f8 	rdprs	zero,zero,851
    d4ac:	0000d6c4 	movi	zero,859
    d4b0:	0000d6c4 	movi	zero,859
    d4b4:	0000d6ac 	andhi	zero,zero,858
    d4b8:	0000d4f8 	rdprs	zero,zero,851
    d4bc:	0000d6c4 	movi	zero,859
    d4c0:	0000d6ac 	andhi	zero,zero,858
    d4c4:	0000d6c4 	movi	zero,859
    d4c8:	0000d4f8 	rdprs	zero,zero,851
    d4cc:	0000d6d4 	movui	zero,859
    d4d0:	0000d6d4 	movui	zero,859
    d4d4:	0000d6d4 	movui	zero,859
    d4d8:	0000d8f0 	cmpltui	zero,zero,867
    d4dc:	2404b03a 	or	r2,r4,r16
    d4e0:	10006f1e 	bne	r2,zero,d6a0 <__muldf3+0x2f8>
    d4e4:	04c00204 	movi	r19,8
    d4e8:	0021883a 	mov	r16,zero
    d4ec:	0029883a 	mov	r20,zero
    d4f0:	07000084 	movi	fp,2
    d4f4:	003fcb06 	br	d424 <__alt_data_end+0xff00d424>
    d4f8:	502d883a 	mov	r22,r10
    d4fc:	00800084 	movi	r2,2
    d500:	28805726 	beq	r5,r2,d660 <__muldf3+0x2b8>
    d504:	008000c4 	movi	r2,3
    d508:	28816626 	beq	r5,r2,daa4 <__muldf3+0x6fc>
    d50c:	00800044 	movi	r2,1
    d510:	2881411e 	bne	r5,r2,da18 <__muldf3+0x670>
    d514:	b02b883a 	mov	r21,r22
    d518:	0005883a 	mov	r2,zero
    d51c:	000b883a 	mov	r5,zero
    d520:	0029883a 	mov	r20,zero
    d524:	1004953a 	slli	r2,r2,20
    d528:	a8c03fcc 	andi	r3,r21,255
    d52c:	04400434 	movhi	r17,16
    d530:	8c7fffc4 	addi	r17,r17,-1
    d534:	180697fa 	slli	r3,r3,31
    d538:	2c4a703a 	and	r5,r5,r17
    d53c:	288ab03a 	or	r5,r5,r2
    d540:	28c6b03a 	or	r3,r5,r3
    d544:	a005883a 	mov	r2,r20
    d548:	dfc00c17 	ldw	ra,48(sp)
    d54c:	df000b17 	ldw	fp,44(sp)
    d550:	ddc00a17 	ldw	r23,40(sp)
    d554:	dd800917 	ldw	r22,36(sp)
    d558:	dd400817 	ldw	r21,32(sp)
    d55c:	dd000717 	ldw	r20,28(sp)
    d560:	dcc00617 	ldw	r19,24(sp)
    d564:	dc800517 	ldw	r18,20(sp)
    d568:	dc400417 	ldw	r17,16(sp)
    d56c:	dc000317 	ldw	r16,12(sp)
    d570:	dec00d04 	addi	sp,sp,52
    d574:	f800283a 	ret
    d578:	2404b03a 	or	r2,r4,r16
    d57c:	2027883a 	mov	r19,r4
    d580:	10004226 	beq	r2,zero,d68c <__muldf3+0x2e4>
    d584:	8000fc26 	beq	r16,zero,d978 <__muldf3+0x5d0>
    d588:	8009883a 	mov	r4,r16
    d58c:	d9800215 	stw	r6,8(sp)
    d590:	d9c00015 	stw	r7,0(sp)
    d594:	da400115 	stw	r9,4(sp)
    d598:	00027140 	call	2714 <__clzsi2>
    d59c:	d9800217 	ldw	r6,8(sp)
    d5a0:	d9c00017 	ldw	r7,0(sp)
    d5a4:	da400117 	ldw	r9,4(sp)
    d5a8:	113ffd44 	addi	r4,r2,-11
    d5ac:	00c00704 	movi	r3,28
    d5b0:	1900ed16 	blt	r3,r4,d968 <__muldf3+0x5c0>
    d5b4:	00c00744 	movi	r3,29
    d5b8:	147ffe04 	addi	r17,r2,-8
    d5bc:	1907c83a 	sub	r3,r3,r4
    d5c0:	8460983a 	sll	r16,r16,r17
    d5c4:	98c6d83a 	srl	r3,r19,r3
    d5c8:	9c68983a 	sll	r20,r19,r17
    d5cc:	1c20b03a 	or	r16,r3,r16
    d5d0:	1080fcc4 	addi	r2,r2,1011
    d5d4:	00a5c83a 	sub	r18,zero,r2
    d5d8:	0027883a 	mov	r19,zero
    d5dc:	0039883a 	mov	fp,zero
    d5e0:	003f9006 	br	d424 <__alt_data_end+0xff00d424>
    d5e4:	3446b03a 	or	r3,r6,r17
    d5e8:	1800261e 	bne	r3,zero,d684 <__muldf3+0x2dc>
    d5ec:	0023883a 	mov	r17,zero
    d5f0:	0011883a 	mov	r8,zero
    d5f4:	01400084 	movi	r5,2
    d5f8:	003f9c06 	br	d46c <__alt_data_end+0xff00d46c>
    d5fc:	3446b03a 	or	r3,r6,r17
    d600:	18001c26 	beq	r3,zero,d674 <__muldf3+0x2cc>
    d604:	8800ce26 	beq	r17,zero,d940 <__muldf3+0x598>
    d608:	8809883a 	mov	r4,r17
    d60c:	d9800215 	stw	r6,8(sp)
    d610:	da400115 	stw	r9,4(sp)
    d614:	da800015 	stw	r10,0(sp)
    d618:	00027140 	call	2714 <__clzsi2>
    d61c:	d9800217 	ldw	r6,8(sp)
    d620:	da400117 	ldw	r9,4(sp)
    d624:	da800017 	ldw	r10,0(sp)
    d628:	113ffd44 	addi	r4,r2,-11
    d62c:	00c00704 	movi	r3,28
    d630:	1900bf16 	blt	r3,r4,d930 <__muldf3+0x588>
    d634:	00c00744 	movi	r3,29
    d638:	123ffe04 	addi	r8,r2,-8
    d63c:	1907c83a 	sub	r3,r3,r4
    d640:	8a22983a 	sll	r17,r17,r8
    d644:	30c6d83a 	srl	r3,r6,r3
    d648:	3210983a 	sll	r8,r6,r8
    d64c:	1c62b03a 	or	r17,r3,r17
    d650:	1080fcc4 	addi	r2,r2,1011
    d654:	0085c83a 	sub	r2,zero,r2
    d658:	000b883a 	mov	r5,zero
    d65c:	003f8306 	br	d46c <__alt_data_end+0xff00d46c>
    d660:	b02b883a 	mov	r21,r22
    d664:	0081ffc4 	movi	r2,2047
    d668:	000b883a 	mov	r5,zero
    d66c:	0029883a 	mov	r20,zero
    d670:	003fac06 	br	d524 <__alt_data_end+0xff00d524>
    d674:	0023883a 	mov	r17,zero
    d678:	0011883a 	mov	r8,zero
    d67c:	01400044 	movi	r5,1
    d680:	003f7a06 	br	d46c <__alt_data_end+0xff00d46c>
    d684:	014000c4 	movi	r5,3
    d688:	003f7806 	br	d46c <__alt_data_end+0xff00d46c>
    d68c:	04c00104 	movi	r19,4
    d690:	0021883a 	mov	r16,zero
    d694:	0029883a 	mov	r20,zero
    d698:	07000044 	movi	fp,1
    d69c:	003f6106 	br	d424 <__alt_data_end+0xff00d424>
    d6a0:	04c00304 	movi	r19,12
    d6a4:	070000c4 	movi	fp,3
    d6a8:	003f5e06 	br	d424 <__alt_data_end+0xff00d424>
    d6ac:	01400434 	movhi	r5,16
    d6b0:	002b883a 	mov	r21,zero
    d6b4:	297fffc4 	addi	r5,r5,-1
    d6b8:	053fffc4 	movi	r20,-1
    d6bc:	0081ffc4 	movi	r2,2047
    d6c0:	003f9806 	br	d524 <__alt_data_end+0xff00d524>
    d6c4:	8023883a 	mov	r17,r16
    d6c8:	a011883a 	mov	r8,r20
    d6cc:	e00b883a 	mov	r5,fp
    d6d0:	003f8a06 	br	d4fc <__alt_data_end+0xff00d4fc>
    d6d4:	8023883a 	mov	r17,r16
    d6d8:	a011883a 	mov	r8,r20
    d6dc:	482d883a 	mov	r22,r9
    d6e0:	e00b883a 	mov	r5,fp
    d6e4:	003f8506 	br	d4fc <__alt_data_end+0xff00d4fc>
    d6e8:	a00ad43a 	srli	r5,r20,16
    d6ec:	401ad43a 	srli	r13,r8,16
    d6f0:	a53fffcc 	andi	r20,r20,65535
    d6f4:	423fffcc 	andi	r8,r8,65535
    d6f8:	4519383a 	mul	r12,r8,r20
    d6fc:	4147383a 	mul	r3,r8,r5
    d700:	6d09383a 	mul	r4,r13,r20
    d704:	600cd43a 	srli	r6,r12,16
    d708:	2b5d383a 	mul	r14,r5,r13
    d70c:	20c9883a 	add	r4,r4,r3
    d710:	310d883a 	add	r6,r6,r4
    d714:	30c0022e 	bgeu	r6,r3,d720 <__muldf3+0x378>
    d718:	00c00074 	movhi	r3,1
    d71c:	70dd883a 	add	r14,r14,r3
    d720:	8826d43a 	srli	r19,r17,16
    d724:	8bffffcc 	andi	r15,r17,65535
    d728:	7d23383a 	mul	r17,r15,r20
    d72c:	7949383a 	mul	r4,r15,r5
    d730:	9d29383a 	mul	r20,r19,r20
    d734:	8814d43a 	srli	r10,r17,16
    d738:	3012943a 	slli	r9,r6,16
    d73c:	a129883a 	add	r20,r20,r4
    d740:	633fffcc 	andi	r12,r12,65535
    d744:	5515883a 	add	r10,r10,r20
    d748:	3006d43a 	srli	r3,r6,16
    d74c:	4b13883a 	add	r9,r9,r12
    d750:	2ccb383a 	mul	r5,r5,r19
    d754:	5100022e 	bgeu	r10,r4,d760 <__muldf3+0x3b8>
    d758:	01000074 	movhi	r4,1
    d75c:	290b883a 	add	r5,r5,r4
    d760:	802ad43a 	srli	r21,r16,16
    d764:	843fffcc 	andi	r16,r16,65535
    d768:	440d383a 	mul	r6,r8,r16
    d76c:	4565383a 	mul	r18,r8,r21
    d770:	8349383a 	mul	r4,r16,r13
    d774:	500e943a 	slli	r7,r10,16
    d778:	3010d43a 	srli	r8,r6,16
    d77c:	5028d43a 	srli	r20,r10,16
    d780:	2489883a 	add	r4,r4,r18
    d784:	8abfffcc 	andi	r10,r17,65535
    d788:	3a95883a 	add	r10,r7,r10
    d78c:	4119883a 	add	r12,r8,r4
    d790:	a169883a 	add	r20,r20,r5
    d794:	1a87883a 	add	r3,r3,r10
    d798:	6d5b383a 	mul	r13,r13,r21
    d79c:	6480022e 	bgeu	r12,r18,d7a8 <__muldf3+0x400>
    d7a0:	01000074 	movhi	r4,1
    d7a4:	691b883a 	add	r13,r13,r4
    d7a8:	7c25383a 	mul	r18,r15,r16
    d7ac:	7d4b383a 	mul	r5,r15,r21
    d7b0:	84cf383a 	mul	r7,r16,r19
    d7b4:	901ed43a 	srli	r15,r18,16
    d7b8:	6008d43a 	srli	r4,r12,16
    d7bc:	6010943a 	slli	r8,r12,16
    d7c0:	394f883a 	add	r7,r7,r5
    d7c4:	333fffcc 	andi	r12,r6,65535
    d7c8:	79df883a 	add	r15,r15,r7
    d7cc:	235b883a 	add	r13,r4,r13
    d7d0:	9d63383a 	mul	r17,r19,r21
    d7d4:	4309883a 	add	r4,r8,r12
    d7d8:	7940022e 	bgeu	r15,r5,d7e4 <__muldf3+0x43c>
    d7dc:	01400074 	movhi	r5,1
    d7e0:	8963883a 	add	r17,r17,r5
    d7e4:	780a943a 	slli	r5,r15,16
    d7e8:	91bfffcc 	andi	r6,r18,65535
    d7ec:	70c7883a 	add	r3,r14,r3
    d7f0:	298d883a 	add	r6,r5,r6
    d7f4:	1a8f803a 	cmpltu	r7,r3,r10
    d7f8:	350b883a 	add	r5,r6,r20
    d7fc:	20c7883a 	add	r3,r4,r3
    d800:	3955883a 	add	r10,r7,r5
    d804:	1909803a 	cmpltu	r4,r3,r4
    d808:	6a91883a 	add	r8,r13,r10
    d80c:	780cd43a 	srli	r6,r15,16
    d810:	2219883a 	add	r12,r4,r8
    d814:	2d0b803a 	cmpltu	r5,r5,r20
    d818:	51cf803a 	cmpltu	r7,r10,r7
    d81c:	29ceb03a 	or	r7,r5,r7
    d820:	4351803a 	cmpltu	r8,r8,r13
    d824:	610b803a 	cmpltu	r5,r12,r4
    d828:	4148b03a 	or	r4,r8,r5
    d82c:	398f883a 	add	r7,r7,r6
    d830:	3909883a 	add	r4,r7,r4
    d834:	1810927a 	slli	r8,r3,9
    d838:	2449883a 	add	r4,r4,r17
    d83c:	2008927a 	slli	r4,r4,9
    d840:	6022d5fa 	srli	r17,r12,23
    d844:	1806d5fa 	srli	r3,r3,23
    d848:	4252b03a 	or	r9,r8,r9
    d84c:	600a927a 	slli	r5,r12,9
    d850:	4810c03a 	cmpne	r8,r9,zero
    d854:	2462b03a 	or	r17,r4,r17
    d858:	40c6b03a 	or	r3,r8,r3
    d85c:	8900402c 	andhi	r4,r17,256
    d860:	1950b03a 	or	r8,r3,r5
    d864:	20000726 	beq	r4,zero,d884 <__muldf3+0x4dc>
    d868:	4006d07a 	srli	r3,r8,1
    d86c:	880497fa 	slli	r2,r17,31
    d870:	4200004c 	andi	r8,r8,1
    d874:	8822d07a 	srli	r17,r17,1
    d878:	1a10b03a 	or	r8,r3,r8
    d87c:	1210b03a 	or	r8,r2,r8
    d880:	5805883a 	mov	r2,r11
    d884:	1140ffc4 	addi	r5,r2,1023
    d888:	0140440e 	bge	zero,r5,d99c <__muldf3+0x5f4>
    d88c:	40c001cc 	andi	r3,r8,7
    d890:	18000726 	beq	r3,zero,d8b0 <__muldf3+0x508>
    d894:	40c003cc 	andi	r3,r8,15
    d898:	01000104 	movi	r4,4
    d89c:	19000426 	beq	r3,r4,d8b0 <__muldf3+0x508>
    d8a0:	4107883a 	add	r3,r8,r4
    d8a4:	1a11803a 	cmpltu	r8,r3,r8
    d8a8:	8a23883a 	add	r17,r17,r8
    d8ac:	1811883a 	mov	r8,r3
    d8b0:	88c0402c 	andhi	r3,r17,256
    d8b4:	18000426 	beq	r3,zero,d8c8 <__muldf3+0x520>
    d8b8:	11410004 	addi	r5,r2,1024
    d8bc:	00bfc034 	movhi	r2,65280
    d8c0:	10bfffc4 	addi	r2,r2,-1
    d8c4:	88a2703a 	and	r17,r17,r2
    d8c8:	0081ff84 	movi	r2,2046
    d8cc:	117f6416 	blt	r2,r5,d660 <__alt_data_end+0xff00d660>
    d8d0:	8828977a 	slli	r20,r17,29
    d8d4:	4010d0fa 	srli	r8,r8,3
    d8d8:	8822927a 	slli	r17,r17,9
    d8dc:	2881ffcc 	andi	r2,r5,2047
    d8e0:	a228b03a 	or	r20,r20,r8
    d8e4:	880ad33a 	srli	r5,r17,12
    d8e8:	b02b883a 	mov	r21,r22
    d8ec:	003f0d06 	br	d524 <__alt_data_end+0xff00d524>
    d8f0:	8080022c 	andhi	r2,r16,8
    d8f4:	10000926 	beq	r2,zero,d91c <__muldf3+0x574>
    d8f8:	8880022c 	andhi	r2,r17,8
    d8fc:	1000071e 	bne	r2,zero,d91c <__muldf3+0x574>
    d900:	00800434 	movhi	r2,16
    d904:	89400234 	orhi	r5,r17,8
    d908:	10bfffc4 	addi	r2,r2,-1
    d90c:	b82b883a 	mov	r21,r23
    d910:	288a703a 	and	r5,r5,r2
    d914:	4029883a 	mov	r20,r8
    d918:	003f6806 	br	d6bc <__alt_data_end+0xff00d6bc>
    d91c:	00800434 	movhi	r2,16
    d920:	81400234 	orhi	r5,r16,8
    d924:	10bfffc4 	addi	r2,r2,-1
    d928:	288a703a 	and	r5,r5,r2
    d92c:	003f6306 	br	d6bc <__alt_data_end+0xff00d6bc>
    d930:	147ff604 	addi	r17,r2,-40
    d934:	3462983a 	sll	r17,r6,r17
    d938:	0011883a 	mov	r8,zero
    d93c:	003f4406 	br	d650 <__alt_data_end+0xff00d650>
    d940:	3009883a 	mov	r4,r6
    d944:	d9800215 	stw	r6,8(sp)
    d948:	da400115 	stw	r9,4(sp)
    d94c:	da800015 	stw	r10,0(sp)
    d950:	00027140 	call	2714 <__clzsi2>
    d954:	10800804 	addi	r2,r2,32
    d958:	da800017 	ldw	r10,0(sp)
    d95c:	da400117 	ldw	r9,4(sp)
    d960:	d9800217 	ldw	r6,8(sp)
    d964:	003f3006 	br	d628 <__alt_data_end+0xff00d628>
    d968:	143ff604 	addi	r16,r2,-40
    d96c:	9c20983a 	sll	r16,r19,r16
    d970:	0029883a 	mov	r20,zero
    d974:	003f1606 	br	d5d0 <__alt_data_end+0xff00d5d0>
    d978:	d9800215 	stw	r6,8(sp)
    d97c:	d9c00015 	stw	r7,0(sp)
    d980:	da400115 	stw	r9,4(sp)
    d984:	00027140 	call	2714 <__clzsi2>
    d988:	10800804 	addi	r2,r2,32
    d98c:	da400117 	ldw	r9,4(sp)
    d990:	d9c00017 	ldw	r7,0(sp)
    d994:	d9800217 	ldw	r6,8(sp)
    d998:	003f0306 	br	d5a8 <__alt_data_end+0xff00d5a8>
    d99c:	00c00044 	movi	r3,1
    d9a0:	1947c83a 	sub	r3,r3,r5
    d9a4:	00800e04 	movi	r2,56
    d9a8:	10feda16 	blt	r2,r3,d514 <__alt_data_end+0xff00d514>
    d9ac:	008007c4 	movi	r2,31
    d9b0:	10c01b16 	blt	r2,r3,da20 <__muldf3+0x678>
    d9b4:	00800804 	movi	r2,32
    d9b8:	10c5c83a 	sub	r2,r2,r3
    d9bc:	888a983a 	sll	r5,r17,r2
    d9c0:	40c8d83a 	srl	r4,r8,r3
    d9c4:	4084983a 	sll	r2,r8,r2
    d9c8:	88e2d83a 	srl	r17,r17,r3
    d9cc:	2906b03a 	or	r3,r5,r4
    d9d0:	1004c03a 	cmpne	r2,r2,zero
    d9d4:	1886b03a 	or	r3,r3,r2
    d9d8:	188001cc 	andi	r2,r3,7
    d9dc:	10000726 	beq	r2,zero,d9fc <__muldf3+0x654>
    d9e0:	188003cc 	andi	r2,r3,15
    d9e4:	01000104 	movi	r4,4
    d9e8:	11000426 	beq	r2,r4,d9fc <__muldf3+0x654>
    d9ec:	1805883a 	mov	r2,r3
    d9f0:	10c00104 	addi	r3,r2,4
    d9f4:	1885803a 	cmpltu	r2,r3,r2
    d9f8:	88a3883a 	add	r17,r17,r2
    d9fc:	8880202c 	andhi	r2,r17,128
    da00:	10001c26 	beq	r2,zero,da74 <__muldf3+0x6cc>
    da04:	b02b883a 	mov	r21,r22
    da08:	00800044 	movi	r2,1
    da0c:	000b883a 	mov	r5,zero
    da10:	0029883a 	mov	r20,zero
    da14:	003ec306 	br	d524 <__alt_data_end+0xff00d524>
    da18:	5805883a 	mov	r2,r11
    da1c:	003f9906 	br	d884 <__alt_data_end+0xff00d884>
    da20:	00bff844 	movi	r2,-31
    da24:	1145c83a 	sub	r2,r2,r5
    da28:	8888d83a 	srl	r4,r17,r2
    da2c:	00800804 	movi	r2,32
    da30:	18801a26 	beq	r3,r2,da9c <__muldf3+0x6f4>
    da34:	00801004 	movi	r2,64
    da38:	10c5c83a 	sub	r2,r2,r3
    da3c:	8884983a 	sll	r2,r17,r2
    da40:	1204b03a 	or	r2,r2,r8
    da44:	1004c03a 	cmpne	r2,r2,zero
    da48:	2084b03a 	or	r2,r4,r2
    da4c:	144001cc 	andi	r17,r2,7
    da50:	88000d1e 	bne	r17,zero,da88 <__muldf3+0x6e0>
    da54:	000b883a 	mov	r5,zero
    da58:	1028d0fa 	srli	r20,r2,3
    da5c:	b02b883a 	mov	r21,r22
    da60:	0005883a 	mov	r2,zero
    da64:	a468b03a 	or	r20,r20,r17
    da68:	003eae06 	br	d524 <__alt_data_end+0xff00d524>
    da6c:	1007883a 	mov	r3,r2
    da70:	0023883a 	mov	r17,zero
    da74:	880a927a 	slli	r5,r17,9
    da78:	1805883a 	mov	r2,r3
    da7c:	8822977a 	slli	r17,r17,29
    da80:	280ad33a 	srli	r5,r5,12
    da84:	003ff406 	br	da58 <__alt_data_end+0xff00da58>
    da88:	10c003cc 	andi	r3,r2,15
    da8c:	01000104 	movi	r4,4
    da90:	193ff626 	beq	r3,r4,da6c <__alt_data_end+0xff00da6c>
    da94:	0023883a 	mov	r17,zero
    da98:	003fd506 	br	d9f0 <__alt_data_end+0xff00d9f0>
    da9c:	0005883a 	mov	r2,zero
    daa0:	003fe706 	br	da40 <__alt_data_end+0xff00da40>
    daa4:	00800434 	movhi	r2,16
    daa8:	89400234 	orhi	r5,r17,8
    daac:	10bfffc4 	addi	r2,r2,-1
    dab0:	b02b883a 	mov	r21,r22
    dab4:	288a703a 	and	r5,r5,r2
    dab8:	4029883a 	mov	r20,r8
    dabc:	003eff06 	br	d6bc <__alt_data_end+0xff00d6bc>

0000dac0 <__subdf3>:
    dac0:	02000434 	movhi	r8,16
    dac4:	423fffc4 	addi	r8,r8,-1
    dac8:	defffb04 	addi	sp,sp,-20
    dacc:	2a14703a 	and	r10,r5,r8
    dad0:	3812d53a 	srli	r9,r7,20
    dad4:	3a10703a 	and	r8,r7,r8
    dad8:	2006d77a 	srli	r3,r4,29
    dadc:	3004d77a 	srli	r2,r6,29
    dae0:	dc000015 	stw	r16,0(sp)
    dae4:	501490fa 	slli	r10,r10,3
    dae8:	2820d53a 	srli	r16,r5,20
    daec:	401090fa 	slli	r8,r8,3
    daf0:	dc800215 	stw	r18,8(sp)
    daf4:	dc400115 	stw	r17,4(sp)
    daf8:	dfc00415 	stw	ra,16(sp)
    dafc:	202290fa 	slli	r17,r4,3
    db00:	dcc00315 	stw	r19,12(sp)
    db04:	4a41ffcc 	andi	r9,r9,2047
    db08:	0101ffc4 	movi	r4,2047
    db0c:	2824d7fa 	srli	r18,r5,31
    db10:	8401ffcc 	andi	r16,r16,2047
    db14:	50c6b03a 	or	r3,r10,r3
    db18:	380ed7fa 	srli	r7,r7,31
    db1c:	408ab03a 	or	r5,r8,r2
    db20:	300c90fa 	slli	r6,r6,3
    db24:	49009626 	beq	r9,r4,dd80 <__subdf3+0x2c0>
    db28:	39c0005c 	xori	r7,r7,1
    db2c:	8245c83a 	sub	r2,r16,r9
    db30:	3c807426 	beq	r7,r18,dd04 <__subdf3+0x244>
    db34:	0080af0e 	bge	zero,r2,ddf4 <__subdf3+0x334>
    db38:	48002a1e 	bne	r9,zero,dbe4 <__subdf3+0x124>
    db3c:	2988b03a 	or	r4,r5,r6
    db40:	20009a1e 	bne	r4,zero,ddac <__subdf3+0x2ec>
    db44:	888001cc 	andi	r2,r17,7
    db48:	10000726 	beq	r2,zero,db68 <__subdf3+0xa8>
    db4c:	888003cc 	andi	r2,r17,15
    db50:	01000104 	movi	r4,4
    db54:	11000426 	beq	r2,r4,db68 <__subdf3+0xa8>
    db58:	890b883a 	add	r5,r17,r4
    db5c:	2c63803a 	cmpltu	r17,r5,r17
    db60:	1c47883a 	add	r3,r3,r17
    db64:	2823883a 	mov	r17,r5
    db68:	1880202c 	andhi	r2,r3,128
    db6c:	10005926 	beq	r2,zero,dcd4 <__subdf3+0x214>
    db70:	84000044 	addi	r16,r16,1
    db74:	0081ffc4 	movi	r2,2047
    db78:	8080be26 	beq	r16,r2,de74 <__subdf3+0x3b4>
    db7c:	017fe034 	movhi	r5,65408
    db80:	297fffc4 	addi	r5,r5,-1
    db84:	1946703a 	and	r3,r3,r5
    db88:	1804977a 	slli	r2,r3,29
    db8c:	1806927a 	slli	r3,r3,9
    db90:	8822d0fa 	srli	r17,r17,3
    db94:	8401ffcc 	andi	r16,r16,2047
    db98:	180ad33a 	srli	r5,r3,12
    db9c:	9100004c 	andi	r4,r18,1
    dba0:	1444b03a 	or	r2,r2,r17
    dba4:	80c1ffcc 	andi	r3,r16,2047
    dba8:	1820953a 	slli	r16,r3,20
    dbac:	20c03fcc 	andi	r3,r4,255
    dbb0:	180897fa 	slli	r4,r3,31
    dbb4:	00c00434 	movhi	r3,16
    dbb8:	18ffffc4 	addi	r3,r3,-1
    dbbc:	28c6703a 	and	r3,r5,r3
    dbc0:	1c06b03a 	or	r3,r3,r16
    dbc4:	1906b03a 	or	r3,r3,r4
    dbc8:	dfc00417 	ldw	ra,16(sp)
    dbcc:	dcc00317 	ldw	r19,12(sp)
    dbd0:	dc800217 	ldw	r18,8(sp)
    dbd4:	dc400117 	ldw	r17,4(sp)
    dbd8:	dc000017 	ldw	r16,0(sp)
    dbdc:	dec00504 	addi	sp,sp,20
    dbe0:	f800283a 	ret
    dbe4:	0101ffc4 	movi	r4,2047
    dbe8:	813fd626 	beq	r16,r4,db44 <__alt_data_end+0xff00db44>
    dbec:	29402034 	orhi	r5,r5,128
    dbf0:	01000e04 	movi	r4,56
    dbf4:	2080a316 	blt	r4,r2,de84 <__subdf3+0x3c4>
    dbf8:	010007c4 	movi	r4,31
    dbfc:	2080c616 	blt	r4,r2,df18 <__subdf3+0x458>
    dc00:	01000804 	movi	r4,32
    dc04:	2089c83a 	sub	r4,r4,r2
    dc08:	2910983a 	sll	r8,r5,r4
    dc0c:	308ed83a 	srl	r7,r6,r2
    dc10:	3108983a 	sll	r4,r6,r4
    dc14:	2884d83a 	srl	r2,r5,r2
    dc18:	41ccb03a 	or	r6,r8,r7
    dc1c:	2008c03a 	cmpne	r4,r4,zero
    dc20:	310cb03a 	or	r6,r6,r4
    dc24:	898dc83a 	sub	r6,r17,r6
    dc28:	89a3803a 	cmpltu	r17,r17,r6
    dc2c:	1887c83a 	sub	r3,r3,r2
    dc30:	1c47c83a 	sub	r3,r3,r17
    dc34:	3023883a 	mov	r17,r6
    dc38:	1880202c 	andhi	r2,r3,128
    dc3c:	10002326 	beq	r2,zero,dccc <__subdf3+0x20c>
    dc40:	04c02034 	movhi	r19,128
    dc44:	9cffffc4 	addi	r19,r19,-1
    dc48:	1ce6703a 	and	r19,r3,r19
    dc4c:	98007a26 	beq	r19,zero,de38 <__subdf3+0x378>
    dc50:	9809883a 	mov	r4,r19
    dc54:	00027140 	call	2714 <__clzsi2>
    dc58:	113ffe04 	addi	r4,r2,-8
    dc5c:	00c007c4 	movi	r3,31
    dc60:	19007b16 	blt	r3,r4,de50 <__subdf3+0x390>
    dc64:	00800804 	movi	r2,32
    dc68:	1105c83a 	sub	r2,r2,r4
    dc6c:	8884d83a 	srl	r2,r17,r2
    dc70:	9906983a 	sll	r3,r19,r4
    dc74:	8922983a 	sll	r17,r17,r4
    dc78:	10c4b03a 	or	r2,r2,r3
    dc7c:	24007816 	blt	r4,r16,de60 <__subdf3+0x3a0>
    dc80:	2421c83a 	sub	r16,r4,r16
    dc84:	80c00044 	addi	r3,r16,1
    dc88:	010007c4 	movi	r4,31
    dc8c:	20c09516 	blt	r4,r3,dee4 <__subdf3+0x424>
    dc90:	01400804 	movi	r5,32
    dc94:	28cbc83a 	sub	r5,r5,r3
    dc98:	88c8d83a 	srl	r4,r17,r3
    dc9c:	8962983a 	sll	r17,r17,r5
    dca0:	114a983a 	sll	r5,r2,r5
    dca4:	10c6d83a 	srl	r3,r2,r3
    dca8:	8804c03a 	cmpne	r2,r17,zero
    dcac:	290ab03a 	or	r5,r5,r4
    dcb0:	28a2b03a 	or	r17,r5,r2
    dcb4:	0021883a 	mov	r16,zero
    dcb8:	003fa206 	br	db44 <__alt_data_end+0xff00db44>
    dcbc:	2090b03a 	or	r8,r4,r2
    dcc0:	40018e26 	beq	r8,zero,e2fc <__subdf3+0x83c>
    dcc4:	1007883a 	mov	r3,r2
    dcc8:	2023883a 	mov	r17,r4
    dccc:	888001cc 	andi	r2,r17,7
    dcd0:	103f9e1e 	bne	r2,zero,db4c <__alt_data_end+0xff00db4c>
    dcd4:	1804977a 	slli	r2,r3,29
    dcd8:	8822d0fa 	srli	r17,r17,3
    dcdc:	1810d0fa 	srli	r8,r3,3
    dce0:	9100004c 	andi	r4,r18,1
    dce4:	1444b03a 	or	r2,r2,r17
    dce8:	00c1ffc4 	movi	r3,2047
    dcec:	80c02826 	beq	r16,r3,dd90 <__subdf3+0x2d0>
    dcf0:	01400434 	movhi	r5,16
    dcf4:	297fffc4 	addi	r5,r5,-1
    dcf8:	80e0703a 	and	r16,r16,r3
    dcfc:	414a703a 	and	r5,r8,r5
    dd00:	003fa806 	br	dba4 <__alt_data_end+0xff00dba4>
    dd04:	0080630e 	bge	zero,r2,de94 <__subdf3+0x3d4>
    dd08:	48003026 	beq	r9,zero,ddcc <__subdf3+0x30c>
    dd0c:	0101ffc4 	movi	r4,2047
    dd10:	813f8c26 	beq	r16,r4,db44 <__alt_data_end+0xff00db44>
    dd14:	29402034 	orhi	r5,r5,128
    dd18:	01000e04 	movi	r4,56
    dd1c:	2080a90e 	bge	r4,r2,dfc4 <__subdf3+0x504>
    dd20:	298cb03a 	or	r6,r5,r6
    dd24:	3012c03a 	cmpne	r9,r6,zero
    dd28:	0005883a 	mov	r2,zero
    dd2c:	4c53883a 	add	r9,r9,r17
    dd30:	4c63803a 	cmpltu	r17,r9,r17
    dd34:	10c7883a 	add	r3,r2,r3
    dd38:	88c7883a 	add	r3,r17,r3
    dd3c:	4823883a 	mov	r17,r9
    dd40:	1880202c 	andhi	r2,r3,128
    dd44:	1000d026 	beq	r2,zero,e088 <__subdf3+0x5c8>
    dd48:	84000044 	addi	r16,r16,1
    dd4c:	0081ffc4 	movi	r2,2047
    dd50:	8080fe26 	beq	r16,r2,e14c <__subdf3+0x68c>
    dd54:	00bfe034 	movhi	r2,65408
    dd58:	10bfffc4 	addi	r2,r2,-1
    dd5c:	1886703a 	and	r3,r3,r2
    dd60:	880ad07a 	srli	r5,r17,1
    dd64:	180497fa 	slli	r2,r3,31
    dd68:	8900004c 	andi	r4,r17,1
    dd6c:	2922b03a 	or	r17,r5,r4
    dd70:	1806d07a 	srli	r3,r3,1
    dd74:	1462b03a 	or	r17,r2,r17
    dd78:	3825883a 	mov	r18,r7
    dd7c:	003f7106 	br	db44 <__alt_data_end+0xff00db44>
    dd80:	2984b03a 	or	r2,r5,r6
    dd84:	103f6826 	beq	r2,zero,db28 <__alt_data_end+0xff00db28>
    dd88:	39c03fcc 	andi	r7,r7,255
    dd8c:	003f6706 	br	db2c <__alt_data_end+0xff00db2c>
    dd90:	4086b03a 	or	r3,r8,r2
    dd94:	18015226 	beq	r3,zero,e2e0 <__subdf3+0x820>
    dd98:	00c00434 	movhi	r3,16
    dd9c:	41400234 	orhi	r5,r8,8
    dda0:	18ffffc4 	addi	r3,r3,-1
    dda4:	28ca703a 	and	r5,r5,r3
    dda8:	003f7e06 	br	dba4 <__alt_data_end+0xff00dba4>
    ddac:	10bfffc4 	addi	r2,r2,-1
    ddb0:	1000491e 	bne	r2,zero,ded8 <__subdf3+0x418>
    ddb4:	898fc83a 	sub	r7,r17,r6
    ddb8:	89e3803a 	cmpltu	r17,r17,r7
    ddbc:	1947c83a 	sub	r3,r3,r5
    ddc0:	1c47c83a 	sub	r3,r3,r17
    ddc4:	3823883a 	mov	r17,r7
    ddc8:	003f9b06 	br	dc38 <__alt_data_end+0xff00dc38>
    ddcc:	2988b03a 	or	r4,r5,r6
    ddd0:	203f5c26 	beq	r4,zero,db44 <__alt_data_end+0xff00db44>
    ddd4:	10bfffc4 	addi	r2,r2,-1
    ddd8:	1000931e 	bne	r2,zero,e028 <__subdf3+0x568>
    dddc:	898d883a 	add	r6,r17,r6
    dde0:	3463803a 	cmpltu	r17,r6,r17
    dde4:	1947883a 	add	r3,r3,r5
    dde8:	88c7883a 	add	r3,r17,r3
    ddec:	3023883a 	mov	r17,r6
    ddf0:	003fd306 	br	dd40 <__alt_data_end+0xff00dd40>
    ddf4:	1000541e 	bne	r2,zero,df48 <__subdf3+0x488>
    ddf8:	80800044 	addi	r2,r16,1
    ddfc:	1081ffcc 	andi	r2,r2,2047
    de00:	01000044 	movi	r4,1
    de04:	2080a20e 	bge	r4,r2,e090 <__subdf3+0x5d0>
    de08:	8989c83a 	sub	r4,r17,r6
    de0c:	8905803a 	cmpltu	r2,r17,r4
    de10:	1967c83a 	sub	r19,r3,r5
    de14:	98a7c83a 	sub	r19,r19,r2
    de18:	9880202c 	andhi	r2,r19,128
    de1c:	10006326 	beq	r2,zero,dfac <__subdf3+0x4ec>
    de20:	3463c83a 	sub	r17,r6,r17
    de24:	28c7c83a 	sub	r3,r5,r3
    de28:	344d803a 	cmpltu	r6,r6,r17
    de2c:	19a7c83a 	sub	r19,r3,r6
    de30:	3825883a 	mov	r18,r7
    de34:	983f861e 	bne	r19,zero,dc50 <__alt_data_end+0xff00dc50>
    de38:	8809883a 	mov	r4,r17
    de3c:	00027140 	call	2714 <__clzsi2>
    de40:	10800804 	addi	r2,r2,32
    de44:	113ffe04 	addi	r4,r2,-8
    de48:	00c007c4 	movi	r3,31
    de4c:	193f850e 	bge	r3,r4,dc64 <__alt_data_end+0xff00dc64>
    de50:	10bff604 	addi	r2,r2,-40
    de54:	8884983a 	sll	r2,r17,r2
    de58:	0023883a 	mov	r17,zero
    de5c:	243f880e 	bge	r4,r16,dc80 <__alt_data_end+0xff00dc80>
    de60:	00ffe034 	movhi	r3,65408
    de64:	18ffffc4 	addi	r3,r3,-1
    de68:	8121c83a 	sub	r16,r16,r4
    de6c:	10c6703a 	and	r3,r2,r3
    de70:	003f3406 	br	db44 <__alt_data_end+0xff00db44>
    de74:	9100004c 	andi	r4,r18,1
    de78:	000b883a 	mov	r5,zero
    de7c:	0005883a 	mov	r2,zero
    de80:	003f4806 	br	dba4 <__alt_data_end+0xff00dba4>
    de84:	298cb03a 	or	r6,r5,r6
    de88:	300cc03a 	cmpne	r6,r6,zero
    de8c:	0005883a 	mov	r2,zero
    de90:	003f6406 	br	dc24 <__alt_data_end+0xff00dc24>
    de94:	10009a1e 	bne	r2,zero,e100 <__subdf3+0x640>
    de98:	82400044 	addi	r9,r16,1
    de9c:	4881ffcc 	andi	r2,r9,2047
    dea0:	02800044 	movi	r10,1
    dea4:	5080670e 	bge	r10,r2,e044 <__subdf3+0x584>
    dea8:	0081ffc4 	movi	r2,2047
    deac:	4880af26 	beq	r9,r2,e16c <__subdf3+0x6ac>
    deb0:	898d883a 	add	r6,r17,r6
    deb4:	1945883a 	add	r2,r3,r5
    deb8:	3447803a 	cmpltu	r3,r6,r17
    debc:	1887883a 	add	r3,r3,r2
    dec0:	182297fa 	slli	r17,r3,31
    dec4:	300cd07a 	srli	r6,r6,1
    dec8:	1806d07a 	srli	r3,r3,1
    decc:	4821883a 	mov	r16,r9
    ded0:	89a2b03a 	or	r17,r17,r6
    ded4:	003f1b06 	br	db44 <__alt_data_end+0xff00db44>
    ded8:	0101ffc4 	movi	r4,2047
    dedc:	813f441e 	bne	r16,r4,dbf0 <__alt_data_end+0xff00dbf0>
    dee0:	003f1806 	br	db44 <__alt_data_end+0xff00db44>
    dee4:	843ff844 	addi	r16,r16,-31
    dee8:	01400804 	movi	r5,32
    deec:	1408d83a 	srl	r4,r2,r16
    def0:	19405026 	beq	r3,r5,e034 <__subdf3+0x574>
    def4:	01401004 	movi	r5,64
    def8:	28c7c83a 	sub	r3,r5,r3
    defc:	10c4983a 	sll	r2,r2,r3
    df00:	88a2b03a 	or	r17,r17,r2
    df04:	8822c03a 	cmpne	r17,r17,zero
    df08:	2462b03a 	or	r17,r4,r17
    df0c:	0007883a 	mov	r3,zero
    df10:	0021883a 	mov	r16,zero
    df14:	003f6d06 	br	dccc <__alt_data_end+0xff00dccc>
    df18:	11fff804 	addi	r7,r2,-32
    df1c:	01000804 	movi	r4,32
    df20:	29ced83a 	srl	r7,r5,r7
    df24:	11004526 	beq	r2,r4,e03c <__subdf3+0x57c>
    df28:	01001004 	movi	r4,64
    df2c:	2089c83a 	sub	r4,r4,r2
    df30:	2904983a 	sll	r2,r5,r4
    df34:	118cb03a 	or	r6,r2,r6
    df38:	300cc03a 	cmpne	r6,r6,zero
    df3c:	398cb03a 	or	r6,r7,r6
    df40:	0005883a 	mov	r2,zero
    df44:	003f3706 	br	dc24 <__alt_data_end+0xff00dc24>
    df48:	80002a26 	beq	r16,zero,dff4 <__subdf3+0x534>
    df4c:	0101ffc4 	movi	r4,2047
    df50:	49006626 	beq	r9,r4,e0ec <__subdf3+0x62c>
    df54:	0085c83a 	sub	r2,zero,r2
    df58:	18c02034 	orhi	r3,r3,128
    df5c:	01000e04 	movi	r4,56
    df60:	20807e16 	blt	r4,r2,e15c <__subdf3+0x69c>
    df64:	010007c4 	movi	r4,31
    df68:	2080e716 	blt	r4,r2,e308 <__subdf3+0x848>
    df6c:	01000804 	movi	r4,32
    df70:	2089c83a 	sub	r4,r4,r2
    df74:	1914983a 	sll	r10,r3,r4
    df78:	8890d83a 	srl	r8,r17,r2
    df7c:	8908983a 	sll	r4,r17,r4
    df80:	1884d83a 	srl	r2,r3,r2
    df84:	5222b03a 	or	r17,r10,r8
    df88:	2006c03a 	cmpne	r3,r4,zero
    df8c:	88e2b03a 	or	r17,r17,r3
    df90:	3463c83a 	sub	r17,r6,r17
    df94:	2885c83a 	sub	r2,r5,r2
    df98:	344d803a 	cmpltu	r6,r6,r17
    df9c:	1187c83a 	sub	r3,r2,r6
    dfa0:	4821883a 	mov	r16,r9
    dfa4:	3825883a 	mov	r18,r7
    dfa8:	003f2306 	br	dc38 <__alt_data_end+0xff00dc38>
    dfac:	24d0b03a 	or	r8,r4,r19
    dfb0:	40001b1e 	bne	r8,zero,e020 <__subdf3+0x560>
    dfb4:	0005883a 	mov	r2,zero
    dfb8:	0009883a 	mov	r4,zero
    dfbc:	0021883a 	mov	r16,zero
    dfc0:	003f4906 	br	dce8 <__alt_data_end+0xff00dce8>
    dfc4:	010007c4 	movi	r4,31
    dfc8:	20803a16 	blt	r4,r2,e0b4 <__subdf3+0x5f4>
    dfcc:	01000804 	movi	r4,32
    dfd0:	2089c83a 	sub	r4,r4,r2
    dfd4:	2912983a 	sll	r9,r5,r4
    dfd8:	3090d83a 	srl	r8,r6,r2
    dfdc:	3108983a 	sll	r4,r6,r4
    dfe0:	2884d83a 	srl	r2,r5,r2
    dfe4:	4a12b03a 	or	r9,r9,r8
    dfe8:	2008c03a 	cmpne	r4,r4,zero
    dfec:	4912b03a 	or	r9,r9,r4
    dff0:	003f4e06 	br	dd2c <__alt_data_end+0xff00dd2c>
    dff4:	1c48b03a 	or	r4,r3,r17
    dff8:	20003c26 	beq	r4,zero,e0ec <__subdf3+0x62c>
    dffc:	0084303a 	nor	r2,zero,r2
    e000:	1000381e 	bne	r2,zero,e0e4 <__subdf3+0x624>
    e004:	3463c83a 	sub	r17,r6,r17
    e008:	28c5c83a 	sub	r2,r5,r3
    e00c:	344d803a 	cmpltu	r6,r6,r17
    e010:	1187c83a 	sub	r3,r2,r6
    e014:	4821883a 	mov	r16,r9
    e018:	3825883a 	mov	r18,r7
    e01c:	003f0606 	br	dc38 <__alt_data_end+0xff00dc38>
    e020:	2023883a 	mov	r17,r4
    e024:	003f0906 	br	dc4c <__alt_data_end+0xff00dc4c>
    e028:	0101ffc4 	movi	r4,2047
    e02c:	813f3a1e 	bne	r16,r4,dd18 <__alt_data_end+0xff00dd18>
    e030:	003ec406 	br	db44 <__alt_data_end+0xff00db44>
    e034:	0005883a 	mov	r2,zero
    e038:	003fb106 	br	df00 <__alt_data_end+0xff00df00>
    e03c:	0005883a 	mov	r2,zero
    e040:	003fbc06 	br	df34 <__alt_data_end+0xff00df34>
    e044:	1c44b03a 	or	r2,r3,r17
    e048:	80008e1e 	bne	r16,zero,e284 <__subdf3+0x7c4>
    e04c:	1000c826 	beq	r2,zero,e370 <__subdf3+0x8b0>
    e050:	2984b03a 	or	r2,r5,r6
    e054:	103ebb26 	beq	r2,zero,db44 <__alt_data_end+0xff00db44>
    e058:	8989883a 	add	r4,r17,r6
    e05c:	1945883a 	add	r2,r3,r5
    e060:	2447803a 	cmpltu	r3,r4,r17
    e064:	1887883a 	add	r3,r3,r2
    e068:	1880202c 	andhi	r2,r3,128
    e06c:	2023883a 	mov	r17,r4
    e070:	103f1626 	beq	r2,zero,dccc <__alt_data_end+0xff00dccc>
    e074:	00bfe034 	movhi	r2,65408
    e078:	10bfffc4 	addi	r2,r2,-1
    e07c:	5021883a 	mov	r16,r10
    e080:	1886703a 	and	r3,r3,r2
    e084:	003eaf06 	br	db44 <__alt_data_end+0xff00db44>
    e088:	3825883a 	mov	r18,r7
    e08c:	003f0f06 	br	dccc <__alt_data_end+0xff00dccc>
    e090:	1c44b03a 	or	r2,r3,r17
    e094:	8000251e 	bne	r16,zero,e12c <__subdf3+0x66c>
    e098:	1000661e 	bne	r2,zero,e234 <__subdf3+0x774>
    e09c:	2990b03a 	or	r8,r5,r6
    e0a0:	40009626 	beq	r8,zero,e2fc <__subdf3+0x83c>
    e0a4:	2807883a 	mov	r3,r5
    e0a8:	3023883a 	mov	r17,r6
    e0ac:	3825883a 	mov	r18,r7
    e0b0:	003ea406 	br	db44 <__alt_data_end+0xff00db44>
    e0b4:	127ff804 	addi	r9,r2,-32
    e0b8:	01000804 	movi	r4,32
    e0bc:	2a52d83a 	srl	r9,r5,r9
    e0c0:	11008c26 	beq	r2,r4,e2f4 <__subdf3+0x834>
    e0c4:	01001004 	movi	r4,64
    e0c8:	2085c83a 	sub	r2,r4,r2
    e0cc:	2884983a 	sll	r2,r5,r2
    e0d0:	118cb03a 	or	r6,r2,r6
    e0d4:	300cc03a 	cmpne	r6,r6,zero
    e0d8:	4992b03a 	or	r9,r9,r6
    e0dc:	0005883a 	mov	r2,zero
    e0e0:	003f1206 	br	dd2c <__alt_data_end+0xff00dd2c>
    e0e4:	0101ffc4 	movi	r4,2047
    e0e8:	493f9c1e 	bne	r9,r4,df5c <__alt_data_end+0xff00df5c>
    e0ec:	2807883a 	mov	r3,r5
    e0f0:	3023883a 	mov	r17,r6
    e0f4:	4821883a 	mov	r16,r9
    e0f8:	3825883a 	mov	r18,r7
    e0fc:	003e9106 	br	db44 <__alt_data_end+0xff00db44>
    e100:	80001f1e 	bne	r16,zero,e180 <__subdf3+0x6c0>
    e104:	1c48b03a 	or	r4,r3,r17
    e108:	20005a26 	beq	r4,zero,e274 <__subdf3+0x7b4>
    e10c:	0084303a 	nor	r2,zero,r2
    e110:	1000561e 	bne	r2,zero,e26c <__subdf3+0x7ac>
    e114:	89a3883a 	add	r17,r17,r6
    e118:	1945883a 	add	r2,r3,r5
    e11c:	898d803a 	cmpltu	r6,r17,r6
    e120:	3087883a 	add	r3,r6,r2
    e124:	4821883a 	mov	r16,r9
    e128:	003f0506 	br	dd40 <__alt_data_end+0xff00dd40>
    e12c:	10002b1e 	bne	r2,zero,e1dc <__subdf3+0x71c>
    e130:	2984b03a 	or	r2,r5,r6
    e134:	10008026 	beq	r2,zero,e338 <__subdf3+0x878>
    e138:	2807883a 	mov	r3,r5
    e13c:	3023883a 	mov	r17,r6
    e140:	3825883a 	mov	r18,r7
    e144:	0401ffc4 	movi	r16,2047
    e148:	003e7e06 	br	db44 <__alt_data_end+0xff00db44>
    e14c:	3809883a 	mov	r4,r7
    e150:	0011883a 	mov	r8,zero
    e154:	0005883a 	mov	r2,zero
    e158:	003ee306 	br	dce8 <__alt_data_end+0xff00dce8>
    e15c:	1c62b03a 	or	r17,r3,r17
    e160:	8822c03a 	cmpne	r17,r17,zero
    e164:	0005883a 	mov	r2,zero
    e168:	003f8906 	br	df90 <__alt_data_end+0xff00df90>
    e16c:	3809883a 	mov	r4,r7
    e170:	4821883a 	mov	r16,r9
    e174:	0011883a 	mov	r8,zero
    e178:	0005883a 	mov	r2,zero
    e17c:	003eda06 	br	dce8 <__alt_data_end+0xff00dce8>
    e180:	0101ffc4 	movi	r4,2047
    e184:	49003b26 	beq	r9,r4,e274 <__subdf3+0x7b4>
    e188:	0085c83a 	sub	r2,zero,r2
    e18c:	18c02034 	orhi	r3,r3,128
    e190:	01000e04 	movi	r4,56
    e194:	20806e16 	blt	r4,r2,e350 <__subdf3+0x890>
    e198:	010007c4 	movi	r4,31
    e19c:	20807716 	blt	r4,r2,e37c <__subdf3+0x8bc>
    e1a0:	01000804 	movi	r4,32
    e1a4:	2089c83a 	sub	r4,r4,r2
    e1a8:	1914983a 	sll	r10,r3,r4
    e1ac:	8890d83a 	srl	r8,r17,r2
    e1b0:	8908983a 	sll	r4,r17,r4
    e1b4:	1884d83a 	srl	r2,r3,r2
    e1b8:	5222b03a 	or	r17,r10,r8
    e1bc:	2006c03a 	cmpne	r3,r4,zero
    e1c0:	88e2b03a 	or	r17,r17,r3
    e1c4:	89a3883a 	add	r17,r17,r6
    e1c8:	1145883a 	add	r2,r2,r5
    e1cc:	898d803a 	cmpltu	r6,r17,r6
    e1d0:	3087883a 	add	r3,r6,r2
    e1d4:	4821883a 	mov	r16,r9
    e1d8:	003ed906 	br	dd40 <__alt_data_end+0xff00dd40>
    e1dc:	2984b03a 	or	r2,r5,r6
    e1e0:	10004226 	beq	r2,zero,e2ec <__subdf3+0x82c>
    e1e4:	1808d0fa 	srli	r4,r3,3
    e1e8:	8822d0fa 	srli	r17,r17,3
    e1ec:	1806977a 	slli	r3,r3,29
    e1f0:	2080022c 	andhi	r2,r4,8
    e1f4:	1c62b03a 	or	r17,r3,r17
    e1f8:	10000826 	beq	r2,zero,e21c <__subdf3+0x75c>
    e1fc:	2812d0fa 	srli	r9,r5,3
    e200:	4880022c 	andhi	r2,r9,8
    e204:	1000051e 	bne	r2,zero,e21c <__subdf3+0x75c>
    e208:	300cd0fa 	srli	r6,r6,3
    e20c:	2804977a 	slli	r2,r5,29
    e210:	4809883a 	mov	r4,r9
    e214:	3825883a 	mov	r18,r7
    e218:	11a2b03a 	or	r17,r2,r6
    e21c:	8806d77a 	srli	r3,r17,29
    e220:	200890fa 	slli	r4,r4,3
    e224:	882290fa 	slli	r17,r17,3
    e228:	0401ffc4 	movi	r16,2047
    e22c:	1906b03a 	or	r3,r3,r4
    e230:	003e4406 	br	db44 <__alt_data_end+0xff00db44>
    e234:	2984b03a 	or	r2,r5,r6
    e238:	103e4226 	beq	r2,zero,db44 <__alt_data_end+0xff00db44>
    e23c:	8989c83a 	sub	r4,r17,r6
    e240:	8911803a 	cmpltu	r8,r17,r4
    e244:	1945c83a 	sub	r2,r3,r5
    e248:	1205c83a 	sub	r2,r2,r8
    e24c:	1200202c 	andhi	r8,r2,128
    e250:	403e9a26 	beq	r8,zero,dcbc <__alt_data_end+0xff00dcbc>
    e254:	3463c83a 	sub	r17,r6,r17
    e258:	28c5c83a 	sub	r2,r5,r3
    e25c:	344d803a 	cmpltu	r6,r6,r17
    e260:	1187c83a 	sub	r3,r2,r6
    e264:	3825883a 	mov	r18,r7
    e268:	003e3606 	br	db44 <__alt_data_end+0xff00db44>
    e26c:	0101ffc4 	movi	r4,2047
    e270:	493fc71e 	bne	r9,r4,e190 <__alt_data_end+0xff00e190>
    e274:	2807883a 	mov	r3,r5
    e278:	3023883a 	mov	r17,r6
    e27c:	4821883a 	mov	r16,r9
    e280:	003e3006 	br	db44 <__alt_data_end+0xff00db44>
    e284:	10003626 	beq	r2,zero,e360 <__subdf3+0x8a0>
    e288:	2984b03a 	or	r2,r5,r6
    e28c:	10001726 	beq	r2,zero,e2ec <__subdf3+0x82c>
    e290:	1808d0fa 	srli	r4,r3,3
    e294:	8822d0fa 	srli	r17,r17,3
    e298:	1806977a 	slli	r3,r3,29
    e29c:	2080022c 	andhi	r2,r4,8
    e2a0:	1c62b03a 	or	r17,r3,r17
    e2a4:	10000726 	beq	r2,zero,e2c4 <__subdf3+0x804>
    e2a8:	2812d0fa 	srli	r9,r5,3
    e2ac:	4880022c 	andhi	r2,r9,8
    e2b0:	1000041e 	bne	r2,zero,e2c4 <__subdf3+0x804>
    e2b4:	300cd0fa 	srli	r6,r6,3
    e2b8:	2804977a 	slli	r2,r5,29
    e2bc:	4809883a 	mov	r4,r9
    e2c0:	11a2b03a 	or	r17,r2,r6
    e2c4:	8806d77a 	srli	r3,r17,29
    e2c8:	200890fa 	slli	r4,r4,3
    e2cc:	882290fa 	slli	r17,r17,3
    e2d0:	3825883a 	mov	r18,r7
    e2d4:	1906b03a 	or	r3,r3,r4
    e2d8:	0401ffc4 	movi	r16,2047
    e2dc:	003e1906 	br	db44 <__alt_data_end+0xff00db44>
    e2e0:	000b883a 	mov	r5,zero
    e2e4:	0005883a 	mov	r2,zero
    e2e8:	003e2e06 	br	dba4 <__alt_data_end+0xff00dba4>
    e2ec:	0401ffc4 	movi	r16,2047
    e2f0:	003e1406 	br	db44 <__alt_data_end+0xff00db44>
    e2f4:	0005883a 	mov	r2,zero
    e2f8:	003f7506 	br	e0d0 <__alt_data_end+0xff00e0d0>
    e2fc:	0005883a 	mov	r2,zero
    e300:	0009883a 	mov	r4,zero
    e304:	003e7806 	br	dce8 <__alt_data_end+0xff00dce8>
    e308:	123ff804 	addi	r8,r2,-32
    e30c:	01000804 	movi	r4,32
    e310:	1a10d83a 	srl	r8,r3,r8
    e314:	11002526 	beq	r2,r4,e3ac <__subdf3+0x8ec>
    e318:	01001004 	movi	r4,64
    e31c:	2085c83a 	sub	r2,r4,r2
    e320:	1884983a 	sll	r2,r3,r2
    e324:	1444b03a 	or	r2,r2,r17
    e328:	1004c03a 	cmpne	r2,r2,zero
    e32c:	40a2b03a 	or	r17,r8,r2
    e330:	0005883a 	mov	r2,zero
    e334:	003f1606 	br	df90 <__alt_data_end+0xff00df90>
    e338:	02000434 	movhi	r8,16
    e33c:	0009883a 	mov	r4,zero
    e340:	423fffc4 	addi	r8,r8,-1
    e344:	00bfffc4 	movi	r2,-1
    e348:	0401ffc4 	movi	r16,2047
    e34c:	003e6606 	br	dce8 <__alt_data_end+0xff00dce8>
    e350:	1c62b03a 	or	r17,r3,r17
    e354:	8822c03a 	cmpne	r17,r17,zero
    e358:	0005883a 	mov	r2,zero
    e35c:	003f9906 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e360:	2807883a 	mov	r3,r5
    e364:	3023883a 	mov	r17,r6
    e368:	0401ffc4 	movi	r16,2047
    e36c:	003df506 	br	db44 <__alt_data_end+0xff00db44>
    e370:	2807883a 	mov	r3,r5
    e374:	3023883a 	mov	r17,r6
    e378:	003df206 	br	db44 <__alt_data_end+0xff00db44>
    e37c:	123ff804 	addi	r8,r2,-32
    e380:	01000804 	movi	r4,32
    e384:	1a10d83a 	srl	r8,r3,r8
    e388:	11000a26 	beq	r2,r4,e3b4 <__subdf3+0x8f4>
    e38c:	01001004 	movi	r4,64
    e390:	2085c83a 	sub	r2,r4,r2
    e394:	1884983a 	sll	r2,r3,r2
    e398:	1444b03a 	or	r2,r2,r17
    e39c:	1004c03a 	cmpne	r2,r2,zero
    e3a0:	40a2b03a 	or	r17,r8,r2
    e3a4:	0005883a 	mov	r2,zero
    e3a8:	003f8606 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e3ac:	0005883a 	mov	r2,zero
    e3b0:	003fdc06 	br	e324 <__alt_data_end+0xff00e324>
    e3b4:	0005883a 	mov	r2,zero
    e3b8:	003ff706 	br	e398 <__alt_data_end+0xff00e398>

0000e3bc <__fixdfsi>:
    e3bc:	280cd53a 	srli	r6,r5,20
    e3c0:	00c00434 	movhi	r3,16
    e3c4:	18ffffc4 	addi	r3,r3,-1
    e3c8:	3181ffcc 	andi	r6,r6,2047
    e3cc:	01c0ff84 	movi	r7,1022
    e3d0:	28c6703a 	and	r3,r5,r3
    e3d4:	280ad7fa 	srli	r5,r5,31
    e3d8:	3980120e 	bge	r7,r6,e424 <__fixdfsi+0x68>
    e3dc:	00810744 	movi	r2,1053
    e3e0:	11800c16 	blt	r2,r6,e414 <__fixdfsi+0x58>
    e3e4:	00810cc4 	movi	r2,1075
    e3e8:	1185c83a 	sub	r2,r2,r6
    e3ec:	01c007c4 	movi	r7,31
    e3f0:	18c00434 	orhi	r3,r3,16
    e3f4:	38800d16 	blt	r7,r2,e42c <__fixdfsi+0x70>
    e3f8:	31befb44 	addi	r6,r6,-1043
    e3fc:	2084d83a 	srl	r2,r4,r2
    e400:	1986983a 	sll	r3,r3,r6
    e404:	1884b03a 	or	r2,r3,r2
    e408:	28000726 	beq	r5,zero,e428 <__fixdfsi+0x6c>
    e40c:	0085c83a 	sub	r2,zero,r2
    e410:	f800283a 	ret
    e414:	00a00034 	movhi	r2,32768
    e418:	10bfffc4 	addi	r2,r2,-1
    e41c:	2885883a 	add	r2,r5,r2
    e420:	f800283a 	ret
    e424:	0005883a 	mov	r2,zero
    e428:	f800283a 	ret
    e42c:	008104c4 	movi	r2,1043
    e430:	1185c83a 	sub	r2,r2,r6
    e434:	1884d83a 	srl	r2,r3,r2
    e438:	003ff306 	br	e408 <__alt_data_end+0xff00e408>

0000e43c <__floatsidf>:
    e43c:	defffd04 	addi	sp,sp,-12
    e440:	dfc00215 	stw	ra,8(sp)
    e444:	dc400115 	stw	r17,4(sp)
    e448:	dc000015 	stw	r16,0(sp)
    e44c:	20002b26 	beq	r4,zero,e4fc <__floatsidf+0xc0>
    e450:	2023883a 	mov	r17,r4
    e454:	2020d7fa 	srli	r16,r4,31
    e458:	20002d16 	blt	r4,zero,e510 <__floatsidf+0xd4>
    e45c:	8809883a 	mov	r4,r17
    e460:	00027140 	call	2714 <__clzsi2>
    e464:	01410784 	movi	r5,1054
    e468:	288bc83a 	sub	r5,r5,r2
    e46c:	01010cc4 	movi	r4,1075
    e470:	2149c83a 	sub	r4,r4,r5
    e474:	00c007c4 	movi	r3,31
    e478:	1900160e 	bge	r3,r4,e4d4 <__floatsidf+0x98>
    e47c:	00c104c4 	movi	r3,1043
    e480:	1947c83a 	sub	r3,r3,r5
    e484:	88c6983a 	sll	r3,r17,r3
    e488:	00800434 	movhi	r2,16
    e48c:	10bfffc4 	addi	r2,r2,-1
    e490:	1886703a 	and	r3,r3,r2
    e494:	2941ffcc 	andi	r5,r5,2047
    e498:	800d883a 	mov	r6,r16
    e49c:	0005883a 	mov	r2,zero
    e4a0:	280a953a 	slli	r5,r5,20
    e4a4:	31803fcc 	andi	r6,r6,255
    e4a8:	01000434 	movhi	r4,16
    e4ac:	300c97fa 	slli	r6,r6,31
    e4b0:	213fffc4 	addi	r4,r4,-1
    e4b4:	1906703a 	and	r3,r3,r4
    e4b8:	1946b03a 	or	r3,r3,r5
    e4bc:	1986b03a 	or	r3,r3,r6
    e4c0:	dfc00217 	ldw	ra,8(sp)
    e4c4:	dc400117 	ldw	r17,4(sp)
    e4c8:	dc000017 	ldw	r16,0(sp)
    e4cc:	dec00304 	addi	sp,sp,12
    e4d0:	f800283a 	ret
    e4d4:	00c002c4 	movi	r3,11
    e4d8:	1887c83a 	sub	r3,r3,r2
    e4dc:	88c6d83a 	srl	r3,r17,r3
    e4e0:	8904983a 	sll	r2,r17,r4
    e4e4:	01000434 	movhi	r4,16
    e4e8:	213fffc4 	addi	r4,r4,-1
    e4ec:	2941ffcc 	andi	r5,r5,2047
    e4f0:	1906703a 	and	r3,r3,r4
    e4f4:	800d883a 	mov	r6,r16
    e4f8:	003fe906 	br	e4a0 <__alt_data_end+0xff00e4a0>
    e4fc:	000d883a 	mov	r6,zero
    e500:	000b883a 	mov	r5,zero
    e504:	0007883a 	mov	r3,zero
    e508:	0005883a 	mov	r2,zero
    e50c:	003fe406 	br	e4a0 <__alt_data_end+0xff00e4a0>
    e510:	0123c83a 	sub	r17,zero,r4
    e514:	003fd106 	br	e45c <__alt_data_end+0xff00e45c>

0000e518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e518:	defffe04 	addi	sp,sp,-8
    e51c:	dfc00115 	stw	ra,4(sp)
    e520:	df000015 	stw	fp,0(sp)
    e524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e528:	d0a00b17 	ldw	r2,-32724(gp)
    e52c:	10000326 	beq	r2,zero,e53c <alt_get_errno+0x24>
    e530:	d0a00b17 	ldw	r2,-32724(gp)
    e534:	103ee83a 	callr	r2
    e538:	00000106 	br	e540 <alt_get_errno+0x28>
    e53c:	d0a72004 	addi	r2,gp,-25472
}
    e540:	e037883a 	mov	sp,fp
    e544:	dfc00117 	ldw	ra,4(sp)
    e548:	df000017 	ldw	fp,0(sp)
    e54c:	dec00204 	addi	sp,sp,8
    e550:	f800283a 	ret

0000e554 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e554:	defffb04 	addi	sp,sp,-20
    e558:	dfc00415 	stw	ra,16(sp)
    e55c:	df000315 	stw	fp,12(sp)
    e560:	df000304 	addi	fp,sp,12
    e564:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e568:	e0bfff17 	ldw	r2,-4(fp)
    e56c:	10000616 	blt	r2,zero,e588 <close+0x34>
    e570:	e0bfff17 	ldw	r2,-4(fp)
    e574:	10c00324 	muli	r3,r2,12
    e578:	00800074 	movhi	r2,1
    e57c:	10884204 	addi	r2,r2,8456
    e580:	1885883a 	add	r2,r3,r2
    e584:	00000106 	br	e58c <close+0x38>
    e588:	0005883a 	mov	r2,zero
    e58c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e590:	e0bffd17 	ldw	r2,-12(fp)
    e594:	10001926 	beq	r2,zero,e5fc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e598:	e0bffd17 	ldw	r2,-12(fp)
    e59c:	10800017 	ldw	r2,0(r2)
    e5a0:	10800417 	ldw	r2,16(r2)
    e5a4:	10000626 	beq	r2,zero,e5c0 <close+0x6c>
    e5a8:	e0bffd17 	ldw	r2,-12(fp)
    e5ac:	10800017 	ldw	r2,0(r2)
    e5b0:	10800417 	ldw	r2,16(r2)
    e5b4:	e13ffd17 	ldw	r4,-12(fp)
    e5b8:	103ee83a 	callr	r2
    e5bc:	00000106 	br	e5c4 <close+0x70>
    e5c0:	0005883a 	mov	r2,zero
    e5c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5c8:	e13fff17 	ldw	r4,-4(fp)
    e5cc:	000ec140 	call	ec14 <alt_release_fd>
    if (rval < 0)
    e5d0:	e0bffe17 	ldw	r2,-8(fp)
    e5d4:	1000070e 	bge	r2,zero,e5f4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e5d8:	000e5180 	call	e518 <alt_get_errno>
    e5dc:	1007883a 	mov	r3,r2
    e5e0:	e0bffe17 	ldw	r2,-8(fp)
    e5e4:	0085c83a 	sub	r2,zero,r2
    e5e8:	18800015 	stw	r2,0(r3)
      return -1;
    e5ec:	00bfffc4 	movi	r2,-1
    e5f0:	00000706 	br	e610 <close+0xbc>
    }
    return 0;
    e5f4:	0005883a 	mov	r2,zero
    e5f8:	00000506 	br	e610 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e5fc:	000e5180 	call	e518 <alt_get_errno>
    e600:	1007883a 	mov	r3,r2
    e604:	00801444 	movi	r2,81
    e608:	18800015 	stw	r2,0(r3)
    return -1;
    e60c:	00bfffc4 	movi	r2,-1
  }
}
    e610:	e037883a 	mov	sp,fp
    e614:	dfc00117 	ldw	ra,4(sp)
    e618:	df000017 	ldw	fp,0(sp)
    e61c:	dec00204 	addi	sp,sp,8
    e620:	f800283a 	ret

0000e624 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e624:	defffc04 	addi	sp,sp,-16
    e628:	df000315 	stw	fp,12(sp)
    e62c:	df000304 	addi	fp,sp,12
    e630:	e13ffd15 	stw	r4,-12(fp)
    e634:	e17ffe15 	stw	r5,-8(fp)
    e638:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e63c:	e0bfff17 	ldw	r2,-4(fp)
}
    e640:	e037883a 	mov	sp,fp
    e644:	df000017 	ldw	fp,0(sp)
    e648:	dec00104 	addi	sp,sp,4
    e64c:	f800283a 	ret

0000e650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e650:	defffe04 	addi	sp,sp,-8
    e654:	dfc00115 	stw	ra,4(sp)
    e658:	df000015 	stw	fp,0(sp)
    e65c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e660:	d0a00b17 	ldw	r2,-32724(gp)
    e664:	10000326 	beq	r2,zero,e674 <alt_get_errno+0x24>
    e668:	d0a00b17 	ldw	r2,-32724(gp)
    e66c:	103ee83a 	callr	r2
    e670:	00000106 	br	e678 <alt_get_errno+0x28>
    e674:	d0a72004 	addi	r2,gp,-25472
}
    e678:	e037883a 	mov	sp,fp
    e67c:	dfc00117 	ldw	ra,4(sp)
    e680:	df000017 	ldw	fp,0(sp)
    e684:	dec00204 	addi	sp,sp,8
    e688:	f800283a 	ret

0000e68c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e68c:	defffb04 	addi	sp,sp,-20
    e690:	dfc00415 	stw	ra,16(sp)
    e694:	df000315 	stw	fp,12(sp)
    e698:	df000304 	addi	fp,sp,12
    e69c:	e13ffe15 	stw	r4,-8(fp)
    e6a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6a4:	e0bffe17 	ldw	r2,-8(fp)
    e6a8:	10000616 	blt	r2,zero,e6c4 <fstat+0x38>
    e6ac:	e0bffe17 	ldw	r2,-8(fp)
    e6b0:	10c00324 	muli	r3,r2,12
    e6b4:	00800074 	movhi	r2,1
    e6b8:	10884204 	addi	r2,r2,8456
    e6bc:	1885883a 	add	r2,r3,r2
    e6c0:	00000106 	br	e6c8 <fstat+0x3c>
    e6c4:	0005883a 	mov	r2,zero
    e6c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e6cc:	e0bffd17 	ldw	r2,-12(fp)
    e6d0:	10001026 	beq	r2,zero,e714 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e6d4:	e0bffd17 	ldw	r2,-12(fp)
    e6d8:	10800017 	ldw	r2,0(r2)
    e6dc:	10800817 	ldw	r2,32(r2)
    e6e0:	10000726 	beq	r2,zero,e700 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e6e4:	e0bffd17 	ldw	r2,-12(fp)
    e6e8:	10800017 	ldw	r2,0(r2)
    e6ec:	10800817 	ldw	r2,32(r2)
    e6f0:	e17fff17 	ldw	r5,-4(fp)
    e6f4:	e13ffd17 	ldw	r4,-12(fp)
    e6f8:	103ee83a 	callr	r2
    e6fc:	00000a06 	br	e728 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e700:	e0bfff17 	ldw	r2,-4(fp)
    e704:	00c80004 	movi	r3,8192
    e708:	10c00115 	stw	r3,4(r2)
      return 0;
    e70c:	0005883a 	mov	r2,zero
    e710:	00000506 	br	e728 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e714:	000e6500 	call	e650 <alt_get_errno>
    e718:	1007883a 	mov	r3,r2
    e71c:	00801444 	movi	r2,81
    e720:	18800015 	stw	r2,0(r3)
    return -1;
    e724:	00bfffc4 	movi	r2,-1
  }
}
    e728:	e037883a 	mov	sp,fp
    e72c:	dfc00117 	ldw	ra,4(sp)
    e730:	df000017 	ldw	fp,0(sp)
    e734:	dec00204 	addi	sp,sp,8
    e738:	f800283a 	ret

0000e73c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e73c:	defffe04 	addi	sp,sp,-8
    e740:	dfc00115 	stw	ra,4(sp)
    e744:	df000015 	stw	fp,0(sp)
    e748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e74c:	d0a00b17 	ldw	r2,-32724(gp)
    e750:	10000326 	beq	r2,zero,e760 <alt_get_errno+0x24>
    e754:	d0a00b17 	ldw	r2,-32724(gp)
    e758:	103ee83a 	callr	r2
    e75c:	00000106 	br	e764 <alt_get_errno+0x28>
    e760:	d0a72004 	addi	r2,gp,-25472
}
    e764:	e037883a 	mov	sp,fp
    e768:	dfc00117 	ldw	ra,4(sp)
    e76c:	df000017 	ldw	fp,0(sp)
    e770:	dec00204 	addi	sp,sp,8
    e774:	f800283a 	ret

0000e778 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e778:	deffed04 	addi	sp,sp,-76
    e77c:	dfc01215 	stw	ra,72(sp)
    e780:	df001115 	stw	fp,68(sp)
    e784:	df001104 	addi	fp,sp,68
    e788:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e78c:	e0bfff17 	ldw	r2,-4(fp)
    e790:	10000616 	blt	r2,zero,e7ac <isatty+0x34>
    e794:	e0bfff17 	ldw	r2,-4(fp)
    e798:	10c00324 	muli	r3,r2,12
    e79c:	00800074 	movhi	r2,1
    e7a0:	10884204 	addi	r2,r2,8456
    e7a4:	1885883a 	add	r2,r3,r2
    e7a8:	00000106 	br	e7b0 <isatty+0x38>
    e7ac:	0005883a 	mov	r2,zero
    e7b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e7b4:	e0bfef17 	ldw	r2,-68(fp)
    e7b8:	10000e26 	beq	r2,zero,e7f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e7bc:	e0bfef17 	ldw	r2,-68(fp)
    e7c0:	10800017 	ldw	r2,0(r2)
    e7c4:	10800817 	ldw	r2,32(r2)
    e7c8:	1000021e 	bne	r2,zero,e7d4 <isatty+0x5c>
    {
      return 1;
    e7cc:	00800044 	movi	r2,1
    e7d0:	00000d06 	br	e808 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e7d4:	e0bff004 	addi	r2,fp,-64
    e7d8:	100b883a 	mov	r5,r2
    e7dc:	e13fff17 	ldw	r4,-4(fp)
    e7e0:	000e68c0 	call	e68c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e7e4:	e0bff117 	ldw	r2,-60(fp)
    e7e8:	10880020 	cmpeqi	r2,r2,8192
    e7ec:	10803fcc 	andi	r2,r2,255
    e7f0:	00000506 	br	e808 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7f4:	000e73c0 	call	e73c <alt_get_errno>
    e7f8:	1007883a 	mov	r3,r2
    e7fc:	00801444 	movi	r2,81
    e800:	18800015 	stw	r2,0(r3)
    return 0;
    e804:	0005883a 	mov	r2,zero
  }
}
    e808:	e037883a 	mov	sp,fp
    e80c:	dfc00117 	ldw	ra,4(sp)
    e810:	df000017 	ldw	fp,0(sp)
    e814:	dec00204 	addi	sp,sp,8
    e818:	f800283a 	ret

0000e81c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e81c:	defffc04 	addi	sp,sp,-16
    e820:	df000315 	stw	fp,12(sp)
    e824:	df000304 	addi	fp,sp,12
    e828:	e13ffd15 	stw	r4,-12(fp)
    e82c:	e17ffe15 	stw	r5,-8(fp)
    e830:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e834:	e0fffe17 	ldw	r3,-8(fp)
    e838:	e0bffd17 	ldw	r2,-12(fp)
    e83c:	18800c26 	beq	r3,r2,e870 <alt_load_section+0x54>
  {
    while( to != end )
    e840:	00000806 	br	e864 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e844:	e0bffe17 	ldw	r2,-8(fp)
    e848:	10c00104 	addi	r3,r2,4
    e84c:	e0fffe15 	stw	r3,-8(fp)
    e850:	e0fffd17 	ldw	r3,-12(fp)
    e854:	19000104 	addi	r4,r3,4
    e858:	e13ffd15 	stw	r4,-12(fp)
    e85c:	18c00017 	ldw	r3,0(r3)
    e860:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e864:	e0fffe17 	ldw	r3,-8(fp)
    e868:	e0bfff17 	ldw	r2,-4(fp)
    e86c:	18bff51e 	bne	r3,r2,e844 <__alt_data_end+0xff00e844>
    {
      *to++ = *from++;
    }
  }
}
    e870:	0001883a 	nop
    e874:	e037883a 	mov	sp,fp
    e878:	df000017 	ldw	fp,0(sp)
    e87c:	dec00104 	addi	sp,sp,4
    e880:	f800283a 	ret

0000e884 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e884:	defffe04 	addi	sp,sp,-8
    e888:	dfc00115 	stw	ra,4(sp)
    e88c:	df000015 	stw	fp,0(sp)
    e890:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e894:	01800074 	movhi	r6,1
    e898:	318cca04 	addi	r6,r6,13096
    e89c:	01400074 	movhi	r5,1
    e8a0:	2945cf04 	addi	r5,r5,5948
    e8a4:	01000074 	movhi	r4,1
    e8a8:	210cca04 	addi	r4,r4,13096
    e8ac:	000e81c0 	call	e81c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e8b0:	01800034 	movhi	r6,0
    e8b4:	31809104 	addi	r6,r6,580
    e8b8:	01400034 	movhi	r5,0
    e8bc:	29400804 	addi	r5,r5,32
    e8c0:	01000034 	movhi	r4,0
    e8c4:	21000804 	addi	r4,r4,32
    e8c8:	000e81c0 	call	e81c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e8cc:	01800074 	movhi	r6,1
    e8d0:	3185cf04 	addi	r6,r6,5948
    e8d4:	01400074 	movhi	r5,1
    e8d8:	2943e004 	addi	r5,r5,3968
    e8dc:	01000074 	movhi	r4,1
    e8e0:	2103e004 	addi	r4,r4,3968
    e8e4:	000e81c0 	call	e81c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e8e8:	000fe6c0 	call	fe6c <alt_dcache_flush_all>
  alt_icache_flush_all();
    e8ec:	00100540 	call	10054 <alt_icache_flush_all>
}
    e8f0:	0001883a 	nop
    e8f4:	e037883a 	mov	sp,fp
    e8f8:	dfc00117 	ldw	ra,4(sp)
    e8fc:	df000017 	ldw	fp,0(sp)
    e900:	dec00204 	addi	sp,sp,8
    e904:	f800283a 	ret

0000e908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e908:	defffe04 	addi	sp,sp,-8
    e90c:	dfc00115 	stw	ra,4(sp)
    e910:	df000015 	stw	fp,0(sp)
    e914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e918:	d0a00b17 	ldw	r2,-32724(gp)
    e91c:	10000326 	beq	r2,zero,e92c <alt_get_errno+0x24>
    e920:	d0a00b17 	ldw	r2,-32724(gp)
    e924:	103ee83a 	callr	r2
    e928:	00000106 	br	e930 <alt_get_errno+0x28>
    e92c:	d0a72004 	addi	r2,gp,-25472
}
    e930:	e037883a 	mov	sp,fp
    e934:	dfc00117 	ldw	ra,4(sp)
    e938:	df000017 	ldw	fp,0(sp)
    e93c:	dec00204 	addi	sp,sp,8
    e940:	f800283a 	ret

0000e944 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e944:	defff904 	addi	sp,sp,-28
    e948:	dfc00615 	stw	ra,24(sp)
    e94c:	df000515 	stw	fp,20(sp)
    e950:	df000504 	addi	fp,sp,20
    e954:	e13ffd15 	stw	r4,-12(fp)
    e958:	e17ffe15 	stw	r5,-8(fp)
    e95c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e960:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e964:	e0bffd17 	ldw	r2,-12(fp)
    e968:	10000616 	blt	r2,zero,e984 <lseek+0x40>
    e96c:	e0bffd17 	ldw	r2,-12(fp)
    e970:	10c00324 	muli	r3,r2,12
    e974:	00800074 	movhi	r2,1
    e978:	10884204 	addi	r2,r2,8456
    e97c:	1885883a 	add	r2,r3,r2
    e980:	00000106 	br	e988 <lseek+0x44>
    e984:	0005883a 	mov	r2,zero
    e988:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e98c:	e0bffc17 	ldw	r2,-16(fp)
    e990:	10001026 	beq	r2,zero,e9d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e994:	e0bffc17 	ldw	r2,-16(fp)
    e998:	10800017 	ldw	r2,0(r2)
    e99c:	10800717 	ldw	r2,28(r2)
    e9a0:	10000926 	beq	r2,zero,e9c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e9a4:	e0bffc17 	ldw	r2,-16(fp)
    e9a8:	10800017 	ldw	r2,0(r2)
    e9ac:	10800717 	ldw	r2,28(r2)
    e9b0:	e1bfff17 	ldw	r6,-4(fp)
    e9b4:	e17ffe17 	ldw	r5,-8(fp)
    e9b8:	e13ffc17 	ldw	r4,-16(fp)
    e9bc:	103ee83a 	callr	r2
    e9c0:	e0bffb15 	stw	r2,-20(fp)
    e9c4:	00000506 	br	e9dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e9c8:	00bfde84 	movi	r2,-134
    e9cc:	e0bffb15 	stw	r2,-20(fp)
    e9d0:	00000206 	br	e9dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e9d4:	00bfebc4 	movi	r2,-81
    e9d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e9dc:	e0bffb17 	ldw	r2,-20(fp)
    e9e0:	1000070e 	bge	r2,zero,ea00 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e9e4:	000e9080 	call	e908 <alt_get_errno>
    e9e8:	1007883a 	mov	r3,r2
    e9ec:	e0bffb17 	ldw	r2,-20(fp)
    e9f0:	0085c83a 	sub	r2,zero,r2
    e9f4:	18800015 	stw	r2,0(r3)
    rc = -1;
    e9f8:	00bfffc4 	movi	r2,-1
    e9fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ea00:	e0bffb17 	ldw	r2,-20(fp)
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	df000017 	ldw	fp,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea18:	defffd04 	addi	sp,sp,-12
    ea1c:	dfc00215 	stw	ra,8(sp)
    ea20:	df000115 	stw	fp,4(sp)
    ea24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea28:	0009883a 	mov	r4,zero
    ea2c:	000eec00 	call	eec0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ea30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea34:	000eef80 	call	eef8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea38:	01800074 	movhi	r6,1
    ea3c:	3185c704 	addi	r6,r6,5916
    ea40:	01400074 	movhi	r5,1
    ea44:	2945c704 	addi	r5,r5,5916
    ea48:	01000074 	movhi	r4,1
    ea4c:	2105c704 	addi	r4,r4,5916
    ea50:	00103ec0 	call	103ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea54:	000ff940 	call	ff94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea58:	01000074 	movhi	r4,1
    ea5c:	213ffd04 	addi	r4,r4,-12
    ea60:	0010bec0 	call	10bec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea64:	d0a72417 	ldw	r2,-25456(gp)
    ea68:	d0e72517 	ldw	r3,-25452(gp)
    ea6c:	d1272617 	ldw	r4,-25448(gp)
    ea70:	200d883a 	mov	r6,r4
    ea74:	180b883a 	mov	r5,r3
    ea78:	1009883a 	mov	r4,r2
    ea7c:	0000f1c0 	call	f1c <main>
    ea80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ea84:	01000044 	movi	r4,1
    ea88:	000e5540 	call	e554 <close>
  exit (result);
    ea8c:	e13fff17 	ldw	r4,-4(fp)
    ea90:	0010c000 	call	10c00 <exit>

0000ea94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ea94:	defffe04 	addi	sp,sp,-8
    ea98:	df000115 	stw	fp,4(sp)
    ea9c:	df000104 	addi	fp,sp,4
    eaa0:	e13fff15 	stw	r4,-4(fp)
}
    eaa4:	0001883a 	nop
    eaa8:	e037883a 	mov	sp,fp
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00104 	addi	sp,sp,4
    eab4:	f800283a 	ret

0000eab8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eab8:	defffe04 	addi	sp,sp,-8
    eabc:	df000115 	stw	fp,4(sp)
    eac0:	df000104 	addi	fp,sp,4
    eac4:	e13fff15 	stw	r4,-4(fp)
}
    eac8:	0001883a 	nop
    eacc:	e037883a 	mov	sp,fp
    ead0:	df000017 	ldw	fp,0(sp)
    ead4:	dec00104 	addi	sp,sp,4
    ead8:	f800283a 	ret

0000eadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eadc:	defffe04 	addi	sp,sp,-8
    eae0:	dfc00115 	stw	ra,4(sp)
    eae4:	df000015 	stw	fp,0(sp)
    eae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eaec:	d0a00b17 	ldw	r2,-32724(gp)
    eaf0:	10000326 	beq	r2,zero,eb00 <alt_get_errno+0x24>
    eaf4:	d0a00b17 	ldw	r2,-32724(gp)
    eaf8:	103ee83a 	callr	r2
    eafc:	00000106 	br	eb04 <alt_get_errno+0x28>
    eb00:	d0a72004 	addi	r2,gp,-25472
}
    eb04:	e037883a 	mov	sp,fp
    eb08:	dfc00117 	ldw	ra,4(sp)
    eb0c:	df000017 	ldw	fp,0(sp)
    eb10:	dec00204 	addi	sp,sp,8
    eb14:	f800283a 	ret

0000eb18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eb18:	defff904 	addi	sp,sp,-28
    eb1c:	dfc00615 	stw	ra,24(sp)
    eb20:	df000515 	stw	fp,20(sp)
    eb24:	df000504 	addi	fp,sp,20
    eb28:	e13ffd15 	stw	r4,-12(fp)
    eb2c:	e17ffe15 	stw	r5,-8(fp)
    eb30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb34:	e0bffd17 	ldw	r2,-12(fp)
    eb38:	10000616 	blt	r2,zero,eb54 <read+0x3c>
    eb3c:	e0bffd17 	ldw	r2,-12(fp)
    eb40:	10c00324 	muli	r3,r2,12
    eb44:	00800074 	movhi	r2,1
    eb48:	10884204 	addi	r2,r2,8456
    eb4c:	1885883a 	add	r2,r3,r2
    eb50:	00000106 	br	eb58 <read+0x40>
    eb54:	0005883a 	mov	r2,zero
    eb58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb5c:	e0bffb17 	ldw	r2,-20(fp)
    eb60:	10002226 	beq	r2,zero,ebec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb64:	e0bffb17 	ldw	r2,-20(fp)
    eb68:	10800217 	ldw	r2,8(r2)
    eb6c:	108000cc 	andi	r2,r2,3
    eb70:	10800060 	cmpeqi	r2,r2,1
    eb74:	1000181e 	bne	r2,zero,ebd8 <read+0xc0>
        (fd->dev->read))
    eb78:	e0bffb17 	ldw	r2,-20(fp)
    eb7c:	10800017 	ldw	r2,0(r2)
    eb80:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb84:	10001426 	beq	r2,zero,ebd8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eb88:	e0bffb17 	ldw	r2,-20(fp)
    eb8c:	10800017 	ldw	r2,0(r2)
    eb90:	10800517 	ldw	r2,20(r2)
    eb94:	e0ffff17 	ldw	r3,-4(fp)
    eb98:	180d883a 	mov	r6,r3
    eb9c:	e17ffe17 	ldw	r5,-8(fp)
    eba0:	e13ffb17 	ldw	r4,-20(fp)
    eba4:	103ee83a 	callr	r2
    eba8:	e0bffc15 	stw	r2,-16(fp)
    ebac:	e0bffc17 	ldw	r2,-16(fp)
    ebb0:	1000070e 	bge	r2,zero,ebd0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ebb4:	000eadc0 	call	eadc <alt_get_errno>
    ebb8:	1007883a 	mov	r3,r2
    ebbc:	e0bffc17 	ldw	r2,-16(fp)
    ebc0:	0085c83a 	sub	r2,zero,r2
    ebc4:	18800015 	stw	r2,0(r3)
          return -1;
    ebc8:	00bfffc4 	movi	r2,-1
    ebcc:	00000c06 	br	ec00 <read+0xe8>
        }
        return rval;
    ebd0:	e0bffc17 	ldw	r2,-16(fp)
    ebd4:	00000a06 	br	ec00 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ebd8:	000eadc0 	call	eadc <alt_get_errno>
    ebdc:	1007883a 	mov	r3,r2
    ebe0:	00800344 	movi	r2,13
    ebe4:	18800015 	stw	r2,0(r3)
    ebe8:	00000406 	br	ebfc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ebec:	000eadc0 	call	eadc <alt_get_errno>
    ebf0:	1007883a 	mov	r3,r2
    ebf4:	00801444 	movi	r2,81
    ebf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ebfc:	00bfffc4 	movi	r2,-1
}
    ec00:	e037883a 	mov	sp,fp
    ec04:	dfc00117 	ldw	ra,4(sp)
    ec08:	df000017 	ldw	fp,0(sp)
    ec0c:	dec00204 	addi	sp,sp,8
    ec10:	f800283a 	ret

0000ec14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ec14:	defffe04 	addi	sp,sp,-8
    ec18:	df000115 	stw	fp,4(sp)
    ec1c:	df000104 	addi	fp,sp,4
    ec20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ec24:	e0bfff17 	ldw	r2,-4(fp)
    ec28:	108000d0 	cmplti	r2,r2,3
    ec2c:	10000d1e 	bne	r2,zero,ec64 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ec30:	00800074 	movhi	r2,1
    ec34:	10884204 	addi	r2,r2,8456
    ec38:	e0ffff17 	ldw	r3,-4(fp)
    ec3c:	18c00324 	muli	r3,r3,12
    ec40:	10c5883a 	add	r2,r2,r3
    ec44:	10800204 	addi	r2,r2,8
    ec48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ec4c:	00800074 	movhi	r2,1
    ec50:	10884204 	addi	r2,r2,8456
    ec54:	e0ffff17 	ldw	r3,-4(fp)
    ec58:	18c00324 	muli	r3,r3,12
    ec5c:	10c5883a 	add	r2,r2,r3
    ec60:	10000015 	stw	zero,0(r2)
  }
}
    ec64:	0001883a 	nop
    ec68:	e037883a 	mov	sp,fp
    ec6c:	df000017 	ldw	fp,0(sp)
    ec70:	dec00104 	addi	sp,sp,4
    ec74:	f800283a 	ret

0000ec78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ec78:	defff904 	addi	sp,sp,-28
    ec7c:	df000615 	stw	fp,24(sp)
    ec80:	df000604 	addi	fp,sp,24
    ec84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec88:	0005303a 	rdctl	r2,status
    ec8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec90:	e0fffe17 	ldw	r3,-8(fp)
    ec94:	00bfff84 	movi	r2,-2
    ec98:	1884703a 	and	r2,r3,r2
    ec9c:	1001703a 	wrctl	status,r2
  
  return context;
    eca0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eca4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eca8:	d0a00c17 	ldw	r2,-32720(gp)
    ecac:	10c000c4 	addi	r3,r2,3
    ecb0:	00bfff04 	movi	r2,-4
    ecb4:	1884703a 	and	r2,r3,r2
    ecb8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ecbc:	d0e00c17 	ldw	r3,-32720(gp)
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
    ecc4:	1887883a 	add	r3,r3,r2
    ecc8:	00804034 	movhi	r2,256
    eccc:	10800004 	addi	r2,r2,0
    ecd0:	10c0062e 	bgeu	r2,r3,ecec <sbrk+0x74>
    ecd4:	e0bffb17 	ldw	r2,-20(fp)
    ecd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecdc:	e0bffa17 	ldw	r2,-24(fp)
    ece0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ece4:	00bfffc4 	movi	r2,-1
    ece8:	00000b06 	br	ed18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ecec:	d0a00c17 	ldw	r2,-32720(gp)
    ecf0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ecf4:	d0e00c17 	ldw	r3,-32720(gp)
    ecf8:	e0bfff17 	ldw	r2,-4(fp)
    ecfc:	1885883a 	add	r2,r3,r2
    ed00:	d0a00c15 	stw	r2,-32720(gp)
    ed04:	e0bffb17 	ldw	r2,-20(fp)
    ed08:	e0bffc15 	stw	r2,-16(fp)
    ed0c:	e0bffc17 	ldw	r2,-16(fp)
    ed10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ed14:	e0bffd17 	ldw	r2,-12(fp)
} 
    ed18:	e037883a 	mov	sp,fp
    ed1c:	df000017 	ldw	fp,0(sp)
    ed20:	dec00104 	addi	sp,sp,4
    ed24:	f800283a 	ret

0000ed28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ed28:	defffd04 	addi	sp,sp,-12
    ed2c:	dfc00215 	stw	ra,8(sp)
    ed30:	df000115 	stw	fp,4(sp)
    ed34:	df000104 	addi	fp,sp,4
    ed38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ed3c:	e13fff17 	ldw	r4,-4(fp)
    ed40:	000fd140 	call	fd14 <alt_busy_sleep>
}
    ed44:	e037883a 	mov	sp,fp
    ed48:	dfc00117 	ldw	ra,4(sp)
    ed4c:	df000017 	ldw	fp,0(sp)
    ed50:	dec00204 	addi	sp,sp,8
    ed54:	f800283a 	ret

0000ed58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed58:	defffe04 	addi	sp,sp,-8
    ed5c:	dfc00115 	stw	ra,4(sp)
    ed60:	df000015 	stw	fp,0(sp)
    ed64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed68:	d0a00b17 	ldw	r2,-32724(gp)
    ed6c:	10000326 	beq	r2,zero,ed7c <alt_get_errno+0x24>
    ed70:	d0a00b17 	ldw	r2,-32724(gp)
    ed74:	103ee83a 	callr	r2
    ed78:	00000106 	br	ed80 <alt_get_errno+0x28>
    ed7c:	d0a72004 	addi	r2,gp,-25472
}
    ed80:	e037883a 	mov	sp,fp
    ed84:	dfc00117 	ldw	ra,4(sp)
    ed88:	df000017 	ldw	fp,0(sp)
    ed8c:	dec00204 	addi	sp,sp,8
    ed90:	f800283a 	ret

0000ed94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ed94:	defff904 	addi	sp,sp,-28
    ed98:	dfc00615 	stw	ra,24(sp)
    ed9c:	df000515 	stw	fp,20(sp)
    eda0:	df000504 	addi	fp,sp,20
    eda4:	e13ffd15 	stw	r4,-12(fp)
    eda8:	e17ffe15 	stw	r5,-8(fp)
    edac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edb0:	e0bffd17 	ldw	r2,-12(fp)
    edb4:	10000616 	blt	r2,zero,edd0 <write+0x3c>
    edb8:	e0bffd17 	ldw	r2,-12(fp)
    edbc:	10c00324 	muli	r3,r2,12
    edc0:	00800074 	movhi	r2,1
    edc4:	10884204 	addi	r2,r2,8456
    edc8:	1885883a 	add	r2,r3,r2
    edcc:	00000106 	br	edd4 <write+0x40>
    edd0:	0005883a 	mov	r2,zero
    edd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    edd8:	e0bffb17 	ldw	r2,-20(fp)
    eddc:	10002126 	beq	r2,zero,ee64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ede0:	e0bffb17 	ldw	r2,-20(fp)
    ede4:	10800217 	ldw	r2,8(r2)
    ede8:	108000cc 	andi	r2,r2,3
    edec:	10001826 	beq	r2,zero,ee50 <write+0xbc>
    edf0:	e0bffb17 	ldw	r2,-20(fp)
    edf4:	10800017 	ldw	r2,0(r2)
    edf8:	10800617 	ldw	r2,24(r2)
    edfc:	10001426 	beq	r2,zero,ee50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee00:	e0bffb17 	ldw	r2,-20(fp)
    ee04:	10800017 	ldw	r2,0(r2)
    ee08:	10800617 	ldw	r2,24(r2)
    ee0c:	e0ffff17 	ldw	r3,-4(fp)
    ee10:	180d883a 	mov	r6,r3
    ee14:	e17ffe17 	ldw	r5,-8(fp)
    ee18:	e13ffb17 	ldw	r4,-20(fp)
    ee1c:	103ee83a 	callr	r2
    ee20:	e0bffc15 	stw	r2,-16(fp)
    ee24:	e0bffc17 	ldw	r2,-16(fp)
    ee28:	1000070e 	bge	r2,zero,ee48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ee2c:	000ed580 	call	ed58 <alt_get_errno>
    ee30:	1007883a 	mov	r3,r2
    ee34:	e0bffc17 	ldw	r2,-16(fp)
    ee38:	0085c83a 	sub	r2,zero,r2
    ee3c:	18800015 	stw	r2,0(r3)
        return -1;
    ee40:	00bfffc4 	movi	r2,-1
    ee44:	00000c06 	br	ee78 <write+0xe4>
      }
      return rval;
    ee48:	e0bffc17 	ldw	r2,-16(fp)
    ee4c:	00000a06 	br	ee78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ee50:	000ed580 	call	ed58 <alt_get_errno>
    ee54:	1007883a 	mov	r3,r2
    ee58:	00800344 	movi	r2,13
    ee5c:	18800015 	stw	r2,0(r3)
    ee60:	00000406 	br	ee74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ee64:	000ed580 	call	ed58 <alt_get_errno>
    ee68:	1007883a 	mov	r3,r2
    ee6c:	00801444 	movi	r2,81
    ee70:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ee74:	00bfffc4 	movi	r2,-1
}
    ee78:	e037883a 	mov	sp,fp
    ee7c:	dfc00117 	ldw	ra,4(sp)
    ee80:	df000017 	ldw	fp,0(sp)
    ee84:	dec00204 	addi	sp,sp,8
    ee88:	f800283a 	ret

0000ee8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ee8c:	defffd04 	addi	sp,sp,-12
    ee90:	dfc00215 	stw	ra,8(sp)
    ee94:	df000115 	stw	fp,4(sp)
    ee98:	df000104 	addi	fp,sp,4
    ee9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eea0:	d1600804 	addi	r5,gp,-32736
    eea4:	e13fff17 	ldw	r4,-4(fp)
    eea8:	000fef00 	call	fef0 <alt_dev_llist_insert>
}
    eeac:	e037883a 	mov	sp,fp
    eeb0:	dfc00117 	ldw	ra,4(sp)
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00204 	addi	sp,sp,8
    eebc:	f800283a 	ret

0000eec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eec0:	defffd04 	addi	sp,sp,-12
    eec4:	dfc00215 	stw	ra,8(sp)
    eec8:	df000115 	stw	fp,4(sp)
    eecc:	df000104 	addi	fp,sp,4
    eed0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    eed4:	00108600 	call	10860 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    eed8:	00800044 	movi	r2,1
    eedc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    eee0:	0001883a 	nop
    eee4:	e037883a 	mov	sp,fp
    eee8:	dfc00117 	ldw	ra,4(sp)
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00204 	addi	sp,sp,8
    eef4:	f800283a 	ret

0000eef8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eef8:	defffe04 	addi	sp,sp,-8
    eefc:	dfc00115 	stw	ra,4(sp)
    ef00:	df000015 	stw	fp,0(sp)
    ef04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ef08:	00804034 	movhi	r2,256
    ef0c:	10840004 	addi	r2,r2,4096
    ef10:	d0a72715 	stw	r2,-25444(gp)
    ef14:	0080bef4 	movhi	r2,763
    ef18:	10bc2004 	addi	r2,r2,-3968
    ef1c:	d0a72815 	stw	r2,-25440(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ef20:	01c0fa04 	movi	r7,1000
    ef24:	01800104 	movi	r6,4
    ef28:	000b883a 	mov	r5,zero
    ef2c:	01004034 	movhi	r4,256
    ef30:	21040804 	addi	r4,r4,4128
    ef34:	000fa540 	call	fa54 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ef38:	000d883a 	mov	r6,zero
    ef3c:	000b883a 	mov	r5,zero
    ef40:	01000074 	movhi	r4,1
    ef44:	2108ac04 	addi	r4,r4,8880
    ef48:	000f0d80 	call	f0d8 <altera_avalon_jtag_uart_init>
    ef4c:	01000074 	movhi	r4,1
    ef50:	2108a204 	addi	r4,r4,8840
    ef54:	000ee8c0 	call	ee8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ef58:	0001883a 	nop
}
    ef5c:	0001883a 	nop
    ef60:	e037883a 	mov	sp,fp
    ef64:	dfc00117 	ldw	ra,4(sp)
    ef68:	df000017 	ldw	fp,0(sp)
    ef6c:	dec00204 	addi	sp,sp,8
    ef70:	f800283a 	ret

0000ef74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ef74:	defffa04 	addi	sp,sp,-24
    ef78:	dfc00515 	stw	ra,20(sp)
    ef7c:	df000415 	stw	fp,16(sp)
    ef80:	df000404 	addi	fp,sp,16
    ef84:	e13ffd15 	stw	r4,-12(fp)
    ef88:	e17ffe15 	stw	r5,-8(fp)
    ef8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef90:	e0bffd17 	ldw	r2,-12(fp)
    ef94:	10800017 	ldw	r2,0(r2)
    ef98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ef9c:	e0bffc17 	ldw	r2,-16(fp)
    efa0:	10c00a04 	addi	r3,r2,40
    efa4:	e0bffd17 	ldw	r2,-12(fp)
    efa8:	10800217 	ldw	r2,8(r2)
    efac:	100f883a 	mov	r7,r2
    efb0:	e1bfff17 	ldw	r6,-4(fp)
    efb4:	e17ffe17 	ldw	r5,-8(fp)
    efb8:	1809883a 	mov	r4,r3
    efbc:	000f59c0 	call	f59c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    efc0:	e037883a 	mov	sp,fp
    efc4:	dfc00117 	ldw	ra,4(sp)
    efc8:	df000017 	ldw	fp,0(sp)
    efcc:	dec00204 	addi	sp,sp,8
    efd0:	f800283a 	ret

0000efd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    efd4:	defffa04 	addi	sp,sp,-24
    efd8:	dfc00515 	stw	ra,20(sp)
    efdc:	df000415 	stw	fp,16(sp)
    efe0:	df000404 	addi	fp,sp,16
    efe4:	e13ffd15 	stw	r4,-12(fp)
    efe8:	e17ffe15 	stw	r5,-8(fp)
    efec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    eff0:	e0bffd17 	ldw	r2,-12(fp)
    eff4:	10800017 	ldw	r2,0(r2)
    eff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    effc:	e0bffc17 	ldw	r2,-16(fp)
    f000:	10c00a04 	addi	r3,r2,40
    f004:	e0bffd17 	ldw	r2,-12(fp)
    f008:	10800217 	ldw	r2,8(r2)
    f00c:	100f883a 	mov	r7,r2
    f010:	e1bfff17 	ldw	r6,-4(fp)
    f014:	e17ffe17 	ldw	r5,-8(fp)
    f018:	1809883a 	mov	r4,r3
    f01c:	000f7b80 	call	f7b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f020:	e037883a 	mov	sp,fp
    f024:	dfc00117 	ldw	ra,4(sp)
    f028:	df000017 	ldw	fp,0(sp)
    f02c:	dec00204 	addi	sp,sp,8
    f030:	f800283a 	ret

0000f034 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f034:	defffc04 	addi	sp,sp,-16
    f038:	dfc00315 	stw	ra,12(sp)
    f03c:	df000215 	stw	fp,8(sp)
    f040:	df000204 	addi	fp,sp,8
    f044:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f048:	e0bfff17 	ldw	r2,-4(fp)
    f04c:	10800017 	ldw	r2,0(r2)
    f050:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f054:	e0bffe17 	ldw	r2,-8(fp)
    f058:	10c00a04 	addi	r3,r2,40
    f05c:	e0bfff17 	ldw	r2,-4(fp)
    f060:	10800217 	ldw	r2,8(r2)
    f064:	100b883a 	mov	r5,r2
    f068:	1809883a 	mov	r4,r3
    f06c:	000f4440 	call	f444 <altera_avalon_jtag_uart_close>
}
    f070:	e037883a 	mov	sp,fp
    f074:	dfc00117 	ldw	ra,4(sp)
    f078:	df000017 	ldw	fp,0(sp)
    f07c:	dec00204 	addi	sp,sp,8
    f080:	f800283a 	ret

0000f084 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f084:	defffa04 	addi	sp,sp,-24
    f088:	dfc00515 	stw	ra,20(sp)
    f08c:	df000415 	stw	fp,16(sp)
    f090:	df000404 	addi	fp,sp,16
    f094:	e13ffd15 	stw	r4,-12(fp)
    f098:	e17ffe15 	stw	r5,-8(fp)
    f09c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f0a0:	e0bffd17 	ldw	r2,-12(fp)
    f0a4:	10800017 	ldw	r2,0(r2)
    f0a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	10800a04 	addi	r2,r2,40
    f0b4:	e1bfff17 	ldw	r6,-4(fp)
    f0b8:	e17ffe17 	ldw	r5,-8(fp)
    f0bc:	1009883a 	mov	r4,r2
    f0c0:	000f4ac0 	call	f4ac <altera_avalon_jtag_uart_ioctl>
}
    f0c4:	e037883a 	mov	sp,fp
    f0c8:	dfc00117 	ldw	ra,4(sp)
    f0cc:	df000017 	ldw	fp,0(sp)
    f0d0:	dec00204 	addi	sp,sp,8
    f0d4:	f800283a 	ret

0000f0d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f0d8:	defffa04 	addi	sp,sp,-24
    f0dc:	dfc00515 	stw	ra,20(sp)
    f0e0:	df000415 	stw	fp,16(sp)
    f0e4:	df000404 	addi	fp,sp,16
    f0e8:	e13ffd15 	stw	r4,-12(fp)
    f0ec:	e17ffe15 	stw	r5,-8(fp)
    f0f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0f4:	e0bffd17 	ldw	r2,-12(fp)
    f0f8:	00c00044 	movi	r3,1
    f0fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f100:	e0bffd17 	ldw	r2,-12(fp)
    f104:	10800017 	ldw	r2,0(r2)
    f108:	10800104 	addi	r2,r2,4
    f10c:	1007883a 	mov	r3,r2
    f110:	e0bffd17 	ldw	r2,-12(fp)
    f114:	10800817 	ldw	r2,32(r2)
    f118:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f11c:	e0bffe17 	ldw	r2,-8(fp)
    f120:	e0ffff17 	ldw	r3,-4(fp)
    f124:	d8000015 	stw	zero,0(sp)
    f128:	e1fffd17 	ldw	r7,-12(fp)
    f12c:	01800074 	movhi	r6,1
    f130:	31bc6604 	addi	r6,r6,-3688
    f134:	180b883a 	mov	r5,r3
    f138:	1009883a 	mov	r4,r2
    f13c:	00100880 	call	10088 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f140:	e0bffd17 	ldw	r2,-12(fp)
    f144:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f148:	e0bffd17 	ldw	r2,-12(fp)
    f14c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f150:	d0e72a17 	ldw	r3,-25432(gp)
    f154:	e1fffd17 	ldw	r7,-12(fp)
    f158:	01800074 	movhi	r6,1
    f15c:	31bce904 	addi	r6,r6,-3164
    f160:	180b883a 	mov	r5,r3
    f164:	1009883a 	mov	r4,r2
    f168:	000fbe80 	call	fbe8 <alt_alarm_start>
    f16c:	1000040e 	bge	r2,zero,f180 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f170:	e0fffd17 	ldw	r3,-12(fp)
    f174:	00a00034 	movhi	r2,32768
    f178:	10bfffc4 	addi	r2,r2,-1
    f17c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f180:	0001883a 	nop
    f184:	e037883a 	mov	sp,fp
    f188:	dfc00117 	ldw	ra,4(sp)
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00204 	addi	sp,sp,8
    f194:	f800283a 	ret

0000f198 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f198:	defff804 	addi	sp,sp,-32
    f19c:	df000715 	stw	fp,28(sp)
    f1a0:	df000704 	addi	fp,sp,28
    f1a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f1a8:	e0bfff17 	ldw	r2,-4(fp)
    f1ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f1b0:	e0bffb17 	ldw	r2,-20(fp)
    f1b4:	10800017 	ldw	r2,0(r2)
    f1b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1bc:	e0bffc17 	ldw	r2,-16(fp)
    f1c0:	10800104 	addi	r2,r2,4
    f1c4:	10800037 	ldwio	r2,0(r2)
    f1c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f1cc:	e0bffd17 	ldw	r2,-12(fp)
    f1d0:	1080c00c 	andi	r2,r2,768
    f1d4:	10006d26 	beq	r2,zero,f38c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f1d8:	e0bffd17 	ldw	r2,-12(fp)
    f1dc:	1080400c 	andi	r2,r2,256
    f1e0:	10003526 	beq	r2,zero,f2b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f1e4:	00800074 	movhi	r2,1
    f1e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1ec:	e0bffb17 	ldw	r2,-20(fp)
    f1f0:	10800a17 	ldw	r2,40(r2)
    f1f4:	10800044 	addi	r2,r2,1
    f1f8:	1081ffcc 	andi	r2,r2,2047
    f1fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f200:	e0bffb17 	ldw	r2,-20(fp)
    f204:	10c00b17 	ldw	r3,44(r2)
    f208:	e0bffe17 	ldw	r2,-8(fp)
    f20c:	18801526 	beq	r3,r2,f264 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f210:	e0bffc17 	ldw	r2,-16(fp)
    f214:	10800037 	ldwio	r2,0(r2)
    f218:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f21c:	e0bff917 	ldw	r2,-28(fp)
    f220:	10a0000c 	andi	r2,r2,32768
    f224:	10001126 	beq	r2,zero,f26c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f228:	e0bffb17 	ldw	r2,-20(fp)
    f22c:	10800a17 	ldw	r2,40(r2)
    f230:	e0fff917 	ldw	r3,-28(fp)
    f234:	1809883a 	mov	r4,r3
    f238:	e0fffb17 	ldw	r3,-20(fp)
    f23c:	1885883a 	add	r2,r3,r2
    f240:	10800e04 	addi	r2,r2,56
    f244:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f248:	e0bffb17 	ldw	r2,-20(fp)
    f24c:	10800a17 	ldw	r2,40(r2)
    f250:	10800044 	addi	r2,r2,1
    f254:	10c1ffcc 	andi	r3,r2,2047
    f258:	e0bffb17 	ldw	r2,-20(fp)
    f25c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f260:	003fe206 	br	f1ec <__alt_data_end+0xff00f1ec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f264:	0001883a 	nop
    f268:	00000106 	br	f270 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f26c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f270:	e0bff917 	ldw	r2,-28(fp)
    f274:	10bfffec 	andhi	r2,r2,65535
    f278:	10000f26 	beq	r2,zero,f2b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f27c:	e0bffb17 	ldw	r2,-20(fp)
    f280:	10c00817 	ldw	r3,32(r2)
    f284:	00bfff84 	movi	r2,-2
    f288:	1886703a 	and	r3,r3,r2
    f28c:	e0bffb17 	ldw	r2,-20(fp)
    f290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f294:	e0bffc17 	ldw	r2,-16(fp)
    f298:	10800104 	addi	r2,r2,4
    f29c:	1007883a 	mov	r3,r2
    f2a0:	e0bffb17 	ldw	r2,-20(fp)
    f2a4:	10800817 	ldw	r2,32(r2)
    f2a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f2ac:	e0bffc17 	ldw	r2,-16(fp)
    f2b0:	10800104 	addi	r2,r2,4
    f2b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f2b8:	e0bffd17 	ldw	r2,-12(fp)
    f2bc:	1080800c 	andi	r2,r2,512
    f2c0:	103fbe26 	beq	r2,zero,f1bc <__alt_data_end+0xff00f1bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f2c4:	e0bffd17 	ldw	r2,-12(fp)
    f2c8:	1004d43a 	srli	r2,r2,16
    f2cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2d0:	00001406 	br	f324 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f2d4:	e0bffc17 	ldw	r2,-16(fp)
    f2d8:	e0fffb17 	ldw	r3,-20(fp)
    f2dc:	18c00d17 	ldw	r3,52(r3)
    f2e0:	e13ffb17 	ldw	r4,-20(fp)
    f2e4:	20c7883a 	add	r3,r4,r3
    f2e8:	18c20e04 	addi	r3,r3,2104
    f2ec:	18c00003 	ldbu	r3,0(r3)
    f2f0:	18c03fcc 	andi	r3,r3,255
    f2f4:	18c0201c 	xori	r3,r3,128
    f2f8:	18ffe004 	addi	r3,r3,-128
    f2fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f300:	e0bffb17 	ldw	r2,-20(fp)
    f304:	10800d17 	ldw	r2,52(r2)
    f308:	10800044 	addi	r2,r2,1
    f30c:	10c1ffcc 	andi	r3,r2,2047
    f310:	e0bffb17 	ldw	r2,-20(fp)
    f314:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f318:	e0bffa17 	ldw	r2,-24(fp)
    f31c:	10bfffc4 	addi	r2,r2,-1
    f320:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f324:	e0bffa17 	ldw	r2,-24(fp)
    f328:	10000526 	beq	r2,zero,f340 <altera_avalon_jtag_uart_irq+0x1a8>
    f32c:	e0bffb17 	ldw	r2,-20(fp)
    f330:	10c00d17 	ldw	r3,52(r2)
    f334:	e0bffb17 	ldw	r2,-20(fp)
    f338:	10800c17 	ldw	r2,48(r2)
    f33c:	18bfe51e 	bne	r3,r2,f2d4 <__alt_data_end+0xff00f2d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f340:	e0bffa17 	ldw	r2,-24(fp)
    f344:	103f9d26 	beq	r2,zero,f1bc <__alt_data_end+0xff00f1bc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f348:	e0bffb17 	ldw	r2,-20(fp)
    f34c:	10c00817 	ldw	r3,32(r2)
    f350:	00bfff44 	movi	r2,-3
    f354:	1886703a 	and	r3,r3,r2
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f360:	e0bffb17 	ldw	r2,-20(fp)
    f364:	10800017 	ldw	r2,0(r2)
    f368:	10800104 	addi	r2,r2,4
    f36c:	1007883a 	mov	r3,r2
    f370:	e0bffb17 	ldw	r2,-20(fp)
    f374:	10800817 	ldw	r2,32(r2)
    f378:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f37c:	e0bffc17 	ldw	r2,-16(fp)
    f380:	10800104 	addi	r2,r2,4
    f384:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f388:	003f8c06 	br	f1bc <__alt_data_end+0xff00f1bc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f38c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f390:	0001883a 	nop
    f394:	e037883a 	mov	sp,fp
    f398:	df000017 	ldw	fp,0(sp)
    f39c:	dec00104 	addi	sp,sp,4
    f3a0:	f800283a 	ret

0000f3a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f3a4:	defff804 	addi	sp,sp,-32
    f3a8:	df000715 	stw	fp,28(sp)
    f3ac:	df000704 	addi	fp,sp,28
    f3b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f3b4:	e0bffb17 	ldw	r2,-20(fp)
    f3b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f3bc:	e0bff917 	ldw	r2,-28(fp)
    f3c0:	10800017 	ldw	r2,0(r2)
    f3c4:	10800104 	addi	r2,r2,4
    f3c8:	10800037 	ldwio	r2,0(r2)
    f3cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f3d0:	e0bffa17 	ldw	r2,-24(fp)
    f3d4:	1081000c 	andi	r2,r2,1024
    f3d8:	10000b26 	beq	r2,zero,f408 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f3dc:	e0bff917 	ldw	r2,-28(fp)
    f3e0:	10800017 	ldw	r2,0(r2)
    f3e4:	10800104 	addi	r2,r2,4
    f3e8:	1007883a 	mov	r3,r2
    f3ec:	e0bff917 	ldw	r2,-28(fp)
    f3f0:	10800817 	ldw	r2,32(r2)
    f3f4:	10810014 	ori	r2,r2,1024
    f3f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f3fc:	e0bff917 	ldw	r2,-28(fp)
    f400:	10000915 	stw	zero,36(r2)
    f404:	00000a06 	br	f430 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f408:	e0bff917 	ldw	r2,-28(fp)
    f40c:	10c00917 	ldw	r3,36(r2)
    f410:	00a00034 	movhi	r2,32768
    f414:	10bfff04 	addi	r2,r2,-4
    f418:	10c00536 	bltu	r2,r3,f430 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f41c:	e0bff917 	ldw	r2,-28(fp)
    f420:	10800917 	ldw	r2,36(r2)
    f424:	10c00044 	addi	r3,r2,1
    f428:	e0bff917 	ldw	r2,-28(fp)
    f42c:	10c00915 	stw	r3,36(r2)
    f430:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f434:	e037883a 	mov	sp,fp
    f438:	df000017 	ldw	fp,0(sp)
    f43c:	dec00104 	addi	sp,sp,4
    f440:	f800283a 	ret

0000f444 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f444:	defffd04 	addi	sp,sp,-12
    f448:	df000215 	stw	fp,8(sp)
    f44c:	df000204 	addi	fp,sp,8
    f450:	e13ffe15 	stw	r4,-8(fp)
    f454:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f458:	00000506 	br	f470 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f45c:	e0bfff17 	ldw	r2,-4(fp)
    f460:	1090000c 	andi	r2,r2,16384
    f464:	10000226 	beq	r2,zero,f470 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f468:	00bffd44 	movi	r2,-11
    f46c:	00000b06 	br	f49c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	10c00d17 	ldw	r3,52(r2)
    f478:	e0bffe17 	ldw	r2,-8(fp)
    f47c:	10800c17 	ldw	r2,48(r2)
    f480:	18800526 	beq	r3,r2,f498 <altera_avalon_jtag_uart_close+0x54>
    f484:	e0bffe17 	ldw	r2,-8(fp)
    f488:	10c00917 	ldw	r3,36(r2)
    f48c:	e0bffe17 	ldw	r2,-8(fp)
    f490:	10800117 	ldw	r2,4(r2)
    f494:	18bff136 	bltu	r3,r2,f45c <__alt_data_end+0xff00f45c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f498:	0005883a 	mov	r2,zero
}
    f49c:	e037883a 	mov	sp,fp
    f4a0:	df000017 	ldw	fp,0(sp)
    f4a4:	dec00104 	addi	sp,sp,4
    f4a8:	f800283a 	ret

0000f4ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f4ac:	defffa04 	addi	sp,sp,-24
    f4b0:	df000515 	stw	fp,20(sp)
    f4b4:	df000504 	addi	fp,sp,20
    f4b8:	e13ffd15 	stw	r4,-12(fp)
    f4bc:	e17ffe15 	stw	r5,-8(fp)
    f4c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f4c4:	00bff9c4 	movi	r2,-25
    f4c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f4cc:	e0bffe17 	ldw	r2,-8(fp)
    f4d0:	10da8060 	cmpeqi	r3,r2,27137
    f4d4:	1800031e 	bne	r3,zero,f4e4 <altera_avalon_jtag_uart_ioctl+0x38>
    f4d8:	109a80a0 	cmpeqi	r2,r2,27138
    f4dc:	1000181e 	bne	r2,zero,f540 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f4e0:	00002906 	br	f588 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
    f4e8:	10c00117 	ldw	r3,4(r2)
    f4ec:	00a00034 	movhi	r2,32768
    f4f0:	10bfffc4 	addi	r2,r2,-1
    f4f4:	18802126 	beq	r3,r2,f57c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f4f8:	e0bfff17 	ldw	r2,-4(fp)
    f4fc:	10800017 	ldw	r2,0(r2)
    f500:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f504:	e0bffc17 	ldw	r2,-16(fp)
    f508:	10800090 	cmplti	r2,r2,2
    f50c:	1000061e 	bne	r2,zero,f528 <altera_avalon_jtag_uart_ioctl+0x7c>
    f510:	e0fffc17 	ldw	r3,-16(fp)
    f514:	00a00034 	movhi	r2,32768
    f518:	10bfffc4 	addi	r2,r2,-1
    f51c:	18800226 	beq	r3,r2,f528 <altera_avalon_jtag_uart_ioctl+0x7c>
    f520:	e0bffc17 	ldw	r2,-16(fp)
    f524:	00000206 	br	f530 <altera_avalon_jtag_uart_ioctl+0x84>
    f528:	00a00034 	movhi	r2,32768
    f52c:	10bfff84 	addi	r2,r2,-2
    f530:	e0fffd17 	ldw	r3,-12(fp)
    f534:	18800115 	stw	r2,4(r3)
      rc = 0;
    f538:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f53c:	00000f06 	br	f57c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f540:	e0bffd17 	ldw	r2,-12(fp)
    f544:	10c00117 	ldw	r3,4(r2)
    f548:	00a00034 	movhi	r2,32768
    f54c:	10bfffc4 	addi	r2,r2,-1
    f550:	18800c26 	beq	r3,r2,f584 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f554:	e0bffd17 	ldw	r2,-12(fp)
    f558:	10c00917 	ldw	r3,36(r2)
    f55c:	e0bffd17 	ldw	r2,-12(fp)
    f560:	10800117 	ldw	r2,4(r2)
    f564:	1885803a 	cmpltu	r2,r3,r2
    f568:	10c03fcc 	andi	r3,r2,255
    f56c:	e0bfff17 	ldw	r2,-4(fp)
    f570:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f574:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f578:	00000206 	br	f584 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f57c:	0001883a 	nop
    f580:	00000106 	br	f588 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f584:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f588:	e0bffb17 	ldw	r2,-20(fp)
}
    f58c:	e037883a 	mov	sp,fp
    f590:	df000017 	ldw	fp,0(sp)
    f594:	dec00104 	addi	sp,sp,4
    f598:	f800283a 	ret

0000f59c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f59c:	defff304 	addi	sp,sp,-52
    f5a0:	dfc00c15 	stw	ra,48(sp)
    f5a4:	df000b15 	stw	fp,44(sp)
    f5a8:	df000b04 	addi	fp,sp,44
    f5ac:	e13ffc15 	stw	r4,-16(fp)
    f5b0:	e17ffd15 	stw	r5,-12(fp)
    f5b4:	e1bffe15 	stw	r6,-8(fp)
    f5b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f5bc:	e0bffd17 	ldw	r2,-12(fp)
    f5c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5c4:	00004706 	br	f6e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f5c8:	e0bffc17 	ldw	r2,-16(fp)
    f5cc:	10800a17 	ldw	r2,40(r2)
    f5d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f5d4:	e0bffc17 	ldw	r2,-16(fp)
    f5d8:	10800b17 	ldw	r2,44(r2)
    f5dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f5e0:	e0fff717 	ldw	r3,-36(fp)
    f5e4:	e0bff817 	ldw	r2,-32(fp)
    f5e8:	18800536 	bltu	r3,r2,f600 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f5ec:	e0fff717 	ldw	r3,-36(fp)
    f5f0:	e0bff817 	ldw	r2,-32(fp)
    f5f4:	1885c83a 	sub	r2,r3,r2
    f5f8:	e0bff615 	stw	r2,-40(fp)
    f5fc:	00000406 	br	f610 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f600:	00c20004 	movi	r3,2048
    f604:	e0bff817 	ldw	r2,-32(fp)
    f608:	1885c83a 	sub	r2,r3,r2
    f60c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f610:	e0bff617 	ldw	r2,-40(fp)
    f614:	10001e26 	beq	r2,zero,f690 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f618:	e0fffe17 	ldw	r3,-8(fp)
    f61c:	e0bff617 	ldw	r2,-40(fp)
    f620:	1880022e 	bgeu	r3,r2,f62c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f624:	e0bffe17 	ldw	r2,-8(fp)
    f628:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f62c:	e0bffc17 	ldw	r2,-16(fp)
    f630:	10c00e04 	addi	r3,r2,56
    f634:	e0bff817 	ldw	r2,-32(fp)
    f638:	1885883a 	add	r2,r3,r2
    f63c:	e1bff617 	ldw	r6,-40(fp)
    f640:	100b883a 	mov	r5,r2
    f644:	e13ff517 	ldw	r4,-44(fp)
    f648:	00082c00 	call	82c0 <memcpy>
      ptr   += n;
    f64c:	e0fff517 	ldw	r3,-44(fp)
    f650:	e0bff617 	ldw	r2,-40(fp)
    f654:	1885883a 	add	r2,r3,r2
    f658:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f65c:	e0fffe17 	ldw	r3,-8(fp)
    f660:	e0bff617 	ldw	r2,-40(fp)
    f664:	1885c83a 	sub	r2,r3,r2
    f668:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f66c:	e0fff817 	ldw	r3,-32(fp)
    f670:	e0bff617 	ldw	r2,-40(fp)
    f674:	1885883a 	add	r2,r3,r2
    f678:	10c1ffcc 	andi	r3,r2,2047
    f67c:	e0bffc17 	ldw	r2,-16(fp)
    f680:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f684:	e0bffe17 	ldw	r2,-8(fp)
    f688:	00bfcf16 	blt	zero,r2,f5c8 <__alt_data_end+0xff00f5c8>
    f68c:	00000106 	br	f694 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f690:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f694:	e0fff517 	ldw	r3,-44(fp)
    f698:	e0bffd17 	ldw	r2,-12(fp)
    f69c:	1880141e 	bne	r3,r2,f6f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f6a0:	e0bfff17 	ldw	r2,-4(fp)
    f6a4:	1090000c 	andi	r2,r2,16384
    f6a8:	1000131e 	bne	r2,zero,f6f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f6ac:	0001883a 	nop
    f6b0:	e0bffc17 	ldw	r2,-16(fp)
    f6b4:	10c00a17 	ldw	r3,40(r2)
    f6b8:	e0bff717 	ldw	r2,-36(fp)
    f6bc:	1880051e 	bne	r3,r2,f6d4 <altera_avalon_jtag_uart_read+0x138>
    f6c0:	e0bffc17 	ldw	r2,-16(fp)
    f6c4:	10c00917 	ldw	r3,36(r2)
    f6c8:	e0bffc17 	ldw	r2,-16(fp)
    f6cc:	10800117 	ldw	r2,4(r2)
    f6d0:	18bff736 	bltu	r3,r2,f6b0 <__alt_data_end+0xff00f6b0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f6d4:	e0bffc17 	ldw	r2,-16(fp)
    f6d8:	10c00a17 	ldw	r3,40(r2)
    f6dc:	e0bff717 	ldw	r2,-36(fp)
    f6e0:	18800726 	beq	r3,r2,f700 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f6e4:	e0bffe17 	ldw	r2,-8(fp)
    f6e8:	00bfb716 	blt	zero,r2,f5c8 <__alt_data_end+0xff00f5c8>
    f6ec:	00000506 	br	f704 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f6f0:	0001883a 	nop
    f6f4:	00000306 	br	f704 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f6f8:	0001883a 	nop
    f6fc:	00000106 	br	f704 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f700:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f704:	e0fff517 	ldw	r3,-44(fp)
    f708:	e0bffd17 	ldw	r2,-12(fp)
    f70c:	18801826 	beq	r3,r2,f770 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f710:	0005303a 	rdctl	r2,status
    f714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f718:	e0fffb17 	ldw	r3,-20(fp)
    f71c:	00bfff84 	movi	r2,-2
    f720:	1884703a 	and	r2,r3,r2
    f724:	1001703a 	wrctl	status,r2
  
  return context;
    f728:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f72c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f730:	e0bffc17 	ldw	r2,-16(fp)
    f734:	10800817 	ldw	r2,32(r2)
    f738:	10c00054 	ori	r3,r2,1
    f73c:	e0bffc17 	ldw	r2,-16(fp)
    f740:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f744:	e0bffc17 	ldw	r2,-16(fp)
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	10800104 	addi	r2,r2,4
    f750:	1007883a 	mov	r3,r2
    f754:	e0bffc17 	ldw	r2,-16(fp)
    f758:	10800817 	ldw	r2,32(r2)
    f75c:	18800035 	stwio	r2,0(r3)
    f760:	e0bffa17 	ldw	r2,-24(fp)
    f764:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f768:	e0bff917 	ldw	r2,-28(fp)
    f76c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f770:	e0fff517 	ldw	r3,-44(fp)
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	18800426 	beq	r3,r2,f78c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f77c:	e0fff517 	ldw	r3,-44(fp)
    f780:	e0bffd17 	ldw	r2,-12(fp)
    f784:	1885c83a 	sub	r2,r3,r2
    f788:	00000606 	br	f7a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f78c:	e0bfff17 	ldw	r2,-4(fp)
    f790:	1090000c 	andi	r2,r2,16384
    f794:	10000226 	beq	r2,zero,f7a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f798:	00bffd44 	movi	r2,-11
    f79c:	00000106 	br	f7a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f7a0:	00bffec4 	movi	r2,-5
}
    f7a4:	e037883a 	mov	sp,fp
    f7a8:	dfc00117 	ldw	ra,4(sp)
    f7ac:	df000017 	ldw	fp,0(sp)
    f7b0:	dec00204 	addi	sp,sp,8
    f7b4:	f800283a 	ret

0000f7b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f7b8:	defff304 	addi	sp,sp,-52
    f7bc:	dfc00c15 	stw	ra,48(sp)
    f7c0:	df000b15 	stw	fp,44(sp)
    f7c4:	df000b04 	addi	fp,sp,44
    f7c8:	e13ffc15 	stw	r4,-16(fp)
    f7cc:	e17ffd15 	stw	r5,-12(fp)
    f7d0:	e1bffe15 	stw	r6,-8(fp)
    f7d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f7d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f7dc:	e0bffd17 	ldw	r2,-12(fp)
    f7e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f7e4:	00003706 	br	f8c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f7e8:	e0bffc17 	ldw	r2,-16(fp)
    f7ec:	10800c17 	ldw	r2,48(r2)
    f7f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10800d17 	ldw	r2,52(r2)
    f7fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f800:	e0fff917 	ldw	r3,-28(fp)
    f804:	e0bff517 	ldw	r2,-44(fp)
    f808:	1880062e 	bgeu	r3,r2,f824 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f80c:	e0fff517 	ldw	r3,-44(fp)
    f810:	e0bff917 	ldw	r2,-28(fp)
    f814:	1885c83a 	sub	r2,r3,r2
    f818:	10bfffc4 	addi	r2,r2,-1
    f81c:	e0bff615 	stw	r2,-40(fp)
    f820:	00000b06 	br	f850 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f824:	e0bff517 	ldw	r2,-44(fp)
    f828:	10000526 	beq	r2,zero,f840 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f82c:	00c20004 	movi	r3,2048
    f830:	e0bff917 	ldw	r2,-28(fp)
    f834:	1885c83a 	sub	r2,r3,r2
    f838:	e0bff615 	stw	r2,-40(fp)
    f83c:	00000406 	br	f850 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f840:	00c1ffc4 	movi	r3,2047
    f844:	e0bff917 	ldw	r2,-28(fp)
    f848:	1885c83a 	sub	r2,r3,r2
    f84c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f850:	e0bff617 	ldw	r2,-40(fp)
    f854:	10001e26 	beq	r2,zero,f8d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f858:	e0fffe17 	ldw	r3,-8(fp)
    f85c:	e0bff617 	ldw	r2,-40(fp)
    f860:	1880022e 	bgeu	r3,r2,f86c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f864:	e0bffe17 	ldw	r2,-8(fp)
    f868:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f86c:	e0bffc17 	ldw	r2,-16(fp)
    f870:	10c20e04 	addi	r3,r2,2104
    f874:	e0bff917 	ldw	r2,-28(fp)
    f878:	1885883a 	add	r2,r3,r2
    f87c:	e1bff617 	ldw	r6,-40(fp)
    f880:	e17ffd17 	ldw	r5,-12(fp)
    f884:	1009883a 	mov	r4,r2
    f888:	00082c00 	call	82c0 <memcpy>
      ptr   += n;
    f88c:	e0fffd17 	ldw	r3,-12(fp)
    f890:	e0bff617 	ldw	r2,-40(fp)
    f894:	1885883a 	add	r2,r3,r2
    f898:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f89c:	e0fffe17 	ldw	r3,-8(fp)
    f8a0:	e0bff617 	ldw	r2,-40(fp)
    f8a4:	1885c83a 	sub	r2,r3,r2
    f8a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8ac:	e0fff917 	ldw	r3,-28(fp)
    f8b0:	e0bff617 	ldw	r2,-40(fp)
    f8b4:	1885883a 	add	r2,r3,r2
    f8b8:	10c1ffcc 	andi	r3,r2,2047
    f8bc:	e0bffc17 	ldw	r2,-16(fp)
    f8c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8c4:	e0bffe17 	ldw	r2,-8(fp)
    f8c8:	00bfc716 	blt	zero,r2,f7e8 <__alt_data_end+0xff00f7e8>
    f8cc:	00000106 	br	f8d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f8d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8d4:	0005303a 	rdctl	r2,status
    f8d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8dc:	e0fffb17 	ldw	r3,-20(fp)
    f8e0:	00bfff84 	movi	r2,-2
    f8e4:	1884703a 	and	r2,r3,r2
    f8e8:	1001703a 	wrctl	status,r2
  
  return context;
    f8ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f8f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f8f4:	e0bffc17 	ldw	r2,-16(fp)
    f8f8:	10800817 	ldw	r2,32(r2)
    f8fc:	10c00094 	ori	r3,r2,2
    f900:	e0bffc17 	ldw	r2,-16(fp)
    f904:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f908:	e0bffc17 	ldw	r2,-16(fp)
    f90c:	10800017 	ldw	r2,0(r2)
    f910:	10800104 	addi	r2,r2,4
    f914:	1007883a 	mov	r3,r2
    f918:	e0bffc17 	ldw	r2,-16(fp)
    f91c:	10800817 	ldw	r2,32(r2)
    f920:	18800035 	stwio	r2,0(r3)
    f924:	e0bffa17 	ldw	r2,-24(fp)
    f928:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f92c:	e0bff817 	ldw	r2,-32(fp)
    f930:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f934:	e0bffe17 	ldw	r2,-8(fp)
    f938:	0080100e 	bge	zero,r2,f97c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f93c:	e0bfff17 	ldw	r2,-4(fp)
    f940:	1090000c 	andi	r2,r2,16384
    f944:	1000101e 	bne	r2,zero,f988 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f948:	0001883a 	nop
    f94c:	e0bffc17 	ldw	r2,-16(fp)
    f950:	10c00d17 	ldw	r3,52(r2)
    f954:	e0bff517 	ldw	r2,-44(fp)
    f958:	1880051e 	bne	r3,r2,f970 <altera_avalon_jtag_uart_write+0x1b8>
    f95c:	e0bffc17 	ldw	r2,-16(fp)
    f960:	10c00917 	ldw	r3,36(r2)
    f964:	e0bffc17 	ldw	r2,-16(fp)
    f968:	10800117 	ldw	r2,4(r2)
    f96c:	18bff736 	bltu	r3,r2,f94c <__alt_data_end+0xff00f94c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10800917 	ldw	r2,36(r2)
    f978:	1000051e 	bne	r2,zero,f990 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f97c:	e0bffe17 	ldw	r2,-8(fp)
    f980:	00bfd016 	blt	zero,r2,f8c4 <__alt_data_end+0xff00f8c4>
    f984:	00000306 	br	f994 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f988:	0001883a 	nop
    f98c:	00000106 	br	f994 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f990:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f994:	e0fffd17 	ldw	r3,-12(fp)
    f998:	e0bff717 	ldw	r2,-36(fp)
    f99c:	18800426 	beq	r3,r2,f9b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f9a0:	e0fffd17 	ldw	r3,-12(fp)
    f9a4:	e0bff717 	ldw	r2,-36(fp)
    f9a8:	1885c83a 	sub	r2,r3,r2
    f9ac:	00000606 	br	f9c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f9b0:	e0bfff17 	ldw	r2,-4(fp)
    f9b4:	1090000c 	andi	r2,r2,16384
    f9b8:	10000226 	beq	r2,zero,f9c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f9bc:	00bffd44 	movi	r2,-11
    f9c0:	00000106 	br	f9c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f9c4:	00bffec4 	movi	r2,-5
}
    f9c8:	e037883a 	mov	sp,fp
    f9cc:	dfc00117 	ldw	ra,4(sp)
    f9d0:	df000017 	ldw	fp,0(sp)
    f9d4:	dec00204 	addi	sp,sp,8
    f9d8:	f800283a 	ret

0000f9dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f9dc:	defffa04 	addi	sp,sp,-24
    f9e0:	dfc00515 	stw	ra,20(sp)
    f9e4:	df000415 	stw	fp,16(sp)
    f9e8:	df000404 	addi	fp,sp,16
    f9ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f9f0:	0007883a 	mov	r3,zero
    f9f4:	e0bfff17 	ldw	r2,-4(fp)
    f9f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f9fc:	e0bfff17 	ldw	r2,-4(fp)
    fa00:	10800104 	addi	r2,r2,4
    fa04:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa08:	0005303a 	rdctl	r2,status
    fa0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa10:	e0fffd17 	ldw	r3,-12(fp)
    fa14:	00bfff84 	movi	r2,-2
    fa18:	1884703a 	and	r2,r3,r2
    fa1c:	1001703a 	wrctl	status,r2
  
  return context;
    fa20:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa24:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa28:	00107580 	call	10758 <alt_tick>
    fa2c:	e0bffc17 	ldw	r2,-16(fp)
    fa30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa34:	e0bffe17 	ldw	r2,-8(fp)
    fa38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fa3c:	0001883a 	nop
    fa40:	e037883a 	mov	sp,fp
    fa44:	dfc00117 	ldw	ra,4(sp)
    fa48:	df000017 	ldw	fp,0(sp)
    fa4c:	dec00204 	addi	sp,sp,8
    fa50:	f800283a 	ret

0000fa54 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fa54:	defff804 	addi	sp,sp,-32
    fa58:	dfc00715 	stw	ra,28(sp)
    fa5c:	df000615 	stw	fp,24(sp)
    fa60:	df000604 	addi	fp,sp,24
    fa64:	e13ffc15 	stw	r4,-16(fp)
    fa68:	e17ffd15 	stw	r5,-12(fp)
    fa6c:	e1bffe15 	stw	r6,-8(fp)
    fa70:	e1ffff15 	stw	r7,-4(fp)
    fa74:	e0bfff17 	ldw	r2,-4(fp)
    fa78:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fa7c:	d0a72a17 	ldw	r2,-25432(gp)
    fa80:	1000021e 	bne	r2,zero,fa8c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fa84:	e0bffb17 	ldw	r2,-20(fp)
    fa88:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fa8c:	e0bffc17 	ldw	r2,-16(fp)
    fa90:	10800104 	addi	r2,r2,4
    fa94:	00c001c4 	movi	r3,7
    fa98:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fa9c:	d8000015 	stw	zero,0(sp)
    faa0:	e1fffc17 	ldw	r7,-16(fp)
    faa4:	01800074 	movhi	r6,1
    faa8:	31be7704 	addi	r6,r6,-1572
    faac:	e17ffe17 	ldw	r5,-8(fp)
    fab0:	e13ffd17 	ldw	r4,-12(fp)
    fab4:	00100880 	call	10088 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fab8:	0001883a 	nop
    fabc:	e037883a 	mov	sp,fp
    fac0:	dfc00117 	ldw	ra,4(sp)
    fac4:	df000017 	ldw	fp,0(sp)
    fac8:	dec00204 	addi	sp,sp,8
    facc:	f800283a 	ret

0000fad0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fad0:	defffe04 	addi	sp,sp,-8
    fad4:	df000115 	stw	fp,4(sp)
    fad8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fadc:	d0a72717 	ldw	r2,-25444(gp)
    fae0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fae4:	d0a72817 	ldw	r2,-25440(gp)
    fae8:	1000021e 	bne	r2,zero,faf4 <alt_timestamp_start+0x24>
  {
    return -1;
    faec:	00bfffc4 	movi	r2,-1
    faf0:	00001106 	br	fb38 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    faf4:	e0bfff17 	ldw	r2,-4(fp)
    faf8:	10800104 	addi	r2,r2,4
    fafc:	00c00204 	movi	r3,8
    fb00:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fb04:	e0bfff17 	ldw	r2,-4(fp)
    fb08:	10800204 	addi	r2,r2,8
    fb0c:	00ffffd4 	movui	r3,65535
    fb10:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fb14:	e0bfff17 	ldw	r2,-4(fp)
    fb18:	10800304 	addi	r2,r2,12
    fb1c:	00ffffd4 	movui	r3,65535
    fb20:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fb24:	e0bfff17 	ldw	r2,-4(fp)
    fb28:	10800104 	addi	r2,r2,4
    fb2c:	00c00104 	movi	r3,4
    fb30:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fb34:	0005883a 	mov	r2,zero
}
    fb38:	e037883a 	mov	sp,fp
    fb3c:	df000017 	ldw	fp,0(sp)
    fb40:	dec00104 	addi	sp,sp,4
    fb44:	f800283a 	ret

0000fb48 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fb48:	defffc04 	addi	sp,sp,-16
    fb4c:	df000315 	stw	fp,12(sp)
    fb50:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fb54:	d0a72717 	ldw	r2,-25444(gp)
    fb58:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fb5c:	d0a72817 	ldw	r2,-25440(gp)
    fb60:	1000021e 	bne	r2,zero,fb6c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fb64:	00bfffc4 	movi	r2,-1
    fb68:	00001306 	br	fbb8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fb6c:	e0bffd17 	ldw	r2,-12(fp)
    fb70:	10800404 	addi	r2,r2,16
    fb74:	0007883a 	mov	r3,zero
    fb78:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fb7c:	e0bffd17 	ldw	r2,-12(fp)
    fb80:	10800404 	addi	r2,r2,16
    fb84:	10800037 	ldwio	r2,0(r2)
    fb88:	10bfffcc 	andi	r2,r2,65535
    fb8c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fb90:	e0bffd17 	ldw	r2,-12(fp)
    fb94:	10800504 	addi	r2,r2,20
    fb98:	10800037 	ldwio	r2,0(r2)
    fb9c:	10bfffcc 	andi	r2,r2,65535
    fba0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	1006943a 	slli	r3,r2,16
    fbac:	e0bffe17 	ldw	r2,-8(fp)
    fbb0:	1884b03a 	or	r2,r3,r2
    fbb4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fbb8:	e037883a 	mov	sp,fp
    fbbc:	df000017 	ldw	fp,0(sp)
    fbc0:	dec00104 	addi	sp,sp,4
    fbc4:	f800283a 	ret

0000fbc8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fbc8:	deffff04 	addi	sp,sp,-4
    fbcc:	df000015 	stw	fp,0(sp)
    fbd0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fbd4:	d0a72817 	ldw	r2,-25440(gp)
}
    fbd8:	e037883a 	mov	sp,fp
    fbdc:	df000017 	ldw	fp,0(sp)
    fbe0:	dec00104 	addi	sp,sp,4
    fbe4:	f800283a 	ret

0000fbe8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fbe8:	defff504 	addi	sp,sp,-44
    fbec:	df000a15 	stw	fp,40(sp)
    fbf0:	df000a04 	addi	fp,sp,40
    fbf4:	e13ffc15 	stw	r4,-16(fp)
    fbf8:	e17ffd15 	stw	r5,-12(fp)
    fbfc:	e1bffe15 	stw	r6,-8(fp)
    fc00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fc04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fc08:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
    fc0c:	10003c26 	beq	r2,zero,fd00 <alt_alarm_start+0x118>
  {
    if (alarm)
    fc10:	e0bffc17 	ldw	r2,-16(fp)
    fc14:	10003826 	beq	r2,zero,fcf8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fc18:	e0bffc17 	ldw	r2,-16(fp)
    fc1c:	e0fffe17 	ldw	r3,-8(fp)
    fc20:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fc24:	e0bffc17 	ldw	r2,-16(fp)
    fc28:	e0ffff17 	ldw	r3,-4(fp)
    fc2c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc30:	0005303a 	rdctl	r2,status
    fc34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc38:	e0fff917 	ldw	r3,-28(fp)
    fc3c:	00bfff84 	movi	r2,-2
    fc40:	1884703a 	and	r2,r3,r2
    fc44:	1001703a 	wrctl	status,r2
  
  return context;
    fc48:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fc4c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fc50:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
    fc54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fc58:	e0fffd17 	ldw	r3,-12(fp)
    fc5c:	e0bff617 	ldw	r2,-40(fp)
    fc60:	1885883a 	add	r2,r3,r2
    fc64:	10c00044 	addi	r3,r2,1
    fc68:	e0bffc17 	ldw	r2,-16(fp)
    fc6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	10c00217 	ldw	r3,8(r2)
    fc78:	e0bff617 	ldw	r2,-40(fp)
    fc7c:	1880042e 	bgeu	r3,r2,fc90 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	00c00044 	movi	r3,1
    fc88:	10c00405 	stb	r3,16(r2)
    fc8c:	00000206 	br	fc98 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fc90:	e0bffc17 	ldw	r2,-16(fp)
    fc94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fc98:	e0bffc17 	ldw	r2,-16(fp)
    fc9c:	d0e00e04 	addi	r3,gp,-32712
    fca0:	e0fffa15 	stw	r3,-24(fp)
    fca4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fca8:	e0bffb17 	ldw	r2,-20(fp)
    fcac:	e0fffa17 	ldw	r3,-24(fp)
    fcb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fcb4:	e0bffa17 	ldw	r2,-24(fp)
    fcb8:	10c00017 	ldw	r3,0(r2)
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fcc4:	e0bffa17 	ldw	r2,-24(fp)
    fcc8:	10800017 	ldw	r2,0(r2)
    fccc:	e0fffb17 	ldw	r3,-20(fp)
    fcd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fcd4:	e0bffa17 	ldw	r2,-24(fp)
    fcd8:	e0fffb17 	ldw	r3,-20(fp)
    fcdc:	10c00015 	stw	r3,0(r2)
    fce0:	e0bff817 	ldw	r2,-32(fp)
    fce4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fce8:	e0bff717 	ldw	r2,-36(fp)
    fcec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fcf0:	0005883a 	mov	r2,zero
    fcf4:	00000306 	br	fd04 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fcf8:	00bffa84 	movi	r2,-22
    fcfc:	00000106 	br	fd04 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fd00:	00bfde84 	movi	r2,-134
  }
}
    fd04:	e037883a 	mov	sp,fp
    fd08:	df000017 	ldw	fp,0(sp)
    fd0c:	dec00104 	addi	sp,sp,4
    fd10:	f800283a 	ret

0000fd14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fd14:	defffa04 	addi	sp,sp,-24
    fd18:	dfc00515 	stw	ra,20(sp)
    fd1c:	df000415 	stw	fp,16(sp)
    fd20:	df000404 	addi	fp,sp,16
    fd24:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fd28:	008000c4 	movi	r2,3
    fd2c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fd30:	e0fffd17 	ldw	r3,-12(fp)
    fd34:	008003f4 	movhi	r2,15
    fd38:	10909004 	addi	r2,r2,16960
    fd3c:	1885383a 	mul	r2,r3,r2
    fd40:	100b883a 	mov	r5,r2
    fd44:	0100bef4 	movhi	r4,763
    fd48:	213c2004 	addi	r4,r4,-3968
    fd4c:	0001cc80 	call	1cc8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fd50:	100b883a 	mov	r5,r2
    fd54:	01200034 	movhi	r4,32768
    fd58:	213fffc4 	addi	r4,r4,-1
    fd5c:	0001cc80 	call	1cc8 <__udivsi3>
    fd60:	100b883a 	mov	r5,r2
    fd64:	e13fff17 	ldw	r4,-4(fp)
    fd68:	0001cc80 	call	1cc8 <__udivsi3>
    fd6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fd70:	e0bffe17 	ldw	r2,-8(fp)
    fd74:	10002a26 	beq	r2,zero,fe20 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fd78:	e03ffc15 	stw	zero,-16(fp)
    fd7c:	00001706 	br	fddc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fd80:	00a00034 	movhi	r2,32768
    fd84:	10bfffc4 	addi	r2,r2,-1
    fd88:	10bfffc4 	addi	r2,r2,-1
    fd8c:	103ffe1e 	bne	r2,zero,fd88 <__alt_data_end+0xff00fd88>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fd90:	e0fffd17 	ldw	r3,-12(fp)
    fd94:	008003f4 	movhi	r2,15
    fd98:	10909004 	addi	r2,r2,16960
    fd9c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fda0:	100b883a 	mov	r5,r2
    fda4:	0100bef4 	movhi	r4,763
    fda8:	213c2004 	addi	r4,r4,-3968
    fdac:	0001cc80 	call	1cc8 <__udivsi3>
    fdb0:	100b883a 	mov	r5,r2
    fdb4:	01200034 	movhi	r4,32768
    fdb8:	213fffc4 	addi	r4,r4,-1
    fdbc:	0001cc80 	call	1cc8 <__udivsi3>
    fdc0:	1007883a 	mov	r3,r2
    fdc4:	e0bfff17 	ldw	r2,-4(fp)
    fdc8:	10c5c83a 	sub	r2,r2,r3
    fdcc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fdd0:	e0bffc17 	ldw	r2,-16(fp)
    fdd4:	10800044 	addi	r2,r2,1
    fdd8:	e0bffc15 	stw	r2,-16(fp)
    fddc:	e0fffc17 	ldw	r3,-16(fp)
    fde0:	e0bffe17 	ldw	r2,-8(fp)
    fde4:	18bfe616 	blt	r3,r2,fd80 <__alt_data_end+0xff00fd80>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fde8:	e0fffd17 	ldw	r3,-12(fp)
    fdec:	008003f4 	movhi	r2,15
    fdf0:	10909004 	addi	r2,r2,16960
    fdf4:	1885383a 	mul	r2,r3,r2
    fdf8:	100b883a 	mov	r5,r2
    fdfc:	0100bef4 	movhi	r4,763
    fe00:	213c2004 	addi	r4,r4,-3968
    fe04:	0001cc80 	call	1cc8 <__udivsi3>
    fe08:	1007883a 	mov	r3,r2
    fe0c:	e0bfff17 	ldw	r2,-4(fp)
    fe10:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe14:	10bfffc4 	addi	r2,r2,-1
    fe18:	103ffe1e 	bne	r2,zero,fe14 <__alt_data_end+0xff00fe14>
    fe1c:	00000d06 	br	fe54 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe20:	e0fffd17 	ldw	r3,-12(fp)
    fe24:	008003f4 	movhi	r2,15
    fe28:	10909004 	addi	r2,r2,16960
    fe2c:	1885383a 	mul	r2,r3,r2
    fe30:	100b883a 	mov	r5,r2
    fe34:	0100bef4 	movhi	r4,763
    fe38:	213c2004 	addi	r4,r4,-3968
    fe3c:	0001cc80 	call	1cc8 <__udivsi3>
    fe40:	1007883a 	mov	r3,r2
    fe44:	e0bfff17 	ldw	r2,-4(fp)
    fe48:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe4c:	10bfffc4 	addi	r2,r2,-1
    fe50:	00bffe16 	blt	zero,r2,fe4c <__alt_data_end+0xff00fe4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fe54:	0005883a 	mov	r2,zero
}
    fe58:	e037883a 	mov	sp,fp
    fe5c:	dfc00117 	ldw	ra,4(sp)
    fe60:	df000017 	ldw	fp,0(sp)
    fe64:	dec00204 	addi	sp,sp,8
    fe68:	f800283a 	ret

0000fe6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fe6c:	defffe04 	addi	sp,sp,-8
    fe70:	df000115 	stw	fp,4(sp)
    fe74:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fe78:	e03fff15 	stw	zero,-4(fp)
    fe7c:	00000506 	br	fe94 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    fe80:	e0bfff17 	ldw	r2,-4(fp)
    fe84:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fe88:	e0bfff17 	ldw	r2,-4(fp)
    fe8c:	10800804 	addi	r2,r2,32
    fe90:	e0bfff15 	stw	r2,-4(fp)
    fe94:	e0bfff17 	ldw	r2,-4(fp)
    fe98:	10a00030 	cmpltui	r2,r2,32768
    fe9c:	103ff81e 	bne	r2,zero,fe80 <__alt_data_end+0xff00fe80>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fea0:	0001883a 	nop
    fea4:	e037883a 	mov	sp,fp
    fea8:	df000017 	ldw	fp,0(sp)
    feac:	dec00104 	addi	sp,sp,4
    feb0:	f800283a 	ret

0000feb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    feb4:	defffe04 	addi	sp,sp,-8
    feb8:	dfc00115 	stw	ra,4(sp)
    febc:	df000015 	stw	fp,0(sp)
    fec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fec4:	d0a00b17 	ldw	r2,-32724(gp)
    fec8:	10000326 	beq	r2,zero,fed8 <alt_get_errno+0x24>
    fecc:	d0a00b17 	ldw	r2,-32724(gp)
    fed0:	103ee83a 	callr	r2
    fed4:	00000106 	br	fedc <alt_get_errno+0x28>
    fed8:	d0a72004 	addi	r2,gp,-25472
}
    fedc:	e037883a 	mov	sp,fp
    fee0:	dfc00117 	ldw	ra,4(sp)
    fee4:	df000017 	ldw	fp,0(sp)
    fee8:	dec00204 	addi	sp,sp,8
    feec:	f800283a 	ret

0000fef0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fef0:	defffa04 	addi	sp,sp,-24
    fef4:	dfc00515 	stw	ra,20(sp)
    fef8:	df000415 	stw	fp,16(sp)
    fefc:	df000404 	addi	fp,sp,16
    ff00:	e13ffe15 	stw	r4,-8(fp)
    ff04:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff08:	e0bffe17 	ldw	r2,-8(fp)
    ff0c:	10000326 	beq	r2,zero,ff1c <alt_dev_llist_insert+0x2c>
    ff10:	e0bffe17 	ldw	r2,-8(fp)
    ff14:	10800217 	ldw	r2,8(r2)
    ff18:	1000061e 	bne	r2,zero,ff34 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff1c:	000feb40 	call	feb4 <alt_get_errno>
    ff20:	1007883a 	mov	r3,r2
    ff24:	00800584 	movi	r2,22
    ff28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ff2c:	00bffa84 	movi	r2,-22
    ff30:	00001306 	br	ff80 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ff34:	e0bffe17 	ldw	r2,-8(fp)
    ff38:	e0ffff17 	ldw	r3,-4(fp)
    ff3c:	e0fffc15 	stw	r3,-16(fp)
    ff40:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ff44:	e0bffd17 	ldw	r2,-12(fp)
    ff48:	e0fffc17 	ldw	r3,-16(fp)
    ff4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	10c00017 	ldw	r3,0(r2)
    ff58:	e0bffd17 	ldw	r2,-12(fp)
    ff5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ff60:	e0bffc17 	ldw	r2,-16(fp)
    ff64:	10800017 	ldw	r2,0(r2)
    ff68:	e0fffd17 	ldw	r3,-12(fp)
    ff6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ff70:	e0bffc17 	ldw	r2,-16(fp)
    ff74:	e0fffd17 	ldw	r3,-12(fp)
    ff78:	10c00015 	stw	r3,0(r2)

  return 0;  
    ff7c:	0005883a 	mov	r2,zero
}
    ff80:	e037883a 	mov	sp,fp
    ff84:	dfc00117 	ldw	ra,4(sp)
    ff88:	df000017 	ldw	fp,0(sp)
    ff8c:	dec00204 	addi	sp,sp,8
    ff90:	f800283a 	ret

0000ff94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ff94:	defffd04 	addi	sp,sp,-12
    ff98:	dfc00215 	stw	ra,8(sp)
    ff9c:	df000115 	stw	fp,4(sp)
    ffa0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffa4:	00800074 	movhi	r2,1
    ffa8:	1083df04 	addi	r2,r2,3964
    ffac:	e0bfff15 	stw	r2,-4(fp)
    ffb0:	00000606 	br	ffcc <_do_ctors+0x38>
        (*ctor) (); 
    ffb4:	e0bfff17 	ldw	r2,-4(fp)
    ffb8:	10800017 	ldw	r2,0(r2)
    ffbc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffc0:	e0bfff17 	ldw	r2,-4(fp)
    ffc4:	10bfff04 	addi	r2,r2,-4
    ffc8:	e0bfff15 	stw	r2,-4(fp)
    ffcc:	e0ffff17 	ldw	r3,-4(fp)
    ffd0:	00800074 	movhi	r2,1
    ffd4:	1083e004 	addi	r2,r2,3968
    ffd8:	18bff62e 	bgeu	r3,r2,ffb4 <__alt_data_end+0xff00ffb4>
        (*ctor) (); 
}
    ffdc:	0001883a 	nop
    ffe0:	e037883a 	mov	sp,fp
    ffe4:	dfc00117 	ldw	ra,4(sp)
    ffe8:	df000017 	ldw	fp,0(sp)
    ffec:	dec00204 	addi	sp,sp,8
    fff0:	f800283a 	ret

0000fff4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fff4:	defffd04 	addi	sp,sp,-12
    fff8:	dfc00215 	stw	ra,8(sp)
    fffc:	df000115 	stw	fp,4(sp)
   10000:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10004:	00800074 	movhi	r2,1
   10008:	1083df04 	addi	r2,r2,3964
   1000c:	e0bfff15 	stw	r2,-4(fp)
   10010:	00000606 	br	1002c <_do_dtors+0x38>
        (*dtor) (); 
   10014:	e0bfff17 	ldw	r2,-4(fp)
   10018:	10800017 	ldw	r2,0(r2)
   1001c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10020:	e0bfff17 	ldw	r2,-4(fp)
   10024:	10bfff04 	addi	r2,r2,-4
   10028:	e0bfff15 	stw	r2,-4(fp)
   1002c:	e0ffff17 	ldw	r3,-4(fp)
   10030:	00800074 	movhi	r2,1
   10034:	1083e004 	addi	r2,r2,3968
   10038:	18bff62e 	bgeu	r3,r2,10014 <__alt_data_end+0xff010014>
        (*dtor) (); 
}
   1003c:	0001883a 	nop
   10040:	e037883a 	mov	sp,fp
   10044:	dfc00117 	ldw	ra,4(sp)
   10048:	df000017 	ldw	fp,0(sp)
   1004c:	dec00204 	addi	sp,sp,8
   10050:	f800283a 	ret

00010054 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10054:	defffe04 	addi	sp,sp,-8
   10058:	dfc00115 	stw	ra,4(sp)
   1005c:	df000015 	stw	fp,0(sp)
   10060:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10064:	01440004 	movi	r5,4096
   10068:	0009883a 	mov	r4,zero
   1006c:	0010ac00 	call	10ac0 <alt_icache_flush>
#endif
}
   10070:	0001883a 	nop
   10074:	e037883a 	mov	sp,fp
   10078:	dfc00117 	ldw	ra,4(sp)
   1007c:	df000017 	ldw	fp,0(sp)
   10080:	dec00204 	addi	sp,sp,8
   10084:	f800283a 	ret

00010088 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10088:	defff904 	addi	sp,sp,-28
   1008c:	dfc00615 	stw	ra,24(sp)
   10090:	df000515 	stw	fp,20(sp)
   10094:	df000504 	addi	fp,sp,20
   10098:	e13ffc15 	stw	r4,-16(fp)
   1009c:	e17ffd15 	stw	r5,-12(fp)
   100a0:	e1bffe15 	stw	r6,-8(fp)
   100a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   100a8:	e0800217 	ldw	r2,8(fp)
   100ac:	d8800015 	stw	r2,0(sp)
   100b0:	e1ffff17 	ldw	r7,-4(fp)
   100b4:	e1bffe17 	ldw	r6,-8(fp)
   100b8:	e17ffd17 	ldw	r5,-12(fp)
   100bc:	e13ffc17 	ldw	r4,-16(fp)
   100c0:	00102380 	call	10238 <alt_iic_isr_register>
}  
   100c4:	e037883a 	mov	sp,fp
   100c8:	dfc00117 	ldw	ra,4(sp)
   100cc:	df000017 	ldw	fp,0(sp)
   100d0:	dec00204 	addi	sp,sp,8
   100d4:	f800283a 	ret

000100d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   100d8:	defff904 	addi	sp,sp,-28
   100dc:	df000615 	stw	fp,24(sp)
   100e0:	df000604 	addi	fp,sp,24
   100e4:	e13ffe15 	stw	r4,-8(fp)
   100e8:	e17fff15 	stw	r5,-4(fp)
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100f4:	0005303a 	rdctl	r2,status
   100f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100fc:	e0fffb17 	ldw	r3,-20(fp)
   10100:	00bfff84 	movi	r2,-2
   10104:	1884703a 	and	r2,r3,r2
   10108:	1001703a 	wrctl	status,r2
  
  return context;
   1010c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10110:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10114:	00c00044 	movi	r3,1
   10118:	e0bffa17 	ldw	r2,-24(fp)
   1011c:	1884983a 	sll	r2,r3,r2
   10120:	1007883a 	mov	r3,r2
   10124:	d0a72917 	ldw	r2,-25436(gp)
   10128:	1884b03a 	or	r2,r3,r2
   1012c:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10130:	d0a72917 	ldw	r2,-25436(gp)
   10134:	100170fa 	wrctl	ienable,r2
   10138:	e0bffc17 	ldw	r2,-16(fp)
   1013c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10140:	e0bffd17 	ldw	r2,-12(fp)
   10144:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10148:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1014c:	0001883a 	nop
}
   10150:	e037883a 	mov	sp,fp
   10154:	df000017 	ldw	fp,0(sp)
   10158:	dec00104 	addi	sp,sp,4
   1015c:	f800283a 	ret

00010160 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10160:	defff904 	addi	sp,sp,-28
   10164:	df000615 	stw	fp,24(sp)
   10168:	df000604 	addi	fp,sp,24
   1016c:	e13ffe15 	stw	r4,-8(fp)
   10170:	e17fff15 	stw	r5,-4(fp)
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1017c:	0005303a 	rdctl	r2,status
   10180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10184:	e0fffb17 	ldw	r3,-20(fp)
   10188:	00bfff84 	movi	r2,-2
   1018c:	1884703a 	and	r2,r3,r2
   10190:	1001703a 	wrctl	status,r2
  
  return context;
   10194:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10198:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1019c:	00c00044 	movi	r3,1
   101a0:	e0bffa17 	ldw	r2,-24(fp)
   101a4:	1884983a 	sll	r2,r3,r2
   101a8:	0084303a 	nor	r2,zero,r2
   101ac:	1007883a 	mov	r3,r2
   101b0:	d0a72917 	ldw	r2,-25436(gp)
   101b4:	1884703a 	and	r2,r3,r2
   101b8:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101bc:	d0a72917 	ldw	r2,-25436(gp)
   101c0:	100170fa 	wrctl	ienable,r2
   101c4:	e0bffc17 	ldw	r2,-16(fp)
   101c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101cc:	e0bffd17 	ldw	r2,-12(fp)
   101d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   101d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   101d8:	0001883a 	nop
}
   101dc:	e037883a 	mov	sp,fp
   101e0:	df000017 	ldw	fp,0(sp)
   101e4:	dec00104 	addi	sp,sp,4
   101e8:	f800283a 	ret

000101ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   101ec:	defffc04 	addi	sp,sp,-16
   101f0:	df000315 	stw	fp,12(sp)
   101f4:	df000304 	addi	fp,sp,12
   101f8:	e13ffe15 	stw	r4,-8(fp)
   101fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10200:	000530fa 	rdctl	r2,ienable
   10204:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10208:	00c00044 	movi	r3,1
   1020c:	e0bfff17 	ldw	r2,-4(fp)
   10210:	1884983a 	sll	r2,r3,r2
   10214:	1007883a 	mov	r3,r2
   10218:	e0bffd17 	ldw	r2,-12(fp)
   1021c:	1884703a 	and	r2,r3,r2
   10220:	1004c03a 	cmpne	r2,r2,zero
   10224:	10803fcc 	andi	r2,r2,255
}
   10228:	e037883a 	mov	sp,fp
   1022c:	df000017 	ldw	fp,0(sp)
   10230:	dec00104 	addi	sp,sp,4
   10234:	f800283a 	ret

00010238 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10238:	defff504 	addi	sp,sp,-44
   1023c:	dfc00a15 	stw	ra,40(sp)
   10240:	df000915 	stw	fp,36(sp)
   10244:	df000904 	addi	fp,sp,36
   10248:	e13ffc15 	stw	r4,-16(fp)
   1024c:	e17ffd15 	stw	r5,-12(fp)
   10250:	e1bffe15 	stw	r6,-8(fp)
   10254:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10258:	00bffa84 	movi	r2,-22
   1025c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10260:	e0bffd17 	ldw	r2,-12(fp)
   10264:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10268:	e0bff817 	ldw	r2,-32(fp)
   1026c:	10800808 	cmpgei	r2,r2,32
   10270:	1000271e 	bne	r2,zero,10310 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10274:	0005303a 	rdctl	r2,status
   10278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1027c:	e0fffb17 	ldw	r3,-20(fp)
   10280:	00bfff84 	movi	r2,-2
   10284:	1884703a 	and	r2,r3,r2
   10288:	1001703a 	wrctl	status,r2
  
  return context;
   1028c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10290:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10294:	00800074 	movhi	r2,1
   10298:	1093f104 	addi	r2,r2,20420
   1029c:	e0fff817 	ldw	r3,-32(fp)
   102a0:	180690fa 	slli	r3,r3,3
   102a4:	10c5883a 	add	r2,r2,r3
   102a8:	e0fffe17 	ldw	r3,-8(fp)
   102ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   102b0:	00800074 	movhi	r2,1
   102b4:	1093f104 	addi	r2,r2,20420
   102b8:	e0fff817 	ldw	r3,-32(fp)
   102bc:	180690fa 	slli	r3,r3,3
   102c0:	10c5883a 	add	r2,r2,r3
   102c4:	10800104 	addi	r2,r2,4
   102c8:	e0ffff17 	ldw	r3,-4(fp)
   102cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   102d0:	e0bffe17 	ldw	r2,-8(fp)
   102d4:	10000526 	beq	r2,zero,102ec <alt_iic_isr_register+0xb4>
   102d8:	e0bff817 	ldw	r2,-32(fp)
   102dc:	100b883a 	mov	r5,r2
   102e0:	e13ffc17 	ldw	r4,-16(fp)
   102e4:	00100d80 	call	100d8 <alt_ic_irq_enable>
   102e8:	00000406 	br	102fc <alt_iic_isr_register+0xc4>
   102ec:	e0bff817 	ldw	r2,-32(fp)
   102f0:	100b883a 	mov	r5,r2
   102f4:	e13ffc17 	ldw	r4,-16(fp)
   102f8:	00101600 	call	10160 <alt_ic_irq_disable>
   102fc:	e0bff715 	stw	r2,-36(fp)
   10300:	e0bffa17 	ldw	r2,-24(fp)
   10304:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10308:	e0bff917 	ldw	r2,-28(fp)
   1030c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10310:	e0bff717 	ldw	r2,-36(fp)
}
   10314:	e037883a 	mov	sp,fp
   10318:	dfc00117 	ldw	ra,4(sp)
   1031c:	df000017 	ldw	fp,0(sp)
   10320:	dec00204 	addi	sp,sp,8
   10324:	f800283a 	ret

00010328 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10328:	defff904 	addi	sp,sp,-28
   1032c:	dfc00615 	stw	ra,24(sp)
   10330:	df000515 	stw	fp,20(sp)
   10334:	df000504 	addi	fp,sp,20
   10338:	e13ffc15 	stw	r4,-16(fp)
   1033c:	e17ffd15 	stw	r5,-12(fp)
   10340:	e1bffe15 	stw	r6,-8(fp)
   10344:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10348:	e1bfff17 	ldw	r6,-4(fp)
   1034c:	e17ffe17 	ldw	r5,-8(fp)
   10350:	e13ffd17 	ldw	r4,-12(fp)
   10354:	00105680 	call	10568 <open>
   10358:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1035c:	e0bffb17 	ldw	r2,-20(fp)
   10360:	10001c16 	blt	r2,zero,103d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10364:	00800074 	movhi	r2,1
   10368:	10884204 	addi	r2,r2,8456
   1036c:	e0fffb17 	ldw	r3,-20(fp)
   10370:	18c00324 	muli	r3,r3,12
   10374:	10c5883a 	add	r2,r2,r3
   10378:	10c00017 	ldw	r3,0(r2)
   1037c:	e0bffc17 	ldw	r2,-16(fp)
   10380:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10384:	00800074 	movhi	r2,1
   10388:	10884204 	addi	r2,r2,8456
   1038c:	e0fffb17 	ldw	r3,-20(fp)
   10390:	18c00324 	muli	r3,r3,12
   10394:	10c5883a 	add	r2,r2,r3
   10398:	10800104 	addi	r2,r2,4
   1039c:	10c00017 	ldw	r3,0(r2)
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   103a8:	00800074 	movhi	r2,1
   103ac:	10884204 	addi	r2,r2,8456
   103b0:	e0fffb17 	ldw	r3,-20(fp)
   103b4:	18c00324 	muli	r3,r3,12
   103b8:	10c5883a 	add	r2,r2,r3
   103bc:	10800204 	addi	r2,r2,8
   103c0:	10c00017 	ldw	r3,0(r2)
   103c4:	e0bffc17 	ldw	r2,-16(fp)
   103c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   103cc:	e13ffb17 	ldw	r4,-20(fp)
   103d0:	000ec140 	call	ec14 <alt_release_fd>
  }
} 
   103d4:	0001883a 	nop
   103d8:	e037883a 	mov	sp,fp
   103dc:	dfc00117 	ldw	ra,4(sp)
   103e0:	df000017 	ldw	fp,0(sp)
   103e4:	dec00204 	addi	sp,sp,8
   103e8:	f800283a 	ret

000103ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   103ec:	defffb04 	addi	sp,sp,-20
   103f0:	dfc00415 	stw	ra,16(sp)
   103f4:	df000315 	stw	fp,12(sp)
   103f8:	df000304 	addi	fp,sp,12
   103fc:	e13ffd15 	stw	r4,-12(fp)
   10400:	e17ffe15 	stw	r5,-8(fp)
   10404:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10408:	01c07fc4 	movi	r7,511
   1040c:	01800044 	movi	r6,1
   10410:	e17ffd17 	ldw	r5,-12(fp)
   10414:	01000074 	movhi	r4,1
   10418:	21084504 	addi	r4,r4,8468
   1041c:	00103280 	call	10328 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10420:	01c07fc4 	movi	r7,511
   10424:	000d883a 	mov	r6,zero
   10428:	e17ffe17 	ldw	r5,-8(fp)
   1042c:	01000074 	movhi	r4,1
   10430:	21084204 	addi	r4,r4,8456
   10434:	00103280 	call	10328 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10438:	01c07fc4 	movi	r7,511
   1043c:	01800044 	movi	r6,1
   10440:	e17fff17 	ldw	r5,-4(fp)
   10444:	01000074 	movhi	r4,1
   10448:	21084804 	addi	r4,r4,8480
   1044c:	00103280 	call	10328 <alt_open_fd>
}  
   10450:	0001883a 	nop
   10454:	e037883a 	mov	sp,fp
   10458:	dfc00117 	ldw	ra,4(sp)
   1045c:	df000017 	ldw	fp,0(sp)
   10460:	dec00204 	addi	sp,sp,8
   10464:	f800283a 	ret

00010468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10468:	defffe04 	addi	sp,sp,-8
   1046c:	dfc00115 	stw	ra,4(sp)
   10470:	df000015 	stw	fp,0(sp)
   10474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10478:	d0a00b17 	ldw	r2,-32724(gp)
   1047c:	10000326 	beq	r2,zero,1048c <alt_get_errno+0x24>
   10480:	d0a00b17 	ldw	r2,-32724(gp)
   10484:	103ee83a 	callr	r2
   10488:	00000106 	br	10490 <alt_get_errno+0x28>
   1048c:	d0a72004 	addi	r2,gp,-25472
}
   10490:	e037883a 	mov	sp,fp
   10494:	dfc00117 	ldw	ra,4(sp)
   10498:	df000017 	ldw	fp,0(sp)
   1049c:	dec00204 	addi	sp,sp,8
   104a0:	f800283a 	ret

000104a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   104a4:	defffd04 	addi	sp,sp,-12
   104a8:	df000215 	stw	fp,8(sp)
   104ac:	df000204 	addi	fp,sp,8
   104b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	10800217 	ldw	r2,8(r2)
   104bc:	10d00034 	orhi	r3,r2,16384
   104c0:	e0bfff17 	ldw	r2,-4(fp)
   104c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   104c8:	e03ffe15 	stw	zero,-8(fp)
   104cc:	00001d06 	br	10544 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   104d0:	00800074 	movhi	r2,1
   104d4:	10884204 	addi	r2,r2,8456
   104d8:	e0fffe17 	ldw	r3,-8(fp)
   104dc:	18c00324 	muli	r3,r3,12
   104e0:	10c5883a 	add	r2,r2,r3
   104e4:	10c00017 	ldw	r3,0(r2)
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	10800017 	ldw	r2,0(r2)
   104f0:	1880111e 	bne	r3,r2,10538 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   104f4:	00800074 	movhi	r2,1
   104f8:	10884204 	addi	r2,r2,8456
   104fc:	e0fffe17 	ldw	r3,-8(fp)
   10500:	18c00324 	muli	r3,r3,12
   10504:	10c5883a 	add	r2,r2,r3
   10508:	10800204 	addi	r2,r2,8
   1050c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10510:	1000090e 	bge	r2,zero,10538 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10514:	e0bffe17 	ldw	r2,-8(fp)
   10518:	10c00324 	muli	r3,r2,12
   1051c:	00800074 	movhi	r2,1
   10520:	10884204 	addi	r2,r2,8456
   10524:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10528:	e0bfff17 	ldw	r2,-4(fp)
   1052c:	18800226 	beq	r3,r2,10538 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10530:	00bffcc4 	movi	r2,-13
   10534:	00000806 	br	10558 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10538:	e0bffe17 	ldw	r2,-8(fp)
   1053c:	10800044 	addi	r2,r2,1
   10540:	e0bffe15 	stw	r2,-8(fp)
   10544:	d0a00a17 	ldw	r2,-32728(gp)
   10548:	1007883a 	mov	r3,r2
   1054c:	e0bffe17 	ldw	r2,-8(fp)
   10550:	18bfdf2e 	bgeu	r3,r2,104d0 <__alt_data_end+0xff0104d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10554:	0005883a 	mov	r2,zero
}
   10558:	e037883a 	mov	sp,fp
   1055c:	df000017 	ldw	fp,0(sp)
   10560:	dec00104 	addi	sp,sp,4
   10564:	f800283a 	ret

00010568 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10568:	defff604 	addi	sp,sp,-40
   1056c:	dfc00915 	stw	ra,36(sp)
   10570:	df000815 	stw	fp,32(sp)
   10574:	df000804 	addi	fp,sp,32
   10578:	e13ffd15 	stw	r4,-12(fp)
   1057c:	e17ffe15 	stw	r5,-8(fp)
   10580:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10584:	00bfffc4 	movi	r2,-1
   10588:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1058c:	00bffb44 	movi	r2,-19
   10590:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10594:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10598:	d1600804 	addi	r5,gp,-32736
   1059c:	e13ffd17 	ldw	r4,-12(fp)
   105a0:	00108840 	call	10884 <alt_find_dev>
   105a4:	e0bff815 	stw	r2,-32(fp)
   105a8:	e0bff817 	ldw	r2,-32(fp)
   105ac:	1000051e 	bne	r2,zero,105c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   105b0:	e13ffd17 	ldw	r4,-12(fp)
   105b4:	00109140 	call	10914 <alt_find_file>
   105b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   105bc:	00800044 	movi	r2,1
   105c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   105c4:	e0bff817 	ldw	r2,-32(fp)
   105c8:	10002926 	beq	r2,zero,10670 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   105cc:	e13ff817 	ldw	r4,-32(fp)
   105d0:	0010a1c0 	call	10a1c <alt_get_fd>
   105d4:	e0bff915 	stw	r2,-28(fp)
   105d8:	e0bff917 	ldw	r2,-28(fp)
   105dc:	1000030e 	bge	r2,zero,105ec <open+0x84>
    {
      status = index;
   105e0:	e0bff917 	ldw	r2,-28(fp)
   105e4:	e0bffa15 	stw	r2,-24(fp)
   105e8:	00002306 	br	10678 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   105ec:	e0bff917 	ldw	r2,-28(fp)
   105f0:	10c00324 	muli	r3,r2,12
   105f4:	00800074 	movhi	r2,1
   105f8:	10884204 	addi	r2,r2,8456
   105fc:	1885883a 	add	r2,r3,r2
   10600:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10604:	e0fffe17 	ldw	r3,-8(fp)
   10608:	00900034 	movhi	r2,16384
   1060c:	10bfffc4 	addi	r2,r2,-1
   10610:	1886703a 	and	r3,r3,r2
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1061c:	e0bffb17 	ldw	r2,-20(fp)
   10620:	1000051e 	bne	r2,zero,10638 <open+0xd0>
   10624:	e13ffc17 	ldw	r4,-16(fp)
   10628:	00104a40 	call	104a4 <alt_file_locked>
   1062c:	e0bffa15 	stw	r2,-24(fp)
   10630:	e0bffa17 	ldw	r2,-24(fp)
   10634:	10001016 	blt	r2,zero,10678 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10638:	e0bff817 	ldw	r2,-32(fp)
   1063c:	10800317 	ldw	r2,12(r2)
   10640:	10000826 	beq	r2,zero,10664 <open+0xfc>
   10644:	e0bff817 	ldw	r2,-32(fp)
   10648:	10800317 	ldw	r2,12(r2)
   1064c:	e1ffff17 	ldw	r7,-4(fp)
   10650:	e1bffe17 	ldw	r6,-8(fp)
   10654:	e17ffd17 	ldw	r5,-12(fp)
   10658:	e13ffc17 	ldw	r4,-16(fp)
   1065c:	103ee83a 	callr	r2
   10660:	00000106 	br	10668 <open+0x100>
   10664:	0005883a 	mov	r2,zero
   10668:	e0bffa15 	stw	r2,-24(fp)
   1066c:	00000206 	br	10678 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10670:	00bffb44 	movi	r2,-19
   10674:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10678:	e0bffa17 	ldw	r2,-24(fp)
   1067c:	1000090e 	bge	r2,zero,106a4 <open+0x13c>
  {
    alt_release_fd (index);  
   10680:	e13ff917 	ldw	r4,-28(fp)
   10684:	000ec140 	call	ec14 <alt_release_fd>
    ALT_ERRNO = -status;
   10688:	00104680 	call	10468 <alt_get_errno>
   1068c:	1007883a 	mov	r3,r2
   10690:	e0bffa17 	ldw	r2,-24(fp)
   10694:	0085c83a 	sub	r2,zero,r2
   10698:	18800015 	stw	r2,0(r3)
    return -1;
   1069c:	00bfffc4 	movi	r2,-1
   106a0:	00000106 	br	106a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   106a4:	e0bff917 	ldw	r2,-28(fp)
}
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00204 	addi	sp,sp,8
   106b8:	f800283a 	ret

000106bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   106bc:	defffa04 	addi	sp,sp,-24
   106c0:	df000515 	stw	fp,20(sp)
   106c4:	df000504 	addi	fp,sp,20
   106c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106cc:	0005303a 	rdctl	r2,status
   106d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d4:	e0fffc17 	ldw	r3,-16(fp)
   106d8:	00bfff84 	movi	r2,-2
   106dc:	1884703a 	and	r2,r3,r2
   106e0:	1001703a 	wrctl	status,r2
  
  return context;
   106e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   106e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   106ec:	e0bfff17 	ldw	r2,-4(fp)
   106f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   106f4:	e0bffd17 	ldw	r2,-12(fp)
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	e0fffd17 	ldw	r3,-12(fp)
   10700:	18c00117 	ldw	r3,4(r3)
   10704:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	10800117 	ldw	r2,4(r2)
   10710:	e0fffd17 	ldw	r3,-12(fp)
   10714:	18c00017 	ldw	r3,0(r3)
   10718:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1071c:	e0bffd17 	ldw	r2,-12(fp)
   10720:	e0fffd17 	ldw	r3,-12(fp)
   10724:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	e0fffd17 	ldw	r3,-12(fp)
   10730:	10c00015 	stw	r3,0(r2)
   10734:	e0bffb17 	ldw	r2,-20(fp)
   10738:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1073c:	e0bffe17 	ldw	r2,-8(fp)
   10740:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10744:	0001883a 	nop
   10748:	e037883a 	mov	sp,fp
   1074c:	df000017 	ldw	fp,0(sp)
   10750:	dec00104 	addi	sp,sp,4
   10754:	f800283a 	ret

00010758 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10758:	defffb04 	addi	sp,sp,-20
   1075c:	dfc00415 	stw	ra,16(sp)
   10760:	df000315 	stw	fp,12(sp)
   10764:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10768:	d0a00e17 	ldw	r2,-32712(gp)
   1076c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10770:	d0a72b17 	ldw	r2,-25428(gp)
   10774:	10800044 	addi	r2,r2,1
   10778:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1077c:	00002e06 	br	10838 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10780:	e0bffd17 	ldw	r2,-12(fp)
   10784:	10800017 	ldw	r2,0(r2)
   10788:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1078c:	e0bffd17 	ldw	r2,-12(fp)
   10790:	10800403 	ldbu	r2,16(r2)
   10794:	10803fcc 	andi	r2,r2,255
   10798:	10000426 	beq	r2,zero,107ac <alt_tick+0x54>
   1079c:	d0a72b17 	ldw	r2,-25428(gp)
   107a0:	1000021e 	bne	r2,zero,107ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107ac:	e0bffd17 	ldw	r2,-12(fp)
   107b0:	10800217 	ldw	r2,8(r2)
   107b4:	d0e72b17 	ldw	r3,-25428(gp)
   107b8:	18801d36 	bltu	r3,r2,10830 <alt_tick+0xd8>
   107bc:	e0bffd17 	ldw	r2,-12(fp)
   107c0:	10800403 	ldbu	r2,16(r2)
   107c4:	10803fcc 	andi	r2,r2,255
   107c8:	1000191e 	bne	r2,zero,10830 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   107cc:	e0bffd17 	ldw	r2,-12(fp)
   107d0:	10800317 	ldw	r2,12(r2)
   107d4:	e0fffd17 	ldw	r3,-12(fp)
   107d8:	18c00517 	ldw	r3,20(r3)
   107dc:	1809883a 	mov	r4,r3
   107e0:	103ee83a 	callr	r2
   107e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   107e8:	e0bfff17 	ldw	r2,-4(fp)
   107ec:	1000031e 	bne	r2,zero,107fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   107f0:	e13ffd17 	ldw	r4,-12(fp)
   107f4:	00106bc0 	call	106bc <alt_alarm_stop>
   107f8:	00000d06 	br	10830 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10c00217 	ldw	r3,8(r2)
   10804:	e0bfff17 	ldw	r2,-4(fp)
   10808:	1887883a 	add	r3,r3,r2
   1080c:	e0bffd17 	ldw	r2,-12(fp)
   10810:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10814:	e0bffd17 	ldw	r2,-12(fp)
   10818:	10c00217 	ldw	r3,8(r2)
   1081c:	d0a72b17 	ldw	r2,-25428(gp)
   10820:	1880032e 	bgeu	r3,r2,10830 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10824:	e0bffd17 	ldw	r2,-12(fp)
   10828:	00c00044 	movi	r3,1
   1082c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10830:	e0bffe17 	ldw	r2,-8(fp)
   10834:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10838:	e0fffd17 	ldw	r3,-12(fp)
   1083c:	d0a00e04 	addi	r2,gp,-32712
   10840:	18bfcf1e 	bne	r3,r2,10780 <__alt_data_end+0xff010780>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10844:	0001883a 	nop
}
   10848:	0001883a 	nop
   1084c:	e037883a 	mov	sp,fp
   10850:	dfc00117 	ldw	ra,4(sp)
   10854:	df000017 	ldw	fp,0(sp)
   10858:	dec00204 	addi	sp,sp,8
   1085c:	f800283a 	ret

00010860 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10860:	deffff04 	addi	sp,sp,-4
   10864:	df000015 	stw	fp,0(sp)
   10868:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1086c:	000170fa 	wrctl	ienable,zero
}
   10870:	0001883a 	nop
   10874:	e037883a 	mov	sp,fp
   10878:	df000017 	ldw	fp,0(sp)
   1087c:	dec00104 	addi	sp,sp,4
   10880:	f800283a 	ret

00010884 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10884:	defffa04 	addi	sp,sp,-24
   10888:	dfc00515 	stw	ra,20(sp)
   1088c:	df000415 	stw	fp,16(sp)
   10890:	df000404 	addi	fp,sp,16
   10894:	e13ffe15 	stw	r4,-8(fp)
   10898:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1089c:	e0bfff17 	ldw	r2,-4(fp)
   108a0:	10800017 	ldw	r2,0(r2)
   108a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   108a8:	e13ffe17 	ldw	r4,-8(fp)
   108ac:	00031400 	call	3140 <strlen>
   108b0:	10800044 	addi	r2,r2,1
   108b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108b8:	00000d06 	br	108f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   108bc:	e0bffc17 	ldw	r2,-16(fp)
   108c0:	10800217 	ldw	r2,8(r2)
   108c4:	e0fffd17 	ldw	r3,-12(fp)
   108c8:	180d883a 	mov	r6,r3
   108cc:	e17ffe17 	ldw	r5,-8(fp)
   108d0:	1009883a 	mov	r4,r2
   108d4:	0010c380 	call	10c38 <memcmp>
   108d8:	1000021e 	bne	r2,zero,108e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	00000706 	br	10900 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   108e4:	e0bffc17 	ldw	r2,-16(fp)
   108e8:	10800017 	ldw	r2,0(r2)
   108ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108f0:	e0fffc17 	ldw	r3,-16(fp)
   108f4:	e0bfff17 	ldw	r2,-4(fp)
   108f8:	18bff01e 	bne	r3,r2,108bc <__alt_data_end+0xff0108bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   108fc:	0005883a 	mov	r2,zero
}
   10900:	e037883a 	mov	sp,fp
   10904:	dfc00117 	ldw	ra,4(sp)
   10908:	df000017 	ldw	fp,0(sp)
   1090c:	dec00204 	addi	sp,sp,8
   10910:	f800283a 	ret

00010914 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10914:	defffb04 	addi	sp,sp,-20
   10918:	dfc00415 	stw	ra,16(sp)
   1091c:	df000315 	stw	fp,12(sp)
   10920:	df000304 	addi	fp,sp,12
   10924:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10928:	d0a00617 	ldw	r2,-32744(gp)
   1092c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10930:	00003106 	br	109f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10934:	e0bffd17 	ldw	r2,-12(fp)
   10938:	10800217 	ldw	r2,8(r2)
   1093c:	1009883a 	mov	r4,r2
   10940:	00031400 	call	3140 <strlen>
   10944:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10948:	e0bffd17 	ldw	r2,-12(fp)
   1094c:	10c00217 	ldw	r3,8(r2)
   10950:	e0bffe17 	ldw	r2,-8(fp)
   10954:	10bfffc4 	addi	r2,r2,-1
   10958:	1885883a 	add	r2,r3,r2
   1095c:	10800003 	ldbu	r2,0(r2)
   10960:	10803fcc 	andi	r2,r2,255
   10964:	1080201c 	xori	r2,r2,128
   10968:	10bfe004 	addi	r2,r2,-128
   1096c:	10800bd8 	cmpnei	r2,r2,47
   10970:	1000031e 	bne	r2,zero,10980 <alt_find_file+0x6c>
    {
      len -= 1;
   10974:	e0bffe17 	ldw	r2,-8(fp)
   10978:	10bfffc4 	addi	r2,r2,-1
   1097c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10980:	e0bffe17 	ldw	r2,-8(fp)
   10984:	e0ffff17 	ldw	r3,-4(fp)
   10988:	1885883a 	add	r2,r3,r2
   1098c:	10800003 	ldbu	r2,0(r2)
   10990:	10803fcc 	andi	r2,r2,255
   10994:	1080201c 	xori	r2,r2,128
   10998:	10bfe004 	addi	r2,r2,-128
   1099c:	10800be0 	cmpeqi	r2,r2,47
   109a0:	1000081e 	bne	r2,zero,109c4 <alt_find_file+0xb0>
   109a4:	e0bffe17 	ldw	r2,-8(fp)
   109a8:	e0ffff17 	ldw	r3,-4(fp)
   109ac:	1885883a 	add	r2,r3,r2
   109b0:	10800003 	ldbu	r2,0(r2)
   109b4:	10803fcc 	andi	r2,r2,255
   109b8:	1080201c 	xori	r2,r2,128
   109bc:	10bfe004 	addi	r2,r2,-128
   109c0:	10000a1e 	bne	r2,zero,109ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   109c4:	e0bffd17 	ldw	r2,-12(fp)
   109c8:	10800217 	ldw	r2,8(r2)
   109cc:	e0fffe17 	ldw	r3,-8(fp)
   109d0:	180d883a 	mov	r6,r3
   109d4:	e17fff17 	ldw	r5,-4(fp)
   109d8:	1009883a 	mov	r4,r2
   109dc:	0010c380 	call	10c38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109e0:	1000021e 	bne	r2,zero,109ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   109e4:	e0bffd17 	ldw	r2,-12(fp)
   109e8:	00000706 	br	10a08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   109ec:	e0bffd17 	ldw	r2,-12(fp)
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   109f8:	e0fffd17 	ldw	r3,-12(fp)
   109fc:	d0a00604 	addi	r2,gp,-32744
   10a00:	18bfcc1e 	bne	r3,r2,10934 <__alt_data_end+0xff010934>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a04:	0005883a 	mov	r2,zero
}
   10a08:	e037883a 	mov	sp,fp
   10a0c:	dfc00117 	ldw	ra,4(sp)
   10a10:	df000017 	ldw	fp,0(sp)
   10a14:	dec00204 	addi	sp,sp,8
   10a18:	f800283a 	ret

00010a1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a1c:	defffc04 	addi	sp,sp,-16
   10a20:	df000315 	stw	fp,12(sp)
   10a24:	df000304 	addi	fp,sp,12
   10a28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10a2c:	00bffa04 	movi	r2,-24
   10a30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a34:	e03ffd15 	stw	zero,-12(fp)
   10a38:	00001906 	br	10aa0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10a3c:	00800074 	movhi	r2,1
   10a40:	10884204 	addi	r2,r2,8456
   10a44:	e0fffd17 	ldw	r3,-12(fp)
   10a48:	18c00324 	muli	r3,r3,12
   10a4c:	10c5883a 	add	r2,r2,r3
   10a50:	10800017 	ldw	r2,0(r2)
   10a54:	10000f1e 	bne	r2,zero,10a94 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10a58:	00800074 	movhi	r2,1
   10a5c:	10884204 	addi	r2,r2,8456
   10a60:	e0fffd17 	ldw	r3,-12(fp)
   10a64:	18c00324 	muli	r3,r3,12
   10a68:	10c5883a 	add	r2,r2,r3
   10a6c:	e0ffff17 	ldw	r3,-4(fp)
   10a70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10a74:	d0e00a17 	ldw	r3,-32728(gp)
   10a78:	e0bffd17 	ldw	r2,-12(fp)
   10a7c:	1880020e 	bge	r3,r2,10a88 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10a80:	e0bffd17 	ldw	r2,-12(fp)
   10a84:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10a88:	e0bffd17 	ldw	r2,-12(fp)
   10a8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10a90:	00000606 	br	10aac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a94:	e0bffd17 	ldw	r2,-12(fp)
   10a98:	10800044 	addi	r2,r2,1
   10a9c:	e0bffd15 	stw	r2,-12(fp)
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	10800810 	cmplti	r2,r2,32
   10aa8:	103fe41e 	bne	r2,zero,10a3c <__alt_data_end+0xff010a3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10aac:	e0bffe17 	ldw	r2,-8(fp)
}
   10ab0:	e037883a 	mov	sp,fp
   10ab4:	df000017 	ldw	fp,0(sp)
   10ab8:	dec00104 	addi	sp,sp,4
   10abc:	f800283a 	ret

00010ac0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10ac0:	defffb04 	addi	sp,sp,-20
   10ac4:	df000415 	stw	fp,16(sp)
   10ac8:	df000404 	addi	fp,sp,16
   10acc:	e13ffe15 	stw	r4,-8(fp)
   10ad0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	10840070 	cmpltui	r2,r2,4097
   10adc:	1000021e 	bne	r2,zero,10ae8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10ae0:	00840004 	movi	r2,4096
   10ae4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10ae8:	e0fffe17 	ldw	r3,-8(fp)
   10aec:	e0bfff17 	ldw	r2,-4(fp)
   10af0:	1885883a 	add	r2,r3,r2
   10af4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10af8:	e0bffe17 	ldw	r2,-8(fp)
   10afc:	e0bffc15 	stw	r2,-16(fp)
   10b00:	00000506 	br	10b18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b04:	e0bffc17 	ldw	r2,-16(fp)
   10b08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b0c:	e0bffc17 	ldw	r2,-16(fp)
   10b10:	10800804 	addi	r2,r2,32
   10b14:	e0bffc15 	stw	r2,-16(fp)
   10b18:	e0fffc17 	ldw	r3,-16(fp)
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	18bff836 	bltu	r3,r2,10b04 <__alt_data_end+0xff010b04>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b24:	e0bffe17 	ldw	r2,-8(fp)
   10b28:	108007cc 	andi	r2,r2,31
   10b2c:	10000226 	beq	r2,zero,10b38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b30:	e0bffc17 	ldw	r2,-16(fp)
   10b34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b3c:	0001883a 	nop
   10b40:	e037883a 	mov	sp,fp
   10b44:	df000017 	ldw	fp,0(sp)
   10b48:	dec00104 	addi	sp,sp,4
   10b4c:	f800283a 	ret

00010b50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10b50:	defffe04 	addi	sp,sp,-8
   10b54:	df000115 	stw	fp,4(sp)
   10b58:	df000104 	addi	fp,sp,4
   10b5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10b60:	e0bfff17 	ldw	r2,-4(fp)
   10b64:	10bffe84 	addi	r2,r2,-6
   10b68:	10c00428 	cmpgeui	r3,r2,16
   10b6c:	18001a1e 	bne	r3,zero,10bd8 <alt_exception_cause_generated_bad_addr+0x88>
   10b70:	100690ba 	slli	r3,r2,2
   10b74:	00800074 	movhi	r2,1
   10b78:	1082e204 	addi	r2,r2,2952
   10b7c:	1885883a 	add	r2,r3,r2
   10b80:	10800017 	ldw	r2,0(r2)
   10b84:	1000683a 	jmp	r2
   10b88:	00010bc8 	cmpgei	zero,zero,1071
   10b8c:	00010bc8 	cmpgei	zero,zero,1071
   10b90:	00010bd8 	cmpnei	zero,zero,1071
   10b94:	00010bd8 	cmpnei	zero,zero,1071
   10b98:	00010bd8 	cmpnei	zero,zero,1071
   10b9c:	00010bc8 	cmpgei	zero,zero,1071
   10ba0:	00010bd0 	cmplti	zero,zero,1071
   10ba4:	00010bd8 	cmpnei	zero,zero,1071
   10ba8:	00010bc8 	cmpgei	zero,zero,1071
   10bac:	00010bc8 	cmpgei	zero,zero,1071
   10bb0:	00010bd8 	cmpnei	zero,zero,1071
   10bb4:	00010bc8 	cmpgei	zero,zero,1071
   10bb8:	00010bd0 	cmplti	zero,zero,1071
   10bbc:	00010bd8 	cmpnei	zero,zero,1071
   10bc0:	00010bd8 	cmpnei	zero,zero,1071
   10bc4:	00010bc8 	cmpgei	zero,zero,1071
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10bc8:	00800044 	movi	r2,1
   10bcc:	00000306 	br	10bdc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10bd0:	0005883a 	mov	r2,zero
   10bd4:	00000106 	br	10bdc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10bd8:	0005883a 	mov	r2,zero
  }
}
   10bdc:	e037883a 	mov	sp,fp
   10be0:	df000017 	ldw	fp,0(sp)
   10be4:	dec00104 	addi	sp,sp,4
   10be8:	f800283a 	ret

00010bec <atexit>:
   10bec:	200b883a 	mov	r5,r4
   10bf0:	000f883a 	mov	r7,zero
   10bf4:	000d883a 	mov	r6,zero
   10bf8:	0009883a 	mov	r4,zero
   10bfc:	0010cb41 	jmpi	10cb4 <__register_exitproc>

00010c00 <exit>:
   10c00:	defffe04 	addi	sp,sp,-8
   10c04:	000b883a 	mov	r5,zero
   10c08:	dc000015 	stw	r16,0(sp)
   10c0c:	dfc00115 	stw	ra,4(sp)
   10c10:	2021883a 	mov	r16,r4
   10c14:	0010dcc0 	call	10dcc <__call_exitprocs>
   10c18:	00800074 	movhi	r2,1
   10c1c:	108cbc04 	addi	r2,r2,13040
   10c20:	11000017 	ldw	r4,0(r2)
   10c24:	20800f17 	ldw	r2,60(r4)
   10c28:	10000126 	beq	r2,zero,10c30 <exit+0x30>
   10c2c:	103ee83a 	callr	r2
   10c30:	8009883a 	mov	r4,r16
   10c34:	0010f4c0 	call	10f4c <_exit>

00010c38 <memcmp>:
   10c38:	01c000c4 	movi	r7,3
   10c3c:	3980192e 	bgeu	r7,r6,10ca4 <memcmp+0x6c>
   10c40:	2144b03a 	or	r2,r4,r5
   10c44:	11c4703a 	and	r2,r2,r7
   10c48:	10000f26 	beq	r2,zero,10c88 <memcmp+0x50>
   10c4c:	20800003 	ldbu	r2,0(r4)
   10c50:	28c00003 	ldbu	r3,0(r5)
   10c54:	10c0151e 	bne	r2,r3,10cac <memcmp+0x74>
   10c58:	31bfff84 	addi	r6,r6,-2
   10c5c:	01ffffc4 	movi	r7,-1
   10c60:	00000406 	br	10c74 <memcmp+0x3c>
   10c64:	20800003 	ldbu	r2,0(r4)
   10c68:	28c00003 	ldbu	r3,0(r5)
   10c6c:	31bfffc4 	addi	r6,r6,-1
   10c70:	10c00e1e 	bne	r2,r3,10cac <memcmp+0x74>
   10c74:	21000044 	addi	r4,r4,1
   10c78:	29400044 	addi	r5,r5,1
   10c7c:	31fff91e 	bne	r6,r7,10c64 <__alt_data_end+0xff010c64>
   10c80:	0005883a 	mov	r2,zero
   10c84:	f800283a 	ret
   10c88:	20c00017 	ldw	r3,0(r4)
   10c8c:	28800017 	ldw	r2,0(r5)
   10c90:	18bfee1e 	bne	r3,r2,10c4c <__alt_data_end+0xff010c4c>
   10c94:	31bfff04 	addi	r6,r6,-4
   10c98:	21000104 	addi	r4,r4,4
   10c9c:	29400104 	addi	r5,r5,4
   10ca0:	39bff936 	bltu	r7,r6,10c88 <__alt_data_end+0xff010c88>
   10ca4:	303fe91e 	bne	r6,zero,10c4c <__alt_data_end+0xff010c4c>
   10ca8:	003ff506 	br	10c80 <__alt_data_end+0xff010c80>
   10cac:	10c5c83a 	sub	r2,r2,r3
   10cb0:	f800283a 	ret

00010cb4 <__register_exitproc>:
   10cb4:	defffa04 	addi	sp,sp,-24
   10cb8:	dc000315 	stw	r16,12(sp)
   10cbc:	04000074 	movhi	r16,1
   10cc0:	840cbc04 	addi	r16,r16,13040
   10cc4:	80c00017 	ldw	r3,0(r16)
   10cc8:	dc400415 	stw	r17,16(sp)
   10ccc:	dfc00515 	stw	ra,20(sp)
   10cd0:	18805217 	ldw	r2,328(r3)
   10cd4:	2023883a 	mov	r17,r4
   10cd8:	10003726 	beq	r2,zero,10db8 <__register_exitproc+0x104>
   10cdc:	10c00117 	ldw	r3,4(r2)
   10ce0:	010007c4 	movi	r4,31
   10ce4:	20c00e16 	blt	r4,r3,10d20 <__register_exitproc+0x6c>
   10ce8:	1a000044 	addi	r8,r3,1
   10cec:	8800221e 	bne	r17,zero,10d78 <__register_exitproc+0xc4>
   10cf0:	18c00084 	addi	r3,r3,2
   10cf4:	18c7883a 	add	r3,r3,r3
   10cf8:	18c7883a 	add	r3,r3,r3
   10cfc:	12000115 	stw	r8,4(r2)
   10d00:	10c7883a 	add	r3,r2,r3
   10d04:	19400015 	stw	r5,0(r3)
   10d08:	0005883a 	mov	r2,zero
   10d0c:	dfc00517 	ldw	ra,20(sp)
   10d10:	dc400417 	ldw	r17,16(sp)
   10d14:	dc000317 	ldw	r16,12(sp)
   10d18:	dec00604 	addi	sp,sp,24
   10d1c:	f800283a 	ret
   10d20:	00800034 	movhi	r2,0
   10d24:	1089de04 	addi	r2,r2,10104
   10d28:	10002626 	beq	r2,zero,10dc4 <__register_exitproc+0x110>
   10d2c:	01006404 	movi	r4,400
   10d30:	d9400015 	stw	r5,0(sp)
   10d34:	d9800115 	stw	r6,4(sp)
   10d38:	d9c00215 	stw	r7,8(sp)
   10d3c:	00027780 	call	2778 <malloc>
   10d40:	d9400017 	ldw	r5,0(sp)
   10d44:	d9800117 	ldw	r6,4(sp)
   10d48:	d9c00217 	ldw	r7,8(sp)
   10d4c:	10001d26 	beq	r2,zero,10dc4 <__register_exitproc+0x110>
   10d50:	81000017 	ldw	r4,0(r16)
   10d54:	10000115 	stw	zero,4(r2)
   10d58:	02000044 	movi	r8,1
   10d5c:	22405217 	ldw	r9,328(r4)
   10d60:	0007883a 	mov	r3,zero
   10d64:	12400015 	stw	r9,0(r2)
   10d68:	20805215 	stw	r2,328(r4)
   10d6c:	10006215 	stw	zero,392(r2)
   10d70:	10006315 	stw	zero,396(r2)
   10d74:	883fde26 	beq	r17,zero,10cf0 <__alt_data_end+0xff010cf0>
   10d78:	18c9883a 	add	r4,r3,r3
   10d7c:	2109883a 	add	r4,r4,r4
   10d80:	1109883a 	add	r4,r2,r4
   10d84:	21802215 	stw	r6,136(r4)
   10d88:	01800044 	movi	r6,1
   10d8c:	12406217 	ldw	r9,392(r2)
   10d90:	30cc983a 	sll	r6,r6,r3
   10d94:	4992b03a 	or	r9,r9,r6
   10d98:	12406215 	stw	r9,392(r2)
   10d9c:	21c04215 	stw	r7,264(r4)
   10da0:	01000084 	movi	r4,2
   10da4:	893fd21e 	bne	r17,r4,10cf0 <__alt_data_end+0xff010cf0>
   10da8:	11006317 	ldw	r4,396(r2)
   10dac:	218cb03a 	or	r6,r4,r6
   10db0:	11806315 	stw	r6,396(r2)
   10db4:	003fce06 	br	10cf0 <__alt_data_end+0xff010cf0>
   10db8:	18805304 	addi	r2,r3,332
   10dbc:	18805215 	stw	r2,328(r3)
   10dc0:	003fc606 	br	10cdc <__alt_data_end+0xff010cdc>
   10dc4:	00bfffc4 	movi	r2,-1
   10dc8:	003fd006 	br	10d0c <__alt_data_end+0xff010d0c>

00010dcc <__call_exitprocs>:
   10dcc:	defff504 	addi	sp,sp,-44
   10dd0:	df000915 	stw	fp,36(sp)
   10dd4:	dd400615 	stw	r21,24(sp)
   10dd8:	dc800315 	stw	r18,12(sp)
   10ddc:	dfc00a15 	stw	ra,40(sp)
   10de0:	ddc00815 	stw	r23,32(sp)
   10de4:	dd800715 	stw	r22,28(sp)
   10de8:	dd000515 	stw	r20,20(sp)
   10dec:	dcc00415 	stw	r19,16(sp)
   10df0:	dc400215 	stw	r17,8(sp)
   10df4:	dc000115 	stw	r16,4(sp)
   10df8:	d9000015 	stw	r4,0(sp)
   10dfc:	2839883a 	mov	fp,r5
   10e00:	04800044 	movi	r18,1
   10e04:	057fffc4 	movi	r21,-1
   10e08:	00800074 	movhi	r2,1
   10e0c:	108cbc04 	addi	r2,r2,13040
   10e10:	12000017 	ldw	r8,0(r2)
   10e14:	45005217 	ldw	r20,328(r8)
   10e18:	44c05204 	addi	r19,r8,328
   10e1c:	a0001c26 	beq	r20,zero,10e90 <__call_exitprocs+0xc4>
   10e20:	a0800117 	ldw	r2,4(r20)
   10e24:	15ffffc4 	addi	r23,r2,-1
   10e28:	b8000d16 	blt	r23,zero,10e60 <__call_exitprocs+0x94>
   10e2c:	14000044 	addi	r16,r2,1
   10e30:	8421883a 	add	r16,r16,r16
   10e34:	8421883a 	add	r16,r16,r16
   10e38:	84402004 	addi	r17,r16,128
   10e3c:	a463883a 	add	r17,r20,r17
   10e40:	a421883a 	add	r16,r20,r16
   10e44:	e0001e26 	beq	fp,zero,10ec0 <__call_exitprocs+0xf4>
   10e48:	80804017 	ldw	r2,256(r16)
   10e4c:	e0801c26 	beq	fp,r2,10ec0 <__call_exitprocs+0xf4>
   10e50:	bdffffc4 	addi	r23,r23,-1
   10e54:	843fff04 	addi	r16,r16,-4
   10e58:	8c7fff04 	addi	r17,r17,-4
   10e5c:	bd7ff91e 	bne	r23,r21,10e44 <__alt_data_end+0xff010e44>
   10e60:	00800034 	movhi	r2,0
   10e64:	1089e304 	addi	r2,r2,10124
   10e68:	10000926 	beq	r2,zero,10e90 <__call_exitprocs+0xc4>
   10e6c:	a0800117 	ldw	r2,4(r20)
   10e70:	1000301e 	bne	r2,zero,10f34 <__call_exitprocs+0x168>
   10e74:	a0800017 	ldw	r2,0(r20)
   10e78:	10003226 	beq	r2,zero,10f44 <__call_exitprocs+0x178>
   10e7c:	a009883a 	mov	r4,r20
   10e80:	98800015 	stw	r2,0(r19)
   10e84:	000278c0 	call	278c <free>
   10e88:	9d000017 	ldw	r20,0(r19)
   10e8c:	a03fe41e 	bne	r20,zero,10e20 <__alt_data_end+0xff010e20>
   10e90:	dfc00a17 	ldw	ra,40(sp)
   10e94:	df000917 	ldw	fp,36(sp)
   10e98:	ddc00817 	ldw	r23,32(sp)
   10e9c:	dd800717 	ldw	r22,28(sp)
   10ea0:	dd400617 	ldw	r21,24(sp)
   10ea4:	dd000517 	ldw	r20,20(sp)
   10ea8:	dcc00417 	ldw	r19,16(sp)
   10eac:	dc800317 	ldw	r18,12(sp)
   10eb0:	dc400217 	ldw	r17,8(sp)
   10eb4:	dc000117 	ldw	r16,4(sp)
   10eb8:	dec00b04 	addi	sp,sp,44
   10ebc:	f800283a 	ret
   10ec0:	a0800117 	ldw	r2,4(r20)
   10ec4:	80c00017 	ldw	r3,0(r16)
   10ec8:	10bfffc4 	addi	r2,r2,-1
   10ecc:	15c01426 	beq	r2,r23,10f20 <__call_exitprocs+0x154>
   10ed0:	80000015 	stw	zero,0(r16)
   10ed4:	183fde26 	beq	r3,zero,10e50 <__alt_data_end+0xff010e50>
   10ed8:	95c8983a 	sll	r4,r18,r23
   10edc:	a0806217 	ldw	r2,392(r20)
   10ee0:	a5800117 	ldw	r22,4(r20)
   10ee4:	2084703a 	and	r2,r4,r2
   10ee8:	10000b26 	beq	r2,zero,10f18 <__call_exitprocs+0x14c>
   10eec:	a0806317 	ldw	r2,396(r20)
   10ef0:	2088703a 	and	r4,r4,r2
   10ef4:	20000c1e 	bne	r4,zero,10f28 <__call_exitprocs+0x15c>
   10ef8:	89400017 	ldw	r5,0(r17)
   10efc:	d9000017 	ldw	r4,0(sp)
   10f00:	183ee83a 	callr	r3
   10f04:	a0800117 	ldw	r2,4(r20)
   10f08:	15bfbf1e 	bne	r2,r22,10e08 <__alt_data_end+0xff010e08>
   10f0c:	98800017 	ldw	r2,0(r19)
   10f10:	153fcf26 	beq	r2,r20,10e50 <__alt_data_end+0xff010e50>
   10f14:	003fbc06 	br	10e08 <__alt_data_end+0xff010e08>
   10f18:	183ee83a 	callr	r3
   10f1c:	003ff906 	br	10f04 <__alt_data_end+0xff010f04>
   10f20:	a5c00115 	stw	r23,4(r20)
   10f24:	003feb06 	br	10ed4 <__alt_data_end+0xff010ed4>
   10f28:	89000017 	ldw	r4,0(r17)
   10f2c:	183ee83a 	callr	r3
   10f30:	003ff406 	br	10f04 <__alt_data_end+0xff010f04>
   10f34:	a0800017 	ldw	r2,0(r20)
   10f38:	a027883a 	mov	r19,r20
   10f3c:	1029883a 	mov	r20,r2
   10f40:	003fb606 	br	10e1c <__alt_data_end+0xff010e1c>
   10f44:	0005883a 	mov	r2,zero
   10f48:	003ffb06 	br	10f38 <__alt_data_end+0xff010f38>

00010f4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10f4c:	defffd04 	addi	sp,sp,-12
   10f50:	df000215 	stw	fp,8(sp)
   10f54:	df000204 	addi	fp,sp,8
   10f58:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10f5c:	0001883a 	nop
   10f60:	e0bfff17 	ldw	r2,-4(fp)
   10f64:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10f68:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10f6c:	10000226 	beq	r2,zero,10f78 <_exit+0x2c>
    ALT_SIM_FAIL();
   10f70:	002af070 	cmpltui	zero,zero,43969
   10f74:	00000106 	br	10f7c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10f78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10f7c:	003fff06 	br	10f7c <__alt_data_end+0xff010f7c>
