
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012360 memsz 0x00012360 flags r-x
    LOAD off    0x00013380 vaddr 0x00012380 paddr 0x00013f6c align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00015b58 vaddr 0x00015b58 paddr 0x00015b58 align 2**12
         filesz 0x00000000 memsz 0x000001cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011980  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00011bc4  00011bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00012380  00013f6c  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001cc  00015b58  00015b58  00015b58  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015d24  00015d24  00014f6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014f6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010f0  00000000  00000000  00014f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000284bb  00000000  00000000  00016080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a324  00000000  00000000  0003e53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cdf8  00000000  00000000  0004885f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002830  00000000  00000000  00055658  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ffa  00000000  00000000  00057e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019713  00000000  00000000  0005be82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00075598  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  000755f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ad76  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007ad79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ad85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ad86  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007ad87  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007ad8b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007ad8f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007ad93  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007ad9c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007ada5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007adae  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  0007adb9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007adf1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007752e  00000000  00000000  000808c9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011bc4 l    d  .rodata	00000000 .rodata
00012380 l    d  .rwdata	00000000 .rwdata
00015b58 l    d  .bss	00000000 .bss
00015d24 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000121ce l     O .rodata	00000010 zeroes.4404
00005d90 l     F .text	000000bc __sbprintf
000121de l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005fa0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007ad0 l     F .text	00000008 __fp_unlock
00007ae4 l     F .text	0000019c __sinit.part.1
00007c80 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012888 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012ccc l     O .rwdata	00000020 lc_ctype_charset
00012cac l     O .rwdata	00000020 lc_message_charset
00012cec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012210 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a81c l     F .text	000000fc __sprint_r.part.0
00012344 l     O .rodata	00000010 blanks.4348
00012334 l     O .rodata	00000010 zeroes.4349
0000bda8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000eebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000efc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000eff4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f0e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f1c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f2ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013f5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f8a8 l     F .text	00000034 alt_dev_reg
00012ecc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fbb4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fdc0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000103f8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010dbc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010efc l     F .text	0000003c alt_get_errno
00010f38 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015bf8 g     O .bss	00000004 alt_instruction_exception_handler
00009eb4 g     F .text	00000074 _mprec_log10
00009fa0 g     F .text	0000008c __any_on
0000c344 g     F .text	00000054 _isatty_r
0001221c g     O .rodata	00000028 __mprec_tinytens
0000f3bc g     F .text	0000007c alt_main
000039bc g     F .text	000000c0 _puts_r
00015c24 g     O .bss	00000100 alt_irq
0000c398 g     F .text	00000060 _lseek_r
00012078 g     O .rodata	00000009 gy_array
00013f6c g       *ABS*	00000000 __flash_rwdata_start
0000daf4 g     F .text	00000088 .hidden __eqdf2
00015d24 g       *ABS*	00000000 __alt_heap_start
00003980 g     F .text	0000003c printf
0000c5b0 g     F .text	0000009c _wcrtomb_r
0000a6dc g     F .text	0000005c __sseek
00007e20 g     F .text	00000010 __sinit
0000c458 g     F .text	00000140 __swbuf_r
000088e8 g     F .text	0000007c _setlocale_r
00007c88 g     F .text	00000068 __sfmoreglue
0000f45c g     F .text	00000024 __malloc_unlock
00000a2c g     F .text	00000014 LCD_Write_Command
00015b88 g     O .bss	00000004 sobel_width
00015b74 g     O .bss	00000004 start_all
00015be8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008dac g     F .text	0000015c memmove
00000a40 g     F .text	00000014 LCD_Write_Data
00007e08 g     F .text	00000018 _cleanup
00015b80 g     O .bss	00000004 end_sobel
00009030 g     F .text	000000a8 _Balloc
00001d0c g     F .text	0000009c sobel_all_init
0000db7c g     F .text	000000dc .hidden __gtdf2
000112f4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000c2e8 g     F .text	0000005c _fstat_r
00015bc8 g     O .bss	00000004 errno
0000a658 g     F .text	00000008 __seofread
00015bdc g     O .bss	00000004 alt_argv
0001bf2c g       *ABS*	00000000 _gp
0000f744 g     F .text	00000030 usleep
0000f6cc g     F .text	00000078 alt_uncached_malloc
00015bb8 g     O .bss	00000004 array_width
00000668 g     F .text	00000074 cam_set_image_pointer
00012d4c g     O .rwdata	00000180 alt_fd_list
00001da8 g     F .text	000001c8 sobel_all_complete
00002554 g     F .text	00000010 vga_set_pointer
00011318 g     F .text	00000090 alt_find_dev
00008c64 g     F .text	00000148 memcpy
00007ad8 g     F .text	0000000c _cleanup_r
0000ede0 g     F .text	000000dc .hidden __floatsidf
00010e80 g     F .text	0000007c alt_io_redirect
00015b70 g     O .bss	00000004 end_all
0000dc58 g     F .text	000000f4 .hidden __ltdf2
00011bc4 g       *ABS*	00000000 __DTOR_END__
00015ba8 g     O .bss	00000004 end_sobel_a
00003a7c g     F .text	00000014 puts
000115e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a590 g     F .text	00000074 __fpclassifyd
00009e10 g     F .text	000000a4 __ratio
0000bd8c g     F .text	0000001c __vfiprintf_internal
0000ffb8 g     F .text	0000021c altera_avalon_jtag_uart_read
0000311c g     F .text	00000014 malloc
00003950 g     F .text	00000030 _printf_r
00000880 g     F .text	00000008 get_grayscale_picture
0000266c g     F .text	00000064 .hidden __udivsi3
00011c24 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000f11c g     F .text	000000a4 isatty
0001226c g     O .rodata	000000c8 __mprec_tens
00008964 g     F .text	0000000c __locale_charset
00011554 g     F .text	00000090 alt_icache_flush
00015bc4 g     O .bss	00000004 __malloc_top_pad
00013f3c g     O .rwdata	00000004 __mb_cur_max
00008994 g     F .text	0000000c _localeconv_r
00001498 g     F .text	00000140 sobel_x
0000943c g     F .text	0000003c __i2b
000082a4 g     F .text	000004bc __sfvwrite_r
00000a54 g     F .text	00000414 init_LCD
00003a90 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000c3f8 g     F .text	00000060 _read_r
00010888 g     F .text	00000078 alt_dcache_flush
00015b8c g     O .bss	00000004 sobel_result
00013f54 g     O .rwdata	00000004 alt_max_fd
0000bfdc g     F .text	000000f0 _fclose_r
00007aa0 g     F .text	00000030 fflush
00015bc0 g     O .bss	00000004 __malloc_max_sbrked_mem
00015b60 g     O .bss	00000004 grayscale_array
0000d248 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00009bb8 g     F .text	0000010c __b2d
0000cd10 g     F .text	00000538 .hidden __umoddi3
0000f2e8 g     F .text	000000d4 lseek
00000948 g     F .text	0000008c i2c_short_read
00013f34 g     O .rwdata	00000004 _global_impure_ptr
0000a02c g     F .text	00000564 _realloc_r
00015d24 g       *ABS*	00000000 __bss_end
00010ccc g     F .text	000000f0 alt_iic_isr_register
000111ec g     F .text	00000108 alt_tick
00015ba0 g     O .bss	00000004 end_conv_grayscale_a
0000c798 g     F .text	00000578 .hidden __udivdi3
0000c244 g     F .text	00000024 _fputwc_r
00012244 g     O .rodata	00000028 __mprec_bigtens
00009220 g     F .text	00000104 __s2b
00003010 g     F .text	000000a8 .hidden __floatunsidf
000098f8 g     F .text	00000060 __mcmp
00007e40 g     F .text	00000018 __fp_lock_all
00010c80 g     F .text	0000004c alt_ic_irq_enabled
00015b58 g     O .bss	00000004 grayscape_height
00011150 g     F .text	0000009c alt_alarm_stop
00015bec g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012d24 g     O .rwdata	00000028 alt_dev_null
00000ef4 g     F .text	00000078 transfer_LCD_with_dma
00001a88 g     F .text	00000168 sobel_complete
00010900 g     F .text	00000048 alt_dcache_flush_all
00009324 g     F .text	00000068 __hi0bits
0000ed60 g     F .text	00000080 .hidden __fixdfsi
00013f6c g       *ABS*	00000000 __ram_rwdata_end
00013f4c g     O .rwdata	00000008 alt_dev_list
0000f7b0 g     F .text	000000f8 write
000105e4 g     F .text	00000020 alt_timestamp_freq
00012380 g       *ABS*	00000000 __ram_rodata_end
0000f030 g     F .text	000000b0 fstat
0000dc58 g     F .text	000000f4 .hidden __ledf2
00009670 g     F .text	00000140 __pow5mult
0000a930 g     F .text	0000145c ___vfiprintf_internal_r
00015bd4 g     O .bss	00000004 __nlocale_changed
000026d0 g     F .text	00000058 .hidden __umodsi3
00000820 g     F .text	00000050 conv_grayscale_partial
000007d0 g     F .text	00000050 conv_grayscale_init
00001cfc g     F .text	00000008 GetSobel_rgb
00015d24 g       *ABS*	00000000 end
00001d04 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
0000186c g     F .text	00000168 sobel_y_with_rgb
0000faf4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00015ba4 g     O .bss	00000004 start_conv_grayscale_a
00011bc4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010470 g     F .text	0000007c alt_avalon_timer_sc_init
000030b8 g     F .text	00000064 .hidden __clzsi2
000101d4 g     F .text	00000224 altera_avalon_jtag_uart_write
00007e30 g     F .text	00000004 __sfp_lock_acquire
00008b80 g     F .text	000000e4 memchr
00003b7c g     F .text	000021f8 ___vfprintf_internal_r
00007f94 g     F .text	00000310 _free_r
00008970 g     F .text	00000010 __locale_mb_cur_max
00001754 g     F .text	00000118 sobel_y
00011d4c g     O .rodata	00000140 noise_reduction_reg_settings_array
00011a10 g     F .text	00000180 __call_exitprocs
00015bd0 g     O .bss	00000004 __mlocale_changed
00013f2c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015b78 g     O .bss	00000004 end_conv_grayscale
00015bf0 g     O .bss	00000004 _alt_tick_rate
000097b0 g     F .text	00000148 __lshift
00015bf4 g     O .bss	00000004 _alt_nticks
0000f4bc g     F .text	000000fc read
0000f914 g     F .text	0000007c alt_sys_init
000015d8 g     F .text	0000017c sobel_x_with_rgb
000118f8 g     F .text	00000118 __register_exitproc
00009478 g     F .text	000001f8 __multiply
0000fe60 g     F .text	00000068 altera_avalon_jtag_uart_close
00012380 g       *ABS*	00000000 __ram_rwdata_start
00011bc4 g       *ABS*	00000000 __ram_rodata_start
00015bfc g     O .bss	00000028 __malloc_current_mallinfo
00009cc4 g     F .text	0000014c __d2b
00015b90 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
000020fc g     F .text	00000124 sobel_all_partial
0000f990 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000012e4 g     F .text	000000f8 init_sobel_arrays
000114b0 g     F .text	000000a4 alt_get_fd
00010730 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000bec4 g     F .text	00000054 _close_r
0001187c g     F .text	0000007c memcmp
0000fa50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d24 g       *ABS*	00000000 __alt_stack_base
0000faa0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005e4c g     F .text	00000154 __swsetup_r
00002728 g     F .text	000008e8 .hidden __divdf3
00007cf0 g     F .text	00000118 __sfp
00009f28 g     F .text	00000078 __copybits
00012480 g     O .rwdata	00000408 __malloc_av_
00007e3c g     F .text	00000004 __sinit_lock_release
0000dd4c g     F .text	00000718 .hidden __muldf3
0000a604 g     F .text	00000054 __sread
000113a8 g     F .text	00000108 alt_find_file
00010984 g     F .text	000000a4 alt_dev_llist_insert
0000f438 g     F .text	00000024 __malloc_lock
0000f61c g     F .text	000000b0 sbrk
00007a44 g     F .text	0000005c _fflush_r
0000bf18 g     F .text	000000c4 _calloc_r
00015b6c g     O .bss	00000004 start_global
00012380 g     O .rwdata	00000100 .hidden __divsi3_table
00015b58 g       *ABS*	00000000 __bss_start
00008f08 g     F .text	00000128 memset
00000f6c g     F .text	00000378 main
00015be0 g     O .bss	00000004 alt_envp
00015bbc g     O .bss	00000004 __malloc_max_total_mem
00000870 g     F .text	00000008 get_grayscale_width
0000f9f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c598 g     F .text	00000018 __swbuf
00015b94 g     O .bss	00000004 sobel_x_result
0000a738 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000c0cc g     F .text	00000014 fclose
00015bb0 g     O .bss	00000004 size
000104ec g     F .text	00000078 alt_timestamp_start
000061a0 g     F .text	00001688 _dtoa_r
00003144 g     F .text	0000080c _malloc_r
0000c70c g     F .text	00000030 __ascii_wctomb
00013f58 g     O .rwdata	00000004 alt_errno
00008760 g     F .text	000000c4 _fwalk
00015bb4 g     O .bss	00000004 array_height
00015b84 g     O .bss	00000004 start_sobel
00002574 g     F .text	00000084 .hidden __divsi3
00007e70 g     F .text	00000124 _malloc_trim_r
00011bc4 g       *ABS*	00000000 __CTOR_END__
00015b5c g     O .bss	00000004 grayscale_width
0000a740 g     F .text	000000dc strcmp
00000e68 g     F .text	0000008c transfer_LCD_no_dma
00011bc4 g       *ABS*	00000000 __flash_rodata_start
00011bc4 g       *ABS*	00000000 __DTOR_LIST__
0000daf4 g     F .text	00000088 .hidden __nedf2
00011e8c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f8dc g     F .text	00000038 alt_irq_init
0000f5b8 g     F .text	00000064 alt_release_fd
00002220 g     F .text	0000032c sobel_all_complete_fusion
000008a0 g     F .text	000000a8 i2c_auto_detect
000116cc g     F .text	00000018 memalign
0001208a g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00015bcc g     O .bss	00000004 _PathLocale
00000888 g     F .text	00000018 i2c_busy_wait
00011680 g     F .text	00000014 atexit
0000be64 g     F .text	00000060 _write_r
000089a0 g     F .text	00000018 setlocale
00013f38 g     O .rwdata	00000004 _impure_ptr
00015bd8 g     O .bss	00000004 alt_argc
00007828 g     F .text	0000021c __sflush_r
00015be4 g     O .bss	00000004 altera_avalon_timer_ts_base
00010a88 g     F .text	00000060 _do_dtors
0000898c g     F .text	00000008 __locale_cjk_lang
00001f70 g     F .text	0000018c partial
00000020 g       .exceptions	00000000 alt_irq_entry
00001bf0 g     F .text	0000010c sobel_complete_parted
00009b54 g     F .text	00000064 __ulp
00007e58 g     F .text	00000018 __fp_unlock_all
00013f44 g     O .rwdata	00000008 alt_fs_list
00015b98 g     O .bss	00000004 sobel_y_result
000009d4 g     F .text	00000058 i2c_short_write
00015b7c g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015b64 g     O .bss	00000002 LCD_height
000089b8 g     F .text	0000000c localeconv
00010564 g     F .text	00000080 alt_timestamp
00002564 g     F .text	00000010 vga_set_swap
00010b1c g     F .text	00000050 alt_ic_isr_register
000019d4 g     F .text	000000b4 sobel_threshold
00013f6c g       *ABS*	00000000 _edata
00015d24 g       *ABS*	00000000 _end
0000c0e0 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fec8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012081 g     O .rodata	00000009 gx_array
00010bf4 g     F .text	0000008c alt_ic_irq_disable
0000a660 g     F .text	0000007c __swrite
00013f30 g     O .rwdata	00000004 __malloc_trim_threshold
00015b66 g     O .bss	00000002 LCD_width
00000774 g     F .text	0000005c conv_grayscale
00008980 g     F .text	0000000c __locale_msgcharset
00011694 g     F .text	00000038 exit
00008824 g     F .text	000000c4 _fwalk_reent
00009958 g     F .text	000001fc __mdiff
000025f8 g     F .text	00000074 .hidden __modsi3
000116e4 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007e34 g     F .text	00000004 __sfp_lock_release
00000878 g     F .text	00000008 get_grayscale_height
00011b90 g     F .text	00000034 _exit
000013dc g     F .text	000000bc sobel_mac
00010604 g     F .text	0000012c alt_alarm_start
000089c4 g     F .text	000001bc __smakebuf_r
00015b9c g     O .bss	00000004 sobel_rgb565
00003ae4 g     F .text	00000098 strlen
00010ffc g     F .text	00000154 open
0000db7c g     F .text	000000dc .hidden __gedf2
00013f40 g     O .rwdata	00000004 __wctomb
0000254c g     F .text	00000008 GetSobelAllResult
0000a918 g     F .text	00000018 __sprint_r
00010ae8 g     F .text	00000034 alt_icache_flush_all
00015bac g     O .bss	00000004 start_sobel_a
00013f60 g     O .rwdata	00000004 alt_priority_mask
00010b6c g     F .text	00000088 alt_ic_irq_enable
00005d74 g     F .text	0000001c __vfprintf_internal
0000c73c g     F .text	0000005c _wctomb_r
0000e464 g     F .text	000008fc .hidden __subdf3
0000938c g     F .text	000000b0 __lo0bits
00013f64 g     O .rwdata	00000008 alt_alarm_list
00010a28 g     F .text	00000060 _do_ctors
0000c64c g     F .text	000000c0 wcrtomb
0000eef8 g     F .text	000000d0 close
00015b68 g     O .bss	00000004 end_global
0000f228 g     F .text	00000084 alt_load
0000c268 g     F .text	00000080 fputwc
00003130 g     F .text	00000014 free
00007e38 g     F .text	00000004 __sinit_lock_acquire
00009100 g     F .text	00000120 __multadd
000090d8 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10970904 	addi	r2,r2,23588
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10970904 	addi	r2,r2,23588
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73317 	ldw	r2,-25396(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73317 	ldw	r2,-25396(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6afcb14 	ori	gp,gp,48940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	1096d614 	ori	r2,r2,23384

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d74914 	ori	r3,r3,23844

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000f2280 	call	f228 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f3bc0 	call	f3bc <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009d40 	call	9d4 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009d40 	call	9d4 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009d40 	call	9d4 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	8407a304 	addi	r16,r16,7820
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009d40 	call	9d4 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009d40 	call	9d4 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84075304 	addi	r16,r16,7500
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009d40 	call	9d4 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009d40 	call	9d4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009d40 	call	9d4 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009d40 	call	9d4 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009d40 	call	9d4 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009d40 	call	9d4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009d40 	call	9d4 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84070904 	addi	r16,r16,7204
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009d40 	call	9d4 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009d40 	call	9d4 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009d40 	call	9d4 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009d41 	jmpi	9d4 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2106f104 	addi	r4,r4,7108
     620:	297fffcc 	andi	r5,r5,65535
     624:	00039800 	call	3980 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2106f904 	addi	r4,r4,7140
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00039800 	call	3980 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	21070104 	addi	r4,r4,7172
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	00039801 	jmpi	3980 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
void conv_grayscale(void *picture,
		            int width,
		            int height) {
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
     774:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     778:	d1a70b15 	stw	r6,-25556(gp)

	for (y = 0 ; y < height ; y++) {
     77c:	0180130e 	bge	zero,r6,7cc <conv_grayscale+0x58>
     780:	2957883a 	add	r11,r5,r5
     784:	2813883a 	mov	r9,r5
     788:	0015883a 	mov	r10,zero
		for (x = 0 ; x < width ; x++) {
     78c:	01400a0e 	bge	zero,r5,7b8 <conv_grayscale+0x44>
     790:	4945c83a 	sub	r2,r9,r5
     794:	2011883a 	mov	r8,r4
			pos = y*width+x;
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     798:	d0e70d17 	ldw	r3,-25548(gp)
     79c:	41c0000b 	ldhu	r7,0(r8)
     7a0:	1887883a 	add	r3,r3,r2
     7a4:	380fc032 	custom	0,r7,r7,zero
     7a8:	19c00005 	stb	r7,0(r3)
     7ac:	10800044 	addi	r2,r2,1
     7b0:	42000084 	addi	r8,r8,2
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;

	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7b4:	48bff81e 	bne	r9,r2,798 <__alt_data_end+0xff000798>
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;

	for (y = 0 ; y < height ; y++) {
     7b8:	52800044 	addi	r10,r10,1
     7bc:	22c9883a 	add	r4,r4,r11
     7c0:	4953883a 	add	r9,r9,r5
     7c4:	32bff11e 	bne	r6,r10,78c <__alt_data_end+0xff00078c>
     7c8:	f800283a 	ret
     7cc:	f800283a 	ret

000007d0 <conv_grayscale_init>:
}

void conv_grayscale_init(int width, int height){
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7d0:	d0a70d17 	ldw	r2,-25548(gp)
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     7d4:	defffd04 	addi	sp,sp,-12
     7d8:	dc400115 	stw	r17,4(sp)
     7dc:	dc000015 	stw	r16,0(sp)
     7e0:	dfc00215 	stw	ra,8(sp)
		grayscale_width = width;
     7e4:	d1270c15 	stw	r4,-25552(gp)
		grayscape_height = height;
     7e8:	d1670b15 	stw	r5,-25556(gp)
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     7ec:	2023883a 	mov	r17,r4
     7f0:	2821883a 	mov	r16,r5
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7f4:	10000226 	beq	r2,zero,800 <conv_grayscale_init+0x30>
			free(grayscale_array);
     7f8:	1009883a 	mov	r4,r2
     7fc:	00031300 	call	3130 <free>
		grayscale_array = (unsigned char *) malloc(width* height);
     800:	8c09383a 	mul	r4,r17,r16
     804:	000311c0 	call	311c <malloc>
     808:	d0a70d15 	stw	r2,-25548(gp)
}
     80c:	dfc00217 	ldw	ra,8(sp)
     810:	dc400117 	ldw	r17,4(sp)
     814:	dc000017 	ldw	r16,0(sp)
     818:	dec00304 	addi	sp,sp,12
     81c:	f800283a 	ret

00000820 <conv_grayscale_partial>:

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
     820:	298d883a 	add	r6,r5,r6
     824:	2980110e 	bge	r5,r6,86c <conv_grayscale_partial+0x4c>
     828:	d0a70c17 	ldw	r2,-25552(gp)
		for (x = 0 ; x < grayscale_width ; x++) {
     82c:	0007883a 	mov	r3,zero
     830:	00800c0e 	bge	zero,r2,864 <conv_grayscale_partial+0x44>
			pos = y*grayscale_width+x;
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     834:	2885383a 	mul	r2,r5,r2
     838:	d2270d17 	ldw	r8,-25548(gp)
     83c:	10c5883a 	add	r2,r2,r3
     840:	108f883a 	add	r7,r2,r2
     844:	21cf883a 	add	r7,r4,r7
     848:	39c0000b 	ldhu	r7,0(r7)
     84c:	4085883a 	add	r2,r8,r2
     850:	380fc032 	custom	0,r7,r7,zero
     854:	11c00005 	stb	r7,0(r2)

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
		for (x = 0 ; x < grayscale_width ; x++) {
     858:	d0a70c17 	ldw	r2,-25552(gp)
     85c:	18c00044 	addi	r3,r3,1
     860:	18bff416 	blt	r3,r2,834 <__alt_data_end+0xff000834>
}

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
     864:	29400044 	addi	r5,r5,1
     868:	29bff01e 	bne	r5,r6,82c <__alt_data_end+0xff00082c>
     86c:	f800283a 	ret

00000870 <get_grayscale_width>:
}


int get_grayscale_width() {
	return grayscale_width;
}
     870:	d0a70c17 	ldw	r2,-25552(gp)
     874:	f800283a 	ret

00000878 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     878:	d0a70b17 	ldw	r2,-25556(gp)
     87c:	f800283a 	ret

00000880 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     880:	d0a70d17 	ldw	r2,-25548(gp)
     884:	f800283a 	ret

00000888 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     888:	00c04034 	movhi	r3,256
     88c:	18c42704 	addi	r3,r3,4252
     890:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     894:	108000cc 	andi	r2,r2,3
     898:	103ffd1e 	bne	r2,zero,890 <__alt_data_end+0xff000890>
}
     89c:	f800283a 	ret

000008a0 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a0:	01004034 	movhi	r4,256
     8a4:	21042704 	addi	r4,r4,4252
     8a8:	00c04034 	movhi	r3,256
     8ac:	18c42704 	addi	r3,r3,4252
     8b0:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8b4:	108000cc 	andi	r2,r2,3
     8b8:	103ffb1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8bc:	00800104 	movi	r2,4
     8c0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8c8:	108000cc 	andi	r2,r2,3
     8cc:	103ffd1e 	bne	r2,zero,8c4 <__alt_data_end+0xff0008c4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8d0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8d4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8d8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8dc:	dfc00315 	stw	ra,12(sp)
     8e0:	dc800215 	stw	r18,8(sp)
     8e4:	dc400115 	stw	r17,4(sp)
     8e8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8ec:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8f0:	01000074 	movhi	r4,1
     8f4:	2107e904 	addi	r4,r4,8100
     8f8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8fc:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     900:	00039800 	call	3980 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     904:	04800a0e 	bge	zero,r18,930 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     908:	04404034 	movhi	r17,256
     90c:	8c442404 	addi	r17,r17,4240
     910:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     914:	89800037 	ldwio	r6,0(r17)
     918:	01000074 	movhi	r4,1
     91c:	800b883a 	mov	r5,r16
     920:	2107f204 	addi	r4,r4,8136
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     924:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     928:	00039800 	call	3980 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     92c:	943ff81e 	bne	r18,r16,910 <__alt_data_end+0xff000910>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     930:	dfc00317 	ldw	ra,12(sp)
     934:	dc800217 	ldw	r18,8(sp)
     938:	dc400117 	ldw	r17,4(sp)
     93c:	dc000017 	ldw	r16,0(sp)
     940:	dec00404 	addi	sp,sp,16
     944:	f800283a 	ret

00000948 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     948:	01804034 	movhi	r6,256
     94c:	31842704 	addi	r6,r6,4252
     950:	00c04034 	movhi	r3,256
     954:	18c42704 	addi	r3,r3,4252
     958:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     95c:	108000cc 	andi	r2,r2,3
     960:	103ffb1e 	bne	r2,zero,950 <__alt_data_end+0xff000950>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     964:	00804034 	movhi	r2,256
     968:	21003fcc 	andi	r4,r4,255
     96c:	10842404 	addi	r2,r2,4240
     970:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     974:	00804034 	movhi	r2,256
     978:	10842504 	addi	r2,r2,4244
     97c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     980:	008010c4 	movi	r2,67
     984:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     988:	180b883a 	mov	r5,r3
     98c:	00c04034 	movhi	r3,256
     990:	18c42704 	addi	r3,r3,4252
     994:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     998:	108000cc 	andi	r2,r2,3
     99c:	103ffb1e 	bne	r2,zero,98c <__alt_data_end+0xff00098c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9a0:	00804034 	movhi	r2,256
     9a4:	21000044 	addi	r4,r4,1
     9a8:	10842404 	addi	r2,r2,4240
     9ac:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9b0:	00800884 	movi	r2,34
     9b4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9b8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9bc:	108000cc 	andi	r2,r2,3
     9c0:	103ffd1e 	bne	r2,zero,9b8 <__alt_data_end+0xff0009b8>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9c4:	00804034 	movhi	r2,256
     9c8:	10842604 	addi	r2,r2,4248
}
     9cc:	10800037 	ldwio	r2,0(r2)
     9d0:	f800283a 	ret

000009d4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9d4:	01c04034 	movhi	r7,256
     9d8:	39c42704 	addi	r7,r7,4252
     9dc:	00c04034 	movhi	r3,256
     9e0:	18c42704 	addi	r3,r3,4252
     9e4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e8:	108000cc 	andi	r2,r2,3
     9ec:	103ffb1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9f0:	00804034 	movhi	r2,256
     9f4:	10842404 	addi	r2,r2,4240
     9f8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9fc:	00804034 	movhi	r2,256
     a00:	10842504 	addi	r2,r2,4244
     a04:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a08:	00804034 	movhi	r2,256
     a0c:	10842604 	addi	r2,r2,4248
     a10:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a14:	00801084 	movi	r2,66
     a18:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a1c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a20:	108000cc 	andi	r2,r2,3
     a24:	103ffd1e 	bne	r2,zero,a1c <__alt_data_end+0xff000a1c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a28:	f800283a 	ret

00000a2c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a2c:	00804034 	movhi	r2,256
     a30:	10841804 	addi	r2,r2,4192
     a34:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a38:	01000284 	movi	r4,10
     a3c:	000f7441 	jmpi	f744 <usleep>

00000a40 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a40:	00804034 	movhi	r2,256
     a44:	10841904 	addi	r2,r2,4196
     a48:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a4c:	01000284 	movi	r4,10
     a50:	000f7441 	jmpi	f744 <usleep>

00000a54 <init_LCD>:
}


void init_LCD() {
     a54:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a58:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a5c:	dd400515 	stw	r21,20(sp)
     a60:	dfc00815 	stw	ra,32(sp)
     a64:	ddc00715 	stw	r23,28(sp)
     a68:	dd800615 	stw	r22,24(sp)
     a6c:	dd000415 	stw	r20,16(sp)
     a70:	dcc00315 	stw	r19,12(sp)
     a74:	dc800215 	stw	r18,8(sp)
     a78:	dc400115 	stw	r17,4(sp)
     a7c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a80:	05400084 	movi	r21,2
     a84:	10841a04 	addi	r2,r2,4200
     a88:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a8c:	04804034 	movhi	r18,256
     a90:	94841804 	addi	r18,r18,4192
     a94:	00800a04 	movi	r2,40
     a98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a9c:	04000284 	movi	r16,10
     aa0:	8009883a 	mov	r4,r16
     aa4:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aa8:	05c00444 	movi	r23,17
     aac:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     ab0:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab4:	04404034 	movhi	r17,256
     ab8:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     abc:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac0:	0027883a 	mov	r19,zero
     ac4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ac8:	8009883a 	mov	r4,r16
     acc:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ad0:	008032c4 	movi	r2,203
     ad4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ad8:	8009883a 	mov	r4,r16
     adc:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae0:	00800e44 	movi	r2,57
     ae4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ae8:	8009883a 	mov	r4,r16
     aec:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af0:	00800b04 	movi	r2,44
     af4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     af8:	8009883a 	mov	r4,r16
     afc:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b00:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b0c:	00800d04 	movi	r2,52
     b10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b28:	008033c4 	movi	r2,207
     b2c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b3c:	8009883a 	mov	r4,r16
     b40:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b44:	05802044 	movi	r22,129
     b48:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b54:	00800c04 	movi	r2,48
     b58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b64:	00803a04 	movi	r2,232
     b68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00802144 	movi	r2,133
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	05000044 	movi	r20,1
     b88:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	00801e44 	movi	r2,121
     b98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba4:	00803a84 	movi	r2,234
     ba8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bc4:	8009883a 	mov	r4,r16
     bc8:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bcc:	00801904 	movi	r2,100
     bd0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd4:	8009883a 	mov	r4,r16
     bd8:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bdc:	008000c4 	movi	r2,3
     be0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be4:	8009883a 	mov	r4,r16
     be8:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bec:	00800484 	movi	r2,18
     bf0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf4:	8009883a 	mov	r4,r16
     bf8:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bfc:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c00:	8009883a 	mov	r4,r16
     c04:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c08:	00803dc4 	movi	r2,247
     c0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c10:	8009883a 	mov	r4,r16
     c14:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c18:	00800804 	movi	r2,32
     c1c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c20:	8009883a 	mov	r4,r16
     c24:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c28:	00803004 	movi	r2,192
     c2c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c30:	8009883a 	mov	r4,r16
     c34:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c38:	05800984 	movi	r22,38
     c3c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c48:	00800104 	movi	r2,4
     c4c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c58:	00803044 	movi	r2,193
     c5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c68:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c6c:	8009883a 	mov	r4,r16
     c70:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c74:	00803144 	movi	r2,197
     c78:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c7c:	8009883a 	mov	r4,r16
     c80:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c84:	00800d44 	movi	r2,53
     c88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c8c:	8009883a 	mov	r4,r16
     c90:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c94:	00800f84 	movi	r2,62
     c98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca4:	008031c4 	movi	r2,199
     ca8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cac:	8009883a 	mov	r4,r16
     cb0:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb4:	00802f84 	movi	r2,190
     cb8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc4:	00802c44 	movi	r2,177
     cc8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd8:	8009883a 	mov	r4,r16
     cdc:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce0:	00800404 	movi	r2,16
     ce4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce8:	8009883a 	mov	r4,r16
     cec:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf0:	00800e84 	movi	r2,58
     cf4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf8:	8009883a 	mov	r4,r16
     cfc:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d00:	00801544 	movi	r2,85
     d04:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d08:	8009883a 	mov	r4,r16
     d0c:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d10:	00802d84 	movi	r2,182
     d14:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
     d1c:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d20:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d24:	8009883a 	mov	r4,r16
     d28:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d2c:	00802884 	movi	r2,162
     d30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d3c:	00803c84 	movi	r2,242
     d40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d44:	8009883a 	mov	r4,r16
     d48:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d4c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d58:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d64:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00800d84 	movi	r2,54
     d74:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d80:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	00800a84 	movi	r2,42
     d90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc0:	00803bc4 	movi	r2,239
     dc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000f7440 	call	f744 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dd0:	00800ac4 	movi	r2,43
     dd4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dd8:	8009883a 	mov	r4,r16
     ddc:	000f7440 	call	f744 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     de0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dec:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     df0:	8009883a 	mov	r4,r16
     df4:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     df8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000f7440 	call	f744 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	00800fc4 	movi	r2,63
     e08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e0c:	8009883a 	mov	r4,r16
     e10:	000f7440 	call	f744 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e14:	00c04034 	movhi	r3,256
     e18:	00803c04 	movi	r2,240
     e1c:	18c41d04 	addi	r3,r3,4212
     e20:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e24:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e28:	00805004 	movi	r2,320
     e2c:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e30:	00800a44 	movi	r2,41
     e34:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e38:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e3c:	dfc00817 	ldw	ra,32(sp)
     e40:	ddc00717 	ldw	r23,28(sp)
     e44:	dd800617 	ldw	r22,24(sp)
     e48:	dd400517 	ldw	r21,20(sp)
     e4c:	dd000417 	ldw	r20,16(sp)
     e50:	dcc00317 	ldw	r19,12(sp)
     e54:	dc800217 	ldw	r18,8(sp)
     e58:	dc400117 	ldw	r17,4(sp)
     e5c:	dc000017 	ldw	r16,0(sp)
     e60:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e64:	000f7441 	jmpi	f744 <usleep>

00000e68 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e68:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e6c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e70:	dc000015 	stw	r16,0(sp)
     e74:	dfc00415 	stw	ra,16(sp)
     e78:	dcc00315 	stw	r19,12(sp)
     e7c:	dc800215 	stw	r18,8(sp)
     e80:	dc400115 	stw	r17,4(sp)
     e84:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e88:	10841e04 	addi	r2,r2,4216
     e8c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e90:	00804034 	movhi	r2,256
     e94:	10841804 	addi	r2,r2,4192
     e98:	00c00b04 	movi	r3,44
     e9c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ea0:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ea4:	01000284 	movi	r4,10
     ea8:	000f7440 	call	f744 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eac:	90000a26 	beq	r18,zero,ed8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     eb0:	04c04034 	movhi	r19,256
     eb4:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eb8:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ebc:	8080000b 	ldhu	r2,0(r16)
     ec0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ec4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ec8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     ecc:	000f7440 	call	f744 <usleep>
     ed0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ed4:	8cbff91e 	bne	r17,r18,ebc <__alt_data_end+0xff000ebc>
		LCD_Write_Data(data_array[pixels]);
}
     ed8:	dfc00417 	ldw	ra,16(sp)
     edc:	dcc00317 	ldw	r19,12(sp)
     ee0:	dc800217 	ldw	r18,8(sp)
     ee4:	dc400117 	ldw	r17,4(sp)
     ee8:	dc000017 	ldw	r16,0(sp)
     eec:	dec00504 	addi	sp,sp,20
     ef0:	f800283a 	ret

00000ef4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ef4:	d0a70e0b 	ldhu	r2,-25544(gp)
     ef8:	3080010e 	bge	r6,r2,f00 <transfer_LCD_with_dma+0xc>
     efc:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f00:	d0e70e8b 	ldhu	r3,-25542(gp)
     f04:	28c0010e 	bge	r5,r3,f0c <transfer_LCD_with_dma+0x18>
     f08:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f0c:	01804034 	movhi	r6,256
     f10:	31841e04 	addi	r6,r6,4216
     f14:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f18:	01404034 	movhi	r5,256
     f1c:	29441b04 	addi	r5,r5,4204
     f20:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f24:	18ffffcc 	andi	r3,r3,65535
     f28:	10bfffcc 	andi	r2,r2,65535
     f2c:	1885383a 	mul	r2,r3,r2
     f30:	00c04034 	movhi	r3,256
     f34:	18c41c04 	addi	r3,r3,4208
     f38:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f3c:	39c03fcc 	andi	r7,r7,255
     f40:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f44:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f48:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f4c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f50:	38000326 	beq	r7,zero,f60 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f54:	00c04404 	movi	r3,272
     f58:	10c0002d 	sthio	r3,0(r2)
     f5c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f60:	00c04004 	movi	r3,256
     f64:	10c0002d 	sthio	r3,0(r2)
     f68:	f800283a 	ret

00000f6c <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f6c:	defff804 	addi	sp,sp,-32
     f70:	dfc00715 	stw	ra,28(sp)
     f74:	dd800615 	stw	r22,24(sp)
     f78:	dd400515 	stw	r21,20(sp)
     f7c:	dd000415 	stw	r20,16(sp)
     f80:	dcc00315 	stw	r19,12(sp)
     f84:	dc800215 	stw	r18,8(sp)
     f88:	dc400115 	stw	r17,4(sp)
     f8c:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     f90:	0000a540 	call	a54 <init_LCD>
  init_camera();
     f94:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f98:	01000604 	movi	r4,24
     f9c:	00025640 	call	2564 <vga_set_swap>
  printf("Hello from Nios II!\n");
     fa0:	01000074 	movhi	r4,1
     fa4:	2107fb04 	addi	r4,r4,8172
     fa8:	0003a7c0 	call	3a7c <puts>
  cam_get_profiling();
     fac:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb0:	00005a80 	call	5a8 <cam_get_xsize>
     fb4:	1021883a 	mov	r16,r2
     fb8:	00005cc0 	call	5cc <cam_get_ysize>
     fbc:	10bfffcc 	andi	r2,r2,65535
     fc0:	813fffcc 	andi	r4,r16,65535
     fc4:	2089383a 	mul	r4,r4,r2
     fc8:	05000074 	movhi	r20,1
     fcc:	a508e004 	addi	r20,r20,9088
     fd0:	000311c0 	call	311c <malloc>
     fd4:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd8:	00005a80 	call	5a8 <cam_get_xsize>
     fdc:	1021883a 	mov	r16,r2
     fe0:	00005cc0 	call	5cc <cam_get_ysize>
     fe4:	10bfffcc 	andi	r2,r2,65535
     fe8:	813fffcc 	andi	r4,r16,65535
     fec:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ff0:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
     ff4:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff8:	000311c0 	call	311c <malloc>
     ffc:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1000:	00005a80 	call	5a8 <cam_get_xsize>
    1004:	1021883a 	mov	r16,r2
    1008:	00005cc0 	call	5cc <cam_get_ysize>
    100c:	10bfffcc 	andi	r2,r2,65535
    1010:	813fffcc 	andi	r4,r16,65535
    1014:	2089383a 	mul	r4,r4,r2
    1018:	000311c0 	call	311c <malloc>
    101c:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1020:	00005a80 	call	5a8 <cam_get_xsize>
    1024:	1021883a 	mov	r16,r2
    1028:	00005cc0 	call	5cc <cam_get_ysize>
    102c:	10bfffcc 	andi	r2,r2,65535
    1030:	813fffcc 	andi	r4,r16,65535
    1034:	2089383a 	mul	r4,r4,r2
    1038:	000311c0 	call	311c <malloc>
  cam_set_image_pointer(0,buffer1);
    103c:	b00b883a 	mov	r5,r22
    1040:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1044:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    1048:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    104c:	a80b883a 	mov	r5,r21
    1050:	01000044 	movi	r4,1
    1054:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1058:	880b883a 	mov	r5,r17
    105c:	01000084 	movi	r4,2
    1060:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1064:	800b883a 	mov	r5,r16
    1068:	010000c4 	movi	r4,3
    106c:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1070:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1074:	00005a80 	call	5a8 <cam_get_xsize>
    1078:	1021883a 	mov	r16,r2
    107c:	00005cc0 	call	5cc <cam_get_ysize>
    1080:	80ffffcc 	andi	r3,r16,65535
    1084:	1806d07a 	srli	r3,r3,1
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	18a3383a 	mul	r17,r3,r2

  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1090:	00005a80 	call	5a8 <cam_get_xsize>
    1094:	1021883a 	mov	r16,r2
    1098:	00005cc0 	call	5cc <cam_get_ysize>
    109c:	813fffcc 	andi	r4,r16,65535
    10a0:	2008d07a 	srli	r4,r4,1
    10a4:	117fffcc 	andi	r5,r2,65535
    10a8:	00012e40 	call	12e4 <init_sobel_arrays>
  conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
    10ac:	00005a80 	call	5a8 <cam_get_xsize>
    10b0:	1021883a 	mov	r16,r2
    10b4:	00005cc0 	call	5cc <cam_get_ysize>
    10b8:	813fffcc 	andi	r4,r16,65535
    10bc:	2008d07a 	srli	r4,r4,1
    10c0:	117fffcc 	andi	r5,r2,65535
    10c4:	00007d00 	call	7d0 <conv_grayscale_init>
  //sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());

  do {
	  if (new_image_available() != 0) {
    10c8:	00007340 	call	734 <new_image_available>
    10cc:	10803fcc 	andi	r2,r2,255
    10d0:	1080201c 	xori	r2,r2,128
    10d4:	10bfe004 	addi	r2,r2,-128
    10d8:	103ffb26 	beq	r2,zero,10c8 <__alt_data_end+0xff0010c8>
		  if (current_image_valid()!=0) {
    10dc:	00006dc0 	call	6dc <current_image_valid>
    10e0:	10bfffcc 	andi	r2,r2,65535
    10e4:	10a0001c 	xori	r2,r2,32768
    10e8:	10a00004 	addi	r2,r2,-32768
    10ec:	103ff626 	beq	r2,zero,10c8 <__alt_data_end+0xff0010c8>

			  alt_timestamp_start();
    10f0:	00104ec0 	call	104ec <alt_timestamp_start>

			  start_global = alt_timestamp();
    10f4:	00105640 	call	10564 <alt_timestamp>
    10f8:	d0a71015 	stw	r2,-25536(gp)
			  current_mode = DIPSW_get_value();
    10fc:	00007600 	call	760 <DIPSW_get_value>
    1100:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1104:	00006f00 	call	6f0 <current_image_pointer>
    1108:	102b883a 	mov	r21,r2
		      switch (mode) {
    110c:	808001cc 	andi	r2,r16,7
    1110:	1000421e 	bne	r2,zero,121c <main+0x2b0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1114:	00005a80 	call	5a8 <cam_get_xsize>
    1118:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    111c:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1120:	b17fffcc 	andi	r5,r22,65535
    1124:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1128:	84003fcc 	andi	r16,r16,255
    112c:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1130:	000f883a 	mov	r7,zero
    1134:	11bfffcc 	andi	r6,r2,65535
    1138:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    113c:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1140:	0000ef40 	call	ef4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1144:	80006216 	blt	r16,zero,12d0 <main+0x364>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    1148:	00105640 	call	10564 <alt_timestamp>
    114c:	d0a70f15 	stw	r2,-25540(gp)
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1150:	d1671317 	ldw	r5,-25524(gp)
    1154:	d0a71417 	ldw	r2,-25520(gp)
    1158:	01000074 	movhi	r4,1
    115c:	21080004 	addi	r4,r4,8192
    1160:	288bc83a 	sub	r5,r5,r2
    1164:	00039800 	call	3980 <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1168:	d0a71617 	ldw	r2,-25512(gp)
    116c:	d1671517 	ldw	r5,-25516(gp)
    1170:	01000074 	movhi	r4,1
    1174:	21080504 	addi	r4,r4,8212
    1178:	288bc83a 	sub	r5,r5,r2
    117c:	00039800 	call	3980 <printf>
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1180:	d0a71117 	ldw	r2,-25532(gp)
    1184:	d4271217 	ldw	r16,-25528(gp)
    1188:	1421c83a 	sub	r16,r2,r16
    118c:	8444b03a 	or	r2,r16,r17
    1190:	90801d36 	bltu	r18,r2,1208 <main+0x29c>
    1194:	8004913a 	slli	r2,r16,4
    1198:	1444b03a 	or	r2,r2,r17
    119c:	1505883a 	add	r2,r2,r20
    11a0:	11800003 	ldbu	r6,0(r2)
    11a4:	01000074 	movhi	r4,1
    11a8:	800b883a 	mov	r5,r16
    11ac:	21080804 	addi	r4,r4,8224
    11b0:	00039800 	call	3980 <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    11b4:	d0a71017 	ldw	r2,-25536(gp)
    11b8:	d1270f17 	ldw	r4,-25540(gp)
    11bc:	2089c83a 	sub	r4,r4,r2
    11c0:	00030100 	call	3010 <__floatunsidf>
    11c4:	01d06234 	movhi	r7,16776
    11c8:	39f5e104 	addi	r7,r7,-10364
    11cc:	1009883a 	mov	r4,r2
    11d0:	180b883a 	mov	r5,r3
    11d4:	000d883a 	mov	r6,zero
    11d8:	00027280 	call	2728 <__divdf3>
    11dc:	100d883a 	mov	r6,r2
    11e0:	180f883a 	mov	r7,r3
    11e4:	0009883a 	mov	r4,zero
    11e8:	014ffc34 	movhi	r5,16368
    11ec:	00027280 	call	2728 <__divdf3>
    11f0:	01000074 	movhi	r4,1
    11f4:	100b883a 	mov	r5,r2
    11f8:	180d883a 	mov	r6,r3
    11fc:	21081204 	addi	r4,r4,8264
    1200:	00039800 	call	3980 <printf>
    1204:	003fb006 	br	10c8 <__alt_data_end+0xff0010c8>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1208:	880b883a 	mov	r5,r17
    120c:	8009883a 	mov	r4,r16
    1210:	00025740 	call	2574 <__divsi3>
    1214:	100d883a 	mov	r6,r2
    1218:	003fe206 	br	11a4 <__alt_data_end+0xff0011a4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    121c:	00105640 	call	10564 <alt_timestamp>
    1220:	d0a71215 	stw	r2,-25528(gp)


		    	  	   start_conv_grayscale = alt_timestamp();
    1224:	00105640 	call	10564 <alt_timestamp>
    1228:	d0a71415 	stw	r2,-25520(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    122c:	00005a80 	call	5a8 <cam_get_xsize>
    1230:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    1234:	00005cc0 	call	5cc <cam_get_ysize>
		      default:
		    	  	   start_all = alt_timestamp();


		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1238:	b17fffcc 	andi	r5,r22,65535
    123c:	280ad07a 	srli	r5,r5,1
    1240:	11bfffcc 	andi	r6,r2,65535
    1244:	a809883a 	mov	r4,r21
    1248:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    124c:	00105640 	call	10564 <alt_timestamp>
    1250:	d0a71315 	stw	r2,-25524(gp)

                       grayscale = get_grayscale_picture();
    1254:	00008800 	call	880 <get_grayscale_picture>
    1258:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    125c:	00105640 	call	10564 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    1260:	a809883a 	mov	r4,r21
    1264:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    1268:	d0a71615 	stw	r2,-25512(gp)
                       sobel_complete(grayscale, 128);
    126c:	0001a880 	call	1a88 <sobel_complete>
                       end_sobel = alt_timestamp();
    1270:	00105640 	call	10564 <alt_timestamp>
    1274:	d0a71515 	stw	r2,-25516(gp)

		    	  	   //sobel_all_partial((void *)image);
		    	  	   //sobel_all_complete((void *)image);
		    	  	   //sobel_all_complete_fusion((void *)image);

                       end_all = alt_timestamp();
    1278:	00105640 	call	10564 <alt_timestamp>
    127c:	d0a71115 	stw	r2,-25532(gp)

                       grayscale=GetSobelResult();
    1280:	0001d040 	call	1d04 <GetSobelResult>
    1284:	102d883a 	mov	r22,r2
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1288:	00005a80 	call	5a8 <cam_get_xsize>
    128c:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    1290:	00005cc0 	call	5cc <cam_get_ysize>
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1294:	a97fffcc 	andi	r5,r21,65535
    1298:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    129c:	84003fcc 	andi	r16,r16,255
    12a0:	8400201c 	xori	r16,r16,128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12a4:	01c00044 	movi	r7,1
    12a8:	11bfffcc 	andi	r6,r2,65535
    12ac:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b0:	843fe004 	addi	r16,r16,-128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12b4:	0000ef40 	call	ef4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b8:	803fa30e 	bge	r16,zero,1148 <__alt_data_end+0xff001148>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12bc:	01000604 	movi	r4,24
    12c0:	00025640 	call	2564 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12c4:	b009883a 	mov	r4,r22
    12c8:	00025540 	call	2554 <vga_set_pointer>
    12cc:	003f9e06 	br	1148 <__alt_data_end+0xff001148>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12d0:	01000204 	movi	r4,8
    12d4:	00025640 	call	2564 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12d8:	a809883a 	mov	r4,r21
    12dc:	00025540 	call	2554 <vga_set_pointer>
    12e0:	003f9906 	br	1148 <__alt_data_end+0xff001148>

000012e4 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12e4:	defffd04 	addi	sp,sp,-12
    12e8:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12ec:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12f0:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12f4:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12f8:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12fc:	21081604 	addi	r4,r4,8280
    1300:	280d883a 	mov	r6,r5
    1304:	800f883a 	mov	r7,r16
    1308:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    130c:	dfc00215 	stw	ra,8(sp)
    1310:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    1314:	d0e71715 	stw	r3,-25508(gp)
	sobel_height = height;
    1318:	d0a71915 	stw	r2,-25500(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    131c:	00039800 	call	3980 <printf>
	if (sobel_x_result != NULL)
    1320:	d1271a17 	ldw	r4,-25496(gp)
    1324:	20000126 	beq	r4,zero,132c <init_sobel_arrays+0x48>
		free(sobel_x_result);
    1328:	00031300 	call	3130 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    132c:	8423883a 	add	r17,r16,r16
    1330:	8809883a 	mov	r4,r17
    1334:	000311c0 	call	311c <malloc>
	if (sobel_y_result != NULL)
    1338:	d1271b17 	ldw	r4,-25492(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    133c:	d0a71a15 	stw	r2,-25496(gp)
	if (sobel_y_result != NULL)
    1340:	20000126 	beq	r4,zero,1348 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    1344:	00031300 	call	3130 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1348:	8809883a 	mov	r4,r17
    134c:	000311c0 	call	311c <malloc>
	if (sobel_result != NULL)
    1350:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1354:	d0a71b15 	stw	r2,-25492(gp)
	if (sobel_result != NULL)
    1358:	20000126 	beq	r4,zero,1360 <init_sobel_arrays+0x7c>
		free(sobel_result);
    135c:	00031300 	call	3130 <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1360:	8009883a 	mov	r4,r16
    1364:	000f6cc0 	call	f6cc <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    1368:	d1271c17 	ldw	r4,-25488(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    136c:	d0a71815 	stw	r2,-25504(gp)
	if (sobel_rgb565 != NULL)
    1370:	20000126 	beq	r4,zero,1378 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    1374:	00031300 	call	3130 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1378:	8809883a 	mov	r4,r17
    137c:	000311c0 	call	311c <malloc>
    1380:	d0a71c15 	stw	r2,-25488(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1384:	0005883a 	mov	r2,zero
    1388:	04000f0e 	bge	zero,r16,13c8 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    138c:	d1a71a17 	ldw	r6,-25496(gp)
		sobel_y_result[loop] = 0;
    1390:	d1671b17 	ldw	r5,-25492(gp)
		sobel_result[loop] = 0;
    1394:	d1271817 	ldw	r4,-25504(gp)
    1398:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    139c:	30cd883a 	add	r6,r6,r3
    13a0:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    13a4:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    13a8:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    13ac:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    13b0:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    13b4:	d1271c17 	ldw	r4,-25488(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13b8:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    13bc:	20c7883a 	add	r3,r4,r3
    13c0:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13c4:	80bff11e 	bne	r16,r2,138c <__alt_data_end+0xff00138c>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    13c8:	dfc00217 	ldw	ra,8(sp)
    13cc:	dc400117 	ldw	r17,4(sp)
    13d0:	dc000017 	ldw	r16,0(sp)
    13d4:	dec00304 	addi	sp,sp,12
    13d8:	f800283a 	ret

000013dc <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13dc:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13e0:	31bfffc4 	addi	r6,r6,-1
    13e4:	38c00047 	ldb	r3,1(r7)
    13e8:	328d383a 	mul	r6,r6,r10
    13ec:	3b8000c7 	ldb	r14,3(r7)
    13f0:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    13f4:	5185883a 	add	r2,r10,r6
    13f8:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13fc:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    1400:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1404:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1408:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    140c:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1410:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1414:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1418:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    141c:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1420:	49000043 	ldbu	r4,1(r9)
    1424:	3a800147 	ldb	r10,5(r7)
    1428:	139d383a 	mul	r14,r2,r14
    142c:	60d9383a 	mul	r12,r12,r3
    1430:	68800003 	ldbu	r2,0(r13)
    1434:	38c001c7 	ldb	r3,7(r7)
    1438:	5a17383a 	mul	r11,r11,r8
    143c:	33ffffc3 	ldbu	r15,-1(r6)
    1440:	3a000007 	ldb	r8,0(r7)
    1444:	2295383a 	mul	r10,r4,r10
    1448:	31000043 	ldbu	r4,1(r6)
    144c:	39800087 	ldb	r6,2(r7)
    1450:	730b883a 	add	r5,r14,r12
    1454:	10d3383a 	mul	r9,r2,r3
    1458:	6b3fffc3 	ldbu	r12,-1(r13)
    145c:	38c00187 	ldb	r3,6(r7)
    1460:	2acb883a 	add	r5,r5,r11
    1464:	7a11383a 	mul	r8,r15,r8
    1468:	6ac00043 	ldbu	r11,1(r13)
    146c:	39c00207 	ldb	r7,8(r7)
    1470:	2a8b883a 	add	r5,r5,r10
    1474:	2189383a 	mul	r4,r4,r6
    1478:	2a45883a 	add	r2,r5,r9
    147c:	60c7383a 	mul	r3,r12,r3
    1480:	1205883a 	add	r2,r2,r8
    1484:	59cb383a 	mul	r5,r11,r7
    1488:	1105883a 	add	r2,r2,r4
    148c:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    1490:	1145883a 	add	r2,r2,r5
    1494:	f800283a 	ret

00001498 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1498:	defff604 	addi	sp,sp,-40
    149c:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14a0:	d4671917 	ldw	r17,-25500(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    14a4:	dfc00915 	stw	ra,36(sp)
    14a8:	df000815 	stw	fp,32(sp)
    14ac:	ddc00715 	stw	r23,28(sp)
    14b0:	dd800615 	stw	r22,24(sp)
    14b4:	dd400515 	stw	r21,20(sp)
    14b8:	dd000415 	stw	r20,16(sp)
    14bc:	dcc00315 	stw	r19,12(sp)
    14c0:	dc800215 	stw	r18,8(sp)
    14c4:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14c8:	8c7fffc4 	addi	r17,r17,-1
    14cc:	00800044 	movi	r2,1
    14d0:	14402e0e 	bge	r2,r17,158c <sobel_x+0xf4>
    14d4:	d3671717 	ldw	r13,-25508(gp)
    14d8:	d3e71a17 	ldw	r15,-25496(gp)
    14dc:	03800084 	movi	r14,2
    14e0:	6b65883a 	add	r18,r13,r13
    14e4:	9385883a 	add	r2,r18,r14
    14e8:	2359883a 	add	r12,r4,r13
    14ec:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14f0:	7027883a 	mov	r19,r14
    14f4:	736bc83a 	sub	r21,r14,r13
    14f8:	6ba9883a 	add	r20,r13,r14
    14fc:	9b402f0e 	bge	r19,r13,15bc <sobel_x+0x124>
    1500:	637f883a 	add	ra,r12,r13
    1504:	7021883a 	mov	r16,r14
    1508:	6357c83a 	sub	r11,r12,r13
    150c:	ab0b883a 	add	r5,r21,r12
    1510:	62800084 	addi	r10,r12,2
    1514:	f813883a 	mov	r9,ra
    1518:	a311883a 	add	r8,r20,r12
    151c:	780f883a 	mov	r7,r15
    1520:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1524:	29000003 	ldbu	r4,0(r5)
    1528:	40c00003 	ldbu	r3,0(r8)
    152c:	37000003 	ldbu	fp,0(r6)
    1530:	50800003 	ldbu	r2,0(r10)
    1534:	20c7883a 	add	r3,r4,r3
    1538:	5dc00003 	ldbu	r23,0(r11)
    153c:	1f07c83a 	sub	r3,r3,fp
    1540:	4d800003 	ldbu	r22,0(r9)
    1544:	1f09c83a 	sub	r4,r3,fp
    1548:	1087883a 	add	r3,r2,r2
    154c:	20c7883a 	add	r3,r4,r3
    1550:	1dc5c83a 	sub	r2,r3,r23
    1554:	1585c83a 	sub	r2,r2,r22
    1558:	3880000d 	sth	r2,0(r7)
    155c:	29400044 	addi	r5,r5,1
    1560:	5ac00044 	addi	r11,r11,1
    1564:	31800044 	addi	r6,r6,1
    1568:	52800044 	addi	r10,r10,1
    156c:	4a400044 	addi	r9,r9,1
    1570:	42000044 	addi	r8,r8,1
    1574:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1578:	617fea1e 	bne	r12,r5,1524 <__alt_data_end+0xff001524>
    157c:	73800044 	addi	r14,r14,1
    1580:	f819883a 	mov	r12,ra
    1584:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1588:	847fdc16 	blt	r16,r17,14fc <__alt_data_end+0xff0014fc>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    158c:	dfc00917 	ldw	ra,36(sp)
    1590:	df000817 	ldw	fp,32(sp)
    1594:	ddc00717 	ldw	r23,28(sp)
    1598:	dd800617 	ldw	r22,24(sp)
    159c:	dd400517 	ldw	r21,20(sp)
    15a0:	dd000417 	ldw	r20,16(sp)
    15a4:	dcc00317 	ldw	r19,12(sp)
    15a8:	dc800217 	ldw	r18,8(sp)
    15ac:	dc400117 	ldw	r17,4(sp)
    15b0:	dc000017 	ldw	r16,0(sp)
    15b4:	dec00a04 	addi	sp,sp,40
    15b8:	f800283a 	ret
    15bc:	7021883a 	mov	r16,r14
    15c0:	637f883a 	add	ra,r12,r13
    15c4:	73800044 	addi	r14,r14,1
    15c8:	f819883a 	mov	r12,ra
    15cc:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15d0:	847fca16 	blt	r16,r17,14fc <__alt_data_end+0xff0014fc>
    15d4:	003fed06 	br	158c <__alt_data_end+0xff00158c>

000015d8 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15d8:	defff504 	addi	sp,sp,-44
    15dc:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15e0:	d5a71917 	ldw	r22,-25500(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15e4:	dfc00a15 	stw	ra,40(sp)
    15e8:	df000915 	stw	fp,36(sp)
    15ec:	ddc00815 	stw	r23,32(sp)
    15f0:	dd400615 	stw	r21,24(sp)
    15f4:	dd000515 	stw	r20,20(sp)
    15f8:	dcc00415 	stw	r19,16(sp)
    15fc:	dc800315 	stw	r18,12(sp)
    1600:	dc400215 	stw	r17,8(sp)
    1604:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1608:	b5bfffc4 	addi	r22,r22,-1
    160c:	00800044 	movi	r2,1
    1610:	1580440e 	bge	r2,r22,1724 <sobel_x_with_rgb+0x14c>
    1614:	d7e71717 	ldw	ra,-25508(gp)
    1618:	d4a71a17 	ldw	r18,-25496(gp)
    161c:	d4671c17 	ldw	r17,-25488(gp)
    1620:	ffe9883a 	add	r20,ra,ra
    1624:	a0800084 	addi	r2,r20,2
    1628:	04000084 	movi	r16,2
    162c:	90a5883a 	add	r18,r18,r2
    1630:	88a3883a 	add	r17,r17,r2
    1634:	fc05883a 	add	r2,ra,r16
    1638:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    163c:	802f883a 	mov	r23,r16
    1640:	87f9c83a 	sub	fp,r16,ra
    1644:	d8800015 	stw	r2,0(sp)
    1648:	bfc02f0e 	bge	r23,ra,1708 <sobel_x_with_rgb+0x130>
    164c:	d8800017 	ldw	r2,0(sp)
    1650:	7fe7883a 	add	r19,r15,ra
    1654:	802b883a 	mov	r21,r16
    1658:	7fdbc83a 	sub	r13,r15,ra
    165c:	e3cf883a 	add	r7,fp,r15
    1660:	7b000084 	addi	r12,r15,2
    1664:	9817883a 	mov	r11,r19
    1668:	13d5883a 	add	r10,r2,r15
    166c:	881d883a 	mov	r14,r17
    1670:	9013883a 	mov	r9,r18
    1674:	7811883a 	mov	r8,r15
    1678:	00000b06 	br	16a8 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    167c:	180692fa 	slli	r3,r3,11
    1680:	70c0000d 	sth	r3,0(r14)
    1684:	39c00044 	addi	r7,r7,1
    1688:	6b400044 	addi	r13,r13,1
    168c:	42000044 	addi	r8,r8,1
    1690:	63000044 	addi	r12,r12,1
    1694:	5ac00044 	addi	r11,r11,1
    1698:	52800044 	addi	r10,r10,1
    169c:	4a400084 	addi	r9,r9,2
    16a0:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16a4:	79c01a26 	beq	r15,r7,1710 <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    16a8:	50800003 	ldbu	r2,0(r10)
    16ac:	39400003 	ldbu	r5,0(r7)
    16b0:	41800003 	ldbu	r6,0(r8)
    16b4:	60c00003 	ldbu	r3,0(r12)
    16b8:	288b883a 	add	r5,r5,r2
    16bc:	298bc83a 	sub	r5,r5,r6
    16c0:	68800003 	ldbu	r2,0(r13)
    16c4:	59000003 	ldbu	r4,0(r11)
    16c8:	298bc83a 	sub	r5,r5,r6
    16cc:	18c7883a 	add	r3,r3,r3
    16d0:	28c7883a 	add	r3,r5,r3
    16d4:	1887c83a 	sub	r3,r3,r2
    16d8:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16dc:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16e0:	10bfffcc 	andi	r2,r2,65535
    16e4:	10a0001c 	xori	r2,r2,32768
    16e8:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16ec:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16f0:	103fe20e 	bge	r2,zero,167c <__alt_data_end+0xff00167c>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16f4:	0085c83a 	sub	r2,zero,r2
    16f8:	1005d0ba 	srai	r2,r2,2
    16fc:	1004917a 	slli	r2,r2,5
    1700:	7080000d 	sth	r2,0(r14)
    1704:	003fdf06 	br	1684 <__alt_data_end+0xff001684>
    1708:	802b883a 	mov	r21,r16
    170c:	7fe7883a 	add	r19,r15,ra
    1710:	84000044 	addi	r16,r16,1
    1714:	981f883a 	mov	r15,r19
    1718:	9525883a 	add	r18,r18,r20
    171c:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1720:	adbfc916 	blt	r21,r22,1648 <__alt_data_end+0xff001648>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1724:	dfc00a17 	ldw	ra,40(sp)
    1728:	df000917 	ldw	fp,36(sp)
    172c:	ddc00817 	ldw	r23,32(sp)
    1730:	dd800717 	ldw	r22,28(sp)
    1734:	dd400617 	ldw	r21,24(sp)
    1738:	dd000517 	ldw	r20,20(sp)
    173c:	dcc00417 	ldw	r19,16(sp)
    1740:	dc800317 	ldw	r18,12(sp)
    1744:	dc400217 	ldw	r17,8(sp)
    1748:	dc000117 	ldw	r16,4(sp)
    174c:	dec00b04 	addi	sp,sp,44
    1750:	f800283a 	ret

00001754 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1754:	defff704 	addi	sp,sp,-36
    1758:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    175c:	d4671917 	ldw	r17,-25500(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1760:	dfc00815 	stw	ra,32(sp)
    1764:	ddc00715 	stw	r23,28(sp)
    1768:	dd800615 	stw	r22,24(sp)
    176c:	dd400515 	stw	r21,20(sp)
    1770:	dd000415 	stw	r20,16(sp)
    1774:	dcc00315 	stw	r19,12(sp)
    1778:	dc800215 	stw	r18,8(sp)
    177c:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1780:	8c7fffc4 	addi	r17,r17,-1
    1784:	00800044 	movi	r2,1
    1788:	14402d0e 	bge	r2,r17,1840 <sobel_y+0xec>
    178c:	d3e71717 	ldw	r15,-25508(gp)
    1790:	d3a71b17 	ldw	r14,-25492(gp)
    1794:	03400084 	movi	r13,2
    1798:	7bff883a 	add	ra,r15,r15
    179c:	fb67883a 	add	r19,ra,r13
    17a0:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17a4:	6825883a 	mov	r18,r13
    17a8:	f8a9883a 	add	r20,ra,r2
    17ac:	6821883a 	mov	r16,r13
    17b0:	93c01f0e 	bge	r18,r15,1830 <sobel_y+0xdc>
    17b4:	27cd883a 	add	r6,r4,ra
    17b8:	6821883a 	mov	r16,r13
    17bc:	22c00044 	addi	r11,r4,1
    17c0:	22800084 	addi	r10,r4,2
    17c4:	a113883a 	add	r9,r20,r4
    17c8:	990b883a 	add	r5,r19,r4
    17cc:	7999883a 	add	r12,r15,r6
    17d0:	7011883a 	mov	r8,r14
    17d4:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17d8:	3d800003 	ldbu	r22,0(r7)
    17dc:	50c00003 	ldbu	r3,0(r10)
    17e0:	58800003 	ldbu	r2,0(r11)
    17e4:	4d400003 	ldbu	r21,0(r9)
    17e8:	b0c7883a 	add	r3,r22,r3
    17ec:	1085883a 	add	r2,r2,r2
    17f0:	35c00003 	ldbu	r23,0(r6)
    17f4:	1887883a 	add	r3,r3,r2
    17f8:	2d800003 	ldbu	r22,0(r5)
    17fc:	1d47c83a 	sub	r3,r3,r21
    1800:	1d47c83a 	sub	r3,r3,r21
    1804:	1dc5c83a 	sub	r2,r3,r23
    1808:	1585c83a 	sub	r2,r2,r22
    180c:	4080000d 	sth	r2,0(r8)
    1810:	29400044 	addi	r5,r5,1
    1814:	39c00044 	addi	r7,r7,1
    1818:	5ac00044 	addi	r11,r11,1
    181c:	52800044 	addi	r10,r10,1
    1820:	4a400044 	addi	r9,r9,1
    1824:	31800044 	addi	r6,r6,1
    1828:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    182c:	617fea1e 	bne	r12,r5,17d8 <__alt_data_end+0xff0017d8>
    1830:	6b400044 	addi	r13,r13,1
    1834:	23c9883a 	add	r4,r4,r15
    1838:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    183c:	847fdb16 	blt	r16,r17,17ac <__alt_data_end+0xff0017ac>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1840:	dfc00817 	ldw	ra,32(sp)
    1844:	ddc00717 	ldw	r23,28(sp)
    1848:	dd800617 	ldw	r22,24(sp)
    184c:	dd400517 	ldw	r21,20(sp)
    1850:	dd000417 	ldw	r20,16(sp)
    1854:	dcc00317 	ldw	r19,12(sp)
    1858:	dc800217 	ldw	r18,8(sp)
    185c:	dc400117 	ldw	r17,4(sp)
    1860:	dc000017 	ldw	r16,0(sp)
    1864:	dec00904 	addi	sp,sp,36
    1868:	f800283a 	ret

0000186c <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    186c:	defff604 	addi	sp,sp,-40
    1870:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1874:	d4e71917 	ldw	r19,-25500(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1878:	dfc00915 	stw	ra,36(sp)
    187c:	df000815 	stw	fp,32(sp)
    1880:	ddc00715 	stw	r23,28(sp)
    1884:	dd800615 	stw	r22,24(sp)
    1888:	dd400515 	stw	r21,20(sp)
    188c:	dd000415 	stw	r20,16(sp)
    1890:	dc800215 	stw	r18,8(sp)
    1894:	dc400115 	stw	r17,4(sp)
    1898:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    189c:	9cffffc4 	addi	r19,r19,-1
    18a0:	00800044 	movi	r2,1
    18a4:	14c03f0e 	bge	r2,r19,19a4 <sobel_y_with_rgb+0x138>
    18a8:	d4671717 	ldw	r17,-25508(gp)
    18ac:	d4271b17 	ldw	r16,-25492(gp)
    18b0:	d7e71c17 	ldw	ra,-25488(gp)
    18b4:	8c5d883a 	add	r14,r17,r17
    18b8:	75000084 	addi	r20,r14,2
    18bc:	03c00084 	movi	r15,2
    18c0:	8521883a 	add	r16,r16,r20
    18c4:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18c8:	782b883a 	mov	r21,r15
    18cc:	70ad883a 	add	r22,r14,r2
    18d0:	7825883a 	mov	r18,r15
    18d4:	ac402e0e 	bge	r21,r17,1990 <sobel_y_with_rgb+0x124>
    18d8:	238d883a 	add	r6,r4,r14
    18dc:	7825883a 	mov	r18,r15
    18e0:	22c00044 	addi	r11,r4,1
    18e4:	22800084 	addi	r10,r4,2
    18e8:	b113883a 	add	r9,r22,r4
    18ec:	a10b883a 	add	r5,r20,r4
    18f0:	899b883a 	add	r13,r17,r6
    18f4:	f819883a 	mov	r12,ra
    18f8:	8011883a 	mov	r8,r16
    18fc:	200f883a 	mov	r7,r4
    1900:	00000b06 	br	1930 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1904:	180692fa 	slli	r3,r3,11
    1908:	60c0000d 	sth	r3,0(r12)
    190c:	29400044 	addi	r5,r5,1
    1910:	39c00044 	addi	r7,r7,1
    1914:	5ac00044 	addi	r11,r11,1
    1918:	52800044 	addi	r10,r10,1
    191c:	4a400044 	addi	r9,r9,1
    1920:	31800044 	addi	r6,r6,1
    1924:	42000084 	addi	r8,r8,2
    1928:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    192c:	69401826 	beq	r13,r5,1990 <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1930:	50800003 	ldbu	r2,0(r10)
    1934:	3f000003 	ldbu	fp,0(r7)
    1938:	58c00003 	ldbu	r3,0(r11)
    193c:	4dc00003 	ldbu	r23,0(r9)
    1940:	e0b9883a 	add	fp,fp,r2
    1944:	18c7883a 	add	r3,r3,r3
    1948:	30800003 	ldbu	r2,0(r6)
    194c:	e0c7883a 	add	r3,fp,r3
    1950:	1dc7c83a 	sub	r3,r3,r23
    1954:	2f000003 	ldbu	fp,0(r5)
    1958:	1dc7c83a 	sub	r3,r3,r23
    195c:	1885c83a 	sub	r2,r3,r2
    1960:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1964:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1968:	10bfffcc 	andi	r2,r2,65535
    196c:	10a0001c 	xori	r2,r2,32768
    1970:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1974:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1978:	103fe20e 	bge	r2,zero,1904 <__alt_data_end+0xff001904>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    197c:	0085c83a 	sub	r2,zero,r2
    1980:	1005d0ba 	srai	r2,r2,2
    1984:	1004917a 	slli	r2,r2,5
    1988:	6080000d 	sth	r2,0(r12)
    198c:	003fdf06 	br	190c <__alt_data_end+0xff00190c>
    1990:	7bc00044 	addi	r15,r15,1
    1994:	2449883a 	add	r4,r4,r17
    1998:	83a1883a 	add	r16,r16,r14
    199c:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19a0:	94ffcb16 	blt	r18,r19,18d0 <__alt_data_end+0xff0018d0>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    19a4:	dfc00917 	ldw	ra,36(sp)
    19a8:	df000817 	ldw	fp,32(sp)
    19ac:	ddc00717 	ldw	r23,28(sp)
    19b0:	dd800617 	ldw	r22,24(sp)
    19b4:	dd400517 	ldw	r21,20(sp)
    19b8:	dd000417 	ldw	r20,16(sp)
    19bc:	dcc00317 	ldw	r19,12(sp)
    19c0:	dc800217 	ldw	r18,8(sp)
    19c4:	dc400117 	ldw	r17,4(sp)
    19c8:	dc000017 	ldw	r16,0(sp)
    19cc:	dec00a04 	addi	sp,sp,40
    19d0:	f800283a 	ret

000019d4 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    19d4:	d0a71917 	ldw	r2,-25500(gp)
    19d8:	02400084 	movi	r9,2
    19dc:	4880290e 	bge	r9,r2,1a84 <sobel_threshold+0xb0>
    19e0:	223fffcc 	andi	r8,r4,65535
    19e4:	d0e71717 	ldw	r3,-25508(gp)
    19e8:	4220001c 	xori	r8,r8,32768
    19ec:	01c00044 	movi	r7,1
    19f0:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19f4:	48c0200e 	bge	r9,r3,1a78 <sobel_threshold+0xa4>
    19f8:	01400044 	movi	r5,1
    19fc:	00000c06 	br	1a30 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a00:	2080000f 	ldh	r2,0(r4)
    1a04:	10001916 	blt	r2,zero,1a6c <sobel_threshold+0x98>
    1a08:	3085883a 	add	r2,r6,r2
    1a0c:	10bfffcc 	andi	r2,r2,65535
    1a10:	10a0001c 	xori	r2,r2,32768
    1a14:	10a00004 	addi	r2,r2,-32768
    1a18:	4084803a 	cmplt	r2,r8,r2
    1a1c:	0085c83a 	sub	r2,zero,r2
    1a20:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a24:	d0e71717 	ldw	r3,-25508(gp)
    1a28:	18bfffc4 	addi	r2,r3,-1
    1a2c:	2880110e 	bge	r5,r2,1a74 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a30:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a34:	d1a71b17 	ldw	r6,-25492(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a38:	d1271a17 	ldw	r4,-25496(gp)
    1a3c:	1947883a 	add	r3,r3,r5
    1a40:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a44:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a48:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a4c:	3180000f 	ldh	r6,0(r6)
    1a50:	d0a71817 	ldw	r2,-25504(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a54:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a58:	10c7883a 	add	r3,r2,r3
    1a5c:	303fe80e 	bge	r6,zero,1a00 <__alt_data_end+0xff001a00>
    1a60:	2080000f 	ldh	r2,0(r4)
    1a64:	018dc83a 	sub	r6,zero,r6
    1a68:	103fe70e 	bge	r2,zero,1a08 <__alt_data_end+0xff001a08>
    1a6c:	0085c83a 	sub	r2,zero,r2
    1a70:	003fe506 	br	1a08 <__alt_data_end+0xff001a08>
    1a74:	d0a71917 	ldw	r2,-25500(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a78:	39c00044 	addi	r7,r7,1
    1a7c:	113fffc4 	addi	r4,r2,-1
    1a80:	393fdc16 	blt	r7,r4,19f4 <__alt_data_end+0xff0019f4>
    1a84:	f800283a 	ret

00001a88 <sobel_complete>:
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1a88:	defff804 	addi	sp,sp,-32
    1a8c:	d2671917 	ldw	r9,-25500(gp)
    1a90:	dc800215 	stw	r18,8(sp)
    1a94:	2cbfffcc 	andi	r18,r5,65535
    1a98:	94a0001c 	xori	r18,r18,32768
    1a9c:	dc400115 	stw	r17,4(sp)
    1aa0:	dc000015 	stw	r16,0(sp)
    1aa4:	dfc00715 	stw	ra,28(sp)
    1aa8:	dd800615 	stw	r22,24(sp)
    1aac:	dd400515 	stw	r21,20(sp)
    1ab0:	dd000415 	stw	r20,16(sp)
    1ab4:	dcc00315 	stw	r19,12(sp)
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ab8:	04000044 	movi	r16,1
    1abc:	4a7fffc4 	addi	r9,r9,-1

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ac0:	04400084 	movi	r17,2
    1ac4:	94a00004 	addi	r18,r18,-32768
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ac8:	82403f0e 	bge	r16,r9,1bc8 <sobel_complete+0x140>
			y0 = (y-1)*sobel_width;
    1acc:	d2271717 	ldw	r8,-25508(gp)
    1ad0:	82ffffc4 	addi	r11,r16,-1
		    y1 = y*sobel_width;
    1ad4:	820b383a 	mul	r5,r16,r8
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
    1ad8:	5a17383a 	mul	r11,r11,r8
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
    1adc:	84000044 	addi	r16,r16,1
		    
			p2 = source[y0];
			p5 = source[y1];
			p8 = source[y2];
    1ae0:	4159883a 	add	r12,r8,r5
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
    1ae4:	22cd883a 	add	r6,r4,r11
			p5 = source[y1];
    1ae8:	2155883a 	add	r10,r4,r5
			p8 = source[y2];
    1aec:	230f883a 	add	r7,r4,r12
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
    1af0:	30800003 	ldbu	r2,0(r6)
			p5 = source[y1];
			p8 = source[y2];
    1af4:	38c00003 	ldbu	r3,0(r7)
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
			p5 = source[y1];
    1af8:	55000003 	ldbu	r20,0(r10)
			p8 = source[y2];

			p3 = source[y0+1];
    1afc:	31800043 	ldbu	r6,1(r6)
			p6 = source[y1+1];
    1b00:	57c00043 	ldbu	ra,1(r10)
			p9 = source[y2+1];
    1b04:	39c00043 	ldbu	r7,1(r7)

			for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b08:	8a3fef0e 	bge	r17,r8,1ac8 <__alt_data_end+0xff001ac8>
    1b0c:	5ac00084 	addi	r11,r11,2
    1b10:	2b400084 	addi	r13,r5,2
    1b14:	63000084 	addi	r12,r12,2
    1b18:	22d7883a 	add	r11,r4,r11
    1b1c:	235b883a 	add	r13,r4,r13
    1b20:	2319883a 	add	r12,r4,r12
    1b24:	02000044 	movi	r8,1
    1b28:	00000106 	br	1b30 <sobel_complete+0xa8>
				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
    1b2c:	503f883a 	mov	ra,r10

				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
    1b30:	5bc00003 	ldbu	r15,0(r11)
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
    1b34:	63800003 	ldbu	r14,0(r12)
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b38:	d5a71817 	ldw	r22,-25504(gp)
				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
				
				a = p1 - p9;
				b = p3 - p7;
    1b3c:	78c7c83a 	sub	r3,r15,r3

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
				
				a = p1 - p9;
    1b40:	1385c83a 	sub	r2,r2,r14
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b44:	10eb883a 	add	r21,r2,r3
    1b48:	31a7883a 	add	r19,r6,r6
				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
    1b4c:	6a800003 	ldbu	r10,0(r13)
				p9 = source[y2+x+1];
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b50:	4153883a 	add	r9,r8,r5
    1b54:	ace7883a 	add	r19,r21,r19
    1b58:	39eb883a 	add	r21,r7,r7
    1b5c:	b253883a 	add	r9,r22,r9
    1b60:	9d67c83a 	sub	r19,r19,r21
    1b64:	9827c072 	custom	1,r19,r19,zero
    1b68:	1887c83a 	sub	r3,r3,r2
    1b6c:	a505883a 	add	r2,r20,r20
    1b70:	1885c83a 	sub	r2,r3,r2
    1b74:	5287883a 	add	r3,r10,r10
    1b78:	10c5883a 	add	r2,r2,r3
    1b7c:	1005c072 	custom	1,r2,r2,zero
    1b80:	9885883a 	add	r2,r19,r2
    1b84:	1485c0b2 	custom	2,r2,r2,r18
    1b88:	48800025 	stbio	r2,0(r9)

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b8c:	d2671717 	ldw	r9,-25508(gp)
    1b90:	42000044 	addi	r8,r8,1
    1b94:	3005883a 	mov	r2,r6
    1b98:	4a7fffc4 	addi	r9,r9,-1
    1b9c:	3807883a 	mov	r3,r7
    1ba0:	f829883a 	mov	r20,ra
    1ba4:	5ac00044 	addi	r11,r11,1
    1ba8:	6b400044 	addi	r13,r13,1
    1bac:	63000044 	addi	r12,r12,1

				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
    1bb0:	780d883a 	mov	r6,r15
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
    1bb4:	700f883a 	mov	r7,r14

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bb8:	427fdc16 	blt	r8,r9,1b2c <__alt_data_end+0xff001b2c>
    1bbc:	d2671917 	ldw	r9,-25500(gp)
    1bc0:	4a7fffc4 	addi	r9,r9,-1
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1bc4:	827fc116 	blt	r16,r9,1acc <__alt_data_end+0xff001acc>
						ALT_CI_ABSOLUTE_0(a + b + 2 * p2 - 2 * p8) +
						ALT_CI_ABSOLUTE_0(b - a - 2 * p4 + 2 * p6)
						,threshold));
			}
		}
}
    1bc8:	dfc00717 	ldw	ra,28(sp)
    1bcc:	dd800617 	ldw	r22,24(sp)
    1bd0:	dd400517 	ldw	r21,20(sp)
    1bd4:	dd000417 	ldw	r20,16(sp)
    1bd8:	dcc00317 	ldw	r19,12(sp)
    1bdc:	dc800217 	ldw	r18,8(sp)
    1be0:	dc400117 	ldw	r17,4(sp)
    1be4:	dc000017 	ldw	r16,0(sp)
    1be8:	dec00804 	addi	sp,sp,32
    1bec:	f800283a 	ret

00001bf0 <sobel_complete_parted>:

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
	int x,y;
	int a,b;
	int yn, yp, ym;
	for (y = offset ; y < (offset+len) ; y++) {
    1bf0:	31cf883a 	add	r7,r6,r7
    1bf4:	31c0400e 	bge	r6,r7,1cf8 <sobel_complete_parted+0x108>
    1bf8:	2b7fffcc 	andi	r13,r5,65535
    1bfc:	d0a71717 	ldw	r2,-25508(gp)
						,threshold));
			}
		}
}

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
    1c00:	defffc04 	addi	sp,sp,-16
    1c04:	6b60001c 	xori	r13,r13,32768
    1c08:	dfc00315 	stw	ra,12(sp)
    1c0c:	dc800215 	stw	r18,8(sp)
    1c10:	dc400115 	stw	r17,4(sp)
    1c14:	dc000015 	stw	r16,0(sp)
    1c18:	32800044 	addi	r10,r6,1
	int x,y;
	int a,b;
	int yn, yp, ym;
	for (y = offset ; y < (offset+len) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c1c:	03c00084 	movi	r15,2
    1c20:	6b600004 	addi	r13,r13,-32768
    1c24:	52ffffc4 	addi	r11,r10,-1
    1c28:	501d883a 	mov	r14,r10
    1c2c:	78802b0e 	bge	r15,r2,1cdc <sobel_complete_parted+0xec>
    1c30:	533fff84 	addi	r12,r10,-2
    1c34:	501d883a 	mov	r14,r10
    1c38:	02400044 	movi	r9,1
						ym = (y-1)*sobel_width;
						yn = y*sobel_width;
						yp = (y+1)*sobel_width;

						a = source[ym+x-1] - source[yp+x+1];
    1c3c:	130b383a 	mul	r5,r2,r12
    1c40:	1291383a 	mul	r8,r2,r10
						b = source[ym+x+1] - source[yp+x-1];
						IOWR_8DIRECT(sobel_result,yn+x,ALT_CI_THRESHOLD_0(
    1c44:	12c5383a 	mul	r2,r2,r11
		for (x = 1 ; x < (sobel_width-1) ; x++) {
						ym = (y-1)*sobel_width;
						yn = y*sobel_width;
						yp = (y+1)*sobel_width;

						a = source[ym+x-1] - source[yp+x+1];
    1c48:	2a4b883a 	add	r5,r5,r9
    1c4c:	4251883a 	add	r8,r8,r9
    1c50:	2211883a 	add	r8,r4,r8
    1c54:	214b883a 	add	r5,r4,r5
    1c58:	40c00043 	ldbu	r3,1(r8)
    1c5c:	2c3fffc3 	ldbu	r16,-1(r5)
						b = source[ym+x+1] - source[yp+x-1];
    1c60:	2c800043 	ldbu	r18,1(r5)
    1c64:	447fffc3 	ldbu	r17,-1(r8)
						IOWR_8DIRECT(sobel_result,yn+x,ALT_CI_THRESHOLD_0(
    1c68:	29400003 	ldbu	r5,0(r5)
		for (x = 1 ; x < (sobel_width-1) ; x++) {
						ym = (y-1)*sobel_width;
						yn = y*sobel_width;
						yp = (y+1)*sobel_width;

						a = source[ym+x-1] - source[yp+x+1];
    1c6c:	80e1c83a 	sub	r16,r16,r3
						b = source[ym+x+1] - source[yp+x-1];
    1c70:	9447c83a 	sub	r3,r18,r17
						IOWR_8DIRECT(sobel_result,yn+x,ALT_CI_THRESHOLD_0(
    1c74:	47c00003 	ldbu	ra,0(r8)
    1c78:	294b883a 	add	r5,r5,r5
    1c7c:	80d1883a 	add	r8,r16,r3
    1c80:	2a0d883a 	add	r6,r5,r8
    1c84:	d2271817 	ldw	r8,-25504(gp)
    1c88:	1245883a 	add	r2,r2,r9
    1c8c:	ffcb883a 	add	r5,ra,ra
    1c90:	4091883a 	add	r8,r8,r2
    1c94:	314bc83a 	sub	r5,r6,r5
    1c98:	280bc072 	custom	1,r5,r5,zero
    1c9c:	2085883a 	add	r2,r4,r2
    1ca0:	17ffffc3 	ldbu	ra,-1(r2)
    1ca4:	10800043 	ldbu	r2,1(r2)
    1ca8:	1c07c83a 	sub	r3,r3,r16
    1cac:	ffff883a 	add	ra,ra,ra
    1cb0:	1fcdc83a 	sub	r6,r3,ra
    1cb4:	1087883a 	add	r3,r2,r2
    1cb8:	30c5883a 	add	r2,r6,r3
    1cbc:	1005c072 	custom	1,r2,r2,zero
    1cc0:	2885883a 	add	r2,r5,r2
    1cc4:	1345c0b2 	custom	2,r2,r2,r13
    1cc8:	40800025 	stbio	r2,0(r8)
void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
	int x,y;
	int a,b;
	int yn, yp, ym;
	for (y = offset ; y < (offset+len) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ccc:	d0a71717 	ldw	r2,-25508(gp)
    1cd0:	4a400044 	addi	r9,r9,1
    1cd4:	10ffffc4 	addi	r3,r2,-1
    1cd8:	48ffd816 	blt	r9,r3,1c3c <__alt_data_end+0xff001c3c>
    1cdc:	52800044 	addi	r10,r10,1

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
	int x,y;
	int a,b;
	int yn, yp, ym;
	for (y = offset ; y < (offset+len) ; y++) {
    1ce0:	71ffd016 	blt	r14,r7,1c24 <__alt_data_end+0xff001c24>
								ALT_CI_ABSOLUTE_0(a + b + 2 * source[ym+x] - 2 * source[yp+x]) +
								ALT_CI_ABSOLUTE_0(b - a - 2 * source[yn+x-1] + 2 * source[yn+x+1])
								,threshold));
					}
	}
}
    1ce4:	dfc00317 	ldw	ra,12(sp)
    1ce8:	dc800217 	ldw	r18,8(sp)
    1cec:	dc400117 	ldw	r17,4(sp)
    1cf0:	dc000017 	ldw	r16,0(sp)
    1cf4:	dec00404 	addi	sp,sp,16
    1cf8:	f800283a 	ret

00001cfc <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1cfc:	d0a71c17 	ldw	r2,-25488(gp)
    1d00:	f800283a 	ret

00001d04 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d04:	d0a71817 	ldw	r2,-25504(gp)
    1d08:	f800283a 	ret

00001d0c <sobel_all_init>:
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d0c:	defffe04 	addi	sp,sp,-8
    1d10:	dc000015 	stw	r16,0(sp)
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
    1d14:	2161383a 	mul	r16,r4,r5
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d18:	2007883a 	mov	r3,r4
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d1c:	01000074 	movhi	r4,1
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d20:	2805883a 	mov	r2,r5
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d24:	21081604 	addi	r4,r4,8280
    1d28:	280d883a 	mov	r6,r5
    1d2c:	800f883a 	mov	r7,r16
    1d30:	180b883a 	mov	r5,r3
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d34:	dfc00115 	stw	ra,4(sp)
	int loop = 0;
	array_width = width;
    1d38:	d0e72315 	stw	r3,-25460(gp)
	array_height = height;
    1d3c:	d0a72215 	stw	r2,-25464(gp)
	size = width*height;
    1d40:	d4272115 	stw	r16,-25468(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d44:	00039800 	call	3980 <printf>
	if (grayscale_array != NULL)
    1d48:	d1270d17 	ldw	r4,-25548(gp)
    1d4c:	20000126 	beq	r4,zero,1d54 <sobel_all_init+0x48>
		free(grayscale_array);
    1d50:	00031300 	call	3130 <free>
	grayscale_array = (unsigned char *) malloc(width* height);
    1d54:	8009883a 	mov	r4,r16
    1d58:	000311c0 	call	311c <malloc>
	if (sobel_result != NULL)
    1d5c:	d1271817 	ldw	r4,-25504(gp)
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
    1d60:	d0a70d15 	stw	r2,-25548(gp)
	if (sobel_result != NULL)
    1d64:	20000126 	beq	r4,zero,1d6c <sobel_all_init+0x60>
		free(sobel_result);
    1d68:	00031300 	call	3130 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1d6c:	8009883a 	mov	r4,r16
    1d70:	000311c0 	call	311c <malloc>
    1d74:	d0a71815 	stw	r2,-25504(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1d78:	0400070e 	bge	zero,r16,1d98 <sobel_all_init+0x8c>
    1d7c:	0007883a 	mov	r3,zero
    1d80:	00000106 	br	1d88 <sobel_all_init+0x7c>
    1d84:	d0a71817 	ldw	r2,-25504(gp)
		sobel_result[loop] = 0;
    1d88:	10c5883a 	add	r2,r2,r3
    1d8c:	10000005 	stb	zero,0(r2)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1d90:	18c00044 	addi	r3,r3,1
    1d94:	80fffb1e 	bne	r16,r3,1d84 <__alt_data_end+0xff001d84>
		sobel_result[loop] = 0;
	}
}
    1d98:	dfc00117 	ldw	ra,4(sp)
    1d9c:	dc000017 	ldw	r16,0(sp)
    1da0:	dec00204 	addi	sp,sp,8
    1da4:	f800283a 	ret

00001da8 <sobel_all_complete>:

void sobel_all_complete(void *picture){
    1da8:	defffb04 	addi	sp,sp,-20
    1dac:	dc000015 	stw	r16,0(sp)
    1db0:	dfc00415 	stw	ra,16(sp)
    1db4:	dcc00315 	stw	r19,12(sp)
    1db8:	dc800215 	stw	r18,8(sp)
    1dbc:	dc400115 	stw	r17,4(sp)
    1dc0:	2021883a 	mov	r16,r4

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale_a = alt_timestamp();
    1dc4:	00105640 	call	10564 <alt_timestamp>
    1dc8:	d0a71e15 	stw	r2,-25480(gp)
	for (pos = 0 ; pos < size ; pos++) {
    1dcc:	d0a72117 	ldw	r2,-25468(gp)
    1dd0:	00800b0e 	bge	zero,r2,1e00 <sobel_all_complete+0x58>
    1dd4:	8009883a 	mov	r4,r16
    1dd8:	0005883a 	mov	r2,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1ddc:	d0e70d17 	ldw	r3,-25548(gp)
    1de0:	2140000b 	ldhu	r5,0(r4)
    1de4:	1887883a 	add	r3,r3,r2
    1de8:	280bc032 	custom	0,r5,r5,zero
    1dec:	19400005 	stb	r5,0(r3)
void sobel_all_complete(void *picture){

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale_a = alt_timestamp();
	for (pos = 0 ; pos < size ; pos++) {
    1df0:	d0e72117 	ldw	r3,-25468(gp)
    1df4:	10800044 	addi	r2,r2,1
    1df8:	21000084 	addi	r4,r4,2
    1dfc:	10fff716 	blt	r2,r3,1ddc <__alt_data_end+0xff001ddc>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,pos,ALT_CI_RGB2GRAY_0(pixels[pos]));
	}
	end_conv_grayscale_a = alt_timestamp();
    1e00:	00105640 	call	10564 <alt_timestamp>
    1e04:	d0a71d15 	stw	r2,-25484(gp)

	start_sobel_a = alt_timestamp();
    1e08:	00105640 	call	10564 <alt_timestamp>
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e0c:	d0e72217 	ldw	r3,-25464(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,pos,ALT_CI_RGB2GRAY_0(pixels[pos]));
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
    1e10:	d0a72015 	stw	r2,-25472(gp)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e14:	02400084 	movi	r9,2
    1e18:	48c0410e 	bge	r9,r3,1f20 <sobel_all_complete+0x178>
    1e1c:	d1272317 	ldw	r4,-25460(gp)
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e20:	481d883a 	mov	r14,r9
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e24:	03002004 	movi	r12,128
    1e28:	4abfffc4 	addi	r10,r9,-1
    1e2c:	481b883a 	mov	r13,r9
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e30:	7100380e 	bge	r14,r4,1f14 <sobel_all_complete+0x16c>
    1e34:	4affff84 	addi	r11,r9,-2
    1e38:	481b883a 	mov	r13,r9
    1e3c:	01400044 	movi	r5,1
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e40:	d1e70d17 	ldw	r7,-25548(gp)
    1e44:	22c7383a 	mul	r3,r4,r11
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e48:	2265383a 	mul	r18,r4,r9
    1e4c:	2bffffc4 	addi	r15,r5,-1

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e50:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e54:	1945883a 	add	r2,r3,r5
	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e58:	2a000044 	addi	r8,r5,1

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e5c:	1bcd883a 	add	r6,r3,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e60:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e64:	3ca3883a 	add	r17,r7,r18

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e68:	34000003 	ldbu	r16,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e6c:	1a07883a 	add	r3,r3,r8
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e70:	8967883a 	add	r19,r17,r5
	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e74:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e78:	8bc7883a 	add	r3,r17,r15
    1e7c:	1fc00003 	ldbu	ra,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e80:	1087883a 	add	r3,r2,r2
    1e84:	98800003 	ldbu	r2,0(r19)
    1e88:	1c07883a 	add	r3,r3,r16
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1e8c:	3a23883a 	add	r17,r7,r8
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e90:	1987883a 	add	r3,r3,r6
    1e94:	1fc7c83a 	sub	r3,r3,ra
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1e98:	8ca5883a 	add	r18,r17,r18
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e9c:	2289383a 	mul	r4,r4,r10
    1ea0:	1085883a 	add	r2,r2,r2
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1ea4:	94800003 	ldbu	r18,0(r18)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ea8:	1885c83a 	sub	r2,r3,r2
    1eac:	d0e71817 	ldw	r3,-25504(gp)
    1eb0:	214b883a 	add	r5,r4,r5
    1eb4:	1485c83a 	sub	r2,r2,r18
    1eb8:	194b883a 	add	r5,r3,r5
    1ebc:	1005c072 	custom	1,r2,r2,zero
    1ec0:	390f883a 	add	r7,r7,r4
    1ec4:	3bcf883a 	add	r7,r7,r15
    1ec8:	38c00003 	ldbu	r3,0(r7)
    1ecc:	8909883a 	add	r4,r17,r4
    1ed0:	21000003 	ldbu	r4,0(r4)
    1ed4:	340dc83a 	sub	r6,r6,r16
    1ed8:	18c7883a 	add	r3,r3,r3
    1edc:	30c7c83a 	sub	r3,r6,r3
    1ee0:	2109883a 	add	r4,r4,r4
    1ee4:	1907883a 	add	r3,r3,r4
    1ee8:	1fc7c83a 	sub	r3,r3,ra
    1eec:	1c87883a 	add	r3,r3,r18
    1ef0:	1807c072 	custom	1,r3,r3,zero
    1ef4:	10c5883a 	add	r2,r2,r3
    1ef8:	1305c0b2 	custom	2,r2,r2,r12
    1efc:	28800025 	stbio	r2,0(r5)
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1f00:	d1272317 	ldw	r4,-25460(gp)
    1f04:	400b883a 	mov	r5,r8
    1f08:	20bfffc4 	addi	r2,r4,-1
    1f0c:	40bfcc16 	blt	r8,r2,1e40 <__alt_data_end+0xff001e40>
    1f10:	d0e72217 	ldw	r3,-25464(gp)
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1f14:	18bfffc4 	addi	r2,r3,-1
    1f18:	4a400044 	addi	r9,r9,1
    1f1c:	68bfc216 	blt	r13,r2,1e28 <__alt_data_end+0xff001e28>
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
	}
	end_sobel_a = alt_timestamp();
    1f20:	00105640 	call	10564 <alt_timestamp>
    1f24:	d0a71f15 	stw	r2,-25476(gp)
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
    1f28:	d1671d17 	ldw	r5,-25484(gp)
    1f2c:	d0a71e17 	ldw	r2,-25480(gp)
    1f30:	01000074 	movhi	r4,1
    1f34:	21080004 	addi	r4,r4,8192
    1f38:	288bc83a 	sub	r5,r5,r2
    1f3c:	00039800 	call	3980 <printf>
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    1f40:	d0a72017 	ldw	r2,-25472(gp)
    1f44:	d1671f17 	ldw	r5,-25476(gp)
    1f48:	01000074 	movhi	r4,1
    1f4c:	21080504 	addi	r4,r4,8212
    1f50:	288bc83a 	sub	r5,r5,r2
}
    1f54:	dfc00417 	ldw	ra,16(sp)
    1f58:	dcc00317 	ldw	r19,12(sp)
    1f5c:	dc800217 	ldw	r18,8(sp)
    1f60:	dc400117 	ldw	r17,4(sp)
    1f64:	dc000017 	ldw	r16,0(sp)
    1f68:	dec00504 	addi	sp,sp,20
					,128));
		}
	}
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    1f6c:	00039801 	jmpi	3980 <printf>

00001f70 <partial>:
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    1f70:	d0e72317 	ldw	r3,-25460(gp)
    1f74:	29cf883a 	add	r7,r5,r7
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    1f78:	defffa04 	addi	sp,sp,-24
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    1f7c:	1945383a 	mul	r2,r3,r5
    1f80:	38cf383a 	mul	r7,r7,r3
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    1f84:	dfc00515 	stw	ra,20(sp)
    1f88:	dd000415 	stw	r20,16(sp)
    1f8c:	dcc00315 	stw	r19,12(sp)
    1f90:	dc800215 	stw	r18,8(sp)
    1f94:	dc400115 	stw	r17,4(sp)
    1f98:	dc000015 	stw	r16,0(sp)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    1f9c:	11c00a0e 	bge	r2,r7,1fc8 <partial+0x58>
    1fa0:	1087883a 	add	r3,r2,r2
    1fa4:	20cb883a 	add	r5,r4,r3
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1fa8:	d0e70d17 	ldw	r3,-25548(gp)
    1fac:	2900000b 	ldhu	r4,0(r5)
    1fb0:	1887883a 	add	r3,r3,r2
    1fb4:	2009c032 	custom	0,r4,r4,zero
    1fb8:	19000005 	stb	r4,0(r3)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    1fbc:	10800044 	addi	r2,r2,1
    1fc0:	29400084 	addi	r5,r5,2
    1fc4:	38bff81e 	bne	r7,r2,1fa8 <__alt_data_end+0xff001fa8>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    1fc8:	db800617 	ldw	r14,24(sp)
    1fcc:	30800044 	addi	r2,r6,1
    1fd0:	339d883a 	add	r14,r6,r14
    1fd4:	73bfffc4 	addi	r14,r14,-1
    1fd8:	1380400e 	bge	r2,r14,20dc <partial+0x16c>
    1fdc:	d1272317 	ldw	r4,-25460(gp)
    1fe0:	32400084 	addi	r9,r6,2
		for (x = 1 ; x < (array_width-1) ; x++) {
    1fe4:	03c00084 	movi	r15,2
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1fe8:	03002004 	movi	r12,128
    1fec:	4abfffc4 	addi	r10,r9,-1
    1ff0:	481b883a 	mov	r13,r9
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1ff4:	7900370e 	bge	r15,r4,20d4 <partial+0x164>
    1ff8:	4affff84 	addi	r11,r9,-2
    1ffc:	481b883a 	mov	r13,r9
    2000:	01400044 	movi	r5,1
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2004:	d1e70d17 	ldw	r7,-25548(gp)
    2008:	22c7383a 	mul	r3,r4,r11
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    200c:	2267383a 	mul	r19,r4,r9
    2010:	2fffffc4 	addi	ra,r5,-1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2014:	38c7883a 	add	r3,r7,r3
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2018:	1945883a 	add	r2,r3,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    201c:	2a000044 	addi	r8,r5,1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2020:	1fcd883a 	add	r6,r3,ra
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2024:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2028:	3ce1883a 	add	r16,r7,r19


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    202c:	34400003 	ldbu	r17,0(r6)
					b = grayscale_array[(y-1)*array_width+(x+1)];
    2030:	1a07883a 	add	r3,r3,r8
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2034:	8169883a 	add	r20,r16,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    2038:	19800003 	ldbu	r6,0(r3)
					c = grayscale_array[(y+1)*array_width+(x-1)];
    203c:	87c7883a 	add	r3,r16,ra
    2040:	1c000003 	ldbu	r16,0(r3)
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2044:	1087883a 	add	r3,r2,r2
    2048:	a0800003 	ldbu	r2,0(r20)
    204c:	1c47883a 	add	r3,r3,r17
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    2050:	3a25883a 	add	r18,r7,r8
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2054:	1987883a 	add	r3,r3,r6
    2058:	1c07c83a 	sub	r3,r3,r16
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    205c:	94e7883a 	add	r19,r18,r19
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2060:	2289383a 	mul	r4,r4,r10
    2064:	1085883a 	add	r2,r2,r2
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    2068:	9cc00003 	ldbu	r19,0(r19)
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    206c:	1885c83a 	sub	r2,r3,r2
    2070:	d0e71817 	ldw	r3,-25504(gp)
    2074:	214b883a 	add	r5,r4,r5
    2078:	14c5c83a 	sub	r2,r2,r19
    207c:	194b883a 	add	r5,r3,r5
    2080:	1005c072 	custom	1,r2,r2,zero
    2084:	390f883a 	add	r7,r7,r4
    2088:	3fcf883a 	add	r7,r7,ra
    208c:	38c00003 	ldbu	r3,0(r7)
    2090:	9109883a 	add	r4,r18,r4
    2094:	21000003 	ldbu	r4,0(r4)
    2098:	344dc83a 	sub	r6,r6,r17
    209c:	18c7883a 	add	r3,r3,r3
    20a0:	30c7c83a 	sub	r3,r6,r3
    20a4:	2109883a 	add	r4,r4,r4
    20a8:	1907883a 	add	r3,r3,r4
    20ac:	1c07c83a 	sub	r3,r3,r16
    20b0:	1cc7883a 	add	r3,r3,r19
    20b4:	1807c072 	custom	1,r3,r3,zero
    20b8:	10c5883a 	add	r2,r2,r3
    20bc:	1305c0b2 	custom	2,r2,r2,r12
    20c0:	28800025 	stbio	r2,0(r5)
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    20c4:	d1272317 	ldw	r4,-25460(gp)
    20c8:	400b883a 	mov	r5,r8
    20cc:	20bfffc4 	addi	r2,r4,-1
    20d0:	40bfcc16 	blt	r8,r2,2004 <__alt_data_end+0xff002004>
    20d4:	4a400044 	addi	r9,r9,1
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    20d8:	6bbfc416 	blt	r13,r14,1fec <__alt_data_end+0xff001fec>
							ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
								2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
							,128));
		}
	}
}
    20dc:	dfc00517 	ldw	ra,20(sp)
    20e0:	dd000417 	ldw	r20,16(sp)
    20e4:	dcc00317 	ldw	r19,12(sp)
    20e8:	dc800217 	ldw	r18,8(sp)
    20ec:	dc400117 	ldw	r17,4(sp)
    20f0:	dc000017 	ldw	r16,0(sp)
    20f4:	dec00604 	addi	sp,sp,24
    20f8:	f800283a 	ret

000020fc <sobel_all_partial>:
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
    20fc:	d0a72217 	ldw	r2,-25464(gp)
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
    2100:	defff804 	addi	sp,sp,-32
    2104:	dcc00515 	stw	r19,20(sp)
    2108:	dfc00715 	stw	ra,28(sp)
    210c:	2027883a 	mov	r19,r4
    2110:	dd000615 	stw	r20,24(sp)
    2114:	dc800415 	stw	r18,16(sp)
    2118:	dc400315 	stw	r17,12(sp)
    211c:	dc000215 	stw	r16,8(sp)
	int i, divider = 27, sub = array_height/divider;
    2120:	10c006d4 	ori	r3,r2,27
    2124:	010003c4 	movi	r4,15
    2128:	20c03236 	bltu	r4,r3,21f4 <sobel_all_partial+0xf8>
    212c:	1004913a 	slli	r2,r2,4
    2130:	00c00074 	movhi	r3,1
    2134:	18c8e004 	addi	r3,r3,9088
    2138:	108006d4 	ori	r2,r2,27
    213c:	10c5883a 	add	r2,r2,r3
    2140:	14800003 	ldbu	r18,0(r2)
	partial(picture, 0, 0, sub, sub);
    2144:	dc800015 	stw	r18,0(sp)
    2148:	900f883a 	mov	r7,r18
    214c:	000d883a 	mov	r6,zero
    2150:	000b883a 	mov	r5,zero
    2154:	9809883a 	mov	r4,r19
    2158:	0001f700 	call	1f70 <partial>
    215c:	95000084 	addi	r20,r18,2
    2160:	9021883a 	mov	r16,r18
    2164:	04400684 	movi	r17,26
	for (i = 1; i<divider; i++){
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
    2168:	81bfff84 	addi	r6,r16,-2
    216c:	800b883a 	mov	r5,r16
    2170:	dd000015 	stw	r20,0(sp)
    2174:	900f883a 	mov	r7,r18
    2178:	9809883a 	mov	r4,r19
    217c:	8c7fffc4 	addi	r17,r17,-1
    2180:	0001f700 	call	1f70 <partial>
    2184:	84a1883a 	add	r16,r16,r18
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
	partial(picture, 0, 0, sub, sub);
	for (i = 1; i<divider; i++){
    2188:	883ff71e 	bne	r17,zero,2168 <__alt_data_end+0xff002168>
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
    218c:	d4272217 	ldw	r16,-25464(gp)
    2190:	918006e4 	muli	r6,r18,27
    2194:	00c003c4 	movi	r3,15
    2198:	808006d4 	ori	r2,r16,27
    219c:	31bfff84 	addi	r6,r6,-2
    21a0:	18801936 	bltu	r3,r2,2208 <sobel_all_partial+0x10c>
    21a4:	8004913a 	slli	r2,r16,4
    21a8:	10c006d4 	ori	r3,r2,27
    21ac:	00800074 	movhi	r2,1
    21b0:	1088e004 	addi	r2,r2,9088
    21b4:	1885883a 	add	r2,r3,r2
    21b8:	10800003 	ldbu	r2,0(r2)
    21bc:	11c006e4 	muli	r7,r2,27
    21c0:	300b883a 	mov	r5,r6
    21c4:	9809883a 	mov	r4,r19
    21c8:	81cfc83a 	sub	r7,r16,r7
    21cc:	d9c00015 	stw	r7,0(sp)
    21d0:	0001f700 	call	1f70 <partial>
}
    21d4:	dfc00717 	ldw	ra,28(sp)
    21d8:	dd000617 	ldw	r20,24(sp)
    21dc:	dcc00517 	ldw	r19,20(sp)
    21e0:	dc800417 	ldw	r18,16(sp)
    21e4:	dc400317 	ldw	r17,12(sp)
    21e8:	dc000217 	ldw	r16,8(sp)
    21ec:	dec00804 	addi	sp,sp,32
    21f0:	f800283a 	ret
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
    21f4:	014006c4 	movi	r5,27
    21f8:	1009883a 	mov	r4,r2
    21fc:	00025740 	call	2574 <__divsi3>
    2200:	1025883a 	mov	r18,r2
    2204:	003fcf06 	br	2144 <__alt_data_end+0xff002144>
	partial(picture, 0, 0, sub, sub);
	for (i = 1; i<divider; i++){
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
    2208:	014006c4 	movi	r5,27
    220c:	8009883a 	mov	r4,r16
    2210:	d9800115 	stw	r6,4(sp)
    2214:	00025740 	call	2574 <__divsi3>
    2218:	d9800117 	ldw	r6,4(sp)
    221c:	003fe706 	br	21bc <__alt_data_end+0xff0021bc>

00002220 <sobel_all_complete_fusion>:

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    2220:	d0a72317 	ldw	r2,-25460(gp)
							,128));
		}
	}
}

void sobel_all_complete_fusion(void *picture){
    2224:	defff904 	addi	sp,sp,-28
    2228:	dfc00615 	stw	ra,24(sp)
    222c:	dd400515 	stw	r21,20(sp)
    2230:	dd000415 	stw	r20,16(sp)
    2234:	dcc00315 	stw	r19,12(sp)
    2238:	dc800215 	stw	r18,8(sp)
    223c:	dc400115 	stw	r17,4(sp)
    2240:	dc000015 	stw	r16,0(sp)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    2244:	00800d0e 	bge	zero,r2,227c <sobel_all_complete_fusion+0x5c>
    2248:	200d883a 	mov	r6,r4
    224c:	0007883a 	mov	r3,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    2250:	d0a70d17 	ldw	r2,-25548(gp)
    2254:	3140000b 	ldhu	r5,0(r6)
    2258:	10c5883a 	add	r2,r2,r3
    225c:	280bc032 	custom	0,r5,r5,zero
    2260:	11400005 	stb	r5,0(r2)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    2264:	d0a72317 	ldw	r2,-25460(gp)
    2268:	18c00044 	addi	r3,r3,1
    226c:	31800084 	addi	r6,r6,2
    2270:	108b883a 	add	r5,r2,r2
    2274:	288b883a 	add	r5,r5,r2
    2278:	197ff516 	blt	r3,r5,2250 <__alt_data_end+0xff002250>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    227c:	d0e72217 	ldw	r3,-25464(gp)
    2280:	01400044 	movi	r5,1
    2284:	19bfff84 	addi	r6,r3,-2
    2288:	2980620e 	bge	r5,r6,2414 <sobel_all_complete_fusion+0x1f4>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    228c:	03200034 	movhi	r12,32768
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    2290:	02000084 	movi	r8,2
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    2294:	633fffc4 	addi	r12,r12,-1


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    2298:	4017883a 	mov	r11,r8
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    229c:	02802004 	movi	r10,128
    22a0:	42400044 	addi	r9,r8,1
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
    22a4:	4885383a 	mul	r2,r9,r2
    22a8:	d1670d17 	ldw	r5,-25548(gp)
    22ac:	43bfffc4 	addi	r14,r8,-1
    22b0:	1087883a 	add	r3,r2,r2
    22b4:	20c7883a 	add	r3,r4,r3
    22b8:	18c0000b 	ldhu	r3,0(r3)
    22bc:	2885883a 	add	r2,r5,r2
    22c0:	1807c032 	custom	0,r3,r3,zero
    22c4:	10c00005 	stb	r3,0(r2)
		for (x = 1 ; x < (array_width-1) ; x++) {
    22c8:	d0a72317 	ldw	r2,-25460(gp)
    22cc:	5880400e 	bge	r11,r2,23d0 <sobel_all_complete_fusion+0x1b0>
    22d0:	43ffff84 	addi	r15,r8,-2
    22d4:	01400044 	movi	r5,1
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
    22d8:	1245383a 	mul	r2,r2,r9
    22dc:	d1a70d17 	ldw	r6,-25548(gp)
    22e0:	1145883a 	add	r2,r2,r5
    22e4:	1087883a 	add	r3,r2,r2
    22e8:	20c7883a 	add	r3,r4,r3
    22ec:	18c0000b 	ldhu	r3,0(r3)
    22f0:	3085883a 	add	r2,r6,r2
    22f4:	1807c032 	custom	0,r3,r3,zero
    22f8:	10c00005 	stb	r3,0(r2)
			a = grayscale_array[(y-1)*array_width+(x-1)];
    22fc:	d4e72317 	ldw	r19,-25460(gp)
    2300:	d1e70d17 	ldw	r7,-25548(gp)
    2304:	2b7fffc4 	addi	r13,r5,-1
    2308:	9bc7383a 	mul	r3,r19,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    230c:	9a29383a 	mul	r20,r19,r8
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    2310:	2fc00044 	addi	ra,r5,1
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2314:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2318:	1945883a 	add	r2,r3,r5
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    231c:	1b4d883a 	add	r6,r3,r13
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2320:	10800003 	ldbu	r2,0(r2)
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    2324:	3d21883a 	add	r16,r7,r20
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2328:	34400003 	ldbu	r17,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    232c:	1fc7883a 	add	r3,r3,ra
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2330:	816b883a 	add	r21,r16,r5
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    2334:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    2338:	8347883a 	add	r3,r16,r13
    233c:	1c000003 	ldbu	r16,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2340:	1087883a 	add	r3,r2,r2
    2344:	a8800003 	ldbu	r2,0(r21)
    2348:	1c47883a 	add	r3,r3,r17
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    234c:	3fe5883a 	add	r18,r7,ra
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2350:	1987883a 	add	r3,r3,r6
    2354:	1c07c83a 	sub	r3,r3,r16
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    2358:	9529883a 	add	r20,r18,r20
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    235c:	9ba7383a 	mul	r19,r19,r14
    2360:	1085883a 	add	r2,r2,r2
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    2364:	a5000003 	ldbu	r20,0(r20)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2368:	1885c83a 	sub	r2,r3,r2
    236c:	d0e71817 	ldw	r3,-25504(gp)
    2370:	994b883a 	add	r5,r19,r5
    2374:	1505c83a 	sub	r2,r2,r20
    2378:	194b883a 	add	r5,r3,r5
    237c:	1005c072 	custom	1,r2,r2,zero
    2380:	3ccf883a 	add	r7,r7,r19
    2384:	3b4f883a 	add	r7,r7,r13
    2388:	39c00003 	ldbu	r7,0(r7)
    238c:	94e5883a 	add	r18,r18,r19
    2390:	90c00003 	ldbu	r3,0(r18)
    2394:	3463c83a 	sub	r17,r6,r17
    2398:	39cf883a 	add	r7,r7,r7
    239c:	89cdc83a 	sub	r6,r17,r7
    23a0:	18c7883a 	add	r3,r3,r3
    23a4:	30c7883a 	add	r3,r6,r3
    23a8:	1c21c83a 	sub	r16,r3,r16
    23ac:	8529883a 	add	r20,r16,r20
    23b0:	a029c072 	custom	1,r20,r20,zero
    23b4:	1505883a 	add	r2,r2,r20
    23b8:	1285c0b2 	custom	2,r2,r2,r10
    23bc:	28800025 	stbio	r2,0(r5)


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    23c0:	d0a72317 	ldw	r2,-25460(gp)
    23c4:	f80b883a 	mov	r5,ra
    23c8:	10ffffc4 	addi	r3,r2,-1
    23cc:	f8ffc216 	blt	ra,r3,22d8 <__alt_data_end+0xff0022d8>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    23d0:	40c00084 	addi	r3,r8,2
    23d4:	1885383a 	mul	r2,r3,r2
    23d8:	d1670d17 	ldw	r5,-25548(gp)
    23dc:	1307883a 	add	r3,r2,r12
    23e0:	18c7883a 	add	r3,r3,r3
    23e4:	20c7883a 	add	r3,r4,r3
    23e8:	18c0000b 	ldhu	r3,0(r3)
    23ec:	10bfffc4 	addi	r2,r2,-1
    23f0:	2885883a 	add	r2,r5,r2
    23f4:	1807c032 	custom	0,r3,r3,zero
    23f8:	10c00005 	stb	r3,0(r2)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    23fc:	d0e72217 	ldw	r3,-25464(gp)
    2400:	d0a72317 	ldw	r2,-25460(gp)
    2404:	19bfff84 	addi	r6,r3,-2
    2408:	4180020e 	bge	r8,r6,2414 <sobel_all_complete_fusion+0x1f4>
    240c:	4811883a 	mov	r8,r9
    2410:	003fa306 	br	22a0 <__alt_data_end+0xff0022a0>
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    2414:	01400084 	movi	r5,2
    2418:	2880430e 	bge	r5,r2,2528 <sobel_all_complete_fusion+0x308>
    241c:	1a7fff44 	addi	r9,r3,-3
    2420:	02000044 	movi	r8,1
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2424:	02802004 	movi	r10,128
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
    2428:	3085383a 	mul	r2,r6,r2
    242c:	d1670d17 	ldw	r5,-25548(gp)
    2430:	1087883a 	add	r3,r2,r2
    2434:	20c7883a 	add	r3,r4,r3
    2438:	18c0000b 	ldhu	r3,0(r3)
    243c:	1205883a 	add	r2,r2,r8
    2440:	2885883a 	add	r2,r5,r2
    2444:	1807c032 	custom	0,r3,r3,zero
    2448:	10c00005 	stb	r3,0(r2)
				a = grayscale_array[(y-1)*array_width+(x-1)];
    244c:	d1672317 	ldw	r5,-25460(gp)
    2450:	d3270d17 	ldw	r12,-25548(gp)
    2454:	447fffc4 	addi	r17,r8,-1
    2458:	2a45383a 	mul	r2,r5,r9
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    245c:	6207883a 	add	r3,r12,r8
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    2460:	294f883a 	add	r7,r5,r5
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    2464:	609b883a 	add	r13,r12,r2
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2468:	189f883a 	add	r15,r3,r2
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    246c:	388f883a 	add	r7,r7,r2

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    2470:	42c00044 	addi	r11,r8,1
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    2474:	6c5d883a 	add	r14,r13,r17
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2478:	78800003 	ldbu	r2,0(r15)
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    247c:	74000003 	ldbu	r16,0(r14)
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    2480:	61df883a 	add	r15,r12,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    2484:	6adb883a 	add	r13,r13,r11
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2488:	19e5883a 	add	r18,r3,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    248c:	6b800003 	ldbu	r14,0(r13)
				c = grayscale_array[(y+1)*array_width+(x-1)];
    2490:	7c5b883a 	add	r13,r15,r17
    2494:	6b400003 	ldbu	r13,0(r13)
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2498:	1087883a 	add	r3,r2,r2
    249c:	90800003 	ldbu	r2,0(r18)
    24a0:	1c07883a 	add	r3,r3,r16
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    24a4:	62df883a 	add	r15,r12,r11
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24a8:	1b87883a 	add	r3,r3,r14
    24ac:	1b47c83a 	sub	r3,r3,r13
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    24b0:	79cf883a 	add	r7,r15,r7
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24b4:	298b383a 	mul	r5,r5,r6
    24b8:	1085883a 	add	r2,r2,r2
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    24bc:	39c00003 	ldbu	r7,0(r7)
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24c0:	1885c83a 	sub	r2,r3,r2
    24c4:	d0e71817 	ldw	r3,-25504(gp)
    24c8:	2a11883a 	add	r8,r5,r8
    24cc:	11c5c83a 	sub	r2,r2,r7
    24d0:	1a11883a 	add	r8,r3,r8
    24d4:	1005c072 	custom	1,r2,r2,zero
    24d8:	6159883a 	add	r12,r12,r5
    24dc:	6459883a 	add	r12,r12,r17
    24e0:	63000003 	ldbu	r12,0(r12)
    24e4:	795f883a 	add	r15,r15,r5
    24e8:	79400003 	ldbu	r5,0(r15)
    24ec:	741dc83a 	sub	r14,r14,r16
    24f0:	6319883a 	add	r12,r12,r12
    24f4:	7319c83a 	sub	r12,r14,r12
    24f8:	294b883a 	add	r5,r5,r5
    24fc:	614b883a 	add	r5,r12,r5
    2500:	2b47c83a 	sub	r3,r5,r13
    2504:	19c7883a 	add	r3,r3,r7
    2508:	1807c072 	custom	1,r3,r3,zero
    250c:	10c5883a 	add	r2,r2,r3
    2510:	1285c0b2 	custom	2,r2,r2,r10
    2514:	40800025 	stbio	r2,0(r8)
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    2518:	d0a72317 	ldw	r2,-25460(gp)
    251c:	5811883a 	mov	r8,r11
    2520:	10ffffc4 	addi	r3,r2,-1
    2524:	58ffc016 	blt	r11,r3,2428 <__alt_data_end+0xff002428>
						ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
							2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
						,128));
	}

}
    2528:	dfc00617 	ldw	ra,24(sp)
    252c:	dd400517 	ldw	r21,20(sp)
    2530:	dd000417 	ldw	r20,16(sp)
    2534:	dcc00317 	ldw	r19,12(sp)
    2538:	dc800217 	ldw	r18,8(sp)
    253c:	dc400117 	ldw	r17,4(sp)
    2540:	dc000017 	ldw	r16,0(sp)
    2544:	dec00704 	addi	sp,sp,28
    2548:	f800283a 	ret

0000254c <GetSobelAllResult>:
unsigned char *GetSobelAllResult() {
	return sobel_result;
}
    254c:	d0a71817 	ldw	r2,-25504(gp)
    2550:	f800283a 	ret

00002554 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2554:	00804034 	movhi	r2,256
    2558:	10843404 	addi	r2,r2,4304
    255c:	11000035 	stwio	r4,0(r2)
    2560:	f800283a 	ret

00002564 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2564:	00804034 	movhi	r2,256
    2568:	10843504 	addi	r2,r2,4308
    256c:	11000025 	stbio	r4,0(r2)
    2570:	f800283a 	ret

00002574 <__divsi3>:
    2574:	20001b16 	blt	r4,zero,25e4 <__divsi3+0x70>
    2578:	000f883a 	mov	r7,zero
    257c:	28001616 	blt	r5,zero,25d8 <__divsi3+0x64>
    2580:	200d883a 	mov	r6,r4
    2584:	29001a2e 	bgeu	r5,r4,25f0 <__divsi3+0x7c>
    2588:	00800804 	movi	r2,32
    258c:	00c00044 	movi	r3,1
    2590:	00000106 	br	2598 <__divsi3+0x24>
    2594:	10000d26 	beq	r2,zero,25cc <__divsi3+0x58>
    2598:	294b883a 	add	r5,r5,r5
    259c:	10bfffc4 	addi	r2,r2,-1
    25a0:	18c7883a 	add	r3,r3,r3
    25a4:	293ffb36 	bltu	r5,r4,2594 <__alt_data_end+0xff002594>
    25a8:	0005883a 	mov	r2,zero
    25ac:	18000726 	beq	r3,zero,25cc <__divsi3+0x58>
    25b0:	0005883a 	mov	r2,zero
    25b4:	31400236 	bltu	r6,r5,25c0 <__divsi3+0x4c>
    25b8:	314dc83a 	sub	r6,r6,r5
    25bc:	10c4b03a 	or	r2,r2,r3
    25c0:	1806d07a 	srli	r3,r3,1
    25c4:	280ad07a 	srli	r5,r5,1
    25c8:	183ffa1e 	bne	r3,zero,25b4 <__alt_data_end+0xff0025b4>
    25cc:	38000126 	beq	r7,zero,25d4 <__divsi3+0x60>
    25d0:	0085c83a 	sub	r2,zero,r2
    25d4:	f800283a 	ret
    25d8:	014bc83a 	sub	r5,zero,r5
    25dc:	39c0005c 	xori	r7,r7,1
    25e0:	003fe706 	br	2580 <__alt_data_end+0xff002580>
    25e4:	0109c83a 	sub	r4,zero,r4
    25e8:	01c00044 	movi	r7,1
    25ec:	003fe306 	br	257c <__alt_data_end+0xff00257c>
    25f0:	00c00044 	movi	r3,1
    25f4:	003fee06 	br	25b0 <__alt_data_end+0xff0025b0>

000025f8 <__modsi3>:
    25f8:	20001716 	blt	r4,zero,2658 <__modsi3+0x60>
    25fc:	000f883a 	mov	r7,zero
    2600:	2005883a 	mov	r2,r4
    2604:	28001216 	blt	r5,zero,2650 <__modsi3+0x58>
    2608:	2900162e 	bgeu	r5,r4,2664 <__modsi3+0x6c>
    260c:	01800804 	movi	r6,32
    2610:	00c00044 	movi	r3,1
    2614:	00000106 	br	261c <__modsi3+0x24>
    2618:	30000a26 	beq	r6,zero,2644 <__modsi3+0x4c>
    261c:	294b883a 	add	r5,r5,r5
    2620:	31bfffc4 	addi	r6,r6,-1
    2624:	18c7883a 	add	r3,r3,r3
    2628:	293ffb36 	bltu	r5,r4,2618 <__alt_data_end+0xff002618>
    262c:	18000526 	beq	r3,zero,2644 <__modsi3+0x4c>
    2630:	1806d07a 	srli	r3,r3,1
    2634:	11400136 	bltu	r2,r5,263c <__modsi3+0x44>
    2638:	1145c83a 	sub	r2,r2,r5
    263c:	280ad07a 	srli	r5,r5,1
    2640:	183ffb1e 	bne	r3,zero,2630 <__alt_data_end+0xff002630>
    2644:	38000126 	beq	r7,zero,264c <__modsi3+0x54>
    2648:	0085c83a 	sub	r2,zero,r2
    264c:	f800283a 	ret
    2650:	014bc83a 	sub	r5,zero,r5
    2654:	003fec06 	br	2608 <__alt_data_end+0xff002608>
    2658:	0109c83a 	sub	r4,zero,r4
    265c:	01c00044 	movi	r7,1
    2660:	003fe706 	br	2600 <__alt_data_end+0xff002600>
    2664:	00c00044 	movi	r3,1
    2668:	003ff106 	br	2630 <__alt_data_end+0xff002630>

0000266c <__udivsi3>:
    266c:	200d883a 	mov	r6,r4
    2670:	2900152e 	bgeu	r5,r4,26c8 <__udivsi3+0x5c>
    2674:	28001416 	blt	r5,zero,26c8 <__udivsi3+0x5c>
    2678:	00800804 	movi	r2,32
    267c:	00c00044 	movi	r3,1
    2680:	00000206 	br	268c <__udivsi3+0x20>
    2684:	10000e26 	beq	r2,zero,26c0 <__udivsi3+0x54>
    2688:	28000516 	blt	r5,zero,26a0 <__udivsi3+0x34>
    268c:	294b883a 	add	r5,r5,r5
    2690:	10bfffc4 	addi	r2,r2,-1
    2694:	18c7883a 	add	r3,r3,r3
    2698:	293ffa36 	bltu	r5,r4,2684 <__alt_data_end+0xff002684>
    269c:	18000826 	beq	r3,zero,26c0 <__udivsi3+0x54>
    26a0:	0005883a 	mov	r2,zero
    26a4:	31400236 	bltu	r6,r5,26b0 <__udivsi3+0x44>
    26a8:	314dc83a 	sub	r6,r6,r5
    26ac:	10c4b03a 	or	r2,r2,r3
    26b0:	1806d07a 	srli	r3,r3,1
    26b4:	280ad07a 	srli	r5,r5,1
    26b8:	183ffa1e 	bne	r3,zero,26a4 <__alt_data_end+0xff0026a4>
    26bc:	f800283a 	ret
    26c0:	0005883a 	mov	r2,zero
    26c4:	f800283a 	ret
    26c8:	00c00044 	movi	r3,1
    26cc:	003ff406 	br	26a0 <__alt_data_end+0xff0026a0>

000026d0 <__umodsi3>:
    26d0:	2005883a 	mov	r2,r4
    26d4:	2900122e 	bgeu	r5,r4,2720 <__umodsi3+0x50>
    26d8:	28001116 	blt	r5,zero,2720 <__umodsi3+0x50>
    26dc:	01800804 	movi	r6,32
    26e0:	00c00044 	movi	r3,1
    26e4:	00000206 	br	26f0 <__umodsi3+0x20>
    26e8:	30000c26 	beq	r6,zero,271c <__umodsi3+0x4c>
    26ec:	28000516 	blt	r5,zero,2704 <__umodsi3+0x34>
    26f0:	294b883a 	add	r5,r5,r5
    26f4:	31bfffc4 	addi	r6,r6,-1
    26f8:	18c7883a 	add	r3,r3,r3
    26fc:	293ffa36 	bltu	r5,r4,26e8 <__alt_data_end+0xff0026e8>
    2700:	18000626 	beq	r3,zero,271c <__umodsi3+0x4c>
    2704:	1806d07a 	srli	r3,r3,1
    2708:	11400136 	bltu	r2,r5,2710 <__umodsi3+0x40>
    270c:	1145c83a 	sub	r2,r2,r5
    2710:	280ad07a 	srli	r5,r5,1
    2714:	183ffb1e 	bne	r3,zero,2704 <__alt_data_end+0xff002704>
    2718:	f800283a 	ret
    271c:	f800283a 	ret
    2720:	00c00044 	movi	r3,1
    2724:	003ff706 	br	2704 <__alt_data_end+0xff002704>

00002728 <__divdf3>:
    2728:	defff204 	addi	sp,sp,-56
    272c:	dd400915 	stw	r21,36(sp)
    2730:	282ad53a 	srli	r21,r5,20
    2734:	dd000815 	stw	r20,32(sp)
    2738:	2828d7fa 	srli	r20,r5,31
    273c:	dc000415 	stw	r16,16(sp)
    2740:	04000434 	movhi	r16,16
    2744:	df000c15 	stw	fp,48(sp)
    2748:	843fffc4 	addi	r16,r16,-1
    274c:	dfc00d15 	stw	ra,52(sp)
    2750:	ddc00b15 	stw	r23,44(sp)
    2754:	dd800a15 	stw	r22,40(sp)
    2758:	dcc00715 	stw	r19,28(sp)
    275c:	dc800615 	stw	r18,24(sp)
    2760:	dc400515 	stw	r17,20(sp)
    2764:	ad41ffcc 	andi	r21,r21,2047
    2768:	2c20703a 	and	r16,r5,r16
    276c:	a7003fcc 	andi	fp,r20,255
    2770:	a8006126 	beq	r21,zero,28f8 <__divdf3+0x1d0>
    2774:	0081ffc4 	movi	r2,2047
    2778:	2025883a 	mov	r18,r4
    277c:	a8803726 	beq	r21,r2,285c <__divdf3+0x134>
    2780:	80800434 	orhi	r2,r16,16
    2784:	100490fa 	slli	r2,r2,3
    2788:	2020d77a 	srli	r16,r4,29
    278c:	202490fa 	slli	r18,r4,3
    2790:	ad7f0044 	addi	r21,r21,-1023
    2794:	80a0b03a 	or	r16,r16,r2
    2798:	0027883a 	mov	r19,zero
    279c:	0013883a 	mov	r9,zero
    27a0:	3804d53a 	srli	r2,r7,20
    27a4:	382cd7fa 	srli	r22,r7,31
    27a8:	04400434 	movhi	r17,16
    27ac:	8c7fffc4 	addi	r17,r17,-1
    27b0:	1081ffcc 	andi	r2,r2,2047
    27b4:	3011883a 	mov	r8,r6
    27b8:	3c62703a 	and	r17,r7,r17
    27bc:	b5c03fcc 	andi	r23,r22,255
    27c0:	10006c26 	beq	r2,zero,2974 <__divdf3+0x24c>
    27c4:	00c1ffc4 	movi	r3,2047
    27c8:	10c06426 	beq	r2,r3,295c <__divdf3+0x234>
    27cc:	88c00434 	orhi	r3,r17,16
    27d0:	180690fa 	slli	r3,r3,3
    27d4:	3022d77a 	srli	r17,r6,29
    27d8:	301090fa 	slli	r8,r6,3
    27dc:	10bf0044 	addi	r2,r2,-1023
    27e0:	88e2b03a 	or	r17,r17,r3
    27e4:	000f883a 	mov	r7,zero
    27e8:	a58cf03a 	xor	r6,r20,r22
    27ec:	3cc8b03a 	or	r4,r7,r19
    27f0:	a8abc83a 	sub	r21,r21,r2
    27f4:	008003c4 	movi	r2,15
    27f8:	3007883a 	mov	r3,r6
    27fc:	34c03fcc 	andi	r19,r6,255
    2800:	11009036 	bltu	r2,r4,2a44 <__divdf3+0x31c>
    2804:	200890ba 	slli	r4,r4,2
    2808:	00800034 	movhi	r2,0
    280c:	108a0704 	addi	r2,r2,10268
    2810:	2089883a 	add	r4,r4,r2
    2814:	20800017 	ldw	r2,0(r4)
    2818:	1000683a 	jmp	r2
    281c:	00002a44 	movi	zero,169
    2820:	00002894 	movui	zero,162
    2824:	00002a34 	movhi	zero,168
    2828:	00002888 	cmpgei	zero,zero,162
    282c:	00002a34 	movhi	zero,168
    2830:	00002a08 	cmpgei	zero,zero,168
    2834:	00002a34 	movhi	zero,168
    2838:	00002888 	cmpgei	zero,zero,162
    283c:	00002894 	movui	zero,162
    2840:	00002894 	movui	zero,162
    2844:	00002a08 	cmpgei	zero,zero,168
    2848:	00002888 	cmpgei	zero,zero,162
    284c:	00002878 	rdprs	zero,zero,161
    2850:	00002878 	rdprs	zero,zero,161
    2854:	00002878 	rdprs	zero,zero,161
    2858:	00002d28 	cmpgeui	zero,zero,180
    285c:	2404b03a 	or	r2,r4,r16
    2860:	1000661e 	bne	r2,zero,29fc <__divdf3+0x2d4>
    2864:	04c00204 	movi	r19,8
    2868:	0021883a 	mov	r16,zero
    286c:	0025883a 	mov	r18,zero
    2870:	02400084 	movi	r9,2
    2874:	003fca06 	br	27a0 <__alt_data_end+0xff0027a0>
    2878:	8023883a 	mov	r17,r16
    287c:	9011883a 	mov	r8,r18
    2880:	e02f883a 	mov	r23,fp
    2884:	480f883a 	mov	r7,r9
    2888:	00800084 	movi	r2,2
    288c:	3881311e 	bne	r7,r2,2d54 <__divdf3+0x62c>
    2890:	b827883a 	mov	r19,r23
    2894:	98c0004c 	andi	r3,r19,1
    2898:	0081ffc4 	movi	r2,2047
    289c:	000b883a 	mov	r5,zero
    28a0:	0025883a 	mov	r18,zero
    28a4:	1004953a 	slli	r2,r2,20
    28a8:	18c03fcc 	andi	r3,r3,255
    28ac:	04400434 	movhi	r17,16
    28b0:	8c7fffc4 	addi	r17,r17,-1
    28b4:	180697fa 	slli	r3,r3,31
    28b8:	2c4a703a 	and	r5,r5,r17
    28bc:	288ab03a 	or	r5,r5,r2
    28c0:	28c6b03a 	or	r3,r5,r3
    28c4:	9005883a 	mov	r2,r18
    28c8:	dfc00d17 	ldw	ra,52(sp)
    28cc:	df000c17 	ldw	fp,48(sp)
    28d0:	ddc00b17 	ldw	r23,44(sp)
    28d4:	dd800a17 	ldw	r22,40(sp)
    28d8:	dd400917 	ldw	r21,36(sp)
    28dc:	dd000817 	ldw	r20,32(sp)
    28e0:	dcc00717 	ldw	r19,28(sp)
    28e4:	dc800617 	ldw	r18,24(sp)
    28e8:	dc400517 	ldw	r17,20(sp)
    28ec:	dc000417 	ldw	r16,16(sp)
    28f0:	dec00e04 	addi	sp,sp,56
    28f4:	f800283a 	ret
    28f8:	2404b03a 	or	r2,r4,r16
    28fc:	2027883a 	mov	r19,r4
    2900:	10003926 	beq	r2,zero,29e8 <__divdf3+0x2c0>
    2904:	80012e26 	beq	r16,zero,2dc0 <__divdf3+0x698>
    2908:	8009883a 	mov	r4,r16
    290c:	d9800315 	stw	r6,12(sp)
    2910:	d9c00215 	stw	r7,8(sp)
    2914:	00030b80 	call	30b8 <__clzsi2>
    2918:	d9800317 	ldw	r6,12(sp)
    291c:	d9c00217 	ldw	r7,8(sp)
    2920:	113ffd44 	addi	r4,r2,-11
    2924:	00c00704 	movi	r3,28
    2928:	19012116 	blt	r3,r4,2db0 <__divdf3+0x688>
    292c:	00c00744 	movi	r3,29
    2930:	147ffe04 	addi	r17,r2,-8
    2934:	1907c83a 	sub	r3,r3,r4
    2938:	8460983a 	sll	r16,r16,r17
    293c:	98c6d83a 	srl	r3,r19,r3
    2940:	9c64983a 	sll	r18,r19,r17
    2944:	1c20b03a 	or	r16,r3,r16
    2948:	1080fcc4 	addi	r2,r2,1011
    294c:	00abc83a 	sub	r21,zero,r2
    2950:	0027883a 	mov	r19,zero
    2954:	0013883a 	mov	r9,zero
    2958:	003f9106 	br	27a0 <__alt_data_end+0xff0027a0>
    295c:	3446b03a 	or	r3,r6,r17
    2960:	18001f1e 	bne	r3,zero,29e0 <__divdf3+0x2b8>
    2964:	0023883a 	mov	r17,zero
    2968:	0011883a 	mov	r8,zero
    296c:	01c00084 	movi	r7,2
    2970:	003f9d06 	br	27e8 <__alt_data_end+0xff0027e8>
    2974:	3446b03a 	or	r3,r6,r17
    2978:	18001526 	beq	r3,zero,29d0 <__divdf3+0x2a8>
    297c:	88011b26 	beq	r17,zero,2dec <__divdf3+0x6c4>
    2980:	8809883a 	mov	r4,r17
    2984:	d9800315 	stw	r6,12(sp)
    2988:	da400115 	stw	r9,4(sp)
    298c:	00030b80 	call	30b8 <__clzsi2>
    2990:	d9800317 	ldw	r6,12(sp)
    2994:	da400117 	ldw	r9,4(sp)
    2998:	113ffd44 	addi	r4,r2,-11
    299c:	00c00704 	movi	r3,28
    29a0:	19010e16 	blt	r3,r4,2ddc <__divdf3+0x6b4>
    29a4:	00c00744 	movi	r3,29
    29a8:	123ffe04 	addi	r8,r2,-8
    29ac:	1907c83a 	sub	r3,r3,r4
    29b0:	8a22983a 	sll	r17,r17,r8
    29b4:	30c6d83a 	srl	r3,r6,r3
    29b8:	3210983a 	sll	r8,r6,r8
    29bc:	1c62b03a 	or	r17,r3,r17
    29c0:	1080fcc4 	addi	r2,r2,1011
    29c4:	0085c83a 	sub	r2,zero,r2
    29c8:	000f883a 	mov	r7,zero
    29cc:	003f8606 	br	27e8 <__alt_data_end+0xff0027e8>
    29d0:	0023883a 	mov	r17,zero
    29d4:	0011883a 	mov	r8,zero
    29d8:	01c00044 	movi	r7,1
    29dc:	003f8206 	br	27e8 <__alt_data_end+0xff0027e8>
    29e0:	01c000c4 	movi	r7,3
    29e4:	003f8006 	br	27e8 <__alt_data_end+0xff0027e8>
    29e8:	04c00104 	movi	r19,4
    29ec:	0021883a 	mov	r16,zero
    29f0:	0025883a 	mov	r18,zero
    29f4:	02400044 	movi	r9,1
    29f8:	003f6906 	br	27a0 <__alt_data_end+0xff0027a0>
    29fc:	04c00304 	movi	r19,12
    2a00:	024000c4 	movi	r9,3
    2a04:	003f6606 	br	27a0 <__alt_data_end+0xff0027a0>
    2a08:	01400434 	movhi	r5,16
    2a0c:	0007883a 	mov	r3,zero
    2a10:	297fffc4 	addi	r5,r5,-1
    2a14:	04bfffc4 	movi	r18,-1
    2a18:	0081ffc4 	movi	r2,2047
    2a1c:	003fa106 	br	28a4 <__alt_data_end+0xff0028a4>
    2a20:	00c00044 	movi	r3,1
    2a24:	1887c83a 	sub	r3,r3,r2
    2a28:	01000e04 	movi	r4,56
    2a2c:	20c1210e 	bge	r4,r3,2eb4 <__divdf3+0x78c>
    2a30:	98c0004c 	andi	r3,r19,1
    2a34:	0005883a 	mov	r2,zero
    2a38:	000b883a 	mov	r5,zero
    2a3c:	0025883a 	mov	r18,zero
    2a40:	003f9806 	br	28a4 <__alt_data_end+0xff0028a4>
    2a44:	8c00fd36 	bltu	r17,r16,2e3c <__divdf3+0x714>
    2a48:	8440fb26 	beq	r16,r17,2e38 <__divdf3+0x710>
    2a4c:	8007883a 	mov	r3,r16
    2a50:	ad7fffc4 	addi	r21,r21,-1
    2a54:	0021883a 	mov	r16,zero
    2a58:	4004d63a 	srli	r2,r8,24
    2a5c:	8822923a 	slli	r17,r17,8
    2a60:	1809883a 	mov	r4,r3
    2a64:	402c923a 	slli	r22,r8,8
    2a68:	88b8b03a 	or	fp,r17,r2
    2a6c:	e028d43a 	srli	r20,fp,16
    2a70:	d8c00015 	stw	r3,0(sp)
    2a74:	e5ffffcc 	andi	r23,fp,65535
    2a78:	a00b883a 	mov	r5,r20
    2a7c:	000266c0 	call	266c <__udivsi3>
    2a80:	d8c00017 	ldw	r3,0(sp)
    2a84:	a00b883a 	mov	r5,r20
    2a88:	d8800315 	stw	r2,12(sp)
    2a8c:	1809883a 	mov	r4,r3
    2a90:	00026d00 	call	26d0 <__umodsi3>
    2a94:	d9800317 	ldw	r6,12(sp)
    2a98:	1006943a 	slli	r3,r2,16
    2a9c:	9004d43a 	srli	r2,r18,16
    2aa0:	b9a3383a 	mul	r17,r23,r6
    2aa4:	10c4b03a 	or	r2,r2,r3
    2aa8:	1440062e 	bgeu	r2,r17,2ac4 <__divdf3+0x39c>
    2aac:	1705883a 	add	r2,r2,fp
    2ab0:	30ffffc4 	addi	r3,r6,-1
    2ab4:	1700ee36 	bltu	r2,fp,2e70 <__divdf3+0x748>
    2ab8:	1440ed2e 	bgeu	r2,r17,2e70 <__divdf3+0x748>
    2abc:	31bfff84 	addi	r6,r6,-2
    2ac0:	1705883a 	add	r2,r2,fp
    2ac4:	1463c83a 	sub	r17,r2,r17
    2ac8:	a00b883a 	mov	r5,r20
    2acc:	8809883a 	mov	r4,r17
    2ad0:	d9800315 	stw	r6,12(sp)
    2ad4:	000266c0 	call	266c <__udivsi3>
    2ad8:	a00b883a 	mov	r5,r20
    2adc:	8809883a 	mov	r4,r17
    2ae0:	d8800215 	stw	r2,8(sp)
    2ae4:	00026d00 	call	26d0 <__umodsi3>
    2ae8:	d9c00217 	ldw	r7,8(sp)
    2aec:	1004943a 	slli	r2,r2,16
    2af0:	94bfffcc 	andi	r18,r18,65535
    2af4:	b9d1383a 	mul	r8,r23,r7
    2af8:	90a4b03a 	or	r18,r18,r2
    2afc:	d9800317 	ldw	r6,12(sp)
    2b00:	9200062e 	bgeu	r18,r8,2b1c <__divdf3+0x3f4>
    2b04:	9725883a 	add	r18,r18,fp
    2b08:	38bfffc4 	addi	r2,r7,-1
    2b0c:	9700d636 	bltu	r18,fp,2e68 <__divdf3+0x740>
    2b10:	9200d52e 	bgeu	r18,r8,2e68 <__divdf3+0x740>
    2b14:	39ffff84 	addi	r7,r7,-2
    2b18:	9725883a 	add	r18,r18,fp
    2b1c:	3004943a 	slli	r2,r6,16
    2b20:	b012d43a 	srli	r9,r22,16
    2b24:	b1bfffcc 	andi	r6,r22,65535
    2b28:	11e2b03a 	or	r17,r2,r7
    2b2c:	8806d43a 	srli	r3,r17,16
    2b30:	893fffcc 	andi	r4,r17,65535
    2b34:	218b383a 	mul	r5,r4,r6
    2b38:	30c5383a 	mul	r2,r6,r3
    2b3c:	2249383a 	mul	r4,r4,r9
    2b40:	280ed43a 	srli	r7,r5,16
    2b44:	9225c83a 	sub	r18,r18,r8
    2b48:	2089883a 	add	r4,r4,r2
    2b4c:	3909883a 	add	r4,r7,r4
    2b50:	1a47383a 	mul	r3,r3,r9
    2b54:	2080022e 	bgeu	r4,r2,2b60 <__divdf3+0x438>
    2b58:	00800074 	movhi	r2,1
    2b5c:	1887883a 	add	r3,r3,r2
    2b60:	2004d43a 	srli	r2,r4,16
    2b64:	2008943a 	slli	r4,r4,16
    2b68:	297fffcc 	andi	r5,r5,65535
    2b6c:	10c7883a 	add	r3,r2,r3
    2b70:	2149883a 	add	r4,r4,r5
    2b74:	90c0a536 	bltu	r18,r3,2e0c <__divdf3+0x6e4>
    2b78:	90c0bf26 	beq	r18,r3,2e78 <__divdf3+0x750>
    2b7c:	90c7c83a 	sub	r3,r18,r3
    2b80:	810fc83a 	sub	r7,r16,r4
    2b84:	81e5803a 	cmpltu	r18,r16,r7
    2b88:	1ca5c83a 	sub	r18,r3,r18
    2b8c:	e480c126 	beq	fp,r18,2e94 <__divdf3+0x76c>
    2b90:	a00b883a 	mov	r5,r20
    2b94:	9009883a 	mov	r4,r18
    2b98:	d9800315 	stw	r6,12(sp)
    2b9c:	d9c00215 	stw	r7,8(sp)
    2ba0:	da400115 	stw	r9,4(sp)
    2ba4:	000266c0 	call	266c <__udivsi3>
    2ba8:	a00b883a 	mov	r5,r20
    2bac:	9009883a 	mov	r4,r18
    2bb0:	d8800015 	stw	r2,0(sp)
    2bb4:	00026d00 	call	26d0 <__umodsi3>
    2bb8:	d9c00217 	ldw	r7,8(sp)
    2bbc:	da000017 	ldw	r8,0(sp)
    2bc0:	1006943a 	slli	r3,r2,16
    2bc4:	3804d43a 	srli	r2,r7,16
    2bc8:	ba21383a 	mul	r16,r23,r8
    2bcc:	d9800317 	ldw	r6,12(sp)
    2bd0:	10c4b03a 	or	r2,r2,r3
    2bd4:	da400117 	ldw	r9,4(sp)
    2bd8:	1400062e 	bgeu	r2,r16,2bf4 <__divdf3+0x4cc>
    2bdc:	1705883a 	add	r2,r2,fp
    2be0:	40ffffc4 	addi	r3,r8,-1
    2be4:	1700ad36 	bltu	r2,fp,2e9c <__divdf3+0x774>
    2be8:	1400ac2e 	bgeu	r2,r16,2e9c <__divdf3+0x774>
    2bec:	423fff84 	addi	r8,r8,-2
    2bf0:	1705883a 	add	r2,r2,fp
    2bf4:	1421c83a 	sub	r16,r2,r16
    2bf8:	a00b883a 	mov	r5,r20
    2bfc:	8009883a 	mov	r4,r16
    2c00:	d9800315 	stw	r6,12(sp)
    2c04:	d9c00215 	stw	r7,8(sp)
    2c08:	da000015 	stw	r8,0(sp)
    2c0c:	da400115 	stw	r9,4(sp)
    2c10:	000266c0 	call	266c <__udivsi3>
    2c14:	8009883a 	mov	r4,r16
    2c18:	a00b883a 	mov	r5,r20
    2c1c:	1025883a 	mov	r18,r2
    2c20:	00026d00 	call	26d0 <__umodsi3>
    2c24:	d9c00217 	ldw	r7,8(sp)
    2c28:	1004943a 	slli	r2,r2,16
    2c2c:	bcaf383a 	mul	r23,r23,r18
    2c30:	393fffcc 	andi	r4,r7,65535
    2c34:	2088b03a 	or	r4,r4,r2
    2c38:	d9800317 	ldw	r6,12(sp)
    2c3c:	da000017 	ldw	r8,0(sp)
    2c40:	da400117 	ldw	r9,4(sp)
    2c44:	25c0062e 	bgeu	r4,r23,2c60 <__divdf3+0x538>
    2c48:	2709883a 	add	r4,r4,fp
    2c4c:	90bfffc4 	addi	r2,r18,-1
    2c50:	27009436 	bltu	r4,fp,2ea4 <__divdf3+0x77c>
    2c54:	25c0932e 	bgeu	r4,r23,2ea4 <__divdf3+0x77c>
    2c58:	94bfff84 	addi	r18,r18,-2
    2c5c:	2709883a 	add	r4,r4,fp
    2c60:	4004943a 	slli	r2,r8,16
    2c64:	25efc83a 	sub	r23,r4,r23
    2c68:	1490b03a 	or	r8,r2,r18
    2c6c:	4008d43a 	srli	r4,r8,16
    2c70:	40ffffcc 	andi	r3,r8,65535
    2c74:	30c5383a 	mul	r2,r6,r3
    2c78:	1a47383a 	mul	r3,r3,r9
    2c7c:	310d383a 	mul	r6,r6,r4
    2c80:	100ad43a 	srli	r5,r2,16
    2c84:	4913383a 	mul	r9,r9,r4
    2c88:	1987883a 	add	r3,r3,r6
    2c8c:	28c7883a 	add	r3,r5,r3
    2c90:	1980022e 	bgeu	r3,r6,2c9c <__divdf3+0x574>
    2c94:	01000074 	movhi	r4,1
    2c98:	4913883a 	add	r9,r9,r4
    2c9c:	1808d43a 	srli	r4,r3,16
    2ca0:	1806943a 	slli	r3,r3,16
    2ca4:	10bfffcc 	andi	r2,r2,65535
    2ca8:	2253883a 	add	r9,r4,r9
    2cac:	1887883a 	add	r3,r3,r2
    2cb0:	ba403836 	bltu	r23,r9,2d94 <__divdf3+0x66c>
    2cb4:	ba403626 	beq	r23,r9,2d90 <__divdf3+0x668>
    2cb8:	42000054 	ori	r8,r8,1
    2cbc:	a880ffc4 	addi	r2,r21,1023
    2cc0:	00bf570e 	bge	zero,r2,2a20 <__alt_data_end+0xff002a20>
    2cc4:	40c001cc 	andi	r3,r8,7
    2cc8:	18000726 	beq	r3,zero,2ce8 <__divdf3+0x5c0>
    2ccc:	40c003cc 	andi	r3,r8,15
    2cd0:	01000104 	movi	r4,4
    2cd4:	19000426 	beq	r3,r4,2ce8 <__divdf3+0x5c0>
    2cd8:	4107883a 	add	r3,r8,r4
    2cdc:	1a11803a 	cmpltu	r8,r3,r8
    2ce0:	8a23883a 	add	r17,r17,r8
    2ce4:	1811883a 	mov	r8,r3
    2ce8:	88c0402c 	andhi	r3,r17,256
    2cec:	18000426 	beq	r3,zero,2d00 <__divdf3+0x5d8>
    2cf0:	00ffc034 	movhi	r3,65280
    2cf4:	18ffffc4 	addi	r3,r3,-1
    2cf8:	a8810004 	addi	r2,r21,1024
    2cfc:	88e2703a 	and	r17,r17,r3
    2d00:	00c1ff84 	movi	r3,2046
    2d04:	18bee316 	blt	r3,r2,2894 <__alt_data_end+0xff002894>
    2d08:	8824977a 	slli	r18,r17,29
    2d0c:	4010d0fa 	srli	r8,r8,3
    2d10:	8822927a 	slli	r17,r17,9
    2d14:	1081ffcc 	andi	r2,r2,2047
    2d18:	9224b03a 	or	r18,r18,r8
    2d1c:	880ad33a 	srli	r5,r17,12
    2d20:	98c0004c 	andi	r3,r19,1
    2d24:	003edf06 	br	28a4 <__alt_data_end+0xff0028a4>
    2d28:	8080022c 	andhi	r2,r16,8
    2d2c:	10001226 	beq	r2,zero,2d78 <__divdf3+0x650>
    2d30:	8880022c 	andhi	r2,r17,8
    2d34:	1000101e 	bne	r2,zero,2d78 <__divdf3+0x650>
    2d38:	00800434 	movhi	r2,16
    2d3c:	89400234 	orhi	r5,r17,8
    2d40:	10bfffc4 	addi	r2,r2,-1
    2d44:	b007883a 	mov	r3,r22
    2d48:	288a703a 	and	r5,r5,r2
    2d4c:	4025883a 	mov	r18,r8
    2d50:	003f3106 	br	2a18 <__alt_data_end+0xff002a18>
    2d54:	008000c4 	movi	r2,3
    2d58:	3880a626 	beq	r7,r2,2ff4 <__divdf3+0x8cc>
    2d5c:	00800044 	movi	r2,1
    2d60:	3880521e 	bne	r7,r2,2eac <__divdf3+0x784>
    2d64:	b807883a 	mov	r3,r23
    2d68:	0005883a 	mov	r2,zero
    2d6c:	000b883a 	mov	r5,zero
    2d70:	0025883a 	mov	r18,zero
    2d74:	003ecb06 	br	28a4 <__alt_data_end+0xff0028a4>
    2d78:	00800434 	movhi	r2,16
    2d7c:	81400234 	orhi	r5,r16,8
    2d80:	10bfffc4 	addi	r2,r2,-1
    2d84:	a007883a 	mov	r3,r20
    2d88:	288a703a 	and	r5,r5,r2
    2d8c:	003f2206 	br	2a18 <__alt_data_end+0xff002a18>
    2d90:	183fca26 	beq	r3,zero,2cbc <__alt_data_end+0xff002cbc>
    2d94:	e5ef883a 	add	r23,fp,r23
    2d98:	40bfffc4 	addi	r2,r8,-1
    2d9c:	bf00392e 	bgeu	r23,fp,2e84 <__divdf3+0x75c>
    2da0:	1011883a 	mov	r8,r2
    2da4:	ba7fc41e 	bne	r23,r9,2cb8 <__alt_data_end+0xff002cb8>
    2da8:	b0ffc31e 	bne	r22,r3,2cb8 <__alt_data_end+0xff002cb8>
    2dac:	003fc306 	br	2cbc <__alt_data_end+0xff002cbc>
    2db0:	143ff604 	addi	r16,r2,-40
    2db4:	9c20983a 	sll	r16,r19,r16
    2db8:	0025883a 	mov	r18,zero
    2dbc:	003ee206 	br	2948 <__alt_data_end+0xff002948>
    2dc0:	d9800315 	stw	r6,12(sp)
    2dc4:	d9c00215 	stw	r7,8(sp)
    2dc8:	00030b80 	call	30b8 <__clzsi2>
    2dcc:	10800804 	addi	r2,r2,32
    2dd0:	d9c00217 	ldw	r7,8(sp)
    2dd4:	d9800317 	ldw	r6,12(sp)
    2dd8:	003ed106 	br	2920 <__alt_data_end+0xff002920>
    2ddc:	147ff604 	addi	r17,r2,-40
    2de0:	3462983a 	sll	r17,r6,r17
    2de4:	0011883a 	mov	r8,zero
    2de8:	003ef506 	br	29c0 <__alt_data_end+0xff0029c0>
    2dec:	3009883a 	mov	r4,r6
    2df0:	d9800315 	stw	r6,12(sp)
    2df4:	da400115 	stw	r9,4(sp)
    2df8:	00030b80 	call	30b8 <__clzsi2>
    2dfc:	10800804 	addi	r2,r2,32
    2e00:	da400117 	ldw	r9,4(sp)
    2e04:	d9800317 	ldw	r6,12(sp)
    2e08:	003ee306 	br	2998 <__alt_data_end+0xff002998>
    2e0c:	85a1883a 	add	r16,r16,r22
    2e10:	8585803a 	cmpltu	r2,r16,r22
    2e14:	1705883a 	add	r2,r2,fp
    2e18:	14a5883a 	add	r18,r2,r18
    2e1c:	88bfffc4 	addi	r2,r17,-1
    2e20:	e4800c2e 	bgeu	fp,r18,2e54 <__divdf3+0x72c>
    2e24:	90c03e36 	bltu	r18,r3,2f20 <__divdf3+0x7f8>
    2e28:	1c806926 	beq	r3,r18,2fd0 <__divdf3+0x8a8>
    2e2c:	90c7c83a 	sub	r3,r18,r3
    2e30:	1023883a 	mov	r17,r2
    2e34:	003f5206 	br	2b80 <__alt_data_end+0xff002b80>
    2e38:	923f0436 	bltu	r18,r8,2a4c <__alt_data_end+0xff002a4c>
    2e3c:	800897fa 	slli	r4,r16,31
    2e40:	9004d07a 	srli	r2,r18,1
    2e44:	8006d07a 	srli	r3,r16,1
    2e48:	902097fa 	slli	r16,r18,31
    2e4c:	20a4b03a 	or	r18,r4,r2
    2e50:	003f0106 	br	2a58 <__alt_data_end+0xff002a58>
    2e54:	e4bff51e 	bne	fp,r18,2e2c <__alt_data_end+0xff002e2c>
    2e58:	85bff22e 	bgeu	r16,r22,2e24 <__alt_data_end+0xff002e24>
    2e5c:	e0c7c83a 	sub	r3,fp,r3
    2e60:	1023883a 	mov	r17,r2
    2e64:	003f4606 	br	2b80 <__alt_data_end+0xff002b80>
    2e68:	100f883a 	mov	r7,r2
    2e6c:	003f2b06 	br	2b1c <__alt_data_end+0xff002b1c>
    2e70:	180d883a 	mov	r6,r3
    2e74:	003f1306 	br	2ac4 <__alt_data_end+0xff002ac4>
    2e78:	813fe436 	bltu	r16,r4,2e0c <__alt_data_end+0xff002e0c>
    2e7c:	0007883a 	mov	r3,zero
    2e80:	003f3f06 	br	2b80 <__alt_data_end+0xff002b80>
    2e84:	ba402c36 	bltu	r23,r9,2f38 <__divdf3+0x810>
    2e88:	4dc05426 	beq	r9,r23,2fdc <__divdf3+0x8b4>
    2e8c:	1011883a 	mov	r8,r2
    2e90:	003f8906 	br	2cb8 <__alt_data_end+0xff002cb8>
    2e94:	023fffc4 	movi	r8,-1
    2e98:	003f8806 	br	2cbc <__alt_data_end+0xff002cbc>
    2e9c:	1811883a 	mov	r8,r3
    2ea0:	003f5406 	br	2bf4 <__alt_data_end+0xff002bf4>
    2ea4:	1025883a 	mov	r18,r2
    2ea8:	003f6d06 	br	2c60 <__alt_data_end+0xff002c60>
    2eac:	b827883a 	mov	r19,r23
    2eb0:	003f8206 	br	2cbc <__alt_data_end+0xff002cbc>
    2eb4:	010007c4 	movi	r4,31
    2eb8:	20c02616 	blt	r4,r3,2f54 <__divdf3+0x82c>
    2ebc:	00800804 	movi	r2,32
    2ec0:	10c5c83a 	sub	r2,r2,r3
    2ec4:	888a983a 	sll	r5,r17,r2
    2ec8:	40c8d83a 	srl	r4,r8,r3
    2ecc:	4084983a 	sll	r2,r8,r2
    2ed0:	88e2d83a 	srl	r17,r17,r3
    2ed4:	2906b03a 	or	r3,r5,r4
    2ed8:	1004c03a 	cmpne	r2,r2,zero
    2edc:	1886b03a 	or	r3,r3,r2
    2ee0:	188001cc 	andi	r2,r3,7
    2ee4:	10000726 	beq	r2,zero,2f04 <__divdf3+0x7dc>
    2ee8:	188003cc 	andi	r2,r3,15
    2eec:	01000104 	movi	r4,4
    2ef0:	11000426 	beq	r2,r4,2f04 <__divdf3+0x7dc>
    2ef4:	1805883a 	mov	r2,r3
    2ef8:	10c00104 	addi	r3,r2,4
    2efc:	1885803a 	cmpltu	r2,r3,r2
    2f00:	88a3883a 	add	r17,r17,r2
    2f04:	8880202c 	andhi	r2,r17,128
    2f08:	10002726 	beq	r2,zero,2fa8 <__divdf3+0x880>
    2f0c:	98c0004c 	andi	r3,r19,1
    2f10:	00800044 	movi	r2,1
    2f14:	000b883a 	mov	r5,zero
    2f18:	0025883a 	mov	r18,zero
    2f1c:	003e6106 	br	28a4 <__alt_data_end+0xff0028a4>
    2f20:	85a1883a 	add	r16,r16,r22
    2f24:	8585803a 	cmpltu	r2,r16,r22
    2f28:	1705883a 	add	r2,r2,fp
    2f2c:	14a5883a 	add	r18,r2,r18
    2f30:	8c7fff84 	addi	r17,r17,-2
    2f34:	003f1106 	br	2b7c <__alt_data_end+0xff002b7c>
    2f38:	b589883a 	add	r4,r22,r22
    2f3c:	25ad803a 	cmpltu	r22,r4,r22
    2f40:	b739883a 	add	fp,r22,fp
    2f44:	40bfff84 	addi	r2,r8,-2
    2f48:	bf2f883a 	add	r23,r23,fp
    2f4c:	202d883a 	mov	r22,r4
    2f50:	003f9306 	br	2da0 <__alt_data_end+0xff002da0>
    2f54:	013ff844 	movi	r4,-31
    2f58:	2085c83a 	sub	r2,r4,r2
    2f5c:	8888d83a 	srl	r4,r17,r2
    2f60:	00800804 	movi	r2,32
    2f64:	18802126 	beq	r3,r2,2fec <__divdf3+0x8c4>
    2f68:	00801004 	movi	r2,64
    2f6c:	10c5c83a 	sub	r2,r2,r3
    2f70:	8884983a 	sll	r2,r17,r2
    2f74:	1204b03a 	or	r2,r2,r8
    2f78:	1004c03a 	cmpne	r2,r2,zero
    2f7c:	2084b03a 	or	r2,r4,r2
    2f80:	144001cc 	andi	r17,r2,7
    2f84:	88000d1e 	bne	r17,zero,2fbc <__divdf3+0x894>
    2f88:	000b883a 	mov	r5,zero
    2f8c:	1024d0fa 	srli	r18,r2,3
    2f90:	98c0004c 	andi	r3,r19,1
    2f94:	0005883a 	mov	r2,zero
    2f98:	9464b03a 	or	r18,r18,r17
    2f9c:	003e4106 	br	28a4 <__alt_data_end+0xff0028a4>
    2fa0:	1007883a 	mov	r3,r2
    2fa4:	0023883a 	mov	r17,zero
    2fa8:	880a927a 	slli	r5,r17,9
    2fac:	1805883a 	mov	r2,r3
    2fb0:	8822977a 	slli	r17,r17,29
    2fb4:	280ad33a 	srli	r5,r5,12
    2fb8:	003ff406 	br	2f8c <__alt_data_end+0xff002f8c>
    2fbc:	10c003cc 	andi	r3,r2,15
    2fc0:	01000104 	movi	r4,4
    2fc4:	193ff626 	beq	r3,r4,2fa0 <__alt_data_end+0xff002fa0>
    2fc8:	0023883a 	mov	r17,zero
    2fcc:	003fca06 	br	2ef8 <__alt_data_end+0xff002ef8>
    2fd0:	813fd336 	bltu	r16,r4,2f20 <__alt_data_end+0xff002f20>
    2fd4:	1023883a 	mov	r17,r2
    2fd8:	003fa806 	br	2e7c <__alt_data_end+0xff002e7c>
    2fdc:	b0ffd636 	bltu	r22,r3,2f38 <__alt_data_end+0xff002f38>
    2fe0:	1011883a 	mov	r8,r2
    2fe4:	b0ff341e 	bne	r22,r3,2cb8 <__alt_data_end+0xff002cb8>
    2fe8:	003f3406 	br	2cbc <__alt_data_end+0xff002cbc>
    2fec:	0005883a 	mov	r2,zero
    2ff0:	003fe006 	br	2f74 <__alt_data_end+0xff002f74>
    2ff4:	00800434 	movhi	r2,16
    2ff8:	89400234 	orhi	r5,r17,8
    2ffc:	10bfffc4 	addi	r2,r2,-1
    3000:	b807883a 	mov	r3,r23
    3004:	288a703a 	and	r5,r5,r2
    3008:	4025883a 	mov	r18,r8
    300c:	003e8206 	br	2a18 <__alt_data_end+0xff002a18>

00003010 <__floatunsidf>:
    3010:	defffe04 	addi	sp,sp,-8
    3014:	dc000015 	stw	r16,0(sp)
    3018:	dfc00115 	stw	ra,4(sp)
    301c:	2021883a 	mov	r16,r4
    3020:	20002226 	beq	r4,zero,30ac <__floatunsidf+0x9c>
    3024:	00030b80 	call	30b8 <__clzsi2>
    3028:	01010784 	movi	r4,1054
    302c:	2089c83a 	sub	r4,r4,r2
    3030:	01810cc4 	movi	r6,1075
    3034:	310dc83a 	sub	r6,r6,r4
    3038:	00c007c4 	movi	r3,31
    303c:	1980120e 	bge	r3,r6,3088 <__floatunsidf+0x78>
    3040:	00c104c4 	movi	r3,1043
    3044:	1907c83a 	sub	r3,r3,r4
    3048:	80ca983a 	sll	r5,r16,r3
    304c:	00800434 	movhi	r2,16
    3050:	10bfffc4 	addi	r2,r2,-1
    3054:	2101ffcc 	andi	r4,r4,2047
    3058:	0021883a 	mov	r16,zero
    305c:	288a703a 	and	r5,r5,r2
    3060:	2008953a 	slli	r4,r4,20
    3064:	00c00434 	movhi	r3,16
    3068:	18ffffc4 	addi	r3,r3,-1
    306c:	28c6703a 	and	r3,r5,r3
    3070:	8005883a 	mov	r2,r16
    3074:	1906b03a 	or	r3,r3,r4
    3078:	dfc00117 	ldw	ra,4(sp)
    307c:	dc000017 	ldw	r16,0(sp)
    3080:	dec00204 	addi	sp,sp,8
    3084:	f800283a 	ret
    3088:	00c002c4 	movi	r3,11
    308c:	188bc83a 	sub	r5,r3,r2
    3090:	814ad83a 	srl	r5,r16,r5
    3094:	00c00434 	movhi	r3,16
    3098:	18ffffc4 	addi	r3,r3,-1
    309c:	81a0983a 	sll	r16,r16,r6
    30a0:	2101ffcc 	andi	r4,r4,2047
    30a4:	28ca703a 	and	r5,r5,r3
    30a8:	003fed06 	br	3060 <__alt_data_end+0xff003060>
    30ac:	0009883a 	mov	r4,zero
    30b0:	000b883a 	mov	r5,zero
    30b4:	003fea06 	br	3060 <__alt_data_end+0xff003060>

000030b8 <__clzsi2>:
    30b8:	00bfffd4 	movui	r2,65535
    30bc:	11000536 	bltu	r2,r4,30d4 <__clzsi2+0x1c>
    30c0:	00803fc4 	movi	r2,255
    30c4:	11000f36 	bltu	r2,r4,3104 <__clzsi2+0x4c>
    30c8:	00800804 	movi	r2,32
    30cc:	0007883a 	mov	r3,zero
    30d0:	00000506 	br	30e8 <__clzsi2+0x30>
    30d4:	00804034 	movhi	r2,256
    30d8:	10bfffc4 	addi	r2,r2,-1
    30dc:	11000c2e 	bgeu	r2,r4,3110 <__clzsi2+0x58>
    30e0:	00800204 	movi	r2,8
    30e4:	00c00604 	movi	r3,24
    30e8:	20c8d83a 	srl	r4,r4,r3
    30ec:	00c00074 	movhi	r3,1
    30f0:	18c82284 	addi	r3,r3,8330
    30f4:	1909883a 	add	r4,r3,r4
    30f8:	20c00003 	ldbu	r3,0(r4)
    30fc:	10c5c83a 	sub	r2,r2,r3
    3100:	f800283a 	ret
    3104:	00800604 	movi	r2,24
    3108:	00c00204 	movi	r3,8
    310c:	003ff606 	br	30e8 <__alt_data_end+0xff0030e8>
    3110:	00800404 	movi	r2,16
    3114:	1007883a 	mov	r3,r2
    3118:	003ff306 	br	30e8 <__alt_data_end+0xff0030e8>

0000311c <malloc>:
    311c:	00800074 	movhi	r2,1
    3120:	108fce04 	addi	r2,r2,16184
    3124:	200b883a 	mov	r5,r4
    3128:	11000017 	ldw	r4,0(r2)
    312c:	00031441 	jmpi	3144 <_malloc_r>

00003130 <free>:
    3130:	00800074 	movhi	r2,1
    3134:	108fce04 	addi	r2,r2,16184
    3138:	200b883a 	mov	r5,r4
    313c:	11000017 	ldw	r4,0(r2)
    3140:	0007f941 	jmpi	7f94 <_free_r>

00003144 <_malloc_r>:
    3144:	defff504 	addi	sp,sp,-44
    3148:	dc800315 	stw	r18,12(sp)
    314c:	dfc00a15 	stw	ra,40(sp)
    3150:	df000915 	stw	fp,36(sp)
    3154:	ddc00815 	stw	r23,32(sp)
    3158:	dd800715 	stw	r22,28(sp)
    315c:	dd400615 	stw	r21,24(sp)
    3160:	dd000515 	stw	r20,20(sp)
    3164:	dcc00415 	stw	r19,16(sp)
    3168:	dc400215 	stw	r17,8(sp)
    316c:	dc000115 	stw	r16,4(sp)
    3170:	288002c4 	addi	r2,r5,11
    3174:	00c00584 	movi	r3,22
    3178:	2025883a 	mov	r18,r4
    317c:	18807f2e 	bgeu	r3,r2,337c <_malloc_r+0x238>
    3180:	047ffe04 	movi	r17,-8
    3184:	1462703a 	and	r17,r2,r17
    3188:	8800a316 	blt	r17,zero,3418 <_malloc_r+0x2d4>
    318c:	8940a236 	bltu	r17,r5,3418 <_malloc_r+0x2d4>
    3190:	000f4380 	call	f438 <__malloc_lock>
    3194:	00807dc4 	movi	r2,503
    3198:	1441e92e 	bgeu	r2,r17,3940 <_malloc_r+0x7fc>
    319c:	8804d27a 	srli	r2,r17,9
    31a0:	1000a126 	beq	r2,zero,3428 <_malloc_r+0x2e4>
    31a4:	00c00104 	movi	r3,4
    31a8:	18811e36 	bltu	r3,r2,3624 <_malloc_r+0x4e0>
    31ac:	8804d1ba 	srli	r2,r17,6
    31b0:	12000e44 	addi	r8,r2,57
    31b4:	11c00e04 	addi	r7,r2,56
    31b8:	4209883a 	add	r4,r8,r8
    31bc:	04c00074 	movhi	r19,1
    31c0:	2109883a 	add	r4,r4,r4
    31c4:	9cc92004 	addi	r19,r19,9344
    31c8:	2109883a 	add	r4,r4,r4
    31cc:	9909883a 	add	r4,r19,r4
    31d0:	24000117 	ldw	r16,4(r4)
    31d4:	213ffe04 	addi	r4,r4,-8
    31d8:	24009726 	beq	r4,r16,3438 <_malloc_r+0x2f4>
    31dc:	80800117 	ldw	r2,4(r16)
    31e0:	01bfff04 	movi	r6,-4
    31e4:	014003c4 	movi	r5,15
    31e8:	1184703a 	and	r2,r2,r6
    31ec:	1447c83a 	sub	r3,r2,r17
    31f0:	28c00716 	blt	r5,r3,3210 <_malloc_r+0xcc>
    31f4:	1800920e 	bge	r3,zero,3440 <_malloc_r+0x2fc>
    31f8:	84000317 	ldw	r16,12(r16)
    31fc:	24008e26 	beq	r4,r16,3438 <_malloc_r+0x2f4>
    3200:	80800117 	ldw	r2,4(r16)
    3204:	1184703a 	and	r2,r2,r6
    3208:	1447c83a 	sub	r3,r2,r17
    320c:	28fff90e 	bge	r5,r3,31f4 <__alt_data_end+0xff0031f4>
    3210:	3809883a 	mov	r4,r7
    3214:	01800074 	movhi	r6,1
    3218:	9c000417 	ldw	r16,16(r19)
    321c:	31892004 	addi	r6,r6,9344
    3220:	32000204 	addi	r8,r6,8
    3224:	82013426 	beq	r16,r8,36f8 <_malloc_r+0x5b4>
    3228:	80c00117 	ldw	r3,4(r16)
    322c:	00bfff04 	movi	r2,-4
    3230:	188e703a 	and	r7,r3,r2
    3234:	3c45c83a 	sub	r2,r7,r17
    3238:	00c003c4 	movi	r3,15
    323c:	18811f16 	blt	r3,r2,36bc <_malloc_r+0x578>
    3240:	32000515 	stw	r8,20(r6)
    3244:	32000415 	stw	r8,16(r6)
    3248:	10007f0e 	bge	r2,zero,3448 <_malloc_r+0x304>
    324c:	00807fc4 	movi	r2,511
    3250:	11c0fd36 	bltu	r2,r7,3648 <_malloc_r+0x504>
    3254:	3806d0fa 	srli	r3,r7,3
    3258:	01c00044 	movi	r7,1
    325c:	30800117 	ldw	r2,4(r6)
    3260:	19400044 	addi	r5,r3,1
    3264:	294b883a 	add	r5,r5,r5
    3268:	1807d0ba 	srai	r3,r3,2
    326c:	294b883a 	add	r5,r5,r5
    3270:	294b883a 	add	r5,r5,r5
    3274:	298b883a 	add	r5,r5,r6
    3278:	38c6983a 	sll	r3,r7,r3
    327c:	29c00017 	ldw	r7,0(r5)
    3280:	2a7ffe04 	addi	r9,r5,-8
    3284:	1886b03a 	or	r3,r3,r2
    3288:	82400315 	stw	r9,12(r16)
    328c:	81c00215 	stw	r7,8(r16)
    3290:	30c00115 	stw	r3,4(r6)
    3294:	2c000015 	stw	r16,0(r5)
    3298:	3c000315 	stw	r16,12(r7)
    329c:	2005d0ba 	srai	r2,r4,2
    32a0:	01400044 	movi	r5,1
    32a4:	288a983a 	sll	r5,r5,r2
    32a8:	19406f36 	bltu	r3,r5,3468 <_malloc_r+0x324>
    32ac:	28c4703a 	and	r2,r5,r3
    32b0:	10000a1e 	bne	r2,zero,32dc <_malloc_r+0x198>
    32b4:	00bfff04 	movi	r2,-4
    32b8:	294b883a 	add	r5,r5,r5
    32bc:	2088703a 	and	r4,r4,r2
    32c0:	28c4703a 	and	r2,r5,r3
    32c4:	21000104 	addi	r4,r4,4
    32c8:	1000041e 	bne	r2,zero,32dc <_malloc_r+0x198>
    32cc:	294b883a 	add	r5,r5,r5
    32d0:	28c4703a 	and	r2,r5,r3
    32d4:	21000104 	addi	r4,r4,4
    32d8:	103ffc26 	beq	r2,zero,32cc <__alt_data_end+0xff0032cc>
    32dc:	02bfff04 	movi	r10,-4
    32e0:	024003c4 	movi	r9,15
    32e4:	21800044 	addi	r6,r4,1
    32e8:	318d883a 	add	r6,r6,r6
    32ec:	318d883a 	add	r6,r6,r6
    32f0:	318d883a 	add	r6,r6,r6
    32f4:	998d883a 	add	r6,r19,r6
    32f8:	333ffe04 	addi	r12,r6,-8
    32fc:	2017883a 	mov	r11,r4
    3300:	31800104 	addi	r6,r6,4
    3304:	34000017 	ldw	r16,0(r6)
    3308:	31fffd04 	addi	r7,r6,-12
    330c:	81c0041e 	bne	r16,r7,3320 <_malloc_r+0x1dc>
    3310:	0000fb06 	br	3700 <_malloc_r+0x5bc>
    3314:	1801030e 	bge	r3,zero,3724 <_malloc_r+0x5e0>
    3318:	84000317 	ldw	r16,12(r16)
    331c:	81c0f826 	beq	r16,r7,3700 <_malloc_r+0x5bc>
    3320:	80800117 	ldw	r2,4(r16)
    3324:	1284703a 	and	r2,r2,r10
    3328:	1447c83a 	sub	r3,r2,r17
    332c:	48fff90e 	bge	r9,r3,3314 <__alt_data_end+0xff003314>
    3330:	80800317 	ldw	r2,12(r16)
    3334:	81000217 	ldw	r4,8(r16)
    3338:	89400054 	ori	r5,r17,1
    333c:	81400115 	stw	r5,4(r16)
    3340:	20800315 	stw	r2,12(r4)
    3344:	11000215 	stw	r4,8(r2)
    3348:	8463883a 	add	r17,r16,r17
    334c:	9c400515 	stw	r17,20(r19)
    3350:	9c400415 	stw	r17,16(r19)
    3354:	18800054 	ori	r2,r3,1
    3358:	88800115 	stw	r2,4(r17)
    335c:	8a000315 	stw	r8,12(r17)
    3360:	8a000215 	stw	r8,8(r17)
    3364:	88e3883a 	add	r17,r17,r3
    3368:	88c00015 	stw	r3,0(r17)
    336c:	9009883a 	mov	r4,r18
    3370:	000f45c0 	call	f45c <__malloc_unlock>
    3374:	80800204 	addi	r2,r16,8
    3378:	00001b06 	br	33e8 <_malloc_r+0x2a4>
    337c:	04400404 	movi	r17,16
    3380:	89402536 	bltu	r17,r5,3418 <_malloc_r+0x2d4>
    3384:	000f4380 	call	f438 <__malloc_lock>
    3388:	00800184 	movi	r2,6
    338c:	01000084 	movi	r4,2
    3390:	04c00074 	movhi	r19,1
    3394:	1085883a 	add	r2,r2,r2
    3398:	9cc92004 	addi	r19,r19,9344
    339c:	1085883a 	add	r2,r2,r2
    33a0:	9885883a 	add	r2,r19,r2
    33a4:	14000117 	ldw	r16,4(r2)
    33a8:	10fffe04 	addi	r3,r2,-8
    33ac:	80c0d926 	beq	r16,r3,3714 <_malloc_r+0x5d0>
    33b0:	80c00117 	ldw	r3,4(r16)
    33b4:	81000317 	ldw	r4,12(r16)
    33b8:	00bfff04 	movi	r2,-4
    33bc:	1884703a 	and	r2,r3,r2
    33c0:	81400217 	ldw	r5,8(r16)
    33c4:	8085883a 	add	r2,r16,r2
    33c8:	10c00117 	ldw	r3,4(r2)
    33cc:	29000315 	stw	r4,12(r5)
    33d0:	21400215 	stw	r5,8(r4)
    33d4:	18c00054 	ori	r3,r3,1
    33d8:	10c00115 	stw	r3,4(r2)
    33dc:	9009883a 	mov	r4,r18
    33e0:	000f45c0 	call	f45c <__malloc_unlock>
    33e4:	80800204 	addi	r2,r16,8
    33e8:	dfc00a17 	ldw	ra,40(sp)
    33ec:	df000917 	ldw	fp,36(sp)
    33f0:	ddc00817 	ldw	r23,32(sp)
    33f4:	dd800717 	ldw	r22,28(sp)
    33f8:	dd400617 	ldw	r21,24(sp)
    33fc:	dd000517 	ldw	r20,20(sp)
    3400:	dcc00417 	ldw	r19,16(sp)
    3404:	dc800317 	ldw	r18,12(sp)
    3408:	dc400217 	ldw	r17,8(sp)
    340c:	dc000117 	ldw	r16,4(sp)
    3410:	dec00b04 	addi	sp,sp,44
    3414:	f800283a 	ret
    3418:	00800304 	movi	r2,12
    341c:	90800015 	stw	r2,0(r18)
    3420:	0005883a 	mov	r2,zero
    3424:	003ff006 	br	33e8 <__alt_data_end+0xff0033e8>
    3428:	01002004 	movi	r4,128
    342c:	02001004 	movi	r8,64
    3430:	01c00fc4 	movi	r7,63
    3434:	003f6106 	br	31bc <__alt_data_end+0xff0031bc>
    3438:	4009883a 	mov	r4,r8
    343c:	003f7506 	br	3214 <__alt_data_end+0xff003214>
    3440:	81000317 	ldw	r4,12(r16)
    3444:	003fde06 	br	33c0 <__alt_data_end+0xff0033c0>
    3448:	81c5883a 	add	r2,r16,r7
    344c:	11400117 	ldw	r5,4(r2)
    3450:	9009883a 	mov	r4,r18
    3454:	29400054 	ori	r5,r5,1
    3458:	11400115 	stw	r5,4(r2)
    345c:	000f45c0 	call	f45c <__malloc_unlock>
    3460:	80800204 	addi	r2,r16,8
    3464:	003fe006 	br	33e8 <__alt_data_end+0xff0033e8>
    3468:	9c000217 	ldw	r16,8(r19)
    346c:	00bfff04 	movi	r2,-4
    3470:	85800117 	ldw	r22,4(r16)
    3474:	b0ac703a 	and	r22,r22,r2
    3478:	b4400336 	bltu	r22,r17,3488 <_malloc_r+0x344>
    347c:	b445c83a 	sub	r2,r22,r17
    3480:	00c003c4 	movi	r3,15
    3484:	18805d16 	blt	r3,r2,35fc <_malloc_r+0x4b8>
    3488:	05c00074 	movhi	r23,1
    348c:	00800074 	movhi	r2,1
    3490:	1096f104 	addi	r2,r2,23492
    3494:	bdcfcb04 	addi	r23,r23,16172
    3498:	15400017 	ldw	r21,0(r2)
    349c:	b8c00017 	ldw	r3,0(r23)
    34a0:	00bfffc4 	movi	r2,-1
    34a4:	858d883a 	add	r6,r16,r22
    34a8:	8d6b883a 	add	r21,r17,r21
    34ac:	1880ea26 	beq	r3,r2,3858 <_malloc_r+0x714>
    34b0:	ad4403c4 	addi	r21,r21,4111
    34b4:	00bc0004 	movi	r2,-4096
    34b8:	a8aa703a 	and	r21,r21,r2
    34bc:	a80b883a 	mov	r5,r21
    34c0:	9009883a 	mov	r4,r18
    34c4:	d9800015 	stw	r6,0(sp)
    34c8:	0003a900 	call	3a90 <_sbrk_r>
    34cc:	1029883a 	mov	r20,r2
    34d0:	00bfffc4 	movi	r2,-1
    34d4:	d9800017 	ldw	r6,0(sp)
    34d8:	a080e826 	beq	r20,r2,387c <_malloc_r+0x738>
    34dc:	a180a636 	bltu	r20,r6,3778 <_malloc_r+0x634>
    34e0:	07000074 	movhi	fp,1
    34e4:	e716ff04 	addi	fp,fp,23548
    34e8:	e0800017 	ldw	r2,0(fp)
    34ec:	a887883a 	add	r3,r21,r2
    34f0:	e0c00015 	stw	r3,0(fp)
    34f4:	3500e626 	beq	r6,r20,3890 <_malloc_r+0x74c>
    34f8:	b9000017 	ldw	r4,0(r23)
    34fc:	00bfffc4 	movi	r2,-1
    3500:	2080ee26 	beq	r4,r2,38bc <_malloc_r+0x778>
    3504:	a185c83a 	sub	r2,r20,r6
    3508:	10c5883a 	add	r2,r2,r3
    350c:	e0800015 	stw	r2,0(fp)
    3510:	a0c001cc 	andi	r3,r20,7
    3514:	1800bc26 	beq	r3,zero,3808 <_malloc_r+0x6c4>
    3518:	a0e9c83a 	sub	r20,r20,r3
    351c:	00840204 	movi	r2,4104
    3520:	a5000204 	addi	r20,r20,8
    3524:	10c7c83a 	sub	r3,r2,r3
    3528:	a545883a 	add	r2,r20,r21
    352c:	1083ffcc 	andi	r2,r2,4095
    3530:	18abc83a 	sub	r21,r3,r2
    3534:	a80b883a 	mov	r5,r21
    3538:	9009883a 	mov	r4,r18
    353c:	0003a900 	call	3a90 <_sbrk_r>
    3540:	00ffffc4 	movi	r3,-1
    3544:	10c0e126 	beq	r2,r3,38cc <_malloc_r+0x788>
    3548:	1505c83a 	sub	r2,r2,r20
    354c:	1545883a 	add	r2,r2,r21
    3550:	10800054 	ori	r2,r2,1
    3554:	e0c00017 	ldw	r3,0(fp)
    3558:	9d000215 	stw	r20,8(r19)
    355c:	a0800115 	stw	r2,4(r20)
    3560:	a8c7883a 	add	r3,r21,r3
    3564:	e0c00015 	stw	r3,0(fp)
    3568:	84c00e26 	beq	r16,r19,35a4 <_malloc_r+0x460>
    356c:	018003c4 	movi	r6,15
    3570:	3580a72e 	bgeu	r6,r22,3810 <_malloc_r+0x6cc>
    3574:	81400117 	ldw	r5,4(r16)
    3578:	013ffe04 	movi	r4,-8
    357c:	b0bffd04 	addi	r2,r22,-12
    3580:	1104703a 	and	r2,r2,r4
    3584:	2900004c 	andi	r4,r5,1
    3588:	2088b03a 	or	r4,r4,r2
    358c:	81000115 	stw	r4,4(r16)
    3590:	01400144 	movi	r5,5
    3594:	8089883a 	add	r4,r16,r2
    3598:	21400115 	stw	r5,4(r4)
    359c:	21400215 	stw	r5,8(r4)
    35a0:	3080cd36 	bltu	r6,r2,38d8 <_malloc_r+0x794>
    35a4:	00800074 	movhi	r2,1
    35a8:	1096f004 	addi	r2,r2,23488
    35ac:	11000017 	ldw	r4,0(r2)
    35b0:	20c0012e 	bgeu	r4,r3,35b8 <_malloc_r+0x474>
    35b4:	10c00015 	stw	r3,0(r2)
    35b8:	00800074 	movhi	r2,1
    35bc:	1096ef04 	addi	r2,r2,23484
    35c0:	11000017 	ldw	r4,0(r2)
    35c4:	9c000217 	ldw	r16,8(r19)
    35c8:	20c0012e 	bgeu	r4,r3,35d0 <_malloc_r+0x48c>
    35cc:	10c00015 	stw	r3,0(r2)
    35d0:	80c00117 	ldw	r3,4(r16)
    35d4:	00bfff04 	movi	r2,-4
    35d8:	1886703a 	and	r3,r3,r2
    35dc:	1c45c83a 	sub	r2,r3,r17
    35e0:	1c400236 	bltu	r3,r17,35ec <_malloc_r+0x4a8>
    35e4:	00c003c4 	movi	r3,15
    35e8:	18800416 	blt	r3,r2,35fc <_malloc_r+0x4b8>
    35ec:	9009883a 	mov	r4,r18
    35f0:	000f45c0 	call	f45c <__malloc_unlock>
    35f4:	0005883a 	mov	r2,zero
    35f8:	003f7b06 	br	33e8 <__alt_data_end+0xff0033e8>
    35fc:	88c00054 	ori	r3,r17,1
    3600:	80c00115 	stw	r3,4(r16)
    3604:	8463883a 	add	r17,r16,r17
    3608:	10800054 	ori	r2,r2,1
    360c:	9c400215 	stw	r17,8(r19)
    3610:	88800115 	stw	r2,4(r17)
    3614:	9009883a 	mov	r4,r18
    3618:	000f45c0 	call	f45c <__malloc_unlock>
    361c:	80800204 	addi	r2,r16,8
    3620:	003f7106 	br	33e8 <__alt_data_end+0xff0033e8>
    3624:	00c00504 	movi	r3,20
    3628:	18804a2e 	bgeu	r3,r2,3754 <_malloc_r+0x610>
    362c:	00c01504 	movi	r3,84
    3630:	18806e36 	bltu	r3,r2,37ec <_malloc_r+0x6a8>
    3634:	8804d33a 	srli	r2,r17,12
    3638:	12001bc4 	addi	r8,r2,111
    363c:	11c01b84 	addi	r7,r2,110
    3640:	4209883a 	add	r4,r8,r8
    3644:	003edd06 	br	31bc <__alt_data_end+0xff0031bc>
    3648:	3804d27a 	srli	r2,r7,9
    364c:	00c00104 	movi	r3,4
    3650:	1880442e 	bgeu	r3,r2,3764 <_malloc_r+0x620>
    3654:	00c00504 	movi	r3,20
    3658:	18808136 	bltu	r3,r2,3860 <_malloc_r+0x71c>
    365c:	11401704 	addi	r5,r2,92
    3660:	10c016c4 	addi	r3,r2,91
    3664:	294b883a 	add	r5,r5,r5
    3668:	294b883a 	add	r5,r5,r5
    366c:	294b883a 	add	r5,r5,r5
    3670:	994b883a 	add	r5,r19,r5
    3674:	28800017 	ldw	r2,0(r5)
    3678:	01800074 	movhi	r6,1
    367c:	297ffe04 	addi	r5,r5,-8
    3680:	31892004 	addi	r6,r6,9344
    3684:	28806526 	beq	r5,r2,381c <_malloc_r+0x6d8>
    3688:	01bfff04 	movi	r6,-4
    368c:	10c00117 	ldw	r3,4(r2)
    3690:	1986703a 	and	r3,r3,r6
    3694:	38c0022e 	bgeu	r7,r3,36a0 <_malloc_r+0x55c>
    3698:	10800217 	ldw	r2,8(r2)
    369c:	28bffb1e 	bne	r5,r2,368c <__alt_data_end+0xff00368c>
    36a0:	11400317 	ldw	r5,12(r2)
    36a4:	98c00117 	ldw	r3,4(r19)
    36a8:	81400315 	stw	r5,12(r16)
    36ac:	80800215 	stw	r2,8(r16)
    36b0:	2c000215 	stw	r16,8(r5)
    36b4:	14000315 	stw	r16,12(r2)
    36b8:	003ef806 	br	329c <__alt_data_end+0xff00329c>
    36bc:	88c00054 	ori	r3,r17,1
    36c0:	80c00115 	stw	r3,4(r16)
    36c4:	8463883a 	add	r17,r16,r17
    36c8:	34400515 	stw	r17,20(r6)
    36cc:	34400415 	stw	r17,16(r6)
    36d0:	10c00054 	ori	r3,r2,1
    36d4:	8a000315 	stw	r8,12(r17)
    36d8:	8a000215 	stw	r8,8(r17)
    36dc:	88c00115 	stw	r3,4(r17)
    36e0:	88a3883a 	add	r17,r17,r2
    36e4:	88800015 	stw	r2,0(r17)
    36e8:	9009883a 	mov	r4,r18
    36ec:	000f45c0 	call	f45c <__malloc_unlock>
    36f0:	80800204 	addi	r2,r16,8
    36f4:	003f3c06 	br	33e8 <__alt_data_end+0xff0033e8>
    36f8:	30c00117 	ldw	r3,4(r6)
    36fc:	003ee706 	br	329c <__alt_data_end+0xff00329c>
    3700:	5ac00044 	addi	r11,r11,1
    3704:	588000cc 	andi	r2,r11,3
    3708:	31800204 	addi	r6,r6,8
    370c:	103efd1e 	bne	r2,zero,3304 <__alt_data_end+0xff003304>
    3710:	00002406 	br	37a4 <_malloc_r+0x660>
    3714:	14000317 	ldw	r16,12(r2)
    3718:	143f251e 	bne	r2,r16,33b0 <__alt_data_end+0xff0033b0>
    371c:	21000084 	addi	r4,r4,2
    3720:	003ebc06 	br	3214 <__alt_data_end+0xff003214>
    3724:	8085883a 	add	r2,r16,r2
    3728:	10c00117 	ldw	r3,4(r2)
    372c:	81000317 	ldw	r4,12(r16)
    3730:	81400217 	ldw	r5,8(r16)
    3734:	18c00054 	ori	r3,r3,1
    3738:	10c00115 	stw	r3,4(r2)
    373c:	29000315 	stw	r4,12(r5)
    3740:	21400215 	stw	r5,8(r4)
    3744:	9009883a 	mov	r4,r18
    3748:	000f45c0 	call	f45c <__malloc_unlock>
    374c:	80800204 	addi	r2,r16,8
    3750:	003f2506 	br	33e8 <__alt_data_end+0xff0033e8>
    3754:	12001704 	addi	r8,r2,92
    3758:	11c016c4 	addi	r7,r2,91
    375c:	4209883a 	add	r4,r8,r8
    3760:	003e9606 	br	31bc <__alt_data_end+0xff0031bc>
    3764:	3804d1ba 	srli	r2,r7,6
    3768:	11400e44 	addi	r5,r2,57
    376c:	10c00e04 	addi	r3,r2,56
    3770:	294b883a 	add	r5,r5,r5
    3774:	003fbc06 	br	3668 <__alt_data_end+0xff003668>
    3778:	84ff5926 	beq	r16,r19,34e0 <__alt_data_end+0xff0034e0>
    377c:	00800074 	movhi	r2,1
    3780:	10892004 	addi	r2,r2,9344
    3784:	14000217 	ldw	r16,8(r2)
    3788:	00bfff04 	movi	r2,-4
    378c:	80c00117 	ldw	r3,4(r16)
    3790:	1886703a 	and	r3,r3,r2
    3794:	003f9106 	br	35dc <__alt_data_end+0xff0035dc>
    3798:	60800217 	ldw	r2,8(r12)
    379c:	213fffc4 	addi	r4,r4,-1
    37a0:	1300651e 	bne	r2,r12,3938 <_malloc_r+0x7f4>
    37a4:	208000cc 	andi	r2,r4,3
    37a8:	633ffe04 	addi	r12,r12,-8
    37ac:	103ffa1e 	bne	r2,zero,3798 <__alt_data_end+0xff003798>
    37b0:	98800117 	ldw	r2,4(r19)
    37b4:	0146303a 	nor	r3,zero,r5
    37b8:	1884703a 	and	r2,r3,r2
    37bc:	98800115 	stw	r2,4(r19)
    37c0:	294b883a 	add	r5,r5,r5
    37c4:	117f2836 	bltu	r2,r5,3468 <__alt_data_end+0xff003468>
    37c8:	283f2726 	beq	r5,zero,3468 <__alt_data_end+0xff003468>
    37cc:	2886703a 	and	r3,r5,r2
    37d0:	5809883a 	mov	r4,r11
    37d4:	183ec31e 	bne	r3,zero,32e4 <__alt_data_end+0xff0032e4>
    37d8:	294b883a 	add	r5,r5,r5
    37dc:	2886703a 	and	r3,r5,r2
    37e0:	21000104 	addi	r4,r4,4
    37e4:	183ffc26 	beq	r3,zero,37d8 <__alt_data_end+0xff0037d8>
    37e8:	003ebe06 	br	32e4 <__alt_data_end+0xff0032e4>
    37ec:	00c05504 	movi	r3,340
    37f0:	18801236 	bltu	r3,r2,383c <_malloc_r+0x6f8>
    37f4:	8804d3fa 	srli	r2,r17,15
    37f8:	12001e04 	addi	r8,r2,120
    37fc:	11c01dc4 	addi	r7,r2,119
    3800:	4209883a 	add	r4,r8,r8
    3804:	003e6d06 	br	31bc <__alt_data_end+0xff0031bc>
    3808:	00c40004 	movi	r3,4096
    380c:	003f4606 	br	3528 <__alt_data_end+0xff003528>
    3810:	00800044 	movi	r2,1
    3814:	a0800115 	stw	r2,4(r20)
    3818:	003f7406 	br	35ec <__alt_data_end+0xff0035ec>
    381c:	1805d0ba 	srai	r2,r3,2
    3820:	01c00044 	movi	r7,1
    3824:	30c00117 	ldw	r3,4(r6)
    3828:	388e983a 	sll	r7,r7,r2
    382c:	2805883a 	mov	r2,r5
    3830:	38c6b03a 	or	r3,r7,r3
    3834:	30c00115 	stw	r3,4(r6)
    3838:	003f9b06 	br	36a8 <__alt_data_end+0xff0036a8>
    383c:	00c15504 	movi	r3,1364
    3840:	18801a36 	bltu	r3,r2,38ac <_malloc_r+0x768>
    3844:	8804d4ba 	srli	r2,r17,18
    3848:	12001f44 	addi	r8,r2,125
    384c:	11c01f04 	addi	r7,r2,124
    3850:	4209883a 	add	r4,r8,r8
    3854:	003e5906 	br	31bc <__alt_data_end+0xff0031bc>
    3858:	ad400404 	addi	r21,r21,16
    385c:	003f1706 	br	34bc <__alt_data_end+0xff0034bc>
    3860:	00c01504 	movi	r3,84
    3864:	18802336 	bltu	r3,r2,38f4 <_malloc_r+0x7b0>
    3868:	3804d33a 	srli	r2,r7,12
    386c:	11401bc4 	addi	r5,r2,111
    3870:	10c01b84 	addi	r3,r2,110
    3874:	294b883a 	add	r5,r5,r5
    3878:	003f7b06 	br	3668 <__alt_data_end+0xff003668>
    387c:	9c000217 	ldw	r16,8(r19)
    3880:	00bfff04 	movi	r2,-4
    3884:	80c00117 	ldw	r3,4(r16)
    3888:	1886703a 	and	r3,r3,r2
    388c:	003f5306 	br	35dc <__alt_data_end+0xff0035dc>
    3890:	3083ffcc 	andi	r2,r6,4095
    3894:	103f181e 	bne	r2,zero,34f8 <__alt_data_end+0xff0034f8>
    3898:	99000217 	ldw	r4,8(r19)
    389c:	b545883a 	add	r2,r22,r21
    38a0:	10800054 	ori	r2,r2,1
    38a4:	20800115 	stw	r2,4(r4)
    38a8:	003f3e06 	br	35a4 <__alt_data_end+0xff0035a4>
    38ac:	01003f84 	movi	r4,254
    38b0:	02001fc4 	movi	r8,127
    38b4:	01c01f84 	movi	r7,126
    38b8:	003e4006 	br	31bc <__alt_data_end+0xff0031bc>
    38bc:	00800074 	movhi	r2,1
    38c0:	108fcb04 	addi	r2,r2,16172
    38c4:	15000015 	stw	r20,0(r2)
    38c8:	003f1106 	br	3510 <__alt_data_end+0xff003510>
    38cc:	00800044 	movi	r2,1
    38d0:	002b883a 	mov	r21,zero
    38d4:	003f1f06 	br	3554 <__alt_data_end+0xff003554>
    38d8:	81400204 	addi	r5,r16,8
    38dc:	9009883a 	mov	r4,r18
    38e0:	0007f940 	call	7f94 <_free_r>
    38e4:	00800074 	movhi	r2,1
    38e8:	1096ff04 	addi	r2,r2,23548
    38ec:	10c00017 	ldw	r3,0(r2)
    38f0:	003f2c06 	br	35a4 <__alt_data_end+0xff0035a4>
    38f4:	00c05504 	movi	r3,340
    38f8:	18800536 	bltu	r3,r2,3910 <_malloc_r+0x7cc>
    38fc:	3804d3fa 	srli	r2,r7,15
    3900:	11401e04 	addi	r5,r2,120
    3904:	10c01dc4 	addi	r3,r2,119
    3908:	294b883a 	add	r5,r5,r5
    390c:	003f5606 	br	3668 <__alt_data_end+0xff003668>
    3910:	00c15504 	movi	r3,1364
    3914:	18800536 	bltu	r3,r2,392c <_malloc_r+0x7e8>
    3918:	3804d4ba 	srli	r2,r7,18
    391c:	11401f44 	addi	r5,r2,125
    3920:	10c01f04 	addi	r3,r2,124
    3924:	294b883a 	add	r5,r5,r5
    3928:	003f4f06 	br	3668 <__alt_data_end+0xff003668>
    392c:	01403f84 	movi	r5,254
    3930:	00c01f84 	movi	r3,126
    3934:	003f4c06 	br	3668 <__alt_data_end+0xff003668>
    3938:	98800117 	ldw	r2,4(r19)
    393c:	003fa006 	br	37c0 <__alt_data_end+0xff0037c0>
    3940:	8808d0fa 	srli	r4,r17,3
    3944:	20800044 	addi	r2,r4,1
    3948:	1085883a 	add	r2,r2,r2
    394c:	003e9006 	br	3390 <__alt_data_end+0xff003390>

00003950 <_printf_r>:
    3950:	defffd04 	addi	sp,sp,-12
    3954:	2805883a 	mov	r2,r5
    3958:	dfc00015 	stw	ra,0(sp)
    395c:	d9800115 	stw	r6,4(sp)
    3960:	d9c00215 	stw	r7,8(sp)
    3964:	21400217 	ldw	r5,8(r4)
    3968:	d9c00104 	addi	r7,sp,4
    396c:	100d883a 	mov	r6,r2
    3970:	0003b7c0 	call	3b7c <___vfprintf_internal_r>
    3974:	dfc00017 	ldw	ra,0(sp)
    3978:	dec00304 	addi	sp,sp,12
    397c:	f800283a 	ret

00003980 <printf>:
    3980:	defffc04 	addi	sp,sp,-16
    3984:	dfc00015 	stw	ra,0(sp)
    3988:	d9400115 	stw	r5,4(sp)
    398c:	d9800215 	stw	r6,8(sp)
    3990:	d9c00315 	stw	r7,12(sp)
    3994:	00800074 	movhi	r2,1
    3998:	108fce04 	addi	r2,r2,16184
    399c:	10800017 	ldw	r2,0(r2)
    39a0:	200b883a 	mov	r5,r4
    39a4:	d9800104 	addi	r6,sp,4
    39a8:	11000217 	ldw	r4,8(r2)
    39ac:	0005d740 	call	5d74 <__vfprintf_internal>
    39b0:	dfc00017 	ldw	ra,0(sp)
    39b4:	dec00404 	addi	sp,sp,16
    39b8:	f800283a 	ret

000039bc <_puts_r>:
    39bc:	defff604 	addi	sp,sp,-40
    39c0:	dc000715 	stw	r16,28(sp)
    39c4:	2021883a 	mov	r16,r4
    39c8:	2809883a 	mov	r4,r5
    39cc:	dc400815 	stw	r17,32(sp)
    39d0:	dfc00915 	stw	ra,36(sp)
    39d4:	2823883a 	mov	r17,r5
    39d8:	0003ae40 	call	3ae4 <strlen>
    39dc:	10c00044 	addi	r3,r2,1
    39e0:	d8800115 	stw	r2,4(sp)
    39e4:	00800074 	movhi	r2,1
    39e8:	10881104 	addi	r2,r2,8260
    39ec:	d8800215 	stw	r2,8(sp)
    39f0:	00800044 	movi	r2,1
    39f4:	d8800315 	stw	r2,12(sp)
    39f8:	00800084 	movi	r2,2
    39fc:	dc400015 	stw	r17,0(sp)
    3a00:	d8c00615 	stw	r3,24(sp)
    3a04:	dec00415 	stw	sp,16(sp)
    3a08:	d8800515 	stw	r2,20(sp)
    3a0c:	80000226 	beq	r16,zero,3a18 <_puts_r+0x5c>
    3a10:	80800e17 	ldw	r2,56(r16)
    3a14:	10001426 	beq	r2,zero,3a68 <_puts_r+0xac>
    3a18:	81400217 	ldw	r5,8(r16)
    3a1c:	2880030b 	ldhu	r2,12(r5)
    3a20:	10c8000c 	andi	r3,r2,8192
    3a24:	1800061e 	bne	r3,zero,3a40 <_puts_r+0x84>
    3a28:	29001917 	ldw	r4,100(r5)
    3a2c:	00f7ffc4 	movi	r3,-8193
    3a30:	10880014 	ori	r2,r2,8192
    3a34:	20c6703a 	and	r3,r4,r3
    3a38:	2880030d 	sth	r2,12(r5)
    3a3c:	28c01915 	stw	r3,100(r5)
    3a40:	d9800404 	addi	r6,sp,16
    3a44:	8009883a 	mov	r4,r16
    3a48:	00082a40 	call	82a4 <__sfvwrite_r>
    3a4c:	1000091e 	bne	r2,zero,3a74 <_puts_r+0xb8>
    3a50:	00800284 	movi	r2,10
    3a54:	dfc00917 	ldw	ra,36(sp)
    3a58:	dc400817 	ldw	r17,32(sp)
    3a5c:	dc000717 	ldw	r16,28(sp)
    3a60:	dec00a04 	addi	sp,sp,40
    3a64:	f800283a 	ret
    3a68:	8009883a 	mov	r4,r16
    3a6c:	0007e200 	call	7e20 <__sinit>
    3a70:	003fe906 	br	3a18 <__alt_data_end+0xff003a18>
    3a74:	00bfffc4 	movi	r2,-1
    3a78:	003ff606 	br	3a54 <__alt_data_end+0xff003a54>

00003a7c <puts>:
    3a7c:	00800074 	movhi	r2,1
    3a80:	108fce04 	addi	r2,r2,16184
    3a84:	200b883a 	mov	r5,r4
    3a88:	11000017 	ldw	r4,0(r2)
    3a8c:	00039bc1 	jmpi	39bc <_puts_r>

00003a90 <_sbrk_r>:
    3a90:	defffd04 	addi	sp,sp,-12
    3a94:	dc000015 	stw	r16,0(sp)
    3a98:	04000074 	movhi	r16,1
    3a9c:	dc400115 	stw	r17,4(sp)
    3aa0:	8416f204 	addi	r16,r16,23496
    3aa4:	2023883a 	mov	r17,r4
    3aa8:	2809883a 	mov	r4,r5
    3aac:	dfc00215 	stw	ra,8(sp)
    3ab0:	80000015 	stw	zero,0(r16)
    3ab4:	000f61c0 	call	f61c <sbrk>
    3ab8:	00ffffc4 	movi	r3,-1
    3abc:	10c00526 	beq	r2,r3,3ad4 <_sbrk_r+0x44>
    3ac0:	dfc00217 	ldw	ra,8(sp)
    3ac4:	dc400117 	ldw	r17,4(sp)
    3ac8:	dc000017 	ldw	r16,0(sp)
    3acc:	dec00304 	addi	sp,sp,12
    3ad0:	f800283a 	ret
    3ad4:	80c00017 	ldw	r3,0(r16)
    3ad8:	183ff926 	beq	r3,zero,3ac0 <__alt_data_end+0xff003ac0>
    3adc:	88c00015 	stw	r3,0(r17)
    3ae0:	003ff706 	br	3ac0 <__alt_data_end+0xff003ac0>

00003ae4 <strlen>:
    3ae4:	208000cc 	andi	r2,r4,3
    3ae8:	10002026 	beq	r2,zero,3b6c <strlen+0x88>
    3aec:	20800007 	ldb	r2,0(r4)
    3af0:	10002026 	beq	r2,zero,3b74 <strlen+0x90>
    3af4:	2005883a 	mov	r2,r4
    3af8:	00000206 	br	3b04 <strlen+0x20>
    3afc:	10c00007 	ldb	r3,0(r2)
    3b00:	18001826 	beq	r3,zero,3b64 <strlen+0x80>
    3b04:	10800044 	addi	r2,r2,1
    3b08:	10c000cc 	andi	r3,r2,3
    3b0c:	183ffb1e 	bne	r3,zero,3afc <__alt_data_end+0xff003afc>
    3b10:	10c00017 	ldw	r3,0(r2)
    3b14:	01ffbff4 	movhi	r7,65279
    3b18:	39ffbfc4 	addi	r7,r7,-257
    3b1c:	00ca303a 	nor	r5,zero,r3
    3b20:	01a02074 	movhi	r6,32897
    3b24:	19c7883a 	add	r3,r3,r7
    3b28:	31a02004 	addi	r6,r6,-32640
    3b2c:	1946703a 	and	r3,r3,r5
    3b30:	1986703a 	and	r3,r3,r6
    3b34:	1800091e 	bne	r3,zero,3b5c <strlen+0x78>
    3b38:	10800104 	addi	r2,r2,4
    3b3c:	10c00017 	ldw	r3,0(r2)
    3b40:	19cb883a 	add	r5,r3,r7
    3b44:	00c6303a 	nor	r3,zero,r3
    3b48:	28c6703a 	and	r3,r5,r3
    3b4c:	1986703a 	and	r3,r3,r6
    3b50:	183ff926 	beq	r3,zero,3b38 <__alt_data_end+0xff003b38>
    3b54:	00000106 	br	3b5c <strlen+0x78>
    3b58:	10800044 	addi	r2,r2,1
    3b5c:	10c00007 	ldb	r3,0(r2)
    3b60:	183ffd1e 	bne	r3,zero,3b58 <__alt_data_end+0xff003b58>
    3b64:	1105c83a 	sub	r2,r2,r4
    3b68:	f800283a 	ret
    3b6c:	2005883a 	mov	r2,r4
    3b70:	003fe706 	br	3b10 <__alt_data_end+0xff003b10>
    3b74:	0005883a 	mov	r2,zero
    3b78:	f800283a 	ret

00003b7c <___vfprintf_internal_r>:
    3b7c:	deffb804 	addi	sp,sp,-288
    3b80:	dfc04715 	stw	ra,284(sp)
    3b84:	ddc04515 	stw	r23,276(sp)
    3b88:	dd404315 	stw	r21,268(sp)
    3b8c:	d9002c15 	stw	r4,176(sp)
    3b90:	282f883a 	mov	r23,r5
    3b94:	302b883a 	mov	r21,r6
    3b98:	d9c02d15 	stw	r7,180(sp)
    3b9c:	df004615 	stw	fp,280(sp)
    3ba0:	dd804415 	stw	r22,272(sp)
    3ba4:	dd004215 	stw	r20,264(sp)
    3ba8:	dcc04115 	stw	r19,260(sp)
    3bac:	dc804015 	stw	r18,256(sp)
    3bb0:	dc403f15 	stw	r17,252(sp)
    3bb4:	dc003e15 	stw	r16,248(sp)
    3bb8:	00089940 	call	8994 <_localeconv_r>
    3bbc:	10800017 	ldw	r2,0(r2)
    3bc0:	1009883a 	mov	r4,r2
    3bc4:	d8803415 	stw	r2,208(sp)
    3bc8:	0003ae40 	call	3ae4 <strlen>
    3bcc:	d8803715 	stw	r2,220(sp)
    3bd0:	d8802c17 	ldw	r2,176(sp)
    3bd4:	10000226 	beq	r2,zero,3be0 <___vfprintf_internal_r+0x64>
    3bd8:	10800e17 	ldw	r2,56(r2)
    3bdc:	1000f926 	beq	r2,zero,3fc4 <___vfprintf_internal_r+0x448>
    3be0:	b880030b 	ldhu	r2,12(r23)
    3be4:	10c8000c 	andi	r3,r2,8192
    3be8:	1800061e 	bne	r3,zero,3c04 <___vfprintf_internal_r+0x88>
    3bec:	b9001917 	ldw	r4,100(r23)
    3bf0:	00f7ffc4 	movi	r3,-8193
    3bf4:	10880014 	ori	r2,r2,8192
    3bf8:	20c6703a 	and	r3,r4,r3
    3bfc:	b880030d 	sth	r2,12(r23)
    3c00:	b8c01915 	stw	r3,100(r23)
    3c04:	10c0020c 	andi	r3,r2,8
    3c08:	1800c126 	beq	r3,zero,3f10 <___vfprintf_internal_r+0x394>
    3c0c:	b8c00417 	ldw	r3,16(r23)
    3c10:	1800bf26 	beq	r3,zero,3f10 <___vfprintf_internal_r+0x394>
    3c14:	1080068c 	andi	r2,r2,26
    3c18:	00c00284 	movi	r3,10
    3c1c:	10c0c426 	beq	r2,r3,3f30 <___vfprintf_internal_r+0x3b4>
    3c20:	d8c00404 	addi	r3,sp,16
    3c24:	05000074 	movhi	r20,1
    3c28:	d9001e04 	addi	r4,sp,120
    3c2c:	a5087384 	addi	r20,r20,8654
    3c30:	d8c01e15 	stw	r3,120(sp)
    3c34:	d8002015 	stw	zero,128(sp)
    3c38:	d8001f15 	stw	zero,124(sp)
    3c3c:	d8003315 	stw	zero,204(sp)
    3c40:	d8003615 	stw	zero,216(sp)
    3c44:	d8003815 	stw	zero,224(sp)
    3c48:	1811883a 	mov	r8,r3
    3c4c:	d8003915 	stw	zero,228(sp)
    3c50:	d8003a15 	stw	zero,232(sp)
    3c54:	d8002f15 	stw	zero,188(sp)
    3c58:	d9002815 	stw	r4,160(sp)
    3c5c:	a8800007 	ldb	r2,0(r21)
    3c60:	10027b26 	beq	r2,zero,4650 <___vfprintf_internal_r+0xad4>
    3c64:	00c00944 	movi	r3,37
    3c68:	a821883a 	mov	r16,r21
    3c6c:	10c0021e 	bne	r2,r3,3c78 <___vfprintf_internal_r+0xfc>
    3c70:	00001406 	br	3cc4 <___vfprintf_internal_r+0x148>
    3c74:	10c00326 	beq	r2,r3,3c84 <___vfprintf_internal_r+0x108>
    3c78:	84000044 	addi	r16,r16,1
    3c7c:	80800007 	ldb	r2,0(r16)
    3c80:	103ffc1e 	bne	r2,zero,3c74 <__alt_data_end+0xff003c74>
    3c84:	8563c83a 	sub	r17,r16,r21
    3c88:	88000e26 	beq	r17,zero,3cc4 <___vfprintf_internal_r+0x148>
    3c8c:	d8c02017 	ldw	r3,128(sp)
    3c90:	d8801f17 	ldw	r2,124(sp)
    3c94:	45400015 	stw	r21,0(r8)
    3c98:	1c47883a 	add	r3,r3,r17
    3c9c:	10800044 	addi	r2,r2,1
    3ca0:	d8c02015 	stw	r3,128(sp)
    3ca4:	44400115 	stw	r17,4(r8)
    3ca8:	d8801f15 	stw	r2,124(sp)
    3cac:	00c001c4 	movi	r3,7
    3cb0:	1880a716 	blt	r3,r2,3f50 <___vfprintf_internal_r+0x3d4>
    3cb4:	42000204 	addi	r8,r8,8
    3cb8:	d9402f17 	ldw	r5,188(sp)
    3cbc:	2c4b883a 	add	r5,r5,r17
    3cc0:	d9402f15 	stw	r5,188(sp)
    3cc4:	80800007 	ldb	r2,0(r16)
    3cc8:	1000a826 	beq	r2,zero,3f6c <___vfprintf_internal_r+0x3f0>
    3ccc:	84400047 	ldb	r17,1(r16)
    3cd0:	00bfffc4 	movi	r2,-1
    3cd4:	85400044 	addi	r21,r16,1
    3cd8:	d8002785 	stb	zero,158(sp)
    3cdc:	0007883a 	mov	r3,zero
    3ce0:	000f883a 	mov	r7,zero
    3ce4:	d8802915 	stw	r2,164(sp)
    3ce8:	d8003115 	stw	zero,196(sp)
    3cec:	0025883a 	mov	r18,zero
    3cf0:	01401604 	movi	r5,88
    3cf4:	01800244 	movi	r6,9
    3cf8:	02800a84 	movi	r10,42
    3cfc:	02401b04 	movi	r9,108
    3d00:	ad400044 	addi	r21,r21,1
    3d04:	88bff804 	addi	r2,r17,-32
    3d08:	28830436 	bltu	r5,r2,491c <___vfprintf_internal_r+0xda0>
    3d0c:	100490ba 	slli	r2,r2,2
    3d10:	01000034 	movhi	r4,0
    3d14:	210f4904 	addi	r4,r4,15652
    3d18:	1105883a 	add	r2,r2,r4
    3d1c:	10800017 	ldw	r2,0(r2)
    3d20:	1000683a 	jmp	r2
    3d24:	0000483c 	xorhi	zero,zero,288
    3d28:	0000491c 	xori	zero,zero,292
    3d2c:	0000491c 	xori	zero,zero,292
    3d30:	0000485c 	xori	zero,zero,289
    3d34:	0000491c 	xori	zero,zero,292
    3d38:	0000491c 	xori	zero,zero,292
    3d3c:	0000491c 	xori	zero,zero,292
    3d40:	0000491c 	xori	zero,zero,292
    3d44:	0000491c 	xori	zero,zero,292
    3d48:	0000491c 	xori	zero,zero,292
    3d4c:	00003fd0 	cmplti	zero,zero,255
    3d50:	00004778 	rdprs	zero,zero,285
    3d54:	0000491c 	xori	zero,zero,292
    3d58:	00003e98 	cmpnei	zero,zero,250
    3d5c:	00003ff8 	rdprs	zero,zero,255
    3d60:	0000491c 	xori	zero,zero,292
    3d64:	00004038 	rdprs	zero,zero,256
    3d68:	00004044 	movi	zero,257
    3d6c:	00004044 	movi	zero,257
    3d70:	00004044 	movi	zero,257
    3d74:	00004044 	movi	zero,257
    3d78:	00004044 	movi	zero,257
    3d7c:	00004044 	movi	zero,257
    3d80:	00004044 	movi	zero,257
    3d84:	00004044 	movi	zero,257
    3d88:	00004044 	movi	zero,257
    3d8c:	0000491c 	xori	zero,zero,292
    3d90:	0000491c 	xori	zero,zero,292
    3d94:	0000491c 	xori	zero,zero,292
    3d98:	0000491c 	xori	zero,zero,292
    3d9c:	0000491c 	xori	zero,zero,292
    3da0:	0000491c 	xori	zero,zero,292
    3da4:	0000491c 	xori	zero,zero,292
    3da8:	0000491c 	xori	zero,zero,292
    3dac:	0000491c 	xori	zero,zero,292
    3db0:	0000491c 	xori	zero,zero,292
    3db4:	00004078 	rdprs	zero,zero,257
    3db8:	00004134 	movhi	zero,260
    3dbc:	0000491c 	xori	zero,zero,292
    3dc0:	00004134 	movhi	zero,260
    3dc4:	0000491c 	xori	zero,zero,292
    3dc8:	0000491c 	xori	zero,zero,292
    3dcc:	0000491c 	xori	zero,zero,292
    3dd0:	0000491c 	xori	zero,zero,292
    3dd4:	000041d4 	movui	zero,263
    3dd8:	0000491c 	xori	zero,zero,292
    3ddc:	0000491c 	xori	zero,zero,292
    3de0:	000041e0 	cmpeqi	zero,zero,263
    3de4:	0000491c 	xori	zero,zero,292
    3de8:	0000491c 	xori	zero,zero,292
    3dec:	0000491c 	xori	zero,zero,292
    3df0:	0000491c 	xori	zero,zero,292
    3df4:	0000491c 	xori	zero,zero,292
    3df8:	00004658 	cmpnei	zero,zero,281
    3dfc:	0000491c 	xori	zero,zero,292
    3e00:	0000491c 	xori	zero,zero,292
    3e04:	000046b8 	rdprs	zero,zero,282
    3e08:	0000491c 	xori	zero,zero,292
    3e0c:	0000491c 	xori	zero,zero,292
    3e10:	0000491c 	xori	zero,zero,292
    3e14:	0000491c 	xori	zero,zero,292
    3e18:	0000491c 	xori	zero,zero,292
    3e1c:	0000491c 	xori	zero,zero,292
    3e20:	0000491c 	xori	zero,zero,292
    3e24:	0000491c 	xori	zero,zero,292
    3e28:	0000491c 	xori	zero,zero,292
    3e2c:	0000491c 	xori	zero,zero,292
    3e30:	000048c8 	cmpgei	zero,zero,291
    3e34:	00004868 	cmpgeui	zero,zero,289
    3e38:	00004134 	movhi	zero,260
    3e3c:	00004134 	movhi	zero,260
    3e40:	00004134 	movhi	zero,260
    3e44:	00004878 	rdprs	zero,zero,289
    3e48:	00004868 	cmpgeui	zero,zero,289
    3e4c:	0000491c 	xori	zero,zero,292
    3e50:	0000491c 	xori	zero,zero,292
    3e54:	00004884 	movi	zero,290
    3e58:	0000491c 	xori	zero,zero,292
    3e5c:	00004894 	movui	zero,290
    3e60:	00004768 	cmpgeui	zero,zero,285
    3e64:	00003ea4 	muli	zero,zero,250
    3e68:	00004788 	cmpgei	zero,zero,286
    3e6c:	0000491c 	xori	zero,zero,292
    3e70:	00004794 	movui	zero,286
    3e74:	0000491c 	xori	zero,zero,292
    3e78:	000047f0 	cmpltui	zero,zero,287
    3e7c:	0000491c 	xori	zero,zero,292
    3e80:	0000491c 	xori	zero,zero,292
    3e84:	00004800 	call	480 <init_camera+0x1f0>
    3e88:	d9003117 	ldw	r4,196(sp)
    3e8c:	d8802d15 	stw	r2,180(sp)
    3e90:	0109c83a 	sub	r4,zero,r4
    3e94:	d9003115 	stw	r4,196(sp)
    3e98:	94800114 	ori	r18,r18,4
    3e9c:	ac400007 	ldb	r17,0(r21)
    3ea0:	003f9706 	br	3d00 <__alt_data_end+0xff003d00>
    3ea4:	00800c04 	movi	r2,48
    3ea8:	d9002d17 	ldw	r4,180(sp)
    3eac:	d9402917 	ldw	r5,164(sp)
    3eb0:	d8802705 	stb	r2,156(sp)
    3eb4:	00801e04 	movi	r2,120
    3eb8:	d8802745 	stb	r2,157(sp)
    3ebc:	d8002785 	stb	zero,158(sp)
    3ec0:	20c00104 	addi	r3,r4,4
    3ec4:	24c00017 	ldw	r19,0(r4)
    3ec8:	002d883a 	mov	r22,zero
    3ecc:	90800094 	ori	r2,r18,2
    3ed0:	28029a16 	blt	r5,zero,493c <___vfprintf_internal_r+0xdc0>
    3ed4:	00bfdfc4 	movi	r2,-129
    3ed8:	90a4703a 	and	r18,r18,r2
    3edc:	d8c02d15 	stw	r3,180(sp)
    3ee0:	94800094 	ori	r18,r18,2
    3ee4:	9802871e 	bne	r19,zero,4904 <___vfprintf_internal_r+0xd88>
    3ee8:	00800074 	movhi	r2,1
    3eec:	10886c04 	addi	r2,r2,8624
    3ef0:	d8803915 	stw	r2,228(sp)
    3ef4:	04401e04 	movi	r17,120
    3ef8:	d8802917 	ldw	r2,164(sp)
    3efc:	0039883a 	mov	fp,zero
    3f00:	1001e926 	beq	r2,zero,46a8 <___vfprintf_internal_r+0xb2c>
    3f04:	0027883a 	mov	r19,zero
    3f08:	002d883a 	mov	r22,zero
    3f0c:	00020506 	br	4724 <___vfprintf_internal_r+0xba8>
    3f10:	d9002c17 	ldw	r4,176(sp)
    3f14:	b80b883a 	mov	r5,r23
    3f18:	0005e4c0 	call	5e4c <__swsetup_r>
    3f1c:	1005ac1e 	bne	r2,zero,55d0 <___vfprintf_internal_r+0x1a54>
    3f20:	b880030b 	ldhu	r2,12(r23)
    3f24:	00c00284 	movi	r3,10
    3f28:	1080068c 	andi	r2,r2,26
    3f2c:	10ff3c1e 	bne	r2,r3,3c20 <__alt_data_end+0xff003c20>
    3f30:	b880038f 	ldh	r2,14(r23)
    3f34:	103f3a16 	blt	r2,zero,3c20 <__alt_data_end+0xff003c20>
    3f38:	d9c02d17 	ldw	r7,180(sp)
    3f3c:	d9002c17 	ldw	r4,176(sp)
    3f40:	a80d883a 	mov	r6,r21
    3f44:	b80b883a 	mov	r5,r23
    3f48:	0005d900 	call	5d90 <__sbprintf>
    3f4c:	00001106 	br	3f94 <___vfprintf_internal_r+0x418>
    3f50:	d9002c17 	ldw	r4,176(sp)
    3f54:	d9801e04 	addi	r6,sp,120
    3f58:	b80b883a 	mov	r5,r23
    3f5c:	000a9180 	call	a918 <__sprint_r>
    3f60:	1000081e 	bne	r2,zero,3f84 <___vfprintf_internal_r+0x408>
    3f64:	da000404 	addi	r8,sp,16
    3f68:	003f5306 	br	3cb8 <__alt_data_end+0xff003cb8>
    3f6c:	d8802017 	ldw	r2,128(sp)
    3f70:	10000426 	beq	r2,zero,3f84 <___vfprintf_internal_r+0x408>
    3f74:	d9002c17 	ldw	r4,176(sp)
    3f78:	d9801e04 	addi	r6,sp,120
    3f7c:	b80b883a 	mov	r5,r23
    3f80:	000a9180 	call	a918 <__sprint_r>
    3f84:	b880030b 	ldhu	r2,12(r23)
    3f88:	1080100c 	andi	r2,r2,64
    3f8c:	1005901e 	bne	r2,zero,55d0 <___vfprintf_internal_r+0x1a54>
    3f90:	d8802f17 	ldw	r2,188(sp)
    3f94:	dfc04717 	ldw	ra,284(sp)
    3f98:	df004617 	ldw	fp,280(sp)
    3f9c:	ddc04517 	ldw	r23,276(sp)
    3fa0:	dd804417 	ldw	r22,272(sp)
    3fa4:	dd404317 	ldw	r21,268(sp)
    3fa8:	dd004217 	ldw	r20,264(sp)
    3fac:	dcc04117 	ldw	r19,260(sp)
    3fb0:	dc804017 	ldw	r18,256(sp)
    3fb4:	dc403f17 	ldw	r17,252(sp)
    3fb8:	dc003e17 	ldw	r16,248(sp)
    3fbc:	dec04804 	addi	sp,sp,288
    3fc0:	f800283a 	ret
    3fc4:	d9002c17 	ldw	r4,176(sp)
    3fc8:	0007e200 	call	7e20 <__sinit>
    3fcc:	003f0406 	br	3be0 <__alt_data_end+0xff003be0>
    3fd0:	d8802d17 	ldw	r2,180(sp)
    3fd4:	d9002d17 	ldw	r4,180(sp)
    3fd8:	10800017 	ldw	r2,0(r2)
    3fdc:	d8803115 	stw	r2,196(sp)
    3fe0:	20800104 	addi	r2,r4,4
    3fe4:	d9003117 	ldw	r4,196(sp)
    3fe8:	203fa716 	blt	r4,zero,3e88 <__alt_data_end+0xff003e88>
    3fec:	d8802d15 	stw	r2,180(sp)
    3ff0:	ac400007 	ldb	r17,0(r21)
    3ff4:	003f4206 	br	3d00 <__alt_data_end+0xff003d00>
    3ff8:	ac400007 	ldb	r17,0(r21)
    3ffc:	aac00044 	addi	r11,r21,1
    4000:	8a872826 	beq	r17,r10,5ca4 <___vfprintf_internal_r+0x2128>
    4004:	88bff404 	addi	r2,r17,-48
    4008:	0009883a 	mov	r4,zero
    400c:	30867d36 	bltu	r6,r2,5a04 <___vfprintf_internal_r+0x1e88>
    4010:	5c400007 	ldb	r17,0(r11)
    4014:	210002a4 	muli	r4,r4,10
    4018:	5d400044 	addi	r21,r11,1
    401c:	a817883a 	mov	r11,r21
    4020:	2089883a 	add	r4,r4,r2
    4024:	88bff404 	addi	r2,r17,-48
    4028:	30bff92e 	bgeu	r6,r2,4010 <__alt_data_end+0xff004010>
    402c:	2005c916 	blt	r4,zero,5754 <___vfprintf_internal_r+0x1bd8>
    4030:	d9002915 	stw	r4,164(sp)
    4034:	003f3306 	br	3d04 <__alt_data_end+0xff003d04>
    4038:	94802014 	ori	r18,r18,128
    403c:	ac400007 	ldb	r17,0(r21)
    4040:	003f2f06 	br	3d00 <__alt_data_end+0xff003d00>
    4044:	a809883a 	mov	r4,r21
    4048:	d8003115 	stw	zero,196(sp)
    404c:	88bff404 	addi	r2,r17,-48
    4050:	0017883a 	mov	r11,zero
    4054:	24400007 	ldb	r17,0(r4)
    4058:	5ac002a4 	muli	r11,r11,10
    405c:	ad400044 	addi	r21,r21,1
    4060:	a809883a 	mov	r4,r21
    4064:	12d7883a 	add	r11,r2,r11
    4068:	88bff404 	addi	r2,r17,-48
    406c:	30bff92e 	bgeu	r6,r2,4054 <__alt_data_end+0xff004054>
    4070:	dac03115 	stw	r11,196(sp)
    4074:	003f2306 	br	3d04 <__alt_data_end+0xff003d04>
    4078:	18c03fcc 	andi	r3,r3,255
    407c:	18072b1e 	bne	r3,zero,5d2c <___vfprintf_internal_r+0x21b0>
    4080:	94800414 	ori	r18,r18,16
    4084:	9080080c 	andi	r2,r18,32
    4088:	10037b26 	beq	r2,zero,4e78 <___vfprintf_internal_r+0x12fc>
    408c:	d9402d17 	ldw	r5,180(sp)
    4090:	28800117 	ldw	r2,4(r5)
    4094:	2cc00017 	ldw	r19,0(r5)
    4098:	29400204 	addi	r5,r5,8
    409c:	d9402d15 	stw	r5,180(sp)
    40a0:	102d883a 	mov	r22,r2
    40a4:	10044b16 	blt	r2,zero,51d4 <___vfprintf_internal_r+0x1658>
    40a8:	d9402917 	ldw	r5,164(sp)
    40ac:	df002783 	ldbu	fp,158(sp)
    40b0:	2803bc16 	blt	r5,zero,4fa4 <___vfprintf_internal_r+0x1428>
    40b4:	00ffdfc4 	movi	r3,-129
    40b8:	9d84b03a 	or	r2,r19,r22
    40bc:	90e4703a 	and	r18,r18,r3
    40c0:	10017726 	beq	r2,zero,46a0 <___vfprintf_internal_r+0xb24>
    40c4:	b0038326 	beq	r22,zero,4ed4 <___vfprintf_internal_r+0x1358>
    40c8:	dc402a15 	stw	r17,168(sp)
    40cc:	dc001e04 	addi	r16,sp,120
    40d0:	b023883a 	mov	r17,r22
    40d4:	402d883a 	mov	r22,r8
    40d8:	9809883a 	mov	r4,r19
    40dc:	880b883a 	mov	r5,r17
    40e0:	01800284 	movi	r6,10
    40e4:	000f883a 	mov	r7,zero
    40e8:	000cd100 	call	cd10 <__umoddi3>
    40ec:	10800c04 	addi	r2,r2,48
    40f0:	843fffc4 	addi	r16,r16,-1
    40f4:	9809883a 	mov	r4,r19
    40f8:	880b883a 	mov	r5,r17
    40fc:	80800005 	stb	r2,0(r16)
    4100:	01800284 	movi	r6,10
    4104:	000f883a 	mov	r7,zero
    4108:	000c7980 	call	c798 <__udivdi3>
    410c:	1027883a 	mov	r19,r2
    4110:	10c4b03a 	or	r2,r2,r3
    4114:	1823883a 	mov	r17,r3
    4118:	103fef1e 	bne	r2,zero,40d8 <__alt_data_end+0xff0040d8>
    411c:	d8c02817 	ldw	r3,160(sp)
    4120:	dc402a17 	ldw	r17,168(sp)
    4124:	b011883a 	mov	r8,r22
    4128:	1c07c83a 	sub	r3,r3,r16
    412c:	d8c02e15 	stw	r3,184(sp)
    4130:	00005906 	br	4298 <___vfprintf_internal_r+0x71c>
    4134:	18c03fcc 	andi	r3,r3,255
    4138:	1806fa1e 	bne	r3,zero,5d24 <___vfprintf_internal_r+0x21a8>
    413c:	9080020c 	andi	r2,r18,8
    4140:	10048a26 	beq	r2,zero,536c <___vfprintf_internal_r+0x17f0>
    4144:	d8c02d17 	ldw	r3,180(sp)
    4148:	d9002d17 	ldw	r4,180(sp)
    414c:	d9402d17 	ldw	r5,180(sp)
    4150:	18c00017 	ldw	r3,0(r3)
    4154:	21000117 	ldw	r4,4(r4)
    4158:	29400204 	addi	r5,r5,8
    415c:	d8c03615 	stw	r3,216(sp)
    4160:	d9003815 	stw	r4,224(sp)
    4164:	d9402d15 	stw	r5,180(sp)
    4168:	d9003617 	ldw	r4,216(sp)
    416c:	d9403817 	ldw	r5,224(sp)
    4170:	da003d15 	stw	r8,244(sp)
    4174:	04000044 	movi	r16,1
    4178:	000a5900 	call	a590 <__fpclassifyd>
    417c:	da003d17 	ldw	r8,244(sp)
    4180:	14041f1e 	bne	r2,r16,5200 <___vfprintf_internal_r+0x1684>
    4184:	d9003617 	ldw	r4,216(sp)
    4188:	d9403817 	ldw	r5,224(sp)
    418c:	000d883a 	mov	r6,zero
    4190:	000f883a 	mov	r7,zero
    4194:	000dc580 	call	dc58 <__ledf2>
    4198:	da003d17 	ldw	r8,244(sp)
    419c:	1005be16 	blt	r2,zero,5898 <___vfprintf_internal_r+0x1d1c>
    41a0:	df002783 	ldbu	fp,158(sp)
    41a4:	008011c4 	movi	r2,71
    41a8:	1445330e 	bge	r2,r17,5678 <___vfprintf_internal_r+0x1afc>
    41ac:	04000074 	movhi	r16,1
    41b0:	84086404 	addi	r16,r16,8592
    41b4:	00c000c4 	movi	r3,3
    41b8:	00bfdfc4 	movi	r2,-129
    41bc:	d8c02a15 	stw	r3,168(sp)
    41c0:	90a4703a 	and	r18,r18,r2
    41c4:	d8c02e15 	stw	r3,184(sp)
    41c8:	d8002915 	stw	zero,164(sp)
    41cc:	d8003215 	stw	zero,200(sp)
    41d0:	00003706 	br	42b0 <___vfprintf_internal_r+0x734>
    41d4:	94800214 	ori	r18,r18,8
    41d8:	ac400007 	ldb	r17,0(r21)
    41dc:	003ec806 	br	3d00 <__alt_data_end+0xff003d00>
    41e0:	18c03fcc 	andi	r3,r3,255
    41e4:	1806db1e 	bne	r3,zero,5d54 <___vfprintf_internal_r+0x21d8>
    41e8:	94800414 	ori	r18,r18,16
    41ec:	9080080c 	andi	r2,r18,32
    41f0:	1002d826 	beq	r2,zero,4d54 <___vfprintf_internal_r+0x11d8>
    41f4:	d9402d17 	ldw	r5,180(sp)
    41f8:	d8c02917 	ldw	r3,164(sp)
    41fc:	d8002785 	stb	zero,158(sp)
    4200:	28800204 	addi	r2,r5,8
    4204:	2cc00017 	ldw	r19,0(r5)
    4208:	2d800117 	ldw	r22,4(r5)
    420c:	18048f16 	blt	r3,zero,544c <___vfprintf_internal_r+0x18d0>
    4210:	013fdfc4 	movi	r4,-129
    4214:	9d86b03a 	or	r3,r19,r22
    4218:	d8802d15 	stw	r2,180(sp)
    421c:	9124703a 	and	r18,r18,r4
    4220:	1802d91e 	bne	r3,zero,4d88 <___vfprintf_internal_r+0x120c>
    4224:	d8c02917 	ldw	r3,164(sp)
    4228:	0039883a 	mov	fp,zero
    422c:	1805c326 	beq	r3,zero,593c <___vfprintf_internal_r+0x1dc0>
    4230:	0027883a 	mov	r19,zero
    4234:	002d883a 	mov	r22,zero
    4238:	dc001e04 	addi	r16,sp,120
    423c:	9806d0fa 	srli	r3,r19,3
    4240:	b008977a 	slli	r4,r22,29
    4244:	b02cd0fa 	srli	r22,r22,3
    4248:	9cc001cc 	andi	r19,r19,7
    424c:	98800c04 	addi	r2,r19,48
    4250:	843fffc4 	addi	r16,r16,-1
    4254:	20e6b03a 	or	r19,r4,r3
    4258:	80800005 	stb	r2,0(r16)
    425c:	9d86b03a 	or	r3,r19,r22
    4260:	183ff61e 	bne	r3,zero,423c <__alt_data_end+0xff00423c>
    4264:	90c0004c 	andi	r3,r18,1
    4268:	18013b26 	beq	r3,zero,4758 <___vfprintf_internal_r+0xbdc>
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1080201c 	xori	r2,r2,128
    4274:	10bfe004 	addi	r2,r2,-128
    4278:	00c00c04 	movi	r3,48
    427c:	10c13626 	beq	r2,r3,4758 <___vfprintf_internal_r+0xbdc>
    4280:	80ffffc5 	stb	r3,-1(r16)
    4284:	d8c02817 	ldw	r3,160(sp)
    4288:	80bfffc4 	addi	r2,r16,-1
    428c:	1021883a 	mov	r16,r2
    4290:	1887c83a 	sub	r3,r3,r2
    4294:	d8c02e15 	stw	r3,184(sp)
    4298:	d8802e17 	ldw	r2,184(sp)
    429c:	d9002917 	ldw	r4,164(sp)
    42a0:	1100010e 	bge	r2,r4,42a8 <___vfprintf_internal_r+0x72c>
    42a4:	2005883a 	mov	r2,r4
    42a8:	d8802a15 	stw	r2,168(sp)
    42ac:	d8003215 	stw	zero,200(sp)
    42b0:	e7003fcc 	andi	fp,fp,255
    42b4:	e700201c 	xori	fp,fp,128
    42b8:	e73fe004 	addi	fp,fp,-128
    42bc:	e0000326 	beq	fp,zero,42cc <___vfprintf_internal_r+0x750>
    42c0:	d8c02a17 	ldw	r3,168(sp)
    42c4:	18c00044 	addi	r3,r3,1
    42c8:	d8c02a15 	stw	r3,168(sp)
    42cc:	90c0008c 	andi	r3,r18,2
    42d0:	d8c02b15 	stw	r3,172(sp)
    42d4:	18000326 	beq	r3,zero,42e4 <___vfprintf_internal_r+0x768>
    42d8:	d8c02a17 	ldw	r3,168(sp)
    42dc:	18c00084 	addi	r3,r3,2
    42e0:	d8c02a15 	stw	r3,168(sp)
    42e4:	90c0210c 	andi	r3,r18,132
    42e8:	d8c03015 	stw	r3,192(sp)
    42ec:	1801a31e 	bne	r3,zero,497c <___vfprintf_internal_r+0xe00>
    42f0:	d9003117 	ldw	r4,196(sp)
    42f4:	d8c02a17 	ldw	r3,168(sp)
    42f8:	20e7c83a 	sub	r19,r4,r3
    42fc:	04c19f0e 	bge	zero,r19,497c <___vfprintf_internal_r+0xe00>
    4300:	02400404 	movi	r9,16
    4304:	d8c02017 	ldw	r3,128(sp)
    4308:	d8801f17 	ldw	r2,124(sp)
    430c:	4cc50d0e 	bge	r9,r19,5744 <___vfprintf_internal_r+0x1bc8>
    4310:	01400074 	movhi	r5,1
    4314:	29487784 	addi	r5,r5,8670
    4318:	dc403b15 	stw	r17,236(sp)
    431c:	d9403515 	stw	r5,212(sp)
    4320:	9823883a 	mov	r17,r19
    4324:	482d883a 	mov	r22,r9
    4328:	9027883a 	mov	r19,r18
    432c:	070001c4 	movi	fp,7
    4330:	8025883a 	mov	r18,r16
    4334:	dc002c17 	ldw	r16,176(sp)
    4338:	00000306 	br	4348 <___vfprintf_internal_r+0x7cc>
    433c:	8c7ffc04 	addi	r17,r17,-16
    4340:	42000204 	addi	r8,r8,8
    4344:	b440130e 	bge	r22,r17,4394 <___vfprintf_internal_r+0x818>
    4348:	01000074 	movhi	r4,1
    434c:	18c00404 	addi	r3,r3,16
    4350:	10800044 	addi	r2,r2,1
    4354:	21087784 	addi	r4,r4,8670
    4358:	41000015 	stw	r4,0(r8)
    435c:	45800115 	stw	r22,4(r8)
    4360:	d8c02015 	stw	r3,128(sp)
    4364:	d8801f15 	stw	r2,124(sp)
    4368:	e0bff40e 	bge	fp,r2,433c <__alt_data_end+0xff00433c>
    436c:	d9801e04 	addi	r6,sp,120
    4370:	b80b883a 	mov	r5,r23
    4374:	8009883a 	mov	r4,r16
    4378:	000a9180 	call	a918 <__sprint_r>
    437c:	103f011e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4380:	8c7ffc04 	addi	r17,r17,-16
    4384:	d8c02017 	ldw	r3,128(sp)
    4388:	d8801f17 	ldw	r2,124(sp)
    438c:	da000404 	addi	r8,sp,16
    4390:	b47fed16 	blt	r22,r17,4348 <__alt_data_end+0xff004348>
    4394:	9021883a 	mov	r16,r18
    4398:	9825883a 	mov	r18,r19
    439c:	8827883a 	mov	r19,r17
    43a0:	dc403b17 	ldw	r17,236(sp)
    43a4:	d9403517 	ldw	r5,212(sp)
    43a8:	98c7883a 	add	r3,r19,r3
    43ac:	10800044 	addi	r2,r2,1
    43b0:	41400015 	stw	r5,0(r8)
    43b4:	44c00115 	stw	r19,4(r8)
    43b8:	d8c02015 	stw	r3,128(sp)
    43bc:	d8801f15 	stw	r2,124(sp)
    43c0:	010001c4 	movi	r4,7
    43c4:	2082a316 	blt	r4,r2,4e54 <___vfprintf_internal_r+0x12d8>
    43c8:	df002787 	ldb	fp,158(sp)
    43cc:	42000204 	addi	r8,r8,8
    43d0:	e0000c26 	beq	fp,zero,4404 <___vfprintf_internal_r+0x888>
    43d4:	d8801f17 	ldw	r2,124(sp)
    43d8:	d9002784 	addi	r4,sp,158
    43dc:	18c00044 	addi	r3,r3,1
    43e0:	10800044 	addi	r2,r2,1
    43e4:	41000015 	stw	r4,0(r8)
    43e8:	01000044 	movi	r4,1
    43ec:	41000115 	stw	r4,4(r8)
    43f0:	d8c02015 	stw	r3,128(sp)
    43f4:	d8801f15 	stw	r2,124(sp)
    43f8:	010001c4 	movi	r4,7
    43fc:	20823c16 	blt	r4,r2,4cf0 <___vfprintf_internal_r+0x1174>
    4400:	42000204 	addi	r8,r8,8
    4404:	d8802b17 	ldw	r2,172(sp)
    4408:	10000c26 	beq	r2,zero,443c <___vfprintf_internal_r+0x8c0>
    440c:	d8801f17 	ldw	r2,124(sp)
    4410:	d9002704 	addi	r4,sp,156
    4414:	18c00084 	addi	r3,r3,2
    4418:	10800044 	addi	r2,r2,1
    441c:	41000015 	stw	r4,0(r8)
    4420:	01000084 	movi	r4,2
    4424:	41000115 	stw	r4,4(r8)
    4428:	d8c02015 	stw	r3,128(sp)
    442c:	d8801f15 	stw	r2,124(sp)
    4430:	010001c4 	movi	r4,7
    4434:	20823616 	blt	r4,r2,4d10 <___vfprintf_internal_r+0x1194>
    4438:	42000204 	addi	r8,r8,8
    443c:	d9003017 	ldw	r4,192(sp)
    4440:	00802004 	movi	r2,128
    4444:	20819926 	beq	r4,r2,4aac <___vfprintf_internal_r+0xf30>
    4448:	d9402917 	ldw	r5,164(sp)
    444c:	d8802e17 	ldw	r2,184(sp)
    4450:	28adc83a 	sub	r22,r5,r2
    4454:	0580310e 	bge	zero,r22,451c <___vfprintf_internal_r+0x9a0>
    4458:	07000404 	movi	fp,16
    445c:	d8801f17 	ldw	r2,124(sp)
    4460:	e584140e 	bge	fp,r22,54b4 <___vfprintf_internal_r+0x1938>
    4464:	01400074 	movhi	r5,1
    4468:	29487384 	addi	r5,r5,8654
    446c:	dc402915 	stw	r17,164(sp)
    4470:	d9402b15 	stw	r5,172(sp)
    4474:	b023883a 	mov	r17,r22
    4478:	04c001c4 	movi	r19,7
    447c:	a82d883a 	mov	r22,r21
    4480:	902b883a 	mov	r21,r18
    4484:	8025883a 	mov	r18,r16
    4488:	dc002c17 	ldw	r16,176(sp)
    448c:	00000306 	br	449c <___vfprintf_internal_r+0x920>
    4490:	8c7ffc04 	addi	r17,r17,-16
    4494:	42000204 	addi	r8,r8,8
    4498:	e440110e 	bge	fp,r17,44e0 <___vfprintf_internal_r+0x964>
    449c:	18c00404 	addi	r3,r3,16
    44a0:	10800044 	addi	r2,r2,1
    44a4:	45000015 	stw	r20,0(r8)
    44a8:	47000115 	stw	fp,4(r8)
    44ac:	d8c02015 	stw	r3,128(sp)
    44b0:	d8801f15 	stw	r2,124(sp)
    44b4:	98bff60e 	bge	r19,r2,4490 <__alt_data_end+0xff004490>
    44b8:	d9801e04 	addi	r6,sp,120
    44bc:	b80b883a 	mov	r5,r23
    44c0:	8009883a 	mov	r4,r16
    44c4:	000a9180 	call	a918 <__sprint_r>
    44c8:	103eae1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    44cc:	8c7ffc04 	addi	r17,r17,-16
    44d0:	d8c02017 	ldw	r3,128(sp)
    44d4:	d8801f17 	ldw	r2,124(sp)
    44d8:	da000404 	addi	r8,sp,16
    44dc:	e47fef16 	blt	fp,r17,449c <__alt_data_end+0xff00449c>
    44e0:	9021883a 	mov	r16,r18
    44e4:	a825883a 	mov	r18,r21
    44e8:	b02b883a 	mov	r21,r22
    44ec:	882d883a 	mov	r22,r17
    44f0:	dc402917 	ldw	r17,164(sp)
    44f4:	d9002b17 	ldw	r4,172(sp)
    44f8:	1d87883a 	add	r3,r3,r22
    44fc:	10800044 	addi	r2,r2,1
    4500:	41000015 	stw	r4,0(r8)
    4504:	45800115 	stw	r22,4(r8)
    4508:	d8c02015 	stw	r3,128(sp)
    450c:	d8801f15 	stw	r2,124(sp)
    4510:	010001c4 	movi	r4,7
    4514:	2081ee16 	blt	r4,r2,4cd0 <___vfprintf_internal_r+0x1154>
    4518:	42000204 	addi	r8,r8,8
    451c:	9080400c 	andi	r2,r18,256
    4520:	1001181e 	bne	r2,zero,4984 <___vfprintf_internal_r+0xe08>
    4524:	d9402e17 	ldw	r5,184(sp)
    4528:	d8801f17 	ldw	r2,124(sp)
    452c:	44000015 	stw	r16,0(r8)
    4530:	1947883a 	add	r3,r3,r5
    4534:	10800044 	addi	r2,r2,1
    4538:	41400115 	stw	r5,4(r8)
    453c:	d8c02015 	stw	r3,128(sp)
    4540:	d8801f15 	stw	r2,124(sp)
    4544:	010001c4 	movi	r4,7
    4548:	2081d316 	blt	r4,r2,4c98 <___vfprintf_internal_r+0x111c>
    454c:	42000204 	addi	r8,r8,8
    4550:	9480010c 	andi	r18,r18,4
    4554:	90003226 	beq	r18,zero,4620 <___vfprintf_internal_r+0xaa4>
    4558:	d9403117 	ldw	r5,196(sp)
    455c:	d8802a17 	ldw	r2,168(sp)
    4560:	28a1c83a 	sub	r16,r5,r2
    4564:	04002e0e 	bge	zero,r16,4620 <___vfprintf_internal_r+0xaa4>
    4568:	04400404 	movi	r17,16
    456c:	d8801f17 	ldw	r2,124(sp)
    4570:	8c04a20e 	bge	r17,r16,57fc <___vfprintf_internal_r+0x1c80>
    4574:	01400074 	movhi	r5,1
    4578:	29487784 	addi	r5,r5,8670
    457c:	d9403515 	stw	r5,212(sp)
    4580:	048001c4 	movi	r18,7
    4584:	dcc02c17 	ldw	r19,176(sp)
    4588:	00000306 	br	4598 <___vfprintf_internal_r+0xa1c>
    458c:	843ffc04 	addi	r16,r16,-16
    4590:	42000204 	addi	r8,r8,8
    4594:	8c00130e 	bge	r17,r16,45e4 <___vfprintf_internal_r+0xa68>
    4598:	01000074 	movhi	r4,1
    459c:	18c00404 	addi	r3,r3,16
    45a0:	10800044 	addi	r2,r2,1
    45a4:	21087784 	addi	r4,r4,8670
    45a8:	41000015 	stw	r4,0(r8)
    45ac:	44400115 	stw	r17,4(r8)
    45b0:	d8c02015 	stw	r3,128(sp)
    45b4:	d8801f15 	stw	r2,124(sp)
    45b8:	90bff40e 	bge	r18,r2,458c <__alt_data_end+0xff00458c>
    45bc:	d9801e04 	addi	r6,sp,120
    45c0:	b80b883a 	mov	r5,r23
    45c4:	9809883a 	mov	r4,r19
    45c8:	000a9180 	call	a918 <__sprint_r>
    45cc:	103e6d1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    45d0:	843ffc04 	addi	r16,r16,-16
    45d4:	d8c02017 	ldw	r3,128(sp)
    45d8:	d8801f17 	ldw	r2,124(sp)
    45dc:	da000404 	addi	r8,sp,16
    45e0:	8c3fed16 	blt	r17,r16,4598 <__alt_data_end+0xff004598>
    45e4:	d9403517 	ldw	r5,212(sp)
    45e8:	1c07883a 	add	r3,r3,r16
    45ec:	10800044 	addi	r2,r2,1
    45f0:	41400015 	stw	r5,0(r8)
    45f4:	44000115 	stw	r16,4(r8)
    45f8:	d8c02015 	stw	r3,128(sp)
    45fc:	d8801f15 	stw	r2,124(sp)
    4600:	010001c4 	movi	r4,7
    4604:	2080060e 	bge	r4,r2,4620 <___vfprintf_internal_r+0xaa4>
    4608:	d9002c17 	ldw	r4,176(sp)
    460c:	d9801e04 	addi	r6,sp,120
    4610:	b80b883a 	mov	r5,r23
    4614:	000a9180 	call	a918 <__sprint_r>
    4618:	103e5a1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    461c:	d8c02017 	ldw	r3,128(sp)
    4620:	d8803117 	ldw	r2,196(sp)
    4624:	d9002a17 	ldw	r4,168(sp)
    4628:	1100010e 	bge	r2,r4,4630 <___vfprintf_internal_r+0xab4>
    462c:	2005883a 	mov	r2,r4
    4630:	d9402f17 	ldw	r5,188(sp)
    4634:	288b883a 	add	r5,r5,r2
    4638:	d9402f15 	stw	r5,188(sp)
    463c:	18019e1e 	bne	r3,zero,4cb8 <___vfprintf_internal_r+0x113c>
    4640:	a8800007 	ldb	r2,0(r21)
    4644:	d8001f15 	stw	zero,124(sp)
    4648:	da000404 	addi	r8,sp,16
    464c:	103d851e 	bne	r2,zero,3c64 <__alt_data_end+0xff003c64>
    4650:	a821883a 	mov	r16,r21
    4654:	003d9b06 	br	3cc4 <__alt_data_end+0xff003cc4>
    4658:	18c03fcc 	andi	r3,r3,255
    465c:	1805c11e 	bne	r3,zero,5d64 <___vfprintf_internal_r+0x21e8>
    4660:	94800414 	ori	r18,r18,16
    4664:	9080080c 	andi	r2,r18,32
    4668:	10020c26 	beq	r2,zero,4e9c <___vfprintf_internal_r+0x1320>
    466c:	d8802d17 	ldw	r2,180(sp)
    4670:	d9002917 	ldw	r4,164(sp)
    4674:	d8002785 	stb	zero,158(sp)
    4678:	10c00204 	addi	r3,r2,8
    467c:	14c00017 	ldw	r19,0(r2)
    4680:	15800117 	ldw	r22,4(r2)
    4684:	20040f16 	blt	r4,zero,56c4 <___vfprintf_internal_r+0x1b48>
    4688:	013fdfc4 	movi	r4,-129
    468c:	9d84b03a 	or	r2,r19,r22
    4690:	d8c02d15 	stw	r3,180(sp)
    4694:	9124703a 	and	r18,r18,r4
    4698:	0039883a 	mov	fp,zero
    469c:	103e891e 	bne	r2,zero,40c4 <__alt_data_end+0xff0040c4>
    46a0:	d9002917 	ldw	r4,164(sp)
    46a4:	2002c11e 	bne	r4,zero,51ac <___vfprintf_internal_r+0x1630>
    46a8:	d8002915 	stw	zero,164(sp)
    46ac:	d8002e15 	stw	zero,184(sp)
    46b0:	dc001e04 	addi	r16,sp,120
    46b4:	003ef806 	br	4298 <__alt_data_end+0xff004298>
    46b8:	18c03fcc 	andi	r3,r3,255
    46bc:	18059d1e 	bne	r3,zero,5d34 <___vfprintf_internal_r+0x21b8>
    46c0:	01400074 	movhi	r5,1
    46c4:	29486704 	addi	r5,r5,8604
    46c8:	d9403915 	stw	r5,228(sp)
    46cc:	9080080c 	andi	r2,r18,32
    46d0:	10005226 	beq	r2,zero,481c <___vfprintf_internal_r+0xca0>
    46d4:	d8802d17 	ldw	r2,180(sp)
    46d8:	14c00017 	ldw	r19,0(r2)
    46dc:	15800117 	ldw	r22,4(r2)
    46e0:	10800204 	addi	r2,r2,8
    46e4:	d8802d15 	stw	r2,180(sp)
    46e8:	9080004c 	andi	r2,r18,1
    46ec:	10019026 	beq	r2,zero,4d30 <___vfprintf_internal_r+0x11b4>
    46f0:	9d84b03a 	or	r2,r19,r22
    46f4:	10036926 	beq	r2,zero,549c <___vfprintf_internal_r+0x1920>
    46f8:	d8c02917 	ldw	r3,164(sp)
    46fc:	00800c04 	movi	r2,48
    4700:	d8802705 	stb	r2,156(sp)
    4704:	dc402745 	stb	r17,157(sp)
    4708:	d8002785 	stb	zero,158(sp)
    470c:	90800094 	ori	r2,r18,2
    4710:	18045d16 	blt	r3,zero,5888 <___vfprintf_internal_r+0x1d0c>
    4714:	00bfdfc4 	movi	r2,-129
    4718:	90a4703a 	and	r18,r18,r2
    471c:	94800094 	ori	r18,r18,2
    4720:	0039883a 	mov	fp,zero
    4724:	d9003917 	ldw	r4,228(sp)
    4728:	dc001e04 	addi	r16,sp,120
    472c:	988003cc 	andi	r2,r19,15
    4730:	b006973a 	slli	r3,r22,28
    4734:	2085883a 	add	r2,r4,r2
    4738:	9826d13a 	srli	r19,r19,4
    473c:	10800003 	ldbu	r2,0(r2)
    4740:	b02cd13a 	srli	r22,r22,4
    4744:	843fffc4 	addi	r16,r16,-1
    4748:	1ce6b03a 	or	r19,r3,r19
    474c:	80800005 	stb	r2,0(r16)
    4750:	9d84b03a 	or	r2,r19,r22
    4754:	103ff51e 	bne	r2,zero,472c <__alt_data_end+0xff00472c>
    4758:	d8c02817 	ldw	r3,160(sp)
    475c:	1c07c83a 	sub	r3,r3,r16
    4760:	d8c02e15 	stw	r3,184(sp)
    4764:	003ecc06 	br	4298 <__alt_data_end+0xff004298>
    4768:	18c03fcc 	andi	r3,r3,255
    476c:	183e9f26 	beq	r3,zero,41ec <__alt_data_end+0xff0041ec>
    4770:	d9c02785 	stb	r7,158(sp)
    4774:	003e9d06 	br	41ec <__alt_data_end+0xff0041ec>
    4778:	00c00044 	movi	r3,1
    477c:	01c00ac4 	movi	r7,43
    4780:	ac400007 	ldb	r17,0(r21)
    4784:	003d5e06 	br	3d00 <__alt_data_end+0xff003d00>
    4788:	94800814 	ori	r18,r18,32
    478c:	ac400007 	ldb	r17,0(r21)
    4790:	003d5b06 	br	3d00 <__alt_data_end+0xff003d00>
    4794:	d8c02d17 	ldw	r3,180(sp)
    4798:	d8002785 	stb	zero,158(sp)
    479c:	1c000017 	ldw	r16,0(r3)
    47a0:	1cc00104 	addi	r19,r3,4
    47a4:	80041926 	beq	r16,zero,580c <___vfprintf_internal_r+0x1c90>
    47a8:	d9002917 	ldw	r4,164(sp)
    47ac:	2003d016 	blt	r4,zero,56f0 <___vfprintf_internal_r+0x1b74>
    47b0:	200d883a 	mov	r6,r4
    47b4:	000b883a 	mov	r5,zero
    47b8:	8009883a 	mov	r4,r16
    47bc:	da003d15 	stw	r8,244(sp)
    47c0:	0008b800 	call	8b80 <memchr>
    47c4:	da003d17 	ldw	r8,244(sp)
    47c8:	10045426 	beq	r2,zero,591c <___vfprintf_internal_r+0x1da0>
    47cc:	1405c83a 	sub	r2,r2,r16
    47d0:	d8802e15 	stw	r2,184(sp)
    47d4:	1003cc16 	blt	r2,zero,5708 <___vfprintf_internal_r+0x1b8c>
    47d8:	df002783 	ldbu	fp,158(sp)
    47dc:	d8802a15 	stw	r2,168(sp)
    47e0:	dcc02d15 	stw	r19,180(sp)
    47e4:	d8002915 	stw	zero,164(sp)
    47e8:	d8003215 	stw	zero,200(sp)
    47ec:	003eb006 	br	42b0 <__alt_data_end+0xff0042b0>
    47f0:	18c03fcc 	andi	r3,r3,255
    47f4:	183f9b26 	beq	r3,zero,4664 <__alt_data_end+0xff004664>
    47f8:	d9c02785 	stb	r7,158(sp)
    47fc:	003f9906 	br	4664 <__alt_data_end+0xff004664>
    4800:	18c03fcc 	andi	r3,r3,255
    4804:	1805551e 	bne	r3,zero,5d5c <___vfprintf_internal_r+0x21e0>
    4808:	01400074 	movhi	r5,1
    480c:	29486c04 	addi	r5,r5,8624
    4810:	d9403915 	stw	r5,228(sp)
    4814:	9080080c 	andi	r2,r18,32
    4818:	103fae1e 	bne	r2,zero,46d4 <__alt_data_end+0xff0046d4>
    481c:	9080040c 	andi	r2,r18,16
    4820:	1002de26 	beq	r2,zero,539c <___vfprintf_internal_r+0x1820>
    4824:	d8c02d17 	ldw	r3,180(sp)
    4828:	002d883a 	mov	r22,zero
    482c:	1cc00017 	ldw	r19,0(r3)
    4830:	18c00104 	addi	r3,r3,4
    4834:	d8c02d15 	stw	r3,180(sp)
    4838:	003fab06 	br	46e8 <__alt_data_end+0xff0046e8>
    483c:	38803fcc 	andi	r2,r7,255
    4840:	1080201c 	xori	r2,r2,128
    4844:	10bfe004 	addi	r2,r2,-128
    4848:	1002d21e 	bne	r2,zero,5394 <___vfprintf_internal_r+0x1818>
    484c:	00c00044 	movi	r3,1
    4850:	01c00804 	movi	r7,32
    4854:	ac400007 	ldb	r17,0(r21)
    4858:	003d2906 	br	3d00 <__alt_data_end+0xff003d00>
    485c:	94800054 	ori	r18,r18,1
    4860:	ac400007 	ldb	r17,0(r21)
    4864:	003d2606 	br	3d00 <__alt_data_end+0xff003d00>
    4868:	18c03fcc 	andi	r3,r3,255
    486c:	183e0526 	beq	r3,zero,4084 <__alt_data_end+0xff004084>
    4870:	d9c02785 	stb	r7,158(sp)
    4874:	003e0306 	br	4084 <__alt_data_end+0xff004084>
    4878:	94801014 	ori	r18,r18,64
    487c:	ac400007 	ldb	r17,0(r21)
    4880:	003d1f06 	br	3d00 <__alt_data_end+0xff003d00>
    4884:	ac400007 	ldb	r17,0(r21)
    4888:	8a438726 	beq	r17,r9,56a8 <___vfprintf_internal_r+0x1b2c>
    488c:	94800414 	ori	r18,r18,16
    4890:	003d1b06 	br	3d00 <__alt_data_end+0xff003d00>
    4894:	18c03fcc 	andi	r3,r3,255
    4898:	1805341e 	bne	r3,zero,5d6c <___vfprintf_internal_r+0x21f0>
    489c:	9080080c 	andi	r2,r18,32
    48a0:	1002cd26 	beq	r2,zero,53d8 <___vfprintf_internal_r+0x185c>
    48a4:	d9402d17 	ldw	r5,180(sp)
    48a8:	d9002f17 	ldw	r4,188(sp)
    48ac:	28800017 	ldw	r2,0(r5)
    48b0:	2007d7fa 	srai	r3,r4,31
    48b4:	29400104 	addi	r5,r5,4
    48b8:	d9402d15 	stw	r5,180(sp)
    48bc:	11000015 	stw	r4,0(r2)
    48c0:	10c00115 	stw	r3,4(r2)
    48c4:	003ce506 	br	3c5c <__alt_data_end+0xff003c5c>
    48c8:	d8c02d17 	ldw	r3,180(sp)
    48cc:	d9002d17 	ldw	r4,180(sp)
    48d0:	d8002785 	stb	zero,158(sp)
    48d4:	18800017 	ldw	r2,0(r3)
    48d8:	21000104 	addi	r4,r4,4
    48dc:	00c00044 	movi	r3,1
    48e0:	d8c02a15 	stw	r3,168(sp)
    48e4:	d8801405 	stb	r2,80(sp)
    48e8:	d9002d15 	stw	r4,180(sp)
    48ec:	d8c02e15 	stw	r3,184(sp)
    48f0:	d8002915 	stw	zero,164(sp)
    48f4:	d8003215 	stw	zero,200(sp)
    48f8:	dc001404 	addi	r16,sp,80
    48fc:	0039883a 	mov	fp,zero
    4900:	003e7206 	br	42cc <__alt_data_end+0xff0042cc>
    4904:	01000074 	movhi	r4,1
    4908:	21086c04 	addi	r4,r4,8624
    490c:	0039883a 	mov	fp,zero
    4910:	d9003915 	stw	r4,228(sp)
    4914:	04401e04 	movi	r17,120
    4918:	003f8206 	br	4724 <__alt_data_end+0xff004724>
    491c:	18c03fcc 	andi	r3,r3,255
    4920:	1805061e 	bne	r3,zero,5d3c <___vfprintf_internal_r+0x21c0>
    4924:	883d9126 	beq	r17,zero,3f6c <__alt_data_end+0xff003f6c>
    4928:	00c00044 	movi	r3,1
    492c:	d8c02a15 	stw	r3,168(sp)
    4930:	dc401405 	stb	r17,80(sp)
    4934:	d8002785 	stb	zero,158(sp)
    4938:	003fec06 	br	48ec <__alt_data_end+0xff0048ec>
    493c:	01400074 	movhi	r5,1
    4940:	29486c04 	addi	r5,r5,8624
    4944:	d9403915 	stw	r5,228(sp)
    4948:	d8c02d15 	stw	r3,180(sp)
    494c:	1025883a 	mov	r18,r2
    4950:	04401e04 	movi	r17,120
    4954:	9d84b03a 	or	r2,r19,r22
    4958:	1000fc1e 	bne	r2,zero,4d4c <___vfprintf_internal_r+0x11d0>
    495c:	0039883a 	mov	fp,zero
    4960:	00800084 	movi	r2,2
    4964:	10803fcc 	andi	r2,r2,255
    4968:	00c00044 	movi	r3,1
    496c:	10c20f26 	beq	r2,r3,51ac <___vfprintf_internal_r+0x1630>
    4970:	00c00084 	movi	r3,2
    4974:	10fd6326 	beq	r2,r3,3f04 <__alt_data_end+0xff003f04>
    4978:	003e2d06 	br	4230 <__alt_data_end+0xff004230>
    497c:	d8c02017 	ldw	r3,128(sp)
    4980:	003e9306 	br	43d0 <__alt_data_end+0xff0043d0>
    4984:	00801944 	movi	r2,101
    4988:	14407e0e 	bge	r2,r17,4b84 <___vfprintf_internal_r+0x1008>
    498c:	d9003617 	ldw	r4,216(sp)
    4990:	d9403817 	ldw	r5,224(sp)
    4994:	000d883a 	mov	r6,zero
    4998:	000f883a 	mov	r7,zero
    499c:	d8c03c15 	stw	r3,240(sp)
    49a0:	da003d15 	stw	r8,244(sp)
    49a4:	000daf40 	call	daf4 <__eqdf2>
    49a8:	d8c03c17 	ldw	r3,240(sp)
    49ac:	da003d17 	ldw	r8,244(sp)
    49b0:	1000f71e 	bne	r2,zero,4d90 <___vfprintf_internal_r+0x1214>
    49b4:	d8801f17 	ldw	r2,124(sp)
    49b8:	01000074 	movhi	r4,1
    49bc:	21087304 	addi	r4,r4,8652
    49c0:	18c00044 	addi	r3,r3,1
    49c4:	10800044 	addi	r2,r2,1
    49c8:	41000015 	stw	r4,0(r8)
    49cc:	01000044 	movi	r4,1
    49d0:	41000115 	stw	r4,4(r8)
    49d4:	d8c02015 	stw	r3,128(sp)
    49d8:	d8801f15 	stw	r2,124(sp)
    49dc:	010001c4 	movi	r4,7
    49e0:	2082b816 	blt	r4,r2,54c4 <___vfprintf_internal_r+0x1948>
    49e4:	42000204 	addi	r8,r8,8
    49e8:	d8802617 	ldw	r2,152(sp)
    49ec:	d9403317 	ldw	r5,204(sp)
    49f0:	11400216 	blt	r2,r5,49fc <___vfprintf_internal_r+0xe80>
    49f4:	9080004c 	andi	r2,r18,1
    49f8:	103ed526 	beq	r2,zero,4550 <__alt_data_end+0xff004550>
    49fc:	d8803717 	ldw	r2,220(sp)
    4a00:	d9003417 	ldw	r4,208(sp)
    4a04:	d9403717 	ldw	r5,220(sp)
    4a08:	1887883a 	add	r3,r3,r2
    4a0c:	d8801f17 	ldw	r2,124(sp)
    4a10:	41000015 	stw	r4,0(r8)
    4a14:	41400115 	stw	r5,4(r8)
    4a18:	10800044 	addi	r2,r2,1
    4a1c:	d8c02015 	stw	r3,128(sp)
    4a20:	d8801f15 	stw	r2,124(sp)
    4a24:	010001c4 	movi	r4,7
    4a28:	20832916 	blt	r4,r2,56d0 <___vfprintf_internal_r+0x1b54>
    4a2c:	42000204 	addi	r8,r8,8
    4a30:	d8803317 	ldw	r2,204(sp)
    4a34:	143fffc4 	addi	r16,r2,-1
    4a38:	043ec50e 	bge	zero,r16,4550 <__alt_data_end+0xff004550>
    4a3c:	04400404 	movi	r17,16
    4a40:	d8801f17 	ldw	r2,124(sp)
    4a44:	8c00880e 	bge	r17,r16,4c68 <___vfprintf_internal_r+0x10ec>
    4a48:	01400074 	movhi	r5,1
    4a4c:	29487384 	addi	r5,r5,8654
    4a50:	d9402b15 	stw	r5,172(sp)
    4a54:	058001c4 	movi	r22,7
    4a58:	dcc02c17 	ldw	r19,176(sp)
    4a5c:	00000306 	br	4a6c <___vfprintf_internal_r+0xef0>
    4a60:	42000204 	addi	r8,r8,8
    4a64:	843ffc04 	addi	r16,r16,-16
    4a68:	8c00820e 	bge	r17,r16,4c74 <___vfprintf_internal_r+0x10f8>
    4a6c:	18c00404 	addi	r3,r3,16
    4a70:	10800044 	addi	r2,r2,1
    4a74:	45000015 	stw	r20,0(r8)
    4a78:	44400115 	stw	r17,4(r8)
    4a7c:	d8c02015 	stw	r3,128(sp)
    4a80:	d8801f15 	stw	r2,124(sp)
    4a84:	b0bff60e 	bge	r22,r2,4a60 <__alt_data_end+0xff004a60>
    4a88:	d9801e04 	addi	r6,sp,120
    4a8c:	b80b883a 	mov	r5,r23
    4a90:	9809883a 	mov	r4,r19
    4a94:	000a9180 	call	a918 <__sprint_r>
    4a98:	103d3a1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4a9c:	d8c02017 	ldw	r3,128(sp)
    4aa0:	d8801f17 	ldw	r2,124(sp)
    4aa4:	da000404 	addi	r8,sp,16
    4aa8:	003fee06 	br	4a64 <__alt_data_end+0xff004a64>
    4aac:	d9403117 	ldw	r5,196(sp)
    4ab0:	d8802a17 	ldw	r2,168(sp)
    4ab4:	28adc83a 	sub	r22,r5,r2
    4ab8:	05be630e 	bge	zero,r22,4448 <__alt_data_end+0xff004448>
    4abc:	07000404 	movi	fp,16
    4ac0:	d8801f17 	ldw	r2,124(sp)
    4ac4:	e5838f0e 	bge	fp,r22,5904 <___vfprintf_internal_r+0x1d88>
    4ac8:	01400074 	movhi	r5,1
    4acc:	29487384 	addi	r5,r5,8654
    4ad0:	dc403015 	stw	r17,192(sp)
    4ad4:	d9402b15 	stw	r5,172(sp)
    4ad8:	b023883a 	mov	r17,r22
    4adc:	04c001c4 	movi	r19,7
    4ae0:	a82d883a 	mov	r22,r21
    4ae4:	902b883a 	mov	r21,r18
    4ae8:	8025883a 	mov	r18,r16
    4aec:	dc002c17 	ldw	r16,176(sp)
    4af0:	00000306 	br	4b00 <___vfprintf_internal_r+0xf84>
    4af4:	8c7ffc04 	addi	r17,r17,-16
    4af8:	42000204 	addi	r8,r8,8
    4afc:	e440110e 	bge	fp,r17,4b44 <___vfprintf_internal_r+0xfc8>
    4b00:	18c00404 	addi	r3,r3,16
    4b04:	10800044 	addi	r2,r2,1
    4b08:	45000015 	stw	r20,0(r8)
    4b0c:	47000115 	stw	fp,4(r8)
    4b10:	d8c02015 	stw	r3,128(sp)
    4b14:	d8801f15 	stw	r2,124(sp)
    4b18:	98bff60e 	bge	r19,r2,4af4 <__alt_data_end+0xff004af4>
    4b1c:	d9801e04 	addi	r6,sp,120
    4b20:	b80b883a 	mov	r5,r23
    4b24:	8009883a 	mov	r4,r16
    4b28:	000a9180 	call	a918 <__sprint_r>
    4b2c:	103d151e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4b30:	8c7ffc04 	addi	r17,r17,-16
    4b34:	d8c02017 	ldw	r3,128(sp)
    4b38:	d8801f17 	ldw	r2,124(sp)
    4b3c:	da000404 	addi	r8,sp,16
    4b40:	e47fef16 	blt	fp,r17,4b00 <__alt_data_end+0xff004b00>
    4b44:	9021883a 	mov	r16,r18
    4b48:	a825883a 	mov	r18,r21
    4b4c:	b02b883a 	mov	r21,r22
    4b50:	882d883a 	mov	r22,r17
    4b54:	dc403017 	ldw	r17,192(sp)
    4b58:	d9002b17 	ldw	r4,172(sp)
    4b5c:	1d87883a 	add	r3,r3,r22
    4b60:	10800044 	addi	r2,r2,1
    4b64:	41000015 	stw	r4,0(r8)
    4b68:	45800115 	stw	r22,4(r8)
    4b6c:	d8c02015 	stw	r3,128(sp)
    4b70:	d8801f15 	stw	r2,124(sp)
    4b74:	010001c4 	movi	r4,7
    4b78:	20818e16 	blt	r4,r2,51b4 <___vfprintf_internal_r+0x1638>
    4b7c:	42000204 	addi	r8,r8,8
    4b80:	003e3106 	br	4448 <__alt_data_end+0xff004448>
    4b84:	d9403317 	ldw	r5,204(sp)
    4b88:	00800044 	movi	r2,1
    4b8c:	18c00044 	addi	r3,r3,1
    4b90:	1141530e 	bge	r2,r5,50e0 <___vfprintf_internal_r+0x1564>
    4b94:	dc401f17 	ldw	r17,124(sp)
    4b98:	00800044 	movi	r2,1
    4b9c:	40800115 	stw	r2,4(r8)
    4ba0:	8c400044 	addi	r17,r17,1
    4ba4:	44000015 	stw	r16,0(r8)
    4ba8:	d8c02015 	stw	r3,128(sp)
    4bac:	dc401f15 	stw	r17,124(sp)
    4bb0:	008001c4 	movi	r2,7
    4bb4:	14416b16 	blt	r2,r17,5164 <___vfprintf_internal_r+0x15e8>
    4bb8:	42000204 	addi	r8,r8,8
    4bbc:	d8803717 	ldw	r2,220(sp)
    4bc0:	d9003417 	ldw	r4,208(sp)
    4bc4:	8c400044 	addi	r17,r17,1
    4bc8:	10c7883a 	add	r3,r2,r3
    4bcc:	40800115 	stw	r2,4(r8)
    4bd0:	41000015 	stw	r4,0(r8)
    4bd4:	d8c02015 	stw	r3,128(sp)
    4bd8:	dc401f15 	stw	r17,124(sp)
    4bdc:	008001c4 	movi	r2,7
    4be0:	14416916 	blt	r2,r17,5188 <___vfprintf_internal_r+0x160c>
    4be4:	45800204 	addi	r22,r8,8
    4be8:	d9003617 	ldw	r4,216(sp)
    4bec:	d9403817 	ldw	r5,224(sp)
    4bf0:	000d883a 	mov	r6,zero
    4bf4:	000f883a 	mov	r7,zero
    4bf8:	d8c03c15 	stw	r3,240(sp)
    4bfc:	000daf40 	call	daf4 <__eqdf2>
    4c00:	d8c03c17 	ldw	r3,240(sp)
    4c04:	1000bc26 	beq	r2,zero,4ef8 <___vfprintf_internal_r+0x137c>
    4c08:	d9403317 	ldw	r5,204(sp)
    4c0c:	84000044 	addi	r16,r16,1
    4c10:	8c400044 	addi	r17,r17,1
    4c14:	28bfffc4 	addi	r2,r5,-1
    4c18:	1887883a 	add	r3,r3,r2
    4c1c:	b0800115 	stw	r2,4(r22)
    4c20:	b4000015 	stw	r16,0(r22)
    4c24:	d8c02015 	stw	r3,128(sp)
    4c28:	dc401f15 	stw	r17,124(sp)
    4c2c:	008001c4 	movi	r2,7
    4c30:	14414316 	blt	r2,r17,5140 <___vfprintf_internal_r+0x15c4>
    4c34:	b5800204 	addi	r22,r22,8
    4c38:	d9003a17 	ldw	r4,232(sp)
    4c3c:	df0022c4 	addi	fp,sp,139
    4c40:	8c400044 	addi	r17,r17,1
    4c44:	20c7883a 	add	r3,r4,r3
    4c48:	b7000015 	stw	fp,0(r22)
    4c4c:	b1000115 	stw	r4,4(r22)
    4c50:	d8c02015 	stw	r3,128(sp)
    4c54:	dc401f15 	stw	r17,124(sp)
    4c58:	008001c4 	movi	r2,7
    4c5c:	14400e16 	blt	r2,r17,4c98 <___vfprintf_internal_r+0x111c>
    4c60:	b2000204 	addi	r8,r22,8
    4c64:	003e3a06 	br	4550 <__alt_data_end+0xff004550>
    4c68:	01000074 	movhi	r4,1
    4c6c:	21087384 	addi	r4,r4,8654
    4c70:	d9002b15 	stw	r4,172(sp)
    4c74:	d9002b17 	ldw	r4,172(sp)
    4c78:	1c07883a 	add	r3,r3,r16
    4c7c:	44000115 	stw	r16,4(r8)
    4c80:	41000015 	stw	r4,0(r8)
    4c84:	10800044 	addi	r2,r2,1
    4c88:	d8c02015 	stw	r3,128(sp)
    4c8c:	d8801f15 	stw	r2,124(sp)
    4c90:	010001c4 	movi	r4,7
    4c94:	20be2d0e 	bge	r4,r2,454c <__alt_data_end+0xff00454c>
    4c98:	d9002c17 	ldw	r4,176(sp)
    4c9c:	d9801e04 	addi	r6,sp,120
    4ca0:	b80b883a 	mov	r5,r23
    4ca4:	000a9180 	call	a918 <__sprint_r>
    4ca8:	103cb61e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4cac:	d8c02017 	ldw	r3,128(sp)
    4cb0:	da000404 	addi	r8,sp,16
    4cb4:	003e2606 	br	4550 <__alt_data_end+0xff004550>
    4cb8:	d9002c17 	ldw	r4,176(sp)
    4cbc:	d9801e04 	addi	r6,sp,120
    4cc0:	b80b883a 	mov	r5,r23
    4cc4:	000a9180 	call	a918 <__sprint_r>
    4cc8:	103e5d26 	beq	r2,zero,4640 <__alt_data_end+0xff004640>
    4ccc:	003cad06 	br	3f84 <__alt_data_end+0xff003f84>
    4cd0:	d9002c17 	ldw	r4,176(sp)
    4cd4:	d9801e04 	addi	r6,sp,120
    4cd8:	b80b883a 	mov	r5,r23
    4cdc:	000a9180 	call	a918 <__sprint_r>
    4ce0:	103ca81e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4ce4:	d8c02017 	ldw	r3,128(sp)
    4ce8:	da000404 	addi	r8,sp,16
    4cec:	003e0b06 	br	451c <__alt_data_end+0xff00451c>
    4cf0:	d9002c17 	ldw	r4,176(sp)
    4cf4:	d9801e04 	addi	r6,sp,120
    4cf8:	b80b883a 	mov	r5,r23
    4cfc:	000a9180 	call	a918 <__sprint_r>
    4d00:	103ca01e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4d04:	d8c02017 	ldw	r3,128(sp)
    4d08:	da000404 	addi	r8,sp,16
    4d0c:	003dbd06 	br	4404 <__alt_data_end+0xff004404>
    4d10:	d9002c17 	ldw	r4,176(sp)
    4d14:	d9801e04 	addi	r6,sp,120
    4d18:	b80b883a 	mov	r5,r23
    4d1c:	000a9180 	call	a918 <__sprint_r>
    4d20:	103c981e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4d24:	d8c02017 	ldw	r3,128(sp)
    4d28:	da000404 	addi	r8,sp,16
    4d2c:	003dc306 	br	443c <__alt_data_end+0xff00443c>
    4d30:	d8802917 	ldw	r2,164(sp)
    4d34:	d8002785 	stb	zero,158(sp)
    4d38:	103f0616 	blt	r2,zero,4954 <__alt_data_end+0xff004954>
    4d3c:	00ffdfc4 	movi	r3,-129
    4d40:	9d84b03a 	or	r2,r19,r22
    4d44:	90e4703a 	and	r18,r18,r3
    4d48:	103c6b26 	beq	r2,zero,3ef8 <__alt_data_end+0xff003ef8>
    4d4c:	0039883a 	mov	fp,zero
    4d50:	003e7406 	br	4724 <__alt_data_end+0xff004724>
    4d54:	9080040c 	andi	r2,r18,16
    4d58:	1001b326 	beq	r2,zero,5428 <___vfprintf_internal_r+0x18ac>
    4d5c:	d9002d17 	ldw	r4,180(sp)
    4d60:	d9402917 	ldw	r5,164(sp)
    4d64:	d8002785 	stb	zero,158(sp)
    4d68:	20800104 	addi	r2,r4,4
    4d6c:	24c00017 	ldw	r19,0(r4)
    4d70:	002d883a 	mov	r22,zero
    4d74:	2801b516 	blt	r5,zero,544c <___vfprintf_internal_r+0x18d0>
    4d78:	00ffdfc4 	movi	r3,-129
    4d7c:	d8802d15 	stw	r2,180(sp)
    4d80:	90e4703a 	and	r18,r18,r3
    4d84:	983d2726 	beq	r19,zero,4224 <__alt_data_end+0xff004224>
    4d88:	0039883a 	mov	fp,zero
    4d8c:	003d2a06 	br	4238 <__alt_data_end+0xff004238>
    4d90:	dc402617 	ldw	r17,152(sp)
    4d94:	0441d30e 	bge	zero,r17,54e4 <___vfprintf_internal_r+0x1968>
    4d98:	dc403217 	ldw	r17,200(sp)
    4d9c:	d8803317 	ldw	r2,204(sp)
    4da0:	1440010e 	bge	r2,r17,4da8 <___vfprintf_internal_r+0x122c>
    4da4:	1023883a 	mov	r17,r2
    4da8:	04400a0e 	bge	zero,r17,4dd4 <___vfprintf_internal_r+0x1258>
    4dac:	d8801f17 	ldw	r2,124(sp)
    4db0:	1c47883a 	add	r3,r3,r17
    4db4:	44000015 	stw	r16,0(r8)
    4db8:	10800044 	addi	r2,r2,1
    4dbc:	44400115 	stw	r17,4(r8)
    4dc0:	d8c02015 	stw	r3,128(sp)
    4dc4:	d8801f15 	stw	r2,124(sp)
    4dc8:	010001c4 	movi	r4,7
    4dcc:	20826516 	blt	r4,r2,5764 <___vfprintf_internal_r+0x1be8>
    4dd0:	42000204 	addi	r8,r8,8
    4dd4:	88026116 	blt	r17,zero,575c <___vfprintf_internal_r+0x1be0>
    4dd8:	d9003217 	ldw	r4,200(sp)
    4ddc:	2463c83a 	sub	r17,r4,r17
    4de0:	04407b0e 	bge	zero,r17,4fd0 <___vfprintf_internal_r+0x1454>
    4de4:	05800404 	movi	r22,16
    4de8:	d8801f17 	ldw	r2,124(sp)
    4dec:	b4419d0e 	bge	r22,r17,5464 <___vfprintf_internal_r+0x18e8>
    4df0:	01000074 	movhi	r4,1
    4df4:	21087384 	addi	r4,r4,8654
    4df8:	d9002b15 	stw	r4,172(sp)
    4dfc:	070001c4 	movi	fp,7
    4e00:	dcc02c17 	ldw	r19,176(sp)
    4e04:	00000306 	br	4e14 <___vfprintf_internal_r+0x1298>
    4e08:	42000204 	addi	r8,r8,8
    4e0c:	8c7ffc04 	addi	r17,r17,-16
    4e10:	b441970e 	bge	r22,r17,5470 <___vfprintf_internal_r+0x18f4>
    4e14:	18c00404 	addi	r3,r3,16
    4e18:	10800044 	addi	r2,r2,1
    4e1c:	45000015 	stw	r20,0(r8)
    4e20:	45800115 	stw	r22,4(r8)
    4e24:	d8c02015 	stw	r3,128(sp)
    4e28:	d8801f15 	stw	r2,124(sp)
    4e2c:	e0bff60e 	bge	fp,r2,4e08 <__alt_data_end+0xff004e08>
    4e30:	d9801e04 	addi	r6,sp,120
    4e34:	b80b883a 	mov	r5,r23
    4e38:	9809883a 	mov	r4,r19
    4e3c:	000a9180 	call	a918 <__sprint_r>
    4e40:	103c501e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4e44:	d8c02017 	ldw	r3,128(sp)
    4e48:	d8801f17 	ldw	r2,124(sp)
    4e4c:	da000404 	addi	r8,sp,16
    4e50:	003fee06 	br	4e0c <__alt_data_end+0xff004e0c>
    4e54:	d9002c17 	ldw	r4,176(sp)
    4e58:	d9801e04 	addi	r6,sp,120
    4e5c:	b80b883a 	mov	r5,r23
    4e60:	000a9180 	call	a918 <__sprint_r>
    4e64:	103c471e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4e68:	d8c02017 	ldw	r3,128(sp)
    4e6c:	df002787 	ldb	fp,158(sp)
    4e70:	da000404 	addi	r8,sp,16
    4e74:	003d5606 	br	43d0 <__alt_data_end+0xff0043d0>
    4e78:	9080040c 	andi	r2,r18,16
    4e7c:	10016126 	beq	r2,zero,5404 <___vfprintf_internal_r+0x1888>
    4e80:	d8802d17 	ldw	r2,180(sp)
    4e84:	14c00017 	ldw	r19,0(r2)
    4e88:	10800104 	addi	r2,r2,4
    4e8c:	d8802d15 	stw	r2,180(sp)
    4e90:	982dd7fa 	srai	r22,r19,31
    4e94:	b005883a 	mov	r2,r22
    4e98:	003c8206 	br	40a4 <__alt_data_end+0xff0040a4>
    4e9c:	9080040c 	andi	r2,r18,16
    4ea0:	10003526 	beq	r2,zero,4f78 <___vfprintf_internal_r+0x13fc>
    4ea4:	d9402d17 	ldw	r5,180(sp)
    4ea8:	d8c02917 	ldw	r3,164(sp)
    4eac:	d8002785 	stb	zero,158(sp)
    4eb0:	28800104 	addi	r2,r5,4
    4eb4:	2cc00017 	ldw	r19,0(r5)
    4eb8:	002d883a 	mov	r22,zero
    4ebc:	18003716 	blt	r3,zero,4f9c <___vfprintf_internal_r+0x1420>
    4ec0:	00ffdfc4 	movi	r3,-129
    4ec4:	d8802d15 	stw	r2,180(sp)
    4ec8:	90e4703a 	and	r18,r18,r3
    4ecc:	0039883a 	mov	fp,zero
    4ed0:	983df326 	beq	r19,zero,46a0 <__alt_data_end+0xff0046a0>
    4ed4:	00800244 	movi	r2,9
    4ed8:	14fc7b36 	bltu	r2,r19,40c8 <__alt_data_end+0xff0040c8>
    4edc:	d8c02817 	ldw	r3,160(sp)
    4ee0:	dc001dc4 	addi	r16,sp,119
    4ee4:	9cc00c04 	addi	r19,r19,48
    4ee8:	1c07c83a 	sub	r3,r3,r16
    4eec:	dcc01dc5 	stb	r19,119(sp)
    4ef0:	d8c02e15 	stw	r3,184(sp)
    4ef4:	003ce806 	br	4298 <__alt_data_end+0xff004298>
    4ef8:	d8803317 	ldw	r2,204(sp)
    4efc:	143fffc4 	addi	r16,r2,-1
    4f00:	043f4d0e 	bge	zero,r16,4c38 <__alt_data_end+0xff004c38>
    4f04:	07000404 	movi	fp,16
    4f08:	e400810e 	bge	fp,r16,5110 <___vfprintf_internal_r+0x1594>
    4f0c:	01400074 	movhi	r5,1
    4f10:	29487384 	addi	r5,r5,8654
    4f14:	d9402b15 	stw	r5,172(sp)
    4f18:	01c001c4 	movi	r7,7
    4f1c:	dcc02c17 	ldw	r19,176(sp)
    4f20:	00000306 	br	4f30 <___vfprintf_internal_r+0x13b4>
    4f24:	b5800204 	addi	r22,r22,8
    4f28:	843ffc04 	addi	r16,r16,-16
    4f2c:	e4007b0e 	bge	fp,r16,511c <___vfprintf_internal_r+0x15a0>
    4f30:	18c00404 	addi	r3,r3,16
    4f34:	8c400044 	addi	r17,r17,1
    4f38:	b5000015 	stw	r20,0(r22)
    4f3c:	b7000115 	stw	fp,4(r22)
    4f40:	d8c02015 	stw	r3,128(sp)
    4f44:	dc401f15 	stw	r17,124(sp)
    4f48:	3c7ff60e 	bge	r7,r17,4f24 <__alt_data_end+0xff004f24>
    4f4c:	d9801e04 	addi	r6,sp,120
    4f50:	b80b883a 	mov	r5,r23
    4f54:	9809883a 	mov	r4,r19
    4f58:	d9c03c15 	stw	r7,240(sp)
    4f5c:	000a9180 	call	a918 <__sprint_r>
    4f60:	d9c03c17 	ldw	r7,240(sp)
    4f64:	103c071e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4f68:	d8c02017 	ldw	r3,128(sp)
    4f6c:	dc401f17 	ldw	r17,124(sp)
    4f70:	dd800404 	addi	r22,sp,16
    4f74:	003fec06 	br	4f28 <__alt_data_end+0xff004f28>
    4f78:	9080100c 	andi	r2,r18,64
    4f7c:	d8002785 	stb	zero,158(sp)
    4f80:	10010e26 	beq	r2,zero,53bc <___vfprintf_internal_r+0x1840>
    4f84:	d9002d17 	ldw	r4,180(sp)
    4f88:	d9402917 	ldw	r5,164(sp)
    4f8c:	002d883a 	mov	r22,zero
    4f90:	20800104 	addi	r2,r4,4
    4f94:	24c0000b 	ldhu	r19,0(r4)
    4f98:	283fc90e 	bge	r5,zero,4ec0 <__alt_data_end+0xff004ec0>
    4f9c:	d8802d15 	stw	r2,180(sp)
    4fa0:	0039883a 	mov	fp,zero
    4fa4:	9d84b03a 	or	r2,r19,r22
    4fa8:	103c461e 	bne	r2,zero,40c4 <__alt_data_end+0xff0040c4>
    4fac:	00800044 	movi	r2,1
    4fb0:	003e6c06 	br	4964 <__alt_data_end+0xff004964>
    4fb4:	d9002c17 	ldw	r4,176(sp)
    4fb8:	d9801e04 	addi	r6,sp,120
    4fbc:	b80b883a 	mov	r5,r23
    4fc0:	000a9180 	call	a918 <__sprint_r>
    4fc4:	103bef1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    4fc8:	d8c02017 	ldw	r3,128(sp)
    4fcc:	da000404 	addi	r8,sp,16
    4fd0:	d9003217 	ldw	r4,200(sp)
    4fd4:	d8802617 	ldw	r2,152(sp)
    4fd8:	d9403317 	ldw	r5,204(sp)
    4fdc:	8123883a 	add	r17,r16,r4
    4fe0:	11400216 	blt	r2,r5,4fec <___vfprintf_internal_r+0x1470>
    4fe4:	9100004c 	andi	r4,r18,1
    4fe8:	20000d26 	beq	r4,zero,5020 <___vfprintf_internal_r+0x14a4>
    4fec:	d9003717 	ldw	r4,220(sp)
    4ff0:	d9403417 	ldw	r5,208(sp)
    4ff4:	1907883a 	add	r3,r3,r4
    4ff8:	d9001f17 	ldw	r4,124(sp)
    4ffc:	41400015 	stw	r5,0(r8)
    5000:	d9403717 	ldw	r5,220(sp)
    5004:	21000044 	addi	r4,r4,1
    5008:	d8c02015 	stw	r3,128(sp)
    500c:	41400115 	stw	r5,4(r8)
    5010:	d9001f15 	stw	r4,124(sp)
    5014:	014001c4 	movi	r5,7
    5018:	2901e816 	blt	r5,r4,57bc <___vfprintf_internal_r+0x1c40>
    501c:	42000204 	addi	r8,r8,8
    5020:	d9003317 	ldw	r4,204(sp)
    5024:	8121883a 	add	r16,r16,r4
    5028:	2085c83a 	sub	r2,r4,r2
    502c:	8461c83a 	sub	r16,r16,r17
    5030:	1400010e 	bge	r2,r16,5038 <___vfprintf_internal_r+0x14bc>
    5034:	1021883a 	mov	r16,r2
    5038:	04000a0e 	bge	zero,r16,5064 <___vfprintf_internal_r+0x14e8>
    503c:	d9001f17 	ldw	r4,124(sp)
    5040:	1c07883a 	add	r3,r3,r16
    5044:	44400015 	stw	r17,0(r8)
    5048:	21000044 	addi	r4,r4,1
    504c:	44000115 	stw	r16,4(r8)
    5050:	d8c02015 	stw	r3,128(sp)
    5054:	d9001f15 	stw	r4,124(sp)
    5058:	014001c4 	movi	r5,7
    505c:	2901fb16 	blt	r5,r4,584c <___vfprintf_internal_r+0x1cd0>
    5060:	42000204 	addi	r8,r8,8
    5064:	8001f716 	blt	r16,zero,5844 <___vfprintf_internal_r+0x1cc8>
    5068:	1421c83a 	sub	r16,r2,r16
    506c:	043d380e 	bge	zero,r16,4550 <__alt_data_end+0xff004550>
    5070:	04400404 	movi	r17,16
    5074:	d8801f17 	ldw	r2,124(sp)
    5078:	8c3efb0e 	bge	r17,r16,4c68 <__alt_data_end+0xff004c68>
    507c:	01400074 	movhi	r5,1
    5080:	29487384 	addi	r5,r5,8654
    5084:	d9402b15 	stw	r5,172(sp)
    5088:	058001c4 	movi	r22,7
    508c:	dcc02c17 	ldw	r19,176(sp)
    5090:	00000306 	br	50a0 <___vfprintf_internal_r+0x1524>
    5094:	42000204 	addi	r8,r8,8
    5098:	843ffc04 	addi	r16,r16,-16
    509c:	8c3ef50e 	bge	r17,r16,4c74 <__alt_data_end+0xff004c74>
    50a0:	18c00404 	addi	r3,r3,16
    50a4:	10800044 	addi	r2,r2,1
    50a8:	45000015 	stw	r20,0(r8)
    50ac:	44400115 	stw	r17,4(r8)
    50b0:	d8c02015 	stw	r3,128(sp)
    50b4:	d8801f15 	stw	r2,124(sp)
    50b8:	b0bff60e 	bge	r22,r2,5094 <__alt_data_end+0xff005094>
    50bc:	d9801e04 	addi	r6,sp,120
    50c0:	b80b883a 	mov	r5,r23
    50c4:	9809883a 	mov	r4,r19
    50c8:	000a9180 	call	a918 <__sprint_r>
    50cc:	103bad1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    50d0:	d8c02017 	ldw	r3,128(sp)
    50d4:	d8801f17 	ldw	r2,124(sp)
    50d8:	da000404 	addi	r8,sp,16
    50dc:	003fee06 	br	5098 <__alt_data_end+0xff005098>
    50e0:	9088703a 	and	r4,r18,r2
    50e4:	203eab1e 	bne	r4,zero,4b94 <__alt_data_end+0xff004b94>
    50e8:	dc401f17 	ldw	r17,124(sp)
    50ec:	40800115 	stw	r2,4(r8)
    50f0:	44000015 	stw	r16,0(r8)
    50f4:	8c400044 	addi	r17,r17,1
    50f8:	d8c02015 	stw	r3,128(sp)
    50fc:	dc401f15 	stw	r17,124(sp)
    5100:	008001c4 	movi	r2,7
    5104:	14400e16 	blt	r2,r17,5140 <___vfprintf_internal_r+0x15c4>
    5108:	45800204 	addi	r22,r8,8
    510c:	003eca06 	br	4c38 <__alt_data_end+0xff004c38>
    5110:	01000074 	movhi	r4,1
    5114:	21087384 	addi	r4,r4,8654
    5118:	d9002b15 	stw	r4,172(sp)
    511c:	d8802b17 	ldw	r2,172(sp)
    5120:	1c07883a 	add	r3,r3,r16
    5124:	8c400044 	addi	r17,r17,1
    5128:	b0800015 	stw	r2,0(r22)
    512c:	b4000115 	stw	r16,4(r22)
    5130:	d8c02015 	stw	r3,128(sp)
    5134:	dc401f15 	stw	r17,124(sp)
    5138:	008001c4 	movi	r2,7
    513c:	147ebd0e 	bge	r2,r17,4c34 <__alt_data_end+0xff004c34>
    5140:	d9002c17 	ldw	r4,176(sp)
    5144:	d9801e04 	addi	r6,sp,120
    5148:	b80b883a 	mov	r5,r23
    514c:	000a9180 	call	a918 <__sprint_r>
    5150:	103b8c1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5154:	d8c02017 	ldw	r3,128(sp)
    5158:	dc401f17 	ldw	r17,124(sp)
    515c:	dd800404 	addi	r22,sp,16
    5160:	003eb506 	br	4c38 <__alt_data_end+0xff004c38>
    5164:	d9002c17 	ldw	r4,176(sp)
    5168:	d9801e04 	addi	r6,sp,120
    516c:	b80b883a 	mov	r5,r23
    5170:	000a9180 	call	a918 <__sprint_r>
    5174:	103b831e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5178:	d8c02017 	ldw	r3,128(sp)
    517c:	dc401f17 	ldw	r17,124(sp)
    5180:	da000404 	addi	r8,sp,16
    5184:	003e8d06 	br	4bbc <__alt_data_end+0xff004bbc>
    5188:	d9002c17 	ldw	r4,176(sp)
    518c:	d9801e04 	addi	r6,sp,120
    5190:	b80b883a 	mov	r5,r23
    5194:	000a9180 	call	a918 <__sprint_r>
    5198:	103b7a1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    519c:	d8c02017 	ldw	r3,128(sp)
    51a0:	dc401f17 	ldw	r17,124(sp)
    51a4:	dd800404 	addi	r22,sp,16
    51a8:	003e8f06 	br	4be8 <__alt_data_end+0xff004be8>
    51ac:	0027883a 	mov	r19,zero
    51b0:	003f4a06 	br	4edc <__alt_data_end+0xff004edc>
    51b4:	d9002c17 	ldw	r4,176(sp)
    51b8:	d9801e04 	addi	r6,sp,120
    51bc:	b80b883a 	mov	r5,r23
    51c0:	000a9180 	call	a918 <__sprint_r>
    51c4:	103b6f1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    51c8:	d8c02017 	ldw	r3,128(sp)
    51cc:	da000404 	addi	r8,sp,16
    51d0:	003c9d06 	br	4448 <__alt_data_end+0xff004448>
    51d4:	04e7c83a 	sub	r19,zero,r19
    51d8:	9804c03a 	cmpne	r2,r19,zero
    51dc:	05adc83a 	sub	r22,zero,r22
    51e0:	b0adc83a 	sub	r22,r22,r2
    51e4:	d8802917 	ldw	r2,164(sp)
    51e8:	07000b44 	movi	fp,45
    51ec:	df002785 	stb	fp,158(sp)
    51f0:	10017b16 	blt	r2,zero,57e0 <___vfprintf_internal_r+0x1c64>
    51f4:	00bfdfc4 	movi	r2,-129
    51f8:	90a4703a 	and	r18,r18,r2
    51fc:	003bb106 	br	40c4 <__alt_data_end+0xff0040c4>
    5200:	d9003617 	ldw	r4,216(sp)
    5204:	d9403817 	ldw	r5,224(sp)
    5208:	da003d15 	stw	r8,244(sp)
    520c:	000a5900 	call	a590 <__fpclassifyd>
    5210:	da003d17 	ldw	r8,244(sp)
    5214:	1000f026 	beq	r2,zero,55d8 <___vfprintf_internal_r+0x1a5c>
    5218:	d9002917 	ldw	r4,164(sp)
    521c:	05bff7c4 	movi	r22,-33
    5220:	00bfffc4 	movi	r2,-1
    5224:	8dac703a 	and	r22,r17,r22
    5228:	20820026 	beq	r4,r2,5a2c <___vfprintf_internal_r+0x1eb0>
    522c:	008011c4 	movi	r2,71
    5230:	b081f726 	beq	r22,r2,5a10 <___vfprintf_internal_r+0x1e94>
    5234:	d9003817 	ldw	r4,224(sp)
    5238:	90c04014 	ori	r3,r18,256
    523c:	d8c02b15 	stw	r3,172(sp)
    5240:	20021516 	blt	r4,zero,5a98 <___vfprintf_internal_r+0x1f1c>
    5244:	dcc03817 	ldw	r19,224(sp)
    5248:	d8002a05 	stb	zero,168(sp)
    524c:	00801984 	movi	r2,102
    5250:	8881f926 	beq	r17,r2,5a38 <___vfprintf_internal_r+0x1ebc>
    5254:	00801184 	movi	r2,70
    5258:	88821c26 	beq	r17,r2,5acc <___vfprintf_internal_r+0x1f50>
    525c:	00801144 	movi	r2,69
    5260:	b081ef26 	beq	r22,r2,5a20 <___vfprintf_internal_r+0x1ea4>
    5264:	d8c02917 	ldw	r3,164(sp)
    5268:	d8802104 	addi	r2,sp,132
    526c:	d8800315 	stw	r2,12(sp)
    5270:	d9403617 	ldw	r5,216(sp)
    5274:	d8802504 	addi	r2,sp,148
    5278:	d9002c17 	ldw	r4,176(sp)
    527c:	d8800215 	stw	r2,8(sp)
    5280:	d8802604 	addi	r2,sp,152
    5284:	d8c00015 	stw	r3,0(sp)
    5288:	d8800115 	stw	r2,4(sp)
    528c:	01c00084 	movi	r7,2
    5290:	980d883a 	mov	r6,r19
    5294:	d8c03c15 	stw	r3,240(sp)
    5298:	da003d15 	stw	r8,244(sp)
    529c:	00061a00 	call	61a0 <_dtoa_r>
    52a0:	1021883a 	mov	r16,r2
    52a4:	008019c4 	movi	r2,103
    52a8:	d8c03c17 	ldw	r3,240(sp)
    52ac:	da003d17 	ldw	r8,244(sp)
    52b0:	88817126 	beq	r17,r2,5878 <___vfprintf_internal_r+0x1cfc>
    52b4:	008011c4 	movi	r2,71
    52b8:	88829226 	beq	r17,r2,5d04 <___vfprintf_internal_r+0x2188>
    52bc:	80f9883a 	add	fp,r16,r3
    52c0:	d9003617 	ldw	r4,216(sp)
    52c4:	000d883a 	mov	r6,zero
    52c8:	000f883a 	mov	r7,zero
    52cc:	980b883a 	mov	r5,r19
    52d0:	da003d15 	stw	r8,244(sp)
    52d4:	000daf40 	call	daf4 <__eqdf2>
    52d8:	da003d17 	ldw	r8,244(sp)
    52dc:	10018d26 	beq	r2,zero,5914 <___vfprintf_internal_r+0x1d98>
    52e0:	d8802117 	ldw	r2,132(sp)
    52e4:	1700062e 	bgeu	r2,fp,5300 <___vfprintf_internal_r+0x1784>
    52e8:	01000c04 	movi	r4,48
    52ec:	10c00044 	addi	r3,r2,1
    52f0:	d8c02115 	stw	r3,132(sp)
    52f4:	11000005 	stb	r4,0(r2)
    52f8:	d8802117 	ldw	r2,132(sp)
    52fc:	173ffb36 	bltu	r2,fp,52ec <__alt_data_end+0xff0052ec>
    5300:	1405c83a 	sub	r2,r2,r16
    5304:	d8803315 	stw	r2,204(sp)
    5308:	008011c4 	movi	r2,71
    530c:	b0817626 	beq	r22,r2,58e8 <___vfprintf_internal_r+0x1d6c>
    5310:	00801944 	movi	r2,101
    5314:	1442810e 	bge	r2,r17,5d1c <___vfprintf_internal_r+0x21a0>
    5318:	d8c02617 	ldw	r3,152(sp)
    531c:	00801984 	movi	r2,102
    5320:	d8c03215 	stw	r3,200(sp)
    5324:	8881fe26 	beq	r17,r2,5b20 <___vfprintf_internal_r+0x1fa4>
    5328:	d8c03217 	ldw	r3,200(sp)
    532c:	d9003317 	ldw	r4,204(sp)
    5330:	1901dd16 	blt	r3,r4,5aa8 <___vfprintf_internal_r+0x1f2c>
    5334:	9480004c 	andi	r18,r18,1
    5338:	90022b1e 	bne	r18,zero,5be8 <___vfprintf_internal_r+0x206c>
    533c:	1805883a 	mov	r2,r3
    5340:	18028016 	blt	r3,zero,5d44 <___vfprintf_internal_r+0x21c8>
    5344:	d8c03217 	ldw	r3,200(sp)
    5348:	044019c4 	movi	r17,103
    534c:	d8c02e15 	stw	r3,184(sp)
    5350:	df002a07 	ldb	fp,168(sp)
    5354:	e001531e 	bne	fp,zero,58a4 <___vfprintf_internal_r+0x1d28>
    5358:	df002783 	ldbu	fp,158(sp)
    535c:	d8802a15 	stw	r2,168(sp)
    5360:	dc802b17 	ldw	r18,172(sp)
    5364:	d8002915 	stw	zero,164(sp)
    5368:	003bd106 	br	42b0 <__alt_data_end+0xff0042b0>
    536c:	d8802d17 	ldw	r2,180(sp)
    5370:	d8c02d17 	ldw	r3,180(sp)
    5374:	d9002d17 	ldw	r4,180(sp)
    5378:	10800017 	ldw	r2,0(r2)
    537c:	18c00117 	ldw	r3,4(r3)
    5380:	21000204 	addi	r4,r4,8
    5384:	d8803615 	stw	r2,216(sp)
    5388:	d8c03815 	stw	r3,224(sp)
    538c:	d9002d15 	stw	r4,180(sp)
    5390:	003b7506 	br	4168 <__alt_data_end+0xff004168>
    5394:	ac400007 	ldb	r17,0(r21)
    5398:	003a5906 	br	3d00 <__alt_data_end+0xff003d00>
    539c:	9080100c 	andi	r2,r18,64
    53a0:	1000a826 	beq	r2,zero,5644 <___vfprintf_internal_r+0x1ac8>
    53a4:	d9002d17 	ldw	r4,180(sp)
    53a8:	002d883a 	mov	r22,zero
    53ac:	24c0000b 	ldhu	r19,0(r4)
    53b0:	21000104 	addi	r4,r4,4
    53b4:	d9002d15 	stw	r4,180(sp)
    53b8:	003ccb06 	br	46e8 <__alt_data_end+0xff0046e8>
    53bc:	d8c02d17 	ldw	r3,180(sp)
    53c0:	d9002917 	ldw	r4,164(sp)
    53c4:	002d883a 	mov	r22,zero
    53c8:	18800104 	addi	r2,r3,4
    53cc:	1cc00017 	ldw	r19,0(r3)
    53d0:	203ebb0e 	bge	r4,zero,4ec0 <__alt_data_end+0xff004ec0>
    53d4:	003ef106 	br	4f9c <__alt_data_end+0xff004f9c>
    53d8:	9080040c 	andi	r2,r18,16
    53dc:	1000921e 	bne	r2,zero,5628 <___vfprintf_internal_r+0x1aac>
    53e0:	9480100c 	andi	r18,r18,64
    53e4:	90013926 	beq	r18,zero,58cc <___vfprintf_internal_r+0x1d50>
    53e8:	d9002d17 	ldw	r4,180(sp)
    53ec:	d9402f17 	ldw	r5,188(sp)
    53f0:	20800017 	ldw	r2,0(r4)
    53f4:	21000104 	addi	r4,r4,4
    53f8:	d9002d15 	stw	r4,180(sp)
    53fc:	1140000d 	sth	r5,0(r2)
    5400:	003a1606 	br	3c5c <__alt_data_end+0xff003c5c>
    5404:	9080100c 	andi	r2,r18,64
    5408:	10008026 	beq	r2,zero,560c <___vfprintf_internal_r+0x1a90>
    540c:	d8c02d17 	ldw	r3,180(sp)
    5410:	1cc0000f 	ldh	r19,0(r3)
    5414:	18c00104 	addi	r3,r3,4
    5418:	d8c02d15 	stw	r3,180(sp)
    541c:	982dd7fa 	srai	r22,r19,31
    5420:	b005883a 	mov	r2,r22
    5424:	003b1f06 	br	40a4 <__alt_data_end+0xff0040a4>
    5428:	9080100c 	andi	r2,r18,64
    542c:	d8002785 	stb	zero,158(sp)
    5430:	10008a1e 	bne	r2,zero,565c <___vfprintf_internal_r+0x1ae0>
    5434:	d9402d17 	ldw	r5,180(sp)
    5438:	d8c02917 	ldw	r3,164(sp)
    543c:	002d883a 	mov	r22,zero
    5440:	28800104 	addi	r2,r5,4
    5444:	2cc00017 	ldw	r19,0(r5)
    5448:	183e4b0e 	bge	r3,zero,4d78 <__alt_data_end+0xff004d78>
    544c:	9d86b03a 	or	r3,r19,r22
    5450:	d8802d15 	stw	r2,180(sp)
    5454:	183e4c1e 	bne	r3,zero,4d88 <__alt_data_end+0xff004d88>
    5458:	0039883a 	mov	fp,zero
    545c:	0005883a 	mov	r2,zero
    5460:	003d4006 	br	4964 <__alt_data_end+0xff004964>
    5464:	01400074 	movhi	r5,1
    5468:	29487384 	addi	r5,r5,8654
    546c:	d9402b15 	stw	r5,172(sp)
    5470:	d9402b17 	ldw	r5,172(sp)
    5474:	1c47883a 	add	r3,r3,r17
    5478:	10800044 	addi	r2,r2,1
    547c:	41400015 	stw	r5,0(r8)
    5480:	44400115 	stw	r17,4(r8)
    5484:	d8c02015 	stw	r3,128(sp)
    5488:	d8801f15 	stw	r2,124(sp)
    548c:	010001c4 	movi	r4,7
    5490:	20bec816 	blt	r4,r2,4fb4 <__alt_data_end+0xff004fb4>
    5494:	42000204 	addi	r8,r8,8
    5498:	003ecd06 	br	4fd0 <__alt_data_end+0xff004fd0>
    549c:	d9002917 	ldw	r4,164(sp)
    54a0:	d8002785 	stb	zero,158(sp)
    54a4:	203d2d16 	blt	r4,zero,495c <__alt_data_end+0xff00495c>
    54a8:	00bfdfc4 	movi	r2,-129
    54ac:	90a4703a 	and	r18,r18,r2
    54b0:	003a9106 	br	3ef8 <__alt_data_end+0xff003ef8>
    54b4:	01000074 	movhi	r4,1
    54b8:	21087384 	addi	r4,r4,8654
    54bc:	d9002b15 	stw	r4,172(sp)
    54c0:	003c0c06 	br	44f4 <__alt_data_end+0xff0044f4>
    54c4:	d9002c17 	ldw	r4,176(sp)
    54c8:	d9801e04 	addi	r6,sp,120
    54cc:	b80b883a 	mov	r5,r23
    54d0:	000a9180 	call	a918 <__sprint_r>
    54d4:	103aab1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    54d8:	d8c02017 	ldw	r3,128(sp)
    54dc:	da000404 	addi	r8,sp,16
    54e0:	003d4106 	br	49e8 <__alt_data_end+0xff0049e8>
    54e4:	d8801f17 	ldw	r2,124(sp)
    54e8:	01400074 	movhi	r5,1
    54ec:	01000044 	movi	r4,1
    54f0:	18c00044 	addi	r3,r3,1
    54f4:	10800044 	addi	r2,r2,1
    54f8:	29487304 	addi	r5,r5,8652
    54fc:	41000115 	stw	r4,4(r8)
    5500:	41400015 	stw	r5,0(r8)
    5504:	d8c02015 	stw	r3,128(sp)
    5508:	d8801f15 	stw	r2,124(sp)
    550c:	010001c4 	movi	r4,7
    5510:	20805c16 	blt	r4,r2,5684 <___vfprintf_internal_r+0x1b08>
    5514:	42000204 	addi	r8,r8,8
    5518:	8800041e 	bne	r17,zero,552c <___vfprintf_internal_r+0x19b0>
    551c:	d8803317 	ldw	r2,204(sp)
    5520:	1000021e 	bne	r2,zero,552c <___vfprintf_internal_r+0x19b0>
    5524:	9080004c 	andi	r2,r18,1
    5528:	103c0926 	beq	r2,zero,4550 <__alt_data_end+0xff004550>
    552c:	d9003717 	ldw	r4,220(sp)
    5530:	d8801f17 	ldw	r2,124(sp)
    5534:	d9403417 	ldw	r5,208(sp)
    5538:	20c7883a 	add	r3,r4,r3
    553c:	10800044 	addi	r2,r2,1
    5540:	41000115 	stw	r4,4(r8)
    5544:	41400015 	stw	r5,0(r8)
    5548:	d8c02015 	stw	r3,128(sp)
    554c:	d8801f15 	stw	r2,124(sp)
    5550:	010001c4 	movi	r4,7
    5554:	20812116 	blt	r4,r2,59dc <___vfprintf_internal_r+0x1e60>
    5558:	42000204 	addi	r8,r8,8
    555c:	0463c83a 	sub	r17,zero,r17
    5560:	0440730e 	bge	zero,r17,5730 <___vfprintf_internal_r+0x1bb4>
    5564:	05800404 	movi	r22,16
    5568:	b440860e 	bge	r22,r17,5784 <___vfprintf_internal_r+0x1c08>
    556c:	01400074 	movhi	r5,1
    5570:	29487384 	addi	r5,r5,8654
    5574:	d9402b15 	stw	r5,172(sp)
    5578:	070001c4 	movi	fp,7
    557c:	dcc02c17 	ldw	r19,176(sp)
    5580:	00000306 	br	5590 <___vfprintf_internal_r+0x1a14>
    5584:	42000204 	addi	r8,r8,8
    5588:	8c7ffc04 	addi	r17,r17,-16
    558c:	b440800e 	bge	r22,r17,5790 <___vfprintf_internal_r+0x1c14>
    5590:	18c00404 	addi	r3,r3,16
    5594:	10800044 	addi	r2,r2,1
    5598:	45000015 	stw	r20,0(r8)
    559c:	45800115 	stw	r22,4(r8)
    55a0:	d8c02015 	stw	r3,128(sp)
    55a4:	d8801f15 	stw	r2,124(sp)
    55a8:	e0bff60e 	bge	fp,r2,5584 <__alt_data_end+0xff005584>
    55ac:	d9801e04 	addi	r6,sp,120
    55b0:	b80b883a 	mov	r5,r23
    55b4:	9809883a 	mov	r4,r19
    55b8:	000a9180 	call	a918 <__sprint_r>
    55bc:	103a711e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    55c0:	d8c02017 	ldw	r3,128(sp)
    55c4:	d8801f17 	ldw	r2,124(sp)
    55c8:	da000404 	addi	r8,sp,16
    55cc:	003fee06 	br	5588 <__alt_data_end+0xff005588>
    55d0:	00bfffc4 	movi	r2,-1
    55d4:	003a6f06 	br	3f94 <__alt_data_end+0xff003f94>
    55d8:	008011c4 	movi	r2,71
    55dc:	1440b816 	blt	r2,r17,58c0 <___vfprintf_internal_r+0x1d44>
    55e0:	04000074 	movhi	r16,1
    55e4:	84086504 	addi	r16,r16,8596
    55e8:	00c000c4 	movi	r3,3
    55ec:	00bfdfc4 	movi	r2,-129
    55f0:	d8c02a15 	stw	r3,168(sp)
    55f4:	90a4703a 	and	r18,r18,r2
    55f8:	df002783 	ldbu	fp,158(sp)
    55fc:	d8c02e15 	stw	r3,184(sp)
    5600:	d8002915 	stw	zero,164(sp)
    5604:	d8003215 	stw	zero,200(sp)
    5608:	003b2906 	br	42b0 <__alt_data_end+0xff0042b0>
    560c:	d9002d17 	ldw	r4,180(sp)
    5610:	24c00017 	ldw	r19,0(r4)
    5614:	21000104 	addi	r4,r4,4
    5618:	d9002d15 	stw	r4,180(sp)
    561c:	982dd7fa 	srai	r22,r19,31
    5620:	b005883a 	mov	r2,r22
    5624:	003a9f06 	br	40a4 <__alt_data_end+0xff0040a4>
    5628:	d9402d17 	ldw	r5,180(sp)
    562c:	d8c02f17 	ldw	r3,188(sp)
    5630:	28800017 	ldw	r2,0(r5)
    5634:	29400104 	addi	r5,r5,4
    5638:	d9402d15 	stw	r5,180(sp)
    563c:	10c00015 	stw	r3,0(r2)
    5640:	00398606 	br	3c5c <__alt_data_end+0xff003c5c>
    5644:	d9402d17 	ldw	r5,180(sp)
    5648:	002d883a 	mov	r22,zero
    564c:	2cc00017 	ldw	r19,0(r5)
    5650:	29400104 	addi	r5,r5,4
    5654:	d9402d15 	stw	r5,180(sp)
    5658:	003c2306 	br	46e8 <__alt_data_end+0xff0046e8>
    565c:	d8c02d17 	ldw	r3,180(sp)
    5660:	d9002917 	ldw	r4,164(sp)
    5664:	002d883a 	mov	r22,zero
    5668:	18800104 	addi	r2,r3,4
    566c:	1cc0000b 	ldhu	r19,0(r3)
    5670:	203dc10e 	bge	r4,zero,4d78 <__alt_data_end+0xff004d78>
    5674:	003f7506 	br	544c <__alt_data_end+0xff00544c>
    5678:	04000074 	movhi	r16,1
    567c:	84086304 	addi	r16,r16,8588
    5680:	003acc06 	br	41b4 <__alt_data_end+0xff0041b4>
    5684:	d9002c17 	ldw	r4,176(sp)
    5688:	d9801e04 	addi	r6,sp,120
    568c:	b80b883a 	mov	r5,r23
    5690:	000a9180 	call	a918 <__sprint_r>
    5694:	103a3b1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5698:	dc402617 	ldw	r17,152(sp)
    569c:	d8c02017 	ldw	r3,128(sp)
    56a0:	da000404 	addi	r8,sp,16
    56a4:	003f9c06 	br	5518 <__alt_data_end+0xff005518>
    56a8:	ac400043 	ldbu	r17,1(r21)
    56ac:	94800814 	ori	r18,r18,32
    56b0:	ad400044 	addi	r21,r21,1
    56b4:	8c403fcc 	andi	r17,r17,255
    56b8:	8c40201c 	xori	r17,r17,128
    56bc:	8c7fe004 	addi	r17,r17,-128
    56c0:	00398f06 	br	3d00 <__alt_data_end+0xff003d00>
    56c4:	d8c02d15 	stw	r3,180(sp)
    56c8:	0039883a 	mov	fp,zero
    56cc:	003e3506 	br	4fa4 <__alt_data_end+0xff004fa4>
    56d0:	d9002c17 	ldw	r4,176(sp)
    56d4:	d9801e04 	addi	r6,sp,120
    56d8:	b80b883a 	mov	r5,r23
    56dc:	000a9180 	call	a918 <__sprint_r>
    56e0:	103a281e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    56e4:	d8c02017 	ldw	r3,128(sp)
    56e8:	da000404 	addi	r8,sp,16
    56ec:	003cd006 	br	4a30 <__alt_data_end+0xff004a30>
    56f0:	8009883a 	mov	r4,r16
    56f4:	da003d15 	stw	r8,244(sp)
    56f8:	0003ae40 	call	3ae4 <strlen>
    56fc:	d8802e15 	stw	r2,184(sp)
    5700:	da003d17 	ldw	r8,244(sp)
    5704:	103c340e 	bge	r2,zero,47d8 <__alt_data_end+0xff0047d8>
    5708:	0005883a 	mov	r2,zero
    570c:	003c3206 	br	47d8 <__alt_data_end+0xff0047d8>
    5710:	d9002c17 	ldw	r4,176(sp)
    5714:	d9801e04 	addi	r6,sp,120
    5718:	b80b883a 	mov	r5,r23
    571c:	000a9180 	call	a918 <__sprint_r>
    5720:	103a181e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5724:	d8c02017 	ldw	r3,128(sp)
    5728:	d8801f17 	ldw	r2,124(sp)
    572c:	da000404 	addi	r8,sp,16
    5730:	d9403317 	ldw	r5,204(sp)
    5734:	10800044 	addi	r2,r2,1
    5738:	44000015 	stw	r16,0(r8)
    573c:	28c7883a 	add	r3,r5,r3
    5740:	003b7d06 	br	4538 <__alt_data_end+0xff004538>
    5744:	01000074 	movhi	r4,1
    5748:	21087784 	addi	r4,r4,8670
    574c:	d9003515 	stw	r4,212(sp)
    5750:	003b1406 	br	43a4 <__alt_data_end+0xff0043a4>
    5754:	013fffc4 	movi	r4,-1
    5758:	003a3506 	br	4030 <__alt_data_end+0xff004030>
    575c:	0023883a 	mov	r17,zero
    5760:	003d9d06 	br	4dd8 <__alt_data_end+0xff004dd8>
    5764:	d9002c17 	ldw	r4,176(sp)
    5768:	d9801e04 	addi	r6,sp,120
    576c:	b80b883a 	mov	r5,r23
    5770:	000a9180 	call	a918 <__sprint_r>
    5774:	103a031e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5778:	d8c02017 	ldw	r3,128(sp)
    577c:	da000404 	addi	r8,sp,16
    5780:	003d9406 	br	4dd4 <__alt_data_end+0xff004dd4>
    5784:	01000074 	movhi	r4,1
    5788:	21087384 	addi	r4,r4,8654
    578c:	d9002b15 	stw	r4,172(sp)
    5790:	d9002b17 	ldw	r4,172(sp)
    5794:	1c47883a 	add	r3,r3,r17
    5798:	10800044 	addi	r2,r2,1
    579c:	41000015 	stw	r4,0(r8)
    57a0:	44400115 	stw	r17,4(r8)
    57a4:	d8c02015 	stw	r3,128(sp)
    57a8:	d8801f15 	stw	r2,124(sp)
    57ac:	010001c4 	movi	r4,7
    57b0:	20bfd716 	blt	r4,r2,5710 <__alt_data_end+0xff005710>
    57b4:	42000204 	addi	r8,r8,8
    57b8:	003fdd06 	br	5730 <__alt_data_end+0xff005730>
    57bc:	d9002c17 	ldw	r4,176(sp)
    57c0:	d9801e04 	addi	r6,sp,120
    57c4:	b80b883a 	mov	r5,r23
    57c8:	000a9180 	call	a918 <__sprint_r>
    57cc:	1039ed1e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    57d0:	d8802617 	ldw	r2,152(sp)
    57d4:	d8c02017 	ldw	r3,128(sp)
    57d8:	da000404 	addi	r8,sp,16
    57dc:	003e1006 	br	5020 <__alt_data_end+0xff005020>
    57e0:	00800044 	movi	r2,1
    57e4:	10803fcc 	andi	r2,r2,255
    57e8:	00c00044 	movi	r3,1
    57ec:	10fa3526 	beq	r2,r3,40c4 <__alt_data_end+0xff0040c4>
    57f0:	00c00084 	movi	r3,2
    57f4:	10fbcb26 	beq	r2,r3,4724 <__alt_data_end+0xff004724>
    57f8:	003a8f06 	br	4238 <__alt_data_end+0xff004238>
    57fc:	01000074 	movhi	r4,1
    5800:	21087784 	addi	r4,r4,8670
    5804:	d9003515 	stw	r4,212(sp)
    5808:	003b7606 	br	45e4 <__alt_data_end+0xff0045e4>
    580c:	d8802917 	ldw	r2,164(sp)
    5810:	00c00184 	movi	r3,6
    5814:	1880012e 	bgeu	r3,r2,581c <___vfprintf_internal_r+0x1ca0>
    5818:	1805883a 	mov	r2,r3
    581c:	d8802e15 	stw	r2,184(sp)
    5820:	1000ef16 	blt	r2,zero,5be0 <___vfprintf_internal_r+0x2064>
    5824:	04000074 	movhi	r16,1
    5828:	d8802a15 	stw	r2,168(sp)
    582c:	dcc02d15 	stw	r19,180(sp)
    5830:	d8002915 	stw	zero,164(sp)
    5834:	d8003215 	stw	zero,200(sp)
    5838:	84087104 	addi	r16,r16,8644
    583c:	0039883a 	mov	fp,zero
    5840:	003aa206 	br	42cc <__alt_data_end+0xff0042cc>
    5844:	0021883a 	mov	r16,zero
    5848:	003e0706 	br	5068 <__alt_data_end+0xff005068>
    584c:	d9002c17 	ldw	r4,176(sp)
    5850:	d9801e04 	addi	r6,sp,120
    5854:	b80b883a 	mov	r5,r23
    5858:	000a9180 	call	a918 <__sprint_r>
    585c:	1039c91e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    5860:	d8802617 	ldw	r2,152(sp)
    5864:	d9403317 	ldw	r5,204(sp)
    5868:	d8c02017 	ldw	r3,128(sp)
    586c:	da000404 	addi	r8,sp,16
    5870:	2885c83a 	sub	r2,r5,r2
    5874:	003dfb06 	br	5064 <__alt_data_end+0xff005064>
    5878:	9080004c 	andi	r2,r18,1
    587c:	103e8f1e 	bne	r2,zero,52bc <__alt_data_end+0xff0052bc>
    5880:	d8802117 	ldw	r2,132(sp)
    5884:	003e9e06 	br	5300 <__alt_data_end+0xff005300>
    5888:	1025883a 	mov	r18,r2
    588c:	0039883a 	mov	fp,zero
    5890:	00800084 	movi	r2,2
    5894:	003fd306 	br	57e4 <__alt_data_end+0xff0057e4>
    5898:	07000b44 	movi	fp,45
    589c:	df002785 	stb	fp,158(sp)
    58a0:	003a4006 	br	41a4 <__alt_data_end+0xff0041a4>
    58a4:	00c00b44 	movi	r3,45
    58a8:	d8c02785 	stb	r3,158(sp)
    58ac:	d8802a15 	stw	r2,168(sp)
    58b0:	dc802b17 	ldw	r18,172(sp)
    58b4:	d8002915 	stw	zero,164(sp)
    58b8:	07000b44 	movi	fp,45
    58bc:	003a8006 	br	42c0 <__alt_data_end+0xff0042c0>
    58c0:	04000074 	movhi	r16,1
    58c4:	84086604 	addi	r16,r16,8600
    58c8:	003f4706 	br	55e8 <__alt_data_end+0xff0055e8>
    58cc:	d8c02d17 	ldw	r3,180(sp)
    58d0:	d9002f17 	ldw	r4,188(sp)
    58d4:	18800017 	ldw	r2,0(r3)
    58d8:	18c00104 	addi	r3,r3,4
    58dc:	d8c02d15 	stw	r3,180(sp)
    58e0:	11000015 	stw	r4,0(r2)
    58e4:	0038dd06 	br	3c5c <__alt_data_end+0xff003c5c>
    58e8:	dd802617 	ldw	r22,152(sp)
    58ec:	00bfff44 	movi	r2,-3
    58f0:	b0801c16 	blt	r22,r2,5964 <___vfprintf_internal_r+0x1de8>
    58f4:	d9402917 	ldw	r5,164(sp)
    58f8:	2d801a16 	blt	r5,r22,5964 <___vfprintf_internal_r+0x1de8>
    58fc:	dd803215 	stw	r22,200(sp)
    5900:	003e8906 	br	5328 <__alt_data_end+0xff005328>
    5904:	01000074 	movhi	r4,1
    5908:	21087384 	addi	r4,r4,8654
    590c:	d9002b15 	stw	r4,172(sp)
    5910:	003c9106 	br	4b58 <__alt_data_end+0xff004b58>
    5914:	e005883a 	mov	r2,fp
    5918:	003e7906 	br	5300 <__alt_data_end+0xff005300>
    591c:	d9402917 	ldw	r5,164(sp)
    5920:	df002783 	ldbu	fp,158(sp)
    5924:	dcc02d15 	stw	r19,180(sp)
    5928:	d9402a15 	stw	r5,168(sp)
    592c:	d9402e15 	stw	r5,184(sp)
    5930:	d8002915 	stw	zero,164(sp)
    5934:	d8003215 	stw	zero,200(sp)
    5938:	003a5d06 	br	42b0 <__alt_data_end+0xff0042b0>
    593c:	9080004c 	andi	r2,r18,1
    5940:	0039883a 	mov	fp,zero
    5944:	10000426 	beq	r2,zero,5958 <___vfprintf_internal_r+0x1ddc>
    5948:	00800c04 	movi	r2,48
    594c:	dc001dc4 	addi	r16,sp,119
    5950:	d8801dc5 	stb	r2,119(sp)
    5954:	003b8006 	br	4758 <__alt_data_end+0xff004758>
    5958:	d8002e15 	stw	zero,184(sp)
    595c:	dc001e04 	addi	r16,sp,120
    5960:	003a4d06 	br	4298 <__alt_data_end+0xff004298>
    5964:	8c7fff84 	addi	r17,r17,-2
    5968:	b5bfffc4 	addi	r22,r22,-1
    596c:	dd802615 	stw	r22,152(sp)
    5970:	dc4022c5 	stb	r17,139(sp)
    5974:	b000bf16 	blt	r22,zero,5c74 <___vfprintf_internal_r+0x20f8>
    5978:	00800ac4 	movi	r2,43
    597c:	d8802305 	stb	r2,140(sp)
    5980:	00800244 	movi	r2,9
    5984:	15807016 	blt	r2,r22,5b48 <___vfprintf_internal_r+0x1fcc>
    5988:	00800c04 	movi	r2,48
    598c:	b5800c04 	addi	r22,r22,48
    5990:	d8802345 	stb	r2,141(sp)
    5994:	dd802385 	stb	r22,142(sp)
    5998:	d88023c4 	addi	r2,sp,143
    599c:	df0022c4 	addi	fp,sp,139
    59a0:	d8c03317 	ldw	r3,204(sp)
    59a4:	1739c83a 	sub	fp,r2,fp
    59a8:	d9003317 	ldw	r4,204(sp)
    59ac:	e0c7883a 	add	r3,fp,r3
    59b0:	df003a15 	stw	fp,232(sp)
    59b4:	d8c02e15 	stw	r3,184(sp)
    59b8:	00800044 	movi	r2,1
    59bc:	1100b30e 	bge	r2,r4,5c8c <___vfprintf_internal_r+0x2110>
    59c0:	d8c02e17 	ldw	r3,184(sp)
    59c4:	18c00044 	addi	r3,r3,1
    59c8:	d8c02e15 	stw	r3,184(sp)
    59cc:	1805883a 	mov	r2,r3
    59d0:	1800ac16 	blt	r3,zero,5c84 <___vfprintf_internal_r+0x2108>
    59d4:	d8003215 	stw	zero,200(sp)
    59d8:	003e5d06 	br	5350 <__alt_data_end+0xff005350>
    59dc:	d9002c17 	ldw	r4,176(sp)
    59e0:	d9801e04 	addi	r6,sp,120
    59e4:	b80b883a 	mov	r5,r23
    59e8:	000a9180 	call	a918 <__sprint_r>
    59ec:	1039651e 	bne	r2,zero,3f84 <__alt_data_end+0xff003f84>
    59f0:	dc402617 	ldw	r17,152(sp)
    59f4:	d8c02017 	ldw	r3,128(sp)
    59f8:	d8801f17 	ldw	r2,124(sp)
    59fc:	da000404 	addi	r8,sp,16
    5a00:	003ed606 	br	555c <__alt_data_end+0xff00555c>
    5a04:	582b883a 	mov	r21,r11
    5a08:	d8002915 	stw	zero,164(sp)
    5a0c:	0038bd06 	br	3d04 <__alt_data_end+0xff003d04>
    5a10:	d8802917 	ldw	r2,164(sp)
    5a14:	103e071e 	bne	r2,zero,5234 <__alt_data_end+0xff005234>
    5a18:	dc002915 	stw	r16,164(sp)
    5a1c:	003e0506 	br	5234 <__alt_data_end+0xff005234>
    5a20:	d9002917 	ldw	r4,164(sp)
    5a24:	20c00044 	addi	r3,r4,1
    5a28:	003e0f06 	br	5268 <__alt_data_end+0xff005268>
    5a2c:	01400184 	movi	r5,6
    5a30:	d9402915 	stw	r5,164(sp)
    5a34:	003dff06 	br	5234 <__alt_data_end+0xff005234>
    5a38:	d8802104 	addi	r2,sp,132
    5a3c:	d8800315 	stw	r2,12(sp)
    5a40:	d8802504 	addi	r2,sp,148
    5a44:	d8800215 	stw	r2,8(sp)
    5a48:	d8802604 	addi	r2,sp,152
    5a4c:	d8800115 	stw	r2,4(sp)
    5a50:	d8802917 	ldw	r2,164(sp)
    5a54:	d9403617 	ldw	r5,216(sp)
    5a58:	d9002c17 	ldw	r4,176(sp)
    5a5c:	d8800015 	stw	r2,0(sp)
    5a60:	01c000c4 	movi	r7,3
    5a64:	980d883a 	mov	r6,r19
    5a68:	da003d15 	stw	r8,244(sp)
    5a6c:	00061a00 	call	61a0 <_dtoa_r>
    5a70:	d8c02917 	ldw	r3,164(sp)
    5a74:	da003d17 	ldw	r8,244(sp)
    5a78:	1021883a 	mov	r16,r2
    5a7c:	10f9883a 	add	fp,r2,r3
    5a80:	81000007 	ldb	r4,0(r16)
    5a84:	00800c04 	movi	r2,48
    5a88:	20805e26 	beq	r4,r2,5c04 <___vfprintf_internal_r+0x2088>
    5a8c:	d8c02617 	ldw	r3,152(sp)
    5a90:	e0f9883a 	add	fp,fp,r3
    5a94:	003e0a06 	br	52c0 <__alt_data_end+0xff0052c0>
    5a98:	00c00b44 	movi	r3,45
    5a9c:	24e0003c 	xorhi	r19,r4,32768
    5aa0:	d8c02a05 	stb	r3,168(sp)
    5aa4:	003de906 	br	524c <__alt_data_end+0xff00524c>
    5aa8:	d8c03217 	ldw	r3,200(sp)
    5aac:	00c07a0e 	bge	zero,r3,5c98 <___vfprintf_internal_r+0x211c>
    5ab0:	00800044 	movi	r2,1
    5ab4:	d9003317 	ldw	r4,204(sp)
    5ab8:	1105883a 	add	r2,r2,r4
    5abc:	d8802e15 	stw	r2,184(sp)
    5ac0:	10004e16 	blt	r2,zero,5bfc <___vfprintf_internal_r+0x2080>
    5ac4:	044019c4 	movi	r17,103
    5ac8:	003e2106 	br	5350 <__alt_data_end+0xff005350>
    5acc:	d9002917 	ldw	r4,164(sp)
    5ad0:	d8802104 	addi	r2,sp,132
    5ad4:	d8800315 	stw	r2,12(sp)
    5ad8:	d9000015 	stw	r4,0(sp)
    5adc:	d8802504 	addi	r2,sp,148
    5ae0:	d9403617 	ldw	r5,216(sp)
    5ae4:	d9002c17 	ldw	r4,176(sp)
    5ae8:	d8800215 	stw	r2,8(sp)
    5aec:	d8802604 	addi	r2,sp,152
    5af0:	d8800115 	stw	r2,4(sp)
    5af4:	01c000c4 	movi	r7,3
    5af8:	980d883a 	mov	r6,r19
    5afc:	da003d15 	stw	r8,244(sp)
    5b00:	00061a00 	call	61a0 <_dtoa_r>
    5b04:	d8c02917 	ldw	r3,164(sp)
    5b08:	da003d17 	ldw	r8,244(sp)
    5b0c:	1021883a 	mov	r16,r2
    5b10:	00801184 	movi	r2,70
    5b14:	80f9883a 	add	fp,r16,r3
    5b18:	88bfd926 	beq	r17,r2,5a80 <__alt_data_end+0xff005a80>
    5b1c:	003de806 	br	52c0 <__alt_data_end+0xff0052c0>
    5b20:	d9002917 	ldw	r4,164(sp)
    5b24:	00c04d0e 	bge	zero,r3,5c5c <___vfprintf_internal_r+0x20e0>
    5b28:	2000441e 	bne	r4,zero,5c3c <___vfprintf_internal_r+0x20c0>
    5b2c:	9480004c 	andi	r18,r18,1
    5b30:	9000421e 	bne	r18,zero,5c3c <___vfprintf_internal_r+0x20c0>
    5b34:	1805883a 	mov	r2,r3
    5b38:	18007016 	blt	r3,zero,5cfc <___vfprintf_internal_r+0x2180>
    5b3c:	d8c03217 	ldw	r3,200(sp)
    5b40:	d8c02e15 	stw	r3,184(sp)
    5b44:	003e0206 	br	5350 <__alt_data_end+0xff005350>
    5b48:	df0022c4 	addi	fp,sp,139
    5b4c:	dc002915 	stw	r16,164(sp)
    5b50:	4027883a 	mov	r19,r8
    5b54:	e021883a 	mov	r16,fp
    5b58:	b009883a 	mov	r4,r22
    5b5c:	01400284 	movi	r5,10
    5b60:	00025f80 	call	25f8 <__modsi3>
    5b64:	10800c04 	addi	r2,r2,48
    5b68:	843fffc4 	addi	r16,r16,-1
    5b6c:	b009883a 	mov	r4,r22
    5b70:	01400284 	movi	r5,10
    5b74:	80800005 	stb	r2,0(r16)
    5b78:	00025740 	call	2574 <__divsi3>
    5b7c:	102d883a 	mov	r22,r2
    5b80:	00800244 	movi	r2,9
    5b84:	15bff416 	blt	r2,r22,5b58 <__alt_data_end+0xff005b58>
    5b88:	9811883a 	mov	r8,r19
    5b8c:	b0800c04 	addi	r2,r22,48
    5b90:	8027883a 	mov	r19,r16
    5b94:	997fffc4 	addi	r5,r19,-1
    5b98:	98bfffc5 	stb	r2,-1(r19)
    5b9c:	dc002917 	ldw	r16,164(sp)
    5ba0:	2f006a2e 	bgeu	r5,fp,5d4c <___vfprintf_internal_r+0x21d0>
    5ba4:	d9c02384 	addi	r7,sp,142
    5ba8:	3ccfc83a 	sub	r7,r7,r19
    5bac:	d9002344 	addi	r4,sp,141
    5bb0:	e1cf883a 	add	r7,fp,r7
    5bb4:	00000106 	br	5bbc <___vfprintf_internal_r+0x2040>
    5bb8:	28800003 	ldbu	r2,0(r5)
    5bbc:	20800005 	stb	r2,0(r4)
    5bc0:	21000044 	addi	r4,r4,1
    5bc4:	29400044 	addi	r5,r5,1
    5bc8:	393ffb1e 	bne	r7,r4,5bb8 <__alt_data_end+0xff005bb8>
    5bcc:	d8802304 	addi	r2,sp,140
    5bd0:	14c5c83a 	sub	r2,r2,r19
    5bd4:	d8c02344 	addi	r3,sp,141
    5bd8:	1885883a 	add	r2,r3,r2
    5bdc:	003f7006 	br	59a0 <__alt_data_end+0xff0059a0>
    5be0:	0005883a 	mov	r2,zero
    5be4:	003f0f06 	br	5824 <__alt_data_end+0xff005824>
    5be8:	d8c03217 	ldw	r3,200(sp)
    5bec:	18c00044 	addi	r3,r3,1
    5bf0:	d8c02e15 	stw	r3,184(sp)
    5bf4:	1805883a 	mov	r2,r3
    5bf8:	183fb20e 	bge	r3,zero,5ac4 <__alt_data_end+0xff005ac4>
    5bfc:	0005883a 	mov	r2,zero
    5c00:	003fb006 	br	5ac4 <__alt_data_end+0xff005ac4>
    5c04:	d9003617 	ldw	r4,216(sp)
    5c08:	000d883a 	mov	r6,zero
    5c0c:	000f883a 	mov	r7,zero
    5c10:	980b883a 	mov	r5,r19
    5c14:	d8c03c15 	stw	r3,240(sp)
    5c18:	da003d15 	stw	r8,244(sp)
    5c1c:	000daf40 	call	daf4 <__eqdf2>
    5c20:	d8c03c17 	ldw	r3,240(sp)
    5c24:	da003d17 	ldw	r8,244(sp)
    5c28:	103f9826 	beq	r2,zero,5a8c <__alt_data_end+0xff005a8c>
    5c2c:	00800044 	movi	r2,1
    5c30:	10c7c83a 	sub	r3,r2,r3
    5c34:	d8c02615 	stw	r3,152(sp)
    5c38:	003f9506 	br	5a90 <__alt_data_end+0xff005a90>
    5c3c:	d9002917 	ldw	r4,164(sp)
    5c40:	d8c03217 	ldw	r3,200(sp)
    5c44:	20800044 	addi	r2,r4,1
    5c48:	1885883a 	add	r2,r3,r2
    5c4c:	d8802e15 	stw	r2,184(sp)
    5c50:	103dbf0e 	bge	r2,zero,5350 <__alt_data_end+0xff005350>
    5c54:	0005883a 	mov	r2,zero
    5c58:	003dbd06 	br	5350 <__alt_data_end+0xff005350>
    5c5c:	2000211e 	bne	r4,zero,5ce4 <___vfprintf_internal_r+0x2168>
    5c60:	9480004c 	andi	r18,r18,1
    5c64:	90001f1e 	bne	r18,zero,5ce4 <___vfprintf_internal_r+0x2168>
    5c68:	00800044 	movi	r2,1
    5c6c:	d8802e15 	stw	r2,184(sp)
    5c70:	003db706 	br	5350 <__alt_data_end+0xff005350>
    5c74:	00800b44 	movi	r2,45
    5c78:	05adc83a 	sub	r22,zero,r22
    5c7c:	d8802305 	stb	r2,140(sp)
    5c80:	003f3f06 	br	5980 <__alt_data_end+0xff005980>
    5c84:	0005883a 	mov	r2,zero
    5c88:	003f5206 	br	59d4 <__alt_data_end+0xff0059d4>
    5c8c:	90a4703a 	and	r18,r18,r2
    5c90:	903f4e26 	beq	r18,zero,59cc <__alt_data_end+0xff0059cc>
    5c94:	003f4a06 	br	59c0 <__alt_data_end+0xff0059c0>
    5c98:	00800084 	movi	r2,2
    5c9c:	10c5c83a 	sub	r2,r2,r3
    5ca0:	003f8406 	br	5ab4 <__alt_data_end+0xff005ab4>
    5ca4:	d8802d17 	ldw	r2,180(sp)
    5ca8:	d9002d17 	ldw	r4,180(sp)
    5cac:	ac400043 	ldbu	r17,1(r21)
    5cb0:	10800017 	ldw	r2,0(r2)
    5cb4:	582b883a 	mov	r21,r11
    5cb8:	d8802915 	stw	r2,164(sp)
    5cbc:	20800104 	addi	r2,r4,4
    5cc0:	d9002917 	ldw	r4,164(sp)
    5cc4:	d8802d15 	stw	r2,180(sp)
    5cc8:	203e7a0e 	bge	r4,zero,56b4 <__alt_data_end+0xff0056b4>
    5ccc:	8c403fcc 	andi	r17,r17,255
    5cd0:	00bfffc4 	movi	r2,-1
    5cd4:	8c40201c 	xori	r17,r17,128
    5cd8:	d8802915 	stw	r2,164(sp)
    5cdc:	8c7fe004 	addi	r17,r17,-128
    5ce0:	00380706 	br	3d00 <__alt_data_end+0xff003d00>
    5ce4:	d8c02917 	ldw	r3,164(sp)
    5ce8:	18c00084 	addi	r3,r3,2
    5cec:	d8c02e15 	stw	r3,184(sp)
    5cf0:	1805883a 	mov	r2,r3
    5cf4:	183d960e 	bge	r3,zero,5350 <__alt_data_end+0xff005350>
    5cf8:	003fd606 	br	5c54 <__alt_data_end+0xff005c54>
    5cfc:	0005883a 	mov	r2,zero
    5d00:	003f8e06 	br	5b3c <__alt_data_end+0xff005b3c>
    5d04:	9080004c 	andi	r2,r18,1
    5d08:	103f811e 	bne	r2,zero,5b10 <__alt_data_end+0xff005b10>
    5d0c:	d8802117 	ldw	r2,132(sp)
    5d10:	1405c83a 	sub	r2,r2,r16
    5d14:	d8803315 	stw	r2,204(sp)
    5d18:	b47ef326 	beq	r22,r17,58e8 <__alt_data_end+0xff0058e8>
    5d1c:	dd802617 	ldw	r22,152(sp)
    5d20:	003f1106 	br	5968 <__alt_data_end+0xff005968>
    5d24:	d9c02785 	stb	r7,158(sp)
    5d28:	00390406 	br	413c <__alt_data_end+0xff00413c>
    5d2c:	d9c02785 	stb	r7,158(sp)
    5d30:	0038d306 	br	4080 <__alt_data_end+0xff004080>
    5d34:	d9c02785 	stb	r7,158(sp)
    5d38:	003a6106 	br	46c0 <__alt_data_end+0xff0046c0>
    5d3c:	d9c02785 	stb	r7,158(sp)
    5d40:	003af806 	br	4924 <__alt_data_end+0xff004924>
    5d44:	0005883a 	mov	r2,zero
    5d48:	003d7e06 	br	5344 <__alt_data_end+0xff005344>
    5d4c:	d8802344 	addi	r2,sp,141
    5d50:	003f1306 	br	59a0 <__alt_data_end+0xff0059a0>
    5d54:	d9c02785 	stb	r7,158(sp)
    5d58:	00392306 	br	41e8 <__alt_data_end+0xff0041e8>
    5d5c:	d9c02785 	stb	r7,158(sp)
    5d60:	003aa906 	br	4808 <__alt_data_end+0xff004808>
    5d64:	d9c02785 	stb	r7,158(sp)
    5d68:	003a3d06 	br	4660 <__alt_data_end+0xff004660>
    5d6c:	d9c02785 	stb	r7,158(sp)
    5d70:	003aca06 	br	489c <__alt_data_end+0xff00489c>

00005d74 <__vfprintf_internal>:
    5d74:	00800074 	movhi	r2,1
    5d78:	108fce04 	addi	r2,r2,16184
    5d7c:	300f883a 	mov	r7,r6
    5d80:	280d883a 	mov	r6,r5
    5d84:	200b883a 	mov	r5,r4
    5d88:	11000017 	ldw	r4,0(r2)
    5d8c:	0003b7c1 	jmpi	3b7c <___vfprintf_internal_r>

00005d90 <__sbprintf>:
    5d90:	2880030b 	ldhu	r2,12(r5)
    5d94:	2ac01917 	ldw	r11,100(r5)
    5d98:	2a80038b 	ldhu	r10,14(r5)
    5d9c:	2a400717 	ldw	r9,28(r5)
    5da0:	2a000917 	ldw	r8,36(r5)
    5da4:	defee204 	addi	sp,sp,-1144
    5da8:	00c10004 	movi	r3,1024
    5dac:	dc011a15 	stw	r16,1128(sp)
    5db0:	10bfff4c 	andi	r2,r2,65533
    5db4:	2821883a 	mov	r16,r5
    5db8:	d8cb883a 	add	r5,sp,r3
    5dbc:	dc811c15 	stw	r18,1136(sp)
    5dc0:	dc411b15 	stw	r17,1132(sp)
    5dc4:	dfc11d15 	stw	ra,1140(sp)
    5dc8:	2025883a 	mov	r18,r4
    5dcc:	d881030d 	sth	r2,1036(sp)
    5dd0:	dac11915 	stw	r11,1124(sp)
    5dd4:	da81038d 	sth	r10,1038(sp)
    5dd8:	da410715 	stw	r9,1052(sp)
    5ddc:	da010915 	stw	r8,1060(sp)
    5de0:	dec10015 	stw	sp,1024(sp)
    5de4:	dec10415 	stw	sp,1040(sp)
    5de8:	d8c10215 	stw	r3,1032(sp)
    5dec:	d8c10515 	stw	r3,1044(sp)
    5df0:	d8010615 	stw	zero,1048(sp)
    5df4:	0003b7c0 	call	3b7c <___vfprintf_internal_r>
    5df8:	1023883a 	mov	r17,r2
    5dfc:	10000416 	blt	r2,zero,5e10 <__sbprintf+0x80>
    5e00:	d9410004 	addi	r5,sp,1024
    5e04:	9009883a 	mov	r4,r18
    5e08:	0007a440 	call	7a44 <_fflush_r>
    5e0c:	10000d1e 	bne	r2,zero,5e44 <__sbprintf+0xb4>
    5e10:	d881030b 	ldhu	r2,1036(sp)
    5e14:	1080100c 	andi	r2,r2,64
    5e18:	10000326 	beq	r2,zero,5e28 <__sbprintf+0x98>
    5e1c:	8080030b 	ldhu	r2,12(r16)
    5e20:	10801014 	ori	r2,r2,64
    5e24:	8080030d 	sth	r2,12(r16)
    5e28:	8805883a 	mov	r2,r17
    5e2c:	dfc11d17 	ldw	ra,1140(sp)
    5e30:	dc811c17 	ldw	r18,1136(sp)
    5e34:	dc411b17 	ldw	r17,1132(sp)
    5e38:	dc011a17 	ldw	r16,1128(sp)
    5e3c:	dec11e04 	addi	sp,sp,1144
    5e40:	f800283a 	ret
    5e44:	047fffc4 	movi	r17,-1
    5e48:	003ff106 	br	5e10 <__alt_data_end+0xff005e10>

00005e4c <__swsetup_r>:
    5e4c:	00800074 	movhi	r2,1
    5e50:	defffd04 	addi	sp,sp,-12
    5e54:	108fce04 	addi	r2,r2,16184
    5e58:	dc400115 	stw	r17,4(sp)
    5e5c:	2023883a 	mov	r17,r4
    5e60:	11000017 	ldw	r4,0(r2)
    5e64:	dc000015 	stw	r16,0(sp)
    5e68:	dfc00215 	stw	ra,8(sp)
    5e6c:	2821883a 	mov	r16,r5
    5e70:	20000226 	beq	r4,zero,5e7c <__swsetup_r+0x30>
    5e74:	20800e17 	ldw	r2,56(r4)
    5e78:	10003126 	beq	r2,zero,5f40 <__swsetup_r+0xf4>
    5e7c:	8080030b 	ldhu	r2,12(r16)
    5e80:	10c0020c 	andi	r3,r2,8
    5e84:	1009883a 	mov	r4,r2
    5e88:	18000f26 	beq	r3,zero,5ec8 <__swsetup_r+0x7c>
    5e8c:	80c00417 	ldw	r3,16(r16)
    5e90:	18001526 	beq	r3,zero,5ee8 <__swsetup_r+0x9c>
    5e94:	1100004c 	andi	r4,r2,1
    5e98:	20001c1e 	bne	r4,zero,5f0c <__swsetup_r+0xc0>
    5e9c:	1080008c 	andi	r2,r2,2
    5ea0:	1000291e 	bne	r2,zero,5f48 <__swsetup_r+0xfc>
    5ea4:	80800517 	ldw	r2,20(r16)
    5ea8:	80800215 	stw	r2,8(r16)
    5eac:	18001c26 	beq	r3,zero,5f20 <__swsetup_r+0xd4>
    5eb0:	0005883a 	mov	r2,zero
    5eb4:	dfc00217 	ldw	ra,8(sp)
    5eb8:	dc400117 	ldw	r17,4(sp)
    5ebc:	dc000017 	ldw	r16,0(sp)
    5ec0:	dec00304 	addi	sp,sp,12
    5ec4:	f800283a 	ret
    5ec8:	2080040c 	andi	r2,r4,16
    5ecc:	10002e26 	beq	r2,zero,5f88 <__swsetup_r+0x13c>
    5ed0:	2080010c 	andi	r2,r4,4
    5ed4:	10001e1e 	bne	r2,zero,5f50 <__swsetup_r+0x104>
    5ed8:	80c00417 	ldw	r3,16(r16)
    5edc:	20800214 	ori	r2,r4,8
    5ee0:	8080030d 	sth	r2,12(r16)
    5ee4:	183feb1e 	bne	r3,zero,5e94 <__alt_data_end+0xff005e94>
    5ee8:	1100a00c 	andi	r4,r2,640
    5eec:	01408004 	movi	r5,512
    5ef0:	217fe826 	beq	r4,r5,5e94 <__alt_data_end+0xff005e94>
    5ef4:	800b883a 	mov	r5,r16
    5ef8:	8809883a 	mov	r4,r17
    5efc:	00089c40 	call	89c4 <__smakebuf_r>
    5f00:	8080030b 	ldhu	r2,12(r16)
    5f04:	80c00417 	ldw	r3,16(r16)
    5f08:	003fe206 	br	5e94 <__alt_data_end+0xff005e94>
    5f0c:	80800517 	ldw	r2,20(r16)
    5f10:	80000215 	stw	zero,8(r16)
    5f14:	0085c83a 	sub	r2,zero,r2
    5f18:	80800615 	stw	r2,24(r16)
    5f1c:	183fe41e 	bne	r3,zero,5eb0 <__alt_data_end+0xff005eb0>
    5f20:	80c0030b 	ldhu	r3,12(r16)
    5f24:	0005883a 	mov	r2,zero
    5f28:	1900200c 	andi	r4,r3,128
    5f2c:	203fe126 	beq	r4,zero,5eb4 <__alt_data_end+0xff005eb4>
    5f30:	18c01014 	ori	r3,r3,64
    5f34:	80c0030d 	sth	r3,12(r16)
    5f38:	00bfffc4 	movi	r2,-1
    5f3c:	003fdd06 	br	5eb4 <__alt_data_end+0xff005eb4>
    5f40:	0007e200 	call	7e20 <__sinit>
    5f44:	003fcd06 	br	5e7c <__alt_data_end+0xff005e7c>
    5f48:	0005883a 	mov	r2,zero
    5f4c:	003fd606 	br	5ea8 <__alt_data_end+0xff005ea8>
    5f50:	81400c17 	ldw	r5,48(r16)
    5f54:	28000626 	beq	r5,zero,5f70 <__swsetup_r+0x124>
    5f58:	80801004 	addi	r2,r16,64
    5f5c:	28800326 	beq	r5,r2,5f6c <__swsetup_r+0x120>
    5f60:	8809883a 	mov	r4,r17
    5f64:	0007f940 	call	7f94 <_free_r>
    5f68:	8100030b 	ldhu	r4,12(r16)
    5f6c:	80000c15 	stw	zero,48(r16)
    5f70:	80c00417 	ldw	r3,16(r16)
    5f74:	00bff6c4 	movi	r2,-37
    5f78:	1108703a 	and	r4,r2,r4
    5f7c:	80000115 	stw	zero,4(r16)
    5f80:	80c00015 	stw	r3,0(r16)
    5f84:	003fd506 	br	5edc <__alt_data_end+0xff005edc>
    5f88:	00800244 	movi	r2,9
    5f8c:	88800015 	stw	r2,0(r17)
    5f90:	20801014 	ori	r2,r4,64
    5f94:	8080030d 	sth	r2,12(r16)
    5f98:	00bfffc4 	movi	r2,-1
    5f9c:	003fc506 	br	5eb4 <__alt_data_end+0xff005eb4>

00005fa0 <quorem>:
    5fa0:	defff704 	addi	sp,sp,-36
    5fa4:	dc800215 	stw	r18,8(sp)
    5fa8:	20800417 	ldw	r2,16(r4)
    5fac:	2c800417 	ldw	r18,16(r5)
    5fb0:	dfc00815 	stw	ra,32(sp)
    5fb4:	ddc00715 	stw	r23,28(sp)
    5fb8:	dd800615 	stw	r22,24(sp)
    5fbc:	dd400515 	stw	r21,20(sp)
    5fc0:	dd000415 	stw	r20,16(sp)
    5fc4:	dcc00315 	stw	r19,12(sp)
    5fc8:	dc400115 	stw	r17,4(sp)
    5fcc:	dc000015 	stw	r16,0(sp)
    5fd0:	14807116 	blt	r2,r18,6198 <quorem+0x1f8>
    5fd4:	94bfffc4 	addi	r18,r18,-1
    5fd8:	94ad883a 	add	r22,r18,r18
    5fdc:	b5ad883a 	add	r22,r22,r22
    5fe0:	2c400504 	addi	r17,r5,20
    5fe4:	8da9883a 	add	r20,r17,r22
    5fe8:	25400504 	addi	r21,r4,20
    5fec:	282f883a 	mov	r23,r5
    5ff0:	adad883a 	add	r22,r21,r22
    5ff4:	a1400017 	ldw	r5,0(r20)
    5ff8:	2021883a 	mov	r16,r4
    5ffc:	b1000017 	ldw	r4,0(r22)
    6000:	29400044 	addi	r5,r5,1
    6004:	000266c0 	call	266c <__udivsi3>
    6008:	1027883a 	mov	r19,r2
    600c:	10002c26 	beq	r2,zero,60c0 <quorem+0x120>
    6010:	a813883a 	mov	r9,r21
    6014:	880b883a 	mov	r5,r17
    6018:	0009883a 	mov	r4,zero
    601c:	000d883a 	mov	r6,zero
    6020:	2a000017 	ldw	r8,0(r5)
    6024:	49c00017 	ldw	r7,0(r9)
    6028:	29400104 	addi	r5,r5,4
    602c:	40bfffcc 	andi	r2,r8,65535
    6030:	14c5383a 	mul	r2,r2,r19
    6034:	4010d43a 	srli	r8,r8,16
    6038:	38ffffcc 	andi	r3,r7,65535
    603c:	1105883a 	add	r2,r2,r4
    6040:	1008d43a 	srli	r4,r2,16
    6044:	44d1383a 	mul	r8,r8,r19
    6048:	198d883a 	add	r6,r3,r6
    604c:	10ffffcc 	andi	r3,r2,65535
    6050:	30c7c83a 	sub	r3,r6,r3
    6054:	380ed43a 	srli	r7,r7,16
    6058:	4105883a 	add	r2,r8,r4
    605c:	180dd43a 	srai	r6,r3,16
    6060:	113fffcc 	andi	r4,r2,65535
    6064:	390fc83a 	sub	r7,r7,r4
    6068:	398d883a 	add	r6,r7,r6
    606c:	300e943a 	slli	r7,r6,16
    6070:	18ffffcc 	andi	r3,r3,65535
    6074:	1008d43a 	srli	r4,r2,16
    6078:	38ceb03a 	or	r7,r7,r3
    607c:	49c00015 	stw	r7,0(r9)
    6080:	300dd43a 	srai	r6,r6,16
    6084:	4a400104 	addi	r9,r9,4
    6088:	a17fe52e 	bgeu	r20,r5,6020 <__alt_data_end+0xff006020>
    608c:	b0800017 	ldw	r2,0(r22)
    6090:	10000b1e 	bne	r2,zero,60c0 <quorem+0x120>
    6094:	b0bfff04 	addi	r2,r22,-4
    6098:	a880082e 	bgeu	r21,r2,60bc <quorem+0x11c>
    609c:	b0ffff17 	ldw	r3,-4(r22)
    60a0:	18000326 	beq	r3,zero,60b0 <quorem+0x110>
    60a4:	00000506 	br	60bc <quorem+0x11c>
    60a8:	10c00017 	ldw	r3,0(r2)
    60ac:	1800031e 	bne	r3,zero,60bc <quorem+0x11c>
    60b0:	10bfff04 	addi	r2,r2,-4
    60b4:	94bfffc4 	addi	r18,r18,-1
    60b8:	a8bffb36 	bltu	r21,r2,60a8 <__alt_data_end+0xff0060a8>
    60bc:	84800415 	stw	r18,16(r16)
    60c0:	b80b883a 	mov	r5,r23
    60c4:	8009883a 	mov	r4,r16
    60c8:	00098f80 	call	98f8 <__mcmp>
    60cc:	10002616 	blt	r2,zero,6168 <quorem+0x1c8>
    60d0:	9cc00044 	addi	r19,r19,1
    60d4:	a805883a 	mov	r2,r21
    60d8:	000b883a 	mov	r5,zero
    60dc:	11000017 	ldw	r4,0(r2)
    60e0:	89800017 	ldw	r6,0(r17)
    60e4:	10800104 	addi	r2,r2,4
    60e8:	20ffffcc 	andi	r3,r4,65535
    60ec:	194b883a 	add	r5,r3,r5
    60f0:	30ffffcc 	andi	r3,r6,65535
    60f4:	28c7c83a 	sub	r3,r5,r3
    60f8:	300cd43a 	srli	r6,r6,16
    60fc:	2008d43a 	srli	r4,r4,16
    6100:	180bd43a 	srai	r5,r3,16
    6104:	18ffffcc 	andi	r3,r3,65535
    6108:	2189c83a 	sub	r4,r4,r6
    610c:	2149883a 	add	r4,r4,r5
    6110:	200c943a 	slli	r6,r4,16
    6114:	8c400104 	addi	r17,r17,4
    6118:	200bd43a 	srai	r5,r4,16
    611c:	30c6b03a 	or	r3,r6,r3
    6120:	10ffff15 	stw	r3,-4(r2)
    6124:	a47fed2e 	bgeu	r20,r17,60dc <__alt_data_end+0xff0060dc>
    6128:	9485883a 	add	r2,r18,r18
    612c:	1085883a 	add	r2,r2,r2
    6130:	a887883a 	add	r3,r21,r2
    6134:	18800017 	ldw	r2,0(r3)
    6138:	10000b1e 	bne	r2,zero,6168 <quorem+0x1c8>
    613c:	18bfff04 	addi	r2,r3,-4
    6140:	a880082e 	bgeu	r21,r2,6164 <quorem+0x1c4>
    6144:	18ffff17 	ldw	r3,-4(r3)
    6148:	18000326 	beq	r3,zero,6158 <quorem+0x1b8>
    614c:	00000506 	br	6164 <quorem+0x1c4>
    6150:	10c00017 	ldw	r3,0(r2)
    6154:	1800031e 	bne	r3,zero,6164 <quorem+0x1c4>
    6158:	10bfff04 	addi	r2,r2,-4
    615c:	94bfffc4 	addi	r18,r18,-1
    6160:	a8bffb36 	bltu	r21,r2,6150 <__alt_data_end+0xff006150>
    6164:	84800415 	stw	r18,16(r16)
    6168:	9805883a 	mov	r2,r19
    616c:	dfc00817 	ldw	ra,32(sp)
    6170:	ddc00717 	ldw	r23,28(sp)
    6174:	dd800617 	ldw	r22,24(sp)
    6178:	dd400517 	ldw	r21,20(sp)
    617c:	dd000417 	ldw	r20,16(sp)
    6180:	dcc00317 	ldw	r19,12(sp)
    6184:	dc800217 	ldw	r18,8(sp)
    6188:	dc400117 	ldw	r17,4(sp)
    618c:	dc000017 	ldw	r16,0(sp)
    6190:	dec00904 	addi	sp,sp,36
    6194:	f800283a 	ret
    6198:	0005883a 	mov	r2,zero
    619c:	003ff306 	br	616c <__alt_data_end+0xff00616c>

000061a0 <_dtoa_r>:
    61a0:	20801017 	ldw	r2,64(r4)
    61a4:	deffde04 	addi	sp,sp,-136
    61a8:	df002015 	stw	fp,128(sp)
    61ac:	dcc01b15 	stw	r19,108(sp)
    61b0:	dc801a15 	stw	r18,104(sp)
    61b4:	dc401915 	stw	r17,100(sp)
    61b8:	dc001815 	stw	r16,96(sp)
    61bc:	dfc02115 	stw	ra,132(sp)
    61c0:	ddc01f15 	stw	r23,124(sp)
    61c4:	dd801e15 	stw	r22,120(sp)
    61c8:	dd401d15 	stw	r21,116(sp)
    61cc:	dd001c15 	stw	r20,112(sp)
    61d0:	d9c00315 	stw	r7,12(sp)
    61d4:	2039883a 	mov	fp,r4
    61d8:	3023883a 	mov	r17,r6
    61dc:	2825883a 	mov	r18,r5
    61e0:	dc002417 	ldw	r16,144(sp)
    61e4:	3027883a 	mov	r19,r6
    61e8:	10000826 	beq	r2,zero,620c <_dtoa_r+0x6c>
    61ec:	21801117 	ldw	r6,68(r4)
    61f0:	00c00044 	movi	r3,1
    61f4:	100b883a 	mov	r5,r2
    61f8:	1986983a 	sll	r3,r3,r6
    61fc:	11800115 	stw	r6,4(r2)
    6200:	10c00215 	stw	r3,8(r2)
    6204:	00090d80 	call	90d8 <_Bfree>
    6208:	e0001015 	stw	zero,64(fp)
    620c:	88002e16 	blt	r17,zero,62c8 <_dtoa_r+0x128>
    6210:	80000015 	stw	zero,0(r16)
    6214:	889ffc2c 	andhi	r2,r17,32752
    6218:	00dffc34 	movhi	r3,32752
    621c:	10c01c26 	beq	r2,r3,6290 <_dtoa_r+0xf0>
    6220:	000d883a 	mov	r6,zero
    6224:	000f883a 	mov	r7,zero
    6228:	9009883a 	mov	r4,r18
    622c:	980b883a 	mov	r5,r19
    6230:	000daf40 	call	daf4 <__eqdf2>
    6234:	10002b1e 	bne	r2,zero,62e4 <_dtoa_r+0x144>
    6238:	d9c02317 	ldw	r7,140(sp)
    623c:	00800044 	movi	r2,1
    6240:	38800015 	stw	r2,0(r7)
    6244:	d8802517 	ldw	r2,148(sp)
    6248:	10019e26 	beq	r2,zero,68c4 <_dtoa_r+0x724>
    624c:	d8c02517 	ldw	r3,148(sp)
    6250:	00800074 	movhi	r2,1
    6254:	10887344 	addi	r2,r2,8653
    6258:	18800015 	stw	r2,0(r3)
    625c:	10bfffc4 	addi	r2,r2,-1
    6260:	dfc02117 	ldw	ra,132(sp)
    6264:	df002017 	ldw	fp,128(sp)
    6268:	ddc01f17 	ldw	r23,124(sp)
    626c:	dd801e17 	ldw	r22,120(sp)
    6270:	dd401d17 	ldw	r21,116(sp)
    6274:	dd001c17 	ldw	r20,112(sp)
    6278:	dcc01b17 	ldw	r19,108(sp)
    627c:	dc801a17 	ldw	r18,104(sp)
    6280:	dc401917 	ldw	r17,100(sp)
    6284:	dc001817 	ldw	r16,96(sp)
    6288:	dec02204 	addi	sp,sp,136
    628c:	f800283a 	ret
    6290:	d8c02317 	ldw	r3,140(sp)
    6294:	0089c3c4 	movi	r2,9999
    6298:	18800015 	stw	r2,0(r3)
    629c:	90017726 	beq	r18,zero,687c <_dtoa_r+0x6dc>
    62a0:	00800074 	movhi	r2,1
    62a4:	10887f04 	addi	r2,r2,8700
    62a8:	d9002517 	ldw	r4,148(sp)
    62ac:	203fec26 	beq	r4,zero,6260 <__alt_data_end+0xff006260>
    62b0:	10c000c7 	ldb	r3,3(r2)
    62b4:	1801781e 	bne	r3,zero,6898 <_dtoa_r+0x6f8>
    62b8:	10c000c4 	addi	r3,r2,3
    62bc:	d9802517 	ldw	r6,148(sp)
    62c0:	30c00015 	stw	r3,0(r6)
    62c4:	003fe606 	br	6260 <__alt_data_end+0xff006260>
    62c8:	04e00034 	movhi	r19,32768
    62cc:	9cffffc4 	addi	r19,r19,-1
    62d0:	00800044 	movi	r2,1
    62d4:	8ce6703a 	and	r19,r17,r19
    62d8:	80800015 	stw	r2,0(r16)
    62dc:	9823883a 	mov	r17,r19
    62e0:	003fcc06 	br	6214 <__alt_data_end+0xff006214>
    62e4:	d8800204 	addi	r2,sp,8
    62e8:	d8800015 	stw	r2,0(sp)
    62ec:	d9c00104 	addi	r7,sp,4
    62f0:	900b883a 	mov	r5,r18
    62f4:	980d883a 	mov	r6,r19
    62f8:	e009883a 	mov	r4,fp
    62fc:	8820d53a 	srli	r16,r17,20
    6300:	0009cc40 	call	9cc4 <__d2b>
    6304:	d8800915 	stw	r2,36(sp)
    6308:	8001651e 	bne	r16,zero,68a0 <_dtoa_r+0x700>
    630c:	dd800217 	ldw	r22,8(sp)
    6310:	dc000117 	ldw	r16,4(sp)
    6314:	00800804 	movi	r2,32
    6318:	b421883a 	add	r16,r22,r16
    631c:	80c10c84 	addi	r3,r16,1074
    6320:	10c2d10e 	bge	r2,r3,6e68 <_dtoa_r+0xcc8>
    6324:	00801004 	movi	r2,64
    6328:	81010484 	addi	r4,r16,1042
    632c:	10c7c83a 	sub	r3,r2,r3
    6330:	9108d83a 	srl	r4,r18,r4
    6334:	88e2983a 	sll	r17,r17,r3
    6338:	2448b03a 	or	r4,r4,r17
    633c:	00030100 	call	3010 <__floatunsidf>
    6340:	017f8434 	movhi	r5,65040
    6344:	01800044 	movi	r6,1
    6348:	1009883a 	mov	r4,r2
    634c:	194b883a 	add	r5,r3,r5
    6350:	843fffc4 	addi	r16,r16,-1
    6354:	d9801115 	stw	r6,68(sp)
    6358:	000d883a 	mov	r6,zero
    635c:	01cffe34 	movhi	r7,16376
    6360:	000e4640 	call	e464 <__subdf3>
    6364:	0198dbf4 	movhi	r6,25455
    6368:	01cff4f4 	movhi	r7,16339
    636c:	3190d844 	addi	r6,r6,17249
    6370:	39e1e9c4 	addi	r7,r7,-30809
    6374:	1009883a 	mov	r4,r2
    6378:	180b883a 	mov	r5,r3
    637c:	000dd4c0 	call	dd4c <__muldf3>
    6380:	01a2d874 	movhi	r6,35681
    6384:	01cff1f4 	movhi	r7,16327
    6388:	31b22cc4 	addi	r6,r6,-14157
    638c:	39e28a04 	addi	r7,r7,-30168
    6390:	180b883a 	mov	r5,r3
    6394:	1009883a 	mov	r4,r2
    6398:	000d2480 	call	d248 <__adddf3>
    639c:	8009883a 	mov	r4,r16
    63a0:	1029883a 	mov	r20,r2
    63a4:	1823883a 	mov	r17,r3
    63a8:	000ede00 	call	ede0 <__floatsidf>
    63ac:	019427f4 	movhi	r6,20639
    63b0:	01cff4f4 	movhi	r7,16339
    63b4:	319e7ec4 	addi	r6,r6,31227
    63b8:	39d104c4 	addi	r7,r7,17427
    63bc:	1009883a 	mov	r4,r2
    63c0:	180b883a 	mov	r5,r3
    63c4:	000dd4c0 	call	dd4c <__muldf3>
    63c8:	100d883a 	mov	r6,r2
    63cc:	180f883a 	mov	r7,r3
    63d0:	a009883a 	mov	r4,r20
    63d4:	880b883a 	mov	r5,r17
    63d8:	000d2480 	call	d248 <__adddf3>
    63dc:	1009883a 	mov	r4,r2
    63e0:	180b883a 	mov	r5,r3
    63e4:	1029883a 	mov	r20,r2
    63e8:	1823883a 	mov	r17,r3
    63ec:	000ed600 	call	ed60 <__fixdfsi>
    63f0:	000d883a 	mov	r6,zero
    63f4:	000f883a 	mov	r7,zero
    63f8:	a009883a 	mov	r4,r20
    63fc:	880b883a 	mov	r5,r17
    6400:	d8800515 	stw	r2,20(sp)
    6404:	000dc580 	call	dc58 <__ledf2>
    6408:	10028716 	blt	r2,zero,6e28 <_dtoa_r+0xc88>
    640c:	d8c00517 	ldw	r3,20(sp)
    6410:	00800584 	movi	r2,22
    6414:	10c27536 	bltu	r2,r3,6dec <_dtoa_r+0xc4c>
    6418:	180490fa 	slli	r2,r3,3
    641c:	00c00074 	movhi	r3,1
    6420:	18c89b04 	addi	r3,r3,8812
    6424:	1885883a 	add	r2,r3,r2
    6428:	11000017 	ldw	r4,0(r2)
    642c:	11400117 	ldw	r5,4(r2)
    6430:	900d883a 	mov	r6,r18
    6434:	980f883a 	mov	r7,r19
    6438:	000db7c0 	call	db7c <__gedf2>
    643c:	00828d0e 	bge	zero,r2,6e74 <_dtoa_r+0xcd4>
    6440:	d9000517 	ldw	r4,20(sp)
    6444:	d8000e15 	stw	zero,56(sp)
    6448:	213fffc4 	addi	r4,r4,-1
    644c:	d9000515 	stw	r4,20(sp)
    6450:	b42dc83a 	sub	r22,r22,r16
    6454:	b5bfffc4 	addi	r22,r22,-1
    6458:	b0026f16 	blt	r22,zero,6e18 <_dtoa_r+0xc78>
    645c:	d8000815 	stw	zero,32(sp)
    6460:	d9c00517 	ldw	r7,20(sp)
    6464:	38026416 	blt	r7,zero,6df8 <_dtoa_r+0xc58>
    6468:	b1ed883a 	add	r22,r22,r7
    646c:	d9c00d15 	stw	r7,52(sp)
    6470:	d8000a15 	stw	zero,40(sp)
    6474:	d9800317 	ldw	r6,12(sp)
    6478:	00800244 	movi	r2,9
    647c:	11811436 	bltu	r2,r6,68d0 <_dtoa_r+0x730>
    6480:	00800144 	movi	r2,5
    6484:	1184e10e 	bge	r2,r6,780c <_dtoa_r+0x166c>
    6488:	31bfff04 	addi	r6,r6,-4
    648c:	d9800315 	stw	r6,12(sp)
    6490:	0023883a 	mov	r17,zero
    6494:	d9800317 	ldw	r6,12(sp)
    6498:	008000c4 	movi	r2,3
    649c:	30836726 	beq	r6,r2,723c <_dtoa_r+0x109c>
    64a0:	1183410e 	bge	r2,r6,71a8 <_dtoa_r+0x1008>
    64a4:	d9c00317 	ldw	r7,12(sp)
    64a8:	00800104 	movi	r2,4
    64ac:	38827c26 	beq	r7,r2,6ea0 <_dtoa_r+0xd00>
    64b0:	00800144 	movi	r2,5
    64b4:	3884c41e 	bne	r7,r2,77c8 <_dtoa_r+0x1628>
    64b8:	00800044 	movi	r2,1
    64bc:	d8800b15 	stw	r2,44(sp)
    64c0:	d8c00517 	ldw	r3,20(sp)
    64c4:	d9002217 	ldw	r4,136(sp)
    64c8:	1907883a 	add	r3,r3,r4
    64cc:	19800044 	addi	r6,r3,1
    64d0:	d8c00c15 	stw	r3,48(sp)
    64d4:	d9800615 	stw	r6,24(sp)
    64d8:	0183a40e 	bge	zero,r6,736c <_dtoa_r+0x11cc>
    64dc:	d9800617 	ldw	r6,24(sp)
    64e0:	3021883a 	mov	r16,r6
    64e4:	e0001115 	stw	zero,68(fp)
    64e8:	008005c4 	movi	r2,23
    64ec:	1184c92e 	bgeu	r2,r6,7814 <_dtoa_r+0x1674>
    64f0:	00c00044 	movi	r3,1
    64f4:	00800104 	movi	r2,4
    64f8:	1085883a 	add	r2,r2,r2
    64fc:	11000504 	addi	r4,r2,20
    6500:	180b883a 	mov	r5,r3
    6504:	18c00044 	addi	r3,r3,1
    6508:	313ffb2e 	bgeu	r6,r4,64f8 <__alt_data_end+0xff0064f8>
    650c:	e1401115 	stw	r5,68(fp)
    6510:	e009883a 	mov	r4,fp
    6514:	00090300 	call	9030 <_Balloc>
    6518:	d8800715 	stw	r2,28(sp)
    651c:	e0801015 	stw	r2,64(fp)
    6520:	00800384 	movi	r2,14
    6524:	1400f736 	bltu	r2,r16,6904 <_dtoa_r+0x764>
    6528:	8800f626 	beq	r17,zero,6904 <_dtoa_r+0x764>
    652c:	d9c00517 	ldw	r7,20(sp)
    6530:	01c39a0e 	bge	zero,r7,739c <_dtoa_r+0x11fc>
    6534:	388003cc 	andi	r2,r7,15
    6538:	100490fa 	slli	r2,r2,3
    653c:	382bd13a 	srai	r21,r7,4
    6540:	00c00074 	movhi	r3,1
    6544:	18c89b04 	addi	r3,r3,8812
    6548:	1885883a 	add	r2,r3,r2
    654c:	a8c0040c 	andi	r3,r21,16
    6550:	12400017 	ldw	r9,0(r2)
    6554:	12000117 	ldw	r8,4(r2)
    6558:	18037926 	beq	r3,zero,7340 <_dtoa_r+0x11a0>
    655c:	00800074 	movhi	r2,1
    6560:	10889104 	addi	r2,r2,8772
    6564:	11800817 	ldw	r6,32(r2)
    6568:	11c00917 	ldw	r7,36(r2)
    656c:	9009883a 	mov	r4,r18
    6570:	980b883a 	mov	r5,r19
    6574:	da001715 	stw	r8,92(sp)
    6578:	da401615 	stw	r9,88(sp)
    657c:	00027280 	call	2728 <__divdf3>
    6580:	da001717 	ldw	r8,92(sp)
    6584:	da401617 	ldw	r9,88(sp)
    6588:	ad4003cc 	andi	r21,r21,15
    658c:	040000c4 	movi	r16,3
    6590:	1023883a 	mov	r17,r2
    6594:	1829883a 	mov	r20,r3
    6598:	a8001126 	beq	r21,zero,65e0 <_dtoa_r+0x440>
    659c:	05c00074 	movhi	r23,1
    65a0:	bdc89104 	addi	r23,r23,8772
    65a4:	4805883a 	mov	r2,r9
    65a8:	4007883a 	mov	r3,r8
    65ac:	a980004c 	andi	r6,r21,1
    65b0:	1009883a 	mov	r4,r2
    65b4:	a82bd07a 	srai	r21,r21,1
    65b8:	180b883a 	mov	r5,r3
    65bc:	30000426 	beq	r6,zero,65d0 <_dtoa_r+0x430>
    65c0:	b9800017 	ldw	r6,0(r23)
    65c4:	b9c00117 	ldw	r7,4(r23)
    65c8:	84000044 	addi	r16,r16,1
    65cc:	000dd4c0 	call	dd4c <__muldf3>
    65d0:	bdc00204 	addi	r23,r23,8
    65d4:	a83ff51e 	bne	r21,zero,65ac <__alt_data_end+0xff0065ac>
    65d8:	1013883a 	mov	r9,r2
    65dc:	1811883a 	mov	r8,r3
    65e0:	480d883a 	mov	r6,r9
    65e4:	400f883a 	mov	r7,r8
    65e8:	8809883a 	mov	r4,r17
    65ec:	a00b883a 	mov	r5,r20
    65f0:	00027280 	call	2728 <__divdf3>
    65f4:	d8800f15 	stw	r2,60(sp)
    65f8:	d8c01015 	stw	r3,64(sp)
    65fc:	d8c00e17 	ldw	r3,56(sp)
    6600:	18000626 	beq	r3,zero,661c <_dtoa_r+0x47c>
    6604:	d9000f17 	ldw	r4,60(sp)
    6608:	d9401017 	ldw	r5,64(sp)
    660c:	000d883a 	mov	r6,zero
    6610:	01cffc34 	movhi	r7,16368
    6614:	000dc580 	call	dc58 <__ledf2>
    6618:	10040b16 	blt	r2,zero,7648 <_dtoa_r+0x14a8>
    661c:	8009883a 	mov	r4,r16
    6620:	000ede00 	call	ede0 <__floatsidf>
    6624:	d9800f17 	ldw	r6,60(sp)
    6628:	d9c01017 	ldw	r7,64(sp)
    662c:	1009883a 	mov	r4,r2
    6630:	180b883a 	mov	r5,r3
    6634:	000dd4c0 	call	dd4c <__muldf3>
    6638:	000d883a 	mov	r6,zero
    663c:	01d00734 	movhi	r7,16412
    6640:	1009883a 	mov	r4,r2
    6644:	180b883a 	mov	r5,r3
    6648:	000d2480 	call	d248 <__adddf3>
    664c:	1021883a 	mov	r16,r2
    6650:	d8800617 	ldw	r2,24(sp)
    6654:	047f3034 	movhi	r17,64704
    6658:	1c63883a 	add	r17,r3,r17
    665c:	10031826 	beq	r2,zero,72c0 <_dtoa_r+0x1120>
    6660:	d8c00517 	ldw	r3,20(sp)
    6664:	db000617 	ldw	r12,24(sp)
    6668:	d8c01315 	stw	r3,76(sp)
    666c:	d9000b17 	ldw	r4,44(sp)
    6670:	20038f26 	beq	r4,zero,74b0 <_dtoa_r+0x1310>
    6674:	60bfffc4 	addi	r2,r12,-1
    6678:	100490fa 	slli	r2,r2,3
    667c:	00c00074 	movhi	r3,1
    6680:	18c89b04 	addi	r3,r3,8812
    6684:	1885883a 	add	r2,r3,r2
    6688:	11800017 	ldw	r6,0(r2)
    668c:	11c00117 	ldw	r7,4(r2)
    6690:	d8800717 	ldw	r2,28(sp)
    6694:	0009883a 	mov	r4,zero
    6698:	014ff834 	movhi	r5,16352
    669c:	db001615 	stw	r12,88(sp)
    66a0:	15c00044 	addi	r23,r2,1
    66a4:	00027280 	call	2728 <__divdf3>
    66a8:	800d883a 	mov	r6,r16
    66ac:	880f883a 	mov	r7,r17
    66b0:	1009883a 	mov	r4,r2
    66b4:	180b883a 	mov	r5,r3
    66b8:	000e4640 	call	e464 <__subdf3>
    66bc:	d9401017 	ldw	r5,64(sp)
    66c0:	d9000f17 	ldw	r4,60(sp)
    66c4:	102b883a 	mov	r21,r2
    66c8:	d8c01215 	stw	r3,72(sp)
    66cc:	000ed600 	call	ed60 <__fixdfsi>
    66d0:	1009883a 	mov	r4,r2
    66d4:	1029883a 	mov	r20,r2
    66d8:	000ede00 	call	ede0 <__floatsidf>
    66dc:	d9000f17 	ldw	r4,60(sp)
    66e0:	d9401017 	ldw	r5,64(sp)
    66e4:	100d883a 	mov	r6,r2
    66e8:	180f883a 	mov	r7,r3
    66ec:	000e4640 	call	e464 <__subdf3>
    66f0:	1823883a 	mov	r17,r3
    66f4:	d8c00717 	ldw	r3,28(sp)
    66f8:	d9401217 	ldw	r5,72(sp)
    66fc:	a2000c04 	addi	r8,r20,48
    6700:	1021883a 	mov	r16,r2
    6704:	1a000005 	stb	r8,0(r3)
    6708:	800d883a 	mov	r6,r16
    670c:	880f883a 	mov	r7,r17
    6710:	a809883a 	mov	r4,r21
    6714:	4029883a 	mov	r20,r8
    6718:	000db7c0 	call	db7c <__gedf2>
    671c:	00841d16 	blt	zero,r2,7794 <_dtoa_r+0x15f4>
    6720:	800d883a 	mov	r6,r16
    6724:	880f883a 	mov	r7,r17
    6728:	0009883a 	mov	r4,zero
    672c:	014ffc34 	movhi	r5,16368
    6730:	000e4640 	call	e464 <__subdf3>
    6734:	d9401217 	ldw	r5,72(sp)
    6738:	100d883a 	mov	r6,r2
    673c:	180f883a 	mov	r7,r3
    6740:	a809883a 	mov	r4,r21
    6744:	000db7c0 	call	db7c <__gedf2>
    6748:	db001617 	ldw	r12,88(sp)
    674c:	00840e16 	blt	zero,r2,7788 <_dtoa_r+0x15e8>
    6750:	00800044 	movi	r2,1
    6754:	13006b0e 	bge	r2,r12,6904 <_dtoa_r+0x764>
    6758:	d9000717 	ldw	r4,28(sp)
    675c:	dd800f15 	stw	r22,60(sp)
    6760:	dcc01015 	stw	r19,64(sp)
    6764:	2319883a 	add	r12,r4,r12
    6768:	dcc01217 	ldw	r19,72(sp)
    676c:	602d883a 	mov	r22,r12
    6770:	dc801215 	stw	r18,72(sp)
    6774:	b825883a 	mov	r18,r23
    6778:	00000906 	br	67a0 <_dtoa_r+0x600>
    677c:	000e4640 	call	e464 <__subdf3>
    6780:	a80d883a 	mov	r6,r21
    6784:	980f883a 	mov	r7,r19
    6788:	1009883a 	mov	r4,r2
    678c:	180b883a 	mov	r5,r3
    6790:	000dc580 	call	dc58 <__ledf2>
    6794:	1003e816 	blt	r2,zero,7738 <_dtoa_r+0x1598>
    6798:	b825883a 	mov	r18,r23
    679c:	bd83e926 	beq	r23,r22,7744 <_dtoa_r+0x15a4>
    67a0:	a809883a 	mov	r4,r21
    67a4:	980b883a 	mov	r5,r19
    67a8:	000d883a 	mov	r6,zero
    67ac:	01d00934 	movhi	r7,16420
    67b0:	000dd4c0 	call	dd4c <__muldf3>
    67b4:	000d883a 	mov	r6,zero
    67b8:	01d00934 	movhi	r7,16420
    67bc:	8009883a 	mov	r4,r16
    67c0:	880b883a 	mov	r5,r17
    67c4:	102b883a 	mov	r21,r2
    67c8:	1827883a 	mov	r19,r3
    67cc:	000dd4c0 	call	dd4c <__muldf3>
    67d0:	180b883a 	mov	r5,r3
    67d4:	1009883a 	mov	r4,r2
    67d8:	1821883a 	mov	r16,r3
    67dc:	1023883a 	mov	r17,r2
    67e0:	000ed600 	call	ed60 <__fixdfsi>
    67e4:	1009883a 	mov	r4,r2
    67e8:	1029883a 	mov	r20,r2
    67ec:	000ede00 	call	ede0 <__floatsidf>
    67f0:	8809883a 	mov	r4,r17
    67f4:	800b883a 	mov	r5,r16
    67f8:	100d883a 	mov	r6,r2
    67fc:	180f883a 	mov	r7,r3
    6800:	000e4640 	call	e464 <__subdf3>
    6804:	a5000c04 	addi	r20,r20,48
    6808:	a80d883a 	mov	r6,r21
    680c:	980f883a 	mov	r7,r19
    6810:	1009883a 	mov	r4,r2
    6814:	180b883a 	mov	r5,r3
    6818:	95000005 	stb	r20,0(r18)
    681c:	1021883a 	mov	r16,r2
    6820:	1823883a 	mov	r17,r3
    6824:	000dc580 	call	dc58 <__ledf2>
    6828:	bdc00044 	addi	r23,r23,1
    682c:	800d883a 	mov	r6,r16
    6830:	880f883a 	mov	r7,r17
    6834:	0009883a 	mov	r4,zero
    6838:	014ffc34 	movhi	r5,16368
    683c:	103fcf0e 	bge	r2,zero,677c <__alt_data_end+0xff00677c>
    6840:	d8c01317 	ldw	r3,76(sp)
    6844:	d8c00515 	stw	r3,20(sp)
    6848:	d9400917 	ldw	r5,36(sp)
    684c:	e009883a 	mov	r4,fp
    6850:	00090d80 	call	90d8 <_Bfree>
    6854:	d9000517 	ldw	r4,20(sp)
    6858:	d9802317 	ldw	r6,140(sp)
    685c:	d9c02517 	ldw	r7,148(sp)
    6860:	b8000005 	stb	zero,0(r23)
    6864:	20800044 	addi	r2,r4,1
    6868:	30800015 	stw	r2,0(r6)
    686c:	3802aa26 	beq	r7,zero,7318 <_dtoa_r+0x1178>
    6870:	3dc00015 	stw	r23,0(r7)
    6874:	d8800717 	ldw	r2,28(sp)
    6878:	003e7906 	br	6260 <__alt_data_end+0xff006260>
    687c:	00800434 	movhi	r2,16
    6880:	10bfffc4 	addi	r2,r2,-1
    6884:	88a2703a 	and	r17,r17,r2
    6888:	883e851e 	bne	r17,zero,62a0 <__alt_data_end+0xff0062a0>
    688c:	00800074 	movhi	r2,1
    6890:	10887c04 	addi	r2,r2,8688
    6894:	003e8406 	br	62a8 <__alt_data_end+0xff0062a8>
    6898:	10c00204 	addi	r3,r2,8
    689c:	003e8706 	br	62bc <__alt_data_end+0xff0062bc>
    68a0:	01400434 	movhi	r5,16
    68a4:	297fffc4 	addi	r5,r5,-1
    68a8:	994a703a 	and	r5,r19,r5
    68ac:	9009883a 	mov	r4,r18
    68b0:	843f0044 	addi	r16,r16,-1023
    68b4:	294ffc34 	orhi	r5,r5,16368
    68b8:	dd800217 	ldw	r22,8(sp)
    68bc:	d8001115 	stw	zero,68(sp)
    68c0:	003ea506 	br	6358 <__alt_data_end+0xff006358>
    68c4:	00800074 	movhi	r2,1
    68c8:	10887304 	addi	r2,r2,8652
    68cc:	003e6406 	br	6260 <__alt_data_end+0xff006260>
    68d0:	e0001115 	stw	zero,68(fp)
    68d4:	000b883a 	mov	r5,zero
    68d8:	e009883a 	mov	r4,fp
    68dc:	00090300 	call	9030 <_Balloc>
    68e0:	01bfffc4 	movi	r6,-1
    68e4:	01c00044 	movi	r7,1
    68e8:	d8800715 	stw	r2,28(sp)
    68ec:	d9800c15 	stw	r6,48(sp)
    68f0:	e0801015 	stw	r2,64(fp)
    68f4:	d8000315 	stw	zero,12(sp)
    68f8:	d9c00b15 	stw	r7,44(sp)
    68fc:	d9800615 	stw	r6,24(sp)
    6900:	d8002215 	stw	zero,136(sp)
    6904:	d8800117 	ldw	r2,4(sp)
    6908:	10008916 	blt	r2,zero,6b30 <_dtoa_r+0x990>
    690c:	d9000517 	ldw	r4,20(sp)
    6910:	00c00384 	movi	r3,14
    6914:	19008616 	blt	r3,r4,6b30 <_dtoa_r+0x990>
    6918:	200490fa 	slli	r2,r4,3
    691c:	00c00074 	movhi	r3,1
    6920:	d9802217 	ldw	r6,136(sp)
    6924:	18c89b04 	addi	r3,r3,8812
    6928:	1885883a 	add	r2,r3,r2
    692c:	14000017 	ldw	r16,0(r2)
    6930:	14400117 	ldw	r17,4(r2)
    6934:	30016316 	blt	r6,zero,6ec4 <_dtoa_r+0xd24>
    6938:	800d883a 	mov	r6,r16
    693c:	880f883a 	mov	r7,r17
    6940:	9009883a 	mov	r4,r18
    6944:	980b883a 	mov	r5,r19
    6948:	00027280 	call	2728 <__divdf3>
    694c:	180b883a 	mov	r5,r3
    6950:	1009883a 	mov	r4,r2
    6954:	000ed600 	call	ed60 <__fixdfsi>
    6958:	1009883a 	mov	r4,r2
    695c:	102b883a 	mov	r21,r2
    6960:	000ede00 	call	ede0 <__floatsidf>
    6964:	800d883a 	mov	r6,r16
    6968:	880f883a 	mov	r7,r17
    696c:	1009883a 	mov	r4,r2
    6970:	180b883a 	mov	r5,r3
    6974:	000dd4c0 	call	dd4c <__muldf3>
    6978:	100d883a 	mov	r6,r2
    697c:	180f883a 	mov	r7,r3
    6980:	9009883a 	mov	r4,r18
    6984:	980b883a 	mov	r5,r19
    6988:	000e4640 	call	e464 <__subdf3>
    698c:	d9c00717 	ldw	r7,28(sp)
    6990:	1009883a 	mov	r4,r2
    6994:	a8800c04 	addi	r2,r21,48
    6998:	38800005 	stb	r2,0(r7)
    699c:	3dc00044 	addi	r23,r7,1
    69a0:	d9c00617 	ldw	r7,24(sp)
    69a4:	01800044 	movi	r6,1
    69a8:	180b883a 	mov	r5,r3
    69ac:	2005883a 	mov	r2,r4
    69b0:	39803826 	beq	r7,r6,6a94 <_dtoa_r+0x8f4>
    69b4:	000d883a 	mov	r6,zero
    69b8:	01d00934 	movhi	r7,16420
    69bc:	000dd4c0 	call	dd4c <__muldf3>
    69c0:	000d883a 	mov	r6,zero
    69c4:	000f883a 	mov	r7,zero
    69c8:	1009883a 	mov	r4,r2
    69cc:	180b883a 	mov	r5,r3
    69d0:	1025883a 	mov	r18,r2
    69d4:	1827883a 	mov	r19,r3
    69d8:	000daf40 	call	daf4 <__eqdf2>
    69dc:	103f9a26 	beq	r2,zero,6848 <__alt_data_end+0xff006848>
    69e0:	d9c00617 	ldw	r7,24(sp)
    69e4:	d8c00717 	ldw	r3,28(sp)
    69e8:	b829883a 	mov	r20,r23
    69ec:	38bfffc4 	addi	r2,r7,-1
    69f0:	18ad883a 	add	r22,r3,r2
    69f4:	00000a06 	br	6a20 <_dtoa_r+0x880>
    69f8:	000dd4c0 	call	dd4c <__muldf3>
    69fc:	000d883a 	mov	r6,zero
    6a00:	000f883a 	mov	r7,zero
    6a04:	1009883a 	mov	r4,r2
    6a08:	180b883a 	mov	r5,r3
    6a0c:	1025883a 	mov	r18,r2
    6a10:	1827883a 	mov	r19,r3
    6a14:	b829883a 	mov	r20,r23
    6a18:	000daf40 	call	daf4 <__eqdf2>
    6a1c:	103f8a26 	beq	r2,zero,6848 <__alt_data_end+0xff006848>
    6a20:	800d883a 	mov	r6,r16
    6a24:	880f883a 	mov	r7,r17
    6a28:	9009883a 	mov	r4,r18
    6a2c:	980b883a 	mov	r5,r19
    6a30:	00027280 	call	2728 <__divdf3>
    6a34:	180b883a 	mov	r5,r3
    6a38:	1009883a 	mov	r4,r2
    6a3c:	000ed600 	call	ed60 <__fixdfsi>
    6a40:	1009883a 	mov	r4,r2
    6a44:	102b883a 	mov	r21,r2
    6a48:	000ede00 	call	ede0 <__floatsidf>
    6a4c:	800d883a 	mov	r6,r16
    6a50:	880f883a 	mov	r7,r17
    6a54:	1009883a 	mov	r4,r2
    6a58:	180b883a 	mov	r5,r3
    6a5c:	000dd4c0 	call	dd4c <__muldf3>
    6a60:	100d883a 	mov	r6,r2
    6a64:	180f883a 	mov	r7,r3
    6a68:	9009883a 	mov	r4,r18
    6a6c:	980b883a 	mov	r5,r19
    6a70:	000e4640 	call	e464 <__subdf3>
    6a74:	aa000c04 	addi	r8,r21,48
    6a78:	a2000005 	stb	r8,0(r20)
    6a7c:	000d883a 	mov	r6,zero
    6a80:	01d00934 	movhi	r7,16420
    6a84:	1009883a 	mov	r4,r2
    6a88:	180b883a 	mov	r5,r3
    6a8c:	a5c00044 	addi	r23,r20,1
    6a90:	b53fd91e 	bne	r22,r20,69f8 <__alt_data_end+0xff0069f8>
    6a94:	100d883a 	mov	r6,r2
    6a98:	180f883a 	mov	r7,r3
    6a9c:	1009883a 	mov	r4,r2
    6aa0:	180b883a 	mov	r5,r3
    6aa4:	000d2480 	call	d248 <__adddf3>
    6aa8:	100d883a 	mov	r6,r2
    6aac:	180f883a 	mov	r7,r3
    6ab0:	8009883a 	mov	r4,r16
    6ab4:	880b883a 	mov	r5,r17
    6ab8:	1027883a 	mov	r19,r2
    6abc:	1825883a 	mov	r18,r3
    6ac0:	000dc580 	call	dc58 <__ledf2>
    6ac4:	10000816 	blt	r2,zero,6ae8 <_dtoa_r+0x948>
    6ac8:	980d883a 	mov	r6,r19
    6acc:	900f883a 	mov	r7,r18
    6ad0:	8009883a 	mov	r4,r16
    6ad4:	880b883a 	mov	r5,r17
    6ad8:	000daf40 	call	daf4 <__eqdf2>
    6adc:	103f5a1e 	bne	r2,zero,6848 <__alt_data_end+0xff006848>
    6ae0:	ad40004c 	andi	r21,r21,1
    6ae4:	a83f5826 	beq	r21,zero,6848 <__alt_data_end+0xff006848>
    6ae8:	bd3fffc3 	ldbu	r20,-1(r23)
    6aec:	b8bfffc4 	addi	r2,r23,-1
    6af0:	1007883a 	mov	r3,r2
    6af4:	01400e44 	movi	r5,57
    6af8:	d9800717 	ldw	r6,28(sp)
    6afc:	00000506 	br	6b14 <_dtoa_r+0x974>
    6b00:	18ffffc4 	addi	r3,r3,-1
    6b04:	11824726 	beq	r2,r6,7424 <_dtoa_r+0x1284>
    6b08:	1d000003 	ldbu	r20,0(r3)
    6b0c:	102f883a 	mov	r23,r2
    6b10:	10bfffc4 	addi	r2,r2,-1
    6b14:	a1003fcc 	andi	r4,r20,255
    6b18:	2100201c 	xori	r4,r4,128
    6b1c:	213fe004 	addi	r4,r4,-128
    6b20:	217ff726 	beq	r4,r5,6b00 <__alt_data_end+0xff006b00>
    6b24:	a2000044 	addi	r8,r20,1
    6b28:	12000005 	stb	r8,0(r2)
    6b2c:	003f4606 	br	6848 <__alt_data_end+0xff006848>
    6b30:	d9000b17 	ldw	r4,44(sp)
    6b34:	2000c826 	beq	r4,zero,6e58 <_dtoa_r+0xcb8>
    6b38:	d9800317 	ldw	r6,12(sp)
    6b3c:	00c00044 	movi	r3,1
    6b40:	1980f90e 	bge	r3,r6,6f28 <_dtoa_r+0xd88>
    6b44:	d8800617 	ldw	r2,24(sp)
    6b48:	d8c00a17 	ldw	r3,40(sp)
    6b4c:	157fffc4 	addi	r21,r2,-1
    6b50:	1d41f316 	blt	r3,r21,7320 <_dtoa_r+0x1180>
    6b54:	1d6bc83a 	sub	r21,r3,r21
    6b58:	d9c00617 	ldw	r7,24(sp)
    6b5c:	3802aa16 	blt	r7,zero,7608 <_dtoa_r+0x1468>
    6b60:	dd000817 	ldw	r20,32(sp)
    6b64:	d8800617 	ldw	r2,24(sp)
    6b68:	d8c00817 	ldw	r3,32(sp)
    6b6c:	01400044 	movi	r5,1
    6b70:	e009883a 	mov	r4,fp
    6b74:	1887883a 	add	r3,r3,r2
    6b78:	d8c00815 	stw	r3,32(sp)
    6b7c:	b0ad883a 	add	r22,r22,r2
    6b80:	000943c0 	call	943c <__i2b>
    6b84:	1023883a 	mov	r17,r2
    6b88:	a0000826 	beq	r20,zero,6bac <_dtoa_r+0xa0c>
    6b8c:	0580070e 	bge	zero,r22,6bac <_dtoa_r+0xa0c>
    6b90:	a005883a 	mov	r2,r20
    6b94:	b500b916 	blt	r22,r20,6e7c <_dtoa_r+0xcdc>
    6b98:	d9000817 	ldw	r4,32(sp)
    6b9c:	a0a9c83a 	sub	r20,r20,r2
    6ba0:	b0adc83a 	sub	r22,r22,r2
    6ba4:	2089c83a 	sub	r4,r4,r2
    6ba8:	d9000815 	stw	r4,32(sp)
    6bac:	d9800a17 	ldw	r6,40(sp)
    6bb0:	0181810e 	bge	zero,r6,71b8 <_dtoa_r+0x1018>
    6bb4:	d9c00b17 	ldw	r7,44(sp)
    6bb8:	3800b326 	beq	r7,zero,6e88 <_dtoa_r+0xce8>
    6bbc:	a800b226 	beq	r21,zero,6e88 <_dtoa_r+0xce8>
    6bc0:	880b883a 	mov	r5,r17
    6bc4:	a80d883a 	mov	r6,r21
    6bc8:	e009883a 	mov	r4,fp
    6bcc:	00096700 	call	9670 <__pow5mult>
    6bd0:	d9800917 	ldw	r6,36(sp)
    6bd4:	100b883a 	mov	r5,r2
    6bd8:	e009883a 	mov	r4,fp
    6bdc:	1023883a 	mov	r17,r2
    6be0:	00094780 	call	9478 <__multiply>
    6be4:	1021883a 	mov	r16,r2
    6be8:	d8800a17 	ldw	r2,40(sp)
    6bec:	d9400917 	ldw	r5,36(sp)
    6bf0:	e009883a 	mov	r4,fp
    6bf4:	1545c83a 	sub	r2,r2,r21
    6bf8:	d8800a15 	stw	r2,40(sp)
    6bfc:	00090d80 	call	90d8 <_Bfree>
    6c00:	d8c00a17 	ldw	r3,40(sp)
    6c04:	18009f1e 	bne	r3,zero,6e84 <_dtoa_r+0xce4>
    6c08:	05c00044 	movi	r23,1
    6c0c:	e009883a 	mov	r4,fp
    6c10:	b80b883a 	mov	r5,r23
    6c14:	000943c0 	call	943c <__i2b>
    6c18:	d9000d17 	ldw	r4,52(sp)
    6c1c:	102b883a 	mov	r21,r2
    6c20:	2000ce26 	beq	r4,zero,6f5c <_dtoa_r+0xdbc>
    6c24:	200d883a 	mov	r6,r4
    6c28:	100b883a 	mov	r5,r2
    6c2c:	e009883a 	mov	r4,fp
    6c30:	00096700 	call	9670 <__pow5mult>
    6c34:	d9800317 	ldw	r6,12(sp)
    6c38:	102b883a 	mov	r21,r2
    6c3c:	b981810e 	bge	r23,r6,7244 <_dtoa_r+0x10a4>
    6c40:	0027883a 	mov	r19,zero
    6c44:	a8800417 	ldw	r2,16(r21)
    6c48:	05c00804 	movi	r23,32
    6c4c:	10800104 	addi	r2,r2,4
    6c50:	1085883a 	add	r2,r2,r2
    6c54:	1085883a 	add	r2,r2,r2
    6c58:	a885883a 	add	r2,r21,r2
    6c5c:	11000017 	ldw	r4,0(r2)
    6c60:	00093240 	call	9324 <__hi0bits>
    6c64:	b885c83a 	sub	r2,r23,r2
    6c68:	1585883a 	add	r2,r2,r22
    6c6c:	108007cc 	andi	r2,r2,31
    6c70:	1000b326 	beq	r2,zero,6f40 <_dtoa_r+0xda0>
    6c74:	00c00804 	movi	r3,32
    6c78:	1887c83a 	sub	r3,r3,r2
    6c7c:	01000104 	movi	r4,4
    6c80:	20c2cd0e 	bge	r4,r3,77b8 <_dtoa_r+0x1618>
    6c84:	00c00704 	movi	r3,28
    6c88:	1885c83a 	sub	r2,r3,r2
    6c8c:	d8c00817 	ldw	r3,32(sp)
    6c90:	a0a9883a 	add	r20,r20,r2
    6c94:	b0ad883a 	add	r22,r22,r2
    6c98:	1887883a 	add	r3,r3,r2
    6c9c:	d8c00815 	stw	r3,32(sp)
    6ca0:	d9800817 	ldw	r6,32(sp)
    6ca4:	0180040e 	bge	zero,r6,6cb8 <_dtoa_r+0xb18>
    6ca8:	800b883a 	mov	r5,r16
    6cac:	e009883a 	mov	r4,fp
    6cb0:	00097b00 	call	97b0 <__lshift>
    6cb4:	1021883a 	mov	r16,r2
    6cb8:	0580050e 	bge	zero,r22,6cd0 <_dtoa_r+0xb30>
    6cbc:	a80b883a 	mov	r5,r21
    6cc0:	b00d883a 	mov	r6,r22
    6cc4:	e009883a 	mov	r4,fp
    6cc8:	00097b00 	call	97b0 <__lshift>
    6ccc:	102b883a 	mov	r21,r2
    6cd0:	d9c00e17 	ldw	r7,56(sp)
    6cd4:	3801211e 	bne	r7,zero,715c <_dtoa_r+0xfbc>
    6cd8:	d9800617 	ldw	r6,24(sp)
    6cdc:	0181380e 	bge	zero,r6,71c0 <_dtoa_r+0x1020>
    6ce0:	d8c00b17 	ldw	r3,44(sp)
    6ce4:	1800ab1e 	bne	r3,zero,6f94 <_dtoa_r+0xdf4>
    6ce8:	dc800717 	ldw	r18,28(sp)
    6cec:	dcc00617 	ldw	r19,24(sp)
    6cf0:	9029883a 	mov	r20,r18
    6cf4:	00000206 	br	6d00 <_dtoa_r+0xb60>
    6cf8:	00091000 	call	9100 <__multadd>
    6cfc:	1021883a 	mov	r16,r2
    6d00:	a80b883a 	mov	r5,r21
    6d04:	8009883a 	mov	r4,r16
    6d08:	0005fa00 	call	5fa0 <quorem>
    6d0c:	10800c04 	addi	r2,r2,48
    6d10:	90800005 	stb	r2,0(r18)
    6d14:	94800044 	addi	r18,r18,1
    6d18:	9507c83a 	sub	r3,r18,r20
    6d1c:	000f883a 	mov	r7,zero
    6d20:	01800284 	movi	r6,10
    6d24:	800b883a 	mov	r5,r16
    6d28:	e009883a 	mov	r4,fp
    6d2c:	1cfff216 	blt	r3,r19,6cf8 <__alt_data_end+0xff006cf8>
    6d30:	1011883a 	mov	r8,r2
    6d34:	d8800617 	ldw	r2,24(sp)
    6d38:	0082370e 	bge	zero,r2,7618 <_dtoa_r+0x1478>
    6d3c:	d9000717 	ldw	r4,28(sp)
    6d40:	0025883a 	mov	r18,zero
    6d44:	20af883a 	add	r23,r4,r2
    6d48:	01800044 	movi	r6,1
    6d4c:	800b883a 	mov	r5,r16
    6d50:	e009883a 	mov	r4,fp
    6d54:	da001715 	stw	r8,92(sp)
    6d58:	00097b00 	call	97b0 <__lshift>
    6d5c:	a80b883a 	mov	r5,r21
    6d60:	1009883a 	mov	r4,r2
    6d64:	d8800915 	stw	r2,36(sp)
    6d68:	00098f80 	call	98f8 <__mcmp>
    6d6c:	da001717 	ldw	r8,92(sp)
    6d70:	0081800e 	bge	zero,r2,7374 <_dtoa_r+0x11d4>
    6d74:	b93fffc3 	ldbu	r4,-1(r23)
    6d78:	b8bfffc4 	addi	r2,r23,-1
    6d7c:	1007883a 	mov	r3,r2
    6d80:	01800e44 	movi	r6,57
    6d84:	d9c00717 	ldw	r7,28(sp)
    6d88:	00000506 	br	6da0 <_dtoa_r+0xc00>
    6d8c:	18ffffc4 	addi	r3,r3,-1
    6d90:	11c12326 	beq	r2,r7,7220 <_dtoa_r+0x1080>
    6d94:	19000003 	ldbu	r4,0(r3)
    6d98:	102f883a 	mov	r23,r2
    6d9c:	10bfffc4 	addi	r2,r2,-1
    6da0:	21403fcc 	andi	r5,r4,255
    6da4:	2940201c 	xori	r5,r5,128
    6da8:	297fe004 	addi	r5,r5,-128
    6dac:	29bff726 	beq	r5,r6,6d8c <__alt_data_end+0xff006d8c>
    6db0:	21000044 	addi	r4,r4,1
    6db4:	11000005 	stb	r4,0(r2)
    6db8:	a80b883a 	mov	r5,r21
    6dbc:	e009883a 	mov	r4,fp
    6dc0:	00090d80 	call	90d8 <_Bfree>
    6dc4:	883ea026 	beq	r17,zero,6848 <__alt_data_end+0xff006848>
    6dc8:	90000426 	beq	r18,zero,6ddc <_dtoa_r+0xc3c>
    6dcc:	94400326 	beq	r18,r17,6ddc <_dtoa_r+0xc3c>
    6dd0:	900b883a 	mov	r5,r18
    6dd4:	e009883a 	mov	r4,fp
    6dd8:	00090d80 	call	90d8 <_Bfree>
    6ddc:	880b883a 	mov	r5,r17
    6de0:	e009883a 	mov	r4,fp
    6de4:	00090d80 	call	90d8 <_Bfree>
    6de8:	003e9706 	br	6848 <__alt_data_end+0xff006848>
    6dec:	01800044 	movi	r6,1
    6df0:	d9800e15 	stw	r6,56(sp)
    6df4:	003d9606 	br	6450 <__alt_data_end+0xff006450>
    6df8:	d8800817 	ldw	r2,32(sp)
    6dfc:	d8c00517 	ldw	r3,20(sp)
    6e00:	d8000d15 	stw	zero,52(sp)
    6e04:	10c5c83a 	sub	r2,r2,r3
    6e08:	00c9c83a 	sub	r4,zero,r3
    6e0c:	d8800815 	stw	r2,32(sp)
    6e10:	d9000a15 	stw	r4,40(sp)
    6e14:	003d9706 	br	6474 <__alt_data_end+0xff006474>
    6e18:	05adc83a 	sub	r22,zero,r22
    6e1c:	dd800815 	stw	r22,32(sp)
    6e20:	002d883a 	mov	r22,zero
    6e24:	003d8e06 	br	6460 <__alt_data_end+0xff006460>
    6e28:	d9000517 	ldw	r4,20(sp)
    6e2c:	000ede00 	call	ede0 <__floatsidf>
    6e30:	100d883a 	mov	r6,r2
    6e34:	180f883a 	mov	r7,r3
    6e38:	a009883a 	mov	r4,r20
    6e3c:	880b883a 	mov	r5,r17
    6e40:	000daf40 	call	daf4 <__eqdf2>
    6e44:	103d7126 	beq	r2,zero,640c <__alt_data_end+0xff00640c>
    6e48:	d9c00517 	ldw	r7,20(sp)
    6e4c:	39ffffc4 	addi	r7,r7,-1
    6e50:	d9c00515 	stw	r7,20(sp)
    6e54:	003d6d06 	br	640c <__alt_data_end+0xff00640c>
    6e58:	dd400a17 	ldw	r21,40(sp)
    6e5c:	dd000817 	ldw	r20,32(sp)
    6e60:	0023883a 	mov	r17,zero
    6e64:	003f4806 	br	6b88 <__alt_data_end+0xff006b88>
    6e68:	10e3c83a 	sub	r17,r2,r3
    6e6c:	9448983a 	sll	r4,r18,r17
    6e70:	003d3206 	br	633c <__alt_data_end+0xff00633c>
    6e74:	d8000e15 	stw	zero,56(sp)
    6e78:	003d7506 	br	6450 <__alt_data_end+0xff006450>
    6e7c:	b005883a 	mov	r2,r22
    6e80:	003f4506 	br	6b98 <__alt_data_end+0xff006b98>
    6e84:	dc000915 	stw	r16,36(sp)
    6e88:	d9800a17 	ldw	r6,40(sp)
    6e8c:	d9400917 	ldw	r5,36(sp)
    6e90:	e009883a 	mov	r4,fp
    6e94:	00096700 	call	9670 <__pow5mult>
    6e98:	1021883a 	mov	r16,r2
    6e9c:	003f5a06 	br	6c08 <__alt_data_end+0xff006c08>
    6ea0:	01c00044 	movi	r7,1
    6ea4:	d9c00b15 	stw	r7,44(sp)
    6ea8:	d8802217 	ldw	r2,136(sp)
    6eac:	0081280e 	bge	zero,r2,7350 <_dtoa_r+0x11b0>
    6eb0:	100d883a 	mov	r6,r2
    6eb4:	1021883a 	mov	r16,r2
    6eb8:	d8800c15 	stw	r2,48(sp)
    6ebc:	d8800615 	stw	r2,24(sp)
    6ec0:	003d8806 	br	64e4 <__alt_data_end+0xff0064e4>
    6ec4:	d8800617 	ldw	r2,24(sp)
    6ec8:	00be9b16 	blt	zero,r2,6938 <__alt_data_end+0xff006938>
    6ecc:	10010f1e 	bne	r2,zero,730c <_dtoa_r+0x116c>
    6ed0:	880b883a 	mov	r5,r17
    6ed4:	000d883a 	mov	r6,zero
    6ed8:	01d00534 	movhi	r7,16404
    6edc:	8009883a 	mov	r4,r16
    6ee0:	000dd4c0 	call	dd4c <__muldf3>
    6ee4:	900d883a 	mov	r6,r18
    6ee8:	980f883a 	mov	r7,r19
    6eec:	1009883a 	mov	r4,r2
    6ef0:	180b883a 	mov	r5,r3
    6ef4:	000db7c0 	call	db7c <__gedf2>
    6ef8:	002b883a 	mov	r21,zero
    6efc:	0023883a 	mov	r17,zero
    6f00:	1000bf16 	blt	r2,zero,7200 <_dtoa_r+0x1060>
    6f04:	d9802217 	ldw	r6,136(sp)
    6f08:	ddc00717 	ldw	r23,28(sp)
    6f0c:	018c303a 	nor	r6,zero,r6
    6f10:	d9800515 	stw	r6,20(sp)
    6f14:	a80b883a 	mov	r5,r21
    6f18:	e009883a 	mov	r4,fp
    6f1c:	00090d80 	call	90d8 <_Bfree>
    6f20:	883e4926 	beq	r17,zero,6848 <__alt_data_end+0xff006848>
    6f24:	003fad06 	br	6ddc <__alt_data_end+0xff006ddc>
    6f28:	d9c01117 	ldw	r7,68(sp)
    6f2c:	3801bc26 	beq	r7,zero,7620 <_dtoa_r+0x1480>
    6f30:	10810cc4 	addi	r2,r2,1075
    6f34:	dd400a17 	ldw	r21,40(sp)
    6f38:	dd000817 	ldw	r20,32(sp)
    6f3c:	003f0a06 	br	6b68 <__alt_data_end+0xff006b68>
    6f40:	00800704 	movi	r2,28
    6f44:	d9000817 	ldw	r4,32(sp)
    6f48:	a0a9883a 	add	r20,r20,r2
    6f4c:	b0ad883a 	add	r22,r22,r2
    6f50:	2089883a 	add	r4,r4,r2
    6f54:	d9000815 	stw	r4,32(sp)
    6f58:	003f5106 	br	6ca0 <__alt_data_end+0xff006ca0>
    6f5c:	d8c00317 	ldw	r3,12(sp)
    6f60:	b8c1fc0e 	bge	r23,r3,7754 <_dtoa_r+0x15b4>
    6f64:	0027883a 	mov	r19,zero
    6f68:	b805883a 	mov	r2,r23
    6f6c:	003f3e06 	br	6c68 <__alt_data_end+0xff006c68>
    6f70:	880b883a 	mov	r5,r17
    6f74:	e009883a 	mov	r4,fp
    6f78:	000f883a 	mov	r7,zero
    6f7c:	01800284 	movi	r6,10
    6f80:	00091000 	call	9100 <__multadd>
    6f84:	d9000c17 	ldw	r4,48(sp)
    6f88:	1023883a 	mov	r17,r2
    6f8c:	0102040e 	bge	zero,r4,77a0 <_dtoa_r+0x1600>
    6f90:	d9000615 	stw	r4,24(sp)
    6f94:	0500050e 	bge	zero,r20,6fac <_dtoa_r+0xe0c>
    6f98:	880b883a 	mov	r5,r17
    6f9c:	a00d883a 	mov	r6,r20
    6fa0:	e009883a 	mov	r4,fp
    6fa4:	00097b00 	call	97b0 <__lshift>
    6fa8:	1023883a 	mov	r17,r2
    6fac:	9801241e 	bne	r19,zero,7440 <_dtoa_r+0x12a0>
    6fb0:	8829883a 	mov	r20,r17
    6fb4:	d9000617 	ldw	r4,24(sp)
    6fb8:	dcc00717 	ldw	r19,28(sp)
    6fbc:	9480004c 	andi	r18,r18,1
    6fc0:	20bfffc4 	addi	r2,r4,-1
    6fc4:	9885883a 	add	r2,r19,r2
    6fc8:	d8800415 	stw	r2,16(sp)
    6fcc:	dc800615 	stw	r18,24(sp)
    6fd0:	a80b883a 	mov	r5,r21
    6fd4:	8009883a 	mov	r4,r16
    6fd8:	0005fa00 	call	5fa0 <quorem>
    6fdc:	880b883a 	mov	r5,r17
    6fe0:	8009883a 	mov	r4,r16
    6fe4:	102f883a 	mov	r23,r2
    6fe8:	00098f80 	call	98f8 <__mcmp>
    6fec:	a80b883a 	mov	r5,r21
    6ff0:	a00d883a 	mov	r6,r20
    6ff4:	e009883a 	mov	r4,fp
    6ff8:	102d883a 	mov	r22,r2
    6ffc:	00099580 	call	9958 <__mdiff>
    7000:	1007883a 	mov	r3,r2
    7004:	10800317 	ldw	r2,12(r2)
    7008:	bc800c04 	addi	r18,r23,48
    700c:	180b883a 	mov	r5,r3
    7010:	10004e1e 	bne	r2,zero,714c <_dtoa_r+0xfac>
    7014:	8009883a 	mov	r4,r16
    7018:	d8c01615 	stw	r3,88(sp)
    701c:	00098f80 	call	98f8 <__mcmp>
    7020:	d8c01617 	ldw	r3,88(sp)
    7024:	e009883a 	mov	r4,fp
    7028:	d8801615 	stw	r2,88(sp)
    702c:	180b883a 	mov	r5,r3
    7030:	00090d80 	call	90d8 <_Bfree>
    7034:	d8801617 	ldw	r2,88(sp)
    7038:	1000041e 	bne	r2,zero,704c <_dtoa_r+0xeac>
    703c:	d9800317 	ldw	r6,12(sp)
    7040:	3000021e 	bne	r6,zero,704c <_dtoa_r+0xeac>
    7044:	d8c00617 	ldw	r3,24(sp)
    7048:	18003726 	beq	r3,zero,7128 <_dtoa_r+0xf88>
    704c:	b0002016 	blt	r22,zero,70d0 <_dtoa_r+0xf30>
    7050:	b000041e 	bne	r22,zero,7064 <_dtoa_r+0xec4>
    7054:	d9000317 	ldw	r4,12(sp)
    7058:	2000021e 	bne	r4,zero,7064 <_dtoa_r+0xec4>
    705c:	d8c00617 	ldw	r3,24(sp)
    7060:	18001b26 	beq	r3,zero,70d0 <_dtoa_r+0xf30>
    7064:	00810716 	blt	zero,r2,7484 <_dtoa_r+0x12e4>
    7068:	d8c00417 	ldw	r3,16(sp)
    706c:	9d800044 	addi	r22,r19,1
    7070:	9c800005 	stb	r18,0(r19)
    7074:	b02f883a 	mov	r23,r22
    7078:	98c10626 	beq	r19,r3,7494 <_dtoa_r+0x12f4>
    707c:	800b883a 	mov	r5,r16
    7080:	000f883a 	mov	r7,zero
    7084:	01800284 	movi	r6,10
    7088:	e009883a 	mov	r4,fp
    708c:	00091000 	call	9100 <__multadd>
    7090:	1021883a 	mov	r16,r2
    7094:	000f883a 	mov	r7,zero
    7098:	01800284 	movi	r6,10
    709c:	880b883a 	mov	r5,r17
    70a0:	e009883a 	mov	r4,fp
    70a4:	8d002526 	beq	r17,r20,713c <_dtoa_r+0xf9c>
    70a8:	00091000 	call	9100 <__multadd>
    70ac:	a00b883a 	mov	r5,r20
    70b0:	000f883a 	mov	r7,zero
    70b4:	01800284 	movi	r6,10
    70b8:	e009883a 	mov	r4,fp
    70bc:	1023883a 	mov	r17,r2
    70c0:	00091000 	call	9100 <__multadd>
    70c4:	1029883a 	mov	r20,r2
    70c8:	b027883a 	mov	r19,r22
    70cc:	003fc006 	br	6fd0 <__alt_data_end+0xff006fd0>
    70d0:	9011883a 	mov	r8,r18
    70d4:	00800e0e 	bge	zero,r2,7110 <_dtoa_r+0xf70>
    70d8:	800b883a 	mov	r5,r16
    70dc:	01800044 	movi	r6,1
    70e0:	e009883a 	mov	r4,fp
    70e4:	da001715 	stw	r8,92(sp)
    70e8:	00097b00 	call	97b0 <__lshift>
    70ec:	a80b883a 	mov	r5,r21
    70f0:	1009883a 	mov	r4,r2
    70f4:	1021883a 	mov	r16,r2
    70f8:	00098f80 	call	98f8 <__mcmp>
    70fc:	da001717 	ldw	r8,92(sp)
    7100:	0081960e 	bge	zero,r2,775c <_dtoa_r+0x15bc>
    7104:	00800e44 	movi	r2,57
    7108:	40817026 	beq	r8,r2,76cc <_dtoa_r+0x152c>
    710c:	ba000c44 	addi	r8,r23,49
    7110:	8825883a 	mov	r18,r17
    7114:	9dc00044 	addi	r23,r19,1
    7118:	9a000005 	stb	r8,0(r19)
    711c:	a023883a 	mov	r17,r20
    7120:	dc000915 	stw	r16,36(sp)
    7124:	003f2406 	br	6db8 <__alt_data_end+0xff006db8>
    7128:	00800e44 	movi	r2,57
    712c:	9011883a 	mov	r8,r18
    7130:	90816626 	beq	r18,r2,76cc <_dtoa_r+0x152c>
    7134:	05bff516 	blt	zero,r22,710c <__alt_data_end+0xff00710c>
    7138:	003ff506 	br	7110 <__alt_data_end+0xff007110>
    713c:	00091000 	call	9100 <__multadd>
    7140:	1023883a 	mov	r17,r2
    7144:	1029883a 	mov	r20,r2
    7148:	003fdf06 	br	70c8 <__alt_data_end+0xff0070c8>
    714c:	e009883a 	mov	r4,fp
    7150:	00090d80 	call	90d8 <_Bfree>
    7154:	00800044 	movi	r2,1
    7158:	003fbc06 	br	704c <__alt_data_end+0xff00704c>
    715c:	a80b883a 	mov	r5,r21
    7160:	8009883a 	mov	r4,r16
    7164:	00098f80 	call	98f8 <__mcmp>
    7168:	103edb0e 	bge	r2,zero,6cd8 <__alt_data_end+0xff006cd8>
    716c:	800b883a 	mov	r5,r16
    7170:	000f883a 	mov	r7,zero
    7174:	01800284 	movi	r6,10
    7178:	e009883a 	mov	r4,fp
    717c:	00091000 	call	9100 <__multadd>
    7180:	1021883a 	mov	r16,r2
    7184:	d8800517 	ldw	r2,20(sp)
    7188:	d8c00b17 	ldw	r3,44(sp)
    718c:	10bfffc4 	addi	r2,r2,-1
    7190:	d8800515 	stw	r2,20(sp)
    7194:	183f761e 	bne	r3,zero,6f70 <__alt_data_end+0xff006f70>
    7198:	d9000c17 	ldw	r4,48(sp)
    719c:	0101730e 	bge	zero,r4,776c <_dtoa_r+0x15cc>
    71a0:	d9000615 	stw	r4,24(sp)
    71a4:	003ed006 	br	6ce8 <__alt_data_end+0xff006ce8>
    71a8:	00800084 	movi	r2,2
    71ac:	3081861e 	bne	r6,r2,77c8 <_dtoa_r+0x1628>
    71b0:	d8000b15 	stw	zero,44(sp)
    71b4:	003f3c06 	br	6ea8 <__alt_data_end+0xff006ea8>
    71b8:	dc000917 	ldw	r16,36(sp)
    71bc:	003e9206 	br	6c08 <__alt_data_end+0xff006c08>
    71c0:	d9c00317 	ldw	r7,12(sp)
    71c4:	00800084 	movi	r2,2
    71c8:	11fec50e 	bge	r2,r7,6ce0 <__alt_data_end+0xff006ce0>
    71cc:	d9000617 	ldw	r4,24(sp)
    71d0:	20013c1e 	bne	r4,zero,76c4 <_dtoa_r+0x1524>
    71d4:	a80b883a 	mov	r5,r21
    71d8:	000f883a 	mov	r7,zero
    71dc:	01800144 	movi	r6,5
    71e0:	e009883a 	mov	r4,fp
    71e4:	00091000 	call	9100 <__multadd>
    71e8:	100b883a 	mov	r5,r2
    71ec:	8009883a 	mov	r4,r16
    71f0:	102b883a 	mov	r21,r2
    71f4:	00098f80 	call	98f8 <__mcmp>
    71f8:	dc000915 	stw	r16,36(sp)
    71fc:	00bf410e 	bge	zero,r2,6f04 <__alt_data_end+0xff006f04>
    7200:	d9c00717 	ldw	r7,28(sp)
    7204:	00800c44 	movi	r2,49
    7208:	38800005 	stb	r2,0(r7)
    720c:	d8800517 	ldw	r2,20(sp)
    7210:	3dc00044 	addi	r23,r7,1
    7214:	10800044 	addi	r2,r2,1
    7218:	d8800515 	stw	r2,20(sp)
    721c:	003f3d06 	br	6f14 <__alt_data_end+0xff006f14>
    7220:	d9800517 	ldw	r6,20(sp)
    7224:	d9c00717 	ldw	r7,28(sp)
    7228:	00800c44 	movi	r2,49
    722c:	31800044 	addi	r6,r6,1
    7230:	d9800515 	stw	r6,20(sp)
    7234:	38800005 	stb	r2,0(r7)
    7238:	003edf06 	br	6db8 <__alt_data_end+0xff006db8>
    723c:	d8000b15 	stw	zero,44(sp)
    7240:	003c9f06 	br	64c0 <__alt_data_end+0xff0064c0>
    7244:	903e7e1e 	bne	r18,zero,6c40 <__alt_data_end+0xff006c40>
    7248:	00800434 	movhi	r2,16
    724c:	10bfffc4 	addi	r2,r2,-1
    7250:	9884703a 	and	r2,r19,r2
    7254:	1000ea1e 	bne	r2,zero,7600 <_dtoa_r+0x1460>
    7258:	9cdffc2c 	andhi	r19,r19,32752
    725c:	9800e826 	beq	r19,zero,7600 <_dtoa_r+0x1460>
    7260:	d9c00817 	ldw	r7,32(sp)
    7264:	b5800044 	addi	r22,r22,1
    7268:	04c00044 	movi	r19,1
    726c:	39c00044 	addi	r7,r7,1
    7270:	d9c00815 	stw	r7,32(sp)
    7274:	d8800d17 	ldw	r2,52(sp)
    7278:	103e721e 	bne	r2,zero,6c44 <__alt_data_end+0xff006c44>
    727c:	00800044 	movi	r2,1
    7280:	003e7906 	br	6c68 <__alt_data_end+0xff006c68>
    7284:	8009883a 	mov	r4,r16
    7288:	000ede00 	call	ede0 <__floatsidf>
    728c:	d9800f17 	ldw	r6,60(sp)
    7290:	d9c01017 	ldw	r7,64(sp)
    7294:	1009883a 	mov	r4,r2
    7298:	180b883a 	mov	r5,r3
    729c:	000dd4c0 	call	dd4c <__muldf3>
    72a0:	000d883a 	mov	r6,zero
    72a4:	01d00734 	movhi	r7,16412
    72a8:	1009883a 	mov	r4,r2
    72ac:	180b883a 	mov	r5,r3
    72b0:	000d2480 	call	d248 <__adddf3>
    72b4:	047f3034 	movhi	r17,64704
    72b8:	1021883a 	mov	r16,r2
    72bc:	1c63883a 	add	r17,r3,r17
    72c0:	d9000f17 	ldw	r4,60(sp)
    72c4:	d9401017 	ldw	r5,64(sp)
    72c8:	000d883a 	mov	r6,zero
    72cc:	01d00534 	movhi	r7,16404
    72d0:	000e4640 	call	e464 <__subdf3>
    72d4:	800d883a 	mov	r6,r16
    72d8:	880f883a 	mov	r7,r17
    72dc:	1009883a 	mov	r4,r2
    72e0:	180b883a 	mov	r5,r3
    72e4:	102b883a 	mov	r21,r2
    72e8:	1829883a 	mov	r20,r3
    72ec:	000db7c0 	call	db7c <__gedf2>
    72f0:	00806c16 	blt	zero,r2,74a4 <_dtoa_r+0x1304>
    72f4:	89e0003c 	xorhi	r7,r17,32768
    72f8:	800d883a 	mov	r6,r16
    72fc:	a809883a 	mov	r4,r21
    7300:	a00b883a 	mov	r5,r20
    7304:	000dc580 	call	dc58 <__ledf2>
    7308:	103d7e0e 	bge	r2,zero,6904 <__alt_data_end+0xff006904>
    730c:	002b883a 	mov	r21,zero
    7310:	0023883a 	mov	r17,zero
    7314:	003efb06 	br	6f04 <__alt_data_end+0xff006f04>
    7318:	d8800717 	ldw	r2,28(sp)
    731c:	003bd006 	br	6260 <__alt_data_end+0xff006260>
    7320:	d9000a17 	ldw	r4,40(sp)
    7324:	d9800d17 	ldw	r6,52(sp)
    7328:	dd400a15 	stw	r21,40(sp)
    732c:	a905c83a 	sub	r2,r21,r4
    7330:	308d883a 	add	r6,r6,r2
    7334:	d9800d15 	stw	r6,52(sp)
    7338:	002b883a 	mov	r21,zero
    733c:	003e0606 	br	6b58 <__alt_data_end+0xff006b58>
    7340:	9023883a 	mov	r17,r18
    7344:	9829883a 	mov	r20,r19
    7348:	04000084 	movi	r16,2
    734c:	003c9206 	br	6598 <__alt_data_end+0xff006598>
    7350:	04000044 	movi	r16,1
    7354:	dc000c15 	stw	r16,48(sp)
    7358:	dc000615 	stw	r16,24(sp)
    735c:	dc002215 	stw	r16,136(sp)
    7360:	e0001115 	stw	zero,68(fp)
    7364:	000b883a 	mov	r5,zero
    7368:	003c6906 	br	6510 <__alt_data_end+0xff006510>
    736c:	3021883a 	mov	r16,r6
    7370:	003ffb06 	br	7360 <__alt_data_end+0xff007360>
    7374:	1000021e 	bne	r2,zero,7380 <_dtoa_r+0x11e0>
    7378:	4200004c 	andi	r8,r8,1
    737c:	403e7d1e 	bne	r8,zero,6d74 <__alt_data_end+0xff006d74>
    7380:	01000c04 	movi	r4,48
    7384:	00000106 	br	738c <_dtoa_r+0x11ec>
    7388:	102f883a 	mov	r23,r2
    738c:	b8bfffc4 	addi	r2,r23,-1
    7390:	10c00007 	ldb	r3,0(r2)
    7394:	193ffc26 	beq	r3,r4,7388 <__alt_data_end+0xff007388>
    7398:	003e8706 	br	6db8 <__alt_data_end+0xff006db8>
    739c:	d8800517 	ldw	r2,20(sp)
    73a0:	00a3c83a 	sub	r17,zero,r2
    73a4:	8800a426 	beq	r17,zero,7638 <_dtoa_r+0x1498>
    73a8:	888003cc 	andi	r2,r17,15
    73ac:	100490fa 	slli	r2,r2,3
    73b0:	00c00074 	movhi	r3,1
    73b4:	18c89b04 	addi	r3,r3,8812
    73b8:	1885883a 	add	r2,r3,r2
    73bc:	11800017 	ldw	r6,0(r2)
    73c0:	11c00117 	ldw	r7,4(r2)
    73c4:	9009883a 	mov	r4,r18
    73c8:	980b883a 	mov	r5,r19
    73cc:	8823d13a 	srai	r17,r17,4
    73d0:	000dd4c0 	call	dd4c <__muldf3>
    73d4:	d8800f15 	stw	r2,60(sp)
    73d8:	d8c01015 	stw	r3,64(sp)
    73dc:	8800e826 	beq	r17,zero,7780 <_dtoa_r+0x15e0>
    73e0:	05000074 	movhi	r20,1
    73e4:	a5089104 	addi	r20,r20,8772
    73e8:	04000084 	movi	r16,2
    73ec:	8980004c 	andi	r6,r17,1
    73f0:	1009883a 	mov	r4,r2
    73f4:	8823d07a 	srai	r17,r17,1
    73f8:	180b883a 	mov	r5,r3
    73fc:	30000426 	beq	r6,zero,7410 <_dtoa_r+0x1270>
    7400:	a1800017 	ldw	r6,0(r20)
    7404:	a1c00117 	ldw	r7,4(r20)
    7408:	84000044 	addi	r16,r16,1
    740c:	000dd4c0 	call	dd4c <__muldf3>
    7410:	a5000204 	addi	r20,r20,8
    7414:	883ff51e 	bne	r17,zero,73ec <__alt_data_end+0xff0073ec>
    7418:	d8800f15 	stw	r2,60(sp)
    741c:	d8c01015 	stw	r3,64(sp)
    7420:	003c7606 	br	65fc <__alt_data_end+0xff0065fc>
    7424:	00c00c04 	movi	r3,48
    7428:	10c00005 	stb	r3,0(r2)
    742c:	d8c00517 	ldw	r3,20(sp)
    7430:	bd3fffc3 	ldbu	r20,-1(r23)
    7434:	18c00044 	addi	r3,r3,1
    7438:	d8c00515 	stw	r3,20(sp)
    743c:	003db906 	br	6b24 <__alt_data_end+0xff006b24>
    7440:	89400117 	ldw	r5,4(r17)
    7444:	e009883a 	mov	r4,fp
    7448:	00090300 	call	9030 <_Balloc>
    744c:	89800417 	ldw	r6,16(r17)
    7450:	89400304 	addi	r5,r17,12
    7454:	11000304 	addi	r4,r2,12
    7458:	31800084 	addi	r6,r6,2
    745c:	318d883a 	add	r6,r6,r6
    7460:	318d883a 	add	r6,r6,r6
    7464:	1027883a 	mov	r19,r2
    7468:	0008c640 	call	8c64 <memcpy>
    746c:	01800044 	movi	r6,1
    7470:	980b883a 	mov	r5,r19
    7474:	e009883a 	mov	r4,fp
    7478:	00097b00 	call	97b0 <__lshift>
    747c:	1029883a 	mov	r20,r2
    7480:	003ecc06 	br	6fb4 <__alt_data_end+0xff006fb4>
    7484:	00800e44 	movi	r2,57
    7488:	90809026 	beq	r18,r2,76cc <_dtoa_r+0x152c>
    748c:	92000044 	addi	r8,r18,1
    7490:	003f1f06 	br	7110 <__alt_data_end+0xff007110>
    7494:	9011883a 	mov	r8,r18
    7498:	8825883a 	mov	r18,r17
    749c:	a023883a 	mov	r17,r20
    74a0:	003e2906 	br	6d48 <__alt_data_end+0xff006d48>
    74a4:	002b883a 	mov	r21,zero
    74a8:	0023883a 	mov	r17,zero
    74ac:	003f5406 	br	7200 <__alt_data_end+0xff007200>
    74b0:	61bfffc4 	addi	r6,r12,-1
    74b4:	300490fa 	slli	r2,r6,3
    74b8:	00c00074 	movhi	r3,1
    74bc:	18c89b04 	addi	r3,r3,8812
    74c0:	1885883a 	add	r2,r3,r2
    74c4:	11000017 	ldw	r4,0(r2)
    74c8:	11400117 	ldw	r5,4(r2)
    74cc:	d8800717 	ldw	r2,28(sp)
    74d0:	880f883a 	mov	r7,r17
    74d4:	d9801215 	stw	r6,72(sp)
    74d8:	800d883a 	mov	r6,r16
    74dc:	db001615 	stw	r12,88(sp)
    74e0:	15c00044 	addi	r23,r2,1
    74e4:	000dd4c0 	call	dd4c <__muldf3>
    74e8:	d9401017 	ldw	r5,64(sp)
    74ec:	d9000f17 	ldw	r4,60(sp)
    74f0:	d8c01515 	stw	r3,84(sp)
    74f4:	d8801415 	stw	r2,80(sp)
    74f8:	000ed600 	call	ed60 <__fixdfsi>
    74fc:	1009883a 	mov	r4,r2
    7500:	1021883a 	mov	r16,r2
    7504:	000ede00 	call	ede0 <__floatsidf>
    7508:	d9000f17 	ldw	r4,60(sp)
    750c:	d9401017 	ldw	r5,64(sp)
    7510:	100d883a 	mov	r6,r2
    7514:	180f883a 	mov	r7,r3
    7518:	000e4640 	call	e464 <__subdf3>
    751c:	1829883a 	mov	r20,r3
    7520:	d8c00717 	ldw	r3,28(sp)
    7524:	84000c04 	addi	r16,r16,48
    7528:	1023883a 	mov	r17,r2
    752c:	1c000005 	stb	r16,0(r3)
    7530:	db001617 	ldw	r12,88(sp)
    7534:	00800044 	movi	r2,1
    7538:	60802226 	beq	r12,r2,75c4 <_dtoa_r+0x1424>
    753c:	d9c00717 	ldw	r7,28(sp)
    7540:	8805883a 	mov	r2,r17
    7544:	b82b883a 	mov	r21,r23
    7548:	3b19883a 	add	r12,r7,r12
    754c:	6023883a 	mov	r17,r12
    7550:	a007883a 	mov	r3,r20
    7554:	dc800f15 	stw	r18,60(sp)
    7558:	000d883a 	mov	r6,zero
    755c:	01d00934 	movhi	r7,16420
    7560:	1009883a 	mov	r4,r2
    7564:	180b883a 	mov	r5,r3
    7568:	000dd4c0 	call	dd4c <__muldf3>
    756c:	180b883a 	mov	r5,r3
    7570:	1009883a 	mov	r4,r2
    7574:	1829883a 	mov	r20,r3
    7578:	1025883a 	mov	r18,r2
    757c:	000ed600 	call	ed60 <__fixdfsi>
    7580:	1009883a 	mov	r4,r2
    7584:	1021883a 	mov	r16,r2
    7588:	000ede00 	call	ede0 <__floatsidf>
    758c:	100d883a 	mov	r6,r2
    7590:	180f883a 	mov	r7,r3
    7594:	9009883a 	mov	r4,r18
    7598:	a00b883a 	mov	r5,r20
    759c:	84000c04 	addi	r16,r16,48
    75a0:	000e4640 	call	e464 <__subdf3>
    75a4:	ad400044 	addi	r21,r21,1
    75a8:	ac3fffc5 	stb	r16,-1(r21)
    75ac:	ac7fea1e 	bne	r21,r17,7558 <__alt_data_end+0xff007558>
    75b0:	1023883a 	mov	r17,r2
    75b4:	d8801217 	ldw	r2,72(sp)
    75b8:	dc800f17 	ldw	r18,60(sp)
    75bc:	1829883a 	mov	r20,r3
    75c0:	b8af883a 	add	r23,r23,r2
    75c4:	d9001417 	ldw	r4,80(sp)
    75c8:	d9401517 	ldw	r5,84(sp)
    75cc:	000d883a 	mov	r6,zero
    75d0:	01cff834 	movhi	r7,16352
    75d4:	000d2480 	call	d248 <__adddf3>
    75d8:	880d883a 	mov	r6,r17
    75dc:	a00f883a 	mov	r7,r20
    75e0:	1009883a 	mov	r4,r2
    75e4:	180b883a 	mov	r5,r3
    75e8:	000dc580 	call	dc58 <__ledf2>
    75ec:	10003e0e 	bge	r2,zero,76e8 <_dtoa_r+0x1548>
    75f0:	d9001317 	ldw	r4,76(sp)
    75f4:	bd3fffc3 	ldbu	r20,-1(r23)
    75f8:	d9000515 	stw	r4,20(sp)
    75fc:	003d3b06 	br	6aec <__alt_data_end+0xff006aec>
    7600:	0027883a 	mov	r19,zero
    7604:	003f1b06 	br	7274 <__alt_data_end+0xff007274>
    7608:	d8800817 	ldw	r2,32(sp)
    760c:	11e9c83a 	sub	r20,r2,r7
    7610:	0005883a 	mov	r2,zero
    7614:	003d5406 	br	6b68 <__alt_data_end+0xff006b68>
    7618:	00800044 	movi	r2,1
    761c:	003dc706 	br	6d3c <__alt_data_end+0xff006d3c>
    7620:	d8c00217 	ldw	r3,8(sp)
    7624:	00800d84 	movi	r2,54
    7628:	dd400a17 	ldw	r21,40(sp)
    762c:	10c5c83a 	sub	r2,r2,r3
    7630:	dd000817 	ldw	r20,32(sp)
    7634:	003d4c06 	br	6b68 <__alt_data_end+0xff006b68>
    7638:	dc800f15 	stw	r18,60(sp)
    763c:	dcc01015 	stw	r19,64(sp)
    7640:	04000084 	movi	r16,2
    7644:	003bed06 	br	65fc <__alt_data_end+0xff0065fc>
    7648:	d9000617 	ldw	r4,24(sp)
    764c:	203f0d26 	beq	r4,zero,7284 <__alt_data_end+0xff007284>
    7650:	d9800c17 	ldw	r6,48(sp)
    7654:	01bcab0e 	bge	zero,r6,6904 <__alt_data_end+0xff006904>
    7658:	d9401017 	ldw	r5,64(sp)
    765c:	d9000f17 	ldw	r4,60(sp)
    7660:	000d883a 	mov	r6,zero
    7664:	01d00934 	movhi	r7,16420
    7668:	000dd4c0 	call	dd4c <__muldf3>
    766c:	81000044 	addi	r4,r16,1
    7670:	d8800f15 	stw	r2,60(sp)
    7674:	d8c01015 	stw	r3,64(sp)
    7678:	000ede00 	call	ede0 <__floatsidf>
    767c:	d9800f17 	ldw	r6,60(sp)
    7680:	d9c01017 	ldw	r7,64(sp)
    7684:	1009883a 	mov	r4,r2
    7688:	180b883a 	mov	r5,r3
    768c:	000dd4c0 	call	dd4c <__muldf3>
    7690:	01d00734 	movhi	r7,16412
    7694:	000d883a 	mov	r6,zero
    7698:	1009883a 	mov	r4,r2
    769c:	180b883a 	mov	r5,r3
    76a0:	000d2480 	call	d248 <__adddf3>
    76a4:	d9c00517 	ldw	r7,20(sp)
    76a8:	047f3034 	movhi	r17,64704
    76ac:	1021883a 	mov	r16,r2
    76b0:	39ffffc4 	addi	r7,r7,-1
    76b4:	d9c01315 	stw	r7,76(sp)
    76b8:	1c63883a 	add	r17,r3,r17
    76bc:	db000c17 	ldw	r12,48(sp)
    76c0:	003bea06 	br	666c <__alt_data_end+0xff00666c>
    76c4:	dc000915 	stw	r16,36(sp)
    76c8:	003e0e06 	br	6f04 <__alt_data_end+0xff006f04>
    76cc:	01000e44 	movi	r4,57
    76d0:	8825883a 	mov	r18,r17
    76d4:	9dc00044 	addi	r23,r19,1
    76d8:	99000005 	stb	r4,0(r19)
    76dc:	a023883a 	mov	r17,r20
    76e0:	dc000915 	stw	r16,36(sp)
    76e4:	003da406 	br	6d78 <__alt_data_end+0xff006d78>
    76e8:	d9801417 	ldw	r6,80(sp)
    76ec:	d9c01517 	ldw	r7,84(sp)
    76f0:	0009883a 	mov	r4,zero
    76f4:	014ff834 	movhi	r5,16352
    76f8:	000e4640 	call	e464 <__subdf3>
    76fc:	880d883a 	mov	r6,r17
    7700:	a00f883a 	mov	r7,r20
    7704:	1009883a 	mov	r4,r2
    7708:	180b883a 	mov	r5,r3
    770c:	000db7c0 	call	db7c <__gedf2>
    7710:	00bc7c0e 	bge	zero,r2,6904 <__alt_data_end+0xff006904>
    7714:	01000c04 	movi	r4,48
    7718:	00000106 	br	7720 <_dtoa_r+0x1580>
    771c:	102f883a 	mov	r23,r2
    7720:	b8bfffc4 	addi	r2,r23,-1
    7724:	10c00007 	ldb	r3,0(r2)
    7728:	193ffc26 	beq	r3,r4,771c <__alt_data_end+0xff00771c>
    772c:	d9801317 	ldw	r6,76(sp)
    7730:	d9800515 	stw	r6,20(sp)
    7734:	003c4406 	br	6848 <__alt_data_end+0xff006848>
    7738:	d9801317 	ldw	r6,76(sp)
    773c:	d9800515 	stw	r6,20(sp)
    7740:	003cea06 	br	6aec <__alt_data_end+0xff006aec>
    7744:	dd800f17 	ldw	r22,60(sp)
    7748:	dcc01017 	ldw	r19,64(sp)
    774c:	dc801217 	ldw	r18,72(sp)
    7750:	003c6c06 	br	6904 <__alt_data_end+0xff006904>
    7754:	903e031e 	bne	r18,zero,6f64 <__alt_data_end+0xff006f64>
    7758:	003ebb06 	br	7248 <__alt_data_end+0xff007248>
    775c:	103e6c1e 	bne	r2,zero,7110 <__alt_data_end+0xff007110>
    7760:	4080004c 	andi	r2,r8,1
    7764:	103e6a26 	beq	r2,zero,7110 <__alt_data_end+0xff007110>
    7768:	003e6606 	br	7104 <__alt_data_end+0xff007104>
    776c:	d8c00317 	ldw	r3,12(sp)
    7770:	00800084 	movi	r2,2
    7774:	10c02916 	blt	r2,r3,781c <_dtoa_r+0x167c>
    7778:	d9000c17 	ldw	r4,48(sp)
    777c:	003e8806 	br	71a0 <__alt_data_end+0xff0071a0>
    7780:	04000084 	movi	r16,2
    7784:	003b9d06 	br	65fc <__alt_data_end+0xff0065fc>
    7788:	d9001317 	ldw	r4,76(sp)
    778c:	d9000515 	stw	r4,20(sp)
    7790:	003cd606 	br	6aec <__alt_data_end+0xff006aec>
    7794:	d8801317 	ldw	r2,76(sp)
    7798:	d8800515 	stw	r2,20(sp)
    779c:	003c2a06 	br	6848 <__alt_data_end+0xff006848>
    77a0:	d9800317 	ldw	r6,12(sp)
    77a4:	00800084 	movi	r2,2
    77a8:	11801516 	blt	r2,r6,7800 <_dtoa_r+0x1660>
    77ac:	d9c00c17 	ldw	r7,48(sp)
    77b0:	d9c00615 	stw	r7,24(sp)
    77b4:	003df706 	br	6f94 <__alt_data_end+0xff006f94>
    77b8:	193d3926 	beq	r3,r4,6ca0 <__alt_data_end+0xff006ca0>
    77bc:	00c00f04 	movi	r3,60
    77c0:	1885c83a 	sub	r2,r3,r2
    77c4:	003ddf06 	br	6f44 <__alt_data_end+0xff006f44>
    77c8:	e009883a 	mov	r4,fp
    77cc:	e0001115 	stw	zero,68(fp)
    77d0:	000b883a 	mov	r5,zero
    77d4:	00090300 	call	9030 <_Balloc>
    77d8:	d8800715 	stw	r2,28(sp)
    77dc:	d8c00717 	ldw	r3,28(sp)
    77e0:	00bfffc4 	movi	r2,-1
    77e4:	01000044 	movi	r4,1
    77e8:	d8800c15 	stw	r2,48(sp)
    77ec:	e0c01015 	stw	r3,64(fp)
    77f0:	d9000b15 	stw	r4,44(sp)
    77f4:	d8800615 	stw	r2,24(sp)
    77f8:	d8002215 	stw	zero,136(sp)
    77fc:	003c4106 	br	6904 <__alt_data_end+0xff006904>
    7800:	d8c00c17 	ldw	r3,48(sp)
    7804:	d8c00615 	stw	r3,24(sp)
    7808:	003e7006 	br	71cc <__alt_data_end+0xff0071cc>
    780c:	04400044 	movi	r17,1
    7810:	003b2006 	br	6494 <__alt_data_end+0xff006494>
    7814:	000b883a 	mov	r5,zero
    7818:	003b3d06 	br	6510 <__alt_data_end+0xff006510>
    781c:	d8800c17 	ldw	r2,48(sp)
    7820:	d8800615 	stw	r2,24(sp)
    7824:	003e6906 	br	71cc <__alt_data_end+0xff0071cc>

00007828 <__sflush_r>:
    7828:	2880030b 	ldhu	r2,12(r5)
    782c:	defffb04 	addi	sp,sp,-20
    7830:	dcc00315 	stw	r19,12(sp)
    7834:	dc400115 	stw	r17,4(sp)
    7838:	dfc00415 	stw	ra,16(sp)
    783c:	dc800215 	stw	r18,8(sp)
    7840:	dc000015 	stw	r16,0(sp)
    7844:	10c0020c 	andi	r3,r2,8
    7848:	2823883a 	mov	r17,r5
    784c:	2027883a 	mov	r19,r4
    7850:	1800311e 	bne	r3,zero,7918 <__sflush_r+0xf0>
    7854:	28c00117 	ldw	r3,4(r5)
    7858:	10820014 	ori	r2,r2,2048
    785c:	2880030d 	sth	r2,12(r5)
    7860:	00c04b0e 	bge	zero,r3,7990 <__sflush_r+0x168>
    7864:	8a000a17 	ldw	r8,40(r17)
    7868:	40002326 	beq	r8,zero,78f8 <__sflush_r+0xd0>
    786c:	9c000017 	ldw	r16,0(r19)
    7870:	10c4000c 	andi	r3,r2,4096
    7874:	98000015 	stw	zero,0(r19)
    7878:	18004826 	beq	r3,zero,799c <__sflush_r+0x174>
    787c:	89801417 	ldw	r6,80(r17)
    7880:	10c0010c 	andi	r3,r2,4
    7884:	18000626 	beq	r3,zero,78a0 <__sflush_r+0x78>
    7888:	88c00117 	ldw	r3,4(r17)
    788c:	88800c17 	ldw	r2,48(r17)
    7890:	30cdc83a 	sub	r6,r6,r3
    7894:	10000226 	beq	r2,zero,78a0 <__sflush_r+0x78>
    7898:	88800f17 	ldw	r2,60(r17)
    789c:	308dc83a 	sub	r6,r6,r2
    78a0:	89400717 	ldw	r5,28(r17)
    78a4:	000f883a 	mov	r7,zero
    78a8:	9809883a 	mov	r4,r19
    78ac:	403ee83a 	callr	r8
    78b0:	00ffffc4 	movi	r3,-1
    78b4:	10c04426 	beq	r2,r3,79c8 <__sflush_r+0x1a0>
    78b8:	88c0030b 	ldhu	r3,12(r17)
    78bc:	89000417 	ldw	r4,16(r17)
    78c0:	88000115 	stw	zero,4(r17)
    78c4:	197dffcc 	andi	r5,r3,63487
    78c8:	8940030d 	sth	r5,12(r17)
    78cc:	89000015 	stw	r4,0(r17)
    78d0:	18c4000c 	andi	r3,r3,4096
    78d4:	18002c1e 	bne	r3,zero,7988 <__sflush_r+0x160>
    78d8:	89400c17 	ldw	r5,48(r17)
    78dc:	9c000015 	stw	r16,0(r19)
    78e0:	28000526 	beq	r5,zero,78f8 <__sflush_r+0xd0>
    78e4:	88801004 	addi	r2,r17,64
    78e8:	28800226 	beq	r5,r2,78f4 <__sflush_r+0xcc>
    78ec:	9809883a 	mov	r4,r19
    78f0:	0007f940 	call	7f94 <_free_r>
    78f4:	88000c15 	stw	zero,48(r17)
    78f8:	0005883a 	mov	r2,zero
    78fc:	dfc00417 	ldw	ra,16(sp)
    7900:	dcc00317 	ldw	r19,12(sp)
    7904:	dc800217 	ldw	r18,8(sp)
    7908:	dc400117 	ldw	r17,4(sp)
    790c:	dc000017 	ldw	r16,0(sp)
    7910:	dec00504 	addi	sp,sp,20
    7914:	f800283a 	ret
    7918:	2c800417 	ldw	r18,16(r5)
    791c:	903ff626 	beq	r18,zero,78f8 <__alt_data_end+0xff0078f8>
    7920:	2c000017 	ldw	r16,0(r5)
    7924:	108000cc 	andi	r2,r2,3
    7928:	2c800015 	stw	r18,0(r5)
    792c:	84a1c83a 	sub	r16,r16,r18
    7930:	1000131e 	bne	r2,zero,7980 <__sflush_r+0x158>
    7934:	28800517 	ldw	r2,20(r5)
    7938:	88800215 	stw	r2,8(r17)
    793c:	04000316 	blt	zero,r16,794c <__sflush_r+0x124>
    7940:	003fed06 	br	78f8 <__alt_data_end+0xff0078f8>
    7944:	90a5883a 	add	r18,r18,r2
    7948:	043feb0e 	bge	zero,r16,78f8 <__alt_data_end+0xff0078f8>
    794c:	88800917 	ldw	r2,36(r17)
    7950:	89400717 	ldw	r5,28(r17)
    7954:	800f883a 	mov	r7,r16
    7958:	900d883a 	mov	r6,r18
    795c:	9809883a 	mov	r4,r19
    7960:	103ee83a 	callr	r2
    7964:	80a1c83a 	sub	r16,r16,r2
    7968:	00bff616 	blt	zero,r2,7944 <__alt_data_end+0xff007944>
    796c:	88c0030b 	ldhu	r3,12(r17)
    7970:	00bfffc4 	movi	r2,-1
    7974:	18c01014 	ori	r3,r3,64
    7978:	88c0030d 	sth	r3,12(r17)
    797c:	003fdf06 	br	78fc <__alt_data_end+0xff0078fc>
    7980:	0005883a 	mov	r2,zero
    7984:	003fec06 	br	7938 <__alt_data_end+0xff007938>
    7988:	88801415 	stw	r2,80(r17)
    798c:	003fd206 	br	78d8 <__alt_data_end+0xff0078d8>
    7990:	28c00f17 	ldw	r3,60(r5)
    7994:	00ffb316 	blt	zero,r3,7864 <__alt_data_end+0xff007864>
    7998:	003fd706 	br	78f8 <__alt_data_end+0xff0078f8>
    799c:	89400717 	ldw	r5,28(r17)
    79a0:	000d883a 	mov	r6,zero
    79a4:	01c00044 	movi	r7,1
    79a8:	9809883a 	mov	r4,r19
    79ac:	403ee83a 	callr	r8
    79b0:	100d883a 	mov	r6,r2
    79b4:	00bfffc4 	movi	r2,-1
    79b8:	30801426 	beq	r6,r2,7a0c <__sflush_r+0x1e4>
    79bc:	8880030b 	ldhu	r2,12(r17)
    79c0:	8a000a17 	ldw	r8,40(r17)
    79c4:	003fae06 	br	7880 <__alt_data_end+0xff007880>
    79c8:	98c00017 	ldw	r3,0(r19)
    79cc:	183fba26 	beq	r3,zero,78b8 <__alt_data_end+0xff0078b8>
    79d0:	01000744 	movi	r4,29
    79d4:	19000626 	beq	r3,r4,79f0 <__sflush_r+0x1c8>
    79d8:	01000584 	movi	r4,22
    79dc:	19000426 	beq	r3,r4,79f0 <__sflush_r+0x1c8>
    79e0:	88c0030b 	ldhu	r3,12(r17)
    79e4:	18c01014 	ori	r3,r3,64
    79e8:	88c0030d 	sth	r3,12(r17)
    79ec:	003fc306 	br	78fc <__alt_data_end+0xff0078fc>
    79f0:	8880030b 	ldhu	r2,12(r17)
    79f4:	88c00417 	ldw	r3,16(r17)
    79f8:	88000115 	stw	zero,4(r17)
    79fc:	10bdffcc 	andi	r2,r2,63487
    7a00:	8880030d 	sth	r2,12(r17)
    7a04:	88c00015 	stw	r3,0(r17)
    7a08:	003fb306 	br	78d8 <__alt_data_end+0xff0078d8>
    7a0c:	98800017 	ldw	r2,0(r19)
    7a10:	103fea26 	beq	r2,zero,79bc <__alt_data_end+0xff0079bc>
    7a14:	00c00744 	movi	r3,29
    7a18:	10c00226 	beq	r2,r3,7a24 <__sflush_r+0x1fc>
    7a1c:	00c00584 	movi	r3,22
    7a20:	10c0031e 	bne	r2,r3,7a30 <__sflush_r+0x208>
    7a24:	9c000015 	stw	r16,0(r19)
    7a28:	0005883a 	mov	r2,zero
    7a2c:	003fb306 	br	78fc <__alt_data_end+0xff0078fc>
    7a30:	88c0030b 	ldhu	r3,12(r17)
    7a34:	3005883a 	mov	r2,r6
    7a38:	18c01014 	ori	r3,r3,64
    7a3c:	88c0030d 	sth	r3,12(r17)
    7a40:	003fae06 	br	78fc <__alt_data_end+0xff0078fc>

00007a44 <_fflush_r>:
    7a44:	defffd04 	addi	sp,sp,-12
    7a48:	dc000115 	stw	r16,4(sp)
    7a4c:	dfc00215 	stw	ra,8(sp)
    7a50:	2021883a 	mov	r16,r4
    7a54:	20000226 	beq	r4,zero,7a60 <_fflush_r+0x1c>
    7a58:	20800e17 	ldw	r2,56(r4)
    7a5c:	10000c26 	beq	r2,zero,7a90 <_fflush_r+0x4c>
    7a60:	2880030f 	ldh	r2,12(r5)
    7a64:	1000051e 	bne	r2,zero,7a7c <_fflush_r+0x38>
    7a68:	0005883a 	mov	r2,zero
    7a6c:	dfc00217 	ldw	ra,8(sp)
    7a70:	dc000117 	ldw	r16,4(sp)
    7a74:	dec00304 	addi	sp,sp,12
    7a78:	f800283a 	ret
    7a7c:	8009883a 	mov	r4,r16
    7a80:	dfc00217 	ldw	ra,8(sp)
    7a84:	dc000117 	ldw	r16,4(sp)
    7a88:	dec00304 	addi	sp,sp,12
    7a8c:	00078281 	jmpi	7828 <__sflush_r>
    7a90:	d9400015 	stw	r5,0(sp)
    7a94:	0007e200 	call	7e20 <__sinit>
    7a98:	d9400017 	ldw	r5,0(sp)
    7a9c:	003ff006 	br	7a60 <__alt_data_end+0xff007a60>

00007aa0 <fflush>:
    7aa0:	20000526 	beq	r4,zero,7ab8 <fflush+0x18>
    7aa4:	00800074 	movhi	r2,1
    7aa8:	108fce04 	addi	r2,r2,16184
    7aac:	200b883a 	mov	r5,r4
    7ab0:	11000017 	ldw	r4,0(r2)
    7ab4:	0007a441 	jmpi	7a44 <_fflush_r>
    7ab8:	00800074 	movhi	r2,1
    7abc:	108fcd04 	addi	r2,r2,16180
    7ac0:	11000017 	ldw	r4,0(r2)
    7ac4:	01400034 	movhi	r5,0
    7ac8:	295e9104 	addi	r5,r5,31300
    7acc:	00088241 	jmpi	8824 <_fwalk_reent>

00007ad0 <__fp_unlock>:
    7ad0:	0005883a 	mov	r2,zero
    7ad4:	f800283a 	ret

00007ad8 <_cleanup_r>:
    7ad8:	01400074 	movhi	r5,1
    7adc:	296ff704 	addi	r5,r5,-16420
    7ae0:	00088241 	jmpi	8824 <_fwalk_reent>

00007ae4 <__sinit.part.1>:
    7ae4:	defff704 	addi	sp,sp,-36
    7ae8:	00c00034 	movhi	r3,0
    7aec:	dfc00815 	stw	ra,32(sp)
    7af0:	ddc00715 	stw	r23,28(sp)
    7af4:	dd800615 	stw	r22,24(sp)
    7af8:	dd400515 	stw	r21,20(sp)
    7afc:	dd000415 	stw	r20,16(sp)
    7b00:	dcc00315 	stw	r19,12(sp)
    7b04:	dc800215 	stw	r18,8(sp)
    7b08:	dc400115 	stw	r17,4(sp)
    7b0c:	dc000015 	stw	r16,0(sp)
    7b10:	18deb604 	addi	r3,r3,31448
    7b14:	24000117 	ldw	r16,4(r4)
    7b18:	20c00f15 	stw	r3,60(r4)
    7b1c:	2080bb04 	addi	r2,r4,748
    7b20:	00c000c4 	movi	r3,3
    7b24:	20c0b915 	stw	r3,740(r4)
    7b28:	2080ba15 	stw	r2,744(r4)
    7b2c:	2000b815 	stw	zero,736(r4)
    7b30:	05c00204 	movi	r23,8
    7b34:	00800104 	movi	r2,4
    7b38:	2025883a 	mov	r18,r4
    7b3c:	b80d883a 	mov	r6,r23
    7b40:	81001704 	addi	r4,r16,92
    7b44:	000b883a 	mov	r5,zero
    7b48:	80000015 	stw	zero,0(r16)
    7b4c:	80000115 	stw	zero,4(r16)
    7b50:	80000215 	stw	zero,8(r16)
    7b54:	8080030d 	sth	r2,12(r16)
    7b58:	80001915 	stw	zero,100(r16)
    7b5c:	8000038d 	sth	zero,14(r16)
    7b60:	80000415 	stw	zero,16(r16)
    7b64:	80000515 	stw	zero,20(r16)
    7b68:	80000615 	stw	zero,24(r16)
    7b6c:	0008f080 	call	8f08 <memset>
    7b70:	05800074 	movhi	r22,1
    7b74:	94400217 	ldw	r17,8(r18)
    7b78:	05400074 	movhi	r21,1
    7b7c:	05000074 	movhi	r20,1
    7b80:	04c00074 	movhi	r19,1
    7b84:	b5a98104 	addi	r22,r22,-23036
    7b88:	ad699804 	addi	r21,r21,-22944
    7b8c:	a529b704 	addi	r20,r20,-22820
    7b90:	9ce9ce04 	addi	r19,r19,-22728
    7b94:	85800815 	stw	r22,32(r16)
    7b98:	85400915 	stw	r21,36(r16)
    7b9c:	85000a15 	stw	r20,40(r16)
    7ba0:	84c00b15 	stw	r19,44(r16)
    7ba4:	84000715 	stw	r16,28(r16)
    7ba8:	00800284 	movi	r2,10
    7bac:	8880030d 	sth	r2,12(r17)
    7bb0:	00800044 	movi	r2,1
    7bb4:	b80d883a 	mov	r6,r23
    7bb8:	89001704 	addi	r4,r17,92
    7bbc:	000b883a 	mov	r5,zero
    7bc0:	88000015 	stw	zero,0(r17)
    7bc4:	88000115 	stw	zero,4(r17)
    7bc8:	88000215 	stw	zero,8(r17)
    7bcc:	88001915 	stw	zero,100(r17)
    7bd0:	8880038d 	sth	r2,14(r17)
    7bd4:	88000415 	stw	zero,16(r17)
    7bd8:	88000515 	stw	zero,20(r17)
    7bdc:	88000615 	stw	zero,24(r17)
    7be0:	0008f080 	call	8f08 <memset>
    7be4:	94000317 	ldw	r16,12(r18)
    7be8:	00800484 	movi	r2,18
    7bec:	8c400715 	stw	r17,28(r17)
    7bf0:	8d800815 	stw	r22,32(r17)
    7bf4:	8d400915 	stw	r21,36(r17)
    7bf8:	8d000a15 	stw	r20,40(r17)
    7bfc:	8cc00b15 	stw	r19,44(r17)
    7c00:	8080030d 	sth	r2,12(r16)
    7c04:	00800084 	movi	r2,2
    7c08:	80000015 	stw	zero,0(r16)
    7c0c:	80000115 	stw	zero,4(r16)
    7c10:	80000215 	stw	zero,8(r16)
    7c14:	80001915 	stw	zero,100(r16)
    7c18:	8080038d 	sth	r2,14(r16)
    7c1c:	80000415 	stw	zero,16(r16)
    7c20:	80000515 	stw	zero,20(r16)
    7c24:	80000615 	stw	zero,24(r16)
    7c28:	b80d883a 	mov	r6,r23
    7c2c:	000b883a 	mov	r5,zero
    7c30:	81001704 	addi	r4,r16,92
    7c34:	0008f080 	call	8f08 <memset>
    7c38:	00800044 	movi	r2,1
    7c3c:	84000715 	stw	r16,28(r16)
    7c40:	85800815 	stw	r22,32(r16)
    7c44:	85400915 	stw	r21,36(r16)
    7c48:	85000a15 	stw	r20,40(r16)
    7c4c:	84c00b15 	stw	r19,44(r16)
    7c50:	90800e15 	stw	r2,56(r18)
    7c54:	dfc00817 	ldw	ra,32(sp)
    7c58:	ddc00717 	ldw	r23,28(sp)
    7c5c:	dd800617 	ldw	r22,24(sp)
    7c60:	dd400517 	ldw	r21,20(sp)
    7c64:	dd000417 	ldw	r20,16(sp)
    7c68:	dcc00317 	ldw	r19,12(sp)
    7c6c:	dc800217 	ldw	r18,8(sp)
    7c70:	dc400117 	ldw	r17,4(sp)
    7c74:	dc000017 	ldw	r16,0(sp)
    7c78:	dec00904 	addi	sp,sp,36
    7c7c:	f800283a 	ret

00007c80 <__fp_lock>:
    7c80:	0005883a 	mov	r2,zero
    7c84:	f800283a 	ret

00007c88 <__sfmoreglue>:
    7c88:	defffc04 	addi	sp,sp,-16
    7c8c:	dc400115 	stw	r17,4(sp)
    7c90:	2c7fffc4 	addi	r17,r5,-1
    7c94:	8c401a24 	muli	r17,r17,104
    7c98:	dc800215 	stw	r18,8(sp)
    7c9c:	2825883a 	mov	r18,r5
    7ca0:	89401d04 	addi	r5,r17,116
    7ca4:	dc000015 	stw	r16,0(sp)
    7ca8:	dfc00315 	stw	ra,12(sp)
    7cac:	00031440 	call	3144 <_malloc_r>
    7cb0:	1021883a 	mov	r16,r2
    7cb4:	10000726 	beq	r2,zero,7cd4 <__sfmoreglue+0x4c>
    7cb8:	11000304 	addi	r4,r2,12
    7cbc:	10000015 	stw	zero,0(r2)
    7cc0:	14800115 	stw	r18,4(r2)
    7cc4:	11000215 	stw	r4,8(r2)
    7cc8:	89801a04 	addi	r6,r17,104
    7ccc:	000b883a 	mov	r5,zero
    7cd0:	0008f080 	call	8f08 <memset>
    7cd4:	8005883a 	mov	r2,r16
    7cd8:	dfc00317 	ldw	ra,12(sp)
    7cdc:	dc800217 	ldw	r18,8(sp)
    7ce0:	dc400117 	ldw	r17,4(sp)
    7ce4:	dc000017 	ldw	r16,0(sp)
    7ce8:	dec00404 	addi	sp,sp,16
    7cec:	f800283a 	ret

00007cf0 <__sfp>:
    7cf0:	defffb04 	addi	sp,sp,-20
    7cf4:	dc000015 	stw	r16,0(sp)
    7cf8:	04000074 	movhi	r16,1
    7cfc:	840fcd04 	addi	r16,r16,16180
    7d00:	dcc00315 	stw	r19,12(sp)
    7d04:	2027883a 	mov	r19,r4
    7d08:	81000017 	ldw	r4,0(r16)
    7d0c:	dfc00415 	stw	ra,16(sp)
    7d10:	dc800215 	stw	r18,8(sp)
    7d14:	20800e17 	ldw	r2,56(r4)
    7d18:	dc400115 	stw	r17,4(sp)
    7d1c:	1000021e 	bne	r2,zero,7d28 <__sfp+0x38>
    7d20:	0007ae40 	call	7ae4 <__sinit.part.1>
    7d24:	81000017 	ldw	r4,0(r16)
    7d28:	2480b804 	addi	r18,r4,736
    7d2c:	047fffc4 	movi	r17,-1
    7d30:	91000117 	ldw	r4,4(r18)
    7d34:	94000217 	ldw	r16,8(r18)
    7d38:	213fffc4 	addi	r4,r4,-1
    7d3c:	20000a16 	blt	r4,zero,7d68 <__sfp+0x78>
    7d40:	8080030f 	ldh	r2,12(r16)
    7d44:	10000c26 	beq	r2,zero,7d78 <__sfp+0x88>
    7d48:	80c01d04 	addi	r3,r16,116
    7d4c:	00000206 	br	7d58 <__sfp+0x68>
    7d50:	18bfe60f 	ldh	r2,-104(r3)
    7d54:	10000826 	beq	r2,zero,7d78 <__sfp+0x88>
    7d58:	213fffc4 	addi	r4,r4,-1
    7d5c:	1c3ffd04 	addi	r16,r3,-12
    7d60:	18c01a04 	addi	r3,r3,104
    7d64:	247ffa1e 	bne	r4,r17,7d50 <__alt_data_end+0xff007d50>
    7d68:	90800017 	ldw	r2,0(r18)
    7d6c:	10001d26 	beq	r2,zero,7de4 <__sfp+0xf4>
    7d70:	1025883a 	mov	r18,r2
    7d74:	003fee06 	br	7d30 <__alt_data_end+0xff007d30>
    7d78:	00bfffc4 	movi	r2,-1
    7d7c:	8080038d 	sth	r2,14(r16)
    7d80:	00800044 	movi	r2,1
    7d84:	8080030d 	sth	r2,12(r16)
    7d88:	80001915 	stw	zero,100(r16)
    7d8c:	80000015 	stw	zero,0(r16)
    7d90:	80000215 	stw	zero,8(r16)
    7d94:	80000115 	stw	zero,4(r16)
    7d98:	80000415 	stw	zero,16(r16)
    7d9c:	80000515 	stw	zero,20(r16)
    7da0:	80000615 	stw	zero,24(r16)
    7da4:	01800204 	movi	r6,8
    7da8:	000b883a 	mov	r5,zero
    7dac:	81001704 	addi	r4,r16,92
    7db0:	0008f080 	call	8f08 <memset>
    7db4:	8005883a 	mov	r2,r16
    7db8:	80000c15 	stw	zero,48(r16)
    7dbc:	80000d15 	stw	zero,52(r16)
    7dc0:	80001115 	stw	zero,68(r16)
    7dc4:	80001215 	stw	zero,72(r16)
    7dc8:	dfc00417 	ldw	ra,16(sp)
    7dcc:	dcc00317 	ldw	r19,12(sp)
    7dd0:	dc800217 	ldw	r18,8(sp)
    7dd4:	dc400117 	ldw	r17,4(sp)
    7dd8:	dc000017 	ldw	r16,0(sp)
    7ddc:	dec00504 	addi	sp,sp,20
    7de0:	f800283a 	ret
    7de4:	01400104 	movi	r5,4
    7de8:	9809883a 	mov	r4,r19
    7dec:	0007c880 	call	7c88 <__sfmoreglue>
    7df0:	90800015 	stw	r2,0(r18)
    7df4:	103fde1e 	bne	r2,zero,7d70 <__alt_data_end+0xff007d70>
    7df8:	00800304 	movi	r2,12
    7dfc:	98800015 	stw	r2,0(r19)
    7e00:	0005883a 	mov	r2,zero
    7e04:	003ff006 	br	7dc8 <__alt_data_end+0xff007dc8>

00007e08 <_cleanup>:
    7e08:	00800074 	movhi	r2,1
    7e0c:	108fcd04 	addi	r2,r2,16180
    7e10:	11000017 	ldw	r4,0(r2)
    7e14:	01400074 	movhi	r5,1
    7e18:	296ff704 	addi	r5,r5,-16420
    7e1c:	00088241 	jmpi	8824 <_fwalk_reent>

00007e20 <__sinit>:
    7e20:	20800e17 	ldw	r2,56(r4)
    7e24:	10000126 	beq	r2,zero,7e2c <__sinit+0xc>
    7e28:	f800283a 	ret
    7e2c:	0007ae41 	jmpi	7ae4 <__sinit.part.1>

00007e30 <__sfp_lock_acquire>:
    7e30:	f800283a 	ret

00007e34 <__sfp_lock_release>:
    7e34:	f800283a 	ret

00007e38 <__sinit_lock_acquire>:
    7e38:	f800283a 	ret

00007e3c <__sinit_lock_release>:
    7e3c:	f800283a 	ret

00007e40 <__fp_lock_all>:
    7e40:	00800074 	movhi	r2,1
    7e44:	108fce04 	addi	r2,r2,16184
    7e48:	11000017 	ldw	r4,0(r2)
    7e4c:	01400034 	movhi	r5,0
    7e50:	295f2004 	addi	r5,r5,31872
    7e54:	00087601 	jmpi	8760 <_fwalk>

00007e58 <__fp_unlock_all>:
    7e58:	00800074 	movhi	r2,1
    7e5c:	108fce04 	addi	r2,r2,16184
    7e60:	11000017 	ldw	r4,0(r2)
    7e64:	01400034 	movhi	r5,0
    7e68:	295eb404 	addi	r5,r5,31440
    7e6c:	00087601 	jmpi	8760 <_fwalk>

00007e70 <_malloc_trim_r>:
    7e70:	defffb04 	addi	sp,sp,-20
    7e74:	dcc00315 	stw	r19,12(sp)
    7e78:	04c00074 	movhi	r19,1
    7e7c:	dc800215 	stw	r18,8(sp)
    7e80:	dc400115 	stw	r17,4(sp)
    7e84:	dc000015 	stw	r16,0(sp)
    7e88:	dfc00415 	stw	ra,16(sp)
    7e8c:	2821883a 	mov	r16,r5
    7e90:	9cc92004 	addi	r19,r19,9344
    7e94:	2025883a 	mov	r18,r4
    7e98:	000f4380 	call	f438 <__malloc_lock>
    7e9c:	98800217 	ldw	r2,8(r19)
    7ea0:	14400117 	ldw	r17,4(r2)
    7ea4:	00bfff04 	movi	r2,-4
    7ea8:	88a2703a 	and	r17,r17,r2
    7eac:	8c21c83a 	sub	r16,r17,r16
    7eb0:	8403fbc4 	addi	r16,r16,4079
    7eb4:	8020d33a 	srli	r16,r16,12
    7eb8:	0083ffc4 	movi	r2,4095
    7ebc:	843fffc4 	addi	r16,r16,-1
    7ec0:	8020933a 	slli	r16,r16,12
    7ec4:	1400060e 	bge	r2,r16,7ee0 <_malloc_trim_r+0x70>
    7ec8:	000b883a 	mov	r5,zero
    7ecc:	9009883a 	mov	r4,r18
    7ed0:	0003a900 	call	3a90 <_sbrk_r>
    7ed4:	98c00217 	ldw	r3,8(r19)
    7ed8:	1c47883a 	add	r3,r3,r17
    7edc:	10c00a26 	beq	r2,r3,7f08 <_malloc_trim_r+0x98>
    7ee0:	9009883a 	mov	r4,r18
    7ee4:	000f45c0 	call	f45c <__malloc_unlock>
    7ee8:	0005883a 	mov	r2,zero
    7eec:	dfc00417 	ldw	ra,16(sp)
    7ef0:	dcc00317 	ldw	r19,12(sp)
    7ef4:	dc800217 	ldw	r18,8(sp)
    7ef8:	dc400117 	ldw	r17,4(sp)
    7efc:	dc000017 	ldw	r16,0(sp)
    7f00:	dec00504 	addi	sp,sp,20
    7f04:	f800283a 	ret
    7f08:	040bc83a 	sub	r5,zero,r16
    7f0c:	9009883a 	mov	r4,r18
    7f10:	0003a900 	call	3a90 <_sbrk_r>
    7f14:	00ffffc4 	movi	r3,-1
    7f18:	10c00d26 	beq	r2,r3,7f50 <_malloc_trim_r+0xe0>
    7f1c:	00c00074 	movhi	r3,1
    7f20:	18d6ff04 	addi	r3,r3,23548
    7f24:	18800017 	ldw	r2,0(r3)
    7f28:	99000217 	ldw	r4,8(r19)
    7f2c:	8c23c83a 	sub	r17,r17,r16
    7f30:	8c400054 	ori	r17,r17,1
    7f34:	1421c83a 	sub	r16,r2,r16
    7f38:	24400115 	stw	r17,4(r4)
    7f3c:	9009883a 	mov	r4,r18
    7f40:	1c000015 	stw	r16,0(r3)
    7f44:	000f45c0 	call	f45c <__malloc_unlock>
    7f48:	00800044 	movi	r2,1
    7f4c:	003fe706 	br	7eec <__alt_data_end+0xff007eec>
    7f50:	000b883a 	mov	r5,zero
    7f54:	9009883a 	mov	r4,r18
    7f58:	0003a900 	call	3a90 <_sbrk_r>
    7f5c:	99000217 	ldw	r4,8(r19)
    7f60:	014003c4 	movi	r5,15
    7f64:	1107c83a 	sub	r3,r2,r4
    7f68:	28ffdd0e 	bge	r5,r3,7ee0 <__alt_data_end+0xff007ee0>
    7f6c:	01400074 	movhi	r5,1
    7f70:	294fcb04 	addi	r5,r5,16172
    7f74:	29400017 	ldw	r5,0(r5)
    7f78:	18c00054 	ori	r3,r3,1
    7f7c:	20c00115 	stw	r3,4(r4)
    7f80:	00c00074 	movhi	r3,1
    7f84:	1145c83a 	sub	r2,r2,r5
    7f88:	18d6ff04 	addi	r3,r3,23548
    7f8c:	18800015 	stw	r2,0(r3)
    7f90:	003fd306 	br	7ee0 <__alt_data_end+0xff007ee0>

00007f94 <_free_r>:
    7f94:	28004126 	beq	r5,zero,809c <_free_r+0x108>
    7f98:	defffd04 	addi	sp,sp,-12
    7f9c:	dc400115 	stw	r17,4(sp)
    7fa0:	dc000015 	stw	r16,0(sp)
    7fa4:	2023883a 	mov	r17,r4
    7fa8:	2821883a 	mov	r16,r5
    7fac:	dfc00215 	stw	ra,8(sp)
    7fb0:	000f4380 	call	f438 <__malloc_lock>
    7fb4:	81ffff17 	ldw	r7,-4(r16)
    7fb8:	00bfff84 	movi	r2,-2
    7fbc:	01000074 	movhi	r4,1
    7fc0:	81bffe04 	addi	r6,r16,-8
    7fc4:	3884703a 	and	r2,r7,r2
    7fc8:	21092004 	addi	r4,r4,9344
    7fcc:	308b883a 	add	r5,r6,r2
    7fd0:	2a400117 	ldw	r9,4(r5)
    7fd4:	22000217 	ldw	r8,8(r4)
    7fd8:	00ffff04 	movi	r3,-4
    7fdc:	48c6703a 	and	r3,r9,r3
    7fe0:	2a005726 	beq	r5,r8,8140 <_free_r+0x1ac>
    7fe4:	28c00115 	stw	r3,4(r5)
    7fe8:	39c0004c 	andi	r7,r7,1
    7fec:	3800091e 	bne	r7,zero,8014 <_free_r+0x80>
    7ff0:	823ffe17 	ldw	r8,-8(r16)
    7ff4:	22400204 	addi	r9,r4,8
    7ff8:	320dc83a 	sub	r6,r6,r8
    7ffc:	31c00217 	ldw	r7,8(r6)
    8000:	1205883a 	add	r2,r2,r8
    8004:	3a406526 	beq	r7,r9,819c <_free_r+0x208>
    8008:	32000317 	ldw	r8,12(r6)
    800c:	3a000315 	stw	r8,12(r7)
    8010:	41c00215 	stw	r7,8(r8)
    8014:	28cf883a 	add	r7,r5,r3
    8018:	39c00117 	ldw	r7,4(r7)
    801c:	39c0004c 	andi	r7,r7,1
    8020:	38003a26 	beq	r7,zero,810c <_free_r+0x178>
    8024:	10c00054 	ori	r3,r2,1
    8028:	30c00115 	stw	r3,4(r6)
    802c:	3087883a 	add	r3,r6,r2
    8030:	18800015 	stw	r2,0(r3)
    8034:	00c07fc4 	movi	r3,511
    8038:	18801936 	bltu	r3,r2,80a0 <_free_r+0x10c>
    803c:	1004d0fa 	srli	r2,r2,3
    8040:	01c00044 	movi	r7,1
    8044:	21400117 	ldw	r5,4(r4)
    8048:	10c00044 	addi	r3,r2,1
    804c:	18c7883a 	add	r3,r3,r3
    8050:	1005d0ba 	srai	r2,r2,2
    8054:	18c7883a 	add	r3,r3,r3
    8058:	18c7883a 	add	r3,r3,r3
    805c:	1907883a 	add	r3,r3,r4
    8060:	3884983a 	sll	r2,r7,r2
    8064:	19c00017 	ldw	r7,0(r3)
    8068:	1a3ffe04 	addi	r8,r3,-8
    806c:	1144b03a 	or	r2,r2,r5
    8070:	32000315 	stw	r8,12(r6)
    8074:	31c00215 	stw	r7,8(r6)
    8078:	20800115 	stw	r2,4(r4)
    807c:	19800015 	stw	r6,0(r3)
    8080:	39800315 	stw	r6,12(r7)
    8084:	8809883a 	mov	r4,r17
    8088:	dfc00217 	ldw	ra,8(sp)
    808c:	dc400117 	ldw	r17,4(sp)
    8090:	dc000017 	ldw	r16,0(sp)
    8094:	dec00304 	addi	sp,sp,12
    8098:	000f45c1 	jmpi	f45c <__malloc_unlock>
    809c:	f800283a 	ret
    80a0:	100ad27a 	srli	r5,r2,9
    80a4:	00c00104 	movi	r3,4
    80a8:	19404a36 	bltu	r3,r5,81d4 <_free_r+0x240>
    80ac:	100ad1ba 	srli	r5,r2,6
    80b0:	28c00e44 	addi	r3,r5,57
    80b4:	18c7883a 	add	r3,r3,r3
    80b8:	29400e04 	addi	r5,r5,56
    80bc:	18c7883a 	add	r3,r3,r3
    80c0:	18c7883a 	add	r3,r3,r3
    80c4:	1909883a 	add	r4,r3,r4
    80c8:	20c00017 	ldw	r3,0(r4)
    80cc:	01c00074 	movhi	r7,1
    80d0:	213ffe04 	addi	r4,r4,-8
    80d4:	39c92004 	addi	r7,r7,9344
    80d8:	20c04426 	beq	r4,r3,81ec <_free_r+0x258>
    80dc:	01ffff04 	movi	r7,-4
    80e0:	19400117 	ldw	r5,4(r3)
    80e4:	29ca703a 	and	r5,r5,r7
    80e8:	1140022e 	bgeu	r2,r5,80f4 <_free_r+0x160>
    80ec:	18c00217 	ldw	r3,8(r3)
    80f0:	20fffb1e 	bne	r4,r3,80e0 <__alt_data_end+0xff0080e0>
    80f4:	19000317 	ldw	r4,12(r3)
    80f8:	31000315 	stw	r4,12(r6)
    80fc:	30c00215 	stw	r3,8(r6)
    8100:	21800215 	stw	r6,8(r4)
    8104:	19800315 	stw	r6,12(r3)
    8108:	003fde06 	br	8084 <__alt_data_end+0xff008084>
    810c:	29c00217 	ldw	r7,8(r5)
    8110:	10c5883a 	add	r2,r2,r3
    8114:	00c00074 	movhi	r3,1
    8118:	18c92204 	addi	r3,r3,9352
    811c:	38c03b26 	beq	r7,r3,820c <_free_r+0x278>
    8120:	2a000317 	ldw	r8,12(r5)
    8124:	11400054 	ori	r5,r2,1
    8128:	3087883a 	add	r3,r6,r2
    812c:	3a000315 	stw	r8,12(r7)
    8130:	41c00215 	stw	r7,8(r8)
    8134:	31400115 	stw	r5,4(r6)
    8138:	18800015 	stw	r2,0(r3)
    813c:	003fbd06 	br	8034 <__alt_data_end+0xff008034>
    8140:	39c0004c 	andi	r7,r7,1
    8144:	10c5883a 	add	r2,r2,r3
    8148:	3800071e 	bne	r7,zero,8168 <_free_r+0x1d4>
    814c:	81fffe17 	ldw	r7,-8(r16)
    8150:	31cdc83a 	sub	r6,r6,r7
    8154:	30c00317 	ldw	r3,12(r6)
    8158:	31400217 	ldw	r5,8(r6)
    815c:	11c5883a 	add	r2,r2,r7
    8160:	28c00315 	stw	r3,12(r5)
    8164:	19400215 	stw	r5,8(r3)
    8168:	10c00054 	ori	r3,r2,1
    816c:	30c00115 	stw	r3,4(r6)
    8170:	00c00074 	movhi	r3,1
    8174:	18cfcc04 	addi	r3,r3,16176
    8178:	18c00017 	ldw	r3,0(r3)
    817c:	21800215 	stw	r6,8(r4)
    8180:	10ffc036 	bltu	r2,r3,8084 <__alt_data_end+0xff008084>
    8184:	00800074 	movhi	r2,1
    8188:	1096f104 	addi	r2,r2,23492
    818c:	11400017 	ldw	r5,0(r2)
    8190:	8809883a 	mov	r4,r17
    8194:	0007e700 	call	7e70 <_malloc_trim_r>
    8198:	003fba06 	br	8084 <__alt_data_end+0xff008084>
    819c:	28c9883a 	add	r4,r5,r3
    81a0:	21000117 	ldw	r4,4(r4)
    81a4:	2100004c 	andi	r4,r4,1
    81a8:	2000391e 	bne	r4,zero,8290 <_free_r+0x2fc>
    81ac:	29c00217 	ldw	r7,8(r5)
    81b0:	29000317 	ldw	r4,12(r5)
    81b4:	1885883a 	add	r2,r3,r2
    81b8:	10c00054 	ori	r3,r2,1
    81bc:	39000315 	stw	r4,12(r7)
    81c0:	21c00215 	stw	r7,8(r4)
    81c4:	30c00115 	stw	r3,4(r6)
    81c8:	308d883a 	add	r6,r6,r2
    81cc:	30800015 	stw	r2,0(r6)
    81d0:	003fac06 	br	8084 <__alt_data_end+0xff008084>
    81d4:	00c00504 	movi	r3,20
    81d8:	19401536 	bltu	r3,r5,8230 <_free_r+0x29c>
    81dc:	28c01704 	addi	r3,r5,92
    81e0:	18c7883a 	add	r3,r3,r3
    81e4:	294016c4 	addi	r5,r5,91
    81e8:	003fb406 	br	80bc <__alt_data_end+0xff0080bc>
    81ec:	280bd0ba 	srai	r5,r5,2
    81f0:	00c00044 	movi	r3,1
    81f4:	38800117 	ldw	r2,4(r7)
    81f8:	194a983a 	sll	r5,r3,r5
    81fc:	2007883a 	mov	r3,r4
    8200:	2884b03a 	or	r2,r5,r2
    8204:	38800115 	stw	r2,4(r7)
    8208:	003fbb06 	br	80f8 <__alt_data_end+0xff0080f8>
    820c:	21800515 	stw	r6,20(r4)
    8210:	21800415 	stw	r6,16(r4)
    8214:	10c00054 	ori	r3,r2,1
    8218:	31c00315 	stw	r7,12(r6)
    821c:	31c00215 	stw	r7,8(r6)
    8220:	30c00115 	stw	r3,4(r6)
    8224:	308d883a 	add	r6,r6,r2
    8228:	30800015 	stw	r2,0(r6)
    822c:	003f9506 	br	8084 <__alt_data_end+0xff008084>
    8230:	00c01504 	movi	r3,84
    8234:	19400536 	bltu	r3,r5,824c <_free_r+0x2b8>
    8238:	100ad33a 	srli	r5,r2,12
    823c:	28c01bc4 	addi	r3,r5,111
    8240:	18c7883a 	add	r3,r3,r3
    8244:	29401b84 	addi	r5,r5,110
    8248:	003f9c06 	br	80bc <__alt_data_end+0xff0080bc>
    824c:	00c05504 	movi	r3,340
    8250:	19400536 	bltu	r3,r5,8268 <_free_r+0x2d4>
    8254:	100ad3fa 	srli	r5,r2,15
    8258:	28c01e04 	addi	r3,r5,120
    825c:	18c7883a 	add	r3,r3,r3
    8260:	29401dc4 	addi	r5,r5,119
    8264:	003f9506 	br	80bc <__alt_data_end+0xff0080bc>
    8268:	00c15504 	movi	r3,1364
    826c:	19400536 	bltu	r3,r5,8284 <_free_r+0x2f0>
    8270:	100ad4ba 	srli	r5,r2,18
    8274:	28c01f44 	addi	r3,r5,125
    8278:	18c7883a 	add	r3,r3,r3
    827c:	29401f04 	addi	r5,r5,124
    8280:	003f8e06 	br	80bc <__alt_data_end+0xff0080bc>
    8284:	00c03f84 	movi	r3,254
    8288:	01401f84 	movi	r5,126
    828c:	003f8b06 	br	80bc <__alt_data_end+0xff0080bc>
    8290:	10c00054 	ori	r3,r2,1
    8294:	30c00115 	stw	r3,4(r6)
    8298:	308d883a 	add	r6,r6,r2
    829c:	30800015 	stw	r2,0(r6)
    82a0:	003f7806 	br	8084 <__alt_data_end+0xff008084>

000082a4 <__sfvwrite_r>:
    82a4:	30800217 	ldw	r2,8(r6)
    82a8:	10006726 	beq	r2,zero,8448 <__sfvwrite_r+0x1a4>
    82ac:	28c0030b 	ldhu	r3,12(r5)
    82b0:	defff404 	addi	sp,sp,-48
    82b4:	dd400715 	stw	r21,28(sp)
    82b8:	dd000615 	stw	r20,24(sp)
    82bc:	dc000215 	stw	r16,8(sp)
    82c0:	dfc00b15 	stw	ra,44(sp)
    82c4:	df000a15 	stw	fp,40(sp)
    82c8:	ddc00915 	stw	r23,36(sp)
    82cc:	dd800815 	stw	r22,32(sp)
    82d0:	dcc00515 	stw	r19,20(sp)
    82d4:	dc800415 	stw	r18,16(sp)
    82d8:	dc400315 	stw	r17,12(sp)
    82dc:	1880020c 	andi	r2,r3,8
    82e0:	2821883a 	mov	r16,r5
    82e4:	202b883a 	mov	r21,r4
    82e8:	3029883a 	mov	r20,r6
    82ec:	10002726 	beq	r2,zero,838c <__sfvwrite_r+0xe8>
    82f0:	28800417 	ldw	r2,16(r5)
    82f4:	10002526 	beq	r2,zero,838c <__sfvwrite_r+0xe8>
    82f8:	1880008c 	andi	r2,r3,2
    82fc:	a4400017 	ldw	r17,0(r20)
    8300:	10002a26 	beq	r2,zero,83ac <__sfvwrite_r+0x108>
    8304:	05a00034 	movhi	r22,32768
    8308:	0027883a 	mov	r19,zero
    830c:	0025883a 	mov	r18,zero
    8310:	b5bf0004 	addi	r22,r22,-1024
    8314:	980d883a 	mov	r6,r19
    8318:	a809883a 	mov	r4,r21
    831c:	90004626 	beq	r18,zero,8438 <__sfvwrite_r+0x194>
    8320:	900f883a 	mov	r7,r18
    8324:	b480022e 	bgeu	r22,r18,8330 <__sfvwrite_r+0x8c>
    8328:	01e00034 	movhi	r7,32768
    832c:	39ff0004 	addi	r7,r7,-1024
    8330:	80800917 	ldw	r2,36(r16)
    8334:	81400717 	ldw	r5,28(r16)
    8338:	103ee83a 	callr	r2
    833c:	0080570e 	bge	zero,r2,849c <__sfvwrite_r+0x1f8>
    8340:	a0c00217 	ldw	r3,8(r20)
    8344:	98a7883a 	add	r19,r19,r2
    8348:	90a5c83a 	sub	r18,r18,r2
    834c:	1885c83a 	sub	r2,r3,r2
    8350:	a0800215 	stw	r2,8(r20)
    8354:	103fef1e 	bne	r2,zero,8314 <__alt_data_end+0xff008314>
    8358:	0005883a 	mov	r2,zero
    835c:	dfc00b17 	ldw	ra,44(sp)
    8360:	df000a17 	ldw	fp,40(sp)
    8364:	ddc00917 	ldw	r23,36(sp)
    8368:	dd800817 	ldw	r22,32(sp)
    836c:	dd400717 	ldw	r21,28(sp)
    8370:	dd000617 	ldw	r20,24(sp)
    8374:	dcc00517 	ldw	r19,20(sp)
    8378:	dc800417 	ldw	r18,16(sp)
    837c:	dc400317 	ldw	r17,12(sp)
    8380:	dc000217 	ldw	r16,8(sp)
    8384:	dec00c04 	addi	sp,sp,48
    8388:	f800283a 	ret
    838c:	800b883a 	mov	r5,r16
    8390:	a809883a 	mov	r4,r21
    8394:	0005e4c0 	call	5e4c <__swsetup_r>
    8398:	1000eb1e 	bne	r2,zero,8748 <__sfvwrite_r+0x4a4>
    839c:	80c0030b 	ldhu	r3,12(r16)
    83a0:	a4400017 	ldw	r17,0(r20)
    83a4:	1880008c 	andi	r2,r3,2
    83a8:	103fd61e 	bne	r2,zero,8304 <__alt_data_end+0xff008304>
    83ac:	1880004c 	andi	r2,r3,1
    83b0:	10003f1e 	bne	r2,zero,84b0 <__sfvwrite_r+0x20c>
    83b4:	0039883a 	mov	fp,zero
    83b8:	0025883a 	mov	r18,zero
    83bc:	90001a26 	beq	r18,zero,8428 <__sfvwrite_r+0x184>
    83c0:	1880800c 	andi	r2,r3,512
    83c4:	84c00217 	ldw	r19,8(r16)
    83c8:	10002126 	beq	r2,zero,8450 <__sfvwrite_r+0x1ac>
    83cc:	982f883a 	mov	r23,r19
    83d0:	94c09336 	bltu	r18,r19,8620 <__sfvwrite_r+0x37c>
    83d4:	1881200c 	andi	r2,r3,1152
    83d8:	10009e1e 	bne	r2,zero,8654 <__sfvwrite_r+0x3b0>
    83dc:	81000017 	ldw	r4,0(r16)
    83e0:	b80d883a 	mov	r6,r23
    83e4:	e00b883a 	mov	r5,fp
    83e8:	0008dac0 	call	8dac <memmove>
    83ec:	80c00217 	ldw	r3,8(r16)
    83f0:	81000017 	ldw	r4,0(r16)
    83f4:	9005883a 	mov	r2,r18
    83f8:	1ce7c83a 	sub	r19,r3,r19
    83fc:	25cf883a 	add	r7,r4,r23
    8400:	84c00215 	stw	r19,8(r16)
    8404:	81c00015 	stw	r7,0(r16)
    8408:	a0c00217 	ldw	r3,8(r20)
    840c:	e0b9883a 	add	fp,fp,r2
    8410:	90a5c83a 	sub	r18,r18,r2
    8414:	18a7c83a 	sub	r19,r3,r2
    8418:	a4c00215 	stw	r19,8(r20)
    841c:	983fce26 	beq	r19,zero,8358 <__alt_data_end+0xff008358>
    8420:	80c0030b 	ldhu	r3,12(r16)
    8424:	903fe61e 	bne	r18,zero,83c0 <__alt_data_end+0xff0083c0>
    8428:	8f000017 	ldw	fp,0(r17)
    842c:	8c800117 	ldw	r18,4(r17)
    8430:	8c400204 	addi	r17,r17,8
    8434:	003fe106 	br	83bc <__alt_data_end+0xff0083bc>
    8438:	8cc00017 	ldw	r19,0(r17)
    843c:	8c800117 	ldw	r18,4(r17)
    8440:	8c400204 	addi	r17,r17,8
    8444:	003fb306 	br	8314 <__alt_data_end+0xff008314>
    8448:	0005883a 	mov	r2,zero
    844c:	f800283a 	ret
    8450:	81000017 	ldw	r4,0(r16)
    8454:	80800417 	ldw	r2,16(r16)
    8458:	11005736 	bltu	r2,r4,85b8 <__sfvwrite_r+0x314>
    845c:	85c00517 	ldw	r23,20(r16)
    8460:	95c05536 	bltu	r18,r23,85b8 <__sfvwrite_r+0x314>
    8464:	00a00034 	movhi	r2,32768
    8468:	10bfffc4 	addi	r2,r2,-1
    846c:	9009883a 	mov	r4,r18
    8470:	1480012e 	bgeu	r2,r18,8478 <__sfvwrite_r+0x1d4>
    8474:	1009883a 	mov	r4,r2
    8478:	b80b883a 	mov	r5,r23
    847c:	00025740 	call	2574 <__divsi3>
    8480:	15cf383a 	mul	r7,r2,r23
    8484:	81400717 	ldw	r5,28(r16)
    8488:	80800917 	ldw	r2,36(r16)
    848c:	e00d883a 	mov	r6,fp
    8490:	a809883a 	mov	r4,r21
    8494:	103ee83a 	callr	r2
    8498:	00bfdb16 	blt	zero,r2,8408 <__alt_data_end+0xff008408>
    849c:	8080030b 	ldhu	r2,12(r16)
    84a0:	10801014 	ori	r2,r2,64
    84a4:	8080030d 	sth	r2,12(r16)
    84a8:	00bfffc4 	movi	r2,-1
    84ac:	003fab06 	br	835c <__alt_data_end+0xff00835c>
    84b0:	0027883a 	mov	r19,zero
    84b4:	0011883a 	mov	r8,zero
    84b8:	0039883a 	mov	fp,zero
    84bc:	0025883a 	mov	r18,zero
    84c0:	90001f26 	beq	r18,zero,8540 <__sfvwrite_r+0x29c>
    84c4:	40005a26 	beq	r8,zero,8630 <__sfvwrite_r+0x38c>
    84c8:	982d883a 	mov	r22,r19
    84cc:	94c0012e 	bgeu	r18,r19,84d4 <__sfvwrite_r+0x230>
    84d0:	902d883a 	mov	r22,r18
    84d4:	81000017 	ldw	r4,0(r16)
    84d8:	80800417 	ldw	r2,16(r16)
    84dc:	b02f883a 	mov	r23,r22
    84e0:	81c00517 	ldw	r7,20(r16)
    84e4:	1100032e 	bgeu	r2,r4,84f4 <__sfvwrite_r+0x250>
    84e8:	80c00217 	ldw	r3,8(r16)
    84ec:	38c7883a 	add	r3,r7,r3
    84f0:	1d801816 	blt	r3,r22,8554 <__sfvwrite_r+0x2b0>
    84f4:	b1c03e16 	blt	r22,r7,85f0 <__sfvwrite_r+0x34c>
    84f8:	80800917 	ldw	r2,36(r16)
    84fc:	81400717 	ldw	r5,28(r16)
    8500:	e00d883a 	mov	r6,fp
    8504:	da000115 	stw	r8,4(sp)
    8508:	a809883a 	mov	r4,r21
    850c:	103ee83a 	callr	r2
    8510:	102f883a 	mov	r23,r2
    8514:	da000117 	ldw	r8,4(sp)
    8518:	00bfe00e 	bge	zero,r2,849c <__alt_data_end+0xff00849c>
    851c:	9de7c83a 	sub	r19,r19,r23
    8520:	98001f26 	beq	r19,zero,85a0 <__sfvwrite_r+0x2fc>
    8524:	a0800217 	ldw	r2,8(r20)
    8528:	e5f9883a 	add	fp,fp,r23
    852c:	95e5c83a 	sub	r18,r18,r23
    8530:	15efc83a 	sub	r23,r2,r23
    8534:	a5c00215 	stw	r23,8(r20)
    8538:	b83f8726 	beq	r23,zero,8358 <__alt_data_end+0xff008358>
    853c:	903fe11e 	bne	r18,zero,84c4 <__alt_data_end+0xff0084c4>
    8540:	8f000017 	ldw	fp,0(r17)
    8544:	8c800117 	ldw	r18,4(r17)
    8548:	0011883a 	mov	r8,zero
    854c:	8c400204 	addi	r17,r17,8
    8550:	003fdb06 	br	84c0 <__alt_data_end+0xff0084c0>
    8554:	180d883a 	mov	r6,r3
    8558:	e00b883a 	mov	r5,fp
    855c:	da000115 	stw	r8,4(sp)
    8560:	d8c00015 	stw	r3,0(sp)
    8564:	0008dac0 	call	8dac <memmove>
    8568:	d8c00017 	ldw	r3,0(sp)
    856c:	80800017 	ldw	r2,0(r16)
    8570:	800b883a 	mov	r5,r16
    8574:	a809883a 	mov	r4,r21
    8578:	10c5883a 	add	r2,r2,r3
    857c:	80800015 	stw	r2,0(r16)
    8580:	d8c00015 	stw	r3,0(sp)
    8584:	0007a440 	call	7a44 <_fflush_r>
    8588:	d8c00017 	ldw	r3,0(sp)
    858c:	da000117 	ldw	r8,4(sp)
    8590:	103fc21e 	bne	r2,zero,849c <__alt_data_end+0xff00849c>
    8594:	182f883a 	mov	r23,r3
    8598:	9de7c83a 	sub	r19,r19,r23
    859c:	983fe11e 	bne	r19,zero,8524 <__alt_data_end+0xff008524>
    85a0:	800b883a 	mov	r5,r16
    85a4:	a809883a 	mov	r4,r21
    85a8:	0007a440 	call	7a44 <_fflush_r>
    85ac:	103fbb1e 	bne	r2,zero,849c <__alt_data_end+0xff00849c>
    85b0:	0011883a 	mov	r8,zero
    85b4:	003fdb06 	br	8524 <__alt_data_end+0xff008524>
    85b8:	94c0012e 	bgeu	r18,r19,85c0 <__sfvwrite_r+0x31c>
    85bc:	9027883a 	mov	r19,r18
    85c0:	980d883a 	mov	r6,r19
    85c4:	e00b883a 	mov	r5,fp
    85c8:	0008dac0 	call	8dac <memmove>
    85cc:	80800217 	ldw	r2,8(r16)
    85d0:	80c00017 	ldw	r3,0(r16)
    85d4:	14c5c83a 	sub	r2,r2,r19
    85d8:	1cc7883a 	add	r3,r3,r19
    85dc:	80800215 	stw	r2,8(r16)
    85e0:	80c00015 	stw	r3,0(r16)
    85e4:	10004326 	beq	r2,zero,86f4 <__sfvwrite_r+0x450>
    85e8:	9805883a 	mov	r2,r19
    85ec:	003f8606 	br	8408 <__alt_data_end+0xff008408>
    85f0:	b00d883a 	mov	r6,r22
    85f4:	e00b883a 	mov	r5,fp
    85f8:	da000115 	stw	r8,4(sp)
    85fc:	0008dac0 	call	8dac <memmove>
    8600:	80800217 	ldw	r2,8(r16)
    8604:	80c00017 	ldw	r3,0(r16)
    8608:	da000117 	ldw	r8,4(sp)
    860c:	1585c83a 	sub	r2,r2,r22
    8610:	1dad883a 	add	r22,r3,r22
    8614:	80800215 	stw	r2,8(r16)
    8618:	85800015 	stw	r22,0(r16)
    861c:	003fbf06 	br	851c <__alt_data_end+0xff00851c>
    8620:	81000017 	ldw	r4,0(r16)
    8624:	9027883a 	mov	r19,r18
    8628:	902f883a 	mov	r23,r18
    862c:	003f6c06 	br	83e0 <__alt_data_end+0xff0083e0>
    8630:	900d883a 	mov	r6,r18
    8634:	01400284 	movi	r5,10
    8638:	e009883a 	mov	r4,fp
    863c:	0008b800 	call	8b80 <memchr>
    8640:	10003e26 	beq	r2,zero,873c <__sfvwrite_r+0x498>
    8644:	10800044 	addi	r2,r2,1
    8648:	1727c83a 	sub	r19,r2,fp
    864c:	02000044 	movi	r8,1
    8650:	003f9d06 	br	84c8 <__alt_data_end+0xff0084c8>
    8654:	80800517 	ldw	r2,20(r16)
    8658:	81400417 	ldw	r5,16(r16)
    865c:	81c00017 	ldw	r7,0(r16)
    8660:	10a7883a 	add	r19,r2,r2
    8664:	9885883a 	add	r2,r19,r2
    8668:	1026d7fa 	srli	r19,r2,31
    866c:	396dc83a 	sub	r22,r7,r5
    8670:	b1000044 	addi	r4,r22,1
    8674:	9885883a 	add	r2,r19,r2
    8678:	1027d07a 	srai	r19,r2,1
    867c:	2485883a 	add	r2,r4,r18
    8680:	980d883a 	mov	r6,r19
    8684:	9880022e 	bgeu	r19,r2,8690 <__sfvwrite_r+0x3ec>
    8688:	1027883a 	mov	r19,r2
    868c:	100d883a 	mov	r6,r2
    8690:	18c1000c 	andi	r3,r3,1024
    8694:	18001c26 	beq	r3,zero,8708 <__sfvwrite_r+0x464>
    8698:	300b883a 	mov	r5,r6
    869c:	a809883a 	mov	r4,r21
    86a0:	00031440 	call	3144 <_malloc_r>
    86a4:	102f883a 	mov	r23,r2
    86a8:	10002926 	beq	r2,zero,8750 <__sfvwrite_r+0x4ac>
    86ac:	81400417 	ldw	r5,16(r16)
    86b0:	b00d883a 	mov	r6,r22
    86b4:	1009883a 	mov	r4,r2
    86b8:	0008c640 	call	8c64 <memcpy>
    86bc:	8080030b 	ldhu	r2,12(r16)
    86c0:	00fedfc4 	movi	r3,-1153
    86c4:	10c4703a 	and	r2,r2,r3
    86c8:	10802014 	ori	r2,r2,128
    86cc:	8080030d 	sth	r2,12(r16)
    86d0:	bd89883a 	add	r4,r23,r22
    86d4:	9d8fc83a 	sub	r7,r19,r22
    86d8:	85c00415 	stw	r23,16(r16)
    86dc:	84c00515 	stw	r19,20(r16)
    86e0:	81000015 	stw	r4,0(r16)
    86e4:	9027883a 	mov	r19,r18
    86e8:	81c00215 	stw	r7,8(r16)
    86ec:	902f883a 	mov	r23,r18
    86f0:	003f3b06 	br	83e0 <__alt_data_end+0xff0083e0>
    86f4:	800b883a 	mov	r5,r16
    86f8:	a809883a 	mov	r4,r21
    86fc:	0007a440 	call	7a44 <_fflush_r>
    8700:	103fb926 	beq	r2,zero,85e8 <__alt_data_end+0xff0085e8>
    8704:	003f6506 	br	849c <__alt_data_end+0xff00849c>
    8708:	a809883a 	mov	r4,r21
    870c:	000a02c0 	call	a02c <_realloc_r>
    8710:	102f883a 	mov	r23,r2
    8714:	103fee1e 	bne	r2,zero,86d0 <__alt_data_end+0xff0086d0>
    8718:	81400417 	ldw	r5,16(r16)
    871c:	a809883a 	mov	r4,r21
    8720:	0007f940 	call	7f94 <_free_r>
    8724:	8080030b 	ldhu	r2,12(r16)
    8728:	00ffdfc4 	movi	r3,-129
    872c:	1884703a 	and	r2,r3,r2
    8730:	00c00304 	movi	r3,12
    8734:	a8c00015 	stw	r3,0(r21)
    8738:	003f5906 	br	84a0 <__alt_data_end+0xff0084a0>
    873c:	94c00044 	addi	r19,r18,1
    8740:	02000044 	movi	r8,1
    8744:	003f6006 	br	84c8 <__alt_data_end+0xff0084c8>
    8748:	00bfffc4 	movi	r2,-1
    874c:	003f0306 	br	835c <__alt_data_end+0xff00835c>
    8750:	00800304 	movi	r2,12
    8754:	a8800015 	stw	r2,0(r21)
    8758:	8080030b 	ldhu	r2,12(r16)
    875c:	003f5006 	br	84a0 <__alt_data_end+0xff0084a0>

00008760 <_fwalk>:
    8760:	defff704 	addi	sp,sp,-36
    8764:	dd000415 	stw	r20,16(sp)
    8768:	dfc00815 	stw	ra,32(sp)
    876c:	ddc00715 	stw	r23,28(sp)
    8770:	dd800615 	stw	r22,24(sp)
    8774:	dd400515 	stw	r21,20(sp)
    8778:	dcc00315 	stw	r19,12(sp)
    877c:	dc800215 	stw	r18,8(sp)
    8780:	dc400115 	stw	r17,4(sp)
    8784:	dc000015 	stw	r16,0(sp)
    8788:	2500b804 	addi	r20,r4,736
    878c:	a0002326 	beq	r20,zero,881c <_fwalk+0xbc>
    8790:	282b883a 	mov	r21,r5
    8794:	002f883a 	mov	r23,zero
    8798:	05800044 	movi	r22,1
    879c:	04ffffc4 	movi	r19,-1
    87a0:	a4400117 	ldw	r17,4(r20)
    87a4:	a4800217 	ldw	r18,8(r20)
    87a8:	8c7fffc4 	addi	r17,r17,-1
    87ac:	88000d16 	blt	r17,zero,87e4 <_fwalk+0x84>
    87b0:	94000304 	addi	r16,r18,12
    87b4:	94800384 	addi	r18,r18,14
    87b8:	8080000b 	ldhu	r2,0(r16)
    87bc:	8c7fffc4 	addi	r17,r17,-1
    87c0:	813ffd04 	addi	r4,r16,-12
    87c4:	b080042e 	bgeu	r22,r2,87d8 <_fwalk+0x78>
    87c8:	9080000f 	ldh	r2,0(r18)
    87cc:	14c00226 	beq	r2,r19,87d8 <_fwalk+0x78>
    87d0:	a83ee83a 	callr	r21
    87d4:	b8aeb03a 	or	r23,r23,r2
    87d8:	84001a04 	addi	r16,r16,104
    87dc:	94801a04 	addi	r18,r18,104
    87e0:	8cfff51e 	bne	r17,r19,87b8 <__alt_data_end+0xff0087b8>
    87e4:	a5000017 	ldw	r20,0(r20)
    87e8:	a03fed1e 	bne	r20,zero,87a0 <__alt_data_end+0xff0087a0>
    87ec:	b805883a 	mov	r2,r23
    87f0:	dfc00817 	ldw	ra,32(sp)
    87f4:	ddc00717 	ldw	r23,28(sp)
    87f8:	dd800617 	ldw	r22,24(sp)
    87fc:	dd400517 	ldw	r21,20(sp)
    8800:	dd000417 	ldw	r20,16(sp)
    8804:	dcc00317 	ldw	r19,12(sp)
    8808:	dc800217 	ldw	r18,8(sp)
    880c:	dc400117 	ldw	r17,4(sp)
    8810:	dc000017 	ldw	r16,0(sp)
    8814:	dec00904 	addi	sp,sp,36
    8818:	f800283a 	ret
    881c:	002f883a 	mov	r23,zero
    8820:	003ff206 	br	87ec <__alt_data_end+0xff0087ec>

00008824 <_fwalk_reent>:
    8824:	defff704 	addi	sp,sp,-36
    8828:	dd000415 	stw	r20,16(sp)
    882c:	dfc00815 	stw	ra,32(sp)
    8830:	ddc00715 	stw	r23,28(sp)
    8834:	dd800615 	stw	r22,24(sp)
    8838:	dd400515 	stw	r21,20(sp)
    883c:	dcc00315 	stw	r19,12(sp)
    8840:	dc800215 	stw	r18,8(sp)
    8844:	dc400115 	stw	r17,4(sp)
    8848:	dc000015 	stw	r16,0(sp)
    884c:	2500b804 	addi	r20,r4,736
    8850:	a0002326 	beq	r20,zero,88e0 <_fwalk_reent+0xbc>
    8854:	282b883a 	mov	r21,r5
    8858:	2027883a 	mov	r19,r4
    885c:	002f883a 	mov	r23,zero
    8860:	05800044 	movi	r22,1
    8864:	04bfffc4 	movi	r18,-1
    8868:	a4400117 	ldw	r17,4(r20)
    886c:	a4000217 	ldw	r16,8(r20)
    8870:	8c7fffc4 	addi	r17,r17,-1
    8874:	88000c16 	blt	r17,zero,88a8 <_fwalk_reent+0x84>
    8878:	84000304 	addi	r16,r16,12
    887c:	8080000b 	ldhu	r2,0(r16)
    8880:	8c7fffc4 	addi	r17,r17,-1
    8884:	817ffd04 	addi	r5,r16,-12
    8888:	b080052e 	bgeu	r22,r2,88a0 <_fwalk_reent+0x7c>
    888c:	8080008f 	ldh	r2,2(r16)
    8890:	9809883a 	mov	r4,r19
    8894:	14800226 	beq	r2,r18,88a0 <_fwalk_reent+0x7c>
    8898:	a83ee83a 	callr	r21
    889c:	b8aeb03a 	or	r23,r23,r2
    88a0:	84001a04 	addi	r16,r16,104
    88a4:	8cbff51e 	bne	r17,r18,887c <__alt_data_end+0xff00887c>
    88a8:	a5000017 	ldw	r20,0(r20)
    88ac:	a03fee1e 	bne	r20,zero,8868 <__alt_data_end+0xff008868>
    88b0:	b805883a 	mov	r2,r23
    88b4:	dfc00817 	ldw	ra,32(sp)
    88b8:	ddc00717 	ldw	r23,28(sp)
    88bc:	dd800617 	ldw	r22,24(sp)
    88c0:	dd400517 	ldw	r21,20(sp)
    88c4:	dd000417 	ldw	r20,16(sp)
    88c8:	dcc00317 	ldw	r19,12(sp)
    88cc:	dc800217 	ldw	r18,8(sp)
    88d0:	dc400117 	ldw	r17,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00904 	addi	sp,sp,36
    88dc:	f800283a 	ret
    88e0:	002f883a 	mov	r23,zero
    88e4:	003ff206 	br	88b0 <__alt_data_end+0xff0088b0>

000088e8 <_setlocale_r>:
    88e8:	30001b26 	beq	r6,zero,8958 <_setlocale_r+0x70>
    88ec:	01400074 	movhi	r5,1
    88f0:	defffe04 	addi	sp,sp,-8
    88f4:	29488104 	addi	r5,r5,8708
    88f8:	3009883a 	mov	r4,r6
    88fc:	dc000015 	stw	r16,0(sp)
    8900:	dfc00115 	stw	ra,4(sp)
    8904:	3021883a 	mov	r16,r6
    8908:	000a7400 	call	a740 <strcmp>
    890c:	1000061e 	bne	r2,zero,8928 <_setlocale_r+0x40>
    8910:	00800074 	movhi	r2,1
    8914:	10888004 	addi	r2,r2,8704
    8918:	dfc00117 	ldw	ra,4(sp)
    891c:	dc000017 	ldw	r16,0(sp)
    8920:	dec00204 	addi	sp,sp,8
    8924:	f800283a 	ret
    8928:	01400074 	movhi	r5,1
    892c:	29488004 	addi	r5,r5,8704
    8930:	8009883a 	mov	r4,r16
    8934:	000a7400 	call	a740 <strcmp>
    8938:	103ff526 	beq	r2,zero,8910 <__alt_data_end+0xff008910>
    893c:	01400074 	movhi	r5,1
    8940:	29486b04 	addi	r5,r5,8620
    8944:	8009883a 	mov	r4,r16
    8948:	000a7400 	call	a740 <strcmp>
    894c:	103ff026 	beq	r2,zero,8910 <__alt_data_end+0xff008910>
    8950:	0005883a 	mov	r2,zero
    8954:	003ff006 	br	8918 <__alt_data_end+0xff008918>
    8958:	00800074 	movhi	r2,1
    895c:	10888004 	addi	r2,r2,8704
    8960:	f800283a 	ret

00008964 <__locale_charset>:
    8964:	00800074 	movhi	r2,1
    8968:	108b3304 	addi	r2,r2,11468
    896c:	f800283a 	ret

00008970 <__locale_mb_cur_max>:
    8970:	00800074 	movhi	r2,1
    8974:	108fcf04 	addi	r2,r2,16188
    8978:	10800017 	ldw	r2,0(r2)
    897c:	f800283a 	ret

00008980 <__locale_msgcharset>:
    8980:	00800074 	movhi	r2,1
    8984:	108b2b04 	addi	r2,r2,11436
    8988:	f800283a 	ret

0000898c <__locale_cjk_lang>:
    898c:	0005883a 	mov	r2,zero
    8990:	f800283a 	ret

00008994 <_localeconv_r>:
    8994:	00800074 	movhi	r2,1
    8998:	108b3b04 	addi	r2,r2,11500
    899c:	f800283a 	ret

000089a0 <setlocale>:
    89a0:	00800074 	movhi	r2,1
    89a4:	108fce04 	addi	r2,r2,16184
    89a8:	280d883a 	mov	r6,r5
    89ac:	200b883a 	mov	r5,r4
    89b0:	11000017 	ldw	r4,0(r2)
    89b4:	00088e81 	jmpi	88e8 <_setlocale_r>

000089b8 <localeconv>:
    89b8:	00800074 	movhi	r2,1
    89bc:	108b3b04 	addi	r2,r2,11500
    89c0:	f800283a 	ret

000089c4 <__smakebuf_r>:
    89c4:	2880030b 	ldhu	r2,12(r5)
    89c8:	10c0008c 	andi	r3,r2,2
    89cc:	1800411e 	bne	r3,zero,8ad4 <__smakebuf_r+0x110>
    89d0:	deffec04 	addi	sp,sp,-80
    89d4:	dc000f15 	stw	r16,60(sp)
    89d8:	2821883a 	mov	r16,r5
    89dc:	2940038f 	ldh	r5,14(r5)
    89e0:	dc401015 	stw	r17,64(sp)
    89e4:	dfc01315 	stw	ra,76(sp)
    89e8:	dcc01215 	stw	r19,72(sp)
    89ec:	dc801115 	stw	r18,68(sp)
    89f0:	2023883a 	mov	r17,r4
    89f4:	28001c16 	blt	r5,zero,8a68 <__smakebuf_r+0xa4>
    89f8:	d80d883a 	mov	r6,sp
    89fc:	000c2e80 	call	c2e8 <_fstat_r>
    8a00:	10001816 	blt	r2,zero,8a64 <__smakebuf_r+0xa0>
    8a04:	d8800117 	ldw	r2,4(sp)
    8a08:	00e00014 	movui	r3,32768
    8a0c:	10bc000c 	andi	r2,r2,61440
    8a10:	14c80020 	cmpeqi	r19,r2,8192
    8a14:	10c03726 	beq	r2,r3,8af4 <__smakebuf_r+0x130>
    8a18:	80c0030b 	ldhu	r3,12(r16)
    8a1c:	18c20014 	ori	r3,r3,2048
    8a20:	80c0030d 	sth	r3,12(r16)
    8a24:	00c80004 	movi	r3,8192
    8a28:	10c0521e 	bne	r2,r3,8b74 <__smakebuf_r+0x1b0>
    8a2c:	8140038f 	ldh	r5,14(r16)
    8a30:	8809883a 	mov	r4,r17
    8a34:	000c3440 	call	c344 <_isatty_r>
    8a38:	10004c26 	beq	r2,zero,8b6c <__smakebuf_r+0x1a8>
    8a3c:	8080030b 	ldhu	r2,12(r16)
    8a40:	80c010c4 	addi	r3,r16,67
    8a44:	80c00015 	stw	r3,0(r16)
    8a48:	10800054 	ori	r2,r2,1
    8a4c:	8080030d 	sth	r2,12(r16)
    8a50:	00800044 	movi	r2,1
    8a54:	80c00415 	stw	r3,16(r16)
    8a58:	80800515 	stw	r2,20(r16)
    8a5c:	04810004 	movi	r18,1024
    8a60:	00000706 	br	8a80 <__smakebuf_r+0xbc>
    8a64:	8080030b 	ldhu	r2,12(r16)
    8a68:	10c0200c 	andi	r3,r2,128
    8a6c:	18001f1e 	bne	r3,zero,8aec <__smakebuf_r+0x128>
    8a70:	04810004 	movi	r18,1024
    8a74:	10820014 	ori	r2,r2,2048
    8a78:	8080030d 	sth	r2,12(r16)
    8a7c:	0027883a 	mov	r19,zero
    8a80:	900b883a 	mov	r5,r18
    8a84:	8809883a 	mov	r4,r17
    8a88:	00031440 	call	3144 <_malloc_r>
    8a8c:	10002c26 	beq	r2,zero,8b40 <__smakebuf_r+0x17c>
    8a90:	80c0030b 	ldhu	r3,12(r16)
    8a94:	01000034 	movhi	r4,0
    8a98:	211eb604 	addi	r4,r4,31448
    8a9c:	89000f15 	stw	r4,60(r17)
    8aa0:	18c02014 	ori	r3,r3,128
    8aa4:	80c0030d 	sth	r3,12(r16)
    8aa8:	80800015 	stw	r2,0(r16)
    8aac:	80800415 	stw	r2,16(r16)
    8ab0:	84800515 	stw	r18,20(r16)
    8ab4:	98001a1e 	bne	r19,zero,8b20 <__smakebuf_r+0x15c>
    8ab8:	dfc01317 	ldw	ra,76(sp)
    8abc:	dcc01217 	ldw	r19,72(sp)
    8ac0:	dc801117 	ldw	r18,68(sp)
    8ac4:	dc401017 	ldw	r17,64(sp)
    8ac8:	dc000f17 	ldw	r16,60(sp)
    8acc:	dec01404 	addi	sp,sp,80
    8ad0:	f800283a 	ret
    8ad4:	288010c4 	addi	r2,r5,67
    8ad8:	28800015 	stw	r2,0(r5)
    8adc:	28800415 	stw	r2,16(r5)
    8ae0:	00800044 	movi	r2,1
    8ae4:	28800515 	stw	r2,20(r5)
    8ae8:	f800283a 	ret
    8aec:	04801004 	movi	r18,64
    8af0:	003fe006 	br	8a74 <__alt_data_end+0xff008a74>
    8af4:	81000a17 	ldw	r4,40(r16)
    8af8:	00c00074 	movhi	r3,1
    8afc:	18e9b704 	addi	r3,r3,-22820
    8b00:	20ffc51e 	bne	r4,r3,8a18 <__alt_data_end+0xff008a18>
    8b04:	8080030b 	ldhu	r2,12(r16)
    8b08:	04810004 	movi	r18,1024
    8b0c:	84801315 	stw	r18,76(r16)
    8b10:	1484b03a 	or	r2,r2,r18
    8b14:	8080030d 	sth	r2,12(r16)
    8b18:	0027883a 	mov	r19,zero
    8b1c:	003fd806 	br	8a80 <__alt_data_end+0xff008a80>
    8b20:	8140038f 	ldh	r5,14(r16)
    8b24:	8809883a 	mov	r4,r17
    8b28:	000c3440 	call	c344 <_isatty_r>
    8b2c:	103fe226 	beq	r2,zero,8ab8 <__alt_data_end+0xff008ab8>
    8b30:	8080030b 	ldhu	r2,12(r16)
    8b34:	10800054 	ori	r2,r2,1
    8b38:	8080030d 	sth	r2,12(r16)
    8b3c:	003fde06 	br	8ab8 <__alt_data_end+0xff008ab8>
    8b40:	8080030b 	ldhu	r2,12(r16)
    8b44:	10c0800c 	andi	r3,r2,512
    8b48:	183fdb1e 	bne	r3,zero,8ab8 <__alt_data_end+0xff008ab8>
    8b4c:	10800094 	ori	r2,r2,2
    8b50:	80c010c4 	addi	r3,r16,67
    8b54:	8080030d 	sth	r2,12(r16)
    8b58:	00800044 	movi	r2,1
    8b5c:	80c00015 	stw	r3,0(r16)
    8b60:	80c00415 	stw	r3,16(r16)
    8b64:	80800515 	stw	r2,20(r16)
    8b68:	003fd306 	br	8ab8 <__alt_data_end+0xff008ab8>
    8b6c:	04810004 	movi	r18,1024
    8b70:	003fc306 	br	8a80 <__alt_data_end+0xff008a80>
    8b74:	0027883a 	mov	r19,zero
    8b78:	04810004 	movi	r18,1024
    8b7c:	003fc006 	br	8a80 <__alt_data_end+0xff008a80>

00008b80 <memchr>:
    8b80:	208000cc 	andi	r2,r4,3
    8b84:	280f883a 	mov	r7,r5
    8b88:	10003426 	beq	r2,zero,8c5c <memchr+0xdc>
    8b8c:	30bfffc4 	addi	r2,r6,-1
    8b90:	30001a26 	beq	r6,zero,8bfc <memchr+0x7c>
    8b94:	20c00003 	ldbu	r3,0(r4)
    8b98:	29803fcc 	andi	r6,r5,255
    8b9c:	30c0051e 	bne	r6,r3,8bb4 <memchr+0x34>
    8ba0:	00001806 	br	8c04 <memchr+0x84>
    8ba4:	10001526 	beq	r2,zero,8bfc <memchr+0x7c>
    8ba8:	20c00003 	ldbu	r3,0(r4)
    8bac:	10bfffc4 	addi	r2,r2,-1
    8bb0:	30c01426 	beq	r6,r3,8c04 <memchr+0x84>
    8bb4:	21000044 	addi	r4,r4,1
    8bb8:	20c000cc 	andi	r3,r4,3
    8bbc:	183ff91e 	bne	r3,zero,8ba4 <__alt_data_end+0xff008ba4>
    8bc0:	020000c4 	movi	r8,3
    8bc4:	40801136 	bltu	r8,r2,8c0c <memchr+0x8c>
    8bc8:	10000c26 	beq	r2,zero,8bfc <memchr+0x7c>
    8bcc:	20c00003 	ldbu	r3,0(r4)
    8bd0:	29403fcc 	andi	r5,r5,255
    8bd4:	28c00b26 	beq	r5,r3,8c04 <memchr+0x84>
    8bd8:	20c00044 	addi	r3,r4,1
    8bdc:	39803fcc 	andi	r6,r7,255
    8be0:	2089883a 	add	r4,r4,r2
    8be4:	00000306 	br	8bf4 <memchr+0x74>
    8be8:	18c00044 	addi	r3,r3,1
    8bec:	197fffc3 	ldbu	r5,-1(r3)
    8bf0:	31400526 	beq	r6,r5,8c08 <memchr+0x88>
    8bf4:	1805883a 	mov	r2,r3
    8bf8:	20fffb1e 	bne	r4,r3,8be8 <__alt_data_end+0xff008be8>
    8bfc:	0005883a 	mov	r2,zero
    8c00:	f800283a 	ret
    8c04:	2005883a 	mov	r2,r4
    8c08:	f800283a 	ret
    8c0c:	28c03fcc 	andi	r3,r5,255
    8c10:	1812923a 	slli	r9,r3,8
    8c14:	02ffbff4 	movhi	r11,65279
    8c18:	02a02074 	movhi	r10,32897
    8c1c:	48d2b03a 	or	r9,r9,r3
    8c20:	4806943a 	slli	r3,r9,16
    8c24:	5affbfc4 	addi	r11,r11,-257
    8c28:	52a02004 	addi	r10,r10,-32640
    8c2c:	48d2b03a 	or	r9,r9,r3
    8c30:	20c00017 	ldw	r3,0(r4)
    8c34:	48c6f03a 	xor	r3,r9,r3
    8c38:	1acd883a 	add	r6,r3,r11
    8c3c:	00c6303a 	nor	r3,zero,r3
    8c40:	30c6703a 	and	r3,r6,r3
    8c44:	1a86703a 	and	r3,r3,r10
    8c48:	183fe01e 	bne	r3,zero,8bcc <__alt_data_end+0xff008bcc>
    8c4c:	10bfff04 	addi	r2,r2,-4
    8c50:	21000104 	addi	r4,r4,4
    8c54:	40bff636 	bltu	r8,r2,8c30 <__alt_data_end+0xff008c30>
    8c58:	003fdb06 	br	8bc8 <__alt_data_end+0xff008bc8>
    8c5c:	3005883a 	mov	r2,r6
    8c60:	003fd706 	br	8bc0 <__alt_data_end+0xff008bc0>

00008c64 <memcpy>:
    8c64:	defffd04 	addi	sp,sp,-12
    8c68:	dfc00215 	stw	ra,8(sp)
    8c6c:	dc400115 	stw	r17,4(sp)
    8c70:	dc000015 	stw	r16,0(sp)
    8c74:	00c003c4 	movi	r3,15
    8c78:	2005883a 	mov	r2,r4
    8c7c:	1980452e 	bgeu	r3,r6,8d94 <memcpy+0x130>
    8c80:	2906b03a 	or	r3,r5,r4
    8c84:	18c000cc 	andi	r3,r3,3
    8c88:	1800441e 	bne	r3,zero,8d9c <memcpy+0x138>
    8c8c:	347ffc04 	addi	r17,r6,-16
    8c90:	8822d13a 	srli	r17,r17,4
    8c94:	28c00104 	addi	r3,r5,4
    8c98:	23400104 	addi	r13,r4,4
    8c9c:	8820913a 	slli	r16,r17,4
    8ca0:	2b000204 	addi	r12,r5,8
    8ca4:	22c00204 	addi	r11,r4,8
    8ca8:	84000504 	addi	r16,r16,20
    8cac:	2a800304 	addi	r10,r5,12
    8cb0:	22400304 	addi	r9,r4,12
    8cb4:	2c21883a 	add	r16,r5,r16
    8cb8:	2811883a 	mov	r8,r5
    8cbc:	200f883a 	mov	r7,r4
    8cc0:	41000017 	ldw	r4,0(r8)
    8cc4:	1fc00017 	ldw	ra,0(r3)
    8cc8:	63c00017 	ldw	r15,0(r12)
    8ccc:	39000015 	stw	r4,0(r7)
    8cd0:	53800017 	ldw	r14,0(r10)
    8cd4:	6fc00015 	stw	ra,0(r13)
    8cd8:	5bc00015 	stw	r15,0(r11)
    8cdc:	4b800015 	stw	r14,0(r9)
    8ce0:	18c00404 	addi	r3,r3,16
    8ce4:	39c00404 	addi	r7,r7,16
    8ce8:	42000404 	addi	r8,r8,16
    8cec:	6b400404 	addi	r13,r13,16
    8cf0:	63000404 	addi	r12,r12,16
    8cf4:	5ac00404 	addi	r11,r11,16
    8cf8:	52800404 	addi	r10,r10,16
    8cfc:	4a400404 	addi	r9,r9,16
    8d00:	1c3fef1e 	bne	r3,r16,8cc0 <__alt_data_end+0xff008cc0>
    8d04:	89c00044 	addi	r7,r17,1
    8d08:	380e913a 	slli	r7,r7,4
    8d0c:	310003cc 	andi	r4,r6,15
    8d10:	02c000c4 	movi	r11,3
    8d14:	11c7883a 	add	r3,r2,r7
    8d18:	29cb883a 	add	r5,r5,r7
    8d1c:	5900212e 	bgeu	r11,r4,8da4 <memcpy+0x140>
    8d20:	1813883a 	mov	r9,r3
    8d24:	2811883a 	mov	r8,r5
    8d28:	200f883a 	mov	r7,r4
    8d2c:	42800017 	ldw	r10,0(r8)
    8d30:	4a400104 	addi	r9,r9,4
    8d34:	39ffff04 	addi	r7,r7,-4
    8d38:	4abfff15 	stw	r10,-4(r9)
    8d3c:	42000104 	addi	r8,r8,4
    8d40:	59fffa36 	bltu	r11,r7,8d2c <__alt_data_end+0xff008d2c>
    8d44:	213fff04 	addi	r4,r4,-4
    8d48:	2008d0ba 	srli	r4,r4,2
    8d4c:	318000cc 	andi	r6,r6,3
    8d50:	21000044 	addi	r4,r4,1
    8d54:	2109883a 	add	r4,r4,r4
    8d58:	2109883a 	add	r4,r4,r4
    8d5c:	1907883a 	add	r3,r3,r4
    8d60:	290b883a 	add	r5,r5,r4
    8d64:	30000626 	beq	r6,zero,8d80 <memcpy+0x11c>
    8d68:	198d883a 	add	r6,r3,r6
    8d6c:	29c00003 	ldbu	r7,0(r5)
    8d70:	18c00044 	addi	r3,r3,1
    8d74:	29400044 	addi	r5,r5,1
    8d78:	19ffffc5 	stb	r7,-1(r3)
    8d7c:	19bffb1e 	bne	r3,r6,8d6c <__alt_data_end+0xff008d6c>
    8d80:	dfc00217 	ldw	ra,8(sp)
    8d84:	dc400117 	ldw	r17,4(sp)
    8d88:	dc000017 	ldw	r16,0(sp)
    8d8c:	dec00304 	addi	sp,sp,12
    8d90:	f800283a 	ret
    8d94:	2007883a 	mov	r3,r4
    8d98:	003ff206 	br	8d64 <__alt_data_end+0xff008d64>
    8d9c:	2007883a 	mov	r3,r4
    8da0:	003ff106 	br	8d68 <__alt_data_end+0xff008d68>
    8da4:	200d883a 	mov	r6,r4
    8da8:	003fee06 	br	8d64 <__alt_data_end+0xff008d64>

00008dac <memmove>:
    8dac:	2005883a 	mov	r2,r4
    8db0:	29000b2e 	bgeu	r5,r4,8de0 <memmove+0x34>
    8db4:	298f883a 	add	r7,r5,r6
    8db8:	21c0092e 	bgeu	r4,r7,8de0 <memmove+0x34>
    8dbc:	2187883a 	add	r3,r4,r6
    8dc0:	198bc83a 	sub	r5,r3,r6
    8dc4:	30004826 	beq	r6,zero,8ee8 <memmove+0x13c>
    8dc8:	39ffffc4 	addi	r7,r7,-1
    8dcc:	39000003 	ldbu	r4,0(r7)
    8dd0:	18ffffc4 	addi	r3,r3,-1
    8dd4:	19000005 	stb	r4,0(r3)
    8dd8:	28fffb1e 	bne	r5,r3,8dc8 <__alt_data_end+0xff008dc8>
    8ddc:	f800283a 	ret
    8de0:	00c003c4 	movi	r3,15
    8de4:	1980412e 	bgeu	r3,r6,8eec <memmove+0x140>
    8de8:	2886b03a 	or	r3,r5,r2
    8dec:	18c000cc 	andi	r3,r3,3
    8df0:	1800401e 	bne	r3,zero,8ef4 <memmove+0x148>
    8df4:	33fffc04 	addi	r15,r6,-16
    8df8:	781ed13a 	srli	r15,r15,4
    8dfc:	28c00104 	addi	r3,r5,4
    8e00:	13400104 	addi	r13,r2,4
    8e04:	781c913a 	slli	r14,r15,4
    8e08:	2b000204 	addi	r12,r5,8
    8e0c:	12c00204 	addi	r11,r2,8
    8e10:	73800504 	addi	r14,r14,20
    8e14:	2a800304 	addi	r10,r5,12
    8e18:	12400304 	addi	r9,r2,12
    8e1c:	2b9d883a 	add	r14,r5,r14
    8e20:	2811883a 	mov	r8,r5
    8e24:	100f883a 	mov	r7,r2
    8e28:	41000017 	ldw	r4,0(r8)
    8e2c:	39c00404 	addi	r7,r7,16
    8e30:	18c00404 	addi	r3,r3,16
    8e34:	393ffc15 	stw	r4,-16(r7)
    8e38:	193ffc17 	ldw	r4,-16(r3)
    8e3c:	6b400404 	addi	r13,r13,16
    8e40:	5ac00404 	addi	r11,r11,16
    8e44:	693ffc15 	stw	r4,-16(r13)
    8e48:	61000017 	ldw	r4,0(r12)
    8e4c:	4a400404 	addi	r9,r9,16
    8e50:	42000404 	addi	r8,r8,16
    8e54:	593ffc15 	stw	r4,-16(r11)
    8e58:	51000017 	ldw	r4,0(r10)
    8e5c:	63000404 	addi	r12,r12,16
    8e60:	52800404 	addi	r10,r10,16
    8e64:	493ffc15 	stw	r4,-16(r9)
    8e68:	1bbfef1e 	bne	r3,r14,8e28 <__alt_data_end+0xff008e28>
    8e6c:	79000044 	addi	r4,r15,1
    8e70:	2008913a 	slli	r4,r4,4
    8e74:	328003cc 	andi	r10,r6,15
    8e78:	02c000c4 	movi	r11,3
    8e7c:	1107883a 	add	r3,r2,r4
    8e80:	290b883a 	add	r5,r5,r4
    8e84:	5a801e2e 	bgeu	r11,r10,8f00 <memmove+0x154>
    8e88:	1813883a 	mov	r9,r3
    8e8c:	2811883a 	mov	r8,r5
    8e90:	500f883a 	mov	r7,r10
    8e94:	41000017 	ldw	r4,0(r8)
    8e98:	4a400104 	addi	r9,r9,4
    8e9c:	39ffff04 	addi	r7,r7,-4
    8ea0:	493fff15 	stw	r4,-4(r9)
    8ea4:	42000104 	addi	r8,r8,4
    8ea8:	59fffa36 	bltu	r11,r7,8e94 <__alt_data_end+0xff008e94>
    8eac:	513fff04 	addi	r4,r10,-4
    8eb0:	2008d0ba 	srli	r4,r4,2
    8eb4:	318000cc 	andi	r6,r6,3
    8eb8:	21000044 	addi	r4,r4,1
    8ebc:	2109883a 	add	r4,r4,r4
    8ec0:	2109883a 	add	r4,r4,r4
    8ec4:	1907883a 	add	r3,r3,r4
    8ec8:	290b883a 	add	r5,r5,r4
    8ecc:	30000b26 	beq	r6,zero,8efc <memmove+0x150>
    8ed0:	198d883a 	add	r6,r3,r6
    8ed4:	29c00003 	ldbu	r7,0(r5)
    8ed8:	18c00044 	addi	r3,r3,1
    8edc:	29400044 	addi	r5,r5,1
    8ee0:	19ffffc5 	stb	r7,-1(r3)
    8ee4:	19bffb1e 	bne	r3,r6,8ed4 <__alt_data_end+0xff008ed4>
    8ee8:	f800283a 	ret
    8eec:	1007883a 	mov	r3,r2
    8ef0:	003ff606 	br	8ecc <__alt_data_end+0xff008ecc>
    8ef4:	1007883a 	mov	r3,r2
    8ef8:	003ff506 	br	8ed0 <__alt_data_end+0xff008ed0>
    8efc:	f800283a 	ret
    8f00:	500d883a 	mov	r6,r10
    8f04:	003ff106 	br	8ecc <__alt_data_end+0xff008ecc>

00008f08 <memset>:
    8f08:	20c000cc 	andi	r3,r4,3
    8f0c:	2005883a 	mov	r2,r4
    8f10:	18004426 	beq	r3,zero,9024 <memset+0x11c>
    8f14:	31ffffc4 	addi	r7,r6,-1
    8f18:	30004026 	beq	r6,zero,901c <memset+0x114>
    8f1c:	2813883a 	mov	r9,r5
    8f20:	200d883a 	mov	r6,r4
    8f24:	2007883a 	mov	r3,r4
    8f28:	00000406 	br	8f3c <memset+0x34>
    8f2c:	3a3fffc4 	addi	r8,r7,-1
    8f30:	31800044 	addi	r6,r6,1
    8f34:	38003926 	beq	r7,zero,901c <memset+0x114>
    8f38:	400f883a 	mov	r7,r8
    8f3c:	18c00044 	addi	r3,r3,1
    8f40:	32400005 	stb	r9,0(r6)
    8f44:	1a0000cc 	andi	r8,r3,3
    8f48:	403ff81e 	bne	r8,zero,8f2c <__alt_data_end+0xff008f2c>
    8f4c:	010000c4 	movi	r4,3
    8f50:	21c02d2e 	bgeu	r4,r7,9008 <memset+0x100>
    8f54:	29003fcc 	andi	r4,r5,255
    8f58:	200c923a 	slli	r6,r4,8
    8f5c:	3108b03a 	or	r4,r6,r4
    8f60:	200c943a 	slli	r6,r4,16
    8f64:	218cb03a 	or	r6,r4,r6
    8f68:	010003c4 	movi	r4,15
    8f6c:	21c0182e 	bgeu	r4,r7,8fd0 <memset+0xc8>
    8f70:	3b3ffc04 	addi	r12,r7,-16
    8f74:	6018d13a 	srli	r12,r12,4
    8f78:	1a000104 	addi	r8,r3,4
    8f7c:	1ac00204 	addi	r11,r3,8
    8f80:	6008913a 	slli	r4,r12,4
    8f84:	1a800304 	addi	r10,r3,12
    8f88:	1813883a 	mov	r9,r3
    8f8c:	21000504 	addi	r4,r4,20
    8f90:	1909883a 	add	r4,r3,r4
    8f94:	49800015 	stw	r6,0(r9)
    8f98:	41800015 	stw	r6,0(r8)
    8f9c:	59800015 	stw	r6,0(r11)
    8fa0:	51800015 	stw	r6,0(r10)
    8fa4:	42000404 	addi	r8,r8,16
    8fa8:	4a400404 	addi	r9,r9,16
    8fac:	5ac00404 	addi	r11,r11,16
    8fb0:	52800404 	addi	r10,r10,16
    8fb4:	413ff71e 	bne	r8,r4,8f94 <__alt_data_end+0xff008f94>
    8fb8:	63000044 	addi	r12,r12,1
    8fbc:	6018913a 	slli	r12,r12,4
    8fc0:	39c003cc 	andi	r7,r7,15
    8fc4:	010000c4 	movi	r4,3
    8fc8:	1b07883a 	add	r3,r3,r12
    8fcc:	21c00e2e 	bgeu	r4,r7,9008 <memset+0x100>
    8fd0:	1813883a 	mov	r9,r3
    8fd4:	3811883a 	mov	r8,r7
    8fd8:	010000c4 	movi	r4,3
    8fdc:	49800015 	stw	r6,0(r9)
    8fe0:	423fff04 	addi	r8,r8,-4
    8fe4:	4a400104 	addi	r9,r9,4
    8fe8:	223ffc36 	bltu	r4,r8,8fdc <__alt_data_end+0xff008fdc>
    8fec:	393fff04 	addi	r4,r7,-4
    8ff0:	2008d0ba 	srli	r4,r4,2
    8ff4:	39c000cc 	andi	r7,r7,3
    8ff8:	21000044 	addi	r4,r4,1
    8ffc:	2109883a 	add	r4,r4,r4
    9000:	2109883a 	add	r4,r4,r4
    9004:	1907883a 	add	r3,r3,r4
    9008:	38000526 	beq	r7,zero,9020 <memset+0x118>
    900c:	19cf883a 	add	r7,r3,r7
    9010:	19400005 	stb	r5,0(r3)
    9014:	18c00044 	addi	r3,r3,1
    9018:	38fffd1e 	bne	r7,r3,9010 <__alt_data_end+0xff009010>
    901c:	f800283a 	ret
    9020:	f800283a 	ret
    9024:	2007883a 	mov	r3,r4
    9028:	300f883a 	mov	r7,r6
    902c:	003fc706 	br	8f4c <__alt_data_end+0xff008f4c>

00009030 <_Balloc>:
    9030:	20801317 	ldw	r2,76(r4)
    9034:	defffc04 	addi	sp,sp,-16
    9038:	dc400115 	stw	r17,4(sp)
    903c:	dc000015 	stw	r16,0(sp)
    9040:	dfc00315 	stw	ra,12(sp)
    9044:	dc800215 	stw	r18,8(sp)
    9048:	2023883a 	mov	r17,r4
    904c:	2821883a 	mov	r16,r5
    9050:	10000f26 	beq	r2,zero,9090 <_Balloc+0x60>
    9054:	8407883a 	add	r3,r16,r16
    9058:	18c7883a 	add	r3,r3,r3
    905c:	10c7883a 	add	r3,r2,r3
    9060:	18800017 	ldw	r2,0(r3)
    9064:	10001126 	beq	r2,zero,90ac <_Balloc+0x7c>
    9068:	11000017 	ldw	r4,0(r2)
    906c:	19000015 	stw	r4,0(r3)
    9070:	10000415 	stw	zero,16(r2)
    9074:	10000315 	stw	zero,12(r2)
    9078:	dfc00317 	ldw	ra,12(sp)
    907c:	dc800217 	ldw	r18,8(sp)
    9080:	dc400117 	ldw	r17,4(sp)
    9084:	dc000017 	ldw	r16,0(sp)
    9088:	dec00404 	addi	sp,sp,16
    908c:	f800283a 	ret
    9090:	01800844 	movi	r6,33
    9094:	01400104 	movi	r5,4
    9098:	000bf180 	call	bf18 <_calloc_r>
    909c:	88801315 	stw	r2,76(r17)
    90a0:	103fec1e 	bne	r2,zero,9054 <__alt_data_end+0xff009054>
    90a4:	0005883a 	mov	r2,zero
    90a8:	003ff306 	br	9078 <__alt_data_end+0xff009078>
    90ac:	01400044 	movi	r5,1
    90b0:	2c24983a 	sll	r18,r5,r16
    90b4:	8809883a 	mov	r4,r17
    90b8:	91800144 	addi	r6,r18,5
    90bc:	318d883a 	add	r6,r6,r6
    90c0:	318d883a 	add	r6,r6,r6
    90c4:	000bf180 	call	bf18 <_calloc_r>
    90c8:	103ff626 	beq	r2,zero,90a4 <__alt_data_end+0xff0090a4>
    90cc:	14000115 	stw	r16,4(r2)
    90d0:	14800215 	stw	r18,8(r2)
    90d4:	003fe606 	br	9070 <__alt_data_end+0xff009070>

000090d8 <_Bfree>:
    90d8:	28000826 	beq	r5,zero,90fc <_Bfree+0x24>
    90dc:	28c00117 	ldw	r3,4(r5)
    90e0:	20801317 	ldw	r2,76(r4)
    90e4:	18c7883a 	add	r3,r3,r3
    90e8:	18c7883a 	add	r3,r3,r3
    90ec:	10c5883a 	add	r2,r2,r3
    90f0:	10c00017 	ldw	r3,0(r2)
    90f4:	28c00015 	stw	r3,0(r5)
    90f8:	11400015 	stw	r5,0(r2)
    90fc:	f800283a 	ret

00009100 <__multadd>:
    9100:	defffa04 	addi	sp,sp,-24
    9104:	dc800315 	stw	r18,12(sp)
    9108:	dc400215 	stw	r17,8(sp)
    910c:	dc000115 	stw	r16,4(sp)
    9110:	2823883a 	mov	r17,r5
    9114:	2c000417 	ldw	r16,16(r5)
    9118:	dfc00515 	stw	ra,20(sp)
    911c:	dcc00415 	stw	r19,16(sp)
    9120:	2025883a 	mov	r18,r4
    9124:	29400504 	addi	r5,r5,20
    9128:	0011883a 	mov	r8,zero
    912c:	28c00017 	ldw	r3,0(r5)
    9130:	29400104 	addi	r5,r5,4
    9134:	42000044 	addi	r8,r8,1
    9138:	18bfffcc 	andi	r2,r3,65535
    913c:	1185383a 	mul	r2,r2,r6
    9140:	1806d43a 	srli	r3,r3,16
    9144:	11cf883a 	add	r7,r2,r7
    9148:	3808d43a 	srli	r4,r7,16
    914c:	1987383a 	mul	r3,r3,r6
    9150:	38bfffcc 	andi	r2,r7,65535
    9154:	1907883a 	add	r3,r3,r4
    9158:	1808943a 	slli	r4,r3,16
    915c:	180ed43a 	srli	r7,r3,16
    9160:	2085883a 	add	r2,r4,r2
    9164:	28bfff15 	stw	r2,-4(r5)
    9168:	443ff016 	blt	r8,r16,912c <__alt_data_end+0xff00912c>
    916c:	38000926 	beq	r7,zero,9194 <__multadd+0x94>
    9170:	88800217 	ldw	r2,8(r17)
    9174:	80800f0e 	bge	r16,r2,91b4 <__multadd+0xb4>
    9178:	80800144 	addi	r2,r16,5
    917c:	1085883a 	add	r2,r2,r2
    9180:	1085883a 	add	r2,r2,r2
    9184:	8885883a 	add	r2,r17,r2
    9188:	11c00015 	stw	r7,0(r2)
    918c:	84000044 	addi	r16,r16,1
    9190:	8c000415 	stw	r16,16(r17)
    9194:	8805883a 	mov	r2,r17
    9198:	dfc00517 	ldw	ra,20(sp)
    919c:	dcc00417 	ldw	r19,16(sp)
    91a0:	dc800317 	ldw	r18,12(sp)
    91a4:	dc400217 	ldw	r17,8(sp)
    91a8:	dc000117 	ldw	r16,4(sp)
    91ac:	dec00604 	addi	sp,sp,24
    91b0:	f800283a 	ret
    91b4:	89400117 	ldw	r5,4(r17)
    91b8:	9009883a 	mov	r4,r18
    91bc:	d9c00015 	stw	r7,0(sp)
    91c0:	29400044 	addi	r5,r5,1
    91c4:	00090300 	call	9030 <_Balloc>
    91c8:	89800417 	ldw	r6,16(r17)
    91cc:	89400304 	addi	r5,r17,12
    91d0:	11000304 	addi	r4,r2,12
    91d4:	31800084 	addi	r6,r6,2
    91d8:	318d883a 	add	r6,r6,r6
    91dc:	318d883a 	add	r6,r6,r6
    91e0:	1027883a 	mov	r19,r2
    91e4:	0008c640 	call	8c64 <memcpy>
    91e8:	d9c00017 	ldw	r7,0(sp)
    91ec:	88000a26 	beq	r17,zero,9218 <__multadd+0x118>
    91f0:	88c00117 	ldw	r3,4(r17)
    91f4:	90801317 	ldw	r2,76(r18)
    91f8:	18c7883a 	add	r3,r3,r3
    91fc:	18c7883a 	add	r3,r3,r3
    9200:	10c5883a 	add	r2,r2,r3
    9204:	10c00017 	ldw	r3,0(r2)
    9208:	88c00015 	stw	r3,0(r17)
    920c:	14400015 	stw	r17,0(r2)
    9210:	9823883a 	mov	r17,r19
    9214:	003fd806 	br	9178 <__alt_data_end+0xff009178>
    9218:	9823883a 	mov	r17,r19
    921c:	003fd606 	br	9178 <__alt_data_end+0xff009178>

00009220 <__s2b>:
    9220:	defff904 	addi	sp,sp,-28
    9224:	dc400115 	stw	r17,4(sp)
    9228:	dc000015 	stw	r16,0(sp)
    922c:	2023883a 	mov	r17,r4
    9230:	2821883a 	mov	r16,r5
    9234:	39000204 	addi	r4,r7,8
    9238:	01400244 	movi	r5,9
    923c:	dcc00315 	stw	r19,12(sp)
    9240:	dc800215 	stw	r18,8(sp)
    9244:	dfc00615 	stw	ra,24(sp)
    9248:	dd400515 	stw	r21,20(sp)
    924c:	dd000415 	stw	r20,16(sp)
    9250:	3825883a 	mov	r18,r7
    9254:	3027883a 	mov	r19,r6
    9258:	00025740 	call	2574 <__divsi3>
    925c:	00c00044 	movi	r3,1
    9260:	000b883a 	mov	r5,zero
    9264:	1880030e 	bge	r3,r2,9274 <__s2b+0x54>
    9268:	18c7883a 	add	r3,r3,r3
    926c:	29400044 	addi	r5,r5,1
    9270:	18bffd16 	blt	r3,r2,9268 <__alt_data_end+0xff009268>
    9274:	8809883a 	mov	r4,r17
    9278:	00090300 	call	9030 <_Balloc>
    927c:	d8c00717 	ldw	r3,28(sp)
    9280:	10c00515 	stw	r3,20(r2)
    9284:	00c00044 	movi	r3,1
    9288:	10c00415 	stw	r3,16(r2)
    928c:	00c00244 	movi	r3,9
    9290:	1cc0210e 	bge	r3,r19,9318 <__s2b+0xf8>
    9294:	80eb883a 	add	r21,r16,r3
    9298:	a829883a 	mov	r20,r21
    929c:	84e1883a 	add	r16,r16,r19
    92a0:	a1c00007 	ldb	r7,0(r20)
    92a4:	01800284 	movi	r6,10
    92a8:	a5000044 	addi	r20,r20,1
    92ac:	100b883a 	mov	r5,r2
    92b0:	39fff404 	addi	r7,r7,-48
    92b4:	8809883a 	mov	r4,r17
    92b8:	00091000 	call	9100 <__multadd>
    92bc:	a43ff81e 	bne	r20,r16,92a0 <__alt_data_end+0xff0092a0>
    92c0:	ace1883a 	add	r16,r21,r19
    92c4:	843ffe04 	addi	r16,r16,-8
    92c8:	9c800a0e 	bge	r19,r18,92f4 <__s2b+0xd4>
    92cc:	94e5c83a 	sub	r18,r18,r19
    92d0:	84a5883a 	add	r18,r16,r18
    92d4:	81c00007 	ldb	r7,0(r16)
    92d8:	01800284 	movi	r6,10
    92dc:	84000044 	addi	r16,r16,1
    92e0:	100b883a 	mov	r5,r2
    92e4:	39fff404 	addi	r7,r7,-48
    92e8:	8809883a 	mov	r4,r17
    92ec:	00091000 	call	9100 <__multadd>
    92f0:	84bff81e 	bne	r16,r18,92d4 <__alt_data_end+0xff0092d4>
    92f4:	dfc00617 	ldw	ra,24(sp)
    92f8:	dd400517 	ldw	r21,20(sp)
    92fc:	dd000417 	ldw	r20,16(sp)
    9300:	dcc00317 	ldw	r19,12(sp)
    9304:	dc800217 	ldw	r18,8(sp)
    9308:	dc400117 	ldw	r17,4(sp)
    930c:	dc000017 	ldw	r16,0(sp)
    9310:	dec00704 	addi	sp,sp,28
    9314:	f800283a 	ret
    9318:	84000284 	addi	r16,r16,10
    931c:	1827883a 	mov	r19,r3
    9320:	003fe906 	br	92c8 <__alt_data_end+0xff0092c8>

00009324 <__hi0bits>:
    9324:	20bfffec 	andhi	r2,r4,65535
    9328:	1000141e 	bne	r2,zero,937c <__hi0bits+0x58>
    932c:	2008943a 	slli	r4,r4,16
    9330:	00800404 	movi	r2,16
    9334:	20ffc02c 	andhi	r3,r4,65280
    9338:	1800021e 	bne	r3,zero,9344 <__hi0bits+0x20>
    933c:	2008923a 	slli	r4,r4,8
    9340:	10800204 	addi	r2,r2,8
    9344:	20fc002c 	andhi	r3,r4,61440
    9348:	1800021e 	bne	r3,zero,9354 <__hi0bits+0x30>
    934c:	2008913a 	slli	r4,r4,4
    9350:	10800104 	addi	r2,r2,4
    9354:	20f0002c 	andhi	r3,r4,49152
    9358:	1800031e 	bne	r3,zero,9368 <__hi0bits+0x44>
    935c:	2109883a 	add	r4,r4,r4
    9360:	10800084 	addi	r2,r2,2
    9364:	2109883a 	add	r4,r4,r4
    9368:	20000316 	blt	r4,zero,9378 <__hi0bits+0x54>
    936c:	2110002c 	andhi	r4,r4,16384
    9370:	2000041e 	bne	r4,zero,9384 <__hi0bits+0x60>
    9374:	00800804 	movi	r2,32
    9378:	f800283a 	ret
    937c:	0005883a 	mov	r2,zero
    9380:	003fec06 	br	9334 <__alt_data_end+0xff009334>
    9384:	10800044 	addi	r2,r2,1
    9388:	f800283a 	ret

0000938c <__lo0bits>:
    938c:	20c00017 	ldw	r3,0(r4)
    9390:	188001cc 	andi	r2,r3,7
    9394:	10000826 	beq	r2,zero,93b8 <__lo0bits+0x2c>
    9398:	1880004c 	andi	r2,r3,1
    939c:	1000211e 	bne	r2,zero,9424 <__lo0bits+0x98>
    93a0:	1880008c 	andi	r2,r3,2
    93a4:	1000211e 	bne	r2,zero,942c <__lo0bits+0xa0>
    93a8:	1806d0ba 	srli	r3,r3,2
    93ac:	00800084 	movi	r2,2
    93b0:	20c00015 	stw	r3,0(r4)
    93b4:	f800283a 	ret
    93b8:	18bfffcc 	andi	r2,r3,65535
    93bc:	10001326 	beq	r2,zero,940c <__lo0bits+0x80>
    93c0:	0005883a 	mov	r2,zero
    93c4:	19403fcc 	andi	r5,r3,255
    93c8:	2800021e 	bne	r5,zero,93d4 <__lo0bits+0x48>
    93cc:	1806d23a 	srli	r3,r3,8
    93d0:	10800204 	addi	r2,r2,8
    93d4:	194003cc 	andi	r5,r3,15
    93d8:	2800021e 	bne	r5,zero,93e4 <__lo0bits+0x58>
    93dc:	1806d13a 	srli	r3,r3,4
    93e0:	10800104 	addi	r2,r2,4
    93e4:	194000cc 	andi	r5,r3,3
    93e8:	2800021e 	bne	r5,zero,93f4 <__lo0bits+0x68>
    93ec:	1806d0ba 	srli	r3,r3,2
    93f0:	10800084 	addi	r2,r2,2
    93f4:	1940004c 	andi	r5,r3,1
    93f8:	2800081e 	bne	r5,zero,941c <__lo0bits+0x90>
    93fc:	1806d07a 	srli	r3,r3,1
    9400:	1800051e 	bne	r3,zero,9418 <__lo0bits+0x8c>
    9404:	00800804 	movi	r2,32
    9408:	f800283a 	ret
    940c:	1806d43a 	srli	r3,r3,16
    9410:	00800404 	movi	r2,16
    9414:	003feb06 	br	93c4 <__alt_data_end+0xff0093c4>
    9418:	10800044 	addi	r2,r2,1
    941c:	20c00015 	stw	r3,0(r4)
    9420:	f800283a 	ret
    9424:	0005883a 	mov	r2,zero
    9428:	f800283a 	ret
    942c:	1806d07a 	srli	r3,r3,1
    9430:	00800044 	movi	r2,1
    9434:	20c00015 	stw	r3,0(r4)
    9438:	f800283a 	ret

0000943c <__i2b>:
    943c:	defffd04 	addi	sp,sp,-12
    9440:	dc000015 	stw	r16,0(sp)
    9444:	04000044 	movi	r16,1
    9448:	dc400115 	stw	r17,4(sp)
    944c:	2823883a 	mov	r17,r5
    9450:	800b883a 	mov	r5,r16
    9454:	dfc00215 	stw	ra,8(sp)
    9458:	00090300 	call	9030 <_Balloc>
    945c:	14400515 	stw	r17,20(r2)
    9460:	14000415 	stw	r16,16(r2)
    9464:	dfc00217 	ldw	ra,8(sp)
    9468:	dc400117 	ldw	r17,4(sp)
    946c:	dc000017 	ldw	r16,0(sp)
    9470:	dec00304 	addi	sp,sp,12
    9474:	f800283a 	ret

00009478 <__multiply>:
    9478:	defffa04 	addi	sp,sp,-24
    947c:	dcc00315 	stw	r19,12(sp)
    9480:	dc800215 	stw	r18,8(sp)
    9484:	34c00417 	ldw	r19,16(r6)
    9488:	2c800417 	ldw	r18,16(r5)
    948c:	dd000415 	stw	r20,16(sp)
    9490:	dc400115 	stw	r17,4(sp)
    9494:	dfc00515 	stw	ra,20(sp)
    9498:	dc000015 	stw	r16,0(sp)
    949c:	2829883a 	mov	r20,r5
    94a0:	3023883a 	mov	r17,r6
    94a4:	94c0050e 	bge	r18,r19,94bc <__multiply+0x44>
    94a8:	9007883a 	mov	r3,r18
    94ac:	3029883a 	mov	r20,r6
    94b0:	9825883a 	mov	r18,r19
    94b4:	2823883a 	mov	r17,r5
    94b8:	1827883a 	mov	r19,r3
    94bc:	a0800217 	ldw	r2,8(r20)
    94c0:	94e1883a 	add	r16,r18,r19
    94c4:	a1400117 	ldw	r5,4(r20)
    94c8:	1400010e 	bge	r2,r16,94d0 <__multiply+0x58>
    94cc:	29400044 	addi	r5,r5,1
    94d0:	00090300 	call	9030 <_Balloc>
    94d4:	8415883a 	add	r10,r16,r16
    94d8:	12c00504 	addi	r11,r2,20
    94dc:	5295883a 	add	r10,r10,r10
    94e0:	5a95883a 	add	r10,r11,r10
    94e4:	5807883a 	mov	r3,r11
    94e8:	5a80032e 	bgeu	r11,r10,94f8 <__multiply+0x80>
    94ec:	18000015 	stw	zero,0(r3)
    94f0:	18c00104 	addi	r3,r3,4
    94f4:	1abffd36 	bltu	r3,r10,94ec <__alt_data_end+0xff0094ec>
    94f8:	9ce7883a 	add	r19,r19,r19
    94fc:	94a5883a 	add	r18,r18,r18
    9500:	89800504 	addi	r6,r17,20
    9504:	9ce7883a 	add	r19,r19,r19
    9508:	a3400504 	addi	r13,r20,20
    950c:	94a5883a 	add	r18,r18,r18
    9510:	34d9883a 	add	r12,r6,r19
    9514:	6c93883a 	add	r9,r13,r18
    9518:	3300422e 	bgeu	r6,r12,9624 <__multiply+0x1ac>
    951c:	37c00017 	ldw	ra,0(r6)
    9520:	fbffffcc 	andi	r15,ra,65535
    9524:	78001b26 	beq	r15,zero,9594 <__multiply+0x11c>
    9528:	5811883a 	mov	r8,r11
    952c:	681d883a 	mov	r14,r13
    9530:	000f883a 	mov	r7,zero
    9534:	71000017 	ldw	r4,0(r14)
    9538:	40c00017 	ldw	r3,0(r8)
    953c:	73800104 	addi	r14,r14,4
    9540:	217fffcc 	andi	r5,r4,65535
    9544:	2bcb383a 	mul	r5,r5,r15
    9548:	2008d43a 	srli	r4,r4,16
    954c:	1c7fffcc 	andi	r17,r3,65535
    9550:	2c4b883a 	add	r5,r5,r17
    9554:	29cb883a 	add	r5,r5,r7
    9558:	23c9383a 	mul	r4,r4,r15
    955c:	1806d43a 	srli	r3,r3,16
    9560:	280ed43a 	srli	r7,r5,16
    9564:	297fffcc 	andi	r5,r5,65535
    9568:	20c7883a 	add	r3,r4,r3
    956c:	19c7883a 	add	r3,r3,r7
    9570:	1808943a 	slli	r4,r3,16
    9574:	4023883a 	mov	r17,r8
    9578:	180ed43a 	srli	r7,r3,16
    957c:	214ab03a 	or	r5,r4,r5
    9580:	41400015 	stw	r5,0(r8)
    9584:	42000104 	addi	r8,r8,4
    9588:	727fea36 	bltu	r14,r9,9534 <__alt_data_end+0xff009534>
    958c:	89c00115 	stw	r7,4(r17)
    9590:	37c00017 	ldw	ra,0(r6)
    9594:	f83ed43a 	srli	ra,ra,16
    9598:	f8001f26 	beq	ra,zero,9618 <__multiply+0x1a0>
    959c:	58c00017 	ldw	r3,0(r11)
    95a0:	681d883a 	mov	r14,r13
    95a4:	581f883a 	mov	r15,r11
    95a8:	1811883a 	mov	r8,r3
    95ac:	5825883a 	mov	r18,r11
    95b0:	000f883a 	mov	r7,zero
    95b4:	00000106 	br	95bc <__multiply+0x144>
    95b8:	8825883a 	mov	r18,r17
    95bc:	7140000b 	ldhu	r5,0(r14)
    95c0:	4010d43a 	srli	r8,r8,16
    95c4:	193fffcc 	andi	r4,r3,65535
    95c8:	2fcb383a 	mul	r5,r5,ra
    95cc:	7bc00104 	addi	r15,r15,4
    95d0:	73800104 	addi	r14,r14,4
    95d4:	2a0b883a 	add	r5,r5,r8
    95d8:	29cb883a 	add	r5,r5,r7
    95dc:	2806943a 	slli	r3,r5,16
    95e0:	94400104 	addi	r17,r18,4
    95e4:	280ad43a 	srli	r5,r5,16
    95e8:	1908b03a 	or	r4,r3,r4
    95ec:	793fff15 	stw	r4,-4(r15)
    95f0:	70ffff17 	ldw	r3,-4(r14)
    95f4:	8a000017 	ldw	r8,0(r17)
    95f8:	1806d43a 	srli	r3,r3,16
    95fc:	413fffcc 	andi	r4,r8,65535
    9600:	1fc7383a 	mul	r3,r3,ra
    9604:	1907883a 	add	r3,r3,r4
    9608:	1947883a 	add	r3,r3,r5
    960c:	180ed43a 	srli	r7,r3,16
    9610:	727fe936 	bltu	r14,r9,95b8 <__alt_data_end+0xff0095b8>
    9614:	90c00115 	stw	r3,4(r18)
    9618:	31800104 	addi	r6,r6,4
    961c:	5ac00104 	addi	r11,r11,4
    9620:	333fbe36 	bltu	r6,r12,951c <__alt_data_end+0xff00951c>
    9624:	0400090e 	bge	zero,r16,964c <__multiply+0x1d4>
    9628:	50ffff17 	ldw	r3,-4(r10)
    962c:	52bfff04 	addi	r10,r10,-4
    9630:	18000326 	beq	r3,zero,9640 <__multiply+0x1c8>
    9634:	00000506 	br	964c <__multiply+0x1d4>
    9638:	50c00017 	ldw	r3,0(r10)
    963c:	1800031e 	bne	r3,zero,964c <__multiply+0x1d4>
    9640:	843fffc4 	addi	r16,r16,-1
    9644:	52bfff04 	addi	r10,r10,-4
    9648:	803ffb1e 	bne	r16,zero,9638 <__alt_data_end+0xff009638>
    964c:	14000415 	stw	r16,16(r2)
    9650:	dfc00517 	ldw	ra,20(sp)
    9654:	dd000417 	ldw	r20,16(sp)
    9658:	dcc00317 	ldw	r19,12(sp)
    965c:	dc800217 	ldw	r18,8(sp)
    9660:	dc400117 	ldw	r17,4(sp)
    9664:	dc000017 	ldw	r16,0(sp)
    9668:	dec00604 	addi	sp,sp,24
    966c:	f800283a 	ret

00009670 <__pow5mult>:
    9670:	defffa04 	addi	sp,sp,-24
    9674:	dcc00315 	stw	r19,12(sp)
    9678:	dc000015 	stw	r16,0(sp)
    967c:	dfc00515 	stw	ra,20(sp)
    9680:	dd000415 	stw	r20,16(sp)
    9684:	dc800215 	stw	r18,8(sp)
    9688:	dc400115 	stw	r17,4(sp)
    968c:	308000cc 	andi	r2,r6,3
    9690:	3021883a 	mov	r16,r6
    9694:	2027883a 	mov	r19,r4
    9698:	10002f1e 	bne	r2,zero,9758 <__pow5mult+0xe8>
    969c:	2825883a 	mov	r18,r5
    96a0:	8021d0ba 	srai	r16,r16,2
    96a4:	80001a26 	beq	r16,zero,9710 <__pow5mult+0xa0>
    96a8:	9c401217 	ldw	r17,72(r19)
    96ac:	8800061e 	bne	r17,zero,96c8 <__pow5mult+0x58>
    96b0:	00003406 	br	9784 <__pow5mult+0x114>
    96b4:	8021d07a 	srai	r16,r16,1
    96b8:	80001526 	beq	r16,zero,9710 <__pow5mult+0xa0>
    96bc:	88800017 	ldw	r2,0(r17)
    96c0:	10001c26 	beq	r2,zero,9734 <__pow5mult+0xc4>
    96c4:	1023883a 	mov	r17,r2
    96c8:	8080004c 	andi	r2,r16,1
    96cc:	103ff926 	beq	r2,zero,96b4 <__alt_data_end+0xff0096b4>
    96d0:	880d883a 	mov	r6,r17
    96d4:	900b883a 	mov	r5,r18
    96d8:	9809883a 	mov	r4,r19
    96dc:	00094780 	call	9478 <__multiply>
    96e0:	90001b26 	beq	r18,zero,9750 <__pow5mult+0xe0>
    96e4:	91000117 	ldw	r4,4(r18)
    96e8:	98c01317 	ldw	r3,76(r19)
    96ec:	8021d07a 	srai	r16,r16,1
    96f0:	2109883a 	add	r4,r4,r4
    96f4:	2109883a 	add	r4,r4,r4
    96f8:	1907883a 	add	r3,r3,r4
    96fc:	19000017 	ldw	r4,0(r3)
    9700:	91000015 	stw	r4,0(r18)
    9704:	1c800015 	stw	r18,0(r3)
    9708:	1025883a 	mov	r18,r2
    970c:	803feb1e 	bne	r16,zero,96bc <__alt_data_end+0xff0096bc>
    9710:	9005883a 	mov	r2,r18
    9714:	dfc00517 	ldw	ra,20(sp)
    9718:	dd000417 	ldw	r20,16(sp)
    971c:	dcc00317 	ldw	r19,12(sp)
    9720:	dc800217 	ldw	r18,8(sp)
    9724:	dc400117 	ldw	r17,4(sp)
    9728:	dc000017 	ldw	r16,0(sp)
    972c:	dec00604 	addi	sp,sp,24
    9730:	f800283a 	ret
    9734:	880d883a 	mov	r6,r17
    9738:	880b883a 	mov	r5,r17
    973c:	9809883a 	mov	r4,r19
    9740:	00094780 	call	9478 <__multiply>
    9744:	88800015 	stw	r2,0(r17)
    9748:	10000015 	stw	zero,0(r2)
    974c:	003fdd06 	br	96c4 <__alt_data_end+0xff0096c4>
    9750:	1025883a 	mov	r18,r2
    9754:	003fd706 	br	96b4 <__alt_data_end+0xff0096b4>
    9758:	10bfffc4 	addi	r2,r2,-1
    975c:	1085883a 	add	r2,r2,r2
    9760:	00c00074 	movhi	r3,1
    9764:	18c88404 	addi	r3,r3,8720
    9768:	1085883a 	add	r2,r2,r2
    976c:	1885883a 	add	r2,r3,r2
    9770:	11800017 	ldw	r6,0(r2)
    9774:	000f883a 	mov	r7,zero
    9778:	00091000 	call	9100 <__multadd>
    977c:	1025883a 	mov	r18,r2
    9780:	003fc706 	br	96a0 <__alt_data_end+0xff0096a0>
    9784:	05000044 	movi	r20,1
    9788:	a00b883a 	mov	r5,r20
    978c:	9809883a 	mov	r4,r19
    9790:	00090300 	call	9030 <_Balloc>
    9794:	1023883a 	mov	r17,r2
    9798:	00809c44 	movi	r2,625
    979c:	88800515 	stw	r2,20(r17)
    97a0:	8d000415 	stw	r20,16(r17)
    97a4:	9c401215 	stw	r17,72(r19)
    97a8:	88000015 	stw	zero,0(r17)
    97ac:	003fc606 	br	96c8 <__alt_data_end+0xff0096c8>

000097b0 <__lshift>:
    97b0:	defff904 	addi	sp,sp,-28
    97b4:	dd400515 	stw	r21,20(sp)
    97b8:	dcc00315 	stw	r19,12(sp)
    97bc:	302bd17a 	srai	r21,r6,5
    97c0:	2cc00417 	ldw	r19,16(r5)
    97c4:	28800217 	ldw	r2,8(r5)
    97c8:	dd000415 	stw	r20,16(sp)
    97cc:	ace7883a 	add	r19,r21,r19
    97d0:	dc800215 	stw	r18,8(sp)
    97d4:	dc400115 	stw	r17,4(sp)
    97d8:	dc000015 	stw	r16,0(sp)
    97dc:	dfc00615 	stw	ra,24(sp)
    97e0:	9c000044 	addi	r16,r19,1
    97e4:	2823883a 	mov	r17,r5
    97e8:	3029883a 	mov	r20,r6
    97ec:	2025883a 	mov	r18,r4
    97f0:	29400117 	ldw	r5,4(r5)
    97f4:	1400030e 	bge	r2,r16,9804 <__lshift+0x54>
    97f8:	1085883a 	add	r2,r2,r2
    97fc:	29400044 	addi	r5,r5,1
    9800:	143ffd16 	blt	r2,r16,97f8 <__alt_data_end+0xff0097f8>
    9804:	9009883a 	mov	r4,r18
    9808:	00090300 	call	9030 <_Balloc>
    980c:	10c00504 	addi	r3,r2,20
    9810:	0540070e 	bge	zero,r21,9830 <__lshift+0x80>
    9814:	ad6b883a 	add	r21,r21,r21
    9818:	ad6b883a 	add	r21,r21,r21
    981c:	1809883a 	mov	r4,r3
    9820:	1d47883a 	add	r3,r3,r21
    9824:	20000015 	stw	zero,0(r4)
    9828:	21000104 	addi	r4,r4,4
    982c:	193ffd1e 	bne	r3,r4,9824 <__alt_data_end+0xff009824>
    9830:	8a000417 	ldw	r8,16(r17)
    9834:	89000504 	addi	r4,r17,20
    9838:	a18007cc 	andi	r6,r20,31
    983c:	4211883a 	add	r8,r8,r8
    9840:	4211883a 	add	r8,r8,r8
    9844:	2211883a 	add	r8,r4,r8
    9848:	30002326 	beq	r6,zero,98d8 <__lshift+0x128>
    984c:	02400804 	movi	r9,32
    9850:	4993c83a 	sub	r9,r9,r6
    9854:	000b883a 	mov	r5,zero
    9858:	21c00017 	ldw	r7,0(r4)
    985c:	1815883a 	mov	r10,r3
    9860:	18c00104 	addi	r3,r3,4
    9864:	398e983a 	sll	r7,r7,r6
    9868:	21000104 	addi	r4,r4,4
    986c:	394ab03a 	or	r5,r7,r5
    9870:	197fff15 	stw	r5,-4(r3)
    9874:	217fff17 	ldw	r5,-4(r4)
    9878:	2a4ad83a 	srl	r5,r5,r9
    987c:	223ff636 	bltu	r4,r8,9858 <__alt_data_end+0xff009858>
    9880:	51400115 	stw	r5,4(r10)
    9884:	28001a1e 	bne	r5,zero,98f0 <__lshift+0x140>
    9888:	843fffc4 	addi	r16,r16,-1
    988c:	14000415 	stw	r16,16(r2)
    9890:	88000826 	beq	r17,zero,98b4 <__lshift+0x104>
    9894:	89000117 	ldw	r4,4(r17)
    9898:	90c01317 	ldw	r3,76(r18)
    989c:	2109883a 	add	r4,r4,r4
    98a0:	2109883a 	add	r4,r4,r4
    98a4:	1907883a 	add	r3,r3,r4
    98a8:	19000017 	ldw	r4,0(r3)
    98ac:	89000015 	stw	r4,0(r17)
    98b0:	1c400015 	stw	r17,0(r3)
    98b4:	dfc00617 	ldw	ra,24(sp)
    98b8:	dd400517 	ldw	r21,20(sp)
    98bc:	dd000417 	ldw	r20,16(sp)
    98c0:	dcc00317 	ldw	r19,12(sp)
    98c4:	dc800217 	ldw	r18,8(sp)
    98c8:	dc400117 	ldw	r17,4(sp)
    98cc:	dc000017 	ldw	r16,0(sp)
    98d0:	dec00704 	addi	sp,sp,28
    98d4:	f800283a 	ret
    98d8:	21400017 	ldw	r5,0(r4)
    98dc:	18c00104 	addi	r3,r3,4
    98e0:	21000104 	addi	r4,r4,4
    98e4:	197fff15 	stw	r5,-4(r3)
    98e8:	223ffb36 	bltu	r4,r8,98d8 <__alt_data_end+0xff0098d8>
    98ec:	003fe606 	br	9888 <__alt_data_end+0xff009888>
    98f0:	9c000084 	addi	r16,r19,2
    98f4:	003fe406 	br	9888 <__alt_data_end+0xff009888>

000098f8 <__mcmp>:
    98f8:	20800417 	ldw	r2,16(r4)
    98fc:	28c00417 	ldw	r3,16(r5)
    9900:	10c5c83a 	sub	r2,r2,r3
    9904:	1000111e 	bne	r2,zero,994c <__mcmp+0x54>
    9908:	18c7883a 	add	r3,r3,r3
    990c:	18c7883a 	add	r3,r3,r3
    9910:	21000504 	addi	r4,r4,20
    9914:	29400504 	addi	r5,r5,20
    9918:	20c5883a 	add	r2,r4,r3
    991c:	28cb883a 	add	r5,r5,r3
    9920:	00000106 	br	9928 <__mcmp+0x30>
    9924:	20800a2e 	bgeu	r4,r2,9950 <__mcmp+0x58>
    9928:	10bfff04 	addi	r2,r2,-4
    992c:	297fff04 	addi	r5,r5,-4
    9930:	11800017 	ldw	r6,0(r2)
    9934:	28c00017 	ldw	r3,0(r5)
    9938:	30fffa26 	beq	r6,r3,9924 <__alt_data_end+0xff009924>
    993c:	30c00236 	bltu	r6,r3,9948 <__mcmp+0x50>
    9940:	00800044 	movi	r2,1
    9944:	f800283a 	ret
    9948:	00bfffc4 	movi	r2,-1
    994c:	f800283a 	ret
    9950:	0005883a 	mov	r2,zero
    9954:	f800283a 	ret

00009958 <__mdiff>:
    9958:	28c00417 	ldw	r3,16(r5)
    995c:	30800417 	ldw	r2,16(r6)
    9960:	defffa04 	addi	sp,sp,-24
    9964:	dcc00315 	stw	r19,12(sp)
    9968:	dc800215 	stw	r18,8(sp)
    996c:	dfc00515 	stw	ra,20(sp)
    9970:	dd000415 	stw	r20,16(sp)
    9974:	dc400115 	stw	r17,4(sp)
    9978:	dc000015 	stw	r16,0(sp)
    997c:	1887c83a 	sub	r3,r3,r2
    9980:	2825883a 	mov	r18,r5
    9984:	3027883a 	mov	r19,r6
    9988:	1800141e 	bne	r3,zero,99dc <__mdiff+0x84>
    998c:	1085883a 	add	r2,r2,r2
    9990:	1085883a 	add	r2,r2,r2
    9994:	2a000504 	addi	r8,r5,20
    9998:	34000504 	addi	r16,r6,20
    999c:	4087883a 	add	r3,r8,r2
    99a0:	8085883a 	add	r2,r16,r2
    99a4:	00000106 	br	99ac <__mdiff+0x54>
    99a8:	40c0592e 	bgeu	r8,r3,9b10 <__mdiff+0x1b8>
    99ac:	18ffff04 	addi	r3,r3,-4
    99b0:	10bfff04 	addi	r2,r2,-4
    99b4:	19c00017 	ldw	r7,0(r3)
    99b8:	11400017 	ldw	r5,0(r2)
    99bc:	397ffa26 	beq	r7,r5,99a8 <__alt_data_end+0xff0099a8>
    99c0:	3940592e 	bgeu	r7,r5,9b28 <__mdiff+0x1d0>
    99c4:	9005883a 	mov	r2,r18
    99c8:	4023883a 	mov	r17,r8
    99cc:	9825883a 	mov	r18,r19
    99d0:	05000044 	movi	r20,1
    99d4:	1027883a 	mov	r19,r2
    99d8:	00000406 	br	99ec <__mdiff+0x94>
    99dc:	18005616 	blt	r3,zero,9b38 <__mdiff+0x1e0>
    99e0:	34400504 	addi	r17,r6,20
    99e4:	2c000504 	addi	r16,r5,20
    99e8:	0029883a 	mov	r20,zero
    99ec:	91400117 	ldw	r5,4(r18)
    99f0:	00090300 	call	9030 <_Balloc>
    99f4:	92400417 	ldw	r9,16(r18)
    99f8:	9b000417 	ldw	r12,16(r19)
    99fc:	12c00504 	addi	r11,r2,20
    9a00:	4a51883a 	add	r8,r9,r9
    9a04:	6319883a 	add	r12,r12,r12
    9a08:	4211883a 	add	r8,r8,r8
    9a0c:	6319883a 	add	r12,r12,r12
    9a10:	15000315 	stw	r20,12(r2)
    9a14:	8211883a 	add	r8,r16,r8
    9a18:	8b19883a 	add	r12,r17,r12
    9a1c:	0007883a 	mov	r3,zero
    9a20:	81400017 	ldw	r5,0(r16)
    9a24:	89c00017 	ldw	r7,0(r17)
    9a28:	59800104 	addi	r6,r11,4
    9a2c:	293fffcc 	andi	r4,r5,65535
    9a30:	20c7883a 	add	r3,r4,r3
    9a34:	393fffcc 	andi	r4,r7,65535
    9a38:	1909c83a 	sub	r4,r3,r4
    9a3c:	280ad43a 	srli	r5,r5,16
    9a40:	380ed43a 	srli	r7,r7,16
    9a44:	2007d43a 	srai	r3,r4,16
    9a48:	213fffcc 	andi	r4,r4,65535
    9a4c:	29cbc83a 	sub	r5,r5,r7
    9a50:	28c7883a 	add	r3,r5,r3
    9a54:	180a943a 	slli	r5,r3,16
    9a58:	8c400104 	addi	r17,r17,4
    9a5c:	84000104 	addi	r16,r16,4
    9a60:	2908b03a 	or	r4,r5,r4
    9a64:	59000015 	stw	r4,0(r11)
    9a68:	1807d43a 	srai	r3,r3,16
    9a6c:	3015883a 	mov	r10,r6
    9a70:	3017883a 	mov	r11,r6
    9a74:	8b3fea36 	bltu	r17,r12,9a20 <__alt_data_end+0xff009a20>
    9a78:	8200162e 	bgeu	r16,r8,9ad4 <__mdiff+0x17c>
    9a7c:	8017883a 	mov	r11,r16
    9a80:	59400017 	ldw	r5,0(r11)
    9a84:	31800104 	addi	r6,r6,4
    9a88:	5ac00104 	addi	r11,r11,4
    9a8c:	293fffcc 	andi	r4,r5,65535
    9a90:	20c7883a 	add	r3,r4,r3
    9a94:	280ed43a 	srli	r7,r5,16
    9a98:	180bd43a 	srai	r5,r3,16
    9a9c:	193fffcc 	andi	r4,r3,65535
    9aa0:	3947883a 	add	r3,r7,r5
    9aa4:	180a943a 	slli	r5,r3,16
    9aa8:	1807d43a 	srai	r3,r3,16
    9aac:	2908b03a 	or	r4,r5,r4
    9ab0:	313fff15 	stw	r4,-4(r6)
    9ab4:	5a3ff236 	bltu	r11,r8,9a80 <__alt_data_end+0xff009a80>
    9ab8:	0406303a 	nor	r3,zero,r16
    9abc:	1a07883a 	add	r3,r3,r8
    9ac0:	1806d0ba 	srli	r3,r3,2
    9ac4:	18c00044 	addi	r3,r3,1
    9ac8:	18c7883a 	add	r3,r3,r3
    9acc:	18c7883a 	add	r3,r3,r3
    9ad0:	50d5883a 	add	r10,r10,r3
    9ad4:	50ffff04 	addi	r3,r10,-4
    9ad8:	2000041e 	bne	r4,zero,9aec <__mdiff+0x194>
    9adc:	18ffff04 	addi	r3,r3,-4
    9ae0:	19000017 	ldw	r4,0(r3)
    9ae4:	4a7fffc4 	addi	r9,r9,-1
    9ae8:	203ffc26 	beq	r4,zero,9adc <__alt_data_end+0xff009adc>
    9aec:	12400415 	stw	r9,16(r2)
    9af0:	dfc00517 	ldw	ra,20(sp)
    9af4:	dd000417 	ldw	r20,16(sp)
    9af8:	dcc00317 	ldw	r19,12(sp)
    9afc:	dc800217 	ldw	r18,8(sp)
    9b00:	dc400117 	ldw	r17,4(sp)
    9b04:	dc000017 	ldw	r16,0(sp)
    9b08:	dec00604 	addi	sp,sp,24
    9b0c:	f800283a 	ret
    9b10:	000b883a 	mov	r5,zero
    9b14:	00090300 	call	9030 <_Balloc>
    9b18:	00c00044 	movi	r3,1
    9b1c:	10c00415 	stw	r3,16(r2)
    9b20:	10000515 	stw	zero,20(r2)
    9b24:	003ff206 	br	9af0 <__alt_data_end+0xff009af0>
    9b28:	8023883a 	mov	r17,r16
    9b2c:	0029883a 	mov	r20,zero
    9b30:	4021883a 	mov	r16,r8
    9b34:	003fad06 	br	99ec <__alt_data_end+0xff0099ec>
    9b38:	9005883a 	mov	r2,r18
    9b3c:	94400504 	addi	r17,r18,20
    9b40:	9c000504 	addi	r16,r19,20
    9b44:	9825883a 	mov	r18,r19
    9b48:	05000044 	movi	r20,1
    9b4c:	1027883a 	mov	r19,r2
    9b50:	003fa606 	br	99ec <__alt_data_end+0xff0099ec>

00009b54 <__ulp>:
    9b54:	295ffc2c 	andhi	r5,r5,32752
    9b58:	00bf3034 	movhi	r2,64704
    9b5c:	2887883a 	add	r3,r5,r2
    9b60:	00c0020e 	bge	zero,r3,9b6c <__ulp+0x18>
    9b64:	0005883a 	mov	r2,zero
    9b68:	f800283a 	ret
    9b6c:	00c7c83a 	sub	r3,zero,r3
    9b70:	1807d53a 	srai	r3,r3,20
    9b74:	008004c4 	movi	r2,19
    9b78:	10c00b0e 	bge	r2,r3,9ba8 <__ulp+0x54>
    9b7c:	18bffb04 	addi	r2,r3,-20
    9b80:	01000784 	movi	r4,30
    9b84:	0007883a 	mov	r3,zero
    9b88:	20800516 	blt	r4,r2,9ba0 <__ulp+0x4c>
    9b8c:	010007c4 	movi	r4,31
    9b90:	2089c83a 	sub	r4,r4,r2
    9b94:	00800044 	movi	r2,1
    9b98:	1104983a 	sll	r2,r2,r4
    9b9c:	f800283a 	ret
    9ba0:	00800044 	movi	r2,1
    9ba4:	f800283a 	ret
    9ba8:	01400234 	movhi	r5,8
    9bac:	28c7d83a 	sra	r3,r5,r3
    9bb0:	0005883a 	mov	r2,zero
    9bb4:	f800283a 	ret

00009bb8 <__b2d>:
    9bb8:	defffa04 	addi	sp,sp,-24
    9bbc:	dc000015 	stw	r16,0(sp)
    9bc0:	24000417 	ldw	r16,16(r4)
    9bc4:	dc400115 	stw	r17,4(sp)
    9bc8:	24400504 	addi	r17,r4,20
    9bcc:	8421883a 	add	r16,r16,r16
    9bd0:	8421883a 	add	r16,r16,r16
    9bd4:	8c21883a 	add	r16,r17,r16
    9bd8:	dc800215 	stw	r18,8(sp)
    9bdc:	84bfff17 	ldw	r18,-4(r16)
    9be0:	dd000415 	stw	r20,16(sp)
    9be4:	dcc00315 	stw	r19,12(sp)
    9be8:	9009883a 	mov	r4,r18
    9bec:	2829883a 	mov	r20,r5
    9bf0:	dfc00515 	stw	ra,20(sp)
    9bf4:	00093240 	call	9324 <__hi0bits>
    9bf8:	00c00804 	movi	r3,32
    9bfc:	1889c83a 	sub	r4,r3,r2
    9c00:	a1000015 	stw	r4,0(r20)
    9c04:	01000284 	movi	r4,10
    9c08:	84ffff04 	addi	r19,r16,-4
    9c0c:	20801216 	blt	r4,r2,9c58 <__b2d+0xa0>
    9c10:	018002c4 	movi	r6,11
    9c14:	308dc83a 	sub	r6,r6,r2
    9c18:	9186d83a 	srl	r3,r18,r6
    9c1c:	18cffc34 	orhi	r3,r3,16368
    9c20:	8cc0212e 	bgeu	r17,r19,9ca8 <__b2d+0xf0>
    9c24:	813ffe17 	ldw	r4,-8(r16)
    9c28:	218cd83a 	srl	r6,r4,r6
    9c2c:	10800544 	addi	r2,r2,21
    9c30:	9084983a 	sll	r2,r18,r2
    9c34:	1184b03a 	or	r2,r2,r6
    9c38:	dfc00517 	ldw	ra,20(sp)
    9c3c:	dd000417 	ldw	r20,16(sp)
    9c40:	dcc00317 	ldw	r19,12(sp)
    9c44:	dc800217 	ldw	r18,8(sp)
    9c48:	dc400117 	ldw	r17,4(sp)
    9c4c:	dc000017 	ldw	r16,0(sp)
    9c50:	dec00604 	addi	sp,sp,24
    9c54:	f800283a 	ret
    9c58:	8cc00f2e 	bgeu	r17,r19,9c98 <__b2d+0xe0>
    9c5c:	117ffd44 	addi	r5,r2,-11
    9c60:	80bffe17 	ldw	r2,-8(r16)
    9c64:	28000e26 	beq	r5,zero,9ca0 <__b2d+0xe8>
    9c68:	1949c83a 	sub	r4,r3,r5
    9c6c:	9164983a 	sll	r18,r18,r5
    9c70:	1106d83a 	srl	r3,r2,r4
    9c74:	81bffe04 	addi	r6,r16,-8
    9c78:	948ffc34 	orhi	r18,r18,16368
    9c7c:	90c6b03a 	or	r3,r18,r3
    9c80:	89800e2e 	bgeu	r17,r6,9cbc <__b2d+0x104>
    9c84:	81bffd17 	ldw	r6,-12(r16)
    9c88:	1144983a 	sll	r2,r2,r5
    9c8c:	310ad83a 	srl	r5,r6,r4
    9c90:	2884b03a 	or	r2,r5,r2
    9c94:	003fe806 	br	9c38 <__alt_data_end+0xff009c38>
    9c98:	10bffd44 	addi	r2,r2,-11
    9c9c:	1000041e 	bne	r2,zero,9cb0 <__b2d+0xf8>
    9ca0:	90cffc34 	orhi	r3,r18,16368
    9ca4:	003fe406 	br	9c38 <__alt_data_end+0xff009c38>
    9ca8:	000d883a 	mov	r6,zero
    9cac:	003fdf06 	br	9c2c <__alt_data_end+0xff009c2c>
    9cb0:	90a4983a 	sll	r18,r18,r2
    9cb4:	0005883a 	mov	r2,zero
    9cb8:	003ff906 	br	9ca0 <__alt_data_end+0xff009ca0>
    9cbc:	1144983a 	sll	r2,r2,r5
    9cc0:	003fdd06 	br	9c38 <__alt_data_end+0xff009c38>

00009cc4 <__d2b>:
    9cc4:	defff804 	addi	sp,sp,-32
    9cc8:	dc000215 	stw	r16,8(sp)
    9ccc:	3021883a 	mov	r16,r6
    9cd0:	dc400315 	stw	r17,12(sp)
    9cd4:	8022907a 	slli	r17,r16,1
    9cd8:	dd000615 	stw	r20,24(sp)
    9cdc:	2829883a 	mov	r20,r5
    9ce0:	01400044 	movi	r5,1
    9ce4:	dcc00515 	stw	r19,20(sp)
    9ce8:	dc800415 	stw	r18,16(sp)
    9cec:	dfc00715 	stw	ra,28(sp)
    9cf0:	3825883a 	mov	r18,r7
    9cf4:	8822d57a 	srli	r17,r17,21
    9cf8:	00090300 	call	9030 <_Balloc>
    9cfc:	1027883a 	mov	r19,r2
    9d00:	00800434 	movhi	r2,16
    9d04:	10bfffc4 	addi	r2,r2,-1
    9d08:	808c703a 	and	r6,r16,r2
    9d0c:	88000126 	beq	r17,zero,9d14 <__d2b+0x50>
    9d10:	31800434 	orhi	r6,r6,16
    9d14:	d9800015 	stw	r6,0(sp)
    9d18:	a0002426 	beq	r20,zero,9dac <__d2b+0xe8>
    9d1c:	d9000104 	addi	r4,sp,4
    9d20:	dd000115 	stw	r20,4(sp)
    9d24:	000938c0 	call	938c <__lo0bits>
    9d28:	d8c00017 	ldw	r3,0(sp)
    9d2c:	10002f1e 	bne	r2,zero,9dec <__d2b+0x128>
    9d30:	d9000117 	ldw	r4,4(sp)
    9d34:	99000515 	stw	r4,20(r19)
    9d38:	1821003a 	cmpeq	r16,r3,zero
    9d3c:	01000084 	movi	r4,2
    9d40:	2421c83a 	sub	r16,r4,r16
    9d44:	98c00615 	stw	r3,24(r19)
    9d48:	9c000415 	stw	r16,16(r19)
    9d4c:	88001f1e 	bne	r17,zero,9dcc <__d2b+0x108>
    9d50:	10bef384 	addi	r2,r2,-1074
    9d54:	90800015 	stw	r2,0(r18)
    9d58:	00900034 	movhi	r2,16384
    9d5c:	10bfffc4 	addi	r2,r2,-1
    9d60:	8085883a 	add	r2,r16,r2
    9d64:	1085883a 	add	r2,r2,r2
    9d68:	1085883a 	add	r2,r2,r2
    9d6c:	9885883a 	add	r2,r19,r2
    9d70:	11000517 	ldw	r4,20(r2)
    9d74:	8020917a 	slli	r16,r16,5
    9d78:	00093240 	call	9324 <__hi0bits>
    9d7c:	d8c00817 	ldw	r3,32(sp)
    9d80:	8085c83a 	sub	r2,r16,r2
    9d84:	18800015 	stw	r2,0(r3)
    9d88:	9805883a 	mov	r2,r19
    9d8c:	dfc00717 	ldw	ra,28(sp)
    9d90:	dd000617 	ldw	r20,24(sp)
    9d94:	dcc00517 	ldw	r19,20(sp)
    9d98:	dc800417 	ldw	r18,16(sp)
    9d9c:	dc400317 	ldw	r17,12(sp)
    9da0:	dc000217 	ldw	r16,8(sp)
    9da4:	dec00804 	addi	sp,sp,32
    9da8:	f800283a 	ret
    9dac:	d809883a 	mov	r4,sp
    9db0:	000938c0 	call	938c <__lo0bits>
    9db4:	d8c00017 	ldw	r3,0(sp)
    9db8:	04000044 	movi	r16,1
    9dbc:	9c000415 	stw	r16,16(r19)
    9dc0:	98c00515 	stw	r3,20(r19)
    9dc4:	10800804 	addi	r2,r2,32
    9dc8:	883fe126 	beq	r17,zero,9d50 <__alt_data_end+0xff009d50>
    9dcc:	00c00d44 	movi	r3,53
    9dd0:	8c7ef344 	addi	r17,r17,-1075
    9dd4:	88a3883a 	add	r17,r17,r2
    9dd8:	1885c83a 	sub	r2,r3,r2
    9ddc:	d8c00817 	ldw	r3,32(sp)
    9de0:	94400015 	stw	r17,0(r18)
    9de4:	18800015 	stw	r2,0(r3)
    9de8:	003fe706 	br	9d88 <__alt_data_end+0xff009d88>
    9dec:	01000804 	movi	r4,32
    9df0:	2089c83a 	sub	r4,r4,r2
    9df4:	1908983a 	sll	r4,r3,r4
    9df8:	d9400117 	ldw	r5,4(sp)
    9dfc:	1886d83a 	srl	r3,r3,r2
    9e00:	2148b03a 	or	r4,r4,r5
    9e04:	99000515 	stw	r4,20(r19)
    9e08:	d8c00015 	stw	r3,0(sp)
    9e0c:	003fca06 	br	9d38 <__alt_data_end+0xff009d38>

00009e10 <__ratio>:
    9e10:	defff904 	addi	sp,sp,-28
    9e14:	dc400315 	stw	r17,12(sp)
    9e18:	2823883a 	mov	r17,r5
    9e1c:	d9400104 	addi	r5,sp,4
    9e20:	dfc00615 	stw	ra,24(sp)
    9e24:	dcc00515 	stw	r19,20(sp)
    9e28:	dc800415 	stw	r18,16(sp)
    9e2c:	2027883a 	mov	r19,r4
    9e30:	dc000215 	stw	r16,8(sp)
    9e34:	0009bb80 	call	9bb8 <__b2d>
    9e38:	d80b883a 	mov	r5,sp
    9e3c:	8809883a 	mov	r4,r17
    9e40:	1025883a 	mov	r18,r2
    9e44:	1821883a 	mov	r16,r3
    9e48:	0009bb80 	call	9bb8 <__b2d>
    9e4c:	8a000417 	ldw	r8,16(r17)
    9e50:	99000417 	ldw	r4,16(r19)
    9e54:	d9400117 	ldw	r5,4(sp)
    9e58:	2209c83a 	sub	r4,r4,r8
    9e5c:	2010917a 	slli	r8,r4,5
    9e60:	d9000017 	ldw	r4,0(sp)
    9e64:	2909c83a 	sub	r4,r5,r4
    9e68:	4109883a 	add	r4,r8,r4
    9e6c:	01000e0e 	bge	zero,r4,9ea8 <__ratio+0x98>
    9e70:	2008953a 	slli	r4,r4,20
    9e74:	2421883a 	add	r16,r4,r16
    9e78:	100d883a 	mov	r6,r2
    9e7c:	180f883a 	mov	r7,r3
    9e80:	9009883a 	mov	r4,r18
    9e84:	800b883a 	mov	r5,r16
    9e88:	00027280 	call	2728 <__divdf3>
    9e8c:	dfc00617 	ldw	ra,24(sp)
    9e90:	dcc00517 	ldw	r19,20(sp)
    9e94:	dc800417 	ldw	r18,16(sp)
    9e98:	dc400317 	ldw	r17,12(sp)
    9e9c:	dc000217 	ldw	r16,8(sp)
    9ea0:	dec00704 	addi	sp,sp,28
    9ea4:	f800283a 	ret
    9ea8:	2008953a 	slli	r4,r4,20
    9eac:	1907c83a 	sub	r3,r3,r4
    9eb0:	003ff106 	br	9e78 <__alt_data_end+0xff009e78>

00009eb4 <_mprec_log10>:
    9eb4:	defffe04 	addi	sp,sp,-8
    9eb8:	dc000015 	stw	r16,0(sp)
    9ebc:	dfc00115 	stw	ra,4(sp)
    9ec0:	008005c4 	movi	r2,23
    9ec4:	2021883a 	mov	r16,r4
    9ec8:	11000d0e 	bge	r2,r4,9f00 <_mprec_log10+0x4c>
    9ecc:	0005883a 	mov	r2,zero
    9ed0:	00cffc34 	movhi	r3,16368
    9ed4:	843fffc4 	addi	r16,r16,-1
    9ed8:	000d883a 	mov	r6,zero
    9edc:	01d00934 	movhi	r7,16420
    9ee0:	1009883a 	mov	r4,r2
    9ee4:	180b883a 	mov	r5,r3
    9ee8:	000dd4c0 	call	dd4c <__muldf3>
    9eec:	803ff91e 	bne	r16,zero,9ed4 <__alt_data_end+0xff009ed4>
    9ef0:	dfc00117 	ldw	ra,4(sp)
    9ef4:	dc000017 	ldw	r16,0(sp)
    9ef8:	dec00204 	addi	sp,sp,8
    9efc:	f800283a 	ret
    9f00:	202090fa 	slli	r16,r4,3
    9f04:	00800074 	movhi	r2,1
    9f08:	10889b04 	addi	r2,r2,8812
    9f0c:	1421883a 	add	r16,r2,r16
    9f10:	80800017 	ldw	r2,0(r16)
    9f14:	80c00117 	ldw	r3,4(r16)
    9f18:	dfc00117 	ldw	ra,4(sp)
    9f1c:	dc000017 	ldw	r16,0(sp)
    9f20:	dec00204 	addi	sp,sp,8
    9f24:	f800283a 	ret

00009f28 <__copybits>:
    9f28:	297fffc4 	addi	r5,r5,-1
    9f2c:	280fd17a 	srai	r7,r5,5
    9f30:	30c00417 	ldw	r3,16(r6)
    9f34:	30800504 	addi	r2,r6,20
    9f38:	39c00044 	addi	r7,r7,1
    9f3c:	18c7883a 	add	r3,r3,r3
    9f40:	39cf883a 	add	r7,r7,r7
    9f44:	18c7883a 	add	r3,r3,r3
    9f48:	39cf883a 	add	r7,r7,r7
    9f4c:	10c7883a 	add	r3,r2,r3
    9f50:	21cf883a 	add	r7,r4,r7
    9f54:	10c00d2e 	bgeu	r2,r3,9f8c <__copybits+0x64>
    9f58:	200b883a 	mov	r5,r4
    9f5c:	12000017 	ldw	r8,0(r2)
    9f60:	29400104 	addi	r5,r5,4
    9f64:	10800104 	addi	r2,r2,4
    9f68:	2a3fff15 	stw	r8,-4(r5)
    9f6c:	10fffb36 	bltu	r2,r3,9f5c <__alt_data_end+0xff009f5c>
    9f70:	1985c83a 	sub	r2,r3,r6
    9f74:	10bffac4 	addi	r2,r2,-21
    9f78:	1004d0ba 	srli	r2,r2,2
    9f7c:	10800044 	addi	r2,r2,1
    9f80:	1085883a 	add	r2,r2,r2
    9f84:	1085883a 	add	r2,r2,r2
    9f88:	2089883a 	add	r4,r4,r2
    9f8c:	21c0032e 	bgeu	r4,r7,9f9c <__copybits+0x74>
    9f90:	20000015 	stw	zero,0(r4)
    9f94:	21000104 	addi	r4,r4,4
    9f98:	21fffd36 	bltu	r4,r7,9f90 <__alt_data_end+0xff009f90>
    9f9c:	f800283a 	ret

00009fa0 <__any_on>:
    9fa0:	20c00417 	ldw	r3,16(r4)
    9fa4:	2805d17a 	srai	r2,r5,5
    9fa8:	21000504 	addi	r4,r4,20
    9fac:	18800d0e 	bge	r3,r2,9fe4 <__any_on+0x44>
    9fb0:	18c7883a 	add	r3,r3,r3
    9fb4:	18c7883a 	add	r3,r3,r3
    9fb8:	20c7883a 	add	r3,r4,r3
    9fbc:	20c0192e 	bgeu	r4,r3,a024 <__any_on+0x84>
    9fc0:	18bfff17 	ldw	r2,-4(r3)
    9fc4:	18ffff04 	addi	r3,r3,-4
    9fc8:	1000041e 	bne	r2,zero,9fdc <__any_on+0x3c>
    9fcc:	20c0142e 	bgeu	r4,r3,a020 <__any_on+0x80>
    9fd0:	18ffff04 	addi	r3,r3,-4
    9fd4:	19400017 	ldw	r5,0(r3)
    9fd8:	283ffc26 	beq	r5,zero,9fcc <__alt_data_end+0xff009fcc>
    9fdc:	00800044 	movi	r2,1
    9fe0:	f800283a 	ret
    9fe4:	10c00a0e 	bge	r2,r3,a010 <__any_on+0x70>
    9fe8:	1085883a 	add	r2,r2,r2
    9fec:	1085883a 	add	r2,r2,r2
    9ff0:	294007cc 	andi	r5,r5,31
    9ff4:	2087883a 	add	r3,r4,r2
    9ff8:	283ff026 	beq	r5,zero,9fbc <__alt_data_end+0xff009fbc>
    9ffc:	19800017 	ldw	r6,0(r3)
    a000:	3144d83a 	srl	r2,r6,r5
    a004:	114a983a 	sll	r5,r2,r5
    a008:	317ff41e 	bne	r6,r5,9fdc <__alt_data_end+0xff009fdc>
    a00c:	003feb06 	br	9fbc <__alt_data_end+0xff009fbc>
    a010:	1085883a 	add	r2,r2,r2
    a014:	1085883a 	add	r2,r2,r2
    a018:	2087883a 	add	r3,r4,r2
    a01c:	003fe706 	br	9fbc <__alt_data_end+0xff009fbc>
    a020:	f800283a 	ret
    a024:	0005883a 	mov	r2,zero
    a028:	f800283a 	ret

0000a02c <_realloc_r>:
    a02c:	defff604 	addi	sp,sp,-40
    a030:	dc800215 	stw	r18,8(sp)
    a034:	dfc00915 	stw	ra,36(sp)
    a038:	df000815 	stw	fp,32(sp)
    a03c:	ddc00715 	stw	r23,28(sp)
    a040:	dd800615 	stw	r22,24(sp)
    a044:	dd400515 	stw	r21,20(sp)
    a048:	dd000415 	stw	r20,16(sp)
    a04c:	dcc00315 	stw	r19,12(sp)
    a050:	dc400115 	stw	r17,4(sp)
    a054:	dc000015 	stw	r16,0(sp)
    a058:	3025883a 	mov	r18,r6
    a05c:	2800b726 	beq	r5,zero,a33c <_realloc_r+0x310>
    a060:	282b883a 	mov	r21,r5
    a064:	2029883a 	mov	r20,r4
    a068:	000f4380 	call	f438 <__malloc_lock>
    a06c:	a8bfff17 	ldw	r2,-4(r21)
    a070:	043fff04 	movi	r16,-4
    a074:	90c002c4 	addi	r3,r18,11
    a078:	01000584 	movi	r4,22
    a07c:	acfffe04 	addi	r19,r21,-8
    a080:	1420703a 	and	r16,r2,r16
    a084:	20c0332e 	bgeu	r4,r3,a154 <_realloc_r+0x128>
    a088:	047ffe04 	movi	r17,-8
    a08c:	1c62703a 	and	r17,r3,r17
    a090:	8807883a 	mov	r3,r17
    a094:	88005816 	blt	r17,zero,a1f8 <_realloc_r+0x1cc>
    a098:	8c805736 	bltu	r17,r18,a1f8 <_realloc_r+0x1cc>
    a09c:	80c0300e 	bge	r16,r3,a160 <_realloc_r+0x134>
    a0a0:	07000074 	movhi	fp,1
    a0a4:	e7092004 	addi	fp,fp,9344
    a0a8:	e1c00217 	ldw	r7,8(fp)
    a0ac:	9c09883a 	add	r4,r19,r16
    a0b0:	22000117 	ldw	r8,4(r4)
    a0b4:	21c06326 	beq	r4,r7,a244 <_realloc_r+0x218>
    a0b8:	017fff84 	movi	r5,-2
    a0bc:	414a703a 	and	r5,r8,r5
    a0c0:	214b883a 	add	r5,r4,r5
    a0c4:	29800117 	ldw	r6,4(r5)
    a0c8:	3180004c 	andi	r6,r6,1
    a0cc:	30003f26 	beq	r6,zero,a1cc <_realloc_r+0x1a0>
    a0d0:	1080004c 	andi	r2,r2,1
    a0d4:	10008326 	beq	r2,zero,a2e4 <_realloc_r+0x2b8>
    a0d8:	900b883a 	mov	r5,r18
    a0dc:	a009883a 	mov	r4,r20
    a0e0:	00031440 	call	3144 <_malloc_r>
    a0e4:	1025883a 	mov	r18,r2
    a0e8:	10011e26 	beq	r2,zero,a564 <_realloc_r+0x538>
    a0ec:	a93fff17 	ldw	r4,-4(r21)
    a0f0:	10fffe04 	addi	r3,r2,-8
    a0f4:	00bfff84 	movi	r2,-2
    a0f8:	2084703a 	and	r2,r4,r2
    a0fc:	9885883a 	add	r2,r19,r2
    a100:	1880ee26 	beq	r3,r2,a4bc <_realloc_r+0x490>
    a104:	81bfff04 	addi	r6,r16,-4
    a108:	00800904 	movi	r2,36
    a10c:	1180b836 	bltu	r2,r6,a3f0 <_realloc_r+0x3c4>
    a110:	00c004c4 	movi	r3,19
    a114:	19809636 	bltu	r3,r6,a370 <_realloc_r+0x344>
    a118:	9005883a 	mov	r2,r18
    a11c:	a807883a 	mov	r3,r21
    a120:	19000017 	ldw	r4,0(r3)
    a124:	11000015 	stw	r4,0(r2)
    a128:	19000117 	ldw	r4,4(r3)
    a12c:	11000115 	stw	r4,4(r2)
    a130:	18c00217 	ldw	r3,8(r3)
    a134:	10c00215 	stw	r3,8(r2)
    a138:	a80b883a 	mov	r5,r21
    a13c:	a009883a 	mov	r4,r20
    a140:	0007f940 	call	7f94 <_free_r>
    a144:	a009883a 	mov	r4,r20
    a148:	000f45c0 	call	f45c <__malloc_unlock>
    a14c:	9005883a 	mov	r2,r18
    a150:	00001206 	br	a19c <_realloc_r+0x170>
    a154:	00c00404 	movi	r3,16
    a158:	1823883a 	mov	r17,r3
    a15c:	003fce06 	br	a098 <__alt_data_end+0xff00a098>
    a160:	a825883a 	mov	r18,r21
    a164:	8445c83a 	sub	r2,r16,r17
    a168:	00c003c4 	movi	r3,15
    a16c:	18802636 	bltu	r3,r2,a208 <_realloc_r+0x1dc>
    a170:	99800117 	ldw	r6,4(r19)
    a174:	9c07883a 	add	r3,r19,r16
    a178:	3180004c 	andi	r6,r6,1
    a17c:	3420b03a 	or	r16,r6,r16
    a180:	9c000115 	stw	r16,4(r19)
    a184:	18800117 	ldw	r2,4(r3)
    a188:	10800054 	ori	r2,r2,1
    a18c:	18800115 	stw	r2,4(r3)
    a190:	a009883a 	mov	r4,r20
    a194:	000f45c0 	call	f45c <__malloc_unlock>
    a198:	9005883a 	mov	r2,r18
    a19c:	dfc00917 	ldw	ra,36(sp)
    a1a0:	df000817 	ldw	fp,32(sp)
    a1a4:	ddc00717 	ldw	r23,28(sp)
    a1a8:	dd800617 	ldw	r22,24(sp)
    a1ac:	dd400517 	ldw	r21,20(sp)
    a1b0:	dd000417 	ldw	r20,16(sp)
    a1b4:	dcc00317 	ldw	r19,12(sp)
    a1b8:	dc800217 	ldw	r18,8(sp)
    a1bc:	dc400117 	ldw	r17,4(sp)
    a1c0:	dc000017 	ldw	r16,0(sp)
    a1c4:	dec00a04 	addi	sp,sp,40
    a1c8:	f800283a 	ret
    a1cc:	017fff04 	movi	r5,-4
    a1d0:	414a703a 	and	r5,r8,r5
    a1d4:	814d883a 	add	r6,r16,r5
    a1d8:	30c01f16 	blt	r6,r3,a258 <_realloc_r+0x22c>
    a1dc:	20800317 	ldw	r2,12(r4)
    a1e0:	20c00217 	ldw	r3,8(r4)
    a1e4:	a825883a 	mov	r18,r21
    a1e8:	3021883a 	mov	r16,r6
    a1ec:	18800315 	stw	r2,12(r3)
    a1f0:	10c00215 	stw	r3,8(r2)
    a1f4:	003fdb06 	br	a164 <__alt_data_end+0xff00a164>
    a1f8:	00800304 	movi	r2,12
    a1fc:	a0800015 	stw	r2,0(r20)
    a200:	0005883a 	mov	r2,zero
    a204:	003fe506 	br	a19c <__alt_data_end+0xff00a19c>
    a208:	98c00117 	ldw	r3,4(r19)
    a20c:	9c4b883a 	add	r5,r19,r17
    a210:	11000054 	ori	r4,r2,1
    a214:	18c0004c 	andi	r3,r3,1
    a218:	1c62b03a 	or	r17,r3,r17
    a21c:	9c400115 	stw	r17,4(r19)
    a220:	29000115 	stw	r4,4(r5)
    a224:	2885883a 	add	r2,r5,r2
    a228:	10c00117 	ldw	r3,4(r2)
    a22c:	29400204 	addi	r5,r5,8
    a230:	a009883a 	mov	r4,r20
    a234:	18c00054 	ori	r3,r3,1
    a238:	10c00115 	stw	r3,4(r2)
    a23c:	0007f940 	call	7f94 <_free_r>
    a240:	003fd306 	br	a190 <__alt_data_end+0xff00a190>
    a244:	017fff04 	movi	r5,-4
    a248:	414a703a 	and	r5,r8,r5
    a24c:	89800404 	addi	r6,r17,16
    a250:	8151883a 	add	r8,r16,r5
    a254:	4180590e 	bge	r8,r6,a3bc <_realloc_r+0x390>
    a258:	1080004c 	andi	r2,r2,1
    a25c:	103f9e1e 	bne	r2,zero,a0d8 <__alt_data_end+0xff00a0d8>
    a260:	adbffe17 	ldw	r22,-8(r21)
    a264:	00bfff04 	movi	r2,-4
    a268:	9dadc83a 	sub	r22,r19,r22
    a26c:	b1800117 	ldw	r6,4(r22)
    a270:	3084703a 	and	r2,r6,r2
    a274:	20002026 	beq	r4,zero,a2f8 <_realloc_r+0x2cc>
    a278:	80af883a 	add	r23,r16,r2
    a27c:	b96f883a 	add	r23,r23,r5
    a280:	21c05f26 	beq	r4,r7,a400 <_realloc_r+0x3d4>
    a284:	b8c01c16 	blt	r23,r3,a2f8 <_realloc_r+0x2cc>
    a288:	20800317 	ldw	r2,12(r4)
    a28c:	20c00217 	ldw	r3,8(r4)
    a290:	81bfff04 	addi	r6,r16,-4
    a294:	01000904 	movi	r4,36
    a298:	18800315 	stw	r2,12(r3)
    a29c:	10c00215 	stw	r3,8(r2)
    a2a0:	b0c00217 	ldw	r3,8(r22)
    a2a4:	b0800317 	ldw	r2,12(r22)
    a2a8:	b4800204 	addi	r18,r22,8
    a2ac:	18800315 	stw	r2,12(r3)
    a2b0:	10c00215 	stw	r3,8(r2)
    a2b4:	21801b36 	bltu	r4,r6,a324 <_realloc_r+0x2f8>
    a2b8:	008004c4 	movi	r2,19
    a2bc:	1180352e 	bgeu	r2,r6,a394 <_realloc_r+0x368>
    a2c0:	a8800017 	ldw	r2,0(r21)
    a2c4:	b0800215 	stw	r2,8(r22)
    a2c8:	a8800117 	ldw	r2,4(r21)
    a2cc:	b0800315 	stw	r2,12(r22)
    a2d0:	008006c4 	movi	r2,27
    a2d4:	11807f36 	bltu	r2,r6,a4d4 <_realloc_r+0x4a8>
    a2d8:	b0800404 	addi	r2,r22,16
    a2dc:	ad400204 	addi	r21,r21,8
    a2e0:	00002d06 	br	a398 <_realloc_r+0x36c>
    a2e4:	adbffe17 	ldw	r22,-8(r21)
    a2e8:	00bfff04 	movi	r2,-4
    a2ec:	9dadc83a 	sub	r22,r19,r22
    a2f0:	b1000117 	ldw	r4,4(r22)
    a2f4:	2084703a 	and	r2,r4,r2
    a2f8:	b03f7726 	beq	r22,zero,a0d8 <__alt_data_end+0xff00a0d8>
    a2fc:	80af883a 	add	r23,r16,r2
    a300:	b8ff7516 	blt	r23,r3,a0d8 <__alt_data_end+0xff00a0d8>
    a304:	b0800317 	ldw	r2,12(r22)
    a308:	b0c00217 	ldw	r3,8(r22)
    a30c:	81bfff04 	addi	r6,r16,-4
    a310:	01000904 	movi	r4,36
    a314:	18800315 	stw	r2,12(r3)
    a318:	10c00215 	stw	r3,8(r2)
    a31c:	b4800204 	addi	r18,r22,8
    a320:	21bfe52e 	bgeu	r4,r6,a2b8 <__alt_data_end+0xff00a2b8>
    a324:	a80b883a 	mov	r5,r21
    a328:	9009883a 	mov	r4,r18
    a32c:	0008dac0 	call	8dac <memmove>
    a330:	b821883a 	mov	r16,r23
    a334:	b027883a 	mov	r19,r22
    a338:	003f8a06 	br	a164 <__alt_data_end+0xff00a164>
    a33c:	300b883a 	mov	r5,r6
    a340:	dfc00917 	ldw	ra,36(sp)
    a344:	df000817 	ldw	fp,32(sp)
    a348:	ddc00717 	ldw	r23,28(sp)
    a34c:	dd800617 	ldw	r22,24(sp)
    a350:	dd400517 	ldw	r21,20(sp)
    a354:	dd000417 	ldw	r20,16(sp)
    a358:	dcc00317 	ldw	r19,12(sp)
    a35c:	dc800217 	ldw	r18,8(sp)
    a360:	dc400117 	ldw	r17,4(sp)
    a364:	dc000017 	ldw	r16,0(sp)
    a368:	dec00a04 	addi	sp,sp,40
    a36c:	00031441 	jmpi	3144 <_malloc_r>
    a370:	a8c00017 	ldw	r3,0(r21)
    a374:	90c00015 	stw	r3,0(r18)
    a378:	a8c00117 	ldw	r3,4(r21)
    a37c:	90c00115 	stw	r3,4(r18)
    a380:	00c006c4 	movi	r3,27
    a384:	19804536 	bltu	r3,r6,a49c <_realloc_r+0x470>
    a388:	90800204 	addi	r2,r18,8
    a38c:	a8c00204 	addi	r3,r21,8
    a390:	003f6306 	br	a120 <__alt_data_end+0xff00a120>
    a394:	9005883a 	mov	r2,r18
    a398:	a8c00017 	ldw	r3,0(r21)
    a39c:	b821883a 	mov	r16,r23
    a3a0:	b027883a 	mov	r19,r22
    a3a4:	10c00015 	stw	r3,0(r2)
    a3a8:	a8c00117 	ldw	r3,4(r21)
    a3ac:	10c00115 	stw	r3,4(r2)
    a3b0:	a8c00217 	ldw	r3,8(r21)
    a3b4:	10c00215 	stw	r3,8(r2)
    a3b8:	003f6a06 	br	a164 <__alt_data_end+0xff00a164>
    a3bc:	9c67883a 	add	r19,r19,r17
    a3c0:	4445c83a 	sub	r2,r8,r17
    a3c4:	e4c00215 	stw	r19,8(fp)
    a3c8:	10800054 	ori	r2,r2,1
    a3cc:	98800115 	stw	r2,4(r19)
    a3d0:	a8bfff17 	ldw	r2,-4(r21)
    a3d4:	a009883a 	mov	r4,r20
    a3d8:	1080004c 	andi	r2,r2,1
    a3dc:	1462b03a 	or	r17,r2,r17
    a3e0:	ac7fff15 	stw	r17,-4(r21)
    a3e4:	000f45c0 	call	f45c <__malloc_unlock>
    a3e8:	a805883a 	mov	r2,r21
    a3ec:	003f6b06 	br	a19c <__alt_data_end+0xff00a19c>
    a3f0:	a80b883a 	mov	r5,r21
    a3f4:	9009883a 	mov	r4,r18
    a3f8:	0008dac0 	call	8dac <memmove>
    a3fc:	003f4e06 	br	a138 <__alt_data_end+0xff00a138>
    a400:	89000404 	addi	r4,r17,16
    a404:	b93fbc16 	blt	r23,r4,a2f8 <__alt_data_end+0xff00a2f8>
    a408:	b0800317 	ldw	r2,12(r22)
    a40c:	b0c00217 	ldw	r3,8(r22)
    a410:	81bfff04 	addi	r6,r16,-4
    a414:	01000904 	movi	r4,36
    a418:	18800315 	stw	r2,12(r3)
    a41c:	10c00215 	stw	r3,8(r2)
    a420:	b4800204 	addi	r18,r22,8
    a424:	21804336 	bltu	r4,r6,a534 <_realloc_r+0x508>
    a428:	008004c4 	movi	r2,19
    a42c:	11803f2e 	bgeu	r2,r6,a52c <_realloc_r+0x500>
    a430:	a8800017 	ldw	r2,0(r21)
    a434:	b0800215 	stw	r2,8(r22)
    a438:	a8800117 	ldw	r2,4(r21)
    a43c:	b0800315 	stw	r2,12(r22)
    a440:	008006c4 	movi	r2,27
    a444:	11803f36 	bltu	r2,r6,a544 <_realloc_r+0x518>
    a448:	b0800404 	addi	r2,r22,16
    a44c:	ad400204 	addi	r21,r21,8
    a450:	a8c00017 	ldw	r3,0(r21)
    a454:	10c00015 	stw	r3,0(r2)
    a458:	a8c00117 	ldw	r3,4(r21)
    a45c:	10c00115 	stw	r3,4(r2)
    a460:	a8c00217 	ldw	r3,8(r21)
    a464:	10c00215 	stw	r3,8(r2)
    a468:	b447883a 	add	r3,r22,r17
    a46c:	bc45c83a 	sub	r2,r23,r17
    a470:	e0c00215 	stw	r3,8(fp)
    a474:	10800054 	ori	r2,r2,1
    a478:	18800115 	stw	r2,4(r3)
    a47c:	b0800117 	ldw	r2,4(r22)
    a480:	a009883a 	mov	r4,r20
    a484:	1080004c 	andi	r2,r2,1
    a488:	1462b03a 	or	r17,r2,r17
    a48c:	b4400115 	stw	r17,4(r22)
    a490:	000f45c0 	call	f45c <__malloc_unlock>
    a494:	9005883a 	mov	r2,r18
    a498:	003f4006 	br	a19c <__alt_data_end+0xff00a19c>
    a49c:	a8c00217 	ldw	r3,8(r21)
    a4a0:	90c00215 	stw	r3,8(r18)
    a4a4:	a8c00317 	ldw	r3,12(r21)
    a4a8:	90c00315 	stw	r3,12(r18)
    a4ac:	30801126 	beq	r6,r2,a4f4 <_realloc_r+0x4c8>
    a4b0:	90800404 	addi	r2,r18,16
    a4b4:	a8c00404 	addi	r3,r21,16
    a4b8:	003f1906 	br	a120 <__alt_data_end+0xff00a120>
    a4bc:	90ffff17 	ldw	r3,-4(r18)
    a4c0:	00bfff04 	movi	r2,-4
    a4c4:	a825883a 	mov	r18,r21
    a4c8:	1884703a 	and	r2,r3,r2
    a4cc:	80a1883a 	add	r16,r16,r2
    a4d0:	003f2406 	br	a164 <__alt_data_end+0xff00a164>
    a4d4:	a8800217 	ldw	r2,8(r21)
    a4d8:	b0800415 	stw	r2,16(r22)
    a4dc:	a8800317 	ldw	r2,12(r21)
    a4e0:	b0800515 	stw	r2,20(r22)
    a4e4:	31000a26 	beq	r6,r4,a510 <_realloc_r+0x4e4>
    a4e8:	b0800604 	addi	r2,r22,24
    a4ec:	ad400404 	addi	r21,r21,16
    a4f0:	003fa906 	br	a398 <__alt_data_end+0xff00a398>
    a4f4:	a9000417 	ldw	r4,16(r21)
    a4f8:	90800604 	addi	r2,r18,24
    a4fc:	a8c00604 	addi	r3,r21,24
    a500:	91000415 	stw	r4,16(r18)
    a504:	a9000517 	ldw	r4,20(r21)
    a508:	91000515 	stw	r4,20(r18)
    a50c:	003f0406 	br	a120 <__alt_data_end+0xff00a120>
    a510:	a8c00417 	ldw	r3,16(r21)
    a514:	ad400604 	addi	r21,r21,24
    a518:	b0800804 	addi	r2,r22,32
    a51c:	b0c00615 	stw	r3,24(r22)
    a520:	a8ffff17 	ldw	r3,-4(r21)
    a524:	b0c00715 	stw	r3,28(r22)
    a528:	003f9b06 	br	a398 <__alt_data_end+0xff00a398>
    a52c:	9005883a 	mov	r2,r18
    a530:	003fc706 	br	a450 <__alt_data_end+0xff00a450>
    a534:	a80b883a 	mov	r5,r21
    a538:	9009883a 	mov	r4,r18
    a53c:	0008dac0 	call	8dac <memmove>
    a540:	003fc906 	br	a468 <__alt_data_end+0xff00a468>
    a544:	a8800217 	ldw	r2,8(r21)
    a548:	b0800415 	stw	r2,16(r22)
    a54c:	a8800317 	ldw	r2,12(r21)
    a550:	b0800515 	stw	r2,20(r22)
    a554:	31000726 	beq	r6,r4,a574 <_realloc_r+0x548>
    a558:	b0800604 	addi	r2,r22,24
    a55c:	ad400404 	addi	r21,r21,16
    a560:	003fbb06 	br	a450 <__alt_data_end+0xff00a450>
    a564:	a009883a 	mov	r4,r20
    a568:	000f45c0 	call	f45c <__malloc_unlock>
    a56c:	0005883a 	mov	r2,zero
    a570:	003f0a06 	br	a19c <__alt_data_end+0xff00a19c>
    a574:	a8c00417 	ldw	r3,16(r21)
    a578:	ad400604 	addi	r21,r21,24
    a57c:	b0800804 	addi	r2,r22,32
    a580:	b0c00615 	stw	r3,24(r22)
    a584:	a8ffff17 	ldw	r3,-4(r21)
    a588:	b0c00715 	stw	r3,28(r22)
    a58c:	003fb006 	br	a450 <__alt_data_end+0xff00a450>

0000a590 <__fpclassifyd>:
    a590:	00a00034 	movhi	r2,32768
    a594:	10bfffc4 	addi	r2,r2,-1
    a598:	2884703a 	and	r2,r5,r2
    a59c:	10000726 	beq	r2,zero,a5bc <__fpclassifyd+0x2c>
    a5a0:	00fffc34 	movhi	r3,65520
    a5a4:	019ff834 	movhi	r6,32736
    a5a8:	28c7883a 	add	r3,r5,r3
    a5ac:	31bfffc4 	addi	r6,r6,-1
    a5b0:	30c00536 	bltu	r6,r3,a5c8 <__fpclassifyd+0x38>
    a5b4:	00800104 	movi	r2,4
    a5b8:	f800283a 	ret
    a5bc:	2000021e 	bne	r4,zero,a5c8 <__fpclassifyd+0x38>
    a5c0:	00800084 	movi	r2,2
    a5c4:	f800283a 	ret
    a5c8:	00dffc34 	movhi	r3,32752
    a5cc:	019ff834 	movhi	r6,32736
    a5d0:	28cb883a 	add	r5,r5,r3
    a5d4:	31bfffc4 	addi	r6,r6,-1
    a5d8:	317ff62e 	bgeu	r6,r5,a5b4 <__alt_data_end+0xff00a5b4>
    a5dc:	01400434 	movhi	r5,16
    a5e0:	297fffc4 	addi	r5,r5,-1
    a5e4:	28800236 	bltu	r5,r2,a5f0 <__fpclassifyd+0x60>
    a5e8:	008000c4 	movi	r2,3
    a5ec:	f800283a 	ret
    a5f0:	10c00226 	beq	r2,r3,a5fc <__fpclassifyd+0x6c>
    a5f4:	0005883a 	mov	r2,zero
    a5f8:	f800283a 	ret
    a5fc:	2005003a 	cmpeq	r2,r4,zero
    a600:	f800283a 	ret

0000a604 <__sread>:
    a604:	defffe04 	addi	sp,sp,-8
    a608:	dc000015 	stw	r16,0(sp)
    a60c:	2821883a 	mov	r16,r5
    a610:	2940038f 	ldh	r5,14(r5)
    a614:	dfc00115 	stw	ra,4(sp)
    a618:	000c3f80 	call	c3f8 <_read_r>
    a61c:	10000716 	blt	r2,zero,a63c <__sread+0x38>
    a620:	80c01417 	ldw	r3,80(r16)
    a624:	1887883a 	add	r3,r3,r2
    a628:	80c01415 	stw	r3,80(r16)
    a62c:	dfc00117 	ldw	ra,4(sp)
    a630:	dc000017 	ldw	r16,0(sp)
    a634:	dec00204 	addi	sp,sp,8
    a638:	f800283a 	ret
    a63c:	80c0030b 	ldhu	r3,12(r16)
    a640:	18fbffcc 	andi	r3,r3,61439
    a644:	80c0030d 	sth	r3,12(r16)
    a648:	dfc00117 	ldw	ra,4(sp)
    a64c:	dc000017 	ldw	r16,0(sp)
    a650:	dec00204 	addi	sp,sp,8
    a654:	f800283a 	ret

0000a658 <__seofread>:
    a658:	0005883a 	mov	r2,zero
    a65c:	f800283a 	ret

0000a660 <__swrite>:
    a660:	2880030b 	ldhu	r2,12(r5)
    a664:	defffb04 	addi	sp,sp,-20
    a668:	dcc00315 	stw	r19,12(sp)
    a66c:	dc800215 	stw	r18,8(sp)
    a670:	dc400115 	stw	r17,4(sp)
    a674:	dc000015 	stw	r16,0(sp)
    a678:	dfc00415 	stw	ra,16(sp)
    a67c:	10c0400c 	andi	r3,r2,256
    a680:	2821883a 	mov	r16,r5
    a684:	2023883a 	mov	r17,r4
    a688:	3025883a 	mov	r18,r6
    a68c:	3827883a 	mov	r19,r7
    a690:	18000526 	beq	r3,zero,a6a8 <__swrite+0x48>
    a694:	2940038f 	ldh	r5,14(r5)
    a698:	01c00084 	movi	r7,2
    a69c:	000d883a 	mov	r6,zero
    a6a0:	000c3980 	call	c398 <_lseek_r>
    a6a4:	8080030b 	ldhu	r2,12(r16)
    a6a8:	8140038f 	ldh	r5,14(r16)
    a6ac:	10bbffcc 	andi	r2,r2,61439
    a6b0:	980f883a 	mov	r7,r19
    a6b4:	900d883a 	mov	r6,r18
    a6b8:	8809883a 	mov	r4,r17
    a6bc:	8080030d 	sth	r2,12(r16)
    a6c0:	dfc00417 	ldw	ra,16(sp)
    a6c4:	dcc00317 	ldw	r19,12(sp)
    a6c8:	dc800217 	ldw	r18,8(sp)
    a6cc:	dc400117 	ldw	r17,4(sp)
    a6d0:	dc000017 	ldw	r16,0(sp)
    a6d4:	dec00504 	addi	sp,sp,20
    a6d8:	000be641 	jmpi	be64 <_write_r>

0000a6dc <__sseek>:
    a6dc:	defffe04 	addi	sp,sp,-8
    a6e0:	dc000015 	stw	r16,0(sp)
    a6e4:	2821883a 	mov	r16,r5
    a6e8:	2940038f 	ldh	r5,14(r5)
    a6ec:	dfc00115 	stw	ra,4(sp)
    a6f0:	000c3980 	call	c398 <_lseek_r>
    a6f4:	00ffffc4 	movi	r3,-1
    a6f8:	10c00826 	beq	r2,r3,a71c <__sseek+0x40>
    a6fc:	80c0030b 	ldhu	r3,12(r16)
    a700:	80801415 	stw	r2,80(r16)
    a704:	18c40014 	ori	r3,r3,4096
    a708:	80c0030d 	sth	r3,12(r16)
    a70c:	dfc00117 	ldw	ra,4(sp)
    a710:	dc000017 	ldw	r16,0(sp)
    a714:	dec00204 	addi	sp,sp,8
    a718:	f800283a 	ret
    a71c:	80c0030b 	ldhu	r3,12(r16)
    a720:	18fbffcc 	andi	r3,r3,61439
    a724:	80c0030d 	sth	r3,12(r16)
    a728:	dfc00117 	ldw	ra,4(sp)
    a72c:	dc000017 	ldw	r16,0(sp)
    a730:	dec00204 	addi	sp,sp,8
    a734:	f800283a 	ret

0000a738 <__sclose>:
    a738:	2940038f 	ldh	r5,14(r5)
    a73c:	000bec41 	jmpi	bec4 <_close_r>

0000a740 <strcmp>:
    a740:	2144b03a 	or	r2,r4,r5
    a744:	108000cc 	andi	r2,r2,3
    a748:	1000171e 	bne	r2,zero,a7a8 <strcmp+0x68>
    a74c:	20800017 	ldw	r2,0(r4)
    a750:	28c00017 	ldw	r3,0(r5)
    a754:	10c0141e 	bne	r2,r3,a7a8 <strcmp+0x68>
    a758:	027fbff4 	movhi	r9,65279
    a75c:	4a7fbfc4 	addi	r9,r9,-257
    a760:	0086303a 	nor	r3,zero,r2
    a764:	02202074 	movhi	r8,32897
    a768:	1245883a 	add	r2,r2,r9
    a76c:	42202004 	addi	r8,r8,-32640
    a770:	10c4703a 	and	r2,r2,r3
    a774:	1204703a 	and	r2,r2,r8
    a778:	10000226 	beq	r2,zero,a784 <strcmp+0x44>
    a77c:	00002306 	br	a80c <strcmp+0xcc>
    a780:	1000221e 	bne	r2,zero,a80c <strcmp+0xcc>
    a784:	21000104 	addi	r4,r4,4
    a788:	20c00017 	ldw	r3,0(r4)
    a78c:	29400104 	addi	r5,r5,4
    a790:	29800017 	ldw	r6,0(r5)
    a794:	1a4f883a 	add	r7,r3,r9
    a798:	00c4303a 	nor	r2,zero,r3
    a79c:	3884703a 	and	r2,r7,r2
    a7a0:	1204703a 	and	r2,r2,r8
    a7a4:	19bff626 	beq	r3,r6,a780 <__alt_data_end+0xff00a780>
    a7a8:	20800003 	ldbu	r2,0(r4)
    a7ac:	10c03fcc 	andi	r3,r2,255
    a7b0:	18c0201c 	xori	r3,r3,128
    a7b4:	18ffe004 	addi	r3,r3,-128
    a7b8:	18000c26 	beq	r3,zero,a7ec <strcmp+0xac>
    a7bc:	29800007 	ldb	r6,0(r5)
    a7c0:	19800326 	beq	r3,r6,a7d0 <strcmp+0x90>
    a7c4:	00001306 	br	a814 <strcmp+0xd4>
    a7c8:	29800007 	ldb	r6,0(r5)
    a7cc:	11800b1e 	bne	r2,r6,a7fc <strcmp+0xbc>
    a7d0:	21000044 	addi	r4,r4,1
    a7d4:	20c00003 	ldbu	r3,0(r4)
    a7d8:	29400044 	addi	r5,r5,1
    a7dc:	18803fcc 	andi	r2,r3,255
    a7e0:	1080201c 	xori	r2,r2,128
    a7e4:	10bfe004 	addi	r2,r2,-128
    a7e8:	103ff71e 	bne	r2,zero,a7c8 <__alt_data_end+0xff00a7c8>
    a7ec:	0007883a 	mov	r3,zero
    a7f0:	28800003 	ldbu	r2,0(r5)
    a7f4:	1885c83a 	sub	r2,r3,r2
    a7f8:	f800283a 	ret
    a7fc:	28800003 	ldbu	r2,0(r5)
    a800:	18c03fcc 	andi	r3,r3,255
    a804:	1885c83a 	sub	r2,r3,r2
    a808:	f800283a 	ret
    a80c:	0005883a 	mov	r2,zero
    a810:	f800283a 	ret
    a814:	10c03fcc 	andi	r3,r2,255
    a818:	003ff506 	br	a7f0 <__alt_data_end+0xff00a7f0>

0000a81c <__sprint_r.part.0>:
    a81c:	28801917 	ldw	r2,100(r5)
    a820:	defff604 	addi	sp,sp,-40
    a824:	dd400515 	stw	r21,20(sp)
    a828:	dfc00915 	stw	ra,36(sp)
    a82c:	df000815 	stw	fp,32(sp)
    a830:	ddc00715 	stw	r23,28(sp)
    a834:	dd800615 	stw	r22,24(sp)
    a838:	dd000415 	stw	r20,16(sp)
    a83c:	dcc00315 	stw	r19,12(sp)
    a840:	dc800215 	stw	r18,8(sp)
    a844:	dc400115 	stw	r17,4(sp)
    a848:	dc000015 	stw	r16,0(sp)
    a84c:	1088000c 	andi	r2,r2,8192
    a850:	302b883a 	mov	r21,r6
    a854:	10002e26 	beq	r2,zero,a910 <__sprint_r.part.0+0xf4>
    a858:	30800217 	ldw	r2,8(r6)
    a85c:	35800017 	ldw	r22,0(r6)
    a860:	10002926 	beq	r2,zero,a908 <__sprint_r.part.0+0xec>
    a864:	2827883a 	mov	r19,r5
    a868:	2029883a 	mov	r20,r4
    a86c:	b5c00104 	addi	r23,r22,4
    a870:	04bfffc4 	movi	r18,-1
    a874:	bc400017 	ldw	r17,0(r23)
    a878:	b4000017 	ldw	r16,0(r22)
    a87c:	0039883a 	mov	fp,zero
    a880:	8822d0ba 	srli	r17,r17,2
    a884:	8800031e 	bne	r17,zero,a894 <__sprint_r.part.0+0x78>
    a888:	00001806 	br	a8ec <__sprint_r.part.0+0xd0>
    a88c:	84000104 	addi	r16,r16,4
    a890:	8f001526 	beq	r17,fp,a8e8 <__sprint_r.part.0+0xcc>
    a894:	81400017 	ldw	r5,0(r16)
    a898:	980d883a 	mov	r6,r19
    a89c:	a009883a 	mov	r4,r20
    a8a0:	000c2440 	call	c244 <_fputwc_r>
    a8a4:	e7000044 	addi	fp,fp,1
    a8a8:	14bff81e 	bne	r2,r18,a88c <__alt_data_end+0xff00a88c>
    a8ac:	9005883a 	mov	r2,r18
    a8b0:	a8000215 	stw	zero,8(r21)
    a8b4:	a8000115 	stw	zero,4(r21)
    a8b8:	dfc00917 	ldw	ra,36(sp)
    a8bc:	df000817 	ldw	fp,32(sp)
    a8c0:	ddc00717 	ldw	r23,28(sp)
    a8c4:	dd800617 	ldw	r22,24(sp)
    a8c8:	dd400517 	ldw	r21,20(sp)
    a8cc:	dd000417 	ldw	r20,16(sp)
    a8d0:	dcc00317 	ldw	r19,12(sp)
    a8d4:	dc800217 	ldw	r18,8(sp)
    a8d8:	dc400117 	ldw	r17,4(sp)
    a8dc:	dc000017 	ldw	r16,0(sp)
    a8e0:	dec00a04 	addi	sp,sp,40
    a8e4:	f800283a 	ret
    a8e8:	a8800217 	ldw	r2,8(r21)
    a8ec:	8c63883a 	add	r17,r17,r17
    a8f0:	8c63883a 	add	r17,r17,r17
    a8f4:	1445c83a 	sub	r2,r2,r17
    a8f8:	a8800215 	stw	r2,8(r21)
    a8fc:	b5800204 	addi	r22,r22,8
    a900:	bdc00204 	addi	r23,r23,8
    a904:	103fdb1e 	bne	r2,zero,a874 <__alt_data_end+0xff00a874>
    a908:	0005883a 	mov	r2,zero
    a90c:	003fe806 	br	a8b0 <__alt_data_end+0xff00a8b0>
    a910:	00082a40 	call	82a4 <__sfvwrite_r>
    a914:	003fe606 	br	a8b0 <__alt_data_end+0xff00a8b0>

0000a918 <__sprint_r>:
    a918:	30c00217 	ldw	r3,8(r6)
    a91c:	18000126 	beq	r3,zero,a924 <__sprint_r+0xc>
    a920:	000a81c1 	jmpi	a81c <__sprint_r.part.0>
    a924:	30000115 	stw	zero,4(r6)
    a928:	0005883a 	mov	r2,zero
    a92c:	f800283a 	ret

0000a930 <___vfiprintf_internal_r>:
    a930:	deffc904 	addi	sp,sp,-220
    a934:	df003515 	stw	fp,212(sp)
    a938:	dd003115 	stw	r20,196(sp)
    a93c:	dfc03615 	stw	ra,216(sp)
    a940:	ddc03415 	stw	r23,208(sp)
    a944:	dd803315 	stw	r22,204(sp)
    a948:	dd403215 	stw	r21,200(sp)
    a94c:	dcc03015 	stw	r19,192(sp)
    a950:	dc802f15 	stw	r18,188(sp)
    a954:	dc402e15 	stw	r17,184(sp)
    a958:	dc002d15 	stw	r16,180(sp)
    a95c:	d9002015 	stw	r4,128(sp)
    a960:	d9c02215 	stw	r7,136(sp)
    a964:	2829883a 	mov	r20,r5
    a968:	3039883a 	mov	fp,r6
    a96c:	20000226 	beq	r4,zero,a978 <___vfiprintf_internal_r+0x48>
    a970:	20800e17 	ldw	r2,56(r4)
    a974:	1000cf26 	beq	r2,zero,acb4 <___vfiprintf_internal_r+0x384>
    a978:	a080030b 	ldhu	r2,12(r20)
    a97c:	10c8000c 	andi	r3,r2,8192
    a980:	1800061e 	bne	r3,zero,a99c <___vfiprintf_internal_r+0x6c>
    a984:	a1001917 	ldw	r4,100(r20)
    a988:	00f7ffc4 	movi	r3,-8193
    a98c:	10880014 	ori	r2,r2,8192
    a990:	20c6703a 	and	r3,r4,r3
    a994:	a080030d 	sth	r2,12(r20)
    a998:	a0c01915 	stw	r3,100(r20)
    a99c:	10c0020c 	andi	r3,r2,8
    a9a0:	1800a926 	beq	r3,zero,ac48 <___vfiprintf_internal_r+0x318>
    a9a4:	a0c00417 	ldw	r3,16(r20)
    a9a8:	1800a726 	beq	r3,zero,ac48 <___vfiprintf_internal_r+0x318>
    a9ac:	1080068c 	andi	r2,r2,26
    a9b0:	00c00284 	movi	r3,10
    a9b4:	10c0ac26 	beq	r2,r3,ac68 <___vfiprintf_internal_r+0x338>
    a9b8:	da801a04 	addi	r10,sp,104
    a9bc:	da801e15 	stw	r10,120(sp)
    a9c0:	d8801e17 	ldw	r2,120(sp)
    a9c4:	da8019c4 	addi	r10,sp,103
    a9c8:	05800074 	movhi	r22,1
    a9cc:	05c00074 	movhi	r23,1
    a9d0:	da801f15 	stw	r10,124(sp)
    a9d4:	1295c83a 	sub	r10,r2,r10
    a9d8:	b588d104 	addi	r22,r22,9028
    a9dc:	bdc8cd04 	addi	r23,r23,9012
    a9e0:	dec01a15 	stw	sp,104(sp)
    a9e4:	d8001c15 	stw	zero,112(sp)
    a9e8:	d8001b15 	stw	zero,108(sp)
    a9ec:	d8002615 	stw	zero,152(sp)
    a9f0:	d8002315 	stw	zero,140(sp)
    a9f4:	da802715 	stw	r10,156(sp)
    a9f8:	d811883a 	mov	r8,sp
    a9fc:	dd002115 	stw	r20,132(sp)
    aa00:	e021883a 	mov	r16,fp
    aa04:	80800007 	ldb	r2,0(r16)
    aa08:	1003ea26 	beq	r2,zero,b9b4 <___vfiprintf_internal_r+0x1084>
    aa0c:	00c00944 	movi	r3,37
    aa10:	8025883a 	mov	r18,r16
    aa14:	10c0021e 	bne	r2,r3,aa20 <___vfiprintf_internal_r+0xf0>
    aa18:	00001606 	br	aa74 <___vfiprintf_internal_r+0x144>
    aa1c:	10c00326 	beq	r2,r3,aa2c <___vfiprintf_internal_r+0xfc>
    aa20:	94800044 	addi	r18,r18,1
    aa24:	90800007 	ldb	r2,0(r18)
    aa28:	103ffc1e 	bne	r2,zero,aa1c <__alt_data_end+0xff00aa1c>
    aa2c:	9423c83a 	sub	r17,r18,r16
    aa30:	88001026 	beq	r17,zero,aa74 <___vfiprintf_internal_r+0x144>
    aa34:	d8c01c17 	ldw	r3,112(sp)
    aa38:	d8801b17 	ldw	r2,108(sp)
    aa3c:	44000015 	stw	r16,0(r8)
    aa40:	88c7883a 	add	r3,r17,r3
    aa44:	10800044 	addi	r2,r2,1
    aa48:	44400115 	stw	r17,4(r8)
    aa4c:	d8c01c15 	stw	r3,112(sp)
    aa50:	d8801b15 	stw	r2,108(sp)
    aa54:	010001c4 	movi	r4,7
    aa58:	2080760e 	bge	r4,r2,ac34 <___vfiprintf_internal_r+0x304>
    aa5c:	1803821e 	bne	r3,zero,b868 <___vfiprintf_internal_r+0xf38>
    aa60:	da802317 	ldw	r10,140(sp)
    aa64:	d8001b15 	stw	zero,108(sp)
    aa68:	d811883a 	mov	r8,sp
    aa6c:	5455883a 	add	r10,r10,r17
    aa70:	da802315 	stw	r10,140(sp)
    aa74:	90800007 	ldb	r2,0(r18)
    aa78:	10044626 	beq	r2,zero,bb94 <___vfiprintf_internal_r+0x1264>
    aa7c:	90c00047 	ldb	r3,1(r18)
    aa80:	94000044 	addi	r16,r18,1
    aa84:	d8001d85 	stb	zero,118(sp)
    aa88:	0009883a 	mov	r4,zero
    aa8c:	000f883a 	mov	r7,zero
    aa90:	027fffc4 	movi	r9,-1
    aa94:	0023883a 	mov	r17,zero
    aa98:	0029883a 	mov	r20,zero
    aa9c:	01401604 	movi	r5,88
    aaa0:	01800244 	movi	r6,9
    aaa4:	03400a84 	movi	r13,42
    aaa8:	03001b04 	movi	r12,108
    aaac:	84000044 	addi	r16,r16,1
    aab0:	18bff804 	addi	r2,r3,-32
    aab4:	28827336 	bltu	r5,r2,b484 <___vfiprintf_internal_r+0xb54>
    aab8:	100490ba 	slli	r2,r2,2
    aabc:	02800074 	movhi	r10,1
    aac0:	52aab404 	addi	r10,r10,-21808
    aac4:	1285883a 	add	r2,r2,r10
    aac8:	10800017 	ldw	r2,0(r2)
    aacc:	1000683a 	jmp	r2
    aad0:	0000b1b8 	rdprs	zero,zero,710
    aad4:	0000b484 	movi	zero,722
    aad8:	0000b484 	movi	zero,722
    aadc:	0000b1d8 	cmpnei	zero,zero,711
    aae0:	0000b484 	movi	zero,722
    aae4:	0000b484 	movi	zero,722
    aae8:	0000b484 	movi	zero,722
    aaec:	0000b484 	movi	zero,722
    aaf0:	0000b484 	movi	zero,722
    aaf4:	0000b484 	movi	zero,722
    aaf8:	0000b3c0 	call	b3c <init_LCD+0xe8>
    aafc:	0000b3dc 	xori	zero,zero,719
    ab00:	0000b484 	movi	zero,722
    ab04:	0000acc4 	movi	zero,691
    ab08:	0000b3ec 	andhi	zero,zero,719
    ab0c:	0000b484 	movi	zero,722
    ab10:	0000b1e4 	muli	zero,zero,711
    ab14:	0000b1f0 	cmpltui	zero,zero,711
    ab18:	0000b1f0 	cmpltui	zero,zero,711
    ab1c:	0000b1f0 	cmpltui	zero,zero,711
    ab20:	0000b1f0 	cmpltui	zero,zero,711
    ab24:	0000b1f0 	cmpltui	zero,zero,711
    ab28:	0000b1f0 	cmpltui	zero,zero,711
    ab2c:	0000b1f0 	cmpltui	zero,zero,711
    ab30:	0000b1f0 	cmpltui	zero,zero,711
    ab34:	0000b1f0 	cmpltui	zero,zero,711
    ab38:	0000b484 	movi	zero,722
    ab3c:	0000b484 	movi	zero,722
    ab40:	0000b484 	movi	zero,722
    ab44:	0000b484 	movi	zero,722
    ab48:	0000b484 	movi	zero,722
    ab4c:	0000b484 	movi	zero,722
    ab50:	0000b484 	movi	zero,722
    ab54:	0000b484 	movi	zero,722
    ab58:	0000b484 	movi	zero,722
    ab5c:	0000b484 	movi	zero,722
    ab60:	0000b21c 	xori	zero,zero,712
    ab64:	0000b484 	movi	zero,722
    ab68:	0000b484 	movi	zero,722
    ab6c:	0000b484 	movi	zero,722
    ab70:	0000b484 	movi	zero,722
    ab74:	0000b484 	movi	zero,722
    ab78:	0000b484 	movi	zero,722
    ab7c:	0000b484 	movi	zero,722
    ab80:	0000b484 	movi	zero,722
    ab84:	0000b484 	movi	zero,722
    ab88:	0000b484 	movi	zero,722
    ab8c:	0000b254 	movui	zero,713
    ab90:	0000b484 	movi	zero,722
    ab94:	0000b484 	movi	zero,722
    ab98:	0000b484 	movi	zero,722
    ab9c:	0000b484 	movi	zero,722
    aba0:	0000b484 	movi	zero,722
    aba4:	0000b2ac 	andhi	zero,zero,714
    aba8:	0000b484 	movi	zero,722
    abac:	0000b484 	movi	zero,722
    abb0:	0000b31c 	xori	zero,zero,716
    abb4:	0000b484 	movi	zero,722
    abb8:	0000b484 	movi	zero,722
    abbc:	0000b484 	movi	zero,722
    abc0:	0000b484 	movi	zero,722
    abc4:	0000b484 	movi	zero,722
    abc8:	0000b484 	movi	zero,722
    abcc:	0000b484 	movi	zero,722
    abd0:	0000b484 	movi	zero,722
    abd4:	0000b484 	movi	zero,722
    abd8:	0000b484 	movi	zero,722
    abdc:	0000b0c8 	cmpgei	zero,zero,707
    abe0:	0000b0f4 	movhi	zero,707
    abe4:	0000b484 	movi	zero,722
    abe8:	0000b484 	movi	zero,722
    abec:	0000b484 	movi	zero,722
    abf0:	0000b42c 	andhi	zero,zero,720
    abf4:	0000b0f4 	movhi	zero,707
    abf8:	0000b484 	movi	zero,722
    abfc:	0000b484 	movi	zero,722
    ac00:	0000af88 	cmpgei	zero,zero,702
    ac04:	0000b484 	movi	zero,722
    ac08:	0000af98 	cmpnei	zero,zero,702
    ac0c:	0000afd4 	movui	zero,703
    ac10:	0000acd0 	cmplti	zero,zero,691
    ac14:	0000af7c 	xorhi	zero,zero,701
    ac18:	0000b484 	movi	zero,722
    ac1c:	0000b358 	cmpnei	zero,zero,717
    ac20:	0000b484 	movi	zero,722
    ac24:	0000b3b0 	cmpltui	zero,zero,718
    ac28:	0000b484 	movi	zero,722
    ac2c:	0000b484 	movi	zero,722
    ac30:	0000b074 	movhi	zero,705
    ac34:	42000204 	addi	r8,r8,8
    ac38:	da802317 	ldw	r10,140(sp)
    ac3c:	5455883a 	add	r10,r10,r17
    ac40:	da802315 	stw	r10,140(sp)
    ac44:	003f8b06 	br	aa74 <__alt_data_end+0xff00aa74>
    ac48:	d9002017 	ldw	r4,128(sp)
    ac4c:	a00b883a 	mov	r5,r20
    ac50:	0005e4c0 	call	5e4c <__swsetup_r>
    ac54:	1003b11e 	bne	r2,zero,bb1c <___vfiprintf_internal_r+0x11ec>
    ac58:	a080030b 	ldhu	r2,12(r20)
    ac5c:	00c00284 	movi	r3,10
    ac60:	1080068c 	andi	r2,r2,26
    ac64:	10ff541e 	bne	r2,r3,a9b8 <__alt_data_end+0xff00a9b8>
    ac68:	a080038f 	ldh	r2,14(r20)
    ac6c:	103f5216 	blt	r2,zero,a9b8 <__alt_data_end+0xff00a9b8>
    ac70:	d9c02217 	ldw	r7,136(sp)
    ac74:	d9002017 	ldw	r4,128(sp)
    ac78:	e00d883a 	mov	r6,fp
    ac7c:	a00b883a 	mov	r5,r20
    ac80:	000bda80 	call	bda8 <__sbprintf>
    ac84:	dfc03617 	ldw	ra,216(sp)
    ac88:	df003517 	ldw	fp,212(sp)
    ac8c:	ddc03417 	ldw	r23,208(sp)
    ac90:	dd803317 	ldw	r22,204(sp)
    ac94:	dd403217 	ldw	r21,200(sp)
    ac98:	dd003117 	ldw	r20,196(sp)
    ac9c:	dcc03017 	ldw	r19,192(sp)
    aca0:	dc802f17 	ldw	r18,188(sp)
    aca4:	dc402e17 	ldw	r17,184(sp)
    aca8:	dc002d17 	ldw	r16,180(sp)
    acac:	dec03704 	addi	sp,sp,220
    acb0:	f800283a 	ret
    acb4:	0007e200 	call	7e20 <__sinit>
    acb8:	003f2f06 	br	a978 <__alt_data_end+0xff00a978>
    acbc:	0463c83a 	sub	r17,zero,r17
    acc0:	d8802215 	stw	r2,136(sp)
    acc4:	a5000114 	ori	r20,r20,4
    acc8:	80c00007 	ldb	r3,0(r16)
    accc:	003f7706 	br	aaac <__alt_data_end+0xff00aaac>
    acd0:	00800c04 	movi	r2,48
    acd4:	da802217 	ldw	r10,136(sp)
    acd8:	d8801d05 	stb	r2,116(sp)
    acdc:	00801e04 	movi	r2,120
    ace0:	d8801d45 	stb	r2,117(sp)
    ace4:	d8001d85 	stb	zero,118(sp)
    ace8:	50c00104 	addi	r3,r10,4
    acec:	54800017 	ldw	r18,0(r10)
    acf0:	0027883a 	mov	r19,zero
    acf4:	a0800094 	ori	r2,r20,2
    acf8:	48030b16 	blt	r9,zero,b928 <___vfiprintf_internal_r+0xff8>
    acfc:	00bfdfc4 	movi	r2,-129
    ad00:	a096703a 	and	r11,r20,r2
    ad04:	d8c02215 	stw	r3,136(sp)
    ad08:	5d000094 	ori	r20,r11,2
    ad0c:	90032b1e 	bne	r18,zero,b9bc <___vfiprintf_internal_r+0x108c>
    ad10:	00800074 	movhi	r2,1
    ad14:	10886c04 	addi	r2,r2,8624
    ad18:	d8802615 	stw	r2,152(sp)
    ad1c:	0039883a 	mov	fp,zero
    ad20:	48017b1e 	bne	r9,zero,b310 <___vfiprintf_internal_r+0x9e0>
    ad24:	0013883a 	mov	r9,zero
    ad28:	0027883a 	mov	r19,zero
    ad2c:	dd401a04 	addi	r21,sp,104
    ad30:	4825883a 	mov	r18,r9
    ad34:	4cc0010e 	bge	r9,r19,ad3c <___vfiprintf_internal_r+0x40c>
    ad38:	9825883a 	mov	r18,r19
    ad3c:	e7003fcc 	andi	fp,fp,255
    ad40:	e700201c 	xori	fp,fp,128
    ad44:	e73fe004 	addi	fp,fp,-128
    ad48:	e0000126 	beq	fp,zero,ad50 <___vfiprintf_internal_r+0x420>
    ad4c:	94800044 	addi	r18,r18,1
    ad50:	a380008c 	andi	r14,r20,2
    ad54:	70000126 	beq	r14,zero,ad5c <___vfiprintf_internal_r+0x42c>
    ad58:	94800084 	addi	r18,r18,2
    ad5c:	a700210c 	andi	fp,r20,132
    ad60:	e001df1e 	bne	fp,zero,b4e0 <___vfiprintf_internal_r+0xbb0>
    ad64:	8c87c83a 	sub	r3,r17,r18
    ad68:	00c1dd0e 	bge	zero,r3,b4e0 <___vfiprintf_internal_r+0xbb0>
    ad6c:	01c00404 	movi	r7,16
    ad70:	d8801c17 	ldw	r2,112(sp)
    ad74:	38c3ad0e 	bge	r7,r3,bc2c <___vfiprintf_internal_r+0x12fc>
    ad78:	02800074 	movhi	r10,1
    ad7c:	5288d104 	addi	r10,r10,9028
    ad80:	dc002915 	stw	r16,164(sp)
    ad84:	d9801b17 	ldw	r6,108(sp)
    ad88:	da802415 	stw	r10,144(sp)
    ad8c:	03c001c4 	movi	r15,7
    ad90:	da402515 	stw	r9,148(sp)
    ad94:	db802815 	stw	r14,160(sp)
    ad98:	1821883a 	mov	r16,r3
    ad9c:	00000506 	br	adb4 <___vfiprintf_internal_r+0x484>
    ada0:	31400084 	addi	r5,r6,2
    ada4:	42000204 	addi	r8,r8,8
    ada8:	200d883a 	mov	r6,r4
    adac:	843ffc04 	addi	r16,r16,-16
    adb0:	3c000d0e 	bge	r7,r16,ade8 <___vfiprintf_internal_r+0x4b8>
    adb4:	10800404 	addi	r2,r2,16
    adb8:	31000044 	addi	r4,r6,1
    adbc:	45800015 	stw	r22,0(r8)
    adc0:	41c00115 	stw	r7,4(r8)
    adc4:	d8801c15 	stw	r2,112(sp)
    adc8:	d9001b15 	stw	r4,108(sp)
    adcc:	793ff40e 	bge	r15,r4,ada0 <__alt_data_end+0xff00ada0>
    add0:	1001b51e 	bne	r2,zero,b4a8 <___vfiprintf_internal_r+0xb78>
    add4:	843ffc04 	addi	r16,r16,-16
    add8:	000d883a 	mov	r6,zero
    addc:	01400044 	movi	r5,1
    ade0:	d811883a 	mov	r8,sp
    ade4:	3c3ff316 	blt	r7,r16,adb4 <__alt_data_end+0xff00adb4>
    ade8:	8007883a 	mov	r3,r16
    adec:	da402517 	ldw	r9,148(sp)
    adf0:	db802817 	ldw	r14,160(sp)
    adf4:	dc002917 	ldw	r16,164(sp)
    adf8:	da802417 	ldw	r10,144(sp)
    adfc:	1885883a 	add	r2,r3,r2
    ae00:	40c00115 	stw	r3,4(r8)
    ae04:	42800015 	stw	r10,0(r8)
    ae08:	d8801c15 	stw	r2,112(sp)
    ae0c:	d9401b15 	stw	r5,108(sp)
    ae10:	00c001c4 	movi	r3,7
    ae14:	19426016 	blt	r3,r5,b798 <___vfiprintf_internal_r+0xe68>
    ae18:	d8c01d87 	ldb	r3,118(sp)
    ae1c:	42000204 	addi	r8,r8,8
    ae20:	29000044 	addi	r4,r5,1
    ae24:	1801b31e 	bne	r3,zero,b4f4 <___vfiprintf_internal_r+0xbc4>
    ae28:	7001c026 	beq	r14,zero,b52c <___vfiprintf_internal_r+0xbfc>
    ae2c:	d8c01d04 	addi	r3,sp,116
    ae30:	10800084 	addi	r2,r2,2
    ae34:	40c00015 	stw	r3,0(r8)
    ae38:	00c00084 	movi	r3,2
    ae3c:	40c00115 	stw	r3,4(r8)
    ae40:	d8801c15 	stw	r2,112(sp)
    ae44:	d9001b15 	stw	r4,108(sp)
    ae48:	00c001c4 	movi	r3,7
    ae4c:	1902650e 	bge	r3,r4,b7e4 <___vfiprintf_internal_r+0xeb4>
    ae50:	10029a1e 	bne	r2,zero,b8bc <___vfiprintf_internal_r+0xf8c>
    ae54:	00c02004 	movi	r3,128
    ae58:	01000044 	movi	r4,1
    ae5c:	000b883a 	mov	r5,zero
    ae60:	d811883a 	mov	r8,sp
    ae64:	e0c1b31e 	bne	fp,r3,b534 <___vfiprintf_internal_r+0xc04>
    ae68:	8cb9c83a 	sub	fp,r17,r18
    ae6c:	0701b10e 	bge	zero,fp,b534 <___vfiprintf_internal_r+0xc04>
    ae70:	01c00404 	movi	r7,16
    ae74:	3f03890e 	bge	r7,fp,bc9c <___vfiprintf_internal_r+0x136c>
    ae78:	00c00074 	movhi	r3,1
    ae7c:	18c8cd04 	addi	r3,r3,9012
    ae80:	d8c02415 	stw	r3,144(sp)
    ae84:	8007883a 	mov	r3,r16
    ae88:	034001c4 	movi	r13,7
    ae8c:	e021883a 	mov	r16,fp
    ae90:	da402515 	stw	r9,148(sp)
    ae94:	1839883a 	mov	fp,r3
    ae98:	00000506 	br	aeb0 <___vfiprintf_internal_r+0x580>
    ae9c:	29800084 	addi	r6,r5,2
    aea0:	42000204 	addi	r8,r8,8
    aea4:	180b883a 	mov	r5,r3
    aea8:	843ffc04 	addi	r16,r16,-16
    aeac:	3c000d0e 	bge	r7,r16,aee4 <___vfiprintf_internal_r+0x5b4>
    aeb0:	10800404 	addi	r2,r2,16
    aeb4:	28c00044 	addi	r3,r5,1
    aeb8:	45c00015 	stw	r23,0(r8)
    aebc:	41c00115 	stw	r7,4(r8)
    aec0:	d8801c15 	stw	r2,112(sp)
    aec4:	d8c01b15 	stw	r3,108(sp)
    aec8:	68fff40e 	bge	r13,r3,ae9c <__alt_data_end+0xff00ae9c>
    aecc:	1002241e 	bne	r2,zero,b760 <___vfiprintf_internal_r+0xe30>
    aed0:	843ffc04 	addi	r16,r16,-16
    aed4:	01800044 	movi	r6,1
    aed8:	000b883a 	mov	r5,zero
    aedc:	d811883a 	mov	r8,sp
    aee0:	3c3ff316 	blt	r7,r16,aeb0 <__alt_data_end+0xff00aeb0>
    aee4:	da402517 	ldw	r9,148(sp)
    aee8:	e007883a 	mov	r3,fp
    aeec:	8039883a 	mov	fp,r16
    aef0:	1821883a 	mov	r16,r3
    aef4:	d8c02417 	ldw	r3,144(sp)
    aef8:	1705883a 	add	r2,r2,fp
    aefc:	47000115 	stw	fp,4(r8)
    af00:	40c00015 	stw	r3,0(r8)
    af04:	d8801c15 	stw	r2,112(sp)
    af08:	d9801b15 	stw	r6,108(sp)
    af0c:	00c001c4 	movi	r3,7
    af10:	19827616 	blt	r3,r6,b8ec <___vfiprintf_internal_r+0xfbc>
    af14:	4cf9c83a 	sub	fp,r9,r19
    af18:	42000204 	addi	r8,r8,8
    af1c:	31000044 	addi	r4,r6,1
    af20:	300b883a 	mov	r5,r6
    af24:	07018516 	blt	zero,fp,b53c <___vfiprintf_internal_r+0xc0c>
    af28:	9885883a 	add	r2,r19,r2
    af2c:	45400015 	stw	r21,0(r8)
    af30:	44c00115 	stw	r19,4(r8)
    af34:	d8801c15 	stw	r2,112(sp)
    af38:	d9001b15 	stw	r4,108(sp)
    af3c:	00c001c4 	movi	r3,7
    af40:	1901dd0e 	bge	r3,r4,b6b8 <___vfiprintf_internal_r+0xd88>
    af44:	1002401e 	bne	r2,zero,b848 <___vfiprintf_internal_r+0xf18>
    af48:	d8001b15 	stw	zero,108(sp)
    af4c:	a2c0010c 	andi	r11,r20,4
    af50:	58000226 	beq	r11,zero,af5c <___vfiprintf_internal_r+0x62c>
    af54:	8ca7c83a 	sub	r19,r17,r18
    af58:	04c2f216 	blt	zero,r19,bb24 <___vfiprintf_internal_r+0x11f4>
    af5c:	8c80010e 	bge	r17,r18,af64 <___vfiprintf_internal_r+0x634>
    af60:	9023883a 	mov	r17,r18
    af64:	da802317 	ldw	r10,140(sp)
    af68:	5455883a 	add	r10,r10,r17
    af6c:	da802315 	stw	r10,140(sp)
    af70:	d8001b15 	stw	zero,108(sp)
    af74:	d811883a 	mov	r8,sp
    af78:	003ea206 	br	aa04 <__alt_data_end+0xff00aa04>
    af7c:	a5000814 	ori	r20,r20,32
    af80:	80c00007 	ldb	r3,0(r16)
    af84:	003ec906 	br	aaac <__alt_data_end+0xff00aaac>
    af88:	80c00007 	ldb	r3,0(r16)
    af8c:	1b030926 	beq	r3,r12,bbb4 <___vfiprintf_internal_r+0x1284>
    af90:	a5000414 	ori	r20,r20,16
    af94:	003ec506 	br	aaac <__alt_data_end+0xff00aaac>
    af98:	21003fcc 	andi	r4,r4,255
    af9c:	20035e1e 	bne	r4,zero,bd18 <___vfiprintf_internal_r+0x13e8>
    afa0:	a080080c 	andi	r2,r20,32
    afa4:	1002a526 	beq	r2,zero,ba3c <___vfiprintf_internal_r+0x110c>
    afa8:	da802217 	ldw	r10,136(sp)
    afac:	50800017 	ldw	r2,0(r10)
    afb0:	da802317 	ldw	r10,140(sp)
    afb4:	5007d7fa 	srai	r3,r10,31
    afb8:	da802217 	ldw	r10,136(sp)
    afbc:	10c00115 	stw	r3,4(r2)
    afc0:	52800104 	addi	r10,r10,4
    afc4:	da802215 	stw	r10,136(sp)
    afc8:	da802317 	ldw	r10,140(sp)
    afcc:	12800015 	stw	r10,0(r2)
    afd0:	003e8c06 	br	aa04 <__alt_data_end+0xff00aa04>
    afd4:	21003fcc 	andi	r4,r4,255
    afd8:	2003511e 	bne	r4,zero,bd20 <___vfiprintf_internal_r+0x13f0>
    afdc:	a080080c 	andi	r2,r20,32
    afe0:	1000a126 	beq	r2,zero,b268 <___vfiprintf_internal_r+0x938>
    afe4:	da802217 	ldw	r10,136(sp)
    afe8:	d8001d85 	stb	zero,118(sp)
    afec:	50800204 	addi	r2,r10,8
    aff0:	54800017 	ldw	r18,0(r10)
    aff4:	54c00117 	ldw	r19,4(r10)
    aff8:	4802b416 	blt	r9,zero,bacc <___vfiprintf_internal_r+0x119c>
    affc:	013fdfc4 	movi	r4,-129
    b000:	94c6b03a 	or	r3,r18,r19
    b004:	d8802215 	stw	r2,136(sp)
    b008:	a128703a 	and	r20,r20,r4
    b00c:	1800a226 	beq	r3,zero,b298 <___vfiprintf_internal_r+0x968>
    b010:	0039883a 	mov	fp,zero
    b014:	dd401a04 	addi	r21,sp,104
    b018:	9006d0fa 	srli	r3,r18,3
    b01c:	9808977a 	slli	r4,r19,29
    b020:	9826d0fa 	srli	r19,r19,3
    b024:	948001cc 	andi	r18,r18,7
    b028:	90800c04 	addi	r2,r18,48
    b02c:	ad7fffc4 	addi	r21,r21,-1
    b030:	20e4b03a 	or	r18,r4,r3
    b034:	a8800005 	stb	r2,0(r21)
    b038:	94c6b03a 	or	r3,r18,r19
    b03c:	183ff61e 	bne	r3,zero,b018 <__alt_data_end+0xff00b018>
    b040:	a0c0004c 	andi	r3,r20,1
    b044:	18005926 	beq	r3,zero,b1ac <___vfiprintf_internal_r+0x87c>
    b048:	10803fcc 	andi	r2,r2,255
    b04c:	1080201c 	xori	r2,r2,128
    b050:	10bfe004 	addi	r2,r2,-128
    b054:	00c00c04 	movi	r3,48
    b058:	10c05426 	beq	r2,r3,b1ac <___vfiprintf_internal_r+0x87c>
    b05c:	da801e17 	ldw	r10,120(sp)
    b060:	a8bfffc4 	addi	r2,r21,-1
    b064:	a8ffffc5 	stb	r3,-1(r21)
    b068:	50a7c83a 	sub	r19,r10,r2
    b06c:	102b883a 	mov	r21,r2
    b070:	003f2f06 	br	ad30 <__alt_data_end+0xff00ad30>
    b074:	21003fcc 	andi	r4,r4,255
    b078:	2003421e 	bne	r4,zero,bd84 <___vfiprintf_internal_r+0x1454>
    b07c:	00800074 	movhi	r2,1
    b080:	10886c04 	addi	r2,r2,8624
    b084:	d8802615 	stw	r2,152(sp)
    b088:	a080080c 	andi	r2,r20,32
    b08c:	1000aa26 	beq	r2,zero,b338 <___vfiprintf_internal_r+0xa08>
    b090:	da802217 	ldw	r10,136(sp)
    b094:	54800017 	ldw	r18,0(r10)
    b098:	54c00117 	ldw	r19,4(r10)
    b09c:	52800204 	addi	r10,r10,8
    b0a0:	da802215 	stw	r10,136(sp)
    b0a4:	a080004c 	andi	r2,r20,1
    b0a8:	1001d226 	beq	r2,zero,b7f4 <___vfiprintf_internal_r+0xec4>
    b0ac:	94c4b03a 	or	r2,r18,r19
    b0b0:	1002351e 	bne	r2,zero,b988 <___vfiprintf_internal_r+0x1058>
    b0b4:	d8001d85 	stb	zero,118(sp)
    b0b8:	48022216 	blt	r9,zero,b944 <___vfiprintf_internal_r+0x1014>
    b0bc:	00bfdfc4 	movi	r2,-129
    b0c0:	a0a8703a 	and	r20,r20,r2
    b0c4:	003f1506 	br	ad1c <__alt_data_end+0xff00ad1c>
    b0c8:	da802217 	ldw	r10,136(sp)
    b0cc:	04800044 	movi	r18,1
    b0d0:	d8001d85 	stb	zero,118(sp)
    b0d4:	50800017 	ldw	r2,0(r10)
    b0d8:	52800104 	addi	r10,r10,4
    b0dc:	da802215 	stw	r10,136(sp)
    b0e0:	d8801005 	stb	r2,64(sp)
    b0e4:	9027883a 	mov	r19,r18
    b0e8:	dd401004 	addi	r21,sp,64
    b0ec:	0013883a 	mov	r9,zero
    b0f0:	003f1706 	br	ad50 <__alt_data_end+0xff00ad50>
    b0f4:	21003fcc 	andi	r4,r4,255
    b0f8:	2003201e 	bne	r4,zero,bd7c <___vfiprintf_internal_r+0x144c>
    b0fc:	a080080c 	andi	r2,r20,32
    b100:	10004b26 	beq	r2,zero,b230 <___vfiprintf_internal_r+0x900>
    b104:	da802217 	ldw	r10,136(sp)
    b108:	50800117 	ldw	r2,4(r10)
    b10c:	54800017 	ldw	r18,0(r10)
    b110:	52800204 	addi	r10,r10,8
    b114:	da802215 	stw	r10,136(sp)
    b118:	1027883a 	mov	r19,r2
    b11c:	10022c16 	blt	r2,zero,b9d0 <___vfiprintf_internal_r+0x10a0>
    b120:	df001d83 	ldbu	fp,118(sp)
    b124:	48007216 	blt	r9,zero,b2f0 <___vfiprintf_internal_r+0x9c0>
    b128:	00ffdfc4 	movi	r3,-129
    b12c:	94c4b03a 	or	r2,r18,r19
    b130:	a0e8703a 	and	r20,r20,r3
    b134:	1000cc26 	beq	r2,zero,b468 <___vfiprintf_internal_r+0xb38>
    b138:	98021026 	beq	r19,zero,b97c <___vfiprintf_internal_r+0x104c>
    b13c:	dc402415 	stw	r17,144(sp)
    b140:	dc002515 	stw	r16,148(sp)
    b144:	9823883a 	mov	r17,r19
    b148:	9021883a 	mov	r16,r18
    b14c:	dd401a04 	addi	r21,sp,104
    b150:	4825883a 	mov	r18,r9
    b154:	4027883a 	mov	r19,r8
    b158:	8009883a 	mov	r4,r16
    b15c:	880b883a 	mov	r5,r17
    b160:	01800284 	movi	r6,10
    b164:	000f883a 	mov	r7,zero
    b168:	000cd100 	call	cd10 <__umoddi3>
    b16c:	10800c04 	addi	r2,r2,48
    b170:	ad7fffc4 	addi	r21,r21,-1
    b174:	8009883a 	mov	r4,r16
    b178:	880b883a 	mov	r5,r17
    b17c:	a8800005 	stb	r2,0(r21)
    b180:	01800284 	movi	r6,10
    b184:	000f883a 	mov	r7,zero
    b188:	000c7980 	call	c798 <__udivdi3>
    b18c:	1021883a 	mov	r16,r2
    b190:	10c4b03a 	or	r2,r2,r3
    b194:	1823883a 	mov	r17,r3
    b198:	103fef1e 	bne	r2,zero,b158 <__alt_data_end+0xff00b158>
    b19c:	dc402417 	ldw	r17,144(sp)
    b1a0:	dc002517 	ldw	r16,148(sp)
    b1a4:	9013883a 	mov	r9,r18
    b1a8:	9811883a 	mov	r8,r19
    b1ac:	da801e17 	ldw	r10,120(sp)
    b1b0:	5567c83a 	sub	r19,r10,r21
    b1b4:	003ede06 	br	ad30 <__alt_data_end+0xff00ad30>
    b1b8:	38803fcc 	andi	r2,r7,255
    b1bc:	1080201c 	xori	r2,r2,128
    b1c0:	10bfe004 	addi	r2,r2,-128
    b1c4:	1002371e 	bne	r2,zero,baa4 <___vfiprintf_internal_r+0x1174>
    b1c8:	01000044 	movi	r4,1
    b1cc:	01c00804 	movi	r7,32
    b1d0:	80c00007 	ldb	r3,0(r16)
    b1d4:	003e3506 	br	aaac <__alt_data_end+0xff00aaac>
    b1d8:	a5000054 	ori	r20,r20,1
    b1dc:	80c00007 	ldb	r3,0(r16)
    b1e0:	003e3206 	br	aaac <__alt_data_end+0xff00aaac>
    b1e4:	a5002014 	ori	r20,r20,128
    b1e8:	80c00007 	ldb	r3,0(r16)
    b1ec:	003e2f06 	br	aaac <__alt_data_end+0xff00aaac>
    b1f0:	8015883a 	mov	r10,r16
    b1f4:	0023883a 	mov	r17,zero
    b1f8:	18bff404 	addi	r2,r3,-48
    b1fc:	50c00007 	ldb	r3,0(r10)
    b200:	8c4002a4 	muli	r17,r17,10
    b204:	84000044 	addi	r16,r16,1
    b208:	8015883a 	mov	r10,r16
    b20c:	1463883a 	add	r17,r2,r17
    b210:	18bff404 	addi	r2,r3,-48
    b214:	30bff92e 	bgeu	r6,r2,b1fc <__alt_data_end+0xff00b1fc>
    b218:	003e2506 	br	aab0 <__alt_data_end+0xff00aab0>
    b21c:	21003fcc 	andi	r4,r4,255
    b220:	2002d41e 	bne	r4,zero,bd74 <___vfiprintf_internal_r+0x1444>
    b224:	a5000414 	ori	r20,r20,16
    b228:	a080080c 	andi	r2,r20,32
    b22c:	103fb51e 	bne	r2,zero,b104 <__alt_data_end+0xff00b104>
    b230:	a080040c 	andi	r2,r20,16
    b234:	1001f826 	beq	r2,zero,ba18 <___vfiprintf_internal_r+0x10e8>
    b238:	da802217 	ldw	r10,136(sp)
    b23c:	54800017 	ldw	r18,0(r10)
    b240:	52800104 	addi	r10,r10,4
    b244:	da802215 	stw	r10,136(sp)
    b248:	9027d7fa 	srai	r19,r18,31
    b24c:	9805883a 	mov	r2,r19
    b250:	003fb206 	br	b11c <__alt_data_end+0xff00b11c>
    b254:	21003fcc 	andi	r4,r4,255
    b258:	2002c41e 	bne	r4,zero,bd6c <___vfiprintf_internal_r+0x143c>
    b25c:	a5000414 	ori	r20,r20,16
    b260:	a080080c 	andi	r2,r20,32
    b264:	103f5f1e 	bne	r2,zero,afe4 <__alt_data_end+0xff00afe4>
    b268:	a080040c 	andi	r2,r20,16
    b26c:	10020f26 	beq	r2,zero,baac <___vfiprintf_internal_r+0x117c>
    b270:	da802217 	ldw	r10,136(sp)
    b274:	d8001d85 	stb	zero,118(sp)
    b278:	0027883a 	mov	r19,zero
    b27c:	50800104 	addi	r2,r10,4
    b280:	54800017 	ldw	r18,0(r10)
    b284:	48021116 	blt	r9,zero,bacc <___vfiprintf_internal_r+0x119c>
    b288:	00ffdfc4 	movi	r3,-129
    b28c:	d8802215 	stw	r2,136(sp)
    b290:	a0e8703a 	and	r20,r20,r3
    b294:	903f5e1e 	bne	r18,zero,b010 <__alt_data_end+0xff00b010>
    b298:	0039883a 	mov	fp,zero
    b29c:	4802a626 	beq	r9,zero,bd38 <___vfiprintf_internal_r+0x1408>
    b2a0:	0025883a 	mov	r18,zero
    b2a4:	0027883a 	mov	r19,zero
    b2a8:	003f5a06 	br	b014 <__alt_data_end+0xff00b014>
    b2ac:	21003fcc 	andi	r4,r4,255
    b2b0:	20029f1e 	bne	r4,zero,bd30 <___vfiprintf_internal_r+0x1400>
    b2b4:	a5000414 	ori	r20,r20,16
    b2b8:	a080080c 	andi	r2,r20,32
    b2bc:	10005e1e 	bne	r2,zero,b438 <___vfiprintf_internal_r+0xb08>
    b2c0:	a080040c 	andi	r2,r20,16
    b2c4:	1001a21e 	bne	r2,zero,b950 <___vfiprintf_internal_r+0x1020>
    b2c8:	a080100c 	andi	r2,r20,64
    b2cc:	d8001d85 	stb	zero,118(sp)
    b2d0:	da802217 	ldw	r10,136(sp)
    b2d4:	1002231e 	bne	r2,zero,bb64 <___vfiprintf_internal_r+0x1234>
    b2d8:	50800104 	addi	r2,r10,4
    b2dc:	54800017 	ldw	r18,0(r10)
    b2e0:	0027883a 	mov	r19,zero
    b2e4:	4801a00e 	bge	r9,zero,b968 <___vfiprintf_internal_r+0x1038>
    b2e8:	d8802215 	stw	r2,136(sp)
    b2ec:	0039883a 	mov	fp,zero
    b2f0:	94c4b03a 	or	r2,r18,r19
    b2f4:	103f901e 	bne	r2,zero,b138 <__alt_data_end+0xff00b138>
    b2f8:	00800044 	movi	r2,1
    b2fc:	10803fcc 	andi	r2,r2,255
    b300:	00c00044 	movi	r3,1
    b304:	10c05926 	beq	r2,r3,b46c <___vfiprintf_internal_r+0xb3c>
    b308:	00c00084 	movi	r3,2
    b30c:	10ffe41e 	bne	r2,r3,b2a0 <__alt_data_end+0xff00b2a0>
    b310:	0025883a 	mov	r18,zero
    b314:	0027883a 	mov	r19,zero
    b318:	00013d06 	br	b810 <___vfiprintf_internal_r+0xee0>
    b31c:	21003fcc 	andi	r4,r4,255
    b320:	2002811e 	bne	r4,zero,bd28 <___vfiprintf_internal_r+0x13f8>
    b324:	00800074 	movhi	r2,1
    b328:	10886704 	addi	r2,r2,8604
    b32c:	d8802615 	stw	r2,152(sp)
    b330:	a080080c 	andi	r2,r20,32
    b334:	103f561e 	bne	r2,zero,b090 <__alt_data_end+0xff00b090>
    b338:	a080040c 	andi	r2,r20,16
    b33c:	1001d126 	beq	r2,zero,ba84 <___vfiprintf_internal_r+0x1154>
    b340:	da802217 	ldw	r10,136(sp)
    b344:	0027883a 	mov	r19,zero
    b348:	54800017 	ldw	r18,0(r10)
    b34c:	52800104 	addi	r10,r10,4
    b350:	da802215 	stw	r10,136(sp)
    b354:	003f5306 	br	b0a4 <__alt_data_end+0xff00b0a4>
    b358:	da802217 	ldw	r10,136(sp)
    b35c:	d8001d85 	stb	zero,118(sp)
    b360:	55400017 	ldw	r21,0(r10)
    b364:	50c00104 	addi	r3,r10,4
    b368:	a8024226 	beq	r21,zero,bc74 <___vfiprintf_internal_r+0x1344>
    b36c:	48021816 	blt	r9,zero,bbd0 <___vfiprintf_internal_r+0x12a0>
    b370:	480d883a 	mov	r6,r9
    b374:	000b883a 	mov	r5,zero
    b378:	a809883a 	mov	r4,r21
    b37c:	d8c02a15 	stw	r3,168(sp)
    b380:	da002b15 	stw	r8,172(sp)
    b384:	da402c15 	stw	r9,176(sp)
    b388:	0008b800 	call	8b80 <memchr>
    b38c:	d8c02a17 	ldw	r3,168(sp)
    b390:	da002b17 	ldw	r8,172(sp)
    b394:	da402c17 	ldw	r9,176(sp)
    b398:	10024826 	beq	r2,zero,bcbc <___vfiprintf_internal_r+0x138c>
    b39c:	1567c83a 	sub	r19,r2,r21
    b3a0:	df001d83 	ldbu	fp,118(sp)
    b3a4:	d8c02215 	stw	r3,136(sp)
    b3a8:	0013883a 	mov	r9,zero
    b3ac:	003e6006 	br	ad30 <__alt_data_end+0xff00ad30>
    b3b0:	21003fcc 	andi	r4,r4,255
    b3b4:	203fc026 	beq	r4,zero,b2b8 <__alt_data_end+0xff00b2b8>
    b3b8:	d9c01d85 	stb	r7,118(sp)
    b3bc:	003fbe06 	br	b2b8 <__alt_data_end+0xff00b2b8>
    b3c0:	da802217 	ldw	r10,136(sp)
    b3c4:	54400017 	ldw	r17,0(r10)
    b3c8:	50800104 	addi	r2,r10,4
    b3cc:	883e3b16 	blt	r17,zero,acbc <__alt_data_end+0xff00acbc>
    b3d0:	d8802215 	stw	r2,136(sp)
    b3d4:	80c00007 	ldb	r3,0(r16)
    b3d8:	003db406 	br	aaac <__alt_data_end+0xff00aaac>
    b3dc:	01000044 	movi	r4,1
    b3e0:	01c00ac4 	movi	r7,43
    b3e4:	80c00007 	ldb	r3,0(r16)
    b3e8:	003db006 	br	aaac <__alt_data_end+0xff00aaac>
    b3ec:	80c00007 	ldb	r3,0(r16)
    b3f0:	82800044 	addi	r10,r16,1
    b3f4:	1b423c26 	beq	r3,r13,bce8 <___vfiprintf_internal_r+0x13b8>
    b3f8:	18bff404 	addi	r2,r3,-48
    b3fc:	0013883a 	mov	r9,zero
    b400:	30822b36 	bltu	r6,r2,bcb0 <___vfiprintf_internal_r+0x1380>
    b404:	50c00007 	ldb	r3,0(r10)
    b408:	4a4002a4 	muli	r9,r9,10
    b40c:	54000044 	addi	r16,r10,1
    b410:	8015883a 	mov	r10,r16
    b414:	4893883a 	add	r9,r9,r2
    b418:	18bff404 	addi	r2,r3,-48
    b41c:	30bff92e 	bgeu	r6,r2,b404 <__alt_data_end+0xff00b404>
    b420:	483da30e 	bge	r9,zero,aab0 <__alt_data_end+0xff00aab0>
    b424:	027fffc4 	movi	r9,-1
    b428:	003da106 	br	aab0 <__alt_data_end+0xff00aab0>
    b42c:	a5001014 	ori	r20,r20,64
    b430:	80c00007 	ldb	r3,0(r16)
    b434:	003d9d06 	br	aaac <__alt_data_end+0xff00aaac>
    b438:	da802217 	ldw	r10,136(sp)
    b43c:	d8001d85 	stb	zero,118(sp)
    b440:	50c00204 	addi	r3,r10,8
    b444:	54800017 	ldw	r18,0(r10)
    b448:	54c00117 	ldw	r19,4(r10)
    b44c:	4801ca16 	blt	r9,zero,bb78 <___vfiprintf_internal_r+0x1248>
    b450:	013fdfc4 	movi	r4,-129
    b454:	94c4b03a 	or	r2,r18,r19
    b458:	d8c02215 	stw	r3,136(sp)
    b45c:	a128703a 	and	r20,r20,r4
    b460:	0039883a 	mov	fp,zero
    b464:	103f341e 	bne	r2,zero,b138 <__alt_data_end+0xff00b138>
    b468:	483e2e26 	beq	r9,zero,ad24 <__alt_data_end+0xff00ad24>
    b46c:	0025883a 	mov	r18,zero
    b470:	94800c04 	addi	r18,r18,48
    b474:	dc8019c5 	stb	r18,103(sp)
    b478:	dcc02717 	ldw	r19,156(sp)
    b47c:	dd4019c4 	addi	r21,sp,103
    b480:	003e2b06 	br	ad30 <__alt_data_end+0xff00ad30>
    b484:	21003fcc 	andi	r4,r4,255
    b488:	2002361e 	bne	r4,zero,bd64 <___vfiprintf_internal_r+0x1434>
    b48c:	1801c126 	beq	r3,zero,bb94 <___vfiprintf_internal_r+0x1264>
    b490:	04800044 	movi	r18,1
    b494:	d8c01005 	stb	r3,64(sp)
    b498:	d8001d85 	stb	zero,118(sp)
    b49c:	9027883a 	mov	r19,r18
    b4a0:	dd401004 	addi	r21,sp,64
    b4a4:	003f1106 	br	b0ec <__alt_data_end+0xff00b0ec>
    b4a8:	d9402117 	ldw	r5,132(sp)
    b4ac:	d9002017 	ldw	r4,128(sp)
    b4b0:	d9801a04 	addi	r6,sp,104
    b4b4:	d9c02b15 	stw	r7,172(sp)
    b4b8:	dbc02a15 	stw	r15,168(sp)
    b4bc:	000a81c0 	call	a81c <__sprint_r.part.0>
    b4c0:	d9c02b17 	ldw	r7,172(sp)
    b4c4:	dbc02a17 	ldw	r15,168(sp)
    b4c8:	10006d1e 	bne	r2,zero,b680 <___vfiprintf_internal_r+0xd50>
    b4cc:	d9801b17 	ldw	r6,108(sp)
    b4d0:	d8801c17 	ldw	r2,112(sp)
    b4d4:	d811883a 	mov	r8,sp
    b4d8:	31400044 	addi	r5,r6,1
    b4dc:	003e3306 	br	adac <__alt_data_end+0xff00adac>
    b4e0:	d9401b17 	ldw	r5,108(sp)
    b4e4:	d8801c17 	ldw	r2,112(sp)
    b4e8:	29000044 	addi	r4,r5,1
    b4ec:	d8c01d87 	ldb	r3,118(sp)
    b4f0:	183e4d26 	beq	r3,zero,ae28 <__alt_data_end+0xff00ae28>
    b4f4:	00c00044 	movi	r3,1
    b4f8:	d9401d84 	addi	r5,sp,118
    b4fc:	10c5883a 	add	r2,r2,r3
    b500:	41400015 	stw	r5,0(r8)
    b504:	40c00115 	stw	r3,4(r8)
    b508:	d8801c15 	stw	r2,112(sp)
    b50c:	d9001b15 	stw	r4,108(sp)
    b510:	014001c4 	movi	r5,7
    b514:	2900a90e 	bge	r5,r4,b7bc <___vfiprintf_internal_r+0xe8c>
    b518:	1000da1e 	bne	r2,zero,b884 <___vfiprintf_internal_r+0xf54>
    b51c:	7000ab1e 	bne	r14,zero,b7cc <___vfiprintf_internal_r+0xe9c>
    b520:	000b883a 	mov	r5,zero
    b524:	1809883a 	mov	r4,r3
    b528:	d811883a 	mov	r8,sp
    b52c:	00c02004 	movi	r3,128
    b530:	e0fe4d26 	beq	fp,r3,ae68 <__alt_data_end+0xff00ae68>
    b534:	4cf9c83a 	sub	fp,r9,r19
    b538:	073e7b0e 	bge	zero,fp,af28 <__alt_data_end+0xff00af28>
    b53c:	01c00404 	movi	r7,16
    b540:	3f01900e 	bge	r7,fp,bb84 <___vfiprintf_internal_r+0x1254>
    b544:	00c00074 	movhi	r3,1
    b548:	18c8cd04 	addi	r3,r3,9012
    b54c:	d8c02415 	stw	r3,144(sp)
    b550:	034001c4 	movi	r13,7
    b554:	00000506 	br	b56c <___vfiprintf_internal_r+0xc3c>
    b558:	29000084 	addi	r4,r5,2
    b55c:	42000204 	addi	r8,r8,8
    b560:	180b883a 	mov	r5,r3
    b564:	e73ffc04 	addi	fp,fp,-16
    b568:	3f000d0e 	bge	r7,fp,b5a0 <___vfiprintf_internal_r+0xc70>
    b56c:	10800404 	addi	r2,r2,16
    b570:	28c00044 	addi	r3,r5,1
    b574:	45c00015 	stw	r23,0(r8)
    b578:	41c00115 	stw	r7,4(r8)
    b57c:	d8801c15 	stw	r2,112(sp)
    b580:	d8c01b15 	stw	r3,108(sp)
    b584:	68fff40e 	bge	r13,r3,b558 <__alt_data_end+0xff00b558>
    b588:	1000101e 	bne	r2,zero,b5cc <___vfiprintf_internal_r+0xc9c>
    b58c:	e73ffc04 	addi	fp,fp,-16
    b590:	01000044 	movi	r4,1
    b594:	000b883a 	mov	r5,zero
    b598:	d811883a 	mov	r8,sp
    b59c:	3f3ff316 	blt	r7,fp,b56c <__alt_data_end+0xff00b56c>
    b5a0:	da802417 	ldw	r10,144(sp)
    b5a4:	1705883a 	add	r2,r2,fp
    b5a8:	47000115 	stw	fp,4(r8)
    b5ac:	42800015 	stw	r10,0(r8)
    b5b0:	d8801c15 	stw	r2,112(sp)
    b5b4:	d9001b15 	stw	r4,108(sp)
    b5b8:	00c001c4 	movi	r3,7
    b5bc:	19003616 	blt	r3,r4,b698 <___vfiprintf_internal_r+0xd68>
    b5c0:	42000204 	addi	r8,r8,8
    b5c4:	21000044 	addi	r4,r4,1
    b5c8:	003e5706 	br	af28 <__alt_data_end+0xff00af28>
    b5cc:	d9402117 	ldw	r5,132(sp)
    b5d0:	d9002017 	ldw	r4,128(sp)
    b5d4:	d9801a04 	addi	r6,sp,104
    b5d8:	d9c02b15 	stw	r7,172(sp)
    b5dc:	db402a15 	stw	r13,168(sp)
    b5e0:	000a81c0 	call	a81c <__sprint_r.part.0>
    b5e4:	d9c02b17 	ldw	r7,172(sp)
    b5e8:	db402a17 	ldw	r13,168(sp)
    b5ec:	1000241e 	bne	r2,zero,b680 <___vfiprintf_internal_r+0xd50>
    b5f0:	d9401b17 	ldw	r5,108(sp)
    b5f4:	d8801c17 	ldw	r2,112(sp)
    b5f8:	d811883a 	mov	r8,sp
    b5fc:	29000044 	addi	r4,r5,1
    b600:	003fd806 	br	b564 <__alt_data_end+0xff00b564>
    b604:	d9401b17 	ldw	r5,108(sp)
    b608:	00c00074 	movhi	r3,1
    b60c:	18c8d104 	addi	r3,r3,9028
    b610:	d8c02415 	stw	r3,144(sp)
    b614:	29400044 	addi	r5,r5,1
    b618:	d8c02417 	ldw	r3,144(sp)
    b61c:	14c5883a 	add	r2,r2,r19
    b620:	44c00115 	stw	r19,4(r8)
    b624:	40c00015 	stw	r3,0(r8)
    b628:	d8801c15 	stw	r2,112(sp)
    b62c:	d9401b15 	stw	r5,108(sp)
    b630:	00c001c4 	movi	r3,7
    b634:	1940070e 	bge	r3,r5,b654 <___vfiprintf_internal_r+0xd24>
    b638:	103e4826 	beq	r2,zero,af5c <__alt_data_end+0xff00af5c>
    b63c:	d9402117 	ldw	r5,132(sp)
    b640:	d9002017 	ldw	r4,128(sp)
    b644:	d9801a04 	addi	r6,sp,104
    b648:	000a81c0 	call	a81c <__sprint_r.part.0>
    b64c:	10000c1e 	bne	r2,zero,b680 <___vfiprintf_internal_r+0xd50>
    b650:	d8801c17 	ldw	r2,112(sp)
    b654:	8c80010e 	bge	r17,r18,b65c <___vfiprintf_internal_r+0xd2c>
    b658:	9023883a 	mov	r17,r18
    b65c:	da802317 	ldw	r10,140(sp)
    b660:	5455883a 	add	r10,r10,r17
    b664:	da802315 	stw	r10,140(sp)
    b668:	103e4126 	beq	r2,zero,af70 <__alt_data_end+0xff00af70>
    b66c:	d9402117 	ldw	r5,132(sp)
    b670:	d9002017 	ldw	r4,128(sp)
    b674:	d9801a04 	addi	r6,sp,104
    b678:	000a81c0 	call	a81c <__sprint_r.part.0>
    b67c:	103e3c26 	beq	r2,zero,af70 <__alt_data_end+0xff00af70>
    b680:	dd002117 	ldw	r20,132(sp)
    b684:	a080030b 	ldhu	r2,12(r20)
    b688:	1080100c 	andi	r2,r2,64
    b68c:	1001231e 	bne	r2,zero,bb1c <___vfiprintf_internal_r+0x11ec>
    b690:	d8802317 	ldw	r2,140(sp)
    b694:	003d7b06 	br	ac84 <__alt_data_end+0xff00ac84>
    b698:	1000991e 	bne	r2,zero,b900 <___vfiprintf_internal_r+0xfd0>
    b69c:	00c00044 	movi	r3,1
    b6a0:	9805883a 	mov	r2,r19
    b6a4:	dd400015 	stw	r21,0(sp)
    b6a8:	dcc00115 	stw	r19,4(sp)
    b6ac:	dcc01c15 	stw	r19,112(sp)
    b6b0:	d8c01b15 	stw	r3,108(sp)
    b6b4:	d811883a 	mov	r8,sp
    b6b8:	42000204 	addi	r8,r8,8
    b6bc:	a2c0010c 	andi	r11,r20,4
    b6c0:	583fe426 	beq	r11,zero,b654 <__alt_data_end+0xff00b654>
    b6c4:	8ca7c83a 	sub	r19,r17,r18
    b6c8:	04ffe20e 	bge	zero,r19,b654 <__alt_data_end+0xff00b654>
    b6cc:	01c00404 	movi	r7,16
    b6d0:	3cffcc0e 	bge	r7,r19,b604 <__alt_data_end+0xff00b604>
    b6d4:	02800074 	movhi	r10,1
    b6d8:	5288d104 	addi	r10,r10,9028
    b6dc:	d9001b17 	ldw	r4,108(sp)
    b6e0:	da802415 	stw	r10,144(sp)
    b6e4:	382b883a 	mov	r21,r7
    b6e8:	050001c4 	movi	r20,7
    b6ec:	df002017 	ldw	fp,128(sp)
    b6f0:	00000506 	br	b708 <___vfiprintf_internal_r+0xdd8>
    b6f4:	21400084 	addi	r5,r4,2
    b6f8:	42000204 	addi	r8,r8,8
    b6fc:	1809883a 	mov	r4,r3
    b700:	9cfffc04 	addi	r19,r19,-16
    b704:	acffc40e 	bge	r21,r19,b618 <__alt_data_end+0xff00b618>
    b708:	10800404 	addi	r2,r2,16
    b70c:	20c00044 	addi	r3,r4,1
    b710:	45800015 	stw	r22,0(r8)
    b714:	45400115 	stw	r21,4(r8)
    b718:	d8801c15 	stw	r2,112(sp)
    b71c:	d8c01b15 	stw	r3,108(sp)
    b720:	a0fff40e 	bge	r20,r3,b6f4 <__alt_data_end+0xff00b6f4>
    b724:	1000041e 	bne	r2,zero,b738 <___vfiprintf_internal_r+0xe08>
    b728:	01400044 	movi	r5,1
    b72c:	0009883a 	mov	r4,zero
    b730:	d811883a 	mov	r8,sp
    b734:	003ff206 	br	b700 <__alt_data_end+0xff00b700>
    b738:	d9402117 	ldw	r5,132(sp)
    b73c:	d9801a04 	addi	r6,sp,104
    b740:	e009883a 	mov	r4,fp
    b744:	000a81c0 	call	a81c <__sprint_r.part.0>
    b748:	103fcd1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b74c:	d9001b17 	ldw	r4,108(sp)
    b750:	d8801c17 	ldw	r2,112(sp)
    b754:	d811883a 	mov	r8,sp
    b758:	21400044 	addi	r5,r4,1
    b75c:	003fe806 	br	b700 <__alt_data_end+0xff00b700>
    b760:	d9402117 	ldw	r5,132(sp)
    b764:	d9002017 	ldw	r4,128(sp)
    b768:	d9801a04 	addi	r6,sp,104
    b76c:	d9c02b15 	stw	r7,172(sp)
    b770:	db402a15 	stw	r13,168(sp)
    b774:	000a81c0 	call	a81c <__sprint_r.part.0>
    b778:	d9c02b17 	ldw	r7,172(sp)
    b77c:	db402a17 	ldw	r13,168(sp)
    b780:	103fbf1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b784:	d9401b17 	ldw	r5,108(sp)
    b788:	d8801c17 	ldw	r2,112(sp)
    b78c:	d811883a 	mov	r8,sp
    b790:	29800044 	addi	r6,r5,1
    b794:	003dc406 	br	aea8 <__alt_data_end+0xff00aea8>
    b798:	1000d21e 	bne	r2,zero,bae4 <___vfiprintf_internal_r+0x11b4>
    b79c:	d8c01d87 	ldb	r3,118(sp)
    b7a0:	18009526 	beq	r3,zero,b9f8 <___vfiprintf_internal_r+0x10c8>
    b7a4:	00800044 	movi	r2,1
    b7a8:	d8c01d84 	addi	r3,sp,118
    b7ac:	1009883a 	mov	r4,r2
    b7b0:	d8c00015 	stw	r3,0(sp)
    b7b4:	d8800115 	stw	r2,4(sp)
    b7b8:	d811883a 	mov	r8,sp
    b7bc:	200b883a 	mov	r5,r4
    b7c0:	42000204 	addi	r8,r8,8
    b7c4:	21000044 	addi	r4,r4,1
    b7c8:	003d9706 	br	ae28 <__alt_data_end+0xff00ae28>
    b7cc:	d9001d04 	addi	r4,sp,116
    b7d0:	00800084 	movi	r2,2
    b7d4:	d9000015 	stw	r4,0(sp)
    b7d8:	d8800115 	stw	r2,4(sp)
    b7dc:	1809883a 	mov	r4,r3
    b7e0:	d811883a 	mov	r8,sp
    b7e4:	200b883a 	mov	r5,r4
    b7e8:	42000204 	addi	r8,r8,8
    b7ec:	21000044 	addi	r4,r4,1
    b7f0:	003f4e06 	br	b52c <__alt_data_end+0xff00b52c>
    b7f4:	d8001d85 	stb	zero,118(sp)
    b7f8:	48005016 	blt	r9,zero,b93c <___vfiprintf_internal_r+0x100c>
    b7fc:	00ffdfc4 	movi	r3,-129
    b800:	94c4b03a 	or	r2,r18,r19
    b804:	a0e8703a 	and	r20,r20,r3
    b808:	103d4426 	beq	r2,zero,ad1c <__alt_data_end+0xff00ad1c>
    b80c:	0039883a 	mov	fp,zero
    b810:	d9002617 	ldw	r4,152(sp)
    b814:	dd401a04 	addi	r21,sp,104
    b818:	908003cc 	andi	r2,r18,15
    b81c:	9806973a 	slli	r3,r19,28
    b820:	2085883a 	add	r2,r4,r2
    b824:	9024d13a 	srli	r18,r18,4
    b828:	10800003 	ldbu	r2,0(r2)
    b82c:	9826d13a 	srli	r19,r19,4
    b830:	ad7fffc4 	addi	r21,r21,-1
    b834:	1ca4b03a 	or	r18,r3,r18
    b838:	a8800005 	stb	r2,0(r21)
    b83c:	94c4b03a 	or	r2,r18,r19
    b840:	103ff51e 	bne	r2,zero,b818 <__alt_data_end+0xff00b818>
    b844:	003e5906 	br	b1ac <__alt_data_end+0xff00b1ac>
    b848:	d9402117 	ldw	r5,132(sp)
    b84c:	d9002017 	ldw	r4,128(sp)
    b850:	d9801a04 	addi	r6,sp,104
    b854:	000a81c0 	call	a81c <__sprint_r.part.0>
    b858:	103f891e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b85c:	d8801c17 	ldw	r2,112(sp)
    b860:	d811883a 	mov	r8,sp
    b864:	003f9506 	br	b6bc <__alt_data_end+0xff00b6bc>
    b868:	d9402117 	ldw	r5,132(sp)
    b86c:	d9002017 	ldw	r4,128(sp)
    b870:	d9801a04 	addi	r6,sp,104
    b874:	000a81c0 	call	a81c <__sprint_r.part.0>
    b878:	103f811e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b87c:	d811883a 	mov	r8,sp
    b880:	003ced06 	br	ac38 <__alt_data_end+0xff00ac38>
    b884:	d9402117 	ldw	r5,132(sp)
    b888:	d9002017 	ldw	r4,128(sp)
    b88c:	d9801a04 	addi	r6,sp,104
    b890:	da402c15 	stw	r9,176(sp)
    b894:	db802a15 	stw	r14,168(sp)
    b898:	000a81c0 	call	a81c <__sprint_r.part.0>
    b89c:	da402c17 	ldw	r9,176(sp)
    b8a0:	db802a17 	ldw	r14,168(sp)
    b8a4:	103f761e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b8a8:	d9401b17 	ldw	r5,108(sp)
    b8ac:	d8801c17 	ldw	r2,112(sp)
    b8b0:	d811883a 	mov	r8,sp
    b8b4:	29000044 	addi	r4,r5,1
    b8b8:	003d5b06 	br	ae28 <__alt_data_end+0xff00ae28>
    b8bc:	d9402117 	ldw	r5,132(sp)
    b8c0:	d9002017 	ldw	r4,128(sp)
    b8c4:	d9801a04 	addi	r6,sp,104
    b8c8:	da402c15 	stw	r9,176(sp)
    b8cc:	000a81c0 	call	a81c <__sprint_r.part.0>
    b8d0:	da402c17 	ldw	r9,176(sp)
    b8d4:	103f6a1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b8d8:	d9401b17 	ldw	r5,108(sp)
    b8dc:	d8801c17 	ldw	r2,112(sp)
    b8e0:	d811883a 	mov	r8,sp
    b8e4:	29000044 	addi	r4,r5,1
    b8e8:	003f1006 	br	b52c <__alt_data_end+0xff00b52c>
    b8ec:	1000c31e 	bne	r2,zero,bbfc <___vfiprintf_internal_r+0x12cc>
    b8f0:	01000044 	movi	r4,1
    b8f4:	000b883a 	mov	r5,zero
    b8f8:	d811883a 	mov	r8,sp
    b8fc:	003f0d06 	br	b534 <__alt_data_end+0xff00b534>
    b900:	d9402117 	ldw	r5,132(sp)
    b904:	d9002017 	ldw	r4,128(sp)
    b908:	d9801a04 	addi	r6,sp,104
    b90c:	000a81c0 	call	a81c <__sprint_r.part.0>
    b910:	103f5b1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    b914:	d9001b17 	ldw	r4,108(sp)
    b918:	d8801c17 	ldw	r2,112(sp)
    b91c:	d811883a 	mov	r8,sp
    b920:	21000044 	addi	r4,r4,1
    b924:	003d8006 	br	af28 <__alt_data_end+0xff00af28>
    b928:	01000074 	movhi	r4,1
    b92c:	21086c04 	addi	r4,r4,8624
    b930:	d9002615 	stw	r4,152(sp)
    b934:	d8c02215 	stw	r3,136(sp)
    b938:	1029883a 	mov	r20,r2
    b93c:	94c4b03a 	or	r2,r18,r19
    b940:	103fb21e 	bne	r2,zero,b80c <__alt_data_end+0xff00b80c>
    b944:	0039883a 	mov	fp,zero
    b948:	00800084 	movi	r2,2
    b94c:	003e6b06 	br	b2fc <__alt_data_end+0xff00b2fc>
    b950:	da802217 	ldw	r10,136(sp)
    b954:	d8001d85 	stb	zero,118(sp)
    b958:	0027883a 	mov	r19,zero
    b95c:	50800104 	addi	r2,r10,4
    b960:	54800017 	ldw	r18,0(r10)
    b964:	483e6016 	blt	r9,zero,b2e8 <__alt_data_end+0xff00b2e8>
    b968:	00ffdfc4 	movi	r3,-129
    b96c:	d8802215 	stw	r2,136(sp)
    b970:	a0e8703a 	and	r20,r20,r3
    b974:	0039883a 	mov	fp,zero
    b978:	903ebb26 	beq	r18,zero,b468 <__alt_data_end+0xff00b468>
    b97c:	00800244 	movi	r2,9
    b980:	14bdee36 	bltu	r2,r18,b13c <__alt_data_end+0xff00b13c>
    b984:	003eba06 	br	b470 <__alt_data_end+0xff00b470>
    b988:	00800c04 	movi	r2,48
    b98c:	d8c01d45 	stb	r3,117(sp)
    b990:	d8801d05 	stb	r2,116(sp)
    b994:	d8001d85 	stb	zero,118(sp)
    b998:	a0c00094 	ori	r3,r20,2
    b99c:	4800a916 	blt	r9,zero,bc44 <___vfiprintf_internal_r+0x1314>
    b9a0:	00bfdfc4 	movi	r2,-129
    b9a4:	a096703a 	and	r11,r20,r2
    b9a8:	5d000094 	ori	r20,r11,2
    b9ac:	0039883a 	mov	fp,zero
    b9b0:	003f9706 	br	b810 <__alt_data_end+0xff00b810>
    b9b4:	8025883a 	mov	r18,r16
    b9b8:	003c2e06 	br	aa74 <__alt_data_end+0xff00aa74>
    b9bc:	00800074 	movhi	r2,1
    b9c0:	10886c04 	addi	r2,r2,8624
    b9c4:	0039883a 	mov	fp,zero
    b9c8:	d8802615 	stw	r2,152(sp)
    b9cc:	003f9006 	br	b810 <__alt_data_end+0xff00b810>
    b9d0:	04a5c83a 	sub	r18,zero,r18
    b9d4:	07000b44 	movi	fp,45
    b9d8:	9004c03a 	cmpne	r2,r18,zero
    b9dc:	04e7c83a 	sub	r19,zero,r19
    b9e0:	df001d85 	stb	fp,118(sp)
    b9e4:	98a7c83a 	sub	r19,r19,r2
    b9e8:	48009f16 	blt	r9,zero,bc68 <___vfiprintf_internal_r+0x1338>
    b9ec:	00bfdfc4 	movi	r2,-129
    b9f0:	a0a8703a 	and	r20,r20,r2
    b9f4:	003dd006 	br	b138 <__alt_data_end+0xff00b138>
    b9f8:	70004c26 	beq	r14,zero,bb2c <___vfiprintf_internal_r+0x11fc>
    b9fc:	00800084 	movi	r2,2
    ba00:	d8c01d04 	addi	r3,sp,116
    ba04:	d8c00015 	stw	r3,0(sp)
    ba08:	d8800115 	stw	r2,4(sp)
    ba0c:	01000044 	movi	r4,1
    ba10:	d811883a 	mov	r8,sp
    ba14:	003f7306 	br	b7e4 <__alt_data_end+0xff00b7e4>
    ba18:	a080100c 	andi	r2,r20,64
    ba1c:	da802217 	ldw	r10,136(sp)
    ba20:	103e0626 	beq	r2,zero,b23c <__alt_data_end+0xff00b23c>
    ba24:	5480000f 	ldh	r18,0(r10)
    ba28:	52800104 	addi	r10,r10,4
    ba2c:	da802215 	stw	r10,136(sp)
    ba30:	9027d7fa 	srai	r19,r18,31
    ba34:	9805883a 	mov	r2,r19
    ba38:	003db806 	br	b11c <__alt_data_end+0xff00b11c>
    ba3c:	a080040c 	andi	r2,r20,16
    ba40:	1000091e 	bne	r2,zero,ba68 <___vfiprintf_internal_r+0x1138>
    ba44:	a2c0100c 	andi	r11,r20,64
    ba48:	58000726 	beq	r11,zero,ba68 <___vfiprintf_internal_r+0x1138>
    ba4c:	da802217 	ldw	r10,136(sp)
    ba50:	50800017 	ldw	r2,0(r10)
    ba54:	52800104 	addi	r10,r10,4
    ba58:	da802215 	stw	r10,136(sp)
    ba5c:	da802317 	ldw	r10,140(sp)
    ba60:	1280000d 	sth	r10,0(r2)
    ba64:	003be706 	br	aa04 <__alt_data_end+0xff00aa04>
    ba68:	da802217 	ldw	r10,136(sp)
    ba6c:	50800017 	ldw	r2,0(r10)
    ba70:	52800104 	addi	r10,r10,4
    ba74:	da802215 	stw	r10,136(sp)
    ba78:	da802317 	ldw	r10,140(sp)
    ba7c:	12800015 	stw	r10,0(r2)
    ba80:	003be006 	br	aa04 <__alt_data_end+0xff00aa04>
    ba84:	a080100c 	andi	r2,r20,64
    ba88:	da802217 	ldw	r10,136(sp)
    ba8c:	10003026 	beq	r2,zero,bb50 <___vfiprintf_internal_r+0x1220>
    ba90:	5480000b 	ldhu	r18,0(r10)
    ba94:	52800104 	addi	r10,r10,4
    ba98:	0027883a 	mov	r19,zero
    ba9c:	da802215 	stw	r10,136(sp)
    baa0:	003d8006 	br	b0a4 <__alt_data_end+0xff00b0a4>
    baa4:	80c00007 	ldb	r3,0(r16)
    baa8:	003c0006 	br	aaac <__alt_data_end+0xff00aaac>
    baac:	a080100c 	andi	r2,r20,64
    bab0:	d8001d85 	stb	zero,118(sp)
    bab4:	da802217 	ldw	r10,136(sp)
    bab8:	1000201e 	bne	r2,zero,bb3c <___vfiprintf_internal_r+0x120c>
    babc:	50800104 	addi	r2,r10,4
    bac0:	54800017 	ldw	r18,0(r10)
    bac4:	0027883a 	mov	r19,zero
    bac8:	483def0e 	bge	r9,zero,b288 <__alt_data_end+0xff00b288>
    bacc:	94c6b03a 	or	r3,r18,r19
    bad0:	d8802215 	stw	r2,136(sp)
    bad4:	183d4e1e 	bne	r3,zero,b010 <__alt_data_end+0xff00b010>
    bad8:	0039883a 	mov	fp,zero
    badc:	0005883a 	mov	r2,zero
    bae0:	003e0606 	br	b2fc <__alt_data_end+0xff00b2fc>
    bae4:	d9402117 	ldw	r5,132(sp)
    bae8:	d9002017 	ldw	r4,128(sp)
    baec:	d9801a04 	addi	r6,sp,104
    baf0:	da402c15 	stw	r9,176(sp)
    baf4:	db802a15 	stw	r14,168(sp)
    baf8:	000a81c0 	call	a81c <__sprint_r.part.0>
    bafc:	da402c17 	ldw	r9,176(sp)
    bb00:	db802a17 	ldw	r14,168(sp)
    bb04:	103ede1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    bb08:	d9401b17 	ldw	r5,108(sp)
    bb0c:	d8801c17 	ldw	r2,112(sp)
    bb10:	d811883a 	mov	r8,sp
    bb14:	29000044 	addi	r4,r5,1
    bb18:	003e7406 	br	b4ec <__alt_data_end+0xff00b4ec>
    bb1c:	00bfffc4 	movi	r2,-1
    bb20:	003c5806 	br	ac84 <__alt_data_end+0xff00ac84>
    bb24:	d811883a 	mov	r8,sp
    bb28:	003ee806 	br	b6cc <__alt_data_end+0xff00b6cc>
    bb2c:	000b883a 	mov	r5,zero
    bb30:	01000044 	movi	r4,1
    bb34:	d811883a 	mov	r8,sp
    bb38:	003e7c06 	br	b52c <__alt_data_end+0xff00b52c>
    bb3c:	50800104 	addi	r2,r10,4
    bb40:	5480000b 	ldhu	r18,0(r10)
    bb44:	0027883a 	mov	r19,zero
    bb48:	483dcf0e 	bge	r9,zero,b288 <__alt_data_end+0xff00b288>
    bb4c:	003fdf06 	br	bacc <__alt_data_end+0xff00bacc>
    bb50:	54800017 	ldw	r18,0(r10)
    bb54:	52800104 	addi	r10,r10,4
    bb58:	0027883a 	mov	r19,zero
    bb5c:	da802215 	stw	r10,136(sp)
    bb60:	003d5006 	br	b0a4 <__alt_data_end+0xff00b0a4>
    bb64:	50800104 	addi	r2,r10,4
    bb68:	5480000b 	ldhu	r18,0(r10)
    bb6c:	0027883a 	mov	r19,zero
    bb70:	483f7d0e 	bge	r9,zero,b968 <__alt_data_end+0xff00b968>
    bb74:	003ddc06 	br	b2e8 <__alt_data_end+0xff00b2e8>
    bb78:	d8c02215 	stw	r3,136(sp)
    bb7c:	0039883a 	mov	fp,zero
    bb80:	003ddb06 	br	b2f0 <__alt_data_end+0xff00b2f0>
    bb84:	02800074 	movhi	r10,1
    bb88:	5288cd04 	addi	r10,r10,9012
    bb8c:	da802415 	stw	r10,144(sp)
    bb90:	003e8306 	br	b5a0 <__alt_data_end+0xff00b5a0>
    bb94:	d8801c17 	ldw	r2,112(sp)
    bb98:	dd002117 	ldw	r20,132(sp)
    bb9c:	103eb926 	beq	r2,zero,b684 <__alt_data_end+0xff00b684>
    bba0:	d9002017 	ldw	r4,128(sp)
    bba4:	d9801a04 	addi	r6,sp,104
    bba8:	a00b883a 	mov	r5,r20
    bbac:	000a81c0 	call	a81c <__sprint_r.part.0>
    bbb0:	003eb406 	br	b684 <__alt_data_end+0xff00b684>
    bbb4:	80c00043 	ldbu	r3,1(r16)
    bbb8:	a5000814 	ori	r20,r20,32
    bbbc:	84000044 	addi	r16,r16,1
    bbc0:	18c03fcc 	andi	r3,r3,255
    bbc4:	18c0201c 	xori	r3,r3,128
    bbc8:	18ffe004 	addi	r3,r3,-128
    bbcc:	003bb706 	br	aaac <__alt_data_end+0xff00aaac>
    bbd0:	a809883a 	mov	r4,r21
    bbd4:	d8c02a15 	stw	r3,168(sp)
    bbd8:	da002b15 	stw	r8,172(sp)
    bbdc:	0003ae40 	call	3ae4 <strlen>
    bbe0:	d8c02a17 	ldw	r3,168(sp)
    bbe4:	1027883a 	mov	r19,r2
    bbe8:	df001d83 	ldbu	fp,118(sp)
    bbec:	d8c02215 	stw	r3,136(sp)
    bbf0:	0013883a 	mov	r9,zero
    bbf4:	da002b17 	ldw	r8,172(sp)
    bbf8:	003c4d06 	br	ad30 <__alt_data_end+0xff00ad30>
    bbfc:	d9402117 	ldw	r5,132(sp)
    bc00:	d9002017 	ldw	r4,128(sp)
    bc04:	d9801a04 	addi	r6,sp,104
    bc08:	da402c15 	stw	r9,176(sp)
    bc0c:	000a81c0 	call	a81c <__sprint_r.part.0>
    bc10:	da402c17 	ldw	r9,176(sp)
    bc14:	103e9a1e 	bne	r2,zero,b680 <__alt_data_end+0xff00b680>
    bc18:	d9401b17 	ldw	r5,108(sp)
    bc1c:	d8801c17 	ldw	r2,112(sp)
    bc20:	d811883a 	mov	r8,sp
    bc24:	29000044 	addi	r4,r5,1
    bc28:	003e4206 	br	b534 <__alt_data_end+0xff00b534>
    bc2c:	d9401b17 	ldw	r5,108(sp)
    bc30:	01000074 	movhi	r4,1
    bc34:	2108d104 	addi	r4,r4,9028
    bc38:	d9002415 	stw	r4,144(sp)
    bc3c:	29400044 	addi	r5,r5,1
    bc40:	003c6d06 	br	adf8 <__alt_data_end+0xff00adf8>
    bc44:	0039883a 	mov	fp,zero
    bc48:	00800084 	movi	r2,2
    bc4c:	10803fcc 	andi	r2,r2,255
    bc50:	01000044 	movi	r4,1
    bc54:	11001e26 	beq	r2,r4,bcd0 <___vfiprintf_internal_r+0x13a0>
    bc58:	01000084 	movi	r4,2
    bc5c:	11001e1e 	bne	r2,r4,bcd8 <___vfiprintf_internal_r+0x13a8>
    bc60:	1829883a 	mov	r20,r3
    bc64:	003eea06 	br	b810 <__alt_data_end+0xff00b810>
    bc68:	a007883a 	mov	r3,r20
    bc6c:	00800044 	movi	r2,1
    bc70:	003ff606 	br	bc4c <__alt_data_end+0xff00bc4c>
    bc74:	00800184 	movi	r2,6
    bc78:	1240012e 	bgeu	r2,r9,bc80 <___vfiprintf_internal_r+0x1350>
    bc7c:	1013883a 	mov	r9,r2
    bc80:	4827883a 	mov	r19,r9
    bc84:	4825883a 	mov	r18,r9
    bc88:	48001516 	blt	r9,zero,bce0 <___vfiprintf_internal_r+0x13b0>
    bc8c:	05400074 	movhi	r21,1
    bc90:	d8c02215 	stw	r3,136(sp)
    bc94:	ad487104 	addi	r21,r21,8644
    bc98:	003d1406 	br	b0ec <__alt_data_end+0xff00b0ec>
    bc9c:	02800074 	movhi	r10,1
    bca0:	5288cd04 	addi	r10,r10,9012
    bca4:	da802415 	stw	r10,144(sp)
    bca8:	200d883a 	mov	r6,r4
    bcac:	003c9106 	br	aef4 <__alt_data_end+0xff00aef4>
    bcb0:	5021883a 	mov	r16,r10
    bcb4:	0013883a 	mov	r9,zero
    bcb8:	003b7d06 	br	aab0 <__alt_data_end+0xff00aab0>
    bcbc:	4827883a 	mov	r19,r9
    bcc0:	df001d83 	ldbu	fp,118(sp)
    bcc4:	d8c02215 	stw	r3,136(sp)
    bcc8:	0013883a 	mov	r9,zero
    bccc:	003c1806 	br	ad30 <__alt_data_end+0xff00ad30>
    bcd0:	1829883a 	mov	r20,r3
    bcd4:	003d1806 	br	b138 <__alt_data_end+0xff00b138>
    bcd8:	1829883a 	mov	r20,r3
    bcdc:	003ccd06 	br	b014 <__alt_data_end+0xff00b014>
    bce0:	0025883a 	mov	r18,zero
    bce4:	003fe906 	br	bc8c <__alt_data_end+0xff00bc8c>
    bce8:	d8802217 	ldw	r2,136(sp)
    bcec:	80c00043 	ldbu	r3,1(r16)
    bcf0:	5021883a 	mov	r16,r10
    bcf4:	12400017 	ldw	r9,0(r2)
    bcf8:	10800104 	addi	r2,r2,4
    bcfc:	d8802215 	stw	r2,136(sp)
    bd00:	483faf0e 	bge	r9,zero,bbc0 <__alt_data_end+0xff00bbc0>
    bd04:	18c03fcc 	andi	r3,r3,255
    bd08:	18c0201c 	xori	r3,r3,128
    bd0c:	027fffc4 	movi	r9,-1
    bd10:	18ffe004 	addi	r3,r3,-128
    bd14:	003b6506 	br	aaac <__alt_data_end+0xff00aaac>
    bd18:	d9c01d85 	stb	r7,118(sp)
    bd1c:	003ca006 	br	afa0 <__alt_data_end+0xff00afa0>
    bd20:	d9c01d85 	stb	r7,118(sp)
    bd24:	003cad06 	br	afdc <__alt_data_end+0xff00afdc>
    bd28:	d9c01d85 	stb	r7,118(sp)
    bd2c:	003d7d06 	br	b324 <__alt_data_end+0xff00b324>
    bd30:	d9c01d85 	stb	r7,118(sp)
    bd34:	003d5f06 	br	b2b4 <__alt_data_end+0xff00b2b4>
    bd38:	a080004c 	andi	r2,r20,1
    bd3c:	0039883a 	mov	fp,zero
    bd40:	10000526 	beq	r2,zero,bd58 <___vfiprintf_internal_r+0x1428>
    bd44:	00800c04 	movi	r2,48
    bd48:	d88019c5 	stb	r2,103(sp)
    bd4c:	dcc02717 	ldw	r19,156(sp)
    bd50:	dd4019c4 	addi	r21,sp,103
    bd54:	003bf606 	br	ad30 <__alt_data_end+0xff00ad30>
    bd58:	0027883a 	mov	r19,zero
    bd5c:	dd401a04 	addi	r21,sp,104
    bd60:	003bf306 	br	ad30 <__alt_data_end+0xff00ad30>
    bd64:	d9c01d85 	stb	r7,118(sp)
    bd68:	003dc806 	br	b48c <__alt_data_end+0xff00b48c>
    bd6c:	d9c01d85 	stb	r7,118(sp)
    bd70:	003d3a06 	br	b25c <__alt_data_end+0xff00b25c>
    bd74:	d9c01d85 	stb	r7,118(sp)
    bd78:	003d2a06 	br	b224 <__alt_data_end+0xff00b224>
    bd7c:	d9c01d85 	stb	r7,118(sp)
    bd80:	003cde06 	br	b0fc <__alt_data_end+0xff00b0fc>
    bd84:	d9c01d85 	stb	r7,118(sp)
    bd88:	003cbc06 	br	b07c <__alt_data_end+0xff00b07c>

0000bd8c <__vfiprintf_internal>:
    bd8c:	00800074 	movhi	r2,1
    bd90:	108fce04 	addi	r2,r2,16184
    bd94:	300f883a 	mov	r7,r6
    bd98:	280d883a 	mov	r6,r5
    bd9c:	200b883a 	mov	r5,r4
    bda0:	11000017 	ldw	r4,0(r2)
    bda4:	000a9301 	jmpi	a930 <___vfiprintf_internal_r>

0000bda8 <__sbprintf>:
    bda8:	2880030b 	ldhu	r2,12(r5)
    bdac:	2ac01917 	ldw	r11,100(r5)
    bdb0:	2a80038b 	ldhu	r10,14(r5)
    bdb4:	2a400717 	ldw	r9,28(r5)
    bdb8:	2a000917 	ldw	r8,36(r5)
    bdbc:	defee204 	addi	sp,sp,-1144
    bdc0:	00c10004 	movi	r3,1024
    bdc4:	dc011a15 	stw	r16,1128(sp)
    bdc8:	10bfff4c 	andi	r2,r2,65533
    bdcc:	2821883a 	mov	r16,r5
    bdd0:	d8cb883a 	add	r5,sp,r3
    bdd4:	dc811c15 	stw	r18,1136(sp)
    bdd8:	dc411b15 	stw	r17,1132(sp)
    bddc:	dfc11d15 	stw	ra,1140(sp)
    bde0:	2025883a 	mov	r18,r4
    bde4:	d881030d 	sth	r2,1036(sp)
    bde8:	dac11915 	stw	r11,1124(sp)
    bdec:	da81038d 	sth	r10,1038(sp)
    bdf0:	da410715 	stw	r9,1052(sp)
    bdf4:	da010915 	stw	r8,1060(sp)
    bdf8:	dec10015 	stw	sp,1024(sp)
    bdfc:	dec10415 	stw	sp,1040(sp)
    be00:	d8c10215 	stw	r3,1032(sp)
    be04:	d8c10515 	stw	r3,1044(sp)
    be08:	d8010615 	stw	zero,1048(sp)
    be0c:	000a9300 	call	a930 <___vfiprintf_internal_r>
    be10:	1023883a 	mov	r17,r2
    be14:	10000416 	blt	r2,zero,be28 <__sbprintf+0x80>
    be18:	d9410004 	addi	r5,sp,1024
    be1c:	9009883a 	mov	r4,r18
    be20:	0007a440 	call	7a44 <_fflush_r>
    be24:	10000d1e 	bne	r2,zero,be5c <__sbprintf+0xb4>
    be28:	d881030b 	ldhu	r2,1036(sp)
    be2c:	1080100c 	andi	r2,r2,64
    be30:	10000326 	beq	r2,zero,be40 <__sbprintf+0x98>
    be34:	8080030b 	ldhu	r2,12(r16)
    be38:	10801014 	ori	r2,r2,64
    be3c:	8080030d 	sth	r2,12(r16)
    be40:	8805883a 	mov	r2,r17
    be44:	dfc11d17 	ldw	ra,1140(sp)
    be48:	dc811c17 	ldw	r18,1136(sp)
    be4c:	dc411b17 	ldw	r17,1132(sp)
    be50:	dc011a17 	ldw	r16,1128(sp)
    be54:	dec11e04 	addi	sp,sp,1144
    be58:	f800283a 	ret
    be5c:	047fffc4 	movi	r17,-1
    be60:	003ff106 	br	be28 <__alt_data_end+0xff00be28>

0000be64 <_write_r>:
    be64:	defffd04 	addi	sp,sp,-12
    be68:	2805883a 	mov	r2,r5
    be6c:	dc000015 	stw	r16,0(sp)
    be70:	04000074 	movhi	r16,1
    be74:	dc400115 	stw	r17,4(sp)
    be78:	300b883a 	mov	r5,r6
    be7c:	8416f204 	addi	r16,r16,23496
    be80:	2023883a 	mov	r17,r4
    be84:	380d883a 	mov	r6,r7
    be88:	1009883a 	mov	r4,r2
    be8c:	dfc00215 	stw	ra,8(sp)
    be90:	80000015 	stw	zero,0(r16)
    be94:	000f7b00 	call	f7b0 <write>
    be98:	00ffffc4 	movi	r3,-1
    be9c:	10c00526 	beq	r2,r3,beb4 <_write_r+0x50>
    bea0:	dfc00217 	ldw	ra,8(sp)
    bea4:	dc400117 	ldw	r17,4(sp)
    bea8:	dc000017 	ldw	r16,0(sp)
    beac:	dec00304 	addi	sp,sp,12
    beb0:	f800283a 	ret
    beb4:	80c00017 	ldw	r3,0(r16)
    beb8:	183ff926 	beq	r3,zero,bea0 <__alt_data_end+0xff00bea0>
    bebc:	88c00015 	stw	r3,0(r17)
    bec0:	003ff706 	br	bea0 <__alt_data_end+0xff00bea0>

0000bec4 <_close_r>:
    bec4:	defffd04 	addi	sp,sp,-12
    bec8:	dc000015 	stw	r16,0(sp)
    becc:	04000074 	movhi	r16,1
    bed0:	dc400115 	stw	r17,4(sp)
    bed4:	8416f204 	addi	r16,r16,23496
    bed8:	2023883a 	mov	r17,r4
    bedc:	2809883a 	mov	r4,r5
    bee0:	dfc00215 	stw	ra,8(sp)
    bee4:	80000015 	stw	zero,0(r16)
    bee8:	000eef80 	call	eef8 <close>
    beec:	00ffffc4 	movi	r3,-1
    bef0:	10c00526 	beq	r2,r3,bf08 <_close_r+0x44>
    bef4:	dfc00217 	ldw	ra,8(sp)
    bef8:	dc400117 	ldw	r17,4(sp)
    befc:	dc000017 	ldw	r16,0(sp)
    bf00:	dec00304 	addi	sp,sp,12
    bf04:	f800283a 	ret
    bf08:	80c00017 	ldw	r3,0(r16)
    bf0c:	183ff926 	beq	r3,zero,bef4 <__alt_data_end+0xff00bef4>
    bf10:	88c00015 	stw	r3,0(r17)
    bf14:	003ff706 	br	bef4 <__alt_data_end+0xff00bef4>

0000bf18 <_calloc_r>:
    bf18:	298b383a 	mul	r5,r5,r6
    bf1c:	defffe04 	addi	sp,sp,-8
    bf20:	dfc00115 	stw	ra,4(sp)
    bf24:	dc000015 	stw	r16,0(sp)
    bf28:	00031440 	call	3144 <_malloc_r>
    bf2c:	10002926 	beq	r2,zero,bfd4 <_calloc_r+0xbc>
    bf30:	11bfff17 	ldw	r6,-4(r2)
    bf34:	1021883a 	mov	r16,r2
    bf38:	00bfff04 	movi	r2,-4
    bf3c:	308c703a 	and	r6,r6,r2
    bf40:	00c00904 	movi	r3,36
    bf44:	308d883a 	add	r6,r6,r2
    bf48:	19801636 	bltu	r3,r6,bfa4 <_calloc_r+0x8c>
    bf4c:	008004c4 	movi	r2,19
    bf50:	11800b2e 	bgeu	r2,r6,bf80 <_calloc_r+0x68>
    bf54:	80000015 	stw	zero,0(r16)
    bf58:	80000115 	stw	zero,4(r16)
    bf5c:	008006c4 	movi	r2,27
    bf60:	11801a2e 	bgeu	r2,r6,bfcc <_calloc_r+0xb4>
    bf64:	80000215 	stw	zero,8(r16)
    bf68:	80000315 	stw	zero,12(r16)
    bf6c:	30c0151e 	bne	r6,r3,bfc4 <_calloc_r+0xac>
    bf70:	80000415 	stw	zero,16(r16)
    bf74:	80800604 	addi	r2,r16,24
    bf78:	80000515 	stw	zero,20(r16)
    bf7c:	00000106 	br	bf84 <_calloc_r+0x6c>
    bf80:	8005883a 	mov	r2,r16
    bf84:	10000015 	stw	zero,0(r2)
    bf88:	10000115 	stw	zero,4(r2)
    bf8c:	10000215 	stw	zero,8(r2)
    bf90:	8005883a 	mov	r2,r16
    bf94:	dfc00117 	ldw	ra,4(sp)
    bf98:	dc000017 	ldw	r16,0(sp)
    bf9c:	dec00204 	addi	sp,sp,8
    bfa0:	f800283a 	ret
    bfa4:	000b883a 	mov	r5,zero
    bfa8:	8009883a 	mov	r4,r16
    bfac:	0008f080 	call	8f08 <memset>
    bfb0:	8005883a 	mov	r2,r16
    bfb4:	dfc00117 	ldw	ra,4(sp)
    bfb8:	dc000017 	ldw	r16,0(sp)
    bfbc:	dec00204 	addi	sp,sp,8
    bfc0:	f800283a 	ret
    bfc4:	80800404 	addi	r2,r16,16
    bfc8:	003fee06 	br	bf84 <__alt_data_end+0xff00bf84>
    bfcc:	80800204 	addi	r2,r16,8
    bfd0:	003fec06 	br	bf84 <__alt_data_end+0xff00bf84>
    bfd4:	0005883a 	mov	r2,zero
    bfd8:	003fee06 	br	bf94 <__alt_data_end+0xff00bf94>

0000bfdc <_fclose_r>:
    bfdc:	28003926 	beq	r5,zero,c0c4 <_fclose_r+0xe8>
    bfe0:	defffc04 	addi	sp,sp,-16
    bfe4:	dc400115 	stw	r17,4(sp)
    bfe8:	dc000015 	stw	r16,0(sp)
    bfec:	dfc00315 	stw	ra,12(sp)
    bff0:	dc800215 	stw	r18,8(sp)
    bff4:	2023883a 	mov	r17,r4
    bff8:	2821883a 	mov	r16,r5
    bffc:	20000226 	beq	r4,zero,c008 <_fclose_r+0x2c>
    c000:	20800e17 	ldw	r2,56(r4)
    c004:	10002726 	beq	r2,zero,c0a4 <_fclose_r+0xc8>
    c008:	8080030f 	ldh	r2,12(r16)
    c00c:	1000071e 	bne	r2,zero,c02c <_fclose_r+0x50>
    c010:	0005883a 	mov	r2,zero
    c014:	dfc00317 	ldw	ra,12(sp)
    c018:	dc800217 	ldw	r18,8(sp)
    c01c:	dc400117 	ldw	r17,4(sp)
    c020:	dc000017 	ldw	r16,0(sp)
    c024:	dec00404 	addi	sp,sp,16
    c028:	f800283a 	ret
    c02c:	800b883a 	mov	r5,r16
    c030:	8809883a 	mov	r4,r17
    c034:	00078280 	call	7828 <__sflush_r>
    c038:	1025883a 	mov	r18,r2
    c03c:	80800b17 	ldw	r2,44(r16)
    c040:	10000426 	beq	r2,zero,c054 <_fclose_r+0x78>
    c044:	81400717 	ldw	r5,28(r16)
    c048:	8809883a 	mov	r4,r17
    c04c:	103ee83a 	callr	r2
    c050:	10001616 	blt	r2,zero,c0ac <_fclose_r+0xd0>
    c054:	8080030b 	ldhu	r2,12(r16)
    c058:	1080200c 	andi	r2,r2,128
    c05c:	1000151e 	bne	r2,zero,c0b4 <_fclose_r+0xd8>
    c060:	81400c17 	ldw	r5,48(r16)
    c064:	28000526 	beq	r5,zero,c07c <_fclose_r+0xa0>
    c068:	80801004 	addi	r2,r16,64
    c06c:	28800226 	beq	r5,r2,c078 <_fclose_r+0x9c>
    c070:	8809883a 	mov	r4,r17
    c074:	0007f940 	call	7f94 <_free_r>
    c078:	80000c15 	stw	zero,48(r16)
    c07c:	81401117 	ldw	r5,68(r16)
    c080:	28000326 	beq	r5,zero,c090 <_fclose_r+0xb4>
    c084:	8809883a 	mov	r4,r17
    c088:	0007f940 	call	7f94 <_free_r>
    c08c:	80001115 	stw	zero,68(r16)
    c090:	0007e300 	call	7e30 <__sfp_lock_acquire>
    c094:	8000030d 	sth	zero,12(r16)
    c098:	0007e340 	call	7e34 <__sfp_lock_release>
    c09c:	9005883a 	mov	r2,r18
    c0a0:	003fdc06 	br	c014 <__alt_data_end+0xff00c014>
    c0a4:	0007e200 	call	7e20 <__sinit>
    c0a8:	003fd706 	br	c008 <__alt_data_end+0xff00c008>
    c0ac:	04bfffc4 	movi	r18,-1
    c0b0:	003fe806 	br	c054 <__alt_data_end+0xff00c054>
    c0b4:	81400417 	ldw	r5,16(r16)
    c0b8:	8809883a 	mov	r4,r17
    c0bc:	0007f940 	call	7f94 <_free_r>
    c0c0:	003fe706 	br	c060 <__alt_data_end+0xff00c060>
    c0c4:	0005883a 	mov	r2,zero
    c0c8:	f800283a 	ret

0000c0cc <fclose>:
    c0cc:	00800074 	movhi	r2,1
    c0d0:	108fce04 	addi	r2,r2,16184
    c0d4:	200b883a 	mov	r5,r4
    c0d8:	11000017 	ldw	r4,0(r2)
    c0dc:	000bfdc1 	jmpi	bfdc <_fclose_r>

0000c0e0 <__fputwc>:
    c0e0:	defff804 	addi	sp,sp,-32
    c0e4:	dcc00415 	stw	r19,16(sp)
    c0e8:	dc800315 	stw	r18,12(sp)
    c0ec:	dc000115 	stw	r16,4(sp)
    c0f0:	dfc00715 	stw	ra,28(sp)
    c0f4:	dd400615 	stw	r21,24(sp)
    c0f8:	dd000515 	stw	r20,20(sp)
    c0fc:	dc400215 	stw	r17,8(sp)
    c100:	2027883a 	mov	r19,r4
    c104:	2825883a 	mov	r18,r5
    c108:	3021883a 	mov	r16,r6
    c10c:	00089700 	call	8970 <__locale_mb_cur_max>
    c110:	00c00044 	movi	r3,1
    c114:	10c03e26 	beq	r2,r3,c210 <__fputwc+0x130>
    c118:	81c01704 	addi	r7,r16,92
    c11c:	900d883a 	mov	r6,r18
    c120:	d80b883a 	mov	r5,sp
    c124:	9809883a 	mov	r4,r19
    c128:	000c5b00 	call	c5b0 <_wcrtomb_r>
    c12c:	1029883a 	mov	r20,r2
    c130:	00bfffc4 	movi	r2,-1
    c134:	a0802026 	beq	r20,r2,c1b8 <__fputwc+0xd8>
    c138:	d9400003 	ldbu	r5,0(sp)
    c13c:	a0001c26 	beq	r20,zero,c1b0 <__fputwc+0xd0>
    c140:	0023883a 	mov	r17,zero
    c144:	05400284 	movi	r21,10
    c148:	00000906 	br	c170 <__fputwc+0x90>
    c14c:	80800017 	ldw	r2,0(r16)
    c150:	11400005 	stb	r5,0(r2)
    c154:	80c00017 	ldw	r3,0(r16)
    c158:	18c00044 	addi	r3,r3,1
    c15c:	80c00015 	stw	r3,0(r16)
    c160:	8c400044 	addi	r17,r17,1
    c164:	dc45883a 	add	r2,sp,r17
    c168:	8d00112e 	bgeu	r17,r20,c1b0 <__fputwc+0xd0>
    c16c:	11400003 	ldbu	r5,0(r2)
    c170:	80c00217 	ldw	r3,8(r16)
    c174:	18ffffc4 	addi	r3,r3,-1
    c178:	80c00215 	stw	r3,8(r16)
    c17c:	183ff30e 	bge	r3,zero,c14c <__alt_data_end+0xff00c14c>
    c180:	80800617 	ldw	r2,24(r16)
    c184:	18801916 	blt	r3,r2,c1ec <__fputwc+0x10c>
    c188:	80800017 	ldw	r2,0(r16)
    c18c:	11400005 	stb	r5,0(r2)
    c190:	80800017 	ldw	r2,0(r16)
    c194:	10c00003 	ldbu	r3,0(r2)
    c198:	10800044 	addi	r2,r2,1
    c19c:	1d402326 	beq	r3,r21,c22c <__fputwc+0x14c>
    c1a0:	80800015 	stw	r2,0(r16)
    c1a4:	8c400044 	addi	r17,r17,1
    c1a8:	dc45883a 	add	r2,sp,r17
    c1ac:	8d3fef36 	bltu	r17,r20,c16c <__alt_data_end+0xff00c16c>
    c1b0:	9005883a 	mov	r2,r18
    c1b4:	00000406 	br	c1c8 <__fputwc+0xe8>
    c1b8:	80c0030b 	ldhu	r3,12(r16)
    c1bc:	a005883a 	mov	r2,r20
    c1c0:	18c01014 	ori	r3,r3,64
    c1c4:	80c0030d 	sth	r3,12(r16)
    c1c8:	dfc00717 	ldw	ra,28(sp)
    c1cc:	dd400617 	ldw	r21,24(sp)
    c1d0:	dd000517 	ldw	r20,20(sp)
    c1d4:	dcc00417 	ldw	r19,16(sp)
    c1d8:	dc800317 	ldw	r18,12(sp)
    c1dc:	dc400217 	ldw	r17,8(sp)
    c1e0:	dc000117 	ldw	r16,4(sp)
    c1e4:	dec00804 	addi	sp,sp,32
    c1e8:	f800283a 	ret
    c1ec:	800d883a 	mov	r6,r16
    c1f0:	29403fcc 	andi	r5,r5,255
    c1f4:	9809883a 	mov	r4,r19
    c1f8:	000c4580 	call	c458 <__swbuf_r>
    c1fc:	10bfffe0 	cmpeqi	r2,r2,-1
    c200:	10803fcc 	andi	r2,r2,255
    c204:	103fd626 	beq	r2,zero,c160 <__alt_data_end+0xff00c160>
    c208:	00bfffc4 	movi	r2,-1
    c20c:	003fee06 	br	c1c8 <__alt_data_end+0xff00c1c8>
    c210:	90ffffc4 	addi	r3,r18,-1
    c214:	01003f84 	movi	r4,254
    c218:	20ffbf36 	bltu	r4,r3,c118 <__alt_data_end+0xff00c118>
    c21c:	900b883a 	mov	r5,r18
    c220:	dc800005 	stb	r18,0(sp)
    c224:	1029883a 	mov	r20,r2
    c228:	003fc506 	br	c140 <__alt_data_end+0xff00c140>
    c22c:	800d883a 	mov	r6,r16
    c230:	a80b883a 	mov	r5,r21
    c234:	9809883a 	mov	r4,r19
    c238:	000c4580 	call	c458 <__swbuf_r>
    c23c:	10bfffe0 	cmpeqi	r2,r2,-1
    c240:	003fef06 	br	c200 <__alt_data_end+0xff00c200>

0000c244 <_fputwc_r>:
    c244:	3080030b 	ldhu	r2,12(r6)
    c248:	10c8000c 	andi	r3,r2,8192
    c24c:	1800051e 	bne	r3,zero,c264 <_fputwc_r+0x20>
    c250:	30c01917 	ldw	r3,100(r6)
    c254:	10880014 	ori	r2,r2,8192
    c258:	3080030d 	sth	r2,12(r6)
    c25c:	18880014 	ori	r2,r3,8192
    c260:	30801915 	stw	r2,100(r6)
    c264:	000c0e01 	jmpi	c0e0 <__fputwc>

0000c268 <fputwc>:
    c268:	00800074 	movhi	r2,1
    c26c:	defffc04 	addi	sp,sp,-16
    c270:	108fce04 	addi	r2,r2,16184
    c274:	dc000115 	stw	r16,4(sp)
    c278:	14000017 	ldw	r16,0(r2)
    c27c:	dc400215 	stw	r17,8(sp)
    c280:	dfc00315 	stw	ra,12(sp)
    c284:	2023883a 	mov	r17,r4
    c288:	80000226 	beq	r16,zero,c294 <fputwc+0x2c>
    c28c:	80800e17 	ldw	r2,56(r16)
    c290:	10001026 	beq	r2,zero,c2d4 <fputwc+0x6c>
    c294:	2880030b 	ldhu	r2,12(r5)
    c298:	10c8000c 	andi	r3,r2,8192
    c29c:	1800051e 	bne	r3,zero,c2b4 <fputwc+0x4c>
    c2a0:	28c01917 	ldw	r3,100(r5)
    c2a4:	10880014 	ori	r2,r2,8192
    c2a8:	2880030d 	sth	r2,12(r5)
    c2ac:	18880014 	ori	r2,r3,8192
    c2b0:	28801915 	stw	r2,100(r5)
    c2b4:	280d883a 	mov	r6,r5
    c2b8:	8009883a 	mov	r4,r16
    c2bc:	880b883a 	mov	r5,r17
    c2c0:	dfc00317 	ldw	ra,12(sp)
    c2c4:	dc400217 	ldw	r17,8(sp)
    c2c8:	dc000117 	ldw	r16,4(sp)
    c2cc:	dec00404 	addi	sp,sp,16
    c2d0:	000c0e01 	jmpi	c0e0 <__fputwc>
    c2d4:	8009883a 	mov	r4,r16
    c2d8:	d9400015 	stw	r5,0(sp)
    c2dc:	0007e200 	call	7e20 <__sinit>
    c2e0:	d9400017 	ldw	r5,0(sp)
    c2e4:	003feb06 	br	c294 <__alt_data_end+0xff00c294>

0000c2e8 <_fstat_r>:
    c2e8:	defffd04 	addi	sp,sp,-12
    c2ec:	2805883a 	mov	r2,r5
    c2f0:	dc000015 	stw	r16,0(sp)
    c2f4:	04000074 	movhi	r16,1
    c2f8:	dc400115 	stw	r17,4(sp)
    c2fc:	8416f204 	addi	r16,r16,23496
    c300:	2023883a 	mov	r17,r4
    c304:	300b883a 	mov	r5,r6
    c308:	1009883a 	mov	r4,r2
    c30c:	dfc00215 	stw	ra,8(sp)
    c310:	80000015 	stw	zero,0(r16)
    c314:	000f0300 	call	f030 <fstat>
    c318:	00ffffc4 	movi	r3,-1
    c31c:	10c00526 	beq	r2,r3,c334 <_fstat_r+0x4c>
    c320:	dfc00217 	ldw	ra,8(sp)
    c324:	dc400117 	ldw	r17,4(sp)
    c328:	dc000017 	ldw	r16,0(sp)
    c32c:	dec00304 	addi	sp,sp,12
    c330:	f800283a 	ret
    c334:	80c00017 	ldw	r3,0(r16)
    c338:	183ff926 	beq	r3,zero,c320 <__alt_data_end+0xff00c320>
    c33c:	88c00015 	stw	r3,0(r17)
    c340:	003ff706 	br	c320 <__alt_data_end+0xff00c320>

0000c344 <_isatty_r>:
    c344:	defffd04 	addi	sp,sp,-12
    c348:	dc000015 	stw	r16,0(sp)
    c34c:	04000074 	movhi	r16,1
    c350:	dc400115 	stw	r17,4(sp)
    c354:	8416f204 	addi	r16,r16,23496
    c358:	2023883a 	mov	r17,r4
    c35c:	2809883a 	mov	r4,r5
    c360:	dfc00215 	stw	ra,8(sp)
    c364:	80000015 	stw	zero,0(r16)
    c368:	000f11c0 	call	f11c <isatty>
    c36c:	00ffffc4 	movi	r3,-1
    c370:	10c00526 	beq	r2,r3,c388 <_isatty_r+0x44>
    c374:	dfc00217 	ldw	ra,8(sp)
    c378:	dc400117 	ldw	r17,4(sp)
    c37c:	dc000017 	ldw	r16,0(sp)
    c380:	dec00304 	addi	sp,sp,12
    c384:	f800283a 	ret
    c388:	80c00017 	ldw	r3,0(r16)
    c38c:	183ff926 	beq	r3,zero,c374 <__alt_data_end+0xff00c374>
    c390:	88c00015 	stw	r3,0(r17)
    c394:	003ff706 	br	c374 <__alt_data_end+0xff00c374>

0000c398 <_lseek_r>:
    c398:	defffd04 	addi	sp,sp,-12
    c39c:	2805883a 	mov	r2,r5
    c3a0:	dc000015 	stw	r16,0(sp)
    c3a4:	04000074 	movhi	r16,1
    c3a8:	dc400115 	stw	r17,4(sp)
    c3ac:	300b883a 	mov	r5,r6
    c3b0:	8416f204 	addi	r16,r16,23496
    c3b4:	2023883a 	mov	r17,r4
    c3b8:	380d883a 	mov	r6,r7
    c3bc:	1009883a 	mov	r4,r2
    c3c0:	dfc00215 	stw	ra,8(sp)
    c3c4:	80000015 	stw	zero,0(r16)
    c3c8:	000f2e80 	call	f2e8 <lseek>
    c3cc:	00ffffc4 	movi	r3,-1
    c3d0:	10c00526 	beq	r2,r3,c3e8 <_lseek_r+0x50>
    c3d4:	dfc00217 	ldw	ra,8(sp)
    c3d8:	dc400117 	ldw	r17,4(sp)
    c3dc:	dc000017 	ldw	r16,0(sp)
    c3e0:	dec00304 	addi	sp,sp,12
    c3e4:	f800283a 	ret
    c3e8:	80c00017 	ldw	r3,0(r16)
    c3ec:	183ff926 	beq	r3,zero,c3d4 <__alt_data_end+0xff00c3d4>
    c3f0:	88c00015 	stw	r3,0(r17)
    c3f4:	003ff706 	br	c3d4 <__alt_data_end+0xff00c3d4>

0000c3f8 <_read_r>:
    c3f8:	defffd04 	addi	sp,sp,-12
    c3fc:	2805883a 	mov	r2,r5
    c400:	dc000015 	stw	r16,0(sp)
    c404:	04000074 	movhi	r16,1
    c408:	dc400115 	stw	r17,4(sp)
    c40c:	300b883a 	mov	r5,r6
    c410:	8416f204 	addi	r16,r16,23496
    c414:	2023883a 	mov	r17,r4
    c418:	380d883a 	mov	r6,r7
    c41c:	1009883a 	mov	r4,r2
    c420:	dfc00215 	stw	ra,8(sp)
    c424:	80000015 	stw	zero,0(r16)
    c428:	000f4bc0 	call	f4bc <read>
    c42c:	00ffffc4 	movi	r3,-1
    c430:	10c00526 	beq	r2,r3,c448 <_read_r+0x50>
    c434:	dfc00217 	ldw	ra,8(sp)
    c438:	dc400117 	ldw	r17,4(sp)
    c43c:	dc000017 	ldw	r16,0(sp)
    c440:	dec00304 	addi	sp,sp,12
    c444:	f800283a 	ret
    c448:	80c00017 	ldw	r3,0(r16)
    c44c:	183ff926 	beq	r3,zero,c434 <__alt_data_end+0xff00c434>
    c450:	88c00015 	stw	r3,0(r17)
    c454:	003ff706 	br	c434 <__alt_data_end+0xff00c434>

0000c458 <__swbuf_r>:
    c458:	defffb04 	addi	sp,sp,-20
    c45c:	dcc00315 	stw	r19,12(sp)
    c460:	dc800215 	stw	r18,8(sp)
    c464:	dc000015 	stw	r16,0(sp)
    c468:	dfc00415 	stw	ra,16(sp)
    c46c:	dc400115 	stw	r17,4(sp)
    c470:	2025883a 	mov	r18,r4
    c474:	2827883a 	mov	r19,r5
    c478:	3021883a 	mov	r16,r6
    c47c:	20000226 	beq	r4,zero,c488 <__swbuf_r+0x30>
    c480:	20800e17 	ldw	r2,56(r4)
    c484:	10004226 	beq	r2,zero,c590 <__swbuf_r+0x138>
    c488:	80800617 	ldw	r2,24(r16)
    c48c:	8100030b 	ldhu	r4,12(r16)
    c490:	80800215 	stw	r2,8(r16)
    c494:	2080020c 	andi	r2,r4,8
    c498:	10003626 	beq	r2,zero,c574 <__swbuf_r+0x11c>
    c49c:	80c00417 	ldw	r3,16(r16)
    c4a0:	18003426 	beq	r3,zero,c574 <__swbuf_r+0x11c>
    c4a4:	2088000c 	andi	r2,r4,8192
    c4a8:	9c403fcc 	andi	r17,r19,255
    c4ac:	10001a26 	beq	r2,zero,c518 <__swbuf_r+0xc0>
    c4b0:	80800017 	ldw	r2,0(r16)
    c4b4:	81000517 	ldw	r4,20(r16)
    c4b8:	10c7c83a 	sub	r3,r2,r3
    c4bc:	1900200e 	bge	r3,r4,c540 <__swbuf_r+0xe8>
    c4c0:	18c00044 	addi	r3,r3,1
    c4c4:	81000217 	ldw	r4,8(r16)
    c4c8:	11400044 	addi	r5,r2,1
    c4cc:	81400015 	stw	r5,0(r16)
    c4d0:	213fffc4 	addi	r4,r4,-1
    c4d4:	81000215 	stw	r4,8(r16)
    c4d8:	14c00005 	stb	r19,0(r2)
    c4dc:	80800517 	ldw	r2,20(r16)
    c4e0:	10c01e26 	beq	r2,r3,c55c <__swbuf_r+0x104>
    c4e4:	8080030b 	ldhu	r2,12(r16)
    c4e8:	1080004c 	andi	r2,r2,1
    c4ec:	10000226 	beq	r2,zero,c4f8 <__swbuf_r+0xa0>
    c4f0:	00800284 	movi	r2,10
    c4f4:	88801926 	beq	r17,r2,c55c <__swbuf_r+0x104>
    c4f8:	8805883a 	mov	r2,r17
    c4fc:	dfc00417 	ldw	ra,16(sp)
    c500:	dcc00317 	ldw	r19,12(sp)
    c504:	dc800217 	ldw	r18,8(sp)
    c508:	dc400117 	ldw	r17,4(sp)
    c50c:	dc000017 	ldw	r16,0(sp)
    c510:	dec00504 	addi	sp,sp,20
    c514:	f800283a 	ret
    c518:	81401917 	ldw	r5,100(r16)
    c51c:	00b7ffc4 	movi	r2,-8193
    c520:	21080014 	ori	r4,r4,8192
    c524:	2884703a 	and	r2,r5,r2
    c528:	80801915 	stw	r2,100(r16)
    c52c:	80800017 	ldw	r2,0(r16)
    c530:	8100030d 	sth	r4,12(r16)
    c534:	81000517 	ldw	r4,20(r16)
    c538:	10c7c83a 	sub	r3,r2,r3
    c53c:	193fe016 	blt	r3,r4,c4c0 <__alt_data_end+0xff00c4c0>
    c540:	800b883a 	mov	r5,r16
    c544:	9009883a 	mov	r4,r18
    c548:	0007a440 	call	7a44 <_fflush_r>
    c54c:	1000071e 	bne	r2,zero,c56c <__swbuf_r+0x114>
    c550:	80800017 	ldw	r2,0(r16)
    c554:	00c00044 	movi	r3,1
    c558:	003fda06 	br	c4c4 <__alt_data_end+0xff00c4c4>
    c55c:	800b883a 	mov	r5,r16
    c560:	9009883a 	mov	r4,r18
    c564:	0007a440 	call	7a44 <_fflush_r>
    c568:	103fe326 	beq	r2,zero,c4f8 <__alt_data_end+0xff00c4f8>
    c56c:	00bfffc4 	movi	r2,-1
    c570:	003fe206 	br	c4fc <__alt_data_end+0xff00c4fc>
    c574:	800b883a 	mov	r5,r16
    c578:	9009883a 	mov	r4,r18
    c57c:	0005e4c0 	call	5e4c <__swsetup_r>
    c580:	103ffa1e 	bne	r2,zero,c56c <__alt_data_end+0xff00c56c>
    c584:	8100030b 	ldhu	r4,12(r16)
    c588:	80c00417 	ldw	r3,16(r16)
    c58c:	003fc506 	br	c4a4 <__alt_data_end+0xff00c4a4>
    c590:	0007e200 	call	7e20 <__sinit>
    c594:	003fbc06 	br	c488 <__alt_data_end+0xff00c488>

0000c598 <__swbuf>:
    c598:	00800074 	movhi	r2,1
    c59c:	108fce04 	addi	r2,r2,16184
    c5a0:	280d883a 	mov	r6,r5
    c5a4:	200b883a 	mov	r5,r4
    c5a8:	11000017 	ldw	r4,0(r2)
    c5ac:	000c4581 	jmpi	c458 <__swbuf_r>

0000c5b0 <_wcrtomb_r>:
    c5b0:	defff604 	addi	sp,sp,-40
    c5b4:	00800074 	movhi	r2,1
    c5b8:	dc800815 	stw	r18,32(sp)
    c5bc:	dc400715 	stw	r17,28(sp)
    c5c0:	dc000615 	stw	r16,24(sp)
    c5c4:	108fd004 	addi	r2,r2,16192
    c5c8:	dfc00915 	stw	ra,36(sp)
    c5cc:	2021883a 	mov	r16,r4
    c5d0:	3823883a 	mov	r17,r7
    c5d4:	14800017 	ldw	r18,0(r2)
    c5d8:	28001426 	beq	r5,zero,c62c <_wcrtomb_r+0x7c>
    c5dc:	d9400415 	stw	r5,16(sp)
    c5e0:	d9800515 	stw	r6,20(sp)
    c5e4:	00089640 	call	8964 <__locale_charset>
    c5e8:	d9800517 	ldw	r6,20(sp)
    c5ec:	d9400417 	ldw	r5,16(sp)
    c5f0:	100f883a 	mov	r7,r2
    c5f4:	dc400015 	stw	r17,0(sp)
    c5f8:	8009883a 	mov	r4,r16
    c5fc:	903ee83a 	callr	r18
    c600:	00ffffc4 	movi	r3,-1
    c604:	10c0031e 	bne	r2,r3,c614 <_wcrtomb_r+0x64>
    c608:	88000015 	stw	zero,0(r17)
    c60c:	00c02284 	movi	r3,138
    c610:	80c00015 	stw	r3,0(r16)
    c614:	dfc00917 	ldw	ra,36(sp)
    c618:	dc800817 	ldw	r18,32(sp)
    c61c:	dc400717 	ldw	r17,28(sp)
    c620:	dc000617 	ldw	r16,24(sp)
    c624:	dec00a04 	addi	sp,sp,40
    c628:	f800283a 	ret
    c62c:	00089640 	call	8964 <__locale_charset>
    c630:	100f883a 	mov	r7,r2
    c634:	dc400015 	stw	r17,0(sp)
    c638:	000d883a 	mov	r6,zero
    c63c:	d9400104 	addi	r5,sp,4
    c640:	8009883a 	mov	r4,r16
    c644:	903ee83a 	callr	r18
    c648:	003fed06 	br	c600 <__alt_data_end+0xff00c600>

0000c64c <wcrtomb>:
    c64c:	defff604 	addi	sp,sp,-40
    c650:	00800074 	movhi	r2,1
    c654:	dc800615 	stw	r18,24(sp)
    c658:	dc400515 	stw	r17,20(sp)
    c65c:	108fce04 	addi	r2,r2,16184
    c660:	dfc00915 	stw	ra,36(sp)
    c664:	dd000815 	stw	r20,32(sp)
    c668:	dcc00715 	stw	r19,28(sp)
    c66c:	dc000415 	stw	r16,16(sp)
    c670:	3025883a 	mov	r18,r6
    c674:	14400017 	ldw	r17,0(r2)
    c678:	20001926 	beq	r4,zero,c6e0 <wcrtomb+0x94>
    c67c:	00800074 	movhi	r2,1
    c680:	108fd004 	addi	r2,r2,16192
    c684:	15000017 	ldw	r20,0(r2)
    c688:	2021883a 	mov	r16,r4
    c68c:	2827883a 	mov	r19,r5
    c690:	00089640 	call	8964 <__locale_charset>
    c694:	100f883a 	mov	r7,r2
    c698:	dc800015 	stw	r18,0(sp)
    c69c:	980d883a 	mov	r6,r19
    c6a0:	800b883a 	mov	r5,r16
    c6a4:	8809883a 	mov	r4,r17
    c6a8:	a03ee83a 	callr	r20
    c6ac:	00ffffc4 	movi	r3,-1
    c6b0:	10c0031e 	bne	r2,r3,c6c0 <wcrtomb+0x74>
    c6b4:	90000015 	stw	zero,0(r18)
    c6b8:	00c02284 	movi	r3,138
    c6bc:	88c00015 	stw	r3,0(r17)
    c6c0:	dfc00917 	ldw	ra,36(sp)
    c6c4:	dd000817 	ldw	r20,32(sp)
    c6c8:	dcc00717 	ldw	r19,28(sp)
    c6cc:	dc800617 	ldw	r18,24(sp)
    c6d0:	dc400517 	ldw	r17,20(sp)
    c6d4:	dc000417 	ldw	r16,16(sp)
    c6d8:	dec00a04 	addi	sp,sp,40
    c6dc:	f800283a 	ret
    c6e0:	00800074 	movhi	r2,1
    c6e4:	108fd004 	addi	r2,r2,16192
    c6e8:	14000017 	ldw	r16,0(r2)
    c6ec:	00089640 	call	8964 <__locale_charset>
    c6f0:	100f883a 	mov	r7,r2
    c6f4:	dc800015 	stw	r18,0(sp)
    c6f8:	000d883a 	mov	r6,zero
    c6fc:	d9400104 	addi	r5,sp,4
    c700:	8809883a 	mov	r4,r17
    c704:	803ee83a 	callr	r16
    c708:	003fe806 	br	c6ac <__alt_data_end+0xff00c6ac>

0000c70c <__ascii_wctomb>:
    c70c:	28000526 	beq	r5,zero,c724 <__ascii_wctomb+0x18>
    c710:	00803fc4 	movi	r2,255
    c714:	11800536 	bltu	r2,r6,c72c <__ascii_wctomb+0x20>
    c718:	29800005 	stb	r6,0(r5)
    c71c:	00800044 	movi	r2,1
    c720:	f800283a 	ret
    c724:	0005883a 	mov	r2,zero
    c728:	f800283a 	ret
    c72c:	00802284 	movi	r2,138
    c730:	20800015 	stw	r2,0(r4)
    c734:	00bfffc4 	movi	r2,-1
    c738:	f800283a 	ret

0000c73c <_wctomb_r>:
    c73c:	00800074 	movhi	r2,1
    c740:	defff904 	addi	sp,sp,-28
    c744:	108fd004 	addi	r2,r2,16192
    c748:	dfc00615 	stw	ra,24(sp)
    c74c:	dc400515 	stw	r17,20(sp)
    c750:	dc000415 	stw	r16,16(sp)
    c754:	3823883a 	mov	r17,r7
    c758:	14000017 	ldw	r16,0(r2)
    c75c:	d9000115 	stw	r4,4(sp)
    c760:	d9400215 	stw	r5,8(sp)
    c764:	d9800315 	stw	r6,12(sp)
    c768:	00089640 	call	8964 <__locale_charset>
    c76c:	d9800317 	ldw	r6,12(sp)
    c770:	d9400217 	ldw	r5,8(sp)
    c774:	d9000117 	ldw	r4,4(sp)
    c778:	100f883a 	mov	r7,r2
    c77c:	dc400015 	stw	r17,0(sp)
    c780:	803ee83a 	callr	r16
    c784:	dfc00617 	ldw	ra,24(sp)
    c788:	dc400517 	ldw	r17,20(sp)
    c78c:	dc000417 	ldw	r16,16(sp)
    c790:	dec00704 	addi	sp,sp,28
    c794:	f800283a 	ret

0000c798 <__udivdi3>:
    c798:	defff504 	addi	sp,sp,-44
    c79c:	dcc00415 	stw	r19,16(sp)
    c7a0:	dc000115 	stw	r16,4(sp)
    c7a4:	dfc00a15 	stw	ra,40(sp)
    c7a8:	df000915 	stw	fp,36(sp)
    c7ac:	ddc00815 	stw	r23,32(sp)
    c7b0:	dd800715 	stw	r22,28(sp)
    c7b4:	dd400615 	stw	r21,24(sp)
    c7b8:	dd000515 	stw	r20,20(sp)
    c7bc:	dc800315 	stw	r18,12(sp)
    c7c0:	dc400215 	stw	r17,8(sp)
    c7c4:	2027883a 	mov	r19,r4
    c7c8:	2821883a 	mov	r16,r5
    c7cc:	3800411e 	bne	r7,zero,c8d4 <__udivdi3+0x13c>
    c7d0:	3023883a 	mov	r17,r6
    c7d4:	2025883a 	mov	r18,r4
    c7d8:	2980522e 	bgeu	r5,r6,c924 <__udivdi3+0x18c>
    c7dc:	00bfffd4 	movui	r2,65535
    c7e0:	282d883a 	mov	r22,r5
    c7e4:	1180a836 	bltu	r2,r6,ca88 <__udivdi3+0x2f0>
    c7e8:	00803fc4 	movi	r2,255
    c7ec:	1185803a 	cmpltu	r2,r2,r6
    c7f0:	100490fa 	slli	r2,r2,3
    c7f4:	3086d83a 	srl	r3,r6,r2
    c7f8:	01000074 	movhi	r4,1
    c7fc:	21082284 	addi	r4,r4,8330
    c800:	20c7883a 	add	r3,r4,r3
    c804:	18c00003 	ldbu	r3,0(r3)
    c808:	1885883a 	add	r2,r3,r2
    c80c:	00c00804 	movi	r3,32
    c810:	1887c83a 	sub	r3,r3,r2
    c814:	18000526 	beq	r3,zero,c82c <__udivdi3+0x94>
    c818:	80e0983a 	sll	r16,r16,r3
    c81c:	9884d83a 	srl	r2,r19,r2
    c820:	30e2983a 	sll	r17,r6,r3
    c824:	98e4983a 	sll	r18,r19,r3
    c828:	142cb03a 	or	r22,r2,r16
    c82c:	882ad43a 	srli	r21,r17,16
    c830:	b009883a 	mov	r4,r22
    c834:	8d3fffcc 	andi	r20,r17,65535
    c838:	a80b883a 	mov	r5,r21
    c83c:	00026d00 	call	26d0 <__umodsi3>
    c840:	b009883a 	mov	r4,r22
    c844:	a80b883a 	mov	r5,r21
    c848:	1027883a 	mov	r19,r2
    c84c:	000266c0 	call	266c <__udivsi3>
    c850:	102d883a 	mov	r22,r2
    c854:	9826943a 	slli	r19,r19,16
    c858:	9004d43a 	srli	r2,r18,16
    c85c:	a5a1383a 	mul	r16,r20,r22
    c860:	14c4b03a 	or	r2,r2,r19
    c864:	1400052e 	bgeu	r2,r16,c87c <__udivdi3+0xe4>
    c868:	1445883a 	add	r2,r2,r17
    c86c:	b0ffffc4 	addi	r3,r22,-1
    c870:	14400136 	bltu	r2,r17,c878 <__udivdi3+0xe0>
    c874:	14012336 	bltu	r2,r16,cd04 <__udivdi3+0x56c>
    c878:	182d883a 	mov	r22,r3
    c87c:	1421c83a 	sub	r16,r2,r16
    c880:	a80b883a 	mov	r5,r21
    c884:	8009883a 	mov	r4,r16
    c888:	00026d00 	call	26d0 <__umodsi3>
    c88c:	1027883a 	mov	r19,r2
    c890:	a80b883a 	mov	r5,r21
    c894:	8009883a 	mov	r4,r16
    c898:	000266c0 	call	266c <__udivsi3>
    c89c:	9826943a 	slli	r19,r19,16
    c8a0:	a0a9383a 	mul	r20,r20,r2
    c8a4:	94bfffcc 	andi	r18,r18,65535
    c8a8:	94e4b03a 	or	r18,r18,r19
    c8ac:	9500052e 	bgeu	r18,r20,c8c4 <__udivdi3+0x12c>
    c8b0:	8ca5883a 	add	r18,r17,r18
    c8b4:	10ffffc4 	addi	r3,r2,-1
    c8b8:	9440f136 	bltu	r18,r17,cc80 <__udivdi3+0x4e8>
    c8bc:	9500f02e 	bgeu	r18,r20,cc80 <__udivdi3+0x4e8>
    c8c0:	10bfff84 	addi	r2,r2,-2
    c8c4:	b00c943a 	slli	r6,r22,16
    c8c8:	0007883a 	mov	r3,zero
    c8cc:	3084b03a 	or	r2,r6,r2
    c8d0:	00005906 	br	ca38 <__udivdi3+0x2a0>
    c8d4:	29c05636 	bltu	r5,r7,ca30 <__udivdi3+0x298>
    c8d8:	00bfffd4 	movui	r2,65535
    c8dc:	11c0622e 	bgeu	r2,r7,ca68 <__udivdi3+0x2d0>
    c8e0:	00804034 	movhi	r2,256
    c8e4:	10bfffc4 	addi	r2,r2,-1
    c8e8:	11c0ee36 	bltu	r2,r7,cca4 <__udivdi3+0x50c>
    c8ec:	00800404 	movi	r2,16
    c8f0:	3886d83a 	srl	r3,r7,r2
    c8f4:	01000074 	movhi	r4,1
    c8f8:	21082284 	addi	r4,r4,8330
    c8fc:	20c7883a 	add	r3,r4,r3
    c900:	18c00003 	ldbu	r3,0(r3)
    c904:	05400804 	movi	r21,32
    c908:	1885883a 	add	r2,r3,r2
    c90c:	a8abc83a 	sub	r21,r21,r2
    c910:	a800621e 	bne	r21,zero,ca9c <__udivdi3+0x304>
    c914:	3c00e936 	bltu	r7,r16,ccbc <__udivdi3+0x524>
    c918:	9985403a 	cmpgeu	r2,r19,r6
    c91c:	0007883a 	mov	r3,zero
    c920:	00004506 	br	ca38 <__udivdi3+0x2a0>
    c924:	3000041e 	bne	r6,zero,c938 <__udivdi3+0x1a0>
    c928:	000b883a 	mov	r5,zero
    c92c:	01000044 	movi	r4,1
    c930:	000266c0 	call	266c <__udivsi3>
    c934:	1023883a 	mov	r17,r2
    c938:	00bfffd4 	movui	r2,65535
    c93c:	14404e2e 	bgeu	r2,r17,ca78 <__udivdi3+0x2e0>
    c940:	00804034 	movhi	r2,256
    c944:	10bfffc4 	addi	r2,r2,-1
    c948:	1440d836 	bltu	r2,r17,ccac <__udivdi3+0x514>
    c94c:	00800404 	movi	r2,16
    c950:	8886d83a 	srl	r3,r17,r2
    c954:	01000074 	movhi	r4,1
    c958:	21082284 	addi	r4,r4,8330
    c95c:	20c7883a 	add	r3,r4,r3
    c960:	18c00003 	ldbu	r3,0(r3)
    c964:	1885883a 	add	r2,r3,r2
    c968:	00c00804 	movi	r3,32
    c96c:	1887c83a 	sub	r3,r3,r2
    c970:	18008f1e 	bne	r3,zero,cbb0 <__udivdi3+0x418>
    c974:	882ad43a 	srli	r21,r17,16
    c978:	8461c83a 	sub	r16,r16,r17
    c97c:	8d3fffcc 	andi	r20,r17,65535
    c980:	00c00044 	movi	r3,1
    c984:	8009883a 	mov	r4,r16
    c988:	a80b883a 	mov	r5,r21
    c98c:	d8c00015 	stw	r3,0(sp)
    c990:	00026d00 	call	26d0 <__umodsi3>
    c994:	8009883a 	mov	r4,r16
    c998:	a80b883a 	mov	r5,r21
    c99c:	1027883a 	mov	r19,r2
    c9a0:	000266c0 	call	266c <__udivsi3>
    c9a4:	9826943a 	slli	r19,r19,16
    c9a8:	9008d43a 	srli	r4,r18,16
    c9ac:	1521383a 	mul	r16,r2,r20
    c9b0:	102d883a 	mov	r22,r2
    c9b4:	24c8b03a 	or	r4,r4,r19
    c9b8:	d8c00017 	ldw	r3,0(sp)
    c9bc:	2400052e 	bgeu	r4,r16,c9d4 <__udivdi3+0x23c>
    c9c0:	2449883a 	add	r4,r4,r17
    c9c4:	b0bfffc4 	addi	r2,r22,-1
    c9c8:	24400136 	bltu	r4,r17,c9d0 <__udivdi3+0x238>
    c9cc:	2400ca36 	bltu	r4,r16,ccf8 <__udivdi3+0x560>
    c9d0:	102d883a 	mov	r22,r2
    c9d4:	2421c83a 	sub	r16,r4,r16
    c9d8:	a80b883a 	mov	r5,r21
    c9dc:	8009883a 	mov	r4,r16
    c9e0:	d8c00015 	stw	r3,0(sp)
    c9e4:	00026d00 	call	26d0 <__umodsi3>
    c9e8:	1027883a 	mov	r19,r2
    c9ec:	a80b883a 	mov	r5,r21
    c9f0:	8009883a 	mov	r4,r16
    c9f4:	000266c0 	call	266c <__udivsi3>
    c9f8:	9826943a 	slli	r19,r19,16
    c9fc:	1529383a 	mul	r20,r2,r20
    ca00:	94bfffcc 	andi	r18,r18,65535
    ca04:	94e4b03a 	or	r18,r18,r19
    ca08:	d8c00017 	ldw	r3,0(sp)
    ca0c:	9500052e 	bgeu	r18,r20,ca24 <__udivdi3+0x28c>
    ca10:	8ca5883a 	add	r18,r17,r18
    ca14:	113fffc4 	addi	r4,r2,-1
    ca18:	94409736 	bltu	r18,r17,cc78 <__udivdi3+0x4e0>
    ca1c:	9500962e 	bgeu	r18,r20,cc78 <__udivdi3+0x4e0>
    ca20:	10bfff84 	addi	r2,r2,-2
    ca24:	b00c943a 	slli	r6,r22,16
    ca28:	3084b03a 	or	r2,r6,r2
    ca2c:	00000206 	br	ca38 <__udivdi3+0x2a0>
    ca30:	0007883a 	mov	r3,zero
    ca34:	0005883a 	mov	r2,zero
    ca38:	dfc00a17 	ldw	ra,40(sp)
    ca3c:	df000917 	ldw	fp,36(sp)
    ca40:	ddc00817 	ldw	r23,32(sp)
    ca44:	dd800717 	ldw	r22,28(sp)
    ca48:	dd400617 	ldw	r21,24(sp)
    ca4c:	dd000517 	ldw	r20,20(sp)
    ca50:	dcc00417 	ldw	r19,16(sp)
    ca54:	dc800317 	ldw	r18,12(sp)
    ca58:	dc400217 	ldw	r17,8(sp)
    ca5c:	dc000117 	ldw	r16,4(sp)
    ca60:	dec00b04 	addi	sp,sp,44
    ca64:	f800283a 	ret
    ca68:	00803fc4 	movi	r2,255
    ca6c:	11c5803a 	cmpltu	r2,r2,r7
    ca70:	100490fa 	slli	r2,r2,3
    ca74:	003f9e06 	br	c8f0 <__alt_data_end+0xff00c8f0>
    ca78:	00803fc4 	movi	r2,255
    ca7c:	1445803a 	cmpltu	r2,r2,r17
    ca80:	100490fa 	slli	r2,r2,3
    ca84:	003fb206 	br	c950 <__alt_data_end+0xff00c950>
    ca88:	00804034 	movhi	r2,256
    ca8c:	10bfffc4 	addi	r2,r2,-1
    ca90:	11808836 	bltu	r2,r6,ccb4 <__udivdi3+0x51c>
    ca94:	00800404 	movi	r2,16
    ca98:	003f5606 	br	c7f4 <__alt_data_end+0xff00c7f4>
    ca9c:	30aed83a 	srl	r23,r6,r2
    caa0:	3d4e983a 	sll	r7,r7,r21
    caa4:	80acd83a 	srl	r22,r16,r2
    caa8:	9884d83a 	srl	r2,r19,r2
    caac:	3deeb03a 	or	r23,r7,r23
    cab0:	b824d43a 	srli	r18,r23,16
    cab4:	8560983a 	sll	r16,r16,r21
    cab8:	b009883a 	mov	r4,r22
    cabc:	900b883a 	mov	r5,r18
    cac0:	3568983a 	sll	r20,r6,r21
    cac4:	1420b03a 	or	r16,r2,r16
    cac8:	00026d00 	call	26d0 <__umodsi3>
    cacc:	b009883a 	mov	r4,r22
    cad0:	900b883a 	mov	r5,r18
    cad4:	1023883a 	mov	r17,r2
    cad8:	000266c0 	call	266c <__udivsi3>
    cadc:	8808943a 	slli	r4,r17,16
    cae0:	bf3fffcc 	andi	fp,r23,65535
    cae4:	8006d43a 	srli	r3,r16,16
    cae8:	e0a3383a 	mul	r17,fp,r2
    caec:	100d883a 	mov	r6,r2
    caf0:	1906b03a 	or	r3,r3,r4
    caf4:	1c40042e 	bgeu	r3,r17,cb08 <__udivdi3+0x370>
    caf8:	1dc7883a 	add	r3,r3,r23
    cafc:	10bfffc4 	addi	r2,r2,-1
    cb00:	1dc0752e 	bgeu	r3,r23,ccd8 <__udivdi3+0x540>
    cb04:	100d883a 	mov	r6,r2
    cb08:	1c63c83a 	sub	r17,r3,r17
    cb0c:	900b883a 	mov	r5,r18
    cb10:	8809883a 	mov	r4,r17
    cb14:	d9800015 	stw	r6,0(sp)
    cb18:	00026d00 	call	26d0 <__umodsi3>
    cb1c:	102d883a 	mov	r22,r2
    cb20:	8809883a 	mov	r4,r17
    cb24:	900b883a 	mov	r5,r18
    cb28:	000266c0 	call	266c <__udivsi3>
    cb2c:	b02c943a 	slli	r22,r22,16
    cb30:	e089383a 	mul	r4,fp,r2
    cb34:	843fffcc 	andi	r16,r16,65535
    cb38:	85a0b03a 	or	r16,r16,r22
    cb3c:	d9800017 	ldw	r6,0(sp)
    cb40:	8100042e 	bgeu	r16,r4,cb54 <__udivdi3+0x3bc>
    cb44:	85e1883a 	add	r16,r16,r23
    cb48:	10ffffc4 	addi	r3,r2,-1
    cb4c:	85c05e2e 	bgeu	r16,r23,ccc8 <__udivdi3+0x530>
    cb50:	1805883a 	mov	r2,r3
    cb54:	300c943a 	slli	r6,r6,16
    cb58:	a17fffcc 	andi	r5,r20,65535
    cb5c:	a028d43a 	srli	r20,r20,16
    cb60:	3084b03a 	or	r2,r6,r2
    cb64:	10ffffcc 	andi	r3,r2,65535
    cb68:	100cd43a 	srli	r6,r2,16
    cb6c:	194f383a 	mul	r7,r3,r5
    cb70:	1d07383a 	mul	r3,r3,r20
    cb74:	314b383a 	mul	r5,r6,r5
    cb78:	3810d43a 	srli	r8,r7,16
    cb7c:	8121c83a 	sub	r16,r16,r4
    cb80:	1947883a 	add	r3,r3,r5
    cb84:	40c7883a 	add	r3,r8,r3
    cb88:	350d383a 	mul	r6,r6,r20
    cb8c:	1940022e 	bgeu	r3,r5,cb98 <__udivdi3+0x400>
    cb90:	01000074 	movhi	r4,1
    cb94:	310d883a 	add	r6,r6,r4
    cb98:	1828d43a 	srli	r20,r3,16
    cb9c:	a18d883a 	add	r6,r20,r6
    cba0:	81803e36 	bltu	r16,r6,cc9c <__udivdi3+0x504>
    cba4:	81803826 	beq	r16,r6,cc88 <__udivdi3+0x4f0>
    cba8:	0007883a 	mov	r3,zero
    cbac:	003fa206 	br	ca38 <__alt_data_end+0xff00ca38>
    cbb0:	88e2983a 	sll	r17,r17,r3
    cbb4:	80a8d83a 	srl	r20,r16,r2
    cbb8:	80e0983a 	sll	r16,r16,r3
    cbbc:	882ad43a 	srli	r21,r17,16
    cbc0:	9884d83a 	srl	r2,r19,r2
    cbc4:	a009883a 	mov	r4,r20
    cbc8:	a80b883a 	mov	r5,r21
    cbcc:	142eb03a 	or	r23,r2,r16
    cbd0:	98e4983a 	sll	r18,r19,r3
    cbd4:	00026d00 	call	26d0 <__umodsi3>
    cbd8:	a009883a 	mov	r4,r20
    cbdc:	a80b883a 	mov	r5,r21
    cbe0:	1021883a 	mov	r16,r2
    cbe4:	000266c0 	call	266c <__udivsi3>
    cbe8:	1039883a 	mov	fp,r2
    cbec:	8d3fffcc 	andi	r20,r17,65535
    cbf0:	8020943a 	slli	r16,r16,16
    cbf4:	b804d43a 	srli	r2,r23,16
    cbf8:	a72d383a 	mul	r22,r20,fp
    cbfc:	1404b03a 	or	r2,r2,r16
    cc00:	1580062e 	bgeu	r2,r22,cc1c <__udivdi3+0x484>
    cc04:	1445883a 	add	r2,r2,r17
    cc08:	e0ffffc4 	addi	r3,fp,-1
    cc0c:	14403836 	bltu	r2,r17,ccf0 <__udivdi3+0x558>
    cc10:	1580372e 	bgeu	r2,r22,ccf0 <__udivdi3+0x558>
    cc14:	e73fff84 	addi	fp,fp,-2
    cc18:	1445883a 	add	r2,r2,r17
    cc1c:	15adc83a 	sub	r22,r2,r22
    cc20:	a80b883a 	mov	r5,r21
    cc24:	b009883a 	mov	r4,r22
    cc28:	00026d00 	call	26d0 <__umodsi3>
    cc2c:	1027883a 	mov	r19,r2
    cc30:	b009883a 	mov	r4,r22
    cc34:	a80b883a 	mov	r5,r21
    cc38:	000266c0 	call	266c <__udivsi3>
    cc3c:	9826943a 	slli	r19,r19,16
    cc40:	a0a1383a 	mul	r16,r20,r2
    cc44:	b93fffcc 	andi	r4,r23,65535
    cc48:	24c8b03a 	or	r4,r4,r19
    cc4c:	2400062e 	bgeu	r4,r16,cc68 <__udivdi3+0x4d0>
    cc50:	2449883a 	add	r4,r4,r17
    cc54:	10ffffc4 	addi	r3,r2,-1
    cc58:	24402336 	bltu	r4,r17,cce8 <__udivdi3+0x550>
    cc5c:	2400222e 	bgeu	r4,r16,cce8 <__udivdi3+0x550>
    cc60:	10bfff84 	addi	r2,r2,-2
    cc64:	2449883a 	add	r4,r4,r17
    cc68:	e038943a 	slli	fp,fp,16
    cc6c:	2421c83a 	sub	r16,r4,r16
    cc70:	e086b03a 	or	r3,fp,r2
    cc74:	003f4306 	br	c984 <__alt_data_end+0xff00c984>
    cc78:	2005883a 	mov	r2,r4
    cc7c:	003f6906 	br	ca24 <__alt_data_end+0xff00ca24>
    cc80:	1805883a 	mov	r2,r3
    cc84:	003f0f06 	br	c8c4 <__alt_data_end+0xff00c8c4>
    cc88:	1806943a 	slli	r3,r3,16
    cc8c:	9d66983a 	sll	r19,r19,r21
    cc90:	39ffffcc 	andi	r7,r7,65535
    cc94:	19c7883a 	add	r3,r3,r7
    cc98:	98ffc32e 	bgeu	r19,r3,cba8 <__alt_data_end+0xff00cba8>
    cc9c:	10bfffc4 	addi	r2,r2,-1
    cca0:	003fc106 	br	cba8 <__alt_data_end+0xff00cba8>
    cca4:	00800604 	movi	r2,24
    cca8:	003f1106 	br	c8f0 <__alt_data_end+0xff00c8f0>
    ccac:	00800604 	movi	r2,24
    ccb0:	003f2706 	br	c950 <__alt_data_end+0xff00c950>
    ccb4:	00800604 	movi	r2,24
    ccb8:	003ece06 	br	c7f4 <__alt_data_end+0xff00c7f4>
    ccbc:	0007883a 	mov	r3,zero
    ccc0:	00800044 	movi	r2,1
    ccc4:	003f5c06 	br	ca38 <__alt_data_end+0xff00ca38>
    ccc8:	813fa12e 	bgeu	r16,r4,cb50 <__alt_data_end+0xff00cb50>
    cccc:	10bfff84 	addi	r2,r2,-2
    ccd0:	85e1883a 	add	r16,r16,r23
    ccd4:	003f9f06 	br	cb54 <__alt_data_end+0xff00cb54>
    ccd8:	1c7f8a2e 	bgeu	r3,r17,cb04 <__alt_data_end+0xff00cb04>
    ccdc:	31bfff84 	addi	r6,r6,-2
    cce0:	1dc7883a 	add	r3,r3,r23
    cce4:	003f8806 	br	cb08 <__alt_data_end+0xff00cb08>
    cce8:	1805883a 	mov	r2,r3
    ccec:	003fde06 	br	cc68 <__alt_data_end+0xff00cc68>
    ccf0:	1839883a 	mov	fp,r3
    ccf4:	003fc906 	br	cc1c <__alt_data_end+0xff00cc1c>
    ccf8:	b5bfff84 	addi	r22,r22,-2
    ccfc:	2449883a 	add	r4,r4,r17
    cd00:	003f3406 	br	c9d4 <__alt_data_end+0xff00c9d4>
    cd04:	b5bfff84 	addi	r22,r22,-2
    cd08:	1445883a 	add	r2,r2,r17
    cd0c:	003edb06 	br	c87c <__alt_data_end+0xff00c87c>

0000cd10 <__umoddi3>:
    cd10:	defff404 	addi	sp,sp,-48
    cd14:	df000a15 	stw	fp,40(sp)
    cd18:	dc400315 	stw	r17,12(sp)
    cd1c:	dc000215 	stw	r16,8(sp)
    cd20:	dfc00b15 	stw	ra,44(sp)
    cd24:	ddc00915 	stw	r23,36(sp)
    cd28:	dd800815 	stw	r22,32(sp)
    cd2c:	dd400715 	stw	r21,28(sp)
    cd30:	dd000615 	stw	r20,24(sp)
    cd34:	dcc00515 	stw	r19,20(sp)
    cd38:	dc800415 	stw	r18,16(sp)
    cd3c:	2021883a 	mov	r16,r4
    cd40:	2823883a 	mov	r17,r5
    cd44:	2839883a 	mov	fp,r5
    cd48:	38003c1e 	bne	r7,zero,ce3c <__umoddi3+0x12c>
    cd4c:	3027883a 	mov	r19,r6
    cd50:	2029883a 	mov	r20,r4
    cd54:	2980512e 	bgeu	r5,r6,ce9c <__umoddi3+0x18c>
    cd58:	00bfffd4 	movui	r2,65535
    cd5c:	11809a36 	bltu	r2,r6,cfc8 <__umoddi3+0x2b8>
    cd60:	01003fc4 	movi	r4,255
    cd64:	2189803a 	cmpltu	r4,r4,r6
    cd68:	200890fa 	slli	r4,r4,3
    cd6c:	3104d83a 	srl	r2,r6,r4
    cd70:	00c00074 	movhi	r3,1
    cd74:	18c82284 	addi	r3,r3,8330
    cd78:	1885883a 	add	r2,r3,r2
    cd7c:	10c00003 	ldbu	r3,0(r2)
    cd80:	00800804 	movi	r2,32
    cd84:	1909883a 	add	r4,r3,r4
    cd88:	1125c83a 	sub	r18,r2,r4
    cd8c:	90000526 	beq	r18,zero,cda4 <__umoddi3+0x94>
    cd90:	8ca2983a 	sll	r17,r17,r18
    cd94:	8108d83a 	srl	r4,r16,r4
    cd98:	34a6983a 	sll	r19,r6,r18
    cd9c:	84a8983a 	sll	r20,r16,r18
    cda0:	2478b03a 	or	fp,r4,r17
    cda4:	982ed43a 	srli	r23,r19,16
    cda8:	e009883a 	mov	r4,fp
    cdac:	9dbfffcc 	andi	r22,r19,65535
    cdb0:	b80b883a 	mov	r5,r23
    cdb4:	00026d00 	call	26d0 <__umodsi3>
    cdb8:	e009883a 	mov	r4,fp
    cdbc:	b80b883a 	mov	r5,r23
    cdc0:	102b883a 	mov	r21,r2
    cdc4:	000266c0 	call	266c <__udivsi3>
    cdc8:	a806943a 	slli	r3,r21,16
    cdcc:	a008d43a 	srli	r4,r20,16
    cdd0:	b085383a 	mul	r2,r22,r2
    cdd4:	20c8b03a 	or	r4,r4,r3
    cdd8:	2080032e 	bgeu	r4,r2,cde8 <__umoddi3+0xd8>
    cddc:	24c9883a 	add	r4,r4,r19
    cde0:	24c00136 	bltu	r4,r19,cde8 <__umoddi3+0xd8>
    cde4:	20811036 	bltu	r4,r2,d228 <__umoddi3+0x518>
    cde8:	20abc83a 	sub	r21,r4,r2
    cdec:	b80b883a 	mov	r5,r23
    cdf0:	a809883a 	mov	r4,r21
    cdf4:	00026d00 	call	26d0 <__umodsi3>
    cdf8:	1023883a 	mov	r17,r2
    cdfc:	b80b883a 	mov	r5,r23
    ce00:	a809883a 	mov	r4,r21
    ce04:	000266c0 	call	266c <__udivsi3>
    ce08:	8822943a 	slli	r17,r17,16
    ce0c:	b085383a 	mul	r2,r22,r2
    ce10:	a0ffffcc 	andi	r3,r20,65535
    ce14:	1c46b03a 	or	r3,r3,r17
    ce18:	1880042e 	bgeu	r3,r2,ce2c <__umoddi3+0x11c>
    ce1c:	1cc7883a 	add	r3,r3,r19
    ce20:	1cc00236 	bltu	r3,r19,ce2c <__umoddi3+0x11c>
    ce24:	1880012e 	bgeu	r3,r2,ce2c <__umoddi3+0x11c>
    ce28:	1cc7883a 	add	r3,r3,r19
    ce2c:	1885c83a 	sub	r2,r3,r2
    ce30:	1484d83a 	srl	r2,r2,r18
    ce34:	0007883a 	mov	r3,zero
    ce38:	00004f06 	br	cf78 <__umoddi3+0x268>
    ce3c:	29c04c36 	bltu	r5,r7,cf70 <__umoddi3+0x260>
    ce40:	00bfffd4 	movui	r2,65535
    ce44:	11c0582e 	bgeu	r2,r7,cfa8 <__umoddi3+0x298>
    ce48:	00804034 	movhi	r2,256
    ce4c:	10bfffc4 	addi	r2,r2,-1
    ce50:	11c0e736 	bltu	r2,r7,d1f0 <__umoddi3+0x4e0>
    ce54:	01000404 	movi	r4,16
    ce58:	3904d83a 	srl	r2,r7,r4
    ce5c:	00c00074 	movhi	r3,1
    ce60:	18c82284 	addi	r3,r3,8330
    ce64:	1885883a 	add	r2,r3,r2
    ce68:	14c00003 	ldbu	r19,0(r2)
    ce6c:	00c00804 	movi	r3,32
    ce70:	9927883a 	add	r19,r19,r4
    ce74:	1ce9c83a 	sub	r20,r3,r19
    ce78:	a000581e 	bne	r20,zero,cfdc <__umoddi3+0x2cc>
    ce7c:	3c400136 	bltu	r7,r17,ce84 <__umoddi3+0x174>
    ce80:	8180eb36 	bltu	r16,r6,d230 <__umoddi3+0x520>
    ce84:	8185c83a 	sub	r2,r16,r6
    ce88:	89e3c83a 	sub	r17,r17,r7
    ce8c:	8089803a 	cmpltu	r4,r16,r2
    ce90:	8939c83a 	sub	fp,r17,r4
    ce94:	e007883a 	mov	r3,fp
    ce98:	00003706 	br	cf78 <__umoddi3+0x268>
    ce9c:	3000041e 	bne	r6,zero,ceb0 <__umoddi3+0x1a0>
    cea0:	000b883a 	mov	r5,zero
    cea4:	01000044 	movi	r4,1
    cea8:	000266c0 	call	266c <__udivsi3>
    ceac:	1027883a 	mov	r19,r2
    ceb0:	00bfffd4 	movui	r2,65535
    ceb4:	14c0402e 	bgeu	r2,r19,cfb8 <__umoddi3+0x2a8>
    ceb8:	00804034 	movhi	r2,256
    cebc:	10bfffc4 	addi	r2,r2,-1
    cec0:	14c0cd36 	bltu	r2,r19,d1f8 <__umoddi3+0x4e8>
    cec4:	00800404 	movi	r2,16
    cec8:	9886d83a 	srl	r3,r19,r2
    cecc:	01000074 	movhi	r4,1
    ced0:	21082284 	addi	r4,r4,8330
    ced4:	20c7883a 	add	r3,r4,r3
    ced8:	18c00003 	ldbu	r3,0(r3)
    cedc:	1887883a 	add	r3,r3,r2
    cee0:	00800804 	movi	r2,32
    cee4:	10e5c83a 	sub	r18,r2,r3
    cee8:	9000901e 	bne	r18,zero,d12c <__umoddi3+0x41c>
    ceec:	982cd43a 	srli	r22,r19,16
    cef0:	8ce3c83a 	sub	r17,r17,r19
    cef4:	9d7fffcc 	andi	r21,r19,65535
    cef8:	b00b883a 	mov	r5,r22
    cefc:	8809883a 	mov	r4,r17
    cf00:	00026d00 	call	26d0 <__umodsi3>
    cf04:	8809883a 	mov	r4,r17
    cf08:	b00b883a 	mov	r5,r22
    cf0c:	1021883a 	mov	r16,r2
    cf10:	000266c0 	call	266c <__udivsi3>
    cf14:	8006943a 	slli	r3,r16,16
    cf18:	a008d43a 	srli	r4,r20,16
    cf1c:	1545383a 	mul	r2,r2,r21
    cf20:	20c8b03a 	or	r4,r4,r3
    cf24:	2080042e 	bgeu	r4,r2,cf38 <__umoddi3+0x228>
    cf28:	24c9883a 	add	r4,r4,r19
    cf2c:	24c00236 	bltu	r4,r19,cf38 <__umoddi3+0x228>
    cf30:	2080012e 	bgeu	r4,r2,cf38 <__umoddi3+0x228>
    cf34:	24c9883a 	add	r4,r4,r19
    cf38:	20a1c83a 	sub	r16,r4,r2
    cf3c:	b00b883a 	mov	r5,r22
    cf40:	8009883a 	mov	r4,r16
    cf44:	00026d00 	call	26d0 <__umodsi3>
    cf48:	1023883a 	mov	r17,r2
    cf4c:	b00b883a 	mov	r5,r22
    cf50:	8009883a 	mov	r4,r16
    cf54:	000266c0 	call	266c <__udivsi3>
    cf58:	8822943a 	slli	r17,r17,16
    cf5c:	1545383a 	mul	r2,r2,r21
    cf60:	a53fffcc 	andi	r20,r20,65535
    cf64:	a446b03a 	or	r3,r20,r17
    cf68:	18bfb02e 	bgeu	r3,r2,ce2c <__alt_data_end+0xff00ce2c>
    cf6c:	003fab06 	br	ce1c <__alt_data_end+0xff00ce1c>
    cf70:	2005883a 	mov	r2,r4
    cf74:	2807883a 	mov	r3,r5
    cf78:	dfc00b17 	ldw	ra,44(sp)
    cf7c:	df000a17 	ldw	fp,40(sp)
    cf80:	ddc00917 	ldw	r23,36(sp)
    cf84:	dd800817 	ldw	r22,32(sp)
    cf88:	dd400717 	ldw	r21,28(sp)
    cf8c:	dd000617 	ldw	r20,24(sp)
    cf90:	dcc00517 	ldw	r19,20(sp)
    cf94:	dc800417 	ldw	r18,16(sp)
    cf98:	dc400317 	ldw	r17,12(sp)
    cf9c:	dc000217 	ldw	r16,8(sp)
    cfa0:	dec00c04 	addi	sp,sp,48
    cfa4:	f800283a 	ret
    cfa8:	04c03fc4 	movi	r19,255
    cfac:	99c9803a 	cmpltu	r4,r19,r7
    cfb0:	200890fa 	slli	r4,r4,3
    cfb4:	003fa806 	br	ce58 <__alt_data_end+0xff00ce58>
    cfb8:	00803fc4 	movi	r2,255
    cfbc:	14c5803a 	cmpltu	r2,r2,r19
    cfc0:	100490fa 	slli	r2,r2,3
    cfc4:	003fc006 	br	cec8 <__alt_data_end+0xff00cec8>
    cfc8:	00804034 	movhi	r2,256
    cfcc:	10bfffc4 	addi	r2,r2,-1
    cfd0:	11808b36 	bltu	r2,r6,d200 <__umoddi3+0x4f0>
    cfd4:	01000404 	movi	r4,16
    cfd8:	003f6406 	br	cd6c <__alt_data_end+0xff00cd6c>
    cfdc:	34c4d83a 	srl	r2,r6,r19
    cfe0:	3d0e983a 	sll	r7,r7,r20
    cfe4:	8cf8d83a 	srl	fp,r17,r19
    cfe8:	8d10983a 	sll	r8,r17,r20
    cfec:	38aab03a 	or	r21,r7,r2
    cff0:	a82cd43a 	srli	r22,r21,16
    cff4:	84e2d83a 	srl	r17,r16,r19
    cff8:	e009883a 	mov	r4,fp
    cffc:	b00b883a 	mov	r5,r22
    d000:	8a22b03a 	or	r17,r17,r8
    d004:	3524983a 	sll	r18,r6,r20
    d008:	00026d00 	call	26d0 <__umodsi3>
    d00c:	e009883a 	mov	r4,fp
    d010:	b00b883a 	mov	r5,r22
    d014:	102f883a 	mov	r23,r2
    d018:	000266c0 	call	266c <__udivsi3>
    d01c:	100d883a 	mov	r6,r2
    d020:	b808943a 	slli	r4,r23,16
    d024:	aa3fffcc 	andi	r8,r21,65535
    d028:	8804d43a 	srli	r2,r17,16
    d02c:	41af383a 	mul	r23,r8,r6
    d030:	8520983a 	sll	r16,r16,r20
    d034:	1104b03a 	or	r2,r2,r4
    d038:	15c0042e 	bgeu	r2,r23,d04c <__umoddi3+0x33c>
    d03c:	1545883a 	add	r2,r2,r21
    d040:	30ffffc4 	addi	r3,r6,-1
    d044:	1540742e 	bgeu	r2,r21,d218 <__umoddi3+0x508>
    d048:	180d883a 	mov	r6,r3
    d04c:	15efc83a 	sub	r23,r2,r23
    d050:	b00b883a 	mov	r5,r22
    d054:	b809883a 	mov	r4,r23
    d058:	d9800115 	stw	r6,4(sp)
    d05c:	da000015 	stw	r8,0(sp)
    d060:	00026d00 	call	26d0 <__umodsi3>
    d064:	b00b883a 	mov	r5,r22
    d068:	b809883a 	mov	r4,r23
    d06c:	1039883a 	mov	fp,r2
    d070:	000266c0 	call	266c <__udivsi3>
    d074:	da000017 	ldw	r8,0(sp)
    d078:	e038943a 	slli	fp,fp,16
    d07c:	100b883a 	mov	r5,r2
    d080:	4089383a 	mul	r4,r8,r2
    d084:	8a3fffcc 	andi	r8,r17,65535
    d088:	4710b03a 	or	r8,r8,fp
    d08c:	d9800117 	ldw	r6,4(sp)
    d090:	4100042e 	bgeu	r8,r4,d0a4 <__umoddi3+0x394>
    d094:	4551883a 	add	r8,r8,r21
    d098:	10bfffc4 	addi	r2,r2,-1
    d09c:	45405a2e 	bgeu	r8,r21,d208 <__umoddi3+0x4f8>
    d0a0:	100b883a 	mov	r5,r2
    d0a4:	300c943a 	slli	r6,r6,16
    d0a8:	91ffffcc 	andi	r7,r18,65535
    d0ac:	9004d43a 	srli	r2,r18,16
    d0b0:	314cb03a 	or	r6,r6,r5
    d0b4:	317fffcc 	andi	r5,r6,65535
    d0b8:	300cd43a 	srli	r6,r6,16
    d0bc:	29d3383a 	mul	r9,r5,r7
    d0c0:	288b383a 	mul	r5,r5,r2
    d0c4:	31cf383a 	mul	r7,r6,r7
    d0c8:	4806d43a 	srli	r3,r9,16
    d0cc:	4111c83a 	sub	r8,r8,r4
    d0d0:	29cb883a 	add	r5,r5,r7
    d0d4:	194b883a 	add	r5,r3,r5
    d0d8:	3085383a 	mul	r2,r6,r2
    d0dc:	29c0022e 	bgeu	r5,r7,d0e8 <__umoddi3+0x3d8>
    d0e0:	00c00074 	movhi	r3,1
    d0e4:	10c5883a 	add	r2,r2,r3
    d0e8:	2808d43a 	srli	r4,r5,16
    d0ec:	280a943a 	slli	r5,r5,16
    d0f0:	4a7fffcc 	andi	r9,r9,65535
    d0f4:	2085883a 	add	r2,r4,r2
    d0f8:	2a4b883a 	add	r5,r5,r9
    d0fc:	40803636 	bltu	r8,r2,d1d8 <__umoddi3+0x4c8>
    d100:	40804d26 	beq	r8,r2,d238 <__umoddi3+0x528>
    d104:	4089c83a 	sub	r4,r8,r2
    d108:	280f883a 	mov	r7,r5
    d10c:	81cfc83a 	sub	r7,r16,r7
    d110:	81c7803a 	cmpltu	r3,r16,r7
    d114:	20c7c83a 	sub	r3,r4,r3
    d118:	1cc4983a 	sll	r2,r3,r19
    d11c:	3d0ed83a 	srl	r7,r7,r20
    d120:	1d06d83a 	srl	r3,r3,r20
    d124:	11c4b03a 	or	r2,r2,r7
    d128:	003f9306 	br	cf78 <__alt_data_end+0xff00cf78>
    d12c:	9ca6983a 	sll	r19,r19,r18
    d130:	88e8d83a 	srl	r20,r17,r3
    d134:	80c4d83a 	srl	r2,r16,r3
    d138:	982cd43a 	srli	r22,r19,16
    d13c:	8ca2983a 	sll	r17,r17,r18
    d140:	a009883a 	mov	r4,r20
    d144:	b00b883a 	mov	r5,r22
    d148:	1478b03a 	or	fp,r2,r17
    d14c:	00026d00 	call	26d0 <__umodsi3>
    d150:	a009883a 	mov	r4,r20
    d154:	b00b883a 	mov	r5,r22
    d158:	1023883a 	mov	r17,r2
    d15c:	000266c0 	call	266c <__udivsi3>
    d160:	9d7fffcc 	andi	r21,r19,65535
    d164:	880a943a 	slli	r5,r17,16
    d168:	e008d43a 	srli	r4,fp,16
    d16c:	a885383a 	mul	r2,r21,r2
    d170:	84a8983a 	sll	r20,r16,r18
    d174:	2148b03a 	or	r4,r4,r5
    d178:	2080042e 	bgeu	r4,r2,d18c <__umoddi3+0x47c>
    d17c:	24c9883a 	add	r4,r4,r19
    d180:	24c00236 	bltu	r4,r19,d18c <__umoddi3+0x47c>
    d184:	2080012e 	bgeu	r4,r2,d18c <__umoddi3+0x47c>
    d188:	24c9883a 	add	r4,r4,r19
    d18c:	20a3c83a 	sub	r17,r4,r2
    d190:	b00b883a 	mov	r5,r22
    d194:	8809883a 	mov	r4,r17
    d198:	00026d00 	call	26d0 <__umodsi3>
    d19c:	102f883a 	mov	r23,r2
    d1a0:	8809883a 	mov	r4,r17
    d1a4:	b00b883a 	mov	r5,r22
    d1a8:	000266c0 	call	266c <__udivsi3>
    d1ac:	b82e943a 	slli	r23,r23,16
    d1b0:	a885383a 	mul	r2,r21,r2
    d1b4:	e13fffcc 	andi	r4,fp,65535
    d1b8:	25c8b03a 	or	r4,r4,r23
    d1bc:	2080042e 	bgeu	r4,r2,d1d0 <__umoddi3+0x4c0>
    d1c0:	24c9883a 	add	r4,r4,r19
    d1c4:	24c00236 	bltu	r4,r19,d1d0 <__umoddi3+0x4c0>
    d1c8:	2080012e 	bgeu	r4,r2,d1d0 <__umoddi3+0x4c0>
    d1cc:	24c9883a 	add	r4,r4,r19
    d1d0:	20a3c83a 	sub	r17,r4,r2
    d1d4:	003f4806 	br	cef8 <__alt_data_end+0xff00cef8>
    d1d8:	2c8fc83a 	sub	r7,r5,r18
    d1dc:	1545c83a 	sub	r2,r2,r21
    d1e0:	29cb803a 	cmpltu	r5,r5,r7
    d1e4:	1145c83a 	sub	r2,r2,r5
    d1e8:	4089c83a 	sub	r4,r8,r2
    d1ec:	003fc706 	br	d10c <__alt_data_end+0xff00d10c>
    d1f0:	01000604 	movi	r4,24
    d1f4:	003f1806 	br	ce58 <__alt_data_end+0xff00ce58>
    d1f8:	00800604 	movi	r2,24
    d1fc:	003f3206 	br	cec8 <__alt_data_end+0xff00cec8>
    d200:	01000604 	movi	r4,24
    d204:	003ed906 	br	cd6c <__alt_data_end+0xff00cd6c>
    d208:	413fa52e 	bgeu	r8,r4,d0a0 <__alt_data_end+0xff00d0a0>
    d20c:	297fff84 	addi	r5,r5,-2
    d210:	4551883a 	add	r8,r8,r21
    d214:	003fa306 	br	d0a4 <__alt_data_end+0xff00d0a4>
    d218:	15ff8b2e 	bgeu	r2,r23,d048 <__alt_data_end+0xff00d048>
    d21c:	31bfff84 	addi	r6,r6,-2
    d220:	1545883a 	add	r2,r2,r21
    d224:	003f8906 	br	d04c <__alt_data_end+0xff00d04c>
    d228:	24c9883a 	add	r4,r4,r19
    d22c:	003eee06 	br	cde8 <__alt_data_end+0xff00cde8>
    d230:	8005883a 	mov	r2,r16
    d234:	003f1706 	br	ce94 <__alt_data_end+0xff00ce94>
    d238:	817fe736 	bltu	r16,r5,d1d8 <__alt_data_end+0xff00d1d8>
    d23c:	280f883a 	mov	r7,r5
    d240:	0009883a 	mov	r4,zero
    d244:	003fb106 	br	d10c <__alt_data_end+0xff00d10c>

0000d248 <__adddf3>:
    d248:	02c00434 	movhi	r11,16
    d24c:	5affffc4 	addi	r11,r11,-1
    d250:	2806d7fa 	srli	r3,r5,31
    d254:	2ad4703a 	and	r10,r5,r11
    d258:	3ad2703a 	and	r9,r7,r11
    d25c:	3804d53a 	srli	r2,r7,20
    d260:	3018d77a 	srli	r12,r6,29
    d264:	280ad53a 	srli	r5,r5,20
    d268:	501490fa 	slli	r10,r10,3
    d26c:	2010d77a 	srli	r8,r4,29
    d270:	481290fa 	slli	r9,r9,3
    d274:	380ed7fa 	srli	r7,r7,31
    d278:	defffb04 	addi	sp,sp,-20
    d27c:	dc800215 	stw	r18,8(sp)
    d280:	dc400115 	stw	r17,4(sp)
    d284:	dc000015 	stw	r16,0(sp)
    d288:	dfc00415 	stw	ra,16(sp)
    d28c:	dcc00315 	stw	r19,12(sp)
    d290:	1c803fcc 	andi	r18,r3,255
    d294:	2c01ffcc 	andi	r16,r5,2047
    d298:	5210b03a 	or	r8,r10,r8
    d29c:	202290fa 	slli	r17,r4,3
    d2a0:	1081ffcc 	andi	r2,r2,2047
    d2a4:	4b12b03a 	or	r9,r9,r12
    d2a8:	300c90fa 	slli	r6,r6,3
    d2ac:	91c07526 	beq	r18,r7,d484 <__adddf3+0x23c>
    d2b0:	8087c83a 	sub	r3,r16,r2
    d2b4:	00c0ab0e 	bge	zero,r3,d564 <__adddf3+0x31c>
    d2b8:	10002a1e 	bne	r2,zero,d364 <__adddf3+0x11c>
    d2bc:	4984b03a 	or	r2,r9,r6
    d2c0:	1000961e 	bne	r2,zero,d51c <__adddf3+0x2d4>
    d2c4:	888001cc 	andi	r2,r17,7
    d2c8:	10000726 	beq	r2,zero,d2e8 <__adddf3+0xa0>
    d2cc:	888003cc 	andi	r2,r17,15
    d2d0:	00c00104 	movi	r3,4
    d2d4:	10c00426 	beq	r2,r3,d2e8 <__adddf3+0xa0>
    d2d8:	88c7883a 	add	r3,r17,r3
    d2dc:	1c63803a 	cmpltu	r17,r3,r17
    d2e0:	4451883a 	add	r8,r8,r17
    d2e4:	1823883a 	mov	r17,r3
    d2e8:	4080202c 	andhi	r2,r8,128
    d2ec:	10005926 	beq	r2,zero,d454 <__adddf3+0x20c>
    d2f0:	84000044 	addi	r16,r16,1
    d2f4:	0081ffc4 	movi	r2,2047
    d2f8:	8080ba26 	beq	r16,r2,d5e4 <__adddf3+0x39c>
    d2fc:	00bfe034 	movhi	r2,65408
    d300:	10bfffc4 	addi	r2,r2,-1
    d304:	4090703a 	and	r8,r8,r2
    d308:	4004977a 	slli	r2,r8,29
    d30c:	4010927a 	slli	r8,r8,9
    d310:	8822d0fa 	srli	r17,r17,3
    d314:	8401ffcc 	andi	r16,r16,2047
    d318:	4010d33a 	srli	r8,r8,12
    d31c:	9007883a 	mov	r3,r18
    d320:	1444b03a 	or	r2,r2,r17
    d324:	8401ffcc 	andi	r16,r16,2047
    d328:	8020953a 	slli	r16,r16,20
    d32c:	18c03fcc 	andi	r3,r3,255
    d330:	01000434 	movhi	r4,16
    d334:	213fffc4 	addi	r4,r4,-1
    d338:	180697fa 	slli	r3,r3,31
    d33c:	4110703a 	and	r8,r8,r4
    d340:	4410b03a 	or	r8,r8,r16
    d344:	40c6b03a 	or	r3,r8,r3
    d348:	dfc00417 	ldw	ra,16(sp)
    d34c:	dcc00317 	ldw	r19,12(sp)
    d350:	dc800217 	ldw	r18,8(sp)
    d354:	dc400117 	ldw	r17,4(sp)
    d358:	dc000017 	ldw	r16,0(sp)
    d35c:	dec00504 	addi	sp,sp,20
    d360:	f800283a 	ret
    d364:	0081ffc4 	movi	r2,2047
    d368:	80bfd626 	beq	r16,r2,d2c4 <__alt_data_end+0xff00d2c4>
    d36c:	4a402034 	orhi	r9,r9,128
    d370:	00800e04 	movi	r2,56
    d374:	10c09f16 	blt	r2,r3,d5f4 <__adddf3+0x3ac>
    d378:	008007c4 	movi	r2,31
    d37c:	10c0c216 	blt	r2,r3,d688 <__adddf3+0x440>
    d380:	00800804 	movi	r2,32
    d384:	10c5c83a 	sub	r2,r2,r3
    d388:	488a983a 	sll	r5,r9,r2
    d38c:	30c8d83a 	srl	r4,r6,r3
    d390:	3084983a 	sll	r2,r6,r2
    d394:	48c6d83a 	srl	r3,r9,r3
    d398:	290cb03a 	or	r6,r5,r4
    d39c:	1004c03a 	cmpne	r2,r2,zero
    d3a0:	308cb03a 	or	r6,r6,r2
    d3a4:	898dc83a 	sub	r6,r17,r6
    d3a8:	89a3803a 	cmpltu	r17,r17,r6
    d3ac:	40d1c83a 	sub	r8,r8,r3
    d3b0:	4451c83a 	sub	r8,r8,r17
    d3b4:	3023883a 	mov	r17,r6
    d3b8:	4080202c 	andhi	r2,r8,128
    d3bc:	10002326 	beq	r2,zero,d44c <__adddf3+0x204>
    d3c0:	04c02034 	movhi	r19,128
    d3c4:	9cffffc4 	addi	r19,r19,-1
    d3c8:	44e6703a 	and	r19,r8,r19
    d3cc:	98007626 	beq	r19,zero,d5a8 <__adddf3+0x360>
    d3d0:	9809883a 	mov	r4,r19
    d3d4:	00030b80 	call	30b8 <__clzsi2>
    d3d8:	10fffe04 	addi	r3,r2,-8
    d3dc:	010007c4 	movi	r4,31
    d3e0:	20c07716 	blt	r4,r3,d5c0 <__adddf3+0x378>
    d3e4:	00800804 	movi	r2,32
    d3e8:	10c5c83a 	sub	r2,r2,r3
    d3ec:	8884d83a 	srl	r2,r17,r2
    d3f0:	98d0983a 	sll	r8,r19,r3
    d3f4:	88e2983a 	sll	r17,r17,r3
    d3f8:	1204b03a 	or	r2,r2,r8
    d3fc:	1c007416 	blt	r3,r16,d5d0 <__adddf3+0x388>
    d400:	1c21c83a 	sub	r16,r3,r16
    d404:	82000044 	addi	r8,r16,1
    d408:	00c007c4 	movi	r3,31
    d40c:	1a009116 	blt	r3,r8,d654 <__adddf3+0x40c>
    d410:	00c00804 	movi	r3,32
    d414:	1a07c83a 	sub	r3,r3,r8
    d418:	8a08d83a 	srl	r4,r17,r8
    d41c:	88e2983a 	sll	r17,r17,r3
    d420:	10c6983a 	sll	r3,r2,r3
    d424:	1210d83a 	srl	r8,r2,r8
    d428:	8804c03a 	cmpne	r2,r17,zero
    d42c:	1906b03a 	or	r3,r3,r4
    d430:	18a2b03a 	or	r17,r3,r2
    d434:	0021883a 	mov	r16,zero
    d438:	003fa206 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d43c:	1890b03a 	or	r8,r3,r2
    d440:	40017d26 	beq	r8,zero,da38 <__adddf3+0x7f0>
    d444:	1011883a 	mov	r8,r2
    d448:	1823883a 	mov	r17,r3
    d44c:	888001cc 	andi	r2,r17,7
    d450:	103f9e1e 	bne	r2,zero,d2cc <__alt_data_end+0xff00d2cc>
    d454:	4004977a 	slli	r2,r8,29
    d458:	8822d0fa 	srli	r17,r17,3
    d45c:	4010d0fa 	srli	r8,r8,3
    d460:	9007883a 	mov	r3,r18
    d464:	1444b03a 	or	r2,r2,r17
    d468:	0101ffc4 	movi	r4,2047
    d46c:	81002426 	beq	r16,r4,d500 <__adddf3+0x2b8>
    d470:	8120703a 	and	r16,r16,r4
    d474:	01000434 	movhi	r4,16
    d478:	213fffc4 	addi	r4,r4,-1
    d47c:	4110703a 	and	r8,r8,r4
    d480:	003fa806 	br	d324 <__alt_data_end+0xff00d324>
    d484:	8089c83a 	sub	r4,r16,r2
    d488:	01005e0e 	bge	zero,r4,d604 <__adddf3+0x3bc>
    d48c:	10002b26 	beq	r2,zero,d53c <__adddf3+0x2f4>
    d490:	0081ffc4 	movi	r2,2047
    d494:	80bf8b26 	beq	r16,r2,d2c4 <__alt_data_end+0xff00d2c4>
    d498:	4a402034 	orhi	r9,r9,128
    d49c:	00800e04 	movi	r2,56
    d4a0:	1100a40e 	bge	r2,r4,d734 <__adddf3+0x4ec>
    d4a4:	498cb03a 	or	r6,r9,r6
    d4a8:	300ac03a 	cmpne	r5,r6,zero
    d4ac:	0013883a 	mov	r9,zero
    d4b0:	2c4b883a 	add	r5,r5,r17
    d4b4:	2c63803a 	cmpltu	r17,r5,r17
    d4b8:	4a11883a 	add	r8,r9,r8
    d4bc:	8a11883a 	add	r8,r17,r8
    d4c0:	2823883a 	mov	r17,r5
    d4c4:	4080202c 	andhi	r2,r8,128
    d4c8:	103fe026 	beq	r2,zero,d44c <__alt_data_end+0xff00d44c>
    d4cc:	84000044 	addi	r16,r16,1
    d4d0:	0081ffc4 	movi	r2,2047
    d4d4:	8080d226 	beq	r16,r2,d820 <__adddf3+0x5d8>
    d4d8:	00bfe034 	movhi	r2,65408
    d4dc:	10bfffc4 	addi	r2,r2,-1
    d4e0:	4090703a 	and	r8,r8,r2
    d4e4:	880ad07a 	srli	r5,r17,1
    d4e8:	400897fa 	slli	r4,r8,31
    d4ec:	88c0004c 	andi	r3,r17,1
    d4f0:	28e2b03a 	or	r17,r5,r3
    d4f4:	4010d07a 	srli	r8,r8,1
    d4f8:	2462b03a 	or	r17,r4,r17
    d4fc:	003f7106 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d500:	4088b03a 	or	r4,r8,r2
    d504:	20014526 	beq	r4,zero,da1c <__adddf3+0x7d4>
    d508:	01000434 	movhi	r4,16
    d50c:	42000234 	orhi	r8,r8,8
    d510:	213fffc4 	addi	r4,r4,-1
    d514:	4110703a 	and	r8,r8,r4
    d518:	003f8206 	br	d324 <__alt_data_end+0xff00d324>
    d51c:	18ffffc4 	addi	r3,r3,-1
    d520:	1800491e 	bne	r3,zero,d648 <__adddf3+0x400>
    d524:	898bc83a 	sub	r5,r17,r6
    d528:	8963803a 	cmpltu	r17,r17,r5
    d52c:	4251c83a 	sub	r8,r8,r9
    d530:	4451c83a 	sub	r8,r8,r17
    d534:	2823883a 	mov	r17,r5
    d538:	003f9f06 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d53c:	4984b03a 	or	r2,r9,r6
    d540:	103f6026 	beq	r2,zero,d2c4 <__alt_data_end+0xff00d2c4>
    d544:	213fffc4 	addi	r4,r4,-1
    d548:	2000931e 	bne	r4,zero,d798 <__adddf3+0x550>
    d54c:	898d883a 	add	r6,r17,r6
    d550:	3463803a 	cmpltu	r17,r6,r17
    d554:	4251883a 	add	r8,r8,r9
    d558:	8a11883a 	add	r8,r17,r8
    d55c:	3023883a 	mov	r17,r6
    d560:	003fd806 	br	d4c4 <__alt_data_end+0xff00d4c4>
    d564:	1800541e 	bne	r3,zero,d6b8 <__adddf3+0x470>
    d568:	80800044 	addi	r2,r16,1
    d56c:	1081ffcc 	andi	r2,r2,2047
    d570:	00c00044 	movi	r3,1
    d574:	1880a00e 	bge	r3,r2,d7f8 <__adddf3+0x5b0>
    d578:	8989c83a 	sub	r4,r17,r6
    d57c:	8905803a 	cmpltu	r2,r17,r4
    d580:	4267c83a 	sub	r19,r8,r9
    d584:	98a7c83a 	sub	r19,r19,r2
    d588:	9880202c 	andhi	r2,r19,128
    d58c:	10006326 	beq	r2,zero,d71c <__adddf3+0x4d4>
    d590:	3463c83a 	sub	r17,r6,r17
    d594:	4a07c83a 	sub	r3,r9,r8
    d598:	344d803a 	cmpltu	r6,r6,r17
    d59c:	19a7c83a 	sub	r19,r3,r6
    d5a0:	3825883a 	mov	r18,r7
    d5a4:	983f8a1e 	bne	r19,zero,d3d0 <__alt_data_end+0xff00d3d0>
    d5a8:	8809883a 	mov	r4,r17
    d5ac:	00030b80 	call	30b8 <__clzsi2>
    d5b0:	10800804 	addi	r2,r2,32
    d5b4:	10fffe04 	addi	r3,r2,-8
    d5b8:	010007c4 	movi	r4,31
    d5bc:	20ff890e 	bge	r4,r3,d3e4 <__alt_data_end+0xff00d3e4>
    d5c0:	10bff604 	addi	r2,r2,-40
    d5c4:	8884983a 	sll	r2,r17,r2
    d5c8:	0023883a 	mov	r17,zero
    d5cc:	1c3f8c0e 	bge	r3,r16,d400 <__alt_data_end+0xff00d400>
    d5d0:	023fe034 	movhi	r8,65408
    d5d4:	423fffc4 	addi	r8,r8,-1
    d5d8:	80e1c83a 	sub	r16,r16,r3
    d5dc:	1210703a 	and	r8,r2,r8
    d5e0:	003f3806 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d5e4:	9007883a 	mov	r3,r18
    d5e8:	0011883a 	mov	r8,zero
    d5ec:	0005883a 	mov	r2,zero
    d5f0:	003f4c06 	br	d324 <__alt_data_end+0xff00d324>
    d5f4:	498cb03a 	or	r6,r9,r6
    d5f8:	300cc03a 	cmpne	r6,r6,zero
    d5fc:	0007883a 	mov	r3,zero
    d600:	003f6806 	br	d3a4 <__alt_data_end+0xff00d3a4>
    d604:	20009c1e 	bne	r4,zero,d878 <__adddf3+0x630>
    d608:	80800044 	addi	r2,r16,1
    d60c:	1141ffcc 	andi	r5,r2,2047
    d610:	01000044 	movi	r4,1
    d614:	2140670e 	bge	r4,r5,d7b4 <__adddf3+0x56c>
    d618:	0101ffc4 	movi	r4,2047
    d61c:	11007f26 	beq	r2,r4,d81c <__adddf3+0x5d4>
    d620:	898d883a 	add	r6,r17,r6
    d624:	4247883a 	add	r3,r8,r9
    d628:	3451803a 	cmpltu	r8,r6,r17
    d62c:	40d1883a 	add	r8,r8,r3
    d630:	402297fa 	slli	r17,r8,31
    d634:	300cd07a 	srli	r6,r6,1
    d638:	4010d07a 	srli	r8,r8,1
    d63c:	1021883a 	mov	r16,r2
    d640:	89a2b03a 	or	r17,r17,r6
    d644:	003f1f06 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d648:	0081ffc4 	movi	r2,2047
    d64c:	80bf481e 	bne	r16,r2,d370 <__alt_data_end+0xff00d370>
    d650:	003f1c06 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d654:	843ff844 	addi	r16,r16,-31
    d658:	01000804 	movi	r4,32
    d65c:	1406d83a 	srl	r3,r2,r16
    d660:	41005026 	beq	r8,r4,d7a4 <__adddf3+0x55c>
    d664:	01001004 	movi	r4,64
    d668:	2211c83a 	sub	r8,r4,r8
    d66c:	1204983a 	sll	r2,r2,r8
    d670:	88a2b03a 	or	r17,r17,r2
    d674:	8822c03a 	cmpne	r17,r17,zero
    d678:	1c62b03a 	or	r17,r3,r17
    d67c:	0011883a 	mov	r8,zero
    d680:	0021883a 	mov	r16,zero
    d684:	003f7106 	br	d44c <__alt_data_end+0xff00d44c>
    d688:	193ff804 	addi	r4,r3,-32
    d68c:	00800804 	movi	r2,32
    d690:	4908d83a 	srl	r4,r9,r4
    d694:	18804526 	beq	r3,r2,d7ac <__adddf3+0x564>
    d698:	00801004 	movi	r2,64
    d69c:	10c5c83a 	sub	r2,r2,r3
    d6a0:	4886983a 	sll	r3,r9,r2
    d6a4:	198cb03a 	or	r6,r3,r6
    d6a8:	300cc03a 	cmpne	r6,r6,zero
    d6ac:	218cb03a 	or	r6,r4,r6
    d6b0:	0007883a 	mov	r3,zero
    d6b4:	003f3b06 	br	d3a4 <__alt_data_end+0xff00d3a4>
    d6b8:	80002a26 	beq	r16,zero,d764 <__adddf3+0x51c>
    d6bc:	0101ffc4 	movi	r4,2047
    d6c0:	11006826 	beq	r2,r4,d864 <__adddf3+0x61c>
    d6c4:	00c7c83a 	sub	r3,zero,r3
    d6c8:	42002034 	orhi	r8,r8,128
    d6cc:	01000e04 	movi	r4,56
    d6d0:	20c07c16 	blt	r4,r3,d8c4 <__adddf3+0x67c>
    d6d4:	010007c4 	movi	r4,31
    d6d8:	20c0da16 	blt	r4,r3,da44 <__adddf3+0x7fc>
    d6dc:	01000804 	movi	r4,32
    d6e0:	20c9c83a 	sub	r4,r4,r3
    d6e4:	4114983a 	sll	r10,r8,r4
    d6e8:	88cad83a 	srl	r5,r17,r3
    d6ec:	8908983a 	sll	r4,r17,r4
    d6f0:	40c6d83a 	srl	r3,r8,r3
    d6f4:	5162b03a 	or	r17,r10,r5
    d6f8:	2008c03a 	cmpne	r4,r4,zero
    d6fc:	8922b03a 	or	r17,r17,r4
    d700:	3463c83a 	sub	r17,r6,r17
    d704:	48c7c83a 	sub	r3,r9,r3
    d708:	344d803a 	cmpltu	r6,r6,r17
    d70c:	1991c83a 	sub	r8,r3,r6
    d710:	1021883a 	mov	r16,r2
    d714:	3825883a 	mov	r18,r7
    d718:	003f2706 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d71c:	24d0b03a 	or	r8,r4,r19
    d720:	40001b1e 	bne	r8,zero,d790 <__adddf3+0x548>
    d724:	0005883a 	mov	r2,zero
    d728:	0007883a 	mov	r3,zero
    d72c:	0021883a 	mov	r16,zero
    d730:	003f4d06 	br	d468 <__alt_data_end+0xff00d468>
    d734:	008007c4 	movi	r2,31
    d738:	11003c16 	blt	r2,r4,d82c <__adddf3+0x5e4>
    d73c:	00800804 	movi	r2,32
    d740:	1105c83a 	sub	r2,r2,r4
    d744:	488e983a 	sll	r7,r9,r2
    d748:	310ad83a 	srl	r5,r6,r4
    d74c:	3084983a 	sll	r2,r6,r2
    d750:	4912d83a 	srl	r9,r9,r4
    d754:	394ab03a 	or	r5,r7,r5
    d758:	1004c03a 	cmpne	r2,r2,zero
    d75c:	288ab03a 	or	r5,r5,r2
    d760:	003f5306 	br	d4b0 <__alt_data_end+0xff00d4b0>
    d764:	4448b03a 	or	r4,r8,r17
    d768:	20003e26 	beq	r4,zero,d864 <__adddf3+0x61c>
    d76c:	00c6303a 	nor	r3,zero,r3
    d770:	18003a1e 	bne	r3,zero,d85c <__adddf3+0x614>
    d774:	3463c83a 	sub	r17,r6,r17
    d778:	4a07c83a 	sub	r3,r9,r8
    d77c:	344d803a 	cmpltu	r6,r6,r17
    d780:	1991c83a 	sub	r8,r3,r6
    d784:	1021883a 	mov	r16,r2
    d788:	3825883a 	mov	r18,r7
    d78c:	003f0a06 	br	d3b8 <__alt_data_end+0xff00d3b8>
    d790:	2023883a 	mov	r17,r4
    d794:	003f0d06 	br	d3cc <__alt_data_end+0xff00d3cc>
    d798:	0081ffc4 	movi	r2,2047
    d79c:	80bf3f1e 	bne	r16,r2,d49c <__alt_data_end+0xff00d49c>
    d7a0:	003ec806 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d7a4:	0005883a 	mov	r2,zero
    d7a8:	003fb106 	br	d670 <__alt_data_end+0xff00d670>
    d7ac:	0007883a 	mov	r3,zero
    d7b0:	003fbc06 	br	d6a4 <__alt_data_end+0xff00d6a4>
    d7b4:	4444b03a 	or	r2,r8,r17
    d7b8:	8000871e 	bne	r16,zero,d9d8 <__adddf3+0x790>
    d7bc:	1000ba26 	beq	r2,zero,daa8 <__adddf3+0x860>
    d7c0:	4984b03a 	or	r2,r9,r6
    d7c4:	103ebf26 	beq	r2,zero,d2c4 <__alt_data_end+0xff00d2c4>
    d7c8:	8985883a 	add	r2,r17,r6
    d7cc:	4247883a 	add	r3,r8,r9
    d7d0:	1451803a 	cmpltu	r8,r2,r17
    d7d4:	40d1883a 	add	r8,r8,r3
    d7d8:	40c0202c 	andhi	r3,r8,128
    d7dc:	1023883a 	mov	r17,r2
    d7e0:	183f1a26 	beq	r3,zero,d44c <__alt_data_end+0xff00d44c>
    d7e4:	00bfe034 	movhi	r2,65408
    d7e8:	10bfffc4 	addi	r2,r2,-1
    d7ec:	2021883a 	mov	r16,r4
    d7f0:	4090703a 	and	r8,r8,r2
    d7f4:	003eb306 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d7f8:	4444b03a 	or	r2,r8,r17
    d7fc:	8000291e 	bne	r16,zero,d8a4 <__adddf3+0x65c>
    d800:	10004b1e 	bne	r2,zero,d930 <__adddf3+0x6e8>
    d804:	4990b03a 	or	r8,r9,r6
    d808:	40008b26 	beq	r8,zero,da38 <__adddf3+0x7f0>
    d80c:	4811883a 	mov	r8,r9
    d810:	3023883a 	mov	r17,r6
    d814:	3825883a 	mov	r18,r7
    d818:	003eaa06 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d81c:	1021883a 	mov	r16,r2
    d820:	0011883a 	mov	r8,zero
    d824:	0005883a 	mov	r2,zero
    d828:	003f0f06 	br	d468 <__alt_data_end+0xff00d468>
    d82c:	217ff804 	addi	r5,r4,-32
    d830:	00800804 	movi	r2,32
    d834:	494ad83a 	srl	r5,r9,r5
    d838:	20807d26 	beq	r4,r2,da30 <__adddf3+0x7e8>
    d83c:	00801004 	movi	r2,64
    d840:	1109c83a 	sub	r4,r2,r4
    d844:	4912983a 	sll	r9,r9,r4
    d848:	498cb03a 	or	r6,r9,r6
    d84c:	300cc03a 	cmpne	r6,r6,zero
    d850:	298ab03a 	or	r5,r5,r6
    d854:	0013883a 	mov	r9,zero
    d858:	003f1506 	br	d4b0 <__alt_data_end+0xff00d4b0>
    d85c:	0101ffc4 	movi	r4,2047
    d860:	113f9a1e 	bne	r2,r4,d6cc <__alt_data_end+0xff00d6cc>
    d864:	4811883a 	mov	r8,r9
    d868:	3023883a 	mov	r17,r6
    d86c:	1021883a 	mov	r16,r2
    d870:	3825883a 	mov	r18,r7
    d874:	003e9306 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d878:	8000161e 	bne	r16,zero,d8d4 <__adddf3+0x68c>
    d87c:	444ab03a 	or	r5,r8,r17
    d880:	28005126 	beq	r5,zero,d9c8 <__adddf3+0x780>
    d884:	0108303a 	nor	r4,zero,r4
    d888:	20004d1e 	bne	r4,zero,d9c0 <__adddf3+0x778>
    d88c:	89a3883a 	add	r17,r17,r6
    d890:	4253883a 	add	r9,r8,r9
    d894:	898d803a 	cmpltu	r6,r17,r6
    d898:	3251883a 	add	r8,r6,r9
    d89c:	1021883a 	mov	r16,r2
    d8a0:	003f0806 	br	d4c4 <__alt_data_end+0xff00d4c4>
    d8a4:	1000301e 	bne	r2,zero,d968 <__adddf3+0x720>
    d8a8:	4984b03a 	or	r2,r9,r6
    d8ac:	10007126 	beq	r2,zero,da74 <__adddf3+0x82c>
    d8b0:	4811883a 	mov	r8,r9
    d8b4:	3023883a 	mov	r17,r6
    d8b8:	3825883a 	mov	r18,r7
    d8bc:	0401ffc4 	movi	r16,2047
    d8c0:	003e8006 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d8c4:	4462b03a 	or	r17,r8,r17
    d8c8:	8822c03a 	cmpne	r17,r17,zero
    d8cc:	0007883a 	mov	r3,zero
    d8d0:	003f8b06 	br	d700 <__alt_data_end+0xff00d700>
    d8d4:	0141ffc4 	movi	r5,2047
    d8d8:	11403b26 	beq	r2,r5,d9c8 <__adddf3+0x780>
    d8dc:	0109c83a 	sub	r4,zero,r4
    d8e0:	42002034 	orhi	r8,r8,128
    d8e4:	01400e04 	movi	r5,56
    d8e8:	29006716 	blt	r5,r4,da88 <__adddf3+0x840>
    d8ec:	014007c4 	movi	r5,31
    d8f0:	29007016 	blt	r5,r4,dab4 <__adddf3+0x86c>
    d8f4:	01400804 	movi	r5,32
    d8f8:	290bc83a 	sub	r5,r5,r4
    d8fc:	4154983a 	sll	r10,r8,r5
    d900:	890ed83a 	srl	r7,r17,r4
    d904:	894a983a 	sll	r5,r17,r5
    d908:	4108d83a 	srl	r4,r8,r4
    d90c:	51e2b03a 	or	r17,r10,r7
    d910:	280ac03a 	cmpne	r5,r5,zero
    d914:	8962b03a 	or	r17,r17,r5
    d918:	89a3883a 	add	r17,r17,r6
    d91c:	2253883a 	add	r9,r4,r9
    d920:	898d803a 	cmpltu	r6,r17,r6
    d924:	3251883a 	add	r8,r6,r9
    d928:	1021883a 	mov	r16,r2
    d92c:	003ee506 	br	d4c4 <__alt_data_end+0xff00d4c4>
    d930:	4984b03a 	or	r2,r9,r6
    d934:	103e6326 	beq	r2,zero,d2c4 <__alt_data_end+0xff00d2c4>
    d938:	8987c83a 	sub	r3,r17,r6
    d93c:	88c9803a 	cmpltu	r4,r17,r3
    d940:	4245c83a 	sub	r2,r8,r9
    d944:	1105c83a 	sub	r2,r2,r4
    d948:	1100202c 	andhi	r4,r2,128
    d94c:	203ebb26 	beq	r4,zero,d43c <__alt_data_end+0xff00d43c>
    d950:	3463c83a 	sub	r17,r6,r17
    d954:	4a07c83a 	sub	r3,r9,r8
    d958:	344d803a 	cmpltu	r6,r6,r17
    d95c:	1991c83a 	sub	r8,r3,r6
    d960:	3825883a 	mov	r18,r7
    d964:	003e5706 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d968:	4984b03a 	or	r2,r9,r6
    d96c:	10002e26 	beq	r2,zero,da28 <__adddf3+0x7e0>
    d970:	4004d0fa 	srli	r2,r8,3
    d974:	8822d0fa 	srli	r17,r17,3
    d978:	4010977a 	slli	r8,r8,29
    d97c:	10c0022c 	andhi	r3,r2,8
    d980:	4462b03a 	or	r17,r8,r17
    d984:	18000826 	beq	r3,zero,d9a8 <__adddf3+0x760>
    d988:	4808d0fa 	srli	r4,r9,3
    d98c:	20c0022c 	andhi	r3,r4,8
    d990:	1800051e 	bne	r3,zero,d9a8 <__adddf3+0x760>
    d994:	300cd0fa 	srli	r6,r6,3
    d998:	4806977a 	slli	r3,r9,29
    d99c:	2005883a 	mov	r2,r4
    d9a0:	3825883a 	mov	r18,r7
    d9a4:	19a2b03a 	or	r17,r3,r6
    d9a8:	8810d77a 	srli	r8,r17,29
    d9ac:	100490fa 	slli	r2,r2,3
    d9b0:	882290fa 	slli	r17,r17,3
    d9b4:	0401ffc4 	movi	r16,2047
    d9b8:	4090b03a 	or	r8,r8,r2
    d9bc:	003e4106 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d9c0:	0141ffc4 	movi	r5,2047
    d9c4:	117fc71e 	bne	r2,r5,d8e4 <__alt_data_end+0xff00d8e4>
    d9c8:	4811883a 	mov	r8,r9
    d9cc:	3023883a 	mov	r17,r6
    d9d0:	1021883a 	mov	r16,r2
    d9d4:	003e3b06 	br	d2c4 <__alt_data_end+0xff00d2c4>
    d9d8:	10002f26 	beq	r2,zero,da98 <__adddf3+0x850>
    d9dc:	4984b03a 	or	r2,r9,r6
    d9e0:	10001126 	beq	r2,zero,da28 <__adddf3+0x7e0>
    d9e4:	4004d0fa 	srli	r2,r8,3
    d9e8:	8822d0fa 	srli	r17,r17,3
    d9ec:	4010977a 	slli	r8,r8,29
    d9f0:	10c0022c 	andhi	r3,r2,8
    d9f4:	4462b03a 	or	r17,r8,r17
    d9f8:	183feb26 	beq	r3,zero,d9a8 <__alt_data_end+0xff00d9a8>
    d9fc:	4808d0fa 	srli	r4,r9,3
    da00:	20c0022c 	andhi	r3,r4,8
    da04:	183fe81e 	bne	r3,zero,d9a8 <__alt_data_end+0xff00d9a8>
    da08:	300cd0fa 	srli	r6,r6,3
    da0c:	4806977a 	slli	r3,r9,29
    da10:	2005883a 	mov	r2,r4
    da14:	19a2b03a 	or	r17,r3,r6
    da18:	003fe306 	br	d9a8 <__alt_data_end+0xff00d9a8>
    da1c:	0011883a 	mov	r8,zero
    da20:	0005883a 	mov	r2,zero
    da24:	003e3f06 	br	d324 <__alt_data_end+0xff00d324>
    da28:	0401ffc4 	movi	r16,2047
    da2c:	003e2506 	br	d2c4 <__alt_data_end+0xff00d2c4>
    da30:	0013883a 	mov	r9,zero
    da34:	003f8406 	br	d848 <__alt_data_end+0xff00d848>
    da38:	0005883a 	mov	r2,zero
    da3c:	0007883a 	mov	r3,zero
    da40:	003e8906 	br	d468 <__alt_data_end+0xff00d468>
    da44:	197ff804 	addi	r5,r3,-32
    da48:	01000804 	movi	r4,32
    da4c:	414ad83a 	srl	r5,r8,r5
    da50:	19002426 	beq	r3,r4,dae4 <__adddf3+0x89c>
    da54:	01001004 	movi	r4,64
    da58:	20c7c83a 	sub	r3,r4,r3
    da5c:	40c6983a 	sll	r3,r8,r3
    da60:	1c46b03a 	or	r3,r3,r17
    da64:	1806c03a 	cmpne	r3,r3,zero
    da68:	28e2b03a 	or	r17,r5,r3
    da6c:	0007883a 	mov	r3,zero
    da70:	003f2306 	br	d700 <__alt_data_end+0xff00d700>
    da74:	0007883a 	mov	r3,zero
    da78:	5811883a 	mov	r8,r11
    da7c:	00bfffc4 	movi	r2,-1
    da80:	0401ffc4 	movi	r16,2047
    da84:	003e7806 	br	d468 <__alt_data_end+0xff00d468>
    da88:	4462b03a 	or	r17,r8,r17
    da8c:	8822c03a 	cmpne	r17,r17,zero
    da90:	0009883a 	mov	r4,zero
    da94:	003fa006 	br	d918 <__alt_data_end+0xff00d918>
    da98:	4811883a 	mov	r8,r9
    da9c:	3023883a 	mov	r17,r6
    daa0:	0401ffc4 	movi	r16,2047
    daa4:	003e0706 	br	d2c4 <__alt_data_end+0xff00d2c4>
    daa8:	4811883a 	mov	r8,r9
    daac:	3023883a 	mov	r17,r6
    dab0:	003e0406 	br	d2c4 <__alt_data_end+0xff00d2c4>
    dab4:	21fff804 	addi	r7,r4,-32
    dab8:	01400804 	movi	r5,32
    dabc:	41ced83a 	srl	r7,r8,r7
    dac0:	21400a26 	beq	r4,r5,daec <__adddf3+0x8a4>
    dac4:	01401004 	movi	r5,64
    dac8:	2909c83a 	sub	r4,r5,r4
    dacc:	4108983a 	sll	r4,r8,r4
    dad0:	2448b03a 	or	r4,r4,r17
    dad4:	2008c03a 	cmpne	r4,r4,zero
    dad8:	3922b03a 	or	r17,r7,r4
    dadc:	0009883a 	mov	r4,zero
    dae0:	003f8d06 	br	d918 <__alt_data_end+0xff00d918>
    dae4:	0007883a 	mov	r3,zero
    dae8:	003fdd06 	br	da60 <__alt_data_end+0xff00da60>
    daec:	0009883a 	mov	r4,zero
    daf0:	003ff706 	br	dad0 <__alt_data_end+0xff00dad0>

0000daf4 <__eqdf2>:
    daf4:	2804d53a 	srli	r2,r5,20
    daf8:	3806d53a 	srli	r3,r7,20
    dafc:	02000434 	movhi	r8,16
    db00:	423fffc4 	addi	r8,r8,-1
    db04:	1081ffcc 	andi	r2,r2,2047
    db08:	0281ffc4 	movi	r10,2047
    db0c:	2a12703a 	and	r9,r5,r8
    db10:	18c1ffcc 	andi	r3,r3,2047
    db14:	3a10703a 	and	r8,r7,r8
    db18:	280ad7fa 	srli	r5,r5,31
    db1c:	380ed7fa 	srli	r7,r7,31
    db20:	12801026 	beq	r2,r10,db64 <__eqdf2+0x70>
    db24:	0281ffc4 	movi	r10,2047
    db28:	1a800a26 	beq	r3,r10,db54 <__eqdf2+0x60>
    db2c:	10c00226 	beq	r2,r3,db38 <__eqdf2+0x44>
    db30:	00800044 	movi	r2,1
    db34:	f800283a 	ret
    db38:	4a3ffd1e 	bne	r9,r8,db30 <__alt_data_end+0xff00db30>
    db3c:	21bffc1e 	bne	r4,r6,db30 <__alt_data_end+0xff00db30>
    db40:	29c00c26 	beq	r5,r7,db74 <__eqdf2+0x80>
    db44:	103ffa1e 	bne	r2,zero,db30 <__alt_data_end+0xff00db30>
    db48:	2244b03a 	or	r2,r4,r9
    db4c:	1004c03a 	cmpne	r2,r2,zero
    db50:	f800283a 	ret
    db54:	3214b03a 	or	r10,r6,r8
    db58:	503ff426 	beq	r10,zero,db2c <__alt_data_end+0xff00db2c>
    db5c:	00800044 	movi	r2,1
    db60:	f800283a 	ret
    db64:	2254b03a 	or	r10,r4,r9
    db68:	503fee26 	beq	r10,zero,db24 <__alt_data_end+0xff00db24>
    db6c:	00800044 	movi	r2,1
    db70:	f800283a 	ret
    db74:	0005883a 	mov	r2,zero
    db78:	f800283a 	ret

0000db7c <__gedf2>:
    db7c:	2804d53a 	srli	r2,r5,20
    db80:	3806d53a 	srli	r3,r7,20
    db84:	02000434 	movhi	r8,16
    db88:	423fffc4 	addi	r8,r8,-1
    db8c:	1081ffcc 	andi	r2,r2,2047
    db90:	0241ffc4 	movi	r9,2047
    db94:	2a14703a 	and	r10,r5,r8
    db98:	18c1ffcc 	andi	r3,r3,2047
    db9c:	3a10703a 	and	r8,r7,r8
    dba0:	280ad7fa 	srli	r5,r5,31
    dba4:	380ed7fa 	srli	r7,r7,31
    dba8:	12401d26 	beq	r2,r9,dc20 <__gedf2+0xa4>
    dbac:	0241ffc4 	movi	r9,2047
    dbb0:	1a401226 	beq	r3,r9,dbfc <__gedf2+0x80>
    dbb4:	1000081e 	bne	r2,zero,dbd8 <__gedf2+0x5c>
    dbb8:	2296b03a 	or	r11,r4,r10
    dbbc:	5813003a 	cmpeq	r9,r11,zero
    dbc0:	1800091e 	bne	r3,zero,dbe8 <__gedf2+0x6c>
    dbc4:	3218b03a 	or	r12,r6,r8
    dbc8:	6000071e 	bne	r12,zero,dbe8 <__gedf2+0x6c>
    dbcc:	0005883a 	mov	r2,zero
    dbd0:	5800101e 	bne	r11,zero,dc14 <__gedf2+0x98>
    dbd4:	f800283a 	ret
    dbd8:	18000c1e 	bne	r3,zero,dc0c <__gedf2+0x90>
    dbdc:	3212b03a 	or	r9,r6,r8
    dbe0:	48000c26 	beq	r9,zero,dc14 <__gedf2+0x98>
    dbe4:	0013883a 	mov	r9,zero
    dbe8:	39c03fcc 	andi	r7,r7,255
    dbec:	48000826 	beq	r9,zero,dc10 <__gedf2+0x94>
    dbf0:	38000926 	beq	r7,zero,dc18 <__gedf2+0x9c>
    dbf4:	00800044 	movi	r2,1
    dbf8:	f800283a 	ret
    dbfc:	3212b03a 	or	r9,r6,r8
    dc00:	483fec26 	beq	r9,zero,dbb4 <__alt_data_end+0xff00dbb4>
    dc04:	00bfff84 	movi	r2,-2
    dc08:	f800283a 	ret
    dc0c:	39c03fcc 	andi	r7,r7,255
    dc10:	29c00626 	beq	r5,r7,dc2c <__gedf2+0xb0>
    dc14:	283ff726 	beq	r5,zero,dbf4 <__alt_data_end+0xff00dbf4>
    dc18:	00bfffc4 	movi	r2,-1
    dc1c:	f800283a 	ret
    dc20:	2292b03a 	or	r9,r4,r10
    dc24:	483fe126 	beq	r9,zero,dbac <__alt_data_end+0xff00dbac>
    dc28:	003ff606 	br	dc04 <__alt_data_end+0xff00dc04>
    dc2c:	18bff916 	blt	r3,r2,dc14 <__alt_data_end+0xff00dc14>
    dc30:	10c00316 	blt	r2,r3,dc40 <__gedf2+0xc4>
    dc34:	42bff736 	bltu	r8,r10,dc14 <__alt_data_end+0xff00dc14>
    dc38:	52000326 	beq	r10,r8,dc48 <__gedf2+0xcc>
    dc3c:	5200042e 	bgeu	r10,r8,dc50 <__gedf2+0xd4>
    dc40:	283fec1e 	bne	r5,zero,dbf4 <__alt_data_end+0xff00dbf4>
    dc44:	003ff406 	br	dc18 <__alt_data_end+0xff00dc18>
    dc48:	313ff236 	bltu	r6,r4,dc14 <__alt_data_end+0xff00dc14>
    dc4c:	21bffc36 	bltu	r4,r6,dc40 <__alt_data_end+0xff00dc40>
    dc50:	0005883a 	mov	r2,zero
    dc54:	f800283a 	ret

0000dc58 <__ledf2>:
    dc58:	2804d53a 	srli	r2,r5,20
    dc5c:	3810d53a 	srli	r8,r7,20
    dc60:	00c00434 	movhi	r3,16
    dc64:	18ffffc4 	addi	r3,r3,-1
    dc68:	1081ffcc 	andi	r2,r2,2047
    dc6c:	0241ffc4 	movi	r9,2047
    dc70:	28d4703a 	and	r10,r5,r3
    dc74:	4201ffcc 	andi	r8,r8,2047
    dc78:	38c6703a 	and	r3,r7,r3
    dc7c:	280ad7fa 	srli	r5,r5,31
    dc80:	380ed7fa 	srli	r7,r7,31
    dc84:	12401f26 	beq	r2,r9,dd04 <__ledf2+0xac>
    dc88:	0241ffc4 	movi	r9,2047
    dc8c:	42401426 	beq	r8,r9,dce0 <__ledf2+0x88>
    dc90:	1000091e 	bne	r2,zero,dcb8 <__ledf2+0x60>
    dc94:	2296b03a 	or	r11,r4,r10
    dc98:	5813003a 	cmpeq	r9,r11,zero
    dc9c:	29403fcc 	andi	r5,r5,255
    dca0:	40000a1e 	bne	r8,zero,dccc <__ledf2+0x74>
    dca4:	30d8b03a 	or	r12,r6,r3
    dca8:	6000081e 	bne	r12,zero,dccc <__ledf2+0x74>
    dcac:	0005883a 	mov	r2,zero
    dcb0:	5800111e 	bne	r11,zero,dcf8 <__ledf2+0xa0>
    dcb4:	f800283a 	ret
    dcb8:	29403fcc 	andi	r5,r5,255
    dcbc:	40000c1e 	bne	r8,zero,dcf0 <__ledf2+0x98>
    dcc0:	30d2b03a 	or	r9,r6,r3
    dcc4:	48000c26 	beq	r9,zero,dcf8 <__ledf2+0xa0>
    dcc8:	0013883a 	mov	r9,zero
    dccc:	39c03fcc 	andi	r7,r7,255
    dcd0:	48000826 	beq	r9,zero,dcf4 <__ledf2+0x9c>
    dcd4:	38001126 	beq	r7,zero,dd1c <__ledf2+0xc4>
    dcd8:	00800044 	movi	r2,1
    dcdc:	f800283a 	ret
    dce0:	30d2b03a 	or	r9,r6,r3
    dce4:	483fea26 	beq	r9,zero,dc90 <__alt_data_end+0xff00dc90>
    dce8:	00800084 	movi	r2,2
    dcec:	f800283a 	ret
    dcf0:	39c03fcc 	andi	r7,r7,255
    dcf4:	39400726 	beq	r7,r5,dd14 <__ledf2+0xbc>
    dcf8:	2800081e 	bne	r5,zero,dd1c <__ledf2+0xc4>
    dcfc:	00800044 	movi	r2,1
    dd00:	f800283a 	ret
    dd04:	2292b03a 	or	r9,r4,r10
    dd08:	483fdf26 	beq	r9,zero,dc88 <__alt_data_end+0xff00dc88>
    dd0c:	00800084 	movi	r2,2
    dd10:	f800283a 	ret
    dd14:	4080030e 	bge	r8,r2,dd24 <__ledf2+0xcc>
    dd18:	383fef26 	beq	r7,zero,dcd8 <__alt_data_end+0xff00dcd8>
    dd1c:	00bfffc4 	movi	r2,-1
    dd20:	f800283a 	ret
    dd24:	123feb16 	blt	r2,r8,dcd4 <__alt_data_end+0xff00dcd4>
    dd28:	1abff336 	bltu	r3,r10,dcf8 <__alt_data_end+0xff00dcf8>
    dd2c:	50c00326 	beq	r10,r3,dd3c <__ledf2+0xe4>
    dd30:	50c0042e 	bgeu	r10,r3,dd44 <__ledf2+0xec>
    dd34:	283fe81e 	bne	r5,zero,dcd8 <__alt_data_end+0xff00dcd8>
    dd38:	003ff806 	br	dd1c <__alt_data_end+0xff00dd1c>
    dd3c:	313fee36 	bltu	r6,r4,dcf8 <__alt_data_end+0xff00dcf8>
    dd40:	21bffc36 	bltu	r4,r6,dd34 <__alt_data_end+0xff00dd34>
    dd44:	0005883a 	mov	r2,zero
    dd48:	f800283a 	ret

0000dd4c <__muldf3>:
    dd4c:	defff304 	addi	sp,sp,-52
    dd50:	2804d53a 	srli	r2,r5,20
    dd54:	dd800915 	stw	r22,36(sp)
    dd58:	282cd7fa 	srli	r22,r5,31
    dd5c:	dc000315 	stw	r16,12(sp)
    dd60:	04000434 	movhi	r16,16
    dd64:	dd400815 	stw	r21,32(sp)
    dd68:	dc800515 	stw	r18,20(sp)
    dd6c:	843fffc4 	addi	r16,r16,-1
    dd70:	dfc00c15 	stw	ra,48(sp)
    dd74:	df000b15 	stw	fp,44(sp)
    dd78:	ddc00a15 	stw	r23,40(sp)
    dd7c:	dd000715 	stw	r20,28(sp)
    dd80:	dcc00615 	stw	r19,24(sp)
    dd84:	dc400415 	stw	r17,16(sp)
    dd88:	1481ffcc 	andi	r18,r2,2047
    dd8c:	2c20703a 	and	r16,r5,r16
    dd90:	b02b883a 	mov	r21,r22
    dd94:	b2403fcc 	andi	r9,r22,255
    dd98:	90006026 	beq	r18,zero,df1c <__muldf3+0x1d0>
    dd9c:	0081ffc4 	movi	r2,2047
    dda0:	2029883a 	mov	r20,r4
    dda4:	90803626 	beq	r18,r2,de80 <__muldf3+0x134>
    dda8:	80800434 	orhi	r2,r16,16
    ddac:	100490fa 	slli	r2,r2,3
    ddb0:	2020d77a 	srli	r16,r4,29
    ddb4:	202890fa 	slli	r20,r4,3
    ddb8:	94bf0044 	addi	r18,r18,-1023
    ddbc:	80a0b03a 	or	r16,r16,r2
    ddc0:	0027883a 	mov	r19,zero
    ddc4:	0039883a 	mov	fp,zero
    ddc8:	3804d53a 	srli	r2,r7,20
    ddcc:	382ed7fa 	srli	r23,r7,31
    ddd0:	04400434 	movhi	r17,16
    ddd4:	8c7fffc4 	addi	r17,r17,-1
    ddd8:	1081ffcc 	andi	r2,r2,2047
    dddc:	3011883a 	mov	r8,r6
    dde0:	3c62703a 	and	r17,r7,r17
    dde4:	ba803fcc 	andi	r10,r23,255
    dde8:	10006d26 	beq	r2,zero,dfa0 <__muldf3+0x254>
    ddec:	00c1ffc4 	movi	r3,2047
    ddf0:	10c06526 	beq	r2,r3,df88 <__muldf3+0x23c>
    ddf4:	88c00434 	orhi	r3,r17,16
    ddf8:	180690fa 	slli	r3,r3,3
    ddfc:	3022d77a 	srli	r17,r6,29
    de00:	301090fa 	slli	r8,r6,3
    de04:	10bf0044 	addi	r2,r2,-1023
    de08:	88e2b03a 	or	r17,r17,r3
    de0c:	000b883a 	mov	r5,zero
    de10:	9085883a 	add	r2,r18,r2
    de14:	2cc8b03a 	or	r4,r5,r19
    de18:	00c003c4 	movi	r3,15
    de1c:	bdacf03a 	xor	r22,r23,r22
    de20:	12c00044 	addi	r11,r2,1
    de24:	19009936 	bltu	r3,r4,e08c <__muldf3+0x340>
    de28:	200890ba 	slli	r4,r4,2
    de2c:	00c00074 	movhi	r3,1
    de30:	18f79004 	addi	r3,r3,-8640
    de34:	20c9883a 	add	r4,r4,r3
    de38:	20c00017 	ldw	r3,0(r4)
    de3c:	1800683a 	jmp	r3
    de40:	0000e08c 	andi	zero,zero,898
    de44:	0000dea0 	cmpeqi	zero,zero,890
    de48:	0000dea0 	cmpeqi	zero,zero,890
    de4c:	0000de9c 	xori	zero,zero,890
    de50:	0000e068 	cmpgeui	zero,zero,897
    de54:	0000e068 	cmpgeui	zero,zero,897
    de58:	0000e050 	cmplti	zero,zero,897
    de5c:	0000de9c 	xori	zero,zero,890
    de60:	0000e068 	cmpgeui	zero,zero,897
    de64:	0000e050 	cmplti	zero,zero,897
    de68:	0000e068 	cmpgeui	zero,zero,897
    de6c:	0000de9c 	xori	zero,zero,890
    de70:	0000e078 	rdprs	zero,zero,897
    de74:	0000e078 	rdprs	zero,zero,897
    de78:	0000e078 	rdprs	zero,zero,897
    de7c:	0000e294 	movui	zero,906
    de80:	2404b03a 	or	r2,r4,r16
    de84:	10006f1e 	bne	r2,zero,e044 <__muldf3+0x2f8>
    de88:	04c00204 	movi	r19,8
    de8c:	0021883a 	mov	r16,zero
    de90:	0029883a 	mov	r20,zero
    de94:	07000084 	movi	fp,2
    de98:	003fcb06 	br	ddc8 <__alt_data_end+0xff00ddc8>
    de9c:	502d883a 	mov	r22,r10
    dea0:	00800084 	movi	r2,2
    dea4:	28805726 	beq	r5,r2,e004 <__muldf3+0x2b8>
    dea8:	008000c4 	movi	r2,3
    deac:	28816626 	beq	r5,r2,e448 <__muldf3+0x6fc>
    deb0:	00800044 	movi	r2,1
    deb4:	2881411e 	bne	r5,r2,e3bc <__muldf3+0x670>
    deb8:	b02b883a 	mov	r21,r22
    debc:	0005883a 	mov	r2,zero
    dec0:	000b883a 	mov	r5,zero
    dec4:	0029883a 	mov	r20,zero
    dec8:	1004953a 	slli	r2,r2,20
    decc:	a8c03fcc 	andi	r3,r21,255
    ded0:	04400434 	movhi	r17,16
    ded4:	8c7fffc4 	addi	r17,r17,-1
    ded8:	180697fa 	slli	r3,r3,31
    dedc:	2c4a703a 	and	r5,r5,r17
    dee0:	288ab03a 	or	r5,r5,r2
    dee4:	28c6b03a 	or	r3,r5,r3
    dee8:	a005883a 	mov	r2,r20
    deec:	dfc00c17 	ldw	ra,48(sp)
    def0:	df000b17 	ldw	fp,44(sp)
    def4:	ddc00a17 	ldw	r23,40(sp)
    def8:	dd800917 	ldw	r22,36(sp)
    defc:	dd400817 	ldw	r21,32(sp)
    df00:	dd000717 	ldw	r20,28(sp)
    df04:	dcc00617 	ldw	r19,24(sp)
    df08:	dc800517 	ldw	r18,20(sp)
    df0c:	dc400417 	ldw	r17,16(sp)
    df10:	dc000317 	ldw	r16,12(sp)
    df14:	dec00d04 	addi	sp,sp,52
    df18:	f800283a 	ret
    df1c:	2404b03a 	or	r2,r4,r16
    df20:	2027883a 	mov	r19,r4
    df24:	10004226 	beq	r2,zero,e030 <__muldf3+0x2e4>
    df28:	8000fc26 	beq	r16,zero,e31c <__muldf3+0x5d0>
    df2c:	8009883a 	mov	r4,r16
    df30:	d9800215 	stw	r6,8(sp)
    df34:	d9c00015 	stw	r7,0(sp)
    df38:	da400115 	stw	r9,4(sp)
    df3c:	00030b80 	call	30b8 <__clzsi2>
    df40:	d9800217 	ldw	r6,8(sp)
    df44:	d9c00017 	ldw	r7,0(sp)
    df48:	da400117 	ldw	r9,4(sp)
    df4c:	113ffd44 	addi	r4,r2,-11
    df50:	00c00704 	movi	r3,28
    df54:	1900ed16 	blt	r3,r4,e30c <__muldf3+0x5c0>
    df58:	00c00744 	movi	r3,29
    df5c:	147ffe04 	addi	r17,r2,-8
    df60:	1907c83a 	sub	r3,r3,r4
    df64:	8460983a 	sll	r16,r16,r17
    df68:	98c6d83a 	srl	r3,r19,r3
    df6c:	9c68983a 	sll	r20,r19,r17
    df70:	1c20b03a 	or	r16,r3,r16
    df74:	1080fcc4 	addi	r2,r2,1011
    df78:	00a5c83a 	sub	r18,zero,r2
    df7c:	0027883a 	mov	r19,zero
    df80:	0039883a 	mov	fp,zero
    df84:	003f9006 	br	ddc8 <__alt_data_end+0xff00ddc8>
    df88:	3446b03a 	or	r3,r6,r17
    df8c:	1800261e 	bne	r3,zero,e028 <__muldf3+0x2dc>
    df90:	0023883a 	mov	r17,zero
    df94:	0011883a 	mov	r8,zero
    df98:	01400084 	movi	r5,2
    df9c:	003f9c06 	br	de10 <__alt_data_end+0xff00de10>
    dfa0:	3446b03a 	or	r3,r6,r17
    dfa4:	18001c26 	beq	r3,zero,e018 <__muldf3+0x2cc>
    dfa8:	8800ce26 	beq	r17,zero,e2e4 <__muldf3+0x598>
    dfac:	8809883a 	mov	r4,r17
    dfb0:	d9800215 	stw	r6,8(sp)
    dfb4:	da400115 	stw	r9,4(sp)
    dfb8:	da800015 	stw	r10,0(sp)
    dfbc:	00030b80 	call	30b8 <__clzsi2>
    dfc0:	d9800217 	ldw	r6,8(sp)
    dfc4:	da400117 	ldw	r9,4(sp)
    dfc8:	da800017 	ldw	r10,0(sp)
    dfcc:	113ffd44 	addi	r4,r2,-11
    dfd0:	00c00704 	movi	r3,28
    dfd4:	1900bf16 	blt	r3,r4,e2d4 <__muldf3+0x588>
    dfd8:	00c00744 	movi	r3,29
    dfdc:	123ffe04 	addi	r8,r2,-8
    dfe0:	1907c83a 	sub	r3,r3,r4
    dfe4:	8a22983a 	sll	r17,r17,r8
    dfe8:	30c6d83a 	srl	r3,r6,r3
    dfec:	3210983a 	sll	r8,r6,r8
    dff0:	1c62b03a 	or	r17,r3,r17
    dff4:	1080fcc4 	addi	r2,r2,1011
    dff8:	0085c83a 	sub	r2,zero,r2
    dffc:	000b883a 	mov	r5,zero
    e000:	003f8306 	br	de10 <__alt_data_end+0xff00de10>
    e004:	b02b883a 	mov	r21,r22
    e008:	0081ffc4 	movi	r2,2047
    e00c:	000b883a 	mov	r5,zero
    e010:	0029883a 	mov	r20,zero
    e014:	003fac06 	br	dec8 <__alt_data_end+0xff00dec8>
    e018:	0023883a 	mov	r17,zero
    e01c:	0011883a 	mov	r8,zero
    e020:	01400044 	movi	r5,1
    e024:	003f7a06 	br	de10 <__alt_data_end+0xff00de10>
    e028:	014000c4 	movi	r5,3
    e02c:	003f7806 	br	de10 <__alt_data_end+0xff00de10>
    e030:	04c00104 	movi	r19,4
    e034:	0021883a 	mov	r16,zero
    e038:	0029883a 	mov	r20,zero
    e03c:	07000044 	movi	fp,1
    e040:	003f6106 	br	ddc8 <__alt_data_end+0xff00ddc8>
    e044:	04c00304 	movi	r19,12
    e048:	070000c4 	movi	fp,3
    e04c:	003f5e06 	br	ddc8 <__alt_data_end+0xff00ddc8>
    e050:	01400434 	movhi	r5,16
    e054:	002b883a 	mov	r21,zero
    e058:	297fffc4 	addi	r5,r5,-1
    e05c:	053fffc4 	movi	r20,-1
    e060:	0081ffc4 	movi	r2,2047
    e064:	003f9806 	br	dec8 <__alt_data_end+0xff00dec8>
    e068:	8023883a 	mov	r17,r16
    e06c:	a011883a 	mov	r8,r20
    e070:	e00b883a 	mov	r5,fp
    e074:	003f8a06 	br	dea0 <__alt_data_end+0xff00dea0>
    e078:	8023883a 	mov	r17,r16
    e07c:	a011883a 	mov	r8,r20
    e080:	482d883a 	mov	r22,r9
    e084:	e00b883a 	mov	r5,fp
    e088:	003f8506 	br	dea0 <__alt_data_end+0xff00dea0>
    e08c:	a00ad43a 	srli	r5,r20,16
    e090:	401ad43a 	srli	r13,r8,16
    e094:	a53fffcc 	andi	r20,r20,65535
    e098:	423fffcc 	andi	r8,r8,65535
    e09c:	4519383a 	mul	r12,r8,r20
    e0a0:	4147383a 	mul	r3,r8,r5
    e0a4:	6d09383a 	mul	r4,r13,r20
    e0a8:	600cd43a 	srli	r6,r12,16
    e0ac:	2b5d383a 	mul	r14,r5,r13
    e0b0:	20c9883a 	add	r4,r4,r3
    e0b4:	310d883a 	add	r6,r6,r4
    e0b8:	30c0022e 	bgeu	r6,r3,e0c4 <__muldf3+0x378>
    e0bc:	00c00074 	movhi	r3,1
    e0c0:	70dd883a 	add	r14,r14,r3
    e0c4:	8826d43a 	srli	r19,r17,16
    e0c8:	8bffffcc 	andi	r15,r17,65535
    e0cc:	7d23383a 	mul	r17,r15,r20
    e0d0:	7949383a 	mul	r4,r15,r5
    e0d4:	9d29383a 	mul	r20,r19,r20
    e0d8:	8814d43a 	srli	r10,r17,16
    e0dc:	3012943a 	slli	r9,r6,16
    e0e0:	a129883a 	add	r20,r20,r4
    e0e4:	633fffcc 	andi	r12,r12,65535
    e0e8:	5515883a 	add	r10,r10,r20
    e0ec:	3006d43a 	srli	r3,r6,16
    e0f0:	4b13883a 	add	r9,r9,r12
    e0f4:	2ccb383a 	mul	r5,r5,r19
    e0f8:	5100022e 	bgeu	r10,r4,e104 <__muldf3+0x3b8>
    e0fc:	01000074 	movhi	r4,1
    e100:	290b883a 	add	r5,r5,r4
    e104:	802ad43a 	srli	r21,r16,16
    e108:	843fffcc 	andi	r16,r16,65535
    e10c:	440d383a 	mul	r6,r8,r16
    e110:	4565383a 	mul	r18,r8,r21
    e114:	8349383a 	mul	r4,r16,r13
    e118:	500e943a 	slli	r7,r10,16
    e11c:	3010d43a 	srli	r8,r6,16
    e120:	5028d43a 	srli	r20,r10,16
    e124:	2489883a 	add	r4,r4,r18
    e128:	8abfffcc 	andi	r10,r17,65535
    e12c:	3a95883a 	add	r10,r7,r10
    e130:	4119883a 	add	r12,r8,r4
    e134:	a169883a 	add	r20,r20,r5
    e138:	1a87883a 	add	r3,r3,r10
    e13c:	6d5b383a 	mul	r13,r13,r21
    e140:	6480022e 	bgeu	r12,r18,e14c <__muldf3+0x400>
    e144:	01000074 	movhi	r4,1
    e148:	691b883a 	add	r13,r13,r4
    e14c:	7c25383a 	mul	r18,r15,r16
    e150:	7d4b383a 	mul	r5,r15,r21
    e154:	84cf383a 	mul	r7,r16,r19
    e158:	901ed43a 	srli	r15,r18,16
    e15c:	6008d43a 	srli	r4,r12,16
    e160:	6010943a 	slli	r8,r12,16
    e164:	394f883a 	add	r7,r7,r5
    e168:	333fffcc 	andi	r12,r6,65535
    e16c:	79df883a 	add	r15,r15,r7
    e170:	235b883a 	add	r13,r4,r13
    e174:	9d63383a 	mul	r17,r19,r21
    e178:	4309883a 	add	r4,r8,r12
    e17c:	7940022e 	bgeu	r15,r5,e188 <__muldf3+0x43c>
    e180:	01400074 	movhi	r5,1
    e184:	8963883a 	add	r17,r17,r5
    e188:	780a943a 	slli	r5,r15,16
    e18c:	91bfffcc 	andi	r6,r18,65535
    e190:	70c7883a 	add	r3,r14,r3
    e194:	298d883a 	add	r6,r5,r6
    e198:	1a8f803a 	cmpltu	r7,r3,r10
    e19c:	350b883a 	add	r5,r6,r20
    e1a0:	20c7883a 	add	r3,r4,r3
    e1a4:	3955883a 	add	r10,r7,r5
    e1a8:	1909803a 	cmpltu	r4,r3,r4
    e1ac:	6a91883a 	add	r8,r13,r10
    e1b0:	780cd43a 	srli	r6,r15,16
    e1b4:	2219883a 	add	r12,r4,r8
    e1b8:	2d0b803a 	cmpltu	r5,r5,r20
    e1bc:	51cf803a 	cmpltu	r7,r10,r7
    e1c0:	29ceb03a 	or	r7,r5,r7
    e1c4:	4351803a 	cmpltu	r8,r8,r13
    e1c8:	610b803a 	cmpltu	r5,r12,r4
    e1cc:	4148b03a 	or	r4,r8,r5
    e1d0:	398f883a 	add	r7,r7,r6
    e1d4:	3909883a 	add	r4,r7,r4
    e1d8:	1810927a 	slli	r8,r3,9
    e1dc:	2449883a 	add	r4,r4,r17
    e1e0:	2008927a 	slli	r4,r4,9
    e1e4:	6022d5fa 	srli	r17,r12,23
    e1e8:	1806d5fa 	srli	r3,r3,23
    e1ec:	4252b03a 	or	r9,r8,r9
    e1f0:	600a927a 	slli	r5,r12,9
    e1f4:	4810c03a 	cmpne	r8,r9,zero
    e1f8:	2462b03a 	or	r17,r4,r17
    e1fc:	40c6b03a 	or	r3,r8,r3
    e200:	8900402c 	andhi	r4,r17,256
    e204:	1950b03a 	or	r8,r3,r5
    e208:	20000726 	beq	r4,zero,e228 <__muldf3+0x4dc>
    e20c:	4006d07a 	srli	r3,r8,1
    e210:	880497fa 	slli	r2,r17,31
    e214:	4200004c 	andi	r8,r8,1
    e218:	8822d07a 	srli	r17,r17,1
    e21c:	1a10b03a 	or	r8,r3,r8
    e220:	1210b03a 	or	r8,r2,r8
    e224:	5805883a 	mov	r2,r11
    e228:	1140ffc4 	addi	r5,r2,1023
    e22c:	0140440e 	bge	zero,r5,e340 <__muldf3+0x5f4>
    e230:	40c001cc 	andi	r3,r8,7
    e234:	18000726 	beq	r3,zero,e254 <__muldf3+0x508>
    e238:	40c003cc 	andi	r3,r8,15
    e23c:	01000104 	movi	r4,4
    e240:	19000426 	beq	r3,r4,e254 <__muldf3+0x508>
    e244:	4107883a 	add	r3,r8,r4
    e248:	1a11803a 	cmpltu	r8,r3,r8
    e24c:	8a23883a 	add	r17,r17,r8
    e250:	1811883a 	mov	r8,r3
    e254:	88c0402c 	andhi	r3,r17,256
    e258:	18000426 	beq	r3,zero,e26c <__muldf3+0x520>
    e25c:	11410004 	addi	r5,r2,1024
    e260:	00bfc034 	movhi	r2,65280
    e264:	10bfffc4 	addi	r2,r2,-1
    e268:	88a2703a 	and	r17,r17,r2
    e26c:	0081ff84 	movi	r2,2046
    e270:	117f6416 	blt	r2,r5,e004 <__alt_data_end+0xff00e004>
    e274:	8828977a 	slli	r20,r17,29
    e278:	4010d0fa 	srli	r8,r8,3
    e27c:	8822927a 	slli	r17,r17,9
    e280:	2881ffcc 	andi	r2,r5,2047
    e284:	a228b03a 	or	r20,r20,r8
    e288:	880ad33a 	srli	r5,r17,12
    e28c:	b02b883a 	mov	r21,r22
    e290:	003f0d06 	br	dec8 <__alt_data_end+0xff00dec8>
    e294:	8080022c 	andhi	r2,r16,8
    e298:	10000926 	beq	r2,zero,e2c0 <__muldf3+0x574>
    e29c:	8880022c 	andhi	r2,r17,8
    e2a0:	1000071e 	bne	r2,zero,e2c0 <__muldf3+0x574>
    e2a4:	00800434 	movhi	r2,16
    e2a8:	89400234 	orhi	r5,r17,8
    e2ac:	10bfffc4 	addi	r2,r2,-1
    e2b0:	b82b883a 	mov	r21,r23
    e2b4:	288a703a 	and	r5,r5,r2
    e2b8:	4029883a 	mov	r20,r8
    e2bc:	003f6806 	br	e060 <__alt_data_end+0xff00e060>
    e2c0:	00800434 	movhi	r2,16
    e2c4:	81400234 	orhi	r5,r16,8
    e2c8:	10bfffc4 	addi	r2,r2,-1
    e2cc:	288a703a 	and	r5,r5,r2
    e2d0:	003f6306 	br	e060 <__alt_data_end+0xff00e060>
    e2d4:	147ff604 	addi	r17,r2,-40
    e2d8:	3462983a 	sll	r17,r6,r17
    e2dc:	0011883a 	mov	r8,zero
    e2e0:	003f4406 	br	dff4 <__alt_data_end+0xff00dff4>
    e2e4:	3009883a 	mov	r4,r6
    e2e8:	d9800215 	stw	r6,8(sp)
    e2ec:	da400115 	stw	r9,4(sp)
    e2f0:	da800015 	stw	r10,0(sp)
    e2f4:	00030b80 	call	30b8 <__clzsi2>
    e2f8:	10800804 	addi	r2,r2,32
    e2fc:	da800017 	ldw	r10,0(sp)
    e300:	da400117 	ldw	r9,4(sp)
    e304:	d9800217 	ldw	r6,8(sp)
    e308:	003f3006 	br	dfcc <__alt_data_end+0xff00dfcc>
    e30c:	143ff604 	addi	r16,r2,-40
    e310:	9c20983a 	sll	r16,r19,r16
    e314:	0029883a 	mov	r20,zero
    e318:	003f1606 	br	df74 <__alt_data_end+0xff00df74>
    e31c:	d9800215 	stw	r6,8(sp)
    e320:	d9c00015 	stw	r7,0(sp)
    e324:	da400115 	stw	r9,4(sp)
    e328:	00030b80 	call	30b8 <__clzsi2>
    e32c:	10800804 	addi	r2,r2,32
    e330:	da400117 	ldw	r9,4(sp)
    e334:	d9c00017 	ldw	r7,0(sp)
    e338:	d9800217 	ldw	r6,8(sp)
    e33c:	003f0306 	br	df4c <__alt_data_end+0xff00df4c>
    e340:	00c00044 	movi	r3,1
    e344:	1947c83a 	sub	r3,r3,r5
    e348:	00800e04 	movi	r2,56
    e34c:	10feda16 	blt	r2,r3,deb8 <__alt_data_end+0xff00deb8>
    e350:	008007c4 	movi	r2,31
    e354:	10c01b16 	blt	r2,r3,e3c4 <__muldf3+0x678>
    e358:	00800804 	movi	r2,32
    e35c:	10c5c83a 	sub	r2,r2,r3
    e360:	888a983a 	sll	r5,r17,r2
    e364:	40c8d83a 	srl	r4,r8,r3
    e368:	4084983a 	sll	r2,r8,r2
    e36c:	88e2d83a 	srl	r17,r17,r3
    e370:	2906b03a 	or	r3,r5,r4
    e374:	1004c03a 	cmpne	r2,r2,zero
    e378:	1886b03a 	or	r3,r3,r2
    e37c:	188001cc 	andi	r2,r3,7
    e380:	10000726 	beq	r2,zero,e3a0 <__muldf3+0x654>
    e384:	188003cc 	andi	r2,r3,15
    e388:	01000104 	movi	r4,4
    e38c:	11000426 	beq	r2,r4,e3a0 <__muldf3+0x654>
    e390:	1805883a 	mov	r2,r3
    e394:	10c00104 	addi	r3,r2,4
    e398:	1885803a 	cmpltu	r2,r3,r2
    e39c:	88a3883a 	add	r17,r17,r2
    e3a0:	8880202c 	andhi	r2,r17,128
    e3a4:	10001c26 	beq	r2,zero,e418 <__muldf3+0x6cc>
    e3a8:	b02b883a 	mov	r21,r22
    e3ac:	00800044 	movi	r2,1
    e3b0:	000b883a 	mov	r5,zero
    e3b4:	0029883a 	mov	r20,zero
    e3b8:	003ec306 	br	dec8 <__alt_data_end+0xff00dec8>
    e3bc:	5805883a 	mov	r2,r11
    e3c0:	003f9906 	br	e228 <__alt_data_end+0xff00e228>
    e3c4:	00bff844 	movi	r2,-31
    e3c8:	1145c83a 	sub	r2,r2,r5
    e3cc:	8888d83a 	srl	r4,r17,r2
    e3d0:	00800804 	movi	r2,32
    e3d4:	18801a26 	beq	r3,r2,e440 <__muldf3+0x6f4>
    e3d8:	00801004 	movi	r2,64
    e3dc:	10c5c83a 	sub	r2,r2,r3
    e3e0:	8884983a 	sll	r2,r17,r2
    e3e4:	1204b03a 	or	r2,r2,r8
    e3e8:	1004c03a 	cmpne	r2,r2,zero
    e3ec:	2084b03a 	or	r2,r4,r2
    e3f0:	144001cc 	andi	r17,r2,7
    e3f4:	88000d1e 	bne	r17,zero,e42c <__muldf3+0x6e0>
    e3f8:	000b883a 	mov	r5,zero
    e3fc:	1028d0fa 	srli	r20,r2,3
    e400:	b02b883a 	mov	r21,r22
    e404:	0005883a 	mov	r2,zero
    e408:	a468b03a 	or	r20,r20,r17
    e40c:	003eae06 	br	dec8 <__alt_data_end+0xff00dec8>
    e410:	1007883a 	mov	r3,r2
    e414:	0023883a 	mov	r17,zero
    e418:	880a927a 	slli	r5,r17,9
    e41c:	1805883a 	mov	r2,r3
    e420:	8822977a 	slli	r17,r17,29
    e424:	280ad33a 	srli	r5,r5,12
    e428:	003ff406 	br	e3fc <__alt_data_end+0xff00e3fc>
    e42c:	10c003cc 	andi	r3,r2,15
    e430:	01000104 	movi	r4,4
    e434:	193ff626 	beq	r3,r4,e410 <__alt_data_end+0xff00e410>
    e438:	0023883a 	mov	r17,zero
    e43c:	003fd506 	br	e394 <__alt_data_end+0xff00e394>
    e440:	0005883a 	mov	r2,zero
    e444:	003fe706 	br	e3e4 <__alt_data_end+0xff00e3e4>
    e448:	00800434 	movhi	r2,16
    e44c:	89400234 	orhi	r5,r17,8
    e450:	10bfffc4 	addi	r2,r2,-1
    e454:	b02b883a 	mov	r21,r22
    e458:	288a703a 	and	r5,r5,r2
    e45c:	4029883a 	mov	r20,r8
    e460:	003eff06 	br	e060 <__alt_data_end+0xff00e060>

0000e464 <__subdf3>:
    e464:	02000434 	movhi	r8,16
    e468:	423fffc4 	addi	r8,r8,-1
    e46c:	defffb04 	addi	sp,sp,-20
    e470:	2a14703a 	and	r10,r5,r8
    e474:	3812d53a 	srli	r9,r7,20
    e478:	3a10703a 	and	r8,r7,r8
    e47c:	2006d77a 	srli	r3,r4,29
    e480:	3004d77a 	srli	r2,r6,29
    e484:	dc000015 	stw	r16,0(sp)
    e488:	501490fa 	slli	r10,r10,3
    e48c:	2820d53a 	srli	r16,r5,20
    e490:	401090fa 	slli	r8,r8,3
    e494:	dc800215 	stw	r18,8(sp)
    e498:	dc400115 	stw	r17,4(sp)
    e49c:	dfc00415 	stw	ra,16(sp)
    e4a0:	202290fa 	slli	r17,r4,3
    e4a4:	dcc00315 	stw	r19,12(sp)
    e4a8:	4a41ffcc 	andi	r9,r9,2047
    e4ac:	0101ffc4 	movi	r4,2047
    e4b0:	2824d7fa 	srli	r18,r5,31
    e4b4:	8401ffcc 	andi	r16,r16,2047
    e4b8:	50c6b03a 	or	r3,r10,r3
    e4bc:	380ed7fa 	srli	r7,r7,31
    e4c0:	408ab03a 	or	r5,r8,r2
    e4c4:	300c90fa 	slli	r6,r6,3
    e4c8:	49009626 	beq	r9,r4,e724 <__subdf3+0x2c0>
    e4cc:	39c0005c 	xori	r7,r7,1
    e4d0:	8245c83a 	sub	r2,r16,r9
    e4d4:	3c807426 	beq	r7,r18,e6a8 <__subdf3+0x244>
    e4d8:	0080af0e 	bge	zero,r2,e798 <__subdf3+0x334>
    e4dc:	48002a1e 	bne	r9,zero,e588 <__subdf3+0x124>
    e4e0:	2988b03a 	or	r4,r5,r6
    e4e4:	20009a1e 	bne	r4,zero,e750 <__subdf3+0x2ec>
    e4e8:	888001cc 	andi	r2,r17,7
    e4ec:	10000726 	beq	r2,zero,e50c <__subdf3+0xa8>
    e4f0:	888003cc 	andi	r2,r17,15
    e4f4:	01000104 	movi	r4,4
    e4f8:	11000426 	beq	r2,r4,e50c <__subdf3+0xa8>
    e4fc:	890b883a 	add	r5,r17,r4
    e500:	2c63803a 	cmpltu	r17,r5,r17
    e504:	1c47883a 	add	r3,r3,r17
    e508:	2823883a 	mov	r17,r5
    e50c:	1880202c 	andhi	r2,r3,128
    e510:	10005926 	beq	r2,zero,e678 <__subdf3+0x214>
    e514:	84000044 	addi	r16,r16,1
    e518:	0081ffc4 	movi	r2,2047
    e51c:	8080be26 	beq	r16,r2,e818 <__subdf3+0x3b4>
    e520:	017fe034 	movhi	r5,65408
    e524:	297fffc4 	addi	r5,r5,-1
    e528:	1946703a 	and	r3,r3,r5
    e52c:	1804977a 	slli	r2,r3,29
    e530:	1806927a 	slli	r3,r3,9
    e534:	8822d0fa 	srli	r17,r17,3
    e538:	8401ffcc 	andi	r16,r16,2047
    e53c:	180ad33a 	srli	r5,r3,12
    e540:	9100004c 	andi	r4,r18,1
    e544:	1444b03a 	or	r2,r2,r17
    e548:	80c1ffcc 	andi	r3,r16,2047
    e54c:	1820953a 	slli	r16,r3,20
    e550:	20c03fcc 	andi	r3,r4,255
    e554:	180897fa 	slli	r4,r3,31
    e558:	00c00434 	movhi	r3,16
    e55c:	18ffffc4 	addi	r3,r3,-1
    e560:	28c6703a 	and	r3,r5,r3
    e564:	1c06b03a 	or	r3,r3,r16
    e568:	1906b03a 	or	r3,r3,r4
    e56c:	dfc00417 	ldw	ra,16(sp)
    e570:	dcc00317 	ldw	r19,12(sp)
    e574:	dc800217 	ldw	r18,8(sp)
    e578:	dc400117 	ldw	r17,4(sp)
    e57c:	dc000017 	ldw	r16,0(sp)
    e580:	dec00504 	addi	sp,sp,20
    e584:	f800283a 	ret
    e588:	0101ffc4 	movi	r4,2047
    e58c:	813fd626 	beq	r16,r4,e4e8 <__alt_data_end+0xff00e4e8>
    e590:	29402034 	orhi	r5,r5,128
    e594:	01000e04 	movi	r4,56
    e598:	2080a316 	blt	r4,r2,e828 <__subdf3+0x3c4>
    e59c:	010007c4 	movi	r4,31
    e5a0:	2080c616 	blt	r4,r2,e8bc <__subdf3+0x458>
    e5a4:	01000804 	movi	r4,32
    e5a8:	2089c83a 	sub	r4,r4,r2
    e5ac:	2910983a 	sll	r8,r5,r4
    e5b0:	308ed83a 	srl	r7,r6,r2
    e5b4:	3108983a 	sll	r4,r6,r4
    e5b8:	2884d83a 	srl	r2,r5,r2
    e5bc:	41ccb03a 	or	r6,r8,r7
    e5c0:	2008c03a 	cmpne	r4,r4,zero
    e5c4:	310cb03a 	or	r6,r6,r4
    e5c8:	898dc83a 	sub	r6,r17,r6
    e5cc:	89a3803a 	cmpltu	r17,r17,r6
    e5d0:	1887c83a 	sub	r3,r3,r2
    e5d4:	1c47c83a 	sub	r3,r3,r17
    e5d8:	3023883a 	mov	r17,r6
    e5dc:	1880202c 	andhi	r2,r3,128
    e5e0:	10002326 	beq	r2,zero,e670 <__subdf3+0x20c>
    e5e4:	04c02034 	movhi	r19,128
    e5e8:	9cffffc4 	addi	r19,r19,-1
    e5ec:	1ce6703a 	and	r19,r3,r19
    e5f0:	98007a26 	beq	r19,zero,e7dc <__subdf3+0x378>
    e5f4:	9809883a 	mov	r4,r19
    e5f8:	00030b80 	call	30b8 <__clzsi2>
    e5fc:	113ffe04 	addi	r4,r2,-8
    e600:	00c007c4 	movi	r3,31
    e604:	19007b16 	blt	r3,r4,e7f4 <__subdf3+0x390>
    e608:	00800804 	movi	r2,32
    e60c:	1105c83a 	sub	r2,r2,r4
    e610:	8884d83a 	srl	r2,r17,r2
    e614:	9906983a 	sll	r3,r19,r4
    e618:	8922983a 	sll	r17,r17,r4
    e61c:	10c4b03a 	or	r2,r2,r3
    e620:	24007816 	blt	r4,r16,e804 <__subdf3+0x3a0>
    e624:	2421c83a 	sub	r16,r4,r16
    e628:	80c00044 	addi	r3,r16,1
    e62c:	010007c4 	movi	r4,31
    e630:	20c09516 	blt	r4,r3,e888 <__subdf3+0x424>
    e634:	01400804 	movi	r5,32
    e638:	28cbc83a 	sub	r5,r5,r3
    e63c:	88c8d83a 	srl	r4,r17,r3
    e640:	8962983a 	sll	r17,r17,r5
    e644:	114a983a 	sll	r5,r2,r5
    e648:	10c6d83a 	srl	r3,r2,r3
    e64c:	8804c03a 	cmpne	r2,r17,zero
    e650:	290ab03a 	or	r5,r5,r4
    e654:	28a2b03a 	or	r17,r5,r2
    e658:	0021883a 	mov	r16,zero
    e65c:	003fa206 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e660:	2090b03a 	or	r8,r4,r2
    e664:	40018e26 	beq	r8,zero,eca0 <__subdf3+0x83c>
    e668:	1007883a 	mov	r3,r2
    e66c:	2023883a 	mov	r17,r4
    e670:	888001cc 	andi	r2,r17,7
    e674:	103f9e1e 	bne	r2,zero,e4f0 <__alt_data_end+0xff00e4f0>
    e678:	1804977a 	slli	r2,r3,29
    e67c:	8822d0fa 	srli	r17,r17,3
    e680:	1810d0fa 	srli	r8,r3,3
    e684:	9100004c 	andi	r4,r18,1
    e688:	1444b03a 	or	r2,r2,r17
    e68c:	00c1ffc4 	movi	r3,2047
    e690:	80c02826 	beq	r16,r3,e734 <__subdf3+0x2d0>
    e694:	01400434 	movhi	r5,16
    e698:	297fffc4 	addi	r5,r5,-1
    e69c:	80e0703a 	and	r16,r16,r3
    e6a0:	414a703a 	and	r5,r8,r5
    e6a4:	003fa806 	br	e548 <__alt_data_end+0xff00e548>
    e6a8:	0080630e 	bge	zero,r2,e838 <__subdf3+0x3d4>
    e6ac:	48003026 	beq	r9,zero,e770 <__subdf3+0x30c>
    e6b0:	0101ffc4 	movi	r4,2047
    e6b4:	813f8c26 	beq	r16,r4,e4e8 <__alt_data_end+0xff00e4e8>
    e6b8:	29402034 	orhi	r5,r5,128
    e6bc:	01000e04 	movi	r4,56
    e6c0:	2080a90e 	bge	r4,r2,e968 <__subdf3+0x504>
    e6c4:	298cb03a 	or	r6,r5,r6
    e6c8:	3012c03a 	cmpne	r9,r6,zero
    e6cc:	0005883a 	mov	r2,zero
    e6d0:	4c53883a 	add	r9,r9,r17
    e6d4:	4c63803a 	cmpltu	r17,r9,r17
    e6d8:	10c7883a 	add	r3,r2,r3
    e6dc:	88c7883a 	add	r3,r17,r3
    e6e0:	4823883a 	mov	r17,r9
    e6e4:	1880202c 	andhi	r2,r3,128
    e6e8:	1000d026 	beq	r2,zero,ea2c <__subdf3+0x5c8>
    e6ec:	84000044 	addi	r16,r16,1
    e6f0:	0081ffc4 	movi	r2,2047
    e6f4:	8080fe26 	beq	r16,r2,eaf0 <__subdf3+0x68c>
    e6f8:	00bfe034 	movhi	r2,65408
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	1886703a 	and	r3,r3,r2
    e704:	880ad07a 	srli	r5,r17,1
    e708:	180497fa 	slli	r2,r3,31
    e70c:	8900004c 	andi	r4,r17,1
    e710:	2922b03a 	or	r17,r5,r4
    e714:	1806d07a 	srli	r3,r3,1
    e718:	1462b03a 	or	r17,r2,r17
    e71c:	3825883a 	mov	r18,r7
    e720:	003f7106 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e724:	2984b03a 	or	r2,r5,r6
    e728:	103f6826 	beq	r2,zero,e4cc <__alt_data_end+0xff00e4cc>
    e72c:	39c03fcc 	andi	r7,r7,255
    e730:	003f6706 	br	e4d0 <__alt_data_end+0xff00e4d0>
    e734:	4086b03a 	or	r3,r8,r2
    e738:	18015226 	beq	r3,zero,ec84 <__subdf3+0x820>
    e73c:	00c00434 	movhi	r3,16
    e740:	41400234 	orhi	r5,r8,8
    e744:	18ffffc4 	addi	r3,r3,-1
    e748:	28ca703a 	and	r5,r5,r3
    e74c:	003f7e06 	br	e548 <__alt_data_end+0xff00e548>
    e750:	10bfffc4 	addi	r2,r2,-1
    e754:	1000491e 	bne	r2,zero,e87c <__subdf3+0x418>
    e758:	898fc83a 	sub	r7,r17,r6
    e75c:	89e3803a 	cmpltu	r17,r17,r7
    e760:	1947c83a 	sub	r3,r3,r5
    e764:	1c47c83a 	sub	r3,r3,r17
    e768:	3823883a 	mov	r17,r7
    e76c:	003f9b06 	br	e5dc <__alt_data_end+0xff00e5dc>
    e770:	2988b03a 	or	r4,r5,r6
    e774:	203f5c26 	beq	r4,zero,e4e8 <__alt_data_end+0xff00e4e8>
    e778:	10bfffc4 	addi	r2,r2,-1
    e77c:	1000931e 	bne	r2,zero,e9cc <__subdf3+0x568>
    e780:	898d883a 	add	r6,r17,r6
    e784:	3463803a 	cmpltu	r17,r6,r17
    e788:	1947883a 	add	r3,r3,r5
    e78c:	88c7883a 	add	r3,r17,r3
    e790:	3023883a 	mov	r17,r6
    e794:	003fd306 	br	e6e4 <__alt_data_end+0xff00e6e4>
    e798:	1000541e 	bne	r2,zero,e8ec <__subdf3+0x488>
    e79c:	80800044 	addi	r2,r16,1
    e7a0:	1081ffcc 	andi	r2,r2,2047
    e7a4:	01000044 	movi	r4,1
    e7a8:	2080a20e 	bge	r4,r2,ea34 <__subdf3+0x5d0>
    e7ac:	8989c83a 	sub	r4,r17,r6
    e7b0:	8905803a 	cmpltu	r2,r17,r4
    e7b4:	1967c83a 	sub	r19,r3,r5
    e7b8:	98a7c83a 	sub	r19,r19,r2
    e7bc:	9880202c 	andhi	r2,r19,128
    e7c0:	10006326 	beq	r2,zero,e950 <__subdf3+0x4ec>
    e7c4:	3463c83a 	sub	r17,r6,r17
    e7c8:	28c7c83a 	sub	r3,r5,r3
    e7cc:	344d803a 	cmpltu	r6,r6,r17
    e7d0:	19a7c83a 	sub	r19,r3,r6
    e7d4:	3825883a 	mov	r18,r7
    e7d8:	983f861e 	bne	r19,zero,e5f4 <__alt_data_end+0xff00e5f4>
    e7dc:	8809883a 	mov	r4,r17
    e7e0:	00030b80 	call	30b8 <__clzsi2>
    e7e4:	10800804 	addi	r2,r2,32
    e7e8:	113ffe04 	addi	r4,r2,-8
    e7ec:	00c007c4 	movi	r3,31
    e7f0:	193f850e 	bge	r3,r4,e608 <__alt_data_end+0xff00e608>
    e7f4:	10bff604 	addi	r2,r2,-40
    e7f8:	8884983a 	sll	r2,r17,r2
    e7fc:	0023883a 	mov	r17,zero
    e800:	243f880e 	bge	r4,r16,e624 <__alt_data_end+0xff00e624>
    e804:	00ffe034 	movhi	r3,65408
    e808:	18ffffc4 	addi	r3,r3,-1
    e80c:	8121c83a 	sub	r16,r16,r4
    e810:	10c6703a 	and	r3,r2,r3
    e814:	003f3406 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e818:	9100004c 	andi	r4,r18,1
    e81c:	000b883a 	mov	r5,zero
    e820:	0005883a 	mov	r2,zero
    e824:	003f4806 	br	e548 <__alt_data_end+0xff00e548>
    e828:	298cb03a 	or	r6,r5,r6
    e82c:	300cc03a 	cmpne	r6,r6,zero
    e830:	0005883a 	mov	r2,zero
    e834:	003f6406 	br	e5c8 <__alt_data_end+0xff00e5c8>
    e838:	10009a1e 	bne	r2,zero,eaa4 <__subdf3+0x640>
    e83c:	82400044 	addi	r9,r16,1
    e840:	4881ffcc 	andi	r2,r9,2047
    e844:	02800044 	movi	r10,1
    e848:	5080670e 	bge	r10,r2,e9e8 <__subdf3+0x584>
    e84c:	0081ffc4 	movi	r2,2047
    e850:	4880af26 	beq	r9,r2,eb10 <__subdf3+0x6ac>
    e854:	898d883a 	add	r6,r17,r6
    e858:	1945883a 	add	r2,r3,r5
    e85c:	3447803a 	cmpltu	r3,r6,r17
    e860:	1887883a 	add	r3,r3,r2
    e864:	182297fa 	slli	r17,r3,31
    e868:	300cd07a 	srli	r6,r6,1
    e86c:	1806d07a 	srli	r3,r3,1
    e870:	4821883a 	mov	r16,r9
    e874:	89a2b03a 	or	r17,r17,r6
    e878:	003f1b06 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e87c:	0101ffc4 	movi	r4,2047
    e880:	813f441e 	bne	r16,r4,e594 <__alt_data_end+0xff00e594>
    e884:	003f1806 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e888:	843ff844 	addi	r16,r16,-31
    e88c:	01400804 	movi	r5,32
    e890:	1408d83a 	srl	r4,r2,r16
    e894:	19405026 	beq	r3,r5,e9d8 <__subdf3+0x574>
    e898:	01401004 	movi	r5,64
    e89c:	28c7c83a 	sub	r3,r5,r3
    e8a0:	10c4983a 	sll	r2,r2,r3
    e8a4:	88a2b03a 	or	r17,r17,r2
    e8a8:	8822c03a 	cmpne	r17,r17,zero
    e8ac:	2462b03a 	or	r17,r4,r17
    e8b0:	0007883a 	mov	r3,zero
    e8b4:	0021883a 	mov	r16,zero
    e8b8:	003f6d06 	br	e670 <__alt_data_end+0xff00e670>
    e8bc:	11fff804 	addi	r7,r2,-32
    e8c0:	01000804 	movi	r4,32
    e8c4:	29ced83a 	srl	r7,r5,r7
    e8c8:	11004526 	beq	r2,r4,e9e0 <__subdf3+0x57c>
    e8cc:	01001004 	movi	r4,64
    e8d0:	2089c83a 	sub	r4,r4,r2
    e8d4:	2904983a 	sll	r2,r5,r4
    e8d8:	118cb03a 	or	r6,r2,r6
    e8dc:	300cc03a 	cmpne	r6,r6,zero
    e8e0:	398cb03a 	or	r6,r7,r6
    e8e4:	0005883a 	mov	r2,zero
    e8e8:	003f3706 	br	e5c8 <__alt_data_end+0xff00e5c8>
    e8ec:	80002a26 	beq	r16,zero,e998 <__subdf3+0x534>
    e8f0:	0101ffc4 	movi	r4,2047
    e8f4:	49006626 	beq	r9,r4,ea90 <__subdf3+0x62c>
    e8f8:	0085c83a 	sub	r2,zero,r2
    e8fc:	18c02034 	orhi	r3,r3,128
    e900:	01000e04 	movi	r4,56
    e904:	20807e16 	blt	r4,r2,eb00 <__subdf3+0x69c>
    e908:	010007c4 	movi	r4,31
    e90c:	2080e716 	blt	r4,r2,ecac <__subdf3+0x848>
    e910:	01000804 	movi	r4,32
    e914:	2089c83a 	sub	r4,r4,r2
    e918:	1914983a 	sll	r10,r3,r4
    e91c:	8890d83a 	srl	r8,r17,r2
    e920:	8908983a 	sll	r4,r17,r4
    e924:	1884d83a 	srl	r2,r3,r2
    e928:	5222b03a 	or	r17,r10,r8
    e92c:	2006c03a 	cmpne	r3,r4,zero
    e930:	88e2b03a 	or	r17,r17,r3
    e934:	3463c83a 	sub	r17,r6,r17
    e938:	2885c83a 	sub	r2,r5,r2
    e93c:	344d803a 	cmpltu	r6,r6,r17
    e940:	1187c83a 	sub	r3,r2,r6
    e944:	4821883a 	mov	r16,r9
    e948:	3825883a 	mov	r18,r7
    e94c:	003f2306 	br	e5dc <__alt_data_end+0xff00e5dc>
    e950:	24d0b03a 	or	r8,r4,r19
    e954:	40001b1e 	bne	r8,zero,e9c4 <__subdf3+0x560>
    e958:	0005883a 	mov	r2,zero
    e95c:	0009883a 	mov	r4,zero
    e960:	0021883a 	mov	r16,zero
    e964:	003f4906 	br	e68c <__alt_data_end+0xff00e68c>
    e968:	010007c4 	movi	r4,31
    e96c:	20803a16 	blt	r4,r2,ea58 <__subdf3+0x5f4>
    e970:	01000804 	movi	r4,32
    e974:	2089c83a 	sub	r4,r4,r2
    e978:	2912983a 	sll	r9,r5,r4
    e97c:	3090d83a 	srl	r8,r6,r2
    e980:	3108983a 	sll	r4,r6,r4
    e984:	2884d83a 	srl	r2,r5,r2
    e988:	4a12b03a 	or	r9,r9,r8
    e98c:	2008c03a 	cmpne	r4,r4,zero
    e990:	4912b03a 	or	r9,r9,r4
    e994:	003f4e06 	br	e6d0 <__alt_data_end+0xff00e6d0>
    e998:	1c48b03a 	or	r4,r3,r17
    e99c:	20003c26 	beq	r4,zero,ea90 <__subdf3+0x62c>
    e9a0:	0084303a 	nor	r2,zero,r2
    e9a4:	1000381e 	bne	r2,zero,ea88 <__subdf3+0x624>
    e9a8:	3463c83a 	sub	r17,r6,r17
    e9ac:	28c5c83a 	sub	r2,r5,r3
    e9b0:	344d803a 	cmpltu	r6,r6,r17
    e9b4:	1187c83a 	sub	r3,r2,r6
    e9b8:	4821883a 	mov	r16,r9
    e9bc:	3825883a 	mov	r18,r7
    e9c0:	003f0606 	br	e5dc <__alt_data_end+0xff00e5dc>
    e9c4:	2023883a 	mov	r17,r4
    e9c8:	003f0906 	br	e5f0 <__alt_data_end+0xff00e5f0>
    e9cc:	0101ffc4 	movi	r4,2047
    e9d0:	813f3a1e 	bne	r16,r4,e6bc <__alt_data_end+0xff00e6bc>
    e9d4:	003ec406 	br	e4e8 <__alt_data_end+0xff00e4e8>
    e9d8:	0005883a 	mov	r2,zero
    e9dc:	003fb106 	br	e8a4 <__alt_data_end+0xff00e8a4>
    e9e0:	0005883a 	mov	r2,zero
    e9e4:	003fbc06 	br	e8d8 <__alt_data_end+0xff00e8d8>
    e9e8:	1c44b03a 	or	r2,r3,r17
    e9ec:	80008e1e 	bne	r16,zero,ec28 <__subdf3+0x7c4>
    e9f0:	1000c826 	beq	r2,zero,ed14 <__subdf3+0x8b0>
    e9f4:	2984b03a 	or	r2,r5,r6
    e9f8:	103ebb26 	beq	r2,zero,e4e8 <__alt_data_end+0xff00e4e8>
    e9fc:	8989883a 	add	r4,r17,r6
    ea00:	1945883a 	add	r2,r3,r5
    ea04:	2447803a 	cmpltu	r3,r4,r17
    ea08:	1887883a 	add	r3,r3,r2
    ea0c:	1880202c 	andhi	r2,r3,128
    ea10:	2023883a 	mov	r17,r4
    ea14:	103f1626 	beq	r2,zero,e670 <__alt_data_end+0xff00e670>
    ea18:	00bfe034 	movhi	r2,65408
    ea1c:	10bfffc4 	addi	r2,r2,-1
    ea20:	5021883a 	mov	r16,r10
    ea24:	1886703a 	and	r3,r3,r2
    ea28:	003eaf06 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ea2c:	3825883a 	mov	r18,r7
    ea30:	003f0f06 	br	e670 <__alt_data_end+0xff00e670>
    ea34:	1c44b03a 	or	r2,r3,r17
    ea38:	8000251e 	bne	r16,zero,ead0 <__subdf3+0x66c>
    ea3c:	1000661e 	bne	r2,zero,ebd8 <__subdf3+0x774>
    ea40:	2990b03a 	or	r8,r5,r6
    ea44:	40009626 	beq	r8,zero,eca0 <__subdf3+0x83c>
    ea48:	2807883a 	mov	r3,r5
    ea4c:	3023883a 	mov	r17,r6
    ea50:	3825883a 	mov	r18,r7
    ea54:	003ea406 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ea58:	127ff804 	addi	r9,r2,-32
    ea5c:	01000804 	movi	r4,32
    ea60:	2a52d83a 	srl	r9,r5,r9
    ea64:	11008c26 	beq	r2,r4,ec98 <__subdf3+0x834>
    ea68:	01001004 	movi	r4,64
    ea6c:	2085c83a 	sub	r2,r4,r2
    ea70:	2884983a 	sll	r2,r5,r2
    ea74:	118cb03a 	or	r6,r2,r6
    ea78:	300cc03a 	cmpne	r6,r6,zero
    ea7c:	4992b03a 	or	r9,r9,r6
    ea80:	0005883a 	mov	r2,zero
    ea84:	003f1206 	br	e6d0 <__alt_data_end+0xff00e6d0>
    ea88:	0101ffc4 	movi	r4,2047
    ea8c:	493f9c1e 	bne	r9,r4,e900 <__alt_data_end+0xff00e900>
    ea90:	2807883a 	mov	r3,r5
    ea94:	3023883a 	mov	r17,r6
    ea98:	4821883a 	mov	r16,r9
    ea9c:	3825883a 	mov	r18,r7
    eaa0:	003e9106 	br	e4e8 <__alt_data_end+0xff00e4e8>
    eaa4:	80001f1e 	bne	r16,zero,eb24 <__subdf3+0x6c0>
    eaa8:	1c48b03a 	or	r4,r3,r17
    eaac:	20005a26 	beq	r4,zero,ec18 <__subdf3+0x7b4>
    eab0:	0084303a 	nor	r2,zero,r2
    eab4:	1000561e 	bne	r2,zero,ec10 <__subdf3+0x7ac>
    eab8:	89a3883a 	add	r17,r17,r6
    eabc:	1945883a 	add	r2,r3,r5
    eac0:	898d803a 	cmpltu	r6,r17,r6
    eac4:	3087883a 	add	r3,r6,r2
    eac8:	4821883a 	mov	r16,r9
    eacc:	003f0506 	br	e6e4 <__alt_data_end+0xff00e6e4>
    ead0:	10002b1e 	bne	r2,zero,eb80 <__subdf3+0x71c>
    ead4:	2984b03a 	or	r2,r5,r6
    ead8:	10008026 	beq	r2,zero,ecdc <__subdf3+0x878>
    eadc:	2807883a 	mov	r3,r5
    eae0:	3023883a 	mov	r17,r6
    eae4:	3825883a 	mov	r18,r7
    eae8:	0401ffc4 	movi	r16,2047
    eaec:	003e7e06 	br	e4e8 <__alt_data_end+0xff00e4e8>
    eaf0:	3809883a 	mov	r4,r7
    eaf4:	0011883a 	mov	r8,zero
    eaf8:	0005883a 	mov	r2,zero
    eafc:	003ee306 	br	e68c <__alt_data_end+0xff00e68c>
    eb00:	1c62b03a 	or	r17,r3,r17
    eb04:	8822c03a 	cmpne	r17,r17,zero
    eb08:	0005883a 	mov	r2,zero
    eb0c:	003f8906 	br	e934 <__alt_data_end+0xff00e934>
    eb10:	3809883a 	mov	r4,r7
    eb14:	4821883a 	mov	r16,r9
    eb18:	0011883a 	mov	r8,zero
    eb1c:	0005883a 	mov	r2,zero
    eb20:	003eda06 	br	e68c <__alt_data_end+0xff00e68c>
    eb24:	0101ffc4 	movi	r4,2047
    eb28:	49003b26 	beq	r9,r4,ec18 <__subdf3+0x7b4>
    eb2c:	0085c83a 	sub	r2,zero,r2
    eb30:	18c02034 	orhi	r3,r3,128
    eb34:	01000e04 	movi	r4,56
    eb38:	20806e16 	blt	r4,r2,ecf4 <__subdf3+0x890>
    eb3c:	010007c4 	movi	r4,31
    eb40:	20807716 	blt	r4,r2,ed20 <__subdf3+0x8bc>
    eb44:	01000804 	movi	r4,32
    eb48:	2089c83a 	sub	r4,r4,r2
    eb4c:	1914983a 	sll	r10,r3,r4
    eb50:	8890d83a 	srl	r8,r17,r2
    eb54:	8908983a 	sll	r4,r17,r4
    eb58:	1884d83a 	srl	r2,r3,r2
    eb5c:	5222b03a 	or	r17,r10,r8
    eb60:	2006c03a 	cmpne	r3,r4,zero
    eb64:	88e2b03a 	or	r17,r17,r3
    eb68:	89a3883a 	add	r17,r17,r6
    eb6c:	1145883a 	add	r2,r2,r5
    eb70:	898d803a 	cmpltu	r6,r17,r6
    eb74:	3087883a 	add	r3,r6,r2
    eb78:	4821883a 	mov	r16,r9
    eb7c:	003ed906 	br	e6e4 <__alt_data_end+0xff00e6e4>
    eb80:	2984b03a 	or	r2,r5,r6
    eb84:	10004226 	beq	r2,zero,ec90 <__subdf3+0x82c>
    eb88:	1808d0fa 	srli	r4,r3,3
    eb8c:	8822d0fa 	srli	r17,r17,3
    eb90:	1806977a 	slli	r3,r3,29
    eb94:	2080022c 	andhi	r2,r4,8
    eb98:	1c62b03a 	or	r17,r3,r17
    eb9c:	10000826 	beq	r2,zero,ebc0 <__subdf3+0x75c>
    eba0:	2812d0fa 	srli	r9,r5,3
    eba4:	4880022c 	andhi	r2,r9,8
    eba8:	1000051e 	bne	r2,zero,ebc0 <__subdf3+0x75c>
    ebac:	300cd0fa 	srli	r6,r6,3
    ebb0:	2804977a 	slli	r2,r5,29
    ebb4:	4809883a 	mov	r4,r9
    ebb8:	3825883a 	mov	r18,r7
    ebbc:	11a2b03a 	or	r17,r2,r6
    ebc0:	8806d77a 	srli	r3,r17,29
    ebc4:	200890fa 	slli	r4,r4,3
    ebc8:	882290fa 	slli	r17,r17,3
    ebcc:	0401ffc4 	movi	r16,2047
    ebd0:	1906b03a 	or	r3,r3,r4
    ebd4:	003e4406 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ebd8:	2984b03a 	or	r2,r5,r6
    ebdc:	103e4226 	beq	r2,zero,e4e8 <__alt_data_end+0xff00e4e8>
    ebe0:	8989c83a 	sub	r4,r17,r6
    ebe4:	8911803a 	cmpltu	r8,r17,r4
    ebe8:	1945c83a 	sub	r2,r3,r5
    ebec:	1205c83a 	sub	r2,r2,r8
    ebf0:	1200202c 	andhi	r8,r2,128
    ebf4:	403e9a26 	beq	r8,zero,e660 <__alt_data_end+0xff00e660>
    ebf8:	3463c83a 	sub	r17,r6,r17
    ebfc:	28c5c83a 	sub	r2,r5,r3
    ec00:	344d803a 	cmpltu	r6,r6,r17
    ec04:	1187c83a 	sub	r3,r2,r6
    ec08:	3825883a 	mov	r18,r7
    ec0c:	003e3606 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ec10:	0101ffc4 	movi	r4,2047
    ec14:	493fc71e 	bne	r9,r4,eb34 <__alt_data_end+0xff00eb34>
    ec18:	2807883a 	mov	r3,r5
    ec1c:	3023883a 	mov	r17,r6
    ec20:	4821883a 	mov	r16,r9
    ec24:	003e3006 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ec28:	10003626 	beq	r2,zero,ed04 <__subdf3+0x8a0>
    ec2c:	2984b03a 	or	r2,r5,r6
    ec30:	10001726 	beq	r2,zero,ec90 <__subdf3+0x82c>
    ec34:	1808d0fa 	srli	r4,r3,3
    ec38:	8822d0fa 	srli	r17,r17,3
    ec3c:	1806977a 	slli	r3,r3,29
    ec40:	2080022c 	andhi	r2,r4,8
    ec44:	1c62b03a 	or	r17,r3,r17
    ec48:	10000726 	beq	r2,zero,ec68 <__subdf3+0x804>
    ec4c:	2812d0fa 	srli	r9,r5,3
    ec50:	4880022c 	andhi	r2,r9,8
    ec54:	1000041e 	bne	r2,zero,ec68 <__subdf3+0x804>
    ec58:	300cd0fa 	srli	r6,r6,3
    ec5c:	2804977a 	slli	r2,r5,29
    ec60:	4809883a 	mov	r4,r9
    ec64:	11a2b03a 	or	r17,r2,r6
    ec68:	8806d77a 	srli	r3,r17,29
    ec6c:	200890fa 	slli	r4,r4,3
    ec70:	882290fa 	slli	r17,r17,3
    ec74:	3825883a 	mov	r18,r7
    ec78:	1906b03a 	or	r3,r3,r4
    ec7c:	0401ffc4 	movi	r16,2047
    ec80:	003e1906 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ec84:	000b883a 	mov	r5,zero
    ec88:	0005883a 	mov	r2,zero
    ec8c:	003e2e06 	br	e548 <__alt_data_end+0xff00e548>
    ec90:	0401ffc4 	movi	r16,2047
    ec94:	003e1406 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ec98:	0005883a 	mov	r2,zero
    ec9c:	003f7506 	br	ea74 <__alt_data_end+0xff00ea74>
    eca0:	0005883a 	mov	r2,zero
    eca4:	0009883a 	mov	r4,zero
    eca8:	003e7806 	br	e68c <__alt_data_end+0xff00e68c>
    ecac:	123ff804 	addi	r8,r2,-32
    ecb0:	01000804 	movi	r4,32
    ecb4:	1a10d83a 	srl	r8,r3,r8
    ecb8:	11002526 	beq	r2,r4,ed50 <__subdf3+0x8ec>
    ecbc:	01001004 	movi	r4,64
    ecc0:	2085c83a 	sub	r2,r4,r2
    ecc4:	1884983a 	sll	r2,r3,r2
    ecc8:	1444b03a 	or	r2,r2,r17
    eccc:	1004c03a 	cmpne	r2,r2,zero
    ecd0:	40a2b03a 	or	r17,r8,r2
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	003f1606 	br	e934 <__alt_data_end+0xff00e934>
    ecdc:	02000434 	movhi	r8,16
    ece0:	0009883a 	mov	r4,zero
    ece4:	423fffc4 	addi	r8,r8,-1
    ece8:	00bfffc4 	movi	r2,-1
    ecec:	0401ffc4 	movi	r16,2047
    ecf0:	003e6606 	br	e68c <__alt_data_end+0xff00e68c>
    ecf4:	1c62b03a 	or	r17,r3,r17
    ecf8:	8822c03a 	cmpne	r17,r17,zero
    ecfc:	0005883a 	mov	r2,zero
    ed00:	003f9906 	br	eb68 <__alt_data_end+0xff00eb68>
    ed04:	2807883a 	mov	r3,r5
    ed08:	3023883a 	mov	r17,r6
    ed0c:	0401ffc4 	movi	r16,2047
    ed10:	003df506 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ed14:	2807883a 	mov	r3,r5
    ed18:	3023883a 	mov	r17,r6
    ed1c:	003df206 	br	e4e8 <__alt_data_end+0xff00e4e8>
    ed20:	123ff804 	addi	r8,r2,-32
    ed24:	01000804 	movi	r4,32
    ed28:	1a10d83a 	srl	r8,r3,r8
    ed2c:	11000a26 	beq	r2,r4,ed58 <__subdf3+0x8f4>
    ed30:	01001004 	movi	r4,64
    ed34:	2085c83a 	sub	r2,r4,r2
    ed38:	1884983a 	sll	r2,r3,r2
    ed3c:	1444b03a 	or	r2,r2,r17
    ed40:	1004c03a 	cmpne	r2,r2,zero
    ed44:	40a2b03a 	or	r17,r8,r2
    ed48:	0005883a 	mov	r2,zero
    ed4c:	003f8606 	br	eb68 <__alt_data_end+0xff00eb68>
    ed50:	0005883a 	mov	r2,zero
    ed54:	003fdc06 	br	ecc8 <__alt_data_end+0xff00ecc8>
    ed58:	0005883a 	mov	r2,zero
    ed5c:	003ff706 	br	ed3c <__alt_data_end+0xff00ed3c>

0000ed60 <__fixdfsi>:
    ed60:	280cd53a 	srli	r6,r5,20
    ed64:	00c00434 	movhi	r3,16
    ed68:	18ffffc4 	addi	r3,r3,-1
    ed6c:	3181ffcc 	andi	r6,r6,2047
    ed70:	01c0ff84 	movi	r7,1022
    ed74:	28c6703a 	and	r3,r5,r3
    ed78:	280ad7fa 	srli	r5,r5,31
    ed7c:	3980120e 	bge	r7,r6,edc8 <__fixdfsi+0x68>
    ed80:	00810744 	movi	r2,1053
    ed84:	11800c16 	blt	r2,r6,edb8 <__fixdfsi+0x58>
    ed88:	00810cc4 	movi	r2,1075
    ed8c:	1185c83a 	sub	r2,r2,r6
    ed90:	01c007c4 	movi	r7,31
    ed94:	18c00434 	orhi	r3,r3,16
    ed98:	38800d16 	blt	r7,r2,edd0 <__fixdfsi+0x70>
    ed9c:	31befb44 	addi	r6,r6,-1043
    eda0:	2084d83a 	srl	r2,r4,r2
    eda4:	1986983a 	sll	r3,r3,r6
    eda8:	1884b03a 	or	r2,r3,r2
    edac:	28000726 	beq	r5,zero,edcc <__fixdfsi+0x6c>
    edb0:	0085c83a 	sub	r2,zero,r2
    edb4:	f800283a 	ret
    edb8:	00a00034 	movhi	r2,32768
    edbc:	10bfffc4 	addi	r2,r2,-1
    edc0:	2885883a 	add	r2,r5,r2
    edc4:	f800283a 	ret
    edc8:	0005883a 	mov	r2,zero
    edcc:	f800283a 	ret
    edd0:	008104c4 	movi	r2,1043
    edd4:	1185c83a 	sub	r2,r2,r6
    edd8:	1884d83a 	srl	r2,r3,r2
    eddc:	003ff306 	br	edac <__alt_data_end+0xff00edac>

0000ede0 <__floatsidf>:
    ede0:	defffd04 	addi	sp,sp,-12
    ede4:	dfc00215 	stw	ra,8(sp)
    ede8:	dc400115 	stw	r17,4(sp)
    edec:	dc000015 	stw	r16,0(sp)
    edf0:	20002b26 	beq	r4,zero,eea0 <__floatsidf+0xc0>
    edf4:	2023883a 	mov	r17,r4
    edf8:	2020d7fa 	srli	r16,r4,31
    edfc:	20002d16 	blt	r4,zero,eeb4 <__floatsidf+0xd4>
    ee00:	8809883a 	mov	r4,r17
    ee04:	00030b80 	call	30b8 <__clzsi2>
    ee08:	01410784 	movi	r5,1054
    ee0c:	288bc83a 	sub	r5,r5,r2
    ee10:	01010cc4 	movi	r4,1075
    ee14:	2149c83a 	sub	r4,r4,r5
    ee18:	00c007c4 	movi	r3,31
    ee1c:	1900160e 	bge	r3,r4,ee78 <__floatsidf+0x98>
    ee20:	00c104c4 	movi	r3,1043
    ee24:	1947c83a 	sub	r3,r3,r5
    ee28:	88c6983a 	sll	r3,r17,r3
    ee2c:	00800434 	movhi	r2,16
    ee30:	10bfffc4 	addi	r2,r2,-1
    ee34:	1886703a 	and	r3,r3,r2
    ee38:	2941ffcc 	andi	r5,r5,2047
    ee3c:	800d883a 	mov	r6,r16
    ee40:	0005883a 	mov	r2,zero
    ee44:	280a953a 	slli	r5,r5,20
    ee48:	31803fcc 	andi	r6,r6,255
    ee4c:	01000434 	movhi	r4,16
    ee50:	300c97fa 	slli	r6,r6,31
    ee54:	213fffc4 	addi	r4,r4,-1
    ee58:	1906703a 	and	r3,r3,r4
    ee5c:	1946b03a 	or	r3,r3,r5
    ee60:	1986b03a 	or	r3,r3,r6
    ee64:	dfc00217 	ldw	ra,8(sp)
    ee68:	dc400117 	ldw	r17,4(sp)
    ee6c:	dc000017 	ldw	r16,0(sp)
    ee70:	dec00304 	addi	sp,sp,12
    ee74:	f800283a 	ret
    ee78:	00c002c4 	movi	r3,11
    ee7c:	1887c83a 	sub	r3,r3,r2
    ee80:	88c6d83a 	srl	r3,r17,r3
    ee84:	8904983a 	sll	r2,r17,r4
    ee88:	01000434 	movhi	r4,16
    ee8c:	213fffc4 	addi	r4,r4,-1
    ee90:	2941ffcc 	andi	r5,r5,2047
    ee94:	1906703a 	and	r3,r3,r4
    ee98:	800d883a 	mov	r6,r16
    ee9c:	003fe906 	br	ee44 <__alt_data_end+0xff00ee44>
    eea0:	000d883a 	mov	r6,zero
    eea4:	000b883a 	mov	r5,zero
    eea8:	0007883a 	mov	r3,zero
    eeac:	0005883a 	mov	r2,zero
    eeb0:	003fe406 	br	ee44 <__alt_data_end+0xff00ee44>
    eeb4:	0123c83a 	sub	r17,zero,r4
    eeb8:	003fd106 	br	ee00 <__alt_data_end+0xff00ee00>

0000eebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eebc:	defffe04 	addi	sp,sp,-8
    eec0:	dfc00115 	stw	ra,4(sp)
    eec4:	df000015 	stw	fp,0(sp)
    eec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eecc:	d0a00b17 	ldw	r2,-32724(gp)
    eed0:	10000326 	beq	r2,zero,eee0 <alt_get_errno+0x24>
    eed4:	d0a00b17 	ldw	r2,-32724(gp)
    eed8:	103ee83a 	callr	r2
    eedc:	00000106 	br	eee4 <alt_get_errno+0x28>
    eee0:	d0a72704 	addi	r2,gp,-25444
}
    eee4:	e037883a 	mov	sp,fp
    eee8:	dfc00117 	ldw	ra,4(sp)
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00204 	addi	sp,sp,8
    eef4:	f800283a 	ret

0000eef8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    eef8:	defffb04 	addi	sp,sp,-20
    eefc:	dfc00415 	stw	ra,16(sp)
    ef00:	df000315 	stw	fp,12(sp)
    ef04:	df000304 	addi	fp,sp,12
    ef08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ef0c:	e0bfff17 	ldw	r2,-4(fp)
    ef10:	10000616 	blt	r2,zero,ef2c <close+0x34>
    ef14:	e0bfff17 	ldw	r2,-4(fp)
    ef18:	10c00324 	muli	r3,r2,12
    ef1c:	00800074 	movhi	r2,1
    ef20:	108b5304 	addi	r2,r2,11596
    ef24:	1885883a 	add	r2,r3,r2
    ef28:	00000106 	br	ef30 <close+0x38>
    ef2c:	0005883a 	mov	r2,zero
    ef30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ef34:	e0bffd17 	ldw	r2,-12(fp)
    ef38:	10001926 	beq	r2,zero,efa0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ef3c:	e0bffd17 	ldw	r2,-12(fp)
    ef40:	10800017 	ldw	r2,0(r2)
    ef44:	10800417 	ldw	r2,16(r2)
    ef48:	10000626 	beq	r2,zero,ef64 <close+0x6c>
    ef4c:	e0bffd17 	ldw	r2,-12(fp)
    ef50:	10800017 	ldw	r2,0(r2)
    ef54:	10800417 	ldw	r2,16(r2)
    ef58:	e13ffd17 	ldw	r4,-12(fp)
    ef5c:	103ee83a 	callr	r2
    ef60:	00000106 	br	ef68 <close+0x70>
    ef64:	0005883a 	mov	r2,zero
    ef68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ef6c:	e13fff17 	ldw	r4,-4(fp)
    ef70:	000f5b80 	call	f5b8 <alt_release_fd>
    if (rval < 0)
    ef74:	e0bffe17 	ldw	r2,-8(fp)
    ef78:	1000070e 	bge	r2,zero,ef98 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ef7c:	000eebc0 	call	eebc <alt_get_errno>
    ef80:	1007883a 	mov	r3,r2
    ef84:	e0bffe17 	ldw	r2,-8(fp)
    ef88:	0085c83a 	sub	r2,zero,r2
    ef8c:	18800015 	stw	r2,0(r3)
      return -1;
    ef90:	00bfffc4 	movi	r2,-1
    ef94:	00000706 	br	efb4 <close+0xbc>
    }
    return 0;
    ef98:	0005883a 	mov	r2,zero
    ef9c:	00000506 	br	efb4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    efa0:	000eebc0 	call	eebc <alt_get_errno>
    efa4:	1007883a 	mov	r3,r2
    efa8:	00801444 	movi	r2,81
    efac:	18800015 	stw	r2,0(r3)
    return -1;
    efb0:	00bfffc4 	movi	r2,-1
  }
}
    efb4:	e037883a 	mov	sp,fp
    efb8:	dfc00117 	ldw	ra,4(sp)
    efbc:	df000017 	ldw	fp,0(sp)
    efc0:	dec00204 	addi	sp,sp,8
    efc4:	f800283a 	ret

0000efc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    efc8:	defffc04 	addi	sp,sp,-16
    efcc:	df000315 	stw	fp,12(sp)
    efd0:	df000304 	addi	fp,sp,12
    efd4:	e13ffd15 	stw	r4,-12(fp)
    efd8:	e17ffe15 	stw	r5,-8(fp)
    efdc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    efe0:	e0bfff17 	ldw	r2,-4(fp)
}
    efe4:	e037883a 	mov	sp,fp
    efe8:	df000017 	ldw	fp,0(sp)
    efec:	dec00104 	addi	sp,sp,4
    eff0:	f800283a 	ret

0000eff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eff4:	defffe04 	addi	sp,sp,-8
    eff8:	dfc00115 	stw	ra,4(sp)
    effc:	df000015 	stw	fp,0(sp)
    f000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f004:	d0a00b17 	ldw	r2,-32724(gp)
    f008:	10000326 	beq	r2,zero,f018 <alt_get_errno+0x24>
    f00c:	d0a00b17 	ldw	r2,-32724(gp)
    f010:	103ee83a 	callr	r2
    f014:	00000106 	br	f01c <alt_get_errno+0x28>
    f018:	d0a72704 	addi	r2,gp,-25444
}
    f01c:	e037883a 	mov	sp,fp
    f020:	dfc00117 	ldw	ra,4(sp)
    f024:	df000017 	ldw	fp,0(sp)
    f028:	dec00204 	addi	sp,sp,8
    f02c:	f800283a 	ret

0000f030 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f030:	defffb04 	addi	sp,sp,-20
    f034:	dfc00415 	stw	ra,16(sp)
    f038:	df000315 	stw	fp,12(sp)
    f03c:	df000304 	addi	fp,sp,12
    f040:	e13ffe15 	stw	r4,-8(fp)
    f044:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f048:	e0bffe17 	ldw	r2,-8(fp)
    f04c:	10000616 	blt	r2,zero,f068 <fstat+0x38>
    f050:	e0bffe17 	ldw	r2,-8(fp)
    f054:	10c00324 	muli	r3,r2,12
    f058:	00800074 	movhi	r2,1
    f05c:	108b5304 	addi	r2,r2,11596
    f060:	1885883a 	add	r2,r3,r2
    f064:	00000106 	br	f06c <fstat+0x3c>
    f068:	0005883a 	mov	r2,zero
    f06c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f070:	e0bffd17 	ldw	r2,-12(fp)
    f074:	10001026 	beq	r2,zero,f0b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f078:	e0bffd17 	ldw	r2,-12(fp)
    f07c:	10800017 	ldw	r2,0(r2)
    f080:	10800817 	ldw	r2,32(r2)
    f084:	10000726 	beq	r2,zero,f0a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f088:	e0bffd17 	ldw	r2,-12(fp)
    f08c:	10800017 	ldw	r2,0(r2)
    f090:	10800817 	ldw	r2,32(r2)
    f094:	e17fff17 	ldw	r5,-4(fp)
    f098:	e13ffd17 	ldw	r4,-12(fp)
    f09c:	103ee83a 	callr	r2
    f0a0:	00000a06 	br	f0cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f0a4:	e0bfff17 	ldw	r2,-4(fp)
    f0a8:	00c80004 	movi	r3,8192
    f0ac:	10c00115 	stw	r3,4(r2)
      return 0;
    f0b0:	0005883a 	mov	r2,zero
    f0b4:	00000506 	br	f0cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f0b8:	000eff40 	call	eff4 <alt_get_errno>
    f0bc:	1007883a 	mov	r3,r2
    f0c0:	00801444 	movi	r2,81
    f0c4:	18800015 	stw	r2,0(r3)
    return -1;
    f0c8:	00bfffc4 	movi	r2,-1
  }
}
    f0cc:	e037883a 	mov	sp,fp
    f0d0:	dfc00117 	ldw	ra,4(sp)
    f0d4:	df000017 	ldw	fp,0(sp)
    f0d8:	dec00204 	addi	sp,sp,8
    f0dc:	f800283a 	ret

0000f0e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f0e0:	defffe04 	addi	sp,sp,-8
    f0e4:	dfc00115 	stw	ra,4(sp)
    f0e8:	df000015 	stw	fp,0(sp)
    f0ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0f0:	d0a00b17 	ldw	r2,-32724(gp)
    f0f4:	10000326 	beq	r2,zero,f104 <alt_get_errno+0x24>
    f0f8:	d0a00b17 	ldw	r2,-32724(gp)
    f0fc:	103ee83a 	callr	r2
    f100:	00000106 	br	f108 <alt_get_errno+0x28>
    f104:	d0a72704 	addi	r2,gp,-25444
}
    f108:	e037883a 	mov	sp,fp
    f10c:	dfc00117 	ldw	ra,4(sp)
    f110:	df000017 	ldw	fp,0(sp)
    f114:	dec00204 	addi	sp,sp,8
    f118:	f800283a 	ret

0000f11c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f11c:	deffed04 	addi	sp,sp,-76
    f120:	dfc01215 	stw	ra,72(sp)
    f124:	df001115 	stw	fp,68(sp)
    f128:	df001104 	addi	fp,sp,68
    f12c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	10000616 	blt	r2,zero,f150 <isatty+0x34>
    f138:	e0bfff17 	ldw	r2,-4(fp)
    f13c:	10c00324 	muli	r3,r2,12
    f140:	00800074 	movhi	r2,1
    f144:	108b5304 	addi	r2,r2,11596
    f148:	1885883a 	add	r2,r3,r2
    f14c:	00000106 	br	f154 <isatty+0x38>
    f150:	0005883a 	mov	r2,zero
    f154:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f158:	e0bfef17 	ldw	r2,-68(fp)
    f15c:	10000e26 	beq	r2,zero,f198 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f160:	e0bfef17 	ldw	r2,-68(fp)
    f164:	10800017 	ldw	r2,0(r2)
    f168:	10800817 	ldw	r2,32(r2)
    f16c:	1000021e 	bne	r2,zero,f178 <isatty+0x5c>
    {
      return 1;
    f170:	00800044 	movi	r2,1
    f174:	00000d06 	br	f1ac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f178:	e0bff004 	addi	r2,fp,-64
    f17c:	100b883a 	mov	r5,r2
    f180:	e13fff17 	ldw	r4,-4(fp)
    f184:	000f0300 	call	f030 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f188:	e0bff117 	ldw	r2,-60(fp)
    f18c:	10880020 	cmpeqi	r2,r2,8192
    f190:	10803fcc 	andi	r2,r2,255
    f194:	00000506 	br	f1ac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f198:	000f0e00 	call	f0e0 <alt_get_errno>
    f19c:	1007883a 	mov	r3,r2
    f1a0:	00801444 	movi	r2,81
    f1a4:	18800015 	stw	r2,0(r3)
    return 0;
    f1a8:	0005883a 	mov	r2,zero
  }
}
    f1ac:	e037883a 	mov	sp,fp
    f1b0:	dfc00117 	ldw	ra,4(sp)
    f1b4:	df000017 	ldw	fp,0(sp)
    f1b8:	dec00204 	addi	sp,sp,8
    f1bc:	f800283a 	ret

0000f1c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f1c0:	defffc04 	addi	sp,sp,-16
    f1c4:	df000315 	stw	fp,12(sp)
    f1c8:	df000304 	addi	fp,sp,12
    f1cc:	e13ffd15 	stw	r4,-12(fp)
    f1d0:	e17ffe15 	stw	r5,-8(fp)
    f1d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f1d8:	e0fffe17 	ldw	r3,-8(fp)
    f1dc:	e0bffd17 	ldw	r2,-12(fp)
    f1e0:	18800c26 	beq	r3,r2,f214 <alt_load_section+0x54>
  {
    while( to != end )
    f1e4:	00000806 	br	f208 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f1e8:	e0bffe17 	ldw	r2,-8(fp)
    f1ec:	10c00104 	addi	r3,r2,4
    f1f0:	e0fffe15 	stw	r3,-8(fp)
    f1f4:	e0fffd17 	ldw	r3,-12(fp)
    f1f8:	19000104 	addi	r4,r3,4
    f1fc:	e13ffd15 	stw	r4,-12(fp)
    f200:	18c00017 	ldw	r3,0(r3)
    f204:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f208:	e0fffe17 	ldw	r3,-8(fp)
    f20c:	e0bfff17 	ldw	r2,-4(fp)
    f210:	18bff51e 	bne	r3,r2,f1e8 <__alt_data_end+0xff00f1e8>
    {
      *to++ = *from++;
    }
  }
}
    f214:	0001883a 	nop
    f218:	e037883a 	mov	sp,fp
    f21c:	df000017 	ldw	fp,0(sp)
    f220:	dec00104 	addi	sp,sp,4
    f224:	f800283a 	ret

0000f228 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f228:	defffe04 	addi	sp,sp,-8
    f22c:	dfc00115 	stw	ra,4(sp)
    f230:	df000015 	stw	fp,0(sp)
    f234:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f238:	01800074 	movhi	r6,1
    f23c:	318fdb04 	addi	r6,r6,16236
    f240:	01400074 	movhi	r5,1
    f244:	2948e004 	addi	r5,r5,9088
    f248:	01000074 	movhi	r4,1
    f24c:	210fdb04 	addi	r4,r4,16236
    f250:	000f1c00 	call	f1c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f254:	01800034 	movhi	r6,0
    f258:	31809104 	addi	r6,r6,580
    f25c:	01400034 	movhi	r5,0
    f260:	29400804 	addi	r5,r5,32
    f264:	01000034 	movhi	r4,0
    f268:	21000804 	addi	r4,r4,32
    f26c:	000f1c00 	call	f1c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f270:	01800074 	movhi	r6,1
    f274:	3188e004 	addi	r6,r6,9088
    f278:	01400074 	movhi	r5,1
    f27c:	2946f104 	addi	r5,r5,7108
    f280:	01000074 	movhi	r4,1
    f284:	2106f104 	addi	r4,r4,7108
    f288:	000f1c00 	call	f1c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f28c:	00109000 	call	10900 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f290:	0010ae80 	call	10ae8 <alt_icache_flush_all>
}
    f294:	0001883a 	nop
    f298:	e037883a 	mov	sp,fp
    f29c:	dfc00117 	ldw	ra,4(sp)
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00204 	addi	sp,sp,8
    f2a8:	f800283a 	ret

0000f2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2ac:	defffe04 	addi	sp,sp,-8
    f2b0:	dfc00115 	stw	ra,4(sp)
    f2b4:	df000015 	stw	fp,0(sp)
    f2b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2bc:	d0a00b17 	ldw	r2,-32724(gp)
    f2c0:	10000326 	beq	r2,zero,f2d0 <alt_get_errno+0x24>
    f2c4:	d0a00b17 	ldw	r2,-32724(gp)
    f2c8:	103ee83a 	callr	r2
    f2cc:	00000106 	br	f2d4 <alt_get_errno+0x28>
    f2d0:	d0a72704 	addi	r2,gp,-25444
}
    f2d4:	e037883a 	mov	sp,fp
    f2d8:	dfc00117 	ldw	ra,4(sp)
    f2dc:	df000017 	ldw	fp,0(sp)
    f2e0:	dec00204 	addi	sp,sp,8
    f2e4:	f800283a 	ret

0000f2e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f2e8:	defff904 	addi	sp,sp,-28
    f2ec:	dfc00615 	stw	ra,24(sp)
    f2f0:	df000515 	stw	fp,20(sp)
    f2f4:	df000504 	addi	fp,sp,20
    f2f8:	e13ffd15 	stw	r4,-12(fp)
    f2fc:	e17ffe15 	stw	r5,-8(fp)
    f300:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f304:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f308:	e0bffd17 	ldw	r2,-12(fp)
    f30c:	10000616 	blt	r2,zero,f328 <lseek+0x40>
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	10c00324 	muli	r3,r2,12
    f318:	00800074 	movhi	r2,1
    f31c:	108b5304 	addi	r2,r2,11596
    f320:	1885883a 	add	r2,r3,r2
    f324:	00000106 	br	f32c <lseek+0x44>
    f328:	0005883a 	mov	r2,zero
    f32c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f330:	e0bffc17 	ldw	r2,-16(fp)
    f334:	10001026 	beq	r2,zero,f378 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	10800017 	ldw	r2,0(r2)
    f340:	10800717 	ldw	r2,28(r2)
    f344:	10000926 	beq	r2,zero,f36c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f348:	e0bffc17 	ldw	r2,-16(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	10800717 	ldw	r2,28(r2)
    f354:	e1bfff17 	ldw	r6,-4(fp)
    f358:	e17ffe17 	ldw	r5,-8(fp)
    f35c:	e13ffc17 	ldw	r4,-16(fp)
    f360:	103ee83a 	callr	r2
    f364:	e0bffb15 	stw	r2,-20(fp)
    f368:	00000506 	br	f380 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f36c:	00bfde84 	movi	r2,-134
    f370:	e0bffb15 	stw	r2,-20(fp)
    f374:	00000206 	br	f380 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f378:	00bfebc4 	movi	r2,-81
    f37c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f380:	e0bffb17 	ldw	r2,-20(fp)
    f384:	1000070e 	bge	r2,zero,f3a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f388:	000f2ac0 	call	f2ac <alt_get_errno>
    f38c:	1007883a 	mov	r3,r2
    f390:	e0bffb17 	ldw	r2,-20(fp)
    f394:	0085c83a 	sub	r2,zero,r2
    f398:	18800015 	stw	r2,0(r3)
    rc = -1;
    f39c:	00bfffc4 	movi	r2,-1
    f3a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f3a4:	e0bffb17 	ldw	r2,-20(fp)
}
    f3a8:	e037883a 	mov	sp,fp
    f3ac:	dfc00117 	ldw	ra,4(sp)
    f3b0:	df000017 	ldw	fp,0(sp)
    f3b4:	dec00204 	addi	sp,sp,8
    f3b8:	f800283a 	ret

0000f3bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f3bc:	defffd04 	addi	sp,sp,-12
    f3c0:	dfc00215 	stw	ra,8(sp)
    f3c4:	df000115 	stw	fp,4(sp)
    f3c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f3cc:	0009883a 	mov	r4,zero
    f3d0:	000f8dc0 	call	f8dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f3d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f3d8:	000f9140 	call	f914 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f3dc:	01800074 	movhi	r6,1
    f3e0:	3188d804 	addi	r6,r6,9056
    f3e4:	01400074 	movhi	r5,1
    f3e8:	2948d804 	addi	r5,r5,9056
    f3ec:	01000074 	movhi	r4,1
    f3f0:	2108d804 	addi	r4,r4,9056
    f3f4:	0010e800 	call	10e80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f3f8:	0010a280 	call	10a28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f3fc:	01000074 	movhi	r4,1
    f400:	2102a204 	addi	r4,r4,2696
    f404:	00116800 	call	11680 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f408:	d0a72b17 	ldw	r2,-25428(gp)
    f40c:	d0e72c17 	ldw	r3,-25424(gp)
    f410:	d1272d17 	ldw	r4,-25420(gp)
    f414:	200d883a 	mov	r6,r4
    f418:	180b883a 	mov	r5,r3
    f41c:	1009883a 	mov	r4,r2
    f420:	0000f6c0 	call	f6c <main>
    f424:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f428:	01000044 	movi	r4,1
    f42c:	000eef80 	call	eef8 <close>
  exit (result);
    f430:	e13fff17 	ldw	r4,-4(fp)
    f434:	00116940 	call	11694 <exit>

0000f438 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f438:	defffe04 	addi	sp,sp,-8
    f43c:	df000115 	stw	fp,4(sp)
    f440:	df000104 	addi	fp,sp,4
    f444:	e13fff15 	stw	r4,-4(fp)
}
    f448:	0001883a 	nop
    f44c:	e037883a 	mov	sp,fp
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00104 	addi	sp,sp,4
    f458:	f800283a 	ret

0000f45c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f45c:	defffe04 	addi	sp,sp,-8
    f460:	df000115 	stw	fp,4(sp)
    f464:	df000104 	addi	fp,sp,4
    f468:	e13fff15 	stw	r4,-4(fp)
}
    f46c:	0001883a 	nop
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f480:	defffe04 	addi	sp,sp,-8
    f484:	dfc00115 	stw	ra,4(sp)
    f488:	df000015 	stw	fp,0(sp)
    f48c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f490:	d0a00b17 	ldw	r2,-32724(gp)
    f494:	10000326 	beq	r2,zero,f4a4 <alt_get_errno+0x24>
    f498:	d0a00b17 	ldw	r2,-32724(gp)
    f49c:	103ee83a 	callr	r2
    f4a0:	00000106 	br	f4a8 <alt_get_errno+0x28>
    f4a4:	d0a72704 	addi	r2,gp,-25444
}
    f4a8:	e037883a 	mov	sp,fp
    f4ac:	dfc00117 	ldw	ra,4(sp)
    f4b0:	df000017 	ldw	fp,0(sp)
    f4b4:	dec00204 	addi	sp,sp,8
    f4b8:	f800283a 	ret

0000f4bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f4bc:	defff904 	addi	sp,sp,-28
    f4c0:	dfc00615 	stw	ra,24(sp)
    f4c4:	df000515 	stw	fp,20(sp)
    f4c8:	df000504 	addi	fp,sp,20
    f4cc:	e13ffd15 	stw	r4,-12(fp)
    f4d0:	e17ffe15 	stw	r5,-8(fp)
    f4d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f4d8:	e0bffd17 	ldw	r2,-12(fp)
    f4dc:	10000616 	blt	r2,zero,f4f8 <read+0x3c>
    f4e0:	e0bffd17 	ldw	r2,-12(fp)
    f4e4:	10c00324 	muli	r3,r2,12
    f4e8:	00800074 	movhi	r2,1
    f4ec:	108b5304 	addi	r2,r2,11596
    f4f0:	1885883a 	add	r2,r3,r2
    f4f4:	00000106 	br	f4fc <read+0x40>
    f4f8:	0005883a 	mov	r2,zero
    f4fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f500:	e0bffb17 	ldw	r2,-20(fp)
    f504:	10002226 	beq	r2,zero,f590 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f508:	e0bffb17 	ldw	r2,-20(fp)
    f50c:	10800217 	ldw	r2,8(r2)
    f510:	108000cc 	andi	r2,r2,3
    f514:	10800060 	cmpeqi	r2,r2,1
    f518:	1000181e 	bne	r2,zero,f57c <read+0xc0>
        (fd->dev->read))
    f51c:	e0bffb17 	ldw	r2,-20(fp)
    f520:	10800017 	ldw	r2,0(r2)
    f524:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f528:	10001426 	beq	r2,zero,f57c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f52c:	e0bffb17 	ldw	r2,-20(fp)
    f530:	10800017 	ldw	r2,0(r2)
    f534:	10800517 	ldw	r2,20(r2)
    f538:	e0ffff17 	ldw	r3,-4(fp)
    f53c:	180d883a 	mov	r6,r3
    f540:	e17ffe17 	ldw	r5,-8(fp)
    f544:	e13ffb17 	ldw	r4,-20(fp)
    f548:	103ee83a 	callr	r2
    f54c:	e0bffc15 	stw	r2,-16(fp)
    f550:	e0bffc17 	ldw	r2,-16(fp)
    f554:	1000070e 	bge	r2,zero,f574 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f558:	000f4800 	call	f480 <alt_get_errno>
    f55c:	1007883a 	mov	r3,r2
    f560:	e0bffc17 	ldw	r2,-16(fp)
    f564:	0085c83a 	sub	r2,zero,r2
    f568:	18800015 	stw	r2,0(r3)
          return -1;
    f56c:	00bfffc4 	movi	r2,-1
    f570:	00000c06 	br	f5a4 <read+0xe8>
        }
        return rval;
    f574:	e0bffc17 	ldw	r2,-16(fp)
    f578:	00000a06 	br	f5a4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f57c:	000f4800 	call	f480 <alt_get_errno>
    f580:	1007883a 	mov	r3,r2
    f584:	00800344 	movi	r2,13
    f588:	18800015 	stw	r2,0(r3)
    f58c:	00000406 	br	f5a0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f590:	000f4800 	call	f480 <alt_get_errno>
    f594:	1007883a 	mov	r3,r2
    f598:	00801444 	movi	r2,81
    f59c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f5a0:	00bfffc4 	movi	r2,-1
}
    f5a4:	e037883a 	mov	sp,fp
    f5a8:	dfc00117 	ldw	ra,4(sp)
    f5ac:	df000017 	ldw	fp,0(sp)
    f5b0:	dec00204 	addi	sp,sp,8
    f5b4:	f800283a 	ret

0000f5b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f5b8:	defffe04 	addi	sp,sp,-8
    f5bc:	df000115 	stw	fp,4(sp)
    f5c0:	df000104 	addi	fp,sp,4
    f5c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f5c8:	e0bfff17 	ldw	r2,-4(fp)
    f5cc:	108000d0 	cmplti	r2,r2,3
    f5d0:	10000d1e 	bne	r2,zero,f608 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f5d4:	00800074 	movhi	r2,1
    f5d8:	108b5304 	addi	r2,r2,11596
    f5dc:	e0ffff17 	ldw	r3,-4(fp)
    f5e0:	18c00324 	muli	r3,r3,12
    f5e4:	10c5883a 	add	r2,r2,r3
    f5e8:	10800204 	addi	r2,r2,8
    f5ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f5f0:	00800074 	movhi	r2,1
    f5f4:	108b5304 	addi	r2,r2,11596
    f5f8:	e0ffff17 	ldw	r3,-4(fp)
    f5fc:	18c00324 	muli	r3,r3,12
    f600:	10c5883a 	add	r2,r2,r3
    f604:	10000015 	stw	zero,0(r2)
  }
}
    f608:	0001883a 	nop
    f60c:	e037883a 	mov	sp,fp
    f610:	df000017 	ldw	fp,0(sp)
    f614:	dec00104 	addi	sp,sp,4
    f618:	f800283a 	ret

0000f61c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f61c:	defff904 	addi	sp,sp,-28
    f620:	df000615 	stw	fp,24(sp)
    f624:	df000604 	addi	fp,sp,24
    f628:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f62c:	0005303a 	rdctl	r2,status
    f630:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f634:	e0fffe17 	ldw	r3,-8(fp)
    f638:	00bfff84 	movi	r2,-2
    f63c:	1884703a 	and	r2,r3,r2
    f640:	1001703a 	wrctl	status,r2
  
  return context;
    f644:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f648:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f64c:	d0a00c17 	ldw	r2,-32720(gp)
    f650:	10c000c4 	addi	r3,r2,3
    f654:	00bfff04 	movi	r2,-4
    f658:	1884703a 	and	r2,r3,r2
    f65c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f660:	d0e00c17 	ldw	r3,-32720(gp)
    f664:	e0bfff17 	ldw	r2,-4(fp)
    f668:	1887883a 	add	r3,r3,r2
    f66c:	00804034 	movhi	r2,256
    f670:	10800004 	addi	r2,r2,0
    f674:	10c0062e 	bgeu	r2,r3,f690 <sbrk+0x74>
    f678:	e0bffb17 	ldw	r2,-20(fp)
    f67c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f680:	e0bffa17 	ldw	r2,-24(fp)
    f684:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f688:	00bfffc4 	movi	r2,-1
    f68c:	00000b06 	br	f6bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f690:	d0a00c17 	ldw	r2,-32720(gp)
    f694:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f698:	d0e00c17 	ldw	r3,-32720(gp)
    f69c:	e0bfff17 	ldw	r2,-4(fp)
    f6a0:	1885883a 	add	r2,r3,r2
    f6a4:	d0a00c15 	stw	r2,-32720(gp)
    f6a8:	e0bffb17 	ldw	r2,-20(fp)
    f6ac:	e0bffc15 	stw	r2,-16(fp)
    f6b0:	e0bffc17 	ldw	r2,-16(fp)
    f6b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f6b8:	e0bffd17 	ldw	r2,-12(fp)
} 
    f6bc:	e037883a 	mov	sp,fp
    f6c0:	df000017 	ldw	fp,0(sp)
    f6c4:	dec00104 	addi	sp,sp,4
    f6c8:	f800283a 	ret

0000f6cc <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    f6cc:	defffa04 	addi	sp,sp,-24
    f6d0:	dfc00515 	stw	ra,20(sp)
    f6d4:	df000415 	stw	fp,16(sp)
    f6d8:	df000404 	addi	fp,sp,16
    f6dc:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
    f6e0:	e0bfff17 	ldw	r2,-4(fp)
    f6e4:	108007c4 	addi	r2,r2,31
    f6e8:	1004d17a 	srli	r2,r2,5
    f6ec:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    f6f0:	e0bffc17 	ldw	r2,-16(fp)
    f6f4:	1004917a 	slli	r2,r2,5
    f6f8:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    f6fc:	e17ffd17 	ldw	r5,-12(fp)
    f700:	01000804 	movi	r4,32
    f704:	00116cc0 	call	116cc <memalign>
    f708:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
    f70c:	e0bffe17 	ldw	r2,-8(fp)
    f710:	1000021e 	bne	r2,zero,f71c <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
    f714:	0005883a 	mov	r2,zero
    f718:	00000506 	br	f730 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    f71c:	e17ffd17 	ldw	r5,-12(fp)
    f720:	e13ffe17 	ldw	r4,-8(fp)
    f724:	00108880 	call	10888 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    f728:	e0bffe17 	ldw	r2,-8(fp)
    f72c:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    f730:	e037883a 	mov	sp,fp
    f734:	dfc00117 	ldw	ra,4(sp)
    f738:	df000017 	ldw	fp,0(sp)
    f73c:	dec00204 	addi	sp,sp,8
    f740:	f800283a 	ret

0000f744 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f744:	defffd04 	addi	sp,sp,-12
    f748:	dfc00215 	stw	ra,8(sp)
    f74c:	df000115 	stw	fp,4(sp)
    f750:	df000104 	addi	fp,sp,4
    f754:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f758:	e13fff17 	ldw	r4,-4(fp)
    f75c:	00107300 	call	10730 <alt_busy_sleep>
}
    f760:	e037883a 	mov	sp,fp
    f764:	dfc00117 	ldw	ra,4(sp)
    f768:	df000017 	ldw	fp,0(sp)
    f76c:	dec00204 	addi	sp,sp,8
    f770:	f800283a 	ret

0000f774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f774:	defffe04 	addi	sp,sp,-8
    f778:	dfc00115 	stw	ra,4(sp)
    f77c:	df000015 	stw	fp,0(sp)
    f780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f784:	d0a00b17 	ldw	r2,-32724(gp)
    f788:	10000326 	beq	r2,zero,f798 <alt_get_errno+0x24>
    f78c:	d0a00b17 	ldw	r2,-32724(gp)
    f790:	103ee83a 	callr	r2
    f794:	00000106 	br	f79c <alt_get_errno+0x28>
    f798:	d0a72704 	addi	r2,gp,-25444
}
    f79c:	e037883a 	mov	sp,fp
    f7a0:	dfc00117 	ldw	ra,4(sp)
    f7a4:	df000017 	ldw	fp,0(sp)
    f7a8:	dec00204 	addi	sp,sp,8
    f7ac:	f800283a 	ret

0000f7b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f7b0:	defff904 	addi	sp,sp,-28
    f7b4:	dfc00615 	stw	ra,24(sp)
    f7b8:	df000515 	stw	fp,20(sp)
    f7bc:	df000504 	addi	fp,sp,20
    f7c0:	e13ffd15 	stw	r4,-12(fp)
    f7c4:	e17ffe15 	stw	r5,-8(fp)
    f7c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7cc:	e0bffd17 	ldw	r2,-12(fp)
    f7d0:	10000616 	blt	r2,zero,f7ec <write+0x3c>
    f7d4:	e0bffd17 	ldw	r2,-12(fp)
    f7d8:	10c00324 	muli	r3,r2,12
    f7dc:	00800074 	movhi	r2,1
    f7e0:	108b5304 	addi	r2,r2,11596
    f7e4:	1885883a 	add	r2,r3,r2
    f7e8:	00000106 	br	f7f0 <write+0x40>
    f7ec:	0005883a 	mov	r2,zero
    f7f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f7f4:	e0bffb17 	ldw	r2,-20(fp)
    f7f8:	10002126 	beq	r2,zero,f880 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f7fc:	e0bffb17 	ldw	r2,-20(fp)
    f800:	10800217 	ldw	r2,8(r2)
    f804:	108000cc 	andi	r2,r2,3
    f808:	10001826 	beq	r2,zero,f86c <write+0xbc>
    f80c:	e0bffb17 	ldw	r2,-20(fp)
    f810:	10800017 	ldw	r2,0(r2)
    f814:	10800617 	ldw	r2,24(r2)
    f818:	10001426 	beq	r2,zero,f86c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f81c:	e0bffb17 	ldw	r2,-20(fp)
    f820:	10800017 	ldw	r2,0(r2)
    f824:	10800617 	ldw	r2,24(r2)
    f828:	e0ffff17 	ldw	r3,-4(fp)
    f82c:	180d883a 	mov	r6,r3
    f830:	e17ffe17 	ldw	r5,-8(fp)
    f834:	e13ffb17 	ldw	r4,-20(fp)
    f838:	103ee83a 	callr	r2
    f83c:	e0bffc15 	stw	r2,-16(fp)
    f840:	e0bffc17 	ldw	r2,-16(fp)
    f844:	1000070e 	bge	r2,zero,f864 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f848:	000f7740 	call	f774 <alt_get_errno>
    f84c:	1007883a 	mov	r3,r2
    f850:	e0bffc17 	ldw	r2,-16(fp)
    f854:	0085c83a 	sub	r2,zero,r2
    f858:	18800015 	stw	r2,0(r3)
        return -1;
    f85c:	00bfffc4 	movi	r2,-1
    f860:	00000c06 	br	f894 <write+0xe4>
      }
      return rval;
    f864:	e0bffc17 	ldw	r2,-16(fp)
    f868:	00000a06 	br	f894 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f86c:	000f7740 	call	f774 <alt_get_errno>
    f870:	1007883a 	mov	r3,r2
    f874:	00800344 	movi	r2,13
    f878:	18800015 	stw	r2,0(r3)
    f87c:	00000406 	br	f890 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f880:	000f7740 	call	f774 <alt_get_errno>
    f884:	1007883a 	mov	r3,r2
    f888:	00801444 	movi	r2,81
    f88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f890:	00bfffc4 	movi	r2,-1
}
    f894:	e037883a 	mov	sp,fp
    f898:	dfc00117 	ldw	ra,4(sp)
    f89c:	df000017 	ldw	fp,0(sp)
    f8a0:	dec00204 	addi	sp,sp,8
    f8a4:	f800283a 	ret

0000f8a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f8a8:	defffd04 	addi	sp,sp,-12
    f8ac:	dfc00215 	stw	ra,8(sp)
    f8b0:	df000115 	stw	fp,4(sp)
    f8b4:	df000104 	addi	fp,sp,4
    f8b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f8bc:	d1600804 	addi	r5,gp,-32736
    f8c0:	e13fff17 	ldw	r4,-4(fp)
    f8c4:	00109840 	call	10984 <alt_dev_llist_insert>
}
    f8c8:	e037883a 	mov	sp,fp
    f8cc:	dfc00117 	ldw	ra,4(sp)
    f8d0:	df000017 	ldw	fp,0(sp)
    f8d4:	dec00204 	addi	sp,sp,8
    f8d8:	f800283a 	ret

0000f8dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f8dc:	defffd04 	addi	sp,sp,-12
    f8e0:	dfc00215 	stw	ra,8(sp)
    f8e4:	df000115 	stw	fp,4(sp)
    f8e8:	df000104 	addi	fp,sp,4
    f8ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f8f0:	00112f40 	call	112f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f8f4:	00800044 	movi	r2,1
    f8f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f8fc:	0001883a 	nop
    f900:	e037883a 	mov	sp,fp
    f904:	dfc00117 	ldw	ra,4(sp)
    f908:	df000017 	ldw	fp,0(sp)
    f90c:	dec00204 	addi	sp,sp,8
    f910:	f800283a 	ret

0000f914 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f914:	defffe04 	addi	sp,sp,-8
    f918:	dfc00115 	stw	ra,4(sp)
    f91c:	df000015 	stw	fp,0(sp)
    f920:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f924:	00804034 	movhi	r2,256
    f928:	10840004 	addi	r2,r2,4096
    f92c:	d0a72e15 	stw	r2,-25416(gp)
    f930:	0080bef4 	movhi	r2,763
    f934:	10bc2004 	addi	r2,r2,-3968
    f938:	d0a72f15 	stw	r2,-25412(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f93c:	01c0fa04 	movi	r7,1000
    f940:	01800104 	movi	r6,4
    f944:	000b883a 	mov	r5,zero
    f948:	01004034 	movhi	r4,256
    f94c:	21040804 	addi	r4,r4,4128
    f950:	00104700 	call	10470 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f954:	000d883a 	mov	r6,zero
    f958:	000b883a 	mov	r5,zero
    f95c:	01000074 	movhi	r4,1
    f960:	210bbd04 	addi	r4,r4,12020
    f964:	000faf40 	call	faf4 <altera_avalon_jtag_uart_init>
    f968:	01000074 	movhi	r4,1
    f96c:	210bb304 	addi	r4,r4,11980
    f970:	000f8a80 	call	f8a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f974:	0001883a 	nop
}
    f978:	0001883a 	nop
    f97c:	e037883a 	mov	sp,fp
    f980:	dfc00117 	ldw	ra,4(sp)
    f984:	df000017 	ldw	fp,0(sp)
    f988:	dec00204 	addi	sp,sp,8
    f98c:	f800283a 	ret

0000f990 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f990:	defffa04 	addi	sp,sp,-24
    f994:	dfc00515 	stw	ra,20(sp)
    f998:	df000415 	stw	fp,16(sp)
    f99c:	df000404 	addi	fp,sp,16
    f9a0:	e13ffd15 	stw	r4,-12(fp)
    f9a4:	e17ffe15 	stw	r5,-8(fp)
    f9a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f9ac:	e0bffd17 	ldw	r2,-12(fp)
    f9b0:	10800017 	ldw	r2,0(r2)
    f9b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f9b8:	e0bffc17 	ldw	r2,-16(fp)
    f9bc:	10c00a04 	addi	r3,r2,40
    f9c0:	e0bffd17 	ldw	r2,-12(fp)
    f9c4:	10800217 	ldw	r2,8(r2)
    f9c8:	100f883a 	mov	r7,r2
    f9cc:	e1bfff17 	ldw	r6,-4(fp)
    f9d0:	e17ffe17 	ldw	r5,-8(fp)
    f9d4:	1809883a 	mov	r4,r3
    f9d8:	000ffb80 	call	ffb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f9dc:	e037883a 	mov	sp,fp
    f9e0:	dfc00117 	ldw	ra,4(sp)
    f9e4:	df000017 	ldw	fp,0(sp)
    f9e8:	dec00204 	addi	sp,sp,8
    f9ec:	f800283a 	ret

0000f9f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f9f0:	defffa04 	addi	sp,sp,-24
    f9f4:	dfc00515 	stw	ra,20(sp)
    f9f8:	df000415 	stw	fp,16(sp)
    f9fc:	df000404 	addi	fp,sp,16
    fa00:	e13ffd15 	stw	r4,-12(fp)
    fa04:	e17ffe15 	stw	r5,-8(fp)
    fa08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fa0c:	e0bffd17 	ldw	r2,-12(fp)
    fa10:	10800017 	ldw	r2,0(r2)
    fa14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fa18:	e0bffc17 	ldw	r2,-16(fp)
    fa1c:	10c00a04 	addi	r3,r2,40
    fa20:	e0bffd17 	ldw	r2,-12(fp)
    fa24:	10800217 	ldw	r2,8(r2)
    fa28:	100f883a 	mov	r7,r2
    fa2c:	e1bfff17 	ldw	r6,-4(fp)
    fa30:	e17ffe17 	ldw	r5,-8(fp)
    fa34:	1809883a 	mov	r4,r3
    fa38:	00101d40 	call	101d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fa3c:	e037883a 	mov	sp,fp
    fa40:	dfc00117 	ldw	ra,4(sp)
    fa44:	df000017 	ldw	fp,0(sp)
    fa48:	dec00204 	addi	sp,sp,8
    fa4c:	f800283a 	ret

0000fa50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fa50:	defffc04 	addi	sp,sp,-16
    fa54:	dfc00315 	stw	ra,12(sp)
    fa58:	df000215 	stw	fp,8(sp)
    fa5c:	df000204 	addi	fp,sp,8
    fa60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fa64:	e0bfff17 	ldw	r2,-4(fp)
    fa68:	10800017 	ldw	r2,0(r2)
    fa6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fa70:	e0bffe17 	ldw	r2,-8(fp)
    fa74:	10c00a04 	addi	r3,r2,40
    fa78:	e0bfff17 	ldw	r2,-4(fp)
    fa7c:	10800217 	ldw	r2,8(r2)
    fa80:	100b883a 	mov	r5,r2
    fa84:	1809883a 	mov	r4,r3
    fa88:	000fe600 	call	fe60 <altera_avalon_jtag_uart_close>
}
    fa8c:	e037883a 	mov	sp,fp
    fa90:	dfc00117 	ldw	ra,4(sp)
    fa94:	df000017 	ldw	fp,0(sp)
    fa98:	dec00204 	addi	sp,sp,8
    fa9c:	f800283a 	ret

0000faa0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    faa0:	defffa04 	addi	sp,sp,-24
    faa4:	dfc00515 	stw	ra,20(sp)
    faa8:	df000415 	stw	fp,16(sp)
    faac:	df000404 	addi	fp,sp,16
    fab0:	e13ffd15 	stw	r4,-12(fp)
    fab4:	e17ffe15 	stw	r5,-8(fp)
    fab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fabc:	e0bffd17 	ldw	r2,-12(fp)
    fac0:	10800017 	ldw	r2,0(r2)
    fac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fac8:	e0bffc17 	ldw	r2,-16(fp)
    facc:	10800a04 	addi	r2,r2,40
    fad0:	e1bfff17 	ldw	r6,-4(fp)
    fad4:	e17ffe17 	ldw	r5,-8(fp)
    fad8:	1009883a 	mov	r4,r2
    fadc:	000fec80 	call	fec8 <altera_avalon_jtag_uart_ioctl>
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    faf4:	defffa04 	addi	sp,sp,-24
    faf8:	dfc00515 	stw	ra,20(sp)
    fafc:	df000415 	stw	fp,16(sp)
    fb00:	df000404 	addi	fp,sp,16
    fb04:	e13ffd15 	stw	r4,-12(fp)
    fb08:	e17ffe15 	stw	r5,-8(fp)
    fb0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fb10:	e0bffd17 	ldw	r2,-12(fp)
    fb14:	00c00044 	movi	r3,1
    fb18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    fb1c:	e0bffd17 	ldw	r2,-12(fp)
    fb20:	10800017 	ldw	r2,0(r2)
    fb24:	10800104 	addi	r2,r2,4
    fb28:	1007883a 	mov	r3,r2
    fb2c:	e0bffd17 	ldw	r2,-12(fp)
    fb30:	10800817 	ldw	r2,32(r2)
    fb34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fb38:	e0bffe17 	ldw	r2,-8(fp)
    fb3c:	e0ffff17 	ldw	r3,-4(fp)
    fb40:	d8000015 	stw	zero,0(sp)
    fb44:	e1fffd17 	ldw	r7,-12(fp)
    fb48:	01800074 	movhi	r6,1
    fb4c:	31beed04 	addi	r6,r6,-1100
    fb50:	180b883a 	mov	r5,r3
    fb54:	1009883a 	mov	r4,r2
    fb58:	0010b1c0 	call	10b1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    fb5c:	e0bffd17 	ldw	r2,-12(fp)
    fb60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fb64:	e0bffd17 	ldw	r2,-12(fp)
    fb68:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fb6c:	d0e73117 	ldw	r3,-25404(gp)
    fb70:	e1fffd17 	ldw	r7,-12(fp)
    fb74:	01800074 	movhi	r6,1
    fb78:	31bf7004 	addi	r6,r6,-576
    fb7c:	180b883a 	mov	r5,r3
    fb80:	1009883a 	mov	r4,r2
    fb84:	00106040 	call	10604 <alt_alarm_start>
    fb88:	1000040e 	bge	r2,zero,fb9c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fb8c:	e0fffd17 	ldw	r3,-12(fp)
    fb90:	00a00034 	movhi	r2,32768
    fb94:	10bfffc4 	addi	r2,r2,-1
    fb98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fb9c:	0001883a 	nop
    fba0:	e037883a 	mov	sp,fp
    fba4:	dfc00117 	ldw	ra,4(sp)
    fba8:	df000017 	ldw	fp,0(sp)
    fbac:	dec00204 	addi	sp,sp,8
    fbb0:	f800283a 	ret

0000fbb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    fbb4:	defff804 	addi	sp,sp,-32
    fbb8:	df000715 	stw	fp,28(sp)
    fbbc:	df000704 	addi	fp,sp,28
    fbc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fbc4:	e0bfff17 	ldw	r2,-4(fp)
    fbc8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fbcc:	e0bffb17 	ldw	r2,-20(fp)
    fbd0:	10800017 	ldw	r2,0(r2)
    fbd4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fbd8:	e0bffc17 	ldw	r2,-16(fp)
    fbdc:	10800104 	addi	r2,r2,4
    fbe0:	10800037 	ldwio	r2,0(r2)
    fbe4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fbe8:	e0bffd17 	ldw	r2,-12(fp)
    fbec:	1080c00c 	andi	r2,r2,768
    fbf0:	10006d26 	beq	r2,zero,fda8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fbf4:	e0bffd17 	ldw	r2,-12(fp)
    fbf8:	1080400c 	andi	r2,r2,256
    fbfc:	10003526 	beq	r2,zero,fcd4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    fc00:	00800074 	movhi	r2,1
    fc04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc08:	e0bffb17 	ldw	r2,-20(fp)
    fc0c:	10800a17 	ldw	r2,40(r2)
    fc10:	10800044 	addi	r2,r2,1
    fc14:	1081ffcc 	andi	r2,r2,2047
    fc18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fc1c:	e0bffb17 	ldw	r2,-20(fp)
    fc20:	10c00b17 	ldw	r3,44(r2)
    fc24:	e0bffe17 	ldw	r2,-8(fp)
    fc28:	18801526 	beq	r3,r2,fc80 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    fc2c:	e0bffc17 	ldw	r2,-16(fp)
    fc30:	10800037 	ldwio	r2,0(r2)
    fc34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fc38:	e0bff917 	ldw	r2,-28(fp)
    fc3c:	10a0000c 	andi	r2,r2,32768
    fc40:	10001126 	beq	r2,zero,fc88 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fc44:	e0bffb17 	ldw	r2,-20(fp)
    fc48:	10800a17 	ldw	r2,40(r2)
    fc4c:	e0fff917 	ldw	r3,-28(fp)
    fc50:	1809883a 	mov	r4,r3
    fc54:	e0fffb17 	ldw	r3,-20(fp)
    fc58:	1885883a 	add	r2,r3,r2
    fc5c:	10800e04 	addi	r2,r2,56
    fc60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc64:	e0bffb17 	ldw	r2,-20(fp)
    fc68:	10800a17 	ldw	r2,40(r2)
    fc6c:	10800044 	addi	r2,r2,1
    fc70:	10c1ffcc 	andi	r3,r2,2047
    fc74:	e0bffb17 	ldw	r2,-20(fp)
    fc78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fc7c:	003fe206 	br	fc08 <__alt_data_end+0xff00fc08>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fc80:	0001883a 	nop
    fc84:	00000106 	br	fc8c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fc88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fc8c:	e0bff917 	ldw	r2,-28(fp)
    fc90:	10bfffec 	andhi	r2,r2,65535
    fc94:	10000f26 	beq	r2,zero,fcd4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fc98:	e0bffb17 	ldw	r2,-20(fp)
    fc9c:	10c00817 	ldw	r3,32(r2)
    fca0:	00bfff84 	movi	r2,-2
    fca4:	1886703a 	and	r3,r3,r2
    fca8:	e0bffb17 	ldw	r2,-20(fp)
    fcac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	10800104 	addi	r2,r2,4
    fcb8:	1007883a 	mov	r3,r2
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	10800817 	ldw	r2,32(r2)
    fcc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fcc8:	e0bffc17 	ldw	r2,-16(fp)
    fccc:	10800104 	addi	r2,r2,4
    fcd0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fcd4:	e0bffd17 	ldw	r2,-12(fp)
    fcd8:	1080800c 	andi	r2,r2,512
    fcdc:	103fbe26 	beq	r2,zero,fbd8 <__alt_data_end+0xff00fbd8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fce0:	e0bffd17 	ldw	r2,-12(fp)
    fce4:	1004d43a 	srli	r2,r2,16
    fce8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fcec:	00001406 	br	fd40 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fcf0:	e0bffc17 	ldw	r2,-16(fp)
    fcf4:	e0fffb17 	ldw	r3,-20(fp)
    fcf8:	18c00d17 	ldw	r3,52(r3)
    fcfc:	e13ffb17 	ldw	r4,-20(fp)
    fd00:	20c7883a 	add	r3,r4,r3
    fd04:	18c20e04 	addi	r3,r3,2104
    fd08:	18c00003 	ldbu	r3,0(r3)
    fd0c:	18c03fcc 	andi	r3,r3,255
    fd10:	18c0201c 	xori	r3,r3,128
    fd14:	18ffe004 	addi	r3,r3,-128
    fd18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd1c:	e0bffb17 	ldw	r2,-20(fp)
    fd20:	10800d17 	ldw	r2,52(r2)
    fd24:	10800044 	addi	r2,r2,1
    fd28:	10c1ffcc 	andi	r3,r2,2047
    fd2c:	e0bffb17 	ldw	r2,-20(fp)
    fd30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fd34:	e0bffa17 	ldw	r2,-24(fp)
    fd38:	10bfffc4 	addi	r2,r2,-1
    fd3c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fd40:	e0bffa17 	ldw	r2,-24(fp)
    fd44:	10000526 	beq	r2,zero,fd5c <altera_avalon_jtag_uart_irq+0x1a8>
    fd48:	e0bffb17 	ldw	r2,-20(fp)
    fd4c:	10c00d17 	ldw	r3,52(r2)
    fd50:	e0bffb17 	ldw	r2,-20(fp)
    fd54:	10800c17 	ldw	r2,48(r2)
    fd58:	18bfe51e 	bne	r3,r2,fcf0 <__alt_data_end+0xff00fcf0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fd5c:	e0bffa17 	ldw	r2,-24(fp)
    fd60:	103f9d26 	beq	r2,zero,fbd8 <__alt_data_end+0xff00fbd8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fd64:	e0bffb17 	ldw	r2,-20(fp)
    fd68:	10c00817 	ldw	r3,32(r2)
    fd6c:	00bfff44 	movi	r2,-3
    fd70:	1886703a 	and	r3,r3,r2
    fd74:	e0bffb17 	ldw	r2,-20(fp)
    fd78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fd7c:	e0bffb17 	ldw	r2,-20(fp)
    fd80:	10800017 	ldw	r2,0(r2)
    fd84:	10800104 	addi	r2,r2,4
    fd88:	1007883a 	mov	r3,r2
    fd8c:	e0bffb17 	ldw	r2,-20(fp)
    fd90:	10800817 	ldw	r2,32(r2)
    fd94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10800104 	addi	r2,r2,4
    fda0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fda4:	003f8c06 	br	fbd8 <__alt_data_end+0xff00fbd8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fda8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fdac:	0001883a 	nop
    fdb0:	e037883a 	mov	sp,fp
    fdb4:	df000017 	ldw	fp,0(sp)
    fdb8:	dec00104 	addi	sp,sp,4
    fdbc:	f800283a 	ret

0000fdc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fdc0:	defff804 	addi	sp,sp,-32
    fdc4:	df000715 	stw	fp,28(sp)
    fdc8:	df000704 	addi	fp,sp,28
    fdcc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fdd0:	e0bffb17 	ldw	r2,-20(fp)
    fdd4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fdd8:	e0bff917 	ldw	r2,-28(fp)
    fddc:	10800017 	ldw	r2,0(r2)
    fde0:	10800104 	addi	r2,r2,4
    fde4:	10800037 	ldwio	r2,0(r2)
    fde8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fdec:	e0bffa17 	ldw	r2,-24(fp)
    fdf0:	1081000c 	andi	r2,r2,1024
    fdf4:	10000b26 	beq	r2,zero,fe24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fdf8:	e0bff917 	ldw	r2,-28(fp)
    fdfc:	10800017 	ldw	r2,0(r2)
    fe00:	10800104 	addi	r2,r2,4
    fe04:	1007883a 	mov	r3,r2
    fe08:	e0bff917 	ldw	r2,-28(fp)
    fe0c:	10800817 	ldw	r2,32(r2)
    fe10:	10810014 	ori	r2,r2,1024
    fe14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fe18:	e0bff917 	ldw	r2,-28(fp)
    fe1c:	10000915 	stw	zero,36(r2)
    fe20:	00000a06 	br	fe4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fe24:	e0bff917 	ldw	r2,-28(fp)
    fe28:	10c00917 	ldw	r3,36(r2)
    fe2c:	00a00034 	movhi	r2,32768
    fe30:	10bfff04 	addi	r2,r2,-4
    fe34:	10c00536 	bltu	r2,r3,fe4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fe38:	e0bff917 	ldw	r2,-28(fp)
    fe3c:	10800917 	ldw	r2,36(r2)
    fe40:	10c00044 	addi	r3,r2,1
    fe44:	e0bff917 	ldw	r2,-28(fp)
    fe48:	10c00915 	stw	r3,36(r2)
    fe4c:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fe50:	e037883a 	mov	sp,fp
    fe54:	df000017 	ldw	fp,0(sp)
    fe58:	dec00104 	addi	sp,sp,4
    fe5c:	f800283a 	ret

0000fe60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fe60:	defffd04 	addi	sp,sp,-12
    fe64:	df000215 	stw	fp,8(sp)
    fe68:	df000204 	addi	fp,sp,8
    fe6c:	e13ffe15 	stw	r4,-8(fp)
    fe70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fe74:	00000506 	br	fe8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fe78:	e0bfff17 	ldw	r2,-4(fp)
    fe7c:	1090000c 	andi	r2,r2,16384
    fe80:	10000226 	beq	r2,zero,fe8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fe84:	00bffd44 	movi	r2,-11
    fe88:	00000b06 	br	feb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fe8c:	e0bffe17 	ldw	r2,-8(fp)
    fe90:	10c00d17 	ldw	r3,52(r2)
    fe94:	e0bffe17 	ldw	r2,-8(fp)
    fe98:	10800c17 	ldw	r2,48(r2)
    fe9c:	18800526 	beq	r3,r2,feb4 <altera_avalon_jtag_uart_close+0x54>
    fea0:	e0bffe17 	ldw	r2,-8(fp)
    fea4:	10c00917 	ldw	r3,36(r2)
    fea8:	e0bffe17 	ldw	r2,-8(fp)
    feac:	10800117 	ldw	r2,4(r2)
    feb0:	18bff136 	bltu	r3,r2,fe78 <__alt_data_end+0xff00fe78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    feb4:	0005883a 	mov	r2,zero
}
    feb8:	e037883a 	mov	sp,fp
    febc:	df000017 	ldw	fp,0(sp)
    fec0:	dec00104 	addi	sp,sp,4
    fec4:	f800283a 	ret

0000fec8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fec8:	defffa04 	addi	sp,sp,-24
    fecc:	df000515 	stw	fp,20(sp)
    fed0:	df000504 	addi	fp,sp,20
    fed4:	e13ffd15 	stw	r4,-12(fp)
    fed8:	e17ffe15 	stw	r5,-8(fp)
    fedc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fee0:	00bff9c4 	movi	r2,-25
    fee4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fee8:	e0bffe17 	ldw	r2,-8(fp)
    feec:	10da8060 	cmpeqi	r3,r2,27137
    fef0:	1800031e 	bne	r3,zero,ff00 <altera_avalon_jtag_uart_ioctl+0x38>
    fef4:	109a80a0 	cmpeqi	r2,r2,27138
    fef8:	1000181e 	bne	r2,zero,ff5c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fefc:	00002906 	br	ffa4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ff00:	e0bffd17 	ldw	r2,-12(fp)
    ff04:	10c00117 	ldw	r3,4(r2)
    ff08:	00a00034 	movhi	r2,32768
    ff0c:	10bfffc4 	addi	r2,r2,-1
    ff10:	18802126 	beq	r3,r2,ff98 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ff14:	e0bfff17 	ldw	r2,-4(fp)
    ff18:	10800017 	ldw	r2,0(r2)
    ff1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ff20:	e0bffc17 	ldw	r2,-16(fp)
    ff24:	10800090 	cmplti	r2,r2,2
    ff28:	1000061e 	bne	r2,zero,ff44 <altera_avalon_jtag_uart_ioctl+0x7c>
    ff2c:	e0fffc17 	ldw	r3,-16(fp)
    ff30:	00a00034 	movhi	r2,32768
    ff34:	10bfffc4 	addi	r2,r2,-1
    ff38:	18800226 	beq	r3,r2,ff44 <altera_avalon_jtag_uart_ioctl+0x7c>
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	00000206 	br	ff4c <altera_avalon_jtag_uart_ioctl+0x84>
    ff44:	00a00034 	movhi	r2,32768
    ff48:	10bfff84 	addi	r2,r2,-2
    ff4c:	e0fffd17 	ldw	r3,-12(fp)
    ff50:	18800115 	stw	r2,4(r3)
      rc = 0;
    ff54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ff58:	00000f06 	br	ff98 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ff5c:	e0bffd17 	ldw	r2,-12(fp)
    ff60:	10c00117 	ldw	r3,4(r2)
    ff64:	00a00034 	movhi	r2,32768
    ff68:	10bfffc4 	addi	r2,r2,-1
    ff6c:	18800c26 	beq	r3,r2,ffa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ff70:	e0bffd17 	ldw	r2,-12(fp)
    ff74:	10c00917 	ldw	r3,36(r2)
    ff78:	e0bffd17 	ldw	r2,-12(fp)
    ff7c:	10800117 	ldw	r2,4(r2)
    ff80:	1885803a 	cmpltu	r2,r3,r2
    ff84:	10c03fcc 	andi	r3,r2,255
    ff88:	e0bfff17 	ldw	r2,-4(fp)
    ff8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ff90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ff94:	00000206 	br	ffa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ff98:	0001883a 	nop
    ff9c:	00000106 	br	ffa4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    ffa0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    ffa4:	e0bffb17 	ldw	r2,-20(fp)
}
    ffa8:	e037883a 	mov	sp,fp
    ffac:	df000017 	ldw	fp,0(sp)
    ffb0:	dec00104 	addi	sp,sp,4
    ffb4:	f800283a 	ret

0000ffb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ffb8:	defff304 	addi	sp,sp,-52
    ffbc:	dfc00c15 	stw	ra,48(sp)
    ffc0:	df000b15 	stw	fp,44(sp)
    ffc4:	df000b04 	addi	fp,sp,44
    ffc8:	e13ffc15 	stw	r4,-16(fp)
    ffcc:	e17ffd15 	stw	r5,-12(fp)
    ffd0:	e1bffe15 	stw	r6,-8(fp)
    ffd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ffd8:	e0bffd17 	ldw	r2,-12(fp)
    ffdc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ffe0:	00004706 	br	10100 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ffe4:	e0bffc17 	ldw	r2,-16(fp)
    ffe8:	10800a17 	ldw	r2,40(r2)
    ffec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fff0:	e0bffc17 	ldw	r2,-16(fp)
    fff4:	10800b17 	ldw	r2,44(r2)
    fff8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fffc:	e0fff717 	ldw	r3,-36(fp)
   10000:	e0bff817 	ldw	r2,-32(fp)
   10004:	18800536 	bltu	r3,r2,1001c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10008:	e0fff717 	ldw	r3,-36(fp)
   1000c:	e0bff817 	ldw	r2,-32(fp)
   10010:	1885c83a 	sub	r2,r3,r2
   10014:	e0bff615 	stw	r2,-40(fp)
   10018:	00000406 	br	1002c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1001c:	00c20004 	movi	r3,2048
   10020:	e0bff817 	ldw	r2,-32(fp)
   10024:	1885c83a 	sub	r2,r3,r2
   10028:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1002c:	e0bff617 	ldw	r2,-40(fp)
   10030:	10001e26 	beq	r2,zero,100ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10034:	e0fffe17 	ldw	r3,-8(fp)
   10038:	e0bff617 	ldw	r2,-40(fp)
   1003c:	1880022e 	bgeu	r3,r2,10048 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10040:	e0bffe17 	ldw	r2,-8(fp)
   10044:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10048:	e0bffc17 	ldw	r2,-16(fp)
   1004c:	10c00e04 	addi	r3,r2,56
   10050:	e0bff817 	ldw	r2,-32(fp)
   10054:	1885883a 	add	r2,r3,r2
   10058:	e1bff617 	ldw	r6,-40(fp)
   1005c:	100b883a 	mov	r5,r2
   10060:	e13ff517 	ldw	r4,-44(fp)
   10064:	0008c640 	call	8c64 <memcpy>
      ptr   += n;
   10068:	e0fff517 	ldw	r3,-44(fp)
   1006c:	e0bff617 	ldw	r2,-40(fp)
   10070:	1885883a 	add	r2,r3,r2
   10074:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10078:	e0fffe17 	ldw	r3,-8(fp)
   1007c:	e0bff617 	ldw	r2,-40(fp)
   10080:	1885c83a 	sub	r2,r3,r2
   10084:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10088:	e0fff817 	ldw	r3,-32(fp)
   1008c:	e0bff617 	ldw	r2,-40(fp)
   10090:	1885883a 	add	r2,r3,r2
   10094:	10c1ffcc 	andi	r3,r2,2047
   10098:	e0bffc17 	ldw	r2,-16(fp)
   1009c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   100a0:	e0bffe17 	ldw	r2,-8(fp)
   100a4:	00bfcf16 	blt	zero,r2,ffe4 <__alt_data_end+0xff00ffe4>
   100a8:	00000106 	br	100b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   100ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   100b0:	e0fff517 	ldw	r3,-44(fp)
   100b4:	e0bffd17 	ldw	r2,-12(fp)
   100b8:	1880141e 	bne	r3,r2,1010c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   100bc:	e0bfff17 	ldw	r2,-4(fp)
   100c0:	1090000c 	andi	r2,r2,16384
   100c4:	1000131e 	bne	r2,zero,10114 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   100c8:	0001883a 	nop
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	10c00a17 	ldw	r3,40(r2)
   100d4:	e0bff717 	ldw	r2,-36(fp)
   100d8:	1880051e 	bne	r3,r2,100f0 <altera_avalon_jtag_uart_read+0x138>
   100dc:	e0bffc17 	ldw	r2,-16(fp)
   100e0:	10c00917 	ldw	r3,36(r2)
   100e4:	e0bffc17 	ldw	r2,-16(fp)
   100e8:	10800117 	ldw	r2,4(r2)
   100ec:	18bff736 	bltu	r3,r2,100cc <__alt_data_end+0xff0100cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   100f0:	e0bffc17 	ldw	r2,-16(fp)
   100f4:	10c00a17 	ldw	r3,40(r2)
   100f8:	e0bff717 	ldw	r2,-36(fp)
   100fc:	18800726 	beq	r3,r2,1011c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10100:	e0bffe17 	ldw	r2,-8(fp)
   10104:	00bfb716 	blt	zero,r2,ffe4 <__alt_data_end+0xff00ffe4>
   10108:	00000506 	br	10120 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1010c:	0001883a 	nop
   10110:	00000306 	br	10120 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10114:	0001883a 	nop
   10118:	00000106 	br	10120 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1011c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10120:	e0fff517 	ldw	r3,-44(fp)
   10124:	e0bffd17 	ldw	r2,-12(fp)
   10128:	18801826 	beq	r3,r2,1018c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1012c:	0005303a 	rdctl	r2,status
   10130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10134:	e0fffb17 	ldw	r3,-20(fp)
   10138:	00bfff84 	movi	r2,-2
   1013c:	1884703a 	and	r2,r3,r2
   10140:	1001703a 	wrctl	status,r2
  
  return context;
   10144:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10148:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1014c:	e0bffc17 	ldw	r2,-16(fp)
   10150:	10800817 	ldw	r2,32(r2)
   10154:	10c00054 	ori	r3,r2,1
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10160:	e0bffc17 	ldw	r2,-16(fp)
   10164:	10800017 	ldw	r2,0(r2)
   10168:	10800104 	addi	r2,r2,4
   1016c:	1007883a 	mov	r3,r2
   10170:	e0bffc17 	ldw	r2,-16(fp)
   10174:	10800817 	ldw	r2,32(r2)
   10178:	18800035 	stwio	r2,0(r3)
   1017c:	e0bffa17 	ldw	r2,-24(fp)
   10180:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10184:	e0bff917 	ldw	r2,-28(fp)
   10188:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1018c:	e0fff517 	ldw	r3,-44(fp)
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	18800426 	beq	r3,r2,101a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10198:	e0fff517 	ldw	r3,-44(fp)
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	1885c83a 	sub	r2,r3,r2
   101a4:	00000606 	br	101c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   101a8:	e0bfff17 	ldw	r2,-4(fp)
   101ac:	1090000c 	andi	r2,r2,16384
   101b0:	10000226 	beq	r2,zero,101bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   101b4:	00bffd44 	movi	r2,-11
   101b8:	00000106 	br	101c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   101bc:	00bffec4 	movi	r2,-5
}
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   101d4:	defff304 	addi	sp,sp,-52
   101d8:	dfc00c15 	stw	ra,48(sp)
   101dc:	df000b15 	stw	fp,44(sp)
   101e0:	df000b04 	addi	fp,sp,44
   101e4:	e13ffc15 	stw	r4,-16(fp)
   101e8:	e17ffd15 	stw	r5,-12(fp)
   101ec:	e1bffe15 	stw	r6,-8(fp)
   101f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   101f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   101f8:	e0bffd17 	ldw	r2,-12(fp)
   101fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10200:	00003706 	br	102e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10204:	e0bffc17 	ldw	r2,-16(fp)
   10208:	10800c17 	ldw	r2,48(r2)
   1020c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	10800d17 	ldw	r2,52(r2)
   10218:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1021c:	e0fff917 	ldw	r3,-28(fp)
   10220:	e0bff517 	ldw	r2,-44(fp)
   10224:	1880062e 	bgeu	r3,r2,10240 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10228:	e0fff517 	ldw	r3,-44(fp)
   1022c:	e0bff917 	ldw	r2,-28(fp)
   10230:	1885c83a 	sub	r2,r3,r2
   10234:	10bfffc4 	addi	r2,r2,-1
   10238:	e0bff615 	stw	r2,-40(fp)
   1023c:	00000b06 	br	1026c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10240:	e0bff517 	ldw	r2,-44(fp)
   10244:	10000526 	beq	r2,zero,1025c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10248:	00c20004 	movi	r3,2048
   1024c:	e0bff917 	ldw	r2,-28(fp)
   10250:	1885c83a 	sub	r2,r3,r2
   10254:	e0bff615 	stw	r2,-40(fp)
   10258:	00000406 	br	1026c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1025c:	00c1ffc4 	movi	r3,2047
   10260:	e0bff917 	ldw	r2,-28(fp)
   10264:	1885c83a 	sub	r2,r3,r2
   10268:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1026c:	e0bff617 	ldw	r2,-40(fp)
   10270:	10001e26 	beq	r2,zero,102ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10274:	e0fffe17 	ldw	r3,-8(fp)
   10278:	e0bff617 	ldw	r2,-40(fp)
   1027c:	1880022e 	bgeu	r3,r2,10288 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10280:	e0bffe17 	ldw	r2,-8(fp)
   10284:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10288:	e0bffc17 	ldw	r2,-16(fp)
   1028c:	10c20e04 	addi	r3,r2,2104
   10290:	e0bff917 	ldw	r2,-28(fp)
   10294:	1885883a 	add	r2,r3,r2
   10298:	e1bff617 	ldw	r6,-40(fp)
   1029c:	e17ffd17 	ldw	r5,-12(fp)
   102a0:	1009883a 	mov	r4,r2
   102a4:	0008c640 	call	8c64 <memcpy>
      ptr   += n;
   102a8:	e0fffd17 	ldw	r3,-12(fp)
   102ac:	e0bff617 	ldw	r2,-40(fp)
   102b0:	1885883a 	add	r2,r3,r2
   102b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   102b8:	e0fffe17 	ldw	r3,-8(fp)
   102bc:	e0bff617 	ldw	r2,-40(fp)
   102c0:	1885c83a 	sub	r2,r3,r2
   102c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   102c8:	e0fff917 	ldw	r3,-28(fp)
   102cc:	e0bff617 	ldw	r2,-40(fp)
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	10c1ffcc 	andi	r3,r2,2047
   102d8:	e0bffc17 	ldw	r2,-16(fp)
   102dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   102e0:	e0bffe17 	ldw	r2,-8(fp)
   102e4:	00bfc716 	blt	zero,r2,10204 <__alt_data_end+0xff010204>
   102e8:	00000106 	br	102f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   102ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102f0:	0005303a 	rdctl	r2,status
   102f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102f8:	e0fffb17 	ldw	r3,-20(fp)
   102fc:	00bfff84 	movi	r2,-2
   10300:	1884703a 	and	r2,r3,r2
   10304:	1001703a 	wrctl	status,r2
  
  return context;
   10308:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1030c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10310:	e0bffc17 	ldw	r2,-16(fp)
   10314:	10800817 	ldw	r2,32(r2)
   10318:	10c00094 	ori	r3,r2,2
   1031c:	e0bffc17 	ldw	r2,-16(fp)
   10320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	10800017 	ldw	r2,0(r2)
   1032c:	10800104 	addi	r2,r2,4
   10330:	1007883a 	mov	r3,r2
   10334:	e0bffc17 	ldw	r2,-16(fp)
   10338:	10800817 	ldw	r2,32(r2)
   1033c:	18800035 	stwio	r2,0(r3)
   10340:	e0bffa17 	ldw	r2,-24(fp)
   10344:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10348:	e0bff817 	ldw	r2,-32(fp)
   1034c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10350:	e0bffe17 	ldw	r2,-8(fp)
   10354:	0080100e 	bge	zero,r2,10398 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10358:	e0bfff17 	ldw	r2,-4(fp)
   1035c:	1090000c 	andi	r2,r2,16384
   10360:	1000101e 	bne	r2,zero,103a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10364:	0001883a 	nop
   10368:	e0bffc17 	ldw	r2,-16(fp)
   1036c:	10c00d17 	ldw	r3,52(r2)
   10370:	e0bff517 	ldw	r2,-44(fp)
   10374:	1880051e 	bne	r3,r2,1038c <altera_avalon_jtag_uart_write+0x1b8>
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	10c00917 	ldw	r3,36(r2)
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	10800117 	ldw	r2,4(r2)
   10388:	18bff736 	bltu	r3,r2,10368 <__alt_data_end+0xff010368>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1038c:	e0bffc17 	ldw	r2,-16(fp)
   10390:	10800917 	ldw	r2,36(r2)
   10394:	1000051e 	bne	r2,zero,103ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10398:	e0bffe17 	ldw	r2,-8(fp)
   1039c:	00bfd016 	blt	zero,r2,102e0 <__alt_data_end+0xff0102e0>
   103a0:	00000306 	br	103b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   103a4:	0001883a 	nop
   103a8:	00000106 	br	103b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   103ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   103b0:	e0fffd17 	ldw	r3,-12(fp)
   103b4:	e0bff717 	ldw	r2,-36(fp)
   103b8:	18800426 	beq	r3,r2,103cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   103bc:	e0fffd17 	ldw	r3,-12(fp)
   103c0:	e0bff717 	ldw	r2,-36(fp)
   103c4:	1885c83a 	sub	r2,r3,r2
   103c8:	00000606 	br	103e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   103cc:	e0bfff17 	ldw	r2,-4(fp)
   103d0:	1090000c 	andi	r2,r2,16384
   103d4:	10000226 	beq	r2,zero,103e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   103d8:	00bffd44 	movi	r2,-11
   103dc:	00000106 	br	103e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   103e0:	00bffec4 	movi	r2,-5
}
   103e4:	e037883a 	mov	sp,fp
   103e8:	dfc00117 	ldw	ra,4(sp)
   103ec:	df000017 	ldw	fp,0(sp)
   103f0:	dec00204 	addi	sp,sp,8
   103f4:	f800283a 	ret

000103f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   103f8:	defffa04 	addi	sp,sp,-24
   103fc:	dfc00515 	stw	ra,20(sp)
   10400:	df000415 	stw	fp,16(sp)
   10404:	df000404 	addi	fp,sp,16
   10408:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1040c:	0007883a 	mov	r3,zero
   10410:	e0bfff17 	ldw	r2,-4(fp)
   10414:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	10800104 	addi	r2,r2,4
   10420:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10424:	0005303a 	rdctl	r2,status
   10428:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1042c:	e0fffd17 	ldw	r3,-12(fp)
   10430:	00bfff84 	movi	r2,-2
   10434:	1884703a 	and	r2,r3,r2
   10438:	1001703a 	wrctl	status,r2
  
  return context;
   1043c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10440:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10444:	00111ec0 	call	111ec <alt_tick>
   10448:	e0bffc17 	ldw	r2,-16(fp)
   1044c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10450:	e0bffe17 	ldw	r2,-8(fp)
   10454:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10458:	0001883a 	nop
   1045c:	e037883a 	mov	sp,fp
   10460:	dfc00117 	ldw	ra,4(sp)
   10464:	df000017 	ldw	fp,0(sp)
   10468:	dec00204 	addi	sp,sp,8
   1046c:	f800283a 	ret

00010470 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10470:	defff804 	addi	sp,sp,-32
   10474:	dfc00715 	stw	ra,28(sp)
   10478:	df000615 	stw	fp,24(sp)
   1047c:	df000604 	addi	fp,sp,24
   10480:	e13ffc15 	stw	r4,-16(fp)
   10484:	e17ffd15 	stw	r5,-12(fp)
   10488:	e1bffe15 	stw	r6,-8(fp)
   1048c:	e1ffff15 	stw	r7,-4(fp)
   10490:	e0bfff17 	ldw	r2,-4(fp)
   10494:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10498:	d0a73117 	ldw	r2,-25404(gp)
   1049c:	1000021e 	bne	r2,zero,104a8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   104a0:	e0bffb17 	ldw	r2,-20(fp)
   104a4:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   104a8:	e0bffc17 	ldw	r2,-16(fp)
   104ac:	10800104 	addi	r2,r2,4
   104b0:	00c001c4 	movi	r3,7
   104b4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   104b8:	d8000015 	stw	zero,0(sp)
   104bc:	e1fffc17 	ldw	r7,-16(fp)
   104c0:	01800074 	movhi	r6,1
   104c4:	3180fe04 	addi	r6,r6,1016
   104c8:	e17ffe17 	ldw	r5,-8(fp)
   104cc:	e13ffd17 	ldw	r4,-12(fp)
   104d0:	0010b1c0 	call	10b1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   104d4:	0001883a 	nop
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   104ec:	defffe04 	addi	sp,sp,-8
   104f0:	df000115 	stw	fp,4(sp)
   104f4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   104f8:	d0a72e17 	ldw	r2,-25416(gp)
   104fc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   10500:	d0a72f17 	ldw	r2,-25412(gp)
   10504:	1000021e 	bne	r2,zero,10510 <alt_timestamp_start+0x24>
  {
    return -1;
   10508:	00bfffc4 	movi	r2,-1
   1050c:	00001106 	br	10554 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   10510:	e0bfff17 	ldw	r2,-4(fp)
   10514:	10800104 	addi	r2,r2,4
   10518:	00c00204 	movi	r3,8
   1051c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   10520:	e0bfff17 	ldw	r2,-4(fp)
   10524:	10800204 	addi	r2,r2,8
   10528:	00ffffd4 	movui	r3,65535
   1052c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   10530:	e0bfff17 	ldw	r2,-4(fp)
   10534:	10800304 	addi	r2,r2,12
   10538:	00ffffd4 	movui	r3,65535
   1053c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   10540:	e0bfff17 	ldw	r2,-4(fp)
   10544:	10800104 	addi	r2,r2,4
   10548:	00c00104 	movi	r3,4
   1054c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10550:	0005883a 	mov	r2,zero
}
   10554:	e037883a 	mov	sp,fp
   10558:	df000017 	ldw	fp,0(sp)
   1055c:	dec00104 	addi	sp,sp,4
   10560:	f800283a 	ret

00010564 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10564:	defffc04 	addi	sp,sp,-16
   10568:	df000315 	stw	fp,12(sp)
   1056c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10570:	d0a72e17 	ldw	r2,-25416(gp)
   10574:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   10578:	d0a72f17 	ldw	r2,-25412(gp)
   1057c:	1000021e 	bne	r2,zero,10588 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10580:	00bfffc4 	movi	r2,-1
   10584:	00001306 	br	105d4 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   10588:	e0bffd17 	ldw	r2,-12(fp)
   1058c:	10800404 	addi	r2,r2,16
   10590:	0007883a 	mov	r3,zero
   10594:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10598:	e0bffd17 	ldw	r2,-12(fp)
   1059c:	10800404 	addi	r2,r2,16
   105a0:	10800037 	ldwio	r2,0(r2)
   105a4:	10bfffcc 	andi	r2,r2,65535
   105a8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   105ac:	e0bffd17 	ldw	r2,-12(fp)
   105b0:	10800504 	addi	r2,r2,20
   105b4:	10800037 	ldwio	r2,0(r2)
   105b8:	10bfffcc 	andi	r2,r2,65535
   105bc:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   105c0:	e0bfff17 	ldw	r2,-4(fp)
   105c4:	1006943a 	slli	r3,r2,16
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	1884b03a 	or	r2,r3,r2
   105d0:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   105d4:	e037883a 	mov	sp,fp
   105d8:	df000017 	ldw	fp,0(sp)
   105dc:	dec00104 	addi	sp,sp,4
   105e0:	f800283a 	ret

000105e4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   105e4:	deffff04 	addi	sp,sp,-4
   105e8:	df000015 	stw	fp,0(sp)
   105ec:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   105f0:	d0a72f17 	ldw	r2,-25412(gp)
}
   105f4:	e037883a 	mov	sp,fp
   105f8:	df000017 	ldw	fp,0(sp)
   105fc:	dec00104 	addi	sp,sp,4
   10600:	f800283a 	ret

00010604 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10604:	defff504 	addi	sp,sp,-44
   10608:	df000a15 	stw	fp,40(sp)
   1060c:	df000a04 	addi	fp,sp,40
   10610:	e13ffc15 	stw	r4,-16(fp)
   10614:	e17ffd15 	stw	r5,-12(fp)
   10618:	e1bffe15 	stw	r6,-8(fp)
   1061c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10620:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10624:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
   10628:	10003c26 	beq	r2,zero,1071c <alt_alarm_start+0x118>
  {
    if (alarm)
   1062c:	e0bffc17 	ldw	r2,-16(fp)
   10630:	10003826 	beq	r2,zero,10714 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10634:	e0bffc17 	ldw	r2,-16(fp)
   10638:	e0fffe17 	ldw	r3,-8(fp)
   1063c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	e0ffff17 	ldw	r3,-4(fp)
   10648:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1064c:	0005303a 	rdctl	r2,status
   10650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10654:	e0fff917 	ldw	r3,-28(fp)
   10658:	00bfff84 	movi	r2,-2
   1065c:	1884703a 	and	r2,r3,r2
   10660:	1001703a 	wrctl	status,r2
  
  return context;
   10664:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10668:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1066c:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
   10670:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10674:	e0fffd17 	ldw	r3,-12(fp)
   10678:	e0bff617 	ldw	r2,-40(fp)
   1067c:	1885883a 	add	r2,r3,r2
   10680:	10c00044 	addi	r3,r2,1
   10684:	e0bffc17 	ldw	r2,-16(fp)
   10688:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1068c:	e0bffc17 	ldw	r2,-16(fp)
   10690:	10c00217 	ldw	r3,8(r2)
   10694:	e0bff617 	ldw	r2,-40(fp)
   10698:	1880042e 	bgeu	r3,r2,106ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1069c:	e0bffc17 	ldw	r2,-16(fp)
   106a0:	00c00044 	movi	r3,1
   106a4:	10c00405 	stb	r3,16(r2)
   106a8:	00000206 	br	106b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   106ac:	e0bffc17 	ldw	r2,-16(fp)
   106b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   106b4:	e0bffc17 	ldw	r2,-16(fp)
   106b8:	d0e00e04 	addi	r3,gp,-32712
   106bc:	e0fffa15 	stw	r3,-24(fp)
   106c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   106c4:	e0bffb17 	ldw	r2,-20(fp)
   106c8:	e0fffa17 	ldw	r3,-24(fp)
   106cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   106d0:	e0bffa17 	ldw	r2,-24(fp)
   106d4:	10c00017 	ldw	r3,0(r2)
   106d8:	e0bffb17 	ldw	r2,-20(fp)
   106dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   106e0:	e0bffa17 	ldw	r2,-24(fp)
   106e4:	10800017 	ldw	r2,0(r2)
   106e8:	e0fffb17 	ldw	r3,-20(fp)
   106ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   106f0:	e0bffa17 	ldw	r2,-24(fp)
   106f4:	e0fffb17 	ldw	r3,-20(fp)
   106f8:	10c00015 	stw	r3,0(r2)
   106fc:	e0bff817 	ldw	r2,-32(fp)
   10700:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10704:	e0bff717 	ldw	r2,-36(fp)
   10708:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1070c:	0005883a 	mov	r2,zero
   10710:	00000306 	br	10720 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10714:	00bffa84 	movi	r2,-22
   10718:	00000106 	br	10720 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1071c:	00bfde84 	movi	r2,-134
  }
}
   10720:	e037883a 	mov	sp,fp
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00104 	addi	sp,sp,4
   1072c:	f800283a 	ret

00010730 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10730:	defffa04 	addi	sp,sp,-24
   10734:	dfc00515 	stw	ra,20(sp)
   10738:	df000415 	stw	fp,16(sp)
   1073c:	df000404 	addi	fp,sp,16
   10740:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10744:	008000c4 	movi	r2,3
   10748:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1074c:	e0fffd17 	ldw	r3,-12(fp)
   10750:	008003f4 	movhi	r2,15
   10754:	10909004 	addi	r2,r2,16960
   10758:	1885383a 	mul	r2,r3,r2
   1075c:	100b883a 	mov	r5,r2
   10760:	0100bef4 	movhi	r4,763
   10764:	213c2004 	addi	r4,r4,-3968
   10768:	000266c0 	call	266c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1076c:	100b883a 	mov	r5,r2
   10770:	01200034 	movhi	r4,32768
   10774:	213fffc4 	addi	r4,r4,-1
   10778:	000266c0 	call	266c <__udivsi3>
   1077c:	100b883a 	mov	r5,r2
   10780:	e13fff17 	ldw	r4,-4(fp)
   10784:	000266c0 	call	266c <__udivsi3>
   10788:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1078c:	e0bffe17 	ldw	r2,-8(fp)
   10790:	10002a26 	beq	r2,zero,1083c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10794:	e03ffc15 	stw	zero,-16(fp)
   10798:	00001706 	br	107f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1079c:	00a00034 	movhi	r2,32768
   107a0:	10bfffc4 	addi	r2,r2,-1
   107a4:	10bfffc4 	addi	r2,r2,-1
   107a8:	103ffe1e 	bne	r2,zero,107a4 <__alt_data_end+0xff0107a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   107ac:	e0fffd17 	ldw	r3,-12(fp)
   107b0:	008003f4 	movhi	r2,15
   107b4:	10909004 	addi	r2,r2,16960
   107b8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   107bc:	100b883a 	mov	r5,r2
   107c0:	0100bef4 	movhi	r4,763
   107c4:	213c2004 	addi	r4,r4,-3968
   107c8:	000266c0 	call	266c <__udivsi3>
   107cc:	100b883a 	mov	r5,r2
   107d0:	01200034 	movhi	r4,32768
   107d4:	213fffc4 	addi	r4,r4,-1
   107d8:	000266c0 	call	266c <__udivsi3>
   107dc:	1007883a 	mov	r3,r2
   107e0:	e0bfff17 	ldw	r2,-4(fp)
   107e4:	10c5c83a 	sub	r2,r2,r3
   107e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   107ec:	e0bffc17 	ldw	r2,-16(fp)
   107f0:	10800044 	addi	r2,r2,1
   107f4:	e0bffc15 	stw	r2,-16(fp)
   107f8:	e0fffc17 	ldw	r3,-16(fp)
   107fc:	e0bffe17 	ldw	r2,-8(fp)
   10800:	18bfe616 	blt	r3,r2,1079c <__alt_data_end+0xff01079c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10804:	e0fffd17 	ldw	r3,-12(fp)
   10808:	008003f4 	movhi	r2,15
   1080c:	10909004 	addi	r2,r2,16960
   10810:	1885383a 	mul	r2,r3,r2
   10814:	100b883a 	mov	r5,r2
   10818:	0100bef4 	movhi	r4,763
   1081c:	213c2004 	addi	r4,r4,-3968
   10820:	000266c0 	call	266c <__udivsi3>
   10824:	1007883a 	mov	r3,r2
   10828:	e0bfff17 	ldw	r2,-4(fp)
   1082c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10830:	10bfffc4 	addi	r2,r2,-1
   10834:	103ffe1e 	bne	r2,zero,10830 <__alt_data_end+0xff010830>
   10838:	00000d06 	br	10870 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1083c:	e0fffd17 	ldw	r3,-12(fp)
   10840:	008003f4 	movhi	r2,15
   10844:	10909004 	addi	r2,r2,16960
   10848:	1885383a 	mul	r2,r3,r2
   1084c:	100b883a 	mov	r5,r2
   10850:	0100bef4 	movhi	r4,763
   10854:	213c2004 	addi	r4,r4,-3968
   10858:	000266c0 	call	266c <__udivsi3>
   1085c:	1007883a 	mov	r3,r2
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10868:	10bfffc4 	addi	r2,r2,-1
   1086c:	00bffe16 	blt	zero,r2,10868 <__alt_data_end+0xff010868>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10870:	0005883a 	mov	r2,zero
}
   10874:	e037883a 	mov	sp,fp
   10878:	dfc00117 	ldw	ra,4(sp)
   1087c:	df000017 	ldw	fp,0(sp)
   10880:	dec00204 	addi	sp,sp,8
   10884:	f800283a 	ret

00010888 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   10888:	defffb04 	addi	sp,sp,-20
   1088c:	df000415 	stw	fp,16(sp)
   10890:	df000404 	addi	fp,sp,16
   10894:	e13ffe15 	stw	r4,-8(fp)
   10898:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   1089c:	e0fffe17 	ldw	r3,-8(fp)
   108a0:	e0bfff17 	ldw	r2,-4(fp)
   108a4:	1885883a 	add	r2,r3,r2
   108a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   108ac:	e0bffe17 	ldw	r2,-8(fp)
   108b0:	e0bffc15 	stw	r2,-16(fp)
   108b4:	00000506 	br	108cc <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   108b8:	e0bffc17 	ldw	r2,-16(fp)
   108bc:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   108c0:	e0bffc17 	ldw	r2,-16(fp)
   108c4:	10800804 	addi	r2,r2,32
   108c8:	e0bffc15 	stw	r2,-16(fp)
   108cc:	e0fffc17 	ldw	r3,-16(fp)
   108d0:	e0bffd17 	ldw	r2,-12(fp)
   108d4:	18bff836 	bltu	r3,r2,108b8 <__alt_data_end+0xff0108b8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   108d8:	e0bffe17 	ldw	r2,-8(fp)
   108dc:	108007cc 	andi	r2,r2,31
   108e0:	10000226 	beq	r2,zero,108ec <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   108e4:	e0bffc17 	ldw	r2,-16(fp)
   108e8:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   108ec:	0001883a 	nop
   108f0:	e037883a 	mov	sp,fp
   108f4:	df000017 	ldw	fp,0(sp)
   108f8:	dec00104 	addi	sp,sp,4
   108fc:	f800283a 	ret

00010900 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10900:	defffe04 	addi	sp,sp,-8
   10904:	df000115 	stw	fp,4(sp)
   10908:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1090c:	e03fff15 	stw	zero,-4(fp)
   10910:	00000506 	br	10928 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1091c:	e0bfff17 	ldw	r2,-4(fp)
   10920:	10800804 	addi	r2,r2,32
   10924:	e0bfff15 	stw	r2,-4(fp)
   10928:	e0bfff17 	ldw	r2,-4(fp)
   1092c:	10a00030 	cmpltui	r2,r2,32768
   10930:	103ff81e 	bne	r2,zero,10914 <__alt_data_end+0xff010914>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10934:	0001883a 	nop
   10938:	e037883a 	mov	sp,fp
   1093c:	df000017 	ldw	fp,0(sp)
   10940:	dec00104 	addi	sp,sp,4
   10944:	f800283a 	ret

00010948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10948:	defffe04 	addi	sp,sp,-8
   1094c:	dfc00115 	stw	ra,4(sp)
   10950:	df000015 	stw	fp,0(sp)
   10954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10958:	d0a00b17 	ldw	r2,-32724(gp)
   1095c:	10000326 	beq	r2,zero,1096c <alt_get_errno+0x24>
   10960:	d0a00b17 	ldw	r2,-32724(gp)
   10964:	103ee83a 	callr	r2
   10968:	00000106 	br	10970 <alt_get_errno+0x28>
   1096c:	d0a72704 	addi	r2,gp,-25444
}
   10970:	e037883a 	mov	sp,fp
   10974:	dfc00117 	ldw	ra,4(sp)
   10978:	df000017 	ldw	fp,0(sp)
   1097c:	dec00204 	addi	sp,sp,8
   10980:	f800283a 	ret

00010984 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10984:	defffa04 	addi	sp,sp,-24
   10988:	dfc00515 	stw	ra,20(sp)
   1098c:	df000415 	stw	fp,16(sp)
   10990:	df000404 	addi	fp,sp,16
   10994:	e13ffe15 	stw	r4,-8(fp)
   10998:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1099c:	e0bffe17 	ldw	r2,-8(fp)
   109a0:	10000326 	beq	r2,zero,109b0 <alt_dev_llist_insert+0x2c>
   109a4:	e0bffe17 	ldw	r2,-8(fp)
   109a8:	10800217 	ldw	r2,8(r2)
   109ac:	1000061e 	bne	r2,zero,109c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   109b0:	00109480 	call	10948 <alt_get_errno>
   109b4:	1007883a 	mov	r3,r2
   109b8:	00800584 	movi	r2,22
   109bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   109c0:	00bffa84 	movi	r2,-22
   109c4:	00001306 	br	10a14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   109c8:	e0bffe17 	ldw	r2,-8(fp)
   109cc:	e0ffff17 	ldw	r3,-4(fp)
   109d0:	e0fffc15 	stw	r3,-16(fp)
   109d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   109d8:	e0bffd17 	ldw	r2,-12(fp)
   109dc:	e0fffc17 	ldw	r3,-16(fp)
   109e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   109e4:	e0bffc17 	ldw	r2,-16(fp)
   109e8:	10c00017 	ldw	r3,0(r2)
   109ec:	e0bffd17 	ldw	r2,-12(fp)
   109f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   109f4:	e0bffc17 	ldw	r2,-16(fp)
   109f8:	10800017 	ldw	r2,0(r2)
   109fc:	e0fffd17 	ldw	r3,-12(fp)
   10a00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	e0fffd17 	ldw	r3,-12(fp)
   10a0c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10a10:	0005883a 	mov	r2,zero
}
   10a14:	e037883a 	mov	sp,fp
   10a18:	dfc00117 	ldw	ra,4(sp)
   10a1c:	df000017 	ldw	fp,0(sp)
   10a20:	dec00204 	addi	sp,sp,8
   10a24:	f800283a 	ret

00010a28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10a28:	defffd04 	addi	sp,sp,-12
   10a2c:	dfc00215 	stw	ra,8(sp)
   10a30:	df000115 	stw	fp,4(sp)
   10a34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10a38:	00800074 	movhi	r2,1
   10a3c:	1086f004 	addi	r2,r2,7104
   10a40:	e0bfff15 	stw	r2,-4(fp)
   10a44:	00000606 	br	10a60 <_do_ctors+0x38>
        (*ctor) (); 
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	10800017 	ldw	r2,0(r2)
   10a50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10a54:	e0bfff17 	ldw	r2,-4(fp)
   10a58:	10bfff04 	addi	r2,r2,-4
   10a5c:	e0bfff15 	stw	r2,-4(fp)
   10a60:	e0ffff17 	ldw	r3,-4(fp)
   10a64:	00800074 	movhi	r2,1
   10a68:	1086f104 	addi	r2,r2,7108
   10a6c:	18bff62e 	bgeu	r3,r2,10a48 <__alt_data_end+0xff010a48>
        (*ctor) (); 
}
   10a70:	0001883a 	nop
   10a74:	e037883a 	mov	sp,fp
   10a78:	dfc00117 	ldw	ra,4(sp)
   10a7c:	df000017 	ldw	fp,0(sp)
   10a80:	dec00204 	addi	sp,sp,8
   10a84:	f800283a 	ret

00010a88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10a88:	defffd04 	addi	sp,sp,-12
   10a8c:	dfc00215 	stw	ra,8(sp)
   10a90:	df000115 	stw	fp,4(sp)
   10a94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10a98:	00800074 	movhi	r2,1
   10a9c:	1086f004 	addi	r2,r2,7104
   10aa0:	e0bfff15 	stw	r2,-4(fp)
   10aa4:	00000606 	br	10ac0 <_do_dtors+0x38>
        (*dtor) (); 
   10aa8:	e0bfff17 	ldw	r2,-4(fp)
   10aac:	10800017 	ldw	r2,0(r2)
   10ab0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	10bfff04 	addi	r2,r2,-4
   10abc:	e0bfff15 	stw	r2,-4(fp)
   10ac0:	e0ffff17 	ldw	r3,-4(fp)
   10ac4:	00800074 	movhi	r2,1
   10ac8:	1086f104 	addi	r2,r2,7108
   10acc:	18bff62e 	bgeu	r3,r2,10aa8 <__alt_data_end+0xff010aa8>
        (*dtor) (); 
}
   10ad0:	0001883a 	nop
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10ae8:	defffe04 	addi	sp,sp,-8
   10aec:	dfc00115 	stw	ra,4(sp)
   10af0:	df000015 	stw	fp,0(sp)
   10af4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10af8:	01440004 	movi	r5,4096
   10afc:	0009883a 	mov	r4,zero
   10b00:	00115540 	call	11554 <alt_icache_flush>
#endif
}
   10b04:	0001883a 	nop
   10b08:	e037883a 	mov	sp,fp
   10b0c:	dfc00117 	ldw	ra,4(sp)
   10b10:	df000017 	ldw	fp,0(sp)
   10b14:	dec00204 	addi	sp,sp,8
   10b18:	f800283a 	ret

00010b1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10b1c:	defff904 	addi	sp,sp,-28
   10b20:	dfc00615 	stw	ra,24(sp)
   10b24:	df000515 	stw	fp,20(sp)
   10b28:	df000504 	addi	fp,sp,20
   10b2c:	e13ffc15 	stw	r4,-16(fp)
   10b30:	e17ffd15 	stw	r5,-12(fp)
   10b34:	e1bffe15 	stw	r6,-8(fp)
   10b38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10b3c:	e0800217 	ldw	r2,8(fp)
   10b40:	d8800015 	stw	r2,0(sp)
   10b44:	e1ffff17 	ldw	r7,-4(fp)
   10b48:	e1bffe17 	ldw	r6,-8(fp)
   10b4c:	e17ffd17 	ldw	r5,-12(fp)
   10b50:	e13ffc17 	ldw	r4,-16(fp)
   10b54:	0010ccc0 	call	10ccc <alt_iic_isr_register>
}  
   10b58:	e037883a 	mov	sp,fp
   10b5c:	dfc00117 	ldw	ra,4(sp)
   10b60:	df000017 	ldw	fp,0(sp)
   10b64:	dec00204 	addi	sp,sp,8
   10b68:	f800283a 	ret

00010b6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10b6c:	defff904 	addi	sp,sp,-28
   10b70:	df000615 	stw	fp,24(sp)
   10b74:	df000604 	addi	fp,sp,24
   10b78:	e13ffe15 	stw	r4,-8(fp)
   10b7c:	e17fff15 	stw	r5,-4(fp)
   10b80:	e0bfff17 	ldw	r2,-4(fp)
   10b84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b88:	0005303a 	rdctl	r2,status
   10b8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b90:	e0fffb17 	ldw	r3,-20(fp)
   10b94:	00bfff84 	movi	r2,-2
   10b98:	1884703a 	and	r2,r3,r2
   10b9c:	1001703a 	wrctl	status,r2
  
  return context;
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10ba4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10ba8:	00c00044 	movi	r3,1
   10bac:	e0bffa17 	ldw	r2,-24(fp)
   10bb0:	1884983a 	sll	r2,r3,r2
   10bb4:	1007883a 	mov	r3,r2
   10bb8:	d0a73017 	ldw	r2,-25408(gp)
   10bbc:	1884b03a 	or	r2,r3,r2
   10bc0:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10bc4:	d0a73017 	ldw	r2,-25408(gp)
   10bc8:	100170fa 	wrctl	ienable,r2
   10bcc:	e0bffc17 	ldw	r2,-16(fp)
   10bd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bd4:	e0bffd17 	ldw	r2,-12(fp)
   10bd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10bdc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10be0:	0001883a 	nop
}
   10be4:	e037883a 	mov	sp,fp
   10be8:	df000017 	ldw	fp,0(sp)
   10bec:	dec00104 	addi	sp,sp,4
   10bf0:	f800283a 	ret

00010bf4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10bf4:	defff904 	addi	sp,sp,-28
   10bf8:	df000615 	stw	fp,24(sp)
   10bfc:	df000604 	addi	fp,sp,24
   10c00:	e13ffe15 	stw	r4,-8(fp)
   10c04:	e17fff15 	stw	r5,-4(fp)
   10c08:	e0bfff17 	ldw	r2,-4(fp)
   10c0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c10:	0005303a 	rdctl	r2,status
   10c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c18:	e0fffb17 	ldw	r3,-20(fp)
   10c1c:	00bfff84 	movi	r2,-2
   10c20:	1884703a 	and	r2,r3,r2
   10c24:	1001703a 	wrctl	status,r2
  
  return context;
   10c28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10c30:	00c00044 	movi	r3,1
   10c34:	e0bffa17 	ldw	r2,-24(fp)
   10c38:	1884983a 	sll	r2,r3,r2
   10c3c:	0084303a 	nor	r2,zero,r2
   10c40:	1007883a 	mov	r3,r2
   10c44:	d0a73017 	ldw	r2,-25408(gp)
   10c48:	1884703a 	and	r2,r3,r2
   10c4c:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c50:	d0a73017 	ldw	r2,-25408(gp)
   10c54:	100170fa 	wrctl	ienable,r2
   10c58:	e0bffc17 	ldw	r2,-16(fp)
   10c5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c60:	e0bffd17 	ldw	r2,-12(fp)
   10c64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10c68:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10c6c:	0001883a 	nop
}
   10c70:	e037883a 	mov	sp,fp
   10c74:	df000017 	ldw	fp,0(sp)
   10c78:	dec00104 	addi	sp,sp,4
   10c7c:	f800283a 	ret

00010c80 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10c80:	defffc04 	addi	sp,sp,-16
   10c84:	df000315 	stw	fp,12(sp)
   10c88:	df000304 	addi	fp,sp,12
   10c8c:	e13ffe15 	stw	r4,-8(fp)
   10c90:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c94:	000530fa 	rdctl	r2,ienable
   10c98:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10c9c:	00c00044 	movi	r3,1
   10ca0:	e0bfff17 	ldw	r2,-4(fp)
   10ca4:	1884983a 	sll	r2,r3,r2
   10ca8:	1007883a 	mov	r3,r2
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	1884703a 	and	r2,r3,r2
   10cb4:	1004c03a 	cmpne	r2,r2,zero
   10cb8:	10803fcc 	andi	r2,r2,255
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
   10cc8:	f800283a 	ret

00010ccc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ccc:	defff504 	addi	sp,sp,-44
   10cd0:	dfc00a15 	stw	ra,40(sp)
   10cd4:	df000915 	stw	fp,36(sp)
   10cd8:	df000904 	addi	fp,sp,36
   10cdc:	e13ffc15 	stw	r4,-16(fp)
   10ce0:	e17ffd15 	stw	r5,-12(fp)
   10ce4:	e1bffe15 	stw	r6,-8(fp)
   10ce8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10cec:	00bffa84 	movi	r2,-22
   10cf0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10cf4:	e0bffd17 	ldw	r2,-12(fp)
   10cf8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10cfc:	e0bff817 	ldw	r2,-32(fp)
   10d00:	10800808 	cmpgei	r2,r2,32
   10d04:	1000271e 	bne	r2,zero,10da4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d08:	0005303a 	rdctl	r2,status
   10d0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d10:	e0fffb17 	ldw	r3,-20(fp)
   10d14:	00bfff84 	movi	r2,-2
   10d18:	1884703a 	and	r2,r3,r2
   10d1c:	1001703a 	wrctl	status,r2
  
  return context;
   10d20:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10d24:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10d28:	00800074 	movhi	r2,1
   10d2c:	10970904 	addi	r2,r2,23588
   10d30:	e0fff817 	ldw	r3,-32(fp)
   10d34:	180690fa 	slli	r3,r3,3
   10d38:	10c5883a 	add	r2,r2,r3
   10d3c:	e0fffe17 	ldw	r3,-8(fp)
   10d40:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10d44:	00800074 	movhi	r2,1
   10d48:	10970904 	addi	r2,r2,23588
   10d4c:	e0fff817 	ldw	r3,-32(fp)
   10d50:	180690fa 	slli	r3,r3,3
   10d54:	10c5883a 	add	r2,r2,r3
   10d58:	10800104 	addi	r2,r2,4
   10d5c:	e0ffff17 	ldw	r3,-4(fp)
   10d60:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10d64:	e0bffe17 	ldw	r2,-8(fp)
   10d68:	10000526 	beq	r2,zero,10d80 <alt_iic_isr_register+0xb4>
   10d6c:	e0bff817 	ldw	r2,-32(fp)
   10d70:	100b883a 	mov	r5,r2
   10d74:	e13ffc17 	ldw	r4,-16(fp)
   10d78:	0010b6c0 	call	10b6c <alt_ic_irq_enable>
   10d7c:	00000406 	br	10d90 <alt_iic_isr_register+0xc4>
   10d80:	e0bff817 	ldw	r2,-32(fp)
   10d84:	100b883a 	mov	r5,r2
   10d88:	e13ffc17 	ldw	r4,-16(fp)
   10d8c:	0010bf40 	call	10bf4 <alt_ic_irq_disable>
   10d90:	e0bff715 	stw	r2,-36(fp)
   10d94:	e0bffa17 	ldw	r2,-24(fp)
   10d98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d9c:	e0bff917 	ldw	r2,-28(fp)
   10da0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10da4:	e0bff717 	ldw	r2,-36(fp)
}
   10da8:	e037883a 	mov	sp,fp
   10dac:	dfc00117 	ldw	ra,4(sp)
   10db0:	df000017 	ldw	fp,0(sp)
   10db4:	dec00204 	addi	sp,sp,8
   10db8:	f800283a 	ret

00010dbc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10dbc:	defff904 	addi	sp,sp,-28
   10dc0:	dfc00615 	stw	ra,24(sp)
   10dc4:	df000515 	stw	fp,20(sp)
   10dc8:	df000504 	addi	fp,sp,20
   10dcc:	e13ffc15 	stw	r4,-16(fp)
   10dd0:	e17ffd15 	stw	r5,-12(fp)
   10dd4:	e1bffe15 	stw	r6,-8(fp)
   10dd8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10ddc:	e1bfff17 	ldw	r6,-4(fp)
   10de0:	e17ffe17 	ldw	r5,-8(fp)
   10de4:	e13ffd17 	ldw	r4,-12(fp)
   10de8:	0010ffc0 	call	10ffc <open>
   10dec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10df0:	e0bffb17 	ldw	r2,-20(fp)
   10df4:	10001c16 	blt	r2,zero,10e68 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10df8:	00800074 	movhi	r2,1
   10dfc:	108b5304 	addi	r2,r2,11596
   10e00:	e0fffb17 	ldw	r3,-20(fp)
   10e04:	18c00324 	muli	r3,r3,12
   10e08:	10c5883a 	add	r2,r2,r3
   10e0c:	10c00017 	ldw	r3,0(r2)
   10e10:	e0bffc17 	ldw	r2,-16(fp)
   10e14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e18:	00800074 	movhi	r2,1
   10e1c:	108b5304 	addi	r2,r2,11596
   10e20:	e0fffb17 	ldw	r3,-20(fp)
   10e24:	18c00324 	muli	r3,r3,12
   10e28:	10c5883a 	add	r2,r2,r3
   10e2c:	10800104 	addi	r2,r2,4
   10e30:	10c00017 	ldw	r3,0(r2)
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10e3c:	00800074 	movhi	r2,1
   10e40:	108b5304 	addi	r2,r2,11596
   10e44:	e0fffb17 	ldw	r3,-20(fp)
   10e48:	18c00324 	muli	r3,r3,12
   10e4c:	10c5883a 	add	r2,r2,r3
   10e50:	10800204 	addi	r2,r2,8
   10e54:	10c00017 	ldw	r3,0(r2)
   10e58:	e0bffc17 	ldw	r2,-16(fp)
   10e5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10e60:	e13ffb17 	ldw	r4,-20(fp)
   10e64:	000f5b80 	call	f5b8 <alt_release_fd>
  }
} 
   10e68:	0001883a 	nop
   10e6c:	e037883a 	mov	sp,fp
   10e70:	dfc00117 	ldw	ra,4(sp)
   10e74:	df000017 	ldw	fp,0(sp)
   10e78:	dec00204 	addi	sp,sp,8
   10e7c:	f800283a 	ret

00010e80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10e80:	defffb04 	addi	sp,sp,-20
   10e84:	dfc00415 	stw	ra,16(sp)
   10e88:	df000315 	stw	fp,12(sp)
   10e8c:	df000304 	addi	fp,sp,12
   10e90:	e13ffd15 	stw	r4,-12(fp)
   10e94:	e17ffe15 	stw	r5,-8(fp)
   10e98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10e9c:	01c07fc4 	movi	r7,511
   10ea0:	01800044 	movi	r6,1
   10ea4:	e17ffd17 	ldw	r5,-12(fp)
   10ea8:	01000074 	movhi	r4,1
   10eac:	210b5604 	addi	r4,r4,11608
   10eb0:	0010dbc0 	call	10dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10eb4:	01c07fc4 	movi	r7,511
   10eb8:	000d883a 	mov	r6,zero
   10ebc:	e17ffe17 	ldw	r5,-8(fp)
   10ec0:	01000074 	movhi	r4,1
   10ec4:	210b5304 	addi	r4,r4,11596
   10ec8:	0010dbc0 	call	10dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ecc:	01c07fc4 	movi	r7,511
   10ed0:	01800044 	movi	r6,1
   10ed4:	e17fff17 	ldw	r5,-4(fp)
   10ed8:	01000074 	movhi	r4,1
   10edc:	210b5904 	addi	r4,r4,11620
   10ee0:	0010dbc0 	call	10dbc <alt_open_fd>
}  
   10ee4:	0001883a 	nop
   10ee8:	e037883a 	mov	sp,fp
   10eec:	dfc00117 	ldw	ra,4(sp)
   10ef0:	df000017 	ldw	fp,0(sp)
   10ef4:	dec00204 	addi	sp,sp,8
   10ef8:	f800283a 	ret

00010efc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10efc:	defffe04 	addi	sp,sp,-8
   10f00:	dfc00115 	stw	ra,4(sp)
   10f04:	df000015 	stw	fp,0(sp)
   10f08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f0c:	d0a00b17 	ldw	r2,-32724(gp)
   10f10:	10000326 	beq	r2,zero,10f20 <alt_get_errno+0x24>
   10f14:	d0a00b17 	ldw	r2,-32724(gp)
   10f18:	103ee83a 	callr	r2
   10f1c:	00000106 	br	10f24 <alt_get_errno+0x28>
   10f20:	d0a72704 	addi	r2,gp,-25444
}
   10f24:	e037883a 	mov	sp,fp
   10f28:	dfc00117 	ldw	ra,4(sp)
   10f2c:	df000017 	ldw	fp,0(sp)
   10f30:	dec00204 	addi	sp,sp,8
   10f34:	f800283a 	ret

00010f38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10f38:	defffd04 	addi	sp,sp,-12
   10f3c:	df000215 	stw	fp,8(sp)
   10f40:	df000204 	addi	fp,sp,8
   10f44:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10800217 	ldw	r2,8(r2)
   10f50:	10d00034 	orhi	r3,r2,16384
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f5c:	e03ffe15 	stw	zero,-8(fp)
   10f60:	00001d06 	br	10fd8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10f64:	00800074 	movhi	r2,1
   10f68:	108b5304 	addi	r2,r2,11596
   10f6c:	e0fffe17 	ldw	r3,-8(fp)
   10f70:	18c00324 	muli	r3,r3,12
   10f74:	10c5883a 	add	r2,r2,r3
   10f78:	10c00017 	ldw	r3,0(r2)
   10f7c:	e0bfff17 	ldw	r2,-4(fp)
   10f80:	10800017 	ldw	r2,0(r2)
   10f84:	1880111e 	bne	r3,r2,10fcc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10f88:	00800074 	movhi	r2,1
   10f8c:	108b5304 	addi	r2,r2,11596
   10f90:	e0fffe17 	ldw	r3,-8(fp)
   10f94:	18c00324 	muli	r3,r3,12
   10f98:	10c5883a 	add	r2,r2,r3
   10f9c:	10800204 	addi	r2,r2,8
   10fa0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10fa4:	1000090e 	bge	r2,zero,10fcc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10fa8:	e0bffe17 	ldw	r2,-8(fp)
   10fac:	10c00324 	muli	r3,r2,12
   10fb0:	00800074 	movhi	r2,1
   10fb4:	108b5304 	addi	r2,r2,11596
   10fb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10fbc:	e0bfff17 	ldw	r2,-4(fp)
   10fc0:	18800226 	beq	r3,r2,10fcc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10fc4:	00bffcc4 	movi	r2,-13
   10fc8:	00000806 	br	10fec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10fcc:	e0bffe17 	ldw	r2,-8(fp)
   10fd0:	10800044 	addi	r2,r2,1
   10fd4:	e0bffe15 	stw	r2,-8(fp)
   10fd8:	d0a00a17 	ldw	r2,-32728(gp)
   10fdc:	1007883a 	mov	r3,r2
   10fe0:	e0bffe17 	ldw	r2,-8(fp)
   10fe4:	18bfdf2e 	bgeu	r3,r2,10f64 <__alt_data_end+0xff010f64>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10fe8:	0005883a 	mov	r2,zero
}
   10fec:	e037883a 	mov	sp,fp
   10ff0:	df000017 	ldw	fp,0(sp)
   10ff4:	dec00104 	addi	sp,sp,4
   10ff8:	f800283a 	ret

00010ffc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10ffc:	defff604 	addi	sp,sp,-40
   11000:	dfc00915 	stw	ra,36(sp)
   11004:	df000815 	stw	fp,32(sp)
   11008:	df000804 	addi	fp,sp,32
   1100c:	e13ffd15 	stw	r4,-12(fp)
   11010:	e17ffe15 	stw	r5,-8(fp)
   11014:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11018:	00bfffc4 	movi	r2,-1
   1101c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11020:	00bffb44 	movi	r2,-19
   11024:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11028:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1102c:	d1600804 	addi	r5,gp,-32736
   11030:	e13ffd17 	ldw	r4,-12(fp)
   11034:	00113180 	call	11318 <alt_find_dev>
   11038:	e0bff815 	stw	r2,-32(fp)
   1103c:	e0bff817 	ldw	r2,-32(fp)
   11040:	1000051e 	bne	r2,zero,11058 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11044:	e13ffd17 	ldw	r4,-12(fp)
   11048:	00113a80 	call	113a8 <alt_find_file>
   1104c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11050:	00800044 	movi	r2,1
   11054:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11058:	e0bff817 	ldw	r2,-32(fp)
   1105c:	10002926 	beq	r2,zero,11104 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11060:	e13ff817 	ldw	r4,-32(fp)
   11064:	00114b00 	call	114b0 <alt_get_fd>
   11068:	e0bff915 	stw	r2,-28(fp)
   1106c:	e0bff917 	ldw	r2,-28(fp)
   11070:	1000030e 	bge	r2,zero,11080 <open+0x84>
    {
      status = index;
   11074:	e0bff917 	ldw	r2,-28(fp)
   11078:	e0bffa15 	stw	r2,-24(fp)
   1107c:	00002306 	br	1110c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   11080:	e0bff917 	ldw	r2,-28(fp)
   11084:	10c00324 	muli	r3,r2,12
   11088:	00800074 	movhi	r2,1
   1108c:	108b5304 	addi	r2,r2,11596
   11090:	1885883a 	add	r2,r3,r2
   11094:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11098:	e0fffe17 	ldw	r3,-8(fp)
   1109c:	00900034 	movhi	r2,16384
   110a0:	10bfffc4 	addi	r2,r2,-1
   110a4:	1886703a 	and	r3,r3,r2
   110a8:	e0bffc17 	ldw	r2,-16(fp)
   110ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   110b0:	e0bffb17 	ldw	r2,-20(fp)
   110b4:	1000051e 	bne	r2,zero,110cc <open+0xd0>
   110b8:	e13ffc17 	ldw	r4,-16(fp)
   110bc:	0010f380 	call	10f38 <alt_file_locked>
   110c0:	e0bffa15 	stw	r2,-24(fp)
   110c4:	e0bffa17 	ldw	r2,-24(fp)
   110c8:	10001016 	blt	r2,zero,1110c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   110cc:	e0bff817 	ldw	r2,-32(fp)
   110d0:	10800317 	ldw	r2,12(r2)
   110d4:	10000826 	beq	r2,zero,110f8 <open+0xfc>
   110d8:	e0bff817 	ldw	r2,-32(fp)
   110dc:	10800317 	ldw	r2,12(r2)
   110e0:	e1ffff17 	ldw	r7,-4(fp)
   110e4:	e1bffe17 	ldw	r6,-8(fp)
   110e8:	e17ffd17 	ldw	r5,-12(fp)
   110ec:	e13ffc17 	ldw	r4,-16(fp)
   110f0:	103ee83a 	callr	r2
   110f4:	00000106 	br	110fc <open+0x100>
   110f8:	0005883a 	mov	r2,zero
   110fc:	e0bffa15 	stw	r2,-24(fp)
   11100:	00000206 	br	1110c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11104:	00bffb44 	movi	r2,-19
   11108:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1110c:	e0bffa17 	ldw	r2,-24(fp)
   11110:	1000090e 	bge	r2,zero,11138 <open+0x13c>
  {
    alt_release_fd (index);  
   11114:	e13ff917 	ldw	r4,-28(fp)
   11118:	000f5b80 	call	f5b8 <alt_release_fd>
    ALT_ERRNO = -status;
   1111c:	0010efc0 	call	10efc <alt_get_errno>
   11120:	1007883a 	mov	r3,r2
   11124:	e0bffa17 	ldw	r2,-24(fp)
   11128:	0085c83a 	sub	r2,zero,r2
   1112c:	18800015 	stw	r2,0(r3)
    return -1;
   11130:	00bfffc4 	movi	r2,-1
   11134:	00000106 	br	1113c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11138:	e0bff917 	ldw	r2,-28(fp)
}
   1113c:	e037883a 	mov	sp,fp
   11140:	dfc00117 	ldw	ra,4(sp)
   11144:	df000017 	ldw	fp,0(sp)
   11148:	dec00204 	addi	sp,sp,8
   1114c:	f800283a 	ret

00011150 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11150:	defffa04 	addi	sp,sp,-24
   11154:	df000515 	stw	fp,20(sp)
   11158:	df000504 	addi	fp,sp,20
   1115c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11160:	0005303a 	rdctl	r2,status
   11164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11168:	e0fffc17 	ldw	r3,-16(fp)
   1116c:	00bfff84 	movi	r2,-2
   11170:	1884703a 	and	r2,r3,r2
   11174:	1001703a 	wrctl	status,r2
  
  return context;
   11178:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1117c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11180:	e0bfff17 	ldw	r2,-4(fp)
   11184:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11188:	e0bffd17 	ldw	r2,-12(fp)
   1118c:	10800017 	ldw	r2,0(r2)
   11190:	e0fffd17 	ldw	r3,-12(fp)
   11194:	18c00117 	ldw	r3,4(r3)
   11198:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1119c:	e0bffd17 	ldw	r2,-12(fp)
   111a0:	10800117 	ldw	r2,4(r2)
   111a4:	e0fffd17 	ldw	r3,-12(fp)
   111a8:	18c00017 	ldw	r3,0(r3)
   111ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   111b0:	e0bffd17 	ldw	r2,-12(fp)
   111b4:	e0fffd17 	ldw	r3,-12(fp)
   111b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	e0fffd17 	ldw	r3,-12(fp)
   111c4:	10c00015 	stw	r3,0(r2)
   111c8:	e0bffb17 	ldw	r2,-20(fp)
   111cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111d0:	e0bffe17 	ldw	r2,-8(fp)
   111d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   111d8:	0001883a 	nop
   111dc:	e037883a 	mov	sp,fp
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00104 	addi	sp,sp,4
   111e8:	f800283a 	ret

000111ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   111ec:	defffb04 	addi	sp,sp,-20
   111f0:	dfc00415 	stw	ra,16(sp)
   111f4:	df000315 	stw	fp,12(sp)
   111f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   111fc:	d0a00e17 	ldw	r2,-32712(gp)
   11200:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11204:	d0a73217 	ldw	r2,-25400(gp)
   11208:	10800044 	addi	r2,r2,1
   1120c:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11210:	00002e06 	br	112cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11214:	e0bffd17 	ldw	r2,-12(fp)
   11218:	10800017 	ldw	r2,0(r2)
   1121c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11220:	e0bffd17 	ldw	r2,-12(fp)
   11224:	10800403 	ldbu	r2,16(r2)
   11228:	10803fcc 	andi	r2,r2,255
   1122c:	10000426 	beq	r2,zero,11240 <alt_tick+0x54>
   11230:	d0a73217 	ldw	r2,-25400(gp)
   11234:	1000021e 	bne	r2,zero,11240 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11238:	e0bffd17 	ldw	r2,-12(fp)
   1123c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11240:	e0bffd17 	ldw	r2,-12(fp)
   11244:	10800217 	ldw	r2,8(r2)
   11248:	d0e73217 	ldw	r3,-25400(gp)
   1124c:	18801d36 	bltu	r3,r2,112c4 <alt_tick+0xd8>
   11250:	e0bffd17 	ldw	r2,-12(fp)
   11254:	10800403 	ldbu	r2,16(r2)
   11258:	10803fcc 	andi	r2,r2,255
   1125c:	1000191e 	bne	r2,zero,112c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11260:	e0bffd17 	ldw	r2,-12(fp)
   11264:	10800317 	ldw	r2,12(r2)
   11268:	e0fffd17 	ldw	r3,-12(fp)
   1126c:	18c00517 	ldw	r3,20(r3)
   11270:	1809883a 	mov	r4,r3
   11274:	103ee83a 	callr	r2
   11278:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1127c:	e0bfff17 	ldw	r2,-4(fp)
   11280:	1000031e 	bne	r2,zero,11290 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11284:	e13ffd17 	ldw	r4,-12(fp)
   11288:	00111500 	call	11150 <alt_alarm_stop>
   1128c:	00000d06 	br	112c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11290:	e0bffd17 	ldw	r2,-12(fp)
   11294:	10c00217 	ldw	r3,8(r2)
   11298:	e0bfff17 	ldw	r2,-4(fp)
   1129c:	1887883a 	add	r3,r3,r2
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   112a8:	e0bffd17 	ldw	r2,-12(fp)
   112ac:	10c00217 	ldw	r3,8(r2)
   112b0:	d0a73217 	ldw	r2,-25400(gp)
   112b4:	1880032e 	bgeu	r3,r2,112c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   112b8:	e0bffd17 	ldw	r2,-12(fp)
   112bc:	00c00044 	movi	r3,1
   112c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   112c4:	e0bffe17 	ldw	r2,-8(fp)
   112c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   112cc:	e0fffd17 	ldw	r3,-12(fp)
   112d0:	d0a00e04 	addi	r2,gp,-32712
   112d4:	18bfcf1e 	bne	r3,r2,11214 <__alt_data_end+0xff011214>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   112d8:	0001883a 	nop
}
   112dc:	0001883a 	nop
   112e0:	e037883a 	mov	sp,fp
   112e4:	dfc00117 	ldw	ra,4(sp)
   112e8:	df000017 	ldw	fp,0(sp)
   112ec:	dec00204 	addi	sp,sp,8
   112f0:	f800283a 	ret

000112f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   112f4:	deffff04 	addi	sp,sp,-4
   112f8:	df000015 	stw	fp,0(sp)
   112fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11300:	000170fa 	wrctl	ienable,zero
}
   11304:	0001883a 	nop
   11308:	e037883a 	mov	sp,fp
   1130c:	df000017 	ldw	fp,0(sp)
   11310:	dec00104 	addi	sp,sp,4
   11314:	f800283a 	ret

00011318 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11318:	defffa04 	addi	sp,sp,-24
   1131c:	dfc00515 	stw	ra,20(sp)
   11320:	df000415 	stw	fp,16(sp)
   11324:	df000404 	addi	fp,sp,16
   11328:	e13ffe15 	stw	r4,-8(fp)
   1132c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	10800017 	ldw	r2,0(r2)
   11338:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1133c:	e13ffe17 	ldw	r4,-8(fp)
   11340:	0003ae40 	call	3ae4 <strlen>
   11344:	10800044 	addi	r2,r2,1
   11348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1134c:	00000d06 	br	11384 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11350:	e0bffc17 	ldw	r2,-16(fp)
   11354:	10800217 	ldw	r2,8(r2)
   11358:	e0fffd17 	ldw	r3,-12(fp)
   1135c:	180d883a 	mov	r6,r3
   11360:	e17ffe17 	ldw	r5,-8(fp)
   11364:	1009883a 	mov	r4,r2
   11368:	001187c0 	call	1187c <memcmp>
   1136c:	1000021e 	bne	r2,zero,11378 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11370:	e0bffc17 	ldw	r2,-16(fp)
   11374:	00000706 	br	11394 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11378:	e0bffc17 	ldw	r2,-16(fp)
   1137c:	10800017 	ldw	r2,0(r2)
   11380:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11384:	e0fffc17 	ldw	r3,-16(fp)
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	18bff01e 	bne	r3,r2,11350 <__alt_data_end+0xff011350>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11390:	0005883a 	mov	r2,zero
}
   11394:	e037883a 	mov	sp,fp
   11398:	dfc00117 	ldw	ra,4(sp)
   1139c:	df000017 	ldw	fp,0(sp)
   113a0:	dec00204 	addi	sp,sp,8
   113a4:	f800283a 	ret

000113a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   113a8:	defffb04 	addi	sp,sp,-20
   113ac:	dfc00415 	stw	ra,16(sp)
   113b0:	df000315 	stw	fp,12(sp)
   113b4:	df000304 	addi	fp,sp,12
   113b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   113bc:	d0a00617 	ldw	r2,-32744(gp)
   113c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   113c4:	00003106 	br	1148c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   113c8:	e0bffd17 	ldw	r2,-12(fp)
   113cc:	10800217 	ldw	r2,8(r2)
   113d0:	1009883a 	mov	r4,r2
   113d4:	0003ae40 	call	3ae4 <strlen>
   113d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   113dc:	e0bffd17 	ldw	r2,-12(fp)
   113e0:	10c00217 	ldw	r3,8(r2)
   113e4:	e0bffe17 	ldw	r2,-8(fp)
   113e8:	10bfffc4 	addi	r2,r2,-1
   113ec:	1885883a 	add	r2,r3,r2
   113f0:	10800003 	ldbu	r2,0(r2)
   113f4:	10803fcc 	andi	r2,r2,255
   113f8:	1080201c 	xori	r2,r2,128
   113fc:	10bfe004 	addi	r2,r2,-128
   11400:	10800bd8 	cmpnei	r2,r2,47
   11404:	1000031e 	bne	r2,zero,11414 <alt_find_file+0x6c>
    {
      len -= 1;
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	10bfffc4 	addi	r2,r2,-1
   11410:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11414:	e0bffe17 	ldw	r2,-8(fp)
   11418:	e0ffff17 	ldw	r3,-4(fp)
   1141c:	1885883a 	add	r2,r3,r2
   11420:	10800003 	ldbu	r2,0(r2)
   11424:	10803fcc 	andi	r2,r2,255
   11428:	1080201c 	xori	r2,r2,128
   1142c:	10bfe004 	addi	r2,r2,-128
   11430:	10800be0 	cmpeqi	r2,r2,47
   11434:	1000081e 	bne	r2,zero,11458 <alt_find_file+0xb0>
   11438:	e0bffe17 	ldw	r2,-8(fp)
   1143c:	e0ffff17 	ldw	r3,-4(fp)
   11440:	1885883a 	add	r2,r3,r2
   11444:	10800003 	ldbu	r2,0(r2)
   11448:	10803fcc 	andi	r2,r2,255
   1144c:	1080201c 	xori	r2,r2,128
   11450:	10bfe004 	addi	r2,r2,-128
   11454:	10000a1e 	bne	r2,zero,11480 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11458:	e0bffd17 	ldw	r2,-12(fp)
   1145c:	10800217 	ldw	r2,8(r2)
   11460:	e0fffe17 	ldw	r3,-8(fp)
   11464:	180d883a 	mov	r6,r3
   11468:	e17fff17 	ldw	r5,-4(fp)
   1146c:	1009883a 	mov	r4,r2
   11470:	001187c0 	call	1187c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11474:	1000021e 	bne	r2,zero,11480 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11478:	e0bffd17 	ldw	r2,-12(fp)
   1147c:	00000706 	br	1149c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11480:	e0bffd17 	ldw	r2,-12(fp)
   11484:	10800017 	ldw	r2,0(r2)
   11488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1148c:	e0fffd17 	ldw	r3,-12(fp)
   11490:	d0a00604 	addi	r2,gp,-32744
   11494:	18bfcc1e 	bne	r3,r2,113c8 <__alt_data_end+0xff0113c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11498:	0005883a 	mov	r2,zero
}
   1149c:	e037883a 	mov	sp,fp
   114a0:	dfc00117 	ldw	ra,4(sp)
   114a4:	df000017 	ldw	fp,0(sp)
   114a8:	dec00204 	addi	sp,sp,8
   114ac:	f800283a 	ret

000114b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   114b0:	defffc04 	addi	sp,sp,-16
   114b4:	df000315 	stw	fp,12(sp)
   114b8:	df000304 	addi	fp,sp,12
   114bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   114c0:	00bffa04 	movi	r2,-24
   114c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   114c8:	e03ffd15 	stw	zero,-12(fp)
   114cc:	00001906 	br	11534 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   114d0:	00800074 	movhi	r2,1
   114d4:	108b5304 	addi	r2,r2,11596
   114d8:	e0fffd17 	ldw	r3,-12(fp)
   114dc:	18c00324 	muli	r3,r3,12
   114e0:	10c5883a 	add	r2,r2,r3
   114e4:	10800017 	ldw	r2,0(r2)
   114e8:	10000f1e 	bne	r2,zero,11528 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   114ec:	00800074 	movhi	r2,1
   114f0:	108b5304 	addi	r2,r2,11596
   114f4:	e0fffd17 	ldw	r3,-12(fp)
   114f8:	18c00324 	muli	r3,r3,12
   114fc:	10c5883a 	add	r2,r2,r3
   11500:	e0ffff17 	ldw	r3,-4(fp)
   11504:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11508:	d0e00a17 	ldw	r3,-32728(gp)
   1150c:	e0bffd17 	ldw	r2,-12(fp)
   11510:	1880020e 	bge	r3,r2,1151c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11524:	00000606 	br	11540 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11528:	e0bffd17 	ldw	r2,-12(fp)
   1152c:	10800044 	addi	r2,r2,1
   11530:	e0bffd15 	stw	r2,-12(fp)
   11534:	e0bffd17 	ldw	r2,-12(fp)
   11538:	10800810 	cmplti	r2,r2,32
   1153c:	103fe41e 	bne	r2,zero,114d0 <__alt_data_end+0xff0114d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11540:	e0bffe17 	ldw	r2,-8(fp)
}
   11544:	e037883a 	mov	sp,fp
   11548:	df000017 	ldw	fp,0(sp)
   1154c:	dec00104 	addi	sp,sp,4
   11550:	f800283a 	ret

00011554 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11554:	defffb04 	addi	sp,sp,-20
   11558:	df000415 	stw	fp,16(sp)
   1155c:	df000404 	addi	fp,sp,16
   11560:	e13ffe15 	stw	r4,-8(fp)
   11564:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	10840070 	cmpltui	r2,r2,4097
   11570:	1000021e 	bne	r2,zero,1157c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11574:	00840004 	movi	r2,4096
   11578:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1157c:	e0fffe17 	ldw	r3,-8(fp)
   11580:	e0bfff17 	ldw	r2,-4(fp)
   11584:	1885883a 	add	r2,r3,r2
   11588:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1158c:	e0bffe17 	ldw	r2,-8(fp)
   11590:	e0bffc15 	stw	r2,-16(fp)
   11594:	00000506 	br	115ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11598:	e0bffc17 	ldw	r2,-16(fp)
   1159c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	10800804 	addi	r2,r2,32
   115a8:	e0bffc15 	stw	r2,-16(fp)
   115ac:	e0fffc17 	ldw	r3,-16(fp)
   115b0:	e0bffd17 	ldw	r2,-12(fp)
   115b4:	18bff836 	bltu	r3,r2,11598 <__alt_data_end+0xff011598>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   115b8:	e0bffe17 	ldw	r2,-8(fp)
   115bc:	108007cc 	andi	r2,r2,31
   115c0:	10000226 	beq	r2,zero,115cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   115c4:	e0bffc17 	ldw	r2,-16(fp)
   115c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   115cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   115d0:	0001883a 	nop
   115d4:	e037883a 	mov	sp,fp
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00104 	addi	sp,sp,4
   115e0:	f800283a 	ret

000115e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   115e4:	defffe04 	addi	sp,sp,-8
   115e8:	df000115 	stw	fp,4(sp)
   115ec:	df000104 	addi	fp,sp,4
   115f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   115f4:	e0bfff17 	ldw	r2,-4(fp)
   115f8:	10bffe84 	addi	r2,r2,-6
   115fc:	10c00428 	cmpgeui	r3,r2,16
   11600:	18001a1e 	bne	r3,zero,1166c <alt_exception_cause_generated_bad_addr+0x88>
   11604:	100690ba 	slli	r3,r2,2
   11608:	00800074 	movhi	r2,1
   1160c:	10858704 	addi	r2,r2,5660
   11610:	1885883a 	add	r2,r3,r2
   11614:	10800017 	ldw	r2,0(r2)
   11618:	1000683a 	jmp	r2
   1161c:	0001165c 	xori	zero,zero,1113
   11620:	0001165c 	xori	zero,zero,1113
   11624:	0001166c 	andhi	zero,zero,1113
   11628:	0001166c 	andhi	zero,zero,1113
   1162c:	0001166c 	andhi	zero,zero,1113
   11630:	0001165c 	xori	zero,zero,1113
   11634:	00011664 	muli	zero,zero,1113
   11638:	0001166c 	andhi	zero,zero,1113
   1163c:	0001165c 	xori	zero,zero,1113
   11640:	0001165c 	xori	zero,zero,1113
   11644:	0001166c 	andhi	zero,zero,1113
   11648:	0001165c 	xori	zero,zero,1113
   1164c:	00011664 	muli	zero,zero,1113
   11650:	0001166c 	andhi	zero,zero,1113
   11654:	0001166c 	andhi	zero,zero,1113
   11658:	0001165c 	xori	zero,zero,1113
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1165c:	00800044 	movi	r2,1
   11660:	00000306 	br	11670 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11664:	0005883a 	mov	r2,zero
   11668:	00000106 	br	11670 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1166c:	0005883a 	mov	r2,zero
  }
}
   11670:	e037883a 	mov	sp,fp
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00104 	addi	sp,sp,4
   1167c:	f800283a 	ret

00011680 <atexit>:
   11680:	200b883a 	mov	r5,r4
   11684:	000f883a 	mov	r7,zero
   11688:	000d883a 	mov	r6,zero
   1168c:	0009883a 	mov	r4,zero
   11690:	00118f81 	jmpi	118f8 <__register_exitproc>

00011694 <exit>:
   11694:	defffe04 	addi	sp,sp,-8
   11698:	000b883a 	mov	r5,zero
   1169c:	dc000015 	stw	r16,0(sp)
   116a0:	dfc00115 	stw	ra,4(sp)
   116a4:	2021883a 	mov	r16,r4
   116a8:	0011a100 	call	11a10 <__call_exitprocs>
   116ac:	00800074 	movhi	r2,1
   116b0:	108fcd04 	addi	r2,r2,16180
   116b4:	11000017 	ldw	r4,0(r2)
   116b8:	20800f17 	ldw	r2,60(r4)
   116bc:	10000126 	beq	r2,zero,116c4 <exit+0x30>
   116c0:	103ee83a 	callr	r2
   116c4:	8009883a 	mov	r4,r16
   116c8:	0011b900 	call	11b90 <_exit>

000116cc <memalign>:
   116cc:	00800074 	movhi	r2,1
   116d0:	108fce04 	addi	r2,r2,16184
   116d4:	280d883a 	mov	r6,r5
   116d8:	200b883a 	mov	r5,r4
   116dc:	11000017 	ldw	r4,0(r2)
   116e0:	00116e41 	jmpi	116e4 <_memalign_r>

000116e4 <_memalign_r>:
   116e4:	00800204 	movi	r2,8
   116e8:	1140532e 	bgeu	r2,r5,11838 <_memalign_r+0x154>
   116ec:	defffa04 	addi	sp,sp,-24
   116f0:	dd000415 	stw	r20,16(sp)
   116f4:	dc400115 	stw	r17,4(sp)
   116f8:	dfc00515 	stw	ra,20(sp)
   116fc:	dcc00315 	stw	r19,12(sp)
   11700:	dc800215 	stw	r18,8(sp)
   11704:	dc000015 	stw	r16,0(sp)
   11708:	008003c4 	movi	r2,15
   1170c:	2823883a 	mov	r17,r5
   11710:	2029883a 	mov	r20,r4
   11714:	11400136 	bltu	r2,r5,1171c <_memalign_r+0x38>
   11718:	04400404 	movi	r17,16
   1171c:	308002c4 	addi	r2,r6,11
   11720:	00c00584 	movi	r3,22
   11724:	18803e2e 	bgeu	r3,r2,11820 <_memalign_r+0x13c>
   11728:	04bffe04 	movi	r18,-8
   1172c:	14a4703a 	and	r18,r2,r18
   11730:	90003d16 	blt	r18,zero,11828 <_memalign_r+0x144>
   11734:	91803c36 	bltu	r18,r6,11828 <_memalign_r+0x144>
   11738:	89400404 	addi	r5,r17,16
   1173c:	2c8b883a 	add	r5,r5,r18
   11740:	a009883a 	mov	r4,r20
   11744:	00031440 	call	3144 <_malloc_r>
   11748:	1027883a 	mov	r19,r2
   1174c:	10004926 	beq	r2,zero,11874 <_memalign_r+0x190>
   11750:	a009883a 	mov	r4,r20
   11754:	000f4380 	call	f438 <__malloc_lock>
   11758:	880b883a 	mov	r5,r17
   1175c:	9809883a 	mov	r4,r19
   11760:	9c3ffe04 	addi	r16,r19,-8
   11764:	00026d00 	call	26d0 <__umodsi3>
   11768:	10001c26 	beq	r2,zero,117dc <_memalign_r+0xf8>
   1176c:	88bfffc4 	addi	r2,r17,-1
   11770:	9887883a 	add	r3,r19,r2
   11774:	0445c83a 	sub	r2,zero,r17
   11778:	1884703a 	and	r2,r3,r2
   1177c:	10bffe04 	addi	r2,r2,-8
   11780:	1409c83a 	sub	r4,r2,r16
   11784:	014003c4 	movi	r5,15
   11788:	8007883a 	mov	r3,r16
   1178c:	29002c0e 	bge	r5,r4,11840 <_memalign_r+0x15c>
   11790:	1021883a 	mov	r16,r2
   11794:	993fff17 	ldw	r4,-4(r19)
   11798:	00bfff04 	movi	r2,-4
   1179c:	80c7c83a 	sub	r3,r16,r3
   117a0:	2084703a 	and	r2,r4,r2
   117a4:	10c5c83a 	sub	r2,r2,r3
   117a8:	11000054 	ori	r4,r2,1
   117ac:	81000115 	stw	r4,4(r16)
   117b0:	8085883a 	add	r2,r16,r2
   117b4:	11800117 	ldw	r6,4(r2)
   117b8:	980b883a 	mov	r5,r19
   117bc:	a009883a 	mov	r4,r20
   117c0:	31800054 	ori	r6,r6,1
   117c4:	11800115 	stw	r6,4(r2)
   117c8:	98bfff17 	ldw	r2,-4(r19)
   117cc:	1080004c 	andi	r2,r2,1
   117d0:	10c6b03a 	or	r3,r2,r3
   117d4:	98ffff15 	stw	r3,-4(r19)
   117d8:	0007f940 	call	7f94 <_free_r>
   117dc:	80c00117 	ldw	r3,4(r16)
   117e0:	00bfff04 	movi	r2,-4
   117e4:	1884703a 	and	r2,r3,r2
   117e8:	1485c83a 	sub	r2,r2,r18
   117ec:	00c003c4 	movi	r3,15
   117f0:	18801516 	blt	r3,r2,11848 <_memalign_r+0x164>
   117f4:	a009883a 	mov	r4,r20
   117f8:	000f45c0 	call	f45c <__malloc_unlock>
   117fc:	80800204 	addi	r2,r16,8
   11800:	dfc00517 	ldw	ra,20(sp)
   11804:	dd000417 	ldw	r20,16(sp)
   11808:	dcc00317 	ldw	r19,12(sp)
   1180c:	dc800217 	ldw	r18,8(sp)
   11810:	dc400117 	ldw	r17,4(sp)
   11814:	dc000017 	ldw	r16,0(sp)
   11818:	dec00604 	addi	sp,sp,24
   1181c:	f800283a 	ret
   11820:	04800404 	movi	r18,16
   11824:	91bfc42e 	bgeu	r18,r6,11738 <__alt_data_end+0xff011738>
   11828:	00800304 	movi	r2,12
   1182c:	a0800015 	stw	r2,0(r20)
   11830:	0005883a 	mov	r2,zero
   11834:	003ff206 	br	11800 <__alt_data_end+0xff011800>
   11838:	300b883a 	mov	r5,r6
   1183c:	00031441 	jmpi	3144 <_malloc_r>
   11840:	1461883a 	add	r16,r2,r17
   11844:	003fd306 	br	11794 <__alt_data_end+0xff011794>
   11848:	848b883a 	add	r5,r16,r18
   1184c:	10800054 	ori	r2,r2,1
   11850:	28800115 	stw	r2,4(r5)
   11854:	80800117 	ldw	r2,4(r16)
   11858:	29400204 	addi	r5,r5,8
   1185c:	a009883a 	mov	r4,r20
   11860:	1080004c 	andi	r2,r2,1
   11864:	14a4b03a 	or	r18,r2,r18
   11868:	84800115 	stw	r18,4(r16)
   1186c:	0007f940 	call	7f94 <_free_r>
   11870:	003fe006 	br	117f4 <__alt_data_end+0xff0117f4>
   11874:	0005883a 	mov	r2,zero
   11878:	003fe106 	br	11800 <__alt_data_end+0xff011800>

0001187c <memcmp>:
   1187c:	01c000c4 	movi	r7,3
   11880:	3980192e 	bgeu	r7,r6,118e8 <memcmp+0x6c>
   11884:	2144b03a 	or	r2,r4,r5
   11888:	11c4703a 	and	r2,r2,r7
   1188c:	10000f26 	beq	r2,zero,118cc <memcmp+0x50>
   11890:	20800003 	ldbu	r2,0(r4)
   11894:	28c00003 	ldbu	r3,0(r5)
   11898:	10c0151e 	bne	r2,r3,118f0 <memcmp+0x74>
   1189c:	31bfff84 	addi	r6,r6,-2
   118a0:	01ffffc4 	movi	r7,-1
   118a4:	00000406 	br	118b8 <memcmp+0x3c>
   118a8:	20800003 	ldbu	r2,0(r4)
   118ac:	28c00003 	ldbu	r3,0(r5)
   118b0:	31bfffc4 	addi	r6,r6,-1
   118b4:	10c00e1e 	bne	r2,r3,118f0 <memcmp+0x74>
   118b8:	21000044 	addi	r4,r4,1
   118bc:	29400044 	addi	r5,r5,1
   118c0:	31fff91e 	bne	r6,r7,118a8 <__alt_data_end+0xff0118a8>
   118c4:	0005883a 	mov	r2,zero
   118c8:	f800283a 	ret
   118cc:	20c00017 	ldw	r3,0(r4)
   118d0:	28800017 	ldw	r2,0(r5)
   118d4:	18bfee1e 	bne	r3,r2,11890 <__alt_data_end+0xff011890>
   118d8:	31bfff04 	addi	r6,r6,-4
   118dc:	21000104 	addi	r4,r4,4
   118e0:	29400104 	addi	r5,r5,4
   118e4:	39bff936 	bltu	r7,r6,118cc <__alt_data_end+0xff0118cc>
   118e8:	303fe91e 	bne	r6,zero,11890 <__alt_data_end+0xff011890>
   118ec:	003ff506 	br	118c4 <__alt_data_end+0xff0118c4>
   118f0:	10c5c83a 	sub	r2,r2,r3
   118f4:	f800283a 	ret

000118f8 <__register_exitproc>:
   118f8:	defffa04 	addi	sp,sp,-24
   118fc:	dc000315 	stw	r16,12(sp)
   11900:	04000074 	movhi	r16,1
   11904:	840fcd04 	addi	r16,r16,16180
   11908:	80c00017 	ldw	r3,0(r16)
   1190c:	dc400415 	stw	r17,16(sp)
   11910:	dfc00515 	stw	ra,20(sp)
   11914:	18805217 	ldw	r2,328(r3)
   11918:	2023883a 	mov	r17,r4
   1191c:	10003726 	beq	r2,zero,119fc <__register_exitproc+0x104>
   11920:	10c00117 	ldw	r3,4(r2)
   11924:	010007c4 	movi	r4,31
   11928:	20c00e16 	blt	r4,r3,11964 <__register_exitproc+0x6c>
   1192c:	1a000044 	addi	r8,r3,1
   11930:	8800221e 	bne	r17,zero,119bc <__register_exitproc+0xc4>
   11934:	18c00084 	addi	r3,r3,2
   11938:	18c7883a 	add	r3,r3,r3
   1193c:	18c7883a 	add	r3,r3,r3
   11940:	12000115 	stw	r8,4(r2)
   11944:	10c7883a 	add	r3,r2,r3
   11948:	19400015 	stw	r5,0(r3)
   1194c:	0005883a 	mov	r2,zero
   11950:	dfc00517 	ldw	ra,20(sp)
   11954:	dc400417 	ldw	r17,16(sp)
   11958:	dc000317 	ldw	r16,12(sp)
   1195c:	dec00604 	addi	sp,sp,24
   11960:	f800283a 	ret
   11964:	00800034 	movhi	r2,0
   11968:	108c4704 	addi	r2,r2,12572
   1196c:	10002626 	beq	r2,zero,11a08 <__register_exitproc+0x110>
   11970:	01006404 	movi	r4,400
   11974:	d9400015 	stw	r5,0(sp)
   11978:	d9800115 	stw	r6,4(sp)
   1197c:	d9c00215 	stw	r7,8(sp)
   11980:	000311c0 	call	311c <malloc>
   11984:	d9400017 	ldw	r5,0(sp)
   11988:	d9800117 	ldw	r6,4(sp)
   1198c:	d9c00217 	ldw	r7,8(sp)
   11990:	10001d26 	beq	r2,zero,11a08 <__register_exitproc+0x110>
   11994:	81000017 	ldw	r4,0(r16)
   11998:	10000115 	stw	zero,4(r2)
   1199c:	02000044 	movi	r8,1
   119a0:	22405217 	ldw	r9,328(r4)
   119a4:	0007883a 	mov	r3,zero
   119a8:	12400015 	stw	r9,0(r2)
   119ac:	20805215 	stw	r2,328(r4)
   119b0:	10006215 	stw	zero,392(r2)
   119b4:	10006315 	stw	zero,396(r2)
   119b8:	883fde26 	beq	r17,zero,11934 <__alt_data_end+0xff011934>
   119bc:	18c9883a 	add	r4,r3,r3
   119c0:	2109883a 	add	r4,r4,r4
   119c4:	1109883a 	add	r4,r2,r4
   119c8:	21802215 	stw	r6,136(r4)
   119cc:	01800044 	movi	r6,1
   119d0:	12406217 	ldw	r9,392(r2)
   119d4:	30cc983a 	sll	r6,r6,r3
   119d8:	4992b03a 	or	r9,r9,r6
   119dc:	12406215 	stw	r9,392(r2)
   119e0:	21c04215 	stw	r7,264(r4)
   119e4:	01000084 	movi	r4,2
   119e8:	893fd21e 	bne	r17,r4,11934 <__alt_data_end+0xff011934>
   119ec:	11006317 	ldw	r4,396(r2)
   119f0:	218cb03a 	or	r6,r4,r6
   119f4:	11806315 	stw	r6,396(r2)
   119f8:	003fce06 	br	11934 <__alt_data_end+0xff011934>
   119fc:	18805304 	addi	r2,r3,332
   11a00:	18805215 	stw	r2,328(r3)
   11a04:	003fc606 	br	11920 <__alt_data_end+0xff011920>
   11a08:	00bfffc4 	movi	r2,-1
   11a0c:	003fd006 	br	11950 <__alt_data_end+0xff011950>

00011a10 <__call_exitprocs>:
   11a10:	defff504 	addi	sp,sp,-44
   11a14:	df000915 	stw	fp,36(sp)
   11a18:	dd400615 	stw	r21,24(sp)
   11a1c:	dc800315 	stw	r18,12(sp)
   11a20:	dfc00a15 	stw	ra,40(sp)
   11a24:	ddc00815 	stw	r23,32(sp)
   11a28:	dd800715 	stw	r22,28(sp)
   11a2c:	dd000515 	stw	r20,20(sp)
   11a30:	dcc00415 	stw	r19,16(sp)
   11a34:	dc400215 	stw	r17,8(sp)
   11a38:	dc000115 	stw	r16,4(sp)
   11a3c:	d9000015 	stw	r4,0(sp)
   11a40:	2839883a 	mov	fp,r5
   11a44:	04800044 	movi	r18,1
   11a48:	057fffc4 	movi	r21,-1
   11a4c:	00800074 	movhi	r2,1
   11a50:	108fcd04 	addi	r2,r2,16180
   11a54:	12000017 	ldw	r8,0(r2)
   11a58:	45005217 	ldw	r20,328(r8)
   11a5c:	44c05204 	addi	r19,r8,328
   11a60:	a0001c26 	beq	r20,zero,11ad4 <__call_exitprocs+0xc4>
   11a64:	a0800117 	ldw	r2,4(r20)
   11a68:	15ffffc4 	addi	r23,r2,-1
   11a6c:	b8000d16 	blt	r23,zero,11aa4 <__call_exitprocs+0x94>
   11a70:	14000044 	addi	r16,r2,1
   11a74:	8421883a 	add	r16,r16,r16
   11a78:	8421883a 	add	r16,r16,r16
   11a7c:	84402004 	addi	r17,r16,128
   11a80:	a463883a 	add	r17,r20,r17
   11a84:	a421883a 	add	r16,r20,r16
   11a88:	e0001e26 	beq	fp,zero,11b04 <__call_exitprocs+0xf4>
   11a8c:	80804017 	ldw	r2,256(r16)
   11a90:	e0801c26 	beq	fp,r2,11b04 <__call_exitprocs+0xf4>
   11a94:	bdffffc4 	addi	r23,r23,-1
   11a98:	843fff04 	addi	r16,r16,-4
   11a9c:	8c7fff04 	addi	r17,r17,-4
   11aa0:	bd7ff91e 	bne	r23,r21,11a88 <__alt_data_end+0xff011a88>
   11aa4:	00800034 	movhi	r2,0
   11aa8:	108c4c04 	addi	r2,r2,12592
   11aac:	10000926 	beq	r2,zero,11ad4 <__call_exitprocs+0xc4>
   11ab0:	a0800117 	ldw	r2,4(r20)
   11ab4:	1000301e 	bne	r2,zero,11b78 <__call_exitprocs+0x168>
   11ab8:	a0800017 	ldw	r2,0(r20)
   11abc:	10003226 	beq	r2,zero,11b88 <__call_exitprocs+0x178>
   11ac0:	a009883a 	mov	r4,r20
   11ac4:	98800015 	stw	r2,0(r19)
   11ac8:	00031300 	call	3130 <free>
   11acc:	9d000017 	ldw	r20,0(r19)
   11ad0:	a03fe41e 	bne	r20,zero,11a64 <__alt_data_end+0xff011a64>
   11ad4:	dfc00a17 	ldw	ra,40(sp)
   11ad8:	df000917 	ldw	fp,36(sp)
   11adc:	ddc00817 	ldw	r23,32(sp)
   11ae0:	dd800717 	ldw	r22,28(sp)
   11ae4:	dd400617 	ldw	r21,24(sp)
   11ae8:	dd000517 	ldw	r20,20(sp)
   11aec:	dcc00417 	ldw	r19,16(sp)
   11af0:	dc800317 	ldw	r18,12(sp)
   11af4:	dc400217 	ldw	r17,8(sp)
   11af8:	dc000117 	ldw	r16,4(sp)
   11afc:	dec00b04 	addi	sp,sp,44
   11b00:	f800283a 	ret
   11b04:	a0800117 	ldw	r2,4(r20)
   11b08:	80c00017 	ldw	r3,0(r16)
   11b0c:	10bfffc4 	addi	r2,r2,-1
   11b10:	15c01426 	beq	r2,r23,11b64 <__call_exitprocs+0x154>
   11b14:	80000015 	stw	zero,0(r16)
   11b18:	183fde26 	beq	r3,zero,11a94 <__alt_data_end+0xff011a94>
   11b1c:	95c8983a 	sll	r4,r18,r23
   11b20:	a0806217 	ldw	r2,392(r20)
   11b24:	a5800117 	ldw	r22,4(r20)
   11b28:	2084703a 	and	r2,r4,r2
   11b2c:	10000b26 	beq	r2,zero,11b5c <__call_exitprocs+0x14c>
   11b30:	a0806317 	ldw	r2,396(r20)
   11b34:	2088703a 	and	r4,r4,r2
   11b38:	20000c1e 	bne	r4,zero,11b6c <__call_exitprocs+0x15c>
   11b3c:	89400017 	ldw	r5,0(r17)
   11b40:	d9000017 	ldw	r4,0(sp)
   11b44:	183ee83a 	callr	r3
   11b48:	a0800117 	ldw	r2,4(r20)
   11b4c:	15bfbf1e 	bne	r2,r22,11a4c <__alt_data_end+0xff011a4c>
   11b50:	98800017 	ldw	r2,0(r19)
   11b54:	153fcf26 	beq	r2,r20,11a94 <__alt_data_end+0xff011a94>
   11b58:	003fbc06 	br	11a4c <__alt_data_end+0xff011a4c>
   11b5c:	183ee83a 	callr	r3
   11b60:	003ff906 	br	11b48 <__alt_data_end+0xff011b48>
   11b64:	a5c00115 	stw	r23,4(r20)
   11b68:	003feb06 	br	11b18 <__alt_data_end+0xff011b18>
   11b6c:	89000017 	ldw	r4,0(r17)
   11b70:	183ee83a 	callr	r3
   11b74:	003ff406 	br	11b48 <__alt_data_end+0xff011b48>
   11b78:	a0800017 	ldw	r2,0(r20)
   11b7c:	a027883a 	mov	r19,r20
   11b80:	1029883a 	mov	r20,r2
   11b84:	003fb606 	br	11a60 <__alt_data_end+0xff011a60>
   11b88:	0005883a 	mov	r2,zero
   11b8c:	003ffb06 	br	11b7c <__alt_data_end+0xff011b7c>

00011b90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11b90:	defffd04 	addi	sp,sp,-12
   11b94:	df000215 	stw	fp,8(sp)
   11b98:	df000204 	addi	fp,sp,8
   11b9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11ba0:	0001883a 	nop
   11ba4:	e0bfff17 	ldw	r2,-4(fp)
   11ba8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11bac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11bb0:	10000226 	beq	r2,zero,11bbc <_exit+0x2c>
    ALT_SIM_FAIL();
   11bb4:	002af070 	cmpltui	zero,zero,43969
   11bb8:	00000106 	br	11bc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11bbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11bc0:	003fff06 	br	11bc0 <__alt_data_end+0xff011bc0>
