
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011754 memsz 0x00011754 flags r-x
    LOAD off    0x00012774 vaddr 0x00011774 paddr 0x00013360 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014f4c vaddr 0x00014f4c paddr 0x00014f4c align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d74  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00010fb8  00010fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00011774  00013360  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00014f4c  00014f4c  00014f4c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000150fc  000150fc  00014360  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014360  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  00014388  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000267f1  00000000  00000000  000153d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c5d  00000000  00000000  0003bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c458  00000000  00000000  00045826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025e8  00000000  00000000  00051c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003dec  00000000  00000000  00054268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018ca4  00000000  00000000  00058054  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00070cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001968  00000000  00000000  00070d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000761be  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000761c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000761cd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000761ce  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000761cf  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000761d3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000761d7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000761db  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000761e4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000761ed  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000761f6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00076201  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00076239  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000745cd  00000000  00000000  0007bd11  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010fb8 l    d  .rodata	00000000 .rodata
00011774 l    d  .rwdata	00000000 .rwdata
00014f4c l    d  .bss	00000000 .bss
000150fc l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000115c2 l     O .rodata	00000010 zeroes.4404
00005424 l     F .text	000000bc __sbprintf
000115d2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005634 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007164 l     F .text	00000008 __fp_unlock
00007178 l     F .text	0000019c __sinit.part.1
00007314 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011c7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000120c0 l     O .rwdata	00000020 lc_ctype_charset
000120a0 l     O .rwdata	00000020 lc_message_charset
000120e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011604 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009eb0 l     F .text	000000fc __sprint_r.part.0
00011738 l     O .rodata	00000010 blanks.4348
00011728 l     O .rodata	00000010 zeroes.4349
0000b43c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e65c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e854 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e940 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eb14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013350 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ed90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000eec4 l     F .text	00000034 alt_dev_reg
000122c0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f1d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f3dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fa14 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000feec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010360 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000104a0 l     F .text	0000003c alt_get_errno
000104dc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014fd0 g     O .bss	00000004 alt_instruction_exception_handler
00009548 g     F .text	00000074 _mprec_log10
00009634 g     F .text	0000008c __any_on
0000b9d8 g     F .text	00000054 _isatty_r
00011610 g     O .rodata	00000028 __mprec_tinytens
0000ea50 g     F .text	0000007c alt_main
00003050 g     F .text	000000c0 _puts_r
00014ffc g     O .bss	00000100 alt_irq
0000ba2c g     F .text	00000060 _lseek_r
0001146c g     O .rodata	00000009 gy_array
00013360 g       *ABS*	00000000 __flash_rwdata_start
0000d188 g     F .text	00000088 .hidden __eqdf2
000150fc g       *ABS*	00000000 __alt_heap_start
00003014 g     F .text	0000003c printf
0000bc44 g     F .text	0000009c _wcrtomb_r
00009d70 g     F .text	0000005c __sseek
000074b4 g     F .text	00000010 __sinit
0000baec g     F .text	00000140 __swbuf_r
00007f7c g     F .text	0000007c _setlocale_r
0000731c g     F .text	00000068 __sfmoreglue
0000eaf0 g     F .text	00000024 __malloc_unlock
00000a10 g     F .text	00000014 LCD_Write_Command
00014f7c g     O .bss	00000004 sobel_width
00014f68 g     O .bss	00000004 start_all
00014fc0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008440 g     F .text	0000015c memmove
00000a24 g     F .text	00000014 LCD_Write_Data
0000749c g     F .text	00000018 _cleanup
00014f74 g     O .bss	00000004 end_sobel
000086c4 g     F .text	000000a8 _Balloc
0000d210 g     F .text	000000dc .hidden __gtdf2
00010898 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b97c g     F .text	0000005c _fstat_r
00014fa0 g     O .bss	00000004 errno
00009cec g     F .text	00000008 __seofread
00014fb4 g     O .bss	00000004 alt_argv
0001b320 g       *ABS*	00000000 _gp
0000ed60 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
00012140 g     O .rwdata	00000180 alt_fd_list
00001be8 g     F .text	00000010 vga_set_pointer
000108bc g     F .text	00000090 alt_find_dev
000082f8 g     F .text	00000148 memcpy
0000716c g     F .text	0000000c _cleanup_r
0000e474 g     F .text	000000dc .hidden __floatsidf
00010424 g     F .text	0000007c alt_io_redirect
00014f64 g     O .bss	00000004 end_all
0000d2ec g     F .text	000000f4 .hidden __ltdf2
00010fb8 g       *ABS*	00000000 __DTOR_END__
00003110 g     F .text	00000014 puts
00010b88 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009c24 g     F .text	00000074 __fpclassifyd
000094a4 g     F .text	000000a4 __ratio
0000b420 g     F .text	0000001c __vfiprintf_internal
0000f5d4 g     F .text	0000021c altera_avalon_jtag_uart_read
000027b0 g     F .text	00000014 malloc
00002fe4 g     F .text	00000030 _printf_r
00000864 g     F .text	00000008 get_grayscale_picture
00001d00 g     F .text	00000064 .hidden __udivsi3
00011018 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e7b0 g     F .text	000000a4 isatty
00011660 g     O .rodata	000000c8 __mprec_tens
00007ff8 g     F .text	0000000c __locale_charset
00010af8 g     F .text	00000090 alt_icache_flush
00014f9c g     O .bss	00000004 __malloc_top_pad
00013330 g     O .rwdata	00000004 __mb_cur_max
00008028 g     F .text	0000000c _localeconv_r
00001460 g     F .text	00000140 sobel_x
00008ad0 g     F .text	0000003c __i2b
00007938 g     F .text	000004bc __sfvwrite_r
00000a38 g     F .text	00000414 init_LCD
00003124 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000ba8c g     F .text	00000060 _read_r
00014f80 g     O .bss	00000004 sobel_result
00013348 g     O .rwdata	00000004 alt_max_fd
0000b670 g     F .text	000000f0 _fclose_r
00007134 g     F .text	00000030 fflush
00014f98 g     O .bss	00000004 __malloc_max_sbrked_mem
00014f54 g     O .bss	00000004 grayscale_array
0000c8dc g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
0000924c g     F .text	0000010c __b2d
0000c3a4 g     F .text	00000538 .hidden __umoddi3
0000e97c g     F .text	000000d4 lseek
0000092c g     F .text	0000008c i2c_short_read
00013328 g     O .rwdata	00000004 _global_impure_ptr
000096c0 g     F .text	00000564 _realloc_r
000150fc g       *ABS*	00000000 __bss_end
00010270 g     F .text	000000f0 alt_iic_isr_register
00010790 g     F .text	00000108 alt_tick
0000be2c g     F .text	00000578 .hidden __udivdi3
0000b8d8 g     F .text	00000024 _fputwc_r
00011638 g     O .rodata	00000028 __mprec_bigtens
000088b4 g     F .text	00000104 __s2b
000026a4 g     F .text	000000a8 .hidden __floatunsidf
00008f8c g     F .text	00000060 __mcmp
000074d4 g     F .text	00000018 __fp_lock_all
00010224 g     F .text	0000004c alt_ic_irq_enabled
00014f4c g     O .bss	00000004 grayscape_height
000106f4 g     F .text	0000009c alt_alarm_stop
00014fc4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012118 g     O .rwdata	00000028 alt_dev_null
00000ed8 g     F .text	00000078 transfer_LCD_with_dma
00001a50 g     F .text	00000188 sobel_complete
0000fea4 g     F .text	00000048 alt_dcache_flush_all
000089b8 g     F .text	00000068 __hi0bits
0000e3f4 g     F .text	00000080 .hidden __fixdfsi
00013360 g       *ABS*	00000000 __ram_rwdata_end
00013340 g     O .rwdata	00000008 alt_dev_list
0000edcc g     F .text	000000f8 write
0000fc00 g     F .text	00000020 alt_timestamp_freq
00011774 g       *ABS*	00000000 __ram_rodata_end
0000e6c4 g     F .text	000000b0 fstat
0000d2ec g     F .text	000000f4 .hidden __ledf2
00008d04 g     F .text	00000140 __pow5mult
00009fc4 g     F .text	0000145c ___vfiprintf_internal_r
00014fac g     O .bss	00000004 __nlocale_changed
00001d64 g     F .text	00000058 .hidden __umodsi3
00001bd8 g     F .text	00000008 GetSobel_rgb
000150fc g       *ABS*	00000000 end
00001be0 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001834 g     F .text	00000168 sobel_y_with_rgb
0000f110 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00010fb8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fa8c g     F .text	0000007c alt_avalon_timer_sc_init
0000274c g     F .text	00000064 .hidden __clzsi2
0000f7f0 g     F .text	00000224 altera_avalon_jtag_uart_write
000074c4 g     F .text	00000004 __sfp_lock_acquire
00008214 g     F .text	000000e4 memchr
00003210 g     F .text	000021f8 ___vfprintf_internal_r
00007628 g     F .text	00000310 _free_r
00008004 g     F .text	00000010 __locale_mb_cur_max
0000171c g     F .text	00000118 sobel_y
00011140 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010e04 g     F .text	00000180 __call_exitprocs
00014fa8 g     O .bss	00000004 __mlocale_changed
00013320 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014f6c g     O .bss	00000004 end_conv_grayscale
00014fc8 g     O .bss	00000004 _alt_tick_rate
00008e44 g     F .text	00000148 __lshift
00014fcc g     O .bss	00000004 _alt_nticks
0000eb50 g     F .text	000000fc read
0000ef30 g     F .text	0000007c alt_sys_init
000015a0 g     F .text	0000017c sobel_x_with_rgb
00010cec g     F .text	00000118 __register_exitproc
00008b0c g     F .text	000001f8 __multiply
0000f47c g     F .text	00000068 altera_avalon_jtag_uart_close
00011774 g       *ABS*	00000000 __ram_rwdata_start
00010fb8 g       *ABS*	00000000 __ram_rodata_start
00014fd4 g     O .bss	00000028 __malloc_current_mallinfo
00009358 g     F .text	0000014c __d2b
00014f84 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000efac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000012ac g     F .text	000000f8 init_sobel_arrays
00010a54 g     F .text	000000a4 alt_get_fd
0000fd4c g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b558 g     F .text	00000054 _close_r
00010c70 g     F .text	0000007c memcmp
0000f06c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000150fc g       *ABS*	00000000 __alt_stack_base
0000f0bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000054e0 g     F .text	00000154 __swsetup_r
00001dbc g     F .text	000008e8 .hidden __divdf3
00007384 g     F .text	00000118 __sfp
000095bc g     F .text	00000078 __copybits
00011874 g     O .rwdata	00000408 __malloc_av_
000074d0 g     F .text	00000004 __sinit_lock_release
0000d3e0 g     F .text	00000718 .hidden __muldf3
00009c98 g     F .text	00000054 __sread
0001094c g     F .text	00000108 alt_find_file
0000ff28 g     F .text	000000a4 alt_dev_llist_insert
0000eacc g     F .text	00000024 __malloc_lock
0000ecb0 g     F .text	000000b0 sbrk
000070d8 g     F .text	0000005c _fflush_r
0000b5ac g     F .text	000000c4 _calloc_r
00014f60 g     O .bss	00000004 start_global
00011774 g     O .rwdata	00000100 .hidden __divsi3_table
00014f4c g       *ABS*	00000000 __bss_start
0000859c g     F .text	00000128 memset
00000f50 g     F .text	0000035c main
00014fb8 g     O .bss	00000004 alt_envp
00014f94 g     O .bss	00000004 __malloc_max_total_mem
00000854 g     F .text	00000008 get_grayscale_width
0000f00c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000bc2c g     F .text	00000018 __swbuf
00014f88 g     O .bss	00000004 sobel_x_result
00009dcc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b760 g     F .text	00000014 fclose
0000fb08 g     F .text	00000078 alt_timestamp_start
00005834 g     F .text	00001688 _dtoa_r
000027d8 g     F .text	0000080c _malloc_r
0000bda0 g     F .text	00000030 __ascii_wctomb
0001334c g     O .rwdata	00000004 alt_errno
00007df4 g     F .text	000000c4 _fwalk
00014f78 g     O .bss	00000004 start_sobel
00001c08 g     F .text	00000084 .hidden __divsi3
00007504 g     F .text	00000124 _malloc_trim_r
00010fb8 g       *ABS*	00000000 __CTOR_END__
00014f50 g     O .bss	00000004 grayscale_width
00009dd4 g     F .text	000000dc strcmp
00000e4c g     F .text	0000008c transfer_LCD_no_dma
00010fb8 g       *ABS*	00000000 __flash_rodata_start
00010fb8 g       *ABS*	00000000 __DTOR_LIST__
0000d188 g     F .text	00000088 .hidden __nedf2
00011280 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eef8 g     F .text	00000038 alt_irq_init
0000ec4c g     F .text	00000064 alt_release_fd
00000884 g     F .text	000000a8 i2c_auto_detect
0001147e g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014fa4 g     O .bss	00000004 _PathLocale
0000086c g     F .text	00000018 i2c_busy_wait
00010c24 g     F .text	00000014 atexit
0000b4f8 g     F .text	00000060 _write_r
00008034 g     F .text	00000018 setlocale
0001332c g     O .rwdata	00000004 _impure_ptr
00014fb0 g     O .bss	00000004 alt_argc
00006ebc g     F .text	0000021c __sflush_r
00014fbc g     O .bss	00000004 altera_avalon_timer_ts_base
0001002c g     F .text	00000060 _do_dtors
00008020 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000091e8 g     F .text	00000064 __ulp
000074ec g     F .text	00000018 __fp_unlock_all
00013338 g     O .rwdata	00000008 alt_fs_list
00014f8c g     O .bss	00000004 sobel_y_result
000009b8 g     F .text	00000058 i2c_short_write
00014f70 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f58 g     O .bss	00000002 LCD_height
0000804c g     F .text	0000000c localeconv
0000fb80 g     F .text	00000080 alt_timestamp
00001bf8 g     F .text	00000010 vga_set_swap
000100c0 g     F .text	00000050 alt_ic_isr_register
0000199c g     F .text	000000b4 sobel_threshold
00013360 g       *ABS*	00000000 _edata
000150fc g       *ABS*	00000000 _end
0000b774 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f4e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011475 g     O .rodata	00000009 gx_array
00010198 g     F .text	0000008c alt_ic_irq_disable
00009cf4 g     F .text	0000007c __swrite
00013324 g     O .rwdata	00000004 __malloc_trim_threshold
00014f5a g     O .bss	00000002 LCD_width
00000774 g     F .text	000000e0 conv_grayscale
00008014 g     F .text	0000000c __locale_msgcharset
00010c38 g     F .text	00000038 exit
00007eb8 g     F .text	000000c4 _fwalk_reent
00008fec g     F .text	000001fc __mdiff
00001c8c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000074c8 g     F .text	00000004 __sfp_lock_release
0000085c g     F .text	00000008 get_grayscale_height
00010f84 g     F .text	00000034 _exit
000013a4 g     F .text	000000bc sobel_mac
0000fc20 g     F .text	0000012c alt_alarm_start
00008058 g     F .text	000001bc __smakebuf_r
00014f90 g     O .bss	00000004 sobel_rgb565
00003178 g     F .text	00000098 strlen
000105a0 g     F .text	00000154 open
0000d210 g     F .text	000000dc .hidden __gedf2
00013334 g     O .rwdata	00000004 __wctomb
00009fac g     F .text	00000018 __sprint_r
0001008c g     F .text	00000034 alt_icache_flush_all
00013354 g     O .rwdata	00000004 alt_priority_mask
00010110 g     F .text	00000088 alt_ic_irq_enable
00005408 g     F .text	0000001c __vfprintf_internal
0000bdd0 g     F .text	0000005c _wctomb_r
0000daf8 g     F .text	000008fc .hidden __subdf3
00008a20 g     F .text	000000b0 __lo0bits
00013358 g     O .rwdata	00000008 alt_alarm_list
0000ffcc g     F .text	00000060 _do_ctors
0000bce0 g     F .text	000000c0 wcrtomb
0000e58c g     F .text	000000d0 close
00014f5c g     O .bss	00000004 end_global
0000e8bc g     F .text	00000084 alt_load
0000b8fc g     F .text	00000080 fputwc
000027c4 g     F .text	00000014 free
000074cc g     F .text	00000004 __sinit_lock_acquire
00008794 g     F .text	00000120 __multadd
0000876c g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1093ff04 	addi	r2,r2,20476
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1093ff04 	addi	r2,r2,20476
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72c17 	ldw	r2,-25424(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72c17 	ldw	r2,-25424(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6acc814 	ori	gp,gp,45856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	1093d314 	ori	r2,r2,20300

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d43f14 	ori	r3,r3,20732

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e8bc0 	call	e8bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ea500 	call	ea50 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009b80 	call	9b8 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009b80 	call	9b8 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009b80 	call	9b8 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	8404a004 	addi	r16,r16,4736
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009b80 	call	9b8 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009b80 	call	9b8 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84045004 	addi	r16,r16,4416
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009b80 	call	9b8 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009b80 	call	9b8 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009b80 	call	9b8 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009b80 	call	9b8 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009b80 	call	9b8 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009b80 	call	9b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009b80 	call	9b8 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84040604 	addi	r16,r16,4120
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009b80 	call	9b8 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009b80 	call	9b8 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009b80 	call	9b8 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009b81 	jmpi	9b8 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2103ee04 	addi	r4,r4,4024
     620:	297fffcc 	andi	r5,r5,65535
     624:	00030140 	call	3014 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2103f604 	addi	r4,r4,4056
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00030140 	call	3014 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2103fe04 	addi	r4,r4,4088
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	00030141 	jmpi	3014 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     78c:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     790:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     794:	2821883a 	mov	r16,r5
     798:	3023883a 	mov	r17,r6
     79c:	2025883a 	mov	r18,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
		free(grayscale_array);
     7a4:	1009883a 	mov	r4,r2
     7a8:	00027c40 	call	27c4 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7ac:	8449383a 	mul	r4,r16,r17
     7b0:	00027b00 	call	27b0 <malloc>
     7b4:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     7b8:	0440200e 	bge	zero,r17,83c <conv_grayscale+0xc8>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	9009883a 	mov	r4,r18
     7c4:	8017883a 	mov	r11,r16
     7c8:	000b883a 	mov	r5,zero
		for (x = 0 ; x < width ; x++) {
     7cc:	0400170e 	bge	zero,r16,82c <conv_grayscale+0xb8>
     7d0:	5c13c83a 	sub	r9,r11,r16
     7d4:	2015883a 	mov	r10,r4
				+ (((rgb>>5)&0x3F)<<2)*92 // green part
				+ (((rgb>>0)&0x1F)<<3)*9) // blue part
				>> 7; // /128

			//gray = ALT_CI_RGB2GRAY_0(pixels[y*width+x]);
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7d8:	5080000b 	ldhu	r2,0(r10)
     7dc:	100ed17a 	srli	r7,r2,5
     7e0:	1010d2fa 	srli	r8,r2,11
     7e4:	100690fa 	slli	r3,r2,3
     7e8:	39cf883a 	add	r7,r7,r7
     7ec:	400490fa 	slli	r2,r8,3
     7f0:	39cf883a 	add	r7,r7,r7
     7f4:	39c03fcc 	andi	r7,r7,255
     7f8:	39c01724 	muli	r7,r7,92
     7fc:	108006e4 	muli	r2,r2,27
     800:	18c03fcc 	andi	r3,r3,255
     804:	18c00264 	muli	r3,r3,9
     808:	3885883a 	add	r2,r7,r2
     80c:	d1e70d17 	ldw	r7,-25548(gp)
     810:	10c5883a 	add	r2,r2,r3
     814:	1005d1fa 	srai	r2,r2,7
     818:	3a4f883a 	add	r7,r7,r9
     81c:	38800025 	stbio	r2,0(r7)
     820:	4a400044 	addi	r9,r9,1
     824:	52800084 	addi	r10,r10,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     828:	5a7feb1e 	bne	r11,r9,7d8 <__alt_data_end+0xff0007d8>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     82c:	29400044 	addi	r5,r5,1
     830:	2189883a 	add	r4,r4,r6
     834:	5c17883a 	add	r11,r11,r16
     838:	897fe41e 	bne	r17,r5,7cc <__alt_data_end+0xff0007cc>

			//gray = ALT_CI_RGB2GRAY_0(pixels[y*width+x]);
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     83c:	dfc00317 	ldw	ra,12(sp)
     840:	dc800217 	ldw	r18,8(sp)
     844:	dc400117 	ldw	r17,4(sp)
     848:	dc000017 	ldw	r16,0(sp)
     84c:	dec00404 	addi	sp,sp,16
     850:	f800283a 	ret

00000854 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     854:	d0a70c17 	ldw	r2,-25552(gp)
     858:	f800283a 	ret

0000085c <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     85c:	d0a70b17 	ldw	r2,-25556(gp)
     860:	f800283a 	ret

00000864 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     864:	d0a70d17 	ldw	r2,-25548(gp)
     868:	f800283a 	ret

0000086c <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <__alt_data_end+0xff000874>
}
     880:	f800283a 	ret

00000884 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     884:	01004034 	movhi	r4,256
     888:	21042704 	addi	r4,r4,4252
     88c:	00c04034 	movhi	r3,256
     890:	18c42704 	addi	r3,r3,4252
     894:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     898:	108000cc 	andi	r2,r2,3
     89c:	103ffb1e 	bne	r2,zero,88c <__alt_data_end+0xff00088c>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8a0:	00800104 	movi	r2,4
     8a4:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8b4:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8b8:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8bc:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8c0:	dfc00315 	stw	ra,12(sp)
     8c4:	dc800215 	stw	r18,8(sp)
     8c8:	dc400115 	stw	r17,4(sp)
     8cc:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8d0:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8d4:	01000074 	movhi	r4,1
     8d8:	2104e604 	addi	r4,r4,5016
     8dc:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8e0:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8e4:	00030140 	call	3014 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8e8:	04800a0e 	bge	zero,r18,914 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8ec:	04404034 	movhi	r17,256
     8f0:	8c442404 	addi	r17,r17,4240
     8f4:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8f8:	89800037 	ldwio	r6,0(r17)
     8fc:	01000074 	movhi	r4,1
     900:	800b883a 	mov	r5,r16
     904:	2104ef04 	addi	r4,r4,5052
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     908:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     90c:	00030140 	call	3014 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     910:	943ff81e 	bne	r18,r16,8f4 <__alt_data_end+0xff0008f4>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     914:	dfc00317 	ldw	ra,12(sp)
     918:	dc800217 	ldw	r18,8(sp)
     91c:	dc400117 	ldw	r17,4(sp)
     920:	dc000017 	ldw	r16,0(sp)
     924:	dec00404 	addi	sp,sp,16
     928:	f800283a 	ret

0000092c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     92c:	01804034 	movhi	r6,256
     930:	31842704 	addi	r6,r6,4252
     934:	00c04034 	movhi	r3,256
     938:	18c42704 	addi	r3,r3,4252
     93c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     940:	108000cc 	andi	r2,r2,3
     944:	103ffb1e 	bne	r2,zero,934 <__alt_data_end+0xff000934>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     948:	00804034 	movhi	r2,256
     94c:	21003fcc 	andi	r4,r4,255
     950:	10842404 	addi	r2,r2,4240
     954:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     958:	00804034 	movhi	r2,256
     95c:	10842504 	addi	r2,r2,4244
     960:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     964:	008010c4 	movi	r2,67
     968:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     96c:	180b883a 	mov	r5,r3
     970:	00c04034 	movhi	r3,256
     974:	18c42704 	addi	r3,r3,4252
     978:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     97c:	108000cc 	andi	r2,r2,3
     980:	103ffb1e 	bne	r2,zero,970 <__alt_data_end+0xff000970>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     984:	00804034 	movhi	r2,256
     988:	21000044 	addi	r4,r4,1
     98c:	10842404 	addi	r2,r2,4240
     990:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     994:	00800884 	movi	r2,34
     998:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     99c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9a0:	108000cc 	andi	r2,r2,3
     9a4:	103ffd1e 	bne	r2,zero,99c <__alt_data_end+0xff00099c>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9a8:	00804034 	movhi	r2,256
     9ac:	10842604 	addi	r2,r2,4248
}
     9b0:	10800037 	ldwio	r2,0(r2)
     9b4:	f800283a 	ret

000009b8 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9b8:	01c04034 	movhi	r7,256
     9bc:	39c42704 	addi	r7,r7,4252
     9c0:	00c04034 	movhi	r3,256
     9c4:	18c42704 	addi	r3,r3,4252
     9c8:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9cc:	108000cc 	andi	r2,r2,3
     9d0:	103ffb1e 	bne	r2,zero,9c0 <__alt_data_end+0xff0009c0>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9d4:	00804034 	movhi	r2,256
     9d8:	10842404 	addi	r2,r2,4240
     9dc:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9e0:	00804034 	movhi	r2,256
     9e4:	10842504 	addi	r2,r2,4244
     9e8:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9ec:	00804034 	movhi	r2,256
     9f0:	10842604 	addi	r2,r2,4248
     9f4:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9f8:	00801084 	movi	r2,66
     9fc:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a00:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a04:	108000cc 	andi	r2,r2,3
     a08:	103ffd1e 	bne	r2,zero,a00 <__alt_data_end+0xff000a00>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a0c:	f800283a 	ret

00000a10 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a10:	00804034 	movhi	r2,256
     a14:	10841804 	addi	r2,r2,4192
     a18:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a1c:	01000284 	movi	r4,10
     a20:	000ed601 	jmpi	ed60 <usleep>

00000a24 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a24:	00804034 	movhi	r2,256
     a28:	10841904 	addi	r2,r2,4196
     a2c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a30:	01000284 	movi	r4,10
     a34:	000ed601 	jmpi	ed60 <usleep>

00000a38 <init_LCD>:
}


void init_LCD() {
     a38:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a3c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a40:	dd400515 	stw	r21,20(sp)
     a44:	dfc00815 	stw	ra,32(sp)
     a48:	ddc00715 	stw	r23,28(sp)
     a4c:	dd800615 	stw	r22,24(sp)
     a50:	dd000415 	stw	r20,16(sp)
     a54:	dcc00315 	stw	r19,12(sp)
     a58:	dc800215 	stw	r18,8(sp)
     a5c:	dc400115 	stw	r17,4(sp)
     a60:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a64:	05400084 	movi	r21,2
     a68:	10841a04 	addi	r2,r2,4200
     a6c:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a70:	04804034 	movhi	r18,256
     a74:	94841804 	addi	r18,r18,4192
     a78:	00800a04 	movi	r2,40
     a7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a80:	04000284 	movi	r16,10
     a84:	8009883a 	mov	r4,r16
     a88:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a8c:	05c00444 	movi	r23,17
     a90:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a94:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a98:	04404034 	movhi	r17,256
     a9c:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     aa0:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	0027883a 	mov	r19,zero
     aa8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aac:	8009883a 	mov	r4,r16
     ab0:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ab4:	008032c4 	movi	r2,203
     ab8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     abc:	8009883a 	mov	r4,r16
     ac0:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac4:	00800e44 	movi	r2,57
     ac8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     acc:	8009883a 	mov	r4,r16
     ad0:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad4:	00800b04 	movi	r2,44
     ad8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     adc:	8009883a 	mov	r4,r16
     ae0:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ae8:	8009883a 	mov	r4,r16
     aec:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af0:	00800d04 	movi	r2,52
     af4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     af8:	8009883a 	mov	r4,r16
     afc:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b00:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b0c:	008033c4 	movi	r2,207
     b10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	05802044 	movi	r22,129
     b2c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	00800c04 	movi	r2,48
     b3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b48:	00803a04 	movi	r2,232
     b4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	00802144 	movi	r2,133
     b5c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b68:	05000044 	movi	r20,1
     b6c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	00801e44 	movi	r2,121
     b7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b88:	00803a84 	movi	r2,234
     b8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ba8:	8009883a 	mov	r4,r16
     bac:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb0:	00801904 	movi	r2,100
     bb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	008000c4 	movi	r2,3
     bc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	00800484 	movi	r2,18
     bd4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     be4:	8009883a 	mov	r4,r16
     be8:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bec:	00803dc4 	movi	r2,247
     bf0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf4:	8009883a 	mov	r4,r16
     bf8:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bfc:	00800804 	movi	r2,32
     c00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c0c:	00803004 	movi	r2,192
     c10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	05800984 	movi	r22,38
     c20:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	00800104 	movi	r2,4
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c3c:	00803044 	movi	r2,193
     c40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c58:	00803144 	movi	r2,197
     c5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c68:	00800d44 	movi	r2,53
     c6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c78:	00800f84 	movi	r2,62
     c7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c88:	008031c4 	movi	r2,199
     c8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	00802f84 	movi	r2,190
     c9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00802c44 	movi	r2,177
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc4:	00800404 	movi	r2,16
     cc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cd4:	00800e84 	movi	r2,58
     cd8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00801544 	movi	r2,85
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf4:	00802d84 	movi	r2,182
     cf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d08:	8009883a 	mov	r4,r16
     d0c:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d10:	00802884 	movi	r2,162
     d14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
     d1c:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00803c84 	movi	r2,242
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d3c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d40:	8009883a 	mov	r4,r16
     d44:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d48:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d4c:	8009883a 	mov	r4,r16
     d50:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d54:	00800d84 	movi	r2,54
     d58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00800a84 	movi	r2,42
     d74:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d80:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d90:	8009883a 	mov	r4,r16
     d94:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d9c:	8009883a 	mov	r4,r16
     da0:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da4:	00803bc4 	movi	r2,239
     da8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000ed600 	call	ed60 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     db4:	00800ac4 	movi	r2,43
     db8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000ed600 	call	ed60 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ddc:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     de0:	8009883a 	mov	r4,r16
     de4:	000ed600 	call	ed60 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     de8:	00800fc4 	movi	r2,63
     dec:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     df0:	8009883a 	mov	r4,r16
     df4:	000ed600 	call	ed60 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     df8:	00c04034 	movhi	r3,256
     dfc:	00803c04 	movi	r2,240
     e00:	18c41d04 	addi	r3,r3,4212
     e04:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e08:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e0c:	00805004 	movi	r2,320
     e10:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e14:	00800a44 	movi	r2,41
     e18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e1c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e20:	dfc00817 	ldw	ra,32(sp)
     e24:	ddc00717 	ldw	r23,28(sp)
     e28:	dd800617 	ldw	r22,24(sp)
     e2c:	dd400517 	ldw	r21,20(sp)
     e30:	dd000417 	ldw	r20,16(sp)
     e34:	dcc00317 	ldw	r19,12(sp)
     e38:	dc800217 	ldw	r18,8(sp)
     e3c:	dc400117 	ldw	r17,4(sp)
     e40:	dc000017 	ldw	r16,0(sp)
     e44:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e48:	000ed601 	jmpi	ed60 <usleep>

00000e4c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e4c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e50:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e54:	dc000015 	stw	r16,0(sp)
     e58:	dfc00415 	stw	ra,16(sp)
     e5c:	dcc00315 	stw	r19,12(sp)
     e60:	dc800215 	stw	r18,8(sp)
     e64:	dc400115 	stw	r17,4(sp)
     e68:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e6c:	10841e04 	addi	r2,r2,4216
     e70:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e74:	00804034 	movhi	r2,256
     e78:	10841804 	addi	r2,r2,4192
     e7c:	00c00b04 	movi	r3,44
     e80:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e84:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e88:	01000284 	movi	r4,10
     e8c:	000ed600 	call	ed60 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e90:	90000a26 	beq	r18,zero,ebc <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e94:	04c04034 	movhi	r19,256
     e98:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e9c:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ea0:	8080000b 	ldhu	r2,0(r16)
     ea4:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ea8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eac:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     eb0:	000ed600 	call	ed60 <usleep>
     eb4:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eb8:	8cbff91e 	bne	r17,r18,ea0 <__alt_data_end+0xff000ea0>
		LCD_Write_Data(data_array[pixels]);
}
     ebc:	dfc00417 	ldw	ra,16(sp)
     ec0:	dcc00317 	ldw	r19,12(sp)
     ec4:	dc800217 	ldw	r18,8(sp)
     ec8:	dc400117 	ldw	r17,4(sp)
     ecc:	dc000017 	ldw	r16,0(sp)
     ed0:	dec00504 	addi	sp,sp,20
     ed4:	f800283a 	ret

00000ed8 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ed8:	d0a70e0b 	ldhu	r2,-25544(gp)
     edc:	3080010e 	bge	r6,r2,ee4 <transfer_LCD_with_dma+0xc>
     ee0:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     ee4:	d0e70e8b 	ldhu	r3,-25542(gp)
     ee8:	28c0010e 	bge	r5,r3,ef0 <transfer_LCD_with_dma+0x18>
     eec:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ef0:	01804034 	movhi	r6,256
     ef4:	31841e04 	addi	r6,r6,4216
     ef8:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     efc:	01404034 	movhi	r5,256
     f00:	29441b04 	addi	r5,r5,4204
     f04:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f08:	18ffffcc 	andi	r3,r3,65535
     f0c:	10bfffcc 	andi	r2,r2,65535
     f10:	1885383a 	mul	r2,r3,r2
     f14:	00c04034 	movhi	r3,256
     f18:	18c41c04 	addi	r3,r3,4208
     f1c:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f20:	39c03fcc 	andi	r7,r7,255
     f24:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f28:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f2c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f30:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f34:	38000326 	beq	r7,zero,f44 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f38:	00c04404 	movi	r3,272
     f3c:	10c0002d 	sthio	r3,0(r2)
     f40:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f44:	00c04004 	movi	r3,256
     f48:	10c0002d 	sthio	r3,0(r2)
     f4c:	f800283a 	ret

00000f50 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f50:	defff804 	addi	sp,sp,-32
     f54:	dfc00715 	stw	ra,28(sp)
     f58:	dd800615 	stw	r22,24(sp)
     f5c:	dd400515 	stw	r21,20(sp)
     f60:	dd000415 	stw	r20,16(sp)
     f64:	dcc00315 	stw	r19,12(sp)
     f68:	dc800215 	stw	r18,8(sp)
     f6c:	dc400115 	stw	r17,4(sp)
     f70:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     f74:	0000a380 	call	a38 <init_LCD>
  init_camera();
     f78:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f7c:	01000604 	movi	r4,24
     f80:	0001bf80 	call	1bf8 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f84:	01000074 	movhi	r4,1
     f88:	2104f804 	addi	r4,r4,5088
     f8c:	00031100 	call	3110 <puts>
  cam_get_profiling();
     f90:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f94:	00005a80 	call	5a8 <cam_get_xsize>
     f98:	1021883a 	mov	r16,r2
     f9c:	00005cc0 	call	5cc <cam_get_ysize>
     fa0:	10bfffcc 	andi	r2,r2,65535
     fa4:	813fffcc 	andi	r4,r16,65535
     fa8:	2089383a 	mul	r4,r4,r2
     fac:	05000074 	movhi	r20,1
     fb0:	a505dd04 	addi	r20,r20,6004
     fb4:	00027b00 	call	27b0 <malloc>
     fb8:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fbc:	00005a80 	call	5a8 <cam_get_xsize>
     fc0:	1021883a 	mov	r16,r2
     fc4:	00005cc0 	call	5cc <cam_get_ysize>
     fc8:	10bfffcc 	andi	r2,r2,65535
     fcc:	813fffcc 	andi	r4,r16,65535
     fd0:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     fd4:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
     fd8:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fdc:	00027b00 	call	27b0 <malloc>
     fe0:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fe4:	00005a80 	call	5a8 <cam_get_xsize>
     fe8:	1021883a 	mov	r16,r2
     fec:	00005cc0 	call	5cc <cam_get_ysize>
     ff0:	10bfffcc 	andi	r2,r2,65535
     ff4:	813fffcc 	andi	r4,r16,65535
     ff8:	2089383a 	mul	r4,r4,r2
     ffc:	00027b00 	call	27b0 <malloc>
    1000:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1004:	00005a80 	call	5a8 <cam_get_xsize>
    1008:	1021883a 	mov	r16,r2
    100c:	00005cc0 	call	5cc <cam_get_ysize>
    1010:	10bfffcc 	andi	r2,r2,65535
    1014:	813fffcc 	andi	r4,r16,65535
    1018:	2089383a 	mul	r4,r4,r2
    101c:	00027b00 	call	27b0 <malloc>
  cam_set_image_pointer(0,buffer1);
    1020:	b00b883a 	mov	r5,r22
    1024:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1028:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    102c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1030:	a80b883a 	mov	r5,r21
    1034:	01000044 	movi	r4,1
    1038:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    103c:	880b883a 	mov	r5,r17
    1040:	01000084 	movi	r4,2
    1044:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1048:	800b883a 	mov	r5,r16
    104c:	010000c4 	movi	r4,3
    1050:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1054:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1058:	00005a80 	call	5a8 <cam_get_xsize>
    105c:	1021883a 	mov	r16,r2
    1060:	00005cc0 	call	5cc <cam_get_ysize>
    1064:	813fffcc 	andi	r4,r16,65535
    1068:	2008d07a 	srli	r4,r4,1
    106c:	117fffcc 	andi	r5,r2,65535
    1070:	00012ac0 	call	12ac <init_sobel_arrays>
  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1074:	00005a80 	call	5a8 <cam_get_xsize>
    1078:	1021883a 	mov	r16,r2
    107c:	00005cc0 	call	5cc <cam_get_ysize>
    1080:	80ffffcc 	andi	r3,r16,65535
    1084:	1806d07a 	srli	r3,r3,1
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	18a3383a 	mul	r17,r3,r2

  do {
	  if (new_image_available() != 0) {
    1090:	00007340 	call	734 <new_image_available>
    1094:	10803fcc 	andi	r2,r2,255
    1098:	1080201c 	xori	r2,r2,128
    109c:	10bfe004 	addi	r2,r2,-128
    10a0:	103ffb26 	beq	r2,zero,1090 <__alt_data_end+0xff001090>
		  if (current_image_valid()!=0) {
    10a4:	00006dc0 	call	6dc <current_image_valid>
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	10a0001c 	xori	r2,r2,32768
    10b0:	10a00004 	addi	r2,r2,-32768
    10b4:	103ff626 	beq	r2,zero,1090 <__alt_data_end+0xff001090>

			  alt_timestamp_start();
    10b8:	000fb080 	call	fb08 <alt_timestamp_start>

			  start_global = alt_timestamp();
    10bc:	000fb800 	call	fb80 <alt_timestamp>
    10c0:	d0a71015 	stw	r2,-25536(gp)
			  current_mode = DIPSW_get_value();
    10c4:	00007600 	call	760 <DIPSW_get_value>
    10c8:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    10cc:	00006f00 	call	6f0 <current_image_pointer>
    10d0:	102b883a 	mov	r21,r2
		      switch (mode) {
    10d4:	808001cc 	andi	r2,r16,7
    10d8:	1000421e 	bne	r2,zero,11e4 <main+0x294>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    10dc:	00005a80 	call	5a8 <cam_get_xsize>
    10e0:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    10e4:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10e8:	b17fffcc 	andi	r5,r22,65535
    10ec:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10f0:	84003fcc 	andi	r16,r16,255
    10f4:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    10f8:	000f883a 	mov	r7,zero
    10fc:	11bfffcc 	andi	r6,r2,65535
    1100:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1104:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1108:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    110c:	80006216 	blt	r16,zero,1298 <main+0x348>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    1110:	000fb800 	call	fb80 <alt_timestamp>
    1114:	d0a70f15 	stw	r2,-25540(gp)
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1118:	d1671317 	ldw	r5,-25524(gp)
    111c:	d0a71417 	ldw	r2,-25520(gp)
    1120:	01000074 	movhi	r4,1
    1124:	2104fd04 	addi	r4,r4,5108
    1128:	288bc83a 	sub	r5,r5,r2
    112c:	00030140 	call	3014 <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1130:	d0a71617 	ldw	r2,-25512(gp)
    1134:	d1671517 	ldw	r5,-25516(gp)
    1138:	01000074 	movhi	r4,1
    113c:	21050204 	addi	r4,r4,5128
    1140:	288bc83a 	sub	r5,r5,r2
    1144:	00030140 	call	3014 <printf>
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1148:	d0a71117 	ldw	r2,-25532(gp)
    114c:	d4271217 	ldw	r16,-25528(gp)
    1150:	1421c83a 	sub	r16,r2,r16
    1154:	8444b03a 	or	r2,r16,r17
    1158:	90801d36 	bltu	r18,r2,11d0 <main+0x280>
    115c:	8004913a 	slli	r2,r16,4
    1160:	1444b03a 	or	r2,r2,r17
    1164:	1505883a 	add	r2,r2,r20
    1168:	11800003 	ldbu	r6,0(r2)
    116c:	01000074 	movhi	r4,1
    1170:	800b883a 	mov	r5,r16
    1174:	21050504 	addi	r4,r4,5140
    1178:	00030140 	call	3014 <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    117c:	d0a71017 	ldw	r2,-25536(gp)
    1180:	d1270f17 	ldw	r4,-25540(gp)
    1184:	2089c83a 	sub	r4,r4,r2
    1188:	00026a40 	call	26a4 <__floatunsidf>
    118c:	01d06234 	movhi	r7,16776
    1190:	39f5e104 	addi	r7,r7,-10364
    1194:	1009883a 	mov	r4,r2
    1198:	180b883a 	mov	r5,r3
    119c:	000d883a 	mov	r6,zero
    11a0:	0001dbc0 	call	1dbc <__divdf3>
    11a4:	100d883a 	mov	r6,r2
    11a8:	180f883a 	mov	r7,r3
    11ac:	0009883a 	mov	r4,zero
    11b0:	014ffc34 	movhi	r5,16368
    11b4:	0001dbc0 	call	1dbc <__divdf3>
    11b8:	01000074 	movhi	r4,1
    11bc:	100b883a 	mov	r5,r2
    11c0:	180d883a 	mov	r6,r3
    11c4:	21050f04 	addi	r4,r4,5180
    11c8:	00030140 	call	3014 <printf>
    11cc:	003fb006 	br	1090 <__alt_data_end+0xff001090>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    11d0:	880b883a 	mov	r5,r17
    11d4:	8009883a 	mov	r4,r16
    11d8:	0001c080 	call	1c08 <__divsi3>
    11dc:	100d883a 	mov	r6,r2
    11e0:	003fe206 	br	116c <__alt_data_end+0xff00116c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11e4:	000fb800 	call	fb80 <alt_timestamp>
    11e8:	d0a71215 	stw	r2,-25528(gp)
		    	  	   start_conv_grayscale = alt_timestamp();
    11ec:	000fb800 	call	fb80 <alt_timestamp>
    11f0:	d0a71415 	stw	r2,-25520(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    11f4:	00005a80 	call	5a8 <cam_get_xsize>
    11f8:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    11fc:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1200:	b17fffcc 	andi	r5,r22,65535
    1204:	280ad07a 	srli	r5,r5,1
    1208:	11bfffcc 	andi	r6,r2,65535
    120c:	a809883a 	mov	r4,r21
    1210:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    1214:	000fb800 	call	fb80 <alt_timestamp>
    1218:	d0a71315 	stw	r2,-25524(gp)

                       grayscale = get_grayscale_picture();
    121c:	00008640 	call	864 <get_grayscale_picture>
    1220:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    1224:	000fb800 	call	fb80 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    1228:	a809883a 	mov	r4,r21
    122c:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    1230:	d0a71615 	stw	r2,-25512(gp)
                       sobel_complete(grayscale, 128);
    1234:	0001a500 	call	1a50 <sobel_complete>
                       end_sobel = alt_timestamp();
    1238:	000fb800 	call	fb80 <alt_timestamp>
    123c:	d0a71515 	stw	r2,-25516(gp)
                       end_all = alt_timestamp();
    1240:	000fb800 	call	fb80 <alt_timestamp>
    1244:	d0a71115 	stw	r2,-25532(gp)

                       grayscale=GetSobelResult();
    1248:	0001be00 	call	1be0 <GetSobelResult>
    124c:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1250:	00005a80 	call	5a8 <cam_get_xsize>
    1254:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    1258:	00005cc0 	call	5cc <cam_get_ysize>
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    125c:	a97fffcc 	andi	r5,r21,65535
    1260:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1264:	84003fcc 	andi	r16,r16,255
    1268:	8400201c 	xori	r16,r16,128
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    126c:	01c00044 	movi	r7,1
    1270:	11bfffcc 	andi	r6,r2,65535
    1274:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1278:	843fe004 	addi	r16,r16,-128
                       sobel_complete(grayscale, 128);
                       end_sobel = alt_timestamp();
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    127c:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1280:	803fa30e 	bge	r16,zero,1110 <__alt_data_end+0xff001110>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1284:	01000604 	movi	r4,24
    1288:	0001bf80 	call	1bf8 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    128c:	b009883a 	mov	r4,r22
    1290:	0001be80 	call	1be8 <vga_set_pointer>
    1294:	003f9e06 	br	1110 <__alt_data_end+0xff001110>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1298:	01000204 	movi	r4,8
    129c:	0001bf80 	call	1bf8 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12a0:	a809883a 	mov	r4,r21
    12a4:	0001be80 	call	1be8 <vga_set_pointer>
    12a8:	003f9906 	br	1110 <__alt_data_end+0xff001110>

000012ac <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12ac:	defffd04 	addi	sp,sp,-12
    12b0:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12b4:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12b8:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12bc:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12c0:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12c4:	21051304 	addi	r4,r4,5196
    12c8:	280d883a 	mov	r6,r5
    12cc:	800f883a 	mov	r7,r16
    12d0:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12d4:	dfc00215 	stw	ra,8(sp)
    12d8:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    12dc:	d0e71715 	stw	r3,-25508(gp)
	sobel_height = height;
    12e0:	d0a71915 	stw	r2,-25500(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12e4:	00030140 	call	3014 <printf>
	if (sobel_x_result != NULL)
    12e8:	d1271a17 	ldw	r4,-25496(gp)
    12ec:	20000126 	beq	r4,zero,12f4 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    12f0:	00027c40 	call	27c4 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12f4:	8423883a 	add	r17,r16,r16
    12f8:	8809883a 	mov	r4,r17
    12fc:	00027b00 	call	27b0 <malloc>
	if (sobel_y_result != NULL)
    1300:	d1271b17 	ldw	r4,-25492(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1304:	d0a71a15 	stw	r2,-25496(gp)
	if (sobel_y_result != NULL)
    1308:	20000126 	beq	r4,zero,1310 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    130c:	00027c40 	call	27c4 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1310:	8809883a 	mov	r4,r17
    1314:	00027b00 	call	27b0 <malloc>
	if (sobel_result != NULL)
    1318:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    131c:	d0a71b15 	stw	r2,-25492(gp)
	if (sobel_result != NULL)
    1320:	20000126 	beq	r4,zero,1328 <init_sobel_arrays+0x7c>
		free(sobel_result);
    1324:	00027c40 	call	27c4 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1328:	8009883a 	mov	r4,r16
    132c:	00027b00 	call	27b0 <malloc>
	if (sobel_rgb565 != NULL)
    1330:	d1271c17 	ldw	r4,-25488(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1334:	d0a71815 	stw	r2,-25504(gp)
	if (sobel_rgb565 != NULL)
    1338:	20000126 	beq	r4,zero,1340 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    133c:	00027c40 	call	27c4 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1340:	8809883a 	mov	r4,r17
    1344:	00027b00 	call	27b0 <malloc>
    1348:	d0a71c15 	stw	r2,-25488(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    134c:	0005883a 	mov	r2,zero
    1350:	04000f0e 	bge	zero,r16,1390 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    1354:	d1a71a17 	ldw	r6,-25496(gp)
		sobel_y_result[loop] = 0;
    1358:	d1671b17 	ldw	r5,-25492(gp)
		sobel_result[loop] = 0;
    135c:	d1271817 	ldw	r4,-25504(gp)
    1360:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1364:	30cd883a 	add	r6,r6,r3
    1368:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    136c:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    1370:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1374:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    1378:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    137c:	d1271c17 	ldw	r4,-25488(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1380:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1384:	20c7883a 	add	r3,r4,r3
    1388:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    138c:	80bff11e 	bne	r16,r2,1354 <__alt_data_end+0xff001354>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1390:	dfc00217 	ldw	ra,8(sp)
    1394:	dc400117 	ldw	r17,4(sp)
    1398:	dc000017 	ldw	r16,0(sp)
    139c:	dec00304 	addi	sp,sp,12
    13a0:	f800283a 	ret

000013a4 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13a4:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13a8:	31bfffc4 	addi	r6,r6,-1
    13ac:	38c00047 	ldb	r3,1(r7)
    13b0:	328d383a 	mul	r6,r6,r10
    13b4:	3b8000c7 	ldb	r14,3(r7)
    13b8:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    13bc:	5185883a 	add	r2,r10,r6
    13c0:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13c4:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    13c8:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    13cc:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13d0:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13d4:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13d8:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13dc:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13e0:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13e4:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13e8:	49000043 	ldbu	r4,1(r9)
    13ec:	3a800147 	ldb	r10,5(r7)
    13f0:	139d383a 	mul	r14,r2,r14
    13f4:	60d9383a 	mul	r12,r12,r3
    13f8:	68800003 	ldbu	r2,0(r13)
    13fc:	38c001c7 	ldb	r3,7(r7)
    1400:	5a17383a 	mul	r11,r11,r8
    1404:	33ffffc3 	ldbu	r15,-1(r6)
    1408:	3a000007 	ldb	r8,0(r7)
    140c:	2295383a 	mul	r10,r4,r10
    1410:	31000043 	ldbu	r4,1(r6)
    1414:	39800087 	ldb	r6,2(r7)
    1418:	730b883a 	add	r5,r14,r12
    141c:	10d3383a 	mul	r9,r2,r3
    1420:	6b3fffc3 	ldbu	r12,-1(r13)
    1424:	38c00187 	ldb	r3,6(r7)
    1428:	2acb883a 	add	r5,r5,r11
    142c:	7a11383a 	mul	r8,r15,r8
    1430:	6ac00043 	ldbu	r11,1(r13)
    1434:	39c00207 	ldb	r7,8(r7)
    1438:	2a8b883a 	add	r5,r5,r10
    143c:	2189383a 	mul	r4,r4,r6
    1440:	2a45883a 	add	r2,r5,r9
    1444:	60c7383a 	mul	r3,r12,r3
    1448:	1205883a 	add	r2,r2,r8
    144c:	59cb383a 	mul	r5,r11,r7
    1450:	1105883a 	add	r2,r2,r4
    1454:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    1458:	1145883a 	add	r2,r2,r5
    145c:	f800283a 	ret

00001460 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1460:	defff604 	addi	sp,sp,-40
    1464:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1468:	d4671917 	ldw	r17,-25500(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    146c:	dfc00915 	stw	ra,36(sp)
    1470:	df000815 	stw	fp,32(sp)
    1474:	ddc00715 	stw	r23,28(sp)
    1478:	dd800615 	stw	r22,24(sp)
    147c:	dd400515 	stw	r21,20(sp)
    1480:	dd000415 	stw	r20,16(sp)
    1484:	dcc00315 	stw	r19,12(sp)
    1488:	dc800215 	stw	r18,8(sp)
    148c:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1490:	8c7fffc4 	addi	r17,r17,-1
    1494:	00800044 	movi	r2,1
    1498:	14402e0e 	bge	r2,r17,1554 <sobel_x+0xf4>
    149c:	d3671717 	ldw	r13,-25508(gp)
    14a0:	d3e71a17 	ldw	r15,-25496(gp)
    14a4:	03800084 	movi	r14,2
    14a8:	6b65883a 	add	r18,r13,r13
    14ac:	9385883a 	add	r2,r18,r14
    14b0:	2359883a 	add	r12,r4,r13
    14b4:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14b8:	7027883a 	mov	r19,r14
    14bc:	736bc83a 	sub	r21,r14,r13
    14c0:	6ba9883a 	add	r20,r13,r14
    14c4:	9b402f0e 	bge	r19,r13,1584 <sobel_x+0x124>
    14c8:	637f883a 	add	ra,r12,r13
    14cc:	7021883a 	mov	r16,r14
    14d0:	6357c83a 	sub	r11,r12,r13
    14d4:	ab0b883a 	add	r5,r21,r12
    14d8:	62800084 	addi	r10,r12,2
    14dc:	f813883a 	mov	r9,ra
    14e0:	a311883a 	add	r8,r20,r12
    14e4:	780f883a 	mov	r7,r15
    14e8:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14ec:	29000003 	ldbu	r4,0(r5)
    14f0:	40c00003 	ldbu	r3,0(r8)
    14f4:	37000003 	ldbu	fp,0(r6)
    14f8:	50800003 	ldbu	r2,0(r10)
    14fc:	20c7883a 	add	r3,r4,r3
    1500:	5dc00003 	ldbu	r23,0(r11)
    1504:	1f07c83a 	sub	r3,r3,fp
    1508:	4d800003 	ldbu	r22,0(r9)
    150c:	1f09c83a 	sub	r4,r3,fp
    1510:	1087883a 	add	r3,r2,r2
    1514:	20c7883a 	add	r3,r4,r3
    1518:	1dc5c83a 	sub	r2,r3,r23
    151c:	1585c83a 	sub	r2,r2,r22
    1520:	3880000d 	sth	r2,0(r7)
    1524:	29400044 	addi	r5,r5,1
    1528:	5ac00044 	addi	r11,r11,1
    152c:	31800044 	addi	r6,r6,1
    1530:	52800044 	addi	r10,r10,1
    1534:	4a400044 	addi	r9,r9,1
    1538:	42000044 	addi	r8,r8,1
    153c:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1540:	617fea1e 	bne	r12,r5,14ec <__alt_data_end+0xff0014ec>
    1544:	73800044 	addi	r14,r14,1
    1548:	f819883a 	mov	r12,ra
    154c:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1550:	847fdc16 	blt	r16,r17,14c4 <__alt_data_end+0xff0014c4>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1554:	dfc00917 	ldw	ra,36(sp)
    1558:	df000817 	ldw	fp,32(sp)
    155c:	ddc00717 	ldw	r23,28(sp)
    1560:	dd800617 	ldw	r22,24(sp)
    1564:	dd400517 	ldw	r21,20(sp)
    1568:	dd000417 	ldw	r20,16(sp)
    156c:	dcc00317 	ldw	r19,12(sp)
    1570:	dc800217 	ldw	r18,8(sp)
    1574:	dc400117 	ldw	r17,4(sp)
    1578:	dc000017 	ldw	r16,0(sp)
    157c:	dec00a04 	addi	sp,sp,40
    1580:	f800283a 	ret
    1584:	7021883a 	mov	r16,r14
    1588:	637f883a 	add	ra,r12,r13
    158c:	73800044 	addi	r14,r14,1
    1590:	f819883a 	mov	r12,ra
    1594:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1598:	847fca16 	blt	r16,r17,14c4 <__alt_data_end+0xff0014c4>
    159c:	003fed06 	br	1554 <__alt_data_end+0xff001554>

000015a0 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15a0:	defff504 	addi	sp,sp,-44
    15a4:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15a8:	d5a71917 	ldw	r22,-25500(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15ac:	dfc00a15 	stw	ra,40(sp)
    15b0:	df000915 	stw	fp,36(sp)
    15b4:	ddc00815 	stw	r23,32(sp)
    15b8:	dd400615 	stw	r21,24(sp)
    15bc:	dd000515 	stw	r20,20(sp)
    15c0:	dcc00415 	stw	r19,16(sp)
    15c4:	dc800315 	stw	r18,12(sp)
    15c8:	dc400215 	stw	r17,8(sp)
    15cc:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15d0:	b5bfffc4 	addi	r22,r22,-1
    15d4:	00800044 	movi	r2,1
    15d8:	1580440e 	bge	r2,r22,16ec <sobel_x_with_rgb+0x14c>
    15dc:	d7e71717 	ldw	ra,-25508(gp)
    15e0:	d4a71a17 	ldw	r18,-25496(gp)
    15e4:	d4671c17 	ldw	r17,-25488(gp)
    15e8:	ffe9883a 	add	r20,ra,ra
    15ec:	a0800084 	addi	r2,r20,2
    15f0:	04000084 	movi	r16,2
    15f4:	90a5883a 	add	r18,r18,r2
    15f8:	88a3883a 	add	r17,r17,r2
    15fc:	fc05883a 	add	r2,ra,r16
    1600:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1604:	802f883a 	mov	r23,r16
    1608:	87f9c83a 	sub	fp,r16,ra
    160c:	d8800015 	stw	r2,0(sp)
    1610:	bfc02f0e 	bge	r23,ra,16d0 <sobel_x_with_rgb+0x130>
    1614:	d8800017 	ldw	r2,0(sp)
    1618:	7fe7883a 	add	r19,r15,ra
    161c:	802b883a 	mov	r21,r16
    1620:	7fdbc83a 	sub	r13,r15,ra
    1624:	e3cf883a 	add	r7,fp,r15
    1628:	7b000084 	addi	r12,r15,2
    162c:	9817883a 	mov	r11,r19
    1630:	13d5883a 	add	r10,r2,r15
    1634:	881d883a 	mov	r14,r17
    1638:	9013883a 	mov	r9,r18
    163c:	7811883a 	mov	r8,r15
    1640:	00000b06 	br	1670 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1644:	180692fa 	slli	r3,r3,11
    1648:	70c0000d 	sth	r3,0(r14)
    164c:	39c00044 	addi	r7,r7,1
    1650:	6b400044 	addi	r13,r13,1
    1654:	42000044 	addi	r8,r8,1
    1658:	63000044 	addi	r12,r12,1
    165c:	5ac00044 	addi	r11,r11,1
    1660:	52800044 	addi	r10,r10,1
    1664:	4a400084 	addi	r9,r9,2
    1668:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    166c:	79c01a26 	beq	r15,r7,16d8 <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1670:	50800003 	ldbu	r2,0(r10)
    1674:	39400003 	ldbu	r5,0(r7)
    1678:	41800003 	ldbu	r6,0(r8)
    167c:	60c00003 	ldbu	r3,0(r12)
    1680:	288b883a 	add	r5,r5,r2
    1684:	298bc83a 	sub	r5,r5,r6
    1688:	68800003 	ldbu	r2,0(r13)
    168c:	59000003 	ldbu	r4,0(r11)
    1690:	298bc83a 	sub	r5,r5,r6
    1694:	18c7883a 	add	r3,r3,r3
    1698:	28c7883a 	add	r3,r5,r3
    169c:	1887c83a 	sub	r3,r3,r2
    16a0:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16a4:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16a8:	10bfffcc 	andi	r2,r2,65535
    16ac:	10a0001c 	xori	r2,r2,32768
    16b0:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16b4:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16b8:	103fe20e 	bge	r2,zero,1644 <__alt_data_end+0xff001644>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16bc:	0085c83a 	sub	r2,zero,r2
    16c0:	1005d0ba 	srai	r2,r2,2
    16c4:	1004917a 	slli	r2,r2,5
    16c8:	7080000d 	sth	r2,0(r14)
    16cc:	003fdf06 	br	164c <__alt_data_end+0xff00164c>
    16d0:	802b883a 	mov	r21,r16
    16d4:	7fe7883a 	add	r19,r15,ra
    16d8:	84000044 	addi	r16,r16,1
    16dc:	981f883a 	mov	r15,r19
    16e0:	9525883a 	add	r18,r18,r20
    16e4:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16e8:	adbfc916 	blt	r21,r22,1610 <__alt_data_end+0xff001610>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16ec:	dfc00a17 	ldw	ra,40(sp)
    16f0:	df000917 	ldw	fp,36(sp)
    16f4:	ddc00817 	ldw	r23,32(sp)
    16f8:	dd800717 	ldw	r22,28(sp)
    16fc:	dd400617 	ldw	r21,24(sp)
    1700:	dd000517 	ldw	r20,20(sp)
    1704:	dcc00417 	ldw	r19,16(sp)
    1708:	dc800317 	ldw	r18,12(sp)
    170c:	dc400217 	ldw	r17,8(sp)
    1710:	dc000117 	ldw	r16,4(sp)
    1714:	dec00b04 	addi	sp,sp,44
    1718:	f800283a 	ret

0000171c <sobel_y>:

void sobel_y( unsigned char *source ) {
    171c:	defff704 	addi	sp,sp,-36
    1720:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1724:	d4671917 	ldw	r17,-25500(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1728:	dfc00815 	stw	ra,32(sp)
    172c:	ddc00715 	stw	r23,28(sp)
    1730:	dd800615 	stw	r22,24(sp)
    1734:	dd400515 	stw	r21,20(sp)
    1738:	dd000415 	stw	r20,16(sp)
    173c:	dcc00315 	stw	r19,12(sp)
    1740:	dc800215 	stw	r18,8(sp)
    1744:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1748:	8c7fffc4 	addi	r17,r17,-1
    174c:	00800044 	movi	r2,1
    1750:	14402d0e 	bge	r2,r17,1808 <sobel_y+0xec>
    1754:	d3e71717 	ldw	r15,-25508(gp)
    1758:	d3a71b17 	ldw	r14,-25492(gp)
    175c:	03400084 	movi	r13,2
    1760:	7bff883a 	add	ra,r15,r15
    1764:	fb67883a 	add	r19,ra,r13
    1768:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    176c:	6825883a 	mov	r18,r13
    1770:	f8a9883a 	add	r20,ra,r2
    1774:	6821883a 	mov	r16,r13
    1778:	93c01f0e 	bge	r18,r15,17f8 <sobel_y+0xdc>
    177c:	27cd883a 	add	r6,r4,ra
    1780:	6821883a 	mov	r16,r13
    1784:	22c00044 	addi	r11,r4,1
    1788:	22800084 	addi	r10,r4,2
    178c:	a113883a 	add	r9,r20,r4
    1790:	990b883a 	add	r5,r19,r4
    1794:	7999883a 	add	r12,r15,r6
    1798:	7011883a 	mov	r8,r14
    179c:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17a0:	3d800003 	ldbu	r22,0(r7)
    17a4:	50c00003 	ldbu	r3,0(r10)
    17a8:	58800003 	ldbu	r2,0(r11)
    17ac:	4d400003 	ldbu	r21,0(r9)
    17b0:	b0c7883a 	add	r3,r22,r3
    17b4:	1085883a 	add	r2,r2,r2
    17b8:	35c00003 	ldbu	r23,0(r6)
    17bc:	1887883a 	add	r3,r3,r2
    17c0:	2d800003 	ldbu	r22,0(r5)
    17c4:	1d47c83a 	sub	r3,r3,r21
    17c8:	1d47c83a 	sub	r3,r3,r21
    17cc:	1dc5c83a 	sub	r2,r3,r23
    17d0:	1585c83a 	sub	r2,r2,r22
    17d4:	4080000d 	sth	r2,0(r8)
    17d8:	29400044 	addi	r5,r5,1
    17dc:	39c00044 	addi	r7,r7,1
    17e0:	5ac00044 	addi	r11,r11,1
    17e4:	52800044 	addi	r10,r10,1
    17e8:	4a400044 	addi	r9,r9,1
    17ec:	31800044 	addi	r6,r6,1
    17f0:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17f4:	617fea1e 	bne	r12,r5,17a0 <__alt_data_end+0xff0017a0>
    17f8:	6b400044 	addi	r13,r13,1
    17fc:	23c9883a 	add	r4,r4,r15
    1800:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1804:	847fdb16 	blt	r16,r17,1774 <__alt_data_end+0xff001774>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1808:	dfc00817 	ldw	ra,32(sp)
    180c:	ddc00717 	ldw	r23,28(sp)
    1810:	dd800617 	ldw	r22,24(sp)
    1814:	dd400517 	ldw	r21,20(sp)
    1818:	dd000417 	ldw	r20,16(sp)
    181c:	dcc00317 	ldw	r19,12(sp)
    1820:	dc800217 	ldw	r18,8(sp)
    1824:	dc400117 	ldw	r17,4(sp)
    1828:	dc000017 	ldw	r16,0(sp)
    182c:	dec00904 	addi	sp,sp,36
    1830:	f800283a 	ret

00001834 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1834:	defff604 	addi	sp,sp,-40
    1838:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    183c:	d4e71917 	ldw	r19,-25500(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1840:	dfc00915 	stw	ra,36(sp)
    1844:	df000815 	stw	fp,32(sp)
    1848:	ddc00715 	stw	r23,28(sp)
    184c:	dd800615 	stw	r22,24(sp)
    1850:	dd400515 	stw	r21,20(sp)
    1854:	dd000415 	stw	r20,16(sp)
    1858:	dc800215 	stw	r18,8(sp)
    185c:	dc400115 	stw	r17,4(sp)
    1860:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1864:	9cffffc4 	addi	r19,r19,-1
    1868:	00800044 	movi	r2,1
    186c:	14c03f0e 	bge	r2,r19,196c <sobel_y_with_rgb+0x138>
    1870:	d4671717 	ldw	r17,-25508(gp)
    1874:	d4271b17 	ldw	r16,-25492(gp)
    1878:	d7e71c17 	ldw	ra,-25488(gp)
    187c:	8c5d883a 	add	r14,r17,r17
    1880:	75000084 	addi	r20,r14,2
    1884:	03c00084 	movi	r15,2
    1888:	8521883a 	add	r16,r16,r20
    188c:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1890:	782b883a 	mov	r21,r15
    1894:	70ad883a 	add	r22,r14,r2
    1898:	7825883a 	mov	r18,r15
    189c:	ac402e0e 	bge	r21,r17,1958 <sobel_y_with_rgb+0x124>
    18a0:	238d883a 	add	r6,r4,r14
    18a4:	7825883a 	mov	r18,r15
    18a8:	22c00044 	addi	r11,r4,1
    18ac:	22800084 	addi	r10,r4,2
    18b0:	b113883a 	add	r9,r22,r4
    18b4:	a10b883a 	add	r5,r20,r4
    18b8:	899b883a 	add	r13,r17,r6
    18bc:	f819883a 	mov	r12,ra
    18c0:	8011883a 	mov	r8,r16
    18c4:	200f883a 	mov	r7,r4
    18c8:	00000b06 	br	18f8 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    18cc:	180692fa 	slli	r3,r3,11
    18d0:	60c0000d 	sth	r3,0(r12)
    18d4:	29400044 	addi	r5,r5,1
    18d8:	39c00044 	addi	r7,r7,1
    18dc:	5ac00044 	addi	r11,r11,1
    18e0:	52800044 	addi	r10,r10,1
    18e4:	4a400044 	addi	r9,r9,1
    18e8:	31800044 	addi	r6,r6,1
    18ec:	42000084 	addi	r8,r8,2
    18f0:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18f4:	69401826 	beq	r13,r5,1958 <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    18f8:	50800003 	ldbu	r2,0(r10)
    18fc:	3f000003 	ldbu	fp,0(r7)
    1900:	58c00003 	ldbu	r3,0(r11)
    1904:	4dc00003 	ldbu	r23,0(r9)
    1908:	e0b9883a 	add	fp,fp,r2
    190c:	18c7883a 	add	r3,r3,r3
    1910:	30800003 	ldbu	r2,0(r6)
    1914:	e0c7883a 	add	r3,fp,r3
    1918:	1dc7c83a 	sub	r3,r3,r23
    191c:	2f000003 	ldbu	fp,0(r5)
    1920:	1dc7c83a 	sub	r3,r3,r23
    1924:	1885c83a 	sub	r2,r3,r2
    1928:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    192c:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1930:	10bfffcc 	andi	r2,r2,65535
    1934:	10a0001c 	xori	r2,r2,32768
    1938:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    193c:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1940:	103fe20e 	bge	r2,zero,18cc <__alt_data_end+0xff0018cc>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1944:	0085c83a 	sub	r2,zero,r2
    1948:	1005d0ba 	srai	r2,r2,2
    194c:	1004917a 	slli	r2,r2,5
    1950:	6080000d 	sth	r2,0(r12)
    1954:	003fdf06 	br	18d4 <__alt_data_end+0xff0018d4>
    1958:	7bc00044 	addi	r15,r15,1
    195c:	2449883a 	add	r4,r4,r17
    1960:	83a1883a 	add	r16,r16,r14
    1964:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1968:	94ffcb16 	blt	r18,r19,1898 <__alt_data_end+0xff001898>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    196c:	dfc00917 	ldw	ra,36(sp)
    1970:	df000817 	ldw	fp,32(sp)
    1974:	ddc00717 	ldw	r23,28(sp)
    1978:	dd800617 	ldw	r22,24(sp)
    197c:	dd400517 	ldw	r21,20(sp)
    1980:	dd000417 	ldw	r20,16(sp)
    1984:	dcc00317 	ldw	r19,12(sp)
    1988:	dc800217 	ldw	r18,8(sp)
    198c:	dc400117 	ldw	r17,4(sp)
    1990:	dc000017 	ldw	r16,0(sp)
    1994:	dec00a04 	addi	sp,sp,40
    1998:	f800283a 	ret

0000199c <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    199c:	d0a71917 	ldw	r2,-25500(gp)
    19a0:	02400084 	movi	r9,2
    19a4:	4880290e 	bge	r9,r2,1a4c <sobel_threshold+0xb0>
    19a8:	223fffcc 	andi	r8,r4,65535
    19ac:	d0e71717 	ldw	r3,-25508(gp)
    19b0:	4220001c 	xori	r8,r8,32768
    19b4:	01c00044 	movi	r7,1
    19b8:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19bc:	48c0200e 	bge	r9,r3,1a40 <sobel_threshold+0xa4>
    19c0:	01400044 	movi	r5,1
    19c4:	00000c06 	br	19f8 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19c8:	2080000f 	ldh	r2,0(r4)
    19cc:	10001916 	blt	r2,zero,1a34 <sobel_threshold+0x98>
    19d0:	3085883a 	add	r2,r6,r2
    19d4:	10bfffcc 	andi	r2,r2,65535
    19d8:	10a0001c 	xori	r2,r2,32768
    19dc:	10a00004 	addi	r2,r2,-32768
    19e0:	4084803a 	cmplt	r2,r8,r2
    19e4:	0085c83a 	sub	r2,zero,r2
    19e8:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19ec:	d0e71717 	ldw	r3,-25508(gp)
    19f0:	18bfffc4 	addi	r2,r3,-1
    19f4:	2880110e 	bge	r5,r2,1a3c <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19f8:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19fc:	d1a71b17 	ldw	r6,-25492(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a00:	d1271a17 	ldw	r4,-25496(gp)
    1a04:	1947883a 	add	r3,r3,r5
    1a08:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a0c:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a10:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a14:	3180000f 	ldh	r6,0(r6)
    1a18:	d0a71817 	ldw	r2,-25504(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a1c:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a20:	10c7883a 	add	r3,r2,r3
    1a24:	303fe80e 	bge	r6,zero,19c8 <__alt_data_end+0xff0019c8>
    1a28:	2080000f 	ldh	r2,0(r4)
    1a2c:	018dc83a 	sub	r6,zero,r6
    1a30:	103fe70e 	bge	r2,zero,19d0 <__alt_data_end+0xff0019d0>
    1a34:	0085c83a 	sub	r2,zero,r2
    1a38:	003fe506 	br	19d0 <__alt_data_end+0xff0019d0>
    1a3c:	d0a71917 	ldw	r2,-25500(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a40:	39c00044 	addi	r7,r7,1
    1a44:	113fffc4 	addi	r4,r2,-1
    1a48:	393fdc16 	blt	r7,r4,19bc <__alt_data_end+0xff0019bc>
    1a4c:	f800283a 	ret

00001a50 <sobel_complete>:
	}
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a50:	d1671917 	ldw	r5,-25500(gp)
    1a54:	02400084 	movi	r9,2
    1a58:	49405e0e 	bge	r9,r5,1bd4 <sobel_complete+0x184>
    1a5c:	d0a71717 	ldw	r2,-25508(gp)
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1a60:	defffa04 	addi	sp,sp,-24
    1a64:	dfc00515 	stw	ra,20(sp)
    1a68:	dd000415 	stw	r20,16(sp)
    1a6c:	dcc00315 	stw	r19,12(sp)
    1a70:	dc800215 	stw	r18,8(sp)
    1a74:	dc400115 	stw	r17,4(sp)
    1a78:	dc000015 	stw	r16,0(sp)
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a7c:	481d883a 	mov	r14,r9
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a80:	03002004 	movi	r12,128
    1a84:	4abfffc4 	addi	r10,r9,-1
    1a88:	481b883a 	mov	r13,r9
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a8c:	7080470e 	bge	r14,r2,1bac <sobel_complete+0x15c>
    1a90:	4affff84 	addi	r11,r9,-2
    1a94:	481b883a 	mov	r13,r9
    1a98:	03c00044 	movi	r15,1
    1a9c:	00001906 	br	1b04 <sobel_complete+0xb4>
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1aa0:	31800003 	ldbu	r6,0(r6)
    1aa4:	98800003 	ldbu	r2,0(r19)
    1aa8:	04c03fc4 	movi	r19,255
    1aac:	318d883a 	add	r6,r6,r6
    1ab0:	308fc83a 	sub	r7,r6,r2
    1ab4:	388dc83a 	sub	r6,r7,r2
    1ab8:	340d883a 	add	r6,r6,r16
    1abc:	34a5c83a 	sub	r18,r6,r18
    1ac0:	90c7883a 	add	r3,r18,r3
    1ac4:	1c47c83a 	sub	r3,r3,r17
    1ac8:	18bfffcc 	andi	r2,r3,65535
    1acc:	10a0001c 	xori	r2,r2,32768
    1ad0:	10a00004 	addi	r2,r2,-32768
    1ad4:	10003216 	blt	r2,zero,1ba0 <sobel_complete+0x150>
    1ad8:	2885883a 	add	r2,r5,r2
    1adc:	10bfffcc 	andi	r2,r2,65535
    1ae0:	10a0001c 	xori	r2,r2,32768
    1ae4:	10a00004 	addi	r2,r2,-32768
    1ae8:	60800116 	blt	r12,r2,1af0 <sobel_complete+0xa0>
    1aec:	0027883a 	mov	r19,zero
    1af0:	7cc00025 	stbio	r19,0(r15)
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1af4:	d0a71717 	ldw	r2,-25508(gp)
    1af8:	401f883a 	mov	r15,r8
    1afc:	10ffffc4 	addi	r3,r2,-1
    1b00:	40c0290e 	bge	r8,r3,1ba8 <sobel_complete+0x158>
			sum = (value < 0) ? -value : value;
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1b04:	12bf383a 	mul	ra,r2,r10
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1b08:	12c7383a 	mul	r3,r2,r11
    1b0c:	79ffffc4 	addi	r7,r15,-1
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1b10:	1245383a 	mul	r2,r2,r9
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = (value < 0) ? -value : value;
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
    1b14:	27cb883a 	add	r5,r4,ra
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1b18:	7a000044 	addi	r8,r15,1
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = (value < 0) ? -value : value;
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
    1b1c:	29cb883a 	add	r5,r5,r7
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1b20:	20c7883a 	add	r3,r4,r3
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1b24:	2223883a 	add	r17,r4,r8
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b28:	29400003 	ldbu	r5,0(r5)
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1b2c:	88a5883a 	add	r18,r17,r2
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1b30:	1a21883a 	add	r16,r3,r8
			sum = (value < 0) ? -value : value;
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1b34:	8fe3883a 	add	r17,r17,ra
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1b38:	1bcd883a 	add	r6,r3,r15
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1b3c:	2085883a 	add	r2,r4,r2
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1b40:	19c7883a 	add	r3,r3,r7
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
    1b44:	84000003 	ldbu	r16,0(r16)
    1b48:	94800003 	ldbu	r18,0(r18)
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1b4c:	13e7883a 	add	r19,r2,r15
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b50:	2d1fffe4 	muli	r20,r5,32767
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1b54:	11c5883a 	add	r2,r2,r7
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b58:	89400003 	ldbu	r5,0(r17)
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
    1b5c:	18c00003 	ldbu	r3,0(r3)
    1b60:	14400003 	ldbu	r17,0(r2)
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b64:	848f883a 	add	r7,r16,r18
    1b68:	a14b883a 	add	r5,r20,r5
    1b6c:	38cfc83a 	sub	r7,r7,r3
    1b70:	294b883a 	add	r5,r5,r5
    1b74:	3c4fc83a 	sub	r7,r7,r17
    1b78:	29cb883a 	add	r5,r5,r7
    1b7c:	fbdf883a 	add	r15,ra,r15
    1b80:	297fffcc 	andi	r5,r5,65535
    1b84:	d7e71817 	ldw	ra,-25504(gp)
    1b88:	2960001c 	xori	r5,r5,32768
    1b8c:	29600004 	addi	r5,r5,-32768
    1b90:	fbdf883a 	add	r15,ra,r15
    1b94:	283fc20e 	bge	r5,zero,1aa0 <__alt_data_end+0xff001aa0>
    1b98:	014bc83a 	sub	r5,zero,r5
    1b9c:	003fc006 	br	1aa0 <__alt_data_end+0xff001aa0>
    1ba0:	0085c83a 	sub	r2,zero,r2
    1ba4:	003fcc06 	br	1ad8 <__alt_data_end+0xff001ad8>
    1ba8:	d1671917 	ldw	r5,-25500(gp)
	}
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1bac:	28ffffc4 	addi	r3,r5,-1
    1bb0:	4a400044 	addi	r9,r9,1
    1bb4:	68ffb316 	blt	r13,r3,1a84 <__alt_data_end+0xff001a84>
			sum += (value < 0) ? -value : value;
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1bb8:	dfc00517 	ldw	ra,20(sp)
    1bbc:	dd000417 	ldw	r20,16(sp)
    1bc0:	dcc00317 	ldw	r19,12(sp)
    1bc4:	dc800217 	ldw	r18,8(sp)
    1bc8:	dc400117 	ldw	r17,4(sp)
    1bcc:	dc000017 	ldw	r16,0(sp)
    1bd0:	dec00604 	addi	sp,sp,24
    1bd4:	f800283a 	ret

00001bd8 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1bd8:	d0a71c17 	ldw	r2,-25488(gp)
    1bdc:	f800283a 	ret

00001be0 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1be0:	d0a71817 	ldw	r2,-25504(gp)
    1be4:	f800283a 	ret

00001be8 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1be8:	00804034 	movhi	r2,256
    1bec:	10843404 	addi	r2,r2,4304
    1bf0:	11000035 	stwio	r4,0(r2)
    1bf4:	f800283a 	ret

00001bf8 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1bf8:	00804034 	movhi	r2,256
    1bfc:	10843504 	addi	r2,r2,4308
    1c00:	11000025 	stbio	r4,0(r2)
    1c04:	f800283a 	ret

00001c08 <__divsi3>:
    1c08:	20001b16 	blt	r4,zero,1c78 <__divsi3+0x70>
    1c0c:	000f883a 	mov	r7,zero
    1c10:	28001616 	blt	r5,zero,1c6c <__divsi3+0x64>
    1c14:	200d883a 	mov	r6,r4
    1c18:	29001a2e 	bgeu	r5,r4,1c84 <__divsi3+0x7c>
    1c1c:	00800804 	movi	r2,32
    1c20:	00c00044 	movi	r3,1
    1c24:	00000106 	br	1c2c <__divsi3+0x24>
    1c28:	10000d26 	beq	r2,zero,1c60 <__divsi3+0x58>
    1c2c:	294b883a 	add	r5,r5,r5
    1c30:	10bfffc4 	addi	r2,r2,-1
    1c34:	18c7883a 	add	r3,r3,r3
    1c38:	293ffb36 	bltu	r5,r4,1c28 <__alt_data_end+0xff001c28>
    1c3c:	0005883a 	mov	r2,zero
    1c40:	18000726 	beq	r3,zero,1c60 <__divsi3+0x58>
    1c44:	0005883a 	mov	r2,zero
    1c48:	31400236 	bltu	r6,r5,1c54 <__divsi3+0x4c>
    1c4c:	314dc83a 	sub	r6,r6,r5
    1c50:	10c4b03a 	or	r2,r2,r3
    1c54:	1806d07a 	srli	r3,r3,1
    1c58:	280ad07a 	srli	r5,r5,1
    1c5c:	183ffa1e 	bne	r3,zero,1c48 <__alt_data_end+0xff001c48>
    1c60:	38000126 	beq	r7,zero,1c68 <__divsi3+0x60>
    1c64:	0085c83a 	sub	r2,zero,r2
    1c68:	f800283a 	ret
    1c6c:	014bc83a 	sub	r5,zero,r5
    1c70:	39c0005c 	xori	r7,r7,1
    1c74:	003fe706 	br	1c14 <__alt_data_end+0xff001c14>
    1c78:	0109c83a 	sub	r4,zero,r4
    1c7c:	01c00044 	movi	r7,1
    1c80:	003fe306 	br	1c10 <__alt_data_end+0xff001c10>
    1c84:	00c00044 	movi	r3,1
    1c88:	003fee06 	br	1c44 <__alt_data_end+0xff001c44>

00001c8c <__modsi3>:
    1c8c:	20001716 	blt	r4,zero,1cec <__modsi3+0x60>
    1c90:	000f883a 	mov	r7,zero
    1c94:	2005883a 	mov	r2,r4
    1c98:	28001216 	blt	r5,zero,1ce4 <__modsi3+0x58>
    1c9c:	2900162e 	bgeu	r5,r4,1cf8 <__modsi3+0x6c>
    1ca0:	01800804 	movi	r6,32
    1ca4:	00c00044 	movi	r3,1
    1ca8:	00000106 	br	1cb0 <__modsi3+0x24>
    1cac:	30000a26 	beq	r6,zero,1cd8 <__modsi3+0x4c>
    1cb0:	294b883a 	add	r5,r5,r5
    1cb4:	31bfffc4 	addi	r6,r6,-1
    1cb8:	18c7883a 	add	r3,r3,r3
    1cbc:	293ffb36 	bltu	r5,r4,1cac <__alt_data_end+0xff001cac>
    1cc0:	18000526 	beq	r3,zero,1cd8 <__modsi3+0x4c>
    1cc4:	1806d07a 	srli	r3,r3,1
    1cc8:	11400136 	bltu	r2,r5,1cd0 <__modsi3+0x44>
    1ccc:	1145c83a 	sub	r2,r2,r5
    1cd0:	280ad07a 	srli	r5,r5,1
    1cd4:	183ffb1e 	bne	r3,zero,1cc4 <__alt_data_end+0xff001cc4>
    1cd8:	38000126 	beq	r7,zero,1ce0 <__modsi3+0x54>
    1cdc:	0085c83a 	sub	r2,zero,r2
    1ce0:	f800283a 	ret
    1ce4:	014bc83a 	sub	r5,zero,r5
    1ce8:	003fec06 	br	1c9c <__alt_data_end+0xff001c9c>
    1cec:	0109c83a 	sub	r4,zero,r4
    1cf0:	01c00044 	movi	r7,1
    1cf4:	003fe706 	br	1c94 <__alt_data_end+0xff001c94>
    1cf8:	00c00044 	movi	r3,1
    1cfc:	003ff106 	br	1cc4 <__alt_data_end+0xff001cc4>

00001d00 <__udivsi3>:
    1d00:	200d883a 	mov	r6,r4
    1d04:	2900152e 	bgeu	r5,r4,1d5c <__udivsi3+0x5c>
    1d08:	28001416 	blt	r5,zero,1d5c <__udivsi3+0x5c>
    1d0c:	00800804 	movi	r2,32
    1d10:	00c00044 	movi	r3,1
    1d14:	00000206 	br	1d20 <__udivsi3+0x20>
    1d18:	10000e26 	beq	r2,zero,1d54 <__udivsi3+0x54>
    1d1c:	28000516 	blt	r5,zero,1d34 <__udivsi3+0x34>
    1d20:	294b883a 	add	r5,r5,r5
    1d24:	10bfffc4 	addi	r2,r2,-1
    1d28:	18c7883a 	add	r3,r3,r3
    1d2c:	293ffa36 	bltu	r5,r4,1d18 <__alt_data_end+0xff001d18>
    1d30:	18000826 	beq	r3,zero,1d54 <__udivsi3+0x54>
    1d34:	0005883a 	mov	r2,zero
    1d38:	31400236 	bltu	r6,r5,1d44 <__udivsi3+0x44>
    1d3c:	314dc83a 	sub	r6,r6,r5
    1d40:	10c4b03a 	or	r2,r2,r3
    1d44:	1806d07a 	srli	r3,r3,1
    1d48:	280ad07a 	srli	r5,r5,1
    1d4c:	183ffa1e 	bne	r3,zero,1d38 <__alt_data_end+0xff001d38>
    1d50:	f800283a 	ret
    1d54:	0005883a 	mov	r2,zero
    1d58:	f800283a 	ret
    1d5c:	00c00044 	movi	r3,1
    1d60:	003ff406 	br	1d34 <__alt_data_end+0xff001d34>

00001d64 <__umodsi3>:
    1d64:	2005883a 	mov	r2,r4
    1d68:	2900122e 	bgeu	r5,r4,1db4 <__umodsi3+0x50>
    1d6c:	28001116 	blt	r5,zero,1db4 <__umodsi3+0x50>
    1d70:	01800804 	movi	r6,32
    1d74:	00c00044 	movi	r3,1
    1d78:	00000206 	br	1d84 <__umodsi3+0x20>
    1d7c:	30000c26 	beq	r6,zero,1db0 <__umodsi3+0x4c>
    1d80:	28000516 	blt	r5,zero,1d98 <__umodsi3+0x34>
    1d84:	294b883a 	add	r5,r5,r5
    1d88:	31bfffc4 	addi	r6,r6,-1
    1d8c:	18c7883a 	add	r3,r3,r3
    1d90:	293ffa36 	bltu	r5,r4,1d7c <__alt_data_end+0xff001d7c>
    1d94:	18000626 	beq	r3,zero,1db0 <__umodsi3+0x4c>
    1d98:	1806d07a 	srli	r3,r3,1
    1d9c:	11400136 	bltu	r2,r5,1da4 <__umodsi3+0x40>
    1da0:	1145c83a 	sub	r2,r2,r5
    1da4:	280ad07a 	srli	r5,r5,1
    1da8:	183ffb1e 	bne	r3,zero,1d98 <__alt_data_end+0xff001d98>
    1dac:	f800283a 	ret
    1db0:	f800283a 	ret
    1db4:	00c00044 	movi	r3,1
    1db8:	003ff706 	br	1d98 <__alt_data_end+0xff001d98>

00001dbc <__divdf3>:
    1dbc:	defff204 	addi	sp,sp,-56
    1dc0:	dd400915 	stw	r21,36(sp)
    1dc4:	282ad53a 	srli	r21,r5,20
    1dc8:	dd000815 	stw	r20,32(sp)
    1dcc:	2828d7fa 	srli	r20,r5,31
    1dd0:	dc000415 	stw	r16,16(sp)
    1dd4:	04000434 	movhi	r16,16
    1dd8:	df000c15 	stw	fp,48(sp)
    1ddc:	843fffc4 	addi	r16,r16,-1
    1de0:	dfc00d15 	stw	ra,52(sp)
    1de4:	ddc00b15 	stw	r23,44(sp)
    1de8:	dd800a15 	stw	r22,40(sp)
    1dec:	dcc00715 	stw	r19,28(sp)
    1df0:	dc800615 	stw	r18,24(sp)
    1df4:	dc400515 	stw	r17,20(sp)
    1df8:	ad41ffcc 	andi	r21,r21,2047
    1dfc:	2c20703a 	and	r16,r5,r16
    1e00:	a7003fcc 	andi	fp,r20,255
    1e04:	a8006126 	beq	r21,zero,1f8c <__divdf3+0x1d0>
    1e08:	0081ffc4 	movi	r2,2047
    1e0c:	2025883a 	mov	r18,r4
    1e10:	a8803726 	beq	r21,r2,1ef0 <__divdf3+0x134>
    1e14:	80800434 	orhi	r2,r16,16
    1e18:	100490fa 	slli	r2,r2,3
    1e1c:	2020d77a 	srli	r16,r4,29
    1e20:	202490fa 	slli	r18,r4,3
    1e24:	ad7f0044 	addi	r21,r21,-1023
    1e28:	80a0b03a 	or	r16,r16,r2
    1e2c:	0027883a 	mov	r19,zero
    1e30:	0013883a 	mov	r9,zero
    1e34:	3804d53a 	srli	r2,r7,20
    1e38:	382cd7fa 	srli	r22,r7,31
    1e3c:	04400434 	movhi	r17,16
    1e40:	8c7fffc4 	addi	r17,r17,-1
    1e44:	1081ffcc 	andi	r2,r2,2047
    1e48:	3011883a 	mov	r8,r6
    1e4c:	3c62703a 	and	r17,r7,r17
    1e50:	b5c03fcc 	andi	r23,r22,255
    1e54:	10006c26 	beq	r2,zero,2008 <__divdf3+0x24c>
    1e58:	00c1ffc4 	movi	r3,2047
    1e5c:	10c06426 	beq	r2,r3,1ff0 <__divdf3+0x234>
    1e60:	88c00434 	orhi	r3,r17,16
    1e64:	180690fa 	slli	r3,r3,3
    1e68:	3022d77a 	srli	r17,r6,29
    1e6c:	301090fa 	slli	r8,r6,3
    1e70:	10bf0044 	addi	r2,r2,-1023
    1e74:	88e2b03a 	or	r17,r17,r3
    1e78:	000f883a 	mov	r7,zero
    1e7c:	a58cf03a 	xor	r6,r20,r22
    1e80:	3cc8b03a 	or	r4,r7,r19
    1e84:	a8abc83a 	sub	r21,r21,r2
    1e88:	008003c4 	movi	r2,15
    1e8c:	3007883a 	mov	r3,r6
    1e90:	34c03fcc 	andi	r19,r6,255
    1e94:	11009036 	bltu	r2,r4,20d8 <__divdf3+0x31c>
    1e98:	200890ba 	slli	r4,r4,2
    1e9c:	00800034 	movhi	r2,0
    1ea0:	1087ac04 	addi	r2,r2,7856
    1ea4:	2089883a 	add	r4,r4,r2
    1ea8:	20800017 	ldw	r2,0(r4)
    1eac:	1000683a 	jmp	r2
    1eb0:	000020d8 	cmpnei	zero,zero,131
    1eb4:	00001f28 	cmpgeui	zero,zero,124
    1eb8:	000020c8 	cmpgei	zero,zero,131
    1ebc:	00001f1c 	xori	zero,zero,124
    1ec0:	000020c8 	cmpgei	zero,zero,131
    1ec4:	0000209c 	xori	zero,zero,130
    1ec8:	000020c8 	cmpgei	zero,zero,131
    1ecc:	00001f1c 	xori	zero,zero,124
    1ed0:	00001f28 	cmpgeui	zero,zero,124
    1ed4:	00001f28 	cmpgeui	zero,zero,124
    1ed8:	0000209c 	xori	zero,zero,130
    1edc:	00001f1c 	xori	zero,zero,124
    1ee0:	00001f0c 	andi	zero,zero,124
    1ee4:	00001f0c 	andi	zero,zero,124
    1ee8:	00001f0c 	andi	zero,zero,124
    1eec:	000023bc 	xorhi	zero,zero,142
    1ef0:	2404b03a 	or	r2,r4,r16
    1ef4:	1000661e 	bne	r2,zero,2090 <__divdf3+0x2d4>
    1ef8:	04c00204 	movi	r19,8
    1efc:	0021883a 	mov	r16,zero
    1f00:	0025883a 	mov	r18,zero
    1f04:	02400084 	movi	r9,2
    1f08:	003fca06 	br	1e34 <__alt_data_end+0xff001e34>
    1f0c:	8023883a 	mov	r17,r16
    1f10:	9011883a 	mov	r8,r18
    1f14:	e02f883a 	mov	r23,fp
    1f18:	480f883a 	mov	r7,r9
    1f1c:	00800084 	movi	r2,2
    1f20:	3881311e 	bne	r7,r2,23e8 <__divdf3+0x62c>
    1f24:	b827883a 	mov	r19,r23
    1f28:	98c0004c 	andi	r3,r19,1
    1f2c:	0081ffc4 	movi	r2,2047
    1f30:	000b883a 	mov	r5,zero
    1f34:	0025883a 	mov	r18,zero
    1f38:	1004953a 	slli	r2,r2,20
    1f3c:	18c03fcc 	andi	r3,r3,255
    1f40:	04400434 	movhi	r17,16
    1f44:	8c7fffc4 	addi	r17,r17,-1
    1f48:	180697fa 	slli	r3,r3,31
    1f4c:	2c4a703a 	and	r5,r5,r17
    1f50:	288ab03a 	or	r5,r5,r2
    1f54:	28c6b03a 	or	r3,r5,r3
    1f58:	9005883a 	mov	r2,r18
    1f5c:	dfc00d17 	ldw	ra,52(sp)
    1f60:	df000c17 	ldw	fp,48(sp)
    1f64:	ddc00b17 	ldw	r23,44(sp)
    1f68:	dd800a17 	ldw	r22,40(sp)
    1f6c:	dd400917 	ldw	r21,36(sp)
    1f70:	dd000817 	ldw	r20,32(sp)
    1f74:	dcc00717 	ldw	r19,28(sp)
    1f78:	dc800617 	ldw	r18,24(sp)
    1f7c:	dc400517 	ldw	r17,20(sp)
    1f80:	dc000417 	ldw	r16,16(sp)
    1f84:	dec00e04 	addi	sp,sp,56
    1f88:	f800283a 	ret
    1f8c:	2404b03a 	or	r2,r4,r16
    1f90:	2027883a 	mov	r19,r4
    1f94:	10003926 	beq	r2,zero,207c <__divdf3+0x2c0>
    1f98:	80012e26 	beq	r16,zero,2454 <__divdf3+0x698>
    1f9c:	8009883a 	mov	r4,r16
    1fa0:	d9800315 	stw	r6,12(sp)
    1fa4:	d9c00215 	stw	r7,8(sp)
    1fa8:	000274c0 	call	274c <__clzsi2>
    1fac:	d9800317 	ldw	r6,12(sp)
    1fb0:	d9c00217 	ldw	r7,8(sp)
    1fb4:	113ffd44 	addi	r4,r2,-11
    1fb8:	00c00704 	movi	r3,28
    1fbc:	19012116 	blt	r3,r4,2444 <__divdf3+0x688>
    1fc0:	00c00744 	movi	r3,29
    1fc4:	147ffe04 	addi	r17,r2,-8
    1fc8:	1907c83a 	sub	r3,r3,r4
    1fcc:	8460983a 	sll	r16,r16,r17
    1fd0:	98c6d83a 	srl	r3,r19,r3
    1fd4:	9c64983a 	sll	r18,r19,r17
    1fd8:	1c20b03a 	or	r16,r3,r16
    1fdc:	1080fcc4 	addi	r2,r2,1011
    1fe0:	00abc83a 	sub	r21,zero,r2
    1fe4:	0027883a 	mov	r19,zero
    1fe8:	0013883a 	mov	r9,zero
    1fec:	003f9106 	br	1e34 <__alt_data_end+0xff001e34>
    1ff0:	3446b03a 	or	r3,r6,r17
    1ff4:	18001f1e 	bne	r3,zero,2074 <__divdf3+0x2b8>
    1ff8:	0023883a 	mov	r17,zero
    1ffc:	0011883a 	mov	r8,zero
    2000:	01c00084 	movi	r7,2
    2004:	003f9d06 	br	1e7c <__alt_data_end+0xff001e7c>
    2008:	3446b03a 	or	r3,r6,r17
    200c:	18001526 	beq	r3,zero,2064 <__divdf3+0x2a8>
    2010:	88011b26 	beq	r17,zero,2480 <__divdf3+0x6c4>
    2014:	8809883a 	mov	r4,r17
    2018:	d9800315 	stw	r6,12(sp)
    201c:	da400115 	stw	r9,4(sp)
    2020:	000274c0 	call	274c <__clzsi2>
    2024:	d9800317 	ldw	r6,12(sp)
    2028:	da400117 	ldw	r9,4(sp)
    202c:	113ffd44 	addi	r4,r2,-11
    2030:	00c00704 	movi	r3,28
    2034:	19010e16 	blt	r3,r4,2470 <__divdf3+0x6b4>
    2038:	00c00744 	movi	r3,29
    203c:	123ffe04 	addi	r8,r2,-8
    2040:	1907c83a 	sub	r3,r3,r4
    2044:	8a22983a 	sll	r17,r17,r8
    2048:	30c6d83a 	srl	r3,r6,r3
    204c:	3210983a 	sll	r8,r6,r8
    2050:	1c62b03a 	or	r17,r3,r17
    2054:	1080fcc4 	addi	r2,r2,1011
    2058:	0085c83a 	sub	r2,zero,r2
    205c:	000f883a 	mov	r7,zero
    2060:	003f8606 	br	1e7c <__alt_data_end+0xff001e7c>
    2064:	0023883a 	mov	r17,zero
    2068:	0011883a 	mov	r8,zero
    206c:	01c00044 	movi	r7,1
    2070:	003f8206 	br	1e7c <__alt_data_end+0xff001e7c>
    2074:	01c000c4 	movi	r7,3
    2078:	003f8006 	br	1e7c <__alt_data_end+0xff001e7c>
    207c:	04c00104 	movi	r19,4
    2080:	0021883a 	mov	r16,zero
    2084:	0025883a 	mov	r18,zero
    2088:	02400044 	movi	r9,1
    208c:	003f6906 	br	1e34 <__alt_data_end+0xff001e34>
    2090:	04c00304 	movi	r19,12
    2094:	024000c4 	movi	r9,3
    2098:	003f6606 	br	1e34 <__alt_data_end+0xff001e34>
    209c:	01400434 	movhi	r5,16
    20a0:	0007883a 	mov	r3,zero
    20a4:	297fffc4 	addi	r5,r5,-1
    20a8:	04bfffc4 	movi	r18,-1
    20ac:	0081ffc4 	movi	r2,2047
    20b0:	003fa106 	br	1f38 <__alt_data_end+0xff001f38>
    20b4:	00c00044 	movi	r3,1
    20b8:	1887c83a 	sub	r3,r3,r2
    20bc:	01000e04 	movi	r4,56
    20c0:	20c1210e 	bge	r4,r3,2548 <__divdf3+0x78c>
    20c4:	98c0004c 	andi	r3,r19,1
    20c8:	0005883a 	mov	r2,zero
    20cc:	000b883a 	mov	r5,zero
    20d0:	0025883a 	mov	r18,zero
    20d4:	003f9806 	br	1f38 <__alt_data_end+0xff001f38>
    20d8:	8c00fd36 	bltu	r17,r16,24d0 <__divdf3+0x714>
    20dc:	8440fb26 	beq	r16,r17,24cc <__divdf3+0x710>
    20e0:	8007883a 	mov	r3,r16
    20e4:	ad7fffc4 	addi	r21,r21,-1
    20e8:	0021883a 	mov	r16,zero
    20ec:	4004d63a 	srli	r2,r8,24
    20f0:	8822923a 	slli	r17,r17,8
    20f4:	1809883a 	mov	r4,r3
    20f8:	402c923a 	slli	r22,r8,8
    20fc:	88b8b03a 	or	fp,r17,r2
    2100:	e028d43a 	srli	r20,fp,16
    2104:	d8c00015 	stw	r3,0(sp)
    2108:	e5ffffcc 	andi	r23,fp,65535
    210c:	a00b883a 	mov	r5,r20
    2110:	0001d000 	call	1d00 <__udivsi3>
    2114:	d8c00017 	ldw	r3,0(sp)
    2118:	a00b883a 	mov	r5,r20
    211c:	d8800315 	stw	r2,12(sp)
    2120:	1809883a 	mov	r4,r3
    2124:	0001d640 	call	1d64 <__umodsi3>
    2128:	d9800317 	ldw	r6,12(sp)
    212c:	1006943a 	slli	r3,r2,16
    2130:	9004d43a 	srli	r2,r18,16
    2134:	b9a3383a 	mul	r17,r23,r6
    2138:	10c4b03a 	or	r2,r2,r3
    213c:	1440062e 	bgeu	r2,r17,2158 <__divdf3+0x39c>
    2140:	1705883a 	add	r2,r2,fp
    2144:	30ffffc4 	addi	r3,r6,-1
    2148:	1700ee36 	bltu	r2,fp,2504 <__divdf3+0x748>
    214c:	1440ed2e 	bgeu	r2,r17,2504 <__divdf3+0x748>
    2150:	31bfff84 	addi	r6,r6,-2
    2154:	1705883a 	add	r2,r2,fp
    2158:	1463c83a 	sub	r17,r2,r17
    215c:	a00b883a 	mov	r5,r20
    2160:	8809883a 	mov	r4,r17
    2164:	d9800315 	stw	r6,12(sp)
    2168:	0001d000 	call	1d00 <__udivsi3>
    216c:	a00b883a 	mov	r5,r20
    2170:	8809883a 	mov	r4,r17
    2174:	d8800215 	stw	r2,8(sp)
    2178:	0001d640 	call	1d64 <__umodsi3>
    217c:	d9c00217 	ldw	r7,8(sp)
    2180:	1004943a 	slli	r2,r2,16
    2184:	94bfffcc 	andi	r18,r18,65535
    2188:	b9d1383a 	mul	r8,r23,r7
    218c:	90a4b03a 	or	r18,r18,r2
    2190:	d9800317 	ldw	r6,12(sp)
    2194:	9200062e 	bgeu	r18,r8,21b0 <__divdf3+0x3f4>
    2198:	9725883a 	add	r18,r18,fp
    219c:	38bfffc4 	addi	r2,r7,-1
    21a0:	9700d636 	bltu	r18,fp,24fc <__divdf3+0x740>
    21a4:	9200d52e 	bgeu	r18,r8,24fc <__divdf3+0x740>
    21a8:	39ffff84 	addi	r7,r7,-2
    21ac:	9725883a 	add	r18,r18,fp
    21b0:	3004943a 	slli	r2,r6,16
    21b4:	b012d43a 	srli	r9,r22,16
    21b8:	b1bfffcc 	andi	r6,r22,65535
    21bc:	11e2b03a 	or	r17,r2,r7
    21c0:	8806d43a 	srli	r3,r17,16
    21c4:	893fffcc 	andi	r4,r17,65535
    21c8:	218b383a 	mul	r5,r4,r6
    21cc:	30c5383a 	mul	r2,r6,r3
    21d0:	2249383a 	mul	r4,r4,r9
    21d4:	280ed43a 	srli	r7,r5,16
    21d8:	9225c83a 	sub	r18,r18,r8
    21dc:	2089883a 	add	r4,r4,r2
    21e0:	3909883a 	add	r4,r7,r4
    21e4:	1a47383a 	mul	r3,r3,r9
    21e8:	2080022e 	bgeu	r4,r2,21f4 <__divdf3+0x438>
    21ec:	00800074 	movhi	r2,1
    21f0:	1887883a 	add	r3,r3,r2
    21f4:	2004d43a 	srli	r2,r4,16
    21f8:	2008943a 	slli	r4,r4,16
    21fc:	297fffcc 	andi	r5,r5,65535
    2200:	10c7883a 	add	r3,r2,r3
    2204:	2149883a 	add	r4,r4,r5
    2208:	90c0a536 	bltu	r18,r3,24a0 <__divdf3+0x6e4>
    220c:	90c0bf26 	beq	r18,r3,250c <__divdf3+0x750>
    2210:	90c7c83a 	sub	r3,r18,r3
    2214:	810fc83a 	sub	r7,r16,r4
    2218:	81e5803a 	cmpltu	r18,r16,r7
    221c:	1ca5c83a 	sub	r18,r3,r18
    2220:	e480c126 	beq	fp,r18,2528 <__divdf3+0x76c>
    2224:	a00b883a 	mov	r5,r20
    2228:	9009883a 	mov	r4,r18
    222c:	d9800315 	stw	r6,12(sp)
    2230:	d9c00215 	stw	r7,8(sp)
    2234:	da400115 	stw	r9,4(sp)
    2238:	0001d000 	call	1d00 <__udivsi3>
    223c:	a00b883a 	mov	r5,r20
    2240:	9009883a 	mov	r4,r18
    2244:	d8800015 	stw	r2,0(sp)
    2248:	0001d640 	call	1d64 <__umodsi3>
    224c:	d9c00217 	ldw	r7,8(sp)
    2250:	da000017 	ldw	r8,0(sp)
    2254:	1006943a 	slli	r3,r2,16
    2258:	3804d43a 	srli	r2,r7,16
    225c:	ba21383a 	mul	r16,r23,r8
    2260:	d9800317 	ldw	r6,12(sp)
    2264:	10c4b03a 	or	r2,r2,r3
    2268:	da400117 	ldw	r9,4(sp)
    226c:	1400062e 	bgeu	r2,r16,2288 <__divdf3+0x4cc>
    2270:	1705883a 	add	r2,r2,fp
    2274:	40ffffc4 	addi	r3,r8,-1
    2278:	1700ad36 	bltu	r2,fp,2530 <__divdf3+0x774>
    227c:	1400ac2e 	bgeu	r2,r16,2530 <__divdf3+0x774>
    2280:	423fff84 	addi	r8,r8,-2
    2284:	1705883a 	add	r2,r2,fp
    2288:	1421c83a 	sub	r16,r2,r16
    228c:	a00b883a 	mov	r5,r20
    2290:	8009883a 	mov	r4,r16
    2294:	d9800315 	stw	r6,12(sp)
    2298:	d9c00215 	stw	r7,8(sp)
    229c:	da000015 	stw	r8,0(sp)
    22a0:	da400115 	stw	r9,4(sp)
    22a4:	0001d000 	call	1d00 <__udivsi3>
    22a8:	8009883a 	mov	r4,r16
    22ac:	a00b883a 	mov	r5,r20
    22b0:	1025883a 	mov	r18,r2
    22b4:	0001d640 	call	1d64 <__umodsi3>
    22b8:	d9c00217 	ldw	r7,8(sp)
    22bc:	1004943a 	slli	r2,r2,16
    22c0:	bcaf383a 	mul	r23,r23,r18
    22c4:	393fffcc 	andi	r4,r7,65535
    22c8:	2088b03a 	or	r4,r4,r2
    22cc:	d9800317 	ldw	r6,12(sp)
    22d0:	da000017 	ldw	r8,0(sp)
    22d4:	da400117 	ldw	r9,4(sp)
    22d8:	25c0062e 	bgeu	r4,r23,22f4 <__divdf3+0x538>
    22dc:	2709883a 	add	r4,r4,fp
    22e0:	90bfffc4 	addi	r2,r18,-1
    22e4:	27009436 	bltu	r4,fp,2538 <__divdf3+0x77c>
    22e8:	25c0932e 	bgeu	r4,r23,2538 <__divdf3+0x77c>
    22ec:	94bfff84 	addi	r18,r18,-2
    22f0:	2709883a 	add	r4,r4,fp
    22f4:	4004943a 	slli	r2,r8,16
    22f8:	25efc83a 	sub	r23,r4,r23
    22fc:	1490b03a 	or	r8,r2,r18
    2300:	4008d43a 	srli	r4,r8,16
    2304:	40ffffcc 	andi	r3,r8,65535
    2308:	30c5383a 	mul	r2,r6,r3
    230c:	1a47383a 	mul	r3,r3,r9
    2310:	310d383a 	mul	r6,r6,r4
    2314:	100ad43a 	srli	r5,r2,16
    2318:	4913383a 	mul	r9,r9,r4
    231c:	1987883a 	add	r3,r3,r6
    2320:	28c7883a 	add	r3,r5,r3
    2324:	1980022e 	bgeu	r3,r6,2330 <__divdf3+0x574>
    2328:	01000074 	movhi	r4,1
    232c:	4913883a 	add	r9,r9,r4
    2330:	1808d43a 	srli	r4,r3,16
    2334:	1806943a 	slli	r3,r3,16
    2338:	10bfffcc 	andi	r2,r2,65535
    233c:	2253883a 	add	r9,r4,r9
    2340:	1887883a 	add	r3,r3,r2
    2344:	ba403836 	bltu	r23,r9,2428 <__divdf3+0x66c>
    2348:	ba403626 	beq	r23,r9,2424 <__divdf3+0x668>
    234c:	42000054 	ori	r8,r8,1
    2350:	a880ffc4 	addi	r2,r21,1023
    2354:	00bf570e 	bge	zero,r2,20b4 <__alt_data_end+0xff0020b4>
    2358:	40c001cc 	andi	r3,r8,7
    235c:	18000726 	beq	r3,zero,237c <__divdf3+0x5c0>
    2360:	40c003cc 	andi	r3,r8,15
    2364:	01000104 	movi	r4,4
    2368:	19000426 	beq	r3,r4,237c <__divdf3+0x5c0>
    236c:	4107883a 	add	r3,r8,r4
    2370:	1a11803a 	cmpltu	r8,r3,r8
    2374:	8a23883a 	add	r17,r17,r8
    2378:	1811883a 	mov	r8,r3
    237c:	88c0402c 	andhi	r3,r17,256
    2380:	18000426 	beq	r3,zero,2394 <__divdf3+0x5d8>
    2384:	00ffc034 	movhi	r3,65280
    2388:	18ffffc4 	addi	r3,r3,-1
    238c:	a8810004 	addi	r2,r21,1024
    2390:	88e2703a 	and	r17,r17,r3
    2394:	00c1ff84 	movi	r3,2046
    2398:	18bee316 	blt	r3,r2,1f28 <__alt_data_end+0xff001f28>
    239c:	8824977a 	slli	r18,r17,29
    23a0:	4010d0fa 	srli	r8,r8,3
    23a4:	8822927a 	slli	r17,r17,9
    23a8:	1081ffcc 	andi	r2,r2,2047
    23ac:	9224b03a 	or	r18,r18,r8
    23b0:	880ad33a 	srli	r5,r17,12
    23b4:	98c0004c 	andi	r3,r19,1
    23b8:	003edf06 	br	1f38 <__alt_data_end+0xff001f38>
    23bc:	8080022c 	andhi	r2,r16,8
    23c0:	10001226 	beq	r2,zero,240c <__divdf3+0x650>
    23c4:	8880022c 	andhi	r2,r17,8
    23c8:	1000101e 	bne	r2,zero,240c <__divdf3+0x650>
    23cc:	00800434 	movhi	r2,16
    23d0:	89400234 	orhi	r5,r17,8
    23d4:	10bfffc4 	addi	r2,r2,-1
    23d8:	b007883a 	mov	r3,r22
    23dc:	288a703a 	and	r5,r5,r2
    23e0:	4025883a 	mov	r18,r8
    23e4:	003f3106 	br	20ac <__alt_data_end+0xff0020ac>
    23e8:	008000c4 	movi	r2,3
    23ec:	3880a626 	beq	r7,r2,2688 <__divdf3+0x8cc>
    23f0:	00800044 	movi	r2,1
    23f4:	3880521e 	bne	r7,r2,2540 <__divdf3+0x784>
    23f8:	b807883a 	mov	r3,r23
    23fc:	0005883a 	mov	r2,zero
    2400:	000b883a 	mov	r5,zero
    2404:	0025883a 	mov	r18,zero
    2408:	003ecb06 	br	1f38 <__alt_data_end+0xff001f38>
    240c:	00800434 	movhi	r2,16
    2410:	81400234 	orhi	r5,r16,8
    2414:	10bfffc4 	addi	r2,r2,-1
    2418:	a007883a 	mov	r3,r20
    241c:	288a703a 	and	r5,r5,r2
    2420:	003f2206 	br	20ac <__alt_data_end+0xff0020ac>
    2424:	183fca26 	beq	r3,zero,2350 <__alt_data_end+0xff002350>
    2428:	e5ef883a 	add	r23,fp,r23
    242c:	40bfffc4 	addi	r2,r8,-1
    2430:	bf00392e 	bgeu	r23,fp,2518 <__divdf3+0x75c>
    2434:	1011883a 	mov	r8,r2
    2438:	ba7fc41e 	bne	r23,r9,234c <__alt_data_end+0xff00234c>
    243c:	b0ffc31e 	bne	r22,r3,234c <__alt_data_end+0xff00234c>
    2440:	003fc306 	br	2350 <__alt_data_end+0xff002350>
    2444:	143ff604 	addi	r16,r2,-40
    2448:	9c20983a 	sll	r16,r19,r16
    244c:	0025883a 	mov	r18,zero
    2450:	003ee206 	br	1fdc <__alt_data_end+0xff001fdc>
    2454:	d9800315 	stw	r6,12(sp)
    2458:	d9c00215 	stw	r7,8(sp)
    245c:	000274c0 	call	274c <__clzsi2>
    2460:	10800804 	addi	r2,r2,32
    2464:	d9c00217 	ldw	r7,8(sp)
    2468:	d9800317 	ldw	r6,12(sp)
    246c:	003ed106 	br	1fb4 <__alt_data_end+0xff001fb4>
    2470:	147ff604 	addi	r17,r2,-40
    2474:	3462983a 	sll	r17,r6,r17
    2478:	0011883a 	mov	r8,zero
    247c:	003ef506 	br	2054 <__alt_data_end+0xff002054>
    2480:	3009883a 	mov	r4,r6
    2484:	d9800315 	stw	r6,12(sp)
    2488:	da400115 	stw	r9,4(sp)
    248c:	000274c0 	call	274c <__clzsi2>
    2490:	10800804 	addi	r2,r2,32
    2494:	da400117 	ldw	r9,4(sp)
    2498:	d9800317 	ldw	r6,12(sp)
    249c:	003ee306 	br	202c <__alt_data_end+0xff00202c>
    24a0:	85a1883a 	add	r16,r16,r22
    24a4:	8585803a 	cmpltu	r2,r16,r22
    24a8:	1705883a 	add	r2,r2,fp
    24ac:	14a5883a 	add	r18,r2,r18
    24b0:	88bfffc4 	addi	r2,r17,-1
    24b4:	e4800c2e 	bgeu	fp,r18,24e8 <__divdf3+0x72c>
    24b8:	90c03e36 	bltu	r18,r3,25b4 <__divdf3+0x7f8>
    24bc:	1c806926 	beq	r3,r18,2664 <__divdf3+0x8a8>
    24c0:	90c7c83a 	sub	r3,r18,r3
    24c4:	1023883a 	mov	r17,r2
    24c8:	003f5206 	br	2214 <__alt_data_end+0xff002214>
    24cc:	923f0436 	bltu	r18,r8,20e0 <__alt_data_end+0xff0020e0>
    24d0:	800897fa 	slli	r4,r16,31
    24d4:	9004d07a 	srli	r2,r18,1
    24d8:	8006d07a 	srli	r3,r16,1
    24dc:	902097fa 	slli	r16,r18,31
    24e0:	20a4b03a 	or	r18,r4,r2
    24e4:	003f0106 	br	20ec <__alt_data_end+0xff0020ec>
    24e8:	e4bff51e 	bne	fp,r18,24c0 <__alt_data_end+0xff0024c0>
    24ec:	85bff22e 	bgeu	r16,r22,24b8 <__alt_data_end+0xff0024b8>
    24f0:	e0c7c83a 	sub	r3,fp,r3
    24f4:	1023883a 	mov	r17,r2
    24f8:	003f4606 	br	2214 <__alt_data_end+0xff002214>
    24fc:	100f883a 	mov	r7,r2
    2500:	003f2b06 	br	21b0 <__alt_data_end+0xff0021b0>
    2504:	180d883a 	mov	r6,r3
    2508:	003f1306 	br	2158 <__alt_data_end+0xff002158>
    250c:	813fe436 	bltu	r16,r4,24a0 <__alt_data_end+0xff0024a0>
    2510:	0007883a 	mov	r3,zero
    2514:	003f3f06 	br	2214 <__alt_data_end+0xff002214>
    2518:	ba402c36 	bltu	r23,r9,25cc <__divdf3+0x810>
    251c:	4dc05426 	beq	r9,r23,2670 <__divdf3+0x8b4>
    2520:	1011883a 	mov	r8,r2
    2524:	003f8906 	br	234c <__alt_data_end+0xff00234c>
    2528:	023fffc4 	movi	r8,-1
    252c:	003f8806 	br	2350 <__alt_data_end+0xff002350>
    2530:	1811883a 	mov	r8,r3
    2534:	003f5406 	br	2288 <__alt_data_end+0xff002288>
    2538:	1025883a 	mov	r18,r2
    253c:	003f6d06 	br	22f4 <__alt_data_end+0xff0022f4>
    2540:	b827883a 	mov	r19,r23
    2544:	003f8206 	br	2350 <__alt_data_end+0xff002350>
    2548:	010007c4 	movi	r4,31
    254c:	20c02616 	blt	r4,r3,25e8 <__divdf3+0x82c>
    2550:	00800804 	movi	r2,32
    2554:	10c5c83a 	sub	r2,r2,r3
    2558:	888a983a 	sll	r5,r17,r2
    255c:	40c8d83a 	srl	r4,r8,r3
    2560:	4084983a 	sll	r2,r8,r2
    2564:	88e2d83a 	srl	r17,r17,r3
    2568:	2906b03a 	or	r3,r5,r4
    256c:	1004c03a 	cmpne	r2,r2,zero
    2570:	1886b03a 	or	r3,r3,r2
    2574:	188001cc 	andi	r2,r3,7
    2578:	10000726 	beq	r2,zero,2598 <__divdf3+0x7dc>
    257c:	188003cc 	andi	r2,r3,15
    2580:	01000104 	movi	r4,4
    2584:	11000426 	beq	r2,r4,2598 <__divdf3+0x7dc>
    2588:	1805883a 	mov	r2,r3
    258c:	10c00104 	addi	r3,r2,4
    2590:	1885803a 	cmpltu	r2,r3,r2
    2594:	88a3883a 	add	r17,r17,r2
    2598:	8880202c 	andhi	r2,r17,128
    259c:	10002726 	beq	r2,zero,263c <__divdf3+0x880>
    25a0:	98c0004c 	andi	r3,r19,1
    25a4:	00800044 	movi	r2,1
    25a8:	000b883a 	mov	r5,zero
    25ac:	0025883a 	mov	r18,zero
    25b0:	003e6106 	br	1f38 <__alt_data_end+0xff001f38>
    25b4:	85a1883a 	add	r16,r16,r22
    25b8:	8585803a 	cmpltu	r2,r16,r22
    25bc:	1705883a 	add	r2,r2,fp
    25c0:	14a5883a 	add	r18,r2,r18
    25c4:	8c7fff84 	addi	r17,r17,-2
    25c8:	003f1106 	br	2210 <__alt_data_end+0xff002210>
    25cc:	b589883a 	add	r4,r22,r22
    25d0:	25ad803a 	cmpltu	r22,r4,r22
    25d4:	b739883a 	add	fp,r22,fp
    25d8:	40bfff84 	addi	r2,r8,-2
    25dc:	bf2f883a 	add	r23,r23,fp
    25e0:	202d883a 	mov	r22,r4
    25e4:	003f9306 	br	2434 <__alt_data_end+0xff002434>
    25e8:	013ff844 	movi	r4,-31
    25ec:	2085c83a 	sub	r2,r4,r2
    25f0:	8888d83a 	srl	r4,r17,r2
    25f4:	00800804 	movi	r2,32
    25f8:	18802126 	beq	r3,r2,2680 <__divdf3+0x8c4>
    25fc:	00801004 	movi	r2,64
    2600:	10c5c83a 	sub	r2,r2,r3
    2604:	8884983a 	sll	r2,r17,r2
    2608:	1204b03a 	or	r2,r2,r8
    260c:	1004c03a 	cmpne	r2,r2,zero
    2610:	2084b03a 	or	r2,r4,r2
    2614:	144001cc 	andi	r17,r2,7
    2618:	88000d1e 	bne	r17,zero,2650 <__divdf3+0x894>
    261c:	000b883a 	mov	r5,zero
    2620:	1024d0fa 	srli	r18,r2,3
    2624:	98c0004c 	andi	r3,r19,1
    2628:	0005883a 	mov	r2,zero
    262c:	9464b03a 	or	r18,r18,r17
    2630:	003e4106 	br	1f38 <__alt_data_end+0xff001f38>
    2634:	1007883a 	mov	r3,r2
    2638:	0023883a 	mov	r17,zero
    263c:	880a927a 	slli	r5,r17,9
    2640:	1805883a 	mov	r2,r3
    2644:	8822977a 	slli	r17,r17,29
    2648:	280ad33a 	srli	r5,r5,12
    264c:	003ff406 	br	2620 <__alt_data_end+0xff002620>
    2650:	10c003cc 	andi	r3,r2,15
    2654:	01000104 	movi	r4,4
    2658:	193ff626 	beq	r3,r4,2634 <__alt_data_end+0xff002634>
    265c:	0023883a 	mov	r17,zero
    2660:	003fca06 	br	258c <__alt_data_end+0xff00258c>
    2664:	813fd336 	bltu	r16,r4,25b4 <__alt_data_end+0xff0025b4>
    2668:	1023883a 	mov	r17,r2
    266c:	003fa806 	br	2510 <__alt_data_end+0xff002510>
    2670:	b0ffd636 	bltu	r22,r3,25cc <__alt_data_end+0xff0025cc>
    2674:	1011883a 	mov	r8,r2
    2678:	b0ff341e 	bne	r22,r3,234c <__alt_data_end+0xff00234c>
    267c:	003f3406 	br	2350 <__alt_data_end+0xff002350>
    2680:	0005883a 	mov	r2,zero
    2684:	003fe006 	br	2608 <__alt_data_end+0xff002608>
    2688:	00800434 	movhi	r2,16
    268c:	89400234 	orhi	r5,r17,8
    2690:	10bfffc4 	addi	r2,r2,-1
    2694:	b807883a 	mov	r3,r23
    2698:	288a703a 	and	r5,r5,r2
    269c:	4025883a 	mov	r18,r8
    26a0:	003e8206 	br	20ac <__alt_data_end+0xff0020ac>

000026a4 <__floatunsidf>:
    26a4:	defffe04 	addi	sp,sp,-8
    26a8:	dc000015 	stw	r16,0(sp)
    26ac:	dfc00115 	stw	ra,4(sp)
    26b0:	2021883a 	mov	r16,r4
    26b4:	20002226 	beq	r4,zero,2740 <__floatunsidf+0x9c>
    26b8:	000274c0 	call	274c <__clzsi2>
    26bc:	01010784 	movi	r4,1054
    26c0:	2089c83a 	sub	r4,r4,r2
    26c4:	01810cc4 	movi	r6,1075
    26c8:	310dc83a 	sub	r6,r6,r4
    26cc:	00c007c4 	movi	r3,31
    26d0:	1980120e 	bge	r3,r6,271c <__floatunsidf+0x78>
    26d4:	00c104c4 	movi	r3,1043
    26d8:	1907c83a 	sub	r3,r3,r4
    26dc:	80ca983a 	sll	r5,r16,r3
    26e0:	00800434 	movhi	r2,16
    26e4:	10bfffc4 	addi	r2,r2,-1
    26e8:	2101ffcc 	andi	r4,r4,2047
    26ec:	0021883a 	mov	r16,zero
    26f0:	288a703a 	and	r5,r5,r2
    26f4:	2008953a 	slli	r4,r4,20
    26f8:	00c00434 	movhi	r3,16
    26fc:	18ffffc4 	addi	r3,r3,-1
    2700:	28c6703a 	and	r3,r5,r3
    2704:	8005883a 	mov	r2,r16
    2708:	1906b03a 	or	r3,r3,r4
    270c:	dfc00117 	ldw	ra,4(sp)
    2710:	dc000017 	ldw	r16,0(sp)
    2714:	dec00204 	addi	sp,sp,8
    2718:	f800283a 	ret
    271c:	00c002c4 	movi	r3,11
    2720:	188bc83a 	sub	r5,r3,r2
    2724:	814ad83a 	srl	r5,r16,r5
    2728:	00c00434 	movhi	r3,16
    272c:	18ffffc4 	addi	r3,r3,-1
    2730:	81a0983a 	sll	r16,r16,r6
    2734:	2101ffcc 	andi	r4,r4,2047
    2738:	28ca703a 	and	r5,r5,r3
    273c:	003fed06 	br	26f4 <__alt_data_end+0xff0026f4>
    2740:	0009883a 	mov	r4,zero
    2744:	000b883a 	mov	r5,zero
    2748:	003fea06 	br	26f4 <__alt_data_end+0xff0026f4>

0000274c <__clzsi2>:
    274c:	00bfffd4 	movui	r2,65535
    2750:	11000536 	bltu	r2,r4,2768 <__clzsi2+0x1c>
    2754:	00803fc4 	movi	r2,255
    2758:	11000f36 	bltu	r2,r4,2798 <__clzsi2+0x4c>
    275c:	00800804 	movi	r2,32
    2760:	0007883a 	mov	r3,zero
    2764:	00000506 	br	277c <__clzsi2+0x30>
    2768:	00804034 	movhi	r2,256
    276c:	10bfffc4 	addi	r2,r2,-1
    2770:	11000c2e 	bgeu	r2,r4,27a4 <__clzsi2+0x58>
    2774:	00800204 	movi	r2,8
    2778:	00c00604 	movi	r3,24
    277c:	20c8d83a 	srl	r4,r4,r3
    2780:	00c00074 	movhi	r3,1
    2784:	18c51f84 	addi	r3,r3,5246
    2788:	1909883a 	add	r4,r3,r4
    278c:	20c00003 	ldbu	r3,0(r4)
    2790:	10c5c83a 	sub	r2,r2,r3
    2794:	f800283a 	ret
    2798:	00800604 	movi	r2,24
    279c:	00c00204 	movi	r3,8
    27a0:	003ff606 	br	277c <__alt_data_end+0xff00277c>
    27a4:	00800404 	movi	r2,16
    27a8:	1007883a 	mov	r3,r2
    27ac:	003ff306 	br	277c <__alt_data_end+0xff00277c>

000027b0 <malloc>:
    27b0:	00800074 	movhi	r2,1
    27b4:	108ccb04 	addi	r2,r2,13100
    27b8:	200b883a 	mov	r5,r4
    27bc:	11000017 	ldw	r4,0(r2)
    27c0:	00027d81 	jmpi	27d8 <_malloc_r>

000027c4 <free>:
    27c4:	00800074 	movhi	r2,1
    27c8:	108ccb04 	addi	r2,r2,13100
    27cc:	200b883a 	mov	r5,r4
    27d0:	11000017 	ldw	r4,0(r2)
    27d4:	00076281 	jmpi	7628 <_free_r>

000027d8 <_malloc_r>:
    27d8:	defff504 	addi	sp,sp,-44
    27dc:	dc800315 	stw	r18,12(sp)
    27e0:	dfc00a15 	stw	ra,40(sp)
    27e4:	df000915 	stw	fp,36(sp)
    27e8:	ddc00815 	stw	r23,32(sp)
    27ec:	dd800715 	stw	r22,28(sp)
    27f0:	dd400615 	stw	r21,24(sp)
    27f4:	dd000515 	stw	r20,20(sp)
    27f8:	dcc00415 	stw	r19,16(sp)
    27fc:	dc400215 	stw	r17,8(sp)
    2800:	dc000115 	stw	r16,4(sp)
    2804:	288002c4 	addi	r2,r5,11
    2808:	00c00584 	movi	r3,22
    280c:	2025883a 	mov	r18,r4
    2810:	18807f2e 	bgeu	r3,r2,2a10 <_malloc_r+0x238>
    2814:	047ffe04 	movi	r17,-8
    2818:	1462703a 	and	r17,r2,r17
    281c:	8800a316 	blt	r17,zero,2aac <_malloc_r+0x2d4>
    2820:	8940a236 	bltu	r17,r5,2aac <_malloc_r+0x2d4>
    2824:	000eacc0 	call	eacc <__malloc_lock>
    2828:	00807dc4 	movi	r2,503
    282c:	1441e92e 	bgeu	r2,r17,2fd4 <_malloc_r+0x7fc>
    2830:	8804d27a 	srli	r2,r17,9
    2834:	1000a126 	beq	r2,zero,2abc <_malloc_r+0x2e4>
    2838:	00c00104 	movi	r3,4
    283c:	18811e36 	bltu	r3,r2,2cb8 <_malloc_r+0x4e0>
    2840:	8804d1ba 	srli	r2,r17,6
    2844:	12000e44 	addi	r8,r2,57
    2848:	11c00e04 	addi	r7,r2,56
    284c:	4209883a 	add	r4,r8,r8
    2850:	04c00074 	movhi	r19,1
    2854:	2109883a 	add	r4,r4,r4
    2858:	9cc61d04 	addi	r19,r19,6260
    285c:	2109883a 	add	r4,r4,r4
    2860:	9909883a 	add	r4,r19,r4
    2864:	24000117 	ldw	r16,4(r4)
    2868:	213ffe04 	addi	r4,r4,-8
    286c:	24009726 	beq	r4,r16,2acc <_malloc_r+0x2f4>
    2870:	80800117 	ldw	r2,4(r16)
    2874:	01bfff04 	movi	r6,-4
    2878:	014003c4 	movi	r5,15
    287c:	1184703a 	and	r2,r2,r6
    2880:	1447c83a 	sub	r3,r2,r17
    2884:	28c00716 	blt	r5,r3,28a4 <_malloc_r+0xcc>
    2888:	1800920e 	bge	r3,zero,2ad4 <_malloc_r+0x2fc>
    288c:	84000317 	ldw	r16,12(r16)
    2890:	24008e26 	beq	r4,r16,2acc <_malloc_r+0x2f4>
    2894:	80800117 	ldw	r2,4(r16)
    2898:	1184703a 	and	r2,r2,r6
    289c:	1447c83a 	sub	r3,r2,r17
    28a0:	28fff90e 	bge	r5,r3,2888 <__alt_data_end+0xff002888>
    28a4:	3809883a 	mov	r4,r7
    28a8:	01800074 	movhi	r6,1
    28ac:	9c000417 	ldw	r16,16(r19)
    28b0:	31861d04 	addi	r6,r6,6260
    28b4:	32000204 	addi	r8,r6,8
    28b8:	82013426 	beq	r16,r8,2d8c <_malloc_r+0x5b4>
    28bc:	80c00117 	ldw	r3,4(r16)
    28c0:	00bfff04 	movi	r2,-4
    28c4:	188e703a 	and	r7,r3,r2
    28c8:	3c45c83a 	sub	r2,r7,r17
    28cc:	00c003c4 	movi	r3,15
    28d0:	18811f16 	blt	r3,r2,2d50 <_malloc_r+0x578>
    28d4:	32000515 	stw	r8,20(r6)
    28d8:	32000415 	stw	r8,16(r6)
    28dc:	10007f0e 	bge	r2,zero,2adc <_malloc_r+0x304>
    28e0:	00807fc4 	movi	r2,511
    28e4:	11c0fd36 	bltu	r2,r7,2cdc <_malloc_r+0x504>
    28e8:	3806d0fa 	srli	r3,r7,3
    28ec:	01c00044 	movi	r7,1
    28f0:	30800117 	ldw	r2,4(r6)
    28f4:	19400044 	addi	r5,r3,1
    28f8:	294b883a 	add	r5,r5,r5
    28fc:	1807d0ba 	srai	r3,r3,2
    2900:	294b883a 	add	r5,r5,r5
    2904:	294b883a 	add	r5,r5,r5
    2908:	298b883a 	add	r5,r5,r6
    290c:	38c6983a 	sll	r3,r7,r3
    2910:	29c00017 	ldw	r7,0(r5)
    2914:	2a7ffe04 	addi	r9,r5,-8
    2918:	1886b03a 	or	r3,r3,r2
    291c:	82400315 	stw	r9,12(r16)
    2920:	81c00215 	stw	r7,8(r16)
    2924:	30c00115 	stw	r3,4(r6)
    2928:	2c000015 	stw	r16,0(r5)
    292c:	3c000315 	stw	r16,12(r7)
    2930:	2005d0ba 	srai	r2,r4,2
    2934:	01400044 	movi	r5,1
    2938:	288a983a 	sll	r5,r5,r2
    293c:	19406f36 	bltu	r3,r5,2afc <_malloc_r+0x324>
    2940:	28c4703a 	and	r2,r5,r3
    2944:	10000a1e 	bne	r2,zero,2970 <_malloc_r+0x198>
    2948:	00bfff04 	movi	r2,-4
    294c:	294b883a 	add	r5,r5,r5
    2950:	2088703a 	and	r4,r4,r2
    2954:	28c4703a 	and	r2,r5,r3
    2958:	21000104 	addi	r4,r4,4
    295c:	1000041e 	bne	r2,zero,2970 <_malloc_r+0x198>
    2960:	294b883a 	add	r5,r5,r5
    2964:	28c4703a 	and	r2,r5,r3
    2968:	21000104 	addi	r4,r4,4
    296c:	103ffc26 	beq	r2,zero,2960 <__alt_data_end+0xff002960>
    2970:	02bfff04 	movi	r10,-4
    2974:	024003c4 	movi	r9,15
    2978:	21800044 	addi	r6,r4,1
    297c:	318d883a 	add	r6,r6,r6
    2980:	318d883a 	add	r6,r6,r6
    2984:	318d883a 	add	r6,r6,r6
    2988:	998d883a 	add	r6,r19,r6
    298c:	333ffe04 	addi	r12,r6,-8
    2990:	2017883a 	mov	r11,r4
    2994:	31800104 	addi	r6,r6,4
    2998:	34000017 	ldw	r16,0(r6)
    299c:	31fffd04 	addi	r7,r6,-12
    29a0:	81c0041e 	bne	r16,r7,29b4 <_malloc_r+0x1dc>
    29a4:	0000fb06 	br	2d94 <_malloc_r+0x5bc>
    29a8:	1801030e 	bge	r3,zero,2db8 <_malloc_r+0x5e0>
    29ac:	84000317 	ldw	r16,12(r16)
    29b0:	81c0f826 	beq	r16,r7,2d94 <_malloc_r+0x5bc>
    29b4:	80800117 	ldw	r2,4(r16)
    29b8:	1284703a 	and	r2,r2,r10
    29bc:	1447c83a 	sub	r3,r2,r17
    29c0:	48fff90e 	bge	r9,r3,29a8 <__alt_data_end+0xff0029a8>
    29c4:	80800317 	ldw	r2,12(r16)
    29c8:	81000217 	ldw	r4,8(r16)
    29cc:	89400054 	ori	r5,r17,1
    29d0:	81400115 	stw	r5,4(r16)
    29d4:	20800315 	stw	r2,12(r4)
    29d8:	11000215 	stw	r4,8(r2)
    29dc:	8463883a 	add	r17,r16,r17
    29e0:	9c400515 	stw	r17,20(r19)
    29e4:	9c400415 	stw	r17,16(r19)
    29e8:	18800054 	ori	r2,r3,1
    29ec:	88800115 	stw	r2,4(r17)
    29f0:	8a000315 	stw	r8,12(r17)
    29f4:	8a000215 	stw	r8,8(r17)
    29f8:	88e3883a 	add	r17,r17,r3
    29fc:	88c00015 	stw	r3,0(r17)
    2a00:	9009883a 	mov	r4,r18
    2a04:	000eaf00 	call	eaf0 <__malloc_unlock>
    2a08:	80800204 	addi	r2,r16,8
    2a0c:	00001b06 	br	2a7c <_malloc_r+0x2a4>
    2a10:	04400404 	movi	r17,16
    2a14:	89402536 	bltu	r17,r5,2aac <_malloc_r+0x2d4>
    2a18:	000eacc0 	call	eacc <__malloc_lock>
    2a1c:	00800184 	movi	r2,6
    2a20:	01000084 	movi	r4,2
    2a24:	04c00074 	movhi	r19,1
    2a28:	1085883a 	add	r2,r2,r2
    2a2c:	9cc61d04 	addi	r19,r19,6260
    2a30:	1085883a 	add	r2,r2,r2
    2a34:	9885883a 	add	r2,r19,r2
    2a38:	14000117 	ldw	r16,4(r2)
    2a3c:	10fffe04 	addi	r3,r2,-8
    2a40:	80c0d926 	beq	r16,r3,2da8 <_malloc_r+0x5d0>
    2a44:	80c00117 	ldw	r3,4(r16)
    2a48:	81000317 	ldw	r4,12(r16)
    2a4c:	00bfff04 	movi	r2,-4
    2a50:	1884703a 	and	r2,r3,r2
    2a54:	81400217 	ldw	r5,8(r16)
    2a58:	8085883a 	add	r2,r16,r2
    2a5c:	10c00117 	ldw	r3,4(r2)
    2a60:	29000315 	stw	r4,12(r5)
    2a64:	21400215 	stw	r5,8(r4)
    2a68:	18c00054 	ori	r3,r3,1
    2a6c:	10c00115 	stw	r3,4(r2)
    2a70:	9009883a 	mov	r4,r18
    2a74:	000eaf00 	call	eaf0 <__malloc_unlock>
    2a78:	80800204 	addi	r2,r16,8
    2a7c:	dfc00a17 	ldw	ra,40(sp)
    2a80:	df000917 	ldw	fp,36(sp)
    2a84:	ddc00817 	ldw	r23,32(sp)
    2a88:	dd800717 	ldw	r22,28(sp)
    2a8c:	dd400617 	ldw	r21,24(sp)
    2a90:	dd000517 	ldw	r20,20(sp)
    2a94:	dcc00417 	ldw	r19,16(sp)
    2a98:	dc800317 	ldw	r18,12(sp)
    2a9c:	dc400217 	ldw	r17,8(sp)
    2aa0:	dc000117 	ldw	r16,4(sp)
    2aa4:	dec00b04 	addi	sp,sp,44
    2aa8:	f800283a 	ret
    2aac:	00800304 	movi	r2,12
    2ab0:	90800015 	stw	r2,0(r18)
    2ab4:	0005883a 	mov	r2,zero
    2ab8:	003ff006 	br	2a7c <__alt_data_end+0xff002a7c>
    2abc:	01002004 	movi	r4,128
    2ac0:	02001004 	movi	r8,64
    2ac4:	01c00fc4 	movi	r7,63
    2ac8:	003f6106 	br	2850 <__alt_data_end+0xff002850>
    2acc:	4009883a 	mov	r4,r8
    2ad0:	003f7506 	br	28a8 <__alt_data_end+0xff0028a8>
    2ad4:	81000317 	ldw	r4,12(r16)
    2ad8:	003fde06 	br	2a54 <__alt_data_end+0xff002a54>
    2adc:	81c5883a 	add	r2,r16,r7
    2ae0:	11400117 	ldw	r5,4(r2)
    2ae4:	9009883a 	mov	r4,r18
    2ae8:	29400054 	ori	r5,r5,1
    2aec:	11400115 	stw	r5,4(r2)
    2af0:	000eaf00 	call	eaf0 <__malloc_unlock>
    2af4:	80800204 	addi	r2,r16,8
    2af8:	003fe006 	br	2a7c <__alt_data_end+0xff002a7c>
    2afc:	9c000217 	ldw	r16,8(r19)
    2b00:	00bfff04 	movi	r2,-4
    2b04:	85800117 	ldw	r22,4(r16)
    2b08:	b0ac703a 	and	r22,r22,r2
    2b0c:	b4400336 	bltu	r22,r17,2b1c <_malloc_r+0x344>
    2b10:	b445c83a 	sub	r2,r22,r17
    2b14:	00c003c4 	movi	r3,15
    2b18:	18805d16 	blt	r3,r2,2c90 <_malloc_r+0x4b8>
    2b1c:	05c00074 	movhi	r23,1
    2b20:	00800074 	movhi	r2,1
    2b24:	1093e704 	addi	r2,r2,20380
    2b28:	bdccc804 	addi	r23,r23,13088
    2b2c:	15400017 	ldw	r21,0(r2)
    2b30:	b8c00017 	ldw	r3,0(r23)
    2b34:	00bfffc4 	movi	r2,-1
    2b38:	858d883a 	add	r6,r16,r22
    2b3c:	8d6b883a 	add	r21,r17,r21
    2b40:	1880ea26 	beq	r3,r2,2eec <_malloc_r+0x714>
    2b44:	ad4403c4 	addi	r21,r21,4111
    2b48:	00bc0004 	movi	r2,-4096
    2b4c:	a8aa703a 	and	r21,r21,r2
    2b50:	a80b883a 	mov	r5,r21
    2b54:	9009883a 	mov	r4,r18
    2b58:	d9800015 	stw	r6,0(sp)
    2b5c:	00031240 	call	3124 <_sbrk_r>
    2b60:	1029883a 	mov	r20,r2
    2b64:	00bfffc4 	movi	r2,-1
    2b68:	d9800017 	ldw	r6,0(sp)
    2b6c:	a080e826 	beq	r20,r2,2f10 <_malloc_r+0x738>
    2b70:	a180a636 	bltu	r20,r6,2e0c <_malloc_r+0x634>
    2b74:	07000074 	movhi	fp,1
    2b78:	e713f504 	addi	fp,fp,20436
    2b7c:	e0800017 	ldw	r2,0(fp)
    2b80:	a887883a 	add	r3,r21,r2
    2b84:	e0c00015 	stw	r3,0(fp)
    2b88:	3500e626 	beq	r6,r20,2f24 <_malloc_r+0x74c>
    2b8c:	b9000017 	ldw	r4,0(r23)
    2b90:	00bfffc4 	movi	r2,-1
    2b94:	2080ee26 	beq	r4,r2,2f50 <_malloc_r+0x778>
    2b98:	a185c83a 	sub	r2,r20,r6
    2b9c:	10c5883a 	add	r2,r2,r3
    2ba0:	e0800015 	stw	r2,0(fp)
    2ba4:	a0c001cc 	andi	r3,r20,7
    2ba8:	1800bc26 	beq	r3,zero,2e9c <_malloc_r+0x6c4>
    2bac:	a0e9c83a 	sub	r20,r20,r3
    2bb0:	00840204 	movi	r2,4104
    2bb4:	a5000204 	addi	r20,r20,8
    2bb8:	10c7c83a 	sub	r3,r2,r3
    2bbc:	a545883a 	add	r2,r20,r21
    2bc0:	1083ffcc 	andi	r2,r2,4095
    2bc4:	18abc83a 	sub	r21,r3,r2
    2bc8:	a80b883a 	mov	r5,r21
    2bcc:	9009883a 	mov	r4,r18
    2bd0:	00031240 	call	3124 <_sbrk_r>
    2bd4:	00ffffc4 	movi	r3,-1
    2bd8:	10c0e126 	beq	r2,r3,2f60 <_malloc_r+0x788>
    2bdc:	1505c83a 	sub	r2,r2,r20
    2be0:	1545883a 	add	r2,r2,r21
    2be4:	10800054 	ori	r2,r2,1
    2be8:	e0c00017 	ldw	r3,0(fp)
    2bec:	9d000215 	stw	r20,8(r19)
    2bf0:	a0800115 	stw	r2,4(r20)
    2bf4:	a8c7883a 	add	r3,r21,r3
    2bf8:	e0c00015 	stw	r3,0(fp)
    2bfc:	84c00e26 	beq	r16,r19,2c38 <_malloc_r+0x460>
    2c00:	018003c4 	movi	r6,15
    2c04:	3580a72e 	bgeu	r6,r22,2ea4 <_malloc_r+0x6cc>
    2c08:	81400117 	ldw	r5,4(r16)
    2c0c:	013ffe04 	movi	r4,-8
    2c10:	b0bffd04 	addi	r2,r22,-12
    2c14:	1104703a 	and	r2,r2,r4
    2c18:	2900004c 	andi	r4,r5,1
    2c1c:	2088b03a 	or	r4,r4,r2
    2c20:	81000115 	stw	r4,4(r16)
    2c24:	01400144 	movi	r5,5
    2c28:	8089883a 	add	r4,r16,r2
    2c2c:	21400115 	stw	r5,4(r4)
    2c30:	21400215 	stw	r5,8(r4)
    2c34:	3080cd36 	bltu	r6,r2,2f6c <_malloc_r+0x794>
    2c38:	00800074 	movhi	r2,1
    2c3c:	1093e604 	addi	r2,r2,20376
    2c40:	11000017 	ldw	r4,0(r2)
    2c44:	20c0012e 	bgeu	r4,r3,2c4c <_malloc_r+0x474>
    2c48:	10c00015 	stw	r3,0(r2)
    2c4c:	00800074 	movhi	r2,1
    2c50:	1093e504 	addi	r2,r2,20372
    2c54:	11000017 	ldw	r4,0(r2)
    2c58:	9c000217 	ldw	r16,8(r19)
    2c5c:	20c0012e 	bgeu	r4,r3,2c64 <_malloc_r+0x48c>
    2c60:	10c00015 	stw	r3,0(r2)
    2c64:	80c00117 	ldw	r3,4(r16)
    2c68:	00bfff04 	movi	r2,-4
    2c6c:	1886703a 	and	r3,r3,r2
    2c70:	1c45c83a 	sub	r2,r3,r17
    2c74:	1c400236 	bltu	r3,r17,2c80 <_malloc_r+0x4a8>
    2c78:	00c003c4 	movi	r3,15
    2c7c:	18800416 	blt	r3,r2,2c90 <_malloc_r+0x4b8>
    2c80:	9009883a 	mov	r4,r18
    2c84:	000eaf00 	call	eaf0 <__malloc_unlock>
    2c88:	0005883a 	mov	r2,zero
    2c8c:	003f7b06 	br	2a7c <__alt_data_end+0xff002a7c>
    2c90:	88c00054 	ori	r3,r17,1
    2c94:	80c00115 	stw	r3,4(r16)
    2c98:	8463883a 	add	r17,r16,r17
    2c9c:	10800054 	ori	r2,r2,1
    2ca0:	9c400215 	stw	r17,8(r19)
    2ca4:	88800115 	stw	r2,4(r17)
    2ca8:	9009883a 	mov	r4,r18
    2cac:	000eaf00 	call	eaf0 <__malloc_unlock>
    2cb0:	80800204 	addi	r2,r16,8
    2cb4:	003f7106 	br	2a7c <__alt_data_end+0xff002a7c>
    2cb8:	00c00504 	movi	r3,20
    2cbc:	18804a2e 	bgeu	r3,r2,2de8 <_malloc_r+0x610>
    2cc0:	00c01504 	movi	r3,84
    2cc4:	18806e36 	bltu	r3,r2,2e80 <_malloc_r+0x6a8>
    2cc8:	8804d33a 	srli	r2,r17,12
    2ccc:	12001bc4 	addi	r8,r2,111
    2cd0:	11c01b84 	addi	r7,r2,110
    2cd4:	4209883a 	add	r4,r8,r8
    2cd8:	003edd06 	br	2850 <__alt_data_end+0xff002850>
    2cdc:	3804d27a 	srli	r2,r7,9
    2ce0:	00c00104 	movi	r3,4
    2ce4:	1880442e 	bgeu	r3,r2,2df8 <_malloc_r+0x620>
    2ce8:	00c00504 	movi	r3,20
    2cec:	18808136 	bltu	r3,r2,2ef4 <_malloc_r+0x71c>
    2cf0:	11401704 	addi	r5,r2,92
    2cf4:	10c016c4 	addi	r3,r2,91
    2cf8:	294b883a 	add	r5,r5,r5
    2cfc:	294b883a 	add	r5,r5,r5
    2d00:	294b883a 	add	r5,r5,r5
    2d04:	994b883a 	add	r5,r19,r5
    2d08:	28800017 	ldw	r2,0(r5)
    2d0c:	01800074 	movhi	r6,1
    2d10:	297ffe04 	addi	r5,r5,-8
    2d14:	31861d04 	addi	r6,r6,6260
    2d18:	28806526 	beq	r5,r2,2eb0 <_malloc_r+0x6d8>
    2d1c:	01bfff04 	movi	r6,-4
    2d20:	10c00117 	ldw	r3,4(r2)
    2d24:	1986703a 	and	r3,r3,r6
    2d28:	38c0022e 	bgeu	r7,r3,2d34 <_malloc_r+0x55c>
    2d2c:	10800217 	ldw	r2,8(r2)
    2d30:	28bffb1e 	bne	r5,r2,2d20 <__alt_data_end+0xff002d20>
    2d34:	11400317 	ldw	r5,12(r2)
    2d38:	98c00117 	ldw	r3,4(r19)
    2d3c:	81400315 	stw	r5,12(r16)
    2d40:	80800215 	stw	r2,8(r16)
    2d44:	2c000215 	stw	r16,8(r5)
    2d48:	14000315 	stw	r16,12(r2)
    2d4c:	003ef806 	br	2930 <__alt_data_end+0xff002930>
    2d50:	88c00054 	ori	r3,r17,1
    2d54:	80c00115 	stw	r3,4(r16)
    2d58:	8463883a 	add	r17,r16,r17
    2d5c:	34400515 	stw	r17,20(r6)
    2d60:	34400415 	stw	r17,16(r6)
    2d64:	10c00054 	ori	r3,r2,1
    2d68:	8a000315 	stw	r8,12(r17)
    2d6c:	8a000215 	stw	r8,8(r17)
    2d70:	88c00115 	stw	r3,4(r17)
    2d74:	88a3883a 	add	r17,r17,r2
    2d78:	88800015 	stw	r2,0(r17)
    2d7c:	9009883a 	mov	r4,r18
    2d80:	000eaf00 	call	eaf0 <__malloc_unlock>
    2d84:	80800204 	addi	r2,r16,8
    2d88:	003f3c06 	br	2a7c <__alt_data_end+0xff002a7c>
    2d8c:	30c00117 	ldw	r3,4(r6)
    2d90:	003ee706 	br	2930 <__alt_data_end+0xff002930>
    2d94:	5ac00044 	addi	r11,r11,1
    2d98:	588000cc 	andi	r2,r11,3
    2d9c:	31800204 	addi	r6,r6,8
    2da0:	103efd1e 	bne	r2,zero,2998 <__alt_data_end+0xff002998>
    2da4:	00002406 	br	2e38 <_malloc_r+0x660>
    2da8:	14000317 	ldw	r16,12(r2)
    2dac:	143f251e 	bne	r2,r16,2a44 <__alt_data_end+0xff002a44>
    2db0:	21000084 	addi	r4,r4,2
    2db4:	003ebc06 	br	28a8 <__alt_data_end+0xff0028a8>
    2db8:	8085883a 	add	r2,r16,r2
    2dbc:	10c00117 	ldw	r3,4(r2)
    2dc0:	81000317 	ldw	r4,12(r16)
    2dc4:	81400217 	ldw	r5,8(r16)
    2dc8:	18c00054 	ori	r3,r3,1
    2dcc:	10c00115 	stw	r3,4(r2)
    2dd0:	29000315 	stw	r4,12(r5)
    2dd4:	21400215 	stw	r5,8(r4)
    2dd8:	9009883a 	mov	r4,r18
    2ddc:	000eaf00 	call	eaf0 <__malloc_unlock>
    2de0:	80800204 	addi	r2,r16,8
    2de4:	003f2506 	br	2a7c <__alt_data_end+0xff002a7c>
    2de8:	12001704 	addi	r8,r2,92
    2dec:	11c016c4 	addi	r7,r2,91
    2df0:	4209883a 	add	r4,r8,r8
    2df4:	003e9606 	br	2850 <__alt_data_end+0xff002850>
    2df8:	3804d1ba 	srli	r2,r7,6
    2dfc:	11400e44 	addi	r5,r2,57
    2e00:	10c00e04 	addi	r3,r2,56
    2e04:	294b883a 	add	r5,r5,r5
    2e08:	003fbc06 	br	2cfc <__alt_data_end+0xff002cfc>
    2e0c:	84ff5926 	beq	r16,r19,2b74 <__alt_data_end+0xff002b74>
    2e10:	00800074 	movhi	r2,1
    2e14:	10861d04 	addi	r2,r2,6260
    2e18:	14000217 	ldw	r16,8(r2)
    2e1c:	00bfff04 	movi	r2,-4
    2e20:	80c00117 	ldw	r3,4(r16)
    2e24:	1886703a 	and	r3,r3,r2
    2e28:	003f9106 	br	2c70 <__alt_data_end+0xff002c70>
    2e2c:	60800217 	ldw	r2,8(r12)
    2e30:	213fffc4 	addi	r4,r4,-1
    2e34:	1300651e 	bne	r2,r12,2fcc <_malloc_r+0x7f4>
    2e38:	208000cc 	andi	r2,r4,3
    2e3c:	633ffe04 	addi	r12,r12,-8
    2e40:	103ffa1e 	bne	r2,zero,2e2c <__alt_data_end+0xff002e2c>
    2e44:	98800117 	ldw	r2,4(r19)
    2e48:	0146303a 	nor	r3,zero,r5
    2e4c:	1884703a 	and	r2,r3,r2
    2e50:	98800115 	stw	r2,4(r19)
    2e54:	294b883a 	add	r5,r5,r5
    2e58:	117f2836 	bltu	r2,r5,2afc <__alt_data_end+0xff002afc>
    2e5c:	283f2726 	beq	r5,zero,2afc <__alt_data_end+0xff002afc>
    2e60:	2886703a 	and	r3,r5,r2
    2e64:	5809883a 	mov	r4,r11
    2e68:	183ec31e 	bne	r3,zero,2978 <__alt_data_end+0xff002978>
    2e6c:	294b883a 	add	r5,r5,r5
    2e70:	2886703a 	and	r3,r5,r2
    2e74:	21000104 	addi	r4,r4,4
    2e78:	183ffc26 	beq	r3,zero,2e6c <__alt_data_end+0xff002e6c>
    2e7c:	003ebe06 	br	2978 <__alt_data_end+0xff002978>
    2e80:	00c05504 	movi	r3,340
    2e84:	18801236 	bltu	r3,r2,2ed0 <_malloc_r+0x6f8>
    2e88:	8804d3fa 	srli	r2,r17,15
    2e8c:	12001e04 	addi	r8,r2,120
    2e90:	11c01dc4 	addi	r7,r2,119
    2e94:	4209883a 	add	r4,r8,r8
    2e98:	003e6d06 	br	2850 <__alt_data_end+0xff002850>
    2e9c:	00c40004 	movi	r3,4096
    2ea0:	003f4606 	br	2bbc <__alt_data_end+0xff002bbc>
    2ea4:	00800044 	movi	r2,1
    2ea8:	a0800115 	stw	r2,4(r20)
    2eac:	003f7406 	br	2c80 <__alt_data_end+0xff002c80>
    2eb0:	1805d0ba 	srai	r2,r3,2
    2eb4:	01c00044 	movi	r7,1
    2eb8:	30c00117 	ldw	r3,4(r6)
    2ebc:	388e983a 	sll	r7,r7,r2
    2ec0:	2805883a 	mov	r2,r5
    2ec4:	38c6b03a 	or	r3,r7,r3
    2ec8:	30c00115 	stw	r3,4(r6)
    2ecc:	003f9b06 	br	2d3c <__alt_data_end+0xff002d3c>
    2ed0:	00c15504 	movi	r3,1364
    2ed4:	18801a36 	bltu	r3,r2,2f40 <_malloc_r+0x768>
    2ed8:	8804d4ba 	srli	r2,r17,18
    2edc:	12001f44 	addi	r8,r2,125
    2ee0:	11c01f04 	addi	r7,r2,124
    2ee4:	4209883a 	add	r4,r8,r8
    2ee8:	003e5906 	br	2850 <__alt_data_end+0xff002850>
    2eec:	ad400404 	addi	r21,r21,16
    2ef0:	003f1706 	br	2b50 <__alt_data_end+0xff002b50>
    2ef4:	00c01504 	movi	r3,84
    2ef8:	18802336 	bltu	r3,r2,2f88 <_malloc_r+0x7b0>
    2efc:	3804d33a 	srli	r2,r7,12
    2f00:	11401bc4 	addi	r5,r2,111
    2f04:	10c01b84 	addi	r3,r2,110
    2f08:	294b883a 	add	r5,r5,r5
    2f0c:	003f7b06 	br	2cfc <__alt_data_end+0xff002cfc>
    2f10:	9c000217 	ldw	r16,8(r19)
    2f14:	00bfff04 	movi	r2,-4
    2f18:	80c00117 	ldw	r3,4(r16)
    2f1c:	1886703a 	and	r3,r3,r2
    2f20:	003f5306 	br	2c70 <__alt_data_end+0xff002c70>
    2f24:	3083ffcc 	andi	r2,r6,4095
    2f28:	103f181e 	bne	r2,zero,2b8c <__alt_data_end+0xff002b8c>
    2f2c:	99000217 	ldw	r4,8(r19)
    2f30:	b545883a 	add	r2,r22,r21
    2f34:	10800054 	ori	r2,r2,1
    2f38:	20800115 	stw	r2,4(r4)
    2f3c:	003f3e06 	br	2c38 <__alt_data_end+0xff002c38>
    2f40:	01003f84 	movi	r4,254
    2f44:	02001fc4 	movi	r8,127
    2f48:	01c01f84 	movi	r7,126
    2f4c:	003e4006 	br	2850 <__alt_data_end+0xff002850>
    2f50:	00800074 	movhi	r2,1
    2f54:	108cc804 	addi	r2,r2,13088
    2f58:	15000015 	stw	r20,0(r2)
    2f5c:	003f1106 	br	2ba4 <__alt_data_end+0xff002ba4>
    2f60:	00800044 	movi	r2,1
    2f64:	002b883a 	mov	r21,zero
    2f68:	003f1f06 	br	2be8 <__alt_data_end+0xff002be8>
    2f6c:	81400204 	addi	r5,r16,8
    2f70:	9009883a 	mov	r4,r18
    2f74:	00076280 	call	7628 <_free_r>
    2f78:	00800074 	movhi	r2,1
    2f7c:	1093f504 	addi	r2,r2,20436
    2f80:	10c00017 	ldw	r3,0(r2)
    2f84:	003f2c06 	br	2c38 <__alt_data_end+0xff002c38>
    2f88:	00c05504 	movi	r3,340
    2f8c:	18800536 	bltu	r3,r2,2fa4 <_malloc_r+0x7cc>
    2f90:	3804d3fa 	srli	r2,r7,15
    2f94:	11401e04 	addi	r5,r2,120
    2f98:	10c01dc4 	addi	r3,r2,119
    2f9c:	294b883a 	add	r5,r5,r5
    2fa0:	003f5606 	br	2cfc <__alt_data_end+0xff002cfc>
    2fa4:	00c15504 	movi	r3,1364
    2fa8:	18800536 	bltu	r3,r2,2fc0 <_malloc_r+0x7e8>
    2fac:	3804d4ba 	srli	r2,r7,18
    2fb0:	11401f44 	addi	r5,r2,125
    2fb4:	10c01f04 	addi	r3,r2,124
    2fb8:	294b883a 	add	r5,r5,r5
    2fbc:	003f4f06 	br	2cfc <__alt_data_end+0xff002cfc>
    2fc0:	01403f84 	movi	r5,254
    2fc4:	00c01f84 	movi	r3,126
    2fc8:	003f4c06 	br	2cfc <__alt_data_end+0xff002cfc>
    2fcc:	98800117 	ldw	r2,4(r19)
    2fd0:	003fa006 	br	2e54 <__alt_data_end+0xff002e54>
    2fd4:	8808d0fa 	srli	r4,r17,3
    2fd8:	20800044 	addi	r2,r4,1
    2fdc:	1085883a 	add	r2,r2,r2
    2fe0:	003e9006 	br	2a24 <__alt_data_end+0xff002a24>

00002fe4 <_printf_r>:
    2fe4:	defffd04 	addi	sp,sp,-12
    2fe8:	2805883a 	mov	r2,r5
    2fec:	dfc00015 	stw	ra,0(sp)
    2ff0:	d9800115 	stw	r6,4(sp)
    2ff4:	d9c00215 	stw	r7,8(sp)
    2ff8:	21400217 	ldw	r5,8(r4)
    2ffc:	d9c00104 	addi	r7,sp,4
    3000:	100d883a 	mov	r6,r2
    3004:	00032100 	call	3210 <___vfprintf_internal_r>
    3008:	dfc00017 	ldw	ra,0(sp)
    300c:	dec00304 	addi	sp,sp,12
    3010:	f800283a 	ret

00003014 <printf>:
    3014:	defffc04 	addi	sp,sp,-16
    3018:	dfc00015 	stw	ra,0(sp)
    301c:	d9400115 	stw	r5,4(sp)
    3020:	d9800215 	stw	r6,8(sp)
    3024:	d9c00315 	stw	r7,12(sp)
    3028:	00800074 	movhi	r2,1
    302c:	108ccb04 	addi	r2,r2,13100
    3030:	10800017 	ldw	r2,0(r2)
    3034:	200b883a 	mov	r5,r4
    3038:	d9800104 	addi	r6,sp,4
    303c:	11000217 	ldw	r4,8(r2)
    3040:	00054080 	call	5408 <__vfprintf_internal>
    3044:	dfc00017 	ldw	ra,0(sp)
    3048:	dec00404 	addi	sp,sp,16
    304c:	f800283a 	ret

00003050 <_puts_r>:
    3050:	defff604 	addi	sp,sp,-40
    3054:	dc000715 	stw	r16,28(sp)
    3058:	2021883a 	mov	r16,r4
    305c:	2809883a 	mov	r4,r5
    3060:	dc400815 	stw	r17,32(sp)
    3064:	dfc00915 	stw	ra,36(sp)
    3068:	2823883a 	mov	r17,r5
    306c:	00031780 	call	3178 <strlen>
    3070:	10c00044 	addi	r3,r2,1
    3074:	d8800115 	stw	r2,4(sp)
    3078:	00800074 	movhi	r2,1
    307c:	10850e04 	addi	r2,r2,5176
    3080:	d8800215 	stw	r2,8(sp)
    3084:	00800044 	movi	r2,1
    3088:	d8800315 	stw	r2,12(sp)
    308c:	00800084 	movi	r2,2
    3090:	dc400015 	stw	r17,0(sp)
    3094:	d8c00615 	stw	r3,24(sp)
    3098:	dec00415 	stw	sp,16(sp)
    309c:	d8800515 	stw	r2,20(sp)
    30a0:	80000226 	beq	r16,zero,30ac <_puts_r+0x5c>
    30a4:	80800e17 	ldw	r2,56(r16)
    30a8:	10001426 	beq	r2,zero,30fc <_puts_r+0xac>
    30ac:	81400217 	ldw	r5,8(r16)
    30b0:	2880030b 	ldhu	r2,12(r5)
    30b4:	10c8000c 	andi	r3,r2,8192
    30b8:	1800061e 	bne	r3,zero,30d4 <_puts_r+0x84>
    30bc:	29001917 	ldw	r4,100(r5)
    30c0:	00f7ffc4 	movi	r3,-8193
    30c4:	10880014 	ori	r2,r2,8192
    30c8:	20c6703a 	and	r3,r4,r3
    30cc:	2880030d 	sth	r2,12(r5)
    30d0:	28c01915 	stw	r3,100(r5)
    30d4:	d9800404 	addi	r6,sp,16
    30d8:	8009883a 	mov	r4,r16
    30dc:	00079380 	call	7938 <__sfvwrite_r>
    30e0:	1000091e 	bne	r2,zero,3108 <_puts_r+0xb8>
    30e4:	00800284 	movi	r2,10
    30e8:	dfc00917 	ldw	ra,36(sp)
    30ec:	dc400817 	ldw	r17,32(sp)
    30f0:	dc000717 	ldw	r16,28(sp)
    30f4:	dec00a04 	addi	sp,sp,40
    30f8:	f800283a 	ret
    30fc:	8009883a 	mov	r4,r16
    3100:	00074b40 	call	74b4 <__sinit>
    3104:	003fe906 	br	30ac <__alt_data_end+0xff0030ac>
    3108:	00bfffc4 	movi	r2,-1
    310c:	003ff606 	br	30e8 <__alt_data_end+0xff0030e8>

00003110 <puts>:
    3110:	00800074 	movhi	r2,1
    3114:	108ccb04 	addi	r2,r2,13100
    3118:	200b883a 	mov	r5,r4
    311c:	11000017 	ldw	r4,0(r2)
    3120:	00030501 	jmpi	3050 <_puts_r>

00003124 <_sbrk_r>:
    3124:	defffd04 	addi	sp,sp,-12
    3128:	dc000015 	stw	r16,0(sp)
    312c:	04000074 	movhi	r16,1
    3130:	dc400115 	stw	r17,4(sp)
    3134:	8413e804 	addi	r16,r16,20384
    3138:	2023883a 	mov	r17,r4
    313c:	2809883a 	mov	r4,r5
    3140:	dfc00215 	stw	ra,8(sp)
    3144:	80000015 	stw	zero,0(r16)
    3148:	000ecb00 	call	ecb0 <sbrk>
    314c:	00ffffc4 	movi	r3,-1
    3150:	10c00526 	beq	r2,r3,3168 <_sbrk_r+0x44>
    3154:	dfc00217 	ldw	ra,8(sp)
    3158:	dc400117 	ldw	r17,4(sp)
    315c:	dc000017 	ldw	r16,0(sp)
    3160:	dec00304 	addi	sp,sp,12
    3164:	f800283a 	ret
    3168:	80c00017 	ldw	r3,0(r16)
    316c:	183ff926 	beq	r3,zero,3154 <__alt_data_end+0xff003154>
    3170:	88c00015 	stw	r3,0(r17)
    3174:	003ff706 	br	3154 <__alt_data_end+0xff003154>

00003178 <strlen>:
    3178:	208000cc 	andi	r2,r4,3
    317c:	10002026 	beq	r2,zero,3200 <strlen+0x88>
    3180:	20800007 	ldb	r2,0(r4)
    3184:	10002026 	beq	r2,zero,3208 <strlen+0x90>
    3188:	2005883a 	mov	r2,r4
    318c:	00000206 	br	3198 <strlen+0x20>
    3190:	10c00007 	ldb	r3,0(r2)
    3194:	18001826 	beq	r3,zero,31f8 <strlen+0x80>
    3198:	10800044 	addi	r2,r2,1
    319c:	10c000cc 	andi	r3,r2,3
    31a0:	183ffb1e 	bne	r3,zero,3190 <__alt_data_end+0xff003190>
    31a4:	10c00017 	ldw	r3,0(r2)
    31a8:	01ffbff4 	movhi	r7,65279
    31ac:	39ffbfc4 	addi	r7,r7,-257
    31b0:	00ca303a 	nor	r5,zero,r3
    31b4:	01a02074 	movhi	r6,32897
    31b8:	19c7883a 	add	r3,r3,r7
    31bc:	31a02004 	addi	r6,r6,-32640
    31c0:	1946703a 	and	r3,r3,r5
    31c4:	1986703a 	and	r3,r3,r6
    31c8:	1800091e 	bne	r3,zero,31f0 <strlen+0x78>
    31cc:	10800104 	addi	r2,r2,4
    31d0:	10c00017 	ldw	r3,0(r2)
    31d4:	19cb883a 	add	r5,r3,r7
    31d8:	00c6303a 	nor	r3,zero,r3
    31dc:	28c6703a 	and	r3,r5,r3
    31e0:	1986703a 	and	r3,r3,r6
    31e4:	183ff926 	beq	r3,zero,31cc <__alt_data_end+0xff0031cc>
    31e8:	00000106 	br	31f0 <strlen+0x78>
    31ec:	10800044 	addi	r2,r2,1
    31f0:	10c00007 	ldb	r3,0(r2)
    31f4:	183ffd1e 	bne	r3,zero,31ec <__alt_data_end+0xff0031ec>
    31f8:	1105c83a 	sub	r2,r2,r4
    31fc:	f800283a 	ret
    3200:	2005883a 	mov	r2,r4
    3204:	003fe706 	br	31a4 <__alt_data_end+0xff0031a4>
    3208:	0005883a 	mov	r2,zero
    320c:	f800283a 	ret

00003210 <___vfprintf_internal_r>:
    3210:	deffb804 	addi	sp,sp,-288
    3214:	dfc04715 	stw	ra,284(sp)
    3218:	ddc04515 	stw	r23,276(sp)
    321c:	dd404315 	stw	r21,268(sp)
    3220:	d9002c15 	stw	r4,176(sp)
    3224:	282f883a 	mov	r23,r5
    3228:	302b883a 	mov	r21,r6
    322c:	d9c02d15 	stw	r7,180(sp)
    3230:	df004615 	stw	fp,280(sp)
    3234:	dd804415 	stw	r22,272(sp)
    3238:	dd004215 	stw	r20,264(sp)
    323c:	dcc04115 	stw	r19,260(sp)
    3240:	dc804015 	stw	r18,256(sp)
    3244:	dc403f15 	stw	r17,252(sp)
    3248:	dc003e15 	stw	r16,248(sp)
    324c:	00080280 	call	8028 <_localeconv_r>
    3250:	10800017 	ldw	r2,0(r2)
    3254:	1009883a 	mov	r4,r2
    3258:	d8803415 	stw	r2,208(sp)
    325c:	00031780 	call	3178 <strlen>
    3260:	d8803715 	stw	r2,220(sp)
    3264:	d8802c17 	ldw	r2,176(sp)
    3268:	10000226 	beq	r2,zero,3274 <___vfprintf_internal_r+0x64>
    326c:	10800e17 	ldw	r2,56(r2)
    3270:	1000f926 	beq	r2,zero,3658 <___vfprintf_internal_r+0x448>
    3274:	b880030b 	ldhu	r2,12(r23)
    3278:	10c8000c 	andi	r3,r2,8192
    327c:	1800061e 	bne	r3,zero,3298 <___vfprintf_internal_r+0x88>
    3280:	b9001917 	ldw	r4,100(r23)
    3284:	00f7ffc4 	movi	r3,-8193
    3288:	10880014 	ori	r2,r2,8192
    328c:	20c6703a 	and	r3,r4,r3
    3290:	b880030d 	sth	r2,12(r23)
    3294:	b8c01915 	stw	r3,100(r23)
    3298:	10c0020c 	andi	r3,r2,8
    329c:	1800c126 	beq	r3,zero,35a4 <___vfprintf_internal_r+0x394>
    32a0:	b8c00417 	ldw	r3,16(r23)
    32a4:	1800bf26 	beq	r3,zero,35a4 <___vfprintf_internal_r+0x394>
    32a8:	1080068c 	andi	r2,r2,26
    32ac:	00c00284 	movi	r3,10
    32b0:	10c0c426 	beq	r2,r3,35c4 <___vfprintf_internal_r+0x3b4>
    32b4:	d8c00404 	addi	r3,sp,16
    32b8:	05000074 	movhi	r20,1
    32bc:	d9001e04 	addi	r4,sp,120
    32c0:	a5057084 	addi	r20,r20,5570
    32c4:	d8c01e15 	stw	r3,120(sp)
    32c8:	d8002015 	stw	zero,128(sp)
    32cc:	d8001f15 	stw	zero,124(sp)
    32d0:	d8003315 	stw	zero,204(sp)
    32d4:	d8003615 	stw	zero,216(sp)
    32d8:	d8003815 	stw	zero,224(sp)
    32dc:	1811883a 	mov	r8,r3
    32e0:	d8003915 	stw	zero,228(sp)
    32e4:	d8003a15 	stw	zero,232(sp)
    32e8:	d8002f15 	stw	zero,188(sp)
    32ec:	d9002815 	stw	r4,160(sp)
    32f0:	a8800007 	ldb	r2,0(r21)
    32f4:	10027b26 	beq	r2,zero,3ce4 <___vfprintf_internal_r+0xad4>
    32f8:	00c00944 	movi	r3,37
    32fc:	a821883a 	mov	r16,r21
    3300:	10c0021e 	bne	r2,r3,330c <___vfprintf_internal_r+0xfc>
    3304:	00001406 	br	3358 <___vfprintf_internal_r+0x148>
    3308:	10c00326 	beq	r2,r3,3318 <___vfprintf_internal_r+0x108>
    330c:	84000044 	addi	r16,r16,1
    3310:	80800007 	ldb	r2,0(r16)
    3314:	103ffc1e 	bne	r2,zero,3308 <__alt_data_end+0xff003308>
    3318:	8563c83a 	sub	r17,r16,r21
    331c:	88000e26 	beq	r17,zero,3358 <___vfprintf_internal_r+0x148>
    3320:	d8c02017 	ldw	r3,128(sp)
    3324:	d8801f17 	ldw	r2,124(sp)
    3328:	45400015 	stw	r21,0(r8)
    332c:	1c47883a 	add	r3,r3,r17
    3330:	10800044 	addi	r2,r2,1
    3334:	d8c02015 	stw	r3,128(sp)
    3338:	44400115 	stw	r17,4(r8)
    333c:	d8801f15 	stw	r2,124(sp)
    3340:	00c001c4 	movi	r3,7
    3344:	1880a716 	blt	r3,r2,35e4 <___vfprintf_internal_r+0x3d4>
    3348:	42000204 	addi	r8,r8,8
    334c:	d9402f17 	ldw	r5,188(sp)
    3350:	2c4b883a 	add	r5,r5,r17
    3354:	d9402f15 	stw	r5,188(sp)
    3358:	80800007 	ldb	r2,0(r16)
    335c:	1000a826 	beq	r2,zero,3600 <___vfprintf_internal_r+0x3f0>
    3360:	84400047 	ldb	r17,1(r16)
    3364:	00bfffc4 	movi	r2,-1
    3368:	85400044 	addi	r21,r16,1
    336c:	d8002785 	stb	zero,158(sp)
    3370:	0007883a 	mov	r3,zero
    3374:	000f883a 	mov	r7,zero
    3378:	d8802915 	stw	r2,164(sp)
    337c:	d8003115 	stw	zero,196(sp)
    3380:	0025883a 	mov	r18,zero
    3384:	01401604 	movi	r5,88
    3388:	01800244 	movi	r6,9
    338c:	02800a84 	movi	r10,42
    3390:	02401b04 	movi	r9,108
    3394:	ad400044 	addi	r21,r21,1
    3398:	88bff804 	addi	r2,r17,-32
    339c:	28830436 	bltu	r5,r2,3fb0 <___vfprintf_internal_r+0xda0>
    33a0:	100490ba 	slli	r2,r2,2
    33a4:	01000034 	movhi	r4,0
    33a8:	210cee04 	addi	r4,r4,13240
    33ac:	1105883a 	add	r2,r2,r4
    33b0:	10800017 	ldw	r2,0(r2)
    33b4:	1000683a 	jmp	r2
    33b8:	00003ed0 	cmplti	zero,zero,251
    33bc:	00003fb0 	cmpltui	zero,zero,254
    33c0:	00003fb0 	cmpltui	zero,zero,254
    33c4:	00003ef0 	cmpltui	zero,zero,251
    33c8:	00003fb0 	cmpltui	zero,zero,254
    33cc:	00003fb0 	cmpltui	zero,zero,254
    33d0:	00003fb0 	cmpltui	zero,zero,254
    33d4:	00003fb0 	cmpltui	zero,zero,254
    33d8:	00003fb0 	cmpltui	zero,zero,254
    33dc:	00003fb0 	cmpltui	zero,zero,254
    33e0:	00003664 	muli	zero,zero,217
    33e4:	00003e0c 	andi	zero,zero,248
    33e8:	00003fb0 	cmpltui	zero,zero,254
    33ec:	0000352c 	andhi	zero,zero,212
    33f0:	0000368c 	andi	zero,zero,218
    33f4:	00003fb0 	cmpltui	zero,zero,254
    33f8:	000036cc 	andi	zero,zero,219
    33fc:	000036d8 	cmpnei	zero,zero,219
    3400:	000036d8 	cmpnei	zero,zero,219
    3404:	000036d8 	cmpnei	zero,zero,219
    3408:	000036d8 	cmpnei	zero,zero,219
    340c:	000036d8 	cmpnei	zero,zero,219
    3410:	000036d8 	cmpnei	zero,zero,219
    3414:	000036d8 	cmpnei	zero,zero,219
    3418:	000036d8 	cmpnei	zero,zero,219
    341c:	000036d8 	cmpnei	zero,zero,219
    3420:	00003fb0 	cmpltui	zero,zero,254
    3424:	00003fb0 	cmpltui	zero,zero,254
    3428:	00003fb0 	cmpltui	zero,zero,254
    342c:	00003fb0 	cmpltui	zero,zero,254
    3430:	00003fb0 	cmpltui	zero,zero,254
    3434:	00003fb0 	cmpltui	zero,zero,254
    3438:	00003fb0 	cmpltui	zero,zero,254
    343c:	00003fb0 	cmpltui	zero,zero,254
    3440:	00003fb0 	cmpltui	zero,zero,254
    3444:	00003fb0 	cmpltui	zero,zero,254
    3448:	0000370c 	andi	zero,zero,220
    344c:	000037c8 	cmpgei	zero,zero,223
    3450:	00003fb0 	cmpltui	zero,zero,254
    3454:	000037c8 	cmpgei	zero,zero,223
    3458:	00003fb0 	cmpltui	zero,zero,254
    345c:	00003fb0 	cmpltui	zero,zero,254
    3460:	00003fb0 	cmpltui	zero,zero,254
    3464:	00003fb0 	cmpltui	zero,zero,254
    3468:	00003868 	cmpgeui	zero,zero,225
    346c:	00003fb0 	cmpltui	zero,zero,254
    3470:	00003fb0 	cmpltui	zero,zero,254
    3474:	00003874 	movhi	zero,225
    3478:	00003fb0 	cmpltui	zero,zero,254
    347c:	00003fb0 	cmpltui	zero,zero,254
    3480:	00003fb0 	cmpltui	zero,zero,254
    3484:	00003fb0 	cmpltui	zero,zero,254
    3488:	00003fb0 	cmpltui	zero,zero,254
    348c:	00003cec 	andhi	zero,zero,243
    3490:	00003fb0 	cmpltui	zero,zero,254
    3494:	00003fb0 	cmpltui	zero,zero,254
    3498:	00003d4c 	andi	zero,zero,245
    349c:	00003fb0 	cmpltui	zero,zero,254
    34a0:	00003fb0 	cmpltui	zero,zero,254
    34a4:	00003fb0 	cmpltui	zero,zero,254
    34a8:	00003fb0 	cmpltui	zero,zero,254
    34ac:	00003fb0 	cmpltui	zero,zero,254
    34b0:	00003fb0 	cmpltui	zero,zero,254
    34b4:	00003fb0 	cmpltui	zero,zero,254
    34b8:	00003fb0 	cmpltui	zero,zero,254
    34bc:	00003fb0 	cmpltui	zero,zero,254
    34c0:	00003fb0 	cmpltui	zero,zero,254
    34c4:	00003f5c 	xori	zero,zero,253
    34c8:	00003efc 	xorhi	zero,zero,251
    34cc:	000037c8 	cmpgei	zero,zero,223
    34d0:	000037c8 	cmpgei	zero,zero,223
    34d4:	000037c8 	cmpgei	zero,zero,223
    34d8:	00003f0c 	andi	zero,zero,252
    34dc:	00003efc 	xorhi	zero,zero,251
    34e0:	00003fb0 	cmpltui	zero,zero,254
    34e4:	00003fb0 	cmpltui	zero,zero,254
    34e8:	00003f18 	cmpnei	zero,zero,252
    34ec:	00003fb0 	cmpltui	zero,zero,254
    34f0:	00003f28 	cmpgeui	zero,zero,252
    34f4:	00003dfc 	xorhi	zero,zero,247
    34f8:	00003538 	rdprs	zero,zero,212
    34fc:	00003e1c 	xori	zero,zero,248
    3500:	00003fb0 	cmpltui	zero,zero,254
    3504:	00003e28 	cmpgeui	zero,zero,248
    3508:	00003fb0 	cmpltui	zero,zero,254
    350c:	00003e84 	movi	zero,250
    3510:	00003fb0 	cmpltui	zero,zero,254
    3514:	00003fb0 	cmpltui	zero,zero,254
    3518:	00003e94 	movui	zero,250
    351c:	d9003117 	ldw	r4,196(sp)
    3520:	d8802d15 	stw	r2,180(sp)
    3524:	0109c83a 	sub	r4,zero,r4
    3528:	d9003115 	stw	r4,196(sp)
    352c:	94800114 	ori	r18,r18,4
    3530:	ac400007 	ldb	r17,0(r21)
    3534:	003f9706 	br	3394 <__alt_data_end+0xff003394>
    3538:	00800c04 	movi	r2,48
    353c:	d9002d17 	ldw	r4,180(sp)
    3540:	d9402917 	ldw	r5,164(sp)
    3544:	d8802705 	stb	r2,156(sp)
    3548:	00801e04 	movi	r2,120
    354c:	d8802745 	stb	r2,157(sp)
    3550:	d8002785 	stb	zero,158(sp)
    3554:	20c00104 	addi	r3,r4,4
    3558:	24c00017 	ldw	r19,0(r4)
    355c:	002d883a 	mov	r22,zero
    3560:	90800094 	ori	r2,r18,2
    3564:	28029a16 	blt	r5,zero,3fd0 <___vfprintf_internal_r+0xdc0>
    3568:	00bfdfc4 	movi	r2,-129
    356c:	90a4703a 	and	r18,r18,r2
    3570:	d8c02d15 	stw	r3,180(sp)
    3574:	94800094 	ori	r18,r18,2
    3578:	9802871e 	bne	r19,zero,3f98 <___vfprintf_internal_r+0xd88>
    357c:	00800074 	movhi	r2,1
    3580:	10856904 	addi	r2,r2,5540
    3584:	d8803915 	stw	r2,228(sp)
    3588:	04401e04 	movi	r17,120
    358c:	d8802917 	ldw	r2,164(sp)
    3590:	0039883a 	mov	fp,zero
    3594:	1001e926 	beq	r2,zero,3d3c <___vfprintf_internal_r+0xb2c>
    3598:	0027883a 	mov	r19,zero
    359c:	002d883a 	mov	r22,zero
    35a0:	00020506 	br	3db8 <___vfprintf_internal_r+0xba8>
    35a4:	d9002c17 	ldw	r4,176(sp)
    35a8:	b80b883a 	mov	r5,r23
    35ac:	00054e00 	call	54e0 <__swsetup_r>
    35b0:	1005ac1e 	bne	r2,zero,4c64 <___vfprintf_internal_r+0x1a54>
    35b4:	b880030b 	ldhu	r2,12(r23)
    35b8:	00c00284 	movi	r3,10
    35bc:	1080068c 	andi	r2,r2,26
    35c0:	10ff3c1e 	bne	r2,r3,32b4 <__alt_data_end+0xff0032b4>
    35c4:	b880038f 	ldh	r2,14(r23)
    35c8:	103f3a16 	blt	r2,zero,32b4 <__alt_data_end+0xff0032b4>
    35cc:	d9c02d17 	ldw	r7,180(sp)
    35d0:	d9002c17 	ldw	r4,176(sp)
    35d4:	a80d883a 	mov	r6,r21
    35d8:	b80b883a 	mov	r5,r23
    35dc:	00054240 	call	5424 <__sbprintf>
    35e0:	00001106 	br	3628 <___vfprintf_internal_r+0x418>
    35e4:	d9002c17 	ldw	r4,176(sp)
    35e8:	d9801e04 	addi	r6,sp,120
    35ec:	b80b883a 	mov	r5,r23
    35f0:	0009fac0 	call	9fac <__sprint_r>
    35f4:	1000081e 	bne	r2,zero,3618 <___vfprintf_internal_r+0x408>
    35f8:	da000404 	addi	r8,sp,16
    35fc:	003f5306 	br	334c <__alt_data_end+0xff00334c>
    3600:	d8802017 	ldw	r2,128(sp)
    3604:	10000426 	beq	r2,zero,3618 <___vfprintf_internal_r+0x408>
    3608:	d9002c17 	ldw	r4,176(sp)
    360c:	d9801e04 	addi	r6,sp,120
    3610:	b80b883a 	mov	r5,r23
    3614:	0009fac0 	call	9fac <__sprint_r>
    3618:	b880030b 	ldhu	r2,12(r23)
    361c:	1080100c 	andi	r2,r2,64
    3620:	1005901e 	bne	r2,zero,4c64 <___vfprintf_internal_r+0x1a54>
    3624:	d8802f17 	ldw	r2,188(sp)
    3628:	dfc04717 	ldw	ra,284(sp)
    362c:	df004617 	ldw	fp,280(sp)
    3630:	ddc04517 	ldw	r23,276(sp)
    3634:	dd804417 	ldw	r22,272(sp)
    3638:	dd404317 	ldw	r21,268(sp)
    363c:	dd004217 	ldw	r20,264(sp)
    3640:	dcc04117 	ldw	r19,260(sp)
    3644:	dc804017 	ldw	r18,256(sp)
    3648:	dc403f17 	ldw	r17,252(sp)
    364c:	dc003e17 	ldw	r16,248(sp)
    3650:	dec04804 	addi	sp,sp,288
    3654:	f800283a 	ret
    3658:	d9002c17 	ldw	r4,176(sp)
    365c:	00074b40 	call	74b4 <__sinit>
    3660:	003f0406 	br	3274 <__alt_data_end+0xff003274>
    3664:	d8802d17 	ldw	r2,180(sp)
    3668:	d9002d17 	ldw	r4,180(sp)
    366c:	10800017 	ldw	r2,0(r2)
    3670:	d8803115 	stw	r2,196(sp)
    3674:	20800104 	addi	r2,r4,4
    3678:	d9003117 	ldw	r4,196(sp)
    367c:	203fa716 	blt	r4,zero,351c <__alt_data_end+0xff00351c>
    3680:	d8802d15 	stw	r2,180(sp)
    3684:	ac400007 	ldb	r17,0(r21)
    3688:	003f4206 	br	3394 <__alt_data_end+0xff003394>
    368c:	ac400007 	ldb	r17,0(r21)
    3690:	aac00044 	addi	r11,r21,1
    3694:	8a872826 	beq	r17,r10,5338 <___vfprintf_internal_r+0x2128>
    3698:	88bff404 	addi	r2,r17,-48
    369c:	0009883a 	mov	r4,zero
    36a0:	30867d36 	bltu	r6,r2,5098 <___vfprintf_internal_r+0x1e88>
    36a4:	5c400007 	ldb	r17,0(r11)
    36a8:	210002a4 	muli	r4,r4,10
    36ac:	5d400044 	addi	r21,r11,1
    36b0:	a817883a 	mov	r11,r21
    36b4:	2089883a 	add	r4,r4,r2
    36b8:	88bff404 	addi	r2,r17,-48
    36bc:	30bff92e 	bgeu	r6,r2,36a4 <__alt_data_end+0xff0036a4>
    36c0:	2005c916 	blt	r4,zero,4de8 <___vfprintf_internal_r+0x1bd8>
    36c4:	d9002915 	stw	r4,164(sp)
    36c8:	003f3306 	br	3398 <__alt_data_end+0xff003398>
    36cc:	94802014 	ori	r18,r18,128
    36d0:	ac400007 	ldb	r17,0(r21)
    36d4:	003f2f06 	br	3394 <__alt_data_end+0xff003394>
    36d8:	a809883a 	mov	r4,r21
    36dc:	d8003115 	stw	zero,196(sp)
    36e0:	88bff404 	addi	r2,r17,-48
    36e4:	0017883a 	mov	r11,zero
    36e8:	24400007 	ldb	r17,0(r4)
    36ec:	5ac002a4 	muli	r11,r11,10
    36f0:	ad400044 	addi	r21,r21,1
    36f4:	a809883a 	mov	r4,r21
    36f8:	12d7883a 	add	r11,r2,r11
    36fc:	88bff404 	addi	r2,r17,-48
    3700:	30bff92e 	bgeu	r6,r2,36e8 <__alt_data_end+0xff0036e8>
    3704:	dac03115 	stw	r11,196(sp)
    3708:	003f2306 	br	3398 <__alt_data_end+0xff003398>
    370c:	18c03fcc 	andi	r3,r3,255
    3710:	18072b1e 	bne	r3,zero,53c0 <___vfprintf_internal_r+0x21b0>
    3714:	94800414 	ori	r18,r18,16
    3718:	9080080c 	andi	r2,r18,32
    371c:	10037b26 	beq	r2,zero,450c <___vfprintf_internal_r+0x12fc>
    3720:	d9402d17 	ldw	r5,180(sp)
    3724:	28800117 	ldw	r2,4(r5)
    3728:	2cc00017 	ldw	r19,0(r5)
    372c:	29400204 	addi	r5,r5,8
    3730:	d9402d15 	stw	r5,180(sp)
    3734:	102d883a 	mov	r22,r2
    3738:	10044b16 	blt	r2,zero,4868 <___vfprintf_internal_r+0x1658>
    373c:	d9402917 	ldw	r5,164(sp)
    3740:	df002783 	ldbu	fp,158(sp)
    3744:	2803bc16 	blt	r5,zero,4638 <___vfprintf_internal_r+0x1428>
    3748:	00ffdfc4 	movi	r3,-129
    374c:	9d84b03a 	or	r2,r19,r22
    3750:	90e4703a 	and	r18,r18,r3
    3754:	10017726 	beq	r2,zero,3d34 <___vfprintf_internal_r+0xb24>
    3758:	b0038326 	beq	r22,zero,4568 <___vfprintf_internal_r+0x1358>
    375c:	dc402a15 	stw	r17,168(sp)
    3760:	dc001e04 	addi	r16,sp,120
    3764:	b023883a 	mov	r17,r22
    3768:	402d883a 	mov	r22,r8
    376c:	9809883a 	mov	r4,r19
    3770:	880b883a 	mov	r5,r17
    3774:	01800284 	movi	r6,10
    3778:	000f883a 	mov	r7,zero
    377c:	000c3a40 	call	c3a4 <__umoddi3>
    3780:	10800c04 	addi	r2,r2,48
    3784:	843fffc4 	addi	r16,r16,-1
    3788:	9809883a 	mov	r4,r19
    378c:	880b883a 	mov	r5,r17
    3790:	80800005 	stb	r2,0(r16)
    3794:	01800284 	movi	r6,10
    3798:	000f883a 	mov	r7,zero
    379c:	000be2c0 	call	be2c <__udivdi3>
    37a0:	1027883a 	mov	r19,r2
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	1823883a 	mov	r17,r3
    37ac:	103fef1e 	bne	r2,zero,376c <__alt_data_end+0xff00376c>
    37b0:	d8c02817 	ldw	r3,160(sp)
    37b4:	dc402a17 	ldw	r17,168(sp)
    37b8:	b011883a 	mov	r8,r22
    37bc:	1c07c83a 	sub	r3,r3,r16
    37c0:	d8c02e15 	stw	r3,184(sp)
    37c4:	00005906 	br	392c <___vfprintf_internal_r+0x71c>
    37c8:	18c03fcc 	andi	r3,r3,255
    37cc:	1806fa1e 	bne	r3,zero,53b8 <___vfprintf_internal_r+0x21a8>
    37d0:	9080020c 	andi	r2,r18,8
    37d4:	10048a26 	beq	r2,zero,4a00 <___vfprintf_internal_r+0x17f0>
    37d8:	d8c02d17 	ldw	r3,180(sp)
    37dc:	d9002d17 	ldw	r4,180(sp)
    37e0:	d9402d17 	ldw	r5,180(sp)
    37e4:	18c00017 	ldw	r3,0(r3)
    37e8:	21000117 	ldw	r4,4(r4)
    37ec:	29400204 	addi	r5,r5,8
    37f0:	d8c03615 	stw	r3,216(sp)
    37f4:	d9003815 	stw	r4,224(sp)
    37f8:	d9402d15 	stw	r5,180(sp)
    37fc:	d9003617 	ldw	r4,216(sp)
    3800:	d9403817 	ldw	r5,224(sp)
    3804:	da003d15 	stw	r8,244(sp)
    3808:	04000044 	movi	r16,1
    380c:	0009c240 	call	9c24 <__fpclassifyd>
    3810:	da003d17 	ldw	r8,244(sp)
    3814:	14041f1e 	bne	r2,r16,4894 <___vfprintf_internal_r+0x1684>
    3818:	d9003617 	ldw	r4,216(sp)
    381c:	d9403817 	ldw	r5,224(sp)
    3820:	000d883a 	mov	r6,zero
    3824:	000f883a 	mov	r7,zero
    3828:	000d2ec0 	call	d2ec <__ledf2>
    382c:	da003d17 	ldw	r8,244(sp)
    3830:	1005be16 	blt	r2,zero,4f2c <___vfprintf_internal_r+0x1d1c>
    3834:	df002783 	ldbu	fp,158(sp)
    3838:	008011c4 	movi	r2,71
    383c:	1445330e 	bge	r2,r17,4d0c <___vfprintf_internal_r+0x1afc>
    3840:	04000074 	movhi	r16,1
    3844:	84056104 	addi	r16,r16,5508
    3848:	00c000c4 	movi	r3,3
    384c:	00bfdfc4 	movi	r2,-129
    3850:	d8c02a15 	stw	r3,168(sp)
    3854:	90a4703a 	and	r18,r18,r2
    3858:	d8c02e15 	stw	r3,184(sp)
    385c:	d8002915 	stw	zero,164(sp)
    3860:	d8003215 	stw	zero,200(sp)
    3864:	00003706 	br	3944 <___vfprintf_internal_r+0x734>
    3868:	94800214 	ori	r18,r18,8
    386c:	ac400007 	ldb	r17,0(r21)
    3870:	003ec806 	br	3394 <__alt_data_end+0xff003394>
    3874:	18c03fcc 	andi	r3,r3,255
    3878:	1806db1e 	bne	r3,zero,53e8 <___vfprintf_internal_r+0x21d8>
    387c:	94800414 	ori	r18,r18,16
    3880:	9080080c 	andi	r2,r18,32
    3884:	1002d826 	beq	r2,zero,43e8 <___vfprintf_internal_r+0x11d8>
    3888:	d9402d17 	ldw	r5,180(sp)
    388c:	d8c02917 	ldw	r3,164(sp)
    3890:	d8002785 	stb	zero,158(sp)
    3894:	28800204 	addi	r2,r5,8
    3898:	2cc00017 	ldw	r19,0(r5)
    389c:	2d800117 	ldw	r22,4(r5)
    38a0:	18048f16 	blt	r3,zero,4ae0 <___vfprintf_internal_r+0x18d0>
    38a4:	013fdfc4 	movi	r4,-129
    38a8:	9d86b03a 	or	r3,r19,r22
    38ac:	d8802d15 	stw	r2,180(sp)
    38b0:	9124703a 	and	r18,r18,r4
    38b4:	1802d91e 	bne	r3,zero,441c <___vfprintf_internal_r+0x120c>
    38b8:	d8c02917 	ldw	r3,164(sp)
    38bc:	0039883a 	mov	fp,zero
    38c0:	1805c326 	beq	r3,zero,4fd0 <___vfprintf_internal_r+0x1dc0>
    38c4:	0027883a 	mov	r19,zero
    38c8:	002d883a 	mov	r22,zero
    38cc:	dc001e04 	addi	r16,sp,120
    38d0:	9806d0fa 	srli	r3,r19,3
    38d4:	b008977a 	slli	r4,r22,29
    38d8:	b02cd0fa 	srli	r22,r22,3
    38dc:	9cc001cc 	andi	r19,r19,7
    38e0:	98800c04 	addi	r2,r19,48
    38e4:	843fffc4 	addi	r16,r16,-1
    38e8:	20e6b03a 	or	r19,r4,r3
    38ec:	80800005 	stb	r2,0(r16)
    38f0:	9d86b03a 	or	r3,r19,r22
    38f4:	183ff61e 	bne	r3,zero,38d0 <__alt_data_end+0xff0038d0>
    38f8:	90c0004c 	andi	r3,r18,1
    38fc:	18013b26 	beq	r3,zero,3dec <___vfprintf_internal_r+0xbdc>
    3900:	10803fcc 	andi	r2,r2,255
    3904:	1080201c 	xori	r2,r2,128
    3908:	10bfe004 	addi	r2,r2,-128
    390c:	00c00c04 	movi	r3,48
    3910:	10c13626 	beq	r2,r3,3dec <___vfprintf_internal_r+0xbdc>
    3914:	80ffffc5 	stb	r3,-1(r16)
    3918:	d8c02817 	ldw	r3,160(sp)
    391c:	80bfffc4 	addi	r2,r16,-1
    3920:	1021883a 	mov	r16,r2
    3924:	1887c83a 	sub	r3,r3,r2
    3928:	d8c02e15 	stw	r3,184(sp)
    392c:	d8802e17 	ldw	r2,184(sp)
    3930:	d9002917 	ldw	r4,164(sp)
    3934:	1100010e 	bge	r2,r4,393c <___vfprintf_internal_r+0x72c>
    3938:	2005883a 	mov	r2,r4
    393c:	d8802a15 	stw	r2,168(sp)
    3940:	d8003215 	stw	zero,200(sp)
    3944:	e7003fcc 	andi	fp,fp,255
    3948:	e700201c 	xori	fp,fp,128
    394c:	e73fe004 	addi	fp,fp,-128
    3950:	e0000326 	beq	fp,zero,3960 <___vfprintf_internal_r+0x750>
    3954:	d8c02a17 	ldw	r3,168(sp)
    3958:	18c00044 	addi	r3,r3,1
    395c:	d8c02a15 	stw	r3,168(sp)
    3960:	90c0008c 	andi	r3,r18,2
    3964:	d8c02b15 	stw	r3,172(sp)
    3968:	18000326 	beq	r3,zero,3978 <___vfprintf_internal_r+0x768>
    396c:	d8c02a17 	ldw	r3,168(sp)
    3970:	18c00084 	addi	r3,r3,2
    3974:	d8c02a15 	stw	r3,168(sp)
    3978:	90c0210c 	andi	r3,r18,132
    397c:	d8c03015 	stw	r3,192(sp)
    3980:	1801a31e 	bne	r3,zero,4010 <___vfprintf_internal_r+0xe00>
    3984:	d9003117 	ldw	r4,196(sp)
    3988:	d8c02a17 	ldw	r3,168(sp)
    398c:	20e7c83a 	sub	r19,r4,r3
    3990:	04c19f0e 	bge	zero,r19,4010 <___vfprintf_internal_r+0xe00>
    3994:	02400404 	movi	r9,16
    3998:	d8c02017 	ldw	r3,128(sp)
    399c:	d8801f17 	ldw	r2,124(sp)
    39a0:	4cc50d0e 	bge	r9,r19,4dd8 <___vfprintf_internal_r+0x1bc8>
    39a4:	01400074 	movhi	r5,1
    39a8:	29457484 	addi	r5,r5,5586
    39ac:	dc403b15 	stw	r17,236(sp)
    39b0:	d9403515 	stw	r5,212(sp)
    39b4:	9823883a 	mov	r17,r19
    39b8:	482d883a 	mov	r22,r9
    39bc:	9027883a 	mov	r19,r18
    39c0:	070001c4 	movi	fp,7
    39c4:	8025883a 	mov	r18,r16
    39c8:	dc002c17 	ldw	r16,176(sp)
    39cc:	00000306 	br	39dc <___vfprintf_internal_r+0x7cc>
    39d0:	8c7ffc04 	addi	r17,r17,-16
    39d4:	42000204 	addi	r8,r8,8
    39d8:	b440130e 	bge	r22,r17,3a28 <___vfprintf_internal_r+0x818>
    39dc:	01000074 	movhi	r4,1
    39e0:	18c00404 	addi	r3,r3,16
    39e4:	10800044 	addi	r2,r2,1
    39e8:	21057484 	addi	r4,r4,5586
    39ec:	41000015 	stw	r4,0(r8)
    39f0:	45800115 	stw	r22,4(r8)
    39f4:	d8c02015 	stw	r3,128(sp)
    39f8:	d8801f15 	stw	r2,124(sp)
    39fc:	e0bff40e 	bge	fp,r2,39d0 <__alt_data_end+0xff0039d0>
    3a00:	d9801e04 	addi	r6,sp,120
    3a04:	b80b883a 	mov	r5,r23
    3a08:	8009883a 	mov	r4,r16
    3a0c:	0009fac0 	call	9fac <__sprint_r>
    3a10:	103f011e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    3a14:	8c7ffc04 	addi	r17,r17,-16
    3a18:	d8c02017 	ldw	r3,128(sp)
    3a1c:	d8801f17 	ldw	r2,124(sp)
    3a20:	da000404 	addi	r8,sp,16
    3a24:	b47fed16 	blt	r22,r17,39dc <__alt_data_end+0xff0039dc>
    3a28:	9021883a 	mov	r16,r18
    3a2c:	9825883a 	mov	r18,r19
    3a30:	8827883a 	mov	r19,r17
    3a34:	dc403b17 	ldw	r17,236(sp)
    3a38:	d9403517 	ldw	r5,212(sp)
    3a3c:	98c7883a 	add	r3,r19,r3
    3a40:	10800044 	addi	r2,r2,1
    3a44:	41400015 	stw	r5,0(r8)
    3a48:	44c00115 	stw	r19,4(r8)
    3a4c:	d8c02015 	stw	r3,128(sp)
    3a50:	d8801f15 	stw	r2,124(sp)
    3a54:	010001c4 	movi	r4,7
    3a58:	2082a316 	blt	r4,r2,44e8 <___vfprintf_internal_r+0x12d8>
    3a5c:	df002787 	ldb	fp,158(sp)
    3a60:	42000204 	addi	r8,r8,8
    3a64:	e0000c26 	beq	fp,zero,3a98 <___vfprintf_internal_r+0x888>
    3a68:	d8801f17 	ldw	r2,124(sp)
    3a6c:	d9002784 	addi	r4,sp,158
    3a70:	18c00044 	addi	r3,r3,1
    3a74:	10800044 	addi	r2,r2,1
    3a78:	41000015 	stw	r4,0(r8)
    3a7c:	01000044 	movi	r4,1
    3a80:	41000115 	stw	r4,4(r8)
    3a84:	d8c02015 	stw	r3,128(sp)
    3a88:	d8801f15 	stw	r2,124(sp)
    3a8c:	010001c4 	movi	r4,7
    3a90:	20823c16 	blt	r4,r2,4384 <___vfprintf_internal_r+0x1174>
    3a94:	42000204 	addi	r8,r8,8
    3a98:	d8802b17 	ldw	r2,172(sp)
    3a9c:	10000c26 	beq	r2,zero,3ad0 <___vfprintf_internal_r+0x8c0>
    3aa0:	d8801f17 	ldw	r2,124(sp)
    3aa4:	d9002704 	addi	r4,sp,156
    3aa8:	18c00084 	addi	r3,r3,2
    3aac:	10800044 	addi	r2,r2,1
    3ab0:	41000015 	stw	r4,0(r8)
    3ab4:	01000084 	movi	r4,2
    3ab8:	41000115 	stw	r4,4(r8)
    3abc:	d8c02015 	stw	r3,128(sp)
    3ac0:	d8801f15 	stw	r2,124(sp)
    3ac4:	010001c4 	movi	r4,7
    3ac8:	20823616 	blt	r4,r2,43a4 <___vfprintf_internal_r+0x1194>
    3acc:	42000204 	addi	r8,r8,8
    3ad0:	d9003017 	ldw	r4,192(sp)
    3ad4:	00802004 	movi	r2,128
    3ad8:	20819926 	beq	r4,r2,4140 <___vfprintf_internal_r+0xf30>
    3adc:	d9402917 	ldw	r5,164(sp)
    3ae0:	d8802e17 	ldw	r2,184(sp)
    3ae4:	28adc83a 	sub	r22,r5,r2
    3ae8:	0580310e 	bge	zero,r22,3bb0 <___vfprintf_internal_r+0x9a0>
    3aec:	07000404 	movi	fp,16
    3af0:	d8801f17 	ldw	r2,124(sp)
    3af4:	e584140e 	bge	fp,r22,4b48 <___vfprintf_internal_r+0x1938>
    3af8:	01400074 	movhi	r5,1
    3afc:	29457084 	addi	r5,r5,5570
    3b00:	dc402915 	stw	r17,164(sp)
    3b04:	d9402b15 	stw	r5,172(sp)
    3b08:	b023883a 	mov	r17,r22
    3b0c:	04c001c4 	movi	r19,7
    3b10:	a82d883a 	mov	r22,r21
    3b14:	902b883a 	mov	r21,r18
    3b18:	8025883a 	mov	r18,r16
    3b1c:	dc002c17 	ldw	r16,176(sp)
    3b20:	00000306 	br	3b30 <___vfprintf_internal_r+0x920>
    3b24:	8c7ffc04 	addi	r17,r17,-16
    3b28:	42000204 	addi	r8,r8,8
    3b2c:	e440110e 	bge	fp,r17,3b74 <___vfprintf_internal_r+0x964>
    3b30:	18c00404 	addi	r3,r3,16
    3b34:	10800044 	addi	r2,r2,1
    3b38:	45000015 	stw	r20,0(r8)
    3b3c:	47000115 	stw	fp,4(r8)
    3b40:	d8c02015 	stw	r3,128(sp)
    3b44:	d8801f15 	stw	r2,124(sp)
    3b48:	98bff60e 	bge	r19,r2,3b24 <__alt_data_end+0xff003b24>
    3b4c:	d9801e04 	addi	r6,sp,120
    3b50:	b80b883a 	mov	r5,r23
    3b54:	8009883a 	mov	r4,r16
    3b58:	0009fac0 	call	9fac <__sprint_r>
    3b5c:	103eae1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    3b60:	8c7ffc04 	addi	r17,r17,-16
    3b64:	d8c02017 	ldw	r3,128(sp)
    3b68:	d8801f17 	ldw	r2,124(sp)
    3b6c:	da000404 	addi	r8,sp,16
    3b70:	e47fef16 	blt	fp,r17,3b30 <__alt_data_end+0xff003b30>
    3b74:	9021883a 	mov	r16,r18
    3b78:	a825883a 	mov	r18,r21
    3b7c:	b02b883a 	mov	r21,r22
    3b80:	882d883a 	mov	r22,r17
    3b84:	dc402917 	ldw	r17,164(sp)
    3b88:	d9002b17 	ldw	r4,172(sp)
    3b8c:	1d87883a 	add	r3,r3,r22
    3b90:	10800044 	addi	r2,r2,1
    3b94:	41000015 	stw	r4,0(r8)
    3b98:	45800115 	stw	r22,4(r8)
    3b9c:	d8c02015 	stw	r3,128(sp)
    3ba0:	d8801f15 	stw	r2,124(sp)
    3ba4:	010001c4 	movi	r4,7
    3ba8:	2081ee16 	blt	r4,r2,4364 <___vfprintf_internal_r+0x1154>
    3bac:	42000204 	addi	r8,r8,8
    3bb0:	9080400c 	andi	r2,r18,256
    3bb4:	1001181e 	bne	r2,zero,4018 <___vfprintf_internal_r+0xe08>
    3bb8:	d9402e17 	ldw	r5,184(sp)
    3bbc:	d8801f17 	ldw	r2,124(sp)
    3bc0:	44000015 	stw	r16,0(r8)
    3bc4:	1947883a 	add	r3,r3,r5
    3bc8:	10800044 	addi	r2,r2,1
    3bcc:	41400115 	stw	r5,4(r8)
    3bd0:	d8c02015 	stw	r3,128(sp)
    3bd4:	d8801f15 	stw	r2,124(sp)
    3bd8:	010001c4 	movi	r4,7
    3bdc:	2081d316 	blt	r4,r2,432c <___vfprintf_internal_r+0x111c>
    3be0:	42000204 	addi	r8,r8,8
    3be4:	9480010c 	andi	r18,r18,4
    3be8:	90003226 	beq	r18,zero,3cb4 <___vfprintf_internal_r+0xaa4>
    3bec:	d9403117 	ldw	r5,196(sp)
    3bf0:	d8802a17 	ldw	r2,168(sp)
    3bf4:	28a1c83a 	sub	r16,r5,r2
    3bf8:	04002e0e 	bge	zero,r16,3cb4 <___vfprintf_internal_r+0xaa4>
    3bfc:	04400404 	movi	r17,16
    3c00:	d8801f17 	ldw	r2,124(sp)
    3c04:	8c04a20e 	bge	r17,r16,4e90 <___vfprintf_internal_r+0x1c80>
    3c08:	01400074 	movhi	r5,1
    3c0c:	29457484 	addi	r5,r5,5586
    3c10:	d9403515 	stw	r5,212(sp)
    3c14:	048001c4 	movi	r18,7
    3c18:	dcc02c17 	ldw	r19,176(sp)
    3c1c:	00000306 	br	3c2c <___vfprintf_internal_r+0xa1c>
    3c20:	843ffc04 	addi	r16,r16,-16
    3c24:	42000204 	addi	r8,r8,8
    3c28:	8c00130e 	bge	r17,r16,3c78 <___vfprintf_internal_r+0xa68>
    3c2c:	01000074 	movhi	r4,1
    3c30:	18c00404 	addi	r3,r3,16
    3c34:	10800044 	addi	r2,r2,1
    3c38:	21057484 	addi	r4,r4,5586
    3c3c:	41000015 	stw	r4,0(r8)
    3c40:	44400115 	stw	r17,4(r8)
    3c44:	d8c02015 	stw	r3,128(sp)
    3c48:	d8801f15 	stw	r2,124(sp)
    3c4c:	90bff40e 	bge	r18,r2,3c20 <__alt_data_end+0xff003c20>
    3c50:	d9801e04 	addi	r6,sp,120
    3c54:	b80b883a 	mov	r5,r23
    3c58:	9809883a 	mov	r4,r19
    3c5c:	0009fac0 	call	9fac <__sprint_r>
    3c60:	103e6d1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    3c64:	843ffc04 	addi	r16,r16,-16
    3c68:	d8c02017 	ldw	r3,128(sp)
    3c6c:	d8801f17 	ldw	r2,124(sp)
    3c70:	da000404 	addi	r8,sp,16
    3c74:	8c3fed16 	blt	r17,r16,3c2c <__alt_data_end+0xff003c2c>
    3c78:	d9403517 	ldw	r5,212(sp)
    3c7c:	1c07883a 	add	r3,r3,r16
    3c80:	10800044 	addi	r2,r2,1
    3c84:	41400015 	stw	r5,0(r8)
    3c88:	44000115 	stw	r16,4(r8)
    3c8c:	d8c02015 	stw	r3,128(sp)
    3c90:	d8801f15 	stw	r2,124(sp)
    3c94:	010001c4 	movi	r4,7
    3c98:	2080060e 	bge	r4,r2,3cb4 <___vfprintf_internal_r+0xaa4>
    3c9c:	d9002c17 	ldw	r4,176(sp)
    3ca0:	d9801e04 	addi	r6,sp,120
    3ca4:	b80b883a 	mov	r5,r23
    3ca8:	0009fac0 	call	9fac <__sprint_r>
    3cac:	103e5a1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    3cb0:	d8c02017 	ldw	r3,128(sp)
    3cb4:	d8803117 	ldw	r2,196(sp)
    3cb8:	d9002a17 	ldw	r4,168(sp)
    3cbc:	1100010e 	bge	r2,r4,3cc4 <___vfprintf_internal_r+0xab4>
    3cc0:	2005883a 	mov	r2,r4
    3cc4:	d9402f17 	ldw	r5,188(sp)
    3cc8:	288b883a 	add	r5,r5,r2
    3ccc:	d9402f15 	stw	r5,188(sp)
    3cd0:	18019e1e 	bne	r3,zero,434c <___vfprintf_internal_r+0x113c>
    3cd4:	a8800007 	ldb	r2,0(r21)
    3cd8:	d8001f15 	stw	zero,124(sp)
    3cdc:	da000404 	addi	r8,sp,16
    3ce0:	103d851e 	bne	r2,zero,32f8 <__alt_data_end+0xff0032f8>
    3ce4:	a821883a 	mov	r16,r21
    3ce8:	003d9b06 	br	3358 <__alt_data_end+0xff003358>
    3cec:	18c03fcc 	andi	r3,r3,255
    3cf0:	1805c11e 	bne	r3,zero,53f8 <___vfprintf_internal_r+0x21e8>
    3cf4:	94800414 	ori	r18,r18,16
    3cf8:	9080080c 	andi	r2,r18,32
    3cfc:	10020c26 	beq	r2,zero,4530 <___vfprintf_internal_r+0x1320>
    3d00:	d8802d17 	ldw	r2,180(sp)
    3d04:	d9002917 	ldw	r4,164(sp)
    3d08:	d8002785 	stb	zero,158(sp)
    3d0c:	10c00204 	addi	r3,r2,8
    3d10:	14c00017 	ldw	r19,0(r2)
    3d14:	15800117 	ldw	r22,4(r2)
    3d18:	20040f16 	blt	r4,zero,4d58 <___vfprintf_internal_r+0x1b48>
    3d1c:	013fdfc4 	movi	r4,-129
    3d20:	9d84b03a 	or	r2,r19,r22
    3d24:	d8c02d15 	stw	r3,180(sp)
    3d28:	9124703a 	and	r18,r18,r4
    3d2c:	0039883a 	mov	fp,zero
    3d30:	103e891e 	bne	r2,zero,3758 <__alt_data_end+0xff003758>
    3d34:	d9002917 	ldw	r4,164(sp)
    3d38:	2002c11e 	bne	r4,zero,4840 <___vfprintf_internal_r+0x1630>
    3d3c:	d8002915 	stw	zero,164(sp)
    3d40:	d8002e15 	stw	zero,184(sp)
    3d44:	dc001e04 	addi	r16,sp,120
    3d48:	003ef806 	br	392c <__alt_data_end+0xff00392c>
    3d4c:	18c03fcc 	andi	r3,r3,255
    3d50:	18059d1e 	bne	r3,zero,53c8 <___vfprintf_internal_r+0x21b8>
    3d54:	01400074 	movhi	r5,1
    3d58:	29456404 	addi	r5,r5,5520
    3d5c:	d9403915 	stw	r5,228(sp)
    3d60:	9080080c 	andi	r2,r18,32
    3d64:	10005226 	beq	r2,zero,3eb0 <___vfprintf_internal_r+0xca0>
    3d68:	d8802d17 	ldw	r2,180(sp)
    3d6c:	14c00017 	ldw	r19,0(r2)
    3d70:	15800117 	ldw	r22,4(r2)
    3d74:	10800204 	addi	r2,r2,8
    3d78:	d8802d15 	stw	r2,180(sp)
    3d7c:	9080004c 	andi	r2,r18,1
    3d80:	10019026 	beq	r2,zero,43c4 <___vfprintf_internal_r+0x11b4>
    3d84:	9d84b03a 	or	r2,r19,r22
    3d88:	10036926 	beq	r2,zero,4b30 <___vfprintf_internal_r+0x1920>
    3d8c:	d8c02917 	ldw	r3,164(sp)
    3d90:	00800c04 	movi	r2,48
    3d94:	d8802705 	stb	r2,156(sp)
    3d98:	dc402745 	stb	r17,157(sp)
    3d9c:	d8002785 	stb	zero,158(sp)
    3da0:	90800094 	ori	r2,r18,2
    3da4:	18045d16 	blt	r3,zero,4f1c <___vfprintf_internal_r+0x1d0c>
    3da8:	00bfdfc4 	movi	r2,-129
    3dac:	90a4703a 	and	r18,r18,r2
    3db0:	94800094 	ori	r18,r18,2
    3db4:	0039883a 	mov	fp,zero
    3db8:	d9003917 	ldw	r4,228(sp)
    3dbc:	dc001e04 	addi	r16,sp,120
    3dc0:	988003cc 	andi	r2,r19,15
    3dc4:	b006973a 	slli	r3,r22,28
    3dc8:	2085883a 	add	r2,r4,r2
    3dcc:	9826d13a 	srli	r19,r19,4
    3dd0:	10800003 	ldbu	r2,0(r2)
    3dd4:	b02cd13a 	srli	r22,r22,4
    3dd8:	843fffc4 	addi	r16,r16,-1
    3ddc:	1ce6b03a 	or	r19,r3,r19
    3de0:	80800005 	stb	r2,0(r16)
    3de4:	9d84b03a 	or	r2,r19,r22
    3de8:	103ff51e 	bne	r2,zero,3dc0 <__alt_data_end+0xff003dc0>
    3dec:	d8c02817 	ldw	r3,160(sp)
    3df0:	1c07c83a 	sub	r3,r3,r16
    3df4:	d8c02e15 	stw	r3,184(sp)
    3df8:	003ecc06 	br	392c <__alt_data_end+0xff00392c>
    3dfc:	18c03fcc 	andi	r3,r3,255
    3e00:	183e9f26 	beq	r3,zero,3880 <__alt_data_end+0xff003880>
    3e04:	d9c02785 	stb	r7,158(sp)
    3e08:	003e9d06 	br	3880 <__alt_data_end+0xff003880>
    3e0c:	00c00044 	movi	r3,1
    3e10:	01c00ac4 	movi	r7,43
    3e14:	ac400007 	ldb	r17,0(r21)
    3e18:	003d5e06 	br	3394 <__alt_data_end+0xff003394>
    3e1c:	94800814 	ori	r18,r18,32
    3e20:	ac400007 	ldb	r17,0(r21)
    3e24:	003d5b06 	br	3394 <__alt_data_end+0xff003394>
    3e28:	d8c02d17 	ldw	r3,180(sp)
    3e2c:	d8002785 	stb	zero,158(sp)
    3e30:	1c000017 	ldw	r16,0(r3)
    3e34:	1cc00104 	addi	r19,r3,4
    3e38:	80041926 	beq	r16,zero,4ea0 <___vfprintf_internal_r+0x1c90>
    3e3c:	d9002917 	ldw	r4,164(sp)
    3e40:	2003d016 	blt	r4,zero,4d84 <___vfprintf_internal_r+0x1b74>
    3e44:	200d883a 	mov	r6,r4
    3e48:	000b883a 	mov	r5,zero
    3e4c:	8009883a 	mov	r4,r16
    3e50:	da003d15 	stw	r8,244(sp)
    3e54:	00082140 	call	8214 <memchr>
    3e58:	da003d17 	ldw	r8,244(sp)
    3e5c:	10045426 	beq	r2,zero,4fb0 <___vfprintf_internal_r+0x1da0>
    3e60:	1405c83a 	sub	r2,r2,r16
    3e64:	d8802e15 	stw	r2,184(sp)
    3e68:	1003cc16 	blt	r2,zero,4d9c <___vfprintf_internal_r+0x1b8c>
    3e6c:	df002783 	ldbu	fp,158(sp)
    3e70:	d8802a15 	stw	r2,168(sp)
    3e74:	dcc02d15 	stw	r19,180(sp)
    3e78:	d8002915 	stw	zero,164(sp)
    3e7c:	d8003215 	stw	zero,200(sp)
    3e80:	003eb006 	br	3944 <__alt_data_end+0xff003944>
    3e84:	18c03fcc 	andi	r3,r3,255
    3e88:	183f9b26 	beq	r3,zero,3cf8 <__alt_data_end+0xff003cf8>
    3e8c:	d9c02785 	stb	r7,158(sp)
    3e90:	003f9906 	br	3cf8 <__alt_data_end+0xff003cf8>
    3e94:	18c03fcc 	andi	r3,r3,255
    3e98:	1805551e 	bne	r3,zero,53f0 <___vfprintf_internal_r+0x21e0>
    3e9c:	01400074 	movhi	r5,1
    3ea0:	29456904 	addi	r5,r5,5540
    3ea4:	d9403915 	stw	r5,228(sp)
    3ea8:	9080080c 	andi	r2,r18,32
    3eac:	103fae1e 	bne	r2,zero,3d68 <__alt_data_end+0xff003d68>
    3eb0:	9080040c 	andi	r2,r18,16
    3eb4:	1002de26 	beq	r2,zero,4a30 <___vfprintf_internal_r+0x1820>
    3eb8:	d8c02d17 	ldw	r3,180(sp)
    3ebc:	002d883a 	mov	r22,zero
    3ec0:	1cc00017 	ldw	r19,0(r3)
    3ec4:	18c00104 	addi	r3,r3,4
    3ec8:	d8c02d15 	stw	r3,180(sp)
    3ecc:	003fab06 	br	3d7c <__alt_data_end+0xff003d7c>
    3ed0:	38803fcc 	andi	r2,r7,255
    3ed4:	1080201c 	xori	r2,r2,128
    3ed8:	10bfe004 	addi	r2,r2,-128
    3edc:	1002d21e 	bne	r2,zero,4a28 <___vfprintf_internal_r+0x1818>
    3ee0:	00c00044 	movi	r3,1
    3ee4:	01c00804 	movi	r7,32
    3ee8:	ac400007 	ldb	r17,0(r21)
    3eec:	003d2906 	br	3394 <__alt_data_end+0xff003394>
    3ef0:	94800054 	ori	r18,r18,1
    3ef4:	ac400007 	ldb	r17,0(r21)
    3ef8:	003d2606 	br	3394 <__alt_data_end+0xff003394>
    3efc:	18c03fcc 	andi	r3,r3,255
    3f00:	183e0526 	beq	r3,zero,3718 <__alt_data_end+0xff003718>
    3f04:	d9c02785 	stb	r7,158(sp)
    3f08:	003e0306 	br	3718 <__alt_data_end+0xff003718>
    3f0c:	94801014 	ori	r18,r18,64
    3f10:	ac400007 	ldb	r17,0(r21)
    3f14:	003d1f06 	br	3394 <__alt_data_end+0xff003394>
    3f18:	ac400007 	ldb	r17,0(r21)
    3f1c:	8a438726 	beq	r17,r9,4d3c <___vfprintf_internal_r+0x1b2c>
    3f20:	94800414 	ori	r18,r18,16
    3f24:	003d1b06 	br	3394 <__alt_data_end+0xff003394>
    3f28:	18c03fcc 	andi	r3,r3,255
    3f2c:	1805341e 	bne	r3,zero,5400 <___vfprintf_internal_r+0x21f0>
    3f30:	9080080c 	andi	r2,r18,32
    3f34:	1002cd26 	beq	r2,zero,4a6c <___vfprintf_internal_r+0x185c>
    3f38:	d9402d17 	ldw	r5,180(sp)
    3f3c:	d9002f17 	ldw	r4,188(sp)
    3f40:	28800017 	ldw	r2,0(r5)
    3f44:	2007d7fa 	srai	r3,r4,31
    3f48:	29400104 	addi	r5,r5,4
    3f4c:	d9402d15 	stw	r5,180(sp)
    3f50:	11000015 	stw	r4,0(r2)
    3f54:	10c00115 	stw	r3,4(r2)
    3f58:	003ce506 	br	32f0 <__alt_data_end+0xff0032f0>
    3f5c:	d8c02d17 	ldw	r3,180(sp)
    3f60:	d9002d17 	ldw	r4,180(sp)
    3f64:	d8002785 	stb	zero,158(sp)
    3f68:	18800017 	ldw	r2,0(r3)
    3f6c:	21000104 	addi	r4,r4,4
    3f70:	00c00044 	movi	r3,1
    3f74:	d8c02a15 	stw	r3,168(sp)
    3f78:	d8801405 	stb	r2,80(sp)
    3f7c:	d9002d15 	stw	r4,180(sp)
    3f80:	d8c02e15 	stw	r3,184(sp)
    3f84:	d8002915 	stw	zero,164(sp)
    3f88:	d8003215 	stw	zero,200(sp)
    3f8c:	dc001404 	addi	r16,sp,80
    3f90:	0039883a 	mov	fp,zero
    3f94:	003e7206 	br	3960 <__alt_data_end+0xff003960>
    3f98:	01000074 	movhi	r4,1
    3f9c:	21056904 	addi	r4,r4,5540
    3fa0:	0039883a 	mov	fp,zero
    3fa4:	d9003915 	stw	r4,228(sp)
    3fa8:	04401e04 	movi	r17,120
    3fac:	003f8206 	br	3db8 <__alt_data_end+0xff003db8>
    3fb0:	18c03fcc 	andi	r3,r3,255
    3fb4:	1805061e 	bne	r3,zero,53d0 <___vfprintf_internal_r+0x21c0>
    3fb8:	883d9126 	beq	r17,zero,3600 <__alt_data_end+0xff003600>
    3fbc:	00c00044 	movi	r3,1
    3fc0:	d8c02a15 	stw	r3,168(sp)
    3fc4:	dc401405 	stb	r17,80(sp)
    3fc8:	d8002785 	stb	zero,158(sp)
    3fcc:	003fec06 	br	3f80 <__alt_data_end+0xff003f80>
    3fd0:	01400074 	movhi	r5,1
    3fd4:	29456904 	addi	r5,r5,5540
    3fd8:	d9403915 	stw	r5,228(sp)
    3fdc:	d8c02d15 	stw	r3,180(sp)
    3fe0:	1025883a 	mov	r18,r2
    3fe4:	04401e04 	movi	r17,120
    3fe8:	9d84b03a 	or	r2,r19,r22
    3fec:	1000fc1e 	bne	r2,zero,43e0 <___vfprintf_internal_r+0x11d0>
    3ff0:	0039883a 	mov	fp,zero
    3ff4:	00800084 	movi	r2,2
    3ff8:	10803fcc 	andi	r2,r2,255
    3ffc:	00c00044 	movi	r3,1
    4000:	10c20f26 	beq	r2,r3,4840 <___vfprintf_internal_r+0x1630>
    4004:	00c00084 	movi	r3,2
    4008:	10fd6326 	beq	r2,r3,3598 <__alt_data_end+0xff003598>
    400c:	003e2d06 	br	38c4 <__alt_data_end+0xff0038c4>
    4010:	d8c02017 	ldw	r3,128(sp)
    4014:	003e9306 	br	3a64 <__alt_data_end+0xff003a64>
    4018:	00801944 	movi	r2,101
    401c:	14407e0e 	bge	r2,r17,4218 <___vfprintf_internal_r+0x1008>
    4020:	d9003617 	ldw	r4,216(sp)
    4024:	d9403817 	ldw	r5,224(sp)
    4028:	000d883a 	mov	r6,zero
    402c:	000f883a 	mov	r7,zero
    4030:	d8c03c15 	stw	r3,240(sp)
    4034:	da003d15 	stw	r8,244(sp)
    4038:	000d1880 	call	d188 <__eqdf2>
    403c:	d8c03c17 	ldw	r3,240(sp)
    4040:	da003d17 	ldw	r8,244(sp)
    4044:	1000f71e 	bne	r2,zero,4424 <___vfprintf_internal_r+0x1214>
    4048:	d8801f17 	ldw	r2,124(sp)
    404c:	01000074 	movhi	r4,1
    4050:	21057004 	addi	r4,r4,5568
    4054:	18c00044 	addi	r3,r3,1
    4058:	10800044 	addi	r2,r2,1
    405c:	41000015 	stw	r4,0(r8)
    4060:	01000044 	movi	r4,1
    4064:	41000115 	stw	r4,4(r8)
    4068:	d8c02015 	stw	r3,128(sp)
    406c:	d8801f15 	stw	r2,124(sp)
    4070:	010001c4 	movi	r4,7
    4074:	2082b816 	blt	r4,r2,4b58 <___vfprintf_internal_r+0x1948>
    4078:	42000204 	addi	r8,r8,8
    407c:	d8802617 	ldw	r2,152(sp)
    4080:	d9403317 	ldw	r5,204(sp)
    4084:	11400216 	blt	r2,r5,4090 <___vfprintf_internal_r+0xe80>
    4088:	9080004c 	andi	r2,r18,1
    408c:	103ed526 	beq	r2,zero,3be4 <__alt_data_end+0xff003be4>
    4090:	d8803717 	ldw	r2,220(sp)
    4094:	d9003417 	ldw	r4,208(sp)
    4098:	d9403717 	ldw	r5,220(sp)
    409c:	1887883a 	add	r3,r3,r2
    40a0:	d8801f17 	ldw	r2,124(sp)
    40a4:	41000015 	stw	r4,0(r8)
    40a8:	41400115 	stw	r5,4(r8)
    40ac:	10800044 	addi	r2,r2,1
    40b0:	d8c02015 	stw	r3,128(sp)
    40b4:	d8801f15 	stw	r2,124(sp)
    40b8:	010001c4 	movi	r4,7
    40bc:	20832916 	blt	r4,r2,4d64 <___vfprintf_internal_r+0x1b54>
    40c0:	42000204 	addi	r8,r8,8
    40c4:	d8803317 	ldw	r2,204(sp)
    40c8:	143fffc4 	addi	r16,r2,-1
    40cc:	043ec50e 	bge	zero,r16,3be4 <__alt_data_end+0xff003be4>
    40d0:	04400404 	movi	r17,16
    40d4:	d8801f17 	ldw	r2,124(sp)
    40d8:	8c00880e 	bge	r17,r16,42fc <___vfprintf_internal_r+0x10ec>
    40dc:	01400074 	movhi	r5,1
    40e0:	29457084 	addi	r5,r5,5570
    40e4:	d9402b15 	stw	r5,172(sp)
    40e8:	058001c4 	movi	r22,7
    40ec:	dcc02c17 	ldw	r19,176(sp)
    40f0:	00000306 	br	4100 <___vfprintf_internal_r+0xef0>
    40f4:	42000204 	addi	r8,r8,8
    40f8:	843ffc04 	addi	r16,r16,-16
    40fc:	8c00820e 	bge	r17,r16,4308 <___vfprintf_internal_r+0x10f8>
    4100:	18c00404 	addi	r3,r3,16
    4104:	10800044 	addi	r2,r2,1
    4108:	45000015 	stw	r20,0(r8)
    410c:	44400115 	stw	r17,4(r8)
    4110:	d8c02015 	stw	r3,128(sp)
    4114:	d8801f15 	stw	r2,124(sp)
    4118:	b0bff60e 	bge	r22,r2,40f4 <__alt_data_end+0xff0040f4>
    411c:	d9801e04 	addi	r6,sp,120
    4120:	b80b883a 	mov	r5,r23
    4124:	9809883a 	mov	r4,r19
    4128:	0009fac0 	call	9fac <__sprint_r>
    412c:	103d3a1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4130:	d8c02017 	ldw	r3,128(sp)
    4134:	d8801f17 	ldw	r2,124(sp)
    4138:	da000404 	addi	r8,sp,16
    413c:	003fee06 	br	40f8 <__alt_data_end+0xff0040f8>
    4140:	d9403117 	ldw	r5,196(sp)
    4144:	d8802a17 	ldw	r2,168(sp)
    4148:	28adc83a 	sub	r22,r5,r2
    414c:	05be630e 	bge	zero,r22,3adc <__alt_data_end+0xff003adc>
    4150:	07000404 	movi	fp,16
    4154:	d8801f17 	ldw	r2,124(sp)
    4158:	e5838f0e 	bge	fp,r22,4f98 <___vfprintf_internal_r+0x1d88>
    415c:	01400074 	movhi	r5,1
    4160:	29457084 	addi	r5,r5,5570
    4164:	dc403015 	stw	r17,192(sp)
    4168:	d9402b15 	stw	r5,172(sp)
    416c:	b023883a 	mov	r17,r22
    4170:	04c001c4 	movi	r19,7
    4174:	a82d883a 	mov	r22,r21
    4178:	902b883a 	mov	r21,r18
    417c:	8025883a 	mov	r18,r16
    4180:	dc002c17 	ldw	r16,176(sp)
    4184:	00000306 	br	4194 <___vfprintf_internal_r+0xf84>
    4188:	8c7ffc04 	addi	r17,r17,-16
    418c:	42000204 	addi	r8,r8,8
    4190:	e440110e 	bge	fp,r17,41d8 <___vfprintf_internal_r+0xfc8>
    4194:	18c00404 	addi	r3,r3,16
    4198:	10800044 	addi	r2,r2,1
    419c:	45000015 	stw	r20,0(r8)
    41a0:	47000115 	stw	fp,4(r8)
    41a4:	d8c02015 	stw	r3,128(sp)
    41a8:	d8801f15 	stw	r2,124(sp)
    41ac:	98bff60e 	bge	r19,r2,4188 <__alt_data_end+0xff004188>
    41b0:	d9801e04 	addi	r6,sp,120
    41b4:	b80b883a 	mov	r5,r23
    41b8:	8009883a 	mov	r4,r16
    41bc:	0009fac0 	call	9fac <__sprint_r>
    41c0:	103d151e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    41c4:	8c7ffc04 	addi	r17,r17,-16
    41c8:	d8c02017 	ldw	r3,128(sp)
    41cc:	d8801f17 	ldw	r2,124(sp)
    41d0:	da000404 	addi	r8,sp,16
    41d4:	e47fef16 	blt	fp,r17,4194 <__alt_data_end+0xff004194>
    41d8:	9021883a 	mov	r16,r18
    41dc:	a825883a 	mov	r18,r21
    41e0:	b02b883a 	mov	r21,r22
    41e4:	882d883a 	mov	r22,r17
    41e8:	dc403017 	ldw	r17,192(sp)
    41ec:	d9002b17 	ldw	r4,172(sp)
    41f0:	1d87883a 	add	r3,r3,r22
    41f4:	10800044 	addi	r2,r2,1
    41f8:	41000015 	stw	r4,0(r8)
    41fc:	45800115 	stw	r22,4(r8)
    4200:	d8c02015 	stw	r3,128(sp)
    4204:	d8801f15 	stw	r2,124(sp)
    4208:	010001c4 	movi	r4,7
    420c:	20818e16 	blt	r4,r2,4848 <___vfprintf_internal_r+0x1638>
    4210:	42000204 	addi	r8,r8,8
    4214:	003e3106 	br	3adc <__alt_data_end+0xff003adc>
    4218:	d9403317 	ldw	r5,204(sp)
    421c:	00800044 	movi	r2,1
    4220:	18c00044 	addi	r3,r3,1
    4224:	1141530e 	bge	r2,r5,4774 <___vfprintf_internal_r+0x1564>
    4228:	dc401f17 	ldw	r17,124(sp)
    422c:	00800044 	movi	r2,1
    4230:	40800115 	stw	r2,4(r8)
    4234:	8c400044 	addi	r17,r17,1
    4238:	44000015 	stw	r16,0(r8)
    423c:	d8c02015 	stw	r3,128(sp)
    4240:	dc401f15 	stw	r17,124(sp)
    4244:	008001c4 	movi	r2,7
    4248:	14416b16 	blt	r2,r17,47f8 <___vfprintf_internal_r+0x15e8>
    424c:	42000204 	addi	r8,r8,8
    4250:	d8803717 	ldw	r2,220(sp)
    4254:	d9003417 	ldw	r4,208(sp)
    4258:	8c400044 	addi	r17,r17,1
    425c:	10c7883a 	add	r3,r2,r3
    4260:	40800115 	stw	r2,4(r8)
    4264:	41000015 	stw	r4,0(r8)
    4268:	d8c02015 	stw	r3,128(sp)
    426c:	dc401f15 	stw	r17,124(sp)
    4270:	008001c4 	movi	r2,7
    4274:	14416916 	blt	r2,r17,481c <___vfprintf_internal_r+0x160c>
    4278:	45800204 	addi	r22,r8,8
    427c:	d9003617 	ldw	r4,216(sp)
    4280:	d9403817 	ldw	r5,224(sp)
    4284:	000d883a 	mov	r6,zero
    4288:	000f883a 	mov	r7,zero
    428c:	d8c03c15 	stw	r3,240(sp)
    4290:	000d1880 	call	d188 <__eqdf2>
    4294:	d8c03c17 	ldw	r3,240(sp)
    4298:	1000bc26 	beq	r2,zero,458c <___vfprintf_internal_r+0x137c>
    429c:	d9403317 	ldw	r5,204(sp)
    42a0:	84000044 	addi	r16,r16,1
    42a4:	8c400044 	addi	r17,r17,1
    42a8:	28bfffc4 	addi	r2,r5,-1
    42ac:	1887883a 	add	r3,r3,r2
    42b0:	b0800115 	stw	r2,4(r22)
    42b4:	b4000015 	stw	r16,0(r22)
    42b8:	d8c02015 	stw	r3,128(sp)
    42bc:	dc401f15 	stw	r17,124(sp)
    42c0:	008001c4 	movi	r2,7
    42c4:	14414316 	blt	r2,r17,47d4 <___vfprintf_internal_r+0x15c4>
    42c8:	b5800204 	addi	r22,r22,8
    42cc:	d9003a17 	ldw	r4,232(sp)
    42d0:	df0022c4 	addi	fp,sp,139
    42d4:	8c400044 	addi	r17,r17,1
    42d8:	20c7883a 	add	r3,r4,r3
    42dc:	b7000015 	stw	fp,0(r22)
    42e0:	b1000115 	stw	r4,4(r22)
    42e4:	d8c02015 	stw	r3,128(sp)
    42e8:	dc401f15 	stw	r17,124(sp)
    42ec:	008001c4 	movi	r2,7
    42f0:	14400e16 	blt	r2,r17,432c <___vfprintf_internal_r+0x111c>
    42f4:	b2000204 	addi	r8,r22,8
    42f8:	003e3a06 	br	3be4 <__alt_data_end+0xff003be4>
    42fc:	01000074 	movhi	r4,1
    4300:	21057084 	addi	r4,r4,5570
    4304:	d9002b15 	stw	r4,172(sp)
    4308:	d9002b17 	ldw	r4,172(sp)
    430c:	1c07883a 	add	r3,r3,r16
    4310:	44000115 	stw	r16,4(r8)
    4314:	41000015 	stw	r4,0(r8)
    4318:	10800044 	addi	r2,r2,1
    431c:	d8c02015 	stw	r3,128(sp)
    4320:	d8801f15 	stw	r2,124(sp)
    4324:	010001c4 	movi	r4,7
    4328:	20be2d0e 	bge	r4,r2,3be0 <__alt_data_end+0xff003be0>
    432c:	d9002c17 	ldw	r4,176(sp)
    4330:	d9801e04 	addi	r6,sp,120
    4334:	b80b883a 	mov	r5,r23
    4338:	0009fac0 	call	9fac <__sprint_r>
    433c:	103cb61e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4340:	d8c02017 	ldw	r3,128(sp)
    4344:	da000404 	addi	r8,sp,16
    4348:	003e2606 	br	3be4 <__alt_data_end+0xff003be4>
    434c:	d9002c17 	ldw	r4,176(sp)
    4350:	d9801e04 	addi	r6,sp,120
    4354:	b80b883a 	mov	r5,r23
    4358:	0009fac0 	call	9fac <__sprint_r>
    435c:	103e5d26 	beq	r2,zero,3cd4 <__alt_data_end+0xff003cd4>
    4360:	003cad06 	br	3618 <__alt_data_end+0xff003618>
    4364:	d9002c17 	ldw	r4,176(sp)
    4368:	d9801e04 	addi	r6,sp,120
    436c:	b80b883a 	mov	r5,r23
    4370:	0009fac0 	call	9fac <__sprint_r>
    4374:	103ca81e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4378:	d8c02017 	ldw	r3,128(sp)
    437c:	da000404 	addi	r8,sp,16
    4380:	003e0b06 	br	3bb0 <__alt_data_end+0xff003bb0>
    4384:	d9002c17 	ldw	r4,176(sp)
    4388:	d9801e04 	addi	r6,sp,120
    438c:	b80b883a 	mov	r5,r23
    4390:	0009fac0 	call	9fac <__sprint_r>
    4394:	103ca01e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4398:	d8c02017 	ldw	r3,128(sp)
    439c:	da000404 	addi	r8,sp,16
    43a0:	003dbd06 	br	3a98 <__alt_data_end+0xff003a98>
    43a4:	d9002c17 	ldw	r4,176(sp)
    43a8:	d9801e04 	addi	r6,sp,120
    43ac:	b80b883a 	mov	r5,r23
    43b0:	0009fac0 	call	9fac <__sprint_r>
    43b4:	103c981e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    43b8:	d8c02017 	ldw	r3,128(sp)
    43bc:	da000404 	addi	r8,sp,16
    43c0:	003dc306 	br	3ad0 <__alt_data_end+0xff003ad0>
    43c4:	d8802917 	ldw	r2,164(sp)
    43c8:	d8002785 	stb	zero,158(sp)
    43cc:	103f0616 	blt	r2,zero,3fe8 <__alt_data_end+0xff003fe8>
    43d0:	00ffdfc4 	movi	r3,-129
    43d4:	9d84b03a 	or	r2,r19,r22
    43d8:	90e4703a 	and	r18,r18,r3
    43dc:	103c6b26 	beq	r2,zero,358c <__alt_data_end+0xff00358c>
    43e0:	0039883a 	mov	fp,zero
    43e4:	003e7406 	br	3db8 <__alt_data_end+0xff003db8>
    43e8:	9080040c 	andi	r2,r18,16
    43ec:	1001b326 	beq	r2,zero,4abc <___vfprintf_internal_r+0x18ac>
    43f0:	d9002d17 	ldw	r4,180(sp)
    43f4:	d9402917 	ldw	r5,164(sp)
    43f8:	d8002785 	stb	zero,158(sp)
    43fc:	20800104 	addi	r2,r4,4
    4400:	24c00017 	ldw	r19,0(r4)
    4404:	002d883a 	mov	r22,zero
    4408:	2801b516 	blt	r5,zero,4ae0 <___vfprintf_internal_r+0x18d0>
    440c:	00ffdfc4 	movi	r3,-129
    4410:	d8802d15 	stw	r2,180(sp)
    4414:	90e4703a 	and	r18,r18,r3
    4418:	983d2726 	beq	r19,zero,38b8 <__alt_data_end+0xff0038b8>
    441c:	0039883a 	mov	fp,zero
    4420:	003d2a06 	br	38cc <__alt_data_end+0xff0038cc>
    4424:	dc402617 	ldw	r17,152(sp)
    4428:	0441d30e 	bge	zero,r17,4b78 <___vfprintf_internal_r+0x1968>
    442c:	dc403217 	ldw	r17,200(sp)
    4430:	d8803317 	ldw	r2,204(sp)
    4434:	1440010e 	bge	r2,r17,443c <___vfprintf_internal_r+0x122c>
    4438:	1023883a 	mov	r17,r2
    443c:	04400a0e 	bge	zero,r17,4468 <___vfprintf_internal_r+0x1258>
    4440:	d8801f17 	ldw	r2,124(sp)
    4444:	1c47883a 	add	r3,r3,r17
    4448:	44000015 	stw	r16,0(r8)
    444c:	10800044 	addi	r2,r2,1
    4450:	44400115 	stw	r17,4(r8)
    4454:	d8c02015 	stw	r3,128(sp)
    4458:	d8801f15 	stw	r2,124(sp)
    445c:	010001c4 	movi	r4,7
    4460:	20826516 	blt	r4,r2,4df8 <___vfprintf_internal_r+0x1be8>
    4464:	42000204 	addi	r8,r8,8
    4468:	88026116 	blt	r17,zero,4df0 <___vfprintf_internal_r+0x1be0>
    446c:	d9003217 	ldw	r4,200(sp)
    4470:	2463c83a 	sub	r17,r4,r17
    4474:	04407b0e 	bge	zero,r17,4664 <___vfprintf_internal_r+0x1454>
    4478:	05800404 	movi	r22,16
    447c:	d8801f17 	ldw	r2,124(sp)
    4480:	b4419d0e 	bge	r22,r17,4af8 <___vfprintf_internal_r+0x18e8>
    4484:	01000074 	movhi	r4,1
    4488:	21057084 	addi	r4,r4,5570
    448c:	d9002b15 	stw	r4,172(sp)
    4490:	070001c4 	movi	fp,7
    4494:	dcc02c17 	ldw	r19,176(sp)
    4498:	00000306 	br	44a8 <___vfprintf_internal_r+0x1298>
    449c:	42000204 	addi	r8,r8,8
    44a0:	8c7ffc04 	addi	r17,r17,-16
    44a4:	b441970e 	bge	r22,r17,4b04 <___vfprintf_internal_r+0x18f4>
    44a8:	18c00404 	addi	r3,r3,16
    44ac:	10800044 	addi	r2,r2,1
    44b0:	45000015 	stw	r20,0(r8)
    44b4:	45800115 	stw	r22,4(r8)
    44b8:	d8c02015 	stw	r3,128(sp)
    44bc:	d8801f15 	stw	r2,124(sp)
    44c0:	e0bff60e 	bge	fp,r2,449c <__alt_data_end+0xff00449c>
    44c4:	d9801e04 	addi	r6,sp,120
    44c8:	b80b883a 	mov	r5,r23
    44cc:	9809883a 	mov	r4,r19
    44d0:	0009fac0 	call	9fac <__sprint_r>
    44d4:	103c501e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    44d8:	d8c02017 	ldw	r3,128(sp)
    44dc:	d8801f17 	ldw	r2,124(sp)
    44e0:	da000404 	addi	r8,sp,16
    44e4:	003fee06 	br	44a0 <__alt_data_end+0xff0044a0>
    44e8:	d9002c17 	ldw	r4,176(sp)
    44ec:	d9801e04 	addi	r6,sp,120
    44f0:	b80b883a 	mov	r5,r23
    44f4:	0009fac0 	call	9fac <__sprint_r>
    44f8:	103c471e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    44fc:	d8c02017 	ldw	r3,128(sp)
    4500:	df002787 	ldb	fp,158(sp)
    4504:	da000404 	addi	r8,sp,16
    4508:	003d5606 	br	3a64 <__alt_data_end+0xff003a64>
    450c:	9080040c 	andi	r2,r18,16
    4510:	10016126 	beq	r2,zero,4a98 <___vfprintf_internal_r+0x1888>
    4514:	d8802d17 	ldw	r2,180(sp)
    4518:	14c00017 	ldw	r19,0(r2)
    451c:	10800104 	addi	r2,r2,4
    4520:	d8802d15 	stw	r2,180(sp)
    4524:	982dd7fa 	srai	r22,r19,31
    4528:	b005883a 	mov	r2,r22
    452c:	003c8206 	br	3738 <__alt_data_end+0xff003738>
    4530:	9080040c 	andi	r2,r18,16
    4534:	10003526 	beq	r2,zero,460c <___vfprintf_internal_r+0x13fc>
    4538:	d9402d17 	ldw	r5,180(sp)
    453c:	d8c02917 	ldw	r3,164(sp)
    4540:	d8002785 	stb	zero,158(sp)
    4544:	28800104 	addi	r2,r5,4
    4548:	2cc00017 	ldw	r19,0(r5)
    454c:	002d883a 	mov	r22,zero
    4550:	18003716 	blt	r3,zero,4630 <___vfprintf_internal_r+0x1420>
    4554:	00ffdfc4 	movi	r3,-129
    4558:	d8802d15 	stw	r2,180(sp)
    455c:	90e4703a 	and	r18,r18,r3
    4560:	0039883a 	mov	fp,zero
    4564:	983df326 	beq	r19,zero,3d34 <__alt_data_end+0xff003d34>
    4568:	00800244 	movi	r2,9
    456c:	14fc7b36 	bltu	r2,r19,375c <__alt_data_end+0xff00375c>
    4570:	d8c02817 	ldw	r3,160(sp)
    4574:	dc001dc4 	addi	r16,sp,119
    4578:	9cc00c04 	addi	r19,r19,48
    457c:	1c07c83a 	sub	r3,r3,r16
    4580:	dcc01dc5 	stb	r19,119(sp)
    4584:	d8c02e15 	stw	r3,184(sp)
    4588:	003ce806 	br	392c <__alt_data_end+0xff00392c>
    458c:	d8803317 	ldw	r2,204(sp)
    4590:	143fffc4 	addi	r16,r2,-1
    4594:	043f4d0e 	bge	zero,r16,42cc <__alt_data_end+0xff0042cc>
    4598:	07000404 	movi	fp,16
    459c:	e400810e 	bge	fp,r16,47a4 <___vfprintf_internal_r+0x1594>
    45a0:	01400074 	movhi	r5,1
    45a4:	29457084 	addi	r5,r5,5570
    45a8:	d9402b15 	stw	r5,172(sp)
    45ac:	01c001c4 	movi	r7,7
    45b0:	dcc02c17 	ldw	r19,176(sp)
    45b4:	00000306 	br	45c4 <___vfprintf_internal_r+0x13b4>
    45b8:	b5800204 	addi	r22,r22,8
    45bc:	843ffc04 	addi	r16,r16,-16
    45c0:	e4007b0e 	bge	fp,r16,47b0 <___vfprintf_internal_r+0x15a0>
    45c4:	18c00404 	addi	r3,r3,16
    45c8:	8c400044 	addi	r17,r17,1
    45cc:	b5000015 	stw	r20,0(r22)
    45d0:	b7000115 	stw	fp,4(r22)
    45d4:	d8c02015 	stw	r3,128(sp)
    45d8:	dc401f15 	stw	r17,124(sp)
    45dc:	3c7ff60e 	bge	r7,r17,45b8 <__alt_data_end+0xff0045b8>
    45e0:	d9801e04 	addi	r6,sp,120
    45e4:	b80b883a 	mov	r5,r23
    45e8:	9809883a 	mov	r4,r19
    45ec:	d9c03c15 	stw	r7,240(sp)
    45f0:	0009fac0 	call	9fac <__sprint_r>
    45f4:	d9c03c17 	ldw	r7,240(sp)
    45f8:	103c071e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    45fc:	d8c02017 	ldw	r3,128(sp)
    4600:	dc401f17 	ldw	r17,124(sp)
    4604:	dd800404 	addi	r22,sp,16
    4608:	003fec06 	br	45bc <__alt_data_end+0xff0045bc>
    460c:	9080100c 	andi	r2,r18,64
    4610:	d8002785 	stb	zero,158(sp)
    4614:	10010e26 	beq	r2,zero,4a50 <___vfprintf_internal_r+0x1840>
    4618:	d9002d17 	ldw	r4,180(sp)
    461c:	d9402917 	ldw	r5,164(sp)
    4620:	002d883a 	mov	r22,zero
    4624:	20800104 	addi	r2,r4,4
    4628:	24c0000b 	ldhu	r19,0(r4)
    462c:	283fc90e 	bge	r5,zero,4554 <__alt_data_end+0xff004554>
    4630:	d8802d15 	stw	r2,180(sp)
    4634:	0039883a 	mov	fp,zero
    4638:	9d84b03a 	or	r2,r19,r22
    463c:	103c461e 	bne	r2,zero,3758 <__alt_data_end+0xff003758>
    4640:	00800044 	movi	r2,1
    4644:	003e6c06 	br	3ff8 <__alt_data_end+0xff003ff8>
    4648:	d9002c17 	ldw	r4,176(sp)
    464c:	d9801e04 	addi	r6,sp,120
    4650:	b80b883a 	mov	r5,r23
    4654:	0009fac0 	call	9fac <__sprint_r>
    4658:	103bef1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    465c:	d8c02017 	ldw	r3,128(sp)
    4660:	da000404 	addi	r8,sp,16
    4664:	d9003217 	ldw	r4,200(sp)
    4668:	d8802617 	ldw	r2,152(sp)
    466c:	d9403317 	ldw	r5,204(sp)
    4670:	8123883a 	add	r17,r16,r4
    4674:	11400216 	blt	r2,r5,4680 <___vfprintf_internal_r+0x1470>
    4678:	9100004c 	andi	r4,r18,1
    467c:	20000d26 	beq	r4,zero,46b4 <___vfprintf_internal_r+0x14a4>
    4680:	d9003717 	ldw	r4,220(sp)
    4684:	d9403417 	ldw	r5,208(sp)
    4688:	1907883a 	add	r3,r3,r4
    468c:	d9001f17 	ldw	r4,124(sp)
    4690:	41400015 	stw	r5,0(r8)
    4694:	d9403717 	ldw	r5,220(sp)
    4698:	21000044 	addi	r4,r4,1
    469c:	d8c02015 	stw	r3,128(sp)
    46a0:	41400115 	stw	r5,4(r8)
    46a4:	d9001f15 	stw	r4,124(sp)
    46a8:	014001c4 	movi	r5,7
    46ac:	2901e816 	blt	r5,r4,4e50 <___vfprintf_internal_r+0x1c40>
    46b0:	42000204 	addi	r8,r8,8
    46b4:	d9003317 	ldw	r4,204(sp)
    46b8:	8121883a 	add	r16,r16,r4
    46bc:	2085c83a 	sub	r2,r4,r2
    46c0:	8461c83a 	sub	r16,r16,r17
    46c4:	1400010e 	bge	r2,r16,46cc <___vfprintf_internal_r+0x14bc>
    46c8:	1021883a 	mov	r16,r2
    46cc:	04000a0e 	bge	zero,r16,46f8 <___vfprintf_internal_r+0x14e8>
    46d0:	d9001f17 	ldw	r4,124(sp)
    46d4:	1c07883a 	add	r3,r3,r16
    46d8:	44400015 	stw	r17,0(r8)
    46dc:	21000044 	addi	r4,r4,1
    46e0:	44000115 	stw	r16,4(r8)
    46e4:	d8c02015 	stw	r3,128(sp)
    46e8:	d9001f15 	stw	r4,124(sp)
    46ec:	014001c4 	movi	r5,7
    46f0:	2901fb16 	blt	r5,r4,4ee0 <___vfprintf_internal_r+0x1cd0>
    46f4:	42000204 	addi	r8,r8,8
    46f8:	8001f716 	blt	r16,zero,4ed8 <___vfprintf_internal_r+0x1cc8>
    46fc:	1421c83a 	sub	r16,r2,r16
    4700:	043d380e 	bge	zero,r16,3be4 <__alt_data_end+0xff003be4>
    4704:	04400404 	movi	r17,16
    4708:	d8801f17 	ldw	r2,124(sp)
    470c:	8c3efb0e 	bge	r17,r16,42fc <__alt_data_end+0xff0042fc>
    4710:	01400074 	movhi	r5,1
    4714:	29457084 	addi	r5,r5,5570
    4718:	d9402b15 	stw	r5,172(sp)
    471c:	058001c4 	movi	r22,7
    4720:	dcc02c17 	ldw	r19,176(sp)
    4724:	00000306 	br	4734 <___vfprintf_internal_r+0x1524>
    4728:	42000204 	addi	r8,r8,8
    472c:	843ffc04 	addi	r16,r16,-16
    4730:	8c3ef50e 	bge	r17,r16,4308 <__alt_data_end+0xff004308>
    4734:	18c00404 	addi	r3,r3,16
    4738:	10800044 	addi	r2,r2,1
    473c:	45000015 	stw	r20,0(r8)
    4740:	44400115 	stw	r17,4(r8)
    4744:	d8c02015 	stw	r3,128(sp)
    4748:	d8801f15 	stw	r2,124(sp)
    474c:	b0bff60e 	bge	r22,r2,4728 <__alt_data_end+0xff004728>
    4750:	d9801e04 	addi	r6,sp,120
    4754:	b80b883a 	mov	r5,r23
    4758:	9809883a 	mov	r4,r19
    475c:	0009fac0 	call	9fac <__sprint_r>
    4760:	103bad1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4764:	d8c02017 	ldw	r3,128(sp)
    4768:	d8801f17 	ldw	r2,124(sp)
    476c:	da000404 	addi	r8,sp,16
    4770:	003fee06 	br	472c <__alt_data_end+0xff00472c>
    4774:	9088703a 	and	r4,r18,r2
    4778:	203eab1e 	bne	r4,zero,4228 <__alt_data_end+0xff004228>
    477c:	dc401f17 	ldw	r17,124(sp)
    4780:	40800115 	stw	r2,4(r8)
    4784:	44000015 	stw	r16,0(r8)
    4788:	8c400044 	addi	r17,r17,1
    478c:	d8c02015 	stw	r3,128(sp)
    4790:	dc401f15 	stw	r17,124(sp)
    4794:	008001c4 	movi	r2,7
    4798:	14400e16 	blt	r2,r17,47d4 <___vfprintf_internal_r+0x15c4>
    479c:	45800204 	addi	r22,r8,8
    47a0:	003eca06 	br	42cc <__alt_data_end+0xff0042cc>
    47a4:	01000074 	movhi	r4,1
    47a8:	21057084 	addi	r4,r4,5570
    47ac:	d9002b15 	stw	r4,172(sp)
    47b0:	d8802b17 	ldw	r2,172(sp)
    47b4:	1c07883a 	add	r3,r3,r16
    47b8:	8c400044 	addi	r17,r17,1
    47bc:	b0800015 	stw	r2,0(r22)
    47c0:	b4000115 	stw	r16,4(r22)
    47c4:	d8c02015 	stw	r3,128(sp)
    47c8:	dc401f15 	stw	r17,124(sp)
    47cc:	008001c4 	movi	r2,7
    47d0:	147ebd0e 	bge	r2,r17,42c8 <__alt_data_end+0xff0042c8>
    47d4:	d9002c17 	ldw	r4,176(sp)
    47d8:	d9801e04 	addi	r6,sp,120
    47dc:	b80b883a 	mov	r5,r23
    47e0:	0009fac0 	call	9fac <__sprint_r>
    47e4:	103b8c1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    47e8:	d8c02017 	ldw	r3,128(sp)
    47ec:	dc401f17 	ldw	r17,124(sp)
    47f0:	dd800404 	addi	r22,sp,16
    47f4:	003eb506 	br	42cc <__alt_data_end+0xff0042cc>
    47f8:	d9002c17 	ldw	r4,176(sp)
    47fc:	d9801e04 	addi	r6,sp,120
    4800:	b80b883a 	mov	r5,r23
    4804:	0009fac0 	call	9fac <__sprint_r>
    4808:	103b831e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    480c:	d8c02017 	ldw	r3,128(sp)
    4810:	dc401f17 	ldw	r17,124(sp)
    4814:	da000404 	addi	r8,sp,16
    4818:	003e8d06 	br	4250 <__alt_data_end+0xff004250>
    481c:	d9002c17 	ldw	r4,176(sp)
    4820:	d9801e04 	addi	r6,sp,120
    4824:	b80b883a 	mov	r5,r23
    4828:	0009fac0 	call	9fac <__sprint_r>
    482c:	103b7a1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4830:	d8c02017 	ldw	r3,128(sp)
    4834:	dc401f17 	ldw	r17,124(sp)
    4838:	dd800404 	addi	r22,sp,16
    483c:	003e8f06 	br	427c <__alt_data_end+0xff00427c>
    4840:	0027883a 	mov	r19,zero
    4844:	003f4a06 	br	4570 <__alt_data_end+0xff004570>
    4848:	d9002c17 	ldw	r4,176(sp)
    484c:	d9801e04 	addi	r6,sp,120
    4850:	b80b883a 	mov	r5,r23
    4854:	0009fac0 	call	9fac <__sprint_r>
    4858:	103b6f1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    485c:	d8c02017 	ldw	r3,128(sp)
    4860:	da000404 	addi	r8,sp,16
    4864:	003c9d06 	br	3adc <__alt_data_end+0xff003adc>
    4868:	04e7c83a 	sub	r19,zero,r19
    486c:	9804c03a 	cmpne	r2,r19,zero
    4870:	05adc83a 	sub	r22,zero,r22
    4874:	b0adc83a 	sub	r22,r22,r2
    4878:	d8802917 	ldw	r2,164(sp)
    487c:	07000b44 	movi	fp,45
    4880:	df002785 	stb	fp,158(sp)
    4884:	10017b16 	blt	r2,zero,4e74 <___vfprintf_internal_r+0x1c64>
    4888:	00bfdfc4 	movi	r2,-129
    488c:	90a4703a 	and	r18,r18,r2
    4890:	003bb106 	br	3758 <__alt_data_end+0xff003758>
    4894:	d9003617 	ldw	r4,216(sp)
    4898:	d9403817 	ldw	r5,224(sp)
    489c:	da003d15 	stw	r8,244(sp)
    48a0:	0009c240 	call	9c24 <__fpclassifyd>
    48a4:	da003d17 	ldw	r8,244(sp)
    48a8:	1000f026 	beq	r2,zero,4c6c <___vfprintf_internal_r+0x1a5c>
    48ac:	d9002917 	ldw	r4,164(sp)
    48b0:	05bff7c4 	movi	r22,-33
    48b4:	00bfffc4 	movi	r2,-1
    48b8:	8dac703a 	and	r22,r17,r22
    48bc:	20820026 	beq	r4,r2,50c0 <___vfprintf_internal_r+0x1eb0>
    48c0:	008011c4 	movi	r2,71
    48c4:	b081f726 	beq	r22,r2,50a4 <___vfprintf_internal_r+0x1e94>
    48c8:	d9003817 	ldw	r4,224(sp)
    48cc:	90c04014 	ori	r3,r18,256
    48d0:	d8c02b15 	stw	r3,172(sp)
    48d4:	20021516 	blt	r4,zero,512c <___vfprintf_internal_r+0x1f1c>
    48d8:	dcc03817 	ldw	r19,224(sp)
    48dc:	d8002a05 	stb	zero,168(sp)
    48e0:	00801984 	movi	r2,102
    48e4:	8881f926 	beq	r17,r2,50cc <___vfprintf_internal_r+0x1ebc>
    48e8:	00801184 	movi	r2,70
    48ec:	88821c26 	beq	r17,r2,5160 <___vfprintf_internal_r+0x1f50>
    48f0:	00801144 	movi	r2,69
    48f4:	b081ef26 	beq	r22,r2,50b4 <___vfprintf_internal_r+0x1ea4>
    48f8:	d8c02917 	ldw	r3,164(sp)
    48fc:	d8802104 	addi	r2,sp,132
    4900:	d8800315 	stw	r2,12(sp)
    4904:	d9403617 	ldw	r5,216(sp)
    4908:	d8802504 	addi	r2,sp,148
    490c:	d9002c17 	ldw	r4,176(sp)
    4910:	d8800215 	stw	r2,8(sp)
    4914:	d8802604 	addi	r2,sp,152
    4918:	d8c00015 	stw	r3,0(sp)
    491c:	d8800115 	stw	r2,4(sp)
    4920:	01c00084 	movi	r7,2
    4924:	980d883a 	mov	r6,r19
    4928:	d8c03c15 	stw	r3,240(sp)
    492c:	da003d15 	stw	r8,244(sp)
    4930:	00058340 	call	5834 <_dtoa_r>
    4934:	1021883a 	mov	r16,r2
    4938:	008019c4 	movi	r2,103
    493c:	d8c03c17 	ldw	r3,240(sp)
    4940:	da003d17 	ldw	r8,244(sp)
    4944:	88817126 	beq	r17,r2,4f0c <___vfprintf_internal_r+0x1cfc>
    4948:	008011c4 	movi	r2,71
    494c:	88829226 	beq	r17,r2,5398 <___vfprintf_internal_r+0x2188>
    4950:	80f9883a 	add	fp,r16,r3
    4954:	d9003617 	ldw	r4,216(sp)
    4958:	000d883a 	mov	r6,zero
    495c:	000f883a 	mov	r7,zero
    4960:	980b883a 	mov	r5,r19
    4964:	da003d15 	stw	r8,244(sp)
    4968:	000d1880 	call	d188 <__eqdf2>
    496c:	da003d17 	ldw	r8,244(sp)
    4970:	10018d26 	beq	r2,zero,4fa8 <___vfprintf_internal_r+0x1d98>
    4974:	d8802117 	ldw	r2,132(sp)
    4978:	1700062e 	bgeu	r2,fp,4994 <___vfprintf_internal_r+0x1784>
    497c:	01000c04 	movi	r4,48
    4980:	10c00044 	addi	r3,r2,1
    4984:	d8c02115 	stw	r3,132(sp)
    4988:	11000005 	stb	r4,0(r2)
    498c:	d8802117 	ldw	r2,132(sp)
    4990:	173ffb36 	bltu	r2,fp,4980 <__alt_data_end+0xff004980>
    4994:	1405c83a 	sub	r2,r2,r16
    4998:	d8803315 	stw	r2,204(sp)
    499c:	008011c4 	movi	r2,71
    49a0:	b0817626 	beq	r22,r2,4f7c <___vfprintf_internal_r+0x1d6c>
    49a4:	00801944 	movi	r2,101
    49a8:	1442810e 	bge	r2,r17,53b0 <___vfprintf_internal_r+0x21a0>
    49ac:	d8c02617 	ldw	r3,152(sp)
    49b0:	00801984 	movi	r2,102
    49b4:	d8c03215 	stw	r3,200(sp)
    49b8:	8881fe26 	beq	r17,r2,51b4 <___vfprintf_internal_r+0x1fa4>
    49bc:	d8c03217 	ldw	r3,200(sp)
    49c0:	d9003317 	ldw	r4,204(sp)
    49c4:	1901dd16 	blt	r3,r4,513c <___vfprintf_internal_r+0x1f2c>
    49c8:	9480004c 	andi	r18,r18,1
    49cc:	90022b1e 	bne	r18,zero,527c <___vfprintf_internal_r+0x206c>
    49d0:	1805883a 	mov	r2,r3
    49d4:	18028016 	blt	r3,zero,53d8 <___vfprintf_internal_r+0x21c8>
    49d8:	d8c03217 	ldw	r3,200(sp)
    49dc:	044019c4 	movi	r17,103
    49e0:	d8c02e15 	stw	r3,184(sp)
    49e4:	df002a07 	ldb	fp,168(sp)
    49e8:	e001531e 	bne	fp,zero,4f38 <___vfprintf_internal_r+0x1d28>
    49ec:	df002783 	ldbu	fp,158(sp)
    49f0:	d8802a15 	stw	r2,168(sp)
    49f4:	dc802b17 	ldw	r18,172(sp)
    49f8:	d8002915 	stw	zero,164(sp)
    49fc:	003bd106 	br	3944 <__alt_data_end+0xff003944>
    4a00:	d8802d17 	ldw	r2,180(sp)
    4a04:	d8c02d17 	ldw	r3,180(sp)
    4a08:	d9002d17 	ldw	r4,180(sp)
    4a0c:	10800017 	ldw	r2,0(r2)
    4a10:	18c00117 	ldw	r3,4(r3)
    4a14:	21000204 	addi	r4,r4,8
    4a18:	d8803615 	stw	r2,216(sp)
    4a1c:	d8c03815 	stw	r3,224(sp)
    4a20:	d9002d15 	stw	r4,180(sp)
    4a24:	003b7506 	br	37fc <__alt_data_end+0xff0037fc>
    4a28:	ac400007 	ldb	r17,0(r21)
    4a2c:	003a5906 	br	3394 <__alt_data_end+0xff003394>
    4a30:	9080100c 	andi	r2,r18,64
    4a34:	1000a826 	beq	r2,zero,4cd8 <___vfprintf_internal_r+0x1ac8>
    4a38:	d9002d17 	ldw	r4,180(sp)
    4a3c:	002d883a 	mov	r22,zero
    4a40:	24c0000b 	ldhu	r19,0(r4)
    4a44:	21000104 	addi	r4,r4,4
    4a48:	d9002d15 	stw	r4,180(sp)
    4a4c:	003ccb06 	br	3d7c <__alt_data_end+0xff003d7c>
    4a50:	d8c02d17 	ldw	r3,180(sp)
    4a54:	d9002917 	ldw	r4,164(sp)
    4a58:	002d883a 	mov	r22,zero
    4a5c:	18800104 	addi	r2,r3,4
    4a60:	1cc00017 	ldw	r19,0(r3)
    4a64:	203ebb0e 	bge	r4,zero,4554 <__alt_data_end+0xff004554>
    4a68:	003ef106 	br	4630 <__alt_data_end+0xff004630>
    4a6c:	9080040c 	andi	r2,r18,16
    4a70:	1000921e 	bne	r2,zero,4cbc <___vfprintf_internal_r+0x1aac>
    4a74:	9480100c 	andi	r18,r18,64
    4a78:	90013926 	beq	r18,zero,4f60 <___vfprintf_internal_r+0x1d50>
    4a7c:	d9002d17 	ldw	r4,180(sp)
    4a80:	d9402f17 	ldw	r5,188(sp)
    4a84:	20800017 	ldw	r2,0(r4)
    4a88:	21000104 	addi	r4,r4,4
    4a8c:	d9002d15 	stw	r4,180(sp)
    4a90:	1140000d 	sth	r5,0(r2)
    4a94:	003a1606 	br	32f0 <__alt_data_end+0xff0032f0>
    4a98:	9080100c 	andi	r2,r18,64
    4a9c:	10008026 	beq	r2,zero,4ca0 <___vfprintf_internal_r+0x1a90>
    4aa0:	d8c02d17 	ldw	r3,180(sp)
    4aa4:	1cc0000f 	ldh	r19,0(r3)
    4aa8:	18c00104 	addi	r3,r3,4
    4aac:	d8c02d15 	stw	r3,180(sp)
    4ab0:	982dd7fa 	srai	r22,r19,31
    4ab4:	b005883a 	mov	r2,r22
    4ab8:	003b1f06 	br	3738 <__alt_data_end+0xff003738>
    4abc:	9080100c 	andi	r2,r18,64
    4ac0:	d8002785 	stb	zero,158(sp)
    4ac4:	10008a1e 	bne	r2,zero,4cf0 <___vfprintf_internal_r+0x1ae0>
    4ac8:	d9402d17 	ldw	r5,180(sp)
    4acc:	d8c02917 	ldw	r3,164(sp)
    4ad0:	002d883a 	mov	r22,zero
    4ad4:	28800104 	addi	r2,r5,4
    4ad8:	2cc00017 	ldw	r19,0(r5)
    4adc:	183e4b0e 	bge	r3,zero,440c <__alt_data_end+0xff00440c>
    4ae0:	9d86b03a 	or	r3,r19,r22
    4ae4:	d8802d15 	stw	r2,180(sp)
    4ae8:	183e4c1e 	bne	r3,zero,441c <__alt_data_end+0xff00441c>
    4aec:	0039883a 	mov	fp,zero
    4af0:	0005883a 	mov	r2,zero
    4af4:	003d4006 	br	3ff8 <__alt_data_end+0xff003ff8>
    4af8:	01400074 	movhi	r5,1
    4afc:	29457084 	addi	r5,r5,5570
    4b00:	d9402b15 	stw	r5,172(sp)
    4b04:	d9402b17 	ldw	r5,172(sp)
    4b08:	1c47883a 	add	r3,r3,r17
    4b0c:	10800044 	addi	r2,r2,1
    4b10:	41400015 	stw	r5,0(r8)
    4b14:	44400115 	stw	r17,4(r8)
    4b18:	d8c02015 	stw	r3,128(sp)
    4b1c:	d8801f15 	stw	r2,124(sp)
    4b20:	010001c4 	movi	r4,7
    4b24:	20bec816 	blt	r4,r2,4648 <__alt_data_end+0xff004648>
    4b28:	42000204 	addi	r8,r8,8
    4b2c:	003ecd06 	br	4664 <__alt_data_end+0xff004664>
    4b30:	d9002917 	ldw	r4,164(sp)
    4b34:	d8002785 	stb	zero,158(sp)
    4b38:	203d2d16 	blt	r4,zero,3ff0 <__alt_data_end+0xff003ff0>
    4b3c:	00bfdfc4 	movi	r2,-129
    4b40:	90a4703a 	and	r18,r18,r2
    4b44:	003a9106 	br	358c <__alt_data_end+0xff00358c>
    4b48:	01000074 	movhi	r4,1
    4b4c:	21057084 	addi	r4,r4,5570
    4b50:	d9002b15 	stw	r4,172(sp)
    4b54:	003c0c06 	br	3b88 <__alt_data_end+0xff003b88>
    4b58:	d9002c17 	ldw	r4,176(sp)
    4b5c:	d9801e04 	addi	r6,sp,120
    4b60:	b80b883a 	mov	r5,r23
    4b64:	0009fac0 	call	9fac <__sprint_r>
    4b68:	103aab1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4b6c:	d8c02017 	ldw	r3,128(sp)
    4b70:	da000404 	addi	r8,sp,16
    4b74:	003d4106 	br	407c <__alt_data_end+0xff00407c>
    4b78:	d8801f17 	ldw	r2,124(sp)
    4b7c:	01400074 	movhi	r5,1
    4b80:	01000044 	movi	r4,1
    4b84:	18c00044 	addi	r3,r3,1
    4b88:	10800044 	addi	r2,r2,1
    4b8c:	29457004 	addi	r5,r5,5568
    4b90:	41000115 	stw	r4,4(r8)
    4b94:	41400015 	stw	r5,0(r8)
    4b98:	d8c02015 	stw	r3,128(sp)
    4b9c:	d8801f15 	stw	r2,124(sp)
    4ba0:	010001c4 	movi	r4,7
    4ba4:	20805c16 	blt	r4,r2,4d18 <___vfprintf_internal_r+0x1b08>
    4ba8:	42000204 	addi	r8,r8,8
    4bac:	8800041e 	bne	r17,zero,4bc0 <___vfprintf_internal_r+0x19b0>
    4bb0:	d8803317 	ldw	r2,204(sp)
    4bb4:	1000021e 	bne	r2,zero,4bc0 <___vfprintf_internal_r+0x19b0>
    4bb8:	9080004c 	andi	r2,r18,1
    4bbc:	103c0926 	beq	r2,zero,3be4 <__alt_data_end+0xff003be4>
    4bc0:	d9003717 	ldw	r4,220(sp)
    4bc4:	d8801f17 	ldw	r2,124(sp)
    4bc8:	d9403417 	ldw	r5,208(sp)
    4bcc:	20c7883a 	add	r3,r4,r3
    4bd0:	10800044 	addi	r2,r2,1
    4bd4:	41000115 	stw	r4,4(r8)
    4bd8:	41400015 	stw	r5,0(r8)
    4bdc:	d8c02015 	stw	r3,128(sp)
    4be0:	d8801f15 	stw	r2,124(sp)
    4be4:	010001c4 	movi	r4,7
    4be8:	20812116 	blt	r4,r2,5070 <___vfprintf_internal_r+0x1e60>
    4bec:	42000204 	addi	r8,r8,8
    4bf0:	0463c83a 	sub	r17,zero,r17
    4bf4:	0440730e 	bge	zero,r17,4dc4 <___vfprintf_internal_r+0x1bb4>
    4bf8:	05800404 	movi	r22,16
    4bfc:	b440860e 	bge	r22,r17,4e18 <___vfprintf_internal_r+0x1c08>
    4c00:	01400074 	movhi	r5,1
    4c04:	29457084 	addi	r5,r5,5570
    4c08:	d9402b15 	stw	r5,172(sp)
    4c0c:	070001c4 	movi	fp,7
    4c10:	dcc02c17 	ldw	r19,176(sp)
    4c14:	00000306 	br	4c24 <___vfprintf_internal_r+0x1a14>
    4c18:	42000204 	addi	r8,r8,8
    4c1c:	8c7ffc04 	addi	r17,r17,-16
    4c20:	b440800e 	bge	r22,r17,4e24 <___vfprintf_internal_r+0x1c14>
    4c24:	18c00404 	addi	r3,r3,16
    4c28:	10800044 	addi	r2,r2,1
    4c2c:	45000015 	stw	r20,0(r8)
    4c30:	45800115 	stw	r22,4(r8)
    4c34:	d8c02015 	stw	r3,128(sp)
    4c38:	d8801f15 	stw	r2,124(sp)
    4c3c:	e0bff60e 	bge	fp,r2,4c18 <__alt_data_end+0xff004c18>
    4c40:	d9801e04 	addi	r6,sp,120
    4c44:	b80b883a 	mov	r5,r23
    4c48:	9809883a 	mov	r4,r19
    4c4c:	0009fac0 	call	9fac <__sprint_r>
    4c50:	103a711e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4c54:	d8c02017 	ldw	r3,128(sp)
    4c58:	d8801f17 	ldw	r2,124(sp)
    4c5c:	da000404 	addi	r8,sp,16
    4c60:	003fee06 	br	4c1c <__alt_data_end+0xff004c1c>
    4c64:	00bfffc4 	movi	r2,-1
    4c68:	003a6f06 	br	3628 <__alt_data_end+0xff003628>
    4c6c:	008011c4 	movi	r2,71
    4c70:	1440b816 	blt	r2,r17,4f54 <___vfprintf_internal_r+0x1d44>
    4c74:	04000074 	movhi	r16,1
    4c78:	84056204 	addi	r16,r16,5512
    4c7c:	00c000c4 	movi	r3,3
    4c80:	00bfdfc4 	movi	r2,-129
    4c84:	d8c02a15 	stw	r3,168(sp)
    4c88:	90a4703a 	and	r18,r18,r2
    4c8c:	df002783 	ldbu	fp,158(sp)
    4c90:	d8c02e15 	stw	r3,184(sp)
    4c94:	d8002915 	stw	zero,164(sp)
    4c98:	d8003215 	stw	zero,200(sp)
    4c9c:	003b2906 	br	3944 <__alt_data_end+0xff003944>
    4ca0:	d9002d17 	ldw	r4,180(sp)
    4ca4:	24c00017 	ldw	r19,0(r4)
    4ca8:	21000104 	addi	r4,r4,4
    4cac:	d9002d15 	stw	r4,180(sp)
    4cb0:	982dd7fa 	srai	r22,r19,31
    4cb4:	b005883a 	mov	r2,r22
    4cb8:	003a9f06 	br	3738 <__alt_data_end+0xff003738>
    4cbc:	d9402d17 	ldw	r5,180(sp)
    4cc0:	d8c02f17 	ldw	r3,188(sp)
    4cc4:	28800017 	ldw	r2,0(r5)
    4cc8:	29400104 	addi	r5,r5,4
    4ccc:	d9402d15 	stw	r5,180(sp)
    4cd0:	10c00015 	stw	r3,0(r2)
    4cd4:	00398606 	br	32f0 <__alt_data_end+0xff0032f0>
    4cd8:	d9402d17 	ldw	r5,180(sp)
    4cdc:	002d883a 	mov	r22,zero
    4ce0:	2cc00017 	ldw	r19,0(r5)
    4ce4:	29400104 	addi	r5,r5,4
    4ce8:	d9402d15 	stw	r5,180(sp)
    4cec:	003c2306 	br	3d7c <__alt_data_end+0xff003d7c>
    4cf0:	d8c02d17 	ldw	r3,180(sp)
    4cf4:	d9002917 	ldw	r4,164(sp)
    4cf8:	002d883a 	mov	r22,zero
    4cfc:	18800104 	addi	r2,r3,4
    4d00:	1cc0000b 	ldhu	r19,0(r3)
    4d04:	203dc10e 	bge	r4,zero,440c <__alt_data_end+0xff00440c>
    4d08:	003f7506 	br	4ae0 <__alt_data_end+0xff004ae0>
    4d0c:	04000074 	movhi	r16,1
    4d10:	84056004 	addi	r16,r16,5504
    4d14:	003acc06 	br	3848 <__alt_data_end+0xff003848>
    4d18:	d9002c17 	ldw	r4,176(sp)
    4d1c:	d9801e04 	addi	r6,sp,120
    4d20:	b80b883a 	mov	r5,r23
    4d24:	0009fac0 	call	9fac <__sprint_r>
    4d28:	103a3b1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4d2c:	dc402617 	ldw	r17,152(sp)
    4d30:	d8c02017 	ldw	r3,128(sp)
    4d34:	da000404 	addi	r8,sp,16
    4d38:	003f9c06 	br	4bac <__alt_data_end+0xff004bac>
    4d3c:	ac400043 	ldbu	r17,1(r21)
    4d40:	94800814 	ori	r18,r18,32
    4d44:	ad400044 	addi	r21,r21,1
    4d48:	8c403fcc 	andi	r17,r17,255
    4d4c:	8c40201c 	xori	r17,r17,128
    4d50:	8c7fe004 	addi	r17,r17,-128
    4d54:	00398f06 	br	3394 <__alt_data_end+0xff003394>
    4d58:	d8c02d15 	stw	r3,180(sp)
    4d5c:	0039883a 	mov	fp,zero
    4d60:	003e3506 	br	4638 <__alt_data_end+0xff004638>
    4d64:	d9002c17 	ldw	r4,176(sp)
    4d68:	d9801e04 	addi	r6,sp,120
    4d6c:	b80b883a 	mov	r5,r23
    4d70:	0009fac0 	call	9fac <__sprint_r>
    4d74:	103a281e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4d78:	d8c02017 	ldw	r3,128(sp)
    4d7c:	da000404 	addi	r8,sp,16
    4d80:	003cd006 	br	40c4 <__alt_data_end+0xff0040c4>
    4d84:	8009883a 	mov	r4,r16
    4d88:	da003d15 	stw	r8,244(sp)
    4d8c:	00031780 	call	3178 <strlen>
    4d90:	d8802e15 	stw	r2,184(sp)
    4d94:	da003d17 	ldw	r8,244(sp)
    4d98:	103c340e 	bge	r2,zero,3e6c <__alt_data_end+0xff003e6c>
    4d9c:	0005883a 	mov	r2,zero
    4da0:	003c3206 	br	3e6c <__alt_data_end+0xff003e6c>
    4da4:	d9002c17 	ldw	r4,176(sp)
    4da8:	d9801e04 	addi	r6,sp,120
    4dac:	b80b883a 	mov	r5,r23
    4db0:	0009fac0 	call	9fac <__sprint_r>
    4db4:	103a181e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4db8:	d8c02017 	ldw	r3,128(sp)
    4dbc:	d8801f17 	ldw	r2,124(sp)
    4dc0:	da000404 	addi	r8,sp,16
    4dc4:	d9403317 	ldw	r5,204(sp)
    4dc8:	10800044 	addi	r2,r2,1
    4dcc:	44000015 	stw	r16,0(r8)
    4dd0:	28c7883a 	add	r3,r5,r3
    4dd4:	003b7d06 	br	3bcc <__alt_data_end+0xff003bcc>
    4dd8:	01000074 	movhi	r4,1
    4ddc:	21057484 	addi	r4,r4,5586
    4de0:	d9003515 	stw	r4,212(sp)
    4de4:	003b1406 	br	3a38 <__alt_data_end+0xff003a38>
    4de8:	013fffc4 	movi	r4,-1
    4dec:	003a3506 	br	36c4 <__alt_data_end+0xff0036c4>
    4df0:	0023883a 	mov	r17,zero
    4df4:	003d9d06 	br	446c <__alt_data_end+0xff00446c>
    4df8:	d9002c17 	ldw	r4,176(sp)
    4dfc:	d9801e04 	addi	r6,sp,120
    4e00:	b80b883a 	mov	r5,r23
    4e04:	0009fac0 	call	9fac <__sprint_r>
    4e08:	103a031e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4e0c:	d8c02017 	ldw	r3,128(sp)
    4e10:	da000404 	addi	r8,sp,16
    4e14:	003d9406 	br	4468 <__alt_data_end+0xff004468>
    4e18:	01000074 	movhi	r4,1
    4e1c:	21057084 	addi	r4,r4,5570
    4e20:	d9002b15 	stw	r4,172(sp)
    4e24:	d9002b17 	ldw	r4,172(sp)
    4e28:	1c47883a 	add	r3,r3,r17
    4e2c:	10800044 	addi	r2,r2,1
    4e30:	41000015 	stw	r4,0(r8)
    4e34:	44400115 	stw	r17,4(r8)
    4e38:	d8c02015 	stw	r3,128(sp)
    4e3c:	d8801f15 	stw	r2,124(sp)
    4e40:	010001c4 	movi	r4,7
    4e44:	20bfd716 	blt	r4,r2,4da4 <__alt_data_end+0xff004da4>
    4e48:	42000204 	addi	r8,r8,8
    4e4c:	003fdd06 	br	4dc4 <__alt_data_end+0xff004dc4>
    4e50:	d9002c17 	ldw	r4,176(sp)
    4e54:	d9801e04 	addi	r6,sp,120
    4e58:	b80b883a 	mov	r5,r23
    4e5c:	0009fac0 	call	9fac <__sprint_r>
    4e60:	1039ed1e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4e64:	d8802617 	ldw	r2,152(sp)
    4e68:	d8c02017 	ldw	r3,128(sp)
    4e6c:	da000404 	addi	r8,sp,16
    4e70:	003e1006 	br	46b4 <__alt_data_end+0xff0046b4>
    4e74:	00800044 	movi	r2,1
    4e78:	10803fcc 	andi	r2,r2,255
    4e7c:	00c00044 	movi	r3,1
    4e80:	10fa3526 	beq	r2,r3,3758 <__alt_data_end+0xff003758>
    4e84:	00c00084 	movi	r3,2
    4e88:	10fbcb26 	beq	r2,r3,3db8 <__alt_data_end+0xff003db8>
    4e8c:	003a8f06 	br	38cc <__alt_data_end+0xff0038cc>
    4e90:	01000074 	movhi	r4,1
    4e94:	21057484 	addi	r4,r4,5586
    4e98:	d9003515 	stw	r4,212(sp)
    4e9c:	003b7606 	br	3c78 <__alt_data_end+0xff003c78>
    4ea0:	d8802917 	ldw	r2,164(sp)
    4ea4:	00c00184 	movi	r3,6
    4ea8:	1880012e 	bgeu	r3,r2,4eb0 <___vfprintf_internal_r+0x1ca0>
    4eac:	1805883a 	mov	r2,r3
    4eb0:	d8802e15 	stw	r2,184(sp)
    4eb4:	1000ef16 	blt	r2,zero,5274 <___vfprintf_internal_r+0x2064>
    4eb8:	04000074 	movhi	r16,1
    4ebc:	d8802a15 	stw	r2,168(sp)
    4ec0:	dcc02d15 	stw	r19,180(sp)
    4ec4:	d8002915 	stw	zero,164(sp)
    4ec8:	d8003215 	stw	zero,200(sp)
    4ecc:	84056e04 	addi	r16,r16,5560
    4ed0:	0039883a 	mov	fp,zero
    4ed4:	003aa206 	br	3960 <__alt_data_end+0xff003960>
    4ed8:	0021883a 	mov	r16,zero
    4edc:	003e0706 	br	46fc <__alt_data_end+0xff0046fc>
    4ee0:	d9002c17 	ldw	r4,176(sp)
    4ee4:	d9801e04 	addi	r6,sp,120
    4ee8:	b80b883a 	mov	r5,r23
    4eec:	0009fac0 	call	9fac <__sprint_r>
    4ef0:	1039c91e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    4ef4:	d8802617 	ldw	r2,152(sp)
    4ef8:	d9403317 	ldw	r5,204(sp)
    4efc:	d8c02017 	ldw	r3,128(sp)
    4f00:	da000404 	addi	r8,sp,16
    4f04:	2885c83a 	sub	r2,r5,r2
    4f08:	003dfb06 	br	46f8 <__alt_data_end+0xff0046f8>
    4f0c:	9080004c 	andi	r2,r18,1
    4f10:	103e8f1e 	bne	r2,zero,4950 <__alt_data_end+0xff004950>
    4f14:	d8802117 	ldw	r2,132(sp)
    4f18:	003e9e06 	br	4994 <__alt_data_end+0xff004994>
    4f1c:	1025883a 	mov	r18,r2
    4f20:	0039883a 	mov	fp,zero
    4f24:	00800084 	movi	r2,2
    4f28:	003fd306 	br	4e78 <__alt_data_end+0xff004e78>
    4f2c:	07000b44 	movi	fp,45
    4f30:	df002785 	stb	fp,158(sp)
    4f34:	003a4006 	br	3838 <__alt_data_end+0xff003838>
    4f38:	00c00b44 	movi	r3,45
    4f3c:	d8c02785 	stb	r3,158(sp)
    4f40:	d8802a15 	stw	r2,168(sp)
    4f44:	dc802b17 	ldw	r18,172(sp)
    4f48:	d8002915 	stw	zero,164(sp)
    4f4c:	07000b44 	movi	fp,45
    4f50:	003a8006 	br	3954 <__alt_data_end+0xff003954>
    4f54:	04000074 	movhi	r16,1
    4f58:	84056304 	addi	r16,r16,5516
    4f5c:	003f4706 	br	4c7c <__alt_data_end+0xff004c7c>
    4f60:	d8c02d17 	ldw	r3,180(sp)
    4f64:	d9002f17 	ldw	r4,188(sp)
    4f68:	18800017 	ldw	r2,0(r3)
    4f6c:	18c00104 	addi	r3,r3,4
    4f70:	d8c02d15 	stw	r3,180(sp)
    4f74:	11000015 	stw	r4,0(r2)
    4f78:	0038dd06 	br	32f0 <__alt_data_end+0xff0032f0>
    4f7c:	dd802617 	ldw	r22,152(sp)
    4f80:	00bfff44 	movi	r2,-3
    4f84:	b0801c16 	blt	r22,r2,4ff8 <___vfprintf_internal_r+0x1de8>
    4f88:	d9402917 	ldw	r5,164(sp)
    4f8c:	2d801a16 	blt	r5,r22,4ff8 <___vfprintf_internal_r+0x1de8>
    4f90:	dd803215 	stw	r22,200(sp)
    4f94:	003e8906 	br	49bc <__alt_data_end+0xff0049bc>
    4f98:	01000074 	movhi	r4,1
    4f9c:	21057084 	addi	r4,r4,5570
    4fa0:	d9002b15 	stw	r4,172(sp)
    4fa4:	003c9106 	br	41ec <__alt_data_end+0xff0041ec>
    4fa8:	e005883a 	mov	r2,fp
    4fac:	003e7906 	br	4994 <__alt_data_end+0xff004994>
    4fb0:	d9402917 	ldw	r5,164(sp)
    4fb4:	df002783 	ldbu	fp,158(sp)
    4fb8:	dcc02d15 	stw	r19,180(sp)
    4fbc:	d9402a15 	stw	r5,168(sp)
    4fc0:	d9402e15 	stw	r5,184(sp)
    4fc4:	d8002915 	stw	zero,164(sp)
    4fc8:	d8003215 	stw	zero,200(sp)
    4fcc:	003a5d06 	br	3944 <__alt_data_end+0xff003944>
    4fd0:	9080004c 	andi	r2,r18,1
    4fd4:	0039883a 	mov	fp,zero
    4fd8:	10000426 	beq	r2,zero,4fec <___vfprintf_internal_r+0x1ddc>
    4fdc:	00800c04 	movi	r2,48
    4fe0:	dc001dc4 	addi	r16,sp,119
    4fe4:	d8801dc5 	stb	r2,119(sp)
    4fe8:	003b8006 	br	3dec <__alt_data_end+0xff003dec>
    4fec:	d8002e15 	stw	zero,184(sp)
    4ff0:	dc001e04 	addi	r16,sp,120
    4ff4:	003a4d06 	br	392c <__alt_data_end+0xff00392c>
    4ff8:	8c7fff84 	addi	r17,r17,-2
    4ffc:	b5bfffc4 	addi	r22,r22,-1
    5000:	dd802615 	stw	r22,152(sp)
    5004:	dc4022c5 	stb	r17,139(sp)
    5008:	b000bf16 	blt	r22,zero,5308 <___vfprintf_internal_r+0x20f8>
    500c:	00800ac4 	movi	r2,43
    5010:	d8802305 	stb	r2,140(sp)
    5014:	00800244 	movi	r2,9
    5018:	15807016 	blt	r2,r22,51dc <___vfprintf_internal_r+0x1fcc>
    501c:	00800c04 	movi	r2,48
    5020:	b5800c04 	addi	r22,r22,48
    5024:	d8802345 	stb	r2,141(sp)
    5028:	dd802385 	stb	r22,142(sp)
    502c:	d88023c4 	addi	r2,sp,143
    5030:	df0022c4 	addi	fp,sp,139
    5034:	d8c03317 	ldw	r3,204(sp)
    5038:	1739c83a 	sub	fp,r2,fp
    503c:	d9003317 	ldw	r4,204(sp)
    5040:	e0c7883a 	add	r3,fp,r3
    5044:	df003a15 	stw	fp,232(sp)
    5048:	d8c02e15 	stw	r3,184(sp)
    504c:	00800044 	movi	r2,1
    5050:	1100b30e 	bge	r2,r4,5320 <___vfprintf_internal_r+0x2110>
    5054:	d8c02e17 	ldw	r3,184(sp)
    5058:	18c00044 	addi	r3,r3,1
    505c:	d8c02e15 	stw	r3,184(sp)
    5060:	1805883a 	mov	r2,r3
    5064:	1800ac16 	blt	r3,zero,5318 <___vfprintf_internal_r+0x2108>
    5068:	d8003215 	stw	zero,200(sp)
    506c:	003e5d06 	br	49e4 <__alt_data_end+0xff0049e4>
    5070:	d9002c17 	ldw	r4,176(sp)
    5074:	d9801e04 	addi	r6,sp,120
    5078:	b80b883a 	mov	r5,r23
    507c:	0009fac0 	call	9fac <__sprint_r>
    5080:	1039651e 	bne	r2,zero,3618 <__alt_data_end+0xff003618>
    5084:	dc402617 	ldw	r17,152(sp)
    5088:	d8c02017 	ldw	r3,128(sp)
    508c:	d8801f17 	ldw	r2,124(sp)
    5090:	da000404 	addi	r8,sp,16
    5094:	003ed606 	br	4bf0 <__alt_data_end+0xff004bf0>
    5098:	582b883a 	mov	r21,r11
    509c:	d8002915 	stw	zero,164(sp)
    50a0:	0038bd06 	br	3398 <__alt_data_end+0xff003398>
    50a4:	d8802917 	ldw	r2,164(sp)
    50a8:	103e071e 	bne	r2,zero,48c8 <__alt_data_end+0xff0048c8>
    50ac:	dc002915 	stw	r16,164(sp)
    50b0:	003e0506 	br	48c8 <__alt_data_end+0xff0048c8>
    50b4:	d9002917 	ldw	r4,164(sp)
    50b8:	20c00044 	addi	r3,r4,1
    50bc:	003e0f06 	br	48fc <__alt_data_end+0xff0048fc>
    50c0:	01400184 	movi	r5,6
    50c4:	d9402915 	stw	r5,164(sp)
    50c8:	003dff06 	br	48c8 <__alt_data_end+0xff0048c8>
    50cc:	d8802104 	addi	r2,sp,132
    50d0:	d8800315 	stw	r2,12(sp)
    50d4:	d8802504 	addi	r2,sp,148
    50d8:	d8800215 	stw	r2,8(sp)
    50dc:	d8802604 	addi	r2,sp,152
    50e0:	d8800115 	stw	r2,4(sp)
    50e4:	d8802917 	ldw	r2,164(sp)
    50e8:	d9403617 	ldw	r5,216(sp)
    50ec:	d9002c17 	ldw	r4,176(sp)
    50f0:	d8800015 	stw	r2,0(sp)
    50f4:	01c000c4 	movi	r7,3
    50f8:	980d883a 	mov	r6,r19
    50fc:	da003d15 	stw	r8,244(sp)
    5100:	00058340 	call	5834 <_dtoa_r>
    5104:	d8c02917 	ldw	r3,164(sp)
    5108:	da003d17 	ldw	r8,244(sp)
    510c:	1021883a 	mov	r16,r2
    5110:	10f9883a 	add	fp,r2,r3
    5114:	81000007 	ldb	r4,0(r16)
    5118:	00800c04 	movi	r2,48
    511c:	20805e26 	beq	r4,r2,5298 <___vfprintf_internal_r+0x2088>
    5120:	d8c02617 	ldw	r3,152(sp)
    5124:	e0f9883a 	add	fp,fp,r3
    5128:	003e0a06 	br	4954 <__alt_data_end+0xff004954>
    512c:	00c00b44 	movi	r3,45
    5130:	24e0003c 	xorhi	r19,r4,32768
    5134:	d8c02a05 	stb	r3,168(sp)
    5138:	003de906 	br	48e0 <__alt_data_end+0xff0048e0>
    513c:	d8c03217 	ldw	r3,200(sp)
    5140:	00c07a0e 	bge	zero,r3,532c <___vfprintf_internal_r+0x211c>
    5144:	00800044 	movi	r2,1
    5148:	d9003317 	ldw	r4,204(sp)
    514c:	1105883a 	add	r2,r2,r4
    5150:	d8802e15 	stw	r2,184(sp)
    5154:	10004e16 	blt	r2,zero,5290 <___vfprintf_internal_r+0x2080>
    5158:	044019c4 	movi	r17,103
    515c:	003e2106 	br	49e4 <__alt_data_end+0xff0049e4>
    5160:	d9002917 	ldw	r4,164(sp)
    5164:	d8802104 	addi	r2,sp,132
    5168:	d8800315 	stw	r2,12(sp)
    516c:	d9000015 	stw	r4,0(sp)
    5170:	d8802504 	addi	r2,sp,148
    5174:	d9403617 	ldw	r5,216(sp)
    5178:	d9002c17 	ldw	r4,176(sp)
    517c:	d8800215 	stw	r2,8(sp)
    5180:	d8802604 	addi	r2,sp,152
    5184:	d8800115 	stw	r2,4(sp)
    5188:	01c000c4 	movi	r7,3
    518c:	980d883a 	mov	r6,r19
    5190:	da003d15 	stw	r8,244(sp)
    5194:	00058340 	call	5834 <_dtoa_r>
    5198:	d8c02917 	ldw	r3,164(sp)
    519c:	da003d17 	ldw	r8,244(sp)
    51a0:	1021883a 	mov	r16,r2
    51a4:	00801184 	movi	r2,70
    51a8:	80f9883a 	add	fp,r16,r3
    51ac:	88bfd926 	beq	r17,r2,5114 <__alt_data_end+0xff005114>
    51b0:	003de806 	br	4954 <__alt_data_end+0xff004954>
    51b4:	d9002917 	ldw	r4,164(sp)
    51b8:	00c04d0e 	bge	zero,r3,52f0 <___vfprintf_internal_r+0x20e0>
    51bc:	2000441e 	bne	r4,zero,52d0 <___vfprintf_internal_r+0x20c0>
    51c0:	9480004c 	andi	r18,r18,1
    51c4:	9000421e 	bne	r18,zero,52d0 <___vfprintf_internal_r+0x20c0>
    51c8:	1805883a 	mov	r2,r3
    51cc:	18007016 	blt	r3,zero,5390 <___vfprintf_internal_r+0x2180>
    51d0:	d8c03217 	ldw	r3,200(sp)
    51d4:	d8c02e15 	stw	r3,184(sp)
    51d8:	003e0206 	br	49e4 <__alt_data_end+0xff0049e4>
    51dc:	df0022c4 	addi	fp,sp,139
    51e0:	dc002915 	stw	r16,164(sp)
    51e4:	4027883a 	mov	r19,r8
    51e8:	e021883a 	mov	r16,fp
    51ec:	b009883a 	mov	r4,r22
    51f0:	01400284 	movi	r5,10
    51f4:	0001c8c0 	call	1c8c <__modsi3>
    51f8:	10800c04 	addi	r2,r2,48
    51fc:	843fffc4 	addi	r16,r16,-1
    5200:	b009883a 	mov	r4,r22
    5204:	01400284 	movi	r5,10
    5208:	80800005 	stb	r2,0(r16)
    520c:	0001c080 	call	1c08 <__divsi3>
    5210:	102d883a 	mov	r22,r2
    5214:	00800244 	movi	r2,9
    5218:	15bff416 	blt	r2,r22,51ec <__alt_data_end+0xff0051ec>
    521c:	9811883a 	mov	r8,r19
    5220:	b0800c04 	addi	r2,r22,48
    5224:	8027883a 	mov	r19,r16
    5228:	997fffc4 	addi	r5,r19,-1
    522c:	98bfffc5 	stb	r2,-1(r19)
    5230:	dc002917 	ldw	r16,164(sp)
    5234:	2f006a2e 	bgeu	r5,fp,53e0 <___vfprintf_internal_r+0x21d0>
    5238:	d9c02384 	addi	r7,sp,142
    523c:	3ccfc83a 	sub	r7,r7,r19
    5240:	d9002344 	addi	r4,sp,141
    5244:	e1cf883a 	add	r7,fp,r7
    5248:	00000106 	br	5250 <___vfprintf_internal_r+0x2040>
    524c:	28800003 	ldbu	r2,0(r5)
    5250:	20800005 	stb	r2,0(r4)
    5254:	21000044 	addi	r4,r4,1
    5258:	29400044 	addi	r5,r5,1
    525c:	393ffb1e 	bne	r7,r4,524c <__alt_data_end+0xff00524c>
    5260:	d8802304 	addi	r2,sp,140
    5264:	14c5c83a 	sub	r2,r2,r19
    5268:	d8c02344 	addi	r3,sp,141
    526c:	1885883a 	add	r2,r3,r2
    5270:	003f7006 	br	5034 <__alt_data_end+0xff005034>
    5274:	0005883a 	mov	r2,zero
    5278:	003f0f06 	br	4eb8 <__alt_data_end+0xff004eb8>
    527c:	d8c03217 	ldw	r3,200(sp)
    5280:	18c00044 	addi	r3,r3,1
    5284:	d8c02e15 	stw	r3,184(sp)
    5288:	1805883a 	mov	r2,r3
    528c:	183fb20e 	bge	r3,zero,5158 <__alt_data_end+0xff005158>
    5290:	0005883a 	mov	r2,zero
    5294:	003fb006 	br	5158 <__alt_data_end+0xff005158>
    5298:	d9003617 	ldw	r4,216(sp)
    529c:	000d883a 	mov	r6,zero
    52a0:	000f883a 	mov	r7,zero
    52a4:	980b883a 	mov	r5,r19
    52a8:	d8c03c15 	stw	r3,240(sp)
    52ac:	da003d15 	stw	r8,244(sp)
    52b0:	000d1880 	call	d188 <__eqdf2>
    52b4:	d8c03c17 	ldw	r3,240(sp)
    52b8:	da003d17 	ldw	r8,244(sp)
    52bc:	103f9826 	beq	r2,zero,5120 <__alt_data_end+0xff005120>
    52c0:	00800044 	movi	r2,1
    52c4:	10c7c83a 	sub	r3,r2,r3
    52c8:	d8c02615 	stw	r3,152(sp)
    52cc:	003f9506 	br	5124 <__alt_data_end+0xff005124>
    52d0:	d9002917 	ldw	r4,164(sp)
    52d4:	d8c03217 	ldw	r3,200(sp)
    52d8:	20800044 	addi	r2,r4,1
    52dc:	1885883a 	add	r2,r3,r2
    52e0:	d8802e15 	stw	r2,184(sp)
    52e4:	103dbf0e 	bge	r2,zero,49e4 <__alt_data_end+0xff0049e4>
    52e8:	0005883a 	mov	r2,zero
    52ec:	003dbd06 	br	49e4 <__alt_data_end+0xff0049e4>
    52f0:	2000211e 	bne	r4,zero,5378 <___vfprintf_internal_r+0x2168>
    52f4:	9480004c 	andi	r18,r18,1
    52f8:	90001f1e 	bne	r18,zero,5378 <___vfprintf_internal_r+0x2168>
    52fc:	00800044 	movi	r2,1
    5300:	d8802e15 	stw	r2,184(sp)
    5304:	003db706 	br	49e4 <__alt_data_end+0xff0049e4>
    5308:	00800b44 	movi	r2,45
    530c:	05adc83a 	sub	r22,zero,r22
    5310:	d8802305 	stb	r2,140(sp)
    5314:	003f3f06 	br	5014 <__alt_data_end+0xff005014>
    5318:	0005883a 	mov	r2,zero
    531c:	003f5206 	br	5068 <__alt_data_end+0xff005068>
    5320:	90a4703a 	and	r18,r18,r2
    5324:	903f4e26 	beq	r18,zero,5060 <__alt_data_end+0xff005060>
    5328:	003f4a06 	br	5054 <__alt_data_end+0xff005054>
    532c:	00800084 	movi	r2,2
    5330:	10c5c83a 	sub	r2,r2,r3
    5334:	003f8406 	br	5148 <__alt_data_end+0xff005148>
    5338:	d8802d17 	ldw	r2,180(sp)
    533c:	d9002d17 	ldw	r4,180(sp)
    5340:	ac400043 	ldbu	r17,1(r21)
    5344:	10800017 	ldw	r2,0(r2)
    5348:	582b883a 	mov	r21,r11
    534c:	d8802915 	stw	r2,164(sp)
    5350:	20800104 	addi	r2,r4,4
    5354:	d9002917 	ldw	r4,164(sp)
    5358:	d8802d15 	stw	r2,180(sp)
    535c:	203e7a0e 	bge	r4,zero,4d48 <__alt_data_end+0xff004d48>
    5360:	8c403fcc 	andi	r17,r17,255
    5364:	00bfffc4 	movi	r2,-1
    5368:	8c40201c 	xori	r17,r17,128
    536c:	d8802915 	stw	r2,164(sp)
    5370:	8c7fe004 	addi	r17,r17,-128
    5374:	00380706 	br	3394 <__alt_data_end+0xff003394>
    5378:	d8c02917 	ldw	r3,164(sp)
    537c:	18c00084 	addi	r3,r3,2
    5380:	d8c02e15 	stw	r3,184(sp)
    5384:	1805883a 	mov	r2,r3
    5388:	183d960e 	bge	r3,zero,49e4 <__alt_data_end+0xff0049e4>
    538c:	003fd606 	br	52e8 <__alt_data_end+0xff0052e8>
    5390:	0005883a 	mov	r2,zero
    5394:	003f8e06 	br	51d0 <__alt_data_end+0xff0051d0>
    5398:	9080004c 	andi	r2,r18,1
    539c:	103f811e 	bne	r2,zero,51a4 <__alt_data_end+0xff0051a4>
    53a0:	d8802117 	ldw	r2,132(sp)
    53a4:	1405c83a 	sub	r2,r2,r16
    53a8:	d8803315 	stw	r2,204(sp)
    53ac:	b47ef326 	beq	r22,r17,4f7c <__alt_data_end+0xff004f7c>
    53b0:	dd802617 	ldw	r22,152(sp)
    53b4:	003f1106 	br	4ffc <__alt_data_end+0xff004ffc>
    53b8:	d9c02785 	stb	r7,158(sp)
    53bc:	00390406 	br	37d0 <__alt_data_end+0xff0037d0>
    53c0:	d9c02785 	stb	r7,158(sp)
    53c4:	0038d306 	br	3714 <__alt_data_end+0xff003714>
    53c8:	d9c02785 	stb	r7,158(sp)
    53cc:	003a6106 	br	3d54 <__alt_data_end+0xff003d54>
    53d0:	d9c02785 	stb	r7,158(sp)
    53d4:	003af806 	br	3fb8 <__alt_data_end+0xff003fb8>
    53d8:	0005883a 	mov	r2,zero
    53dc:	003d7e06 	br	49d8 <__alt_data_end+0xff0049d8>
    53e0:	d8802344 	addi	r2,sp,141
    53e4:	003f1306 	br	5034 <__alt_data_end+0xff005034>
    53e8:	d9c02785 	stb	r7,158(sp)
    53ec:	00392306 	br	387c <__alt_data_end+0xff00387c>
    53f0:	d9c02785 	stb	r7,158(sp)
    53f4:	003aa906 	br	3e9c <__alt_data_end+0xff003e9c>
    53f8:	d9c02785 	stb	r7,158(sp)
    53fc:	003a3d06 	br	3cf4 <__alt_data_end+0xff003cf4>
    5400:	d9c02785 	stb	r7,158(sp)
    5404:	003aca06 	br	3f30 <__alt_data_end+0xff003f30>

00005408 <__vfprintf_internal>:
    5408:	00800074 	movhi	r2,1
    540c:	108ccb04 	addi	r2,r2,13100
    5410:	300f883a 	mov	r7,r6
    5414:	280d883a 	mov	r6,r5
    5418:	200b883a 	mov	r5,r4
    541c:	11000017 	ldw	r4,0(r2)
    5420:	00032101 	jmpi	3210 <___vfprintf_internal_r>

00005424 <__sbprintf>:
    5424:	2880030b 	ldhu	r2,12(r5)
    5428:	2ac01917 	ldw	r11,100(r5)
    542c:	2a80038b 	ldhu	r10,14(r5)
    5430:	2a400717 	ldw	r9,28(r5)
    5434:	2a000917 	ldw	r8,36(r5)
    5438:	defee204 	addi	sp,sp,-1144
    543c:	00c10004 	movi	r3,1024
    5440:	dc011a15 	stw	r16,1128(sp)
    5444:	10bfff4c 	andi	r2,r2,65533
    5448:	2821883a 	mov	r16,r5
    544c:	d8cb883a 	add	r5,sp,r3
    5450:	dc811c15 	stw	r18,1136(sp)
    5454:	dc411b15 	stw	r17,1132(sp)
    5458:	dfc11d15 	stw	ra,1140(sp)
    545c:	2025883a 	mov	r18,r4
    5460:	d881030d 	sth	r2,1036(sp)
    5464:	dac11915 	stw	r11,1124(sp)
    5468:	da81038d 	sth	r10,1038(sp)
    546c:	da410715 	stw	r9,1052(sp)
    5470:	da010915 	stw	r8,1060(sp)
    5474:	dec10015 	stw	sp,1024(sp)
    5478:	dec10415 	stw	sp,1040(sp)
    547c:	d8c10215 	stw	r3,1032(sp)
    5480:	d8c10515 	stw	r3,1044(sp)
    5484:	d8010615 	stw	zero,1048(sp)
    5488:	00032100 	call	3210 <___vfprintf_internal_r>
    548c:	1023883a 	mov	r17,r2
    5490:	10000416 	blt	r2,zero,54a4 <__sbprintf+0x80>
    5494:	d9410004 	addi	r5,sp,1024
    5498:	9009883a 	mov	r4,r18
    549c:	00070d80 	call	70d8 <_fflush_r>
    54a0:	10000d1e 	bne	r2,zero,54d8 <__sbprintf+0xb4>
    54a4:	d881030b 	ldhu	r2,1036(sp)
    54a8:	1080100c 	andi	r2,r2,64
    54ac:	10000326 	beq	r2,zero,54bc <__sbprintf+0x98>
    54b0:	8080030b 	ldhu	r2,12(r16)
    54b4:	10801014 	ori	r2,r2,64
    54b8:	8080030d 	sth	r2,12(r16)
    54bc:	8805883a 	mov	r2,r17
    54c0:	dfc11d17 	ldw	ra,1140(sp)
    54c4:	dc811c17 	ldw	r18,1136(sp)
    54c8:	dc411b17 	ldw	r17,1132(sp)
    54cc:	dc011a17 	ldw	r16,1128(sp)
    54d0:	dec11e04 	addi	sp,sp,1144
    54d4:	f800283a 	ret
    54d8:	047fffc4 	movi	r17,-1
    54dc:	003ff106 	br	54a4 <__alt_data_end+0xff0054a4>

000054e0 <__swsetup_r>:
    54e0:	00800074 	movhi	r2,1
    54e4:	defffd04 	addi	sp,sp,-12
    54e8:	108ccb04 	addi	r2,r2,13100
    54ec:	dc400115 	stw	r17,4(sp)
    54f0:	2023883a 	mov	r17,r4
    54f4:	11000017 	ldw	r4,0(r2)
    54f8:	dc000015 	stw	r16,0(sp)
    54fc:	dfc00215 	stw	ra,8(sp)
    5500:	2821883a 	mov	r16,r5
    5504:	20000226 	beq	r4,zero,5510 <__swsetup_r+0x30>
    5508:	20800e17 	ldw	r2,56(r4)
    550c:	10003126 	beq	r2,zero,55d4 <__swsetup_r+0xf4>
    5510:	8080030b 	ldhu	r2,12(r16)
    5514:	10c0020c 	andi	r3,r2,8
    5518:	1009883a 	mov	r4,r2
    551c:	18000f26 	beq	r3,zero,555c <__swsetup_r+0x7c>
    5520:	80c00417 	ldw	r3,16(r16)
    5524:	18001526 	beq	r3,zero,557c <__swsetup_r+0x9c>
    5528:	1100004c 	andi	r4,r2,1
    552c:	20001c1e 	bne	r4,zero,55a0 <__swsetup_r+0xc0>
    5530:	1080008c 	andi	r2,r2,2
    5534:	1000291e 	bne	r2,zero,55dc <__swsetup_r+0xfc>
    5538:	80800517 	ldw	r2,20(r16)
    553c:	80800215 	stw	r2,8(r16)
    5540:	18001c26 	beq	r3,zero,55b4 <__swsetup_r+0xd4>
    5544:	0005883a 	mov	r2,zero
    5548:	dfc00217 	ldw	ra,8(sp)
    554c:	dc400117 	ldw	r17,4(sp)
    5550:	dc000017 	ldw	r16,0(sp)
    5554:	dec00304 	addi	sp,sp,12
    5558:	f800283a 	ret
    555c:	2080040c 	andi	r2,r4,16
    5560:	10002e26 	beq	r2,zero,561c <__swsetup_r+0x13c>
    5564:	2080010c 	andi	r2,r4,4
    5568:	10001e1e 	bne	r2,zero,55e4 <__swsetup_r+0x104>
    556c:	80c00417 	ldw	r3,16(r16)
    5570:	20800214 	ori	r2,r4,8
    5574:	8080030d 	sth	r2,12(r16)
    5578:	183feb1e 	bne	r3,zero,5528 <__alt_data_end+0xff005528>
    557c:	1100a00c 	andi	r4,r2,640
    5580:	01408004 	movi	r5,512
    5584:	217fe826 	beq	r4,r5,5528 <__alt_data_end+0xff005528>
    5588:	800b883a 	mov	r5,r16
    558c:	8809883a 	mov	r4,r17
    5590:	00080580 	call	8058 <__smakebuf_r>
    5594:	8080030b 	ldhu	r2,12(r16)
    5598:	80c00417 	ldw	r3,16(r16)
    559c:	003fe206 	br	5528 <__alt_data_end+0xff005528>
    55a0:	80800517 	ldw	r2,20(r16)
    55a4:	80000215 	stw	zero,8(r16)
    55a8:	0085c83a 	sub	r2,zero,r2
    55ac:	80800615 	stw	r2,24(r16)
    55b0:	183fe41e 	bne	r3,zero,5544 <__alt_data_end+0xff005544>
    55b4:	80c0030b 	ldhu	r3,12(r16)
    55b8:	0005883a 	mov	r2,zero
    55bc:	1900200c 	andi	r4,r3,128
    55c0:	203fe126 	beq	r4,zero,5548 <__alt_data_end+0xff005548>
    55c4:	18c01014 	ori	r3,r3,64
    55c8:	80c0030d 	sth	r3,12(r16)
    55cc:	00bfffc4 	movi	r2,-1
    55d0:	003fdd06 	br	5548 <__alt_data_end+0xff005548>
    55d4:	00074b40 	call	74b4 <__sinit>
    55d8:	003fcd06 	br	5510 <__alt_data_end+0xff005510>
    55dc:	0005883a 	mov	r2,zero
    55e0:	003fd606 	br	553c <__alt_data_end+0xff00553c>
    55e4:	81400c17 	ldw	r5,48(r16)
    55e8:	28000626 	beq	r5,zero,5604 <__swsetup_r+0x124>
    55ec:	80801004 	addi	r2,r16,64
    55f0:	28800326 	beq	r5,r2,5600 <__swsetup_r+0x120>
    55f4:	8809883a 	mov	r4,r17
    55f8:	00076280 	call	7628 <_free_r>
    55fc:	8100030b 	ldhu	r4,12(r16)
    5600:	80000c15 	stw	zero,48(r16)
    5604:	80c00417 	ldw	r3,16(r16)
    5608:	00bff6c4 	movi	r2,-37
    560c:	1108703a 	and	r4,r2,r4
    5610:	80000115 	stw	zero,4(r16)
    5614:	80c00015 	stw	r3,0(r16)
    5618:	003fd506 	br	5570 <__alt_data_end+0xff005570>
    561c:	00800244 	movi	r2,9
    5620:	88800015 	stw	r2,0(r17)
    5624:	20801014 	ori	r2,r4,64
    5628:	8080030d 	sth	r2,12(r16)
    562c:	00bfffc4 	movi	r2,-1
    5630:	003fc506 	br	5548 <__alt_data_end+0xff005548>

00005634 <quorem>:
    5634:	defff704 	addi	sp,sp,-36
    5638:	dc800215 	stw	r18,8(sp)
    563c:	20800417 	ldw	r2,16(r4)
    5640:	2c800417 	ldw	r18,16(r5)
    5644:	dfc00815 	stw	ra,32(sp)
    5648:	ddc00715 	stw	r23,28(sp)
    564c:	dd800615 	stw	r22,24(sp)
    5650:	dd400515 	stw	r21,20(sp)
    5654:	dd000415 	stw	r20,16(sp)
    5658:	dcc00315 	stw	r19,12(sp)
    565c:	dc400115 	stw	r17,4(sp)
    5660:	dc000015 	stw	r16,0(sp)
    5664:	14807116 	blt	r2,r18,582c <quorem+0x1f8>
    5668:	94bfffc4 	addi	r18,r18,-1
    566c:	94ad883a 	add	r22,r18,r18
    5670:	b5ad883a 	add	r22,r22,r22
    5674:	2c400504 	addi	r17,r5,20
    5678:	8da9883a 	add	r20,r17,r22
    567c:	25400504 	addi	r21,r4,20
    5680:	282f883a 	mov	r23,r5
    5684:	adad883a 	add	r22,r21,r22
    5688:	a1400017 	ldw	r5,0(r20)
    568c:	2021883a 	mov	r16,r4
    5690:	b1000017 	ldw	r4,0(r22)
    5694:	29400044 	addi	r5,r5,1
    5698:	0001d000 	call	1d00 <__udivsi3>
    569c:	1027883a 	mov	r19,r2
    56a0:	10002c26 	beq	r2,zero,5754 <quorem+0x120>
    56a4:	a813883a 	mov	r9,r21
    56a8:	880b883a 	mov	r5,r17
    56ac:	0009883a 	mov	r4,zero
    56b0:	000d883a 	mov	r6,zero
    56b4:	2a000017 	ldw	r8,0(r5)
    56b8:	49c00017 	ldw	r7,0(r9)
    56bc:	29400104 	addi	r5,r5,4
    56c0:	40bfffcc 	andi	r2,r8,65535
    56c4:	14c5383a 	mul	r2,r2,r19
    56c8:	4010d43a 	srli	r8,r8,16
    56cc:	38ffffcc 	andi	r3,r7,65535
    56d0:	1105883a 	add	r2,r2,r4
    56d4:	1008d43a 	srli	r4,r2,16
    56d8:	44d1383a 	mul	r8,r8,r19
    56dc:	198d883a 	add	r6,r3,r6
    56e0:	10ffffcc 	andi	r3,r2,65535
    56e4:	30c7c83a 	sub	r3,r6,r3
    56e8:	380ed43a 	srli	r7,r7,16
    56ec:	4105883a 	add	r2,r8,r4
    56f0:	180dd43a 	srai	r6,r3,16
    56f4:	113fffcc 	andi	r4,r2,65535
    56f8:	390fc83a 	sub	r7,r7,r4
    56fc:	398d883a 	add	r6,r7,r6
    5700:	300e943a 	slli	r7,r6,16
    5704:	18ffffcc 	andi	r3,r3,65535
    5708:	1008d43a 	srli	r4,r2,16
    570c:	38ceb03a 	or	r7,r7,r3
    5710:	49c00015 	stw	r7,0(r9)
    5714:	300dd43a 	srai	r6,r6,16
    5718:	4a400104 	addi	r9,r9,4
    571c:	a17fe52e 	bgeu	r20,r5,56b4 <__alt_data_end+0xff0056b4>
    5720:	b0800017 	ldw	r2,0(r22)
    5724:	10000b1e 	bne	r2,zero,5754 <quorem+0x120>
    5728:	b0bfff04 	addi	r2,r22,-4
    572c:	a880082e 	bgeu	r21,r2,5750 <quorem+0x11c>
    5730:	b0ffff17 	ldw	r3,-4(r22)
    5734:	18000326 	beq	r3,zero,5744 <quorem+0x110>
    5738:	00000506 	br	5750 <quorem+0x11c>
    573c:	10c00017 	ldw	r3,0(r2)
    5740:	1800031e 	bne	r3,zero,5750 <quorem+0x11c>
    5744:	10bfff04 	addi	r2,r2,-4
    5748:	94bfffc4 	addi	r18,r18,-1
    574c:	a8bffb36 	bltu	r21,r2,573c <__alt_data_end+0xff00573c>
    5750:	84800415 	stw	r18,16(r16)
    5754:	b80b883a 	mov	r5,r23
    5758:	8009883a 	mov	r4,r16
    575c:	0008f8c0 	call	8f8c <__mcmp>
    5760:	10002616 	blt	r2,zero,57fc <quorem+0x1c8>
    5764:	9cc00044 	addi	r19,r19,1
    5768:	a805883a 	mov	r2,r21
    576c:	000b883a 	mov	r5,zero
    5770:	11000017 	ldw	r4,0(r2)
    5774:	89800017 	ldw	r6,0(r17)
    5778:	10800104 	addi	r2,r2,4
    577c:	20ffffcc 	andi	r3,r4,65535
    5780:	194b883a 	add	r5,r3,r5
    5784:	30ffffcc 	andi	r3,r6,65535
    5788:	28c7c83a 	sub	r3,r5,r3
    578c:	300cd43a 	srli	r6,r6,16
    5790:	2008d43a 	srli	r4,r4,16
    5794:	180bd43a 	srai	r5,r3,16
    5798:	18ffffcc 	andi	r3,r3,65535
    579c:	2189c83a 	sub	r4,r4,r6
    57a0:	2149883a 	add	r4,r4,r5
    57a4:	200c943a 	slli	r6,r4,16
    57a8:	8c400104 	addi	r17,r17,4
    57ac:	200bd43a 	srai	r5,r4,16
    57b0:	30c6b03a 	or	r3,r6,r3
    57b4:	10ffff15 	stw	r3,-4(r2)
    57b8:	a47fed2e 	bgeu	r20,r17,5770 <__alt_data_end+0xff005770>
    57bc:	9485883a 	add	r2,r18,r18
    57c0:	1085883a 	add	r2,r2,r2
    57c4:	a887883a 	add	r3,r21,r2
    57c8:	18800017 	ldw	r2,0(r3)
    57cc:	10000b1e 	bne	r2,zero,57fc <quorem+0x1c8>
    57d0:	18bfff04 	addi	r2,r3,-4
    57d4:	a880082e 	bgeu	r21,r2,57f8 <quorem+0x1c4>
    57d8:	18ffff17 	ldw	r3,-4(r3)
    57dc:	18000326 	beq	r3,zero,57ec <quorem+0x1b8>
    57e0:	00000506 	br	57f8 <quorem+0x1c4>
    57e4:	10c00017 	ldw	r3,0(r2)
    57e8:	1800031e 	bne	r3,zero,57f8 <quorem+0x1c4>
    57ec:	10bfff04 	addi	r2,r2,-4
    57f0:	94bfffc4 	addi	r18,r18,-1
    57f4:	a8bffb36 	bltu	r21,r2,57e4 <__alt_data_end+0xff0057e4>
    57f8:	84800415 	stw	r18,16(r16)
    57fc:	9805883a 	mov	r2,r19
    5800:	dfc00817 	ldw	ra,32(sp)
    5804:	ddc00717 	ldw	r23,28(sp)
    5808:	dd800617 	ldw	r22,24(sp)
    580c:	dd400517 	ldw	r21,20(sp)
    5810:	dd000417 	ldw	r20,16(sp)
    5814:	dcc00317 	ldw	r19,12(sp)
    5818:	dc800217 	ldw	r18,8(sp)
    581c:	dc400117 	ldw	r17,4(sp)
    5820:	dc000017 	ldw	r16,0(sp)
    5824:	dec00904 	addi	sp,sp,36
    5828:	f800283a 	ret
    582c:	0005883a 	mov	r2,zero
    5830:	003ff306 	br	5800 <__alt_data_end+0xff005800>

00005834 <_dtoa_r>:
    5834:	20801017 	ldw	r2,64(r4)
    5838:	deffde04 	addi	sp,sp,-136
    583c:	df002015 	stw	fp,128(sp)
    5840:	dcc01b15 	stw	r19,108(sp)
    5844:	dc801a15 	stw	r18,104(sp)
    5848:	dc401915 	stw	r17,100(sp)
    584c:	dc001815 	stw	r16,96(sp)
    5850:	dfc02115 	stw	ra,132(sp)
    5854:	ddc01f15 	stw	r23,124(sp)
    5858:	dd801e15 	stw	r22,120(sp)
    585c:	dd401d15 	stw	r21,116(sp)
    5860:	dd001c15 	stw	r20,112(sp)
    5864:	d9c00315 	stw	r7,12(sp)
    5868:	2039883a 	mov	fp,r4
    586c:	3023883a 	mov	r17,r6
    5870:	2825883a 	mov	r18,r5
    5874:	dc002417 	ldw	r16,144(sp)
    5878:	3027883a 	mov	r19,r6
    587c:	10000826 	beq	r2,zero,58a0 <_dtoa_r+0x6c>
    5880:	21801117 	ldw	r6,68(r4)
    5884:	00c00044 	movi	r3,1
    5888:	100b883a 	mov	r5,r2
    588c:	1986983a 	sll	r3,r3,r6
    5890:	11800115 	stw	r6,4(r2)
    5894:	10c00215 	stw	r3,8(r2)
    5898:	000876c0 	call	876c <_Bfree>
    589c:	e0001015 	stw	zero,64(fp)
    58a0:	88002e16 	blt	r17,zero,595c <_dtoa_r+0x128>
    58a4:	80000015 	stw	zero,0(r16)
    58a8:	889ffc2c 	andhi	r2,r17,32752
    58ac:	00dffc34 	movhi	r3,32752
    58b0:	10c01c26 	beq	r2,r3,5924 <_dtoa_r+0xf0>
    58b4:	000d883a 	mov	r6,zero
    58b8:	000f883a 	mov	r7,zero
    58bc:	9009883a 	mov	r4,r18
    58c0:	980b883a 	mov	r5,r19
    58c4:	000d1880 	call	d188 <__eqdf2>
    58c8:	10002b1e 	bne	r2,zero,5978 <_dtoa_r+0x144>
    58cc:	d9c02317 	ldw	r7,140(sp)
    58d0:	00800044 	movi	r2,1
    58d4:	38800015 	stw	r2,0(r7)
    58d8:	d8802517 	ldw	r2,148(sp)
    58dc:	10019e26 	beq	r2,zero,5f58 <_dtoa_r+0x724>
    58e0:	d8c02517 	ldw	r3,148(sp)
    58e4:	00800074 	movhi	r2,1
    58e8:	10857044 	addi	r2,r2,5569
    58ec:	18800015 	stw	r2,0(r3)
    58f0:	10bfffc4 	addi	r2,r2,-1
    58f4:	dfc02117 	ldw	ra,132(sp)
    58f8:	df002017 	ldw	fp,128(sp)
    58fc:	ddc01f17 	ldw	r23,124(sp)
    5900:	dd801e17 	ldw	r22,120(sp)
    5904:	dd401d17 	ldw	r21,116(sp)
    5908:	dd001c17 	ldw	r20,112(sp)
    590c:	dcc01b17 	ldw	r19,108(sp)
    5910:	dc801a17 	ldw	r18,104(sp)
    5914:	dc401917 	ldw	r17,100(sp)
    5918:	dc001817 	ldw	r16,96(sp)
    591c:	dec02204 	addi	sp,sp,136
    5920:	f800283a 	ret
    5924:	d8c02317 	ldw	r3,140(sp)
    5928:	0089c3c4 	movi	r2,9999
    592c:	18800015 	stw	r2,0(r3)
    5930:	90017726 	beq	r18,zero,5f10 <_dtoa_r+0x6dc>
    5934:	00800074 	movhi	r2,1
    5938:	10857c04 	addi	r2,r2,5616
    593c:	d9002517 	ldw	r4,148(sp)
    5940:	203fec26 	beq	r4,zero,58f4 <__alt_data_end+0xff0058f4>
    5944:	10c000c7 	ldb	r3,3(r2)
    5948:	1801781e 	bne	r3,zero,5f2c <_dtoa_r+0x6f8>
    594c:	10c000c4 	addi	r3,r2,3
    5950:	d9802517 	ldw	r6,148(sp)
    5954:	30c00015 	stw	r3,0(r6)
    5958:	003fe606 	br	58f4 <__alt_data_end+0xff0058f4>
    595c:	04e00034 	movhi	r19,32768
    5960:	9cffffc4 	addi	r19,r19,-1
    5964:	00800044 	movi	r2,1
    5968:	8ce6703a 	and	r19,r17,r19
    596c:	80800015 	stw	r2,0(r16)
    5970:	9823883a 	mov	r17,r19
    5974:	003fcc06 	br	58a8 <__alt_data_end+0xff0058a8>
    5978:	d8800204 	addi	r2,sp,8
    597c:	d8800015 	stw	r2,0(sp)
    5980:	d9c00104 	addi	r7,sp,4
    5984:	900b883a 	mov	r5,r18
    5988:	980d883a 	mov	r6,r19
    598c:	e009883a 	mov	r4,fp
    5990:	8820d53a 	srli	r16,r17,20
    5994:	00093580 	call	9358 <__d2b>
    5998:	d8800915 	stw	r2,36(sp)
    599c:	8001651e 	bne	r16,zero,5f34 <_dtoa_r+0x700>
    59a0:	dd800217 	ldw	r22,8(sp)
    59a4:	dc000117 	ldw	r16,4(sp)
    59a8:	00800804 	movi	r2,32
    59ac:	b421883a 	add	r16,r22,r16
    59b0:	80c10c84 	addi	r3,r16,1074
    59b4:	10c2d10e 	bge	r2,r3,64fc <_dtoa_r+0xcc8>
    59b8:	00801004 	movi	r2,64
    59bc:	81010484 	addi	r4,r16,1042
    59c0:	10c7c83a 	sub	r3,r2,r3
    59c4:	9108d83a 	srl	r4,r18,r4
    59c8:	88e2983a 	sll	r17,r17,r3
    59cc:	2448b03a 	or	r4,r4,r17
    59d0:	00026a40 	call	26a4 <__floatunsidf>
    59d4:	017f8434 	movhi	r5,65040
    59d8:	01800044 	movi	r6,1
    59dc:	1009883a 	mov	r4,r2
    59e0:	194b883a 	add	r5,r3,r5
    59e4:	843fffc4 	addi	r16,r16,-1
    59e8:	d9801115 	stw	r6,68(sp)
    59ec:	000d883a 	mov	r6,zero
    59f0:	01cffe34 	movhi	r7,16376
    59f4:	000daf80 	call	daf8 <__subdf3>
    59f8:	0198dbf4 	movhi	r6,25455
    59fc:	01cff4f4 	movhi	r7,16339
    5a00:	3190d844 	addi	r6,r6,17249
    5a04:	39e1e9c4 	addi	r7,r7,-30809
    5a08:	1009883a 	mov	r4,r2
    5a0c:	180b883a 	mov	r5,r3
    5a10:	000d3e00 	call	d3e0 <__muldf3>
    5a14:	01a2d874 	movhi	r6,35681
    5a18:	01cff1f4 	movhi	r7,16327
    5a1c:	31b22cc4 	addi	r6,r6,-14157
    5a20:	39e28a04 	addi	r7,r7,-30168
    5a24:	180b883a 	mov	r5,r3
    5a28:	1009883a 	mov	r4,r2
    5a2c:	000c8dc0 	call	c8dc <__adddf3>
    5a30:	8009883a 	mov	r4,r16
    5a34:	1029883a 	mov	r20,r2
    5a38:	1823883a 	mov	r17,r3
    5a3c:	000e4740 	call	e474 <__floatsidf>
    5a40:	019427f4 	movhi	r6,20639
    5a44:	01cff4f4 	movhi	r7,16339
    5a48:	319e7ec4 	addi	r6,r6,31227
    5a4c:	39d104c4 	addi	r7,r7,17427
    5a50:	1009883a 	mov	r4,r2
    5a54:	180b883a 	mov	r5,r3
    5a58:	000d3e00 	call	d3e0 <__muldf3>
    5a5c:	100d883a 	mov	r6,r2
    5a60:	180f883a 	mov	r7,r3
    5a64:	a009883a 	mov	r4,r20
    5a68:	880b883a 	mov	r5,r17
    5a6c:	000c8dc0 	call	c8dc <__adddf3>
    5a70:	1009883a 	mov	r4,r2
    5a74:	180b883a 	mov	r5,r3
    5a78:	1029883a 	mov	r20,r2
    5a7c:	1823883a 	mov	r17,r3
    5a80:	000e3f40 	call	e3f4 <__fixdfsi>
    5a84:	000d883a 	mov	r6,zero
    5a88:	000f883a 	mov	r7,zero
    5a8c:	a009883a 	mov	r4,r20
    5a90:	880b883a 	mov	r5,r17
    5a94:	d8800515 	stw	r2,20(sp)
    5a98:	000d2ec0 	call	d2ec <__ledf2>
    5a9c:	10028716 	blt	r2,zero,64bc <_dtoa_r+0xc88>
    5aa0:	d8c00517 	ldw	r3,20(sp)
    5aa4:	00800584 	movi	r2,22
    5aa8:	10c27536 	bltu	r2,r3,6480 <_dtoa_r+0xc4c>
    5aac:	180490fa 	slli	r2,r3,3
    5ab0:	00c00074 	movhi	r3,1
    5ab4:	18c59804 	addi	r3,r3,5728
    5ab8:	1885883a 	add	r2,r3,r2
    5abc:	11000017 	ldw	r4,0(r2)
    5ac0:	11400117 	ldw	r5,4(r2)
    5ac4:	900d883a 	mov	r6,r18
    5ac8:	980f883a 	mov	r7,r19
    5acc:	000d2100 	call	d210 <__gedf2>
    5ad0:	00828d0e 	bge	zero,r2,6508 <_dtoa_r+0xcd4>
    5ad4:	d9000517 	ldw	r4,20(sp)
    5ad8:	d8000e15 	stw	zero,56(sp)
    5adc:	213fffc4 	addi	r4,r4,-1
    5ae0:	d9000515 	stw	r4,20(sp)
    5ae4:	b42dc83a 	sub	r22,r22,r16
    5ae8:	b5bfffc4 	addi	r22,r22,-1
    5aec:	b0026f16 	blt	r22,zero,64ac <_dtoa_r+0xc78>
    5af0:	d8000815 	stw	zero,32(sp)
    5af4:	d9c00517 	ldw	r7,20(sp)
    5af8:	38026416 	blt	r7,zero,648c <_dtoa_r+0xc58>
    5afc:	b1ed883a 	add	r22,r22,r7
    5b00:	d9c00d15 	stw	r7,52(sp)
    5b04:	d8000a15 	stw	zero,40(sp)
    5b08:	d9800317 	ldw	r6,12(sp)
    5b0c:	00800244 	movi	r2,9
    5b10:	11811436 	bltu	r2,r6,5f64 <_dtoa_r+0x730>
    5b14:	00800144 	movi	r2,5
    5b18:	1184e10e 	bge	r2,r6,6ea0 <_dtoa_r+0x166c>
    5b1c:	31bfff04 	addi	r6,r6,-4
    5b20:	d9800315 	stw	r6,12(sp)
    5b24:	0023883a 	mov	r17,zero
    5b28:	d9800317 	ldw	r6,12(sp)
    5b2c:	008000c4 	movi	r2,3
    5b30:	30836726 	beq	r6,r2,68d0 <_dtoa_r+0x109c>
    5b34:	1183410e 	bge	r2,r6,683c <_dtoa_r+0x1008>
    5b38:	d9c00317 	ldw	r7,12(sp)
    5b3c:	00800104 	movi	r2,4
    5b40:	38827c26 	beq	r7,r2,6534 <_dtoa_r+0xd00>
    5b44:	00800144 	movi	r2,5
    5b48:	3884c41e 	bne	r7,r2,6e5c <_dtoa_r+0x1628>
    5b4c:	00800044 	movi	r2,1
    5b50:	d8800b15 	stw	r2,44(sp)
    5b54:	d8c00517 	ldw	r3,20(sp)
    5b58:	d9002217 	ldw	r4,136(sp)
    5b5c:	1907883a 	add	r3,r3,r4
    5b60:	19800044 	addi	r6,r3,1
    5b64:	d8c00c15 	stw	r3,48(sp)
    5b68:	d9800615 	stw	r6,24(sp)
    5b6c:	0183a40e 	bge	zero,r6,6a00 <_dtoa_r+0x11cc>
    5b70:	d9800617 	ldw	r6,24(sp)
    5b74:	3021883a 	mov	r16,r6
    5b78:	e0001115 	stw	zero,68(fp)
    5b7c:	008005c4 	movi	r2,23
    5b80:	1184c92e 	bgeu	r2,r6,6ea8 <_dtoa_r+0x1674>
    5b84:	00c00044 	movi	r3,1
    5b88:	00800104 	movi	r2,4
    5b8c:	1085883a 	add	r2,r2,r2
    5b90:	11000504 	addi	r4,r2,20
    5b94:	180b883a 	mov	r5,r3
    5b98:	18c00044 	addi	r3,r3,1
    5b9c:	313ffb2e 	bgeu	r6,r4,5b8c <__alt_data_end+0xff005b8c>
    5ba0:	e1401115 	stw	r5,68(fp)
    5ba4:	e009883a 	mov	r4,fp
    5ba8:	00086c40 	call	86c4 <_Balloc>
    5bac:	d8800715 	stw	r2,28(sp)
    5bb0:	e0801015 	stw	r2,64(fp)
    5bb4:	00800384 	movi	r2,14
    5bb8:	1400f736 	bltu	r2,r16,5f98 <_dtoa_r+0x764>
    5bbc:	8800f626 	beq	r17,zero,5f98 <_dtoa_r+0x764>
    5bc0:	d9c00517 	ldw	r7,20(sp)
    5bc4:	01c39a0e 	bge	zero,r7,6a30 <_dtoa_r+0x11fc>
    5bc8:	388003cc 	andi	r2,r7,15
    5bcc:	100490fa 	slli	r2,r2,3
    5bd0:	382bd13a 	srai	r21,r7,4
    5bd4:	00c00074 	movhi	r3,1
    5bd8:	18c59804 	addi	r3,r3,5728
    5bdc:	1885883a 	add	r2,r3,r2
    5be0:	a8c0040c 	andi	r3,r21,16
    5be4:	12400017 	ldw	r9,0(r2)
    5be8:	12000117 	ldw	r8,4(r2)
    5bec:	18037926 	beq	r3,zero,69d4 <_dtoa_r+0x11a0>
    5bf0:	00800074 	movhi	r2,1
    5bf4:	10858e04 	addi	r2,r2,5688
    5bf8:	11800817 	ldw	r6,32(r2)
    5bfc:	11c00917 	ldw	r7,36(r2)
    5c00:	9009883a 	mov	r4,r18
    5c04:	980b883a 	mov	r5,r19
    5c08:	da001715 	stw	r8,92(sp)
    5c0c:	da401615 	stw	r9,88(sp)
    5c10:	0001dbc0 	call	1dbc <__divdf3>
    5c14:	da001717 	ldw	r8,92(sp)
    5c18:	da401617 	ldw	r9,88(sp)
    5c1c:	ad4003cc 	andi	r21,r21,15
    5c20:	040000c4 	movi	r16,3
    5c24:	1023883a 	mov	r17,r2
    5c28:	1829883a 	mov	r20,r3
    5c2c:	a8001126 	beq	r21,zero,5c74 <_dtoa_r+0x440>
    5c30:	05c00074 	movhi	r23,1
    5c34:	bdc58e04 	addi	r23,r23,5688
    5c38:	4805883a 	mov	r2,r9
    5c3c:	4007883a 	mov	r3,r8
    5c40:	a980004c 	andi	r6,r21,1
    5c44:	1009883a 	mov	r4,r2
    5c48:	a82bd07a 	srai	r21,r21,1
    5c4c:	180b883a 	mov	r5,r3
    5c50:	30000426 	beq	r6,zero,5c64 <_dtoa_r+0x430>
    5c54:	b9800017 	ldw	r6,0(r23)
    5c58:	b9c00117 	ldw	r7,4(r23)
    5c5c:	84000044 	addi	r16,r16,1
    5c60:	000d3e00 	call	d3e0 <__muldf3>
    5c64:	bdc00204 	addi	r23,r23,8
    5c68:	a83ff51e 	bne	r21,zero,5c40 <__alt_data_end+0xff005c40>
    5c6c:	1013883a 	mov	r9,r2
    5c70:	1811883a 	mov	r8,r3
    5c74:	480d883a 	mov	r6,r9
    5c78:	400f883a 	mov	r7,r8
    5c7c:	8809883a 	mov	r4,r17
    5c80:	a00b883a 	mov	r5,r20
    5c84:	0001dbc0 	call	1dbc <__divdf3>
    5c88:	d8800f15 	stw	r2,60(sp)
    5c8c:	d8c01015 	stw	r3,64(sp)
    5c90:	d8c00e17 	ldw	r3,56(sp)
    5c94:	18000626 	beq	r3,zero,5cb0 <_dtoa_r+0x47c>
    5c98:	d9000f17 	ldw	r4,60(sp)
    5c9c:	d9401017 	ldw	r5,64(sp)
    5ca0:	000d883a 	mov	r6,zero
    5ca4:	01cffc34 	movhi	r7,16368
    5ca8:	000d2ec0 	call	d2ec <__ledf2>
    5cac:	10040b16 	blt	r2,zero,6cdc <_dtoa_r+0x14a8>
    5cb0:	8009883a 	mov	r4,r16
    5cb4:	000e4740 	call	e474 <__floatsidf>
    5cb8:	d9800f17 	ldw	r6,60(sp)
    5cbc:	d9c01017 	ldw	r7,64(sp)
    5cc0:	1009883a 	mov	r4,r2
    5cc4:	180b883a 	mov	r5,r3
    5cc8:	000d3e00 	call	d3e0 <__muldf3>
    5ccc:	000d883a 	mov	r6,zero
    5cd0:	01d00734 	movhi	r7,16412
    5cd4:	1009883a 	mov	r4,r2
    5cd8:	180b883a 	mov	r5,r3
    5cdc:	000c8dc0 	call	c8dc <__adddf3>
    5ce0:	1021883a 	mov	r16,r2
    5ce4:	d8800617 	ldw	r2,24(sp)
    5ce8:	047f3034 	movhi	r17,64704
    5cec:	1c63883a 	add	r17,r3,r17
    5cf0:	10031826 	beq	r2,zero,6954 <_dtoa_r+0x1120>
    5cf4:	d8c00517 	ldw	r3,20(sp)
    5cf8:	db000617 	ldw	r12,24(sp)
    5cfc:	d8c01315 	stw	r3,76(sp)
    5d00:	d9000b17 	ldw	r4,44(sp)
    5d04:	20038f26 	beq	r4,zero,6b44 <_dtoa_r+0x1310>
    5d08:	60bfffc4 	addi	r2,r12,-1
    5d0c:	100490fa 	slli	r2,r2,3
    5d10:	00c00074 	movhi	r3,1
    5d14:	18c59804 	addi	r3,r3,5728
    5d18:	1885883a 	add	r2,r3,r2
    5d1c:	11800017 	ldw	r6,0(r2)
    5d20:	11c00117 	ldw	r7,4(r2)
    5d24:	d8800717 	ldw	r2,28(sp)
    5d28:	0009883a 	mov	r4,zero
    5d2c:	014ff834 	movhi	r5,16352
    5d30:	db001615 	stw	r12,88(sp)
    5d34:	15c00044 	addi	r23,r2,1
    5d38:	0001dbc0 	call	1dbc <__divdf3>
    5d3c:	800d883a 	mov	r6,r16
    5d40:	880f883a 	mov	r7,r17
    5d44:	1009883a 	mov	r4,r2
    5d48:	180b883a 	mov	r5,r3
    5d4c:	000daf80 	call	daf8 <__subdf3>
    5d50:	d9401017 	ldw	r5,64(sp)
    5d54:	d9000f17 	ldw	r4,60(sp)
    5d58:	102b883a 	mov	r21,r2
    5d5c:	d8c01215 	stw	r3,72(sp)
    5d60:	000e3f40 	call	e3f4 <__fixdfsi>
    5d64:	1009883a 	mov	r4,r2
    5d68:	1029883a 	mov	r20,r2
    5d6c:	000e4740 	call	e474 <__floatsidf>
    5d70:	d9000f17 	ldw	r4,60(sp)
    5d74:	d9401017 	ldw	r5,64(sp)
    5d78:	100d883a 	mov	r6,r2
    5d7c:	180f883a 	mov	r7,r3
    5d80:	000daf80 	call	daf8 <__subdf3>
    5d84:	1823883a 	mov	r17,r3
    5d88:	d8c00717 	ldw	r3,28(sp)
    5d8c:	d9401217 	ldw	r5,72(sp)
    5d90:	a2000c04 	addi	r8,r20,48
    5d94:	1021883a 	mov	r16,r2
    5d98:	1a000005 	stb	r8,0(r3)
    5d9c:	800d883a 	mov	r6,r16
    5da0:	880f883a 	mov	r7,r17
    5da4:	a809883a 	mov	r4,r21
    5da8:	4029883a 	mov	r20,r8
    5dac:	000d2100 	call	d210 <__gedf2>
    5db0:	00841d16 	blt	zero,r2,6e28 <_dtoa_r+0x15f4>
    5db4:	800d883a 	mov	r6,r16
    5db8:	880f883a 	mov	r7,r17
    5dbc:	0009883a 	mov	r4,zero
    5dc0:	014ffc34 	movhi	r5,16368
    5dc4:	000daf80 	call	daf8 <__subdf3>
    5dc8:	d9401217 	ldw	r5,72(sp)
    5dcc:	100d883a 	mov	r6,r2
    5dd0:	180f883a 	mov	r7,r3
    5dd4:	a809883a 	mov	r4,r21
    5dd8:	000d2100 	call	d210 <__gedf2>
    5ddc:	db001617 	ldw	r12,88(sp)
    5de0:	00840e16 	blt	zero,r2,6e1c <_dtoa_r+0x15e8>
    5de4:	00800044 	movi	r2,1
    5de8:	13006b0e 	bge	r2,r12,5f98 <_dtoa_r+0x764>
    5dec:	d9000717 	ldw	r4,28(sp)
    5df0:	dd800f15 	stw	r22,60(sp)
    5df4:	dcc01015 	stw	r19,64(sp)
    5df8:	2319883a 	add	r12,r4,r12
    5dfc:	dcc01217 	ldw	r19,72(sp)
    5e00:	602d883a 	mov	r22,r12
    5e04:	dc801215 	stw	r18,72(sp)
    5e08:	b825883a 	mov	r18,r23
    5e0c:	00000906 	br	5e34 <_dtoa_r+0x600>
    5e10:	000daf80 	call	daf8 <__subdf3>
    5e14:	a80d883a 	mov	r6,r21
    5e18:	980f883a 	mov	r7,r19
    5e1c:	1009883a 	mov	r4,r2
    5e20:	180b883a 	mov	r5,r3
    5e24:	000d2ec0 	call	d2ec <__ledf2>
    5e28:	1003e816 	blt	r2,zero,6dcc <_dtoa_r+0x1598>
    5e2c:	b825883a 	mov	r18,r23
    5e30:	bd83e926 	beq	r23,r22,6dd8 <_dtoa_r+0x15a4>
    5e34:	a809883a 	mov	r4,r21
    5e38:	980b883a 	mov	r5,r19
    5e3c:	000d883a 	mov	r6,zero
    5e40:	01d00934 	movhi	r7,16420
    5e44:	000d3e00 	call	d3e0 <__muldf3>
    5e48:	000d883a 	mov	r6,zero
    5e4c:	01d00934 	movhi	r7,16420
    5e50:	8009883a 	mov	r4,r16
    5e54:	880b883a 	mov	r5,r17
    5e58:	102b883a 	mov	r21,r2
    5e5c:	1827883a 	mov	r19,r3
    5e60:	000d3e00 	call	d3e0 <__muldf3>
    5e64:	180b883a 	mov	r5,r3
    5e68:	1009883a 	mov	r4,r2
    5e6c:	1821883a 	mov	r16,r3
    5e70:	1023883a 	mov	r17,r2
    5e74:	000e3f40 	call	e3f4 <__fixdfsi>
    5e78:	1009883a 	mov	r4,r2
    5e7c:	1029883a 	mov	r20,r2
    5e80:	000e4740 	call	e474 <__floatsidf>
    5e84:	8809883a 	mov	r4,r17
    5e88:	800b883a 	mov	r5,r16
    5e8c:	100d883a 	mov	r6,r2
    5e90:	180f883a 	mov	r7,r3
    5e94:	000daf80 	call	daf8 <__subdf3>
    5e98:	a5000c04 	addi	r20,r20,48
    5e9c:	a80d883a 	mov	r6,r21
    5ea0:	980f883a 	mov	r7,r19
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	180b883a 	mov	r5,r3
    5eac:	95000005 	stb	r20,0(r18)
    5eb0:	1021883a 	mov	r16,r2
    5eb4:	1823883a 	mov	r17,r3
    5eb8:	000d2ec0 	call	d2ec <__ledf2>
    5ebc:	bdc00044 	addi	r23,r23,1
    5ec0:	800d883a 	mov	r6,r16
    5ec4:	880f883a 	mov	r7,r17
    5ec8:	0009883a 	mov	r4,zero
    5ecc:	014ffc34 	movhi	r5,16368
    5ed0:	103fcf0e 	bge	r2,zero,5e10 <__alt_data_end+0xff005e10>
    5ed4:	d8c01317 	ldw	r3,76(sp)
    5ed8:	d8c00515 	stw	r3,20(sp)
    5edc:	d9400917 	ldw	r5,36(sp)
    5ee0:	e009883a 	mov	r4,fp
    5ee4:	000876c0 	call	876c <_Bfree>
    5ee8:	d9000517 	ldw	r4,20(sp)
    5eec:	d9802317 	ldw	r6,140(sp)
    5ef0:	d9c02517 	ldw	r7,148(sp)
    5ef4:	b8000005 	stb	zero,0(r23)
    5ef8:	20800044 	addi	r2,r4,1
    5efc:	30800015 	stw	r2,0(r6)
    5f00:	3802aa26 	beq	r7,zero,69ac <_dtoa_r+0x1178>
    5f04:	3dc00015 	stw	r23,0(r7)
    5f08:	d8800717 	ldw	r2,28(sp)
    5f0c:	003e7906 	br	58f4 <__alt_data_end+0xff0058f4>
    5f10:	00800434 	movhi	r2,16
    5f14:	10bfffc4 	addi	r2,r2,-1
    5f18:	88a2703a 	and	r17,r17,r2
    5f1c:	883e851e 	bne	r17,zero,5934 <__alt_data_end+0xff005934>
    5f20:	00800074 	movhi	r2,1
    5f24:	10857904 	addi	r2,r2,5604
    5f28:	003e8406 	br	593c <__alt_data_end+0xff00593c>
    5f2c:	10c00204 	addi	r3,r2,8
    5f30:	003e8706 	br	5950 <__alt_data_end+0xff005950>
    5f34:	01400434 	movhi	r5,16
    5f38:	297fffc4 	addi	r5,r5,-1
    5f3c:	994a703a 	and	r5,r19,r5
    5f40:	9009883a 	mov	r4,r18
    5f44:	843f0044 	addi	r16,r16,-1023
    5f48:	294ffc34 	orhi	r5,r5,16368
    5f4c:	dd800217 	ldw	r22,8(sp)
    5f50:	d8001115 	stw	zero,68(sp)
    5f54:	003ea506 	br	59ec <__alt_data_end+0xff0059ec>
    5f58:	00800074 	movhi	r2,1
    5f5c:	10857004 	addi	r2,r2,5568
    5f60:	003e6406 	br	58f4 <__alt_data_end+0xff0058f4>
    5f64:	e0001115 	stw	zero,68(fp)
    5f68:	000b883a 	mov	r5,zero
    5f6c:	e009883a 	mov	r4,fp
    5f70:	00086c40 	call	86c4 <_Balloc>
    5f74:	01bfffc4 	movi	r6,-1
    5f78:	01c00044 	movi	r7,1
    5f7c:	d8800715 	stw	r2,28(sp)
    5f80:	d9800c15 	stw	r6,48(sp)
    5f84:	e0801015 	stw	r2,64(fp)
    5f88:	d8000315 	stw	zero,12(sp)
    5f8c:	d9c00b15 	stw	r7,44(sp)
    5f90:	d9800615 	stw	r6,24(sp)
    5f94:	d8002215 	stw	zero,136(sp)
    5f98:	d8800117 	ldw	r2,4(sp)
    5f9c:	10008916 	blt	r2,zero,61c4 <_dtoa_r+0x990>
    5fa0:	d9000517 	ldw	r4,20(sp)
    5fa4:	00c00384 	movi	r3,14
    5fa8:	19008616 	blt	r3,r4,61c4 <_dtoa_r+0x990>
    5fac:	200490fa 	slli	r2,r4,3
    5fb0:	00c00074 	movhi	r3,1
    5fb4:	d9802217 	ldw	r6,136(sp)
    5fb8:	18c59804 	addi	r3,r3,5728
    5fbc:	1885883a 	add	r2,r3,r2
    5fc0:	14000017 	ldw	r16,0(r2)
    5fc4:	14400117 	ldw	r17,4(r2)
    5fc8:	30016316 	blt	r6,zero,6558 <_dtoa_r+0xd24>
    5fcc:	800d883a 	mov	r6,r16
    5fd0:	880f883a 	mov	r7,r17
    5fd4:	9009883a 	mov	r4,r18
    5fd8:	980b883a 	mov	r5,r19
    5fdc:	0001dbc0 	call	1dbc <__divdf3>
    5fe0:	180b883a 	mov	r5,r3
    5fe4:	1009883a 	mov	r4,r2
    5fe8:	000e3f40 	call	e3f4 <__fixdfsi>
    5fec:	1009883a 	mov	r4,r2
    5ff0:	102b883a 	mov	r21,r2
    5ff4:	000e4740 	call	e474 <__floatsidf>
    5ff8:	800d883a 	mov	r6,r16
    5ffc:	880f883a 	mov	r7,r17
    6000:	1009883a 	mov	r4,r2
    6004:	180b883a 	mov	r5,r3
    6008:	000d3e00 	call	d3e0 <__muldf3>
    600c:	100d883a 	mov	r6,r2
    6010:	180f883a 	mov	r7,r3
    6014:	9009883a 	mov	r4,r18
    6018:	980b883a 	mov	r5,r19
    601c:	000daf80 	call	daf8 <__subdf3>
    6020:	d9c00717 	ldw	r7,28(sp)
    6024:	1009883a 	mov	r4,r2
    6028:	a8800c04 	addi	r2,r21,48
    602c:	38800005 	stb	r2,0(r7)
    6030:	3dc00044 	addi	r23,r7,1
    6034:	d9c00617 	ldw	r7,24(sp)
    6038:	01800044 	movi	r6,1
    603c:	180b883a 	mov	r5,r3
    6040:	2005883a 	mov	r2,r4
    6044:	39803826 	beq	r7,r6,6128 <_dtoa_r+0x8f4>
    6048:	000d883a 	mov	r6,zero
    604c:	01d00934 	movhi	r7,16420
    6050:	000d3e00 	call	d3e0 <__muldf3>
    6054:	000d883a 	mov	r6,zero
    6058:	000f883a 	mov	r7,zero
    605c:	1009883a 	mov	r4,r2
    6060:	180b883a 	mov	r5,r3
    6064:	1025883a 	mov	r18,r2
    6068:	1827883a 	mov	r19,r3
    606c:	000d1880 	call	d188 <__eqdf2>
    6070:	103f9a26 	beq	r2,zero,5edc <__alt_data_end+0xff005edc>
    6074:	d9c00617 	ldw	r7,24(sp)
    6078:	d8c00717 	ldw	r3,28(sp)
    607c:	b829883a 	mov	r20,r23
    6080:	38bfffc4 	addi	r2,r7,-1
    6084:	18ad883a 	add	r22,r3,r2
    6088:	00000a06 	br	60b4 <_dtoa_r+0x880>
    608c:	000d3e00 	call	d3e0 <__muldf3>
    6090:	000d883a 	mov	r6,zero
    6094:	000f883a 	mov	r7,zero
    6098:	1009883a 	mov	r4,r2
    609c:	180b883a 	mov	r5,r3
    60a0:	1025883a 	mov	r18,r2
    60a4:	1827883a 	mov	r19,r3
    60a8:	b829883a 	mov	r20,r23
    60ac:	000d1880 	call	d188 <__eqdf2>
    60b0:	103f8a26 	beq	r2,zero,5edc <__alt_data_end+0xff005edc>
    60b4:	800d883a 	mov	r6,r16
    60b8:	880f883a 	mov	r7,r17
    60bc:	9009883a 	mov	r4,r18
    60c0:	980b883a 	mov	r5,r19
    60c4:	0001dbc0 	call	1dbc <__divdf3>
    60c8:	180b883a 	mov	r5,r3
    60cc:	1009883a 	mov	r4,r2
    60d0:	000e3f40 	call	e3f4 <__fixdfsi>
    60d4:	1009883a 	mov	r4,r2
    60d8:	102b883a 	mov	r21,r2
    60dc:	000e4740 	call	e474 <__floatsidf>
    60e0:	800d883a 	mov	r6,r16
    60e4:	880f883a 	mov	r7,r17
    60e8:	1009883a 	mov	r4,r2
    60ec:	180b883a 	mov	r5,r3
    60f0:	000d3e00 	call	d3e0 <__muldf3>
    60f4:	100d883a 	mov	r6,r2
    60f8:	180f883a 	mov	r7,r3
    60fc:	9009883a 	mov	r4,r18
    6100:	980b883a 	mov	r5,r19
    6104:	000daf80 	call	daf8 <__subdf3>
    6108:	aa000c04 	addi	r8,r21,48
    610c:	a2000005 	stb	r8,0(r20)
    6110:	000d883a 	mov	r6,zero
    6114:	01d00934 	movhi	r7,16420
    6118:	1009883a 	mov	r4,r2
    611c:	180b883a 	mov	r5,r3
    6120:	a5c00044 	addi	r23,r20,1
    6124:	b53fd91e 	bne	r22,r20,608c <__alt_data_end+0xff00608c>
    6128:	100d883a 	mov	r6,r2
    612c:	180f883a 	mov	r7,r3
    6130:	1009883a 	mov	r4,r2
    6134:	180b883a 	mov	r5,r3
    6138:	000c8dc0 	call	c8dc <__adddf3>
    613c:	100d883a 	mov	r6,r2
    6140:	180f883a 	mov	r7,r3
    6144:	8009883a 	mov	r4,r16
    6148:	880b883a 	mov	r5,r17
    614c:	1027883a 	mov	r19,r2
    6150:	1825883a 	mov	r18,r3
    6154:	000d2ec0 	call	d2ec <__ledf2>
    6158:	10000816 	blt	r2,zero,617c <_dtoa_r+0x948>
    615c:	980d883a 	mov	r6,r19
    6160:	900f883a 	mov	r7,r18
    6164:	8009883a 	mov	r4,r16
    6168:	880b883a 	mov	r5,r17
    616c:	000d1880 	call	d188 <__eqdf2>
    6170:	103f5a1e 	bne	r2,zero,5edc <__alt_data_end+0xff005edc>
    6174:	ad40004c 	andi	r21,r21,1
    6178:	a83f5826 	beq	r21,zero,5edc <__alt_data_end+0xff005edc>
    617c:	bd3fffc3 	ldbu	r20,-1(r23)
    6180:	b8bfffc4 	addi	r2,r23,-1
    6184:	1007883a 	mov	r3,r2
    6188:	01400e44 	movi	r5,57
    618c:	d9800717 	ldw	r6,28(sp)
    6190:	00000506 	br	61a8 <_dtoa_r+0x974>
    6194:	18ffffc4 	addi	r3,r3,-1
    6198:	11824726 	beq	r2,r6,6ab8 <_dtoa_r+0x1284>
    619c:	1d000003 	ldbu	r20,0(r3)
    61a0:	102f883a 	mov	r23,r2
    61a4:	10bfffc4 	addi	r2,r2,-1
    61a8:	a1003fcc 	andi	r4,r20,255
    61ac:	2100201c 	xori	r4,r4,128
    61b0:	213fe004 	addi	r4,r4,-128
    61b4:	217ff726 	beq	r4,r5,6194 <__alt_data_end+0xff006194>
    61b8:	a2000044 	addi	r8,r20,1
    61bc:	12000005 	stb	r8,0(r2)
    61c0:	003f4606 	br	5edc <__alt_data_end+0xff005edc>
    61c4:	d9000b17 	ldw	r4,44(sp)
    61c8:	2000c826 	beq	r4,zero,64ec <_dtoa_r+0xcb8>
    61cc:	d9800317 	ldw	r6,12(sp)
    61d0:	00c00044 	movi	r3,1
    61d4:	1980f90e 	bge	r3,r6,65bc <_dtoa_r+0xd88>
    61d8:	d8800617 	ldw	r2,24(sp)
    61dc:	d8c00a17 	ldw	r3,40(sp)
    61e0:	157fffc4 	addi	r21,r2,-1
    61e4:	1d41f316 	blt	r3,r21,69b4 <_dtoa_r+0x1180>
    61e8:	1d6bc83a 	sub	r21,r3,r21
    61ec:	d9c00617 	ldw	r7,24(sp)
    61f0:	3802aa16 	blt	r7,zero,6c9c <_dtoa_r+0x1468>
    61f4:	dd000817 	ldw	r20,32(sp)
    61f8:	d8800617 	ldw	r2,24(sp)
    61fc:	d8c00817 	ldw	r3,32(sp)
    6200:	01400044 	movi	r5,1
    6204:	e009883a 	mov	r4,fp
    6208:	1887883a 	add	r3,r3,r2
    620c:	d8c00815 	stw	r3,32(sp)
    6210:	b0ad883a 	add	r22,r22,r2
    6214:	0008ad00 	call	8ad0 <__i2b>
    6218:	1023883a 	mov	r17,r2
    621c:	a0000826 	beq	r20,zero,6240 <_dtoa_r+0xa0c>
    6220:	0580070e 	bge	zero,r22,6240 <_dtoa_r+0xa0c>
    6224:	a005883a 	mov	r2,r20
    6228:	b500b916 	blt	r22,r20,6510 <_dtoa_r+0xcdc>
    622c:	d9000817 	ldw	r4,32(sp)
    6230:	a0a9c83a 	sub	r20,r20,r2
    6234:	b0adc83a 	sub	r22,r22,r2
    6238:	2089c83a 	sub	r4,r4,r2
    623c:	d9000815 	stw	r4,32(sp)
    6240:	d9800a17 	ldw	r6,40(sp)
    6244:	0181810e 	bge	zero,r6,684c <_dtoa_r+0x1018>
    6248:	d9c00b17 	ldw	r7,44(sp)
    624c:	3800b326 	beq	r7,zero,651c <_dtoa_r+0xce8>
    6250:	a800b226 	beq	r21,zero,651c <_dtoa_r+0xce8>
    6254:	880b883a 	mov	r5,r17
    6258:	a80d883a 	mov	r6,r21
    625c:	e009883a 	mov	r4,fp
    6260:	0008d040 	call	8d04 <__pow5mult>
    6264:	d9800917 	ldw	r6,36(sp)
    6268:	100b883a 	mov	r5,r2
    626c:	e009883a 	mov	r4,fp
    6270:	1023883a 	mov	r17,r2
    6274:	0008b0c0 	call	8b0c <__multiply>
    6278:	1021883a 	mov	r16,r2
    627c:	d8800a17 	ldw	r2,40(sp)
    6280:	d9400917 	ldw	r5,36(sp)
    6284:	e009883a 	mov	r4,fp
    6288:	1545c83a 	sub	r2,r2,r21
    628c:	d8800a15 	stw	r2,40(sp)
    6290:	000876c0 	call	876c <_Bfree>
    6294:	d8c00a17 	ldw	r3,40(sp)
    6298:	18009f1e 	bne	r3,zero,6518 <_dtoa_r+0xce4>
    629c:	05c00044 	movi	r23,1
    62a0:	e009883a 	mov	r4,fp
    62a4:	b80b883a 	mov	r5,r23
    62a8:	0008ad00 	call	8ad0 <__i2b>
    62ac:	d9000d17 	ldw	r4,52(sp)
    62b0:	102b883a 	mov	r21,r2
    62b4:	2000ce26 	beq	r4,zero,65f0 <_dtoa_r+0xdbc>
    62b8:	200d883a 	mov	r6,r4
    62bc:	100b883a 	mov	r5,r2
    62c0:	e009883a 	mov	r4,fp
    62c4:	0008d040 	call	8d04 <__pow5mult>
    62c8:	d9800317 	ldw	r6,12(sp)
    62cc:	102b883a 	mov	r21,r2
    62d0:	b981810e 	bge	r23,r6,68d8 <_dtoa_r+0x10a4>
    62d4:	0027883a 	mov	r19,zero
    62d8:	a8800417 	ldw	r2,16(r21)
    62dc:	05c00804 	movi	r23,32
    62e0:	10800104 	addi	r2,r2,4
    62e4:	1085883a 	add	r2,r2,r2
    62e8:	1085883a 	add	r2,r2,r2
    62ec:	a885883a 	add	r2,r21,r2
    62f0:	11000017 	ldw	r4,0(r2)
    62f4:	00089b80 	call	89b8 <__hi0bits>
    62f8:	b885c83a 	sub	r2,r23,r2
    62fc:	1585883a 	add	r2,r2,r22
    6300:	108007cc 	andi	r2,r2,31
    6304:	1000b326 	beq	r2,zero,65d4 <_dtoa_r+0xda0>
    6308:	00c00804 	movi	r3,32
    630c:	1887c83a 	sub	r3,r3,r2
    6310:	01000104 	movi	r4,4
    6314:	20c2cd0e 	bge	r4,r3,6e4c <_dtoa_r+0x1618>
    6318:	00c00704 	movi	r3,28
    631c:	1885c83a 	sub	r2,r3,r2
    6320:	d8c00817 	ldw	r3,32(sp)
    6324:	a0a9883a 	add	r20,r20,r2
    6328:	b0ad883a 	add	r22,r22,r2
    632c:	1887883a 	add	r3,r3,r2
    6330:	d8c00815 	stw	r3,32(sp)
    6334:	d9800817 	ldw	r6,32(sp)
    6338:	0180040e 	bge	zero,r6,634c <_dtoa_r+0xb18>
    633c:	800b883a 	mov	r5,r16
    6340:	e009883a 	mov	r4,fp
    6344:	0008e440 	call	8e44 <__lshift>
    6348:	1021883a 	mov	r16,r2
    634c:	0580050e 	bge	zero,r22,6364 <_dtoa_r+0xb30>
    6350:	a80b883a 	mov	r5,r21
    6354:	b00d883a 	mov	r6,r22
    6358:	e009883a 	mov	r4,fp
    635c:	0008e440 	call	8e44 <__lshift>
    6360:	102b883a 	mov	r21,r2
    6364:	d9c00e17 	ldw	r7,56(sp)
    6368:	3801211e 	bne	r7,zero,67f0 <_dtoa_r+0xfbc>
    636c:	d9800617 	ldw	r6,24(sp)
    6370:	0181380e 	bge	zero,r6,6854 <_dtoa_r+0x1020>
    6374:	d8c00b17 	ldw	r3,44(sp)
    6378:	1800ab1e 	bne	r3,zero,6628 <_dtoa_r+0xdf4>
    637c:	dc800717 	ldw	r18,28(sp)
    6380:	dcc00617 	ldw	r19,24(sp)
    6384:	9029883a 	mov	r20,r18
    6388:	00000206 	br	6394 <_dtoa_r+0xb60>
    638c:	00087940 	call	8794 <__multadd>
    6390:	1021883a 	mov	r16,r2
    6394:	a80b883a 	mov	r5,r21
    6398:	8009883a 	mov	r4,r16
    639c:	00056340 	call	5634 <quorem>
    63a0:	10800c04 	addi	r2,r2,48
    63a4:	90800005 	stb	r2,0(r18)
    63a8:	94800044 	addi	r18,r18,1
    63ac:	9507c83a 	sub	r3,r18,r20
    63b0:	000f883a 	mov	r7,zero
    63b4:	01800284 	movi	r6,10
    63b8:	800b883a 	mov	r5,r16
    63bc:	e009883a 	mov	r4,fp
    63c0:	1cfff216 	blt	r3,r19,638c <__alt_data_end+0xff00638c>
    63c4:	1011883a 	mov	r8,r2
    63c8:	d8800617 	ldw	r2,24(sp)
    63cc:	0082370e 	bge	zero,r2,6cac <_dtoa_r+0x1478>
    63d0:	d9000717 	ldw	r4,28(sp)
    63d4:	0025883a 	mov	r18,zero
    63d8:	20af883a 	add	r23,r4,r2
    63dc:	01800044 	movi	r6,1
    63e0:	800b883a 	mov	r5,r16
    63e4:	e009883a 	mov	r4,fp
    63e8:	da001715 	stw	r8,92(sp)
    63ec:	0008e440 	call	8e44 <__lshift>
    63f0:	a80b883a 	mov	r5,r21
    63f4:	1009883a 	mov	r4,r2
    63f8:	d8800915 	stw	r2,36(sp)
    63fc:	0008f8c0 	call	8f8c <__mcmp>
    6400:	da001717 	ldw	r8,92(sp)
    6404:	0081800e 	bge	zero,r2,6a08 <_dtoa_r+0x11d4>
    6408:	b93fffc3 	ldbu	r4,-1(r23)
    640c:	b8bfffc4 	addi	r2,r23,-1
    6410:	1007883a 	mov	r3,r2
    6414:	01800e44 	movi	r6,57
    6418:	d9c00717 	ldw	r7,28(sp)
    641c:	00000506 	br	6434 <_dtoa_r+0xc00>
    6420:	18ffffc4 	addi	r3,r3,-1
    6424:	11c12326 	beq	r2,r7,68b4 <_dtoa_r+0x1080>
    6428:	19000003 	ldbu	r4,0(r3)
    642c:	102f883a 	mov	r23,r2
    6430:	10bfffc4 	addi	r2,r2,-1
    6434:	21403fcc 	andi	r5,r4,255
    6438:	2940201c 	xori	r5,r5,128
    643c:	297fe004 	addi	r5,r5,-128
    6440:	29bff726 	beq	r5,r6,6420 <__alt_data_end+0xff006420>
    6444:	21000044 	addi	r4,r4,1
    6448:	11000005 	stb	r4,0(r2)
    644c:	a80b883a 	mov	r5,r21
    6450:	e009883a 	mov	r4,fp
    6454:	000876c0 	call	876c <_Bfree>
    6458:	883ea026 	beq	r17,zero,5edc <__alt_data_end+0xff005edc>
    645c:	90000426 	beq	r18,zero,6470 <_dtoa_r+0xc3c>
    6460:	94400326 	beq	r18,r17,6470 <_dtoa_r+0xc3c>
    6464:	900b883a 	mov	r5,r18
    6468:	e009883a 	mov	r4,fp
    646c:	000876c0 	call	876c <_Bfree>
    6470:	880b883a 	mov	r5,r17
    6474:	e009883a 	mov	r4,fp
    6478:	000876c0 	call	876c <_Bfree>
    647c:	003e9706 	br	5edc <__alt_data_end+0xff005edc>
    6480:	01800044 	movi	r6,1
    6484:	d9800e15 	stw	r6,56(sp)
    6488:	003d9606 	br	5ae4 <__alt_data_end+0xff005ae4>
    648c:	d8800817 	ldw	r2,32(sp)
    6490:	d8c00517 	ldw	r3,20(sp)
    6494:	d8000d15 	stw	zero,52(sp)
    6498:	10c5c83a 	sub	r2,r2,r3
    649c:	00c9c83a 	sub	r4,zero,r3
    64a0:	d8800815 	stw	r2,32(sp)
    64a4:	d9000a15 	stw	r4,40(sp)
    64a8:	003d9706 	br	5b08 <__alt_data_end+0xff005b08>
    64ac:	05adc83a 	sub	r22,zero,r22
    64b0:	dd800815 	stw	r22,32(sp)
    64b4:	002d883a 	mov	r22,zero
    64b8:	003d8e06 	br	5af4 <__alt_data_end+0xff005af4>
    64bc:	d9000517 	ldw	r4,20(sp)
    64c0:	000e4740 	call	e474 <__floatsidf>
    64c4:	100d883a 	mov	r6,r2
    64c8:	180f883a 	mov	r7,r3
    64cc:	a009883a 	mov	r4,r20
    64d0:	880b883a 	mov	r5,r17
    64d4:	000d1880 	call	d188 <__eqdf2>
    64d8:	103d7126 	beq	r2,zero,5aa0 <__alt_data_end+0xff005aa0>
    64dc:	d9c00517 	ldw	r7,20(sp)
    64e0:	39ffffc4 	addi	r7,r7,-1
    64e4:	d9c00515 	stw	r7,20(sp)
    64e8:	003d6d06 	br	5aa0 <__alt_data_end+0xff005aa0>
    64ec:	dd400a17 	ldw	r21,40(sp)
    64f0:	dd000817 	ldw	r20,32(sp)
    64f4:	0023883a 	mov	r17,zero
    64f8:	003f4806 	br	621c <__alt_data_end+0xff00621c>
    64fc:	10e3c83a 	sub	r17,r2,r3
    6500:	9448983a 	sll	r4,r18,r17
    6504:	003d3206 	br	59d0 <__alt_data_end+0xff0059d0>
    6508:	d8000e15 	stw	zero,56(sp)
    650c:	003d7506 	br	5ae4 <__alt_data_end+0xff005ae4>
    6510:	b005883a 	mov	r2,r22
    6514:	003f4506 	br	622c <__alt_data_end+0xff00622c>
    6518:	dc000915 	stw	r16,36(sp)
    651c:	d9800a17 	ldw	r6,40(sp)
    6520:	d9400917 	ldw	r5,36(sp)
    6524:	e009883a 	mov	r4,fp
    6528:	0008d040 	call	8d04 <__pow5mult>
    652c:	1021883a 	mov	r16,r2
    6530:	003f5a06 	br	629c <__alt_data_end+0xff00629c>
    6534:	01c00044 	movi	r7,1
    6538:	d9c00b15 	stw	r7,44(sp)
    653c:	d8802217 	ldw	r2,136(sp)
    6540:	0081280e 	bge	zero,r2,69e4 <_dtoa_r+0x11b0>
    6544:	100d883a 	mov	r6,r2
    6548:	1021883a 	mov	r16,r2
    654c:	d8800c15 	stw	r2,48(sp)
    6550:	d8800615 	stw	r2,24(sp)
    6554:	003d8806 	br	5b78 <__alt_data_end+0xff005b78>
    6558:	d8800617 	ldw	r2,24(sp)
    655c:	00be9b16 	blt	zero,r2,5fcc <__alt_data_end+0xff005fcc>
    6560:	10010f1e 	bne	r2,zero,69a0 <_dtoa_r+0x116c>
    6564:	880b883a 	mov	r5,r17
    6568:	000d883a 	mov	r6,zero
    656c:	01d00534 	movhi	r7,16404
    6570:	8009883a 	mov	r4,r16
    6574:	000d3e00 	call	d3e0 <__muldf3>
    6578:	900d883a 	mov	r6,r18
    657c:	980f883a 	mov	r7,r19
    6580:	1009883a 	mov	r4,r2
    6584:	180b883a 	mov	r5,r3
    6588:	000d2100 	call	d210 <__gedf2>
    658c:	002b883a 	mov	r21,zero
    6590:	0023883a 	mov	r17,zero
    6594:	1000bf16 	blt	r2,zero,6894 <_dtoa_r+0x1060>
    6598:	d9802217 	ldw	r6,136(sp)
    659c:	ddc00717 	ldw	r23,28(sp)
    65a0:	018c303a 	nor	r6,zero,r6
    65a4:	d9800515 	stw	r6,20(sp)
    65a8:	a80b883a 	mov	r5,r21
    65ac:	e009883a 	mov	r4,fp
    65b0:	000876c0 	call	876c <_Bfree>
    65b4:	883e4926 	beq	r17,zero,5edc <__alt_data_end+0xff005edc>
    65b8:	003fad06 	br	6470 <__alt_data_end+0xff006470>
    65bc:	d9c01117 	ldw	r7,68(sp)
    65c0:	3801bc26 	beq	r7,zero,6cb4 <_dtoa_r+0x1480>
    65c4:	10810cc4 	addi	r2,r2,1075
    65c8:	dd400a17 	ldw	r21,40(sp)
    65cc:	dd000817 	ldw	r20,32(sp)
    65d0:	003f0a06 	br	61fc <__alt_data_end+0xff0061fc>
    65d4:	00800704 	movi	r2,28
    65d8:	d9000817 	ldw	r4,32(sp)
    65dc:	a0a9883a 	add	r20,r20,r2
    65e0:	b0ad883a 	add	r22,r22,r2
    65e4:	2089883a 	add	r4,r4,r2
    65e8:	d9000815 	stw	r4,32(sp)
    65ec:	003f5106 	br	6334 <__alt_data_end+0xff006334>
    65f0:	d8c00317 	ldw	r3,12(sp)
    65f4:	b8c1fc0e 	bge	r23,r3,6de8 <_dtoa_r+0x15b4>
    65f8:	0027883a 	mov	r19,zero
    65fc:	b805883a 	mov	r2,r23
    6600:	003f3e06 	br	62fc <__alt_data_end+0xff0062fc>
    6604:	880b883a 	mov	r5,r17
    6608:	e009883a 	mov	r4,fp
    660c:	000f883a 	mov	r7,zero
    6610:	01800284 	movi	r6,10
    6614:	00087940 	call	8794 <__multadd>
    6618:	d9000c17 	ldw	r4,48(sp)
    661c:	1023883a 	mov	r17,r2
    6620:	0102040e 	bge	zero,r4,6e34 <_dtoa_r+0x1600>
    6624:	d9000615 	stw	r4,24(sp)
    6628:	0500050e 	bge	zero,r20,6640 <_dtoa_r+0xe0c>
    662c:	880b883a 	mov	r5,r17
    6630:	a00d883a 	mov	r6,r20
    6634:	e009883a 	mov	r4,fp
    6638:	0008e440 	call	8e44 <__lshift>
    663c:	1023883a 	mov	r17,r2
    6640:	9801241e 	bne	r19,zero,6ad4 <_dtoa_r+0x12a0>
    6644:	8829883a 	mov	r20,r17
    6648:	d9000617 	ldw	r4,24(sp)
    664c:	dcc00717 	ldw	r19,28(sp)
    6650:	9480004c 	andi	r18,r18,1
    6654:	20bfffc4 	addi	r2,r4,-1
    6658:	9885883a 	add	r2,r19,r2
    665c:	d8800415 	stw	r2,16(sp)
    6660:	dc800615 	stw	r18,24(sp)
    6664:	a80b883a 	mov	r5,r21
    6668:	8009883a 	mov	r4,r16
    666c:	00056340 	call	5634 <quorem>
    6670:	880b883a 	mov	r5,r17
    6674:	8009883a 	mov	r4,r16
    6678:	102f883a 	mov	r23,r2
    667c:	0008f8c0 	call	8f8c <__mcmp>
    6680:	a80b883a 	mov	r5,r21
    6684:	a00d883a 	mov	r6,r20
    6688:	e009883a 	mov	r4,fp
    668c:	102d883a 	mov	r22,r2
    6690:	0008fec0 	call	8fec <__mdiff>
    6694:	1007883a 	mov	r3,r2
    6698:	10800317 	ldw	r2,12(r2)
    669c:	bc800c04 	addi	r18,r23,48
    66a0:	180b883a 	mov	r5,r3
    66a4:	10004e1e 	bne	r2,zero,67e0 <_dtoa_r+0xfac>
    66a8:	8009883a 	mov	r4,r16
    66ac:	d8c01615 	stw	r3,88(sp)
    66b0:	0008f8c0 	call	8f8c <__mcmp>
    66b4:	d8c01617 	ldw	r3,88(sp)
    66b8:	e009883a 	mov	r4,fp
    66bc:	d8801615 	stw	r2,88(sp)
    66c0:	180b883a 	mov	r5,r3
    66c4:	000876c0 	call	876c <_Bfree>
    66c8:	d8801617 	ldw	r2,88(sp)
    66cc:	1000041e 	bne	r2,zero,66e0 <_dtoa_r+0xeac>
    66d0:	d9800317 	ldw	r6,12(sp)
    66d4:	3000021e 	bne	r6,zero,66e0 <_dtoa_r+0xeac>
    66d8:	d8c00617 	ldw	r3,24(sp)
    66dc:	18003726 	beq	r3,zero,67bc <_dtoa_r+0xf88>
    66e0:	b0002016 	blt	r22,zero,6764 <_dtoa_r+0xf30>
    66e4:	b000041e 	bne	r22,zero,66f8 <_dtoa_r+0xec4>
    66e8:	d9000317 	ldw	r4,12(sp)
    66ec:	2000021e 	bne	r4,zero,66f8 <_dtoa_r+0xec4>
    66f0:	d8c00617 	ldw	r3,24(sp)
    66f4:	18001b26 	beq	r3,zero,6764 <_dtoa_r+0xf30>
    66f8:	00810716 	blt	zero,r2,6b18 <_dtoa_r+0x12e4>
    66fc:	d8c00417 	ldw	r3,16(sp)
    6700:	9d800044 	addi	r22,r19,1
    6704:	9c800005 	stb	r18,0(r19)
    6708:	b02f883a 	mov	r23,r22
    670c:	98c10626 	beq	r19,r3,6b28 <_dtoa_r+0x12f4>
    6710:	800b883a 	mov	r5,r16
    6714:	000f883a 	mov	r7,zero
    6718:	01800284 	movi	r6,10
    671c:	e009883a 	mov	r4,fp
    6720:	00087940 	call	8794 <__multadd>
    6724:	1021883a 	mov	r16,r2
    6728:	000f883a 	mov	r7,zero
    672c:	01800284 	movi	r6,10
    6730:	880b883a 	mov	r5,r17
    6734:	e009883a 	mov	r4,fp
    6738:	8d002526 	beq	r17,r20,67d0 <_dtoa_r+0xf9c>
    673c:	00087940 	call	8794 <__multadd>
    6740:	a00b883a 	mov	r5,r20
    6744:	000f883a 	mov	r7,zero
    6748:	01800284 	movi	r6,10
    674c:	e009883a 	mov	r4,fp
    6750:	1023883a 	mov	r17,r2
    6754:	00087940 	call	8794 <__multadd>
    6758:	1029883a 	mov	r20,r2
    675c:	b027883a 	mov	r19,r22
    6760:	003fc006 	br	6664 <__alt_data_end+0xff006664>
    6764:	9011883a 	mov	r8,r18
    6768:	00800e0e 	bge	zero,r2,67a4 <_dtoa_r+0xf70>
    676c:	800b883a 	mov	r5,r16
    6770:	01800044 	movi	r6,1
    6774:	e009883a 	mov	r4,fp
    6778:	da001715 	stw	r8,92(sp)
    677c:	0008e440 	call	8e44 <__lshift>
    6780:	a80b883a 	mov	r5,r21
    6784:	1009883a 	mov	r4,r2
    6788:	1021883a 	mov	r16,r2
    678c:	0008f8c0 	call	8f8c <__mcmp>
    6790:	da001717 	ldw	r8,92(sp)
    6794:	0081960e 	bge	zero,r2,6df0 <_dtoa_r+0x15bc>
    6798:	00800e44 	movi	r2,57
    679c:	40817026 	beq	r8,r2,6d60 <_dtoa_r+0x152c>
    67a0:	ba000c44 	addi	r8,r23,49
    67a4:	8825883a 	mov	r18,r17
    67a8:	9dc00044 	addi	r23,r19,1
    67ac:	9a000005 	stb	r8,0(r19)
    67b0:	a023883a 	mov	r17,r20
    67b4:	dc000915 	stw	r16,36(sp)
    67b8:	003f2406 	br	644c <__alt_data_end+0xff00644c>
    67bc:	00800e44 	movi	r2,57
    67c0:	9011883a 	mov	r8,r18
    67c4:	90816626 	beq	r18,r2,6d60 <_dtoa_r+0x152c>
    67c8:	05bff516 	blt	zero,r22,67a0 <__alt_data_end+0xff0067a0>
    67cc:	003ff506 	br	67a4 <__alt_data_end+0xff0067a4>
    67d0:	00087940 	call	8794 <__multadd>
    67d4:	1023883a 	mov	r17,r2
    67d8:	1029883a 	mov	r20,r2
    67dc:	003fdf06 	br	675c <__alt_data_end+0xff00675c>
    67e0:	e009883a 	mov	r4,fp
    67e4:	000876c0 	call	876c <_Bfree>
    67e8:	00800044 	movi	r2,1
    67ec:	003fbc06 	br	66e0 <__alt_data_end+0xff0066e0>
    67f0:	a80b883a 	mov	r5,r21
    67f4:	8009883a 	mov	r4,r16
    67f8:	0008f8c0 	call	8f8c <__mcmp>
    67fc:	103edb0e 	bge	r2,zero,636c <__alt_data_end+0xff00636c>
    6800:	800b883a 	mov	r5,r16
    6804:	000f883a 	mov	r7,zero
    6808:	01800284 	movi	r6,10
    680c:	e009883a 	mov	r4,fp
    6810:	00087940 	call	8794 <__multadd>
    6814:	1021883a 	mov	r16,r2
    6818:	d8800517 	ldw	r2,20(sp)
    681c:	d8c00b17 	ldw	r3,44(sp)
    6820:	10bfffc4 	addi	r2,r2,-1
    6824:	d8800515 	stw	r2,20(sp)
    6828:	183f761e 	bne	r3,zero,6604 <__alt_data_end+0xff006604>
    682c:	d9000c17 	ldw	r4,48(sp)
    6830:	0101730e 	bge	zero,r4,6e00 <_dtoa_r+0x15cc>
    6834:	d9000615 	stw	r4,24(sp)
    6838:	003ed006 	br	637c <__alt_data_end+0xff00637c>
    683c:	00800084 	movi	r2,2
    6840:	3081861e 	bne	r6,r2,6e5c <_dtoa_r+0x1628>
    6844:	d8000b15 	stw	zero,44(sp)
    6848:	003f3c06 	br	653c <__alt_data_end+0xff00653c>
    684c:	dc000917 	ldw	r16,36(sp)
    6850:	003e9206 	br	629c <__alt_data_end+0xff00629c>
    6854:	d9c00317 	ldw	r7,12(sp)
    6858:	00800084 	movi	r2,2
    685c:	11fec50e 	bge	r2,r7,6374 <__alt_data_end+0xff006374>
    6860:	d9000617 	ldw	r4,24(sp)
    6864:	20013c1e 	bne	r4,zero,6d58 <_dtoa_r+0x1524>
    6868:	a80b883a 	mov	r5,r21
    686c:	000f883a 	mov	r7,zero
    6870:	01800144 	movi	r6,5
    6874:	e009883a 	mov	r4,fp
    6878:	00087940 	call	8794 <__multadd>
    687c:	100b883a 	mov	r5,r2
    6880:	8009883a 	mov	r4,r16
    6884:	102b883a 	mov	r21,r2
    6888:	0008f8c0 	call	8f8c <__mcmp>
    688c:	dc000915 	stw	r16,36(sp)
    6890:	00bf410e 	bge	zero,r2,6598 <__alt_data_end+0xff006598>
    6894:	d9c00717 	ldw	r7,28(sp)
    6898:	00800c44 	movi	r2,49
    689c:	38800005 	stb	r2,0(r7)
    68a0:	d8800517 	ldw	r2,20(sp)
    68a4:	3dc00044 	addi	r23,r7,1
    68a8:	10800044 	addi	r2,r2,1
    68ac:	d8800515 	stw	r2,20(sp)
    68b0:	003f3d06 	br	65a8 <__alt_data_end+0xff0065a8>
    68b4:	d9800517 	ldw	r6,20(sp)
    68b8:	d9c00717 	ldw	r7,28(sp)
    68bc:	00800c44 	movi	r2,49
    68c0:	31800044 	addi	r6,r6,1
    68c4:	d9800515 	stw	r6,20(sp)
    68c8:	38800005 	stb	r2,0(r7)
    68cc:	003edf06 	br	644c <__alt_data_end+0xff00644c>
    68d0:	d8000b15 	stw	zero,44(sp)
    68d4:	003c9f06 	br	5b54 <__alt_data_end+0xff005b54>
    68d8:	903e7e1e 	bne	r18,zero,62d4 <__alt_data_end+0xff0062d4>
    68dc:	00800434 	movhi	r2,16
    68e0:	10bfffc4 	addi	r2,r2,-1
    68e4:	9884703a 	and	r2,r19,r2
    68e8:	1000ea1e 	bne	r2,zero,6c94 <_dtoa_r+0x1460>
    68ec:	9cdffc2c 	andhi	r19,r19,32752
    68f0:	9800e826 	beq	r19,zero,6c94 <_dtoa_r+0x1460>
    68f4:	d9c00817 	ldw	r7,32(sp)
    68f8:	b5800044 	addi	r22,r22,1
    68fc:	04c00044 	movi	r19,1
    6900:	39c00044 	addi	r7,r7,1
    6904:	d9c00815 	stw	r7,32(sp)
    6908:	d8800d17 	ldw	r2,52(sp)
    690c:	103e721e 	bne	r2,zero,62d8 <__alt_data_end+0xff0062d8>
    6910:	00800044 	movi	r2,1
    6914:	003e7906 	br	62fc <__alt_data_end+0xff0062fc>
    6918:	8009883a 	mov	r4,r16
    691c:	000e4740 	call	e474 <__floatsidf>
    6920:	d9800f17 	ldw	r6,60(sp)
    6924:	d9c01017 	ldw	r7,64(sp)
    6928:	1009883a 	mov	r4,r2
    692c:	180b883a 	mov	r5,r3
    6930:	000d3e00 	call	d3e0 <__muldf3>
    6934:	000d883a 	mov	r6,zero
    6938:	01d00734 	movhi	r7,16412
    693c:	1009883a 	mov	r4,r2
    6940:	180b883a 	mov	r5,r3
    6944:	000c8dc0 	call	c8dc <__adddf3>
    6948:	047f3034 	movhi	r17,64704
    694c:	1021883a 	mov	r16,r2
    6950:	1c63883a 	add	r17,r3,r17
    6954:	d9000f17 	ldw	r4,60(sp)
    6958:	d9401017 	ldw	r5,64(sp)
    695c:	000d883a 	mov	r6,zero
    6960:	01d00534 	movhi	r7,16404
    6964:	000daf80 	call	daf8 <__subdf3>
    6968:	800d883a 	mov	r6,r16
    696c:	880f883a 	mov	r7,r17
    6970:	1009883a 	mov	r4,r2
    6974:	180b883a 	mov	r5,r3
    6978:	102b883a 	mov	r21,r2
    697c:	1829883a 	mov	r20,r3
    6980:	000d2100 	call	d210 <__gedf2>
    6984:	00806c16 	blt	zero,r2,6b38 <_dtoa_r+0x1304>
    6988:	89e0003c 	xorhi	r7,r17,32768
    698c:	800d883a 	mov	r6,r16
    6990:	a809883a 	mov	r4,r21
    6994:	a00b883a 	mov	r5,r20
    6998:	000d2ec0 	call	d2ec <__ledf2>
    699c:	103d7e0e 	bge	r2,zero,5f98 <__alt_data_end+0xff005f98>
    69a0:	002b883a 	mov	r21,zero
    69a4:	0023883a 	mov	r17,zero
    69a8:	003efb06 	br	6598 <__alt_data_end+0xff006598>
    69ac:	d8800717 	ldw	r2,28(sp)
    69b0:	003bd006 	br	58f4 <__alt_data_end+0xff0058f4>
    69b4:	d9000a17 	ldw	r4,40(sp)
    69b8:	d9800d17 	ldw	r6,52(sp)
    69bc:	dd400a15 	stw	r21,40(sp)
    69c0:	a905c83a 	sub	r2,r21,r4
    69c4:	308d883a 	add	r6,r6,r2
    69c8:	d9800d15 	stw	r6,52(sp)
    69cc:	002b883a 	mov	r21,zero
    69d0:	003e0606 	br	61ec <__alt_data_end+0xff0061ec>
    69d4:	9023883a 	mov	r17,r18
    69d8:	9829883a 	mov	r20,r19
    69dc:	04000084 	movi	r16,2
    69e0:	003c9206 	br	5c2c <__alt_data_end+0xff005c2c>
    69e4:	04000044 	movi	r16,1
    69e8:	dc000c15 	stw	r16,48(sp)
    69ec:	dc000615 	stw	r16,24(sp)
    69f0:	dc002215 	stw	r16,136(sp)
    69f4:	e0001115 	stw	zero,68(fp)
    69f8:	000b883a 	mov	r5,zero
    69fc:	003c6906 	br	5ba4 <__alt_data_end+0xff005ba4>
    6a00:	3021883a 	mov	r16,r6
    6a04:	003ffb06 	br	69f4 <__alt_data_end+0xff0069f4>
    6a08:	1000021e 	bne	r2,zero,6a14 <_dtoa_r+0x11e0>
    6a0c:	4200004c 	andi	r8,r8,1
    6a10:	403e7d1e 	bne	r8,zero,6408 <__alt_data_end+0xff006408>
    6a14:	01000c04 	movi	r4,48
    6a18:	00000106 	br	6a20 <_dtoa_r+0x11ec>
    6a1c:	102f883a 	mov	r23,r2
    6a20:	b8bfffc4 	addi	r2,r23,-1
    6a24:	10c00007 	ldb	r3,0(r2)
    6a28:	193ffc26 	beq	r3,r4,6a1c <__alt_data_end+0xff006a1c>
    6a2c:	003e8706 	br	644c <__alt_data_end+0xff00644c>
    6a30:	d8800517 	ldw	r2,20(sp)
    6a34:	00a3c83a 	sub	r17,zero,r2
    6a38:	8800a426 	beq	r17,zero,6ccc <_dtoa_r+0x1498>
    6a3c:	888003cc 	andi	r2,r17,15
    6a40:	100490fa 	slli	r2,r2,3
    6a44:	00c00074 	movhi	r3,1
    6a48:	18c59804 	addi	r3,r3,5728
    6a4c:	1885883a 	add	r2,r3,r2
    6a50:	11800017 	ldw	r6,0(r2)
    6a54:	11c00117 	ldw	r7,4(r2)
    6a58:	9009883a 	mov	r4,r18
    6a5c:	980b883a 	mov	r5,r19
    6a60:	8823d13a 	srai	r17,r17,4
    6a64:	000d3e00 	call	d3e0 <__muldf3>
    6a68:	d8800f15 	stw	r2,60(sp)
    6a6c:	d8c01015 	stw	r3,64(sp)
    6a70:	8800e826 	beq	r17,zero,6e14 <_dtoa_r+0x15e0>
    6a74:	05000074 	movhi	r20,1
    6a78:	a5058e04 	addi	r20,r20,5688
    6a7c:	04000084 	movi	r16,2
    6a80:	8980004c 	andi	r6,r17,1
    6a84:	1009883a 	mov	r4,r2
    6a88:	8823d07a 	srai	r17,r17,1
    6a8c:	180b883a 	mov	r5,r3
    6a90:	30000426 	beq	r6,zero,6aa4 <_dtoa_r+0x1270>
    6a94:	a1800017 	ldw	r6,0(r20)
    6a98:	a1c00117 	ldw	r7,4(r20)
    6a9c:	84000044 	addi	r16,r16,1
    6aa0:	000d3e00 	call	d3e0 <__muldf3>
    6aa4:	a5000204 	addi	r20,r20,8
    6aa8:	883ff51e 	bne	r17,zero,6a80 <__alt_data_end+0xff006a80>
    6aac:	d8800f15 	stw	r2,60(sp)
    6ab0:	d8c01015 	stw	r3,64(sp)
    6ab4:	003c7606 	br	5c90 <__alt_data_end+0xff005c90>
    6ab8:	00c00c04 	movi	r3,48
    6abc:	10c00005 	stb	r3,0(r2)
    6ac0:	d8c00517 	ldw	r3,20(sp)
    6ac4:	bd3fffc3 	ldbu	r20,-1(r23)
    6ac8:	18c00044 	addi	r3,r3,1
    6acc:	d8c00515 	stw	r3,20(sp)
    6ad0:	003db906 	br	61b8 <__alt_data_end+0xff0061b8>
    6ad4:	89400117 	ldw	r5,4(r17)
    6ad8:	e009883a 	mov	r4,fp
    6adc:	00086c40 	call	86c4 <_Balloc>
    6ae0:	89800417 	ldw	r6,16(r17)
    6ae4:	89400304 	addi	r5,r17,12
    6ae8:	11000304 	addi	r4,r2,12
    6aec:	31800084 	addi	r6,r6,2
    6af0:	318d883a 	add	r6,r6,r6
    6af4:	318d883a 	add	r6,r6,r6
    6af8:	1027883a 	mov	r19,r2
    6afc:	00082f80 	call	82f8 <memcpy>
    6b00:	01800044 	movi	r6,1
    6b04:	980b883a 	mov	r5,r19
    6b08:	e009883a 	mov	r4,fp
    6b0c:	0008e440 	call	8e44 <__lshift>
    6b10:	1029883a 	mov	r20,r2
    6b14:	003ecc06 	br	6648 <__alt_data_end+0xff006648>
    6b18:	00800e44 	movi	r2,57
    6b1c:	90809026 	beq	r18,r2,6d60 <_dtoa_r+0x152c>
    6b20:	92000044 	addi	r8,r18,1
    6b24:	003f1f06 	br	67a4 <__alt_data_end+0xff0067a4>
    6b28:	9011883a 	mov	r8,r18
    6b2c:	8825883a 	mov	r18,r17
    6b30:	a023883a 	mov	r17,r20
    6b34:	003e2906 	br	63dc <__alt_data_end+0xff0063dc>
    6b38:	002b883a 	mov	r21,zero
    6b3c:	0023883a 	mov	r17,zero
    6b40:	003f5406 	br	6894 <__alt_data_end+0xff006894>
    6b44:	61bfffc4 	addi	r6,r12,-1
    6b48:	300490fa 	slli	r2,r6,3
    6b4c:	00c00074 	movhi	r3,1
    6b50:	18c59804 	addi	r3,r3,5728
    6b54:	1885883a 	add	r2,r3,r2
    6b58:	11000017 	ldw	r4,0(r2)
    6b5c:	11400117 	ldw	r5,4(r2)
    6b60:	d8800717 	ldw	r2,28(sp)
    6b64:	880f883a 	mov	r7,r17
    6b68:	d9801215 	stw	r6,72(sp)
    6b6c:	800d883a 	mov	r6,r16
    6b70:	db001615 	stw	r12,88(sp)
    6b74:	15c00044 	addi	r23,r2,1
    6b78:	000d3e00 	call	d3e0 <__muldf3>
    6b7c:	d9401017 	ldw	r5,64(sp)
    6b80:	d9000f17 	ldw	r4,60(sp)
    6b84:	d8c01515 	stw	r3,84(sp)
    6b88:	d8801415 	stw	r2,80(sp)
    6b8c:	000e3f40 	call	e3f4 <__fixdfsi>
    6b90:	1009883a 	mov	r4,r2
    6b94:	1021883a 	mov	r16,r2
    6b98:	000e4740 	call	e474 <__floatsidf>
    6b9c:	d9000f17 	ldw	r4,60(sp)
    6ba0:	d9401017 	ldw	r5,64(sp)
    6ba4:	100d883a 	mov	r6,r2
    6ba8:	180f883a 	mov	r7,r3
    6bac:	000daf80 	call	daf8 <__subdf3>
    6bb0:	1829883a 	mov	r20,r3
    6bb4:	d8c00717 	ldw	r3,28(sp)
    6bb8:	84000c04 	addi	r16,r16,48
    6bbc:	1023883a 	mov	r17,r2
    6bc0:	1c000005 	stb	r16,0(r3)
    6bc4:	db001617 	ldw	r12,88(sp)
    6bc8:	00800044 	movi	r2,1
    6bcc:	60802226 	beq	r12,r2,6c58 <_dtoa_r+0x1424>
    6bd0:	d9c00717 	ldw	r7,28(sp)
    6bd4:	8805883a 	mov	r2,r17
    6bd8:	b82b883a 	mov	r21,r23
    6bdc:	3b19883a 	add	r12,r7,r12
    6be0:	6023883a 	mov	r17,r12
    6be4:	a007883a 	mov	r3,r20
    6be8:	dc800f15 	stw	r18,60(sp)
    6bec:	000d883a 	mov	r6,zero
    6bf0:	01d00934 	movhi	r7,16420
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	180b883a 	mov	r5,r3
    6bfc:	000d3e00 	call	d3e0 <__muldf3>
    6c00:	180b883a 	mov	r5,r3
    6c04:	1009883a 	mov	r4,r2
    6c08:	1829883a 	mov	r20,r3
    6c0c:	1025883a 	mov	r18,r2
    6c10:	000e3f40 	call	e3f4 <__fixdfsi>
    6c14:	1009883a 	mov	r4,r2
    6c18:	1021883a 	mov	r16,r2
    6c1c:	000e4740 	call	e474 <__floatsidf>
    6c20:	100d883a 	mov	r6,r2
    6c24:	180f883a 	mov	r7,r3
    6c28:	9009883a 	mov	r4,r18
    6c2c:	a00b883a 	mov	r5,r20
    6c30:	84000c04 	addi	r16,r16,48
    6c34:	000daf80 	call	daf8 <__subdf3>
    6c38:	ad400044 	addi	r21,r21,1
    6c3c:	ac3fffc5 	stb	r16,-1(r21)
    6c40:	ac7fea1e 	bne	r21,r17,6bec <__alt_data_end+0xff006bec>
    6c44:	1023883a 	mov	r17,r2
    6c48:	d8801217 	ldw	r2,72(sp)
    6c4c:	dc800f17 	ldw	r18,60(sp)
    6c50:	1829883a 	mov	r20,r3
    6c54:	b8af883a 	add	r23,r23,r2
    6c58:	d9001417 	ldw	r4,80(sp)
    6c5c:	d9401517 	ldw	r5,84(sp)
    6c60:	000d883a 	mov	r6,zero
    6c64:	01cff834 	movhi	r7,16352
    6c68:	000c8dc0 	call	c8dc <__adddf3>
    6c6c:	880d883a 	mov	r6,r17
    6c70:	a00f883a 	mov	r7,r20
    6c74:	1009883a 	mov	r4,r2
    6c78:	180b883a 	mov	r5,r3
    6c7c:	000d2ec0 	call	d2ec <__ledf2>
    6c80:	10003e0e 	bge	r2,zero,6d7c <_dtoa_r+0x1548>
    6c84:	d9001317 	ldw	r4,76(sp)
    6c88:	bd3fffc3 	ldbu	r20,-1(r23)
    6c8c:	d9000515 	stw	r4,20(sp)
    6c90:	003d3b06 	br	6180 <__alt_data_end+0xff006180>
    6c94:	0027883a 	mov	r19,zero
    6c98:	003f1b06 	br	6908 <__alt_data_end+0xff006908>
    6c9c:	d8800817 	ldw	r2,32(sp)
    6ca0:	11e9c83a 	sub	r20,r2,r7
    6ca4:	0005883a 	mov	r2,zero
    6ca8:	003d5406 	br	61fc <__alt_data_end+0xff0061fc>
    6cac:	00800044 	movi	r2,1
    6cb0:	003dc706 	br	63d0 <__alt_data_end+0xff0063d0>
    6cb4:	d8c00217 	ldw	r3,8(sp)
    6cb8:	00800d84 	movi	r2,54
    6cbc:	dd400a17 	ldw	r21,40(sp)
    6cc0:	10c5c83a 	sub	r2,r2,r3
    6cc4:	dd000817 	ldw	r20,32(sp)
    6cc8:	003d4c06 	br	61fc <__alt_data_end+0xff0061fc>
    6ccc:	dc800f15 	stw	r18,60(sp)
    6cd0:	dcc01015 	stw	r19,64(sp)
    6cd4:	04000084 	movi	r16,2
    6cd8:	003bed06 	br	5c90 <__alt_data_end+0xff005c90>
    6cdc:	d9000617 	ldw	r4,24(sp)
    6ce0:	203f0d26 	beq	r4,zero,6918 <__alt_data_end+0xff006918>
    6ce4:	d9800c17 	ldw	r6,48(sp)
    6ce8:	01bcab0e 	bge	zero,r6,5f98 <__alt_data_end+0xff005f98>
    6cec:	d9401017 	ldw	r5,64(sp)
    6cf0:	d9000f17 	ldw	r4,60(sp)
    6cf4:	000d883a 	mov	r6,zero
    6cf8:	01d00934 	movhi	r7,16420
    6cfc:	000d3e00 	call	d3e0 <__muldf3>
    6d00:	81000044 	addi	r4,r16,1
    6d04:	d8800f15 	stw	r2,60(sp)
    6d08:	d8c01015 	stw	r3,64(sp)
    6d0c:	000e4740 	call	e474 <__floatsidf>
    6d10:	d9800f17 	ldw	r6,60(sp)
    6d14:	d9c01017 	ldw	r7,64(sp)
    6d18:	1009883a 	mov	r4,r2
    6d1c:	180b883a 	mov	r5,r3
    6d20:	000d3e00 	call	d3e0 <__muldf3>
    6d24:	01d00734 	movhi	r7,16412
    6d28:	000d883a 	mov	r6,zero
    6d2c:	1009883a 	mov	r4,r2
    6d30:	180b883a 	mov	r5,r3
    6d34:	000c8dc0 	call	c8dc <__adddf3>
    6d38:	d9c00517 	ldw	r7,20(sp)
    6d3c:	047f3034 	movhi	r17,64704
    6d40:	1021883a 	mov	r16,r2
    6d44:	39ffffc4 	addi	r7,r7,-1
    6d48:	d9c01315 	stw	r7,76(sp)
    6d4c:	1c63883a 	add	r17,r3,r17
    6d50:	db000c17 	ldw	r12,48(sp)
    6d54:	003bea06 	br	5d00 <__alt_data_end+0xff005d00>
    6d58:	dc000915 	stw	r16,36(sp)
    6d5c:	003e0e06 	br	6598 <__alt_data_end+0xff006598>
    6d60:	01000e44 	movi	r4,57
    6d64:	8825883a 	mov	r18,r17
    6d68:	9dc00044 	addi	r23,r19,1
    6d6c:	99000005 	stb	r4,0(r19)
    6d70:	a023883a 	mov	r17,r20
    6d74:	dc000915 	stw	r16,36(sp)
    6d78:	003da406 	br	640c <__alt_data_end+0xff00640c>
    6d7c:	d9801417 	ldw	r6,80(sp)
    6d80:	d9c01517 	ldw	r7,84(sp)
    6d84:	0009883a 	mov	r4,zero
    6d88:	014ff834 	movhi	r5,16352
    6d8c:	000daf80 	call	daf8 <__subdf3>
    6d90:	880d883a 	mov	r6,r17
    6d94:	a00f883a 	mov	r7,r20
    6d98:	1009883a 	mov	r4,r2
    6d9c:	180b883a 	mov	r5,r3
    6da0:	000d2100 	call	d210 <__gedf2>
    6da4:	00bc7c0e 	bge	zero,r2,5f98 <__alt_data_end+0xff005f98>
    6da8:	01000c04 	movi	r4,48
    6dac:	00000106 	br	6db4 <_dtoa_r+0x1580>
    6db0:	102f883a 	mov	r23,r2
    6db4:	b8bfffc4 	addi	r2,r23,-1
    6db8:	10c00007 	ldb	r3,0(r2)
    6dbc:	193ffc26 	beq	r3,r4,6db0 <__alt_data_end+0xff006db0>
    6dc0:	d9801317 	ldw	r6,76(sp)
    6dc4:	d9800515 	stw	r6,20(sp)
    6dc8:	003c4406 	br	5edc <__alt_data_end+0xff005edc>
    6dcc:	d9801317 	ldw	r6,76(sp)
    6dd0:	d9800515 	stw	r6,20(sp)
    6dd4:	003cea06 	br	6180 <__alt_data_end+0xff006180>
    6dd8:	dd800f17 	ldw	r22,60(sp)
    6ddc:	dcc01017 	ldw	r19,64(sp)
    6de0:	dc801217 	ldw	r18,72(sp)
    6de4:	003c6c06 	br	5f98 <__alt_data_end+0xff005f98>
    6de8:	903e031e 	bne	r18,zero,65f8 <__alt_data_end+0xff0065f8>
    6dec:	003ebb06 	br	68dc <__alt_data_end+0xff0068dc>
    6df0:	103e6c1e 	bne	r2,zero,67a4 <__alt_data_end+0xff0067a4>
    6df4:	4080004c 	andi	r2,r8,1
    6df8:	103e6a26 	beq	r2,zero,67a4 <__alt_data_end+0xff0067a4>
    6dfc:	003e6606 	br	6798 <__alt_data_end+0xff006798>
    6e00:	d8c00317 	ldw	r3,12(sp)
    6e04:	00800084 	movi	r2,2
    6e08:	10c02916 	blt	r2,r3,6eb0 <_dtoa_r+0x167c>
    6e0c:	d9000c17 	ldw	r4,48(sp)
    6e10:	003e8806 	br	6834 <__alt_data_end+0xff006834>
    6e14:	04000084 	movi	r16,2
    6e18:	003b9d06 	br	5c90 <__alt_data_end+0xff005c90>
    6e1c:	d9001317 	ldw	r4,76(sp)
    6e20:	d9000515 	stw	r4,20(sp)
    6e24:	003cd606 	br	6180 <__alt_data_end+0xff006180>
    6e28:	d8801317 	ldw	r2,76(sp)
    6e2c:	d8800515 	stw	r2,20(sp)
    6e30:	003c2a06 	br	5edc <__alt_data_end+0xff005edc>
    6e34:	d9800317 	ldw	r6,12(sp)
    6e38:	00800084 	movi	r2,2
    6e3c:	11801516 	blt	r2,r6,6e94 <_dtoa_r+0x1660>
    6e40:	d9c00c17 	ldw	r7,48(sp)
    6e44:	d9c00615 	stw	r7,24(sp)
    6e48:	003df706 	br	6628 <__alt_data_end+0xff006628>
    6e4c:	193d3926 	beq	r3,r4,6334 <__alt_data_end+0xff006334>
    6e50:	00c00f04 	movi	r3,60
    6e54:	1885c83a 	sub	r2,r3,r2
    6e58:	003ddf06 	br	65d8 <__alt_data_end+0xff0065d8>
    6e5c:	e009883a 	mov	r4,fp
    6e60:	e0001115 	stw	zero,68(fp)
    6e64:	000b883a 	mov	r5,zero
    6e68:	00086c40 	call	86c4 <_Balloc>
    6e6c:	d8800715 	stw	r2,28(sp)
    6e70:	d8c00717 	ldw	r3,28(sp)
    6e74:	00bfffc4 	movi	r2,-1
    6e78:	01000044 	movi	r4,1
    6e7c:	d8800c15 	stw	r2,48(sp)
    6e80:	e0c01015 	stw	r3,64(fp)
    6e84:	d9000b15 	stw	r4,44(sp)
    6e88:	d8800615 	stw	r2,24(sp)
    6e8c:	d8002215 	stw	zero,136(sp)
    6e90:	003c4106 	br	5f98 <__alt_data_end+0xff005f98>
    6e94:	d8c00c17 	ldw	r3,48(sp)
    6e98:	d8c00615 	stw	r3,24(sp)
    6e9c:	003e7006 	br	6860 <__alt_data_end+0xff006860>
    6ea0:	04400044 	movi	r17,1
    6ea4:	003b2006 	br	5b28 <__alt_data_end+0xff005b28>
    6ea8:	000b883a 	mov	r5,zero
    6eac:	003b3d06 	br	5ba4 <__alt_data_end+0xff005ba4>
    6eb0:	d8800c17 	ldw	r2,48(sp)
    6eb4:	d8800615 	stw	r2,24(sp)
    6eb8:	003e6906 	br	6860 <__alt_data_end+0xff006860>

00006ebc <__sflush_r>:
    6ebc:	2880030b 	ldhu	r2,12(r5)
    6ec0:	defffb04 	addi	sp,sp,-20
    6ec4:	dcc00315 	stw	r19,12(sp)
    6ec8:	dc400115 	stw	r17,4(sp)
    6ecc:	dfc00415 	stw	ra,16(sp)
    6ed0:	dc800215 	stw	r18,8(sp)
    6ed4:	dc000015 	stw	r16,0(sp)
    6ed8:	10c0020c 	andi	r3,r2,8
    6edc:	2823883a 	mov	r17,r5
    6ee0:	2027883a 	mov	r19,r4
    6ee4:	1800311e 	bne	r3,zero,6fac <__sflush_r+0xf0>
    6ee8:	28c00117 	ldw	r3,4(r5)
    6eec:	10820014 	ori	r2,r2,2048
    6ef0:	2880030d 	sth	r2,12(r5)
    6ef4:	00c04b0e 	bge	zero,r3,7024 <__sflush_r+0x168>
    6ef8:	8a000a17 	ldw	r8,40(r17)
    6efc:	40002326 	beq	r8,zero,6f8c <__sflush_r+0xd0>
    6f00:	9c000017 	ldw	r16,0(r19)
    6f04:	10c4000c 	andi	r3,r2,4096
    6f08:	98000015 	stw	zero,0(r19)
    6f0c:	18004826 	beq	r3,zero,7030 <__sflush_r+0x174>
    6f10:	89801417 	ldw	r6,80(r17)
    6f14:	10c0010c 	andi	r3,r2,4
    6f18:	18000626 	beq	r3,zero,6f34 <__sflush_r+0x78>
    6f1c:	88c00117 	ldw	r3,4(r17)
    6f20:	88800c17 	ldw	r2,48(r17)
    6f24:	30cdc83a 	sub	r6,r6,r3
    6f28:	10000226 	beq	r2,zero,6f34 <__sflush_r+0x78>
    6f2c:	88800f17 	ldw	r2,60(r17)
    6f30:	308dc83a 	sub	r6,r6,r2
    6f34:	89400717 	ldw	r5,28(r17)
    6f38:	000f883a 	mov	r7,zero
    6f3c:	9809883a 	mov	r4,r19
    6f40:	403ee83a 	callr	r8
    6f44:	00ffffc4 	movi	r3,-1
    6f48:	10c04426 	beq	r2,r3,705c <__sflush_r+0x1a0>
    6f4c:	88c0030b 	ldhu	r3,12(r17)
    6f50:	89000417 	ldw	r4,16(r17)
    6f54:	88000115 	stw	zero,4(r17)
    6f58:	197dffcc 	andi	r5,r3,63487
    6f5c:	8940030d 	sth	r5,12(r17)
    6f60:	89000015 	stw	r4,0(r17)
    6f64:	18c4000c 	andi	r3,r3,4096
    6f68:	18002c1e 	bne	r3,zero,701c <__sflush_r+0x160>
    6f6c:	89400c17 	ldw	r5,48(r17)
    6f70:	9c000015 	stw	r16,0(r19)
    6f74:	28000526 	beq	r5,zero,6f8c <__sflush_r+0xd0>
    6f78:	88801004 	addi	r2,r17,64
    6f7c:	28800226 	beq	r5,r2,6f88 <__sflush_r+0xcc>
    6f80:	9809883a 	mov	r4,r19
    6f84:	00076280 	call	7628 <_free_r>
    6f88:	88000c15 	stw	zero,48(r17)
    6f8c:	0005883a 	mov	r2,zero
    6f90:	dfc00417 	ldw	ra,16(sp)
    6f94:	dcc00317 	ldw	r19,12(sp)
    6f98:	dc800217 	ldw	r18,8(sp)
    6f9c:	dc400117 	ldw	r17,4(sp)
    6fa0:	dc000017 	ldw	r16,0(sp)
    6fa4:	dec00504 	addi	sp,sp,20
    6fa8:	f800283a 	ret
    6fac:	2c800417 	ldw	r18,16(r5)
    6fb0:	903ff626 	beq	r18,zero,6f8c <__alt_data_end+0xff006f8c>
    6fb4:	2c000017 	ldw	r16,0(r5)
    6fb8:	108000cc 	andi	r2,r2,3
    6fbc:	2c800015 	stw	r18,0(r5)
    6fc0:	84a1c83a 	sub	r16,r16,r18
    6fc4:	1000131e 	bne	r2,zero,7014 <__sflush_r+0x158>
    6fc8:	28800517 	ldw	r2,20(r5)
    6fcc:	88800215 	stw	r2,8(r17)
    6fd0:	04000316 	blt	zero,r16,6fe0 <__sflush_r+0x124>
    6fd4:	003fed06 	br	6f8c <__alt_data_end+0xff006f8c>
    6fd8:	90a5883a 	add	r18,r18,r2
    6fdc:	043feb0e 	bge	zero,r16,6f8c <__alt_data_end+0xff006f8c>
    6fe0:	88800917 	ldw	r2,36(r17)
    6fe4:	89400717 	ldw	r5,28(r17)
    6fe8:	800f883a 	mov	r7,r16
    6fec:	900d883a 	mov	r6,r18
    6ff0:	9809883a 	mov	r4,r19
    6ff4:	103ee83a 	callr	r2
    6ff8:	80a1c83a 	sub	r16,r16,r2
    6ffc:	00bff616 	blt	zero,r2,6fd8 <__alt_data_end+0xff006fd8>
    7000:	88c0030b 	ldhu	r3,12(r17)
    7004:	00bfffc4 	movi	r2,-1
    7008:	18c01014 	ori	r3,r3,64
    700c:	88c0030d 	sth	r3,12(r17)
    7010:	003fdf06 	br	6f90 <__alt_data_end+0xff006f90>
    7014:	0005883a 	mov	r2,zero
    7018:	003fec06 	br	6fcc <__alt_data_end+0xff006fcc>
    701c:	88801415 	stw	r2,80(r17)
    7020:	003fd206 	br	6f6c <__alt_data_end+0xff006f6c>
    7024:	28c00f17 	ldw	r3,60(r5)
    7028:	00ffb316 	blt	zero,r3,6ef8 <__alt_data_end+0xff006ef8>
    702c:	003fd706 	br	6f8c <__alt_data_end+0xff006f8c>
    7030:	89400717 	ldw	r5,28(r17)
    7034:	000d883a 	mov	r6,zero
    7038:	01c00044 	movi	r7,1
    703c:	9809883a 	mov	r4,r19
    7040:	403ee83a 	callr	r8
    7044:	100d883a 	mov	r6,r2
    7048:	00bfffc4 	movi	r2,-1
    704c:	30801426 	beq	r6,r2,70a0 <__sflush_r+0x1e4>
    7050:	8880030b 	ldhu	r2,12(r17)
    7054:	8a000a17 	ldw	r8,40(r17)
    7058:	003fae06 	br	6f14 <__alt_data_end+0xff006f14>
    705c:	98c00017 	ldw	r3,0(r19)
    7060:	183fba26 	beq	r3,zero,6f4c <__alt_data_end+0xff006f4c>
    7064:	01000744 	movi	r4,29
    7068:	19000626 	beq	r3,r4,7084 <__sflush_r+0x1c8>
    706c:	01000584 	movi	r4,22
    7070:	19000426 	beq	r3,r4,7084 <__sflush_r+0x1c8>
    7074:	88c0030b 	ldhu	r3,12(r17)
    7078:	18c01014 	ori	r3,r3,64
    707c:	88c0030d 	sth	r3,12(r17)
    7080:	003fc306 	br	6f90 <__alt_data_end+0xff006f90>
    7084:	8880030b 	ldhu	r2,12(r17)
    7088:	88c00417 	ldw	r3,16(r17)
    708c:	88000115 	stw	zero,4(r17)
    7090:	10bdffcc 	andi	r2,r2,63487
    7094:	8880030d 	sth	r2,12(r17)
    7098:	88c00015 	stw	r3,0(r17)
    709c:	003fb306 	br	6f6c <__alt_data_end+0xff006f6c>
    70a0:	98800017 	ldw	r2,0(r19)
    70a4:	103fea26 	beq	r2,zero,7050 <__alt_data_end+0xff007050>
    70a8:	00c00744 	movi	r3,29
    70ac:	10c00226 	beq	r2,r3,70b8 <__sflush_r+0x1fc>
    70b0:	00c00584 	movi	r3,22
    70b4:	10c0031e 	bne	r2,r3,70c4 <__sflush_r+0x208>
    70b8:	9c000015 	stw	r16,0(r19)
    70bc:	0005883a 	mov	r2,zero
    70c0:	003fb306 	br	6f90 <__alt_data_end+0xff006f90>
    70c4:	88c0030b 	ldhu	r3,12(r17)
    70c8:	3005883a 	mov	r2,r6
    70cc:	18c01014 	ori	r3,r3,64
    70d0:	88c0030d 	sth	r3,12(r17)
    70d4:	003fae06 	br	6f90 <__alt_data_end+0xff006f90>

000070d8 <_fflush_r>:
    70d8:	defffd04 	addi	sp,sp,-12
    70dc:	dc000115 	stw	r16,4(sp)
    70e0:	dfc00215 	stw	ra,8(sp)
    70e4:	2021883a 	mov	r16,r4
    70e8:	20000226 	beq	r4,zero,70f4 <_fflush_r+0x1c>
    70ec:	20800e17 	ldw	r2,56(r4)
    70f0:	10000c26 	beq	r2,zero,7124 <_fflush_r+0x4c>
    70f4:	2880030f 	ldh	r2,12(r5)
    70f8:	1000051e 	bne	r2,zero,7110 <_fflush_r+0x38>
    70fc:	0005883a 	mov	r2,zero
    7100:	dfc00217 	ldw	ra,8(sp)
    7104:	dc000117 	ldw	r16,4(sp)
    7108:	dec00304 	addi	sp,sp,12
    710c:	f800283a 	ret
    7110:	8009883a 	mov	r4,r16
    7114:	dfc00217 	ldw	ra,8(sp)
    7118:	dc000117 	ldw	r16,4(sp)
    711c:	dec00304 	addi	sp,sp,12
    7120:	0006ebc1 	jmpi	6ebc <__sflush_r>
    7124:	d9400015 	stw	r5,0(sp)
    7128:	00074b40 	call	74b4 <__sinit>
    712c:	d9400017 	ldw	r5,0(sp)
    7130:	003ff006 	br	70f4 <__alt_data_end+0xff0070f4>

00007134 <fflush>:
    7134:	20000526 	beq	r4,zero,714c <fflush+0x18>
    7138:	00800074 	movhi	r2,1
    713c:	108ccb04 	addi	r2,r2,13100
    7140:	200b883a 	mov	r5,r4
    7144:	11000017 	ldw	r4,0(r2)
    7148:	00070d81 	jmpi	70d8 <_fflush_r>
    714c:	00800074 	movhi	r2,1
    7150:	108cca04 	addi	r2,r2,13096
    7154:	11000017 	ldw	r4,0(r2)
    7158:	01400034 	movhi	r5,0
    715c:	295c3604 	addi	r5,r5,28888
    7160:	0007eb81 	jmpi	7eb8 <_fwalk_reent>

00007164 <__fp_unlock>:
    7164:	0005883a 	mov	r2,zero
    7168:	f800283a 	ret

0000716c <_cleanup_r>:
    716c:	01400074 	movhi	r5,1
    7170:	296d9c04 	addi	r5,r5,-18832
    7174:	0007eb81 	jmpi	7eb8 <_fwalk_reent>

00007178 <__sinit.part.1>:
    7178:	defff704 	addi	sp,sp,-36
    717c:	00c00034 	movhi	r3,0
    7180:	dfc00815 	stw	ra,32(sp)
    7184:	ddc00715 	stw	r23,28(sp)
    7188:	dd800615 	stw	r22,24(sp)
    718c:	dd400515 	stw	r21,20(sp)
    7190:	dd000415 	stw	r20,16(sp)
    7194:	dcc00315 	stw	r19,12(sp)
    7198:	dc800215 	stw	r18,8(sp)
    719c:	dc400115 	stw	r17,4(sp)
    71a0:	dc000015 	stw	r16,0(sp)
    71a4:	18dc5b04 	addi	r3,r3,29036
    71a8:	24000117 	ldw	r16,4(r4)
    71ac:	20c00f15 	stw	r3,60(r4)
    71b0:	2080bb04 	addi	r2,r4,748
    71b4:	00c000c4 	movi	r3,3
    71b8:	20c0b915 	stw	r3,740(r4)
    71bc:	2080ba15 	stw	r2,744(r4)
    71c0:	2000b815 	stw	zero,736(r4)
    71c4:	05c00204 	movi	r23,8
    71c8:	00800104 	movi	r2,4
    71cc:	2025883a 	mov	r18,r4
    71d0:	b80d883a 	mov	r6,r23
    71d4:	81001704 	addi	r4,r16,92
    71d8:	000b883a 	mov	r5,zero
    71dc:	80000015 	stw	zero,0(r16)
    71e0:	80000115 	stw	zero,4(r16)
    71e4:	80000215 	stw	zero,8(r16)
    71e8:	8080030d 	sth	r2,12(r16)
    71ec:	80001915 	stw	zero,100(r16)
    71f0:	8000038d 	sth	zero,14(r16)
    71f4:	80000415 	stw	zero,16(r16)
    71f8:	80000515 	stw	zero,20(r16)
    71fc:	80000615 	stw	zero,24(r16)
    7200:	000859c0 	call	859c <memset>
    7204:	05800074 	movhi	r22,1
    7208:	94400217 	ldw	r17,8(r18)
    720c:	05400074 	movhi	r21,1
    7210:	05000074 	movhi	r20,1
    7214:	04c00074 	movhi	r19,1
    7218:	b5a72604 	addi	r22,r22,-25448
    721c:	ad673d04 	addi	r21,r21,-25356
    7220:	a5275c04 	addi	r20,r20,-25232
    7224:	9ce77304 	addi	r19,r19,-25140
    7228:	85800815 	stw	r22,32(r16)
    722c:	85400915 	stw	r21,36(r16)
    7230:	85000a15 	stw	r20,40(r16)
    7234:	84c00b15 	stw	r19,44(r16)
    7238:	84000715 	stw	r16,28(r16)
    723c:	00800284 	movi	r2,10
    7240:	8880030d 	sth	r2,12(r17)
    7244:	00800044 	movi	r2,1
    7248:	b80d883a 	mov	r6,r23
    724c:	89001704 	addi	r4,r17,92
    7250:	000b883a 	mov	r5,zero
    7254:	88000015 	stw	zero,0(r17)
    7258:	88000115 	stw	zero,4(r17)
    725c:	88000215 	stw	zero,8(r17)
    7260:	88001915 	stw	zero,100(r17)
    7264:	8880038d 	sth	r2,14(r17)
    7268:	88000415 	stw	zero,16(r17)
    726c:	88000515 	stw	zero,20(r17)
    7270:	88000615 	stw	zero,24(r17)
    7274:	000859c0 	call	859c <memset>
    7278:	94000317 	ldw	r16,12(r18)
    727c:	00800484 	movi	r2,18
    7280:	8c400715 	stw	r17,28(r17)
    7284:	8d800815 	stw	r22,32(r17)
    7288:	8d400915 	stw	r21,36(r17)
    728c:	8d000a15 	stw	r20,40(r17)
    7290:	8cc00b15 	stw	r19,44(r17)
    7294:	8080030d 	sth	r2,12(r16)
    7298:	00800084 	movi	r2,2
    729c:	80000015 	stw	zero,0(r16)
    72a0:	80000115 	stw	zero,4(r16)
    72a4:	80000215 	stw	zero,8(r16)
    72a8:	80001915 	stw	zero,100(r16)
    72ac:	8080038d 	sth	r2,14(r16)
    72b0:	80000415 	stw	zero,16(r16)
    72b4:	80000515 	stw	zero,20(r16)
    72b8:	80000615 	stw	zero,24(r16)
    72bc:	b80d883a 	mov	r6,r23
    72c0:	000b883a 	mov	r5,zero
    72c4:	81001704 	addi	r4,r16,92
    72c8:	000859c0 	call	859c <memset>
    72cc:	00800044 	movi	r2,1
    72d0:	84000715 	stw	r16,28(r16)
    72d4:	85800815 	stw	r22,32(r16)
    72d8:	85400915 	stw	r21,36(r16)
    72dc:	85000a15 	stw	r20,40(r16)
    72e0:	84c00b15 	stw	r19,44(r16)
    72e4:	90800e15 	stw	r2,56(r18)
    72e8:	dfc00817 	ldw	ra,32(sp)
    72ec:	ddc00717 	ldw	r23,28(sp)
    72f0:	dd800617 	ldw	r22,24(sp)
    72f4:	dd400517 	ldw	r21,20(sp)
    72f8:	dd000417 	ldw	r20,16(sp)
    72fc:	dcc00317 	ldw	r19,12(sp)
    7300:	dc800217 	ldw	r18,8(sp)
    7304:	dc400117 	ldw	r17,4(sp)
    7308:	dc000017 	ldw	r16,0(sp)
    730c:	dec00904 	addi	sp,sp,36
    7310:	f800283a 	ret

00007314 <__fp_lock>:
    7314:	0005883a 	mov	r2,zero
    7318:	f800283a 	ret

0000731c <__sfmoreglue>:
    731c:	defffc04 	addi	sp,sp,-16
    7320:	dc400115 	stw	r17,4(sp)
    7324:	2c7fffc4 	addi	r17,r5,-1
    7328:	8c401a24 	muli	r17,r17,104
    732c:	dc800215 	stw	r18,8(sp)
    7330:	2825883a 	mov	r18,r5
    7334:	89401d04 	addi	r5,r17,116
    7338:	dc000015 	stw	r16,0(sp)
    733c:	dfc00315 	stw	ra,12(sp)
    7340:	00027d80 	call	27d8 <_malloc_r>
    7344:	1021883a 	mov	r16,r2
    7348:	10000726 	beq	r2,zero,7368 <__sfmoreglue+0x4c>
    734c:	11000304 	addi	r4,r2,12
    7350:	10000015 	stw	zero,0(r2)
    7354:	14800115 	stw	r18,4(r2)
    7358:	11000215 	stw	r4,8(r2)
    735c:	89801a04 	addi	r6,r17,104
    7360:	000b883a 	mov	r5,zero
    7364:	000859c0 	call	859c <memset>
    7368:	8005883a 	mov	r2,r16
    736c:	dfc00317 	ldw	ra,12(sp)
    7370:	dc800217 	ldw	r18,8(sp)
    7374:	dc400117 	ldw	r17,4(sp)
    7378:	dc000017 	ldw	r16,0(sp)
    737c:	dec00404 	addi	sp,sp,16
    7380:	f800283a 	ret

00007384 <__sfp>:
    7384:	defffb04 	addi	sp,sp,-20
    7388:	dc000015 	stw	r16,0(sp)
    738c:	04000074 	movhi	r16,1
    7390:	840cca04 	addi	r16,r16,13096
    7394:	dcc00315 	stw	r19,12(sp)
    7398:	2027883a 	mov	r19,r4
    739c:	81000017 	ldw	r4,0(r16)
    73a0:	dfc00415 	stw	ra,16(sp)
    73a4:	dc800215 	stw	r18,8(sp)
    73a8:	20800e17 	ldw	r2,56(r4)
    73ac:	dc400115 	stw	r17,4(sp)
    73b0:	1000021e 	bne	r2,zero,73bc <__sfp+0x38>
    73b4:	00071780 	call	7178 <__sinit.part.1>
    73b8:	81000017 	ldw	r4,0(r16)
    73bc:	2480b804 	addi	r18,r4,736
    73c0:	047fffc4 	movi	r17,-1
    73c4:	91000117 	ldw	r4,4(r18)
    73c8:	94000217 	ldw	r16,8(r18)
    73cc:	213fffc4 	addi	r4,r4,-1
    73d0:	20000a16 	blt	r4,zero,73fc <__sfp+0x78>
    73d4:	8080030f 	ldh	r2,12(r16)
    73d8:	10000c26 	beq	r2,zero,740c <__sfp+0x88>
    73dc:	80c01d04 	addi	r3,r16,116
    73e0:	00000206 	br	73ec <__sfp+0x68>
    73e4:	18bfe60f 	ldh	r2,-104(r3)
    73e8:	10000826 	beq	r2,zero,740c <__sfp+0x88>
    73ec:	213fffc4 	addi	r4,r4,-1
    73f0:	1c3ffd04 	addi	r16,r3,-12
    73f4:	18c01a04 	addi	r3,r3,104
    73f8:	247ffa1e 	bne	r4,r17,73e4 <__alt_data_end+0xff0073e4>
    73fc:	90800017 	ldw	r2,0(r18)
    7400:	10001d26 	beq	r2,zero,7478 <__sfp+0xf4>
    7404:	1025883a 	mov	r18,r2
    7408:	003fee06 	br	73c4 <__alt_data_end+0xff0073c4>
    740c:	00bfffc4 	movi	r2,-1
    7410:	8080038d 	sth	r2,14(r16)
    7414:	00800044 	movi	r2,1
    7418:	8080030d 	sth	r2,12(r16)
    741c:	80001915 	stw	zero,100(r16)
    7420:	80000015 	stw	zero,0(r16)
    7424:	80000215 	stw	zero,8(r16)
    7428:	80000115 	stw	zero,4(r16)
    742c:	80000415 	stw	zero,16(r16)
    7430:	80000515 	stw	zero,20(r16)
    7434:	80000615 	stw	zero,24(r16)
    7438:	01800204 	movi	r6,8
    743c:	000b883a 	mov	r5,zero
    7440:	81001704 	addi	r4,r16,92
    7444:	000859c0 	call	859c <memset>
    7448:	8005883a 	mov	r2,r16
    744c:	80000c15 	stw	zero,48(r16)
    7450:	80000d15 	stw	zero,52(r16)
    7454:	80001115 	stw	zero,68(r16)
    7458:	80001215 	stw	zero,72(r16)
    745c:	dfc00417 	ldw	ra,16(sp)
    7460:	dcc00317 	ldw	r19,12(sp)
    7464:	dc800217 	ldw	r18,8(sp)
    7468:	dc400117 	ldw	r17,4(sp)
    746c:	dc000017 	ldw	r16,0(sp)
    7470:	dec00504 	addi	sp,sp,20
    7474:	f800283a 	ret
    7478:	01400104 	movi	r5,4
    747c:	9809883a 	mov	r4,r19
    7480:	000731c0 	call	731c <__sfmoreglue>
    7484:	90800015 	stw	r2,0(r18)
    7488:	103fde1e 	bne	r2,zero,7404 <__alt_data_end+0xff007404>
    748c:	00800304 	movi	r2,12
    7490:	98800015 	stw	r2,0(r19)
    7494:	0005883a 	mov	r2,zero
    7498:	003ff006 	br	745c <__alt_data_end+0xff00745c>

0000749c <_cleanup>:
    749c:	00800074 	movhi	r2,1
    74a0:	108cca04 	addi	r2,r2,13096
    74a4:	11000017 	ldw	r4,0(r2)
    74a8:	01400074 	movhi	r5,1
    74ac:	296d9c04 	addi	r5,r5,-18832
    74b0:	0007eb81 	jmpi	7eb8 <_fwalk_reent>

000074b4 <__sinit>:
    74b4:	20800e17 	ldw	r2,56(r4)
    74b8:	10000126 	beq	r2,zero,74c0 <__sinit+0xc>
    74bc:	f800283a 	ret
    74c0:	00071781 	jmpi	7178 <__sinit.part.1>

000074c4 <__sfp_lock_acquire>:
    74c4:	f800283a 	ret

000074c8 <__sfp_lock_release>:
    74c8:	f800283a 	ret

000074cc <__sinit_lock_acquire>:
    74cc:	f800283a 	ret

000074d0 <__sinit_lock_release>:
    74d0:	f800283a 	ret

000074d4 <__fp_lock_all>:
    74d4:	00800074 	movhi	r2,1
    74d8:	108ccb04 	addi	r2,r2,13100
    74dc:	11000017 	ldw	r4,0(r2)
    74e0:	01400034 	movhi	r5,0
    74e4:	295cc504 	addi	r5,r5,29460
    74e8:	0007df41 	jmpi	7df4 <_fwalk>

000074ec <__fp_unlock_all>:
    74ec:	00800074 	movhi	r2,1
    74f0:	108ccb04 	addi	r2,r2,13100
    74f4:	11000017 	ldw	r4,0(r2)
    74f8:	01400034 	movhi	r5,0
    74fc:	295c5904 	addi	r5,r5,29028
    7500:	0007df41 	jmpi	7df4 <_fwalk>

00007504 <_malloc_trim_r>:
    7504:	defffb04 	addi	sp,sp,-20
    7508:	dcc00315 	stw	r19,12(sp)
    750c:	04c00074 	movhi	r19,1
    7510:	dc800215 	stw	r18,8(sp)
    7514:	dc400115 	stw	r17,4(sp)
    7518:	dc000015 	stw	r16,0(sp)
    751c:	dfc00415 	stw	ra,16(sp)
    7520:	2821883a 	mov	r16,r5
    7524:	9cc61d04 	addi	r19,r19,6260
    7528:	2025883a 	mov	r18,r4
    752c:	000eacc0 	call	eacc <__malloc_lock>
    7530:	98800217 	ldw	r2,8(r19)
    7534:	14400117 	ldw	r17,4(r2)
    7538:	00bfff04 	movi	r2,-4
    753c:	88a2703a 	and	r17,r17,r2
    7540:	8c21c83a 	sub	r16,r17,r16
    7544:	8403fbc4 	addi	r16,r16,4079
    7548:	8020d33a 	srli	r16,r16,12
    754c:	0083ffc4 	movi	r2,4095
    7550:	843fffc4 	addi	r16,r16,-1
    7554:	8020933a 	slli	r16,r16,12
    7558:	1400060e 	bge	r2,r16,7574 <_malloc_trim_r+0x70>
    755c:	000b883a 	mov	r5,zero
    7560:	9009883a 	mov	r4,r18
    7564:	00031240 	call	3124 <_sbrk_r>
    7568:	98c00217 	ldw	r3,8(r19)
    756c:	1c47883a 	add	r3,r3,r17
    7570:	10c00a26 	beq	r2,r3,759c <_malloc_trim_r+0x98>
    7574:	9009883a 	mov	r4,r18
    7578:	000eaf00 	call	eaf0 <__malloc_unlock>
    757c:	0005883a 	mov	r2,zero
    7580:	dfc00417 	ldw	ra,16(sp)
    7584:	dcc00317 	ldw	r19,12(sp)
    7588:	dc800217 	ldw	r18,8(sp)
    758c:	dc400117 	ldw	r17,4(sp)
    7590:	dc000017 	ldw	r16,0(sp)
    7594:	dec00504 	addi	sp,sp,20
    7598:	f800283a 	ret
    759c:	040bc83a 	sub	r5,zero,r16
    75a0:	9009883a 	mov	r4,r18
    75a4:	00031240 	call	3124 <_sbrk_r>
    75a8:	00ffffc4 	movi	r3,-1
    75ac:	10c00d26 	beq	r2,r3,75e4 <_malloc_trim_r+0xe0>
    75b0:	00c00074 	movhi	r3,1
    75b4:	18d3f504 	addi	r3,r3,20436
    75b8:	18800017 	ldw	r2,0(r3)
    75bc:	99000217 	ldw	r4,8(r19)
    75c0:	8c23c83a 	sub	r17,r17,r16
    75c4:	8c400054 	ori	r17,r17,1
    75c8:	1421c83a 	sub	r16,r2,r16
    75cc:	24400115 	stw	r17,4(r4)
    75d0:	9009883a 	mov	r4,r18
    75d4:	1c000015 	stw	r16,0(r3)
    75d8:	000eaf00 	call	eaf0 <__malloc_unlock>
    75dc:	00800044 	movi	r2,1
    75e0:	003fe706 	br	7580 <__alt_data_end+0xff007580>
    75e4:	000b883a 	mov	r5,zero
    75e8:	9009883a 	mov	r4,r18
    75ec:	00031240 	call	3124 <_sbrk_r>
    75f0:	99000217 	ldw	r4,8(r19)
    75f4:	014003c4 	movi	r5,15
    75f8:	1107c83a 	sub	r3,r2,r4
    75fc:	28ffdd0e 	bge	r5,r3,7574 <__alt_data_end+0xff007574>
    7600:	01400074 	movhi	r5,1
    7604:	294cc804 	addi	r5,r5,13088
    7608:	29400017 	ldw	r5,0(r5)
    760c:	18c00054 	ori	r3,r3,1
    7610:	20c00115 	stw	r3,4(r4)
    7614:	00c00074 	movhi	r3,1
    7618:	1145c83a 	sub	r2,r2,r5
    761c:	18d3f504 	addi	r3,r3,20436
    7620:	18800015 	stw	r2,0(r3)
    7624:	003fd306 	br	7574 <__alt_data_end+0xff007574>

00007628 <_free_r>:
    7628:	28004126 	beq	r5,zero,7730 <_free_r+0x108>
    762c:	defffd04 	addi	sp,sp,-12
    7630:	dc400115 	stw	r17,4(sp)
    7634:	dc000015 	stw	r16,0(sp)
    7638:	2023883a 	mov	r17,r4
    763c:	2821883a 	mov	r16,r5
    7640:	dfc00215 	stw	ra,8(sp)
    7644:	000eacc0 	call	eacc <__malloc_lock>
    7648:	81ffff17 	ldw	r7,-4(r16)
    764c:	00bfff84 	movi	r2,-2
    7650:	01000074 	movhi	r4,1
    7654:	81bffe04 	addi	r6,r16,-8
    7658:	3884703a 	and	r2,r7,r2
    765c:	21061d04 	addi	r4,r4,6260
    7660:	308b883a 	add	r5,r6,r2
    7664:	2a400117 	ldw	r9,4(r5)
    7668:	22000217 	ldw	r8,8(r4)
    766c:	00ffff04 	movi	r3,-4
    7670:	48c6703a 	and	r3,r9,r3
    7674:	2a005726 	beq	r5,r8,77d4 <_free_r+0x1ac>
    7678:	28c00115 	stw	r3,4(r5)
    767c:	39c0004c 	andi	r7,r7,1
    7680:	3800091e 	bne	r7,zero,76a8 <_free_r+0x80>
    7684:	823ffe17 	ldw	r8,-8(r16)
    7688:	22400204 	addi	r9,r4,8
    768c:	320dc83a 	sub	r6,r6,r8
    7690:	31c00217 	ldw	r7,8(r6)
    7694:	1205883a 	add	r2,r2,r8
    7698:	3a406526 	beq	r7,r9,7830 <_free_r+0x208>
    769c:	32000317 	ldw	r8,12(r6)
    76a0:	3a000315 	stw	r8,12(r7)
    76a4:	41c00215 	stw	r7,8(r8)
    76a8:	28cf883a 	add	r7,r5,r3
    76ac:	39c00117 	ldw	r7,4(r7)
    76b0:	39c0004c 	andi	r7,r7,1
    76b4:	38003a26 	beq	r7,zero,77a0 <_free_r+0x178>
    76b8:	10c00054 	ori	r3,r2,1
    76bc:	30c00115 	stw	r3,4(r6)
    76c0:	3087883a 	add	r3,r6,r2
    76c4:	18800015 	stw	r2,0(r3)
    76c8:	00c07fc4 	movi	r3,511
    76cc:	18801936 	bltu	r3,r2,7734 <_free_r+0x10c>
    76d0:	1004d0fa 	srli	r2,r2,3
    76d4:	01c00044 	movi	r7,1
    76d8:	21400117 	ldw	r5,4(r4)
    76dc:	10c00044 	addi	r3,r2,1
    76e0:	18c7883a 	add	r3,r3,r3
    76e4:	1005d0ba 	srai	r2,r2,2
    76e8:	18c7883a 	add	r3,r3,r3
    76ec:	18c7883a 	add	r3,r3,r3
    76f0:	1907883a 	add	r3,r3,r4
    76f4:	3884983a 	sll	r2,r7,r2
    76f8:	19c00017 	ldw	r7,0(r3)
    76fc:	1a3ffe04 	addi	r8,r3,-8
    7700:	1144b03a 	or	r2,r2,r5
    7704:	32000315 	stw	r8,12(r6)
    7708:	31c00215 	stw	r7,8(r6)
    770c:	20800115 	stw	r2,4(r4)
    7710:	19800015 	stw	r6,0(r3)
    7714:	39800315 	stw	r6,12(r7)
    7718:	8809883a 	mov	r4,r17
    771c:	dfc00217 	ldw	ra,8(sp)
    7720:	dc400117 	ldw	r17,4(sp)
    7724:	dc000017 	ldw	r16,0(sp)
    7728:	dec00304 	addi	sp,sp,12
    772c:	000eaf01 	jmpi	eaf0 <__malloc_unlock>
    7730:	f800283a 	ret
    7734:	100ad27a 	srli	r5,r2,9
    7738:	00c00104 	movi	r3,4
    773c:	19404a36 	bltu	r3,r5,7868 <_free_r+0x240>
    7740:	100ad1ba 	srli	r5,r2,6
    7744:	28c00e44 	addi	r3,r5,57
    7748:	18c7883a 	add	r3,r3,r3
    774c:	29400e04 	addi	r5,r5,56
    7750:	18c7883a 	add	r3,r3,r3
    7754:	18c7883a 	add	r3,r3,r3
    7758:	1909883a 	add	r4,r3,r4
    775c:	20c00017 	ldw	r3,0(r4)
    7760:	01c00074 	movhi	r7,1
    7764:	213ffe04 	addi	r4,r4,-8
    7768:	39c61d04 	addi	r7,r7,6260
    776c:	20c04426 	beq	r4,r3,7880 <_free_r+0x258>
    7770:	01ffff04 	movi	r7,-4
    7774:	19400117 	ldw	r5,4(r3)
    7778:	29ca703a 	and	r5,r5,r7
    777c:	1140022e 	bgeu	r2,r5,7788 <_free_r+0x160>
    7780:	18c00217 	ldw	r3,8(r3)
    7784:	20fffb1e 	bne	r4,r3,7774 <__alt_data_end+0xff007774>
    7788:	19000317 	ldw	r4,12(r3)
    778c:	31000315 	stw	r4,12(r6)
    7790:	30c00215 	stw	r3,8(r6)
    7794:	21800215 	stw	r6,8(r4)
    7798:	19800315 	stw	r6,12(r3)
    779c:	003fde06 	br	7718 <__alt_data_end+0xff007718>
    77a0:	29c00217 	ldw	r7,8(r5)
    77a4:	10c5883a 	add	r2,r2,r3
    77a8:	00c00074 	movhi	r3,1
    77ac:	18c61f04 	addi	r3,r3,6268
    77b0:	38c03b26 	beq	r7,r3,78a0 <_free_r+0x278>
    77b4:	2a000317 	ldw	r8,12(r5)
    77b8:	11400054 	ori	r5,r2,1
    77bc:	3087883a 	add	r3,r6,r2
    77c0:	3a000315 	stw	r8,12(r7)
    77c4:	41c00215 	stw	r7,8(r8)
    77c8:	31400115 	stw	r5,4(r6)
    77cc:	18800015 	stw	r2,0(r3)
    77d0:	003fbd06 	br	76c8 <__alt_data_end+0xff0076c8>
    77d4:	39c0004c 	andi	r7,r7,1
    77d8:	10c5883a 	add	r2,r2,r3
    77dc:	3800071e 	bne	r7,zero,77fc <_free_r+0x1d4>
    77e0:	81fffe17 	ldw	r7,-8(r16)
    77e4:	31cdc83a 	sub	r6,r6,r7
    77e8:	30c00317 	ldw	r3,12(r6)
    77ec:	31400217 	ldw	r5,8(r6)
    77f0:	11c5883a 	add	r2,r2,r7
    77f4:	28c00315 	stw	r3,12(r5)
    77f8:	19400215 	stw	r5,8(r3)
    77fc:	10c00054 	ori	r3,r2,1
    7800:	30c00115 	stw	r3,4(r6)
    7804:	00c00074 	movhi	r3,1
    7808:	18ccc904 	addi	r3,r3,13092
    780c:	18c00017 	ldw	r3,0(r3)
    7810:	21800215 	stw	r6,8(r4)
    7814:	10ffc036 	bltu	r2,r3,7718 <__alt_data_end+0xff007718>
    7818:	00800074 	movhi	r2,1
    781c:	1093e704 	addi	r2,r2,20380
    7820:	11400017 	ldw	r5,0(r2)
    7824:	8809883a 	mov	r4,r17
    7828:	00075040 	call	7504 <_malloc_trim_r>
    782c:	003fba06 	br	7718 <__alt_data_end+0xff007718>
    7830:	28c9883a 	add	r4,r5,r3
    7834:	21000117 	ldw	r4,4(r4)
    7838:	2100004c 	andi	r4,r4,1
    783c:	2000391e 	bne	r4,zero,7924 <_free_r+0x2fc>
    7840:	29c00217 	ldw	r7,8(r5)
    7844:	29000317 	ldw	r4,12(r5)
    7848:	1885883a 	add	r2,r3,r2
    784c:	10c00054 	ori	r3,r2,1
    7850:	39000315 	stw	r4,12(r7)
    7854:	21c00215 	stw	r7,8(r4)
    7858:	30c00115 	stw	r3,4(r6)
    785c:	308d883a 	add	r6,r6,r2
    7860:	30800015 	stw	r2,0(r6)
    7864:	003fac06 	br	7718 <__alt_data_end+0xff007718>
    7868:	00c00504 	movi	r3,20
    786c:	19401536 	bltu	r3,r5,78c4 <_free_r+0x29c>
    7870:	28c01704 	addi	r3,r5,92
    7874:	18c7883a 	add	r3,r3,r3
    7878:	294016c4 	addi	r5,r5,91
    787c:	003fb406 	br	7750 <__alt_data_end+0xff007750>
    7880:	280bd0ba 	srai	r5,r5,2
    7884:	00c00044 	movi	r3,1
    7888:	38800117 	ldw	r2,4(r7)
    788c:	194a983a 	sll	r5,r3,r5
    7890:	2007883a 	mov	r3,r4
    7894:	2884b03a 	or	r2,r5,r2
    7898:	38800115 	stw	r2,4(r7)
    789c:	003fbb06 	br	778c <__alt_data_end+0xff00778c>
    78a0:	21800515 	stw	r6,20(r4)
    78a4:	21800415 	stw	r6,16(r4)
    78a8:	10c00054 	ori	r3,r2,1
    78ac:	31c00315 	stw	r7,12(r6)
    78b0:	31c00215 	stw	r7,8(r6)
    78b4:	30c00115 	stw	r3,4(r6)
    78b8:	308d883a 	add	r6,r6,r2
    78bc:	30800015 	stw	r2,0(r6)
    78c0:	003f9506 	br	7718 <__alt_data_end+0xff007718>
    78c4:	00c01504 	movi	r3,84
    78c8:	19400536 	bltu	r3,r5,78e0 <_free_r+0x2b8>
    78cc:	100ad33a 	srli	r5,r2,12
    78d0:	28c01bc4 	addi	r3,r5,111
    78d4:	18c7883a 	add	r3,r3,r3
    78d8:	29401b84 	addi	r5,r5,110
    78dc:	003f9c06 	br	7750 <__alt_data_end+0xff007750>
    78e0:	00c05504 	movi	r3,340
    78e4:	19400536 	bltu	r3,r5,78fc <_free_r+0x2d4>
    78e8:	100ad3fa 	srli	r5,r2,15
    78ec:	28c01e04 	addi	r3,r5,120
    78f0:	18c7883a 	add	r3,r3,r3
    78f4:	29401dc4 	addi	r5,r5,119
    78f8:	003f9506 	br	7750 <__alt_data_end+0xff007750>
    78fc:	00c15504 	movi	r3,1364
    7900:	19400536 	bltu	r3,r5,7918 <_free_r+0x2f0>
    7904:	100ad4ba 	srli	r5,r2,18
    7908:	28c01f44 	addi	r3,r5,125
    790c:	18c7883a 	add	r3,r3,r3
    7910:	29401f04 	addi	r5,r5,124
    7914:	003f8e06 	br	7750 <__alt_data_end+0xff007750>
    7918:	00c03f84 	movi	r3,254
    791c:	01401f84 	movi	r5,126
    7920:	003f8b06 	br	7750 <__alt_data_end+0xff007750>
    7924:	10c00054 	ori	r3,r2,1
    7928:	30c00115 	stw	r3,4(r6)
    792c:	308d883a 	add	r6,r6,r2
    7930:	30800015 	stw	r2,0(r6)
    7934:	003f7806 	br	7718 <__alt_data_end+0xff007718>

00007938 <__sfvwrite_r>:
    7938:	30800217 	ldw	r2,8(r6)
    793c:	10006726 	beq	r2,zero,7adc <__sfvwrite_r+0x1a4>
    7940:	28c0030b 	ldhu	r3,12(r5)
    7944:	defff404 	addi	sp,sp,-48
    7948:	dd400715 	stw	r21,28(sp)
    794c:	dd000615 	stw	r20,24(sp)
    7950:	dc000215 	stw	r16,8(sp)
    7954:	dfc00b15 	stw	ra,44(sp)
    7958:	df000a15 	stw	fp,40(sp)
    795c:	ddc00915 	stw	r23,36(sp)
    7960:	dd800815 	stw	r22,32(sp)
    7964:	dcc00515 	stw	r19,20(sp)
    7968:	dc800415 	stw	r18,16(sp)
    796c:	dc400315 	stw	r17,12(sp)
    7970:	1880020c 	andi	r2,r3,8
    7974:	2821883a 	mov	r16,r5
    7978:	202b883a 	mov	r21,r4
    797c:	3029883a 	mov	r20,r6
    7980:	10002726 	beq	r2,zero,7a20 <__sfvwrite_r+0xe8>
    7984:	28800417 	ldw	r2,16(r5)
    7988:	10002526 	beq	r2,zero,7a20 <__sfvwrite_r+0xe8>
    798c:	1880008c 	andi	r2,r3,2
    7990:	a4400017 	ldw	r17,0(r20)
    7994:	10002a26 	beq	r2,zero,7a40 <__sfvwrite_r+0x108>
    7998:	05a00034 	movhi	r22,32768
    799c:	0027883a 	mov	r19,zero
    79a0:	0025883a 	mov	r18,zero
    79a4:	b5bf0004 	addi	r22,r22,-1024
    79a8:	980d883a 	mov	r6,r19
    79ac:	a809883a 	mov	r4,r21
    79b0:	90004626 	beq	r18,zero,7acc <__sfvwrite_r+0x194>
    79b4:	900f883a 	mov	r7,r18
    79b8:	b480022e 	bgeu	r22,r18,79c4 <__sfvwrite_r+0x8c>
    79bc:	01e00034 	movhi	r7,32768
    79c0:	39ff0004 	addi	r7,r7,-1024
    79c4:	80800917 	ldw	r2,36(r16)
    79c8:	81400717 	ldw	r5,28(r16)
    79cc:	103ee83a 	callr	r2
    79d0:	0080570e 	bge	zero,r2,7b30 <__sfvwrite_r+0x1f8>
    79d4:	a0c00217 	ldw	r3,8(r20)
    79d8:	98a7883a 	add	r19,r19,r2
    79dc:	90a5c83a 	sub	r18,r18,r2
    79e0:	1885c83a 	sub	r2,r3,r2
    79e4:	a0800215 	stw	r2,8(r20)
    79e8:	103fef1e 	bne	r2,zero,79a8 <__alt_data_end+0xff0079a8>
    79ec:	0005883a 	mov	r2,zero
    79f0:	dfc00b17 	ldw	ra,44(sp)
    79f4:	df000a17 	ldw	fp,40(sp)
    79f8:	ddc00917 	ldw	r23,36(sp)
    79fc:	dd800817 	ldw	r22,32(sp)
    7a00:	dd400717 	ldw	r21,28(sp)
    7a04:	dd000617 	ldw	r20,24(sp)
    7a08:	dcc00517 	ldw	r19,20(sp)
    7a0c:	dc800417 	ldw	r18,16(sp)
    7a10:	dc400317 	ldw	r17,12(sp)
    7a14:	dc000217 	ldw	r16,8(sp)
    7a18:	dec00c04 	addi	sp,sp,48
    7a1c:	f800283a 	ret
    7a20:	800b883a 	mov	r5,r16
    7a24:	a809883a 	mov	r4,r21
    7a28:	00054e00 	call	54e0 <__swsetup_r>
    7a2c:	1000eb1e 	bne	r2,zero,7ddc <__sfvwrite_r+0x4a4>
    7a30:	80c0030b 	ldhu	r3,12(r16)
    7a34:	a4400017 	ldw	r17,0(r20)
    7a38:	1880008c 	andi	r2,r3,2
    7a3c:	103fd61e 	bne	r2,zero,7998 <__alt_data_end+0xff007998>
    7a40:	1880004c 	andi	r2,r3,1
    7a44:	10003f1e 	bne	r2,zero,7b44 <__sfvwrite_r+0x20c>
    7a48:	0039883a 	mov	fp,zero
    7a4c:	0025883a 	mov	r18,zero
    7a50:	90001a26 	beq	r18,zero,7abc <__sfvwrite_r+0x184>
    7a54:	1880800c 	andi	r2,r3,512
    7a58:	84c00217 	ldw	r19,8(r16)
    7a5c:	10002126 	beq	r2,zero,7ae4 <__sfvwrite_r+0x1ac>
    7a60:	982f883a 	mov	r23,r19
    7a64:	94c09336 	bltu	r18,r19,7cb4 <__sfvwrite_r+0x37c>
    7a68:	1881200c 	andi	r2,r3,1152
    7a6c:	10009e1e 	bne	r2,zero,7ce8 <__sfvwrite_r+0x3b0>
    7a70:	81000017 	ldw	r4,0(r16)
    7a74:	b80d883a 	mov	r6,r23
    7a78:	e00b883a 	mov	r5,fp
    7a7c:	00084400 	call	8440 <memmove>
    7a80:	80c00217 	ldw	r3,8(r16)
    7a84:	81000017 	ldw	r4,0(r16)
    7a88:	9005883a 	mov	r2,r18
    7a8c:	1ce7c83a 	sub	r19,r3,r19
    7a90:	25cf883a 	add	r7,r4,r23
    7a94:	84c00215 	stw	r19,8(r16)
    7a98:	81c00015 	stw	r7,0(r16)
    7a9c:	a0c00217 	ldw	r3,8(r20)
    7aa0:	e0b9883a 	add	fp,fp,r2
    7aa4:	90a5c83a 	sub	r18,r18,r2
    7aa8:	18a7c83a 	sub	r19,r3,r2
    7aac:	a4c00215 	stw	r19,8(r20)
    7ab0:	983fce26 	beq	r19,zero,79ec <__alt_data_end+0xff0079ec>
    7ab4:	80c0030b 	ldhu	r3,12(r16)
    7ab8:	903fe61e 	bne	r18,zero,7a54 <__alt_data_end+0xff007a54>
    7abc:	8f000017 	ldw	fp,0(r17)
    7ac0:	8c800117 	ldw	r18,4(r17)
    7ac4:	8c400204 	addi	r17,r17,8
    7ac8:	003fe106 	br	7a50 <__alt_data_end+0xff007a50>
    7acc:	8cc00017 	ldw	r19,0(r17)
    7ad0:	8c800117 	ldw	r18,4(r17)
    7ad4:	8c400204 	addi	r17,r17,8
    7ad8:	003fb306 	br	79a8 <__alt_data_end+0xff0079a8>
    7adc:	0005883a 	mov	r2,zero
    7ae0:	f800283a 	ret
    7ae4:	81000017 	ldw	r4,0(r16)
    7ae8:	80800417 	ldw	r2,16(r16)
    7aec:	11005736 	bltu	r2,r4,7c4c <__sfvwrite_r+0x314>
    7af0:	85c00517 	ldw	r23,20(r16)
    7af4:	95c05536 	bltu	r18,r23,7c4c <__sfvwrite_r+0x314>
    7af8:	00a00034 	movhi	r2,32768
    7afc:	10bfffc4 	addi	r2,r2,-1
    7b00:	9009883a 	mov	r4,r18
    7b04:	1480012e 	bgeu	r2,r18,7b0c <__sfvwrite_r+0x1d4>
    7b08:	1009883a 	mov	r4,r2
    7b0c:	b80b883a 	mov	r5,r23
    7b10:	0001c080 	call	1c08 <__divsi3>
    7b14:	15cf383a 	mul	r7,r2,r23
    7b18:	81400717 	ldw	r5,28(r16)
    7b1c:	80800917 	ldw	r2,36(r16)
    7b20:	e00d883a 	mov	r6,fp
    7b24:	a809883a 	mov	r4,r21
    7b28:	103ee83a 	callr	r2
    7b2c:	00bfdb16 	blt	zero,r2,7a9c <__alt_data_end+0xff007a9c>
    7b30:	8080030b 	ldhu	r2,12(r16)
    7b34:	10801014 	ori	r2,r2,64
    7b38:	8080030d 	sth	r2,12(r16)
    7b3c:	00bfffc4 	movi	r2,-1
    7b40:	003fab06 	br	79f0 <__alt_data_end+0xff0079f0>
    7b44:	0027883a 	mov	r19,zero
    7b48:	0011883a 	mov	r8,zero
    7b4c:	0039883a 	mov	fp,zero
    7b50:	0025883a 	mov	r18,zero
    7b54:	90001f26 	beq	r18,zero,7bd4 <__sfvwrite_r+0x29c>
    7b58:	40005a26 	beq	r8,zero,7cc4 <__sfvwrite_r+0x38c>
    7b5c:	982d883a 	mov	r22,r19
    7b60:	94c0012e 	bgeu	r18,r19,7b68 <__sfvwrite_r+0x230>
    7b64:	902d883a 	mov	r22,r18
    7b68:	81000017 	ldw	r4,0(r16)
    7b6c:	80800417 	ldw	r2,16(r16)
    7b70:	b02f883a 	mov	r23,r22
    7b74:	81c00517 	ldw	r7,20(r16)
    7b78:	1100032e 	bgeu	r2,r4,7b88 <__sfvwrite_r+0x250>
    7b7c:	80c00217 	ldw	r3,8(r16)
    7b80:	38c7883a 	add	r3,r7,r3
    7b84:	1d801816 	blt	r3,r22,7be8 <__sfvwrite_r+0x2b0>
    7b88:	b1c03e16 	blt	r22,r7,7c84 <__sfvwrite_r+0x34c>
    7b8c:	80800917 	ldw	r2,36(r16)
    7b90:	81400717 	ldw	r5,28(r16)
    7b94:	e00d883a 	mov	r6,fp
    7b98:	da000115 	stw	r8,4(sp)
    7b9c:	a809883a 	mov	r4,r21
    7ba0:	103ee83a 	callr	r2
    7ba4:	102f883a 	mov	r23,r2
    7ba8:	da000117 	ldw	r8,4(sp)
    7bac:	00bfe00e 	bge	zero,r2,7b30 <__alt_data_end+0xff007b30>
    7bb0:	9de7c83a 	sub	r19,r19,r23
    7bb4:	98001f26 	beq	r19,zero,7c34 <__sfvwrite_r+0x2fc>
    7bb8:	a0800217 	ldw	r2,8(r20)
    7bbc:	e5f9883a 	add	fp,fp,r23
    7bc0:	95e5c83a 	sub	r18,r18,r23
    7bc4:	15efc83a 	sub	r23,r2,r23
    7bc8:	a5c00215 	stw	r23,8(r20)
    7bcc:	b83f8726 	beq	r23,zero,79ec <__alt_data_end+0xff0079ec>
    7bd0:	903fe11e 	bne	r18,zero,7b58 <__alt_data_end+0xff007b58>
    7bd4:	8f000017 	ldw	fp,0(r17)
    7bd8:	8c800117 	ldw	r18,4(r17)
    7bdc:	0011883a 	mov	r8,zero
    7be0:	8c400204 	addi	r17,r17,8
    7be4:	003fdb06 	br	7b54 <__alt_data_end+0xff007b54>
    7be8:	180d883a 	mov	r6,r3
    7bec:	e00b883a 	mov	r5,fp
    7bf0:	da000115 	stw	r8,4(sp)
    7bf4:	d8c00015 	stw	r3,0(sp)
    7bf8:	00084400 	call	8440 <memmove>
    7bfc:	d8c00017 	ldw	r3,0(sp)
    7c00:	80800017 	ldw	r2,0(r16)
    7c04:	800b883a 	mov	r5,r16
    7c08:	a809883a 	mov	r4,r21
    7c0c:	10c5883a 	add	r2,r2,r3
    7c10:	80800015 	stw	r2,0(r16)
    7c14:	d8c00015 	stw	r3,0(sp)
    7c18:	00070d80 	call	70d8 <_fflush_r>
    7c1c:	d8c00017 	ldw	r3,0(sp)
    7c20:	da000117 	ldw	r8,4(sp)
    7c24:	103fc21e 	bne	r2,zero,7b30 <__alt_data_end+0xff007b30>
    7c28:	182f883a 	mov	r23,r3
    7c2c:	9de7c83a 	sub	r19,r19,r23
    7c30:	983fe11e 	bne	r19,zero,7bb8 <__alt_data_end+0xff007bb8>
    7c34:	800b883a 	mov	r5,r16
    7c38:	a809883a 	mov	r4,r21
    7c3c:	00070d80 	call	70d8 <_fflush_r>
    7c40:	103fbb1e 	bne	r2,zero,7b30 <__alt_data_end+0xff007b30>
    7c44:	0011883a 	mov	r8,zero
    7c48:	003fdb06 	br	7bb8 <__alt_data_end+0xff007bb8>
    7c4c:	94c0012e 	bgeu	r18,r19,7c54 <__sfvwrite_r+0x31c>
    7c50:	9027883a 	mov	r19,r18
    7c54:	980d883a 	mov	r6,r19
    7c58:	e00b883a 	mov	r5,fp
    7c5c:	00084400 	call	8440 <memmove>
    7c60:	80800217 	ldw	r2,8(r16)
    7c64:	80c00017 	ldw	r3,0(r16)
    7c68:	14c5c83a 	sub	r2,r2,r19
    7c6c:	1cc7883a 	add	r3,r3,r19
    7c70:	80800215 	stw	r2,8(r16)
    7c74:	80c00015 	stw	r3,0(r16)
    7c78:	10004326 	beq	r2,zero,7d88 <__sfvwrite_r+0x450>
    7c7c:	9805883a 	mov	r2,r19
    7c80:	003f8606 	br	7a9c <__alt_data_end+0xff007a9c>
    7c84:	b00d883a 	mov	r6,r22
    7c88:	e00b883a 	mov	r5,fp
    7c8c:	da000115 	stw	r8,4(sp)
    7c90:	00084400 	call	8440 <memmove>
    7c94:	80800217 	ldw	r2,8(r16)
    7c98:	80c00017 	ldw	r3,0(r16)
    7c9c:	da000117 	ldw	r8,4(sp)
    7ca0:	1585c83a 	sub	r2,r2,r22
    7ca4:	1dad883a 	add	r22,r3,r22
    7ca8:	80800215 	stw	r2,8(r16)
    7cac:	85800015 	stw	r22,0(r16)
    7cb0:	003fbf06 	br	7bb0 <__alt_data_end+0xff007bb0>
    7cb4:	81000017 	ldw	r4,0(r16)
    7cb8:	9027883a 	mov	r19,r18
    7cbc:	902f883a 	mov	r23,r18
    7cc0:	003f6c06 	br	7a74 <__alt_data_end+0xff007a74>
    7cc4:	900d883a 	mov	r6,r18
    7cc8:	01400284 	movi	r5,10
    7ccc:	e009883a 	mov	r4,fp
    7cd0:	00082140 	call	8214 <memchr>
    7cd4:	10003e26 	beq	r2,zero,7dd0 <__sfvwrite_r+0x498>
    7cd8:	10800044 	addi	r2,r2,1
    7cdc:	1727c83a 	sub	r19,r2,fp
    7ce0:	02000044 	movi	r8,1
    7ce4:	003f9d06 	br	7b5c <__alt_data_end+0xff007b5c>
    7ce8:	80800517 	ldw	r2,20(r16)
    7cec:	81400417 	ldw	r5,16(r16)
    7cf0:	81c00017 	ldw	r7,0(r16)
    7cf4:	10a7883a 	add	r19,r2,r2
    7cf8:	9885883a 	add	r2,r19,r2
    7cfc:	1026d7fa 	srli	r19,r2,31
    7d00:	396dc83a 	sub	r22,r7,r5
    7d04:	b1000044 	addi	r4,r22,1
    7d08:	9885883a 	add	r2,r19,r2
    7d0c:	1027d07a 	srai	r19,r2,1
    7d10:	2485883a 	add	r2,r4,r18
    7d14:	980d883a 	mov	r6,r19
    7d18:	9880022e 	bgeu	r19,r2,7d24 <__sfvwrite_r+0x3ec>
    7d1c:	1027883a 	mov	r19,r2
    7d20:	100d883a 	mov	r6,r2
    7d24:	18c1000c 	andi	r3,r3,1024
    7d28:	18001c26 	beq	r3,zero,7d9c <__sfvwrite_r+0x464>
    7d2c:	300b883a 	mov	r5,r6
    7d30:	a809883a 	mov	r4,r21
    7d34:	00027d80 	call	27d8 <_malloc_r>
    7d38:	102f883a 	mov	r23,r2
    7d3c:	10002926 	beq	r2,zero,7de4 <__sfvwrite_r+0x4ac>
    7d40:	81400417 	ldw	r5,16(r16)
    7d44:	b00d883a 	mov	r6,r22
    7d48:	1009883a 	mov	r4,r2
    7d4c:	00082f80 	call	82f8 <memcpy>
    7d50:	8080030b 	ldhu	r2,12(r16)
    7d54:	00fedfc4 	movi	r3,-1153
    7d58:	10c4703a 	and	r2,r2,r3
    7d5c:	10802014 	ori	r2,r2,128
    7d60:	8080030d 	sth	r2,12(r16)
    7d64:	bd89883a 	add	r4,r23,r22
    7d68:	9d8fc83a 	sub	r7,r19,r22
    7d6c:	85c00415 	stw	r23,16(r16)
    7d70:	84c00515 	stw	r19,20(r16)
    7d74:	81000015 	stw	r4,0(r16)
    7d78:	9027883a 	mov	r19,r18
    7d7c:	81c00215 	stw	r7,8(r16)
    7d80:	902f883a 	mov	r23,r18
    7d84:	003f3b06 	br	7a74 <__alt_data_end+0xff007a74>
    7d88:	800b883a 	mov	r5,r16
    7d8c:	a809883a 	mov	r4,r21
    7d90:	00070d80 	call	70d8 <_fflush_r>
    7d94:	103fb926 	beq	r2,zero,7c7c <__alt_data_end+0xff007c7c>
    7d98:	003f6506 	br	7b30 <__alt_data_end+0xff007b30>
    7d9c:	a809883a 	mov	r4,r21
    7da0:	00096c00 	call	96c0 <_realloc_r>
    7da4:	102f883a 	mov	r23,r2
    7da8:	103fee1e 	bne	r2,zero,7d64 <__alt_data_end+0xff007d64>
    7dac:	81400417 	ldw	r5,16(r16)
    7db0:	a809883a 	mov	r4,r21
    7db4:	00076280 	call	7628 <_free_r>
    7db8:	8080030b 	ldhu	r2,12(r16)
    7dbc:	00ffdfc4 	movi	r3,-129
    7dc0:	1884703a 	and	r2,r3,r2
    7dc4:	00c00304 	movi	r3,12
    7dc8:	a8c00015 	stw	r3,0(r21)
    7dcc:	003f5906 	br	7b34 <__alt_data_end+0xff007b34>
    7dd0:	94c00044 	addi	r19,r18,1
    7dd4:	02000044 	movi	r8,1
    7dd8:	003f6006 	br	7b5c <__alt_data_end+0xff007b5c>
    7ddc:	00bfffc4 	movi	r2,-1
    7de0:	003f0306 	br	79f0 <__alt_data_end+0xff0079f0>
    7de4:	00800304 	movi	r2,12
    7de8:	a8800015 	stw	r2,0(r21)
    7dec:	8080030b 	ldhu	r2,12(r16)
    7df0:	003f5006 	br	7b34 <__alt_data_end+0xff007b34>

00007df4 <_fwalk>:
    7df4:	defff704 	addi	sp,sp,-36
    7df8:	dd000415 	stw	r20,16(sp)
    7dfc:	dfc00815 	stw	ra,32(sp)
    7e00:	ddc00715 	stw	r23,28(sp)
    7e04:	dd800615 	stw	r22,24(sp)
    7e08:	dd400515 	stw	r21,20(sp)
    7e0c:	dcc00315 	stw	r19,12(sp)
    7e10:	dc800215 	stw	r18,8(sp)
    7e14:	dc400115 	stw	r17,4(sp)
    7e18:	dc000015 	stw	r16,0(sp)
    7e1c:	2500b804 	addi	r20,r4,736
    7e20:	a0002326 	beq	r20,zero,7eb0 <_fwalk+0xbc>
    7e24:	282b883a 	mov	r21,r5
    7e28:	002f883a 	mov	r23,zero
    7e2c:	05800044 	movi	r22,1
    7e30:	04ffffc4 	movi	r19,-1
    7e34:	a4400117 	ldw	r17,4(r20)
    7e38:	a4800217 	ldw	r18,8(r20)
    7e3c:	8c7fffc4 	addi	r17,r17,-1
    7e40:	88000d16 	blt	r17,zero,7e78 <_fwalk+0x84>
    7e44:	94000304 	addi	r16,r18,12
    7e48:	94800384 	addi	r18,r18,14
    7e4c:	8080000b 	ldhu	r2,0(r16)
    7e50:	8c7fffc4 	addi	r17,r17,-1
    7e54:	813ffd04 	addi	r4,r16,-12
    7e58:	b080042e 	bgeu	r22,r2,7e6c <_fwalk+0x78>
    7e5c:	9080000f 	ldh	r2,0(r18)
    7e60:	14c00226 	beq	r2,r19,7e6c <_fwalk+0x78>
    7e64:	a83ee83a 	callr	r21
    7e68:	b8aeb03a 	or	r23,r23,r2
    7e6c:	84001a04 	addi	r16,r16,104
    7e70:	94801a04 	addi	r18,r18,104
    7e74:	8cfff51e 	bne	r17,r19,7e4c <__alt_data_end+0xff007e4c>
    7e78:	a5000017 	ldw	r20,0(r20)
    7e7c:	a03fed1e 	bne	r20,zero,7e34 <__alt_data_end+0xff007e34>
    7e80:	b805883a 	mov	r2,r23
    7e84:	dfc00817 	ldw	ra,32(sp)
    7e88:	ddc00717 	ldw	r23,28(sp)
    7e8c:	dd800617 	ldw	r22,24(sp)
    7e90:	dd400517 	ldw	r21,20(sp)
    7e94:	dd000417 	ldw	r20,16(sp)
    7e98:	dcc00317 	ldw	r19,12(sp)
    7e9c:	dc800217 	ldw	r18,8(sp)
    7ea0:	dc400117 	ldw	r17,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00904 	addi	sp,sp,36
    7eac:	f800283a 	ret
    7eb0:	002f883a 	mov	r23,zero
    7eb4:	003ff206 	br	7e80 <__alt_data_end+0xff007e80>

00007eb8 <_fwalk_reent>:
    7eb8:	defff704 	addi	sp,sp,-36
    7ebc:	dd000415 	stw	r20,16(sp)
    7ec0:	dfc00815 	stw	ra,32(sp)
    7ec4:	ddc00715 	stw	r23,28(sp)
    7ec8:	dd800615 	stw	r22,24(sp)
    7ecc:	dd400515 	stw	r21,20(sp)
    7ed0:	dcc00315 	stw	r19,12(sp)
    7ed4:	dc800215 	stw	r18,8(sp)
    7ed8:	dc400115 	stw	r17,4(sp)
    7edc:	dc000015 	stw	r16,0(sp)
    7ee0:	2500b804 	addi	r20,r4,736
    7ee4:	a0002326 	beq	r20,zero,7f74 <_fwalk_reent+0xbc>
    7ee8:	282b883a 	mov	r21,r5
    7eec:	2027883a 	mov	r19,r4
    7ef0:	002f883a 	mov	r23,zero
    7ef4:	05800044 	movi	r22,1
    7ef8:	04bfffc4 	movi	r18,-1
    7efc:	a4400117 	ldw	r17,4(r20)
    7f00:	a4000217 	ldw	r16,8(r20)
    7f04:	8c7fffc4 	addi	r17,r17,-1
    7f08:	88000c16 	blt	r17,zero,7f3c <_fwalk_reent+0x84>
    7f0c:	84000304 	addi	r16,r16,12
    7f10:	8080000b 	ldhu	r2,0(r16)
    7f14:	8c7fffc4 	addi	r17,r17,-1
    7f18:	817ffd04 	addi	r5,r16,-12
    7f1c:	b080052e 	bgeu	r22,r2,7f34 <_fwalk_reent+0x7c>
    7f20:	8080008f 	ldh	r2,2(r16)
    7f24:	9809883a 	mov	r4,r19
    7f28:	14800226 	beq	r2,r18,7f34 <_fwalk_reent+0x7c>
    7f2c:	a83ee83a 	callr	r21
    7f30:	b8aeb03a 	or	r23,r23,r2
    7f34:	84001a04 	addi	r16,r16,104
    7f38:	8cbff51e 	bne	r17,r18,7f10 <__alt_data_end+0xff007f10>
    7f3c:	a5000017 	ldw	r20,0(r20)
    7f40:	a03fee1e 	bne	r20,zero,7efc <__alt_data_end+0xff007efc>
    7f44:	b805883a 	mov	r2,r23
    7f48:	dfc00817 	ldw	ra,32(sp)
    7f4c:	ddc00717 	ldw	r23,28(sp)
    7f50:	dd800617 	ldw	r22,24(sp)
    7f54:	dd400517 	ldw	r21,20(sp)
    7f58:	dd000417 	ldw	r20,16(sp)
    7f5c:	dcc00317 	ldw	r19,12(sp)
    7f60:	dc800217 	ldw	r18,8(sp)
    7f64:	dc400117 	ldw	r17,4(sp)
    7f68:	dc000017 	ldw	r16,0(sp)
    7f6c:	dec00904 	addi	sp,sp,36
    7f70:	f800283a 	ret
    7f74:	002f883a 	mov	r23,zero
    7f78:	003ff206 	br	7f44 <__alt_data_end+0xff007f44>

00007f7c <_setlocale_r>:
    7f7c:	30001b26 	beq	r6,zero,7fec <_setlocale_r+0x70>
    7f80:	01400074 	movhi	r5,1
    7f84:	defffe04 	addi	sp,sp,-8
    7f88:	29457e04 	addi	r5,r5,5624
    7f8c:	3009883a 	mov	r4,r6
    7f90:	dc000015 	stw	r16,0(sp)
    7f94:	dfc00115 	stw	ra,4(sp)
    7f98:	3021883a 	mov	r16,r6
    7f9c:	0009dd40 	call	9dd4 <strcmp>
    7fa0:	1000061e 	bne	r2,zero,7fbc <_setlocale_r+0x40>
    7fa4:	00800074 	movhi	r2,1
    7fa8:	10857d04 	addi	r2,r2,5620
    7fac:	dfc00117 	ldw	ra,4(sp)
    7fb0:	dc000017 	ldw	r16,0(sp)
    7fb4:	dec00204 	addi	sp,sp,8
    7fb8:	f800283a 	ret
    7fbc:	01400074 	movhi	r5,1
    7fc0:	29457d04 	addi	r5,r5,5620
    7fc4:	8009883a 	mov	r4,r16
    7fc8:	0009dd40 	call	9dd4 <strcmp>
    7fcc:	103ff526 	beq	r2,zero,7fa4 <__alt_data_end+0xff007fa4>
    7fd0:	01400074 	movhi	r5,1
    7fd4:	29456804 	addi	r5,r5,5536
    7fd8:	8009883a 	mov	r4,r16
    7fdc:	0009dd40 	call	9dd4 <strcmp>
    7fe0:	103ff026 	beq	r2,zero,7fa4 <__alt_data_end+0xff007fa4>
    7fe4:	0005883a 	mov	r2,zero
    7fe8:	003ff006 	br	7fac <__alt_data_end+0xff007fac>
    7fec:	00800074 	movhi	r2,1
    7ff0:	10857d04 	addi	r2,r2,5620
    7ff4:	f800283a 	ret

00007ff8 <__locale_charset>:
    7ff8:	00800074 	movhi	r2,1
    7ffc:	10883004 	addi	r2,r2,8384
    8000:	f800283a 	ret

00008004 <__locale_mb_cur_max>:
    8004:	00800074 	movhi	r2,1
    8008:	108ccc04 	addi	r2,r2,13104
    800c:	10800017 	ldw	r2,0(r2)
    8010:	f800283a 	ret

00008014 <__locale_msgcharset>:
    8014:	00800074 	movhi	r2,1
    8018:	10882804 	addi	r2,r2,8352
    801c:	f800283a 	ret

00008020 <__locale_cjk_lang>:
    8020:	0005883a 	mov	r2,zero
    8024:	f800283a 	ret

00008028 <_localeconv_r>:
    8028:	00800074 	movhi	r2,1
    802c:	10883804 	addi	r2,r2,8416
    8030:	f800283a 	ret

00008034 <setlocale>:
    8034:	00800074 	movhi	r2,1
    8038:	108ccb04 	addi	r2,r2,13100
    803c:	280d883a 	mov	r6,r5
    8040:	200b883a 	mov	r5,r4
    8044:	11000017 	ldw	r4,0(r2)
    8048:	0007f7c1 	jmpi	7f7c <_setlocale_r>

0000804c <localeconv>:
    804c:	00800074 	movhi	r2,1
    8050:	10883804 	addi	r2,r2,8416
    8054:	f800283a 	ret

00008058 <__smakebuf_r>:
    8058:	2880030b 	ldhu	r2,12(r5)
    805c:	10c0008c 	andi	r3,r2,2
    8060:	1800411e 	bne	r3,zero,8168 <__smakebuf_r+0x110>
    8064:	deffec04 	addi	sp,sp,-80
    8068:	dc000f15 	stw	r16,60(sp)
    806c:	2821883a 	mov	r16,r5
    8070:	2940038f 	ldh	r5,14(r5)
    8074:	dc401015 	stw	r17,64(sp)
    8078:	dfc01315 	stw	ra,76(sp)
    807c:	dcc01215 	stw	r19,72(sp)
    8080:	dc801115 	stw	r18,68(sp)
    8084:	2023883a 	mov	r17,r4
    8088:	28001c16 	blt	r5,zero,80fc <__smakebuf_r+0xa4>
    808c:	d80d883a 	mov	r6,sp
    8090:	000b97c0 	call	b97c <_fstat_r>
    8094:	10001816 	blt	r2,zero,80f8 <__smakebuf_r+0xa0>
    8098:	d8800117 	ldw	r2,4(sp)
    809c:	00e00014 	movui	r3,32768
    80a0:	10bc000c 	andi	r2,r2,61440
    80a4:	14c80020 	cmpeqi	r19,r2,8192
    80a8:	10c03726 	beq	r2,r3,8188 <__smakebuf_r+0x130>
    80ac:	80c0030b 	ldhu	r3,12(r16)
    80b0:	18c20014 	ori	r3,r3,2048
    80b4:	80c0030d 	sth	r3,12(r16)
    80b8:	00c80004 	movi	r3,8192
    80bc:	10c0521e 	bne	r2,r3,8208 <__smakebuf_r+0x1b0>
    80c0:	8140038f 	ldh	r5,14(r16)
    80c4:	8809883a 	mov	r4,r17
    80c8:	000b9d80 	call	b9d8 <_isatty_r>
    80cc:	10004c26 	beq	r2,zero,8200 <__smakebuf_r+0x1a8>
    80d0:	8080030b 	ldhu	r2,12(r16)
    80d4:	80c010c4 	addi	r3,r16,67
    80d8:	80c00015 	stw	r3,0(r16)
    80dc:	10800054 	ori	r2,r2,1
    80e0:	8080030d 	sth	r2,12(r16)
    80e4:	00800044 	movi	r2,1
    80e8:	80c00415 	stw	r3,16(r16)
    80ec:	80800515 	stw	r2,20(r16)
    80f0:	04810004 	movi	r18,1024
    80f4:	00000706 	br	8114 <__smakebuf_r+0xbc>
    80f8:	8080030b 	ldhu	r2,12(r16)
    80fc:	10c0200c 	andi	r3,r2,128
    8100:	18001f1e 	bne	r3,zero,8180 <__smakebuf_r+0x128>
    8104:	04810004 	movi	r18,1024
    8108:	10820014 	ori	r2,r2,2048
    810c:	8080030d 	sth	r2,12(r16)
    8110:	0027883a 	mov	r19,zero
    8114:	900b883a 	mov	r5,r18
    8118:	8809883a 	mov	r4,r17
    811c:	00027d80 	call	27d8 <_malloc_r>
    8120:	10002c26 	beq	r2,zero,81d4 <__smakebuf_r+0x17c>
    8124:	80c0030b 	ldhu	r3,12(r16)
    8128:	01000034 	movhi	r4,0
    812c:	211c5b04 	addi	r4,r4,29036
    8130:	89000f15 	stw	r4,60(r17)
    8134:	18c02014 	ori	r3,r3,128
    8138:	80c0030d 	sth	r3,12(r16)
    813c:	80800015 	stw	r2,0(r16)
    8140:	80800415 	stw	r2,16(r16)
    8144:	84800515 	stw	r18,20(r16)
    8148:	98001a1e 	bne	r19,zero,81b4 <__smakebuf_r+0x15c>
    814c:	dfc01317 	ldw	ra,76(sp)
    8150:	dcc01217 	ldw	r19,72(sp)
    8154:	dc801117 	ldw	r18,68(sp)
    8158:	dc401017 	ldw	r17,64(sp)
    815c:	dc000f17 	ldw	r16,60(sp)
    8160:	dec01404 	addi	sp,sp,80
    8164:	f800283a 	ret
    8168:	288010c4 	addi	r2,r5,67
    816c:	28800015 	stw	r2,0(r5)
    8170:	28800415 	stw	r2,16(r5)
    8174:	00800044 	movi	r2,1
    8178:	28800515 	stw	r2,20(r5)
    817c:	f800283a 	ret
    8180:	04801004 	movi	r18,64
    8184:	003fe006 	br	8108 <__alt_data_end+0xff008108>
    8188:	81000a17 	ldw	r4,40(r16)
    818c:	00c00074 	movhi	r3,1
    8190:	18e75c04 	addi	r3,r3,-25232
    8194:	20ffc51e 	bne	r4,r3,80ac <__alt_data_end+0xff0080ac>
    8198:	8080030b 	ldhu	r2,12(r16)
    819c:	04810004 	movi	r18,1024
    81a0:	84801315 	stw	r18,76(r16)
    81a4:	1484b03a 	or	r2,r2,r18
    81a8:	8080030d 	sth	r2,12(r16)
    81ac:	0027883a 	mov	r19,zero
    81b0:	003fd806 	br	8114 <__alt_data_end+0xff008114>
    81b4:	8140038f 	ldh	r5,14(r16)
    81b8:	8809883a 	mov	r4,r17
    81bc:	000b9d80 	call	b9d8 <_isatty_r>
    81c0:	103fe226 	beq	r2,zero,814c <__alt_data_end+0xff00814c>
    81c4:	8080030b 	ldhu	r2,12(r16)
    81c8:	10800054 	ori	r2,r2,1
    81cc:	8080030d 	sth	r2,12(r16)
    81d0:	003fde06 	br	814c <__alt_data_end+0xff00814c>
    81d4:	8080030b 	ldhu	r2,12(r16)
    81d8:	10c0800c 	andi	r3,r2,512
    81dc:	183fdb1e 	bne	r3,zero,814c <__alt_data_end+0xff00814c>
    81e0:	10800094 	ori	r2,r2,2
    81e4:	80c010c4 	addi	r3,r16,67
    81e8:	8080030d 	sth	r2,12(r16)
    81ec:	00800044 	movi	r2,1
    81f0:	80c00015 	stw	r3,0(r16)
    81f4:	80c00415 	stw	r3,16(r16)
    81f8:	80800515 	stw	r2,20(r16)
    81fc:	003fd306 	br	814c <__alt_data_end+0xff00814c>
    8200:	04810004 	movi	r18,1024
    8204:	003fc306 	br	8114 <__alt_data_end+0xff008114>
    8208:	0027883a 	mov	r19,zero
    820c:	04810004 	movi	r18,1024
    8210:	003fc006 	br	8114 <__alt_data_end+0xff008114>

00008214 <memchr>:
    8214:	208000cc 	andi	r2,r4,3
    8218:	280f883a 	mov	r7,r5
    821c:	10003426 	beq	r2,zero,82f0 <memchr+0xdc>
    8220:	30bfffc4 	addi	r2,r6,-1
    8224:	30001a26 	beq	r6,zero,8290 <memchr+0x7c>
    8228:	20c00003 	ldbu	r3,0(r4)
    822c:	29803fcc 	andi	r6,r5,255
    8230:	30c0051e 	bne	r6,r3,8248 <memchr+0x34>
    8234:	00001806 	br	8298 <memchr+0x84>
    8238:	10001526 	beq	r2,zero,8290 <memchr+0x7c>
    823c:	20c00003 	ldbu	r3,0(r4)
    8240:	10bfffc4 	addi	r2,r2,-1
    8244:	30c01426 	beq	r6,r3,8298 <memchr+0x84>
    8248:	21000044 	addi	r4,r4,1
    824c:	20c000cc 	andi	r3,r4,3
    8250:	183ff91e 	bne	r3,zero,8238 <__alt_data_end+0xff008238>
    8254:	020000c4 	movi	r8,3
    8258:	40801136 	bltu	r8,r2,82a0 <memchr+0x8c>
    825c:	10000c26 	beq	r2,zero,8290 <memchr+0x7c>
    8260:	20c00003 	ldbu	r3,0(r4)
    8264:	29403fcc 	andi	r5,r5,255
    8268:	28c00b26 	beq	r5,r3,8298 <memchr+0x84>
    826c:	20c00044 	addi	r3,r4,1
    8270:	39803fcc 	andi	r6,r7,255
    8274:	2089883a 	add	r4,r4,r2
    8278:	00000306 	br	8288 <memchr+0x74>
    827c:	18c00044 	addi	r3,r3,1
    8280:	197fffc3 	ldbu	r5,-1(r3)
    8284:	31400526 	beq	r6,r5,829c <memchr+0x88>
    8288:	1805883a 	mov	r2,r3
    828c:	20fffb1e 	bne	r4,r3,827c <__alt_data_end+0xff00827c>
    8290:	0005883a 	mov	r2,zero
    8294:	f800283a 	ret
    8298:	2005883a 	mov	r2,r4
    829c:	f800283a 	ret
    82a0:	28c03fcc 	andi	r3,r5,255
    82a4:	1812923a 	slli	r9,r3,8
    82a8:	02ffbff4 	movhi	r11,65279
    82ac:	02a02074 	movhi	r10,32897
    82b0:	48d2b03a 	or	r9,r9,r3
    82b4:	4806943a 	slli	r3,r9,16
    82b8:	5affbfc4 	addi	r11,r11,-257
    82bc:	52a02004 	addi	r10,r10,-32640
    82c0:	48d2b03a 	or	r9,r9,r3
    82c4:	20c00017 	ldw	r3,0(r4)
    82c8:	48c6f03a 	xor	r3,r9,r3
    82cc:	1acd883a 	add	r6,r3,r11
    82d0:	00c6303a 	nor	r3,zero,r3
    82d4:	30c6703a 	and	r3,r6,r3
    82d8:	1a86703a 	and	r3,r3,r10
    82dc:	183fe01e 	bne	r3,zero,8260 <__alt_data_end+0xff008260>
    82e0:	10bfff04 	addi	r2,r2,-4
    82e4:	21000104 	addi	r4,r4,4
    82e8:	40bff636 	bltu	r8,r2,82c4 <__alt_data_end+0xff0082c4>
    82ec:	003fdb06 	br	825c <__alt_data_end+0xff00825c>
    82f0:	3005883a 	mov	r2,r6
    82f4:	003fd706 	br	8254 <__alt_data_end+0xff008254>

000082f8 <memcpy>:
    82f8:	defffd04 	addi	sp,sp,-12
    82fc:	dfc00215 	stw	ra,8(sp)
    8300:	dc400115 	stw	r17,4(sp)
    8304:	dc000015 	stw	r16,0(sp)
    8308:	00c003c4 	movi	r3,15
    830c:	2005883a 	mov	r2,r4
    8310:	1980452e 	bgeu	r3,r6,8428 <memcpy+0x130>
    8314:	2906b03a 	or	r3,r5,r4
    8318:	18c000cc 	andi	r3,r3,3
    831c:	1800441e 	bne	r3,zero,8430 <memcpy+0x138>
    8320:	347ffc04 	addi	r17,r6,-16
    8324:	8822d13a 	srli	r17,r17,4
    8328:	28c00104 	addi	r3,r5,4
    832c:	23400104 	addi	r13,r4,4
    8330:	8820913a 	slli	r16,r17,4
    8334:	2b000204 	addi	r12,r5,8
    8338:	22c00204 	addi	r11,r4,8
    833c:	84000504 	addi	r16,r16,20
    8340:	2a800304 	addi	r10,r5,12
    8344:	22400304 	addi	r9,r4,12
    8348:	2c21883a 	add	r16,r5,r16
    834c:	2811883a 	mov	r8,r5
    8350:	200f883a 	mov	r7,r4
    8354:	41000017 	ldw	r4,0(r8)
    8358:	1fc00017 	ldw	ra,0(r3)
    835c:	63c00017 	ldw	r15,0(r12)
    8360:	39000015 	stw	r4,0(r7)
    8364:	53800017 	ldw	r14,0(r10)
    8368:	6fc00015 	stw	ra,0(r13)
    836c:	5bc00015 	stw	r15,0(r11)
    8370:	4b800015 	stw	r14,0(r9)
    8374:	18c00404 	addi	r3,r3,16
    8378:	39c00404 	addi	r7,r7,16
    837c:	42000404 	addi	r8,r8,16
    8380:	6b400404 	addi	r13,r13,16
    8384:	63000404 	addi	r12,r12,16
    8388:	5ac00404 	addi	r11,r11,16
    838c:	52800404 	addi	r10,r10,16
    8390:	4a400404 	addi	r9,r9,16
    8394:	1c3fef1e 	bne	r3,r16,8354 <__alt_data_end+0xff008354>
    8398:	89c00044 	addi	r7,r17,1
    839c:	380e913a 	slli	r7,r7,4
    83a0:	310003cc 	andi	r4,r6,15
    83a4:	02c000c4 	movi	r11,3
    83a8:	11c7883a 	add	r3,r2,r7
    83ac:	29cb883a 	add	r5,r5,r7
    83b0:	5900212e 	bgeu	r11,r4,8438 <memcpy+0x140>
    83b4:	1813883a 	mov	r9,r3
    83b8:	2811883a 	mov	r8,r5
    83bc:	200f883a 	mov	r7,r4
    83c0:	42800017 	ldw	r10,0(r8)
    83c4:	4a400104 	addi	r9,r9,4
    83c8:	39ffff04 	addi	r7,r7,-4
    83cc:	4abfff15 	stw	r10,-4(r9)
    83d0:	42000104 	addi	r8,r8,4
    83d4:	59fffa36 	bltu	r11,r7,83c0 <__alt_data_end+0xff0083c0>
    83d8:	213fff04 	addi	r4,r4,-4
    83dc:	2008d0ba 	srli	r4,r4,2
    83e0:	318000cc 	andi	r6,r6,3
    83e4:	21000044 	addi	r4,r4,1
    83e8:	2109883a 	add	r4,r4,r4
    83ec:	2109883a 	add	r4,r4,r4
    83f0:	1907883a 	add	r3,r3,r4
    83f4:	290b883a 	add	r5,r5,r4
    83f8:	30000626 	beq	r6,zero,8414 <memcpy+0x11c>
    83fc:	198d883a 	add	r6,r3,r6
    8400:	29c00003 	ldbu	r7,0(r5)
    8404:	18c00044 	addi	r3,r3,1
    8408:	29400044 	addi	r5,r5,1
    840c:	19ffffc5 	stb	r7,-1(r3)
    8410:	19bffb1e 	bne	r3,r6,8400 <__alt_data_end+0xff008400>
    8414:	dfc00217 	ldw	ra,8(sp)
    8418:	dc400117 	ldw	r17,4(sp)
    841c:	dc000017 	ldw	r16,0(sp)
    8420:	dec00304 	addi	sp,sp,12
    8424:	f800283a 	ret
    8428:	2007883a 	mov	r3,r4
    842c:	003ff206 	br	83f8 <__alt_data_end+0xff0083f8>
    8430:	2007883a 	mov	r3,r4
    8434:	003ff106 	br	83fc <__alt_data_end+0xff0083fc>
    8438:	200d883a 	mov	r6,r4
    843c:	003fee06 	br	83f8 <__alt_data_end+0xff0083f8>

00008440 <memmove>:
    8440:	2005883a 	mov	r2,r4
    8444:	29000b2e 	bgeu	r5,r4,8474 <memmove+0x34>
    8448:	298f883a 	add	r7,r5,r6
    844c:	21c0092e 	bgeu	r4,r7,8474 <memmove+0x34>
    8450:	2187883a 	add	r3,r4,r6
    8454:	198bc83a 	sub	r5,r3,r6
    8458:	30004826 	beq	r6,zero,857c <memmove+0x13c>
    845c:	39ffffc4 	addi	r7,r7,-1
    8460:	39000003 	ldbu	r4,0(r7)
    8464:	18ffffc4 	addi	r3,r3,-1
    8468:	19000005 	stb	r4,0(r3)
    846c:	28fffb1e 	bne	r5,r3,845c <__alt_data_end+0xff00845c>
    8470:	f800283a 	ret
    8474:	00c003c4 	movi	r3,15
    8478:	1980412e 	bgeu	r3,r6,8580 <memmove+0x140>
    847c:	2886b03a 	or	r3,r5,r2
    8480:	18c000cc 	andi	r3,r3,3
    8484:	1800401e 	bne	r3,zero,8588 <memmove+0x148>
    8488:	33fffc04 	addi	r15,r6,-16
    848c:	781ed13a 	srli	r15,r15,4
    8490:	28c00104 	addi	r3,r5,4
    8494:	13400104 	addi	r13,r2,4
    8498:	781c913a 	slli	r14,r15,4
    849c:	2b000204 	addi	r12,r5,8
    84a0:	12c00204 	addi	r11,r2,8
    84a4:	73800504 	addi	r14,r14,20
    84a8:	2a800304 	addi	r10,r5,12
    84ac:	12400304 	addi	r9,r2,12
    84b0:	2b9d883a 	add	r14,r5,r14
    84b4:	2811883a 	mov	r8,r5
    84b8:	100f883a 	mov	r7,r2
    84bc:	41000017 	ldw	r4,0(r8)
    84c0:	39c00404 	addi	r7,r7,16
    84c4:	18c00404 	addi	r3,r3,16
    84c8:	393ffc15 	stw	r4,-16(r7)
    84cc:	193ffc17 	ldw	r4,-16(r3)
    84d0:	6b400404 	addi	r13,r13,16
    84d4:	5ac00404 	addi	r11,r11,16
    84d8:	693ffc15 	stw	r4,-16(r13)
    84dc:	61000017 	ldw	r4,0(r12)
    84e0:	4a400404 	addi	r9,r9,16
    84e4:	42000404 	addi	r8,r8,16
    84e8:	593ffc15 	stw	r4,-16(r11)
    84ec:	51000017 	ldw	r4,0(r10)
    84f0:	63000404 	addi	r12,r12,16
    84f4:	52800404 	addi	r10,r10,16
    84f8:	493ffc15 	stw	r4,-16(r9)
    84fc:	1bbfef1e 	bne	r3,r14,84bc <__alt_data_end+0xff0084bc>
    8500:	79000044 	addi	r4,r15,1
    8504:	2008913a 	slli	r4,r4,4
    8508:	328003cc 	andi	r10,r6,15
    850c:	02c000c4 	movi	r11,3
    8510:	1107883a 	add	r3,r2,r4
    8514:	290b883a 	add	r5,r5,r4
    8518:	5a801e2e 	bgeu	r11,r10,8594 <memmove+0x154>
    851c:	1813883a 	mov	r9,r3
    8520:	2811883a 	mov	r8,r5
    8524:	500f883a 	mov	r7,r10
    8528:	41000017 	ldw	r4,0(r8)
    852c:	4a400104 	addi	r9,r9,4
    8530:	39ffff04 	addi	r7,r7,-4
    8534:	493fff15 	stw	r4,-4(r9)
    8538:	42000104 	addi	r8,r8,4
    853c:	59fffa36 	bltu	r11,r7,8528 <__alt_data_end+0xff008528>
    8540:	513fff04 	addi	r4,r10,-4
    8544:	2008d0ba 	srli	r4,r4,2
    8548:	318000cc 	andi	r6,r6,3
    854c:	21000044 	addi	r4,r4,1
    8550:	2109883a 	add	r4,r4,r4
    8554:	2109883a 	add	r4,r4,r4
    8558:	1907883a 	add	r3,r3,r4
    855c:	290b883a 	add	r5,r5,r4
    8560:	30000b26 	beq	r6,zero,8590 <memmove+0x150>
    8564:	198d883a 	add	r6,r3,r6
    8568:	29c00003 	ldbu	r7,0(r5)
    856c:	18c00044 	addi	r3,r3,1
    8570:	29400044 	addi	r5,r5,1
    8574:	19ffffc5 	stb	r7,-1(r3)
    8578:	19bffb1e 	bne	r3,r6,8568 <__alt_data_end+0xff008568>
    857c:	f800283a 	ret
    8580:	1007883a 	mov	r3,r2
    8584:	003ff606 	br	8560 <__alt_data_end+0xff008560>
    8588:	1007883a 	mov	r3,r2
    858c:	003ff506 	br	8564 <__alt_data_end+0xff008564>
    8590:	f800283a 	ret
    8594:	500d883a 	mov	r6,r10
    8598:	003ff106 	br	8560 <__alt_data_end+0xff008560>

0000859c <memset>:
    859c:	20c000cc 	andi	r3,r4,3
    85a0:	2005883a 	mov	r2,r4
    85a4:	18004426 	beq	r3,zero,86b8 <memset+0x11c>
    85a8:	31ffffc4 	addi	r7,r6,-1
    85ac:	30004026 	beq	r6,zero,86b0 <memset+0x114>
    85b0:	2813883a 	mov	r9,r5
    85b4:	200d883a 	mov	r6,r4
    85b8:	2007883a 	mov	r3,r4
    85bc:	00000406 	br	85d0 <memset+0x34>
    85c0:	3a3fffc4 	addi	r8,r7,-1
    85c4:	31800044 	addi	r6,r6,1
    85c8:	38003926 	beq	r7,zero,86b0 <memset+0x114>
    85cc:	400f883a 	mov	r7,r8
    85d0:	18c00044 	addi	r3,r3,1
    85d4:	32400005 	stb	r9,0(r6)
    85d8:	1a0000cc 	andi	r8,r3,3
    85dc:	403ff81e 	bne	r8,zero,85c0 <__alt_data_end+0xff0085c0>
    85e0:	010000c4 	movi	r4,3
    85e4:	21c02d2e 	bgeu	r4,r7,869c <memset+0x100>
    85e8:	29003fcc 	andi	r4,r5,255
    85ec:	200c923a 	slli	r6,r4,8
    85f0:	3108b03a 	or	r4,r6,r4
    85f4:	200c943a 	slli	r6,r4,16
    85f8:	218cb03a 	or	r6,r4,r6
    85fc:	010003c4 	movi	r4,15
    8600:	21c0182e 	bgeu	r4,r7,8664 <memset+0xc8>
    8604:	3b3ffc04 	addi	r12,r7,-16
    8608:	6018d13a 	srli	r12,r12,4
    860c:	1a000104 	addi	r8,r3,4
    8610:	1ac00204 	addi	r11,r3,8
    8614:	6008913a 	slli	r4,r12,4
    8618:	1a800304 	addi	r10,r3,12
    861c:	1813883a 	mov	r9,r3
    8620:	21000504 	addi	r4,r4,20
    8624:	1909883a 	add	r4,r3,r4
    8628:	49800015 	stw	r6,0(r9)
    862c:	41800015 	stw	r6,0(r8)
    8630:	59800015 	stw	r6,0(r11)
    8634:	51800015 	stw	r6,0(r10)
    8638:	42000404 	addi	r8,r8,16
    863c:	4a400404 	addi	r9,r9,16
    8640:	5ac00404 	addi	r11,r11,16
    8644:	52800404 	addi	r10,r10,16
    8648:	413ff71e 	bne	r8,r4,8628 <__alt_data_end+0xff008628>
    864c:	63000044 	addi	r12,r12,1
    8650:	6018913a 	slli	r12,r12,4
    8654:	39c003cc 	andi	r7,r7,15
    8658:	010000c4 	movi	r4,3
    865c:	1b07883a 	add	r3,r3,r12
    8660:	21c00e2e 	bgeu	r4,r7,869c <memset+0x100>
    8664:	1813883a 	mov	r9,r3
    8668:	3811883a 	mov	r8,r7
    866c:	010000c4 	movi	r4,3
    8670:	49800015 	stw	r6,0(r9)
    8674:	423fff04 	addi	r8,r8,-4
    8678:	4a400104 	addi	r9,r9,4
    867c:	223ffc36 	bltu	r4,r8,8670 <__alt_data_end+0xff008670>
    8680:	393fff04 	addi	r4,r7,-4
    8684:	2008d0ba 	srli	r4,r4,2
    8688:	39c000cc 	andi	r7,r7,3
    868c:	21000044 	addi	r4,r4,1
    8690:	2109883a 	add	r4,r4,r4
    8694:	2109883a 	add	r4,r4,r4
    8698:	1907883a 	add	r3,r3,r4
    869c:	38000526 	beq	r7,zero,86b4 <memset+0x118>
    86a0:	19cf883a 	add	r7,r3,r7
    86a4:	19400005 	stb	r5,0(r3)
    86a8:	18c00044 	addi	r3,r3,1
    86ac:	38fffd1e 	bne	r7,r3,86a4 <__alt_data_end+0xff0086a4>
    86b0:	f800283a 	ret
    86b4:	f800283a 	ret
    86b8:	2007883a 	mov	r3,r4
    86bc:	300f883a 	mov	r7,r6
    86c0:	003fc706 	br	85e0 <__alt_data_end+0xff0085e0>

000086c4 <_Balloc>:
    86c4:	20801317 	ldw	r2,76(r4)
    86c8:	defffc04 	addi	sp,sp,-16
    86cc:	dc400115 	stw	r17,4(sp)
    86d0:	dc000015 	stw	r16,0(sp)
    86d4:	dfc00315 	stw	ra,12(sp)
    86d8:	dc800215 	stw	r18,8(sp)
    86dc:	2023883a 	mov	r17,r4
    86e0:	2821883a 	mov	r16,r5
    86e4:	10000f26 	beq	r2,zero,8724 <_Balloc+0x60>
    86e8:	8407883a 	add	r3,r16,r16
    86ec:	18c7883a 	add	r3,r3,r3
    86f0:	10c7883a 	add	r3,r2,r3
    86f4:	18800017 	ldw	r2,0(r3)
    86f8:	10001126 	beq	r2,zero,8740 <_Balloc+0x7c>
    86fc:	11000017 	ldw	r4,0(r2)
    8700:	19000015 	stw	r4,0(r3)
    8704:	10000415 	stw	zero,16(r2)
    8708:	10000315 	stw	zero,12(r2)
    870c:	dfc00317 	ldw	ra,12(sp)
    8710:	dc800217 	ldw	r18,8(sp)
    8714:	dc400117 	ldw	r17,4(sp)
    8718:	dc000017 	ldw	r16,0(sp)
    871c:	dec00404 	addi	sp,sp,16
    8720:	f800283a 	ret
    8724:	01800844 	movi	r6,33
    8728:	01400104 	movi	r5,4
    872c:	000b5ac0 	call	b5ac <_calloc_r>
    8730:	88801315 	stw	r2,76(r17)
    8734:	103fec1e 	bne	r2,zero,86e8 <__alt_data_end+0xff0086e8>
    8738:	0005883a 	mov	r2,zero
    873c:	003ff306 	br	870c <__alt_data_end+0xff00870c>
    8740:	01400044 	movi	r5,1
    8744:	2c24983a 	sll	r18,r5,r16
    8748:	8809883a 	mov	r4,r17
    874c:	91800144 	addi	r6,r18,5
    8750:	318d883a 	add	r6,r6,r6
    8754:	318d883a 	add	r6,r6,r6
    8758:	000b5ac0 	call	b5ac <_calloc_r>
    875c:	103ff626 	beq	r2,zero,8738 <__alt_data_end+0xff008738>
    8760:	14000115 	stw	r16,4(r2)
    8764:	14800215 	stw	r18,8(r2)
    8768:	003fe606 	br	8704 <__alt_data_end+0xff008704>

0000876c <_Bfree>:
    876c:	28000826 	beq	r5,zero,8790 <_Bfree+0x24>
    8770:	28c00117 	ldw	r3,4(r5)
    8774:	20801317 	ldw	r2,76(r4)
    8778:	18c7883a 	add	r3,r3,r3
    877c:	18c7883a 	add	r3,r3,r3
    8780:	10c5883a 	add	r2,r2,r3
    8784:	10c00017 	ldw	r3,0(r2)
    8788:	28c00015 	stw	r3,0(r5)
    878c:	11400015 	stw	r5,0(r2)
    8790:	f800283a 	ret

00008794 <__multadd>:
    8794:	defffa04 	addi	sp,sp,-24
    8798:	dc800315 	stw	r18,12(sp)
    879c:	dc400215 	stw	r17,8(sp)
    87a0:	dc000115 	stw	r16,4(sp)
    87a4:	2823883a 	mov	r17,r5
    87a8:	2c000417 	ldw	r16,16(r5)
    87ac:	dfc00515 	stw	ra,20(sp)
    87b0:	dcc00415 	stw	r19,16(sp)
    87b4:	2025883a 	mov	r18,r4
    87b8:	29400504 	addi	r5,r5,20
    87bc:	0011883a 	mov	r8,zero
    87c0:	28c00017 	ldw	r3,0(r5)
    87c4:	29400104 	addi	r5,r5,4
    87c8:	42000044 	addi	r8,r8,1
    87cc:	18bfffcc 	andi	r2,r3,65535
    87d0:	1185383a 	mul	r2,r2,r6
    87d4:	1806d43a 	srli	r3,r3,16
    87d8:	11cf883a 	add	r7,r2,r7
    87dc:	3808d43a 	srli	r4,r7,16
    87e0:	1987383a 	mul	r3,r3,r6
    87e4:	38bfffcc 	andi	r2,r7,65535
    87e8:	1907883a 	add	r3,r3,r4
    87ec:	1808943a 	slli	r4,r3,16
    87f0:	180ed43a 	srli	r7,r3,16
    87f4:	2085883a 	add	r2,r4,r2
    87f8:	28bfff15 	stw	r2,-4(r5)
    87fc:	443ff016 	blt	r8,r16,87c0 <__alt_data_end+0xff0087c0>
    8800:	38000926 	beq	r7,zero,8828 <__multadd+0x94>
    8804:	88800217 	ldw	r2,8(r17)
    8808:	80800f0e 	bge	r16,r2,8848 <__multadd+0xb4>
    880c:	80800144 	addi	r2,r16,5
    8810:	1085883a 	add	r2,r2,r2
    8814:	1085883a 	add	r2,r2,r2
    8818:	8885883a 	add	r2,r17,r2
    881c:	11c00015 	stw	r7,0(r2)
    8820:	84000044 	addi	r16,r16,1
    8824:	8c000415 	stw	r16,16(r17)
    8828:	8805883a 	mov	r2,r17
    882c:	dfc00517 	ldw	ra,20(sp)
    8830:	dcc00417 	ldw	r19,16(sp)
    8834:	dc800317 	ldw	r18,12(sp)
    8838:	dc400217 	ldw	r17,8(sp)
    883c:	dc000117 	ldw	r16,4(sp)
    8840:	dec00604 	addi	sp,sp,24
    8844:	f800283a 	ret
    8848:	89400117 	ldw	r5,4(r17)
    884c:	9009883a 	mov	r4,r18
    8850:	d9c00015 	stw	r7,0(sp)
    8854:	29400044 	addi	r5,r5,1
    8858:	00086c40 	call	86c4 <_Balloc>
    885c:	89800417 	ldw	r6,16(r17)
    8860:	89400304 	addi	r5,r17,12
    8864:	11000304 	addi	r4,r2,12
    8868:	31800084 	addi	r6,r6,2
    886c:	318d883a 	add	r6,r6,r6
    8870:	318d883a 	add	r6,r6,r6
    8874:	1027883a 	mov	r19,r2
    8878:	00082f80 	call	82f8 <memcpy>
    887c:	d9c00017 	ldw	r7,0(sp)
    8880:	88000a26 	beq	r17,zero,88ac <__multadd+0x118>
    8884:	88c00117 	ldw	r3,4(r17)
    8888:	90801317 	ldw	r2,76(r18)
    888c:	18c7883a 	add	r3,r3,r3
    8890:	18c7883a 	add	r3,r3,r3
    8894:	10c5883a 	add	r2,r2,r3
    8898:	10c00017 	ldw	r3,0(r2)
    889c:	88c00015 	stw	r3,0(r17)
    88a0:	14400015 	stw	r17,0(r2)
    88a4:	9823883a 	mov	r17,r19
    88a8:	003fd806 	br	880c <__alt_data_end+0xff00880c>
    88ac:	9823883a 	mov	r17,r19
    88b0:	003fd606 	br	880c <__alt_data_end+0xff00880c>

000088b4 <__s2b>:
    88b4:	defff904 	addi	sp,sp,-28
    88b8:	dc400115 	stw	r17,4(sp)
    88bc:	dc000015 	stw	r16,0(sp)
    88c0:	2023883a 	mov	r17,r4
    88c4:	2821883a 	mov	r16,r5
    88c8:	39000204 	addi	r4,r7,8
    88cc:	01400244 	movi	r5,9
    88d0:	dcc00315 	stw	r19,12(sp)
    88d4:	dc800215 	stw	r18,8(sp)
    88d8:	dfc00615 	stw	ra,24(sp)
    88dc:	dd400515 	stw	r21,20(sp)
    88e0:	dd000415 	stw	r20,16(sp)
    88e4:	3825883a 	mov	r18,r7
    88e8:	3027883a 	mov	r19,r6
    88ec:	0001c080 	call	1c08 <__divsi3>
    88f0:	00c00044 	movi	r3,1
    88f4:	000b883a 	mov	r5,zero
    88f8:	1880030e 	bge	r3,r2,8908 <__s2b+0x54>
    88fc:	18c7883a 	add	r3,r3,r3
    8900:	29400044 	addi	r5,r5,1
    8904:	18bffd16 	blt	r3,r2,88fc <__alt_data_end+0xff0088fc>
    8908:	8809883a 	mov	r4,r17
    890c:	00086c40 	call	86c4 <_Balloc>
    8910:	d8c00717 	ldw	r3,28(sp)
    8914:	10c00515 	stw	r3,20(r2)
    8918:	00c00044 	movi	r3,1
    891c:	10c00415 	stw	r3,16(r2)
    8920:	00c00244 	movi	r3,9
    8924:	1cc0210e 	bge	r3,r19,89ac <__s2b+0xf8>
    8928:	80eb883a 	add	r21,r16,r3
    892c:	a829883a 	mov	r20,r21
    8930:	84e1883a 	add	r16,r16,r19
    8934:	a1c00007 	ldb	r7,0(r20)
    8938:	01800284 	movi	r6,10
    893c:	a5000044 	addi	r20,r20,1
    8940:	100b883a 	mov	r5,r2
    8944:	39fff404 	addi	r7,r7,-48
    8948:	8809883a 	mov	r4,r17
    894c:	00087940 	call	8794 <__multadd>
    8950:	a43ff81e 	bne	r20,r16,8934 <__alt_data_end+0xff008934>
    8954:	ace1883a 	add	r16,r21,r19
    8958:	843ffe04 	addi	r16,r16,-8
    895c:	9c800a0e 	bge	r19,r18,8988 <__s2b+0xd4>
    8960:	94e5c83a 	sub	r18,r18,r19
    8964:	84a5883a 	add	r18,r16,r18
    8968:	81c00007 	ldb	r7,0(r16)
    896c:	01800284 	movi	r6,10
    8970:	84000044 	addi	r16,r16,1
    8974:	100b883a 	mov	r5,r2
    8978:	39fff404 	addi	r7,r7,-48
    897c:	8809883a 	mov	r4,r17
    8980:	00087940 	call	8794 <__multadd>
    8984:	84bff81e 	bne	r16,r18,8968 <__alt_data_end+0xff008968>
    8988:	dfc00617 	ldw	ra,24(sp)
    898c:	dd400517 	ldw	r21,20(sp)
    8990:	dd000417 	ldw	r20,16(sp)
    8994:	dcc00317 	ldw	r19,12(sp)
    8998:	dc800217 	ldw	r18,8(sp)
    899c:	dc400117 	ldw	r17,4(sp)
    89a0:	dc000017 	ldw	r16,0(sp)
    89a4:	dec00704 	addi	sp,sp,28
    89a8:	f800283a 	ret
    89ac:	84000284 	addi	r16,r16,10
    89b0:	1827883a 	mov	r19,r3
    89b4:	003fe906 	br	895c <__alt_data_end+0xff00895c>

000089b8 <__hi0bits>:
    89b8:	20bfffec 	andhi	r2,r4,65535
    89bc:	1000141e 	bne	r2,zero,8a10 <__hi0bits+0x58>
    89c0:	2008943a 	slli	r4,r4,16
    89c4:	00800404 	movi	r2,16
    89c8:	20ffc02c 	andhi	r3,r4,65280
    89cc:	1800021e 	bne	r3,zero,89d8 <__hi0bits+0x20>
    89d0:	2008923a 	slli	r4,r4,8
    89d4:	10800204 	addi	r2,r2,8
    89d8:	20fc002c 	andhi	r3,r4,61440
    89dc:	1800021e 	bne	r3,zero,89e8 <__hi0bits+0x30>
    89e0:	2008913a 	slli	r4,r4,4
    89e4:	10800104 	addi	r2,r2,4
    89e8:	20f0002c 	andhi	r3,r4,49152
    89ec:	1800031e 	bne	r3,zero,89fc <__hi0bits+0x44>
    89f0:	2109883a 	add	r4,r4,r4
    89f4:	10800084 	addi	r2,r2,2
    89f8:	2109883a 	add	r4,r4,r4
    89fc:	20000316 	blt	r4,zero,8a0c <__hi0bits+0x54>
    8a00:	2110002c 	andhi	r4,r4,16384
    8a04:	2000041e 	bne	r4,zero,8a18 <__hi0bits+0x60>
    8a08:	00800804 	movi	r2,32
    8a0c:	f800283a 	ret
    8a10:	0005883a 	mov	r2,zero
    8a14:	003fec06 	br	89c8 <__alt_data_end+0xff0089c8>
    8a18:	10800044 	addi	r2,r2,1
    8a1c:	f800283a 	ret

00008a20 <__lo0bits>:
    8a20:	20c00017 	ldw	r3,0(r4)
    8a24:	188001cc 	andi	r2,r3,7
    8a28:	10000826 	beq	r2,zero,8a4c <__lo0bits+0x2c>
    8a2c:	1880004c 	andi	r2,r3,1
    8a30:	1000211e 	bne	r2,zero,8ab8 <__lo0bits+0x98>
    8a34:	1880008c 	andi	r2,r3,2
    8a38:	1000211e 	bne	r2,zero,8ac0 <__lo0bits+0xa0>
    8a3c:	1806d0ba 	srli	r3,r3,2
    8a40:	00800084 	movi	r2,2
    8a44:	20c00015 	stw	r3,0(r4)
    8a48:	f800283a 	ret
    8a4c:	18bfffcc 	andi	r2,r3,65535
    8a50:	10001326 	beq	r2,zero,8aa0 <__lo0bits+0x80>
    8a54:	0005883a 	mov	r2,zero
    8a58:	19403fcc 	andi	r5,r3,255
    8a5c:	2800021e 	bne	r5,zero,8a68 <__lo0bits+0x48>
    8a60:	1806d23a 	srli	r3,r3,8
    8a64:	10800204 	addi	r2,r2,8
    8a68:	194003cc 	andi	r5,r3,15
    8a6c:	2800021e 	bne	r5,zero,8a78 <__lo0bits+0x58>
    8a70:	1806d13a 	srli	r3,r3,4
    8a74:	10800104 	addi	r2,r2,4
    8a78:	194000cc 	andi	r5,r3,3
    8a7c:	2800021e 	bne	r5,zero,8a88 <__lo0bits+0x68>
    8a80:	1806d0ba 	srli	r3,r3,2
    8a84:	10800084 	addi	r2,r2,2
    8a88:	1940004c 	andi	r5,r3,1
    8a8c:	2800081e 	bne	r5,zero,8ab0 <__lo0bits+0x90>
    8a90:	1806d07a 	srli	r3,r3,1
    8a94:	1800051e 	bne	r3,zero,8aac <__lo0bits+0x8c>
    8a98:	00800804 	movi	r2,32
    8a9c:	f800283a 	ret
    8aa0:	1806d43a 	srli	r3,r3,16
    8aa4:	00800404 	movi	r2,16
    8aa8:	003feb06 	br	8a58 <__alt_data_end+0xff008a58>
    8aac:	10800044 	addi	r2,r2,1
    8ab0:	20c00015 	stw	r3,0(r4)
    8ab4:	f800283a 	ret
    8ab8:	0005883a 	mov	r2,zero
    8abc:	f800283a 	ret
    8ac0:	1806d07a 	srli	r3,r3,1
    8ac4:	00800044 	movi	r2,1
    8ac8:	20c00015 	stw	r3,0(r4)
    8acc:	f800283a 	ret

00008ad0 <__i2b>:
    8ad0:	defffd04 	addi	sp,sp,-12
    8ad4:	dc000015 	stw	r16,0(sp)
    8ad8:	04000044 	movi	r16,1
    8adc:	dc400115 	stw	r17,4(sp)
    8ae0:	2823883a 	mov	r17,r5
    8ae4:	800b883a 	mov	r5,r16
    8ae8:	dfc00215 	stw	ra,8(sp)
    8aec:	00086c40 	call	86c4 <_Balloc>
    8af0:	14400515 	stw	r17,20(r2)
    8af4:	14000415 	stw	r16,16(r2)
    8af8:	dfc00217 	ldw	ra,8(sp)
    8afc:	dc400117 	ldw	r17,4(sp)
    8b00:	dc000017 	ldw	r16,0(sp)
    8b04:	dec00304 	addi	sp,sp,12
    8b08:	f800283a 	ret

00008b0c <__multiply>:
    8b0c:	defffa04 	addi	sp,sp,-24
    8b10:	dcc00315 	stw	r19,12(sp)
    8b14:	dc800215 	stw	r18,8(sp)
    8b18:	34c00417 	ldw	r19,16(r6)
    8b1c:	2c800417 	ldw	r18,16(r5)
    8b20:	dd000415 	stw	r20,16(sp)
    8b24:	dc400115 	stw	r17,4(sp)
    8b28:	dfc00515 	stw	ra,20(sp)
    8b2c:	dc000015 	stw	r16,0(sp)
    8b30:	2829883a 	mov	r20,r5
    8b34:	3023883a 	mov	r17,r6
    8b38:	94c0050e 	bge	r18,r19,8b50 <__multiply+0x44>
    8b3c:	9007883a 	mov	r3,r18
    8b40:	3029883a 	mov	r20,r6
    8b44:	9825883a 	mov	r18,r19
    8b48:	2823883a 	mov	r17,r5
    8b4c:	1827883a 	mov	r19,r3
    8b50:	a0800217 	ldw	r2,8(r20)
    8b54:	94e1883a 	add	r16,r18,r19
    8b58:	a1400117 	ldw	r5,4(r20)
    8b5c:	1400010e 	bge	r2,r16,8b64 <__multiply+0x58>
    8b60:	29400044 	addi	r5,r5,1
    8b64:	00086c40 	call	86c4 <_Balloc>
    8b68:	8415883a 	add	r10,r16,r16
    8b6c:	12c00504 	addi	r11,r2,20
    8b70:	5295883a 	add	r10,r10,r10
    8b74:	5a95883a 	add	r10,r11,r10
    8b78:	5807883a 	mov	r3,r11
    8b7c:	5a80032e 	bgeu	r11,r10,8b8c <__multiply+0x80>
    8b80:	18000015 	stw	zero,0(r3)
    8b84:	18c00104 	addi	r3,r3,4
    8b88:	1abffd36 	bltu	r3,r10,8b80 <__alt_data_end+0xff008b80>
    8b8c:	9ce7883a 	add	r19,r19,r19
    8b90:	94a5883a 	add	r18,r18,r18
    8b94:	89800504 	addi	r6,r17,20
    8b98:	9ce7883a 	add	r19,r19,r19
    8b9c:	a3400504 	addi	r13,r20,20
    8ba0:	94a5883a 	add	r18,r18,r18
    8ba4:	34d9883a 	add	r12,r6,r19
    8ba8:	6c93883a 	add	r9,r13,r18
    8bac:	3300422e 	bgeu	r6,r12,8cb8 <__multiply+0x1ac>
    8bb0:	37c00017 	ldw	ra,0(r6)
    8bb4:	fbffffcc 	andi	r15,ra,65535
    8bb8:	78001b26 	beq	r15,zero,8c28 <__multiply+0x11c>
    8bbc:	5811883a 	mov	r8,r11
    8bc0:	681d883a 	mov	r14,r13
    8bc4:	000f883a 	mov	r7,zero
    8bc8:	71000017 	ldw	r4,0(r14)
    8bcc:	40c00017 	ldw	r3,0(r8)
    8bd0:	73800104 	addi	r14,r14,4
    8bd4:	217fffcc 	andi	r5,r4,65535
    8bd8:	2bcb383a 	mul	r5,r5,r15
    8bdc:	2008d43a 	srli	r4,r4,16
    8be0:	1c7fffcc 	andi	r17,r3,65535
    8be4:	2c4b883a 	add	r5,r5,r17
    8be8:	29cb883a 	add	r5,r5,r7
    8bec:	23c9383a 	mul	r4,r4,r15
    8bf0:	1806d43a 	srli	r3,r3,16
    8bf4:	280ed43a 	srli	r7,r5,16
    8bf8:	297fffcc 	andi	r5,r5,65535
    8bfc:	20c7883a 	add	r3,r4,r3
    8c00:	19c7883a 	add	r3,r3,r7
    8c04:	1808943a 	slli	r4,r3,16
    8c08:	4023883a 	mov	r17,r8
    8c0c:	180ed43a 	srli	r7,r3,16
    8c10:	214ab03a 	or	r5,r4,r5
    8c14:	41400015 	stw	r5,0(r8)
    8c18:	42000104 	addi	r8,r8,4
    8c1c:	727fea36 	bltu	r14,r9,8bc8 <__alt_data_end+0xff008bc8>
    8c20:	89c00115 	stw	r7,4(r17)
    8c24:	37c00017 	ldw	ra,0(r6)
    8c28:	f83ed43a 	srli	ra,ra,16
    8c2c:	f8001f26 	beq	ra,zero,8cac <__multiply+0x1a0>
    8c30:	58c00017 	ldw	r3,0(r11)
    8c34:	681d883a 	mov	r14,r13
    8c38:	581f883a 	mov	r15,r11
    8c3c:	1811883a 	mov	r8,r3
    8c40:	5825883a 	mov	r18,r11
    8c44:	000f883a 	mov	r7,zero
    8c48:	00000106 	br	8c50 <__multiply+0x144>
    8c4c:	8825883a 	mov	r18,r17
    8c50:	7140000b 	ldhu	r5,0(r14)
    8c54:	4010d43a 	srli	r8,r8,16
    8c58:	193fffcc 	andi	r4,r3,65535
    8c5c:	2fcb383a 	mul	r5,r5,ra
    8c60:	7bc00104 	addi	r15,r15,4
    8c64:	73800104 	addi	r14,r14,4
    8c68:	2a0b883a 	add	r5,r5,r8
    8c6c:	29cb883a 	add	r5,r5,r7
    8c70:	2806943a 	slli	r3,r5,16
    8c74:	94400104 	addi	r17,r18,4
    8c78:	280ad43a 	srli	r5,r5,16
    8c7c:	1908b03a 	or	r4,r3,r4
    8c80:	793fff15 	stw	r4,-4(r15)
    8c84:	70ffff17 	ldw	r3,-4(r14)
    8c88:	8a000017 	ldw	r8,0(r17)
    8c8c:	1806d43a 	srli	r3,r3,16
    8c90:	413fffcc 	andi	r4,r8,65535
    8c94:	1fc7383a 	mul	r3,r3,ra
    8c98:	1907883a 	add	r3,r3,r4
    8c9c:	1947883a 	add	r3,r3,r5
    8ca0:	180ed43a 	srli	r7,r3,16
    8ca4:	727fe936 	bltu	r14,r9,8c4c <__alt_data_end+0xff008c4c>
    8ca8:	90c00115 	stw	r3,4(r18)
    8cac:	31800104 	addi	r6,r6,4
    8cb0:	5ac00104 	addi	r11,r11,4
    8cb4:	333fbe36 	bltu	r6,r12,8bb0 <__alt_data_end+0xff008bb0>
    8cb8:	0400090e 	bge	zero,r16,8ce0 <__multiply+0x1d4>
    8cbc:	50ffff17 	ldw	r3,-4(r10)
    8cc0:	52bfff04 	addi	r10,r10,-4
    8cc4:	18000326 	beq	r3,zero,8cd4 <__multiply+0x1c8>
    8cc8:	00000506 	br	8ce0 <__multiply+0x1d4>
    8ccc:	50c00017 	ldw	r3,0(r10)
    8cd0:	1800031e 	bne	r3,zero,8ce0 <__multiply+0x1d4>
    8cd4:	843fffc4 	addi	r16,r16,-1
    8cd8:	52bfff04 	addi	r10,r10,-4
    8cdc:	803ffb1e 	bne	r16,zero,8ccc <__alt_data_end+0xff008ccc>
    8ce0:	14000415 	stw	r16,16(r2)
    8ce4:	dfc00517 	ldw	ra,20(sp)
    8ce8:	dd000417 	ldw	r20,16(sp)
    8cec:	dcc00317 	ldw	r19,12(sp)
    8cf0:	dc800217 	ldw	r18,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	dc000017 	ldw	r16,0(sp)
    8cfc:	dec00604 	addi	sp,sp,24
    8d00:	f800283a 	ret

00008d04 <__pow5mult>:
    8d04:	defffa04 	addi	sp,sp,-24
    8d08:	dcc00315 	stw	r19,12(sp)
    8d0c:	dc000015 	stw	r16,0(sp)
    8d10:	dfc00515 	stw	ra,20(sp)
    8d14:	dd000415 	stw	r20,16(sp)
    8d18:	dc800215 	stw	r18,8(sp)
    8d1c:	dc400115 	stw	r17,4(sp)
    8d20:	308000cc 	andi	r2,r6,3
    8d24:	3021883a 	mov	r16,r6
    8d28:	2027883a 	mov	r19,r4
    8d2c:	10002f1e 	bne	r2,zero,8dec <__pow5mult+0xe8>
    8d30:	2825883a 	mov	r18,r5
    8d34:	8021d0ba 	srai	r16,r16,2
    8d38:	80001a26 	beq	r16,zero,8da4 <__pow5mult+0xa0>
    8d3c:	9c401217 	ldw	r17,72(r19)
    8d40:	8800061e 	bne	r17,zero,8d5c <__pow5mult+0x58>
    8d44:	00003406 	br	8e18 <__pow5mult+0x114>
    8d48:	8021d07a 	srai	r16,r16,1
    8d4c:	80001526 	beq	r16,zero,8da4 <__pow5mult+0xa0>
    8d50:	88800017 	ldw	r2,0(r17)
    8d54:	10001c26 	beq	r2,zero,8dc8 <__pow5mult+0xc4>
    8d58:	1023883a 	mov	r17,r2
    8d5c:	8080004c 	andi	r2,r16,1
    8d60:	103ff926 	beq	r2,zero,8d48 <__alt_data_end+0xff008d48>
    8d64:	880d883a 	mov	r6,r17
    8d68:	900b883a 	mov	r5,r18
    8d6c:	9809883a 	mov	r4,r19
    8d70:	0008b0c0 	call	8b0c <__multiply>
    8d74:	90001b26 	beq	r18,zero,8de4 <__pow5mult+0xe0>
    8d78:	91000117 	ldw	r4,4(r18)
    8d7c:	98c01317 	ldw	r3,76(r19)
    8d80:	8021d07a 	srai	r16,r16,1
    8d84:	2109883a 	add	r4,r4,r4
    8d88:	2109883a 	add	r4,r4,r4
    8d8c:	1907883a 	add	r3,r3,r4
    8d90:	19000017 	ldw	r4,0(r3)
    8d94:	91000015 	stw	r4,0(r18)
    8d98:	1c800015 	stw	r18,0(r3)
    8d9c:	1025883a 	mov	r18,r2
    8da0:	803feb1e 	bne	r16,zero,8d50 <__alt_data_end+0xff008d50>
    8da4:	9005883a 	mov	r2,r18
    8da8:	dfc00517 	ldw	ra,20(sp)
    8dac:	dd000417 	ldw	r20,16(sp)
    8db0:	dcc00317 	ldw	r19,12(sp)
    8db4:	dc800217 	ldw	r18,8(sp)
    8db8:	dc400117 	ldw	r17,4(sp)
    8dbc:	dc000017 	ldw	r16,0(sp)
    8dc0:	dec00604 	addi	sp,sp,24
    8dc4:	f800283a 	ret
    8dc8:	880d883a 	mov	r6,r17
    8dcc:	880b883a 	mov	r5,r17
    8dd0:	9809883a 	mov	r4,r19
    8dd4:	0008b0c0 	call	8b0c <__multiply>
    8dd8:	88800015 	stw	r2,0(r17)
    8ddc:	10000015 	stw	zero,0(r2)
    8de0:	003fdd06 	br	8d58 <__alt_data_end+0xff008d58>
    8de4:	1025883a 	mov	r18,r2
    8de8:	003fd706 	br	8d48 <__alt_data_end+0xff008d48>
    8dec:	10bfffc4 	addi	r2,r2,-1
    8df0:	1085883a 	add	r2,r2,r2
    8df4:	00c00074 	movhi	r3,1
    8df8:	18c58104 	addi	r3,r3,5636
    8dfc:	1085883a 	add	r2,r2,r2
    8e00:	1885883a 	add	r2,r3,r2
    8e04:	11800017 	ldw	r6,0(r2)
    8e08:	000f883a 	mov	r7,zero
    8e0c:	00087940 	call	8794 <__multadd>
    8e10:	1025883a 	mov	r18,r2
    8e14:	003fc706 	br	8d34 <__alt_data_end+0xff008d34>
    8e18:	05000044 	movi	r20,1
    8e1c:	a00b883a 	mov	r5,r20
    8e20:	9809883a 	mov	r4,r19
    8e24:	00086c40 	call	86c4 <_Balloc>
    8e28:	1023883a 	mov	r17,r2
    8e2c:	00809c44 	movi	r2,625
    8e30:	88800515 	stw	r2,20(r17)
    8e34:	8d000415 	stw	r20,16(r17)
    8e38:	9c401215 	stw	r17,72(r19)
    8e3c:	88000015 	stw	zero,0(r17)
    8e40:	003fc606 	br	8d5c <__alt_data_end+0xff008d5c>

00008e44 <__lshift>:
    8e44:	defff904 	addi	sp,sp,-28
    8e48:	dd400515 	stw	r21,20(sp)
    8e4c:	dcc00315 	stw	r19,12(sp)
    8e50:	302bd17a 	srai	r21,r6,5
    8e54:	2cc00417 	ldw	r19,16(r5)
    8e58:	28800217 	ldw	r2,8(r5)
    8e5c:	dd000415 	stw	r20,16(sp)
    8e60:	ace7883a 	add	r19,r21,r19
    8e64:	dc800215 	stw	r18,8(sp)
    8e68:	dc400115 	stw	r17,4(sp)
    8e6c:	dc000015 	stw	r16,0(sp)
    8e70:	dfc00615 	stw	ra,24(sp)
    8e74:	9c000044 	addi	r16,r19,1
    8e78:	2823883a 	mov	r17,r5
    8e7c:	3029883a 	mov	r20,r6
    8e80:	2025883a 	mov	r18,r4
    8e84:	29400117 	ldw	r5,4(r5)
    8e88:	1400030e 	bge	r2,r16,8e98 <__lshift+0x54>
    8e8c:	1085883a 	add	r2,r2,r2
    8e90:	29400044 	addi	r5,r5,1
    8e94:	143ffd16 	blt	r2,r16,8e8c <__alt_data_end+0xff008e8c>
    8e98:	9009883a 	mov	r4,r18
    8e9c:	00086c40 	call	86c4 <_Balloc>
    8ea0:	10c00504 	addi	r3,r2,20
    8ea4:	0540070e 	bge	zero,r21,8ec4 <__lshift+0x80>
    8ea8:	ad6b883a 	add	r21,r21,r21
    8eac:	ad6b883a 	add	r21,r21,r21
    8eb0:	1809883a 	mov	r4,r3
    8eb4:	1d47883a 	add	r3,r3,r21
    8eb8:	20000015 	stw	zero,0(r4)
    8ebc:	21000104 	addi	r4,r4,4
    8ec0:	193ffd1e 	bne	r3,r4,8eb8 <__alt_data_end+0xff008eb8>
    8ec4:	8a000417 	ldw	r8,16(r17)
    8ec8:	89000504 	addi	r4,r17,20
    8ecc:	a18007cc 	andi	r6,r20,31
    8ed0:	4211883a 	add	r8,r8,r8
    8ed4:	4211883a 	add	r8,r8,r8
    8ed8:	2211883a 	add	r8,r4,r8
    8edc:	30002326 	beq	r6,zero,8f6c <__lshift+0x128>
    8ee0:	02400804 	movi	r9,32
    8ee4:	4993c83a 	sub	r9,r9,r6
    8ee8:	000b883a 	mov	r5,zero
    8eec:	21c00017 	ldw	r7,0(r4)
    8ef0:	1815883a 	mov	r10,r3
    8ef4:	18c00104 	addi	r3,r3,4
    8ef8:	398e983a 	sll	r7,r7,r6
    8efc:	21000104 	addi	r4,r4,4
    8f00:	394ab03a 	or	r5,r7,r5
    8f04:	197fff15 	stw	r5,-4(r3)
    8f08:	217fff17 	ldw	r5,-4(r4)
    8f0c:	2a4ad83a 	srl	r5,r5,r9
    8f10:	223ff636 	bltu	r4,r8,8eec <__alt_data_end+0xff008eec>
    8f14:	51400115 	stw	r5,4(r10)
    8f18:	28001a1e 	bne	r5,zero,8f84 <__lshift+0x140>
    8f1c:	843fffc4 	addi	r16,r16,-1
    8f20:	14000415 	stw	r16,16(r2)
    8f24:	88000826 	beq	r17,zero,8f48 <__lshift+0x104>
    8f28:	89000117 	ldw	r4,4(r17)
    8f2c:	90c01317 	ldw	r3,76(r18)
    8f30:	2109883a 	add	r4,r4,r4
    8f34:	2109883a 	add	r4,r4,r4
    8f38:	1907883a 	add	r3,r3,r4
    8f3c:	19000017 	ldw	r4,0(r3)
    8f40:	89000015 	stw	r4,0(r17)
    8f44:	1c400015 	stw	r17,0(r3)
    8f48:	dfc00617 	ldw	ra,24(sp)
    8f4c:	dd400517 	ldw	r21,20(sp)
    8f50:	dd000417 	ldw	r20,16(sp)
    8f54:	dcc00317 	ldw	r19,12(sp)
    8f58:	dc800217 	ldw	r18,8(sp)
    8f5c:	dc400117 	ldw	r17,4(sp)
    8f60:	dc000017 	ldw	r16,0(sp)
    8f64:	dec00704 	addi	sp,sp,28
    8f68:	f800283a 	ret
    8f6c:	21400017 	ldw	r5,0(r4)
    8f70:	18c00104 	addi	r3,r3,4
    8f74:	21000104 	addi	r4,r4,4
    8f78:	197fff15 	stw	r5,-4(r3)
    8f7c:	223ffb36 	bltu	r4,r8,8f6c <__alt_data_end+0xff008f6c>
    8f80:	003fe606 	br	8f1c <__alt_data_end+0xff008f1c>
    8f84:	9c000084 	addi	r16,r19,2
    8f88:	003fe406 	br	8f1c <__alt_data_end+0xff008f1c>

00008f8c <__mcmp>:
    8f8c:	20800417 	ldw	r2,16(r4)
    8f90:	28c00417 	ldw	r3,16(r5)
    8f94:	10c5c83a 	sub	r2,r2,r3
    8f98:	1000111e 	bne	r2,zero,8fe0 <__mcmp+0x54>
    8f9c:	18c7883a 	add	r3,r3,r3
    8fa0:	18c7883a 	add	r3,r3,r3
    8fa4:	21000504 	addi	r4,r4,20
    8fa8:	29400504 	addi	r5,r5,20
    8fac:	20c5883a 	add	r2,r4,r3
    8fb0:	28cb883a 	add	r5,r5,r3
    8fb4:	00000106 	br	8fbc <__mcmp+0x30>
    8fb8:	20800a2e 	bgeu	r4,r2,8fe4 <__mcmp+0x58>
    8fbc:	10bfff04 	addi	r2,r2,-4
    8fc0:	297fff04 	addi	r5,r5,-4
    8fc4:	11800017 	ldw	r6,0(r2)
    8fc8:	28c00017 	ldw	r3,0(r5)
    8fcc:	30fffa26 	beq	r6,r3,8fb8 <__alt_data_end+0xff008fb8>
    8fd0:	30c00236 	bltu	r6,r3,8fdc <__mcmp+0x50>
    8fd4:	00800044 	movi	r2,1
    8fd8:	f800283a 	ret
    8fdc:	00bfffc4 	movi	r2,-1
    8fe0:	f800283a 	ret
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	f800283a 	ret

00008fec <__mdiff>:
    8fec:	28c00417 	ldw	r3,16(r5)
    8ff0:	30800417 	ldw	r2,16(r6)
    8ff4:	defffa04 	addi	sp,sp,-24
    8ff8:	dcc00315 	stw	r19,12(sp)
    8ffc:	dc800215 	stw	r18,8(sp)
    9000:	dfc00515 	stw	ra,20(sp)
    9004:	dd000415 	stw	r20,16(sp)
    9008:	dc400115 	stw	r17,4(sp)
    900c:	dc000015 	stw	r16,0(sp)
    9010:	1887c83a 	sub	r3,r3,r2
    9014:	2825883a 	mov	r18,r5
    9018:	3027883a 	mov	r19,r6
    901c:	1800141e 	bne	r3,zero,9070 <__mdiff+0x84>
    9020:	1085883a 	add	r2,r2,r2
    9024:	1085883a 	add	r2,r2,r2
    9028:	2a000504 	addi	r8,r5,20
    902c:	34000504 	addi	r16,r6,20
    9030:	4087883a 	add	r3,r8,r2
    9034:	8085883a 	add	r2,r16,r2
    9038:	00000106 	br	9040 <__mdiff+0x54>
    903c:	40c0592e 	bgeu	r8,r3,91a4 <__mdiff+0x1b8>
    9040:	18ffff04 	addi	r3,r3,-4
    9044:	10bfff04 	addi	r2,r2,-4
    9048:	19c00017 	ldw	r7,0(r3)
    904c:	11400017 	ldw	r5,0(r2)
    9050:	397ffa26 	beq	r7,r5,903c <__alt_data_end+0xff00903c>
    9054:	3940592e 	bgeu	r7,r5,91bc <__mdiff+0x1d0>
    9058:	9005883a 	mov	r2,r18
    905c:	4023883a 	mov	r17,r8
    9060:	9825883a 	mov	r18,r19
    9064:	05000044 	movi	r20,1
    9068:	1027883a 	mov	r19,r2
    906c:	00000406 	br	9080 <__mdiff+0x94>
    9070:	18005616 	blt	r3,zero,91cc <__mdiff+0x1e0>
    9074:	34400504 	addi	r17,r6,20
    9078:	2c000504 	addi	r16,r5,20
    907c:	0029883a 	mov	r20,zero
    9080:	91400117 	ldw	r5,4(r18)
    9084:	00086c40 	call	86c4 <_Balloc>
    9088:	92400417 	ldw	r9,16(r18)
    908c:	9b000417 	ldw	r12,16(r19)
    9090:	12c00504 	addi	r11,r2,20
    9094:	4a51883a 	add	r8,r9,r9
    9098:	6319883a 	add	r12,r12,r12
    909c:	4211883a 	add	r8,r8,r8
    90a0:	6319883a 	add	r12,r12,r12
    90a4:	15000315 	stw	r20,12(r2)
    90a8:	8211883a 	add	r8,r16,r8
    90ac:	8b19883a 	add	r12,r17,r12
    90b0:	0007883a 	mov	r3,zero
    90b4:	81400017 	ldw	r5,0(r16)
    90b8:	89c00017 	ldw	r7,0(r17)
    90bc:	59800104 	addi	r6,r11,4
    90c0:	293fffcc 	andi	r4,r5,65535
    90c4:	20c7883a 	add	r3,r4,r3
    90c8:	393fffcc 	andi	r4,r7,65535
    90cc:	1909c83a 	sub	r4,r3,r4
    90d0:	280ad43a 	srli	r5,r5,16
    90d4:	380ed43a 	srli	r7,r7,16
    90d8:	2007d43a 	srai	r3,r4,16
    90dc:	213fffcc 	andi	r4,r4,65535
    90e0:	29cbc83a 	sub	r5,r5,r7
    90e4:	28c7883a 	add	r3,r5,r3
    90e8:	180a943a 	slli	r5,r3,16
    90ec:	8c400104 	addi	r17,r17,4
    90f0:	84000104 	addi	r16,r16,4
    90f4:	2908b03a 	or	r4,r5,r4
    90f8:	59000015 	stw	r4,0(r11)
    90fc:	1807d43a 	srai	r3,r3,16
    9100:	3015883a 	mov	r10,r6
    9104:	3017883a 	mov	r11,r6
    9108:	8b3fea36 	bltu	r17,r12,90b4 <__alt_data_end+0xff0090b4>
    910c:	8200162e 	bgeu	r16,r8,9168 <__mdiff+0x17c>
    9110:	8017883a 	mov	r11,r16
    9114:	59400017 	ldw	r5,0(r11)
    9118:	31800104 	addi	r6,r6,4
    911c:	5ac00104 	addi	r11,r11,4
    9120:	293fffcc 	andi	r4,r5,65535
    9124:	20c7883a 	add	r3,r4,r3
    9128:	280ed43a 	srli	r7,r5,16
    912c:	180bd43a 	srai	r5,r3,16
    9130:	193fffcc 	andi	r4,r3,65535
    9134:	3947883a 	add	r3,r7,r5
    9138:	180a943a 	slli	r5,r3,16
    913c:	1807d43a 	srai	r3,r3,16
    9140:	2908b03a 	or	r4,r5,r4
    9144:	313fff15 	stw	r4,-4(r6)
    9148:	5a3ff236 	bltu	r11,r8,9114 <__alt_data_end+0xff009114>
    914c:	0406303a 	nor	r3,zero,r16
    9150:	1a07883a 	add	r3,r3,r8
    9154:	1806d0ba 	srli	r3,r3,2
    9158:	18c00044 	addi	r3,r3,1
    915c:	18c7883a 	add	r3,r3,r3
    9160:	18c7883a 	add	r3,r3,r3
    9164:	50d5883a 	add	r10,r10,r3
    9168:	50ffff04 	addi	r3,r10,-4
    916c:	2000041e 	bne	r4,zero,9180 <__mdiff+0x194>
    9170:	18ffff04 	addi	r3,r3,-4
    9174:	19000017 	ldw	r4,0(r3)
    9178:	4a7fffc4 	addi	r9,r9,-1
    917c:	203ffc26 	beq	r4,zero,9170 <__alt_data_end+0xff009170>
    9180:	12400415 	stw	r9,16(r2)
    9184:	dfc00517 	ldw	ra,20(sp)
    9188:	dd000417 	ldw	r20,16(sp)
    918c:	dcc00317 	ldw	r19,12(sp)
    9190:	dc800217 	ldw	r18,8(sp)
    9194:	dc400117 	ldw	r17,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00604 	addi	sp,sp,24
    91a0:	f800283a 	ret
    91a4:	000b883a 	mov	r5,zero
    91a8:	00086c40 	call	86c4 <_Balloc>
    91ac:	00c00044 	movi	r3,1
    91b0:	10c00415 	stw	r3,16(r2)
    91b4:	10000515 	stw	zero,20(r2)
    91b8:	003ff206 	br	9184 <__alt_data_end+0xff009184>
    91bc:	8023883a 	mov	r17,r16
    91c0:	0029883a 	mov	r20,zero
    91c4:	4021883a 	mov	r16,r8
    91c8:	003fad06 	br	9080 <__alt_data_end+0xff009080>
    91cc:	9005883a 	mov	r2,r18
    91d0:	94400504 	addi	r17,r18,20
    91d4:	9c000504 	addi	r16,r19,20
    91d8:	9825883a 	mov	r18,r19
    91dc:	05000044 	movi	r20,1
    91e0:	1027883a 	mov	r19,r2
    91e4:	003fa606 	br	9080 <__alt_data_end+0xff009080>

000091e8 <__ulp>:
    91e8:	295ffc2c 	andhi	r5,r5,32752
    91ec:	00bf3034 	movhi	r2,64704
    91f0:	2887883a 	add	r3,r5,r2
    91f4:	00c0020e 	bge	zero,r3,9200 <__ulp+0x18>
    91f8:	0005883a 	mov	r2,zero
    91fc:	f800283a 	ret
    9200:	00c7c83a 	sub	r3,zero,r3
    9204:	1807d53a 	srai	r3,r3,20
    9208:	008004c4 	movi	r2,19
    920c:	10c00b0e 	bge	r2,r3,923c <__ulp+0x54>
    9210:	18bffb04 	addi	r2,r3,-20
    9214:	01000784 	movi	r4,30
    9218:	0007883a 	mov	r3,zero
    921c:	20800516 	blt	r4,r2,9234 <__ulp+0x4c>
    9220:	010007c4 	movi	r4,31
    9224:	2089c83a 	sub	r4,r4,r2
    9228:	00800044 	movi	r2,1
    922c:	1104983a 	sll	r2,r2,r4
    9230:	f800283a 	ret
    9234:	00800044 	movi	r2,1
    9238:	f800283a 	ret
    923c:	01400234 	movhi	r5,8
    9240:	28c7d83a 	sra	r3,r5,r3
    9244:	0005883a 	mov	r2,zero
    9248:	f800283a 	ret

0000924c <__b2d>:
    924c:	defffa04 	addi	sp,sp,-24
    9250:	dc000015 	stw	r16,0(sp)
    9254:	24000417 	ldw	r16,16(r4)
    9258:	dc400115 	stw	r17,4(sp)
    925c:	24400504 	addi	r17,r4,20
    9260:	8421883a 	add	r16,r16,r16
    9264:	8421883a 	add	r16,r16,r16
    9268:	8c21883a 	add	r16,r17,r16
    926c:	dc800215 	stw	r18,8(sp)
    9270:	84bfff17 	ldw	r18,-4(r16)
    9274:	dd000415 	stw	r20,16(sp)
    9278:	dcc00315 	stw	r19,12(sp)
    927c:	9009883a 	mov	r4,r18
    9280:	2829883a 	mov	r20,r5
    9284:	dfc00515 	stw	ra,20(sp)
    9288:	00089b80 	call	89b8 <__hi0bits>
    928c:	00c00804 	movi	r3,32
    9290:	1889c83a 	sub	r4,r3,r2
    9294:	a1000015 	stw	r4,0(r20)
    9298:	01000284 	movi	r4,10
    929c:	84ffff04 	addi	r19,r16,-4
    92a0:	20801216 	blt	r4,r2,92ec <__b2d+0xa0>
    92a4:	018002c4 	movi	r6,11
    92a8:	308dc83a 	sub	r6,r6,r2
    92ac:	9186d83a 	srl	r3,r18,r6
    92b0:	18cffc34 	orhi	r3,r3,16368
    92b4:	8cc0212e 	bgeu	r17,r19,933c <__b2d+0xf0>
    92b8:	813ffe17 	ldw	r4,-8(r16)
    92bc:	218cd83a 	srl	r6,r4,r6
    92c0:	10800544 	addi	r2,r2,21
    92c4:	9084983a 	sll	r2,r18,r2
    92c8:	1184b03a 	or	r2,r2,r6
    92cc:	dfc00517 	ldw	ra,20(sp)
    92d0:	dd000417 	ldw	r20,16(sp)
    92d4:	dcc00317 	ldw	r19,12(sp)
    92d8:	dc800217 	ldw	r18,8(sp)
    92dc:	dc400117 	ldw	r17,4(sp)
    92e0:	dc000017 	ldw	r16,0(sp)
    92e4:	dec00604 	addi	sp,sp,24
    92e8:	f800283a 	ret
    92ec:	8cc00f2e 	bgeu	r17,r19,932c <__b2d+0xe0>
    92f0:	117ffd44 	addi	r5,r2,-11
    92f4:	80bffe17 	ldw	r2,-8(r16)
    92f8:	28000e26 	beq	r5,zero,9334 <__b2d+0xe8>
    92fc:	1949c83a 	sub	r4,r3,r5
    9300:	9164983a 	sll	r18,r18,r5
    9304:	1106d83a 	srl	r3,r2,r4
    9308:	81bffe04 	addi	r6,r16,-8
    930c:	948ffc34 	orhi	r18,r18,16368
    9310:	90c6b03a 	or	r3,r18,r3
    9314:	89800e2e 	bgeu	r17,r6,9350 <__b2d+0x104>
    9318:	81bffd17 	ldw	r6,-12(r16)
    931c:	1144983a 	sll	r2,r2,r5
    9320:	310ad83a 	srl	r5,r6,r4
    9324:	2884b03a 	or	r2,r5,r2
    9328:	003fe806 	br	92cc <__alt_data_end+0xff0092cc>
    932c:	10bffd44 	addi	r2,r2,-11
    9330:	1000041e 	bne	r2,zero,9344 <__b2d+0xf8>
    9334:	90cffc34 	orhi	r3,r18,16368
    9338:	003fe406 	br	92cc <__alt_data_end+0xff0092cc>
    933c:	000d883a 	mov	r6,zero
    9340:	003fdf06 	br	92c0 <__alt_data_end+0xff0092c0>
    9344:	90a4983a 	sll	r18,r18,r2
    9348:	0005883a 	mov	r2,zero
    934c:	003ff906 	br	9334 <__alt_data_end+0xff009334>
    9350:	1144983a 	sll	r2,r2,r5
    9354:	003fdd06 	br	92cc <__alt_data_end+0xff0092cc>

00009358 <__d2b>:
    9358:	defff804 	addi	sp,sp,-32
    935c:	dc000215 	stw	r16,8(sp)
    9360:	3021883a 	mov	r16,r6
    9364:	dc400315 	stw	r17,12(sp)
    9368:	8022907a 	slli	r17,r16,1
    936c:	dd000615 	stw	r20,24(sp)
    9370:	2829883a 	mov	r20,r5
    9374:	01400044 	movi	r5,1
    9378:	dcc00515 	stw	r19,20(sp)
    937c:	dc800415 	stw	r18,16(sp)
    9380:	dfc00715 	stw	ra,28(sp)
    9384:	3825883a 	mov	r18,r7
    9388:	8822d57a 	srli	r17,r17,21
    938c:	00086c40 	call	86c4 <_Balloc>
    9390:	1027883a 	mov	r19,r2
    9394:	00800434 	movhi	r2,16
    9398:	10bfffc4 	addi	r2,r2,-1
    939c:	808c703a 	and	r6,r16,r2
    93a0:	88000126 	beq	r17,zero,93a8 <__d2b+0x50>
    93a4:	31800434 	orhi	r6,r6,16
    93a8:	d9800015 	stw	r6,0(sp)
    93ac:	a0002426 	beq	r20,zero,9440 <__d2b+0xe8>
    93b0:	d9000104 	addi	r4,sp,4
    93b4:	dd000115 	stw	r20,4(sp)
    93b8:	0008a200 	call	8a20 <__lo0bits>
    93bc:	d8c00017 	ldw	r3,0(sp)
    93c0:	10002f1e 	bne	r2,zero,9480 <__d2b+0x128>
    93c4:	d9000117 	ldw	r4,4(sp)
    93c8:	99000515 	stw	r4,20(r19)
    93cc:	1821003a 	cmpeq	r16,r3,zero
    93d0:	01000084 	movi	r4,2
    93d4:	2421c83a 	sub	r16,r4,r16
    93d8:	98c00615 	stw	r3,24(r19)
    93dc:	9c000415 	stw	r16,16(r19)
    93e0:	88001f1e 	bne	r17,zero,9460 <__d2b+0x108>
    93e4:	10bef384 	addi	r2,r2,-1074
    93e8:	90800015 	stw	r2,0(r18)
    93ec:	00900034 	movhi	r2,16384
    93f0:	10bfffc4 	addi	r2,r2,-1
    93f4:	8085883a 	add	r2,r16,r2
    93f8:	1085883a 	add	r2,r2,r2
    93fc:	1085883a 	add	r2,r2,r2
    9400:	9885883a 	add	r2,r19,r2
    9404:	11000517 	ldw	r4,20(r2)
    9408:	8020917a 	slli	r16,r16,5
    940c:	00089b80 	call	89b8 <__hi0bits>
    9410:	d8c00817 	ldw	r3,32(sp)
    9414:	8085c83a 	sub	r2,r16,r2
    9418:	18800015 	stw	r2,0(r3)
    941c:	9805883a 	mov	r2,r19
    9420:	dfc00717 	ldw	ra,28(sp)
    9424:	dd000617 	ldw	r20,24(sp)
    9428:	dcc00517 	ldw	r19,20(sp)
    942c:	dc800417 	ldw	r18,16(sp)
    9430:	dc400317 	ldw	r17,12(sp)
    9434:	dc000217 	ldw	r16,8(sp)
    9438:	dec00804 	addi	sp,sp,32
    943c:	f800283a 	ret
    9440:	d809883a 	mov	r4,sp
    9444:	0008a200 	call	8a20 <__lo0bits>
    9448:	d8c00017 	ldw	r3,0(sp)
    944c:	04000044 	movi	r16,1
    9450:	9c000415 	stw	r16,16(r19)
    9454:	98c00515 	stw	r3,20(r19)
    9458:	10800804 	addi	r2,r2,32
    945c:	883fe126 	beq	r17,zero,93e4 <__alt_data_end+0xff0093e4>
    9460:	00c00d44 	movi	r3,53
    9464:	8c7ef344 	addi	r17,r17,-1075
    9468:	88a3883a 	add	r17,r17,r2
    946c:	1885c83a 	sub	r2,r3,r2
    9470:	d8c00817 	ldw	r3,32(sp)
    9474:	94400015 	stw	r17,0(r18)
    9478:	18800015 	stw	r2,0(r3)
    947c:	003fe706 	br	941c <__alt_data_end+0xff00941c>
    9480:	01000804 	movi	r4,32
    9484:	2089c83a 	sub	r4,r4,r2
    9488:	1908983a 	sll	r4,r3,r4
    948c:	d9400117 	ldw	r5,4(sp)
    9490:	1886d83a 	srl	r3,r3,r2
    9494:	2148b03a 	or	r4,r4,r5
    9498:	99000515 	stw	r4,20(r19)
    949c:	d8c00015 	stw	r3,0(sp)
    94a0:	003fca06 	br	93cc <__alt_data_end+0xff0093cc>

000094a4 <__ratio>:
    94a4:	defff904 	addi	sp,sp,-28
    94a8:	dc400315 	stw	r17,12(sp)
    94ac:	2823883a 	mov	r17,r5
    94b0:	d9400104 	addi	r5,sp,4
    94b4:	dfc00615 	stw	ra,24(sp)
    94b8:	dcc00515 	stw	r19,20(sp)
    94bc:	dc800415 	stw	r18,16(sp)
    94c0:	2027883a 	mov	r19,r4
    94c4:	dc000215 	stw	r16,8(sp)
    94c8:	000924c0 	call	924c <__b2d>
    94cc:	d80b883a 	mov	r5,sp
    94d0:	8809883a 	mov	r4,r17
    94d4:	1025883a 	mov	r18,r2
    94d8:	1821883a 	mov	r16,r3
    94dc:	000924c0 	call	924c <__b2d>
    94e0:	8a000417 	ldw	r8,16(r17)
    94e4:	99000417 	ldw	r4,16(r19)
    94e8:	d9400117 	ldw	r5,4(sp)
    94ec:	2209c83a 	sub	r4,r4,r8
    94f0:	2010917a 	slli	r8,r4,5
    94f4:	d9000017 	ldw	r4,0(sp)
    94f8:	2909c83a 	sub	r4,r5,r4
    94fc:	4109883a 	add	r4,r8,r4
    9500:	01000e0e 	bge	zero,r4,953c <__ratio+0x98>
    9504:	2008953a 	slli	r4,r4,20
    9508:	2421883a 	add	r16,r4,r16
    950c:	100d883a 	mov	r6,r2
    9510:	180f883a 	mov	r7,r3
    9514:	9009883a 	mov	r4,r18
    9518:	800b883a 	mov	r5,r16
    951c:	0001dbc0 	call	1dbc <__divdf3>
    9520:	dfc00617 	ldw	ra,24(sp)
    9524:	dcc00517 	ldw	r19,20(sp)
    9528:	dc800417 	ldw	r18,16(sp)
    952c:	dc400317 	ldw	r17,12(sp)
    9530:	dc000217 	ldw	r16,8(sp)
    9534:	dec00704 	addi	sp,sp,28
    9538:	f800283a 	ret
    953c:	2008953a 	slli	r4,r4,20
    9540:	1907c83a 	sub	r3,r3,r4
    9544:	003ff106 	br	950c <__alt_data_end+0xff00950c>

00009548 <_mprec_log10>:
    9548:	defffe04 	addi	sp,sp,-8
    954c:	dc000015 	stw	r16,0(sp)
    9550:	dfc00115 	stw	ra,4(sp)
    9554:	008005c4 	movi	r2,23
    9558:	2021883a 	mov	r16,r4
    955c:	11000d0e 	bge	r2,r4,9594 <_mprec_log10+0x4c>
    9560:	0005883a 	mov	r2,zero
    9564:	00cffc34 	movhi	r3,16368
    9568:	843fffc4 	addi	r16,r16,-1
    956c:	000d883a 	mov	r6,zero
    9570:	01d00934 	movhi	r7,16420
    9574:	1009883a 	mov	r4,r2
    9578:	180b883a 	mov	r5,r3
    957c:	000d3e00 	call	d3e0 <__muldf3>
    9580:	803ff91e 	bne	r16,zero,9568 <__alt_data_end+0xff009568>
    9584:	dfc00117 	ldw	ra,4(sp)
    9588:	dc000017 	ldw	r16,0(sp)
    958c:	dec00204 	addi	sp,sp,8
    9590:	f800283a 	ret
    9594:	202090fa 	slli	r16,r4,3
    9598:	00800074 	movhi	r2,1
    959c:	10859804 	addi	r2,r2,5728
    95a0:	1421883a 	add	r16,r2,r16
    95a4:	80800017 	ldw	r2,0(r16)
    95a8:	80c00117 	ldw	r3,4(r16)
    95ac:	dfc00117 	ldw	ra,4(sp)
    95b0:	dc000017 	ldw	r16,0(sp)
    95b4:	dec00204 	addi	sp,sp,8
    95b8:	f800283a 	ret

000095bc <__copybits>:
    95bc:	297fffc4 	addi	r5,r5,-1
    95c0:	280fd17a 	srai	r7,r5,5
    95c4:	30c00417 	ldw	r3,16(r6)
    95c8:	30800504 	addi	r2,r6,20
    95cc:	39c00044 	addi	r7,r7,1
    95d0:	18c7883a 	add	r3,r3,r3
    95d4:	39cf883a 	add	r7,r7,r7
    95d8:	18c7883a 	add	r3,r3,r3
    95dc:	39cf883a 	add	r7,r7,r7
    95e0:	10c7883a 	add	r3,r2,r3
    95e4:	21cf883a 	add	r7,r4,r7
    95e8:	10c00d2e 	bgeu	r2,r3,9620 <__copybits+0x64>
    95ec:	200b883a 	mov	r5,r4
    95f0:	12000017 	ldw	r8,0(r2)
    95f4:	29400104 	addi	r5,r5,4
    95f8:	10800104 	addi	r2,r2,4
    95fc:	2a3fff15 	stw	r8,-4(r5)
    9600:	10fffb36 	bltu	r2,r3,95f0 <__alt_data_end+0xff0095f0>
    9604:	1985c83a 	sub	r2,r3,r6
    9608:	10bffac4 	addi	r2,r2,-21
    960c:	1004d0ba 	srli	r2,r2,2
    9610:	10800044 	addi	r2,r2,1
    9614:	1085883a 	add	r2,r2,r2
    9618:	1085883a 	add	r2,r2,r2
    961c:	2089883a 	add	r4,r4,r2
    9620:	21c0032e 	bgeu	r4,r7,9630 <__copybits+0x74>
    9624:	20000015 	stw	zero,0(r4)
    9628:	21000104 	addi	r4,r4,4
    962c:	21fffd36 	bltu	r4,r7,9624 <__alt_data_end+0xff009624>
    9630:	f800283a 	ret

00009634 <__any_on>:
    9634:	20c00417 	ldw	r3,16(r4)
    9638:	2805d17a 	srai	r2,r5,5
    963c:	21000504 	addi	r4,r4,20
    9640:	18800d0e 	bge	r3,r2,9678 <__any_on+0x44>
    9644:	18c7883a 	add	r3,r3,r3
    9648:	18c7883a 	add	r3,r3,r3
    964c:	20c7883a 	add	r3,r4,r3
    9650:	20c0192e 	bgeu	r4,r3,96b8 <__any_on+0x84>
    9654:	18bfff17 	ldw	r2,-4(r3)
    9658:	18ffff04 	addi	r3,r3,-4
    965c:	1000041e 	bne	r2,zero,9670 <__any_on+0x3c>
    9660:	20c0142e 	bgeu	r4,r3,96b4 <__any_on+0x80>
    9664:	18ffff04 	addi	r3,r3,-4
    9668:	19400017 	ldw	r5,0(r3)
    966c:	283ffc26 	beq	r5,zero,9660 <__alt_data_end+0xff009660>
    9670:	00800044 	movi	r2,1
    9674:	f800283a 	ret
    9678:	10c00a0e 	bge	r2,r3,96a4 <__any_on+0x70>
    967c:	1085883a 	add	r2,r2,r2
    9680:	1085883a 	add	r2,r2,r2
    9684:	294007cc 	andi	r5,r5,31
    9688:	2087883a 	add	r3,r4,r2
    968c:	283ff026 	beq	r5,zero,9650 <__alt_data_end+0xff009650>
    9690:	19800017 	ldw	r6,0(r3)
    9694:	3144d83a 	srl	r2,r6,r5
    9698:	114a983a 	sll	r5,r2,r5
    969c:	317ff41e 	bne	r6,r5,9670 <__alt_data_end+0xff009670>
    96a0:	003feb06 	br	9650 <__alt_data_end+0xff009650>
    96a4:	1085883a 	add	r2,r2,r2
    96a8:	1085883a 	add	r2,r2,r2
    96ac:	2087883a 	add	r3,r4,r2
    96b0:	003fe706 	br	9650 <__alt_data_end+0xff009650>
    96b4:	f800283a 	ret
    96b8:	0005883a 	mov	r2,zero
    96bc:	f800283a 	ret

000096c0 <_realloc_r>:
    96c0:	defff604 	addi	sp,sp,-40
    96c4:	dc800215 	stw	r18,8(sp)
    96c8:	dfc00915 	stw	ra,36(sp)
    96cc:	df000815 	stw	fp,32(sp)
    96d0:	ddc00715 	stw	r23,28(sp)
    96d4:	dd800615 	stw	r22,24(sp)
    96d8:	dd400515 	stw	r21,20(sp)
    96dc:	dd000415 	stw	r20,16(sp)
    96e0:	dcc00315 	stw	r19,12(sp)
    96e4:	dc400115 	stw	r17,4(sp)
    96e8:	dc000015 	stw	r16,0(sp)
    96ec:	3025883a 	mov	r18,r6
    96f0:	2800b726 	beq	r5,zero,99d0 <_realloc_r+0x310>
    96f4:	282b883a 	mov	r21,r5
    96f8:	2029883a 	mov	r20,r4
    96fc:	000eacc0 	call	eacc <__malloc_lock>
    9700:	a8bfff17 	ldw	r2,-4(r21)
    9704:	043fff04 	movi	r16,-4
    9708:	90c002c4 	addi	r3,r18,11
    970c:	01000584 	movi	r4,22
    9710:	acfffe04 	addi	r19,r21,-8
    9714:	1420703a 	and	r16,r2,r16
    9718:	20c0332e 	bgeu	r4,r3,97e8 <_realloc_r+0x128>
    971c:	047ffe04 	movi	r17,-8
    9720:	1c62703a 	and	r17,r3,r17
    9724:	8807883a 	mov	r3,r17
    9728:	88005816 	blt	r17,zero,988c <_realloc_r+0x1cc>
    972c:	8c805736 	bltu	r17,r18,988c <_realloc_r+0x1cc>
    9730:	80c0300e 	bge	r16,r3,97f4 <_realloc_r+0x134>
    9734:	07000074 	movhi	fp,1
    9738:	e7061d04 	addi	fp,fp,6260
    973c:	e1c00217 	ldw	r7,8(fp)
    9740:	9c09883a 	add	r4,r19,r16
    9744:	22000117 	ldw	r8,4(r4)
    9748:	21c06326 	beq	r4,r7,98d8 <_realloc_r+0x218>
    974c:	017fff84 	movi	r5,-2
    9750:	414a703a 	and	r5,r8,r5
    9754:	214b883a 	add	r5,r4,r5
    9758:	29800117 	ldw	r6,4(r5)
    975c:	3180004c 	andi	r6,r6,1
    9760:	30003f26 	beq	r6,zero,9860 <_realloc_r+0x1a0>
    9764:	1080004c 	andi	r2,r2,1
    9768:	10008326 	beq	r2,zero,9978 <_realloc_r+0x2b8>
    976c:	900b883a 	mov	r5,r18
    9770:	a009883a 	mov	r4,r20
    9774:	00027d80 	call	27d8 <_malloc_r>
    9778:	1025883a 	mov	r18,r2
    977c:	10011e26 	beq	r2,zero,9bf8 <_realloc_r+0x538>
    9780:	a93fff17 	ldw	r4,-4(r21)
    9784:	10fffe04 	addi	r3,r2,-8
    9788:	00bfff84 	movi	r2,-2
    978c:	2084703a 	and	r2,r4,r2
    9790:	9885883a 	add	r2,r19,r2
    9794:	1880ee26 	beq	r3,r2,9b50 <_realloc_r+0x490>
    9798:	81bfff04 	addi	r6,r16,-4
    979c:	00800904 	movi	r2,36
    97a0:	1180b836 	bltu	r2,r6,9a84 <_realloc_r+0x3c4>
    97a4:	00c004c4 	movi	r3,19
    97a8:	19809636 	bltu	r3,r6,9a04 <_realloc_r+0x344>
    97ac:	9005883a 	mov	r2,r18
    97b0:	a807883a 	mov	r3,r21
    97b4:	19000017 	ldw	r4,0(r3)
    97b8:	11000015 	stw	r4,0(r2)
    97bc:	19000117 	ldw	r4,4(r3)
    97c0:	11000115 	stw	r4,4(r2)
    97c4:	18c00217 	ldw	r3,8(r3)
    97c8:	10c00215 	stw	r3,8(r2)
    97cc:	a80b883a 	mov	r5,r21
    97d0:	a009883a 	mov	r4,r20
    97d4:	00076280 	call	7628 <_free_r>
    97d8:	a009883a 	mov	r4,r20
    97dc:	000eaf00 	call	eaf0 <__malloc_unlock>
    97e0:	9005883a 	mov	r2,r18
    97e4:	00001206 	br	9830 <_realloc_r+0x170>
    97e8:	00c00404 	movi	r3,16
    97ec:	1823883a 	mov	r17,r3
    97f0:	003fce06 	br	972c <__alt_data_end+0xff00972c>
    97f4:	a825883a 	mov	r18,r21
    97f8:	8445c83a 	sub	r2,r16,r17
    97fc:	00c003c4 	movi	r3,15
    9800:	18802636 	bltu	r3,r2,989c <_realloc_r+0x1dc>
    9804:	99800117 	ldw	r6,4(r19)
    9808:	9c07883a 	add	r3,r19,r16
    980c:	3180004c 	andi	r6,r6,1
    9810:	3420b03a 	or	r16,r6,r16
    9814:	9c000115 	stw	r16,4(r19)
    9818:	18800117 	ldw	r2,4(r3)
    981c:	10800054 	ori	r2,r2,1
    9820:	18800115 	stw	r2,4(r3)
    9824:	a009883a 	mov	r4,r20
    9828:	000eaf00 	call	eaf0 <__malloc_unlock>
    982c:	9005883a 	mov	r2,r18
    9830:	dfc00917 	ldw	ra,36(sp)
    9834:	df000817 	ldw	fp,32(sp)
    9838:	ddc00717 	ldw	r23,28(sp)
    983c:	dd800617 	ldw	r22,24(sp)
    9840:	dd400517 	ldw	r21,20(sp)
    9844:	dd000417 	ldw	r20,16(sp)
    9848:	dcc00317 	ldw	r19,12(sp)
    984c:	dc800217 	ldw	r18,8(sp)
    9850:	dc400117 	ldw	r17,4(sp)
    9854:	dc000017 	ldw	r16,0(sp)
    9858:	dec00a04 	addi	sp,sp,40
    985c:	f800283a 	ret
    9860:	017fff04 	movi	r5,-4
    9864:	414a703a 	and	r5,r8,r5
    9868:	814d883a 	add	r6,r16,r5
    986c:	30c01f16 	blt	r6,r3,98ec <_realloc_r+0x22c>
    9870:	20800317 	ldw	r2,12(r4)
    9874:	20c00217 	ldw	r3,8(r4)
    9878:	a825883a 	mov	r18,r21
    987c:	3021883a 	mov	r16,r6
    9880:	18800315 	stw	r2,12(r3)
    9884:	10c00215 	stw	r3,8(r2)
    9888:	003fdb06 	br	97f8 <__alt_data_end+0xff0097f8>
    988c:	00800304 	movi	r2,12
    9890:	a0800015 	stw	r2,0(r20)
    9894:	0005883a 	mov	r2,zero
    9898:	003fe506 	br	9830 <__alt_data_end+0xff009830>
    989c:	98c00117 	ldw	r3,4(r19)
    98a0:	9c4b883a 	add	r5,r19,r17
    98a4:	11000054 	ori	r4,r2,1
    98a8:	18c0004c 	andi	r3,r3,1
    98ac:	1c62b03a 	or	r17,r3,r17
    98b0:	9c400115 	stw	r17,4(r19)
    98b4:	29000115 	stw	r4,4(r5)
    98b8:	2885883a 	add	r2,r5,r2
    98bc:	10c00117 	ldw	r3,4(r2)
    98c0:	29400204 	addi	r5,r5,8
    98c4:	a009883a 	mov	r4,r20
    98c8:	18c00054 	ori	r3,r3,1
    98cc:	10c00115 	stw	r3,4(r2)
    98d0:	00076280 	call	7628 <_free_r>
    98d4:	003fd306 	br	9824 <__alt_data_end+0xff009824>
    98d8:	017fff04 	movi	r5,-4
    98dc:	414a703a 	and	r5,r8,r5
    98e0:	89800404 	addi	r6,r17,16
    98e4:	8151883a 	add	r8,r16,r5
    98e8:	4180590e 	bge	r8,r6,9a50 <_realloc_r+0x390>
    98ec:	1080004c 	andi	r2,r2,1
    98f0:	103f9e1e 	bne	r2,zero,976c <__alt_data_end+0xff00976c>
    98f4:	adbffe17 	ldw	r22,-8(r21)
    98f8:	00bfff04 	movi	r2,-4
    98fc:	9dadc83a 	sub	r22,r19,r22
    9900:	b1800117 	ldw	r6,4(r22)
    9904:	3084703a 	and	r2,r6,r2
    9908:	20002026 	beq	r4,zero,998c <_realloc_r+0x2cc>
    990c:	80af883a 	add	r23,r16,r2
    9910:	b96f883a 	add	r23,r23,r5
    9914:	21c05f26 	beq	r4,r7,9a94 <_realloc_r+0x3d4>
    9918:	b8c01c16 	blt	r23,r3,998c <_realloc_r+0x2cc>
    991c:	20800317 	ldw	r2,12(r4)
    9920:	20c00217 	ldw	r3,8(r4)
    9924:	81bfff04 	addi	r6,r16,-4
    9928:	01000904 	movi	r4,36
    992c:	18800315 	stw	r2,12(r3)
    9930:	10c00215 	stw	r3,8(r2)
    9934:	b0c00217 	ldw	r3,8(r22)
    9938:	b0800317 	ldw	r2,12(r22)
    993c:	b4800204 	addi	r18,r22,8
    9940:	18800315 	stw	r2,12(r3)
    9944:	10c00215 	stw	r3,8(r2)
    9948:	21801b36 	bltu	r4,r6,99b8 <_realloc_r+0x2f8>
    994c:	008004c4 	movi	r2,19
    9950:	1180352e 	bgeu	r2,r6,9a28 <_realloc_r+0x368>
    9954:	a8800017 	ldw	r2,0(r21)
    9958:	b0800215 	stw	r2,8(r22)
    995c:	a8800117 	ldw	r2,4(r21)
    9960:	b0800315 	stw	r2,12(r22)
    9964:	008006c4 	movi	r2,27
    9968:	11807f36 	bltu	r2,r6,9b68 <_realloc_r+0x4a8>
    996c:	b0800404 	addi	r2,r22,16
    9970:	ad400204 	addi	r21,r21,8
    9974:	00002d06 	br	9a2c <_realloc_r+0x36c>
    9978:	adbffe17 	ldw	r22,-8(r21)
    997c:	00bfff04 	movi	r2,-4
    9980:	9dadc83a 	sub	r22,r19,r22
    9984:	b1000117 	ldw	r4,4(r22)
    9988:	2084703a 	and	r2,r4,r2
    998c:	b03f7726 	beq	r22,zero,976c <__alt_data_end+0xff00976c>
    9990:	80af883a 	add	r23,r16,r2
    9994:	b8ff7516 	blt	r23,r3,976c <__alt_data_end+0xff00976c>
    9998:	b0800317 	ldw	r2,12(r22)
    999c:	b0c00217 	ldw	r3,8(r22)
    99a0:	81bfff04 	addi	r6,r16,-4
    99a4:	01000904 	movi	r4,36
    99a8:	18800315 	stw	r2,12(r3)
    99ac:	10c00215 	stw	r3,8(r2)
    99b0:	b4800204 	addi	r18,r22,8
    99b4:	21bfe52e 	bgeu	r4,r6,994c <__alt_data_end+0xff00994c>
    99b8:	a80b883a 	mov	r5,r21
    99bc:	9009883a 	mov	r4,r18
    99c0:	00084400 	call	8440 <memmove>
    99c4:	b821883a 	mov	r16,r23
    99c8:	b027883a 	mov	r19,r22
    99cc:	003f8a06 	br	97f8 <__alt_data_end+0xff0097f8>
    99d0:	300b883a 	mov	r5,r6
    99d4:	dfc00917 	ldw	ra,36(sp)
    99d8:	df000817 	ldw	fp,32(sp)
    99dc:	ddc00717 	ldw	r23,28(sp)
    99e0:	dd800617 	ldw	r22,24(sp)
    99e4:	dd400517 	ldw	r21,20(sp)
    99e8:	dd000417 	ldw	r20,16(sp)
    99ec:	dcc00317 	ldw	r19,12(sp)
    99f0:	dc800217 	ldw	r18,8(sp)
    99f4:	dc400117 	ldw	r17,4(sp)
    99f8:	dc000017 	ldw	r16,0(sp)
    99fc:	dec00a04 	addi	sp,sp,40
    9a00:	00027d81 	jmpi	27d8 <_malloc_r>
    9a04:	a8c00017 	ldw	r3,0(r21)
    9a08:	90c00015 	stw	r3,0(r18)
    9a0c:	a8c00117 	ldw	r3,4(r21)
    9a10:	90c00115 	stw	r3,4(r18)
    9a14:	00c006c4 	movi	r3,27
    9a18:	19804536 	bltu	r3,r6,9b30 <_realloc_r+0x470>
    9a1c:	90800204 	addi	r2,r18,8
    9a20:	a8c00204 	addi	r3,r21,8
    9a24:	003f6306 	br	97b4 <__alt_data_end+0xff0097b4>
    9a28:	9005883a 	mov	r2,r18
    9a2c:	a8c00017 	ldw	r3,0(r21)
    9a30:	b821883a 	mov	r16,r23
    9a34:	b027883a 	mov	r19,r22
    9a38:	10c00015 	stw	r3,0(r2)
    9a3c:	a8c00117 	ldw	r3,4(r21)
    9a40:	10c00115 	stw	r3,4(r2)
    9a44:	a8c00217 	ldw	r3,8(r21)
    9a48:	10c00215 	stw	r3,8(r2)
    9a4c:	003f6a06 	br	97f8 <__alt_data_end+0xff0097f8>
    9a50:	9c67883a 	add	r19,r19,r17
    9a54:	4445c83a 	sub	r2,r8,r17
    9a58:	e4c00215 	stw	r19,8(fp)
    9a5c:	10800054 	ori	r2,r2,1
    9a60:	98800115 	stw	r2,4(r19)
    9a64:	a8bfff17 	ldw	r2,-4(r21)
    9a68:	a009883a 	mov	r4,r20
    9a6c:	1080004c 	andi	r2,r2,1
    9a70:	1462b03a 	or	r17,r2,r17
    9a74:	ac7fff15 	stw	r17,-4(r21)
    9a78:	000eaf00 	call	eaf0 <__malloc_unlock>
    9a7c:	a805883a 	mov	r2,r21
    9a80:	003f6b06 	br	9830 <__alt_data_end+0xff009830>
    9a84:	a80b883a 	mov	r5,r21
    9a88:	9009883a 	mov	r4,r18
    9a8c:	00084400 	call	8440 <memmove>
    9a90:	003f4e06 	br	97cc <__alt_data_end+0xff0097cc>
    9a94:	89000404 	addi	r4,r17,16
    9a98:	b93fbc16 	blt	r23,r4,998c <__alt_data_end+0xff00998c>
    9a9c:	b0800317 	ldw	r2,12(r22)
    9aa0:	b0c00217 	ldw	r3,8(r22)
    9aa4:	81bfff04 	addi	r6,r16,-4
    9aa8:	01000904 	movi	r4,36
    9aac:	18800315 	stw	r2,12(r3)
    9ab0:	10c00215 	stw	r3,8(r2)
    9ab4:	b4800204 	addi	r18,r22,8
    9ab8:	21804336 	bltu	r4,r6,9bc8 <_realloc_r+0x508>
    9abc:	008004c4 	movi	r2,19
    9ac0:	11803f2e 	bgeu	r2,r6,9bc0 <_realloc_r+0x500>
    9ac4:	a8800017 	ldw	r2,0(r21)
    9ac8:	b0800215 	stw	r2,8(r22)
    9acc:	a8800117 	ldw	r2,4(r21)
    9ad0:	b0800315 	stw	r2,12(r22)
    9ad4:	008006c4 	movi	r2,27
    9ad8:	11803f36 	bltu	r2,r6,9bd8 <_realloc_r+0x518>
    9adc:	b0800404 	addi	r2,r22,16
    9ae0:	ad400204 	addi	r21,r21,8
    9ae4:	a8c00017 	ldw	r3,0(r21)
    9ae8:	10c00015 	stw	r3,0(r2)
    9aec:	a8c00117 	ldw	r3,4(r21)
    9af0:	10c00115 	stw	r3,4(r2)
    9af4:	a8c00217 	ldw	r3,8(r21)
    9af8:	10c00215 	stw	r3,8(r2)
    9afc:	b447883a 	add	r3,r22,r17
    9b00:	bc45c83a 	sub	r2,r23,r17
    9b04:	e0c00215 	stw	r3,8(fp)
    9b08:	10800054 	ori	r2,r2,1
    9b0c:	18800115 	stw	r2,4(r3)
    9b10:	b0800117 	ldw	r2,4(r22)
    9b14:	a009883a 	mov	r4,r20
    9b18:	1080004c 	andi	r2,r2,1
    9b1c:	1462b03a 	or	r17,r2,r17
    9b20:	b4400115 	stw	r17,4(r22)
    9b24:	000eaf00 	call	eaf0 <__malloc_unlock>
    9b28:	9005883a 	mov	r2,r18
    9b2c:	003f4006 	br	9830 <__alt_data_end+0xff009830>
    9b30:	a8c00217 	ldw	r3,8(r21)
    9b34:	90c00215 	stw	r3,8(r18)
    9b38:	a8c00317 	ldw	r3,12(r21)
    9b3c:	90c00315 	stw	r3,12(r18)
    9b40:	30801126 	beq	r6,r2,9b88 <_realloc_r+0x4c8>
    9b44:	90800404 	addi	r2,r18,16
    9b48:	a8c00404 	addi	r3,r21,16
    9b4c:	003f1906 	br	97b4 <__alt_data_end+0xff0097b4>
    9b50:	90ffff17 	ldw	r3,-4(r18)
    9b54:	00bfff04 	movi	r2,-4
    9b58:	a825883a 	mov	r18,r21
    9b5c:	1884703a 	and	r2,r3,r2
    9b60:	80a1883a 	add	r16,r16,r2
    9b64:	003f2406 	br	97f8 <__alt_data_end+0xff0097f8>
    9b68:	a8800217 	ldw	r2,8(r21)
    9b6c:	b0800415 	stw	r2,16(r22)
    9b70:	a8800317 	ldw	r2,12(r21)
    9b74:	b0800515 	stw	r2,20(r22)
    9b78:	31000a26 	beq	r6,r4,9ba4 <_realloc_r+0x4e4>
    9b7c:	b0800604 	addi	r2,r22,24
    9b80:	ad400404 	addi	r21,r21,16
    9b84:	003fa906 	br	9a2c <__alt_data_end+0xff009a2c>
    9b88:	a9000417 	ldw	r4,16(r21)
    9b8c:	90800604 	addi	r2,r18,24
    9b90:	a8c00604 	addi	r3,r21,24
    9b94:	91000415 	stw	r4,16(r18)
    9b98:	a9000517 	ldw	r4,20(r21)
    9b9c:	91000515 	stw	r4,20(r18)
    9ba0:	003f0406 	br	97b4 <__alt_data_end+0xff0097b4>
    9ba4:	a8c00417 	ldw	r3,16(r21)
    9ba8:	ad400604 	addi	r21,r21,24
    9bac:	b0800804 	addi	r2,r22,32
    9bb0:	b0c00615 	stw	r3,24(r22)
    9bb4:	a8ffff17 	ldw	r3,-4(r21)
    9bb8:	b0c00715 	stw	r3,28(r22)
    9bbc:	003f9b06 	br	9a2c <__alt_data_end+0xff009a2c>
    9bc0:	9005883a 	mov	r2,r18
    9bc4:	003fc706 	br	9ae4 <__alt_data_end+0xff009ae4>
    9bc8:	a80b883a 	mov	r5,r21
    9bcc:	9009883a 	mov	r4,r18
    9bd0:	00084400 	call	8440 <memmove>
    9bd4:	003fc906 	br	9afc <__alt_data_end+0xff009afc>
    9bd8:	a8800217 	ldw	r2,8(r21)
    9bdc:	b0800415 	stw	r2,16(r22)
    9be0:	a8800317 	ldw	r2,12(r21)
    9be4:	b0800515 	stw	r2,20(r22)
    9be8:	31000726 	beq	r6,r4,9c08 <_realloc_r+0x548>
    9bec:	b0800604 	addi	r2,r22,24
    9bf0:	ad400404 	addi	r21,r21,16
    9bf4:	003fbb06 	br	9ae4 <__alt_data_end+0xff009ae4>
    9bf8:	a009883a 	mov	r4,r20
    9bfc:	000eaf00 	call	eaf0 <__malloc_unlock>
    9c00:	0005883a 	mov	r2,zero
    9c04:	003f0a06 	br	9830 <__alt_data_end+0xff009830>
    9c08:	a8c00417 	ldw	r3,16(r21)
    9c0c:	ad400604 	addi	r21,r21,24
    9c10:	b0800804 	addi	r2,r22,32
    9c14:	b0c00615 	stw	r3,24(r22)
    9c18:	a8ffff17 	ldw	r3,-4(r21)
    9c1c:	b0c00715 	stw	r3,28(r22)
    9c20:	003fb006 	br	9ae4 <__alt_data_end+0xff009ae4>

00009c24 <__fpclassifyd>:
    9c24:	00a00034 	movhi	r2,32768
    9c28:	10bfffc4 	addi	r2,r2,-1
    9c2c:	2884703a 	and	r2,r5,r2
    9c30:	10000726 	beq	r2,zero,9c50 <__fpclassifyd+0x2c>
    9c34:	00fffc34 	movhi	r3,65520
    9c38:	019ff834 	movhi	r6,32736
    9c3c:	28c7883a 	add	r3,r5,r3
    9c40:	31bfffc4 	addi	r6,r6,-1
    9c44:	30c00536 	bltu	r6,r3,9c5c <__fpclassifyd+0x38>
    9c48:	00800104 	movi	r2,4
    9c4c:	f800283a 	ret
    9c50:	2000021e 	bne	r4,zero,9c5c <__fpclassifyd+0x38>
    9c54:	00800084 	movi	r2,2
    9c58:	f800283a 	ret
    9c5c:	00dffc34 	movhi	r3,32752
    9c60:	019ff834 	movhi	r6,32736
    9c64:	28cb883a 	add	r5,r5,r3
    9c68:	31bfffc4 	addi	r6,r6,-1
    9c6c:	317ff62e 	bgeu	r6,r5,9c48 <__alt_data_end+0xff009c48>
    9c70:	01400434 	movhi	r5,16
    9c74:	297fffc4 	addi	r5,r5,-1
    9c78:	28800236 	bltu	r5,r2,9c84 <__fpclassifyd+0x60>
    9c7c:	008000c4 	movi	r2,3
    9c80:	f800283a 	ret
    9c84:	10c00226 	beq	r2,r3,9c90 <__fpclassifyd+0x6c>
    9c88:	0005883a 	mov	r2,zero
    9c8c:	f800283a 	ret
    9c90:	2005003a 	cmpeq	r2,r4,zero
    9c94:	f800283a 	ret

00009c98 <__sread>:
    9c98:	defffe04 	addi	sp,sp,-8
    9c9c:	dc000015 	stw	r16,0(sp)
    9ca0:	2821883a 	mov	r16,r5
    9ca4:	2940038f 	ldh	r5,14(r5)
    9ca8:	dfc00115 	stw	ra,4(sp)
    9cac:	000ba8c0 	call	ba8c <_read_r>
    9cb0:	10000716 	blt	r2,zero,9cd0 <__sread+0x38>
    9cb4:	80c01417 	ldw	r3,80(r16)
    9cb8:	1887883a 	add	r3,r3,r2
    9cbc:	80c01415 	stw	r3,80(r16)
    9cc0:	dfc00117 	ldw	ra,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00204 	addi	sp,sp,8
    9ccc:	f800283a 	ret
    9cd0:	80c0030b 	ldhu	r3,12(r16)
    9cd4:	18fbffcc 	andi	r3,r3,61439
    9cd8:	80c0030d 	sth	r3,12(r16)
    9cdc:	dfc00117 	ldw	ra,4(sp)
    9ce0:	dc000017 	ldw	r16,0(sp)
    9ce4:	dec00204 	addi	sp,sp,8
    9ce8:	f800283a 	ret

00009cec <__seofread>:
    9cec:	0005883a 	mov	r2,zero
    9cf0:	f800283a 	ret

00009cf4 <__swrite>:
    9cf4:	2880030b 	ldhu	r2,12(r5)
    9cf8:	defffb04 	addi	sp,sp,-20
    9cfc:	dcc00315 	stw	r19,12(sp)
    9d00:	dc800215 	stw	r18,8(sp)
    9d04:	dc400115 	stw	r17,4(sp)
    9d08:	dc000015 	stw	r16,0(sp)
    9d0c:	dfc00415 	stw	ra,16(sp)
    9d10:	10c0400c 	andi	r3,r2,256
    9d14:	2821883a 	mov	r16,r5
    9d18:	2023883a 	mov	r17,r4
    9d1c:	3025883a 	mov	r18,r6
    9d20:	3827883a 	mov	r19,r7
    9d24:	18000526 	beq	r3,zero,9d3c <__swrite+0x48>
    9d28:	2940038f 	ldh	r5,14(r5)
    9d2c:	01c00084 	movi	r7,2
    9d30:	000d883a 	mov	r6,zero
    9d34:	000ba2c0 	call	ba2c <_lseek_r>
    9d38:	8080030b 	ldhu	r2,12(r16)
    9d3c:	8140038f 	ldh	r5,14(r16)
    9d40:	10bbffcc 	andi	r2,r2,61439
    9d44:	980f883a 	mov	r7,r19
    9d48:	900d883a 	mov	r6,r18
    9d4c:	8809883a 	mov	r4,r17
    9d50:	8080030d 	sth	r2,12(r16)
    9d54:	dfc00417 	ldw	ra,16(sp)
    9d58:	dcc00317 	ldw	r19,12(sp)
    9d5c:	dc800217 	ldw	r18,8(sp)
    9d60:	dc400117 	ldw	r17,4(sp)
    9d64:	dc000017 	ldw	r16,0(sp)
    9d68:	dec00504 	addi	sp,sp,20
    9d6c:	000b4f81 	jmpi	b4f8 <_write_r>

00009d70 <__sseek>:
    9d70:	defffe04 	addi	sp,sp,-8
    9d74:	dc000015 	stw	r16,0(sp)
    9d78:	2821883a 	mov	r16,r5
    9d7c:	2940038f 	ldh	r5,14(r5)
    9d80:	dfc00115 	stw	ra,4(sp)
    9d84:	000ba2c0 	call	ba2c <_lseek_r>
    9d88:	00ffffc4 	movi	r3,-1
    9d8c:	10c00826 	beq	r2,r3,9db0 <__sseek+0x40>
    9d90:	80c0030b 	ldhu	r3,12(r16)
    9d94:	80801415 	stw	r2,80(r16)
    9d98:	18c40014 	ori	r3,r3,4096
    9d9c:	80c0030d 	sth	r3,12(r16)
    9da0:	dfc00117 	ldw	ra,4(sp)
    9da4:	dc000017 	ldw	r16,0(sp)
    9da8:	dec00204 	addi	sp,sp,8
    9dac:	f800283a 	ret
    9db0:	80c0030b 	ldhu	r3,12(r16)
    9db4:	18fbffcc 	andi	r3,r3,61439
    9db8:	80c0030d 	sth	r3,12(r16)
    9dbc:	dfc00117 	ldw	ra,4(sp)
    9dc0:	dc000017 	ldw	r16,0(sp)
    9dc4:	dec00204 	addi	sp,sp,8
    9dc8:	f800283a 	ret

00009dcc <__sclose>:
    9dcc:	2940038f 	ldh	r5,14(r5)
    9dd0:	000b5581 	jmpi	b558 <_close_r>

00009dd4 <strcmp>:
    9dd4:	2144b03a 	or	r2,r4,r5
    9dd8:	108000cc 	andi	r2,r2,3
    9ddc:	1000171e 	bne	r2,zero,9e3c <strcmp+0x68>
    9de0:	20800017 	ldw	r2,0(r4)
    9de4:	28c00017 	ldw	r3,0(r5)
    9de8:	10c0141e 	bne	r2,r3,9e3c <strcmp+0x68>
    9dec:	027fbff4 	movhi	r9,65279
    9df0:	4a7fbfc4 	addi	r9,r9,-257
    9df4:	0086303a 	nor	r3,zero,r2
    9df8:	02202074 	movhi	r8,32897
    9dfc:	1245883a 	add	r2,r2,r9
    9e00:	42202004 	addi	r8,r8,-32640
    9e04:	10c4703a 	and	r2,r2,r3
    9e08:	1204703a 	and	r2,r2,r8
    9e0c:	10000226 	beq	r2,zero,9e18 <strcmp+0x44>
    9e10:	00002306 	br	9ea0 <strcmp+0xcc>
    9e14:	1000221e 	bne	r2,zero,9ea0 <strcmp+0xcc>
    9e18:	21000104 	addi	r4,r4,4
    9e1c:	20c00017 	ldw	r3,0(r4)
    9e20:	29400104 	addi	r5,r5,4
    9e24:	29800017 	ldw	r6,0(r5)
    9e28:	1a4f883a 	add	r7,r3,r9
    9e2c:	00c4303a 	nor	r2,zero,r3
    9e30:	3884703a 	and	r2,r7,r2
    9e34:	1204703a 	and	r2,r2,r8
    9e38:	19bff626 	beq	r3,r6,9e14 <__alt_data_end+0xff009e14>
    9e3c:	20800003 	ldbu	r2,0(r4)
    9e40:	10c03fcc 	andi	r3,r2,255
    9e44:	18c0201c 	xori	r3,r3,128
    9e48:	18ffe004 	addi	r3,r3,-128
    9e4c:	18000c26 	beq	r3,zero,9e80 <strcmp+0xac>
    9e50:	29800007 	ldb	r6,0(r5)
    9e54:	19800326 	beq	r3,r6,9e64 <strcmp+0x90>
    9e58:	00001306 	br	9ea8 <strcmp+0xd4>
    9e5c:	29800007 	ldb	r6,0(r5)
    9e60:	11800b1e 	bne	r2,r6,9e90 <strcmp+0xbc>
    9e64:	21000044 	addi	r4,r4,1
    9e68:	20c00003 	ldbu	r3,0(r4)
    9e6c:	29400044 	addi	r5,r5,1
    9e70:	18803fcc 	andi	r2,r3,255
    9e74:	1080201c 	xori	r2,r2,128
    9e78:	10bfe004 	addi	r2,r2,-128
    9e7c:	103ff71e 	bne	r2,zero,9e5c <__alt_data_end+0xff009e5c>
    9e80:	0007883a 	mov	r3,zero
    9e84:	28800003 	ldbu	r2,0(r5)
    9e88:	1885c83a 	sub	r2,r3,r2
    9e8c:	f800283a 	ret
    9e90:	28800003 	ldbu	r2,0(r5)
    9e94:	18c03fcc 	andi	r3,r3,255
    9e98:	1885c83a 	sub	r2,r3,r2
    9e9c:	f800283a 	ret
    9ea0:	0005883a 	mov	r2,zero
    9ea4:	f800283a 	ret
    9ea8:	10c03fcc 	andi	r3,r2,255
    9eac:	003ff506 	br	9e84 <__alt_data_end+0xff009e84>

00009eb0 <__sprint_r.part.0>:
    9eb0:	28801917 	ldw	r2,100(r5)
    9eb4:	defff604 	addi	sp,sp,-40
    9eb8:	dd400515 	stw	r21,20(sp)
    9ebc:	dfc00915 	stw	ra,36(sp)
    9ec0:	df000815 	stw	fp,32(sp)
    9ec4:	ddc00715 	stw	r23,28(sp)
    9ec8:	dd800615 	stw	r22,24(sp)
    9ecc:	dd000415 	stw	r20,16(sp)
    9ed0:	dcc00315 	stw	r19,12(sp)
    9ed4:	dc800215 	stw	r18,8(sp)
    9ed8:	dc400115 	stw	r17,4(sp)
    9edc:	dc000015 	stw	r16,0(sp)
    9ee0:	1088000c 	andi	r2,r2,8192
    9ee4:	302b883a 	mov	r21,r6
    9ee8:	10002e26 	beq	r2,zero,9fa4 <__sprint_r.part.0+0xf4>
    9eec:	30800217 	ldw	r2,8(r6)
    9ef0:	35800017 	ldw	r22,0(r6)
    9ef4:	10002926 	beq	r2,zero,9f9c <__sprint_r.part.0+0xec>
    9ef8:	2827883a 	mov	r19,r5
    9efc:	2029883a 	mov	r20,r4
    9f00:	b5c00104 	addi	r23,r22,4
    9f04:	04bfffc4 	movi	r18,-1
    9f08:	bc400017 	ldw	r17,0(r23)
    9f0c:	b4000017 	ldw	r16,0(r22)
    9f10:	0039883a 	mov	fp,zero
    9f14:	8822d0ba 	srli	r17,r17,2
    9f18:	8800031e 	bne	r17,zero,9f28 <__sprint_r.part.0+0x78>
    9f1c:	00001806 	br	9f80 <__sprint_r.part.0+0xd0>
    9f20:	84000104 	addi	r16,r16,4
    9f24:	8f001526 	beq	r17,fp,9f7c <__sprint_r.part.0+0xcc>
    9f28:	81400017 	ldw	r5,0(r16)
    9f2c:	980d883a 	mov	r6,r19
    9f30:	a009883a 	mov	r4,r20
    9f34:	000b8d80 	call	b8d8 <_fputwc_r>
    9f38:	e7000044 	addi	fp,fp,1
    9f3c:	14bff81e 	bne	r2,r18,9f20 <__alt_data_end+0xff009f20>
    9f40:	9005883a 	mov	r2,r18
    9f44:	a8000215 	stw	zero,8(r21)
    9f48:	a8000115 	stw	zero,4(r21)
    9f4c:	dfc00917 	ldw	ra,36(sp)
    9f50:	df000817 	ldw	fp,32(sp)
    9f54:	ddc00717 	ldw	r23,28(sp)
    9f58:	dd800617 	ldw	r22,24(sp)
    9f5c:	dd400517 	ldw	r21,20(sp)
    9f60:	dd000417 	ldw	r20,16(sp)
    9f64:	dcc00317 	ldw	r19,12(sp)
    9f68:	dc800217 	ldw	r18,8(sp)
    9f6c:	dc400117 	ldw	r17,4(sp)
    9f70:	dc000017 	ldw	r16,0(sp)
    9f74:	dec00a04 	addi	sp,sp,40
    9f78:	f800283a 	ret
    9f7c:	a8800217 	ldw	r2,8(r21)
    9f80:	8c63883a 	add	r17,r17,r17
    9f84:	8c63883a 	add	r17,r17,r17
    9f88:	1445c83a 	sub	r2,r2,r17
    9f8c:	a8800215 	stw	r2,8(r21)
    9f90:	b5800204 	addi	r22,r22,8
    9f94:	bdc00204 	addi	r23,r23,8
    9f98:	103fdb1e 	bne	r2,zero,9f08 <__alt_data_end+0xff009f08>
    9f9c:	0005883a 	mov	r2,zero
    9fa0:	003fe806 	br	9f44 <__alt_data_end+0xff009f44>
    9fa4:	00079380 	call	7938 <__sfvwrite_r>
    9fa8:	003fe606 	br	9f44 <__alt_data_end+0xff009f44>

00009fac <__sprint_r>:
    9fac:	30c00217 	ldw	r3,8(r6)
    9fb0:	18000126 	beq	r3,zero,9fb8 <__sprint_r+0xc>
    9fb4:	0009eb01 	jmpi	9eb0 <__sprint_r.part.0>
    9fb8:	30000115 	stw	zero,4(r6)
    9fbc:	0005883a 	mov	r2,zero
    9fc0:	f800283a 	ret

00009fc4 <___vfiprintf_internal_r>:
    9fc4:	deffc904 	addi	sp,sp,-220
    9fc8:	df003515 	stw	fp,212(sp)
    9fcc:	dd003115 	stw	r20,196(sp)
    9fd0:	dfc03615 	stw	ra,216(sp)
    9fd4:	ddc03415 	stw	r23,208(sp)
    9fd8:	dd803315 	stw	r22,204(sp)
    9fdc:	dd403215 	stw	r21,200(sp)
    9fe0:	dcc03015 	stw	r19,192(sp)
    9fe4:	dc802f15 	stw	r18,188(sp)
    9fe8:	dc402e15 	stw	r17,184(sp)
    9fec:	dc002d15 	stw	r16,180(sp)
    9ff0:	d9002015 	stw	r4,128(sp)
    9ff4:	d9c02215 	stw	r7,136(sp)
    9ff8:	2829883a 	mov	r20,r5
    9ffc:	3039883a 	mov	fp,r6
    a000:	20000226 	beq	r4,zero,a00c <___vfiprintf_internal_r+0x48>
    a004:	20800e17 	ldw	r2,56(r4)
    a008:	1000cf26 	beq	r2,zero,a348 <___vfiprintf_internal_r+0x384>
    a00c:	a080030b 	ldhu	r2,12(r20)
    a010:	10c8000c 	andi	r3,r2,8192
    a014:	1800061e 	bne	r3,zero,a030 <___vfiprintf_internal_r+0x6c>
    a018:	a1001917 	ldw	r4,100(r20)
    a01c:	00f7ffc4 	movi	r3,-8193
    a020:	10880014 	ori	r2,r2,8192
    a024:	20c6703a 	and	r3,r4,r3
    a028:	a080030d 	sth	r2,12(r20)
    a02c:	a0c01915 	stw	r3,100(r20)
    a030:	10c0020c 	andi	r3,r2,8
    a034:	1800a926 	beq	r3,zero,a2dc <___vfiprintf_internal_r+0x318>
    a038:	a0c00417 	ldw	r3,16(r20)
    a03c:	1800a726 	beq	r3,zero,a2dc <___vfiprintf_internal_r+0x318>
    a040:	1080068c 	andi	r2,r2,26
    a044:	00c00284 	movi	r3,10
    a048:	10c0ac26 	beq	r2,r3,a2fc <___vfiprintf_internal_r+0x338>
    a04c:	da801a04 	addi	r10,sp,104
    a050:	da801e15 	stw	r10,120(sp)
    a054:	d8801e17 	ldw	r2,120(sp)
    a058:	da8019c4 	addi	r10,sp,103
    a05c:	05800074 	movhi	r22,1
    a060:	05c00074 	movhi	r23,1
    a064:	da801f15 	stw	r10,124(sp)
    a068:	1295c83a 	sub	r10,r2,r10
    a06c:	b585ce04 	addi	r22,r22,5944
    a070:	bdc5ca04 	addi	r23,r23,5928
    a074:	dec01a15 	stw	sp,104(sp)
    a078:	d8001c15 	stw	zero,112(sp)
    a07c:	d8001b15 	stw	zero,108(sp)
    a080:	d8002615 	stw	zero,152(sp)
    a084:	d8002315 	stw	zero,140(sp)
    a088:	da802715 	stw	r10,156(sp)
    a08c:	d811883a 	mov	r8,sp
    a090:	dd002115 	stw	r20,132(sp)
    a094:	e021883a 	mov	r16,fp
    a098:	80800007 	ldb	r2,0(r16)
    a09c:	1003ea26 	beq	r2,zero,b048 <___vfiprintf_internal_r+0x1084>
    a0a0:	00c00944 	movi	r3,37
    a0a4:	8025883a 	mov	r18,r16
    a0a8:	10c0021e 	bne	r2,r3,a0b4 <___vfiprintf_internal_r+0xf0>
    a0ac:	00001606 	br	a108 <___vfiprintf_internal_r+0x144>
    a0b0:	10c00326 	beq	r2,r3,a0c0 <___vfiprintf_internal_r+0xfc>
    a0b4:	94800044 	addi	r18,r18,1
    a0b8:	90800007 	ldb	r2,0(r18)
    a0bc:	103ffc1e 	bne	r2,zero,a0b0 <__alt_data_end+0xff00a0b0>
    a0c0:	9423c83a 	sub	r17,r18,r16
    a0c4:	88001026 	beq	r17,zero,a108 <___vfiprintf_internal_r+0x144>
    a0c8:	d8c01c17 	ldw	r3,112(sp)
    a0cc:	d8801b17 	ldw	r2,108(sp)
    a0d0:	44000015 	stw	r16,0(r8)
    a0d4:	88c7883a 	add	r3,r17,r3
    a0d8:	10800044 	addi	r2,r2,1
    a0dc:	44400115 	stw	r17,4(r8)
    a0e0:	d8c01c15 	stw	r3,112(sp)
    a0e4:	d8801b15 	stw	r2,108(sp)
    a0e8:	010001c4 	movi	r4,7
    a0ec:	2080760e 	bge	r4,r2,a2c8 <___vfiprintf_internal_r+0x304>
    a0f0:	1803821e 	bne	r3,zero,aefc <___vfiprintf_internal_r+0xf38>
    a0f4:	da802317 	ldw	r10,140(sp)
    a0f8:	d8001b15 	stw	zero,108(sp)
    a0fc:	d811883a 	mov	r8,sp
    a100:	5455883a 	add	r10,r10,r17
    a104:	da802315 	stw	r10,140(sp)
    a108:	90800007 	ldb	r2,0(r18)
    a10c:	10044626 	beq	r2,zero,b228 <___vfiprintf_internal_r+0x1264>
    a110:	90c00047 	ldb	r3,1(r18)
    a114:	94000044 	addi	r16,r18,1
    a118:	d8001d85 	stb	zero,118(sp)
    a11c:	0009883a 	mov	r4,zero
    a120:	000f883a 	mov	r7,zero
    a124:	027fffc4 	movi	r9,-1
    a128:	0023883a 	mov	r17,zero
    a12c:	0029883a 	mov	r20,zero
    a130:	01401604 	movi	r5,88
    a134:	01800244 	movi	r6,9
    a138:	03400a84 	movi	r13,42
    a13c:	03001b04 	movi	r12,108
    a140:	84000044 	addi	r16,r16,1
    a144:	18bff804 	addi	r2,r3,-32
    a148:	28827336 	bltu	r5,r2,ab18 <___vfiprintf_internal_r+0xb54>
    a14c:	100490ba 	slli	r2,r2,2
    a150:	02800074 	movhi	r10,1
    a154:	52a85904 	addi	r10,r10,-24220
    a158:	1285883a 	add	r2,r2,r10
    a15c:	10800017 	ldw	r2,0(r2)
    a160:	1000683a 	jmp	r2
    a164:	0000a84c 	andi	zero,zero,673
    a168:	0000ab18 	cmpnei	zero,zero,684
    a16c:	0000ab18 	cmpnei	zero,zero,684
    a170:	0000a86c 	andhi	zero,zero,673
    a174:	0000ab18 	cmpnei	zero,zero,684
    a178:	0000ab18 	cmpnei	zero,zero,684
    a17c:	0000ab18 	cmpnei	zero,zero,684
    a180:	0000ab18 	cmpnei	zero,zero,684
    a184:	0000ab18 	cmpnei	zero,zero,684
    a188:	0000ab18 	cmpnei	zero,zero,684
    a18c:	0000aa54 	movui	zero,681
    a190:	0000aa70 	cmpltui	zero,zero,681
    a194:	0000ab18 	cmpnei	zero,zero,684
    a198:	0000a358 	cmpnei	zero,zero,653
    a19c:	0000aa80 	call	aa8 <init_LCD+0x70>
    a1a0:	0000ab18 	cmpnei	zero,zero,684
    a1a4:	0000a878 	rdprs	zero,zero,673
    a1a8:	0000a884 	movi	zero,674
    a1ac:	0000a884 	movi	zero,674
    a1b0:	0000a884 	movi	zero,674
    a1b4:	0000a884 	movi	zero,674
    a1b8:	0000a884 	movi	zero,674
    a1bc:	0000a884 	movi	zero,674
    a1c0:	0000a884 	movi	zero,674
    a1c4:	0000a884 	movi	zero,674
    a1c8:	0000a884 	movi	zero,674
    a1cc:	0000ab18 	cmpnei	zero,zero,684
    a1d0:	0000ab18 	cmpnei	zero,zero,684
    a1d4:	0000ab18 	cmpnei	zero,zero,684
    a1d8:	0000ab18 	cmpnei	zero,zero,684
    a1dc:	0000ab18 	cmpnei	zero,zero,684
    a1e0:	0000ab18 	cmpnei	zero,zero,684
    a1e4:	0000ab18 	cmpnei	zero,zero,684
    a1e8:	0000ab18 	cmpnei	zero,zero,684
    a1ec:	0000ab18 	cmpnei	zero,zero,684
    a1f0:	0000ab18 	cmpnei	zero,zero,684
    a1f4:	0000a8b0 	cmpltui	zero,zero,674
    a1f8:	0000ab18 	cmpnei	zero,zero,684
    a1fc:	0000ab18 	cmpnei	zero,zero,684
    a200:	0000ab18 	cmpnei	zero,zero,684
    a204:	0000ab18 	cmpnei	zero,zero,684
    a208:	0000ab18 	cmpnei	zero,zero,684
    a20c:	0000ab18 	cmpnei	zero,zero,684
    a210:	0000ab18 	cmpnei	zero,zero,684
    a214:	0000ab18 	cmpnei	zero,zero,684
    a218:	0000ab18 	cmpnei	zero,zero,684
    a21c:	0000ab18 	cmpnei	zero,zero,684
    a220:	0000a8e8 	cmpgeui	zero,zero,675
    a224:	0000ab18 	cmpnei	zero,zero,684
    a228:	0000ab18 	cmpnei	zero,zero,684
    a22c:	0000ab18 	cmpnei	zero,zero,684
    a230:	0000ab18 	cmpnei	zero,zero,684
    a234:	0000ab18 	cmpnei	zero,zero,684
    a238:	0000a940 	call	a94 <init_LCD+0x5c>
    a23c:	0000ab18 	cmpnei	zero,zero,684
    a240:	0000ab18 	cmpnei	zero,zero,684
    a244:	0000a9b0 	cmpltui	zero,zero,678
    a248:	0000ab18 	cmpnei	zero,zero,684
    a24c:	0000ab18 	cmpnei	zero,zero,684
    a250:	0000ab18 	cmpnei	zero,zero,684
    a254:	0000ab18 	cmpnei	zero,zero,684
    a258:	0000ab18 	cmpnei	zero,zero,684
    a25c:	0000ab18 	cmpnei	zero,zero,684
    a260:	0000ab18 	cmpnei	zero,zero,684
    a264:	0000ab18 	cmpnei	zero,zero,684
    a268:	0000ab18 	cmpnei	zero,zero,684
    a26c:	0000ab18 	cmpnei	zero,zero,684
    a270:	0000a75c 	xori	zero,zero,669
    a274:	0000a788 	cmpgei	zero,zero,670
    a278:	0000ab18 	cmpnei	zero,zero,684
    a27c:	0000ab18 	cmpnei	zero,zero,684
    a280:	0000ab18 	cmpnei	zero,zero,684
    a284:	0000aac0 	call	aac <init_LCD+0x74>
    a288:	0000a788 	cmpgei	zero,zero,670
    a28c:	0000ab18 	cmpnei	zero,zero,684
    a290:	0000ab18 	cmpnei	zero,zero,684
    a294:	0000a61c 	xori	zero,zero,664
    a298:	0000ab18 	cmpnei	zero,zero,684
    a29c:	0000a62c 	andhi	zero,zero,664
    a2a0:	0000a668 	cmpgeui	zero,zero,665
    a2a4:	0000a364 	muli	zero,zero,653
    a2a8:	0000a610 	cmplti	zero,zero,664
    a2ac:	0000ab18 	cmpnei	zero,zero,684
    a2b0:	0000a9ec 	andhi	zero,zero,679
    a2b4:	0000ab18 	cmpnei	zero,zero,684
    a2b8:	0000aa44 	movi	zero,681
    a2bc:	0000ab18 	cmpnei	zero,zero,684
    a2c0:	0000ab18 	cmpnei	zero,zero,684
    a2c4:	0000a708 	cmpgei	zero,zero,668
    a2c8:	42000204 	addi	r8,r8,8
    a2cc:	da802317 	ldw	r10,140(sp)
    a2d0:	5455883a 	add	r10,r10,r17
    a2d4:	da802315 	stw	r10,140(sp)
    a2d8:	003f8b06 	br	a108 <__alt_data_end+0xff00a108>
    a2dc:	d9002017 	ldw	r4,128(sp)
    a2e0:	a00b883a 	mov	r5,r20
    a2e4:	00054e00 	call	54e0 <__swsetup_r>
    a2e8:	1003b11e 	bne	r2,zero,b1b0 <___vfiprintf_internal_r+0x11ec>
    a2ec:	a080030b 	ldhu	r2,12(r20)
    a2f0:	00c00284 	movi	r3,10
    a2f4:	1080068c 	andi	r2,r2,26
    a2f8:	10ff541e 	bne	r2,r3,a04c <__alt_data_end+0xff00a04c>
    a2fc:	a080038f 	ldh	r2,14(r20)
    a300:	103f5216 	blt	r2,zero,a04c <__alt_data_end+0xff00a04c>
    a304:	d9c02217 	ldw	r7,136(sp)
    a308:	d9002017 	ldw	r4,128(sp)
    a30c:	e00d883a 	mov	r6,fp
    a310:	a00b883a 	mov	r5,r20
    a314:	000b43c0 	call	b43c <__sbprintf>
    a318:	dfc03617 	ldw	ra,216(sp)
    a31c:	df003517 	ldw	fp,212(sp)
    a320:	ddc03417 	ldw	r23,208(sp)
    a324:	dd803317 	ldw	r22,204(sp)
    a328:	dd403217 	ldw	r21,200(sp)
    a32c:	dd003117 	ldw	r20,196(sp)
    a330:	dcc03017 	ldw	r19,192(sp)
    a334:	dc802f17 	ldw	r18,188(sp)
    a338:	dc402e17 	ldw	r17,184(sp)
    a33c:	dc002d17 	ldw	r16,180(sp)
    a340:	dec03704 	addi	sp,sp,220
    a344:	f800283a 	ret
    a348:	00074b40 	call	74b4 <__sinit>
    a34c:	003f2f06 	br	a00c <__alt_data_end+0xff00a00c>
    a350:	0463c83a 	sub	r17,zero,r17
    a354:	d8802215 	stw	r2,136(sp)
    a358:	a5000114 	ori	r20,r20,4
    a35c:	80c00007 	ldb	r3,0(r16)
    a360:	003f7706 	br	a140 <__alt_data_end+0xff00a140>
    a364:	00800c04 	movi	r2,48
    a368:	da802217 	ldw	r10,136(sp)
    a36c:	d8801d05 	stb	r2,116(sp)
    a370:	00801e04 	movi	r2,120
    a374:	d8801d45 	stb	r2,117(sp)
    a378:	d8001d85 	stb	zero,118(sp)
    a37c:	50c00104 	addi	r3,r10,4
    a380:	54800017 	ldw	r18,0(r10)
    a384:	0027883a 	mov	r19,zero
    a388:	a0800094 	ori	r2,r20,2
    a38c:	48030b16 	blt	r9,zero,afbc <___vfiprintf_internal_r+0xff8>
    a390:	00bfdfc4 	movi	r2,-129
    a394:	a096703a 	and	r11,r20,r2
    a398:	d8c02215 	stw	r3,136(sp)
    a39c:	5d000094 	ori	r20,r11,2
    a3a0:	90032b1e 	bne	r18,zero,b050 <___vfiprintf_internal_r+0x108c>
    a3a4:	00800074 	movhi	r2,1
    a3a8:	10856904 	addi	r2,r2,5540
    a3ac:	d8802615 	stw	r2,152(sp)
    a3b0:	0039883a 	mov	fp,zero
    a3b4:	48017b1e 	bne	r9,zero,a9a4 <___vfiprintf_internal_r+0x9e0>
    a3b8:	0013883a 	mov	r9,zero
    a3bc:	0027883a 	mov	r19,zero
    a3c0:	dd401a04 	addi	r21,sp,104
    a3c4:	4825883a 	mov	r18,r9
    a3c8:	4cc0010e 	bge	r9,r19,a3d0 <___vfiprintf_internal_r+0x40c>
    a3cc:	9825883a 	mov	r18,r19
    a3d0:	e7003fcc 	andi	fp,fp,255
    a3d4:	e700201c 	xori	fp,fp,128
    a3d8:	e73fe004 	addi	fp,fp,-128
    a3dc:	e0000126 	beq	fp,zero,a3e4 <___vfiprintf_internal_r+0x420>
    a3e0:	94800044 	addi	r18,r18,1
    a3e4:	a380008c 	andi	r14,r20,2
    a3e8:	70000126 	beq	r14,zero,a3f0 <___vfiprintf_internal_r+0x42c>
    a3ec:	94800084 	addi	r18,r18,2
    a3f0:	a700210c 	andi	fp,r20,132
    a3f4:	e001df1e 	bne	fp,zero,ab74 <___vfiprintf_internal_r+0xbb0>
    a3f8:	8c87c83a 	sub	r3,r17,r18
    a3fc:	00c1dd0e 	bge	zero,r3,ab74 <___vfiprintf_internal_r+0xbb0>
    a400:	01c00404 	movi	r7,16
    a404:	d8801c17 	ldw	r2,112(sp)
    a408:	38c3ad0e 	bge	r7,r3,b2c0 <___vfiprintf_internal_r+0x12fc>
    a40c:	02800074 	movhi	r10,1
    a410:	5285ce04 	addi	r10,r10,5944
    a414:	dc002915 	stw	r16,164(sp)
    a418:	d9801b17 	ldw	r6,108(sp)
    a41c:	da802415 	stw	r10,144(sp)
    a420:	03c001c4 	movi	r15,7
    a424:	da402515 	stw	r9,148(sp)
    a428:	db802815 	stw	r14,160(sp)
    a42c:	1821883a 	mov	r16,r3
    a430:	00000506 	br	a448 <___vfiprintf_internal_r+0x484>
    a434:	31400084 	addi	r5,r6,2
    a438:	42000204 	addi	r8,r8,8
    a43c:	200d883a 	mov	r6,r4
    a440:	843ffc04 	addi	r16,r16,-16
    a444:	3c000d0e 	bge	r7,r16,a47c <___vfiprintf_internal_r+0x4b8>
    a448:	10800404 	addi	r2,r2,16
    a44c:	31000044 	addi	r4,r6,1
    a450:	45800015 	stw	r22,0(r8)
    a454:	41c00115 	stw	r7,4(r8)
    a458:	d8801c15 	stw	r2,112(sp)
    a45c:	d9001b15 	stw	r4,108(sp)
    a460:	793ff40e 	bge	r15,r4,a434 <__alt_data_end+0xff00a434>
    a464:	1001b51e 	bne	r2,zero,ab3c <___vfiprintf_internal_r+0xb78>
    a468:	843ffc04 	addi	r16,r16,-16
    a46c:	000d883a 	mov	r6,zero
    a470:	01400044 	movi	r5,1
    a474:	d811883a 	mov	r8,sp
    a478:	3c3ff316 	blt	r7,r16,a448 <__alt_data_end+0xff00a448>
    a47c:	8007883a 	mov	r3,r16
    a480:	da402517 	ldw	r9,148(sp)
    a484:	db802817 	ldw	r14,160(sp)
    a488:	dc002917 	ldw	r16,164(sp)
    a48c:	da802417 	ldw	r10,144(sp)
    a490:	1885883a 	add	r2,r3,r2
    a494:	40c00115 	stw	r3,4(r8)
    a498:	42800015 	stw	r10,0(r8)
    a49c:	d8801c15 	stw	r2,112(sp)
    a4a0:	d9401b15 	stw	r5,108(sp)
    a4a4:	00c001c4 	movi	r3,7
    a4a8:	19426016 	blt	r3,r5,ae2c <___vfiprintf_internal_r+0xe68>
    a4ac:	d8c01d87 	ldb	r3,118(sp)
    a4b0:	42000204 	addi	r8,r8,8
    a4b4:	29000044 	addi	r4,r5,1
    a4b8:	1801b31e 	bne	r3,zero,ab88 <___vfiprintf_internal_r+0xbc4>
    a4bc:	7001c026 	beq	r14,zero,abc0 <___vfiprintf_internal_r+0xbfc>
    a4c0:	d8c01d04 	addi	r3,sp,116
    a4c4:	10800084 	addi	r2,r2,2
    a4c8:	40c00015 	stw	r3,0(r8)
    a4cc:	00c00084 	movi	r3,2
    a4d0:	40c00115 	stw	r3,4(r8)
    a4d4:	d8801c15 	stw	r2,112(sp)
    a4d8:	d9001b15 	stw	r4,108(sp)
    a4dc:	00c001c4 	movi	r3,7
    a4e0:	1902650e 	bge	r3,r4,ae78 <___vfiprintf_internal_r+0xeb4>
    a4e4:	10029a1e 	bne	r2,zero,af50 <___vfiprintf_internal_r+0xf8c>
    a4e8:	00c02004 	movi	r3,128
    a4ec:	01000044 	movi	r4,1
    a4f0:	000b883a 	mov	r5,zero
    a4f4:	d811883a 	mov	r8,sp
    a4f8:	e0c1b31e 	bne	fp,r3,abc8 <___vfiprintf_internal_r+0xc04>
    a4fc:	8cb9c83a 	sub	fp,r17,r18
    a500:	0701b10e 	bge	zero,fp,abc8 <___vfiprintf_internal_r+0xc04>
    a504:	01c00404 	movi	r7,16
    a508:	3f03890e 	bge	r7,fp,b330 <___vfiprintf_internal_r+0x136c>
    a50c:	00c00074 	movhi	r3,1
    a510:	18c5ca04 	addi	r3,r3,5928
    a514:	d8c02415 	stw	r3,144(sp)
    a518:	8007883a 	mov	r3,r16
    a51c:	034001c4 	movi	r13,7
    a520:	e021883a 	mov	r16,fp
    a524:	da402515 	stw	r9,148(sp)
    a528:	1839883a 	mov	fp,r3
    a52c:	00000506 	br	a544 <___vfiprintf_internal_r+0x580>
    a530:	29800084 	addi	r6,r5,2
    a534:	42000204 	addi	r8,r8,8
    a538:	180b883a 	mov	r5,r3
    a53c:	843ffc04 	addi	r16,r16,-16
    a540:	3c000d0e 	bge	r7,r16,a578 <___vfiprintf_internal_r+0x5b4>
    a544:	10800404 	addi	r2,r2,16
    a548:	28c00044 	addi	r3,r5,1
    a54c:	45c00015 	stw	r23,0(r8)
    a550:	41c00115 	stw	r7,4(r8)
    a554:	d8801c15 	stw	r2,112(sp)
    a558:	d8c01b15 	stw	r3,108(sp)
    a55c:	68fff40e 	bge	r13,r3,a530 <__alt_data_end+0xff00a530>
    a560:	1002241e 	bne	r2,zero,adf4 <___vfiprintf_internal_r+0xe30>
    a564:	843ffc04 	addi	r16,r16,-16
    a568:	01800044 	movi	r6,1
    a56c:	000b883a 	mov	r5,zero
    a570:	d811883a 	mov	r8,sp
    a574:	3c3ff316 	blt	r7,r16,a544 <__alt_data_end+0xff00a544>
    a578:	da402517 	ldw	r9,148(sp)
    a57c:	e007883a 	mov	r3,fp
    a580:	8039883a 	mov	fp,r16
    a584:	1821883a 	mov	r16,r3
    a588:	d8c02417 	ldw	r3,144(sp)
    a58c:	1705883a 	add	r2,r2,fp
    a590:	47000115 	stw	fp,4(r8)
    a594:	40c00015 	stw	r3,0(r8)
    a598:	d8801c15 	stw	r2,112(sp)
    a59c:	d9801b15 	stw	r6,108(sp)
    a5a0:	00c001c4 	movi	r3,7
    a5a4:	19827616 	blt	r3,r6,af80 <___vfiprintf_internal_r+0xfbc>
    a5a8:	4cf9c83a 	sub	fp,r9,r19
    a5ac:	42000204 	addi	r8,r8,8
    a5b0:	31000044 	addi	r4,r6,1
    a5b4:	300b883a 	mov	r5,r6
    a5b8:	07018516 	blt	zero,fp,abd0 <___vfiprintf_internal_r+0xc0c>
    a5bc:	9885883a 	add	r2,r19,r2
    a5c0:	45400015 	stw	r21,0(r8)
    a5c4:	44c00115 	stw	r19,4(r8)
    a5c8:	d8801c15 	stw	r2,112(sp)
    a5cc:	d9001b15 	stw	r4,108(sp)
    a5d0:	00c001c4 	movi	r3,7
    a5d4:	1901dd0e 	bge	r3,r4,ad4c <___vfiprintf_internal_r+0xd88>
    a5d8:	1002401e 	bne	r2,zero,aedc <___vfiprintf_internal_r+0xf18>
    a5dc:	d8001b15 	stw	zero,108(sp)
    a5e0:	a2c0010c 	andi	r11,r20,4
    a5e4:	58000226 	beq	r11,zero,a5f0 <___vfiprintf_internal_r+0x62c>
    a5e8:	8ca7c83a 	sub	r19,r17,r18
    a5ec:	04c2f216 	blt	zero,r19,b1b8 <___vfiprintf_internal_r+0x11f4>
    a5f0:	8c80010e 	bge	r17,r18,a5f8 <___vfiprintf_internal_r+0x634>
    a5f4:	9023883a 	mov	r17,r18
    a5f8:	da802317 	ldw	r10,140(sp)
    a5fc:	5455883a 	add	r10,r10,r17
    a600:	da802315 	stw	r10,140(sp)
    a604:	d8001b15 	stw	zero,108(sp)
    a608:	d811883a 	mov	r8,sp
    a60c:	003ea206 	br	a098 <__alt_data_end+0xff00a098>
    a610:	a5000814 	ori	r20,r20,32
    a614:	80c00007 	ldb	r3,0(r16)
    a618:	003ec906 	br	a140 <__alt_data_end+0xff00a140>
    a61c:	80c00007 	ldb	r3,0(r16)
    a620:	1b030926 	beq	r3,r12,b248 <___vfiprintf_internal_r+0x1284>
    a624:	a5000414 	ori	r20,r20,16
    a628:	003ec506 	br	a140 <__alt_data_end+0xff00a140>
    a62c:	21003fcc 	andi	r4,r4,255
    a630:	20035e1e 	bne	r4,zero,b3ac <___vfiprintf_internal_r+0x13e8>
    a634:	a080080c 	andi	r2,r20,32
    a638:	1002a526 	beq	r2,zero,b0d0 <___vfiprintf_internal_r+0x110c>
    a63c:	da802217 	ldw	r10,136(sp)
    a640:	50800017 	ldw	r2,0(r10)
    a644:	da802317 	ldw	r10,140(sp)
    a648:	5007d7fa 	srai	r3,r10,31
    a64c:	da802217 	ldw	r10,136(sp)
    a650:	10c00115 	stw	r3,4(r2)
    a654:	52800104 	addi	r10,r10,4
    a658:	da802215 	stw	r10,136(sp)
    a65c:	da802317 	ldw	r10,140(sp)
    a660:	12800015 	stw	r10,0(r2)
    a664:	003e8c06 	br	a098 <__alt_data_end+0xff00a098>
    a668:	21003fcc 	andi	r4,r4,255
    a66c:	2003511e 	bne	r4,zero,b3b4 <___vfiprintf_internal_r+0x13f0>
    a670:	a080080c 	andi	r2,r20,32
    a674:	1000a126 	beq	r2,zero,a8fc <___vfiprintf_internal_r+0x938>
    a678:	da802217 	ldw	r10,136(sp)
    a67c:	d8001d85 	stb	zero,118(sp)
    a680:	50800204 	addi	r2,r10,8
    a684:	54800017 	ldw	r18,0(r10)
    a688:	54c00117 	ldw	r19,4(r10)
    a68c:	4802b416 	blt	r9,zero,b160 <___vfiprintf_internal_r+0x119c>
    a690:	013fdfc4 	movi	r4,-129
    a694:	94c6b03a 	or	r3,r18,r19
    a698:	d8802215 	stw	r2,136(sp)
    a69c:	a128703a 	and	r20,r20,r4
    a6a0:	1800a226 	beq	r3,zero,a92c <___vfiprintf_internal_r+0x968>
    a6a4:	0039883a 	mov	fp,zero
    a6a8:	dd401a04 	addi	r21,sp,104
    a6ac:	9006d0fa 	srli	r3,r18,3
    a6b0:	9808977a 	slli	r4,r19,29
    a6b4:	9826d0fa 	srli	r19,r19,3
    a6b8:	948001cc 	andi	r18,r18,7
    a6bc:	90800c04 	addi	r2,r18,48
    a6c0:	ad7fffc4 	addi	r21,r21,-1
    a6c4:	20e4b03a 	or	r18,r4,r3
    a6c8:	a8800005 	stb	r2,0(r21)
    a6cc:	94c6b03a 	or	r3,r18,r19
    a6d0:	183ff61e 	bne	r3,zero,a6ac <__alt_data_end+0xff00a6ac>
    a6d4:	a0c0004c 	andi	r3,r20,1
    a6d8:	18005926 	beq	r3,zero,a840 <___vfiprintf_internal_r+0x87c>
    a6dc:	10803fcc 	andi	r2,r2,255
    a6e0:	1080201c 	xori	r2,r2,128
    a6e4:	10bfe004 	addi	r2,r2,-128
    a6e8:	00c00c04 	movi	r3,48
    a6ec:	10c05426 	beq	r2,r3,a840 <___vfiprintf_internal_r+0x87c>
    a6f0:	da801e17 	ldw	r10,120(sp)
    a6f4:	a8bfffc4 	addi	r2,r21,-1
    a6f8:	a8ffffc5 	stb	r3,-1(r21)
    a6fc:	50a7c83a 	sub	r19,r10,r2
    a700:	102b883a 	mov	r21,r2
    a704:	003f2f06 	br	a3c4 <__alt_data_end+0xff00a3c4>
    a708:	21003fcc 	andi	r4,r4,255
    a70c:	2003421e 	bne	r4,zero,b418 <___vfiprintf_internal_r+0x1454>
    a710:	00800074 	movhi	r2,1
    a714:	10856904 	addi	r2,r2,5540
    a718:	d8802615 	stw	r2,152(sp)
    a71c:	a080080c 	andi	r2,r20,32
    a720:	1000aa26 	beq	r2,zero,a9cc <___vfiprintf_internal_r+0xa08>
    a724:	da802217 	ldw	r10,136(sp)
    a728:	54800017 	ldw	r18,0(r10)
    a72c:	54c00117 	ldw	r19,4(r10)
    a730:	52800204 	addi	r10,r10,8
    a734:	da802215 	stw	r10,136(sp)
    a738:	a080004c 	andi	r2,r20,1
    a73c:	1001d226 	beq	r2,zero,ae88 <___vfiprintf_internal_r+0xec4>
    a740:	94c4b03a 	or	r2,r18,r19
    a744:	1002351e 	bne	r2,zero,b01c <___vfiprintf_internal_r+0x1058>
    a748:	d8001d85 	stb	zero,118(sp)
    a74c:	48022216 	blt	r9,zero,afd8 <___vfiprintf_internal_r+0x1014>
    a750:	00bfdfc4 	movi	r2,-129
    a754:	a0a8703a 	and	r20,r20,r2
    a758:	003f1506 	br	a3b0 <__alt_data_end+0xff00a3b0>
    a75c:	da802217 	ldw	r10,136(sp)
    a760:	04800044 	movi	r18,1
    a764:	d8001d85 	stb	zero,118(sp)
    a768:	50800017 	ldw	r2,0(r10)
    a76c:	52800104 	addi	r10,r10,4
    a770:	da802215 	stw	r10,136(sp)
    a774:	d8801005 	stb	r2,64(sp)
    a778:	9027883a 	mov	r19,r18
    a77c:	dd401004 	addi	r21,sp,64
    a780:	0013883a 	mov	r9,zero
    a784:	003f1706 	br	a3e4 <__alt_data_end+0xff00a3e4>
    a788:	21003fcc 	andi	r4,r4,255
    a78c:	2003201e 	bne	r4,zero,b410 <___vfiprintf_internal_r+0x144c>
    a790:	a080080c 	andi	r2,r20,32
    a794:	10004b26 	beq	r2,zero,a8c4 <___vfiprintf_internal_r+0x900>
    a798:	da802217 	ldw	r10,136(sp)
    a79c:	50800117 	ldw	r2,4(r10)
    a7a0:	54800017 	ldw	r18,0(r10)
    a7a4:	52800204 	addi	r10,r10,8
    a7a8:	da802215 	stw	r10,136(sp)
    a7ac:	1027883a 	mov	r19,r2
    a7b0:	10022c16 	blt	r2,zero,b064 <___vfiprintf_internal_r+0x10a0>
    a7b4:	df001d83 	ldbu	fp,118(sp)
    a7b8:	48007216 	blt	r9,zero,a984 <___vfiprintf_internal_r+0x9c0>
    a7bc:	00ffdfc4 	movi	r3,-129
    a7c0:	94c4b03a 	or	r2,r18,r19
    a7c4:	a0e8703a 	and	r20,r20,r3
    a7c8:	1000cc26 	beq	r2,zero,aafc <___vfiprintf_internal_r+0xb38>
    a7cc:	98021026 	beq	r19,zero,b010 <___vfiprintf_internal_r+0x104c>
    a7d0:	dc402415 	stw	r17,144(sp)
    a7d4:	dc002515 	stw	r16,148(sp)
    a7d8:	9823883a 	mov	r17,r19
    a7dc:	9021883a 	mov	r16,r18
    a7e0:	dd401a04 	addi	r21,sp,104
    a7e4:	4825883a 	mov	r18,r9
    a7e8:	4027883a 	mov	r19,r8
    a7ec:	8009883a 	mov	r4,r16
    a7f0:	880b883a 	mov	r5,r17
    a7f4:	01800284 	movi	r6,10
    a7f8:	000f883a 	mov	r7,zero
    a7fc:	000c3a40 	call	c3a4 <__umoddi3>
    a800:	10800c04 	addi	r2,r2,48
    a804:	ad7fffc4 	addi	r21,r21,-1
    a808:	8009883a 	mov	r4,r16
    a80c:	880b883a 	mov	r5,r17
    a810:	a8800005 	stb	r2,0(r21)
    a814:	01800284 	movi	r6,10
    a818:	000f883a 	mov	r7,zero
    a81c:	000be2c0 	call	be2c <__udivdi3>
    a820:	1021883a 	mov	r16,r2
    a824:	10c4b03a 	or	r2,r2,r3
    a828:	1823883a 	mov	r17,r3
    a82c:	103fef1e 	bne	r2,zero,a7ec <__alt_data_end+0xff00a7ec>
    a830:	dc402417 	ldw	r17,144(sp)
    a834:	dc002517 	ldw	r16,148(sp)
    a838:	9013883a 	mov	r9,r18
    a83c:	9811883a 	mov	r8,r19
    a840:	da801e17 	ldw	r10,120(sp)
    a844:	5567c83a 	sub	r19,r10,r21
    a848:	003ede06 	br	a3c4 <__alt_data_end+0xff00a3c4>
    a84c:	38803fcc 	andi	r2,r7,255
    a850:	1080201c 	xori	r2,r2,128
    a854:	10bfe004 	addi	r2,r2,-128
    a858:	1002371e 	bne	r2,zero,b138 <___vfiprintf_internal_r+0x1174>
    a85c:	01000044 	movi	r4,1
    a860:	01c00804 	movi	r7,32
    a864:	80c00007 	ldb	r3,0(r16)
    a868:	003e3506 	br	a140 <__alt_data_end+0xff00a140>
    a86c:	a5000054 	ori	r20,r20,1
    a870:	80c00007 	ldb	r3,0(r16)
    a874:	003e3206 	br	a140 <__alt_data_end+0xff00a140>
    a878:	a5002014 	ori	r20,r20,128
    a87c:	80c00007 	ldb	r3,0(r16)
    a880:	003e2f06 	br	a140 <__alt_data_end+0xff00a140>
    a884:	8015883a 	mov	r10,r16
    a888:	0023883a 	mov	r17,zero
    a88c:	18bff404 	addi	r2,r3,-48
    a890:	50c00007 	ldb	r3,0(r10)
    a894:	8c4002a4 	muli	r17,r17,10
    a898:	84000044 	addi	r16,r16,1
    a89c:	8015883a 	mov	r10,r16
    a8a0:	1463883a 	add	r17,r2,r17
    a8a4:	18bff404 	addi	r2,r3,-48
    a8a8:	30bff92e 	bgeu	r6,r2,a890 <__alt_data_end+0xff00a890>
    a8ac:	003e2506 	br	a144 <__alt_data_end+0xff00a144>
    a8b0:	21003fcc 	andi	r4,r4,255
    a8b4:	2002d41e 	bne	r4,zero,b408 <___vfiprintf_internal_r+0x1444>
    a8b8:	a5000414 	ori	r20,r20,16
    a8bc:	a080080c 	andi	r2,r20,32
    a8c0:	103fb51e 	bne	r2,zero,a798 <__alt_data_end+0xff00a798>
    a8c4:	a080040c 	andi	r2,r20,16
    a8c8:	1001f826 	beq	r2,zero,b0ac <___vfiprintf_internal_r+0x10e8>
    a8cc:	da802217 	ldw	r10,136(sp)
    a8d0:	54800017 	ldw	r18,0(r10)
    a8d4:	52800104 	addi	r10,r10,4
    a8d8:	da802215 	stw	r10,136(sp)
    a8dc:	9027d7fa 	srai	r19,r18,31
    a8e0:	9805883a 	mov	r2,r19
    a8e4:	003fb206 	br	a7b0 <__alt_data_end+0xff00a7b0>
    a8e8:	21003fcc 	andi	r4,r4,255
    a8ec:	2002c41e 	bne	r4,zero,b400 <___vfiprintf_internal_r+0x143c>
    a8f0:	a5000414 	ori	r20,r20,16
    a8f4:	a080080c 	andi	r2,r20,32
    a8f8:	103f5f1e 	bne	r2,zero,a678 <__alt_data_end+0xff00a678>
    a8fc:	a080040c 	andi	r2,r20,16
    a900:	10020f26 	beq	r2,zero,b140 <___vfiprintf_internal_r+0x117c>
    a904:	da802217 	ldw	r10,136(sp)
    a908:	d8001d85 	stb	zero,118(sp)
    a90c:	0027883a 	mov	r19,zero
    a910:	50800104 	addi	r2,r10,4
    a914:	54800017 	ldw	r18,0(r10)
    a918:	48021116 	blt	r9,zero,b160 <___vfiprintf_internal_r+0x119c>
    a91c:	00ffdfc4 	movi	r3,-129
    a920:	d8802215 	stw	r2,136(sp)
    a924:	a0e8703a 	and	r20,r20,r3
    a928:	903f5e1e 	bne	r18,zero,a6a4 <__alt_data_end+0xff00a6a4>
    a92c:	0039883a 	mov	fp,zero
    a930:	4802a626 	beq	r9,zero,b3cc <___vfiprintf_internal_r+0x1408>
    a934:	0025883a 	mov	r18,zero
    a938:	0027883a 	mov	r19,zero
    a93c:	003f5a06 	br	a6a8 <__alt_data_end+0xff00a6a8>
    a940:	21003fcc 	andi	r4,r4,255
    a944:	20029f1e 	bne	r4,zero,b3c4 <___vfiprintf_internal_r+0x1400>
    a948:	a5000414 	ori	r20,r20,16
    a94c:	a080080c 	andi	r2,r20,32
    a950:	10005e1e 	bne	r2,zero,aacc <___vfiprintf_internal_r+0xb08>
    a954:	a080040c 	andi	r2,r20,16
    a958:	1001a21e 	bne	r2,zero,afe4 <___vfiprintf_internal_r+0x1020>
    a95c:	a080100c 	andi	r2,r20,64
    a960:	d8001d85 	stb	zero,118(sp)
    a964:	da802217 	ldw	r10,136(sp)
    a968:	1002231e 	bne	r2,zero,b1f8 <___vfiprintf_internal_r+0x1234>
    a96c:	50800104 	addi	r2,r10,4
    a970:	54800017 	ldw	r18,0(r10)
    a974:	0027883a 	mov	r19,zero
    a978:	4801a00e 	bge	r9,zero,affc <___vfiprintf_internal_r+0x1038>
    a97c:	d8802215 	stw	r2,136(sp)
    a980:	0039883a 	mov	fp,zero
    a984:	94c4b03a 	or	r2,r18,r19
    a988:	103f901e 	bne	r2,zero,a7cc <__alt_data_end+0xff00a7cc>
    a98c:	00800044 	movi	r2,1
    a990:	10803fcc 	andi	r2,r2,255
    a994:	00c00044 	movi	r3,1
    a998:	10c05926 	beq	r2,r3,ab00 <___vfiprintf_internal_r+0xb3c>
    a99c:	00c00084 	movi	r3,2
    a9a0:	10ffe41e 	bne	r2,r3,a934 <__alt_data_end+0xff00a934>
    a9a4:	0025883a 	mov	r18,zero
    a9a8:	0027883a 	mov	r19,zero
    a9ac:	00013d06 	br	aea4 <___vfiprintf_internal_r+0xee0>
    a9b0:	21003fcc 	andi	r4,r4,255
    a9b4:	2002811e 	bne	r4,zero,b3bc <___vfiprintf_internal_r+0x13f8>
    a9b8:	00800074 	movhi	r2,1
    a9bc:	10856404 	addi	r2,r2,5520
    a9c0:	d8802615 	stw	r2,152(sp)
    a9c4:	a080080c 	andi	r2,r20,32
    a9c8:	103f561e 	bne	r2,zero,a724 <__alt_data_end+0xff00a724>
    a9cc:	a080040c 	andi	r2,r20,16
    a9d0:	1001d126 	beq	r2,zero,b118 <___vfiprintf_internal_r+0x1154>
    a9d4:	da802217 	ldw	r10,136(sp)
    a9d8:	0027883a 	mov	r19,zero
    a9dc:	54800017 	ldw	r18,0(r10)
    a9e0:	52800104 	addi	r10,r10,4
    a9e4:	da802215 	stw	r10,136(sp)
    a9e8:	003f5306 	br	a738 <__alt_data_end+0xff00a738>
    a9ec:	da802217 	ldw	r10,136(sp)
    a9f0:	d8001d85 	stb	zero,118(sp)
    a9f4:	55400017 	ldw	r21,0(r10)
    a9f8:	50c00104 	addi	r3,r10,4
    a9fc:	a8024226 	beq	r21,zero,b308 <___vfiprintf_internal_r+0x1344>
    aa00:	48021816 	blt	r9,zero,b264 <___vfiprintf_internal_r+0x12a0>
    aa04:	480d883a 	mov	r6,r9
    aa08:	000b883a 	mov	r5,zero
    aa0c:	a809883a 	mov	r4,r21
    aa10:	d8c02a15 	stw	r3,168(sp)
    aa14:	da002b15 	stw	r8,172(sp)
    aa18:	da402c15 	stw	r9,176(sp)
    aa1c:	00082140 	call	8214 <memchr>
    aa20:	d8c02a17 	ldw	r3,168(sp)
    aa24:	da002b17 	ldw	r8,172(sp)
    aa28:	da402c17 	ldw	r9,176(sp)
    aa2c:	10024826 	beq	r2,zero,b350 <___vfiprintf_internal_r+0x138c>
    aa30:	1567c83a 	sub	r19,r2,r21
    aa34:	df001d83 	ldbu	fp,118(sp)
    aa38:	d8c02215 	stw	r3,136(sp)
    aa3c:	0013883a 	mov	r9,zero
    aa40:	003e6006 	br	a3c4 <__alt_data_end+0xff00a3c4>
    aa44:	21003fcc 	andi	r4,r4,255
    aa48:	203fc026 	beq	r4,zero,a94c <__alt_data_end+0xff00a94c>
    aa4c:	d9c01d85 	stb	r7,118(sp)
    aa50:	003fbe06 	br	a94c <__alt_data_end+0xff00a94c>
    aa54:	da802217 	ldw	r10,136(sp)
    aa58:	54400017 	ldw	r17,0(r10)
    aa5c:	50800104 	addi	r2,r10,4
    aa60:	883e3b16 	blt	r17,zero,a350 <__alt_data_end+0xff00a350>
    aa64:	d8802215 	stw	r2,136(sp)
    aa68:	80c00007 	ldb	r3,0(r16)
    aa6c:	003db406 	br	a140 <__alt_data_end+0xff00a140>
    aa70:	01000044 	movi	r4,1
    aa74:	01c00ac4 	movi	r7,43
    aa78:	80c00007 	ldb	r3,0(r16)
    aa7c:	003db006 	br	a140 <__alt_data_end+0xff00a140>
    aa80:	80c00007 	ldb	r3,0(r16)
    aa84:	82800044 	addi	r10,r16,1
    aa88:	1b423c26 	beq	r3,r13,b37c <___vfiprintf_internal_r+0x13b8>
    aa8c:	18bff404 	addi	r2,r3,-48
    aa90:	0013883a 	mov	r9,zero
    aa94:	30822b36 	bltu	r6,r2,b344 <___vfiprintf_internal_r+0x1380>
    aa98:	50c00007 	ldb	r3,0(r10)
    aa9c:	4a4002a4 	muli	r9,r9,10
    aaa0:	54000044 	addi	r16,r10,1
    aaa4:	8015883a 	mov	r10,r16
    aaa8:	4893883a 	add	r9,r9,r2
    aaac:	18bff404 	addi	r2,r3,-48
    aab0:	30bff92e 	bgeu	r6,r2,aa98 <__alt_data_end+0xff00aa98>
    aab4:	483da30e 	bge	r9,zero,a144 <__alt_data_end+0xff00a144>
    aab8:	027fffc4 	movi	r9,-1
    aabc:	003da106 	br	a144 <__alt_data_end+0xff00a144>
    aac0:	a5001014 	ori	r20,r20,64
    aac4:	80c00007 	ldb	r3,0(r16)
    aac8:	003d9d06 	br	a140 <__alt_data_end+0xff00a140>
    aacc:	da802217 	ldw	r10,136(sp)
    aad0:	d8001d85 	stb	zero,118(sp)
    aad4:	50c00204 	addi	r3,r10,8
    aad8:	54800017 	ldw	r18,0(r10)
    aadc:	54c00117 	ldw	r19,4(r10)
    aae0:	4801ca16 	blt	r9,zero,b20c <___vfiprintf_internal_r+0x1248>
    aae4:	013fdfc4 	movi	r4,-129
    aae8:	94c4b03a 	or	r2,r18,r19
    aaec:	d8c02215 	stw	r3,136(sp)
    aaf0:	a128703a 	and	r20,r20,r4
    aaf4:	0039883a 	mov	fp,zero
    aaf8:	103f341e 	bne	r2,zero,a7cc <__alt_data_end+0xff00a7cc>
    aafc:	483e2e26 	beq	r9,zero,a3b8 <__alt_data_end+0xff00a3b8>
    ab00:	0025883a 	mov	r18,zero
    ab04:	94800c04 	addi	r18,r18,48
    ab08:	dc8019c5 	stb	r18,103(sp)
    ab0c:	dcc02717 	ldw	r19,156(sp)
    ab10:	dd4019c4 	addi	r21,sp,103
    ab14:	003e2b06 	br	a3c4 <__alt_data_end+0xff00a3c4>
    ab18:	21003fcc 	andi	r4,r4,255
    ab1c:	2002361e 	bne	r4,zero,b3f8 <___vfiprintf_internal_r+0x1434>
    ab20:	1801c126 	beq	r3,zero,b228 <___vfiprintf_internal_r+0x1264>
    ab24:	04800044 	movi	r18,1
    ab28:	d8c01005 	stb	r3,64(sp)
    ab2c:	d8001d85 	stb	zero,118(sp)
    ab30:	9027883a 	mov	r19,r18
    ab34:	dd401004 	addi	r21,sp,64
    ab38:	003f1106 	br	a780 <__alt_data_end+0xff00a780>
    ab3c:	d9402117 	ldw	r5,132(sp)
    ab40:	d9002017 	ldw	r4,128(sp)
    ab44:	d9801a04 	addi	r6,sp,104
    ab48:	d9c02b15 	stw	r7,172(sp)
    ab4c:	dbc02a15 	stw	r15,168(sp)
    ab50:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    ab54:	d9c02b17 	ldw	r7,172(sp)
    ab58:	dbc02a17 	ldw	r15,168(sp)
    ab5c:	10006d1e 	bne	r2,zero,ad14 <___vfiprintf_internal_r+0xd50>
    ab60:	d9801b17 	ldw	r6,108(sp)
    ab64:	d8801c17 	ldw	r2,112(sp)
    ab68:	d811883a 	mov	r8,sp
    ab6c:	31400044 	addi	r5,r6,1
    ab70:	003e3306 	br	a440 <__alt_data_end+0xff00a440>
    ab74:	d9401b17 	ldw	r5,108(sp)
    ab78:	d8801c17 	ldw	r2,112(sp)
    ab7c:	29000044 	addi	r4,r5,1
    ab80:	d8c01d87 	ldb	r3,118(sp)
    ab84:	183e4d26 	beq	r3,zero,a4bc <__alt_data_end+0xff00a4bc>
    ab88:	00c00044 	movi	r3,1
    ab8c:	d9401d84 	addi	r5,sp,118
    ab90:	10c5883a 	add	r2,r2,r3
    ab94:	41400015 	stw	r5,0(r8)
    ab98:	40c00115 	stw	r3,4(r8)
    ab9c:	d8801c15 	stw	r2,112(sp)
    aba0:	d9001b15 	stw	r4,108(sp)
    aba4:	014001c4 	movi	r5,7
    aba8:	2900a90e 	bge	r5,r4,ae50 <___vfiprintf_internal_r+0xe8c>
    abac:	1000da1e 	bne	r2,zero,af18 <___vfiprintf_internal_r+0xf54>
    abb0:	7000ab1e 	bne	r14,zero,ae60 <___vfiprintf_internal_r+0xe9c>
    abb4:	000b883a 	mov	r5,zero
    abb8:	1809883a 	mov	r4,r3
    abbc:	d811883a 	mov	r8,sp
    abc0:	00c02004 	movi	r3,128
    abc4:	e0fe4d26 	beq	fp,r3,a4fc <__alt_data_end+0xff00a4fc>
    abc8:	4cf9c83a 	sub	fp,r9,r19
    abcc:	073e7b0e 	bge	zero,fp,a5bc <__alt_data_end+0xff00a5bc>
    abd0:	01c00404 	movi	r7,16
    abd4:	3f01900e 	bge	r7,fp,b218 <___vfiprintf_internal_r+0x1254>
    abd8:	00c00074 	movhi	r3,1
    abdc:	18c5ca04 	addi	r3,r3,5928
    abe0:	d8c02415 	stw	r3,144(sp)
    abe4:	034001c4 	movi	r13,7
    abe8:	00000506 	br	ac00 <___vfiprintf_internal_r+0xc3c>
    abec:	29000084 	addi	r4,r5,2
    abf0:	42000204 	addi	r8,r8,8
    abf4:	180b883a 	mov	r5,r3
    abf8:	e73ffc04 	addi	fp,fp,-16
    abfc:	3f000d0e 	bge	r7,fp,ac34 <___vfiprintf_internal_r+0xc70>
    ac00:	10800404 	addi	r2,r2,16
    ac04:	28c00044 	addi	r3,r5,1
    ac08:	45c00015 	stw	r23,0(r8)
    ac0c:	41c00115 	stw	r7,4(r8)
    ac10:	d8801c15 	stw	r2,112(sp)
    ac14:	d8c01b15 	stw	r3,108(sp)
    ac18:	68fff40e 	bge	r13,r3,abec <__alt_data_end+0xff00abec>
    ac1c:	1000101e 	bne	r2,zero,ac60 <___vfiprintf_internal_r+0xc9c>
    ac20:	e73ffc04 	addi	fp,fp,-16
    ac24:	01000044 	movi	r4,1
    ac28:	000b883a 	mov	r5,zero
    ac2c:	d811883a 	mov	r8,sp
    ac30:	3f3ff316 	blt	r7,fp,ac00 <__alt_data_end+0xff00ac00>
    ac34:	da802417 	ldw	r10,144(sp)
    ac38:	1705883a 	add	r2,r2,fp
    ac3c:	47000115 	stw	fp,4(r8)
    ac40:	42800015 	stw	r10,0(r8)
    ac44:	d8801c15 	stw	r2,112(sp)
    ac48:	d9001b15 	stw	r4,108(sp)
    ac4c:	00c001c4 	movi	r3,7
    ac50:	19003616 	blt	r3,r4,ad2c <___vfiprintf_internal_r+0xd68>
    ac54:	42000204 	addi	r8,r8,8
    ac58:	21000044 	addi	r4,r4,1
    ac5c:	003e5706 	br	a5bc <__alt_data_end+0xff00a5bc>
    ac60:	d9402117 	ldw	r5,132(sp)
    ac64:	d9002017 	ldw	r4,128(sp)
    ac68:	d9801a04 	addi	r6,sp,104
    ac6c:	d9c02b15 	stw	r7,172(sp)
    ac70:	db402a15 	stw	r13,168(sp)
    ac74:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    ac78:	d9c02b17 	ldw	r7,172(sp)
    ac7c:	db402a17 	ldw	r13,168(sp)
    ac80:	1000241e 	bne	r2,zero,ad14 <___vfiprintf_internal_r+0xd50>
    ac84:	d9401b17 	ldw	r5,108(sp)
    ac88:	d8801c17 	ldw	r2,112(sp)
    ac8c:	d811883a 	mov	r8,sp
    ac90:	29000044 	addi	r4,r5,1
    ac94:	003fd806 	br	abf8 <__alt_data_end+0xff00abf8>
    ac98:	d9401b17 	ldw	r5,108(sp)
    ac9c:	00c00074 	movhi	r3,1
    aca0:	18c5ce04 	addi	r3,r3,5944
    aca4:	d8c02415 	stw	r3,144(sp)
    aca8:	29400044 	addi	r5,r5,1
    acac:	d8c02417 	ldw	r3,144(sp)
    acb0:	14c5883a 	add	r2,r2,r19
    acb4:	44c00115 	stw	r19,4(r8)
    acb8:	40c00015 	stw	r3,0(r8)
    acbc:	d8801c15 	stw	r2,112(sp)
    acc0:	d9401b15 	stw	r5,108(sp)
    acc4:	00c001c4 	movi	r3,7
    acc8:	1940070e 	bge	r3,r5,ace8 <___vfiprintf_internal_r+0xd24>
    accc:	103e4826 	beq	r2,zero,a5f0 <__alt_data_end+0xff00a5f0>
    acd0:	d9402117 	ldw	r5,132(sp)
    acd4:	d9002017 	ldw	r4,128(sp)
    acd8:	d9801a04 	addi	r6,sp,104
    acdc:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    ace0:	10000c1e 	bne	r2,zero,ad14 <___vfiprintf_internal_r+0xd50>
    ace4:	d8801c17 	ldw	r2,112(sp)
    ace8:	8c80010e 	bge	r17,r18,acf0 <___vfiprintf_internal_r+0xd2c>
    acec:	9023883a 	mov	r17,r18
    acf0:	da802317 	ldw	r10,140(sp)
    acf4:	5455883a 	add	r10,r10,r17
    acf8:	da802315 	stw	r10,140(sp)
    acfc:	103e4126 	beq	r2,zero,a604 <__alt_data_end+0xff00a604>
    ad00:	d9402117 	ldw	r5,132(sp)
    ad04:	d9002017 	ldw	r4,128(sp)
    ad08:	d9801a04 	addi	r6,sp,104
    ad0c:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    ad10:	103e3c26 	beq	r2,zero,a604 <__alt_data_end+0xff00a604>
    ad14:	dd002117 	ldw	r20,132(sp)
    ad18:	a080030b 	ldhu	r2,12(r20)
    ad1c:	1080100c 	andi	r2,r2,64
    ad20:	1001231e 	bne	r2,zero,b1b0 <___vfiprintf_internal_r+0x11ec>
    ad24:	d8802317 	ldw	r2,140(sp)
    ad28:	003d7b06 	br	a318 <__alt_data_end+0xff00a318>
    ad2c:	1000991e 	bne	r2,zero,af94 <___vfiprintf_internal_r+0xfd0>
    ad30:	00c00044 	movi	r3,1
    ad34:	9805883a 	mov	r2,r19
    ad38:	dd400015 	stw	r21,0(sp)
    ad3c:	dcc00115 	stw	r19,4(sp)
    ad40:	dcc01c15 	stw	r19,112(sp)
    ad44:	d8c01b15 	stw	r3,108(sp)
    ad48:	d811883a 	mov	r8,sp
    ad4c:	42000204 	addi	r8,r8,8
    ad50:	a2c0010c 	andi	r11,r20,4
    ad54:	583fe426 	beq	r11,zero,ace8 <__alt_data_end+0xff00ace8>
    ad58:	8ca7c83a 	sub	r19,r17,r18
    ad5c:	04ffe20e 	bge	zero,r19,ace8 <__alt_data_end+0xff00ace8>
    ad60:	01c00404 	movi	r7,16
    ad64:	3cffcc0e 	bge	r7,r19,ac98 <__alt_data_end+0xff00ac98>
    ad68:	02800074 	movhi	r10,1
    ad6c:	5285ce04 	addi	r10,r10,5944
    ad70:	d9001b17 	ldw	r4,108(sp)
    ad74:	da802415 	stw	r10,144(sp)
    ad78:	382b883a 	mov	r21,r7
    ad7c:	050001c4 	movi	r20,7
    ad80:	df002017 	ldw	fp,128(sp)
    ad84:	00000506 	br	ad9c <___vfiprintf_internal_r+0xdd8>
    ad88:	21400084 	addi	r5,r4,2
    ad8c:	42000204 	addi	r8,r8,8
    ad90:	1809883a 	mov	r4,r3
    ad94:	9cfffc04 	addi	r19,r19,-16
    ad98:	acffc40e 	bge	r21,r19,acac <__alt_data_end+0xff00acac>
    ad9c:	10800404 	addi	r2,r2,16
    ada0:	20c00044 	addi	r3,r4,1
    ada4:	45800015 	stw	r22,0(r8)
    ada8:	45400115 	stw	r21,4(r8)
    adac:	d8801c15 	stw	r2,112(sp)
    adb0:	d8c01b15 	stw	r3,108(sp)
    adb4:	a0fff40e 	bge	r20,r3,ad88 <__alt_data_end+0xff00ad88>
    adb8:	1000041e 	bne	r2,zero,adcc <___vfiprintf_internal_r+0xe08>
    adbc:	01400044 	movi	r5,1
    adc0:	0009883a 	mov	r4,zero
    adc4:	d811883a 	mov	r8,sp
    adc8:	003ff206 	br	ad94 <__alt_data_end+0xff00ad94>
    adcc:	d9402117 	ldw	r5,132(sp)
    add0:	d9801a04 	addi	r6,sp,104
    add4:	e009883a 	mov	r4,fp
    add8:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    addc:	103fcd1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    ade0:	d9001b17 	ldw	r4,108(sp)
    ade4:	d8801c17 	ldw	r2,112(sp)
    ade8:	d811883a 	mov	r8,sp
    adec:	21400044 	addi	r5,r4,1
    adf0:	003fe806 	br	ad94 <__alt_data_end+0xff00ad94>
    adf4:	d9402117 	ldw	r5,132(sp)
    adf8:	d9002017 	ldw	r4,128(sp)
    adfc:	d9801a04 	addi	r6,sp,104
    ae00:	d9c02b15 	stw	r7,172(sp)
    ae04:	db402a15 	stw	r13,168(sp)
    ae08:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    ae0c:	d9c02b17 	ldw	r7,172(sp)
    ae10:	db402a17 	ldw	r13,168(sp)
    ae14:	103fbf1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    ae18:	d9401b17 	ldw	r5,108(sp)
    ae1c:	d8801c17 	ldw	r2,112(sp)
    ae20:	d811883a 	mov	r8,sp
    ae24:	29800044 	addi	r6,r5,1
    ae28:	003dc406 	br	a53c <__alt_data_end+0xff00a53c>
    ae2c:	1000d21e 	bne	r2,zero,b178 <___vfiprintf_internal_r+0x11b4>
    ae30:	d8c01d87 	ldb	r3,118(sp)
    ae34:	18009526 	beq	r3,zero,b08c <___vfiprintf_internal_r+0x10c8>
    ae38:	00800044 	movi	r2,1
    ae3c:	d8c01d84 	addi	r3,sp,118
    ae40:	1009883a 	mov	r4,r2
    ae44:	d8c00015 	stw	r3,0(sp)
    ae48:	d8800115 	stw	r2,4(sp)
    ae4c:	d811883a 	mov	r8,sp
    ae50:	200b883a 	mov	r5,r4
    ae54:	42000204 	addi	r8,r8,8
    ae58:	21000044 	addi	r4,r4,1
    ae5c:	003d9706 	br	a4bc <__alt_data_end+0xff00a4bc>
    ae60:	d9001d04 	addi	r4,sp,116
    ae64:	00800084 	movi	r2,2
    ae68:	d9000015 	stw	r4,0(sp)
    ae6c:	d8800115 	stw	r2,4(sp)
    ae70:	1809883a 	mov	r4,r3
    ae74:	d811883a 	mov	r8,sp
    ae78:	200b883a 	mov	r5,r4
    ae7c:	42000204 	addi	r8,r8,8
    ae80:	21000044 	addi	r4,r4,1
    ae84:	003f4e06 	br	abc0 <__alt_data_end+0xff00abc0>
    ae88:	d8001d85 	stb	zero,118(sp)
    ae8c:	48005016 	blt	r9,zero,afd0 <___vfiprintf_internal_r+0x100c>
    ae90:	00ffdfc4 	movi	r3,-129
    ae94:	94c4b03a 	or	r2,r18,r19
    ae98:	a0e8703a 	and	r20,r20,r3
    ae9c:	103d4426 	beq	r2,zero,a3b0 <__alt_data_end+0xff00a3b0>
    aea0:	0039883a 	mov	fp,zero
    aea4:	d9002617 	ldw	r4,152(sp)
    aea8:	dd401a04 	addi	r21,sp,104
    aeac:	908003cc 	andi	r2,r18,15
    aeb0:	9806973a 	slli	r3,r19,28
    aeb4:	2085883a 	add	r2,r4,r2
    aeb8:	9024d13a 	srli	r18,r18,4
    aebc:	10800003 	ldbu	r2,0(r2)
    aec0:	9826d13a 	srli	r19,r19,4
    aec4:	ad7fffc4 	addi	r21,r21,-1
    aec8:	1ca4b03a 	or	r18,r3,r18
    aecc:	a8800005 	stb	r2,0(r21)
    aed0:	94c4b03a 	or	r2,r18,r19
    aed4:	103ff51e 	bne	r2,zero,aeac <__alt_data_end+0xff00aeac>
    aed8:	003e5906 	br	a840 <__alt_data_end+0xff00a840>
    aedc:	d9402117 	ldw	r5,132(sp)
    aee0:	d9002017 	ldw	r4,128(sp)
    aee4:	d9801a04 	addi	r6,sp,104
    aee8:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    aeec:	103f891e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    aef0:	d8801c17 	ldw	r2,112(sp)
    aef4:	d811883a 	mov	r8,sp
    aef8:	003f9506 	br	ad50 <__alt_data_end+0xff00ad50>
    aefc:	d9402117 	ldw	r5,132(sp)
    af00:	d9002017 	ldw	r4,128(sp)
    af04:	d9801a04 	addi	r6,sp,104
    af08:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    af0c:	103f811e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    af10:	d811883a 	mov	r8,sp
    af14:	003ced06 	br	a2cc <__alt_data_end+0xff00a2cc>
    af18:	d9402117 	ldw	r5,132(sp)
    af1c:	d9002017 	ldw	r4,128(sp)
    af20:	d9801a04 	addi	r6,sp,104
    af24:	da402c15 	stw	r9,176(sp)
    af28:	db802a15 	stw	r14,168(sp)
    af2c:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    af30:	da402c17 	ldw	r9,176(sp)
    af34:	db802a17 	ldw	r14,168(sp)
    af38:	103f761e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    af3c:	d9401b17 	ldw	r5,108(sp)
    af40:	d8801c17 	ldw	r2,112(sp)
    af44:	d811883a 	mov	r8,sp
    af48:	29000044 	addi	r4,r5,1
    af4c:	003d5b06 	br	a4bc <__alt_data_end+0xff00a4bc>
    af50:	d9402117 	ldw	r5,132(sp)
    af54:	d9002017 	ldw	r4,128(sp)
    af58:	d9801a04 	addi	r6,sp,104
    af5c:	da402c15 	stw	r9,176(sp)
    af60:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    af64:	da402c17 	ldw	r9,176(sp)
    af68:	103f6a1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    af6c:	d9401b17 	ldw	r5,108(sp)
    af70:	d8801c17 	ldw	r2,112(sp)
    af74:	d811883a 	mov	r8,sp
    af78:	29000044 	addi	r4,r5,1
    af7c:	003f1006 	br	abc0 <__alt_data_end+0xff00abc0>
    af80:	1000c31e 	bne	r2,zero,b290 <___vfiprintf_internal_r+0x12cc>
    af84:	01000044 	movi	r4,1
    af88:	000b883a 	mov	r5,zero
    af8c:	d811883a 	mov	r8,sp
    af90:	003f0d06 	br	abc8 <__alt_data_end+0xff00abc8>
    af94:	d9402117 	ldw	r5,132(sp)
    af98:	d9002017 	ldw	r4,128(sp)
    af9c:	d9801a04 	addi	r6,sp,104
    afa0:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    afa4:	103f5b1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    afa8:	d9001b17 	ldw	r4,108(sp)
    afac:	d8801c17 	ldw	r2,112(sp)
    afb0:	d811883a 	mov	r8,sp
    afb4:	21000044 	addi	r4,r4,1
    afb8:	003d8006 	br	a5bc <__alt_data_end+0xff00a5bc>
    afbc:	01000074 	movhi	r4,1
    afc0:	21056904 	addi	r4,r4,5540
    afc4:	d9002615 	stw	r4,152(sp)
    afc8:	d8c02215 	stw	r3,136(sp)
    afcc:	1029883a 	mov	r20,r2
    afd0:	94c4b03a 	or	r2,r18,r19
    afd4:	103fb21e 	bne	r2,zero,aea0 <__alt_data_end+0xff00aea0>
    afd8:	0039883a 	mov	fp,zero
    afdc:	00800084 	movi	r2,2
    afe0:	003e6b06 	br	a990 <__alt_data_end+0xff00a990>
    afe4:	da802217 	ldw	r10,136(sp)
    afe8:	d8001d85 	stb	zero,118(sp)
    afec:	0027883a 	mov	r19,zero
    aff0:	50800104 	addi	r2,r10,4
    aff4:	54800017 	ldw	r18,0(r10)
    aff8:	483e6016 	blt	r9,zero,a97c <__alt_data_end+0xff00a97c>
    affc:	00ffdfc4 	movi	r3,-129
    b000:	d8802215 	stw	r2,136(sp)
    b004:	a0e8703a 	and	r20,r20,r3
    b008:	0039883a 	mov	fp,zero
    b00c:	903ebb26 	beq	r18,zero,aafc <__alt_data_end+0xff00aafc>
    b010:	00800244 	movi	r2,9
    b014:	14bdee36 	bltu	r2,r18,a7d0 <__alt_data_end+0xff00a7d0>
    b018:	003eba06 	br	ab04 <__alt_data_end+0xff00ab04>
    b01c:	00800c04 	movi	r2,48
    b020:	d8c01d45 	stb	r3,117(sp)
    b024:	d8801d05 	stb	r2,116(sp)
    b028:	d8001d85 	stb	zero,118(sp)
    b02c:	a0c00094 	ori	r3,r20,2
    b030:	4800a916 	blt	r9,zero,b2d8 <___vfiprintf_internal_r+0x1314>
    b034:	00bfdfc4 	movi	r2,-129
    b038:	a096703a 	and	r11,r20,r2
    b03c:	5d000094 	ori	r20,r11,2
    b040:	0039883a 	mov	fp,zero
    b044:	003f9706 	br	aea4 <__alt_data_end+0xff00aea4>
    b048:	8025883a 	mov	r18,r16
    b04c:	003c2e06 	br	a108 <__alt_data_end+0xff00a108>
    b050:	00800074 	movhi	r2,1
    b054:	10856904 	addi	r2,r2,5540
    b058:	0039883a 	mov	fp,zero
    b05c:	d8802615 	stw	r2,152(sp)
    b060:	003f9006 	br	aea4 <__alt_data_end+0xff00aea4>
    b064:	04a5c83a 	sub	r18,zero,r18
    b068:	07000b44 	movi	fp,45
    b06c:	9004c03a 	cmpne	r2,r18,zero
    b070:	04e7c83a 	sub	r19,zero,r19
    b074:	df001d85 	stb	fp,118(sp)
    b078:	98a7c83a 	sub	r19,r19,r2
    b07c:	48009f16 	blt	r9,zero,b2fc <___vfiprintf_internal_r+0x1338>
    b080:	00bfdfc4 	movi	r2,-129
    b084:	a0a8703a 	and	r20,r20,r2
    b088:	003dd006 	br	a7cc <__alt_data_end+0xff00a7cc>
    b08c:	70004c26 	beq	r14,zero,b1c0 <___vfiprintf_internal_r+0x11fc>
    b090:	00800084 	movi	r2,2
    b094:	d8c01d04 	addi	r3,sp,116
    b098:	d8c00015 	stw	r3,0(sp)
    b09c:	d8800115 	stw	r2,4(sp)
    b0a0:	01000044 	movi	r4,1
    b0a4:	d811883a 	mov	r8,sp
    b0a8:	003f7306 	br	ae78 <__alt_data_end+0xff00ae78>
    b0ac:	a080100c 	andi	r2,r20,64
    b0b0:	da802217 	ldw	r10,136(sp)
    b0b4:	103e0626 	beq	r2,zero,a8d0 <__alt_data_end+0xff00a8d0>
    b0b8:	5480000f 	ldh	r18,0(r10)
    b0bc:	52800104 	addi	r10,r10,4
    b0c0:	da802215 	stw	r10,136(sp)
    b0c4:	9027d7fa 	srai	r19,r18,31
    b0c8:	9805883a 	mov	r2,r19
    b0cc:	003db806 	br	a7b0 <__alt_data_end+0xff00a7b0>
    b0d0:	a080040c 	andi	r2,r20,16
    b0d4:	1000091e 	bne	r2,zero,b0fc <___vfiprintf_internal_r+0x1138>
    b0d8:	a2c0100c 	andi	r11,r20,64
    b0dc:	58000726 	beq	r11,zero,b0fc <___vfiprintf_internal_r+0x1138>
    b0e0:	da802217 	ldw	r10,136(sp)
    b0e4:	50800017 	ldw	r2,0(r10)
    b0e8:	52800104 	addi	r10,r10,4
    b0ec:	da802215 	stw	r10,136(sp)
    b0f0:	da802317 	ldw	r10,140(sp)
    b0f4:	1280000d 	sth	r10,0(r2)
    b0f8:	003be706 	br	a098 <__alt_data_end+0xff00a098>
    b0fc:	da802217 	ldw	r10,136(sp)
    b100:	50800017 	ldw	r2,0(r10)
    b104:	52800104 	addi	r10,r10,4
    b108:	da802215 	stw	r10,136(sp)
    b10c:	da802317 	ldw	r10,140(sp)
    b110:	12800015 	stw	r10,0(r2)
    b114:	003be006 	br	a098 <__alt_data_end+0xff00a098>
    b118:	a080100c 	andi	r2,r20,64
    b11c:	da802217 	ldw	r10,136(sp)
    b120:	10003026 	beq	r2,zero,b1e4 <___vfiprintf_internal_r+0x1220>
    b124:	5480000b 	ldhu	r18,0(r10)
    b128:	52800104 	addi	r10,r10,4
    b12c:	0027883a 	mov	r19,zero
    b130:	da802215 	stw	r10,136(sp)
    b134:	003d8006 	br	a738 <__alt_data_end+0xff00a738>
    b138:	80c00007 	ldb	r3,0(r16)
    b13c:	003c0006 	br	a140 <__alt_data_end+0xff00a140>
    b140:	a080100c 	andi	r2,r20,64
    b144:	d8001d85 	stb	zero,118(sp)
    b148:	da802217 	ldw	r10,136(sp)
    b14c:	1000201e 	bne	r2,zero,b1d0 <___vfiprintf_internal_r+0x120c>
    b150:	50800104 	addi	r2,r10,4
    b154:	54800017 	ldw	r18,0(r10)
    b158:	0027883a 	mov	r19,zero
    b15c:	483def0e 	bge	r9,zero,a91c <__alt_data_end+0xff00a91c>
    b160:	94c6b03a 	or	r3,r18,r19
    b164:	d8802215 	stw	r2,136(sp)
    b168:	183d4e1e 	bne	r3,zero,a6a4 <__alt_data_end+0xff00a6a4>
    b16c:	0039883a 	mov	fp,zero
    b170:	0005883a 	mov	r2,zero
    b174:	003e0606 	br	a990 <__alt_data_end+0xff00a990>
    b178:	d9402117 	ldw	r5,132(sp)
    b17c:	d9002017 	ldw	r4,128(sp)
    b180:	d9801a04 	addi	r6,sp,104
    b184:	da402c15 	stw	r9,176(sp)
    b188:	db802a15 	stw	r14,168(sp)
    b18c:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    b190:	da402c17 	ldw	r9,176(sp)
    b194:	db802a17 	ldw	r14,168(sp)
    b198:	103ede1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    b19c:	d9401b17 	ldw	r5,108(sp)
    b1a0:	d8801c17 	ldw	r2,112(sp)
    b1a4:	d811883a 	mov	r8,sp
    b1a8:	29000044 	addi	r4,r5,1
    b1ac:	003e7406 	br	ab80 <__alt_data_end+0xff00ab80>
    b1b0:	00bfffc4 	movi	r2,-1
    b1b4:	003c5806 	br	a318 <__alt_data_end+0xff00a318>
    b1b8:	d811883a 	mov	r8,sp
    b1bc:	003ee806 	br	ad60 <__alt_data_end+0xff00ad60>
    b1c0:	000b883a 	mov	r5,zero
    b1c4:	01000044 	movi	r4,1
    b1c8:	d811883a 	mov	r8,sp
    b1cc:	003e7c06 	br	abc0 <__alt_data_end+0xff00abc0>
    b1d0:	50800104 	addi	r2,r10,4
    b1d4:	5480000b 	ldhu	r18,0(r10)
    b1d8:	0027883a 	mov	r19,zero
    b1dc:	483dcf0e 	bge	r9,zero,a91c <__alt_data_end+0xff00a91c>
    b1e0:	003fdf06 	br	b160 <__alt_data_end+0xff00b160>
    b1e4:	54800017 	ldw	r18,0(r10)
    b1e8:	52800104 	addi	r10,r10,4
    b1ec:	0027883a 	mov	r19,zero
    b1f0:	da802215 	stw	r10,136(sp)
    b1f4:	003d5006 	br	a738 <__alt_data_end+0xff00a738>
    b1f8:	50800104 	addi	r2,r10,4
    b1fc:	5480000b 	ldhu	r18,0(r10)
    b200:	0027883a 	mov	r19,zero
    b204:	483f7d0e 	bge	r9,zero,affc <__alt_data_end+0xff00affc>
    b208:	003ddc06 	br	a97c <__alt_data_end+0xff00a97c>
    b20c:	d8c02215 	stw	r3,136(sp)
    b210:	0039883a 	mov	fp,zero
    b214:	003ddb06 	br	a984 <__alt_data_end+0xff00a984>
    b218:	02800074 	movhi	r10,1
    b21c:	5285ca04 	addi	r10,r10,5928
    b220:	da802415 	stw	r10,144(sp)
    b224:	003e8306 	br	ac34 <__alt_data_end+0xff00ac34>
    b228:	d8801c17 	ldw	r2,112(sp)
    b22c:	dd002117 	ldw	r20,132(sp)
    b230:	103eb926 	beq	r2,zero,ad18 <__alt_data_end+0xff00ad18>
    b234:	d9002017 	ldw	r4,128(sp)
    b238:	d9801a04 	addi	r6,sp,104
    b23c:	a00b883a 	mov	r5,r20
    b240:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    b244:	003eb406 	br	ad18 <__alt_data_end+0xff00ad18>
    b248:	80c00043 	ldbu	r3,1(r16)
    b24c:	a5000814 	ori	r20,r20,32
    b250:	84000044 	addi	r16,r16,1
    b254:	18c03fcc 	andi	r3,r3,255
    b258:	18c0201c 	xori	r3,r3,128
    b25c:	18ffe004 	addi	r3,r3,-128
    b260:	003bb706 	br	a140 <__alt_data_end+0xff00a140>
    b264:	a809883a 	mov	r4,r21
    b268:	d8c02a15 	stw	r3,168(sp)
    b26c:	da002b15 	stw	r8,172(sp)
    b270:	00031780 	call	3178 <strlen>
    b274:	d8c02a17 	ldw	r3,168(sp)
    b278:	1027883a 	mov	r19,r2
    b27c:	df001d83 	ldbu	fp,118(sp)
    b280:	d8c02215 	stw	r3,136(sp)
    b284:	0013883a 	mov	r9,zero
    b288:	da002b17 	ldw	r8,172(sp)
    b28c:	003c4d06 	br	a3c4 <__alt_data_end+0xff00a3c4>
    b290:	d9402117 	ldw	r5,132(sp)
    b294:	d9002017 	ldw	r4,128(sp)
    b298:	d9801a04 	addi	r6,sp,104
    b29c:	da402c15 	stw	r9,176(sp)
    b2a0:	0009eb00 	call	9eb0 <__sprint_r.part.0>
    b2a4:	da402c17 	ldw	r9,176(sp)
    b2a8:	103e9a1e 	bne	r2,zero,ad14 <__alt_data_end+0xff00ad14>
    b2ac:	d9401b17 	ldw	r5,108(sp)
    b2b0:	d8801c17 	ldw	r2,112(sp)
    b2b4:	d811883a 	mov	r8,sp
    b2b8:	29000044 	addi	r4,r5,1
    b2bc:	003e4206 	br	abc8 <__alt_data_end+0xff00abc8>
    b2c0:	d9401b17 	ldw	r5,108(sp)
    b2c4:	01000074 	movhi	r4,1
    b2c8:	2105ce04 	addi	r4,r4,5944
    b2cc:	d9002415 	stw	r4,144(sp)
    b2d0:	29400044 	addi	r5,r5,1
    b2d4:	003c6d06 	br	a48c <__alt_data_end+0xff00a48c>
    b2d8:	0039883a 	mov	fp,zero
    b2dc:	00800084 	movi	r2,2
    b2e0:	10803fcc 	andi	r2,r2,255
    b2e4:	01000044 	movi	r4,1
    b2e8:	11001e26 	beq	r2,r4,b364 <___vfiprintf_internal_r+0x13a0>
    b2ec:	01000084 	movi	r4,2
    b2f0:	11001e1e 	bne	r2,r4,b36c <___vfiprintf_internal_r+0x13a8>
    b2f4:	1829883a 	mov	r20,r3
    b2f8:	003eea06 	br	aea4 <__alt_data_end+0xff00aea4>
    b2fc:	a007883a 	mov	r3,r20
    b300:	00800044 	movi	r2,1
    b304:	003ff606 	br	b2e0 <__alt_data_end+0xff00b2e0>
    b308:	00800184 	movi	r2,6
    b30c:	1240012e 	bgeu	r2,r9,b314 <___vfiprintf_internal_r+0x1350>
    b310:	1013883a 	mov	r9,r2
    b314:	4827883a 	mov	r19,r9
    b318:	4825883a 	mov	r18,r9
    b31c:	48001516 	blt	r9,zero,b374 <___vfiprintf_internal_r+0x13b0>
    b320:	05400074 	movhi	r21,1
    b324:	d8c02215 	stw	r3,136(sp)
    b328:	ad456e04 	addi	r21,r21,5560
    b32c:	003d1406 	br	a780 <__alt_data_end+0xff00a780>
    b330:	02800074 	movhi	r10,1
    b334:	5285ca04 	addi	r10,r10,5928
    b338:	da802415 	stw	r10,144(sp)
    b33c:	200d883a 	mov	r6,r4
    b340:	003c9106 	br	a588 <__alt_data_end+0xff00a588>
    b344:	5021883a 	mov	r16,r10
    b348:	0013883a 	mov	r9,zero
    b34c:	003b7d06 	br	a144 <__alt_data_end+0xff00a144>
    b350:	4827883a 	mov	r19,r9
    b354:	df001d83 	ldbu	fp,118(sp)
    b358:	d8c02215 	stw	r3,136(sp)
    b35c:	0013883a 	mov	r9,zero
    b360:	003c1806 	br	a3c4 <__alt_data_end+0xff00a3c4>
    b364:	1829883a 	mov	r20,r3
    b368:	003d1806 	br	a7cc <__alt_data_end+0xff00a7cc>
    b36c:	1829883a 	mov	r20,r3
    b370:	003ccd06 	br	a6a8 <__alt_data_end+0xff00a6a8>
    b374:	0025883a 	mov	r18,zero
    b378:	003fe906 	br	b320 <__alt_data_end+0xff00b320>
    b37c:	d8802217 	ldw	r2,136(sp)
    b380:	80c00043 	ldbu	r3,1(r16)
    b384:	5021883a 	mov	r16,r10
    b388:	12400017 	ldw	r9,0(r2)
    b38c:	10800104 	addi	r2,r2,4
    b390:	d8802215 	stw	r2,136(sp)
    b394:	483faf0e 	bge	r9,zero,b254 <__alt_data_end+0xff00b254>
    b398:	18c03fcc 	andi	r3,r3,255
    b39c:	18c0201c 	xori	r3,r3,128
    b3a0:	027fffc4 	movi	r9,-1
    b3a4:	18ffe004 	addi	r3,r3,-128
    b3a8:	003b6506 	br	a140 <__alt_data_end+0xff00a140>
    b3ac:	d9c01d85 	stb	r7,118(sp)
    b3b0:	003ca006 	br	a634 <__alt_data_end+0xff00a634>
    b3b4:	d9c01d85 	stb	r7,118(sp)
    b3b8:	003cad06 	br	a670 <__alt_data_end+0xff00a670>
    b3bc:	d9c01d85 	stb	r7,118(sp)
    b3c0:	003d7d06 	br	a9b8 <__alt_data_end+0xff00a9b8>
    b3c4:	d9c01d85 	stb	r7,118(sp)
    b3c8:	003d5f06 	br	a948 <__alt_data_end+0xff00a948>
    b3cc:	a080004c 	andi	r2,r20,1
    b3d0:	0039883a 	mov	fp,zero
    b3d4:	10000526 	beq	r2,zero,b3ec <___vfiprintf_internal_r+0x1428>
    b3d8:	00800c04 	movi	r2,48
    b3dc:	d88019c5 	stb	r2,103(sp)
    b3e0:	dcc02717 	ldw	r19,156(sp)
    b3e4:	dd4019c4 	addi	r21,sp,103
    b3e8:	003bf606 	br	a3c4 <__alt_data_end+0xff00a3c4>
    b3ec:	0027883a 	mov	r19,zero
    b3f0:	dd401a04 	addi	r21,sp,104
    b3f4:	003bf306 	br	a3c4 <__alt_data_end+0xff00a3c4>
    b3f8:	d9c01d85 	stb	r7,118(sp)
    b3fc:	003dc806 	br	ab20 <__alt_data_end+0xff00ab20>
    b400:	d9c01d85 	stb	r7,118(sp)
    b404:	003d3a06 	br	a8f0 <__alt_data_end+0xff00a8f0>
    b408:	d9c01d85 	stb	r7,118(sp)
    b40c:	003d2a06 	br	a8b8 <__alt_data_end+0xff00a8b8>
    b410:	d9c01d85 	stb	r7,118(sp)
    b414:	003cde06 	br	a790 <__alt_data_end+0xff00a790>
    b418:	d9c01d85 	stb	r7,118(sp)
    b41c:	003cbc06 	br	a710 <__alt_data_end+0xff00a710>

0000b420 <__vfiprintf_internal>:
    b420:	00800074 	movhi	r2,1
    b424:	108ccb04 	addi	r2,r2,13100
    b428:	300f883a 	mov	r7,r6
    b42c:	280d883a 	mov	r6,r5
    b430:	200b883a 	mov	r5,r4
    b434:	11000017 	ldw	r4,0(r2)
    b438:	0009fc41 	jmpi	9fc4 <___vfiprintf_internal_r>

0000b43c <__sbprintf>:
    b43c:	2880030b 	ldhu	r2,12(r5)
    b440:	2ac01917 	ldw	r11,100(r5)
    b444:	2a80038b 	ldhu	r10,14(r5)
    b448:	2a400717 	ldw	r9,28(r5)
    b44c:	2a000917 	ldw	r8,36(r5)
    b450:	defee204 	addi	sp,sp,-1144
    b454:	00c10004 	movi	r3,1024
    b458:	dc011a15 	stw	r16,1128(sp)
    b45c:	10bfff4c 	andi	r2,r2,65533
    b460:	2821883a 	mov	r16,r5
    b464:	d8cb883a 	add	r5,sp,r3
    b468:	dc811c15 	stw	r18,1136(sp)
    b46c:	dc411b15 	stw	r17,1132(sp)
    b470:	dfc11d15 	stw	ra,1140(sp)
    b474:	2025883a 	mov	r18,r4
    b478:	d881030d 	sth	r2,1036(sp)
    b47c:	dac11915 	stw	r11,1124(sp)
    b480:	da81038d 	sth	r10,1038(sp)
    b484:	da410715 	stw	r9,1052(sp)
    b488:	da010915 	stw	r8,1060(sp)
    b48c:	dec10015 	stw	sp,1024(sp)
    b490:	dec10415 	stw	sp,1040(sp)
    b494:	d8c10215 	stw	r3,1032(sp)
    b498:	d8c10515 	stw	r3,1044(sp)
    b49c:	d8010615 	stw	zero,1048(sp)
    b4a0:	0009fc40 	call	9fc4 <___vfiprintf_internal_r>
    b4a4:	1023883a 	mov	r17,r2
    b4a8:	10000416 	blt	r2,zero,b4bc <__sbprintf+0x80>
    b4ac:	d9410004 	addi	r5,sp,1024
    b4b0:	9009883a 	mov	r4,r18
    b4b4:	00070d80 	call	70d8 <_fflush_r>
    b4b8:	10000d1e 	bne	r2,zero,b4f0 <__sbprintf+0xb4>
    b4bc:	d881030b 	ldhu	r2,1036(sp)
    b4c0:	1080100c 	andi	r2,r2,64
    b4c4:	10000326 	beq	r2,zero,b4d4 <__sbprintf+0x98>
    b4c8:	8080030b 	ldhu	r2,12(r16)
    b4cc:	10801014 	ori	r2,r2,64
    b4d0:	8080030d 	sth	r2,12(r16)
    b4d4:	8805883a 	mov	r2,r17
    b4d8:	dfc11d17 	ldw	ra,1140(sp)
    b4dc:	dc811c17 	ldw	r18,1136(sp)
    b4e0:	dc411b17 	ldw	r17,1132(sp)
    b4e4:	dc011a17 	ldw	r16,1128(sp)
    b4e8:	dec11e04 	addi	sp,sp,1144
    b4ec:	f800283a 	ret
    b4f0:	047fffc4 	movi	r17,-1
    b4f4:	003ff106 	br	b4bc <__alt_data_end+0xff00b4bc>

0000b4f8 <_write_r>:
    b4f8:	defffd04 	addi	sp,sp,-12
    b4fc:	2805883a 	mov	r2,r5
    b500:	dc000015 	stw	r16,0(sp)
    b504:	04000074 	movhi	r16,1
    b508:	dc400115 	stw	r17,4(sp)
    b50c:	300b883a 	mov	r5,r6
    b510:	8413e804 	addi	r16,r16,20384
    b514:	2023883a 	mov	r17,r4
    b518:	380d883a 	mov	r6,r7
    b51c:	1009883a 	mov	r4,r2
    b520:	dfc00215 	stw	ra,8(sp)
    b524:	80000015 	stw	zero,0(r16)
    b528:	000edcc0 	call	edcc <write>
    b52c:	00ffffc4 	movi	r3,-1
    b530:	10c00526 	beq	r2,r3,b548 <_write_r+0x50>
    b534:	dfc00217 	ldw	ra,8(sp)
    b538:	dc400117 	ldw	r17,4(sp)
    b53c:	dc000017 	ldw	r16,0(sp)
    b540:	dec00304 	addi	sp,sp,12
    b544:	f800283a 	ret
    b548:	80c00017 	ldw	r3,0(r16)
    b54c:	183ff926 	beq	r3,zero,b534 <__alt_data_end+0xff00b534>
    b550:	88c00015 	stw	r3,0(r17)
    b554:	003ff706 	br	b534 <__alt_data_end+0xff00b534>

0000b558 <_close_r>:
    b558:	defffd04 	addi	sp,sp,-12
    b55c:	dc000015 	stw	r16,0(sp)
    b560:	04000074 	movhi	r16,1
    b564:	dc400115 	stw	r17,4(sp)
    b568:	8413e804 	addi	r16,r16,20384
    b56c:	2023883a 	mov	r17,r4
    b570:	2809883a 	mov	r4,r5
    b574:	dfc00215 	stw	ra,8(sp)
    b578:	80000015 	stw	zero,0(r16)
    b57c:	000e58c0 	call	e58c <close>
    b580:	00ffffc4 	movi	r3,-1
    b584:	10c00526 	beq	r2,r3,b59c <_close_r+0x44>
    b588:	dfc00217 	ldw	ra,8(sp)
    b58c:	dc400117 	ldw	r17,4(sp)
    b590:	dc000017 	ldw	r16,0(sp)
    b594:	dec00304 	addi	sp,sp,12
    b598:	f800283a 	ret
    b59c:	80c00017 	ldw	r3,0(r16)
    b5a0:	183ff926 	beq	r3,zero,b588 <__alt_data_end+0xff00b588>
    b5a4:	88c00015 	stw	r3,0(r17)
    b5a8:	003ff706 	br	b588 <__alt_data_end+0xff00b588>

0000b5ac <_calloc_r>:
    b5ac:	298b383a 	mul	r5,r5,r6
    b5b0:	defffe04 	addi	sp,sp,-8
    b5b4:	dfc00115 	stw	ra,4(sp)
    b5b8:	dc000015 	stw	r16,0(sp)
    b5bc:	00027d80 	call	27d8 <_malloc_r>
    b5c0:	10002926 	beq	r2,zero,b668 <_calloc_r+0xbc>
    b5c4:	11bfff17 	ldw	r6,-4(r2)
    b5c8:	1021883a 	mov	r16,r2
    b5cc:	00bfff04 	movi	r2,-4
    b5d0:	308c703a 	and	r6,r6,r2
    b5d4:	00c00904 	movi	r3,36
    b5d8:	308d883a 	add	r6,r6,r2
    b5dc:	19801636 	bltu	r3,r6,b638 <_calloc_r+0x8c>
    b5e0:	008004c4 	movi	r2,19
    b5e4:	11800b2e 	bgeu	r2,r6,b614 <_calloc_r+0x68>
    b5e8:	80000015 	stw	zero,0(r16)
    b5ec:	80000115 	stw	zero,4(r16)
    b5f0:	008006c4 	movi	r2,27
    b5f4:	11801a2e 	bgeu	r2,r6,b660 <_calloc_r+0xb4>
    b5f8:	80000215 	stw	zero,8(r16)
    b5fc:	80000315 	stw	zero,12(r16)
    b600:	30c0151e 	bne	r6,r3,b658 <_calloc_r+0xac>
    b604:	80000415 	stw	zero,16(r16)
    b608:	80800604 	addi	r2,r16,24
    b60c:	80000515 	stw	zero,20(r16)
    b610:	00000106 	br	b618 <_calloc_r+0x6c>
    b614:	8005883a 	mov	r2,r16
    b618:	10000015 	stw	zero,0(r2)
    b61c:	10000115 	stw	zero,4(r2)
    b620:	10000215 	stw	zero,8(r2)
    b624:	8005883a 	mov	r2,r16
    b628:	dfc00117 	ldw	ra,4(sp)
    b62c:	dc000017 	ldw	r16,0(sp)
    b630:	dec00204 	addi	sp,sp,8
    b634:	f800283a 	ret
    b638:	000b883a 	mov	r5,zero
    b63c:	8009883a 	mov	r4,r16
    b640:	000859c0 	call	859c <memset>
    b644:	8005883a 	mov	r2,r16
    b648:	dfc00117 	ldw	ra,4(sp)
    b64c:	dc000017 	ldw	r16,0(sp)
    b650:	dec00204 	addi	sp,sp,8
    b654:	f800283a 	ret
    b658:	80800404 	addi	r2,r16,16
    b65c:	003fee06 	br	b618 <__alt_data_end+0xff00b618>
    b660:	80800204 	addi	r2,r16,8
    b664:	003fec06 	br	b618 <__alt_data_end+0xff00b618>
    b668:	0005883a 	mov	r2,zero
    b66c:	003fee06 	br	b628 <__alt_data_end+0xff00b628>

0000b670 <_fclose_r>:
    b670:	28003926 	beq	r5,zero,b758 <_fclose_r+0xe8>
    b674:	defffc04 	addi	sp,sp,-16
    b678:	dc400115 	stw	r17,4(sp)
    b67c:	dc000015 	stw	r16,0(sp)
    b680:	dfc00315 	stw	ra,12(sp)
    b684:	dc800215 	stw	r18,8(sp)
    b688:	2023883a 	mov	r17,r4
    b68c:	2821883a 	mov	r16,r5
    b690:	20000226 	beq	r4,zero,b69c <_fclose_r+0x2c>
    b694:	20800e17 	ldw	r2,56(r4)
    b698:	10002726 	beq	r2,zero,b738 <_fclose_r+0xc8>
    b69c:	8080030f 	ldh	r2,12(r16)
    b6a0:	1000071e 	bne	r2,zero,b6c0 <_fclose_r+0x50>
    b6a4:	0005883a 	mov	r2,zero
    b6a8:	dfc00317 	ldw	ra,12(sp)
    b6ac:	dc800217 	ldw	r18,8(sp)
    b6b0:	dc400117 	ldw	r17,4(sp)
    b6b4:	dc000017 	ldw	r16,0(sp)
    b6b8:	dec00404 	addi	sp,sp,16
    b6bc:	f800283a 	ret
    b6c0:	800b883a 	mov	r5,r16
    b6c4:	8809883a 	mov	r4,r17
    b6c8:	0006ebc0 	call	6ebc <__sflush_r>
    b6cc:	1025883a 	mov	r18,r2
    b6d0:	80800b17 	ldw	r2,44(r16)
    b6d4:	10000426 	beq	r2,zero,b6e8 <_fclose_r+0x78>
    b6d8:	81400717 	ldw	r5,28(r16)
    b6dc:	8809883a 	mov	r4,r17
    b6e0:	103ee83a 	callr	r2
    b6e4:	10001616 	blt	r2,zero,b740 <_fclose_r+0xd0>
    b6e8:	8080030b 	ldhu	r2,12(r16)
    b6ec:	1080200c 	andi	r2,r2,128
    b6f0:	1000151e 	bne	r2,zero,b748 <_fclose_r+0xd8>
    b6f4:	81400c17 	ldw	r5,48(r16)
    b6f8:	28000526 	beq	r5,zero,b710 <_fclose_r+0xa0>
    b6fc:	80801004 	addi	r2,r16,64
    b700:	28800226 	beq	r5,r2,b70c <_fclose_r+0x9c>
    b704:	8809883a 	mov	r4,r17
    b708:	00076280 	call	7628 <_free_r>
    b70c:	80000c15 	stw	zero,48(r16)
    b710:	81401117 	ldw	r5,68(r16)
    b714:	28000326 	beq	r5,zero,b724 <_fclose_r+0xb4>
    b718:	8809883a 	mov	r4,r17
    b71c:	00076280 	call	7628 <_free_r>
    b720:	80001115 	stw	zero,68(r16)
    b724:	00074c40 	call	74c4 <__sfp_lock_acquire>
    b728:	8000030d 	sth	zero,12(r16)
    b72c:	00074c80 	call	74c8 <__sfp_lock_release>
    b730:	9005883a 	mov	r2,r18
    b734:	003fdc06 	br	b6a8 <__alt_data_end+0xff00b6a8>
    b738:	00074b40 	call	74b4 <__sinit>
    b73c:	003fd706 	br	b69c <__alt_data_end+0xff00b69c>
    b740:	04bfffc4 	movi	r18,-1
    b744:	003fe806 	br	b6e8 <__alt_data_end+0xff00b6e8>
    b748:	81400417 	ldw	r5,16(r16)
    b74c:	8809883a 	mov	r4,r17
    b750:	00076280 	call	7628 <_free_r>
    b754:	003fe706 	br	b6f4 <__alt_data_end+0xff00b6f4>
    b758:	0005883a 	mov	r2,zero
    b75c:	f800283a 	ret

0000b760 <fclose>:
    b760:	00800074 	movhi	r2,1
    b764:	108ccb04 	addi	r2,r2,13100
    b768:	200b883a 	mov	r5,r4
    b76c:	11000017 	ldw	r4,0(r2)
    b770:	000b6701 	jmpi	b670 <_fclose_r>

0000b774 <__fputwc>:
    b774:	defff804 	addi	sp,sp,-32
    b778:	dcc00415 	stw	r19,16(sp)
    b77c:	dc800315 	stw	r18,12(sp)
    b780:	dc000115 	stw	r16,4(sp)
    b784:	dfc00715 	stw	ra,28(sp)
    b788:	dd400615 	stw	r21,24(sp)
    b78c:	dd000515 	stw	r20,20(sp)
    b790:	dc400215 	stw	r17,8(sp)
    b794:	2027883a 	mov	r19,r4
    b798:	2825883a 	mov	r18,r5
    b79c:	3021883a 	mov	r16,r6
    b7a0:	00080040 	call	8004 <__locale_mb_cur_max>
    b7a4:	00c00044 	movi	r3,1
    b7a8:	10c03e26 	beq	r2,r3,b8a4 <__fputwc+0x130>
    b7ac:	81c01704 	addi	r7,r16,92
    b7b0:	900d883a 	mov	r6,r18
    b7b4:	d80b883a 	mov	r5,sp
    b7b8:	9809883a 	mov	r4,r19
    b7bc:	000bc440 	call	bc44 <_wcrtomb_r>
    b7c0:	1029883a 	mov	r20,r2
    b7c4:	00bfffc4 	movi	r2,-1
    b7c8:	a0802026 	beq	r20,r2,b84c <__fputwc+0xd8>
    b7cc:	d9400003 	ldbu	r5,0(sp)
    b7d0:	a0001c26 	beq	r20,zero,b844 <__fputwc+0xd0>
    b7d4:	0023883a 	mov	r17,zero
    b7d8:	05400284 	movi	r21,10
    b7dc:	00000906 	br	b804 <__fputwc+0x90>
    b7e0:	80800017 	ldw	r2,0(r16)
    b7e4:	11400005 	stb	r5,0(r2)
    b7e8:	80c00017 	ldw	r3,0(r16)
    b7ec:	18c00044 	addi	r3,r3,1
    b7f0:	80c00015 	stw	r3,0(r16)
    b7f4:	8c400044 	addi	r17,r17,1
    b7f8:	dc45883a 	add	r2,sp,r17
    b7fc:	8d00112e 	bgeu	r17,r20,b844 <__fputwc+0xd0>
    b800:	11400003 	ldbu	r5,0(r2)
    b804:	80c00217 	ldw	r3,8(r16)
    b808:	18ffffc4 	addi	r3,r3,-1
    b80c:	80c00215 	stw	r3,8(r16)
    b810:	183ff30e 	bge	r3,zero,b7e0 <__alt_data_end+0xff00b7e0>
    b814:	80800617 	ldw	r2,24(r16)
    b818:	18801916 	blt	r3,r2,b880 <__fputwc+0x10c>
    b81c:	80800017 	ldw	r2,0(r16)
    b820:	11400005 	stb	r5,0(r2)
    b824:	80800017 	ldw	r2,0(r16)
    b828:	10c00003 	ldbu	r3,0(r2)
    b82c:	10800044 	addi	r2,r2,1
    b830:	1d402326 	beq	r3,r21,b8c0 <__fputwc+0x14c>
    b834:	80800015 	stw	r2,0(r16)
    b838:	8c400044 	addi	r17,r17,1
    b83c:	dc45883a 	add	r2,sp,r17
    b840:	8d3fef36 	bltu	r17,r20,b800 <__alt_data_end+0xff00b800>
    b844:	9005883a 	mov	r2,r18
    b848:	00000406 	br	b85c <__fputwc+0xe8>
    b84c:	80c0030b 	ldhu	r3,12(r16)
    b850:	a005883a 	mov	r2,r20
    b854:	18c01014 	ori	r3,r3,64
    b858:	80c0030d 	sth	r3,12(r16)
    b85c:	dfc00717 	ldw	ra,28(sp)
    b860:	dd400617 	ldw	r21,24(sp)
    b864:	dd000517 	ldw	r20,20(sp)
    b868:	dcc00417 	ldw	r19,16(sp)
    b86c:	dc800317 	ldw	r18,12(sp)
    b870:	dc400217 	ldw	r17,8(sp)
    b874:	dc000117 	ldw	r16,4(sp)
    b878:	dec00804 	addi	sp,sp,32
    b87c:	f800283a 	ret
    b880:	800d883a 	mov	r6,r16
    b884:	29403fcc 	andi	r5,r5,255
    b888:	9809883a 	mov	r4,r19
    b88c:	000baec0 	call	baec <__swbuf_r>
    b890:	10bfffe0 	cmpeqi	r2,r2,-1
    b894:	10803fcc 	andi	r2,r2,255
    b898:	103fd626 	beq	r2,zero,b7f4 <__alt_data_end+0xff00b7f4>
    b89c:	00bfffc4 	movi	r2,-1
    b8a0:	003fee06 	br	b85c <__alt_data_end+0xff00b85c>
    b8a4:	90ffffc4 	addi	r3,r18,-1
    b8a8:	01003f84 	movi	r4,254
    b8ac:	20ffbf36 	bltu	r4,r3,b7ac <__alt_data_end+0xff00b7ac>
    b8b0:	900b883a 	mov	r5,r18
    b8b4:	dc800005 	stb	r18,0(sp)
    b8b8:	1029883a 	mov	r20,r2
    b8bc:	003fc506 	br	b7d4 <__alt_data_end+0xff00b7d4>
    b8c0:	800d883a 	mov	r6,r16
    b8c4:	a80b883a 	mov	r5,r21
    b8c8:	9809883a 	mov	r4,r19
    b8cc:	000baec0 	call	baec <__swbuf_r>
    b8d0:	10bfffe0 	cmpeqi	r2,r2,-1
    b8d4:	003fef06 	br	b894 <__alt_data_end+0xff00b894>

0000b8d8 <_fputwc_r>:
    b8d8:	3080030b 	ldhu	r2,12(r6)
    b8dc:	10c8000c 	andi	r3,r2,8192
    b8e0:	1800051e 	bne	r3,zero,b8f8 <_fputwc_r+0x20>
    b8e4:	30c01917 	ldw	r3,100(r6)
    b8e8:	10880014 	ori	r2,r2,8192
    b8ec:	3080030d 	sth	r2,12(r6)
    b8f0:	18880014 	ori	r2,r3,8192
    b8f4:	30801915 	stw	r2,100(r6)
    b8f8:	000b7741 	jmpi	b774 <__fputwc>

0000b8fc <fputwc>:
    b8fc:	00800074 	movhi	r2,1
    b900:	defffc04 	addi	sp,sp,-16
    b904:	108ccb04 	addi	r2,r2,13100
    b908:	dc000115 	stw	r16,4(sp)
    b90c:	14000017 	ldw	r16,0(r2)
    b910:	dc400215 	stw	r17,8(sp)
    b914:	dfc00315 	stw	ra,12(sp)
    b918:	2023883a 	mov	r17,r4
    b91c:	80000226 	beq	r16,zero,b928 <fputwc+0x2c>
    b920:	80800e17 	ldw	r2,56(r16)
    b924:	10001026 	beq	r2,zero,b968 <fputwc+0x6c>
    b928:	2880030b 	ldhu	r2,12(r5)
    b92c:	10c8000c 	andi	r3,r2,8192
    b930:	1800051e 	bne	r3,zero,b948 <fputwc+0x4c>
    b934:	28c01917 	ldw	r3,100(r5)
    b938:	10880014 	ori	r2,r2,8192
    b93c:	2880030d 	sth	r2,12(r5)
    b940:	18880014 	ori	r2,r3,8192
    b944:	28801915 	stw	r2,100(r5)
    b948:	280d883a 	mov	r6,r5
    b94c:	8009883a 	mov	r4,r16
    b950:	880b883a 	mov	r5,r17
    b954:	dfc00317 	ldw	ra,12(sp)
    b958:	dc400217 	ldw	r17,8(sp)
    b95c:	dc000117 	ldw	r16,4(sp)
    b960:	dec00404 	addi	sp,sp,16
    b964:	000b7741 	jmpi	b774 <__fputwc>
    b968:	8009883a 	mov	r4,r16
    b96c:	d9400015 	stw	r5,0(sp)
    b970:	00074b40 	call	74b4 <__sinit>
    b974:	d9400017 	ldw	r5,0(sp)
    b978:	003feb06 	br	b928 <__alt_data_end+0xff00b928>

0000b97c <_fstat_r>:
    b97c:	defffd04 	addi	sp,sp,-12
    b980:	2805883a 	mov	r2,r5
    b984:	dc000015 	stw	r16,0(sp)
    b988:	04000074 	movhi	r16,1
    b98c:	dc400115 	stw	r17,4(sp)
    b990:	8413e804 	addi	r16,r16,20384
    b994:	2023883a 	mov	r17,r4
    b998:	300b883a 	mov	r5,r6
    b99c:	1009883a 	mov	r4,r2
    b9a0:	dfc00215 	stw	ra,8(sp)
    b9a4:	80000015 	stw	zero,0(r16)
    b9a8:	000e6c40 	call	e6c4 <fstat>
    b9ac:	00ffffc4 	movi	r3,-1
    b9b0:	10c00526 	beq	r2,r3,b9c8 <_fstat_r+0x4c>
    b9b4:	dfc00217 	ldw	ra,8(sp)
    b9b8:	dc400117 	ldw	r17,4(sp)
    b9bc:	dc000017 	ldw	r16,0(sp)
    b9c0:	dec00304 	addi	sp,sp,12
    b9c4:	f800283a 	ret
    b9c8:	80c00017 	ldw	r3,0(r16)
    b9cc:	183ff926 	beq	r3,zero,b9b4 <__alt_data_end+0xff00b9b4>
    b9d0:	88c00015 	stw	r3,0(r17)
    b9d4:	003ff706 	br	b9b4 <__alt_data_end+0xff00b9b4>

0000b9d8 <_isatty_r>:
    b9d8:	defffd04 	addi	sp,sp,-12
    b9dc:	dc000015 	stw	r16,0(sp)
    b9e0:	04000074 	movhi	r16,1
    b9e4:	dc400115 	stw	r17,4(sp)
    b9e8:	8413e804 	addi	r16,r16,20384
    b9ec:	2023883a 	mov	r17,r4
    b9f0:	2809883a 	mov	r4,r5
    b9f4:	dfc00215 	stw	ra,8(sp)
    b9f8:	80000015 	stw	zero,0(r16)
    b9fc:	000e7b00 	call	e7b0 <isatty>
    ba00:	00ffffc4 	movi	r3,-1
    ba04:	10c00526 	beq	r2,r3,ba1c <_isatty_r+0x44>
    ba08:	dfc00217 	ldw	ra,8(sp)
    ba0c:	dc400117 	ldw	r17,4(sp)
    ba10:	dc000017 	ldw	r16,0(sp)
    ba14:	dec00304 	addi	sp,sp,12
    ba18:	f800283a 	ret
    ba1c:	80c00017 	ldw	r3,0(r16)
    ba20:	183ff926 	beq	r3,zero,ba08 <__alt_data_end+0xff00ba08>
    ba24:	88c00015 	stw	r3,0(r17)
    ba28:	003ff706 	br	ba08 <__alt_data_end+0xff00ba08>

0000ba2c <_lseek_r>:
    ba2c:	defffd04 	addi	sp,sp,-12
    ba30:	2805883a 	mov	r2,r5
    ba34:	dc000015 	stw	r16,0(sp)
    ba38:	04000074 	movhi	r16,1
    ba3c:	dc400115 	stw	r17,4(sp)
    ba40:	300b883a 	mov	r5,r6
    ba44:	8413e804 	addi	r16,r16,20384
    ba48:	2023883a 	mov	r17,r4
    ba4c:	380d883a 	mov	r6,r7
    ba50:	1009883a 	mov	r4,r2
    ba54:	dfc00215 	stw	ra,8(sp)
    ba58:	80000015 	stw	zero,0(r16)
    ba5c:	000e97c0 	call	e97c <lseek>
    ba60:	00ffffc4 	movi	r3,-1
    ba64:	10c00526 	beq	r2,r3,ba7c <_lseek_r+0x50>
    ba68:	dfc00217 	ldw	ra,8(sp)
    ba6c:	dc400117 	ldw	r17,4(sp)
    ba70:	dc000017 	ldw	r16,0(sp)
    ba74:	dec00304 	addi	sp,sp,12
    ba78:	f800283a 	ret
    ba7c:	80c00017 	ldw	r3,0(r16)
    ba80:	183ff926 	beq	r3,zero,ba68 <__alt_data_end+0xff00ba68>
    ba84:	88c00015 	stw	r3,0(r17)
    ba88:	003ff706 	br	ba68 <__alt_data_end+0xff00ba68>

0000ba8c <_read_r>:
    ba8c:	defffd04 	addi	sp,sp,-12
    ba90:	2805883a 	mov	r2,r5
    ba94:	dc000015 	stw	r16,0(sp)
    ba98:	04000074 	movhi	r16,1
    ba9c:	dc400115 	stw	r17,4(sp)
    baa0:	300b883a 	mov	r5,r6
    baa4:	8413e804 	addi	r16,r16,20384
    baa8:	2023883a 	mov	r17,r4
    baac:	380d883a 	mov	r6,r7
    bab0:	1009883a 	mov	r4,r2
    bab4:	dfc00215 	stw	ra,8(sp)
    bab8:	80000015 	stw	zero,0(r16)
    babc:	000eb500 	call	eb50 <read>
    bac0:	00ffffc4 	movi	r3,-1
    bac4:	10c00526 	beq	r2,r3,badc <_read_r+0x50>
    bac8:	dfc00217 	ldw	ra,8(sp)
    bacc:	dc400117 	ldw	r17,4(sp)
    bad0:	dc000017 	ldw	r16,0(sp)
    bad4:	dec00304 	addi	sp,sp,12
    bad8:	f800283a 	ret
    badc:	80c00017 	ldw	r3,0(r16)
    bae0:	183ff926 	beq	r3,zero,bac8 <__alt_data_end+0xff00bac8>
    bae4:	88c00015 	stw	r3,0(r17)
    bae8:	003ff706 	br	bac8 <__alt_data_end+0xff00bac8>

0000baec <__swbuf_r>:
    baec:	defffb04 	addi	sp,sp,-20
    baf0:	dcc00315 	stw	r19,12(sp)
    baf4:	dc800215 	stw	r18,8(sp)
    baf8:	dc000015 	stw	r16,0(sp)
    bafc:	dfc00415 	stw	ra,16(sp)
    bb00:	dc400115 	stw	r17,4(sp)
    bb04:	2025883a 	mov	r18,r4
    bb08:	2827883a 	mov	r19,r5
    bb0c:	3021883a 	mov	r16,r6
    bb10:	20000226 	beq	r4,zero,bb1c <__swbuf_r+0x30>
    bb14:	20800e17 	ldw	r2,56(r4)
    bb18:	10004226 	beq	r2,zero,bc24 <__swbuf_r+0x138>
    bb1c:	80800617 	ldw	r2,24(r16)
    bb20:	8100030b 	ldhu	r4,12(r16)
    bb24:	80800215 	stw	r2,8(r16)
    bb28:	2080020c 	andi	r2,r4,8
    bb2c:	10003626 	beq	r2,zero,bc08 <__swbuf_r+0x11c>
    bb30:	80c00417 	ldw	r3,16(r16)
    bb34:	18003426 	beq	r3,zero,bc08 <__swbuf_r+0x11c>
    bb38:	2088000c 	andi	r2,r4,8192
    bb3c:	9c403fcc 	andi	r17,r19,255
    bb40:	10001a26 	beq	r2,zero,bbac <__swbuf_r+0xc0>
    bb44:	80800017 	ldw	r2,0(r16)
    bb48:	81000517 	ldw	r4,20(r16)
    bb4c:	10c7c83a 	sub	r3,r2,r3
    bb50:	1900200e 	bge	r3,r4,bbd4 <__swbuf_r+0xe8>
    bb54:	18c00044 	addi	r3,r3,1
    bb58:	81000217 	ldw	r4,8(r16)
    bb5c:	11400044 	addi	r5,r2,1
    bb60:	81400015 	stw	r5,0(r16)
    bb64:	213fffc4 	addi	r4,r4,-1
    bb68:	81000215 	stw	r4,8(r16)
    bb6c:	14c00005 	stb	r19,0(r2)
    bb70:	80800517 	ldw	r2,20(r16)
    bb74:	10c01e26 	beq	r2,r3,bbf0 <__swbuf_r+0x104>
    bb78:	8080030b 	ldhu	r2,12(r16)
    bb7c:	1080004c 	andi	r2,r2,1
    bb80:	10000226 	beq	r2,zero,bb8c <__swbuf_r+0xa0>
    bb84:	00800284 	movi	r2,10
    bb88:	88801926 	beq	r17,r2,bbf0 <__swbuf_r+0x104>
    bb8c:	8805883a 	mov	r2,r17
    bb90:	dfc00417 	ldw	ra,16(sp)
    bb94:	dcc00317 	ldw	r19,12(sp)
    bb98:	dc800217 	ldw	r18,8(sp)
    bb9c:	dc400117 	ldw	r17,4(sp)
    bba0:	dc000017 	ldw	r16,0(sp)
    bba4:	dec00504 	addi	sp,sp,20
    bba8:	f800283a 	ret
    bbac:	81401917 	ldw	r5,100(r16)
    bbb0:	00b7ffc4 	movi	r2,-8193
    bbb4:	21080014 	ori	r4,r4,8192
    bbb8:	2884703a 	and	r2,r5,r2
    bbbc:	80801915 	stw	r2,100(r16)
    bbc0:	80800017 	ldw	r2,0(r16)
    bbc4:	8100030d 	sth	r4,12(r16)
    bbc8:	81000517 	ldw	r4,20(r16)
    bbcc:	10c7c83a 	sub	r3,r2,r3
    bbd0:	193fe016 	blt	r3,r4,bb54 <__alt_data_end+0xff00bb54>
    bbd4:	800b883a 	mov	r5,r16
    bbd8:	9009883a 	mov	r4,r18
    bbdc:	00070d80 	call	70d8 <_fflush_r>
    bbe0:	1000071e 	bne	r2,zero,bc00 <__swbuf_r+0x114>
    bbe4:	80800017 	ldw	r2,0(r16)
    bbe8:	00c00044 	movi	r3,1
    bbec:	003fda06 	br	bb58 <__alt_data_end+0xff00bb58>
    bbf0:	800b883a 	mov	r5,r16
    bbf4:	9009883a 	mov	r4,r18
    bbf8:	00070d80 	call	70d8 <_fflush_r>
    bbfc:	103fe326 	beq	r2,zero,bb8c <__alt_data_end+0xff00bb8c>
    bc00:	00bfffc4 	movi	r2,-1
    bc04:	003fe206 	br	bb90 <__alt_data_end+0xff00bb90>
    bc08:	800b883a 	mov	r5,r16
    bc0c:	9009883a 	mov	r4,r18
    bc10:	00054e00 	call	54e0 <__swsetup_r>
    bc14:	103ffa1e 	bne	r2,zero,bc00 <__alt_data_end+0xff00bc00>
    bc18:	8100030b 	ldhu	r4,12(r16)
    bc1c:	80c00417 	ldw	r3,16(r16)
    bc20:	003fc506 	br	bb38 <__alt_data_end+0xff00bb38>
    bc24:	00074b40 	call	74b4 <__sinit>
    bc28:	003fbc06 	br	bb1c <__alt_data_end+0xff00bb1c>

0000bc2c <__swbuf>:
    bc2c:	00800074 	movhi	r2,1
    bc30:	108ccb04 	addi	r2,r2,13100
    bc34:	280d883a 	mov	r6,r5
    bc38:	200b883a 	mov	r5,r4
    bc3c:	11000017 	ldw	r4,0(r2)
    bc40:	000baec1 	jmpi	baec <__swbuf_r>

0000bc44 <_wcrtomb_r>:
    bc44:	defff604 	addi	sp,sp,-40
    bc48:	00800074 	movhi	r2,1
    bc4c:	dc800815 	stw	r18,32(sp)
    bc50:	dc400715 	stw	r17,28(sp)
    bc54:	dc000615 	stw	r16,24(sp)
    bc58:	108ccd04 	addi	r2,r2,13108
    bc5c:	dfc00915 	stw	ra,36(sp)
    bc60:	2021883a 	mov	r16,r4
    bc64:	3823883a 	mov	r17,r7
    bc68:	14800017 	ldw	r18,0(r2)
    bc6c:	28001426 	beq	r5,zero,bcc0 <_wcrtomb_r+0x7c>
    bc70:	d9400415 	stw	r5,16(sp)
    bc74:	d9800515 	stw	r6,20(sp)
    bc78:	0007ff80 	call	7ff8 <__locale_charset>
    bc7c:	d9800517 	ldw	r6,20(sp)
    bc80:	d9400417 	ldw	r5,16(sp)
    bc84:	100f883a 	mov	r7,r2
    bc88:	dc400015 	stw	r17,0(sp)
    bc8c:	8009883a 	mov	r4,r16
    bc90:	903ee83a 	callr	r18
    bc94:	00ffffc4 	movi	r3,-1
    bc98:	10c0031e 	bne	r2,r3,bca8 <_wcrtomb_r+0x64>
    bc9c:	88000015 	stw	zero,0(r17)
    bca0:	00c02284 	movi	r3,138
    bca4:	80c00015 	stw	r3,0(r16)
    bca8:	dfc00917 	ldw	ra,36(sp)
    bcac:	dc800817 	ldw	r18,32(sp)
    bcb0:	dc400717 	ldw	r17,28(sp)
    bcb4:	dc000617 	ldw	r16,24(sp)
    bcb8:	dec00a04 	addi	sp,sp,40
    bcbc:	f800283a 	ret
    bcc0:	0007ff80 	call	7ff8 <__locale_charset>
    bcc4:	100f883a 	mov	r7,r2
    bcc8:	dc400015 	stw	r17,0(sp)
    bccc:	000d883a 	mov	r6,zero
    bcd0:	d9400104 	addi	r5,sp,4
    bcd4:	8009883a 	mov	r4,r16
    bcd8:	903ee83a 	callr	r18
    bcdc:	003fed06 	br	bc94 <__alt_data_end+0xff00bc94>

0000bce0 <wcrtomb>:
    bce0:	defff604 	addi	sp,sp,-40
    bce4:	00800074 	movhi	r2,1
    bce8:	dc800615 	stw	r18,24(sp)
    bcec:	dc400515 	stw	r17,20(sp)
    bcf0:	108ccb04 	addi	r2,r2,13100
    bcf4:	dfc00915 	stw	ra,36(sp)
    bcf8:	dd000815 	stw	r20,32(sp)
    bcfc:	dcc00715 	stw	r19,28(sp)
    bd00:	dc000415 	stw	r16,16(sp)
    bd04:	3025883a 	mov	r18,r6
    bd08:	14400017 	ldw	r17,0(r2)
    bd0c:	20001926 	beq	r4,zero,bd74 <wcrtomb+0x94>
    bd10:	00800074 	movhi	r2,1
    bd14:	108ccd04 	addi	r2,r2,13108
    bd18:	15000017 	ldw	r20,0(r2)
    bd1c:	2021883a 	mov	r16,r4
    bd20:	2827883a 	mov	r19,r5
    bd24:	0007ff80 	call	7ff8 <__locale_charset>
    bd28:	100f883a 	mov	r7,r2
    bd2c:	dc800015 	stw	r18,0(sp)
    bd30:	980d883a 	mov	r6,r19
    bd34:	800b883a 	mov	r5,r16
    bd38:	8809883a 	mov	r4,r17
    bd3c:	a03ee83a 	callr	r20
    bd40:	00ffffc4 	movi	r3,-1
    bd44:	10c0031e 	bne	r2,r3,bd54 <wcrtomb+0x74>
    bd48:	90000015 	stw	zero,0(r18)
    bd4c:	00c02284 	movi	r3,138
    bd50:	88c00015 	stw	r3,0(r17)
    bd54:	dfc00917 	ldw	ra,36(sp)
    bd58:	dd000817 	ldw	r20,32(sp)
    bd5c:	dcc00717 	ldw	r19,28(sp)
    bd60:	dc800617 	ldw	r18,24(sp)
    bd64:	dc400517 	ldw	r17,20(sp)
    bd68:	dc000417 	ldw	r16,16(sp)
    bd6c:	dec00a04 	addi	sp,sp,40
    bd70:	f800283a 	ret
    bd74:	00800074 	movhi	r2,1
    bd78:	108ccd04 	addi	r2,r2,13108
    bd7c:	14000017 	ldw	r16,0(r2)
    bd80:	0007ff80 	call	7ff8 <__locale_charset>
    bd84:	100f883a 	mov	r7,r2
    bd88:	dc800015 	stw	r18,0(sp)
    bd8c:	000d883a 	mov	r6,zero
    bd90:	d9400104 	addi	r5,sp,4
    bd94:	8809883a 	mov	r4,r17
    bd98:	803ee83a 	callr	r16
    bd9c:	003fe806 	br	bd40 <__alt_data_end+0xff00bd40>

0000bda0 <__ascii_wctomb>:
    bda0:	28000526 	beq	r5,zero,bdb8 <__ascii_wctomb+0x18>
    bda4:	00803fc4 	movi	r2,255
    bda8:	11800536 	bltu	r2,r6,bdc0 <__ascii_wctomb+0x20>
    bdac:	29800005 	stb	r6,0(r5)
    bdb0:	00800044 	movi	r2,1
    bdb4:	f800283a 	ret
    bdb8:	0005883a 	mov	r2,zero
    bdbc:	f800283a 	ret
    bdc0:	00802284 	movi	r2,138
    bdc4:	20800015 	stw	r2,0(r4)
    bdc8:	00bfffc4 	movi	r2,-1
    bdcc:	f800283a 	ret

0000bdd0 <_wctomb_r>:
    bdd0:	00800074 	movhi	r2,1
    bdd4:	defff904 	addi	sp,sp,-28
    bdd8:	108ccd04 	addi	r2,r2,13108
    bddc:	dfc00615 	stw	ra,24(sp)
    bde0:	dc400515 	stw	r17,20(sp)
    bde4:	dc000415 	stw	r16,16(sp)
    bde8:	3823883a 	mov	r17,r7
    bdec:	14000017 	ldw	r16,0(r2)
    bdf0:	d9000115 	stw	r4,4(sp)
    bdf4:	d9400215 	stw	r5,8(sp)
    bdf8:	d9800315 	stw	r6,12(sp)
    bdfc:	0007ff80 	call	7ff8 <__locale_charset>
    be00:	d9800317 	ldw	r6,12(sp)
    be04:	d9400217 	ldw	r5,8(sp)
    be08:	d9000117 	ldw	r4,4(sp)
    be0c:	100f883a 	mov	r7,r2
    be10:	dc400015 	stw	r17,0(sp)
    be14:	803ee83a 	callr	r16
    be18:	dfc00617 	ldw	ra,24(sp)
    be1c:	dc400517 	ldw	r17,20(sp)
    be20:	dc000417 	ldw	r16,16(sp)
    be24:	dec00704 	addi	sp,sp,28
    be28:	f800283a 	ret

0000be2c <__udivdi3>:
    be2c:	defff504 	addi	sp,sp,-44
    be30:	dcc00415 	stw	r19,16(sp)
    be34:	dc000115 	stw	r16,4(sp)
    be38:	dfc00a15 	stw	ra,40(sp)
    be3c:	df000915 	stw	fp,36(sp)
    be40:	ddc00815 	stw	r23,32(sp)
    be44:	dd800715 	stw	r22,28(sp)
    be48:	dd400615 	stw	r21,24(sp)
    be4c:	dd000515 	stw	r20,20(sp)
    be50:	dc800315 	stw	r18,12(sp)
    be54:	dc400215 	stw	r17,8(sp)
    be58:	2027883a 	mov	r19,r4
    be5c:	2821883a 	mov	r16,r5
    be60:	3800411e 	bne	r7,zero,bf68 <__udivdi3+0x13c>
    be64:	3023883a 	mov	r17,r6
    be68:	2025883a 	mov	r18,r4
    be6c:	2980522e 	bgeu	r5,r6,bfb8 <__udivdi3+0x18c>
    be70:	00bfffd4 	movui	r2,65535
    be74:	282d883a 	mov	r22,r5
    be78:	1180a836 	bltu	r2,r6,c11c <__udivdi3+0x2f0>
    be7c:	00803fc4 	movi	r2,255
    be80:	1185803a 	cmpltu	r2,r2,r6
    be84:	100490fa 	slli	r2,r2,3
    be88:	3086d83a 	srl	r3,r6,r2
    be8c:	01000074 	movhi	r4,1
    be90:	21051f84 	addi	r4,r4,5246
    be94:	20c7883a 	add	r3,r4,r3
    be98:	18c00003 	ldbu	r3,0(r3)
    be9c:	1885883a 	add	r2,r3,r2
    bea0:	00c00804 	movi	r3,32
    bea4:	1887c83a 	sub	r3,r3,r2
    bea8:	18000526 	beq	r3,zero,bec0 <__udivdi3+0x94>
    beac:	80e0983a 	sll	r16,r16,r3
    beb0:	9884d83a 	srl	r2,r19,r2
    beb4:	30e2983a 	sll	r17,r6,r3
    beb8:	98e4983a 	sll	r18,r19,r3
    bebc:	142cb03a 	or	r22,r2,r16
    bec0:	882ad43a 	srli	r21,r17,16
    bec4:	b009883a 	mov	r4,r22
    bec8:	8d3fffcc 	andi	r20,r17,65535
    becc:	a80b883a 	mov	r5,r21
    bed0:	0001d640 	call	1d64 <__umodsi3>
    bed4:	b009883a 	mov	r4,r22
    bed8:	a80b883a 	mov	r5,r21
    bedc:	1027883a 	mov	r19,r2
    bee0:	0001d000 	call	1d00 <__udivsi3>
    bee4:	102d883a 	mov	r22,r2
    bee8:	9826943a 	slli	r19,r19,16
    beec:	9004d43a 	srli	r2,r18,16
    bef0:	a5a1383a 	mul	r16,r20,r22
    bef4:	14c4b03a 	or	r2,r2,r19
    bef8:	1400052e 	bgeu	r2,r16,bf10 <__udivdi3+0xe4>
    befc:	1445883a 	add	r2,r2,r17
    bf00:	b0ffffc4 	addi	r3,r22,-1
    bf04:	14400136 	bltu	r2,r17,bf0c <__udivdi3+0xe0>
    bf08:	14012336 	bltu	r2,r16,c398 <__udivdi3+0x56c>
    bf0c:	182d883a 	mov	r22,r3
    bf10:	1421c83a 	sub	r16,r2,r16
    bf14:	a80b883a 	mov	r5,r21
    bf18:	8009883a 	mov	r4,r16
    bf1c:	0001d640 	call	1d64 <__umodsi3>
    bf20:	1027883a 	mov	r19,r2
    bf24:	a80b883a 	mov	r5,r21
    bf28:	8009883a 	mov	r4,r16
    bf2c:	0001d000 	call	1d00 <__udivsi3>
    bf30:	9826943a 	slli	r19,r19,16
    bf34:	a0a9383a 	mul	r20,r20,r2
    bf38:	94bfffcc 	andi	r18,r18,65535
    bf3c:	94e4b03a 	or	r18,r18,r19
    bf40:	9500052e 	bgeu	r18,r20,bf58 <__udivdi3+0x12c>
    bf44:	8ca5883a 	add	r18,r17,r18
    bf48:	10ffffc4 	addi	r3,r2,-1
    bf4c:	9440f136 	bltu	r18,r17,c314 <__udivdi3+0x4e8>
    bf50:	9500f02e 	bgeu	r18,r20,c314 <__udivdi3+0x4e8>
    bf54:	10bfff84 	addi	r2,r2,-2
    bf58:	b00c943a 	slli	r6,r22,16
    bf5c:	0007883a 	mov	r3,zero
    bf60:	3084b03a 	or	r2,r6,r2
    bf64:	00005906 	br	c0cc <__udivdi3+0x2a0>
    bf68:	29c05636 	bltu	r5,r7,c0c4 <__udivdi3+0x298>
    bf6c:	00bfffd4 	movui	r2,65535
    bf70:	11c0622e 	bgeu	r2,r7,c0fc <__udivdi3+0x2d0>
    bf74:	00804034 	movhi	r2,256
    bf78:	10bfffc4 	addi	r2,r2,-1
    bf7c:	11c0ee36 	bltu	r2,r7,c338 <__udivdi3+0x50c>
    bf80:	00800404 	movi	r2,16
    bf84:	3886d83a 	srl	r3,r7,r2
    bf88:	01000074 	movhi	r4,1
    bf8c:	21051f84 	addi	r4,r4,5246
    bf90:	20c7883a 	add	r3,r4,r3
    bf94:	18c00003 	ldbu	r3,0(r3)
    bf98:	05400804 	movi	r21,32
    bf9c:	1885883a 	add	r2,r3,r2
    bfa0:	a8abc83a 	sub	r21,r21,r2
    bfa4:	a800621e 	bne	r21,zero,c130 <__udivdi3+0x304>
    bfa8:	3c00e936 	bltu	r7,r16,c350 <__udivdi3+0x524>
    bfac:	9985403a 	cmpgeu	r2,r19,r6
    bfb0:	0007883a 	mov	r3,zero
    bfb4:	00004506 	br	c0cc <__udivdi3+0x2a0>
    bfb8:	3000041e 	bne	r6,zero,bfcc <__udivdi3+0x1a0>
    bfbc:	000b883a 	mov	r5,zero
    bfc0:	01000044 	movi	r4,1
    bfc4:	0001d000 	call	1d00 <__udivsi3>
    bfc8:	1023883a 	mov	r17,r2
    bfcc:	00bfffd4 	movui	r2,65535
    bfd0:	14404e2e 	bgeu	r2,r17,c10c <__udivdi3+0x2e0>
    bfd4:	00804034 	movhi	r2,256
    bfd8:	10bfffc4 	addi	r2,r2,-1
    bfdc:	1440d836 	bltu	r2,r17,c340 <__udivdi3+0x514>
    bfe0:	00800404 	movi	r2,16
    bfe4:	8886d83a 	srl	r3,r17,r2
    bfe8:	01000074 	movhi	r4,1
    bfec:	21051f84 	addi	r4,r4,5246
    bff0:	20c7883a 	add	r3,r4,r3
    bff4:	18c00003 	ldbu	r3,0(r3)
    bff8:	1885883a 	add	r2,r3,r2
    bffc:	00c00804 	movi	r3,32
    c000:	1887c83a 	sub	r3,r3,r2
    c004:	18008f1e 	bne	r3,zero,c244 <__udivdi3+0x418>
    c008:	882ad43a 	srli	r21,r17,16
    c00c:	8461c83a 	sub	r16,r16,r17
    c010:	8d3fffcc 	andi	r20,r17,65535
    c014:	00c00044 	movi	r3,1
    c018:	8009883a 	mov	r4,r16
    c01c:	a80b883a 	mov	r5,r21
    c020:	d8c00015 	stw	r3,0(sp)
    c024:	0001d640 	call	1d64 <__umodsi3>
    c028:	8009883a 	mov	r4,r16
    c02c:	a80b883a 	mov	r5,r21
    c030:	1027883a 	mov	r19,r2
    c034:	0001d000 	call	1d00 <__udivsi3>
    c038:	9826943a 	slli	r19,r19,16
    c03c:	9008d43a 	srli	r4,r18,16
    c040:	1521383a 	mul	r16,r2,r20
    c044:	102d883a 	mov	r22,r2
    c048:	24c8b03a 	or	r4,r4,r19
    c04c:	d8c00017 	ldw	r3,0(sp)
    c050:	2400052e 	bgeu	r4,r16,c068 <__udivdi3+0x23c>
    c054:	2449883a 	add	r4,r4,r17
    c058:	b0bfffc4 	addi	r2,r22,-1
    c05c:	24400136 	bltu	r4,r17,c064 <__udivdi3+0x238>
    c060:	2400ca36 	bltu	r4,r16,c38c <__udivdi3+0x560>
    c064:	102d883a 	mov	r22,r2
    c068:	2421c83a 	sub	r16,r4,r16
    c06c:	a80b883a 	mov	r5,r21
    c070:	8009883a 	mov	r4,r16
    c074:	d8c00015 	stw	r3,0(sp)
    c078:	0001d640 	call	1d64 <__umodsi3>
    c07c:	1027883a 	mov	r19,r2
    c080:	a80b883a 	mov	r5,r21
    c084:	8009883a 	mov	r4,r16
    c088:	0001d000 	call	1d00 <__udivsi3>
    c08c:	9826943a 	slli	r19,r19,16
    c090:	1529383a 	mul	r20,r2,r20
    c094:	94bfffcc 	andi	r18,r18,65535
    c098:	94e4b03a 	or	r18,r18,r19
    c09c:	d8c00017 	ldw	r3,0(sp)
    c0a0:	9500052e 	bgeu	r18,r20,c0b8 <__udivdi3+0x28c>
    c0a4:	8ca5883a 	add	r18,r17,r18
    c0a8:	113fffc4 	addi	r4,r2,-1
    c0ac:	94409736 	bltu	r18,r17,c30c <__udivdi3+0x4e0>
    c0b0:	9500962e 	bgeu	r18,r20,c30c <__udivdi3+0x4e0>
    c0b4:	10bfff84 	addi	r2,r2,-2
    c0b8:	b00c943a 	slli	r6,r22,16
    c0bc:	3084b03a 	or	r2,r6,r2
    c0c0:	00000206 	br	c0cc <__udivdi3+0x2a0>
    c0c4:	0007883a 	mov	r3,zero
    c0c8:	0005883a 	mov	r2,zero
    c0cc:	dfc00a17 	ldw	ra,40(sp)
    c0d0:	df000917 	ldw	fp,36(sp)
    c0d4:	ddc00817 	ldw	r23,32(sp)
    c0d8:	dd800717 	ldw	r22,28(sp)
    c0dc:	dd400617 	ldw	r21,24(sp)
    c0e0:	dd000517 	ldw	r20,20(sp)
    c0e4:	dcc00417 	ldw	r19,16(sp)
    c0e8:	dc800317 	ldw	r18,12(sp)
    c0ec:	dc400217 	ldw	r17,8(sp)
    c0f0:	dc000117 	ldw	r16,4(sp)
    c0f4:	dec00b04 	addi	sp,sp,44
    c0f8:	f800283a 	ret
    c0fc:	00803fc4 	movi	r2,255
    c100:	11c5803a 	cmpltu	r2,r2,r7
    c104:	100490fa 	slli	r2,r2,3
    c108:	003f9e06 	br	bf84 <__alt_data_end+0xff00bf84>
    c10c:	00803fc4 	movi	r2,255
    c110:	1445803a 	cmpltu	r2,r2,r17
    c114:	100490fa 	slli	r2,r2,3
    c118:	003fb206 	br	bfe4 <__alt_data_end+0xff00bfe4>
    c11c:	00804034 	movhi	r2,256
    c120:	10bfffc4 	addi	r2,r2,-1
    c124:	11808836 	bltu	r2,r6,c348 <__udivdi3+0x51c>
    c128:	00800404 	movi	r2,16
    c12c:	003f5606 	br	be88 <__alt_data_end+0xff00be88>
    c130:	30aed83a 	srl	r23,r6,r2
    c134:	3d4e983a 	sll	r7,r7,r21
    c138:	80acd83a 	srl	r22,r16,r2
    c13c:	9884d83a 	srl	r2,r19,r2
    c140:	3deeb03a 	or	r23,r7,r23
    c144:	b824d43a 	srli	r18,r23,16
    c148:	8560983a 	sll	r16,r16,r21
    c14c:	b009883a 	mov	r4,r22
    c150:	900b883a 	mov	r5,r18
    c154:	3568983a 	sll	r20,r6,r21
    c158:	1420b03a 	or	r16,r2,r16
    c15c:	0001d640 	call	1d64 <__umodsi3>
    c160:	b009883a 	mov	r4,r22
    c164:	900b883a 	mov	r5,r18
    c168:	1023883a 	mov	r17,r2
    c16c:	0001d000 	call	1d00 <__udivsi3>
    c170:	8808943a 	slli	r4,r17,16
    c174:	bf3fffcc 	andi	fp,r23,65535
    c178:	8006d43a 	srli	r3,r16,16
    c17c:	e0a3383a 	mul	r17,fp,r2
    c180:	100d883a 	mov	r6,r2
    c184:	1906b03a 	or	r3,r3,r4
    c188:	1c40042e 	bgeu	r3,r17,c19c <__udivdi3+0x370>
    c18c:	1dc7883a 	add	r3,r3,r23
    c190:	10bfffc4 	addi	r2,r2,-1
    c194:	1dc0752e 	bgeu	r3,r23,c36c <__udivdi3+0x540>
    c198:	100d883a 	mov	r6,r2
    c19c:	1c63c83a 	sub	r17,r3,r17
    c1a0:	900b883a 	mov	r5,r18
    c1a4:	8809883a 	mov	r4,r17
    c1a8:	d9800015 	stw	r6,0(sp)
    c1ac:	0001d640 	call	1d64 <__umodsi3>
    c1b0:	102d883a 	mov	r22,r2
    c1b4:	8809883a 	mov	r4,r17
    c1b8:	900b883a 	mov	r5,r18
    c1bc:	0001d000 	call	1d00 <__udivsi3>
    c1c0:	b02c943a 	slli	r22,r22,16
    c1c4:	e089383a 	mul	r4,fp,r2
    c1c8:	843fffcc 	andi	r16,r16,65535
    c1cc:	85a0b03a 	or	r16,r16,r22
    c1d0:	d9800017 	ldw	r6,0(sp)
    c1d4:	8100042e 	bgeu	r16,r4,c1e8 <__udivdi3+0x3bc>
    c1d8:	85e1883a 	add	r16,r16,r23
    c1dc:	10ffffc4 	addi	r3,r2,-1
    c1e0:	85c05e2e 	bgeu	r16,r23,c35c <__udivdi3+0x530>
    c1e4:	1805883a 	mov	r2,r3
    c1e8:	300c943a 	slli	r6,r6,16
    c1ec:	a17fffcc 	andi	r5,r20,65535
    c1f0:	a028d43a 	srli	r20,r20,16
    c1f4:	3084b03a 	or	r2,r6,r2
    c1f8:	10ffffcc 	andi	r3,r2,65535
    c1fc:	100cd43a 	srli	r6,r2,16
    c200:	194f383a 	mul	r7,r3,r5
    c204:	1d07383a 	mul	r3,r3,r20
    c208:	314b383a 	mul	r5,r6,r5
    c20c:	3810d43a 	srli	r8,r7,16
    c210:	8121c83a 	sub	r16,r16,r4
    c214:	1947883a 	add	r3,r3,r5
    c218:	40c7883a 	add	r3,r8,r3
    c21c:	350d383a 	mul	r6,r6,r20
    c220:	1940022e 	bgeu	r3,r5,c22c <__udivdi3+0x400>
    c224:	01000074 	movhi	r4,1
    c228:	310d883a 	add	r6,r6,r4
    c22c:	1828d43a 	srli	r20,r3,16
    c230:	a18d883a 	add	r6,r20,r6
    c234:	81803e36 	bltu	r16,r6,c330 <__udivdi3+0x504>
    c238:	81803826 	beq	r16,r6,c31c <__udivdi3+0x4f0>
    c23c:	0007883a 	mov	r3,zero
    c240:	003fa206 	br	c0cc <__alt_data_end+0xff00c0cc>
    c244:	88e2983a 	sll	r17,r17,r3
    c248:	80a8d83a 	srl	r20,r16,r2
    c24c:	80e0983a 	sll	r16,r16,r3
    c250:	882ad43a 	srli	r21,r17,16
    c254:	9884d83a 	srl	r2,r19,r2
    c258:	a009883a 	mov	r4,r20
    c25c:	a80b883a 	mov	r5,r21
    c260:	142eb03a 	or	r23,r2,r16
    c264:	98e4983a 	sll	r18,r19,r3
    c268:	0001d640 	call	1d64 <__umodsi3>
    c26c:	a009883a 	mov	r4,r20
    c270:	a80b883a 	mov	r5,r21
    c274:	1021883a 	mov	r16,r2
    c278:	0001d000 	call	1d00 <__udivsi3>
    c27c:	1039883a 	mov	fp,r2
    c280:	8d3fffcc 	andi	r20,r17,65535
    c284:	8020943a 	slli	r16,r16,16
    c288:	b804d43a 	srli	r2,r23,16
    c28c:	a72d383a 	mul	r22,r20,fp
    c290:	1404b03a 	or	r2,r2,r16
    c294:	1580062e 	bgeu	r2,r22,c2b0 <__udivdi3+0x484>
    c298:	1445883a 	add	r2,r2,r17
    c29c:	e0ffffc4 	addi	r3,fp,-1
    c2a0:	14403836 	bltu	r2,r17,c384 <__udivdi3+0x558>
    c2a4:	1580372e 	bgeu	r2,r22,c384 <__udivdi3+0x558>
    c2a8:	e73fff84 	addi	fp,fp,-2
    c2ac:	1445883a 	add	r2,r2,r17
    c2b0:	15adc83a 	sub	r22,r2,r22
    c2b4:	a80b883a 	mov	r5,r21
    c2b8:	b009883a 	mov	r4,r22
    c2bc:	0001d640 	call	1d64 <__umodsi3>
    c2c0:	1027883a 	mov	r19,r2
    c2c4:	b009883a 	mov	r4,r22
    c2c8:	a80b883a 	mov	r5,r21
    c2cc:	0001d000 	call	1d00 <__udivsi3>
    c2d0:	9826943a 	slli	r19,r19,16
    c2d4:	a0a1383a 	mul	r16,r20,r2
    c2d8:	b93fffcc 	andi	r4,r23,65535
    c2dc:	24c8b03a 	or	r4,r4,r19
    c2e0:	2400062e 	bgeu	r4,r16,c2fc <__udivdi3+0x4d0>
    c2e4:	2449883a 	add	r4,r4,r17
    c2e8:	10ffffc4 	addi	r3,r2,-1
    c2ec:	24402336 	bltu	r4,r17,c37c <__udivdi3+0x550>
    c2f0:	2400222e 	bgeu	r4,r16,c37c <__udivdi3+0x550>
    c2f4:	10bfff84 	addi	r2,r2,-2
    c2f8:	2449883a 	add	r4,r4,r17
    c2fc:	e038943a 	slli	fp,fp,16
    c300:	2421c83a 	sub	r16,r4,r16
    c304:	e086b03a 	or	r3,fp,r2
    c308:	003f4306 	br	c018 <__alt_data_end+0xff00c018>
    c30c:	2005883a 	mov	r2,r4
    c310:	003f6906 	br	c0b8 <__alt_data_end+0xff00c0b8>
    c314:	1805883a 	mov	r2,r3
    c318:	003f0f06 	br	bf58 <__alt_data_end+0xff00bf58>
    c31c:	1806943a 	slli	r3,r3,16
    c320:	9d66983a 	sll	r19,r19,r21
    c324:	39ffffcc 	andi	r7,r7,65535
    c328:	19c7883a 	add	r3,r3,r7
    c32c:	98ffc32e 	bgeu	r19,r3,c23c <__alt_data_end+0xff00c23c>
    c330:	10bfffc4 	addi	r2,r2,-1
    c334:	003fc106 	br	c23c <__alt_data_end+0xff00c23c>
    c338:	00800604 	movi	r2,24
    c33c:	003f1106 	br	bf84 <__alt_data_end+0xff00bf84>
    c340:	00800604 	movi	r2,24
    c344:	003f2706 	br	bfe4 <__alt_data_end+0xff00bfe4>
    c348:	00800604 	movi	r2,24
    c34c:	003ece06 	br	be88 <__alt_data_end+0xff00be88>
    c350:	0007883a 	mov	r3,zero
    c354:	00800044 	movi	r2,1
    c358:	003f5c06 	br	c0cc <__alt_data_end+0xff00c0cc>
    c35c:	813fa12e 	bgeu	r16,r4,c1e4 <__alt_data_end+0xff00c1e4>
    c360:	10bfff84 	addi	r2,r2,-2
    c364:	85e1883a 	add	r16,r16,r23
    c368:	003f9f06 	br	c1e8 <__alt_data_end+0xff00c1e8>
    c36c:	1c7f8a2e 	bgeu	r3,r17,c198 <__alt_data_end+0xff00c198>
    c370:	31bfff84 	addi	r6,r6,-2
    c374:	1dc7883a 	add	r3,r3,r23
    c378:	003f8806 	br	c19c <__alt_data_end+0xff00c19c>
    c37c:	1805883a 	mov	r2,r3
    c380:	003fde06 	br	c2fc <__alt_data_end+0xff00c2fc>
    c384:	1839883a 	mov	fp,r3
    c388:	003fc906 	br	c2b0 <__alt_data_end+0xff00c2b0>
    c38c:	b5bfff84 	addi	r22,r22,-2
    c390:	2449883a 	add	r4,r4,r17
    c394:	003f3406 	br	c068 <__alt_data_end+0xff00c068>
    c398:	b5bfff84 	addi	r22,r22,-2
    c39c:	1445883a 	add	r2,r2,r17
    c3a0:	003edb06 	br	bf10 <__alt_data_end+0xff00bf10>

0000c3a4 <__umoddi3>:
    c3a4:	defff404 	addi	sp,sp,-48
    c3a8:	df000a15 	stw	fp,40(sp)
    c3ac:	dc400315 	stw	r17,12(sp)
    c3b0:	dc000215 	stw	r16,8(sp)
    c3b4:	dfc00b15 	stw	ra,44(sp)
    c3b8:	ddc00915 	stw	r23,36(sp)
    c3bc:	dd800815 	stw	r22,32(sp)
    c3c0:	dd400715 	stw	r21,28(sp)
    c3c4:	dd000615 	stw	r20,24(sp)
    c3c8:	dcc00515 	stw	r19,20(sp)
    c3cc:	dc800415 	stw	r18,16(sp)
    c3d0:	2021883a 	mov	r16,r4
    c3d4:	2823883a 	mov	r17,r5
    c3d8:	2839883a 	mov	fp,r5
    c3dc:	38003c1e 	bne	r7,zero,c4d0 <__umoddi3+0x12c>
    c3e0:	3027883a 	mov	r19,r6
    c3e4:	2029883a 	mov	r20,r4
    c3e8:	2980512e 	bgeu	r5,r6,c530 <__umoddi3+0x18c>
    c3ec:	00bfffd4 	movui	r2,65535
    c3f0:	11809a36 	bltu	r2,r6,c65c <__umoddi3+0x2b8>
    c3f4:	01003fc4 	movi	r4,255
    c3f8:	2189803a 	cmpltu	r4,r4,r6
    c3fc:	200890fa 	slli	r4,r4,3
    c400:	3104d83a 	srl	r2,r6,r4
    c404:	00c00074 	movhi	r3,1
    c408:	18c51f84 	addi	r3,r3,5246
    c40c:	1885883a 	add	r2,r3,r2
    c410:	10c00003 	ldbu	r3,0(r2)
    c414:	00800804 	movi	r2,32
    c418:	1909883a 	add	r4,r3,r4
    c41c:	1125c83a 	sub	r18,r2,r4
    c420:	90000526 	beq	r18,zero,c438 <__umoddi3+0x94>
    c424:	8ca2983a 	sll	r17,r17,r18
    c428:	8108d83a 	srl	r4,r16,r4
    c42c:	34a6983a 	sll	r19,r6,r18
    c430:	84a8983a 	sll	r20,r16,r18
    c434:	2478b03a 	or	fp,r4,r17
    c438:	982ed43a 	srli	r23,r19,16
    c43c:	e009883a 	mov	r4,fp
    c440:	9dbfffcc 	andi	r22,r19,65535
    c444:	b80b883a 	mov	r5,r23
    c448:	0001d640 	call	1d64 <__umodsi3>
    c44c:	e009883a 	mov	r4,fp
    c450:	b80b883a 	mov	r5,r23
    c454:	102b883a 	mov	r21,r2
    c458:	0001d000 	call	1d00 <__udivsi3>
    c45c:	a806943a 	slli	r3,r21,16
    c460:	a008d43a 	srli	r4,r20,16
    c464:	b085383a 	mul	r2,r22,r2
    c468:	20c8b03a 	or	r4,r4,r3
    c46c:	2080032e 	bgeu	r4,r2,c47c <__umoddi3+0xd8>
    c470:	24c9883a 	add	r4,r4,r19
    c474:	24c00136 	bltu	r4,r19,c47c <__umoddi3+0xd8>
    c478:	20811036 	bltu	r4,r2,c8bc <__umoddi3+0x518>
    c47c:	20abc83a 	sub	r21,r4,r2
    c480:	b80b883a 	mov	r5,r23
    c484:	a809883a 	mov	r4,r21
    c488:	0001d640 	call	1d64 <__umodsi3>
    c48c:	1023883a 	mov	r17,r2
    c490:	b80b883a 	mov	r5,r23
    c494:	a809883a 	mov	r4,r21
    c498:	0001d000 	call	1d00 <__udivsi3>
    c49c:	8822943a 	slli	r17,r17,16
    c4a0:	b085383a 	mul	r2,r22,r2
    c4a4:	a0ffffcc 	andi	r3,r20,65535
    c4a8:	1c46b03a 	or	r3,r3,r17
    c4ac:	1880042e 	bgeu	r3,r2,c4c0 <__umoddi3+0x11c>
    c4b0:	1cc7883a 	add	r3,r3,r19
    c4b4:	1cc00236 	bltu	r3,r19,c4c0 <__umoddi3+0x11c>
    c4b8:	1880012e 	bgeu	r3,r2,c4c0 <__umoddi3+0x11c>
    c4bc:	1cc7883a 	add	r3,r3,r19
    c4c0:	1885c83a 	sub	r2,r3,r2
    c4c4:	1484d83a 	srl	r2,r2,r18
    c4c8:	0007883a 	mov	r3,zero
    c4cc:	00004f06 	br	c60c <__umoddi3+0x268>
    c4d0:	29c04c36 	bltu	r5,r7,c604 <__umoddi3+0x260>
    c4d4:	00bfffd4 	movui	r2,65535
    c4d8:	11c0582e 	bgeu	r2,r7,c63c <__umoddi3+0x298>
    c4dc:	00804034 	movhi	r2,256
    c4e0:	10bfffc4 	addi	r2,r2,-1
    c4e4:	11c0e736 	bltu	r2,r7,c884 <__umoddi3+0x4e0>
    c4e8:	01000404 	movi	r4,16
    c4ec:	3904d83a 	srl	r2,r7,r4
    c4f0:	00c00074 	movhi	r3,1
    c4f4:	18c51f84 	addi	r3,r3,5246
    c4f8:	1885883a 	add	r2,r3,r2
    c4fc:	14c00003 	ldbu	r19,0(r2)
    c500:	00c00804 	movi	r3,32
    c504:	9927883a 	add	r19,r19,r4
    c508:	1ce9c83a 	sub	r20,r3,r19
    c50c:	a000581e 	bne	r20,zero,c670 <__umoddi3+0x2cc>
    c510:	3c400136 	bltu	r7,r17,c518 <__umoddi3+0x174>
    c514:	8180eb36 	bltu	r16,r6,c8c4 <__umoddi3+0x520>
    c518:	8185c83a 	sub	r2,r16,r6
    c51c:	89e3c83a 	sub	r17,r17,r7
    c520:	8089803a 	cmpltu	r4,r16,r2
    c524:	8939c83a 	sub	fp,r17,r4
    c528:	e007883a 	mov	r3,fp
    c52c:	00003706 	br	c60c <__umoddi3+0x268>
    c530:	3000041e 	bne	r6,zero,c544 <__umoddi3+0x1a0>
    c534:	000b883a 	mov	r5,zero
    c538:	01000044 	movi	r4,1
    c53c:	0001d000 	call	1d00 <__udivsi3>
    c540:	1027883a 	mov	r19,r2
    c544:	00bfffd4 	movui	r2,65535
    c548:	14c0402e 	bgeu	r2,r19,c64c <__umoddi3+0x2a8>
    c54c:	00804034 	movhi	r2,256
    c550:	10bfffc4 	addi	r2,r2,-1
    c554:	14c0cd36 	bltu	r2,r19,c88c <__umoddi3+0x4e8>
    c558:	00800404 	movi	r2,16
    c55c:	9886d83a 	srl	r3,r19,r2
    c560:	01000074 	movhi	r4,1
    c564:	21051f84 	addi	r4,r4,5246
    c568:	20c7883a 	add	r3,r4,r3
    c56c:	18c00003 	ldbu	r3,0(r3)
    c570:	1887883a 	add	r3,r3,r2
    c574:	00800804 	movi	r2,32
    c578:	10e5c83a 	sub	r18,r2,r3
    c57c:	9000901e 	bne	r18,zero,c7c0 <__umoddi3+0x41c>
    c580:	982cd43a 	srli	r22,r19,16
    c584:	8ce3c83a 	sub	r17,r17,r19
    c588:	9d7fffcc 	andi	r21,r19,65535
    c58c:	b00b883a 	mov	r5,r22
    c590:	8809883a 	mov	r4,r17
    c594:	0001d640 	call	1d64 <__umodsi3>
    c598:	8809883a 	mov	r4,r17
    c59c:	b00b883a 	mov	r5,r22
    c5a0:	1021883a 	mov	r16,r2
    c5a4:	0001d000 	call	1d00 <__udivsi3>
    c5a8:	8006943a 	slli	r3,r16,16
    c5ac:	a008d43a 	srli	r4,r20,16
    c5b0:	1545383a 	mul	r2,r2,r21
    c5b4:	20c8b03a 	or	r4,r4,r3
    c5b8:	2080042e 	bgeu	r4,r2,c5cc <__umoddi3+0x228>
    c5bc:	24c9883a 	add	r4,r4,r19
    c5c0:	24c00236 	bltu	r4,r19,c5cc <__umoddi3+0x228>
    c5c4:	2080012e 	bgeu	r4,r2,c5cc <__umoddi3+0x228>
    c5c8:	24c9883a 	add	r4,r4,r19
    c5cc:	20a1c83a 	sub	r16,r4,r2
    c5d0:	b00b883a 	mov	r5,r22
    c5d4:	8009883a 	mov	r4,r16
    c5d8:	0001d640 	call	1d64 <__umodsi3>
    c5dc:	1023883a 	mov	r17,r2
    c5e0:	b00b883a 	mov	r5,r22
    c5e4:	8009883a 	mov	r4,r16
    c5e8:	0001d000 	call	1d00 <__udivsi3>
    c5ec:	8822943a 	slli	r17,r17,16
    c5f0:	1545383a 	mul	r2,r2,r21
    c5f4:	a53fffcc 	andi	r20,r20,65535
    c5f8:	a446b03a 	or	r3,r20,r17
    c5fc:	18bfb02e 	bgeu	r3,r2,c4c0 <__alt_data_end+0xff00c4c0>
    c600:	003fab06 	br	c4b0 <__alt_data_end+0xff00c4b0>
    c604:	2005883a 	mov	r2,r4
    c608:	2807883a 	mov	r3,r5
    c60c:	dfc00b17 	ldw	ra,44(sp)
    c610:	df000a17 	ldw	fp,40(sp)
    c614:	ddc00917 	ldw	r23,36(sp)
    c618:	dd800817 	ldw	r22,32(sp)
    c61c:	dd400717 	ldw	r21,28(sp)
    c620:	dd000617 	ldw	r20,24(sp)
    c624:	dcc00517 	ldw	r19,20(sp)
    c628:	dc800417 	ldw	r18,16(sp)
    c62c:	dc400317 	ldw	r17,12(sp)
    c630:	dc000217 	ldw	r16,8(sp)
    c634:	dec00c04 	addi	sp,sp,48
    c638:	f800283a 	ret
    c63c:	04c03fc4 	movi	r19,255
    c640:	99c9803a 	cmpltu	r4,r19,r7
    c644:	200890fa 	slli	r4,r4,3
    c648:	003fa806 	br	c4ec <__alt_data_end+0xff00c4ec>
    c64c:	00803fc4 	movi	r2,255
    c650:	14c5803a 	cmpltu	r2,r2,r19
    c654:	100490fa 	slli	r2,r2,3
    c658:	003fc006 	br	c55c <__alt_data_end+0xff00c55c>
    c65c:	00804034 	movhi	r2,256
    c660:	10bfffc4 	addi	r2,r2,-1
    c664:	11808b36 	bltu	r2,r6,c894 <__umoddi3+0x4f0>
    c668:	01000404 	movi	r4,16
    c66c:	003f6406 	br	c400 <__alt_data_end+0xff00c400>
    c670:	34c4d83a 	srl	r2,r6,r19
    c674:	3d0e983a 	sll	r7,r7,r20
    c678:	8cf8d83a 	srl	fp,r17,r19
    c67c:	8d10983a 	sll	r8,r17,r20
    c680:	38aab03a 	or	r21,r7,r2
    c684:	a82cd43a 	srli	r22,r21,16
    c688:	84e2d83a 	srl	r17,r16,r19
    c68c:	e009883a 	mov	r4,fp
    c690:	b00b883a 	mov	r5,r22
    c694:	8a22b03a 	or	r17,r17,r8
    c698:	3524983a 	sll	r18,r6,r20
    c69c:	0001d640 	call	1d64 <__umodsi3>
    c6a0:	e009883a 	mov	r4,fp
    c6a4:	b00b883a 	mov	r5,r22
    c6a8:	102f883a 	mov	r23,r2
    c6ac:	0001d000 	call	1d00 <__udivsi3>
    c6b0:	100d883a 	mov	r6,r2
    c6b4:	b808943a 	slli	r4,r23,16
    c6b8:	aa3fffcc 	andi	r8,r21,65535
    c6bc:	8804d43a 	srli	r2,r17,16
    c6c0:	41af383a 	mul	r23,r8,r6
    c6c4:	8520983a 	sll	r16,r16,r20
    c6c8:	1104b03a 	or	r2,r2,r4
    c6cc:	15c0042e 	bgeu	r2,r23,c6e0 <__umoddi3+0x33c>
    c6d0:	1545883a 	add	r2,r2,r21
    c6d4:	30ffffc4 	addi	r3,r6,-1
    c6d8:	1540742e 	bgeu	r2,r21,c8ac <__umoddi3+0x508>
    c6dc:	180d883a 	mov	r6,r3
    c6e0:	15efc83a 	sub	r23,r2,r23
    c6e4:	b00b883a 	mov	r5,r22
    c6e8:	b809883a 	mov	r4,r23
    c6ec:	d9800115 	stw	r6,4(sp)
    c6f0:	da000015 	stw	r8,0(sp)
    c6f4:	0001d640 	call	1d64 <__umodsi3>
    c6f8:	b00b883a 	mov	r5,r22
    c6fc:	b809883a 	mov	r4,r23
    c700:	1039883a 	mov	fp,r2
    c704:	0001d000 	call	1d00 <__udivsi3>
    c708:	da000017 	ldw	r8,0(sp)
    c70c:	e038943a 	slli	fp,fp,16
    c710:	100b883a 	mov	r5,r2
    c714:	4089383a 	mul	r4,r8,r2
    c718:	8a3fffcc 	andi	r8,r17,65535
    c71c:	4710b03a 	or	r8,r8,fp
    c720:	d9800117 	ldw	r6,4(sp)
    c724:	4100042e 	bgeu	r8,r4,c738 <__umoddi3+0x394>
    c728:	4551883a 	add	r8,r8,r21
    c72c:	10bfffc4 	addi	r2,r2,-1
    c730:	45405a2e 	bgeu	r8,r21,c89c <__umoddi3+0x4f8>
    c734:	100b883a 	mov	r5,r2
    c738:	300c943a 	slli	r6,r6,16
    c73c:	91ffffcc 	andi	r7,r18,65535
    c740:	9004d43a 	srli	r2,r18,16
    c744:	314cb03a 	or	r6,r6,r5
    c748:	317fffcc 	andi	r5,r6,65535
    c74c:	300cd43a 	srli	r6,r6,16
    c750:	29d3383a 	mul	r9,r5,r7
    c754:	288b383a 	mul	r5,r5,r2
    c758:	31cf383a 	mul	r7,r6,r7
    c75c:	4806d43a 	srli	r3,r9,16
    c760:	4111c83a 	sub	r8,r8,r4
    c764:	29cb883a 	add	r5,r5,r7
    c768:	194b883a 	add	r5,r3,r5
    c76c:	3085383a 	mul	r2,r6,r2
    c770:	29c0022e 	bgeu	r5,r7,c77c <__umoddi3+0x3d8>
    c774:	00c00074 	movhi	r3,1
    c778:	10c5883a 	add	r2,r2,r3
    c77c:	2808d43a 	srli	r4,r5,16
    c780:	280a943a 	slli	r5,r5,16
    c784:	4a7fffcc 	andi	r9,r9,65535
    c788:	2085883a 	add	r2,r4,r2
    c78c:	2a4b883a 	add	r5,r5,r9
    c790:	40803636 	bltu	r8,r2,c86c <__umoddi3+0x4c8>
    c794:	40804d26 	beq	r8,r2,c8cc <__umoddi3+0x528>
    c798:	4089c83a 	sub	r4,r8,r2
    c79c:	280f883a 	mov	r7,r5
    c7a0:	81cfc83a 	sub	r7,r16,r7
    c7a4:	81c7803a 	cmpltu	r3,r16,r7
    c7a8:	20c7c83a 	sub	r3,r4,r3
    c7ac:	1cc4983a 	sll	r2,r3,r19
    c7b0:	3d0ed83a 	srl	r7,r7,r20
    c7b4:	1d06d83a 	srl	r3,r3,r20
    c7b8:	11c4b03a 	or	r2,r2,r7
    c7bc:	003f9306 	br	c60c <__alt_data_end+0xff00c60c>
    c7c0:	9ca6983a 	sll	r19,r19,r18
    c7c4:	88e8d83a 	srl	r20,r17,r3
    c7c8:	80c4d83a 	srl	r2,r16,r3
    c7cc:	982cd43a 	srli	r22,r19,16
    c7d0:	8ca2983a 	sll	r17,r17,r18
    c7d4:	a009883a 	mov	r4,r20
    c7d8:	b00b883a 	mov	r5,r22
    c7dc:	1478b03a 	or	fp,r2,r17
    c7e0:	0001d640 	call	1d64 <__umodsi3>
    c7e4:	a009883a 	mov	r4,r20
    c7e8:	b00b883a 	mov	r5,r22
    c7ec:	1023883a 	mov	r17,r2
    c7f0:	0001d000 	call	1d00 <__udivsi3>
    c7f4:	9d7fffcc 	andi	r21,r19,65535
    c7f8:	880a943a 	slli	r5,r17,16
    c7fc:	e008d43a 	srli	r4,fp,16
    c800:	a885383a 	mul	r2,r21,r2
    c804:	84a8983a 	sll	r20,r16,r18
    c808:	2148b03a 	or	r4,r4,r5
    c80c:	2080042e 	bgeu	r4,r2,c820 <__umoddi3+0x47c>
    c810:	24c9883a 	add	r4,r4,r19
    c814:	24c00236 	bltu	r4,r19,c820 <__umoddi3+0x47c>
    c818:	2080012e 	bgeu	r4,r2,c820 <__umoddi3+0x47c>
    c81c:	24c9883a 	add	r4,r4,r19
    c820:	20a3c83a 	sub	r17,r4,r2
    c824:	b00b883a 	mov	r5,r22
    c828:	8809883a 	mov	r4,r17
    c82c:	0001d640 	call	1d64 <__umodsi3>
    c830:	102f883a 	mov	r23,r2
    c834:	8809883a 	mov	r4,r17
    c838:	b00b883a 	mov	r5,r22
    c83c:	0001d000 	call	1d00 <__udivsi3>
    c840:	b82e943a 	slli	r23,r23,16
    c844:	a885383a 	mul	r2,r21,r2
    c848:	e13fffcc 	andi	r4,fp,65535
    c84c:	25c8b03a 	or	r4,r4,r23
    c850:	2080042e 	bgeu	r4,r2,c864 <__umoddi3+0x4c0>
    c854:	24c9883a 	add	r4,r4,r19
    c858:	24c00236 	bltu	r4,r19,c864 <__umoddi3+0x4c0>
    c85c:	2080012e 	bgeu	r4,r2,c864 <__umoddi3+0x4c0>
    c860:	24c9883a 	add	r4,r4,r19
    c864:	20a3c83a 	sub	r17,r4,r2
    c868:	003f4806 	br	c58c <__alt_data_end+0xff00c58c>
    c86c:	2c8fc83a 	sub	r7,r5,r18
    c870:	1545c83a 	sub	r2,r2,r21
    c874:	29cb803a 	cmpltu	r5,r5,r7
    c878:	1145c83a 	sub	r2,r2,r5
    c87c:	4089c83a 	sub	r4,r8,r2
    c880:	003fc706 	br	c7a0 <__alt_data_end+0xff00c7a0>
    c884:	01000604 	movi	r4,24
    c888:	003f1806 	br	c4ec <__alt_data_end+0xff00c4ec>
    c88c:	00800604 	movi	r2,24
    c890:	003f3206 	br	c55c <__alt_data_end+0xff00c55c>
    c894:	01000604 	movi	r4,24
    c898:	003ed906 	br	c400 <__alt_data_end+0xff00c400>
    c89c:	413fa52e 	bgeu	r8,r4,c734 <__alt_data_end+0xff00c734>
    c8a0:	297fff84 	addi	r5,r5,-2
    c8a4:	4551883a 	add	r8,r8,r21
    c8a8:	003fa306 	br	c738 <__alt_data_end+0xff00c738>
    c8ac:	15ff8b2e 	bgeu	r2,r23,c6dc <__alt_data_end+0xff00c6dc>
    c8b0:	31bfff84 	addi	r6,r6,-2
    c8b4:	1545883a 	add	r2,r2,r21
    c8b8:	003f8906 	br	c6e0 <__alt_data_end+0xff00c6e0>
    c8bc:	24c9883a 	add	r4,r4,r19
    c8c0:	003eee06 	br	c47c <__alt_data_end+0xff00c47c>
    c8c4:	8005883a 	mov	r2,r16
    c8c8:	003f1706 	br	c528 <__alt_data_end+0xff00c528>
    c8cc:	817fe736 	bltu	r16,r5,c86c <__alt_data_end+0xff00c86c>
    c8d0:	280f883a 	mov	r7,r5
    c8d4:	0009883a 	mov	r4,zero
    c8d8:	003fb106 	br	c7a0 <__alt_data_end+0xff00c7a0>

0000c8dc <__adddf3>:
    c8dc:	02c00434 	movhi	r11,16
    c8e0:	5affffc4 	addi	r11,r11,-1
    c8e4:	2806d7fa 	srli	r3,r5,31
    c8e8:	2ad4703a 	and	r10,r5,r11
    c8ec:	3ad2703a 	and	r9,r7,r11
    c8f0:	3804d53a 	srli	r2,r7,20
    c8f4:	3018d77a 	srli	r12,r6,29
    c8f8:	280ad53a 	srli	r5,r5,20
    c8fc:	501490fa 	slli	r10,r10,3
    c900:	2010d77a 	srli	r8,r4,29
    c904:	481290fa 	slli	r9,r9,3
    c908:	380ed7fa 	srli	r7,r7,31
    c90c:	defffb04 	addi	sp,sp,-20
    c910:	dc800215 	stw	r18,8(sp)
    c914:	dc400115 	stw	r17,4(sp)
    c918:	dc000015 	stw	r16,0(sp)
    c91c:	dfc00415 	stw	ra,16(sp)
    c920:	dcc00315 	stw	r19,12(sp)
    c924:	1c803fcc 	andi	r18,r3,255
    c928:	2c01ffcc 	andi	r16,r5,2047
    c92c:	5210b03a 	or	r8,r10,r8
    c930:	202290fa 	slli	r17,r4,3
    c934:	1081ffcc 	andi	r2,r2,2047
    c938:	4b12b03a 	or	r9,r9,r12
    c93c:	300c90fa 	slli	r6,r6,3
    c940:	91c07526 	beq	r18,r7,cb18 <__adddf3+0x23c>
    c944:	8087c83a 	sub	r3,r16,r2
    c948:	00c0ab0e 	bge	zero,r3,cbf8 <__adddf3+0x31c>
    c94c:	10002a1e 	bne	r2,zero,c9f8 <__adddf3+0x11c>
    c950:	4984b03a 	or	r2,r9,r6
    c954:	1000961e 	bne	r2,zero,cbb0 <__adddf3+0x2d4>
    c958:	888001cc 	andi	r2,r17,7
    c95c:	10000726 	beq	r2,zero,c97c <__adddf3+0xa0>
    c960:	888003cc 	andi	r2,r17,15
    c964:	00c00104 	movi	r3,4
    c968:	10c00426 	beq	r2,r3,c97c <__adddf3+0xa0>
    c96c:	88c7883a 	add	r3,r17,r3
    c970:	1c63803a 	cmpltu	r17,r3,r17
    c974:	4451883a 	add	r8,r8,r17
    c978:	1823883a 	mov	r17,r3
    c97c:	4080202c 	andhi	r2,r8,128
    c980:	10005926 	beq	r2,zero,cae8 <__adddf3+0x20c>
    c984:	84000044 	addi	r16,r16,1
    c988:	0081ffc4 	movi	r2,2047
    c98c:	8080ba26 	beq	r16,r2,cc78 <__adddf3+0x39c>
    c990:	00bfe034 	movhi	r2,65408
    c994:	10bfffc4 	addi	r2,r2,-1
    c998:	4090703a 	and	r8,r8,r2
    c99c:	4004977a 	slli	r2,r8,29
    c9a0:	4010927a 	slli	r8,r8,9
    c9a4:	8822d0fa 	srli	r17,r17,3
    c9a8:	8401ffcc 	andi	r16,r16,2047
    c9ac:	4010d33a 	srli	r8,r8,12
    c9b0:	9007883a 	mov	r3,r18
    c9b4:	1444b03a 	or	r2,r2,r17
    c9b8:	8401ffcc 	andi	r16,r16,2047
    c9bc:	8020953a 	slli	r16,r16,20
    c9c0:	18c03fcc 	andi	r3,r3,255
    c9c4:	01000434 	movhi	r4,16
    c9c8:	213fffc4 	addi	r4,r4,-1
    c9cc:	180697fa 	slli	r3,r3,31
    c9d0:	4110703a 	and	r8,r8,r4
    c9d4:	4410b03a 	or	r8,r8,r16
    c9d8:	40c6b03a 	or	r3,r8,r3
    c9dc:	dfc00417 	ldw	ra,16(sp)
    c9e0:	dcc00317 	ldw	r19,12(sp)
    c9e4:	dc800217 	ldw	r18,8(sp)
    c9e8:	dc400117 	ldw	r17,4(sp)
    c9ec:	dc000017 	ldw	r16,0(sp)
    c9f0:	dec00504 	addi	sp,sp,20
    c9f4:	f800283a 	ret
    c9f8:	0081ffc4 	movi	r2,2047
    c9fc:	80bfd626 	beq	r16,r2,c958 <__alt_data_end+0xff00c958>
    ca00:	4a402034 	orhi	r9,r9,128
    ca04:	00800e04 	movi	r2,56
    ca08:	10c09f16 	blt	r2,r3,cc88 <__adddf3+0x3ac>
    ca0c:	008007c4 	movi	r2,31
    ca10:	10c0c216 	blt	r2,r3,cd1c <__adddf3+0x440>
    ca14:	00800804 	movi	r2,32
    ca18:	10c5c83a 	sub	r2,r2,r3
    ca1c:	488a983a 	sll	r5,r9,r2
    ca20:	30c8d83a 	srl	r4,r6,r3
    ca24:	3084983a 	sll	r2,r6,r2
    ca28:	48c6d83a 	srl	r3,r9,r3
    ca2c:	290cb03a 	or	r6,r5,r4
    ca30:	1004c03a 	cmpne	r2,r2,zero
    ca34:	308cb03a 	or	r6,r6,r2
    ca38:	898dc83a 	sub	r6,r17,r6
    ca3c:	89a3803a 	cmpltu	r17,r17,r6
    ca40:	40d1c83a 	sub	r8,r8,r3
    ca44:	4451c83a 	sub	r8,r8,r17
    ca48:	3023883a 	mov	r17,r6
    ca4c:	4080202c 	andhi	r2,r8,128
    ca50:	10002326 	beq	r2,zero,cae0 <__adddf3+0x204>
    ca54:	04c02034 	movhi	r19,128
    ca58:	9cffffc4 	addi	r19,r19,-1
    ca5c:	44e6703a 	and	r19,r8,r19
    ca60:	98007626 	beq	r19,zero,cc3c <__adddf3+0x360>
    ca64:	9809883a 	mov	r4,r19
    ca68:	000274c0 	call	274c <__clzsi2>
    ca6c:	10fffe04 	addi	r3,r2,-8
    ca70:	010007c4 	movi	r4,31
    ca74:	20c07716 	blt	r4,r3,cc54 <__adddf3+0x378>
    ca78:	00800804 	movi	r2,32
    ca7c:	10c5c83a 	sub	r2,r2,r3
    ca80:	8884d83a 	srl	r2,r17,r2
    ca84:	98d0983a 	sll	r8,r19,r3
    ca88:	88e2983a 	sll	r17,r17,r3
    ca8c:	1204b03a 	or	r2,r2,r8
    ca90:	1c007416 	blt	r3,r16,cc64 <__adddf3+0x388>
    ca94:	1c21c83a 	sub	r16,r3,r16
    ca98:	82000044 	addi	r8,r16,1
    ca9c:	00c007c4 	movi	r3,31
    caa0:	1a009116 	blt	r3,r8,cce8 <__adddf3+0x40c>
    caa4:	00c00804 	movi	r3,32
    caa8:	1a07c83a 	sub	r3,r3,r8
    caac:	8a08d83a 	srl	r4,r17,r8
    cab0:	88e2983a 	sll	r17,r17,r3
    cab4:	10c6983a 	sll	r3,r2,r3
    cab8:	1210d83a 	srl	r8,r2,r8
    cabc:	8804c03a 	cmpne	r2,r17,zero
    cac0:	1906b03a 	or	r3,r3,r4
    cac4:	18a2b03a 	or	r17,r3,r2
    cac8:	0021883a 	mov	r16,zero
    cacc:	003fa206 	br	c958 <__alt_data_end+0xff00c958>
    cad0:	1890b03a 	or	r8,r3,r2
    cad4:	40017d26 	beq	r8,zero,d0cc <__adddf3+0x7f0>
    cad8:	1011883a 	mov	r8,r2
    cadc:	1823883a 	mov	r17,r3
    cae0:	888001cc 	andi	r2,r17,7
    cae4:	103f9e1e 	bne	r2,zero,c960 <__alt_data_end+0xff00c960>
    cae8:	4004977a 	slli	r2,r8,29
    caec:	8822d0fa 	srli	r17,r17,3
    caf0:	4010d0fa 	srli	r8,r8,3
    caf4:	9007883a 	mov	r3,r18
    caf8:	1444b03a 	or	r2,r2,r17
    cafc:	0101ffc4 	movi	r4,2047
    cb00:	81002426 	beq	r16,r4,cb94 <__adddf3+0x2b8>
    cb04:	8120703a 	and	r16,r16,r4
    cb08:	01000434 	movhi	r4,16
    cb0c:	213fffc4 	addi	r4,r4,-1
    cb10:	4110703a 	and	r8,r8,r4
    cb14:	003fa806 	br	c9b8 <__alt_data_end+0xff00c9b8>
    cb18:	8089c83a 	sub	r4,r16,r2
    cb1c:	01005e0e 	bge	zero,r4,cc98 <__adddf3+0x3bc>
    cb20:	10002b26 	beq	r2,zero,cbd0 <__adddf3+0x2f4>
    cb24:	0081ffc4 	movi	r2,2047
    cb28:	80bf8b26 	beq	r16,r2,c958 <__alt_data_end+0xff00c958>
    cb2c:	4a402034 	orhi	r9,r9,128
    cb30:	00800e04 	movi	r2,56
    cb34:	1100a40e 	bge	r2,r4,cdc8 <__adddf3+0x4ec>
    cb38:	498cb03a 	or	r6,r9,r6
    cb3c:	300ac03a 	cmpne	r5,r6,zero
    cb40:	0013883a 	mov	r9,zero
    cb44:	2c4b883a 	add	r5,r5,r17
    cb48:	2c63803a 	cmpltu	r17,r5,r17
    cb4c:	4a11883a 	add	r8,r9,r8
    cb50:	8a11883a 	add	r8,r17,r8
    cb54:	2823883a 	mov	r17,r5
    cb58:	4080202c 	andhi	r2,r8,128
    cb5c:	103fe026 	beq	r2,zero,cae0 <__alt_data_end+0xff00cae0>
    cb60:	84000044 	addi	r16,r16,1
    cb64:	0081ffc4 	movi	r2,2047
    cb68:	8080d226 	beq	r16,r2,ceb4 <__adddf3+0x5d8>
    cb6c:	00bfe034 	movhi	r2,65408
    cb70:	10bfffc4 	addi	r2,r2,-1
    cb74:	4090703a 	and	r8,r8,r2
    cb78:	880ad07a 	srli	r5,r17,1
    cb7c:	400897fa 	slli	r4,r8,31
    cb80:	88c0004c 	andi	r3,r17,1
    cb84:	28e2b03a 	or	r17,r5,r3
    cb88:	4010d07a 	srli	r8,r8,1
    cb8c:	2462b03a 	or	r17,r4,r17
    cb90:	003f7106 	br	c958 <__alt_data_end+0xff00c958>
    cb94:	4088b03a 	or	r4,r8,r2
    cb98:	20014526 	beq	r4,zero,d0b0 <__adddf3+0x7d4>
    cb9c:	01000434 	movhi	r4,16
    cba0:	42000234 	orhi	r8,r8,8
    cba4:	213fffc4 	addi	r4,r4,-1
    cba8:	4110703a 	and	r8,r8,r4
    cbac:	003f8206 	br	c9b8 <__alt_data_end+0xff00c9b8>
    cbb0:	18ffffc4 	addi	r3,r3,-1
    cbb4:	1800491e 	bne	r3,zero,ccdc <__adddf3+0x400>
    cbb8:	898bc83a 	sub	r5,r17,r6
    cbbc:	8963803a 	cmpltu	r17,r17,r5
    cbc0:	4251c83a 	sub	r8,r8,r9
    cbc4:	4451c83a 	sub	r8,r8,r17
    cbc8:	2823883a 	mov	r17,r5
    cbcc:	003f9f06 	br	ca4c <__alt_data_end+0xff00ca4c>
    cbd0:	4984b03a 	or	r2,r9,r6
    cbd4:	103f6026 	beq	r2,zero,c958 <__alt_data_end+0xff00c958>
    cbd8:	213fffc4 	addi	r4,r4,-1
    cbdc:	2000931e 	bne	r4,zero,ce2c <__adddf3+0x550>
    cbe0:	898d883a 	add	r6,r17,r6
    cbe4:	3463803a 	cmpltu	r17,r6,r17
    cbe8:	4251883a 	add	r8,r8,r9
    cbec:	8a11883a 	add	r8,r17,r8
    cbf0:	3023883a 	mov	r17,r6
    cbf4:	003fd806 	br	cb58 <__alt_data_end+0xff00cb58>
    cbf8:	1800541e 	bne	r3,zero,cd4c <__adddf3+0x470>
    cbfc:	80800044 	addi	r2,r16,1
    cc00:	1081ffcc 	andi	r2,r2,2047
    cc04:	00c00044 	movi	r3,1
    cc08:	1880a00e 	bge	r3,r2,ce8c <__adddf3+0x5b0>
    cc0c:	8989c83a 	sub	r4,r17,r6
    cc10:	8905803a 	cmpltu	r2,r17,r4
    cc14:	4267c83a 	sub	r19,r8,r9
    cc18:	98a7c83a 	sub	r19,r19,r2
    cc1c:	9880202c 	andhi	r2,r19,128
    cc20:	10006326 	beq	r2,zero,cdb0 <__adddf3+0x4d4>
    cc24:	3463c83a 	sub	r17,r6,r17
    cc28:	4a07c83a 	sub	r3,r9,r8
    cc2c:	344d803a 	cmpltu	r6,r6,r17
    cc30:	19a7c83a 	sub	r19,r3,r6
    cc34:	3825883a 	mov	r18,r7
    cc38:	983f8a1e 	bne	r19,zero,ca64 <__alt_data_end+0xff00ca64>
    cc3c:	8809883a 	mov	r4,r17
    cc40:	000274c0 	call	274c <__clzsi2>
    cc44:	10800804 	addi	r2,r2,32
    cc48:	10fffe04 	addi	r3,r2,-8
    cc4c:	010007c4 	movi	r4,31
    cc50:	20ff890e 	bge	r4,r3,ca78 <__alt_data_end+0xff00ca78>
    cc54:	10bff604 	addi	r2,r2,-40
    cc58:	8884983a 	sll	r2,r17,r2
    cc5c:	0023883a 	mov	r17,zero
    cc60:	1c3f8c0e 	bge	r3,r16,ca94 <__alt_data_end+0xff00ca94>
    cc64:	023fe034 	movhi	r8,65408
    cc68:	423fffc4 	addi	r8,r8,-1
    cc6c:	80e1c83a 	sub	r16,r16,r3
    cc70:	1210703a 	and	r8,r2,r8
    cc74:	003f3806 	br	c958 <__alt_data_end+0xff00c958>
    cc78:	9007883a 	mov	r3,r18
    cc7c:	0011883a 	mov	r8,zero
    cc80:	0005883a 	mov	r2,zero
    cc84:	003f4c06 	br	c9b8 <__alt_data_end+0xff00c9b8>
    cc88:	498cb03a 	or	r6,r9,r6
    cc8c:	300cc03a 	cmpne	r6,r6,zero
    cc90:	0007883a 	mov	r3,zero
    cc94:	003f6806 	br	ca38 <__alt_data_end+0xff00ca38>
    cc98:	20009c1e 	bne	r4,zero,cf0c <__adddf3+0x630>
    cc9c:	80800044 	addi	r2,r16,1
    cca0:	1141ffcc 	andi	r5,r2,2047
    cca4:	01000044 	movi	r4,1
    cca8:	2140670e 	bge	r4,r5,ce48 <__adddf3+0x56c>
    ccac:	0101ffc4 	movi	r4,2047
    ccb0:	11007f26 	beq	r2,r4,ceb0 <__adddf3+0x5d4>
    ccb4:	898d883a 	add	r6,r17,r6
    ccb8:	4247883a 	add	r3,r8,r9
    ccbc:	3451803a 	cmpltu	r8,r6,r17
    ccc0:	40d1883a 	add	r8,r8,r3
    ccc4:	402297fa 	slli	r17,r8,31
    ccc8:	300cd07a 	srli	r6,r6,1
    cccc:	4010d07a 	srli	r8,r8,1
    ccd0:	1021883a 	mov	r16,r2
    ccd4:	89a2b03a 	or	r17,r17,r6
    ccd8:	003f1f06 	br	c958 <__alt_data_end+0xff00c958>
    ccdc:	0081ffc4 	movi	r2,2047
    cce0:	80bf481e 	bne	r16,r2,ca04 <__alt_data_end+0xff00ca04>
    cce4:	003f1c06 	br	c958 <__alt_data_end+0xff00c958>
    cce8:	843ff844 	addi	r16,r16,-31
    ccec:	01000804 	movi	r4,32
    ccf0:	1406d83a 	srl	r3,r2,r16
    ccf4:	41005026 	beq	r8,r4,ce38 <__adddf3+0x55c>
    ccf8:	01001004 	movi	r4,64
    ccfc:	2211c83a 	sub	r8,r4,r8
    cd00:	1204983a 	sll	r2,r2,r8
    cd04:	88a2b03a 	or	r17,r17,r2
    cd08:	8822c03a 	cmpne	r17,r17,zero
    cd0c:	1c62b03a 	or	r17,r3,r17
    cd10:	0011883a 	mov	r8,zero
    cd14:	0021883a 	mov	r16,zero
    cd18:	003f7106 	br	cae0 <__alt_data_end+0xff00cae0>
    cd1c:	193ff804 	addi	r4,r3,-32
    cd20:	00800804 	movi	r2,32
    cd24:	4908d83a 	srl	r4,r9,r4
    cd28:	18804526 	beq	r3,r2,ce40 <__adddf3+0x564>
    cd2c:	00801004 	movi	r2,64
    cd30:	10c5c83a 	sub	r2,r2,r3
    cd34:	4886983a 	sll	r3,r9,r2
    cd38:	198cb03a 	or	r6,r3,r6
    cd3c:	300cc03a 	cmpne	r6,r6,zero
    cd40:	218cb03a 	or	r6,r4,r6
    cd44:	0007883a 	mov	r3,zero
    cd48:	003f3b06 	br	ca38 <__alt_data_end+0xff00ca38>
    cd4c:	80002a26 	beq	r16,zero,cdf8 <__adddf3+0x51c>
    cd50:	0101ffc4 	movi	r4,2047
    cd54:	11006826 	beq	r2,r4,cef8 <__adddf3+0x61c>
    cd58:	00c7c83a 	sub	r3,zero,r3
    cd5c:	42002034 	orhi	r8,r8,128
    cd60:	01000e04 	movi	r4,56
    cd64:	20c07c16 	blt	r4,r3,cf58 <__adddf3+0x67c>
    cd68:	010007c4 	movi	r4,31
    cd6c:	20c0da16 	blt	r4,r3,d0d8 <__adddf3+0x7fc>
    cd70:	01000804 	movi	r4,32
    cd74:	20c9c83a 	sub	r4,r4,r3
    cd78:	4114983a 	sll	r10,r8,r4
    cd7c:	88cad83a 	srl	r5,r17,r3
    cd80:	8908983a 	sll	r4,r17,r4
    cd84:	40c6d83a 	srl	r3,r8,r3
    cd88:	5162b03a 	or	r17,r10,r5
    cd8c:	2008c03a 	cmpne	r4,r4,zero
    cd90:	8922b03a 	or	r17,r17,r4
    cd94:	3463c83a 	sub	r17,r6,r17
    cd98:	48c7c83a 	sub	r3,r9,r3
    cd9c:	344d803a 	cmpltu	r6,r6,r17
    cda0:	1991c83a 	sub	r8,r3,r6
    cda4:	1021883a 	mov	r16,r2
    cda8:	3825883a 	mov	r18,r7
    cdac:	003f2706 	br	ca4c <__alt_data_end+0xff00ca4c>
    cdb0:	24d0b03a 	or	r8,r4,r19
    cdb4:	40001b1e 	bne	r8,zero,ce24 <__adddf3+0x548>
    cdb8:	0005883a 	mov	r2,zero
    cdbc:	0007883a 	mov	r3,zero
    cdc0:	0021883a 	mov	r16,zero
    cdc4:	003f4d06 	br	cafc <__alt_data_end+0xff00cafc>
    cdc8:	008007c4 	movi	r2,31
    cdcc:	11003c16 	blt	r2,r4,cec0 <__adddf3+0x5e4>
    cdd0:	00800804 	movi	r2,32
    cdd4:	1105c83a 	sub	r2,r2,r4
    cdd8:	488e983a 	sll	r7,r9,r2
    cddc:	310ad83a 	srl	r5,r6,r4
    cde0:	3084983a 	sll	r2,r6,r2
    cde4:	4912d83a 	srl	r9,r9,r4
    cde8:	394ab03a 	or	r5,r7,r5
    cdec:	1004c03a 	cmpne	r2,r2,zero
    cdf0:	288ab03a 	or	r5,r5,r2
    cdf4:	003f5306 	br	cb44 <__alt_data_end+0xff00cb44>
    cdf8:	4448b03a 	or	r4,r8,r17
    cdfc:	20003e26 	beq	r4,zero,cef8 <__adddf3+0x61c>
    ce00:	00c6303a 	nor	r3,zero,r3
    ce04:	18003a1e 	bne	r3,zero,cef0 <__adddf3+0x614>
    ce08:	3463c83a 	sub	r17,r6,r17
    ce0c:	4a07c83a 	sub	r3,r9,r8
    ce10:	344d803a 	cmpltu	r6,r6,r17
    ce14:	1991c83a 	sub	r8,r3,r6
    ce18:	1021883a 	mov	r16,r2
    ce1c:	3825883a 	mov	r18,r7
    ce20:	003f0a06 	br	ca4c <__alt_data_end+0xff00ca4c>
    ce24:	2023883a 	mov	r17,r4
    ce28:	003f0d06 	br	ca60 <__alt_data_end+0xff00ca60>
    ce2c:	0081ffc4 	movi	r2,2047
    ce30:	80bf3f1e 	bne	r16,r2,cb30 <__alt_data_end+0xff00cb30>
    ce34:	003ec806 	br	c958 <__alt_data_end+0xff00c958>
    ce38:	0005883a 	mov	r2,zero
    ce3c:	003fb106 	br	cd04 <__alt_data_end+0xff00cd04>
    ce40:	0007883a 	mov	r3,zero
    ce44:	003fbc06 	br	cd38 <__alt_data_end+0xff00cd38>
    ce48:	4444b03a 	or	r2,r8,r17
    ce4c:	8000871e 	bne	r16,zero,d06c <__adddf3+0x790>
    ce50:	1000ba26 	beq	r2,zero,d13c <__adddf3+0x860>
    ce54:	4984b03a 	or	r2,r9,r6
    ce58:	103ebf26 	beq	r2,zero,c958 <__alt_data_end+0xff00c958>
    ce5c:	8985883a 	add	r2,r17,r6
    ce60:	4247883a 	add	r3,r8,r9
    ce64:	1451803a 	cmpltu	r8,r2,r17
    ce68:	40d1883a 	add	r8,r8,r3
    ce6c:	40c0202c 	andhi	r3,r8,128
    ce70:	1023883a 	mov	r17,r2
    ce74:	183f1a26 	beq	r3,zero,cae0 <__alt_data_end+0xff00cae0>
    ce78:	00bfe034 	movhi	r2,65408
    ce7c:	10bfffc4 	addi	r2,r2,-1
    ce80:	2021883a 	mov	r16,r4
    ce84:	4090703a 	and	r8,r8,r2
    ce88:	003eb306 	br	c958 <__alt_data_end+0xff00c958>
    ce8c:	4444b03a 	or	r2,r8,r17
    ce90:	8000291e 	bne	r16,zero,cf38 <__adddf3+0x65c>
    ce94:	10004b1e 	bne	r2,zero,cfc4 <__adddf3+0x6e8>
    ce98:	4990b03a 	or	r8,r9,r6
    ce9c:	40008b26 	beq	r8,zero,d0cc <__adddf3+0x7f0>
    cea0:	4811883a 	mov	r8,r9
    cea4:	3023883a 	mov	r17,r6
    cea8:	3825883a 	mov	r18,r7
    ceac:	003eaa06 	br	c958 <__alt_data_end+0xff00c958>
    ceb0:	1021883a 	mov	r16,r2
    ceb4:	0011883a 	mov	r8,zero
    ceb8:	0005883a 	mov	r2,zero
    cebc:	003f0f06 	br	cafc <__alt_data_end+0xff00cafc>
    cec0:	217ff804 	addi	r5,r4,-32
    cec4:	00800804 	movi	r2,32
    cec8:	494ad83a 	srl	r5,r9,r5
    cecc:	20807d26 	beq	r4,r2,d0c4 <__adddf3+0x7e8>
    ced0:	00801004 	movi	r2,64
    ced4:	1109c83a 	sub	r4,r2,r4
    ced8:	4912983a 	sll	r9,r9,r4
    cedc:	498cb03a 	or	r6,r9,r6
    cee0:	300cc03a 	cmpne	r6,r6,zero
    cee4:	298ab03a 	or	r5,r5,r6
    cee8:	0013883a 	mov	r9,zero
    ceec:	003f1506 	br	cb44 <__alt_data_end+0xff00cb44>
    cef0:	0101ffc4 	movi	r4,2047
    cef4:	113f9a1e 	bne	r2,r4,cd60 <__alt_data_end+0xff00cd60>
    cef8:	4811883a 	mov	r8,r9
    cefc:	3023883a 	mov	r17,r6
    cf00:	1021883a 	mov	r16,r2
    cf04:	3825883a 	mov	r18,r7
    cf08:	003e9306 	br	c958 <__alt_data_end+0xff00c958>
    cf0c:	8000161e 	bne	r16,zero,cf68 <__adddf3+0x68c>
    cf10:	444ab03a 	or	r5,r8,r17
    cf14:	28005126 	beq	r5,zero,d05c <__adddf3+0x780>
    cf18:	0108303a 	nor	r4,zero,r4
    cf1c:	20004d1e 	bne	r4,zero,d054 <__adddf3+0x778>
    cf20:	89a3883a 	add	r17,r17,r6
    cf24:	4253883a 	add	r9,r8,r9
    cf28:	898d803a 	cmpltu	r6,r17,r6
    cf2c:	3251883a 	add	r8,r6,r9
    cf30:	1021883a 	mov	r16,r2
    cf34:	003f0806 	br	cb58 <__alt_data_end+0xff00cb58>
    cf38:	1000301e 	bne	r2,zero,cffc <__adddf3+0x720>
    cf3c:	4984b03a 	or	r2,r9,r6
    cf40:	10007126 	beq	r2,zero,d108 <__adddf3+0x82c>
    cf44:	4811883a 	mov	r8,r9
    cf48:	3023883a 	mov	r17,r6
    cf4c:	3825883a 	mov	r18,r7
    cf50:	0401ffc4 	movi	r16,2047
    cf54:	003e8006 	br	c958 <__alt_data_end+0xff00c958>
    cf58:	4462b03a 	or	r17,r8,r17
    cf5c:	8822c03a 	cmpne	r17,r17,zero
    cf60:	0007883a 	mov	r3,zero
    cf64:	003f8b06 	br	cd94 <__alt_data_end+0xff00cd94>
    cf68:	0141ffc4 	movi	r5,2047
    cf6c:	11403b26 	beq	r2,r5,d05c <__adddf3+0x780>
    cf70:	0109c83a 	sub	r4,zero,r4
    cf74:	42002034 	orhi	r8,r8,128
    cf78:	01400e04 	movi	r5,56
    cf7c:	29006716 	blt	r5,r4,d11c <__adddf3+0x840>
    cf80:	014007c4 	movi	r5,31
    cf84:	29007016 	blt	r5,r4,d148 <__adddf3+0x86c>
    cf88:	01400804 	movi	r5,32
    cf8c:	290bc83a 	sub	r5,r5,r4
    cf90:	4154983a 	sll	r10,r8,r5
    cf94:	890ed83a 	srl	r7,r17,r4
    cf98:	894a983a 	sll	r5,r17,r5
    cf9c:	4108d83a 	srl	r4,r8,r4
    cfa0:	51e2b03a 	or	r17,r10,r7
    cfa4:	280ac03a 	cmpne	r5,r5,zero
    cfa8:	8962b03a 	or	r17,r17,r5
    cfac:	89a3883a 	add	r17,r17,r6
    cfb0:	2253883a 	add	r9,r4,r9
    cfb4:	898d803a 	cmpltu	r6,r17,r6
    cfb8:	3251883a 	add	r8,r6,r9
    cfbc:	1021883a 	mov	r16,r2
    cfc0:	003ee506 	br	cb58 <__alt_data_end+0xff00cb58>
    cfc4:	4984b03a 	or	r2,r9,r6
    cfc8:	103e6326 	beq	r2,zero,c958 <__alt_data_end+0xff00c958>
    cfcc:	8987c83a 	sub	r3,r17,r6
    cfd0:	88c9803a 	cmpltu	r4,r17,r3
    cfd4:	4245c83a 	sub	r2,r8,r9
    cfd8:	1105c83a 	sub	r2,r2,r4
    cfdc:	1100202c 	andhi	r4,r2,128
    cfe0:	203ebb26 	beq	r4,zero,cad0 <__alt_data_end+0xff00cad0>
    cfe4:	3463c83a 	sub	r17,r6,r17
    cfe8:	4a07c83a 	sub	r3,r9,r8
    cfec:	344d803a 	cmpltu	r6,r6,r17
    cff0:	1991c83a 	sub	r8,r3,r6
    cff4:	3825883a 	mov	r18,r7
    cff8:	003e5706 	br	c958 <__alt_data_end+0xff00c958>
    cffc:	4984b03a 	or	r2,r9,r6
    d000:	10002e26 	beq	r2,zero,d0bc <__adddf3+0x7e0>
    d004:	4004d0fa 	srli	r2,r8,3
    d008:	8822d0fa 	srli	r17,r17,3
    d00c:	4010977a 	slli	r8,r8,29
    d010:	10c0022c 	andhi	r3,r2,8
    d014:	4462b03a 	or	r17,r8,r17
    d018:	18000826 	beq	r3,zero,d03c <__adddf3+0x760>
    d01c:	4808d0fa 	srli	r4,r9,3
    d020:	20c0022c 	andhi	r3,r4,8
    d024:	1800051e 	bne	r3,zero,d03c <__adddf3+0x760>
    d028:	300cd0fa 	srli	r6,r6,3
    d02c:	4806977a 	slli	r3,r9,29
    d030:	2005883a 	mov	r2,r4
    d034:	3825883a 	mov	r18,r7
    d038:	19a2b03a 	or	r17,r3,r6
    d03c:	8810d77a 	srli	r8,r17,29
    d040:	100490fa 	slli	r2,r2,3
    d044:	882290fa 	slli	r17,r17,3
    d048:	0401ffc4 	movi	r16,2047
    d04c:	4090b03a 	or	r8,r8,r2
    d050:	003e4106 	br	c958 <__alt_data_end+0xff00c958>
    d054:	0141ffc4 	movi	r5,2047
    d058:	117fc71e 	bne	r2,r5,cf78 <__alt_data_end+0xff00cf78>
    d05c:	4811883a 	mov	r8,r9
    d060:	3023883a 	mov	r17,r6
    d064:	1021883a 	mov	r16,r2
    d068:	003e3b06 	br	c958 <__alt_data_end+0xff00c958>
    d06c:	10002f26 	beq	r2,zero,d12c <__adddf3+0x850>
    d070:	4984b03a 	or	r2,r9,r6
    d074:	10001126 	beq	r2,zero,d0bc <__adddf3+0x7e0>
    d078:	4004d0fa 	srli	r2,r8,3
    d07c:	8822d0fa 	srli	r17,r17,3
    d080:	4010977a 	slli	r8,r8,29
    d084:	10c0022c 	andhi	r3,r2,8
    d088:	4462b03a 	or	r17,r8,r17
    d08c:	183feb26 	beq	r3,zero,d03c <__alt_data_end+0xff00d03c>
    d090:	4808d0fa 	srli	r4,r9,3
    d094:	20c0022c 	andhi	r3,r4,8
    d098:	183fe81e 	bne	r3,zero,d03c <__alt_data_end+0xff00d03c>
    d09c:	300cd0fa 	srli	r6,r6,3
    d0a0:	4806977a 	slli	r3,r9,29
    d0a4:	2005883a 	mov	r2,r4
    d0a8:	19a2b03a 	or	r17,r3,r6
    d0ac:	003fe306 	br	d03c <__alt_data_end+0xff00d03c>
    d0b0:	0011883a 	mov	r8,zero
    d0b4:	0005883a 	mov	r2,zero
    d0b8:	003e3f06 	br	c9b8 <__alt_data_end+0xff00c9b8>
    d0bc:	0401ffc4 	movi	r16,2047
    d0c0:	003e2506 	br	c958 <__alt_data_end+0xff00c958>
    d0c4:	0013883a 	mov	r9,zero
    d0c8:	003f8406 	br	cedc <__alt_data_end+0xff00cedc>
    d0cc:	0005883a 	mov	r2,zero
    d0d0:	0007883a 	mov	r3,zero
    d0d4:	003e8906 	br	cafc <__alt_data_end+0xff00cafc>
    d0d8:	197ff804 	addi	r5,r3,-32
    d0dc:	01000804 	movi	r4,32
    d0e0:	414ad83a 	srl	r5,r8,r5
    d0e4:	19002426 	beq	r3,r4,d178 <__adddf3+0x89c>
    d0e8:	01001004 	movi	r4,64
    d0ec:	20c7c83a 	sub	r3,r4,r3
    d0f0:	40c6983a 	sll	r3,r8,r3
    d0f4:	1c46b03a 	or	r3,r3,r17
    d0f8:	1806c03a 	cmpne	r3,r3,zero
    d0fc:	28e2b03a 	or	r17,r5,r3
    d100:	0007883a 	mov	r3,zero
    d104:	003f2306 	br	cd94 <__alt_data_end+0xff00cd94>
    d108:	0007883a 	mov	r3,zero
    d10c:	5811883a 	mov	r8,r11
    d110:	00bfffc4 	movi	r2,-1
    d114:	0401ffc4 	movi	r16,2047
    d118:	003e7806 	br	cafc <__alt_data_end+0xff00cafc>
    d11c:	4462b03a 	or	r17,r8,r17
    d120:	8822c03a 	cmpne	r17,r17,zero
    d124:	0009883a 	mov	r4,zero
    d128:	003fa006 	br	cfac <__alt_data_end+0xff00cfac>
    d12c:	4811883a 	mov	r8,r9
    d130:	3023883a 	mov	r17,r6
    d134:	0401ffc4 	movi	r16,2047
    d138:	003e0706 	br	c958 <__alt_data_end+0xff00c958>
    d13c:	4811883a 	mov	r8,r9
    d140:	3023883a 	mov	r17,r6
    d144:	003e0406 	br	c958 <__alt_data_end+0xff00c958>
    d148:	21fff804 	addi	r7,r4,-32
    d14c:	01400804 	movi	r5,32
    d150:	41ced83a 	srl	r7,r8,r7
    d154:	21400a26 	beq	r4,r5,d180 <__adddf3+0x8a4>
    d158:	01401004 	movi	r5,64
    d15c:	2909c83a 	sub	r4,r5,r4
    d160:	4108983a 	sll	r4,r8,r4
    d164:	2448b03a 	or	r4,r4,r17
    d168:	2008c03a 	cmpne	r4,r4,zero
    d16c:	3922b03a 	or	r17,r7,r4
    d170:	0009883a 	mov	r4,zero
    d174:	003f8d06 	br	cfac <__alt_data_end+0xff00cfac>
    d178:	0007883a 	mov	r3,zero
    d17c:	003fdd06 	br	d0f4 <__alt_data_end+0xff00d0f4>
    d180:	0009883a 	mov	r4,zero
    d184:	003ff706 	br	d164 <__alt_data_end+0xff00d164>

0000d188 <__eqdf2>:
    d188:	2804d53a 	srli	r2,r5,20
    d18c:	3806d53a 	srli	r3,r7,20
    d190:	02000434 	movhi	r8,16
    d194:	423fffc4 	addi	r8,r8,-1
    d198:	1081ffcc 	andi	r2,r2,2047
    d19c:	0281ffc4 	movi	r10,2047
    d1a0:	2a12703a 	and	r9,r5,r8
    d1a4:	18c1ffcc 	andi	r3,r3,2047
    d1a8:	3a10703a 	and	r8,r7,r8
    d1ac:	280ad7fa 	srli	r5,r5,31
    d1b0:	380ed7fa 	srli	r7,r7,31
    d1b4:	12801026 	beq	r2,r10,d1f8 <__eqdf2+0x70>
    d1b8:	0281ffc4 	movi	r10,2047
    d1bc:	1a800a26 	beq	r3,r10,d1e8 <__eqdf2+0x60>
    d1c0:	10c00226 	beq	r2,r3,d1cc <__eqdf2+0x44>
    d1c4:	00800044 	movi	r2,1
    d1c8:	f800283a 	ret
    d1cc:	4a3ffd1e 	bne	r9,r8,d1c4 <__alt_data_end+0xff00d1c4>
    d1d0:	21bffc1e 	bne	r4,r6,d1c4 <__alt_data_end+0xff00d1c4>
    d1d4:	29c00c26 	beq	r5,r7,d208 <__eqdf2+0x80>
    d1d8:	103ffa1e 	bne	r2,zero,d1c4 <__alt_data_end+0xff00d1c4>
    d1dc:	2244b03a 	or	r2,r4,r9
    d1e0:	1004c03a 	cmpne	r2,r2,zero
    d1e4:	f800283a 	ret
    d1e8:	3214b03a 	or	r10,r6,r8
    d1ec:	503ff426 	beq	r10,zero,d1c0 <__alt_data_end+0xff00d1c0>
    d1f0:	00800044 	movi	r2,1
    d1f4:	f800283a 	ret
    d1f8:	2254b03a 	or	r10,r4,r9
    d1fc:	503fee26 	beq	r10,zero,d1b8 <__alt_data_end+0xff00d1b8>
    d200:	00800044 	movi	r2,1
    d204:	f800283a 	ret
    d208:	0005883a 	mov	r2,zero
    d20c:	f800283a 	ret

0000d210 <__gedf2>:
    d210:	2804d53a 	srli	r2,r5,20
    d214:	3806d53a 	srli	r3,r7,20
    d218:	02000434 	movhi	r8,16
    d21c:	423fffc4 	addi	r8,r8,-1
    d220:	1081ffcc 	andi	r2,r2,2047
    d224:	0241ffc4 	movi	r9,2047
    d228:	2a14703a 	and	r10,r5,r8
    d22c:	18c1ffcc 	andi	r3,r3,2047
    d230:	3a10703a 	and	r8,r7,r8
    d234:	280ad7fa 	srli	r5,r5,31
    d238:	380ed7fa 	srli	r7,r7,31
    d23c:	12401d26 	beq	r2,r9,d2b4 <__gedf2+0xa4>
    d240:	0241ffc4 	movi	r9,2047
    d244:	1a401226 	beq	r3,r9,d290 <__gedf2+0x80>
    d248:	1000081e 	bne	r2,zero,d26c <__gedf2+0x5c>
    d24c:	2296b03a 	or	r11,r4,r10
    d250:	5813003a 	cmpeq	r9,r11,zero
    d254:	1800091e 	bne	r3,zero,d27c <__gedf2+0x6c>
    d258:	3218b03a 	or	r12,r6,r8
    d25c:	6000071e 	bne	r12,zero,d27c <__gedf2+0x6c>
    d260:	0005883a 	mov	r2,zero
    d264:	5800101e 	bne	r11,zero,d2a8 <__gedf2+0x98>
    d268:	f800283a 	ret
    d26c:	18000c1e 	bne	r3,zero,d2a0 <__gedf2+0x90>
    d270:	3212b03a 	or	r9,r6,r8
    d274:	48000c26 	beq	r9,zero,d2a8 <__gedf2+0x98>
    d278:	0013883a 	mov	r9,zero
    d27c:	39c03fcc 	andi	r7,r7,255
    d280:	48000826 	beq	r9,zero,d2a4 <__gedf2+0x94>
    d284:	38000926 	beq	r7,zero,d2ac <__gedf2+0x9c>
    d288:	00800044 	movi	r2,1
    d28c:	f800283a 	ret
    d290:	3212b03a 	or	r9,r6,r8
    d294:	483fec26 	beq	r9,zero,d248 <__alt_data_end+0xff00d248>
    d298:	00bfff84 	movi	r2,-2
    d29c:	f800283a 	ret
    d2a0:	39c03fcc 	andi	r7,r7,255
    d2a4:	29c00626 	beq	r5,r7,d2c0 <__gedf2+0xb0>
    d2a8:	283ff726 	beq	r5,zero,d288 <__alt_data_end+0xff00d288>
    d2ac:	00bfffc4 	movi	r2,-1
    d2b0:	f800283a 	ret
    d2b4:	2292b03a 	or	r9,r4,r10
    d2b8:	483fe126 	beq	r9,zero,d240 <__alt_data_end+0xff00d240>
    d2bc:	003ff606 	br	d298 <__alt_data_end+0xff00d298>
    d2c0:	18bff916 	blt	r3,r2,d2a8 <__alt_data_end+0xff00d2a8>
    d2c4:	10c00316 	blt	r2,r3,d2d4 <__gedf2+0xc4>
    d2c8:	42bff736 	bltu	r8,r10,d2a8 <__alt_data_end+0xff00d2a8>
    d2cc:	52000326 	beq	r10,r8,d2dc <__gedf2+0xcc>
    d2d0:	5200042e 	bgeu	r10,r8,d2e4 <__gedf2+0xd4>
    d2d4:	283fec1e 	bne	r5,zero,d288 <__alt_data_end+0xff00d288>
    d2d8:	003ff406 	br	d2ac <__alt_data_end+0xff00d2ac>
    d2dc:	313ff236 	bltu	r6,r4,d2a8 <__alt_data_end+0xff00d2a8>
    d2e0:	21bffc36 	bltu	r4,r6,d2d4 <__alt_data_end+0xff00d2d4>
    d2e4:	0005883a 	mov	r2,zero
    d2e8:	f800283a 	ret

0000d2ec <__ledf2>:
    d2ec:	2804d53a 	srli	r2,r5,20
    d2f0:	3810d53a 	srli	r8,r7,20
    d2f4:	00c00434 	movhi	r3,16
    d2f8:	18ffffc4 	addi	r3,r3,-1
    d2fc:	1081ffcc 	andi	r2,r2,2047
    d300:	0241ffc4 	movi	r9,2047
    d304:	28d4703a 	and	r10,r5,r3
    d308:	4201ffcc 	andi	r8,r8,2047
    d30c:	38c6703a 	and	r3,r7,r3
    d310:	280ad7fa 	srli	r5,r5,31
    d314:	380ed7fa 	srli	r7,r7,31
    d318:	12401f26 	beq	r2,r9,d398 <__ledf2+0xac>
    d31c:	0241ffc4 	movi	r9,2047
    d320:	42401426 	beq	r8,r9,d374 <__ledf2+0x88>
    d324:	1000091e 	bne	r2,zero,d34c <__ledf2+0x60>
    d328:	2296b03a 	or	r11,r4,r10
    d32c:	5813003a 	cmpeq	r9,r11,zero
    d330:	29403fcc 	andi	r5,r5,255
    d334:	40000a1e 	bne	r8,zero,d360 <__ledf2+0x74>
    d338:	30d8b03a 	or	r12,r6,r3
    d33c:	6000081e 	bne	r12,zero,d360 <__ledf2+0x74>
    d340:	0005883a 	mov	r2,zero
    d344:	5800111e 	bne	r11,zero,d38c <__ledf2+0xa0>
    d348:	f800283a 	ret
    d34c:	29403fcc 	andi	r5,r5,255
    d350:	40000c1e 	bne	r8,zero,d384 <__ledf2+0x98>
    d354:	30d2b03a 	or	r9,r6,r3
    d358:	48000c26 	beq	r9,zero,d38c <__ledf2+0xa0>
    d35c:	0013883a 	mov	r9,zero
    d360:	39c03fcc 	andi	r7,r7,255
    d364:	48000826 	beq	r9,zero,d388 <__ledf2+0x9c>
    d368:	38001126 	beq	r7,zero,d3b0 <__ledf2+0xc4>
    d36c:	00800044 	movi	r2,1
    d370:	f800283a 	ret
    d374:	30d2b03a 	or	r9,r6,r3
    d378:	483fea26 	beq	r9,zero,d324 <__alt_data_end+0xff00d324>
    d37c:	00800084 	movi	r2,2
    d380:	f800283a 	ret
    d384:	39c03fcc 	andi	r7,r7,255
    d388:	39400726 	beq	r7,r5,d3a8 <__ledf2+0xbc>
    d38c:	2800081e 	bne	r5,zero,d3b0 <__ledf2+0xc4>
    d390:	00800044 	movi	r2,1
    d394:	f800283a 	ret
    d398:	2292b03a 	or	r9,r4,r10
    d39c:	483fdf26 	beq	r9,zero,d31c <__alt_data_end+0xff00d31c>
    d3a0:	00800084 	movi	r2,2
    d3a4:	f800283a 	ret
    d3a8:	4080030e 	bge	r8,r2,d3b8 <__ledf2+0xcc>
    d3ac:	383fef26 	beq	r7,zero,d36c <__alt_data_end+0xff00d36c>
    d3b0:	00bfffc4 	movi	r2,-1
    d3b4:	f800283a 	ret
    d3b8:	123feb16 	blt	r2,r8,d368 <__alt_data_end+0xff00d368>
    d3bc:	1abff336 	bltu	r3,r10,d38c <__alt_data_end+0xff00d38c>
    d3c0:	50c00326 	beq	r10,r3,d3d0 <__ledf2+0xe4>
    d3c4:	50c0042e 	bgeu	r10,r3,d3d8 <__ledf2+0xec>
    d3c8:	283fe81e 	bne	r5,zero,d36c <__alt_data_end+0xff00d36c>
    d3cc:	003ff806 	br	d3b0 <__alt_data_end+0xff00d3b0>
    d3d0:	313fee36 	bltu	r6,r4,d38c <__alt_data_end+0xff00d38c>
    d3d4:	21bffc36 	bltu	r4,r6,d3c8 <__alt_data_end+0xff00d3c8>
    d3d8:	0005883a 	mov	r2,zero
    d3dc:	f800283a 	ret

0000d3e0 <__muldf3>:
    d3e0:	defff304 	addi	sp,sp,-52
    d3e4:	2804d53a 	srli	r2,r5,20
    d3e8:	dd800915 	stw	r22,36(sp)
    d3ec:	282cd7fa 	srli	r22,r5,31
    d3f0:	dc000315 	stw	r16,12(sp)
    d3f4:	04000434 	movhi	r16,16
    d3f8:	dd400815 	stw	r21,32(sp)
    d3fc:	dc800515 	stw	r18,20(sp)
    d400:	843fffc4 	addi	r16,r16,-1
    d404:	dfc00c15 	stw	ra,48(sp)
    d408:	df000b15 	stw	fp,44(sp)
    d40c:	ddc00a15 	stw	r23,40(sp)
    d410:	dd000715 	stw	r20,28(sp)
    d414:	dcc00615 	stw	r19,24(sp)
    d418:	dc400415 	stw	r17,16(sp)
    d41c:	1481ffcc 	andi	r18,r2,2047
    d420:	2c20703a 	and	r16,r5,r16
    d424:	b02b883a 	mov	r21,r22
    d428:	b2403fcc 	andi	r9,r22,255
    d42c:	90006026 	beq	r18,zero,d5b0 <__muldf3+0x1d0>
    d430:	0081ffc4 	movi	r2,2047
    d434:	2029883a 	mov	r20,r4
    d438:	90803626 	beq	r18,r2,d514 <__muldf3+0x134>
    d43c:	80800434 	orhi	r2,r16,16
    d440:	100490fa 	slli	r2,r2,3
    d444:	2020d77a 	srli	r16,r4,29
    d448:	202890fa 	slli	r20,r4,3
    d44c:	94bf0044 	addi	r18,r18,-1023
    d450:	80a0b03a 	or	r16,r16,r2
    d454:	0027883a 	mov	r19,zero
    d458:	0039883a 	mov	fp,zero
    d45c:	3804d53a 	srli	r2,r7,20
    d460:	382ed7fa 	srli	r23,r7,31
    d464:	04400434 	movhi	r17,16
    d468:	8c7fffc4 	addi	r17,r17,-1
    d46c:	1081ffcc 	andi	r2,r2,2047
    d470:	3011883a 	mov	r8,r6
    d474:	3c62703a 	and	r17,r7,r17
    d478:	ba803fcc 	andi	r10,r23,255
    d47c:	10006d26 	beq	r2,zero,d634 <__muldf3+0x254>
    d480:	00c1ffc4 	movi	r3,2047
    d484:	10c06526 	beq	r2,r3,d61c <__muldf3+0x23c>
    d488:	88c00434 	orhi	r3,r17,16
    d48c:	180690fa 	slli	r3,r3,3
    d490:	3022d77a 	srli	r17,r6,29
    d494:	301090fa 	slli	r8,r6,3
    d498:	10bf0044 	addi	r2,r2,-1023
    d49c:	88e2b03a 	or	r17,r17,r3
    d4a0:	000b883a 	mov	r5,zero
    d4a4:	9085883a 	add	r2,r18,r2
    d4a8:	2cc8b03a 	or	r4,r5,r19
    d4ac:	00c003c4 	movi	r3,15
    d4b0:	bdacf03a 	xor	r22,r23,r22
    d4b4:	12c00044 	addi	r11,r2,1
    d4b8:	19009936 	bltu	r3,r4,d720 <__muldf3+0x340>
    d4bc:	200890ba 	slli	r4,r4,2
    d4c0:	00c00074 	movhi	r3,1
    d4c4:	18f53504 	addi	r3,r3,-11052
    d4c8:	20c9883a 	add	r4,r4,r3
    d4cc:	20c00017 	ldw	r3,0(r4)
    d4d0:	1800683a 	jmp	r3
    d4d4:	0000d720 	cmpeqi	zero,zero,860
    d4d8:	0000d534 	movhi	zero,852
    d4dc:	0000d534 	movhi	zero,852
    d4e0:	0000d530 	cmpltui	zero,zero,852
    d4e4:	0000d6fc 	xorhi	zero,zero,859
    d4e8:	0000d6fc 	xorhi	zero,zero,859
    d4ec:	0000d6e4 	muli	zero,zero,859
    d4f0:	0000d530 	cmpltui	zero,zero,852
    d4f4:	0000d6fc 	xorhi	zero,zero,859
    d4f8:	0000d6e4 	muli	zero,zero,859
    d4fc:	0000d6fc 	xorhi	zero,zero,859
    d500:	0000d530 	cmpltui	zero,zero,852
    d504:	0000d70c 	andi	zero,zero,860
    d508:	0000d70c 	andi	zero,zero,860
    d50c:	0000d70c 	andi	zero,zero,860
    d510:	0000d928 	cmpgeui	zero,zero,868
    d514:	2404b03a 	or	r2,r4,r16
    d518:	10006f1e 	bne	r2,zero,d6d8 <__muldf3+0x2f8>
    d51c:	04c00204 	movi	r19,8
    d520:	0021883a 	mov	r16,zero
    d524:	0029883a 	mov	r20,zero
    d528:	07000084 	movi	fp,2
    d52c:	003fcb06 	br	d45c <__alt_data_end+0xff00d45c>
    d530:	502d883a 	mov	r22,r10
    d534:	00800084 	movi	r2,2
    d538:	28805726 	beq	r5,r2,d698 <__muldf3+0x2b8>
    d53c:	008000c4 	movi	r2,3
    d540:	28816626 	beq	r5,r2,dadc <__muldf3+0x6fc>
    d544:	00800044 	movi	r2,1
    d548:	2881411e 	bne	r5,r2,da50 <__muldf3+0x670>
    d54c:	b02b883a 	mov	r21,r22
    d550:	0005883a 	mov	r2,zero
    d554:	000b883a 	mov	r5,zero
    d558:	0029883a 	mov	r20,zero
    d55c:	1004953a 	slli	r2,r2,20
    d560:	a8c03fcc 	andi	r3,r21,255
    d564:	04400434 	movhi	r17,16
    d568:	8c7fffc4 	addi	r17,r17,-1
    d56c:	180697fa 	slli	r3,r3,31
    d570:	2c4a703a 	and	r5,r5,r17
    d574:	288ab03a 	or	r5,r5,r2
    d578:	28c6b03a 	or	r3,r5,r3
    d57c:	a005883a 	mov	r2,r20
    d580:	dfc00c17 	ldw	ra,48(sp)
    d584:	df000b17 	ldw	fp,44(sp)
    d588:	ddc00a17 	ldw	r23,40(sp)
    d58c:	dd800917 	ldw	r22,36(sp)
    d590:	dd400817 	ldw	r21,32(sp)
    d594:	dd000717 	ldw	r20,28(sp)
    d598:	dcc00617 	ldw	r19,24(sp)
    d59c:	dc800517 	ldw	r18,20(sp)
    d5a0:	dc400417 	ldw	r17,16(sp)
    d5a4:	dc000317 	ldw	r16,12(sp)
    d5a8:	dec00d04 	addi	sp,sp,52
    d5ac:	f800283a 	ret
    d5b0:	2404b03a 	or	r2,r4,r16
    d5b4:	2027883a 	mov	r19,r4
    d5b8:	10004226 	beq	r2,zero,d6c4 <__muldf3+0x2e4>
    d5bc:	8000fc26 	beq	r16,zero,d9b0 <__muldf3+0x5d0>
    d5c0:	8009883a 	mov	r4,r16
    d5c4:	d9800215 	stw	r6,8(sp)
    d5c8:	d9c00015 	stw	r7,0(sp)
    d5cc:	da400115 	stw	r9,4(sp)
    d5d0:	000274c0 	call	274c <__clzsi2>
    d5d4:	d9800217 	ldw	r6,8(sp)
    d5d8:	d9c00017 	ldw	r7,0(sp)
    d5dc:	da400117 	ldw	r9,4(sp)
    d5e0:	113ffd44 	addi	r4,r2,-11
    d5e4:	00c00704 	movi	r3,28
    d5e8:	1900ed16 	blt	r3,r4,d9a0 <__muldf3+0x5c0>
    d5ec:	00c00744 	movi	r3,29
    d5f0:	147ffe04 	addi	r17,r2,-8
    d5f4:	1907c83a 	sub	r3,r3,r4
    d5f8:	8460983a 	sll	r16,r16,r17
    d5fc:	98c6d83a 	srl	r3,r19,r3
    d600:	9c68983a 	sll	r20,r19,r17
    d604:	1c20b03a 	or	r16,r3,r16
    d608:	1080fcc4 	addi	r2,r2,1011
    d60c:	00a5c83a 	sub	r18,zero,r2
    d610:	0027883a 	mov	r19,zero
    d614:	0039883a 	mov	fp,zero
    d618:	003f9006 	br	d45c <__alt_data_end+0xff00d45c>
    d61c:	3446b03a 	or	r3,r6,r17
    d620:	1800261e 	bne	r3,zero,d6bc <__muldf3+0x2dc>
    d624:	0023883a 	mov	r17,zero
    d628:	0011883a 	mov	r8,zero
    d62c:	01400084 	movi	r5,2
    d630:	003f9c06 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d634:	3446b03a 	or	r3,r6,r17
    d638:	18001c26 	beq	r3,zero,d6ac <__muldf3+0x2cc>
    d63c:	8800ce26 	beq	r17,zero,d978 <__muldf3+0x598>
    d640:	8809883a 	mov	r4,r17
    d644:	d9800215 	stw	r6,8(sp)
    d648:	da400115 	stw	r9,4(sp)
    d64c:	da800015 	stw	r10,0(sp)
    d650:	000274c0 	call	274c <__clzsi2>
    d654:	d9800217 	ldw	r6,8(sp)
    d658:	da400117 	ldw	r9,4(sp)
    d65c:	da800017 	ldw	r10,0(sp)
    d660:	113ffd44 	addi	r4,r2,-11
    d664:	00c00704 	movi	r3,28
    d668:	1900bf16 	blt	r3,r4,d968 <__muldf3+0x588>
    d66c:	00c00744 	movi	r3,29
    d670:	123ffe04 	addi	r8,r2,-8
    d674:	1907c83a 	sub	r3,r3,r4
    d678:	8a22983a 	sll	r17,r17,r8
    d67c:	30c6d83a 	srl	r3,r6,r3
    d680:	3210983a 	sll	r8,r6,r8
    d684:	1c62b03a 	or	r17,r3,r17
    d688:	1080fcc4 	addi	r2,r2,1011
    d68c:	0085c83a 	sub	r2,zero,r2
    d690:	000b883a 	mov	r5,zero
    d694:	003f8306 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d698:	b02b883a 	mov	r21,r22
    d69c:	0081ffc4 	movi	r2,2047
    d6a0:	000b883a 	mov	r5,zero
    d6a4:	0029883a 	mov	r20,zero
    d6a8:	003fac06 	br	d55c <__alt_data_end+0xff00d55c>
    d6ac:	0023883a 	mov	r17,zero
    d6b0:	0011883a 	mov	r8,zero
    d6b4:	01400044 	movi	r5,1
    d6b8:	003f7a06 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d6bc:	014000c4 	movi	r5,3
    d6c0:	003f7806 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d6c4:	04c00104 	movi	r19,4
    d6c8:	0021883a 	mov	r16,zero
    d6cc:	0029883a 	mov	r20,zero
    d6d0:	07000044 	movi	fp,1
    d6d4:	003f6106 	br	d45c <__alt_data_end+0xff00d45c>
    d6d8:	04c00304 	movi	r19,12
    d6dc:	070000c4 	movi	fp,3
    d6e0:	003f5e06 	br	d45c <__alt_data_end+0xff00d45c>
    d6e4:	01400434 	movhi	r5,16
    d6e8:	002b883a 	mov	r21,zero
    d6ec:	297fffc4 	addi	r5,r5,-1
    d6f0:	053fffc4 	movi	r20,-1
    d6f4:	0081ffc4 	movi	r2,2047
    d6f8:	003f9806 	br	d55c <__alt_data_end+0xff00d55c>
    d6fc:	8023883a 	mov	r17,r16
    d700:	a011883a 	mov	r8,r20
    d704:	e00b883a 	mov	r5,fp
    d708:	003f8a06 	br	d534 <__alt_data_end+0xff00d534>
    d70c:	8023883a 	mov	r17,r16
    d710:	a011883a 	mov	r8,r20
    d714:	482d883a 	mov	r22,r9
    d718:	e00b883a 	mov	r5,fp
    d71c:	003f8506 	br	d534 <__alt_data_end+0xff00d534>
    d720:	a00ad43a 	srli	r5,r20,16
    d724:	401ad43a 	srli	r13,r8,16
    d728:	a53fffcc 	andi	r20,r20,65535
    d72c:	423fffcc 	andi	r8,r8,65535
    d730:	4519383a 	mul	r12,r8,r20
    d734:	4147383a 	mul	r3,r8,r5
    d738:	6d09383a 	mul	r4,r13,r20
    d73c:	600cd43a 	srli	r6,r12,16
    d740:	2b5d383a 	mul	r14,r5,r13
    d744:	20c9883a 	add	r4,r4,r3
    d748:	310d883a 	add	r6,r6,r4
    d74c:	30c0022e 	bgeu	r6,r3,d758 <__muldf3+0x378>
    d750:	00c00074 	movhi	r3,1
    d754:	70dd883a 	add	r14,r14,r3
    d758:	8826d43a 	srli	r19,r17,16
    d75c:	8bffffcc 	andi	r15,r17,65535
    d760:	7d23383a 	mul	r17,r15,r20
    d764:	7949383a 	mul	r4,r15,r5
    d768:	9d29383a 	mul	r20,r19,r20
    d76c:	8814d43a 	srli	r10,r17,16
    d770:	3012943a 	slli	r9,r6,16
    d774:	a129883a 	add	r20,r20,r4
    d778:	633fffcc 	andi	r12,r12,65535
    d77c:	5515883a 	add	r10,r10,r20
    d780:	3006d43a 	srli	r3,r6,16
    d784:	4b13883a 	add	r9,r9,r12
    d788:	2ccb383a 	mul	r5,r5,r19
    d78c:	5100022e 	bgeu	r10,r4,d798 <__muldf3+0x3b8>
    d790:	01000074 	movhi	r4,1
    d794:	290b883a 	add	r5,r5,r4
    d798:	802ad43a 	srli	r21,r16,16
    d79c:	843fffcc 	andi	r16,r16,65535
    d7a0:	440d383a 	mul	r6,r8,r16
    d7a4:	4565383a 	mul	r18,r8,r21
    d7a8:	8349383a 	mul	r4,r16,r13
    d7ac:	500e943a 	slli	r7,r10,16
    d7b0:	3010d43a 	srli	r8,r6,16
    d7b4:	5028d43a 	srli	r20,r10,16
    d7b8:	2489883a 	add	r4,r4,r18
    d7bc:	8abfffcc 	andi	r10,r17,65535
    d7c0:	3a95883a 	add	r10,r7,r10
    d7c4:	4119883a 	add	r12,r8,r4
    d7c8:	a169883a 	add	r20,r20,r5
    d7cc:	1a87883a 	add	r3,r3,r10
    d7d0:	6d5b383a 	mul	r13,r13,r21
    d7d4:	6480022e 	bgeu	r12,r18,d7e0 <__muldf3+0x400>
    d7d8:	01000074 	movhi	r4,1
    d7dc:	691b883a 	add	r13,r13,r4
    d7e0:	7c25383a 	mul	r18,r15,r16
    d7e4:	7d4b383a 	mul	r5,r15,r21
    d7e8:	84cf383a 	mul	r7,r16,r19
    d7ec:	901ed43a 	srli	r15,r18,16
    d7f0:	6008d43a 	srli	r4,r12,16
    d7f4:	6010943a 	slli	r8,r12,16
    d7f8:	394f883a 	add	r7,r7,r5
    d7fc:	333fffcc 	andi	r12,r6,65535
    d800:	79df883a 	add	r15,r15,r7
    d804:	235b883a 	add	r13,r4,r13
    d808:	9d63383a 	mul	r17,r19,r21
    d80c:	4309883a 	add	r4,r8,r12
    d810:	7940022e 	bgeu	r15,r5,d81c <__muldf3+0x43c>
    d814:	01400074 	movhi	r5,1
    d818:	8963883a 	add	r17,r17,r5
    d81c:	780a943a 	slli	r5,r15,16
    d820:	91bfffcc 	andi	r6,r18,65535
    d824:	70c7883a 	add	r3,r14,r3
    d828:	298d883a 	add	r6,r5,r6
    d82c:	1a8f803a 	cmpltu	r7,r3,r10
    d830:	350b883a 	add	r5,r6,r20
    d834:	20c7883a 	add	r3,r4,r3
    d838:	3955883a 	add	r10,r7,r5
    d83c:	1909803a 	cmpltu	r4,r3,r4
    d840:	6a91883a 	add	r8,r13,r10
    d844:	780cd43a 	srli	r6,r15,16
    d848:	2219883a 	add	r12,r4,r8
    d84c:	2d0b803a 	cmpltu	r5,r5,r20
    d850:	51cf803a 	cmpltu	r7,r10,r7
    d854:	29ceb03a 	or	r7,r5,r7
    d858:	4351803a 	cmpltu	r8,r8,r13
    d85c:	610b803a 	cmpltu	r5,r12,r4
    d860:	4148b03a 	or	r4,r8,r5
    d864:	398f883a 	add	r7,r7,r6
    d868:	3909883a 	add	r4,r7,r4
    d86c:	1810927a 	slli	r8,r3,9
    d870:	2449883a 	add	r4,r4,r17
    d874:	2008927a 	slli	r4,r4,9
    d878:	6022d5fa 	srli	r17,r12,23
    d87c:	1806d5fa 	srli	r3,r3,23
    d880:	4252b03a 	or	r9,r8,r9
    d884:	600a927a 	slli	r5,r12,9
    d888:	4810c03a 	cmpne	r8,r9,zero
    d88c:	2462b03a 	or	r17,r4,r17
    d890:	40c6b03a 	or	r3,r8,r3
    d894:	8900402c 	andhi	r4,r17,256
    d898:	1950b03a 	or	r8,r3,r5
    d89c:	20000726 	beq	r4,zero,d8bc <__muldf3+0x4dc>
    d8a0:	4006d07a 	srli	r3,r8,1
    d8a4:	880497fa 	slli	r2,r17,31
    d8a8:	4200004c 	andi	r8,r8,1
    d8ac:	8822d07a 	srli	r17,r17,1
    d8b0:	1a10b03a 	or	r8,r3,r8
    d8b4:	1210b03a 	or	r8,r2,r8
    d8b8:	5805883a 	mov	r2,r11
    d8bc:	1140ffc4 	addi	r5,r2,1023
    d8c0:	0140440e 	bge	zero,r5,d9d4 <__muldf3+0x5f4>
    d8c4:	40c001cc 	andi	r3,r8,7
    d8c8:	18000726 	beq	r3,zero,d8e8 <__muldf3+0x508>
    d8cc:	40c003cc 	andi	r3,r8,15
    d8d0:	01000104 	movi	r4,4
    d8d4:	19000426 	beq	r3,r4,d8e8 <__muldf3+0x508>
    d8d8:	4107883a 	add	r3,r8,r4
    d8dc:	1a11803a 	cmpltu	r8,r3,r8
    d8e0:	8a23883a 	add	r17,r17,r8
    d8e4:	1811883a 	mov	r8,r3
    d8e8:	88c0402c 	andhi	r3,r17,256
    d8ec:	18000426 	beq	r3,zero,d900 <__muldf3+0x520>
    d8f0:	11410004 	addi	r5,r2,1024
    d8f4:	00bfc034 	movhi	r2,65280
    d8f8:	10bfffc4 	addi	r2,r2,-1
    d8fc:	88a2703a 	and	r17,r17,r2
    d900:	0081ff84 	movi	r2,2046
    d904:	117f6416 	blt	r2,r5,d698 <__alt_data_end+0xff00d698>
    d908:	8828977a 	slli	r20,r17,29
    d90c:	4010d0fa 	srli	r8,r8,3
    d910:	8822927a 	slli	r17,r17,9
    d914:	2881ffcc 	andi	r2,r5,2047
    d918:	a228b03a 	or	r20,r20,r8
    d91c:	880ad33a 	srli	r5,r17,12
    d920:	b02b883a 	mov	r21,r22
    d924:	003f0d06 	br	d55c <__alt_data_end+0xff00d55c>
    d928:	8080022c 	andhi	r2,r16,8
    d92c:	10000926 	beq	r2,zero,d954 <__muldf3+0x574>
    d930:	8880022c 	andhi	r2,r17,8
    d934:	1000071e 	bne	r2,zero,d954 <__muldf3+0x574>
    d938:	00800434 	movhi	r2,16
    d93c:	89400234 	orhi	r5,r17,8
    d940:	10bfffc4 	addi	r2,r2,-1
    d944:	b82b883a 	mov	r21,r23
    d948:	288a703a 	and	r5,r5,r2
    d94c:	4029883a 	mov	r20,r8
    d950:	003f6806 	br	d6f4 <__alt_data_end+0xff00d6f4>
    d954:	00800434 	movhi	r2,16
    d958:	81400234 	orhi	r5,r16,8
    d95c:	10bfffc4 	addi	r2,r2,-1
    d960:	288a703a 	and	r5,r5,r2
    d964:	003f6306 	br	d6f4 <__alt_data_end+0xff00d6f4>
    d968:	147ff604 	addi	r17,r2,-40
    d96c:	3462983a 	sll	r17,r6,r17
    d970:	0011883a 	mov	r8,zero
    d974:	003f4406 	br	d688 <__alt_data_end+0xff00d688>
    d978:	3009883a 	mov	r4,r6
    d97c:	d9800215 	stw	r6,8(sp)
    d980:	da400115 	stw	r9,4(sp)
    d984:	da800015 	stw	r10,0(sp)
    d988:	000274c0 	call	274c <__clzsi2>
    d98c:	10800804 	addi	r2,r2,32
    d990:	da800017 	ldw	r10,0(sp)
    d994:	da400117 	ldw	r9,4(sp)
    d998:	d9800217 	ldw	r6,8(sp)
    d99c:	003f3006 	br	d660 <__alt_data_end+0xff00d660>
    d9a0:	143ff604 	addi	r16,r2,-40
    d9a4:	9c20983a 	sll	r16,r19,r16
    d9a8:	0029883a 	mov	r20,zero
    d9ac:	003f1606 	br	d608 <__alt_data_end+0xff00d608>
    d9b0:	d9800215 	stw	r6,8(sp)
    d9b4:	d9c00015 	stw	r7,0(sp)
    d9b8:	da400115 	stw	r9,4(sp)
    d9bc:	000274c0 	call	274c <__clzsi2>
    d9c0:	10800804 	addi	r2,r2,32
    d9c4:	da400117 	ldw	r9,4(sp)
    d9c8:	d9c00017 	ldw	r7,0(sp)
    d9cc:	d9800217 	ldw	r6,8(sp)
    d9d0:	003f0306 	br	d5e0 <__alt_data_end+0xff00d5e0>
    d9d4:	00c00044 	movi	r3,1
    d9d8:	1947c83a 	sub	r3,r3,r5
    d9dc:	00800e04 	movi	r2,56
    d9e0:	10feda16 	blt	r2,r3,d54c <__alt_data_end+0xff00d54c>
    d9e4:	008007c4 	movi	r2,31
    d9e8:	10c01b16 	blt	r2,r3,da58 <__muldf3+0x678>
    d9ec:	00800804 	movi	r2,32
    d9f0:	10c5c83a 	sub	r2,r2,r3
    d9f4:	888a983a 	sll	r5,r17,r2
    d9f8:	40c8d83a 	srl	r4,r8,r3
    d9fc:	4084983a 	sll	r2,r8,r2
    da00:	88e2d83a 	srl	r17,r17,r3
    da04:	2906b03a 	or	r3,r5,r4
    da08:	1004c03a 	cmpne	r2,r2,zero
    da0c:	1886b03a 	or	r3,r3,r2
    da10:	188001cc 	andi	r2,r3,7
    da14:	10000726 	beq	r2,zero,da34 <__muldf3+0x654>
    da18:	188003cc 	andi	r2,r3,15
    da1c:	01000104 	movi	r4,4
    da20:	11000426 	beq	r2,r4,da34 <__muldf3+0x654>
    da24:	1805883a 	mov	r2,r3
    da28:	10c00104 	addi	r3,r2,4
    da2c:	1885803a 	cmpltu	r2,r3,r2
    da30:	88a3883a 	add	r17,r17,r2
    da34:	8880202c 	andhi	r2,r17,128
    da38:	10001c26 	beq	r2,zero,daac <__muldf3+0x6cc>
    da3c:	b02b883a 	mov	r21,r22
    da40:	00800044 	movi	r2,1
    da44:	000b883a 	mov	r5,zero
    da48:	0029883a 	mov	r20,zero
    da4c:	003ec306 	br	d55c <__alt_data_end+0xff00d55c>
    da50:	5805883a 	mov	r2,r11
    da54:	003f9906 	br	d8bc <__alt_data_end+0xff00d8bc>
    da58:	00bff844 	movi	r2,-31
    da5c:	1145c83a 	sub	r2,r2,r5
    da60:	8888d83a 	srl	r4,r17,r2
    da64:	00800804 	movi	r2,32
    da68:	18801a26 	beq	r3,r2,dad4 <__muldf3+0x6f4>
    da6c:	00801004 	movi	r2,64
    da70:	10c5c83a 	sub	r2,r2,r3
    da74:	8884983a 	sll	r2,r17,r2
    da78:	1204b03a 	or	r2,r2,r8
    da7c:	1004c03a 	cmpne	r2,r2,zero
    da80:	2084b03a 	or	r2,r4,r2
    da84:	144001cc 	andi	r17,r2,7
    da88:	88000d1e 	bne	r17,zero,dac0 <__muldf3+0x6e0>
    da8c:	000b883a 	mov	r5,zero
    da90:	1028d0fa 	srli	r20,r2,3
    da94:	b02b883a 	mov	r21,r22
    da98:	0005883a 	mov	r2,zero
    da9c:	a468b03a 	or	r20,r20,r17
    daa0:	003eae06 	br	d55c <__alt_data_end+0xff00d55c>
    daa4:	1007883a 	mov	r3,r2
    daa8:	0023883a 	mov	r17,zero
    daac:	880a927a 	slli	r5,r17,9
    dab0:	1805883a 	mov	r2,r3
    dab4:	8822977a 	slli	r17,r17,29
    dab8:	280ad33a 	srli	r5,r5,12
    dabc:	003ff406 	br	da90 <__alt_data_end+0xff00da90>
    dac0:	10c003cc 	andi	r3,r2,15
    dac4:	01000104 	movi	r4,4
    dac8:	193ff626 	beq	r3,r4,daa4 <__alt_data_end+0xff00daa4>
    dacc:	0023883a 	mov	r17,zero
    dad0:	003fd506 	br	da28 <__alt_data_end+0xff00da28>
    dad4:	0005883a 	mov	r2,zero
    dad8:	003fe706 	br	da78 <__alt_data_end+0xff00da78>
    dadc:	00800434 	movhi	r2,16
    dae0:	89400234 	orhi	r5,r17,8
    dae4:	10bfffc4 	addi	r2,r2,-1
    dae8:	b02b883a 	mov	r21,r22
    daec:	288a703a 	and	r5,r5,r2
    daf0:	4029883a 	mov	r20,r8
    daf4:	003eff06 	br	d6f4 <__alt_data_end+0xff00d6f4>

0000daf8 <__subdf3>:
    daf8:	02000434 	movhi	r8,16
    dafc:	423fffc4 	addi	r8,r8,-1
    db00:	defffb04 	addi	sp,sp,-20
    db04:	2a14703a 	and	r10,r5,r8
    db08:	3812d53a 	srli	r9,r7,20
    db0c:	3a10703a 	and	r8,r7,r8
    db10:	2006d77a 	srli	r3,r4,29
    db14:	3004d77a 	srli	r2,r6,29
    db18:	dc000015 	stw	r16,0(sp)
    db1c:	501490fa 	slli	r10,r10,3
    db20:	2820d53a 	srli	r16,r5,20
    db24:	401090fa 	slli	r8,r8,3
    db28:	dc800215 	stw	r18,8(sp)
    db2c:	dc400115 	stw	r17,4(sp)
    db30:	dfc00415 	stw	ra,16(sp)
    db34:	202290fa 	slli	r17,r4,3
    db38:	dcc00315 	stw	r19,12(sp)
    db3c:	4a41ffcc 	andi	r9,r9,2047
    db40:	0101ffc4 	movi	r4,2047
    db44:	2824d7fa 	srli	r18,r5,31
    db48:	8401ffcc 	andi	r16,r16,2047
    db4c:	50c6b03a 	or	r3,r10,r3
    db50:	380ed7fa 	srli	r7,r7,31
    db54:	408ab03a 	or	r5,r8,r2
    db58:	300c90fa 	slli	r6,r6,3
    db5c:	49009626 	beq	r9,r4,ddb8 <__subdf3+0x2c0>
    db60:	39c0005c 	xori	r7,r7,1
    db64:	8245c83a 	sub	r2,r16,r9
    db68:	3c807426 	beq	r7,r18,dd3c <__subdf3+0x244>
    db6c:	0080af0e 	bge	zero,r2,de2c <__subdf3+0x334>
    db70:	48002a1e 	bne	r9,zero,dc1c <__subdf3+0x124>
    db74:	2988b03a 	or	r4,r5,r6
    db78:	20009a1e 	bne	r4,zero,dde4 <__subdf3+0x2ec>
    db7c:	888001cc 	andi	r2,r17,7
    db80:	10000726 	beq	r2,zero,dba0 <__subdf3+0xa8>
    db84:	888003cc 	andi	r2,r17,15
    db88:	01000104 	movi	r4,4
    db8c:	11000426 	beq	r2,r4,dba0 <__subdf3+0xa8>
    db90:	890b883a 	add	r5,r17,r4
    db94:	2c63803a 	cmpltu	r17,r5,r17
    db98:	1c47883a 	add	r3,r3,r17
    db9c:	2823883a 	mov	r17,r5
    dba0:	1880202c 	andhi	r2,r3,128
    dba4:	10005926 	beq	r2,zero,dd0c <__subdf3+0x214>
    dba8:	84000044 	addi	r16,r16,1
    dbac:	0081ffc4 	movi	r2,2047
    dbb0:	8080be26 	beq	r16,r2,deac <__subdf3+0x3b4>
    dbb4:	017fe034 	movhi	r5,65408
    dbb8:	297fffc4 	addi	r5,r5,-1
    dbbc:	1946703a 	and	r3,r3,r5
    dbc0:	1804977a 	slli	r2,r3,29
    dbc4:	1806927a 	slli	r3,r3,9
    dbc8:	8822d0fa 	srli	r17,r17,3
    dbcc:	8401ffcc 	andi	r16,r16,2047
    dbd0:	180ad33a 	srli	r5,r3,12
    dbd4:	9100004c 	andi	r4,r18,1
    dbd8:	1444b03a 	or	r2,r2,r17
    dbdc:	80c1ffcc 	andi	r3,r16,2047
    dbe0:	1820953a 	slli	r16,r3,20
    dbe4:	20c03fcc 	andi	r3,r4,255
    dbe8:	180897fa 	slli	r4,r3,31
    dbec:	00c00434 	movhi	r3,16
    dbf0:	18ffffc4 	addi	r3,r3,-1
    dbf4:	28c6703a 	and	r3,r5,r3
    dbf8:	1c06b03a 	or	r3,r3,r16
    dbfc:	1906b03a 	or	r3,r3,r4
    dc00:	dfc00417 	ldw	ra,16(sp)
    dc04:	dcc00317 	ldw	r19,12(sp)
    dc08:	dc800217 	ldw	r18,8(sp)
    dc0c:	dc400117 	ldw	r17,4(sp)
    dc10:	dc000017 	ldw	r16,0(sp)
    dc14:	dec00504 	addi	sp,sp,20
    dc18:	f800283a 	ret
    dc1c:	0101ffc4 	movi	r4,2047
    dc20:	813fd626 	beq	r16,r4,db7c <__alt_data_end+0xff00db7c>
    dc24:	29402034 	orhi	r5,r5,128
    dc28:	01000e04 	movi	r4,56
    dc2c:	2080a316 	blt	r4,r2,debc <__subdf3+0x3c4>
    dc30:	010007c4 	movi	r4,31
    dc34:	2080c616 	blt	r4,r2,df50 <__subdf3+0x458>
    dc38:	01000804 	movi	r4,32
    dc3c:	2089c83a 	sub	r4,r4,r2
    dc40:	2910983a 	sll	r8,r5,r4
    dc44:	308ed83a 	srl	r7,r6,r2
    dc48:	3108983a 	sll	r4,r6,r4
    dc4c:	2884d83a 	srl	r2,r5,r2
    dc50:	41ccb03a 	or	r6,r8,r7
    dc54:	2008c03a 	cmpne	r4,r4,zero
    dc58:	310cb03a 	or	r6,r6,r4
    dc5c:	898dc83a 	sub	r6,r17,r6
    dc60:	89a3803a 	cmpltu	r17,r17,r6
    dc64:	1887c83a 	sub	r3,r3,r2
    dc68:	1c47c83a 	sub	r3,r3,r17
    dc6c:	3023883a 	mov	r17,r6
    dc70:	1880202c 	andhi	r2,r3,128
    dc74:	10002326 	beq	r2,zero,dd04 <__subdf3+0x20c>
    dc78:	04c02034 	movhi	r19,128
    dc7c:	9cffffc4 	addi	r19,r19,-1
    dc80:	1ce6703a 	and	r19,r3,r19
    dc84:	98007a26 	beq	r19,zero,de70 <__subdf3+0x378>
    dc88:	9809883a 	mov	r4,r19
    dc8c:	000274c0 	call	274c <__clzsi2>
    dc90:	113ffe04 	addi	r4,r2,-8
    dc94:	00c007c4 	movi	r3,31
    dc98:	19007b16 	blt	r3,r4,de88 <__subdf3+0x390>
    dc9c:	00800804 	movi	r2,32
    dca0:	1105c83a 	sub	r2,r2,r4
    dca4:	8884d83a 	srl	r2,r17,r2
    dca8:	9906983a 	sll	r3,r19,r4
    dcac:	8922983a 	sll	r17,r17,r4
    dcb0:	10c4b03a 	or	r2,r2,r3
    dcb4:	24007816 	blt	r4,r16,de98 <__subdf3+0x3a0>
    dcb8:	2421c83a 	sub	r16,r4,r16
    dcbc:	80c00044 	addi	r3,r16,1
    dcc0:	010007c4 	movi	r4,31
    dcc4:	20c09516 	blt	r4,r3,df1c <__subdf3+0x424>
    dcc8:	01400804 	movi	r5,32
    dccc:	28cbc83a 	sub	r5,r5,r3
    dcd0:	88c8d83a 	srl	r4,r17,r3
    dcd4:	8962983a 	sll	r17,r17,r5
    dcd8:	114a983a 	sll	r5,r2,r5
    dcdc:	10c6d83a 	srl	r3,r2,r3
    dce0:	8804c03a 	cmpne	r2,r17,zero
    dce4:	290ab03a 	or	r5,r5,r4
    dce8:	28a2b03a 	or	r17,r5,r2
    dcec:	0021883a 	mov	r16,zero
    dcf0:	003fa206 	br	db7c <__alt_data_end+0xff00db7c>
    dcf4:	2090b03a 	or	r8,r4,r2
    dcf8:	40018e26 	beq	r8,zero,e334 <__subdf3+0x83c>
    dcfc:	1007883a 	mov	r3,r2
    dd00:	2023883a 	mov	r17,r4
    dd04:	888001cc 	andi	r2,r17,7
    dd08:	103f9e1e 	bne	r2,zero,db84 <__alt_data_end+0xff00db84>
    dd0c:	1804977a 	slli	r2,r3,29
    dd10:	8822d0fa 	srli	r17,r17,3
    dd14:	1810d0fa 	srli	r8,r3,3
    dd18:	9100004c 	andi	r4,r18,1
    dd1c:	1444b03a 	or	r2,r2,r17
    dd20:	00c1ffc4 	movi	r3,2047
    dd24:	80c02826 	beq	r16,r3,ddc8 <__subdf3+0x2d0>
    dd28:	01400434 	movhi	r5,16
    dd2c:	297fffc4 	addi	r5,r5,-1
    dd30:	80e0703a 	and	r16,r16,r3
    dd34:	414a703a 	and	r5,r8,r5
    dd38:	003fa806 	br	dbdc <__alt_data_end+0xff00dbdc>
    dd3c:	0080630e 	bge	zero,r2,decc <__subdf3+0x3d4>
    dd40:	48003026 	beq	r9,zero,de04 <__subdf3+0x30c>
    dd44:	0101ffc4 	movi	r4,2047
    dd48:	813f8c26 	beq	r16,r4,db7c <__alt_data_end+0xff00db7c>
    dd4c:	29402034 	orhi	r5,r5,128
    dd50:	01000e04 	movi	r4,56
    dd54:	2080a90e 	bge	r4,r2,dffc <__subdf3+0x504>
    dd58:	298cb03a 	or	r6,r5,r6
    dd5c:	3012c03a 	cmpne	r9,r6,zero
    dd60:	0005883a 	mov	r2,zero
    dd64:	4c53883a 	add	r9,r9,r17
    dd68:	4c63803a 	cmpltu	r17,r9,r17
    dd6c:	10c7883a 	add	r3,r2,r3
    dd70:	88c7883a 	add	r3,r17,r3
    dd74:	4823883a 	mov	r17,r9
    dd78:	1880202c 	andhi	r2,r3,128
    dd7c:	1000d026 	beq	r2,zero,e0c0 <__subdf3+0x5c8>
    dd80:	84000044 	addi	r16,r16,1
    dd84:	0081ffc4 	movi	r2,2047
    dd88:	8080fe26 	beq	r16,r2,e184 <__subdf3+0x68c>
    dd8c:	00bfe034 	movhi	r2,65408
    dd90:	10bfffc4 	addi	r2,r2,-1
    dd94:	1886703a 	and	r3,r3,r2
    dd98:	880ad07a 	srli	r5,r17,1
    dd9c:	180497fa 	slli	r2,r3,31
    dda0:	8900004c 	andi	r4,r17,1
    dda4:	2922b03a 	or	r17,r5,r4
    dda8:	1806d07a 	srli	r3,r3,1
    ddac:	1462b03a 	or	r17,r2,r17
    ddb0:	3825883a 	mov	r18,r7
    ddb4:	003f7106 	br	db7c <__alt_data_end+0xff00db7c>
    ddb8:	2984b03a 	or	r2,r5,r6
    ddbc:	103f6826 	beq	r2,zero,db60 <__alt_data_end+0xff00db60>
    ddc0:	39c03fcc 	andi	r7,r7,255
    ddc4:	003f6706 	br	db64 <__alt_data_end+0xff00db64>
    ddc8:	4086b03a 	or	r3,r8,r2
    ddcc:	18015226 	beq	r3,zero,e318 <__subdf3+0x820>
    ddd0:	00c00434 	movhi	r3,16
    ddd4:	41400234 	orhi	r5,r8,8
    ddd8:	18ffffc4 	addi	r3,r3,-1
    dddc:	28ca703a 	and	r5,r5,r3
    dde0:	003f7e06 	br	dbdc <__alt_data_end+0xff00dbdc>
    dde4:	10bfffc4 	addi	r2,r2,-1
    dde8:	1000491e 	bne	r2,zero,df10 <__subdf3+0x418>
    ddec:	898fc83a 	sub	r7,r17,r6
    ddf0:	89e3803a 	cmpltu	r17,r17,r7
    ddf4:	1947c83a 	sub	r3,r3,r5
    ddf8:	1c47c83a 	sub	r3,r3,r17
    ddfc:	3823883a 	mov	r17,r7
    de00:	003f9b06 	br	dc70 <__alt_data_end+0xff00dc70>
    de04:	2988b03a 	or	r4,r5,r6
    de08:	203f5c26 	beq	r4,zero,db7c <__alt_data_end+0xff00db7c>
    de0c:	10bfffc4 	addi	r2,r2,-1
    de10:	1000931e 	bne	r2,zero,e060 <__subdf3+0x568>
    de14:	898d883a 	add	r6,r17,r6
    de18:	3463803a 	cmpltu	r17,r6,r17
    de1c:	1947883a 	add	r3,r3,r5
    de20:	88c7883a 	add	r3,r17,r3
    de24:	3023883a 	mov	r17,r6
    de28:	003fd306 	br	dd78 <__alt_data_end+0xff00dd78>
    de2c:	1000541e 	bne	r2,zero,df80 <__subdf3+0x488>
    de30:	80800044 	addi	r2,r16,1
    de34:	1081ffcc 	andi	r2,r2,2047
    de38:	01000044 	movi	r4,1
    de3c:	2080a20e 	bge	r4,r2,e0c8 <__subdf3+0x5d0>
    de40:	8989c83a 	sub	r4,r17,r6
    de44:	8905803a 	cmpltu	r2,r17,r4
    de48:	1967c83a 	sub	r19,r3,r5
    de4c:	98a7c83a 	sub	r19,r19,r2
    de50:	9880202c 	andhi	r2,r19,128
    de54:	10006326 	beq	r2,zero,dfe4 <__subdf3+0x4ec>
    de58:	3463c83a 	sub	r17,r6,r17
    de5c:	28c7c83a 	sub	r3,r5,r3
    de60:	344d803a 	cmpltu	r6,r6,r17
    de64:	19a7c83a 	sub	r19,r3,r6
    de68:	3825883a 	mov	r18,r7
    de6c:	983f861e 	bne	r19,zero,dc88 <__alt_data_end+0xff00dc88>
    de70:	8809883a 	mov	r4,r17
    de74:	000274c0 	call	274c <__clzsi2>
    de78:	10800804 	addi	r2,r2,32
    de7c:	113ffe04 	addi	r4,r2,-8
    de80:	00c007c4 	movi	r3,31
    de84:	193f850e 	bge	r3,r4,dc9c <__alt_data_end+0xff00dc9c>
    de88:	10bff604 	addi	r2,r2,-40
    de8c:	8884983a 	sll	r2,r17,r2
    de90:	0023883a 	mov	r17,zero
    de94:	243f880e 	bge	r4,r16,dcb8 <__alt_data_end+0xff00dcb8>
    de98:	00ffe034 	movhi	r3,65408
    de9c:	18ffffc4 	addi	r3,r3,-1
    dea0:	8121c83a 	sub	r16,r16,r4
    dea4:	10c6703a 	and	r3,r2,r3
    dea8:	003f3406 	br	db7c <__alt_data_end+0xff00db7c>
    deac:	9100004c 	andi	r4,r18,1
    deb0:	000b883a 	mov	r5,zero
    deb4:	0005883a 	mov	r2,zero
    deb8:	003f4806 	br	dbdc <__alt_data_end+0xff00dbdc>
    debc:	298cb03a 	or	r6,r5,r6
    dec0:	300cc03a 	cmpne	r6,r6,zero
    dec4:	0005883a 	mov	r2,zero
    dec8:	003f6406 	br	dc5c <__alt_data_end+0xff00dc5c>
    decc:	10009a1e 	bne	r2,zero,e138 <__subdf3+0x640>
    ded0:	82400044 	addi	r9,r16,1
    ded4:	4881ffcc 	andi	r2,r9,2047
    ded8:	02800044 	movi	r10,1
    dedc:	5080670e 	bge	r10,r2,e07c <__subdf3+0x584>
    dee0:	0081ffc4 	movi	r2,2047
    dee4:	4880af26 	beq	r9,r2,e1a4 <__subdf3+0x6ac>
    dee8:	898d883a 	add	r6,r17,r6
    deec:	1945883a 	add	r2,r3,r5
    def0:	3447803a 	cmpltu	r3,r6,r17
    def4:	1887883a 	add	r3,r3,r2
    def8:	182297fa 	slli	r17,r3,31
    defc:	300cd07a 	srli	r6,r6,1
    df00:	1806d07a 	srli	r3,r3,1
    df04:	4821883a 	mov	r16,r9
    df08:	89a2b03a 	or	r17,r17,r6
    df0c:	003f1b06 	br	db7c <__alt_data_end+0xff00db7c>
    df10:	0101ffc4 	movi	r4,2047
    df14:	813f441e 	bne	r16,r4,dc28 <__alt_data_end+0xff00dc28>
    df18:	003f1806 	br	db7c <__alt_data_end+0xff00db7c>
    df1c:	843ff844 	addi	r16,r16,-31
    df20:	01400804 	movi	r5,32
    df24:	1408d83a 	srl	r4,r2,r16
    df28:	19405026 	beq	r3,r5,e06c <__subdf3+0x574>
    df2c:	01401004 	movi	r5,64
    df30:	28c7c83a 	sub	r3,r5,r3
    df34:	10c4983a 	sll	r2,r2,r3
    df38:	88a2b03a 	or	r17,r17,r2
    df3c:	8822c03a 	cmpne	r17,r17,zero
    df40:	2462b03a 	or	r17,r4,r17
    df44:	0007883a 	mov	r3,zero
    df48:	0021883a 	mov	r16,zero
    df4c:	003f6d06 	br	dd04 <__alt_data_end+0xff00dd04>
    df50:	11fff804 	addi	r7,r2,-32
    df54:	01000804 	movi	r4,32
    df58:	29ced83a 	srl	r7,r5,r7
    df5c:	11004526 	beq	r2,r4,e074 <__subdf3+0x57c>
    df60:	01001004 	movi	r4,64
    df64:	2089c83a 	sub	r4,r4,r2
    df68:	2904983a 	sll	r2,r5,r4
    df6c:	118cb03a 	or	r6,r2,r6
    df70:	300cc03a 	cmpne	r6,r6,zero
    df74:	398cb03a 	or	r6,r7,r6
    df78:	0005883a 	mov	r2,zero
    df7c:	003f3706 	br	dc5c <__alt_data_end+0xff00dc5c>
    df80:	80002a26 	beq	r16,zero,e02c <__subdf3+0x534>
    df84:	0101ffc4 	movi	r4,2047
    df88:	49006626 	beq	r9,r4,e124 <__subdf3+0x62c>
    df8c:	0085c83a 	sub	r2,zero,r2
    df90:	18c02034 	orhi	r3,r3,128
    df94:	01000e04 	movi	r4,56
    df98:	20807e16 	blt	r4,r2,e194 <__subdf3+0x69c>
    df9c:	010007c4 	movi	r4,31
    dfa0:	2080e716 	blt	r4,r2,e340 <__subdf3+0x848>
    dfa4:	01000804 	movi	r4,32
    dfa8:	2089c83a 	sub	r4,r4,r2
    dfac:	1914983a 	sll	r10,r3,r4
    dfb0:	8890d83a 	srl	r8,r17,r2
    dfb4:	8908983a 	sll	r4,r17,r4
    dfb8:	1884d83a 	srl	r2,r3,r2
    dfbc:	5222b03a 	or	r17,r10,r8
    dfc0:	2006c03a 	cmpne	r3,r4,zero
    dfc4:	88e2b03a 	or	r17,r17,r3
    dfc8:	3463c83a 	sub	r17,r6,r17
    dfcc:	2885c83a 	sub	r2,r5,r2
    dfd0:	344d803a 	cmpltu	r6,r6,r17
    dfd4:	1187c83a 	sub	r3,r2,r6
    dfd8:	4821883a 	mov	r16,r9
    dfdc:	3825883a 	mov	r18,r7
    dfe0:	003f2306 	br	dc70 <__alt_data_end+0xff00dc70>
    dfe4:	24d0b03a 	or	r8,r4,r19
    dfe8:	40001b1e 	bne	r8,zero,e058 <__subdf3+0x560>
    dfec:	0005883a 	mov	r2,zero
    dff0:	0009883a 	mov	r4,zero
    dff4:	0021883a 	mov	r16,zero
    dff8:	003f4906 	br	dd20 <__alt_data_end+0xff00dd20>
    dffc:	010007c4 	movi	r4,31
    e000:	20803a16 	blt	r4,r2,e0ec <__subdf3+0x5f4>
    e004:	01000804 	movi	r4,32
    e008:	2089c83a 	sub	r4,r4,r2
    e00c:	2912983a 	sll	r9,r5,r4
    e010:	3090d83a 	srl	r8,r6,r2
    e014:	3108983a 	sll	r4,r6,r4
    e018:	2884d83a 	srl	r2,r5,r2
    e01c:	4a12b03a 	or	r9,r9,r8
    e020:	2008c03a 	cmpne	r4,r4,zero
    e024:	4912b03a 	or	r9,r9,r4
    e028:	003f4e06 	br	dd64 <__alt_data_end+0xff00dd64>
    e02c:	1c48b03a 	or	r4,r3,r17
    e030:	20003c26 	beq	r4,zero,e124 <__subdf3+0x62c>
    e034:	0084303a 	nor	r2,zero,r2
    e038:	1000381e 	bne	r2,zero,e11c <__subdf3+0x624>
    e03c:	3463c83a 	sub	r17,r6,r17
    e040:	28c5c83a 	sub	r2,r5,r3
    e044:	344d803a 	cmpltu	r6,r6,r17
    e048:	1187c83a 	sub	r3,r2,r6
    e04c:	4821883a 	mov	r16,r9
    e050:	3825883a 	mov	r18,r7
    e054:	003f0606 	br	dc70 <__alt_data_end+0xff00dc70>
    e058:	2023883a 	mov	r17,r4
    e05c:	003f0906 	br	dc84 <__alt_data_end+0xff00dc84>
    e060:	0101ffc4 	movi	r4,2047
    e064:	813f3a1e 	bne	r16,r4,dd50 <__alt_data_end+0xff00dd50>
    e068:	003ec406 	br	db7c <__alt_data_end+0xff00db7c>
    e06c:	0005883a 	mov	r2,zero
    e070:	003fb106 	br	df38 <__alt_data_end+0xff00df38>
    e074:	0005883a 	mov	r2,zero
    e078:	003fbc06 	br	df6c <__alt_data_end+0xff00df6c>
    e07c:	1c44b03a 	or	r2,r3,r17
    e080:	80008e1e 	bne	r16,zero,e2bc <__subdf3+0x7c4>
    e084:	1000c826 	beq	r2,zero,e3a8 <__subdf3+0x8b0>
    e088:	2984b03a 	or	r2,r5,r6
    e08c:	103ebb26 	beq	r2,zero,db7c <__alt_data_end+0xff00db7c>
    e090:	8989883a 	add	r4,r17,r6
    e094:	1945883a 	add	r2,r3,r5
    e098:	2447803a 	cmpltu	r3,r4,r17
    e09c:	1887883a 	add	r3,r3,r2
    e0a0:	1880202c 	andhi	r2,r3,128
    e0a4:	2023883a 	mov	r17,r4
    e0a8:	103f1626 	beq	r2,zero,dd04 <__alt_data_end+0xff00dd04>
    e0ac:	00bfe034 	movhi	r2,65408
    e0b0:	10bfffc4 	addi	r2,r2,-1
    e0b4:	5021883a 	mov	r16,r10
    e0b8:	1886703a 	and	r3,r3,r2
    e0bc:	003eaf06 	br	db7c <__alt_data_end+0xff00db7c>
    e0c0:	3825883a 	mov	r18,r7
    e0c4:	003f0f06 	br	dd04 <__alt_data_end+0xff00dd04>
    e0c8:	1c44b03a 	or	r2,r3,r17
    e0cc:	8000251e 	bne	r16,zero,e164 <__subdf3+0x66c>
    e0d0:	1000661e 	bne	r2,zero,e26c <__subdf3+0x774>
    e0d4:	2990b03a 	or	r8,r5,r6
    e0d8:	40009626 	beq	r8,zero,e334 <__subdf3+0x83c>
    e0dc:	2807883a 	mov	r3,r5
    e0e0:	3023883a 	mov	r17,r6
    e0e4:	3825883a 	mov	r18,r7
    e0e8:	003ea406 	br	db7c <__alt_data_end+0xff00db7c>
    e0ec:	127ff804 	addi	r9,r2,-32
    e0f0:	01000804 	movi	r4,32
    e0f4:	2a52d83a 	srl	r9,r5,r9
    e0f8:	11008c26 	beq	r2,r4,e32c <__subdf3+0x834>
    e0fc:	01001004 	movi	r4,64
    e100:	2085c83a 	sub	r2,r4,r2
    e104:	2884983a 	sll	r2,r5,r2
    e108:	118cb03a 	or	r6,r2,r6
    e10c:	300cc03a 	cmpne	r6,r6,zero
    e110:	4992b03a 	or	r9,r9,r6
    e114:	0005883a 	mov	r2,zero
    e118:	003f1206 	br	dd64 <__alt_data_end+0xff00dd64>
    e11c:	0101ffc4 	movi	r4,2047
    e120:	493f9c1e 	bne	r9,r4,df94 <__alt_data_end+0xff00df94>
    e124:	2807883a 	mov	r3,r5
    e128:	3023883a 	mov	r17,r6
    e12c:	4821883a 	mov	r16,r9
    e130:	3825883a 	mov	r18,r7
    e134:	003e9106 	br	db7c <__alt_data_end+0xff00db7c>
    e138:	80001f1e 	bne	r16,zero,e1b8 <__subdf3+0x6c0>
    e13c:	1c48b03a 	or	r4,r3,r17
    e140:	20005a26 	beq	r4,zero,e2ac <__subdf3+0x7b4>
    e144:	0084303a 	nor	r2,zero,r2
    e148:	1000561e 	bne	r2,zero,e2a4 <__subdf3+0x7ac>
    e14c:	89a3883a 	add	r17,r17,r6
    e150:	1945883a 	add	r2,r3,r5
    e154:	898d803a 	cmpltu	r6,r17,r6
    e158:	3087883a 	add	r3,r6,r2
    e15c:	4821883a 	mov	r16,r9
    e160:	003f0506 	br	dd78 <__alt_data_end+0xff00dd78>
    e164:	10002b1e 	bne	r2,zero,e214 <__subdf3+0x71c>
    e168:	2984b03a 	or	r2,r5,r6
    e16c:	10008026 	beq	r2,zero,e370 <__subdf3+0x878>
    e170:	2807883a 	mov	r3,r5
    e174:	3023883a 	mov	r17,r6
    e178:	3825883a 	mov	r18,r7
    e17c:	0401ffc4 	movi	r16,2047
    e180:	003e7e06 	br	db7c <__alt_data_end+0xff00db7c>
    e184:	3809883a 	mov	r4,r7
    e188:	0011883a 	mov	r8,zero
    e18c:	0005883a 	mov	r2,zero
    e190:	003ee306 	br	dd20 <__alt_data_end+0xff00dd20>
    e194:	1c62b03a 	or	r17,r3,r17
    e198:	8822c03a 	cmpne	r17,r17,zero
    e19c:	0005883a 	mov	r2,zero
    e1a0:	003f8906 	br	dfc8 <__alt_data_end+0xff00dfc8>
    e1a4:	3809883a 	mov	r4,r7
    e1a8:	4821883a 	mov	r16,r9
    e1ac:	0011883a 	mov	r8,zero
    e1b0:	0005883a 	mov	r2,zero
    e1b4:	003eda06 	br	dd20 <__alt_data_end+0xff00dd20>
    e1b8:	0101ffc4 	movi	r4,2047
    e1bc:	49003b26 	beq	r9,r4,e2ac <__subdf3+0x7b4>
    e1c0:	0085c83a 	sub	r2,zero,r2
    e1c4:	18c02034 	orhi	r3,r3,128
    e1c8:	01000e04 	movi	r4,56
    e1cc:	20806e16 	blt	r4,r2,e388 <__subdf3+0x890>
    e1d0:	010007c4 	movi	r4,31
    e1d4:	20807716 	blt	r4,r2,e3b4 <__subdf3+0x8bc>
    e1d8:	01000804 	movi	r4,32
    e1dc:	2089c83a 	sub	r4,r4,r2
    e1e0:	1914983a 	sll	r10,r3,r4
    e1e4:	8890d83a 	srl	r8,r17,r2
    e1e8:	8908983a 	sll	r4,r17,r4
    e1ec:	1884d83a 	srl	r2,r3,r2
    e1f0:	5222b03a 	or	r17,r10,r8
    e1f4:	2006c03a 	cmpne	r3,r4,zero
    e1f8:	88e2b03a 	or	r17,r17,r3
    e1fc:	89a3883a 	add	r17,r17,r6
    e200:	1145883a 	add	r2,r2,r5
    e204:	898d803a 	cmpltu	r6,r17,r6
    e208:	3087883a 	add	r3,r6,r2
    e20c:	4821883a 	mov	r16,r9
    e210:	003ed906 	br	dd78 <__alt_data_end+0xff00dd78>
    e214:	2984b03a 	or	r2,r5,r6
    e218:	10004226 	beq	r2,zero,e324 <__subdf3+0x82c>
    e21c:	1808d0fa 	srli	r4,r3,3
    e220:	8822d0fa 	srli	r17,r17,3
    e224:	1806977a 	slli	r3,r3,29
    e228:	2080022c 	andhi	r2,r4,8
    e22c:	1c62b03a 	or	r17,r3,r17
    e230:	10000826 	beq	r2,zero,e254 <__subdf3+0x75c>
    e234:	2812d0fa 	srli	r9,r5,3
    e238:	4880022c 	andhi	r2,r9,8
    e23c:	1000051e 	bne	r2,zero,e254 <__subdf3+0x75c>
    e240:	300cd0fa 	srli	r6,r6,3
    e244:	2804977a 	slli	r2,r5,29
    e248:	4809883a 	mov	r4,r9
    e24c:	3825883a 	mov	r18,r7
    e250:	11a2b03a 	or	r17,r2,r6
    e254:	8806d77a 	srli	r3,r17,29
    e258:	200890fa 	slli	r4,r4,3
    e25c:	882290fa 	slli	r17,r17,3
    e260:	0401ffc4 	movi	r16,2047
    e264:	1906b03a 	or	r3,r3,r4
    e268:	003e4406 	br	db7c <__alt_data_end+0xff00db7c>
    e26c:	2984b03a 	or	r2,r5,r6
    e270:	103e4226 	beq	r2,zero,db7c <__alt_data_end+0xff00db7c>
    e274:	8989c83a 	sub	r4,r17,r6
    e278:	8911803a 	cmpltu	r8,r17,r4
    e27c:	1945c83a 	sub	r2,r3,r5
    e280:	1205c83a 	sub	r2,r2,r8
    e284:	1200202c 	andhi	r8,r2,128
    e288:	403e9a26 	beq	r8,zero,dcf4 <__alt_data_end+0xff00dcf4>
    e28c:	3463c83a 	sub	r17,r6,r17
    e290:	28c5c83a 	sub	r2,r5,r3
    e294:	344d803a 	cmpltu	r6,r6,r17
    e298:	1187c83a 	sub	r3,r2,r6
    e29c:	3825883a 	mov	r18,r7
    e2a0:	003e3606 	br	db7c <__alt_data_end+0xff00db7c>
    e2a4:	0101ffc4 	movi	r4,2047
    e2a8:	493fc71e 	bne	r9,r4,e1c8 <__alt_data_end+0xff00e1c8>
    e2ac:	2807883a 	mov	r3,r5
    e2b0:	3023883a 	mov	r17,r6
    e2b4:	4821883a 	mov	r16,r9
    e2b8:	003e3006 	br	db7c <__alt_data_end+0xff00db7c>
    e2bc:	10003626 	beq	r2,zero,e398 <__subdf3+0x8a0>
    e2c0:	2984b03a 	or	r2,r5,r6
    e2c4:	10001726 	beq	r2,zero,e324 <__subdf3+0x82c>
    e2c8:	1808d0fa 	srli	r4,r3,3
    e2cc:	8822d0fa 	srli	r17,r17,3
    e2d0:	1806977a 	slli	r3,r3,29
    e2d4:	2080022c 	andhi	r2,r4,8
    e2d8:	1c62b03a 	or	r17,r3,r17
    e2dc:	10000726 	beq	r2,zero,e2fc <__subdf3+0x804>
    e2e0:	2812d0fa 	srli	r9,r5,3
    e2e4:	4880022c 	andhi	r2,r9,8
    e2e8:	1000041e 	bne	r2,zero,e2fc <__subdf3+0x804>
    e2ec:	300cd0fa 	srli	r6,r6,3
    e2f0:	2804977a 	slli	r2,r5,29
    e2f4:	4809883a 	mov	r4,r9
    e2f8:	11a2b03a 	or	r17,r2,r6
    e2fc:	8806d77a 	srli	r3,r17,29
    e300:	200890fa 	slli	r4,r4,3
    e304:	882290fa 	slli	r17,r17,3
    e308:	3825883a 	mov	r18,r7
    e30c:	1906b03a 	or	r3,r3,r4
    e310:	0401ffc4 	movi	r16,2047
    e314:	003e1906 	br	db7c <__alt_data_end+0xff00db7c>
    e318:	000b883a 	mov	r5,zero
    e31c:	0005883a 	mov	r2,zero
    e320:	003e2e06 	br	dbdc <__alt_data_end+0xff00dbdc>
    e324:	0401ffc4 	movi	r16,2047
    e328:	003e1406 	br	db7c <__alt_data_end+0xff00db7c>
    e32c:	0005883a 	mov	r2,zero
    e330:	003f7506 	br	e108 <__alt_data_end+0xff00e108>
    e334:	0005883a 	mov	r2,zero
    e338:	0009883a 	mov	r4,zero
    e33c:	003e7806 	br	dd20 <__alt_data_end+0xff00dd20>
    e340:	123ff804 	addi	r8,r2,-32
    e344:	01000804 	movi	r4,32
    e348:	1a10d83a 	srl	r8,r3,r8
    e34c:	11002526 	beq	r2,r4,e3e4 <__subdf3+0x8ec>
    e350:	01001004 	movi	r4,64
    e354:	2085c83a 	sub	r2,r4,r2
    e358:	1884983a 	sll	r2,r3,r2
    e35c:	1444b03a 	or	r2,r2,r17
    e360:	1004c03a 	cmpne	r2,r2,zero
    e364:	40a2b03a 	or	r17,r8,r2
    e368:	0005883a 	mov	r2,zero
    e36c:	003f1606 	br	dfc8 <__alt_data_end+0xff00dfc8>
    e370:	02000434 	movhi	r8,16
    e374:	0009883a 	mov	r4,zero
    e378:	423fffc4 	addi	r8,r8,-1
    e37c:	00bfffc4 	movi	r2,-1
    e380:	0401ffc4 	movi	r16,2047
    e384:	003e6606 	br	dd20 <__alt_data_end+0xff00dd20>
    e388:	1c62b03a 	or	r17,r3,r17
    e38c:	8822c03a 	cmpne	r17,r17,zero
    e390:	0005883a 	mov	r2,zero
    e394:	003f9906 	br	e1fc <__alt_data_end+0xff00e1fc>
    e398:	2807883a 	mov	r3,r5
    e39c:	3023883a 	mov	r17,r6
    e3a0:	0401ffc4 	movi	r16,2047
    e3a4:	003df506 	br	db7c <__alt_data_end+0xff00db7c>
    e3a8:	2807883a 	mov	r3,r5
    e3ac:	3023883a 	mov	r17,r6
    e3b0:	003df206 	br	db7c <__alt_data_end+0xff00db7c>
    e3b4:	123ff804 	addi	r8,r2,-32
    e3b8:	01000804 	movi	r4,32
    e3bc:	1a10d83a 	srl	r8,r3,r8
    e3c0:	11000a26 	beq	r2,r4,e3ec <__subdf3+0x8f4>
    e3c4:	01001004 	movi	r4,64
    e3c8:	2085c83a 	sub	r2,r4,r2
    e3cc:	1884983a 	sll	r2,r3,r2
    e3d0:	1444b03a 	or	r2,r2,r17
    e3d4:	1004c03a 	cmpne	r2,r2,zero
    e3d8:	40a2b03a 	or	r17,r8,r2
    e3dc:	0005883a 	mov	r2,zero
    e3e0:	003f8606 	br	e1fc <__alt_data_end+0xff00e1fc>
    e3e4:	0005883a 	mov	r2,zero
    e3e8:	003fdc06 	br	e35c <__alt_data_end+0xff00e35c>
    e3ec:	0005883a 	mov	r2,zero
    e3f0:	003ff706 	br	e3d0 <__alt_data_end+0xff00e3d0>

0000e3f4 <__fixdfsi>:
    e3f4:	280cd53a 	srli	r6,r5,20
    e3f8:	00c00434 	movhi	r3,16
    e3fc:	18ffffc4 	addi	r3,r3,-1
    e400:	3181ffcc 	andi	r6,r6,2047
    e404:	01c0ff84 	movi	r7,1022
    e408:	28c6703a 	and	r3,r5,r3
    e40c:	280ad7fa 	srli	r5,r5,31
    e410:	3980120e 	bge	r7,r6,e45c <__fixdfsi+0x68>
    e414:	00810744 	movi	r2,1053
    e418:	11800c16 	blt	r2,r6,e44c <__fixdfsi+0x58>
    e41c:	00810cc4 	movi	r2,1075
    e420:	1185c83a 	sub	r2,r2,r6
    e424:	01c007c4 	movi	r7,31
    e428:	18c00434 	orhi	r3,r3,16
    e42c:	38800d16 	blt	r7,r2,e464 <__fixdfsi+0x70>
    e430:	31befb44 	addi	r6,r6,-1043
    e434:	2084d83a 	srl	r2,r4,r2
    e438:	1986983a 	sll	r3,r3,r6
    e43c:	1884b03a 	or	r2,r3,r2
    e440:	28000726 	beq	r5,zero,e460 <__fixdfsi+0x6c>
    e444:	0085c83a 	sub	r2,zero,r2
    e448:	f800283a 	ret
    e44c:	00a00034 	movhi	r2,32768
    e450:	10bfffc4 	addi	r2,r2,-1
    e454:	2885883a 	add	r2,r5,r2
    e458:	f800283a 	ret
    e45c:	0005883a 	mov	r2,zero
    e460:	f800283a 	ret
    e464:	008104c4 	movi	r2,1043
    e468:	1185c83a 	sub	r2,r2,r6
    e46c:	1884d83a 	srl	r2,r3,r2
    e470:	003ff306 	br	e440 <__alt_data_end+0xff00e440>

0000e474 <__floatsidf>:
    e474:	defffd04 	addi	sp,sp,-12
    e478:	dfc00215 	stw	ra,8(sp)
    e47c:	dc400115 	stw	r17,4(sp)
    e480:	dc000015 	stw	r16,0(sp)
    e484:	20002b26 	beq	r4,zero,e534 <__floatsidf+0xc0>
    e488:	2023883a 	mov	r17,r4
    e48c:	2020d7fa 	srli	r16,r4,31
    e490:	20002d16 	blt	r4,zero,e548 <__floatsidf+0xd4>
    e494:	8809883a 	mov	r4,r17
    e498:	000274c0 	call	274c <__clzsi2>
    e49c:	01410784 	movi	r5,1054
    e4a0:	288bc83a 	sub	r5,r5,r2
    e4a4:	01010cc4 	movi	r4,1075
    e4a8:	2149c83a 	sub	r4,r4,r5
    e4ac:	00c007c4 	movi	r3,31
    e4b0:	1900160e 	bge	r3,r4,e50c <__floatsidf+0x98>
    e4b4:	00c104c4 	movi	r3,1043
    e4b8:	1947c83a 	sub	r3,r3,r5
    e4bc:	88c6983a 	sll	r3,r17,r3
    e4c0:	00800434 	movhi	r2,16
    e4c4:	10bfffc4 	addi	r2,r2,-1
    e4c8:	1886703a 	and	r3,r3,r2
    e4cc:	2941ffcc 	andi	r5,r5,2047
    e4d0:	800d883a 	mov	r6,r16
    e4d4:	0005883a 	mov	r2,zero
    e4d8:	280a953a 	slli	r5,r5,20
    e4dc:	31803fcc 	andi	r6,r6,255
    e4e0:	01000434 	movhi	r4,16
    e4e4:	300c97fa 	slli	r6,r6,31
    e4e8:	213fffc4 	addi	r4,r4,-1
    e4ec:	1906703a 	and	r3,r3,r4
    e4f0:	1946b03a 	or	r3,r3,r5
    e4f4:	1986b03a 	or	r3,r3,r6
    e4f8:	dfc00217 	ldw	ra,8(sp)
    e4fc:	dc400117 	ldw	r17,4(sp)
    e500:	dc000017 	ldw	r16,0(sp)
    e504:	dec00304 	addi	sp,sp,12
    e508:	f800283a 	ret
    e50c:	00c002c4 	movi	r3,11
    e510:	1887c83a 	sub	r3,r3,r2
    e514:	88c6d83a 	srl	r3,r17,r3
    e518:	8904983a 	sll	r2,r17,r4
    e51c:	01000434 	movhi	r4,16
    e520:	213fffc4 	addi	r4,r4,-1
    e524:	2941ffcc 	andi	r5,r5,2047
    e528:	1906703a 	and	r3,r3,r4
    e52c:	800d883a 	mov	r6,r16
    e530:	003fe906 	br	e4d8 <__alt_data_end+0xff00e4d8>
    e534:	000d883a 	mov	r6,zero
    e538:	000b883a 	mov	r5,zero
    e53c:	0007883a 	mov	r3,zero
    e540:	0005883a 	mov	r2,zero
    e544:	003fe406 	br	e4d8 <__alt_data_end+0xff00e4d8>
    e548:	0123c83a 	sub	r17,zero,r4
    e54c:	003fd106 	br	e494 <__alt_data_end+0xff00e494>

0000e550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e550:	defffe04 	addi	sp,sp,-8
    e554:	dfc00115 	stw	ra,4(sp)
    e558:	df000015 	stw	fp,0(sp)
    e55c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e560:	d0a00b17 	ldw	r2,-32724(gp)
    e564:	10000326 	beq	r2,zero,e574 <alt_get_errno+0x24>
    e568:	d0a00b17 	ldw	r2,-32724(gp)
    e56c:	103ee83a 	callr	r2
    e570:	00000106 	br	e578 <alt_get_errno+0x28>
    e574:	d0a72004 	addi	r2,gp,-25472
}
    e578:	e037883a 	mov	sp,fp
    e57c:	dfc00117 	ldw	ra,4(sp)
    e580:	df000017 	ldw	fp,0(sp)
    e584:	dec00204 	addi	sp,sp,8
    e588:	f800283a 	ret

0000e58c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e58c:	defffb04 	addi	sp,sp,-20
    e590:	dfc00415 	stw	ra,16(sp)
    e594:	df000315 	stw	fp,12(sp)
    e598:	df000304 	addi	fp,sp,12
    e59c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e5a0:	e0bfff17 	ldw	r2,-4(fp)
    e5a4:	10000616 	blt	r2,zero,e5c0 <close+0x34>
    e5a8:	e0bfff17 	ldw	r2,-4(fp)
    e5ac:	10c00324 	muli	r3,r2,12
    e5b0:	00800074 	movhi	r2,1
    e5b4:	10885004 	addi	r2,r2,8512
    e5b8:	1885883a 	add	r2,r3,r2
    e5bc:	00000106 	br	e5c4 <close+0x38>
    e5c0:	0005883a 	mov	r2,zero
    e5c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e5c8:	e0bffd17 	ldw	r2,-12(fp)
    e5cc:	10001926 	beq	r2,zero,e634 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5d0:	e0bffd17 	ldw	r2,-12(fp)
    e5d4:	10800017 	ldw	r2,0(r2)
    e5d8:	10800417 	ldw	r2,16(r2)
    e5dc:	10000626 	beq	r2,zero,e5f8 <close+0x6c>
    e5e0:	e0bffd17 	ldw	r2,-12(fp)
    e5e4:	10800017 	ldw	r2,0(r2)
    e5e8:	10800417 	ldw	r2,16(r2)
    e5ec:	e13ffd17 	ldw	r4,-12(fp)
    e5f0:	103ee83a 	callr	r2
    e5f4:	00000106 	br	e5fc <close+0x70>
    e5f8:	0005883a 	mov	r2,zero
    e5fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e600:	e13fff17 	ldw	r4,-4(fp)
    e604:	000ec4c0 	call	ec4c <alt_release_fd>
    if (rval < 0)
    e608:	e0bffe17 	ldw	r2,-8(fp)
    e60c:	1000070e 	bge	r2,zero,e62c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e610:	000e5500 	call	e550 <alt_get_errno>
    e614:	1007883a 	mov	r3,r2
    e618:	e0bffe17 	ldw	r2,-8(fp)
    e61c:	0085c83a 	sub	r2,zero,r2
    e620:	18800015 	stw	r2,0(r3)
      return -1;
    e624:	00bfffc4 	movi	r2,-1
    e628:	00000706 	br	e648 <close+0xbc>
    }
    return 0;
    e62c:	0005883a 	mov	r2,zero
    e630:	00000506 	br	e648 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e634:	000e5500 	call	e550 <alt_get_errno>
    e638:	1007883a 	mov	r3,r2
    e63c:	00801444 	movi	r2,81
    e640:	18800015 	stw	r2,0(r3)
    return -1;
    e644:	00bfffc4 	movi	r2,-1
  }
}
    e648:	e037883a 	mov	sp,fp
    e64c:	dfc00117 	ldw	ra,4(sp)
    e650:	df000017 	ldw	fp,0(sp)
    e654:	dec00204 	addi	sp,sp,8
    e658:	f800283a 	ret

0000e65c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e65c:	defffc04 	addi	sp,sp,-16
    e660:	df000315 	stw	fp,12(sp)
    e664:	df000304 	addi	fp,sp,12
    e668:	e13ffd15 	stw	r4,-12(fp)
    e66c:	e17ffe15 	stw	r5,-8(fp)
    e670:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e674:	e0bfff17 	ldw	r2,-4(fp)
}
    e678:	e037883a 	mov	sp,fp
    e67c:	df000017 	ldw	fp,0(sp)
    e680:	dec00104 	addi	sp,sp,4
    e684:	f800283a 	ret

0000e688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e688:	defffe04 	addi	sp,sp,-8
    e68c:	dfc00115 	stw	ra,4(sp)
    e690:	df000015 	stw	fp,0(sp)
    e694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e698:	d0a00b17 	ldw	r2,-32724(gp)
    e69c:	10000326 	beq	r2,zero,e6ac <alt_get_errno+0x24>
    e6a0:	d0a00b17 	ldw	r2,-32724(gp)
    e6a4:	103ee83a 	callr	r2
    e6a8:	00000106 	br	e6b0 <alt_get_errno+0x28>
    e6ac:	d0a72004 	addi	r2,gp,-25472
}
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	dfc00117 	ldw	ra,4(sp)
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00204 	addi	sp,sp,8
    e6c0:	f800283a 	ret

0000e6c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6c4:	defffb04 	addi	sp,sp,-20
    e6c8:	dfc00415 	stw	ra,16(sp)
    e6cc:	df000315 	stw	fp,12(sp)
    e6d0:	df000304 	addi	fp,sp,12
    e6d4:	e13ffe15 	stw	r4,-8(fp)
    e6d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6dc:	e0bffe17 	ldw	r2,-8(fp)
    e6e0:	10000616 	blt	r2,zero,e6fc <fstat+0x38>
    e6e4:	e0bffe17 	ldw	r2,-8(fp)
    e6e8:	10c00324 	muli	r3,r2,12
    e6ec:	00800074 	movhi	r2,1
    e6f0:	10885004 	addi	r2,r2,8512
    e6f4:	1885883a 	add	r2,r3,r2
    e6f8:	00000106 	br	e700 <fstat+0x3c>
    e6fc:	0005883a 	mov	r2,zero
    e700:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e704:	e0bffd17 	ldw	r2,-12(fp)
    e708:	10001026 	beq	r2,zero,e74c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e70c:	e0bffd17 	ldw	r2,-12(fp)
    e710:	10800017 	ldw	r2,0(r2)
    e714:	10800817 	ldw	r2,32(r2)
    e718:	10000726 	beq	r2,zero,e738 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e71c:	e0bffd17 	ldw	r2,-12(fp)
    e720:	10800017 	ldw	r2,0(r2)
    e724:	10800817 	ldw	r2,32(r2)
    e728:	e17fff17 	ldw	r5,-4(fp)
    e72c:	e13ffd17 	ldw	r4,-12(fp)
    e730:	103ee83a 	callr	r2
    e734:	00000a06 	br	e760 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e738:	e0bfff17 	ldw	r2,-4(fp)
    e73c:	00c80004 	movi	r3,8192
    e740:	10c00115 	stw	r3,4(r2)
      return 0;
    e744:	0005883a 	mov	r2,zero
    e748:	00000506 	br	e760 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e74c:	000e6880 	call	e688 <alt_get_errno>
    e750:	1007883a 	mov	r3,r2
    e754:	00801444 	movi	r2,81
    e758:	18800015 	stw	r2,0(r3)
    return -1;
    e75c:	00bfffc4 	movi	r2,-1
  }
}
    e760:	e037883a 	mov	sp,fp
    e764:	dfc00117 	ldw	ra,4(sp)
    e768:	df000017 	ldw	fp,0(sp)
    e76c:	dec00204 	addi	sp,sp,8
    e770:	f800283a 	ret

0000e774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e774:	defffe04 	addi	sp,sp,-8
    e778:	dfc00115 	stw	ra,4(sp)
    e77c:	df000015 	stw	fp,0(sp)
    e780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e784:	d0a00b17 	ldw	r2,-32724(gp)
    e788:	10000326 	beq	r2,zero,e798 <alt_get_errno+0x24>
    e78c:	d0a00b17 	ldw	r2,-32724(gp)
    e790:	103ee83a 	callr	r2
    e794:	00000106 	br	e79c <alt_get_errno+0x28>
    e798:	d0a72004 	addi	r2,gp,-25472
}
    e79c:	e037883a 	mov	sp,fp
    e7a0:	dfc00117 	ldw	ra,4(sp)
    e7a4:	df000017 	ldw	fp,0(sp)
    e7a8:	dec00204 	addi	sp,sp,8
    e7ac:	f800283a 	ret

0000e7b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e7b0:	deffed04 	addi	sp,sp,-76
    e7b4:	dfc01215 	stw	ra,72(sp)
    e7b8:	df001115 	stw	fp,68(sp)
    e7bc:	df001104 	addi	fp,sp,68
    e7c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	10000616 	blt	r2,zero,e7e4 <isatty+0x34>
    e7cc:	e0bfff17 	ldw	r2,-4(fp)
    e7d0:	10c00324 	muli	r3,r2,12
    e7d4:	00800074 	movhi	r2,1
    e7d8:	10885004 	addi	r2,r2,8512
    e7dc:	1885883a 	add	r2,r3,r2
    e7e0:	00000106 	br	e7e8 <isatty+0x38>
    e7e4:	0005883a 	mov	r2,zero
    e7e8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e7ec:	e0bfef17 	ldw	r2,-68(fp)
    e7f0:	10000e26 	beq	r2,zero,e82c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e7f4:	e0bfef17 	ldw	r2,-68(fp)
    e7f8:	10800017 	ldw	r2,0(r2)
    e7fc:	10800817 	ldw	r2,32(r2)
    e800:	1000021e 	bne	r2,zero,e80c <isatty+0x5c>
    {
      return 1;
    e804:	00800044 	movi	r2,1
    e808:	00000d06 	br	e840 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e80c:	e0bff004 	addi	r2,fp,-64
    e810:	100b883a 	mov	r5,r2
    e814:	e13fff17 	ldw	r4,-4(fp)
    e818:	000e6c40 	call	e6c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e81c:	e0bff117 	ldw	r2,-60(fp)
    e820:	10880020 	cmpeqi	r2,r2,8192
    e824:	10803fcc 	andi	r2,r2,255
    e828:	00000506 	br	e840 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e82c:	000e7740 	call	e774 <alt_get_errno>
    e830:	1007883a 	mov	r3,r2
    e834:	00801444 	movi	r2,81
    e838:	18800015 	stw	r2,0(r3)
    return 0;
    e83c:	0005883a 	mov	r2,zero
  }
}
    e840:	e037883a 	mov	sp,fp
    e844:	dfc00117 	ldw	ra,4(sp)
    e848:	df000017 	ldw	fp,0(sp)
    e84c:	dec00204 	addi	sp,sp,8
    e850:	f800283a 	ret

0000e854 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e854:	defffc04 	addi	sp,sp,-16
    e858:	df000315 	stw	fp,12(sp)
    e85c:	df000304 	addi	fp,sp,12
    e860:	e13ffd15 	stw	r4,-12(fp)
    e864:	e17ffe15 	stw	r5,-8(fp)
    e868:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e86c:	e0fffe17 	ldw	r3,-8(fp)
    e870:	e0bffd17 	ldw	r2,-12(fp)
    e874:	18800c26 	beq	r3,r2,e8a8 <alt_load_section+0x54>
  {
    while( to != end )
    e878:	00000806 	br	e89c <alt_load_section+0x48>
    {
      *to++ = *from++;
    e87c:	e0bffe17 	ldw	r2,-8(fp)
    e880:	10c00104 	addi	r3,r2,4
    e884:	e0fffe15 	stw	r3,-8(fp)
    e888:	e0fffd17 	ldw	r3,-12(fp)
    e88c:	19000104 	addi	r4,r3,4
    e890:	e13ffd15 	stw	r4,-12(fp)
    e894:	18c00017 	ldw	r3,0(r3)
    e898:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e89c:	e0fffe17 	ldw	r3,-8(fp)
    e8a0:	e0bfff17 	ldw	r2,-4(fp)
    e8a4:	18bff51e 	bne	r3,r2,e87c <__alt_data_end+0xff00e87c>
    {
      *to++ = *from++;
    }
  }
}
    e8a8:	0001883a 	nop
    e8ac:	e037883a 	mov	sp,fp
    e8b0:	df000017 	ldw	fp,0(sp)
    e8b4:	dec00104 	addi	sp,sp,4
    e8b8:	f800283a 	ret

0000e8bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e8bc:	defffe04 	addi	sp,sp,-8
    e8c0:	dfc00115 	stw	ra,4(sp)
    e8c4:	df000015 	stw	fp,0(sp)
    e8c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e8cc:	01800074 	movhi	r6,1
    e8d0:	318cd804 	addi	r6,r6,13152
    e8d4:	01400074 	movhi	r5,1
    e8d8:	2945dd04 	addi	r5,r5,6004
    e8dc:	01000074 	movhi	r4,1
    e8e0:	210cd804 	addi	r4,r4,13152
    e8e4:	000e8540 	call	e854 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e8e8:	01800034 	movhi	r6,0
    e8ec:	31809104 	addi	r6,r6,580
    e8f0:	01400034 	movhi	r5,0
    e8f4:	29400804 	addi	r5,r5,32
    e8f8:	01000034 	movhi	r4,0
    e8fc:	21000804 	addi	r4,r4,32
    e900:	000e8540 	call	e854 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e904:	01800074 	movhi	r6,1
    e908:	3185dd04 	addi	r6,r6,6004
    e90c:	01400074 	movhi	r5,1
    e910:	2943ee04 	addi	r5,r5,4024
    e914:	01000074 	movhi	r4,1
    e918:	2103ee04 	addi	r4,r4,4024
    e91c:	000e8540 	call	e854 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e920:	000fea40 	call	fea4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e924:	001008c0 	call	1008c <alt_icache_flush_all>
}
    e928:	0001883a 	nop
    e92c:	e037883a 	mov	sp,fp
    e930:	dfc00117 	ldw	ra,4(sp)
    e934:	df000017 	ldw	fp,0(sp)
    e938:	dec00204 	addi	sp,sp,8
    e93c:	f800283a 	ret

0000e940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e940:	defffe04 	addi	sp,sp,-8
    e944:	dfc00115 	stw	ra,4(sp)
    e948:	df000015 	stw	fp,0(sp)
    e94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e950:	d0a00b17 	ldw	r2,-32724(gp)
    e954:	10000326 	beq	r2,zero,e964 <alt_get_errno+0x24>
    e958:	d0a00b17 	ldw	r2,-32724(gp)
    e95c:	103ee83a 	callr	r2
    e960:	00000106 	br	e968 <alt_get_errno+0x28>
    e964:	d0a72004 	addi	r2,gp,-25472
}
    e968:	e037883a 	mov	sp,fp
    e96c:	dfc00117 	ldw	ra,4(sp)
    e970:	df000017 	ldw	fp,0(sp)
    e974:	dec00204 	addi	sp,sp,8
    e978:	f800283a 	ret

0000e97c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e97c:	defff904 	addi	sp,sp,-28
    e980:	dfc00615 	stw	ra,24(sp)
    e984:	df000515 	stw	fp,20(sp)
    e988:	df000504 	addi	fp,sp,20
    e98c:	e13ffd15 	stw	r4,-12(fp)
    e990:	e17ffe15 	stw	r5,-8(fp)
    e994:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e998:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e99c:	e0bffd17 	ldw	r2,-12(fp)
    e9a0:	10000616 	blt	r2,zero,e9bc <lseek+0x40>
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	10c00324 	muli	r3,r2,12
    e9ac:	00800074 	movhi	r2,1
    e9b0:	10885004 	addi	r2,r2,8512
    e9b4:	1885883a 	add	r2,r3,r2
    e9b8:	00000106 	br	e9c0 <lseek+0x44>
    e9bc:	0005883a 	mov	r2,zero
    e9c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e9c4:	e0bffc17 	ldw	r2,-16(fp)
    e9c8:	10001026 	beq	r2,zero,ea0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e9cc:	e0bffc17 	ldw	r2,-16(fp)
    e9d0:	10800017 	ldw	r2,0(r2)
    e9d4:	10800717 	ldw	r2,28(r2)
    e9d8:	10000926 	beq	r2,zero,ea00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e9dc:	e0bffc17 	ldw	r2,-16(fp)
    e9e0:	10800017 	ldw	r2,0(r2)
    e9e4:	10800717 	ldw	r2,28(r2)
    e9e8:	e1bfff17 	ldw	r6,-4(fp)
    e9ec:	e17ffe17 	ldw	r5,-8(fp)
    e9f0:	e13ffc17 	ldw	r4,-16(fp)
    e9f4:	103ee83a 	callr	r2
    e9f8:	e0bffb15 	stw	r2,-20(fp)
    e9fc:	00000506 	br	ea14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ea00:	00bfde84 	movi	r2,-134
    ea04:	e0bffb15 	stw	r2,-20(fp)
    ea08:	00000206 	br	ea14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ea0c:	00bfebc4 	movi	r2,-81
    ea10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ea14:	e0bffb17 	ldw	r2,-20(fp)
    ea18:	1000070e 	bge	r2,zero,ea38 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ea1c:	000e9400 	call	e940 <alt_get_errno>
    ea20:	1007883a 	mov	r3,r2
    ea24:	e0bffb17 	ldw	r2,-20(fp)
    ea28:	0085c83a 	sub	r2,zero,r2
    ea2c:	18800015 	stw	r2,0(r3)
    rc = -1;
    ea30:	00bfffc4 	movi	r2,-1
    ea34:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ea38:	e0bffb17 	ldw	r2,-20(fp)
}
    ea3c:	e037883a 	mov	sp,fp
    ea40:	dfc00117 	ldw	ra,4(sp)
    ea44:	df000017 	ldw	fp,0(sp)
    ea48:	dec00204 	addi	sp,sp,8
    ea4c:	f800283a 	ret

0000ea50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea50:	defffd04 	addi	sp,sp,-12
    ea54:	dfc00215 	stw	ra,8(sp)
    ea58:	df000115 	stw	fp,4(sp)
    ea5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea60:	0009883a 	mov	r4,zero
    ea64:	000eef80 	call	eef8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ea68:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea6c:	000ef300 	call	ef30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea70:	01800074 	movhi	r6,1
    ea74:	3185d504 	addi	r6,r6,5972
    ea78:	01400074 	movhi	r5,1
    ea7c:	2945d504 	addi	r5,r5,5972
    ea80:	01000074 	movhi	r4,1
    ea84:	2105d504 	addi	r4,r4,5972
    ea88:	00104240 	call	10424 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea8c:	000ffcc0 	call	ffcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea90:	01000074 	movhi	r4,1
    ea94:	21000b04 	addi	r4,r4,44
    ea98:	0010c240 	call	10c24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea9c:	d0a72417 	ldw	r2,-25456(gp)
    eaa0:	d0e72517 	ldw	r3,-25452(gp)
    eaa4:	d1272617 	ldw	r4,-25448(gp)
    eaa8:	200d883a 	mov	r6,r4
    eaac:	180b883a 	mov	r5,r3
    eab0:	1009883a 	mov	r4,r2
    eab4:	0000f500 	call	f50 <main>
    eab8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eabc:	01000044 	movi	r4,1
    eac0:	000e58c0 	call	e58c <close>
  exit (result);
    eac4:	e13fff17 	ldw	r4,-4(fp)
    eac8:	0010c380 	call	10c38 <exit>

0000eacc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eacc:	defffe04 	addi	sp,sp,-8
    ead0:	df000115 	stw	fp,4(sp)
    ead4:	df000104 	addi	fp,sp,4
    ead8:	e13fff15 	stw	r4,-4(fp)
}
    eadc:	0001883a 	nop
    eae0:	e037883a 	mov	sp,fp
    eae4:	df000017 	ldw	fp,0(sp)
    eae8:	dec00104 	addi	sp,sp,4
    eaec:	f800283a 	ret

0000eaf0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eaf0:	defffe04 	addi	sp,sp,-8
    eaf4:	df000115 	stw	fp,4(sp)
    eaf8:	df000104 	addi	fp,sp,4
    eafc:	e13fff15 	stw	r4,-4(fp)
}
    eb00:	0001883a 	nop
    eb04:	e037883a 	mov	sp,fp
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00104 	addi	sp,sp,4
    eb10:	f800283a 	ret

0000eb14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb14:	defffe04 	addi	sp,sp,-8
    eb18:	dfc00115 	stw	ra,4(sp)
    eb1c:	df000015 	stw	fp,0(sp)
    eb20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb24:	d0a00b17 	ldw	r2,-32724(gp)
    eb28:	10000326 	beq	r2,zero,eb38 <alt_get_errno+0x24>
    eb2c:	d0a00b17 	ldw	r2,-32724(gp)
    eb30:	103ee83a 	callr	r2
    eb34:	00000106 	br	eb3c <alt_get_errno+0x28>
    eb38:	d0a72004 	addi	r2,gp,-25472
}
    eb3c:	e037883a 	mov	sp,fp
    eb40:	dfc00117 	ldw	ra,4(sp)
    eb44:	df000017 	ldw	fp,0(sp)
    eb48:	dec00204 	addi	sp,sp,8
    eb4c:	f800283a 	ret

0000eb50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eb50:	defff904 	addi	sp,sp,-28
    eb54:	dfc00615 	stw	ra,24(sp)
    eb58:	df000515 	stw	fp,20(sp)
    eb5c:	df000504 	addi	fp,sp,20
    eb60:	e13ffd15 	stw	r4,-12(fp)
    eb64:	e17ffe15 	stw	r5,-8(fp)
    eb68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb6c:	e0bffd17 	ldw	r2,-12(fp)
    eb70:	10000616 	blt	r2,zero,eb8c <read+0x3c>
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	10c00324 	muli	r3,r2,12
    eb7c:	00800074 	movhi	r2,1
    eb80:	10885004 	addi	r2,r2,8512
    eb84:	1885883a 	add	r2,r3,r2
    eb88:	00000106 	br	eb90 <read+0x40>
    eb8c:	0005883a 	mov	r2,zero
    eb90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb94:	e0bffb17 	ldw	r2,-20(fp)
    eb98:	10002226 	beq	r2,zero,ec24 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb9c:	e0bffb17 	ldw	r2,-20(fp)
    eba0:	10800217 	ldw	r2,8(r2)
    eba4:	108000cc 	andi	r2,r2,3
    eba8:	10800060 	cmpeqi	r2,r2,1
    ebac:	1000181e 	bne	r2,zero,ec10 <read+0xc0>
        (fd->dev->read))
    ebb0:	e0bffb17 	ldw	r2,-20(fp)
    ebb4:	10800017 	ldw	r2,0(r2)
    ebb8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ebbc:	10001426 	beq	r2,zero,ec10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ebc0:	e0bffb17 	ldw	r2,-20(fp)
    ebc4:	10800017 	ldw	r2,0(r2)
    ebc8:	10800517 	ldw	r2,20(r2)
    ebcc:	e0ffff17 	ldw	r3,-4(fp)
    ebd0:	180d883a 	mov	r6,r3
    ebd4:	e17ffe17 	ldw	r5,-8(fp)
    ebd8:	e13ffb17 	ldw	r4,-20(fp)
    ebdc:	103ee83a 	callr	r2
    ebe0:	e0bffc15 	stw	r2,-16(fp)
    ebe4:	e0bffc17 	ldw	r2,-16(fp)
    ebe8:	1000070e 	bge	r2,zero,ec08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ebec:	000eb140 	call	eb14 <alt_get_errno>
    ebf0:	1007883a 	mov	r3,r2
    ebf4:	e0bffc17 	ldw	r2,-16(fp)
    ebf8:	0085c83a 	sub	r2,zero,r2
    ebfc:	18800015 	stw	r2,0(r3)
          return -1;
    ec00:	00bfffc4 	movi	r2,-1
    ec04:	00000c06 	br	ec38 <read+0xe8>
        }
        return rval;
    ec08:	e0bffc17 	ldw	r2,-16(fp)
    ec0c:	00000a06 	br	ec38 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ec10:	000eb140 	call	eb14 <alt_get_errno>
    ec14:	1007883a 	mov	r3,r2
    ec18:	00800344 	movi	r2,13
    ec1c:	18800015 	stw	r2,0(r3)
    ec20:	00000406 	br	ec34 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ec24:	000eb140 	call	eb14 <alt_get_errno>
    ec28:	1007883a 	mov	r3,r2
    ec2c:	00801444 	movi	r2,81
    ec30:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec34:	00bfffc4 	movi	r2,-1
}
    ec38:	e037883a 	mov	sp,fp
    ec3c:	dfc00117 	ldw	ra,4(sp)
    ec40:	df000017 	ldw	fp,0(sp)
    ec44:	dec00204 	addi	sp,sp,8
    ec48:	f800283a 	ret

0000ec4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ec4c:	defffe04 	addi	sp,sp,-8
    ec50:	df000115 	stw	fp,4(sp)
    ec54:	df000104 	addi	fp,sp,4
    ec58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ec5c:	e0bfff17 	ldw	r2,-4(fp)
    ec60:	108000d0 	cmplti	r2,r2,3
    ec64:	10000d1e 	bne	r2,zero,ec9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ec68:	00800074 	movhi	r2,1
    ec6c:	10885004 	addi	r2,r2,8512
    ec70:	e0ffff17 	ldw	r3,-4(fp)
    ec74:	18c00324 	muli	r3,r3,12
    ec78:	10c5883a 	add	r2,r2,r3
    ec7c:	10800204 	addi	r2,r2,8
    ec80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ec84:	00800074 	movhi	r2,1
    ec88:	10885004 	addi	r2,r2,8512
    ec8c:	e0ffff17 	ldw	r3,-4(fp)
    ec90:	18c00324 	muli	r3,r3,12
    ec94:	10c5883a 	add	r2,r2,r3
    ec98:	10000015 	stw	zero,0(r2)
  }
}
    ec9c:	0001883a 	nop
    eca0:	e037883a 	mov	sp,fp
    eca4:	df000017 	ldw	fp,0(sp)
    eca8:	dec00104 	addi	sp,sp,4
    ecac:	f800283a 	ret

0000ecb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ecb0:	defff904 	addi	sp,sp,-28
    ecb4:	df000615 	stw	fp,24(sp)
    ecb8:	df000604 	addi	fp,sp,24
    ecbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecc0:	0005303a 	rdctl	r2,status
    ecc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecc8:	e0fffe17 	ldw	r3,-8(fp)
    eccc:	00bfff84 	movi	r2,-2
    ecd0:	1884703a 	and	r2,r3,r2
    ecd4:	1001703a 	wrctl	status,r2
  
  return context;
    ecd8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ecdc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ece0:	d0a00c17 	ldw	r2,-32720(gp)
    ece4:	10c000c4 	addi	r3,r2,3
    ece8:	00bfff04 	movi	r2,-4
    ecec:	1884703a 	and	r2,r3,r2
    ecf0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ecf4:	d0e00c17 	ldw	r3,-32720(gp)
    ecf8:	e0bfff17 	ldw	r2,-4(fp)
    ecfc:	1887883a 	add	r3,r3,r2
    ed00:	00804034 	movhi	r2,256
    ed04:	10800004 	addi	r2,r2,0
    ed08:	10c0062e 	bgeu	r2,r3,ed24 <sbrk+0x74>
    ed0c:	e0bffb17 	ldw	r2,-20(fp)
    ed10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed14:	e0bffa17 	ldw	r2,-24(fp)
    ed18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ed1c:	00bfffc4 	movi	r2,-1
    ed20:	00000b06 	br	ed50 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ed24:	d0a00c17 	ldw	r2,-32720(gp)
    ed28:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ed2c:	d0e00c17 	ldw	r3,-32720(gp)
    ed30:	e0bfff17 	ldw	r2,-4(fp)
    ed34:	1885883a 	add	r2,r3,r2
    ed38:	d0a00c15 	stw	r2,-32720(gp)
    ed3c:	e0bffb17 	ldw	r2,-20(fp)
    ed40:	e0bffc15 	stw	r2,-16(fp)
    ed44:	e0bffc17 	ldw	r2,-16(fp)
    ed48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ed4c:	e0bffd17 	ldw	r2,-12(fp)
} 
    ed50:	e037883a 	mov	sp,fp
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00104 	addi	sp,sp,4
    ed5c:	f800283a 	ret

0000ed60 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ed60:	defffd04 	addi	sp,sp,-12
    ed64:	dfc00215 	stw	ra,8(sp)
    ed68:	df000115 	stw	fp,4(sp)
    ed6c:	df000104 	addi	fp,sp,4
    ed70:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ed74:	e13fff17 	ldw	r4,-4(fp)
    ed78:	000fd4c0 	call	fd4c <alt_busy_sleep>
}
    ed7c:	e037883a 	mov	sp,fp
    ed80:	dfc00117 	ldw	ra,4(sp)
    ed84:	df000017 	ldw	fp,0(sp)
    ed88:	dec00204 	addi	sp,sp,8
    ed8c:	f800283a 	ret

0000ed90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed90:	defffe04 	addi	sp,sp,-8
    ed94:	dfc00115 	stw	ra,4(sp)
    ed98:	df000015 	stw	fp,0(sp)
    ed9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eda0:	d0a00b17 	ldw	r2,-32724(gp)
    eda4:	10000326 	beq	r2,zero,edb4 <alt_get_errno+0x24>
    eda8:	d0a00b17 	ldw	r2,-32724(gp)
    edac:	103ee83a 	callr	r2
    edb0:	00000106 	br	edb8 <alt_get_errno+0x28>
    edb4:	d0a72004 	addi	r2,gp,-25472
}
    edb8:	e037883a 	mov	sp,fp
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	df000017 	ldw	fp,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    edcc:	defff904 	addi	sp,sp,-28
    edd0:	dfc00615 	stw	ra,24(sp)
    edd4:	df000515 	stw	fp,20(sp)
    edd8:	df000504 	addi	fp,sp,20
    eddc:	e13ffd15 	stw	r4,-12(fp)
    ede0:	e17ffe15 	stw	r5,-8(fp)
    ede4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ede8:	e0bffd17 	ldw	r2,-12(fp)
    edec:	10000616 	blt	r2,zero,ee08 <write+0x3c>
    edf0:	e0bffd17 	ldw	r2,-12(fp)
    edf4:	10c00324 	muli	r3,r2,12
    edf8:	00800074 	movhi	r2,1
    edfc:	10885004 	addi	r2,r2,8512
    ee00:	1885883a 	add	r2,r3,r2
    ee04:	00000106 	br	ee0c <write+0x40>
    ee08:	0005883a 	mov	r2,zero
    ee0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ee10:	e0bffb17 	ldw	r2,-20(fp)
    ee14:	10002126 	beq	r2,zero,ee9c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee18:	e0bffb17 	ldw	r2,-20(fp)
    ee1c:	10800217 	ldw	r2,8(r2)
    ee20:	108000cc 	andi	r2,r2,3
    ee24:	10001826 	beq	r2,zero,ee88 <write+0xbc>
    ee28:	e0bffb17 	ldw	r2,-20(fp)
    ee2c:	10800017 	ldw	r2,0(r2)
    ee30:	10800617 	ldw	r2,24(r2)
    ee34:	10001426 	beq	r2,zero,ee88 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee38:	e0bffb17 	ldw	r2,-20(fp)
    ee3c:	10800017 	ldw	r2,0(r2)
    ee40:	10800617 	ldw	r2,24(r2)
    ee44:	e0ffff17 	ldw	r3,-4(fp)
    ee48:	180d883a 	mov	r6,r3
    ee4c:	e17ffe17 	ldw	r5,-8(fp)
    ee50:	e13ffb17 	ldw	r4,-20(fp)
    ee54:	103ee83a 	callr	r2
    ee58:	e0bffc15 	stw	r2,-16(fp)
    ee5c:	e0bffc17 	ldw	r2,-16(fp)
    ee60:	1000070e 	bge	r2,zero,ee80 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ee64:	000ed900 	call	ed90 <alt_get_errno>
    ee68:	1007883a 	mov	r3,r2
    ee6c:	e0bffc17 	ldw	r2,-16(fp)
    ee70:	0085c83a 	sub	r2,zero,r2
    ee74:	18800015 	stw	r2,0(r3)
        return -1;
    ee78:	00bfffc4 	movi	r2,-1
    ee7c:	00000c06 	br	eeb0 <write+0xe4>
      }
      return rval;
    ee80:	e0bffc17 	ldw	r2,-16(fp)
    ee84:	00000a06 	br	eeb0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ee88:	000ed900 	call	ed90 <alt_get_errno>
    ee8c:	1007883a 	mov	r3,r2
    ee90:	00800344 	movi	r2,13
    ee94:	18800015 	stw	r2,0(r3)
    ee98:	00000406 	br	eeac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ee9c:	000ed900 	call	ed90 <alt_get_errno>
    eea0:	1007883a 	mov	r3,r2
    eea4:	00801444 	movi	r2,81
    eea8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eeac:	00bfffc4 	movi	r2,-1
}
    eeb0:	e037883a 	mov	sp,fp
    eeb4:	dfc00117 	ldw	ra,4(sp)
    eeb8:	df000017 	ldw	fp,0(sp)
    eebc:	dec00204 	addi	sp,sp,8
    eec0:	f800283a 	ret

0000eec4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    eec4:	defffd04 	addi	sp,sp,-12
    eec8:	dfc00215 	stw	ra,8(sp)
    eecc:	df000115 	stw	fp,4(sp)
    eed0:	df000104 	addi	fp,sp,4
    eed4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eed8:	d1600804 	addi	r5,gp,-32736
    eedc:	e13fff17 	ldw	r4,-4(fp)
    eee0:	000ff280 	call	ff28 <alt_dev_llist_insert>
}
    eee4:	e037883a 	mov	sp,fp
    eee8:	dfc00117 	ldw	ra,4(sp)
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00204 	addi	sp,sp,8
    eef4:	f800283a 	ret

0000eef8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eef8:	defffd04 	addi	sp,sp,-12
    eefc:	dfc00215 	stw	ra,8(sp)
    ef00:	df000115 	stw	fp,4(sp)
    ef04:	df000104 	addi	fp,sp,4
    ef08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ef0c:	00108980 	call	10898 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ef10:	00800044 	movi	r2,1
    ef14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ef18:	0001883a 	nop
    ef1c:	e037883a 	mov	sp,fp
    ef20:	dfc00117 	ldw	ra,4(sp)
    ef24:	df000017 	ldw	fp,0(sp)
    ef28:	dec00204 	addi	sp,sp,8
    ef2c:	f800283a 	ret

0000ef30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ef30:	defffe04 	addi	sp,sp,-8
    ef34:	dfc00115 	stw	ra,4(sp)
    ef38:	df000015 	stw	fp,0(sp)
    ef3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ef40:	00804034 	movhi	r2,256
    ef44:	10840004 	addi	r2,r2,4096
    ef48:	d0a72715 	stw	r2,-25444(gp)
    ef4c:	0080bef4 	movhi	r2,763
    ef50:	10bc2004 	addi	r2,r2,-3968
    ef54:	d0a72815 	stw	r2,-25440(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ef58:	01c0fa04 	movi	r7,1000
    ef5c:	01800104 	movi	r6,4
    ef60:	000b883a 	mov	r5,zero
    ef64:	01004034 	movhi	r4,256
    ef68:	21040804 	addi	r4,r4,4128
    ef6c:	000fa8c0 	call	fa8c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ef70:	000d883a 	mov	r6,zero
    ef74:	000b883a 	mov	r5,zero
    ef78:	01000074 	movhi	r4,1
    ef7c:	2108ba04 	addi	r4,r4,8936
    ef80:	000f1100 	call	f110 <altera_avalon_jtag_uart_init>
    ef84:	01000074 	movhi	r4,1
    ef88:	2108b004 	addi	r4,r4,8896
    ef8c:	000eec40 	call	eec4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ef90:	0001883a 	nop
}
    ef94:	0001883a 	nop
    ef98:	e037883a 	mov	sp,fp
    ef9c:	dfc00117 	ldw	ra,4(sp)
    efa0:	df000017 	ldw	fp,0(sp)
    efa4:	dec00204 	addi	sp,sp,8
    efa8:	f800283a 	ret

0000efac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    efac:	defffa04 	addi	sp,sp,-24
    efb0:	dfc00515 	stw	ra,20(sp)
    efb4:	df000415 	stw	fp,16(sp)
    efb8:	df000404 	addi	fp,sp,16
    efbc:	e13ffd15 	stw	r4,-12(fp)
    efc0:	e17ffe15 	stw	r5,-8(fp)
    efc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efc8:	e0bffd17 	ldw	r2,-12(fp)
    efcc:	10800017 	ldw	r2,0(r2)
    efd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    efd4:	e0bffc17 	ldw	r2,-16(fp)
    efd8:	10c00a04 	addi	r3,r2,40
    efdc:	e0bffd17 	ldw	r2,-12(fp)
    efe0:	10800217 	ldw	r2,8(r2)
    efe4:	100f883a 	mov	r7,r2
    efe8:	e1bfff17 	ldw	r6,-4(fp)
    efec:	e17ffe17 	ldw	r5,-8(fp)
    eff0:	1809883a 	mov	r4,r3
    eff4:	000f5d40 	call	f5d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    eff8:	e037883a 	mov	sp,fp
    effc:	dfc00117 	ldw	ra,4(sp)
    f000:	df000017 	ldw	fp,0(sp)
    f004:	dec00204 	addi	sp,sp,8
    f008:	f800283a 	ret

0000f00c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f00c:	defffa04 	addi	sp,sp,-24
    f010:	dfc00515 	stw	ra,20(sp)
    f014:	df000415 	stw	fp,16(sp)
    f018:	df000404 	addi	fp,sp,16
    f01c:	e13ffd15 	stw	r4,-12(fp)
    f020:	e17ffe15 	stw	r5,-8(fp)
    f024:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f028:	e0bffd17 	ldw	r2,-12(fp)
    f02c:	10800017 	ldw	r2,0(r2)
    f030:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f034:	e0bffc17 	ldw	r2,-16(fp)
    f038:	10c00a04 	addi	r3,r2,40
    f03c:	e0bffd17 	ldw	r2,-12(fp)
    f040:	10800217 	ldw	r2,8(r2)
    f044:	100f883a 	mov	r7,r2
    f048:	e1bfff17 	ldw	r6,-4(fp)
    f04c:	e17ffe17 	ldw	r5,-8(fp)
    f050:	1809883a 	mov	r4,r3
    f054:	000f7f00 	call	f7f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f058:	e037883a 	mov	sp,fp
    f05c:	dfc00117 	ldw	ra,4(sp)
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00204 	addi	sp,sp,8
    f068:	f800283a 	ret

0000f06c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f06c:	defffc04 	addi	sp,sp,-16
    f070:	dfc00315 	stw	ra,12(sp)
    f074:	df000215 	stw	fp,8(sp)
    f078:	df000204 	addi	fp,sp,8
    f07c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f080:	e0bfff17 	ldw	r2,-4(fp)
    f084:	10800017 	ldw	r2,0(r2)
    f088:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f08c:	e0bffe17 	ldw	r2,-8(fp)
    f090:	10c00a04 	addi	r3,r2,40
    f094:	e0bfff17 	ldw	r2,-4(fp)
    f098:	10800217 	ldw	r2,8(r2)
    f09c:	100b883a 	mov	r5,r2
    f0a0:	1809883a 	mov	r4,r3
    f0a4:	000f47c0 	call	f47c <altera_avalon_jtag_uart_close>
}
    f0a8:	e037883a 	mov	sp,fp
    f0ac:	dfc00117 	ldw	ra,4(sp)
    f0b0:	df000017 	ldw	fp,0(sp)
    f0b4:	dec00204 	addi	sp,sp,8
    f0b8:	f800283a 	ret

0000f0bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f0bc:	defffa04 	addi	sp,sp,-24
    f0c0:	dfc00515 	stw	ra,20(sp)
    f0c4:	df000415 	stw	fp,16(sp)
    f0c8:	df000404 	addi	fp,sp,16
    f0cc:	e13ffd15 	stw	r4,-12(fp)
    f0d0:	e17ffe15 	stw	r5,-8(fp)
    f0d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f0d8:	e0bffd17 	ldw	r2,-12(fp)
    f0dc:	10800017 	ldw	r2,0(r2)
    f0e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f0e4:	e0bffc17 	ldw	r2,-16(fp)
    f0e8:	10800a04 	addi	r2,r2,40
    f0ec:	e1bfff17 	ldw	r6,-4(fp)
    f0f0:	e17ffe17 	ldw	r5,-8(fp)
    f0f4:	1009883a 	mov	r4,r2
    f0f8:	000f4e40 	call	f4e4 <altera_avalon_jtag_uart_ioctl>
}
    f0fc:	e037883a 	mov	sp,fp
    f100:	dfc00117 	ldw	ra,4(sp)
    f104:	df000017 	ldw	fp,0(sp)
    f108:	dec00204 	addi	sp,sp,8
    f10c:	f800283a 	ret

0000f110 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f110:	defffa04 	addi	sp,sp,-24
    f114:	dfc00515 	stw	ra,20(sp)
    f118:	df000415 	stw	fp,16(sp)
    f11c:	df000404 	addi	fp,sp,16
    f120:	e13ffd15 	stw	r4,-12(fp)
    f124:	e17ffe15 	stw	r5,-8(fp)
    f128:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f12c:	e0bffd17 	ldw	r2,-12(fp)
    f130:	00c00044 	movi	r3,1
    f134:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f138:	e0bffd17 	ldw	r2,-12(fp)
    f13c:	10800017 	ldw	r2,0(r2)
    f140:	10800104 	addi	r2,r2,4
    f144:	1007883a 	mov	r3,r2
    f148:	e0bffd17 	ldw	r2,-12(fp)
    f14c:	10800817 	ldw	r2,32(r2)
    f150:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f154:	e0bffe17 	ldw	r2,-8(fp)
    f158:	e0ffff17 	ldw	r3,-4(fp)
    f15c:	d8000015 	stw	zero,0(sp)
    f160:	e1fffd17 	ldw	r7,-12(fp)
    f164:	01800074 	movhi	r6,1
    f168:	31bc7404 	addi	r6,r6,-3632
    f16c:	180b883a 	mov	r5,r3
    f170:	1009883a 	mov	r4,r2
    f174:	00100c00 	call	100c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f178:	e0bffd17 	ldw	r2,-12(fp)
    f17c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f180:	e0bffd17 	ldw	r2,-12(fp)
    f184:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f188:	d0e72a17 	ldw	r3,-25432(gp)
    f18c:	e1fffd17 	ldw	r7,-12(fp)
    f190:	01800074 	movhi	r6,1
    f194:	31bcf704 	addi	r6,r6,-3108
    f198:	180b883a 	mov	r5,r3
    f19c:	1009883a 	mov	r4,r2
    f1a0:	000fc200 	call	fc20 <alt_alarm_start>
    f1a4:	1000040e 	bge	r2,zero,f1b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f1a8:	e0fffd17 	ldw	r3,-12(fp)
    f1ac:	00a00034 	movhi	r2,32768
    f1b0:	10bfffc4 	addi	r2,r2,-1
    f1b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f1b8:	0001883a 	nop
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	dfc00117 	ldw	ra,4(sp)
    f1c4:	df000017 	ldw	fp,0(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f1d0:	defff804 	addi	sp,sp,-32
    f1d4:	df000715 	stw	fp,28(sp)
    f1d8:	df000704 	addi	fp,sp,28
    f1dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f1e0:	e0bfff17 	ldw	r2,-4(fp)
    f1e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f1e8:	e0bffb17 	ldw	r2,-20(fp)
    f1ec:	10800017 	ldw	r2,0(r2)
    f1f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1f4:	e0bffc17 	ldw	r2,-16(fp)
    f1f8:	10800104 	addi	r2,r2,4
    f1fc:	10800037 	ldwio	r2,0(r2)
    f200:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f204:	e0bffd17 	ldw	r2,-12(fp)
    f208:	1080c00c 	andi	r2,r2,768
    f20c:	10006d26 	beq	r2,zero,f3c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f210:	e0bffd17 	ldw	r2,-12(fp)
    f214:	1080400c 	andi	r2,r2,256
    f218:	10003526 	beq	r2,zero,f2f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f21c:	00800074 	movhi	r2,1
    f220:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	10800a17 	ldw	r2,40(r2)
    f22c:	10800044 	addi	r2,r2,1
    f230:	1081ffcc 	andi	r2,r2,2047
    f234:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f238:	e0bffb17 	ldw	r2,-20(fp)
    f23c:	10c00b17 	ldw	r3,44(r2)
    f240:	e0bffe17 	ldw	r2,-8(fp)
    f244:	18801526 	beq	r3,r2,f29c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f248:	e0bffc17 	ldw	r2,-16(fp)
    f24c:	10800037 	ldwio	r2,0(r2)
    f250:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f254:	e0bff917 	ldw	r2,-28(fp)
    f258:	10a0000c 	andi	r2,r2,32768
    f25c:	10001126 	beq	r2,zero,f2a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f260:	e0bffb17 	ldw	r2,-20(fp)
    f264:	10800a17 	ldw	r2,40(r2)
    f268:	e0fff917 	ldw	r3,-28(fp)
    f26c:	1809883a 	mov	r4,r3
    f270:	e0fffb17 	ldw	r3,-20(fp)
    f274:	1885883a 	add	r2,r3,r2
    f278:	10800e04 	addi	r2,r2,56
    f27c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f280:	e0bffb17 	ldw	r2,-20(fp)
    f284:	10800a17 	ldw	r2,40(r2)
    f288:	10800044 	addi	r2,r2,1
    f28c:	10c1ffcc 	andi	r3,r2,2047
    f290:	e0bffb17 	ldw	r2,-20(fp)
    f294:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f298:	003fe206 	br	f224 <__alt_data_end+0xff00f224>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f29c:	0001883a 	nop
    f2a0:	00000106 	br	f2a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f2a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f2a8:	e0bff917 	ldw	r2,-28(fp)
    f2ac:	10bfffec 	andhi	r2,r2,65535
    f2b0:	10000f26 	beq	r2,zero,f2f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f2b4:	e0bffb17 	ldw	r2,-20(fp)
    f2b8:	10c00817 	ldw	r3,32(r2)
    f2bc:	00bfff84 	movi	r2,-2
    f2c0:	1886703a 	and	r3,r3,r2
    f2c4:	e0bffb17 	ldw	r2,-20(fp)
    f2c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f2cc:	e0bffc17 	ldw	r2,-16(fp)
    f2d0:	10800104 	addi	r2,r2,4
    f2d4:	1007883a 	mov	r3,r2
    f2d8:	e0bffb17 	ldw	r2,-20(fp)
    f2dc:	10800817 	ldw	r2,32(r2)
    f2e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f2e4:	e0bffc17 	ldw	r2,-16(fp)
    f2e8:	10800104 	addi	r2,r2,4
    f2ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f2f0:	e0bffd17 	ldw	r2,-12(fp)
    f2f4:	1080800c 	andi	r2,r2,512
    f2f8:	103fbe26 	beq	r2,zero,f1f4 <__alt_data_end+0xff00f1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f2fc:	e0bffd17 	ldw	r2,-12(fp)
    f300:	1004d43a 	srli	r2,r2,16
    f304:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f308:	00001406 	br	f35c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f30c:	e0bffc17 	ldw	r2,-16(fp)
    f310:	e0fffb17 	ldw	r3,-20(fp)
    f314:	18c00d17 	ldw	r3,52(r3)
    f318:	e13ffb17 	ldw	r4,-20(fp)
    f31c:	20c7883a 	add	r3,r4,r3
    f320:	18c20e04 	addi	r3,r3,2104
    f324:	18c00003 	ldbu	r3,0(r3)
    f328:	18c03fcc 	andi	r3,r3,255
    f32c:	18c0201c 	xori	r3,r3,128
    f330:	18ffe004 	addi	r3,r3,-128
    f334:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f338:	e0bffb17 	ldw	r2,-20(fp)
    f33c:	10800d17 	ldw	r2,52(r2)
    f340:	10800044 	addi	r2,r2,1
    f344:	10c1ffcc 	andi	r3,r2,2047
    f348:	e0bffb17 	ldw	r2,-20(fp)
    f34c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f350:	e0bffa17 	ldw	r2,-24(fp)
    f354:	10bfffc4 	addi	r2,r2,-1
    f358:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f35c:	e0bffa17 	ldw	r2,-24(fp)
    f360:	10000526 	beq	r2,zero,f378 <altera_avalon_jtag_uart_irq+0x1a8>
    f364:	e0bffb17 	ldw	r2,-20(fp)
    f368:	10c00d17 	ldw	r3,52(r2)
    f36c:	e0bffb17 	ldw	r2,-20(fp)
    f370:	10800c17 	ldw	r2,48(r2)
    f374:	18bfe51e 	bne	r3,r2,f30c <__alt_data_end+0xff00f30c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f378:	e0bffa17 	ldw	r2,-24(fp)
    f37c:	103f9d26 	beq	r2,zero,f1f4 <__alt_data_end+0xff00f1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f380:	e0bffb17 	ldw	r2,-20(fp)
    f384:	10c00817 	ldw	r3,32(r2)
    f388:	00bfff44 	movi	r2,-3
    f38c:	1886703a 	and	r3,r3,r2
    f390:	e0bffb17 	ldw	r2,-20(fp)
    f394:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f398:	e0bffb17 	ldw	r2,-20(fp)
    f39c:	10800017 	ldw	r2,0(r2)
    f3a0:	10800104 	addi	r2,r2,4
    f3a4:	1007883a 	mov	r3,r2
    f3a8:	e0bffb17 	ldw	r2,-20(fp)
    f3ac:	10800817 	ldw	r2,32(r2)
    f3b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f3b4:	e0bffc17 	ldw	r2,-16(fp)
    f3b8:	10800104 	addi	r2,r2,4
    f3bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f3c0:	003f8c06 	br	f1f4 <__alt_data_end+0xff00f1f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f3c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f3c8:	0001883a 	nop
    f3cc:	e037883a 	mov	sp,fp
    f3d0:	df000017 	ldw	fp,0(sp)
    f3d4:	dec00104 	addi	sp,sp,4
    f3d8:	f800283a 	ret

0000f3dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f3dc:	defff804 	addi	sp,sp,-32
    f3e0:	df000715 	stw	fp,28(sp)
    f3e4:	df000704 	addi	fp,sp,28
    f3e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f3ec:	e0bffb17 	ldw	r2,-20(fp)
    f3f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f3f4:	e0bff917 	ldw	r2,-28(fp)
    f3f8:	10800017 	ldw	r2,0(r2)
    f3fc:	10800104 	addi	r2,r2,4
    f400:	10800037 	ldwio	r2,0(r2)
    f404:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f408:	e0bffa17 	ldw	r2,-24(fp)
    f40c:	1081000c 	andi	r2,r2,1024
    f410:	10000b26 	beq	r2,zero,f440 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f414:	e0bff917 	ldw	r2,-28(fp)
    f418:	10800017 	ldw	r2,0(r2)
    f41c:	10800104 	addi	r2,r2,4
    f420:	1007883a 	mov	r3,r2
    f424:	e0bff917 	ldw	r2,-28(fp)
    f428:	10800817 	ldw	r2,32(r2)
    f42c:	10810014 	ori	r2,r2,1024
    f430:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f434:	e0bff917 	ldw	r2,-28(fp)
    f438:	10000915 	stw	zero,36(r2)
    f43c:	00000a06 	br	f468 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f440:	e0bff917 	ldw	r2,-28(fp)
    f444:	10c00917 	ldw	r3,36(r2)
    f448:	00a00034 	movhi	r2,32768
    f44c:	10bfff04 	addi	r2,r2,-4
    f450:	10c00536 	bltu	r2,r3,f468 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f454:	e0bff917 	ldw	r2,-28(fp)
    f458:	10800917 	ldw	r2,36(r2)
    f45c:	10c00044 	addi	r3,r2,1
    f460:	e0bff917 	ldw	r2,-28(fp)
    f464:	10c00915 	stw	r3,36(r2)
    f468:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f46c:	e037883a 	mov	sp,fp
    f470:	df000017 	ldw	fp,0(sp)
    f474:	dec00104 	addi	sp,sp,4
    f478:	f800283a 	ret

0000f47c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f47c:	defffd04 	addi	sp,sp,-12
    f480:	df000215 	stw	fp,8(sp)
    f484:	df000204 	addi	fp,sp,8
    f488:	e13ffe15 	stw	r4,-8(fp)
    f48c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f490:	00000506 	br	f4a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f494:	e0bfff17 	ldw	r2,-4(fp)
    f498:	1090000c 	andi	r2,r2,16384
    f49c:	10000226 	beq	r2,zero,f4a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f4a0:	00bffd44 	movi	r2,-11
    f4a4:	00000b06 	br	f4d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f4a8:	e0bffe17 	ldw	r2,-8(fp)
    f4ac:	10c00d17 	ldw	r3,52(r2)
    f4b0:	e0bffe17 	ldw	r2,-8(fp)
    f4b4:	10800c17 	ldw	r2,48(r2)
    f4b8:	18800526 	beq	r3,r2,f4d0 <altera_avalon_jtag_uart_close+0x54>
    f4bc:	e0bffe17 	ldw	r2,-8(fp)
    f4c0:	10c00917 	ldw	r3,36(r2)
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	10800117 	ldw	r2,4(r2)
    f4cc:	18bff136 	bltu	r3,r2,f494 <__alt_data_end+0xff00f494>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f4d0:	0005883a 	mov	r2,zero
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	df000017 	ldw	fp,0(sp)
    f4dc:	dec00104 	addi	sp,sp,4
    f4e0:	f800283a 	ret

0000f4e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f4e4:	defffa04 	addi	sp,sp,-24
    f4e8:	df000515 	stw	fp,20(sp)
    f4ec:	df000504 	addi	fp,sp,20
    f4f0:	e13ffd15 	stw	r4,-12(fp)
    f4f4:	e17ffe15 	stw	r5,-8(fp)
    f4f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f4fc:	00bff9c4 	movi	r2,-25
    f500:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f504:	e0bffe17 	ldw	r2,-8(fp)
    f508:	10da8060 	cmpeqi	r3,r2,27137
    f50c:	1800031e 	bne	r3,zero,f51c <altera_avalon_jtag_uart_ioctl+0x38>
    f510:	109a80a0 	cmpeqi	r2,r2,27138
    f514:	1000181e 	bne	r2,zero,f578 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f518:	00002906 	br	f5c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f51c:	e0bffd17 	ldw	r2,-12(fp)
    f520:	10c00117 	ldw	r3,4(r2)
    f524:	00a00034 	movhi	r2,32768
    f528:	10bfffc4 	addi	r2,r2,-1
    f52c:	18802126 	beq	r3,r2,f5b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f530:	e0bfff17 	ldw	r2,-4(fp)
    f534:	10800017 	ldw	r2,0(r2)
    f538:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f53c:	e0bffc17 	ldw	r2,-16(fp)
    f540:	10800090 	cmplti	r2,r2,2
    f544:	1000061e 	bne	r2,zero,f560 <altera_avalon_jtag_uart_ioctl+0x7c>
    f548:	e0fffc17 	ldw	r3,-16(fp)
    f54c:	00a00034 	movhi	r2,32768
    f550:	10bfffc4 	addi	r2,r2,-1
    f554:	18800226 	beq	r3,r2,f560 <altera_avalon_jtag_uart_ioctl+0x7c>
    f558:	e0bffc17 	ldw	r2,-16(fp)
    f55c:	00000206 	br	f568 <altera_avalon_jtag_uart_ioctl+0x84>
    f560:	00a00034 	movhi	r2,32768
    f564:	10bfff84 	addi	r2,r2,-2
    f568:	e0fffd17 	ldw	r3,-12(fp)
    f56c:	18800115 	stw	r2,4(r3)
      rc = 0;
    f570:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f574:	00000f06 	br	f5b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f578:	e0bffd17 	ldw	r2,-12(fp)
    f57c:	10c00117 	ldw	r3,4(r2)
    f580:	00a00034 	movhi	r2,32768
    f584:	10bfffc4 	addi	r2,r2,-1
    f588:	18800c26 	beq	r3,r2,f5bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f58c:	e0bffd17 	ldw	r2,-12(fp)
    f590:	10c00917 	ldw	r3,36(r2)
    f594:	e0bffd17 	ldw	r2,-12(fp)
    f598:	10800117 	ldw	r2,4(r2)
    f59c:	1885803a 	cmpltu	r2,r3,r2
    f5a0:	10c03fcc 	andi	r3,r2,255
    f5a4:	e0bfff17 	ldw	r2,-4(fp)
    f5a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f5ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f5b0:	00000206 	br	f5bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f5b4:	0001883a 	nop
    f5b8:	00000106 	br	f5c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f5bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f5c0:	e0bffb17 	ldw	r2,-20(fp)
}
    f5c4:	e037883a 	mov	sp,fp
    f5c8:	df000017 	ldw	fp,0(sp)
    f5cc:	dec00104 	addi	sp,sp,4
    f5d0:	f800283a 	ret

0000f5d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f5d4:	defff304 	addi	sp,sp,-52
    f5d8:	dfc00c15 	stw	ra,48(sp)
    f5dc:	df000b15 	stw	fp,44(sp)
    f5e0:	df000b04 	addi	fp,sp,44
    f5e4:	e13ffc15 	stw	r4,-16(fp)
    f5e8:	e17ffd15 	stw	r5,-12(fp)
    f5ec:	e1bffe15 	stw	r6,-8(fp)
    f5f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f5f4:	e0bffd17 	ldw	r2,-12(fp)
    f5f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5fc:	00004706 	br	f71c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f600:	e0bffc17 	ldw	r2,-16(fp)
    f604:	10800a17 	ldw	r2,40(r2)
    f608:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f60c:	e0bffc17 	ldw	r2,-16(fp)
    f610:	10800b17 	ldw	r2,44(r2)
    f614:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f618:	e0fff717 	ldw	r3,-36(fp)
    f61c:	e0bff817 	ldw	r2,-32(fp)
    f620:	18800536 	bltu	r3,r2,f638 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f624:	e0fff717 	ldw	r3,-36(fp)
    f628:	e0bff817 	ldw	r2,-32(fp)
    f62c:	1885c83a 	sub	r2,r3,r2
    f630:	e0bff615 	stw	r2,-40(fp)
    f634:	00000406 	br	f648 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f638:	00c20004 	movi	r3,2048
    f63c:	e0bff817 	ldw	r2,-32(fp)
    f640:	1885c83a 	sub	r2,r3,r2
    f644:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f648:	e0bff617 	ldw	r2,-40(fp)
    f64c:	10001e26 	beq	r2,zero,f6c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f650:	e0fffe17 	ldw	r3,-8(fp)
    f654:	e0bff617 	ldw	r2,-40(fp)
    f658:	1880022e 	bgeu	r3,r2,f664 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f65c:	e0bffe17 	ldw	r2,-8(fp)
    f660:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f664:	e0bffc17 	ldw	r2,-16(fp)
    f668:	10c00e04 	addi	r3,r2,56
    f66c:	e0bff817 	ldw	r2,-32(fp)
    f670:	1885883a 	add	r2,r3,r2
    f674:	e1bff617 	ldw	r6,-40(fp)
    f678:	100b883a 	mov	r5,r2
    f67c:	e13ff517 	ldw	r4,-44(fp)
    f680:	00082f80 	call	82f8 <memcpy>
      ptr   += n;
    f684:	e0fff517 	ldw	r3,-44(fp)
    f688:	e0bff617 	ldw	r2,-40(fp)
    f68c:	1885883a 	add	r2,r3,r2
    f690:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f694:	e0fffe17 	ldw	r3,-8(fp)
    f698:	e0bff617 	ldw	r2,-40(fp)
    f69c:	1885c83a 	sub	r2,r3,r2
    f6a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f6a4:	e0fff817 	ldw	r3,-32(fp)
    f6a8:	e0bff617 	ldw	r2,-40(fp)
    f6ac:	1885883a 	add	r2,r3,r2
    f6b0:	10c1ffcc 	andi	r3,r2,2047
    f6b4:	e0bffc17 	ldw	r2,-16(fp)
    f6b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f6bc:	e0bffe17 	ldw	r2,-8(fp)
    f6c0:	00bfcf16 	blt	zero,r2,f600 <__alt_data_end+0xff00f600>
    f6c4:	00000106 	br	f6cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f6c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f6cc:	e0fff517 	ldw	r3,-44(fp)
    f6d0:	e0bffd17 	ldw	r2,-12(fp)
    f6d4:	1880141e 	bne	r3,r2,f728 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f6d8:	e0bfff17 	ldw	r2,-4(fp)
    f6dc:	1090000c 	andi	r2,r2,16384
    f6e0:	1000131e 	bne	r2,zero,f730 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f6e4:	0001883a 	nop
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	10c00a17 	ldw	r3,40(r2)
    f6f0:	e0bff717 	ldw	r2,-36(fp)
    f6f4:	1880051e 	bne	r3,r2,f70c <altera_avalon_jtag_uart_read+0x138>
    f6f8:	e0bffc17 	ldw	r2,-16(fp)
    f6fc:	10c00917 	ldw	r3,36(r2)
    f700:	e0bffc17 	ldw	r2,-16(fp)
    f704:	10800117 	ldw	r2,4(r2)
    f708:	18bff736 	bltu	r3,r2,f6e8 <__alt_data_end+0xff00f6e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f70c:	e0bffc17 	ldw	r2,-16(fp)
    f710:	10c00a17 	ldw	r3,40(r2)
    f714:	e0bff717 	ldw	r2,-36(fp)
    f718:	18800726 	beq	r3,r2,f738 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f71c:	e0bffe17 	ldw	r2,-8(fp)
    f720:	00bfb716 	blt	zero,r2,f600 <__alt_data_end+0xff00f600>
    f724:	00000506 	br	f73c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f728:	0001883a 	nop
    f72c:	00000306 	br	f73c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f730:	0001883a 	nop
    f734:	00000106 	br	f73c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f738:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f73c:	e0fff517 	ldw	r3,-44(fp)
    f740:	e0bffd17 	ldw	r2,-12(fp)
    f744:	18801826 	beq	r3,r2,f7a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f748:	0005303a 	rdctl	r2,status
    f74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f750:	e0fffb17 	ldw	r3,-20(fp)
    f754:	00bfff84 	movi	r2,-2
    f758:	1884703a 	and	r2,r3,r2
    f75c:	1001703a 	wrctl	status,r2
  
  return context;
    f760:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f764:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	10800817 	ldw	r2,32(r2)
    f770:	10c00054 	ori	r3,r2,1
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f77c:	e0bffc17 	ldw	r2,-16(fp)
    f780:	10800017 	ldw	r2,0(r2)
    f784:	10800104 	addi	r2,r2,4
    f788:	1007883a 	mov	r3,r2
    f78c:	e0bffc17 	ldw	r2,-16(fp)
    f790:	10800817 	ldw	r2,32(r2)
    f794:	18800035 	stwio	r2,0(r3)
    f798:	e0bffa17 	ldw	r2,-24(fp)
    f79c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7a0:	e0bff917 	ldw	r2,-28(fp)
    f7a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f7a8:	e0fff517 	ldw	r3,-44(fp)
    f7ac:	e0bffd17 	ldw	r2,-12(fp)
    f7b0:	18800426 	beq	r3,r2,f7c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f7b4:	e0fff517 	ldw	r3,-44(fp)
    f7b8:	e0bffd17 	ldw	r2,-12(fp)
    f7bc:	1885c83a 	sub	r2,r3,r2
    f7c0:	00000606 	br	f7dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f7c4:	e0bfff17 	ldw	r2,-4(fp)
    f7c8:	1090000c 	andi	r2,r2,16384
    f7cc:	10000226 	beq	r2,zero,f7d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f7d0:	00bffd44 	movi	r2,-11
    f7d4:	00000106 	br	f7dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f7d8:	00bffec4 	movi	r2,-5
}
    f7dc:	e037883a 	mov	sp,fp
    f7e0:	dfc00117 	ldw	ra,4(sp)
    f7e4:	df000017 	ldw	fp,0(sp)
    f7e8:	dec00204 	addi	sp,sp,8
    f7ec:	f800283a 	ret

0000f7f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f7f0:	defff304 	addi	sp,sp,-52
    f7f4:	dfc00c15 	stw	ra,48(sp)
    f7f8:	df000b15 	stw	fp,44(sp)
    f7fc:	df000b04 	addi	fp,sp,44
    f800:	e13ffc15 	stw	r4,-16(fp)
    f804:	e17ffd15 	stw	r5,-12(fp)
    f808:	e1bffe15 	stw	r6,-8(fp)
    f80c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f810:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f814:	e0bffd17 	ldw	r2,-12(fp)
    f818:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f81c:	00003706 	br	f8fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f820:	e0bffc17 	ldw	r2,-16(fp)
    f824:	10800c17 	ldw	r2,48(r2)
    f828:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f82c:	e0bffc17 	ldw	r2,-16(fp)
    f830:	10800d17 	ldw	r2,52(r2)
    f834:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f838:	e0fff917 	ldw	r3,-28(fp)
    f83c:	e0bff517 	ldw	r2,-44(fp)
    f840:	1880062e 	bgeu	r3,r2,f85c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f844:	e0fff517 	ldw	r3,-44(fp)
    f848:	e0bff917 	ldw	r2,-28(fp)
    f84c:	1885c83a 	sub	r2,r3,r2
    f850:	10bfffc4 	addi	r2,r2,-1
    f854:	e0bff615 	stw	r2,-40(fp)
    f858:	00000b06 	br	f888 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f85c:	e0bff517 	ldw	r2,-44(fp)
    f860:	10000526 	beq	r2,zero,f878 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f864:	00c20004 	movi	r3,2048
    f868:	e0bff917 	ldw	r2,-28(fp)
    f86c:	1885c83a 	sub	r2,r3,r2
    f870:	e0bff615 	stw	r2,-40(fp)
    f874:	00000406 	br	f888 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f878:	00c1ffc4 	movi	r3,2047
    f87c:	e0bff917 	ldw	r2,-28(fp)
    f880:	1885c83a 	sub	r2,r3,r2
    f884:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f888:	e0bff617 	ldw	r2,-40(fp)
    f88c:	10001e26 	beq	r2,zero,f908 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f890:	e0fffe17 	ldw	r3,-8(fp)
    f894:	e0bff617 	ldw	r2,-40(fp)
    f898:	1880022e 	bgeu	r3,r2,f8a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f89c:	e0bffe17 	ldw	r2,-8(fp)
    f8a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f8a4:	e0bffc17 	ldw	r2,-16(fp)
    f8a8:	10c20e04 	addi	r3,r2,2104
    f8ac:	e0bff917 	ldw	r2,-28(fp)
    f8b0:	1885883a 	add	r2,r3,r2
    f8b4:	e1bff617 	ldw	r6,-40(fp)
    f8b8:	e17ffd17 	ldw	r5,-12(fp)
    f8bc:	1009883a 	mov	r4,r2
    f8c0:	00082f80 	call	82f8 <memcpy>
      ptr   += n;
    f8c4:	e0fffd17 	ldw	r3,-12(fp)
    f8c8:	e0bff617 	ldw	r2,-40(fp)
    f8cc:	1885883a 	add	r2,r3,r2
    f8d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f8d4:	e0fffe17 	ldw	r3,-8(fp)
    f8d8:	e0bff617 	ldw	r2,-40(fp)
    f8dc:	1885c83a 	sub	r2,r3,r2
    f8e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8e4:	e0fff917 	ldw	r3,-28(fp)
    f8e8:	e0bff617 	ldw	r2,-40(fp)
    f8ec:	1885883a 	add	r2,r3,r2
    f8f0:	10c1ffcc 	andi	r3,r2,2047
    f8f4:	e0bffc17 	ldw	r2,-16(fp)
    f8f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8fc:	e0bffe17 	ldw	r2,-8(fp)
    f900:	00bfc716 	blt	zero,r2,f820 <__alt_data_end+0xff00f820>
    f904:	00000106 	br	f90c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f908:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f90c:	0005303a 	rdctl	r2,status
    f910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f914:	e0fffb17 	ldw	r3,-20(fp)
    f918:	00bfff84 	movi	r2,-2
    f91c:	1884703a 	and	r2,r3,r2
    f920:	1001703a 	wrctl	status,r2
  
  return context;
    f924:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f928:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800817 	ldw	r2,32(r2)
    f934:	10c00094 	ori	r3,r2,2
    f938:	e0bffc17 	ldw	r2,-16(fp)
    f93c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f940:	e0bffc17 	ldw	r2,-16(fp)
    f944:	10800017 	ldw	r2,0(r2)
    f948:	10800104 	addi	r2,r2,4
    f94c:	1007883a 	mov	r3,r2
    f950:	e0bffc17 	ldw	r2,-16(fp)
    f954:	10800817 	ldw	r2,32(r2)
    f958:	18800035 	stwio	r2,0(r3)
    f95c:	e0bffa17 	ldw	r2,-24(fp)
    f960:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f964:	e0bff817 	ldw	r2,-32(fp)
    f968:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f96c:	e0bffe17 	ldw	r2,-8(fp)
    f970:	0080100e 	bge	zero,r2,f9b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f974:	e0bfff17 	ldw	r2,-4(fp)
    f978:	1090000c 	andi	r2,r2,16384
    f97c:	1000101e 	bne	r2,zero,f9c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f980:	0001883a 	nop
    f984:	e0bffc17 	ldw	r2,-16(fp)
    f988:	10c00d17 	ldw	r3,52(r2)
    f98c:	e0bff517 	ldw	r2,-44(fp)
    f990:	1880051e 	bne	r3,r2,f9a8 <altera_avalon_jtag_uart_write+0x1b8>
    f994:	e0bffc17 	ldw	r2,-16(fp)
    f998:	10c00917 	ldw	r3,36(r2)
    f99c:	e0bffc17 	ldw	r2,-16(fp)
    f9a0:	10800117 	ldw	r2,4(r2)
    f9a4:	18bff736 	bltu	r3,r2,f984 <__alt_data_end+0xff00f984>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f9a8:	e0bffc17 	ldw	r2,-16(fp)
    f9ac:	10800917 	ldw	r2,36(r2)
    f9b0:	1000051e 	bne	r2,zero,f9c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f9b4:	e0bffe17 	ldw	r2,-8(fp)
    f9b8:	00bfd016 	blt	zero,r2,f8fc <__alt_data_end+0xff00f8fc>
    f9bc:	00000306 	br	f9cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f9c0:	0001883a 	nop
    f9c4:	00000106 	br	f9cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f9c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f9cc:	e0fffd17 	ldw	r3,-12(fp)
    f9d0:	e0bff717 	ldw	r2,-36(fp)
    f9d4:	18800426 	beq	r3,r2,f9e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f9d8:	e0fffd17 	ldw	r3,-12(fp)
    f9dc:	e0bff717 	ldw	r2,-36(fp)
    f9e0:	1885c83a 	sub	r2,r3,r2
    f9e4:	00000606 	br	fa00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f9e8:	e0bfff17 	ldw	r2,-4(fp)
    f9ec:	1090000c 	andi	r2,r2,16384
    f9f0:	10000226 	beq	r2,zero,f9fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f9f4:	00bffd44 	movi	r2,-11
    f9f8:	00000106 	br	fa00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f9fc:	00bffec4 	movi	r2,-5
}
    fa00:	e037883a 	mov	sp,fp
    fa04:	dfc00117 	ldw	ra,4(sp)
    fa08:	df000017 	ldw	fp,0(sp)
    fa0c:	dec00204 	addi	sp,sp,8
    fa10:	f800283a 	ret

0000fa14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fa14:	defffa04 	addi	sp,sp,-24
    fa18:	dfc00515 	stw	ra,20(sp)
    fa1c:	df000415 	stw	fp,16(sp)
    fa20:	df000404 	addi	fp,sp,16
    fa24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fa28:	0007883a 	mov	r3,zero
    fa2c:	e0bfff17 	ldw	r2,-4(fp)
    fa30:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fa34:	e0bfff17 	ldw	r2,-4(fp)
    fa38:	10800104 	addi	r2,r2,4
    fa3c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa40:	0005303a 	rdctl	r2,status
    fa44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa48:	e0fffd17 	ldw	r3,-12(fp)
    fa4c:	00bfff84 	movi	r2,-2
    fa50:	1884703a 	and	r2,r3,r2
    fa54:	1001703a 	wrctl	status,r2
  
  return context;
    fa58:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa5c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa60:	00107900 	call	10790 <alt_tick>
    fa64:	e0bffc17 	ldw	r2,-16(fp)
    fa68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa6c:	e0bffe17 	ldw	r2,-8(fp)
    fa70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fa74:	0001883a 	nop
    fa78:	e037883a 	mov	sp,fp
    fa7c:	dfc00117 	ldw	ra,4(sp)
    fa80:	df000017 	ldw	fp,0(sp)
    fa84:	dec00204 	addi	sp,sp,8
    fa88:	f800283a 	ret

0000fa8c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fa8c:	defff804 	addi	sp,sp,-32
    fa90:	dfc00715 	stw	ra,28(sp)
    fa94:	df000615 	stw	fp,24(sp)
    fa98:	df000604 	addi	fp,sp,24
    fa9c:	e13ffc15 	stw	r4,-16(fp)
    faa0:	e17ffd15 	stw	r5,-12(fp)
    faa4:	e1bffe15 	stw	r6,-8(fp)
    faa8:	e1ffff15 	stw	r7,-4(fp)
    faac:	e0bfff17 	ldw	r2,-4(fp)
    fab0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fab4:	d0a72a17 	ldw	r2,-25432(gp)
    fab8:	1000021e 	bne	r2,zero,fac4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fabc:	e0bffb17 	ldw	r2,-20(fp)
    fac0:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fac4:	e0bffc17 	ldw	r2,-16(fp)
    fac8:	10800104 	addi	r2,r2,4
    facc:	00c001c4 	movi	r3,7
    fad0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fad4:	d8000015 	stw	zero,0(sp)
    fad8:	e1fffc17 	ldw	r7,-16(fp)
    fadc:	01800074 	movhi	r6,1
    fae0:	31be8504 	addi	r6,r6,-1516
    fae4:	e17ffe17 	ldw	r5,-8(fp)
    fae8:	e13ffd17 	ldw	r4,-12(fp)
    faec:	00100c00 	call	100c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    faf0:	0001883a 	nop
    faf4:	e037883a 	mov	sp,fp
    faf8:	dfc00117 	ldw	ra,4(sp)
    fafc:	df000017 	ldw	fp,0(sp)
    fb00:	dec00204 	addi	sp,sp,8
    fb04:	f800283a 	ret

0000fb08 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fb08:	defffe04 	addi	sp,sp,-8
    fb0c:	df000115 	stw	fp,4(sp)
    fb10:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fb14:	d0a72717 	ldw	r2,-25444(gp)
    fb18:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fb1c:	d0a72817 	ldw	r2,-25440(gp)
    fb20:	1000021e 	bne	r2,zero,fb2c <alt_timestamp_start+0x24>
  {
    return -1;
    fb24:	00bfffc4 	movi	r2,-1
    fb28:	00001106 	br	fb70 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fb2c:	e0bfff17 	ldw	r2,-4(fp)
    fb30:	10800104 	addi	r2,r2,4
    fb34:	00c00204 	movi	r3,8
    fb38:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fb3c:	e0bfff17 	ldw	r2,-4(fp)
    fb40:	10800204 	addi	r2,r2,8
    fb44:	00ffffd4 	movui	r3,65535
    fb48:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fb4c:	e0bfff17 	ldw	r2,-4(fp)
    fb50:	10800304 	addi	r2,r2,12
    fb54:	00ffffd4 	movui	r3,65535
    fb58:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fb5c:	e0bfff17 	ldw	r2,-4(fp)
    fb60:	10800104 	addi	r2,r2,4
    fb64:	00c00104 	movi	r3,4
    fb68:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fb6c:	0005883a 	mov	r2,zero
}
    fb70:	e037883a 	mov	sp,fp
    fb74:	df000017 	ldw	fp,0(sp)
    fb78:	dec00104 	addi	sp,sp,4
    fb7c:	f800283a 	ret

0000fb80 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fb80:	defffc04 	addi	sp,sp,-16
    fb84:	df000315 	stw	fp,12(sp)
    fb88:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fb8c:	d0a72717 	ldw	r2,-25444(gp)
    fb90:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fb94:	d0a72817 	ldw	r2,-25440(gp)
    fb98:	1000021e 	bne	r2,zero,fba4 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fb9c:	00bfffc4 	movi	r2,-1
    fba0:	00001306 	br	fbf0 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fba4:	e0bffd17 	ldw	r2,-12(fp)
    fba8:	10800404 	addi	r2,r2,16
    fbac:	0007883a 	mov	r3,zero
    fbb0:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fbb4:	e0bffd17 	ldw	r2,-12(fp)
    fbb8:	10800404 	addi	r2,r2,16
    fbbc:	10800037 	ldwio	r2,0(r2)
    fbc0:	10bfffcc 	andi	r2,r2,65535
    fbc4:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fbc8:	e0bffd17 	ldw	r2,-12(fp)
    fbcc:	10800504 	addi	r2,r2,20
    fbd0:	10800037 	ldwio	r2,0(r2)
    fbd4:	10bfffcc 	andi	r2,r2,65535
    fbd8:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fbdc:	e0bfff17 	ldw	r2,-4(fp)
    fbe0:	1006943a 	slli	r3,r2,16
    fbe4:	e0bffe17 	ldw	r2,-8(fp)
    fbe8:	1884b03a 	or	r2,r3,r2
    fbec:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fbf0:	e037883a 	mov	sp,fp
    fbf4:	df000017 	ldw	fp,0(sp)
    fbf8:	dec00104 	addi	sp,sp,4
    fbfc:	f800283a 	ret

0000fc00 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fc00:	deffff04 	addi	sp,sp,-4
    fc04:	df000015 	stw	fp,0(sp)
    fc08:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fc0c:	d0a72817 	ldw	r2,-25440(gp)
}
    fc10:	e037883a 	mov	sp,fp
    fc14:	df000017 	ldw	fp,0(sp)
    fc18:	dec00104 	addi	sp,sp,4
    fc1c:	f800283a 	ret

0000fc20 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc20:	defff504 	addi	sp,sp,-44
    fc24:	df000a15 	stw	fp,40(sp)
    fc28:	df000a04 	addi	fp,sp,40
    fc2c:	e13ffc15 	stw	r4,-16(fp)
    fc30:	e17ffd15 	stw	r5,-12(fp)
    fc34:	e1bffe15 	stw	r6,-8(fp)
    fc38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fc3c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fc40:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
    fc44:	10003c26 	beq	r2,zero,fd38 <alt_alarm_start+0x118>
  {
    if (alarm)
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	10003826 	beq	r2,zero,fd30 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fc50:	e0bffc17 	ldw	r2,-16(fp)
    fc54:	e0fffe17 	ldw	r3,-8(fp)
    fc58:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fc5c:	e0bffc17 	ldw	r2,-16(fp)
    fc60:	e0ffff17 	ldw	r3,-4(fp)
    fc64:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc68:	0005303a 	rdctl	r2,status
    fc6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc70:	e0fff917 	ldw	r3,-28(fp)
    fc74:	00bfff84 	movi	r2,-2
    fc78:	1884703a 	and	r2,r3,r2
    fc7c:	1001703a 	wrctl	status,r2
  
  return context;
    fc80:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fc84:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fc88:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
    fc8c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fc90:	e0fffd17 	ldw	r3,-12(fp)
    fc94:	e0bff617 	ldw	r2,-40(fp)
    fc98:	1885883a 	add	r2,r3,r2
    fc9c:	10c00044 	addi	r3,r2,1
    fca0:	e0bffc17 	ldw	r2,-16(fp)
    fca4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fca8:	e0bffc17 	ldw	r2,-16(fp)
    fcac:	10c00217 	ldw	r3,8(r2)
    fcb0:	e0bff617 	ldw	r2,-40(fp)
    fcb4:	1880042e 	bgeu	r3,r2,fcc8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fcb8:	e0bffc17 	ldw	r2,-16(fp)
    fcbc:	00c00044 	movi	r3,1
    fcc0:	10c00405 	stb	r3,16(r2)
    fcc4:	00000206 	br	fcd0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fcc8:	e0bffc17 	ldw	r2,-16(fp)
    fccc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fcd0:	e0bffc17 	ldw	r2,-16(fp)
    fcd4:	d0e00e04 	addi	r3,gp,-32712
    fcd8:	e0fffa15 	stw	r3,-24(fp)
    fcdc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fce0:	e0bffb17 	ldw	r2,-20(fp)
    fce4:	e0fffa17 	ldw	r3,-24(fp)
    fce8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fcec:	e0bffa17 	ldw	r2,-24(fp)
    fcf0:	10c00017 	ldw	r3,0(r2)
    fcf4:	e0bffb17 	ldw	r2,-20(fp)
    fcf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fcfc:	e0bffa17 	ldw	r2,-24(fp)
    fd00:	10800017 	ldw	r2,0(r2)
    fd04:	e0fffb17 	ldw	r3,-20(fp)
    fd08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fd0c:	e0bffa17 	ldw	r2,-24(fp)
    fd10:	e0fffb17 	ldw	r3,-20(fp)
    fd14:	10c00015 	stw	r3,0(r2)
    fd18:	e0bff817 	ldw	r2,-32(fp)
    fd1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd20:	e0bff717 	ldw	r2,-36(fp)
    fd24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fd28:	0005883a 	mov	r2,zero
    fd2c:	00000306 	br	fd3c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fd30:	00bffa84 	movi	r2,-22
    fd34:	00000106 	br	fd3c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fd38:	00bfde84 	movi	r2,-134
  }
}
    fd3c:	e037883a 	mov	sp,fp
    fd40:	df000017 	ldw	fp,0(sp)
    fd44:	dec00104 	addi	sp,sp,4
    fd48:	f800283a 	ret

0000fd4c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fd4c:	defffa04 	addi	sp,sp,-24
    fd50:	dfc00515 	stw	ra,20(sp)
    fd54:	df000415 	stw	fp,16(sp)
    fd58:	df000404 	addi	fp,sp,16
    fd5c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fd60:	008000c4 	movi	r2,3
    fd64:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fd68:	e0fffd17 	ldw	r3,-12(fp)
    fd6c:	008003f4 	movhi	r2,15
    fd70:	10909004 	addi	r2,r2,16960
    fd74:	1885383a 	mul	r2,r3,r2
    fd78:	100b883a 	mov	r5,r2
    fd7c:	0100bef4 	movhi	r4,763
    fd80:	213c2004 	addi	r4,r4,-3968
    fd84:	0001d000 	call	1d00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fd88:	100b883a 	mov	r5,r2
    fd8c:	01200034 	movhi	r4,32768
    fd90:	213fffc4 	addi	r4,r4,-1
    fd94:	0001d000 	call	1d00 <__udivsi3>
    fd98:	100b883a 	mov	r5,r2
    fd9c:	e13fff17 	ldw	r4,-4(fp)
    fda0:	0001d000 	call	1d00 <__udivsi3>
    fda4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fda8:	e0bffe17 	ldw	r2,-8(fp)
    fdac:	10002a26 	beq	r2,zero,fe58 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fdb0:	e03ffc15 	stw	zero,-16(fp)
    fdb4:	00001706 	br	fe14 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fdb8:	00a00034 	movhi	r2,32768
    fdbc:	10bfffc4 	addi	r2,r2,-1
    fdc0:	10bfffc4 	addi	r2,r2,-1
    fdc4:	103ffe1e 	bne	r2,zero,fdc0 <__alt_data_end+0xff00fdc0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fdc8:	e0fffd17 	ldw	r3,-12(fp)
    fdcc:	008003f4 	movhi	r2,15
    fdd0:	10909004 	addi	r2,r2,16960
    fdd4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fdd8:	100b883a 	mov	r5,r2
    fddc:	0100bef4 	movhi	r4,763
    fde0:	213c2004 	addi	r4,r4,-3968
    fde4:	0001d000 	call	1d00 <__udivsi3>
    fde8:	100b883a 	mov	r5,r2
    fdec:	01200034 	movhi	r4,32768
    fdf0:	213fffc4 	addi	r4,r4,-1
    fdf4:	0001d000 	call	1d00 <__udivsi3>
    fdf8:	1007883a 	mov	r3,r2
    fdfc:	e0bfff17 	ldw	r2,-4(fp)
    fe00:	10c5c83a 	sub	r2,r2,r3
    fe04:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fe08:	e0bffc17 	ldw	r2,-16(fp)
    fe0c:	10800044 	addi	r2,r2,1
    fe10:	e0bffc15 	stw	r2,-16(fp)
    fe14:	e0fffc17 	ldw	r3,-16(fp)
    fe18:	e0bffe17 	ldw	r2,-8(fp)
    fe1c:	18bfe616 	blt	r3,r2,fdb8 <__alt_data_end+0xff00fdb8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe20:	e0fffd17 	ldw	r3,-12(fp)
    fe24:	008003f4 	movhi	r2,15
    fe28:	10909004 	addi	r2,r2,16960
    fe2c:	1885383a 	mul	r2,r3,r2
    fe30:	100b883a 	mov	r5,r2
    fe34:	0100bef4 	movhi	r4,763
    fe38:	213c2004 	addi	r4,r4,-3968
    fe3c:	0001d000 	call	1d00 <__udivsi3>
    fe40:	1007883a 	mov	r3,r2
    fe44:	e0bfff17 	ldw	r2,-4(fp)
    fe48:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe4c:	10bfffc4 	addi	r2,r2,-1
    fe50:	103ffe1e 	bne	r2,zero,fe4c <__alt_data_end+0xff00fe4c>
    fe54:	00000d06 	br	fe8c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe58:	e0fffd17 	ldw	r3,-12(fp)
    fe5c:	008003f4 	movhi	r2,15
    fe60:	10909004 	addi	r2,r2,16960
    fe64:	1885383a 	mul	r2,r3,r2
    fe68:	100b883a 	mov	r5,r2
    fe6c:	0100bef4 	movhi	r4,763
    fe70:	213c2004 	addi	r4,r4,-3968
    fe74:	0001d000 	call	1d00 <__udivsi3>
    fe78:	1007883a 	mov	r3,r2
    fe7c:	e0bfff17 	ldw	r2,-4(fp)
    fe80:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe84:	10bfffc4 	addi	r2,r2,-1
    fe88:	00bffe16 	blt	zero,r2,fe84 <__alt_data_end+0xff00fe84>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fe8c:	0005883a 	mov	r2,zero
}
    fe90:	e037883a 	mov	sp,fp
    fe94:	dfc00117 	ldw	ra,4(sp)
    fe98:	df000017 	ldw	fp,0(sp)
    fe9c:	dec00204 	addi	sp,sp,8
    fea0:	f800283a 	ret

0000fea4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fea4:	defffe04 	addi	sp,sp,-8
    fea8:	df000115 	stw	fp,4(sp)
    feac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    feb0:	e03fff15 	stw	zero,-4(fp)
    feb4:	00000506 	br	fecc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    feb8:	e0bfff17 	ldw	r2,-4(fp)
    febc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fec0:	e0bfff17 	ldw	r2,-4(fp)
    fec4:	10800804 	addi	r2,r2,32
    fec8:	e0bfff15 	stw	r2,-4(fp)
    fecc:	e0bfff17 	ldw	r2,-4(fp)
    fed0:	10a00030 	cmpltui	r2,r2,32768
    fed4:	103ff81e 	bne	r2,zero,feb8 <__alt_data_end+0xff00feb8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fed8:	0001883a 	nop
    fedc:	e037883a 	mov	sp,fp
    fee0:	df000017 	ldw	fp,0(sp)
    fee4:	dec00104 	addi	sp,sp,4
    fee8:	f800283a 	ret

0000feec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    feec:	defffe04 	addi	sp,sp,-8
    fef0:	dfc00115 	stw	ra,4(sp)
    fef4:	df000015 	stw	fp,0(sp)
    fef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fefc:	d0a00b17 	ldw	r2,-32724(gp)
    ff00:	10000326 	beq	r2,zero,ff10 <alt_get_errno+0x24>
    ff04:	d0a00b17 	ldw	r2,-32724(gp)
    ff08:	103ee83a 	callr	r2
    ff0c:	00000106 	br	ff14 <alt_get_errno+0x28>
    ff10:	d0a72004 	addi	r2,gp,-25472
}
    ff14:	e037883a 	mov	sp,fp
    ff18:	dfc00117 	ldw	ra,4(sp)
    ff1c:	df000017 	ldw	fp,0(sp)
    ff20:	dec00204 	addi	sp,sp,8
    ff24:	f800283a 	ret

0000ff28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ff28:	defffa04 	addi	sp,sp,-24
    ff2c:	dfc00515 	stw	ra,20(sp)
    ff30:	df000415 	stw	fp,16(sp)
    ff34:	df000404 	addi	fp,sp,16
    ff38:	e13ffe15 	stw	r4,-8(fp)
    ff3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff40:	e0bffe17 	ldw	r2,-8(fp)
    ff44:	10000326 	beq	r2,zero,ff54 <alt_dev_llist_insert+0x2c>
    ff48:	e0bffe17 	ldw	r2,-8(fp)
    ff4c:	10800217 	ldw	r2,8(r2)
    ff50:	1000061e 	bne	r2,zero,ff6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff54:	000feec0 	call	feec <alt_get_errno>
    ff58:	1007883a 	mov	r3,r2
    ff5c:	00800584 	movi	r2,22
    ff60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ff64:	00bffa84 	movi	r2,-22
    ff68:	00001306 	br	ffb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ff6c:	e0bffe17 	ldw	r2,-8(fp)
    ff70:	e0ffff17 	ldw	r3,-4(fp)
    ff74:	e0fffc15 	stw	r3,-16(fp)
    ff78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ff7c:	e0bffd17 	ldw	r2,-12(fp)
    ff80:	e0fffc17 	ldw	r3,-16(fp)
    ff84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ff88:	e0bffc17 	ldw	r2,-16(fp)
    ff8c:	10c00017 	ldw	r3,0(r2)
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ff98:	e0bffc17 	ldw	r2,-16(fp)
    ff9c:	10800017 	ldw	r2,0(r2)
    ffa0:	e0fffd17 	ldw	r3,-12(fp)
    ffa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	e0fffd17 	ldw	r3,-12(fp)
    ffb0:	10c00015 	stw	r3,0(r2)

  return 0;  
    ffb4:	0005883a 	mov	r2,zero
}
    ffb8:	e037883a 	mov	sp,fp
    ffbc:	dfc00117 	ldw	ra,4(sp)
    ffc0:	df000017 	ldw	fp,0(sp)
    ffc4:	dec00204 	addi	sp,sp,8
    ffc8:	f800283a 	ret

0000ffcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ffcc:	defffd04 	addi	sp,sp,-12
    ffd0:	dfc00215 	stw	ra,8(sp)
    ffd4:	df000115 	stw	fp,4(sp)
    ffd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffdc:	00800074 	movhi	r2,1
    ffe0:	1083ed04 	addi	r2,r2,4020
    ffe4:	e0bfff15 	stw	r2,-4(fp)
    ffe8:	00000606 	br	10004 <_do_ctors+0x38>
        (*ctor) (); 
    ffec:	e0bfff17 	ldw	r2,-4(fp)
    fff0:	10800017 	ldw	r2,0(r2)
    fff4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fff8:	e0bfff17 	ldw	r2,-4(fp)
    fffc:	10bfff04 	addi	r2,r2,-4
   10000:	e0bfff15 	stw	r2,-4(fp)
   10004:	e0ffff17 	ldw	r3,-4(fp)
   10008:	00800074 	movhi	r2,1
   1000c:	1083ee04 	addi	r2,r2,4024
   10010:	18bff62e 	bgeu	r3,r2,ffec <__alt_data_end+0xff00ffec>
        (*ctor) (); 
}
   10014:	0001883a 	nop
   10018:	e037883a 	mov	sp,fp
   1001c:	dfc00117 	ldw	ra,4(sp)
   10020:	df000017 	ldw	fp,0(sp)
   10024:	dec00204 	addi	sp,sp,8
   10028:	f800283a 	ret

0001002c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1002c:	defffd04 	addi	sp,sp,-12
   10030:	dfc00215 	stw	ra,8(sp)
   10034:	df000115 	stw	fp,4(sp)
   10038:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1003c:	00800074 	movhi	r2,1
   10040:	1083ed04 	addi	r2,r2,4020
   10044:	e0bfff15 	stw	r2,-4(fp)
   10048:	00000606 	br	10064 <_do_dtors+0x38>
        (*dtor) (); 
   1004c:	e0bfff17 	ldw	r2,-4(fp)
   10050:	10800017 	ldw	r2,0(r2)
   10054:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	10bfff04 	addi	r2,r2,-4
   10060:	e0bfff15 	stw	r2,-4(fp)
   10064:	e0ffff17 	ldw	r3,-4(fp)
   10068:	00800074 	movhi	r2,1
   1006c:	1083ee04 	addi	r2,r2,4024
   10070:	18bff62e 	bgeu	r3,r2,1004c <__alt_data_end+0xff01004c>
        (*dtor) (); 
}
   10074:	0001883a 	nop
   10078:	e037883a 	mov	sp,fp
   1007c:	dfc00117 	ldw	ra,4(sp)
   10080:	df000017 	ldw	fp,0(sp)
   10084:	dec00204 	addi	sp,sp,8
   10088:	f800283a 	ret

0001008c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1008c:	defffe04 	addi	sp,sp,-8
   10090:	dfc00115 	stw	ra,4(sp)
   10094:	df000015 	stw	fp,0(sp)
   10098:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1009c:	01440004 	movi	r5,4096
   100a0:	0009883a 	mov	r4,zero
   100a4:	0010af80 	call	10af8 <alt_icache_flush>
#endif
}
   100a8:	0001883a 	nop
   100ac:	e037883a 	mov	sp,fp
   100b0:	dfc00117 	ldw	ra,4(sp)
   100b4:	df000017 	ldw	fp,0(sp)
   100b8:	dec00204 	addi	sp,sp,8
   100bc:	f800283a 	ret

000100c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   100c0:	defff904 	addi	sp,sp,-28
   100c4:	dfc00615 	stw	ra,24(sp)
   100c8:	df000515 	stw	fp,20(sp)
   100cc:	df000504 	addi	fp,sp,20
   100d0:	e13ffc15 	stw	r4,-16(fp)
   100d4:	e17ffd15 	stw	r5,-12(fp)
   100d8:	e1bffe15 	stw	r6,-8(fp)
   100dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   100e0:	e0800217 	ldw	r2,8(fp)
   100e4:	d8800015 	stw	r2,0(sp)
   100e8:	e1ffff17 	ldw	r7,-4(fp)
   100ec:	e1bffe17 	ldw	r6,-8(fp)
   100f0:	e17ffd17 	ldw	r5,-12(fp)
   100f4:	e13ffc17 	ldw	r4,-16(fp)
   100f8:	00102700 	call	10270 <alt_iic_isr_register>
}  
   100fc:	e037883a 	mov	sp,fp
   10100:	dfc00117 	ldw	ra,4(sp)
   10104:	df000017 	ldw	fp,0(sp)
   10108:	dec00204 	addi	sp,sp,8
   1010c:	f800283a 	ret

00010110 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10110:	defff904 	addi	sp,sp,-28
   10114:	df000615 	stw	fp,24(sp)
   10118:	df000604 	addi	fp,sp,24
   1011c:	e13ffe15 	stw	r4,-8(fp)
   10120:	e17fff15 	stw	r5,-4(fp)
   10124:	e0bfff17 	ldw	r2,-4(fp)
   10128:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1012c:	0005303a 	rdctl	r2,status
   10130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10134:	e0fffb17 	ldw	r3,-20(fp)
   10138:	00bfff84 	movi	r2,-2
   1013c:	1884703a 	and	r2,r3,r2
   10140:	1001703a 	wrctl	status,r2
  
  return context;
   10144:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10148:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1014c:	00c00044 	movi	r3,1
   10150:	e0bffa17 	ldw	r2,-24(fp)
   10154:	1884983a 	sll	r2,r3,r2
   10158:	1007883a 	mov	r3,r2
   1015c:	d0a72917 	ldw	r2,-25436(gp)
   10160:	1884b03a 	or	r2,r3,r2
   10164:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10168:	d0a72917 	ldw	r2,-25436(gp)
   1016c:	100170fa 	wrctl	ienable,r2
   10170:	e0bffc17 	ldw	r2,-16(fp)
   10174:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10178:	e0bffd17 	ldw	r2,-12(fp)
   1017c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10180:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10184:	0001883a 	nop
}
   10188:	e037883a 	mov	sp,fp
   1018c:	df000017 	ldw	fp,0(sp)
   10190:	dec00104 	addi	sp,sp,4
   10194:	f800283a 	ret

00010198 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10198:	defff904 	addi	sp,sp,-28
   1019c:	df000615 	stw	fp,24(sp)
   101a0:	df000604 	addi	fp,sp,24
   101a4:	e13ffe15 	stw	r4,-8(fp)
   101a8:	e17fff15 	stw	r5,-4(fp)
   101ac:	e0bfff17 	ldw	r2,-4(fp)
   101b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101b4:	0005303a 	rdctl	r2,status
   101b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101bc:	e0fffb17 	ldw	r3,-20(fp)
   101c0:	00bfff84 	movi	r2,-2
   101c4:	1884703a 	and	r2,r3,r2
   101c8:	1001703a 	wrctl	status,r2
  
  return context;
   101cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   101d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   101d4:	00c00044 	movi	r3,1
   101d8:	e0bffa17 	ldw	r2,-24(fp)
   101dc:	1884983a 	sll	r2,r3,r2
   101e0:	0084303a 	nor	r2,zero,r2
   101e4:	1007883a 	mov	r3,r2
   101e8:	d0a72917 	ldw	r2,-25436(gp)
   101ec:	1884703a 	and	r2,r3,r2
   101f0:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101f4:	d0a72917 	ldw	r2,-25436(gp)
   101f8:	100170fa 	wrctl	ienable,r2
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10204:	e0bffd17 	ldw	r2,-12(fp)
   10208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1020c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10210:	0001883a 	nop
}
   10214:	e037883a 	mov	sp,fp
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00104 	addi	sp,sp,4
   10220:	f800283a 	ret

00010224 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10224:	defffc04 	addi	sp,sp,-16
   10228:	df000315 	stw	fp,12(sp)
   1022c:	df000304 	addi	fp,sp,12
   10230:	e13ffe15 	stw	r4,-8(fp)
   10234:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10238:	000530fa 	rdctl	r2,ienable
   1023c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10240:	00c00044 	movi	r3,1
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	1884983a 	sll	r2,r3,r2
   1024c:	1007883a 	mov	r3,r2
   10250:	e0bffd17 	ldw	r2,-12(fp)
   10254:	1884703a 	and	r2,r3,r2
   10258:	1004c03a 	cmpne	r2,r2,zero
   1025c:	10803fcc 	andi	r2,r2,255
}
   10260:	e037883a 	mov	sp,fp
   10264:	df000017 	ldw	fp,0(sp)
   10268:	dec00104 	addi	sp,sp,4
   1026c:	f800283a 	ret

00010270 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10270:	defff504 	addi	sp,sp,-44
   10274:	dfc00a15 	stw	ra,40(sp)
   10278:	df000915 	stw	fp,36(sp)
   1027c:	df000904 	addi	fp,sp,36
   10280:	e13ffc15 	stw	r4,-16(fp)
   10284:	e17ffd15 	stw	r5,-12(fp)
   10288:	e1bffe15 	stw	r6,-8(fp)
   1028c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10290:	00bffa84 	movi	r2,-22
   10294:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10298:	e0bffd17 	ldw	r2,-12(fp)
   1029c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   102a0:	e0bff817 	ldw	r2,-32(fp)
   102a4:	10800808 	cmpgei	r2,r2,32
   102a8:	1000271e 	bne	r2,zero,10348 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102ac:	0005303a 	rdctl	r2,status
   102b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102b4:	e0fffb17 	ldw	r3,-20(fp)
   102b8:	00bfff84 	movi	r2,-2
   102bc:	1884703a 	and	r2,r3,r2
   102c0:	1001703a 	wrctl	status,r2
  
  return context;
   102c4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   102c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   102cc:	00800074 	movhi	r2,1
   102d0:	1093ff04 	addi	r2,r2,20476
   102d4:	e0fff817 	ldw	r3,-32(fp)
   102d8:	180690fa 	slli	r3,r3,3
   102dc:	10c5883a 	add	r2,r2,r3
   102e0:	e0fffe17 	ldw	r3,-8(fp)
   102e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   102e8:	00800074 	movhi	r2,1
   102ec:	1093ff04 	addi	r2,r2,20476
   102f0:	e0fff817 	ldw	r3,-32(fp)
   102f4:	180690fa 	slli	r3,r3,3
   102f8:	10c5883a 	add	r2,r2,r3
   102fc:	10800104 	addi	r2,r2,4
   10300:	e0ffff17 	ldw	r3,-4(fp)
   10304:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10308:	e0bffe17 	ldw	r2,-8(fp)
   1030c:	10000526 	beq	r2,zero,10324 <alt_iic_isr_register+0xb4>
   10310:	e0bff817 	ldw	r2,-32(fp)
   10314:	100b883a 	mov	r5,r2
   10318:	e13ffc17 	ldw	r4,-16(fp)
   1031c:	00101100 	call	10110 <alt_ic_irq_enable>
   10320:	00000406 	br	10334 <alt_iic_isr_register+0xc4>
   10324:	e0bff817 	ldw	r2,-32(fp)
   10328:	100b883a 	mov	r5,r2
   1032c:	e13ffc17 	ldw	r4,-16(fp)
   10330:	00101980 	call	10198 <alt_ic_irq_disable>
   10334:	e0bff715 	stw	r2,-36(fp)
   10338:	e0bffa17 	ldw	r2,-24(fp)
   1033c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10340:	e0bff917 	ldw	r2,-28(fp)
   10344:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10348:	e0bff717 	ldw	r2,-36(fp)
}
   1034c:	e037883a 	mov	sp,fp
   10350:	dfc00117 	ldw	ra,4(sp)
   10354:	df000017 	ldw	fp,0(sp)
   10358:	dec00204 	addi	sp,sp,8
   1035c:	f800283a 	ret

00010360 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10360:	defff904 	addi	sp,sp,-28
   10364:	dfc00615 	stw	ra,24(sp)
   10368:	df000515 	stw	fp,20(sp)
   1036c:	df000504 	addi	fp,sp,20
   10370:	e13ffc15 	stw	r4,-16(fp)
   10374:	e17ffd15 	stw	r5,-12(fp)
   10378:	e1bffe15 	stw	r6,-8(fp)
   1037c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10380:	e1bfff17 	ldw	r6,-4(fp)
   10384:	e17ffe17 	ldw	r5,-8(fp)
   10388:	e13ffd17 	ldw	r4,-12(fp)
   1038c:	00105a00 	call	105a0 <open>
   10390:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10394:	e0bffb17 	ldw	r2,-20(fp)
   10398:	10001c16 	blt	r2,zero,1040c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1039c:	00800074 	movhi	r2,1
   103a0:	10885004 	addi	r2,r2,8512
   103a4:	e0fffb17 	ldw	r3,-20(fp)
   103a8:	18c00324 	muli	r3,r3,12
   103ac:	10c5883a 	add	r2,r2,r3
   103b0:	10c00017 	ldw	r3,0(r2)
   103b4:	e0bffc17 	ldw	r2,-16(fp)
   103b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   103bc:	00800074 	movhi	r2,1
   103c0:	10885004 	addi	r2,r2,8512
   103c4:	e0fffb17 	ldw	r3,-20(fp)
   103c8:	18c00324 	muli	r3,r3,12
   103cc:	10c5883a 	add	r2,r2,r3
   103d0:	10800104 	addi	r2,r2,4
   103d4:	10c00017 	ldw	r3,0(r2)
   103d8:	e0bffc17 	ldw	r2,-16(fp)
   103dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   103e0:	00800074 	movhi	r2,1
   103e4:	10885004 	addi	r2,r2,8512
   103e8:	e0fffb17 	ldw	r3,-20(fp)
   103ec:	18c00324 	muli	r3,r3,12
   103f0:	10c5883a 	add	r2,r2,r3
   103f4:	10800204 	addi	r2,r2,8
   103f8:	10c00017 	ldw	r3,0(r2)
   103fc:	e0bffc17 	ldw	r2,-16(fp)
   10400:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10404:	e13ffb17 	ldw	r4,-20(fp)
   10408:	000ec4c0 	call	ec4c <alt_release_fd>
  }
} 
   1040c:	0001883a 	nop
   10410:	e037883a 	mov	sp,fp
   10414:	dfc00117 	ldw	ra,4(sp)
   10418:	df000017 	ldw	fp,0(sp)
   1041c:	dec00204 	addi	sp,sp,8
   10420:	f800283a 	ret

00010424 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10424:	defffb04 	addi	sp,sp,-20
   10428:	dfc00415 	stw	ra,16(sp)
   1042c:	df000315 	stw	fp,12(sp)
   10430:	df000304 	addi	fp,sp,12
   10434:	e13ffd15 	stw	r4,-12(fp)
   10438:	e17ffe15 	stw	r5,-8(fp)
   1043c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10440:	01c07fc4 	movi	r7,511
   10444:	01800044 	movi	r6,1
   10448:	e17ffd17 	ldw	r5,-12(fp)
   1044c:	01000074 	movhi	r4,1
   10450:	21085304 	addi	r4,r4,8524
   10454:	00103600 	call	10360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10458:	01c07fc4 	movi	r7,511
   1045c:	000d883a 	mov	r6,zero
   10460:	e17ffe17 	ldw	r5,-8(fp)
   10464:	01000074 	movhi	r4,1
   10468:	21085004 	addi	r4,r4,8512
   1046c:	00103600 	call	10360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10470:	01c07fc4 	movi	r7,511
   10474:	01800044 	movi	r6,1
   10478:	e17fff17 	ldw	r5,-4(fp)
   1047c:	01000074 	movhi	r4,1
   10480:	21085604 	addi	r4,r4,8536
   10484:	00103600 	call	10360 <alt_open_fd>
}  
   10488:	0001883a 	nop
   1048c:	e037883a 	mov	sp,fp
   10490:	dfc00117 	ldw	ra,4(sp)
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00204 	addi	sp,sp,8
   1049c:	f800283a 	ret

000104a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   104a0:	defffe04 	addi	sp,sp,-8
   104a4:	dfc00115 	stw	ra,4(sp)
   104a8:	df000015 	stw	fp,0(sp)
   104ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104b0:	d0a00b17 	ldw	r2,-32724(gp)
   104b4:	10000326 	beq	r2,zero,104c4 <alt_get_errno+0x24>
   104b8:	d0a00b17 	ldw	r2,-32724(gp)
   104bc:	103ee83a 	callr	r2
   104c0:	00000106 	br	104c8 <alt_get_errno+0x28>
   104c4:	d0a72004 	addi	r2,gp,-25472
}
   104c8:	e037883a 	mov	sp,fp
   104cc:	dfc00117 	ldw	ra,4(sp)
   104d0:	df000017 	ldw	fp,0(sp)
   104d4:	dec00204 	addi	sp,sp,8
   104d8:	f800283a 	ret

000104dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   104dc:	defffd04 	addi	sp,sp,-12
   104e0:	df000215 	stw	fp,8(sp)
   104e4:	df000204 	addi	fp,sp,8
   104e8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   104ec:	e0bfff17 	ldw	r2,-4(fp)
   104f0:	10800217 	ldw	r2,8(r2)
   104f4:	10d00034 	orhi	r3,r2,16384
   104f8:	e0bfff17 	ldw	r2,-4(fp)
   104fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10500:	e03ffe15 	stw	zero,-8(fp)
   10504:	00001d06 	br	1057c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10508:	00800074 	movhi	r2,1
   1050c:	10885004 	addi	r2,r2,8512
   10510:	e0fffe17 	ldw	r3,-8(fp)
   10514:	18c00324 	muli	r3,r3,12
   10518:	10c5883a 	add	r2,r2,r3
   1051c:	10c00017 	ldw	r3,0(r2)
   10520:	e0bfff17 	ldw	r2,-4(fp)
   10524:	10800017 	ldw	r2,0(r2)
   10528:	1880111e 	bne	r3,r2,10570 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1052c:	00800074 	movhi	r2,1
   10530:	10885004 	addi	r2,r2,8512
   10534:	e0fffe17 	ldw	r3,-8(fp)
   10538:	18c00324 	muli	r3,r3,12
   1053c:	10c5883a 	add	r2,r2,r3
   10540:	10800204 	addi	r2,r2,8
   10544:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10548:	1000090e 	bge	r2,zero,10570 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1054c:	e0bffe17 	ldw	r2,-8(fp)
   10550:	10c00324 	muli	r3,r2,12
   10554:	00800074 	movhi	r2,1
   10558:	10885004 	addi	r2,r2,8512
   1055c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	18800226 	beq	r3,r2,10570 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10568:	00bffcc4 	movi	r2,-13
   1056c:	00000806 	br	10590 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10570:	e0bffe17 	ldw	r2,-8(fp)
   10574:	10800044 	addi	r2,r2,1
   10578:	e0bffe15 	stw	r2,-8(fp)
   1057c:	d0a00a17 	ldw	r2,-32728(gp)
   10580:	1007883a 	mov	r3,r2
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	18bfdf2e 	bgeu	r3,r2,10508 <__alt_data_end+0xff010508>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1058c:	0005883a 	mov	r2,zero
}
   10590:	e037883a 	mov	sp,fp
   10594:	df000017 	ldw	fp,0(sp)
   10598:	dec00104 	addi	sp,sp,4
   1059c:	f800283a 	ret

000105a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   105a0:	defff604 	addi	sp,sp,-40
   105a4:	dfc00915 	stw	ra,36(sp)
   105a8:	df000815 	stw	fp,32(sp)
   105ac:	df000804 	addi	fp,sp,32
   105b0:	e13ffd15 	stw	r4,-12(fp)
   105b4:	e17ffe15 	stw	r5,-8(fp)
   105b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   105bc:	00bfffc4 	movi	r2,-1
   105c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   105c4:	00bffb44 	movi	r2,-19
   105c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   105cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   105d0:	d1600804 	addi	r5,gp,-32736
   105d4:	e13ffd17 	ldw	r4,-12(fp)
   105d8:	00108bc0 	call	108bc <alt_find_dev>
   105dc:	e0bff815 	stw	r2,-32(fp)
   105e0:	e0bff817 	ldw	r2,-32(fp)
   105e4:	1000051e 	bne	r2,zero,105fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   105e8:	e13ffd17 	ldw	r4,-12(fp)
   105ec:	001094c0 	call	1094c <alt_find_file>
   105f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   105f4:	00800044 	movi	r2,1
   105f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   105fc:	e0bff817 	ldw	r2,-32(fp)
   10600:	10002926 	beq	r2,zero,106a8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10604:	e13ff817 	ldw	r4,-32(fp)
   10608:	0010a540 	call	10a54 <alt_get_fd>
   1060c:	e0bff915 	stw	r2,-28(fp)
   10610:	e0bff917 	ldw	r2,-28(fp)
   10614:	1000030e 	bge	r2,zero,10624 <open+0x84>
    {
      status = index;
   10618:	e0bff917 	ldw	r2,-28(fp)
   1061c:	e0bffa15 	stw	r2,-24(fp)
   10620:	00002306 	br	106b0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10624:	e0bff917 	ldw	r2,-28(fp)
   10628:	10c00324 	muli	r3,r2,12
   1062c:	00800074 	movhi	r2,1
   10630:	10885004 	addi	r2,r2,8512
   10634:	1885883a 	add	r2,r3,r2
   10638:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1063c:	e0fffe17 	ldw	r3,-8(fp)
   10640:	00900034 	movhi	r2,16384
   10644:	10bfffc4 	addi	r2,r2,-1
   10648:	1886703a 	and	r3,r3,r2
   1064c:	e0bffc17 	ldw	r2,-16(fp)
   10650:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10654:	e0bffb17 	ldw	r2,-20(fp)
   10658:	1000051e 	bne	r2,zero,10670 <open+0xd0>
   1065c:	e13ffc17 	ldw	r4,-16(fp)
   10660:	00104dc0 	call	104dc <alt_file_locked>
   10664:	e0bffa15 	stw	r2,-24(fp)
   10668:	e0bffa17 	ldw	r2,-24(fp)
   1066c:	10001016 	blt	r2,zero,106b0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10670:	e0bff817 	ldw	r2,-32(fp)
   10674:	10800317 	ldw	r2,12(r2)
   10678:	10000826 	beq	r2,zero,1069c <open+0xfc>
   1067c:	e0bff817 	ldw	r2,-32(fp)
   10680:	10800317 	ldw	r2,12(r2)
   10684:	e1ffff17 	ldw	r7,-4(fp)
   10688:	e1bffe17 	ldw	r6,-8(fp)
   1068c:	e17ffd17 	ldw	r5,-12(fp)
   10690:	e13ffc17 	ldw	r4,-16(fp)
   10694:	103ee83a 	callr	r2
   10698:	00000106 	br	106a0 <open+0x100>
   1069c:	0005883a 	mov	r2,zero
   106a0:	e0bffa15 	stw	r2,-24(fp)
   106a4:	00000206 	br	106b0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   106a8:	00bffb44 	movi	r2,-19
   106ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   106b0:	e0bffa17 	ldw	r2,-24(fp)
   106b4:	1000090e 	bge	r2,zero,106dc <open+0x13c>
  {
    alt_release_fd (index);  
   106b8:	e13ff917 	ldw	r4,-28(fp)
   106bc:	000ec4c0 	call	ec4c <alt_release_fd>
    ALT_ERRNO = -status;
   106c0:	00104a00 	call	104a0 <alt_get_errno>
   106c4:	1007883a 	mov	r3,r2
   106c8:	e0bffa17 	ldw	r2,-24(fp)
   106cc:	0085c83a 	sub	r2,zero,r2
   106d0:	18800015 	stw	r2,0(r3)
    return -1;
   106d4:	00bfffc4 	movi	r2,-1
   106d8:	00000106 	br	106e0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   106dc:	e0bff917 	ldw	r2,-28(fp)
}
   106e0:	e037883a 	mov	sp,fp
   106e4:	dfc00117 	ldw	ra,4(sp)
   106e8:	df000017 	ldw	fp,0(sp)
   106ec:	dec00204 	addi	sp,sp,8
   106f0:	f800283a 	ret

000106f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   106f4:	defffa04 	addi	sp,sp,-24
   106f8:	df000515 	stw	fp,20(sp)
   106fc:	df000504 	addi	fp,sp,20
   10700:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10704:	0005303a 	rdctl	r2,status
   10708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1070c:	e0fffc17 	ldw	r3,-16(fp)
   10710:	00bfff84 	movi	r2,-2
   10714:	1884703a 	and	r2,r3,r2
   10718:	1001703a 	wrctl	status,r2
  
  return context;
   1071c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10720:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10724:	e0bfff17 	ldw	r2,-4(fp)
   10728:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1072c:	e0bffd17 	ldw	r2,-12(fp)
   10730:	10800017 	ldw	r2,0(r2)
   10734:	e0fffd17 	ldw	r3,-12(fp)
   10738:	18c00117 	ldw	r3,4(r3)
   1073c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10740:	e0bffd17 	ldw	r2,-12(fp)
   10744:	10800117 	ldw	r2,4(r2)
   10748:	e0fffd17 	ldw	r3,-12(fp)
   1074c:	18c00017 	ldw	r3,0(r3)
   10750:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10754:	e0bffd17 	ldw	r2,-12(fp)
   10758:	e0fffd17 	ldw	r3,-12(fp)
   1075c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10760:	e0bffd17 	ldw	r2,-12(fp)
   10764:	e0fffd17 	ldw	r3,-12(fp)
   10768:	10c00015 	stw	r3,0(r2)
   1076c:	e0bffb17 	ldw	r2,-20(fp)
   10770:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10774:	e0bffe17 	ldw	r2,-8(fp)
   10778:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1077c:	0001883a 	nop
   10780:	e037883a 	mov	sp,fp
   10784:	df000017 	ldw	fp,0(sp)
   10788:	dec00104 	addi	sp,sp,4
   1078c:	f800283a 	ret

00010790 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10790:	defffb04 	addi	sp,sp,-20
   10794:	dfc00415 	stw	ra,16(sp)
   10798:	df000315 	stw	fp,12(sp)
   1079c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   107a0:	d0a00e17 	ldw	r2,-32712(gp)
   107a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   107a8:	d0a72b17 	ldw	r2,-25428(gp)
   107ac:	10800044 	addi	r2,r2,1
   107b0:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   107b4:	00002e06 	br	10870 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	10800017 	ldw	r2,0(r2)
   107c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   107c4:	e0bffd17 	ldw	r2,-12(fp)
   107c8:	10800403 	ldbu	r2,16(r2)
   107cc:	10803fcc 	andi	r2,r2,255
   107d0:	10000426 	beq	r2,zero,107e4 <alt_tick+0x54>
   107d4:	d0a72b17 	ldw	r2,-25428(gp)
   107d8:	1000021e 	bne	r2,zero,107e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107dc:	e0bffd17 	ldw	r2,-12(fp)
   107e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107e4:	e0bffd17 	ldw	r2,-12(fp)
   107e8:	10800217 	ldw	r2,8(r2)
   107ec:	d0e72b17 	ldw	r3,-25428(gp)
   107f0:	18801d36 	bltu	r3,r2,10868 <alt_tick+0xd8>
   107f4:	e0bffd17 	ldw	r2,-12(fp)
   107f8:	10800403 	ldbu	r2,16(r2)
   107fc:	10803fcc 	andi	r2,r2,255
   10800:	1000191e 	bne	r2,zero,10868 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	10800317 	ldw	r2,12(r2)
   1080c:	e0fffd17 	ldw	r3,-12(fp)
   10810:	18c00517 	ldw	r3,20(r3)
   10814:	1809883a 	mov	r4,r3
   10818:	103ee83a 	callr	r2
   1081c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	1000031e 	bne	r2,zero,10834 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10828:	e13ffd17 	ldw	r4,-12(fp)
   1082c:	00106f40 	call	106f4 <alt_alarm_stop>
   10830:	00000d06 	br	10868 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10834:	e0bffd17 	ldw	r2,-12(fp)
   10838:	10c00217 	ldw	r3,8(r2)
   1083c:	e0bfff17 	ldw	r2,-4(fp)
   10840:	1887883a 	add	r3,r3,r2
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1084c:	e0bffd17 	ldw	r2,-12(fp)
   10850:	10c00217 	ldw	r3,8(r2)
   10854:	d0a72b17 	ldw	r2,-25428(gp)
   10858:	1880032e 	bgeu	r3,r2,10868 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	00c00044 	movi	r3,1
   10864:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10868:	e0bffe17 	ldw	r2,-8(fp)
   1086c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10870:	e0fffd17 	ldw	r3,-12(fp)
   10874:	d0a00e04 	addi	r2,gp,-32712
   10878:	18bfcf1e 	bne	r3,r2,107b8 <__alt_data_end+0xff0107b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1087c:	0001883a 	nop
}
   10880:	0001883a 	nop
   10884:	e037883a 	mov	sp,fp
   10888:	dfc00117 	ldw	ra,4(sp)
   1088c:	df000017 	ldw	fp,0(sp)
   10890:	dec00204 	addi	sp,sp,8
   10894:	f800283a 	ret

00010898 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10898:	deffff04 	addi	sp,sp,-4
   1089c:	df000015 	stw	fp,0(sp)
   108a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   108a4:	000170fa 	wrctl	ienable,zero
}
   108a8:	0001883a 	nop
   108ac:	e037883a 	mov	sp,fp
   108b0:	df000017 	ldw	fp,0(sp)
   108b4:	dec00104 	addi	sp,sp,4
   108b8:	f800283a 	ret

000108bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   108bc:	defffa04 	addi	sp,sp,-24
   108c0:	dfc00515 	stw	ra,20(sp)
   108c4:	df000415 	stw	fp,16(sp)
   108c8:	df000404 	addi	fp,sp,16
   108cc:	e13ffe15 	stw	r4,-8(fp)
   108d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   108d4:	e0bfff17 	ldw	r2,-4(fp)
   108d8:	10800017 	ldw	r2,0(r2)
   108dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   108e0:	e13ffe17 	ldw	r4,-8(fp)
   108e4:	00031780 	call	3178 <strlen>
   108e8:	10800044 	addi	r2,r2,1
   108ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108f0:	00000d06 	br	10928 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   108f4:	e0bffc17 	ldw	r2,-16(fp)
   108f8:	10800217 	ldw	r2,8(r2)
   108fc:	e0fffd17 	ldw	r3,-12(fp)
   10900:	180d883a 	mov	r6,r3
   10904:	e17ffe17 	ldw	r5,-8(fp)
   10908:	1009883a 	mov	r4,r2
   1090c:	0010c700 	call	10c70 <memcmp>
   10910:	1000021e 	bne	r2,zero,1091c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10914:	e0bffc17 	ldw	r2,-16(fp)
   10918:	00000706 	br	10938 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1091c:	e0bffc17 	ldw	r2,-16(fp)
   10920:	10800017 	ldw	r2,0(r2)
   10924:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10928:	e0fffc17 	ldw	r3,-16(fp)
   1092c:	e0bfff17 	ldw	r2,-4(fp)
   10930:	18bff01e 	bne	r3,r2,108f4 <__alt_data_end+0xff0108f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10934:	0005883a 	mov	r2,zero
}
   10938:	e037883a 	mov	sp,fp
   1093c:	dfc00117 	ldw	ra,4(sp)
   10940:	df000017 	ldw	fp,0(sp)
   10944:	dec00204 	addi	sp,sp,8
   10948:	f800283a 	ret

0001094c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1094c:	defffb04 	addi	sp,sp,-20
   10950:	dfc00415 	stw	ra,16(sp)
   10954:	df000315 	stw	fp,12(sp)
   10958:	df000304 	addi	fp,sp,12
   1095c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10960:	d0a00617 	ldw	r2,-32744(gp)
   10964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10968:	00003106 	br	10a30 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1096c:	e0bffd17 	ldw	r2,-12(fp)
   10970:	10800217 	ldw	r2,8(r2)
   10974:	1009883a 	mov	r4,r2
   10978:	00031780 	call	3178 <strlen>
   1097c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10980:	e0bffd17 	ldw	r2,-12(fp)
   10984:	10c00217 	ldw	r3,8(r2)
   10988:	e0bffe17 	ldw	r2,-8(fp)
   1098c:	10bfffc4 	addi	r2,r2,-1
   10990:	1885883a 	add	r2,r3,r2
   10994:	10800003 	ldbu	r2,0(r2)
   10998:	10803fcc 	andi	r2,r2,255
   1099c:	1080201c 	xori	r2,r2,128
   109a0:	10bfe004 	addi	r2,r2,-128
   109a4:	10800bd8 	cmpnei	r2,r2,47
   109a8:	1000031e 	bne	r2,zero,109b8 <alt_find_file+0x6c>
    {
      len -= 1;
   109ac:	e0bffe17 	ldw	r2,-8(fp)
   109b0:	10bfffc4 	addi	r2,r2,-1
   109b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109b8:	e0bffe17 	ldw	r2,-8(fp)
   109bc:	e0ffff17 	ldw	r3,-4(fp)
   109c0:	1885883a 	add	r2,r3,r2
   109c4:	10800003 	ldbu	r2,0(r2)
   109c8:	10803fcc 	andi	r2,r2,255
   109cc:	1080201c 	xori	r2,r2,128
   109d0:	10bfe004 	addi	r2,r2,-128
   109d4:	10800be0 	cmpeqi	r2,r2,47
   109d8:	1000081e 	bne	r2,zero,109fc <alt_find_file+0xb0>
   109dc:	e0bffe17 	ldw	r2,-8(fp)
   109e0:	e0ffff17 	ldw	r3,-4(fp)
   109e4:	1885883a 	add	r2,r3,r2
   109e8:	10800003 	ldbu	r2,0(r2)
   109ec:	10803fcc 	andi	r2,r2,255
   109f0:	1080201c 	xori	r2,r2,128
   109f4:	10bfe004 	addi	r2,r2,-128
   109f8:	10000a1e 	bne	r2,zero,10a24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   109fc:	e0bffd17 	ldw	r2,-12(fp)
   10a00:	10800217 	ldw	r2,8(r2)
   10a04:	e0fffe17 	ldw	r3,-8(fp)
   10a08:	180d883a 	mov	r6,r3
   10a0c:	e17fff17 	ldw	r5,-4(fp)
   10a10:	1009883a 	mov	r4,r2
   10a14:	0010c700 	call	10c70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a18:	1000021e 	bne	r2,zero,10a24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10a1c:	e0bffd17 	ldw	r2,-12(fp)
   10a20:	00000706 	br	10a40 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10a24:	e0bffd17 	ldw	r2,-12(fp)
   10a28:	10800017 	ldw	r2,0(r2)
   10a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a30:	e0fffd17 	ldw	r3,-12(fp)
   10a34:	d0a00604 	addi	r2,gp,-32744
   10a38:	18bfcc1e 	bne	r3,r2,1096c <__alt_data_end+0xff01096c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a3c:	0005883a 	mov	r2,zero
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	dfc00117 	ldw	ra,4(sp)
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00204 	addi	sp,sp,8
   10a50:	f800283a 	ret

00010a54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a54:	defffc04 	addi	sp,sp,-16
   10a58:	df000315 	stw	fp,12(sp)
   10a5c:	df000304 	addi	fp,sp,12
   10a60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10a64:	00bffa04 	movi	r2,-24
   10a68:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a6c:	e03ffd15 	stw	zero,-12(fp)
   10a70:	00001906 	br	10ad8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10a74:	00800074 	movhi	r2,1
   10a78:	10885004 	addi	r2,r2,8512
   10a7c:	e0fffd17 	ldw	r3,-12(fp)
   10a80:	18c00324 	muli	r3,r3,12
   10a84:	10c5883a 	add	r2,r2,r3
   10a88:	10800017 	ldw	r2,0(r2)
   10a8c:	10000f1e 	bne	r2,zero,10acc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10a90:	00800074 	movhi	r2,1
   10a94:	10885004 	addi	r2,r2,8512
   10a98:	e0fffd17 	ldw	r3,-12(fp)
   10a9c:	18c00324 	muli	r3,r3,12
   10aa0:	10c5883a 	add	r2,r2,r3
   10aa4:	e0ffff17 	ldw	r3,-4(fp)
   10aa8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10aac:	d0e00a17 	ldw	r3,-32728(gp)
   10ab0:	e0bffd17 	ldw	r2,-12(fp)
   10ab4:	1880020e 	bge	r3,r2,10ac0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10ac8:	00000606 	br	10ae4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10acc:	e0bffd17 	ldw	r2,-12(fp)
   10ad0:	10800044 	addi	r2,r2,1
   10ad4:	e0bffd15 	stw	r2,-12(fp)
   10ad8:	e0bffd17 	ldw	r2,-12(fp)
   10adc:	10800810 	cmplti	r2,r2,32
   10ae0:	103fe41e 	bne	r2,zero,10a74 <__alt_data_end+0xff010a74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
}
   10ae8:	e037883a 	mov	sp,fp
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00104 	addi	sp,sp,4
   10af4:	f800283a 	ret

00010af8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10af8:	defffb04 	addi	sp,sp,-20
   10afc:	df000415 	stw	fp,16(sp)
   10b00:	df000404 	addi	fp,sp,16
   10b04:	e13ffe15 	stw	r4,-8(fp)
   10b08:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10b0c:	e0bfff17 	ldw	r2,-4(fp)
   10b10:	10840070 	cmpltui	r2,r2,4097
   10b14:	1000021e 	bne	r2,zero,10b20 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10b18:	00840004 	movi	r2,4096
   10b1c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10b20:	e0fffe17 	ldw	r3,-8(fp)
   10b24:	e0bfff17 	ldw	r2,-4(fp)
   10b28:	1885883a 	add	r2,r3,r2
   10b2c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b30:	e0bffe17 	ldw	r2,-8(fp)
   10b34:	e0bffc15 	stw	r2,-16(fp)
   10b38:	00000506 	br	10b50 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b3c:	e0bffc17 	ldw	r2,-16(fp)
   10b40:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b44:	e0bffc17 	ldw	r2,-16(fp)
   10b48:	10800804 	addi	r2,r2,32
   10b4c:	e0bffc15 	stw	r2,-16(fp)
   10b50:	e0fffc17 	ldw	r3,-16(fp)
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	18bff836 	bltu	r3,r2,10b3c <__alt_data_end+0xff010b3c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b5c:	e0bffe17 	ldw	r2,-8(fp)
   10b60:	108007cc 	andi	r2,r2,31
   10b64:	10000226 	beq	r2,zero,10b70 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b68:	e0bffc17 	ldw	r2,-16(fp)
   10b6c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b70:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b74:	0001883a 	nop
   10b78:	e037883a 	mov	sp,fp
   10b7c:	df000017 	ldw	fp,0(sp)
   10b80:	dec00104 	addi	sp,sp,4
   10b84:	f800283a 	ret

00010b88 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10b88:	defffe04 	addi	sp,sp,-8
   10b8c:	df000115 	stw	fp,4(sp)
   10b90:	df000104 	addi	fp,sp,4
   10b94:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10b98:	e0bfff17 	ldw	r2,-4(fp)
   10b9c:	10bffe84 	addi	r2,r2,-6
   10ba0:	10c00428 	cmpgeui	r3,r2,16
   10ba4:	18001a1e 	bne	r3,zero,10c10 <alt_exception_cause_generated_bad_addr+0x88>
   10ba8:	100690ba 	slli	r3,r2,2
   10bac:	00800074 	movhi	r2,1
   10bb0:	1082f004 	addi	r2,r2,3008
   10bb4:	1885883a 	add	r2,r3,r2
   10bb8:	10800017 	ldw	r2,0(r2)
   10bbc:	1000683a 	jmp	r2
   10bc0:	00010c00 	call	10c0 <main+0x170>
   10bc4:	00010c00 	call	10c0 <main+0x170>
   10bc8:	00010c10 	cmplti	zero,zero,1072
   10bcc:	00010c10 	cmplti	zero,zero,1072
   10bd0:	00010c10 	cmplti	zero,zero,1072
   10bd4:	00010c00 	call	10c0 <main+0x170>
   10bd8:	00010c08 	cmpgei	zero,zero,1072
   10bdc:	00010c10 	cmplti	zero,zero,1072
   10be0:	00010c00 	call	10c0 <main+0x170>
   10be4:	00010c00 	call	10c0 <main+0x170>
   10be8:	00010c10 	cmplti	zero,zero,1072
   10bec:	00010c00 	call	10c0 <main+0x170>
   10bf0:	00010c08 	cmpgei	zero,zero,1072
   10bf4:	00010c10 	cmplti	zero,zero,1072
   10bf8:	00010c10 	cmplti	zero,zero,1072
   10bfc:	00010c00 	call	10c0 <main+0x170>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10c00:	00800044 	movi	r2,1
   10c04:	00000306 	br	10c14 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10c08:	0005883a 	mov	r2,zero
   10c0c:	00000106 	br	10c14 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10c10:	0005883a 	mov	r2,zero
  }
}
   10c14:	e037883a 	mov	sp,fp
   10c18:	df000017 	ldw	fp,0(sp)
   10c1c:	dec00104 	addi	sp,sp,4
   10c20:	f800283a 	ret

00010c24 <atexit>:
   10c24:	200b883a 	mov	r5,r4
   10c28:	000f883a 	mov	r7,zero
   10c2c:	000d883a 	mov	r6,zero
   10c30:	0009883a 	mov	r4,zero
   10c34:	0010cec1 	jmpi	10cec <__register_exitproc>

00010c38 <exit>:
   10c38:	defffe04 	addi	sp,sp,-8
   10c3c:	000b883a 	mov	r5,zero
   10c40:	dc000015 	stw	r16,0(sp)
   10c44:	dfc00115 	stw	ra,4(sp)
   10c48:	2021883a 	mov	r16,r4
   10c4c:	0010e040 	call	10e04 <__call_exitprocs>
   10c50:	00800074 	movhi	r2,1
   10c54:	108cca04 	addi	r2,r2,13096
   10c58:	11000017 	ldw	r4,0(r2)
   10c5c:	20800f17 	ldw	r2,60(r4)
   10c60:	10000126 	beq	r2,zero,10c68 <exit+0x30>
   10c64:	103ee83a 	callr	r2
   10c68:	8009883a 	mov	r4,r16
   10c6c:	0010f840 	call	10f84 <_exit>

00010c70 <memcmp>:
   10c70:	01c000c4 	movi	r7,3
   10c74:	3980192e 	bgeu	r7,r6,10cdc <memcmp+0x6c>
   10c78:	2144b03a 	or	r2,r4,r5
   10c7c:	11c4703a 	and	r2,r2,r7
   10c80:	10000f26 	beq	r2,zero,10cc0 <memcmp+0x50>
   10c84:	20800003 	ldbu	r2,0(r4)
   10c88:	28c00003 	ldbu	r3,0(r5)
   10c8c:	10c0151e 	bne	r2,r3,10ce4 <memcmp+0x74>
   10c90:	31bfff84 	addi	r6,r6,-2
   10c94:	01ffffc4 	movi	r7,-1
   10c98:	00000406 	br	10cac <memcmp+0x3c>
   10c9c:	20800003 	ldbu	r2,0(r4)
   10ca0:	28c00003 	ldbu	r3,0(r5)
   10ca4:	31bfffc4 	addi	r6,r6,-1
   10ca8:	10c00e1e 	bne	r2,r3,10ce4 <memcmp+0x74>
   10cac:	21000044 	addi	r4,r4,1
   10cb0:	29400044 	addi	r5,r5,1
   10cb4:	31fff91e 	bne	r6,r7,10c9c <__alt_data_end+0xff010c9c>
   10cb8:	0005883a 	mov	r2,zero
   10cbc:	f800283a 	ret
   10cc0:	20c00017 	ldw	r3,0(r4)
   10cc4:	28800017 	ldw	r2,0(r5)
   10cc8:	18bfee1e 	bne	r3,r2,10c84 <__alt_data_end+0xff010c84>
   10ccc:	31bfff04 	addi	r6,r6,-4
   10cd0:	21000104 	addi	r4,r4,4
   10cd4:	29400104 	addi	r5,r5,4
   10cd8:	39bff936 	bltu	r7,r6,10cc0 <__alt_data_end+0xff010cc0>
   10cdc:	303fe91e 	bne	r6,zero,10c84 <__alt_data_end+0xff010c84>
   10ce0:	003ff506 	br	10cb8 <__alt_data_end+0xff010cb8>
   10ce4:	10c5c83a 	sub	r2,r2,r3
   10ce8:	f800283a 	ret

00010cec <__register_exitproc>:
   10cec:	defffa04 	addi	sp,sp,-24
   10cf0:	dc000315 	stw	r16,12(sp)
   10cf4:	04000074 	movhi	r16,1
   10cf8:	840cca04 	addi	r16,r16,13096
   10cfc:	80c00017 	ldw	r3,0(r16)
   10d00:	dc400415 	stw	r17,16(sp)
   10d04:	dfc00515 	stw	ra,20(sp)
   10d08:	18805217 	ldw	r2,328(r3)
   10d0c:	2023883a 	mov	r17,r4
   10d10:	10003726 	beq	r2,zero,10df0 <__register_exitproc+0x104>
   10d14:	10c00117 	ldw	r3,4(r2)
   10d18:	010007c4 	movi	r4,31
   10d1c:	20c00e16 	blt	r4,r3,10d58 <__register_exitproc+0x6c>
   10d20:	1a000044 	addi	r8,r3,1
   10d24:	8800221e 	bne	r17,zero,10db0 <__register_exitproc+0xc4>
   10d28:	18c00084 	addi	r3,r3,2
   10d2c:	18c7883a 	add	r3,r3,r3
   10d30:	18c7883a 	add	r3,r3,r3
   10d34:	12000115 	stw	r8,4(r2)
   10d38:	10c7883a 	add	r3,r2,r3
   10d3c:	19400015 	stw	r5,0(r3)
   10d40:	0005883a 	mov	r2,zero
   10d44:	dfc00517 	ldw	ra,20(sp)
   10d48:	dc400417 	ldw	r17,16(sp)
   10d4c:	dc000317 	ldw	r16,12(sp)
   10d50:	dec00604 	addi	sp,sp,24
   10d54:	f800283a 	ret
   10d58:	00800034 	movhi	r2,0
   10d5c:	1089ec04 	addi	r2,r2,10160
   10d60:	10002626 	beq	r2,zero,10dfc <__register_exitproc+0x110>
   10d64:	01006404 	movi	r4,400
   10d68:	d9400015 	stw	r5,0(sp)
   10d6c:	d9800115 	stw	r6,4(sp)
   10d70:	d9c00215 	stw	r7,8(sp)
   10d74:	00027b00 	call	27b0 <malloc>
   10d78:	d9400017 	ldw	r5,0(sp)
   10d7c:	d9800117 	ldw	r6,4(sp)
   10d80:	d9c00217 	ldw	r7,8(sp)
   10d84:	10001d26 	beq	r2,zero,10dfc <__register_exitproc+0x110>
   10d88:	81000017 	ldw	r4,0(r16)
   10d8c:	10000115 	stw	zero,4(r2)
   10d90:	02000044 	movi	r8,1
   10d94:	22405217 	ldw	r9,328(r4)
   10d98:	0007883a 	mov	r3,zero
   10d9c:	12400015 	stw	r9,0(r2)
   10da0:	20805215 	stw	r2,328(r4)
   10da4:	10006215 	stw	zero,392(r2)
   10da8:	10006315 	stw	zero,396(r2)
   10dac:	883fde26 	beq	r17,zero,10d28 <__alt_data_end+0xff010d28>
   10db0:	18c9883a 	add	r4,r3,r3
   10db4:	2109883a 	add	r4,r4,r4
   10db8:	1109883a 	add	r4,r2,r4
   10dbc:	21802215 	stw	r6,136(r4)
   10dc0:	01800044 	movi	r6,1
   10dc4:	12406217 	ldw	r9,392(r2)
   10dc8:	30cc983a 	sll	r6,r6,r3
   10dcc:	4992b03a 	or	r9,r9,r6
   10dd0:	12406215 	stw	r9,392(r2)
   10dd4:	21c04215 	stw	r7,264(r4)
   10dd8:	01000084 	movi	r4,2
   10ddc:	893fd21e 	bne	r17,r4,10d28 <__alt_data_end+0xff010d28>
   10de0:	11006317 	ldw	r4,396(r2)
   10de4:	218cb03a 	or	r6,r4,r6
   10de8:	11806315 	stw	r6,396(r2)
   10dec:	003fce06 	br	10d28 <__alt_data_end+0xff010d28>
   10df0:	18805304 	addi	r2,r3,332
   10df4:	18805215 	stw	r2,328(r3)
   10df8:	003fc606 	br	10d14 <__alt_data_end+0xff010d14>
   10dfc:	00bfffc4 	movi	r2,-1
   10e00:	003fd006 	br	10d44 <__alt_data_end+0xff010d44>

00010e04 <__call_exitprocs>:
   10e04:	defff504 	addi	sp,sp,-44
   10e08:	df000915 	stw	fp,36(sp)
   10e0c:	dd400615 	stw	r21,24(sp)
   10e10:	dc800315 	stw	r18,12(sp)
   10e14:	dfc00a15 	stw	ra,40(sp)
   10e18:	ddc00815 	stw	r23,32(sp)
   10e1c:	dd800715 	stw	r22,28(sp)
   10e20:	dd000515 	stw	r20,20(sp)
   10e24:	dcc00415 	stw	r19,16(sp)
   10e28:	dc400215 	stw	r17,8(sp)
   10e2c:	dc000115 	stw	r16,4(sp)
   10e30:	d9000015 	stw	r4,0(sp)
   10e34:	2839883a 	mov	fp,r5
   10e38:	04800044 	movi	r18,1
   10e3c:	057fffc4 	movi	r21,-1
   10e40:	00800074 	movhi	r2,1
   10e44:	108cca04 	addi	r2,r2,13096
   10e48:	12000017 	ldw	r8,0(r2)
   10e4c:	45005217 	ldw	r20,328(r8)
   10e50:	44c05204 	addi	r19,r8,328
   10e54:	a0001c26 	beq	r20,zero,10ec8 <__call_exitprocs+0xc4>
   10e58:	a0800117 	ldw	r2,4(r20)
   10e5c:	15ffffc4 	addi	r23,r2,-1
   10e60:	b8000d16 	blt	r23,zero,10e98 <__call_exitprocs+0x94>
   10e64:	14000044 	addi	r16,r2,1
   10e68:	8421883a 	add	r16,r16,r16
   10e6c:	8421883a 	add	r16,r16,r16
   10e70:	84402004 	addi	r17,r16,128
   10e74:	a463883a 	add	r17,r20,r17
   10e78:	a421883a 	add	r16,r20,r16
   10e7c:	e0001e26 	beq	fp,zero,10ef8 <__call_exitprocs+0xf4>
   10e80:	80804017 	ldw	r2,256(r16)
   10e84:	e0801c26 	beq	fp,r2,10ef8 <__call_exitprocs+0xf4>
   10e88:	bdffffc4 	addi	r23,r23,-1
   10e8c:	843fff04 	addi	r16,r16,-4
   10e90:	8c7fff04 	addi	r17,r17,-4
   10e94:	bd7ff91e 	bne	r23,r21,10e7c <__alt_data_end+0xff010e7c>
   10e98:	00800034 	movhi	r2,0
   10e9c:	1089f104 	addi	r2,r2,10180
   10ea0:	10000926 	beq	r2,zero,10ec8 <__call_exitprocs+0xc4>
   10ea4:	a0800117 	ldw	r2,4(r20)
   10ea8:	1000301e 	bne	r2,zero,10f6c <__call_exitprocs+0x168>
   10eac:	a0800017 	ldw	r2,0(r20)
   10eb0:	10003226 	beq	r2,zero,10f7c <__call_exitprocs+0x178>
   10eb4:	a009883a 	mov	r4,r20
   10eb8:	98800015 	stw	r2,0(r19)
   10ebc:	00027c40 	call	27c4 <free>
   10ec0:	9d000017 	ldw	r20,0(r19)
   10ec4:	a03fe41e 	bne	r20,zero,10e58 <__alt_data_end+0xff010e58>
   10ec8:	dfc00a17 	ldw	ra,40(sp)
   10ecc:	df000917 	ldw	fp,36(sp)
   10ed0:	ddc00817 	ldw	r23,32(sp)
   10ed4:	dd800717 	ldw	r22,28(sp)
   10ed8:	dd400617 	ldw	r21,24(sp)
   10edc:	dd000517 	ldw	r20,20(sp)
   10ee0:	dcc00417 	ldw	r19,16(sp)
   10ee4:	dc800317 	ldw	r18,12(sp)
   10ee8:	dc400217 	ldw	r17,8(sp)
   10eec:	dc000117 	ldw	r16,4(sp)
   10ef0:	dec00b04 	addi	sp,sp,44
   10ef4:	f800283a 	ret
   10ef8:	a0800117 	ldw	r2,4(r20)
   10efc:	80c00017 	ldw	r3,0(r16)
   10f00:	10bfffc4 	addi	r2,r2,-1
   10f04:	15c01426 	beq	r2,r23,10f58 <__call_exitprocs+0x154>
   10f08:	80000015 	stw	zero,0(r16)
   10f0c:	183fde26 	beq	r3,zero,10e88 <__alt_data_end+0xff010e88>
   10f10:	95c8983a 	sll	r4,r18,r23
   10f14:	a0806217 	ldw	r2,392(r20)
   10f18:	a5800117 	ldw	r22,4(r20)
   10f1c:	2084703a 	and	r2,r4,r2
   10f20:	10000b26 	beq	r2,zero,10f50 <__call_exitprocs+0x14c>
   10f24:	a0806317 	ldw	r2,396(r20)
   10f28:	2088703a 	and	r4,r4,r2
   10f2c:	20000c1e 	bne	r4,zero,10f60 <__call_exitprocs+0x15c>
   10f30:	89400017 	ldw	r5,0(r17)
   10f34:	d9000017 	ldw	r4,0(sp)
   10f38:	183ee83a 	callr	r3
   10f3c:	a0800117 	ldw	r2,4(r20)
   10f40:	15bfbf1e 	bne	r2,r22,10e40 <__alt_data_end+0xff010e40>
   10f44:	98800017 	ldw	r2,0(r19)
   10f48:	153fcf26 	beq	r2,r20,10e88 <__alt_data_end+0xff010e88>
   10f4c:	003fbc06 	br	10e40 <__alt_data_end+0xff010e40>
   10f50:	183ee83a 	callr	r3
   10f54:	003ff906 	br	10f3c <__alt_data_end+0xff010f3c>
   10f58:	a5c00115 	stw	r23,4(r20)
   10f5c:	003feb06 	br	10f0c <__alt_data_end+0xff010f0c>
   10f60:	89000017 	ldw	r4,0(r17)
   10f64:	183ee83a 	callr	r3
   10f68:	003ff406 	br	10f3c <__alt_data_end+0xff010f3c>
   10f6c:	a0800017 	ldw	r2,0(r20)
   10f70:	a027883a 	mov	r19,r20
   10f74:	1029883a 	mov	r20,r2
   10f78:	003fb606 	br	10e54 <__alt_data_end+0xff010e54>
   10f7c:	0005883a 	mov	r2,zero
   10f80:	003ffb06 	br	10f70 <__alt_data_end+0xff010f70>

00010f84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10f84:	defffd04 	addi	sp,sp,-12
   10f88:	df000215 	stw	fp,8(sp)
   10f8c:	df000204 	addi	fp,sp,8
   10f90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10f94:	0001883a 	nop
   10f98:	e0bfff17 	ldw	r2,-4(fp)
   10f9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10fa4:	10000226 	beq	r2,zero,10fb0 <_exit+0x2c>
    ALT_SIM_FAIL();
   10fa8:	002af070 	cmpltui	zero,zero,43969
   10fac:	00000106 	br	10fb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10fb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10fb4:	003fff06 	br	10fb4 <__alt_data_end+0xff010fb4>
