
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014710 memsz 0x00014710 flags r-x
    LOAD off    0x00015730 vaddr 0x00014730 paddr 0x0001631c align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00017f08 vaddr 0x00017f08 paddr 0x00017f08 align 2**12
         filesz 0x00000000 memsz 0x000001dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013d30  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00013f74  00013f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00014730  0001631c  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001dc  00017f08  00017f08  00017f08  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000180e4  000180e4  0001731c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001731c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001110  00000000  00000000  00017340  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028bf4  00000000  00000000  00018450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a3a1  00000000  00000000  00041044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d9be  00000000  00000000  0004b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028a4  00000000  00000000  00058da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004069  00000000  00000000  0005b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e67c  00000000  00000000  0005f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007dd30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  0007dd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000835d2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000835d5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000835e1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000835e2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000835e3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000835e7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000835eb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000835ef  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000835f8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00083601  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008360a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00083615  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0008364d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078d96  00000000  00000000  00089125  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00013f74 l    d  .rodata	00000000 .rodata
00014730 l    d  .rwdata	00000000 .rwdata
00017f08 l    d  .bss	00000000 .bss
000180e4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001457e l     O .rodata	00000010 zeroes.4404
0000810c l     F .text	000000bc __sbprintf
0001458e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000831c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009e4c l     F .text	00000008 __fp_unlock
00009e60 l     F .text	0000019c __sinit.part.1
00009ffc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014c38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001507c l     O .rwdata	00000020 lc_ctype_charset
0001505c l     O .rwdata	00000020 lc_message_charset
0001509c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000145c0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000cb98 l     F .text	000000fc __sprint_r.part.0
000146f4 l     O .rodata	00000010 blanks.4348
000146e4 l     O .rodata	00000010 zeroes.4349
0000e124 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00011238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
000113bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000113e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000114d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000115b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000116a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00011874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001630c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00011b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011cd0 l     F .text	00000034 alt_dev_reg
0001527c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011fdc l     F .text	0000020c altera_avalon_jtag_uart_irq
000121e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012820 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012cf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001316c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000132ac l     F .text	0000003c alt_get_errno
000132e8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00017fb8 g     O .bss	00000004 alt_instruction_exception_handler
0000c230 g     F .text	00000074 _mprec_log10
0000c31c g     F .text	0000008c __any_on
0000e6c0 g     F .text	00000054 _isatty_r
000145cc g     O .rodata	00000028 __mprec_tinytens
000117b0 g     F .text	0000007c alt_main
00005d38 g     F .text	000000c0 _puts_r
00017fe4 g     O .bss	00000100 alt_irq
0000e714 g     F .text	00000060 _lseek_r
00014428 g     O .rodata	00000009 gy_array
0001631c g       *ABS*	00000000 __flash_rwdata_start
0000fe70 g     F .text	00000088 .hidden __eqdf2
000180e4 g       *ABS*	00000000 __alt_heap_start
00005cfc g     F .text	0000003c printf
0000e92c g     F .text	0000009c _wcrtomb_r
0000ca58 g     F .text	0000005c __sseek
0000a19c g     F .text	00000010 __sinit
0000e7d4 g     F .text	00000140 __swbuf_r
0000ac64 g     F .text	0000007c _setlocale_r
0000a004 g     F .text	00000068 __sfmoreglue
00011850 g     F .text	00000024 __malloc_unlock
00000a60 g     F .text	00000014 LCD_Write_Command
00017f44 g     O .bss	00000004 sobel_width
00017f30 g     O .bss	00000004 start_all
00011a10 g     F .text	00000034 alt_remap_cached
00017fa8 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000b128 g     F .text	0000015c memmove
00000a74 g     F .text	00000014 LCD_Write_Data
0000a184 g     F .text	00000018 _cleanup
00017f3c g     O .bss	00000004 end_sobel
0000b3ac g     F .text	000000a8 _Balloc
00001d94 g     F .text	000000a8 sobel_all_init
0000fef8 g     F .text	000000dc .hidden __gtdf2
000136a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000e664 g     F .text	0000005c _fstat_r
00017f88 g     O .bss	00000004 errno
0000c9d4 g     F .text	00000008 __seofread
00017f9c g     O .bss	00000004 alt_argv
0001e2dc g       *ABS*	00000000 _gp
00011b6c g     F .text	00000030 usleep
00011af4 g     F .text	00000078 alt_uncached_malloc
00017f78 g     O .bss	00000004 array_width
00000668 g     F .text	00000074 cam_set_image_pointer
000150fc g     O .rwdata	00000180 alt_fd_list
00001e3c g     F .text	00000210 sobel_all_complete
000048d0 g     F .text	00000010 vga_set_pointer
000136c8 g     F .text	00000090 alt_find_dev
0000afe0 g     F .text	00000148 memcpy
00009e54 g     F .text	0000000c _cleanup_r
0001115c g     F .text	000000dc .hidden __floatsidf
00013230 g     F .text	0000007c alt_io_redirect
00017f2c g     O .bss	00000004 end_all
0000ffd4 g     F .text	000000f4 .hidden __ltdf2
00013f74 g       *ABS*	00000000 __DTOR_END__
00017f64 g     O .bss	00000004 end_sobel_a
00005df8 g     F .text	00000014 puts
00013994 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000c90c g     F .text	00000074 __fpclassifyd
0000c18c g     F .text	000000a4 __ratio
0000e108 g     F .text	0000001c __vfiprintf_internal
000123e0 g     F .text	0000021c altera_avalon_jtag_uart_read
00005498 g     F .text	00000014 malloc
00005ccc g     F .text	00000030 _printf_r
000008b4 g     F .text	00000008 get_grayscale_picture
000049e8 g     F .text	00000064 .hidden __udivsi3
00013fd4 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
00011510 g     F .text	000000a4 isatty
0001461c g     O .rodata	000000c8 __mprec_tens
0000ace0 g     F .text	0000000c __locale_charset
00013904 g     F .text	00000090 alt_icache_flush
00017f84 g     O .bss	00000004 __malloc_top_pad
00017f18 g     O .bss	00000004 grayscale_array_int
000162ec g     O .rwdata	00000004 __mb_cur_max
0000ad10 g     F .text	0000000c _localeconv_r
000014cc g     F .text	00000140 sobel_x
0000b7b8 g     F .text	0000003c __i2b
0000a620 g     F .text	000004bc __sfvwrite_r
00000a88 g     F .text	00000414 init_LCD
00005e0c g     F .text	00000054 _sbrk_r
00017f70 g     O .bss	00000004 array_width_int
000005f0 g     F .text	00000078 cam_get_profiling
0000e774 g     F .text	00000060 _read_r
00011344 g     F .text	00000078 alt_dcache_flush
00017f48 g     O .bss	00000004 sobel_result
00016304 g     O .rwdata	00000004 alt_max_fd
0000e358 g     F .text	000000f0 _fclose_r
00009e1c g     F .text	00000030 fflush
00017f80 g     O .bss	00000004 __malloc_max_sbrked_mem
00017f08 g     O .bss	00000004 size_int
00017f1c g     O .bss	00000004 grayscale_array
0000f5c4 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
0000bf34 g     F .text	0000010c __b2d
0000f08c g     F .text	00000538 .hidden __umoddi3
000116dc g     F .text	000000d4 lseek
0000097c g     F .text	0000008c i2c_short_read
000162e4 g     O .rwdata	00000004 _global_impure_ptr
0000c3a8 g     F .text	00000564 _realloc_r
000180e4 g       *ABS*	00000000 __bss_end
0001307c g     F .text	000000f0 alt_iic_isr_register
0001359c g     F .text	00000108 alt_tick
00017f5c g     O .bss	00000004 end_conv_grayscale_a
0000eb14 g     F .text	00000578 .hidden __udivdi3
0000e5c0 g     F .text	00000024 _fputwc_r
000145f4 g     O .rodata	00000028 __mprec_bigtens
0000b59c g     F .text	00000104 __s2b
0000538c g     F .text	000000a8 .hidden __floatunsidf
0000bc74 g     F .text	00000060 __mcmp
0000a1bc g     F .text	00000018 __fp_lock_all
00013030 g     F .text	0000004c alt_ic_irq_enabled
00017f0c g     O .bss	00000004 grayscape_height
00013500 g     F .text	0000009c alt_alarm_stop
00017fac g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000150d4 g     O .rwdata	00000028 alt_dev_null
00000f28 g     F .text	00000078 transfer_LCD_with_dma
00001abc g     F .text	00000170 sobel_complete
00012cb0 g     F .text	00000048 alt_dcache_flush_all
0000b6a0 g     F .text	00000068 __hi0bits
000110dc g     F .text	00000080 .hidden __fixdfsi
0001631c g       *ABS*	00000000 __ram_rwdata_end
000162fc g     O .rwdata	00000008 alt_dev_list
00011bd8 g     F .text	000000f8 write
00012a0c g     F .text	00000020 alt_timestamp_freq
00014730 g       *ABS*	00000000 __ram_rodata_end
00011424 g     F .text	000000b0 fstat
0000ffd4 g     F .text	000000f4 .hidden __ledf2
0000b9ec g     F .text	00000140 __pow5mult
0000ccac g     F .text	0000145c ___vfiprintf_internal_r
00017f94 g     O .bss	00000004 __nlocale_changed
00004a4c g     F .text	00000058 .hidden __umodsi3
0000083c g     F .text	00000068 conv_grayscale_partial
000007bc g     F .text	00000080 conv_grayscale_init
00001d84 g     F .text	00000008 GetSobel_rgb
000180e4 g       *ABS*	00000000 end
00001d8c g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
000018a0 g     F .text	00000168 sobel_y_with_rgb
00011f1c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00017f60 g     O .bss	00000004 start_conv_grayscale_a
00013f74 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00012898 g     F .text	0000007c alt_avalon_timer_sc_init
00005434 g     F .text	00000064 .hidden __clzsi2
000125fc g     F .text	00000224 altera_avalon_jtag_uart_write
0000a1ac g     F .text	00000004 __sfp_lock_acquire
0000aefc g     F .text	000000e4 memchr
00005ef8 g     F .text	000021f8 ___vfprintf_internal_r
0000a310 g     F .text	00000310 _free_r
0000acec g     F .text	00000010 __locale_mb_cur_max
00001788 g     F .text	00000118 sobel_y
000140fc g     O .rodata	00000140 noise_reduction_reg_settings_array
00013dc0 g     F .text	00000180 __call_exitprocs
00017f90 g     O .bss	00000004 __mlocale_changed
000162dc g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00017f34 g     O .bss	00000004 end_conv_grayscale
00017fb0 g     O .bss	00000004 _alt_tick_rate
0000bb2c g     F .text	00000148 __lshift
00017fb4 g     O .bss	00000004 _alt_nticks
000118b0 g     F .text	000000fc read
00011d3c g     F .text	0000007c alt_sys_init
0000160c g     F .text	0000017c sobel_x_with_rgb
00013ca8 g     F .text	00000118 __register_exitproc
0000b7f4 g     F .text	000001f8 __multiply
00012288 g     F .text	00000068 altera_avalon_jtag_uart_close
00014730 g       *ABS*	00000000 __ram_rwdata_start
00013f74 g       *ABS*	00000000 __ram_rodata_start
00017fbc g     O .bss	00000028 __malloc_current_mallinfo
0000c040 g     F .text	0000014c __d2b
00017f4c g     O .bss	00000004 sobel_height
00017f14 g     O .bss	00000004 grayscale_width_int
00000720 g     F .text	00000014 enable_continues_mode
0000204c g     F .text	000023c4 sobel_all_partial
00011db8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001318 g     F .text	000000f8 init_sobel_arrays
00013860 g     F .text	000000a4 alt_get_fd
00012b58 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000e240 g     F .text	00000054 _close_r
00013c2c g     F .text	0000007c memcmp
00011e78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000180e4 g       *ABS*	00000000 __alt_stack_base
00011ec8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000081c8 g     F .text	00000154 __swsetup_r
00004aa4 g     F .text	000008e8 .hidden __divdf3
0000a06c g     F .text	00000118 __sfp
0000c2a4 g     F .text	00000078 __copybits
00014830 g     O .rwdata	00000408 __malloc_av_
0000a1b8 g     F .text	00000004 __sinit_lock_release
000100c8 g     F .text	00000718 .hidden __muldf3
0000c980 g     F .text	00000054 __sread
00013758 g     F .text	00000108 alt_find_file
00012d34 g     F .text	000000a4 alt_dev_llist_insert
0001182c g     F .text	00000024 __malloc_lock
00011a44 g     F .text	000000b0 sbrk
00009dc0 g     F .text	0000005c _fflush_r
0000e294 g     F .text	000000c4 _calloc_r
00017f28 g     O .bss	00000004 start_global
00014730 g     O .rwdata	00000100 .hidden __divsi3_table
00017f08 g       *ABS*	00000000 __bss_start
0000b284 g     F .text	00000128 memset
00000fa0 g     F .text	00000378 main
00017fa0 g     O .bss	00000004 alt_envp
00017f7c g     O .bss	00000004 __malloc_max_total_mem
000008a4 g     F .text	00000008 get_grayscale_width
00011e18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e914 g     F .text	00000018 __swbuf
00017f50 g     O .bss	00000004 sobel_x_result
0000cab4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000e448 g     F .text	00000014 fclose
00017f6c g     O .bss	00000004 size
00012914 g     F .text	00000078 alt_timestamp_start
0000851c g     F .text	00001688 _dtoa_r
000054c0 g     F .text	0000080c _malloc_r
0000ea88 g     F .text	00000030 __ascii_wctomb
00016308 g     O .rwdata	00000004 alt_errno
0000aadc g     F .text	000000c4 _fwalk
00017f74 g     O .bss	00000004 array_height
00017f40 g     O .bss	00000004 start_sobel
000048f0 g     F .text	00000084 .hidden __divsi3
0000a1ec g     F .text	00000124 _malloc_trim_r
00013f74 g       *ABS*	00000000 __CTOR_END__
00017f10 g     O .bss	00000004 grayscale_width
0000cabc g     F .text	000000dc strcmp
00000e9c g     F .text	0000008c transfer_LCD_no_dma
00013f74 g       *ABS*	00000000 __flash_rodata_start
00013f74 g       *ABS*	00000000 __DTOR_LIST__
0000fe70 g     F .text	00000088 .hidden __nedf2
0001423c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
00011d04 g     F .text	00000038 alt_irq_init
000119ac g     F .text	00000064 alt_release_fd
0000459c g     F .text	0000032c sobel_all_complete_fusion
000008d4 g     F .text	000000a8 i2c_auto_detect
00013a7c g     F .text	00000018 memalign
0001443a g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00017f8c g     O .bss	00000004 _PathLocale
000008bc g     F .text	00000018 i2c_busy_wait
00013a30 g     F .text	00000014 atexit
0000e1e0 g     F .text	00000060 _write_r
0000ad1c g     F .text	00000018 setlocale
000162e8 g     O .rwdata	00000004 _impure_ptr
00017f98 g     O .bss	00000004 alt_argc
00009ba4 g     F .text	0000021c __sflush_r
00017fa4 g     O .bss	00000004 altera_avalon_timer_ts_base
00012e38 g     F .text	00000060 _do_dtors
0000ad08 g     F .text	00000008 __locale_cjk_lang
00004410 g     F .text	0000018c partial
00000020 g       .exceptions	00000000 alt_irq_entry
00001c2c g     F .text	00000158 sobel_complete_parted
0000bed0 g     F .text	00000064 __ulp
0000a1d4 g     F .text	00000018 __fp_unlock_all
000162f4 g     O .rwdata	00000008 alt_fs_list
00017f54 g     O .bss	00000004 sobel_y_result
00000a08 g     F .text	00000058 i2c_short_write
00017f38 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00017f20 g     O .bss	00000002 LCD_height
0000ad34 g     F .text	0000000c localeconv
0001298c g     F .text	00000080 alt_timestamp
000048e0 g     F .text	00000010 vga_set_swap
00012ecc g     F .text	00000050 alt_ic_isr_register
00001a08 g     F .text	000000b4 sobel_threshold
0001631c g       *ABS*	00000000 _edata
000180e4 g       *ABS*	00000000 _end
0000e45c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
000122f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014431 g     O .rodata	00000009 gx_array
00012fa4 g     F .text	0000008c alt_ic_irq_disable
0000c9dc g     F .text	0000007c __swrite
000162e0 g     O .rwdata	00000004 __malloc_trim_threshold
00017f22 g     O .bss	00000002 LCD_width
00000774 g     F .text	00000048 conv_grayscale
0000acfc g     F .text	0000000c __locale_msgcharset
00013a44 g     F .text	00000038 exit
0000aba0 g     F .text	000000c4 _fwalk_reent
0000bcd4 g     F .text	000001fc __mdiff
00004974 g     F .text	00000074 .hidden __modsi3
00013a94 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a1b0 g     F .text	00000004 __sfp_lock_release
000008ac g     F .text	00000008 get_grayscale_height
00013f40 g     F .text	00000034 _exit
00001410 g     F .text	000000bc sobel_mac
00012a2c g     F .text	0000012c alt_alarm_start
0000ad40 g     F .text	000001bc __smakebuf_r
00017f58 g     O .bss	00000004 sobel_rgb565
00005e60 g     F .text	00000098 strlen
000133ac g     F .text	00000154 open
0000fef8 g     F .text	000000dc .hidden __gedf2
000162f0 g     O .rwdata	00000004 __wctomb
000048c8 g     F .text	00000008 GetSobelAllResult
0000cc94 g     F .text	00000018 __sprint_r
00012e98 g     F .text	00000034 alt_icache_flush_all
00017f68 g     O .bss	00000004 start_sobel_a
00016310 g     O .rwdata	00000004 alt_priority_mask
00012f1c g     F .text	00000088 alt_ic_irq_enable
000080f0 g     F .text	0000001c __vfprintf_internal
0000eab8 g     F .text	0000005c _wctomb_r
000107e0 g     F .text	000008fc .hidden __subdf3
0000b708 g     F .text	000000b0 __lo0bits
00016314 g     O .rwdata	00000008 alt_alarm_list
00012dd8 g     F .text	00000060 _do_ctors
0000e9c8 g     F .text	000000c0 wcrtomb
00011274 g     F .text	000000d0 close
00017f24 g     O .bss	00000004 end_global
0001161c g     F .text	00000084 alt_load
0000e5e4 g     F .text	00000080 fputwc
000054ac g     F .text	00000014 free
0000a1b4 g     F .text	00000004 __sinit_lock_acquire
0000b47c g     F .text	00000120 __multadd
0000b454 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109ff904 	addi	r2,r2,32740
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109ff904 	addi	r2,r2,32740
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73717 	ldw	r2,-25380(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73717 	ldw	r2,-25380(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6b8b714 	ori	gp,gp,58076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	109fc214 	ori	r2,r2,32520

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18e03914 	ori	r3,r3,32996

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	001161c0 	call	1161c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00117b00 	call	117b0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	0000a080 	call	a08 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	0000a080 	call	a08 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	0000a080 	call	a08 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84108f04 	addi	r16,r16,16956
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	0000a080 	call	a08 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	0000a080 	call	a08 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84103f04 	addi	r16,r16,16636
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	0000a080 	call	a08 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	0000a080 	call	a08 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	0000a080 	call	a08 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	0000a080 	call	a08 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	0000a080 	call	a08 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	0000a080 	call	a08 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	0000a080 	call	a08 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	840ff504 	addi	r16,r16,16340
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	0000a080 	call	a08 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	0000a080 	call	a08 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	0000a080 	call	a08 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	0000a081 	jmpi	a08 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	210fdd04 	addi	r4,r4,16244
     620:	297fffcc 	andi	r5,r5,65535
     624:	0005cfc0 	call	5cfc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	210fe504 	addi	r4,r4,16276
     63c:	297fffcc 	andi	r5,r5,65535
     640:	0005cfc0 	call	5cfc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	210fed04 	addi	r4,r4,16308
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	0005cfc1 	jmpi	5cfc <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int width,
		            int height) {
	register int pos = 0,pxl = 0;
	unsigned int *pixels = (unsigned int *)picture;

	while (pos < size_int) {
     774:	d0a70b17 	ldw	r2,-25556(gp)
     778:	00800f0e 	bge	zero,r2,7b8 <conv_grayscale+0x44>
     77c:	d2270f17 	ldw	r8,-25540(gp)
     780:	21800104 	addi	r6,r4,4
     784:	0007883a 	mov	r3,zero

			grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
     788:	18c5883a 	add	r2,r3,r3
     78c:	21400017 	ldw	r5,0(r4)
     790:	31c00017 	ldw	r7,0(r6)
     794:	1085883a 	add	r2,r2,r2
     798:	4085883a 	add	r2,r8,r2
     79c:	29cbc0f2 	custom	3,r5,r5,r7
     7a0:	11400015 	stw	r5,0(r2)
		            int width,
		            int height) {
	register int pos = 0,pxl = 0;
	unsigned int *pixels = (unsigned int *)picture;

	while (pos < size_int) {
     7a4:	d0a70b17 	ldw	r2,-25556(gp)

			grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			pos++;
     7a8:	18c00044 	addi	r3,r3,1
     7ac:	21000204 	addi	r4,r4,8
     7b0:	31800204 	addi	r6,r6,8
		            int width,
		            int height) {
	register int pos = 0,pxl = 0;
	unsigned int *pixels = (unsigned int *)picture;

	while (pos < size_int) {
     7b4:	18bff416 	blt	r3,r2,788 <__alt_data_end+0xff000788>
     7b8:	f800283a 	ret

000007bc <conv_grayscale_init>:
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7bc:	defffb04 	addi	sp,sp,-20
     7c0:	dc000015 	stw	r16,0(sp)
		grayscale_width = width;
		grayscale_width_int = width>>2;
     7c4:	2021d0ba 	srai	r16,r4,2
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7c8:	dc400115 	stw	r17,4(sp)
     7cc:	2023883a 	mov	r17,r4
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7d0:	d1271017 	ldw	r4,-25536(gp)
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7d4:	dc800215 	stw	r18,8(sp)
     7d8:	dfc00415 	stw	ra,16(sp)
     7dc:	dcc00315 	stw	r19,12(sp)
		grayscale_width = width;
     7e0:	d4670d15 	stw	r17,-25548(gp)
		grayscale_width_int = width>>2;
     7e4:	d4270e15 	stw	r16,-25544(gp)
		grayscape_height = height;
     7e8:	d1670c15 	stw	r5,-25552(gp)
			//grayscale_array[pos+1] = ALT_CI_RGB2GRAY_0((pxl>>16));
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}
}

void conv_grayscale_init(int width, int height){
     7ec:	2825883a 	mov	r18,r5
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7f0:	20001026 	beq	r4,zero,834 <conv_grayscale_init+0x78>
			free(grayscale_array);
     7f4:	00054ac0 	call	54ac <free>
     7f8:	d4e70c17 	ldw	r19,-25552(gp)
     7fc:	d4270e17 	ldw	r16,-25544(gp)
		grayscale_array = (unsigned char *) malloc(width* height);
     800:	8c89383a 	mul	r4,r17,r18
		grayscale_array_int = (unsigned int *) grayscale_array;
		size_int = grayscape_height*grayscale_width_int;
     804:	9c21383a 	mul	r16,r19,r16
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
			free(grayscale_array);
		grayscale_array = (unsigned char *) malloc(width* height);
     808:	00054980 	call	5498 <malloc>
     80c:	d0a71015 	stw	r2,-25536(gp)
		grayscale_array_int = (unsigned int *) grayscale_array;
     810:	d0a70f15 	stw	r2,-25540(gp)
		size_int = grayscape_height*grayscale_width_int;
     814:	d4270b15 	stw	r16,-25556(gp)
}
     818:	dfc00417 	ldw	ra,16(sp)
     81c:	dcc00317 	ldw	r19,12(sp)
     820:	dc800217 	ldw	r18,8(sp)
     824:	dc400117 	ldw	r17,4(sp)
     828:	dc000017 	ldw	r16,0(sp)
     82c:	dec00504 	addi	sp,sp,20
     830:	f800283a 	ret
     834:	2827883a 	mov	r19,r5
     838:	003ff106 	br	800 <__alt_data_end+0xff000800>

0000083c <conv_grayscale_partial>:

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;
	for (y = offset ; y < offset+len ; y++) {
     83c:	298d883a 	add	r6,r5,r6
     840:	2980170e 	bge	r5,r6,8a0 <conv_grayscale_partial+0x64>
     844:	d0a70e17 	ldw	r2,-25544(gp)
		y0 = y*grayscale_width_int;
     848:	2895383a 	mul	r10,r5,r2
				for (x = 0 ; x < grayscale_width_int ; x++) {
     84c:	0080120e 	bge	zero,r2,898 <conv_grayscale_partial+0x5c>
     850:	d2e70f17 	ldw	r11,-25540(gp)
     854:	5291883a 	add	r8,r10,r10
     858:	4211883a 	add	r8,r8,r8
     85c:	0007883a 	mov	r3,zero
					pos = y0+x;
					pxl = pos<<1;
					grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
     860:	1a85883a 	add	r2,r3,r10
     864:	1085883a 	add	r2,r2,r2
     868:	1085883a 	add	r2,r2,r2
     86c:	1085883a 	add	r2,r2,r2
     870:	2085883a 	add	r2,r4,r2
     874:	11c00017 	ldw	r7,0(r2)
     878:	10800117 	ldw	r2,4(r2)
     87c:	5a13883a 	add	r9,r11,r8
     880:	3885c0f2 	custom	3,r2,r7,r2
     884:	48800015 	stw	r2,0(r9)
void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;
	for (y = offset ; y < offset+len ; y++) {
		y0 = y*grayscale_width_int;
				for (x = 0 ; x < grayscale_width_int ; x++) {
     888:	d0a70e17 	ldw	r2,-25544(gp)
     88c:	18c00044 	addi	r3,r3,1
     890:	42000104 	addi	r8,r8,4
     894:	18bff216 	blt	r3,r2,860 <__alt_data_end+0xff000860>
}

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;
	for (y = offset ; y < offset+len ; y++) {
     898:	29400044 	addi	r5,r5,1
     89c:	29bfea1e 	bne	r5,r6,848 <__alt_data_end+0xff000848>
     8a0:	f800283a 	ret

000008a4 <get_grayscale_width>:
}


int get_grayscale_width() {
	return grayscale_width;
}
     8a4:	d0a70d17 	ldw	r2,-25548(gp)
     8a8:	f800283a 	ret

000008ac <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     8ac:	d0a70c17 	ldw	r2,-25552(gp)
     8b0:	f800283a 	ret

000008b4 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8b4:	d0a71017 	ldw	r2,-25536(gp)
     8b8:	f800283a 	ret

000008bc <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8bc:	00c04034 	movhi	r3,256
     8c0:	18c42704 	addi	r3,r3,4252
     8c4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8c8:	108000cc 	andi	r2,r2,3
     8cc:	103ffd1e 	bne	r2,zero,8c4 <__alt_data_end+0xff0008c4>
}
     8d0:	f800283a 	ret

000008d4 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8d4:	01004034 	movhi	r4,256
     8d8:	21042704 	addi	r4,r4,4252
     8dc:	00c04034 	movhi	r3,256
     8e0:	18c42704 	addi	r3,r3,4252
     8e4:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8e8:	108000cc 	andi	r2,r2,3
     8ec:	103ffb1e 	bne	r2,zero,8dc <__alt_data_end+0xff0008dc>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8f0:	00800104 	movi	r2,4
     8f4:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8fc:	108000cc 	andi	r2,r2,3
     900:	103ffd1e 	bne	r2,zero,8f8 <__alt_data_end+0xff0008f8>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     904:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     908:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     90c:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     910:	dfc00315 	stw	ra,12(sp)
     914:	dc800215 	stw	r18,8(sp)
     918:	dc400115 	stw	r17,4(sp)
     91c:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     920:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     924:	01000074 	movhi	r4,1
     928:	2110d504 	addi	r4,r4,17236
     92c:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     930:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     934:	0005cfc0 	call	5cfc <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     938:	04800a0e 	bge	zero,r18,964 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     93c:	04404034 	movhi	r17,256
     940:	8c442404 	addi	r17,r17,4240
     944:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     948:	89800037 	ldwio	r6,0(r17)
     94c:	01000074 	movhi	r4,1
     950:	800b883a 	mov	r5,r16
     954:	2110de04 	addi	r4,r4,17272
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     958:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     95c:	0005cfc0 	call	5cfc <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     960:	943ff81e 	bne	r18,r16,944 <__alt_data_end+0xff000944>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     964:	dfc00317 	ldw	ra,12(sp)
     968:	dc800217 	ldw	r18,8(sp)
     96c:	dc400117 	ldw	r17,4(sp)
     970:	dc000017 	ldw	r16,0(sp)
     974:	dec00404 	addi	sp,sp,16
     978:	f800283a 	ret

0000097c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     97c:	01804034 	movhi	r6,256
     980:	31842704 	addi	r6,r6,4252
     984:	00c04034 	movhi	r3,256
     988:	18c42704 	addi	r3,r3,4252
     98c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     990:	108000cc 	andi	r2,r2,3
     994:	103ffb1e 	bne	r2,zero,984 <__alt_data_end+0xff000984>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     998:	00804034 	movhi	r2,256
     99c:	21003fcc 	andi	r4,r4,255
     9a0:	10842404 	addi	r2,r2,4240
     9a4:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9a8:	00804034 	movhi	r2,256
     9ac:	10842504 	addi	r2,r2,4244
     9b0:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9b4:	008010c4 	movi	r2,67
     9b8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9bc:	180b883a 	mov	r5,r3
     9c0:	00c04034 	movhi	r3,256
     9c4:	18c42704 	addi	r3,r3,4252
     9c8:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9cc:	108000cc 	andi	r2,r2,3
     9d0:	103ffb1e 	bne	r2,zero,9c0 <__alt_data_end+0xff0009c0>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9d4:	00804034 	movhi	r2,256
     9d8:	21000044 	addi	r4,r4,1
     9dc:	10842404 	addi	r2,r2,4240
     9e0:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9e4:	00800884 	movi	r2,34
     9e8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9ec:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9f0:	108000cc 	andi	r2,r2,3
     9f4:	103ffd1e 	bne	r2,zero,9ec <__alt_data_end+0xff0009ec>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9f8:	00804034 	movhi	r2,256
     9fc:	10842604 	addi	r2,r2,4248
}
     a00:	10800037 	ldwio	r2,0(r2)
     a04:	f800283a 	ret

00000a08 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a08:	01c04034 	movhi	r7,256
     a0c:	39c42704 	addi	r7,r7,4252
     a10:	00c04034 	movhi	r3,256
     a14:	18c42704 	addi	r3,r3,4252
     a18:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a1c:	108000cc 	andi	r2,r2,3
     a20:	103ffb1e 	bne	r2,zero,a10 <__alt_data_end+0xff000a10>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a24:	00804034 	movhi	r2,256
     a28:	10842404 	addi	r2,r2,4240
     a2c:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a30:	00804034 	movhi	r2,256
     a34:	10842504 	addi	r2,r2,4244
     a38:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a3c:	00804034 	movhi	r2,256
     a40:	10842604 	addi	r2,r2,4248
     a44:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a48:	00801084 	movi	r2,66
     a4c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a50:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a54:	108000cc 	andi	r2,r2,3
     a58:	103ffd1e 	bne	r2,zero,a50 <__alt_data_end+0xff000a50>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a5c:	f800283a 	ret

00000a60 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a60:	00804034 	movhi	r2,256
     a64:	10841804 	addi	r2,r2,4192
     a68:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a6c:	01000284 	movi	r4,10
     a70:	0011b6c1 	jmpi	11b6c <usleep>

00000a74 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	00804034 	movhi	r2,256
     a78:	10841904 	addi	r2,r2,4196
     a7c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a80:	01000284 	movi	r4,10
     a84:	0011b6c1 	jmpi	11b6c <usleep>

00000a88 <init_LCD>:
}


void init_LCD() {
     a88:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a8c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a90:	dd400515 	stw	r21,20(sp)
     a94:	dfc00815 	stw	ra,32(sp)
     a98:	ddc00715 	stw	r23,28(sp)
     a9c:	dd800615 	stw	r22,24(sp)
     aa0:	dd000415 	stw	r20,16(sp)
     aa4:	dcc00315 	stw	r19,12(sp)
     aa8:	dc800215 	stw	r18,8(sp)
     aac:	dc400115 	stw	r17,4(sp)
     ab0:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ab4:	05400084 	movi	r21,2
     ab8:	10841a04 	addi	r2,r2,4200
     abc:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ac0:	04804034 	movhi	r18,256
     ac4:	94841804 	addi	r18,r18,4192
     ac8:	00800a04 	movi	r2,40
     acc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ad0:	04000284 	movi	r16,10
     ad4:	8009883a 	mov	r4,r16
     ad8:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     adc:	05c00444 	movi	r23,17
     ae0:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae8:	04404034 	movhi	r17,256
     aec:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     af0:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af4:	0027883a 	mov	r19,zero
     af8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b04:	008032c4 	movi	r2,203
     b08:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b14:	00800e44 	movi	r2,57
     b18:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	00800b04 	movi	r2,44
     b28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b2c:	8009883a 	mov	r4,r16
     b30:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b34:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	00800d04 	movi	r2,52
     b44:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b48:	8009883a 	mov	r4,r16
     b4c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b50:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b5c:	008033c4 	movi	r2,207
     b60:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b64:	8009883a 	mov	r4,r16
     b68:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b6c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	05802044 	movi	r22,129
     b7c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b88:	00800c04 	movi	r2,48
     b8c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b98:	00803a04 	movi	r2,232
     b9c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ba0:	8009883a 	mov	r4,r16
     ba4:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba8:	00802144 	movi	r2,133
     bac:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb8:	05000044 	movi	r20,1
     bbc:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc8:	00801e44 	movi	r2,121
     bcc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd8:	00803a84 	movi	r2,234
     bdc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be0:	8009883a 	mov	r4,r16
     be4:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bec:	8009883a 	mov	r4,r16
     bf0:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	00801904 	movi	r2,100
     c04:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	008000c4 	movi	r2,3
     c14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c18:	8009883a 	mov	r4,r16
     c1c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c20:	00800484 	movi	r2,18
     c24:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c28:	8009883a 	mov	r4,r16
     c2c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c30:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c3c:	00803dc4 	movi	r2,247
     c40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	00800804 	movi	r2,32
     c50:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c5c:	00803004 	movi	r2,192
     c60:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c6c:	05800984 	movi	r22,38
     c70:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c7c:	00800104 	movi	r2,4
     c80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c8c:	00803044 	movi	r2,193
     c90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c94:	8009883a 	mov	r4,r16
     c98:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c9c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00803144 	movi	r2,197
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	00800d44 	movi	r2,53
     cbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cc0:	8009883a 	mov	r4,r16
     cc4:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc8:	00800f84 	movi	r2,62
     ccc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cd8:	008031c4 	movi	r2,199
     cdc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce8:	00802f84 	movi	r2,190
     cec:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cf0:	8009883a 	mov	r4,r16
     cf4:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf8:	00802c44 	movi	r2,177
     cfc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d00:	8009883a 	mov	r4,r16
     d04:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d08:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d14:	00800404 	movi	r2,16
     d18:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d24:	00800e84 	movi	r2,58
     d28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d34:	00801544 	movi	r2,85
     d38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d3c:	8009883a 	mov	r4,r16
     d40:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d44:	00802d84 	movi	r2,182
     d48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d4c:	8009883a 	mov	r4,r16
     d50:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d54:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d60:	00802884 	movi	r2,162
     d64:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00803c84 	movi	r2,242
     d74:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d80:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d90:	8009883a 	mov	r4,r16
     d94:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d98:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d9c:	8009883a 	mov	r4,r16
     da0:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da4:	00800d84 	movi	r2,54
     da8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dc0:	00800a84 	movi	r2,42
     dc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ddc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     de0:	8009883a 	mov	r4,r16
     de4:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     de8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dec:	8009883a 	mov	r4,r16
     df0:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     df4:	00803bc4 	movi	r2,239
     df8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	0011b6c0 	call	11b6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e04:	00800ac4 	movi	r2,43
     e08:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e0c:	8009883a 	mov	r4,r16
     e10:	0011b6c0 	call	11b6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e14:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e18:	8009883a 	mov	r4,r16
     e1c:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e20:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e24:	8009883a 	mov	r4,r16
     e28:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e2c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e30:	8009883a 	mov	r4,r16
     e34:	0011b6c0 	call	11b6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e38:	00800fc4 	movi	r2,63
     e3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e40:	8009883a 	mov	r4,r16
     e44:	0011b6c0 	call	11b6c <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e48:	00c04034 	movhi	r3,256
     e4c:	00803c04 	movi	r2,240
     e50:	18c41d04 	addi	r3,r3,4212
     e54:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e58:	d0a7118d 	sth	r2,-25530(gp)
	LCD_height = 320;
     e5c:	00805004 	movi	r2,320
     e60:	d0a7110d 	sth	r2,-25532(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e64:	00800a44 	movi	r2,41
     e68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e6c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e70:	dfc00817 	ldw	ra,32(sp)
     e74:	ddc00717 	ldw	r23,28(sp)
     e78:	dd800617 	ldw	r22,24(sp)
     e7c:	dd400517 	ldw	r21,20(sp)
     e80:	dd000417 	ldw	r20,16(sp)
     e84:	dcc00317 	ldw	r19,12(sp)
     e88:	dc800217 	ldw	r18,8(sp)
     e8c:	dc400117 	ldw	r17,4(sp)
     e90:	dc000017 	ldw	r16,0(sp)
     e94:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e98:	0011b6c1 	jmpi	11b6c <usleep>

00000e9c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e9c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ea0:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     ea4:	dc000015 	stw	r16,0(sp)
     ea8:	dfc00415 	stw	ra,16(sp)
     eac:	dcc00315 	stw	r19,12(sp)
     eb0:	dc800215 	stw	r18,8(sp)
     eb4:	dc400115 	stw	r17,4(sp)
     eb8:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	10841e04 	addi	r2,r2,4216
     ec0:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ec4:	00804034 	movhi	r2,256
     ec8:	10841804 	addi	r2,r2,4192
     ecc:	00c00b04 	movi	r3,44
     ed0:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ed4:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ed8:	01000284 	movi	r4,10
     edc:	0011b6c0 	call	11b6c <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ee0:	90000a26 	beq	r18,zero,f0c <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ee4:	04c04034 	movhi	r19,256
     ee8:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eec:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ef0:	8080000b 	ldhu	r2,0(r16)
     ef4:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ef8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     efc:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     f00:	0011b6c0 	call	11b6c <usleep>
     f04:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f08:	8cbff91e 	bne	r17,r18,ef0 <__alt_data_end+0xff000ef0>
		LCD_Write_Data(data_array[pixels]);
}
     f0c:	dfc00417 	ldw	ra,16(sp)
     f10:	dcc00317 	ldw	r19,12(sp)
     f14:	dc800217 	ldw	r18,8(sp)
     f18:	dc400117 	ldw	r17,4(sp)
     f1c:	dc000017 	ldw	r16,0(sp)
     f20:	dec00504 	addi	sp,sp,20
     f24:	f800283a 	ret

00000f28 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f28:	d0a7110b 	ldhu	r2,-25532(gp)
     f2c:	3080010e 	bge	r6,r2,f34 <transfer_LCD_with_dma+0xc>
     f30:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f34:	d0e7118b 	ldhu	r3,-25530(gp)
     f38:	28c0010e 	bge	r5,r3,f40 <transfer_LCD_with_dma+0x18>
     f3c:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f40:	01804034 	movhi	r6,256
     f44:	31841e04 	addi	r6,r6,4216
     f48:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f4c:	01404034 	movhi	r5,256
     f50:	29441b04 	addi	r5,r5,4204
     f54:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f58:	18ffffcc 	andi	r3,r3,65535
     f5c:	10bfffcc 	andi	r2,r2,65535
     f60:	1885383a 	mul	r2,r3,r2
     f64:	00c04034 	movhi	r3,256
     f68:	18c41c04 	addi	r3,r3,4208
     f6c:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f70:	39c03fcc 	andi	r7,r7,255
     f74:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f78:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f7c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f80:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f84:	38000326 	beq	r7,zero,f94 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f88:	00c04404 	movi	r3,272
     f8c:	10c0002d 	sthio	r3,0(r2)
     f90:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f94:	00c04004 	movi	r3,256
     f98:	10c0002d 	sthio	r3,0(r2)
     f9c:	f800283a 	ret

00000fa0 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     fa0:	defff804 	addi	sp,sp,-32
     fa4:	dfc00715 	stw	ra,28(sp)
     fa8:	dd800615 	stw	r22,24(sp)
     fac:	dd400515 	stw	r21,20(sp)
     fb0:	dd000415 	stw	r20,16(sp)
     fb4:	dcc00315 	stw	r19,12(sp)
     fb8:	dc800215 	stw	r18,8(sp)
     fbc:	dc400115 	stw	r17,4(sp)
     fc0:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     fc4:	0000a880 	call	a88 <init_LCD>
  init_camera();
     fc8:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fcc:	01000604 	movi	r4,24
     fd0:	00048e00 	call	48e0 <vga_set_swap>
  printf("Hello from Nios II!\n");
     fd4:	01000074 	movhi	r4,1
     fd8:	2110e704 	addi	r4,r4,17308
     fdc:	0005df80 	call	5df8 <puts>
  cam_get_profiling();
     fe0:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fe4:	00005a80 	call	5a8 <cam_get_xsize>
     fe8:	1021883a 	mov	r16,r2
     fec:	00005cc0 	call	5cc <cam_get_ysize>
     ff0:	10bfffcc 	andi	r2,r2,65535
     ff4:	813fffcc 	andi	r4,r16,65535
     ff8:	2089383a 	mul	r4,r4,r2
     ffc:	05000074 	movhi	r20,1
    1000:	a511cc04 	addi	r20,r20,18224
    1004:	00054980 	call	5498 <malloc>
    1008:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    100c:	00005a80 	call	5a8 <cam_get_xsize>
    1010:	1021883a 	mov	r16,r2
    1014:	00005cc0 	call	5cc <cam_get_ysize>
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	813fffcc 	andi	r4,r16,65535
    1020:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1024:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1028:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    102c:	00054980 	call	5498 <malloc>
    1030:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1034:	00005a80 	call	5a8 <cam_get_xsize>
    1038:	1021883a 	mov	r16,r2
    103c:	00005cc0 	call	5cc <cam_get_ysize>
    1040:	10bfffcc 	andi	r2,r2,65535
    1044:	813fffcc 	andi	r4,r16,65535
    1048:	2089383a 	mul	r4,r4,r2
    104c:	00054980 	call	5498 <malloc>
    1050:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1054:	00005a80 	call	5a8 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005cc0 	call	5cc <cam_get_ysize>
    1060:	10bfffcc 	andi	r2,r2,65535
    1064:	813fffcc 	andi	r4,r16,65535
    1068:	2089383a 	mul	r4,r4,r2
    106c:	00054980 	call	5498 <malloc>
  cam_set_image_pointer(0,buffer1);
    1070:	b00b883a 	mov	r5,r22
    1074:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1078:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    107c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1080:	a80b883a 	mov	r5,r21
    1084:	01000044 	movi	r4,1
    1088:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    108c:	880b883a 	mov	r5,r17
    1090:	01000084 	movi	r4,2
    1094:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1098:	800b883a 	mov	r5,r16
    109c:	010000c4 	movi	r4,3
    10a0:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    10a4:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    10a8:	00005a80 	call	5a8 <cam_get_xsize>
    10ac:	1021883a 	mov	r16,r2
    10b0:	00005cc0 	call	5cc <cam_get_ysize>
    10b4:	80ffffcc 	andi	r3,r16,65535
    10b8:	1806d07a 	srli	r3,r3,1
    10bc:	10bfffcc 	andi	r2,r2,65535
    10c0:	18a3383a 	mul	r17,r3,r2

  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    10c4:	00005a80 	call	5a8 <cam_get_xsize>
    10c8:	1021883a 	mov	r16,r2
    10cc:	00005cc0 	call	5cc <cam_get_ysize>
    10d0:	813fffcc 	andi	r4,r16,65535
    10d4:	2008d07a 	srli	r4,r4,1
    10d8:	117fffcc 	andi	r5,r2,65535
    10dc:	00013180 	call	1318 <init_sobel_arrays>
  conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
    10e0:	00005a80 	call	5a8 <cam_get_xsize>
    10e4:	1021883a 	mov	r16,r2
    10e8:	00005cc0 	call	5cc <cam_get_ysize>
    10ec:	813fffcc 	andi	r4,r16,65535
    10f0:	2008d07a 	srli	r4,r4,1
    10f4:	117fffcc 	andi	r5,r2,65535
    10f8:	00007bc0 	call	7bc <conv_grayscale_init>
  //sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());

  do {
	  if (new_image_available() != 0) {
    10fc:	00007340 	call	734 <new_image_available>
    1100:	10803fcc 	andi	r2,r2,255
    1104:	1080201c 	xori	r2,r2,128
    1108:	10bfe004 	addi	r2,r2,-128
    110c:	103ffb26 	beq	r2,zero,10fc <__alt_data_end+0xff0010fc>
		  if (current_image_valid()!=0) {
    1110:	00006dc0 	call	6dc <current_image_valid>
    1114:	10bfffcc 	andi	r2,r2,65535
    1118:	10a0001c 	xori	r2,r2,32768
    111c:	10a00004 	addi	r2,r2,-32768
    1120:	103ff626 	beq	r2,zero,10fc <__alt_data_end+0xff0010fc>

			  alt_timestamp_start();
    1124:	00129140 	call	12914 <alt_timestamp_start>

			  start_global = alt_timestamp();
    1128:	001298c0 	call	1298c <alt_timestamp>
    112c:	d0a71315 	stw	r2,-25524(gp)
			  current_mode = DIPSW_get_value();
    1130:	00007600 	call	760 <DIPSW_get_value>
    1134:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1138:	00006f00 	call	6f0 <current_image_pointer>
    113c:	102b883a 	mov	r21,r2
		      switch (mode) {
    1140:	808001cc 	andi	r2,r16,7
    1144:	1000421e 	bne	r2,zero,1250 <main+0x2b0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1148:	00005a80 	call	5a8 <cam_get_xsize>
    114c:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    1150:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1154:	b17fffcc 	andi	r5,r22,65535
    1158:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    115c:	84003fcc 	andi	r16,r16,255
    1160:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1164:	000f883a 	mov	r7,zero
    1168:	11bfffcc 	andi	r6,r2,65535
    116c:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1170:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1174:	0000f280 	call	f28 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1178:	80006216 	blt	r16,zero,1304 <main+0x364>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    117c:	001298c0 	call	1298c <alt_timestamp>
    1180:	d0a71215 	stw	r2,-25528(gp)
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1184:	d1671617 	ldw	r5,-25512(gp)
    1188:	d0a71717 	ldw	r2,-25508(gp)
    118c:	01000074 	movhi	r4,1
    1190:	2110ec04 	addi	r4,r4,17328
    1194:	288bc83a 	sub	r5,r5,r2
    1198:	0005cfc0 	call	5cfc <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    119c:	d0a71917 	ldw	r2,-25500(gp)
    11a0:	d1671817 	ldw	r5,-25504(gp)
    11a4:	01000074 	movhi	r4,1
    11a8:	2110f104 	addi	r4,r4,17348
    11ac:	288bc83a 	sub	r5,r5,r2
    11b0:	0005cfc0 	call	5cfc <printf>
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    11b4:	d0a71417 	ldw	r2,-25520(gp)
    11b8:	d4271517 	ldw	r16,-25516(gp)
    11bc:	1421c83a 	sub	r16,r2,r16
    11c0:	8444b03a 	or	r2,r16,r17
    11c4:	90801d36 	bltu	r18,r2,123c <main+0x29c>
    11c8:	8004913a 	slli	r2,r16,4
    11cc:	1444b03a 	or	r2,r2,r17
    11d0:	1505883a 	add	r2,r2,r20
    11d4:	11800003 	ldbu	r6,0(r2)
    11d8:	01000074 	movhi	r4,1
    11dc:	800b883a 	mov	r5,r16
    11e0:	2110f404 	addi	r4,r4,17360
    11e4:	0005cfc0 	call	5cfc <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    11e8:	d0a71317 	ldw	r2,-25524(gp)
    11ec:	d1271217 	ldw	r4,-25528(gp)
    11f0:	2089c83a 	sub	r4,r4,r2
    11f4:	000538c0 	call	538c <__floatunsidf>
    11f8:	01d06234 	movhi	r7,16776
    11fc:	39f5e104 	addi	r7,r7,-10364
    1200:	1009883a 	mov	r4,r2
    1204:	180b883a 	mov	r5,r3
    1208:	000d883a 	mov	r6,zero
    120c:	0004aa40 	call	4aa4 <__divdf3>
    1210:	100d883a 	mov	r6,r2
    1214:	180f883a 	mov	r7,r3
    1218:	0009883a 	mov	r4,zero
    121c:	014ffc34 	movhi	r5,16368
    1220:	0004aa40 	call	4aa4 <__divdf3>
    1224:	01000074 	movhi	r4,1
    1228:	100b883a 	mov	r5,r2
    122c:	180d883a 	mov	r6,r3
    1230:	2110fe04 	addi	r4,r4,17400
    1234:	0005cfc0 	call	5cfc <printf>
    1238:	003fb006 	br	10fc <__alt_data_end+0xff0010fc>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    123c:	880b883a 	mov	r5,r17
    1240:	8009883a 	mov	r4,r16
    1244:	00048f00 	call	48f0 <__divsi3>
    1248:	100d883a 	mov	r6,r2
    124c:	003fe206 	br	11d8 <__alt_data_end+0xff0011d8>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    1250:	001298c0 	call	1298c <alt_timestamp>
    1254:	d0a71515 	stw	r2,-25516(gp)


		    	  	   start_conv_grayscale = alt_timestamp();
    1258:	001298c0 	call	1298c <alt_timestamp>
    125c:	d0a71715 	stw	r2,-25508(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1260:	00005a80 	call	5a8 <cam_get_xsize>
    1264:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    1268:	00005cc0 	call	5cc <cam_get_ysize>
		      default:
		    	  	   start_all = alt_timestamp();


		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    126c:	b17fffcc 	andi	r5,r22,65535
    1270:	280ad07a 	srli	r5,r5,1
    1274:	11bfffcc 	andi	r6,r2,65535
    1278:	a809883a 	mov	r4,r21
    127c:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    1280:	001298c0 	call	1298c <alt_timestamp>
    1284:	d0a71615 	stw	r2,-25512(gp)

                       grayscale = get_grayscale_picture();
    1288:	00008b40 	call	8b4 <get_grayscale_picture>
    128c:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    1290:	001298c0 	call	1298c <alt_timestamp>
                       sobel_complete(grayscale, 128);
    1294:	a809883a 	mov	r4,r21
    1298:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    129c:	d0a71915 	stw	r2,-25500(gp)
                       sobel_complete(grayscale, 128);
    12a0:	0001abc0 	call	1abc <sobel_complete>
                       end_sobel = alt_timestamp();
    12a4:	001298c0 	call	1298c <alt_timestamp>
    12a8:	d0a71815 	stw	r2,-25504(gp)

		    	  	   //sobel_all_partial((void *)image);
                       //sobel_all_complete((void *)image);
		    	  	   //sobel_all_complete_fusion((void *)image);

                       end_all = alt_timestamp();
    12ac:	001298c0 	call	1298c <alt_timestamp>
    12b0:	d0a71415 	stw	r2,-25520(gp)

                       grayscale=GetSobelResult();
    12b4:	0001d8c0 	call	1d8c <GetSobelResult>
    12b8:	102d883a 	mov	r22,r2
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    12bc:	00005a80 	call	5a8 <cam_get_xsize>
    12c0:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    12c4:	00005cc0 	call	5cc <cam_get_ysize>
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12c8:	a97fffcc 	andi	r5,r21,65535
    12cc:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12d0:	84003fcc 	andi	r16,r16,255
    12d4:	8400201c 	xori	r16,r16,128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12d8:	01c00044 	movi	r7,1
    12dc:	11bfffcc 	andi	r6,r2,65535
    12e0:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12e4:	843fe004 	addi	r16,r16,-128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12e8:	0000f280 	call	f28 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12ec:	803fa30e 	bge	r16,zero,117c <__alt_data_end+0xff00117c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12f0:	01000604 	movi	r4,24
    12f4:	00048e00 	call	48e0 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12f8:	b009883a 	mov	r4,r22
    12fc:	00048d00 	call	48d0 <vga_set_pointer>
    1300:	003f9e06 	br	117c <__alt_data_end+0xff00117c>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1304:	01000204 	movi	r4,8
    1308:	00048e00 	call	48e0 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    130c:	a809883a 	mov	r4,r21
    1310:	00048d00 	call	48d0 <vga_set_pointer>
    1314:	003f9906 	br	117c <__alt_data_end+0xff00117c>

00001318 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1318:	defffd04 	addi	sp,sp,-12
    131c:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1320:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1324:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1328:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    132c:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1330:	21110204 	addi	r4,r4,17416
    1334:	280d883a 	mov	r6,r5
    1338:	800f883a 	mov	r7,r16
    133c:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1340:	dfc00215 	stw	ra,8(sp)
    1344:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    1348:	d0e71a15 	stw	r3,-25496(gp)
	sobel_height = height;
    134c:	d0a71c15 	stw	r2,-25488(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1350:	0005cfc0 	call	5cfc <printf>
	if (sobel_x_result != NULL)
    1354:	d1271d17 	ldw	r4,-25484(gp)
    1358:	20000126 	beq	r4,zero,1360 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    135c:	00054ac0 	call	54ac <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1360:	8423883a 	add	r17,r16,r16
    1364:	8809883a 	mov	r4,r17
    1368:	00054980 	call	5498 <malloc>
	if (sobel_y_result != NULL)
    136c:	d1271e17 	ldw	r4,-25480(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1370:	d0a71d15 	stw	r2,-25484(gp)
	if (sobel_y_result != NULL)
    1374:	20000126 	beq	r4,zero,137c <init_sobel_arrays+0x64>
		free(sobel_y_result);
    1378:	00054ac0 	call	54ac <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    137c:	8809883a 	mov	r4,r17
    1380:	00054980 	call	5498 <malloc>
	if (sobel_result != NULL)
    1384:	d1271b17 	ldw	r4,-25492(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1388:	d0a71e15 	stw	r2,-25480(gp)
	if (sobel_result != NULL)
    138c:	20000126 	beq	r4,zero,1394 <init_sobel_arrays+0x7c>
		free(sobel_result);
    1390:	00054ac0 	call	54ac <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1394:	8009883a 	mov	r4,r16
    1398:	0011af40 	call	11af4 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    139c:	d1271f17 	ldw	r4,-25476(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13a0:	d0a71b15 	stw	r2,-25492(gp)
	if (sobel_rgb565 != NULL)
    13a4:	20000126 	beq	r4,zero,13ac <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    13a8:	00054ac0 	call	54ac <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    13ac:	8809883a 	mov	r4,r17
    13b0:	00054980 	call	5498 <malloc>
    13b4:	d0a71f15 	stw	r2,-25476(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    13b8:	0005883a 	mov	r2,zero
    13bc:	04000f0e 	bge	zero,r16,13fc <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    13c0:	d1a71d17 	ldw	r6,-25484(gp)
		sobel_y_result[loop] = 0;
    13c4:	d1671e17 	ldw	r5,-25480(gp)
		sobel_result[loop] = 0;
    13c8:	d1271b17 	ldw	r4,-25492(gp)
    13cc:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    13d0:	30cd883a 	add	r6,r6,r3
    13d4:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    13d8:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    13dc:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    13e0:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    13e4:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    13e8:	d1271f17 	ldw	r4,-25476(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13ec:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    13f0:	20c7883a 	add	r3,r4,r3
    13f4:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13f8:	80bff11e 	bne	r16,r2,13c0 <__alt_data_end+0xff0013c0>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    13fc:	dfc00217 	ldw	ra,8(sp)
    1400:	dc400117 	ldw	r17,4(sp)
    1404:	dc000017 	ldw	r16,0(sp)
    1408:	dec00304 	addi	sp,sp,12
    140c:	f800283a 	ret

00001410 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1410:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1414:	31bfffc4 	addi	r6,r6,-1
    1418:	38c00047 	ldb	r3,1(r7)
    141c:	328d383a 	mul	r6,r6,r10
    1420:	3b8000c7 	ldb	r14,3(r7)
    1424:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1428:	5185883a 	add	r2,r10,r6
    142c:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1430:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    1434:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1438:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    143c:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1440:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1444:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1448:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    144c:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1450:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1454:	49000043 	ldbu	r4,1(r9)
    1458:	3a800147 	ldb	r10,5(r7)
    145c:	139d383a 	mul	r14,r2,r14
    1460:	60d9383a 	mul	r12,r12,r3
    1464:	68800003 	ldbu	r2,0(r13)
    1468:	38c001c7 	ldb	r3,7(r7)
    146c:	5a17383a 	mul	r11,r11,r8
    1470:	33ffffc3 	ldbu	r15,-1(r6)
    1474:	3a000007 	ldb	r8,0(r7)
    1478:	2295383a 	mul	r10,r4,r10
    147c:	31000043 	ldbu	r4,1(r6)
    1480:	39800087 	ldb	r6,2(r7)
    1484:	730b883a 	add	r5,r14,r12
    1488:	10d3383a 	mul	r9,r2,r3
    148c:	6b3fffc3 	ldbu	r12,-1(r13)
    1490:	38c00187 	ldb	r3,6(r7)
    1494:	2acb883a 	add	r5,r5,r11
    1498:	7a11383a 	mul	r8,r15,r8
    149c:	6ac00043 	ldbu	r11,1(r13)
    14a0:	39c00207 	ldb	r7,8(r7)
    14a4:	2a8b883a 	add	r5,r5,r10
    14a8:	2189383a 	mul	r4,r4,r6
    14ac:	2a45883a 	add	r2,r5,r9
    14b0:	60c7383a 	mul	r3,r12,r3
    14b4:	1205883a 	add	r2,r2,r8
    14b8:	59cb383a 	mul	r5,r11,r7
    14bc:	1105883a 	add	r2,r2,r4
    14c0:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    14c4:	1145883a 	add	r2,r2,r5
    14c8:	f800283a 	ret

000014cc <sobel_x>:

void sobel_x( unsigned char *source ) {
    14cc:	defff604 	addi	sp,sp,-40
    14d0:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14d4:	d4671c17 	ldw	r17,-25488(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    14d8:	dfc00915 	stw	ra,36(sp)
    14dc:	df000815 	stw	fp,32(sp)
    14e0:	ddc00715 	stw	r23,28(sp)
    14e4:	dd800615 	stw	r22,24(sp)
    14e8:	dd400515 	stw	r21,20(sp)
    14ec:	dd000415 	stw	r20,16(sp)
    14f0:	dcc00315 	stw	r19,12(sp)
    14f4:	dc800215 	stw	r18,8(sp)
    14f8:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14fc:	8c7fffc4 	addi	r17,r17,-1
    1500:	00800044 	movi	r2,1
    1504:	14402e0e 	bge	r2,r17,15c0 <sobel_x+0xf4>
    1508:	d3671a17 	ldw	r13,-25496(gp)
    150c:	d3e71d17 	ldw	r15,-25484(gp)
    1510:	03800084 	movi	r14,2
    1514:	6b65883a 	add	r18,r13,r13
    1518:	9385883a 	add	r2,r18,r14
    151c:	2359883a 	add	r12,r4,r13
    1520:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1524:	7027883a 	mov	r19,r14
    1528:	736bc83a 	sub	r21,r14,r13
    152c:	6ba9883a 	add	r20,r13,r14
    1530:	9b402f0e 	bge	r19,r13,15f0 <sobel_x+0x124>
    1534:	637f883a 	add	ra,r12,r13
    1538:	7021883a 	mov	r16,r14
    153c:	6357c83a 	sub	r11,r12,r13
    1540:	ab0b883a 	add	r5,r21,r12
    1544:	62800084 	addi	r10,r12,2
    1548:	f813883a 	mov	r9,ra
    154c:	a311883a 	add	r8,r20,r12
    1550:	780f883a 	mov	r7,r15
    1554:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1558:	29000003 	ldbu	r4,0(r5)
    155c:	40c00003 	ldbu	r3,0(r8)
    1560:	37000003 	ldbu	fp,0(r6)
    1564:	50800003 	ldbu	r2,0(r10)
    1568:	20c7883a 	add	r3,r4,r3
    156c:	5dc00003 	ldbu	r23,0(r11)
    1570:	1f07c83a 	sub	r3,r3,fp
    1574:	4d800003 	ldbu	r22,0(r9)
    1578:	1f09c83a 	sub	r4,r3,fp
    157c:	1087883a 	add	r3,r2,r2
    1580:	20c7883a 	add	r3,r4,r3
    1584:	1dc5c83a 	sub	r2,r3,r23
    1588:	1585c83a 	sub	r2,r2,r22
    158c:	3880000d 	sth	r2,0(r7)
    1590:	29400044 	addi	r5,r5,1
    1594:	5ac00044 	addi	r11,r11,1
    1598:	31800044 	addi	r6,r6,1
    159c:	52800044 	addi	r10,r10,1
    15a0:	4a400044 	addi	r9,r9,1
    15a4:	42000044 	addi	r8,r8,1
    15a8:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15ac:	617fea1e 	bne	r12,r5,1558 <__alt_data_end+0xff001558>
    15b0:	73800044 	addi	r14,r14,1
    15b4:	f819883a 	mov	r12,ra
    15b8:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15bc:	847fdc16 	blt	r16,r17,1530 <__alt_data_end+0xff001530>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    15c0:	dfc00917 	ldw	ra,36(sp)
    15c4:	df000817 	ldw	fp,32(sp)
    15c8:	ddc00717 	ldw	r23,28(sp)
    15cc:	dd800617 	ldw	r22,24(sp)
    15d0:	dd400517 	ldw	r21,20(sp)
    15d4:	dd000417 	ldw	r20,16(sp)
    15d8:	dcc00317 	ldw	r19,12(sp)
    15dc:	dc800217 	ldw	r18,8(sp)
    15e0:	dc400117 	ldw	r17,4(sp)
    15e4:	dc000017 	ldw	r16,0(sp)
    15e8:	dec00a04 	addi	sp,sp,40
    15ec:	f800283a 	ret
    15f0:	7021883a 	mov	r16,r14
    15f4:	637f883a 	add	ra,r12,r13
    15f8:	73800044 	addi	r14,r14,1
    15fc:	f819883a 	mov	r12,ra
    1600:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1604:	847fca16 	blt	r16,r17,1530 <__alt_data_end+0xff001530>
    1608:	003fed06 	br	15c0 <__alt_data_end+0xff0015c0>

0000160c <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    160c:	defff504 	addi	sp,sp,-44
    1610:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1614:	d5a71c17 	ldw	r22,-25488(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1618:	dfc00a15 	stw	ra,40(sp)
    161c:	df000915 	stw	fp,36(sp)
    1620:	ddc00815 	stw	r23,32(sp)
    1624:	dd400615 	stw	r21,24(sp)
    1628:	dd000515 	stw	r20,20(sp)
    162c:	dcc00415 	stw	r19,16(sp)
    1630:	dc800315 	stw	r18,12(sp)
    1634:	dc400215 	stw	r17,8(sp)
    1638:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    163c:	b5bfffc4 	addi	r22,r22,-1
    1640:	00800044 	movi	r2,1
    1644:	1580440e 	bge	r2,r22,1758 <sobel_x_with_rgb+0x14c>
    1648:	d7e71a17 	ldw	ra,-25496(gp)
    164c:	d4a71d17 	ldw	r18,-25484(gp)
    1650:	d4671f17 	ldw	r17,-25476(gp)
    1654:	ffe9883a 	add	r20,ra,ra
    1658:	a0800084 	addi	r2,r20,2
    165c:	04000084 	movi	r16,2
    1660:	90a5883a 	add	r18,r18,r2
    1664:	88a3883a 	add	r17,r17,r2
    1668:	fc05883a 	add	r2,ra,r16
    166c:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1670:	802f883a 	mov	r23,r16
    1674:	87f9c83a 	sub	fp,r16,ra
    1678:	d8800015 	stw	r2,0(sp)
    167c:	bfc02f0e 	bge	r23,ra,173c <sobel_x_with_rgb+0x130>
    1680:	d8800017 	ldw	r2,0(sp)
    1684:	7fe7883a 	add	r19,r15,ra
    1688:	802b883a 	mov	r21,r16
    168c:	7fdbc83a 	sub	r13,r15,ra
    1690:	e3cf883a 	add	r7,fp,r15
    1694:	7b000084 	addi	r12,r15,2
    1698:	9817883a 	mov	r11,r19
    169c:	13d5883a 	add	r10,r2,r15
    16a0:	881d883a 	mov	r14,r17
    16a4:	9013883a 	mov	r9,r18
    16a8:	7811883a 	mov	r8,r15
    16ac:	00000b06 	br	16dc <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16b0:	180692fa 	slli	r3,r3,11
    16b4:	70c0000d 	sth	r3,0(r14)
    16b8:	39c00044 	addi	r7,r7,1
    16bc:	6b400044 	addi	r13,r13,1
    16c0:	42000044 	addi	r8,r8,1
    16c4:	63000044 	addi	r12,r12,1
    16c8:	5ac00044 	addi	r11,r11,1
    16cc:	52800044 	addi	r10,r10,1
    16d0:	4a400084 	addi	r9,r9,2
    16d4:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16d8:	79c01a26 	beq	r15,r7,1744 <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    16dc:	50800003 	ldbu	r2,0(r10)
    16e0:	39400003 	ldbu	r5,0(r7)
    16e4:	41800003 	ldbu	r6,0(r8)
    16e8:	60c00003 	ldbu	r3,0(r12)
    16ec:	288b883a 	add	r5,r5,r2
    16f0:	298bc83a 	sub	r5,r5,r6
    16f4:	68800003 	ldbu	r2,0(r13)
    16f8:	59000003 	ldbu	r4,0(r11)
    16fc:	298bc83a 	sub	r5,r5,r6
    1700:	18c7883a 	add	r3,r3,r3
    1704:	28c7883a 	add	r3,r5,r3
    1708:	1887c83a 	sub	r3,r3,r2
    170c:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1710:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    1714:	10bfffcc 	andi	r2,r2,65535
    1718:	10a0001c 	xori	r2,r2,32768
    171c:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1720:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1724:	103fe20e 	bge	r2,zero,16b0 <__alt_data_end+0xff0016b0>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1728:	0085c83a 	sub	r2,zero,r2
    172c:	1005d0ba 	srai	r2,r2,2
    1730:	1004917a 	slli	r2,r2,5
    1734:	7080000d 	sth	r2,0(r14)
    1738:	003fdf06 	br	16b8 <__alt_data_end+0xff0016b8>
    173c:	802b883a 	mov	r21,r16
    1740:	7fe7883a 	add	r19,r15,ra
    1744:	84000044 	addi	r16,r16,1
    1748:	981f883a 	mov	r15,r19
    174c:	9525883a 	add	r18,r18,r20
    1750:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1754:	adbfc916 	blt	r21,r22,167c <__alt_data_end+0xff00167c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1758:	dfc00a17 	ldw	ra,40(sp)
    175c:	df000917 	ldw	fp,36(sp)
    1760:	ddc00817 	ldw	r23,32(sp)
    1764:	dd800717 	ldw	r22,28(sp)
    1768:	dd400617 	ldw	r21,24(sp)
    176c:	dd000517 	ldw	r20,20(sp)
    1770:	dcc00417 	ldw	r19,16(sp)
    1774:	dc800317 	ldw	r18,12(sp)
    1778:	dc400217 	ldw	r17,8(sp)
    177c:	dc000117 	ldw	r16,4(sp)
    1780:	dec00b04 	addi	sp,sp,44
    1784:	f800283a 	ret

00001788 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1788:	defff704 	addi	sp,sp,-36
    178c:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1790:	d4671c17 	ldw	r17,-25488(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1794:	dfc00815 	stw	ra,32(sp)
    1798:	ddc00715 	stw	r23,28(sp)
    179c:	dd800615 	stw	r22,24(sp)
    17a0:	dd400515 	stw	r21,20(sp)
    17a4:	dd000415 	stw	r20,16(sp)
    17a8:	dcc00315 	stw	r19,12(sp)
    17ac:	dc800215 	stw	r18,8(sp)
    17b0:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17b4:	8c7fffc4 	addi	r17,r17,-1
    17b8:	00800044 	movi	r2,1
    17bc:	14402d0e 	bge	r2,r17,1874 <sobel_y+0xec>
    17c0:	d3e71a17 	ldw	r15,-25496(gp)
    17c4:	d3a71e17 	ldw	r14,-25480(gp)
    17c8:	03400084 	movi	r13,2
    17cc:	7bff883a 	add	ra,r15,r15
    17d0:	fb67883a 	add	r19,ra,r13
    17d4:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17d8:	6825883a 	mov	r18,r13
    17dc:	f8a9883a 	add	r20,ra,r2
    17e0:	6821883a 	mov	r16,r13
    17e4:	93c01f0e 	bge	r18,r15,1864 <sobel_y+0xdc>
    17e8:	27cd883a 	add	r6,r4,ra
    17ec:	6821883a 	mov	r16,r13
    17f0:	22c00044 	addi	r11,r4,1
    17f4:	22800084 	addi	r10,r4,2
    17f8:	a113883a 	add	r9,r20,r4
    17fc:	990b883a 	add	r5,r19,r4
    1800:	7999883a 	add	r12,r15,r6
    1804:	7011883a 	mov	r8,r14
    1808:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    180c:	3d800003 	ldbu	r22,0(r7)
    1810:	50c00003 	ldbu	r3,0(r10)
    1814:	58800003 	ldbu	r2,0(r11)
    1818:	4d400003 	ldbu	r21,0(r9)
    181c:	b0c7883a 	add	r3,r22,r3
    1820:	1085883a 	add	r2,r2,r2
    1824:	35c00003 	ldbu	r23,0(r6)
    1828:	1887883a 	add	r3,r3,r2
    182c:	2d800003 	ldbu	r22,0(r5)
    1830:	1d47c83a 	sub	r3,r3,r21
    1834:	1d47c83a 	sub	r3,r3,r21
    1838:	1dc5c83a 	sub	r2,r3,r23
    183c:	1585c83a 	sub	r2,r2,r22
    1840:	4080000d 	sth	r2,0(r8)
    1844:	29400044 	addi	r5,r5,1
    1848:	39c00044 	addi	r7,r7,1
    184c:	5ac00044 	addi	r11,r11,1
    1850:	52800044 	addi	r10,r10,1
    1854:	4a400044 	addi	r9,r9,1
    1858:	31800044 	addi	r6,r6,1
    185c:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1860:	617fea1e 	bne	r12,r5,180c <__alt_data_end+0xff00180c>
    1864:	6b400044 	addi	r13,r13,1
    1868:	23c9883a 	add	r4,r4,r15
    186c:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1870:	847fdb16 	blt	r16,r17,17e0 <__alt_data_end+0xff0017e0>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1874:	dfc00817 	ldw	ra,32(sp)
    1878:	ddc00717 	ldw	r23,28(sp)
    187c:	dd800617 	ldw	r22,24(sp)
    1880:	dd400517 	ldw	r21,20(sp)
    1884:	dd000417 	ldw	r20,16(sp)
    1888:	dcc00317 	ldw	r19,12(sp)
    188c:	dc800217 	ldw	r18,8(sp)
    1890:	dc400117 	ldw	r17,4(sp)
    1894:	dc000017 	ldw	r16,0(sp)
    1898:	dec00904 	addi	sp,sp,36
    189c:	f800283a 	ret

000018a0 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    18a0:	defff604 	addi	sp,sp,-40
    18a4:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18a8:	d4e71c17 	ldw	r19,-25488(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    18ac:	dfc00915 	stw	ra,36(sp)
    18b0:	df000815 	stw	fp,32(sp)
    18b4:	ddc00715 	stw	r23,28(sp)
    18b8:	dd800615 	stw	r22,24(sp)
    18bc:	dd400515 	stw	r21,20(sp)
    18c0:	dd000415 	stw	r20,16(sp)
    18c4:	dc800215 	stw	r18,8(sp)
    18c8:	dc400115 	stw	r17,4(sp)
    18cc:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18d0:	9cffffc4 	addi	r19,r19,-1
    18d4:	00800044 	movi	r2,1
    18d8:	14c03f0e 	bge	r2,r19,19d8 <sobel_y_with_rgb+0x138>
    18dc:	d4671a17 	ldw	r17,-25496(gp)
    18e0:	d4271e17 	ldw	r16,-25480(gp)
    18e4:	d7e71f17 	ldw	ra,-25476(gp)
    18e8:	8c5d883a 	add	r14,r17,r17
    18ec:	75000084 	addi	r20,r14,2
    18f0:	03c00084 	movi	r15,2
    18f4:	8521883a 	add	r16,r16,r20
    18f8:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18fc:	782b883a 	mov	r21,r15
    1900:	70ad883a 	add	r22,r14,r2
    1904:	7825883a 	mov	r18,r15
    1908:	ac402e0e 	bge	r21,r17,19c4 <sobel_y_with_rgb+0x124>
    190c:	238d883a 	add	r6,r4,r14
    1910:	7825883a 	mov	r18,r15
    1914:	22c00044 	addi	r11,r4,1
    1918:	22800084 	addi	r10,r4,2
    191c:	b113883a 	add	r9,r22,r4
    1920:	a10b883a 	add	r5,r20,r4
    1924:	899b883a 	add	r13,r17,r6
    1928:	f819883a 	mov	r12,ra
    192c:	8011883a 	mov	r8,r16
    1930:	200f883a 	mov	r7,r4
    1934:	00000b06 	br	1964 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1938:	180692fa 	slli	r3,r3,11
    193c:	60c0000d 	sth	r3,0(r12)
    1940:	29400044 	addi	r5,r5,1
    1944:	39c00044 	addi	r7,r7,1
    1948:	5ac00044 	addi	r11,r11,1
    194c:	52800044 	addi	r10,r10,1
    1950:	4a400044 	addi	r9,r9,1
    1954:	31800044 	addi	r6,r6,1
    1958:	42000084 	addi	r8,r8,2
    195c:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1960:	69401826 	beq	r13,r5,19c4 <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1964:	50800003 	ldbu	r2,0(r10)
    1968:	3f000003 	ldbu	fp,0(r7)
    196c:	58c00003 	ldbu	r3,0(r11)
    1970:	4dc00003 	ldbu	r23,0(r9)
    1974:	e0b9883a 	add	fp,fp,r2
    1978:	18c7883a 	add	r3,r3,r3
    197c:	30800003 	ldbu	r2,0(r6)
    1980:	e0c7883a 	add	r3,fp,r3
    1984:	1dc7c83a 	sub	r3,r3,r23
    1988:	2f000003 	ldbu	fp,0(r5)
    198c:	1dc7c83a 	sub	r3,r3,r23
    1990:	1885c83a 	sub	r2,r3,r2
    1994:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1998:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    199c:	10bfffcc 	andi	r2,r2,65535
    19a0:	10a0001c 	xori	r2,r2,32768
    19a4:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19a8:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    19ac:	103fe20e 	bge	r2,zero,1938 <__alt_data_end+0xff001938>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    19b0:	0085c83a 	sub	r2,zero,r2
    19b4:	1005d0ba 	srai	r2,r2,2
    19b8:	1004917a 	slli	r2,r2,5
    19bc:	6080000d 	sth	r2,0(r12)
    19c0:	003fdf06 	br	1940 <__alt_data_end+0xff001940>
    19c4:	7bc00044 	addi	r15,r15,1
    19c8:	2449883a 	add	r4,r4,r17
    19cc:	83a1883a 	add	r16,r16,r14
    19d0:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19d4:	94ffcb16 	blt	r18,r19,1904 <__alt_data_end+0xff001904>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    19d8:	dfc00917 	ldw	ra,36(sp)
    19dc:	df000817 	ldw	fp,32(sp)
    19e0:	ddc00717 	ldw	r23,28(sp)
    19e4:	dd800617 	ldw	r22,24(sp)
    19e8:	dd400517 	ldw	r21,20(sp)
    19ec:	dd000417 	ldw	r20,16(sp)
    19f0:	dcc00317 	ldw	r19,12(sp)
    19f4:	dc800217 	ldw	r18,8(sp)
    19f8:	dc400117 	ldw	r17,4(sp)
    19fc:	dc000017 	ldw	r16,0(sp)
    1a00:	dec00a04 	addi	sp,sp,40
    1a04:	f800283a 	ret

00001a08 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a08:	d0a71c17 	ldw	r2,-25488(gp)
    1a0c:	02400084 	movi	r9,2
    1a10:	4880290e 	bge	r9,r2,1ab8 <sobel_threshold+0xb0>
    1a14:	223fffcc 	andi	r8,r4,65535
    1a18:	d0e71a17 	ldw	r3,-25496(gp)
    1a1c:	4220001c 	xori	r8,r8,32768
    1a20:	01c00044 	movi	r7,1
    1a24:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a28:	48c0200e 	bge	r9,r3,1aac <sobel_threshold+0xa4>
    1a2c:	01400044 	movi	r5,1
    1a30:	00000c06 	br	1a64 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a34:	2080000f 	ldh	r2,0(r4)
    1a38:	10001916 	blt	r2,zero,1aa0 <sobel_threshold+0x98>
    1a3c:	3085883a 	add	r2,r6,r2
    1a40:	10bfffcc 	andi	r2,r2,65535
    1a44:	10a0001c 	xori	r2,r2,32768
    1a48:	10a00004 	addi	r2,r2,-32768
    1a4c:	4084803a 	cmplt	r2,r8,r2
    1a50:	0085c83a 	sub	r2,zero,r2
    1a54:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a58:	d0e71a17 	ldw	r3,-25496(gp)
    1a5c:	18bfffc4 	addi	r2,r3,-1
    1a60:	2880110e 	bge	r5,r2,1aa8 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a64:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a68:	d1a71e17 	ldw	r6,-25480(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a6c:	d1271d17 	ldw	r4,-25484(gp)
    1a70:	1947883a 	add	r3,r3,r5
    1a74:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a78:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a7c:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a80:	3180000f 	ldh	r6,0(r6)
    1a84:	d0a71b17 	ldw	r2,-25492(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a88:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a8c:	10c7883a 	add	r3,r2,r3
    1a90:	303fe80e 	bge	r6,zero,1a34 <__alt_data_end+0xff001a34>
    1a94:	2080000f 	ldh	r2,0(r4)
    1a98:	018dc83a 	sub	r6,zero,r6
    1a9c:	103fe70e 	bge	r2,zero,1a3c <__alt_data_end+0xff001a3c>
    1aa0:	0085c83a 	sub	r2,zero,r2
    1aa4:	003fe506 	br	1a3c <__alt_data_end+0xff001a3c>
    1aa8:	d0a71c17 	ldw	r2,-25488(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1aac:	39c00044 	addi	r7,r7,1
    1ab0:	113fffc4 	addi	r4,r2,-1
    1ab4:	393fdc16 	blt	r7,r4,1a28 <__alt_data_end+0xff001a28>
    1ab8:	f800283a 	ret

00001abc <sobel_complete>:
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1abc:	defff704 	addi	sp,sp,-36
    1ac0:	dc800215 	stw	r18,8(sp)
    1ac4:	d3671c17 	ldw	r13,-25488(gp)
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
    1ac8:	d4a71a17 	ldw	r18,-25496(gp)
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1acc:	dc000015 	stw	r16,0(sp)
    1ad0:	2c3fffcc 	andi	r16,r5,65535
    1ad4:	8420001c 	xori	r16,r16,32768
    1ad8:	dd000415 	stw	r20,16(sp)
    1adc:	dcc00315 	stw	r19,12(sp)
    1ae0:	dc400115 	stw	r17,4(sp)
    1ae4:	dfc00815 	stw	ra,32(sp)
    1ae8:	ddc00715 	stw	r23,28(sp)
    1aec:	dd800615 	stw	r22,24(sp)
    1af0:	dd400515 	stw	r21,20(sp)
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1af4:	04400044 	movi	r17,1
    1af8:	6b7fffc4 	addi	r13,r13,-1

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    1afc:	04c00084 	movi	r19,2
    1b00:	84200004 	addi	r16,r16,-32768
    1b04:	953fffc4 	addi	r20,r18,-1
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b08:	8b403d0e 	bge	r17,r13,1c00 <sobel_complete+0x144>
			y0 = (y-1)*sobel_width+1;
    1b0c:	d2271a17 	ldw	r8,-25496(gp)
    1b10:	8a7fffc4 	addi	r9,r17,-1
		    y1 = y*sobel_width+1;
    1b14:	8a0b383a 	mul	r5,r17,r8
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
    1b18:	4a13383a 	mul	r9,r9,r8
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;
    1b1c:	8c400044 	addi	r17,r17,1
    1b20:	4151883a 	add	r8,r8,r5

			p2 = source[y0-1];
    1b24:	4a800044 	addi	r10,r9,1
			p5 = source[y1-1];
    1b28:	29800044 	addi	r6,r5,1
			p8 = source[y2-1];
    1b2c:	41c00044 	addi	r7,r8,1
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
			p5 = source[y1-1];
    1b30:	2199883a 	add	r12,r4,r6
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    1b34:	2295883a 	add	r10,r4,r10
			p5 = source[y1-1];
			p8 = source[y2-1];
    1b38:	21cf883a 	add	r7,r4,r7
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
			p5 = source[y1-1];
    1b3c:	657fffc3 	ldbu	r21,-1(r12)
			p8 = source[y2-1];

			p3 = source[y0];
			p6 = source[y1];
    1b40:	67c00003 	ldbu	ra,0(r12)
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width+1;
		    y1 = y*sobel_width+1;
		    y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    1b44:	50ffffc3 	ldbu	r3,-1(r10)
			p5 = source[y1-1];
			p8 = source[y2-1];
    1b48:	38bfffc3 	ldbu	r2,-1(r7)

			p3 = source[y0];
    1b4c:	52c00003 	ldbu	r11,0(r10)
			p6 = source[y1];
			p9 = source[y2];
    1b50:	3b000003 	ldbu	r12,0(r7)

			for (x = 1 ; x < width_len ; x++) {
    1b54:	9cbfec0e 	bge	r19,r18,1b08 <__alt_data_end+0xff001b08>
    1b58:	2a800084 	addi	r10,r5,2
    1b5c:	4a400084 	addi	r9,r9,2
    1b60:	42000084 	addi	r8,r8,2
    1b64:	2253883a 	add	r9,r4,r9
    1b68:	2295883a 	add	r10,r4,r10
    1b6c:	2211883a 	add	r8,r4,r8
    1b70:	a14b883a 	add	r5,r20,r5
    1b74:	00000106 	br	1b7c <sobel_complete+0xc0>
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
    1b78:	783f883a 	mov	ra,r15
				p2 = p3;
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
    1b7c:	4b800003 	ldbu	r14,0(r9)
				p6 = source[yc];
				p9 = source[y2+x];
    1b80:	43400003 	ldbu	r13,0(r8)
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1b84:	d1e71b17 	ldw	r7,-25492(gp)
				p3 = source[y0+x];
				p6 = source[yc];
				p9 = source[y2+x];
				
				a = p1 - p9;
				b = p3 - p7;
    1b88:	7085c83a 	sub	r2,r14,r2
				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
				p9 = source[y2+x];
				
				a = p1 - p9;
    1b8c:	1b47c83a 	sub	r3,r3,r13
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1b90:	5b2dc83a 	sub	r22,r11,r12
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
				p6 = source[yc];
    1b94:	53c00003 	ldbu	r15,0(r10)
				p9 = source[y2+x];
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1b98:	18af883a 	add	r23,r3,r2
    1b9c:	b5ad883a 	add	r22,r22,r22
    1ba0:	398f883a 	add	r7,r7,r6
    1ba4:	b5ed883a 	add	r22,r22,r23
    1ba8:	b02dc072 	custom	1,r22,r22,zero
    1bac:	7d6bc83a 	sub	r21,r15,r21
    1bb0:	ad6b883a 	add	r21,r21,r21
    1bb4:	10c7c83a 	sub	r3,r2,r3
    1bb8:	a8c5883a 	add	r2,r21,r3
    1bbc:	1005c072 	custom	1,r2,r2,zero
    1bc0:	b085883a 	add	r2,r22,r2
    1bc4:	1405c0b2 	custom	2,r2,r2,r16
    1bc8:	38800025 	stbio	r2,0(r7)
    1bcc:	31800044 	addi	r6,r6,1
    1bd0:	5807883a 	mov	r3,r11
    1bd4:	6005883a 	mov	r2,r12
    1bd8:	f82b883a 	mov	r21,ra
    1bdc:	4a400044 	addi	r9,r9,1
    1be0:	52800044 	addi	r10,r10,1
    1be4:	42000044 	addi	r8,r8,1
				p2 = p3;
				p5 = p6;
				p8 = p9;

				yc = y1+x;
				p3 = source[y0+x];
    1be8:	7017883a 	mov	r11,r14
				p6 = source[yc];
				p9 = source[y2+x];
    1bec:	6819883a 	mov	r12,r13

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    1bf0:	29bfe11e 	bne	r5,r6,1b78 <__alt_data_end+0xff001b78>
    1bf4:	d3671c17 	ldw	r13,-25488(gp)
    1bf8:	6b7fffc4 	addi	r13,r13,-1
	int x,y;
	int a,b;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1bfc:	8b7fc316 	blt	r17,r13,1b0c <__alt_data_end+0xff001b0c>
						ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
						ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
						,threshold));
			}
		}
}
    1c00:	dfc00817 	ldw	ra,32(sp)
    1c04:	ddc00717 	ldw	r23,28(sp)
    1c08:	dd800617 	ldw	r22,24(sp)
    1c0c:	dd400517 	ldw	r21,20(sp)
    1c10:	dd000417 	ldw	r20,16(sp)
    1c14:	dcc00317 	ldw	r19,12(sp)
    1c18:	dc800217 	ldw	r18,8(sp)
    1c1c:	dc400117 	ldw	r17,4(sp)
    1c20:	dc000017 	ldw	r16,0(sp)
    1c24:	dec00904 	addi	sp,sp,36
    1c28:	f800283a 	ret

00001c2c <sobel_complete_parted>:

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
    1c2c:	defff704 	addi	sp,sp,-36
    1c30:	dd000415 	stw	r20,16(sp)
    1c34:	dc400115 	stw	r17,4(sp)
    1c38:	2d3fffcc 	andi	r20,r5,65535
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
    1c3c:	d4671a17 	ldw	r17,-25496(gp)
    1c40:	a520001c 	xori	r20,r20,32768
						,threshold));
			}
		}
}

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
    1c44:	dcc00315 	stw	r19,12(sp)
    1c48:	dc800215 	stw	r18,8(sp)
    1c4c:	dfc00815 	stw	ra,32(sp)
    1c50:	ddc00715 	stw	r23,28(sp)
    1c54:	dd800615 	stw	r22,24(sp)
    1c58:	dd400515 	stw	r21,20(sp)
    1c5c:	dc000015 	stw	r16,0(sp)
    1c60:	31e5883a 	add	r18,r6,r7

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    1c64:	04c00084 	movi	r19,2
    1c68:	a5200004 	addi	r20,r20,-32768
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = offset ; y < (offset+len) ; y++) {
    1c6c:	34803a0e 	bge	r6,r18,1d58 <sobel_complete_parted+0x12c>
			y0 = (y-1)*sobel_width+1;
    1c70:	d2a71a17 	ldw	r10,-25496(gp)
    1c74:	32ffffc4 	addi	r11,r6,-1
			y1 = y*sobel_width+1;
    1c78:	32a1383a 	mul	r16,r6,r10
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width+1;
    1c7c:	5a97383a 	mul	r11,r11,r10
			y1 = y*sobel_width+1;
			y2 = (y+1)*sobel_width+1;
    1c80:	31800044 	addi	r6,r6,1
    1c84:	5415883a 	add	r10,r10,r16

			p2 = source[y0-1];
    1c88:	5a000044 	addi	r8,r11,1
			p5 = source[y1-1];
    1c8c:	81c00044 	addi	r7,r16,1
			p8 = source[y2-1];
    1c90:	51400044 	addi	r5,r10,1
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width+1;
			y1 = y*sobel_width+1;
			y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    1c94:	2211883a 	add	r8,r4,r8
			p5 = source[y1-1];
    1c98:	21cf883a 	add	r7,r4,r7
			p8 = source[y2-1];
    1c9c:	214b883a 	add	r5,r4,r5
			y0 = (y-1)*sobel_width+1;
			y1 = y*sobel_width+1;
			y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
			p5 = source[y1-1];
    1ca0:	3d7fffc3 	ldbu	r21,-1(r7)
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width+1;
			y1 = y*sobel_width+1;
			y2 = (y+1)*sobel_width+1;

			p2 = source[y0-1];
    1ca4:	40ffffc3 	ldbu	r3,-1(r8)
			p5 = source[y1-1];
			p8 = source[y2-1];
    1ca8:	28bfffc3 	ldbu	r2,-1(r5)

			p3 = source[y0];
    1cac:	43000003 	ldbu	r12,0(r8)
			p6 = source[y1];
    1cb0:	39c00003 	ldbu	r7,0(r7)
			p9 = source[y2];
    1cb4:	2b400003 	ldbu	r13,0(r5)

			for (x = 1 ; x < width_len ; x++) {
    1cb8:	9c7fec0e 	bge	r19,r17,1c6c <__alt_data_end+0xff001c6c>
    1cbc:	82000084 	addi	r8,r16,2
    1cc0:	5ac00084 	addi	r11,r11,2
    1cc4:	52800084 	addi	r10,r10,2
    1cc8:	22d7883a 	add	r11,r4,r11
    1ccc:	221d883a 	add	r14,r4,r8
    1cd0:	2295883a 	add	r10,r4,r10
    1cd4:	8461883a 	add	r16,r16,r17

				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x];
    1cd8:	5fc00003 	ldbu	ra,0(r11)
				p6 = source[y1+x];
				p9 = source[y2+x];
    1cdc:	53c00003 	ldbu	r15,0(r10)

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1ce0:	d2671b17 	ldw	r9,-25492(gp)
				p3 = source[y0+x];
				p6 = source[y1+x];
				p9 = source[y2+x];

				a = p1 - p9;
				b = p3 - p7;
    1ce4:	f885c83a 	sub	r2,ra,r2

				p3 = source[y0+x];
				p6 = source[y1+x];
				p9 = source[y2+x];

				a = p1 - p9;
    1ce8:	1bc7c83a 	sub	r3,r3,r15
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1cec:	636dc83a 	sub	r22,r12,r13
				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x];
				p6 = source[y1+x];
    1cf0:	71400003 	ldbu	r5,0(r14)
				p9 = source[y2+x];

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1cf4:	18af883a 	add	r23,r3,r2
    1cf8:	b5ad883a 	add	r22,r22,r22
    1cfc:	4a13883a 	add	r9,r9,r8
    1d00:	b5ed883a 	add	r22,r22,r23
    1d04:	b02dc072 	custom	1,r22,r22,zero
    1d08:	2d6bc83a 	sub	r21,r5,r21
    1d0c:	ad6b883a 	add	r21,r21,r21
    1d10:	10c7c83a 	sub	r3,r2,r3
    1d14:	a8c5883a 	add	r2,r21,r3
    1d18:	1005c072 	custom	1,r2,r2,zero
    1d1c:	b085883a 	add	r2,r22,r2
    1d20:	1505c0b2 	custom	2,r2,r2,r20
    1d24:	48800025 	stbio	r2,0(r9)
    1d28:	42000044 	addi	r8,r8,1
    1d2c:	6007883a 	mov	r3,r12
    1d30:	6805883a 	mov	r2,r13
    1d34:	382b883a 	mov	r21,r7
    1d38:	5ac00044 	addi	r11,r11,1
    1d3c:	73800044 	addi	r14,r14,1
    1d40:	52800044 	addi	r10,r10,1

				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x];
    1d44:	f819883a 	mov	r12,ra
				p6 = source[y1+x];
				p9 = source[y2+x];
    1d48:	781b883a 	mov	r13,r15

			p3 = source[y0];
			p6 = source[y1];
			p9 = source[y2];

			for (x = 1 ; x < width_len ; x++) {
    1d4c:	823fc726 	beq	r16,r8,1c6c <__alt_data_end+0xff001c6c>
				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x];
				p6 = source[y1+x];
    1d50:	280f883a 	mov	r7,r5
    1d54:	003fe006 	br	1cd8 <__alt_data_end+0xff001cd8>
						ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
						ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
						,threshold));
			}
		}
}
    1d58:	dfc00817 	ldw	ra,32(sp)
    1d5c:	ddc00717 	ldw	r23,28(sp)
    1d60:	dd800617 	ldw	r22,24(sp)
    1d64:	dd400517 	ldw	r21,20(sp)
    1d68:	dd000417 	ldw	r20,16(sp)
    1d6c:	dcc00317 	ldw	r19,12(sp)
    1d70:	dc800217 	ldw	r18,8(sp)
    1d74:	dc400117 	ldw	r17,4(sp)
    1d78:	dc000017 	ldw	r16,0(sp)
    1d7c:	dec00904 	addi	sp,sp,36
    1d80:	f800283a 	ret

00001d84 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d84:	d0a71f17 	ldw	r2,-25476(gp)
    1d88:	f800283a 	ret

00001d8c <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d8c:	d0a71b17 	ldw	r2,-25492(gp)
    1d90:	f800283a 	ret

00001d94 <sobel_all_init>:
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d94:	defffe04 	addi	sp,sp,-8
    1d98:	dc000015 	stw	r16,0(sp)
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
    1d9c:	2161383a 	mul	r16,r4,r5
	array_width_int = width>>2;
    1da0:	2011d0ba 	srai	r8,r4,2
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1da4:	2005883a 	mov	r2,r4
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	array_width_int = width>>2;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1da8:	01000074 	movhi	r4,1
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1dac:	2807883a 	mov	r3,r5
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	array_width_int = width>>2;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1db0:	21110204 	addi	r4,r4,17416
    1db4:	280d883a 	mov	r6,r5
    1db8:	800f883a 	mov	r7,r16
    1dbc:	100b883a 	mov	r5,r2
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1dc0:	dfc00115 	stw	ra,4(sp)
	int loop = 0;
	array_width = width;
    1dc4:	d0a72715 	stw	r2,-25444(gp)
	array_height = height;
    1dc8:	d0e72615 	stw	r3,-25448(gp)
	size = width*height;
    1dcc:	d4272415 	stw	r16,-25456(gp)
	array_width_int = width>>2;
    1dd0:	d2272515 	stw	r8,-25452(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1dd4:	0005cfc0 	call	5cfc <printf>
	if (grayscale_array != NULL)
    1dd8:	d1271017 	ldw	r4,-25536(gp)
    1ddc:	20000126 	beq	r4,zero,1de4 <sobel_all_init+0x50>
		free(grayscale_array);
    1de0:	00054ac0 	call	54ac <free>
	grayscale_array = (unsigned char *) malloc(width* height);
    1de4:	8009883a 	mov	r4,r16
    1de8:	00054980 	call	5498 <malloc>
	grayscale_array_int = (unsigned int *) grayscale_array;
	if (sobel_result != NULL)
    1dec:	d1271b17 	ldw	r4,-25492(gp)
	size = width*height;
	array_width_int = width>>2;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
    1df0:	d0a71015 	stw	r2,-25536(gp)
	grayscale_array_int = (unsigned int *) grayscale_array;
    1df4:	d0a70f15 	stw	r2,-25540(gp)
	if (sobel_result != NULL)
    1df8:	20000126 	beq	r4,zero,1e00 <sobel_all_init+0x6c>
		free(sobel_result);
    1dfc:	00054ac0 	call	54ac <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1e00:	8009883a 	mov	r4,r16
    1e04:	0011af40 	call	11af4 <alt_uncached_malloc>
    1e08:	d0a71b15 	stw	r2,-25492(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1e0c:	0400070e 	bge	zero,r16,1e2c <sobel_all_init+0x98>
    1e10:	0007883a 	mov	r3,zero
    1e14:	00000106 	br	1e1c <sobel_all_init+0x88>
    1e18:	d0a71b17 	ldw	r2,-25492(gp)
		sobel_result[loop] = 0;
    1e1c:	10c5883a 	add	r2,r2,r3
    1e20:	10000005 	stb	zero,0(r2)
	grayscale_array = (unsigned char *) malloc(width* height);
	grayscale_array_int = (unsigned int *) grayscale_array;
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1e24:	18c00044 	addi	r3,r3,1
    1e28:	80fffb1e 	bne	r16,r3,1e18 <__alt_data_end+0xff001e18>
		sobel_result[loop] = 0;
	}
}
    1e2c:	dfc00117 	ldw	ra,4(sp)
    1e30:	dc000017 	ldw	r16,0(sp)
    1e34:	dec00204 	addi	sp,sp,8
    1e38:	f800283a 	ret

00001e3c <sobel_all_complete>:

void sobel_all_complete(void *picture){
    1e3c:	defff904 	addi	sp,sp,-28
    1e40:	dc400115 	stw	r17,4(sp)
    1e44:	dc000015 	stw	r16,0(sp)
    1e48:	dfc00615 	stw	ra,24(sp)
    1e4c:	dd400515 	stw	r21,20(sp)
    1e50:	dd000415 	stw	r20,16(sp)
    1e54:	dcc00315 	stw	r19,12(sp)
    1e58:	dc800215 	stw	r18,8(sp)
    1e5c:	2023883a 	mov	r17,r4
	int a,b;
	int x,y,pos,pxl;
	int y1, y2, y0, yc;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = array_width-1;
    1e60:	d4272717 	ldw	r16,-25444(gp)
	unsigned int *pixels = (unsigned int *)picture;


	start_conv_grayscale_a = alt_timestamp();
    1e64:	001298c0 	call	1298c <alt_timestamp>
	for (y = 0 ; y < array_height ; y++) {
    1e68:	d0e72617 	ldw	r3,-25448(gp)
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = array_width-1;
	unsigned int *pixels = (unsigned int *)picture;


	start_conv_grayscale_a = alt_timestamp();
    1e6c:	d0a72115 	stw	r2,-25468(gp)
	for (y = 0 ; y < array_height ; y++) {
    1e70:	00c0190e 	bge	zero,r3,1ed8 <sobel_all_complete+0x9c>
    1e74:	d0a72517 	ldw	r2,-25452(gp)
    1e78:	0009883a 	mov	r4,zero
		y0 = y*array_width_int;
    1e7c:	2091383a 	mul	r8,r4,r2
		for (x = 0 ; x < array_width_int ; x++) {
    1e80:	0080130e 	bge	zero,r2,1ed0 <sobel_all_complete+0x94>
    1e84:	d2670f17 	ldw	r9,-25540(gp)
    1e88:	420d883a 	add	r6,r8,r8
    1e8c:	318d883a 	add	r6,r6,r6
    1e90:	0007883a 	mov	r3,zero
			pos = y0+x;
			pxl = pos<<1;
			grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    1e94:	1a05883a 	add	r2,r3,r8
    1e98:	1085883a 	add	r2,r2,r2
    1e9c:	1085883a 	add	r2,r2,r2
    1ea0:	1085883a 	add	r2,r2,r2
    1ea4:	8885883a 	add	r2,r17,r2
    1ea8:	11400017 	ldw	r5,0(r2)
    1eac:	10800117 	ldw	r2,4(r2)
    1eb0:	498f883a 	add	r7,r9,r6
    1eb4:	2885c0f2 	custom	3,r2,r5,r2
    1eb8:	38800015 	stw	r2,0(r7)


	start_conv_grayscale_a = alt_timestamp();
	for (y = 0 ; y < array_height ; y++) {
		y0 = y*array_width_int;
		for (x = 0 ; x < array_width_int ; x++) {
    1ebc:	d0a72517 	ldw	r2,-25452(gp)
    1ec0:	18c00044 	addi	r3,r3,1
    1ec4:	31800104 	addi	r6,r6,4
    1ec8:	18bff216 	blt	r3,r2,1e94 <__alt_data_end+0xff001e94>
    1ecc:	d0e72617 	ldw	r3,-25448(gp)
	int width_len = array_width-1;
	unsigned int *pixels = (unsigned int *)picture;


	start_conv_grayscale_a = alt_timestamp();
	for (y = 0 ; y < array_height ; y++) {
    1ed0:	21000044 	addi	r4,r4,1
    1ed4:	20ffe916 	blt	r4,r3,1e7c <__alt_data_end+0xff001e7c>
			pos = y0+x;
			pxl = pos<<1;
			grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
		}
	}
	end_conv_grayscale_a = alt_timestamp();
    1ed8:	001298c0 	call	1298c <alt_timestamp>
    1edc:	d0a72015 	stw	r2,-25472(gp)

	start_sobel_a = alt_timestamp();
    1ee0:	001298c0 	call	1298c <alt_timestamp>
    1ee4:	d2672617 	ldw	r9,-25448(gp)
    1ee8:	d0a72315 	stw	r2,-25460(gp)
		for (y = 1 ; y < (array_height-1) ; y++) {
    1eec:	07c00044 	movi	ra,1
    1ef0:	4a7fffc4 	addi	r9,r9,-1
				p5 = grayscale_array[y1-1];
				p8 = grayscale_array[y2-1];
				p3 = grayscale_array[y0];
				p6 = grayscale_array[y1];
				p9 = grayscale_array[y2];
				for (x = 1 ; x < width_len ; x++) {
    1ef4:	04400084 	movi	r17,2
					p6 = grayscale_array[yc];
					p9 = grayscale_array[y2+x];

					a = p1 - p9;
					b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1ef8:	03c02004 	movi	r15,128
		}
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
    1efc:	fa403d0e 	bge	ra,r9,1ff4 <sobel_all_complete+0x1b8>
				y0 = (y-1)*array_width+1;
    1f00:	d0a72717 	ldw	r2,-25444(gp)
    1f04:	fb7fffc4 	addi	r13,ra,-1
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
				p2 = grayscale_array[y0-1];
    1f08:	d1271017 	ldw	r4,-25536(gp)
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
				y0 = (y-1)*array_width+1;
			    y1 = y*array_width+1;
    1f0c:	f891383a 	mul	r8,ra,r2
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
				y0 = (y-1)*array_width+1;
    1f10:	689b383a 	mul	r13,r13,r2
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
    1f14:	ffc00044 	addi	ra,ra,1
    1f18:	1219883a 	add	r12,r2,r8
				p2 = grayscale_array[y0-1];
    1f1c:	69800044 	addi	r6,r13,1
				p5 = grayscale_array[y1-1];
    1f20:	41c00044 	addi	r7,r8,1
				p8 = grayscale_array[y2-1];
    1f24:	61400044 	addi	r5,r12,1
		for (y = 1 ; y < (array_height-1) ; y++) {
				y0 = (y-1)*array_width+1;
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
				p2 = grayscale_array[y0-1];
				p5 = grayscale_array[y1-1];
    1f28:	21cf883a 	add	r7,r4,r7
	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
				y0 = (y-1)*array_width+1;
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
				p2 = grayscale_array[y0-1];
    1f2c:	218d883a 	add	r6,r4,r6
				p5 = grayscale_array[y1-1];
				p8 = grayscale_array[y2-1];
    1f30:	214b883a 	add	r5,r4,r5
	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
				y0 = (y-1)*array_width+1;
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
				p2 = grayscale_array[y0-1];
    1f34:	30ffffc3 	ldbu	r3,-1(r6)
				p5 = grayscale_array[y1-1];
    1f38:	3d3fffc3 	ldbu	r20,-1(r7)
				p8 = grayscale_array[y2-1];
				p3 = grayscale_array[y0];
				p6 = grayscale_array[y1];
    1f3c:	3ac00003 	ldbu	r11,0(r7)
				y0 = (y-1)*array_width+1;
			    y1 = y*array_width+1;
			    y2 = (y+1)*array_width+1;
				p2 = grayscale_array[y0-1];
				p5 = grayscale_array[y1-1];
				p8 = grayscale_array[y2-1];
    1f40:	28bfffc3 	ldbu	r2,-1(r5)
				p3 = grayscale_array[y0];
    1f44:	31800003 	ldbu	r6,0(r6)
				p6 = grayscale_array[y1];
				p9 = grayscale_array[y2];
    1f48:	29c00003 	ldbu	r7,0(r5)
				for (x = 1 ; x < width_len ; x++) {
    1f4c:	8c3feb0e 	bge	r17,r16,1efc <__alt_data_end+0xff001efc>
    1f50:	41400084 	addi	r5,r8,2
    1f54:	821d883a 	add	r14,r16,r8
    1f58:	6a1bc83a 	sub	r13,r13,r8
    1f5c:	6219c83a 	sub	r12,r12,r8
    1f60:	00000706 	br	1f80 <sobel_all_complete+0x144>
    1f64:	d1271017 	ldw	r4,-25536(gp)
    1f68:	3007883a 	mov	r3,r6
    1f6c:	5829883a 	mov	r20,r11
    1f70:	3805883a 	mov	r2,r7
					p2 = p3;
					p5 = p6;
					p8 = p9;
					yc = y1+x;
					p3 = grayscale_array[y0+x];
					p6 = grayscale_array[yc];
    1f74:	4817883a 	mov	r11,r9
					p9 = grayscale_array[y2+x];
    1f78:	500f883a 	mov	r7,r10
					p7 = p8;
					p2 = p3;
					p5 = p6;
					p8 = p9;
					yc = y1+x;
					p3 = grayscale_array[y0+x];
    1f7c:	400d883a 	mov	r6,r8
    1f80:	2153883a 	add	r9,r4,r5
					p6 = grayscale_array[yc];
					p9 = grayscale_array[y2+x];
    1f84:	4b09883a 	add	r4,r9,r12
					p7 = p8;
					p2 = p3;
					p5 = p6;
					p8 = p9;
					yc = y1+x;
					p3 = grayscale_array[y0+x];
    1f88:	4b51883a 	add	r8,r9,r13
					p6 = grayscale_array[yc];
					p9 = grayscale_array[y2+x];
    1f8c:	22800003 	ldbu	r10,0(r4)
					p7 = p8;
					p2 = p3;
					p5 = p6;
					p8 = p9;
					yc = y1+x;
					p3 = grayscale_array[y0+x];
    1f90:	42000003 	ldbu	r8,0(r8)
					p6 = grayscale_array[yc];
					p9 = grayscale_array[y2+x];

					a = p1 - p9;
					b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1f94:	d5671b17 	ldw	r21,-25492(gp)
					yc = y1+x;
					p3 = grayscale_array[y0+x];
					p6 = grayscale_array[yc];
					p9 = grayscale_array[y2+x];

					a = p1 - p9;
    1f98:	1a87c83a 	sub	r3,r3,r10
					b = p3 - p7;
    1f9c:	4085c83a 	sub	r2,r8,r2
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1fa0:	31c9c83a 	sub	r4,r6,r7
					p2 = p3;
					p5 = p6;
					p8 = p9;
					yc = y1+x;
					p3 = grayscale_array[y0+x];
					p6 = grayscale_array[yc];
    1fa4:	4a400003 	ldbu	r9,0(r9)
					p9 = grayscale_array[y2+x];

					a = p1 - p9;
					b = p3 - p7;
					IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    1fa8:	2cbfffc4 	addi	r18,r5,-1
    1fac:	18a7883a 	add	r19,r3,r2
    1fb0:	2109883a 	add	r4,r4,r4
    1fb4:	aca5883a 	add	r18,r21,r18
    1fb8:	24c9883a 	add	r4,r4,r19
    1fbc:	2009c072 	custom	1,r4,r4,zero
    1fc0:	4d27c83a 	sub	r19,r9,r20
    1fc4:	9ce7883a 	add	r19,r19,r19
    1fc8:	10c7c83a 	sub	r3,r2,r3
    1fcc:	98c5883a 	add	r2,r19,r3
    1fd0:	1005c072 	custom	1,r2,r2,zero
    1fd4:	2085883a 	add	r2,r4,r2
    1fd8:	13c5c0b2 	custom	2,r2,r2,r15
    1fdc:	90800025 	stbio	r2,0(r18)
    1fe0:	29400044 	addi	r5,r5,1
				p5 = grayscale_array[y1-1];
				p8 = grayscale_array[y2-1];
				p3 = grayscale_array[y0];
				p6 = grayscale_array[y1];
				p9 = grayscale_array[y2];
				for (x = 1 ; x < width_len ; x++) {
    1fe4:	717fdf1e 	bne	r14,r5,1f64 <__alt_data_end+0xff001f64>
    1fe8:	d2672617 	ldw	r9,-25448(gp)
    1fec:	4a7fffc4 	addi	r9,r9,-1
		}
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
		for (y = 1 ; y < (array_height-1) ; y++) {
    1ff0:	fa7fc316 	blt	ra,r9,1f00 <__alt_data_end+0xff001f00>
							ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
							,128));
		}
	}

	end_sobel_a = alt_timestamp();
    1ff4:	001298c0 	call	1298c <alt_timestamp>
    1ff8:	d0a72215 	stw	r2,-25464(gp)
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
    1ffc:	d1672017 	ldw	r5,-25472(gp)
    2000:	d0a72117 	ldw	r2,-25468(gp)
    2004:	01000074 	movhi	r4,1
    2008:	2110ec04 	addi	r4,r4,17328
    200c:	288bc83a 	sub	r5,r5,r2
    2010:	0005cfc0 	call	5cfc <printf>
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    2014:	d0a72317 	ldw	r2,-25460(gp)
    2018:	d1672217 	ldw	r5,-25464(gp)
    201c:	01000074 	movhi	r4,1
    2020:	2110f104 	addi	r4,r4,17348
    2024:	288bc83a 	sub	r5,r5,r2
}
    2028:	dfc00617 	ldw	ra,24(sp)
    202c:	dd400517 	ldw	r21,20(sp)
    2030:	dd000417 	ldw	r20,16(sp)
    2034:	dcc00317 	ldw	r19,12(sp)
    2038:	dc800217 	ldw	r18,8(sp)
    203c:	dc400117 	ldw	r17,4(sp)
    2040:	dc000017 	ldw	r16,0(sp)
    2044:	dec00704 	addi	sp,sp,28
		}
	}

	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    2048:	0005cfc1 	jmpi	5cfc <printf>

0000204c <sobel_all_partial>:
}

void sobel_all_partial(void *picture){
    204c:	defff604 	addi	sp,sp,-40
    2050:	dc000015 	stw	r16,0(sp)
    2054:	2021883a 	mov	r16,r4
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = array_width-1;
		unsigned int *pixels = (unsigned int *)picture;

		//**********************************************
		alt_remap_cached (grayscale_array, 8192);
    2058:	d1271017 	ldw	r4,-25536(gp)
    205c:	01480004 	movi	r5,8192
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
    2060:	dd000415 	stw	r20,16(sp)
    2064:	dcc00315 	stw	r19,12(sp)
    2068:	dc800215 	stw	r18,8(sp)
	    int a,b;
		int x,y,pos,pxl;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = array_width-1;
    206c:	d5272717 	ldw	r20,-25444(gp)
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
    2070:	dfc00915 	stw	ra,36(sp)
    2074:	df000815 	stw	fp,32(sp)
    2078:	ddc00715 	stw	r23,28(sp)
    207c:	dd800615 	stw	r22,24(sp)
    2080:	dd400515 	stw	r21,20(sp)
    2084:	dc400115 	stw	r17,4(sp)
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = array_width-1;
		unsigned int *pixels = (unsigned int *)picture;

		//**********************************************
		alt_remap_cached (grayscale_array, 8192);
    2088:	0011a100 	call	11a10 <alt_remap_cached>
    208c:	d0a72517 	ldw	r2,-25452(gp)
void sobel_all_partial(void *picture){
	    int a,b;
		int x,y,pos,pxl;
		int y1, y2, y0, yc;
		int p1, p2, p3, p4, p5, p6, p7, p8, p9;
		int width_len = array_width-1;
    2090:	a4ffffc4 	addi	r19,r20,-1
		unsigned int *pixels = (unsigned int *)picture;

		//**********************************************
		alt_remap_cached (grayscale_array, 8192);
		for (y = 0 ; y < 16 ; y++) {
    2094:	0025883a 	mov	r18,zero
    2098:	02400404 	movi	r9,16
			y0 = y*array_width_int;
    209c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    20a0:	0080120e 	bge	zero,r2,20ec <sobel_all_partial+0xa0>
    20a4:	d2270f17 	ldw	r8,-25540(gp)
    20a8:	39cb883a 	add	r5,r7,r7
    20ac:	294b883a 	add	r5,r5,r5
    20b0:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    20b4:	19c5883a 	add	r2,r3,r7
    20b8:	1085883a 	add	r2,r2,r2
    20bc:	1085883a 	add	r2,r2,r2
    20c0:	1085883a 	add	r2,r2,r2
    20c4:	8085883a 	add	r2,r16,r2
    20c8:	11000017 	ldw	r4,0(r2)
    20cc:	10800117 	ldw	r2,4(r2)
    20d0:	414d883a 	add	r6,r8,r5
    20d4:	2085c0f2 	custom	3,r2,r4,r2
    20d8:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array, 8192);
		for (y = 0 ; y < 16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    20dc:	d0a72517 	ldw	r2,-25452(gp)
    20e0:	18c00044 	addi	r3,r3,1
    20e4:	29400104 	addi	r5,r5,4
    20e8:	18bff216 	blt	r3,r2,20b4 <__alt_data_end+0xff0020b4>
		int width_len = array_width-1;
		unsigned int *pixels = (unsigned int *)picture;

		//**********************************************
		alt_remap_cached (grayscale_array, 8192);
		for (y = 0 ; y < 16 ; y++) {
    20ec:	94800044 	addi	r18,r18,1
    20f0:	927fea1e 	bne	r18,r9,209c <__alt_data_end+0xff00209c>
    20f4:	d1e71017 	ldw	r7,-25536(gp)
    20f8:	04400044 	movi	r17,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    20fc:	883f883a 	mov	ra,r17
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2100:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 1 ; y < 15 ; y++) {
    2104:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2108:	d3a72717 	ldw	r14,-25444(gp)
    210c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2110:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 1 ; y < 15 ; y++) {
			y0 = (y-1)*array_width+1;
    2114:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2118:	8c400044 	addi	r17,r17,1
    211c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2120:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2124:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2128:	39800044 	addi	r6,r7,1
		for (y = 1 ; y < 15 ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    212c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 1 ; y < 15 ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2130:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2134:	298d883a 	add	r6,r5,r6
		}
		for (y = 1 ; y < 15 ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2138:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    213c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2140:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2144:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2148:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    214c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2150:	fcc0280e 	bge	ra,r19,21f4 <sobel_all_partial+0x1a8>
    2154:	51800084 	addi	r6,r10,2
    2158:	a2ab883a 	add	r21,r20,r10
    215c:	7a9fc83a 	sub	r15,r15,r10
    2160:	3a9dc83a 	sub	r14,r7,r10
    2164:	1019883a 	mov	r12,r2
    2168:	00000706 	br	2188 <sobel_all_partial+0x13c>
    216c:	d1671017 	ldw	r5,-25536(gp)
    2170:	4019883a 	mov	r12,r8
    2174:	6809883a 	mov	r4,r13
    2178:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    217c:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2180:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2184:	3811883a 	mov	r8,r7
    2188:	298b883a 	add	r5,r5,r6
    218c:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2190:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2194:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2198:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    219c:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    21a0:	38c7c83a 	sub	r3,r7,r3
    21a4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    21a8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    21ac:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    21b0:	60ed883a 	add	r22,r12,r3
    21b4:	317fffc4 	addi	r5,r6,-1
    21b8:	1085883a 	add	r2,r2,r2
    21bc:	b94b883a 	add	r5,r23,r5
    21c0:	1585883a 	add	r2,r2,r22
    21c4:	1005c072 	custom	1,r2,r2,zero
    21c8:	5909c83a 	sub	r4,r11,r4
    21cc:	2109883a 	add	r4,r4,r4
    21d0:	1b07c83a 	sub	r3,r3,r12
    21d4:	20c7883a 	add	r3,r4,r3
    21d8:	1807c072 	custom	1,r3,r3,zero
    21dc:	10c5883a 	add	r2,r2,r3
    21e0:	1705c0b2 	custom	2,r2,r2,fp
    21e4:	28800025 	stbio	r2,0(r5)
    21e8:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    21ec:	a9bfdf1e 	bne	r21,r6,216c <__alt_data_end+0xff00216c>
    21f0:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 1 ; y < 15 ; y++) {
    21f4:	008003c4 	movi	r2,15
    21f8:	88bfc31e 	bne	r17,r2,2108 <__alt_data_end+0xff002108>
    21fc:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array, 8192);
    2200:	3809883a 	mov	r4,r7
    2204:	01480004 	movi	r5,8192
    2208:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+14, 9216);
    220c:	d1271017 	ldw	r4,-25536(gp)
    2210:	01490004 	movi	r5,9216
    2214:	21000384 	addi	r4,r4,14
    2218:	0011a100 	call	11a10 <alt_remap_cached>
    221c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 16 ; y < 16+16 ; y++) {
    2220:	02400804 	movi	r9,32
			y0 = y*array_width_int;
    2224:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2228:	0080120e 	bge	zero,r2,2274 <sobel_all_partial+0x228>
    222c:	d2270f17 	ldw	r8,-25540(gp)
    2230:	39cb883a 	add	r5,r7,r7
    2234:	294b883a 	add	r5,r5,r5
    2238:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    223c:	19c5883a 	add	r2,r3,r7
    2240:	1085883a 	add	r2,r2,r2
    2244:	1085883a 	add	r2,r2,r2
    2248:	1085883a 	add	r2,r2,r2
    224c:	8085883a 	add	r2,r16,r2
    2250:	11000017 	ldw	r4,0(r2)
    2254:	10800117 	ldw	r2,4(r2)
    2258:	414d883a 	add	r6,r8,r5
    225c:	2085c0f2 	custom	3,r2,r4,r2
    2260:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+14, 9216);
		for (y = 16 ; y < 16+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    2264:	d0a72517 	ldw	r2,-25452(gp)
    2268:	18c00044 	addi	r3,r3,1
    226c:	29400104 	addi	r5,r5,4
    2270:	18bff216 	blt	r3,r2,223c <__alt_data_end+0xff00223c>
		alt_dcache_flush(grayscale_array, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+14, 9216);
		for (y = 16 ; y < 16+16 ; y++) {
    2274:	94800044 	addi	r18,r18,1
    2278:	927fea1e 	bne	r18,r9,2224 <__alt_data_end+0xff002224>
    227c:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2280:	07000044 	movi	fp,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2284:	05c02004 	movi	r23,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 15 ; y < (15+16) ; y++) {
    2288:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    228c:	d3a72717 	ldw	r14,-25444(gp)
    2290:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2294:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 15 ; y < (15+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2298:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    229c:	8c400044 	addi	r17,r17,1
    22a0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    22a4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    22a8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    22ac:	39800044 	addi	r6,r7,1
		for (y = 15 ; y < (15+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    22b0:	2a53883a 	add	r9,r5,r9
		}
		for (y = 15 ; y < (15+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    22b4:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    22b8:	298d883a 	add	r6,r5,r6
		}
		for (y = 15 ; y < (15+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    22bc:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    22c0:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    22c4:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    22c8:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    22cc:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    22d0:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    22d4:	e4c0280e 	bge	fp,r19,2378 <sobel_all_partial+0x32c>
    22d8:	51800084 	addi	r6,r10,2
    22dc:	a2ab883a 	add	r21,r20,r10
    22e0:	7a9fc83a 	sub	r15,r15,r10
    22e4:	3a9dc83a 	sub	r14,r7,r10
    22e8:	1019883a 	mov	r12,r2
    22ec:	00000706 	br	230c <sobel_all_partial+0x2c0>
    22f0:	d1671017 	ldw	r5,-25536(gp)
    22f4:	4019883a 	mov	r12,r8
    22f8:	6809883a 	mov	r4,r13
    22fc:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2300:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2304:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2308:	3811883a 	mov	r8,r7
    230c:	298b883a 	add	r5,r5,r6
    2310:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2314:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2318:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    231c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2320:	d7e71b17 	ldw	ra,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2324:	38c7c83a 	sub	r3,r7,r3
    2328:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    232c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2330:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2334:	60ed883a 	add	r22,r12,r3
    2338:	317fffc4 	addi	r5,r6,-1
    233c:	1085883a 	add	r2,r2,r2
    2340:	f94b883a 	add	r5,ra,r5
    2344:	1585883a 	add	r2,r2,r22
    2348:	1005c072 	custom	1,r2,r2,zero
    234c:	5909c83a 	sub	r4,r11,r4
    2350:	2109883a 	add	r4,r4,r4
    2354:	1b07c83a 	sub	r3,r3,r12
    2358:	20c7883a 	add	r3,r4,r3
    235c:	1807c072 	custom	1,r3,r3,zero
    2360:	10c5883a 	add	r2,r2,r3
    2364:	15c5c0b2 	custom	2,r2,r2,r23
    2368:	28800025 	stbio	r2,0(r5)
    236c:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2370:	a9bfdf1e 	bne	r21,r6,22f0 <__alt_data_end+0xff0022f0>
    2374:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 15 ; y < (15+16) ; y++) {
    2378:	008007c4 	movi	r2,31
    237c:	88bfc31e 	bne	r17,r2,228c <__alt_data_end+0xff00228c>
    2380:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+14, 8192);
    2384:	39000384 	addi	r4,r7,14
    2388:	01480004 	movi	r5,8192
    238c:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+30, 9216);
    2390:	d1271017 	ldw	r4,-25536(gp)
    2394:	01490004 	movi	r5,9216
    2398:	21000784 	addi	r4,r4,30
    239c:	0011a100 	call	11a10 <alt_remap_cached>
    23a0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 32 ; y < 32+16 ; y++) {
    23a4:	02400c04 	movi	r9,48
			y0 = y*array_width_int;
    23a8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    23ac:	0080120e 	bge	zero,r2,23f8 <sobel_all_partial+0x3ac>
    23b0:	d2270f17 	ldw	r8,-25540(gp)
    23b4:	39cb883a 	add	r5,r7,r7
    23b8:	294b883a 	add	r5,r5,r5
    23bc:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    23c0:	19c5883a 	add	r2,r3,r7
    23c4:	1085883a 	add	r2,r2,r2
    23c8:	1085883a 	add	r2,r2,r2
    23cc:	1085883a 	add	r2,r2,r2
    23d0:	8085883a 	add	r2,r16,r2
    23d4:	11000017 	ldw	r4,0(r2)
    23d8:	10800117 	ldw	r2,4(r2)
    23dc:	414d883a 	add	r6,r8,r5
    23e0:	2085c0f2 	custom	3,r2,r4,r2
    23e4:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+30, 9216);
		for (y = 32 ; y < 32+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    23e8:	d0a72517 	ldw	r2,-25452(gp)
    23ec:	18c00044 	addi	r3,r3,1
    23f0:	29400104 	addi	r5,r5,4
    23f4:	18bff216 	blt	r3,r2,23c0 <__alt_data_end+0xff0023c0>
		alt_dcache_flush(grayscale_array+14, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+30, 9216);
		for (y = 32 ; y < 32+16 ; y++) {
    23f8:	94800044 	addi	r18,r18,1
    23fc:	927fea1e 	bne	r18,r9,23a8 <__alt_data_end+0xff0023a8>
    2400:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2404:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2408:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 31 ; y < (31+16) ; y++) {
    240c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2410:	d3a72717 	ldw	r14,-25444(gp)
    2414:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2418:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 31 ; y < (31+16) ; y++) {
			y0 = (y-1)*array_width+1;
    241c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2420:	8c400044 	addi	r17,r17,1
    2424:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2428:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    242c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2430:	39800044 	addi	r6,r7,1
		for (y = 31 ; y < (31+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    2434:	2a53883a 	add	r9,r5,r9
		}
		for (y = 31 ; y < (31+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2438:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    243c:	298d883a 	add	r6,r5,r6
		}
		for (y = 31 ; y < (31+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2440:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    2444:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2448:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    244c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2450:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    2454:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2458:	fcc0280e 	bge	ra,r19,24fc <sobel_all_partial+0x4b0>
    245c:	51800084 	addi	r6,r10,2
    2460:	a2ab883a 	add	r21,r20,r10
    2464:	7a9fc83a 	sub	r15,r15,r10
    2468:	3a9dc83a 	sub	r14,r7,r10
    246c:	1019883a 	mov	r12,r2
    2470:	00000706 	br	2490 <sobel_all_partial+0x444>
    2474:	d1671017 	ldw	r5,-25536(gp)
    2478:	4019883a 	mov	r12,r8
    247c:	6809883a 	mov	r4,r13
    2480:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2484:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2488:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    248c:	3811883a 	mov	r8,r7
    2490:	298b883a 	add	r5,r5,r6
    2494:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2498:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    249c:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    24a0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    24a4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    24a8:	38c7c83a 	sub	r3,r7,r3
    24ac:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    24b0:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    24b4:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    24b8:	60ed883a 	add	r22,r12,r3
    24bc:	317fffc4 	addi	r5,r6,-1
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	b94b883a 	add	r5,r23,r5
    24c8:	1585883a 	add	r2,r2,r22
    24cc:	1005c072 	custom	1,r2,r2,zero
    24d0:	5909c83a 	sub	r4,r11,r4
    24d4:	2109883a 	add	r4,r4,r4
    24d8:	1b07c83a 	sub	r3,r3,r12
    24dc:	20c7883a 	add	r3,r4,r3
    24e0:	1807c072 	custom	1,r3,r3,zero
    24e4:	10c5883a 	add	r2,r2,r3
    24e8:	1705c0b2 	custom	2,r2,r2,fp
    24ec:	28800025 	stbio	r2,0(r5)
    24f0:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    24f4:	a9bfdf1e 	bne	r21,r6,2474 <__alt_data_end+0xff002474>
    24f8:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 31 ; y < (31+16) ; y++) {
    24fc:	00800bc4 	movi	r2,47
    2500:	88bfc31e 	bne	r17,r2,2410 <__alt_data_end+0xff002410>
    2504:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+30, 8192);
    2508:	39000784 	addi	r4,r7,30
    250c:	01480004 	movi	r5,8192
    2510:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+46, 9216);
    2514:	d1271017 	ldw	r4,-25536(gp)
    2518:	01490004 	movi	r5,9216
    251c:	21000b84 	addi	r4,r4,46
    2520:	0011a100 	call	11a10 <alt_remap_cached>
    2524:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 48 ; y < 48+16 ; y++) {
    2528:	02401004 	movi	r9,64
			y0 = y*array_width_int;
    252c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2530:	0080120e 	bge	zero,r2,257c <sobel_all_partial+0x530>
    2534:	d2270f17 	ldw	r8,-25540(gp)
    2538:	39cb883a 	add	r5,r7,r7
    253c:	294b883a 	add	r5,r5,r5
    2540:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    2544:	19c5883a 	add	r2,r3,r7
    2548:	1085883a 	add	r2,r2,r2
    254c:	1085883a 	add	r2,r2,r2
    2550:	1085883a 	add	r2,r2,r2
    2554:	8085883a 	add	r2,r16,r2
    2558:	11000017 	ldw	r4,0(r2)
    255c:	10800117 	ldw	r2,4(r2)
    2560:	414d883a 	add	r6,r8,r5
    2564:	2085c0f2 	custom	3,r2,r4,r2
    2568:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+46, 9216);
		for (y = 48 ; y < 48+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    256c:	d0a72517 	ldw	r2,-25452(gp)
    2570:	18c00044 	addi	r3,r3,1
    2574:	29400104 	addi	r5,r5,4
    2578:	18bff216 	blt	r3,r2,2544 <__alt_data_end+0xff002544>
		alt_dcache_flush(grayscale_array+30, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+46, 9216);
		for (y = 48 ; y < 48+16 ; y++) {
    257c:	94800044 	addi	r18,r18,1
    2580:	927fea1e 	bne	r18,r9,252c <__alt_data_end+0xff00252c>
    2584:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2588:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    258c:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 47 ; y < (47+16) ; y++) {
    2590:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2594:	d3a72717 	ldw	r14,-25444(gp)
    2598:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    259c:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 47 ; y < (47+16) ; y++) {
			y0 = (y-1)*array_width+1;
    25a0:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    25a4:	8c400044 	addi	r17,r17,1
    25a8:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    25ac:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    25b0:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    25b4:	39800044 	addi	r6,r7,1
		for (y = 47 ; y < (47+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    25b8:	2a53883a 	add	r9,r5,r9
		}
		for (y = 47 ; y < (47+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    25bc:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    25c0:	298d883a 	add	r6,r5,r6
		}
		for (y = 47 ; y < (47+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    25c4:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    25c8:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    25cc:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    25d0:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    25d4:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    25d8:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    25dc:	fcc0280e 	bge	ra,r19,2680 <sobel_all_partial+0x634>
    25e0:	51800084 	addi	r6,r10,2
    25e4:	a2ab883a 	add	r21,r20,r10
    25e8:	7a9fc83a 	sub	r15,r15,r10
    25ec:	3a9dc83a 	sub	r14,r7,r10
    25f0:	1019883a 	mov	r12,r2
    25f4:	00000706 	br	2614 <sobel_all_partial+0x5c8>
    25f8:	d1671017 	ldw	r5,-25536(gp)
    25fc:	4019883a 	mov	r12,r8
    2600:	6809883a 	mov	r4,r13
    2604:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2608:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    260c:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2610:	3811883a 	mov	r8,r7
    2614:	298b883a 	add	r5,r5,r6
    2618:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    261c:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2620:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2624:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2628:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    262c:	38c7c83a 	sub	r3,r7,r3
    2630:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2634:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2638:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    263c:	60ed883a 	add	r22,r12,r3
    2640:	317fffc4 	addi	r5,r6,-1
    2644:	1085883a 	add	r2,r2,r2
    2648:	b94b883a 	add	r5,r23,r5
    264c:	1585883a 	add	r2,r2,r22
    2650:	1005c072 	custom	1,r2,r2,zero
    2654:	5909c83a 	sub	r4,r11,r4
    2658:	2109883a 	add	r4,r4,r4
    265c:	1b07c83a 	sub	r3,r3,r12
    2660:	20c7883a 	add	r3,r4,r3
    2664:	1807c072 	custom	1,r3,r3,zero
    2668:	10c5883a 	add	r2,r2,r3
    266c:	1705c0b2 	custom	2,r2,r2,fp
    2670:	28800025 	stbio	r2,0(r5)
    2674:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2678:	a9bfdf1e 	bne	r21,r6,25f8 <__alt_data_end+0xff0025f8>
    267c:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 47 ; y < (47+16) ; y++) {
    2680:	00800fc4 	movi	r2,63
    2684:	88bfc31e 	bne	r17,r2,2594 <__alt_data_end+0xff002594>
    2688:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+46, 8192);
    268c:	39000b84 	addi	r4,r7,46
    2690:	01480004 	movi	r5,8192
    2694:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+62, 9216);
    2698:	d1271017 	ldw	r4,-25536(gp)
    269c:	01490004 	movi	r5,9216
    26a0:	21000f84 	addi	r4,r4,62
    26a4:	0011a100 	call	11a10 <alt_remap_cached>
    26a8:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 64 ; y < 64+16 ; y++) {
    26ac:	02401404 	movi	r9,80
			y0 = y*array_width_int;
    26b0:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    26b4:	0080120e 	bge	zero,r2,2700 <sobel_all_partial+0x6b4>
    26b8:	d2270f17 	ldw	r8,-25540(gp)
    26bc:	39cb883a 	add	r5,r7,r7
    26c0:	294b883a 	add	r5,r5,r5
    26c4:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    26c8:	19c5883a 	add	r2,r3,r7
    26cc:	1085883a 	add	r2,r2,r2
    26d0:	1085883a 	add	r2,r2,r2
    26d4:	1085883a 	add	r2,r2,r2
    26d8:	8085883a 	add	r2,r16,r2
    26dc:	11000017 	ldw	r4,0(r2)
    26e0:	10800117 	ldw	r2,4(r2)
    26e4:	414d883a 	add	r6,r8,r5
    26e8:	2085c0f2 	custom	3,r2,r4,r2
    26ec:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+62, 9216);
		for (y = 64 ; y < 64+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    26f0:	d0a72517 	ldw	r2,-25452(gp)
    26f4:	18c00044 	addi	r3,r3,1
    26f8:	29400104 	addi	r5,r5,4
    26fc:	18bff216 	blt	r3,r2,26c8 <__alt_data_end+0xff0026c8>
		alt_dcache_flush(grayscale_array+46, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+62, 9216);
		for (y = 64 ; y < 64+16 ; y++) {
    2700:	94800044 	addi	r18,r18,1
    2704:	927fea1e 	bne	r18,r9,26b0 <__alt_data_end+0xff0026b0>
    2708:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    270c:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2710:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 63 ; y < (63+16) ; y++) {
    2714:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2718:	d3a72717 	ldw	r14,-25444(gp)
    271c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2720:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 63 ; y < (63+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2724:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2728:	8c400044 	addi	r17,r17,1
    272c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2730:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2734:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2738:	39800044 	addi	r6,r7,1
		for (y = 63 ; y < (63+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    273c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 63 ; y < (63+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2740:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2744:	298d883a 	add	r6,r5,r6
		}
		for (y = 63 ; y < (63+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2748:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    274c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2750:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2754:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2758:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    275c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2760:	fcc0280e 	bge	ra,r19,2804 <sobel_all_partial+0x7b8>
    2764:	51800084 	addi	r6,r10,2
    2768:	a2ab883a 	add	r21,r20,r10
    276c:	7a9fc83a 	sub	r15,r15,r10
    2770:	3a9dc83a 	sub	r14,r7,r10
    2774:	1019883a 	mov	r12,r2
    2778:	00000706 	br	2798 <sobel_all_partial+0x74c>
    277c:	d1671017 	ldw	r5,-25536(gp)
    2780:	4019883a 	mov	r12,r8
    2784:	6809883a 	mov	r4,r13
    2788:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    278c:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2790:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2794:	3811883a 	mov	r8,r7
    2798:	298b883a 	add	r5,r5,r6
    279c:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    27a0:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    27a4:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    27a8:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    27ac:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    27b0:	38c7c83a 	sub	r3,r7,r3
    27b4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    27b8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    27bc:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    27c0:	60ed883a 	add	r22,r12,r3
    27c4:	317fffc4 	addi	r5,r6,-1
    27c8:	1085883a 	add	r2,r2,r2
    27cc:	b94b883a 	add	r5,r23,r5
    27d0:	1585883a 	add	r2,r2,r22
    27d4:	1005c072 	custom	1,r2,r2,zero
    27d8:	5909c83a 	sub	r4,r11,r4
    27dc:	2109883a 	add	r4,r4,r4
    27e0:	1b07c83a 	sub	r3,r3,r12
    27e4:	20c7883a 	add	r3,r4,r3
    27e8:	1807c072 	custom	1,r3,r3,zero
    27ec:	10c5883a 	add	r2,r2,r3
    27f0:	1705c0b2 	custom	2,r2,r2,fp
    27f4:	28800025 	stbio	r2,0(r5)
    27f8:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    27fc:	a9bfdf1e 	bne	r21,r6,277c <__alt_data_end+0xff00277c>
    2800:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 63 ; y < (63+16) ; y++) {
    2804:	008013c4 	movi	r2,79
    2808:	88bfc31e 	bne	r17,r2,2718 <__alt_data_end+0xff002718>
    280c:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+62, 8192);
    2810:	39000f84 	addi	r4,r7,62
    2814:	01480004 	movi	r5,8192
    2818:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+78, 9216);
    281c:	d1271017 	ldw	r4,-25536(gp)
    2820:	01490004 	movi	r5,9216
    2824:	21001384 	addi	r4,r4,78
    2828:	0011a100 	call	11a10 <alt_remap_cached>
    282c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 80 ; y < 80+16 ; y++) {
    2830:	02401804 	movi	r9,96
			y0 = y*array_width_int;
    2834:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2838:	0080120e 	bge	zero,r2,2884 <sobel_all_partial+0x838>
    283c:	d2270f17 	ldw	r8,-25540(gp)
    2840:	39cb883a 	add	r5,r7,r7
    2844:	294b883a 	add	r5,r5,r5
    2848:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    284c:	19c5883a 	add	r2,r3,r7
    2850:	1085883a 	add	r2,r2,r2
    2854:	1085883a 	add	r2,r2,r2
    2858:	1085883a 	add	r2,r2,r2
    285c:	8085883a 	add	r2,r16,r2
    2860:	11000017 	ldw	r4,0(r2)
    2864:	10800117 	ldw	r2,4(r2)
    2868:	414d883a 	add	r6,r8,r5
    286c:	2085c0f2 	custom	3,r2,r4,r2
    2870:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+78, 9216);
		for (y = 80 ; y < 80+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    2874:	d0a72517 	ldw	r2,-25452(gp)
    2878:	18c00044 	addi	r3,r3,1
    287c:	29400104 	addi	r5,r5,4
    2880:	18bff216 	blt	r3,r2,284c <__alt_data_end+0xff00284c>
		alt_dcache_flush(grayscale_array+62, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+78, 9216);
		for (y = 80 ; y < 80+16 ; y++) {
    2884:	94800044 	addi	r18,r18,1
    2888:	927fea1e 	bne	r18,r9,2834 <__alt_data_end+0xff002834>
    288c:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2890:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2894:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 79 ; y < (79+16) ; y++) {
    2898:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    289c:	d3a72717 	ldw	r14,-25444(gp)
    28a0:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    28a4:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 79 ; y < (79+16) ; y++) {
			y0 = (y-1)*array_width+1;
    28a8:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    28ac:	8c400044 	addi	r17,r17,1
    28b0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    28b4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    28b8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    28bc:	39800044 	addi	r6,r7,1
		for (y = 79 ; y < (79+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    28c0:	2a53883a 	add	r9,r5,r9
		}
		for (y = 79 ; y < (79+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    28c4:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    28c8:	298d883a 	add	r6,r5,r6
		}
		for (y = 79 ; y < (79+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    28cc:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    28d0:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    28d4:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    28d8:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    28dc:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    28e0:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    28e4:	fcc0280e 	bge	ra,r19,2988 <sobel_all_partial+0x93c>
    28e8:	51800084 	addi	r6,r10,2
    28ec:	a2ab883a 	add	r21,r20,r10
    28f0:	7a9fc83a 	sub	r15,r15,r10
    28f4:	3a9dc83a 	sub	r14,r7,r10
    28f8:	1019883a 	mov	r12,r2
    28fc:	00000706 	br	291c <sobel_all_partial+0x8d0>
    2900:	d1671017 	ldw	r5,-25536(gp)
    2904:	4019883a 	mov	r12,r8
    2908:	6809883a 	mov	r4,r13
    290c:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2910:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2914:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2918:	3811883a 	mov	r8,r7
    291c:	298b883a 	add	r5,r5,r6
    2920:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2924:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2928:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    292c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2930:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2934:	38c7c83a 	sub	r3,r7,r3
    2938:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    293c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2940:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2944:	60ed883a 	add	r22,r12,r3
    2948:	317fffc4 	addi	r5,r6,-1
    294c:	1085883a 	add	r2,r2,r2
    2950:	b94b883a 	add	r5,r23,r5
    2954:	1585883a 	add	r2,r2,r22
    2958:	1005c072 	custom	1,r2,r2,zero
    295c:	5909c83a 	sub	r4,r11,r4
    2960:	2109883a 	add	r4,r4,r4
    2964:	1b07c83a 	sub	r3,r3,r12
    2968:	20c7883a 	add	r3,r4,r3
    296c:	1807c072 	custom	1,r3,r3,zero
    2970:	10c5883a 	add	r2,r2,r3
    2974:	1705c0b2 	custom	2,r2,r2,fp
    2978:	28800025 	stbio	r2,0(r5)
    297c:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2980:	a9bfdf1e 	bne	r21,r6,2900 <__alt_data_end+0xff002900>
    2984:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 79 ; y < (79+16) ; y++) {
    2988:	008017c4 	movi	r2,95
    298c:	88bfc31e 	bne	r17,r2,289c <__alt_data_end+0xff00289c>
    2990:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+78, 8192);
    2994:	39001384 	addi	r4,r7,78
    2998:	01480004 	movi	r5,8192
    299c:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+94, 9216);
    29a0:	d1271017 	ldw	r4,-25536(gp)
    29a4:	01490004 	movi	r5,9216
    29a8:	21001784 	addi	r4,r4,94
    29ac:	0011a100 	call	11a10 <alt_remap_cached>
    29b0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 96 ; y < 96+16 ; y++) {
    29b4:	02401c04 	movi	r9,112
			y0 = y*array_width_int;
    29b8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    29bc:	0080120e 	bge	zero,r2,2a08 <sobel_all_partial+0x9bc>
    29c0:	d2270f17 	ldw	r8,-25540(gp)
    29c4:	39cb883a 	add	r5,r7,r7
    29c8:	294b883a 	add	r5,r5,r5
    29cc:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    29d0:	19c5883a 	add	r2,r3,r7
    29d4:	1085883a 	add	r2,r2,r2
    29d8:	1085883a 	add	r2,r2,r2
    29dc:	1085883a 	add	r2,r2,r2
    29e0:	8085883a 	add	r2,r16,r2
    29e4:	11000017 	ldw	r4,0(r2)
    29e8:	10800117 	ldw	r2,4(r2)
    29ec:	414d883a 	add	r6,r8,r5
    29f0:	2085c0f2 	custom	3,r2,r4,r2
    29f4:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+94, 9216);
		for (y = 96 ; y < 96+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    29f8:	d0a72517 	ldw	r2,-25452(gp)
    29fc:	18c00044 	addi	r3,r3,1
    2a00:	29400104 	addi	r5,r5,4
    2a04:	18bff216 	blt	r3,r2,29d0 <__alt_data_end+0xff0029d0>
		alt_dcache_flush(grayscale_array+78, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+94, 9216);
		for (y = 96 ; y < 96+16 ; y++) {
    2a08:	94800044 	addi	r18,r18,1
    2a0c:	927fea1e 	bne	r18,r9,29b8 <__alt_data_end+0xff0029b8>
    2a10:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2a14:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2a18:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 95 ; y < (95+16) ; y++) {
    2a1c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2a20:	d3a72717 	ldw	r14,-25444(gp)
    2a24:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2a28:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 95 ; y < (95+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2a2c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2a30:	8c400044 	addi	r17,r17,1
    2a34:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2a38:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2a3c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2a40:	39800044 	addi	r6,r7,1
		for (y = 95 ; y < (95+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    2a44:	2a53883a 	add	r9,r5,r9
		}
		for (y = 95 ; y < (95+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2a48:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2a4c:	298d883a 	add	r6,r5,r6
		}
		for (y = 95 ; y < (95+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2a50:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    2a54:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2a58:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2a5c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2a60:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    2a64:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2a68:	fcc0280e 	bge	ra,r19,2b0c <sobel_all_partial+0xac0>
    2a6c:	51800084 	addi	r6,r10,2
    2a70:	a2ab883a 	add	r21,r20,r10
    2a74:	7a9fc83a 	sub	r15,r15,r10
    2a78:	3a9dc83a 	sub	r14,r7,r10
    2a7c:	1019883a 	mov	r12,r2
    2a80:	00000706 	br	2aa0 <sobel_all_partial+0xa54>
    2a84:	d1671017 	ldw	r5,-25536(gp)
    2a88:	4019883a 	mov	r12,r8
    2a8c:	6809883a 	mov	r4,r13
    2a90:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2a94:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2a98:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2a9c:	3811883a 	mov	r8,r7
    2aa0:	298b883a 	add	r5,r5,r6
    2aa4:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2aa8:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2aac:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2ab0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2ab4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2ab8:	38c7c83a 	sub	r3,r7,r3
    2abc:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2ac0:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2ac4:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2ac8:	60ed883a 	add	r22,r12,r3
    2acc:	317fffc4 	addi	r5,r6,-1
    2ad0:	1085883a 	add	r2,r2,r2
    2ad4:	b94b883a 	add	r5,r23,r5
    2ad8:	1585883a 	add	r2,r2,r22
    2adc:	1005c072 	custom	1,r2,r2,zero
    2ae0:	5909c83a 	sub	r4,r11,r4
    2ae4:	2109883a 	add	r4,r4,r4
    2ae8:	1b07c83a 	sub	r3,r3,r12
    2aec:	20c7883a 	add	r3,r4,r3
    2af0:	1807c072 	custom	1,r3,r3,zero
    2af4:	10c5883a 	add	r2,r2,r3
    2af8:	1705c0b2 	custom	2,r2,r2,fp
    2afc:	28800025 	stbio	r2,0(r5)
    2b00:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2b04:	a9bfdf1e 	bne	r21,r6,2a84 <__alt_data_end+0xff002a84>
    2b08:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 95 ; y < (95+16) ; y++) {
    2b0c:	00801bc4 	movi	r2,111
    2b10:	88bfc31e 	bne	r17,r2,2a20 <__alt_data_end+0xff002a20>
    2b14:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+94, 8192);
    2b18:	39001784 	addi	r4,r7,94
    2b1c:	01480004 	movi	r5,8192
    2b20:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+110, 9216);
    2b24:	d1271017 	ldw	r4,-25536(gp)
    2b28:	01490004 	movi	r5,9216
    2b2c:	21001b84 	addi	r4,r4,110
    2b30:	0011a100 	call	11a10 <alt_remap_cached>
    2b34:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 112 ; y < 112+16 ; y++) {
    2b38:	02402004 	movi	r9,128
			y0 = y*array_width_int;
    2b3c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2b40:	0080120e 	bge	zero,r2,2b8c <sobel_all_partial+0xb40>
    2b44:	d2270f17 	ldw	r8,-25540(gp)
    2b48:	39cb883a 	add	r5,r7,r7
    2b4c:	294b883a 	add	r5,r5,r5
    2b50:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    2b54:	19c5883a 	add	r2,r3,r7
    2b58:	1085883a 	add	r2,r2,r2
    2b5c:	1085883a 	add	r2,r2,r2
    2b60:	1085883a 	add	r2,r2,r2
    2b64:	8085883a 	add	r2,r16,r2
    2b68:	11000017 	ldw	r4,0(r2)
    2b6c:	10800117 	ldw	r2,4(r2)
    2b70:	414d883a 	add	r6,r8,r5
    2b74:	2085c0f2 	custom	3,r2,r4,r2
    2b78:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+110, 9216);
		for (y = 112 ; y < 112+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    2b7c:	d0a72517 	ldw	r2,-25452(gp)
    2b80:	18c00044 	addi	r3,r3,1
    2b84:	29400104 	addi	r5,r5,4
    2b88:	18bff216 	blt	r3,r2,2b54 <__alt_data_end+0xff002b54>
		alt_dcache_flush(grayscale_array+94, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+110, 9216);
		for (y = 112 ; y < 112+16 ; y++) {
    2b8c:	94800044 	addi	r18,r18,1
    2b90:	927fea1e 	bne	r18,r9,2b3c <__alt_data_end+0xff002b3c>
    2b94:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2b98:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2b9c:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 111 ; y < (111+16) ; y++) {
    2ba0:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2ba4:	d3a72717 	ldw	r14,-25444(gp)
    2ba8:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2bac:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 111 ; y < (111+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2bb0:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2bb4:	8c400044 	addi	r17,r17,1
    2bb8:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2bbc:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2bc0:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2bc4:	39800044 	addi	r6,r7,1
		for (y = 111 ; y < (111+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    2bc8:	2a53883a 	add	r9,r5,r9
		}
		for (y = 111 ; y < (111+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2bcc:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2bd0:	298d883a 	add	r6,r5,r6
		}
		for (y = 111 ; y < (111+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2bd4:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    2bd8:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2bdc:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2be0:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2be4:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    2be8:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2bec:	fcc0280e 	bge	ra,r19,2c90 <sobel_all_partial+0xc44>
    2bf0:	51800084 	addi	r6,r10,2
    2bf4:	a2ab883a 	add	r21,r20,r10
    2bf8:	7a9fc83a 	sub	r15,r15,r10
    2bfc:	3a9dc83a 	sub	r14,r7,r10
    2c00:	1019883a 	mov	r12,r2
    2c04:	00000706 	br	2c24 <sobel_all_partial+0xbd8>
    2c08:	d1671017 	ldw	r5,-25536(gp)
    2c0c:	4019883a 	mov	r12,r8
    2c10:	6809883a 	mov	r4,r13
    2c14:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2c18:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2c1c:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2c20:	3811883a 	mov	r8,r7
    2c24:	298b883a 	add	r5,r5,r6
    2c28:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2c2c:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2c30:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2c34:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2c38:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2c3c:	38c7c83a 	sub	r3,r7,r3
    2c40:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2c44:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2c48:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2c4c:	60ed883a 	add	r22,r12,r3
    2c50:	317fffc4 	addi	r5,r6,-1
    2c54:	1085883a 	add	r2,r2,r2
    2c58:	b94b883a 	add	r5,r23,r5
    2c5c:	1585883a 	add	r2,r2,r22
    2c60:	1005c072 	custom	1,r2,r2,zero
    2c64:	5909c83a 	sub	r4,r11,r4
    2c68:	2109883a 	add	r4,r4,r4
    2c6c:	1b07c83a 	sub	r3,r3,r12
    2c70:	20c7883a 	add	r3,r4,r3
    2c74:	1807c072 	custom	1,r3,r3,zero
    2c78:	10c5883a 	add	r2,r2,r3
    2c7c:	1705c0b2 	custom	2,r2,r2,fp
    2c80:	28800025 	stbio	r2,0(r5)
    2c84:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2c88:	a9bfdf1e 	bne	r21,r6,2c08 <__alt_data_end+0xff002c08>
    2c8c:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 111 ; y < (111+16) ; y++) {
    2c90:	00801fc4 	movi	r2,127
    2c94:	88bfc31e 	bne	r17,r2,2ba4 <__alt_data_end+0xff002ba4>
    2c98:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+110, 8192);
    2c9c:	39001b84 	addi	r4,r7,110
    2ca0:	01480004 	movi	r5,8192
    2ca4:	00113440 	call	11344 <alt_dcache_flush>




		//**********************************************
		alt_remap_cached (grayscale_array+126, 9216);
    2ca8:	d1271017 	ldw	r4,-25536(gp)
    2cac:	01490004 	movi	r5,9216
    2cb0:	21001f84 	addi	r4,r4,126
    2cb4:	0011a100 	call	11a10 <alt_remap_cached>
    2cb8:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 128 ; y < 128+16 ; y++) {
    2cbc:	02402404 	movi	r9,144
			y0 = y*array_width_int;
    2cc0:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2cc4:	0080120e 	bge	zero,r2,2d10 <sobel_all_partial+0xcc4>
    2cc8:	d2270f17 	ldw	r8,-25540(gp)
    2ccc:	39cb883a 	add	r5,r7,r7
    2cd0:	294b883a 	add	r5,r5,r5
    2cd4:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    2cd8:	19c5883a 	add	r2,r3,r7
    2cdc:	1085883a 	add	r2,r2,r2
    2ce0:	1085883a 	add	r2,r2,r2
    2ce4:	1085883a 	add	r2,r2,r2
    2ce8:	8085883a 	add	r2,r16,r2
    2cec:	11000017 	ldw	r4,0(r2)
    2cf0:	10800117 	ldw	r2,4(r2)
    2cf4:	414d883a 	add	r6,r8,r5
    2cf8:	2085c0f2 	custom	3,r2,r4,r2
    2cfc:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+126, 9216);
		for (y = 128 ; y < 128+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    2d00:	d0a72517 	ldw	r2,-25452(gp)
    2d04:	18c00044 	addi	r3,r3,1
    2d08:	29400104 	addi	r5,r5,4
    2d0c:	18bff216 	blt	r3,r2,2cd8 <__alt_data_end+0xff002cd8>



		//**********************************************
		alt_remap_cached (grayscale_array+126, 9216);
		for (y = 128 ; y < 128+16 ; y++) {
    2d10:	94800044 	addi	r18,r18,1
    2d14:	927fea1e 	bne	r18,r9,2cc0 <__alt_data_end+0xff002cc0>
    2d18:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2d1c:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2d20:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 127 ; y < (127+16) ; y++) {
    2d24:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2d28:	d3a72717 	ldw	r14,-25444(gp)
    2d2c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2d30:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 127 ; y < (127+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2d34:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2d38:	8c400044 	addi	r17,r17,1
    2d3c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2d40:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2d44:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2d48:	39800044 	addi	r6,r7,1
		for (y = 127 ; y < (127+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    2d4c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 127 ; y < (127+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2d50:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2d54:	298d883a 	add	r6,r5,r6
		}
		for (y = 127 ; y < (127+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2d58:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    2d5c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2d60:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2d64:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2d68:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    2d6c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2d70:	fcc0280e 	bge	ra,r19,2e14 <sobel_all_partial+0xdc8>
    2d74:	51800084 	addi	r6,r10,2
    2d78:	a2ab883a 	add	r21,r20,r10
    2d7c:	7a9fc83a 	sub	r15,r15,r10
    2d80:	3a9dc83a 	sub	r14,r7,r10
    2d84:	1019883a 	mov	r12,r2
    2d88:	00000706 	br	2da8 <sobel_all_partial+0xd5c>
    2d8c:	d1671017 	ldw	r5,-25536(gp)
    2d90:	4019883a 	mov	r12,r8
    2d94:	6809883a 	mov	r4,r13
    2d98:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2d9c:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2da0:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2da4:	3811883a 	mov	r8,r7
    2da8:	298b883a 	add	r5,r5,r6
    2dac:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2db0:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2db4:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2db8:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2dbc:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2dc0:	38c7c83a 	sub	r3,r7,r3
    2dc4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2dc8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2dcc:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2dd0:	60ed883a 	add	r22,r12,r3
    2dd4:	317fffc4 	addi	r5,r6,-1
    2dd8:	1085883a 	add	r2,r2,r2
    2ddc:	b94b883a 	add	r5,r23,r5
    2de0:	1585883a 	add	r2,r2,r22
    2de4:	1005c072 	custom	1,r2,r2,zero
    2de8:	5909c83a 	sub	r4,r11,r4
    2dec:	2109883a 	add	r4,r4,r4
    2df0:	1b07c83a 	sub	r3,r3,r12
    2df4:	20c7883a 	add	r3,r4,r3
    2df8:	1807c072 	custom	1,r3,r3,zero
    2dfc:	10c5883a 	add	r2,r2,r3
    2e00:	1705c0b2 	custom	2,r2,r2,fp
    2e04:	28800025 	stbio	r2,0(r5)
    2e08:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2e0c:	a9bfdf1e 	bne	r21,r6,2d8c <__alt_data_end+0xff002d8c>
    2e10:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 127 ; y < (127+16) ; y++) {
    2e14:	008023c4 	movi	r2,143
    2e18:	88bfc31e 	bne	r17,r2,2d28 <__alt_data_end+0xff002d28>
    2e1c:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+126, 8192);
    2e20:	39001f84 	addi	r4,r7,126
    2e24:	01480004 	movi	r5,8192
    2e28:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+142, 9216);
    2e2c:	d1271017 	ldw	r4,-25536(gp)
    2e30:	01490004 	movi	r5,9216
    2e34:	21002384 	addi	r4,r4,142
    2e38:	0011a100 	call	11a10 <alt_remap_cached>
    2e3c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 144 ; y < 144+16 ; y++) {
    2e40:	02402804 	movi	r9,160
			y0 = y*array_width_int;
    2e44:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2e48:	0080120e 	bge	zero,r2,2e94 <sobel_all_partial+0xe48>
    2e4c:	d2270f17 	ldw	r8,-25540(gp)
    2e50:	39cb883a 	add	r5,r7,r7
    2e54:	294b883a 	add	r5,r5,r5
    2e58:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    2e5c:	19c5883a 	add	r2,r3,r7
    2e60:	1085883a 	add	r2,r2,r2
    2e64:	1085883a 	add	r2,r2,r2
    2e68:	1085883a 	add	r2,r2,r2
    2e6c:	8085883a 	add	r2,r16,r2
    2e70:	11000017 	ldw	r4,0(r2)
    2e74:	10800117 	ldw	r2,4(r2)
    2e78:	414d883a 	add	r6,r8,r5
    2e7c:	2085c0f2 	custom	3,r2,r4,r2
    2e80:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+142, 9216);
		for (y = 144 ; y < 144+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    2e84:	d0a72517 	ldw	r2,-25452(gp)
    2e88:	18c00044 	addi	r3,r3,1
    2e8c:	29400104 	addi	r5,r5,4
    2e90:	18bff216 	blt	r3,r2,2e5c <__alt_data_end+0xff002e5c>
		alt_dcache_flush(grayscale_array+126, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+142, 9216);
		for (y = 144 ; y < 144+16 ; y++) {
    2e94:	94800044 	addi	r18,r18,1
    2e98:	927fea1e 	bne	r18,r9,2e44 <__alt_data_end+0xff002e44>
    2e9c:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2ea0:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2ea4:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 143 ; y < (143+16) ; y++) {
    2ea8:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    2eac:	d3a72717 	ldw	r14,-25444(gp)
    2eb0:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    2eb4:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 143 ; y < (143+16) ; y++) {
			y0 = (y-1)*array_width+1;
    2eb8:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    2ebc:	8c400044 	addi	r17,r17,1
    2ec0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    2ec4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    2ec8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    2ecc:	39800044 	addi	r6,r7,1
		for (y = 143 ; y < (143+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    2ed0:	2a53883a 	add	r9,r5,r9
		}
		for (y = 143 ; y < (143+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2ed4:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2ed8:	298d883a 	add	r6,r5,r6
		}
		for (y = 143 ; y < (143+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    2edc:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    2ee0:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    2ee4:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    2ee8:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    2eec:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    2ef0:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    2ef4:	fcc0280e 	bge	ra,r19,2f98 <sobel_all_partial+0xf4c>
    2ef8:	51800084 	addi	r6,r10,2
    2efc:	a2ab883a 	add	r21,r20,r10
    2f00:	7a9fc83a 	sub	r15,r15,r10
    2f04:	3a9dc83a 	sub	r14,r7,r10
    2f08:	1019883a 	mov	r12,r2
    2f0c:	00000706 	br	2f2c <sobel_all_partial+0xee0>
    2f10:	d1671017 	ldw	r5,-25536(gp)
    2f14:	4019883a 	mov	r12,r8
    2f18:	6809883a 	mov	r4,r13
    2f1c:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2f20:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    2f24:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2f28:	3811883a 	mov	r8,r7
    2f2c:	298b883a 	add	r5,r5,r6
    2f30:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2f34:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    2f38:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    2f3c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2f40:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    2f44:	38c7c83a 	sub	r3,r7,r3
    2f48:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2f4c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    2f50:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    2f54:	60ed883a 	add	r22,r12,r3
    2f58:	317fffc4 	addi	r5,r6,-1
    2f5c:	1085883a 	add	r2,r2,r2
    2f60:	b94b883a 	add	r5,r23,r5
    2f64:	1585883a 	add	r2,r2,r22
    2f68:	1005c072 	custom	1,r2,r2,zero
    2f6c:	5909c83a 	sub	r4,r11,r4
    2f70:	2109883a 	add	r4,r4,r4
    2f74:	1b07c83a 	sub	r3,r3,r12
    2f78:	20c7883a 	add	r3,r4,r3
    2f7c:	1807c072 	custom	1,r3,r3,zero
    2f80:	10c5883a 	add	r2,r2,r3
    2f84:	1705c0b2 	custom	2,r2,r2,fp
    2f88:	28800025 	stbio	r2,0(r5)
    2f8c:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    2f90:	a9bfdf1e 	bne	r21,r6,2f10 <__alt_data_end+0xff002f10>
    2f94:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 143 ; y < (143+16) ; y++) {
    2f98:	008027c4 	movi	r2,159
    2f9c:	88bfc31e 	bne	r17,r2,2eac <__alt_data_end+0xff002eac>
    2fa0:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+142, 8192);
    2fa4:	39002384 	addi	r4,r7,142
    2fa8:	01480004 	movi	r5,8192
    2fac:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+158, 9216);
    2fb0:	d1271017 	ldw	r4,-25536(gp)
    2fb4:	01490004 	movi	r5,9216
    2fb8:	21002784 	addi	r4,r4,158
    2fbc:	0011a100 	call	11a10 <alt_remap_cached>
    2fc0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 160 ; y < 160+16 ; y++) {
    2fc4:	02402c04 	movi	r9,176
			y0 = y*array_width_int;
    2fc8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    2fcc:	0080120e 	bge	zero,r2,3018 <sobel_all_partial+0xfcc>
    2fd0:	d2270f17 	ldw	r8,-25540(gp)
    2fd4:	39cb883a 	add	r5,r7,r7
    2fd8:	294b883a 	add	r5,r5,r5
    2fdc:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    2fe0:	19c5883a 	add	r2,r3,r7
    2fe4:	1085883a 	add	r2,r2,r2
    2fe8:	1085883a 	add	r2,r2,r2
    2fec:	1085883a 	add	r2,r2,r2
    2ff0:	8085883a 	add	r2,r16,r2
    2ff4:	11000017 	ldw	r4,0(r2)
    2ff8:	10800117 	ldw	r2,4(r2)
    2ffc:	414d883a 	add	r6,r8,r5
    3000:	2085c0f2 	custom	3,r2,r4,r2
    3004:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+158, 9216);
		for (y = 160 ; y < 160+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3008:	d0a72517 	ldw	r2,-25452(gp)
    300c:	18c00044 	addi	r3,r3,1
    3010:	29400104 	addi	r5,r5,4
    3014:	18bff216 	blt	r3,r2,2fe0 <__alt_data_end+0xff002fe0>
		alt_dcache_flush(grayscale_array+142, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+158, 9216);
		for (y = 160 ; y < 160+16 ; y++) {
    3018:	94800044 	addi	r18,r18,1
    301c:	927fea1e 	bne	r18,r9,2fc8 <__alt_data_end+0xff002fc8>
    3020:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3024:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3028:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 159 ; y < (159+16) ; y++) {
    302c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3030:	d3a72717 	ldw	r14,-25444(gp)
    3034:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3038:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 159 ; y < (159+16) ; y++) {
			y0 = (y-1)*array_width+1;
    303c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3040:	8c400044 	addi	r17,r17,1
    3044:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3048:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    304c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3050:	39800044 	addi	r6,r7,1
		for (y = 159 ; y < (159+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3054:	2a53883a 	add	r9,r5,r9
		}
		for (y = 159 ; y < (159+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3058:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    305c:	298d883a 	add	r6,r5,r6
		}
		for (y = 159 ; y < (159+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3060:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3064:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3068:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    306c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3070:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3074:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3078:	fcc0280e 	bge	ra,r19,311c <sobel_all_partial+0x10d0>
    307c:	51800084 	addi	r6,r10,2
    3080:	a2ab883a 	add	r21,r20,r10
    3084:	7a9fc83a 	sub	r15,r15,r10
    3088:	3a9dc83a 	sub	r14,r7,r10
    308c:	1019883a 	mov	r12,r2
    3090:	00000706 	br	30b0 <sobel_all_partial+0x1064>
    3094:	d1671017 	ldw	r5,-25536(gp)
    3098:	4019883a 	mov	r12,r8
    309c:	6809883a 	mov	r4,r13
    30a0:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    30a4:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    30a8:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    30ac:	3811883a 	mov	r8,r7
    30b0:	298b883a 	add	r5,r5,r6
    30b4:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    30b8:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    30bc:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    30c0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    30c4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    30c8:	38c7c83a 	sub	r3,r7,r3
    30cc:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    30d0:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    30d4:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    30d8:	60ed883a 	add	r22,r12,r3
    30dc:	317fffc4 	addi	r5,r6,-1
    30e0:	1085883a 	add	r2,r2,r2
    30e4:	b94b883a 	add	r5,r23,r5
    30e8:	1585883a 	add	r2,r2,r22
    30ec:	1005c072 	custom	1,r2,r2,zero
    30f0:	5909c83a 	sub	r4,r11,r4
    30f4:	2109883a 	add	r4,r4,r4
    30f8:	1b07c83a 	sub	r3,r3,r12
    30fc:	20c7883a 	add	r3,r4,r3
    3100:	1807c072 	custom	1,r3,r3,zero
    3104:	10c5883a 	add	r2,r2,r3
    3108:	1705c0b2 	custom	2,r2,r2,fp
    310c:	28800025 	stbio	r2,0(r5)
    3110:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3114:	a9bfdf1e 	bne	r21,r6,3094 <__alt_data_end+0xff003094>
    3118:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 159 ; y < (159+16) ; y++) {
    311c:	00802bc4 	movi	r2,175
    3120:	88bfc31e 	bne	r17,r2,3030 <__alt_data_end+0xff003030>
    3124:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+158, 8192);
    3128:	39002784 	addi	r4,r7,158
    312c:	01480004 	movi	r5,8192
    3130:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+174, 9216);
    3134:	d1271017 	ldw	r4,-25536(gp)
    3138:	01490004 	movi	r5,9216
    313c:	21002b84 	addi	r4,r4,174
    3140:	0011a100 	call	11a10 <alt_remap_cached>
    3144:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 176 ; y < 176+16 ; y++) {
    3148:	02403004 	movi	r9,192
			y0 = y*array_width_int;
    314c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3150:	0080120e 	bge	zero,r2,319c <sobel_all_partial+0x1150>
    3154:	d2270f17 	ldw	r8,-25540(gp)
    3158:	39cb883a 	add	r5,r7,r7
    315c:	294b883a 	add	r5,r5,r5
    3160:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3164:	19c5883a 	add	r2,r3,r7
    3168:	1085883a 	add	r2,r2,r2
    316c:	1085883a 	add	r2,r2,r2
    3170:	1085883a 	add	r2,r2,r2
    3174:	8085883a 	add	r2,r16,r2
    3178:	11000017 	ldw	r4,0(r2)
    317c:	10800117 	ldw	r2,4(r2)
    3180:	414d883a 	add	r6,r8,r5
    3184:	2085c0f2 	custom	3,r2,r4,r2
    3188:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+174, 9216);
		for (y = 176 ; y < 176+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    318c:	d0a72517 	ldw	r2,-25452(gp)
    3190:	18c00044 	addi	r3,r3,1
    3194:	29400104 	addi	r5,r5,4
    3198:	18bff216 	blt	r3,r2,3164 <__alt_data_end+0xff003164>
		alt_dcache_flush(grayscale_array+158, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+174, 9216);
		for (y = 176 ; y < 176+16 ; y++) {
    319c:	94800044 	addi	r18,r18,1
    31a0:	927fea1e 	bne	r18,r9,314c <__alt_data_end+0xff00314c>
    31a4:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    31a8:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    31ac:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 175 ; y < (175+16) ; y++) {
    31b0:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    31b4:	d3a72717 	ldw	r14,-25444(gp)
    31b8:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    31bc:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 175 ; y < (175+16) ; y++) {
			y0 = (y-1)*array_width+1;
    31c0:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    31c4:	8c400044 	addi	r17,r17,1
    31c8:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    31cc:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    31d0:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    31d4:	39800044 	addi	r6,r7,1
		for (y = 175 ; y < (175+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    31d8:	2a53883a 	add	r9,r5,r9
		}
		for (y = 175 ; y < (175+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    31dc:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    31e0:	298d883a 	add	r6,r5,r6
		}
		for (y = 175 ; y < (175+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    31e4:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    31e8:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    31ec:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    31f0:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    31f4:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    31f8:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    31fc:	fcc0280e 	bge	ra,r19,32a0 <sobel_all_partial+0x1254>
    3200:	51800084 	addi	r6,r10,2
    3204:	a2ab883a 	add	r21,r20,r10
    3208:	7a9fc83a 	sub	r15,r15,r10
    320c:	3a9dc83a 	sub	r14,r7,r10
    3210:	1019883a 	mov	r12,r2
    3214:	00000706 	br	3234 <sobel_all_partial+0x11e8>
    3218:	d1671017 	ldw	r5,-25536(gp)
    321c:	4019883a 	mov	r12,r8
    3220:	6809883a 	mov	r4,r13
    3224:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3228:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    322c:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3230:	3811883a 	mov	r8,r7
    3234:	298b883a 	add	r5,r5,r6
    3238:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    323c:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3240:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3244:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3248:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    324c:	38c7c83a 	sub	r3,r7,r3
    3250:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3254:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3258:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    325c:	60ed883a 	add	r22,r12,r3
    3260:	317fffc4 	addi	r5,r6,-1
    3264:	1085883a 	add	r2,r2,r2
    3268:	b94b883a 	add	r5,r23,r5
    326c:	1585883a 	add	r2,r2,r22
    3270:	1005c072 	custom	1,r2,r2,zero
    3274:	5909c83a 	sub	r4,r11,r4
    3278:	2109883a 	add	r4,r4,r4
    327c:	1b07c83a 	sub	r3,r3,r12
    3280:	20c7883a 	add	r3,r4,r3
    3284:	1807c072 	custom	1,r3,r3,zero
    3288:	10c5883a 	add	r2,r2,r3
    328c:	1705c0b2 	custom	2,r2,r2,fp
    3290:	28800025 	stbio	r2,0(r5)
    3294:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3298:	a9bfdf1e 	bne	r21,r6,3218 <__alt_data_end+0xff003218>
    329c:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 175 ; y < (175+16) ; y++) {
    32a0:	00802fc4 	movi	r2,191
    32a4:	88bfc31e 	bne	r17,r2,31b4 <__alt_data_end+0xff0031b4>
    32a8:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+174, 8192);
    32ac:	39002b84 	addi	r4,r7,174
    32b0:	01480004 	movi	r5,8192
    32b4:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+190, 9216);
    32b8:	d1271017 	ldw	r4,-25536(gp)
    32bc:	01490004 	movi	r5,9216
    32c0:	21002f84 	addi	r4,r4,190
    32c4:	0011a100 	call	11a10 <alt_remap_cached>
    32c8:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 192 ; y < 192+16 ; y++) {
    32cc:	02403404 	movi	r9,208
			y0 = y*array_width_int;
    32d0:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    32d4:	0080120e 	bge	zero,r2,3320 <sobel_all_partial+0x12d4>
    32d8:	d2270f17 	ldw	r8,-25540(gp)
    32dc:	39cb883a 	add	r5,r7,r7
    32e0:	294b883a 	add	r5,r5,r5
    32e4:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    32e8:	19c5883a 	add	r2,r3,r7
    32ec:	1085883a 	add	r2,r2,r2
    32f0:	1085883a 	add	r2,r2,r2
    32f4:	1085883a 	add	r2,r2,r2
    32f8:	8085883a 	add	r2,r16,r2
    32fc:	11000017 	ldw	r4,0(r2)
    3300:	10800117 	ldw	r2,4(r2)
    3304:	414d883a 	add	r6,r8,r5
    3308:	2085c0f2 	custom	3,r2,r4,r2
    330c:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+190, 9216);
		for (y = 192 ; y < 192+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3310:	d0a72517 	ldw	r2,-25452(gp)
    3314:	18c00044 	addi	r3,r3,1
    3318:	29400104 	addi	r5,r5,4
    331c:	18bff216 	blt	r3,r2,32e8 <__alt_data_end+0xff0032e8>
		alt_dcache_flush(grayscale_array+174, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+190, 9216);
		for (y = 192 ; y < 192+16 ; y++) {
    3320:	94800044 	addi	r18,r18,1
    3324:	927fea1e 	bne	r18,r9,32d0 <__alt_data_end+0xff0032d0>
    3328:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    332c:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3330:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 191 ; y < (191+16) ; y++) {
    3334:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3338:	d3a72717 	ldw	r14,-25444(gp)
    333c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3340:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 191 ; y < (191+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3344:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3348:	8c400044 	addi	r17,r17,1
    334c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3350:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3354:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3358:	39800044 	addi	r6,r7,1
		for (y = 191 ; y < (191+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    335c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 191 ; y < (191+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3360:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3364:	298d883a 	add	r6,r5,r6
		}
		for (y = 191 ; y < (191+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3368:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    336c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3370:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3374:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3378:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    337c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3380:	fcc0280e 	bge	ra,r19,3424 <sobel_all_partial+0x13d8>
    3384:	51800084 	addi	r6,r10,2
    3388:	a2ab883a 	add	r21,r20,r10
    338c:	7a9fc83a 	sub	r15,r15,r10
    3390:	3a9dc83a 	sub	r14,r7,r10
    3394:	1019883a 	mov	r12,r2
    3398:	00000706 	br	33b8 <sobel_all_partial+0x136c>
    339c:	d1671017 	ldw	r5,-25536(gp)
    33a0:	4019883a 	mov	r12,r8
    33a4:	6809883a 	mov	r4,r13
    33a8:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    33ac:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    33b0:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    33b4:	3811883a 	mov	r8,r7
    33b8:	298b883a 	add	r5,r5,r6
    33bc:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    33c0:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    33c4:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    33c8:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    33cc:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    33d0:	38c7c83a 	sub	r3,r7,r3
    33d4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    33d8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    33dc:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    33e0:	60ed883a 	add	r22,r12,r3
    33e4:	317fffc4 	addi	r5,r6,-1
    33e8:	1085883a 	add	r2,r2,r2
    33ec:	b94b883a 	add	r5,r23,r5
    33f0:	1585883a 	add	r2,r2,r22
    33f4:	1005c072 	custom	1,r2,r2,zero
    33f8:	5909c83a 	sub	r4,r11,r4
    33fc:	2109883a 	add	r4,r4,r4
    3400:	1b07c83a 	sub	r3,r3,r12
    3404:	20c7883a 	add	r3,r4,r3
    3408:	1807c072 	custom	1,r3,r3,zero
    340c:	10c5883a 	add	r2,r2,r3
    3410:	1705c0b2 	custom	2,r2,r2,fp
    3414:	28800025 	stbio	r2,0(r5)
    3418:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    341c:	a9bfdf1e 	bne	r21,r6,339c <__alt_data_end+0xff00339c>
    3420:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 191 ; y < (191+16) ; y++) {
    3424:	008033c4 	movi	r2,207
    3428:	88bfc31e 	bne	r17,r2,3338 <__alt_data_end+0xff003338>
    342c:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+190, 8192);
    3430:	39002f84 	addi	r4,r7,190
    3434:	01480004 	movi	r5,8192
    3438:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+206, 9216);
    343c:	d1271017 	ldw	r4,-25536(gp)
    3440:	01490004 	movi	r5,9216
    3444:	21003384 	addi	r4,r4,206
    3448:	0011a100 	call	11a10 <alt_remap_cached>
    344c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 208 ; y < 208+16 ; y++) {
    3450:	02403804 	movi	r9,224
			y0 = y*array_width_int;
    3454:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3458:	0080120e 	bge	zero,r2,34a4 <sobel_all_partial+0x1458>
    345c:	d2270f17 	ldw	r8,-25540(gp)
    3460:	39cb883a 	add	r5,r7,r7
    3464:	294b883a 	add	r5,r5,r5
    3468:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    346c:	19c5883a 	add	r2,r3,r7
    3470:	1085883a 	add	r2,r2,r2
    3474:	1085883a 	add	r2,r2,r2
    3478:	1085883a 	add	r2,r2,r2
    347c:	8085883a 	add	r2,r16,r2
    3480:	11000017 	ldw	r4,0(r2)
    3484:	10800117 	ldw	r2,4(r2)
    3488:	414d883a 	add	r6,r8,r5
    348c:	2085c0f2 	custom	3,r2,r4,r2
    3490:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+206, 9216);
		for (y = 208 ; y < 208+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3494:	d0a72517 	ldw	r2,-25452(gp)
    3498:	18c00044 	addi	r3,r3,1
    349c:	29400104 	addi	r5,r5,4
    34a0:	18bff216 	blt	r3,r2,346c <__alt_data_end+0xff00346c>
		alt_dcache_flush(grayscale_array+190, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+206, 9216);
		for (y = 208 ; y < 208+16 ; y++) {
    34a4:	94800044 	addi	r18,r18,1
    34a8:	927fea1e 	bne	r18,r9,3454 <__alt_data_end+0xff003454>
    34ac:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    34b0:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    34b4:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 207 ; y < (207+16) ; y++) {
    34b8:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    34bc:	d3a72717 	ldw	r14,-25444(gp)
    34c0:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    34c4:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 207 ; y < (207+16) ; y++) {
			y0 = (y-1)*array_width+1;
    34c8:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    34cc:	8c400044 	addi	r17,r17,1
    34d0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    34d4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    34d8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    34dc:	39800044 	addi	r6,r7,1
		for (y = 207 ; y < (207+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    34e0:	2a53883a 	add	r9,r5,r9
		}
		for (y = 207 ; y < (207+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    34e4:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    34e8:	298d883a 	add	r6,r5,r6
		}
		for (y = 207 ; y < (207+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    34ec:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    34f0:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    34f4:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    34f8:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    34fc:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3500:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3504:	fcc0280e 	bge	ra,r19,35a8 <sobel_all_partial+0x155c>
    3508:	51800084 	addi	r6,r10,2
    350c:	a2ab883a 	add	r21,r20,r10
    3510:	7a9fc83a 	sub	r15,r15,r10
    3514:	3a9dc83a 	sub	r14,r7,r10
    3518:	1019883a 	mov	r12,r2
    351c:	00000706 	br	353c <sobel_all_partial+0x14f0>
    3520:	d1671017 	ldw	r5,-25536(gp)
    3524:	4019883a 	mov	r12,r8
    3528:	6809883a 	mov	r4,r13
    352c:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3530:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    3534:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3538:	3811883a 	mov	r8,r7
    353c:	298b883a 	add	r5,r5,r6
    3540:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3544:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3548:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    354c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3550:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    3554:	38c7c83a 	sub	r3,r7,r3
    3558:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    355c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3560:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3564:	60ed883a 	add	r22,r12,r3
    3568:	317fffc4 	addi	r5,r6,-1
    356c:	1085883a 	add	r2,r2,r2
    3570:	b94b883a 	add	r5,r23,r5
    3574:	1585883a 	add	r2,r2,r22
    3578:	1005c072 	custom	1,r2,r2,zero
    357c:	5909c83a 	sub	r4,r11,r4
    3580:	2109883a 	add	r4,r4,r4
    3584:	1b07c83a 	sub	r3,r3,r12
    3588:	20c7883a 	add	r3,r4,r3
    358c:	1807c072 	custom	1,r3,r3,zero
    3590:	10c5883a 	add	r2,r2,r3
    3594:	1705c0b2 	custom	2,r2,r2,fp
    3598:	28800025 	stbio	r2,0(r5)
    359c:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    35a0:	a9bfdf1e 	bne	r21,r6,3520 <__alt_data_end+0xff003520>
    35a4:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 207 ; y < (207+16) ; y++) {
    35a8:	008037c4 	movi	r2,223
    35ac:	88bfc31e 	bne	r17,r2,34bc <__alt_data_end+0xff0034bc>
    35b0:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+206, 8192);
    35b4:	39003384 	addi	r4,r7,206
    35b8:	01480004 	movi	r5,8192
    35bc:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+222, 9216);
    35c0:	d1271017 	ldw	r4,-25536(gp)
    35c4:	01490004 	movi	r5,9216
    35c8:	21003784 	addi	r4,r4,222
    35cc:	0011a100 	call	11a10 <alt_remap_cached>
    35d0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 224 ; y < 224+16 ; y++) {
    35d4:	02403c04 	movi	r9,240
			y0 = y*array_width_int;
    35d8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    35dc:	0080120e 	bge	zero,r2,3628 <sobel_all_partial+0x15dc>
    35e0:	d2270f17 	ldw	r8,-25540(gp)
    35e4:	39cb883a 	add	r5,r7,r7
    35e8:	294b883a 	add	r5,r5,r5
    35ec:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    35f0:	19c5883a 	add	r2,r3,r7
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	1085883a 	add	r2,r2,r2
    35fc:	1085883a 	add	r2,r2,r2
    3600:	8085883a 	add	r2,r16,r2
    3604:	11000017 	ldw	r4,0(r2)
    3608:	10800117 	ldw	r2,4(r2)
    360c:	414d883a 	add	r6,r8,r5
    3610:	2085c0f2 	custom	3,r2,r4,r2
    3614:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+222, 9216);
		for (y = 224 ; y < 224+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3618:	d0a72517 	ldw	r2,-25452(gp)
    361c:	18c00044 	addi	r3,r3,1
    3620:	29400104 	addi	r5,r5,4
    3624:	18bff216 	blt	r3,r2,35f0 <__alt_data_end+0xff0035f0>
		alt_dcache_flush(grayscale_array+206, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+222, 9216);
		for (y = 224 ; y < 224+16 ; y++) {
    3628:	94800044 	addi	r18,r18,1
    362c:	927fea1e 	bne	r18,r9,35d8 <__alt_data_end+0xff0035d8>
    3630:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3634:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3638:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 223 ; y < (223+16) ; y++) {
    363c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3640:	d3a72717 	ldw	r14,-25444(gp)
    3644:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3648:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 223 ; y < (223+16) ; y++) {
			y0 = (y-1)*array_width+1;
    364c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3650:	8c400044 	addi	r17,r17,1
    3654:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3658:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    365c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3660:	39800044 	addi	r6,r7,1
		for (y = 223 ; y < (223+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3664:	2a53883a 	add	r9,r5,r9
		}
		for (y = 223 ; y < (223+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3668:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    366c:	298d883a 	add	r6,r5,r6
		}
		for (y = 223 ; y < (223+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3670:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3674:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3678:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    367c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3680:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3684:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3688:	fcc0280e 	bge	ra,r19,372c <sobel_all_partial+0x16e0>
    368c:	51800084 	addi	r6,r10,2
    3690:	a2ab883a 	add	r21,r20,r10
    3694:	7a9fc83a 	sub	r15,r15,r10
    3698:	3a9dc83a 	sub	r14,r7,r10
    369c:	1019883a 	mov	r12,r2
    36a0:	00000706 	br	36c0 <sobel_all_partial+0x1674>
    36a4:	d1671017 	ldw	r5,-25536(gp)
    36a8:	4019883a 	mov	r12,r8
    36ac:	6809883a 	mov	r4,r13
    36b0:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    36b4:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    36b8:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    36bc:	3811883a 	mov	r8,r7
    36c0:	298b883a 	add	r5,r5,r6
    36c4:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    36c8:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    36cc:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    36d0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    36d4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    36d8:	38c7c83a 	sub	r3,r7,r3
    36dc:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    36e0:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    36e4:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    36e8:	60ed883a 	add	r22,r12,r3
    36ec:	317fffc4 	addi	r5,r6,-1
    36f0:	1085883a 	add	r2,r2,r2
    36f4:	b94b883a 	add	r5,r23,r5
    36f8:	1585883a 	add	r2,r2,r22
    36fc:	1005c072 	custom	1,r2,r2,zero
    3700:	5909c83a 	sub	r4,r11,r4
    3704:	2109883a 	add	r4,r4,r4
    3708:	1b07c83a 	sub	r3,r3,r12
    370c:	20c7883a 	add	r3,r4,r3
    3710:	1807c072 	custom	1,r3,r3,zero
    3714:	10c5883a 	add	r2,r2,r3
    3718:	1705c0b2 	custom	2,r2,r2,fp
    371c:	28800025 	stbio	r2,0(r5)
    3720:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3724:	357fdf1e 	bne	r6,r21,36a4 <__alt_data_end+0xff0036a4>
    3728:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 223 ; y < (223+16) ; y++) {
    372c:	00803bc4 	movi	r2,239
    3730:	88bfc31e 	bne	r17,r2,3640 <__alt_data_end+0xff003640>
    3734:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+222, 8192);
    3738:	39003784 	addi	r4,r7,222
    373c:	01480004 	movi	r5,8192
    3740:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+238, 9216);
    3744:	d1271017 	ldw	r4,-25536(gp)
    3748:	01490004 	movi	r5,9216
    374c:	21003b84 	addi	r4,r4,238
    3750:	0011a100 	call	11a10 <alt_remap_cached>
    3754:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 240 ; y < 240+16 ; y++) {
    3758:	02404004 	movi	r9,256
			y0 = y*array_width_int;
    375c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3760:	0080120e 	bge	zero,r2,37ac <sobel_all_partial+0x1760>
    3764:	d2270f17 	ldw	r8,-25540(gp)
    3768:	39cb883a 	add	r5,r7,r7
    376c:	294b883a 	add	r5,r5,r5
    3770:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3774:	19c5883a 	add	r2,r3,r7
    3778:	1085883a 	add	r2,r2,r2
    377c:	1085883a 	add	r2,r2,r2
    3780:	1085883a 	add	r2,r2,r2
    3784:	8085883a 	add	r2,r16,r2
    3788:	11000017 	ldw	r4,0(r2)
    378c:	10800117 	ldw	r2,4(r2)
    3790:	414d883a 	add	r6,r8,r5
    3794:	2085c0f2 	custom	3,r2,r4,r2
    3798:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+238, 9216);
		for (y = 240 ; y < 240+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    379c:	d0a72517 	ldw	r2,-25452(gp)
    37a0:	18c00044 	addi	r3,r3,1
    37a4:	29400104 	addi	r5,r5,4
    37a8:	18bff216 	blt	r3,r2,3774 <__alt_data_end+0xff003774>
		alt_dcache_flush(grayscale_array+222, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+238, 9216);
		for (y = 240 ; y < 240+16 ; y++) {
    37ac:	94800044 	addi	r18,r18,1
    37b0:	927fea1e 	bne	r18,r9,375c <__alt_data_end+0xff00375c>
    37b4:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    37b8:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    37bc:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 239 ; y < (239+16) ; y++) {
    37c0:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    37c4:	d3a72717 	ldw	r14,-25444(gp)
    37c8:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    37cc:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 239 ; y < (239+16) ; y++) {
			y0 = (y-1)*array_width+1;
    37d0:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    37d4:	8c400044 	addi	r17,r17,1
    37d8:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    37dc:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    37e0:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    37e4:	39800044 	addi	r6,r7,1
		for (y = 239 ; y < (239+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    37e8:	2a53883a 	add	r9,r5,r9
		}
		for (y = 239 ; y < (239+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    37ec:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    37f0:	298d883a 	add	r6,r5,r6
		}
		for (y = 239 ; y < (239+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    37f4:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    37f8:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    37fc:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3800:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3804:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3808:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    380c:	fcc0280e 	bge	ra,r19,38b0 <sobel_all_partial+0x1864>
    3810:	51800084 	addi	r6,r10,2
    3814:	a2ab883a 	add	r21,r20,r10
    3818:	7a9fc83a 	sub	r15,r15,r10
    381c:	3a9dc83a 	sub	r14,r7,r10
    3820:	1019883a 	mov	r12,r2
    3824:	00000706 	br	3844 <sobel_all_partial+0x17f8>
    3828:	d1671017 	ldw	r5,-25536(gp)
    382c:	4019883a 	mov	r12,r8
    3830:	6809883a 	mov	r4,r13
    3834:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3838:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    383c:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3840:	3811883a 	mov	r8,r7
    3844:	298b883a 	add	r5,r5,r6
    3848:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    384c:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3850:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3854:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3858:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    385c:	38c7c83a 	sub	r3,r7,r3
    3860:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3864:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3868:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    386c:	60ed883a 	add	r22,r12,r3
    3870:	317fffc4 	addi	r5,r6,-1
    3874:	1085883a 	add	r2,r2,r2
    3878:	b94b883a 	add	r5,r23,r5
    387c:	1585883a 	add	r2,r2,r22
    3880:	1005c072 	custom	1,r2,r2,zero
    3884:	5909c83a 	sub	r4,r11,r4
    3888:	2109883a 	add	r4,r4,r4
    388c:	1b07c83a 	sub	r3,r3,r12
    3890:	20c7883a 	add	r3,r4,r3
    3894:	1807c072 	custom	1,r3,r3,zero
    3898:	10c5883a 	add	r2,r2,r3
    389c:	1705c0b2 	custom	2,r2,r2,fp
    38a0:	28800025 	stbio	r2,0(r5)
    38a4:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    38a8:	357fdf1e 	bne	r6,r21,3828 <__alt_data_end+0xff003828>
    38ac:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 239 ; y < (239+16) ; y++) {
    38b0:	00803fc4 	movi	r2,255
    38b4:	88bfc31e 	bne	r17,r2,37c4 <__alt_data_end+0xff0037c4>
    38b8:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+238, 8192);
    38bc:	39003b84 	addi	r4,r7,238
    38c0:	01480004 	movi	r5,8192
    38c4:	00113440 	call	11344 <alt_dcache_flush>




		//**********************************************
		alt_remap_cached (grayscale_array+254, 9216);
    38c8:	d1271017 	ldw	r4,-25536(gp)
    38cc:	01490004 	movi	r5,9216
    38d0:	21003f84 	addi	r4,r4,254
    38d4:	0011a100 	call	11a10 <alt_remap_cached>
    38d8:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 256 ; y < 256+16 ; y++) {
    38dc:	02404404 	movi	r9,272
			y0 = y*array_width_int;
    38e0:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    38e4:	0080120e 	bge	zero,r2,3930 <sobel_all_partial+0x18e4>
    38e8:	d2270f17 	ldw	r8,-25540(gp)
    38ec:	39cb883a 	add	r5,r7,r7
    38f0:	294b883a 	add	r5,r5,r5
    38f4:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    38f8:	19c5883a 	add	r2,r3,r7
    38fc:	1085883a 	add	r2,r2,r2
    3900:	1085883a 	add	r2,r2,r2
    3904:	1085883a 	add	r2,r2,r2
    3908:	8085883a 	add	r2,r16,r2
    390c:	11000017 	ldw	r4,0(r2)
    3910:	10800117 	ldw	r2,4(r2)
    3914:	414d883a 	add	r6,r8,r5
    3918:	2085c0f2 	custom	3,r2,r4,r2
    391c:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+254, 9216);
		for (y = 256 ; y < 256+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3920:	d0a72517 	ldw	r2,-25452(gp)
    3924:	18c00044 	addi	r3,r3,1
    3928:	29400104 	addi	r5,r5,4
    392c:	18bff216 	blt	r3,r2,38f8 <__alt_data_end+0xff0038f8>



		//**********************************************
		alt_remap_cached (grayscale_array+254, 9216);
		for (y = 256 ; y < 256+16 ; y++) {
    3930:	94800044 	addi	r18,r18,1
    3934:	927fea1e 	bne	r18,r9,38e0 <__alt_data_end+0xff0038e0>
    3938:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    393c:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3940:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 255 ; y < (255+16) ; y++) {
    3944:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3948:	d3a72717 	ldw	r14,-25444(gp)
    394c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3950:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 255 ; y < (255+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3954:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3958:	8c400044 	addi	r17,r17,1
    395c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3960:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3964:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3968:	39800044 	addi	r6,r7,1
		for (y = 255 ; y < (255+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    396c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 255 ; y < (255+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3970:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3974:	298d883a 	add	r6,r5,r6
		}
		for (y = 255 ; y < (255+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3978:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    397c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3980:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3984:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3988:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    398c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3990:	fcc0280e 	bge	ra,r19,3a34 <sobel_all_partial+0x19e8>
    3994:	51800084 	addi	r6,r10,2
    3998:	a2ab883a 	add	r21,r20,r10
    399c:	7a9fc83a 	sub	r15,r15,r10
    39a0:	3a9dc83a 	sub	r14,r7,r10
    39a4:	1019883a 	mov	r12,r2
    39a8:	00000706 	br	39c8 <sobel_all_partial+0x197c>
    39ac:	d1671017 	ldw	r5,-25536(gp)
    39b0:	4019883a 	mov	r12,r8
    39b4:	6809883a 	mov	r4,r13
    39b8:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    39bc:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    39c0:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    39c4:	3811883a 	mov	r8,r7
    39c8:	298b883a 	add	r5,r5,r6
    39cc:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    39d0:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    39d4:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    39d8:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    39dc:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    39e0:	38c7c83a 	sub	r3,r7,r3
    39e4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    39e8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    39ec:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    39f0:	60ed883a 	add	r22,r12,r3
    39f4:	317fffc4 	addi	r5,r6,-1
    39f8:	1085883a 	add	r2,r2,r2
    39fc:	b94b883a 	add	r5,r23,r5
    3a00:	1585883a 	add	r2,r2,r22
    3a04:	1005c072 	custom	1,r2,r2,zero
    3a08:	5909c83a 	sub	r4,r11,r4
    3a0c:	2109883a 	add	r4,r4,r4
    3a10:	1b07c83a 	sub	r3,r3,r12
    3a14:	20c7883a 	add	r3,r4,r3
    3a18:	1807c072 	custom	1,r3,r3,zero
    3a1c:	10c5883a 	add	r2,r2,r3
    3a20:	1705c0b2 	custom	2,r2,r2,fp
    3a24:	28800025 	stbio	r2,0(r5)
    3a28:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3a2c:	357fdf1e 	bne	r6,r21,39ac <__alt_data_end+0xff0039ac>
    3a30:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 255 ; y < (255+16) ; y++) {
    3a34:	008043c4 	movi	r2,271
    3a38:	88bfc31e 	bne	r17,r2,3948 <__alt_data_end+0xff003948>
    3a3c:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+254, 8192);
    3a40:	39003f84 	addi	r4,r7,254
    3a44:	01480004 	movi	r5,8192
    3a48:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+270, 9216);
    3a4c:	d1271017 	ldw	r4,-25536(gp)
    3a50:	01490004 	movi	r5,9216
    3a54:	21004384 	addi	r4,r4,270
    3a58:	0011a100 	call	11a10 <alt_remap_cached>
    3a5c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 272 ; y < 272+16 ; y++) {
    3a60:	02404804 	movi	r9,288
			y0 = y*array_width_int;
    3a64:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3a68:	0080120e 	bge	zero,r2,3ab4 <sobel_all_partial+0x1a68>
    3a6c:	d2270f17 	ldw	r8,-25540(gp)
    3a70:	39cb883a 	add	r5,r7,r7
    3a74:	294b883a 	add	r5,r5,r5
    3a78:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3a7c:	19c5883a 	add	r2,r3,r7
    3a80:	1085883a 	add	r2,r2,r2
    3a84:	1085883a 	add	r2,r2,r2
    3a88:	1085883a 	add	r2,r2,r2
    3a8c:	8085883a 	add	r2,r16,r2
    3a90:	11000017 	ldw	r4,0(r2)
    3a94:	10800117 	ldw	r2,4(r2)
    3a98:	414d883a 	add	r6,r8,r5
    3a9c:	2085c0f2 	custom	3,r2,r4,r2
    3aa0:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+270, 9216);
		for (y = 272 ; y < 272+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3aa4:	d0a72517 	ldw	r2,-25452(gp)
    3aa8:	18c00044 	addi	r3,r3,1
    3aac:	29400104 	addi	r5,r5,4
    3ab0:	18bff216 	blt	r3,r2,3a7c <__alt_data_end+0xff003a7c>
		alt_dcache_flush(grayscale_array+254, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+270, 9216);
		for (y = 272 ; y < 272+16 ; y++) {
    3ab4:	94800044 	addi	r18,r18,1
    3ab8:	927fea1e 	bne	r18,r9,3a64 <__alt_data_end+0xff003a64>
    3abc:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3ac0:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3ac4:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 271 ; y < (271+16) ; y++) {
    3ac8:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3acc:	d3a72717 	ldw	r14,-25444(gp)
    3ad0:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3ad4:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 271 ; y < (271+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3ad8:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3adc:	8c400044 	addi	r17,r17,1
    3ae0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3ae4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3ae8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3aec:	39800044 	addi	r6,r7,1
		for (y = 271 ; y < (271+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3af0:	2a53883a 	add	r9,r5,r9
		}
		for (y = 271 ; y < (271+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3af4:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3af8:	298d883a 	add	r6,r5,r6
		}
		for (y = 271 ; y < (271+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3afc:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3b00:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3b04:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3b08:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3b0c:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3b10:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3b14:	fcc0280e 	bge	ra,r19,3bb8 <sobel_all_partial+0x1b6c>
    3b18:	51800084 	addi	r6,r10,2
    3b1c:	a2ab883a 	add	r21,r20,r10
    3b20:	7a9fc83a 	sub	r15,r15,r10
    3b24:	3a9dc83a 	sub	r14,r7,r10
    3b28:	1019883a 	mov	r12,r2
    3b2c:	00000706 	br	3b4c <sobel_all_partial+0x1b00>
    3b30:	d1671017 	ldw	r5,-25536(gp)
    3b34:	4019883a 	mov	r12,r8
    3b38:	6809883a 	mov	r4,r13
    3b3c:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3b40:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    3b44:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3b48:	3811883a 	mov	r8,r7
    3b4c:	298b883a 	add	r5,r5,r6
    3b50:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3b54:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3b58:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3b5c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3b60:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    3b64:	38c7c83a 	sub	r3,r7,r3
    3b68:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3b6c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3b70:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3b74:	60ed883a 	add	r22,r12,r3
    3b78:	317fffc4 	addi	r5,r6,-1
    3b7c:	1085883a 	add	r2,r2,r2
    3b80:	b94b883a 	add	r5,r23,r5
    3b84:	1585883a 	add	r2,r2,r22
    3b88:	1005c072 	custom	1,r2,r2,zero
    3b8c:	5909c83a 	sub	r4,r11,r4
    3b90:	2109883a 	add	r4,r4,r4
    3b94:	1b07c83a 	sub	r3,r3,r12
    3b98:	20c7883a 	add	r3,r4,r3
    3b9c:	1807c072 	custom	1,r3,r3,zero
    3ba0:	10c5883a 	add	r2,r2,r3
    3ba4:	1705c0b2 	custom	2,r2,r2,fp
    3ba8:	28800025 	stbio	r2,0(r5)
    3bac:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3bb0:	357fdf1e 	bne	r6,r21,3b30 <__alt_data_end+0xff003b30>
    3bb4:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 271 ; y < (271+16) ; y++) {
    3bb8:	008047c4 	movi	r2,287
    3bbc:	88bfc31e 	bne	r17,r2,3acc <__alt_data_end+0xff003acc>
    3bc0:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+270, 8192);
    3bc4:	39004384 	addi	r4,r7,270
    3bc8:	01480004 	movi	r5,8192
    3bcc:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+286, 9216);
    3bd0:	d1271017 	ldw	r4,-25536(gp)
    3bd4:	01490004 	movi	r5,9216
    3bd8:	21004784 	addi	r4,r4,286
    3bdc:	0011a100 	call	11a10 <alt_remap_cached>
    3be0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 288 ; y < 288+16 ; y++) {
    3be4:	02404c04 	movi	r9,304
			y0 = y*array_width_int;
    3be8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3bec:	0080120e 	bge	zero,r2,3c38 <sobel_all_partial+0x1bec>
    3bf0:	d2270f17 	ldw	r8,-25540(gp)
    3bf4:	39cb883a 	add	r5,r7,r7
    3bf8:	294b883a 	add	r5,r5,r5
    3bfc:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3c00:	19c5883a 	add	r2,r3,r7
    3c04:	1085883a 	add	r2,r2,r2
    3c08:	1085883a 	add	r2,r2,r2
    3c0c:	1085883a 	add	r2,r2,r2
    3c10:	8085883a 	add	r2,r16,r2
    3c14:	11000017 	ldw	r4,0(r2)
    3c18:	10800117 	ldw	r2,4(r2)
    3c1c:	414d883a 	add	r6,r8,r5
    3c20:	2085c0f2 	custom	3,r2,r4,r2
    3c24:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+286, 9216);
		for (y = 288 ; y < 288+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3c28:	d0a72517 	ldw	r2,-25452(gp)
    3c2c:	18c00044 	addi	r3,r3,1
    3c30:	29400104 	addi	r5,r5,4
    3c34:	18bff216 	blt	r3,r2,3c00 <__alt_data_end+0xff003c00>
		alt_dcache_flush(grayscale_array+270, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+286, 9216);
		for (y = 288 ; y < 288+16 ; y++) {
    3c38:	94800044 	addi	r18,r18,1
    3c3c:	927fea1e 	bne	r18,r9,3be8 <__alt_data_end+0xff003be8>
    3c40:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3c44:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3c48:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 287 ; y < (287+16) ; y++) {
    3c4c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3c50:	d3a72717 	ldw	r14,-25444(gp)
    3c54:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3c58:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 287 ; y < (287+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3c5c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3c60:	8c400044 	addi	r17,r17,1
    3c64:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3c68:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3c6c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3c70:	39800044 	addi	r6,r7,1
		for (y = 287 ; y < (287+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3c74:	2a53883a 	add	r9,r5,r9
		}
		for (y = 287 ; y < (287+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3c78:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3c7c:	298d883a 	add	r6,r5,r6
		}
		for (y = 287 ; y < (287+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3c80:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3c84:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3c88:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3c8c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3c90:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3c94:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3c98:	fcc0280e 	bge	ra,r19,3d3c <sobel_all_partial+0x1cf0>
    3c9c:	51800084 	addi	r6,r10,2
    3ca0:	a2ab883a 	add	r21,r20,r10
    3ca4:	7a9fc83a 	sub	r15,r15,r10
    3ca8:	3a9dc83a 	sub	r14,r7,r10
    3cac:	1019883a 	mov	r12,r2
    3cb0:	00000706 	br	3cd0 <sobel_all_partial+0x1c84>
    3cb4:	d1671017 	ldw	r5,-25536(gp)
    3cb8:	4019883a 	mov	r12,r8
    3cbc:	6809883a 	mov	r4,r13
    3cc0:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3cc4:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    3cc8:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3ccc:	3811883a 	mov	r8,r7
    3cd0:	298b883a 	add	r5,r5,r6
    3cd4:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3cd8:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3cdc:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3ce0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3ce4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    3ce8:	38c7c83a 	sub	r3,r7,r3
    3cec:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3cf0:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3cf4:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3cf8:	60ed883a 	add	r22,r12,r3
    3cfc:	317fffc4 	addi	r5,r6,-1
    3d00:	1085883a 	add	r2,r2,r2
    3d04:	b94b883a 	add	r5,r23,r5
    3d08:	1585883a 	add	r2,r2,r22
    3d0c:	1005c072 	custom	1,r2,r2,zero
    3d10:	5909c83a 	sub	r4,r11,r4
    3d14:	2109883a 	add	r4,r4,r4
    3d18:	1b07c83a 	sub	r3,r3,r12
    3d1c:	20c7883a 	add	r3,r4,r3
    3d20:	1807c072 	custom	1,r3,r3,zero
    3d24:	10c5883a 	add	r2,r2,r3
    3d28:	1705c0b2 	custom	2,r2,r2,fp
    3d2c:	28800025 	stbio	r2,0(r5)
    3d30:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3d34:	357fdf1e 	bne	r6,r21,3cb4 <__alt_data_end+0xff003cb4>
    3d38:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 287 ; y < (287+16) ; y++) {
    3d3c:	00804bc4 	movi	r2,303
    3d40:	88bfc31e 	bne	r17,r2,3c50 <__alt_data_end+0xff003c50>
    3d44:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+286, 8192);
    3d48:	39004784 	addi	r4,r7,286
    3d4c:	01480004 	movi	r5,8192
    3d50:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+302, 9216);
    3d54:	d1271017 	ldw	r4,-25536(gp)
    3d58:	01490004 	movi	r5,9216
    3d5c:	21004b84 	addi	r4,r4,302
    3d60:	0011a100 	call	11a10 <alt_remap_cached>
    3d64:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 304 ; y < 304+16 ; y++) {
    3d68:	02405004 	movi	r9,320
			y0 = y*array_width_int;
    3d6c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3d70:	0080120e 	bge	zero,r2,3dbc <sobel_all_partial+0x1d70>
    3d74:	d2270f17 	ldw	r8,-25540(gp)
    3d78:	39cb883a 	add	r5,r7,r7
    3d7c:	294b883a 	add	r5,r5,r5
    3d80:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3d84:	19c5883a 	add	r2,r3,r7
    3d88:	1085883a 	add	r2,r2,r2
    3d8c:	1085883a 	add	r2,r2,r2
    3d90:	1085883a 	add	r2,r2,r2
    3d94:	8085883a 	add	r2,r16,r2
    3d98:	11000017 	ldw	r4,0(r2)
    3d9c:	10800117 	ldw	r2,4(r2)
    3da0:	414d883a 	add	r6,r8,r5
    3da4:	2085c0f2 	custom	3,r2,r4,r2
    3da8:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+302, 9216);
		for (y = 304 ; y < 304+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3dac:	d0a72517 	ldw	r2,-25452(gp)
    3db0:	18c00044 	addi	r3,r3,1
    3db4:	29400104 	addi	r5,r5,4
    3db8:	18bff216 	blt	r3,r2,3d84 <__alt_data_end+0xff003d84>
		alt_dcache_flush(grayscale_array+286, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+302, 9216);
		for (y = 304 ; y < 304+16 ; y++) {
    3dbc:	94800044 	addi	r18,r18,1
    3dc0:	927fea1e 	bne	r18,r9,3d6c <__alt_data_end+0xff003d6c>
    3dc4:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3dc8:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3dcc:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 303 ; y < (303+16) ; y++) {
    3dd0:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3dd4:	d3a72717 	ldw	r14,-25444(gp)
    3dd8:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3ddc:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 303 ; y < (303+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3de0:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3de4:	8c400044 	addi	r17,r17,1
    3de8:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3dec:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3df0:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3df4:	39800044 	addi	r6,r7,1
		for (y = 303 ; y < (303+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3df8:	2a53883a 	add	r9,r5,r9
		}
		for (y = 303 ; y < (303+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3dfc:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3e00:	298d883a 	add	r6,r5,r6
		}
		for (y = 303 ; y < (303+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3e04:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3e08:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3e0c:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3e10:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3e14:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3e18:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3e1c:	fcc0280e 	bge	ra,r19,3ec0 <sobel_all_partial+0x1e74>
    3e20:	51800084 	addi	r6,r10,2
    3e24:	a2ab883a 	add	r21,r20,r10
    3e28:	7a9fc83a 	sub	r15,r15,r10
    3e2c:	3a9dc83a 	sub	r14,r7,r10
    3e30:	1019883a 	mov	r12,r2
    3e34:	00000706 	br	3e54 <sobel_all_partial+0x1e08>
    3e38:	d1671017 	ldw	r5,-25536(gp)
    3e3c:	4019883a 	mov	r12,r8
    3e40:	6809883a 	mov	r4,r13
    3e44:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3e48:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    3e4c:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3e50:	3811883a 	mov	r8,r7
    3e54:	298b883a 	add	r5,r5,r6
    3e58:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3e5c:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3e60:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3e64:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3e68:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    3e6c:	38c7c83a 	sub	r3,r7,r3
    3e70:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3e74:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3e78:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3e7c:	60ed883a 	add	r22,r12,r3
    3e80:	317fffc4 	addi	r5,r6,-1
    3e84:	1085883a 	add	r2,r2,r2
    3e88:	b94b883a 	add	r5,r23,r5
    3e8c:	1585883a 	add	r2,r2,r22
    3e90:	1005c072 	custom	1,r2,r2,zero
    3e94:	5909c83a 	sub	r4,r11,r4
    3e98:	2109883a 	add	r4,r4,r4
    3e9c:	1b07c83a 	sub	r3,r3,r12
    3ea0:	20c7883a 	add	r3,r4,r3
    3ea4:	1807c072 	custom	1,r3,r3,zero
    3ea8:	10c5883a 	add	r2,r2,r3
    3eac:	1705c0b2 	custom	2,r2,r2,fp
    3eb0:	28800025 	stbio	r2,0(r5)
    3eb4:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3eb8:	a9bfdf1e 	bne	r21,r6,3e38 <__alt_data_end+0xff003e38>
    3ebc:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 303 ; y < (303+16) ; y++) {
    3ec0:	00804fc4 	movi	r2,319
    3ec4:	88bfc31e 	bne	r17,r2,3dd4 <__alt_data_end+0xff003dd4>
    3ec8:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+302, 8192);
    3ecc:	39004b84 	addi	r4,r7,302
    3ed0:	01480004 	movi	r5,8192
    3ed4:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+318, 9216);
    3ed8:	d1271017 	ldw	r4,-25536(gp)
    3edc:	01490004 	movi	r5,9216
    3ee0:	21004f84 	addi	r4,r4,318
    3ee4:	0011a100 	call	11a10 <alt_remap_cached>
    3ee8:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 320 ; y < 320+16 ; y++) {
    3eec:	02405404 	movi	r9,336
			y0 = y*array_width_int;
    3ef0:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    3ef4:	0080120e 	bge	zero,r2,3f40 <sobel_all_partial+0x1ef4>
    3ef8:	d2270f17 	ldw	r8,-25540(gp)
    3efc:	39cb883a 	add	r5,r7,r7
    3f00:	294b883a 	add	r5,r5,r5
    3f04:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    3f08:	19c5883a 	add	r2,r3,r7
    3f0c:	1085883a 	add	r2,r2,r2
    3f10:	1085883a 	add	r2,r2,r2
    3f14:	1085883a 	add	r2,r2,r2
    3f18:	8085883a 	add	r2,r16,r2
    3f1c:	11000017 	ldw	r4,0(r2)
    3f20:	10800117 	ldw	r2,4(r2)
    3f24:	414d883a 	add	r6,r8,r5
    3f28:	2085c0f2 	custom	3,r2,r4,r2
    3f2c:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+318, 9216);
		for (y = 320 ; y < 320+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    3f30:	d0a72517 	ldw	r2,-25452(gp)
    3f34:	18c00044 	addi	r3,r3,1
    3f38:	29400104 	addi	r5,r5,4
    3f3c:	18bff216 	blt	r3,r2,3f08 <__alt_data_end+0xff003f08>
		alt_dcache_flush(grayscale_array+302, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+318, 9216);
		for (y = 320 ; y < 320+16 ; y++) {
    3f40:	94800044 	addi	r18,r18,1
    3f44:	927fea1e 	bne	r18,r9,3ef0 <__alt_data_end+0xff003ef0>
    3f48:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    3f4c:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3f50:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 319 ; y < (319+16) ; y++) {
    3f54:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    3f58:	d3a72717 	ldw	r14,-25444(gp)
    3f5c:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    3f60:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 319 ; y < (319+16) ; y++) {
			y0 = (y-1)*array_width+1;
    3f64:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    3f68:	8c400044 	addi	r17,r17,1
    3f6c:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    3f70:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    3f74:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    3f78:	39800044 	addi	r6,r7,1
		for (y = 319 ; y < (319+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    3f7c:	2a53883a 	add	r9,r5,r9
		}
		for (y = 319 ; y < (319+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3f80:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3f84:	298d883a 	add	r6,r5,r6
		}
		for (y = 319 ; y < (319+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    3f88:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    3f8c:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    3f90:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    3f94:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    3f98:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    3f9c:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    3fa0:	fcc0280e 	bge	ra,r19,4044 <sobel_all_partial+0x1ff8>
    3fa4:	51800084 	addi	r6,r10,2
    3fa8:	a2ab883a 	add	r21,r20,r10
    3fac:	7a9fc83a 	sub	r15,r15,r10
    3fb0:	3a9dc83a 	sub	r14,r7,r10
    3fb4:	1019883a 	mov	r12,r2
    3fb8:	00000706 	br	3fd8 <sobel_all_partial+0x1f8c>
    3fbc:	d1671017 	ldw	r5,-25536(gp)
    3fc0:	4019883a 	mov	r12,r8
    3fc4:	6809883a 	mov	r4,r13
    3fc8:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3fcc:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    3fd0:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3fd4:	3811883a 	mov	r8,r7
    3fd8:	298b883a 	add	r5,r5,r6
    3fdc:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3fe0:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    3fe4:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    3fe8:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3fec:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    3ff0:	38c7c83a 	sub	r3,r7,r3
    3ff4:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    3ff8:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    3ffc:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4000:	60ed883a 	add	r22,r12,r3
    4004:	317fffc4 	addi	r5,r6,-1
    4008:	1085883a 	add	r2,r2,r2
    400c:	b94b883a 	add	r5,r23,r5
    4010:	1585883a 	add	r2,r2,r22
    4014:	1005c072 	custom	1,r2,r2,zero
    4018:	5909c83a 	sub	r4,r11,r4
    401c:	2109883a 	add	r4,r4,r4
    4020:	1b07c83a 	sub	r3,r3,r12
    4024:	20c7883a 	add	r3,r4,r3
    4028:	1807c072 	custom	1,r3,r3,zero
    402c:	10c5883a 	add	r2,r2,r3
    4030:	1705c0b2 	custom	2,r2,r2,fp
    4034:	28800025 	stbio	r2,0(r5)
    4038:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    403c:	a9bfdf1e 	bne	r21,r6,3fbc <__alt_data_end+0xff003fbc>
    4040:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 319 ; y < (319+16) ; y++) {
    4044:	008053c4 	movi	r2,335
    4048:	88bfc31e 	bne	r17,r2,3f58 <__alt_data_end+0xff003f58>
    404c:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+318, 8192);
    4050:	39004f84 	addi	r4,r7,318
    4054:	01480004 	movi	r5,8192
    4058:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+334, 9216);
    405c:	d1271017 	ldw	r4,-25536(gp)
    4060:	01490004 	movi	r5,9216
    4064:	21005384 	addi	r4,r4,334
    4068:	0011a100 	call	11a10 <alt_remap_cached>
    406c:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 336 ; y < 336+16 ; y++) {
    4070:	02405804 	movi	r9,352
			y0 = y*array_width_int;
    4074:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    4078:	0080120e 	bge	zero,r2,40c4 <sobel_all_partial+0x2078>
    407c:	d2270f17 	ldw	r8,-25540(gp)
    4080:	39cb883a 	add	r5,r7,r7
    4084:	294b883a 	add	r5,r5,r5
    4088:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    408c:	19c5883a 	add	r2,r3,r7
    4090:	1085883a 	add	r2,r2,r2
    4094:	1085883a 	add	r2,r2,r2
    4098:	1085883a 	add	r2,r2,r2
    409c:	8085883a 	add	r2,r16,r2
    40a0:	11000017 	ldw	r4,0(r2)
    40a4:	10800117 	ldw	r2,4(r2)
    40a8:	414d883a 	add	r6,r8,r5
    40ac:	2085c0f2 	custom	3,r2,r4,r2
    40b0:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+334, 9216);
		for (y = 336 ; y < 336+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    40b4:	d0a72517 	ldw	r2,-25452(gp)
    40b8:	18c00044 	addi	r3,r3,1
    40bc:	29400104 	addi	r5,r5,4
    40c0:	18bff216 	blt	r3,r2,408c <__alt_data_end+0xff00408c>
		alt_dcache_flush(grayscale_array+318, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+334, 9216);
		for (y = 336 ; y < 336+16 ; y++) {
    40c4:	94800044 	addi	r18,r18,1
    40c8:	927fea1e 	bne	r18,r9,4074 <__alt_data_end+0xff004074>
    40cc:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    40d0:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    40d4:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 335 ; y < (335+16) ; y++) {
    40d8:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    40dc:	d3a72717 	ldw	r14,-25444(gp)
    40e0:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    40e4:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 335 ; y < (335+16) ; y++) {
			y0 = (y-1)*array_width+1;
    40e8:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    40ec:	8c400044 	addi	r17,r17,1
    40f0:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    40f4:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    40f8:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    40fc:	39800044 	addi	r6,r7,1
		for (y = 335 ; y < (335+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    4100:	2a53883a 	add	r9,r5,r9
		}
		for (y = 335 ; y < (335+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    4104:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    4108:	298d883a 	add	r6,r5,r6
		}
		for (y = 335 ; y < (335+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    410c:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    4110:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    4114:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    4118:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    411c:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    4120:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    4124:	fcc0280e 	bge	ra,r19,41c8 <sobel_all_partial+0x217c>
    4128:	51800084 	addi	r6,r10,2
    412c:	a2ab883a 	add	r21,r20,r10
    4130:	7a9fc83a 	sub	r15,r15,r10
    4134:	3a9dc83a 	sub	r14,r7,r10
    4138:	1019883a 	mov	r12,r2
    413c:	00000706 	br	415c <sobel_all_partial+0x2110>
    4140:	d1671017 	ldw	r5,-25536(gp)
    4144:	4019883a 	mov	r12,r8
    4148:	6809883a 	mov	r4,r13
    414c:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    4150:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    4154:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    4158:	3811883a 	mov	r8,r7
    415c:	298b883a 	add	r5,r5,r6
    4160:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    4164:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    4168:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    416c:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4170:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    4174:	38c7c83a 	sub	r3,r7,r3
    4178:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    417c:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    4180:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4184:	60ed883a 	add	r22,r12,r3
    4188:	317fffc4 	addi	r5,r6,-1
    418c:	1085883a 	add	r2,r2,r2
    4190:	b94b883a 	add	r5,r23,r5
    4194:	1585883a 	add	r2,r2,r22
    4198:	1005c072 	custom	1,r2,r2,zero
    419c:	5909c83a 	sub	r4,r11,r4
    41a0:	2109883a 	add	r4,r4,r4
    41a4:	1b07c83a 	sub	r3,r3,r12
    41a8:	20c7883a 	add	r3,r4,r3
    41ac:	1807c072 	custom	1,r3,r3,zero
    41b0:	10c5883a 	add	r2,r2,r3
    41b4:	1705c0b2 	custom	2,r2,r2,fp
    41b8:	28800025 	stbio	r2,0(r5)
    41bc:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    41c0:	a9bfdf1e 	bne	r21,r6,4140 <__alt_data_end+0xff004140>
    41c4:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 335 ; y < (335+16) ; y++) {
    41c8:	008057c4 	movi	r2,351
    41cc:	88bfc31e 	bne	r17,r2,40dc <__alt_data_end+0xff0040dc>
    41d0:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+334, 8192);
    41d4:	39005384 	addi	r4,r7,334
    41d8:	01480004 	movi	r5,8192
    41dc:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+350, 9216);
    41e0:	d1271017 	ldw	r4,-25536(gp)
    41e4:	01490004 	movi	r5,9216
    41e8:	21005784 	addi	r4,r4,350
    41ec:	0011a100 	call	11a10 <alt_remap_cached>
    41f0:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 352 ; y < 352+16 ; y++) {
    41f4:	02405c04 	movi	r9,368
			y0 = y*array_width_int;
    41f8:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    41fc:	0080120e 	bge	zero,r2,4248 <sobel_all_partial+0x21fc>
    4200:	d2270f17 	ldw	r8,-25540(gp)
    4204:	39cb883a 	add	r5,r7,r7
    4208:	294b883a 	add	r5,r5,r5
    420c:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    4210:	19c5883a 	add	r2,r3,r7
    4214:	1085883a 	add	r2,r2,r2
    4218:	1085883a 	add	r2,r2,r2
    421c:	1085883a 	add	r2,r2,r2
    4220:	8085883a 	add	r2,r16,r2
    4224:	11000017 	ldw	r4,0(r2)
    4228:	10800117 	ldw	r2,4(r2)
    422c:	414d883a 	add	r6,r8,r5
    4230:	2085c0f2 	custom	3,r2,r4,r2
    4234:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+350, 9216);
		for (y = 352 ; y < 352+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    4238:	d0a72517 	ldw	r2,-25452(gp)
    423c:	18c00044 	addi	r3,r3,1
    4240:	29400104 	addi	r5,r5,4
    4244:	18bff216 	blt	r3,r2,4210 <__alt_data_end+0xff004210>
		alt_dcache_flush(grayscale_array+334, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+350, 9216);
		for (y = 352 ; y < 352+16 ; y++) {
    4248:	94800044 	addi	r18,r18,1
    424c:	927fea1e 	bne	r18,r9,41f8 <__alt_data_end+0xff0041f8>
    4250:	d1e71017 	ldw	r7,-25536(gp)
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    4254:	07c00044 	movi	ra,1
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4258:	07002004 	movi	fp,128
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 351 ; y < (351+16) ; y++) {
    425c:	380b883a 	mov	r5,r7
			y0 = (y-1)*array_width+1;
    4260:	d3a72717 	ldw	r14,-25444(gp)
    4264:	8bffffc4 	addi	r15,r17,-1
			y1 = y*array_width+1;
    4268:	7455383a 	mul	r10,r14,r17
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 351 ; y < (351+16) ; y++) {
			y0 = (y-1)*array_width+1;
    426c:	7b9f383a 	mul	r15,r15,r14
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
    4270:	8c400044 	addi	r17,r17,1
    4274:	728f883a 	add	r7,r14,r10
			p2 = grayscale_array[y0-1];
    4278:	7a000044 	addi	r8,r15,1
			p5 = grayscale_array[y1-1];
    427c:	52400044 	addi	r9,r10,1
			p8 = grayscale_array[y2-1];
    4280:	39800044 	addi	r6,r7,1
		for (y = 351 ; y < (351+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
    4284:	2a53883a 	add	r9,r5,r9
		}
		for (y = 351 ; y < (351+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    4288:	2a11883a 	add	r8,r5,r8
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    428c:	298d883a 	add	r6,r5,r6
		}
		for (y = 351 ; y < (351+16) ; y++) {
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
    4290:	40bfffc3 	ldbu	r2,-1(r8)
			p5 = grayscale_array[y1-1];
    4294:	493fffc3 	ldbu	r4,-1(r9)
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
    4298:	4b400003 	ldbu	r13,0(r9)
			y0 = (y-1)*array_width+1;
			y1 = y*array_width+1;
			y2 = (y+1)*array_width+1;
			p2 = grayscale_array[y0-1];
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
    429c:	30ffffc3 	ldbu	r3,-1(r6)
			p3 = grayscale_array[y0];
    42a0:	42000003 	ldbu	r8,0(r8)
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
    42a4:	32400003 	ldbu	r9,0(r6)
			for (x = 1 ; x < width_len ; x++) {
    42a8:	fcc0280e 	bge	ra,r19,434c <sobel_all_partial+0x2300>
    42ac:	51800084 	addi	r6,r10,2
    42b0:	a2ab883a 	add	r21,r20,r10
    42b4:	7a9fc83a 	sub	r15,r15,r10
    42b8:	3a9dc83a 	sub	r14,r7,r10
    42bc:	1019883a 	mov	r12,r2
    42c0:	00000706 	br	42e0 <sobel_all_partial+0x2294>
    42c4:	d1671017 	ldw	r5,-25536(gp)
    42c8:	4019883a 	mov	r12,r8
    42cc:	6809883a 	mov	r4,r13
    42d0:	4807883a 	mov	r3,r9
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    42d4:	581b883a 	mov	r13,r11
				p9 = grayscale_array[y2+x];
    42d8:	5013883a 	mov	r9,r10
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    42dc:	3811883a 	mov	r8,r7
    42e0:	298b883a 	add	r5,r5,r6
    42e4:	2bc5883a 	add	r2,r5,r15
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    42e8:	2b95883a 	add	r10,r5,r14
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
    42ec:	11c00003 	ldbu	r7,0(r2)
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
    42f0:	52800003 	ldbu	r10,0(r10)
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    42f4:	d5e71b17 	ldw	r23,-25492(gp)
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
    42f8:	38c7c83a 	sub	r3,r7,r3
    42fc:	6299c83a 	sub	r12,r12,r10
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4300:	4245c83a 	sub	r2,r8,r9
			for (x = 1 ; x < width_len ; x++) {
				p1 = p2; p4 = p5; p7 = p8;
				p2 = p3; p5 = p6; p8 = p9;
				yc = y1+x;
				p3 = grayscale_array[y0+x];
				p6 = grayscale_array[yc];
    4304:	2ac00003 	ldbu	r11,0(r5)
				p9 = grayscale_array[y2+x];
				a = p1 - p9; b = p3 - p7;
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
    4308:	60ed883a 	add	r22,r12,r3
    430c:	317fffc4 	addi	r5,r6,-1
    4310:	1085883a 	add	r2,r2,r2
    4314:	b94b883a 	add	r5,r23,r5
    4318:	1585883a 	add	r2,r2,r22
    431c:	1005c072 	custom	1,r2,r2,zero
    4320:	5909c83a 	sub	r4,r11,r4
    4324:	2109883a 	add	r4,r4,r4
    4328:	1b07c83a 	sub	r3,r3,r12
    432c:	20c7883a 	add	r3,r4,r3
    4330:	1807c072 	custom	1,r3,r3,zero
    4334:	10c5883a 	add	r2,r2,r3
    4338:	1705c0b2 	custom	2,r2,r2,fp
    433c:	28800025 	stbio	r2,0(r5)
    4340:	31800044 	addi	r6,r6,1
			p5 = grayscale_array[y1-1];
			p8 = grayscale_array[y2-1];
			p3 = grayscale_array[y0];
			p6 = grayscale_array[y1];
			p9 = grayscale_array[y2];
			for (x = 1 ; x < width_len ; x++) {
    4344:	a9bfdf1e 	bne	r21,r6,42c4 <__alt_data_end+0xff0042c4>
    4348:	d1671017 	ldw	r5,-25536(gp)
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
			}
		}
		for (y = 351 ; y < (351+16) ; y++) {
    434c:	00805bc4 	movi	r2,367
    4350:	88bfc31e 	bne	r17,r2,4260 <__alt_data_end+0xff004260>
    4354:	280f883a 	mov	r7,r5
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+350, 8192);
    4358:	39005784 	addi	r4,r7,350
    435c:	01480004 	movi	r5,8192
    4360:	00113440 	call	11344 <alt_dcache_flush>
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+366, 9216);
    4364:	d1271017 	ldw	r4,-25536(gp)
    4368:	01490004 	movi	r5,9216
    436c:	21005b84 	addi	r4,r4,366
    4370:	0011a100 	call	11a10 <alt_remap_cached>
    4374:	d0a72517 	ldw	r2,-25452(gp)
		for (y = 368 ; y < 368+16 ; y++) {
    4378:	02406004 	movi	r9,384
			y0 = y*array_width_int;
    437c:	908f383a 	mul	r7,r18,r2
			for (x = 0 ; x < array_width_int ; x++) {
    4380:	0080120e 	bge	zero,r2,43cc <sobel_all_partial+0x2380>
    4384:	d2270f17 	ldw	r8,-25540(gp)
    4388:	39cb883a 	add	r5,r7,r7
    438c:	294b883a 	add	r5,r5,r5
    4390:	0007883a 	mov	r3,zero
				pos = y0+x;
				pxl = pos<<1;
				grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
    4394:	19c5883a 	add	r2,r3,r7
    4398:	1085883a 	add	r2,r2,r2
    439c:	1085883a 	add	r2,r2,r2
    43a0:	1085883a 	add	r2,r2,r2
    43a4:	8085883a 	add	r2,r16,r2
    43a8:	11000017 	ldw	r4,0(r2)
    43ac:	10800117 	ldw	r2,4(r2)
    43b0:	414d883a 	add	r6,r8,r5
    43b4:	2085c0f2 	custom	3,r2,r4,r2
    43b8:	30800015 	stw	r2,0(r6)

		//**********************************************
		alt_remap_cached (grayscale_array+366, 9216);
		for (y = 368 ; y < 368+16 ; y++) {
			y0 = y*array_width_int;
			for (x = 0 ; x < array_width_int ; x++) {
    43bc:	d0a72517 	ldw	r2,-25452(gp)
    43c0:	18c00044 	addi	r3,r3,1
    43c4:	29400104 	addi	r5,r5,4
    43c8:	18bff216 	blt	r3,r2,4394 <__alt_data_end+0xff004394>
		alt_dcache_flush(grayscale_array+350, 8192);
		//**********************************************

		//**********************************************
		alt_remap_cached (grayscale_array+366, 9216);
		for (y = 368 ; y < 368+16 ; y++) {
    43cc:	94800044 	addi	r18,r18,1
    43d0:	927fea1e 	bne	r18,r9,437c <__alt_data_end+0xff00437c>
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+366, 9216);
    43d4:	d1271017 	ldw	r4,-25536(gp)
    43d8:	01490004 	movi	r5,9216
    43dc:	21005b84 	addi	r4,r4,366
		//**********************************************


}
    43e0:	dfc00917 	ldw	ra,36(sp)
    43e4:	df000817 	ldw	fp,32(sp)
    43e8:	ddc00717 	ldw	r23,28(sp)
    43ec:	dd800617 	ldw	r22,24(sp)
    43f0:	dd400517 	ldw	r21,20(sp)
    43f4:	dd000417 	ldw	r20,16(sp)
    43f8:	dcc00317 	ldw	r19,12(sp)
    43fc:	dc800217 	ldw	r18,8(sp)
    4400:	dc400117 	ldw	r17,4(sp)
    4404:	dc000017 	ldw	r16,0(sp)
    4408:	dec00a04 	addi	sp,sp,40
				IOWR_8DIRECT(sobel_result,yc-1,ALT_CI_THRESHOLD_0(
					ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
					ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4)) ,128));
			}
		}
		alt_dcache_flush(grayscale_array+366, 9216);
    440c:	00113441 	jmpi	11344 <alt_dcache_flush>

00004410 <partial>:


}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    4410:	d0e72717 	ldw	r3,-25444(gp)
    4414:	29cf883a 	add	r7,r5,r7
		//**********************************************


}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    4418:	defffa04 	addi	sp,sp,-24
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    441c:	1945383a 	mul	r2,r3,r5
    4420:	38cf383a 	mul	r7,r7,r3
		//**********************************************


}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    4424:	dfc00515 	stw	ra,20(sp)
    4428:	dd000415 	stw	r20,16(sp)
    442c:	dcc00315 	stw	r19,12(sp)
    4430:	dc800215 	stw	r18,8(sp)
    4434:	dc400115 	stw	r17,4(sp)
    4438:	dc000015 	stw	r16,0(sp)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    443c:	11c00a0e 	bge	r2,r7,4468 <partial+0x58>
    4440:	1087883a 	add	r3,r2,r2
    4444:	20cb883a 	add	r5,r4,r3
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    4448:	d0e71017 	ldw	r3,-25536(gp)
    444c:	2900000b 	ldhu	r4,0(r5)
    4450:	1887883a 	add	r3,r3,r2
    4454:	2009c032 	custom	0,r4,r4,zero
    4458:	19000005 	stb	r4,0(r3)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    445c:	10800044 	addi	r2,r2,1
    4460:	29400084 	addi	r5,r5,2
    4464:	38bff81e 	bne	r7,r2,4448 <__alt_data_end+0xff004448>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    4468:	db800617 	ldw	r14,24(sp)
    446c:	30800044 	addi	r2,r6,1
    4470:	339d883a 	add	r14,r6,r14
    4474:	73bfffc4 	addi	r14,r14,-1
    4478:	1380400e 	bge	r2,r14,457c <partial+0x16c>
    447c:	d1272717 	ldw	r4,-25444(gp)
    4480:	32400084 	addi	r9,r6,2
		for (x = 1 ; x < (array_width-1) ; x++) {
    4484:	03c00084 	movi	r15,2
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4488:	03002004 	movi	r12,128
    448c:	4abfffc4 	addi	r10,r9,-1
    4490:	481b883a 	mov	r13,r9
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    4494:	7900370e 	bge	r15,r4,4574 <partial+0x164>
    4498:	4affff84 	addi	r11,r9,-2
    449c:	481b883a 	mov	r13,r9
    44a0:	01400044 	movi	r5,1
					a = grayscale_array[(y-1)*array_width+(x-1)];
    44a4:	d1e71017 	ldw	r7,-25536(gp)
    44a8:	22c7383a 	mul	r3,r4,r11
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    44ac:	2267383a 	mul	r19,r4,r9
    44b0:	2fffffc4 	addi	ra,r5,-1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    44b4:	38c7883a 	add	r3,r7,r3
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    44b8:	1945883a 	add	r2,r3,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    44bc:	2a000044 	addi	r8,r5,1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    44c0:	1fcd883a 	add	r6,r3,ra
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    44c4:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    44c8:	3ce1883a 	add	r16,r7,r19


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    44cc:	34400003 	ldbu	r17,0(r6)
					b = grayscale_array[(y-1)*array_width+(x+1)];
    44d0:	1a07883a 	add	r3,r3,r8
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    44d4:	8169883a 	add	r20,r16,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    44d8:	19800003 	ldbu	r6,0(r3)
					c = grayscale_array[(y+1)*array_width+(x-1)];
    44dc:	87c7883a 	add	r3,r16,ra
    44e0:	1c000003 	ldbu	r16,0(r3)
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    44e4:	1087883a 	add	r3,r2,r2
    44e8:	a0800003 	ldbu	r2,0(r20)
    44ec:	1c47883a 	add	r3,r3,r17
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    44f0:	3a25883a 	add	r18,r7,r8
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    44f4:	1987883a 	add	r3,r3,r6
    44f8:	1c07c83a 	sub	r3,r3,r16
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    44fc:	94e7883a 	add	r19,r18,r19
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4500:	2289383a 	mul	r4,r4,r10
    4504:	1085883a 	add	r2,r2,r2
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    4508:	9cc00003 	ldbu	r19,0(r19)
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    450c:	1885c83a 	sub	r2,r3,r2
    4510:	d0e71b17 	ldw	r3,-25492(gp)
    4514:	214b883a 	add	r5,r4,r5
    4518:	14c5c83a 	sub	r2,r2,r19
    451c:	194b883a 	add	r5,r3,r5
    4520:	1005c072 	custom	1,r2,r2,zero
    4524:	390f883a 	add	r7,r7,r4
    4528:	3fcf883a 	add	r7,r7,ra
    452c:	38c00003 	ldbu	r3,0(r7)
    4530:	9109883a 	add	r4,r18,r4
    4534:	21000003 	ldbu	r4,0(r4)
    4538:	344dc83a 	sub	r6,r6,r17
    453c:	18c7883a 	add	r3,r3,r3
    4540:	30c7c83a 	sub	r3,r6,r3
    4544:	2109883a 	add	r4,r4,r4
    4548:	1907883a 	add	r3,r3,r4
    454c:	1c07c83a 	sub	r3,r3,r16
    4550:	1cc7883a 	add	r3,r3,r19
    4554:	1807c072 	custom	1,r3,r3,zero
    4558:	10c5883a 	add	r2,r2,r3
    455c:	1305c0b2 	custom	2,r2,r2,r12
    4560:	28800025 	stbio	r2,0(r5)
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    4564:	d1272717 	ldw	r4,-25444(gp)
    4568:	400b883a 	mov	r5,r8
    456c:	20bfffc4 	addi	r2,r4,-1
    4570:	40bfcc16 	blt	r8,r2,44a4 <__alt_data_end+0xff0044a4>
    4574:	4a400044 	addi	r9,r9,1
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    4578:	6bbfc416 	blt	r13,r14,448c <__alt_data_end+0xff00448c>
							ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
								2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
							,128));
		}
	}
}
    457c:	dfc00517 	ldw	ra,20(sp)
    4580:	dd000417 	ldw	r20,16(sp)
    4584:	dcc00317 	ldw	r19,12(sp)
    4588:	dc800217 	ldw	r18,8(sp)
    458c:	dc400117 	ldw	r17,4(sp)
    4590:	dc000017 	ldw	r16,0(sp)
    4594:	dec00604 	addi	sp,sp,24
    4598:	f800283a 	ret

0000459c <sobel_all_complete_fusion>:

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    459c:	d0a72717 	ldw	r2,-25444(gp)
							,128));
		}
	}
}

void sobel_all_complete_fusion(void *picture){
    45a0:	defff904 	addi	sp,sp,-28
    45a4:	dfc00615 	stw	ra,24(sp)
    45a8:	dd400515 	stw	r21,20(sp)
    45ac:	dd000415 	stw	r20,16(sp)
    45b0:	dcc00315 	stw	r19,12(sp)
    45b4:	dc800215 	stw	r18,8(sp)
    45b8:	dc400115 	stw	r17,4(sp)
    45bc:	dc000015 	stw	r16,0(sp)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    45c0:	00800d0e 	bge	zero,r2,45f8 <sobel_all_complete_fusion+0x5c>
    45c4:	200d883a 	mov	r6,r4
    45c8:	0007883a 	mov	r3,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    45cc:	d0a71017 	ldw	r2,-25536(gp)
    45d0:	3140000b 	ldhu	r5,0(r6)
    45d4:	10c5883a 	add	r2,r2,r3
    45d8:	280bc032 	custom	0,r5,r5,zero
    45dc:	11400005 	stb	r5,0(r2)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    45e0:	d0a72717 	ldw	r2,-25444(gp)
    45e4:	18c00044 	addi	r3,r3,1
    45e8:	31800084 	addi	r6,r6,2
    45ec:	108b883a 	add	r5,r2,r2
    45f0:	288b883a 	add	r5,r5,r2
    45f4:	197ff516 	blt	r3,r5,45cc <__alt_data_end+0xff0045cc>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    45f8:	d0e72617 	ldw	r3,-25448(gp)
    45fc:	01400044 	movi	r5,1
    4600:	19bfff84 	addi	r6,r3,-2
    4604:	2980620e 	bge	r5,r6,4790 <sobel_all_complete_fusion+0x1f4>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    4608:	03200034 	movhi	r12,32768
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    460c:	02000084 	movi	r8,2
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    4610:	633fffc4 	addi	r12,r12,-1


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    4614:	4017883a 	mov	r11,r8
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4618:	02802004 	movi	r10,128
    461c:	42400044 	addi	r9,r8,1
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
    4620:	4885383a 	mul	r2,r9,r2
    4624:	d1671017 	ldw	r5,-25536(gp)
    4628:	43bfffc4 	addi	r14,r8,-1
    462c:	1087883a 	add	r3,r2,r2
    4630:	20c7883a 	add	r3,r4,r3
    4634:	18c0000b 	ldhu	r3,0(r3)
    4638:	2885883a 	add	r2,r5,r2
    463c:	1807c032 	custom	0,r3,r3,zero
    4640:	10c00005 	stb	r3,0(r2)
		for (x = 1 ; x < (array_width-1) ; x++) {
    4644:	d0a72717 	ldw	r2,-25444(gp)
    4648:	5880400e 	bge	r11,r2,474c <sobel_all_complete_fusion+0x1b0>
    464c:	43ffff84 	addi	r15,r8,-2
    4650:	01400044 	movi	r5,1
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
    4654:	1245383a 	mul	r2,r2,r9
    4658:	d1a71017 	ldw	r6,-25536(gp)
    465c:	1145883a 	add	r2,r2,r5
    4660:	1087883a 	add	r3,r2,r2
    4664:	20c7883a 	add	r3,r4,r3
    4668:	18c0000b 	ldhu	r3,0(r3)
    466c:	3085883a 	add	r2,r6,r2
    4670:	1807c032 	custom	0,r3,r3,zero
    4674:	10c00005 	stb	r3,0(r2)
			a = grayscale_array[(y-1)*array_width+(x-1)];
    4678:	d4e72717 	ldw	r19,-25444(gp)
    467c:	d1e71017 	ldw	r7,-25536(gp)
    4680:	2b7fffc4 	addi	r13,r5,-1
    4684:	9bc7383a 	mul	r3,r19,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    4688:	9a29383a 	mul	r20,r19,r8
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    468c:	2fc00044 	addi	ra,r5,1
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    4690:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4694:	1945883a 	add	r2,r3,r5
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    4698:	1b4d883a 	add	r6,r3,r13
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    469c:	10800003 	ldbu	r2,0(r2)
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    46a0:	3d21883a 	add	r16,r7,r20
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    46a4:	34400003 	ldbu	r17,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    46a8:	1fc7883a 	add	r3,r3,ra
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    46ac:	816b883a 	add	r21,r16,r5
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    46b0:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    46b4:	8347883a 	add	r3,r16,r13
    46b8:	1c000003 	ldbu	r16,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    46bc:	1087883a 	add	r3,r2,r2
    46c0:	a8800003 	ldbu	r2,0(r21)
    46c4:	1c47883a 	add	r3,r3,r17
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    46c8:	3fe5883a 	add	r18,r7,ra
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    46cc:	1987883a 	add	r3,r3,r6
    46d0:	1c07c83a 	sub	r3,r3,r16
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    46d4:	9529883a 	add	r20,r18,r20
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    46d8:	9ba7383a 	mul	r19,r19,r14
    46dc:	1085883a 	add	r2,r2,r2
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    46e0:	a5000003 	ldbu	r20,0(r20)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    46e4:	1885c83a 	sub	r2,r3,r2
    46e8:	d0e71b17 	ldw	r3,-25492(gp)
    46ec:	994b883a 	add	r5,r19,r5
    46f0:	1505c83a 	sub	r2,r2,r20
    46f4:	194b883a 	add	r5,r3,r5
    46f8:	1005c072 	custom	1,r2,r2,zero
    46fc:	3ccf883a 	add	r7,r7,r19
    4700:	3b4f883a 	add	r7,r7,r13
    4704:	39c00003 	ldbu	r7,0(r7)
    4708:	94e5883a 	add	r18,r18,r19
    470c:	90c00003 	ldbu	r3,0(r18)
    4710:	3463c83a 	sub	r17,r6,r17
    4714:	39cf883a 	add	r7,r7,r7
    4718:	89cdc83a 	sub	r6,r17,r7
    471c:	18c7883a 	add	r3,r3,r3
    4720:	30c7883a 	add	r3,r6,r3
    4724:	1c21c83a 	sub	r16,r3,r16
    4728:	8529883a 	add	r20,r16,r20
    472c:	a029c072 	custom	1,r20,r20,zero
    4730:	1505883a 	add	r2,r2,r20
    4734:	1285c0b2 	custom	2,r2,r2,r10
    4738:	28800025 	stbio	r2,0(r5)


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    473c:	d0a72717 	ldw	r2,-25444(gp)
    4740:	f80b883a 	mov	r5,ra
    4744:	10ffffc4 	addi	r3,r2,-1
    4748:	f8ffc216 	blt	ra,r3,4654 <__alt_data_end+0xff004654>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    474c:	40c00084 	addi	r3,r8,2
    4750:	1885383a 	mul	r2,r3,r2
    4754:	d1671017 	ldw	r5,-25536(gp)
    4758:	1307883a 	add	r3,r2,r12
    475c:	18c7883a 	add	r3,r3,r3
    4760:	20c7883a 	add	r3,r4,r3
    4764:	18c0000b 	ldhu	r3,0(r3)
    4768:	10bfffc4 	addi	r2,r2,-1
    476c:	2885883a 	add	r2,r5,r2
    4770:	1807c032 	custom	0,r3,r3,zero
    4774:	10c00005 	stb	r3,0(r2)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    4778:	d0e72617 	ldw	r3,-25448(gp)
    477c:	d0a72717 	ldw	r2,-25444(gp)
    4780:	19bfff84 	addi	r6,r3,-2
    4784:	4180020e 	bge	r8,r6,4790 <sobel_all_complete_fusion+0x1f4>
    4788:	4811883a 	mov	r8,r9
    478c:	003fa306 	br	461c <__alt_data_end+0xff00461c>
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    4790:	01400084 	movi	r5,2
    4794:	2880430e 	bge	r5,r2,48a4 <sobel_all_complete_fusion+0x308>
    4798:	1a7fff44 	addi	r9,r3,-3
    479c:	02000044 	movi	r8,1
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    47a0:	02802004 	movi	r10,128
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
    47a4:	3085383a 	mul	r2,r6,r2
    47a8:	d1671017 	ldw	r5,-25536(gp)
    47ac:	1087883a 	add	r3,r2,r2
    47b0:	20c7883a 	add	r3,r4,r3
    47b4:	18c0000b 	ldhu	r3,0(r3)
    47b8:	1205883a 	add	r2,r2,r8
    47bc:	2885883a 	add	r2,r5,r2
    47c0:	1807c032 	custom	0,r3,r3,zero
    47c4:	10c00005 	stb	r3,0(r2)
				a = grayscale_array[(y-1)*array_width+(x-1)];
    47c8:	d1672717 	ldw	r5,-25444(gp)
    47cc:	d3271017 	ldw	r12,-25536(gp)
    47d0:	447fffc4 	addi	r17,r8,-1
    47d4:	2a45383a 	mul	r2,r5,r9
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    47d8:	6207883a 	add	r3,r12,r8
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    47dc:	294f883a 	add	r7,r5,r5
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    47e0:	609b883a 	add	r13,r12,r2
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    47e4:	189f883a 	add	r15,r3,r2
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    47e8:	388f883a 	add	r7,r7,r2

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    47ec:	42c00044 	addi	r11,r8,1
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    47f0:	6c5d883a 	add	r14,r13,r17
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    47f4:	78800003 	ldbu	r2,0(r15)
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    47f8:	74000003 	ldbu	r16,0(r14)
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    47fc:	61df883a 	add	r15,r12,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    4800:	6adb883a 	add	r13,r13,r11
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4804:	19e5883a 	add	r18,r3,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    4808:	6b800003 	ldbu	r14,0(r13)
				c = grayscale_array[(y+1)*array_width+(x-1)];
    480c:	7c5b883a 	add	r13,r15,r17
    4810:	6b400003 	ldbu	r13,0(r13)
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4814:	1087883a 	add	r3,r2,r2
    4818:	90800003 	ldbu	r2,0(r18)
    481c:	1c07883a 	add	r3,r3,r16
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    4820:	62df883a 	add	r15,r12,r11
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4824:	1b87883a 	add	r3,r3,r14
    4828:	1b47c83a 	sub	r3,r3,r13
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    482c:	79cf883a 	add	r7,r15,r7
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    4830:	298b383a 	mul	r5,r5,r6
    4834:	1085883a 	add	r2,r2,r2
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    4838:	39c00003 	ldbu	r7,0(r7)
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    483c:	1885c83a 	sub	r2,r3,r2
    4840:	d0e71b17 	ldw	r3,-25492(gp)
    4844:	2a11883a 	add	r8,r5,r8
    4848:	11c5c83a 	sub	r2,r2,r7
    484c:	1a11883a 	add	r8,r3,r8
    4850:	1005c072 	custom	1,r2,r2,zero
    4854:	6159883a 	add	r12,r12,r5
    4858:	6459883a 	add	r12,r12,r17
    485c:	63000003 	ldbu	r12,0(r12)
    4860:	795f883a 	add	r15,r15,r5
    4864:	79400003 	ldbu	r5,0(r15)
    4868:	741dc83a 	sub	r14,r14,r16
    486c:	6319883a 	add	r12,r12,r12
    4870:	7319c83a 	sub	r12,r14,r12
    4874:	294b883a 	add	r5,r5,r5
    4878:	614b883a 	add	r5,r12,r5
    487c:	2b47c83a 	sub	r3,r5,r13
    4880:	19c7883a 	add	r3,r3,r7
    4884:	1807c072 	custom	1,r3,r3,zero
    4888:	10c5883a 	add	r2,r2,r3
    488c:	1285c0b2 	custom	2,r2,r2,r10
    4890:	40800025 	stbio	r2,0(r8)
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    4894:	d0a72717 	ldw	r2,-25444(gp)
    4898:	5811883a 	mov	r8,r11
    489c:	10ffffc4 	addi	r3,r2,-1
    48a0:	58ffc016 	blt	r11,r3,47a4 <__alt_data_end+0xff0047a4>
						ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
							2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
						,128));
	}

}
    48a4:	dfc00617 	ldw	ra,24(sp)
    48a8:	dd400517 	ldw	r21,20(sp)
    48ac:	dd000417 	ldw	r20,16(sp)
    48b0:	dcc00317 	ldw	r19,12(sp)
    48b4:	dc800217 	ldw	r18,8(sp)
    48b8:	dc400117 	ldw	r17,4(sp)
    48bc:	dc000017 	ldw	r16,0(sp)
    48c0:	dec00704 	addi	sp,sp,28
    48c4:	f800283a 	ret

000048c8 <GetSobelAllResult>:
unsigned char *GetSobelAllResult() {
	return sobel_result;
}
    48c8:	d0a71b17 	ldw	r2,-25492(gp)
    48cc:	f800283a 	ret

000048d0 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    48d0:	00804034 	movhi	r2,256
    48d4:	10843404 	addi	r2,r2,4304
    48d8:	11000035 	stwio	r4,0(r2)
    48dc:	f800283a 	ret

000048e0 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    48e0:	00804034 	movhi	r2,256
    48e4:	10843504 	addi	r2,r2,4308
    48e8:	11000025 	stbio	r4,0(r2)
    48ec:	f800283a 	ret

000048f0 <__divsi3>:
    48f0:	20001b16 	blt	r4,zero,4960 <__divsi3+0x70>
    48f4:	000f883a 	mov	r7,zero
    48f8:	28001616 	blt	r5,zero,4954 <__divsi3+0x64>
    48fc:	200d883a 	mov	r6,r4
    4900:	29001a2e 	bgeu	r5,r4,496c <__divsi3+0x7c>
    4904:	00800804 	movi	r2,32
    4908:	00c00044 	movi	r3,1
    490c:	00000106 	br	4914 <__divsi3+0x24>
    4910:	10000d26 	beq	r2,zero,4948 <__divsi3+0x58>
    4914:	294b883a 	add	r5,r5,r5
    4918:	10bfffc4 	addi	r2,r2,-1
    491c:	18c7883a 	add	r3,r3,r3
    4920:	293ffb36 	bltu	r5,r4,4910 <__alt_data_end+0xff004910>
    4924:	0005883a 	mov	r2,zero
    4928:	18000726 	beq	r3,zero,4948 <__divsi3+0x58>
    492c:	0005883a 	mov	r2,zero
    4930:	31400236 	bltu	r6,r5,493c <__divsi3+0x4c>
    4934:	314dc83a 	sub	r6,r6,r5
    4938:	10c4b03a 	or	r2,r2,r3
    493c:	1806d07a 	srli	r3,r3,1
    4940:	280ad07a 	srli	r5,r5,1
    4944:	183ffa1e 	bne	r3,zero,4930 <__alt_data_end+0xff004930>
    4948:	38000126 	beq	r7,zero,4950 <__divsi3+0x60>
    494c:	0085c83a 	sub	r2,zero,r2
    4950:	f800283a 	ret
    4954:	014bc83a 	sub	r5,zero,r5
    4958:	39c0005c 	xori	r7,r7,1
    495c:	003fe706 	br	48fc <__alt_data_end+0xff0048fc>
    4960:	0109c83a 	sub	r4,zero,r4
    4964:	01c00044 	movi	r7,1
    4968:	003fe306 	br	48f8 <__alt_data_end+0xff0048f8>
    496c:	00c00044 	movi	r3,1
    4970:	003fee06 	br	492c <__alt_data_end+0xff00492c>

00004974 <__modsi3>:
    4974:	20001716 	blt	r4,zero,49d4 <__modsi3+0x60>
    4978:	000f883a 	mov	r7,zero
    497c:	2005883a 	mov	r2,r4
    4980:	28001216 	blt	r5,zero,49cc <__modsi3+0x58>
    4984:	2900162e 	bgeu	r5,r4,49e0 <__modsi3+0x6c>
    4988:	01800804 	movi	r6,32
    498c:	00c00044 	movi	r3,1
    4990:	00000106 	br	4998 <__modsi3+0x24>
    4994:	30000a26 	beq	r6,zero,49c0 <__modsi3+0x4c>
    4998:	294b883a 	add	r5,r5,r5
    499c:	31bfffc4 	addi	r6,r6,-1
    49a0:	18c7883a 	add	r3,r3,r3
    49a4:	293ffb36 	bltu	r5,r4,4994 <__alt_data_end+0xff004994>
    49a8:	18000526 	beq	r3,zero,49c0 <__modsi3+0x4c>
    49ac:	1806d07a 	srli	r3,r3,1
    49b0:	11400136 	bltu	r2,r5,49b8 <__modsi3+0x44>
    49b4:	1145c83a 	sub	r2,r2,r5
    49b8:	280ad07a 	srli	r5,r5,1
    49bc:	183ffb1e 	bne	r3,zero,49ac <__alt_data_end+0xff0049ac>
    49c0:	38000126 	beq	r7,zero,49c8 <__modsi3+0x54>
    49c4:	0085c83a 	sub	r2,zero,r2
    49c8:	f800283a 	ret
    49cc:	014bc83a 	sub	r5,zero,r5
    49d0:	003fec06 	br	4984 <__alt_data_end+0xff004984>
    49d4:	0109c83a 	sub	r4,zero,r4
    49d8:	01c00044 	movi	r7,1
    49dc:	003fe706 	br	497c <__alt_data_end+0xff00497c>
    49e0:	00c00044 	movi	r3,1
    49e4:	003ff106 	br	49ac <__alt_data_end+0xff0049ac>

000049e8 <__udivsi3>:
    49e8:	200d883a 	mov	r6,r4
    49ec:	2900152e 	bgeu	r5,r4,4a44 <__udivsi3+0x5c>
    49f0:	28001416 	blt	r5,zero,4a44 <__udivsi3+0x5c>
    49f4:	00800804 	movi	r2,32
    49f8:	00c00044 	movi	r3,1
    49fc:	00000206 	br	4a08 <__udivsi3+0x20>
    4a00:	10000e26 	beq	r2,zero,4a3c <__udivsi3+0x54>
    4a04:	28000516 	blt	r5,zero,4a1c <__udivsi3+0x34>
    4a08:	294b883a 	add	r5,r5,r5
    4a0c:	10bfffc4 	addi	r2,r2,-1
    4a10:	18c7883a 	add	r3,r3,r3
    4a14:	293ffa36 	bltu	r5,r4,4a00 <__alt_data_end+0xff004a00>
    4a18:	18000826 	beq	r3,zero,4a3c <__udivsi3+0x54>
    4a1c:	0005883a 	mov	r2,zero
    4a20:	31400236 	bltu	r6,r5,4a2c <__udivsi3+0x44>
    4a24:	314dc83a 	sub	r6,r6,r5
    4a28:	10c4b03a 	or	r2,r2,r3
    4a2c:	1806d07a 	srli	r3,r3,1
    4a30:	280ad07a 	srli	r5,r5,1
    4a34:	183ffa1e 	bne	r3,zero,4a20 <__alt_data_end+0xff004a20>
    4a38:	f800283a 	ret
    4a3c:	0005883a 	mov	r2,zero
    4a40:	f800283a 	ret
    4a44:	00c00044 	movi	r3,1
    4a48:	003ff406 	br	4a1c <__alt_data_end+0xff004a1c>

00004a4c <__umodsi3>:
    4a4c:	2005883a 	mov	r2,r4
    4a50:	2900122e 	bgeu	r5,r4,4a9c <__umodsi3+0x50>
    4a54:	28001116 	blt	r5,zero,4a9c <__umodsi3+0x50>
    4a58:	01800804 	movi	r6,32
    4a5c:	00c00044 	movi	r3,1
    4a60:	00000206 	br	4a6c <__umodsi3+0x20>
    4a64:	30000c26 	beq	r6,zero,4a98 <__umodsi3+0x4c>
    4a68:	28000516 	blt	r5,zero,4a80 <__umodsi3+0x34>
    4a6c:	294b883a 	add	r5,r5,r5
    4a70:	31bfffc4 	addi	r6,r6,-1
    4a74:	18c7883a 	add	r3,r3,r3
    4a78:	293ffa36 	bltu	r5,r4,4a64 <__alt_data_end+0xff004a64>
    4a7c:	18000626 	beq	r3,zero,4a98 <__umodsi3+0x4c>
    4a80:	1806d07a 	srli	r3,r3,1
    4a84:	11400136 	bltu	r2,r5,4a8c <__umodsi3+0x40>
    4a88:	1145c83a 	sub	r2,r2,r5
    4a8c:	280ad07a 	srli	r5,r5,1
    4a90:	183ffb1e 	bne	r3,zero,4a80 <__alt_data_end+0xff004a80>
    4a94:	f800283a 	ret
    4a98:	f800283a 	ret
    4a9c:	00c00044 	movi	r3,1
    4aa0:	003ff706 	br	4a80 <__alt_data_end+0xff004a80>

00004aa4 <__divdf3>:
    4aa4:	defff204 	addi	sp,sp,-56
    4aa8:	dd400915 	stw	r21,36(sp)
    4aac:	282ad53a 	srli	r21,r5,20
    4ab0:	dd000815 	stw	r20,32(sp)
    4ab4:	2828d7fa 	srli	r20,r5,31
    4ab8:	dc000415 	stw	r16,16(sp)
    4abc:	04000434 	movhi	r16,16
    4ac0:	df000c15 	stw	fp,48(sp)
    4ac4:	843fffc4 	addi	r16,r16,-1
    4ac8:	dfc00d15 	stw	ra,52(sp)
    4acc:	ddc00b15 	stw	r23,44(sp)
    4ad0:	dd800a15 	stw	r22,40(sp)
    4ad4:	dcc00715 	stw	r19,28(sp)
    4ad8:	dc800615 	stw	r18,24(sp)
    4adc:	dc400515 	stw	r17,20(sp)
    4ae0:	ad41ffcc 	andi	r21,r21,2047
    4ae4:	2c20703a 	and	r16,r5,r16
    4ae8:	a7003fcc 	andi	fp,r20,255
    4aec:	a8006126 	beq	r21,zero,4c74 <__divdf3+0x1d0>
    4af0:	0081ffc4 	movi	r2,2047
    4af4:	2025883a 	mov	r18,r4
    4af8:	a8803726 	beq	r21,r2,4bd8 <__divdf3+0x134>
    4afc:	80800434 	orhi	r2,r16,16
    4b00:	100490fa 	slli	r2,r2,3
    4b04:	2020d77a 	srli	r16,r4,29
    4b08:	202490fa 	slli	r18,r4,3
    4b0c:	ad7f0044 	addi	r21,r21,-1023
    4b10:	80a0b03a 	or	r16,r16,r2
    4b14:	0027883a 	mov	r19,zero
    4b18:	0013883a 	mov	r9,zero
    4b1c:	3804d53a 	srli	r2,r7,20
    4b20:	382cd7fa 	srli	r22,r7,31
    4b24:	04400434 	movhi	r17,16
    4b28:	8c7fffc4 	addi	r17,r17,-1
    4b2c:	1081ffcc 	andi	r2,r2,2047
    4b30:	3011883a 	mov	r8,r6
    4b34:	3c62703a 	and	r17,r7,r17
    4b38:	b5c03fcc 	andi	r23,r22,255
    4b3c:	10006c26 	beq	r2,zero,4cf0 <__divdf3+0x24c>
    4b40:	00c1ffc4 	movi	r3,2047
    4b44:	10c06426 	beq	r2,r3,4cd8 <__divdf3+0x234>
    4b48:	88c00434 	orhi	r3,r17,16
    4b4c:	180690fa 	slli	r3,r3,3
    4b50:	3022d77a 	srli	r17,r6,29
    4b54:	301090fa 	slli	r8,r6,3
    4b58:	10bf0044 	addi	r2,r2,-1023
    4b5c:	88e2b03a 	or	r17,r17,r3
    4b60:	000f883a 	mov	r7,zero
    4b64:	a58cf03a 	xor	r6,r20,r22
    4b68:	3cc8b03a 	or	r4,r7,r19
    4b6c:	a8abc83a 	sub	r21,r21,r2
    4b70:	008003c4 	movi	r2,15
    4b74:	3007883a 	mov	r3,r6
    4b78:	34c03fcc 	andi	r19,r6,255
    4b7c:	11009036 	bltu	r2,r4,4dc0 <__divdf3+0x31c>
    4b80:	200890ba 	slli	r4,r4,2
    4b84:	00800034 	movhi	r2,0
    4b88:	1092e604 	addi	r2,r2,19352
    4b8c:	2089883a 	add	r4,r4,r2
    4b90:	20800017 	ldw	r2,0(r4)
    4b94:	1000683a 	jmp	r2
    4b98:	00004dc0 	call	4dc <init_camera+0x24c>
    4b9c:	00004c10 	cmplti	zero,zero,304
    4ba0:	00004db0 	cmpltui	zero,zero,310
    4ba4:	00004c04 	movi	zero,304
    4ba8:	00004db0 	cmpltui	zero,zero,310
    4bac:	00004d84 	movi	zero,310
    4bb0:	00004db0 	cmpltui	zero,zero,310
    4bb4:	00004c04 	movi	zero,304
    4bb8:	00004c10 	cmplti	zero,zero,304
    4bbc:	00004c10 	cmplti	zero,zero,304
    4bc0:	00004d84 	movi	zero,310
    4bc4:	00004c04 	movi	zero,304
    4bc8:	00004bf4 	movhi	zero,303
    4bcc:	00004bf4 	movhi	zero,303
    4bd0:	00004bf4 	movhi	zero,303
    4bd4:	000050a4 	muli	zero,zero,322
    4bd8:	2404b03a 	or	r2,r4,r16
    4bdc:	1000661e 	bne	r2,zero,4d78 <__divdf3+0x2d4>
    4be0:	04c00204 	movi	r19,8
    4be4:	0021883a 	mov	r16,zero
    4be8:	0025883a 	mov	r18,zero
    4bec:	02400084 	movi	r9,2
    4bf0:	003fca06 	br	4b1c <__alt_data_end+0xff004b1c>
    4bf4:	8023883a 	mov	r17,r16
    4bf8:	9011883a 	mov	r8,r18
    4bfc:	e02f883a 	mov	r23,fp
    4c00:	480f883a 	mov	r7,r9
    4c04:	00800084 	movi	r2,2
    4c08:	3881311e 	bne	r7,r2,50d0 <__divdf3+0x62c>
    4c0c:	b827883a 	mov	r19,r23
    4c10:	98c0004c 	andi	r3,r19,1
    4c14:	0081ffc4 	movi	r2,2047
    4c18:	000b883a 	mov	r5,zero
    4c1c:	0025883a 	mov	r18,zero
    4c20:	1004953a 	slli	r2,r2,20
    4c24:	18c03fcc 	andi	r3,r3,255
    4c28:	04400434 	movhi	r17,16
    4c2c:	8c7fffc4 	addi	r17,r17,-1
    4c30:	180697fa 	slli	r3,r3,31
    4c34:	2c4a703a 	and	r5,r5,r17
    4c38:	288ab03a 	or	r5,r5,r2
    4c3c:	28c6b03a 	or	r3,r5,r3
    4c40:	9005883a 	mov	r2,r18
    4c44:	dfc00d17 	ldw	ra,52(sp)
    4c48:	df000c17 	ldw	fp,48(sp)
    4c4c:	ddc00b17 	ldw	r23,44(sp)
    4c50:	dd800a17 	ldw	r22,40(sp)
    4c54:	dd400917 	ldw	r21,36(sp)
    4c58:	dd000817 	ldw	r20,32(sp)
    4c5c:	dcc00717 	ldw	r19,28(sp)
    4c60:	dc800617 	ldw	r18,24(sp)
    4c64:	dc400517 	ldw	r17,20(sp)
    4c68:	dc000417 	ldw	r16,16(sp)
    4c6c:	dec00e04 	addi	sp,sp,56
    4c70:	f800283a 	ret
    4c74:	2404b03a 	or	r2,r4,r16
    4c78:	2027883a 	mov	r19,r4
    4c7c:	10003926 	beq	r2,zero,4d64 <__divdf3+0x2c0>
    4c80:	80012e26 	beq	r16,zero,513c <__divdf3+0x698>
    4c84:	8009883a 	mov	r4,r16
    4c88:	d9800315 	stw	r6,12(sp)
    4c8c:	d9c00215 	stw	r7,8(sp)
    4c90:	00054340 	call	5434 <__clzsi2>
    4c94:	d9800317 	ldw	r6,12(sp)
    4c98:	d9c00217 	ldw	r7,8(sp)
    4c9c:	113ffd44 	addi	r4,r2,-11
    4ca0:	00c00704 	movi	r3,28
    4ca4:	19012116 	blt	r3,r4,512c <__divdf3+0x688>
    4ca8:	00c00744 	movi	r3,29
    4cac:	147ffe04 	addi	r17,r2,-8
    4cb0:	1907c83a 	sub	r3,r3,r4
    4cb4:	8460983a 	sll	r16,r16,r17
    4cb8:	98c6d83a 	srl	r3,r19,r3
    4cbc:	9c64983a 	sll	r18,r19,r17
    4cc0:	1c20b03a 	or	r16,r3,r16
    4cc4:	1080fcc4 	addi	r2,r2,1011
    4cc8:	00abc83a 	sub	r21,zero,r2
    4ccc:	0027883a 	mov	r19,zero
    4cd0:	0013883a 	mov	r9,zero
    4cd4:	003f9106 	br	4b1c <__alt_data_end+0xff004b1c>
    4cd8:	3446b03a 	or	r3,r6,r17
    4cdc:	18001f1e 	bne	r3,zero,4d5c <__divdf3+0x2b8>
    4ce0:	0023883a 	mov	r17,zero
    4ce4:	0011883a 	mov	r8,zero
    4ce8:	01c00084 	movi	r7,2
    4cec:	003f9d06 	br	4b64 <__alt_data_end+0xff004b64>
    4cf0:	3446b03a 	or	r3,r6,r17
    4cf4:	18001526 	beq	r3,zero,4d4c <__divdf3+0x2a8>
    4cf8:	88011b26 	beq	r17,zero,5168 <__divdf3+0x6c4>
    4cfc:	8809883a 	mov	r4,r17
    4d00:	d9800315 	stw	r6,12(sp)
    4d04:	da400115 	stw	r9,4(sp)
    4d08:	00054340 	call	5434 <__clzsi2>
    4d0c:	d9800317 	ldw	r6,12(sp)
    4d10:	da400117 	ldw	r9,4(sp)
    4d14:	113ffd44 	addi	r4,r2,-11
    4d18:	00c00704 	movi	r3,28
    4d1c:	19010e16 	blt	r3,r4,5158 <__divdf3+0x6b4>
    4d20:	00c00744 	movi	r3,29
    4d24:	123ffe04 	addi	r8,r2,-8
    4d28:	1907c83a 	sub	r3,r3,r4
    4d2c:	8a22983a 	sll	r17,r17,r8
    4d30:	30c6d83a 	srl	r3,r6,r3
    4d34:	3210983a 	sll	r8,r6,r8
    4d38:	1c62b03a 	or	r17,r3,r17
    4d3c:	1080fcc4 	addi	r2,r2,1011
    4d40:	0085c83a 	sub	r2,zero,r2
    4d44:	000f883a 	mov	r7,zero
    4d48:	003f8606 	br	4b64 <__alt_data_end+0xff004b64>
    4d4c:	0023883a 	mov	r17,zero
    4d50:	0011883a 	mov	r8,zero
    4d54:	01c00044 	movi	r7,1
    4d58:	003f8206 	br	4b64 <__alt_data_end+0xff004b64>
    4d5c:	01c000c4 	movi	r7,3
    4d60:	003f8006 	br	4b64 <__alt_data_end+0xff004b64>
    4d64:	04c00104 	movi	r19,4
    4d68:	0021883a 	mov	r16,zero
    4d6c:	0025883a 	mov	r18,zero
    4d70:	02400044 	movi	r9,1
    4d74:	003f6906 	br	4b1c <__alt_data_end+0xff004b1c>
    4d78:	04c00304 	movi	r19,12
    4d7c:	024000c4 	movi	r9,3
    4d80:	003f6606 	br	4b1c <__alt_data_end+0xff004b1c>
    4d84:	01400434 	movhi	r5,16
    4d88:	0007883a 	mov	r3,zero
    4d8c:	297fffc4 	addi	r5,r5,-1
    4d90:	04bfffc4 	movi	r18,-1
    4d94:	0081ffc4 	movi	r2,2047
    4d98:	003fa106 	br	4c20 <__alt_data_end+0xff004c20>
    4d9c:	00c00044 	movi	r3,1
    4da0:	1887c83a 	sub	r3,r3,r2
    4da4:	01000e04 	movi	r4,56
    4da8:	20c1210e 	bge	r4,r3,5230 <__divdf3+0x78c>
    4dac:	98c0004c 	andi	r3,r19,1
    4db0:	0005883a 	mov	r2,zero
    4db4:	000b883a 	mov	r5,zero
    4db8:	0025883a 	mov	r18,zero
    4dbc:	003f9806 	br	4c20 <__alt_data_end+0xff004c20>
    4dc0:	8c00fd36 	bltu	r17,r16,51b8 <__divdf3+0x714>
    4dc4:	8440fb26 	beq	r16,r17,51b4 <__divdf3+0x710>
    4dc8:	8007883a 	mov	r3,r16
    4dcc:	ad7fffc4 	addi	r21,r21,-1
    4dd0:	0021883a 	mov	r16,zero
    4dd4:	4004d63a 	srli	r2,r8,24
    4dd8:	8822923a 	slli	r17,r17,8
    4ddc:	1809883a 	mov	r4,r3
    4de0:	402c923a 	slli	r22,r8,8
    4de4:	88b8b03a 	or	fp,r17,r2
    4de8:	e028d43a 	srli	r20,fp,16
    4dec:	d8c00015 	stw	r3,0(sp)
    4df0:	e5ffffcc 	andi	r23,fp,65535
    4df4:	a00b883a 	mov	r5,r20
    4df8:	00049e80 	call	49e8 <__udivsi3>
    4dfc:	d8c00017 	ldw	r3,0(sp)
    4e00:	a00b883a 	mov	r5,r20
    4e04:	d8800315 	stw	r2,12(sp)
    4e08:	1809883a 	mov	r4,r3
    4e0c:	0004a4c0 	call	4a4c <__umodsi3>
    4e10:	d9800317 	ldw	r6,12(sp)
    4e14:	1006943a 	slli	r3,r2,16
    4e18:	9004d43a 	srli	r2,r18,16
    4e1c:	b9a3383a 	mul	r17,r23,r6
    4e20:	10c4b03a 	or	r2,r2,r3
    4e24:	1440062e 	bgeu	r2,r17,4e40 <__divdf3+0x39c>
    4e28:	1705883a 	add	r2,r2,fp
    4e2c:	30ffffc4 	addi	r3,r6,-1
    4e30:	1700ee36 	bltu	r2,fp,51ec <__divdf3+0x748>
    4e34:	1440ed2e 	bgeu	r2,r17,51ec <__divdf3+0x748>
    4e38:	31bfff84 	addi	r6,r6,-2
    4e3c:	1705883a 	add	r2,r2,fp
    4e40:	1463c83a 	sub	r17,r2,r17
    4e44:	a00b883a 	mov	r5,r20
    4e48:	8809883a 	mov	r4,r17
    4e4c:	d9800315 	stw	r6,12(sp)
    4e50:	00049e80 	call	49e8 <__udivsi3>
    4e54:	a00b883a 	mov	r5,r20
    4e58:	8809883a 	mov	r4,r17
    4e5c:	d8800215 	stw	r2,8(sp)
    4e60:	0004a4c0 	call	4a4c <__umodsi3>
    4e64:	d9c00217 	ldw	r7,8(sp)
    4e68:	1004943a 	slli	r2,r2,16
    4e6c:	94bfffcc 	andi	r18,r18,65535
    4e70:	b9d1383a 	mul	r8,r23,r7
    4e74:	90a4b03a 	or	r18,r18,r2
    4e78:	d9800317 	ldw	r6,12(sp)
    4e7c:	9200062e 	bgeu	r18,r8,4e98 <__divdf3+0x3f4>
    4e80:	9725883a 	add	r18,r18,fp
    4e84:	38bfffc4 	addi	r2,r7,-1
    4e88:	9700d636 	bltu	r18,fp,51e4 <__divdf3+0x740>
    4e8c:	9200d52e 	bgeu	r18,r8,51e4 <__divdf3+0x740>
    4e90:	39ffff84 	addi	r7,r7,-2
    4e94:	9725883a 	add	r18,r18,fp
    4e98:	3004943a 	slli	r2,r6,16
    4e9c:	b012d43a 	srli	r9,r22,16
    4ea0:	b1bfffcc 	andi	r6,r22,65535
    4ea4:	11e2b03a 	or	r17,r2,r7
    4ea8:	8806d43a 	srli	r3,r17,16
    4eac:	893fffcc 	andi	r4,r17,65535
    4eb0:	218b383a 	mul	r5,r4,r6
    4eb4:	30c5383a 	mul	r2,r6,r3
    4eb8:	2249383a 	mul	r4,r4,r9
    4ebc:	280ed43a 	srli	r7,r5,16
    4ec0:	9225c83a 	sub	r18,r18,r8
    4ec4:	2089883a 	add	r4,r4,r2
    4ec8:	3909883a 	add	r4,r7,r4
    4ecc:	1a47383a 	mul	r3,r3,r9
    4ed0:	2080022e 	bgeu	r4,r2,4edc <__divdf3+0x438>
    4ed4:	00800074 	movhi	r2,1
    4ed8:	1887883a 	add	r3,r3,r2
    4edc:	2004d43a 	srli	r2,r4,16
    4ee0:	2008943a 	slli	r4,r4,16
    4ee4:	297fffcc 	andi	r5,r5,65535
    4ee8:	10c7883a 	add	r3,r2,r3
    4eec:	2149883a 	add	r4,r4,r5
    4ef0:	90c0a536 	bltu	r18,r3,5188 <__divdf3+0x6e4>
    4ef4:	90c0bf26 	beq	r18,r3,51f4 <__divdf3+0x750>
    4ef8:	90c7c83a 	sub	r3,r18,r3
    4efc:	810fc83a 	sub	r7,r16,r4
    4f00:	81e5803a 	cmpltu	r18,r16,r7
    4f04:	1ca5c83a 	sub	r18,r3,r18
    4f08:	e480c126 	beq	fp,r18,5210 <__divdf3+0x76c>
    4f0c:	a00b883a 	mov	r5,r20
    4f10:	9009883a 	mov	r4,r18
    4f14:	d9800315 	stw	r6,12(sp)
    4f18:	d9c00215 	stw	r7,8(sp)
    4f1c:	da400115 	stw	r9,4(sp)
    4f20:	00049e80 	call	49e8 <__udivsi3>
    4f24:	a00b883a 	mov	r5,r20
    4f28:	9009883a 	mov	r4,r18
    4f2c:	d8800015 	stw	r2,0(sp)
    4f30:	0004a4c0 	call	4a4c <__umodsi3>
    4f34:	d9c00217 	ldw	r7,8(sp)
    4f38:	da000017 	ldw	r8,0(sp)
    4f3c:	1006943a 	slli	r3,r2,16
    4f40:	3804d43a 	srli	r2,r7,16
    4f44:	ba21383a 	mul	r16,r23,r8
    4f48:	d9800317 	ldw	r6,12(sp)
    4f4c:	10c4b03a 	or	r2,r2,r3
    4f50:	da400117 	ldw	r9,4(sp)
    4f54:	1400062e 	bgeu	r2,r16,4f70 <__divdf3+0x4cc>
    4f58:	1705883a 	add	r2,r2,fp
    4f5c:	40ffffc4 	addi	r3,r8,-1
    4f60:	1700ad36 	bltu	r2,fp,5218 <__divdf3+0x774>
    4f64:	1400ac2e 	bgeu	r2,r16,5218 <__divdf3+0x774>
    4f68:	423fff84 	addi	r8,r8,-2
    4f6c:	1705883a 	add	r2,r2,fp
    4f70:	1421c83a 	sub	r16,r2,r16
    4f74:	a00b883a 	mov	r5,r20
    4f78:	8009883a 	mov	r4,r16
    4f7c:	d9800315 	stw	r6,12(sp)
    4f80:	d9c00215 	stw	r7,8(sp)
    4f84:	da000015 	stw	r8,0(sp)
    4f88:	da400115 	stw	r9,4(sp)
    4f8c:	00049e80 	call	49e8 <__udivsi3>
    4f90:	8009883a 	mov	r4,r16
    4f94:	a00b883a 	mov	r5,r20
    4f98:	1025883a 	mov	r18,r2
    4f9c:	0004a4c0 	call	4a4c <__umodsi3>
    4fa0:	d9c00217 	ldw	r7,8(sp)
    4fa4:	1004943a 	slli	r2,r2,16
    4fa8:	bcaf383a 	mul	r23,r23,r18
    4fac:	393fffcc 	andi	r4,r7,65535
    4fb0:	2088b03a 	or	r4,r4,r2
    4fb4:	d9800317 	ldw	r6,12(sp)
    4fb8:	da000017 	ldw	r8,0(sp)
    4fbc:	da400117 	ldw	r9,4(sp)
    4fc0:	25c0062e 	bgeu	r4,r23,4fdc <__divdf3+0x538>
    4fc4:	2709883a 	add	r4,r4,fp
    4fc8:	90bfffc4 	addi	r2,r18,-1
    4fcc:	27009436 	bltu	r4,fp,5220 <__divdf3+0x77c>
    4fd0:	25c0932e 	bgeu	r4,r23,5220 <__divdf3+0x77c>
    4fd4:	94bfff84 	addi	r18,r18,-2
    4fd8:	2709883a 	add	r4,r4,fp
    4fdc:	4004943a 	slli	r2,r8,16
    4fe0:	25efc83a 	sub	r23,r4,r23
    4fe4:	1490b03a 	or	r8,r2,r18
    4fe8:	4008d43a 	srli	r4,r8,16
    4fec:	40ffffcc 	andi	r3,r8,65535
    4ff0:	30c5383a 	mul	r2,r6,r3
    4ff4:	1a47383a 	mul	r3,r3,r9
    4ff8:	310d383a 	mul	r6,r6,r4
    4ffc:	100ad43a 	srli	r5,r2,16
    5000:	4913383a 	mul	r9,r9,r4
    5004:	1987883a 	add	r3,r3,r6
    5008:	28c7883a 	add	r3,r5,r3
    500c:	1980022e 	bgeu	r3,r6,5018 <__divdf3+0x574>
    5010:	01000074 	movhi	r4,1
    5014:	4913883a 	add	r9,r9,r4
    5018:	1808d43a 	srli	r4,r3,16
    501c:	1806943a 	slli	r3,r3,16
    5020:	10bfffcc 	andi	r2,r2,65535
    5024:	2253883a 	add	r9,r4,r9
    5028:	1887883a 	add	r3,r3,r2
    502c:	ba403836 	bltu	r23,r9,5110 <__divdf3+0x66c>
    5030:	ba403626 	beq	r23,r9,510c <__divdf3+0x668>
    5034:	42000054 	ori	r8,r8,1
    5038:	a880ffc4 	addi	r2,r21,1023
    503c:	00bf570e 	bge	zero,r2,4d9c <__alt_data_end+0xff004d9c>
    5040:	40c001cc 	andi	r3,r8,7
    5044:	18000726 	beq	r3,zero,5064 <__divdf3+0x5c0>
    5048:	40c003cc 	andi	r3,r8,15
    504c:	01000104 	movi	r4,4
    5050:	19000426 	beq	r3,r4,5064 <__divdf3+0x5c0>
    5054:	4107883a 	add	r3,r8,r4
    5058:	1a11803a 	cmpltu	r8,r3,r8
    505c:	8a23883a 	add	r17,r17,r8
    5060:	1811883a 	mov	r8,r3
    5064:	88c0402c 	andhi	r3,r17,256
    5068:	18000426 	beq	r3,zero,507c <__divdf3+0x5d8>
    506c:	00ffc034 	movhi	r3,65280
    5070:	18ffffc4 	addi	r3,r3,-1
    5074:	a8810004 	addi	r2,r21,1024
    5078:	88e2703a 	and	r17,r17,r3
    507c:	00c1ff84 	movi	r3,2046
    5080:	18bee316 	blt	r3,r2,4c10 <__alt_data_end+0xff004c10>
    5084:	8824977a 	slli	r18,r17,29
    5088:	4010d0fa 	srli	r8,r8,3
    508c:	8822927a 	slli	r17,r17,9
    5090:	1081ffcc 	andi	r2,r2,2047
    5094:	9224b03a 	or	r18,r18,r8
    5098:	880ad33a 	srli	r5,r17,12
    509c:	98c0004c 	andi	r3,r19,1
    50a0:	003edf06 	br	4c20 <__alt_data_end+0xff004c20>
    50a4:	8080022c 	andhi	r2,r16,8
    50a8:	10001226 	beq	r2,zero,50f4 <__divdf3+0x650>
    50ac:	8880022c 	andhi	r2,r17,8
    50b0:	1000101e 	bne	r2,zero,50f4 <__divdf3+0x650>
    50b4:	00800434 	movhi	r2,16
    50b8:	89400234 	orhi	r5,r17,8
    50bc:	10bfffc4 	addi	r2,r2,-1
    50c0:	b007883a 	mov	r3,r22
    50c4:	288a703a 	and	r5,r5,r2
    50c8:	4025883a 	mov	r18,r8
    50cc:	003f3106 	br	4d94 <__alt_data_end+0xff004d94>
    50d0:	008000c4 	movi	r2,3
    50d4:	3880a626 	beq	r7,r2,5370 <__divdf3+0x8cc>
    50d8:	00800044 	movi	r2,1
    50dc:	3880521e 	bne	r7,r2,5228 <__divdf3+0x784>
    50e0:	b807883a 	mov	r3,r23
    50e4:	0005883a 	mov	r2,zero
    50e8:	000b883a 	mov	r5,zero
    50ec:	0025883a 	mov	r18,zero
    50f0:	003ecb06 	br	4c20 <__alt_data_end+0xff004c20>
    50f4:	00800434 	movhi	r2,16
    50f8:	81400234 	orhi	r5,r16,8
    50fc:	10bfffc4 	addi	r2,r2,-1
    5100:	a007883a 	mov	r3,r20
    5104:	288a703a 	and	r5,r5,r2
    5108:	003f2206 	br	4d94 <__alt_data_end+0xff004d94>
    510c:	183fca26 	beq	r3,zero,5038 <__alt_data_end+0xff005038>
    5110:	e5ef883a 	add	r23,fp,r23
    5114:	40bfffc4 	addi	r2,r8,-1
    5118:	bf00392e 	bgeu	r23,fp,5200 <__divdf3+0x75c>
    511c:	1011883a 	mov	r8,r2
    5120:	ba7fc41e 	bne	r23,r9,5034 <__alt_data_end+0xff005034>
    5124:	b0ffc31e 	bne	r22,r3,5034 <__alt_data_end+0xff005034>
    5128:	003fc306 	br	5038 <__alt_data_end+0xff005038>
    512c:	143ff604 	addi	r16,r2,-40
    5130:	9c20983a 	sll	r16,r19,r16
    5134:	0025883a 	mov	r18,zero
    5138:	003ee206 	br	4cc4 <__alt_data_end+0xff004cc4>
    513c:	d9800315 	stw	r6,12(sp)
    5140:	d9c00215 	stw	r7,8(sp)
    5144:	00054340 	call	5434 <__clzsi2>
    5148:	10800804 	addi	r2,r2,32
    514c:	d9c00217 	ldw	r7,8(sp)
    5150:	d9800317 	ldw	r6,12(sp)
    5154:	003ed106 	br	4c9c <__alt_data_end+0xff004c9c>
    5158:	147ff604 	addi	r17,r2,-40
    515c:	3462983a 	sll	r17,r6,r17
    5160:	0011883a 	mov	r8,zero
    5164:	003ef506 	br	4d3c <__alt_data_end+0xff004d3c>
    5168:	3009883a 	mov	r4,r6
    516c:	d9800315 	stw	r6,12(sp)
    5170:	da400115 	stw	r9,4(sp)
    5174:	00054340 	call	5434 <__clzsi2>
    5178:	10800804 	addi	r2,r2,32
    517c:	da400117 	ldw	r9,4(sp)
    5180:	d9800317 	ldw	r6,12(sp)
    5184:	003ee306 	br	4d14 <__alt_data_end+0xff004d14>
    5188:	85a1883a 	add	r16,r16,r22
    518c:	8585803a 	cmpltu	r2,r16,r22
    5190:	1705883a 	add	r2,r2,fp
    5194:	14a5883a 	add	r18,r2,r18
    5198:	88bfffc4 	addi	r2,r17,-1
    519c:	e4800c2e 	bgeu	fp,r18,51d0 <__divdf3+0x72c>
    51a0:	90c03e36 	bltu	r18,r3,529c <__divdf3+0x7f8>
    51a4:	1c806926 	beq	r3,r18,534c <__divdf3+0x8a8>
    51a8:	90c7c83a 	sub	r3,r18,r3
    51ac:	1023883a 	mov	r17,r2
    51b0:	003f5206 	br	4efc <__alt_data_end+0xff004efc>
    51b4:	923f0436 	bltu	r18,r8,4dc8 <__alt_data_end+0xff004dc8>
    51b8:	800897fa 	slli	r4,r16,31
    51bc:	9004d07a 	srli	r2,r18,1
    51c0:	8006d07a 	srli	r3,r16,1
    51c4:	902097fa 	slli	r16,r18,31
    51c8:	20a4b03a 	or	r18,r4,r2
    51cc:	003f0106 	br	4dd4 <__alt_data_end+0xff004dd4>
    51d0:	e4bff51e 	bne	fp,r18,51a8 <__alt_data_end+0xff0051a8>
    51d4:	85bff22e 	bgeu	r16,r22,51a0 <__alt_data_end+0xff0051a0>
    51d8:	e0c7c83a 	sub	r3,fp,r3
    51dc:	1023883a 	mov	r17,r2
    51e0:	003f4606 	br	4efc <__alt_data_end+0xff004efc>
    51e4:	100f883a 	mov	r7,r2
    51e8:	003f2b06 	br	4e98 <__alt_data_end+0xff004e98>
    51ec:	180d883a 	mov	r6,r3
    51f0:	003f1306 	br	4e40 <__alt_data_end+0xff004e40>
    51f4:	813fe436 	bltu	r16,r4,5188 <__alt_data_end+0xff005188>
    51f8:	0007883a 	mov	r3,zero
    51fc:	003f3f06 	br	4efc <__alt_data_end+0xff004efc>
    5200:	ba402c36 	bltu	r23,r9,52b4 <__divdf3+0x810>
    5204:	4dc05426 	beq	r9,r23,5358 <__divdf3+0x8b4>
    5208:	1011883a 	mov	r8,r2
    520c:	003f8906 	br	5034 <__alt_data_end+0xff005034>
    5210:	023fffc4 	movi	r8,-1
    5214:	003f8806 	br	5038 <__alt_data_end+0xff005038>
    5218:	1811883a 	mov	r8,r3
    521c:	003f5406 	br	4f70 <__alt_data_end+0xff004f70>
    5220:	1025883a 	mov	r18,r2
    5224:	003f6d06 	br	4fdc <__alt_data_end+0xff004fdc>
    5228:	b827883a 	mov	r19,r23
    522c:	003f8206 	br	5038 <__alt_data_end+0xff005038>
    5230:	010007c4 	movi	r4,31
    5234:	20c02616 	blt	r4,r3,52d0 <__divdf3+0x82c>
    5238:	00800804 	movi	r2,32
    523c:	10c5c83a 	sub	r2,r2,r3
    5240:	888a983a 	sll	r5,r17,r2
    5244:	40c8d83a 	srl	r4,r8,r3
    5248:	4084983a 	sll	r2,r8,r2
    524c:	88e2d83a 	srl	r17,r17,r3
    5250:	2906b03a 	or	r3,r5,r4
    5254:	1004c03a 	cmpne	r2,r2,zero
    5258:	1886b03a 	or	r3,r3,r2
    525c:	188001cc 	andi	r2,r3,7
    5260:	10000726 	beq	r2,zero,5280 <__divdf3+0x7dc>
    5264:	188003cc 	andi	r2,r3,15
    5268:	01000104 	movi	r4,4
    526c:	11000426 	beq	r2,r4,5280 <__divdf3+0x7dc>
    5270:	1805883a 	mov	r2,r3
    5274:	10c00104 	addi	r3,r2,4
    5278:	1885803a 	cmpltu	r2,r3,r2
    527c:	88a3883a 	add	r17,r17,r2
    5280:	8880202c 	andhi	r2,r17,128
    5284:	10002726 	beq	r2,zero,5324 <__divdf3+0x880>
    5288:	98c0004c 	andi	r3,r19,1
    528c:	00800044 	movi	r2,1
    5290:	000b883a 	mov	r5,zero
    5294:	0025883a 	mov	r18,zero
    5298:	003e6106 	br	4c20 <__alt_data_end+0xff004c20>
    529c:	85a1883a 	add	r16,r16,r22
    52a0:	8585803a 	cmpltu	r2,r16,r22
    52a4:	1705883a 	add	r2,r2,fp
    52a8:	14a5883a 	add	r18,r2,r18
    52ac:	8c7fff84 	addi	r17,r17,-2
    52b0:	003f1106 	br	4ef8 <__alt_data_end+0xff004ef8>
    52b4:	b589883a 	add	r4,r22,r22
    52b8:	25ad803a 	cmpltu	r22,r4,r22
    52bc:	b739883a 	add	fp,r22,fp
    52c0:	40bfff84 	addi	r2,r8,-2
    52c4:	bf2f883a 	add	r23,r23,fp
    52c8:	202d883a 	mov	r22,r4
    52cc:	003f9306 	br	511c <__alt_data_end+0xff00511c>
    52d0:	013ff844 	movi	r4,-31
    52d4:	2085c83a 	sub	r2,r4,r2
    52d8:	8888d83a 	srl	r4,r17,r2
    52dc:	00800804 	movi	r2,32
    52e0:	18802126 	beq	r3,r2,5368 <__divdf3+0x8c4>
    52e4:	00801004 	movi	r2,64
    52e8:	10c5c83a 	sub	r2,r2,r3
    52ec:	8884983a 	sll	r2,r17,r2
    52f0:	1204b03a 	or	r2,r2,r8
    52f4:	1004c03a 	cmpne	r2,r2,zero
    52f8:	2084b03a 	or	r2,r4,r2
    52fc:	144001cc 	andi	r17,r2,7
    5300:	88000d1e 	bne	r17,zero,5338 <__divdf3+0x894>
    5304:	000b883a 	mov	r5,zero
    5308:	1024d0fa 	srli	r18,r2,3
    530c:	98c0004c 	andi	r3,r19,1
    5310:	0005883a 	mov	r2,zero
    5314:	9464b03a 	or	r18,r18,r17
    5318:	003e4106 	br	4c20 <__alt_data_end+0xff004c20>
    531c:	1007883a 	mov	r3,r2
    5320:	0023883a 	mov	r17,zero
    5324:	880a927a 	slli	r5,r17,9
    5328:	1805883a 	mov	r2,r3
    532c:	8822977a 	slli	r17,r17,29
    5330:	280ad33a 	srli	r5,r5,12
    5334:	003ff406 	br	5308 <__alt_data_end+0xff005308>
    5338:	10c003cc 	andi	r3,r2,15
    533c:	01000104 	movi	r4,4
    5340:	193ff626 	beq	r3,r4,531c <__alt_data_end+0xff00531c>
    5344:	0023883a 	mov	r17,zero
    5348:	003fca06 	br	5274 <__alt_data_end+0xff005274>
    534c:	813fd336 	bltu	r16,r4,529c <__alt_data_end+0xff00529c>
    5350:	1023883a 	mov	r17,r2
    5354:	003fa806 	br	51f8 <__alt_data_end+0xff0051f8>
    5358:	b0ffd636 	bltu	r22,r3,52b4 <__alt_data_end+0xff0052b4>
    535c:	1011883a 	mov	r8,r2
    5360:	b0ff341e 	bne	r22,r3,5034 <__alt_data_end+0xff005034>
    5364:	003f3406 	br	5038 <__alt_data_end+0xff005038>
    5368:	0005883a 	mov	r2,zero
    536c:	003fe006 	br	52f0 <__alt_data_end+0xff0052f0>
    5370:	00800434 	movhi	r2,16
    5374:	89400234 	orhi	r5,r17,8
    5378:	10bfffc4 	addi	r2,r2,-1
    537c:	b807883a 	mov	r3,r23
    5380:	288a703a 	and	r5,r5,r2
    5384:	4025883a 	mov	r18,r8
    5388:	003e8206 	br	4d94 <__alt_data_end+0xff004d94>

0000538c <__floatunsidf>:
    538c:	defffe04 	addi	sp,sp,-8
    5390:	dc000015 	stw	r16,0(sp)
    5394:	dfc00115 	stw	ra,4(sp)
    5398:	2021883a 	mov	r16,r4
    539c:	20002226 	beq	r4,zero,5428 <__floatunsidf+0x9c>
    53a0:	00054340 	call	5434 <__clzsi2>
    53a4:	01010784 	movi	r4,1054
    53a8:	2089c83a 	sub	r4,r4,r2
    53ac:	01810cc4 	movi	r6,1075
    53b0:	310dc83a 	sub	r6,r6,r4
    53b4:	00c007c4 	movi	r3,31
    53b8:	1980120e 	bge	r3,r6,5404 <__floatunsidf+0x78>
    53bc:	00c104c4 	movi	r3,1043
    53c0:	1907c83a 	sub	r3,r3,r4
    53c4:	80ca983a 	sll	r5,r16,r3
    53c8:	00800434 	movhi	r2,16
    53cc:	10bfffc4 	addi	r2,r2,-1
    53d0:	2101ffcc 	andi	r4,r4,2047
    53d4:	0021883a 	mov	r16,zero
    53d8:	288a703a 	and	r5,r5,r2
    53dc:	2008953a 	slli	r4,r4,20
    53e0:	00c00434 	movhi	r3,16
    53e4:	18ffffc4 	addi	r3,r3,-1
    53e8:	28c6703a 	and	r3,r5,r3
    53ec:	8005883a 	mov	r2,r16
    53f0:	1906b03a 	or	r3,r3,r4
    53f4:	dfc00117 	ldw	ra,4(sp)
    53f8:	dc000017 	ldw	r16,0(sp)
    53fc:	dec00204 	addi	sp,sp,8
    5400:	f800283a 	ret
    5404:	00c002c4 	movi	r3,11
    5408:	188bc83a 	sub	r5,r3,r2
    540c:	814ad83a 	srl	r5,r16,r5
    5410:	00c00434 	movhi	r3,16
    5414:	18ffffc4 	addi	r3,r3,-1
    5418:	81a0983a 	sll	r16,r16,r6
    541c:	2101ffcc 	andi	r4,r4,2047
    5420:	28ca703a 	and	r5,r5,r3
    5424:	003fed06 	br	53dc <__alt_data_end+0xff0053dc>
    5428:	0009883a 	mov	r4,zero
    542c:	000b883a 	mov	r5,zero
    5430:	003fea06 	br	53dc <__alt_data_end+0xff0053dc>

00005434 <__clzsi2>:
    5434:	00bfffd4 	movui	r2,65535
    5438:	11000536 	bltu	r2,r4,5450 <__clzsi2+0x1c>
    543c:	00803fc4 	movi	r2,255
    5440:	11000f36 	bltu	r2,r4,5480 <__clzsi2+0x4c>
    5444:	00800804 	movi	r2,32
    5448:	0007883a 	mov	r3,zero
    544c:	00000506 	br	5464 <__clzsi2+0x30>
    5450:	00804034 	movhi	r2,256
    5454:	10bfffc4 	addi	r2,r2,-1
    5458:	11000c2e 	bgeu	r2,r4,548c <__clzsi2+0x58>
    545c:	00800204 	movi	r2,8
    5460:	00c00604 	movi	r3,24
    5464:	20c8d83a 	srl	r4,r4,r3
    5468:	00c00074 	movhi	r3,1
    546c:	18d10e84 	addi	r3,r3,17466
    5470:	1909883a 	add	r4,r3,r4
    5474:	20c00003 	ldbu	r3,0(r4)
    5478:	10c5c83a 	sub	r2,r2,r3
    547c:	f800283a 	ret
    5480:	00800604 	movi	r2,24
    5484:	00c00204 	movi	r3,8
    5488:	003ff606 	br	5464 <__alt_data_end+0xff005464>
    548c:	00800404 	movi	r2,16
    5490:	1007883a 	mov	r3,r2
    5494:	003ff306 	br	5464 <__alt_data_end+0xff005464>

00005498 <malloc>:
    5498:	00800074 	movhi	r2,1
    549c:	1098ba04 	addi	r2,r2,25320
    54a0:	200b883a 	mov	r5,r4
    54a4:	11000017 	ldw	r4,0(r2)
    54a8:	00054c01 	jmpi	54c0 <_malloc_r>

000054ac <free>:
    54ac:	00800074 	movhi	r2,1
    54b0:	1098ba04 	addi	r2,r2,25320
    54b4:	200b883a 	mov	r5,r4
    54b8:	11000017 	ldw	r4,0(r2)
    54bc:	000a3101 	jmpi	a310 <_free_r>

000054c0 <_malloc_r>:
    54c0:	defff504 	addi	sp,sp,-44
    54c4:	dc800315 	stw	r18,12(sp)
    54c8:	dfc00a15 	stw	ra,40(sp)
    54cc:	df000915 	stw	fp,36(sp)
    54d0:	ddc00815 	stw	r23,32(sp)
    54d4:	dd800715 	stw	r22,28(sp)
    54d8:	dd400615 	stw	r21,24(sp)
    54dc:	dd000515 	stw	r20,20(sp)
    54e0:	dcc00415 	stw	r19,16(sp)
    54e4:	dc400215 	stw	r17,8(sp)
    54e8:	dc000115 	stw	r16,4(sp)
    54ec:	288002c4 	addi	r2,r5,11
    54f0:	00c00584 	movi	r3,22
    54f4:	2025883a 	mov	r18,r4
    54f8:	18807f2e 	bgeu	r3,r2,56f8 <_malloc_r+0x238>
    54fc:	047ffe04 	movi	r17,-8
    5500:	1462703a 	and	r17,r2,r17
    5504:	8800a316 	blt	r17,zero,5794 <_malloc_r+0x2d4>
    5508:	8940a236 	bltu	r17,r5,5794 <_malloc_r+0x2d4>
    550c:	001182c0 	call	1182c <__malloc_lock>
    5510:	00807dc4 	movi	r2,503
    5514:	1441e92e 	bgeu	r2,r17,5cbc <_malloc_r+0x7fc>
    5518:	8804d27a 	srli	r2,r17,9
    551c:	1000a126 	beq	r2,zero,57a4 <_malloc_r+0x2e4>
    5520:	00c00104 	movi	r3,4
    5524:	18811e36 	bltu	r3,r2,59a0 <_malloc_r+0x4e0>
    5528:	8804d1ba 	srli	r2,r17,6
    552c:	12000e44 	addi	r8,r2,57
    5530:	11c00e04 	addi	r7,r2,56
    5534:	4209883a 	add	r4,r8,r8
    5538:	04c00074 	movhi	r19,1
    553c:	2109883a 	add	r4,r4,r4
    5540:	9cd20c04 	addi	r19,r19,18480
    5544:	2109883a 	add	r4,r4,r4
    5548:	9909883a 	add	r4,r19,r4
    554c:	24000117 	ldw	r16,4(r4)
    5550:	213ffe04 	addi	r4,r4,-8
    5554:	24009726 	beq	r4,r16,57b4 <_malloc_r+0x2f4>
    5558:	80800117 	ldw	r2,4(r16)
    555c:	01bfff04 	movi	r6,-4
    5560:	014003c4 	movi	r5,15
    5564:	1184703a 	and	r2,r2,r6
    5568:	1447c83a 	sub	r3,r2,r17
    556c:	28c00716 	blt	r5,r3,558c <_malloc_r+0xcc>
    5570:	1800920e 	bge	r3,zero,57bc <_malloc_r+0x2fc>
    5574:	84000317 	ldw	r16,12(r16)
    5578:	24008e26 	beq	r4,r16,57b4 <_malloc_r+0x2f4>
    557c:	80800117 	ldw	r2,4(r16)
    5580:	1184703a 	and	r2,r2,r6
    5584:	1447c83a 	sub	r3,r2,r17
    5588:	28fff90e 	bge	r5,r3,5570 <__alt_data_end+0xff005570>
    558c:	3809883a 	mov	r4,r7
    5590:	01800074 	movhi	r6,1
    5594:	9c000417 	ldw	r16,16(r19)
    5598:	31920c04 	addi	r6,r6,18480
    559c:	32000204 	addi	r8,r6,8
    55a0:	82013426 	beq	r16,r8,5a74 <_malloc_r+0x5b4>
    55a4:	80c00117 	ldw	r3,4(r16)
    55a8:	00bfff04 	movi	r2,-4
    55ac:	188e703a 	and	r7,r3,r2
    55b0:	3c45c83a 	sub	r2,r7,r17
    55b4:	00c003c4 	movi	r3,15
    55b8:	18811f16 	blt	r3,r2,5a38 <_malloc_r+0x578>
    55bc:	32000515 	stw	r8,20(r6)
    55c0:	32000415 	stw	r8,16(r6)
    55c4:	10007f0e 	bge	r2,zero,57c4 <_malloc_r+0x304>
    55c8:	00807fc4 	movi	r2,511
    55cc:	11c0fd36 	bltu	r2,r7,59c4 <_malloc_r+0x504>
    55d0:	3806d0fa 	srli	r3,r7,3
    55d4:	01c00044 	movi	r7,1
    55d8:	30800117 	ldw	r2,4(r6)
    55dc:	19400044 	addi	r5,r3,1
    55e0:	294b883a 	add	r5,r5,r5
    55e4:	1807d0ba 	srai	r3,r3,2
    55e8:	294b883a 	add	r5,r5,r5
    55ec:	294b883a 	add	r5,r5,r5
    55f0:	298b883a 	add	r5,r5,r6
    55f4:	38c6983a 	sll	r3,r7,r3
    55f8:	29c00017 	ldw	r7,0(r5)
    55fc:	2a7ffe04 	addi	r9,r5,-8
    5600:	1886b03a 	or	r3,r3,r2
    5604:	82400315 	stw	r9,12(r16)
    5608:	81c00215 	stw	r7,8(r16)
    560c:	30c00115 	stw	r3,4(r6)
    5610:	2c000015 	stw	r16,0(r5)
    5614:	3c000315 	stw	r16,12(r7)
    5618:	2005d0ba 	srai	r2,r4,2
    561c:	01400044 	movi	r5,1
    5620:	288a983a 	sll	r5,r5,r2
    5624:	19406f36 	bltu	r3,r5,57e4 <_malloc_r+0x324>
    5628:	28c4703a 	and	r2,r5,r3
    562c:	10000a1e 	bne	r2,zero,5658 <_malloc_r+0x198>
    5630:	00bfff04 	movi	r2,-4
    5634:	294b883a 	add	r5,r5,r5
    5638:	2088703a 	and	r4,r4,r2
    563c:	28c4703a 	and	r2,r5,r3
    5640:	21000104 	addi	r4,r4,4
    5644:	1000041e 	bne	r2,zero,5658 <_malloc_r+0x198>
    5648:	294b883a 	add	r5,r5,r5
    564c:	28c4703a 	and	r2,r5,r3
    5650:	21000104 	addi	r4,r4,4
    5654:	103ffc26 	beq	r2,zero,5648 <__alt_data_end+0xff005648>
    5658:	02bfff04 	movi	r10,-4
    565c:	024003c4 	movi	r9,15
    5660:	21800044 	addi	r6,r4,1
    5664:	318d883a 	add	r6,r6,r6
    5668:	318d883a 	add	r6,r6,r6
    566c:	318d883a 	add	r6,r6,r6
    5670:	998d883a 	add	r6,r19,r6
    5674:	333ffe04 	addi	r12,r6,-8
    5678:	2017883a 	mov	r11,r4
    567c:	31800104 	addi	r6,r6,4
    5680:	34000017 	ldw	r16,0(r6)
    5684:	31fffd04 	addi	r7,r6,-12
    5688:	81c0041e 	bne	r16,r7,569c <_malloc_r+0x1dc>
    568c:	0000fb06 	br	5a7c <_malloc_r+0x5bc>
    5690:	1801030e 	bge	r3,zero,5aa0 <_malloc_r+0x5e0>
    5694:	84000317 	ldw	r16,12(r16)
    5698:	81c0f826 	beq	r16,r7,5a7c <_malloc_r+0x5bc>
    569c:	80800117 	ldw	r2,4(r16)
    56a0:	1284703a 	and	r2,r2,r10
    56a4:	1447c83a 	sub	r3,r2,r17
    56a8:	48fff90e 	bge	r9,r3,5690 <__alt_data_end+0xff005690>
    56ac:	80800317 	ldw	r2,12(r16)
    56b0:	81000217 	ldw	r4,8(r16)
    56b4:	89400054 	ori	r5,r17,1
    56b8:	81400115 	stw	r5,4(r16)
    56bc:	20800315 	stw	r2,12(r4)
    56c0:	11000215 	stw	r4,8(r2)
    56c4:	8463883a 	add	r17,r16,r17
    56c8:	9c400515 	stw	r17,20(r19)
    56cc:	9c400415 	stw	r17,16(r19)
    56d0:	18800054 	ori	r2,r3,1
    56d4:	88800115 	stw	r2,4(r17)
    56d8:	8a000315 	stw	r8,12(r17)
    56dc:	8a000215 	stw	r8,8(r17)
    56e0:	88e3883a 	add	r17,r17,r3
    56e4:	88c00015 	stw	r3,0(r17)
    56e8:	9009883a 	mov	r4,r18
    56ec:	00118500 	call	11850 <__malloc_unlock>
    56f0:	80800204 	addi	r2,r16,8
    56f4:	00001b06 	br	5764 <_malloc_r+0x2a4>
    56f8:	04400404 	movi	r17,16
    56fc:	89402536 	bltu	r17,r5,5794 <_malloc_r+0x2d4>
    5700:	001182c0 	call	1182c <__malloc_lock>
    5704:	00800184 	movi	r2,6
    5708:	01000084 	movi	r4,2
    570c:	04c00074 	movhi	r19,1
    5710:	1085883a 	add	r2,r2,r2
    5714:	9cd20c04 	addi	r19,r19,18480
    5718:	1085883a 	add	r2,r2,r2
    571c:	9885883a 	add	r2,r19,r2
    5720:	14000117 	ldw	r16,4(r2)
    5724:	10fffe04 	addi	r3,r2,-8
    5728:	80c0d926 	beq	r16,r3,5a90 <_malloc_r+0x5d0>
    572c:	80c00117 	ldw	r3,4(r16)
    5730:	81000317 	ldw	r4,12(r16)
    5734:	00bfff04 	movi	r2,-4
    5738:	1884703a 	and	r2,r3,r2
    573c:	81400217 	ldw	r5,8(r16)
    5740:	8085883a 	add	r2,r16,r2
    5744:	10c00117 	ldw	r3,4(r2)
    5748:	29000315 	stw	r4,12(r5)
    574c:	21400215 	stw	r5,8(r4)
    5750:	18c00054 	ori	r3,r3,1
    5754:	10c00115 	stw	r3,4(r2)
    5758:	9009883a 	mov	r4,r18
    575c:	00118500 	call	11850 <__malloc_unlock>
    5760:	80800204 	addi	r2,r16,8
    5764:	dfc00a17 	ldw	ra,40(sp)
    5768:	df000917 	ldw	fp,36(sp)
    576c:	ddc00817 	ldw	r23,32(sp)
    5770:	dd800717 	ldw	r22,28(sp)
    5774:	dd400617 	ldw	r21,24(sp)
    5778:	dd000517 	ldw	r20,20(sp)
    577c:	dcc00417 	ldw	r19,16(sp)
    5780:	dc800317 	ldw	r18,12(sp)
    5784:	dc400217 	ldw	r17,8(sp)
    5788:	dc000117 	ldw	r16,4(sp)
    578c:	dec00b04 	addi	sp,sp,44
    5790:	f800283a 	ret
    5794:	00800304 	movi	r2,12
    5798:	90800015 	stw	r2,0(r18)
    579c:	0005883a 	mov	r2,zero
    57a0:	003ff006 	br	5764 <__alt_data_end+0xff005764>
    57a4:	01002004 	movi	r4,128
    57a8:	02001004 	movi	r8,64
    57ac:	01c00fc4 	movi	r7,63
    57b0:	003f6106 	br	5538 <__alt_data_end+0xff005538>
    57b4:	4009883a 	mov	r4,r8
    57b8:	003f7506 	br	5590 <__alt_data_end+0xff005590>
    57bc:	81000317 	ldw	r4,12(r16)
    57c0:	003fde06 	br	573c <__alt_data_end+0xff00573c>
    57c4:	81c5883a 	add	r2,r16,r7
    57c8:	11400117 	ldw	r5,4(r2)
    57cc:	9009883a 	mov	r4,r18
    57d0:	29400054 	ori	r5,r5,1
    57d4:	11400115 	stw	r5,4(r2)
    57d8:	00118500 	call	11850 <__malloc_unlock>
    57dc:	80800204 	addi	r2,r16,8
    57e0:	003fe006 	br	5764 <__alt_data_end+0xff005764>
    57e4:	9c000217 	ldw	r16,8(r19)
    57e8:	00bfff04 	movi	r2,-4
    57ec:	85800117 	ldw	r22,4(r16)
    57f0:	b0ac703a 	and	r22,r22,r2
    57f4:	b4400336 	bltu	r22,r17,5804 <_malloc_r+0x344>
    57f8:	b445c83a 	sub	r2,r22,r17
    57fc:	00c003c4 	movi	r3,15
    5800:	18805d16 	blt	r3,r2,5978 <_malloc_r+0x4b8>
    5804:	05c00074 	movhi	r23,1
    5808:	00800074 	movhi	r2,1
    580c:	109fe104 	addi	r2,r2,32644
    5810:	bdd8b704 	addi	r23,r23,25308
    5814:	15400017 	ldw	r21,0(r2)
    5818:	b8c00017 	ldw	r3,0(r23)
    581c:	00bfffc4 	movi	r2,-1
    5820:	858d883a 	add	r6,r16,r22
    5824:	8d6b883a 	add	r21,r17,r21
    5828:	1880ea26 	beq	r3,r2,5bd4 <_malloc_r+0x714>
    582c:	ad4403c4 	addi	r21,r21,4111
    5830:	00bc0004 	movi	r2,-4096
    5834:	a8aa703a 	and	r21,r21,r2
    5838:	a80b883a 	mov	r5,r21
    583c:	9009883a 	mov	r4,r18
    5840:	d9800015 	stw	r6,0(sp)
    5844:	0005e0c0 	call	5e0c <_sbrk_r>
    5848:	1029883a 	mov	r20,r2
    584c:	00bfffc4 	movi	r2,-1
    5850:	d9800017 	ldw	r6,0(sp)
    5854:	a080e826 	beq	r20,r2,5bf8 <_malloc_r+0x738>
    5858:	a180a636 	bltu	r20,r6,5af4 <_malloc_r+0x634>
    585c:	07000074 	movhi	fp,1
    5860:	e71fef04 	addi	fp,fp,32700
    5864:	e0800017 	ldw	r2,0(fp)
    5868:	a887883a 	add	r3,r21,r2
    586c:	e0c00015 	stw	r3,0(fp)
    5870:	3500e626 	beq	r6,r20,5c0c <_malloc_r+0x74c>
    5874:	b9000017 	ldw	r4,0(r23)
    5878:	00bfffc4 	movi	r2,-1
    587c:	2080ee26 	beq	r4,r2,5c38 <_malloc_r+0x778>
    5880:	a185c83a 	sub	r2,r20,r6
    5884:	10c5883a 	add	r2,r2,r3
    5888:	e0800015 	stw	r2,0(fp)
    588c:	a0c001cc 	andi	r3,r20,7
    5890:	1800bc26 	beq	r3,zero,5b84 <_malloc_r+0x6c4>
    5894:	a0e9c83a 	sub	r20,r20,r3
    5898:	00840204 	movi	r2,4104
    589c:	a5000204 	addi	r20,r20,8
    58a0:	10c7c83a 	sub	r3,r2,r3
    58a4:	a545883a 	add	r2,r20,r21
    58a8:	1083ffcc 	andi	r2,r2,4095
    58ac:	18abc83a 	sub	r21,r3,r2
    58b0:	a80b883a 	mov	r5,r21
    58b4:	9009883a 	mov	r4,r18
    58b8:	0005e0c0 	call	5e0c <_sbrk_r>
    58bc:	00ffffc4 	movi	r3,-1
    58c0:	10c0e126 	beq	r2,r3,5c48 <_malloc_r+0x788>
    58c4:	1505c83a 	sub	r2,r2,r20
    58c8:	1545883a 	add	r2,r2,r21
    58cc:	10800054 	ori	r2,r2,1
    58d0:	e0c00017 	ldw	r3,0(fp)
    58d4:	9d000215 	stw	r20,8(r19)
    58d8:	a0800115 	stw	r2,4(r20)
    58dc:	a8c7883a 	add	r3,r21,r3
    58e0:	e0c00015 	stw	r3,0(fp)
    58e4:	84c00e26 	beq	r16,r19,5920 <_malloc_r+0x460>
    58e8:	018003c4 	movi	r6,15
    58ec:	3580a72e 	bgeu	r6,r22,5b8c <_malloc_r+0x6cc>
    58f0:	81400117 	ldw	r5,4(r16)
    58f4:	013ffe04 	movi	r4,-8
    58f8:	b0bffd04 	addi	r2,r22,-12
    58fc:	1104703a 	and	r2,r2,r4
    5900:	2900004c 	andi	r4,r5,1
    5904:	2088b03a 	or	r4,r4,r2
    5908:	81000115 	stw	r4,4(r16)
    590c:	01400144 	movi	r5,5
    5910:	8089883a 	add	r4,r16,r2
    5914:	21400115 	stw	r5,4(r4)
    5918:	21400215 	stw	r5,8(r4)
    591c:	3080cd36 	bltu	r6,r2,5c54 <_malloc_r+0x794>
    5920:	00800074 	movhi	r2,1
    5924:	109fe004 	addi	r2,r2,32640
    5928:	11000017 	ldw	r4,0(r2)
    592c:	20c0012e 	bgeu	r4,r3,5934 <_malloc_r+0x474>
    5930:	10c00015 	stw	r3,0(r2)
    5934:	00800074 	movhi	r2,1
    5938:	109fdf04 	addi	r2,r2,32636
    593c:	11000017 	ldw	r4,0(r2)
    5940:	9c000217 	ldw	r16,8(r19)
    5944:	20c0012e 	bgeu	r4,r3,594c <_malloc_r+0x48c>
    5948:	10c00015 	stw	r3,0(r2)
    594c:	80c00117 	ldw	r3,4(r16)
    5950:	00bfff04 	movi	r2,-4
    5954:	1886703a 	and	r3,r3,r2
    5958:	1c45c83a 	sub	r2,r3,r17
    595c:	1c400236 	bltu	r3,r17,5968 <_malloc_r+0x4a8>
    5960:	00c003c4 	movi	r3,15
    5964:	18800416 	blt	r3,r2,5978 <_malloc_r+0x4b8>
    5968:	9009883a 	mov	r4,r18
    596c:	00118500 	call	11850 <__malloc_unlock>
    5970:	0005883a 	mov	r2,zero
    5974:	003f7b06 	br	5764 <__alt_data_end+0xff005764>
    5978:	88c00054 	ori	r3,r17,1
    597c:	80c00115 	stw	r3,4(r16)
    5980:	8463883a 	add	r17,r16,r17
    5984:	10800054 	ori	r2,r2,1
    5988:	9c400215 	stw	r17,8(r19)
    598c:	88800115 	stw	r2,4(r17)
    5990:	9009883a 	mov	r4,r18
    5994:	00118500 	call	11850 <__malloc_unlock>
    5998:	80800204 	addi	r2,r16,8
    599c:	003f7106 	br	5764 <__alt_data_end+0xff005764>
    59a0:	00c00504 	movi	r3,20
    59a4:	18804a2e 	bgeu	r3,r2,5ad0 <_malloc_r+0x610>
    59a8:	00c01504 	movi	r3,84
    59ac:	18806e36 	bltu	r3,r2,5b68 <_malloc_r+0x6a8>
    59b0:	8804d33a 	srli	r2,r17,12
    59b4:	12001bc4 	addi	r8,r2,111
    59b8:	11c01b84 	addi	r7,r2,110
    59bc:	4209883a 	add	r4,r8,r8
    59c0:	003edd06 	br	5538 <__alt_data_end+0xff005538>
    59c4:	3804d27a 	srli	r2,r7,9
    59c8:	00c00104 	movi	r3,4
    59cc:	1880442e 	bgeu	r3,r2,5ae0 <_malloc_r+0x620>
    59d0:	00c00504 	movi	r3,20
    59d4:	18808136 	bltu	r3,r2,5bdc <_malloc_r+0x71c>
    59d8:	11401704 	addi	r5,r2,92
    59dc:	10c016c4 	addi	r3,r2,91
    59e0:	294b883a 	add	r5,r5,r5
    59e4:	294b883a 	add	r5,r5,r5
    59e8:	294b883a 	add	r5,r5,r5
    59ec:	994b883a 	add	r5,r19,r5
    59f0:	28800017 	ldw	r2,0(r5)
    59f4:	01800074 	movhi	r6,1
    59f8:	297ffe04 	addi	r5,r5,-8
    59fc:	31920c04 	addi	r6,r6,18480
    5a00:	28806526 	beq	r5,r2,5b98 <_malloc_r+0x6d8>
    5a04:	01bfff04 	movi	r6,-4
    5a08:	10c00117 	ldw	r3,4(r2)
    5a0c:	1986703a 	and	r3,r3,r6
    5a10:	38c0022e 	bgeu	r7,r3,5a1c <_malloc_r+0x55c>
    5a14:	10800217 	ldw	r2,8(r2)
    5a18:	28bffb1e 	bne	r5,r2,5a08 <__alt_data_end+0xff005a08>
    5a1c:	11400317 	ldw	r5,12(r2)
    5a20:	98c00117 	ldw	r3,4(r19)
    5a24:	81400315 	stw	r5,12(r16)
    5a28:	80800215 	stw	r2,8(r16)
    5a2c:	2c000215 	stw	r16,8(r5)
    5a30:	14000315 	stw	r16,12(r2)
    5a34:	003ef806 	br	5618 <__alt_data_end+0xff005618>
    5a38:	88c00054 	ori	r3,r17,1
    5a3c:	80c00115 	stw	r3,4(r16)
    5a40:	8463883a 	add	r17,r16,r17
    5a44:	34400515 	stw	r17,20(r6)
    5a48:	34400415 	stw	r17,16(r6)
    5a4c:	10c00054 	ori	r3,r2,1
    5a50:	8a000315 	stw	r8,12(r17)
    5a54:	8a000215 	stw	r8,8(r17)
    5a58:	88c00115 	stw	r3,4(r17)
    5a5c:	88a3883a 	add	r17,r17,r2
    5a60:	88800015 	stw	r2,0(r17)
    5a64:	9009883a 	mov	r4,r18
    5a68:	00118500 	call	11850 <__malloc_unlock>
    5a6c:	80800204 	addi	r2,r16,8
    5a70:	003f3c06 	br	5764 <__alt_data_end+0xff005764>
    5a74:	30c00117 	ldw	r3,4(r6)
    5a78:	003ee706 	br	5618 <__alt_data_end+0xff005618>
    5a7c:	5ac00044 	addi	r11,r11,1
    5a80:	588000cc 	andi	r2,r11,3
    5a84:	31800204 	addi	r6,r6,8
    5a88:	103efd1e 	bne	r2,zero,5680 <__alt_data_end+0xff005680>
    5a8c:	00002406 	br	5b20 <_malloc_r+0x660>
    5a90:	14000317 	ldw	r16,12(r2)
    5a94:	143f251e 	bne	r2,r16,572c <__alt_data_end+0xff00572c>
    5a98:	21000084 	addi	r4,r4,2
    5a9c:	003ebc06 	br	5590 <__alt_data_end+0xff005590>
    5aa0:	8085883a 	add	r2,r16,r2
    5aa4:	10c00117 	ldw	r3,4(r2)
    5aa8:	81000317 	ldw	r4,12(r16)
    5aac:	81400217 	ldw	r5,8(r16)
    5ab0:	18c00054 	ori	r3,r3,1
    5ab4:	10c00115 	stw	r3,4(r2)
    5ab8:	29000315 	stw	r4,12(r5)
    5abc:	21400215 	stw	r5,8(r4)
    5ac0:	9009883a 	mov	r4,r18
    5ac4:	00118500 	call	11850 <__malloc_unlock>
    5ac8:	80800204 	addi	r2,r16,8
    5acc:	003f2506 	br	5764 <__alt_data_end+0xff005764>
    5ad0:	12001704 	addi	r8,r2,92
    5ad4:	11c016c4 	addi	r7,r2,91
    5ad8:	4209883a 	add	r4,r8,r8
    5adc:	003e9606 	br	5538 <__alt_data_end+0xff005538>
    5ae0:	3804d1ba 	srli	r2,r7,6
    5ae4:	11400e44 	addi	r5,r2,57
    5ae8:	10c00e04 	addi	r3,r2,56
    5aec:	294b883a 	add	r5,r5,r5
    5af0:	003fbc06 	br	59e4 <__alt_data_end+0xff0059e4>
    5af4:	84ff5926 	beq	r16,r19,585c <__alt_data_end+0xff00585c>
    5af8:	00800074 	movhi	r2,1
    5afc:	10920c04 	addi	r2,r2,18480
    5b00:	14000217 	ldw	r16,8(r2)
    5b04:	00bfff04 	movi	r2,-4
    5b08:	80c00117 	ldw	r3,4(r16)
    5b0c:	1886703a 	and	r3,r3,r2
    5b10:	003f9106 	br	5958 <__alt_data_end+0xff005958>
    5b14:	60800217 	ldw	r2,8(r12)
    5b18:	213fffc4 	addi	r4,r4,-1
    5b1c:	1300651e 	bne	r2,r12,5cb4 <_malloc_r+0x7f4>
    5b20:	208000cc 	andi	r2,r4,3
    5b24:	633ffe04 	addi	r12,r12,-8
    5b28:	103ffa1e 	bne	r2,zero,5b14 <__alt_data_end+0xff005b14>
    5b2c:	98800117 	ldw	r2,4(r19)
    5b30:	0146303a 	nor	r3,zero,r5
    5b34:	1884703a 	and	r2,r3,r2
    5b38:	98800115 	stw	r2,4(r19)
    5b3c:	294b883a 	add	r5,r5,r5
    5b40:	117f2836 	bltu	r2,r5,57e4 <__alt_data_end+0xff0057e4>
    5b44:	283f2726 	beq	r5,zero,57e4 <__alt_data_end+0xff0057e4>
    5b48:	2886703a 	and	r3,r5,r2
    5b4c:	5809883a 	mov	r4,r11
    5b50:	183ec31e 	bne	r3,zero,5660 <__alt_data_end+0xff005660>
    5b54:	294b883a 	add	r5,r5,r5
    5b58:	2886703a 	and	r3,r5,r2
    5b5c:	21000104 	addi	r4,r4,4
    5b60:	183ffc26 	beq	r3,zero,5b54 <__alt_data_end+0xff005b54>
    5b64:	003ebe06 	br	5660 <__alt_data_end+0xff005660>
    5b68:	00c05504 	movi	r3,340
    5b6c:	18801236 	bltu	r3,r2,5bb8 <_malloc_r+0x6f8>
    5b70:	8804d3fa 	srli	r2,r17,15
    5b74:	12001e04 	addi	r8,r2,120
    5b78:	11c01dc4 	addi	r7,r2,119
    5b7c:	4209883a 	add	r4,r8,r8
    5b80:	003e6d06 	br	5538 <__alt_data_end+0xff005538>
    5b84:	00c40004 	movi	r3,4096
    5b88:	003f4606 	br	58a4 <__alt_data_end+0xff0058a4>
    5b8c:	00800044 	movi	r2,1
    5b90:	a0800115 	stw	r2,4(r20)
    5b94:	003f7406 	br	5968 <__alt_data_end+0xff005968>
    5b98:	1805d0ba 	srai	r2,r3,2
    5b9c:	01c00044 	movi	r7,1
    5ba0:	30c00117 	ldw	r3,4(r6)
    5ba4:	388e983a 	sll	r7,r7,r2
    5ba8:	2805883a 	mov	r2,r5
    5bac:	38c6b03a 	or	r3,r7,r3
    5bb0:	30c00115 	stw	r3,4(r6)
    5bb4:	003f9b06 	br	5a24 <__alt_data_end+0xff005a24>
    5bb8:	00c15504 	movi	r3,1364
    5bbc:	18801a36 	bltu	r3,r2,5c28 <_malloc_r+0x768>
    5bc0:	8804d4ba 	srli	r2,r17,18
    5bc4:	12001f44 	addi	r8,r2,125
    5bc8:	11c01f04 	addi	r7,r2,124
    5bcc:	4209883a 	add	r4,r8,r8
    5bd0:	003e5906 	br	5538 <__alt_data_end+0xff005538>
    5bd4:	ad400404 	addi	r21,r21,16
    5bd8:	003f1706 	br	5838 <__alt_data_end+0xff005838>
    5bdc:	00c01504 	movi	r3,84
    5be0:	18802336 	bltu	r3,r2,5c70 <_malloc_r+0x7b0>
    5be4:	3804d33a 	srli	r2,r7,12
    5be8:	11401bc4 	addi	r5,r2,111
    5bec:	10c01b84 	addi	r3,r2,110
    5bf0:	294b883a 	add	r5,r5,r5
    5bf4:	003f7b06 	br	59e4 <__alt_data_end+0xff0059e4>
    5bf8:	9c000217 	ldw	r16,8(r19)
    5bfc:	00bfff04 	movi	r2,-4
    5c00:	80c00117 	ldw	r3,4(r16)
    5c04:	1886703a 	and	r3,r3,r2
    5c08:	003f5306 	br	5958 <__alt_data_end+0xff005958>
    5c0c:	3083ffcc 	andi	r2,r6,4095
    5c10:	103f181e 	bne	r2,zero,5874 <__alt_data_end+0xff005874>
    5c14:	99000217 	ldw	r4,8(r19)
    5c18:	b545883a 	add	r2,r22,r21
    5c1c:	10800054 	ori	r2,r2,1
    5c20:	20800115 	stw	r2,4(r4)
    5c24:	003f3e06 	br	5920 <__alt_data_end+0xff005920>
    5c28:	01003f84 	movi	r4,254
    5c2c:	02001fc4 	movi	r8,127
    5c30:	01c01f84 	movi	r7,126
    5c34:	003e4006 	br	5538 <__alt_data_end+0xff005538>
    5c38:	00800074 	movhi	r2,1
    5c3c:	1098b704 	addi	r2,r2,25308
    5c40:	15000015 	stw	r20,0(r2)
    5c44:	003f1106 	br	588c <__alt_data_end+0xff00588c>
    5c48:	00800044 	movi	r2,1
    5c4c:	002b883a 	mov	r21,zero
    5c50:	003f1f06 	br	58d0 <__alt_data_end+0xff0058d0>
    5c54:	81400204 	addi	r5,r16,8
    5c58:	9009883a 	mov	r4,r18
    5c5c:	000a3100 	call	a310 <_free_r>
    5c60:	00800074 	movhi	r2,1
    5c64:	109fef04 	addi	r2,r2,32700
    5c68:	10c00017 	ldw	r3,0(r2)
    5c6c:	003f2c06 	br	5920 <__alt_data_end+0xff005920>
    5c70:	00c05504 	movi	r3,340
    5c74:	18800536 	bltu	r3,r2,5c8c <_malloc_r+0x7cc>
    5c78:	3804d3fa 	srli	r2,r7,15
    5c7c:	11401e04 	addi	r5,r2,120
    5c80:	10c01dc4 	addi	r3,r2,119
    5c84:	294b883a 	add	r5,r5,r5
    5c88:	003f5606 	br	59e4 <__alt_data_end+0xff0059e4>
    5c8c:	00c15504 	movi	r3,1364
    5c90:	18800536 	bltu	r3,r2,5ca8 <_malloc_r+0x7e8>
    5c94:	3804d4ba 	srli	r2,r7,18
    5c98:	11401f44 	addi	r5,r2,125
    5c9c:	10c01f04 	addi	r3,r2,124
    5ca0:	294b883a 	add	r5,r5,r5
    5ca4:	003f4f06 	br	59e4 <__alt_data_end+0xff0059e4>
    5ca8:	01403f84 	movi	r5,254
    5cac:	00c01f84 	movi	r3,126
    5cb0:	003f4c06 	br	59e4 <__alt_data_end+0xff0059e4>
    5cb4:	98800117 	ldw	r2,4(r19)
    5cb8:	003fa006 	br	5b3c <__alt_data_end+0xff005b3c>
    5cbc:	8808d0fa 	srli	r4,r17,3
    5cc0:	20800044 	addi	r2,r4,1
    5cc4:	1085883a 	add	r2,r2,r2
    5cc8:	003e9006 	br	570c <__alt_data_end+0xff00570c>

00005ccc <_printf_r>:
    5ccc:	defffd04 	addi	sp,sp,-12
    5cd0:	2805883a 	mov	r2,r5
    5cd4:	dfc00015 	stw	ra,0(sp)
    5cd8:	d9800115 	stw	r6,4(sp)
    5cdc:	d9c00215 	stw	r7,8(sp)
    5ce0:	21400217 	ldw	r5,8(r4)
    5ce4:	d9c00104 	addi	r7,sp,4
    5ce8:	100d883a 	mov	r6,r2
    5cec:	0005ef80 	call	5ef8 <___vfprintf_internal_r>
    5cf0:	dfc00017 	ldw	ra,0(sp)
    5cf4:	dec00304 	addi	sp,sp,12
    5cf8:	f800283a 	ret

00005cfc <printf>:
    5cfc:	defffc04 	addi	sp,sp,-16
    5d00:	dfc00015 	stw	ra,0(sp)
    5d04:	d9400115 	stw	r5,4(sp)
    5d08:	d9800215 	stw	r6,8(sp)
    5d0c:	d9c00315 	stw	r7,12(sp)
    5d10:	00800074 	movhi	r2,1
    5d14:	1098ba04 	addi	r2,r2,25320
    5d18:	10800017 	ldw	r2,0(r2)
    5d1c:	200b883a 	mov	r5,r4
    5d20:	d9800104 	addi	r6,sp,4
    5d24:	11000217 	ldw	r4,8(r2)
    5d28:	00080f00 	call	80f0 <__vfprintf_internal>
    5d2c:	dfc00017 	ldw	ra,0(sp)
    5d30:	dec00404 	addi	sp,sp,16
    5d34:	f800283a 	ret

00005d38 <_puts_r>:
    5d38:	defff604 	addi	sp,sp,-40
    5d3c:	dc000715 	stw	r16,28(sp)
    5d40:	2021883a 	mov	r16,r4
    5d44:	2809883a 	mov	r4,r5
    5d48:	dc400815 	stw	r17,32(sp)
    5d4c:	dfc00915 	stw	ra,36(sp)
    5d50:	2823883a 	mov	r17,r5
    5d54:	0005e600 	call	5e60 <strlen>
    5d58:	10c00044 	addi	r3,r2,1
    5d5c:	d8800115 	stw	r2,4(sp)
    5d60:	00800074 	movhi	r2,1
    5d64:	1090fd04 	addi	r2,r2,17396
    5d68:	d8800215 	stw	r2,8(sp)
    5d6c:	00800044 	movi	r2,1
    5d70:	d8800315 	stw	r2,12(sp)
    5d74:	00800084 	movi	r2,2
    5d78:	dc400015 	stw	r17,0(sp)
    5d7c:	d8c00615 	stw	r3,24(sp)
    5d80:	dec00415 	stw	sp,16(sp)
    5d84:	d8800515 	stw	r2,20(sp)
    5d88:	80000226 	beq	r16,zero,5d94 <_puts_r+0x5c>
    5d8c:	80800e17 	ldw	r2,56(r16)
    5d90:	10001426 	beq	r2,zero,5de4 <_puts_r+0xac>
    5d94:	81400217 	ldw	r5,8(r16)
    5d98:	2880030b 	ldhu	r2,12(r5)
    5d9c:	10c8000c 	andi	r3,r2,8192
    5da0:	1800061e 	bne	r3,zero,5dbc <_puts_r+0x84>
    5da4:	29001917 	ldw	r4,100(r5)
    5da8:	00f7ffc4 	movi	r3,-8193
    5dac:	10880014 	ori	r2,r2,8192
    5db0:	20c6703a 	and	r3,r4,r3
    5db4:	2880030d 	sth	r2,12(r5)
    5db8:	28c01915 	stw	r3,100(r5)
    5dbc:	d9800404 	addi	r6,sp,16
    5dc0:	8009883a 	mov	r4,r16
    5dc4:	000a6200 	call	a620 <__sfvwrite_r>
    5dc8:	1000091e 	bne	r2,zero,5df0 <_puts_r+0xb8>
    5dcc:	00800284 	movi	r2,10
    5dd0:	dfc00917 	ldw	ra,36(sp)
    5dd4:	dc400817 	ldw	r17,32(sp)
    5dd8:	dc000717 	ldw	r16,28(sp)
    5ddc:	dec00a04 	addi	sp,sp,40
    5de0:	f800283a 	ret
    5de4:	8009883a 	mov	r4,r16
    5de8:	000a19c0 	call	a19c <__sinit>
    5dec:	003fe906 	br	5d94 <__alt_data_end+0xff005d94>
    5df0:	00bfffc4 	movi	r2,-1
    5df4:	003ff606 	br	5dd0 <__alt_data_end+0xff005dd0>

00005df8 <puts>:
    5df8:	00800074 	movhi	r2,1
    5dfc:	1098ba04 	addi	r2,r2,25320
    5e00:	200b883a 	mov	r5,r4
    5e04:	11000017 	ldw	r4,0(r2)
    5e08:	0005d381 	jmpi	5d38 <_puts_r>

00005e0c <_sbrk_r>:
    5e0c:	defffd04 	addi	sp,sp,-12
    5e10:	dc000015 	stw	r16,0(sp)
    5e14:	04000074 	movhi	r16,1
    5e18:	dc400115 	stw	r17,4(sp)
    5e1c:	841fe204 	addi	r16,r16,32648
    5e20:	2023883a 	mov	r17,r4
    5e24:	2809883a 	mov	r4,r5
    5e28:	dfc00215 	stw	ra,8(sp)
    5e2c:	80000015 	stw	zero,0(r16)
    5e30:	0011a440 	call	11a44 <sbrk>
    5e34:	00ffffc4 	movi	r3,-1
    5e38:	10c00526 	beq	r2,r3,5e50 <_sbrk_r+0x44>
    5e3c:	dfc00217 	ldw	ra,8(sp)
    5e40:	dc400117 	ldw	r17,4(sp)
    5e44:	dc000017 	ldw	r16,0(sp)
    5e48:	dec00304 	addi	sp,sp,12
    5e4c:	f800283a 	ret
    5e50:	80c00017 	ldw	r3,0(r16)
    5e54:	183ff926 	beq	r3,zero,5e3c <__alt_data_end+0xff005e3c>
    5e58:	88c00015 	stw	r3,0(r17)
    5e5c:	003ff706 	br	5e3c <__alt_data_end+0xff005e3c>

00005e60 <strlen>:
    5e60:	208000cc 	andi	r2,r4,3
    5e64:	10002026 	beq	r2,zero,5ee8 <strlen+0x88>
    5e68:	20800007 	ldb	r2,0(r4)
    5e6c:	10002026 	beq	r2,zero,5ef0 <strlen+0x90>
    5e70:	2005883a 	mov	r2,r4
    5e74:	00000206 	br	5e80 <strlen+0x20>
    5e78:	10c00007 	ldb	r3,0(r2)
    5e7c:	18001826 	beq	r3,zero,5ee0 <strlen+0x80>
    5e80:	10800044 	addi	r2,r2,1
    5e84:	10c000cc 	andi	r3,r2,3
    5e88:	183ffb1e 	bne	r3,zero,5e78 <__alt_data_end+0xff005e78>
    5e8c:	10c00017 	ldw	r3,0(r2)
    5e90:	01ffbff4 	movhi	r7,65279
    5e94:	39ffbfc4 	addi	r7,r7,-257
    5e98:	00ca303a 	nor	r5,zero,r3
    5e9c:	01a02074 	movhi	r6,32897
    5ea0:	19c7883a 	add	r3,r3,r7
    5ea4:	31a02004 	addi	r6,r6,-32640
    5ea8:	1946703a 	and	r3,r3,r5
    5eac:	1986703a 	and	r3,r3,r6
    5eb0:	1800091e 	bne	r3,zero,5ed8 <strlen+0x78>
    5eb4:	10800104 	addi	r2,r2,4
    5eb8:	10c00017 	ldw	r3,0(r2)
    5ebc:	19cb883a 	add	r5,r3,r7
    5ec0:	00c6303a 	nor	r3,zero,r3
    5ec4:	28c6703a 	and	r3,r5,r3
    5ec8:	1986703a 	and	r3,r3,r6
    5ecc:	183ff926 	beq	r3,zero,5eb4 <__alt_data_end+0xff005eb4>
    5ed0:	00000106 	br	5ed8 <strlen+0x78>
    5ed4:	10800044 	addi	r2,r2,1
    5ed8:	10c00007 	ldb	r3,0(r2)
    5edc:	183ffd1e 	bne	r3,zero,5ed4 <__alt_data_end+0xff005ed4>
    5ee0:	1105c83a 	sub	r2,r2,r4
    5ee4:	f800283a 	ret
    5ee8:	2005883a 	mov	r2,r4
    5eec:	003fe706 	br	5e8c <__alt_data_end+0xff005e8c>
    5ef0:	0005883a 	mov	r2,zero
    5ef4:	f800283a 	ret

00005ef8 <___vfprintf_internal_r>:
    5ef8:	deffb804 	addi	sp,sp,-288
    5efc:	dfc04715 	stw	ra,284(sp)
    5f00:	ddc04515 	stw	r23,276(sp)
    5f04:	dd404315 	stw	r21,268(sp)
    5f08:	d9002c15 	stw	r4,176(sp)
    5f0c:	282f883a 	mov	r23,r5
    5f10:	302b883a 	mov	r21,r6
    5f14:	d9c02d15 	stw	r7,180(sp)
    5f18:	df004615 	stw	fp,280(sp)
    5f1c:	dd804415 	stw	r22,272(sp)
    5f20:	dd004215 	stw	r20,264(sp)
    5f24:	dcc04115 	stw	r19,260(sp)
    5f28:	dc804015 	stw	r18,256(sp)
    5f2c:	dc403f15 	stw	r17,252(sp)
    5f30:	dc003e15 	stw	r16,248(sp)
    5f34:	000ad100 	call	ad10 <_localeconv_r>
    5f38:	10800017 	ldw	r2,0(r2)
    5f3c:	1009883a 	mov	r4,r2
    5f40:	d8803415 	stw	r2,208(sp)
    5f44:	0005e600 	call	5e60 <strlen>
    5f48:	d8803715 	stw	r2,220(sp)
    5f4c:	d8802c17 	ldw	r2,176(sp)
    5f50:	10000226 	beq	r2,zero,5f5c <___vfprintf_internal_r+0x64>
    5f54:	10800e17 	ldw	r2,56(r2)
    5f58:	1000f926 	beq	r2,zero,6340 <___vfprintf_internal_r+0x448>
    5f5c:	b880030b 	ldhu	r2,12(r23)
    5f60:	10c8000c 	andi	r3,r2,8192
    5f64:	1800061e 	bne	r3,zero,5f80 <___vfprintf_internal_r+0x88>
    5f68:	b9001917 	ldw	r4,100(r23)
    5f6c:	00f7ffc4 	movi	r3,-8193
    5f70:	10880014 	ori	r2,r2,8192
    5f74:	20c6703a 	and	r3,r4,r3
    5f78:	b880030d 	sth	r2,12(r23)
    5f7c:	b8c01915 	stw	r3,100(r23)
    5f80:	10c0020c 	andi	r3,r2,8
    5f84:	1800c126 	beq	r3,zero,628c <___vfprintf_internal_r+0x394>
    5f88:	b8c00417 	ldw	r3,16(r23)
    5f8c:	1800bf26 	beq	r3,zero,628c <___vfprintf_internal_r+0x394>
    5f90:	1080068c 	andi	r2,r2,26
    5f94:	00c00284 	movi	r3,10
    5f98:	10c0c426 	beq	r2,r3,62ac <___vfprintf_internal_r+0x3b4>
    5f9c:	d8c00404 	addi	r3,sp,16
    5fa0:	05000074 	movhi	r20,1
    5fa4:	d9001e04 	addi	r4,sp,120
    5fa8:	a5115f84 	addi	r20,r20,17790
    5fac:	d8c01e15 	stw	r3,120(sp)
    5fb0:	d8002015 	stw	zero,128(sp)
    5fb4:	d8001f15 	stw	zero,124(sp)
    5fb8:	d8003315 	stw	zero,204(sp)
    5fbc:	d8003615 	stw	zero,216(sp)
    5fc0:	d8003815 	stw	zero,224(sp)
    5fc4:	1811883a 	mov	r8,r3
    5fc8:	d8003915 	stw	zero,228(sp)
    5fcc:	d8003a15 	stw	zero,232(sp)
    5fd0:	d8002f15 	stw	zero,188(sp)
    5fd4:	d9002815 	stw	r4,160(sp)
    5fd8:	a8800007 	ldb	r2,0(r21)
    5fdc:	10027b26 	beq	r2,zero,69cc <___vfprintf_internal_r+0xad4>
    5fe0:	00c00944 	movi	r3,37
    5fe4:	a821883a 	mov	r16,r21
    5fe8:	10c0021e 	bne	r2,r3,5ff4 <___vfprintf_internal_r+0xfc>
    5fec:	00001406 	br	6040 <___vfprintf_internal_r+0x148>
    5ff0:	10c00326 	beq	r2,r3,6000 <___vfprintf_internal_r+0x108>
    5ff4:	84000044 	addi	r16,r16,1
    5ff8:	80800007 	ldb	r2,0(r16)
    5ffc:	103ffc1e 	bne	r2,zero,5ff0 <__alt_data_end+0xff005ff0>
    6000:	8563c83a 	sub	r17,r16,r21
    6004:	88000e26 	beq	r17,zero,6040 <___vfprintf_internal_r+0x148>
    6008:	d8c02017 	ldw	r3,128(sp)
    600c:	d8801f17 	ldw	r2,124(sp)
    6010:	45400015 	stw	r21,0(r8)
    6014:	1c47883a 	add	r3,r3,r17
    6018:	10800044 	addi	r2,r2,1
    601c:	d8c02015 	stw	r3,128(sp)
    6020:	44400115 	stw	r17,4(r8)
    6024:	d8801f15 	stw	r2,124(sp)
    6028:	00c001c4 	movi	r3,7
    602c:	1880a716 	blt	r3,r2,62cc <___vfprintf_internal_r+0x3d4>
    6030:	42000204 	addi	r8,r8,8
    6034:	d9402f17 	ldw	r5,188(sp)
    6038:	2c4b883a 	add	r5,r5,r17
    603c:	d9402f15 	stw	r5,188(sp)
    6040:	80800007 	ldb	r2,0(r16)
    6044:	1000a826 	beq	r2,zero,62e8 <___vfprintf_internal_r+0x3f0>
    6048:	84400047 	ldb	r17,1(r16)
    604c:	00bfffc4 	movi	r2,-1
    6050:	85400044 	addi	r21,r16,1
    6054:	d8002785 	stb	zero,158(sp)
    6058:	0007883a 	mov	r3,zero
    605c:	000f883a 	mov	r7,zero
    6060:	d8802915 	stw	r2,164(sp)
    6064:	d8003115 	stw	zero,196(sp)
    6068:	0025883a 	mov	r18,zero
    606c:	01401604 	movi	r5,88
    6070:	01800244 	movi	r6,9
    6074:	02800a84 	movi	r10,42
    6078:	02401b04 	movi	r9,108
    607c:	ad400044 	addi	r21,r21,1
    6080:	88bff804 	addi	r2,r17,-32
    6084:	28830436 	bltu	r5,r2,6c98 <___vfprintf_internal_r+0xda0>
    6088:	100490ba 	slli	r2,r2,2
    608c:	01000034 	movhi	r4,0
    6090:	21182804 	addi	r4,r4,24736
    6094:	1105883a 	add	r2,r2,r4
    6098:	10800017 	ldw	r2,0(r2)
    609c:	1000683a 	jmp	r2
    60a0:	00006bb8 	rdprs	zero,zero,430
    60a4:	00006c98 	cmpnei	zero,zero,434
    60a8:	00006c98 	cmpnei	zero,zero,434
    60ac:	00006bd8 	cmpnei	zero,zero,431
    60b0:	00006c98 	cmpnei	zero,zero,434
    60b4:	00006c98 	cmpnei	zero,zero,434
    60b8:	00006c98 	cmpnei	zero,zero,434
    60bc:	00006c98 	cmpnei	zero,zero,434
    60c0:	00006c98 	cmpnei	zero,zero,434
    60c4:	00006c98 	cmpnei	zero,zero,434
    60c8:	0000634c 	andi	zero,zero,397
    60cc:	00006af4 	movhi	zero,427
    60d0:	00006c98 	cmpnei	zero,zero,434
    60d4:	00006214 	movui	zero,392
    60d8:	00006374 	movhi	zero,397
    60dc:	00006c98 	cmpnei	zero,zero,434
    60e0:	000063b4 	movhi	zero,398
    60e4:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60e8:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60ec:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60f0:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60f4:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60f8:	000063c0 	call	63c <cam_get_profiling+0x4c>
    60fc:	000063c0 	call	63c <cam_get_profiling+0x4c>
    6100:	000063c0 	call	63c <cam_get_profiling+0x4c>
    6104:	000063c0 	call	63c <cam_get_profiling+0x4c>
    6108:	00006c98 	cmpnei	zero,zero,434
    610c:	00006c98 	cmpnei	zero,zero,434
    6110:	00006c98 	cmpnei	zero,zero,434
    6114:	00006c98 	cmpnei	zero,zero,434
    6118:	00006c98 	cmpnei	zero,zero,434
    611c:	00006c98 	cmpnei	zero,zero,434
    6120:	00006c98 	cmpnei	zero,zero,434
    6124:	00006c98 	cmpnei	zero,zero,434
    6128:	00006c98 	cmpnei	zero,zero,434
    612c:	00006c98 	cmpnei	zero,zero,434
    6130:	000063f4 	movhi	zero,399
    6134:	000064b0 	cmpltui	zero,zero,402
    6138:	00006c98 	cmpnei	zero,zero,434
    613c:	000064b0 	cmpltui	zero,zero,402
    6140:	00006c98 	cmpnei	zero,zero,434
    6144:	00006c98 	cmpnei	zero,zero,434
    6148:	00006c98 	cmpnei	zero,zero,434
    614c:	00006c98 	cmpnei	zero,zero,434
    6150:	00006550 	cmplti	zero,zero,405
    6154:	00006c98 	cmpnei	zero,zero,434
    6158:	00006c98 	cmpnei	zero,zero,434
    615c:	0000655c 	xori	zero,zero,405
    6160:	00006c98 	cmpnei	zero,zero,434
    6164:	00006c98 	cmpnei	zero,zero,434
    6168:	00006c98 	cmpnei	zero,zero,434
    616c:	00006c98 	cmpnei	zero,zero,434
    6170:	00006c98 	cmpnei	zero,zero,434
    6174:	000069d4 	movui	zero,423
    6178:	00006c98 	cmpnei	zero,zero,434
    617c:	00006c98 	cmpnei	zero,zero,434
    6180:	00006a34 	movhi	zero,424
    6184:	00006c98 	cmpnei	zero,zero,434
    6188:	00006c98 	cmpnei	zero,zero,434
    618c:	00006c98 	cmpnei	zero,zero,434
    6190:	00006c98 	cmpnei	zero,zero,434
    6194:	00006c98 	cmpnei	zero,zero,434
    6198:	00006c98 	cmpnei	zero,zero,434
    619c:	00006c98 	cmpnei	zero,zero,434
    61a0:	00006c98 	cmpnei	zero,zero,434
    61a4:	00006c98 	cmpnei	zero,zero,434
    61a8:	00006c98 	cmpnei	zero,zero,434
    61ac:	00006c44 	movi	zero,433
    61b0:	00006be4 	muli	zero,zero,431
    61b4:	000064b0 	cmpltui	zero,zero,402
    61b8:	000064b0 	cmpltui	zero,zero,402
    61bc:	000064b0 	cmpltui	zero,zero,402
    61c0:	00006bf4 	movhi	zero,431
    61c4:	00006be4 	muli	zero,zero,431
    61c8:	00006c98 	cmpnei	zero,zero,434
    61cc:	00006c98 	cmpnei	zero,zero,434
    61d0:	00006c00 	call	6c0 <cam_set_image_pointer+0x58>
    61d4:	00006c98 	cmpnei	zero,zero,434
    61d8:	00006c10 	cmplti	zero,zero,432
    61dc:	00006ae4 	muli	zero,zero,427
    61e0:	00006220 	cmpeqi	zero,zero,392
    61e4:	00006b04 	movi	zero,428
    61e8:	00006c98 	cmpnei	zero,zero,434
    61ec:	00006b10 	cmplti	zero,zero,428
    61f0:	00006c98 	cmpnei	zero,zero,434
    61f4:	00006b6c 	andhi	zero,zero,429
    61f8:	00006c98 	cmpnei	zero,zero,434
    61fc:	00006c98 	cmpnei	zero,zero,434
    6200:	00006b7c 	xorhi	zero,zero,429
    6204:	d9003117 	ldw	r4,196(sp)
    6208:	d8802d15 	stw	r2,180(sp)
    620c:	0109c83a 	sub	r4,zero,r4
    6210:	d9003115 	stw	r4,196(sp)
    6214:	94800114 	ori	r18,r18,4
    6218:	ac400007 	ldb	r17,0(r21)
    621c:	003f9706 	br	607c <__alt_data_end+0xff00607c>
    6220:	00800c04 	movi	r2,48
    6224:	d9002d17 	ldw	r4,180(sp)
    6228:	d9402917 	ldw	r5,164(sp)
    622c:	d8802705 	stb	r2,156(sp)
    6230:	00801e04 	movi	r2,120
    6234:	d8802745 	stb	r2,157(sp)
    6238:	d8002785 	stb	zero,158(sp)
    623c:	20c00104 	addi	r3,r4,4
    6240:	24c00017 	ldw	r19,0(r4)
    6244:	002d883a 	mov	r22,zero
    6248:	90800094 	ori	r2,r18,2
    624c:	28029a16 	blt	r5,zero,6cb8 <___vfprintf_internal_r+0xdc0>
    6250:	00bfdfc4 	movi	r2,-129
    6254:	90a4703a 	and	r18,r18,r2
    6258:	d8c02d15 	stw	r3,180(sp)
    625c:	94800094 	ori	r18,r18,2
    6260:	9802871e 	bne	r19,zero,6c80 <___vfprintf_internal_r+0xd88>
    6264:	00800074 	movhi	r2,1
    6268:	10915804 	addi	r2,r2,17760
    626c:	d8803915 	stw	r2,228(sp)
    6270:	04401e04 	movi	r17,120
    6274:	d8802917 	ldw	r2,164(sp)
    6278:	0039883a 	mov	fp,zero
    627c:	1001e926 	beq	r2,zero,6a24 <___vfprintf_internal_r+0xb2c>
    6280:	0027883a 	mov	r19,zero
    6284:	002d883a 	mov	r22,zero
    6288:	00020506 	br	6aa0 <___vfprintf_internal_r+0xba8>
    628c:	d9002c17 	ldw	r4,176(sp)
    6290:	b80b883a 	mov	r5,r23
    6294:	00081c80 	call	81c8 <__swsetup_r>
    6298:	1005ac1e 	bne	r2,zero,794c <___vfprintf_internal_r+0x1a54>
    629c:	b880030b 	ldhu	r2,12(r23)
    62a0:	00c00284 	movi	r3,10
    62a4:	1080068c 	andi	r2,r2,26
    62a8:	10ff3c1e 	bne	r2,r3,5f9c <__alt_data_end+0xff005f9c>
    62ac:	b880038f 	ldh	r2,14(r23)
    62b0:	103f3a16 	blt	r2,zero,5f9c <__alt_data_end+0xff005f9c>
    62b4:	d9c02d17 	ldw	r7,180(sp)
    62b8:	d9002c17 	ldw	r4,176(sp)
    62bc:	a80d883a 	mov	r6,r21
    62c0:	b80b883a 	mov	r5,r23
    62c4:	000810c0 	call	810c <__sbprintf>
    62c8:	00001106 	br	6310 <___vfprintf_internal_r+0x418>
    62cc:	d9002c17 	ldw	r4,176(sp)
    62d0:	d9801e04 	addi	r6,sp,120
    62d4:	b80b883a 	mov	r5,r23
    62d8:	000cc940 	call	cc94 <__sprint_r>
    62dc:	1000081e 	bne	r2,zero,6300 <___vfprintf_internal_r+0x408>
    62e0:	da000404 	addi	r8,sp,16
    62e4:	003f5306 	br	6034 <__alt_data_end+0xff006034>
    62e8:	d8802017 	ldw	r2,128(sp)
    62ec:	10000426 	beq	r2,zero,6300 <___vfprintf_internal_r+0x408>
    62f0:	d9002c17 	ldw	r4,176(sp)
    62f4:	d9801e04 	addi	r6,sp,120
    62f8:	b80b883a 	mov	r5,r23
    62fc:	000cc940 	call	cc94 <__sprint_r>
    6300:	b880030b 	ldhu	r2,12(r23)
    6304:	1080100c 	andi	r2,r2,64
    6308:	1005901e 	bne	r2,zero,794c <___vfprintf_internal_r+0x1a54>
    630c:	d8802f17 	ldw	r2,188(sp)
    6310:	dfc04717 	ldw	ra,284(sp)
    6314:	df004617 	ldw	fp,280(sp)
    6318:	ddc04517 	ldw	r23,276(sp)
    631c:	dd804417 	ldw	r22,272(sp)
    6320:	dd404317 	ldw	r21,268(sp)
    6324:	dd004217 	ldw	r20,264(sp)
    6328:	dcc04117 	ldw	r19,260(sp)
    632c:	dc804017 	ldw	r18,256(sp)
    6330:	dc403f17 	ldw	r17,252(sp)
    6334:	dc003e17 	ldw	r16,248(sp)
    6338:	dec04804 	addi	sp,sp,288
    633c:	f800283a 	ret
    6340:	d9002c17 	ldw	r4,176(sp)
    6344:	000a19c0 	call	a19c <__sinit>
    6348:	003f0406 	br	5f5c <__alt_data_end+0xff005f5c>
    634c:	d8802d17 	ldw	r2,180(sp)
    6350:	d9002d17 	ldw	r4,180(sp)
    6354:	10800017 	ldw	r2,0(r2)
    6358:	d8803115 	stw	r2,196(sp)
    635c:	20800104 	addi	r2,r4,4
    6360:	d9003117 	ldw	r4,196(sp)
    6364:	203fa716 	blt	r4,zero,6204 <__alt_data_end+0xff006204>
    6368:	d8802d15 	stw	r2,180(sp)
    636c:	ac400007 	ldb	r17,0(r21)
    6370:	003f4206 	br	607c <__alt_data_end+0xff00607c>
    6374:	ac400007 	ldb	r17,0(r21)
    6378:	aac00044 	addi	r11,r21,1
    637c:	8a872826 	beq	r17,r10,8020 <___vfprintf_internal_r+0x2128>
    6380:	88bff404 	addi	r2,r17,-48
    6384:	0009883a 	mov	r4,zero
    6388:	30867d36 	bltu	r6,r2,7d80 <___vfprintf_internal_r+0x1e88>
    638c:	5c400007 	ldb	r17,0(r11)
    6390:	210002a4 	muli	r4,r4,10
    6394:	5d400044 	addi	r21,r11,1
    6398:	a817883a 	mov	r11,r21
    639c:	2089883a 	add	r4,r4,r2
    63a0:	88bff404 	addi	r2,r17,-48
    63a4:	30bff92e 	bgeu	r6,r2,638c <__alt_data_end+0xff00638c>
    63a8:	2005c916 	blt	r4,zero,7ad0 <___vfprintf_internal_r+0x1bd8>
    63ac:	d9002915 	stw	r4,164(sp)
    63b0:	003f3306 	br	6080 <__alt_data_end+0xff006080>
    63b4:	94802014 	ori	r18,r18,128
    63b8:	ac400007 	ldb	r17,0(r21)
    63bc:	003f2f06 	br	607c <__alt_data_end+0xff00607c>
    63c0:	a809883a 	mov	r4,r21
    63c4:	d8003115 	stw	zero,196(sp)
    63c8:	88bff404 	addi	r2,r17,-48
    63cc:	0017883a 	mov	r11,zero
    63d0:	24400007 	ldb	r17,0(r4)
    63d4:	5ac002a4 	muli	r11,r11,10
    63d8:	ad400044 	addi	r21,r21,1
    63dc:	a809883a 	mov	r4,r21
    63e0:	12d7883a 	add	r11,r2,r11
    63e4:	88bff404 	addi	r2,r17,-48
    63e8:	30bff92e 	bgeu	r6,r2,63d0 <__alt_data_end+0xff0063d0>
    63ec:	dac03115 	stw	r11,196(sp)
    63f0:	003f2306 	br	6080 <__alt_data_end+0xff006080>
    63f4:	18c03fcc 	andi	r3,r3,255
    63f8:	18072b1e 	bne	r3,zero,80a8 <___vfprintf_internal_r+0x21b0>
    63fc:	94800414 	ori	r18,r18,16
    6400:	9080080c 	andi	r2,r18,32
    6404:	10037b26 	beq	r2,zero,71f4 <___vfprintf_internal_r+0x12fc>
    6408:	d9402d17 	ldw	r5,180(sp)
    640c:	28800117 	ldw	r2,4(r5)
    6410:	2cc00017 	ldw	r19,0(r5)
    6414:	29400204 	addi	r5,r5,8
    6418:	d9402d15 	stw	r5,180(sp)
    641c:	102d883a 	mov	r22,r2
    6420:	10044b16 	blt	r2,zero,7550 <___vfprintf_internal_r+0x1658>
    6424:	d9402917 	ldw	r5,164(sp)
    6428:	df002783 	ldbu	fp,158(sp)
    642c:	2803bc16 	blt	r5,zero,7320 <___vfprintf_internal_r+0x1428>
    6430:	00ffdfc4 	movi	r3,-129
    6434:	9d84b03a 	or	r2,r19,r22
    6438:	90e4703a 	and	r18,r18,r3
    643c:	10017726 	beq	r2,zero,6a1c <___vfprintf_internal_r+0xb24>
    6440:	b0038326 	beq	r22,zero,7250 <___vfprintf_internal_r+0x1358>
    6444:	dc402a15 	stw	r17,168(sp)
    6448:	dc001e04 	addi	r16,sp,120
    644c:	b023883a 	mov	r17,r22
    6450:	402d883a 	mov	r22,r8
    6454:	9809883a 	mov	r4,r19
    6458:	880b883a 	mov	r5,r17
    645c:	01800284 	movi	r6,10
    6460:	000f883a 	mov	r7,zero
    6464:	000f08c0 	call	f08c <__umoddi3>
    6468:	10800c04 	addi	r2,r2,48
    646c:	843fffc4 	addi	r16,r16,-1
    6470:	9809883a 	mov	r4,r19
    6474:	880b883a 	mov	r5,r17
    6478:	80800005 	stb	r2,0(r16)
    647c:	01800284 	movi	r6,10
    6480:	000f883a 	mov	r7,zero
    6484:	000eb140 	call	eb14 <__udivdi3>
    6488:	1027883a 	mov	r19,r2
    648c:	10c4b03a 	or	r2,r2,r3
    6490:	1823883a 	mov	r17,r3
    6494:	103fef1e 	bne	r2,zero,6454 <__alt_data_end+0xff006454>
    6498:	d8c02817 	ldw	r3,160(sp)
    649c:	dc402a17 	ldw	r17,168(sp)
    64a0:	b011883a 	mov	r8,r22
    64a4:	1c07c83a 	sub	r3,r3,r16
    64a8:	d8c02e15 	stw	r3,184(sp)
    64ac:	00005906 	br	6614 <___vfprintf_internal_r+0x71c>
    64b0:	18c03fcc 	andi	r3,r3,255
    64b4:	1806fa1e 	bne	r3,zero,80a0 <___vfprintf_internal_r+0x21a8>
    64b8:	9080020c 	andi	r2,r18,8
    64bc:	10048a26 	beq	r2,zero,76e8 <___vfprintf_internal_r+0x17f0>
    64c0:	d8c02d17 	ldw	r3,180(sp)
    64c4:	d9002d17 	ldw	r4,180(sp)
    64c8:	d9402d17 	ldw	r5,180(sp)
    64cc:	18c00017 	ldw	r3,0(r3)
    64d0:	21000117 	ldw	r4,4(r4)
    64d4:	29400204 	addi	r5,r5,8
    64d8:	d8c03615 	stw	r3,216(sp)
    64dc:	d9003815 	stw	r4,224(sp)
    64e0:	d9402d15 	stw	r5,180(sp)
    64e4:	d9003617 	ldw	r4,216(sp)
    64e8:	d9403817 	ldw	r5,224(sp)
    64ec:	da003d15 	stw	r8,244(sp)
    64f0:	04000044 	movi	r16,1
    64f4:	000c90c0 	call	c90c <__fpclassifyd>
    64f8:	da003d17 	ldw	r8,244(sp)
    64fc:	14041f1e 	bne	r2,r16,757c <___vfprintf_internal_r+0x1684>
    6500:	d9003617 	ldw	r4,216(sp)
    6504:	d9403817 	ldw	r5,224(sp)
    6508:	000d883a 	mov	r6,zero
    650c:	000f883a 	mov	r7,zero
    6510:	000ffd40 	call	ffd4 <__ledf2>
    6514:	da003d17 	ldw	r8,244(sp)
    6518:	1005be16 	blt	r2,zero,7c14 <___vfprintf_internal_r+0x1d1c>
    651c:	df002783 	ldbu	fp,158(sp)
    6520:	008011c4 	movi	r2,71
    6524:	1445330e 	bge	r2,r17,79f4 <___vfprintf_internal_r+0x1afc>
    6528:	04000074 	movhi	r16,1
    652c:	84115004 	addi	r16,r16,17728
    6530:	00c000c4 	movi	r3,3
    6534:	00bfdfc4 	movi	r2,-129
    6538:	d8c02a15 	stw	r3,168(sp)
    653c:	90a4703a 	and	r18,r18,r2
    6540:	d8c02e15 	stw	r3,184(sp)
    6544:	d8002915 	stw	zero,164(sp)
    6548:	d8003215 	stw	zero,200(sp)
    654c:	00003706 	br	662c <___vfprintf_internal_r+0x734>
    6550:	94800214 	ori	r18,r18,8
    6554:	ac400007 	ldb	r17,0(r21)
    6558:	003ec806 	br	607c <__alt_data_end+0xff00607c>
    655c:	18c03fcc 	andi	r3,r3,255
    6560:	1806db1e 	bne	r3,zero,80d0 <___vfprintf_internal_r+0x21d8>
    6564:	94800414 	ori	r18,r18,16
    6568:	9080080c 	andi	r2,r18,32
    656c:	1002d826 	beq	r2,zero,70d0 <___vfprintf_internal_r+0x11d8>
    6570:	d9402d17 	ldw	r5,180(sp)
    6574:	d8c02917 	ldw	r3,164(sp)
    6578:	d8002785 	stb	zero,158(sp)
    657c:	28800204 	addi	r2,r5,8
    6580:	2cc00017 	ldw	r19,0(r5)
    6584:	2d800117 	ldw	r22,4(r5)
    6588:	18048f16 	blt	r3,zero,77c8 <___vfprintf_internal_r+0x18d0>
    658c:	013fdfc4 	movi	r4,-129
    6590:	9d86b03a 	or	r3,r19,r22
    6594:	d8802d15 	stw	r2,180(sp)
    6598:	9124703a 	and	r18,r18,r4
    659c:	1802d91e 	bne	r3,zero,7104 <___vfprintf_internal_r+0x120c>
    65a0:	d8c02917 	ldw	r3,164(sp)
    65a4:	0039883a 	mov	fp,zero
    65a8:	1805c326 	beq	r3,zero,7cb8 <___vfprintf_internal_r+0x1dc0>
    65ac:	0027883a 	mov	r19,zero
    65b0:	002d883a 	mov	r22,zero
    65b4:	dc001e04 	addi	r16,sp,120
    65b8:	9806d0fa 	srli	r3,r19,3
    65bc:	b008977a 	slli	r4,r22,29
    65c0:	b02cd0fa 	srli	r22,r22,3
    65c4:	9cc001cc 	andi	r19,r19,7
    65c8:	98800c04 	addi	r2,r19,48
    65cc:	843fffc4 	addi	r16,r16,-1
    65d0:	20e6b03a 	or	r19,r4,r3
    65d4:	80800005 	stb	r2,0(r16)
    65d8:	9d86b03a 	or	r3,r19,r22
    65dc:	183ff61e 	bne	r3,zero,65b8 <__alt_data_end+0xff0065b8>
    65e0:	90c0004c 	andi	r3,r18,1
    65e4:	18013b26 	beq	r3,zero,6ad4 <___vfprintf_internal_r+0xbdc>
    65e8:	10803fcc 	andi	r2,r2,255
    65ec:	1080201c 	xori	r2,r2,128
    65f0:	10bfe004 	addi	r2,r2,-128
    65f4:	00c00c04 	movi	r3,48
    65f8:	10c13626 	beq	r2,r3,6ad4 <___vfprintf_internal_r+0xbdc>
    65fc:	80ffffc5 	stb	r3,-1(r16)
    6600:	d8c02817 	ldw	r3,160(sp)
    6604:	80bfffc4 	addi	r2,r16,-1
    6608:	1021883a 	mov	r16,r2
    660c:	1887c83a 	sub	r3,r3,r2
    6610:	d8c02e15 	stw	r3,184(sp)
    6614:	d8802e17 	ldw	r2,184(sp)
    6618:	d9002917 	ldw	r4,164(sp)
    661c:	1100010e 	bge	r2,r4,6624 <___vfprintf_internal_r+0x72c>
    6620:	2005883a 	mov	r2,r4
    6624:	d8802a15 	stw	r2,168(sp)
    6628:	d8003215 	stw	zero,200(sp)
    662c:	e7003fcc 	andi	fp,fp,255
    6630:	e700201c 	xori	fp,fp,128
    6634:	e73fe004 	addi	fp,fp,-128
    6638:	e0000326 	beq	fp,zero,6648 <___vfprintf_internal_r+0x750>
    663c:	d8c02a17 	ldw	r3,168(sp)
    6640:	18c00044 	addi	r3,r3,1
    6644:	d8c02a15 	stw	r3,168(sp)
    6648:	90c0008c 	andi	r3,r18,2
    664c:	d8c02b15 	stw	r3,172(sp)
    6650:	18000326 	beq	r3,zero,6660 <___vfprintf_internal_r+0x768>
    6654:	d8c02a17 	ldw	r3,168(sp)
    6658:	18c00084 	addi	r3,r3,2
    665c:	d8c02a15 	stw	r3,168(sp)
    6660:	90c0210c 	andi	r3,r18,132
    6664:	d8c03015 	stw	r3,192(sp)
    6668:	1801a31e 	bne	r3,zero,6cf8 <___vfprintf_internal_r+0xe00>
    666c:	d9003117 	ldw	r4,196(sp)
    6670:	d8c02a17 	ldw	r3,168(sp)
    6674:	20e7c83a 	sub	r19,r4,r3
    6678:	04c19f0e 	bge	zero,r19,6cf8 <___vfprintf_internal_r+0xe00>
    667c:	02400404 	movi	r9,16
    6680:	d8c02017 	ldw	r3,128(sp)
    6684:	d8801f17 	ldw	r2,124(sp)
    6688:	4cc50d0e 	bge	r9,r19,7ac0 <___vfprintf_internal_r+0x1bc8>
    668c:	01400074 	movhi	r5,1
    6690:	29516384 	addi	r5,r5,17806
    6694:	dc403b15 	stw	r17,236(sp)
    6698:	d9403515 	stw	r5,212(sp)
    669c:	9823883a 	mov	r17,r19
    66a0:	482d883a 	mov	r22,r9
    66a4:	9027883a 	mov	r19,r18
    66a8:	070001c4 	movi	fp,7
    66ac:	8025883a 	mov	r18,r16
    66b0:	dc002c17 	ldw	r16,176(sp)
    66b4:	00000306 	br	66c4 <___vfprintf_internal_r+0x7cc>
    66b8:	8c7ffc04 	addi	r17,r17,-16
    66bc:	42000204 	addi	r8,r8,8
    66c0:	b440130e 	bge	r22,r17,6710 <___vfprintf_internal_r+0x818>
    66c4:	01000074 	movhi	r4,1
    66c8:	18c00404 	addi	r3,r3,16
    66cc:	10800044 	addi	r2,r2,1
    66d0:	21116384 	addi	r4,r4,17806
    66d4:	41000015 	stw	r4,0(r8)
    66d8:	45800115 	stw	r22,4(r8)
    66dc:	d8c02015 	stw	r3,128(sp)
    66e0:	d8801f15 	stw	r2,124(sp)
    66e4:	e0bff40e 	bge	fp,r2,66b8 <__alt_data_end+0xff0066b8>
    66e8:	d9801e04 	addi	r6,sp,120
    66ec:	b80b883a 	mov	r5,r23
    66f0:	8009883a 	mov	r4,r16
    66f4:	000cc940 	call	cc94 <__sprint_r>
    66f8:	103f011e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    66fc:	8c7ffc04 	addi	r17,r17,-16
    6700:	d8c02017 	ldw	r3,128(sp)
    6704:	d8801f17 	ldw	r2,124(sp)
    6708:	da000404 	addi	r8,sp,16
    670c:	b47fed16 	blt	r22,r17,66c4 <__alt_data_end+0xff0066c4>
    6710:	9021883a 	mov	r16,r18
    6714:	9825883a 	mov	r18,r19
    6718:	8827883a 	mov	r19,r17
    671c:	dc403b17 	ldw	r17,236(sp)
    6720:	d9403517 	ldw	r5,212(sp)
    6724:	98c7883a 	add	r3,r19,r3
    6728:	10800044 	addi	r2,r2,1
    672c:	41400015 	stw	r5,0(r8)
    6730:	44c00115 	stw	r19,4(r8)
    6734:	d8c02015 	stw	r3,128(sp)
    6738:	d8801f15 	stw	r2,124(sp)
    673c:	010001c4 	movi	r4,7
    6740:	2082a316 	blt	r4,r2,71d0 <___vfprintf_internal_r+0x12d8>
    6744:	df002787 	ldb	fp,158(sp)
    6748:	42000204 	addi	r8,r8,8
    674c:	e0000c26 	beq	fp,zero,6780 <___vfprintf_internal_r+0x888>
    6750:	d8801f17 	ldw	r2,124(sp)
    6754:	d9002784 	addi	r4,sp,158
    6758:	18c00044 	addi	r3,r3,1
    675c:	10800044 	addi	r2,r2,1
    6760:	41000015 	stw	r4,0(r8)
    6764:	01000044 	movi	r4,1
    6768:	41000115 	stw	r4,4(r8)
    676c:	d8c02015 	stw	r3,128(sp)
    6770:	d8801f15 	stw	r2,124(sp)
    6774:	010001c4 	movi	r4,7
    6778:	20823c16 	blt	r4,r2,706c <___vfprintf_internal_r+0x1174>
    677c:	42000204 	addi	r8,r8,8
    6780:	d8802b17 	ldw	r2,172(sp)
    6784:	10000c26 	beq	r2,zero,67b8 <___vfprintf_internal_r+0x8c0>
    6788:	d8801f17 	ldw	r2,124(sp)
    678c:	d9002704 	addi	r4,sp,156
    6790:	18c00084 	addi	r3,r3,2
    6794:	10800044 	addi	r2,r2,1
    6798:	41000015 	stw	r4,0(r8)
    679c:	01000084 	movi	r4,2
    67a0:	41000115 	stw	r4,4(r8)
    67a4:	d8c02015 	stw	r3,128(sp)
    67a8:	d8801f15 	stw	r2,124(sp)
    67ac:	010001c4 	movi	r4,7
    67b0:	20823616 	blt	r4,r2,708c <___vfprintf_internal_r+0x1194>
    67b4:	42000204 	addi	r8,r8,8
    67b8:	d9003017 	ldw	r4,192(sp)
    67bc:	00802004 	movi	r2,128
    67c0:	20819926 	beq	r4,r2,6e28 <___vfprintf_internal_r+0xf30>
    67c4:	d9402917 	ldw	r5,164(sp)
    67c8:	d8802e17 	ldw	r2,184(sp)
    67cc:	28adc83a 	sub	r22,r5,r2
    67d0:	0580310e 	bge	zero,r22,6898 <___vfprintf_internal_r+0x9a0>
    67d4:	07000404 	movi	fp,16
    67d8:	d8801f17 	ldw	r2,124(sp)
    67dc:	e584140e 	bge	fp,r22,7830 <___vfprintf_internal_r+0x1938>
    67e0:	01400074 	movhi	r5,1
    67e4:	29515f84 	addi	r5,r5,17790
    67e8:	dc402915 	stw	r17,164(sp)
    67ec:	d9402b15 	stw	r5,172(sp)
    67f0:	b023883a 	mov	r17,r22
    67f4:	04c001c4 	movi	r19,7
    67f8:	a82d883a 	mov	r22,r21
    67fc:	902b883a 	mov	r21,r18
    6800:	8025883a 	mov	r18,r16
    6804:	dc002c17 	ldw	r16,176(sp)
    6808:	00000306 	br	6818 <___vfprintf_internal_r+0x920>
    680c:	8c7ffc04 	addi	r17,r17,-16
    6810:	42000204 	addi	r8,r8,8
    6814:	e440110e 	bge	fp,r17,685c <___vfprintf_internal_r+0x964>
    6818:	18c00404 	addi	r3,r3,16
    681c:	10800044 	addi	r2,r2,1
    6820:	45000015 	stw	r20,0(r8)
    6824:	47000115 	stw	fp,4(r8)
    6828:	d8c02015 	stw	r3,128(sp)
    682c:	d8801f15 	stw	r2,124(sp)
    6830:	98bff60e 	bge	r19,r2,680c <__alt_data_end+0xff00680c>
    6834:	d9801e04 	addi	r6,sp,120
    6838:	b80b883a 	mov	r5,r23
    683c:	8009883a 	mov	r4,r16
    6840:	000cc940 	call	cc94 <__sprint_r>
    6844:	103eae1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    6848:	8c7ffc04 	addi	r17,r17,-16
    684c:	d8c02017 	ldw	r3,128(sp)
    6850:	d8801f17 	ldw	r2,124(sp)
    6854:	da000404 	addi	r8,sp,16
    6858:	e47fef16 	blt	fp,r17,6818 <__alt_data_end+0xff006818>
    685c:	9021883a 	mov	r16,r18
    6860:	a825883a 	mov	r18,r21
    6864:	b02b883a 	mov	r21,r22
    6868:	882d883a 	mov	r22,r17
    686c:	dc402917 	ldw	r17,164(sp)
    6870:	d9002b17 	ldw	r4,172(sp)
    6874:	1d87883a 	add	r3,r3,r22
    6878:	10800044 	addi	r2,r2,1
    687c:	41000015 	stw	r4,0(r8)
    6880:	45800115 	stw	r22,4(r8)
    6884:	d8c02015 	stw	r3,128(sp)
    6888:	d8801f15 	stw	r2,124(sp)
    688c:	010001c4 	movi	r4,7
    6890:	2081ee16 	blt	r4,r2,704c <___vfprintf_internal_r+0x1154>
    6894:	42000204 	addi	r8,r8,8
    6898:	9080400c 	andi	r2,r18,256
    689c:	1001181e 	bne	r2,zero,6d00 <___vfprintf_internal_r+0xe08>
    68a0:	d9402e17 	ldw	r5,184(sp)
    68a4:	d8801f17 	ldw	r2,124(sp)
    68a8:	44000015 	stw	r16,0(r8)
    68ac:	1947883a 	add	r3,r3,r5
    68b0:	10800044 	addi	r2,r2,1
    68b4:	41400115 	stw	r5,4(r8)
    68b8:	d8c02015 	stw	r3,128(sp)
    68bc:	d8801f15 	stw	r2,124(sp)
    68c0:	010001c4 	movi	r4,7
    68c4:	2081d316 	blt	r4,r2,7014 <___vfprintf_internal_r+0x111c>
    68c8:	42000204 	addi	r8,r8,8
    68cc:	9480010c 	andi	r18,r18,4
    68d0:	90003226 	beq	r18,zero,699c <___vfprintf_internal_r+0xaa4>
    68d4:	d9403117 	ldw	r5,196(sp)
    68d8:	d8802a17 	ldw	r2,168(sp)
    68dc:	28a1c83a 	sub	r16,r5,r2
    68e0:	04002e0e 	bge	zero,r16,699c <___vfprintf_internal_r+0xaa4>
    68e4:	04400404 	movi	r17,16
    68e8:	d8801f17 	ldw	r2,124(sp)
    68ec:	8c04a20e 	bge	r17,r16,7b78 <___vfprintf_internal_r+0x1c80>
    68f0:	01400074 	movhi	r5,1
    68f4:	29516384 	addi	r5,r5,17806
    68f8:	d9403515 	stw	r5,212(sp)
    68fc:	048001c4 	movi	r18,7
    6900:	dcc02c17 	ldw	r19,176(sp)
    6904:	00000306 	br	6914 <___vfprintf_internal_r+0xa1c>
    6908:	843ffc04 	addi	r16,r16,-16
    690c:	42000204 	addi	r8,r8,8
    6910:	8c00130e 	bge	r17,r16,6960 <___vfprintf_internal_r+0xa68>
    6914:	01000074 	movhi	r4,1
    6918:	18c00404 	addi	r3,r3,16
    691c:	10800044 	addi	r2,r2,1
    6920:	21116384 	addi	r4,r4,17806
    6924:	41000015 	stw	r4,0(r8)
    6928:	44400115 	stw	r17,4(r8)
    692c:	d8c02015 	stw	r3,128(sp)
    6930:	d8801f15 	stw	r2,124(sp)
    6934:	90bff40e 	bge	r18,r2,6908 <__alt_data_end+0xff006908>
    6938:	d9801e04 	addi	r6,sp,120
    693c:	b80b883a 	mov	r5,r23
    6940:	9809883a 	mov	r4,r19
    6944:	000cc940 	call	cc94 <__sprint_r>
    6948:	103e6d1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    694c:	843ffc04 	addi	r16,r16,-16
    6950:	d8c02017 	ldw	r3,128(sp)
    6954:	d8801f17 	ldw	r2,124(sp)
    6958:	da000404 	addi	r8,sp,16
    695c:	8c3fed16 	blt	r17,r16,6914 <__alt_data_end+0xff006914>
    6960:	d9403517 	ldw	r5,212(sp)
    6964:	1c07883a 	add	r3,r3,r16
    6968:	10800044 	addi	r2,r2,1
    696c:	41400015 	stw	r5,0(r8)
    6970:	44000115 	stw	r16,4(r8)
    6974:	d8c02015 	stw	r3,128(sp)
    6978:	d8801f15 	stw	r2,124(sp)
    697c:	010001c4 	movi	r4,7
    6980:	2080060e 	bge	r4,r2,699c <___vfprintf_internal_r+0xaa4>
    6984:	d9002c17 	ldw	r4,176(sp)
    6988:	d9801e04 	addi	r6,sp,120
    698c:	b80b883a 	mov	r5,r23
    6990:	000cc940 	call	cc94 <__sprint_r>
    6994:	103e5a1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    6998:	d8c02017 	ldw	r3,128(sp)
    699c:	d8803117 	ldw	r2,196(sp)
    69a0:	d9002a17 	ldw	r4,168(sp)
    69a4:	1100010e 	bge	r2,r4,69ac <___vfprintf_internal_r+0xab4>
    69a8:	2005883a 	mov	r2,r4
    69ac:	d9402f17 	ldw	r5,188(sp)
    69b0:	288b883a 	add	r5,r5,r2
    69b4:	d9402f15 	stw	r5,188(sp)
    69b8:	18019e1e 	bne	r3,zero,7034 <___vfprintf_internal_r+0x113c>
    69bc:	a8800007 	ldb	r2,0(r21)
    69c0:	d8001f15 	stw	zero,124(sp)
    69c4:	da000404 	addi	r8,sp,16
    69c8:	103d851e 	bne	r2,zero,5fe0 <__alt_data_end+0xff005fe0>
    69cc:	a821883a 	mov	r16,r21
    69d0:	003d9b06 	br	6040 <__alt_data_end+0xff006040>
    69d4:	18c03fcc 	andi	r3,r3,255
    69d8:	1805c11e 	bne	r3,zero,80e0 <___vfprintf_internal_r+0x21e8>
    69dc:	94800414 	ori	r18,r18,16
    69e0:	9080080c 	andi	r2,r18,32
    69e4:	10020c26 	beq	r2,zero,7218 <___vfprintf_internal_r+0x1320>
    69e8:	d8802d17 	ldw	r2,180(sp)
    69ec:	d9002917 	ldw	r4,164(sp)
    69f0:	d8002785 	stb	zero,158(sp)
    69f4:	10c00204 	addi	r3,r2,8
    69f8:	14c00017 	ldw	r19,0(r2)
    69fc:	15800117 	ldw	r22,4(r2)
    6a00:	20040f16 	blt	r4,zero,7a40 <___vfprintf_internal_r+0x1b48>
    6a04:	013fdfc4 	movi	r4,-129
    6a08:	9d84b03a 	or	r2,r19,r22
    6a0c:	d8c02d15 	stw	r3,180(sp)
    6a10:	9124703a 	and	r18,r18,r4
    6a14:	0039883a 	mov	fp,zero
    6a18:	103e891e 	bne	r2,zero,6440 <__alt_data_end+0xff006440>
    6a1c:	d9002917 	ldw	r4,164(sp)
    6a20:	2002c11e 	bne	r4,zero,7528 <___vfprintf_internal_r+0x1630>
    6a24:	d8002915 	stw	zero,164(sp)
    6a28:	d8002e15 	stw	zero,184(sp)
    6a2c:	dc001e04 	addi	r16,sp,120
    6a30:	003ef806 	br	6614 <__alt_data_end+0xff006614>
    6a34:	18c03fcc 	andi	r3,r3,255
    6a38:	18059d1e 	bne	r3,zero,80b0 <___vfprintf_internal_r+0x21b8>
    6a3c:	01400074 	movhi	r5,1
    6a40:	29515304 	addi	r5,r5,17740
    6a44:	d9403915 	stw	r5,228(sp)
    6a48:	9080080c 	andi	r2,r18,32
    6a4c:	10005226 	beq	r2,zero,6b98 <___vfprintf_internal_r+0xca0>
    6a50:	d8802d17 	ldw	r2,180(sp)
    6a54:	14c00017 	ldw	r19,0(r2)
    6a58:	15800117 	ldw	r22,4(r2)
    6a5c:	10800204 	addi	r2,r2,8
    6a60:	d8802d15 	stw	r2,180(sp)
    6a64:	9080004c 	andi	r2,r18,1
    6a68:	10019026 	beq	r2,zero,70ac <___vfprintf_internal_r+0x11b4>
    6a6c:	9d84b03a 	or	r2,r19,r22
    6a70:	10036926 	beq	r2,zero,7818 <___vfprintf_internal_r+0x1920>
    6a74:	d8c02917 	ldw	r3,164(sp)
    6a78:	00800c04 	movi	r2,48
    6a7c:	d8802705 	stb	r2,156(sp)
    6a80:	dc402745 	stb	r17,157(sp)
    6a84:	d8002785 	stb	zero,158(sp)
    6a88:	90800094 	ori	r2,r18,2
    6a8c:	18045d16 	blt	r3,zero,7c04 <___vfprintf_internal_r+0x1d0c>
    6a90:	00bfdfc4 	movi	r2,-129
    6a94:	90a4703a 	and	r18,r18,r2
    6a98:	94800094 	ori	r18,r18,2
    6a9c:	0039883a 	mov	fp,zero
    6aa0:	d9003917 	ldw	r4,228(sp)
    6aa4:	dc001e04 	addi	r16,sp,120
    6aa8:	988003cc 	andi	r2,r19,15
    6aac:	b006973a 	slli	r3,r22,28
    6ab0:	2085883a 	add	r2,r4,r2
    6ab4:	9826d13a 	srli	r19,r19,4
    6ab8:	10800003 	ldbu	r2,0(r2)
    6abc:	b02cd13a 	srli	r22,r22,4
    6ac0:	843fffc4 	addi	r16,r16,-1
    6ac4:	1ce6b03a 	or	r19,r3,r19
    6ac8:	80800005 	stb	r2,0(r16)
    6acc:	9d84b03a 	or	r2,r19,r22
    6ad0:	103ff51e 	bne	r2,zero,6aa8 <__alt_data_end+0xff006aa8>
    6ad4:	d8c02817 	ldw	r3,160(sp)
    6ad8:	1c07c83a 	sub	r3,r3,r16
    6adc:	d8c02e15 	stw	r3,184(sp)
    6ae0:	003ecc06 	br	6614 <__alt_data_end+0xff006614>
    6ae4:	18c03fcc 	andi	r3,r3,255
    6ae8:	183e9f26 	beq	r3,zero,6568 <__alt_data_end+0xff006568>
    6aec:	d9c02785 	stb	r7,158(sp)
    6af0:	003e9d06 	br	6568 <__alt_data_end+0xff006568>
    6af4:	00c00044 	movi	r3,1
    6af8:	01c00ac4 	movi	r7,43
    6afc:	ac400007 	ldb	r17,0(r21)
    6b00:	003d5e06 	br	607c <__alt_data_end+0xff00607c>
    6b04:	94800814 	ori	r18,r18,32
    6b08:	ac400007 	ldb	r17,0(r21)
    6b0c:	003d5b06 	br	607c <__alt_data_end+0xff00607c>
    6b10:	d8c02d17 	ldw	r3,180(sp)
    6b14:	d8002785 	stb	zero,158(sp)
    6b18:	1c000017 	ldw	r16,0(r3)
    6b1c:	1cc00104 	addi	r19,r3,4
    6b20:	80041926 	beq	r16,zero,7b88 <___vfprintf_internal_r+0x1c90>
    6b24:	d9002917 	ldw	r4,164(sp)
    6b28:	2003d016 	blt	r4,zero,7a6c <___vfprintf_internal_r+0x1b74>
    6b2c:	200d883a 	mov	r6,r4
    6b30:	000b883a 	mov	r5,zero
    6b34:	8009883a 	mov	r4,r16
    6b38:	da003d15 	stw	r8,244(sp)
    6b3c:	000aefc0 	call	aefc <memchr>
    6b40:	da003d17 	ldw	r8,244(sp)
    6b44:	10045426 	beq	r2,zero,7c98 <___vfprintf_internal_r+0x1da0>
    6b48:	1405c83a 	sub	r2,r2,r16
    6b4c:	d8802e15 	stw	r2,184(sp)
    6b50:	1003cc16 	blt	r2,zero,7a84 <___vfprintf_internal_r+0x1b8c>
    6b54:	df002783 	ldbu	fp,158(sp)
    6b58:	d8802a15 	stw	r2,168(sp)
    6b5c:	dcc02d15 	stw	r19,180(sp)
    6b60:	d8002915 	stw	zero,164(sp)
    6b64:	d8003215 	stw	zero,200(sp)
    6b68:	003eb006 	br	662c <__alt_data_end+0xff00662c>
    6b6c:	18c03fcc 	andi	r3,r3,255
    6b70:	183f9b26 	beq	r3,zero,69e0 <__alt_data_end+0xff0069e0>
    6b74:	d9c02785 	stb	r7,158(sp)
    6b78:	003f9906 	br	69e0 <__alt_data_end+0xff0069e0>
    6b7c:	18c03fcc 	andi	r3,r3,255
    6b80:	1805551e 	bne	r3,zero,80d8 <___vfprintf_internal_r+0x21e0>
    6b84:	01400074 	movhi	r5,1
    6b88:	29515804 	addi	r5,r5,17760
    6b8c:	d9403915 	stw	r5,228(sp)
    6b90:	9080080c 	andi	r2,r18,32
    6b94:	103fae1e 	bne	r2,zero,6a50 <__alt_data_end+0xff006a50>
    6b98:	9080040c 	andi	r2,r18,16
    6b9c:	1002de26 	beq	r2,zero,7718 <___vfprintf_internal_r+0x1820>
    6ba0:	d8c02d17 	ldw	r3,180(sp)
    6ba4:	002d883a 	mov	r22,zero
    6ba8:	1cc00017 	ldw	r19,0(r3)
    6bac:	18c00104 	addi	r3,r3,4
    6bb0:	d8c02d15 	stw	r3,180(sp)
    6bb4:	003fab06 	br	6a64 <__alt_data_end+0xff006a64>
    6bb8:	38803fcc 	andi	r2,r7,255
    6bbc:	1080201c 	xori	r2,r2,128
    6bc0:	10bfe004 	addi	r2,r2,-128
    6bc4:	1002d21e 	bne	r2,zero,7710 <___vfprintf_internal_r+0x1818>
    6bc8:	00c00044 	movi	r3,1
    6bcc:	01c00804 	movi	r7,32
    6bd0:	ac400007 	ldb	r17,0(r21)
    6bd4:	003d2906 	br	607c <__alt_data_end+0xff00607c>
    6bd8:	94800054 	ori	r18,r18,1
    6bdc:	ac400007 	ldb	r17,0(r21)
    6be0:	003d2606 	br	607c <__alt_data_end+0xff00607c>
    6be4:	18c03fcc 	andi	r3,r3,255
    6be8:	183e0526 	beq	r3,zero,6400 <__alt_data_end+0xff006400>
    6bec:	d9c02785 	stb	r7,158(sp)
    6bf0:	003e0306 	br	6400 <__alt_data_end+0xff006400>
    6bf4:	94801014 	ori	r18,r18,64
    6bf8:	ac400007 	ldb	r17,0(r21)
    6bfc:	003d1f06 	br	607c <__alt_data_end+0xff00607c>
    6c00:	ac400007 	ldb	r17,0(r21)
    6c04:	8a438726 	beq	r17,r9,7a24 <___vfprintf_internal_r+0x1b2c>
    6c08:	94800414 	ori	r18,r18,16
    6c0c:	003d1b06 	br	607c <__alt_data_end+0xff00607c>
    6c10:	18c03fcc 	andi	r3,r3,255
    6c14:	1805341e 	bne	r3,zero,80e8 <___vfprintf_internal_r+0x21f0>
    6c18:	9080080c 	andi	r2,r18,32
    6c1c:	1002cd26 	beq	r2,zero,7754 <___vfprintf_internal_r+0x185c>
    6c20:	d9402d17 	ldw	r5,180(sp)
    6c24:	d9002f17 	ldw	r4,188(sp)
    6c28:	28800017 	ldw	r2,0(r5)
    6c2c:	2007d7fa 	srai	r3,r4,31
    6c30:	29400104 	addi	r5,r5,4
    6c34:	d9402d15 	stw	r5,180(sp)
    6c38:	11000015 	stw	r4,0(r2)
    6c3c:	10c00115 	stw	r3,4(r2)
    6c40:	003ce506 	br	5fd8 <__alt_data_end+0xff005fd8>
    6c44:	d8c02d17 	ldw	r3,180(sp)
    6c48:	d9002d17 	ldw	r4,180(sp)
    6c4c:	d8002785 	stb	zero,158(sp)
    6c50:	18800017 	ldw	r2,0(r3)
    6c54:	21000104 	addi	r4,r4,4
    6c58:	00c00044 	movi	r3,1
    6c5c:	d8c02a15 	stw	r3,168(sp)
    6c60:	d8801405 	stb	r2,80(sp)
    6c64:	d9002d15 	stw	r4,180(sp)
    6c68:	d8c02e15 	stw	r3,184(sp)
    6c6c:	d8002915 	stw	zero,164(sp)
    6c70:	d8003215 	stw	zero,200(sp)
    6c74:	dc001404 	addi	r16,sp,80
    6c78:	0039883a 	mov	fp,zero
    6c7c:	003e7206 	br	6648 <__alt_data_end+0xff006648>
    6c80:	01000074 	movhi	r4,1
    6c84:	21115804 	addi	r4,r4,17760
    6c88:	0039883a 	mov	fp,zero
    6c8c:	d9003915 	stw	r4,228(sp)
    6c90:	04401e04 	movi	r17,120
    6c94:	003f8206 	br	6aa0 <__alt_data_end+0xff006aa0>
    6c98:	18c03fcc 	andi	r3,r3,255
    6c9c:	1805061e 	bne	r3,zero,80b8 <___vfprintf_internal_r+0x21c0>
    6ca0:	883d9126 	beq	r17,zero,62e8 <__alt_data_end+0xff0062e8>
    6ca4:	00c00044 	movi	r3,1
    6ca8:	d8c02a15 	stw	r3,168(sp)
    6cac:	dc401405 	stb	r17,80(sp)
    6cb0:	d8002785 	stb	zero,158(sp)
    6cb4:	003fec06 	br	6c68 <__alt_data_end+0xff006c68>
    6cb8:	01400074 	movhi	r5,1
    6cbc:	29515804 	addi	r5,r5,17760
    6cc0:	d9403915 	stw	r5,228(sp)
    6cc4:	d8c02d15 	stw	r3,180(sp)
    6cc8:	1025883a 	mov	r18,r2
    6ccc:	04401e04 	movi	r17,120
    6cd0:	9d84b03a 	or	r2,r19,r22
    6cd4:	1000fc1e 	bne	r2,zero,70c8 <___vfprintf_internal_r+0x11d0>
    6cd8:	0039883a 	mov	fp,zero
    6cdc:	00800084 	movi	r2,2
    6ce0:	10803fcc 	andi	r2,r2,255
    6ce4:	00c00044 	movi	r3,1
    6ce8:	10c20f26 	beq	r2,r3,7528 <___vfprintf_internal_r+0x1630>
    6cec:	00c00084 	movi	r3,2
    6cf0:	10fd6326 	beq	r2,r3,6280 <__alt_data_end+0xff006280>
    6cf4:	003e2d06 	br	65ac <__alt_data_end+0xff0065ac>
    6cf8:	d8c02017 	ldw	r3,128(sp)
    6cfc:	003e9306 	br	674c <__alt_data_end+0xff00674c>
    6d00:	00801944 	movi	r2,101
    6d04:	14407e0e 	bge	r2,r17,6f00 <___vfprintf_internal_r+0x1008>
    6d08:	d9003617 	ldw	r4,216(sp)
    6d0c:	d9403817 	ldw	r5,224(sp)
    6d10:	000d883a 	mov	r6,zero
    6d14:	000f883a 	mov	r7,zero
    6d18:	d8c03c15 	stw	r3,240(sp)
    6d1c:	da003d15 	stw	r8,244(sp)
    6d20:	000fe700 	call	fe70 <__eqdf2>
    6d24:	d8c03c17 	ldw	r3,240(sp)
    6d28:	da003d17 	ldw	r8,244(sp)
    6d2c:	1000f71e 	bne	r2,zero,710c <___vfprintf_internal_r+0x1214>
    6d30:	d8801f17 	ldw	r2,124(sp)
    6d34:	01000074 	movhi	r4,1
    6d38:	21115f04 	addi	r4,r4,17788
    6d3c:	18c00044 	addi	r3,r3,1
    6d40:	10800044 	addi	r2,r2,1
    6d44:	41000015 	stw	r4,0(r8)
    6d48:	01000044 	movi	r4,1
    6d4c:	41000115 	stw	r4,4(r8)
    6d50:	d8c02015 	stw	r3,128(sp)
    6d54:	d8801f15 	stw	r2,124(sp)
    6d58:	010001c4 	movi	r4,7
    6d5c:	2082b816 	blt	r4,r2,7840 <___vfprintf_internal_r+0x1948>
    6d60:	42000204 	addi	r8,r8,8
    6d64:	d8802617 	ldw	r2,152(sp)
    6d68:	d9403317 	ldw	r5,204(sp)
    6d6c:	11400216 	blt	r2,r5,6d78 <___vfprintf_internal_r+0xe80>
    6d70:	9080004c 	andi	r2,r18,1
    6d74:	103ed526 	beq	r2,zero,68cc <__alt_data_end+0xff0068cc>
    6d78:	d8803717 	ldw	r2,220(sp)
    6d7c:	d9003417 	ldw	r4,208(sp)
    6d80:	d9403717 	ldw	r5,220(sp)
    6d84:	1887883a 	add	r3,r3,r2
    6d88:	d8801f17 	ldw	r2,124(sp)
    6d8c:	41000015 	stw	r4,0(r8)
    6d90:	41400115 	stw	r5,4(r8)
    6d94:	10800044 	addi	r2,r2,1
    6d98:	d8c02015 	stw	r3,128(sp)
    6d9c:	d8801f15 	stw	r2,124(sp)
    6da0:	010001c4 	movi	r4,7
    6da4:	20832916 	blt	r4,r2,7a4c <___vfprintf_internal_r+0x1b54>
    6da8:	42000204 	addi	r8,r8,8
    6dac:	d8803317 	ldw	r2,204(sp)
    6db0:	143fffc4 	addi	r16,r2,-1
    6db4:	043ec50e 	bge	zero,r16,68cc <__alt_data_end+0xff0068cc>
    6db8:	04400404 	movi	r17,16
    6dbc:	d8801f17 	ldw	r2,124(sp)
    6dc0:	8c00880e 	bge	r17,r16,6fe4 <___vfprintf_internal_r+0x10ec>
    6dc4:	01400074 	movhi	r5,1
    6dc8:	29515f84 	addi	r5,r5,17790
    6dcc:	d9402b15 	stw	r5,172(sp)
    6dd0:	058001c4 	movi	r22,7
    6dd4:	dcc02c17 	ldw	r19,176(sp)
    6dd8:	00000306 	br	6de8 <___vfprintf_internal_r+0xef0>
    6ddc:	42000204 	addi	r8,r8,8
    6de0:	843ffc04 	addi	r16,r16,-16
    6de4:	8c00820e 	bge	r17,r16,6ff0 <___vfprintf_internal_r+0x10f8>
    6de8:	18c00404 	addi	r3,r3,16
    6dec:	10800044 	addi	r2,r2,1
    6df0:	45000015 	stw	r20,0(r8)
    6df4:	44400115 	stw	r17,4(r8)
    6df8:	d8c02015 	stw	r3,128(sp)
    6dfc:	d8801f15 	stw	r2,124(sp)
    6e00:	b0bff60e 	bge	r22,r2,6ddc <__alt_data_end+0xff006ddc>
    6e04:	d9801e04 	addi	r6,sp,120
    6e08:	b80b883a 	mov	r5,r23
    6e0c:	9809883a 	mov	r4,r19
    6e10:	000cc940 	call	cc94 <__sprint_r>
    6e14:	103d3a1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    6e18:	d8c02017 	ldw	r3,128(sp)
    6e1c:	d8801f17 	ldw	r2,124(sp)
    6e20:	da000404 	addi	r8,sp,16
    6e24:	003fee06 	br	6de0 <__alt_data_end+0xff006de0>
    6e28:	d9403117 	ldw	r5,196(sp)
    6e2c:	d8802a17 	ldw	r2,168(sp)
    6e30:	28adc83a 	sub	r22,r5,r2
    6e34:	05be630e 	bge	zero,r22,67c4 <__alt_data_end+0xff0067c4>
    6e38:	07000404 	movi	fp,16
    6e3c:	d8801f17 	ldw	r2,124(sp)
    6e40:	e5838f0e 	bge	fp,r22,7c80 <___vfprintf_internal_r+0x1d88>
    6e44:	01400074 	movhi	r5,1
    6e48:	29515f84 	addi	r5,r5,17790
    6e4c:	dc403015 	stw	r17,192(sp)
    6e50:	d9402b15 	stw	r5,172(sp)
    6e54:	b023883a 	mov	r17,r22
    6e58:	04c001c4 	movi	r19,7
    6e5c:	a82d883a 	mov	r22,r21
    6e60:	902b883a 	mov	r21,r18
    6e64:	8025883a 	mov	r18,r16
    6e68:	dc002c17 	ldw	r16,176(sp)
    6e6c:	00000306 	br	6e7c <___vfprintf_internal_r+0xf84>
    6e70:	8c7ffc04 	addi	r17,r17,-16
    6e74:	42000204 	addi	r8,r8,8
    6e78:	e440110e 	bge	fp,r17,6ec0 <___vfprintf_internal_r+0xfc8>
    6e7c:	18c00404 	addi	r3,r3,16
    6e80:	10800044 	addi	r2,r2,1
    6e84:	45000015 	stw	r20,0(r8)
    6e88:	47000115 	stw	fp,4(r8)
    6e8c:	d8c02015 	stw	r3,128(sp)
    6e90:	d8801f15 	stw	r2,124(sp)
    6e94:	98bff60e 	bge	r19,r2,6e70 <__alt_data_end+0xff006e70>
    6e98:	d9801e04 	addi	r6,sp,120
    6e9c:	b80b883a 	mov	r5,r23
    6ea0:	8009883a 	mov	r4,r16
    6ea4:	000cc940 	call	cc94 <__sprint_r>
    6ea8:	103d151e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    6eac:	8c7ffc04 	addi	r17,r17,-16
    6eb0:	d8c02017 	ldw	r3,128(sp)
    6eb4:	d8801f17 	ldw	r2,124(sp)
    6eb8:	da000404 	addi	r8,sp,16
    6ebc:	e47fef16 	blt	fp,r17,6e7c <__alt_data_end+0xff006e7c>
    6ec0:	9021883a 	mov	r16,r18
    6ec4:	a825883a 	mov	r18,r21
    6ec8:	b02b883a 	mov	r21,r22
    6ecc:	882d883a 	mov	r22,r17
    6ed0:	dc403017 	ldw	r17,192(sp)
    6ed4:	d9002b17 	ldw	r4,172(sp)
    6ed8:	1d87883a 	add	r3,r3,r22
    6edc:	10800044 	addi	r2,r2,1
    6ee0:	41000015 	stw	r4,0(r8)
    6ee4:	45800115 	stw	r22,4(r8)
    6ee8:	d8c02015 	stw	r3,128(sp)
    6eec:	d8801f15 	stw	r2,124(sp)
    6ef0:	010001c4 	movi	r4,7
    6ef4:	20818e16 	blt	r4,r2,7530 <___vfprintf_internal_r+0x1638>
    6ef8:	42000204 	addi	r8,r8,8
    6efc:	003e3106 	br	67c4 <__alt_data_end+0xff0067c4>
    6f00:	d9403317 	ldw	r5,204(sp)
    6f04:	00800044 	movi	r2,1
    6f08:	18c00044 	addi	r3,r3,1
    6f0c:	1141530e 	bge	r2,r5,745c <___vfprintf_internal_r+0x1564>
    6f10:	dc401f17 	ldw	r17,124(sp)
    6f14:	00800044 	movi	r2,1
    6f18:	40800115 	stw	r2,4(r8)
    6f1c:	8c400044 	addi	r17,r17,1
    6f20:	44000015 	stw	r16,0(r8)
    6f24:	d8c02015 	stw	r3,128(sp)
    6f28:	dc401f15 	stw	r17,124(sp)
    6f2c:	008001c4 	movi	r2,7
    6f30:	14416b16 	blt	r2,r17,74e0 <___vfprintf_internal_r+0x15e8>
    6f34:	42000204 	addi	r8,r8,8
    6f38:	d8803717 	ldw	r2,220(sp)
    6f3c:	d9003417 	ldw	r4,208(sp)
    6f40:	8c400044 	addi	r17,r17,1
    6f44:	10c7883a 	add	r3,r2,r3
    6f48:	40800115 	stw	r2,4(r8)
    6f4c:	41000015 	stw	r4,0(r8)
    6f50:	d8c02015 	stw	r3,128(sp)
    6f54:	dc401f15 	stw	r17,124(sp)
    6f58:	008001c4 	movi	r2,7
    6f5c:	14416916 	blt	r2,r17,7504 <___vfprintf_internal_r+0x160c>
    6f60:	45800204 	addi	r22,r8,8
    6f64:	d9003617 	ldw	r4,216(sp)
    6f68:	d9403817 	ldw	r5,224(sp)
    6f6c:	000d883a 	mov	r6,zero
    6f70:	000f883a 	mov	r7,zero
    6f74:	d8c03c15 	stw	r3,240(sp)
    6f78:	000fe700 	call	fe70 <__eqdf2>
    6f7c:	d8c03c17 	ldw	r3,240(sp)
    6f80:	1000bc26 	beq	r2,zero,7274 <___vfprintf_internal_r+0x137c>
    6f84:	d9403317 	ldw	r5,204(sp)
    6f88:	84000044 	addi	r16,r16,1
    6f8c:	8c400044 	addi	r17,r17,1
    6f90:	28bfffc4 	addi	r2,r5,-1
    6f94:	1887883a 	add	r3,r3,r2
    6f98:	b0800115 	stw	r2,4(r22)
    6f9c:	b4000015 	stw	r16,0(r22)
    6fa0:	d8c02015 	stw	r3,128(sp)
    6fa4:	dc401f15 	stw	r17,124(sp)
    6fa8:	008001c4 	movi	r2,7
    6fac:	14414316 	blt	r2,r17,74bc <___vfprintf_internal_r+0x15c4>
    6fb0:	b5800204 	addi	r22,r22,8
    6fb4:	d9003a17 	ldw	r4,232(sp)
    6fb8:	df0022c4 	addi	fp,sp,139
    6fbc:	8c400044 	addi	r17,r17,1
    6fc0:	20c7883a 	add	r3,r4,r3
    6fc4:	b7000015 	stw	fp,0(r22)
    6fc8:	b1000115 	stw	r4,4(r22)
    6fcc:	d8c02015 	stw	r3,128(sp)
    6fd0:	dc401f15 	stw	r17,124(sp)
    6fd4:	008001c4 	movi	r2,7
    6fd8:	14400e16 	blt	r2,r17,7014 <___vfprintf_internal_r+0x111c>
    6fdc:	b2000204 	addi	r8,r22,8
    6fe0:	003e3a06 	br	68cc <__alt_data_end+0xff0068cc>
    6fe4:	01000074 	movhi	r4,1
    6fe8:	21115f84 	addi	r4,r4,17790
    6fec:	d9002b15 	stw	r4,172(sp)
    6ff0:	d9002b17 	ldw	r4,172(sp)
    6ff4:	1c07883a 	add	r3,r3,r16
    6ff8:	44000115 	stw	r16,4(r8)
    6ffc:	41000015 	stw	r4,0(r8)
    7000:	10800044 	addi	r2,r2,1
    7004:	d8c02015 	stw	r3,128(sp)
    7008:	d8801f15 	stw	r2,124(sp)
    700c:	010001c4 	movi	r4,7
    7010:	20be2d0e 	bge	r4,r2,68c8 <__alt_data_end+0xff0068c8>
    7014:	d9002c17 	ldw	r4,176(sp)
    7018:	d9801e04 	addi	r6,sp,120
    701c:	b80b883a 	mov	r5,r23
    7020:	000cc940 	call	cc94 <__sprint_r>
    7024:	103cb61e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7028:	d8c02017 	ldw	r3,128(sp)
    702c:	da000404 	addi	r8,sp,16
    7030:	003e2606 	br	68cc <__alt_data_end+0xff0068cc>
    7034:	d9002c17 	ldw	r4,176(sp)
    7038:	d9801e04 	addi	r6,sp,120
    703c:	b80b883a 	mov	r5,r23
    7040:	000cc940 	call	cc94 <__sprint_r>
    7044:	103e5d26 	beq	r2,zero,69bc <__alt_data_end+0xff0069bc>
    7048:	003cad06 	br	6300 <__alt_data_end+0xff006300>
    704c:	d9002c17 	ldw	r4,176(sp)
    7050:	d9801e04 	addi	r6,sp,120
    7054:	b80b883a 	mov	r5,r23
    7058:	000cc940 	call	cc94 <__sprint_r>
    705c:	103ca81e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7060:	d8c02017 	ldw	r3,128(sp)
    7064:	da000404 	addi	r8,sp,16
    7068:	003e0b06 	br	6898 <__alt_data_end+0xff006898>
    706c:	d9002c17 	ldw	r4,176(sp)
    7070:	d9801e04 	addi	r6,sp,120
    7074:	b80b883a 	mov	r5,r23
    7078:	000cc940 	call	cc94 <__sprint_r>
    707c:	103ca01e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7080:	d8c02017 	ldw	r3,128(sp)
    7084:	da000404 	addi	r8,sp,16
    7088:	003dbd06 	br	6780 <__alt_data_end+0xff006780>
    708c:	d9002c17 	ldw	r4,176(sp)
    7090:	d9801e04 	addi	r6,sp,120
    7094:	b80b883a 	mov	r5,r23
    7098:	000cc940 	call	cc94 <__sprint_r>
    709c:	103c981e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    70a0:	d8c02017 	ldw	r3,128(sp)
    70a4:	da000404 	addi	r8,sp,16
    70a8:	003dc306 	br	67b8 <__alt_data_end+0xff0067b8>
    70ac:	d8802917 	ldw	r2,164(sp)
    70b0:	d8002785 	stb	zero,158(sp)
    70b4:	103f0616 	blt	r2,zero,6cd0 <__alt_data_end+0xff006cd0>
    70b8:	00ffdfc4 	movi	r3,-129
    70bc:	9d84b03a 	or	r2,r19,r22
    70c0:	90e4703a 	and	r18,r18,r3
    70c4:	103c6b26 	beq	r2,zero,6274 <__alt_data_end+0xff006274>
    70c8:	0039883a 	mov	fp,zero
    70cc:	003e7406 	br	6aa0 <__alt_data_end+0xff006aa0>
    70d0:	9080040c 	andi	r2,r18,16
    70d4:	1001b326 	beq	r2,zero,77a4 <___vfprintf_internal_r+0x18ac>
    70d8:	d9002d17 	ldw	r4,180(sp)
    70dc:	d9402917 	ldw	r5,164(sp)
    70e0:	d8002785 	stb	zero,158(sp)
    70e4:	20800104 	addi	r2,r4,4
    70e8:	24c00017 	ldw	r19,0(r4)
    70ec:	002d883a 	mov	r22,zero
    70f0:	2801b516 	blt	r5,zero,77c8 <___vfprintf_internal_r+0x18d0>
    70f4:	00ffdfc4 	movi	r3,-129
    70f8:	d8802d15 	stw	r2,180(sp)
    70fc:	90e4703a 	and	r18,r18,r3
    7100:	983d2726 	beq	r19,zero,65a0 <__alt_data_end+0xff0065a0>
    7104:	0039883a 	mov	fp,zero
    7108:	003d2a06 	br	65b4 <__alt_data_end+0xff0065b4>
    710c:	dc402617 	ldw	r17,152(sp)
    7110:	0441d30e 	bge	zero,r17,7860 <___vfprintf_internal_r+0x1968>
    7114:	dc403217 	ldw	r17,200(sp)
    7118:	d8803317 	ldw	r2,204(sp)
    711c:	1440010e 	bge	r2,r17,7124 <___vfprintf_internal_r+0x122c>
    7120:	1023883a 	mov	r17,r2
    7124:	04400a0e 	bge	zero,r17,7150 <___vfprintf_internal_r+0x1258>
    7128:	d8801f17 	ldw	r2,124(sp)
    712c:	1c47883a 	add	r3,r3,r17
    7130:	44000015 	stw	r16,0(r8)
    7134:	10800044 	addi	r2,r2,1
    7138:	44400115 	stw	r17,4(r8)
    713c:	d8c02015 	stw	r3,128(sp)
    7140:	d8801f15 	stw	r2,124(sp)
    7144:	010001c4 	movi	r4,7
    7148:	20826516 	blt	r4,r2,7ae0 <___vfprintf_internal_r+0x1be8>
    714c:	42000204 	addi	r8,r8,8
    7150:	88026116 	blt	r17,zero,7ad8 <___vfprintf_internal_r+0x1be0>
    7154:	d9003217 	ldw	r4,200(sp)
    7158:	2463c83a 	sub	r17,r4,r17
    715c:	04407b0e 	bge	zero,r17,734c <___vfprintf_internal_r+0x1454>
    7160:	05800404 	movi	r22,16
    7164:	d8801f17 	ldw	r2,124(sp)
    7168:	b4419d0e 	bge	r22,r17,77e0 <___vfprintf_internal_r+0x18e8>
    716c:	01000074 	movhi	r4,1
    7170:	21115f84 	addi	r4,r4,17790
    7174:	d9002b15 	stw	r4,172(sp)
    7178:	070001c4 	movi	fp,7
    717c:	dcc02c17 	ldw	r19,176(sp)
    7180:	00000306 	br	7190 <___vfprintf_internal_r+0x1298>
    7184:	42000204 	addi	r8,r8,8
    7188:	8c7ffc04 	addi	r17,r17,-16
    718c:	b441970e 	bge	r22,r17,77ec <___vfprintf_internal_r+0x18f4>
    7190:	18c00404 	addi	r3,r3,16
    7194:	10800044 	addi	r2,r2,1
    7198:	45000015 	stw	r20,0(r8)
    719c:	45800115 	stw	r22,4(r8)
    71a0:	d8c02015 	stw	r3,128(sp)
    71a4:	d8801f15 	stw	r2,124(sp)
    71a8:	e0bff60e 	bge	fp,r2,7184 <__alt_data_end+0xff007184>
    71ac:	d9801e04 	addi	r6,sp,120
    71b0:	b80b883a 	mov	r5,r23
    71b4:	9809883a 	mov	r4,r19
    71b8:	000cc940 	call	cc94 <__sprint_r>
    71bc:	103c501e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    71c0:	d8c02017 	ldw	r3,128(sp)
    71c4:	d8801f17 	ldw	r2,124(sp)
    71c8:	da000404 	addi	r8,sp,16
    71cc:	003fee06 	br	7188 <__alt_data_end+0xff007188>
    71d0:	d9002c17 	ldw	r4,176(sp)
    71d4:	d9801e04 	addi	r6,sp,120
    71d8:	b80b883a 	mov	r5,r23
    71dc:	000cc940 	call	cc94 <__sprint_r>
    71e0:	103c471e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    71e4:	d8c02017 	ldw	r3,128(sp)
    71e8:	df002787 	ldb	fp,158(sp)
    71ec:	da000404 	addi	r8,sp,16
    71f0:	003d5606 	br	674c <__alt_data_end+0xff00674c>
    71f4:	9080040c 	andi	r2,r18,16
    71f8:	10016126 	beq	r2,zero,7780 <___vfprintf_internal_r+0x1888>
    71fc:	d8802d17 	ldw	r2,180(sp)
    7200:	14c00017 	ldw	r19,0(r2)
    7204:	10800104 	addi	r2,r2,4
    7208:	d8802d15 	stw	r2,180(sp)
    720c:	982dd7fa 	srai	r22,r19,31
    7210:	b005883a 	mov	r2,r22
    7214:	003c8206 	br	6420 <__alt_data_end+0xff006420>
    7218:	9080040c 	andi	r2,r18,16
    721c:	10003526 	beq	r2,zero,72f4 <___vfprintf_internal_r+0x13fc>
    7220:	d9402d17 	ldw	r5,180(sp)
    7224:	d8c02917 	ldw	r3,164(sp)
    7228:	d8002785 	stb	zero,158(sp)
    722c:	28800104 	addi	r2,r5,4
    7230:	2cc00017 	ldw	r19,0(r5)
    7234:	002d883a 	mov	r22,zero
    7238:	18003716 	blt	r3,zero,7318 <___vfprintf_internal_r+0x1420>
    723c:	00ffdfc4 	movi	r3,-129
    7240:	d8802d15 	stw	r2,180(sp)
    7244:	90e4703a 	and	r18,r18,r3
    7248:	0039883a 	mov	fp,zero
    724c:	983df326 	beq	r19,zero,6a1c <__alt_data_end+0xff006a1c>
    7250:	00800244 	movi	r2,9
    7254:	14fc7b36 	bltu	r2,r19,6444 <__alt_data_end+0xff006444>
    7258:	d8c02817 	ldw	r3,160(sp)
    725c:	dc001dc4 	addi	r16,sp,119
    7260:	9cc00c04 	addi	r19,r19,48
    7264:	1c07c83a 	sub	r3,r3,r16
    7268:	dcc01dc5 	stb	r19,119(sp)
    726c:	d8c02e15 	stw	r3,184(sp)
    7270:	003ce806 	br	6614 <__alt_data_end+0xff006614>
    7274:	d8803317 	ldw	r2,204(sp)
    7278:	143fffc4 	addi	r16,r2,-1
    727c:	043f4d0e 	bge	zero,r16,6fb4 <__alt_data_end+0xff006fb4>
    7280:	07000404 	movi	fp,16
    7284:	e400810e 	bge	fp,r16,748c <___vfprintf_internal_r+0x1594>
    7288:	01400074 	movhi	r5,1
    728c:	29515f84 	addi	r5,r5,17790
    7290:	d9402b15 	stw	r5,172(sp)
    7294:	01c001c4 	movi	r7,7
    7298:	dcc02c17 	ldw	r19,176(sp)
    729c:	00000306 	br	72ac <___vfprintf_internal_r+0x13b4>
    72a0:	b5800204 	addi	r22,r22,8
    72a4:	843ffc04 	addi	r16,r16,-16
    72a8:	e4007b0e 	bge	fp,r16,7498 <___vfprintf_internal_r+0x15a0>
    72ac:	18c00404 	addi	r3,r3,16
    72b0:	8c400044 	addi	r17,r17,1
    72b4:	b5000015 	stw	r20,0(r22)
    72b8:	b7000115 	stw	fp,4(r22)
    72bc:	d8c02015 	stw	r3,128(sp)
    72c0:	dc401f15 	stw	r17,124(sp)
    72c4:	3c7ff60e 	bge	r7,r17,72a0 <__alt_data_end+0xff0072a0>
    72c8:	d9801e04 	addi	r6,sp,120
    72cc:	b80b883a 	mov	r5,r23
    72d0:	9809883a 	mov	r4,r19
    72d4:	d9c03c15 	stw	r7,240(sp)
    72d8:	000cc940 	call	cc94 <__sprint_r>
    72dc:	d9c03c17 	ldw	r7,240(sp)
    72e0:	103c071e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    72e4:	d8c02017 	ldw	r3,128(sp)
    72e8:	dc401f17 	ldw	r17,124(sp)
    72ec:	dd800404 	addi	r22,sp,16
    72f0:	003fec06 	br	72a4 <__alt_data_end+0xff0072a4>
    72f4:	9080100c 	andi	r2,r18,64
    72f8:	d8002785 	stb	zero,158(sp)
    72fc:	10010e26 	beq	r2,zero,7738 <___vfprintf_internal_r+0x1840>
    7300:	d9002d17 	ldw	r4,180(sp)
    7304:	d9402917 	ldw	r5,164(sp)
    7308:	002d883a 	mov	r22,zero
    730c:	20800104 	addi	r2,r4,4
    7310:	24c0000b 	ldhu	r19,0(r4)
    7314:	283fc90e 	bge	r5,zero,723c <__alt_data_end+0xff00723c>
    7318:	d8802d15 	stw	r2,180(sp)
    731c:	0039883a 	mov	fp,zero
    7320:	9d84b03a 	or	r2,r19,r22
    7324:	103c461e 	bne	r2,zero,6440 <__alt_data_end+0xff006440>
    7328:	00800044 	movi	r2,1
    732c:	003e6c06 	br	6ce0 <__alt_data_end+0xff006ce0>
    7330:	d9002c17 	ldw	r4,176(sp)
    7334:	d9801e04 	addi	r6,sp,120
    7338:	b80b883a 	mov	r5,r23
    733c:	000cc940 	call	cc94 <__sprint_r>
    7340:	103bef1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7344:	d8c02017 	ldw	r3,128(sp)
    7348:	da000404 	addi	r8,sp,16
    734c:	d9003217 	ldw	r4,200(sp)
    7350:	d8802617 	ldw	r2,152(sp)
    7354:	d9403317 	ldw	r5,204(sp)
    7358:	8123883a 	add	r17,r16,r4
    735c:	11400216 	blt	r2,r5,7368 <___vfprintf_internal_r+0x1470>
    7360:	9100004c 	andi	r4,r18,1
    7364:	20000d26 	beq	r4,zero,739c <___vfprintf_internal_r+0x14a4>
    7368:	d9003717 	ldw	r4,220(sp)
    736c:	d9403417 	ldw	r5,208(sp)
    7370:	1907883a 	add	r3,r3,r4
    7374:	d9001f17 	ldw	r4,124(sp)
    7378:	41400015 	stw	r5,0(r8)
    737c:	d9403717 	ldw	r5,220(sp)
    7380:	21000044 	addi	r4,r4,1
    7384:	d8c02015 	stw	r3,128(sp)
    7388:	41400115 	stw	r5,4(r8)
    738c:	d9001f15 	stw	r4,124(sp)
    7390:	014001c4 	movi	r5,7
    7394:	2901e816 	blt	r5,r4,7b38 <___vfprintf_internal_r+0x1c40>
    7398:	42000204 	addi	r8,r8,8
    739c:	d9003317 	ldw	r4,204(sp)
    73a0:	8121883a 	add	r16,r16,r4
    73a4:	2085c83a 	sub	r2,r4,r2
    73a8:	8461c83a 	sub	r16,r16,r17
    73ac:	1400010e 	bge	r2,r16,73b4 <___vfprintf_internal_r+0x14bc>
    73b0:	1021883a 	mov	r16,r2
    73b4:	04000a0e 	bge	zero,r16,73e0 <___vfprintf_internal_r+0x14e8>
    73b8:	d9001f17 	ldw	r4,124(sp)
    73bc:	1c07883a 	add	r3,r3,r16
    73c0:	44400015 	stw	r17,0(r8)
    73c4:	21000044 	addi	r4,r4,1
    73c8:	44000115 	stw	r16,4(r8)
    73cc:	d8c02015 	stw	r3,128(sp)
    73d0:	d9001f15 	stw	r4,124(sp)
    73d4:	014001c4 	movi	r5,7
    73d8:	2901fb16 	blt	r5,r4,7bc8 <___vfprintf_internal_r+0x1cd0>
    73dc:	42000204 	addi	r8,r8,8
    73e0:	8001f716 	blt	r16,zero,7bc0 <___vfprintf_internal_r+0x1cc8>
    73e4:	1421c83a 	sub	r16,r2,r16
    73e8:	043d380e 	bge	zero,r16,68cc <__alt_data_end+0xff0068cc>
    73ec:	04400404 	movi	r17,16
    73f0:	d8801f17 	ldw	r2,124(sp)
    73f4:	8c3efb0e 	bge	r17,r16,6fe4 <__alt_data_end+0xff006fe4>
    73f8:	01400074 	movhi	r5,1
    73fc:	29515f84 	addi	r5,r5,17790
    7400:	d9402b15 	stw	r5,172(sp)
    7404:	058001c4 	movi	r22,7
    7408:	dcc02c17 	ldw	r19,176(sp)
    740c:	00000306 	br	741c <___vfprintf_internal_r+0x1524>
    7410:	42000204 	addi	r8,r8,8
    7414:	843ffc04 	addi	r16,r16,-16
    7418:	8c3ef50e 	bge	r17,r16,6ff0 <__alt_data_end+0xff006ff0>
    741c:	18c00404 	addi	r3,r3,16
    7420:	10800044 	addi	r2,r2,1
    7424:	45000015 	stw	r20,0(r8)
    7428:	44400115 	stw	r17,4(r8)
    742c:	d8c02015 	stw	r3,128(sp)
    7430:	d8801f15 	stw	r2,124(sp)
    7434:	b0bff60e 	bge	r22,r2,7410 <__alt_data_end+0xff007410>
    7438:	d9801e04 	addi	r6,sp,120
    743c:	b80b883a 	mov	r5,r23
    7440:	9809883a 	mov	r4,r19
    7444:	000cc940 	call	cc94 <__sprint_r>
    7448:	103bad1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    744c:	d8c02017 	ldw	r3,128(sp)
    7450:	d8801f17 	ldw	r2,124(sp)
    7454:	da000404 	addi	r8,sp,16
    7458:	003fee06 	br	7414 <__alt_data_end+0xff007414>
    745c:	9088703a 	and	r4,r18,r2
    7460:	203eab1e 	bne	r4,zero,6f10 <__alt_data_end+0xff006f10>
    7464:	dc401f17 	ldw	r17,124(sp)
    7468:	40800115 	stw	r2,4(r8)
    746c:	44000015 	stw	r16,0(r8)
    7470:	8c400044 	addi	r17,r17,1
    7474:	d8c02015 	stw	r3,128(sp)
    7478:	dc401f15 	stw	r17,124(sp)
    747c:	008001c4 	movi	r2,7
    7480:	14400e16 	blt	r2,r17,74bc <___vfprintf_internal_r+0x15c4>
    7484:	45800204 	addi	r22,r8,8
    7488:	003eca06 	br	6fb4 <__alt_data_end+0xff006fb4>
    748c:	01000074 	movhi	r4,1
    7490:	21115f84 	addi	r4,r4,17790
    7494:	d9002b15 	stw	r4,172(sp)
    7498:	d8802b17 	ldw	r2,172(sp)
    749c:	1c07883a 	add	r3,r3,r16
    74a0:	8c400044 	addi	r17,r17,1
    74a4:	b0800015 	stw	r2,0(r22)
    74a8:	b4000115 	stw	r16,4(r22)
    74ac:	d8c02015 	stw	r3,128(sp)
    74b0:	dc401f15 	stw	r17,124(sp)
    74b4:	008001c4 	movi	r2,7
    74b8:	147ebd0e 	bge	r2,r17,6fb0 <__alt_data_end+0xff006fb0>
    74bc:	d9002c17 	ldw	r4,176(sp)
    74c0:	d9801e04 	addi	r6,sp,120
    74c4:	b80b883a 	mov	r5,r23
    74c8:	000cc940 	call	cc94 <__sprint_r>
    74cc:	103b8c1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    74d0:	d8c02017 	ldw	r3,128(sp)
    74d4:	dc401f17 	ldw	r17,124(sp)
    74d8:	dd800404 	addi	r22,sp,16
    74dc:	003eb506 	br	6fb4 <__alt_data_end+0xff006fb4>
    74e0:	d9002c17 	ldw	r4,176(sp)
    74e4:	d9801e04 	addi	r6,sp,120
    74e8:	b80b883a 	mov	r5,r23
    74ec:	000cc940 	call	cc94 <__sprint_r>
    74f0:	103b831e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    74f4:	d8c02017 	ldw	r3,128(sp)
    74f8:	dc401f17 	ldw	r17,124(sp)
    74fc:	da000404 	addi	r8,sp,16
    7500:	003e8d06 	br	6f38 <__alt_data_end+0xff006f38>
    7504:	d9002c17 	ldw	r4,176(sp)
    7508:	d9801e04 	addi	r6,sp,120
    750c:	b80b883a 	mov	r5,r23
    7510:	000cc940 	call	cc94 <__sprint_r>
    7514:	103b7a1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7518:	d8c02017 	ldw	r3,128(sp)
    751c:	dc401f17 	ldw	r17,124(sp)
    7520:	dd800404 	addi	r22,sp,16
    7524:	003e8f06 	br	6f64 <__alt_data_end+0xff006f64>
    7528:	0027883a 	mov	r19,zero
    752c:	003f4a06 	br	7258 <__alt_data_end+0xff007258>
    7530:	d9002c17 	ldw	r4,176(sp)
    7534:	d9801e04 	addi	r6,sp,120
    7538:	b80b883a 	mov	r5,r23
    753c:	000cc940 	call	cc94 <__sprint_r>
    7540:	103b6f1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7544:	d8c02017 	ldw	r3,128(sp)
    7548:	da000404 	addi	r8,sp,16
    754c:	003c9d06 	br	67c4 <__alt_data_end+0xff0067c4>
    7550:	04e7c83a 	sub	r19,zero,r19
    7554:	9804c03a 	cmpne	r2,r19,zero
    7558:	05adc83a 	sub	r22,zero,r22
    755c:	b0adc83a 	sub	r22,r22,r2
    7560:	d8802917 	ldw	r2,164(sp)
    7564:	07000b44 	movi	fp,45
    7568:	df002785 	stb	fp,158(sp)
    756c:	10017b16 	blt	r2,zero,7b5c <___vfprintf_internal_r+0x1c64>
    7570:	00bfdfc4 	movi	r2,-129
    7574:	90a4703a 	and	r18,r18,r2
    7578:	003bb106 	br	6440 <__alt_data_end+0xff006440>
    757c:	d9003617 	ldw	r4,216(sp)
    7580:	d9403817 	ldw	r5,224(sp)
    7584:	da003d15 	stw	r8,244(sp)
    7588:	000c90c0 	call	c90c <__fpclassifyd>
    758c:	da003d17 	ldw	r8,244(sp)
    7590:	1000f026 	beq	r2,zero,7954 <___vfprintf_internal_r+0x1a5c>
    7594:	d9002917 	ldw	r4,164(sp)
    7598:	05bff7c4 	movi	r22,-33
    759c:	00bfffc4 	movi	r2,-1
    75a0:	8dac703a 	and	r22,r17,r22
    75a4:	20820026 	beq	r4,r2,7da8 <___vfprintf_internal_r+0x1eb0>
    75a8:	008011c4 	movi	r2,71
    75ac:	b081f726 	beq	r22,r2,7d8c <___vfprintf_internal_r+0x1e94>
    75b0:	d9003817 	ldw	r4,224(sp)
    75b4:	90c04014 	ori	r3,r18,256
    75b8:	d8c02b15 	stw	r3,172(sp)
    75bc:	20021516 	blt	r4,zero,7e14 <___vfprintf_internal_r+0x1f1c>
    75c0:	dcc03817 	ldw	r19,224(sp)
    75c4:	d8002a05 	stb	zero,168(sp)
    75c8:	00801984 	movi	r2,102
    75cc:	8881f926 	beq	r17,r2,7db4 <___vfprintf_internal_r+0x1ebc>
    75d0:	00801184 	movi	r2,70
    75d4:	88821c26 	beq	r17,r2,7e48 <___vfprintf_internal_r+0x1f50>
    75d8:	00801144 	movi	r2,69
    75dc:	b081ef26 	beq	r22,r2,7d9c <___vfprintf_internal_r+0x1ea4>
    75e0:	d8c02917 	ldw	r3,164(sp)
    75e4:	d8802104 	addi	r2,sp,132
    75e8:	d8800315 	stw	r2,12(sp)
    75ec:	d9403617 	ldw	r5,216(sp)
    75f0:	d8802504 	addi	r2,sp,148
    75f4:	d9002c17 	ldw	r4,176(sp)
    75f8:	d8800215 	stw	r2,8(sp)
    75fc:	d8802604 	addi	r2,sp,152
    7600:	d8c00015 	stw	r3,0(sp)
    7604:	d8800115 	stw	r2,4(sp)
    7608:	01c00084 	movi	r7,2
    760c:	980d883a 	mov	r6,r19
    7610:	d8c03c15 	stw	r3,240(sp)
    7614:	da003d15 	stw	r8,244(sp)
    7618:	000851c0 	call	851c <_dtoa_r>
    761c:	1021883a 	mov	r16,r2
    7620:	008019c4 	movi	r2,103
    7624:	d8c03c17 	ldw	r3,240(sp)
    7628:	da003d17 	ldw	r8,244(sp)
    762c:	88817126 	beq	r17,r2,7bf4 <___vfprintf_internal_r+0x1cfc>
    7630:	008011c4 	movi	r2,71
    7634:	88829226 	beq	r17,r2,8080 <___vfprintf_internal_r+0x2188>
    7638:	80f9883a 	add	fp,r16,r3
    763c:	d9003617 	ldw	r4,216(sp)
    7640:	000d883a 	mov	r6,zero
    7644:	000f883a 	mov	r7,zero
    7648:	980b883a 	mov	r5,r19
    764c:	da003d15 	stw	r8,244(sp)
    7650:	000fe700 	call	fe70 <__eqdf2>
    7654:	da003d17 	ldw	r8,244(sp)
    7658:	10018d26 	beq	r2,zero,7c90 <___vfprintf_internal_r+0x1d98>
    765c:	d8802117 	ldw	r2,132(sp)
    7660:	1700062e 	bgeu	r2,fp,767c <___vfprintf_internal_r+0x1784>
    7664:	01000c04 	movi	r4,48
    7668:	10c00044 	addi	r3,r2,1
    766c:	d8c02115 	stw	r3,132(sp)
    7670:	11000005 	stb	r4,0(r2)
    7674:	d8802117 	ldw	r2,132(sp)
    7678:	173ffb36 	bltu	r2,fp,7668 <__alt_data_end+0xff007668>
    767c:	1405c83a 	sub	r2,r2,r16
    7680:	d8803315 	stw	r2,204(sp)
    7684:	008011c4 	movi	r2,71
    7688:	b0817626 	beq	r22,r2,7c64 <___vfprintf_internal_r+0x1d6c>
    768c:	00801944 	movi	r2,101
    7690:	1442810e 	bge	r2,r17,8098 <___vfprintf_internal_r+0x21a0>
    7694:	d8c02617 	ldw	r3,152(sp)
    7698:	00801984 	movi	r2,102
    769c:	d8c03215 	stw	r3,200(sp)
    76a0:	8881fe26 	beq	r17,r2,7e9c <___vfprintf_internal_r+0x1fa4>
    76a4:	d8c03217 	ldw	r3,200(sp)
    76a8:	d9003317 	ldw	r4,204(sp)
    76ac:	1901dd16 	blt	r3,r4,7e24 <___vfprintf_internal_r+0x1f2c>
    76b0:	9480004c 	andi	r18,r18,1
    76b4:	90022b1e 	bne	r18,zero,7f64 <___vfprintf_internal_r+0x206c>
    76b8:	1805883a 	mov	r2,r3
    76bc:	18028016 	blt	r3,zero,80c0 <___vfprintf_internal_r+0x21c8>
    76c0:	d8c03217 	ldw	r3,200(sp)
    76c4:	044019c4 	movi	r17,103
    76c8:	d8c02e15 	stw	r3,184(sp)
    76cc:	df002a07 	ldb	fp,168(sp)
    76d0:	e001531e 	bne	fp,zero,7c20 <___vfprintf_internal_r+0x1d28>
    76d4:	df002783 	ldbu	fp,158(sp)
    76d8:	d8802a15 	stw	r2,168(sp)
    76dc:	dc802b17 	ldw	r18,172(sp)
    76e0:	d8002915 	stw	zero,164(sp)
    76e4:	003bd106 	br	662c <__alt_data_end+0xff00662c>
    76e8:	d8802d17 	ldw	r2,180(sp)
    76ec:	d8c02d17 	ldw	r3,180(sp)
    76f0:	d9002d17 	ldw	r4,180(sp)
    76f4:	10800017 	ldw	r2,0(r2)
    76f8:	18c00117 	ldw	r3,4(r3)
    76fc:	21000204 	addi	r4,r4,8
    7700:	d8803615 	stw	r2,216(sp)
    7704:	d8c03815 	stw	r3,224(sp)
    7708:	d9002d15 	stw	r4,180(sp)
    770c:	003b7506 	br	64e4 <__alt_data_end+0xff0064e4>
    7710:	ac400007 	ldb	r17,0(r21)
    7714:	003a5906 	br	607c <__alt_data_end+0xff00607c>
    7718:	9080100c 	andi	r2,r18,64
    771c:	1000a826 	beq	r2,zero,79c0 <___vfprintf_internal_r+0x1ac8>
    7720:	d9002d17 	ldw	r4,180(sp)
    7724:	002d883a 	mov	r22,zero
    7728:	24c0000b 	ldhu	r19,0(r4)
    772c:	21000104 	addi	r4,r4,4
    7730:	d9002d15 	stw	r4,180(sp)
    7734:	003ccb06 	br	6a64 <__alt_data_end+0xff006a64>
    7738:	d8c02d17 	ldw	r3,180(sp)
    773c:	d9002917 	ldw	r4,164(sp)
    7740:	002d883a 	mov	r22,zero
    7744:	18800104 	addi	r2,r3,4
    7748:	1cc00017 	ldw	r19,0(r3)
    774c:	203ebb0e 	bge	r4,zero,723c <__alt_data_end+0xff00723c>
    7750:	003ef106 	br	7318 <__alt_data_end+0xff007318>
    7754:	9080040c 	andi	r2,r18,16
    7758:	1000921e 	bne	r2,zero,79a4 <___vfprintf_internal_r+0x1aac>
    775c:	9480100c 	andi	r18,r18,64
    7760:	90013926 	beq	r18,zero,7c48 <___vfprintf_internal_r+0x1d50>
    7764:	d9002d17 	ldw	r4,180(sp)
    7768:	d9402f17 	ldw	r5,188(sp)
    776c:	20800017 	ldw	r2,0(r4)
    7770:	21000104 	addi	r4,r4,4
    7774:	d9002d15 	stw	r4,180(sp)
    7778:	1140000d 	sth	r5,0(r2)
    777c:	003a1606 	br	5fd8 <__alt_data_end+0xff005fd8>
    7780:	9080100c 	andi	r2,r18,64
    7784:	10008026 	beq	r2,zero,7988 <___vfprintf_internal_r+0x1a90>
    7788:	d8c02d17 	ldw	r3,180(sp)
    778c:	1cc0000f 	ldh	r19,0(r3)
    7790:	18c00104 	addi	r3,r3,4
    7794:	d8c02d15 	stw	r3,180(sp)
    7798:	982dd7fa 	srai	r22,r19,31
    779c:	b005883a 	mov	r2,r22
    77a0:	003b1f06 	br	6420 <__alt_data_end+0xff006420>
    77a4:	9080100c 	andi	r2,r18,64
    77a8:	d8002785 	stb	zero,158(sp)
    77ac:	10008a1e 	bne	r2,zero,79d8 <___vfprintf_internal_r+0x1ae0>
    77b0:	d9402d17 	ldw	r5,180(sp)
    77b4:	d8c02917 	ldw	r3,164(sp)
    77b8:	002d883a 	mov	r22,zero
    77bc:	28800104 	addi	r2,r5,4
    77c0:	2cc00017 	ldw	r19,0(r5)
    77c4:	183e4b0e 	bge	r3,zero,70f4 <__alt_data_end+0xff0070f4>
    77c8:	9d86b03a 	or	r3,r19,r22
    77cc:	d8802d15 	stw	r2,180(sp)
    77d0:	183e4c1e 	bne	r3,zero,7104 <__alt_data_end+0xff007104>
    77d4:	0039883a 	mov	fp,zero
    77d8:	0005883a 	mov	r2,zero
    77dc:	003d4006 	br	6ce0 <__alt_data_end+0xff006ce0>
    77e0:	01400074 	movhi	r5,1
    77e4:	29515f84 	addi	r5,r5,17790
    77e8:	d9402b15 	stw	r5,172(sp)
    77ec:	d9402b17 	ldw	r5,172(sp)
    77f0:	1c47883a 	add	r3,r3,r17
    77f4:	10800044 	addi	r2,r2,1
    77f8:	41400015 	stw	r5,0(r8)
    77fc:	44400115 	stw	r17,4(r8)
    7800:	d8c02015 	stw	r3,128(sp)
    7804:	d8801f15 	stw	r2,124(sp)
    7808:	010001c4 	movi	r4,7
    780c:	20bec816 	blt	r4,r2,7330 <__alt_data_end+0xff007330>
    7810:	42000204 	addi	r8,r8,8
    7814:	003ecd06 	br	734c <__alt_data_end+0xff00734c>
    7818:	d9002917 	ldw	r4,164(sp)
    781c:	d8002785 	stb	zero,158(sp)
    7820:	203d2d16 	blt	r4,zero,6cd8 <__alt_data_end+0xff006cd8>
    7824:	00bfdfc4 	movi	r2,-129
    7828:	90a4703a 	and	r18,r18,r2
    782c:	003a9106 	br	6274 <__alt_data_end+0xff006274>
    7830:	01000074 	movhi	r4,1
    7834:	21115f84 	addi	r4,r4,17790
    7838:	d9002b15 	stw	r4,172(sp)
    783c:	003c0c06 	br	6870 <__alt_data_end+0xff006870>
    7840:	d9002c17 	ldw	r4,176(sp)
    7844:	d9801e04 	addi	r6,sp,120
    7848:	b80b883a 	mov	r5,r23
    784c:	000cc940 	call	cc94 <__sprint_r>
    7850:	103aab1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7854:	d8c02017 	ldw	r3,128(sp)
    7858:	da000404 	addi	r8,sp,16
    785c:	003d4106 	br	6d64 <__alt_data_end+0xff006d64>
    7860:	d8801f17 	ldw	r2,124(sp)
    7864:	01400074 	movhi	r5,1
    7868:	01000044 	movi	r4,1
    786c:	18c00044 	addi	r3,r3,1
    7870:	10800044 	addi	r2,r2,1
    7874:	29515f04 	addi	r5,r5,17788
    7878:	41000115 	stw	r4,4(r8)
    787c:	41400015 	stw	r5,0(r8)
    7880:	d8c02015 	stw	r3,128(sp)
    7884:	d8801f15 	stw	r2,124(sp)
    7888:	010001c4 	movi	r4,7
    788c:	20805c16 	blt	r4,r2,7a00 <___vfprintf_internal_r+0x1b08>
    7890:	42000204 	addi	r8,r8,8
    7894:	8800041e 	bne	r17,zero,78a8 <___vfprintf_internal_r+0x19b0>
    7898:	d8803317 	ldw	r2,204(sp)
    789c:	1000021e 	bne	r2,zero,78a8 <___vfprintf_internal_r+0x19b0>
    78a0:	9080004c 	andi	r2,r18,1
    78a4:	103c0926 	beq	r2,zero,68cc <__alt_data_end+0xff0068cc>
    78a8:	d9003717 	ldw	r4,220(sp)
    78ac:	d8801f17 	ldw	r2,124(sp)
    78b0:	d9403417 	ldw	r5,208(sp)
    78b4:	20c7883a 	add	r3,r4,r3
    78b8:	10800044 	addi	r2,r2,1
    78bc:	41000115 	stw	r4,4(r8)
    78c0:	41400015 	stw	r5,0(r8)
    78c4:	d8c02015 	stw	r3,128(sp)
    78c8:	d8801f15 	stw	r2,124(sp)
    78cc:	010001c4 	movi	r4,7
    78d0:	20812116 	blt	r4,r2,7d58 <___vfprintf_internal_r+0x1e60>
    78d4:	42000204 	addi	r8,r8,8
    78d8:	0463c83a 	sub	r17,zero,r17
    78dc:	0440730e 	bge	zero,r17,7aac <___vfprintf_internal_r+0x1bb4>
    78e0:	05800404 	movi	r22,16
    78e4:	b440860e 	bge	r22,r17,7b00 <___vfprintf_internal_r+0x1c08>
    78e8:	01400074 	movhi	r5,1
    78ec:	29515f84 	addi	r5,r5,17790
    78f0:	d9402b15 	stw	r5,172(sp)
    78f4:	070001c4 	movi	fp,7
    78f8:	dcc02c17 	ldw	r19,176(sp)
    78fc:	00000306 	br	790c <___vfprintf_internal_r+0x1a14>
    7900:	42000204 	addi	r8,r8,8
    7904:	8c7ffc04 	addi	r17,r17,-16
    7908:	b440800e 	bge	r22,r17,7b0c <___vfprintf_internal_r+0x1c14>
    790c:	18c00404 	addi	r3,r3,16
    7910:	10800044 	addi	r2,r2,1
    7914:	45000015 	stw	r20,0(r8)
    7918:	45800115 	stw	r22,4(r8)
    791c:	d8c02015 	stw	r3,128(sp)
    7920:	d8801f15 	stw	r2,124(sp)
    7924:	e0bff60e 	bge	fp,r2,7900 <__alt_data_end+0xff007900>
    7928:	d9801e04 	addi	r6,sp,120
    792c:	b80b883a 	mov	r5,r23
    7930:	9809883a 	mov	r4,r19
    7934:	000cc940 	call	cc94 <__sprint_r>
    7938:	103a711e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    793c:	d8c02017 	ldw	r3,128(sp)
    7940:	d8801f17 	ldw	r2,124(sp)
    7944:	da000404 	addi	r8,sp,16
    7948:	003fee06 	br	7904 <__alt_data_end+0xff007904>
    794c:	00bfffc4 	movi	r2,-1
    7950:	003a6f06 	br	6310 <__alt_data_end+0xff006310>
    7954:	008011c4 	movi	r2,71
    7958:	1440b816 	blt	r2,r17,7c3c <___vfprintf_internal_r+0x1d44>
    795c:	04000074 	movhi	r16,1
    7960:	84115104 	addi	r16,r16,17732
    7964:	00c000c4 	movi	r3,3
    7968:	00bfdfc4 	movi	r2,-129
    796c:	d8c02a15 	stw	r3,168(sp)
    7970:	90a4703a 	and	r18,r18,r2
    7974:	df002783 	ldbu	fp,158(sp)
    7978:	d8c02e15 	stw	r3,184(sp)
    797c:	d8002915 	stw	zero,164(sp)
    7980:	d8003215 	stw	zero,200(sp)
    7984:	003b2906 	br	662c <__alt_data_end+0xff00662c>
    7988:	d9002d17 	ldw	r4,180(sp)
    798c:	24c00017 	ldw	r19,0(r4)
    7990:	21000104 	addi	r4,r4,4
    7994:	d9002d15 	stw	r4,180(sp)
    7998:	982dd7fa 	srai	r22,r19,31
    799c:	b005883a 	mov	r2,r22
    79a0:	003a9f06 	br	6420 <__alt_data_end+0xff006420>
    79a4:	d9402d17 	ldw	r5,180(sp)
    79a8:	d8c02f17 	ldw	r3,188(sp)
    79ac:	28800017 	ldw	r2,0(r5)
    79b0:	29400104 	addi	r5,r5,4
    79b4:	d9402d15 	stw	r5,180(sp)
    79b8:	10c00015 	stw	r3,0(r2)
    79bc:	00398606 	br	5fd8 <__alt_data_end+0xff005fd8>
    79c0:	d9402d17 	ldw	r5,180(sp)
    79c4:	002d883a 	mov	r22,zero
    79c8:	2cc00017 	ldw	r19,0(r5)
    79cc:	29400104 	addi	r5,r5,4
    79d0:	d9402d15 	stw	r5,180(sp)
    79d4:	003c2306 	br	6a64 <__alt_data_end+0xff006a64>
    79d8:	d8c02d17 	ldw	r3,180(sp)
    79dc:	d9002917 	ldw	r4,164(sp)
    79e0:	002d883a 	mov	r22,zero
    79e4:	18800104 	addi	r2,r3,4
    79e8:	1cc0000b 	ldhu	r19,0(r3)
    79ec:	203dc10e 	bge	r4,zero,70f4 <__alt_data_end+0xff0070f4>
    79f0:	003f7506 	br	77c8 <__alt_data_end+0xff0077c8>
    79f4:	04000074 	movhi	r16,1
    79f8:	84114f04 	addi	r16,r16,17724
    79fc:	003acc06 	br	6530 <__alt_data_end+0xff006530>
    7a00:	d9002c17 	ldw	r4,176(sp)
    7a04:	d9801e04 	addi	r6,sp,120
    7a08:	b80b883a 	mov	r5,r23
    7a0c:	000cc940 	call	cc94 <__sprint_r>
    7a10:	103a3b1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7a14:	dc402617 	ldw	r17,152(sp)
    7a18:	d8c02017 	ldw	r3,128(sp)
    7a1c:	da000404 	addi	r8,sp,16
    7a20:	003f9c06 	br	7894 <__alt_data_end+0xff007894>
    7a24:	ac400043 	ldbu	r17,1(r21)
    7a28:	94800814 	ori	r18,r18,32
    7a2c:	ad400044 	addi	r21,r21,1
    7a30:	8c403fcc 	andi	r17,r17,255
    7a34:	8c40201c 	xori	r17,r17,128
    7a38:	8c7fe004 	addi	r17,r17,-128
    7a3c:	00398f06 	br	607c <__alt_data_end+0xff00607c>
    7a40:	d8c02d15 	stw	r3,180(sp)
    7a44:	0039883a 	mov	fp,zero
    7a48:	003e3506 	br	7320 <__alt_data_end+0xff007320>
    7a4c:	d9002c17 	ldw	r4,176(sp)
    7a50:	d9801e04 	addi	r6,sp,120
    7a54:	b80b883a 	mov	r5,r23
    7a58:	000cc940 	call	cc94 <__sprint_r>
    7a5c:	103a281e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7a60:	d8c02017 	ldw	r3,128(sp)
    7a64:	da000404 	addi	r8,sp,16
    7a68:	003cd006 	br	6dac <__alt_data_end+0xff006dac>
    7a6c:	8009883a 	mov	r4,r16
    7a70:	da003d15 	stw	r8,244(sp)
    7a74:	0005e600 	call	5e60 <strlen>
    7a78:	d8802e15 	stw	r2,184(sp)
    7a7c:	da003d17 	ldw	r8,244(sp)
    7a80:	103c340e 	bge	r2,zero,6b54 <__alt_data_end+0xff006b54>
    7a84:	0005883a 	mov	r2,zero
    7a88:	003c3206 	br	6b54 <__alt_data_end+0xff006b54>
    7a8c:	d9002c17 	ldw	r4,176(sp)
    7a90:	d9801e04 	addi	r6,sp,120
    7a94:	b80b883a 	mov	r5,r23
    7a98:	000cc940 	call	cc94 <__sprint_r>
    7a9c:	103a181e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7aa0:	d8c02017 	ldw	r3,128(sp)
    7aa4:	d8801f17 	ldw	r2,124(sp)
    7aa8:	da000404 	addi	r8,sp,16
    7aac:	d9403317 	ldw	r5,204(sp)
    7ab0:	10800044 	addi	r2,r2,1
    7ab4:	44000015 	stw	r16,0(r8)
    7ab8:	28c7883a 	add	r3,r5,r3
    7abc:	003b7d06 	br	68b4 <__alt_data_end+0xff0068b4>
    7ac0:	01000074 	movhi	r4,1
    7ac4:	21116384 	addi	r4,r4,17806
    7ac8:	d9003515 	stw	r4,212(sp)
    7acc:	003b1406 	br	6720 <__alt_data_end+0xff006720>
    7ad0:	013fffc4 	movi	r4,-1
    7ad4:	003a3506 	br	63ac <__alt_data_end+0xff0063ac>
    7ad8:	0023883a 	mov	r17,zero
    7adc:	003d9d06 	br	7154 <__alt_data_end+0xff007154>
    7ae0:	d9002c17 	ldw	r4,176(sp)
    7ae4:	d9801e04 	addi	r6,sp,120
    7ae8:	b80b883a 	mov	r5,r23
    7aec:	000cc940 	call	cc94 <__sprint_r>
    7af0:	103a031e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7af4:	d8c02017 	ldw	r3,128(sp)
    7af8:	da000404 	addi	r8,sp,16
    7afc:	003d9406 	br	7150 <__alt_data_end+0xff007150>
    7b00:	01000074 	movhi	r4,1
    7b04:	21115f84 	addi	r4,r4,17790
    7b08:	d9002b15 	stw	r4,172(sp)
    7b0c:	d9002b17 	ldw	r4,172(sp)
    7b10:	1c47883a 	add	r3,r3,r17
    7b14:	10800044 	addi	r2,r2,1
    7b18:	41000015 	stw	r4,0(r8)
    7b1c:	44400115 	stw	r17,4(r8)
    7b20:	d8c02015 	stw	r3,128(sp)
    7b24:	d8801f15 	stw	r2,124(sp)
    7b28:	010001c4 	movi	r4,7
    7b2c:	20bfd716 	blt	r4,r2,7a8c <__alt_data_end+0xff007a8c>
    7b30:	42000204 	addi	r8,r8,8
    7b34:	003fdd06 	br	7aac <__alt_data_end+0xff007aac>
    7b38:	d9002c17 	ldw	r4,176(sp)
    7b3c:	d9801e04 	addi	r6,sp,120
    7b40:	b80b883a 	mov	r5,r23
    7b44:	000cc940 	call	cc94 <__sprint_r>
    7b48:	1039ed1e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7b4c:	d8802617 	ldw	r2,152(sp)
    7b50:	d8c02017 	ldw	r3,128(sp)
    7b54:	da000404 	addi	r8,sp,16
    7b58:	003e1006 	br	739c <__alt_data_end+0xff00739c>
    7b5c:	00800044 	movi	r2,1
    7b60:	10803fcc 	andi	r2,r2,255
    7b64:	00c00044 	movi	r3,1
    7b68:	10fa3526 	beq	r2,r3,6440 <__alt_data_end+0xff006440>
    7b6c:	00c00084 	movi	r3,2
    7b70:	10fbcb26 	beq	r2,r3,6aa0 <__alt_data_end+0xff006aa0>
    7b74:	003a8f06 	br	65b4 <__alt_data_end+0xff0065b4>
    7b78:	01000074 	movhi	r4,1
    7b7c:	21116384 	addi	r4,r4,17806
    7b80:	d9003515 	stw	r4,212(sp)
    7b84:	003b7606 	br	6960 <__alt_data_end+0xff006960>
    7b88:	d8802917 	ldw	r2,164(sp)
    7b8c:	00c00184 	movi	r3,6
    7b90:	1880012e 	bgeu	r3,r2,7b98 <___vfprintf_internal_r+0x1ca0>
    7b94:	1805883a 	mov	r2,r3
    7b98:	d8802e15 	stw	r2,184(sp)
    7b9c:	1000ef16 	blt	r2,zero,7f5c <___vfprintf_internal_r+0x2064>
    7ba0:	04000074 	movhi	r16,1
    7ba4:	d8802a15 	stw	r2,168(sp)
    7ba8:	dcc02d15 	stw	r19,180(sp)
    7bac:	d8002915 	stw	zero,164(sp)
    7bb0:	d8003215 	stw	zero,200(sp)
    7bb4:	84115d04 	addi	r16,r16,17780
    7bb8:	0039883a 	mov	fp,zero
    7bbc:	003aa206 	br	6648 <__alt_data_end+0xff006648>
    7bc0:	0021883a 	mov	r16,zero
    7bc4:	003e0706 	br	73e4 <__alt_data_end+0xff0073e4>
    7bc8:	d9002c17 	ldw	r4,176(sp)
    7bcc:	d9801e04 	addi	r6,sp,120
    7bd0:	b80b883a 	mov	r5,r23
    7bd4:	000cc940 	call	cc94 <__sprint_r>
    7bd8:	1039c91e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7bdc:	d8802617 	ldw	r2,152(sp)
    7be0:	d9403317 	ldw	r5,204(sp)
    7be4:	d8c02017 	ldw	r3,128(sp)
    7be8:	da000404 	addi	r8,sp,16
    7bec:	2885c83a 	sub	r2,r5,r2
    7bf0:	003dfb06 	br	73e0 <__alt_data_end+0xff0073e0>
    7bf4:	9080004c 	andi	r2,r18,1
    7bf8:	103e8f1e 	bne	r2,zero,7638 <__alt_data_end+0xff007638>
    7bfc:	d8802117 	ldw	r2,132(sp)
    7c00:	003e9e06 	br	767c <__alt_data_end+0xff00767c>
    7c04:	1025883a 	mov	r18,r2
    7c08:	0039883a 	mov	fp,zero
    7c0c:	00800084 	movi	r2,2
    7c10:	003fd306 	br	7b60 <__alt_data_end+0xff007b60>
    7c14:	07000b44 	movi	fp,45
    7c18:	df002785 	stb	fp,158(sp)
    7c1c:	003a4006 	br	6520 <__alt_data_end+0xff006520>
    7c20:	00c00b44 	movi	r3,45
    7c24:	d8c02785 	stb	r3,158(sp)
    7c28:	d8802a15 	stw	r2,168(sp)
    7c2c:	dc802b17 	ldw	r18,172(sp)
    7c30:	d8002915 	stw	zero,164(sp)
    7c34:	07000b44 	movi	fp,45
    7c38:	003a8006 	br	663c <__alt_data_end+0xff00663c>
    7c3c:	04000074 	movhi	r16,1
    7c40:	84115204 	addi	r16,r16,17736
    7c44:	003f4706 	br	7964 <__alt_data_end+0xff007964>
    7c48:	d8c02d17 	ldw	r3,180(sp)
    7c4c:	d9002f17 	ldw	r4,188(sp)
    7c50:	18800017 	ldw	r2,0(r3)
    7c54:	18c00104 	addi	r3,r3,4
    7c58:	d8c02d15 	stw	r3,180(sp)
    7c5c:	11000015 	stw	r4,0(r2)
    7c60:	0038dd06 	br	5fd8 <__alt_data_end+0xff005fd8>
    7c64:	dd802617 	ldw	r22,152(sp)
    7c68:	00bfff44 	movi	r2,-3
    7c6c:	b0801c16 	blt	r22,r2,7ce0 <___vfprintf_internal_r+0x1de8>
    7c70:	d9402917 	ldw	r5,164(sp)
    7c74:	2d801a16 	blt	r5,r22,7ce0 <___vfprintf_internal_r+0x1de8>
    7c78:	dd803215 	stw	r22,200(sp)
    7c7c:	003e8906 	br	76a4 <__alt_data_end+0xff0076a4>
    7c80:	01000074 	movhi	r4,1
    7c84:	21115f84 	addi	r4,r4,17790
    7c88:	d9002b15 	stw	r4,172(sp)
    7c8c:	003c9106 	br	6ed4 <__alt_data_end+0xff006ed4>
    7c90:	e005883a 	mov	r2,fp
    7c94:	003e7906 	br	767c <__alt_data_end+0xff00767c>
    7c98:	d9402917 	ldw	r5,164(sp)
    7c9c:	df002783 	ldbu	fp,158(sp)
    7ca0:	dcc02d15 	stw	r19,180(sp)
    7ca4:	d9402a15 	stw	r5,168(sp)
    7ca8:	d9402e15 	stw	r5,184(sp)
    7cac:	d8002915 	stw	zero,164(sp)
    7cb0:	d8003215 	stw	zero,200(sp)
    7cb4:	003a5d06 	br	662c <__alt_data_end+0xff00662c>
    7cb8:	9080004c 	andi	r2,r18,1
    7cbc:	0039883a 	mov	fp,zero
    7cc0:	10000426 	beq	r2,zero,7cd4 <___vfprintf_internal_r+0x1ddc>
    7cc4:	00800c04 	movi	r2,48
    7cc8:	dc001dc4 	addi	r16,sp,119
    7ccc:	d8801dc5 	stb	r2,119(sp)
    7cd0:	003b8006 	br	6ad4 <__alt_data_end+0xff006ad4>
    7cd4:	d8002e15 	stw	zero,184(sp)
    7cd8:	dc001e04 	addi	r16,sp,120
    7cdc:	003a4d06 	br	6614 <__alt_data_end+0xff006614>
    7ce0:	8c7fff84 	addi	r17,r17,-2
    7ce4:	b5bfffc4 	addi	r22,r22,-1
    7ce8:	dd802615 	stw	r22,152(sp)
    7cec:	dc4022c5 	stb	r17,139(sp)
    7cf0:	b000bf16 	blt	r22,zero,7ff0 <___vfprintf_internal_r+0x20f8>
    7cf4:	00800ac4 	movi	r2,43
    7cf8:	d8802305 	stb	r2,140(sp)
    7cfc:	00800244 	movi	r2,9
    7d00:	15807016 	blt	r2,r22,7ec4 <___vfprintf_internal_r+0x1fcc>
    7d04:	00800c04 	movi	r2,48
    7d08:	b5800c04 	addi	r22,r22,48
    7d0c:	d8802345 	stb	r2,141(sp)
    7d10:	dd802385 	stb	r22,142(sp)
    7d14:	d88023c4 	addi	r2,sp,143
    7d18:	df0022c4 	addi	fp,sp,139
    7d1c:	d8c03317 	ldw	r3,204(sp)
    7d20:	1739c83a 	sub	fp,r2,fp
    7d24:	d9003317 	ldw	r4,204(sp)
    7d28:	e0c7883a 	add	r3,fp,r3
    7d2c:	df003a15 	stw	fp,232(sp)
    7d30:	d8c02e15 	stw	r3,184(sp)
    7d34:	00800044 	movi	r2,1
    7d38:	1100b30e 	bge	r2,r4,8008 <___vfprintf_internal_r+0x2110>
    7d3c:	d8c02e17 	ldw	r3,184(sp)
    7d40:	18c00044 	addi	r3,r3,1
    7d44:	d8c02e15 	stw	r3,184(sp)
    7d48:	1805883a 	mov	r2,r3
    7d4c:	1800ac16 	blt	r3,zero,8000 <___vfprintf_internal_r+0x2108>
    7d50:	d8003215 	stw	zero,200(sp)
    7d54:	003e5d06 	br	76cc <__alt_data_end+0xff0076cc>
    7d58:	d9002c17 	ldw	r4,176(sp)
    7d5c:	d9801e04 	addi	r6,sp,120
    7d60:	b80b883a 	mov	r5,r23
    7d64:	000cc940 	call	cc94 <__sprint_r>
    7d68:	1039651e 	bne	r2,zero,6300 <__alt_data_end+0xff006300>
    7d6c:	dc402617 	ldw	r17,152(sp)
    7d70:	d8c02017 	ldw	r3,128(sp)
    7d74:	d8801f17 	ldw	r2,124(sp)
    7d78:	da000404 	addi	r8,sp,16
    7d7c:	003ed606 	br	78d8 <__alt_data_end+0xff0078d8>
    7d80:	582b883a 	mov	r21,r11
    7d84:	d8002915 	stw	zero,164(sp)
    7d88:	0038bd06 	br	6080 <__alt_data_end+0xff006080>
    7d8c:	d8802917 	ldw	r2,164(sp)
    7d90:	103e071e 	bne	r2,zero,75b0 <__alt_data_end+0xff0075b0>
    7d94:	dc002915 	stw	r16,164(sp)
    7d98:	003e0506 	br	75b0 <__alt_data_end+0xff0075b0>
    7d9c:	d9002917 	ldw	r4,164(sp)
    7da0:	20c00044 	addi	r3,r4,1
    7da4:	003e0f06 	br	75e4 <__alt_data_end+0xff0075e4>
    7da8:	01400184 	movi	r5,6
    7dac:	d9402915 	stw	r5,164(sp)
    7db0:	003dff06 	br	75b0 <__alt_data_end+0xff0075b0>
    7db4:	d8802104 	addi	r2,sp,132
    7db8:	d8800315 	stw	r2,12(sp)
    7dbc:	d8802504 	addi	r2,sp,148
    7dc0:	d8800215 	stw	r2,8(sp)
    7dc4:	d8802604 	addi	r2,sp,152
    7dc8:	d8800115 	stw	r2,4(sp)
    7dcc:	d8802917 	ldw	r2,164(sp)
    7dd0:	d9403617 	ldw	r5,216(sp)
    7dd4:	d9002c17 	ldw	r4,176(sp)
    7dd8:	d8800015 	stw	r2,0(sp)
    7ddc:	01c000c4 	movi	r7,3
    7de0:	980d883a 	mov	r6,r19
    7de4:	da003d15 	stw	r8,244(sp)
    7de8:	000851c0 	call	851c <_dtoa_r>
    7dec:	d8c02917 	ldw	r3,164(sp)
    7df0:	da003d17 	ldw	r8,244(sp)
    7df4:	1021883a 	mov	r16,r2
    7df8:	10f9883a 	add	fp,r2,r3
    7dfc:	81000007 	ldb	r4,0(r16)
    7e00:	00800c04 	movi	r2,48
    7e04:	20805e26 	beq	r4,r2,7f80 <___vfprintf_internal_r+0x2088>
    7e08:	d8c02617 	ldw	r3,152(sp)
    7e0c:	e0f9883a 	add	fp,fp,r3
    7e10:	003e0a06 	br	763c <__alt_data_end+0xff00763c>
    7e14:	00c00b44 	movi	r3,45
    7e18:	24e0003c 	xorhi	r19,r4,32768
    7e1c:	d8c02a05 	stb	r3,168(sp)
    7e20:	003de906 	br	75c8 <__alt_data_end+0xff0075c8>
    7e24:	d8c03217 	ldw	r3,200(sp)
    7e28:	00c07a0e 	bge	zero,r3,8014 <___vfprintf_internal_r+0x211c>
    7e2c:	00800044 	movi	r2,1
    7e30:	d9003317 	ldw	r4,204(sp)
    7e34:	1105883a 	add	r2,r2,r4
    7e38:	d8802e15 	stw	r2,184(sp)
    7e3c:	10004e16 	blt	r2,zero,7f78 <___vfprintf_internal_r+0x2080>
    7e40:	044019c4 	movi	r17,103
    7e44:	003e2106 	br	76cc <__alt_data_end+0xff0076cc>
    7e48:	d9002917 	ldw	r4,164(sp)
    7e4c:	d8802104 	addi	r2,sp,132
    7e50:	d8800315 	stw	r2,12(sp)
    7e54:	d9000015 	stw	r4,0(sp)
    7e58:	d8802504 	addi	r2,sp,148
    7e5c:	d9403617 	ldw	r5,216(sp)
    7e60:	d9002c17 	ldw	r4,176(sp)
    7e64:	d8800215 	stw	r2,8(sp)
    7e68:	d8802604 	addi	r2,sp,152
    7e6c:	d8800115 	stw	r2,4(sp)
    7e70:	01c000c4 	movi	r7,3
    7e74:	980d883a 	mov	r6,r19
    7e78:	da003d15 	stw	r8,244(sp)
    7e7c:	000851c0 	call	851c <_dtoa_r>
    7e80:	d8c02917 	ldw	r3,164(sp)
    7e84:	da003d17 	ldw	r8,244(sp)
    7e88:	1021883a 	mov	r16,r2
    7e8c:	00801184 	movi	r2,70
    7e90:	80f9883a 	add	fp,r16,r3
    7e94:	88bfd926 	beq	r17,r2,7dfc <__alt_data_end+0xff007dfc>
    7e98:	003de806 	br	763c <__alt_data_end+0xff00763c>
    7e9c:	d9002917 	ldw	r4,164(sp)
    7ea0:	00c04d0e 	bge	zero,r3,7fd8 <___vfprintf_internal_r+0x20e0>
    7ea4:	2000441e 	bne	r4,zero,7fb8 <___vfprintf_internal_r+0x20c0>
    7ea8:	9480004c 	andi	r18,r18,1
    7eac:	9000421e 	bne	r18,zero,7fb8 <___vfprintf_internal_r+0x20c0>
    7eb0:	1805883a 	mov	r2,r3
    7eb4:	18007016 	blt	r3,zero,8078 <___vfprintf_internal_r+0x2180>
    7eb8:	d8c03217 	ldw	r3,200(sp)
    7ebc:	d8c02e15 	stw	r3,184(sp)
    7ec0:	003e0206 	br	76cc <__alt_data_end+0xff0076cc>
    7ec4:	df0022c4 	addi	fp,sp,139
    7ec8:	dc002915 	stw	r16,164(sp)
    7ecc:	4027883a 	mov	r19,r8
    7ed0:	e021883a 	mov	r16,fp
    7ed4:	b009883a 	mov	r4,r22
    7ed8:	01400284 	movi	r5,10
    7edc:	00049740 	call	4974 <__modsi3>
    7ee0:	10800c04 	addi	r2,r2,48
    7ee4:	843fffc4 	addi	r16,r16,-1
    7ee8:	b009883a 	mov	r4,r22
    7eec:	01400284 	movi	r5,10
    7ef0:	80800005 	stb	r2,0(r16)
    7ef4:	00048f00 	call	48f0 <__divsi3>
    7ef8:	102d883a 	mov	r22,r2
    7efc:	00800244 	movi	r2,9
    7f00:	15bff416 	blt	r2,r22,7ed4 <__alt_data_end+0xff007ed4>
    7f04:	9811883a 	mov	r8,r19
    7f08:	b0800c04 	addi	r2,r22,48
    7f0c:	8027883a 	mov	r19,r16
    7f10:	997fffc4 	addi	r5,r19,-1
    7f14:	98bfffc5 	stb	r2,-1(r19)
    7f18:	dc002917 	ldw	r16,164(sp)
    7f1c:	2f006a2e 	bgeu	r5,fp,80c8 <___vfprintf_internal_r+0x21d0>
    7f20:	d9c02384 	addi	r7,sp,142
    7f24:	3ccfc83a 	sub	r7,r7,r19
    7f28:	d9002344 	addi	r4,sp,141
    7f2c:	e1cf883a 	add	r7,fp,r7
    7f30:	00000106 	br	7f38 <___vfprintf_internal_r+0x2040>
    7f34:	28800003 	ldbu	r2,0(r5)
    7f38:	20800005 	stb	r2,0(r4)
    7f3c:	21000044 	addi	r4,r4,1
    7f40:	29400044 	addi	r5,r5,1
    7f44:	393ffb1e 	bne	r7,r4,7f34 <__alt_data_end+0xff007f34>
    7f48:	d8802304 	addi	r2,sp,140
    7f4c:	14c5c83a 	sub	r2,r2,r19
    7f50:	d8c02344 	addi	r3,sp,141
    7f54:	1885883a 	add	r2,r3,r2
    7f58:	003f7006 	br	7d1c <__alt_data_end+0xff007d1c>
    7f5c:	0005883a 	mov	r2,zero
    7f60:	003f0f06 	br	7ba0 <__alt_data_end+0xff007ba0>
    7f64:	d8c03217 	ldw	r3,200(sp)
    7f68:	18c00044 	addi	r3,r3,1
    7f6c:	d8c02e15 	stw	r3,184(sp)
    7f70:	1805883a 	mov	r2,r3
    7f74:	183fb20e 	bge	r3,zero,7e40 <__alt_data_end+0xff007e40>
    7f78:	0005883a 	mov	r2,zero
    7f7c:	003fb006 	br	7e40 <__alt_data_end+0xff007e40>
    7f80:	d9003617 	ldw	r4,216(sp)
    7f84:	000d883a 	mov	r6,zero
    7f88:	000f883a 	mov	r7,zero
    7f8c:	980b883a 	mov	r5,r19
    7f90:	d8c03c15 	stw	r3,240(sp)
    7f94:	da003d15 	stw	r8,244(sp)
    7f98:	000fe700 	call	fe70 <__eqdf2>
    7f9c:	d8c03c17 	ldw	r3,240(sp)
    7fa0:	da003d17 	ldw	r8,244(sp)
    7fa4:	103f9826 	beq	r2,zero,7e08 <__alt_data_end+0xff007e08>
    7fa8:	00800044 	movi	r2,1
    7fac:	10c7c83a 	sub	r3,r2,r3
    7fb0:	d8c02615 	stw	r3,152(sp)
    7fb4:	003f9506 	br	7e0c <__alt_data_end+0xff007e0c>
    7fb8:	d9002917 	ldw	r4,164(sp)
    7fbc:	d8c03217 	ldw	r3,200(sp)
    7fc0:	20800044 	addi	r2,r4,1
    7fc4:	1885883a 	add	r2,r3,r2
    7fc8:	d8802e15 	stw	r2,184(sp)
    7fcc:	103dbf0e 	bge	r2,zero,76cc <__alt_data_end+0xff0076cc>
    7fd0:	0005883a 	mov	r2,zero
    7fd4:	003dbd06 	br	76cc <__alt_data_end+0xff0076cc>
    7fd8:	2000211e 	bne	r4,zero,8060 <___vfprintf_internal_r+0x2168>
    7fdc:	9480004c 	andi	r18,r18,1
    7fe0:	90001f1e 	bne	r18,zero,8060 <___vfprintf_internal_r+0x2168>
    7fe4:	00800044 	movi	r2,1
    7fe8:	d8802e15 	stw	r2,184(sp)
    7fec:	003db706 	br	76cc <__alt_data_end+0xff0076cc>
    7ff0:	00800b44 	movi	r2,45
    7ff4:	05adc83a 	sub	r22,zero,r22
    7ff8:	d8802305 	stb	r2,140(sp)
    7ffc:	003f3f06 	br	7cfc <__alt_data_end+0xff007cfc>
    8000:	0005883a 	mov	r2,zero
    8004:	003f5206 	br	7d50 <__alt_data_end+0xff007d50>
    8008:	90a4703a 	and	r18,r18,r2
    800c:	903f4e26 	beq	r18,zero,7d48 <__alt_data_end+0xff007d48>
    8010:	003f4a06 	br	7d3c <__alt_data_end+0xff007d3c>
    8014:	00800084 	movi	r2,2
    8018:	10c5c83a 	sub	r2,r2,r3
    801c:	003f8406 	br	7e30 <__alt_data_end+0xff007e30>
    8020:	d8802d17 	ldw	r2,180(sp)
    8024:	d9002d17 	ldw	r4,180(sp)
    8028:	ac400043 	ldbu	r17,1(r21)
    802c:	10800017 	ldw	r2,0(r2)
    8030:	582b883a 	mov	r21,r11
    8034:	d8802915 	stw	r2,164(sp)
    8038:	20800104 	addi	r2,r4,4
    803c:	d9002917 	ldw	r4,164(sp)
    8040:	d8802d15 	stw	r2,180(sp)
    8044:	203e7a0e 	bge	r4,zero,7a30 <__alt_data_end+0xff007a30>
    8048:	8c403fcc 	andi	r17,r17,255
    804c:	00bfffc4 	movi	r2,-1
    8050:	8c40201c 	xori	r17,r17,128
    8054:	d8802915 	stw	r2,164(sp)
    8058:	8c7fe004 	addi	r17,r17,-128
    805c:	00380706 	br	607c <__alt_data_end+0xff00607c>
    8060:	d8c02917 	ldw	r3,164(sp)
    8064:	18c00084 	addi	r3,r3,2
    8068:	d8c02e15 	stw	r3,184(sp)
    806c:	1805883a 	mov	r2,r3
    8070:	183d960e 	bge	r3,zero,76cc <__alt_data_end+0xff0076cc>
    8074:	003fd606 	br	7fd0 <__alt_data_end+0xff007fd0>
    8078:	0005883a 	mov	r2,zero
    807c:	003f8e06 	br	7eb8 <__alt_data_end+0xff007eb8>
    8080:	9080004c 	andi	r2,r18,1
    8084:	103f811e 	bne	r2,zero,7e8c <__alt_data_end+0xff007e8c>
    8088:	d8802117 	ldw	r2,132(sp)
    808c:	1405c83a 	sub	r2,r2,r16
    8090:	d8803315 	stw	r2,204(sp)
    8094:	b47ef326 	beq	r22,r17,7c64 <__alt_data_end+0xff007c64>
    8098:	dd802617 	ldw	r22,152(sp)
    809c:	003f1106 	br	7ce4 <__alt_data_end+0xff007ce4>
    80a0:	d9c02785 	stb	r7,158(sp)
    80a4:	00390406 	br	64b8 <__alt_data_end+0xff0064b8>
    80a8:	d9c02785 	stb	r7,158(sp)
    80ac:	0038d306 	br	63fc <__alt_data_end+0xff0063fc>
    80b0:	d9c02785 	stb	r7,158(sp)
    80b4:	003a6106 	br	6a3c <__alt_data_end+0xff006a3c>
    80b8:	d9c02785 	stb	r7,158(sp)
    80bc:	003af806 	br	6ca0 <__alt_data_end+0xff006ca0>
    80c0:	0005883a 	mov	r2,zero
    80c4:	003d7e06 	br	76c0 <__alt_data_end+0xff0076c0>
    80c8:	d8802344 	addi	r2,sp,141
    80cc:	003f1306 	br	7d1c <__alt_data_end+0xff007d1c>
    80d0:	d9c02785 	stb	r7,158(sp)
    80d4:	00392306 	br	6564 <__alt_data_end+0xff006564>
    80d8:	d9c02785 	stb	r7,158(sp)
    80dc:	003aa906 	br	6b84 <__alt_data_end+0xff006b84>
    80e0:	d9c02785 	stb	r7,158(sp)
    80e4:	003a3d06 	br	69dc <__alt_data_end+0xff0069dc>
    80e8:	d9c02785 	stb	r7,158(sp)
    80ec:	003aca06 	br	6c18 <__alt_data_end+0xff006c18>

000080f0 <__vfprintf_internal>:
    80f0:	00800074 	movhi	r2,1
    80f4:	1098ba04 	addi	r2,r2,25320
    80f8:	300f883a 	mov	r7,r6
    80fc:	280d883a 	mov	r6,r5
    8100:	200b883a 	mov	r5,r4
    8104:	11000017 	ldw	r4,0(r2)
    8108:	0005ef81 	jmpi	5ef8 <___vfprintf_internal_r>

0000810c <__sbprintf>:
    810c:	2880030b 	ldhu	r2,12(r5)
    8110:	2ac01917 	ldw	r11,100(r5)
    8114:	2a80038b 	ldhu	r10,14(r5)
    8118:	2a400717 	ldw	r9,28(r5)
    811c:	2a000917 	ldw	r8,36(r5)
    8120:	defee204 	addi	sp,sp,-1144
    8124:	00c10004 	movi	r3,1024
    8128:	dc011a15 	stw	r16,1128(sp)
    812c:	10bfff4c 	andi	r2,r2,65533
    8130:	2821883a 	mov	r16,r5
    8134:	d8cb883a 	add	r5,sp,r3
    8138:	dc811c15 	stw	r18,1136(sp)
    813c:	dc411b15 	stw	r17,1132(sp)
    8140:	dfc11d15 	stw	ra,1140(sp)
    8144:	2025883a 	mov	r18,r4
    8148:	d881030d 	sth	r2,1036(sp)
    814c:	dac11915 	stw	r11,1124(sp)
    8150:	da81038d 	sth	r10,1038(sp)
    8154:	da410715 	stw	r9,1052(sp)
    8158:	da010915 	stw	r8,1060(sp)
    815c:	dec10015 	stw	sp,1024(sp)
    8160:	dec10415 	stw	sp,1040(sp)
    8164:	d8c10215 	stw	r3,1032(sp)
    8168:	d8c10515 	stw	r3,1044(sp)
    816c:	d8010615 	stw	zero,1048(sp)
    8170:	0005ef80 	call	5ef8 <___vfprintf_internal_r>
    8174:	1023883a 	mov	r17,r2
    8178:	10000416 	blt	r2,zero,818c <__sbprintf+0x80>
    817c:	d9410004 	addi	r5,sp,1024
    8180:	9009883a 	mov	r4,r18
    8184:	0009dc00 	call	9dc0 <_fflush_r>
    8188:	10000d1e 	bne	r2,zero,81c0 <__sbprintf+0xb4>
    818c:	d881030b 	ldhu	r2,1036(sp)
    8190:	1080100c 	andi	r2,r2,64
    8194:	10000326 	beq	r2,zero,81a4 <__sbprintf+0x98>
    8198:	8080030b 	ldhu	r2,12(r16)
    819c:	10801014 	ori	r2,r2,64
    81a0:	8080030d 	sth	r2,12(r16)
    81a4:	8805883a 	mov	r2,r17
    81a8:	dfc11d17 	ldw	ra,1140(sp)
    81ac:	dc811c17 	ldw	r18,1136(sp)
    81b0:	dc411b17 	ldw	r17,1132(sp)
    81b4:	dc011a17 	ldw	r16,1128(sp)
    81b8:	dec11e04 	addi	sp,sp,1144
    81bc:	f800283a 	ret
    81c0:	047fffc4 	movi	r17,-1
    81c4:	003ff106 	br	818c <__alt_data_end+0xff00818c>

000081c8 <__swsetup_r>:
    81c8:	00800074 	movhi	r2,1
    81cc:	defffd04 	addi	sp,sp,-12
    81d0:	1098ba04 	addi	r2,r2,25320
    81d4:	dc400115 	stw	r17,4(sp)
    81d8:	2023883a 	mov	r17,r4
    81dc:	11000017 	ldw	r4,0(r2)
    81e0:	dc000015 	stw	r16,0(sp)
    81e4:	dfc00215 	stw	ra,8(sp)
    81e8:	2821883a 	mov	r16,r5
    81ec:	20000226 	beq	r4,zero,81f8 <__swsetup_r+0x30>
    81f0:	20800e17 	ldw	r2,56(r4)
    81f4:	10003126 	beq	r2,zero,82bc <__swsetup_r+0xf4>
    81f8:	8080030b 	ldhu	r2,12(r16)
    81fc:	10c0020c 	andi	r3,r2,8
    8200:	1009883a 	mov	r4,r2
    8204:	18000f26 	beq	r3,zero,8244 <__swsetup_r+0x7c>
    8208:	80c00417 	ldw	r3,16(r16)
    820c:	18001526 	beq	r3,zero,8264 <__swsetup_r+0x9c>
    8210:	1100004c 	andi	r4,r2,1
    8214:	20001c1e 	bne	r4,zero,8288 <__swsetup_r+0xc0>
    8218:	1080008c 	andi	r2,r2,2
    821c:	1000291e 	bne	r2,zero,82c4 <__swsetup_r+0xfc>
    8220:	80800517 	ldw	r2,20(r16)
    8224:	80800215 	stw	r2,8(r16)
    8228:	18001c26 	beq	r3,zero,829c <__swsetup_r+0xd4>
    822c:	0005883a 	mov	r2,zero
    8230:	dfc00217 	ldw	ra,8(sp)
    8234:	dc400117 	ldw	r17,4(sp)
    8238:	dc000017 	ldw	r16,0(sp)
    823c:	dec00304 	addi	sp,sp,12
    8240:	f800283a 	ret
    8244:	2080040c 	andi	r2,r4,16
    8248:	10002e26 	beq	r2,zero,8304 <__swsetup_r+0x13c>
    824c:	2080010c 	andi	r2,r4,4
    8250:	10001e1e 	bne	r2,zero,82cc <__swsetup_r+0x104>
    8254:	80c00417 	ldw	r3,16(r16)
    8258:	20800214 	ori	r2,r4,8
    825c:	8080030d 	sth	r2,12(r16)
    8260:	183feb1e 	bne	r3,zero,8210 <__alt_data_end+0xff008210>
    8264:	1100a00c 	andi	r4,r2,640
    8268:	01408004 	movi	r5,512
    826c:	217fe826 	beq	r4,r5,8210 <__alt_data_end+0xff008210>
    8270:	800b883a 	mov	r5,r16
    8274:	8809883a 	mov	r4,r17
    8278:	000ad400 	call	ad40 <__smakebuf_r>
    827c:	8080030b 	ldhu	r2,12(r16)
    8280:	80c00417 	ldw	r3,16(r16)
    8284:	003fe206 	br	8210 <__alt_data_end+0xff008210>
    8288:	80800517 	ldw	r2,20(r16)
    828c:	80000215 	stw	zero,8(r16)
    8290:	0085c83a 	sub	r2,zero,r2
    8294:	80800615 	stw	r2,24(r16)
    8298:	183fe41e 	bne	r3,zero,822c <__alt_data_end+0xff00822c>
    829c:	80c0030b 	ldhu	r3,12(r16)
    82a0:	0005883a 	mov	r2,zero
    82a4:	1900200c 	andi	r4,r3,128
    82a8:	203fe126 	beq	r4,zero,8230 <__alt_data_end+0xff008230>
    82ac:	18c01014 	ori	r3,r3,64
    82b0:	80c0030d 	sth	r3,12(r16)
    82b4:	00bfffc4 	movi	r2,-1
    82b8:	003fdd06 	br	8230 <__alt_data_end+0xff008230>
    82bc:	000a19c0 	call	a19c <__sinit>
    82c0:	003fcd06 	br	81f8 <__alt_data_end+0xff0081f8>
    82c4:	0005883a 	mov	r2,zero
    82c8:	003fd606 	br	8224 <__alt_data_end+0xff008224>
    82cc:	81400c17 	ldw	r5,48(r16)
    82d0:	28000626 	beq	r5,zero,82ec <__swsetup_r+0x124>
    82d4:	80801004 	addi	r2,r16,64
    82d8:	28800326 	beq	r5,r2,82e8 <__swsetup_r+0x120>
    82dc:	8809883a 	mov	r4,r17
    82e0:	000a3100 	call	a310 <_free_r>
    82e4:	8100030b 	ldhu	r4,12(r16)
    82e8:	80000c15 	stw	zero,48(r16)
    82ec:	80c00417 	ldw	r3,16(r16)
    82f0:	00bff6c4 	movi	r2,-37
    82f4:	1108703a 	and	r4,r2,r4
    82f8:	80000115 	stw	zero,4(r16)
    82fc:	80c00015 	stw	r3,0(r16)
    8300:	003fd506 	br	8258 <__alt_data_end+0xff008258>
    8304:	00800244 	movi	r2,9
    8308:	88800015 	stw	r2,0(r17)
    830c:	20801014 	ori	r2,r4,64
    8310:	8080030d 	sth	r2,12(r16)
    8314:	00bfffc4 	movi	r2,-1
    8318:	003fc506 	br	8230 <__alt_data_end+0xff008230>

0000831c <quorem>:
    831c:	defff704 	addi	sp,sp,-36
    8320:	dc800215 	stw	r18,8(sp)
    8324:	20800417 	ldw	r2,16(r4)
    8328:	2c800417 	ldw	r18,16(r5)
    832c:	dfc00815 	stw	ra,32(sp)
    8330:	ddc00715 	stw	r23,28(sp)
    8334:	dd800615 	stw	r22,24(sp)
    8338:	dd400515 	stw	r21,20(sp)
    833c:	dd000415 	stw	r20,16(sp)
    8340:	dcc00315 	stw	r19,12(sp)
    8344:	dc400115 	stw	r17,4(sp)
    8348:	dc000015 	stw	r16,0(sp)
    834c:	14807116 	blt	r2,r18,8514 <quorem+0x1f8>
    8350:	94bfffc4 	addi	r18,r18,-1
    8354:	94ad883a 	add	r22,r18,r18
    8358:	b5ad883a 	add	r22,r22,r22
    835c:	2c400504 	addi	r17,r5,20
    8360:	8da9883a 	add	r20,r17,r22
    8364:	25400504 	addi	r21,r4,20
    8368:	282f883a 	mov	r23,r5
    836c:	adad883a 	add	r22,r21,r22
    8370:	a1400017 	ldw	r5,0(r20)
    8374:	2021883a 	mov	r16,r4
    8378:	b1000017 	ldw	r4,0(r22)
    837c:	29400044 	addi	r5,r5,1
    8380:	00049e80 	call	49e8 <__udivsi3>
    8384:	1027883a 	mov	r19,r2
    8388:	10002c26 	beq	r2,zero,843c <quorem+0x120>
    838c:	a813883a 	mov	r9,r21
    8390:	880b883a 	mov	r5,r17
    8394:	0009883a 	mov	r4,zero
    8398:	000d883a 	mov	r6,zero
    839c:	2a000017 	ldw	r8,0(r5)
    83a0:	49c00017 	ldw	r7,0(r9)
    83a4:	29400104 	addi	r5,r5,4
    83a8:	40bfffcc 	andi	r2,r8,65535
    83ac:	14c5383a 	mul	r2,r2,r19
    83b0:	4010d43a 	srli	r8,r8,16
    83b4:	38ffffcc 	andi	r3,r7,65535
    83b8:	1105883a 	add	r2,r2,r4
    83bc:	1008d43a 	srli	r4,r2,16
    83c0:	44d1383a 	mul	r8,r8,r19
    83c4:	198d883a 	add	r6,r3,r6
    83c8:	10ffffcc 	andi	r3,r2,65535
    83cc:	30c7c83a 	sub	r3,r6,r3
    83d0:	380ed43a 	srli	r7,r7,16
    83d4:	4105883a 	add	r2,r8,r4
    83d8:	180dd43a 	srai	r6,r3,16
    83dc:	113fffcc 	andi	r4,r2,65535
    83e0:	390fc83a 	sub	r7,r7,r4
    83e4:	398d883a 	add	r6,r7,r6
    83e8:	300e943a 	slli	r7,r6,16
    83ec:	18ffffcc 	andi	r3,r3,65535
    83f0:	1008d43a 	srli	r4,r2,16
    83f4:	38ceb03a 	or	r7,r7,r3
    83f8:	49c00015 	stw	r7,0(r9)
    83fc:	300dd43a 	srai	r6,r6,16
    8400:	4a400104 	addi	r9,r9,4
    8404:	a17fe52e 	bgeu	r20,r5,839c <__alt_data_end+0xff00839c>
    8408:	b0800017 	ldw	r2,0(r22)
    840c:	10000b1e 	bne	r2,zero,843c <quorem+0x120>
    8410:	b0bfff04 	addi	r2,r22,-4
    8414:	a880082e 	bgeu	r21,r2,8438 <quorem+0x11c>
    8418:	b0ffff17 	ldw	r3,-4(r22)
    841c:	18000326 	beq	r3,zero,842c <quorem+0x110>
    8420:	00000506 	br	8438 <quorem+0x11c>
    8424:	10c00017 	ldw	r3,0(r2)
    8428:	1800031e 	bne	r3,zero,8438 <quorem+0x11c>
    842c:	10bfff04 	addi	r2,r2,-4
    8430:	94bfffc4 	addi	r18,r18,-1
    8434:	a8bffb36 	bltu	r21,r2,8424 <__alt_data_end+0xff008424>
    8438:	84800415 	stw	r18,16(r16)
    843c:	b80b883a 	mov	r5,r23
    8440:	8009883a 	mov	r4,r16
    8444:	000bc740 	call	bc74 <__mcmp>
    8448:	10002616 	blt	r2,zero,84e4 <quorem+0x1c8>
    844c:	9cc00044 	addi	r19,r19,1
    8450:	a805883a 	mov	r2,r21
    8454:	000b883a 	mov	r5,zero
    8458:	11000017 	ldw	r4,0(r2)
    845c:	89800017 	ldw	r6,0(r17)
    8460:	10800104 	addi	r2,r2,4
    8464:	20ffffcc 	andi	r3,r4,65535
    8468:	194b883a 	add	r5,r3,r5
    846c:	30ffffcc 	andi	r3,r6,65535
    8470:	28c7c83a 	sub	r3,r5,r3
    8474:	300cd43a 	srli	r6,r6,16
    8478:	2008d43a 	srli	r4,r4,16
    847c:	180bd43a 	srai	r5,r3,16
    8480:	18ffffcc 	andi	r3,r3,65535
    8484:	2189c83a 	sub	r4,r4,r6
    8488:	2149883a 	add	r4,r4,r5
    848c:	200c943a 	slli	r6,r4,16
    8490:	8c400104 	addi	r17,r17,4
    8494:	200bd43a 	srai	r5,r4,16
    8498:	30c6b03a 	or	r3,r6,r3
    849c:	10ffff15 	stw	r3,-4(r2)
    84a0:	a47fed2e 	bgeu	r20,r17,8458 <__alt_data_end+0xff008458>
    84a4:	9485883a 	add	r2,r18,r18
    84a8:	1085883a 	add	r2,r2,r2
    84ac:	a887883a 	add	r3,r21,r2
    84b0:	18800017 	ldw	r2,0(r3)
    84b4:	10000b1e 	bne	r2,zero,84e4 <quorem+0x1c8>
    84b8:	18bfff04 	addi	r2,r3,-4
    84bc:	a880082e 	bgeu	r21,r2,84e0 <quorem+0x1c4>
    84c0:	18ffff17 	ldw	r3,-4(r3)
    84c4:	18000326 	beq	r3,zero,84d4 <quorem+0x1b8>
    84c8:	00000506 	br	84e0 <quorem+0x1c4>
    84cc:	10c00017 	ldw	r3,0(r2)
    84d0:	1800031e 	bne	r3,zero,84e0 <quorem+0x1c4>
    84d4:	10bfff04 	addi	r2,r2,-4
    84d8:	94bfffc4 	addi	r18,r18,-1
    84dc:	a8bffb36 	bltu	r21,r2,84cc <__alt_data_end+0xff0084cc>
    84e0:	84800415 	stw	r18,16(r16)
    84e4:	9805883a 	mov	r2,r19
    84e8:	dfc00817 	ldw	ra,32(sp)
    84ec:	ddc00717 	ldw	r23,28(sp)
    84f0:	dd800617 	ldw	r22,24(sp)
    84f4:	dd400517 	ldw	r21,20(sp)
    84f8:	dd000417 	ldw	r20,16(sp)
    84fc:	dcc00317 	ldw	r19,12(sp)
    8500:	dc800217 	ldw	r18,8(sp)
    8504:	dc400117 	ldw	r17,4(sp)
    8508:	dc000017 	ldw	r16,0(sp)
    850c:	dec00904 	addi	sp,sp,36
    8510:	f800283a 	ret
    8514:	0005883a 	mov	r2,zero
    8518:	003ff306 	br	84e8 <__alt_data_end+0xff0084e8>

0000851c <_dtoa_r>:
    851c:	20801017 	ldw	r2,64(r4)
    8520:	deffde04 	addi	sp,sp,-136
    8524:	df002015 	stw	fp,128(sp)
    8528:	dcc01b15 	stw	r19,108(sp)
    852c:	dc801a15 	stw	r18,104(sp)
    8530:	dc401915 	stw	r17,100(sp)
    8534:	dc001815 	stw	r16,96(sp)
    8538:	dfc02115 	stw	ra,132(sp)
    853c:	ddc01f15 	stw	r23,124(sp)
    8540:	dd801e15 	stw	r22,120(sp)
    8544:	dd401d15 	stw	r21,116(sp)
    8548:	dd001c15 	stw	r20,112(sp)
    854c:	d9c00315 	stw	r7,12(sp)
    8550:	2039883a 	mov	fp,r4
    8554:	3023883a 	mov	r17,r6
    8558:	2825883a 	mov	r18,r5
    855c:	dc002417 	ldw	r16,144(sp)
    8560:	3027883a 	mov	r19,r6
    8564:	10000826 	beq	r2,zero,8588 <_dtoa_r+0x6c>
    8568:	21801117 	ldw	r6,68(r4)
    856c:	00c00044 	movi	r3,1
    8570:	100b883a 	mov	r5,r2
    8574:	1986983a 	sll	r3,r3,r6
    8578:	11800115 	stw	r6,4(r2)
    857c:	10c00215 	stw	r3,8(r2)
    8580:	000b4540 	call	b454 <_Bfree>
    8584:	e0001015 	stw	zero,64(fp)
    8588:	88002e16 	blt	r17,zero,8644 <_dtoa_r+0x128>
    858c:	80000015 	stw	zero,0(r16)
    8590:	889ffc2c 	andhi	r2,r17,32752
    8594:	00dffc34 	movhi	r3,32752
    8598:	10c01c26 	beq	r2,r3,860c <_dtoa_r+0xf0>
    859c:	000d883a 	mov	r6,zero
    85a0:	000f883a 	mov	r7,zero
    85a4:	9009883a 	mov	r4,r18
    85a8:	980b883a 	mov	r5,r19
    85ac:	000fe700 	call	fe70 <__eqdf2>
    85b0:	10002b1e 	bne	r2,zero,8660 <_dtoa_r+0x144>
    85b4:	d9c02317 	ldw	r7,140(sp)
    85b8:	00800044 	movi	r2,1
    85bc:	38800015 	stw	r2,0(r7)
    85c0:	d8802517 	ldw	r2,148(sp)
    85c4:	10019e26 	beq	r2,zero,8c40 <_dtoa_r+0x724>
    85c8:	d8c02517 	ldw	r3,148(sp)
    85cc:	00800074 	movhi	r2,1
    85d0:	10915f44 	addi	r2,r2,17789
    85d4:	18800015 	stw	r2,0(r3)
    85d8:	10bfffc4 	addi	r2,r2,-1
    85dc:	dfc02117 	ldw	ra,132(sp)
    85e0:	df002017 	ldw	fp,128(sp)
    85e4:	ddc01f17 	ldw	r23,124(sp)
    85e8:	dd801e17 	ldw	r22,120(sp)
    85ec:	dd401d17 	ldw	r21,116(sp)
    85f0:	dd001c17 	ldw	r20,112(sp)
    85f4:	dcc01b17 	ldw	r19,108(sp)
    85f8:	dc801a17 	ldw	r18,104(sp)
    85fc:	dc401917 	ldw	r17,100(sp)
    8600:	dc001817 	ldw	r16,96(sp)
    8604:	dec02204 	addi	sp,sp,136
    8608:	f800283a 	ret
    860c:	d8c02317 	ldw	r3,140(sp)
    8610:	0089c3c4 	movi	r2,9999
    8614:	18800015 	stw	r2,0(r3)
    8618:	90017726 	beq	r18,zero,8bf8 <_dtoa_r+0x6dc>
    861c:	00800074 	movhi	r2,1
    8620:	10916b04 	addi	r2,r2,17836
    8624:	d9002517 	ldw	r4,148(sp)
    8628:	203fec26 	beq	r4,zero,85dc <__alt_data_end+0xff0085dc>
    862c:	10c000c7 	ldb	r3,3(r2)
    8630:	1801781e 	bne	r3,zero,8c14 <_dtoa_r+0x6f8>
    8634:	10c000c4 	addi	r3,r2,3
    8638:	d9802517 	ldw	r6,148(sp)
    863c:	30c00015 	stw	r3,0(r6)
    8640:	003fe606 	br	85dc <__alt_data_end+0xff0085dc>
    8644:	04e00034 	movhi	r19,32768
    8648:	9cffffc4 	addi	r19,r19,-1
    864c:	00800044 	movi	r2,1
    8650:	8ce6703a 	and	r19,r17,r19
    8654:	80800015 	stw	r2,0(r16)
    8658:	9823883a 	mov	r17,r19
    865c:	003fcc06 	br	8590 <__alt_data_end+0xff008590>
    8660:	d8800204 	addi	r2,sp,8
    8664:	d8800015 	stw	r2,0(sp)
    8668:	d9c00104 	addi	r7,sp,4
    866c:	900b883a 	mov	r5,r18
    8670:	980d883a 	mov	r6,r19
    8674:	e009883a 	mov	r4,fp
    8678:	8820d53a 	srli	r16,r17,20
    867c:	000c0400 	call	c040 <__d2b>
    8680:	d8800915 	stw	r2,36(sp)
    8684:	8001651e 	bne	r16,zero,8c1c <_dtoa_r+0x700>
    8688:	dd800217 	ldw	r22,8(sp)
    868c:	dc000117 	ldw	r16,4(sp)
    8690:	00800804 	movi	r2,32
    8694:	b421883a 	add	r16,r22,r16
    8698:	80c10c84 	addi	r3,r16,1074
    869c:	10c2d10e 	bge	r2,r3,91e4 <_dtoa_r+0xcc8>
    86a0:	00801004 	movi	r2,64
    86a4:	81010484 	addi	r4,r16,1042
    86a8:	10c7c83a 	sub	r3,r2,r3
    86ac:	9108d83a 	srl	r4,r18,r4
    86b0:	88e2983a 	sll	r17,r17,r3
    86b4:	2448b03a 	or	r4,r4,r17
    86b8:	000538c0 	call	538c <__floatunsidf>
    86bc:	017f8434 	movhi	r5,65040
    86c0:	01800044 	movi	r6,1
    86c4:	1009883a 	mov	r4,r2
    86c8:	194b883a 	add	r5,r3,r5
    86cc:	843fffc4 	addi	r16,r16,-1
    86d0:	d9801115 	stw	r6,68(sp)
    86d4:	000d883a 	mov	r6,zero
    86d8:	01cffe34 	movhi	r7,16376
    86dc:	00107e00 	call	107e0 <__subdf3>
    86e0:	0198dbf4 	movhi	r6,25455
    86e4:	01cff4f4 	movhi	r7,16339
    86e8:	3190d844 	addi	r6,r6,17249
    86ec:	39e1e9c4 	addi	r7,r7,-30809
    86f0:	1009883a 	mov	r4,r2
    86f4:	180b883a 	mov	r5,r3
    86f8:	00100c80 	call	100c8 <__muldf3>
    86fc:	01a2d874 	movhi	r6,35681
    8700:	01cff1f4 	movhi	r7,16327
    8704:	31b22cc4 	addi	r6,r6,-14157
    8708:	39e28a04 	addi	r7,r7,-30168
    870c:	180b883a 	mov	r5,r3
    8710:	1009883a 	mov	r4,r2
    8714:	000f5c40 	call	f5c4 <__adddf3>
    8718:	8009883a 	mov	r4,r16
    871c:	1029883a 	mov	r20,r2
    8720:	1823883a 	mov	r17,r3
    8724:	001115c0 	call	1115c <__floatsidf>
    8728:	019427f4 	movhi	r6,20639
    872c:	01cff4f4 	movhi	r7,16339
    8730:	319e7ec4 	addi	r6,r6,31227
    8734:	39d104c4 	addi	r7,r7,17427
    8738:	1009883a 	mov	r4,r2
    873c:	180b883a 	mov	r5,r3
    8740:	00100c80 	call	100c8 <__muldf3>
    8744:	100d883a 	mov	r6,r2
    8748:	180f883a 	mov	r7,r3
    874c:	a009883a 	mov	r4,r20
    8750:	880b883a 	mov	r5,r17
    8754:	000f5c40 	call	f5c4 <__adddf3>
    8758:	1009883a 	mov	r4,r2
    875c:	180b883a 	mov	r5,r3
    8760:	1029883a 	mov	r20,r2
    8764:	1823883a 	mov	r17,r3
    8768:	00110dc0 	call	110dc <__fixdfsi>
    876c:	000d883a 	mov	r6,zero
    8770:	000f883a 	mov	r7,zero
    8774:	a009883a 	mov	r4,r20
    8778:	880b883a 	mov	r5,r17
    877c:	d8800515 	stw	r2,20(sp)
    8780:	000ffd40 	call	ffd4 <__ledf2>
    8784:	10028716 	blt	r2,zero,91a4 <_dtoa_r+0xc88>
    8788:	d8c00517 	ldw	r3,20(sp)
    878c:	00800584 	movi	r2,22
    8790:	10c27536 	bltu	r2,r3,9168 <_dtoa_r+0xc4c>
    8794:	180490fa 	slli	r2,r3,3
    8798:	00c00074 	movhi	r3,1
    879c:	18d18704 	addi	r3,r3,17948
    87a0:	1885883a 	add	r2,r3,r2
    87a4:	11000017 	ldw	r4,0(r2)
    87a8:	11400117 	ldw	r5,4(r2)
    87ac:	900d883a 	mov	r6,r18
    87b0:	980f883a 	mov	r7,r19
    87b4:	000fef80 	call	fef8 <__gedf2>
    87b8:	00828d0e 	bge	zero,r2,91f0 <_dtoa_r+0xcd4>
    87bc:	d9000517 	ldw	r4,20(sp)
    87c0:	d8000e15 	stw	zero,56(sp)
    87c4:	213fffc4 	addi	r4,r4,-1
    87c8:	d9000515 	stw	r4,20(sp)
    87cc:	b42dc83a 	sub	r22,r22,r16
    87d0:	b5bfffc4 	addi	r22,r22,-1
    87d4:	b0026f16 	blt	r22,zero,9194 <_dtoa_r+0xc78>
    87d8:	d8000815 	stw	zero,32(sp)
    87dc:	d9c00517 	ldw	r7,20(sp)
    87e0:	38026416 	blt	r7,zero,9174 <_dtoa_r+0xc58>
    87e4:	b1ed883a 	add	r22,r22,r7
    87e8:	d9c00d15 	stw	r7,52(sp)
    87ec:	d8000a15 	stw	zero,40(sp)
    87f0:	d9800317 	ldw	r6,12(sp)
    87f4:	00800244 	movi	r2,9
    87f8:	11811436 	bltu	r2,r6,8c4c <_dtoa_r+0x730>
    87fc:	00800144 	movi	r2,5
    8800:	1184e10e 	bge	r2,r6,9b88 <_dtoa_r+0x166c>
    8804:	31bfff04 	addi	r6,r6,-4
    8808:	d9800315 	stw	r6,12(sp)
    880c:	0023883a 	mov	r17,zero
    8810:	d9800317 	ldw	r6,12(sp)
    8814:	008000c4 	movi	r2,3
    8818:	30836726 	beq	r6,r2,95b8 <_dtoa_r+0x109c>
    881c:	1183410e 	bge	r2,r6,9524 <_dtoa_r+0x1008>
    8820:	d9c00317 	ldw	r7,12(sp)
    8824:	00800104 	movi	r2,4
    8828:	38827c26 	beq	r7,r2,921c <_dtoa_r+0xd00>
    882c:	00800144 	movi	r2,5
    8830:	3884c41e 	bne	r7,r2,9b44 <_dtoa_r+0x1628>
    8834:	00800044 	movi	r2,1
    8838:	d8800b15 	stw	r2,44(sp)
    883c:	d8c00517 	ldw	r3,20(sp)
    8840:	d9002217 	ldw	r4,136(sp)
    8844:	1907883a 	add	r3,r3,r4
    8848:	19800044 	addi	r6,r3,1
    884c:	d8c00c15 	stw	r3,48(sp)
    8850:	d9800615 	stw	r6,24(sp)
    8854:	0183a40e 	bge	zero,r6,96e8 <_dtoa_r+0x11cc>
    8858:	d9800617 	ldw	r6,24(sp)
    885c:	3021883a 	mov	r16,r6
    8860:	e0001115 	stw	zero,68(fp)
    8864:	008005c4 	movi	r2,23
    8868:	1184c92e 	bgeu	r2,r6,9b90 <_dtoa_r+0x1674>
    886c:	00c00044 	movi	r3,1
    8870:	00800104 	movi	r2,4
    8874:	1085883a 	add	r2,r2,r2
    8878:	11000504 	addi	r4,r2,20
    887c:	180b883a 	mov	r5,r3
    8880:	18c00044 	addi	r3,r3,1
    8884:	313ffb2e 	bgeu	r6,r4,8874 <__alt_data_end+0xff008874>
    8888:	e1401115 	stw	r5,68(fp)
    888c:	e009883a 	mov	r4,fp
    8890:	000b3ac0 	call	b3ac <_Balloc>
    8894:	d8800715 	stw	r2,28(sp)
    8898:	e0801015 	stw	r2,64(fp)
    889c:	00800384 	movi	r2,14
    88a0:	1400f736 	bltu	r2,r16,8c80 <_dtoa_r+0x764>
    88a4:	8800f626 	beq	r17,zero,8c80 <_dtoa_r+0x764>
    88a8:	d9c00517 	ldw	r7,20(sp)
    88ac:	01c39a0e 	bge	zero,r7,9718 <_dtoa_r+0x11fc>
    88b0:	388003cc 	andi	r2,r7,15
    88b4:	100490fa 	slli	r2,r2,3
    88b8:	382bd13a 	srai	r21,r7,4
    88bc:	00c00074 	movhi	r3,1
    88c0:	18d18704 	addi	r3,r3,17948
    88c4:	1885883a 	add	r2,r3,r2
    88c8:	a8c0040c 	andi	r3,r21,16
    88cc:	12400017 	ldw	r9,0(r2)
    88d0:	12000117 	ldw	r8,4(r2)
    88d4:	18037926 	beq	r3,zero,96bc <_dtoa_r+0x11a0>
    88d8:	00800074 	movhi	r2,1
    88dc:	10917d04 	addi	r2,r2,17908
    88e0:	11800817 	ldw	r6,32(r2)
    88e4:	11c00917 	ldw	r7,36(r2)
    88e8:	9009883a 	mov	r4,r18
    88ec:	980b883a 	mov	r5,r19
    88f0:	da001715 	stw	r8,92(sp)
    88f4:	da401615 	stw	r9,88(sp)
    88f8:	0004aa40 	call	4aa4 <__divdf3>
    88fc:	da001717 	ldw	r8,92(sp)
    8900:	da401617 	ldw	r9,88(sp)
    8904:	ad4003cc 	andi	r21,r21,15
    8908:	040000c4 	movi	r16,3
    890c:	1023883a 	mov	r17,r2
    8910:	1829883a 	mov	r20,r3
    8914:	a8001126 	beq	r21,zero,895c <_dtoa_r+0x440>
    8918:	05c00074 	movhi	r23,1
    891c:	bdd17d04 	addi	r23,r23,17908
    8920:	4805883a 	mov	r2,r9
    8924:	4007883a 	mov	r3,r8
    8928:	a980004c 	andi	r6,r21,1
    892c:	1009883a 	mov	r4,r2
    8930:	a82bd07a 	srai	r21,r21,1
    8934:	180b883a 	mov	r5,r3
    8938:	30000426 	beq	r6,zero,894c <_dtoa_r+0x430>
    893c:	b9800017 	ldw	r6,0(r23)
    8940:	b9c00117 	ldw	r7,4(r23)
    8944:	84000044 	addi	r16,r16,1
    8948:	00100c80 	call	100c8 <__muldf3>
    894c:	bdc00204 	addi	r23,r23,8
    8950:	a83ff51e 	bne	r21,zero,8928 <__alt_data_end+0xff008928>
    8954:	1013883a 	mov	r9,r2
    8958:	1811883a 	mov	r8,r3
    895c:	480d883a 	mov	r6,r9
    8960:	400f883a 	mov	r7,r8
    8964:	8809883a 	mov	r4,r17
    8968:	a00b883a 	mov	r5,r20
    896c:	0004aa40 	call	4aa4 <__divdf3>
    8970:	d8800f15 	stw	r2,60(sp)
    8974:	d8c01015 	stw	r3,64(sp)
    8978:	d8c00e17 	ldw	r3,56(sp)
    897c:	18000626 	beq	r3,zero,8998 <_dtoa_r+0x47c>
    8980:	d9000f17 	ldw	r4,60(sp)
    8984:	d9401017 	ldw	r5,64(sp)
    8988:	000d883a 	mov	r6,zero
    898c:	01cffc34 	movhi	r7,16368
    8990:	000ffd40 	call	ffd4 <__ledf2>
    8994:	10040b16 	blt	r2,zero,99c4 <_dtoa_r+0x14a8>
    8998:	8009883a 	mov	r4,r16
    899c:	001115c0 	call	1115c <__floatsidf>
    89a0:	d9800f17 	ldw	r6,60(sp)
    89a4:	d9c01017 	ldw	r7,64(sp)
    89a8:	1009883a 	mov	r4,r2
    89ac:	180b883a 	mov	r5,r3
    89b0:	00100c80 	call	100c8 <__muldf3>
    89b4:	000d883a 	mov	r6,zero
    89b8:	01d00734 	movhi	r7,16412
    89bc:	1009883a 	mov	r4,r2
    89c0:	180b883a 	mov	r5,r3
    89c4:	000f5c40 	call	f5c4 <__adddf3>
    89c8:	1021883a 	mov	r16,r2
    89cc:	d8800617 	ldw	r2,24(sp)
    89d0:	047f3034 	movhi	r17,64704
    89d4:	1c63883a 	add	r17,r3,r17
    89d8:	10031826 	beq	r2,zero,963c <_dtoa_r+0x1120>
    89dc:	d8c00517 	ldw	r3,20(sp)
    89e0:	db000617 	ldw	r12,24(sp)
    89e4:	d8c01315 	stw	r3,76(sp)
    89e8:	d9000b17 	ldw	r4,44(sp)
    89ec:	20038f26 	beq	r4,zero,982c <_dtoa_r+0x1310>
    89f0:	60bfffc4 	addi	r2,r12,-1
    89f4:	100490fa 	slli	r2,r2,3
    89f8:	00c00074 	movhi	r3,1
    89fc:	18d18704 	addi	r3,r3,17948
    8a00:	1885883a 	add	r2,r3,r2
    8a04:	11800017 	ldw	r6,0(r2)
    8a08:	11c00117 	ldw	r7,4(r2)
    8a0c:	d8800717 	ldw	r2,28(sp)
    8a10:	0009883a 	mov	r4,zero
    8a14:	014ff834 	movhi	r5,16352
    8a18:	db001615 	stw	r12,88(sp)
    8a1c:	15c00044 	addi	r23,r2,1
    8a20:	0004aa40 	call	4aa4 <__divdf3>
    8a24:	800d883a 	mov	r6,r16
    8a28:	880f883a 	mov	r7,r17
    8a2c:	1009883a 	mov	r4,r2
    8a30:	180b883a 	mov	r5,r3
    8a34:	00107e00 	call	107e0 <__subdf3>
    8a38:	d9401017 	ldw	r5,64(sp)
    8a3c:	d9000f17 	ldw	r4,60(sp)
    8a40:	102b883a 	mov	r21,r2
    8a44:	d8c01215 	stw	r3,72(sp)
    8a48:	00110dc0 	call	110dc <__fixdfsi>
    8a4c:	1009883a 	mov	r4,r2
    8a50:	1029883a 	mov	r20,r2
    8a54:	001115c0 	call	1115c <__floatsidf>
    8a58:	d9000f17 	ldw	r4,60(sp)
    8a5c:	d9401017 	ldw	r5,64(sp)
    8a60:	100d883a 	mov	r6,r2
    8a64:	180f883a 	mov	r7,r3
    8a68:	00107e00 	call	107e0 <__subdf3>
    8a6c:	1823883a 	mov	r17,r3
    8a70:	d8c00717 	ldw	r3,28(sp)
    8a74:	d9401217 	ldw	r5,72(sp)
    8a78:	a2000c04 	addi	r8,r20,48
    8a7c:	1021883a 	mov	r16,r2
    8a80:	1a000005 	stb	r8,0(r3)
    8a84:	800d883a 	mov	r6,r16
    8a88:	880f883a 	mov	r7,r17
    8a8c:	a809883a 	mov	r4,r21
    8a90:	4029883a 	mov	r20,r8
    8a94:	000fef80 	call	fef8 <__gedf2>
    8a98:	00841d16 	blt	zero,r2,9b10 <_dtoa_r+0x15f4>
    8a9c:	800d883a 	mov	r6,r16
    8aa0:	880f883a 	mov	r7,r17
    8aa4:	0009883a 	mov	r4,zero
    8aa8:	014ffc34 	movhi	r5,16368
    8aac:	00107e00 	call	107e0 <__subdf3>
    8ab0:	d9401217 	ldw	r5,72(sp)
    8ab4:	100d883a 	mov	r6,r2
    8ab8:	180f883a 	mov	r7,r3
    8abc:	a809883a 	mov	r4,r21
    8ac0:	000fef80 	call	fef8 <__gedf2>
    8ac4:	db001617 	ldw	r12,88(sp)
    8ac8:	00840e16 	blt	zero,r2,9b04 <_dtoa_r+0x15e8>
    8acc:	00800044 	movi	r2,1
    8ad0:	13006b0e 	bge	r2,r12,8c80 <_dtoa_r+0x764>
    8ad4:	d9000717 	ldw	r4,28(sp)
    8ad8:	dd800f15 	stw	r22,60(sp)
    8adc:	dcc01015 	stw	r19,64(sp)
    8ae0:	2319883a 	add	r12,r4,r12
    8ae4:	dcc01217 	ldw	r19,72(sp)
    8ae8:	602d883a 	mov	r22,r12
    8aec:	dc801215 	stw	r18,72(sp)
    8af0:	b825883a 	mov	r18,r23
    8af4:	00000906 	br	8b1c <_dtoa_r+0x600>
    8af8:	00107e00 	call	107e0 <__subdf3>
    8afc:	a80d883a 	mov	r6,r21
    8b00:	980f883a 	mov	r7,r19
    8b04:	1009883a 	mov	r4,r2
    8b08:	180b883a 	mov	r5,r3
    8b0c:	000ffd40 	call	ffd4 <__ledf2>
    8b10:	1003e816 	blt	r2,zero,9ab4 <_dtoa_r+0x1598>
    8b14:	b825883a 	mov	r18,r23
    8b18:	bd83e926 	beq	r23,r22,9ac0 <_dtoa_r+0x15a4>
    8b1c:	a809883a 	mov	r4,r21
    8b20:	980b883a 	mov	r5,r19
    8b24:	000d883a 	mov	r6,zero
    8b28:	01d00934 	movhi	r7,16420
    8b2c:	00100c80 	call	100c8 <__muldf3>
    8b30:	000d883a 	mov	r6,zero
    8b34:	01d00934 	movhi	r7,16420
    8b38:	8009883a 	mov	r4,r16
    8b3c:	880b883a 	mov	r5,r17
    8b40:	102b883a 	mov	r21,r2
    8b44:	1827883a 	mov	r19,r3
    8b48:	00100c80 	call	100c8 <__muldf3>
    8b4c:	180b883a 	mov	r5,r3
    8b50:	1009883a 	mov	r4,r2
    8b54:	1821883a 	mov	r16,r3
    8b58:	1023883a 	mov	r17,r2
    8b5c:	00110dc0 	call	110dc <__fixdfsi>
    8b60:	1009883a 	mov	r4,r2
    8b64:	1029883a 	mov	r20,r2
    8b68:	001115c0 	call	1115c <__floatsidf>
    8b6c:	8809883a 	mov	r4,r17
    8b70:	800b883a 	mov	r5,r16
    8b74:	100d883a 	mov	r6,r2
    8b78:	180f883a 	mov	r7,r3
    8b7c:	00107e00 	call	107e0 <__subdf3>
    8b80:	a5000c04 	addi	r20,r20,48
    8b84:	a80d883a 	mov	r6,r21
    8b88:	980f883a 	mov	r7,r19
    8b8c:	1009883a 	mov	r4,r2
    8b90:	180b883a 	mov	r5,r3
    8b94:	95000005 	stb	r20,0(r18)
    8b98:	1021883a 	mov	r16,r2
    8b9c:	1823883a 	mov	r17,r3
    8ba0:	000ffd40 	call	ffd4 <__ledf2>
    8ba4:	bdc00044 	addi	r23,r23,1
    8ba8:	800d883a 	mov	r6,r16
    8bac:	880f883a 	mov	r7,r17
    8bb0:	0009883a 	mov	r4,zero
    8bb4:	014ffc34 	movhi	r5,16368
    8bb8:	103fcf0e 	bge	r2,zero,8af8 <__alt_data_end+0xff008af8>
    8bbc:	d8c01317 	ldw	r3,76(sp)
    8bc0:	d8c00515 	stw	r3,20(sp)
    8bc4:	d9400917 	ldw	r5,36(sp)
    8bc8:	e009883a 	mov	r4,fp
    8bcc:	000b4540 	call	b454 <_Bfree>
    8bd0:	d9000517 	ldw	r4,20(sp)
    8bd4:	d9802317 	ldw	r6,140(sp)
    8bd8:	d9c02517 	ldw	r7,148(sp)
    8bdc:	b8000005 	stb	zero,0(r23)
    8be0:	20800044 	addi	r2,r4,1
    8be4:	30800015 	stw	r2,0(r6)
    8be8:	3802aa26 	beq	r7,zero,9694 <_dtoa_r+0x1178>
    8bec:	3dc00015 	stw	r23,0(r7)
    8bf0:	d8800717 	ldw	r2,28(sp)
    8bf4:	003e7906 	br	85dc <__alt_data_end+0xff0085dc>
    8bf8:	00800434 	movhi	r2,16
    8bfc:	10bfffc4 	addi	r2,r2,-1
    8c00:	88a2703a 	and	r17,r17,r2
    8c04:	883e851e 	bne	r17,zero,861c <__alt_data_end+0xff00861c>
    8c08:	00800074 	movhi	r2,1
    8c0c:	10916804 	addi	r2,r2,17824
    8c10:	003e8406 	br	8624 <__alt_data_end+0xff008624>
    8c14:	10c00204 	addi	r3,r2,8
    8c18:	003e8706 	br	8638 <__alt_data_end+0xff008638>
    8c1c:	01400434 	movhi	r5,16
    8c20:	297fffc4 	addi	r5,r5,-1
    8c24:	994a703a 	and	r5,r19,r5
    8c28:	9009883a 	mov	r4,r18
    8c2c:	843f0044 	addi	r16,r16,-1023
    8c30:	294ffc34 	orhi	r5,r5,16368
    8c34:	dd800217 	ldw	r22,8(sp)
    8c38:	d8001115 	stw	zero,68(sp)
    8c3c:	003ea506 	br	86d4 <__alt_data_end+0xff0086d4>
    8c40:	00800074 	movhi	r2,1
    8c44:	10915f04 	addi	r2,r2,17788
    8c48:	003e6406 	br	85dc <__alt_data_end+0xff0085dc>
    8c4c:	e0001115 	stw	zero,68(fp)
    8c50:	000b883a 	mov	r5,zero
    8c54:	e009883a 	mov	r4,fp
    8c58:	000b3ac0 	call	b3ac <_Balloc>
    8c5c:	01bfffc4 	movi	r6,-1
    8c60:	01c00044 	movi	r7,1
    8c64:	d8800715 	stw	r2,28(sp)
    8c68:	d9800c15 	stw	r6,48(sp)
    8c6c:	e0801015 	stw	r2,64(fp)
    8c70:	d8000315 	stw	zero,12(sp)
    8c74:	d9c00b15 	stw	r7,44(sp)
    8c78:	d9800615 	stw	r6,24(sp)
    8c7c:	d8002215 	stw	zero,136(sp)
    8c80:	d8800117 	ldw	r2,4(sp)
    8c84:	10008916 	blt	r2,zero,8eac <_dtoa_r+0x990>
    8c88:	d9000517 	ldw	r4,20(sp)
    8c8c:	00c00384 	movi	r3,14
    8c90:	19008616 	blt	r3,r4,8eac <_dtoa_r+0x990>
    8c94:	200490fa 	slli	r2,r4,3
    8c98:	00c00074 	movhi	r3,1
    8c9c:	d9802217 	ldw	r6,136(sp)
    8ca0:	18d18704 	addi	r3,r3,17948
    8ca4:	1885883a 	add	r2,r3,r2
    8ca8:	14000017 	ldw	r16,0(r2)
    8cac:	14400117 	ldw	r17,4(r2)
    8cb0:	30016316 	blt	r6,zero,9240 <_dtoa_r+0xd24>
    8cb4:	800d883a 	mov	r6,r16
    8cb8:	880f883a 	mov	r7,r17
    8cbc:	9009883a 	mov	r4,r18
    8cc0:	980b883a 	mov	r5,r19
    8cc4:	0004aa40 	call	4aa4 <__divdf3>
    8cc8:	180b883a 	mov	r5,r3
    8ccc:	1009883a 	mov	r4,r2
    8cd0:	00110dc0 	call	110dc <__fixdfsi>
    8cd4:	1009883a 	mov	r4,r2
    8cd8:	102b883a 	mov	r21,r2
    8cdc:	001115c0 	call	1115c <__floatsidf>
    8ce0:	800d883a 	mov	r6,r16
    8ce4:	880f883a 	mov	r7,r17
    8ce8:	1009883a 	mov	r4,r2
    8cec:	180b883a 	mov	r5,r3
    8cf0:	00100c80 	call	100c8 <__muldf3>
    8cf4:	100d883a 	mov	r6,r2
    8cf8:	180f883a 	mov	r7,r3
    8cfc:	9009883a 	mov	r4,r18
    8d00:	980b883a 	mov	r5,r19
    8d04:	00107e00 	call	107e0 <__subdf3>
    8d08:	d9c00717 	ldw	r7,28(sp)
    8d0c:	1009883a 	mov	r4,r2
    8d10:	a8800c04 	addi	r2,r21,48
    8d14:	38800005 	stb	r2,0(r7)
    8d18:	3dc00044 	addi	r23,r7,1
    8d1c:	d9c00617 	ldw	r7,24(sp)
    8d20:	01800044 	movi	r6,1
    8d24:	180b883a 	mov	r5,r3
    8d28:	2005883a 	mov	r2,r4
    8d2c:	39803826 	beq	r7,r6,8e10 <_dtoa_r+0x8f4>
    8d30:	000d883a 	mov	r6,zero
    8d34:	01d00934 	movhi	r7,16420
    8d38:	00100c80 	call	100c8 <__muldf3>
    8d3c:	000d883a 	mov	r6,zero
    8d40:	000f883a 	mov	r7,zero
    8d44:	1009883a 	mov	r4,r2
    8d48:	180b883a 	mov	r5,r3
    8d4c:	1025883a 	mov	r18,r2
    8d50:	1827883a 	mov	r19,r3
    8d54:	000fe700 	call	fe70 <__eqdf2>
    8d58:	103f9a26 	beq	r2,zero,8bc4 <__alt_data_end+0xff008bc4>
    8d5c:	d9c00617 	ldw	r7,24(sp)
    8d60:	d8c00717 	ldw	r3,28(sp)
    8d64:	b829883a 	mov	r20,r23
    8d68:	38bfffc4 	addi	r2,r7,-1
    8d6c:	18ad883a 	add	r22,r3,r2
    8d70:	00000a06 	br	8d9c <_dtoa_r+0x880>
    8d74:	00100c80 	call	100c8 <__muldf3>
    8d78:	000d883a 	mov	r6,zero
    8d7c:	000f883a 	mov	r7,zero
    8d80:	1009883a 	mov	r4,r2
    8d84:	180b883a 	mov	r5,r3
    8d88:	1025883a 	mov	r18,r2
    8d8c:	1827883a 	mov	r19,r3
    8d90:	b829883a 	mov	r20,r23
    8d94:	000fe700 	call	fe70 <__eqdf2>
    8d98:	103f8a26 	beq	r2,zero,8bc4 <__alt_data_end+0xff008bc4>
    8d9c:	800d883a 	mov	r6,r16
    8da0:	880f883a 	mov	r7,r17
    8da4:	9009883a 	mov	r4,r18
    8da8:	980b883a 	mov	r5,r19
    8dac:	0004aa40 	call	4aa4 <__divdf3>
    8db0:	180b883a 	mov	r5,r3
    8db4:	1009883a 	mov	r4,r2
    8db8:	00110dc0 	call	110dc <__fixdfsi>
    8dbc:	1009883a 	mov	r4,r2
    8dc0:	102b883a 	mov	r21,r2
    8dc4:	001115c0 	call	1115c <__floatsidf>
    8dc8:	800d883a 	mov	r6,r16
    8dcc:	880f883a 	mov	r7,r17
    8dd0:	1009883a 	mov	r4,r2
    8dd4:	180b883a 	mov	r5,r3
    8dd8:	00100c80 	call	100c8 <__muldf3>
    8ddc:	100d883a 	mov	r6,r2
    8de0:	180f883a 	mov	r7,r3
    8de4:	9009883a 	mov	r4,r18
    8de8:	980b883a 	mov	r5,r19
    8dec:	00107e00 	call	107e0 <__subdf3>
    8df0:	aa000c04 	addi	r8,r21,48
    8df4:	a2000005 	stb	r8,0(r20)
    8df8:	000d883a 	mov	r6,zero
    8dfc:	01d00934 	movhi	r7,16420
    8e00:	1009883a 	mov	r4,r2
    8e04:	180b883a 	mov	r5,r3
    8e08:	a5c00044 	addi	r23,r20,1
    8e0c:	b53fd91e 	bne	r22,r20,8d74 <__alt_data_end+0xff008d74>
    8e10:	100d883a 	mov	r6,r2
    8e14:	180f883a 	mov	r7,r3
    8e18:	1009883a 	mov	r4,r2
    8e1c:	180b883a 	mov	r5,r3
    8e20:	000f5c40 	call	f5c4 <__adddf3>
    8e24:	100d883a 	mov	r6,r2
    8e28:	180f883a 	mov	r7,r3
    8e2c:	8009883a 	mov	r4,r16
    8e30:	880b883a 	mov	r5,r17
    8e34:	1027883a 	mov	r19,r2
    8e38:	1825883a 	mov	r18,r3
    8e3c:	000ffd40 	call	ffd4 <__ledf2>
    8e40:	10000816 	blt	r2,zero,8e64 <_dtoa_r+0x948>
    8e44:	980d883a 	mov	r6,r19
    8e48:	900f883a 	mov	r7,r18
    8e4c:	8009883a 	mov	r4,r16
    8e50:	880b883a 	mov	r5,r17
    8e54:	000fe700 	call	fe70 <__eqdf2>
    8e58:	103f5a1e 	bne	r2,zero,8bc4 <__alt_data_end+0xff008bc4>
    8e5c:	ad40004c 	andi	r21,r21,1
    8e60:	a83f5826 	beq	r21,zero,8bc4 <__alt_data_end+0xff008bc4>
    8e64:	bd3fffc3 	ldbu	r20,-1(r23)
    8e68:	b8bfffc4 	addi	r2,r23,-1
    8e6c:	1007883a 	mov	r3,r2
    8e70:	01400e44 	movi	r5,57
    8e74:	d9800717 	ldw	r6,28(sp)
    8e78:	00000506 	br	8e90 <_dtoa_r+0x974>
    8e7c:	18ffffc4 	addi	r3,r3,-1
    8e80:	11824726 	beq	r2,r6,97a0 <_dtoa_r+0x1284>
    8e84:	1d000003 	ldbu	r20,0(r3)
    8e88:	102f883a 	mov	r23,r2
    8e8c:	10bfffc4 	addi	r2,r2,-1
    8e90:	a1003fcc 	andi	r4,r20,255
    8e94:	2100201c 	xori	r4,r4,128
    8e98:	213fe004 	addi	r4,r4,-128
    8e9c:	217ff726 	beq	r4,r5,8e7c <__alt_data_end+0xff008e7c>
    8ea0:	a2000044 	addi	r8,r20,1
    8ea4:	12000005 	stb	r8,0(r2)
    8ea8:	003f4606 	br	8bc4 <__alt_data_end+0xff008bc4>
    8eac:	d9000b17 	ldw	r4,44(sp)
    8eb0:	2000c826 	beq	r4,zero,91d4 <_dtoa_r+0xcb8>
    8eb4:	d9800317 	ldw	r6,12(sp)
    8eb8:	00c00044 	movi	r3,1
    8ebc:	1980f90e 	bge	r3,r6,92a4 <_dtoa_r+0xd88>
    8ec0:	d8800617 	ldw	r2,24(sp)
    8ec4:	d8c00a17 	ldw	r3,40(sp)
    8ec8:	157fffc4 	addi	r21,r2,-1
    8ecc:	1d41f316 	blt	r3,r21,969c <_dtoa_r+0x1180>
    8ed0:	1d6bc83a 	sub	r21,r3,r21
    8ed4:	d9c00617 	ldw	r7,24(sp)
    8ed8:	3802aa16 	blt	r7,zero,9984 <_dtoa_r+0x1468>
    8edc:	dd000817 	ldw	r20,32(sp)
    8ee0:	d8800617 	ldw	r2,24(sp)
    8ee4:	d8c00817 	ldw	r3,32(sp)
    8ee8:	01400044 	movi	r5,1
    8eec:	e009883a 	mov	r4,fp
    8ef0:	1887883a 	add	r3,r3,r2
    8ef4:	d8c00815 	stw	r3,32(sp)
    8ef8:	b0ad883a 	add	r22,r22,r2
    8efc:	000b7b80 	call	b7b8 <__i2b>
    8f00:	1023883a 	mov	r17,r2
    8f04:	a0000826 	beq	r20,zero,8f28 <_dtoa_r+0xa0c>
    8f08:	0580070e 	bge	zero,r22,8f28 <_dtoa_r+0xa0c>
    8f0c:	a005883a 	mov	r2,r20
    8f10:	b500b916 	blt	r22,r20,91f8 <_dtoa_r+0xcdc>
    8f14:	d9000817 	ldw	r4,32(sp)
    8f18:	a0a9c83a 	sub	r20,r20,r2
    8f1c:	b0adc83a 	sub	r22,r22,r2
    8f20:	2089c83a 	sub	r4,r4,r2
    8f24:	d9000815 	stw	r4,32(sp)
    8f28:	d9800a17 	ldw	r6,40(sp)
    8f2c:	0181810e 	bge	zero,r6,9534 <_dtoa_r+0x1018>
    8f30:	d9c00b17 	ldw	r7,44(sp)
    8f34:	3800b326 	beq	r7,zero,9204 <_dtoa_r+0xce8>
    8f38:	a800b226 	beq	r21,zero,9204 <_dtoa_r+0xce8>
    8f3c:	880b883a 	mov	r5,r17
    8f40:	a80d883a 	mov	r6,r21
    8f44:	e009883a 	mov	r4,fp
    8f48:	000b9ec0 	call	b9ec <__pow5mult>
    8f4c:	d9800917 	ldw	r6,36(sp)
    8f50:	100b883a 	mov	r5,r2
    8f54:	e009883a 	mov	r4,fp
    8f58:	1023883a 	mov	r17,r2
    8f5c:	000b7f40 	call	b7f4 <__multiply>
    8f60:	1021883a 	mov	r16,r2
    8f64:	d8800a17 	ldw	r2,40(sp)
    8f68:	d9400917 	ldw	r5,36(sp)
    8f6c:	e009883a 	mov	r4,fp
    8f70:	1545c83a 	sub	r2,r2,r21
    8f74:	d8800a15 	stw	r2,40(sp)
    8f78:	000b4540 	call	b454 <_Bfree>
    8f7c:	d8c00a17 	ldw	r3,40(sp)
    8f80:	18009f1e 	bne	r3,zero,9200 <_dtoa_r+0xce4>
    8f84:	05c00044 	movi	r23,1
    8f88:	e009883a 	mov	r4,fp
    8f8c:	b80b883a 	mov	r5,r23
    8f90:	000b7b80 	call	b7b8 <__i2b>
    8f94:	d9000d17 	ldw	r4,52(sp)
    8f98:	102b883a 	mov	r21,r2
    8f9c:	2000ce26 	beq	r4,zero,92d8 <_dtoa_r+0xdbc>
    8fa0:	200d883a 	mov	r6,r4
    8fa4:	100b883a 	mov	r5,r2
    8fa8:	e009883a 	mov	r4,fp
    8fac:	000b9ec0 	call	b9ec <__pow5mult>
    8fb0:	d9800317 	ldw	r6,12(sp)
    8fb4:	102b883a 	mov	r21,r2
    8fb8:	b981810e 	bge	r23,r6,95c0 <_dtoa_r+0x10a4>
    8fbc:	0027883a 	mov	r19,zero
    8fc0:	a8800417 	ldw	r2,16(r21)
    8fc4:	05c00804 	movi	r23,32
    8fc8:	10800104 	addi	r2,r2,4
    8fcc:	1085883a 	add	r2,r2,r2
    8fd0:	1085883a 	add	r2,r2,r2
    8fd4:	a885883a 	add	r2,r21,r2
    8fd8:	11000017 	ldw	r4,0(r2)
    8fdc:	000b6a00 	call	b6a0 <__hi0bits>
    8fe0:	b885c83a 	sub	r2,r23,r2
    8fe4:	1585883a 	add	r2,r2,r22
    8fe8:	108007cc 	andi	r2,r2,31
    8fec:	1000b326 	beq	r2,zero,92bc <_dtoa_r+0xda0>
    8ff0:	00c00804 	movi	r3,32
    8ff4:	1887c83a 	sub	r3,r3,r2
    8ff8:	01000104 	movi	r4,4
    8ffc:	20c2cd0e 	bge	r4,r3,9b34 <_dtoa_r+0x1618>
    9000:	00c00704 	movi	r3,28
    9004:	1885c83a 	sub	r2,r3,r2
    9008:	d8c00817 	ldw	r3,32(sp)
    900c:	a0a9883a 	add	r20,r20,r2
    9010:	b0ad883a 	add	r22,r22,r2
    9014:	1887883a 	add	r3,r3,r2
    9018:	d8c00815 	stw	r3,32(sp)
    901c:	d9800817 	ldw	r6,32(sp)
    9020:	0180040e 	bge	zero,r6,9034 <_dtoa_r+0xb18>
    9024:	800b883a 	mov	r5,r16
    9028:	e009883a 	mov	r4,fp
    902c:	000bb2c0 	call	bb2c <__lshift>
    9030:	1021883a 	mov	r16,r2
    9034:	0580050e 	bge	zero,r22,904c <_dtoa_r+0xb30>
    9038:	a80b883a 	mov	r5,r21
    903c:	b00d883a 	mov	r6,r22
    9040:	e009883a 	mov	r4,fp
    9044:	000bb2c0 	call	bb2c <__lshift>
    9048:	102b883a 	mov	r21,r2
    904c:	d9c00e17 	ldw	r7,56(sp)
    9050:	3801211e 	bne	r7,zero,94d8 <_dtoa_r+0xfbc>
    9054:	d9800617 	ldw	r6,24(sp)
    9058:	0181380e 	bge	zero,r6,953c <_dtoa_r+0x1020>
    905c:	d8c00b17 	ldw	r3,44(sp)
    9060:	1800ab1e 	bne	r3,zero,9310 <_dtoa_r+0xdf4>
    9064:	dc800717 	ldw	r18,28(sp)
    9068:	dcc00617 	ldw	r19,24(sp)
    906c:	9029883a 	mov	r20,r18
    9070:	00000206 	br	907c <_dtoa_r+0xb60>
    9074:	000b47c0 	call	b47c <__multadd>
    9078:	1021883a 	mov	r16,r2
    907c:	a80b883a 	mov	r5,r21
    9080:	8009883a 	mov	r4,r16
    9084:	000831c0 	call	831c <quorem>
    9088:	10800c04 	addi	r2,r2,48
    908c:	90800005 	stb	r2,0(r18)
    9090:	94800044 	addi	r18,r18,1
    9094:	9507c83a 	sub	r3,r18,r20
    9098:	000f883a 	mov	r7,zero
    909c:	01800284 	movi	r6,10
    90a0:	800b883a 	mov	r5,r16
    90a4:	e009883a 	mov	r4,fp
    90a8:	1cfff216 	blt	r3,r19,9074 <__alt_data_end+0xff009074>
    90ac:	1011883a 	mov	r8,r2
    90b0:	d8800617 	ldw	r2,24(sp)
    90b4:	0082370e 	bge	zero,r2,9994 <_dtoa_r+0x1478>
    90b8:	d9000717 	ldw	r4,28(sp)
    90bc:	0025883a 	mov	r18,zero
    90c0:	20af883a 	add	r23,r4,r2
    90c4:	01800044 	movi	r6,1
    90c8:	800b883a 	mov	r5,r16
    90cc:	e009883a 	mov	r4,fp
    90d0:	da001715 	stw	r8,92(sp)
    90d4:	000bb2c0 	call	bb2c <__lshift>
    90d8:	a80b883a 	mov	r5,r21
    90dc:	1009883a 	mov	r4,r2
    90e0:	d8800915 	stw	r2,36(sp)
    90e4:	000bc740 	call	bc74 <__mcmp>
    90e8:	da001717 	ldw	r8,92(sp)
    90ec:	0081800e 	bge	zero,r2,96f0 <_dtoa_r+0x11d4>
    90f0:	b93fffc3 	ldbu	r4,-1(r23)
    90f4:	b8bfffc4 	addi	r2,r23,-1
    90f8:	1007883a 	mov	r3,r2
    90fc:	01800e44 	movi	r6,57
    9100:	d9c00717 	ldw	r7,28(sp)
    9104:	00000506 	br	911c <_dtoa_r+0xc00>
    9108:	18ffffc4 	addi	r3,r3,-1
    910c:	11c12326 	beq	r2,r7,959c <_dtoa_r+0x1080>
    9110:	19000003 	ldbu	r4,0(r3)
    9114:	102f883a 	mov	r23,r2
    9118:	10bfffc4 	addi	r2,r2,-1
    911c:	21403fcc 	andi	r5,r4,255
    9120:	2940201c 	xori	r5,r5,128
    9124:	297fe004 	addi	r5,r5,-128
    9128:	29bff726 	beq	r5,r6,9108 <__alt_data_end+0xff009108>
    912c:	21000044 	addi	r4,r4,1
    9130:	11000005 	stb	r4,0(r2)
    9134:	a80b883a 	mov	r5,r21
    9138:	e009883a 	mov	r4,fp
    913c:	000b4540 	call	b454 <_Bfree>
    9140:	883ea026 	beq	r17,zero,8bc4 <__alt_data_end+0xff008bc4>
    9144:	90000426 	beq	r18,zero,9158 <_dtoa_r+0xc3c>
    9148:	94400326 	beq	r18,r17,9158 <_dtoa_r+0xc3c>
    914c:	900b883a 	mov	r5,r18
    9150:	e009883a 	mov	r4,fp
    9154:	000b4540 	call	b454 <_Bfree>
    9158:	880b883a 	mov	r5,r17
    915c:	e009883a 	mov	r4,fp
    9160:	000b4540 	call	b454 <_Bfree>
    9164:	003e9706 	br	8bc4 <__alt_data_end+0xff008bc4>
    9168:	01800044 	movi	r6,1
    916c:	d9800e15 	stw	r6,56(sp)
    9170:	003d9606 	br	87cc <__alt_data_end+0xff0087cc>
    9174:	d8800817 	ldw	r2,32(sp)
    9178:	d8c00517 	ldw	r3,20(sp)
    917c:	d8000d15 	stw	zero,52(sp)
    9180:	10c5c83a 	sub	r2,r2,r3
    9184:	00c9c83a 	sub	r4,zero,r3
    9188:	d8800815 	stw	r2,32(sp)
    918c:	d9000a15 	stw	r4,40(sp)
    9190:	003d9706 	br	87f0 <__alt_data_end+0xff0087f0>
    9194:	05adc83a 	sub	r22,zero,r22
    9198:	dd800815 	stw	r22,32(sp)
    919c:	002d883a 	mov	r22,zero
    91a0:	003d8e06 	br	87dc <__alt_data_end+0xff0087dc>
    91a4:	d9000517 	ldw	r4,20(sp)
    91a8:	001115c0 	call	1115c <__floatsidf>
    91ac:	100d883a 	mov	r6,r2
    91b0:	180f883a 	mov	r7,r3
    91b4:	a009883a 	mov	r4,r20
    91b8:	880b883a 	mov	r5,r17
    91bc:	000fe700 	call	fe70 <__eqdf2>
    91c0:	103d7126 	beq	r2,zero,8788 <__alt_data_end+0xff008788>
    91c4:	d9c00517 	ldw	r7,20(sp)
    91c8:	39ffffc4 	addi	r7,r7,-1
    91cc:	d9c00515 	stw	r7,20(sp)
    91d0:	003d6d06 	br	8788 <__alt_data_end+0xff008788>
    91d4:	dd400a17 	ldw	r21,40(sp)
    91d8:	dd000817 	ldw	r20,32(sp)
    91dc:	0023883a 	mov	r17,zero
    91e0:	003f4806 	br	8f04 <__alt_data_end+0xff008f04>
    91e4:	10e3c83a 	sub	r17,r2,r3
    91e8:	9448983a 	sll	r4,r18,r17
    91ec:	003d3206 	br	86b8 <__alt_data_end+0xff0086b8>
    91f0:	d8000e15 	stw	zero,56(sp)
    91f4:	003d7506 	br	87cc <__alt_data_end+0xff0087cc>
    91f8:	b005883a 	mov	r2,r22
    91fc:	003f4506 	br	8f14 <__alt_data_end+0xff008f14>
    9200:	dc000915 	stw	r16,36(sp)
    9204:	d9800a17 	ldw	r6,40(sp)
    9208:	d9400917 	ldw	r5,36(sp)
    920c:	e009883a 	mov	r4,fp
    9210:	000b9ec0 	call	b9ec <__pow5mult>
    9214:	1021883a 	mov	r16,r2
    9218:	003f5a06 	br	8f84 <__alt_data_end+0xff008f84>
    921c:	01c00044 	movi	r7,1
    9220:	d9c00b15 	stw	r7,44(sp)
    9224:	d8802217 	ldw	r2,136(sp)
    9228:	0081280e 	bge	zero,r2,96cc <_dtoa_r+0x11b0>
    922c:	100d883a 	mov	r6,r2
    9230:	1021883a 	mov	r16,r2
    9234:	d8800c15 	stw	r2,48(sp)
    9238:	d8800615 	stw	r2,24(sp)
    923c:	003d8806 	br	8860 <__alt_data_end+0xff008860>
    9240:	d8800617 	ldw	r2,24(sp)
    9244:	00be9b16 	blt	zero,r2,8cb4 <__alt_data_end+0xff008cb4>
    9248:	10010f1e 	bne	r2,zero,9688 <_dtoa_r+0x116c>
    924c:	880b883a 	mov	r5,r17
    9250:	000d883a 	mov	r6,zero
    9254:	01d00534 	movhi	r7,16404
    9258:	8009883a 	mov	r4,r16
    925c:	00100c80 	call	100c8 <__muldf3>
    9260:	900d883a 	mov	r6,r18
    9264:	980f883a 	mov	r7,r19
    9268:	1009883a 	mov	r4,r2
    926c:	180b883a 	mov	r5,r3
    9270:	000fef80 	call	fef8 <__gedf2>
    9274:	002b883a 	mov	r21,zero
    9278:	0023883a 	mov	r17,zero
    927c:	1000bf16 	blt	r2,zero,957c <_dtoa_r+0x1060>
    9280:	d9802217 	ldw	r6,136(sp)
    9284:	ddc00717 	ldw	r23,28(sp)
    9288:	018c303a 	nor	r6,zero,r6
    928c:	d9800515 	stw	r6,20(sp)
    9290:	a80b883a 	mov	r5,r21
    9294:	e009883a 	mov	r4,fp
    9298:	000b4540 	call	b454 <_Bfree>
    929c:	883e4926 	beq	r17,zero,8bc4 <__alt_data_end+0xff008bc4>
    92a0:	003fad06 	br	9158 <__alt_data_end+0xff009158>
    92a4:	d9c01117 	ldw	r7,68(sp)
    92a8:	3801bc26 	beq	r7,zero,999c <_dtoa_r+0x1480>
    92ac:	10810cc4 	addi	r2,r2,1075
    92b0:	dd400a17 	ldw	r21,40(sp)
    92b4:	dd000817 	ldw	r20,32(sp)
    92b8:	003f0a06 	br	8ee4 <__alt_data_end+0xff008ee4>
    92bc:	00800704 	movi	r2,28
    92c0:	d9000817 	ldw	r4,32(sp)
    92c4:	a0a9883a 	add	r20,r20,r2
    92c8:	b0ad883a 	add	r22,r22,r2
    92cc:	2089883a 	add	r4,r4,r2
    92d0:	d9000815 	stw	r4,32(sp)
    92d4:	003f5106 	br	901c <__alt_data_end+0xff00901c>
    92d8:	d8c00317 	ldw	r3,12(sp)
    92dc:	b8c1fc0e 	bge	r23,r3,9ad0 <_dtoa_r+0x15b4>
    92e0:	0027883a 	mov	r19,zero
    92e4:	b805883a 	mov	r2,r23
    92e8:	003f3e06 	br	8fe4 <__alt_data_end+0xff008fe4>
    92ec:	880b883a 	mov	r5,r17
    92f0:	e009883a 	mov	r4,fp
    92f4:	000f883a 	mov	r7,zero
    92f8:	01800284 	movi	r6,10
    92fc:	000b47c0 	call	b47c <__multadd>
    9300:	d9000c17 	ldw	r4,48(sp)
    9304:	1023883a 	mov	r17,r2
    9308:	0102040e 	bge	zero,r4,9b1c <_dtoa_r+0x1600>
    930c:	d9000615 	stw	r4,24(sp)
    9310:	0500050e 	bge	zero,r20,9328 <_dtoa_r+0xe0c>
    9314:	880b883a 	mov	r5,r17
    9318:	a00d883a 	mov	r6,r20
    931c:	e009883a 	mov	r4,fp
    9320:	000bb2c0 	call	bb2c <__lshift>
    9324:	1023883a 	mov	r17,r2
    9328:	9801241e 	bne	r19,zero,97bc <_dtoa_r+0x12a0>
    932c:	8829883a 	mov	r20,r17
    9330:	d9000617 	ldw	r4,24(sp)
    9334:	dcc00717 	ldw	r19,28(sp)
    9338:	9480004c 	andi	r18,r18,1
    933c:	20bfffc4 	addi	r2,r4,-1
    9340:	9885883a 	add	r2,r19,r2
    9344:	d8800415 	stw	r2,16(sp)
    9348:	dc800615 	stw	r18,24(sp)
    934c:	a80b883a 	mov	r5,r21
    9350:	8009883a 	mov	r4,r16
    9354:	000831c0 	call	831c <quorem>
    9358:	880b883a 	mov	r5,r17
    935c:	8009883a 	mov	r4,r16
    9360:	102f883a 	mov	r23,r2
    9364:	000bc740 	call	bc74 <__mcmp>
    9368:	a80b883a 	mov	r5,r21
    936c:	a00d883a 	mov	r6,r20
    9370:	e009883a 	mov	r4,fp
    9374:	102d883a 	mov	r22,r2
    9378:	000bcd40 	call	bcd4 <__mdiff>
    937c:	1007883a 	mov	r3,r2
    9380:	10800317 	ldw	r2,12(r2)
    9384:	bc800c04 	addi	r18,r23,48
    9388:	180b883a 	mov	r5,r3
    938c:	10004e1e 	bne	r2,zero,94c8 <_dtoa_r+0xfac>
    9390:	8009883a 	mov	r4,r16
    9394:	d8c01615 	stw	r3,88(sp)
    9398:	000bc740 	call	bc74 <__mcmp>
    939c:	d8c01617 	ldw	r3,88(sp)
    93a0:	e009883a 	mov	r4,fp
    93a4:	d8801615 	stw	r2,88(sp)
    93a8:	180b883a 	mov	r5,r3
    93ac:	000b4540 	call	b454 <_Bfree>
    93b0:	d8801617 	ldw	r2,88(sp)
    93b4:	1000041e 	bne	r2,zero,93c8 <_dtoa_r+0xeac>
    93b8:	d9800317 	ldw	r6,12(sp)
    93bc:	3000021e 	bne	r6,zero,93c8 <_dtoa_r+0xeac>
    93c0:	d8c00617 	ldw	r3,24(sp)
    93c4:	18003726 	beq	r3,zero,94a4 <_dtoa_r+0xf88>
    93c8:	b0002016 	blt	r22,zero,944c <_dtoa_r+0xf30>
    93cc:	b000041e 	bne	r22,zero,93e0 <_dtoa_r+0xec4>
    93d0:	d9000317 	ldw	r4,12(sp)
    93d4:	2000021e 	bne	r4,zero,93e0 <_dtoa_r+0xec4>
    93d8:	d8c00617 	ldw	r3,24(sp)
    93dc:	18001b26 	beq	r3,zero,944c <_dtoa_r+0xf30>
    93e0:	00810716 	blt	zero,r2,9800 <_dtoa_r+0x12e4>
    93e4:	d8c00417 	ldw	r3,16(sp)
    93e8:	9d800044 	addi	r22,r19,1
    93ec:	9c800005 	stb	r18,0(r19)
    93f0:	b02f883a 	mov	r23,r22
    93f4:	98c10626 	beq	r19,r3,9810 <_dtoa_r+0x12f4>
    93f8:	800b883a 	mov	r5,r16
    93fc:	000f883a 	mov	r7,zero
    9400:	01800284 	movi	r6,10
    9404:	e009883a 	mov	r4,fp
    9408:	000b47c0 	call	b47c <__multadd>
    940c:	1021883a 	mov	r16,r2
    9410:	000f883a 	mov	r7,zero
    9414:	01800284 	movi	r6,10
    9418:	880b883a 	mov	r5,r17
    941c:	e009883a 	mov	r4,fp
    9420:	8d002526 	beq	r17,r20,94b8 <_dtoa_r+0xf9c>
    9424:	000b47c0 	call	b47c <__multadd>
    9428:	a00b883a 	mov	r5,r20
    942c:	000f883a 	mov	r7,zero
    9430:	01800284 	movi	r6,10
    9434:	e009883a 	mov	r4,fp
    9438:	1023883a 	mov	r17,r2
    943c:	000b47c0 	call	b47c <__multadd>
    9440:	1029883a 	mov	r20,r2
    9444:	b027883a 	mov	r19,r22
    9448:	003fc006 	br	934c <__alt_data_end+0xff00934c>
    944c:	9011883a 	mov	r8,r18
    9450:	00800e0e 	bge	zero,r2,948c <_dtoa_r+0xf70>
    9454:	800b883a 	mov	r5,r16
    9458:	01800044 	movi	r6,1
    945c:	e009883a 	mov	r4,fp
    9460:	da001715 	stw	r8,92(sp)
    9464:	000bb2c0 	call	bb2c <__lshift>
    9468:	a80b883a 	mov	r5,r21
    946c:	1009883a 	mov	r4,r2
    9470:	1021883a 	mov	r16,r2
    9474:	000bc740 	call	bc74 <__mcmp>
    9478:	da001717 	ldw	r8,92(sp)
    947c:	0081960e 	bge	zero,r2,9ad8 <_dtoa_r+0x15bc>
    9480:	00800e44 	movi	r2,57
    9484:	40817026 	beq	r8,r2,9a48 <_dtoa_r+0x152c>
    9488:	ba000c44 	addi	r8,r23,49
    948c:	8825883a 	mov	r18,r17
    9490:	9dc00044 	addi	r23,r19,1
    9494:	9a000005 	stb	r8,0(r19)
    9498:	a023883a 	mov	r17,r20
    949c:	dc000915 	stw	r16,36(sp)
    94a0:	003f2406 	br	9134 <__alt_data_end+0xff009134>
    94a4:	00800e44 	movi	r2,57
    94a8:	9011883a 	mov	r8,r18
    94ac:	90816626 	beq	r18,r2,9a48 <_dtoa_r+0x152c>
    94b0:	05bff516 	blt	zero,r22,9488 <__alt_data_end+0xff009488>
    94b4:	003ff506 	br	948c <__alt_data_end+0xff00948c>
    94b8:	000b47c0 	call	b47c <__multadd>
    94bc:	1023883a 	mov	r17,r2
    94c0:	1029883a 	mov	r20,r2
    94c4:	003fdf06 	br	9444 <__alt_data_end+0xff009444>
    94c8:	e009883a 	mov	r4,fp
    94cc:	000b4540 	call	b454 <_Bfree>
    94d0:	00800044 	movi	r2,1
    94d4:	003fbc06 	br	93c8 <__alt_data_end+0xff0093c8>
    94d8:	a80b883a 	mov	r5,r21
    94dc:	8009883a 	mov	r4,r16
    94e0:	000bc740 	call	bc74 <__mcmp>
    94e4:	103edb0e 	bge	r2,zero,9054 <__alt_data_end+0xff009054>
    94e8:	800b883a 	mov	r5,r16
    94ec:	000f883a 	mov	r7,zero
    94f0:	01800284 	movi	r6,10
    94f4:	e009883a 	mov	r4,fp
    94f8:	000b47c0 	call	b47c <__multadd>
    94fc:	1021883a 	mov	r16,r2
    9500:	d8800517 	ldw	r2,20(sp)
    9504:	d8c00b17 	ldw	r3,44(sp)
    9508:	10bfffc4 	addi	r2,r2,-1
    950c:	d8800515 	stw	r2,20(sp)
    9510:	183f761e 	bne	r3,zero,92ec <__alt_data_end+0xff0092ec>
    9514:	d9000c17 	ldw	r4,48(sp)
    9518:	0101730e 	bge	zero,r4,9ae8 <_dtoa_r+0x15cc>
    951c:	d9000615 	stw	r4,24(sp)
    9520:	003ed006 	br	9064 <__alt_data_end+0xff009064>
    9524:	00800084 	movi	r2,2
    9528:	3081861e 	bne	r6,r2,9b44 <_dtoa_r+0x1628>
    952c:	d8000b15 	stw	zero,44(sp)
    9530:	003f3c06 	br	9224 <__alt_data_end+0xff009224>
    9534:	dc000917 	ldw	r16,36(sp)
    9538:	003e9206 	br	8f84 <__alt_data_end+0xff008f84>
    953c:	d9c00317 	ldw	r7,12(sp)
    9540:	00800084 	movi	r2,2
    9544:	11fec50e 	bge	r2,r7,905c <__alt_data_end+0xff00905c>
    9548:	d9000617 	ldw	r4,24(sp)
    954c:	20013c1e 	bne	r4,zero,9a40 <_dtoa_r+0x1524>
    9550:	a80b883a 	mov	r5,r21
    9554:	000f883a 	mov	r7,zero
    9558:	01800144 	movi	r6,5
    955c:	e009883a 	mov	r4,fp
    9560:	000b47c0 	call	b47c <__multadd>
    9564:	100b883a 	mov	r5,r2
    9568:	8009883a 	mov	r4,r16
    956c:	102b883a 	mov	r21,r2
    9570:	000bc740 	call	bc74 <__mcmp>
    9574:	dc000915 	stw	r16,36(sp)
    9578:	00bf410e 	bge	zero,r2,9280 <__alt_data_end+0xff009280>
    957c:	d9c00717 	ldw	r7,28(sp)
    9580:	00800c44 	movi	r2,49
    9584:	38800005 	stb	r2,0(r7)
    9588:	d8800517 	ldw	r2,20(sp)
    958c:	3dc00044 	addi	r23,r7,1
    9590:	10800044 	addi	r2,r2,1
    9594:	d8800515 	stw	r2,20(sp)
    9598:	003f3d06 	br	9290 <__alt_data_end+0xff009290>
    959c:	d9800517 	ldw	r6,20(sp)
    95a0:	d9c00717 	ldw	r7,28(sp)
    95a4:	00800c44 	movi	r2,49
    95a8:	31800044 	addi	r6,r6,1
    95ac:	d9800515 	stw	r6,20(sp)
    95b0:	38800005 	stb	r2,0(r7)
    95b4:	003edf06 	br	9134 <__alt_data_end+0xff009134>
    95b8:	d8000b15 	stw	zero,44(sp)
    95bc:	003c9f06 	br	883c <__alt_data_end+0xff00883c>
    95c0:	903e7e1e 	bne	r18,zero,8fbc <__alt_data_end+0xff008fbc>
    95c4:	00800434 	movhi	r2,16
    95c8:	10bfffc4 	addi	r2,r2,-1
    95cc:	9884703a 	and	r2,r19,r2
    95d0:	1000ea1e 	bne	r2,zero,997c <_dtoa_r+0x1460>
    95d4:	9cdffc2c 	andhi	r19,r19,32752
    95d8:	9800e826 	beq	r19,zero,997c <_dtoa_r+0x1460>
    95dc:	d9c00817 	ldw	r7,32(sp)
    95e0:	b5800044 	addi	r22,r22,1
    95e4:	04c00044 	movi	r19,1
    95e8:	39c00044 	addi	r7,r7,1
    95ec:	d9c00815 	stw	r7,32(sp)
    95f0:	d8800d17 	ldw	r2,52(sp)
    95f4:	103e721e 	bne	r2,zero,8fc0 <__alt_data_end+0xff008fc0>
    95f8:	00800044 	movi	r2,1
    95fc:	003e7906 	br	8fe4 <__alt_data_end+0xff008fe4>
    9600:	8009883a 	mov	r4,r16
    9604:	001115c0 	call	1115c <__floatsidf>
    9608:	d9800f17 	ldw	r6,60(sp)
    960c:	d9c01017 	ldw	r7,64(sp)
    9610:	1009883a 	mov	r4,r2
    9614:	180b883a 	mov	r5,r3
    9618:	00100c80 	call	100c8 <__muldf3>
    961c:	000d883a 	mov	r6,zero
    9620:	01d00734 	movhi	r7,16412
    9624:	1009883a 	mov	r4,r2
    9628:	180b883a 	mov	r5,r3
    962c:	000f5c40 	call	f5c4 <__adddf3>
    9630:	047f3034 	movhi	r17,64704
    9634:	1021883a 	mov	r16,r2
    9638:	1c63883a 	add	r17,r3,r17
    963c:	d9000f17 	ldw	r4,60(sp)
    9640:	d9401017 	ldw	r5,64(sp)
    9644:	000d883a 	mov	r6,zero
    9648:	01d00534 	movhi	r7,16404
    964c:	00107e00 	call	107e0 <__subdf3>
    9650:	800d883a 	mov	r6,r16
    9654:	880f883a 	mov	r7,r17
    9658:	1009883a 	mov	r4,r2
    965c:	180b883a 	mov	r5,r3
    9660:	102b883a 	mov	r21,r2
    9664:	1829883a 	mov	r20,r3
    9668:	000fef80 	call	fef8 <__gedf2>
    966c:	00806c16 	blt	zero,r2,9820 <_dtoa_r+0x1304>
    9670:	89e0003c 	xorhi	r7,r17,32768
    9674:	800d883a 	mov	r6,r16
    9678:	a809883a 	mov	r4,r21
    967c:	a00b883a 	mov	r5,r20
    9680:	000ffd40 	call	ffd4 <__ledf2>
    9684:	103d7e0e 	bge	r2,zero,8c80 <__alt_data_end+0xff008c80>
    9688:	002b883a 	mov	r21,zero
    968c:	0023883a 	mov	r17,zero
    9690:	003efb06 	br	9280 <__alt_data_end+0xff009280>
    9694:	d8800717 	ldw	r2,28(sp)
    9698:	003bd006 	br	85dc <__alt_data_end+0xff0085dc>
    969c:	d9000a17 	ldw	r4,40(sp)
    96a0:	d9800d17 	ldw	r6,52(sp)
    96a4:	dd400a15 	stw	r21,40(sp)
    96a8:	a905c83a 	sub	r2,r21,r4
    96ac:	308d883a 	add	r6,r6,r2
    96b0:	d9800d15 	stw	r6,52(sp)
    96b4:	002b883a 	mov	r21,zero
    96b8:	003e0606 	br	8ed4 <__alt_data_end+0xff008ed4>
    96bc:	9023883a 	mov	r17,r18
    96c0:	9829883a 	mov	r20,r19
    96c4:	04000084 	movi	r16,2
    96c8:	003c9206 	br	8914 <__alt_data_end+0xff008914>
    96cc:	04000044 	movi	r16,1
    96d0:	dc000c15 	stw	r16,48(sp)
    96d4:	dc000615 	stw	r16,24(sp)
    96d8:	dc002215 	stw	r16,136(sp)
    96dc:	e0001115 	stw	zero,68(fp)
    96e0:	000b883a 	mov	r5,zero
    96e4:	003c6906 	br	888c <__alt_data_end+0xff00888c>
    96e8:	3021883a 	mov	r16,r6
    96ec:	003ffb06 	br	96dc <__alt_data_end+0xff0096dc>
    96f0:	1000021e 	bne	r2,zero,96fc <_dtoa_r+0x11e0>
    96f4:	4200004c 	andi	r8,r8,1
    96f8:	403e7d1e 	bne	r8,zero,90f0 <__alt_data_end+0xff0090f0>
    96fc:	01000c04 	movi	r4,48
    9700:	00000106 	br	9708 <_dtoa_r+0x11ec>
    9704:	102f883a 	mov	r23,r2
    9708:	b8bfffc4 	addi	r2,r23,-1
    970c:	10c00007 	ldb	r3,0(r2)
    9710:	193ffc26 	beq	r3,r4,9704 <__alt_data_end+0xff009704>
    9714:	003e8706 	br	9134 <__alt_data_end+0xff009134>
    9718:	d8800517 	ldw	r2,20(sp)
    971c:	00a3c83a 	sub	r17,zero,r2
    9720:	8800a426 	beq	r17,zero,99b4 <_dtoa_r+0x1498>
    9724:	888003cc 	andi	r2,r17,15
    9728:	100490fa 	slli	r2,r2,3
    972c:	00c00074 	movhi	r3,1
    9730:	18d18704 	addi	r3,r3,17948
    9734:	1885883a 	add	r2,r3,r2
    9738:	11800017 	ldw	r6,0(r2)
    973c:	11c00117 	ldw	r7,4(r2)
    9740:	9009883a 	mov	r4,r18
    9744:	980b883a 	mov	r5,r19
    9748:	8823d13a 	srai	r17,r17,4
    974c:	00100c80 	call	100c8 <__muldf3>
    9750:	d8800f15 	stw	r2,60(sp)
    9754:	d8c01015 	stw	r3,64(sp)
    9758:	8800e826 	beq	r17,zero,9afc <_dtoa_r+0x15e0>
    975c:	05000074 	movhi	r20,1
    9760:	a5117d04 	addi	r20,r20,17908
    9764:	04000084 	movi	r16,2
    9768:	8980004c 	andi	r6,r17,1
    976c:	1009883a 	mov	r4,r2
    9770:	8823d07a 	srai	r17,r17,1
    9774:	180b883a 	mov	r5,r3
    9778:	30000426 	beq	r6,zero,978c <_dtoa_r+0x1270>
    977c:	a1800017 	ldw	r6,0(r20)
    9780:	a1c00117 	ldw	r7,4(r20)
    9784:	84000044 	addi	r16,r16,1
    9788:	00100c80 	call	100c8 <__muldf3>
    978c:	a5000204 	addi	r20,r20,8
    9790:	883ff51e 	bne	r17,zero,9768 <__alt_data_end+0xff009768>
    9794:	d8800f15 	stw	r2,60(sp)
    9798:	d8c01015 	stw	r3,64(sp)
    979c:	003c7606 	br	8978 <__alt_data_end+0xff008978>
    97a0:	00c00c04 	movi	r3,48
    97a4:	10c00005 	stb	r3,0(r2)
    97a8:	d8c00517 	ldw	r3,20(sp)
    97ac:	bd3fffc3 	ldbu	r20,-1(r23)
    97b0:	18c00044 	addi	r3,r3,1
    97b4:	d8c00515 	stw	r3,20(sp)
    97b8:	003db906 	br	8ea0 <__alt_data_end+0xff008ea0>
    97bc:	89400117 	ldw	r5,4(r17)
    97c0:	e009883a 	mov	r4,fp
    97c4:	000b3ac0 	call	b3ac <_Balloc>
    97c8:	89800417 	ldw	r6,16(r17)
    97cc:	89400304 	addi	r5,r17,12
    97d0:	11000304 	addi	r4,r2,12
    97d4:	31800084 	addi	r6,r6,2
    97d8:	318d883a 	add	r6,r6,r6
    97dc:	318d883a 	add	r6,r6,r6
    97e0:	1027883a 	mov	r19,r2
    97e4:	000afe00 	call	afe0 <memcpy>
    97e8:	01800044 	movi	r6,1
    97ec:	980b883a 	mov	r5,r19
    97f0:	e009883a 	mov	r4,fp
    97f4:	000bb2c0 	call	bb2c <__lshift>
    97f8:	1029883a 	mov	r20,r2
    97fc:	003ecc06 	br	9330 <__alt_data_end+0xff009330>
    9800:	00800e44 	movi	r2,57
    9804:	90809026 	beq	r18,r2,9a48 <_dtoa_r+0x152c>
    9808:	92000044 	addi	r8,r18,1
    980c:	003f1f06 	br	948c <__alt_data_end+0xff00948c>
    9810:	9011883a 	mov	r8,r18
    9814:	8825883a 	mov	r18,r17
    9818:	a023883a 	mov	r17,r20
    981c:	003e2906 	br	90c4 <__alt_data_end+0xff0090c4>
    9820:	002b883a 	mov	r21,zero
    9824:	0023883a 	mov	r17,zero
    9828:	003f5406 	br	957c <__alt_data_end+0xff00957c>
    982c:	61bfffc4 	addi	r6,r12,-1
    9830:	300490fa 	slli	r2,r6,3
    9834:	00c00074 	movhi	r3,1
    9838:	18d18704 	addi	r3,r3,17948
    983c:	1885883a 	add	r2,r3,r2
    9840:	11000017 	ldw	r4,0(r2)
    9844:	11400117 	ldw	r5,4(r2)
    9848:	d8800717 	ldw	r2,28(sp)
    984c:	880f883a 	mov	r7,r17
    9850:	d9801215 	stw	r6,72(sp)
    9854:	800d883a 	mov	r6,r16
    9858:	db001615 	stw	r12,88(sp)
    985c:	15c00044 	addi	r23,r2,1
    9860:	00100c80 	call	100c8 <__muldf3>
    9864:	d9401017 	ldw	r5,64(sp)
    9868:	d9000f17 	ldw	r4,60(sp)
    986c:	d8c01515 	stw	r3,84(sp)
    9870:	d8801415 	stw	r2,80(sp)
    9874:	00110dc0 	call	110dc <__fixdfsi>
    9878:	1009883a 	mov	r4,r2
    987c:	1021883a 	mov	r16,r2
    9880:	001115c0 	call	1115c <__floatsidf>
    9884:	d9000f17 	ldw	r4,60(sp)
    9888:	d9401017 	ldw	r5,64(sp)
    988c:	100d883a 	mov	r6,r2
    9890:	180f883a 	mov	r7,r3
    9894:	00107e00 	call	107e0 <__subdf3>
    9898:	1829883a 	mov	r20,r3
    989c:	d8c00717 	ldw	r3,28(sp)
    98a0:	84000c04 	addi	r16,r16,48
    98a4:	1023883a 	mov	r17,r2
    98a8:	1c000005 	stb	r16,0(r3)
    98ac:	db001617 	ldw	r12,88(sp)
    98b0:	00800044 	movi	r2,1
    98b4:	60802226 	beq	r12,r2,9940 <_dtoa_r+0x1424>
    98b8:	d9c00717 	ldw	r7,28(sp)
    98bc:	8805883a 	mov	r2,r17
    98c0:	b82b883a 	mov	r21,r23
    98c4:	3b19883a 	add	r12,r7,r12
    98c8:	6023883a 	mov	r17,r12
    98cc:	a007883a 	mov	r3,r20
    98d0:	dc800f15 	stw	r18,60(sp)
    98d4:	000d883a 	mov	r6,zero
    98d8:	01d00934 	movhi	r7,16420
    98dc:	1009883a 	mov	r4,r2
    98e0:	180b883a 	mov	r5,r3
    98e4:	00100c80 	call	100c8 <__muldf3>
    98e8:	180b883a 	mov	r5,r3
    98ec:	1009883a 	mov	r4,r2
    98f0:	1829883a 	mov	r20,r3
    98f4:	1025883a 	mov	r18,r2
    98f8:	00110dc0 	call	110dc <__fixdfsi>
    98fc:	1009883a 	mov	r4,r2
    9900:	1021883a 	mov	r16,r2
    9904:	001115c0 	call	1115c <__floatsidf>
    9908:	100d883a 	mov	r6,r2
    990c:	180f883a 	mov	r7,r3
    9910:	9009883a 	mov	r4,r18
    9914:	a00b883a 	mov	r5,r20
    9918:	84000c04 	addi	r16,r16,48
    991c:	00107e00 	call	107e0 <__subdf3>
    9920:	ad400044 	addi	r21,r21,1
    9924:	ac3fffc5 	stb	r16,-1(r21)
    9928:	ac7fea1e 	bne	r21,r17,98d4 <__alt_data_end+0xff0098d4>
    992c:	1023883a 	mov	r17,r2
    9930:	d8801217 	ldw	r2,72(sp)
    9934:	dc800f17 	ldw	r18,60(sp)
    9938:	1829883a 	mov	r20,r3
    993c:	b8af883a 	add	r23,r23,r2
    9940:	d9001417 	ldw	r4,80(sp)
    9944:	d9401517 	ldw	r5,84(sp)
    9948:	000d883a 	mov	r6,zero
    994c:	01cff834 	movhi	r7,16352
    9950:	000f5c40 	call	f5c4 <__adddf3>
    9954:	880d883a 	mov	r6,r17
    9958:	a00f883a 	mov	r7,r20
    995c:	1009883a 	mov	r4,r2
    9960:	180b883a 	mov	r5,r3
    9964:	000ffd40 	call	ffd4 <__ledf2>
    9968:	10003e0e 	bge	r2,zero,9a64 <_dtoa_r+0x1548>
    996c:	d9001317 	ldw	r4,76(sp)
    9970:	bd3fffc3 	ldbu	r20,-1(r23)
    9974:	d9000515 	stw	r4,20(sp)
    9978:	003d3b06 	br	8e68 <__alt_data_end+0xff008e68>
    997c:	0027883a 	mov	r19,zero
    9980:	003f1b06 	br	95f0 <__alt_data_end+0xff0095f0>
    9984:	d8800817 	ldw	r2,32(sp)
    9988:	11e9c83a 	sub	r20,r2,r7
    998c:	0005883a 	mov	r2,zero
    9990:	003d5406 	br	8ee4 <__alt_data_end+0xff008ee4>
    9994:	00800044 	movi	r2,1
    9998:	003dc706 	br	90b8 <__alt_data_end+0xff0090b8>
    999c:	d8c00217 	ldw	r3,8(sp)
    99a0:	00800d84 	movi	r2,54
    99a4:	dd400a17 	ldw	r21,40(sp)
    99a8:	10c5c83a 	sub	r2,r2,r3
    99ac:	dd000817 	ldw	r20,32(sp)
    99b0:	003d4c06 	br	8ee4 <__alt_data_end+0xff008ee4>
    99b4:	dc800f15 	stw	r18,60(sp)
    99b8:	dcc01015 	stw	r19,64(sp)
    99bc:	04000084 	movi	r16,2
    99c0:	003bed06 	br	8978 <__alt_data_end+0xff008978>
    99c4:	d9000617 	ldw	r4,24(sp)
    99c8:	203f0d26 	beq	r4,zero,9600 <__alt_data_end+0xff009600>
    99cc:	d9800c17 	ldw	r6,48(sp)
    99d0:	01bcab0e 	bge	zero,r6,8c80 <__alt_data_end+0xff008c80>
    99d4:	d9401017 	ldw	r5,64(sp)
    99d8:	d9000f17 	ldw	r4,60(sp)
    99dc:	000d883a 	mov	r6,zero
    99e0:	01d00934 	movhi	r7,16420
    99e4:	00100c80 	call	100c8 <__muldf3>
    99e8:	81000044 	addi	r4,r16,1
    99ec:	d8800f15 	stw	r2,60(sp)
    99f0:	d8c01015 	stw	r3,64(sp)
    99f4:	001115c0 	call	1115c <__floatsidf>
    99f8:	d9800f17 	ldw	r6,60(sp)
    99fc:	d9c01017 	ldw	r7,64(sp)
    9a00:	1009883a 	mov	r4,r2
    9a04:	180b883a 	mov	r5,r3
    9a08:	00100c80 	call	100c8 <__muldf3>
    9a0c:	01d00734 	movhi	r7,16412
    9a10:	000d883a 	mov	r6,zero
    9a14:	1009883a 	mov	r4,r2
    9a18:	180b883a 	mov	r5,r3
    9a1c:	000f5c40 	call	f5c4 <__adddf3>
    9a20:	d9c00517 	ldw	r7,20(sp)
    9a24:	047f3034 	movhi	r17,64704
    9a28:	1021883a 	mov	r16,r2
    9a2c:	39ffffc4 	addi	r7,r7,-1
    9a30:	d9c01315 	stw	r7,76(sp)
    9a34:	1c63883a 	add	r17,r3,r17
    9a38:	db000c17 	ldw	r12,48(sp)
    9a3c:	003bea06 	br	89e8 <__alt_data_end+0xff0089e8>
    9a40:	dc000915 	stw	r16,36(sp)
    9a44:	003e0e06 	br	9280 <__alt_data_end+0xff009280>
    9a48:	01000e44 	movi	r4,57
    9a4c:	8825883a 	mov	r18,r17
    9a50:	9dc00044 	addi	r23,r19,1
    9a54:	99000005 	stb	r4,0(r19)
    9a58:	a023883a 	mov	r17,r20
    9a5c:	dc000915 	stw	r16,36(sp)
    9a60:	003da406 	br	90f4 <__alt_data_end+0xff0090f4>
    9a64:	d9801417 	ldw	r6,80(sp)
    9a68:	d9c01517 	ldw	r7,84(sp)
    9a6c:	0009883a 	mov	r4,zero
    9a70:	014ff834 	movhi	r5,16352
    9a74:	00107e00 	call	107e0 <__subdf3>
    9a78:	880d883a 	mov	r6,r17
    9a7c:	a00f883a 	mov	r7,r20
    9a80:	1009883a 	mov	r4,r2
    9a84:	180b883a 	mov	r5,r3
    9a88:	000fef80 	call	fef8 <__gedf2>
    9a8c:	00bc7c0e 	bge	zero,r2,8c80 <__alt_data_end+0xff008c80>
    9a90:	01000c04 	movi	r4,48
    9a94:	00000106 	br	9a9c <_dtoa_r+0x1580>
    9a98:	102f883a 	mov	r23,r2
    9a9c:	b8bfffc4 	addi	r2,r23,-1
    9aa0:	10c00007 	ldb	r3,0(r2)
    9aa4:	193ffc26 	beq	r3,r4,9a98 <__alt_data_end+0xff009a98>
    9aa8:	d9801317 	ldw	r6,76(sp)
    9aac:	d9800515 	stw	r6,20(sp)
    9ab0:	003c4406 	br	8bc4 <__alt_data_end+0xff008bc4>
    9ab4:	d9801317 	ldw	r6,76(sp)
    9ab8:	d9800515 	stw	r6,20(sp)
    9abc:	003cea06 	br	8e68 <__alt_data_end+0xff008e68>
    9ac0:	dd800f17 	ldw	r22,60(sp)
    9ac4:	dcc01017 	ldw	r19,64(sp)
    9ac8:	dc801217 	ldw	r18,72(sp)
    9acc:	003c6c06 	br	8c80 <__alt_data_end+0xff008c80>
    9ad0:	903e031e 	bne	r18,zero,92e0 <__alt_data_end+0xff0092e0>
    9ad4:	003ebb06 	br	95c4 <__alt_data_end+0xff0095c4>
    9ad8:	103e6c1e 	bne	r2,zero,948c <__alt_data_end+0xff00948c>
    9adc:	4080004c 	andi	r2,r8,1
    9ae0:	103e6a26 	beq	r2,zero,948c <__alt_data_end+0xff00948c>
    9ae4:	003e6606 	br	9480 <__alt_data_end+0xff009480>
    9ae8:	d8c00317 	ldw	r3,12(sp)
    9aec:	00800084 	movi	r2,2
    9af0:	10c02916 	blt	r2,r3,9b98 <_dtoa_r+0x167c>
    9af4:	d9000c17 	ldw	r4,48(sp)
    9af8:	003e8806 	br	951c <__alt_data_end+0xff00951c>
    9afc:	04000084 	movi	r16,2
    9b00:	003b9d06 	br	8978 <__alt_data_end+0xff008978>
    9b04:	d9001317 	ldw	r4,76(sp)
    9b08:	d9000515 	stw	r4,20(sp)
    9b0c:	003cd606 	br	8e68 <__alt_data_end+0xff008e68>
    9b10:	d8801317 	ldw	r2,76(sp)
    9b14:	d8800515 	stw	r2,20(sp)
    9b18:	003c2a06 	br	8bc4 <__alt_data_end+0xff008bc4>
    9b1c:	d9800317 	ldw	r6,12(sp)
    9b20:	00800084 	movi	r2,2
    9b24:	11801516 	blt	r2,r6,9b7c <_dtoa_r+0x1660>
    9b28:	d9c00c17 	ldw	r7,48(sp)
    9b2c:	d9c00615 	stw	r7,24(sp)
    9b30:	003df706 	br	9310 <__alt_data_end+0xff009310>
    9b34:	193d3926 	beq	r3,r4,901c <__alt_data_end+0xff00901c>
    9b38:	00c00f04 	movi	r3,60
    9b3c:	1885c83a 	sub	r2,r3,r2
    9b40:	003ddf06 	br	92c0 <__alt_data_end+0xff0092c0>
    9b44:	e009883a 	mov	r4,fp
    9b48:	e0001115 	stw	zero,68(fp)
    9b4c:	000b883a 	mov	r5,zero
    9b50:	000b3ac0 	call	b3ac <_Balloc>
    9b54:	d8800715 	stw	r2,28(sp)
    9b58:	d8c00717 	ldw	r3,28(sp)
    9b5c:	00bfffc4 	movi	r2,-1
    9b60:	01000044 	movi	r4,1
    9b64:	d8800c15 	stw	r2,48(sp)
    9b68:	e0c01015 	stw	r3,64(fp)
    9b6c:	d9000b15 	stw	r4,44(sp)
    9b70:	d8800615 	stw	r2,24(sp)
    9b74:	d8002215 	stw	zero,136(sp)
    9b78:	003c4106 	br	8c80 <__alt_data_end+0xff008c80>
    9b7c:	d8c00c17 	ldw	r3,48(sp)
    9b80:	d8c00615 	stw	r3,24(sp)
    9b84:	003e7006 	br	9548 <__alt_data_end+0xff009548>
    9b88:	04400044 	movi	r17,1
    9b8c:	003b2006 	br	8810 <__alt_data_end+0xff008810>
    9b90:	000b883a 	mov	r5,zero
    9b94:	003b3d06 	br	888c <__alt_data_end+0xff00888c>
    9b98:	d8800c17 	ldw	r2,48(sp)
    9b9c:	d8800615 	stw	r2,24(sp)
    9ba0:	003e6906 	br	9548 <__alt_data_end+0xff009548>

00009ba4 <__sflush_r>:
    9ba4:	2880030b 	ldhu	r2,12(r5)
    9ba8:	defffb04 	addi	sp,sp,-20
    9bac:	dcc00315 	stw	r19,12(sp)
    9bb0:	dc400115 	stw	r17,4(sp)
    9bb4:	dfc00415 	stw	ra,16(sp)
    9bb8:	dc800215 	stw	r18,8(sp)
    9bbc:	dc000015 	stw	r16,0(sp)
    9bc0:	10c0020c 	andi	r3,r2,8
    9bc4:	2823883a 	mov	r17,r5
    9bc8:	2027883a 	mov	r19,r4
    9bcc:	1800311e 	bne	r3,zero,9c94 <__sflush_r+0xf0>
    9bd0:	28c00117 	ldw	r3,4(r5)
    9bd4:	10820014 	ori	r2,r2,2048
    9bd8:	2880030d 	sth	r2,12(r5)
    9bdc:	00c04b0e 	bge	zero,r3,9d0c <__sflush_r+0x168>
    9be0:	8a000a17 	ldw	r8,40(r17)
    9be4:	40002326 	beq	r8,zero,9c74 <__sflush_r+0xd0>
    9be8:	9c000017 	ldw	r16,0(r19)
    9bec:	10c4000c 	andi	r3,r2,4096
    9bf0:	98000015 	stw	zero,0(r19)
    9bf4:	18004826 	beq	r3,zero,9d18 <__sflush_r+0x174>
    9bf8:	89801417 	ldw	r6,80(r17)
    9bfc:	10c0010c 	andi	r3,r2,4
    9c00:	18000626 	beq	r3,zero,9c1c <__sflush_r+0x78>
    9c04:	88c00117 	ldw	r3,4(r17)
    9c08:	88800c17 	ldw	r2,48(r17)
    9c0c:	30cdc83a 	sub	r6,r6,r3
    9c10:	10000226 	beq	r2,zero,9c1c <__sflush_r+0x78>
    9c14:	88800f17 	ldw	r2,60(r17)
    9c18:	308dc83a 	sub	r6,r6,r2
    9c1c:	89400717 	ldw	r5,28(r17)
    9c20:	000f883a 	mov	r7,zero
    9c24:	9809883a 	mov	r4,r19
    9c28:	403ee83a 	callr	r8
    9c2c:	00ffffc4 	movi	r3,-1
    9c30:	10c04426 	beq	r2,r3,9d44 <__sflush_r+0x1a0>
    9c34:	88c0030b 	ldhu	r3,12(r17)
    9c38:	89000417 	ldw	r4,16(r17)
    9c3c:	88000115 	stw	zero,4(r17)
    9c40:	197dffcc 	andi	r5,r3,63487
    9c44:	8940030d 	sth	r5,12(r17)
    9c48:	89000015 	stw	r4,0(r17)
    9c4c:	18c4000c 	andi	r3,r3,4096
    9c50:	18002c1e 	bne	r3,zero,9d04 <__sflush_r+0x160>
    9c54:	89400c17 	ldw	r5,48(r17)
    9c58:	9c000015 	stw	r16,0(r19)
    9c5c:	28000526 	beq	r5,zero,9c74 <__sflush_r+0xd0>
    9c60:	88801004 	addi	r2,r17,64
    9c64:	28800226 	beq	r5,r2,9c70 <__sflush_r+0xcc>
    9c68:	9809883a 	mov	r4,r19
    9c6c:	000a3100 	call	a310 <_free_r>
    9c70:	88000c15 	stw	zero,48(r17)
    9c74:	0005883a 	mov	r2,zero
    9c78:	dfc00417 	ldw	ra,16(sp)
    9c7c:	dcc00317 	ldw	r19,12(sp)
    9c80:	dc800217 	ldw	r18,8(sp)
    9c84:	dc400117 	ldw	r17,4(sp)
    9c88:	dc000017 	ldw	r16,0(sp)
    9c8c:	dec00504 	addi	sp,sp,20
    9c90:	f800283a 	ret
    9c94:	2c800417 	ldw	r18,16(r5)
    9c98:	903ff626 	beq	r18,zero,9c74 <__alt_data_end+0xff009c74>
    9c9c:	2c000017 	ldw	r16,0(r5)
    9ca0:	108000cc 	andi	r2,r2,3
    9ca4:	2c800015 	stw	r18,0(r5)
    9ca8:	84a1c83a 	sub	r16,r16,r18
    9cac:	1000131e 	bne	r2,zero,9cfc <__sflush_r+0x158>
    9cb0:	28800517 	ldw	r2,20(r5)
    9cb4:	88800215 	stw	r2,8(r17)
    9cb8:	04000316 	blt	zero,r16,9cc8 <__sflush_r+0x124>
    9cbc:	003fed06 	br	9c74 <__alt_data_end+0xff009c74>
    9cc0:	90a5883a 	add	r18,r18,r2
    9cc4:	043feb0e 	bge	zero,r16,9c74 <__alt_data_end+0xff009c74>
    9cc8:	88800917 	ldw	r2,36(r17)
    9ccc:	89400717 	ldw	r5,28(r17)
    9cd0:	800f883a 	mov	r7,r16
    9cd4:	900d883a 	mov	r6,r18
    9cd8:	9809883a 	mov	r4,r19
    9cdc:	103ee83a 	callr	r2
    9ce0:	80a1c83a 	sub	r16,r16,r2
    9ce4:	00bff616 	blt	zero,r2,9cc0 <__alt_data_end+0xff009cc0>
    9ce8:	88c0030b 	ldhu	r3,12(r17)
    9cec:	00bfffc4 	movi	r2,-1
    9cf0:	18c01014 	ori	r3,r3,64
    9cf4:	88c0030d 	sth	r3,12(r17)
    9cf8:	003fdf06 	br	9c78 <__alt_data_end+0xff009c78>
    9cfc:	0005883a 	mov	r2,zero
    9d00:	003fec06 	br	9cb4 <__alt_data_end+0xff009cb4>
    9d04:	88801415 	stw	r2,80(r17)
    9d08:	003fd206 	br	9c54 <__alt_data_end+0xff009c54>
    9d0c:	28c00f17 	ldw	r3,60(r5)
    9d10:	00ffb316 	blt	zero,r3,9be0 <__alt_data_end+0xff009be0>
    9d14:	003fd706 	br	9c74 <__alt_data_end+0xff009c74>
    9d18:	89400717 	ldw	r5,28(r17)
    9d1c:	000d883a 	mov	r6,zero
    9d20:	01c00044 	movi	r7,1
    9d24:	9809883a 	mov	r4,r19
    9d28:	403ee83a 	callr	r8
    9d2c:	100d883a 	mov	r6,r2
    9d30:	00bfffc4 	movi	r2,-1
    9d34:	30801426 	beq	r6,r2,9d88 <__sflush_r+0x1e4>
    9d38:	8880030b 	ldhu	r2,12(r17)
    9d3c:	8a000a17 	ldw	r8,40(r17)
    9d40:	003fae06 	br	9bfc <__alt_data_end+0xff009bfc>
    9d44:	98c00017 	ldw	r3,0(r19)
    9d48:	183fba26 	beq	r3,zero,9c34 <__alt_data_end+0xff009c34>
    9d4c:	01000744 	movi	r4,29
    9d50:	19000626 	beq	r3,r4,9d6c <__sflush_r+0x1c8>
    9d54:	01000584 	movi	r4,22
    9d58:	19000426 	beq	r3,r4,9d6c <__sflush_r+0x1c8>
    9d5c:	88c0030b 	ldhu	r3,12(r17)
    9d60:	18c01014 	ori	r3,r3,64
    9d64:	88c0030d 	sth	r3,12(r17)
    9d68:	003fc306 	br	9c78 <__alt_data_end+0xff009c78>
    9d6c:	8880030b 	ldhu	r2,12(r17)
    9d70:	88c00417 	ldw	r3,16(r17)
    9d74:	88000115 	stw	zero,4(r17)
    9d78:	10bdffcc 	andi	r2,r2,63487
    9d7c:	8880030d 	sth	r2,12(r17)
    9d80:	88c00015 	stw	r3,0(r17)
    9d84:	003fb306 	br	9c54 <__alt_data_end+0xff009c54>
    9d88:	98800017 	ldw	r2,0(r19)
    9d8c:	103fea26 	beq	r2,zero,9d38 <__alt_data_end+0xff009d38>
    9d90:	00c00744 	movi	r3,29
    9d94:	10c00226 	beq	r2,r3,9da0 <__sflush_r+0x1fc>
    9d98:	00c00584 	movi	r3,22
    9d9c:	10c0031e 	bne	r2,r3,9dac <__sflush_r+0x208>
    9da0:	9c000015 	stw	r16,0(r19)
    9da4:	0005883a 	mov	r2,zero
    9da8:	003fb306 	br	9c78 <__alt_data_end+0xff009c78>
    9dac:	88c0030b 	ldhu	r3,12(r17)
    9db0:	3005883a 	mov	r2,r6
    9db4:	18c01014 	ori	r3,r3,64
    9db8:	88c0030d 	sth	r3,12(r17)
    9dbc:	003fae06 	br	9c78 <__alt_data_end+0xff009c78>

00009dc0 <_fflush_r>:
    9dc0:	defffd04 	addi	sp,sp,-12
    9dc4:	dc000115 	stw	r16,4(sp)
    9dc8:	dfc00215 	stw	ra,8(sp)
    9dcc:	2021883a 	mov	r16,r4
    9dd0:	20000226 	beq	r4,zero,9ddc <_fflush_r+0x1c>
    9dd4:	20800e17 	ldw	r2,56(r4)
    9dd8:	10000c26 	beq	r2,zero,9e0c <_fflush_r+0x4c>
    9ddc:	2880030f 	ldh	r2,12(r5)
    9de0:	1000051e 	bne	r2,zero,9df8 <_fflush_r+0x38>
    9de4:	0005883a 	mov	r2,zero
    9de8:	dfc00217 	ldw	ra,8(sp)
    9dec:	dc000117 	ldw	r16,4(sp)
    9df0:	dec00304 	addi	sp,sp,12
    9df4:	f800283a 	ret
    9df8:	8009883a 	mov	r4,r16
    9dfc:	dfc00217 	ldw	ra,8(sp)
    9e00:	dc000117 	ldw	r16,4(sp)
    9e04:	dec00304 	addi	sp,sp,12
    9e08:	0009ba41 	jmpi	9ba4 <__sflush_r>
    9e0c:	d9400015 	stw	r5,0(sp)
    9e10:	000a19c0 	call	a19c <__sinit>
    9e14:	d9400017 	ldw	r5,0(sp)
    9e18:	003ff006 	br	9ddc <__alt_data_end+0xff009ddc>

00009e1c <fflush>:
    9e1c:	20000526 	beq	r4,zero,9e34 <fflush+0x18>
    9e20:	00800074 	movhi	r2,1
    9e24:	1098ba04 	addi	r2,r2,25320
    9e28:	200b883a 	mov	r5,r4
    9e2c:	11000017 	ldw	r4,0(r2)
    9e30:	0009dc01 	jmpi	9dc0 <_fflush_r>
    9e34:	00800074 	movhi	r2,1
    9e38:	1098b904 	addi	r2,r2,25316
    9e3c:	11000017 	ldw	r4,0(r2)
    9e40:	01400074 	movhi	r5,1
    9e44:	29677004 	addi	r5,r5,-25152
    9e48:	000aba01 	jmpi	aba0 <_fwalk_reent>

00009e4c <__fp_unlock>:
    9e4c:	0005883a 	mov	r2,zero
    9e50:	f800283a 	ret

00009e54 <_cleanup_r>:
    9e54:	01400074 	movhi	r5,1
    9e58:	2978d604 	addi	r5,r5,-7336
    9e5c:	000aba01 	jmpi	aba0 <_fwalk_reent>

00009e60 <__sinit.part.1>:
    9e60:	defff704 	addi	sp,sp,-36
    9e64:	00c00074 	movhi	r3,1
    9e68:	dfc00815 	stw	ra,32(sp)
    9e6c:	ddc00715 	stw	r23,28(sp)
    9e70:	dd800615 	stw	r22,24(sp)
    9e74:	dd400515 	stw	r21,20(sp)
    9e78:	dd000415 	stw	r20,16(sp)
    9e7c:	dcc00315 	stw	r19,12(sp)
    9e80:	dc800215 	stw	r18,8(sp)
    9e84:	dc400115 	stw	r17,4(sp)
    9e88:	dc000015 	stw	r16,0(sp)
    9e8c:	18e79504 	addi	r3,r3,-25004
    9e90:	24000117 	ldw	r16,4(r4)
    9e94:	20c00f15 	stw	r3,60(r4)
    9e98:	2080bb04 	addi	r2,r4,748
    9e9c:	00c000c4 	movi	r3,3
    9ea0:	20c0b915 	stw	r3,740(r4)
    9ea4:	2080ba15 	stw	r2,744(r4)
    9ea8:	2000b815 	stw	zero,736(r4)
    9eac:	05c00204 	movi	r23,8
    9eb0:	00800104 	movi	r2,4
    9eb4:	2025883a 	mov	r18,r4
    9eb8:	b80d883a 	mov	r6,r23
    9ebc:	81001704 	addi	r4,r16,92
    9ec0:	000b883a 	mov	r5,zero
    9ec4:	80000015 	stw	zero,0(r16)
    9ec8:	80000115 	stw	zero,4(r16)
    9ecc:	80000215 	stw	zero,8(r16)
    9ed0:	8080030d 	sth	r2,12(r16)
    9ed4:	80001915 	stw	zero,100(r16)
    9ed8:	8000038d 	sth	zero,14(r16)
    9edc:	80000415 	stw	zero,16(r16)
    9ee0:	80000515 	stw	zero,20(r16)
    9ee4:	80000615 	stw	zero,24(r16)
    9ee8:	000b2840 	call	b284 <memset>
    9eec:	05800074 	movhi	r22,1
    9ef0:	94400217 	ldw	r17,8(r18)
    9ef4:	05400074 	movhi	r21,1
    9ef8:	05000074 	movhi	r20,1
    9efc:	04c00074 	movhi	r19,1
    9f00:	b5b26004 	addi	r22,r22,-13952
    9f04:	ad727704 	addi	r21,r21,-13860
    9f08:	a5329604 	addi	r20,r20,-13736
    9f0c:	9cf2ad04 	addi	r19,r19,-13644
    9f10:	85800815 	stw	r22,32(r16)
    9f14:	85400915 	stw	r21,36(r16)
    9f18:	85000a15 	stw	r20,40(r16)
    9f1c:	84c00b15 	stw	r19,44(r16)
    9f20:	84000715 	stw	r16,28(r16)
    9f24:	00800284 	movi	r2,10
    9f28:	8880030d 	sth	r2,12(r17)
    9f2c:	00800044 	movi	r2,1
    9f30:	b80d883a 	mov	r6,r23
    9f34:	89001704 	addi	r4,r17,92
    9f38:	000b883a 	mov	r5,zero
    9f3c:	88000015 	stw	zero,0(r17)
    9f40:	88000115 	stw	zero,4(r17)
    9f44:	88000215 	stw	zero,8(r17)
    9f48:	88001915 	stw	zero,100(r17)
    9f4c:	8880038d 	sth	r2,14(r17)
    9f50:	88000415 	stw	zero,16(r17)
    9f54:	88000515 	stw	zero,20(r17)
    9f58:	88000615 	stw	zero,24(r17)
    9f5c:	000b2840 	call	b284 <memset>
    9f60:	94000317 	ldw	r16,12(r18)
    9f64:	00800484 	movi	r2,18
    9f68:	8c400715 	stw	r17,28(r17)
    9f6c:	8d800815 	stw	r22,32(r17)
    9f70:	8d400915 	stw	r21,36(r17)
    9f74:	8d000a15 	stw	r20,40(r17)
    9f78:	8cc00b15 	stw	r19,44(r17)
    9f7c:	8080030d 	sth	r2,12(r16)
    9f80:	00800084 	movi	r2,2
    9f84:	80000015 	stw	zero,0(r16)
    9f88:	80000115 	stw	zero,4(r16)
    9f8c:	80000215 	stw	zero,8(r16)
    9f90:	80001915 	stw	zero,100(r16)
    9f94:	8080038d 	sth	r2,14(r16)
    9f98:	80000415 	stw	zero,16(r16)
    9f9c:	80000515 	stw	zero,20(r16)
    9fa0:	80000615 	stw	zero,24(r16)
    9fa4:	b80d883a 	mov	r6,r23
    9fa8:	000b883a 	mov	r5,zero
    9fac:	81001704 	addi	r4,r16,92
    9fb0:	000b2840 	call	b284 <memset>
    9fb4:	00800044 	movi	r2,1
    9fb8:	84000715 	stw	r16,28(r16)
    9fbc:	85800815 	stw	r22,32(r16)
    9fc0:	85400915 	stw	r21,36(r16)
    9fc4:	85000a15 	stw	r20,40(r16)
    9fc8:	84c00b15 	stw	r19,44(r16)
    9fcc:	90800e15 	stw	r2,56(r18)
    9fd0:	dfc00817 	ldw	ra,32(sp)
    9fd4:	ddc00717 	ldw	r23,28(sp)
    9fd8:	dd800617 	ldw	r22,24(sp)
    9fdc:	dd400517 	ldw	r21,20(sp)
    9fe0:	dd000417 	ldw	r20,16(sp)
    9fe4:	dcc00317 	ldw	r19,12(sp)
    9fe8:	dc800217 	ldw	r18,8(sp)
    9fec:	dc400117 	ldw	r17,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00904 	addi	sp,sp,36
    9ff8:	f800283a 	ret

00009ffc <__fp_lock>:
    9ffc:	0005883a 	mov	r2,zero
    a000:	f800283a 	ret

0000a004 <__sfmoreglue>:
    a004:	defffc04 	addi	sp,sp,-16
    a008:	dc400115 	stw	r17,4(sp)
    a00c:	2c7fffc4 	addi	r17,r5,-1
    a010:	8c401a24 	muli	r17,r17,104
    a014:	dc800215 	stw	r18,8(sp)
    a018:	2825883a 	mov	r18,r5
    a01c:	89401d04 	addi	r5,r17,116
    a020:	dc000015 	stw	r16,0(sp)
    a024:	dfc00315 	stw	ra,12(sp)
    a028:	00054c00 	call	54c0 <_malloc_r>
    a02c:	1021883a 	mov	r16,r2
    a030:	10000726 	beq	r2,zero,a050 <__sfmoreglue+0x4c>
    a034:	11000304 	addi	r4,r2,12
    a038:	10000015 	stw	zero,0(r2)
    a03c:	14800115 	stw	r18,4(r2)
    a040:	11000215 	stw	r4,8(r2)
    a044:	89801a04 	addi	r6,r17,104
    a048:	000b883a 	mov	r5,zero
    a04c:	000b2840 	call	b284 <memset>
    a050:	8005883a 	mov	r2,r16
    a054:	dfc00317 	ldw	ra,12(sp)
    a058:	dc800217 	ldw	r18,8(sp)
    a05c:	dc400117 	ldw	r17,4(sp)
    a060:	dc000017 	ldw	r16,0(sp)
    a064:	dec00404 	addi	sp,sp,16
    a068:	f800283a 	ret

0000a06c <__sfp>:
    a06c:	defffb04 	addi	sp,sp,-20
    a070:	dc000015 	stw	r16,0(sp)
    a074:	04000074 	movhi	r16,1
    a078:	8418b904 	addi	r16,r16,25316
    a07c:	dcc00315 	stw	r19,12(sp)
    a080:	2027883a 	mov	r19,r4
    a084:	81000017 	ldw	r4,0(r16)
    a088:	dfc00415 	stw	ra,16(sp)
    a08c:	dc800215 	stw	r18,8(sp)
    a090:	20800e17 	ldw	r2,56(r4)
    a094:	dc400115 	stw	r17,4(sp)
    a098:	1000021e 	bne	r2,zero,a0a4 <__sfp+0x38>
    a09c:	0009e600 	call	9e60 <__sinit.part.1>
    a0a0:	81000017 	ldw	r4,0(r16)
    a0a4:	2480b804 	addi	r18,r4,736
    a0a8:	047fffc4 	movi	r17,-1
    a0ac:	91000117 	ldw	r4,4(r18)
    a0b0:	94000217 	ldw	r16,8(r18)
    a0b4:	213fffc4 	addi	r4,r4,-1
    a0b8:	20000a16 	blt	r4,zero,a0e4 <__sfp+0x78>
    a0bc:	8080030f 	ldh	r2,12(r16)
    a0c0:	10000c26 	beq	r2,zero,a0f4 <__sfp+0x88>
    a0c4:	80c01d04 	addi	r3,r16,116
    a0c8:	00000206 	br	a0d4 <__sfp+0x68>
    a0cc:	18bfe60f 	ldh	r2,-104(r3)
    a0d0:	10000826 	beq	r2,zero,a0f4 <__sfp+0x88>
    a0d4:	213fffc4 	addi	r4,r4,-1
    a0d8:	1c3ffd04 	addi	r16,r3,-12
    a0dc:	18c01a04 	addi	r3,r3,104
    a0e0:	247ffa1e 	bne	r4,r17,a0cc <__alt_data_end+0xff00a0cc>
    a0e4:	90800017 	ldw	r2,0(r18)
    a0e8:	10001d26 	beq	r2,zero,a160 <__sfp+0xf4>
    a0ec:	1025883a 	mov	r18,r2
    a0f0:	003fee06 	br	a0ac <__alt_data_end+0xff00a0ac>
    a0f4:	00bfffc4 	movi	r2,-1
    a0f8:	8080038d 	sth	r2,14(r16)
    a0fc:	00800044 	movi	r2,1
    a100:	8080030d 	sth	r2,12(r16)
    a104:	80001915 	stw	zero,100(r16)
    a108:	80000015 	stw	zero,0(r16)
    a10c:	80000215 	stw	zero,8(r16)
    a110:	80000115 	stw	zero,4(r16)
    a114:	80000415 	stw	zero,16(r16)
    a118:	80000515 	stw	zero,20(r16)
    a11c:	80000615 	stw	zero,24(r16)
    a120:	01800204 	movi	r6,8
    a124:	000b883a 	mov	r5,zero
    a128:	81001704 	addi	r4,r16,92
    a12c:	000b2840 	call	b284 <memset>
    a130:	8005883a 	mov	r2,r16
    a134:	80000c15 	stw	zero,48(r16)
    a138:	80000d15 	stw	zero,52(r16)
    a13c:	80001115 	stw	zero,68(r16)
    a140:	80001215 	stw	zero,72(r16)
    a144:	dfc00417 	ldw	ra,16(sp)
    a148:	dcc00317 	ldw	r19,12(sp)
    a14c:	dc800217 	ldw	r18,8(sp)
    a150:	dc400117 	ldw	r17,4(sp)
    a154:	dc000017 	ldw	r16,0(sp)
    a158:	dec00504 	addi	sp,sp,20
    a15c:	f800283a 	ret
    a160:	01400104 	movi	r5,4
    a164:	9809883a 	mov	r4,r19
    a168:	000a0040 	call	a004 <__sfmoreglue>
    a16c:	90800015 	stw	r2,0(r18)
    a170:	103fde1e 	bne	r2,zero,a0ec <__alt_data_end+0xff00a0ec>
    a174:	00800304 	movi	r2,12
    a178:	98800015 	stw	r2,0(r19)
    a17c:	0005883a 	mov	r2,zero
    a180:	003ff006 	br	a144 <__alt_data_end+0xff00a144>

0000a184 <_cleanup>:
    a184:	00800074 	movhi	r2,1
    a188:	1098b904 	addi	r2,r2,25316
    a18c:	11000017 	ldw	r4,0(r2)
    a190:	01400074 	movhi	r5,1
    a194:	2978d604 	addi	r5,r5,-7336
    a198:	000aba01 	jmpi	aba0 <_fwalk_reent>

0000a19c <__sinit>:
    a19c:	20800e17 	ldw	r2,56(r4)
    a1a0:	10000126 	beq	r2,zero,a1a8 <__sinit+0xc>
    a1a4:	f800283a 	ret
    a1a8:	0009e601 	jmpi	9e60 <__sinit.part.1>

0000a1ac <__sfp_lock_acquire>:
    a1ac:	f800283a 	ret

0000a1b0 <__sfp_lock_release>:
    a1b0:	f800283a 	ret

0000a1b4 <__sinit_lock_acquire>:
    a1b4:	f800283a 	ret

0000a1b8 <__sinit_lock_release>:
    a1b8:	f800283a 	ret

0000a1bc <__fp_lock_all>:
    a1bc:	00800074 	movhi	r2,1
    a1c0:	1098ba04 	addi	r2,r2,25320
    a1c4:	11000017 	ldw	r4,0(r2)
    a1c8:	01400074 	movhi	r5,1
    a1cc:	2967ff04 	addi	r5,r5,-24580
    a1d0:	000aadc1 	jmpi	aadc <_fwalk>

0000a1d4 <__fp_unlock_all>:
    a1d4:	00800074 	movhi	r2,1
    a1d8:	1098ba04 	addi	r2,r2,25320
    a1dc:	11000017 	ldw	r4,0(r2)
    a1e0:	01400074 	movhi	r5,1
    a1e4:	29679304 	addi	r5,r5,-25012
    a1e8:	000aadc1 	jmpi	aadc <_fwalk>

0000a1ec <_malloc_trim_r>:
    a1ec:	defffb04 	addi	sp,sp,-20
    a1f0:	dcc00315 	stw	r19,12(sp)
    a1f4:	04c00074 	movhi	r19,1
    a1f8:	dc800215 	stw	r18,8(sp)
    a1fc:	dc400115 	stw	r17,4(sp)
    a200:	dc000015 	stw	r16,0(sp)
    a204:	dfc00415 	stw	ra,16(sp)
    a208:	2821883a 	mov	r16,r5
    a20c:	9cd20c04 	addi	r19,r19,18480
    a210:	2025883a 	mov	r18,r4
    a214:	001182c0 	call	1182c <__malloc_lock>
    a218:	98800217 	ldw	r2,8(r19)
    a21c:	14400117 	ldw	r17,4(r2)
    a220:	00bfff04 	movi	r2,-4
    a224:	88a2703a 	and	r17,r17,r2
    a228:	8c21c83a 	sub	r16,r17,r16
    a22c:	8403fbc4 	addi	r16,r16,4079
    a230:	8020d33a 	srli	r16,r16,12
    a234:	0083ffc4 	movi	r2,4095
    a238:	843fffc4 	addi	r16,r16,-1
    a23c:	8020933a 	slli	r16,r16,12
    a240:	1400060e 	bge	r2,r16,a25c <_malloc_trim_r+0x70>
    a244:	000b883a 	mov	r5,zero
    a248:	9009883a 	mov	r4,r18
    a24c:	0005e0c0 	call	5e0c <_sbrk_r>
    a250:	98c00217 	ldw	r3,8(r19)
    a254:	1c47883a 	add	r3,r3,r17
    a258:	10c00a26 	beq	r2,r3,a284 <_malloc_trim_r+0x98>
    a25c:	9009883a 	mov	r4,r18
    a260:	00118500 	call	11850 <__malloc_unlock>
    a264:	0005883a 	mov	r2,zero
    a268:	dfc00417 	ldw	ra,16(sp)
    a26c:	dcc00317 	ldw	r19,12(sp)
    a270:	dc800217 	ldw	r18,8(sp)
    a274:	dc400117 	ldw	r17,4(sp)
    a278:	dc000017 	ldw	r16,0(sp)
    a27c:	dec00504 	addi	sp,sp,20
    a280:	f800283a 	ret
    a284:	040bc83a 	sub	r5,zero,r16
    a288:	9009883a 	mov	r4,r18
    a28c:	0005e0c0 	call	5e0c <_sbrk_r>
    a290:	00ffffc4 	movi	r3,-1
    a294:	10c00d26 	beq	r2,r3,a2cc <_malloc_trim_r+0xe0>
    a298:	00c00074 	movhi	r3,1
    a29c:	18dfef04 	addi	r3,r3,32700
    a2a0:	18800017 	ldw	r2,0(r3)
    a2a4:	99000217 	ldw	r4,8(r19)
    a2a8:	8c23c83a 	sub	r17,r17,r16
    a2ac:	8c400054 	ori	r17,r17,1
    a2b0:	1421c83a 	sub	r16,r2,r16
    a2b4:	24400115 	stw	r17,4(r4)
    a2b8:	9009883a 	mov	r4,r18
    a2bc:	1c000015 	stw	r16,0(r3)
    a2c0:	00118500 	call	11850 <__malloc_unlock>
    a2c4:	00800044 	movi	r2,1
    a2c8:	003fe706 	br	a268 <__alt_data_end+0xff00a268>
    a2cc:	000b883a 	mov	r5,zero
    a2d0:	9009883a 	mov	r4,r18
    a2d4:	0005e0c0 	call	5e0c <_sbrk_r>
    a2d8:	99000217 	ldw	r4,8(r19)
    a2dc:	014003c4 	movi	r5,15
    a2e0:	1107c83a 	sub	r3,r2,r4
    a2e4:	28ffdd0e 	bge	r5,r3,a25c <__alt_data_end+0xff00a25c>
    a2e8:	01400074 	movhi	r5,1
    a2ec:	2958b704 	addi	r5,r5,25308
    a2f0:	29400017 	ldw	r5,0(r5)
    a2f4:	18c00054 	ori	r3,r3,1
    a2f8:	20c00115 	stw	r3,4(r4)
    a2fc:	00c00074 	movhi	r3,1
    a300:	1145c83a 	sub	r2,r2,r5
    a304:	18dfef04 	addi	r3,r3,32700
    a308:	18800015 	stw	r2,0(r3)
    a30c:	003fd306 	br	a25c <__alt_data_end+0xff00a25c>

0000a310 <_free_r>:
    a310:	28004126 	beq	r5,zero,a418 <_free_r+0x108>
    a314:	defffd04 	addi	sp,sp,-12
    a318:	dc400115 	stw	r17,4(sp)
    a31c:	dc000015 	stw	r16,0(sp)
    a320:	2023883a 	mov	r17,r4
    a324:	2821883a 	mov	r16,r5
    a328:	dfc00215 	stw	ra,8(sp)
    a32c:	001182c0 	call	1182c <__malloc_lock>
    a330:	81ffff17 	ldw	r7,-4(r16)
    a334:	00bfff84 	movi	r2,-2
    a338:	01000074 	movhi	r4,1
    a33c:	81bffe04 	addi	r6,r16,-8
    a340:	3884703a 	and	r2,r7,r2
    a344:	21120c04 	addi	r4,r4,18480
    a348:	308b883a 	add	r5,r6,r2
    a34c:	2a400117 	ldw	r9,4(r5)
    a350:	22000217 	ldw	r8,8(r4)
    a354:	00ffff04 	movi	r3,-4
    a358:	48c6703a 	and	r3,r9,r3
    a35c:	2a005726 	beq	r5,r8,a4bc <_free_r+0x1ac>
    a360:	28c00115 	stw	r3,4(r5)
    a364:	39c0004c 	andi	r7,r7,1
    a368:	3800091e 	bne	r7,zero,a390 <_free_r+0x80>
    a36c:	823ffe17 	ldw	r8,-8(r16)
    a370:	22400204 	addi	r9,r4,8
    a374:	320dc83a 	sub	r6,r6,r8
    a378:	31c00217 	ldw	r7,8(r6)
    a37c:	1205883a 	add	r2,r2,r8
    a380:	3a406526 	beq	r7,r9,a518 <_free_r+0x208>
    a384:	32000317 	ldw	r8,12(r6)
    a388:	3a000315 	stw	r8,12(r7)
    a38c:	41c00215 	stw	r7,8(r8)
    a390:	28cf883a 	add	r7,r5,r3
    a394:	39c00117 	ldw	r7,4(r7)
    a398:	39c0004c 	andi	r7,r7,1
    a39c:	38003a26 	beq	r7,zero,a488 <_free_r+0x178>
    a3a0:	10c00054 	ori	r3,r2,1
    a3a4:	30c00115 	stw	r3,4(r6)
    a3a8:	3087883a 	add	r3,r6,r2
    a3ac:	18800015 	stw	r2,0(r3)
    a3b0:	00c07fc4 	movi	r3,511
    a3b4:	18801936 	bltu	r3,r2,a41c <_free_r+0x10c>
    a3b8:	1004d0fa 	srli	r2,r2,3
    a3bc:	01c00044 	movi	r7,1
    a3c0:	21400117 	ldw	r5,4(r4)
    a3c4:	10c00044 	addi	r3,r2,1
    a3c8:	18c7883a 	add	r3,r3,r3
    a3cc:	1005d0ba 	srai	r2,r2,2
    a3d0:	18c7883a 	add	r3,r3,r3
    a3d4:	18c7883a 	add	r3,r3,r3
    a3d8:	1907883a 	add	r3,r3,r4
    a3dc:	3884983a 	sll	r2,r7,r2
    a3e0:	19c00017 	ldw	r7,0(r3)
    a3e4:	1a3ffe04 	addi	r8,r3,-8
    a3e8:	1144b03a 	or	r2,r2,r5
    a3ec:	32000315 	stw	r8,12(r6)
    a3f0:	31c00215 	stw	r7,8(r6)
    a3f4:	20800115 	stw	r2,4(r4)
    a3f8:	19800015 	stw	r6,0(r3)
    a3fc:	39800315 	stw	r6,12(r7)
    a400:	8809883a 	mov	r4,r17
    a404:	dfc00217 	ldw	ra,8(sp)
    a408:	dc400117 	ldw	r17,4(sp)
    a40c:	dc000017 	ldw	r16,0(sp)
    a410:	dec00304 	addi	sp,sp,12
    a414:	00118501 	jmpi	11850 <__malloc_unlock>
    a418:	f800283a 	ret
    a41c:	100ad27a 	srli	r5,r2,9
    a420:	00c00104 	movi	r3,4
    a424:	19404a36 	bltu	r3,r5,a550 <_free_r+0x240>
    a428:	100ad1ba 	srli	r5,r2,6
    a42c:	28c00e44 	addi	r3,r5,57
    a430:	18c7883a 	add	r3,r3,r3
    a434:	29400e04 	addi	r5,r5,56
    a438:	18c7883a 	add	r3,r3,r3
    a43c:	18c7883a 	add	r3,r3,r3
    a440:	1909883a 	add	r4,r3,r4
    a444:	20c00017 	ldw	r3,0(r4)
    a448:	01c00074 	movhi	r7,1
    a44c:	213ffe04 	addi	r4,r4,-8
    a450:	39d20c04 	addi	r7,r7,18480
    a454:	20c04426 	beq	r4,r3,a568 <_free_r+0x258>
    a458:	01ffff04 	movi	r7,-4
    a45c:	19400117 	ldw	r5,4(r3)
    a460:	29ca703a 	and	r5,r5,r7
    a464:	1140022e 	bgeu	r2,r5,a470 <_free_r+0x160>
    a468:	18c00217 	ldw	r3,8(r3)
    a46c:	20fffb1e 	bne	r4,r3,a45c <__alt_data_end+0xff00a45c>
    a470:	19000317 	ldw	r4,12(r3)
    a474:	31000315 	stw	r4,12(r6)
    a478:	30c00215 	stw	r3,8(r6)
    a47c:	21800215 	stw	r6,8(r4)
    a480:	19800315 	stw	r6,12(r3)
    a484:	003fde06 	br	a400 <__alt_data_end+0xff00a400>
    a488:	29c00217 	ldw	r7,8(r5)
    a48c:	10c5883a 	add	r2,r2,r3
    a490:	00c00074 	movhi	r3,1
    a494:	18d20e04 	addi	r3,r3,18488
    a498:	38c03b26 	beq	r7,r3,a588 <_free_r+0x278>
    a49c:	2a000317 	ldw	r8,12(r5)
    a4a0:	11400054 	ori	r5,r2,1
    a4a4:	3087883a 	add	r3,r6,r2
    a4a8:	3a000315 	stw	r8,12(r7)
    a4ac:	41c00215 	stw	r7,8(r8)
    a4b0:	31400115 	stw	r5,4(r6)
    a4b4:	18800015 	stw	r2,0(r3)
    a4b8:	003fbd06 	br	a3b0 <__alt_data_end+0xff00a3b0>
    a4bc:	39c0004c 	andi	r7,r7,1
    a4c0:	10c5883a 	add	r2,r2,r3
    a4c4:	3800071e 	bne	r7,zero,a4e4 <_free_r+0x1d4>
    a4c8:	81fffe17 	ldw	r7,-8(r16)
    a4cc:	31cdc83a 	sub	r6,r6,r7
    a4d0:	30c00317 	ldw	r3,12(r6)
    a4d4:	31400217 	ldw	r5,8(r6)
    a4d8:	11c5883a 	add	r2,r2,r7
    a4dc:	28c00315 	stw	r3,12(r5)
    a4e0:	19400215 	stw	r5,8(r3)
    a4e4:	10c00054 	ori	r3,r2,1
    a4e8:	30c00115 	stw	r3,4(r6)
    a4ec:	00c00074 	movhi	r3,1
    a4f0:	18d8b804 	addi	r3,r3,25312
    a4f4:	18c00017 	ldw	r3,0(r3)
    a4f8:	21800215 	stw	r6,8(r4)
    a4fc:	10ffc036 	bltu	r2,r3,a400 <__alt_data_end+0xff00a400>
    a500:	00800074 	movhi	r2,1
    a504:	109fe104 	addi	r2,r2,32644
    a508:	11400017 	ldw	r5,0(r2)
    a50c:	8809883a 	mov	r4,r17
    a510:	000a1ec0 	call	a1ec <_malloc_trim_r>
    a514:	003fba06 	br	a400 <__alt_data_end+0xff00a400>
    a518:	28c9883a 	add	r4,r5,r3
    a51c:	21000117 	ldw	r4,4(r4)
    a520:	2100004c 	andi	r4,r4,1
    a524:	2000391e 	bne	r4,zero,a60c <_free_r+0x2fc>
    a528:	29c00217 	ldw	r7,8(r5)
    a52c:	29000317 	ldw	r4,12(r5)
    a530:	1885883a 	add	r2,r3,r2
    a534:	10c00054 	ori	r3,r2,1
    a538:	39000315 	stw	r4,12(r7)
    a53c:	21c00215 	stw	r7,8(r4)
    a540:	30c00115 	stw	r3,4(r6)
    a544:	308d883a 	add	r6,r6,r2
    a548:	30800015 	stw	r2,0(r6)
    a54c:	003fac06 	br	a400 <__alt_data_end+0xff00a400>
    a550:	00c00504 	movi	r3,20
    a554:	19401536 	bltu	r3,r5,a5ac <_free_r+0x29c>
    a558:	28c01704 	addi	r3,r5,92
    a55c:	18c7883a 	add	r3,r3,r3
    a560:	294016c4 	addi	r5,r5,91
    a564:	003fb406 	br	a438 <__alt_data_end+0xff00a438>
    a568:	280bd0ba 	srai	r5,r5,2
    a56c:	00c00044 	movi	r3,1
    a570:	38800117 	ldw	r2,4(r7)
    a574:	194a983a 	sll	r5,r3,r5
    a578:	2007883a 	mov	r3,r4
    a57c:	2884b03a 	or	r2,r5,r2
    a580:	38800115 	stw	r2,4(r7)
    a584:	003fbb06 	br	a474 <__alt_data_end+0xff00a474>
    a588:	21800515 	stw	r6,20(r4)
    a58c:	21800415 	stw	r6,16(r4)
    a590:	10c00054 	ori	r3,r2,1
    a594:	31c00315 	stw	r7,12(r6)
    a598:	31c00215 	stw	r7,8(r6)
    a59c:	30c00115 	stw	r3,4(r6)
    a5a0:	308d883a 	add	r6,r6,r2
    a5a4:	30800015 	stw	r2,0(r6)
    a5a8:	003f9506 	br	a400 <__alt_data_end+0xff00a400>
    a5ac:	00c01504 	movi	r3,84
    a5b0:	19400536 	bltu	r3,r5,a5c8 <_free_r+0x2b8>
    a5b4:	100ad33a 	srli	r5,r2,12
    a5b8:	28c01bc4 	addi	r3,r5,111
    a5bc:	18c7883a 	add	r3,r3,r3
    a5c0:	29401b84 	addi	r5,r5,110
    a5c4:	003f9c06 	br	a438 <__alt_data_end+0xff00a438>
    a5c8:	00c05504 	movi	r3,340
    a5cc:	19400536 	bltu	r3,r5,a5e4 <_free_r+0x2d4>
    a5d0:	100ad3fa 	srli	r5,r2,15
    a5d4:	28c01e04 	addi	r3,r5,120
    a5d8:	18c7883a 	add	r3,r3,r3
    a5dc:	29401dc4 	addi	r5,r5,119
    a5e0:	003f9506 	br	a438 <__alt_data_end+0xff00a438>
    a5e4:	00c15504 	movi	r3,1364
    a5e8:	19400536 	bltu	r3,r5,a600 <_free_r+0x2f0>
    a5ec:	100ad4ba 	srli	r5,r2,18
    a5f0:	28c01f44 	addi	r3,r5,125
    a5f4:	18c7883a 	add	r3,r3,r3
    a5f8:	29401f04 	addi	r5,r5,124
    a5fc:	003f8e06 	br	a438 <__alt_data_end+0xff00a438>
    a600:	00c03f84 	movi	r3,254
    a604:	01401f84 	movi	r5,126
    a608:	003f8b06 	br	a438 <__alt_data_end+0xff00a438>
    a60c:	10c00054 	ori	r3,r2,1
    a610:	30c00115 	stw	r3,4(r6)
    a614:	308d883a 	add	r6,r6,r2
    a618:	30800015 	stw	r2,0(r6)
    a61c:	003f7806 	br	a400 <__alt_data_end+0xff00a400>

0000a620 <__sfvwrite_r>:
    a620:	30800217 	ldw	r2,8(r6)
    a624:	10006726 	beq	r2,zero,a7c4 <__sfvwrite_r+0x1a4>
    a628:	28c0030b 	ldhu	r3,12(r5)
    a62c:	defff404 	addi	sp,sp,-48
    a630:	dd400715 	stw	r21,28(sp)
    a634:	dd000615 	stw	r20,24(sp)
    a638:	dc000215 	stw	r16,8(sp)
    a63c:	dfc00b15 	stw	ra,44(sp)
    a640:	df000a15 	stw	fp,40(sp)
    a644:	ddc00915 	stw	r23,36(sp)
    a648:	dd800815 	stw	r22,32(sp)
    a64c:	dcc00515 	stw	r19,20(sp)
    a650:	dc800415 	stw	r18,16(sp)
    a654:	dc400315 	stw	r17,12(sp)
    a658:	1880020c 	andi	r2,r3,8
    a65c:	2821883a 	mov	r16,r5
    a660:	202b883a 	mov	r21,r4
    a664:	3029883a 	mov	r20,r6
    a668:	10002726 	beq	r2,zero,a708 <__sfvwrite_r+0xe8>
    a66c:	28800417 	ldw	r2,16(r5)
    a670:	10002526 	beq	r2,zero,a708 <__sfvwrite_r+0xe8>
    a674:	1880008c 	andi	r2,r3,2
    a678:	a4400017 	ldw	r17,0(r20)
    a67c:	10002a26 	beq	r2,zero,a728 <__sfvwrite_r+0x108>
    a680:	05a00034 	movhi	r22,32768
    a684:	0027883a 	mov	r19,zero
    a688:	0025883a 	mov	r18,zero
    a68c:	b5bf0004 	addi	r22,r22,-1024
    a690:	980d883a 	mov	r6,r19
    a694:	a809883a 	mov	r4,r21
    a698:	90004626 	beq	r18,zero,a7b4 <__sfvwrite_r+0x194>
    a69c:	900f883a 	mov	r7,r18
    a6a0:	b480022e 	bgeu	r22,r18,a6ac <__sfvwrite_r+0x8c>
    a6a4:	01e00034 	movhi	r7,32768
    a6a8:	39ff0004 	addi	r7,r7,-1024
    a6ac:	80800917 	ldw	r2,36(r16)
    a6b0:	81400717 	ldw	r5,28(r16)
    a6b4:	103ee83a 	callr	r2
    a6b8:	0080570e 	bge	zero,r2,a818 <__sfvwrite_r+0x1f8>
    a6bc:	a0c00217 	ldw	r3,8(r20)
    a6c0:	98a7883a 	add	r19,r19,r2
    a6c4:	90a5c83a 	sub	r18,r18,r2
    a6c8:	1885c83a 	sub	r2,r3,r2
    a6cc:	a0800215 	stw	r2,8(r20)
    a6d0:	103fef1e 	bne	r2,zero,a690 <__alt_data_end+0xff00a690>
    a6d4:	0005883a 	mov	r2,zero
    a6d8:	dfc00b17 	ldw	ra,44(sp)
    a6dc:	df000a17 	ldw	fp,40(sp)
    a6e0:	ddc00917 	ldw	r23,36(sp)
    a6e4:	dd800817 	ldw	r22,32(sp)
    a6e8:	dd400717 	ldw	r21,28(sp)
    a6ec:	dd000617 	ldw	r20,24(sp)
    a6f0:	dcc00517 	ldw	r19,20(sp)
    a6f4:	dc800417 	ldw	r18,16(sp)
    a6f8:	dc400317 	ldw	r17,12(sp)
    a6fc:	dc000217 	ldw	r16,8(sp)
    a700:	dec00c04 	addi	sp,sp,48
    a704:	f800283a 	ret
    a708:	800b883a 	mov	r5,r16
    a70c:	a809883a 	mov	r4,r21
    a710:	00081c80 	call	81c8 <__swsetup_r>
    a714:	1000eb1e 	bne	r2,zero,aac4 <__sfvwrite_r+0x4a4>
    a718:	80c0030b 	ldhu	r3,12(r16)
    a71c:	a4400017 	ldw	r17,0(r20)
    a720:	1880008c 	andi	r2,r3,2
    a724:	103fd61e 	bne	r2,zero,a680 <__alt_data_end+0xff00a680>
    a728:	1880004c 	andi	r2,r3,1
    a72c:	10003f1e 	bne	r2,zero,a82c <__sfvwrite_r+0x20c>
    a730:	0039883a 	mov	fp,zero
    a734:	0025883a 	mov	r18,zero
    a738:	90001a26 	beq	r18,zero,a7a4 <__sfvwrite_r+0x184>
    a73c:	1880800c 	andi	r2,r3,512
    a740:	84c00217 	ldw	r19,8(r16)
    a744:	10002126 	beq	r2,zero,a7cc <__sfvwrite_r+0x1ac>
    a748:	982f883a 	mov	r23,r19
    a74c:	94c09336 	bltu	r18,r19,a99c <__sfvwrite_r+0x37c>
    a750:	1881200c 	andi	r2,r3,1152
    a754:	10009e1e 	bne	r2,zero,a9d0 <__sfvwrite_r+0x3b0>
    a758:	81000017 	ldw	r4,0(r16)
    a75c:	b80d883a 	mov	r6,r23
    a760:	e00b883a 	mov	r5,fp
    a764:	000b1280 	call	b128 <memmove>
    a768:	80c00217 	ldw	r3,8(r16)
    a76c:	81000017 	ldw	r4,0(r16)
    a770:	9005883a 	mov	r2,r18
    a774:	1ce7c83a 	sub	r19,r3,r19
    a778:	25cf883a 	add	r7,r4,r23
    a77c:	84c00215 	stw	r19,8(r16)
    a780:	81c00015 	stw	r7,0(r16)
    a784:	a0c00217 	ldw	r3,8(r20)
    a788:	e0b9883a 	add	fp,fp,r2
    a78c:	90a5c83a 	sub	r18,r18,r2
    a790:	18a7c83a 	sub	r19,r3,r2
    a794:	a4c00215 	stw	r19,8(r20)
    a798:	983fce26 	beq	r19,zero,a6d4 <__alt_data_end+0xff00a6d4>
    a79c:	80c0030b 	ldhu	r3,12(r16)
    a7a0:	903fe61e 	bne	r18,zero,a73c <__alt_data_end+0xff00a73c>
    a7a4:	8f000017 	ldw	fp,0(r17)
    a7a8:	8c800117 	ldw	r18,4(r17)
    a7ac:	8c400204 	addi	r17,r17,8
    a7b0:	003fe106 	br	a738 <__alt_data_end+0xff00a738>
    a7b4:	8cc00017 	ldw	r19,0(r17)
    a7b8:	8c800117 	ldw	r18,4(r17)
    a7bc:	8c400204 	addi	r17,r17,8
    a7c0:	003fb306 	br	a690 <__alt_data_end+0xff00a690>
    a7c4:	0005883a 	mov	r2,zero
    a7c8:	f800283a 	ret
    a7cc:	81000017 	ldw	r4,0(r16)
    a7d0:	80800417 	ldw	r2,16(r16)
    a7d4:	11005736 	bltu	r2,r4,a934 <__sfvwrite_r+0x314>
    a7d8:	85c00517 	ldw	r23,20(r16)
    a7dc:	95c05536 	bltu	r18,r23,a934 <__sfvwrite_r+0x314>
    a7e0:	00a00034 	movhi	r2,32768
    a7e4:	10bfffc4 	addi	r2,r2,-1
    a7e8:	9009883a 	mov	r4,r18
    a7ec:	1480012e 	bgeu	r2,r18,a7f4 <__sfvwrite_r+0x1d4>
    a7f0:	1009883a 	mov	r4,r2
    a7f4:	b80b883a 	mov	r5,r23
    a7f8:	00048f00 	call	48f0 <__divsi3>
    a7fc:	15cf383a 	mul	r7,r2,r23
    a800:	81400717 	ldw	r5,28(r16)
    a804:	80800917 	ldw	r2,36(r16)
    a808:	e00d883a 	mov	r6,fp
    a80c:	a809883a 	mov	r4,r21
    a810:	103ee83a 	callr	r2
    a814:	00bfdb16 	blt	zero,r2,a784 <__alt_data_end+0xff00a784>
    a818:	8080030b 	ldhu	r2,12(r16)
    a81c:	10801014 	ori	r2,r2,64
    a820:	8080030d 	sth	r2,12(r16)
    a824:	00bfffc4 	movi	r2,-1
    a828:	003fab06 	br	a6d8 <__alt_data_end+0xff00a6d8>
    a82c:	0027883a 	mov	r19,zero
    a830:	0011883a 	mov	r8,zero
    a834:	0039883a 	mov	fp,zero
    a838:	0025883a 	mov	r18,zero
    a83c:	90001f26 	beq	r18,zero,a8bc <__sfvwrite_r+0x29c>
    a840:	40005a26 	beq	r8,zero,a9ac <__sfvwrite_r+0x38c>
    a844:	982d883a 	mov	r22,r19
    a848:	94c0012e 	bgeu	r18,r19,a850 <__sfvwrite_r+0x230>
    a84c:	902d883a 	mov	r22,r18
    a850:	81000017 	ldw	r4,0(r16)
    a854:	80800417 	ldw	r2,16(r16)
    a858:	b02f883a 	mov	r23,r22
    a85c:	81c00517 	ldw	r7,20(r16)
    a860:	1100032e 	bgeu	r2,r4,a870 <__sfvwrite_r+0x250>
    a864:	80c00217 	ldw	r3,8(r16)
    a868:	38c7883a 	add	r3,r7,r3
    a86c:	1d801816 	blt	r3,r22,a8d0 <__sfvwrite_r+0x2b0>
    a870:	b1c03e16 	blt	r22,r7,a96c <__sfvwrite_r+0x34c>
    a874:	80800917 	ldw	r2,36(r16)
    a878:	81400717 	ldw	r5,28(r16)
    a87c:	e00d883a 	mov	r6,fp
    a880:	da000115 	stw	r8,4(sp)
    a884:	a809883a 	mov	r4,r21
    a888:	103ee83a 	callr	r2
    a88c:	102f883a 	mov	r23,r2
    a890:	da000117 	ldw	r8,4(sp)
    a894:	00bfe00e 	bge	zero,r2,a818 <__alt_data_end+0xff00a818>
    a898:	9de7c83a 	sub	r19,r19,r23
    a89c:	98001f26 	beq	r19,zero,a91c <__sfvwrite_r+0x2fc>
    a8a0:	a0800217 	ldw	r2,8(r20)
    a8a4:	e5f9883a 	add	fp,fp,r23
    a8a8:	95e5c83a 	sub	r18,r18,r23
    a8ac:	15efc83a 	sub	r23,r2,r23
    a8b0:	a5c00215 	stw	r23,8(r20)
    a8b4:	b83f8726 	beq	r23,zero,a6d4 <__alt_data_end+0xff00a6d4>
    a8b8:	903fe11e 	bne	r18,zero,a840 <__alt_data_end+0xff00a840>
    a8bc:	8f000017 	ldw	fp,0(r17)
    a8c0:	8c800117 	ldw	r18,4(r17)
    a8c4:	0011883a 	mov	r8,zero
    a8c8:	8c400204 	addi	r17,r17,8
    a8cc:	003fdb06 	br	a83c <__alt_data_end+0xff00a83c>
    a8d0:	180d883a 	mov	r6,r3
    a8d4:	e00b883a 	mov	r5,fp
    a8d8:	da000115 	stw	r8,4(sp)
    a8dc:	d8c00015 	stw	r3,0(sp)
    a8e0:	000b1280 	call	b128 <memmove>
    a8e4:	d8c00017 	ldw	r3,0(sp)
    a8e8:	80800017 	ldw	r2,0(r16)
    a8ec:	800b883a 	mov	r5,r16
    a8f0:	a809883a 	mov	r4,r21
    a8f4:	10c5883a 	add	r2,r2,r3
    a8f8:	80800015 	stw	r2,0(r16)
    a8fc:	d8c00015 	stw	r3,0(sp)
    a900:	0009dc00 	call	9dc0 <_fflush_r>
    a904:	d8c00017 	ldw	r3,0(sp)
    a908:	da000117 	ldw	r8,4(sp)
    a90c:	103fc21e 	bne	r2,zero,a818 <__alt_data_end+0xff00a818>
    a910:	182f883a 	mov	r23,r3
    a914:	9de7c83a 	sub	r19,r19,r23
    a918:	983fe11e 	bne	r19,zero,a8a0 <__alt_data_end+0xff00a8a0>
    a91c:	800b883a 	mov	r5,r16
    a920:	a809883a 	mov	r4,r21
    a924:	0009dc00 	call	9dc0 <_fflush_r>
    a928:	103fbb1e 	bne	r2,zero,a818 <__alt_data_end+0xff00a818>
    a92c:	0011883a 	mov	r8,zero
    a930:	003fdb06 	br	a8a0 <__alt_data_end+0xff00a8a0>
    a934:	94c0012e 	bgeu	r18,r19,a93c <__sfvwrite_r+0x31c>
    a938:	9027883a 	mov	r19,r18
    a93c:	980d883a 	mov	r6,r19
    a940:	e00b883a 	mov	r5,fp
    a944:	000b1280 	call	b128 <memmove>
    a948:	80800217 	ldw	r2,8(r16)
    a94c:	80c00017 	ldw	r3,0(r16)
    a950:	14c5c83a 	sub	r2,r2,r19
    a954:	1cc7883a 	add	r3,r3,r19
    a958:	80800215 	stw	r2,8(r16)
    a95c:	80c00015 	stw	r3,0(r16)
    a960:	10004326 	beq	r2,zero,aa70 <__sfvwrite_r+0x450>
    a964:	9805883a 	mov	r2,r19
    a968:	003f8606 	br	a784 <__alt_data_end+0xff00a784>
    a96c:	b00d883a 	mov	r6,r22
    a970:	e00b883a 	mov	r5,fp
    a974:	da000115 	stw	r8,4(sp)
    a978:	000b1280 	call	b128 <memmove>
    a97c:	80800217 	ldw	r2,8(r16)
    a980:	80c00017 	ldw	r3,0(r16)
    a984:	da000117 	ldw	r8,4(sp)
    a988:	1585c83a 	sub	r2,r2,r22
    a98c:	1dad883a 	add	r22,r3,r22
    a990:	80800215 	stw	r2,8(r16)
    a994:	85800015 	stw	r22,0(r16)
    a998:	003fbf06 	br	a898 <__alt_data_end+0xff00a898>
    a99c:	81000017 	ldw	r4,0(r16)
    a9a0:	9027883a 	mov	r19,r18
    a9a4:	902f883a 	mov	r23,r18
    a9a8:	003f6c06 	br	a75c <__alt_data_end+0xff00a75c>
    a9ac:	900d883a 	mov	r6,r18
    a9b0:	01400284 	movi	r5,10
    a9b4:	e009883a 	mov	r4,fp
    a9b8:	000aefc0 	call	aefc <memchr>
    a9bc:	10003e26 	beq	r2,zero,aab8 <__sfvwrite_r+0x498>
    a9c0:	10800044 	addi	r2,r2,1
    a9c4:	1727c83a 	sub	r19,r2,fp
    a9c8:	02000044 	movi	r8,1
    a9cc:	003f9d06 	br	a844 <__alt_data_end+0xff00a844>
    a9d0:	80800517 	ldw	r2,20(r16)
    a9d4:	81400417 	ldw	r5,16(r16)
    a9d8:	81c00017 	ldw	r7,0(r16)
    a9dc:	10a7883a 	add	r19,r2,r2
    a9e0:	9885883a 	add	r2,r19,r2
    a9e4:	1026d7fa 	srli	r19,r2,31
    a9e8:	396dc83a 	sub	r22,r7,r5
    a9ec:	b1000044 	addi	r4,r22,1
    a9f0:	9885883a 	add	r2,r19,r2
    a9f4:	1027d07a 	srai	r19,r2,1
    a9f8:	2485883a 	add	r2,r4,r18
    a9fc:	980d883a 	mov	r6,r19
    aa00:	9880022e 	bgeu	r19,r2,aa0c <__sfvwrite_r+0x3ec>
    aa04:	1027883a 	mov	r19,r2
    aa08:	100d883a 	mov	r6,r2
    aa0c:	18c1000c 	andi	r3,r3,1024
    aa10:	18001c26 	beq	r3,zero,aa84 <__sfvwrite_r+0x464>
    aa14:	300b883a 	mov	r5,r6
    aa18:	a809883a 	mov	r4,r21
    aa1c:	00054c00 	call	54c0 <_malloc_r>
    aa20:	102f883a 	mov	r23,r2
    aa24:	10002926 	beq	r2,zero,aacc <__sfvwrite_r+0x4ac>
    aa28:	81400417 	ldw	r5,16(r16)
    aa2c:	b00d883a 	mov	r6,r22
    aa30:	1009883a 	mov	r4,r2
    aa34:	000afe00 	call	afe0 <memcpy>
    aa38:	8080030b 	ldhu	r2,12(r16)
    aa3c:	00fedfc4 	movi	r3,-1153
    aa40:	10c4703a 	and	r2,r2,r3
    aa44:	10802014 	ori	r2,r2,128
    aa48:	8080030d 	sth	r2,12(r16)
    aa4c:	bd89883a 	add	r4,r23,r22
    aa50:	9d8fc83a 	sub	r7,r19,r22
    aa54:	85c00415 	stw	r23,16(r16)
    aa58:	84c00515 	stw	r19,20(r16)
    aa5c:	81000015 	stw	r4,0(r16)
    aa60:	9027883a 	mov	r19,r18
    aa64:	81c00215 	stw	r7,8(r16)
    aa68:	902f883a 	mov	r23,r18
    aa6c:	003f3b06 	br	a75c <__alt_data_end+0xff00a75c>
    aa70:	800b883a 	mov	r5,r16
    aa74:	a809883a 	mov	r4,r21
    aa78:	0009dc00 	call	9dc0 <_fflush_r>
    aa7c:	103fb926 	beq	r2,zero,a964 <__alt_data_end+0xff00a964>
    aa80:	003f6506 	br	a818 <__alt_data_end+0xff00a818>
    aa84:	a809883a 	mov	r4,r21
    aa88:	000c3a80 	call	c3a8 <_realloc_r>
    aa8c:	102f883a 	mov	r23,r2
    aa90:	103fee1e 	bne	r2,zero,aa4c <__alt_data_end+0xff00aa4c>
    aa94:	81400417 	ldw	r5,16(r16)
    aa98:	a809883a 	mov	r4,r21
    aa9c:	000a3100 	call	a310 <_free_r>
    aaa0:	8080030b 	ldhu	r2,12(r16)
    aaa4:	00ffdfc4 	movi	r3,-129
    aaa8:	1884703a 	and	r2,r3,r2
    aaac:	00c00304 	movi	r3,12
    aab0:	a8c00015 	stw	r3,0(r21)
    aab4:	003f5906 	br	a81c <__alt_data_end+0xff00a81c>
    aab8:	94c00044 	addi	r19,r18,1
    aabc:	02000044 	movi	r8,1
    aac0:	003f6006 	br	a844 <__alt_data_end+0xff00a844>
    aac4:	00bfffc4 	movi	r2,-1
    aac8:	003f0306 	br	a6d8 <__alt_data_end+0xff00a6d8>
    aacc:	00800304 	movi	r2,12
    aad0:	a8800015 	stw	r2,0(r21)
    aad4:	8080030b 	ldhu	r2,12(r16)
    aad8:	003f5006 	br	a81c <__alt_data_end+0xff00a81c>

0000aadc <_fwalk>:
    aadc:	defff704 	addi	sp,sp,-36
    aae0:	dd000415 	stw	r20,16(sp)
    aae4:	dfc00815 	stw	ra,32(sp)
    aae8:	ddc00715 	stw	r23,28(sp)
    aaec:	dd800615 	stw	r22,24(sp)
    aaf0:	dd400515 	stw	r21,20(sp)
    aaf4:	dcc00315 	stw	r19,12(sp)
    aaf8:	dc800215 	stw	r18,8(sp)
    aafc:	dc400115 	stw	r17,4(sp)
    ab00:	dc000015 	stw	r16,0(sp)
    ab04:	2500b804 	addi	r20,r4,736
    ab08:	a0002326 	beq	r20,zero,ab98 <_fwalk+0xbc>
    ab0c:	282b883a 	mov	r21,r5
    ab10:	002f883a 	mov	r23,zero
    ab14:	05800044 	movi	r22,1
    ab18:	04ffffc4 	movi	r19,-1
    ab1c:	a4400117 	ldw	r17,4(r20)
    ab20:	a4800217 	ldw	r18,8(r20)
    ab24:	8c7fffc4 	addi	r17,r17,-1
    ab28:	88000d16 	blt	r17,zero,ab60 <_fwalk+0x84>
    ab2c:	94000304 	addi	r16,r18,12
    ab30:	94800384 	addi	r18,r18,14
    ab34:	8080000b 	ldhu	r2,0(r16)
    ab38:	8c7fffc4 	addi	r17,r17,-1
    ab3c:	813ffd04 	addi	r4,r16,-12
    ab40:	b080042e 	bgeu	r22,r2,ab54 <_fwalk+0x78>
    ab44:	9080000f 	ldh	r2,0(r18)
    ab48:	14c00226 	beq	r2,r19,ab54 <_fwalk+0x78>
    ab4c:	a83ee83a 	callr	r21
    ab50:	b8aeb03a 	or	r23,r23,r2
    ab54:	84001a04 	addi	r16,r16,104
    ab58:	94801a04 	addi	r18,r18,104
    ab5c:	8cfff51e 	bne	r17,r19,ab34 <__alt_data_end+0xff00ab34>
    ab60:	a5000017 	ldw	r20,0(r20)
    ab64:	a03fed1e 	bne	r20,zero,ab1c <__alt_data_end+0xff00ab1c>
    ab68:	b805883a 	mov	r2,r23
    ab6c:	dfc00817 	ldw	ra,32(sp)
    ab70:	ddc00717 	ldw	r23,28(sp)
    ab74:	dd800617 	ldw	r22,24(sp)
    ab78:	dd400517 	ldw	r21,20(sp)
    ab7c:	dd000417 	ldw	r20,16(sp)
    ab80:	dcc00317 	ldw	r19,12(sp)
    ab84:	dc800217 	ldw	r18,8(sp)
    ab88:	dc400117 	ldw	r17,4(sp)
    ab8c:	dc000017 	ldw	r16,0(sp)
    ab90:	dec00904 	addi	sp,sp,36
    ab94:	f800283a 	ret
    ab98:	002f883a 	mov	r23,zero
    ab9c:	003ff206 	br	ab68 <__alt_data_end+0xff00ab68>

0000aba0 <_fwalk_reent>:
    aba0:	defff704 	addi	sp,sp,-36
    aba4:	dd000415 	stw	r20,16(sp)
    aba8:	dfc00815 	stw	ra,32(sp)
    abac:	ddc00715 	stw	r23,28(sp)
    abb0:	dd800615 	stw	r22,24(sp)
    abb4:	dd400515 	stw	r21,20(sp)
    abb8:	dcc00315 	stw	r19,12(sp)
    abbc:	dc800215 	stw	r18,8(sp)
    abc0:	dc400115 	stw	r17,4(sp)
    abc4:	dc000015 	stw	r16,0(sp)
    abc8:	2500b804 	addi	r20,r4,736
    abcc:	a0002326 	beq	r20,zero,ac5c <_fwalk_reent+0xbc>
    abd0:	282b883a 	mov	r21,r5
    abd4:	2027883a 	mov	r19,r4
    abd8:	002f883a 	mov	r23,zero
    abdc:	05800044 	movi	r22,1
    abe0:	04bfffc4 	movi	r18,-1
    abe4:	a4400117 	ldw	r17,4(r20)
    abe8:	a4000217 	ldw	r16,8(r20)
    abec:	8c7fffc4 	addi	r17,r17,-1
    abf0:	88000c16 	blt	r17,zero,ac24 <_fwalk_reent+0x84>
    abf4:	84000304 	addi	r16,r16,12
    abf8:	8080000b 	ldhu	r2,0(r16)
    abfc:	8c7fffc4 	addi	r17,r17,-1
    ac00:	817ffd04 	addi	r5,r16,-12
    ac04:	b080052e 	bgeu	r22,r2,ac1c <_fwalk_reent+0x7c>
    ac08:	8080008f 	ldh	r2,2(r16)
    ac0c:	9809883a 	mov	r4,r19
    ac10:	14800226 	beq	r2,r18,ac1c <_fwalk_reent+0x7c>
    ac14:	a83ee83a 	callr	r21
    ac18:	b8aeb03a 	or	r23,r23,r2
    ac1c:	84001a04 	addi	r16,r16,104
    ac20:	8cbff51e 	bne	r17,r18,abf8 <__alt_data_end+0xff00abf8>
    ac24:	a5000017 	ldw	r20,0(r20)
    ac28:	a03fee1e 	bne	r20,zero,abe4 <__alt_data_end+0xff00abe4>
    ac2c:	b805883a 	mov	r2,r23
    ac30:	dfc00817 	ldw	ra,32(sp)
    ac34:	ddc00717 	ldw	r23,28(sp)
    ac38:	dd800617 	ldw	r22,24(sp)
    ac3c:	dd400517 	ldw	r21,20(sp)
    ac40:	dd000417 	ldw	r20,16(sp)
    ac44:	dcc00317 	ldw	r19,12(sp)
    ac48:	dc800217 	ldw	r18,8(sp)
    ac4c:	dc400117 	ldw	r17,4(sp)
    ac50:	dc000017 	ldw	r16,0(sp)
    ac54:	dec00904 	addi	sp,sp,36
    ac58:	f800283a 	ret
    ac5c:	002f883a 	mov	r23,zero
    ac60:	003ff206 	br	ac2c <__alt_data_end+0xff00ac2c>

0000ac64 <_setlocale_r>:
    ac64:	30001b26 	beq	r6,zero,acd4 <_setlocale_r+0x70>
    ac68:	01400074 	movhi	r5,1
    ac6c:	defffe04 	addi	sp,sp,-8
    ac70:	29516d04 	addi	r5,r5,17844
    ac74:	3009883a 	mov	r4,r6
    ac78:	dc000015 	stw	r16,0(sp)
    ac7c:	dfc00115 	stw	ra,4(sp)
    ac80:	3021883a 	mov	r16,r6
    ac84:	000cabc0 	call	cabc <strcmp>
    ac88:	1000061e 	bne	r2,zero,aca4 <_setlocale_r+0x40>
    ac8c:	00800074 	movhi	r2,1
    ac90:	10916c04 	addi	r2,r2,17840
    ac94:	dfc00117 	ldw	ra,4(sp)
    ac98:	dc000017 	ldw	r16,0(sp)
    ac9c:	dec00204 	addi	sp,sp,8
    aca0:	f800283a 	ret
    aca4:	01400074 	movhi	r5,1
    aca8:	29516c04 	addi	r5,r5,17840
    acac:	8009883a 	mov	r4,r16
    acb0:	000cabc0 	call	cabc <strcmp>
    acb4:	103ff526 	beq	r2,zero,ac8c <__alt_data_end+0xff00ac8c>
    acb8:	01400074 	movhi	r5,1
    acbc:	29515704 	addi	r5,r5,17756
    acc0:	8009883a 	mov	r4,r16
    acc4:	000cabc0 	call	cabc <strcmp>
    acc8:	103ff026 	beq	r2,zero,ac8c <__alt_data_end+0xff00ac8c>
    accc:	0005883a 	mov	r2,zero
    acd0:	003ff006 	br	ac94 <__alt_data_end+0xff00ac94>
    acd4:	00800074 	movhi	r2,1
    acd8:	10916c04 	addi	r2,r2,17840
    acdc:	f800283a 	ret

0000ace0 <__locale_charset>:
    ace0:	00800074 	movhi	r2,1
    ace4:	10941f04 	addi	r2,r2,20604
    ace8:	f800283a 	ret

0000acec <__locale_mb_cur_max>:
    acec:	00800074 	movhi	r2,1
    acf0:	1098bb04 	addi	r2,r2,25324
    acf4:	10800017 	ldw	r2,0(r2)
    acf8:	f800283a 	ret

0000acfc <__locale_msgcharset>:
    acfc:	00800074 	movhi	r2,1
    ad00:	10941704 	addi	r2,r2,20572
    ad04:	f800283a 	ret

0000ad08 <__locale_cjk_lang>:
    ad08:	0005883a 	mov	r2,zero
    ad0c:	f800283a 	ret

0000ad10 <_localeconv_r>:
    ad10:	00800074 	movhi	r2,1
    ad14:	10942704 	addi	r2,r2,20636
    ad18:	f800283a 	ret

0000ad1c <setlocale>:
    ad1c:	00800074 	movhi	r2,1
    ad20:	1098ba04 	addi	r2,r2,25320
    ad24:	280d883a 	mov	r6,r5
    ad28:	200b883a 	mov	r5,r4
    ad2c:	11000017 	ldw	r4,0(r2)
    ad30:	000ac641 	jmpi	ac64 <_setlocale_r>

0000ad34 <localeconv>:
    ad34:	00800074 	movhi	r2,1
    ad38:	10942704 	addi	r2,r2,20636
    ad3c:	f800283a 	ret

0000ad40 <__smakebuf_r>:
    ad40:	2880030b 	ldhu	r2,12(r5)
    ad44:	10c0008c 	andi	r3,r2,2
    ad48:	1800411e 	bne	r3,zero,ae50 <__smakebuf_r+0x110>
    ad4c:	deffec04 	addi	sp,sp,-80
    ad50:	dc000f15 	stw	r16,60(sp)
    ad54:	2821883a 	mov	r16,r5
    ad58:	2940038f 	ldh	r5,14(r5)
    ad5c:	dc401015 	stw	r17,64(sp)
    ad60:	dfc01315 	stw	ra,76(sp)
    ad64:	dcc01215 	stw	r19,72(sp)
    ad68:	dc801115 	stw	r18,68(sp)
    ad6c:	2023883a 	mov	r17,r4
    ad70:	28001c16 	blt	r5,zero,ade4 <__smakebuf_r+0xa4>
    ad74:	d80d883a 	mov	r6,sp
    ad78:	000e6640 	call	e664 <_fstat_r>
    ad7c:	10001816 	blt	r2,zero,ade0 <__smakebuf_r+0xa0>
    ad80:	d8800117 	ldw	r2,4(sp)
    ad84:	00e00014 	movui	r3,32768
    ad88:	10bc000c 	andi	r2,r2,61440
    ad8c:	14c80020 	cmpeqi	r19,r2,8192
    ad90:	10c03726 	beq	r2,r3,ae70 <__smakebuf_r+0x130>
    ad94:	80c0030b 	ldhu	r3,12(r16)
    ad98:	18c20014 	ori	r3,r3,2048
    ad9c:	80c0030d 	sth	r3,12(r16)
    ada0:	00c80004 	movi	r3,8192
    ada4:	10c0521e 	bne	r2,r3,aef0 <__smakebuf_r+0x1b0>
    ada8:	8140038f 	ldh	r5,14(r16)
    adac:	8809883a 	mov	r4,r17
    adb0:	000e6c00 	call	e6c0 <_isatty_r>
    adb4:	10004c26 	beq	r2,zero,aee8 <__smakebuf_r+0x1a8>
    adb8:	8080030b 	ldhu	r2,12(r16)
    adbc:	80c010c4 	addi	r3,r16,67
    adc0:	80c00015 	stw	r3,0(r16)
    adc4:	10800054 	ori	r2,r2,1
    adc8:	8080030d 	sth	r2,12(r16)
    adcc:	00800044 	movi	r2,1
    add0:	80c00415 	stw	r3,16(r16)
    add4:	80800515 	stw	r2,20(r16)
    add8:	04810004 	movi	r18,1024
    addc:	00000706 	br	adfc <__smakebuf_r+0xbc>
    ade0:	8080030b 	ldhu	r2,12(r16)
    ade4:	10c0200c 	andi	r3,r2,128
    ade8:	18001f1e 	bne	r3,zero,ae68 <__smakebuf_r+0x128>
    adec:	04810004 	movi	r18,1024
    adf0:	10820014 	ori	r2,r2,2048
    adf4:	8080030d 	sth	r2,12(r16)
    adf8:	0027883a 	mov	r19,zero
    adfc:	900b883a 	mov	r5,r18
    ae00:	8809883a 	mov	r4,r17
    ae04:	00054c00 	call	54c0 <_malloc_r>
    ae08:	10002c26 	beq	r2,zero,aebc <__smakebuf_r+0x17c>
    ae0c:	80c0030b 	ldhu	r3,12(r16)
    ae10:	01000074 	movhi	r4,1
    ae14:	21279504 	addi	r4,r4,-25004
    ae18:	89000f15 	stw	r4,60(r17)
    ae1c:	18c02014 	ori	r3,r3,128
    ae20:	80c0030d 	sth	r3,12(r16)
    ae24:	80800015 	stw	r2,0(r16)
    ae28:	80800415 	stw	r2,16(r16)
    ae2c:	84800515 	stw	r18,20(r16)
    ae30:	98001a1e 	bne	r19,zero,ae9c <__smakebuf_r+0x15c>
    ae34:	dfc01317 	ldw	ra,76(sp)
    ae38:	dcc01217 	ldw	r19,72(sp)
    ae3c:	dc801117 	ldw	r18,68(sp)
    ae40:	dc401017 	ldw	r17,64(sp)
    ae44:	dc000f17 	ldw	r16,60(sp)
    ae48:	dec01404 	addi	sp,sp,80
    ae4c:	f800283a 	ret
    ae50:	288010c4 	addi	r2,r5,67
    ae54:	28800015 	stw	r2,0(r5)
    ae58:	28800415 	stw	r2,16(r5)
    ae5c:	00800044 	movi	r2,1
    ae60:	28800515 	stw	r2,20(r5)
    ae64:	f800283a 	ret
    ae68:	04801004 	movi	r18,64
    ae6c:	003fe006 	br	adf0 <__alt_data_end+0xff00adf0>
    ae70:	81000a17 	ldw	r4,40(r16)
    ae74:	00c00074 	movhi	r3,1
    ae78:	18f29604 	addi	r3,r3,-13736
    ae7c:	20ffc51e 	bne	r4,r3,ad94 <__alt_data_end+0xff00ad94>
    ae80:	8080030b 	ldhu	r2,12(r16)
    ae84:	04810004 	movi	r18,1024
    ae88:	84801315 	stw	r18,76(r16)
    ae8c:	1484b03a 	or	r2,r2,r18
    ae90:	8080030d 	sth	r2,12(r16)
    ae94:	0027883a 	mov	r19,zero
    ae98:	003fd806 	br	adfc <__alt_data_end+0xff00adfc>
    ae9c:	8140038f 	ldh	r5,14(r16)
    aea0:	8809883a 	mov	r4,r17
    aea4:	000e6c00 	call	e6c0 <_isatty_r>
    aea8:	103fe226 	beq	r2,zero,ae34 <__alt_data_end+0xff00ae34>
    aeac:	8080030b 	ldhu	r2,12(r16)
    aeb0:	10800054 	ori	r2,r2,1
    aeb4:	8080030d 	sth	r2,12(r16)
    aeb8:	003fde06 	br	ae34 <__alt_data_end+0xff00ae34>
    aebc:	8080030b 	ldhu	r2,12(r16)
    aec0:	10c0800c 	andi	r3,r2,512
    aec4:	183fdb1e 	bne	r3,zero,ae34 <__alt_data_end+0xff00ae34>
    aec8:	10800094 	ori	r2,r2,2
    aecc:	80c010c4 	addi	r3,r16,67
    aed0:	8080030d 	sth	r2,12(r16)
    aed4:	00800044 	movi	r2,1
    aed8:	80c00015 	stw	r3,0(r16)
    aedc:	80c00415 	stw	r3,16(r16)
    aee0:	80800515 	stw	r2,20(r16)
    aee4:	003fd306 	br	ae34 <__alt_data_end+0xff00ae34>
    aee8:	04810004 	movi	r18,1024
    aeec:	003fc306 	br	adfc <__alt_data_end+0xff00adfc>
    aef0:	0027883a 	mov	r19,zero
    aef4:	04810004 	movi	r18,1024
    aef8:	003fc006 	br	adfc <__alt_data_end+0xff00adfc>

0000aefc <memchr>:
    aefc:	208000cc 	andi	r2,r4,3
    af00:	280f883a 	mov	r7,r5
    af04:	10003426 	beq	r2,zero,afd8 <memchr+0xdc>
    af08:	30bfffc4 	addi	r2,r6,-1
    af0c:	30001a26 	beq	r6,zero,af78 <memchr+0x7c>
    af10:	20c00003 	ldbu	r3,0(r4)
    af14:	29803fcc 	andi	r6,r5,255
    af18:	30c0051e 	bne	r6,r3,af30 <memchr+0x34>
    af1c:	00001806 	br	af80 <memchr+0x84>
    af20:	10001526 	beq	r2,zero,af78 <memchr+0x7c>
    af24:	20c00003 	ldbu	r3,0(r4)
    af28:	10bfffc4 	addi	r2,r2,-1
    af2c:	30c01426 	beq	r6,r3,af80 <memchr+0x84>
    af30:	21000044 	addi	r4,r4,1
    af34:	20c000cc 	andi	r3,r4,3
    af38:	183ff91e 	bne	r3,zero,af20 <__alt_data_end+0xff00af20>
    af3c:	020000c4 	movi	r8,3
    af40:	40801136 	bltu	r8,r2,af88 <memchr+0x8c>
    af44:	10000c26 	beq	r2,zero,af78 <memchr+0x7c>
    af48:	20c00003 	ldbu	r3,0(r4)
    af4c:	29403fcc 	andi	r5,r5,255
    af50:	28c00b26 	beq	r5,r3,af80 <memchr+0x84>
    af54:	20c00044 	addi	r3,r4,1
    af58:	39803fcc 	andi	r6,r7,255
    af5c:	2089883a 	add	r4,r4,r2
    af60:	00000306 	br	af70 <memchr+0x74>
    af64:	18c00044 	addi	r3,r3,1
    af68:	197fffc3 	ldbu	r5,-1(r3)
    af6c:	31400526 	beq	r6,r5,af84 <memchr+0x88>
    af70:	1805883a 	mov	r2,r3
    af74:	20fffb1e 	bne	r4,r3,af64 <__alt_data_end+0xff00af64>
    af78:	0005883a 	mov	r2,zero
    af7c:	f800283a 	ret
    af80:	2005883a 	mov	r2,r4
    af84:	f800283a 	ret
    af88:	28c03fcc 	andi	r3,r5,255
    af8c:	1812923a 	slli	r9,r3,8
    af90:	02ffbff4 	movhi	r11,65279
    af94:	02a02074 	movhi	r10,32897
    af98:	48d2b03a 	or	r9,r9,r3
    af9c:	4806943a 	slli	r3,r9,16
    afa0:	5affbfc4 	addi	r11,r11,-257
    afa4:	52a02004 	addi	r10,r10,-32640
    afa8:	48d2b03a 	or	r9,r9,r3
    afac:	20c00017 	ldw	r3,0(r4)
    afb0:	48c6f03a 	xor	r3,r9,r3
    afb4:	1acd883a 	add	r6,r3,r11
    afb8:	00c6303a 	nor	r3,zero,r3
    afbc:	30c6703a 	and	r3,r6,r3
    afc0:	1a86703a 	and	r3,r3,r10
    afc4:	183fe01e 	bne	r3,zero,af48 <__alt_data_end+0xff00af48>
    afc8:	10bfff04 	addi	r2,r2,-4
    afcc:	21000104 	addi	r4,r4,4
    afd0:	40bff636 	bltu	r8,r2,afac <__alt_data_end+0xff00afac>
    afd4:	003fdb06 	br	af44 <__alt_data_end+0xff00af44>
    afd8:	3005883a 	mov	r2,r6
    afdc:	003fd706 	br	af3c <__alt_data_end+0xff00af3c>

0000afe0 <memcpy>:
    afe0:	defffd04 	addi	sp,sp,-12
    afe4:	dfc00215 	stw	ra,8(sp)
    afe8:	dc400115 	stw	r17,4(sp)
    afec:	dc000015 	stw	r16,0(sp)
    aff0:	00c003c4 	movi	r3,15
    aff4:	2005883a 	mov	r2,r4
    aff8:	1980452e 	bgeu	r3,r6,b110 <memcpy+0x130>
    affc:	2906b03a 	or	r3,r5,r4
    b000:	18c000cc 	andi	r3,r3,3
    b004:	1800441e 	bne	r3,zero,b118 <memcpy+0x138>
    b008:	347ffc04 	addi	r17,r6,-16
    b00c:	8822d13a 	srli	r17,r17,4
    b010:	28c00104 	addi	r3,r5,4
    b014:	23400104 	addi	r13,r4,4
    b018:	8820913a 	slli	r16,r17,4
    b01c:	2b000204 	addi	r12,r5,8
    b020:	22c00204 	addi	r11,r4,8
    b024:	84000504 	addi	r16,r16,20
    b028:	2a800304 	addi	r10,r5,12
    b02c:	22400304 	addi	r9,r4,12
    b030:	2c21883a 	add	r16,r5,r16
    b034:	2811883a 	mov	r8,r5
    b038:	200f883a 	mov	r7,r4
    b03c:	41000017 	ldw	r4,0(r8)
    b040:	1fc00017 	ldw	ra,0(r3)
    b044:	63c00017 	ldw	r15,0(r12)
    b048:	39000015 	stw	r4,0(r7)
    b04c:	53800017 	ldw	r14,0(r10)
    b050:	6fc00015 	stw	ra,0(r13)
    b054:	5bc00015 	stw	r15,0(r11)
    b058:	4b800015 	stw	r14,0(r9)
    b05c:	18c00404 	addi	r3,r3,16
    b060:	39c00404 	addi	r7,r7,16
    b064:	42000404 	addi	r8,r8,16
    b068:	6b400404 	addi	r13,r13,16
    b06c:	63000404 	addi	r12,r12,16
    b070:	5ac00404 	addi	r11,r11,16
    b074:	52800404 	addi	r10,r10,16
    b078:	4a400404 	addi	r9,r9,16
    b07c:	1c3fef1e 	bne	r3,r16,b03c <__alt_data_end+0xff00b03c>
    b080:	89c00044 	addi	r7,r17,1
    b084:	380e913a 	slli	r7,r7,4
    b088:	310003cc 	andi	r4,r6,15
    b08c:	02c000c4 	movi	r11,3
    b090:	11c7883a 	add	r3,r2,r7
    b094:	29cb883a 	add	r5,r5,r7
    b098:	5900212e 	bgeu	r11,r4,b120 <memcpy+0x140>
    b09c:	1813883a 	mov	r9,r3
    b0a0:	2811883a 	mov	r8,r5
    b0a4:	200f883a 	mov	r7,r4
    b0a8:	42800017 	ldw	r10,0(r8)
    b0ac:	4a400104 	addi	r9,r9,4
    b0b0:	39ffff04 	addi	r7,r7,-4
    b0b4:	4abfff15 	stw	r10,-4(r9)
    b0b8:	42000104 	addi	r8,r8,4
    b0bc:	59fffa36 	bltu	r11,r7,b0a8 <__alt_data_end+0xff00b0a8>
    b0c0:	213fff04 	addi	r4,r4,-4
    b0c4:	2008d0ba 	srli	r4,r4,2
    b0c8:	318000cc 	andi	r6,r6,3
    b0cc:	21000044 	addi	r4,r4,1
    b0d0:	2109883a 	add	r4,r4,r4
    b0d4:	2109883a 	add	r4,r4,r4
    b0d8:	1907883a 	add	r3,r3,r4
    b0dc:	290b883a 	add	r5,r5,r4
    b0e0:	30000626 	beq	r6,zero,b0fc <memcpy+0x11c>
    b0e4:	198d883a 	add	r6,r3,r6
    b0e8:	29c00003 	ldbu	r7,0(r5)
    b0ec:	18c00044 	addi	r3,r3,1
    b0f0:	29400044 	addi	r5,r5,1
    b0f4:	19ffffc5 	stb	r7,-1(r3)
    b0f8:	19bffb1e 	bne	r3,r6,b0e8 <__alt_data_end+0xff00b0e8>
    b0fc:	dfc00217 	ldw	ra,8(sp)
    b100:	dc400117 	ldw	r17,4(sp)
    b104:	dc000017 	ldw	r16,0(sp)
    b108:	dec00304 	addi	sp,sp,12
    b10c:	f800283a 	ret
    b110:	2007883a 	mov	r3,r4
    b114:	003ff206 	br	b0e0 <__alt_data_end+0xff00b0e0>
    b118:	2007883a 	mov	r3,r4
    b11c:	003ff106 	br	b0e4 <__alt_data_end+0xff00b0e4>
    b120:	200d883a 	mov	r6,r4
    b124:	003fee06 	br	b0e0 <__alt_data_end+0xff00b0e0>

0000b128 <memmove>:
    b128:	2005883a 	mov	r2,r4
    b12c:	29000b2e 	bgeu	r5,r4,b15c <memmove+0x34>
    b130:	298f883a 	add	r7,r5,r6
    b134:	21c0092e 	bgeu	r4,r7,b15c <memmove+0x34>
    b138:	2187883a 	add	r3,r4,r6
    b13c:	198bc83a 	sub	r5,r3,r6
    b140:	30004826 	beq	r6,zero,b264 <memmove+0x13c>
    b144:	39ffffc4 	addi	r7,r7,-1
    b148:	39000003 	ldbu	r4,0(r7)
    b14c:	18ffffc4 	addi	r3,r3,-1
    b150:	19000005 	stb	r4,0(r3)
    b154:	28fffb1e 	bne	r5,r3,b144 <__alt_data_end+0xff00b144>
    b158:	f800283a 	ret
    b15c:	00c003c4 	movi	r3,15
    b160:	1980412e 	bgeu	r3,r6,b268 <memmove+0x140>
    b164:	2886b03a 	or	r3,r5,r2
    b168:	18c000cc 	andi	r3,r3,3
    b16c:	1800401e 	bne	r3,zero,b270 <memmove+0x148>
    b170:	33fffc04 	addi	r15,r6,-16
    b174:	781ed13a 	srli	r15,r15,4
    b178:	28c00104 	addi	r3,r5,4
    b17c:	13400104 	addi	r13,r2,4
    b180:	781c913a 	slli	r14,r15,4
    b184:	2b000204 	addi	r12,r5,8
    b188:	12c00204 	addi	r11,r2,8
    b18c:	73800504 	addi	r14,r14,20
    b190:	2a800304 	addi	r10,r5,12
    b194:	12400304 	addi	r9,r2,12
    b198:	2b9d883a 	add	r14,r5,r14
    b19c:	2811883a 	mov	r8,r5
    b1a0:	100f883a 	mov	r7,r2
    b1a4:	41000017 	ldw	r4,0(r8)
    b1a8:	39c00404 	addi	r7,r7,16
    b1ac:	18c00404 	addi	r3,r3,16
    b1b0:	393ffc15 	stw	r4,-16(r7)
    b1b4:	193ffc17 	ldw	r4,-16(r3)
    b1b8:	6b400404 	addi	r13,r13,16
    b1bc:	5ac00404 	addi	r11,r11,16
    b1c0:	693ffc15 	stw	r4,-16(r13)
    b1c4:	61000017 	ldw	r4,0(r12)
    b1c8:	4a400404 	addi	r9,r9,16
    b1cc:	42000404 	addi	r8,r8,16
    b1d0:	593ffc15 	stw	r4,-16(r11)
    b1d4:	51000017 	ldw	r4,0(r10)
    b1d8:	63000404 	addi	r12,r12,16
    b1dc:	52800404 	addi	r10,r10,16
    b1e0:	493ffc15 	stw	r4,-16(r9)
    b1e4:	1bbfef1e 	bne	r3,r14,b1a4 <__alt_data_end+0xff00b1a4>
    b1e8:	79000044 	addi	r4,r15,1
    b1ec:	2008913a 	slli	r4,r4,4
    b1f0:	328003cc 	andi	r10,r6,15
    b1f4:	02c000c4 	movi	r11,3
    b1f8:	1107883a 	add	r3,r2,r4
    b1fc:	290b883a 	add	r5,r5,r4
    b200:	5a801e2e 	bgeu	r11,r10,b27c <memmove+0x154>
    b204:	1813883a 	mov	r9,r3
    b208:	2811883a 	mov	r8,r5
    b20c:	500f883a 	mov	r7,r10
    b210:	41000017 	ldw	r4,0(r8)
    b214:	4a400104 	addi	r9,r9,4
    b218:	39ffff04 	addi	r7,r7,-4
    b21c:	493fff15 	stw	r4,-4(r9)
    b220:	42000104 	addi	r8,r8,4
    b224:	59fffa36 	bltu	r11,r7,b210 <__alt_data_end+0xff00b210>
    b228:	513fff04 	addi	r4,r10,-4
    b22c:	2008d0ba 	srli	r4,r4,2
    b230:	318000cc 	andi	r6,r6,3
    b234:	21000044 	addi	r4,r4,1
    b238:	2109883a 	add	r4,r4,r4
    b23c:	2109883a 	add	r4,r4,r4
    b240:	1907883a 	add	r3,r3,r4
    b244:	290b883a 	add	r5,r5,r4
    b248:	30000b26 	beq	r6,zero,b278 <memmove+0x150>
    b24c:	198d883a 	add	r6,r3,r6
    b250:	29c00003 	ldbu	r7,0(r5)
    b254:	18c00044 	addi	r3,r3,1
    b258:	29400044 	addi	r5,r5,1
    b25c:	19ffffc5 	stb	r7,-1(r3)
    b260:	19bffb1e 	bne	r3,r6,b250 <__alt_data_end+0xff00b250>
    b264:	f800283a 	ret
    b268:	1007883a 	mov	r3,r2
    b26c:	003ff606 	br	b248 <__alt_data_end+0xff00b248>
    b270:	1007883a 	mov	r3,r2
    b274:	003ff506 	br	b24c <__alt_data_end+0xff00b24c>
    b278:	f800283a 	ret
    b27c:	500d883a 	mov	r6,r10
    b280:	003ff106 	br	b248 <__alt_data_end+0xff00b248>

0000b284 <memset>:
    b284:	20c000cc 	andi	r3,r4,3
    b288:	2005883a 	mov	r2,r4
    b28c:	18004426 	beq	r3,zero,b3a0 <memset+0x11c>
    b290:	31ffffc4 	addi	r7,r6,-1
    b294:	30004026 	beq	r6,zero,b398 <memset+0x114>
    b298:	2813883a 	mov	r9,r5
    b29c:	200d883a 	mov	r6,r4
    b2a0:	2007883a 	mov	r3,r4
    b2a4:	00000406 	br	b2b8 <memset+0x34>
    b2a8:	3a3fffc4 	addi	r8,r7,-1
    b2ac:	31800044 	addi	r6,r6,1
    b2b0:	38003926 	beq	r7,zero,b398 <memset+0x114>
    b2b4:	400f883a 	mov	r7,r8
    b2b8:	18c00044 	addi	r3,r3,1
    b2bc:	32400005 	stb	r9,0(r6)
    b2c0:	1a0000cc 	andi	r8,r3,3
    b2c4:	403ff81e 	bne	r8,zero,b2a8 <__alt_data_end+0xff00b2a8>
    b2c8:	010000c4 	movi	r4,3
    b2cc:	21c02d2e 	bgeu	r4,r7,b384 <memset+0x100>
    b2d0:	29003fcc 	andi	r4,r5,255
    b2d4:	200c923a 	slli	r6,r4,8
    b2d8:	3108b03a 	or	r4,r6,r4
    b2dc:	200c943a 	slli	r6,r4,16
    b2e0:	218cb03a 	or	r6,r4,r6
    b2e4:	010003c4 	movi	r4,15
    b2e8:	21c0182e 	bgeu	r4,r7,b34c <memset+0xc8>
    b2ec:	3b3ffc04 	addi	r12,r7,-16
    b2f0:	6018d13a 	srli	r12,r12,4
    b2f4:	1a000104 	addi	r8,r3,4
    b2f8:	1ac00204 	addi	r11,r3,8
    b2fc:	6008913a 	slli	r4,r12,4
    b300:	1a800304 	addi	r10,r3,12
    b304:	1813883a 	mov	r9,r3
    b308:	21000504 	addi	r4,r4,20
    b30c:	1909883a 	add	r4,r3,r4
    b310:	49800015 	stw	r6,0(r9)
    b314:	41800015 	stw	r6,0(r8)
    b318:	59800015 	stw	r6,0(r11)
    b31c:	51800015 	stw	r6,0(r10)
    b320:	42000404 	addi	r8,r8,16
    b324:	4a400404 	addi	r9,r9,16
    b328:	5ac00404 	addi	r11,r11,16
    b32c:	52800404 	addi	r10,r10,16
    b330:	413ff71e 	bne	r8,r4,b310 <__alt_data_end+0xff00b310>
    b334:	63000044 	addi	r12,r12,1
    b338:	6018913a 	slli	r12,r12,4
    b33c:	39c003cc 	andi	r7,r7,15
    b340:	010000c4 	movi	r4,3
    b344:	1b07883a 	add	r3,r3,r12
    b348:	21c00e2e 	bgeu	r4,r7,b384 <memset+0x100>
    b34c:	1813883a 	mov	r9,r3
    b350:	3811883a 	mov	r8,r7
    b354:	010000c4 	movi	r4,3
    b358:	49800015 	stw	r6,0(r9)
    b35c:	423fff04 	addi	r8,r8,-4
    b360:	4a400104 	addi	r9,r9,4
    b364:	223ffc36 	bltu	r4,r8,b358 <__alt_data_end+0xff00b358>
    b368:	393fff04 	addi	r4,r7,-4
    b36c:	2008d0ba 	srli	r4,r4,2
    b370:	39c000cc 	andi	r7,r7,3
    b374:	21000044 	addi	r4,r4,1
    b378:	2109883a 	add	r4,r4,r4
    b37c:	2109883a 	add	r4,r4,r4
    b380:	1907883a 	add	r3,r3,r4
    b384:	38000526 	beq	r7,zero,b39c <memset+0x118>
    b388:	19cf883a 	add	r7,r3,r7
    b38c:	19400005 	stb	r5,0(r3)
    b390:	18c00044 	addi	r3,r3,1
    b394:	38fffd1e 	bne	r7,r3,b38c <__alt_data_end+0xff00b38c>
    b398:	f800283a 	ret
    b39c:	f800283a 	ret
    b3a0:	2007883a 	mov	r3,r4
    b3a4:	300f883a 	mov	r7,r6
    b3a8:	003fc706 	br	b2c8 <__alt_data_end+0xff00b2c8>

0000b3ac <_Balloc>:
    b3ac:	20801317 	ldw	r2,76(r4)
    b3b0:	defffc04 	addi	sp,sp,-16
    b3b4:	dc400115 	stw	r17,4(sp)
    b3b8:	dc000015 	stw	r16,0(sp)
    b3bc:	dfc00315 	stw	ra,12(sp)
    b3c0:	dc800215 	stw	r18,8(sp)
    b3c4:	2023883a 	mov	r17,r4
    b3c8:	2821883a 	mov	r16,r5
    b3cc:	10000f26 	beq	r2,zero,b40c <_Balloc+0x60>
    b3d0:	8407883a 	add	r3,r16,r16
    b3d4:	18c7883a 	add	r3,r3,r3
    b3d8:	10c7883a 	add	r3,r2,r3
    b3dc:	18800017 	ldw	r2,0(r3)
    b3e0:	10001126 	beq	r2,zero,b428 <_Balloc+0x7c>
    b3e4:	11000017 	ldw	r4,0(r2)
    b3e8:	19000015 	stw	r4,0(r3)
    b3ec:	10000415 	stw	zero,16(r2)
    b3f0:	10000315 	stw	zero,12(r2)
    b3f4:	dfc00317 	ldw	ra,12(sp)
    b3f8:	dc800217 	ldw	r18,8(sp)
    b3fc:	dc400117 	ldw	r17,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00404 	addi	sp,sp,16
    b408:	f800283a 	ret
    b40c:	01800844 	movi	r6,33
    b410:	01400104 	movi	r5,4
    b414:	000e2940 	call	e294 <_calloc_r>
    b418:	88801315 	stw	r2,76(r17)
    b41c:	103fec1e 	bne	r2,zero,b3d0 <__alt_data_end+0xff00b3d0>
    b420:	0005883a 	mov	r2,zero
    b424:	003ff306 	br	b3f4 <__alt_data_end+0xff00b3f4>
    b428:	01400044 	movi	r5,1
    b42c:	2c24983a 	sll	r18,r5,r16
    b430:	8809883a 	mov	r4,r17
    b434:	91800144 	addi	r6,r18,5
    b438:	318d883a 	add	r6,r6,r6
    b43c:	318d883a 	add	r6,r6,r6
    b440:	000e2940 	call	e294 <_calloc_r>
    b444:	103ff626 	beq	r2,zero,b420 <__alt_data_end+0xff00b420>
    b448:	14000115 	stw	r16,4(r2)
    b44c:	14800215 	stw	r18,8(r2)
    b450:	003fe606 	br	b3ec <__alt_data_end+0xff00b3ec>

0000b454 <_Bfree>:
    b454:	28000826 	beq	r5,zero,b478 <_Bfree+0x24>
    b458:	28c00117 	ldw	r3,4(r5)
    b45c:	20801317 	ldw	r2,76(r4)
    b460:	18c7883a 	add	r3,r3,r3
    b464:	18c7883a 	add	r3,r3,r3
    b468:	10c5883a 	add	r2,r2,r3
    b46c:	10c00017 	ldw	r3,0(r2)
    b470:	28c00015 	stw	r3,0(r5)
    b474:	11400015 	stw	r5,0(r2)
    b478:	f800283a 	ret

0000b47c <__multadd>:
    b47c:	defffa04 	addi	sp,sp,-24
    b480:	dc800315 	stw	r18,12(sp)
    b484:	dc400215 	stw	r17,8(sp)
    b488:	dc000115 	stw	r16,4(sp)
    b48c:	2823883a 	mov	r17,r5
    b490:	2c000417 	ldw	r16,16(r5)
    b494:	dfc00515 	stw	ra,20(sp)
    b498:	dcc00415 	stw	r19,16(sp)
    b49c:	2025883a 	mov	r18,r4
    b4a0:	29400504 	addi	r5,r5,20
    b4a4:	0011883a 	mov	r8,zero
    b4a8:	28c00017 	ldw	r3,0(r5)
    b4ac:	29400104 	addi	r5,r5,4
    b4b0:	42000044 	addi	r8,r8,1
    b4b4:	18bfffcc 	andi	r2,r3,65535
    b4b8:	1185383a 	mul	r2,r2,r6
    b4bc:	1806d43a 	srli	r3,r3,16
    b4c0:	11cf883a 	add	r7,r2,r7
    b4c4:	3808d43a 	srli	r4,r7,16
    b4c8:	1987383a 	mul	r3,r3,r6
    b4cc:	38bfffcc 	andi	r2,r7,65535
    b4d0:	1907883a 	add	r3,r3,r4
    b4d4:	1808943a 	slli	r4,r3,16
    b4d8:	180ed43a 	srli	r7,r3,16
    b4dc:	2085883a 	add	r2,r4,r2
    b4e0:	28bfff15 	stw	r2,-4(r5)
    b4e4:	443ff016 	blt	r8,r16,b4a8 <__alt_data_end+0xff00b4a8>
    b4e8:	38000926 	beq	r7,zero,b510 <__multadd+0x94>
    b4ec:	88800217 	ldw	r2,8(r17)
    b4f0:	80800f0e 	bge	r16,r2,b530 <__multadd+0xb4>
    b4f4:	80800144 	addi	r2,r16,5
    b4f8:	1085883a 	add	r2,r2,r2
    b4fc:	1085883a 	add	r2,r2,r2
    b500:	8885883a 	add	r2,r17,r2
    b504:	11c00015 	stw	r7,0(r2)
    b508:	84000044 	addi	r16,r16,1
    b50c:	8c000415 	stw	r16,16(r17)
    b510:	8805883a 	mov	r2,r17
    b514:	dfc00517 	ldw	ra,20(sp)
    b518:	dcc00417 	ldw	r19,16(sp)
    b51c:	dc800317 	ldw	r18,12(sp)
    b520:	dc400217 	ldw	r17,8(sp)
    b524:	dc000117 	ldw	r16,4(sp)
    b528:	dec00604 	addi	sp,sp,24
    b52c:	f800283a 	ret
    b530:	89400117 	ldw	r5,4(r17)
    b534:	9009883a 	mov	r4,r18
    b538:	d9c00015 	stw	r7,0(sp)
    b53c:	29400044 	addi	r5,r5,1
    b540:	000b3ac0 	call	b3ac <_Balloc>
    b544:	89800417 	ldw	r6,16(r17)
    b548:	89400304 	addi	r5,r17,12
    b54c:	11000304 	addi	r4,r2,12
    b550:	31800084 	addi	r6,r6,2
    b554:	318d883a 	add	r6,r6,r6
    b558:	318d883a 	add	r6,r6,r6
    b55c:	1027883a 	mov	r19,r2
    b560:	000afe00 	call	afe0 <memcpy>
    b564:	d9c00017 	ldw	r7,0(sp)
    b568:	88000a26 	beq	r17,zero,b594 <__multadd+0x118>
    b56c:	88c00117 	ldw	r3,4(r17)
    b570:	90801317 	ldw	r2,76(r18)
    b574:	18c7883a 	add	r3,r3,r3
    b578:	18c7883a 	add	r3,r3,r3
    b57c:	10c5883a 	add	r2,r2,r3
    b580:	10c00017 	ldw	r3,0(r2)
    b584:	88c00015 	stw	r3,0(r17)
    b588:	14400015 	stw	r17,0(r2)
    b58c:	9823883a 	mov	r17,r19
    b590:	003fd806 	br	b4f4 <__alt_data_end+0xff00b4f4>
    b594:	9823883a 	mov	r17,r19
    b598:	003fd606 	br	b4f4 <__alt_data_end+0xff00b4f4>

0000b59c <__s2b>:
    b59c:	defff904 	addi	sp,sp,-28
    b5a0:	dc400115 	stw	r17,4(sp)
    b5a4:	dc000015 	stw	r16,0(sp)
    b5a8:	2023883a 	mov	r17,r4
    b5ac:	2821883a 	mov	r16,r5
    b5b0:	39000204 	addi	r4,r7,8
    b5b4:	01400244 	movi	r5,9
    b5b8:	dcc00315 	stw	r19,12(sp)
    b5bc:	dc800215 	stw	r18,8(sp)
    b5c0:	dfc00615 	stw	ra,24(sp)
    b5c4:	dd400515 	stw	r21,20(sp)
    b5c8:	dd000415 	stw	r20,16(sp)
    b5cc:	3825883a 	mov	r18,r7
    b5d0:	3027883a 	mov	r19,r6
    b5d4:	00048f00 	call	48f0 <__divsi3>
    b5d8:	00c00044 	movi	r3,1
    b5dc:	000b883a 	mov	r5,zero
    b5e0:	1880030e 	bge	r3,r2,b5f0 <__s2b+0x54>
    b5e4:	18c7883a 	add	r3,r3,r3
    b5e8:	29400044 	addi	r5,r5,1
    b5ec:	18bffd16 	blt	r3,r2,b5e4 <__alt_data_end+0xff00b5e4>
    b5f0:	8809883a 	mov	r4,r17
    b5f4:	000b3ac0 	call	b3ac <_Balloc>
    b5f8:	d8c00717 	ldw	r3,28(sp)
    b5fc:	10c00515 	stw	r3,20(r2)
    b600:	00c00044 	movi	r3,1
    b604:	10c00415 	stw	r3,16(r2)
    b608:	00c00244 	movi	r3,9
    b60c:	1cc0210e 	bge	r3,r19,b694 <__s2b+0xf8>
    b610:	80eb883a 	add	r21,r16,r3
    b614:	a829883a 	mov	r20,r21
    b618:	84e1883a 	add	r16,r16,r19
    b61c:	a1c00007 	ldb	r7,0(r20)
    b620:	01800284 	movi	r6,10
    b624:	a5000044 	addi	r20,r20,1
    b628:	100b883a 	mov	r5,r2
    b62c:	39fff404 	addi	r7,r7,-48
    b630:	8809883a 	mov	r4,r17
    b634:	000b47c0 	call	b47c <__multadd>
    b638:	a43ff81e 	bne	r20,r16,b61c <__alt_data_end+0xff00b61c>
    b63c:	ace1883a 	add	r16,r21,r19
    b640:	843ffe04 	addi	r16,r16,-8
    b644:	9c800a0e 	bge	r19,r18,b670 <__s2b+0xd4>
    b648:	94e5c83a 	sub	r18,r18,r19
    b64c:	84a5883a 	add	r18,r16,r18
    b650:	81c00007 	ldb	r7,0(r16)
    b654:	01800284 	movi	r6,10
    b658:	84000044 	addi	r16,r16,1
    b65c:	100b883a 	mov	r5,r2
    b660:	39fff404 	addi	r7,r7,-48
    b664:	8809883a 	mov	r4,r17
    b668:	000b47c0 	call	b47c <__multadd>
    b66c:	84bff81e 	bne	r16,r18,b650 <__alt_data_end+0xff00b650>
    b670:	dfc00617 	ldw	ra,24(sp)
    b674:	dd400517 	ldw	r21,20(sp)
    b678:	dd000417 	ldw	r20,16(sp)
    b67c:	dcc00317 	ldw	r19,12(sp)
    b680:	dc800217 	ldw	r18,8(sp)
    b684:	dc400117 	ldw	r17,4(sp)
    b688:	dc000017 	ldw	r16,0(sp)
    b68c:	dec00704 	addi	sp,sp,28
    b690:	f800283a 	ret
    b694:	84000284 	addi	r16,r16,10
    b698:	1827883a 	mov	r19,r3
    b69c:	003fe906 	br	b644 <__alt_data_end+0xff00b644>

0000b6a0 <__hi0bits>:
    b6a0:	20bfffec 	andhi	r2,r4,65535
    b6a4:	1000141e 	bne	r2,zero,b6f8 <__hi0bits+0x58>
    b6a8:	2008943a 	slli	r4,r4,16
    b6ac:	00800404 	movi	r2,16
    b6b0:	20ffc02c 	andhi	r3,r4,65280
    b6b4:	1800021e 	bne	r3,zero,b6c0 <__hi0bits+0x20>
    b6b8:	2008923a 	slli	r4,r4,8
    b6bc:	10800204 	addi	r2,r2,8
    b6c0:	20fc002c 	andhi	r3,r4,61440
    b6c4:	1800021e 	bne	r3,zero,b6d0 <__hi0bits+0x30>
    b6c8:	2008913a 	slli	r4,r4,4
    b6cc:	10800104 	addi	r2,r2,4
    b6d0:	20f0002c 	andhi	r3,r4,49152
    b6d4:	1800031e 	bne	r3,zero,b6e4 <__hi0bits+0x44>
    b6d8:	2109883a 	add	r4,r4,r4
    b6dc:	10800084 	addi	r2,r2,2
    b6e0:	2109883a 	add	r4,r4,r4
    b6e4:	20000316 	blt	r4,zero,b6f4 <__hi0bits+0x54>
    b6e8:	2110002c 	andhi	r4,r4,16384
    b6ec:	2000041e 	bne	r4,zero,b700 <__hi0bits+0x60>
    b6f0:	00800804 	movi	r2,32
    b6f4:	f800283a 	ret
    b6f8:	0005883a 	mov	r2,zero
    b6fc:	003fec06 	br	b6b0 <__alt_data_end+0xff00b6b0>
    b700:	10800044 	addi	r2,r2,1
    b704:	f800283a 	ret

0000b708 <__lo0bits>:
    b708:	20c00017 	ldw	r3,0(r4)
    b70c:	188001cc 	andi	r2,r3,7
    b710:	10000826 	beq	r2,zero,b734 <__lo0bits+0x2c>
    b714:	1880004c 	andi	r2,r3,1
    b718:	1000211e 	bne	r2,zero,b7a0 <__lo0bits+0x98>
    b71c:	1880008c 	andi	r2,r3,2
    b720:	1000211e 	bne	r2,zero,b7a8 <__lo0bits+0xa0>
    b724:	1806d0ba 	srli	r3,r3,2
    b728:	00800084 	movi	r2,2
    b72c:	20c00015 	stw	r3,0(r4)
    b730:	f800283a 	ret
    b734:	18bfffcc 	andi	r2,r3,65535
    b738:	10001326 	beq	r2,zero,b788 <__lo0bits+0x80>
    b73c:	0005883a 	mov	r2,zero
    b740:	19403fcc 	andi	r5,r3,255
    b744:	2800021e 	bne	r5,zero,b750 <__lo0bits+0x48>
    b748:	1806d23a 	srli	r3,r3,8
    b74c:	10800204 	addi	r2,r2,8
    b750:	194003cc 	andi	r5,r3,15
    b754:	2800021e 	bne	r5,zero,b760 <__lo0bits+0x58>
    b758:	1806d13a 	srli	r3,r3,4
    b75c:	10800104 	addi	r2,r2,4
    b760:	194000cc 	andi	r5,r3,3
    b764:	2800021e 	bne	r5,zero,b770 <__lo0bits+0x68>
    b768:	1806d0ba 	srli	r3,r3,2
    b76c:	10800084 	addi	r2,r2,2
    b770:	1940004c 	andi	r5,r3,1
    b774:	2800081e 	bne	r5,zero,b798 <__lo0bits+0x90>
    b778:	1806d07a 	srli	r3,r3,1
    b77c:	1800051e 	bne	r3,zero,b794 <__lo0bits+0x8c>
    b780:	00800804 	movi	r2,32
    b784:	f800283a 	ret
    b788:	1806d43a 	srli	r3,r3,16
    b78c:	00800404 	movi	r2,16
    b790:	003feb06 	br	b740 <__alt_data_end+0xff00b740>
    b794:	10800044 	addi	r2,r2,1
    b798:	20c00015 	stw	r3,0(r4)
    b79c:	f800283a 	ret
    b7a0:	0005883a 	mov	r2,zero
    b7a4:	f800283a 	ret
    b7a8:	1806d07a 	srli	r3,r3,1
    b7ac:	00800044 	movi	r2,1
    b7b0:	20c00015 	stw	r3,0(r4)
    b7b4:	f800283a 	ret

0000b7b8 <__i2b>:
    b7b8:	defffd04 	addi	sp,sp,-12
    b7bc:	dc000015 	stw	r16,0(sp)
    b7c0:	04000044 	movi	r16,1
    b7c4:	dc400115 	stw	r17,4(sp)
    b7c8:	2823883a 	mov	r17,r5
    b7cc:	800b883a 	mov	r5,r16
    b7d0:	dfc00215 	stw	ra,8(sp)
    b7d4:	000b3ac0 	call	b3ac <_Balloc>
    b7d8:	14400515 	stw	r17,20(r2)
    b7dc:	14000415 	stw	r16,16(r2)
    b7e0:	dfc00217 	ldw	ra,8(sp)
    b7e4:	dc400117 	ldw	r17,4(sp)
    b7e8:	dc000017 	ldw	r16,0(sp)
    b7ec:	dec00304 	addi	sp,sp,12
    b7f0:	f800283a 	ret

0000b7f4 <__multiply>:
    b7f4:	defffa04 	addi	sp,sp,-24
    b7f8:	dcc00315 	stw	r19,12(sp)
    b7fc:	dc800215 	stw	r18,8(sp)
    b800:	34c00417 	ldw	r19,16(r6)
    b804:	2c800417 	ldw	r18,16(r5)
    b808:	dd000415 	stw	r20,16(sp)
    b80c:	dc400115 	stw	r17,4(sp)
    b810:	dfc00515 	stw	ra,20(sp)
    b814:	dc000015 	stw	r16,0(sp)
    b818:	2829883a 	mov	r20,r5
    b81c:	3023883a 	mov	r17,r6
    b820:	94c0050e 	bge	r18,r19,b838 <__multiply+0x44>
    b824:	9007883a 	mov	r3,r18
    b828:	3029883a 	mov	r20,r6
    b82c:	9825883a 	mov	r18,r19
    b830:	2823883a 	mov	r17,r5
    b834:	1827883a 	mov	r19,r3
    b838:	a0800217 	ldw	r2,8(r20)
    b83c:	94e1883a 	add	r16,r18,r19
    b840:	a1400117 	ldw	r5,4(r20)
    b844:	1400010e 	bge	r2,r16,b84c <__multiply+0x58>
    b848:	29400044 	addi	r5,r5,1
    b84c:	000b3ac0 	call	b3ac <_Balloc>
    b850:	8415883a 	add	r10,r16,r16
    b854:	12c00504 	addi	r11,r2,20
    b858:	5295883a 	add	r10,r10,r10
    b85c:	5a95883a 	add	r10,r11,r10
    b860:	5807883a 	mov	r3,r11
    b864:	5a80032e 	bgeu	r11,r10,b874 <__multiply+0x80>
    b868:	18000015 	stw	zero,0(r3)
    b86c:	18c00104 	addi	r3,r3,4
    b870:	1abffd36 	bltu	r3,r10,b868 <__alt_data_end+0xff00b868>
    b874:	9ce7883a 	add	r19,r19,r19
    b878:	94a5883a 	add	r18,r18,r18
    b87c:	89800504 	addi	r6,r17,20
    b880:	9ce7883a 	add	r19,r19,r19
    b884:	a3400504 	addi	r13,r20,20
    b888:	94a5883a 	add	r18,r18,r18
    b88c:	34d9883a 	add	r12,r6,r19
    b890:	6c93883a 	add	r9,r13,r18
    b894:	3300422e 	bgeu	r6,r12,b9a0 <__multiply+0x1ac>
    b898:	37c00017 	ldw	ra,0(r6)
    b89c:	fbffffcc 	andi	r15,ra,65535
    b8a0:	78001b26 	beq	r15,zero,b910 <__multiply+0x11c>
    b8a4:	5811883a 	mov	r8,r11
    b8a8:	681d883a 	mov	r14,r13
    b8ac:	000f883a 	mov	r7,zero
    b8b0:	71000017 	ldw	r4,0(r14)
    b8b4:	40c00017 	ldw	r3,0(r8)
    b8b8:	73800104 	addi	r14,r14,4
    b8bc:	217fffcc 	andi	r5,r4,65535
    b8c0:	2bcb383a 	mul	r5,r5,r15
    b8c4:	2008d43a 	srli	r4,r4,16
    b8c8:	1c7fffcc 	andi	r17,r3,65535
    b8cc:	2c4b883a 	add	r5,r5,r17
    b8d0:	29cb883a 	add	r5,r5,r7
    b8d4:	23c9383a 	mul	r4,r4,r15
    b8d8:	1806d43a 	srli	r3,r3,16
    b8dc:	280ed43a 	srli	r7,r5,16
    b8e0:	297fffcc 	andi	r5,r5,65535
    b8e4:	20c7883a 	add	r3,r4,r3
    b8e8:	19c7883a 	add	r3,r3,r7
    b8ec:	1808943a 	slli	r4,r3,16
    b8f0:	4023883a 	mov	r17,r8
    b8f4:	180ed43a 	srli	r7,r3,16
    b8f8:	214ab03a 	or	r5,r4,r5
    b8fc:	41400015 	stw	r5,0(r8)
    b900:	42000104 	addi	r8,r8,4
    b904:	727fea36 	bltu	r14,r9,b8b0 <__alt_data_end+0xff00b8b0>
    b908:	89c00115 	stw	r7,4(r17)
    b90c:	37c00017 	ldw	ra,0(r6)
    b910:	f83ed43a 	srli	ra,ra,16
    b914:	f8001f26 	beq	ra,zero,b994 <__multiply+0x1a0>
    b918:	58c00017 	ldw	r3,0(r11)
    b91c:	681d883a 	mov	r14,r13
    b920:	581f883a 	mov	r15,r11
    b924:	1811883a 	mov	r8,r3
    b928:	5825883a 	mov	r18,r11
    b92c:	000f883a 	mov	r7,zero
    b930:	00000106 	br	b938 <__multiply+0x144>
    b934:	8825883a 	mov	r18,r17
    b938:	7140000b 	ldhu	r5,0(r14)
    b93c:	4010d43a 	srli	r8,r8,16
    b940:	193fffcc 	andi	r4,r3,65535
    b944:	2fcb383a 	mul	r5,r5,ra
    b948:	7bc00104 	addi	r15,r15,4
    b94c:	73800104 	addi	r14,r14,4
    b950:	2a0b883a 	add	r5,r5,r8
    b954:	29cb883a 	add	r5,r5,r7
    b958:	2806943a 	slli	r3,r5,16
    b95c:	94400104 	addi	r17,r18,4
    b960:	280ad43a 	srli	r5,r5,16
    b964:	1908b03a 	or	r4,r3,r4
    b968:	793fff15 	stw	r4,-4(r15)
    b96c:	70ffff17 	ldw	r3,-4(r14)
    b970:	8a000017 	ldw	r8,0(r17)
    b974:	1806d43a 	srli	r3,r3,16
    b978:	413fffcc 	andi	r4,r8,65535
    b97c:	1fc7383a 	mul	r3,r3,ra
    b980:	1907883a 	add	r3,r3,r4
    b984:	1947883a 	add	r3,r3,r5
    b988:	180ed43a 	srli	r7,r3,16
    b98c:	727fe936 	bltu	r14,r9,b934 <__alt_data_end+0xff00b934>
    b990:	90c00115 	stw	r3,4(r18)
    b994:	31800104 	addi	r6,r6,4
    b998:	5ac00104 	addi	r11,r11,4
    b99c:	333fbe36 	bltu	r6,r12,b898 <__alt_data_end+0xff00b898>
    b9a0:	0400090e 	bge	zero,r16,b9c8 <__multiply+0x1d4>
    b9a4:	50ffff17 	ldw	r3,-4(r10)
    b9a8:	52bfff04 	addi	r10,r10,-4
    b9ac:	18000326 	beq	r3,zero,b9bc <__multiply+0x1c8>
    b9b0:	00000506 	br	b9c8 <__multiply+0x1d4>
    b9b4:	50c00017 	ldw	r3,0(r10)
    b9b8:	1800031e 	bne	r3,zero,b9c8 <__multiply+0x1d4>
    b9bc:	843fffc4 	addi	r16,r16,-1
    b9c0:	52bfff04 	addi	r10,r10,-4
    b9c4:	803ffb1e 	bne	r16,zero,b9b4 <__alt_data_end+0xff00b9b4>
    b9c8:	14000415 	stw	r16,16(r2)
    b9cc:	dfc00517 	ldw	ra,20(sp)
    b9d0:	dd000417 	ldw	r20,16(sp)
    b9d4:	dcc00317 	ldw	r19,12(sp)
    b9d8:	dc800217 	ldw	r18,8(sp)
    b9dc:	dc400117 	ldw	r17,4(sp)
    b9e0:	dc000017 	ldw	r16,0(sp)
    b9e4:	dec00604 	addi	sp,sp,24
    b9e8:	f800283a 	ret

0000b9ec <__pow5mult>:
    b9ec:	defffa04 	addi	sp,sp,-24
    b9f0:	dcc00315 	stw	r19,12(sp)
    b9f4:	dc000015 	stw	r16,0(sp)
    b9f8:	dfc00515 	stw	ra,20(sp)
    b9fc:	dd000415 	stw	r20,16(sp)
    ba00:	dc800215 	stw	r18,8(sp)
    ba04:	dc400115 	stw	r17,4(sp)
    ba08:	308000cc 	andi	r2,r6,3
    ba0c:	3021883a 	mov	r16,r6
    ba10:	2027883a 	mov	r19,r4
    ba14:	10002f1e 	bne	r2,zero,bad4 <__pow5mult+0xe8>
    ba18:	2825883a 	mov	r18,r5
    ba1c:	8021d0ba 	srai	r16,r16,2
    ba20:	80001a26 	beq	r16,zero,ba8c <__pow5mult+0xa0>
    ba24:	9c401217 	ldw	r17,72(r19)
    ba28:	8800061e 	bne	r17,zero,ba44 <__pow5mult+0x58>
    ba2c:	00003406 	br	bb00 <__pow5mult+0x114>
    ba30:	8021d07a 	srai	r16,r16,1
    ba34:	80001526 	beq	r16,zero,ba8c <__pow5mult+0xa0>
    ba38:	88800017 	ldw	r2,0(r17)
    ba3c:	10001c26 	beq	r2,zero,bab0 <__pow5mult+0xc4>
    ba40:	1023883a 	mov	r17,r2
    ba44:	8080004c 	andi	r2,r16,1
    ba48:	103ff926 	beq	r2,zero,ba30 <__alt_data_end+0xff00ba30>
    ba4c:	880d883a 	mov	r6,r17
    ba50:	900b883a 	mov	r5,r18
    ba54:	9809883a 	mov	r4,r19
    ba58:	000b7f40 	call	b7f4 <__multiply>
    ba5c:	90001b26 	beq	r18,zero,bacc <__pow5mult+0xe0>
    ba60:	91000117 	ldw	r4,4(r18)
    ba64:	98c01317 	ldw	r3,76(r19)
    ba68:	8021d07a 	srai	r16,r16,1
    ba6c:	2109883a 	add	r4,r4,r4
    ba70:	2109883a 	add	r4,r4,r4
    ba74:	1907883a 	add	r3,r3,r4
    ba78:	19000017 	ldw	r4,0(r3)
    ba7c:	91000015 	stw	r4,0(r18)
    ba80:	1c800015 	stw	r18,0(r3)
    ba84:	1025883a 	mov	r18,r2
    ba88:	803feb1e 	bne	r16,zero,ba38 <__alt_data_end+0xff00ba38>
    ba8c:	9005883a 	mov	r2,r18
    ba90:	dfc00517 	ldw	ra,20(sp)
    ba94:	dd000417 	ldw	r20,16(sp)
    ba98:	dcc00317 	ldw	r19,12(sp)
    ba9c:	dc800217 	ldw	r18,8(sp)
    baa0:	dc400117 	ldw	r17,4(sp)
    baa4:	dc000017 	ldw	r16,0(sp)
    baa8:	dec00604 	addi	sp,sp,24
    baac:	f800283a 	ret
    bab0:	880d883a 	mov	r6,r17
    bab4:	880b883a 	mov	r5,r17
    bab8:	9809883a 	mov	r4,r19
    babc:	000b7f40 	call	b7f4 <__multiply>
    bac0:	88800015 	stw	r2,0(r17)
    bac4:	10000015 	stw	zero,0(r2)
    bac8:	003fdd06 	br	ba40 <__alt_data_end+0xff00ba40>
    bacc:	1025883a 	mov	r18,r2
    bad0:	003fd706 	br	ba30 <__alt_data_end+0xff00ba30>
    bad4:	10bfffc4 	addi	r2,r2,-1
    bad8:	1085883a 	add	r2,r2,r2
    badc:	00c00074 	movhi	r3,1
    bae0:	18d17004 	addi	r3,r3,17856
    bae4:	1085883a 	add	r2,r2,r2
    bae8:	1885883a 	add	r2,r3,r2
    baec:	11800017 	ldw	r6,0(r2)
    baf0:	000f883a 	mov	r7,zero
    baf4:	000b47c0 	call	b47c <__multadd>
    baf8:	1025883a 	mov	r18,r2
    bafc:	003fc706 	br	ba1c <__alt_data_end+0xff00ba1c>
    bb00:	05000044 	movi	r20,1
    bb04:	a00b883a 	mov	r5,r20
    bb08:	9809883a 	mov	r4,r19
    bb0c:	000b3ac0 	call	b3ac <_Balloc>
    bb10:	1023883a 	mov	r17,r2
    bb14:	00809c44 	movi	r2,625
    bb18:	88800515 	stw	r2,20(r17)
    bb1c:	8d000415 	stw	r20,16(r17)
    bb20:	9c401215 	stw	r17,72(r19)
    bb24:	88000015 	stw	zero,0(r17)
    bb28:	003fc606 	br	ba44 <__alt_data_end+0xff00ba44>

0000bb2c <__lshift>:
    bb2c:	defff904 	addi	sp,sp,-28
    bb30:	dd400515 	stw	r21,20(sp)
    bb34:	dcc00315 	stw	r19,12(sp)
    bb38:	302bd17a 	srai	r21,r6,5
    bb3c:	2cc00417 	ldw	r19,16(r5)
    bb40:	28800217 	ldw	r2,8(r5)
    bb44:	dd000415 	stw	r20,16(sp)
    bb48:	ace7883a 	add	r19,r21,r19
    bb4c:	dc800215 	stw	r18,8(sp)
    bb50:	dc400115 	stw	r17,4(sp)
    bb54:	dc000015 	stw	r16,0(sp)
    bb58:	dfc00615 	stw	ra,24(sp)
    bb5c:	9c000044 	addi	r16,r19,1
    bb60:	2823883a 	mov	r17,r5
    bb64:	3029883a 	mov	r20,r6
    bb68:	2025883a 	mov	r18,r4
    bb6c:	29400117 	ldw	r5,4(r5)
    bb70:	1400030e 	bge	r2,r16,bb80 <__lshift+0x54>
    bb74:	1085883a 	add	r2,r2,r2
    bb78:	29400044 	addi	r5,r5,1
    bb7c:	143ffd16 	blt	r2,r16,bb74 <__alt_data_end+0xff00bb74>
    bb80:	9009883a 	mov	r4,r18
    bb84:	000b3ac0 	call	b3ac <_Balloc>
    bb88:	10c00504 	addi	r3,r2,20
    bb8c:	0540070e 	bge	zero,r21,bbac <__lshift+0x80>
    bb90:	ad6b883a 	add	r21,r21,r21
    bb94:	ad6b883a 	add	r21,r21,r21
    bb98:	1809883a 	mov	r4,r3
    bb9c:	1d47883a 	add	r3,r3,r21
    bba0:	20000015 	stw	zero,0(r4)
    bba4:	21000104 	addi	r4,r4,4
    bba8:	193ffd1e 	bne	r3,r4,bba0 <__alt_data_end+0xff00bba0>
    bbac:	8a000417 	ldw	r8,16(r17)
    bbb0:	89000504 	addi	r4,r17,20
    bbb4:	a18007cc 	andi	r6,r20,31
    bbb8:	4211883a 	add	r8,r8,r8
    bbbc:	4211883a 	add	r8,r8,r8
    bbc0:	2211883a 	add	r8,r4,r8
    bbc4:	30002326 	beq	r6,zero,bc54 <__lshift+0x128>
    bbc8:	02400804 	movi	r9,32
    bbcc:	4993c83a 	sub	r9,r9,r6
    bbd0:	000b883a 	mov	r5,zero
    bbd4:	21c00017 	ldw	r7,0(r4)
    bbd8:	1815883a 	mov	r10,r3
    bbdc:	18c00104 	addi	r3,r3,4
    bbe0:	398e983a 	sll	r7,r7,r6
    bbe4:	21000104 	addi	r4,r4,4
    bbe8:	394ab03a 	or	r5,r7,r5
    bbec:	197fff15 	stw	r5,-4(r3)
    bbf0:	217fff17 	ldw	r5,-4(r4)
    bbf4:	2a4ad83a 	srl	r5,r5,r9
    bbf8:	223ff636 	bltu	r4,r8,bbd4 <__alt_data_end+0xff00bbd4>
    bbfc:	51400115 	stw	r5,4(r10)
    bc00:	28001a1e 	bne	r5,zero,bc6c <__lshift+0x140>
    bc04:	843fffc4 	addi	r16,r16,-1
    bc08:	14000415 	stw	r16,16(r2)
    bc0c:	88000826 	beq	r17,zero,bc30 <__lshift+0x104>
    bc10:	89000117 	ldw	r4,4(r17)
    bc14:	90c01317 	ldw	r3,76(r18)
    bc18:	2109883a 	add	r4,r4,r4
    bc1c:	2109883a 	add	r4,r4,r4
    bc20:	1907883a 	add	r3,r3,r4
    bc24:	19000017 	ldw	r4,0(r3)
    bc28:	89000015 	stw	r4,0(r17)
    bc2c:	1c400015 	stw	r17,0(r3)
    bc30:	dfc00617 	ldw	ra,24(sp)
    bc34:	dd400517 	ldw	r21,20(sp)
    bc38:	dd000417 	ldw	r20,16(sp)
    bc3c:	dcc00317 	ldw	r19,12(sp)
    bc40:	dc800217 	ldw	r18,8(sp)
    bc44:	dc400117 	ldw	r17,4(sp)
    bc48:	dc000017 	ldw	r16,0(sp)
    bc4c:	dec00704 	addi	sp,sp,28
    bc50:	f800283a 	ret
    bc54:	21400017 	ldw	r5,0(r4)
    bc58:	18c00104 	addi	r3,r3,4
    bc5c:	21000104 	addi	r4,r4,4
    bc60:	197fff15 	stw	r5,-4(r3)
    bc64:	223ffb36 	bltu	r4,r8,bc54 <__alt_data_end+0xff00bc54>
    bc68:	003fe606 	br	bc04 <__alt_data_end+0xff00bc04>
    bc6c:	9c000084 	addi	r16,r19,2
    bc70:	003fe406 	br	bc04 <__alt_data_end+0xff00bc04>

0000bc74 <__mcmp>:
    bc74:	20800417 	ldw	r2,16(r4)
    bc78:	28c00417 	ldw	r3,16(r5)
    bc7c:	10c5c83a 	sub	r2,r2,r3
    bc80:	1000111e 	bne	r2,zero,bcc8 <__mcmp+0x54>
    bc84:	18c7883a 	add	r3,r3,r3
    bc88:	18c7883a 	add	r3,r3,r3
    bc8c:	21000504 	addi	r4,r4,20
    bc90:	29400504 	addi	r5,r5,20
    bc94:	20c5883a 	add	r2,r4,r3
    bc98:	28cb883a 	add	r5,r5,r3
    bc9c:	00000106 	br	bca4 <__mcmp+0x30>
    bca0:	20800a2e 	bgeu	r4,r2,bccc <__mcmp+0x58>
    bca4:	10bfff04 	addi	r2,r2,-4
    bca8:	297fff04 	addi	r5,r5,-4
    bcac:	11800017 	ldw	r6,0(r2)
    bcb0:	28c00017 	ldw	r3,0(r5)
    bcb4:	30fffa26 	beq	r6,r3,bca0 <__alt_data_end+0xff00bca0>
    bcb8:	30c00236 	bltu	r6,r3,bcc4 <__mcmp+0x50>
    bcbc:	00800044 	movi	r2,1
    bcc0:	f800283a 	ret
    bcc4:	00bfffc4 	movi	r2,-1
    bcc8:	f800283a 	ret
    bccc:	0005883a 	mov	r2,zero
    bcd0:	f800283a 	ret

0000bcd4 <__mdiff>:
    bcd4:	28c00417 	ldw	r3,16(r5)
    bcd8:	30800417 	ldw	r2,16(r6)
    bcdc:	defffa04 	addi	sp,sp,-24
    bce0:	dcc00315 	stw	r19,12(sp)
    bce4:	dc800215 	stw	r18,8(sp)
    bce8:	dfc00515 	stw	ra,20(sp)
    bcec:	dd000415 	stw	r20,16(sp)
    bcf0:	dc400115 	stw	r17,4(sp)
    bcf4:	dc000015 	stw	r16,0(sp)
    bcf8:	1887c83a 	sub	r3,r3,r2
    bcfc:	2825883a 	mov	r18,r5
    bd00:	3027883a 	mov	r19,r6
    bd04:	1800141e 	bne	r3,zero,bd58 <__mdiff+0x84>
    bd08:	1085883a 	add	r2,r2,r2
    bd0c:	1085883a 	add	r2,r2,r2
    bd10:	2a000504 	addi	r8,r5,20
    bd14:	34000504 	addi	r16,r6,20
    bd18:	4087883a 	add	r3,r8,r2
    bd1c:	8085883a 	add	r2,r16,r2
    bd20:	00000106 	br	bd28 <__mdiff+0x54>
    bd24:	40c0592e 	bgeu	r8,r3,be8c <__mdiff+0x1b8>
    bd28:	18ffff04 	addi	r3,r3,-4
    bd2c:	10bfff04 	addi	r2,r2,-4
    bd30:	19c00017 	ldw	r7,0(r3)
    bd34:	11400017 	ldw	r5,0(r2)
    bd38:	397ffa26 	beq	r7,r5,bd24 <__alt_data_end+0xff00bd24>
    bd3c:	3940592e 	bgeu	r7,r5,bea4 <__mdiff+0x1d0>
    bd40:	9005883a 	mov	r2,r18
    bd44:	4023883a 	mov	r17,r8
    bd48:	9825883a 	mov	r18,r19
    bd4c:	05000044 	movi	r20,1
    bd50:	1027883a 	mov	r19,r2
    bd54:	00000406 	br	bd68 <__mdiff+0x94>
    bd58:	18005616 	blt	r3,zero,beb4 <__mdiff+0x1e0>
    bd5c:	34400504 	addi	r17,r6,20
    bd60:	2c000504 	addi	r16,r5,20
    bd64:	0029883a 	mov	r20,zero
    bd68:	91400117 	ldw	r5,4(r18)
    bd6c:	000b3ac0 	call	b3ac <_Balloc>
    bd70:	92400417 	ldw	r9,16(r18)
    bd74:	9b000417 	ldw	r12,16(r19)
    bd78:	12c00504 	addi	r11,r2,20
    bd7c:	4a51883a 	add	r8,r9,r9
    bd80:	6319883a 	add	r12,r12,r12
    bd84:	4211883a 	add	r8,r8,r8
    bd88:	6319883a 	add	r12,r12,r12
    bd8c:	15000315 	stw	r20,12(r2)
    bd90:	8211883a 	add	r8,r16,r8
    bd94:	8b19883a 	add	r12,r17,r12
    bd98:	0007883a 	mov	r3,zero
    bd9c:	81400017 	ldw	r5,0(r16)
    bda0:	89c00017 	ldw	r7,0(r17)
    bda4:	59800104 	addi	r6,r11,4
    bda8:	293fffcc 	andi	r4,r5,65535
    bdac:	20c7883a 	add	r3,r4,r3
    bdb0:	393fffcc 	andi	r4,r7,65535
    bdb4:	1909c83a 	sub	r4,r3,r4
    bdb8:	280ad43a 	srli	r5,r5,16
    bdbc:	380ed43a 	srli	r7,r7,16
    bdc0:	2007d43a 	srai	r3,r4,16
    bdc4:	213fffcc 	andi	r4,r4,65535
    bdc8:	29cbc83a 	sub	r5,r5,r7
    bdcc:	28c7883a 	add	r3,r5,r3
    bdd0:	180a943a 	slli	r5,r3,16
    bdd4:	8c400104 	addi	r17,r17,4
    bdd8:	84000104 	addi	r16,r16,4
    bddc:	2908b03a 	or	r4,r5,r4
    bde0:	59000015 	stw	r4,0(r11)
    bde4:	1807d43a 	srai	r3,r3,16
    bde8:	3015883a 	mov	r10,r6
    bdec:	3017883a 	mov	r11,r6
    bdf0:	8b3fea36 	bltu	r17,r12,bd9c <__alt_data_end+0xff00bd9c>
    bdf4:	8200162e 	bgeu	r16,r8,be50 <__mdiff+0x17c>
    bdf8:	8017883a 	mov	r11,r16
    bdfc:	59400017 	ldw	r5,0(r11)
    be00:	31800104 	addi	r6,r6,4
    be04:	5ac00104 	addi	r11,r11,4
    be08:	293fffcc 	andi	r4,r5,65535
    be0c:	20c7883a 	add	r3,r4,r3
    be10:	280ed43a 	srli	r7,r5,16
    be14:	180bd43a 	srai	r5,r3,16
    be18:	193fffcc 	andi	r4,r3,65535
    be1c:	3947883a 	add	r3,r7,r5
    be20:	180a943a 	slli	r5,r3,16
    be24:	1807d43a 	srai	r3,r3,16
    be28:	2908b03a 	or	r4,r5,r4
    be2c:	313fff15 	stw	r4,-4(r6)
    be30:	5a3ff236 	bltu	r11,r8,bdfc <__alt_data_end+0xff00bdfc>
    be34:	0406303a 	nor	r3,zero,r16
    be38:	1a07883a 	add	r3,r3,r8
    be3c:	1806d0ba 	srli	r3,r3,2
    be40:	18c00044 	addi	r3,r3,1
    be44:	18c7883a 	add	r3,r3,r3
    be48:	18c7883a 	add	r3,r3,r3
    be4c:	50d5883a 	add	r10,r10,r3
    be50:	50ffff04 	addi	r3,r10,-4
    be54:	2000041e 	bne	r4,zero,be68 <__mdiff+0x194>
    be58:	18ffff04 	addi	r3,r3,-4
    be5c:	19000017 	ldw	r4,0(r3)
    be60:	4a7fffc4 	addi	r9,r9,-1
    be64:	203ffc26 	beq	r4,zero,be58 <__alt_data_end+0xff00be58>
    be68:	12400415 	stw	r9,16(r2)
    be6c:	dfc00517 	ldw	ra,20(sp)
    be70:	dd000417 	ldw	r20,16(sp)
    be74:	dcc00317 	ldw	r19,12(sp)
    be78:	dc800217 	ldw	r18,8(sp)
    be7c:	dc400117 	ldw	r17,4(sp)
    be80:	dc000017 	ldw	r16,0(sp)
    be84:	dec00604 	addi	sp,sp,24
    be88:	f800283a 	ret
    be8c:	000b883a 	mov	r5,zero
    be90:	000b3ac0 	call	b3ac <_Balloc>
    be94:	00c00044 	movi	r3,1
    be98:	10c00415 	stw	r3,16(r2)
    be9c:	10000515 	stw	zero,20(r2)
    bea0:	003ff206 	br	be6c <__alt_data_end+0xff00be6c>
    bea4:	8023883a 	mov	r17,r16
    bea8:	0029883a 	mov	r20,zero
    beac:	4021883a 	mov	r16,r8
    beb0:	003fad06 	br	bd68 <__alt_data_end+0xff00bd68>
    beb4:	9005883a 	mov	r2,r18
    beb8:	94400504 	addi	r17,r18,20
    bebc:	9c000504 	addi	r16,r19,20
    bec0:	9825883a 	mov	r18,r19
    bec4:	05000044 	movi	r20,1
    bec8:	1027883a 	mov	r19,r2
    becc:	003fa606 	br	bd68 <__alt_data_end+0xff00bd68>

0000bed0 <__ulp>:
    bed0:	295ffc2c 	andhi	r5,r5,32752
    bed4:	00bf3034 	movhi	r2,64704
    bed8:	2887883a 	add	r3,r5,r2
    bedc:	00c0020e 	bge	zero,r3,bee8 <__ulp+0x18>
    bee0:	0005883a 	mov	r2,zero
    bee4:	f800283a 	ret
    bee8:	00c7c83a 	sub	r3,zero,r3
    beec:	1807d53a 	srai	r3,r3,20
    bef0:	008004c4 	movi	r2,19
    bef4:	10c00b0e 	bge	r2,r3,bf24 <__ulp+0x54>
    bef8:	18bffb04 	addi	r2,r3,-20
    befc:	01000784 	movi	r4,30
    bf00:	0007883a 	mov	r3,zero
    bf04:	20800516 	blt	r4,r2,bf1c <__ulp+0x4c>
    bf08:	010007c4 	movi	r4,31
    bf0c:	2089c83a 	sub	r4,r4,r2
    bf10:	00800044 	movi	r2,1
    bf14:	1104983a 	sll	r2,r2,r4
    bf18:	f800283a 	ret
    bf1c:	00800044 	movi	r2,1
    bf20:	f800283a 	ret
    bf24:	01400234 	movhi	r5,8
    bf28:	28c7d83a 	sra	r3,r5,r3
    bf2c:	0005883a 	mov	r2,zero
    bf30:	f800283a 	ret

0000bf34 <__b2d>:
    bf34:	defffa04 	addi	sp,sp,-24
    bf38:	dc000015 	stw	r16,0(sp)
    bf3c:	24000417 	ldw	r16,16(r4)
    bf40:	dc400115 	stw	r17,4(sp)
    bf44:	24400504 	addi	r17,r4,20
    bf48:	8421883a 	add	r16,r16,r16
    bf4c:	8421883a 	add	r16,r16,r16
    bf50:	8c21883a 	add	r16,r17,r16
    bf54:	dc800215 	stw	r18,8(sp)
    bf58:	84bfff17 	ldw	r18,-4(r16)
    bf5c:	dd000415 	stw	r20,16(sp)
    bf60:	dcc00315 	stw	r19,12(sp)
    bf64:	9009883a 	mov	r4,r18
    bf68:	2829883a 	mov	r20,r5
    bf6c:	dfc00515 	stw	ra,20(sp)
    bf70:	000b6a00 	call	b6a0 <__hi0bits>
    bf74:	00c00804 	movi	r3,32
    bf78:	1889c83a 	sub	r4,r3,r2
    bf7c:	a1000015 	stw	r4,0(r20)
    bf80:	01000284 	movi	r4,10
    bf84:	84ffff04 	addi	r19,r16,-4
    bf88:	20801216 	blt	r4,r2,bfd4 <__b2d+0xa0>
    bf8c:	018002c4 	movi	r6,11
    bf90:	308dc83a 	sub	r6,r6,r2
    bf94:	9186d83a 	srl	r3,r18,r6
    bf98:	18cffc34 	orhi	r3,r3,16368
    bf9c:	8cc0212e 	bgeu	r17,r19,c024 <__b2d+0xf0>
    bfa0:	813ffe17 	ldw	r4,-8(r16)
    bfa4:	218cd83a 	srl	r6,r4,r6
    bfa8:	10800544 	addi	r2,r2,21
    bfac:	9084983a 	sll	r2,r18,r2
    bfb0:	1184b03a 	or	r2,r2,r6
    bfb4:	dfc00517 	ldw	ra,20(sp)
    bfb8:	dd000417 	ldw	r20,16(sp)
    bfbc:	dcc00317 	ldw	r19,12(sp)
    bfc0:	dc800217 	ldw	r18,8(sp)
    bfc4:	dc400117 	ldw	r17,4(sp)
    bfc8:	dc000017 	ldw	r16,0(sp)
    bfcc:	dec00604 	addi	sp,sp,24
    bfd0:	f800283a 	ret
    bfd4:	8cc00f2e 	bgeu	r17,r19,c014 <__b2d+0xe0>
    bfd8:	117ffd44 	addi	r5,r2,-11
    bfdc:	80bffe17 	ldw	r2,-8(r16)
    bfe0:	28000e26 	beq	r5,zero,c01c <__b2d+0xe8>
    bfe4:	1949c83a 	sub	r4,r3,r5
    bfe8:	9164983a 	sll	r18,r18,r5
    bfec:	1106d83a 	srl	r3,r2,r4
    bff0:	81bffe04 	addi	r6,r16,-8
    bff4:	948ffc34 	orhi	r18,r18,16368
    bff8:	90c6b03a 	or	r3,r18,r3
    bffc:	89800e2e 	bgeu	r17,r6,c038 <__b2d+0x104>
    c000:	81bffd17 	ldw	r6,-12(r16)
    c004:	1144983a 	sll	r2,r2,r5
    c008:	310ad83a 	srl	r5,r6,r4
    c00c:	2884b03a 	or	r2,r5,r2
    c010:	003fe806 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c014:	10bffd44 	addi	r2,r2,-11
    c018:	1000041e 	bne	r2,zero,c02c <__b2d+0xf8>
    c01c:	90cffc34 	orhi	r3,r18,16368
    c020:	003fe406 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c024:	000d883a 	mov	r6,zero
    c028:	003fdf06 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c02c:	90a4983a 	sll	r18,r18,r2
    c030:	0005883a 	mov	r2,zero
    c034:	003ff906 	br	c01c <__alt_data_end+0xff00c01c>
    c038:	1144983a 	sll	r2,r2,r5
    c03c:	003fdd06 	br	bfb4 <__alt_data_end+0xff00bfb4>

0000c040 <__d2b>:
    c040:	defff804 	addi	sp,sp,-32
    c044:	dc000215 	stw	r16,8(sp)
    c048:	3021883a 	mov	r16,r6
    c04c:	dc400315 	stw	r17,12(sp)
    c050:	8022907a 	slli	r17,r16,1
    c054:	dd000615 	stw	r20,24(sp)
    c058:	2829883a 	mov	r20,r5
    c05c:	01400044 	movi	r5,1
    c060:	dcc00515 	stw	r19,20(sp)
    c064:	dc800415 	stw	r18,16(sp)
    c068:	dfc00715 	stw	ra,28(sp)
    c06c:	3825883a 	mov	r18,r7
    c070:	8822d57a 	srli	r17,r17,21
    c074:	000b3ac0 	call	b3ac <_Balloc>
    c078:	1027883a 	mov	r19,r2
    c07c:	00800434 	movhi	r2,16
    c080:	10bfffc4 	addi	r2,r2,-1
    c084:	808c703a 	and	r6,r16,r2
    c088:	88000126 	beq	r17,zero,c090 <__d2b+0x50>
    c08c:	31800434 	orhi	r6,r6,16
    c090:	d9800015 	stw	r6,0(sp)
    c094:	a0002426 	beq	r20,zero,c128 <__d2b+0xe8>
    c098:	d9000104 	addi	r4,sp,4
    c09c:	dd000115 	stw	r20,4(sp)
    c0a0:	000b7080 	call	b708 <__lo0bits>
    c0a4:	d8c00017 	ldw	r3,0(sp)
    c0a8:	10002f1e 	bne	r2,zero,c168 <__d2b+0x128>
    c0ac:	d9000117 	ldw	r4,4(sp)
    c0b0:	99000515 	stw	r4,20(r19)
    c0b4:	1821003a 	cmpeq	r16,r3,zero
    c0b8:	01000084 	movi	r4,2
    c0bc:	2421c83a 	sub	r16,r4,r16
    c0c0:	98c00615 	stw	r3,24(r19)
    c0c4:	9c000415 	stw	r16,16(r19)
    c0c8:	88001f1e 	bne	r17,zero,c148 <__d2b+0x108>
    c0cc:	10bef384 	addi	r2,r2,-1074
    c0d0:	90800015 	stw	r2,0(r18)
    c0d4:	00900034 	movhi	r2,16384
    c0d8:	10bfffc4 	addi	r2,r2,-1
    c0dc:	8085883a 	add	r2,r16,r2
    c0e0:	1085883a 	add	r2,r2,r2
    c0e4:	1085883a 	add	r2,r2,r2
    c0e8:	9885883a 	add	r2,r19,r2
    c0ec:	11000517 	ldw	r4,20(r2)
    c0f0:	8020917a 	slli	r16,r16,5
    c0f4:	000b6a00 	call	b6a0 <__hi0bits>
    c0f8:	d8c00817 	ldw	r3,32(sp)
    c0fc:	8085c83a 	sub	r2,r16,r2
    c100:	18800015 	stw	r2,0(r3)
    c104:	9805883a 	mov	r2,r19
    c108:	dfc00717 	ldw	ra,28(sp)
    c10c:	dd000617 	ldw	r20,24(sp)
    c110:	dcc00517 	ldw	r19,20(sp)
    c114:	dc800417 	ldw	r18,16(sp)
    c118:	dc400317 	ldw	r17,12(sp)
    c11c:	dc000217 	ldw	r16,8(sp)
    c120:	dec00804 	addi	sp,sp,32
    c124:	f800283a 	ret
    c128:	d809883a 	mov	r4,sp
    c12c:	000b7080 	call	b708 <__lo0bits>
    c130:	d8c00017 	ldw	r3,0(sp)
    c134:	04000044 	movi	r16,1
    c138:	9c000415 	stw	r16,16(r19)
    c13c:	98c00515 	stw	r3,20(r19)
    c140:	10800804 	addi	r2,r2,32
    c144:	883fe126 	beq	r17,zero,c0cc <__alt_data_end+0xff00c0cc>
    c148:	00c00d44 	movi	r3,53
    c14c:	8c7ef344 	addi	r17,r17,-1075
    c150:	88a3883a 	add	r17,r17,r2
    c154:	1885c83a 	sub	r2,r3,r2
    c158:	d8c00817 	ldw	r3,32(sp)
    c15c:	94400015 	stw	r17,0(r18)
    c160:	18800015 	stw	r2,0(r3)
    c164:	003fe706 	br	c104 <__alt_data_end+0xff00c104>
    c168:	01000804 	movi	r4,32
    c16c:	2089c83a 	sub	r4,r4,r2
    c170:	1908983a 	sll	r4,r3,r4
    c174:	d9400117 	ldw	r5,4(sp)
    c178:	1886d83a 	srl	r3,r3,r2
    c17c:	2148b03a 	or	r4,r4,r5
    c180:	99000515 	stw	r4,20(r19)
    c184:	d8c00015 	stw	r3,0(sp)
    c188:	003fca06 	br	c0b4 <__alt_data_end+0xff00c0b4>

0000c18c <__ratio>:
    c18c:	defff904 	addi	sp,sp,-28
    c190:	dc400315 	stw	r17,12(sp)
    c194:	2823883a 	mov	r17,r5
    c198:	d9400104 	addi	r5,sp,4
    c19c:	dfc00615 	stw	ra,24(sp)
    c1a0:	dcc00515 	stw	r19,20(sp)
    c1a4:	dc800415 	stw	r18,16(sp)
    c1a8:	2027883a 	mov	r19,r4
    c1ac:	dc000215 	stw	r16,8(sp)
    c1b0:	000bf340 	call	bf34 <__b2d>
    c1b4:	d80b883a 	mov	r5,sp
    c1b8:	8809883a 	mov	r4,r17
    c1bc:	1025883a 	mov	r18,r2
    c1c0:	1821883a 	mov	r16,r3
    c1c4:	000bf340 	call	bf34 <__b2d>
    c1c8:	8a000417 	ldw	r8,16(r17)
    c1cc:	99000417 	ldw	r4,16(r19)
    c1d0:	d9400117 	ldw	r5,4(sp)
    c1d4:	2209c83a 	sub	r4,r4,r8
    c1d8:	2010917a 	slli	r8,r4,5
    c1dc:	d9000017 	ldw	r4,0(sp)
    c1e0:	2909c83a 	sub	r4,r5,r4
    c1e4:	4109883a 	add	r4,r8,r4
    c1e8:	01000e0e 	bge	zero,r4,c224 <__ratio+0x98>
    c1ec:	2008953a 	slli	r4,r4,20
    c1f0:	2421883a 	add	r16,r4,r16
    c1f4:	100d883a 	mov	r6,r2
    c1f8:	180f883a 	mov	r7,r3
    c1fc:	9009883a 	mov	r4,r18
    c200:	800b883a 	mov	r5,r16
    c204:	0004aa40 	call	4aa4 <__divdf3>
    c208:	dfc00617 	ldw	ra,24(sp)
    c20c:	dcc00517 	ldw	r19,20(sp)
    c210:	dc800417 	ldw	r18,16(sp)
    c214:	dc400317 	ldw	r17,12(sp)
    c218:	dc000217 	ldw	r16,8(sp)
    c21c:	dec00704 	addi	sp,sp,28
    c220:	f800283a 	ret
    c224:	2008953a 	slli	r4,r4,20
    c228:	1907c83a 	sub	r3,r3,r4
    c22c:	003ff106 	br	c1f4 <__alt_data_end+0xff00c1f4>

0000c230 <_mprec_log10>:
    c230:	defffe04 	addi	sp,sp,-8
    c234:	dc000015 	stw	r16,0(sp)
    c238:	dfc00115 	stw	ra,4(sp)
    c23c:	008005c4 	movi	r2,23
    c240:	2021883a 	mov	r16,r4
    c244:	11000d0e 	bge	r2,r4,c27c <_mprec_log10+0x4c>
    c248:	0005883a 	mov	r2,zero
    c24c:	00cffc34 	movhi	r3,16368
    c250:	843fffc4 	addi	r16,r16,-1
    c254:	000d883a 	mov	r6,zero
    c258:	01d00934 	movhi	r7,16420
    c25c:	1009883a 	mov	r4,r2
    c260:	180b883a 	mov	r5,r3
    c264:	00100c80 	call	100c8 <__muldf3>
    c268:	803ff91e 	bne	r16,zero,c250 <__alt_data_end+0xff00c250>
    c26c:	dfc00117 	ldw	ra,4(sp)
    c270:	dc000017 	ldw	r16,0(sp)
    c274:	dec00204 	addi	sp,sp,8
    c278:	f800283a 	ret
    c27c:	202090fa 	slli	r16,r4,3
    c280:	00800074 	movhi	r2,1
    c284:	10918704 	addi	r2,r2,17948
    c288:	1421883a 	add	r16,r2,r16
    c28c:	80800017 	ldw	r2,0(r16)
    c290:	80c00117 	ldw	r3,4(r16)
    c294:	dfc00117 	ldw	ra,4(sp)
    c298:	dc000017 	ldw	r16,0(sp)
    c29c:	dec00204 	addi	sp,sp,8
    c2a0:	f800283a 	ret

0000c2a4 <__copybits>:
    c2a4:	297fffc4 	addi	r5,r5,-1
    c2a8:	280fd17a 	srai	r7,r5,5
    c2ac:	30c00417 	ldw	r3,16(r6)
    c2b0:	30800504 	addi	r2,r6,20
    c2b4:	39c00044 	addi	r7,r7,1
    c2b8:	18c7883a 	add	r3,r3,r3
    c2bc:	39cf883a 	add	r7,r7,r7
    c2c0:	18c7883a 	add	r3,r3,r3
    c2c4:	39cf883a 	add	r7,r7,r7
    c2c8:	10c7883a 	add	r3,r2,r3
    c2cc:	21cf883a 	add	r7,r4,r7
    c2d0:	10c00d2e 	bgeu	r2,r3,c308 <__copybits+0x64>
    c2d4:	200b883a 	mov	r5,r4
    c2d8:	12000017 	ldw	r8,0(r2)
    c2dc:	29400104 	addi	r5,r5,4
    c2e0:	10800104 	addi	r2,r2,4
    c2e4:	2a3fff15 	stw	r8,-4(r5)
    c2e8:	10fffb36 	bltu	r2,r3,c2d8 <__alt_data_end+0xff00c2d8>
    c2ec:	1985c83a 	sub	r2,r3,r6
    c2f0:	10bffac4 	addi	r2,r2,-21
    c2f4:	1004d0ba 	srli	r2,r2,2
    c2f8:	10800044 	addi	r2,r2,1
    c2fc:	1085883a 	add	r2,r2,r2
    c300:	1085883a 	add	r2,r2,r2
    c304:	2089883a 	add	r4,r4,r2
    c308:	21c0032e 	bgeu	r4,r7,c318 <__copybits+0x74>
    c30c:	20000015 	stw	zero,0(r4)
    c310:	21000104 	addi	r4,r4,4
    c314:	21fffd36 	bltu	r4,r7,c30c <__alt_data_end+0xff00c30c>
    c318:	f800283a 	ret

0000c31c <__any_on>:
    c31c:	20c00417 	ldw	r3,16(r4)
    c320:	2805d17a 	srai	r2,r5,5
    c324:	21000504 	addi	r4,r4,20
    c328:	18800d0e 	bge	r3,r2,c360 <__any_on+0x44>
    c32c:	18c7883a 	add	r3,r3,r3
    c330:	18c7883a 	add	r3,r3,r3
    c334:	20c7883a 	add	r3,r4,r3
    c338:	20c0192e 	bgeu	r4,r3,c3a0 <__any_on+0x84>
    c33c:	18bfff17 	ldw	r2,-4(r3)
    c340:	18ffff04 	addi	r3,r3,-4
    c344:	1000041e 	bne	r2,zero,c358 <__any_on+0x3c>
    c348:	20c0142e 	bgeu	r4,r3,c39c <__any_on+0x80>
    c34c:	18ffff04 	addi	r3,r3,-4
    c350:	19400017 	ldw	r5,0(r3)
    c354:	283ffc26 	beq	r5,zero,c348 <__alt_data_end+0xff00c348>
    c358:	00800044 	movi	r2,1
    c35c:	f800283a 	ret
    c360:	10c00a0e 	bge	r2,r3,c38c <__any_on+0x70>
    c364:	1085883a 	add	r2,r2,r2
    c368:	1085883a 	add	r2,r2,r2
    c36c:	294007cc 	andi	r5,r5,31
    c370:	2087883a 	add	r3,r4,r2
    c374:	283ff026 	beq	r5,zero,c338 <__alt_data_end+0xff00c338>
    c378:	19800017 	ldw	r6,0(r3)
    c37c:	3144d83a 	srl	r2,r6,r5
    c380:	114a983a 	sll	r5,r2,r5
    c384:	317ff41e 	bne	r6,r5,c358 <__alt_data_end+0xff00c358>
    c388:	003feb06 	br	c338 <__alt_data_end+0xff00c338>
    c38c:	1085883a 	add	r2,r2,r2
    c390:	1085883a 	add	r2,r2,r2
    c394:	2087883a 	add	r3,r4,r2
    c398:	003fe706 	br	c338 <__alt_data_end+0xff00c338>
    c39c:	f800283a 	ret
    c3a0:	0005883a 	mov	r2,zero
    c3a4:	f800283a 	ret

0000c3a8 <_realloc_r>:
    c3a8:	defff604 	addi	sp,sp,-40
    c3ac:	dc800215 	stw	r18,8(sp)
    c3b0:	dfc00915 	stw	ra,36(sp)
    c3b4:	df000815 	stw	fp,32(sp)
    c3b8:	ddc00715 	stw	r23,28(sp)
    c3bc:	dd800615 	stw	r22,24(sp)
    c3c0:	dd400515 	stw	r21,20(sp)
    c3c4:	dd000415 	stw	r20,16(sp)
    c3c8:	dcc00315 	stw	r19,12(sp)
    c3cc:	dc400115 	stw	r17,4(sp)
    c3d0:	dc000015 	stw	r16,0(sp)
    c3d4:	3025883a 	mov	r18,r6
    c3d8:	2800b726 	beq	r5,zero,c6b8 <_realloc_r+0x310>
    c3dc:	282b883a 	mov	r21,r5
    c3e0:	2029883a 	mov	r20,r4
    c3e4:	001182c0 	call	1182c <__malloc_lock>
    c3e8:	a8bfff17 	ldw	r2,-4(r21)
    c3ec:	043fff04 	movi	r16,-4
    c3f0:	90c002c4 	addi	r3,r18,11
    c3f4:	01000584 	movi	r4,22
    c3f8:	acfffe04 	addi	r19,r21,-8
    c3fc:	1420703a 	and	r16,r2,r16
    c400:	20c0332e 	bgeu	r4,r3,c4d0 <_realloc_r+0x128>
    c404:	047ffe04 	movi	r17,-8
    c408:	1c62703a 	and	r17,r3,r17
    c40c:	8807883a 	mov	r3,r17
    c410:	88005816 	blt	r17,zero,c574 <_realloc_r+0x1cc>
    c414:	8c805736 	bltu	r17,r18,c574 <_realloc_r+0x1cc>
    c418:	80c0300e 	bge	r16,r3,c4dc <_realloc_r+0x134>
    c41c:	07000074 	movhi	fp,1
    c420:	e7120c04 	addi	fp,fp,18480
    c424:	e1c00217 	ldw	r7,8(fp)
    c428:	9c09883a 	add	r4,r19,r16
    c42c:	22000117 	ldw	r8,4(r4)
    c430:	21c06326 	beq	r4,r7,c5c0 <_realloc_r+0x218>
    c434:	017fff84 	movi	r5,-2
    c438:	414a703a 	and	r5,r8,r5
    c43c:	214b883a 	add	r5,r4,r5
    c440:	29800117 	ldw	r6,4(r5)
    c444:	3180004c 	andi	r6,r6,1
    c448:	30003f26 	beq	r6,zero,c548 <_realloc_r+0x1a0>
    c44c:	1080004c 	andi	r2,r2,1
    c450:	10008326 	beq	r2,zero,c660 <_realloc_r+0x2b8>
    c454:	900b883a 	mov	r5,r18
    c458:	a009883a 	mov	r4,r20
    c45c:	00054c00 	call	54c0 <_malloc_r>
    c460:	1025883a 	mov	r18,r2
    c464:	10011e26 	beq	r2,zero,c8e0 <_realloc_r+0x538>
    c468:	a93fff17 	ldw	r4,-4(r21)
    c46c:	10fffe04 	addi	r3,r2,-8
    c470:	00bfff84 	movi	r2,-2
    c474:	2084703a 	and	r2,r4,r2
    c478:	9885883a 	add	r2,r19,r2
    c47c:	1880ee26 	beq	r3,r2,c838 <_realloc_r+0x490>
    c480:	81bfff04 	addi	r6,r16,-4
    c484:	00800904 	movi	r2,36
    c488:	1180b836 	bltu	r2,r6,c76c <_realloc_r+0x3c4>
    c48c:	00c004c4 	movi	r3,19
    c490:	19809636 	bltu	r3,r6,c6ec <_realloc_r+0x344>
    c494:	9005883a 	mov	r2,r18
    c498:	a807883a 	mov	r3,r21
    c49c:	19000017 	ldw	r4,0(r3)
    c4a0:	11000015 	stw	r4,0(r2)
    c4a4:	19000117 	ldw	r4,4(r3)
    c4a8:	11000115 	stw	r4,4(r2)
    c4ac:	18c00217 	ldw	r3,8(r3)
    c4b0:	10c00215 	stw	r3,8(r2)
    c4b4:	a80b883a 	mov	r5,r21
    c4b8:	a009883a 	mov	r4,r20
    c4bc:	000a3100 	call	a310 <_free_r>
    c4c0:	a009883a 	mov	r4,r20
    c4c4:	00118500 	call	11850 <__malloc_unlock>
    c4c8:	9005883a 	mov	r2,r18
    c4cc:	00001206 	br	c518 <_realloc_r+0x170>
    c4d0:	00c00404 	movi	r3,16
    c4d4:	1823883a 	mov	r17,r3
    c4d8:	003fce06 	br	c414 <__alt_data_end+0xff00c414>
    c4dc:	a825883a 	mov	r18,r21
    c4e0:	8445c83a 	sub	r2,r16,r17
    c4e4:	00c003c4 	movi	r3,15
    c4e8:	18802636 	bltu	r3,r2,c584 <_realloc_r+0x1dc>
    c4ec:	99800117 	ldw	r6,4(r19)
    c4f0:	9c07883a 	add	r3,r19,r16
    c4f4:	3180004c 	andi	r6,r6,1
    c4f8:	3420b03a 	or	r16,r6,r16
    c4fc:	9c000115 	stw	r16,4(r19)
    c500:	18800117 	ldw	r2,4(r3)
    c504:	10800054 	ori	r2,r2,1
    c508:	18800115 	stw	r2,4(r3)
    c50c:	a009883a 	mov	r4,r20
    c510:	00118500 	call	11850 <__malloc_unlock>
    c514:	9005883a 	mov	r2,r18
    c518:	dfc00917 	ldw	ra,36(sp)
    c51c:	df000817 	ldw	fp,32(sp)
    c520:	ddc00717 	ldw	r23,28(sp)
    c524:	dd800617 	ldw	r22,24(sp)
    c528:	dd400517 	ldw	r21,20(sp)
    c52c:	dd000417 	ldw	r20,16(sp)
    c530:	dcc00317 	ldw	r19,12(sp)
    c534:	dc800217 	ldw	r18,8(sp)
    c538:	dc400117 	ldw	r17,4(sp)
    c53c:	dc000017 	ldw	r16,0(sp)
    c540:	dec00a04 	addi	sp,sp,40
    c544:	f800283a 	ret
    c548:	017fff04 	movi	r5,-4
    c54c:	414a703a 	and	r5,r8,r5
    c550:	814d883a 	add	r6,r16,r5
    c554:	30c01f16 	blt	r6,r3,c5d4 <_realloc_r+0x22c>
    c558:	20800317 	ldw	r2,12(r4)
    c55c:	20c00217 	ldw	r3,8(r4)
    c560:	a825883a 	mov	r18,r21
    c564:	3021883a 	mov	r16,r6
    c568:	18800315 	stw	r2,12(r3)
    c56c:	10c00215 	stw	r3,8(r2)
    c570:	003fdb06 	br	c4e0 <__alt_data_end+0xff00c4e0>
    c574:	00800304 	movi	r2,12
    c578:	a0800015 	stw	r2,0(r20)
    c57c:	0005883a 	mov	r2,zero
    c580:	003fe506 	br	c518 <__alt_data_end+0xff00c518>
    c584:	98c00117 	ldw	r3,4(r19)
    c588:	9c4b883a 	add	r5,r19,r17
    c58c:	11000054 	ori	r4,r2,1
    c590:	18c0004c 	andi	r3,r3,1
    c594:	1c62b03a 	or	r17,r3,r17
    c598:	9c400115 	stw	r17,4(r19)
    c59c:	29000115 	stw	r4,4(r5)
    c5a0:	2885883a 	add	r2,r5,r2
    c5a4:	10c00117 	ldw	r3,4(r2)
    c5a8:	29400204 	addi	r5,r5,8
    c5ac:	a009883a 	mov	r4,r20
    c5b0:	18c00054 	ori	r3,r3,1
    c5b4:	10c00115 	stw	r3,4(r2)
    c5b8:	000a3100 	call	a310 <_free_r>
    c5bc:	003fd306 	br	c50c <__alt_data_end+0xff00c50c>
    c5c0:	017fff04 	movi	r5,-4
    c5c4:	414a703a 	and	r5,r8,r5
    c5c8:	89800404 	addi	r6,r17,16
    c5cc:	8151883a 	add	r8,r16,r5
    c5d0:	4180590e 	bge	r8,r6,c738 <_realloc_r+0x390>
    c5d4:	1080004c 	andi	r2,r2,1
    c5d8:	103f9e1e 	bne	r2,zero,c454 <__alt_data_end+0xff00c454>
    c5dc:	adbffe17 	ldw	r22,-8(r21)
    c5e0:	00bfff04 	movi	r2,-4
    c5e4:	9dadc83a 	sub	r22,r19,r22
    c5e8:	b1800117 	ldw	r6,4(r22)
    c5ec:	3084703a 	and	r2,r6,r2
    c5f0:	20002026 	beq	r4,zero,c674 <_realloc_r+0x2cc>
    c5f4:	80af883a 	add	r23,r16,r2
    c5f8:	b96f883a 	add	r23,r23,r5
    c5fc:	21c05f26 	beq	r4,r7,c77c <_realloc_r+0x3d4>
    c600:	b8c01c16 	blt	r23,r3,c674 <_realloc_r+0x2cc>
    c604:	20800317 	ldw	r2,12(r4)
    c608:	20c00217 	ldw	r3,8(r4)
    c60c:	81bfff04 	addi	r6,r16,-4
    c610:	01000904 	movi	r4,36
    c614:	18800315 	stw	r2,12(r3)
    c618:	10c00215 	stw	r3,8(r2)
    c61c:	b0c00217 	ldw	r3,8(r22)
    c620:	b0800317 	ldw	r2,12(r22)
    c624:	b4800204 	addi	r18,r22,8
    c628:	18800315 	stw	r2,12(r3)
    c62c:	10c00215 	stw	r3,8(r2)
    c630:	21801b36 	bltu	r4,r6,c6a0 <_realloc_r+0x2f8>
    c634:	008004c4 	movi	r2,19
    c638:	1180352e 	bgeu	r2,r6,c710 <_realloc_r+0x368>
    c63c:	a8800017 	ldw	r2,0(r21)
    c640:	b0800215 	stw	r2,8(r22)
    c644:	a8800117 	ldw	r2,4(r21)
    c648:	b0800315 	stw	r2,12(r22)
    c64c:	008006c4 	movi	r2,27
    c650:	11807f36 	bltu	r2,r6,c850 <_realloc_r+0x4a8>
    c654:	b0800404 	addi	r2,r22,16
    c658:	ad400204 	addi	r21,r21,8
    c65c:	00002d06 	br	c714 <_realloc_r+0x36c>
    c660:	adbffe17 	ldw	r22,-8(r21)
    c664:	00bfff04 	movi	r2,-4
    c668:	9dadc83a 	sub	r22,r19,r22
    c66c:	b1000117 	ldw	r4,4(r22)
    c670:	2084703a 	and	r2,r4,r2
    c674:	b03f7726 	beq	r22,zero,c454 <__alt_data_end+0xff00c454>
    c678:	80af883a 	add	r23,r16,r2
    c67c:	b8ff7516 	blt	r23,r3,c454 <__alt_data_end+0xff00c454>
    c680:	b0800317 	ldw	r2,12(r22)
    c684:	b0c00217 	ldw	r3,8(r22)
    c688:	81bfff04 	addi	r6,r16,-4
    c68c:	01000904 	movi	r4,36
    c690:	18800315 	stw	r2,12(r3)
    c694:	10c00215 	stw	r3,8(r2)
    c698:	b4800204 	addi	r18,r22,8
    c69c:	21bfe52e 	bgeu	r4,r6,c634 <__alt_data_end+0xff00c634>
    c6a0:	a80b883a 	mov	r5,r21
    c6a4:	9009883a 	mov	r4,r18
    c6a8:	000b1280 	call	b128 <memmove>
    c6ac:	b821883a 	mov	r16,r23
    c6b0:	b027883a 	mov	r19,r22
    c6b4:	003f8a06 	br	c4e0 <__alt_data_end+0xff00c4e0>
    c6b8:	300b883a 	mov	r5,r6
    c6bc:	dfc00917 	ldw	ra,36(sp)
    c6c0:	df000817 	ldw	fp,32(sp)
    c6c4:	ddc00717 	ldw	r23,28(sp)
    c6c8:	dd800617 	ldw	r22,24(sp)
    c6cc:	dd400517 	ldw	r21,20(sp)
    c6d0:	dd000417 	ldw	r20,16(sp)
    c6d4:	dcc00317 	ldw	r19,12(sp)
    c6d8:	dc800217 	ldw	r18,8(sp)
    c6dc:	dc400117 	ldw	r17,4(sp)
    c6e0:	dc000017 	ldw	r16,0(sp)
    c6e4:	dec00a04 	addi	sp,sp,40
    c6e8:	00054c01 	jmpi	54c0 <_malloc_r>
    c6ec:	a8c00017 	ldw	r3,0(r21)
    c6f0:	90c00015 	stw	r3,0(r18)
    c6f4:	a8c00117 	ldw	r3,4(r21)
    c6f8:	90c00115 	stw	r3,4(r18)
    c6fc:	00c006c4 	movi	r3,27
    c700:	19804536 	bltu	r3,r6,c818 <_realloc_r+0x470>
    c704:	90800204 	addi	r2,r18,8
    c708:	a8c00204 	addi	r3,r21,8
    c70c:	003f6306 	br	c49c <__alt_data_end+0xff00c49c>
    c710:	9005883a 	mov	r2,r18
    c714:	a8c00017 	ldw	r3,0(r21)
    c718:	b821883a 	mov	r16,r23
    c71c:	b027883a 	mov	r19,r22
    c720:	10c00015 	stw	r3,0(r2)
    c724:	a8c00117 	ldw	r3,4(r21)
    c728:	10c00115 	stw	r3,4(r2)
    c72c:	a8c00217 	ldw	r3,8(r21)
    c730:	10c00215 	stw	r3,8(r2)
    c734:	003f6a06 	br	c4e0 <__alt_data_end+0xff00c4e0>
    c738:	9c67883a 	add	r19,r19,r17
    c73c:	4445c83a 	sub	r2,r8,r17
    c740:	e4c00215 	stw	r19,8(fp)
    c744:	10800054 	ori	r2,r2,1
    c748:	98800115 	stw	r2,4(r19)
    c74c:	a8bfff17 	ldw	r2,-4(r21)
    c750:	a009883a 	mov	r4,r20
    c754:	1080004c 	andi	r2,r2,1
    c758:	1462b03a 	or	r17,r2,r17
    c75c:	ac7fff15 	stw	r17,-4(r21)
    c760:	00118500 	call	11850 <__malloc_unlock>
    c764:	a805883a 	mov	r2,r21
    c768:	003f6b06 	br	c518 <__alt_data_end+0xff00c518>
    c76c:	a80b883a 	mov	r5,r21
    c770:	9009883a 	mov	r4,r18
    c774:	000b1280 	call	b128 <memmove>
    c778:	003f4e06 	br	c4b4 <__alt_data_end+0xff00c4b4>
    c77c:	89000404 	addi	r4,r17,16
    c780:	b93fbc16 	blt	r23,r4,c674 <__alt_data_end+0xff00c674>
    c784:	b0800317 	ldw	r2,12(r22)
    c788:	b0c00217 	ldw	r3,8(r22)
    c78c:	81bfff04 	addi	r6,r16,-4
    c790:	01000904 	movi	r4,36
    c794:	18800315 	stw	r2,12(r3)
    c798:	10c00215 	stw	r3,8(r2)
    c79c:	b4800204 	addi	r18,r22,8
    c7a0:	21804336 	bltu	r4,r6,c8b0 <_realloc_r+0x508>
    c7a4:	008004c4 	movi	r2,19
    c7a8:	11803f2e 	bgeu	r2,r6,c8a8 <_realloc_r+0x500>
    c7ac:	a8800017 	ldw	r2,0(r21)
    c7b0:	b0800215 	stw	r2,8(r22)
    c7b4:	a8800117 	ldw	r2,4(r21)
    c7b8:	b0800315 	stw	r2,12(r22)
    c7bc:	008006c4 	movi	r2,27
    c7c0:	11803f36 	bltu	r2,r6,c8c0 <_realloc_r+0x518>
    c7c4:	b0800404 	addi	r2,r22,16
    c7c8:	ad400204 	addi	r21,r21,8
    c7cc:	a8c00017 	ldw	r3,0(r21)
    c7d0:	10c00015 	stw	r3,0(r2)
    c7d4:	a8c00117 	ldw	r3,4(r21)
    c7d8:	10c00115 	stw	r3,4(r2)
    c7dc:	a8c00217 	ldw	r3,8(r21)
    c7e0:	10c00215 	stw	r3,8(r2)
    c7e4:	b447883a 	add	r3,r22,r17
    c7e8:	bc45c83a 	sub	r2,r23,r17
    c7ec:	e0c00215 	stw	r3,8(fp)
    c7f0:	10800054 	ori	r2,r2,1
    c7f4:	18800115 	stw	r2,4(r3)
    c7f8:	b0800117 	ldw	r2,4(r22)
    c7fc:	a009883a 	mov	r4,r20
    c800:	1080004c 	andi	r2,r2,1
    c804:	1462b03a 	or	r17,r2,r17
    c808:	b4400115 	stw	r17,4(r22)
    c80c:	00118500 	call	11850 <__malloc_unlock>
    c810:	9005883a 	mov	r2,r18
    c814:	003f4006 	br	c518 <__alt_data_end+0xff00c518>
    c818:	a8c00217 	ldw	r3,8(r21)
    c81c:	90c00215 	stw	r3,8(r18)
    c820:	a8c00317 	ldw	r3,12(r21)
    c824:	90c00315 	stw	r3,12(r18)
    c828:	30801126 	beq	r6,r2,c870 <_realloc_r+0x4c8>
    c82c:	90800404 	addi	r2,r18,16
    c830:	a8c00404 	addi	r3,r21,16
    c834:	003f1906 	br	c49c <__alt_data_end+0xff00c49c>
    c838:	90ffff17 	ldw	r3,-4(r18)
    c83c:	00bfff04 	movi	r2,-4
    c840:	a825883a 	mov	r18,r21
    c844:	1884703a 	and	r2,r3,r2
    c848:	80a1883a 	add	r16,r16,r2
    c84c:	003f2406 	br	c4e0 <__alt_data_end+0xff00c4e0>
    c850:	a8800217 	ldw	r2,8(r21)
    c854:	b0800415 	stw	r2,16(r22)
    c858:	a8800317 	ldw	r2,12(r21)
    c85c:	b0800515 	stw	r2,20(r22)
    c860:	31000a26 	beq	r6,r4,c88c <_realloc_r+0x4e4>
    c864:	b0800604 	addi	r2,r22,24
    c868:	ad400404 	addi	r21,r21,16
    c86c:	003fa906 	br	c714 <__alt_data_end+0xff00c714>
    c870:	a9000417 	ldw	r4,16(r21)
    c874:	90800604 	addi	r2,r18,24
    c878:	a8c00604 	addi	r3,r21,24
    c87c:	91000415 	stw	r4,16(r18)
    c880:	a9000517 	ldw	r4,20(r21)
    c884:	91000515 	stw	r4,20(r18)
    c888:	003f0406 	br	c49c <__alt_data_end+0xff00c49c>
    c88c:	a8c00417 	ldw	r3,16(r21)
    c890:	ad400604 	addi	r21,r21,24
    c894:	b0800804 	addi	r2,r22,32
    c898:	b0c00615 	stw	r3,24(r22)
    c89c:	a8ffff17 	ldw	r3,-4(r21)
    c8a0:	b0c00715 	stw	r3,28(r22)
    c8a4:	003f9b06 	br	c714 <__alt_data_end+0xff00c714>
    c8a8:	9005883a 	mov	r2,r18
    c8ac:	003fc706 	br	c7cc <__alt_data_end+0xff00c7cc>
    c8b0:	a80b883a 	mov	r5,r21
    c8b4:	9009883a 	mov	r4,r18
    c8b8:	000b1280 	call	b128 <memmove>
    c8bc:	003fc906 	br	c7e4 <__alt_data_end+0xff00c7e4>
    c8c0:	a8800217 	ldw	r2,8(r21)
    c8c4:	b0800415 	stw	r2,16(r22)
    c8c8:	a8800317 	ldw	r2,12(r21)
    c8cc:	b0800515 	stw	r2,20(r22)
    c8d0:	31000726 	beq	r6,r4,c8f0 <_realloc_r+0x548>
    c8d4:	b0800604 	addi	r2,r22,24
    c8d8:	ad400404 	addi	r21,r21,16
    c8dc:	003fbb06 	br	c7cc <__alt_data_end+0xff00c7cc>
    c8e0:	a009883a 	mov	r4,r20
    c8e4:	00118500 	call	11850 <__malloc_unlock>
    c8e8:	0005883a 	mov	r2,zero
    c8ec:	003f0a06 	br	c518 <__alt_data_end+0xff00c518>
    c8f0:	a8c00417 	ldw	r3,16(r21)
    c8f4:	ad400604 	addi	r21,r21,24
    c8f8:	b0800804 	addi	r2,r22,32
    c8fc:	b0c00615 	stw	r3,24(r22)
    c900:	a8ffff17 	ldw	r3,-4(r21)
    c904:	b0c00715 	stw	r3,28(r22)
    c908:	003fb006 	br	c7cc <__alt_data_end+0xff00c7cc>

0000c90c <__fpclassifyd>:
    c90c:	00a00034 	movhi	r2,32768
    c910:	10bfffc4 	addi	r2,r2,-1
    c914:	2884703a 	and	r2,r5,r2
    c918:	10000726 	beq	r2,zero,c938 <__fpclassifyd+0x2c>
    c91c:	00fffc34 	movhi	r3,65520
    c920:	019ff834 	movhi	r6,32736
    c924:	28c7883a 	add	r3,r5,r3
    c928:	31bfffc4 	addi	r6,r6,-1
    c92c:	30c00536 	bltu	r6,r3,c944 <__fpclassifyd+0x38>
    c930:	00800104 	movi	r2,4
    c934:	f800283a 	ret
    c938:	2000021e 	bne	r4,zero,c944 <__fpclassifyd+0x38>
    c93c:	00800084 	movi	r2,2
    c940:	f800283a 	ret
    c944:	00dffc34 	movhi	r3,32752
    c948:	019ff834 	movhi	r6,32736
    c94c:	28cb883a 	add	r5,r5,r3
    c950:	31bfffc4 	addi	r6,r6,-1
    c954:	317ff62e 	bgeu	r6,r5,c930 <__alt_data_end+0xff00c930>
    c958:	01400434 	movhi	r5,16
    c95c:	297fffc4 	addi	r5,r5,-1
    c960:	28800236 	bltu	r5,r2,c96c <__fpclassifyd+0x60>
    c964:	008000c4 	movi	r2,3
    c968:	f800283a 	ret
    c96c:	10c00226 	beq	r2,r3,c978 <__fpclassifyd+0x6c>
    c970:	0005883a 	mov	r2,zero
    c974:	f800283a 	ret
    c978:	2005003a 	cmpeq	r2,r4,zero
    c97c:	f800283a 	ret

0000c980 <__sread>:
    c980:	defffe04 	addi	sp,sp,-8
    c984:	dc000015 	stw	r16,0(sp)
    c988:	2821883a 	mov	r16,r5
    c98c:	2940038f 	ldh	r5,14(r5)
    c990:	dfc00115 	stw	ra,4(sp)
    c994:	000e7740 	call	e774 <_read_r>
    c998:	10000716 	blt	r2,zero,c9b8 <__sread+0x38>
    c99c:	80c01417 	ldw	r3,80(r16)
    c9a0:	1887883a 	add	r3,r3,r2
    c9a4:	80c01415 	stw	r3,80(r16)
    c9a8:	dfc00117 	ldw	ra,4(sp)
    c9ac:	dc000017 	ldw	r16,0(sp)
    c9b0:	dec00204 	addi	sp,sp,8
    c9b4:	f800283a 	ret
    c9b8:	80c0030b 	ldhu	r3,12(r16)
    c9bc:	18fbffcc 	andi	r3,r3,61439
    c9c0:	80c0030d 	sth	r3,12(r16)
    c9c4:	dfc00117 	ldw	ra,4(sp)
    c9c8:	dc000017 	ldw	r16,0(sp)
    c9cc:	dec00204 	addi	sp,sp,8
    c9d0:	f800283a 	ret

0000c9d4 <__seofread>:
    c9d4:	0005883a 	mov	r2,zero
    c9d8:	f800283a 	ret

0000c9dc <__swrite>:
    c9dc:	2880030b 	ldhu	r2,12(r5)
    c9e0:	defffb04 	addi	sp,sp,-20
    c9e4:	dcc00315 	stw	r19,12(sp)
    c9e8:	dc800215 	stw	r18,8(sp)
    c9ec:	dc400115 	stw	r17,4(sp)
    c9f0:	dc000015 	stw	r16,0(sp)
    c9f4:	dfc00415 	stw	ra,16(sp)
    c9f8:	10c0400c 	andi	r3,r2,256
    c9fc:	2821883a 	mov	r16,r5
    ca00:	2023883a 	mov	r17,r4
    ca04:	3025883a 	mov	r18,r6
    ca08:	3827883a 	mov	r19,r7
    ca0c:	18000526 	beq	r3,zero,ca24 <__swrite+0x48>
    ca10:	2940038f 	ldh	r5,14(r5)
    ca14:	01c00084 	movi	r7,2
    ca18:	000d883a 	mov	r6,zero
    ca1c:	000e7140 	call	e714 <_lseek_r>
    ca20:	8080030b 	ldhu	r2,12(r16)
    ca24:	8140038f 	ldh	r5,14(r16)
    ca28:	10bbffcc 	andi	r2,r2,61439
    ca2c:	980f883a 	mov	r7,r19
    ca30:	900d883a 	mov	r6,r18
    ca34:	8809883a 	mov	r4,r17
    ca38:	8080030d 	sth	r2,12(r16)
    ca3c:	dfc00417 	ldw	ra,16(sp)
    ca40:	dcc00317 	ldw	r19,12(sp)
    ca44:	dc800217 	ldw	r18,8(sp)
    ca48:	dc400117 	ldw	r17,4(sp)
    ca4c:	dc000017 	ldw	r16,0(sp)
    ca50:	dec00504 	addi	sp,sp,20
    ca54:	000e1e01 	jmpi	e1e0 <_write_r>

0000ca58 <__sseek>:
    ca58:	defffe04 	addi	sp,sp,-8
    ca5c:	dc000015 	stw	r16,0(sp)
    ca60:	2821883a 	mov	r16,r5
    ca64:	2940038f 	ldh	r5,14(r5)
    ca68:	dfc00115 	stw	ra,4(sp)
    ca6c:	000e7140 	call	e714 <_lseek_r>
    ca70:	00ffffc4 	movi	r3,-1
    ca74:	10c00826 	beq	r2,r3,ca98 <__sseek+0x40>
    ca78:	80c0030b 	ldhu	r3,12(r16)
    ca7c:	80801415 	stw	r2,80(r16)
    ca80:	18c40014 	ori	r3,r3,4096
    ca84:	80c0030d 	sth	r3,12(r16)
    ca88:	dfc00117 	ldw	ra,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00204 	addi	sp,sp,8
    ca94:	f800283a 	ret
    ca98:	80c0030b 	ldhu	r3,12(r16)
    ca9c:	18fbffcc 	andi	r3,r3,61439
    caa0:	80c0030d 	sth	r3,12(r16)
    caa4:	dfc00117 	ldw	ra,4(sp)
    caa8:	dc000017 	ldw	r16,0(sp)
    caac:	dec00204 	addi	sp,sp,8
    cab0:	f800283a 	ret

0000cab4 <__sclose>:
    cab4:	2940038f 	ldh	r5,14(r5)
    cab8:	000e2401 	jmpi	e240 <_close_r>

0000cabc <strcmp>:
    cabc:	2144b03a 	or	r2,r4,r5
    cac0:	108000cc 	andi	r2,r2,3
    cac4:	1000171e 	bne	r2,zero,cb24 <strcmp+0x68>
    cac8:	20800017 	ldw	r2,0(r4)
    cacc:	28c00017 	ldw	r3,0(r5)
    cad0:	10c0141e 	bne	r2,r3,cb24 <strcmp+0x68>
    cad4:	027fbff4 	movhi	r9,65279
    cad8:	4a7fbfc4 	addi	r9,r9,-257
    cadc:	0086303a 	nor	r3,zero,r2
    cae0:	02202074 	movhi	r8,32897
    cae4:	1245883a 	add	r2,r2,r9
    cae8:	42202004 	addi	r8,r8,-32640
    caec:	10c4703a 	and	r2,r2,r3
    caf0:	1204703a 	and	r2,r2,r8
    caf4:	10000226 	beq	r2,zero,cb00 <strcmp+0x44>
    caf8:	00002306 	br	cb88 <strcmp+0xcc>
    cafc:	1000221e 	bne	r2,zero,cb88 <strcmp+0xcc>
    cb00:	21000104 	addi	r4,r4,4
    cb04:	20c00017 	ldw	r3,0(r4)
    cb08:	29400104 	addi	r5,r5,4
    cb0c:	29800017 	ldw	r6,0(r5)
    cb10:	1a4f883a 	add	r7,r3,r9
    cb14:	00c4303a 	nor	r2,zero,r3
    cb18:	3884703a 	and	r2,r7,r2
    cb1c:	1204703a 	and	r2,r2,r8
    cb20:	19bff626 	beq	r3,r6,cafc <__alt_data_end+0xff00cafc>
    cb24:	20800003 	ldbu	r2,0(r4)
    cb28:	10c03fcc 	andi	r3,r2,255
    cb2c:	18c0201c 	xori	r3,r3,128
    cb30:	18ffe004 	addi	r3,r3,-128
    cb34:	18000c26 	beq	r3,zero,cb68 <strcmp+0xac>
    cb38:	29800007 	ldb	r6,0(r5)
    cb3c:	19800326 	beq	r3,r6,cb4c <strcmp+0x90>
    cb40:	00001306 	br	cb90 <strcmp+0xd4>
    cb44:	29800007 	ldb	r6,0(r5)
    cb48:	11800b1e 	bne	r2,r6,cb78 <strcmp+0xbc>
    cb4c:	21000044 	addi	r4,r4,1
    cb50:	20c00003 	ldbu	r3,0(r4)
    cb54:	29400044 	addi	r5,r5,1
    cb58:	18803fcc 	andi	r2,r3,255
    cb5c:	1080201c 	xori	r2,r2,128
    cb60:	10bfe004 	addi	r2,r2,-128
    cb64:	103ff71e 	bne	r2,zero,cb44 <__alt_data_end+0xff00cb44>
    cb68:	0007883a 	mov	r3,zero
    cb6c:	28800003 	ldbu	r2,0(r5)
    cb70:	1885c83a 	sub	r2,r3,r2
    cb74:	f800283a 	ret
    cb78:	28800003 	ldbu	r2,0(r5)
    cb7c:	18c03fcc 	andi	r3,r3,255
    cb80:	1885c83a 	sub	r2,r3,r2
    cb84:	f800283a 	ret
    cb88:	0005883a 	mov	r2,zero
    cb8c:	f800283a 	ret
    cb90:	10c03fcc 	andi	r3,r2,255
    cb94:	003ff506 	br	cb6c <__alt_data_end+0xff00cb6c>

0000cb98 <__sprint_r.part.0>:
    cb98:	28801917 	ldw	r2,100(r5)
    cb9c:	defff604 	addi	sp,sp,-40
    cba0:	dd400515 	stw	r21,20(sp)
    cba4:	dfc00915 	stw	ra,36(sp)
    cba8:	df000815 	stw	fp,32(sp)
    cbac:	ddc00715 	stw	r23,28(sp)
    cbb0:	dd800615 	stw	r22,24(sp)
    cbb4:	dd000415 	stw	r20,16(sp)
    cbb8:	dcc00315 	stw	r19,12(sp)
    cbbc:	dc800215 	stw	r18,8(sp)
    cbc0:	dc400115 	stw	r17,4(sp)
    cbc4:	dc000015 	stw	r16,0(sp)
    cbc8:	1088000c 	andi	r2,r2,8192
    cbcc:	302b883a 	mov	r21,r6
    cbd0:	10002e26 	beq	r2,zero,cc8c <__sprint_r.part.0+0xf4>
    cbd4:	30800217 	ldw	r2,8(r6)
    cbd8:	35800017 	ldw	r22,0(r6)
    cbdc:	10002926 	beq	r2,zero,cc84 <__sprint_r.part.0+0xec>
    cbe0:	2827883a 	mov	r19,r5
    cbe4:	2029883a 	mov	r20,r4
    cbe8:	b5c00104 	addi	r23,r22,4
    cbec:	04bfffc4 	movi	r18,-1
    cbf0:	bc400017 	ldw	r17,0(r23)
    cbf4:	b4000017 	ldw	r16,0(r22)
    cbf8:	0039883a 	mov	fp,zero
    cbfc:	8822d0ba 	srli	r17,r17,2
    cc00:	8800031e 	bne	r17,zero,cc10 <__sprint_r.part.0+0x78>
    cc04:	00001806 	br	cc68 <__sprint_r.part.0+0xd0>
    cc08:	84000104 	addi	r16,r16,4
    cc0c:	8f001526 	beq	r17,fp,cc64 <__sprint_r.part.0+0xcc>
    cc10:	81400017 	ldw	r5,0(r16)
    cc14:	980d883a 	mov	r6,r19
    cc18:	a009883a 	mov	r4,r20
    cc1c:	000e5c00 	call	e5c0 <_fputwc_r>
    cc20:	e7000044 	addi	fp,fp,1
    cc24:	14bff81e 	bne	r2,r18,cc08 <__alt_data_end+0xff00cc08>
    cc28:	9005883a 	mov	r2,r18
    cc2c:	a8000215 	stw	zero,8(r21)
    cc30:	a8000115 	stw	zero,4(r21)
    cc34:	dfc00917 	ldw	ra,36(sp)
    cc38:	df000817 	ldw	fp,32(sp)
    cc3c:	ddc00717 	ldw	r23,28(sp)
    cc40:	dd800617 	ldw	r22,24(sp)
    cc44:	dd400517 	ldw	r21,20(sp)
    cc48:	dd000417 	ldw	r20,16(sp)
    cc4c:	dcc00317 	ldw	r19,12(sp)
    cc50:	dc800217 	ldw	r18,8(sp)
    cc54:	dc400117 	ldw	r17,4(sp)
    cc58:	dc000017 	ldw	r16,0(sp)
    cc5c:	dec00a04 	addi	sp,sp,40
    cc60:	f800283a 	ret
    cc64:	a8800217 	ldw	r2,8(r21)
    cc68:	8c63883a 	add	r17,r17,r17
    cc6c:	8c63883a 	add	r17,r17,r17
    cc70:	1445c83a 	sub	r2,r2,r17
    cc74:	a8800215 	stw	r2,8(r21)
    cc78:	b5800204 	addi	r22,r22,8
    cc7c:	bdc00204 	addi	r23,r23,8
    cc80:	103fdb1e 	bne	r2,zero,cbf0 <__alt_data_end+0xff00cbf0>
    cc84:	0005883a 	mov	r2,zero
    cc88:	003fe806 	br	cc2c <__alt_data_end+0xff00cc2c>
    cc8c:	000a6200 	call	a620 <__sfvwrite_r>
    cc90:	003fe606 	br	cc2c <__alt_data_end+0xff00cc2c>

0000cc94 <__sprint_r>:
    cc94:	30c00217 	ldw	r3,8(r6)
    cc98:	18000126 	beq	r3,zero,cca0 <__sprint_r+0xc>
    cc9c:	000cb981 	jmpi	cb98 <__sprint_r.part.0>
    cca0:	30000115 	stw	zero,4(r6)
    cca4:	0005883a 	mov	r2,zero
    cca8:	f800283a 	ret

0000ccac <___vfiprintf_internal_r>:
    ccac:	deffc904 	addi	sp,sp,-220
    ccb0:	df003515 	stw	fp,212(sp)
    ccb4:	dd003115 	stw	r20,196(sp)
    ccb8:	dfc03615 	stw	ra,216(sp)
    ccbc:	ddc03415 	stw	r23,208(sp)
    ccc0:	dd803315 	stw	r22,204(sp)
    ccc4:	dd403215 	stw	r21,200(sp)
    ccc8:	dcc03015 	stw	r19,192(sp)
    cccc:	dc802f15 	stw	r18,188(sp)
    ccd0:	dc402e15 	stw	r17,184(sp)
    ccd4:	dc002d15 	stw	r16,180(sp)
    ccd8:	d9002015 	stw	r4,128(sp)
    ccdc:	d9c02215 	stw	r7,136(sp)
    cce0:	2829883a 	mov	r20,r5
    cce4:	3039883a 	mov	fp,r6
    cce8:	20000226 	beq	r4,zero,ccf4 <___vfiprintf_internal_r+0x48>
    ccec:	20800e17 	ldw	r2,56(r4)
    ccf0:	1000cf26 	beq	r2,zero,d030 <___vfiprintf_internal_r+0x384>
    ccf4:	a080030b 	ldhu	r2,12(r20)
    ccf8:	10c8000c 	andi	r3,r2,8192
    ccfc:	1800061e 	bne	r3,zero,cd18 <___vfiprintf_internal_r+0x6c>
    cd00:	a1001917 	ldw	r4,100(r20)
    cd04:	00f7ffc4 	movi	r3,-8193
    cd08:	10880014 	ori	r2,r2,8192
    cd0c:	20c6703a 	and	r3,r4,r3
    cd10:	a080030d 	sth	r2,12(r20)
    cd14:	a0c01915 	stw	r3,100(r20)
    cd18:	10c0020c 	andi	r3,r2,8
    cd1c:	1800a926 	beq	r3,zero,cfc4 <___vfiprintf_internal_r+0x318>
    cd20:	a0c00417 	ldw	r3,16(r20)
    cd24:	1800a726 	beq	r3,zero,cfc4 <___vfiprintf_internal_r+0x318>
    cd28:	1080068c 	andi	r2,r2,26
    cd2c:	00c00284 	movi	r3,10
    cd30:	10c0ac26 	beq	r2,r3,cfe4 <___vfiprintf_internal_r+0x338>
    cd34:	da801a04 	addi	r10,sp,104
    cd38:	da801e15 	stw	r10,120(sp)
    cd3c:	d8801e17 	ldw	r2,120(sp)
    cd40:	da8019c4 	addi	r10,sp,103
    cd44:	05800074 	movhi	r22,1
    cd48:	05c00074 	movhi	r23,1
    cd4c:	da801f15 	stw	r10,124(sp)
    cd50:	1295c83a 	sub	r10,r2,r10
    cd54:	b591bd04 	addi	r22,r22,18164
    cd58:	bdd1b904 	addi	r23,r23,18148
    cd5c:	dec01a15 	stw	sp,104(sp)
    cd60:	d8001c15 	stw	zero,112(sp)
    cd64:	d8001b15 	stw	zero,108(sp)
    cd68:	d8002615 	stw	zero,152(sp)
    cd6c:	d8002315 	stw	zero,140(sp)
    cd70:	da802715 	stw	r10,156(sp)
    cd74:	d811883a 	mov	r8,sp
    cd78:	dd002115 	stw	r20,132(sp)
    cd7c:	e021883a 	mov	r16,fp
    cd80:	80800007 	ldb	r2,0(r16)
    cd84:	1003ea26 	beq	r2,zero,dd30 <___vfiprintf_internal_r+0x1084>
    cd88:	00c00944 	movi	r3,37
    cd8c:	8025883a 	mov	r18,r16
    cd90:	10c0021e 	bne	r2,r3,cd9c <___vfiprintf_internal_r+0xf0>
    cd94:	00001606 	br	cdf0 <___vfiprintf_internal_r+0x144>
    cd98:	10c00326 	beq	r2,r3,cda8 <___vfiprintf_internal_r+0xfc>
    cd9c:	94800044 	addi	r18,r18,1
    cda0:	90800007 	ldb	r2,0(r18)
    cda4:	103ffc1e 	bne	r2,zero,cd98 <__alt_data_end+0xff00cd98>
    cda8:	9423c83a 	sub	r17,r18,r16
    cdac:	88001026 	beq	r17,zero,cdf0 <___vfiprintf_internal_r+0x144>
    cdb0:	d8c01c17 	ldw	r3,112(sp)
    cdb4:	d8801b17 	ldw	r2,108(sp)
    cdb8:	44000015 	stw	r16,0(r8)
    cdbc:	88c7883a 	add	r3,r17,r3
    cdc0:	10800044 	addi	r2,r2,1
    cdc4:	44400115 	stw	r17,4(r8)
    cdc8:	d8c01c15 	stw	r3,112(sp)
    cdcc:	d8801b15 	stw	r2,108(sp)
    cdd0:	010001c4 	movi	r4,7
    cdd4:	2080760e 	bge	r4,r2,cfb0 <___vfiprintf_internal_r+0x304>
    cdd8:	1803821e 	bne	r3,zero,dbe4 <___vfiprintf_internal_r+0xf38>
    cddc:	da802317 	ldw	r10,140(sp)
    cde0:	d8001b15 	stw	zero,108(sp)
    cde4:	d811883a 	mov	r8,sp
    cde8:	5455883a 	add	r10,r10,r17
    cdec:	da802315 	stw	r10,140(sp)
    cdf0:	90800007 	ldb	r2,0(r18)
    cdf4:	10044626 	beq	r2,zero,df10 <___vfiprintf_internal_r+0x1264>
    cdf8:	90c00047 	ldb	r3,1(r18)
    cdfc:	94000044 	addi	r16,r18,1
    ce00:	d8001d85 	stb	zero,118(sp)
    ce04:	0009883a 	mov	r4,zero
    ce08:	000f883a 	mov	r7,zero
    ce0c:	027fffc4 	movi	r9,-1
    ce10:	0023883a 	mov	r17,zero
    ce14:	0029883a 	mov	r20,zero
    ce18:	01401604 	movi	r5,88
    ce1c:	01800244 	movi	r6,9
    ce20:	03400a84 	movi	r13,42
    ce24:	03001b04 	movi	r12,108
    ce28:	84000044 	addi	r16,r16,1
    ce2c:	18bff804 	addi	r2,r3,-32
    ce30:	28827336 	bltu	r5,r2,d800 <___vfiprintf_internal_r+0xb54>
    ce34:	100490ba 	slli	r2,r2,2
    ce38:	02800074 	movhi	r10,1
    ce3c:	52b39304 	addi	r10,r10,-12724
    ce40:	1285883a 	add	r2,r2,r10
    ce44:	10800017 	ldw	r2,0(r2)
    ce48:	1000683a 	jmp	r2
    ce4c:	0000d534 	movhi	zero,852
    ce50:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce54:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce58:	0000d554 	movui	zero,853
    ce5c:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce60:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce64:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce68:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce6c:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce70:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce74:	0000d73c 	xorhi	zero,zero,860
    ce78:	0000d758 	cmpnei	zero,zero,861
    ce7c:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce80:	0000d040 	call	d04 <init_LCD+0x27c>
    ce84:	0000d768 	cmpgeui	zero,zero,861
    ce88:	0000d800 	call	d80 <init_LCD+0x2f8>
    ce8c:	0000d560 	cmpeqi	zero,zero,853
    ce90:	0000d56c 	andhi	zero,zero,853
    ce94:	0000d56c 	andhi	zero,zero,853
    ce98:	0000d56c 	andhi	zero,zero,853
    ce9c:	0000d56c 	andhi	zero,zero,853
    cea0:	0000d56c 	andhi	zero,zero,853
    cea4:	0000d56c 	andhi	zero,zero,853
    cea8:	0000d56c 	andhi	zero,zero,853
    ceac:	0000d56c 	andhi	zero,zero,853
    ceb0:	0000d56c 	andhi	zero,zero,853
    ceb4:	0000d800 	call	d80 <init_LCD+0x2f8>
    ceb8:	0000d800 	call	d80 <init_LCD+0x2f8>
    cebc:	0000d800 	call	d80 <init_LCD+0x2f8>
    cec0:	0000d800 	call	d80 <init_LCD+0x2f8>
    cec4:	0000d800 	call	d80 <init_LCD+0x2f8>
    cec8:	0000d800 	call	d80 <init_LCD+0x2f8>
    cecc:	0000d800 	call	d80 <init_LCD+0x2f8>
    ced0:	0000d800 	call	d80 <init_LCD+0x2f8>
    ced4:	0000d800 	call	d80 <init_LCD+0x2f8>
    ced8:	0000d800 	call	d80 <init_LCD+0x2f8>
    cedc:	0000d598 	cmpnei	zero,zero,854
    cee0:	0000d800 	call	d80 <init_LCD+0x2f8>
    cee4:	0000d800 	call	d80 <init_LCD+0x2f8>
    cee8:	0000d800 	call	d80 <init_LCD+0x2f8>
    ceec:	0000d800 	call	d80 <init_LCD+0x2f8>
    cef0:	0000d800 	call	d80 <init_LCD+0x2f8>
    cef4:	0000d800 	call	d80 <init_LCD+0x2f8>
    cef8:	0000d800 	call	d80 <init_LCD+0x2f8>
    cefc:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf00:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf04:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf08:	0000d5d0 	cmplti	zero,zero,855
    cf0c:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf10:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf14:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf18:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf1c:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf20:	0000d628 	cmpgeui	zero,zero,856
    cf24:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf28:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf2c:	0000d698 	cmpnei	zero,zero,858
    cf30:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf34:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf38:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf3c:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf40:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf44:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf48:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf4c:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf50:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf54:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf58:	0000d444 	movi	zero,849
    cf5c:	0000d470 	cmpltui	zero,zero,849
    cf60:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf64:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf68:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf6c:	0000d7a8 	cmpgeui	zero,zero,862
    cf70:	0000d470 	cmpltui	zero,zero,849
    cf74:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf78:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf7c:	0000d304 	movi	zero,844
    cf80:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf84:	0000d314 	movui	zero,844
    cf88:	0000d350 	cmplti	zero,zero,845
    cf8c:	0000d04c 	andi	zero,zero,833
    cf90:	0000d2f8 	rdprs	zero,zero,843
    cf94:	0000d800 	call	d80 <init_LCD+0x2f8>
    cf98:	0000d6d4 	movui	zero,859
    cf9c:	0000d800 	call	d80 <init_LCD+0x2f8>
    cfa0:	0000d72c 	andhi	zero,zero,860
    cfa4:	0000d800 	call	d80 <init_LCD+0x2f8>
    cfa8:	0000d800 	call	d80 <init_LCD+0x2f8>
    cfac:	0000d3f0 	cmpltui	zero,zero,847
    cfb0:	42000204 	addi	r8,r8,8
    cfb4:	da802317 	ldw	r10,140(sp)
    cfb8:	5455883a 	add	r10,r10,r17
    cfbc:	da802315 	stw	r10,140(sp)
    cfc0:	003f8b06 	br	cdf0 <__alt_data_end+0xff00cdf0>
    cfc4:	d9002017 	ldw	r4,128(sp)
    cfc8:	a00b883a 	mov	r5,r20
    cfcc:	00081c80 	call	81c8 <__swsetup_r>
    cfd0:	1003b11e 	bne	r2,zero,de98 <___vfiprintf_internal_r+0x11ec>
    cfd4:	a080030b 	ldhu	r2,12(r20)
    cfd8:	00c00284 	movi	r3,10
    cfdc:	1080068c 	andi	r2,r2,26
    cfe0:	10ff541e 	bne	r2,r3,cd34 <__alt_data_end+0xff00cd34>
    cfe4:	a080038f 	ldh	r2,14(r20)
    cfe8:	103f5216 	blt	r2,zero,cd34 <__alt_data_end+0xff00cd34>
    cfec:	d9c02217 	ldw	r7,136(sp)
    cff0:	d9002017 	ldw	r4,128(sp)
    cff4:	e00d883a 	mov	r6,fp
    cff8:	a00b883a 	mov	r5,r20
    cffc:	000e1240 	call	e124 <__sbprintf>
    d000:	dfc03617 	ldw	ra,216(sp)
    d004:	df003517 	ldw	fp,212(sp)
    d008:	ddc03417 	ldw	r23,208(sp)
    d00c:	dd803317 	ldw	r22,204(sp)
    d010:	dd403217 	ldw	r21,200(sp)
    d014:	dd003117 	ldw	r20,196(sp)
    d018:	dcc03017 	ldw	r19,192(sp)
    d01c:	dc802f17 	ldw	r18,188(sp)
    d020:	dc402e17 	ldw	r17,184(sp)
    d024:	dc002d17 	ldw	r16,180(sp)
    d028:	dec03704 	addi	sp,sp,220
    d02c:	f800283a 	ret
    d030:	000a19c0 	call	a19c <__sinit>
    d034:	003f2f06 	br	ccf4 <__alt_data_end+0xff00ccf4>
    d038:	0463c83a 	sub	r17,zero,r17
    d03c:	d8802215 	stw	r2,136(sp)
    d040:	a5000114 	ori	r20,r20,4
    d044:	80c00007 	ldb	r3,0(r16)
    d048:	003f7706 	br	ce28 <__alt_data_end+0xff00ce28>
    d04c:	00800c04 	movi	r2,48
    d050:	da802217 	ldw	r10,136(sp)
    d054:	d8801d05 	stb	r2,116(sp)
    d058:	00801e04 	movi	r2,120
    d05c:	d8801d45 	stb	r2,117(sp)
    d060:	d8001d85 	stb	zero,118(sp)
    d064:	50c00104 	addi	r3,r10,4
    d068:	54800017 	ldw	r18,0(r10)
    d06c:	0027883a 	mov	r19,zero
    d070:	a0800094 	ori	r2,r20,2
    d074:	48030b16 	blt	r9,zero,dca4 <___vfiprintf_internal_r+0xff8>
    d078:	00bfdfc4 	movi	r2,-129
    d07c:	a096703a 	and	r11,r20,r2
    d080:	d8c02215 	stw	r3,136(sp)
    d084:	5d000094 	ori	r20,r11,2
    d088:	90032b1e 	bne	r18,zero,dd38 <___vfiprintf_internal_r+0x108c>
    d08c:	00800074 	movhi	r2,1
    d090:	10915804 	addi	r2,r2,17760
    d094:	d8802615 	stw	r2,152(sp)
    d098:	0039883a 	mov	fp,zero
    d09c:	48017b1e 	bne	r9,zero,d68c <___vfiprintf_internal_r+0x9e0>
    d0a0:	0013883a 	mov	r9,zero
    d0a4:	0027883a 	mov	r19,zero
    d0a8:	dd401a04 	addi	r21,sp,104
    d0ac:	4825883a 	mov	r18,r9
    d0b0:	4cc0010e 	bge	r9,r19,d0b8 <___vfiprintf_internal_r+0x40c>
    d0b4:	9825883a 	mov	r18,r19
    d0b8:	e7003fcc 	andi	fp,fp,255
    d0bc:	e700201c 	xori	fp,fp,128
    d0c0:	e73fe004 	addi	fp,fp,-128
    d0c4:	e0000126 	beq	fp,zero,d0cc <___vfiprintf_internal_r+0x420>
    d0c8:	94800044 	addi	r18,r18,1
    d0cc:	a380008c 	andi	r14,r20,2
    d0d0:	70000126 	beq	r14,zero,d0d8 <___vfiprintf_internal_r+0x42c>
    d0d4:	94800084 	addi	r18,r18,2
    d0d8:	a700210c 	andi	fp,r20,132
    d0dc:	e001df1e 	bne	fp,zero,d85c <___vfiprintf_internal_r+0xbb0>
    d0e0:	8c87c83a 	sub	r3,r17,r18
    d0e4:	00c1dd0e 	bge	zero,r3,d85c <___vfiprintf_internal_r+0xbb0>
    d0e8:	01c00404 	movi	r7,16
    d0ec:	d8801c17 	ldw	r2,112(sp)
    d0f0:	38c3ad0e 	bge	r7,r3,dfa8 <___vfiprintf_internal_r+0x12fc>
    d0f4:	02800074 	movhi	r10,1
    d0f8:	5291bd04 	addi	r10,r10,18164
    d0fc:	dc002915 	stw	r16,164(sp)
    d100:	d9801b17 	ldw	r6,108(sp)
    d104:	da802415 	stw	r10,144(sp)
    d108:	03c001c4 	movi	r15,7
    d10c:	da402515 	stw	r9,148(sp)
    d110:	db802815 	stw	r14,160(sp)
    d114:	1821883a 	mov	r16,r3
    d118:	00000506 	br	d130 <___vfiprintf_internal_r+0x484>
    d11c:	31400084 	addi	r5,r6,2
    d120:	42000204 	addi	r8,r8,8
    d124:	200d883a 	mov	r6,r4
    d128:	843ffc04 	addi	r16,r16,-16
    d12c:	3c000d0e 	bge	r7,r16,d164 <___vfiprintf_internal_r+0x4b8>
    d130:	10800404 	addi	r2,r2,16
    d134:	31000044 	addi	r4,r6,1
    d138:	45800015 	stw	r22,0(r8)
    d13c:	41c00115 	stw	r7,4(r8)
    d140:	d8801c15 	stw	r2,112(sp)
    d144:	d9001b15 	stw	r4,108(sp)
    d148:	793ff40e 	bge	r15,r4,d11c <__alt_data_end+0xff00d11c>
    d14c:	1001b51e 	bne	r2,zero,d824 <___vfiprintf_internal_r+0xb78>
    d150:	843ffc04 	addi	r16,r16,-16
    d154:	000d883a 	mov	r6,zero
    d158:	01400044 	movi	r5,1
    d15c:	d811883a 	mov	r8,sp
    d160:	3c3ff316 	blt	r7,r16,d130 <__alt_data_end+0xff00d130>
    d164:	8007883a 	mov	r3,r16
    d168:	da402517 	ldw	r9,148(sp)
    d16c:	db802817 	ldw	r14,160(sp)
    d170:	dc002917 	ldw	r16,164(sp)
    d174:	da802417 	ldw	r10,144(sp)
    d178:	1885883a 	add	r2,r3,r2
    d17c:	40c00115 	stw	r3,4(r8)
    d180:	42800015 	stw	r10,0(r8)
    d184:	d8801c15 	stw	r2,112(sp)
    d188:	d9401b15 	stw	r5,108(sp)
    d18c:	00c001c4 	movi	r3,7
    d190:	19426016 	blt	r3,r5,db14 <___vfiprintf_internal_r+0xe68>
    d194:	d8c01d87 	ldb	r3,118(sp)
    d198:	42000204 	addi	r8,r8,8
    d19c:	29000044 	addi	r4,r5,1
    d1a0:	1801b31e 	bne	r3,zero,d870 <___vfiprintf_internal_r+0xbc4>
    d1a4:	7001c026 	beq	r14,zero,d8a8 <___vfiprintf_internal_r+0xbfc>
    d1a8:	d8c01d04 	addi	r3,sp,116
    d1ac:	10800084 	addi	r2,r2,2
    d1b0:	40c00015 	stw	r3,0(r8)
    d1b4:	00c00084 	movi	r3,2
    d1b8:	40c00115 	stw	r3,4(r8)
    d1bc:	d8801c15 	stw	r2,112(sp)
    d1c0:	d9001b15 	stw	r4,108(sp)
    d1c4:	00c001c4 	movi	r3,7
    d1c8:	1902650e 	bge	r3,r4,db60 <___vfiprintf_internal_r+0xeb4>
    d1cc:	10029a1e 	bne	r2,zero,dc38 <___vfiprintf_internal_r+0xf8c>
    d1d0:	00c02004 	movi	r3,128
    d1d4:	01000044 	movi	r4,1
    d1d8:	000b883a 	mov	r5,zero
    d1dc:	d811883a 	mov	r8,sp
    d1e0:	e0c1b31e 	bne	fp,r3,d8b0 <___vfiprintf_internal_r+0xc04>
    d1e4:	8cb9c83a 	sub	fp,r17,r18
    d1e8:	0701b10e 	bge	zero,fp,d8b0 <___vfiprintf_internal_r+0xc04>
    d1ec:	01c00404 	movi	r7,16
    d1f0:	3f03890e 	bge	r7,fp,e018 <___vfiprintf_internal_r+0x136c>
    d1f4:	00c00074 	movhi	r3,1
    d1f8:	18d1b904 	addi	r3,r3,18148
    d1fc:	d8c02415 	stw	r3,144(sp)
    d200:	8007883a 	mov	r3,r16
    d204:	034001c4 	movi	r13,7
    d208:	e021883a 	mov	r16,fp
    d20c:	da402515 	stw	r9,148(sp)
    d210:	1839883a 	mov	fp,r3
    d214:	00000506 	br	d22c <___vfiprintf_internal_r+0x580>
    d218:	29800084 	addi	r6,r5,2
    d21c:	42000204 	addi	r8,r8,8
    d220:	180b883a 	mov	r5,r3
    d224:	843ffc04 	addi	r16,r16,-16
    d228:	3c000d0e 	bge	r7,r16,d260 <___vfiprintf_internal_r+0x5b4>
    d22c:	10800404 	addi	r2,r2,16
    d230:	28c00044 	addi	r3,r5,1
    d234:	45c00015 	stw	r23,0(r8)
    d238:	41c00115 	stw	r7,4(r8)
    d23c:	d8801c15 	stw	r2,112(sp)
    d240:	d8c01b15 	stw	r3,108(sp)
    d244:	68fff40e 	bge	r13,r3,d218 <__alt_data_end+0xff00d218>
    d248:	1002241e 	bne	r2,zero,dadc <___vfiprintf_internal_r+0xe30>
    d24c:	843ffc04 	addi	r16,r16,-16
    d250:	01800044 	movi	r6,1
    d254:	000b883a 	mov	r5,zero
    d258:	d811883a 	mov	r8,sp
    d25c:	3c3ff316 	blt	r7,r16,d22c <__alt_data_end+0xff00d22c>
    d260:	da402517 	ldw	r9,148(sp)
    d264:	e007883a 	mov	r3,fp
    d268:	8039883a 	mov	fp,r16
    d26c:	1821883a 	mov	r16,r3
    d270:	d8c02417 	ldw	r3,144(sp)
    d274:	1705883a 	add	r2,r2,fp
    d278:	47000115 	stw	fp,4(r8)
    d27c:	40c00015 	stw	r3,0(r8)
    d280:	d8801c15 	stw	r2,112(sp)
    d284:	d9801b15 	stw	r6,108(sp)
    d288:	00c001c4 	movi	r3,7
    d28c:	19827616 	blt	r3,r6,dc68 <___vfiprintf_internal_r+0xfbc>
    d290:	4cf9c83a 	sub	fp,r9,r19
    d294:	42000204 	addi	r8,r8,8
    d298:	31000044 	addi	r4,r6,1
    d29c:	300b883a 	mov	r5,r6
    d2a0:	07018516 	blt	zero,fp,d8b8 <___vfiprintf_internal_r+0xc0c>
    d2a4:	9885883a 	add	r2,r19,r2
    d2a8:	45400015 	stw	r21,0(r8)
    d2ac:	44c00115 	stw	r19,4(r8)
    d2b0:	d8801c15 	stw	r2,112(sp)
    d2b4:	d9001b15 	stw	r4,108(sp)
    d2b8:	00c001c4 	movi	r3,7
    d2bc:	1901dd0e 	bge	r3,r4,da34 <___vfiprintf_internal_r+0xd88>
    d2c0:	1002401e 	bne	r2,zero,dbc4 <___vfiprintf_internal_r+0xf18>
    d2c4:	d8001b15 	stw	zero,108(sp)
    d2c8:	a2c0010c 	andi	r11,r20,4
    d2cc:	58000226 	beq	r11,zero,d2d8 <___vfiprintf_internal_r+0x62c>
    d2d0:	8ca7c83a 	sub	r19,r17,r18
    d2d4:	04c2f216 	blt	zero,r19,dea0 <___vfiprintf_internal_r+0x11f4>
    d2d8:	8c80010e 	bge	r17,r18,d2e0 <___vfiprintf_internal_r+0x634>
    d2dc:	9023883a 	mov	r17,r18
    d2e0:	da802317 	ldw	r10,140(sp)
    d2e4:	5455883a 	add	r10,r10,r17
    d2e8:	da802315 	stw	r10,140(sp)
    d2ec:	d8001b15 	stw	zero,108(sp)
    d2f0:	d811883a 	mov	r8,sp
    d2f4:	003ea206 	br	cd80 <__alt_data_end+0xff00cd80>
    d2f8:	a5000814 	ori	r20,r20,32
    d2fc:	80c00007 	ldb	r3,0(r16)
    d300:	003ec906 	br	ce28 <__alt_data_end+0xff00ce28>
    d304:	80c00007 	ldb	r3,0(r16)
    d308:	1b030926 	beq	r3,r12,df30 <___vfiprintf_internal_r+0x1284>
    d30c:	a5000414 	ori	r20,r20,16
    d310:	003ec506 	br	ce28 <__alt_data_end+0xff00ce28>
    d314:	21003fcc 	andi	r4,r4,255
    d318:	20035e1e 	bne	r4,zero,e094 <___vfiprintf_internal_r+0x13e8>
    d31c:	a080080c 	andi	r2,r20,32
    d320:	1002a526 	beq	r2,zero,ddb8 <___vfiprintf_internal_r+0x110c>
    d324:	da802217 	ldw	r10,136(sp)
    d328:	50800017 	ldw	r2,0(r10)
    d32c:	da802317 	ldw	r10,140(sp)
    d330:	5007d7fa 	srai	r3,r10,31
    d334:	da802217 	ldw	r10,136(sp)
    d338:	10c00115 	stw	r3,4(r2)
    d33c:	52800104 	addi	r10,r10,4
    d340:	da802215 	stw	r10,136(sp)
    d344:	da802317 	ldw	r10,140(sp)
    d348:	12800015 	stw	r10,0(r2)
    d34c:	003e8c06 	br	cd80 <__alt_data_end+0xff00cd80>
    d350:	21003fcc 	andi	r4,r4,255
    d354:	2003511e 	bne	r4,zero,e09c <___vfiprintf_internal_r+0x13f0>
    d358:	a080080c 	andi	r2,r20,32
    d35c:	1000a126 	beq	r2,zero,d5e4 <___vfiprintf_internal_r+0x938>
    d360:	da802217 	ldw	r10,136(sp)
    d364:	d8001d85 	stb	zero,118(sp)
    d368:	50800204 	addi	r2,r10,8
    d36c:	54800017 	ldw	r18,0(r10)
    d370:	54c00117 	ldw	r19,4(r10)
    d374:	4802b416 	blt	r9,zero,de48 <___vfiprintf_internal_r+0x119c>
    d378:	013fdfc4 	movi	r4,-129
    d37c:	94c6b03a 	or	r3,r18,r19
    d380:	d8802215 	stw	r2,136(sp)
    d384:	a128703a 	and	r20,r20,r4
    d388:	1800a226 	beq	r3,zero,d614 <___vfiprintf_internal_r+0x968>
    d38c:	0039883a 	mov	fp,zero
    d390:	dd401a04 	addi	r21,sp,104
    d394:	9006d0fa 	srli	r3,r18,3
    d398:	9808977a 	slli	r4,r19,29
    d39c:	9826d0fa 	srli	r19,r19,3
    d3a0:	948001cc 	andi	r18,r18,7
    d3a4:	90800c04 	addi	r2,r18,48
    d3a8:	ad7fffc4 	addi	r21,r21,-1
    d3ac:	20e4b03a 	or	r18,r4,r3
    d3b0:	a8800005 	stb	r2,0(r21)
    d3b4:	94c6b03a 	or	r3,r18,r19
    d3b8:	183ff61e 	bne	r3,zero,d394 <__alt_data_end+0xff00d394>
    d3bc:	a0c0004c 	andi	r3,r20,1
    d3c0:	18005926 	beq	r3,zero,d528 <___vfiprintf_internal_r+0x87c>
    d3c4:	10803fcc 	andi	r2,r2,255
    d3c8:	1080201c 	xori	r2,r2,128
    d3cc:	10bfe004 	addi	r2,r2,-128
    d3d0:	00c00c04 	movi	r3,48
    d3d4:	10c05426 	beq	r2,r3,d528 <___vfiprintf_internal_r+0x87c>
    d3d8:	da801e17 	ldw	r10,120(sp)
    d3dc:	a8bfffc4 	addi	r2,r21,-1
    d3e0:	a8ffffc5 	stb	r3,-1(r21)
    d3e4:	50a7c83a 	sub	r19,r10,r2
    d3e8:	102b883a 	mov	r21,r2
    d3ec:	003f2f06 	br	d0ac <__alt_data_end+0xff00d0ac>
    d3f0:	21003fcc 	andi	r4,r4,255
    d3f4:	2003421e 	bne	r4,zero,e100 <___vfiprintf_internal_r+0x1454>
    d3f8:	00800074 	movhi	r2,1
    d3fc:	10915804 	addi	r2,r2,17760
    d400:	d8802615 	stw	r2,152(sp)
    d404:	a080080c 	andi	r2,r20,32
    d408:	1000aa26 	beq	r2,zero,d6b4 <___vfiprintf_internal_r+0xa08>
    d40c:	da802217 	ldw	r10,136(sp)
    d410:	54800017 	ldw	r18,0(r10)
    d414:	54c00117 	ldw	r19,4(r10)
    d418:	52800204 	addi	r10,r10,8
    d41c:	da802215 	stw	r10,136(sp)
    d420:	a080004c 	andi	r2,r20,1
    d424:	1001d226 	beq	r2,zero,db70 <___vfiprintf_internal_r+0xec4>
    d428:	94c4b03a 	or	r2,r18,r19
    d42c:	1002351e 	bne	r2,zero,dd04 <___vfiprintf_internal_r+0x1058>
    d430:	d8001d85 	stb	zero,118(sp)
    d434:	48022216 	blt	r9,zero,dcc0 <___vfiprintf_internal_r+0x1014>
    d438:	00bfdfc4 	movi	r2,-129
    d43c:	a0a8703a 	and	r20,r20,r2
    d440:	003f1506 	br	d098 <__alt_data_end+0xff00d098>
    d444:	da802217 	ldw	r10,136(sp)
    d448:	04800044 	movi	r18,1
    d44c:	d8001d85 	stb	zero,118(sp)
    d450:	50800017 	ldw	r2,0(r10)
    d454:	52800104 	addi	r10,r10,4
    d458:	da802215 	stw	r10,136(sp)
    d45c:	d8801005 	stb	r2,64(sp)
    d460:	9027883a 	mov	r19,r18
    d464:	dd401004 	addi	r21,sp,64
    d468:	0013883a 	mov	r9,zero
    d46c:	003f1706 	br	d0cc <__alt_data_end+0xff00d0cc>
    d470:	21003fcc 	andi	r4,r4,255
    d474:	2003201e 	bne	r4,zero,e0f8 <___vfiprintf_internal_r+0x144c>
    d478:	a080080c 	andi	r2,r20,32
    d47c:	10004b26 	beq	r2,zero,d5ac <___vfiprintf_internal_r+0x900>
    d480:	da802217 	ldw	r10,136(sp)
    d484:	50800117 	ldw	r2,4(r10)
    d488:	54800017 	ldw	r18,0(r10)
    d48c:	52800204 	addi	r10,r10,8
    d490:	da802215 	stw	r10,136(sp)
    d494:	1027883a 	mov	r19,r2
    d498:	10022c16 	blt	r2,zero,dd4c <___vfiprintf_internal_r+0x10a0>
    d49c:	df001d83 	ldbu	fp,118(sp)
    d4a0:	48007216 	blt	r9,zero,d66c <___vfiprintf_internal_r+0x9c0>
    d4a4:	00ffdfc4 	movi	r3,-129
    d4a8:	94c4b03a 	or	r2,r18,r19
    d4ac:	a0e8703a 	and	r20,r20,r3
    d4b0:	1000cc26 	beq	r2,zero,d7e4 <___vfiprintf_internal_r+0xb38>
    d4b4:	98021026 	beq	r19,zero,dcf8 <___vfiprintf_internal_r+0x104c>
    d4b8:	dc402415 	stw	r17,144(sp)
    d4bc:	dc002515 	stw	r16,148(sp)
    d4c0:	9823883a 	mov	r17,r19
    d4c4:	9021883a 	mov	r16,r18
    d4c8:	dd401a04 	addi	r21,sp,104
    d4cc:	4825883a 	mov	r18,r9
    d4d0:	4027883a 	mov	r19,r8
    d4d4:	8009883a 	mov	r4,r16
    d4d8:	880b883a 	mov	r5,r17
    d4dc:	01800284 	movi	r6,10
    d4e0:	000f883a 	mov	r7,zero
    d4e4:	000f08c0 	call	f08c <__umoddi3>
    d4e8:	10800c04 	addi	r2,r2,48
    d4ec:	ad7fffc4 	addi	r21,r21,-1
    d4f0:	8009883a 	mov	r4,r16
    d4f4:	880b883a 	mov	r5,r17
    d4f8:	a8800005 	stb	r2,0(r21)
    d4fc:	01800284 	movi	r6,10
    d500:	000f883a 	mov	r7,zero
    d504:	000eb140 	call	eb14 <__udivdi3>
    d508:	1021883a 	mov	r16,r2
    d50c:	10c4b03a 	or	r2,r2,r3
    d510:	1823883a 	mov	r17,r3
    d514:	103fef1e 	bne	r2,zero,d4d4 <__alt_data_end+0xff00d4d4>
    d518:	dc402417 	ldw	r17,144(sp)
    d51c:	dc002517 	ldw	r16,148(sp)
    d520:	9013883a 	mov	r9,r18
    d524:	9811883a 	mov	r8,r19
    d528:	da801e17 	ldw	r10,120(sp)
    d52c:	5567c83a 	sub	r19,r10,r21
    d530:	003ede06 	br	d0ac <__alt_data_end+0xff00d0ac>
    d534:	38803fcc 	andi	r2,r7,255
    d538:	1080201c 	xori	r2,r2,128
    d53c:	10bfe004 	addi	r2,r2,-128
    d540:	1002371e 	bne	r2,zero,de20 <___vfiprintf_internal_r+0x1174>
    d544:	01000044 	movi	r4,1
    d548:	01c00804 	movi	r7,32
    d54c:	80c00007 	ldb	r3,0(r16)
    d550:	003e3506 	br	ce28 <__alt_data_end+0xff00ce28>
    d554:	a5000054 	ori	r20,r20,1
    d558:	80c00007 	ldb	r3,0(r16)
    d55c:	003e3206 	br	ce28 <__alt_data_end+0xff00ce28>
    d560:	a5002014 	ori	r20,r20,128
    d564:	80c00007 	ldb	r3,0(r16)
    d568:	003e2f06 	br	ce28 <__alt_data_end+0xff00ce28>
    d56c:	8015883a 	mov	r10,r16
    d570:	0023883a 	mov	r17,zero
    d574:	18bff404 	addi	r2,r3,-48
    d578:	50c00007 	ldb	r3,0(r10)
    d57c:	8c4002a4 	muli	r17,r17,10
    d580:	84000044 	addi	r16,r16,1
    d584:	8015883a 	mov	r10,r16
    d588:	1463883a 	add	r17,r2,r17
    d58c:	18bff404 	addi	r2,r3,-48
    d590:	30bff92e 	bgeu	r6,r2,d578 <__alt_data_end+0xff00d578>
    d594:	003e2506 	br	ce2c <__alt_data_end+0xff00ce2c>
    d598:	21003fcc 	andi	r4,r4,255
    d59c:	2002d41e 	bne	r4,zero,e0f0 <___vfiprintf_internal_r+0x1444>
    d5a0:	a5000414 	ori	r20,r20,16
    d5a4:	a080080c 	andi	r2,r20,32
    d5a8:	103fb51e 	bne	r2,zero,d480 <__alt_data_end+0xff00d480>
    d5ac:	a080040c 	andi	r2,r20,16
    d5b0:	1001f826 	beq	r2,zero,dd94 <___vfiprintf_internal_r+0x10e8>
    d5b4:	da802217 	ldw	r10,136(sp)
    d5b8:	54800017 	ldw	r18,0(r10)
    d5bc:	52800104 	addi	r10,r10,4
    d5c0:	da802215 	stw	r10,136(sp)
    d5c4:	9027d7fa 	srai	r19,r18,31
    d5c8:	9805883a 	mov	r2,r19
    d5cc:	003fb206 	br	d498 <__alt_data_end+0xff00d498>
    d5d0:	21003fcc 	andi	r4,r4,255
    d5d4:	2002c41e 	bne	r4,zero,e0e8 <___vfiprintf_internal_r+0x143c>
    d5d8:	a5000414 	ori	r20,r20,16
    d5dc:	a080080c 	andi	r2,r20,32
    d5e0:	103f5f1e 	bne	r2,zero,d360 <__alt_data_end+0xff00d360>
    d5e4:	a080040c 	andi	r2,r20,16
    d5e8:	10020f26 	beq	r2,zero,de28 <___vfiprintf_internal_r+0x117c>
    d5ec:	da802217 	ldw	r10,136(sp)
    d5f0:	d8001d85 	stb	zero,118(sp)
    d5f4:	0027883a 	mov	r19,zero
    d5f8:	50800104 	addi	r2,r10,4
    d5fc:	54800017 	ldw	r18,0(r10)
    d600:	48021116 	blt	r9,zero,de48 <___vfiprintf_internal_r+0x119c>
    d604:	00ffdfc4 	movi	r3,-129
    d608:	d8802215 	stw	r2,136(sp)
    d60c:	a0e8703a 	and	r20,r20,r3
    d610:	903f5e1e 	bne	r18,zero,d38c <__alt_data_end+0xff00d38c>
    d614:	0039883a 	mov	fp,zero
    d618:	4802a626 	beq	r9,zero,e0b4 <___vfiprintf_internal_r+0x1408>
    d61c:	0025883a 	mov	r18,zero
    d620:	0027883a 	mov	r19,zero
    d624:	003f5a06 	br	d390 <__alt_data_end+0xff00d390>
    d628:	21003fcc 	andi	r4,r4,255
    d62c:	20029f1e 	bne	r4,zero,e0ac <___vfiprintf_internal_r+0x1400>
    d630:	a5000414 	ori	r20,r20,16
    d634:	a080080c 	andi	r2,r20,32
    d638:	10005e1e 	bne	r2,zero,d7b4 <___vfiprintf_internal_r+0xb08>
    d63c:	a080040c 	andi	r2,r20,16
    d640:	1001a21e 	bne	r2,zero,dccc <___vfiprintf_internal_r+0x1020>
    d644:	a080100c 	andi	r2,r20,64
    d648:	d8001d85 	stb	zero,118(sp)
    d64c:	da802217 	ldw	r10,136(sp)
    d650:	1002231e 	bne	r2,zero,dee0 <___vfiprintf_internal_r+0x1234>
    d654:	50800104 	addi	r2,r10,4
    d658:	54800017 	ldw	r18,0(r10)
    d65c:	0027883a 	mov	r19,zero
    d660:	4801a00e 	bge	r9,zero,dce4 <___vfiprintf_internal_r+0x1038>
    d664:	d8802215 	stw	r2,136(sp)
    d668:	0039883a 	mov	fp,zero
    d66c:	94c4b03a 	or	r2,r18,r19
    d670:	103f901e 	bne	r2,zero,d4b4 <__alt_data_end+0xff00d4b4>
    d674:	00800044 	movi	r2,1
    d678:	10803fcc 	andi	r2,r2,255
    d67c:	00c00044 	movi	r3,1
    d680:	10c05926 	beq	r2,r3,d7e8 <___vfiprintf_internal_r+0xb3c>
    d684:	00c00084 	movi	r3,2
    d688:	10ffe41e 	bne	r2,r3,d61c <__alt_data_end+0xff00d61c>
    d68c:	0025883a 	mov	r18,zero
    d690:	0027883a 	mov	r19,zero
    d694:	00013d06 	br	db8c <___vfiprintf_internal_r+0xee0>
    d698:	21003fcc 	andi	r4,r4,255
    d69c:	2002811e 	bne	r4,zero,e0a4 <___vfiprintf_internal_r+0x13f8>
    d6a0:	00800074 	movhi	r2,1
    d6a4:	10915304 	addi	r2,r2,17740
    d6a8:	d8802615 	stw	r2,152(sp)
    d6ac:	a080080c 	andi	r2,r20,32
    d6b0:	103f561e 	bne	r2,zero,d40c <__alt_data_end+0xff00d40c>
    d6b4:	a080040c 	andi	r2,r20,16
    d6b8:	1001d126 	beq	r2,zero,de00 <___vfiprintf_internal_r+0x1154>
    d6bc:	da802217 	ldw	r10,136(sp)
    d6c0:	0027883a 	mov	r19,zero
    d6c4:	54800017 	ldw	r18,0(r10)
    d6c8:	52800104 	addi	r10,r10,4
    d6cc:	da802215 	stw	r10,136(sp)
    d6d0:	003f5306 	br	d420 <__alt_data_end+0xff00d420>
    d6d4:	da802217 	ldw	r10,136(sp)
    d6d8:	d8001d85 	stb	zero,118(sp)
    d6dc:	55400017 	ldw	r21,0(r10)
    d6e0:	50c00104 	addi	r3,r10,4
    d6e4:	a8024226 	beq	r21,zero,dff0 <___vfiprintf_internal_r+0x1344>
    d6e8:	48021816 	blt	r9,zero,df4c <___vfiprintf_internal_r+0x12a0>
    d6ec:	480d883a 	mov	r6,r9
    d6f0:	000b883a 	mov	r5,zero
    d6f4:	a809883a 	mov	r4,r21
    d6f8:	d8c02a15 	stw	r3,168(sp)
    d6fc:	da002b15 	stw	r8,172(sp)
    d700:	da402c15 	stw	r9,176(sp)
    d704:	000aefc0 	call	aefc <memchr>
    d708:	d8c02a17 	ldw	r3,168(sp)
    d70c:	da002b17 	ldw	r8,172(sp)
    d710:	da402c17 	ldw	r9,176(sp)
    d714:	10024826 	beq	r2,zero,e038 <___vfiprintf_internal_r+0x138c>
    d718:	1567c83a 	sub	r19,r2,r21
    d71c:	df001d83 	ldbu	fp,118(sp)
    d720:	d8c02215 	stw	r3,136(sp)
    d724:	0013883a 	mov	r9,zero
    d728:	003e6006 	br	d0ac <__alt_data_end+0xff00d0ac>
    d72c:	21003fcc 	andi	r4,r4,255
    d730:	203fc026 	beq	r4,zero,d634 <__alt_data_end+0xff00d634>
    d734:	d9c01d85 	stb	r7,118(sp)
    d738:	003fbe06 	br	d634 <__alt_data_end+0xff00d634>
    d73c:	da802217 	ldw	r10,136(sp)
    d740:	54400017 	ldw	r17,0(r10)
    d744:	50800104 	addi	r2,r10,4
    d748:	883e3b16 	blt	r17,zero,d038 <__alt_data_end+0xff00d038>
    d74c:	d8802215 	stw	r2,136(sp)
    d750:	80c00007 	ldb	r3,0(r16)
    d754:	003db406 	br	ce28 <__alt_data_end+0xff00ce28>
    d758:	01000044 	movi	r4,1
    d75c:	01c00ac4 	movi	r7,43
    d760:	80c00007 	ldb	r3,0(r16)
    d764:	003db006 	br	ce28 <__alt_data_end+0xff00ce28>
    d768:	80c00007 	ldb	r3,0(r16)
    d76c:	82800044 	addi	r10,r16,1
    d770:	1b423c26 	beq	r3,r13,e064 <___vfiprintf_internal_r+0x13b8>
    d774:	18bff404 	addi	r2,r3,-48
    d778:	0013883a 	mov	r9,zero
    d77c:	30822b36 	bltu	r6,r2,e02c <___vfiprintf_internal_r+0x1380>
    d780:	50c00007 	ldb	r3,0(r10)
    d784:	4a4002a4 	muli	r9,r9,10
    d788:	54000044 	addi	r16,r10,1
    d78c:	8015883a 	mov	r10,r16
    d790:	4893883a 	add	r9,r9,r2
    d794:	18bff404 	addi	r2,r3,-48
    d798:	30bff92e 	bgeu	r6,r2,d780 <__alt_data_end+0xff00d780>
    d79c:	483da30e 	bge	r9,zero,ce2c <__alt_data_end+0xff00ce2c>
    d7a0:	027fffc4 	movi	r9,-1
    d7a4:	003da106 	br	ce2c <__alt_data_end+0xff00ce2c>
    d7a8:	a5001014 	ori	r20,r20,64
    d7ac:	80c00007 	ldb	r3,0(r16)
    d7b0:	003d9d06 	br	ce28 <__alt_data_end+0xff00ce28>
    d7b4:	da802217 	ldw	r10,136(sp)
    d7b8:	d8001d85 	stb	zero,118(sp)
    d7bc:	50c00204 	addi	r3,r10,8
    d7c0:	54800017 	ldw	r18,0(r10)
    d7c4:	54c00117 	ldw	r19,4(r10)
    d7c8:	4801ca16 	blt	r9,zero,def4 <___vfiprintf_internal_r+0x1248>
    d7cc:	013fdfc4 	movi	r4,-129
    d7d0:	94c4b03a 	or	r2,r18,r19
    d7d4:	d8c02215 	stw	r3,136(sp)
    d7d8:	a128703a 	and	r20,r20,r4
    d7dc:	0039883a 	mov	fp,zero
    d7e0:	103f341e 	bne	r2,zero,d4b4 <__alt_data_end+0xff00d4b4>
    d7e4:	483e2e26 	beq	r9,zero,d0a0 <__alt_data_end+0xff00d0a0>
    d7e8:	0025883a 	mov	r18,zero
    d7ec:	94800c04 	addi	r18,r18,48
    d7f0:	dc8019c5 	stb	r18,103(sp)
    d7f4:	dcc02717 	ldw	r19,156(sp)
    d7f8:	dd4019c4 	addi	r21,sp,103
    d7fc:	003e2b06 	br	d0ac <__alt_data_end+0xff00d0ac>
    d800:	21003fcc 	andi	r4,r4,255
    d804:	2002361e 	bne	r4,zero,e0e0 <___vfiprintf_internal_r+0x1434>
    d808:	1801c126 	beq	r3,zero,df10 <___vfiprintf_internal_r+0x1264>
    d80c:	04800044 	movi	r18,1
    d810:	d8c01005 	stb	r3,64(sp)
    d814:	d8001d85 	stb	zero,118(sp)
    d818:	9027883a 	mov	r19,r18
    d81c:	dd401004 	addi	r21,sp,64
    d820:	003f1106 	br	d468 <__alt_data_end+0xff00d468>
    d824:	d9402117 	ldw	r5,132(sp)
    d828:	d9002017 	ldw	r4,128(sp)
    d82c:	d9801a04 	addi	r6,sp,104
    d830:	d9c02b15 	stw	r7,172(sp)
    d834:	dbc02a15 	stw	r15,168(sp)
    d838:	000cb980 	call	cb98 <__sprint_r.part.0>
    d83c:	d9c02b17 	ldw	r7,172(sp)
    d840:	dbc02a17 	ldw	r15,168(sp)
    d844:	10006d1e 	bne	r2,zero,d9fc <___vfiprintf_internal_r+0xd50>
    d848:	d9801b17 	ldw	r6,108(sp)
    d84c:	d8801c17 	ldw	r2,112(sp)
    d850:	d811883a 	mov	r8,sp
    d854:	31400044 	addi	r5,r6,1
    d858:	003e3306 	br	d128 <__alt_data_end+0xff00d128>
    d85c:	d9401b17 	ldw	r5,108(sp)
    d860:	d8801c17 	ldw	r2,112(sp)
    d864:	29000044 	addi	r4,r5,1
    d868:	d8c01d87 	ldb	r3,118(sp)
    d86c:	183e4d26 	beq	r3,zero,d1a4 <__alt_data_end+0xff00d1a4>
    d870:	00c00044 	movi	r3,1
    d874:	d9401d84 	addi	r5,sp,118
    d878:	10c5883a 	add	r2,r2,r3
    d87c:	41400015 	stw	r5,0(r8)
    d880:	40c00115 	stw	r3,4(r8)
    d884:	d8801c15 	stw	r2,112(sp)
    d888:	d9001b15 	stw	r4,108(sp)
    d88c:	014001c4 	movi	r5,7
    d890:	2900a90e 	bge	r5,r4,db38 <___vfiprintf_internal_r+0xe8c>
    d894:	1000da1e 	bne	r2,zero,dc00 <___vfiprintf_internal_r+0xf54>
    d898:	7000ab1e 	bne	r14,zero,db48 <___vfiprintf_internal_r+0xe9c>
    d89c:	000b883a 	mov	r5,zero
    d8a0:	1809883a 	mov	r4,r3
    d8a4:	d811883a 	mov	r8,sp
    d8a8:	00c02004 	movi	r3,128
    d8ac:	e0fe4d26 	beq	fp,r3,d1e4 <__alt_data_end+0xff00d1e4>
    d8b0:	4cf9c83a 	sub	fp,r9,r19
    d8b4:	073e7b0e 	bge	zero,fp,d2a4 <__alt_data_end+0xff00d2a4>
    d8b8:	01c00404 	movi	r7,16
    d8bc:	3f01900e 	bge	r7,fp,df00 <___vfiprintf_internal_r+0x1254>
    d8c0:	00c00074 	movhi	r3,1
    d8c4:	18d1b904 	addi	r3,r3,18148
    d8c8:	d8c02415 	stw	r3,144(sp)
    d8cc:	034001c4 	movi	r13,7
    d8d0:	00000506 	br	d8e8 <___vfiprintf_internal_r+0xc3c>
    d8d4:	29000084 	addi	r4,r5,2
    d8d8:	42000204 	addi	r8,r8,8
    d8dc:	180b883a 	mov	r5,r3
    d8e0:	e73ffc04 	addi	fp,fp,-16
    d8e4:	3f000d0e 	bge	r7,fp,d91c <___vfiprintf_internal_r+0xc70>
    d8e8:	10800404 	addi	r2,r2,16
    d8ec:	28c00044 	addi	r3,r5,1
    d8f0:	45c00015 	stw	r23,0(r8)
    d8f4:	41c00115 	stw	r7,4(r8)
    d8f8:	d8801c15 	stw	r2,112(sp)
    d8fc:	d8c01b15 	stw	r3,108(sp)
    d900:	68fff40e 	bge	r13,r3,d8d4 <__alt_data_end+0xff00d8d4>
    d904:	1000101e 	bne	r2,zero,d948 <___vfiprintf_internal_r+0xc9c>
    d908:	e73ffc04 	addi	fp,fp,-16
    d90c:	01000044 	movi	r4,1
    d910:	000b883a 	mov	r5,zero
    d914:	d811883a 	mov	r8,sp
    d918:	3f3ff316 	blt	r7,fp,d8e8 <__alt_data_end+0xff00d8e8>
    d91c:	da802417 	ldw	r10,144(sp)
    d920:	1705883a 	add	r2,r2,fp
    d924:	47000115 	stw	fp,4(r8)
    d928:	42800015 	stw	r10,0(r8)
    d92c:	d8801c15 	stw	r2,112(sp)
    d930:	d9001b15 	stw	r4,108(sp)
    d934:	00c001c4 	movi	r3,7
    d938:	19003616 	blt	r3,r4,da14 <___vfiprintf_internal_r+0xd68>
    d93c:	42000204 	addi	r8,r8,8
    d940:	21000044 	addi	r4,r4,1
    d944:	003e5706 	br	d2a4 <__alt_data_end+0xff00d2a4>
    d948:	d9402117 	ldw	r5,132(sp)
    d94c:	d9002017 	ldw	r4,128(sp)
    d950:	d9801a04 	addi	r6,sp,104
    d954:	d9c02b15 	stw	r7,172(sp)
    d958:	db402a15 	stw	r13,168(sp)
    d95c:	000cb980 	call	cb98 <__sprint_r.part.0>
    d960:	d9c02b17 	ldw	r7,172(sp)
    d964:	db402a17 	ldw	r13,168(sp)
    d968:	1000241e 	bne	r2,zero,d9fc <___vfiprintf_internal_r+0xd50>
    d96c:	d9401b17 	ldw	r5,108(sp)
    d970:	d8801c17 	ldw	r2,112(sp)
    d974:	d811883a 	mov	r8,sp
    d978:	29000044 	addi	r4,r5,1
    d97c:	003fd806 	br	d8e0 <__alt_data_end+0xff00d8e0>
    d980:	d9401b17 	ldw	r5,108(sp)
    d984:	00c00074 	movhi	r3,1
    d988:	18d1bd04 	addi	r3,r3,18164
    d98c:	d8c02415 	stw	r3,144(sp)
    d990:	29400044 	addi	r5,r5,1
    d994:	d8c02417 	ldw	r3,144(sp)
    d998:	14c5883a 	add	r2,r2,r19
    d99c:	44c00115 	stw	r19,4(r8)
    d9a0:	40c00015 	stw	r3,0(r8)
    d9a4:	d8801c15 	stw	r2,112(sp)
    d9a8:	d9401b15 	stw	r5,108(sp)
    d9ac:	00c001c4 	movi	r3,7
    d9b0:	1940070e 	bge	r3,r5,d9d0 <___vfiprintf_internal_r+0xd24>
    d9b4:	103e4826 	beq	r2,zero,d2d8 <__alt_data_end+0xff00d2d8>
    d9b8:	d9402117 	ldw	r5,132(sp)
    d9bc:	d9002017 	ldw	r4,128(sp)
    d9c0:	d9801a04 	addi	r6,sp,104
    d9c4:	000cb980 	call	cb98 <__sprint_r.part.0>
    d9c8:	10000c1e 	bne	r2,zero,d9fc <___vfiprintf_internal_r+0xd50>
    d9cc:	d8801c17 	ldw	r2,112(sp)
    d9d0:	8c80010e 	bge	r17,r18,d9d8 <___vfiprintf_internal_r+0xd2c>
    d9d4:	9023883a 	mov	r17,r18
    d9d8:	da802317 	ldw	r10,140(sp)
    d9dc:	5455883a 	add	r10,r10,r17
    d9e0:	da802315 	stw	r10,140(sp)
    d9e4:	103e4126 	beq	r2,zero,d2ec <__alt_data_end+0xff00d2ec>
    d9e8:	d9402117 	ldw	r5,132(sp)
    d9ec:	d9002017 	ldw	r4,128(sp)
    d9f0:	d9801a04 	addi	r6,sp,104
    d9f4:	000cb980 	call	cb98 <__sprint_r.part.0>
    d9f8:	103e3c26 	beq	r2,zero,d2ec <__alt_data_end+0xff00d2ec>
    d9fc:	dd002117 	ldw	r20,132(sp)
    da00:	a080030b 	ldhu	r2,12(r20)
    da04:	1080100c 	andi	r2,r2,64
    da08:	1001231e 	bne	r2,zero,de98 <___vfiprintf_internal_r+0x11ec>
    da0c:	d8802317 	ldw	r2,140(sp)
    da10:	003d7b06 	br	d000 <__alt_data_end+0xff00d000>
    da14:	1000991e 	bne	r2,zero,dc7c <___vfiprintf_internal_r+0xfd0>
    da18:	00c00044 	movi	r3,1
    da1c:	9805883a 	mov	r2,r19
    da20:	dd400015 	stw	r21,0(sp)
    da24:	dcc00115 	stw	r19,4(sp)
    da28:	dcc01c15 	stw	r19,112(sp)
    da2c:	d8c01b15 	stw	r3,108(sp)
    da30:	d811883a 	mov	r8,sp
    da34:	42000204 	addi	r8,r8,8
    da38:	a2c0010c 	andi	r11,r20,4
    da3c:	583fe426 	beq	r11,zero,d9d0 <__alt_data_end+0xff00d9d0>
    da40:	8ca7c83a 	sub	r19,r17,r18
    da44:	04ffe20e 	bge	zero,r19,d9d0 <__alt_data_end+0xff00d9d0>
    da48:	01c00404 	movi	r7,16
    da4c:	3cffcc0e 	bge	r7,r19,d980 <__alt_data_end+0xff00d980>
    da50:	02800074 	movhi	r10,1
    da54:	5291bd04 	addi	r10,r10,18164
    da58:	d9001b17 	ldw	r4,108(sp)
    da5c:	da802415 	stw	r10,144(sp)
    da60:	382b883a 	mov	r21,r7
    da64:	050001c4 	movi	r20,7
    da68:	df002017 	ldw	fp,128(sp)
    da6c:	00000506 	br	da84 <___vfiprintf_internal_r+0xdd8>
    da70:	21400084 	addi	r5,r4,2
    da74:	42000204 	addi	r8,r8,8
    da78:	1809883a 	mov	r4,r3
    da7c:	9cfffc04 	addi	r19,r19,-16
    da80:	acffc40e 	bge	r21,r19,d994 <__alt_data_end+0xff00d994>
    da84:	10800404 	addi	r2,r2,16
    da88:	20c00044 	addi	r3,r4,1
    da8c:	45800015 	stw	r22,0(r8)
    da90:	45400115 	stw	r21,4(r8)
    da94:	d8801c15 	stw	r2,112(sp)
    da98:	d8c01b15 	stw	r3,108(sp)
    da9c:	a0fff40e 	bge	r20,r3,da70 <__alt_data_end+0xff00da70>
    daa0:	1000041e 	bne	r2,zero,dab4 <___vfiprintf_internal_r+0xe08>
    daa4:	01400044 	movi	r5,1
    daa8:	0009883a 	mov	r4,zero
    daac:	d811883a 	mov	r8,sp
    dab0:	003ff206 	br	da7c <__alt_data_end+0xff00da7c>
    dab4:	d9402117 	ldw	r5,132(sp)
    dab8:	d9801a04 	addi	r6,sp,104
    dabc:	e009883a 	mov	r4,fp
    dac0:	000cb980 	call	cb98 <__sprint_r.part.0>
    dac4:	103fcd1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dac8:	d9001b17 	ldw	r4,108(sp)
    dacc:	d8801c17 	ldw	r2,112(sp)
    dad0:	d811883a 	mov	r8,sp
    dad4:	21400044 	addi	r5,r4,1
    dad8:	003fe806 	br	da7c <__alt_data_end+0xff00da7c>
    dadc:	d9402117 	ldw	r5,132(sp)
    dae0:	d9002017 	ldw	r4,128(sp)
    dae4:	d9801a04 	addi	r6,sp,104
    dae8:	d9c02b15 	stw	r7,172(sp)
    daec:	db402a15 	stw	r13,168(sp)
    daf0:	000cb980 	call	cb98 <__sprint_r.part.0>
    daf4:	d9c02b17 	ldw	r7,172(sp)
    daf8:	db402a17 	ldw	r13,168(sp)
    dafc:	103fbf1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    db00:	d9401b17 	ldw	r5,108(sp)
    db04:	d8801c17 	ldw	r2,112(sp)
    db08:	d811883a 	mov	r8,sp
    db0c:	29800044 	addi	r6,r5,1
    db10:	003dc406 	br	d224 <__alt_data_end+0xff00d224>
    db14:	1000d21e 	bne	r2,zero,de60 <___vfiprintf_internal_r+0x11b4>
    db18:	d8c01d87 	ldb	r3,118(sp)
    db1c:	18009526 	beq	r3,zero,dd74 <___vfiprintf_internal_r+0x10c8>
    db20:	00800044 	movi	r2,1
    db24:	d8c01d84 	addi	r3,sp,118
    db28:	1009883a 	mov	r4,r2
    db2c:	d8c00015 	stw	r3,0(sp)
    db30:	d8800115 	stw	r2,4(sp)
    db34:	d811883a 	mov	r8,sp
    db38:	200b883a 	mov	r5,r4
    db3c:	42000204 	addi	r8,r8,8
    db40:	21000044 	addi	r4,r4,1
    db44:	003d9706 	br	d1a4 <__alt_data_end+0xff00d1a4>
    db48:	d9001d04 	addi	r4,sp,116
    db4c:	00800084 	movi	r2,2
    db50:	d9000015 	stw	r4,0(sp)
    db54:	d8800115 	stw	r2,4(sp)
    db58:	1809883a 	mov	r4,r3
    db5c:	d811883a 	mov	r8,sp
    db60:	200b883a 	mov	r5,r4
    db64:	42000204 	addi	r8,r8,8
    db68:	21000044 	addi	r4,r4,1
    db6c:	003f4e06 	br	d8a8 <__alt_data_end+0xff00d8a8>
    db70:	d8001d85 	stb	zero,118(sp)
    db74:	48005016 	blt	r9,zero,dcb8 <___vfiprintf_internal_r+0x100c>
    db78:	00ffdfc4 	movi	r3,-129
    db7c:	94c4b03a 	or	r2,r18,r19
    db80:	a0e8703a 	and	r20,r20,r3
    db84:	103d4426 	beq	r2,zero,d098 <__alt_data_end+0xff00d098>
    db88:	0039883a 	mov	fp,zero
    db8c:	d9002617 	ldw	r4,152(sp)
    db90:	dd401a04 	addi	r21,sp,104
    db94:	908003cc 	andi	r2,r18,15
    db98:	9806973a 	slli	r3,r19,28
    db9c:	2085883a 	add	r2,r4,r2
    dba0:	9024d13a 	srli	r18,r18,4
    dba4:	10800003 	ldbu	r2,0(r2)
    dba8:	9826d13a 	srli	r19,r19,4
    dbac:	ad7fffc4 	addi	r21,r21,-1
    dbb0:	1ca4b03a 	or	r18,r3,r18
    dbb4:	a8800005 	stb	r2,0(r21)
    dbb8:	94c4b03a 	or	r2,r18,r19
    dbbc:	103ff51e 	bne	r2,zero,db94 <__alt_data_end+0xff00db94>
    dbc0:	003e5906 	br	d528 <__alt_data_end+0xff00d528>
    dbc4:	d9402117 	ldw	r5,132(sp)
    dbc8:	d9002017 	ldw	r4,128(sp)
    dbcc:	d9801a04 	addi	r6,sp,104
    dbd0:	000cb980 	call	cb98 <__sprint_r.part.0>
    dbd4:	103f891e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dbd8:	d8801c17 	ldw	r2,112(sp)
    dbdc:	d811883a 	mov	r8,sp
    dbe0:	003f9506 	br	da38 <__alt_data_end+0xff00da38>
    dbe4:	d9402117 	ldw	r5,132(sp)
    dbe8:	d9002017 	ldw	r4,128(sp)
    dbec:	d9801a04 	addi	r6,sp,104
    dbf0:	000cb980 	call	cb98 <__sprint_r.part.0>
    dbf4:	103f811e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dbf8:	d811883a 	mov	r8,sp
    dbfc:	003ced06 	br	cfb4 <__alt_data_end+0xff00cfb4>
    dc00:	d9402117 	ldw	r5,132(sp)
    dc04:	d9002017 	ldw	r4,128(sp)
    dc08:	d9801a04 	addi	r6,sp,104
    dc0c:	da402c15 	stw	r9,176(sp)
    dc10:	db802a15 	stw	r14,168(sp)
    dc14:	000cb980 	call	cb98 <__sprint_r.part.0>
    dc18:	da402c17 	ldw	r9,176(sp)
    dc1c:	db802a17 	ldw	r14,168(sp)
    dc20:	103f761e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dc24:	d9401b17 	ldw	r5,108(sp)
    dc28:	d8801c17 	ldw	r2,112(sp)
    dc2c:	d811883a 	mov	r8,sp
    dc30:	29000044 	addi	r4,r5,1
    dc34:	003d5b06 	br	d1a4 <__alt_data_end+0xff00d1a4>
    dc38:	d9402117 	ldw	r5,132(sp)
    dc3c:	d9002017 	ldw	r4,128(sp)
    dc40:	d9801a04 	addi	r6,sp,104
    dc44:	da402c15 	stw	r9,176(sp)
    dc48:	000cb980 	call	cb98 <__sprint_r.part.0>
    dc4c:	da402c17 	ldw	r9,176(sp)
    dc50:	103f6a1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dc54:	d9401b17 	ldw	r5,108(sp)
    dc58:	d8801c17 	ldw	r2,112(sp)
    dc5c:	d811883a 	mov	r8,sp
    dc60:	29000044 	addi	r4,r5,1
    dc64:	003f1006 	br	d8a8 <__alt_data_end+0xff00d8a8>
    dc68:	1000c31e 	bne	r2,zero,df78 <___vfiprintf_internal_r+0x12cc>
    dc6c:	01000044 	movi	r4,1
    dc70:	000b883a 	mov	r5,zero
    dc74:	d811883a 	mov	r8,sp
    dc78:	003f0d06 	br	d8b0 <__alt_data_end+0xff00d8b0>
    dc7c:	d9402117 	ldw	r5,132(sp)
    dc80:	d9002017 	ldw	r4,128(sp)
    dc84:	d9801a04 	addi	r6,sp,104
    dc88:	000cb980 	call	cb98 <__sprint_r.part.0>
    dc8c:	103f5b1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    dc90:	d9001b17 	ldw	r4,108(sp)
    dc94:	d8801c17 	ldw	r2,112(sp)
    dc98:	d811883a 	mov	r8,sp
    dc9c:	21000044 	addi	r4,r4,1
    dca0:	003d8006 	br	d2a4 <__alt_data_end+0xff00d2a4>
    dca4:	01000074 	movhi	r4,1
    dca8:	21115804 	addi	r4,r4,17760
    dcac:	d9002615 	stw	r4,152(sp)
    dcb0:	d8c02215 	stw	r3,136(sp)
    dcb4:	1029883a 	mov	r20,r2
    dcb8:	94c4b03a 	or	r2,r18,r19
    dcbc:	103fb21e 	bne	r2,zero,db88 <__alt_data_end+0xff00db88>
    dcc0:	0039883a 	mov	fp,zero
    dcc4:	00800084 	movi	r2,2
    dcc8:	003e6b06 	br	d678 <__alt_data_end+0xff00d678>
    dccc:	da802217 	ldw	r10,136(sp)
    dcd0:	d8001d85 	stb	zero,118(sp)
    dcd4:	0027883a 	mov	r19,zero
    dcd8:	50800104 	addi	r2,r10,4
    dcdc:	54800017 	ldw	r18,0(r10)
    dce0:	483e6016 	blt	r9,zero,d664 <__alt_data_end+0xff00d664>
    dce4:	00ffdfc4 	movi	r3,-129
    dce8:	d8802215 	stw	r2,136(sp)
    dcec:	a0e8703a 	and	r20,r20,r3
    dcf0:	0039883a 	mov	fp,zero
    dcf4:	903ebb26 	beq	r18,zero,d7e4 <__alt_data_end+0xff00d7e4>
    dcf8:	00800244 	movi	r2,9
    dcfc:	14bdee36 	bltu	r2,r18,d4b8 <__alt_data_end+0xff00d4b8>
    dd00:	003eba06 	br	d7ec <__alt_data_end+0xff00d7ec>
    dd04:	00800c04 	movi	r2,48
    dd08:	d8c01d45 	stb	r3,117(sp)
    dd0c:	d8801d05 	stb	r2,116(sp)
    dd10:	d8001d85 	stb	zero,118(sp)
    dd14:	a0c00094 	ori	r3,r20,2
    dd18:	4800a916 	blt	r9,zero,dfc0 <___vfiprintf_internal_r+0x1314>
    dd1c:	00bfdfc4 	movi	r2,-129
    dd20:	a096703a 	and	r11,r20,r2
    dd24:	5d000094 	ori	r20,r11,2
    dd28:	0039883a 	mov	fp,zero
    dd2c:	003f9706 	br	db8c <__alt_data_end+0xff00db8c>
    dd30:	8025883a 	mov	r18,r16
    dd34:	003c2e06 	br	cdf0 <__alt_data_end+0xff00cdf0>
    dd38:	00800074 	movhi	r2,1
    dd3c:	10915804 	addi	r2,r2,17760
    dd40:	0039883a 	mov	fp,zero
    dd44:	d8802615 	stw	r2,152(sp)
    dd48:	003f9006 	br	db8c <__alt_data_end+0xff00db8c>
    dd4c:	04a5c83a 	sub	r18,zero,r18
    dd50:	07000b44 	movi	fp,45
    dd54:	9004c03a 	cmpne	r2,r18,zero
    dd58:	04e7c83a 	sub	r19,zero,r19
    dd5c:	df001d85 	stb	fp,118(sp)
    dd60:	98a7c83a 	sub	r19,r19,r2
    dd64:	48009f16 	blt	r9,zero,dfe4 <___vfiprintf_internal_r+0x1338>
    dd68:	00bfdfc4 	movi	r2,-129
    dd6c:	a0a8703a 	and	r20,r20,r2
    dd70:	003dd006 	br	d4b4 <__alt_data_end+0xff00d4b4>
    dd74:	70004c26 	beq	r14,zero,dea8 <___vfiprintf_internal_r+0x11fc>
    dd78:	00800084 	movi	r2,2
    dd7c:	d8c01d04 	addi	r3,sp,116
    dd80:	d8c00015 	stw	r3,0(sp)
    dd84:	d8800115 	stw	r2,4(sp)
    dd88:	01000044 	movi	r4,1
    dd8c:	d811883a 	mov	r8,sp
    dd90:	003f7306 	br	db60 <__alt_data_end+0xff00db60>
    dd94:	a080100c 	andi	r2,r20,64
    dd98:	da802217 	ldw	r10,136(sp)
    dd9c:	103e0626 	beq	r2,zero,d5b8 <__alt_data_end+0xff00d5b8>
    dda0:	5480000f 	ldh	r18,0(r10)
    dda4:	52800104 	addi	r10,r10,4
    dda8:	da802215 	stw	r10,136(sp)
    ddac:	9027d7fa 	srai	r19,r18,31
    ddb0:	9805883a 	mov	r2,r19
    ddb4:	003db806 	br	d498 <__alt_data_end+0xff00d498>
    ddb8:	a080040c 	andi	r2,r20,16
    ddbc:	1000091e 	bne	r2,zero,dde4 <___vfiprintf_internal_r+0x1138>
    ddc0:	a2c0100c 	andi	r11,r20,64
    ddc4:	58000726 	beq	r11,zero,dde4 <___vfiprintf_internal_r+0x1138>
    ddc8:	da802217 	ldw	r10,136(sp)
    ddcc:	50800017 	ldw	r2,0(r10)
    ddd0:	52800104 	addi	r10,r10,4
    ddd4:	da802215 	stw	r10,136(sp)
    ddd8:	da802317 	ldw	r10,140(sp)
    dddc:	1280000d 	sth	r10,0(r2)
    dde0:	003be706 	br	cd80 <__alt_data_end+0xff00cd80>
    dde4:	da802217 	ldw	r10,136(sp)
    dde8:	50800017 	ldw	r2,0(r10)
    ddec:	52800104 	addi	r10,r10,4
    ddf0:	da802215 	stw	r10,136(sp)
    ddf4:	da802317 	ldw	r10,140(sp)
    ddf8:	12800015 	stw	r10,0(r2)
    ddfc:	003be006 	br	cd80 <__alt_data_end+0xff00cd80>
    de00:	a080100c 	andi	r2,r20,64
    de04:	da802217 	ldw	r10,136(sp)
    de08:	10003026 	beq	r2,zero,decc <___vfiprintf_internal_r+0x1220>
    de0c:	5480000b 	ldhu	r18,0(r10)
    de10:	52800104 	addi	r10,r10,4
    de14:	0027883a 	mov	r19,zero
    de18:	da802215 	stw	r10,136(sp)
    de1c:	003d8006 	br	d420 <__alt_data_end+0xff00d420>
    de20:	80c00007 	ldb	r3,0(r16)
    de24:	003c0006 	br	ce28 <__alt_data_end+0xff00ce28>
    de28:	a080100c 	andi	r2,r20,64
    de2c:	d8001d85 	stb	zero,118(sp)
    de30:	da802217 	ldw	r10,136(sp)
    de34:	1000201e 	bne	r2,zero,deb8 <___vfiprintf_internal_r+0x120c>
    de38:	50800104 	addi	r2,r10,4
    de3c:	54800017 	ldw	r18,0(r10)
    de40:	0027883a 	mov	r19,zero
    de44:	483def0e 	bge	r9,zero,d604 <__alt_data_end+0xff00d604>
    de48:	94c6b03a 	or	r3,r18,r19
    de4c:	d8802215 	stw	r2,136(sp)
    de50:	183d4e1e 	bne	r3,zero,d38c <__alt_data_end+0xff00d38c>
    de54:	0039883a 	mov	fp,zero
    de58:	0005883a 	mov	r2,zero
    de5c:	003e0606 	br	d678 <__alt_data_end+0xff00d678>
    de60:	d9402117 	ldw	r5,132(sp)
    de64:	d9002017 	ldw	r4,128(sp)
    de68:	d9801a04 	addi	r6,sp,104
    de6c:	da402c15 	stw	r9,176(sp)
    de70:	db802a15 	stw	r14,168(sp)
    de74:	000cb980 	call	cb98 <__sprint_r.part.0>
    de78:	da402c17 	ldw	r9,176(sp)
    de7c:	db802a17 	ldw	r14,168(sp)
    de80:	103ede1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    de84:	d9401b17 	ldw	r5,108(sp)
    de88:	d8801c17 	ldw	r2,112(sp)
    de8c:	d811883a 	mov	r8,sp
    de90:	29000044 	addi	r4,r5,1
    de94:	003e7406 	br	d868 <__alt_data_end+0xff00d868>
    de98:	00bfffc4 	movi	r2,-1
    de9c:	003c5806 	br	d000 <__alt_data_end+0xff00d000>
    dea0:	d811883a 	mov	r8,sp
    dea4:	003ee806 	br	da48 <__alt_data_end+0xff00da48>
    dea8:	000b883a 	mov	r5,zero
    deac:	01000044 	movi	r4,1
    deb0:	d811883a 	mov	r8,sp
    deb4:	003e7c06 	br	d8a8 <__alt_data_end+0xff00d8a8>
    deb8:	50800104 	addi	r2,r10,4
    debc:	5480000b 	ldhu	r18,0(r10)
    dec0:	0027883a 	mov	r19,zero
    dec4:	483dcf0e 	bge	r9,zero,d604 <__alt_data_end+0xff00d604>
    dec8:	003fdf06 	br	de48 <__alt_data_end+0xff00de48>
    decc:	54800017 	ldw	r18,0(r10)
    ded0:	52800104 	addi	r10,r10,4
    ded4:	0027883a 	mov	r19,zero
    ded8:	da802215 	stw	r10,136(sp)
    dedc:	003d5006 	br	d420 <__alt_data_end+0xff00d420>
    dee0:	50800104 	addi	r2,r10,4
    dee4:	5480000b 	ldhu	r18,0(r10)
    dee8:	0027883a 	mov	r19,zero
    deec:	483f7d0e 	bge	r9,zero,dce4 <__alt_data_end+0xff00dce4>
    def0:	003ddc06 	br	d664 <__alt_data_end+0xff00d664>
    def4:	d8c02215 	stw	r3,136(sp)
    def8:	0039883a 	mov	fp,zero
    defc:	003ddb06 	br	d66c <__alt_data_end+0xff00d66c>
    df00:	02800074 	movhi	r10,1
    df04:	5291b904 	addi	r10,r10,18148
    df08:	da802415 	stw	r10,144(sp)
    df0c:	003e8306 	br	d91c <__alt_data_end+0xff00d91c>
    df10:	d8801c17 	ldw	r2,112(sp)
    df14:	dd002117 	ldw	r20,132(sp)
    df18:	103eb926 	beq	r2,zero,da00 <__alt_data_end+0xff00da00>
    df1c:	d9002017 	ldw	r4,128(sp)
    df20:	d9801a04 	addi	r6,sp,104
    df24:	a00b883a 	mov	r5,r20
    df28:	000cb980 	call	cb98 <__sprint_r.part.0>
    df2c:	003eb406 	br	da00 <__alt_data_end+0xff00da00>
    df30:	80c00043 	ldbu	r3,1(r16)
    df34:	a5000814 	ori	r20,r20,32
    df38:	84000044 	addi	r16,r16,1
    df3c:	18c03fcc 	andi	r3,r3,255
    df40:	18c0201c 	xori	r3,r3,128
    df44:	18ffe004 	addi	r3,r3,-128
    df48:	003bb706 	br	ce28 <__alt_data_end+0xff00ce28>
    df4c:	a809883a 	mov	r4,r21
    df50:	d8c02a15 	stw	r3,168(sp)
    df54:	da002b15 	stw	r8,172(sp)
    df58:	0005e600 	call	5e60 <strlen>
    df5c:	d8c02a17 	ldw	r3,168(sp)
    df60:	1027883a 	mov	r19,r2
    df64:	df001d83 	ldbu	fp,118(sp)
    df68:	d8c02215 	stw	r3,136(sp)
    df6c:	0013883a 	mov	r9,zero
    df70:	da002b17 	ldw	r8,172(sp)
    df74:	003c4d06 	br	d0ac <__alt_data_end+0xff00d0ac>
    df78:	d9402117 	ldw	r5,132(sp)
    df7c:	d9002017 	ldw	r4,128(sp)
    df80:	d9801a04 	addi	r6,sp,104
    df84:	da402c15 	stw	r9,176(sp)
    df88:	000cb980 	call	cb98 <__sprint_r.part.0>
    df8c:	da402c17 	ldw	r9,176(sp)
    df90:	103e9a1e 	bne	r2,zero,d9fc <__alt_data_end+0xff00d9fc>
    df94:	d9401b17 	ldw	r5,108(sp)
    df98:	d8801c17 	ldw	r2,112(sp)
    df9c:	d811883a 	mov	r8,sp
    dfa0:	29000044 	addi	r4,r5,1
    dfa4:	003e4206 	br	d8b0 <__alt_data_end+0xff00d8b0>
    dfa8:	d9401b17 	ldw	r5,108(sp)
    dfac:	01000074 	movhi	r4,1
    dfb0:	2111bd04 	addi	r4,r4,18164
    dfb4:	d9002415 	stw	r4,144(sp)
    dfb8:	29400044 	addi	r5,r5,1
    dfbc:	003c6d06 	br	d174 <__alt_data_end+0xff00d174>
    dfc0:	0039883a 	mov	fp,zero
    dfc4:	00800084 	movi	r2,2
    dfc8:	10803fcc 	andi	r2,r2,255
    dfcc:	01000044 	movi	r4,1
    dfd0:	11001e26 	beq	r2,r4,e04c <___vfiprintf_internal_r+0x13a0>
    dfd4:	01000084 	movi	r4,2
    dfd8:	11001e1e 	bne	r2,r4,e054 <___vfiprintf_internal_r+0x13a8>
    dfdc:	1829883a 	mov	r20,r3
    dfe0:	003eea06 	br	db8c <__alt_data_end+0xff00db8c>
    dfe4:	a007883a 	mov	r3,r20
    dfe8:	00800044 	movi	r2,1
    dfec:	003ff606 	br	dfc8 <__alt_data_end+0xff00dfc8>
    dff0:	00800184 	movi	r2,6
    dff4:	1240012e 	bgeu	r2,r9,dffc <___vfiprintf_internal_r+0x1350>
    dff8:	1013883a 	mov	r9,r2
    dffc:	4827883a 	mov	r19,r9
    e000:	4825883a 	mov	r18,r9
    e004:	48001516 	blt	r9,zero,e05c <___vfiprintf_internal_r+0x13b0>
    e008:	05400074 	movhi	r21,1
    e00c:	d8c02215 	stw	r3,136(sp)
    e010:	ad515d04 	addi	r21,r21,17780
    e014:	003d1406 	br	d468 <__alt_data_end+0xff00d468>
    e018:	02800074 	movhi	r10,1
    e01c:	5291b904 	addi	r10,r10,18148
    e020:	da802415 	stw	r10,144(sp)
    e024:	200d883a 	mov	r6,r4
    e028:	003c9106 	br	d270 <__alt_data_end+0xff00d270>
    e02c:	5021883a 	mov	r16,r10
    e030:	0013883a 	mov	r9,zero
    e034:	003b7d06 	br	ce2c <__alt_data_end+0xff00ce2c>
    e038:	4827883a 	mov	r19,r9
    e03c:	df001d83 	ldbu	fp,118(sp)
    e040:	d8c02215 	stw	r3,136(sp)
    e044:	0013883a 	mov	r9,zero
    e048:	003c1806 	br	d0ac <__alt_data_end+0xff00d0ac>
    e04c:	1829883a 	mov	r20,r3
    e050:	003d1806 	br	d4b4 <__alt_data_end+0xff00d4b4>
    e054:	1829883a 	mov	r20,r3
    e058:	003ccd06 	br	d390 <__alt_data_end+0xff00d390>
    e05c:	0025883a 	mov	r18,zero
    e060:	003fe906 	br	e008 <__alt_data_end+0xff00e008>
    e064:	d8802217 	ldw	r2,136(sp)
    e068:	80c00043 	ldbu	r3,1(r16)
    e06c:	5021883a 	mov	r16,r10
    e070:	12400017 	ldw	r9,0(r2)
    e074:	10800104 	addi	r2,r2,4
    e078:	d8802215 	stw	r2,136(sp)
    e07c:	483faf0e 	bge	r9,zero,df3c <__alt_data_end+0xff00df3c>
    e080:	18c03fcc 	andi	r3,r3,255
    e084:	18c0201c 	xori	r3,r3,128
    e088:	027fffc4 	movi	r9,-1
    e08c:	18ffe004 	addi	r3,r3,-128
    e090:	003b6506 	br	ce28 <__alt_data_end+0xff00ce28>
    e094:	d9c01d85 	stb	r7,118(sp)
    e098:	003ca006 	br	d31c <__alt_data_end+0xff00d31c>
    e09c:	d9c01d85 	stb	r7,118(sp)
    e0a0:	003cad06 	br	d358 <__alt_data_end+0xff00d358>
    e0a4:	d9c01d85 	stb	r7,118(sp)
    e0a8:	003d7d06 	br	d6a0 <__alt_data_end+0xff00d6a0>
    e0ac:	d9c01d85 	stb	r7,118(sp)
    e0b0:	003d5f06 	br	d630 <__alt_data_end+0xff00d630>
    e0b4:	a080004c 	andi	r2,r20,1
    e0b8:	0039883a 	mov	fp,zero
    e0bc:	10000526 	beq	r2,zero,e0d4 <___vfiprintf_internal_r+0x1428>
    e0c0:	00800c04 	movi	r2,48
    e0c4:	d88019c5 	stb	r2,103(sp)
    e0c8:	dcc02717 	ldw	r19,156(sp)
    e0cc:	dd4019c4 	addi	r21,sp,103
    e0d0:	003bf606 	br	d0ac <__alt_data_end+0xff00d0ac>
    e0d4:	0027883a 	mov	r19,zero
    e0d8:	dd401a04 	addi	r21,sp,104
    e0dc:	003bf306 	br	d0ac <__alt_data_end+0xff00d0ac>
    e0e0:	d9c01d85 	stb	r7,118(sp)
    e0e4:	003dc806 	br	d808 <__alt_data_end+0xff00d808>
    e0e8:	d9c01d85 	stb	r7,118(sp)
    e0ec:	003d3a06 	br	d5d8 <__alt_data_end+0xff00d5d8>
    e0f0:	d9c01d85 	stb	r7,118(sp)
    e0f4:	003d2a06 	br	d5a0 <__alt_data_end+0xff00d5a0>
    e0f8:	d9c01d85 	stb	r7,118(sp)
    e0fc:	003cde06 	br	d478 <__alt_data_end+0xff00d478>
    e100:	d9c01d85 	stb	r7,118(sp)
    e104:	003cbc06 	br	d3f8 <__alt_data_end+0xff00d3f8>

0000e108 <__vfiprintf_internal>:
    e108:	00800074 	movhi	r2,1
    e10c:	1098ba04 	addi	r2,r2,25320
    e110:	300f883a 	mov	r7,r6
    e114:	280d883a 	mov	r6,r5
    e118:	200b883a 	mov	r5,r4
    e11c:	11000017 	ldw	r4,0(r2)
    e120:	000ccac1 	jmpi	ccac <___vfiprintf_internal_r>

0000e124 <__sbprintf>:
    e124:	2880030b 	ldhu	r2,12(r5)
    e128:	2ac01917 	ldw	r11,100(r5)
    e12c:	2a80038b 	ldhu	r10,14(r5)
    e130:	2a400717 	ldw	r9,28(r5)
    e134:	2a000917 	ldw	r8,36(r5)
    e138:	defee204 	addi	sp,sp,-1144
    e13c:	00c10004 	movi	r3,1024
    e140:	dc011a15 	stw	r16,1128(sp)
    e144:	10bfff4c 	andi	r2,r2,65533
    e148:	2821883a 	mov	r16,r5
    e14c:	d8cb883a 	add	r5,sp,r3
    e150:	dc811c15 	stw	r18,1136(sp)
    e154:	dc411b15 	stw	r17,1132(sp)
    e158:	dfc11d15 	stw	ra,1140(sp)
    e15c:	2025883a 	mov	r18,r4
    e160:	d881030d 	sth	r2,1036(sp)
    e164:	dac11915 	stw	r11,1124(sp)
    e168:	da81038d 	sth	r10,1038(sp)
    e16c:	da410715 	stw	r9,1052(sp)
    e170:	da010915 	stw	r8,1060(sp)
    e174:	dec10015 	stw	sp,1024(sp)
    e178:	dec10415 	stw	sp,1040(sp)
    e17c:	d8c10215 	stw	r3,1032(sp)
    e180:	d8c10515 	stw	r3,1044(sp)
    e184:	d8010615 	stw	zero,1048(sp)
    e188:	000ccac0 	call	ccac <___vfiprintf_internal_r>
    e18c:	1023883a 	mov	r17,r2
    e190:	10000416 	blt	r2,zero,e1a4 <__sbprintf+0x80>
    e194:	d9410004 	addi	r5,sp,1024
    e198:	9009883a 	mov	r4,r18
    e19c:	0009dc00 	call	9dc0 <_fflush_r>
    e1a0:	10000d1e 	bne	r2,zero,e1d8 <__sbprintf+0xb4>
    e1a4:	d881030b 	ldhu	r2,1036(sp)
    e1a8:	1080100c 	andi	r2,r2,64
    e1ac:	10000326 	beq	r2,zero,e1bc <__sbprintf+0x98>
    e1b0:	8080030b 	ldhu	r2,12(r16)
    e1b4:	10801014 	ori	r2,r2,64
    e1b8:	8080030d 	sth	r2,12(r16)
    e1bc:	8805883a 	mov	r2,r17
    e1c0:	dfc11d17 	ldw	ra,1140(sp)
    e1c4:	dc811c17 	ldw	r18,1136(sp)
    e1c8:	dc411b17 	ldw	r17,1132(sp)
    e1cc:	dc011a17 	ldw	r16,1128(sp)
    e1d0:	dec11e04 	addi	sp,sp,1144
    e1d4:	f800283a 	ret
    e1d8:	047fffc4 	movi	r17,-1
    e1dc:	003ff106 	br	e1a4 <__alt_data_end+0xff00e1a4>

0000e1e0 <_write_r>:
    e1e0:	defffd04 	addi	sp,sp,-12
    e1e4:	2805883a 	mov	r2,r5
    e1e8:	dc000015 	stw	r16,0(sp)
    e1ec:	04000074 	movhi	r16,1
    e1f0:	dc400115 	stw	r17,4(sp)
    e1f4:	300b883a 	mov	r5,r6
    e1f8:	841fe204 	addi	r16,r16,32648
    e1fc:	2023883a 	mov	r17,r4
    e200:	380d883a 	mov	r6,r7
    e204:	1009883a 	mov	r4,r2
    e208:	dfc00215 	stw	ra,8(sp)
    e20c:	80000015 	stw	zero,0(r16)
    e210:	0011bd80 	call	11bd8 <write>
    e214:	00ffffc4 	movi	r3,-1
    e218:	10c00526 	beq	r2,r3,e230 <_write_r+0x50>
    e21c:	dfc00217 	ldw	ra,8(sp)
    e220:	dc400117 	ldw	r17,4(sp)
    e224:	dc000017 	ldw	r16,0(sp)
    e228:	dec00304 	addi	sp,sp,12
    e22c:	f800283a 	ret
    e230:	80c00017 	ldw	r3,0(r16)
    e234:	183ff926 	beq	r3,zero,e21c <__alt_data_end+0xff00e21c>
    e238:	88c00015 	stw	r3,0(r17)
    e23c:	003ff706 	br	e21c <__alt_data_end+0xff00e21c>

0000e240 <_close_r>:
    e240:	defffd04 	addi	sp,sp,-12
    e244:	dc000015 	stw	r16,0(sp)
    e248:	04000074 	movhi	r16,1
    e24c:	dc400115 	stw	r17,4(sp)
    e250:	841fe204 	addi	r16,r16,32648
    e254:	2023883a 	mov	r17,r4
    e258:	2809883a 	mov	r4,r5
    e25c:	dfc00215 	stw	ra,8(sp)
    e260:	80000015 	stw	zero,0(r16)
    e264:	00112740 	call	11274 <close>
    e268:	00ffffc4 	movi	r3,-1
    e26c:	10c00526 	beq	r2,r3,e284 <_close_r+0x44>
    e270:	dfc00217 	ldw	ra,8(sp)
    e274:	dc400117 	ldw	r17,4(sp)
    e278:	dc000017 	ldw	r16,0(sp)
    e27c:	dec00304 	addi	sp,sp,12
    e280:	f800283a 	ret
    e284:	80c00017 	ldw	r3,0(r16)
    e288:	183ff926 	beq	r3,zero,e270 <__alt_data_end+0xff00e270>
    e28c:	88c00015 	stw	r3,0(r17)
    e290:	003ff706 	br	e270 <__alt_data_end+0xff00e270>

0000e294 <_calloc_r>:
    e294:	298b383a 	mul	r5,r5,r6
    e298:	defffe04 	addi	sp,sp,-8
    e29c:	dfc00115 	stw	ra,4(sp)
    e2a0:	dc000015 	stw	r16,0(sp)
    e2a4:	00054c00 	call	54c0 <_malloc_r>
    e2a8:	10002926 	beq	r2,zero,e350 <_calloc_r+0xbc>
    e2ac:	11bfff17 	ldw	r6,-4(r2)
    e2b0:	1021883a 	mov	r16,r2
    e2b4:	00bfff04 	movi	r2,-4
    e2b8:	308c703a 	and	r6,r6,r2
    e2bc:	00c00904 	movi	r3,36
    e2c0:	308d883a 	add	r6,r6,r2
    e2c4:	19801636 	bltu	r3,r6,e320 <_calloc_r+0x8c>
    e2c8:	008004c4 	movi	r2,19
    e2cc:	11800b2e 	bgeu	r2,r6,e2fc <_calloc_r+0x68>
    e2d0:	80000015 	stw	zero,0(r16)
    e2d4:	80000115 	stw	zero,4(r16)
    e2d8:	008006c4 	movi	r2,27
    e2dc:	11801a2e 	bgeu	r2,r6,e348 <_calloc_r+0xb4>
    e2e0:	80000215 	stw	zero,8(r16)
    e2e4:	80000315 	stw	zero,12(r16)
    e2e8:	30c0151e 	bne	r6,r3,e340 <_calloc_r+0xac>
    e2ec:	80000415 	stw	zero,16(r16)
    e2f0:	80800604 	addi	r2,r16,24
    e2f4:	80000515 	stw	zero,20(r16)
    e2f8:	00000106 	br	e300 <_calloc_r+0x6c>
    e2fc:	8005883a 	mov	r2,r16
    e300:	10000015 	stw	zero,0(r2)
    e304:	10000115 	stw	zero,4(r2)
    e308:	10000215 	stw	zero,8(r2)
    e30c:	8005883a 	mov	r2,r16
    e310:	dfc00117 	ldw	ra,4(sp)
    e314:	dc000017 	ldw	r16,0(sp)
    e318:	dec00204 	addi	sp,sp,8
    e31c:	f800283a 	ret
    e320:	000b883a 	mov	r5,zero
    e324:	8009883a 	mov	r4,r16
    e328:	000b2840 	call	b284 <memset>
    e32c:	8005883a 	mov	r2,r16
    e330:	dfc00117 	ldw	ra,4(sp)
    e334:	dc000017 	ldw	r16,0(sp)
    e338:	dec00204 	addi	sp,sp,8
    e33c:	f800283a 	ret
    e340:	80800404 	addi	r2,r16,16
    e344:	003fee06 	br	e300 <__alt_data_end+0xff00e300>
    e348:	80800204 	addi	r2,r16,8
    e34c:	003fec06 	br	e300 <__alt_data_end+0xff00e300>
    e350:	0005883a 	mov	r2,zero
    e354:	003fee06 	br	e310 <__alt_data_end+0xff00e310>

0000e358 <_fclose_r>:
    e358:	28003926 	beq	r5,zero,e440 <_fclose_r+0xe8>
    e35c:	defffc04 	addi	sp,sp,-16
    e360:	dc400115 	stw	r17,4(sp)
    e364:	dc000015 	stw	r16,0(sp)
    e368:	dfc00315 	stw	ra,12(sp)
    e36c:	dc800215 	stw	r18,8(sp)
    e370:	2023883a 	mov	r17,r4
    e374:	2821883a 	mov	r16,r5
    e378:	20000226 	beq	r4,zero,e384 <_fclose_r+0x2c>
    e37c:	20800e17 	ldw	r2,56(r4)
    e380:	10002726 	beq	r2,zero,e420 <_fclose_r+0xc8>
    e384:	8080030f 	ldh	r2,12(r16)
    e388:	1000071e 	bne	r2,zero,e3a8 <_fclose_r+0x50>
    e38c:	0005883a 	mov	r2,zero
    e390:	dfc00317 	ldw	ra,12(sp)
    e394:	dc800217 	ldw	r18,8(sp)
    e398:	dc400117 	ldw	r17,4(sp)
    e39c:	dc000017 	ldw	r16,0(sp)
    e3a0:	dec00404 	addi	sp,sp,16
    e3a4:	f800283a 	ret
    e3a8:	800b883a 	mov	r5,r16
    e3ac:	8809883a 	mov	r4,r17
    e3b0:	0009ba40 	call	9ba4 <__sflush_r>
    e3b4:	1025883a 	mov	r18,r2
    e3b8:	80800b17 	ldw	r2,44(r16)
    e3bc:	10000426 	beq	r2,zero,e3d0 <_fclose_r+0x78>
    e3c0:	81400717 	ldw	r5,28(r16)
    e3c4:	8809883a 	mov	r4,r17
    e3c8:	103ee83a 	callr	r2
    e3cc:	10001616 	blt	r2,zero,e428 <_fclose_r+0xd0>
    e3d0:	8080030b 	ldhu	r2,12(r16)
    e3d4:	1080200c 	andi	r2,r2,128
    e3d8:	1000151e 	bne	r2,zero,e430 <_fclose_r+0xd8>
    e3dc:	81400c17 	ldw	r5,48(r16)
    e3e0:	28000526 	beq	r5,zero,e3f8 <_fclose_r+0xa0>
    e3e4:	80801004 	addi	r2,r16,64
    e3e8:	28800226 	beq	r5,r2,e3f4 <_fclose_r+0x9c>
    e3ec:	8809883a 	mov	r4,r17
    e3f0:	000a3100 	call	a310 <_free_r>
    e3f4:	80000c15 	stw	zero,48(r16)
    e3f8:	81401117 	ldw	r5,68(r16)
    e3fc:	28000326 	beq	r5,zero,e40c <_fclose_r+0xb4>
    e400:	8809883a 	mov	r4,r17
    e404:	000a3100 	call	a310 <_free_r>
    e408:	80001115 	stw	zero,68(r16)
    e40c:	000a1ac0 	call	a1ac <__sfp_lock_acquire>
    e410:	8000030d 	sth	zero,12(r16)
    e414:	000a1b00 	call	a1b0 <__sfp_lock_release>
    e418:	9005883a 	mov	r2,r18
    e41c:	003fdc06 	br	e390 <__alt_data_end+0xff00e390>
    e420:	000a19c0 	call	a19c <__sinit>
    e424:	003fd706 	br	e384 <__alt_data_end+0xff00e384>
    e428:	04bfffc4 	movi	r18,-1
    e42c:	003fe806 	br	e3d0 <__alt_data_end+0xff00e3d0>
    e430:	81400417 	ldw	r5,16(r16)
    e434:	8809883a 	mov	r4,r17
    e438:	000a3100 	call	a310 <_free_r>
    e43c:	003fe706 	br	e3dc <__alt_data_end+0xff00e3dc>
    e440:	0005883a 	mov	r2,zero
    e444:	f800283a 	ret

0000e448 <fclose>:
    e448:	00800074 	movhi	r2,1
    e44c:	1098ba04 	addi	r2,r2,25320
    e450:	200b883a 	mov	r5,r4
    e454:	11000017 	ldw	r4,0(r2)
    e458:	000e3581 	jmpi	e358 <_fclose_r>

0000e45c <__fputwc>:
    e45c:	defff804 	addi	sp,sp,-32
    e460:	dcc00415 	stw	r19,16(sp)
    e464:	dc800315 	stw	r18,12(sp)
    e468:	dc000115 	stw	r16,4(sp)
    e46c:	dfc00715 	stw	ra,28(sp)
    e470:	dd400615 	stw	r21,24(sp)
    e474:	dd000515 	stw	r20,20(sp)
    e478:	dc400215 	stw	r17,8(sp)
    e47c:	2027883a 	mov	r19,r4
    e480:	2825883a 	mov	r18,r5
    e484:	3021883a 	mov	r16,r6
    e488:	000acec0 	call	acec <__locale_mb_cur_max>
    e48c:	00c00044 	movi	r3,1
    e490:	10c03e26 	beq	r2,r3,e58c <__fputwc+0x130>
    e494:	81c01704 	addi	r7,r16,92
    e498:	900d883a 	mov	r6,r18
    e49c:	d80b883a 	mov	r5,sp
    e4a0:	9809883a 	mov	r4,r19
    e4a4:	000e92c0 	call	e92c <_wcrtomb_r>
    e4a8:	1029883a 	mov	r20,r2
    e4ac:	00bfffc4 	movi	r2,-1
    e4b0:	a0802026 	beq	r20,r2,e534 <__fputwc+0xd8>
    e4b4:	d9400003 	ldbu	r5,0(sp)
    e4b8:	a0001c26 	beq	r20,zero,e52c <__fputwc+0xd0>
    e4bc:	0023883a 	mov	r17,zero
    e4c0:	05400284 	movi	r21,10
    e4c4:	00000906 	br	e4ec <__fputwc+0x90>
    e4c8:	80800017 	ldw	r2,0(r16)
    e4cc:	11400005 	stb	r5,0(r2)
    e4d0:	80c00017 	ldw	r3,0(r16)
    e4d4:	18c00044 	addi	r3,r3,1
    e4d8:	80c00015 	stw	r3,0(r16)
    e4dc:	8c400044 	addi	r17,r17,1
    e4e0:	dc45883a 	add	r2,sp,r17
    e4e4:	8d00112e 	bgeu	r17,r20,e52c <__fputwc+0xd0>
    e4e8:	11400003 	ldbu	r5,0(r2)
    e4ec:	80c00217 	ldw	r3,8(r16)
    e4f0:	18ffffc4 	addi	r3,r3,-1
    e4f4:	80c00215 	stw	r3,8(r16)
    e4f8:	183ff30e 	bge	r3,zero,e4c8 <__alt_data_end+0xff00e4c8>
    e4fc:	80800617 	ldw	r2,24(r16)
    e500:	18801916 	blt	r3,r2,e568 <__fputwc+0x10c>
    e504:	80800017 	ldw	r2,0(r16)
    e508:	11400005 	stb	r5,0(r2)
    e50c:	80800017 	ldw	r2,0(r16)
    e510:	10c00003 	ldbu	r3,0(r2)
    e514:	10800044 	addi	r2,r2,1
    e518:	1d402326 	beq	r3,r21,e5a8 <__fputwc+0x14c>
    e51c:	80800015 	stw	r2,0(r16)
    e520:	8c400044 	addi	r17,r17,1
    e524:	dc45883a 	add	r2,sp,r17
    e528:	8d3fef36 	bltu	r17,r20,e4e8 <__alt_data_end+0xff00e4e8>
    e52c:	9005883a 	mov	r2,r18
    e530:	00000406 	br	e544 <__fputwc+0xe8>
    e534:	80c0030b 	ldhu	r3,12(r16)
    e538:	a005883a 	mov	r2,r20
    e53c:	18c01014 	ori	r3,r3,64
    e540:	80c0030d 	sth	r3,12(r16)
    e544:	dfc00717 	ldw	ra,28(sp)
    e548:	dd400617 	ldw	r21,24(sp)
    e54c:	dd000517 	ldw	r20,20(sp)
    e550:	dcc00417 	ldw	r19,16(sp)
    e554:	dc800317 	ldw	r18,12(sp)
    e558:	dc400217 	ldw	r17,8(sp)
    e55c:	dc000117 	ldw	r16,4(sp)
    e560:	dec00804 	addi	sp,sp,32
    e564:	f800283a 	ret
    e568:	800d883a 	mov	r6,r16
    e56c:	29403fcc 	andi	r5,r5,255
    e570:	9809883a 	mov	r4,r19
    e574:	000e7d40 	call	e7d4 <__swbuf_r>
    e578:	10bfffe0 	cmpeqi	r2,r2,-1
    e57c:	10803fcc 	andi	r2,r2,255
    e580:	103fd626 	beq	r2,zero,e4dc <__alt_data_end+0xff00e4dc>
    e584:	00bfffc4 	movi	r2,-1
    e588:	003fee06 	br	e544 <__alt_data_end+0xff00e544>
    e58c:	90ffffc4 	addi	r3,r18,-1
    e590:	01003f84 	movi	r4,254
    e594:	20ffbf36 	bltu	r4,r3,e494 <__alt_data_end+0xff00e494>
    e598:	900b883a 	mov	r5,r18
    e59c:	dc800005 	stb	r18,0(sp)
    e5a0:	1029883a 	mov	r20,r2
    e5a4:	003fc506 	br	e4bc <__alt_data_end+0xff00e4bc>
    e5a8:	800d883a 	mov	r6,r16
    e5ac:	a80b883a 	mov	r5,r21
    e5b0:	9809883a 	mov	r4,r19
    e5b4:	000e7d40 	call	e7d4 <__swbuf_r>
    e5b8:	10bfffe0 	cmpeqi	r2,r2,-1
    e5bc:	003fef06 	br	e57c <__alt_data_end+0xff00e57c>

0000e5c0 <_fputwc_r>:
    e5c0:	3080030b 	ldhu	r2,12(r6)
    e5c4:	10c8000c 	andi	r3,r2,8192
    e5c8:	1800051e 	bne	r3,zero,e5e0 <_fputwc_r+0x20>
    e5cc:	30c01917 	ldw	r3,100(r6)
    e5d0:	10880014 	ori	r2,r2,8192
    e5d4:	3080030d 	sth	r2,12(r6)
    e5d8:	18880014 	ori	r2,r3,8192
    e5dc:	30801915 	stw	r2,100(r6)
    e5e0:	000e45c1 	jmpi	e45c <__fputwc>

0000e5e4 <fputwc>:
    e5e4:	00800074 	movhi	r2,1
    e5e8:	defffc04 	addi	sp,sp,-16
    e5ec:	1098ba04 	addi	r2,r2,25320
    e5f0:	dc000115 	stw	r16,4(sp)
    e5f4:	14000017 	ldw	r16,0(r2)
    e5f8:	dc400215 	stw	r17,8(sp)
    e5fc:	dfc00315 	stw	ra,12(sp)
    e600:	2023883a 	mov	r17,r4
    e604:	80000226 	beq	r16,zero,e610 <fputwc+0x2c>
    e608:	80800e17 	ldw	r2,56(r16)
    e60c:	10001026 	beq	r2,zero,e650 <fputwc+0x6c>
    e610:	2880030b 	ldhu	r2,12(r5)
    e614:	10c8000c 	andi	r3,r2,8192
    e618:	1800051e 	bne	r3,zero,e630 <fputwc+0x4c>
    e61c:	28c01917 	ldw	r3,100(r5)
    e620:	10880014 	ori	r2,r2,8192
    e624:	2880030d 	sth	r2,12(r5)
    e628:	18880014 	ori	r2,r3,8192
    e62c:	28801915 	stw	r2,100(r5)
    e630:	280d883a 	mov	r6,r5
    e634:	8009883a 	mov	r4,r16
    e638:	880b883a 	mov	r5,r17
    e63c:	dfc00317 	ldw	ra,12(sp)
    e640:	dc400217 	ldw	r17,8(sp)
    e644:	dc000117 	ldw	r16,4(sp)
    e648:	dec00404 	addi	sp,sp,16
    e64c:	000e45c1 	jmpi	e45c <__fputwc>
    e650:	8009883a 	mov	r4,r16
    e654:	d9400015 	stw	r5,0(sp)
    e658:	000a19c0 	call	a19c <__sinit>
    e65c:	d9400017 	ldw	r5,0(sp)
    e660:	003feb06 	br	e610 <__alt_data_end+0xff00e610>

0000e664 <_fstat_r>:
    e664:	defffd04 	addi	sp,sp,-12
    e668:	2805883a 	mov	r2,r5
    e66c:	dc000015 	stw	r16,0(sp)
    e670:	04000074 	movhi	r16,1
    e674:	dc400115 	stw	r17,4(sp)
    e678:	841fe204 	addi	r16,r16,32648
    e67c:	2023883a 	mov	r17,r4
    e680:	300b883a 	mov	r5,r6
    e684:	1009883a 	mov	r4,r2
    e688:	dfc00215 	stw	ra,8(sp)
    e68c:	80000015 	stw	zero,0(r16)
    e690:	00114240 	call	11424 <fstat>
    e694:	00ffffc4 	movi	r3,-1
    e698:	10c00526 	beq	r2,r3,e6b0 <_fstat_r+0x4c>
    e69c:	dfc00217 	ldw	ra,8(sp)
    e6a0:	dc400117 	ldw	r17,4(sp)
    e6a4:	dc000017 	ldw	r16,0(sp)
    e6a8:	dec00304 	addi	sp,sp,12
    e6ac:	f800283a 	ret
    e6b0:	80c00017 	ldw	r3,0(r16)
    e6b4:	183ff926 	beq	r3,zero,e69c <__alt_data_end+0xff00e69c>
    e6b8:	88c00015 	stw	r3,0(r17)
    e6bc:	003ff706 	br	e69c <__alt_data_end+0xff00e69c>

0000e6c0 <_isatty_r>:
    e6c0:	defffd04 	addi	sp,sp,-12
    e6c4:	dc000015 	stw	r16,0(sp)
    e6c8:	04000074 	movhi	r16,1
    e6cc:	dc400115 	stw	r17,4(sp)
    e6d0:	841fe204 	addi	r16,r16,32648
    e6d4:	2023883a 	mov	r17,r4
    e6d8:	2809883a 	mov	r4,r5
    e6dc:	dfc00215 	stw	ra,8(sp)
    e6e0:	80000015 	stw	zero,0(r16)
    e6e4:	00115100 	call	11510 <isatty>
    e6e8:	00ffffc4 	movi	r3,-1
    e6ec:	10c00526 	beq	r2,r3,e704 <_isatty_r+0x44>
    e6f0:	dfc00217 	ldw	ra,8(sp)
    e6f4:	dc400117 	ldw	r17,4(sp)
    e6f8:	dc000017 	ldw	r16,0(sp)
    e6fc:	dec00304 	addi	sp,sp,12
    e700:	f800283a 	ret
    e704:	80c00017 	ldw	r3,0(r16)
    e708:	183ff926 	beq	r3,zero,e6f0 <__alt_data_end+0xff00e6f0>
    e70c:	88c00015 	stw	r3,0(r17)
    e710:	003ff706 	br	e6f0 <__alt_data_end+0xff00e6f0>

0000e714 <_lseek_r>:
    e714:	defffd04 	addi	sp,sp,-12
    e718:	2805883a 	mov	r2,r5
    e71c:	dc000015 	stw	r16,0(sp)
    e720:	04000074 	movhi	r16,1
    e724:	dc400115 	stw	r17,4(sp)
    e728:	300b883a 	mov	r5,r6
    e72c:	841fe204 	addi	r16,r16,32648
    e730:	2023883a 	mov	r17,r4
    e734:	380d883a 	mov	r6,r7
    e738:	1009883a 	mov	r4,r2
    e73c:	dfc00215 	stw	ra,8(sp)
    e740:	80000015 	stw	zero,0(r16)
    e744:	00116dc0 	call	116dc <lseek>
    e748:	00ffffc4 	movi	r3,-1
    e74c:	10c00526 	beq	r2,r3,e764 <_lseek_r+0x50>
    e750:	dfc00217 	ldw	ra,8(sp)
    e754:	dc400117 	ldw	r17,4(sp)
    e758:	dc000017 	ldw	r16,0(sp)
    e75c:	dec00304 	addi	sp,sp,12
    e760:	f800283a 	ret
    e764:	80c00017 	ldw	r3,0(r16)
    e768:	183ff926 	beq	r3,zero,e750 <__alt_data_end+0xff00e750>
    e76c:	88c00015 	stw	r3,0(r17)
    e770:	003ff706 	br	e750 <__alt_data_end+0xff00e750>

0000e774 <_read_r>:
    e774:	defffd04 	addi	sp,sp,-12
    e778:	2805883a 	mov	r2,r5
    e77c:	dc000015 	stw	r16,0(sp)
    e780:	04000074 	movhi	r16,1
    e784:	dc400115 	stw	r17,4(sp)
    e788:	300b883a 	mov	r5,r6
    e78c:	841fe204 	addi	r16,r16,32648
    e790:	2023883a 	mov	r17,r4
    e794:	380d883a 	mov	r6,r7
    e798:	1009883a 	mov	r4,r2
    e79c:	dfc00215 	stw	ra,8(sp)
    e7a0:	80000015 	stw	zero,0(r16)
    e7a4:	00118b00 	call	118b0 <read>
    e7a8:	00ffffc4 	movi	r3,-1
    e7ac:	10c00526 	beq	r2,r3,e7c4 <_read_r+0x50>
    e7b0:	dfc00217 	ldw	ra,8(sp)
    e7b4:	dc400117 	ldw	r17,4(sp)
    e7b8:	dc000017 	ldw	r16,0(sp)
    e7bc:	dec00304 	addi	sp,sp,12
    e7c0:	f800283a 	ret
    e7c4:	80c00017 	ldw	r3,0(r16)
    e7c8:	183ff926 	beq	r3,zero,e7b0 <__alt_data_end+0xff00e7b0>
    e7cc:	88c00015 	stw	r3,0(r17)
    e7d0:	003ff706 	br	e7b0 <__alt_data_end+0xff00e7b0>

0000e7d4 <__swbuf_r>:
    e7d4:	defffb04 	addi	sp,sp,-20
    e7d8:	dcc00315 	stw	r19,12(sp)
    e7dc:	dc800215 	stw	r18,8(sp)
    e7e0:	dc000015 	stw	r16,0(sp)
    e7e4:	dfc00415 	stw	ra,16(sp)
    e7e8:	dc400115 	stw	r17,4(sp)
    e7ec:	2025883a 	mov	r18,r4
    e7f0:	2827883a 	mov	r19,r5
    e7f4:	3021883a 	mov	r16,r6
    e7f8:	20000226 	beq	r4,zero,e804 <__swbuf_r+0x30>
    e7fc:	20800e17 	ldw	r2,56(r4)
    e800:	10004226 	beq	r2,zero,e90c <__swbuf_r+0x138>
    e804:	80800617 	ldw	r2,24(r16)
    e808:	8100030b 	ldhu	r4,12(r16)
    e80c:	80800215 	stw	r2,8(r16)
    e810:	2080020c 	andi	r2,r4,8
    e814:	10003626 	beq	r2,zero,e8f0 <__swbuf_r+0x11c>
    e818:	80c00417 	ldw	r3,16(r16)
    e81c:	18003426 	beq	r3,zero,e8f0 <__swbuf_r+0x11c>
    e820:	2088000c 	andi	r2,r4,8192
    e824:	9c403fcc 	andi	r17,r19,255
    e828:	10001a26 	beq	r2,zero,e894 <__swbuf_r+0xc0>
    e82c:	80800017 	ldw	r2,0(r16)
    e830:	81000517 	ldw	r4,20(r16)
    e834:	10c7c83a 	sub	r3,r2,r3
    e838:	1900200e 	bge	r3,r4,e8bc <__swbuf_r+0xe8>
    e83c:	18c00044 	addi	r3,r3,1
    e840:	81000217 	ldw	r4,8(r16)
    e844:	11400044 	addi	r5,r2,1
    e848:	81400015 	stw	r5,0(r16)
    e84c:	213fffc4 	addi	r4,r4,-1
    e850:	81000215 	stw	r4,8(r16)
    e854:	14c00005 	stb	r19,0(r2)
    e858:	80800517 	ldw	r2,20(r16)
    e85c:	10c01e26 	beq	r2,r3,e8d8 <__swbuf_r+0x104>
    e860:	8080030b 	ldhu	r2,12(r16)
    e864:	1080004c 	andi	r2,r2,1
    e868:	10000226 	beq	r2,zero,e874 <__swbuf_r+0xa0>
    e86c:	00800284 	movi	r2,10
    e870:	88801926 	beq	r17,r2,e8d8 <__swbuf_r+0x104>
    e874:	8805883a 	mov	r2,r17
    e878:	dfc00417 	ldw	ra,16(sp)
    e87c:	dcc00317 	ldw	r19,12(sp)
    e880:	dc800217 	ldw	r18,8(sp)
    e884:	dc400117 	ldw	r17,4(sp)
    e888:	dc000017 	ldw	r16,0(sp)
    e88c:	dec00504 	addi	sp,sp,20
    e890:	f800283a 	ret
    e894:	81401917 	ldw	r5,100(r16)
    e898:	00b7ffc4 	movi	r2,-8193
    e89c:	21080014 	ori	r4,r4,8192
    e8a0:	2884703a 	and	r2,r5,r2
    e8a4:	80801915 	stw	r2,100(r16)
    e8a8:	80800017 	ldw	r2,0(r16)
    e8ac:	8100030d 	sth	r4,12(r16)
    e8b0:	81000517 	ldw	r4,20(r16)
    e8b4:	10c7c83a 	sub	r3,r2,r3
    e8b8:	193fe016 	blt	r3,r4,e83c <__alt_data_end+0xff00e83c>
    e8bc:	800b883a 	mov	r5,r16
    e8c0:	9009883a 	mov	r4,r18
    e8c4:	0009dc00 	call	9dc0 <_fflush_r>
    e8c8:	1000071e 	bne	r2,zero,e8e8 <__swbuf_r+0x114>
    e8cc:	80800017 	ldw	r2,0(r16)
    e8d0:	00c00044 	movi	r3,1
    e8d4:	003fda06 	br	e840 <__alt_data_end+0xff00e840>
    e8d8:	800b883a 	mov	r5,r16
    e8dc:	9009883a 	mov	r4,r18
    e8e0:	0009dc00 	call	9dc0 <_fflush_r>
    e8e4:	103fe326 	beq	r2,zero,e874 <__alt_data_end+0xff00e874>
    e8e8:	00bfffc4 	movi	r2,-1
    e8ec:	003fe206 	br	e878 <__alt_data_end+0xff00e878>
    e8f0:	800b883a 	mov	r5,r16
    e8f4:	9009883a 	mov	r4,r18
    e8f8:	00081c80 	call	81c8 <__swsetup_r>
    e8fc:	103ffa1e 	bne	r2,zero,e8e8 <__alt_data_end+0xff00e8e8>
    e900:	8100030b 	ldhu	r4,12(r16)
    e904:	80c00417 	ldw	r3,16(r16)
    e908:	003fc506 	br	e820 <__alt_data_end+0xff00e820>
    e90c:	000a19c0 	call	a19c <__sinit>
    e910:	003fbc06 	br	e804 <__alt_data_end+0xff00e804>

0000e914 <__swbuf>:
    e914:	00800074 	movhi	r2,1
    e918:	1098ba04 	addi	r2,r2,25320
    e91c:	280d883a 	mov	r6,r5
    e920:	200b883a 	mov	r5,r4
    e924:	11000017 	ldw	r4,0(r2)
    e928:	000e7d41 	jmpi	e7d4 <__swbuf_r>

0000e92c <_wcrtomb_r>:
    e92c:	defff604 	addi	sp,sp,-40
    e930:	00800074 	movhi	r2,1
    e934:	dc800815 	stw	r18,32(sp)
    e938:	dc400715 	stw	r17,28(sp)
    e93c:	dc000615 	stw	r16,24(sp)
    e940:	1098bc04 	addi	r2,r2,25328
    e944:	dfc00915 	stw	ra,36(sp)
    e948:	2021883a 	mov	r16,r4
    e94c:	3823883a 	mov	r17,r7
    e950:	14800017 	ldw	r18,0(r2)
    e954:	28001426 	beq	r5,zero,e9a8 <_wcrtomb_r+0x7c>
    e958:	d9400415 	stw	r5,16(sp)
    e95c:	d9800515 	stw	r6,20(sp)
    e960:	000ace00 	call	ace0 <__locale_charset>
    e964:	d9800517 	ldw	r6,20(sp)
    e968:	d9400417 	ldw	r5,16(sp)
    e96c:	100f883a 	mov	r7,r2
    e970:	dc400015 	stw	r17,0(sp)
    e974:	8009883a 	mov	r4,r16
    e978:	903ee83a 	callr	r18
    e97c:	00ffffc4 	movi	r3,-1
    e980:	10c0031e 	bne	r2,r3,e990 <_wcrtomb_r+0x64>
    e984:	88000015 	stw	zero,0(r17)
    e988:	00c02284 	movi	r3,138
    e98c:	80c00015 	stw	r3,0(r16)
    e990:	dfc00917 	ldw	ra,36(sp)
    e994:	dc800817 	ldw	r18,32(sp)
    e998:	dc400717 	ldw	r17,28(sp)
    e99c:	dc000617 	ldw	r16,24(sp)
    e9a0:	dec00a04 	addi	sp,sp,40
    e9a4:	f800283a 	ret
    e9a8:	000ace00 	call	ace0 <__locale_charset>
    e9ac:	100f883a 	mov	r7,r2
    e9b0:	dc400015 	stw	r17,0(sp)
    e9b4:	000d883a 	mov	r6,zero
    e9b8:	d9400104 	addi	r5,sp,4
    e9bc:	8009883a 	mov	r4,r16
    e9c0:	903ee83a 	callr	r18
    e9c4:	003fed06 	br	e97c <__alt_data_end+0xff00e97c>

0000e9c8 <wcrtomb>:
    e9c8:	defff604 	addi	sp,sp,-40
    e9cc:	00800074 	movhi	r2,1
    e9d0:	dc800615 	stw	r18,24(sp)
    e9d4:	dc400515 	stw	r17,20(sp)
    e9d8:	1098ba04 	addi	r2,r2,25320
    e9dc:	dfc00915 	stw	ra,36(sp)
    e9e0:	dd000815 	stw	r20,32(sp)
    e9e4:	dcc00715 	stw	r19,28(sp)
    e9e8:	dc000415 	stw	r16,16(sp)
    e9ec:	3025883a 	mov	r18,r6
    e9f0:	14400017 	ldw	r17,0(r2)
    e9f4:	20001926 	beq	r4,zero,ea5c <wcrtomb+0x94>
    e9f8:	00800074 	movhi	r2,1
    e9fc:	1098bc04 	addi	r2,r2,25328
    ea00:	15000017 	ldw	r20,0(r2)
    ea04:	2021883a 	mov	r16,r4
    ea08:	2827883a 	mov	r19,r5
    ea0c:	000ace00 	call	ace0 <__locale_charset>
    ea10:	100f883a 	mov	r7,r2
    ea14:	dc800015 	stw	r18,0(sp)
    ea18:	980d883a 	mov	r6,r19
    ea1c:	800b883a 	mov	r5,r16
    ea20:	8809883a 	mov	r4,r17
    ea24:	a03ee83a 	callr	r20
    ea28:	00ffffc4 	movi	r3,-1
    ea2c:	10c0031e 	bne	r2,r3,ea3c <wcrtomb+0x74>
    ea30:	90000015 	stw	zero,0(r18)
    ea34:	00c02284 	movi	r3,138
    ea38:	88c00015 	stw	r3,0(r17)
    ea3c:	dfc00917 	ldw	ra,36(sp)
    ea40:	dd000817 	ldw	r20,32(sp)
    ea44:	dcc00717 	ldw	r19,28(sp)
    ea48:	dc800617 	ldw	r18,24(sp)
    ea4c:	dc400517 	ldw	r17,20(sp)
    ea50:	dc000417 	ldw	r16,16(sp)
    ea54:	dec00a04 	addi	sp,sp,40
    ea58:	f800283a 	ret
    ea5c:	00800074 	movhi	r2,1
    ea60:	1098bc04 	addi	r2,r2,25328
    ea64:	14000017 	ldw	r16,0(r2)
    ea68:	000ace00 	call	ace0 <__locale_charset>
    ea6c:	100f883a 	mov	r7,r2
    ea70:	dc800015 	stw	r18,0(sp)
    ea74:	000d883a 	mov	r6,zero
    ea78:	d9400104 	addi	r5,sp,4
    ea7c:	8809883a 	mov	r4,r17
    ea80:	803ee83a 	callr	r16
    ea84:	003fe806 	br	ea28 <__alt_data_end+0xff00ea28>

0000ea88 <__ascii_wctomb>:
    ea88:	28000526 	beq	r5,zero,eaa0 <__ascii_wctomb+0x18>
    ea8c:	00803fc4 	movi	r2,255
    ea90:	11800536 	bltu	r2,r6,eaa8 <__ascii_wctomb+0x20>
    ea94:	29800005 	stb	r6,0(r5)
    ea98:	00800044 	movi	r2,1
    ea9c:	f800283a 	ret
    eaa0:	0005883a 	mov	r2,zero
    eaa4:	f800283a 	ret
    eaa8:	00802284 	movi	r2,138
    eaac:	20800015 	stw	r2,0(r4)
    eab0:	00bfffc4 	movi	r2,-1
    eab4:	f800283a 	ret

0000eab8 <_wctomb_r>:
    eab8:	00800074 	movhi	r2,1
    eabc:	defff904 	addi	sp,sp,-28
    eac0:	1098bc04 	addi	r2,r2,25328
    eac4:	dfc00615 	stw	ra,24(sp)
    eac8:	dc400515 	stw	r17,20(sp)
    eacc:	dc000415 	stw	r16,16(sp)
    ead0:	3823883a 	mov	r17,r7
    ead4:	14000017 	ldw	r16,0(r2)
    ead8:	d9000115 	stw	r4,4(sp)
    eadc:	d9400215 	stw	r5,8(sp)
    eae0:	d9800315 	stw	r6,12(sp)
    eae4:	000ace00 	call	ace0 <__locale_charset>
    eae8:	d9800317 	ldw	r6,12(sp)
    eaec:	d9400217 	ldw	r5,8(sp)
    eaf0:	d9000117 	ldw	r4,4(sp)
    eaf4:	100f883a 	mov	r7,r2
    eaf8:	dc400015 	stw	r17,0(sp)
    eafc:	803ee83a 	callr	r16
    eb00:	dfc00617 	ldw	ra,24(sp)
    eb04:	dc400517 	ldw	r17,20(sp)
    eb08:	dc000417 	ldw	r16,16(sp)
    eb0c:	dec00704 	addi	sp,sp,28
    eb10:	f800283a 	ret

0000eb14 <__udivdi3>:
    eb14:	defff504 	addi	sp,sp,-44
    eb18:	dcc00415 	stw	r19,16(sp)
    eb1c:	dc000115 	stw	r16,4(sp)
    eb20:	dfc00a15 	stw	ra,40(sp)
    eb24:	df000915 	stw	fp,36(sp)
    eb28:	ddc00815 	stw	r23,32(sp)
    eb2c:	dd800715 	stw	r22,28(sp)
    eb30:	dd400615 	stw	r21,24(sp)
    eb34:	dd000515 	stw	r20,20(sp)
    eb38:	dc800315 	stw	r18,12(sp)
    eb3c:	dc400215 	stw	r17,8(sp)
    eb40:	2027883a 	mov	r19,r4
    eb44:	2821883a 	mov	r16,r5
    eb48:	3800411e 	bne	r7,zero,ec50 <__udivdi3+0x13c>
    eb4c:	3023883a 	mov	r17,r6
    eb50:	2025883a 	mov	r18,r4
    eb54:	2980522e 	bgeu	r5,r6,eca0 <__udivdi3+0x18c>
    eb58:	00bfffd4 	movui	r2,65535
    eb5c:	282d883a 	mov	r22,r5
    eb60:	1180a836 	bltu	r2,r6,ee04 <__udivdi3+0x2f0>
    eb64:	00803fc4 	movi	r2,255
    eb68:	1185803a 	cmpltu	r2,r2,r6
    eb6c:	100490fa 	slli	r2,r2,3
    eb70:	3086d83a 	srl	r3,r6,r2
    eb74:	01000074 	movhi	r4,1
    eb78:	21110e84 	addi	r4,r4,17466
    eb7c:	20c7883a 	add	r3,r4,r3
    eb80:	18c00003 	ldbu	r3,0(r3)
    eb84:	1885883a 	add	r2,r3,r2
    eb88:	00c00804 	movi	r3,32
    eb8c:	1887c83a 	sub	r3,r3,r2
    eb90:	18000526 	beq	r3,zero,eba8 <__udivdi3+0x94>
    eb94:	80e0983a 	sll	r16,r16,r3
    eb98:	9884d83a 	srl	r2,r19,r2
    eb9c:	30e2983a 	sll	r17,r6,r3
    eba0:	98e4983a 	sll	r18,r19,r3
    eba4:	142cb03a 	or	r22,r2,r16
    eba8:	882ad43a 	srli	r21,r17,16
    ebac:	b009883a 	mov	r4,r22
    ebb0:	8d3fffcc 	andi	r20,r17,65535
    ebb4:	a80b883a 	mov	r5,r21
    ebb8:	0004a4c0 	call	4a4c <__umodsi3>
    ebbc:	b009883a 	mov	r4,r22
    ebc0:	a80b883a 	mov	r5,r21
    ebc4:	1027883a 	mov	r19,r2
    ebc8:	00049e80 	call	49e8 <__udivsi3>
    ebcc:	102d883a 	mov	r22,r2
    ebd0:	9826943a 	slli	r19,r19,16
    ebd4:	9004d43a 	srli	r2,r18,16
    ebd8:	a5a1383a 	mul	r16,r20,r22
    ebdc:	14c4b03a 	or	r2,r2,r19
    ebe0:	1400052e 	bgeu	r2,r16,ebf8 <__udivdi3+0xe4>
    ebe4:	1445883a 	add	r2,r2,r17
    ebe8:	b0ffffc4 	addi	r3,r22,-1
    ebec:	14400136 	bltu	r2,r17,ebf4 <__udivdi3+0xe0>
    ebf0:	14012336 	bltu	r2,r16,f080 <__udivdi3+0x56c>
    ebf4:	182d883a 	mov	r22,r3
    ebf8:	1421c83a 	sub	r16,r2,r16
    ebfc:	a80b883a 	mov	r5,r21
    ec00:	8009883a 	mov	r4,r16
    ec04:	0004a4c0 	call	4a4c <__umodsi3>
    ec08:	1027883a 	mov	r19,r2
    ec0c:	a80b883a 	mov	r5,r21
    ec10:	8009883a 	mov	r4,r16
    ec14:	00049e80 	call	49e8 <__udivsi3>
    ec18:	9826943a 	slli	r19,r19,16
    ec1c:	a0a9383a 	mul	r20,r20,r2
    ec20:	94bfffcc 	andi	r18,r18,65535
    ec24:	94e4b03a 	or	r18,r18,r19
    ec28:	9500052e 	bgeu	r18,r20,ec40 <__udivdi3+0x12c>
    ec2c:	8ca5883a 	add	r18,r17,r18
    ec30:	10ffffc4 	addi	r3,r2,-1
    ec34:	9440f136 	bltu	r18,r17,effc <__udivdi3+0x4e8>
    ec38:	9500f02e 	bgeu	r18,r20,effc <__udivdi3+0x4e8>
    ec3c:	10bfff84 	addi	r2,r2,-2
    ec40:	b00c943a 	slli	r6,r22,16
    ec44:	0007883a 	mov	r3,zero
    ec48:	3084b03a 	or	r2,r6,r2
    ec4c:	00005906 	br	edb4 <__udivdi3+0x2a0>
    ec50:	29c05636 	bltu	r5,r7,edac <__udivdi3+0x298>
    ec54:	00bfffd4 	movui	r2,65535
    ec58:	11c0622e 	bgeu	r2,r7,ede4 <__udivdi3+0x2d0>
    ec5c:	00804034 	movhi	r2,256
    ec60:	10bfffc4 	addi	r2,r2,-1
    ec64:	11c0ee36 	bltu	r2,r7,f020 <__udivdi3+0x50c>
    ec68:	00800404 	movi	r2,16
    ec6c:	3886d83a 	srl	r3,r7,r2
    ec70:	01000074 	movhi	r4,1
    ec74:	21110e84 	addi	r4,r4,17466
    ec78:	20c7883a 	add	r3,r4,r3
    ec7c:	18c00003 	ldbu	r3,0(r3)
    ec80:	05400804 	movi	r21,32
    ec84:	1885883a 	add	r2,r3,r2
    ec88:	a8abc83a 	sub	r21,r21,r2
    ec8c:	a800621e 	bne	r21,zero,ee18 <__udivdi3+0x304>
    ec90:	3c00e936 	bltu	r7,r16,f038 <__udivdi3+0x524>
    ec94:	9985403a 	cmpgeu	r2,r19,r6
    ec98:	0007883a 	mov	r3,zero
    ec9c:	00004506 	br	edb4 <__udivdi3+0x2a0>
    eca0:	3000041e 	bne	r6,zero,ecb4 <__udivdi3+0x1a0>
    eca4:	000b883a 	mov	r5,zero
    eca8:	01000044 	movi	r4,1
    ecac:	00049e80 	call	49e8 <__udivsi3>
    ecb0:	1023883a 	mov	r17,r2
    ecb4:	00bfffd4 	movui	r2,65535
    ecb8:	14404e2e 	bgeu	r2,r17,edf4 <__udivdi3+0x2e0>
    ecbc:	00804034 	movhi	r2,256
    ecc0:	10bfffc4 	addi	r2,r2,-1
    ecc4:	1440d836 	bltu	r2,r17,f028 <__udivdi3+0x514>
    ecc8:	00800404 	movi	r2,16
    eccc:	8886d83a 	srl	r3,r17,r2
    ecd0:	01000074 	movhi	r4,1
    ecd4:	21110e84 	addi	r4,r4,17466
    ecd8:	20c7883a 	add	r3,r4,r3
    ecdc:	18c00003 	ldbu	r3,0(r3)
    ece0:	1885883a 	add	r2,r3,r2
    ece4:	00c00804 	movi	r3,32
    ece8:	1887c83a 	sub	r3,r3,r2
    ecec:	18008f1e 	bne	r3,zero,ef2c <__udivdi3+0x418>
    ecf0:	882ad43a 	srli	r21,r17,16
    ecf4:	8461c83a 	sub	r16,r16,r17
    ecf8:	8d3fffcc 	andi	r20,r17,65535
    ecfc:	00c00044 	movi	r3,1
    ed00:	8009883a 	mov	r4,r16
    ed04:	a80b883a 	mov	r5,r21
    ed08:	d8c00015 	stw	r3,0(sp)
    ed0c:	0004a4c0 	call	4a4c <__umodsi3>
    ed10:	8009883a 	mov	r4,r16
    ed14:	a80b883a 	mov	r5,r21
    ed18:	1027883a 	mov	r19,r2
    ed1c:	00049e80 	call	49e8 <__udivsi3>
    ed20:	9826943a 	slli	r19,r19,16
    ed24:	9008d43a 	srli	r4,r18,16
    ed28:	1521383a 	mul	r16,r2,r20
    ed2c:	102d883a 	mov	r22,r2
    ed30:	24c8b03a 	or	r4,r4,r19
    ed34:	d8c00017 	ldw	r3,0(sp)
    ed38:	2400052e 	bgeu	r4,r16,ed50 <__udivdi3+0x23c>
    ed3c:	2449883a 	add	r4,r4,r17
    ed40:	b0bfffc4 	addi	r2,r22,-1
    ed44:	24400136 	bltu	r4,r17,ed4c <__udivdi3+0x238>
    ed48:	2400ca36 	bltu	r4,r16,f074 <__udivdi3+0x560>
    ed4c:	102d883a 	mov	r22,r2
    ed50:	2421c83a 	sub	r16,r4,r16
    ed54:	a80b883a 	mov	r5,r21
    ed58:	8009883a 	mov	r4,r16
    ed5c:	d8c00015 	stw	r3,0(sp)
    ed60:	0004a4c0 	call	4a4c <__umodsi3>
    ed64:	1027883a 	mov	r19,r2
    ed68:	a80b883a 	mov	r5,r21
    ed6c:	8009883a 	mov	r4,r16
    ed70:	00049e80 	call	49e8 <__udivsi3>
    ed74:	9826943a 	slli	r19,r19,16
    ed78:	1529383a 	mul	r20,r2,r20
    ed7c:	94bfffcc 	andi	r18,r18,65535
    ed80:	94e4b03a 	or	r18,r18,r19
    ed84:	d8c00017 	ldw	r3,0(sp)
    ed88:	9500052e 	bgeu	r18,r20,eda0 <__udivdi3+0x28c>
    ed8c:	8ca5883a 	add	r18,r17,r18
    ed90:	113fffc4 	addi	r4,r2,-1
    ed94:	94409736 	bltu	r18,r17,eff4 <__udivdi3+0x4e0>
    ed98:	9500962e 	bgeu	r18,r20,eff4 <__udivdi3+0x4e0>
    ed9c:	10bfff84 	addi	r2,r2,-2
    eda0:	b00c943a 	slli	r6,r22,16
    eda4:	3084b03a 	or	r2,r6,r2
    eda8:	00000206 	br	edb4 <__udivdi3+0x2a0>
    edac:	0007883a 	mov	r3,zero
    edb0:	0005883a 	mov	r2,zero
    edb4:	dfc00a17 	ldw	ra,40(sp)
    edb8:	df000917 	ldw	fp,36(sp)
    edbc:	ddc00817 	ldw	r23,32(sp)
    edc0:	dd800717 	ldw	r22,28(sp)
    edc4:	dd400617 	ldw	r21,24(sp)
    edc8:	dd000517 	ldw	r20,20(sp)
    edcc:	dcc00417 	ldw	r19,16(sp)
    edd0:	dc800317 	ldw	r18,12(sp)
    edd4:	dc400217 	ldw	r17,8(sp)
    edd8:	dc000117 	ldw	r16,4(sp)
    eddc:	dec00b04 	addi	sp,sp,44
    ede0:	f800283a 	ret
    ede4:	00803fc4 	movi	r2,255
    ede8:	11c5803a 	cmpltu	r2,r2,r7
    edec:	100490fa 	slli	r2,r2,3
    edf0:	003f9e06 	br	ec6c <__alt_data_end+0xff00ec6c>
    edf4:	00803fc4 	movi	r2,255
    edf8:	1445803a 	cmpltu	r2,r2,r17
    edfc:	100490fa 	slli	r2,r2,3
    ee00:	003fb206 	br	eccc <__alt_data_end+0xff00eccc>
    ee04:	00804034 	movhi	r2,256
    ee08:	10bfffc4 	addi	r2,r2,-1
    ee0c:	11808836 	bltu	r2,r6,f030 <__udivdi3+0x51c>
    ee10:	00800404 	movi	r2,16
    ee14:	003f5606 	br	eb70 <__alt_data_end+0xff00eb70>
    ee18:	30aed83a 	srl	r23,r6,r2
    ee1c:	3d4e983a 	sll	r7,r7,r21
    ee20:	80acd83a 	srl	r22,r16,r2
    ee24:	9884d83a 	srl	r2,r19,r2
    ee28:	3deeb03a 	or	r23,r7,r23
    ee2c:	b824d43a 	srli	r18,r23,16
    ee30:	8560983a 	sll	r16,r16,r21
    ee34:	b009883a 	mov	r4,r22
    ee38:	900b883a 	mov	r5,r18
    ee3c:	3568983a 	sll	r20,r6,r21
    ee40:	1420b03a 	or	r16,r2,r16
    ee44:	0004a4c0 	call	4a4c <__umodsi3>
    ee48:	b009883a 	mov	r4,r22
    ee4c:	900b883a 	mov	r5,r18
    ee50:	1023883a 	mov	r17,r2
    ee54:	00049e80 	call	49e8 <__udivsi3>
    ee58:	8808943a 	slli	r4,r17,16
    ee5c:	bf3fffcc 	andi	fp,r23,65535
    ee60:	8006d43a 	srli	r3,r16,16
    ee64:	e0a3383a 	mul	r17,fp,r2
    ee68:	100d883a 	mov	r6,r2
    ee6c:	1906b03a 	or	r3,r3,r4
    ee70:	1c40042e 	bgeu	r3,r17,ee84 <__udivdi3+0x370>
    ee74:	1dc7883a 	add	r3,r3,r23
    ee78:	10bfffc4 	addi	r2,r2,-1
    ee7c:	1dc0752e 	bgeu	r3,r23,f054 <__udivdi3+0x540>
    ee80:	100d883a 	mov	r6,r2
    ee84:	1c63c83a 	sub	r17,r3,r17
    ee88:	900b883a 	mov	r5,r18
    ee8c:	8809883a 	mov	r4,r17
    ee90:	d9800015 	stw	r6,0(sp)
    ee94:	0004a4c0 	call	4a4c <__umodsi3>
    ee98:	102d883a 	mov	r22,r2
    ee9c:	8809883a 	mov	r4,r17
    eea0:	900b883a 	mov	r5,r18
    eea4:	00049e80 	call	49e8 <__udivsi3>
    eea8:	b02c943a 	slli	r22,r22,16
    eeac:	e089383a 	mul	r4,fp,r2
    eeb0:	843fffcc 	andi	r16,r16,65535
    eeb4:	85a0b03a 	or	r16,r16,r22
    eeb8:	d9800017 	ldw	r6,0(sp)
    eebc:	8100042e 	bgeu	r16,r4,eed0 <__udivdi3+0x3bc>
    eec0:	85e1883a 	add	r16,r16,r23
    eec4:	10ffffc4 	addi	r3,r2,-1
    eec8:	85c05e2e 	bgeu	r16,r23,f044 <__udivdi3+0x530>
    eecc:	1805883a 	mov	r2,r3
    eed0:	300c943a 	slli	r6,r6,16
    eed4:	a17fffcc 	andi	r5,r20,65535
    eed8:	a028d43a 	srli	r20,r20,16
    eedc:	3084b03a 	or	r2,r6,r2
    eee0:	10ffffcc 	andi	r3,r2,65535
    eee4:	100cd43a 	srli	r6,r2,16
    eee8:	194f383a 	mul	r7,r3,r5
    eeec:	1d07383a 	mul	r3,r3,r20
    eef0:	314b383a 	mul	r5,r6,r5
    eef4:	3810d43a 	srli	r8,r7,16
    eef8:	8121c83a 	sub	r16,r16,r4
    eefc:	1947883a 	add	r3,r3,r5
    ef00:	40c7883a 	add	r3,r8,r3
    ef04:	350d383a 	mul	r6,r6,r20
    ef08:	1940022e 	bgeu	r3,r5,ef14 <__udivdi3+0x400>
    ef0c:	01000074 	movhi	r4,1
    ef10:	310d883a 	add	r6,r6,r4
    ef14:	1828d43a 	srli	r20,r3,16
    ef18:	a18d883a 	add	r6,r20,r6
    ef1c:	81803e36 	bltu	r16,r6,f018 <__udivdi3+0x504>
    ef20:	81803826 	beq	r16,r6,f004 <__udivdi3+0x4f0>
    ef24:	0007883a 	mov	r3,zero
    ef28:	003fa206 	br	edb4 <__alt_data_end+0xff00edb4>
    ef2c:	88e2983a 	sll	r17,r17,r3
    ef30:	80a8d83a 	srl	r20,r16,r2
    ef34:	80e0983a 	sll	r16,r16,r3
    ef38:	882ad43a 	srli	r21,r17,16
    ef3c:	9884d83a 	srl	r2,r19,r2
    ef40:	a009883a 	mov	r4,r20
    ef44:	a80b883a 	mov	r5,r21
    ef48:	142eb03a 	or	r23,r2,r16
    ef4c:	98e4983a 	sll	r18,r19,r3
    ef50:	0004a4c0 	call	4a4c <__umodsi3>
    ef54:	a009883a 	mov	r4,r20
    ef58:	a80b883a 	mov	r5,r21
    ef5c:	1021883a 	mov	r16,r2
    ef60:	00049e80 	call	49e8 <__udivsi3>
    ef64:	1039883a 	mov	fp,r2
    ef68:	8d3fffcc 	andi	r20,r17,65535
    ef6c:	8020943a 	slli	r16,r16,16
    ef70:	b804d43a 	srli	r2,r23,16
    ef74:	a72d383a 	mul	r22,r20,fp
    ef78:	1404b03a 	or	r2,r2,r16
    ef7c:	1580062e 	bgeu	r2,r22,ef98 <__udivdi3+0x484>
    ef80:	1445883a 	add	r2,r2,r17
    ef84:	e0ffffc4 	addi	r3,fp,-1
    ef88:	14403836 	bltu	r2,r17,f06c <__udivdi3+0x558>
    ef8c:	1580372e 	bgeu	r2,r22,f06c <__udivdi3+0x558>
    ef90:	e73fff84 	addi	fp,fp,-2
    ef94:	1445883a 	add	r2,r2,r17
    ef98:	15adc83a 	sub	r22,r2,r22
    ef9c:	a80b883a 	mov	r5,r21
    efa0:	b009883a 	mov	r4,r22
    efa4:	0004a4c0 	call	4a4c <__umodsi3>
    efa8:	1027883a 	mov	r19,r2
    efac:	b009883a 	mov	r4,r22
    efb0:	a80b883a 	mov	r5,r21
    efb4:	00049e80 	call	49e8 <__udivsi3>
    efb8:	9826943a 	slli	r19,r19,16
    efbc:	a0a1383a 	mul	r16,r20,r2
    efc0:	b93fffcc 	andi	r4,r23,65535
    efc4:	24c8b03a 	or	r4,r4,r19
    efc8:	2400062e 	bgeu	r4,r16,efe4 <__udivdi3+0x4d0>
    efcc:	2449883a 	add	r4,r4,r17
    efd0:	10ffffc4 	addi	r3,r2,-1
    efd4:	24402336 	bltu	r4,r17,f064 <__udivdi3+0x550>
    efd8:	2400222e 	bgeu	r4,r16,f064 <__udivdi3+0x550>
    efdc:	10bfff84 	addi	r2,r2,-2
    efe0:	2449883a 	add	r4,r4,r17
    efe4:	e038943a 	slli	fp,fp,16
    efe8:	2421c83a 	sub	r16,r4,r16
    efec:	e086b03a 	or	r3,fp,r2
    eff0:	003f4306 	br	ed00 <__alt_data_end+0xff00ed00>
    eff4:	2005883a 	mov	r2,r4
    eff8:	003f6906 	br	eda0 <__alt_data_end+0xff00eda0>
    effc:	1805883a 	mov	r2,r3
    f000:	003f0f06 	br	ec40 <__alt_data_end+0xff00ec40>
    f004:	1806943a 	slli	r3,r3,16
    f008:	9d66983a 	sll	r19,r19,r21
    f00c:	39ffffcc 	andi	r7,r7,65535
    f010:	19c7883a 	add	r3,r3,r7
    f014:	98ffc32e 	bgeu	r19,r3,ef24 <__alt_data_end+0xff00ef24>
    f018:	10bfffc4 	addi	r2,r2,-1
    f01c:	003fc106 	br	ef24 <__alt_data_end+0xff00ef24>
    f020:	00800604 	movi	r2,24
    f024:	003f1106 	br	ec6c <__alt_data_end+0xff00ec6c>
    f028:	00800604 	movi	r2,24
    f02c:	003f2706 	br	eccc <__alt_data_end+0xff00eccc>
    f030:	00800604 	movi	r2,24
    f034:	003ece06 	br	eb70 <__alt_data_end+0xff00eb70>
    f038:	0007883a 	mov	r3,zero
    f03c:	00800044 	movi	r2,1
    f040:	003f5c06 	br	edb4 <__alt_data_end+0xff00edb4>
    f044:	813fa12e 	bgeu	r16,r4,eecc <__alt_data_end+0xff00eecc>
    f048:	10bfff84 	addi	r2,r2,-2
    f04c:	85e1883a 	add	r16,r16,r23
    f050:	003f9f06 	br	eed0 <__alt_data_end+0xff00eed0>
    f054:	1c7f8a2e 	bgeu	r3,r17,ee80 <__alt_data_end+0xff00ee80>
    f058:	31bfff84 	addi	r6,r6,-2
    f05c:	1dc7883a 	add	r3,r3,r23
    f060:	003f8806 	br	ee84 <__alt_data_end+0xff00ee84>
    f064:	1805883a 	mov	r2,r3
    f068:	003fde06 	br	efe4 <__alt_data_end+0xff00efe4>
    f06c:	1839883a 	mov	fp,r3
    f070:	003fc906 	br	ef98 <__alt_data_end+0xff00ef98>
    f074:	b5bfff84 	addi	r22,r22,-2
    f078:	2449883a 	add	r4,r4,r17
    f07c:	003f3406 	br	ed50 <__alt_data_end+0xff00ed50>
    f080:	b5bfff84 	addi	r22,r22,-2
    f084:	1445883a 	add	r2,r2,r17
    f088:	003edb06 	br	ebf8 <__alt_data_end+0xff00ebf8>

0000f08c <__umoddi3>:
    f08c:	defff404 	addi	sp,sp,-48
    f090:	df000a15 	stw	fp,40(sp)
    f094:	dc400315 	stw	r17,12(sp)
    f098:	dc000215 	stw	r16,8(sp)
    f09c:	dfc00b15 	stw	ra,44(sp)
    f0a0:	ddc00915 	stw	r23,36(sp)
    f0a4:	dd800815 	stw	r22,32(sp)
    f0a8:	dd400715 	stw	r21,28(sp)
    f0ac:	dd000615 	stw	r20,24(sp)
    f0b0:	dcc00515 	stw	r19,20(sp)
    f0b4:	dc800415 	stw	r18,16(sp)
    f0b8:	2021883a 	mov	r16,r4
    f0bc:	2823883a 	mov	r17,r5
    f0c0:	2839883a 	mov	fp,r5
    f0c4:	38003c1e 	bne	r7,zero,f1b8 <__umoddi3+0x12c>
    f0c8:	3027883a 	mov	r19,r6
    f0cc:	2029883a 	mov	r20,r4
    f0d0:	2980512e 	bgeu	r5,r6,f218 <__umoddi3+0x18c>
    f0d4:	00bfffd4 	movui	r2,65535
    f0d8:	11809a36 	bltu	r2,r6,f344 <__umoddi3+0x2b8>
    f0dc:	01003fc4 	movi	r4,255
    f0e0:	2189803a 	cmpltu	r4,r4,r6
    f0e4:	200890fa 	slli	r4,r4,3
    f0e8:	3104d83a 	srl	r2,r6,r4
    f0ec:	00c00074 	movhi	r3,1
    f0f0:	18d10e84 	addi	r3,r3,17466
    f0f4:	1885883a 	add	r2,r3,r2
    f0f8:	10c00003 	ldbu	r3,0(r2)
    f0fc:	00800804 	movi	r2,32
    f100:	1909883a 	add	r4,r3,r4
    f104:	1125c83a 	sub	r18,r2,r4
    f108:	90000526 	beq	r18,zero,f120 <__umoddi3+0x94>
    f10c:	8ca2983a 	sll	r17,r17,r18
    f110:	8108d83a 	srl	r4,r16,r4
    f114:	34a6983a 	sll	r19,r6,r18
    f118:	84a8983a 	sll	r20,r16,r18
    f11c:	2478b03a 	or	fp,r4,r17
    f120:	982ed43a 	srli	r23,r19,16
    f124:	e009883a 	mov	r4,fp
    f128:	9dbfffcc 	andi	r22,r19,65535
    f12c:	b80b883a 	mov	r5,r23
    f130:	0004a4c0 	call	4a4c <__umodsi3>
    f134:	e009883a 	mov	r4,fp
    f138:	b80b883a 	mov	r5,r23
    f13c:	102b883a 	mov	r21,r2
    f140:	00049e80 	call	49e8 <__udivsi3>
    f144:	a806943a 	slli	r3,r21,16
    f148:	a008d43a 	srli	r4,r20,16
    f14c:	b085383a 	mul	r2,r22,r2
    f150:	20c8b03a 	or	r4,r4,r3
    f154:	2080032e 	bgeu	r4,r2,f164 <__umoddi3+0xd8>
    f158:	24c9883a 	add	r4,r4,r19
    f15c:	24c00136 	bltu	r4,r19,f164 <__umoddi3+0xd8>
    f160:	20811036 	bltu	r4,r2,f5a4 <__umoddi3+0x518>
    f164:	20abc83a 	sub	r21,r4,r2
    f168:	b80b883a 	mov	r5,r23
    f16c:	a809883a 	mov	r4,r21
    f170:	0004a4c0 	call	4a4c <__umodsi3>
    f174:	1023883a 	mov	r17,r2
    f178:	b80b883a 	mov	r5,r23
    f17c:	a809883a 	mov	r4,r21
    f180:	00049e80 	call	49e8 <__udivsi3>
    f184:	8822943a 	slli	r17,r17,16
    f188:	b085383a 	mul	r2,r22,r2
    f18c:	a0ffffcc 	andi	r3,r20,65535
    f190:	1c46b03a 	or	r3,r3,r17
    f194:	1880042e 	bgeu	r3,r2,f1a8 <__umoddi3+0x11c>
    f198:	1cc7883a 	add	r3,r3,r19
    f19c:	1cc00236 	bltu	r3,r19,f1a8 <__umoddi3+0x11c>
    f1a0:	1880012e 	bgeu	r3,r2,f1a8 <__umoddi3+0x11c>
    f1a4:	1cc7883a 	add	r3,r3,r19
    f1a8:	1885c83a 	sub	r2,r3,r2
    f1ac:	1484d83a 	srl	r2,r2,r18
    f1b0:	0007883a 	mov	r3,zero
    f1b4:	00004f06 	br	f2f4 <__umoddi3+0x268>
    f1b8:	29c04c36 	bltu	r5,r7,f2ec <__umoddi3+0x260>
    f1bc:	00bfffd4 	movui	r2,65535
    f1c0:	11c0582e 	bgeu	r2,r7,f324 <__umoddi3+0x298>
    f1c4:	00804034 	movhi	r2,256
    f1c8:	10bfffc4 	addi	r2,r2,-1
    f1cc:	11c0e736 	bltu	r2,r7,f56c <__umoddi3+0x4e0>
    f1d0:	01000404 	movi	r4,16
    f1d4:	3904d83a 	srl	r2,r7,r4
    f1d8:	00c00074 	movhi	r3,1
    f1dc:	18d10e84 	addi	r3,r3,17466
    f1e0:	1885883a 	add	r2,r3,r2
    f1e4:	14c00003 	ldbu	r19,0(r2)
    f1e8:	00c00804 	movi	r3,32
    f1ec:	9927883a 	add	r19,r19,r4
    f1f0:	1ce9c83a 	sub	r20,r3,r19
    f1f4:	a000581e 	bne	r20,zero,f358 <__umoddi3+0x2cc>
    f1f8:	3c400136 	bltu	r7,r17,f200 <__umoddi3+0x174>
    f1fc:	8180eb36 	bltu	r16,r6,f5ac <__umoddi3+0x520>
    f200:	8185c83a 	sub	r2,r16,r6
    f204:	89e3c83a 	sub	r17,r17,r7
    f208:	8089803a 	cmpltu	r4,r16,r2
    f20c:	8939c83a 	sub	fp,r17,r4
    f210:	e007883a 	mov	r3,fp
    f214:	00003706 	br	f2f4 <__umoddi3+0x268>
    f218:	3000041e 	bne	r6,zero,f22c <__umoddi3+0x1a0>
    f21c:	000b883a 	mov	r5,zero
    f220:	01000044 	movi	r4,1
    f224:	00049e80 	call	49e8 <__udivsi3>
    f228:	1027883a 	mov	r19,r2
    f22c:	00bfffd4 	movui	r2,65535
    f230:	14c0402e 	bgeu	r2,r19,f334 <__umoddi3+0x2a8>
    f234:	00804034 	movhi	r2,256
    f238:	10bfffc4 	addi	r2,r2,-1
    f23c:	14c0cd36 	bltu	r2,r19,f574 <__umoddi3+0x4e8>
    f240:	00800404 	movi	r2,16
    f244:	9886d83a 	srl	r3,r19,r2
    f248:	01000074 	movhi	r4,1
    f24c:	21110e84 	addi	r4,r4,17466
    f250:	20c7883a 	add	r3,r4,r3
    f254:	18c00003 	ldbu	r3,0(r3)
    f258:	1887883a 	add	r3,r3,r2
    f25c:	00800804 	movi	r2,32
    f260:	10e5c83a 	sub	r18,r2,r3
    f264:	9000901e 	bne	r18,zero,f4a8 <__umoddi3+0x41c>
    f268:	982cd43a 	srli	r22,r19,16
    f26c:	8ce3c83a 	sub	r17,r17,r19
    f270:	9d7fffcc 	andi	r21,r19,65535
    f274:	b00b883a 	mov	r5,r22
    f278:	8809883a 	mov	r4,r17
    f27c:	0004a4c0 	call	4a4c <__umodsi3>
    f280:	8809883a 	mov	r4,r17
    f284:	b00b883a 	mov	r5,r22
    f288:	1021883a 	mov	r16,r2
    f28c:	00049e80 	call	49e8 <__udivsi3>
    f290:	8006943a 	slli	r3,r16,16
    f294:	a008d43a 	srli	r4,r20,16
    f298:	1545383a 	mul	r2,r2,r21
    f29c:	20c8b03a 	or	r4,r4,r3
    f2a0:	2080042e 	bgeu	r4,r2,f2b4 <__umoddi3+0x228>
    f2a4:	24c9883a 	add	r4,r4,r19
    f2a8:	24c00236 	bltu	r4,r19,f2b4 <__umoddi3+0x228>
    f2ac:	2080012e 	bgeu	r4,r2,f2b4 <__umoddi3+0x228>
    f2b0:	24c9883a 	add	r4,r4,r19
    f2b4:	20a1c83a 	sub	r16,r4,r2
    f2b8:	b00b883a 	mov	r5,r22
    f2bc:	8009883a 	mov	r4,r16
    f2c0:	0004a4c0 	call	4a4c <__umodsi3>
    f2c4:	1023883a 	mov	r17,r2
    f2c8:	b00b883a 	mov	r5,r22
    f2cc:	8009883a 	mov	r4,r16
    f2d0:	00049e80 	call	49e8 <__udivsi3>
    f2d4:	8822943a 	slli	r17,r17,16
    f2d8:	1545383a 	mul	r2,r2,r21
    f2dc:	a53fffcc 	andi	r20,r20,65535
    f2e0:	a446b03a 	or	r3,r20,r17
    f2e4:	18bfb02e 	bgeu	r3,r2,f1a8 <__alt_data_end+0xff00f1a8>
    f2e8:	003fab06 	br	f198 <__alt_data_end+0xff00f198>
    f2ec:	2005883a 	mov	r2,r4
    f2f0:	2807883a 	mov	r3,r5
    f2f4:	dfc00b17 	ldw	ra,44(sp)
    f2f8:	df000a17 	ldw	fp,40(sp)
    f2fc:	ddc00917 	ldw	r23,36(sp)
    f300:	dd800817 	ldw	r22,32(sp)
    f304:	dd400717 	ldw	r21,28(sp)
    f308:	dd000617 	ldw	r20,24(sp)
    f30c:	dcc00517 	ldw	r19,20(sp)
    f310:	dc800417 	ldw	r18,16(sp)
    f314:	dc400317 	ldw	r17,12(sp)
    f318:	dc000217 	ldw	r16,8(sp)
    f31c:	dec00c04 	addi	sp,sp,48
    f320:	f800283a 	ret
    f324:	04c03fc4 	movi	r19,255
    f328:	99c9803a 	cmpltu	r4,r19,r7
    f32c:	200890fa 	slli	r4,r4,3
    f330:	003fa806 	br	f1d4 <__alt_data_end+0xff00f1d4>
    f334:	00803fc4 	movi	r2,255
    f338:	14c5803a 	cmpltu	r2,r2,r19
    f33c:	100490fa 	slli	r2,r2,3
    f340:	003fc006 	br	f244 <__alt_data_end+0xff00f244>
    f344:	00804034 	movhi	r2,256
    f348:	10bfffc4 	addi	r2,r2,-1
    f34c:	11808b36 	bltu	r2,r6,f57c <__umoddi3+0x4f0>
    f350:	01000404 	movi	r4,16
    f354:	003f6406 	br	f0e8 <__alt_data_end+0xff00f0e8>
    f358:	34c4d83a 	srl	r2,r6,r19
    f35c:	3d0e983a 	sll	r7,r7,r20
    f360:	8cf8d83a 	srl	fp,r17,r19
    f364:	8d10983a 	sll	r8,r17,r20
    f368:	38aab03a 	or	r21,r7,r2
    f36c:	a82cd43a 	srli	r22,r21,16
    f370:	84e2d83a 	srl	r17,r16,r19
    f374:	e009883a 	mov	r4,fp
    f378:	b00b883a 	mov	r5,r22
    f37c:	8a22b03a 	or	r17,r17,r8
    f380:	3524983a 	sll	r18,r6,r20
    f384:	0004a4c0 	call	4a4c <__umodsi3>
    f388:	e009883a 	mov	r4,fp
    f38c:	b00b883a 	mov	r5,r22
    f390:	102f883a 	mov	r23,r2
    f394:	00049e80 	call	49e8 <__udivsi3>
    f398:	100d883a 	mov	r6,r2
    f39c:	b808943a 	slli	r4,r23,16
    f3a0:	aa3fffcc 	andi	r8,r21,65535
    f3a4:	8804d43a 	srli	r2,r17,16
    f3a8:	41af383a 	mul	r23,r8,r6
    f3ac:	8520983a 	sll	r16,r16,r20
    f3b0:	1104b03a 	or	r2,r2,r4
    f3b4:	15c0042e 	bgeu	r2,r23,f3c8 <__umoddi3+0x33c>
    f3b8:	1545883a 	add	r2,r2,r21
    f3bc:	30ffffc4 	addi	r3,r6,-1
    f3c0:	1540742e 	bgeu	r2,r21,f594 <__umoddi3+0x508>
    f3c4:	180d883a 	mov	r6,r3
    f3c8:	15efc83a 	sub	r23,r2,r23
    f3cc:	b00b883a 	mov	r5,r22
    f3d0:	b809883a 	mov	r4,r23
    f3d4:	d9800115 	stw	r6,4(sp)
    f3d8:	da000015 	stw	r8,0(sp)
    f3dc:	0004a4c0 	call	4a4c <__umodsi3>
    f3e0:	b00b883a 	mov	r5,r22
    f3e4:	b809883a 	mov	r4,r23
    f3e8:	1039883a 	mov	fp,r2
    f3ec:	00049e80 	call	49e8 <__udivsi3>
    f3f0:	da000017 	ldw	r8,0(sp)
    f3f4:	e038943a 	slli	fp,fp,16
    f3f8:	100b883a 	mov	r5,r2
    f3fc:	4089383a 	mul	r4,r8,r2
    f400:	8a3fffcc 	andi	r8,r17,65535
    f404:	4710b03a 	or	r8,r8,fp
    f408:	d9800117 	ldw	r6,4(sp)
    f40c:	4100042e 	bgeu	r8,r4,f420 <__umoddi3+0x394>
    f410:	4551883a 	add	r8,r8,r21
    f414:	10bfffc4 	addi	r2,r2,-1
    f418:	45405a2e 	bgeu	r8,r21,f584 <__umoddi3+0x4f8>
    f41c:	100b883a 	mov	r5,r2
    f420:	300c943a 	slli	r6,r6,16
    f424:	91ffffcc 	andi	r7,r18,65535
    f428:	9004d43a 	srli	r2,r18,16
    f42c:	314cb03a 	or	r6,r6,r5
    f430:	317fffcc 	andi	r5,r6,65535
    f434:	300cd43a 	srli	r6,r6,16
    f438:	29d3383a 	mul	r9,r5,r7
    f43c:	288b383a 	mul	r5,r5,r2
    f440:	31cf383a 	mul	r7,r6,r7
    f444:	4806d43a 	srli	r3,r9,16
    f448:	4111c83a 	sub	r8,r8,r4
    f44c:	29cb883a 	add	r5,r5,r7
    f450:	194b883a 	add	r5,r3,r5
    f454:	3085383a 	mul	r2,r6,r2
    f458:	29c0022e 	bgeu	r5,r7,f464 <__umoddi3+0x3d8>
    f45c:	00c00074 	movhi	r3,1
    f460:	10c5883a 	add	r2,r2,r3
    f464:	2808d43a 	srli	r4,r5,16
    f468:	280a943a 	slli	r5,r5,16
    f46c:	4a7fffcc 	andi	r9,r9,65535
    f470:	2085883a 	add	r2,r4,r2
    f474:	2a4b883a 	add	r5,r5,r9
    f478:	40803636 	bltu	r8,r2,f554 <__umoddi3+0x4c8>
    f47c:	40804d26 	beq	r8,r2,f5b4 <__umoddi3+0x528>
    f480:	4089c83a 	sub	r4,r8,r2
    f484:	280f883a 	mov	r7,r5
    f488:	81cfc83a 	sub	r7,r16,r7
    f48c:	81c7803a 	cmpltu	r3,r16,r7
    f490:	20c7c83a 	sub	r3,r4,r3
    f494:	1cc4983a 	sll	r2,r3,r19
    f498:	3d0ed83a 	srl	r7,r7,r20
    f49c:	1d06d83a 	srl	r3,r3,r20
    f4a0:	11c4b03a 	or	r2,r2,r7
    f4a4:	003f9306 	br	f2f4 <__alt_data_end+0xff00f2f4>
    f4a8:	9ca6983a 	sll	r19,r19,r18
    f4ac:	88e8d83a 	srl	r20,r17,r3
    f4b0:	80c4d83a 	srl	r2,r16,r3
    f4b4:	982cd43a 	srli	r22,r19,16
    f4b8:	8ca2983a 	sll	r17,r17,r18
    f4bc:	a009883a 	mov	r4,r20
    f4c0:	b00b883a 	mov	r5,r22
    f4c4:	1478b03a 	or	fp,r2,r17
    f4c8:	0004a4c0 	call	4a4c <__umodsi3>
    f4cc:	a009883a 	mov	r4,r20
    f4d0:	b00b883a 	mov	r5,r22
    f4d4:	1023883a 	mov	r17,r2
    f4d8:	00049e80 	call	49e8 <__udivsi3>
    f4dc:	9d7fffcc 	andi	r21,r19,65535
    f4e0:	880a943a 	slli	r5,r17,16
    f4e4:	e008d43a 	srli	r4,fp,16
    f4e8:	a885383a 	mul	r2,r21,r2
    f4ec:	84a8983a 	sll	r20,r16,r18
    f4f0:	2148b03a 	or	r4,r4,r5
    f4f4:	2080042e 	bgeu	r4,r2,f508 <__umoddi3+0x47c>
    f4f8:	24c9883a 	add	r4,r4,r19
    f4fc:	24c00236 	bltu	r4,r19,f508 <__umoddi3+0x47c>
    f500:	2080012e 	bgeu	r4,r2,f508 <__umoddi3+0x47c>
    f504:	24c9883a 	add	r4,r4,r19
    f508:	20a3c83a 	sub	r17,r4,r2
    f50c:	b00b883a 	mov	r5,r22
    f510:	8809883a 	mov	r4,r17
    f514:	0004a4c0 	call	4a4c <__umodsi3>
    f518:	102f883a 	mov	r23,r2
    f51c:	8809883a 	mov	r4,r17
    f520:	b00b883a 	mov	r5,r22
    f524:	00049e80 	call	49e8 <__udivsi3>
    f528:	b82e943a 	slli	r23,r23,16
    f52c:	a885383a 	mul	r2,r21,r2
    f530:	e13fffcc 	andi	r4,fp,65535
    f534:	25c8b03a 	or	r4,r4,r23
    f538:	2080042e 	bgeu	r4,r2,f54c <__umoddi3+0x4c0>
    f53c:	24c9883a 	add	r4,r4,r19
    f540:	24c00236 	bltu	r4,r19,f54c <__umoddi3+0x4c0>
    f544:	2080012e 	bgeu	r4,r2,f54c <__umoddi3+0x4c0>
    f548:	24c9883a 	add	r4,r4,r19
    f54c:	20a3c83a 	sub	r17,r4,r2
    f550:	003f4806 	br	f274 <__alt_data_end+0xff00f274>
    f554:	2c8fc83a 	sub	r7,r5,r18
    f558:	1545c83a 	sub	r2,r2,r21
    f55c:	29cb803a 	cmpltu	r5,r5,r7
    f560:	1145c83a 	sub	r2,r2,r5
    f564:	4089c83a 	sub	r4,r8,r2
    f568:	003fc706 	br	f488 <__alt_data_end+0xff00f488>
    f56c:	01000604 	movi	r4,24
    f570:	003f1806 	br	f1d4 <__alt_data_end+0xff00f1d4>
    f574:	00800604 	movi	r2,24
    f578:	003f3206 	br	f244 <__alt_data_end+0xff00f244>
    f57c:	01000604 	movi	r4,24
    f580:	003ed906 	br	f0e8 <__alt_data_end+0xff00f0e8>
    f584:	413fa52e 	bgeu	r8,r4,f41c <__alt_data_end+0xff00f41c>
    f588:	297fff84 	addi	r5,r5,-2
    f58c:	4551883a 	add	r8,r8,r21
    f590:	003fa306 	br	f420 <__alt_data_end+0xff00f420>
    f594:	15ff8b2e 	bgeu	r2,r23,f3c4 <__alt_data_end+0xff00f3c4>
    f598:	31bfff84 	addi	r6,r6,-2
    f59c:	1545883a 	add	r2,r2,r21
    f5a0:	003f8906 	br	f3c8 <__alt_data_end+0xff00f3c8>
    f5a4:	24c9883a 	add	r4,r4,r19
    f5a8:	003eee06 	br	f164 <__alt_data_end+0xff00f164>
    f5ac:	8005883a 	mov	r2,r16
    f5b0:	003f1706 	br	f210 <__alt_data_end+0xff00f210>
    f5b4:	817fe736 	bltu	r16,r5,f554 <__alt_data_end+0xff00f554>
    f5b8:	280f883a 	mov	r7,r5
    f5bc:	0009883a 	mov	r4,zero
    f5c0:	003fb106 	br	f488 <__alt_data_end+0xff00f488>

0000f5c4 <__adddf3>:
    f5c4:	02c00434 	movhi	r11,16
    f5c8:	5affffc4 	addi	r11,r11,-1
    f5cc:	2806d7fa 	srli	r3,r5,31
    f5d0:	2ad4703a 	and	r10,r5,r11
    f5d4:	3ad2703a 	and	r9,r7,r11
    f5d8:	3804d53a 	srli	r2,r7,20
    f5dc:	3018d77a 	srli	r12,r6,29
    f5e0:	280ad53a 	srli	r5,r5,20
    f5e4:	501490fa 	slli	r10,r10,3
    f5e8:	2010d77a 	srli	r8,r4,29
    f5ec:	481290fa 	slli	r9,r9,3
    f5f0:	380ed7fa 	srli	r7,r7,31
    f5f4:	defffb04 	addi	sp,sp,-20
    f5f8:	dc800215 	stw	r18,8(sp)
    f5fc:	dc400115 	stw	r17,4(sp)
    f600:	dc000015 	stw	r16,0(sp)
    f604:	dfc00415 	stw	ra,16(sp)
    f608:	dcc00315 	stw	r19,12(sp)
    f60c:	1c803fcc 	andi	r18,r3,255
    f610:	2c01ffcc 	andi	r16,r5,2047
    f614:	5210b03a 	or	r8,r10,r8
    f618:	202290fa 	slli	r17,r4,3
    f61c:	1081ffcc 	andi	r2,r2,2047
    f620:	4b12b03a 	or	r9,r9,r12
    f624:	300c90fa 	slli	r6,r6,3
    f628:	91c07526 	beq	r18,r7,f800 <__adddf3+0x23c>
    f62c:	8087c83a 	sub	r3,r16,r2
    f630:	00c0ab0e 	bge	zero,r3,f8e0 <__adddf3+0x31c>
    f634:	10002a1e 	bne	r2,zero,f6e0 <__adddf3+0x11c>
    f638:	4984b03a 	or	r2,r9,r6
    f63c:	1000961e 	bne	r2,zero,f898 <__adddf3+0x2d4>
    f640:	888001cc 	andi	r2,r17,7
    f644:	10000726 	beq	r2,zero,f664 <__adddf3+0xa0>
    f648:	888003cc 	andi	r2,r17,15
    f64c:	00c00104 	movi	r3,4
    f650:	10c00426 	beq	r2,r3,f664 <__adddf3+0xa0>
    f654:	88c7883a 	add	r3,r17,r3
    f658:	1c63803a 	cmpltu	r17,r3,r17
    f65c:	4451883a 	add	r8,r8,r17
    f660:	1823883a 	mov	r17,r3
    f664:	4080202c 	andhi	r2,r8,128
    f668:	10005926 	beq	r2,zero,f7d0 <__adddf3+0x20c>
    f66c:	84000044 	addi	r16,r16,1
    f670:	0081ffc4 	movi	r2,2047
    f674:	8080ba26 	beq	r16,r2,f960 <__adddf3+0x39c>
    f678:	00bfe034 	movhi	r2,65408
    f67c:	10bfffc4 	addi	r2,r2,-1
    f680:	4090703a 	and	r8,r8,r2
    f684:	4004977a 	slli	r2,r8,29
    f688:	4010927a 	slli	r8,r8,9
    f68c:	8822d0fa 	srli	r17,r17,3
    f690:	8401ffcc 	andi	r16,r16,2047
    f694:	4010d33a 	srli	r8,r8,12
    f698:	9007883a 	mov	r3,r18
    f69c:	1444b03a 	or	r2,r2,r17
    f6a0:	8401ffcc 	andi	r16,r16,2047
    f6a4:	8020953a 	slli	r16,r16,20
    f6a8:	18c03fcc 	andi	r3,r3,255
    f6ac:	01000434 	movhi	r4,16
    f6b0:	213fffc4 	addi	r4,r4,-1
    f6b4:	180697fa 	slli	r3,r3,31
    f6b8:	4110703a 	and	r8,r8,r4
    f6bc:	4410b03a 	or	r8,r8,r16
    f6c0:	40c6b03a 	or	r3,r8,r3
    f6c4:	dfc00417 	ldw	ra,16(sp)
    f6c8:	dcc00317 	ldw	r19,12(sp)
    f6cc:	dc800217 	ldw	r18,8(sp)
    f6d0:	dc400117 	ldw	r17,4(sp)
    f6d4:	dc000017 	ldw	r16,0(sp)
    f6d8:	dec00504 	addi	sp,sp,20
    f6dc:	f800283a 	ret
    f6e0:	0081ffc4 	movi	r2,2047
    f6e4:	80bfd626 	beq	r16,r2,f640 <__alt_data_end+0xff00f640>
    f6e8:	4a402034 	orhi	r9,r9,128
    f6ec:	00800e04 	movi	r2,56
    f6f0:	10c09f16 	blt	r2,r3,f970 <__adddf3+0x3ac>
    f6f4:	008007c4 	movi	r2,31
    f6f8:	10c0c216 	blt	r2,r3,fa04 <__adddf3+0x440>
    f6fc:	00800804 	movi	r2,32
    f700:	10c5c83a 	sub	r2,r2,r3
    f704:	488a983a 	sll	r5,r9,r2
    f708:	30c8d83a 	srl	r4,r6,r3
    f70c:	3084983a 	sll	r2,r6,r2
    f710:	48c6d83a 	srl	r3,r9,r3
    f714:	290cb03a 	or	r6,r5,r4
    f718:	1004c03a 	cmpne	r2,r2,zero
    f71c:	308cb03a 	or	r6,r6,r2
    f720:	898dc83a 	sub	r6,r17,r6
    f724:	89a3803a 	cmpltu	r17,r17,r6
    f728:	40d1c83a 	sub	r8,r8,r3
    f72c:	4451c83a 	sub	r8,r8,r17
    f730:	3023883a 	mov	r17,r6
    f734:	4080202c 	andhi	r2,r8,128
    f738:	10002326 	beq	r2,zero,f7c8 <__adddf3+0x204>
    f73c:	04c02034 	movhi	r19,128
    f740:	9cffffc4 	addi	r19,r19,-1
    f744:	44e6703a 	and	r19,r8,r19
    f748:	98007626 	beq	r19,zero,f924 <__adddf3+0x360>
    f74c:	9809883a 	mov	r4,r19
    f750:	00054340 	call	5434 <__clzsi2>
    f754:	10fffe04 	addi	r3,r2,-8
    f758:	010007c4 	movi	r4,31
    f75c:	20c07716 	blt	r4,r3,f93c <__adddf3+0x378>
    f760:	00800804 	movi	r2,32
    f764:	10c5c83a 	sub	r2,r2,r3
    f768:	8884d83a 	srl	r2,r17,r2
    f76c:	98d0983a 	sll	r8,r19,r3
    f770:	88e2983a 	sll	r17,r17,r3
    f774:	1204b03a 	or	r2,r2,r8
    f778:	1c007416 	blt	r3,r16,f94c <__adddf3+0x388>
    f77c:	1c21c83a 	sub	r16,r3,r16
    f780:	82000044 	addi	r8,r16,1
    f784:	00c007c4 	movi	r3,31
    f788:	1a009116 	blt	r3,r8,f9d0 <__adddf3+0x40c>
    f78c:	00c00804 	movi	r3,32
    f790:	1a07c83a 	sub	r3,r3,r8
    f794:	8a08d83a 	srl	r4,r17,r8
    f798:	88e2983a 	sll	r17,r17,r3
    f79c:	10c6983a 	sll	r3,r2,r3
    f7a0:	1210d83a 	srl	r8,r2,r8
    f7a4:	8804c03a 	cmpne	r2,r17,zero
    f7a8:	1906b03a 	or	r3,r3,r4
    f7ac:	18a2b03a 	or	r17,r3,r2
    f7b0:	0021883a 	mov	r16,zero
    f7b4:	003fa206 	br	f640 <__alt_data_end+0xff00f640>
    f7b8:	1890b03a 	or	r8,r3,r2
    f7bc:	40017d26 	beq	r8,zero,fdb4 <__adddf3+0x7f0>
    f7c0:	1011883a 	mov	r8,r2
    f7c4:	1823883a 	mov	r17,r3
    f7c8:	888001cc 	andi	r2,r17,7
    f7cc:	103f9e1e 	bne	r2,zero,f648 <__alt_data_end+0xff00f648>
    f7d0:	4004977a 	slli	r2,r8,29
    f7d4:	8822d0fa 	srli	r17,r17,3
    f7d8:	4010d0fa 	srli	r8,r8,3
    f7dc:	9007883a 	mov	r3,r18
    f7e0:	1444b03a 	or	r2,r2,r17
    f7e4:	0101ffc4 	movi	r4,2047
    f7e8:	81002426 	beq	r16,r4,f87c <__adddf3+0x2b8>
    f7ec:	8120703a 	and	r16,r16,r4
    f7f0:	01000434 	movhi	r4,16
    f7f4:	213fffc4 	addi	r4,r4,-1
    f7f8:	4110703a 	and	r8,r8,r4
    f7fc:	003fa806 	br	f6a0 <__alt_data_end+0xff00f6a0>
    f800:	8089c83a 	sub	r4,r16,r2
    f804:	01005e0e 	bge	zero,r4,f980 <__adddf3+0x3bc>
    f808:	10002b26 	beq	r2,zero,f8b8 <__adddf3+0x2f4>
    f80c:	0081ffc4 	movi	r2,2047
    f810:	80bf8b26 	beq	r16,r2,f640 <__alt_data_end+0xff00f640>
    f814:	4a402034 	orhi	r9,r9,128
    f818:	00800e04 	movi	r2,56
    f81c:	1100a40e 	bge	r2,r4,fab0 <__adddf3+0x4ec>
    f820:	498cb03a 	or	r6,r9,r6
    f824:	300ac03a 	cmpne	r5,r6,zero
    f828:	0013883a 	mov	r9,zero
    f82c:	2c4b883a 	add	r5,r5,r17
    f830:	2c63803a 	cmpltu	r17,r5,r17
    f834:	4a11883a 	add	r8,r9,r8
    f838:	8a11883a 	add	r8,r17,r8
    f83c:	2823883a 	mov	r17,r5
    f840:	4080202c 	andhi	r2,r8,128
    f844:	103fe026 	beq	r2,zero,f7c8 <__alt_data_end+0xff00f7c8>
    f848:	84000044 	addi	r16,r16,1
    f84c:	0081ffc4 	movi	r2,2047
    f850:	8080d226 	beq	r16,r2,fb9c <__adddf3+0x5d8>
    f854:	00bfe034 	movhi	r2,65408
    f858:	10bfffc4 	addi	r2,r2,-1
    f85c:	4090703a 	and	r8,r8,r2
    f860:	880ad07a 	srli	r5,r17,1
    f864:	400897fa 	slli	r4,r8,31
    f868:	88c0004c 	andi	r3,r17,1
    f86c:	28e2b03a 	or	r17,r5,r3
    f870:	4010d07a 	srli	r8,r8,1
    f874:	2462b03a 	or	r17,r4,r17
    f878:	003f7106 	br	f640 <__alt_data_end+0xff00f640>
    f87c:	4088b03a 	or	r4,r8,r2
    f880:	20014526 	beq	r4,zero,fd98 <__adddf3+0x7d4>
    f884:	01000434 	movhi	r4,16
    f888:	42000234 	orhi	r8,r8,8
    f88c:	213fffc4 	addi	r4,r4,-1
    f890:	4110703a 	and	r8,r8,r4
    f894:	003f8206 	br	f6a0 <__alt_data_end+0xff00f6a0>
    f898:	18ffffc4 	addi	r3,r3,-1
    f89c:	1800491e 	bne	r3,zero,f9c4 <__adddf3+0x400>
    f8a0:	898bc83a 	sub	r5,r17,r6
    f8a4:	8963803a 	cmpltu	r17,r17,r5
    f8a8:	4251c83a 	sub	r8,r8,r9
    f8ac:	4451c83a 	sub	r8,r8,r17
    f8b0:	2823883a 	mov	r17,r5
    f8b4:	003f9f06 	br	f734 <__alt_data_end+0xff00f734>
    f8b8:	4984b03a 	or	r2,r9,r6
    f8bc:	103f6026 	beq	r2,zero,f640 <__alt_data_end+0xff00f640>
    f8c0:	213fffc4 	addi	r4,r4,-1
    f8c4:	2000931e 	bne	r4,zero,fb14 <__adddf3+0x550>
    f8c8:	898d883a 	add	r6,r17,r6
    f8cc:	3463803a 	cmpltu	r17,r6,r17
    f8d0:	4251883a 	add	r8,r8,r9
    f8d4:	8a11883a 	add	r8,r17,r8
    f8d8:	3023883a 	mov	r17,r6
    f8dc:	003fd806 	br	f840 <__alt_data_end+0xff00f840>
    f8e0:	1800541e 	bne	r3,zero,fa34 <__adddf3+0x470>
    f8e4:	80800044 	addi	r2,r16,1
    f8e8:	1081ffcc 	andi	r2,r2,2047
    f8ec:	00c00044 	movi	r3,1
    f8f0:	1880a00e 	bge	r3,r2,fb74 <__adddf3+0x5b0>
    f8f4:	8989c83a 	sub	r4,r17,r6
    f8f8:	8905803a 	cmpltu	r2,r17,r4
    f8fc:	4267c83a 	sub	r19,r8,r9
    f900:	98a7c83a 	sub	r19,r19,r2
    f904:	9880202c 	andhi	r2,r19,128
    f908:	10006326 	beq	r2,zero,fa98 <__adddf3+0x4d4>
    f90c:	3463c83a 	sub	r17,r6,r17
    f910:	4a07c83a 	sub	r3,r9,r8
    f914:	344d803a 	cmpltu	r6,r6,r17
    f918:	19a7c83a 	sub	r19,r3,r6
    f91c:	3825883a 	mov	r18,r7
    f920:	983f8a1e 	bne	r19,zero,f74c <__alt_data_end+0xff00f74c>
    f924:	8809883a 	mov	r4,r17
    f928:	00054340 	call	5434 <__clzsi2>
    f92c:	10800804 	addi	r2,r2,32
    f930:	10fffe04 	addi	r3,r2,-8
    f934:	010007c4 	movi	r4,31
    f938:	20ff890e 	bge	r4,r3,f760 <__alt_data_end+0xff00f760>
    f93c:	10bff604 	addi	r2,r2,-40
    f940:	8884983a 	sll	r2,r17,r2
    f944:	0023883a 	mov	r17,zero
    f948:	1c3f8c0e 	bge	r3,r16,f77c <__alt_data_end+0xff00f77c>
    f94c:	023fe034 	movhi	r8,65408
    f950:	423fffc4 	addi	r8,r8,-1
    f954:	80e1c83a 	sub	r16,r16,r3
    f958:	1210703a 	and	r8,r2,r8
    f95c:	003f3806 	br	f640 <__alt_data_end+0xff00f640>
    f960:	9007883a 	mov	r3,r18
    f964:	0011883a 	mov	r8,zero
    f968:	0005883a 	mov	r2,zero
    f96c:	003f4c06 	br	f6a0 <__alt_data_end+0xff00f6a0>
    f970:	498cb03a 	or	r6,r9,r6
    f974:	300cc03a 	cmpne	r6,r6,zero
    f978:	0007883a 	mov	r3,zero
    f97c:	003f6806 	br	f720 <__alt_data_end+0xff00f720>
    f980:	20009c1e 	bne	r4,zero,fbf4 <__adddf3+0x630>
    f984:	80800044 	addi	r2,r16,1
    f988:	1141ffcc 	andi	r5,r2,2047
    f98c:	01000044 	movi	r4,1
    f990:	2140670e 	bge	r4,r5,fb30 <__adddf3+0x56c>
    f994:	0101ffc4 	movi	r4,2047
    f998:	11007f26 	beq	r2,r4,fb98 <__adddf3+0x5d4>
    f99c:	898d883a 	add	r6,r17,r6
    f9a0:	4247883a 	add	r3,r8,r9
    f9a4:	3451803a 	cmpltu	r8,r6,r17
    f9a8:	40d1883a 	add	r8,r8,r3
    f9ac:	402297fa 	slli	r17,r8,31
    f9b0:	300cd07a 	srli	r6,r6,1
    f9b4:	4010d07a 	srli	r8,r8,1
    f9b8:	1021883a 	mov	r16,r2
    f9bc:	89a2b03a 	or	r17,r17,r6
    f9c0:	003f1f06 	br	f640 <__alt_data_end+0xff00f640>
    f9c4:	0081ffc4 	movi	r2,2047
    f9c8:	80bf481e 	bne	r16,r2,f6ec <__alt_data_end+0xff00f6ec>
    f9cc:	003f1c06 	br	f640 <__alt_data_end+0xff00f640>
    f9d0:	843ff844 	addi	r16,r16,-31
    f9d4:	01000804 	movi	r4,32
    f9d8:	1406d83a 	srl	r3,r2,r16
    f9dc:	41005026 	beq	r8,r4,fb20 <__adddf3+0x55c>
    f9e0:	01001004 	movi	r4,64
    f9e4:	2211c83a 	sub	r8,r4,r8
    f9e8:	1204983a 	sll	r2,r2,r8
    f9ec:	88a2b03a 	or	r17,r17,r2
    f9f0:	8822c03a 	cmpne	r17,r17,zero
    f9f4:	1c62b03a 	or	r17,r3,r17
    f9f8:	0011883a 	mov	r8,zero
    f9fc:	0021883a 	mov	r16,zero
    fa00:	003f7106 	br	f7c8 <__alt_data_end+0xff00f7c8>
    fa04:	193ff804 	addi	r4,r3,-32
    fa08:	00800804 	movi	r2,32
    fa0c:	4908d83a 	srl	r4,r9,r4
    fa10:	18804526 	beq	r3,r2,fb28 <__adddf3+0x564>
    fa14:	00801004 	movi	r2,64
    fa18:	10c5c83a 	sub	r2,r2,r3
    fa1c:	4886983a 	sll	r3,r9,r2
    fa20:	198cb03a 	or	r6,r3,r6
    fa24:	300cc03a 	cmpne	r6,r6,zero
    fa28:	218cb03a 	or	r6,r4,r6
    fa2c:	0007883a 	mov	r3,zero
    fa30:	003f3b06 	br	f720 <__alt_data_end+0xff00f720>
    fa34:	80002a26 	beq	r16,zero,fae0 <__adddf3+0x51c>
    fa38:	0101ffc4 	movi	r4,2047
    fa3c:	11006826 	beq	r2,r4,fbe0 <__adddf3+0x61c>
    fa40:	00c7c83a 	sub	r3,zero,r3
    fa44:	42002034 	orhi	r8,r8,128
    fa48:	01000e04 	movi	r4,56
    fa4c:	20c07c16 	blt	r4,r3,fc40 <__adddf3+0x67c>
    fa50:	010007c4 	movi	r4,31
    fa54:	20c0da16 	blt	r4,r3,fdc0 <__adddf3+0x7fc>
    fa58:	01000804 	movi	r4,32
    fa5c:	20c9c83a 	sub	r4,r4,r3
    fa60:	4114983a 	sll	r10,r8,r4
    fa64:	88cad83a 	srl	r5,r17,r3
    fa68:	8908983a 	sll	r4,r17,r4
    fa6c:	40c6d83a 	srl	r3,r8,r3
    fa70:	5162b03a 	or	r17,r10,r5
    fa74:	2008c03a 	cmpne	r4,r4,zero
    fa78:	8922b03a 	or	r17,r17,r4
    fa7c:	3463c83a 	sub	r17,r6,r17
    fa80:	48c7c83a 	sub	r3,r9,r3
    fa84:	344d803a 	cmpltu	r6,r6,r17
    fa88:	1991c83a 	sub	r8,r3,r6
    fa8c:	1021883a 	mov	r16,r2
    fa90:	3825883a 	mov	r18,r7
    fa94:	003f2706 	br	f734 <__alt_data_end+0xff00f734>
    fa98:	24d0b03a 	or	r8,r4,r19
    fa9c:	40001b1e 	bne	r8,zero,fb0c <__adddf3+0x548>
    faa0:	0005883a 	mov	r2,zero
    faa4:	0007883a 	mov	r3,zero
    faa8:	0021883a 	mov	r16,zero
    faac:	003f4d06 	br	f7e4 <__alt_data_end+0xff00f7e4>
    fab0:	008007c4 	movi	r2,31
    fab4:	11003c16 	blt	r2,r4,fba8 <__adddf3+0x5e4>
    fab8:	00800804 	movi	r2,32
    fabc:	1105c83a 	sub	r2,r2,r4
    fac0:	488e983a 	sll	r7,r9,r2
    fac4:	310ad83a 	srl	r5,r6,r4
    fac8:	3084983a 	sll	r2,r6,r2
    facc:	4912d83a 	srl	r9,r9,r4
    fad0:	394ab03a 	or	r5,r7,r5
    fad4:	1004c03a 	cmpne	r2,r2,zero
    fad8:	288ab03a 	or	r5,r5,r2
    fadc:	003f5306 	br	f82c <__alt_data_end+0xff00f82c>
    fae0:	4448b03a 	or	r4,r8,r17
    fae4:	20003e26 	beq	r4,zero,fbe0 <__adddf3+0x61c>
    fae8:	00c6303a 	nor	r3,zero,r3
    faec:	18003a1e 	bne	r3,zero,fbd8 <__adddf3+0x614>
    faf0:	3463c83a 	sub	r17,r6,r17
    faf4:	4a07c83a 	sub	r3,r9,r8
    faf8:	344d803a 	cmpltu	r6,r6,r17
    fafc:	1991c83a 	sub	r8,r3,r6
    fb00:	1021883a 	mov	r16,r2
    fb04:	3825883a 	mov	r18,r7
    fb08:	003f0a06 	br	f734 <__alt_data_end+0xff00f734>
    fb0c:	2023883a 	mov	r17,r4
    fb10:	003f0d06 	br	f748 <__alt_data_end+0xff00f748>
    fb14:	0081ffc4 	movi	r2,2047
    fb18:	80bf3f1e 	bne	r16,r2,f818 <__alt_data_end+0xff00f818>
    fb1c:	003ec806 	br	f640 <__alt_data_end+0xff00f640>
    fb20:	0005883a 	mov	r2,zero
    fb24:	003fb106 	br	f9ec <__alt_data_end+0xff00f9ec>
    fb28:	0007883a 	mov	r3,zero
    fb2c:	003fbc06 	br	fa20 <__alt_data_end+0xff00fa20>
    fb30:	4444b03a 	or	r2,r8,r17
    fb34:	8000871e 	bne	r16,zero,fd54 <__adddf3+0x790>
    fb38:	1000ba26 	beq	r2,zero,fe24 <__adddf3+0x860>
    fb3c:	4984b03a 	or	r2,r9,r6
    fb40:	103ebf26 	beq	r2,zero,f640 <__alt_data_end+0xff00f640>
    fb44:	8985883a 	add	r2,r17,r6
    fb48:	4247883a 	add	r3,r8,r9
    fb4c:	1451803a 	cmpltu	r8,r2,r17
    fb50:	40d1883a 	add	r8,r8,r3
    fb54:	40c0202c 	andhi	r3,r8,128
    fb58:	1023883a 	mov	r17,r2
    fb5c:	183f1a26 	beq	r3,zero,f7c8 <__alt_data_end+0xff00f7c8>
    fb60:	00bfe034 	movhi	r2,65408
    fb64:	10bfffc4 	addi	r2,r2,-1
    fb68:	2021883a 	mov	r16,r4
    fb6c:	4090703a 	and	r8,r8,r2
    fb70:	003eb306 	br	f640 <__alt_data_end+0xff00f640>
    fb74:	4444b03a 	or	r2,r8,r17
    fb78:	8000291e 	bne	r16,zero,fc20 <__adddf3+0x65c>
    fb7c:	10004b1e 	bne	r2,zero,fcac <__adddf3+0x6e8>
    fb80:	4990b03a 	or	r8,r9,r6
    fb84:	40008b26 	beq	r8,zero,fdb4 <__adddf3+0x7f0>
    fb88:	4811883a 	mov	r8,r9
    fb8c:	3023883a 	mov	r17,r6
    fb90:	3825883a 	mov	r18,r7
    fb94:	003eaa06 	br	f640 <__alt_data_end+0xff00f640>
    fb98:	1021883a 	mov	r16,r2
    fb9c:	0011883a 	mov	r8,zero
    fba0:	0005883a 	mov	r2,zero
    fba4:	003f0f06 	br	f7e4 <__alt_data_end+0xff00f7e4>
    fba8:	217ff804 	addi	r5,r4,-32
    fbac:	00800804 	movi	r2,32
    fbb0:	494ad83a 	srl	r5,r9,r5
    fbb4:	20807d26 	beq	r4,r2,fdac <__adddf3+0x7e8>
    fbb8:	00801004 	movi	r2,64
    fbbc:	1109c83a 	sub	r4,r2,r4
    fbc0:	4912983a 	sll	r9,r9,r4
    fbc4:	498cb03a 	or	r6,r9,r6
    fbc8:	300cc03a 	cmpne	r6,r6,zero
    fbcc:	298ab03a 	or	r5,r5,r6
    fbd0:	0013883a 	mov	r9,zero
    fbd4:	003f1506 	br	f82c <__alt_data_end+0xff00f82c>
    fbd8:	0101ffc4 	movi	r4,2047
    fbdc:	113f9a1e 	bne	r2,r4,fa48 <__alt_data_end+0xff00fa48>
    fbe0:	4811883a 	mov	r8,r9
    fbe4:	3023883a 	mov	r17,r6
    fbe8:	1021883a 	mov	r16,r2
    fbec:	3825883a 	mov	r18,r7
    fbf0:	003e9306 	br	f640 <__alt_data_end+0xff00f640>
    fbf4:	8000161e 	bne	r16,zero,fc50 <__adddf3+0x68c>
    fbf8:	444ab03a 	or	r5,r8,r17
    fbfc:	28005126 	beq	r5,zero,fd44 <__adddf3+0x780>
    fc00:	0108303a 	nor	r4,zero,r4
    fc04:	20004d1e 	bne	r4,zero,fd3c <__adddf3+0x778>
    fc08:	89a3883a 	add	r17,r17,r6
    fc0c:	4253883a 	add	r9,r8,r9
    fc10:	898d803a 	cmpltu	r6,r17,r6
    fc14:	3251883a 	add	r8,r6,r9
    fc18:	1021883a 	mov	r16,r2
    fc1c:	003f0806 	br	f840 <__alt_data_end+0xff00f840>
    fc20:	1000301e 	bne	r2,zero,fce4 <__adddf3+0x720>
    fc24:	4984b03a 	or	r2,r9,r6
    fc28:	10007126 	beq	r2,zero,fdf0 <__adddf3+0x82c>
    fc2c:	4811883a 	mov	r8,r9
    fc30:	3023883a 	mov	r17,r6
    fc34:	3825883a 	mov	r18,r7
    fc38:	0401ffc4 	movi	r16,2047
    fc3c:	003e8006 	br	f640 <__alt_data_end+0xff00f640>
    fc40:	4462b03a 	or	r17,r8,r17
    fc44:	8822c03a 	cmpne	r17,r17,zero
    fc48:	0007883a 	mov	r3,zero
    fc4c:	003f8b06 	br	fa7c <__alt_data_end+0xff00fa7c>
    fc50:	0141ffc4 	movi	r5,2047
    fc54:	11403b26 	beq	r2,r5,fd44 <__adddf3+0x780>
    fc58:	0109c83a 	sub	r4,zero,r4
    fc5c:	42002034 	orhi	r8,r8,128
    fc60:	01400e04 	movi	r5,56
    fc64:	29006716 	blt	r5,r4,fe04 <__adddf3+0x840>
    fc68:	014007c4 	movi	r5,31
    fc6c:	29007016 	blt	r5,r4,fe30 <__adddf3+0x86c>
    fc70:	01400804 	movi	r5,32
    fc74:	290bc83a 	sub	r5,r5,r4
    fc78:	4154983a 	sll	r10,r8,r5
    fc7c:	890ed83a 	srl	r7,r17,r4
    fc80:	894a983a 	sll	r5,r17,r5
    fc84:	4108d83a 	srl	r4,r8,r4
    fc88:	51e2b03a 	or	r17,r10,r7
    fc8c:	280ac03a 	cmpne	r5,r5,zero
    fc90:	8962b03a 	or	r17,r17,r5
    fc94:	89a3883a 	add	r17,r17,r6
    fc98:	2253883a 	add	r9,r4,r9
    fc9c:	898d803a 	cmpltu	r6,r17,r6
    fca0:	3251883a 	add	r8,r6,r9
    fca4:	1021883a 	mov	r16,r2
    fca8:	003ee506 	br	f840 <__alt_data_end+0xff00f840>
    fcac:	4984b03a 	or	r2,r9,r6
    fcb0:	103e6326 	beq	r2,zero,f640 <__alt_data_end+0xff00f640>
    fcb4:	8987c83a 	sub	r3,r17,r6
    fcb8:	88c9803a 	cmpltu	r4,r17,r3
    fcbc:	4245c83a 	sub	r2,r8,r9
    fcc0:	1105c83a 	sub	r2,r2,r4
    fcc4:	1100202c 	andhi	r4,r2,128
    fcc8:	203ebb26 	beq	r4,zero,f7b8 <__alt_data_end+0xff00f7b8>
    fccc:	3463c83a 	sub	r17,r6,r17
    fcd0:	4a07c83a 	sub	r3,r9,r8
    fcd4:	344d803a 	cmpltu	r6,r6,r17
    fcd8:	1991c83a 	sub	r8,r3,r6
    fcdc:	3825883a 	mov	r18,r7
    fce0:	003e5706 	br	f640 <__alt_data_end+0xff00f640>
    fce4:	4984b03a 	or	r2,r9,r6
    fce8:	10002e26 	beq	r2,zero,fda4 <__adddf3+0x7e0>
    fcec:	4004d0fa 	srli	r2,r8,3
    fcf0:	8822d0fa 	srli	r17,r17,3
    fcf4:	4010977a 	slli	r8,r8,29
    fcf8:	10c0022c 	andhi	r3,r2,8
    fcfc:	4462b03a 	or	r17,r8,r17
    fd00:	18000826 	beq	r3,zero,fd24 <__adddf3+0x760>
    fd04:	4808d0fa 	srli	r4,r9,3
    fd08:	20c0022c 	andhi	r3,r4,8
    fd0c:	1800051e 	bne	r3,zero,fd24 <__adddf3+0x760>
    fd10:	300cd0fa 	srli	r6,r6,3
    fd14:	4806977a 	slli	r3,r9,29
    fd18:	2005883a 	mov	r2,r4
    fd1c:	3825883a 	mov	r18,r7
    fd20:	19a2b03a 	or	r17,r3,r6
    fd24:	8810d77a 	srli	r8,r17,29
    fd28:	100490fa 	slli	r2,r2,3
    fd2c:	882290fa 	slli	r17,r17,3
    fd30:	0401ffc4 	movi	r16,2047
    fd34:	4090b03a 	or	r8,r8,r2
    fd38:	003e4106 	br	f640 <__alt_data_end+0xff00f640>
    fd3c:	0141ffc4 	movi	r5,2047
    fd40:	117fc71e 	bne	r2,r5,fc60 <__alt_data_end+0xff00fc60>
    fd44:	4811883a 	mov	r8,r9
    fd48:	3023883a 	mov	r17,r6
    fd4c:	1021883a 	mov	r16,r2
    fd50:	003e3b06 	br	f640 <__alt_data_end+0xff00f640>
    fd54:	10002f26 	beq	r2,zero,fe14 <__adddf3+0x850>
    fd58:	4984b03a 	or	r2,r9,r6
    fd5c:	10001126 	beq	r2,zero,fda4 <__adddf3+0x7e0>
    fd60:	4004d0fa 	srli	r2,r8,3
    fd64:	8822d0fa 	srli	r17,r17,3
    fd68:	4010977a 	slli	r8,r8,29
    fd6c:	10c0022c 	andhi	r3,r2,8
    fd70:	4462b03a 	or	r17,r8,r17
    fd74:	183feb26 	beq	r3,zero,fd24 <__alt_data_end+0xff00fd24>
    fd78:	4808d0fa 	srli	r4,r9,3
    fd7c:	20c0022c 	andhi	r3,r4,8
    fd80:	183fe81e 	bne	r3,zero,fd24 <__alt_data_end+0xff00fd24>
    fd84:	300cd0fa 	srli	r6,r6,3
    fd88:	4806977a 	slli	r3,r9,29
    fd8c:	2005883a 	mov	r2,r4
    fd90:	19a2b03a 	or	r17,r3,r6
    fd94:	003fe306 	br	fd24 <__alt_data_end+0xff00fd24>
    fd98:	0011883a 	mov	r8,zero
    fd9c:	0005883a 	mov	r2,zero
    fda0:	003e3f06 	br	f6a0 <__alt_data_end+0xff00f6a0>
    fda4:	0401ffc4 	movi	r16,2047
    fda8:	003e2506 	br	f640 <__alt_data_end+0xff00f640>
    fdac:	0013883a 	mov	r9,zero
    fdb0:	003f8406 	br	fbc4 <__alt_data_end+0xff00fbc4>
    fdb4:	0005883a 	mov	r2,zero
    fdb8:	0007883a 	mov	r3,zero
    fdbc:	003e8906 	br	f7e4 <__alt_data_end+0xff00f7e4>
    fdc0:	197ff804 	addi	r5,r3,-32
    fdc4:	01000804 	movi	r4,32
    fdc8:	414ad83a 	srl	r5,r8,r5
    fdcc:	19002426 	beq	r3,r4,fe60 <__adddf3+0x89c>
    fdd0:	01001004 	movi	r4,64
    fdd4:	20c7c83a 	sub	r3,r4,r3
    fdd8:	40c6983a 	sll	r3,r8,r3
    fddc:	1c46b03a 	or	r3,r3,r17
    fde0:	1806c03a 	cmpne	r3,r3,zero
    fde4:	28e2b03a 	or	r17,r5,r3
    fde8:	0007883a 	mov	r3,zero
    fdec:	003f2306 	br	fa7c <__alt_data_end+0xff00fa7c>
    fdf0:	0007883a 	mov	r3,zero
    fdf4:	5811883a 	mov	r8,r11
    fdf8:	00bfffc4 	movi	r2,-1
    fdfc:	0401ffc4 	movi	r16,2047
    fe00:	003e7806 	br	f7e4 <__alt_data_end+0xff00f7e4>
    fe04:	4462b03a 	or	r17,r8,r17
    fe08:	8822c03a 	cmpne	r17,r17,zero
    fe0c:	0009883a 	mov	r4,zero
    fe10:	003fa006 	br	fc94 <__alt_data_end+0xff00fc94>
    fe14:	4811883a 	mov	r8,r9
    fe18:	3023883a 	mov	r17,r6
    fe1c:	0401ffc4 	movi	r16,2047
    fe20:	003e0706 	br	f640 <__alt_data_end+0xff00f640>
    fe24:	4811883a 	mov	r8,r9
    fe28:	3023883a 	mov	r17,r6
    fe2c:	003e0406 	br	f640 <__alt_data_end+0xff00f640>
    fe30:	21fff804 	addi	r7,r4,-32
    fe34:	01400804 	movi	r5,32
    fe38:	41ced83a 	srl	r7,r8,r7
    fe3c:	21400a26 	beq	r4,r5,fe68 <__adddf3+0x8a4>
    fe40:	01401004 	movi	r5,64
    fe44:	2909c83a 	sub	r4,r5,r4
    fe48:	4108983a 	sll	r4,r8,r4
    fe4c:	2448b03a 	or	r4,r4,r17
    fe50:	2008c03a 	cmpne	r4,r4,zero
    fe54:	3922b03a 	or	r17,r7,r4
    fe58:	0009883a 	mov	r4,zero
    fe5c:	003f8d06 	br	fc94 <__alt_data_end+0xff00fc94>
    fe60:	0007883a 	mov	r3,zero
    fe64:	003fdd06 	br	fddc <__alt_data_end+0xff00fddc>
    fe68:	0009883a 	mov	r4,zero
    fe6c:	003ff706 	br	fe4c <__alt_data_end+0xff00fe4c>

0000fe70 <__eqdf2>:
    fe70:	2804d53a 	srli	r2,r5,20
    fe74:	3806d53a 	srli	r3,r7,20
    fe78:	02000434 	movhi	r8,16
    fe7c:	423fffc4 	addi	r8,r8,-1
    fe80:	1081ffcc 	andi	r2,r2,2047
    fe84:	0281ffc4 	movi	r10,2047
    fe88:	2a12703a 	and	r9,r5,r8
    fe8c:	18c1ffcc 	andi	r3,r3,2047
    fe90:	3a10703a 	and	r8,r7,r8
    fe94:	280ad7fa 	srli	r5,r5,31
    fe98:	380ed7fa 	srli	r7,r7,31
    fe9c:	12801026 	beq	r2,r10,fee0 <__eqdf2+0x70>
    fea0:	0281ffc4 	movi	r10,2047
    fea4:	1a800a26 	beq	r3,r10,fed0 <__eqdf2+0x60>
    fea8:	10c00226 	beq	r2,r3,feb4 <__eqdf2+0x44>
    feac:	00800044 	movi	r2,1
    feb0:	f800283a 	ret
    feb4:	4a3ffd1e 	bne	r9,r8,feac <__alt_data_end+0xff00feac>
    feb8:	21bffc1e 	bne	r4,r6,feac <__alt_data_end+0xff00feac>
    febc:	29c00c26 	beq	r5,r7,fef0 <__eqdf2+0x80>
    fec0:	103ffa1e 	bne	r2,zero,feac <__alt_data_end+0xff00feac>
    fec4:	2244b03a 	or	r2,r4,r9
    fec8:	1004c03a 	cmpne	r2,r2,zero
    fecc:	f800283a 	ret
    fed0:	3214b03a 	or	r10,r6,r8
    fed4:	503ff426 	beq	r10,zero,fea8 <__alt_data_end+0xff00fea8>
    fed8:	00800044 	movi	r2,1
    fedc:	f800283a 	ret
    fee0:	2254b03a 	or	r10,r4,r9
    fee4:	503fee26 	beq	r10,zero,fea0 <__alt_data_end+0xff00fea0>
    fee8:	00800044 	movi	r2,1
    feec:	f800283a 	ret
    fef0:	0005883a 	mov	r2,zero
    fef4:	f800283a 	ret

0000fef8 <__gedf2>:
    fef8:	2804d53a 	srli	r2,r5,20
    fefc:	3806d53a 	srli	r3,r7,20
    ff00:	02000434 	movhi	r8,16
    ff04:	423fffc4 	addi	r8,r8,-1
    ff08:	1081ffcc 	andi	r2,r2,2047
    ff0c:	0241ffc4 	movi	r9,2047
    ff10:	2a14703a 	and	r10,r5,r8
    ff14:	18c1ffcc 	andi	r3,r3,2047
    ff18:	3a10703a 	and	r8,r7,r8
    ff1c:	280ad7fa 	srli	r5,r5,31
    ff20:	380ed7fa 	srli	r7,r7,31
    ff24:	12401d26 	beq	r2,r9,ff9c <__gedf2+0xa4>
    ff28:	0241ffc4 	movi	r9,2047
    ff2c:	1a401226 	beq	r3,r9,ff78 <__gedf2+0x80>
    ff30:	1000081e 	bne	r2,zero,ff54 <__gedf2+0x5c>
    ff34:	2296b03a 	or	r11,r4,r10
    ff38:	5813003a 	cmpeq	r9,r11,zero
    ff3c:	1800091e 	bne	r3,zero,ff64 <__gedf2+0x6c>
    ff40:	3218b03a 	or	r12,r6,r8
    ff44:	6000071e 	bne	r12,zero,ff64 <__gedf2+0x6c>
    ff48:	0005883a 	mov	r2,zero
    ff4c:	5800101e 	bne	r11,zero,ff90 <__gedf2+0x98>
    ff50:	f800283a 	ret
    ff54:	18000c1e 	bne	r3,zero,ff88 <__gedf2+0x90>
    ff58:	3212b03a 	or	r9,r6,r8
    ff5c:	48000c26 	beq	r9,zero,ff90 <__gedf2+0x98>
    ff60:	0013883a 	mov	r9,zero
    ff64:	39c03fcc 	andi	r7,r7,255
    ff68:	48000826 	beq	r9,zero,ff8c <__gedf2+0x94>
    ff6c:	38000926 	beq	r7,zero,ff94 <__gedf2+0x9c>
    ff70:	00800044 	movi	r2,1
    ff74:	f800283a 	ret
    ff78:	3212b03a 	or	r9,r6,r8
    ff7c:	483fec26 	beq	r9,zero,ff30 <__alt_data_end+0xff00ff30>
    ff80:	00bfff84 	movi	r2,-2
    ff84:	f800283a 	ret
    ff88:	39c03fcc 	andi	r7,r7,255
    ff8c:	29c00626 	beq	r5,r7,ffa8 <__gedf2+0xb0>
    ff90:	283ff726 	beq	r5,zero,ff70 <__alt_data_end+0xff00ff70>
    ff94:	00bfffc4 	movi	r2,-1
    ff98:	f800283a 	ret
    ff9c:	2292b03a 	or	r9,r4,r10
    ffa0:	483fe126 	beq	r9,zero,ff28 <__alt_data_end+0xff00ff28>
    ffa4:	003ff606 	br	ff80 <__alt_data_end+0xff00ff80>
    ffa8:	18bff916 	blt	r3,r2,ff90 <__alt_data_end+0xff00ff90>
    ffac:	10c00316 	blt	r2,r3,ffbc <__gedf2+0xc4>
    ffb0:	42bff736 	bltu	r8,r10,ff90 <__alt_data_end+0xff00ff90>
    ffb4:	52000326 	beq	r10,r8,ffc4 <__gedf2+0xcc>
    ffb8:	5200042e 	bgeu	r10,r8,ffcc <__gedf2+0xd4>
    ffbc:	283fec1e 	bne	r5,zero,ff70 <__alt_data_end+0xff00ff70>
    ffc0:	003ff406 	br	ff94 <__alt_data_end+0xff00ff94>
    ffc4:	313ff236 	bltu	r6,r4,ff90 <__alt_data_end+0xff00ff90>
    ffc8:	21bffc36 	bltu	r4,r6,ffbc <__alt_data_end+0xff00ffbc>
    ffcc:	0005883a 	mov	r2,zero
    ffd0:	f800283a 	ret

0000ffd4 <__ledf2>:
    ffd4:	2804d53a 	srli	r2,r5,20
    ffd8:	3810d53a 	srli	r8,r7,20
    ffdc:	00c00434 	movhi	r3,16
    ffe0:	18ffffc4 	addi	r3,r3,-1
    ffe4:	1081ffcc 	andi	r2,r2,2047
    ffe8:	0241ffc4 	movi	r9,2047
    ffec:	28d4703a 	and	r10,r5,r3
    fff0:	4201ffcc 	andi	r8,r8,2047
    fff4:	38c6703a 	and	r3,r7,r3
    fff8:	280ad7fa 	srli	r5,r5,31
    fffc:	380ed7fa 	srli	r7,r7,31
   10000:	12401f26 	beq	r2,r9,10080 <__ledf2+0xac>
   10004:	0241ffc4 	movi	r9,2047
   10008:	42401426 	beq	r8,r9,1005c <__ledf2+0x88>
   1000c:	1000091e 	bne	r2,zero,10034 <__ledf2+0x60>
   10010:	2296b03a 	or	r11,r4,r10
   10014:	5813003a 	cmpeq	r9,r11,zero
   10018:	29403fcc 	andi	r5,r5,255
   1001c:	40000a1e 	bne	r8,zero,10048 <__ledf2+0x74>
   10020:	30d8b03a 	or	r12,r6,r3
   10024:	6000081e 	bne	r12,zero,10048 <__ledf2+0x74>
   10028:	0005883a 	mov	r2,zero
   1002c:	5800111e 	bne	r11,zero,10074 <__ledf2+0xa0>
   10030:	f800283a 	ret
   10034:	29403fcc 	andi	r5,r5,255
   10038:	40000c1e 	bne	r8,zero,1006c <__ledf2+0x98>
   1003c:	30d2b03a 	or	r9,r6,r3
   10040:	48000c26 	beq	r9,zero,10074 <__ledf2+0xa0>
   10044:	0013883a 	mov	r9,zero
   10048:	39c03fcc 	andi	r7,r7,255
   1004c:	48000826 	beq	r9,zero,10070 <__ledf2+0x9c>
   10050:	38001126 	beq	r7,zero,10098 <__ledf2+0xc4>
   10054:	00800044 	movi	r2,1
   10058:	f800283a 	ret
   1005c:	30d2b03a 	or	r9,r6,r3
   10060:	483fea26 	beq	r9,zero,1000c <__alt_data_end+0xff01000c>
   10064:	00800084 	movi	r2,2
   10068:	f800283a 	ret
   1006c:	39c03fcc 	andi	r7,r7,255
   10070:	39400726 	beq	r7,r5,10090 <__ledf2+0xbc>
   10074:	2800081e 	bne	r5,zero,10098 <__ledf2+0xc4>
   10078:	00800044 	movi	r2,1
   1007c:	f800283a 	ret
   10080:	2292b03a 	or	r9,r4,r10
   10084:	483fdf26 	beq	r9,zero,10004 <__alt_data_end+0xff010004>
   10088:	00800084 	movi	r2,2
   1008c:	f800283a 	ret
   10090:	4080030e 	bge	r8,r2,100a0 <__ledf2+0xcc>
   10094:	383fef26 	beq	r7,zero,10054 <__alt_data_end+0xff010054>
   10098:	00bfffc4 	movi	r2,-1
   1009c:	f800283a 	ret
   100a0:	123feb16 	blt	r2,r8,10050 <__alt_data_end+0xff010050>
   100a4:	1abff336 	bltu	r3,r10,10074 <__alt_data_end+0xff010074>
   100a8:	50c00326 	beq	r10,r3,100b8 <__ledf2+0xe4>
   100ac:	50c0042e 	bgeu	r10,r3,100c0 <__ledf2+0xec>
   100b0:	283fe81e 	bne	r5,zero,10054 <__alt_data_end+0xff010054>
   100b4:	003ff806 	br	10098 <__alt_data_end+0xff010098>
   100b8:	313fee36 	bltu	r6,r4,10074 <__alt_data_end+0xff010074>
   100bc:	21bffc36 	bltu	r4,r6,100b0 <__alt_data_end+0xff0100b0>
   100c0:	0005883a 	mov	r2,zero
   100c4:	f800283a 	ret

000100c8 <__muldf3>:
   100c8:	defff304 	addi	sp,sp,-52
   100cc:	2804d53a 	srli	r2,r5,20
   100d0:	dd800915 	stw	r22,36(sp)
   100d4:	282cd7fa 	srli	r22,r5,31
   100d8:	dc000315 	stw	r16,12(sp)
   100dc:	04000434 	movhi	r16,16
   100e0:	dd400815 	stw	r21,32(sp)
   100e4:	dc800515 	stw	r18,20(sp)
   100e8:	843fffc4 	addi	r16,r16,-1
   100ec:	dfc00c15 	stw	ra,48(sp)
   100f0:	df000b15 	stw	fp,44(sp)
   100f4:	ddc00a15 	stw	r23,40(sp)
   100f8:	dd000715 	stw	r20,28(sp)
   100fc:	dcc00615 	stw	r19,24(sp)
   10100:	dc400415 	stw	r17,16(sp)
   10104:	1481ffcc 	andi	r18,r2,2047
   10108:	2c20703a 	and	r16,r5,r16
   1010c:	b02b883a 	mov	r21,r22
   10110:	b2403fcc 	andi	r9,r22,255
   10114:	90006026 	beq	r18,zero,10298 <__muldf3+0x1d0>
   10118:	0081ffc4 	movi	r2,2047
   1011c:	2029883a 	mov	r20,r4
   10120:	90803626 	beq	r18,r2,101fc <__muldf3+0x134>
   10124:	80800434 	orhi	r2,r16,16
   10128:	100490fa 	slli	r2,r2,3
   1012c:	2020d77a 	srli	r16,r4,29
   10130:	202890fa 	slli	r20,r4,3
   10134:	94bf0044 	addi	r18,r18,-1023
   10138:	80a0b03a 	or	r16,r16,r2
   1013c:	0027883a 	mov	r19,zero
   10140:	0039883a 	mov	fp,zero
   10144:	3804d53a 	srli	r2,r7,20
   10148:	382ed7fa 	srli	r23,r7,31
   1014c:	04400434 	movhi	r17,16
   10150:	8c7fffc4 	addi	r17,r17,-1
   10154:	1081ffcc 	andi	r2,r2,2047
   10158:	3011883a 	mov	r8,r6
   1015c:	3c62703a 	and	r17,r7,r17
   10160:	ba803fcc 	andi	r10,r23,255
   10164:	10006d26 	beq	r2,zero,1031c <__muldf3+0x254>
   10168:	00c1ffc4 	movi	r3,2047
   1016c:	10c06526 	beq	r2,r3,10304 <__muldf3+0x23c>
   10170:	88c00434 	orhi	r3,r17,16
   10174:	180690fa 	slli	r3,r3,3
   10178:	3022d77a 	srli	r17,r6,29
   1017c:	301090fa 	slli	r8,r6,3
   10180:	10bf0044 	addi	r2,r2,-1023
   10184:	88e2b03a 	or	r17,r17,r3
   10188:	000b883a 	mov	r5,zero
   1018c:	9085883a 	add	r2,r18,r2
   10190:	2cc8b03a 	or	r4,r5,r19
   10194:	00c003c4 	movi	r3,15
   10198:	bdacf03a 	xor	r22,r23,r22
   1019c:	12c00044 	addi	r11,r2,1
   101a0:	19009936 	bltu	r3,r4,10408 <__muldf3+0x340>
   101a4:	200890ba 	slli	r4,r4,2
   101a8:	00c00074 	movhi	r3,1
   101ac:	18c06f04 	addi	r3,r3,444
   101b0:	20c9883a 	add	r4,r4,r3
   101b4:	20c00017 	ldw	r3,0(r4)
   101b8:	1800683a 	jmp	r3
   101bc:	00010408 	cmpgei	zero,zero,1040
   101c0:	0001021c 	xori	zero,zero,1032
   101c4:	0001021c 	xori	zero,zero,1032
   101c8:	00010218 	cmpnei	zero,zero,1032
   101cc:	000103e4 	muli	zero,zero,1039
   101d0:	000103e4 	muli	zero,zero,1039
   101d4:	000103cc 	andi	zero,zero,1039
   101d8:	00010218 	cmpnei	zero,zero,1032
   101dc:	000103e4 	muli	zero,zero,1039
   101e0:	000103cc 	andi	zero,zero,1039
   101e4:	000103e4 	muli	zero,zero,1039
   101e8:	00010218 	cmpnei	zero,zero,1032
   101ec:	000103f4 	movhi	zero,1039
   101f0:	000103f4 	movhi	zero,1039
   101f4:	000103f4 	movhi	zero,1039
   101f8:	00010610 	cmplti	zero,zero,1048
   101fc:	2404b03a 	or	r2,r4,r16
   10200:	10006f1e 	bne	r2,zero,103c0 <__muldf3+0x2f8>
   10204:	04c00204 	movi	r19,8
   10208:	0021883a 	mov	r16,zero
   1020c:	0029883a 	mov	r20,zero
   10210:	07000084 	movi	fp,2
   10214:	003fcb06 	br	10144 <__alt_data_end+0xff010144>
   10218:	502d883a 	mov	r22,r10
   1021c:	00800084 	movi	r2,2
   10220:	28805726 	beq	r5,r2,10380 <__muldf3+0x2b8>
   10224:	008000c4 	movi	r2,3
   10228:	28816626 	beq	r5,r2,107c4 <__muldf3+0x6fc>
   1022c:	00800044 	movi	r2,1
   10230:	2881411e 	bne	r5,r2,10738 <__muldf3+0x670>
   10234:	b02b883a 	mov	r21,r22
   10238:	0005883a 	mov	r2,zero
   1023c:	000b883a 	mov	r5,zero
   10240:	0029883a 	mov	r20,zero
   10244:	1004953a 	slli	r2,r2,20
   10248:	a8c03fcc 	andi	r3,r21,255
   1024c:	04400434 	movhi	r17,16
   10250:	8c7fffc4 	addi	r17,r17,-1
   10254:	180697fa 	slli	r3,r3,31
   10258:	2c4a703a 	and	r5,r5,r17
   1025c:	288ab03a 	or	r5,r5,r2
   10260:	28c6b03a 	or	r3,r5,r3
   10264:	a005883a 	mov	r2,r20
   10268:	dfc00c17 	ldw	ra,48(sp)
   1026c:	df000b17 	ldw	fp,44(sp)
   10270:	ddc00a17 	ldw	r23,40(sp)
   10274:	dd800917 	ldw	r22,36(sp)
   10278:	dd400817 	ldw	r21,32(sp)
   1027c:	dd000717 	ldw	r20,28(sp)
   10280:	dcc00617 	ldw	r19,24(sp)
   10284:	dc800517 	ldw	r18,20(sp)
   10288:	dc400417 	ldw	r17,16(sp)
   1028c:	dc000317 	ldw	r16,12(sp)
   10290:	dec00d04 	addi	sp,sp,52
   10294:	f800283a 	ret
   10298:	2404b03a 	or	r2,r4,r16
   1029c:	2027883a 	mov	r19,r4
   102a0:	10004226 	beq	r2,zero,103ac <__muldf3+0x2e4>
   102a4:	8000fc26 	beq	r16,zero,10698 <__muldf3+0x5d0>
   102a8:	8009883a 	mov	r4,r16
   102ac:	d9800215 	stw	r6,8(sp)
   102b0:	d9c00015 	stw	r7,0(sp)
   102b4:	da400115 	stw	r9,4(sp)
   102b8:	00054340 	call	5434 <__clzsi2>
   102bc:	d9800217 	ldw	r6,8(sp)
   102c0:	d9c00017 	ldw	r7,0(sp)
   102c4:	da400117 	ldw	r9,4(sp)
   102c8:	113ffd44 	addi	r4,r2,-11
   102cc:	00c00704 	movi	r3,28
   102d0:	1900ed16 	blt	r3,r4,10688 <__muldf3+0x5c0>
   102d4:	00c00744 	movi	r3,29
   102d8:	147ffe04 	addi	r17,r2,-8
   102dc:	1907c83a 	sub	r3,r3,r4
   102e0:	8460983a 	sll	r16,r16,r17
   102e4:	98c6d83a 	srl	r3,r19,r3
   102e8:	9c68983a 	sll	r20,r19,r17
   102ec:	1c20b03a 	or	r16,r3,r16
   102f0:	1080fcc4 	addi	r2,r2,1011
   102f4:	00a5c83a 	sub	r18,zero,r2
   102f8:	0027883a 	mov	r19,zero
   102fc:	0039883a 	mov	fp,zero
   10300:	003f9006 	br	10144 <__alt_data_end+0xff010144>
   10304:	3446b03a 	or	r3,r6,r17
   10308:	1800261e 	bne	r3,zero,103a4 <__muldf3+0x2dc>
   1030c:	0023883a 	mov	r17,zero
   10310:	0011883a 	mov	r8,zero
   10314:	01400084 	movi	r5,2
   10318:	003f9c06 	br	1018c <__alt_data_end+0xff01018c>
   1031c:	3446b03a 	or	r3,r6,r17
   10320:	18001c26 	beq	r3,zero,10394 <__muldf3+0x2cc>
   10324:	8800ce26 	beq	r17,zero,10660 <__muldf3+0x598>
   10328:	8809883a 	mov	r4,r17
   1032c:	d9800215 	stw	r6,8(sp)
   10330:	da400115 	stw	r9,4(sp)
   10334:	da800015 	stw	r10,0(sp)
   10338:	00054340 	call	5434 <__clzsi2>
   1033c:	d9800217 	ldw	r6,8(sp)
   10340:	da400117 	ldw	r9,4(sp)
   10344:	da800017 	ldw	r10,0(sp)
   10348:	113ffd44 	addi	r4,r2,-11
   1034c:	00c00704 	movi	r3,28
   10350:	1900bf16 	blt	r3,r4,10650 <__muldf3+0x588>
   10354:	00c00744 	movi	r3,29
   10358:	123ffe04 	addi	r8,r2,-8
   1035c:	1907c83a 	sub	r3,r3,r4
   10360:	8a22983a 	sll	r17,r17,r8
   10364:	30c6d83a 	srl	r3,r6,r3
   10368:	3210983a 	sll	r8,r6,r8
   1036c:	1c62b03a 	or	r17,r3,r17
   10370:	1080fcc4 	addi	r2,r2,1011
   10374:	0085c83a 	sub	r2,zero,r2
   10378:	000b883a 	mov	r5,zero
   1037c:	003f8306 	br	1018c <__alt_data_end+0xff01018c>
   10380:	b02b883a 	mov	r21,r22
   10384:	0081ffc4 	movi	r2,2047
   10388:	000b883a 	mov	r5,zero
   1038c:	0029883a 	mov	r20,zero
   10390:	003fac06 	br	10244 <__alt_data_end+0xff010244>
   10394:	0023883a 	mov	r17,zero
   10398:	0011883a 	mov	r8,zero
   1039c:	01400044 	movi	r5,1
   103a0:	003f7a06 	br	1018c <__alt_data_end+0xff01018c>
   103a4:	014000c4 	movi	r5,3
   103a8:	003f7806 	br	1018c <__alt_data_end+0xff01018c>
   103ac:	04c00104 	movi	r19,4
   103b0:	0021883a 	mov	r16,zero
   103b4:	0029883a 	mov	r20,zero
   103b8:	07000044 	movi	fp,1
   103bc:	003f6106 	br	10144 <__alt_data_end+0xff010144>
   103c0:	04c00304 	movi	r19,12
   103c4:	070000c4 	movi	fp,3
   103c8:	003f5e06 	br	10144 <__alt_data_end+0xff010144>
   103cc:	01400434 	movhi	r5,16
   103d0:	002b883a 	mov	r21,zero
   103d4:	297fffc4 	addi	r5,r5,-1
   103d8:	053fffc4 	movi	r20,-1
   103dc:	0081ffc4 	movi	r2,2047
   103e0:	003f9806 	br	10244 <__alt_data_end+0xff010244>
   103e4:	8023883a 	mov	r17,r16
   103e8:	a011883a 	mov	r8,r20
   103ec:	e00b883a 	mov	r5,fp
   103f0:	003f8a06 	br	1021c <__alt_data_end+0xff01021c>
   103f4:	8023883a 	mov	r17,r16
   103f8:	a011883a 	mov	r8,r20
   103fc:	482d883a 	mov	r22,r9
   10400:	e00b883a 	mov	r5,fp
   10404:	003f8506 	br	1021c <__alt_data_end+0xff01021c>
   10408:	a00ad43a 	srli	r5,r20,16
   1040c:	401ad43a 	srli	r13,r8,16
   10410:	a53fffcc 	andi	r20,r20,65535
   10414:	423fffcc 	andi	r8,r8,65535
   10418:	4519383a 	mul	r12,r8,r20
   1041c:	4147383a 	mul	r3,r8,r5
   10420:	6d09383a 	mul	r4,r13,r20
   10424:	600cd43a 	srli	r6,r12,16
   10428:	2b5d383a 	mul	r14,r5,r13
   1042c:	20c9883a 	add	r4,r4,r3
   10430:	310d883a 	add	r6,r6,r4
   10434:	30c0022e 	bgeu	r6,r3,10440 <__muldf3+0x378>
   10438:	00c00074 	movhi	r3,1
   1043c:	70dd883a 	add	r14,r14,r3
   10440:	8826d43a 	srli	r19,r17,16
   10444:	8bffffcc 	andi	r15,r17,65535
   10448:	7d23383a 	mul	r17,r15,r20
   1044c:	7949383a 	mul	r4,r15,r5
   10450:	9d29383a 	mul	r20,r19,r20
   10454:	8814d43a 	srli	r10,r17,16
   10458:	3012943a 	slli	r9,r6,16
   1045c:	a129883a 	add	r20,r20,r4
   10460:	633fffcc 	andi	r12,r12,65535
   10464:	5515883a 	add	r10,r10,r20
   10468:	3006d43a 	srli	r3,r6,16
   1046c:	4b13883a 	add	r9,r9,r12
   10470:	2ccb383a 	mul	r5,r5,r19
   10474:	5100022e 	bgeu	r10,r4,10480 <__muldf3+0x3b8>
   10478:	01000074 	movhi	r4,1
   1047c:	290b883a 	add	r5,r5,r4
   10480:	802ad43a 	srli	r21,r16,16
   10484:	843fffcc 	andi	r16,r16,65535
   10488:	440d383a 	mul	r6,r8,r16
   1048c:	4565383a 	mul	r18,r8,r21
   10490:	8349383a 	mul	r4,r16,r13
   10494:	500e943a 	slli	r7,r10,16
   10498:	3010d43a 	srli	r8,r6,16
   1049c:	5028d43a 	srli	r20,r10,16
   104a0:	2489883a 	add	r4,r4,r18
   104a4:	8abfffcc 	andi	r10,r17,65535
   104a8:	3a95883a 	add	r10,r7,r10
   104ac:	4119883a 	add	r12,r8,r4
   104b0:	a169883a 	add	r20,r20,r5
   104b4:	1a87883a 	add	r3,r3,r10
   104b8:	6d5b383a 	mul	r13,r13,r21
   104bc:	6480022e 	bgeu	r12,r18,104c8 <__muldf3+0x400>
   104c0:	01000074 	movhi	r4,1
   104c4:	691b883a 	add	r13,r13,r4
   104c8:	7c25383a 	mul	r18,r15,r16
   104cc:	7d4b383a 	mul	r5,r15,r21
   104d0:	84cf383a 	mul	r7,r16,r19
   104d4:	901ed43a 	srli	r15,r18,16
   104d8:	6008d43a 	srli	r4,r12,16
   104dc:	6010943a 	slli	r8,r12,16
   104e0:	394f883a 	add	r7,r7,r5
   104e4:	333fffcc 	andi	r12,r6,65535
   104e8:	79df883a 	add	r15,r15,r7
   104ec:	235b883a 	add	r13,r4,r13
   104f0:	9d63383a 	mul	r17,r19,r21
   104f4:	4309883a 	add	r4,r8,r12
   104f8:	7940022e 	bgeu	r15,r5,10504 <__muldf3+0x43c>
   104fc:	01400074 	movhi	r5,1
   10500:	8963883a 	add	r17,r17,r5
   10504:	780a943a 	slli	r5,r15,16
   10508:	91bfffcc 	andi	r6,r18,65535
   1050c:	70c7883a 	add	r3,r14,r3
   10510:	298d883a 	add	r6,r5,r6
   10514:	1a8f803a 	cmpltu	r7,r3,r10
   10518:	350b883a 	add	r5,r6,r20
   1051c:	20c7883a 	add	r3,r4,r3
   10520:	3955883a 	add	r10,r7,r5
   10524:	1909803a 	cmpltu	r4,r3,r4
   10528:	6a91883a 	add	r8,r13,r10
   1052c:	780cd43a 	srli	r6,r15,16
   10530:	2219883a 	add	r12,r4,r8
   10534:	2d0b803a 	cmpltu	r5,r5,r20
   10538:	51cf803a 	cmpltu	r7,r10,r7
   1053c:	29ceb03a 	or	r7,r5,r7
   10540:	4351803a 	cmpltu	r8,r8,r13
   10544:	610b803a 	cmpltu	r5,r12,r4
   10548:	4148b03a 	or	r4,r8,r5
   1054c:	398f883a 	add	r7,r7,r6
   10550:	3909883a 	add	r4,r7,r4
   10554:	1810927a 	slli	r8,r3,9
   10558:	2449883a 	add	r4,r4,r17
   1055c:	2008927a 	slli	r4,r4,9
   10560:	6022d5fa 	srli	r17,r12,23
   10564:	1806d5fa 	srli	r3,r3,23
   10568:	4252b03a 	or	r9,r8,r9
   1056c:	600a927a 	slli	r5,r12,9
   10570:	4810c03a 	cmpne	r8,r9,zero
   10574:	2462b03a 	or	r17,r4,r17
   10578:	40c6b03a 	or	r3,r8,r3
   1057c:	8900402c 	andhi	r4,r17,256
   10580:	1950b03a 	or	r8,r3,r5
   10584:	20000726 	beq	r4,zero,105a4 <__muldf3+0x4dc>
   10588:	4006d07a 	srli	r3,r8,1
   1058c:	880497fa 	slli	r2,r17,31
   10590:	4200004c 	andi	r8,r8,1
   10594:	8822d07a 	srli	r17,r17,1
   10598:	1a10b03a 	or	r8,r3,r8
   1059c:	1210b03a 	or	r8,r2,r8
   105a0:	5805883a 	mov	r2,r11
   105a4:	1140ffc4 	addi	r5,r2,1023
   105a8:	0140440e 	bge	zero,r5,106bc <__muldf3+0x5f4>
   105ac:	40c001cc 	andi	r3,r8,7
   105b0:	18000726 	beq	r3,zero,105d0 <__muldf3+0x508>
   105b4:	40c003cc 	andi	r3,r8,15
   105b8:	01000104 	movi	r4,4
   105bc:	19000426 	beq	r3,r4,105d0 <__muldf3+0x508>
   105c0:	4107883a 	add	r3,r8,r4
   105c4:	1a11803a 	cmpltu	r8,r3,r8
   105c8:	8a23883a 	add	r17,r17,r8
   105cc:	1811883a 	mov	r8,r3
   105d0:	88c0402c 	andhi	r3,r17,256
   105d4:	18000426 	beq	r3,zero,105e8 <__muldf3+0x520>
   105d8:	11410004 	addi	r5,r2,1024
   105dc:	00bfc034 	movhi	r2,65280
   105e0:	10bfffc4 	addi	r2,r2,-1
   105e4:	88a2703a 	and	r17,r17,r2
   105e8:	0081ff84 	movi	r2,2046
   105ec:	117f6416 	blt	r2,r5,10380 <__alt_data_end+0xff010380>
   105f0:	8828977a 	slli	r20,r17,29
   105f4:	4010d0fa 	srli	r8,r8,3
   105f8:	8822927a 	slli	r17,r17,9
   105fc:	2881ffcc 	andi	r2,r5,2047
   10600:	a228b03a 	or	r20,r20,r8
   10604:	880ad33a 	srli	r5,r17,12
   10608:	b02b883a 	mov	r21,r22
   1060c:	003f0d06 	br	10244 <__alt_data_end+0xff010244>
   10610:	8080022c 	andhi	r2,r16,8
   10614:	10000926 	beq	r2,zero,1063c <__muldf3+0x574>
   10618:	8880022c 	andhi	r2,r17,8
   1061c:	1000071e 	bne	r2,zero,1063c <__muldf3+0x574>
   10620:	00800434 	movhi	r2,16
   10624:	89400234 	orhi	r5,r17,8
   10628:	10bfffc4 	addi	r2,r2,-1
   1062c:	b82b883a 	mov	r21,r23
   10630:	288a703a 	and	r5,r5,r2
   10634:	4029883a 	mov	r20,r8
   10638:	003f6806 	br	103dc <__alt_data_end+0xff0103dc>
   1063c:	00800434 	movhi	r2,16
   10640:	81400234 	orhi	r5,r16,8
   10644:	10bfffc4 	addi	r2,r2,-1
   10648:	288a703a 	and	r5,r5,r2
   1064c:	003f6306 	br	103dc <__alt_data_end+0xff0103dc>
   10650:	147ff604 	addi	r17,r2,-40
   10654:	3462983a 	sll	r17,r6,r17
   10658:	0011883a 	mov	r8,zero
   1065c:	003f4406 	br	10370 <__alt_data_end+0xff010370>
   10660:	3009883a 	mov	r4,r6
   10664:	d9800215 	stw	r6,8(sp)
   10668:	da400115 	stw	r9,4(sp)
   1066c:	da800015 	stw	r10,0(sp)
   10670:	00054340 	call	5434 <__clzsi2>
   10674:	10800804 	addi	r2,r2,32
   10678:	da800017 	ldw	r10,0(sp)
   1067c:	da400117 	ldw	r9,4(sp)
   10680:	d9800217 	ldw	r6,8(sp)
   10684:	003f3006 	br	10348 <__alt_data_end+0xff010348>
   10688:	143ff604 	addi	r16,r2,-40
   1068c:	9c20983a 	sll	r16,r19,r16
   10690:	0029883a 	mov	r20,zero
   10694:	003f1606 	br	102f0 <__alt_data_end+0xff0102f0>
   10698:	d9800215 	stw	r6,8(sp)
   1069c:	d9c00015 	stw	r7,0(sp)
   106a0:	da400115 	stw	r9,4(sp)
   106a4:	00054340 	call	5434 <__clzsi2>
   106a8:	10800804 	addi	r2,r2,32
   106ac:	da400117 	ldw	r9,4(sp)
   106b0:	d9c00017 	ldw	r7,0(sp)
   106b4:	d9800217 	ldw	r6,8(sp)
   106b8:	003f0306 	br	102c8 <__alt_data_end+0xff0102c8>
   106bc:	00c00044 	movi	r3,1
   106c0:	1947c83a 	sub	r3,r3,r5
   106c4:	00800e04 	movi	r2,56
   106c8:	10feda16 	blt	r2,r3,10234 <__alt_data_end+0xff010234>
   106cc:	008007c4 	movi	r2,31
   106d0:	10c01b16 	blt	r2,r3,10740 <__muldf3+0x678>
   106d4:	00800804 	movi	r2,32
   106d8:	10c5c83a 	sub	r2,r2,r3
   106dc:	888a983a 	sll	r5,r17,r2
   106e0:	40c8d83a 	srl	r4,r8,r3
   106e4:	4084983a 	sll	r2,r8,r2
   106e8:	88e2d83a 	srl	r17,r17,r3
   106ec:	2906b03a 	or	r3,r5,r4
   106f0:	1004c03a 	cmpne	r2,r2,zero
   106f4:	1886b03a 	or	r3,r3,r2
   106f8:	188001cc 	andi	r2,r3,7
   106fc:	10000726 	beq	r2,zero,1071c <__muldf3+0x654>
   10700:	188003cc 	andi	r2,r3,15
   10704:	01000104 	movi	r4,4
   10708:	11000426 	beq	r2,r4,1071c <__muldf3+0x654>
   1070c:	1805883a 	mov	r2,r3
   10710:	10c00104 	addi	r3,r2,4
   10714:	1885803a 	cmpltu	r2,r3,r2
   10718:	88a3883a 	add	r17,r17,r2
   1071c:	8880202c 	andhi	r2,r17,128
   10720:	10001c26 	beq	r2,zero,10794 <__muldf3+0x6cc>
   10724:	b02b883a 	mov	r21,r22
   10728:	00800044 	movi	r2,1
   1072c:	000b883a 	mov	r5,zero
   10730:	0029883a 	mov	r20,zero
   10734:	003ec306 	br	10244 <__alt_data_end+0xff010244>
   10738:	5805883a 	mov	r2,r11
   1073c:	003f9906 	br	105a4 <__alt_data_end+0xff0105a4>
   10740:	00bff844 	movi	r2,-31
   10744:	1145c83a 	sub	r2,r2,r5
   10748:	8888d83a 	srl	r4,r17,r2
   1074c:	00800804 	movi	r2,32
   10750:	18801a26 	beq	r3,r2,107bc <__muldf3+0x6f4>
   10754:	00801004 	movi	r2,64
   10758:	10c5c83a 	sub	r2,r2,r3
   1075c:	8884983a 	sll	r2,r17,r2
   10760:	1204b03a 	or	r2,r2,r8
   10764:	1004c03a 	cmpne	r2,r2,zero
   10768:	2084b03a 	or	r2,r4,r2
   1076c:	144001cc 	andi	r17,r2,7
   10770:	88000d1e 	bne	r17,zero,107a8 <__muldf3+0x6e0>
   10774:	000b883a 	mov	r5,zero
   10778:	1028d0fa 	srli	r20,r2,3
   1077c:	b02b883a 	mov	r21,r22
   10780:	0005883a 	mov	r2,zero
   10784:	a468b03a 	or	r20,r20,r17
   10788:	003eae06 	br	10244 <__alt_data_end+0xff010244>
   1078c:	1007883a 	mov	r3,r2
   10790:	0023883a 	mov	r17,zero
   10794:	880a927a 	slli	r5,r17,9
   10798:	1805883a 	mov	r2,r3
   1079c:	8822977a 	slli	r17,r17,29
   107a0:	280ad33a 	srli	r5,r5,12
   107a4:	003ff406 	br	10778 <__alt_data_end+0xff010778>
   107a8:	10c003cc 	andi	r3,r2,15
   107ac:	01000104 	movi	r4,4
   107b0:	193ff626 	beq	r3,r4,1078c <__alt_data_end+0xff01078c>
   107b4:	0023883a 	mov	r17,zero
   107b8:	003fd506 	br	10710 <__alt_data_end+0xff010710>
   107bc:	0005883a 	mov	r2,zero
   107c0:	003fe706 	br	10760 <__alt_data_end+0xff010760>
   107c4:	00800434 	movhi	r2,16
   107c8:	89400234 	orhi	r5,r17,8
   107cc:	10bfffc4 	addi	r2,r2,-1
   107d0:	b02b883a 	mov	r21,r22
   107d4:	288a703a 	and	r5,r5,r2
   107d8:	4029883a 	mov	r20,r8
   107dc:	003eff06 	br	103dc <__alt_data_end+0xff0103dc>

000107e0 <__subdf3>:
   107e0:	02000434 	movhi	r8,16
   107e4:	423fffc4 	addi	r8,r8,-1
   107e8:	defffb04 	addi	sp,sp,-20
   107ec:	2a14703a 	and	r10,r5,r8
   107f0:	3812d53a 	srli	r9,r7,20
   107f4:	3a10703a 	and	r8,r7,r8
   107f8:	2006d77a 	srli	r3,r4,29
   107fc:	3004d77a 	srli	r2,r6,29
   10800:	dc000015 	stw	r16,0(sp)
   10804:	501490fa 	slli	r10,r10,3
   10808:	2820d53a 	srli	r16,r5,20
   1080c:	401090fa 	slli	r8,r8,3
   10810:	dc800215 	stw	r18,8(sp)
   10814:	dc400115 	stw	r17,4(sp)
   10818:	dfc00415 	stw	ra,16(sp)
   1081c:	202290fa 	slli	r17,r4,3
   10820:	dcc00315 	stw	r19,12(sp)
   10824:	4a41ffcc 	andi	r9,r9,2047
   10828:	0101ffc4 	movi	r4,2047
   1082c:	2824d7fa 	srli	r18,r5,31
   10830:	8401ffcc 	andi	r16,r16,2047
   10834:	50c6b03a 	or	r3,r10,r3
   10838:	380ed7fa 	srli	r7,r7,31
   1083c:	408ab03a 	or	r5,r8,r2
   10840:	300c90fa 	slli	r6,r6,3
   10844:	49009626 	beq	r9,r4,10aa0 <__subdf3+0x2c0>
   10848:	39c0005c 	xori	r7,r7,1
   1084c:	8245c83a 	sub	r2,r16,r9
   10850:	3c807426 	beq	r7,r18,10a24 <__subdf3+0x244>
   10854:	0080af0e 	bge	zero,r2,10b14 <__subdf3+0x334>
   10858:	48002a1e 	bne	r9,zero,10904 <__subdf3+0x124>
   1085c:	2988b03a 	or	r4,r5,r6
   10860:	20009a1e 	bne	r4,zero,10acc <__subdf3+0x2ec>
   10864:	888001cc 	andi	r2,r17,7
   10868:	10000726 	beq	r2,zero,10888 <__subdf3+0xa8>
   1086c:	888003cc 	andi	r2,r17,15
   10870:	01000104 	movi	r4,4
   10874:	11000426 	beq	r2,r4,10888 <__subdf3+0xa8>
   10878:	890b883a 	add	r5,r17,r4
   1087c:	2c63803a 	cmpltu	r17,r5,r17
   10880:	1c47883a 	add	r3,r3,r17
   10884:	2823883a 	mov	r17,r5
   10888:	1880202c 	andhi	r2,r3,128
   1088c:	10005926 	beq	r2,zero,109f4 <__subdf3+0x214>
   10890:	84000044 	addi	r16,r16,1
   10894:	0081ffc4 	movi	r2,2047
   10898:	8080be26 	beq	r16,r2,10b94 <__subdf3+0x3b4>
   1089c:	017fe034 	movhi	r5,65408
   108a0:	297fffc4 	addi	r5,r5,-1
   108a4:	1946703a 	and	r3,r3,r5
   108a8:	1804977a 	slli	r2,r3,29
   108ac:	1806927a 	slli	r3,r3,9
   108b0:	8822d0fa 	srli	r17,r17,3
   108b4:	8401ffcc 	andi	r16,r16,2047
   108b8:	180ad33a 	srli	r5,r3,12
   108bc:	9100004c 	andi	r4,r18,1
   108c0:	1444b03a 	or	r2,r2,r17
   108c4:	80c1ffcc 	andi	r3,r16,2047
   108c8:	1820953a 	slli	r16,r3,20
   108cc:	20c03fcc 	andi	r3,r4,255
   108d0:	180897fa 	slli	r4,r3,31
   108d4:	00c00434 	movhi	r3,16
   108d8:	18ffffc4 	addi	r3,r3,-1
   108dc:	28c6703a 	and	r3,r5,r3
   108e0:	1c06b03a 	or	r3,r3,r16
   108e4:	1906b03a 	or	r3,r3,r4
   108e8:	dfc00417 	ldw	ra,16(sp)
   108ec:	dcc00317 	ldw	r19,12(sp)
   108f0:	dc800217 	ldw	r18,8(sp)
   108f4:	dc400117 	ldw	r17,4(sp)
   108f8:	dc000017 	ldw	r16,0(sp)
   108fc:	dec00504 	addi	sp,sp,20
   10900:	f800283a 	ret
   10904:	0101ffc4 	movi	r4,2047
   10908:	813fd626 	beq	r16,r4,10864 <__alt_data_end+0xff010864>
   1090c:	29402034 	orhi	r5,r5,128
   10910:	01000e04 	movi	r4,56
   10914:	2080a316 	blt	r4,r2,10ba4 <__subdf3+0x3c4>
   10918:	010007c4 	movi	r4,31
   1091c:	2080c616 	blt	r4,r2,10c38 <__subdf3+0x458>
   10920:	01000804 	movi	r4,32
   10924:	2089c83a 	sub	r4,r4,r2
   10928:	2910983a 	sll	r8,r5,r4
   1092c:	308ed83a 	srl	r7,r6,r2
   10930:	3108983a 	sll	r4,r6,r4
   10934:	2884d83a 	srl	r2,r5,r2
   10938:	41ccb03a 	or	r6,r8,r7
   1093c:	2008c03a 	cmpne	r4,r4,zero
   10940:	310cb03a 	or	r6,r6,r4
   10944:	898dc83a 	sub	r6,r17,r6
   10948:	89a3803a 	cmpltu	r17,r17,r6
   1094c:	1887c83a 	sub	r3,r3,r2
   10950:	1c47c83a 	sub	r3,r3,r17
   10954:	3023883a 	mov	r17,r6
   10958:	1880202c 	andhi	r2,r3,128
   1095c:	10002326 	beq	r2,zero,109ec <__subdf3+0x20c>
   10960:	04c02034 	movhi	r19,128
   10964:	9cffffc4 	addi	r19,r19,-1
   10968:	1ce6703a 	and	r19,r3,r19
   1096c:	98007a26 	beq	r19,zero,10b58 <__subdf3+0x378>
   10970:	9809883a 	mov	r4,r19
   10974:	00054340 	call	5434 <__clzsi2>
   10978:	113ffe04 	addi	r4,r2,-8
   1097c:	00c007c4 	movi	r3,31
   10980:	19007b16 	blt	r3,r4,10b70 <__subdf3+0x390>
   10984:	00800804 	movi	r2,32
   10988:	1105c83a 	sub	r2,r2,r4
   1098c:	8884d83a 	srl	r2,r17,r2
   10990:	9906983a 	sll	r3,r19,r4
   10994:	8922983a 	sll	r17,r17,r4
   10998:	10c4b03a 	or	r2,r2,r3
   1099c:	24007816 	blt	r4,r16,10b80 <__subdf3+0x3a0>
   109a0:	2421c83a 	sub	r16,r4,r16
   109a4:	80c00044 	addi	r3,r16,1
   109a8:	010007c4 	movi	r4,31
   109ac:	20c09516 	blt	r4,r3,10c04 <__subdf3+0x424>
   109b0:	01400804 	movi	r5,32
   109b4:	28cbc83a 	sub	r5,r5,r3
   109b8:	88c8d83a 	srl	r4,r17,r3
   109bc:	8962983a 	sll	r17,r17,r5
   109c0:	114a983a 	sll	r5,r2,r5
   109c4:	10c6d83a 	srl	r3,r2,r3
   109c8:	8804c03a 	cmpne	r2,r17,zero
   109cc:	290ab03a 	or	r5,r5,r4
   109d0:	28a2b03a 	or	r17,r5,r2
   109d4:	0021883a 	mov	r16,zero
   109d8:	003fa206 	br	10864 <__alt_data_end+0xff010864>
   109dc:	2090b03a 	or	r8,r4,r2
   109e0:	40018e26 	beq	r8,zero,1101c <__subdf3+0x83c>
   109e4:	1007883a 	mov	r3,r2
   109e8:	2023883a 	mov	r17,r4
   109ec:	888001cc 	andi	r2,r17,7
   109f0:	103f9e1e 	bne	r2,zero,1086c <__alt_data_end+0xff01086c>
   109f4:	1804977a 	slli	r2,r3,29
   109f8:	8822d0fa 	srli	r17,r17,3
   109fc:	1810d0fa 	srli	r8,r3,3
   10a00:	9100004c 	andi	r4,r18,1
   10a04:	1444b03a 	or	r2,r2,r17
   10a08:	00c1ffc4 	movi	r3,2047
   10a0c:	80c02826 	beq	r16,r3,10ab0 <__subdf3+0x2d0>
   10a10:	01400434 	movhi	r5,16
   10a14:	297fffc4 	addi	r5,r5,-1
   10a18:	80e0703a 	and	r16,r16,r3
   10a1c:	414a703a 	and	r5,r8,r5
   10a20:	003fa806 	br	108c4 <__alt_data_end+0xff0108c4>
   10a24:	0080630e 	bge	zero,r2,10bb4 <__subdf3+0x3d4>
   10a28:	48003026 	beq	r9,zero,10aec <__subdf3+0x30c>
   10a2c:	0101ffc4 	movi	r4,2047
   10a30:	813f8c26 	beq	r16,r4,10864 <__alt_data_end+0xff010864>
   10a34:	29402034 	orhi	r5,r5,128
   10a38:	01000e04 	movi	r4,56
   10a3c:	2080a90e 	bge	r4,r2,10ce4 <__subdf3+0x504>
   10a40:	298cb03a 	or	r6,r5,r6
   10a44:	3012c03a 	cmpne	r9,r6,zero
   10a48:	0005883a 	mov	r2,zero
   10a4c:	4c53883a 	add	r9,r9,r17
   10a50:	4c63803a 	cmpltu	r17,r9,r17
   10a54:	10c7883a 	add	r3,r2,r3
   10a58:	88c7883a 	add	r3,r17,r3
   10a5c:	4823883a 	mov	r17,r9
   10a60:	1880202c 	andhi	r2,r3,128
   10a64:	1000d026 	beq	r2,zero,10da8 <__subdf3+0x5c8>
   10a68:	84000044 	addi	r16,r16,1
   10a6c:	0081ffc4 	movi	r2,2047
   10a70:	8080fe26 	beq	r16,r2,10e6c <__subdf3+0x68c>
   10a74:	00bfe034 	movhi	r2,65408
   10a78:	10bfffc4 	addi	r2,r2,-1
   10a7c:	1886703a 	and	r3,r3,r2
   10a80:	880ad07a 	srli	r5,r17,1
   10a84:	180497fa 	slli	r2,r3,31
   10a88:	8900004c 	andi	r4,r17,1
   10a8c:	2922b03a 	or	r17,r5,r4
   10a90:	1806d07a 	srli	r3,r3,1
   10a94:	1462b03a 	or	r17,r2,r17
   10a98:	3825883a 	mov	r18,r7
   10a9c:	003f7106 	br	10864 <__alt_data_end+0xff010864>
   10aa0:	2984b03a 	or	r2,r5,r6
   10aa4:	103f6826 	beq	r2,zero,10848 <__alt_data_end+0xff010848>
   10aa8:	39c03fcc 	andi	r7,r7,255
   10aac:	003f6706 	br	1084c <__alt_data_end+0xff01084c>
   10ab0:	4086b03a 	or	r3,r8,r2
   10ab4:	18015226 	beq	r3,zero,11000 <__subdf3+0x820>
   10ab8:	00c00434 	movhi	r3,16
   10abc:	41400234 	orhi	r5,r8,8
   10ac0:	18ffffc4 	addi	r3,r3,-1
   10ac4:	28ca703a 	and	r5,r5,r3
   10ac8:	003f7e06 	br	108c4 <__alt_data_end+0xff0108c4>
   10acc:	10bfffc4 	addi	r2,r2,-1
   10ad0:	1000491e 	bne	r2,zero,10bf8 <__subdf3+0x418>
   10ad4:	898fc83a 	sub	r7,r17,r6
   10ad8:	89e3803a 	cmpltu	r17,r17,r7
   10adc:	1947c83a 	sub	r3,r3,r5
   10ae0:	1c47c83a 	sub	r3,r3,r17
   10ae4:	3823883a 	mov	r17,r7
   10ae8:	003f9b06 	br	10958 <__alt_data_end+0xff010958>
   10aec:	2988b03a 	or	r4,r5,r6
   10af0:	203f5c26 	beq	r4,zero,10864 <__alt_data_end+0xff010864>
   10af4:	10bfffc4 	addi	r2,r2,-1
   10af8:	1000931e 	bne	r2,zero,10d48 <__subdf3+0x568>
   10afc:	898d883a 	add	r6,r17,r6
   10b00:	3463803a 	cmpltu	r17,r6,r17
   10b04:	1947883a 	add	r3,r3,r5
   10b08:	88c7883a 	add	r3,r17,r3
   10b0c:	3023883a 	mov	r17,r6
   10b10:	003fd306 	br	10a60 <__alt_data_end+0xff010a60>
   10b14:	1000541e 	bne	r2,zero,10c68 <__subdf3+0x488>
   10b18:	80800044 	addi	r2,r16,1
   10b1c:	1081ffcc 	andi	r2,r2,2047
   10b20:	01000044 	movi	r4,1
   10b24:	2080a20e 	bge	r4,r2,10db0 <__subdf3+0x5d0>
   10b28:	8989c83a 	sub	r4,r17,r6
   10b2c:	8905803a 	cmpltu	r2,r17,r4
   10b30:	1967c83a 	sub	r19,r3,r5
   10b34:	98a7c83a 	sub	r19,r19,r2
   10b38:	9880202c 	andhi	r2,r19,128
   10b3c:	10006326 	beq	r2,zero,10ccc <__subdf3+0x4ec>
   10b40:	3463c83a 	sub	r17,r6,r17
   10b44:	28c7c83a 	sub	r3,r5,r3
   10b48:	344d803a 	cmpltu	r6,r6,r17
   10b4c:	19a7c83a 	sub	r19,r3,r6
   10b50:	3825883a 	mov	r18,r7
   10b54:	983f861e 	bne	r19,zero,10970 <__alt_data_end+0xff010970>
   10b58:	8809883a 	mov	r4,r17
   10b5c:	00054340 	call	5434 <__clzsi2>
   10b60:	10800804 	addi	r2,r2,32
   10b64:	113ffe04 	addi	r4,r2,-8
   10b68:	00c007c4 	movi	r3,31
   10b6c:	193f850e 	bge	r3,r4,10984 <__alt_data_end+0xff010984>
   10b70:	10bff604 	addi	r2,r2,-40
   10b74:	8884983a 	sll	r2,r17,r2
   10b78:	0023883a 	mov	r17,zero
   10b7c:	243f880e 	bge	r4,r16,109a0 <__alt_data_end+0xff0109a0>
   10b80:	00ffe034 	movhi	r3,65408
   10b84:	18ffffc4 	addi	r3,r3,-1
   10b88:	8121c83a 	sub	r16,r16,r4
   10b8c:	10c6703a 	and	r3,r2,r3
   10b90:	003f3406 	br	10864 <__alt_data_end+0xff010864>
   10b94:	9100004c 	andi	r4,r18,1
   10b98:	000b883a 	mov	r5,zero
   10b9c:	0005883a 	mov	r2,zero
   10ba0:	003f4806 	br	108c4 <__alt_data_end+0xff0108c4>
   10ba4:	298cb03a 	or	r6,r5,r6
   10ba8:	300cc03a 	cmpne	r6,r6,zero
   10bac:	0005883a 	mov	r2,zero
   10bb0:	003f6406 	br	10944 <__alt_data_end+0xff010944>
   10bb4:	10009a1e 	bne	r2,zero,10e20 <__subdf3+0x640>
   10bb8:	82400044 	addi	r9,r16,1
   10bbc:	4881ffcc 	andi	r2,r9,2047
   10bc0:	02800044 	movi	r10,1
   10bc4:	5080670e 	bge	r10,r2,10d64 <__subdf3+0x584>
   10bc8:	0081ffc4 	movi	r2,2047
   10bcc:	4880af26 	beq	r9,r2,10e8c <__subdf3+0x6ac>
   10bd0:	898d883a 	add	r6,r17,r6
   10bd4:	1945883a 	add	r2,r3,r5
   10bd8:	3447803a 	cmpltu	r3,r6,r17
   10bdc:	1887883a 	add	r3,r3,r2
   10be0:	182297fa 	slli	r17,r3,31
   10be4:	300cd07a 	srli	r6,r6,1
   10be8:	1806d07a 	srli	r3,r3,1
   10bec:	4821883a 	mov	r16,r9
   10bf0:	89a2b03a 	or	r17,r17,r6
   10bf4:	003f1b06 	br	10864 <__alt_data_end+0xff010864>
   10bf8:	0101ffc4 	movi	r4,2047
   10bfc:	813f441e 	bne	r16,r4,10910 <__alt_data_end+0xff010910>
   10c00:	003f1806 	br	10864 <__alt_data_end+0xff010864>
   10c04:	843ff844 	addi	r16,r16,-31
   10c08:	01400804 	movi	r5,32
   10c0c:	1408d83a 	srl	r4,r2,r16
   10c10:	19405026 	beq	r3,r5,10d54 <__subdf3+0x574>
   10c14:	01401004 	movi	r5,64
   10c18:	28c7c83a 	sub	r3,r5,r3
   10c1c:	10c4983a 	sll	r2,r2,r3
   10c20:	88a2b03a 	or	r17,r17,r2
   10c24:	8822c03a 	cmpne	r17,r17,zero
   10c28:	2462b03a 	or	r17,r4,r17
   10c2c:	0007883a 	mov	r3,zero
   10c30:	0021883a 	mov	r16,zero
   10c34:	003f6d06 	br	109ec <__alt_data_end+0xff0109ec>
   10c38:	11fff804 	addi	r7,r2,-32
   10c3c:	01000804 	movi	r4,32
   10c40:	29ced83a 	srl	r7,r5,r7
   10c44:	11004526 	beq	r2,r4,10d5c <__subdf3+0x57c>
   10c48:	01001004 	movi	r4,64
   10c4c:	2089c83a 	sub	r4,r4,r2
   10c50:	2904983a 	sll	r2,r5,r4
   10c54:	118cb03a 	or	r6,r2,r6
   10c58:	300cc03a 	cmpne	r6,r6,zero
   10c5c:	398cb03a 	or	r6,r7,r6
   10c60:	0005883a 	mov	r2,zero
   10c64:	003f3706 	br	10944 <__alt_data_end+0xff010944>
   10c68:	80002a26 	beq	r16,zero,10d14 <__subdf3+0x534>
   10c6c:	0101ffc4 	movi	r4,2047
   10c70:	49006626 	beq	r9,r4,10e0c <__subdf3+0x62c>
   10c74:	0085c83a 	sub	r2,zero,r2
   10c78:	18c02034 	orhi	r3,r3,128
   10c7c:	01000e04 	movi	r4,56
   10c80:	20807e16 	blt	r4,r2,10e7c <__subdf3+0x69c>
   10c84:	010007c4 	movi	r4,31
   10c88:	2080e716 	blt	r4,r2,11028 <__subdf3+0x848>
   10c8c:	01000804 	movi	r4,32
   10c90:	2089c83a 	sub	r4,r4,r2
   10c94:	1914983a 	sll	r10,r3,r4
   10c98:	8890d83a 	srl	r8,r17,r2
   10c9c:	8908983a 	sll	r4,r17,r4
   10ca0:	1884d83a 	srl	r2,r3,r2
   10ca4:	5222b03a 	or	r17,r10,r8
   10ca8:	2006c03a 	cmpne	r3,r4,zero
   10cac:	88e2b03a 	or	r17,r17,r3
   10cb0:	3463c83a 	sub	r17,r6,r17
   10cb4:	2885c83a 	sub	r2,r5,r2
   10cb8:	344d803a 	cmpltu	r6,r6,r17
   10cbc:	1187c83a 	sub	r3,r2,r6
   10cc0:	4821883a 	mov	r16,r9
   10cc4:	3825883a 	mov	r18,r7
   10cc8:	003f2306 	br	10958 <__alt_data_end+0xff010958>
   10ccc:	24d0b03a 	or	r8,r4,r19
   10cd0:	40001b1e 	bne	r8,zero,10d40 <__subdf3+0x560>
   10cd4:	0005883a 	mov	r2,zero
   10cd8:	0009883a 	mov	r4,zero
   10cdc:	0021883a 	mov	r16,zero
   10ce0:	003f4906 	br	10a08 <__alt_data_end+0xff010a08>
   10ce4:	010007c4 	movi	r4,31
   10ce8:	20803a16 	blt	r4,r2,10dd4 <__subdf3+0x5f4>
   10cec:	01000804 	movi	r4,32
   10cf0:	2089c83a 	sub	r4,r4,r2
   10cf4:	2912983a 	sll	r9,r5,r4
   10cf8:	3090d83a 	srl	r8,r6,r2
   10cfc:	3108983a 	sll	r4,r6,r4
   10d00:	2884d83a 	srl	r2,r5,r2
   10d04:	4a12b03a 	or	r9,r9,r8
   10d08:	2008c03a 	cmpne	r4,r4,zero
   10d0c:	4912b03a 	or	r9,r9,r4
   10d10:	003f4e06 	br	10a4c <__alt_data_end+0xff010a4c>
   10d14:	1c48b03a 	or	r4,r3,r17
   10d18:	20003c26 	beq	r4,zero,10e0c <__subdf3+0x62c>
   10d1c:	0084303a 	nor	r2,zero,r2
   10d20:	1000381e 	bne	r2,zero,10e04 <__subdf3+0x624>
   10d24:	3463c83a 	sub	r17,r6,r17
   10d28:	28c5c83a 	sub	r2,r5,r3
   10d2c:	344d803a 	cmpltu	r6,r6,r17
   10d30:	1187c83a 	sub	r3,r2,r6
   10d34:	4821883a 	mov	r16,r9
   10d38:	3825883a 	mov	r18,r7
   10d3c:	003f0606 	br	10958 <__alt_data_end+0xff010958>
   10d40:	2023883a 	mov	r17,r4
   10d44:	003f0906 	br	1096c <__alt_data_end+0xff01096c>
   10d48:	0101ffc4 	movi	r4,2047
   10d4c:	813f3a1e 	bne	r16,r4,10a38 <__alt_data_end+0xff010a38>
   10d50:	003ec406 	br	10864 <__alt_data_end+0xff010864>
   10d54:	0005883a 	mov	r2,zero
   10d58:	003fb106 	br	10c20 <__alt_data_end+0xff010c20>
   10d5c:	0005883a 	mov	r2,zero
   10d60:	003fbc06 	br	10c54 <__alt_data_end+0xff010c54>
   10d64:	1c44b03a 	or	r2,r3,r17
   10d68:	80008e1e 	bne	r16,zero,10fa4 <__subdf3+0x7c4>
   10d6c:	1000c826 	beq	r2,zero,11090 <__subdf3+0x8b0>
   10d70:	2984b03a 	or	r2,r5,r6
   10d74:	103ebb26 	beq	r2,zero,10864 <__alt_data_end+0xff010864>
   10d78:	8989883a 	add	r4,r17,r6
   10d7c:	1945883a 	add	r2,r3,r5
   10d80:	2447803a 	cmpltu	r3,r4,r17
   10d84:	1887883a 	add	r3,r3,r2
   10d88:	1880202c 	andhi	r2,r3,128
   10d8c:	2023883a 	mov	r17,r4
   10d90:	103f1626 	beq	r2,zero,109ec <__alt_data_end+0xff0109ec>
   10d94:	00bfe034 	movhi	r2,65408
   10d98:	10bfffc4 	addi	r2,r2,-1
   10d9c:	5021883a 	mov	r16,r10
   10da0:	1886703a 	and	r3,r3,r2
   10da4:	003eaf06 	br	10864 <__alt_data_end+0xff010864>
   10da8:	3825883a 	mov	r18,r7
   10dac:	003f0f06 	br	109ec <__alt_data_end+0xff0109ec>
   10db0:	1c44b03a 	or	r2,r3,r17
   10db4:	8000251e 	bne	r16,zero,10e4c <__subdf3+0x66c>
   10db8:	1000661e 	bne	r2,zero,10f54 <__subdf3+0x774>
   10dbc:	2990b03a 	or	r8,r5,r6
   10dc0:	40009626 	beq	r8,zero,1101c <__subdf3+0x83c>
   10dc4:	2807883a 	mov	r3,r5
   10dc8:	3023883a 	mov	r17,r6
   10dcc:	3825883a 	mov	r18,r7
   10dd0:	003ea406 	br	10864 <__alt_data_end+0xff010864>
   10dd4:	127ff804 	addi	r9,r2,-32
   10dd8:	01000804 	movi	r4,32
   10ddc:	2a52d83a 	srl	r9,r5,r9
   10de0:	11008c26 	beq	r2,r4,11014 <__subdf3+0x834>
   10de4:	01001004 	movi	r4,64
   10de8:	2085c83a 	sub	r2,r4,r2
   10dec:	2884983a 	sll	r2,r5,r2
   10df0:	118cb03a 	or	r6,r2,r6
   10df4:	300cc03a 	cmpne	r6,r6,zero
   10df8:	4992b03a 	or	r9,r9,r6
   10dfc:	0005883a 	mov	r2,zero
   10e00:	003f1206 	br	10a4c <__alt_data_end+0xff010a4c>
   10e04:	0101ffc4 	movi	r4,2047
   10e08:	493f9c1e 	bne	r9,r4,10c7c <__alt_data_end+0xff010c7c>
   10e0c:	2807883a 	mov	r3,r5
   10e10:	3023883a 	mov	r17,r6
   10e14:	4821883a 	mov	r16,r9
   10e18:	3825883a 	mov	r18,r7
   10e1c:	003e9106 	br	10864 <__alt_data_end+0xff010864>
   10e20:	80001f1e 	bne	r16,zero,10ea0 <__subdf3+0x6c0>
   10e24:	1c48b03a 	or	r4,r3,r17
   10e28:	20005a26 	beq	r4,zero,10f94 <__subdf3+0x7b4>
   10e2c:	0084303a 	nor	r2,zero,r2
   10e30:	1000561e 	bne	r2,zero,10f8c <__subdf3+0x7ac>
   10e34:	89a3883a 	add	r17,r17,r6
   10e38:	1945883a 	add	r2,r3,r5
   10e3c:	898d803a 	cmpltu	r6,r17,r6
   10e40:	3087883a 	add	r3,r6,r2
   10e44:	4821883a 	mov	r16,r9
   10e48:	003f0506 	br	10a60 <__alt_data_end+0xff010a60>
   10e4c:	10002b1e 	bne	r2,zero,10efc <__subdf3+0x71c>
   10e50:	2984b03a 	or	r2,r5,r6
   10e54:	10008026 	beq	r2,zero,11058 <__subdf3+0x878>
   10e58:	2807883a 	mov	r3,r5
   10e5c:	3023883a 	mov	r17,r6
   10e60:	3825883a 	mov	r18,r7
   10e64:	0401ffc4 	movi	r16,2047
   10e68:	003e7e06 	br	10864 <__alt_data_end+0xff010864>
   10e6c:	3809883a 	mov	r4,r7
   10e70:	0011883a 	mov	r8,zero
   10e74:	0005883a 	mov	r2,zero
   10e78:	003ee306 	br	10a08 <__alt_data_end+0xff010a08>
   10e7c:	1c62b03a 	or	r17,r3,r17
   10e80:	8822c03a 	cmpne	r17,r17,zero
   10e84:	0005883a 	mov	r2,zero
   10e88:	003f8906 	br	10cb0 <__alt_data_end+0xff010cb0>
   10e8c:	3809883a 	mov	r4,r7
   10e90:	4821883a 	mov	r16,r9
   10e94:	0011883a 	mov	r8,zero
   10e98:	0005883a 	mov	r2,zero
   10e9c:	003eda06 	br	10a08 <__alt_data_end+0xff010a08>
   10ea0:	0101ffc4 	movi	r4,2047
   10ea4:	49003b26 	beq	r9,r4,10f94 <__subdf3+0x7b4>
   10ea8:	0085c83a 	sub	r2,zero,r2
   10eac:	18c02034 	orhi	r3,r3,128
   10eb0:	01000e04 	movi	r4,56
   10eb4:	20806e16 	blt	r4,r2,11070 <__subdf3+0x890>
   10eb8:	010007c4 	movi	r4,31
   10ebc:	20807716 	blt	r4,r2,1109c <__subdf3+0x8bc>
   10ec0:	01000804 	movi	r4,32
   10ec4:	2089c83a 	sub	r4,r4,r2
   10ec8:	1914983a 	sll	r10,r3,r4
   10ecc:	8890d83a 	srl	r8,r17,r2
   10ed0:	8908983a 	sll	r4,r17,r4
   10ed4:	1884d83a 	srl	r2,r3,r2
   10ed8:	5222b03a 	or	r17,r10,r8
   10edc:	2006c03a 	cmpne	r3,r4,zero
   10ee0:	88e2b03a 	or	r17,r17,r3
   10ee4:	89a3883a 	add	r17,r17,r6
   10ee8:	1145883a 	add	r2,r2,r5
   10eec:	898d803a 	cmpltu	r6,r17,r6
   10ef0:	3087883a 	add	r3,r6,r2
   10ef4:	4821883a 	mov	r16,r9
   10ef8:	003ed906 	br	10a60 <__alt_data_end+0xff010a60>
   10efc:	2984b03a 	or	r2,r5,r6
   10f00:	10004226 	beq	r2,zero,1100c <__subdf3+0x82c>
   10f04:	1808d0fa 	srli	r4,r3,3
   10f08:	8822d0fa 	srli	r17,r17,3
   10f0c:	1806977a 	slli	r3,r3,29
   10f10:	2080022c 	andhi	r2,r4,8
   10f14:	1c62b03a 	or	r17,r3,r17
   10f18:	10000826 	beq	r2,zero,10f3c <__subdf3+0x75c>
   10f1c:	2812d0fa 	srli	r9,r5,3
   10f20:	4880022c 	andhi	r2,r9,8
   10f24:	1000051e 	bne	r2,zero,10f3c <__subdf3+0x75c>
   10f28:	300cd0fa 	srli	r6,r6,3
   10f2c:	2804977a 	slli	r2,r5,29
   10f30:	4809883a 	mov	r4,r9
   10f34:	3825883a 	mov	r18,r7
   10f38:	11a2b03a 	or	r17,r2,r6
   10f3c:	8806d77a 	srli	r3,r17,29
   10f40:	200890fa 	slli	r4,r4,3
   10f44:	882290fa 	slli	r17,r17,3
   10f48:	0401ffc4 	movi	r16,2047
   10f4c:	1906b03a 	or	r3,r3,r4
   10f50:	003e4406 	br	10864 <__alt_data_end+0xff010864>
   10f54:	2984b03a 	or	r2,r5,r6
   10f58:	103e4226 	beq	r2,zero,10864 <__alt_data_end+0xff010864>
   10f5c:	8989c83a 	sub	r4,r17,r6
   10f60:	8911803a 	cmpltu	r8,r17,r4
   10f64:	1945c83a 	sub	r2,r3,r5
   10f68:	1205c83a 	sub	r2,r2,r8
   10f6c:	1200202c 	andhi	r8,r2,128
   10f70:	403e9a26 	beq	r8,zero,109dc <__alt_data_end+0xff0109dc>
   10f74:	3463c83a 	sub	r17,r6,r17
   10f78:	28c5c83a 	sub	r2,r5,r3
   10f7c:	344d803a 	cmpltu	r6,r6,r17
   10f80:	1187c83a 	sub	r3,r2,r6
   10f84:	3825883a 	mov	r18,r7
   10f88:	003e3606 	br	10864 <__alt_data_end+0xff010864>
   10f8c:	0101ffc4 	movi	r4,2047
   10f90:	493fc71e 	bne	r9,r4,10eb0 <__alt_data_end+0xff010eb0>
   10f94:	2807883a 	mov	r3,r5
   10f98:	3023883a 	mov	r17,r6
   10f9c:	4821883a 	mov	r16,r9
   10fa0:	003e3006 	br	10864 <__alt_data_end+0xff010864>
   10fa4:	10003626 	beq	r2,zero,11080 <__subdf3+0x8a0>
   10fa8:	2984b03a 	or	r2,r5,r6
   10fac:	10001726 	beq	r2,zero,1100c <__subdf3+0x82c>
   10fb0:	1808d0fa 	srli	r4,r3,3
   10fb4:	8822d0fa 	srli	r17,r17,3
   10fb8:	1806977a 	slli	r3,r3,29
   10fbc:	2080022c 	andhi	r2,r4,8
   10fc0:	1c62b03a 	or	r17,r3,r17
   10fc4:	10000726 	beq	r2,zero,10fe4 <__subdf3+0x804>
   10fc8:	2812d0fa 	srli	r9,r5,3
   10fcc:	4880022c 	andhi	r2,r9,8
   10fd0:	1000041e 	bne	r2,zero,10fe4 <__subdf3+0x804>
   10fd4:	300cd0fa 	srli	r6,r6,3
   10fd8:	2804977a 	slli	r2,r5,29
   10fdc:	4809883a 	mov	r4,r9
   10fe0:	11a2b03a 	or	r17,r2,r6
   10fe4:	8806d77a 	srli	r3,r17,29
   10fe8:	200890fa 	slli	r4,r4,3
   10fec:	882290fa 	slli	r17,r17,3
   10ff0:	3825883a 	mov	r18,r7
   10ff4:	1906b03a 	or	r3,r3,r4
   10ff8:	0401ffc4 	movi	r16,2047
   10ffc:	003e1906 	br	10864 <__alt_data_end+0xff010864>
   11000:	000b883a 	mov	r5,zero
   11004:	0005883a 	mov	r2,zero
   11008:	003e2e06 	br	108c4 <__alt_data_end+0xff0108c4>
   1100c:	0401ffc4 	movi	r16,2047
   11010:	003e1406 	br	10864 <__alt_data_end+0xff010864>
   11014:	0005883a 	mov	r2,zero
   11018:	003f7506 	br	10df0 <__alt_data_end+0xff010df0>
   1101c:	0005883a 	mov	r2,zero
   11020:	0009883a 	mov	r4,zero
   11024:	003e7806 	br	10a08 <__alt_data_end+0xff010a08>
   11028:	123ff804 	addi	r8,r2,-32
   1102c:	01000804 	movi	r4,32
   11030:	1a10d83a 	srl	r8,r3,r8
   11034:	11002526 	beq	r2,r4,110cc <__subdf3+0x8ec>
   11038:	01001004 	movi	r4,64
   1103c:	2085c83a 	sub	r2,r4,r2
   11040:	1884983a 	sll	r2,r3,r2
   11044:	1444b03a 	or	r2,r2,r17
   11048:	1004c03a 	cmpne	r2,r2,zero
   1104c:	40a2b03a 	or	r17,r8,r2
   11050:	0005883a 	mov	r2,zero
   11054:	003f1606 	br	10cb0 <__alt_data_end+0xff010cb0>
   11058:	02000434 	movhi	r8,16
   1105c:	0009883a 	mov	r4,zero
   11060:	423fffc4 	addi	r8,r8,-1
   11064:	00bfffc4 	movi	r2,-1
   11068:	0401ffc4 	movi	r16,2047
   1106c:	003e6606 	br	10a08 <__alt_data_end+0xff010a08>
   11070:	1c62b03a 	or	r17,r3,r17
   11074:	8822c03a 	cmpne	r17,r17,zero
   11078:	0005883a 	mov	r2,zero
   1107c:	003f9906 	br	10ee4 <__alt_data_end+0xff010ee4>
   11080:	2807883a 	mov	r3,r5
   11084:	3023883a 	mov	r17,r6
   11088:	0401ffc4 	movi	r16,2047
   1108c:	003df506 	br	10864 <__alt_data_end+0xff010864>
   11090:	2807883a 	mov	r3,r5
   11094:	3023883a 	mov	r17,r6
   11098:	003df206 	br	10864 <__alt_data_end+0xff010864>
   1109c:	123ff804 	addi	r8,r2,-32
   110a0:	01000804 	movi	r4,32
   110a4:	1a10d83a 	srl	r8,r3,r8
   110a8:	11000a26 	beq	r2,r4,110d4 <__subdf3+0x8f4>
   110ac:	01001004 	movi	r4,64
   110b0:	2085c83a 	sub	r2,r4,r2
   110b4:	1884983a 	sll	r2,r3,r2
   110b8:	1444b03a 	or	r2,r2,r17
   110bc:	1004c03a 	cmpne	r2,r2,zero
   110c0:	40a2b03a 	or	r17,r8,r2
   110c4:	0005883a 	mov	r2,zero
   110c8:	003f8606 	br	10ee4 <__alt_data_end+0xff010ee4>
   110cc:	0005883a 	mov	r2,zero
   110d0:	003fdc06 	br	11044 <__alt_data_end+0xff011044>
   110d4:	0005883a 	mov	r2,zero
   110d8:	003ff706 	br	110b8 <__alt_data_end+0xff0110b8>

000110dc <__fixdfsi>:
   110dc:	280cd53a 	srli	r6,r5,20
   110e0:	00c00434 	movhi	r3,16
   110e4:	18ffffc4 	addi	r3,r3,-1
   110e8:	3181ffcc 	andi	r6,r6,2047
   110ec:	01c0ff84 	movi	r7,1022
   110f0:	28c6703a 	and	r3,r5,r3
   110f4:	280ad7fa 	srli	r5,r5,31
   110f8:	3980120e 	bge	r7,r6,11144 <__fixdfsi+0x68>
   110fc:	00810744 	movi	r2,1053
   11100:	11800c16 	blt	r2,r6,11134 <__fixdfsi+0x58>
   11104:	00810cc4 	movi	r2,1075
   11108:	1185c83a 	sub	r2,r2,r6
   1110c:	01c007c4 	movi	r7,31
   11110:	18c00434 	orhi	r3,r3,16
   11114:	38800d16 	blt	r7,r2,1114c <__fixdfsi+0x70>
   11118:	31befb44 	addi	r6,r6,-1043
   1111c:	2084d83a 	srl	r2,r4,r2
   11120:	1986983a 	sll	r3,r3,r6
   11124:	1884b03a 	or	r2,r3,r2
   11128:	28000726 	beq	r5,zero,11148 <__fixdfsi+0x6c>
   1112c:	0085c83a 	sub	r2,zero,r2
   11130:	f800283a 	ret
   11134:	00a00034 	movhi	r2,32768
   11138:	10bfffc4 	addi	r2,r2,-1
   1113c:	2885883a 	add	r2,r5,r2
   11140:	f800283a 	ret
   11144:	0005883a 	mov	r2,zero
   11148:	f800283a 	ret
   1114c:	008104c4 	movi	r2,1043
   11150:	1185c83a 	sub	r2,r2,r6
   11154:	1884d83a 	srl	r2,r3,r2
   11158:	003ff306 	br	11128 <__alt_data_end+0xff011128>

0001115c <__floatsidf>:
   1115c:	defffd04 	addi	sp,sp,-12
   11160:	dfc00215 	stw	ra,8(sp)
   11164:	dc400115 	stw	r17,4(sp)
   11168:	dc000015 	stw	r16,0(sp)
   1116c:	20002b26 	beq	r4,zero,1121c <__floatsidf+0xc0>
   11170:	2023883a 	mov	r17,r4
   11174:	2020d7fa 	srli	r16,r4,31
   11178:	20002d16 	blt	r4,zero,11230 <__floatsidf+0xd4>
   1117c:	8809883a 	mov	r4,r17
   11180:	00054340 	call	5434 <__clzsi2>
   11184:	01410784 	movi	r5,1054
   11188:	288bc83a 	sub	r5,r5,r2
   1118c:	01010cc4 	movi	r4,1075
   11190:	2149c83a 	sub	r4,r4,r5
   11194:	00c007c4 	movi	r3,31
   11198:	1900160e 	bge	r3,r4,111f4 <__floatsidf+0x98>
   1119c:	00c104c4 	movi	r3,1043
   111a0:	1947c83a 	sub	r3,r3,r5
   111a4:	88c6983a 	sll	r3,r17,r3
   111a8:	00800434 	movhi	r2,16
   111ac:	10bfffc4 	addi	r2,r2,-1
   111b0:	1886703a 	and	r3,r3,r2
   111b4:	2941ffcc 	andi	r5,r5,2047
   111b8:	800d883a 	mov	r6,r16
   111bc:	0005883a 	mov	r2,zero
   111c0:	280a953a 	slli	r5,r5,20
   111c4:	31803fcc 	andi	r6,r6,255
   111c8:	01000434 	movhi	r4,16
   111cc:	300c97fa 	slli	r6,r6,31
   111d0:	213fffc4 	addi	r4,r4,-1
   111d4:	1906703a 	and	r3,r3,r4
   111d8:	1946b03a 	or	r3,r3,r5
   111dc:	1986b03a 	or	r3,r3,r6
   111e0:	dfc00217 	ldw	ra,8(sp)
   111e4:	dc400117 	ldw	r17,4(sp)
   111e8:	dc000017 	ldw	r16,0(sp)
   111ec:	dec00304 	addi	sp,sp,12
   111f0:	f800283a 	ret
   111f4:	00c002c4 	movi	r3,11
   111f8:	1887c83a 	sub	r3,r3,r2
   111fc:	88c6d83a 	srl	r3,r17,r3
   11200:	8904983a 	sll	r2,r17,r4
   11204:	01000434 	movhi	r4,16
   11208:	213fffc4 	addi	r4,r4,-1
   1120c:	2941ffcc 	andi	r5,r5,2047
   11210:	1906703a 	and	r3,r3,r4
   11214:	800d883a 	mov	r6,r16
   11218:	003fe906 	br	111c0 <__alt_data_end+0xff0111c0>
   1121c:	000d883a 	mov	r6,zero
   11220:	000b883a 	mov	r5,zero
   11224:	0007883a 	mov	r3,zero
   11228:	0005883a 	mov	r2,zero
   1122c:	003fe406 	br	111c0 <__alt_data_end+0xff0111c0>
   11230:	0123c83a 	sub	r17,zero,r4
   11234:	003fd106 	br	1117c <__alt_data_end+0xff01117c>

00011238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11238:	defffe04 	addi	sp,sp,-8
   1123c:	dfc00115 	stw	ra,4(sp)
   11240:	df000015 	stw	fp,0(sp)
   11244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11248:	d0a00b17 	ldw	r2,-32724(gp)
   1124c:	10000326 	beq	r2,zero,1125c <alt_get_errno+0x24>
   11250:	d0a00b17 	ldw	r2,-32724(gp)
   11254:	103ee83a 	callr	r2
   11258:	00000106 	br	11260 <alt_get_errno+0x28>
   1125c:	d0a72b04 	addi	r2,gp,-25428
}
   11260:	e037883a 	mov	sp,fp
   11264:	dfc00117 	ldw	ra,4(sp)
   11268:	df000017 	ldw	fp,0(sp)
   1126c:	dec00204 	addi	sp,sp,8
   11270:	f800283a 	ret

00011274 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11274:	defffb04 	addi	sp,sp,-20
   11278:	dfc00415 	stw	ra,16(sp)
   1127c:	df000315 	stw	fp,12(sp)
   11280:	df000304 	addi	fp,sp,12
   11284:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11288:	e0bfff17 	ldw	r2,-4(fp)
   1128c:	10000616 	blt	r2,zero,112a8 <close+0x34>
   11290:	e0bfff17 	ldw	r2,-4(fp)
   11294:	10c00324 	muli	r3,r2,12
   11298:	00800074 	movhi	r2,1
   1129c:	10943f04 	addi	r2,r2,20732
   112a0:	1885883a 	add	r2,r3,r2
   112a4:	00000106 	br	112ac <close+0x38>
   112a8:	0005883a 	mov	r2,zero
   112ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   112b0:	e0bffd17 	ldw	r2,-12(fp)
   112b4:	10001926 	beq	r2,zero,1131c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   112b8:	e0bffd17 	ldw	r2,-12(fp)
   112bc:	10800017 	ldw	r2,0(r2)
   112c0:	10800417 	ldw	r2,16(r2)
   112c4:	10000626 	beq	r2,zero,112e0 <close+0x6c>
   112c8:	e0bffd17 	ldw	r2,-12(fp)
   112cc:	10800017 	ldw	r2,0(r2)
   112d0:	10800417 	ldw	r2,16(r2)
   112d4:	e13ffd17 	ldw	r4,-12(fp)
   112d8:	103ee83a 	callr	r2
   112dc:	00000106 	br	112e4 <close+0x70>
   112e0:	0005883a 	mov	r2,zero
   112e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   112e8:	e13fff17 	ldw	r4,-4(fp)
   112ec:	00119ac0 	call	119ac <alt_release_fd>
    if (rval < 0)
   112f0:	e0bffe17 	ldw	r2,-8(fp)
   112f4:	1000070e 	bge	r2,zero,11314 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   112f8:	00112380 	call	11238 <alt_get_errno>
   112fc:	1007883a 	mov	r3,r2
   11300:	e0bffe17 	ldw	r2,-8(fp)
   11304:	0085c83a 	sub	r2,zero,r2
   11308:	18800015 	stw	r2,0(r3)
      return -1;
   1130c:	00bfffc4 	movi	r2,-1
   11310:	00000706 	br	11330 <close+0xbc>
    }
    return 0;
   11314:	0005883a 	mov	r2,zero
   11318:	00000506 	br	11330 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1131c:	00112380 	call	11238 <alt_get_errno>
   11320:	1007883a 	mov	r3,r2
   11324:	00801444 	movi	r2,81
   11328:	18800015 	stw	r2,0(r3)
    return -1;
   1132c:	00bfffc4 	movi	r2,-1
  }
}
   11330:	e037883a 	mov	sp,fp
   11334:	dfc00117 	ldw	ra,4(sp)
   11338:	df000017 	ldw	fp,0(sp)
   1133c:	dec00204 	addi	sp,sp,8
   11340:	f800283a 	ret

00011344 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   11344:	defffb04 	addi	sp,sp,-20
   11348:	df000415 	stw	fp,16(sp)
   1134c:	df000404 	addi	fp,sp,16
   11350:	e13ffe15 	stw	r4,-8(fp)
   11354:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   11358:	e0fffe17 	ldw	r3,-8(fp)
   1135c:	e0bfff17 	ldw	r2,-4(fp)
   11360:	1885883a 	add	r2,r3,r2
   11364:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   11368:	e0bffe17 	ldw	r2,-8(fp)
   1136c:	e0bffc15 	stw	r2,-16(fp)
   11370:	00000506 	br	11388 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   11374:	e0bffc17 	ldw	r2,-16(fp)
   11378:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	10800804 	addi	r2,r2,32
   11384:	e0bffc15 	stw	r2,-16(fp)
   11388:	e0fffc17 	ldw	r3,-16(fp)
   1138c:	e0bffd17 	ldw	r2,-12(fp)
   11390:	18bff836 	bltu	r3,r2,11374 <__alt_data_end+0xff011374>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   11394:	e0bffe17 	ldw	r2,-8(fp)
   11398:	108007cc 	andi	r2,r2,31
   1139c:	10000226 	beq	r2,zero,113a8 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   113a0:	e0bffc17 	ldw	r2,-16(fp)
   113a4:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   113a8:	0001883a 	nop
   113ac:	e037883a 	mov	sp,fp
   113b0:	df000017 	ldw	fp,0(sp)
   113b4:	dec00104 	addi	sp,sp,4
   113b8:	f800283a 	ret

000113bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   113bc:	defffc04 	addi	sp,sp,-16
   113c0:	df000315 	stw	fp,12(sp)
   113c4:	df000304 	addi	fp,sp,12
   113c8:	e13ffd15 	stw	r4,-12(fp)
   113cc:	e17ffe15 	stw	r5,-8(fp)
   113d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   113d4:	e0bfff17 	ldw	r2,-4(fp)
}
   113d8:	e037883a 	mov	sp,fp
   113dc:	df000017 	ldw	fp,0(sp)
   113e0:	dec00104 	addi	sp,sp,4
   113e4:	f800283a 	ret

000113e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   113e8:	defffe04 	addi	sp,sp,-8
   113ec:	dfc00115 	stw	ra,4(sp)
   113f0:	df000015 	stw	fp,0(sp)
   113f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   113f8:	d0a00b17 	ldw	r2,-32724(gp)
   113fc:	10000326 	beq	r2,zero,1140c <alt_get_errno+0x24>
   11400:	d0a00b17 	ldw	r2,-32724(gp)
   11404:	103ee83a 	callr	r2
   11408:	00000106 	br	11410 <alt_get_errno+0x28>
   1140c:	d0a72b04 	addi	r2,gp,-25428
}
   11410:	e037883a 	mov	sp,fp
   11414:	dfc00117 	ldw	ra,4(sp)
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00204 	addi	sp,sp,8
   11420:	f800283a 	ret

00011424 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11424:	defffb04 	addi	sp,sp,-20
   11428:	dfc00415 	stw	ra,16(sp)
   1142c:	df000315 	stw	fp,12(sp)
   11430:	df000304 	addi	fp,sp,12
   11434:	e13ffe15 	stw	r4,-8(fp)
   11438:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1143c:	e0bffe17 	ldw	r2,-8(fp)
   11440:	10000616 	blt	r2,zero,1145c <fstat+0x38>
   11444:	e0bffe17 	ldw	r2,-8(fp)
   11448:	10c00324 	muli	r3,r2,12
   1144c:	00800074 	movhi	r2,1
   11450:	10943f04 	addi	r2,r2,20732
   11454:	1885883a 	add	r2,r3,r2
   11458:	00000106 	br	11460 <fstat+0x3c>
   1145c:	0005883a 	mov	r2,zero
   11460:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	10001026 	beq	r2,zero,114ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1146c:	e0bffd17 	ldw	r2,-12(fp)
   11470:	10800017 	ldw	r2,0(r2)
   11474:	10800817 	ldw	r2,32(r2)
   11478:	10000726 	beq	r2,zero,11498 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1147c:	e0bffd17 	ldw	r2,-12(fp)
   11480:	10800017 	ldw	r2,0(r2)
   11484:	10800817 	ldw	r2,32(r2)
   11488:	e17fff17 	ldw	r5,-4(fp)
   1148c:	e13ffd17 	ldw	r4,-12(fp)
   11490:	103ee83a 	callr	r2
   11494:	00000a06 	br	114c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11498:	e0bfff17 	ldw	r2,-4(fp)
   1149c:	00c80004 	movi	r3,8192
   114a0:	10c00115 	stw	r3,4(r2)
      return 0;
   114a4:	0005883a 	mov	r2,zero
   114a8:	00000506 	br	114c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   114ac:	00113e80 	call	113e8 <alt_get_errno>
   114b0:	1007883a 	mov	r3,r2
   114b4:	00801444 	movi	r2,81
   114b8:	18800015 	stw	r2,0(r3)
    return -1;
   114bc:	00bfffc4 	movi	r2,-1
  }
}
   114c0:	e037883a 	mov	sp,fp
   114c4:	dfc00117 	ldw	ra,4(sp)
   114c8:	df000017 	ldw	fp,0(sp)
   114cc:	dec00204 	addi	sp,sp,8
   114d0:	f800283a 	ret

000114d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   114d4:	defffe04 	addi	sp,sp,-8
   114d8:	dfc00115 	stw	ra,4(sp)
   114dc:	df000015 	stw	fp,0(sp)
   114e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   114e4:	d0a00b17 	ldw	r2,-32724(gp)
   114e8:	10000326 	beq	r2,zero,114f8 <alt_get_errno+0x24>
   114ec:	d0a00b17 	ldw	r2,-32724(gp)
   114f0:	103ee83a 	callr	r2
   114f4:	00000106 	br	114fc <alt_get_errno+0x28>
   114f8:	d0a72b04 	addi	r2,gp,-25428
}
   114fc:	e037883a 	mov	sp,fp
   11500:	dfc00117 	ldw	ra,4(sp)
   11504:	df000017 	ldw	fp,0(sp)
   11508:	dec00204 	addi	sp,sp,8
   1150c:	f800283a 	ret

00011510 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11510:	deffed04 	addi	sp,sp,-76
   11514:	dfc01215 	stw	ra,72(sp)
   11518:	df001115 	stw	fp,68(sp)
   1151c:	df001104 	addi	fp,sp,68
   11520:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11524:	e0bfff17 	ldw	r2,-4(fp)
   11528:	10000616 	blt	r2,zero,11544 <isatty+0x34>
   1152c:	e0bfff17 	ldw	r2,-4(fp)
   11530:	10c00324 	muli	r3,r2,12
   11534:	00800074 	movhi	r2,1
   11538:	10943f04 	addi	r2,r2,20732
   1153c:	1885883a 	add	r2,r3,r2
   11540:	00000106 	br	11548 <isatty+0x38>
   11544:	0005883a 	mov	r2,zero
   11548:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1154c:	e0bfef17 	ldw	r2,-68(fp)
   11550:	10000e26 	beq	r2,zero,1158c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11554:	e0bfef17 	ldw	r2,-68(fp)
   11558:	10800017 	ldw	r2,0(r2)
   1155c:	10800817 	ldw	r2,32(r2)
   11560:	1000021e 	bne	r2,zero,1156c <isatty+0x5c>
    {
      return 1;
   11564:	00800044 	movi	r2,1
   11568:	00000d06 	br	115a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1156c:	e0bff004 	addi	r2,fp,-64
   11570:	100b883a 	mov	r5,r2
   11574:	e13fff17 	ldw	r4,-4(fp)
   11578:	00114240 	call	11424 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1157c:	e0bff117 	ldw	r2,-60(fp)
   11580:	10880020 	cmpeqi	r2,r2,8192
   11584:	10803fcc 	andi	r2,r2,255
   11588:	00000506 	br	115a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1158c:	00114d40 	call	114d4 <alt_get_errno>
   11590:	1007883a 	mov	r3,r2
   11594:	00801444 	movi	r2,81
   11598:	18800015 	stw	r2,0(r3)
    return 0;
   1159c:	0005883a 	mov	r2,zero
  }
}
   115a0:	e037883a 	mov	sp,fp
   115a4:	dfc00117 	ldw	ra,4(sp)
   115a8:	df000017 	ldw	fp,0(sp)
   115ac:	dec00204 	addi	sp,sp,8
   115b0:	f800283a 	ret

000115b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   115b4:	defffc04 	addi	sp,sp,-16
   115b8:	df000315 	stw	fp,12(sp)
   115bc:	df000304 	addi	fp,sp,12
   115c0:	e13ffd15 	stw	r4,-12(fp)
   115c4:	e17ffe15 	stw	r5,-8(fp)
   115c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   115cc:	e0fffe17 	ldw	r3,-8(fp)
   115d0:	e0bffd17 	ldw	r2,-12(fp)
   115d4:	18800c26 	beq	r3,r2,11608 <alt_load_section+0x54>
  {
    while( to != end )
   115d8:	00000806 	br	115fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   115dc:	e0bffe17 	ldw	r2,-8(fp)
   115e0:	10c00104 	addi	r3,r2,4
   115e4:	e0fffe15 	stw	r3,-8(fp)
   115e8:	e0fffd17 	ldw	r3,-12(fp)
   115ec:	19000104 	addi	r4,r3,4
   115f0:	e13ffd15 	stw	r4,-12(fp)
   115f4:	18c00017 	ldw	r3,0(r3)
   115f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   115fc:	e0fffe17 	ldw	r3,-8(fp)
   11600:	e0bfff17 	ldw	r2,-4(fp)
   11604:	18bff51e 	bne	r3,r2,115dc <__alt_data_end+0xff0115dc>
    {
      *to++ = *from++;
    }
  }
}
   11608:	0001883a 	nop
   1160c:	e037883a 	mov	sp,fp
   11610:	df000017 	ldw	fp,0(sp)
   11614:	dec00104 	addi	sp,sp,4
   11618:	f800283a 	ret

0001161c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1161c:	defffe04 	addi	sp,sp,-8
   11620:	dfc00115 	stw	ra,4(sp)
   11624:	df000015 	stw	fp,0(sp)
   11628:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1162c:	01800074 	movhi	r6,1
   11630:	3198c704 	addi	r6,r6,25372
   11634:	01400074 	movhi	r5,1
   11638:	2951cc04 	addi	r5,r5,18224
   1163c:	01000074 	movhi	r4,1
   11640:	2118c704 	addi	r4,r4,25372
   11644:	00115b40 	call	115b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11648:	01800034 	movhi	r6,0
   1164c:	31809104 	addi	r6,r6,580
   11650:	01400034 	movhi	r5,0
   11654:	29400804 	addi	r5,r5,32
   11658:	01000034 	movhi	r4,0
   1165c:	21000804 	addi	r4,r4,32
   11660:	00115b40 	call	115b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11664:	01800074 	movhi	r6,1
   11668:	3191cc04 	addi	r6,r6,18224
   1166c:	01400074 	movhi	r5,1
   11670:	294fdd04 	addi	r5,r5,16244
   11674:	01000074 	movhi	r4,1
   11678:	210fdd04 	addi	r4,r4,16244
   1167c:	00115b40 	call	115b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11680:	0012cb00 	call	12cb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11684:	0012e980 	call	12e98 <alt_icache_flush_all>
}
   11688:	0001883a 	nop
   1168c:	e037883a 	mov	sp,fp
   11690:	dfc00117 	ldw	ra,4(sp)
   11694:	df000017 	ldw	fp,0(sp)
   11698:	dec00204 	addi	sp,sp,8
   1169c:	f800283a 	ret

000116a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   116a0:	defffe04 	addi	sp,sp,-8
   116a4:	dfc00115 	stw	ra,4(sp)
   116a8:	df000015 	stw	fp,0(sp)
   116ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   116b0:	d0a00b17 	ldw	r2,-32724(gp)
   116b4:	10000326 	beq	r2,zero,116c4 <alt_get_errno+0x24>
   116b8:	d0a00b17 	ldw	r2,-32724(gp)
   116bc:	103ee83a 	callr	r2
   116c0:	00000106 	br	116c8 <alt_get_errno+0x28>
   116c4:	d0a72b04 	addi	r2,gp,-25428
}
   116c8:	e037883a 	mov	sp,fp
   116cc:	dfc00117 	ldw	ra,4(sp)
   116d0:	df000017 	ldw	fp,0(sp)
   116d4:	dec00204 	addi	sp,sp,8
   116d8:	f800283a 	ret

000116dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   116dc:	defff904 	addi	sp,sp,-28
   116e0:	dfc00615 	stw	ra,24(sp)
   116e4:	df000515 	stw	fp,20(sp)
   116e8:	df000504 	addi	fp,sp,20
   116ec:	e13ffd15 	stw	r4,-12(fp)
   116f0:	e17ffe15 	stw	r5,-8(fp)
   116f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   116f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   116fc:	e0bffd17 	ldw	r2,-12(fp)
   11700:	10000616 	blt	r2,zero,1171c <lseek+0x40>
   11704:	e0bffd17 	ldw	r2,-12(fp)
   11708:	10c00324 	muli	r3,r2,12
   1170c:	00800074 	movhi	r2,1
   11710:	10943f04 	addi	r2,r2,20732
   11714:	1885883a 	add	r2,r3,r2
   11718:	00000106 	br	11720 <lseek+0x44>
   1171c:	0005883a 	mov	r2,zero
   11720:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   11724:	e0bffc17 	ldw	r2,-16(fp)
   11728:	10001026 	beq	r2,zero,1176c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	10800017 	ldw	r2,0(r2)
   11734:	10800717 	ldw	r2,28(r2)
   11738:	10000926 	beq	r2,zero,11760 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1173c:	e0bffc17 	ldw	r2,-16(fp)
   11740:	10800017 	ldw	r2,0(r2)
   11744:	10800717 	ldw	r2,28(r2)
   11748:	e1bfff17 	ldw	r6,-4(fp)
   1174c:	e17ffe17 	ldw	r5,-8(fp)
   11750:	e13ffc17 	ldw	r4,-16(fp)
   11754:	103ee83a 	callr	r2
   11758:	e0bffb15 	stw	r2,-20(fp)
   1175c:	00000506 	br	11774 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   11760:	00bfde84 	movi	r2,-134
   11764:	e0bffb15 	stw	r2,-20(fp)
   11768:	00000206 	br	11774 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1176c:	00bfebc4 	movi	r2,-81
   11770:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   11774:	e0bffb17 	ldw	r2,-20(fp)
   11778:	1000070e 	bge	r2,zero,11798 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1177c:	00116a00 	call	116a0 <alt_get_errno>
   11780:	1007883a 	mov	r3,r2
   11784:	e0bffb17 	ldw	r2,-20(fp)
   11788:	0085c83a 	sub	r2,zero,r2
   1178c:	18800015 	stw	r2,0(r3)
    rc = -1;
   11790:	00bfffc4 	movi	r2,-1
   11794:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   11798:	e0bffb17 	ldw	r2,-20(fp)
}
   1179c:	e037883a 	mov	sp,fp
   117a0:	dfc00117 	ldw	ra,4(sp)
   117a4:	df000017 	ldw	fp,0(sp)
   117a8:	dec00204 	addi	sp,sp,8
   117ac:	f800283a 	ret

000117b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   117b0:	defffd04 	addi	sp,sp,-12
   117b4:	dfc00215 	stw	ra,8(sp)
   117b8:	df000115 	stw	fp,4(sp)
   117bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   117c0:	0009883a 	mov	r4,zero
   117c4:	0011d040 	call	11d04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   117c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   117cc:	0011d3c0 	call	11d3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   117d0:	01800074 	movhi	r6,1
   117d4:	3191c404 	addi	r6,r6,18192
   117d8:	01400074 	movhi	r5,1
   117dc:	2951c404 	addi	r5,r5,18192
   117e0:	01000074 	movhi	r4,1
   117e4:	2111c404 	addi	r4,r4,18192
   117e8:	00132300 	call	13230 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   117ec:	0012dd80 	call	12dd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   117f0:	01000074 	movhi	r4,1
   117f4:	210b8e04 	addi	r4,r4,11832
   117f8:	0013a300 	call	13a30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   117fc:	d0a72f17 	ldw	r2,-25412(gp)
   11800:	d0e73017 	ldw	r3,-25408(gp)
   11804:	d1273117 	ldw	r4,-25404(gp)
   11808:	200d883a 	mov	r6,r4
   1180c:	180b883a 	mov	r5,r3
   11810:	1009883a 	mov	r4,r2
   11814:	0000fa00 	call	fa0 <main>
   11818:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1181c:	01000044 	movi	r4,1
   11820:	00112740 	call	11274 <close>
  exit (result);
   11824:	e13fff17 	ldw	r4,-4(fp)
   11828:	0013a440 	call	13a44 <exit>

0001182c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1182c:	defffe04 	addi	sp,sp,-8
   11830:	df000115 	stw	fp,4(sp)
   11834:	df000104 	addi	fp,sp,4
   11838:	e13fff15 	stw	r4,-4(fp)
}
   1183c:	0001883a 	nop
   11840:	e037883a 	mov	sp,fp
   11844:	df000017 	ldw	fp,0(sp)
   11848:	dec00104 	addi	sp,sp,4
   1184c:	f800283a 	ret

00011850 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11850:	defffe04 	addi	sp,sp,-8
   11854:	df000115 	stw	fp,4(sp)
   11858:	df000104 	addi	fp,sp,4
   1185c:	e13fff15 	stw	r4,-4(fp)
}
   11860:	0001883a 	nop
   11864:	e037883a 	mov	sp,fp
   11868:	df000017 	ldw	fp,0(sp)
   1186c:	dec00104 	addi	sp,sp,4
   11870:	f800283a 	ret

00011874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11874:	defffe04 	addi	sp,sp,-8
   11878:	dfc00115 	stw	ra,4(sp)
   1187c:	df000015 	stw	fp,0(sp)
   11880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11884:	d0a00b17 	ldw	r2,-32724(gp)
   11888:	10000326 	beq	r2,zero,11898 <alt_get_errno+0x24>
   1188c:	d0a00b17 	ldw	r2,-32724(gp)
   11890:	103ee83a 	callr	r2
   11894:	00000106 	br	1189c <alt_get_errno+0x28>
   11898:	d0a72b04 	addi	r2,gp,-25428
}
   1189c:	e037883a 	mov	sp,fp
   118a0:	dfc00117 	ldw	ra,4(sp)
   118a4:	df000017 	ldw	fp,0(sp)
   118a8:	dec00204 	addi	sp,sp,8
   118ac:	f800283a 	ret

000118b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   118b0:	defff904 	addi	sp,sp,-28
   118b4:	dfc00615 	stw	ra,24(sp)
   118b8:	df000515 	stw	fp,20(sp)
   118bc:	df000504 	addi	fp,sp,20
   118c0:	e13ffd15 	stw	r4,-12(fp)
   118c4:	e17ffe15 	stw	r5,-8(fp)
   118c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10000616 	blt	r2,zero,118ec <read+0x3c>
   118d4:	e0bffd17 	ldw	r2,-12(fp)
   118d8:	10c00324 	muli	r3,r2,12
   118dc:	00800074 	movhi	r2,1
   118e0:	10943f04 	addi	r2,r2,20732
   118e4:	1885883a 	add	r2,r3,r2
   118e8:	00000106 	br	118f0 <read+0x40>
   118ec:	0005883a 	mov	r2,zero
   118f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   118f4:	e0bffb17 	ldw	r2,-20(fp)
   118f8:	10002226 	beq	r2,zero,11984 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   118fc:	e0bffb17 	ldw	r2,-20(fp)
   11900:	10800217 	ldw	r2,8(r2)
   11904:	108000cc 	andi	r2,r2,3
   11908:	10800060 	cmpeqi	r2,r2,1
   1190c:	1000181e 	bne	r2,zero,11970 <read+0xc0>
        (fd->dev->read))
   11910:	e0bffb17 	ldw	r2,-20(fp)
   11914:	10800017 	ldw	r2,0(r2)
   11918:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1191c:	10001426 	beq	r2,zero,11970 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11920:	e0bffb17 	ldw	r2,-20(fp)
   11924:	10800017 	ldw	r2,0(r2)
   11928:	10800517 	ldw	r2,20(r2)
   1192c:	e0ffff17 	ldw	r3,-4(fp)
   11930:	180d883a 	mov	r6,r3
   11934:	e17ffe17 	ldw	r5,-8(fp)
   11938:	e13ffb17 	ldw	r4,-20(fp)
   1193c:	103ee83a 	callr	r2
   11940:	e0bffc15 	stw	r2,-16(fp)
   11944:	e0bffc17 	ldw	r2,-16(fp)
   11948:	1000070e 	bge	r2,zero,11968 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1194c:	00118740 	call	11874 <alt_get_errno>
   11950:	1007883a 	mov	r3,r2
   11954:	e0bffc17 	ldw	r2,-16(fp)
   11958:	0085c83a 	sub	r2,zero,r2
   1195c:	18800015 	stw	r2,0(r3)
          return -1;
   11960:	00bfffc4 	movi	r2,-1
   11964:	00000c06 	br	11998 <read+0xe8>
        }
        return rval;
   11968:	e0bffc17 	ldw	r2,-16(fp)
   1196c:	00000a06 	br	11998 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   11970:	00118740 	call	11874 <alt_get_errno>
   11974:	1007883a 	mov	r3,r2
   11978:	00800344 	movi	r2,13
   1197c:	18800015 	stw	r2,0(r3)
   11980:	00000406 	br	11994 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   11984:	00118740 	call	11874 <alt_get_errno>
   11988:	1007883a 	mov	r3,r2
   1198c:	00801444 	movi	r2,81
   11990:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11994:	00bfffc4 	movi	r2,-1
}
   11998:	e037883a 	mov	sp,fp
   1199c:	dfc00117 	ldw	ra,4(sp)
   119a0:	df000017 	ldw	fp,0(sp)
   119a4:	dec00204 	addi	sp,sp,8
   119a8:	f800283a 	ret

000119ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   119ac:	defffe04 	addi	sp,sp,-8
   119b0:	df000115 	stw	fp,4(sp)
   119b4:	df000104 	addi	fp,sp,4
   119b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   119bc:	e0bfff17 	ldw	r2,-4(fp)
   119c0:	108000d0 	cmplti	r2,r2,3
   119c4:	10000d1e 	bne	r2,zero,119fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   119c8:	00800074 	movhi	r2,1
   119cc:	10943f04 	addi	r2,r2,20732
   119d0:	e0ffff17 	ldw	r3,-4(fp)
   119d4:	18c00324 	muli	r3,r3,12
   119d8:	10c5883a 	add	r2,r2,r3
   119dc:	10800204 	addi	r2,r2,8
   119e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   119e4:	00800074 	movhi	r2,1
   119e8:	10943f04 	addi	r2,r2,20732
   119ec:	e0ffff17 	ldw	r3,-4(fp)
   119f0:	18c00324 	muli	r3,r3,12
   119f4:	10c5883a 	add	r2,r2,r3
   119f8:	10000015 	stw	zero,0(r2)
  }
}
   119fc:	0001883a 	nop
   11a00:	e037883a 	mov	sp,fp
   11a04:	df000017 	ldw	fp,0(sp)
   11a08:	dec00104 	addi	sp,sp,4
   11a0c:	f800283a 	ret

00011a10 <alt_remap_cached>:
 * Return a pointer that should be used to access the cached memory.
 */

void* 
alt_remap_cached(volatile void* ptr, alt_u32 len)
{
   11a10:	defffd04 	addi	sp,sp,-12
   11a14:	df000215 	stw	fp,8(sp)
   11a18:	df000204 	addi	fp,sp,8
   11a1c:	e13ffe15 	stw	r4,-8(fp)
   11a20:	e17fff15 	stw	r5,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  return (void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK);
   11a24:	e0fffe17 	ldw	r3,-8(fp)
   11a28:	00a00034 	movhi	r2,32768
   11a2c:	10bfffc4 	addi	r2,r2,-1
   11a30:	1884703a 	and	r2,r3,r2
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  return (void*) ptr;
#endif /* No data cache */
}
   11a34:	e037883a 	mov	sp,fp
   11a38:	df000017 	ldw	fp,0(sp)
   11a3c:	dec00104 	addi	sp,sp,4
   11a40:	f800283a 	ret

00011a44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11a44:	defff904 	addi	sp,sp,-28
   11a48:	df000615 	stw	fp,24(sp)
   11a4c:	df000604 	addi	fp,sp,24
   11a50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a54:	0005303a 	rdctl	r2,status
   11a58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a5c:	e0fffe17 	ldw	r3,-8(fp)
   11a60:	00bfff84 	movi	r2,-2
   11a64:	1884703a 	and	r2,r3,r2
   11a68:	1001703a 	wrctl	status,r2
  
  return context;
   11a6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11a70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11a74:	d0a00c17 	ldw	r2,-32720(gp)
   11a78:	10c000c4 	addi	r3,r2,3
   11a7c:	00bfff04 	movi	r2,-4
   11a80:	1884703a 	and	r2,r3,r2
   11a84:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11a88:	d0e00c17 	ldw	r3,-32720(gp)
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	1887883a 	add	r3,r3,r2
   11a94:	00804034 	movhi	r2,256
   11a98:	10800004 	addi	r2,r2,0
   11a9c:	10c0062e 	bgeu	r2,r3,11ab8 <sbrk+0x74>
   11aa0:	e0bffb17 	ldw	r2,-20(fp)
   11aa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11aa8:	e0bffa17 	ldw	r2,-24(fp)
   11aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11ab0:	00bfffc4 	movi	r2,-1
   11ab4:	00000b06 	br	11ae4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11ab8:	d0a00c17 	ldw	r2,-32720(gp)
   11abc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   11ac0:	d0e00c17 	ldw	r3,-32720(gp)
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
   11ac8:	1885883a 	add	r2,r3,r2
   11acc:	d0a00c15 	stw	r2,-32720(gp)
   11ad0:	e0bffb17 	ldw	r2,-20(fp)
   11ad4:	e0bffc15 	stw	r2,-16(fp)
   11ad8:	e0bffc17 	ldw	r2,-16(fp)
   11adc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11ae0:	e0bffd17 	ldw	r2,-12(fp)
} 
   11ae4:	e037883a 	mov	sp,fp
   11ae8:	df000017 	ldw	fp,0(sp)
   11aec:	dec00104 	addi	sp,sp,4
   11af0:	f800283a 	ret

00011af4 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
   11af4:	defffa04 	addi	sp,sp,-24
   11af8:	dfc00515 	stw	ra,20(sp)
   11afc:	df000415 	stw	fp,16(sp)
   11b00:	df000404 	addi	fp,sp,16
   11b04:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
   11b08:	e0bfff17 	ldw	r2,-4(fp)
   11b0c:	108007c4 	addi	r2,r2,31
   11b10:	1004d17a 	srli	r2,r2,5
   11b14:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
   11b18:	e0bffc17 	ldw	r2,-16(fp)
   11b1c:	1004917a 	slli	r2,r2,5
   11b20:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
   11b24:	e17ffd17 	ldw	r5,-12(fp)
   11b28:	01000804 	movi	r4,32
   11b2c:	0013a7c0 	call	13a7c <memalign>
   11b30:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
   11b34:	e0bffe17 	ldw	r2,-8(fp)
   11b38:	1000021e 	bne	r2,zero,11b44 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
   11b3c:	0005883a 	mov	r2,zero
   11b40:	00000506 	br	11b58 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
   11b44:	e17ffd17 	ldw	r5,-12(fp)
   11b48:	e13ffe17 	ldw	r4,-8(fp)
   11b4c:	00113440 	call	11344 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
   11b50:	e0bffe17 	ldw	r2,-8(fp)
   11b54:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
   11b58:	e037883a 	mov	sp,fp
   11b5c:	dfc00117 	ldw	ra,4(sp)
   11b60:	df000017 	ldw	fp,0(sp)
   11b64:	dec00204 	addi	sp,sp,8
   11b68:	f800283a 	ret

00011b6c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11b6c:	defffd04 	addi	sp,sp,-12
   11b70:	dfc00215 	stw	ra,8(sp)
   11b74:	df000115 	stw	fp,4(sp)
   11b78:	df000104 	addi	fp,sp,4
   11b7c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   11b80:	e13fff17 	ldw	r4,-4(fp)
   11b84:	0012b580 	call	12b58 <alt_busy_sleep>
}
   11b88:	e037883a 	mov	sp,fp
   11b8c:	dfc00117 	ldw	ra,4(sp)
   11b90:	df000017 	ldw	fp,0(sp)
   11b94:	dec00204 	addi	sp,sp,8
   11b98:	f800283a 	ret

00011b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11b9c:	defffe04 	addi	sp,sp,-8
   11ba0:	dfc00115 	stw	ra,4(sp)
   11ba4:	df000015 	stw	fp,0(sp)
   11ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11bac:	d0a00b17 	ldw	r2,-32724(gp)
   11bb0:	10000326 	beq	r2,zero,11bc0 <alt_get_errno+0x24>
   11bb4:	d0a00b17 	ldw	r2,-32724(gp)
   11bb8:	103ee83a 	callr	r2
   11bbc:	00000106 	br	11bc4 <alt_get_errno+0x28>
   11bc0:	d0a72b04 	addi	r2,gp,-25428
}
   11bc4:	e037883a 	mov	sp,fp
   11bc8:	dfc00117 	ldw	ra,4(sp)
   11bcc:	df000017 	ldw	fp,0(sp)
   11bd0:	dec00204 	addi	sp,sp,8
   11bd4:	f800283a 	ret

00011bd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11bd8:	defff904 	addi	sp,sp,-28
   11bdc:	dfc00615 	stw	ra,24(sp)
   11be0:	df000515 	stw	fp,20(sp)
   11be4:	df000504 	addi	fp,sp,20
   11be8:	e13ffd15 	stw	r4,-12(fp)
   11bec:	e17ffe15 	stw	r5,-8(fp)
   11bf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11bf4:	e0bffd17 	ldw	r2,-12(fp)
   11bf8:	10000616 	blt	r2,zero,11c14 <write+0x3c>
   11bfc:	e0bffd17 	ldw	r2,-12(fp)
   11c00:	10c00324 	muli	r3,r2,12
   11c04:	00800074 	movhi	r2,1
   11c08:	10943f04 	addi	r2,r2,20732
   11c0c:	1885883a 	add	r2,r3,r2
   11c10:	00000106 	br	11c18 <write+0x40>
   11c14:	0005883a 	mov	r2,zero
   11c18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11c1c:	e0bffb17 	ldw	r2,-20(fp)
   11c20:	10002126 	beq	r2,zero,11ca8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11c24:	e0bffb17 	ldw	r2,-20(fp)
   11c28:	10800217 	ldw	r2,8(r2)
   11c2c:	108000cc 	andi	r2,r2,3
   11c30:	10001826 	beq	r2,zero,11c94 <write+0xbc>
   11c34:	e0bffb17 	ldw	r2,-20(fp)
   11c38:	10800017 	ldw	r2,0(r2)
   11c3c:	10800617 	ldw	r2,24(r2)
   11c40:	10001426 	beq	r2,zero,11c94 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11c44:	e0bffb17 	ldw	r2,-20(fp)
   11c48:	10800017 	ldw	r2,0(r2)
   11c4c:	10800617 	ldw	r2,24(r2)
   11c50:	e0ffff17 	ldw	r3,-4(fp)
   11c54:	180d883a 	mov	r6,r3
   11c58:	e17ffe17 	ldw	r5,-8(fp)
   11c5c:	e13ffb17 	ldw	r4,-20(fp)
   11c60:	103ee83a 	callr	r2
   11c64:	e0bffc15 	stw	r2,-16(fp)
   11c68:	e0bffc17 	ldw	r2,-16(fp)
   11c6c:	1000070e 	bge	r2,zero,11c8c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11c70:	0011b9c0 	call	11b9c <alt_get_errno>
   11c74:	1007883a 	mov	r3,r2
   11c78:	e0bffc17 	ldw	r2,-16(fp)
   11c7c:	0085c83a 	sub	r2,zero,r2
   11c80:	18800015 	stw	r2,0(r3)
        return -1;
   11c84:	00bfffc4 	movi	r2,-1
   11c88:	00000c06 	br	11cbc <write+0xe4>
      }
      return rval;
   11c8c:	e0bffc17 	ldw	r2,-16(fp)
   11c90:	00000a06 	br	11cbc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11c94:	0011b9c0 	call	11b9c <alt_get_errno>
   11c98:	1007883a 	mov	r3,r2
   11c9c:	00800344 	movi	r2,13
   11ca0:	18800015 	stw	r2,0(r3)
   11ca4:	00000406 	br	11cb8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11ca8:	0011b9c0 	call	11b9c <alt_get_errno>
   11cac:	1007883a 	mov	r3,r2
   11cb0:	00801444 	movi	r2,81
   11cb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11cb8:	00bfffc4 	movi	r2,-1
}
   11cbc:	e037883a 	mov	sp,fp
   11cc0:	dfc00117 	ldw	ra,4(sp)
   11cc4:	df000017 	ldw	fp,0(sp)
   11cc8:	dec00204 	addi	sp,sp,8
   11ccc:	f800283a 	ret

00011cd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11cd0:	defffd04 	addi	sp,sp,-12
   11cd4:	dfc00215 	stw	ra,8(sp)
   11cd8:	df000115 	stw	fp,4(sp)
   11cdc:	df000104 	addi	fp,sp,4
   11ce0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11ce4:	d1600804 	addi	r5,gp,-32736
   11ce8:	e13fff17 	ldw	r4,-4(fp)
   11cec:	0012d340 	call	12d34 <alt_dev_llist_insert>
}
   11cf0:	e037883a 	mov	sp,fp
   11cf4:	dfc00117 	ldw	ra,4(sp)
   11cf8:	df000017 	ldw	fp,0(sp)
   11cfc:	dec00204 	addi	sp,sp,8
   11d00:	f800283a 	ret

00011d04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11d04:	defffd04 	addi	sp,sp,-12
   11d08:	dfc00215 	stw	ra,8(sp)
   11d0c:	df000115 	stw	fp,4(sp)
   11d10:	df000104 	addi	fp,sp,4
   11d14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   11d18:	00136a40 	call	136a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11d1c:	00800044 	movi	r2,1
   11d20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11d24:	0001883a 	nop
   11d28:	e037883a 	mov	sp,fp
   11d2c:	dfc00117 	ldw	ra,4(sp)
   11d30:	df000017 	ldw	fp,0(sp)
   11d34:	dec00204 	addi	sp,sp,8
   11d38:	f800283a 	ret

00011d3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11d3c:	defffe04 	addi	sp,sp,-8
   11d40:	dfc00115 	stw	ra,4(sp)
   11d44:	df000015 	stw	fp,0(sp)
   11d48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
   11d4c:	00804034 	movhi	r2,256
   11d50:	10840004 	addi	r2,r2,4096
   11d54:	d0a73215 	stw	r2,-25400(gp)
   11d58:	0080bef4 	movhi	r2,763
   11d5c:	10bc2004 	addi	r2,r2,-3968
   11d60:	d0a73315 	stw	r2,-25396(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
   11d64:	01c0fa04 	movi	r7,1000
   11d68:	01800104 	movi	r6,4
   11d6c:	000b883a 	mov	r5,zero
   11d70:	01004034 	movhi	r4,256
   11d74:	21040804 	addi	r4,r4,4128
   11d78:	00128980 	call	12898 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   11d7c:	000d883a 	mov	r6,zero
   11d80:	000b883a 	mov	r5,zero
   11d84:	01000074 	movhi	r4,1
   11d88:	2114a904 	addi	r4,r4,21156
   11d8c:	0011f1c0 	call	11f1c <altera_avalon_jtag_uart_init>
   11d90:	01000074 	movhi	r4,1
   11d94:	21149f04 	addi	r4,r4,21116
   11d98:	0011cd00 	call	11cd0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   11d9c:	0001883a 	nop
}
   11da0:	0001883a 	nop
   11da4:	e037883a 	mov	sp,fp
   11da8:	dfc00117 	ldw	ra,4(sp)
   11dac:	df000017 	ldw	fp,0(sp)
   11db0:	dec00204 	addi	sp,sp,8
   11db4:	f800283a 	ret

00011db8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11db8:	defffa04 	addi	sp,sp,-24
   11dbc:	dfc00515 	stw	ra,20(sp)
   11dc0:	df000415 	stw	fp,16(sp)
   11dc4:	df000404 	addi	fp,sp,16
   11dc8:	e13ffd15 	stw	r4,-12(fp)
   11dcc:	e17ffe15 	stw	r5,-8(fp)
   11dd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11dd4:	e0bffd17 	ldw	r2,-12(fp)
   11dd8:	10800017 	ldw	r2,0(r2)
   11ddc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11de0:	e0bffc17 	ldw	r2,-16(fp)
   11de4:	10c00a04 	addi	r3,r2,40
   11de8:	e0bffd17 	ldw	r2,-12(fp)
   11dec:	10800217 	ldw	r2,8(r2)
   11df0:	100f883a 	mov	r7,r2
   11df4:	e1bfff17 	ldw	r6,-4(fp)
   11df8:	e17ffe17 	ldw	r5,-8(fp)
   11dfc:	1809883a 	mov	r4,r3
   11e00:	00123e00 	call	123e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11e04:	e037883a 	mov	sp,fp
   11e08:	dfc00117 	ldw	ra,4(sp)
   11e0c:	df000017 	ldw	fp,0(sp)
   11e10:	dec00204 	addi	sp,sp,8
   11e14:	f800283a 	ret

00011e18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11e18:	defffa04 	addi	sp,sp,-24
   11e1c:	dfc00515 	stw	ra,20(sp)
   11e20:	df000415 	stw	fp,16(sp)
   11e24:	df000404 	addi	fp,sp,16
   11e28:	e13ffd15 	stw	r4,-12(fp)
   11e2c:	e17ffe15 	stw	r5,-8(fp)
   11e30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11e34:	e0bffd17 	ldw	r2,-12(fp)
   11e38:	10800017 	ldw	r2,0(r2)
   11e3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	10c00a04 	addi	r3,r2,40
   11e48:	e0bffd17 	ldw	r2,-12(fp)
   11e4c:	10800217 	ldw	r2,8(r2)
   11e50:	100f883a 	mov	r7,r2
   11e54:	e1bfff17 	ldw	r6,-4(fp)
   11e58:	e17ffe17 	ldw	r5,-8(fp)
   11e5c:	1809883a 	mov	r4,r3
   11e60:	00125fc0 	call	125fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11e64:	e037883a 	mov	sp,fp
   11e68:	dfc00117 	ldw	ra,4(sp)
   11e6c:	df000017 	ldw	fp,0(sp)
   11e70:	dec00204 	addi	sp,sp,8
   11e74:	f800283a 	ret

00011e78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11e78:	defffc04 	addi	sp,sp,-16
   11e7c:	dfc00315 	stw	ra,12(sp)
   11e80:	df000215 	stw	fp,8(sp)
   11e84:	df000204 	addi	fp,sp,8
   11e88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11e8c:	e0bfff17 	ldw	r2,-4(fp)
   11e90:	10800017 	ldw	r2,0(r2)
   11e94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11e98:	e0bffe17 	ldw	r2,-8(fp)
   11e9c:	10c00a04 	addi	r3,r2,40
   11ea0:	e0bfff17 	ldw	r2,-4(fp)
   11ea4:	10800217 	ldw	r2,8(r2)
   11ea8:	100b883a 	mov	r5,r2
   11eac:	1809883a 	mov	r4,r3
   11eb0:	00122880 	call	12288 <altera_avalon_jtag_uart_close>
}
   11eb4:	e037883a 	mov	sp,fp
   11eb8:	dfc00117 	ldw	ra,4(sp)
   11ebc:	df000017 	ldw	fp,0(sp)
   11ec0:	dec00204 	addi	sp,sp,8
   11ec4:	f800283a 	ret

00011ec8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11ec8:	defffa04 	addi	sp,sp,-24
   11ecc:	dfc00515 	stw	ra,20(sp)
   11ed0:	df000415 	stw	fp,16(sp)
   11ed4:	df000404 	addi	fp,sp,16
   11ed8:	e13ffd15 	stw	r4,-12(fp)
   11edc:	e17ffe15 	stw	r5,-8(fp)
   11ee0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11ee4:	e0bffd17 	ldw	r2,-12(fp)
   11ee8:	10800017 	ldw	r2,0(r2)
   11eec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11ef0:	e0bffc17 	ldw	r2,-16(fp)
   11ef4:	10800a04 	addi	r2,r2,40
   11ef8:	e1bfff17 	ldw	r6,-4(fp)
   11efc:	e17ffe17 	ldw	r5,-8(fp)
   11f00:	1009883a 	mov	r4,r2
   11f04:	00122f00 	call	122f0 <altera_avalon_jtag_uart_ioctl>
}
   11f08:	e037883a 	mov	sp,fp
   11f0c:	dfc00117 	ldw	ra,4(sp)
   11f10:	df000017 	ldw	fp,0(sp)
   11f14:	dec00204 	addi	sp,sp,8
   11f18:	f800283a 	ret

00011f1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11f1c:	defffa04 	addi	sp,sp,-24
   11f20:	dfc00515 	stw	ra,20(sp)
   11f24:	df000415 	stw	fp,16(sp)
   11f28:	df000404 	addi	fp,sp,16
   11f2c:	e13ffd15 	stw	r4,-12(fp)
   11f30:	e17ffe15 	stw	r5,-8(fp)
   11f34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11f38:	e0bffd17 	ldw	r2,-12(fp)
   11f3c:	00c00044 	movi	r3,1
   11f40:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11f44:	e0bffd17 	ldw	r2,-12(fp)
   11f48:	10800017 	ldw	r2,0(r2)
   11f4c:	10800104 	addi	r2,r2,4
   11f50:	1007883a 	mov	r3,r2
   11f54:	e0bffd17 	ldw	r2,-12(fp)
   11f58:	10800817 	ldw	r2,32(r2)
   11f5c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11f60:	e0bffe17 	ldw	r2,-8(fp)
   11f64:	e0ffff17 	ldw	r3,-4(fp)
   11f68:	d8000015 	stw	zero,0(sp)
   11f6c:	e1fffd17 	ldw	r7,-12(fp)
   11f70:	01800074 	movhi	r6,1
   11f74:	3187f704 	addi	r6,r6,8156
   11f78:	180b883a 	mov	r5,r3
   11f7c:	1009883a 	mov	r4,r2
   11f80:	0012ecc0 	call	12ecc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11f84:	e0bffd17 	ldw	r2,-12(fp)
   11f88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11f8c:	e0bffd17 	ldw	r2,-12(fp)
   11f90:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11f94:	d0e73517 	ldw	r3,-25388(gp)
   11f98:	e1fffd17 	ldw	r7,-12(fp)
   11f9c:	01800074 	movhi	r6,1
   11fa0:	31887a04 	addi	r6,r6,8680
   11fa4:	180b883a 	mov	r5,r3
   11fa8:	1009883a 	mov	r4,r2
   11fac:	0012a2c0 	call	12a2c <alt_alarm_start>
   11fb0:	1000040e 	bge	r2,zero,11fc4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11fb4:	e0fffd17 	ldw	r3,-12(fp)
   11fb8:	00a00034 	movhi	r2,32768
   11fbc:	10bfffc4 	addi	r2,r2,-1
   11fc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11fc4:	0001883a 	nop
   11fc8:	e037883a 	mov	sp,fp
   11fcc:	dfc00117 	ldw	ra,4(sp)
   11fd0:	df000017 	ldw	fp,0(sp)
   11fd4:	dec00204 	addi	sp,sp,8
   11fd8:	f800283a 	ret

00011fdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11fdc:	defff804 	addi	sp,sp,-32
   11fe0:	df000715 	stw	fp,28(sp)
   11fe4:	df000704 	addi	fp,sp,28
   11fe8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11fec:	e0bfff17 	ldw	r2,-4(fp)
   11ff0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11ff4:	e0bffb17 	ldw	r2,-20(fp)
   11ff8:	10800017 	ldw	r2,0(r2)
   11ffc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12000:	e0bffc17 	ldw	r2,-16(fp)
   12004:	10800104 	addi	r2,r2,4
   12008:	10800037 	ldwio	r2,0(r2)
   1200c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12010:	e0bffd17 	ldw	r2,-12(fp)
   12014:	1080c00c 	andi	r2,r2,768
   12018:	10006d26 	beq	r2,zero,121d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1201c:	e0bffd17 	ldw	r2,-12(fp)
   12020:	1080400c 	andi	r2,r2,256
   12024:	10003526 	beq	r2,zero,120fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12028:	00800074 	movhi	r2,1
   1202c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12030:	e0bffb17 	ldw	r2,-20(fp)
   12034:	10800a17 	ldw	r2,40(r2)
   12038:	10800044 	addi	r2,r2,1
   1203c:	1081ffcc 	andi	r2,r2,2047
   12040:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12044:	e0bffb17 	ldw	r2,-20(fp)
   12048:	10c00b17 	ldw	r3,44(r2)
   1204c:	e0bffe17 	ldw	r2,-8(fp)
   12050:	18801526 	beq	r3,r2,120a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12054:	e0bffc17 	ldw	r2,-16(fp)
   12058:	10800037 	ldwio	r2,0(r2)
   1205c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12060:	e0bff917 	ldw	r2,-28(fp)
   12064:	10a0000c 	andi	r2,r2,32768
   12068:	10001126 	beq	r2,zero,120b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1206c:	e0bffb17 	ldw	r2,-20(fp)
   12070:	10800a17 	ldw	r2,40(r2)
   12074:	e0fff917 	ldw	r3,-28(fp)
   12078:	1809883a 	mov	r4,r3
   1207c:	e0fffb17 	ldw	r3,-20(fp)
   12080:	1885883a 	add	r2,r3,r2
   12084:	10800e04 	addi	r2,r2,56
   12088:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1208c:	e0bffb17 	ldw	r2,-20(fp)
   12090:	10800a17 	ldw	r2,40(r2)
   12094:	10800044 	addi	r2,r2,1
   12098:	10c1ffcc 	andi	r3,r2,2047
   1209c:	e0bffb17 	ldw	r2,-20(fp)
   120a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   120a4:	003fe206 	br	12030 <__alt_data_end+0xff012030>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   120a8:	0001883a 	nop
   120ac:	00000106 	br	120b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   120b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   120b4:	e0bff917 	ldw	r2,-28(fp)
   120b8:	10bfffec 	andhi	r2,r2,65535
   120bc:	10000f26 	beq	r2,zero,120fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   120c0:	e0bffb17 	ldw	r2,-20(fp)
   120c4:	10c00817 	ldw	r3,32(r2)
   120c8:	00bfff84 	movi	r2,-2
   120cc:	1886703a 	and	r3,r3,r2
   120d0:	e0bffb17 	ldw	r2,-20(fp)
   120d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   120d8:	e0bffc17 	ldw	r2,-16(fp)
   120dc:	10800104 	addi	r2,r2,4
   120e0:	1007883a 	mov	r3,r2
   120e4:	e0bffb17 	ldw	r2,-20(fp)
   120e8:	10800817 	ldw	r2,32(r2)
   120ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   120f0:	e0bffc17 	ldw	r2,-16(fp)
   120f4:	10800104 	addi	r2,r2,4
   120f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   120fc:	e0bffd17 	ldw	r2,-12(fp)
   12100:	1080800c 	andi	r2,r2,512
   12104:	103fbe26 	beq	r2,zero,12000 <__alt_data_end+0xff012000>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12108:	e0bffd17 	ldw	r2,-12(fp)
   1210c:	1004d43a 	srli	r2,r2,16
   12110:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12114:	00001406 	br	12168 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12118:	e0bffc17 	ldw	r2,-16(fp)
   1211c:	e0fffb17 	ldw	r3,-20(fp)
   12120:	18c00d17 	ldw	r3,52(r3)
   12124:	e13ffb17 	ldw	r4,-20(fp)
   12128:	20c7883a 	add	r3,r4,r3
   1212c:	18c20e04 	addi	r3,r3,2104
   12130:	18c00003 	ldbu	r3,0(r3)
   12134:	18c03fcc 	andi	r3,r3,255
   12138:	18c0201c 	xori	r3,r3,128
   1213c:	18ffe004 	addi	r3,r3,-128
   12140:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12144:	e0bffb17 	ldw	r2,-20(fp)
   12148:	10800d17 	ldw	r2,52(r2)
   1214c:	10800044 	addi	r2,r2,1
   12150:	10c1ffcc 	andi	r3,r2,2047
   12154:	e0bffb17 	ldw	r2,-20(fp)
   12158:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1215c:	e0bffa17 	ldw	r2,-24(fp)
   12160:	10bfffc4 	addi	r2,r2,-1
   12164:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12168:	e0bffa17 	ldw	r2,-24(fp)
   1216c:	10000526 	beq	r2,zero,12184 <altera_avalon_jtag_uart_irq+0x1a8>
   12170:	e0bffb17 	ldw	r2,-20(fp)
   12174:	10c00d17 	ldw	r3,52(r2)
   12178:	e0bffb17 	ldw	r2,-20(fp)
   1217c:	10800c17 	ldw	r2,48(r2)
   12180:	18bfe51e 	bne	r3,r2,12118 <__alt_data_end+0xff012118>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12184:	e0bffa17 	ldw	r2,-24(fp)
   12188:	103f9d26 	beq	r2,zero,12000 <__alt_data_end+0xff012000>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1218c:	e0bffb17 	ldw	r2,-20(fp)
   12190:	10c00817 	ldw	r3,32(r2)
   12194:	00bfff44 	movi	r2,-3
   12198:	1886703a 	and	r3,r3,r2
   1219c:	e0bffb17 	ldw	r2,-20(fp)
   121a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   121a4:	e0bffb17 	ldw	r2,-20(fp)
   121a8:	10800017 	ldw	r2,0(r2)
   121ac:	10800104 	addi	r2,r2,4
   121b0:	1007883a 	mov	r3,r2
   121b4:	e0bffb17 	ldw	r2,-20(fp)
   121b8:	10800817 	ldw	r2,32(r2)
   121bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   121c0:	e0bffc17 	ldw	r2,-16(fp)
   121c4:	10800104 	addi	r2,r2,4
   121c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   121cc:	003f8c06 	br	12000 <__alt_data_end+0xff012000>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   121d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   121d4:	0001883a 	nop
   121d8:	e037883a 	mov	sp,fp
   121dc:	df000017 	ldw	fp,0(sp)
   121e0:	dec00104 	addi	sp,sp,4
   121e4:	f800283a 	ret

000121e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   121e8:	defff804 	addi	sp,sp,-32
   121ec:	df000715 	stw	fp,28(sp)
   121f0:	df000704 	addi	fp,sp,28
   121f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   121f8:	e0bffb17 	ldw	r2,-20(fp)
   121fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12200:	e0bff917 	ldw	r2,-28(fp)
   12204:	10800017 	ldw	r2,0(r2)
   12208:	10800104 	addi	r2,r2,4
   1220c:	10800037 	ldwio	r2,0(r2)
   12210:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12214:	e0bffa17 	ldw	r2,-24(fp)
   12218:	1081000c 	andi	r2,r2,1024
   1221c:	10000b26 	beq	r2,zero,1224c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12220:	e0bff917 	ldw	r2,-28(fp)
   12224:	10800017 	ldw	r2,0(r2)
   12228:	10800104 	addi	r2,r2,4
   1222c:	1007883a 	mov	r3,r2
   12230:	e0bff917 	ldw	r2,-28(fp)
   12234:	10800817 	ldw	r2,32(r2)
   12238:	10810014 	ori	r2,r2,1024
   1223c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   12240:	e0bff917 	ldw	r2,-28(fp)
   12244:	10000915 	stw	zero,36(r2)
   12248:	00000a06 	br	12274 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1224c:	e0bff917 	ldw	r2,-28(fp)
   12250:	10c00917 	ldw	r3,36(r2)
   12254:	00a00034 	movhi	r2,32768
   12258:	10bfff04 	addi	r2,r2,-4
   1225c:	10c00536 	bltu	r2,r3,12274 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   12260:	e0bff917 	ldw	r2,-28(fp)
   12264:	10800917 	ldw	r2,36(r2)
   12268:	10c00044 	addi	r3,r2,1
   1226c:	e0bff917 	ldw	r2,-28(fp)
   12270:	10c00915 	stw	r3,36(r2)
   12274:	d0a73517 	ldw	r2,-25388(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12278:	e037883a 	mov	sp,fp
   1227c:	df000017 	ldw	fp,0(sp)
   12280:	dec00104 	addi	sp,sp,4
   12284:	f800283a 	ret

00012288 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12288:	defffd04 	addi	sp,sp,-12
   1228c:	df000215 	stw	fp,8(sp)
   12290:	df000204 	addi	fp,sp,8
   12294:	e13ffe15 	stw	r4,-8(fp)
   12298:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1229c:	00000506 	br	122b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   122a0:	e0bfff17 	ldw	r2,-4(fp)
   122a4:	1090000c 	andi	r2,r2,16384
   122a8:	10000226 	beq	r2,zero,122b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   122ac:	00bffd44 	movi	r2,-11
   122b0:	00000b06 	br	122e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   122b4:	e0bffe17 	ldw	r2,-8(fp)
   122b8:	10c00d17 	ldw	r3,52(r2)
   122bc:	e0bffe17 	ldw	r2,-8(fp)
   122c0:	10800c17 	ldw	r2,48(r2)
   122c4:	18800526 	beq	r3,r2,122dc <altera_avalon_jtag_uart_close+0x54>
   122c8:	e0bffe17 	ldw	r2,-8(fp)
   122cc:	10c00917 	ldw	r3,36(r2)
   122d0:	e0bffe17 	ldw	r2,-8(fp)
   122d4:	10800117 	ldw	r2,4(r2)
   122d8:	18bff136 	bltu	r3,r2,122a0 <__alt_data_end+0xff0122a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   122dc:	0005883a 	mov	r2,zero
}
   122e0:	e037883a 	mov	sp,fp
   122e4:	df000017 	ldw	fp,0(sp)
   122e8:	dec00104 	addi	sp,sp,4
   122ec:	f800283a 	ret

000122f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   122f0:	defffa04 	addi	sp,sp,-24
   122f4:	df000515 	stw	fp,20(sp)
   122f8:	df000504 	addi	fp,sp,20
   122fc:	e13ffd15 	stw	r4,-12(fp)
   12300:	e17ffe15 	stw	r5,-8(fp)
   12304:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   12308:	00bff9c4 	movi	r2,-25
   1230c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   12310:	e0bffe17 	ldw	r2,-8(fp)
   12314:	10da8060 	cmpeqi	r3,r2,27137
   12318:	1800031e 	bne	r3,zero,12328 <altera_avalon_jtag_uart_ioctl+0x38>
   1231c:	109a80a0 	cmpeqi	r2,r2,27138
   12320:	1000181e 	bne	r2,zero,12384 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   12324:	00002906 	br	123cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12328:	e0bffd17 	ldw	r2,-12(fp)
   1232c:	10c00117 	ldw	r3,4(r2)
   12330:	00a00034 	movhi	r2,32768
   12334:	10bfffc4 	addi	r2,r2,-1
   12338:	18802126 	beq	r3,r2,123c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	10800017 	ldw	r2,0(r2)
   12344:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12348:	e0bffc17 	ldw	r2,-16(fp)
   1234c:	10800090 	cmplti	r2,r2,2
   12350:	1000061e 	bne	r2,zero,1236c <altera_avalon_jtag_uart_ioctl+0x7c>
   12354:	e0fffc17 	ldw	r3,-16(fp)
   12358:	00a00034 	movhi	r2,32768
   1235c:	10bfffc4 	addi	r2,r2,-1
   12360:	18800226 	beq	r3,r2,1236c <altera_avalon_jtag_uart_ioctl+0x7c>
   12364:	e0bffc17 	ldw	r2,-16(fp)
   12368:	00000206 	br	12374 <altera_avalon_jtag_uart_ioctl+0x84>
   1236c:	00a00034 	movhi	r2,32768
   12370:	10bfff84 	addi	r2,r2,-2
   12374:	e0fffd17 	ldw	r3,-12(fp)
   12378:	18800115 	stw	r2,4(r3)
      rc = 0;
   1237c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12380:	00000f06 	br	123c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12384:	e0bffd17 	ldw	r2,-12(fp)
   12388:	10c00117 	ldw	r3,4(r2)
   1238c:	00a00034 	movhi	r2,32768
   12390:	10bfffc4 	addi	r2,r2,-1
   12394:	18800c26 	beq	r3,r2,123c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12398:	e0bffd17 	ldw	r2,-12(fp)
   1239c:	10c00917 	ldw	r3,36(r2)
   123a0:	e0bffd17 	ldw	r2,-12(fp)
   123a4:	10800117 	ldw	r2,4(r2)
   123a8:	1885803a 	cmpltu	r2,r3,r2
   123ac:	10c03fcc 	andi	r3,r2,255
   123b0:	e0bfff17 	ldw	r2,-4(fp)
   123b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   123b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   123bc:	00000206 	br	123c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   123c0:	0001883a 	nop
   123c4:	00000106 	br	123cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   123c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   123cc:	e0bffb17 	ldw	r2,-20(fp)
}
   123d0:	e037883a 	mov	sp,fp
   123d4:	df000017 	ldw	fp,0(sp)
   123d8:	dec00104 	addi	sp,sp,4
   123dc:	f800283a 	ret

000123e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   123e0:	defff304 	addi	sp,sp,-52
   123e4:	dfc00c15 	stw	ra,48(sp)
   123e8:	df000b15 	stw	fp,44(sp)
   123ec:	df000b04 	addi	fp,sp,44
   123f0:	e13ffc15 	stw	r4,-16(fp)
   123f4:	e17ffd15 	stw	r5,-12(fp)
   123f8:	e1bffe15 	stw	r6,-8(fp)
   123fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   12400:	e0bffd17 	ldw	r2,-12(fp)
   12404:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12408:	00004706 	br	12528 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1240c:	e0bffc17 	ldw	r2,-16(fp)
   12410:	10800a17 	ldw	r2,40(r2)
   12414:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12418:	e0bffc17 	ldw	r2,-16(fp)
   1241c:	10800b17 	ldw	r2,44(r2)
   12420:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12424:	e0fff717 	ldw	r3,-36(fp)
   12428:	e0bff817 	ldw	r2,-32(fp)
   1242c:	18800536 	bltu	r3,r2,12444 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12430:	e0fff717 	ldw	r3,-36(fp)
   12434:	e0bff817 	ldw	r2,-32(fp)
   12438:	1885c83a 	sub	r2,r3,r2
   1243c:	e0bff615 	stw	r2,-40(fp)
   12440:	00000406 	br	12454 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12444:	00c20004 	movi	r3,2048
   12448:	e0bff817 	ldw	r2,-32(fp)
   1244c:	1885c83a 	sub	r2,r3,r2
   12450:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12454:	e0bff617 	ldw	r2,-40(fp)
   12458:	10001e26 	beq	r2,zero,124d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1245c:	e0fffe17 	ldw	r3,-8(fp)
   12460:	e0bff617 	ldw	r2,-40(fp)
   12464:	1880022e 	bgeu	r3,r2,12470 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12468:	e0bffe17 	ldw	r2,-8(fp)
   1246c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12470:	e0bffc17 	ldw	r2,-16(fp)
   12474:	10c00e04 	addi	r3,r2,56
   12478:	e0bff817 	ldw	r2,-32(fp)
   1247c:	1885883a 	add	r2,r3,r2
   12480:	e1bff617 	ldw	r6,-40(fp)
   12484:	100b883a 	mov	r5,r2
   12488:	e13ff517 	ldw	r4,-44(fp)
   1248c:	000afe00 	call	afe0 <memcpy>
      ptr   += n;
   12490:	e0fff517 	ldw	r3,-44(fp)
   12494:	e0bff617 	ldw	r2,-40(fp)
   12498:	1885883a 	add	r2,r3,r2
   1249c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   124a0:	e0fffe17 	ldw	r3,-8(fp)
   124a4:	e0bff617 	ldw	r2,-40(fp)
   124a8:	1885c83a 	sub	r2,r3,r2
   124ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   124b0:	e0fff817 	ldw	r3,-32(fp)
   124b4:	e0bff617 	ldw	r2,-40(fp)
   124b8:	1885883a 	add	r2,r3,r2
   124bc:	10c1ffcc 	andi	r3,r2,2047
   124c0:	e0bffc17 	ldw	r2,-16(fp)
   124c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   124c8:	e0bffe17 	ldw	r2,-8(fp)
   124cc:	00bfcf16 	blt	zero,r2,1240c <__alt_data_end+0xff01240c>
   124d0:	00000106 	br	124d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   124d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   124d8:	e0fff517 	ldw	r3,-44(fp)
   124dc:	e0bffd17 	ldw	r2,-12(fp)
   124e0:	1880141e 	bne	r3,r2,12534 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   124e4:	e0bfff17 	ldw	r2,-4(fp)
   124e8:	1090000c 	andi	r2,r2,16384
   124ec:	1000131e 	bne	r2,zero,1253c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   124f0:	0001883a 	nop
   124f4:	e0bffc17 	ldw	r2,-16(fp)
   124f8:	10c00a17 	ldw	r3,40(r2)
   124fc:	e0bff717 	ldw	r2,-36(fp)
   12500:	1880051e 	bne	r3,r2,12518 <altera_avalon_jtag_uart_read+0x138>
   12504:	e0bffc17 	ldw	r2,-16(fp)
   12508:	10c00917 	ldw	r3,36(r2)
   1250c:	e0bffc17 	ldw	r2,-16(fp)
   12510:	10800117 	ldw	r2,4(r2)
   12514:	18bff736 	bltu	r3,r2,124f4 <__alt_data_end+0xff0124f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12518:	e0bffc17 	ldw	r2,-16(fp)
   1251c:	10c00a17 	ldw	r3,40(r2)
   12520:	e0bff717 	ldw	r2,-36(fp)
   12524:	18800726 	beq	r3,r2,12544 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12528:	e0bffe17 	ldw	r2,-8(fp)
   1252c:	00bfb716 	blt	zero,r2,1240c <__alt_data_end+0xff01240c>
   12530:	00000506 	br	12548 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12534:	0001883a 	nop
   12538:	00000306 	br	12548 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1253c:	0001883a 	nop
   12540:	00000106 	br	12548 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12544:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12548:	e0fff517 	ldw	r3,-44(fp)
   1254c:	e0bffd17 	ldw	r2,-12(fp)
   12550:	18801826 	beq	r3,r2,125b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12554:	0005303a 	rdctl	r2,status
   12558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1255c:	e0fffb17 	ldw	r3,-20(fp)
   12560:	00bfff84 	movi	r2,-2
   12564:	1884703a 	and	r2,r3,r2
   12568:	1001703a 	wrctl	status,r2
  
  return context;
   1256c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12570:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12574:	e0bffc17 	ldw	r2,-16(fp)
   12578:	10800817 	ldw	r2,32(r2)
   1257c:	10c00054 	ori	r3,r2,1
   12580:	e0bffc17 	ldw	r2,-16(fp)
   12584:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12588:	e0bffc17 	ldw	r2,-16(fp)
   1258c:	10800017 	ldw	r2,0(r2)
   12590:	10800104 	addi	r2,r2,4
   12594:	1007883a 	mov	r3,r2
   12598:	e0bffc17 	ldw	r2,-16(fp)
   1259c:	10800817 	ldw	r2,32(r2)
   125a0:	18800035 	stwio	r2,0(r3)
   125a4:	e0bffa17 	ldw	r2,-24(fp)
   125a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125ac:	e0bff917 	ldw	r2,-28(fp)
   125b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   125b4:	e0fff517 	ldw	r3,-44(fp)
   125b8:	e0bffd17 	ldw	r2,-12(fp)
   125bc:	18800426 	beq	r3,r2,125d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   125c0:	e0fff517 	ldw	r3,-44(fp)
   125c4:	e0bffd17 	ldw	r2,-12(fp)
   125c8:	1885c83a 	sub	r2,r3,r2
   125cc:	00000606 	br	125e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   125d0:	e0bfff17 	ldw	r2,-4(fp)
   125d4:	1090000c 	andi	r2,r2,16384
   125d8:	10000226 	beq	r2,zero,125e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   125dc:	00bffd44 	movi	r2,-11
   125e0:	00000106 	br	125e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   125e4:	00bffec4 	movi	r2,-5
}
   125e8:	e037883a 	mov	sp,fp
   125ec:	dfc00117 	ldw	ra,4(sp)
   125f0:	df000017 	ldw	fp,0(sp)
   125f4:	dec00204 	addi	sp,sp,8
   125f8:	f800283a 	ret

000125fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   125fc:	defff304 	addi	sp,sp,-52
   12600:	dfc00c15 	stw	ra,48(sp)
   12604:	df000b15 	stw	fp,44(sp)
   12608:	df000b04 	addi	fp,sp,44
   1260c:	e13ffc15 	stw	r4,-16(fp)
   12610:	e17ffd15 	stw	r5,-12(fp)
   12614:	e1bffe15 	stw	r6,-8(fp)
   12618:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1261c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12620:	e0bffd17 	ldw	r2,-12(fp)
   12624:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12628:	00003706 	br	12708 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1262c:	e0bffc17 	ldw	r2,-16(fp)
   12630:	10800c17 	ldw	r2,48(r2)
   12634:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   12638:	e0bffc17 	ldw	r2,-16(fp)
   1263c:	10800d17 	ldw	r2,52(r2)
   12640:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12644:	e0fff917 	ldw	r3,-28(fp)
   12648:	e0bff517 	ldw	r2,-44(fp)
   1264c:	1880062e 	bgeu	r3,r2,12668 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12650:	e0fff517 	ldw	r3,-44(fp)
   12654:	e0bff917 	ldw	r2,-28(fp)
   12658:	1885c83a 	sub	r2,r3,r2
   1265c:	10bfffc4 	addi	r2,r2,-1
   12660:	e0bff615 	stw	r2,-40(fp)
   12664:	00000b06 	br	12694 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12668:	e0bff517 	ldw	r2,-44(fp)
   1266c:	10000526 	beq	r2,zero,12684 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12670:	00c20004 	movi	r3,2048
   12674:	e0bff917 	ldw	r2,-28(fp)
   12678:	1885c83a 	sub	r2,r3,r2
   1267c:	e0bff615 	stw	r2,-40(fp)
   12680:	00000406 	br	12694 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12684:	00c1ffc4 	movi	r3,2047
   12688:	e0bff917 	ldw	r2,-28(fp)
   1268c:	1885c83a 	sub	r2,r3,r2
   12690:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12694:	e0bff617 	ldw	r2,-40(fp)
   12698:	10001e26 	beq	r2,zero,12714 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1269c:	e0fffe17 	ldw	r3,-8(fp)
   126a0:	e0bff617 	ldw	r2,-40(fp)
   126a4:	1880022e 	bgeu	r3,r2,126b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   126a8:	e0bffe17 	ldw	r2,-8(fp)
   126ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   126b0:	e0bffc17 	ldw	r2,-16(fp)
   126b4:	10c20e04 	addi	r3,r2,2104
   126b8:	e0bff917 	ldw	r2,-28(fp)
   126bc:	1885883a 	add	r2,r3,r2
   126c0:	e1bff617 	ldw	r6,-40(fp)
   126c4:	e17ffd17 	ldw	r5,-12(fp)
   126c8:	1009883a 	mov	r4,r2
   126cc:	000afe00 	call	afe0 <memcpy>
      ptr   += n;
   126d0:	e0fffd17 	ldw	r3,-12(fp)
   126d4:	e0bff617 	ldw	r2,-40(fp)
   126d8:	1885883a 	add	r2,r3,r2
   126dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   126e0:	e0fffe17 	ldw	r3,-8(fp)
   126e4:	e0bff617 	ldw	r2,-40(fp)
   126e8:	1885c83a 	sub	r2,r3,r2
   126ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   126f0:	e0fff917 	ldw	r3,-28(fp)
   126f4:	e0bff617 	ldw	r2,-40(fp)
   126f8:	1885883a 	add	r2,r3,r2
   126fc:	10c1ffcc 	andi	r3,r2,2047
   12700:	e0bffc17 	ldw	r2,-16(fp)
   12704:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12708:	e0bffe17 	ldw	r2,-8(fp)
   1270c:	00bfc716 	blt	zero,r2,1262c <__alt_data_end+0xff01262c>
   12710:	00000106 	br	12718 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   12714:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12718:	0005303a 	rdctl	r2,status
   1271c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12720:	e0fffb17 	ldw	r3,-20(fp)
   12724:	00bfff84 	movi	r2,-2
   12728:	1884703a 	and	r2,r3,r2
   1272c:	1001703a 	wrctl	status,r2
  
  return context;
   12730:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12734:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12738:	e0bffc17 	ldw	r2,-16(fp)
   1273c:	10800817 	ldw	r2,32(r2)
   12740:	10c00094 	ori	r3,r2,2
   12744:	e0bffc17 	ldw	r2,-16(fp)
   12748:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1274c:	e0bffc17 	ldw	r2,-16(fp)
   12750:	10800017 	ldw	r2,0(r2)
   12754:	10800104 	addi	r2,r2,4
   12758:	1007883a 	mov	r3,r2
   1275c:	e0bffc17 	ldw	r2,-16(fp)
   12760:	10800817 	ldw	r2,32(r2)
   12764:	18800035 	stwio	r2,0(r3)
   12768:	e0bffa17 	ldw	r2,-24(fp)
   1276c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12770:	e0bff817 	ldw	r2,-32(fp)
   12774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12778:	e0bffe17 	ldw	r2,-8(fp)
   1277c:	0080100e 	bge	zero,r2,127c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12780:	e0bfff17 	ldw	r2,-4(fp)
   12784:	1090000c 	andi	r2,r2,16384
   12788:	1000101e 	bne	r2,zero,127cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1278c:	0001883a 	nop
   12790:	e0bffc17 	ldw	r2,-16(fp)
   12794:	10c00d17 	ldw	r3,52(r2)
   12798:	e0bff517 	ldw	r2,-44(fp)
   1279c:	1880051e 	bne	r3,r2,127b4 <altera_avalon_jtag_uart_write+0x1b8>
   127a0:	e0bffc17 	ldw	r2,-16(fp)
   127a4:	10c00917 	ldw	r3,36(r2)
   127a8:	e0bffc17 	ldw	r2,-16(fp)
   127ac:	10800117 	ldw	r2,4(r2)
   127b0:	18bff736 	bltu	r3,r2,12790 <__alt_data_end+0xff012790>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   127b4:	e0bffc17 	ldw	r2,-16(fp)
   127b8:	10800917 	ldw	r2,36(r2)
   127bc:	1000051e 	bne	r2,zero,127d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   127c0:	e0bffe17 	ldw	r2,-8(fp)
   127c4:	00bfd016 	blt	zero,r2,12708 <__alt_data_end+0xff012708>
   127c8:	00000306 	br	127d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   127cc:	0001883a 	nop
   127d0:	00000106 	br	127d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   127d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   127d8:	e0fffd17 	ldw	r3,-12(fp)
   127dc:	e0bff717 	ldw	r2,-36(fp)
   127e0:	18800426 	beq	r3,r2,127f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   127e4:	e0fffd17 	ldw	r3,-12(fp)
   127e8:	e0bff717 	ldw	r2,-36(fp)
   127ec:	1885c83a 	sub	r2,r3,r2
   127f0:	00000606 	br	1280c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   127f4:	e0bfff17 	ldw	r2,-4(fp)
   127f8:	1090000c 	andi	r2,r2,16384
   127fc:	10000226 	beq	r2,zero,12808 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   12800:	00bffd44 	movi	r2,-11
   12804:	00000106 	br	1280c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12808:	00bffec4 	movi	r2,-5
}
   1280c:	e037883a 	mov	sp,fp
   12810:	dfc00117 	ldw	ra,4(sp)
   12814:	df000017 	ldw	fp,0(sp)
   12818:	dec00204 	addi	sp,sp,8
   1281c:	f800283a 	ret

00012820 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12820:	defffa04 	addi	sp,sp,-24
   12824:	dfc00515 	stw	ra,20(sp)
   12828:	df000415 	stw	fp,16(sp)
   1282c:	df000404 	addi	fp,sp,16
   12830:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12834:	0007883a 	mov	r3,zero
   12838:	e0bfff17 	ldw	r2,-4(fp)
   1283c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12840:	e0bfff17 	ldw	r2,-4(fp)
   12844:	10800104 	addi	r2,r2,4
   12848:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1284c:	0005303a 	rdctl	r2,status
   12850:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12854:	e0fffd17 	ldw	r3,-12(fp)
   12858:	00bfff84 	movi	r2,-2
   1285c:	1884703a 	and	r2,r3,r2
   12860:	1001703a 	wrctl	status,r2
  
  return context;
   12864:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12868:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1286c:	001359c0 	call	1359c <alt_tick>
   12870:	e0bffc17 	ldw	r2,-16(fp)
   12874:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12878:	e0bffe17 	ldw	r2,-8(fp)
   1287c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12880:	0001883a 	nop
   12884:	e037883a 	mov	sp,fp
   12888:	dfc00117 	ldw	ra,4(sp)
   1288c:	df000017 	ldw	fp,0(sp)
   12890:	dec00204 	addi	sp,sp,8
   12894:	f800283a 	ret

00012898 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12898:	defff804 	addi	sp,sp,-32
   1289c:	dfc00715 	stw	ra,28(sp)
   128a0:	df000615 	stw	fp,24(sp)
   128a4:	df000604 	addi	fp,sp,24
   128a8:	e13ffc15 	stw	r4,-16(fp)
   128ac:	e17ffd15 	stw	r5,-12(fp)
   128b0:	e1bffe15 	stw	r6,-8(fp)
   128b4:	e1ffff15 	stw	r7,-4(fp)
   128b8:	e0bfff17 	ldw	r2,-4(fp)
   128bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   128c0:	d0a73517 	ldw	r2,-25388(gp)
   128c4:	1000021e 	bne	r2,zero,128d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   128c8:	e0bffb17 	ldw	r2,-20(fp)
   128cc:	d0a73515 	stw	r2,-25388(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   128d0:	e0bffc17 	ldw	r2,-16(fp)
   128d4:	10800104 	addi	r2,r2,4
   128d8:	00c001c4 	movi	r3,7
   128dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   128e0:	d8000015 	stw	zero,0(sp)
   128e4:	e1fffc17 	ldw	r7,-16(fp)
   128e8:	01800074 	movhi	r6,1
   128ec:	318a0804 	addi	r6,r6,10272
   128f0:	e17ffe17 	ldw	r5,-8(fp)
   128f4:	e13ffd17 	ldw	r4,-12(fp)
   128f8:	0012ecc0 	call	12ecc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   128fc:	0001883a 	nop
   12900:	e037883a 	mov	sp,fp
   12904:	dfc00117 	ldw	ra,4(sp)
   12908:	df000017 	ldw	fp,0(sp)
   1290c:	dec00204 	addi	sp,sp,8
   12910:	f800283a 	ret

00012914 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   12914:	defffe04 	addi	sp,sp,-8
   12918:	df000115 	stw	fp,4(sp)
   1291c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   12920:	d0a73217 	ldw	r2,-25400(gp)
   12924:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   12928:	d0a73317 	ldw	r2,-25396(gp)
   1292c:	1000021e 	bne	r2,zero,12938 <alt_timestamp_start+0x24>
  {
    return -1;
   12930:	00bfffc4 	movi	r2,-1
   12934:	00001106 	br	1297c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   12938:	e0bfff17 	ldw	r2,-4(fp)
   1293c:	10800104 	addi	r2,r2,4
   12940:	00c00204 	movi	r3,8
   12944:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   12948:	e0bfff17 	ldw	r2,-4(fp)
   1294c:	10800204 	addi	r2,r2,8
   12950:	00ffffd4 	movui	r3,65535
   12954:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   12958:	e0bfff17 	ldw	r2,-4(fp)
   1295c:	10800304 	addi	r2,r2,12
   12960:	00ffffd4 	movui	r3,65535
   12964:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   12968:	e0bfff17 	ldw	r2,-4(fp)
   1296c:	10800104 	addi	r2,r2,4
   12970:	00c00104 	movi	r3,4
   12974:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   12978:	0005883a 	mov	r2,zero
}
   1297c:	e037883a 	mov	sp,fp
   12980:	df000017 	ldw	fp,0(sp)
   12984:	dec00104 	addi	sp,sp,4
   12988:	f800283a 	ret

0001298c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1298c:	defffc04 	addi	sp,sp,-16
   12990:	df000315 	stw	fp,12(sp)
   12994:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   12998:	d0a73217 	ldw	r2,-25400(gp)
   1299c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   129a0:	d0a73317 	ldw	r2,-25396(gp)
   129a4:	1000021e 	bne	r2,zero,129b0 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   129a8:	00bfffc4 	movi	r2,-1
   129ac:	00001306 	br	129fc <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	10800404 	addi	r2,r2,16
   129b8:	0007883a 	mov	r3,zero
   129bc:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   129c0:	e0bffd17 	ldw	r2,-12(fp)
   129c4:	10800404 	addi	r2,r2,16
   129c8:	10800037 	ldwio	r2,0(r2)
   129cc:	10bfffcc 	andi	r2,r2,65535
   129d0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   129d4:	e0bffd17 	ldw	r2,-12(fp)
   129d8:	10800504 	addi	r2,r2,20
   129dc:	10800037 	ldwio	r2,0(r2)
   129e0:	10bfffcc 	andi	r2,r2,65535
   129e4:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   129e8:	e0bfff17 	ldw	r2,-4(fp)
   129ec:	1006943a 	slli	r3,r2,16
   129f0:	e0bffe17 	ldw	r2,-8(fp)
   129f4:	1884b03a 	or	r2,r3,r2
   129f8:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   129fc:	e037883a 	mov	sp,fp
   12a00:	df000017 	ldw	fp,0(sp)
   12a04:	dec00104 	addi	sp,sp,4
   12a08:	f800283a 	ret

00012a0c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   12a0c:	deffff04 	addi	sp,sp,-4
   12a10:	df000015 	stw	fp,0(sp)
   12a14:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   12a18:	d0a73317 	ldw	r2,-25396(gp)
}
   12a1c:	e037883a 	mov	sp,fp
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00104 	addi	sp,sp,4
   12a28:	f800283a 	ret

00012a2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12a2c:	defff504 	addi	sp,sp,-44
   12a30:	df000a15 	stw	fp,40(sp)
   12a34:	df000a04 	addi	fp,sp,40
   12a38:	e13ffc15 	stw	r4,-16(fp)
   12a3c:	e17ffd15 	stw	r5,-12(fp)
   12a40:	e1bffe15 	stw	r6,-8(fp)
   12a44:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12a48:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12a4c:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
   12a50:	10003c26 	beq	r2,zero,12b44 <alt_alarm_start+0x118>
  {
    if (alarm)
   12a54:	e0bffc17 	ldw	r2,-16(fp)
   12a58:	10003826 	beq	r2,zero,12b3c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12a5c:	e0bffc17 	ldw	r2,-16(fp)
   12a60:	e0fffe17 	ldw	r3,-8(fp)
   12a64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   12a68:	e0bffc17 	ldw	r2,-16(fp)
   12a6c:	e0ffff17 	ldw	r3,-4(fp)
   12a70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a74:	0005303a 	rdctl	r2,status
   12a78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a7c:	e0fff917 	ldw	r3,-28(fp)
   12a80:	00bfff84 	movi	r2,-2
   12a84:	1884703a 	and	r2,r3,r2
   12a88:	1001703a 	wrctl	status,r2
  
  return context;
   12a8c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12a90:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12a94:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
   12a98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12a9c:	e0fffd17 	ldw	r3,-12(fp)
   12aa0:	e0bff617 	ldw	r2,-40(fp)
   12aa4:	1885883a 	add	r2,r3,r2
   12aa8:	10c00044 	addi	r3,r2,1
   12aac:	e0bffc17 	ldw	r2,-16(fp)
   12ab0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12ab4:	e0bffc17 	ldw	r2,-16(fp)
   12ab8:	10c00217 	ldw	r3,8(r2)
   12abc:	e0bff617 	ldw	r2,-40(fp)
   12ac0:	1880042e 	bgeu	r3,r2,12ad4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   12ac4:	e0bffc17 	ldw	r2,-16(fp)
   12ac8:	00c00044 	movi	r3,1
   12acc:	10c00405 	stb	r3,16(r2)
   12ad0:	00000206 	br	12adc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   12ad4:	e0bffc17 	ldw	r2,-16(fp)
   12ad8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12adc:	e0bffc17 	ldw	r2,-16(fp)
   12ae0:	d0e00e04 	addi	r3,gp,-32712
   12ae4:	e0fffa15 	stw	r3,-24(fp)
   12ae8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12aec:	e0bffb17 	ldw	r2,-20(fp)
   12af0:	e0fffa17 	ldw	r3,-24(fp)
   12af4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12af8:	e0bffa17 	ldw	r2,-24(fp)
   12afc:	10c00017 	ldw	r3,0(r2)
   12b00:	e0bffb17 	ldw	r2,-20(fp)
   12b04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12b08:	e0bffa17 	ldw	r2,-24(fp)
   12b0c:	10800017 	ldw	r2,0(r2)
   12b10:	e0fffb17 	ldw	r3,-20(fp)
   12b14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12b18:	e0bffa17 	ldw	r2,-24(fp)
   12b1c:	e0fffb17 	ldw	r3,-20(fp)
   12b20:	10c00015 	stw	r3,0(r2)
   12b24:	e0bff817 	ldw	r2,-32(fp)
   12b28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b2c:	e0bff717 	ldw	r2,-36(fp)
   12b30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12b34:	0005883a 	mov	r2,zero
   12b38:	00000306 	br	12b48 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12b3c:	00bffa84 	movi	r2,-22
   12b40:	00000106 	br	12b48 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12b44:	00bfde84 	movi	r2,-134
  }
}
   12b48:	e037883a 	mov	sp,fp
   12b4c:	df000017 	ldw	fp,0(sp)
   12b50:	dec00104 	addi	sp,sp,4
   12b54:	f800283a 	ret

00012b58 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12b58:	defffa04 	addi	sp,sp,-24
   12b5c:	dfc00515 	stw	ra,20(sp)
   12b60:	df000415 	stw	fp,16(sp)
   12b64:	df000404 	addi	fp,sp,16
   12b68:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   12b6c:	008000c4 	movi	r2,3
   12b70:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   12b74:	e0fffd17 	ldw	r3,-12(fp)
   12b78:	008003f4 	movhi	r2,15
   12b7c:	10909004 	addi	r2,r2,16960
   12b80:	1885383a 	mul	r2,r3,r2
   12b84:	100b883a 	mov	r5,r2
   12b88:	0100bef4 	movhi	r4,763
   12b8c:	213c2004 	addi	r4,r4,-3968
   12b90:	00049e80 	call	49e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   12b94:	100b883a 	mov	r5,r2
   12b98:	01200034 	movhi	r4,32768
   12b9c:	213fffc4 	addi	r4,r4,-1
   12ba0:	00049e80 	call	49e8 <__udivsi3>
   12ba4:	100b883a 	mov	r5,r2
   12ba8:	e13fff17 	ldw	r4,-4(fp)
   12bac:	00049e80 	call	49e8 <__udivsi3>
   12bb0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12bb4:	e0bffe17 	ldw	r2,-8(fp)
   12bb8:	10002a26 	beq	r2,zero,12c64 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   12bbc:	e03ffc15 	stw	zero,-16(fp)
   12bc0:	00001706 	br	12c20 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12bc4:	00a00034 	movhi	r2,32768
   12bc8:	10bfffc4 	addi	r2,r2,-1
   12bcc:	10bfffc4 	addi	r2,r2,-1
   12bd0:	103ffe1e 	bne	r2,zero,12bcc <__alt_data_end+0xff012bcc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   12bd4:	e0fffd17 	ldw	r3,-12(fp)
   12bd8:	008003f4 	movhi	r2,15
   12bdc:	10909004 	addi	r2,r2,16960
   12be0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12be4:	100b883a 	mov	r5,r2
   12be8:	0100bef4 	movhi	r4,763
   12bec:	213c2004 	addi	r4,r4,-3968
   12bf0:	00049e80 	call	49e8 <__udivsi3>
   12bf4:	100b883a 	mov	r5,r2
   12bf8:	01200034 	movhi	r4,32768
   12bfc:	213fffc4 	addi	r4,r4,-1
   12c00:	00049e80 	call	49e8 <__udivsi3>
   12c04:	1007883a 	mov	r3,r2
   12c08:	e0bfff17 	ldw	r2,-4(fp)
   12c0c:	10c5c83a 	sub	r2,r2,r3
   12c10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	10800044 	addi	r2,r2,1
   12c1c:	e0bffc15 	stw	r2,-16(fp)
   12c20:	e0fffc17 	ldw	r3,-16(fp)
   12c24:	e0bffe17 	ldw	r2,-8(fp)
   12c28:	18bfe616 	blt	r3,r2,12bc4 <__alt_data_end+0xff012bc4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   12c2c:	e0fffd17 	ldw	r3,-12(fp)
   12c30:	008003f4 	movhi	r2,15
   12c34:	10909004 	addi	r2,r2,16960
   12c38:	1885383a 	mul	r2,r3,r2
   12c3c:	100b883a 	mov	r5,r2
   12c40:	0100bef4 	movhi	r4,763
   12c44:	213c2004 	addi	r4,r4,-3968
   12c48:	00049e80 	call	49e8 <__udivsi3>
   12c4c:	1007883a 	mov	r3,r2
   12c50:	e0bfff17 	ldw	r2,-4(fp)
   12c54:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12c58:	10bfffc4 	addi	r2,r2,-1
   12c5c:	103ffe1e 	bne	r2,zero,12c58 <__alt_data_end+0xff012c58>
   12c60:	00000d06 	br	12c98 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   12c64:	e0fffd17 	ldw	r3,-12(fp)
   12c68:	008003f4 	movhi	r2,15
   12c6c:	10909004 	addi	r2,r2,16960
   12c70:	1885383a 	mul	r2,r3,r2
   12c74:	100b883a 	mov	r5,r2
   12c78:	0100bef4 	movhi	r4,763
   12c7c:	213c2004 	addi	r4,r4,-3968
   12c80:	00049e80 	call	49e8 <__udivsi3>
   12c84:	1007883a 	mov	r3,r2
   12c88:	e0bfff17 	ldw	r2,-4(fp)
   12c8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12c90:	10bfffc4 	addi	r2,r2,-1
   12c94:	00bffe16 	blt	zero,r2,12c90 <__alt_data_end+0xff012c90>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   12c98:	0005883a 	mov	r2,zero
}
   12c9c:	e037883a 	mov	sp,fp
   12ca0:	dfc00117 	ldw	ra,4(sp)
   12ca4:	df000017 	ldw	fp,0(sp)
   12ca8:	dec00204 	addi	sp,sp,8
   12cac:	f800283a 	ret

00012cb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12cb0:	defffe04 	addi	sp,sp,-8
   12cb4:	df000115 	stw	fp,4(sp)
   12cb8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12cbc:	e03fff15 	stw	zero,-4(fp)
   12cc0:	00000506 	br	12cd8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12cc4:	e0bfff17 	ldw	r2,-4(fp)
   12cc8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12ccc:	e0bfff17 	ldw	r2,-4(fp)
   12cd0:	10800804 	addi	r2,r2,32
   12cd4:	e0bfff15 	stw	r2,-4(fp)
   12cd8:	e0bfff17 	ldw	r2,-4(fp)
   12cdc:	10a00030 	cmpltui	r2,r2,32768
   12ce0:	103ff81e 	bne	r2,zero,12cc4 <__alt_data_end+0xff012cc4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12ce4:	0001883a 	nop
   12ce8:	e037883a 	mov	sp,fp
   12cec:	df000017 	ldw	fp,0(sp)
   12cf0:	dec00104 	addi	sp,sp,4
   12cf4:	f800283a 	ret

00012cf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12cf8:	defffe04 	addi	sp,sp,-8
   12cfc:	dfc00115 	stw	ra,4(sp)
   12d00:	df000015 	stw	fp,0(sp)
   12d04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d08:	d0a00b17 	ldw	r2,-32724(gp)
   12d0c:	10000326 	beq	r2,zero,12d1c <alt_get_errno+0x24>
   12d10:	d0a00b17 	ldw	r2,-32724(gp)
   12d14:	103ee83a 	callr	r2
   12d18:	00000106 	br	12d20 <alt_get_errno+0x28>
   12d1c:	d0a72b04 	addi	r2,gp,-25428
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	dfc00117 	ldw	ra,4(sp)
   12d28:	df000017 	ldw	fp,0(sp)
   12d2c:	dec00204 	addi	sp,sp,8
   12d30:	f800283a 	ret

00012d34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12d34:	defffa04 	addi	sp,sp,-24
   12d38:	dfc00515 	stw	ra,20(sp)
   12d3c:	df000415 	stw	fp,16(sp)
   12d40:	df000404 	addi	fp,sp,16
   12d44:	e13ffe15 	stw	r4,-8(fp)
   12d48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12d4c:	e0bffe17 	ldw	r2,-8(fp)
   12d50:	10000326 	beq	r2,zero,12d60 <alt_dev_llist_insert+0x2c>
   12d54:	e0bffe17 	ldw	r2,-8(fp)
   12d58:	10800217 	ldw	r2,8(r2)
   12d5c:	1000061e 	bne	r2,zero,12d78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12d60:	0012cf80 	call	12cf8 <alt_get_errno>
   12d64:	1007883a 	mov	r3,r2
   12d68:	00800584 	movi	r2,22
   12d6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12d70:	00bffa84 	movi	r2,-22
   12d74:	00001306 	br	12dc4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12d78:	e0bffe17 	ldw	r2,-8(fp)
   12d7c:	e0ffff17 	ldw	r3,-4(fp)
   12d80:	e0fffc15 	stw	r3,-16(fp)
   12d84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12d88:	e0bffd17 	ldw	r2,-12(fp)
   12d8c:	e0fffc17 	ldw	r3,-16(fp)
   12d90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12d94:	e0bffc17 	ldw	r2,-16(fp)
   12d98:	10c00017 	ldw	r3,0(r2)
   12d9c:	e0bffd17 	ldw	r2,-12(fp)
   12da0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12da4:	e0bffc17 	ldw	r2,-16(fp)
   12da8:	10800017 	ldw	r2,0(r2)
   12dac:	e0fffd17 	ldw	r3,-12(fp)
   12db0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12db4:	e0bffc17 	ldw	r2,-16(fp)
   12db8:	e0fffd17 	ldw	r3,-12(fp)
   12dbc:	10c00015 	stw	r3,0(r2)

  return 0;  
   12dc0:	0005883a 	mov	r2,zero
}
   12dc4:	e037883a 	mov	sp,fp
   12dc8:	dfc00117 	ldw	ra,4(sp)
   12dcc:	df000017 	ldw	fp,0(sp)
   12dd0:	dec00204 	addi	sp,sp,8
   12dd4:	f800283a 	ret

00012dd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12dd8:	defffd04 	addi	sp,sp,-12
   12ddc:	dfc00215 	stw	ra,8(sp)
   12de0:	df000115 	stw	fp,4(sp)
   12de4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12de8:	00800074 	movhi	r2,1
   12dec:	108fdc04 	addi	r2,r2,16240
   12df0:	e0bfff15 	stw	r2,-4(fp)
   12df4:	00000606 	br	12e10 <_do_ctors+0x38>
        (*ctor) (); 
   12df8:	e0bfff17 	ldw	r2,-4(fp)
   12dfc:	10800017 	ldw	r2,0(r2)
   12e00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12e04:	e0bfff17 	ldw	r2,-4(fp)
   12e08:	10bfff04 	addi	r2,r2,-4
   12e0c:	e0bfff15 	stw	r2,-4(fp)
   12e10:	e0ffff17 	ldw	r3,-4(fp)
   12e14:	00800074 	movhi	r2,1
   12e18:	108fdd04 	addi	r2,r2,16244
   12e1c:	18bff62e 	bgeu	r3,r2,12df8 <__alt_data_end+0xff012df8>
        (*ctor) (); 
}
   12e20:	0001883a 	nop
   12e24:	e037883a 	mov	sp,fp
   12e28:	dfc00117 	ldw	ra,4(sp)
   12e2c:	df000017 	ldw	fp,0(sp)
   12e30:	dec00204 	addi	sp,sp,8
   12e34:	f800283a 	ret

00012e38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12e38:	defffd04 	addi	sp,sp,-12
   12e3c:	dfc00215 	stw	ra,8(sp)
   12e40:	df000115 	stw	fp,4(sp)
   12e44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12e48:	00800074 	movhi	r2,1
   12e4c:	108fdc04 	addi	r2,r2,16240
   12e50:	e0bfff15 	stw	r2,-4(fp)
   12e54:	00000606 	br	12e70 <_do_dtors+0x38>
        (*dtor) (); 
   12e58:	e0bfff17 	ldw	r2,-4(fp)
   12e5c:	10800017 	ldw	r2,0(r2)
   12e60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12e64:	e0bfff17 	ldw	r2,-4(fp)
   12e68:	10bfff04 	addi	r2,r2,-4
   12e6c:	e0bfff15 	stw	r2,-4(fp)
   12e70:	e0ffff17 	ldw	r3,-4(fp)
   12e74:	00800074 	movhi	r2,1
   12e78:	108fdd04 	addi	r2,r2,16244
   12e7c:	18bff62e 	bgeu	r3,r2,12e58 <__alt_data_end+0xff012e58>
        (*dtor) (); 
}
   12e80:	0001883a 	nop
   12e84:	e037883a 	mov	sp,fp
   12e88:	dfc00117 	ldw	ra,4(sp)
   12e8c:	df000017 	ldw	fp,0(sp)
   12e90:	dec00204 	addi	sp,sp,8
   12e94:	f800283a 	ret

00012e98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12e98:	defffe04 	addi	sp,sp,-8
   12e9c:	dfc00115 	stw	ra,4(sp)
   12ea0:	df000015 	stw	fp,0(sp)
   12ea4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12ea8:	01440004 	movi	r5,4096
   12eac:	0009883a 	mov	r4,zero
   12eb0:	00139040 	call	13904 <alt_icache_flush>
#endif
}
   12eb4:	0001883a 	nop
   12eb8:	e037883a 	mov	sp,fp
   12ebc:	dfc00117 	ldw	ra,4(sp)
   12ec0:	df000017 	ldw	fp,0(sp)
   12ec4:	dec00204 	addi	sp,sp,8
   12ec8:	f800283a 	ret

00012ecc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12ecc:	defff904 	addi	sp,sp,-28
   12ed0:	dfc00615 	stw	ra,24(sp)
   12ed4:	df000515 	stw	fp,20(sp)
   12ed8:	df000504 	addi	fp,sp,20
   12edc:	e13ffc15 	stw	r4,-16(fp)
   12ee0:	e17ffd15 	stw	r5,-12(fp)
   12ee4:	e1bffe15 	stw	r6,-8(fp)
   12ee8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12eec:	e0800217 	ldw	r2,8(fp)
   12ef0:	d8800015 	stw	r2,0(sp)
   12ef4:	e1ffff17 	ldw	r7,-4(fp)
   12ef8:	e1bffe17 	ldw	r6,-8(fp)
   12efc:	e17ffd17 	ldw	r5,-12(fp)
   12f00:	e13ffc17 	ldw	r4,-16(fp)
   12f04:	001307c0 	call	1307c <alt_iic_isr_register>
}  
   12f08:	e037883a 	mov	sp,fp
   12f0c:	dfc00117 	ldw	ra,4(sp)
   12f10:	df000017 	ldw	fp,0(sp)
   12f14:	dec00204 	addi	sp,sp,8
   12f18:	f800283a 	ret

00012f1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12f1c:	defff904 	addi	sp,sp,-28
   12f20:	df000615 	stw	fp,24(sp)
   12f24:	df000604 	addi	fp,sp,24
   12f28:	e13ffe15 	stw	r4,-8(fp)
   12f2c:	e17fff15 	stw	r5,-4(fp)
   12f30:	e0bfff17 	ldw	r2,-4(fp)
   12f34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f38:	0005303a 	rdctl	r2,status
   12f3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f40:	e0fffb17 	ldw	r3,-20(fp)
   12f44:	00bfff84 	movi	r2,-2
   12f48:	1884703a 	and	r2,r3,r2
   12f4c:	1001703a 	wrctl	status,r2
  
  return context;
   12f50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12f54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12f58:	00c00044 	movi	r3,1
   12f5c:	e0bffa17 	ldw	r2,-24(fp)
   12f60:	1884983a 	sll	r2,r3,r2
   12f64:	1007883a 	mov	r3,r2
   12f68:	d0a73417 	ldw	r2,-25392(gp)
   12f6c:	1884b03a 	or	r2,r3,r2
   12f70:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12f74:	d0a73417 	ldw	r2,-25392(gp)
   12f78:	100170fa 	wrctl	ienable,r2
   12f7c:	e0bffc17 	ldw	r2,-16(fp)
   12f80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f84:	e0bffd17 	ldw	r2,-12(fp)
   12f88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12f8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12f90:	0001883a 	nop
}
   12f94:	e037883a 	mov	sp,fp
   12f98:	df000017 	ldw	fp,0(sp)
   12f9c:	dec00104 	addi	sp,sp,4
   12fa0:	f800283a 	ret

00012fa4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12fa4:	defff904 	addi	sp,sp,-28
   12fa8:	df000615 	stw	fp,24(sp)
   12fac:	df000604 	addi	fp,sp,24
   12fb0:	e13ffe15 	stw	r4,-8(fp)
   12fb4:	e17fff15 	stw	r5,-4(fp)
   12fb8:	e0bfff17 	ldw	r2,-4(fp)
   12fbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fc0:	0005303a 	rdctl	r2,status
   12fc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fc8:	e0fffb17 	ldw	r3,-20(fp)
   12fcc:	00bfff84 	movi	r2,-2
   12fd0:	1884703a 	and	r2,r3,r2
   12fd4:	1001703a 	wrctl	status,r2
  
  return context;
   12fd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12fdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12fe0:	00c00044 	movi	r3,1
   12fe4:	e0bffa17 	ldw	r2,-24(fp)
   12fe8:	1884983a 	sll	r2,r3,r2
   12fec:	0084303a 	nor	r2,zero,r2
   12ff0:	1007883a 	mov	r3,r2
   12ff4:	d0a73417 	ldw	r2,-25392(gp)
   12ff8:	1884703a 	and	r2,r3,r2
   12ffc:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13000:	d0a73417 	ldw	r2,-25392(gp)
   13004:	100170fa 	wrctl	ienable,r2
   13008:	e0bffc17 	ldw	r2,-16(fp)
   1300c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13010:	e0bffd17 	ldw	r2,-12(fp)
   13014:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13018:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1301c:	0001883a 	nop
}
   13020:	e037883a 	mov	sp,fp
   13024:	df000017 	ldw	fp,0(sp)
   13028:	dec00104 	addi	sp,sp,4
   1302c:	f800283a 	ret

00013030 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13030:	defffc04 	addi	sp,sp,-16
   13034:	df000315 	stw	fp,12(sp)
   13038:	df000304 	addi	fp,sp,12
   1303c:	e13ffe15 	stw	r4,-8(fp)
   13040:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13044:	000530fa 	rdctl	r2,ienable
   13048:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1304c:	00c00044 	movi	r3,1
   13050:	e0bfff17 	ldw	r2,-4(fp)
   13054:	1884983a 	sll	r2,r3,r2
   13058:	1007883a 	mov	r3,r2
   1305c:	e0bffd17 	ldw	r2,-12(fp)
   13060:	1884703a 	and	r2,r3,r2
   13064:	1004c03a 	cmpne	r2,r2,zero
   13068:	10803fcc 	andi	r2,r2,255
}
   1306c:	e037883a 	mov	sp,fp
   13070:	df000017 	ldw	fp,0(sp)
   13074:	dec00104 	addi	sp,sp,4
   13078:	f800283a 	ret

0001307c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1307c:	defff504 	addi	sp,sp,-44
   13080:	dfc00a15 	stw	ra,40(sp)
   13084:	df000915 	stw	fp,36(sp)
   13088:	df000904 	addi	fp,sp,36
   1308c:	e13ffc15 	stw	r4,-16(fp)
   13090:	e17ffd15 	stw	r5,-12(fp)
   13094:	e1bffe15 	stw	r6,-8(fp)
   13098:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1309c:	00bffa84 	movi	r2,-22
   130a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   130a4:	e0bffd17 	ldw	r2,-12(fp)
   130a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   130ac:	e0bff817 	ldw	r2,-32(fp)
   130b0:	10800808 	cmpgei	r2,r2,32
   130b4:	1000271e 	bne	r2,zero,13154 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130b8:	0005303a 	rdctl	r2,status
   130bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130c0:	e0fffb17 	ldw	r3,-20(fp)
   130c4:	00bfff84 	movi	r2,-2
   130c8:	1884703a 	and	r2,r3,r2
   130cc:	1001703a 	wrctl	status,r2
  
  return context;
   130d0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   130d4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   130d8:	00800074 	movhi	r2,1
   130dc:	109ff904 	addi	r2,r2,32740
   130e0:	e0fff817 	ldw	r3,-32(fp)
   130e4:	180690fa 	slli	r3,r3,3
   130e8:	10c5883a 	add	r2,r2,r3
   130ec:	e0fffe17 	ldw	r3,-8(fp)
   130f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   130f4:	00800074 	movhi	r2,1
   130f8:	109ff904 	addi	r2,r2,32740
   130fc:	e0fff817 	ldw	r3,-32(fp)
   13100:	180690fa 	slli	r3,r3,3
   13104:	10c5883a 	add	r2,r2,r3
   13108:	10800104 	addi	r2,r2,4
   1310c:	e0ffff17 	ldw	r3,-4(fp)
   13110:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13114:	e0bffe17 	ldw	r2,-8(fp)
   13118:	10000526 	beq	r2,zero,13130 <alt_iic_isr_register+0xb4>
   1311c:	e0bff817 	ldw	r2,-32(fp)
   13120:	100b883a 	mov	r5,r2
   13124:	e13ffc17 	ldw	r4,-16(fp)
   13128:	0012f1c0 	call	12f1c <alt_ic_irq_enable>
   1312c:	00000406 	br	13140 <alt_iic_isr_register+0xc4>
   13130:	e0bff817 	ldw	r2,-32(fp)
   13134:	100b883a 	mov	r5,r2
   13138:	e13ffc17 	ldw	r4,-16(fp)
   1313c:	0012fa40 	call	12fa4 <alt_ic_irq_disable>
   13140:	e0bff715 	stw	r2,-36(fp)
   13144:	e0bffa17 	ldw	r2,-24(fp)
   13148:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1314c:	e0bff917 	ldw	r2,-28(fp)
   13150:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13154:	e0bff717 	ldw	r2,-36(fp)
}
   13158:	e037883a 	mov	sp,fp
   1315c:	dfc00117 	ldw	ra,4(sp)
   13160:	df000017 	ldw	fp,0(sp)
   13164:	dec00204 	addi	sp,sp,8
   13168:	f800283a 	ret

0001316c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1316c:	defff904 	addi	sp,sp,-28
   13170:	dfc00615 	stw	ra,24(sp)
   13174:	df000515 	stw	fp,20(sp)
   13178:	df000504 	addi	fp,sp,20
   1317c:	e13ffc15 	stw	r4,-16(fp)
   13180:	e17ffd15 	stw	r5,-12(fp)
   13184:	e1bffe15 	stw	r6,-8(fp)
   13188:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1318c:	e1bfff17 	ldw	r6,-4(fp)
   13190:	e17ffe17 	ldw	r5,-8(fp)
   13194:	e13ffd17 	ldw	r4,-12(fp)
   13198:	00133ac0 	call	133ac <open>
   1319c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   131a0:	e0bffb17 	ldw	r2,-20(fp)
   131a4:	10001c16 	blt	r2,zero,13218 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   131a8:	00800074 	movhi	r2,1
   131ac:	10943f04 	addi	r2,r2,20732
   131b0:	e0fffb17 	ldw	r3,-20(fp)
   131b4:	18c00324 	muli	r3,r3,12
   131b8:	10c5883a 	add	r2,r2,r3
   131bc:	10c00017 	ldw	r3,0(r2)
   131c0:	e0bffc17 	ldw	r2,-16(fp)
   131c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   131c8:	00800074 	movhi	r2,1
   131cc:	10943f04 	addi	r2,r2,20732
   131d0:	e0fffb17 	ldw	r3,-20(fp)
   131d4:	18c00324 	muli	r3,r3,12
   131d8:	10c5883a 	add	r2,r2,r3
   131dc:	10800104 	addi	r2,r2,4
   131e0:	10c00017 	ldw	r3,0(r2)
   131e4:	e0bffc17 	ldw	r2,-16(fp)
   131e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   131ec:	00800074 	movhi	r2,1
   131f0:	10943f04 	addi	r2,r2,20732
   131f4:	e0fffb17 	ldw	r3,-20(fp)
   131f8:	18c00324 	muli	r3,r3,12
   131fc:	10c5883a 	add	r2,r2,r3
   13200:	10800204 	addi	r2,r2,8
   13204:	10c00017 	ldw	r3,0(r2)
   13208:	e0bffc17 	ldw	r2,-16(fp)
   1320c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13210:	e13ffb17 	ldw	r4,-20(fp)
   13214:	00119ac0 	call	119ac <alt_release_fd>
  }
} 
   13218:	0001883a 	nop
   1321c:	e037883a 	mov	sp,fp
   13220:	dfc00117 	ldw	ra,4(sp)
   13224:	df000017 	ldw	fp,0(sp)
   13228:	dec00204 	addi	sp,sp,8
   1322c:	f800283a 	ret

00013230 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13230:	defffb04 	addi	sp,sp,-20
   13234:	dfc00415 	stw	ra,16(sp)
   13238:	df000315 	stw	fp,12(sp)
   1323c:	df000304 	addi	fp,sp,12
   13240:	e13ffd15 	stw	r4,-12(fp)
   13244:	e17ffe15 	stw	r5,-8(fp)
   13248:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1324c:	01c07fc4 	movi	r7,511
   13250:	01800044 	movi	r6,1
   13254:	e17ffd17 	ldw	r5,-12(fp)
   13258:	01000074 	movhi	r4,1
   1325c:	21144204 	addi	r4,r4,20744
   13260:	001316c0 	call	1316c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13264:	01c07fc4 	movi	r7,511
   13268:	000d883a 	mov	r6,zero
   1326c:	e17ffe17 	ldw	r5,-8(fp)
   13270:	01000074 	movhi	r4,1
   13274:	21143f04 	addi	r4,r4,20732
   13278:	001316c0 	call	1316c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1327c:	01c07fc4 	movi	r7,511
   13280:	01800044 	movi	r6,1
   13284:	e17fff17 	ldw	r5,-4(fp)
   13288:	01000074 	movhi	r4,1
   1328c:	21144504 	addi	r4,r4,20756
   13290:	001316c0 	call	1316c <alt_open_fd>
}  
   13294:	0001883a 	nop
   13298:	e037883a 	mov	sp,fp
   1329c:	dfc00117 	ldw	ra,4(sp)
   132a0:	df000017 	ldw	fp,0(sp)
   132a4:	dec00204 	addi	sp,sp,8
   132a8:	f800283a 	ret

000132ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132ac:	defffe04 	addi	sp,sp,-8
   132b0:	dfc00115 	stw	ra,4(sp)
   132b4:	df000015 	stw	fp,0(sp)
   132b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132bc:	d0a00b17 	ldw	r2,-32724(gp)
   132c0:	10000326 	beq	r2,zero,132d0 <alt_get_errno+0x24>
   132c4:	d0a00b17 	ldw	r2,-32724(gp)
   132c8:	103ee83a 	callr	r2
   132cc:	00000106 	br	132d4 <alt_get_errno+0x28>
   132d0:	d0a72b04 	addi	r2,gp,-25428
}
   132d4:	e037883a 	mov	sp,fp
   132d8:	dfc00117 	ldw	ra,4(sp)
   132dc:	df000017 	ldw	fp,0(sp)
   132e0:	dec00204 	addi	sp,sp,8
   132e4:	f800283a 	ret

000132e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   132e8:	defffd04 	addi	sp,sp,-12
   132ec:	df000215 	stw	fp,8(sp)
   132f0:	df000204 	addi	fp,sp,8
   132f4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   132f8:	e0bfff17 	ldw	r2,-4(fp)
   132fc:	10800217 	ldw	r2,8(r2)
   13300:	10d00034 	orhi	r3,r2,16384
   13304:	e0bfff17 	ldw	r2,-4(fp)
   13308:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1330c:	e03ffe15 	stw	zero,-8(fp)
   13310:	00001d06 	br	13388 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13314:	00800074 	movhi	r2,1
   13318:	10943f04 	addi	r2,r2,20732
   1331c:	e0fffe17 	ldw	r3,-8(fp)
   13320:	18c00324 	muli	r3,r3,12
   13324:	10c5883a 	add	r2,r2,r3
   13328:	10c00017 	ldw	r3,0(r2)
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	10800017 	ldw	r2,0(r2)
   13334:	1880111e 	bne	r3,r2,1337c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13338:	00800074 	movhi	r2,1
   1333c:	10943f04 	addi	r2,r2,20732
   13340:	e0fffe17 	ldw	r3,-8(fp)
   13344:	18c00324 	muli	r3,r3,12
   13348:	10c5883a 	add	r2,r2,r3
   1334c:	10800204 	addi	r2,r2,8
   13350:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13354:	1000090e 	bge	r2,zero,1337c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13358:	e0bffe17 	ldw	r2,-8(fp)
   1335c:	10c00324 	muli	r3,r2,12
   13360:	00800074 	movhi	r2,1
   13364:	10943f04 	addi	r2,r2,20732
   13368:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1336c:	e0bfff17 	ldw	r2,-4(fp)
   13370:	18800226 	beq	r3,r2,1337c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13374:	00bffcc4 	movi	r2,-13
   13378:	00000806 	br	1339c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1337c:	e0bffe17 	ldw	r2,-8(fp)
   13380:	10800044 	addi	r2,r2,1
   13384:	e0bffe15 	stw	r2,-8(fp)
   13388:	d0a00a17 	ldw	r2,-32728(gp)
   1338c:	1007883a 	mov	r3,r2
   13390:	e0bffe17 	ldw	r2,-8(fp)
   13394:	18bfdf2e 	bgeu	r3,r2,13314 <__alt_data_end+0xff013314>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13398:	0005883a 	mov	r2,zero
}
   1339c:	e037883a 	mov	sp,fp
   133a0:	df000017 	ldw	fp,0(sp)
   133a4:	dec00104 	addi	sp,sp,4
   133a8:	f800283a 	ret

000133ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   133ac:	defff604 	addi	sp,sp,-40
   133b0:	dfc00915 	stw	ra,36(sp)
   133b4:	df000815 	stw	fp,32(sp)
   133b8:	df000804 	addi	fp,sp,32
   133bc:	e13ffd15 	stw	r4,-12(fp)
   133c0:	e17ffe15 	stw	r5,-8(fp)
   133c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   133c8:	00bfffc4 	movi	r2,-1
   133cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   133d0:	00bffb44 	movi	r2,-19
   133d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   133d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   133dc:	d1600804 	addi	r5,gp,-32736
   133e0:	e13ffd17 	ldw	r4,-12(fp)
   133e4:	00136c80 	call	136c8 <alt_find_dev>
   133e8:	e0bff815 	stw	r2,-32(fp)
   133ec:	e0bff817 	ldw	r2,-32(fp)
   133f0:	1000051e 	bne	r2,zero,13408 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   133f4:	e13ffd17 	ldw	r4,-12(fp)
   133f8:	00137580 	call	13758 <alt_find_file>
   133fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13400:	00800044 	movi	r2,1
   13404:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13408:	e0bff817 	ldw	r2,-32(fp)
   1340c:	10002926 	beq	r2,zero,134b4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13410:	e13ff817 	ldw	r4,-32(fp)
   13414:	00138600 	call	13860 <alt_get_fd>
   13418:	e0bff915 	stw	r2,-28(fp)
   1341c:	e0bff917 	ldw	r2,-28(fp)
   13420:	1000030e 	bge	r2,zero,13430 <open+0x84>
    {
      status = index;
   13424:	e0bff917 	ldw	r2,-28(fp)
   13428:	e0bffa15 	stw	r2,-24(fp)
   1342c:	00002306 	br	134bc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   13430:	e0bff917 	ldw	r2,-28(fp)
   13434:	10c00324 	muli	r3,r2,12
   13438:	00800074 	movhi	r2,1
   1343c:	10943f04 	addi	r2,r2,20732
   13440:	1885883a 	add	r2,r3,r2
   13444:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13448:	e0fffe17 	ldw	r3,-8(fp)
   1344c:	00900034 	movhi	r2,16384
   13450:	10bfffc4 	addi	r2,r2,-1
   13454:	1886703a 	and	r3,r3,r2
   13458:	e0bffc17 	ldw	r2,-16(fp)
   1345c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13460:	e0bffb17 	ldw	r2,-20(fp)
   13464:	1000051e 	bne	r2,zero,1347c <open+0xd0>
   13468:	e13ffc17 	ldw	r4,-16(fp)
   1346c:	00132e80 	call	132e8 <alt_file_locked>
   13470:	e0bffa15 	stw	r2,-24(fp)
   13474:	e0bffa17 	ldw	r2,-24(fp)
   13478:	10001016 	blt	r2,zero,134bc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1347c:	e0bff817 	ldw	r2,-32(fp)
   13480:	10800317 	ldw	r2,12(r2)
   13484:	10000826 	beq	r2,zero,134a8 <open+0xfc>
   13488:	e0bff817 	ldw	r2,-32(fp)
   1348c:	10800317 	ldw	r2,12(r2)
   13490:	e1ffff17 	ldw	r7,-4(fp)
   13494:	e1bffe17 	ldw	r6,-8(fp)
   13498:	e17ffd17 	ldw	r5,-12(fp)
   1349c:	e13ffc17 	ldw	r4,-16(fp)
   134a0:	103ee83a 	callr	r2
   134a4:	00000106 	br	134ac <open+0x100>
   134a8:	0005883a 	mov	r2,zero
   134ac:	e0bffa15 	stw	r2,-24(fp)
   134b0:	00000206 	br	134bc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   134b4:	00bffb44 	movi	r2,-19
   134b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   134bc:	e0bffa17 	ldw	r2,-24(fp)
   134c0:	1000090e 	bge	r2,zero,134e8 <open+0x13c>
  {
    alt_release_fd (index);  
   134c4:	e13ff917 	ldw	r4,-28(fp)
   134c8:	00119ac0 	call	119ac <alt_release_fd>
    ALT_ERRNO = -status;
   134cc:	00132ac0 	call	132ac <alt_get_errno>
   134d0:	1007883a 	mov	r3,r2
   134d4:	e0bffa17 	ldw	r2,-24(fp)
   134d8:	0085c83a 	sub	r2,zero,r2
   134dc:	18800015 	stw	r2,0(r3)
    return -1;
   134e0:	00bfffc4 	movi	r2,-1
   134e4:	00000106 	br	134ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   134e8:	e0bff917 	ldw	r2,-28(fp)
}
   134ec:	e037883a 	mov	sp,fp
   134f0:	dfc00117 	ldw	ra,4(sp)
   134f4:	df000017 	ldw	fp,0(sp)
   134f8:	dec00204 	addi	sp,sp,8
   134fc:	f800283a 	ret

00013500 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13500:	defffa04 	addi	sp,sp,-24
   13504:	df000515 	stw	fp,20(sp)
   13508:	df000504 	addi	fp,sp,20
   1350c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13510:	0005303a 	rdctl	r2,status
   13514:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13518:	e0fffc17 	ldw	r3,-16(fp)
   1351c:	00bfff84 	movi	r2,-2
   13520:	1884703a 	and	r2,r3,r2
   13524:	1001703a 	wrctl	status,r2
  
  return context;
   13528:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1352c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13530:	e0bfff17 	ldw	r2,-4(fp)
   13534:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	10800017 	ldw	r2,0(r2)
   13540:	e0fffd17 	ldw	r3,-12(fp)
   13544:	18c00117 	ldw	r3,4(r3)
   13548:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1354c:	e0bffd17 	ldw	r2,-12(fp)
   13550:	10800117 	ldw	r2,4(r2)
   13554:	e0fffd17 	ldw	r3,-12(fp)
   13558:	18c00017 	ldw	r3,0(r3)
   1355c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13560:	e0bffd17 	ldw	r2,-12(fp)
   13564:	e0fffd17 	ldw	r3,-12(fp)
   13568:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1356c:	e0bffd17 	ldw	r2,-12(fp)
   13570:	e0fffd17 	ldw	r3,-12(fp)
   13574:	10c00015 	stw	r3,0(r2)
   13578:	e0bffb17 	ldw	r2,-20(fp)
   1357c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13580:	e0bffe17 	ldw	r2,-8(fp)
   13584:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13588:	0001883a 	nop
   1358c:	e037883a 	mov	sp,fp
   13590:	df000017 	ldw	fp,0(sp)
   13594:	dec00104 	addi	sp,sp,4
   13598:	f800283a 	ret

0001359c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1359c:	defffb04 	addi	sp,sp,-20
   135a0:	dfc00415 	stw	ra,16(sp)
   135a4:	df000315 	stw	fp,12(sp)
   135a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   135ac:	d0a00e17 	ldw	r2,-32712(gp)
   135b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   135b4:	d0a73617 	ldw	r2,-25384(gp)
   135b8:	10800044 	addi	r2,r2,1
   135bc:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   135c0:	00002e06 	br	1367c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   135c4:	e0bffd17 	ldw	r2,-12(fp)
   135c8:	10800017 	ldw	r2,0(r2)
   135cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   135d0:	e0bffd17 	ldw	r2,-12(fp)
   135d4:	10800403 	ldbu	r2,16(r2)
   135d8:	10803fcc 	andi	r2,r2,255
   135dc:	10000426 	beq	r2,zero,135f0 <alt_tick+0x54>
   135e0:	d0a73617 	ldw	r2,-25384(gp)
   135e4:	1000021e 	bne	r2,zero,135f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   135e8:	e0bffd17 	ldw	r2,-12(fp)
   135ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   135f0:	e0bffd17 	ldw	r2,-12(fp)
   135f4:	10800217 	ldw	r2,8(r2)
   135f8:	d0e73617 	ldw	r3,-25384(gp)
   135fc:	18801d36 	bltu	r3,r2,13674 <alt_tick+0xd8>
   13600:	e0bffd17 	ldw	r2,-12(fp)
   13604:	10800403 	ldbu	r2,16(r2)
   13608:	10803fcc 	andi	r2,r2,255
   1360c:	1000191e 	bne	r2,zero,13674 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   13610:	e0bffd17 	ldw	r2,-12(fp)
   13614:	10800317 	ldw	r2,12(r2)
   13618:	e0fffd17 	ldw	r3,-12(fp)
   1361c:	18c00517 	ldw	r3,20(r3)
   13620:	1809883a 	mov	r4,r3
   13624:	103ee83a 	callr	r2
   13628:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1362c:	e0bfff17 	ldw	r2,-4(fp)
   13630:	1000031e 	bne	r2,zero,13640 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   13634:	e13ffd17 	ldw	r4,-12(fp)
   13638:	00135000 	call	13500 <alt_alarm_stop>
   1363c:	00000d06 	br	13674 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   13640:	e0bffd17 	ldw	r2,-12(fp)
   13644:	10c00217 	ldw	r3,8(r2)
   13648:	e0bfff17 	ldw	r2,-4(fp)
   1364c:	1887883a 	add	r3,r3,r2
   13650:	e0bffd17 	ldw	r2,-12(fp)
   13654:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13658:	e0bffd17 	ldw	r2,-12(fp)
   1365c:	10c00217 	ldw	r3,8(r2)
   13660:	d0a73617 	ldw	r2,-25384(gp)
   13664:	1880032e 	bgeu	r3,r2,13674 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   13668:	e0bffd17 	ldw	r2,-12(fp)
   1366c:	00c00044 	movi	r3,1
   13670:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   13674:	e0bffe17 	ldw	r2,-8(fp)
   13678:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1367c:	e0fffd17 	ldw	r3,-12(fp)
   13680:	d0a00e04 	addi	r2,gp,-32712
   13684:	18bfcf1e 	bne	r3,r2,135c4 <__alt_data_end+0xff0135c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   13688:	0001883a 	nop
}
   1368c:	0001883a 	nop
   13690:	e037883a 	mov	sp,fp
   13694:	dfc00117 	ldw	ra,4(sp)
   13698:	df000017 	ldw	fp,0(sp)
   1369c:	dec00204 	addi	sp,sp,8
   136a0:	f800283a 	ret

000136a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   136a4:	deffff04 	addi	sp,sp,-4
   136a8:	df000015 	stw	fp,0(sp)
   136ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   136b0:	000170fa 	wrctl	ienable,zero
}
   136b4:	0001883a 	nop
   136b8:	e037883a 	mov	sp,fp
   136bc:	df000017 	ldw	fp,0(sp)
   136c0:	dec00104 	addi	sp,sp,4
   136c4:	f800283a 	ret

000136c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   136c8:	defffa04 	addi	sp,sp,-24
   136cc:	dfc00515 	stw	ra,20(sp)
   136d0:	df000415 	stw	fp,16(sp)
   136d4:	df000404 	addi	fp,sp,16
   136d8:	e13ffe15 	stw	r4,-8(fp)
   136dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   136e0:	e0bfff17 	ldw	r2,-4(fp)
   136e4:	10800017 	ldw	r2,0(r2)
   136e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   136ec:	e13ffe17 	ldw	r4,-8(fp)
   136f0:	0005e600 	call	5e60 <strlen>
   136f4:	10800044 	addi	r2,r2,1
   136f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   136fc:	00000d06 	br	13734 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13700:	e0bffc17 	ldw	r2,-16(fp)
   13704:	10800217 	ldw	r2,8(r2)
   13708:	e0fffd17 	ldw	r3,-12(fp)
   1370c:	180d883a 	mov	r6,r3
   13710:	e17ffe17 	ldw	r5,-8(fp)
   13714:	1009883a 	mov	r4,r2
   13718:	0013c2c0 	call	13c2c <memcmp>
   1371c:	1000021e 	bne	r2,zero,13728 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13720:	e0bffc17 	ldw	r2,-16(fp)
   13724:	00000706 	br	13744 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13728:	e0bffc17 	ldw	r2,-16(fp)
   1372c:	10800017 	ldw	r2,0(r2)
   13730:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13734:	e0fffc17 	ldw	r3,-16(fp)
   13738:	e0bfff17 	ldw	r2,-4(fp)
   1373c:	18bff01e 	bne	r3,r2,13700 <__alt_data_end+0xff013700>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13740:	0005883a 	mov	r2,zero
}
   13744:	e037883a 	mov	sp,fp
   13748:	dfc00117 	ldw	ra,4(sp)
   1374c:	df000017 	ldw	fp,0(sp)
   13750:	dec00204 	addi	sp,sp,8
   13754:	f800283a 	ret

00013758 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13758:	defffb04 	addi	sp,sp,-20
   1375c:	dfc00415 	stw	ra,16(sp)
   13760:	df000315 	stw	fp,12(sp)
   13764:	df000304 	addi	fp,sp,12
   13768:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1376c:	d0a00617 	ldw	r2,-32744(gp)
   13770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13774:	00003106 	br	1383c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   13778:	e0bffd17 	ldw	r2,-12(fp)
   1377c:	10800217 	ldw	r2,8(r2)
   13780:	1009883a 	mov	r4,r2
   13784:	0005e600 	call	5e60 <strlen>
   13788:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1378c:	e0bffd17 	ldw	r2,-12(fp)
   13790:	10c00217 	ldw	r3,8(r2)
   13794:	e0bffe17 	ldw	r2,-8(fp)
   13798:	10bfffc4 	addi	r2,r2,-1
   1379c:	1885883a 	add	r2,r3,r2
   137a0:	10800003 	ldbu	r2,0(r2)
   137a4:	10803fcc 	andi	r2,r2,255
   137a8:	1080201c 	xori	r2,r2,128
   137ac:	10bfe004 	addi	r2,r2,-128
   137b0:	10800bd8 	cmpnei	r2,r2,47
   137b4:	1000031e 	bne	r2,zero,137c4 <alt_find_file+0x6c>
    {
      len -= 1;
   137b8:	e0bffe17 	ldw	r2,-8(fp)
   137bc:	10bfffc4 	addi	r2,r2,-1
   137c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   137c4:	e0bffe17 	ldw	r2,-8(fp)
   137c8:	e0ffff17 	ldw	r3,-4(fp)
   137cc:	1885883a 	add	r2,r3,r2
   137d0:	10800003 	ldbu	r2,0(r2)
   137d4:	10803fcc 	andi	r2,r2,255
   137d8:	1080201c 	xori	r2,r2,128
   137dc:	10bfe004 	addi	r2,r2,-128
   137e0:	10800be0 	cmpeqi	r2,r2,47
   137e4:	1000081e 	bne	r2,zero,13808 <alt_find_file+0xb0>
   137e8:	e0bffe17 	ldw	r2,-8(fp)
   137ec:	e0ffff17 	ldw	r3,-4(fp)
   137f0:	1885883a 	add	r2,r3,r2
   137f4:	10800003 	ldbu	r2,0(r2)
   137f8:	10803fcc 	andi	r2,r2,255
   137fc:	1080201c 	xori	r2,r2,128
   13800:	10bfe004 	addi	r2,r2,-128
   13804:	10000a1e 	bne	r2,zero,13830 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   13808:	e0bffd17 	ldw	r2,-12(fp)
   1380c:	10800217 	ldw	r2,8(r2)
   13810:	e0fffe17 	ldw	r3,-8(fp)
   13814:	180d883a 	mov	r6,r3
   13818:	e17fff17 	ldw	r5,-4(fp)
   1381c:	1009883a 	mov	r4,r2
   13820:	0013c2c0 	call	13c2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13824:	1000021e 	bne	r2,zero,13830 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13828:	e0bffd17 	ldw	r2,-12(fp)
   1382c:	00000706 	br	1384c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	10800017 	ldw	r2,0(r2)
   13838:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1383c:	e0fffd17 	ldw	r3,-12(fp)
   13840:	d0a00604 	addi	r2,gp,-32744
   13844:	18bfcc1e 	bne	r3,r2,13778 <__alt_data_end+0xff013778>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13848:	0005883a 	mov	r2,zero
}
   1384c:	e037883a 	mov	sp,fp
   13850:	dfc00117 	ldw	ra,4(sp)
   13854:	df000017 	ldw	fp,0(sp)
   13858:	dec00204 	addi	sp,sp,8
   1385c:	f800283a 	ret

00013860 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13860:	defffc04 	addi	sp,sp,-16
   13864:	df000315 	stw	fp,12(sp)
   13868:	df000304 	addi	fp,sp,12
   1386c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13870:	00bffa04 	movi	r2,-24
   13874:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13878:	e03ffd15 	stw	zero,-12(fp)
   1387c:	00001906 	br	138e4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   13880:	00800074 	movhi	r2,1
   13884:	10943f04 	addi	r2,r2,20732
   13888:	e0fffd17 	ldw	r3,-12(fp)
   1388c:	18c00324 	muli	r3,r3,12
   13890:	10c5883a 	add	r2,r2,r3
   13894:	10800017 	ldw	r2,0(r2)
   13898:	10000f1e 	bne	r2,zero,138d8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   1389c:	00800074 	movhi	r2,1
   138a0:	10943f04 	addi	r2,r2,20732
   138a4:	e0fffd17 	ldw	r3,-12(fp)
   138a8:	18c00324 	muli	r3,r3,12
   138ac:	10c5883a 	add	r2,r2,r3
   138b0:	e0ffff17 	ldw	r3,-4(fp)
   138b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   138b8:	d0e00a17 	ldw	r3,-32728(gp)
   138bc:	e0bffd17 	ldw	r2,-12(fp)
   138c0:	1880020e 	bge	r3,r2,138cc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   138c4:	e0bffd17 	ldw	r2,-12(fp)
   138c8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   138cc:	e0bffd17 	ldw	r2,-12(fp)
   138d0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   138d4:	00000606 	br	138f0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   138d8:	e0bffd17 	ldw	r2,-12(fp)
   138dc:	10800044 	addi	r2,r2,1
   138e0:	e0bffd15 	stw	r2,-12(fp)
   138e4:	e0bffd17 	ldw	r2,-12(fp)
   138e8:	10800810 	cmplti	r2,r2,32
   138ec:	103fe41e 	bne	r2,zero,13880 <__alt_data_end+0xff013880>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   138f0:	e0bffe17 	ldw	r2,-8(fp)
}
   138f4:	e037883a 	mov	sp,fp
   138f8:	df000017 	ldw	fp,0(sp)
   138fc:	dec00104 	addi	sp,sp,4
   13900:	f800283a 	ret

00013904 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13904:	defffb04 	addi	sp,sp,-20
   13908:	df000415 	stw	fp,16(sp)
   1390c:	df000404 	addi	fp,sp,16
   13910:	e13ffe15 	stw	r4,-8(fp)
   13914:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13918:	e0bfff17 	ldw	r2,-4(fp)
   1391c:	10840070 	cmpltui	r2,r2,4097
   13920:	1000021e 	bne	r2,zero,1392c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13924:	00840004 	movi	r2,4096
   13928:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1392c:	e0fffe17 	ldw	r3,-8(fp)
   13930:	e0bfff17 	ldw	r2,-4(fp)
   13934:	1885883a 	add	r2,r3,r2
   13938:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	e0bffc15 	stw	r2,-16(fp)
   13944:	00000506 	br	1395c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   13948:	e0bffc17 	ldw	r2,-16(fp)
   1394c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13950:	e0bffc17 	ldw	r2,-16(fp)
   13954:	10800804 	addi	r2,r2,32
   13958:	e0bffc15 	stw	r2,-16(fp)
   1395c:	e0fffc17 	ldw	r3,-16(fp)
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	18bff836 	bltu	r3,r2,13948 <__alt_data_end+0xff013948>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13968:	e0bffe17 	ldw	r2,-8(fp)
   1396c:	108007cc 	andi	r2,r2,31
   13970:	10000226 	beq	r2,zero,1397c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13974:	e0bffc17 	ldw	r2,-16(fp)
   13978:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1397c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13980:	0001883a 	nop
   13984:	e037883a 	mov	sp,fp
   13988:	df000017 	ldw	fp,0(sp)
   1398c:	dec00104 	addi	sp,sp,4
   13990:	f800283a 	ret

00013994 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13994:	defffe04 	addi	sp,sp,-8
   13998:	df000115 	stw	fp,4(sp)
   1399c:	df000104 	addi	fp,sp,4
   139a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   139a4:	e0bfff17 	ldw	r2,-4(fp)
   139a8:	10bffe84 	addi	r2,r2,-6
   139ac:	10c00428 	cmpgeui	r3,r2,16
   139b0:	18001a1e 	bne	r3,zero,13a1c <alt_exception_cause_generated_bad_addr+0x88>
   139b4:	100690ba 	slli	r3,r2,2
   139b8:	00800074 	movhi	r2,1
   139bc:	108e7304 	addi	r2,r2,14796
   139c0:	1885883a 	add	r2,r3,r2
   139c4:	10800017 	ldw	r2,0(r2)
   139c8:	1000683a 	jmp	r2
   139cc:	00013a0c 	andi	zero,zero,1256
   139d0:	00013a0c 	andi	zero,zero,1256
   139d4:	00013a1c 	xori	zero,zero,1256
   139d8:	00013a1c 	xori	zero,zero,1256
   139dc:	00013a1c 	xori	zero,zero,1256
   139e0:	00013a0c 	andi	zero,zero,1256
   139e4:	00013a14 	movui	zero,1256
   139e8:	00013a1c 	xori	zero,zero,1256
   139ec:	00013a0c 	andi	zero,zero,1256
   139f0:	00013a0c 	andi	zero,zero,1256
   139f4:	00013a1c 	xori	zero,zero,1256
   139f8:	00013a0c 	andi	zero,zero,1256
   139fc:	00013a14 	movui	zero,1256
   13a00:	00013a1c 	xori	zero,zero,1256
   13a04:	00013a1c 	xori	zero,zero,1256
   13a08:	00013a0c 	andi	zero,zero,1256
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13a0c:	00800044 	movi	r2,1
   13a10:	00000306 	br	13a20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13a14:	0005883a 	mov	r2,zero
   13a18:	00000106 	br	13a20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13a1c:	0005883a 	mov	r2,zero
  }
}
   13a20:	e037883a 	mov	sp,fp
   13a24:	df000017 	ldw	fp,0(sp)
   13a28:	dec00104 	addi	sp,sp,4
   13a2c:	f800283a 	ret

00013a30 <atexit>:
   13a30:	200b883a 	mov	r5,r4
   13a34:	000f883a 	mov	r7,zero
   13a38:	000d883a 	mov	r6,zero
   13a3c:	0009883a 	mov	r4,zero
   13a40:	0013ca81 	jmpi	13ca8 <__register_exitproc>

00013a44 <exit>:
   13a44:	defffe04 	addi	sp,sp,-8
   13a48:	000b883a 	mov	r5,zero
   13a4c:	dc000015 	stw	r16,0(sp)
   13a50:	dfc00115 	stw	ra,4(sp)
   13a54:	2021883a 	mov	r16,r4
   13a58:	0013dc00 	call	13dc0 <__call_exitprocs>
   13a5c:	00800074 	movhi	r2,1
   13a60:	1098b904 	addi	r2,r2,25316
   13a64:	11000017 	ldw	r4,0(r2)
   13a68:	20800f17 	ldw	r2,60(r4)
   13a6c:	10000126 	beq	r2,zero,13a74 <exit+0x30>
   13a70:	103ee83a 	callr	r2
   13a74:	8009883a 	mov	r4,r16
   13a78:	0013f400 	call	13f40 <_exit>

00013a7c <memalign>:
   13a7c:	00800074 	movhi	r2,1
   13a80:	1098ba04 	addi	r2,r2,25320
   13a84:	280d883a 	mov	r6,r5
   13a88:	200b883a 	mov	r5,r4
   13a8c:	11000017 	ldw	r4,0(r2)
   13a90:	0013a941 	jmpi	13a94 <_memalign_r>

00013a94 <_memalign_r>:
   13a94:	00800204 	movi	r2,8
   13a98:	1140532e 	bgeu	r2,r5,13be8 <_memalign_r+0x154>
   13a9c:	defffa04 	addi	sp,sp,-24
   13aa0:	dd000415 	stw	r20,16(sp)
   13aa4:	dc400115 	stw	r17,4(sp)
   13aa8:	dfc00515 	stw	ra,20(sp)
   13aac:	dcc00315 	stw	r19,12(sp)
   13ab0:	dc800215 	stw	r18,8(sp)
   13ab4:	dc000015 	stw	r16,0(sp)
   13ab8:	008003c4 	movi	r2,15
   13abc:	2823883a 	mov	r17,r5
   13ac0:	2029883a 	mov	r20,r4
   13ac4:	11400136 	bltu	r2,r5,13acc <_memalign_r+0x38>
   13ac8:	04400404 	movi	r17,16
   13acc:	308002c4 	addi	r2,r6,11
   13ad0:	00c00584 	movi	r3,22
   13ad4:	18803e2e 	bgeu	r3,r2,13bd0 <_memalign_r+0x13c>
   13ad8:	04bffe04 	movi	r18,-8
   13adc:	14a4703a 	and	r18,r2,r18
   13ae0:	90003d16 	blt	r18,zero,13bd8 <_memalign_r+0x144>
   13ae4:	91803c36 	bltu	r18,r6,13bd8 <_memalign_r+0x144>
   13ae8:	89400404 	addi	r5,r17,16
   13aec:	2c8b883a 	add	r5,r5,r18
   13af0:	a009883a 	mov	r4,r20
   13af4:	00054c00 	call	54c0 <_malloc_r>
   13af8:	1027883a 	mov	r19,r2
   13afc:	10004926 	beq	r2,zero,13c24 <_memalign_r+0x190>
   13b00:	a009883a 	mov	r4,r20
   13b04:	001182c0 	call	1182c <__malloc_lock>
   13b08:	880b883a 	mov	r5,r17
   13b0c:	9809883a 	mov	r4,r19
   13b10:	9c3ffe04 	addi	r16,r19,-8
   13b14:	0004a4c0 	call	4a4c <__umodsi3>
   13b18:	10001c26 	beq	r2,zero,13b8c <_memalign_r+0xf8>
   13b1c:	88bfffc4 	addi	r2,r17,-1
   13b20:	9887883a 	add	r3,r19,r2
   13b24:	0445c83a 	sub	r2,zero,r17
   13b28:	1884703a 	and	r2,r3,r2
   13b2c:	10bffe04 	addi	r2,r2,-8
   13b30:	1409c83a 	sub	r4,r2,r16
   13b34:	014003c4 	movi	r5,15
   13b38:	8007883a 	mov	r3,r16
   13b3c:	29002c0e 	bge	r5,r4,13bf0 <_memalign_r+0x15c>
   13b40:	1021883a 	mov	r16,r2
   13b44:	993fff17 	ldw	r4,-4(r19)
   13b48:	00bfff04 	movi	r2,-4
   13b4c:	80c7c83a 	sub	r3,r16,r3
   13b50:	2084703a 	and	r2,r4,r2
   13b54:	10c5c83a 	sub	r2,r2,r3
   13b58:	11000054 	ori	r4,r2,1
   13b5c:	81000115 	stw	r4,4(r16)
   13b60:	8085883a 	add	r2,r16,r2
   13b64:	11800117 	ldw	r6,4(r2)
   13b68:	980b883a 	mov	r5,r19
   13b6c:	a009883a 	mov	r4,r20
   13b70:	31800054 	ori	r6,r6,1
   13b74:	11800115 	stw	r6,4(r2)
   13b78:	98bfff17 	ldw	r2,-4(r19)
   13b7c:	1080004c 	andi	r2,r2,1
   13b80:	10c6b03a 	or	r3,r2,r3
   13b84:	98ffff15 	stw	r3,-4(r19)
   13b88:	000a3100 	call	a310 <_free_r>
   13b8c:	80c00117 	ldw	r3,4(r16)
   13b90:	00bfff04 	movi	r2,-4
   13b94:	1884703a 	and	r2,r3,r2
   13b98:	1485c83a 	sub	r2,r2,r18
   13b9c:	00c003c4 	movi	r3,15
   13ba0:	18801516 	blt	r3,r2,13bf8 <_memalign_r+0x164>
   13ba4:	a009883a 	mov	r4,r20
   13ba8:	00118500 	call	11850 <__malloc_unlock>
   13bac:	80800204 	addi	r2,r16,8
   13bb0:	dfc00517 	ldw	ra,20(sp)
   13bb4:	dd000417 	ldw	r20,16(sp)
   13bb8:	dcc00317 	ldw	r19,12(sp)
   13bbc:	dc800217 	ldw	r18,8(sp)
   13bc0:	dc400117 	ldw	r17,4(sp)
   13bc4:	dc000017 	ldw	r16,0(sp)
   13bc8:	dec00604 	addi	sp,sp,24
   13bcc:	f800283a 	ret
   13bd0:	04800404 	movi	r18,16
   13bd4:	91bfc42e 	bgeu	r18,r6,13ae8 <__alt_data_end+0xff013ae8>
   13bd8:	00800304 	movi	r2,12
   13bdc:	a0800015 	stw	r2,0(r20)
   13be0:	0005883a 	mov	r2,zero
   13be4:	003ff206 	br	13bb0 <__alt_data_end+0xff013bb0>
   13be8:	300b883a 	mov	r5,r6
   13bec:	00054c01 	jmpi	54c0 <_malloc_r>
   13bf0:	1461883a 	add	r16,r2,r17
   13bf4:	003fd306 	br	13b44 <__alt_data_end+0xff013b44>
   13bf8:	848b883a 	add	r5,r16,r18
   13bfc:	10800054 	ori	r2,r2,1
   13c00:	28800115 	stw	r2,4(r5)
   13c04:	80800117 	ldw	r2,4(r16)
   13c08:	29400204 	addi	r5,r5,8
   13c0c:	a009883a 	mov	r4,r20
   13c10:	1080004c 	andi	r2,r2,1
   13c14:	14a4b03a 	or	r18,r2,r18
   13c18:	84800115 	stw	r18,4(r16)
   13c1c:	000a3100 	call	a310 <_free_r>
   13c20:	003fe006 	br	13ba4 <__alt_data_end+0xff013ba4>
   13c24:	0005883a 	mov	r2,zero
   13c28:	003fe106 	br	13bb0 <__alt_data_end+0xff013bb0>

00013c2c <memcmp>:
   13c2c:	01c000c4 	movi	r7,3
   13c30:	3980192e 	bgeu	r7,r6,13c98 <memcmp+0x6c>
   13c34:	2144b03a 	or	r2,r4,r5
   13c38:	11c4703a 	and	r2,r2,r7
   13c3c:	10000f26 	beq	r2,zero,13c7c <memcmp+0x50>
   13c40:	20800003 	ldbu	r2,0(r4)
   13c44:	28c00003 	ldbu	r3,0(r5)
   13c48:	10c0151e 	bne	r2,r3,13ca0 <memcmp+0x74>
   13c4c:	31bfff84 	addi	r6,r6,-2
   13c50:	01ffffc4 	movi	r7,-1
   13c54:	00000406 	br	13c68 <memcmp+0x3c>
   13c58:	20800003 	ldbu	r2,0(r4)
   13c5c:	28c00003 	ldbu	r3,0(r5)
   13c60:	31bfffc4 	addi	r6,r6,-1
   13c64:	10c00e1e 	bne	r2,r3,13ca0 <memcmp+0x74>
   13c68:	21000044 	addi	r4,r4,1
   13c6c:	29400044 	addi	r5,r5,1
   13c70:	31fff91e 	bne	r6,r7,13c58 <__alt_data_end+0xff013c58>
   13c74:	0005883a 	mov	r2,zero
   13c78:	f800283a 	ret
   13c7c:	20c00017 	ldw	r3,0(r4)
   13c80:	28800017 	ldw	r2,0(r5)
   13c84:	18bfee1e 	bne	r3,r2,13c40 <__alt_data_end+0xff013c40>
   13c88:	31bfff04 	addi	r6,r6,-4
   13c8c:	21000104 	addi	r4,r4,4
   13c90:	29400104 	addi	r5,r5,4
   13c94:	39bff936 	bltu	r7,r6,13c7c <__alt_data_end+0xff013c7c>
   13c98:	303fe91e 	bne	r6,zero,13c40 <__alt_data_end+0xff013c40>
   13c9c:	003ff506 	br	13c74 <__alt_data_end+0xff013c74>
   13ca0:	10c5c83a 	sub	r2,r2,r3
   13ca4:	f800283a 	ret

00013ca8 <__register_exitproc>:
   13ca8:	defffa04 	addi	sp,sp,-24
   13cac:	dc000315 	stw	r16,12(sp)
   13cb0:	04000074 	movhi	r16,1
   13cb4:	8418b904 	addi	r16,r16,25316
   13cb8:	80c00017 	ldw	r3,0(r16)
   13cbc:	dc400415 	stw	r17,16(sp)
   13cc0:	dfc00515 	stw	ra,20(sp)
   13cc4:	18805217 	ldw	r2,328(r3)
   13cc8:	2023883a 	mov	r17,r4
   13ccc:	10003726 	beq	r2,zero,13dac <__register_exitproc+0x104>
   13cd0:	10c00117 	ldw	r3,4(r2)
   13cd4:	010007c4 	movi	r4,31
   13cd8:	20c00e16 	blt	r4,r3,13d14 <__register_exitproc+0x6c>
   13cdc:	1a000044 	addi	r8,r3,1
   13ce0:	8800221e 	bne	r17,zero,13d6c <__register_exitproc+0xc4>
   13ce4:	18c00084 	addi	r3,r3,2
   13ce8:	18c7883a 	add	r3,r3,r3
   13cec:	18c7883a 	add	r3,r3,r3
   13cf0:	12000115 	stw	r8,4(r2)
   13cf4:	10c7883a 	add	r3,r2,r3
   13cf8:	19400015 	stw	r5,0(r3)
   13cfc:	0005883a 	mov	r2,zero
   13d00:	dfc00517 	ldw	ra,20(sp)
   13d04:	dc400417 	ldw	r17,16(sp)
   13d08:	dc000317 	ldw	r16,12(sp)
   13d0c:	dec00604 	addi	sp,sp,24
   13d10:	f800283a 	ret
   13d14:	00800034 	movhi	r2,0
   13d18:	10952604 	addi	r2,r2,21656
   13d1c:	10002626 	beq	r2,zero,13db8 <__register_exitproc+0x110>
   13d20:	01006404 	movi	r4,400
   13d24:	d9400015 	stw	r5,0(sp)
   13d28:	d9800115 	stw	r6,4(sp)
   13d2c:	d9c00215 	stw	r7,8(sp)
   13d30:	00054980 	call	5498 <malloc>
   13d34:	d9400017 	ldw	r5,0(sp)
   13d38:	d9800117 	ldw	r6,4(sp)
   13d3c:	d9c00217 	ldw	r7,8(sp)
   13d40:	10001d26 	beq	r2,zero,13db8 <__register_exitproc+0x110>
   13d44:	81000017 	ldw	r4,0(r16)
   13d48:	10000115 	stw	zero,4(r2)
   13d4c:	02000044 	movi	r8,1
   13d50:	22405217 	ldw	r9,328(r4)
   13d54:	0007883a 	mov	r3,zero
   13d58:	12400015 	stw	r9,0(r2)
   13d5c:	20805215 	stw	r2,328(r4)
   13d60:	10006215 	stw	zero,392(r2)
   13d64:	10006315 	stw	zero,396(r2)
   13d68:	883fde26 	beq	r17,zero,13ce4 <__alt_data_end+0xff013ce4>
   13d6c:	18c9883a 	add	r4,r3,r3
   13d70:	2109883a 	add	r4,r4,r4
   13d74:	1109883a 	add	r4,r2,r4
   13d78:	21802215 	stw	r6,136(r4)
   13d7c:	01800044 	movi	r6,1
   13d80:	12406217 	ldw	r9,392(r2)
   13d84:	30cc983a 	sll	r6,r6,r3
   13d88:	4992b03a 	or	r9,r9,r6
   13d8c:	12406215 	stw	r9,392(r2)
   13d90:	21c04215 	stw	r7,264(r4)
   13d94:	01000084 	movi	r4,2
   13d98:	893fd21e 	bne	r17,r4,13ce4 <__alt_data_end+0xff013ce4>
   13d9c:	11006317 	ldw	r4,396(r2)
   13da0:	218cb03a 	or	r6,r4,r6
   13da4:	11806315 	stw	r6,396(r2)
   13da8:	003fce06 	br	13ce4 <__alt_data_end+0xff013ce4>
   13dac:	18805304 	addi	r2,r3,332
   13db0:	18805215 	stw	r2,328(r3)
   13db4:	003fc606 	br	13cd0 <__alt_data_end+0xff013cd0>
   13db8:	00bfffc4 	movi	r2,-1
   13dbc:	003fd006 	br	13d00 <__alt_data_end+0xff013d00>

00013dc0 <__call_exitprocs>:
   13dc0:	defff504 	addi	sp,sp,-44
   13dc4:	df000915 	stw	fp,36(sp)
   13dc8:	dd400615 	stw	r21,24(sp)
   13dcc:	dc800315 	stw	r18,12(sp)
   13dd0:	dfc00a15 	stw	ra,40(sp)
   13dd4:	ddc00815 	stw	r23,32(sp)
   13dd8:	dd800715 	stw	r22,28(sp)
   13ddc:	dd000515 	stw	r20,20(sp)
   13de0:	dcc00415 	stw	r19,16(sp)
   13de4:	dc400215 	stw	r17,8(sp)
   13de8:	dc000115 	stw	r16,4(sp)
   13dec:	d9000015 	stw	r4,0(sp)
   13df0:	2839883a 	mov	fp,r5
   13df4:	04800044 	movi	r18,1
   13df8:	057fffc4 	movi	r21,-1
   13dfc:	00800074 	movhi	r2,1
   13e00:	1098b904 	addi	r2,r2,25316
   13e04:	12000017 	ldw	r8,0(r2)
   13e08:	45005217 	ldw	r20,328(r8)
   13e0c:	44c05204 	addi	r19,r8,328
   13e10:	a0001c26 	beq	r20,zero,13e84 <__call_exitprocs+0xc4>
   13e14:	a0800117 	ldw	r2,4(r20)
   13e18:	15ffffc4 	addi	r23,r2,-1
   13e1c:	b8000d16 	blt	r23,zero,13e54 <__call_exitprocs+0x94>
   13e20:	14000044 	addi	r16,r2,1
   13e24:	8421883a 	add	r16,r16,r16
   13e28:	8421883a 	add	r16,r16,r16
   13e2c:	84402004 	addi	r17,r16,128
   13e30:	a463883a 	add	r17,r20,r17
   13e34:	a421883a 	add	r16,r20,r16
   13e38:	e0001e26 	beq	fp,zero,13eb4 <__call_exitprocs+0xf4>
   13e3c:	80804017 	ldw	r2,256(r16)
   13e40:	e0801c26 	beq	fp,r2,13eb4 <__call_exitprocs+0xf4>
   13e44:	bdffffc4 	addi	r23,r23,-1
   13e48:	843fff04 	addi	r16,r16,-4
   13e4c:	8c7fff04 	addi	r17,r17,-4
   13e50:	bd7ff91e 	bne	r23,r21,13e38 <__alt_data_end+0xff013e38>
   13e54:	00800034 	movhi	r2,0
   13e58:	10952b04 	addi	r2,r2,21676
   13e5c:	10000926 	beq	r2,zero,13e84 <__call_exitprocs+0xc4>
   13e60:	a0800117 	ldw	r2,4(r20)
   13e64:	1000301e 	bne	r2,zero,13f28 <__call_exitprocs+0x168>
   13e68:	a0800017 	ldw	r2,0(r20)
   13e6c:	10003226 	beq	r2,zero,13f38 <__call_exitprocs+0x178>
   13e70:	a009883a 	mov	r4,r20
   13e74:	98800015 	stw	r2,0(r19)
   13e78:	00054ac0 	call	54ac <free>
   13e7c:	9d000017 	ldw	r20,0(r19)
   13e80:	a03fe41e 	bne	r20,zero,13e14 <__alt_data_end+0xff013e14>
   13e84:	dfc00a17 	ldw	ra,40(sp)
   13e88:	df000917 	ldw	fp,36(sp)
   13e8c:	ddc00817 	ldw	r23,32(sp)
   13e90:	dd800717 	ldw	r22,28(sp)
   13e94:	dd400617 	ldw	r21,24(sp)
   13e98:	dd000517 	ldw	r20,20(sp)
   13e9c:	dcc00417 	ldw	r19,16(sp)
   13ea0:	dc800317 	ldw	r18,12(sp)
   13ea4:	dc400217 	ldw	r17,8(sp)
   13ea8:	dc000117 	ldw	r16,4(sp)
   13eac:	dec00b04 	addi	sp,sp,44
   13eb0:	f800283a 	ret
   13eb4:	a0800117 	ldw	r2,4(r20)
   13eb8:	80c00017 	ldw	r3,0(r16)
   13ebc:	10bfffc4 	addi	r2,r2,-1
   13ec0:	15c01426 	beq	r2,r23,13f14 <__call_exitprocs+0x154>
   13ec4:	80000015 	stw	zero,0(r16)
   13ec8:	183fde26 	beq	r3,zero,13e44 <__alt_data_end+0xff013e44>
   13ecc:	95c8983a 	sll	r4,r18,r23
   13ed0:	a0806217 	ldw	r2,392(r20)
   13ed4:	a5800117 	ldw	r22,4(r20)
   13ed8:	2084703a 	and	r2,r4,r2
   13edc:	10000b26 	beq	r2,zero,13f0c <__call_exitprocs+0x14c>
   13ee0:	a0806317 	ldw	r2,396(r20)
   13ee4:	2088703a 	and	r4,r4,r2
   13ee8:	20000c1e 	bne	r4,zero,13f1c <__call_exitprocs+0x15c>
   13eec:	89400017 	ldw	r5,0(r17)
   13ef0:	d9000017 	ldw	r4,0(sp)
   13ef4:	183ee83a 	callr	r3
   13ef8:	a0800117 	ldw	r2,4(r20)
   13efc:	15bfbf1e 	bne	r2,r22,13dfc <__alt_data_end+0xff013dfc>
   13f00:	98800017 	ldw	r2,0(r19)
   13f04:	153fcf26 	beq	r2,r20,13e44 <__alt_data_end+0xff013e44>
   13f08:	003fbc06 	br	13dfc <__alt_data_end+0xff013dfc>
   13f0c:	183ee83a 	callr	r3
   13f10:	003ff906 	br	13ef8 <__alt_data_end+0xff013ef8>
   13f14:	a5c00115 	stw	r23,4(r20)
   13f18:	003feb06 	br	13ec8 <__alt_data_end+0xff013ec8>
   13f1c:	89000017 	ldw	r4,0(r17)
   13f20:	183ee83a 	callr	r3
   13f24:	003ff406 	br	13ef8 <__alt_data_end+0xff013ef8>
   13f28:	a0800017 	ldw	r2,0(r20)
   13f2c:	a027883a 	mov	r19,r20
   13f30:	1029883a 	mov	r20,r2
   13f34:	003fb606 	br	13e10 <__alt_data_end+0xff013e10>
   13f38:	0005883a 	mov	r2,zero
   13f3c:	003ffb06 	br	13f2c <__alt_data_end+0xff013f2c>

00013f40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13f40:	defffd04 	addi	sp,sp,-12
   13f44:	df000215 	stw	fp,8(sp)
   13f48:	df000204 	addi	fp,sp,8
   13f4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13f50:	0001883a 	nop
   13f54:	e0bfff17 	ldw	r2,-4(fp)
   13f58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13f5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13f60:	10000226 	beq	r2,zero,13f6c <_exit+0x2c>
    ALT_SIM_FAIL();
   13f64:	002af070 	cmpltui	zero,zero,43969
   13f68:	00000106 	br	13f70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13f6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13f70:	003fff06 	br	13f70 <__alt_data_end+0xff013f70>
