
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011ccc memsz 0x00011ccc flags r-x
    LOAD off    0x00012cec vaddr 0x00011cec paddr 0x000138d8 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x000154c4 vaddr 0x000154c4 paddr 0x000154c4 align 2**12
         filesz 0x00000000 memsz 0x000001bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000112ec  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00011530  00011530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00011cec  000138d8  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001bc  000154c4  000154c4  000154c4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015680  00015680  000148d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000148d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001070  00000000  00000000  00014900  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026c0e  00000000  00000000  00015970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009db1  00000000  00000000  0003c57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c707  00000000  00000000  0004632f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002700  00000000  00000000  00052a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e95  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001950c  00000000  00000000  00058fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000724dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001968  00000000  00000000  00072540  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077afe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00077b01  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00077b0d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00077b0e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00077b0f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00077b13  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00077b17  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00077b1b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00077b24  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00077b2d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00077b36  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00077b41  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00077b79  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007752e  00000000  00000000  0007d651  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011530 l    d  .rodata	00000000 .rodata
00011cec l    d  .rwdata	00000000 .rwdata
000154c4 l    d  .bss	00000000 .bss
00015680 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011b3a l     O .rodata	00000010 zeroes.4404
0000599c l     F .text	000000bc __sbprintf
00011b4a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005bac l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000076dc l     F .text	00000008 __fp_unlock
000076f0 l     F .text	0000019c __sinit.part.1
0000788c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000121f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012638 l     O .rwdata	00000020 lc_ctype_charset
00012618 l     O .rwdata	00000020 lc_message_charset
00012658 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011b7c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a428 l     F .text	000000fc __sprint_r.part.0
00011cb0 l     O .rodata	00000010 blanks.4348
00011ca0 l     O .rodata	00000010 zeroes.4349
0000b9b4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000eac8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ebd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ec00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ecec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000edcc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000eeb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f08c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000138c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f43c l     F .text	00000034 alt_dev_reg
00012838 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f748 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f954 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ff8c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000108d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010a18 l     F .text	0000003c alt_get_errno
00010a54 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015554 g     O .bss	00000004 alt_instruction_exception_handler
00009ac0 g     F .text	00000074 _mprec_log10
00009bac g     F .text	0000008c __any_on
0000bf50 g     F .text	00000054 _isatty_r
00011b88 g     O .rodata	00000028 __mprec_tinytens
0000efc8 g     F .text	0000007c alt_main
000035c8 g     F .text	000000c0 _puts_r
00015580 g     O .bss	00000100 alt_irq
0000bfa4 g     F .text	00000060 _lseek_r
000119c4 g     O .rodata	00000009 gy_array
000138d8 g       *ABS*	00000000 __flash_rwdata_start
0000d700 g     F .text	00000088 .hidden __eqdf2
00015680 g       *ABS*	00000000 __alt_heap_start
0000358c g     F .text	0000003c printf
0000c1bc g     F .text	0000009c _wcrtomb_r
0000a2e8 g     F .text	0000005c __sseek
00007a2c g     F .text	00000010 __sinit
0000c064 g     F .text	00000140 __swbuf_r
000084f4 g     F .text	0000007c _setlocale_r
00007894 g     F .text	00000068 __sfmoreglue
0000f068 g     F .text	00000024 __malloc_unlock
00000a50 g     F .text	00000014 LCD_Write_Command
000154e4 g     O .bss	00000004 sobel_width
000154e0 g     O .bss	00000004 start_all
00001b8c g     F .text	00000194 sobel_complete_sub
00015544 g     O .bss	00000004 altera_avalon_timer_ts_freq
000089b8 g     F .text	0000015c memmove
00000a64 g     F .text	00000014 LCD_Write_Data
00007a14 g     F .text	00000018 _cleanup
00015504 g     O .bss	00000004 end_sobel
00008c3c g     F .text	000000a8 _Balloc
00001d30 g     F .text	00000080 sobel_all_init
0000d788 g     F .text	000000dc .hidden __gtdf2
00010e10 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000bef4 g     F .text	0000005c _fstat_r
00015524 g     O .bss	00000004 errno
0000a264 g     F .text	00000008 __seofread
00015538 g     O .bss	00000004 alt_argv
0001b898 g       *ABS*	00000000 _gp
0000f2d8 g     F .text	00000030 usleep
00015514 g     O .bss	00000004 array_width
00000668 g     F .text	00000074 cam_set_image_pointer
000126b8 g     O .rwdata	00000180 alt_fd_list
00001db0 g     F .text	000001c8 sobel_all_complete
00002160 g     F .text	00000010 vga_set_pointer
00010e34 g     F .text	00000090 alt_find_dev
00008870 g     F .text	00000148 memcpy
000076e4 g     F .text	0000000c _cleanup_r
0000e9ec g     F .text	000000dc .hidden __floatsidf
0001099c g     F .text	0000007c alt_io_redirect
000154dc g     O .bss	00000004 end_all
0000d864 g     F .text	000000f4 .hidden __ltdf2
00011530 g       *ABS*	00000000 __DTOR_END__
00003688 g     F .text	00000014 puts
00011100 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a19c g     F .text	00000074 __fpclassifyd
00009a1c g     F .text	000000a4 __ratio
0000b998 g     F .text	0000001c __vfiprintf_internal
0000fb4c g     F .text	0000021c altera_avalon_jtag_uart_read
00002d28 g     F .text	00000014 malloc
0000355c g     F .text	00000030 _printf_r
000008a4 g     F .text	00000008 get_grayscale_picture
00002278 g     F .text	00000064 .hidden __udivsi3
00011590 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000ed28 g     F .text	000000a4 isatty
00011bd8 g     O .rodata	000000c8 __mprec_tens
00008570 g     F .text	0000000c __locale_charset
00011070 g     F .text	00000090 alt_icache_flush
00015520 g     O .bss	00000004 __malloc_top_pad
000138a8 g     O .rwdata	00000004 __mb_cur_max
000085a0 g     F .text	0000000c _localeconv_r
00001424 g     F .text	00000140 sobel_x
00009048 g     F .text	0000003c __i2b
00007eb0 g     F .text	000004bc __sfvwrite_r
00000a78 g     F .text	00000414 init_LCD
0000369c g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000c004 g     F .text	00000060 _read_r
000154e8 g     O .bss	00000004 sobel_result
000138c0 g     O .rwdata	00000004 alt_max_fd
0000bbe8 g     F .text	000000f0 _fclose_r
000076ac g     F .text	00000030 fflush
0001551c g     O .bss	00000004 __malloc_max_sbrked_mem
000154cc g     O .bss	00000004 grayscale_array
0000ce54 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
000097c4 g     F .text	0000010c __b2d
0000c91c g     F .text	00000538 .hidden __umoddi3
0000eef4 g     F .text	000000d4 lseek
0000096c g     F .text	0000008c i2c_short_read
000138a0 g     O .rwdata	00000004 _global_impure_ptr
00009c38 g     F .text	00000564 _realloc_r
00015680 g       *ABS*	00000000 __bss_end
000107e8 g     F .text	000000f0 alt_iic_isr_register
00010d08 g     F .text	00000108 alt_tick
0000c3a4 g     F .text	00000578 .hidden __udivdi3
0000be50 g     F .text	00000024 _fputwc_r
00011bb0 g     O .rodata	00000028 __mprec_bigtens
00008e2c g     F .text	00000104 __s2b
00002c1c g     F .text	000000a8 .hidden __floatunsidf
00009504 g     F .text	00000060 __mcmp
00007a4c g     F .text	00000018 __fp_lock_all
0001079c g     F .text	0000004c alt_ic_irq_enabled
000154c4 g     O .bss	00000004 grayscape_height
00010c6c g     F .text	0000009c alt_alarm_stop
00015548 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012690 g     O .rwdata	00000028 alt_dev_null
00000f18 g     F .text	00000078 transfer_LCD_with_dma
00001a14 g     F .text	00000178 sobel_complete
0001041c g     F .text	00000048 alt_dcache_flush_all
00008f30 g     F .text	00000068 __hi0bits
0000e96c g     F .text	00000080 .hidden __fixdfsi
000138d8 g       *ABS*	00000000 __ram_rwdata_end
000138b8 g     O .rwdata	00000008 alt_dev_list
0000f344 g     F .text	000000f8 write
00010178 g     F .text	00000020 alt_timestamp_freq
00011cec g       *ABS*	00000000 __ram_rodata_end
0000ec3c g     F .text	000000b0 fstat
0000d864 g     F .text	000000f4 .hidden __ledf2
0000927c g     F .text	00000140 __pow5mult
0000a53c g     F .text	0000145c ___vfiprintf_internal_r
00015530 g     O .bss	00000004 __nlocale_changed
000022dc g     F .text	00000058 .hidden __umodsi3
00000844 g     F .text	00000050 conv_grayscale_partial
000007f4 g     F .text	00000050 conv_grayscale_init
00001d20 g     F .text	00000008 GetSobel_rgb
00015680 g       *ABS*	00000000 end
00001d28 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
000017f8 g     F .text	00000168 sobel_y_with_rgb
0000f688 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00011530 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010004 g     F .text	0000007c alt_avalon_timer_sc_init
00002cc4 g     F .text	00000064 .hidden __clzsi2
0000fd68 g     F .text	00000224 altera_avalon_jtag_uart_write
00007a3c g     F .text	00000004 __sfp_lock_acquire
0000878c g     F .text	000000e4 memchr
00003788 g     F .text	000021f8 ___vfprintf_internal_r
00007ba0 g     F .text	00000310 _free_r
0000857c g     F .text	00000010 __locale_mb_cur_max
000016e0 g     F .text	00000118 sobel_y
000116b8 g     O .rodata	00000140 noise_reduction_reg_settings_array
0001137c g     F .text	00000180 __call_exitprocs
0001552c g     O .bss	00000004 __mlocale_changed
00013898 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
000154fc g     O .bss	00000004 end_conv_grayscale
0001554c g     O .bss	00000004 _alt_tick_rate
000093bc g     F .text	00000148 __lshift
00015550 g     O .bss	00000004 _alt_nticks
0000f0c8 g     F .text	000000fc read
0000f4a8 g     F .text	0000007c alt_sys_init
00001564 g     F .text	0000017c sobel_x_with_rgb
00011264 g     F .text	00000118 __register_exitproc
00009084 g     F .text	000001f8 __multiply
0000f9f4 g     F .text	00000068 altera_avalon_jtag_uart_close
00011cec g       *ABS*	00000000 __ram_rwdata_start
00011530 g       *ABS*	00000000 __ram_rodata_start
00015558 g     O .bss	00000028 __malloc_current_mallinfo
000098d0 g     F .text	0000014c __d2b
000154ec g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
00001f78 g     F .text	000001e0 sobel_all_partial
0000f524 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001270 g     F .text	000000f8 init_sobel_arrays
00010fcc g     F .text	000000a4 alt_get_fd
000102c4 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000bad0 g     F .text	00000054 _close_r
000111e8 g     F .text	0000007c memcmp
0000f5e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015680 g       *ABS*	00000000 __alt_stack_base
0000f634 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005a58 g     F .text	00000154 __swsetup_r
00002334 g     F .text	000008e8 .hidden __divdf3
000078fc g     F .text	00000118 __sfp
00009b34 g     F .text	00000078 __copybits
00011dec g     O .rwdata	00000408 __malloc_av_
00007a48 g     F .text	00000004 __sinit_lock_release
0000d958 g     F .text	00000718 .hidden __muldf3
0000a210 g     F .text	00000054 __sread
00010ec4 g     F .text	00000108 alt_find_file
000104a0 g     F .text	000000a4 alt_dev_llist_insert
0000f044 g     F .text	00000024 __malloc_lock
0000f228 g     F .text	000000b0 sbrk
00007650 g     F .text	0000005c _fflush_r
0000bb24 g     F .text	000000c4 _calloc_r
000154d8 g     O .bss	00000004 start_global
00011cec g     O .rwdata	00000100 .hidden __divsi3_table
000154c4 g       *ABS*	00000000 __bss_start
00008b14 g     F .text	00000128 memset
00000f90 g     F .text	000002e0 main
0001553c g     O .bss	00000004 alt_envp
00015518 g     O .bss	00000004 __malloc_max_total_mem
00000894 g     F .text	00000008 get_grayscale_width
0000f584 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c1a4 g     F .text	00000018 __swbuf
000154f0 g     O .bss	00000004 sobel_x_result
0000a344 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000bcd8 g     F .text	00000014 fclose
0001550c g     O .bss	00000004 size
00010080 g     F .text	00000078 alt_timestamp_start
00005dac g     F .text	00001688 _dtoa_r
00002d50 g     F .text	0000080c _malloc_r
0000c318 g     F .text	00000030 __ascii_wctomb
000138c4 g     O .rwdata	00000004 alt_errno
0000836c g     F .text	000000c4 _fwalk
00015510 g     O .bss	00000004 array_height
00015508 g     O .bss	00000004 start_sobel
00002180 g     F .text	00000084 .hidden __divsi3
00007a7c g     F .text	00000124 _malloc_trim_r
00011530 g       *ABS*	00000000 __CTOR_END__
000154c8 g     O .bss	00000004 grayscale_width
0000a34c g     F .text	000000dc strcmp
00000e8c g     F .text	0000008c transfer_LCD_no_dma
00011530 g       *ABS*	00000000 __flash_rodata_start
00011530 g       *ABS*	00000000 __DTOR_LIST__
0000d700 g     F .text	00000088 .hidden __nedf2
000117f8 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f470 g     F .text	00000038 alt_irq_init
0000f1c4 g     F .text	00000064 alt_release_fd
000008c4 g     F .text	000000a8 i2c_auto_detect
000119f7 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00015528 g     O .bss	00000004 _PathLocale
000008ac g     F .text	00000018 i2c_busy_wait
0001119c g     F .text	00000014 atexit
0000ba70 g     F .text	00000060 _write_r
000085ac g     F .text	00000018 setlocale
000138a4 g     O .rwdata	00000004 _impure_ptr
00015534 g     O .bss	00000004 alt_argc
00007434 g     F .text	0000021c __sflush_r
00015540 g     O .bss	00000004 altera_avalon_timer_ts_base
000105a4 g     F .text	00000060 _do_dtors
00008598 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009760 g     F .text	00000064 __ulp
00007a64 g     F .text	00000018 __fp_unlock_all
000138b0 g     O .rwdata	00000008 alt_fs_list
000154f4 g     O .bss	00000004 sobel_y_result
000009f8 g     F .text	00000058 i2c_short_write
00015500 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
000154d0 g     O .bss	00000002 LCD_height
000085c4 g     F .text	0000000c localeconv
000100f8 g     F .text	00000080 alt_timestamp
00002170 g     F .text	00000010 vga_set_swap
00010638 g     F .text	00000050 alt_ic_isr_register
00001960 g     F .text	000000b4 sobel_threshold
000138d8 g       *ABS*	00000000 _edata
00015680 g       *ABS*	00000000 _end
0000bcec g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fa5c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000119cd g     O .rodata	00000009 gx_array
00010710 g     F .text	0000008c alt_ic_irq_disable
0000a26c g     F .text	0000007c __swrite
0001389c g     O .rwdata	00000004 __malloc_trim_threshold
000154d2 g     O .bss	00000002 LCD_width
00000774 g     F .text	00000080 conv_grayscale
0000858c g     F .text	0000000c __locale_msgcharset
000111b0 g     F .text	00000038 exit
00008430 g     F .text	000000c4 _fwalk_reent
00009564 g     F .text	000001fc __mdiff
00002204 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007a40 g     F .text	00000004 __sfp_lock_release
0000089c g     F .text	00000008 get_grayscale_height
000114fc g     F .text	00000034 _exit
00001368 g     F .text	000000bc sobel_mac
00010198 g     F .text	0000012c alt_alarm_start
000085d0 g     F .text	000001bc __smakebuf_r
000154f8 g     O .bss	00000004 sobel_rgb565
000036f0 g     F .text	00000098 strlen
00010b18 g     F .text	00000154 open
0000d788 g     F .text	000000dc .hidden __gedf2
000138ac g     O .rwdata	00000004 __wctomb
00002158 g     F .text	00000008 GetSobelAllResult
0000a524 g     F .text	00000018 __sprint_r
00010604 g     F .text	00000034 alt_icache_flush_all
000138cc g     O .rwdata	00000004 alt_priority_mask
00010688 g     F .text	00000088 alt_ic_irq_enable
00005980 g     F .text	0000001c __vfprintf_internal
0000c348 g     F .text	0000005c _wctomb_r
0000e070 g     F .text	000008fc .hidden __subdf3
00008f98 g     F .text	000000b0 __lo0bits
000138d0 g     O .rwdata	00000008 alt_alarm_list
00010544 g     F .text	00000060 _do_ctors
0000c258 g     F .text	000000c0 wcrtomb
0000eb04 g     F .text	000000d0 close
000154d4 g     O .bss	00000004 end_global
0000ee34 g     F .text	00000084 alt_load
0000be74 g     F .text	00000080 fputwc
00002d3c g     F .text	00000014 free
00007a44 g     F .text	00000004 __sinit_lock_acquire
00008d0c g     F .text	00000120 __multadd
00008ce4 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10956004 	addi	r2,r2,21888
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10956004 	addi	r2,r2,21888
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72f17 	ldw	r2,-25412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72f17 	ldw	r2,-25412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ae2614 	ori	gp,gp,47256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10953114 	ori	r2,r2,21700

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d5a014 	ori	r3,r3,22144

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000ee340 	call	ee34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000efc80 	call	efc8 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009f80 	call	9f8 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009f80 	call	9f8 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009f80 	call	9f8 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	8405fe04 	addi	r16,r16,6136
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009f80 	call	9f8 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009f80 	call	9f8 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	8405ae04 	addi	r16,r16,5816
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009f80 	call	9f8 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009f80 	call	9f8 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009f80 	call	9f8 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009f80 	call	9f8 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009f80 	call	9f8 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009f80 	call	9f8 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84056404 	addi	r16,r16,5520
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009f80 	call	9f8 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009f80 	call	9f8 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009f80 	call	9f8 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009f81 	jmpi	9f8 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	21054c04 	addi	r4,r4,5424
     620:	297fffcc 	andi	r5,r5,65535
     624:	000358c0 	call	358c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	21055404 	addi	r4,r4,5456
     63c:	297fffcc 	andi	r5,r5,65535
     640:	000358c0 	call	358c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	21055c04 	addi	r4,r4,5488
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	000358c1 	jmpi	358c <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int pos, size = width*height;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffd04 	addi	sp,sp,-12
     77c:	dc400115 	stw	r17,4(sp)
     780:	dc000015 	stw	r16,0(sp)
     784:	dfc00215 	stw	ra,8(sp)
	int pos, size = width*height;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
     788:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     78c:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     790:	2021883a 	mov	r16,r4
	int pos, size = width*height;
     794:	29a3383a 	mul	r17,r5,r6
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     798:	10000226 	beq	r2,zero,7a4 <conv_grayscale+0x30>
		free(grayscale_array);
     79c:	1009883a 	mov	r4,r2
     7a0:	0002d3c0 	call	2d3c <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7a4:	8809883a 	mov	r4,r17
     7a8:	0002d280 	call	2d28 <malloc>
     7ac:	d0a70d15 	stw	r2,-25548(gp)
	for (pos = 0 ; pos < size ; pos++) {
     7b0:	04400b0e 	bge	zero,r17,7e0 <conv_grayscale+0x6c>
     7b4:	8009883a 	mov	r4,r16
     7b8:	0007883a 	mov	r3,zero
     7bc:	00000106 	br	7c4 <conv_grayscale+0x50>
     7c0:	d0a70d17 	ldw	r2,-25548(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     7c4:	21c0000b 	ldhu	r7,0(r4)
     7c8:	380fc032 	custom	0,r7,r7,zero
     7cc:	10c5883a 	add	r2,r2,r3
     7d0:	11c00005 	stb	r7,0(r2)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (pos = 0 ; pos < size ; pos++) {
     7d4:	18c00044 	addi	r3,r3,1
     7d8:	21000084 	addi	r4,r4,2
     7dc:	88fff81e 	bne	r17,r3,7c0 <__alt_data_end+0xff0007c0>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}
     7e0:	dfc00217 	ldw	ra,8(sp)
     7e4:	dc400117 	ldw	r17,4(sp)
     7e8:	dc000017 	ldw	r16,0(sp)
     7ec:	dec00304 	addi	sp,sp,12
     7f0:	f800283a 	ret

000007f4 <conv_grayscale_init>:

void conv_grayscale_init(int width, int height){
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7f4:	d0a70d17 	ldw	r2,-25548(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}

void conv_grayscale_init(int width, int height){
     7f8:	defffd04 	addi	sp,sp,-12
     7fc:	dc400115 	stw	r17,4(sp)
     800:	dc000015 	stw	r16,0(sp)
     804:	dfc00215 	stw	ra,8(sp)
		grayscale_width = width;
     808:	d1270c15 	stw	r4,-25552(gp)
		grayscape_height = height;
     80c:	d1670b15 	stw	r5,-25556(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}

void conv_grayscale_init(int width, int height){
     810:	2023883a 	mov	r17,r4
     814:	2821883a 	mov	r16,r5
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     818:	10000226 	beq	r2,zero,824 <conv_grayscale_init+0x30>
			free(grayscale_array);
     81c:	1009883a 	mov	r4,r2
     820:	0002d3c0 	call	2d3c <free>
		grayscale_array = (unsigned char *) malloc(width* height);
     824:	8c09383a 	mul	r4,r17,r16
     828:	0002d280 	call	2d28 <malloc>
     82c:	d0a70d15 	stw	r2,-25548(gp)
}
     830:	dfc00217 	ldw	ra,8(sp)
     834:	dc400117 	ldw	r17,4(sp)
     838:	dc000017 	ldw	r16,0(sp)
     83c:	dec00304 	addi	sp,sp,12
     840:	f800283a 	ret

00000844 <conv_grayscale_partial>:
void conv_grayscale_partial(void *picture, int from, int size){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
     844:	298d883a 	add	r6,r5,r6
     848:	2980110e 	bge	r5,r6,890 <conv_grayscale_partial+0x4c>
     84c:	d0a70c17 	ldw	r2,-25552(gp)
		for (x = 0 ; x < grayscale_width ; x++) {
     850:	0007883a 	mov	r3,zero
     854:	00800c0e 	bge	zero,r2,888 <conv_grayscale_partial+0x44>
			pos = y*grayscale_width+x;
			//IOWR_8DIRECT(grayscale_array,y*width+x,gray);
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     858:	2885383a 	mul	r2,r5,r2
     85c:	d2270d17 	ldw	r8,-25548(gp)
     860:	10c5883a 	add	r2,r2,r3
     864:	108f883a 	add	r7,r2,r2
     868:	21cf883a 	add	r7,r4,r7
     86c:	39c0000b 	ldhu	r7,0(r7)
     870:	4085883a 	add	r2,r8,r2
     874:	380fc032 	custom	0,r7,r7,zero
     878:	11c00005 	stb	r7,0(r2)
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
		for (x = 0 ; x < grayscale_width ; x++) {
     87c:	d0a70c17 	ldw	r2,-25552(gp)
     880:	18c00044 	addi	r3,r3,1
     884:	18bff416 	blt	r3,r2,858 <__alt_data_end+0xff000858>
void conv_grayscale_partial(void *picture, int from, int size){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
     888:	29400044 	addi	r5,r5,1
     88c:	29bff01e 	bne	r5,r6,850 <__alt_data_end+0xff000850>
     890:	f800283a 	ret

00000894 <get_grayscale_width>:
}


int get_grayscale_width() {
	return grayscale_width;
}
     894:	d0a70c17 	ldw	r2,-25552(gp)
     898:	f800283a 	ret

0000089c <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     89c:	d0a70b17 	ldw	r2,-25556(gp)
     8a0:	f800283a 	ret

000008a4 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8a4:	d0a70d17 	ldw	r2,-25548(gp)
     8a8:	f800283a 	ret

000008ac <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8ac:	00c04034 	movhi	r3,256
     8b0:	18c42704 	addi	r3,r3,4252
     8b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8b8:	108000cc 	andi	r2,r2,3
     8bc:	103ffd1e 	bne	r2,zero,8b4 <__alt_data_end+0xff0008b4>
}
     8c0:	f800283a 	ret

000008c4 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	01004034 	movhi	r4,256
     8c8:	21042704 	addi	r4,r4,4252
     8cc:	00c04034 	movhi	r3,256
     8d0:	18c42704 	addi	r3,r3,4252
     8d4:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d8:	108000cc 	andi	r2,r2,3
     8dc:	103ffb1e 	bne	r2,zero,8cc <__alt_data_end+0xff0008cc>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8e0:	00800104 	movi	r2,4
     8e4:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8e8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ec:	108000cc 	andi	r2,r2,3
     8f0:	103ffd1e 	bne	r2,zero,8e8 <__alt_data_end+0xff0008e8>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8f4:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8f8:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8fc:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     900:	dfc00315 	stw	ra,12(sp)
     904:	dc800215 	stw	r18,8(sp)
     908:	dc400115 	stw	r17,4(sp)
     90c:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     910:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     914:	01000074 	movhi	r4,1
     918:	21064404 	addi	r4,r4,6416
     91c:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     920:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     924:	000358c0 	call	358c <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     928:	04800a0e 	bge	zero,r18,954 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     92c:	04404034 	movhi	r17,256
     930:	8c442404 	addi	r17,r17,4240
     934:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     938:	89800037 	ldwio	r6,0(r17)
     93c:	01000074 	movhi	r4,1
     940:	800b883a 	mov	r5,r16
     944:	21064d04 	addi	r4,r4,6452
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     948:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     94c:	000358c0 	call	358c <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     950:	943ff81e 	bne	r18,r16,934 <__alt_data_end+0xff000934>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     954:	dfc00317 	ldw	ra,12(sp)
     958:	dc800217 	ldw	r18,8(sp)
     95c:	dc400117 	ldw	r17,4(sp)
     960:	dc000017 	ldw	r16,0(sp)
     964:	dec00404 	addi	sp,sp,16
     968:	f800283a 	ret

0000096c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     96c:	01804034 	movhi	r6,256
     970:	31842704 	addi	r6,r6,4252
     974:	00c04034 	movhi	r3,256
     978:	18c42704 	addi	r3,r3,4252
     97c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     980:	108000cc 	andi	r2,r2,3
     984:	103ffb1e 	bne	r2,zero,974 <__alt_data_end+0xff000974>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     988:	00804034 	movhi	r2,256
     98c:	21003fcc 	andi	r4,r4,255
     990:	10842404 	addi	r2,r2,4240
     994:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     998:	00804034 	movhi	r2,256
     99c:	10842504 	addi	r2,r2,4244
     9a0:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9a4:	008010c4 	movi	r2,67
     9a8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9ac:	180b883a 	mov	r5,r3
     9b0:	00c04034 	movhi	r3,256
     9b4:	18c42704 	addi	r3,r3,4252
     9b8:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9bc:	108000cc 	andi	r2,r2,3
     9c0:	103ffb1e 	bne	r2,zero,9b0 <__alt_data_end+0xff0009b0>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9c4:	00804034 	movhi	r2,256
     9c8:	21000044 	addi	r4,r4,1
     9cc:	10842404 	addi	r2,r2,4240
     9d0:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d4:	00800884 	movi	r2,34
     9d8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9dc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e0:	108000cc 	andi	r2,r2,3
     9e4:	103ffd1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9e8:	00804034 	movhi	r2,256
     9ec:	10842604 	addi	r2,r2,4248
}
     9f0:	10800037 	ldwio	r2,0(r2)
     9f4:	f800283a 	ret

000009f8 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9f8:	01c04034 	movhi	r7,256
     9fc:	39c42704 	addi	r7,r7,4252
     a00:	00c04034 	movhi	r3,256
     a04:	18c42704 	addi	r3,r3,4252
     a08:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffb1e 	bne	r2,zero,a00 <__alt_data_end+0xff000a00>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a14:	00804034 	movhi	r2,256
     a18:	10842404 	addi	r2,r2,4240
     a1c:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a20:	00804034 	movhi	r2,256
     a24:	10842504 	addi	r2,r2,4244
     a28:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a2c:	00804034 	movhi	r2,256
     a30:	10842604 	addi	r2,r2,4248
     a34:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a38:	00801084 	movi	r2,66
     a3c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a40:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a44:	108000cc 	andi	r2,r2,3
     a48:	103ffd1e 	bne	r2,zero,a40 <__alt_data_end+0xff000a40>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a4c:	f800283a 	ret

00000a50 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a50:	00804034 	movhi	r2,256
     a54:	10841804 	addi	r2,r2,4192
     a58:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a5c:	01000284 	movi	r4,10
     a60:	000f2d81 	jmpi	f2d8 <usleep>

00000a64 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	00804034 	movhi	r2,256
     a68:	10841904 	addi	r2,r2,4196
     a6c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a70:	01000284 	movi	r4,10
     a74:	000f2d81 	jmpi	f2d8 <usleep>

00000a78 <init_LCD>:
}


void init_LCD() {
     a78:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a7c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a80:	dd400515 	stw	r21,20(sp)
     a84:	dfc00815 	stw	ra,32(sp)
     a88:	ddc00715 	stw	r23,28(sp)
     a8c:	dd800615 	stw	r22,24(sp)
     a90:	dd000415 	stw	r20,16(sp)
     a94:	dcc00315 	stw	r19,12(sp)
     a98:	dc800215 	stw	r18,8(sp)
     a9c:	dc400115 	stw	r17,4(sp)
     aa0:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     aa4:	05400084 	movi	r21,2
     aa8:	10841a04 	addi	r2,r2,4200
     aac:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ab0:	04804034 	movhi	r18,256
     ab4:	94841804 	addi	r18,r18,4192
     ab8:	00800a04 	movi	r2,40
     abc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ac0:	04000284 	movi	r16,10
     ac4:	8009883a 	mov	r4,r16
     ac8:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     acc:	05c00444 	movi	r23,17
     ad0:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad8:	04404034 	movhi	r17,256
     adc:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ae0:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae4:	0027883a 	mov	r19,zero
     ae8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af4:	008032c4 	movi	r2,203
     af8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	00800e44 	movi	r2,57
     b08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b14:	00800b04 	movi	r2,44
     b18:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b28:	8009883a 	mov	r4,r16
     b2c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b30:	00800d04 	movi	r2,52
     b34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b4c:	008033c4 	movi	r2,207
     b50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b68:	05802044 	movi	r22,129
     b6c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	00800c04 	movi	r2,48
     b7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b88:	00803a04 	movi	r2,232
     b8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b98:	00802144 	movi	r2,133
     b9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba0:	8009883a 	mov	r4,r16
     ba4:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba8:	05000044 	movi	r20,1
     bac:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb8:	00801e44 	movi	r2,121
     bbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bc8:	00803a84 	movi	r2,234
     bcc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00801904 	movi	r2,100
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	008000c4 	movi	r2,3
     c04:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	00800484 	movi	r2,18
     c14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c18:	8009883a 	mov	r4,r16
     c1c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c20:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c2c:	00803dc4 	movi	r2,247
     c30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800804 	movi	r2,32
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c4c:	00803004 	movi	r2,192
     c50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c5c:	05800984 	movi	r22,38
     c60:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c6c:	00800104 	movi	r2,4
     c70:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	00803044 	movi	r2,193
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c98:	00803144 	movi	r2,197
     c9c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca8:	00800d44 	movi	r2,53
     cac:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	00800f84 	movi	r2,62
     cbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cc0:	8009883a 	mov	r4,r16
     cc4:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc8:	008031c4 	movi	r2,199
     ccc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	00802f84 	movi	r2,190
     cdc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ce8:	00802c44 	movi	r2,177
     cec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf0:	8009883a 	mov	r4,r16
     cf4:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00800404 	movi	r2,16
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00800e84 	movi	r2,58
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	00801544 	movi	r2,85
     d28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d34:	00802d84 	movi	r2,182
     d38:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d3c:	8009883a 	mov	r4,r16
     d40:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d44:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	00802884 	movi	r2,162
     d54:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d60:	00803c84 	movi	r2,242
     d64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d74:	8009883a 	mov	r4,r16
     d78:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d7c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d80:	8009883a 	mov	r4,r16
     d84:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d88:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d8c:	8009883a 	mov	r4,r16
     d90:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d94:	00800d84 	movi	r2,54
     d98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d9c:	8009883a 	mov	r4,r16
     da0:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da8:	8009883a 	mov	r4,r16
     dac:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     db0:	00800a84 	movi	r2,42
     db4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dc4:	8009883a 	mov	r4,r16
     dc8:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dcc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd0:	8009883a 	mov	r4,r16
     dd4:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ddc:	8009883a 	mov	r4,r16
     de0:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     de4:	00803bc4 	movi	r2,239
     de8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dec:	8009883a 	mov	r4,r16
     df0:	000f2d80 	call	f2d8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     df4:	00800ac4 	movi	r2,43
     df8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000f2d80 	call	f2d8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e08:	8009883a 	mov	r4,r16
     e0c:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e14:	8009883a 	mov	r4,r16
     e18:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e1c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e20:	8009883a 	mov	r4,r16
     e24:	000f2d80 	call	f2d8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e28:	00800fc4 	movi	r2,63
     e2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e30:	8009883a 	mov	r4,r16
     e34:	000f2d80 	call	f2d8 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e38:	00c04034 	movhi	r3,256
     e3c:	00803c04 	movi	r2,240
     e40:	18c41d04 	addi	r3,r3,4212
     e44:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e48:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e4c:	00805004 	movi	r2,320
     e50:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e54:	00800a44 	movi	r2,41
     e58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e5c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e60:	dfc00817 	ldw	ra,32(sp)
     e64:	ddc00717 	ldw	r23,28(sp)
     e68:	dd800617 	ldw	r22,24(sp)
     e6c:	dd400517 	ldw	r21,20(sp)
     e70:	dd000417 	ldw	r20,16(sp)
     e74:	dcc00317 	ldw	r19,12(sp)
     e78:	dc800217 	ldw	r18,8(sp)
     e7c:	dc400117 	ldw	r17,4(sp)
     e80:	dc000017 	ldw	r16,0(sp)
     e84:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e88:	000f2d81 	jmpi	f2d8 <usleep>

00000e8c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e8c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e90:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e94:	dc000015 	stw	r16,0(sp)
     e98:	dfc00415 	stw	ra,16(sp)
     e9c:	dcc00315 	stw	r19,12(sp)
     ea0:	dc800215 	stw	r18,8(sp)
     ea4:	dc400115 	stw	r17,4(sp)
     ea8:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     eac:	10841e04 	addi	r2,r2,4216
     eb0:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb4:	00804034 	movhi	r2,256
     eb8:	10841804 	addi	r2,r2,4192
     ebc:	00c00b04 	movi	r3,44
     ec0:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ec4:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	000f2d80 	call	f2d8 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ed0:	90000a26 	beq	r18,zero,efc <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ed4:	04c04034 	movhi	r19,256
     ed8:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     edc:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ee0:	8080000b 	ldhu	r2,0(r16)
     ee4:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ee8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eec:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     ef0:	000f2d80 	call	f2d8 <usleep>
     ef4:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef8:	8cbff91e 	bne	r17,r18,ee0 <__alt_data_end+0xff000ee0>
		LCD_Write_Data(data_array[pixels]);
}
     efc:	dfc00417 	ldw	ra,16(sp)
     f00:	dcc00317 	ldw	r19,12(sp)
     f04:	dc800217 	ldw	r18,8(sp)
     f08:	dc400117 	ldw	r17,4(sp)
     f0c:	dc000017 	ldw	r16,0(sp)
     f10:	dec00504 	addi	sp,sp,20
     f14:	f800283a 	ret

00000f18 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f18:	d0a70e0b 	ldhu	r2,-25544(gp)
     f1c:	3080010e 	bge	r6,r2,f24 <transfer_LCD_with_dma+0xc>
     f20:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f24:	d0e70e8b 	ldhu	r3,-25542(gp)
     f28:	28c0010e 	bge	r5,r3,f30 <transfer_LCD_with_dma+0x18>
     f2c:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f30:	01804034 	movhi	r6,256
     f34:	31841e04 	addi	r6,r6,4216
     f38:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f3c:	01404034 	movhi	r5,256
     f40:	29441b04 	addi	r5,r5,4204
     f44:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f48:	18ffffcc 	andi	r3,r3,65535
     f4c:	10bfffcc 	andi	r2,r2,65535
     f50:	1885383a 	mul	r2,r3,r2
     f54:	00c04034 	movhi	r3,256
     f58:	18c41c04 	addi	r3,r3,4208
     f5c:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f60:	39c03fcc 	andi	r7,r7,255
     f64:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f68:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f6c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f70:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f74:	38000326 	beq	r7,zero,f84 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f78:	00c04404 	movi	r3,272
     f7c:	10c0002d 	sthio	r3,0(r2)
     f80:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f84:	00c04004 	movi	r3,256
     f88:	10c0002d 	sthio	r3,0(r2)
     f8c:	f800283a 	ret

00000f90 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f90:	defff804 	addi	sp,sp,-32
     f94:	dfc00715 	stw	ra,28(sp)
     f98:	dd800615 	stw	r22,24(sp)
     f9c:	dd400515 	stw	r21,20(sp)
     fa0:	dd000415 	stw	r20,16(sp)
     fa4:	dcc00315 	stw	r19,12(sp)
     fa8:	dc800215 	stw	r18,8(sp)
     fac:	dc400115 	stw	r17,4(sp)
     fb0:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     fb4:	0000a780 	call	a78 <init_LCD>
  init_camera();
     fb8:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fbc:	01000604 	movi	r4,24
     fc0:	00021700 	call	2170 <vga_set_swap>
  printf("Hello from Nios II!\n");
     fc4:	01000074 	movhi	r4,1
     fc8:	21065604 	addi	r4,r4,6488
     fcc:	00036880 	call	3688 <puts>
  cam_get_profiling();
     fd0:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd4:	00005a80 	call	5a8 <cam_get_xsize>
     fd8:	1021883a 	mov	r16,r2
     fdc:	00005cc0 	call	5cc <cam_get_ysize>
     fe0:	10bfffcc 	andi	r2,r2,65535
     fe4:	813fffcc 	andi	r4,r16,65535
     fe8:	2089383a 	mul	r4,r4,r2
     fec:	05000074 	movhi	r20,1
     ff0:	a5073b04 	addi	r20,r20,7404
     ff4:	0002d280 	call	2d28 <malloc>
     ff8:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ffc:	00005a80 	call	5a8 <cam_get_xsize>
    1000:	1021883a 	mov	r16,r2
    1004:	00005cc0 	call	5cc <cam_get_ysize>
    1008:	10bfffcc 	andi	r2,r2,65535
    100c:	813fffcc 	andi	r4,r16,65535
    1010:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1014:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1018:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    101c:	0002d280 	call	2d28 <malloc>
    1020:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1024:	00005a80 	call	5a8 <cam_get_xsize>
    1028:	1021883a 	mov	r16,r2
    102c:	00005cc0 	call	5cc <cam_get_ysize>
    1030:	10bfffcc 	andi	r2,r2,65535
    1034:	813fffcc 	andi	r4,r16,65535
    1038:	2089383a 	mul	r4,r4,r2
    103c:	0002d280 	call	2d28 <malloc>
    1040:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1044:	00005a80 	call	5a8 <cam_get_xsize>
    1048:	1021883a 	mov	r16,r2
    104c:	00005cc0 	call	5cc <cam_get_ysize>
    1050:	10bfffcc 	andi	r2,r2,65535
    1054:	813fffcc 	andi	r4,r16,65535
    1058:	2089383a 	mul	r4,r4,r2
    105c:	0002d280 	call	2d28 <malloc>
  cam_set_image_pointer(0,buffer1);
    1060:	b00b883a 	mov	r5,r22
    1064:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1068:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    106c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1070:	a80b883a 	mov	r5,r21
    1074:	01000044 	movi	r4,1
    1078:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    107c:	880b883a 	mov	r5,r17
    1080:	01000084 	movi	r4,2
    1084:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1088:	800b883a 	mov	r5,r16
    108c:	010000c4 	movi	r4,3
    1090:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1094:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1098:	00005a80 	call	5a8 <cam_get_xsize>
    109c:	1021883a 	mov	r16,r2
    10a0:	00005cc0 	call	5cc <cam_get_ysize>
    10a4:	80ffffcc 	andi	r3,r16,65535
    10a8:	1806d07a 	srli	r3,r3,1
    10ac:	10bfffcc 	andi	r2,r2,65535
    10b0:	18a3383a 	mul	r17,r3,r2

  //init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
  //conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
  sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());
    10b4:	00005a80 	call	5a8 <cam_get_xsize>
    10b8:	1021883a 	mov	r16,r2
    10bc:	00005cc0 	call	5cc <cam_get_ysize>
    10c0:	813fffcc 	andi	r4,r16,65535
    10c4:	2008d07a 	srli	r4,r4,1
    10c8:	117fffcc 	andi	r5,r2,65535
    10cc:	0001d300 	call	1d30 <sobel_all_init>

  do {
	  if (new_image_available() != 0) {
    10d0:	00007340 	call	734 <new_image_available>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080201c 	xori	r2,r2,128
    10dc:	10bfe004 	addi	r2,r2,-128
    10e0:	103ffb26 	beq	r2,zero,10d0 <__alt_data_end+0xff0010d0>
		  if (current_image_valid()!=0) {
    10e4:	00006dc0 	call	6dc <current_image_valid>
    10e8:	10bfffcc 	andi	r2,r2,65535
    10ec:	10a0001c 	xori	r2,r2,32768
    10f0:	10a00004 	addi	r2,r2,-32768
    10f4:	103ff626 	beq	r2,zero,10d0 <__alt_data_end+0xff0010d0>

			  alt_timestamp_start();
    10f8:	00100800 	call	10080 <alt_timestamp_start>

			  start_global = alt_timestamp();
    10fc:	00100f80 	call	100f8 <alt_timestamp>
    1100:	d0a71015 	stw	r2,-25536(gp)
			  current_mode = DIPSW_get_value();
    1104:	00007600 	call	760 <DIPSW_get_value>
    1108:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    110c:	00006f00 	call	6f0 <current_image_pointer>
    1110:	102b883a 	mov	r21,r2
		      switch (mode) {
    1114:	808001cc 	andi	r2,r16,7
    1118:	1000361e 	bne	r2,zero,11f4 <main+0x264>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    111c:	00005a80 	call	5a8 <cam_get_xsize>
    1120:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    1124:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1128:	b17fffcc 	andi	r5,r22,65535
    112c:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1130:	84003fcc 	andi	r16,r16,255
    1134:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1138:	000f883a 	mov	r7,zero
    113c:	11bfffcc 	andi	r6,r2,65535
    1140:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1144:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1148:	0000f180 	call	f18 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    114c:	80004316 	blt	r16,zero,125c <main+0x2cc>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    1150:	00100f80 	call	100f8 <alt_timestamp>
    1154:	d0a70f15 	stw	r2,-25540(gp)
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1158:	d4271217 	ldw	r16,-25528(gp)
    115c:	d0a71117 	ldw	r2,-25532(gp)
    1160:	1421c83a 	sub	r16,r2,r16
    1164:	8444b03a 	or	r2,r16,r17
    1168:	90801d36 	bltu	r18,r2,11e0 <main+0x250>
    116c:	8004913a 	slli	r2,r16,4
    1170:	1444b03a 	or	r2,r2,r17
    1174:	1505883a 	add	r2,r2,r20
    1178:	11800003 	ldbu	r6,0(r2)
    117c:	01000074 	movhi	r4,1
    1180:	800b883a 	mov	r5,r16
    1184:	21065b04 	addi	r4,r4,6508
    1188:	000358c0 	call	358c <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    118c:	d0a71017 	ldw	r2,-25536(gp)
    1190:	d1270f17 	ldw	r4,-25540(gp)
    1194:	2089c83a 	sub	r4,r4,r2
    1198:	0002c1c0 	call	2c1c <__floatunsidf>
    119c:	01d06234 	movhi	r7,16776
    11a0:	39f5e104 	addi	r7,r7,-10364
    11a4:	1009883a 	mov	r4,r2
    11a8:	180b883a 	mov	r5,r3
    11ac:	000d883a 	mov	r6,zero
    11b0:	00023340 	call	2334 <__divdf3>
    11b4:	100d883a 	mov	r6,r2
    11b8:	180f883a 	mov	r7,r3
    11bc:	0009883a 	mov	r4,zero
    11c0:	014ffc34 	movhi	r5,16368
    11c4:	00023340 	call	2334 <__divdf3>
    11c8:	01000074 	movhi	r4,1
    11cc:	100b883a 	mov	r5,r2
    11d0:	180d883a 	mov	r6,r3
    11d4:	21066504 	addi	r4,r4,6548
    11d8:	000358c0 	call	358c <printf>
    11dc:	003fbc06 	br	10d0 <__alt_data_end+0xff0010d0>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    11e0:	880b883a 	mov	r5,r17
    11e4:	8009883a 	mov	r4,r16
    11e8:	00021800 	call	2180 <__divsi3>
    11ec:	100d883a 	mov	r6,r2
    11f0:	003fe206 	br	117c <__alt_data_end+0xff00117c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11f4:	00100f80 	call	100f8 <alt_timestamp>
		    	  	   sobel_complete_sub(grayscale, 348, 36);
						*/


		    	  	   //sobel_all_partial((void *)image, 0, cam_get_ysize());
		    	  	   sobel_all_complete((void *)image);
    11f8:	a809883a 	mov	r4,r21
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11fc:	d0a71215 	stw	r2,-25528(gp)
		    	  	   sobel_complete_sub(grayscale, 348, 36);
						*/


		    	  	   //sobel_all_partial((void *)image, 0, cam_get_ysize());
		    	  	   sobel_all_complete((void *)image);
    1200:	0001db00 	call	1db0 <sobel_all_complete>

                       end_all = alt_timestamp();
    1204:	00100f80 	call	100f8 <alt_timestamp>
    1208:	d0a71115 	stw	r2,-25532(gp)

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();
    120c:	00021580 	call	2158 <GetSobelAllResult>
    1210:	102d883a 	mov	r22,r2

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1214:	00005a80 	call	5a8 <cam_get_xsize>
    1218:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    121c:	00005cc0 	call	5cc <cam_get_ysize>
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1220:	a97fffcc 	andi	r5,r21,65535
    1224:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1228:	84003fcc 	andi	r16,r16,255
    122c:	8400201c 	xori	r16,r16,128
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1230:	01c00044 	movi	r7,1
    1234:	11bfffcc 	andi	r6,r2,65535
    1238:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    123c:	843fe004 	addi	r16,r16,-128
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1240:	0000f180 	call	f18 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1244:	803fc20e 	bge	r16,zero,1150 <__alt_data_end+0xff001150>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1248:	01000604 	movi	r4,24
    124c:	00021700 	call	2170 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1250:	b009883a 	mov	r4,r22
    1254:	00021600 	call	2160 <vga_set_pointer>
    1258:	003fbd06 	br	1150 <__alt_data_end+0xff001150>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    125c:	01000204 	movi	r4,8
    1260:	00021700 	call	2170 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1264:	a809883a 	mov	r4,r21
    1268:	00021600 	call	2160 <vga_set_pointer>
    126c:	003fb806 	br	1150 <__alt_data_end+0xff001150>

00001270 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1270:	defffd04 	addi	sp,sp,-12
    1274:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1278:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    127c:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1280:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1284:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1288:	21066904 	addi	r4,r4,6564
    128c:	280d883a 	mov	r6,r5
    1290:	800f883a 	mov	r7,r16
    1294:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1298:	dfc00215 	stw	ra,8(sp)
    129c:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    12a0:	d0e71315 	stw	r3,-25524(gp)
	sobel_height = height;
    12a4:	d0a71515 	stw	r2,-25516(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12a8:	000358c0 	call	358c <printf>
	if (sobel_x_result != NULL)
    12ac:	d1271617 	ldw	r4,-25512(gp)
    12b0:	20000126 	beq	r4,zero,12b8 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    12b4:	0002d3c0 	call	2d3c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12b8:	8423883a 	add	r17,r16,r16
    12bc:	8809883a 	mov	r4,r17
    12c0:	0002d280 	call	2d28 <malloc>
	if (sobel_y_result != NULL)
    12c4:	d1271717 	ldw	r4,-25508(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12c8:	d0a71615 	stw	r2,-25512(gp)
	if (sobel_y_result != NULL)
    12cc:	20000126 	beq	r4,zero,12d4 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    12d0:	0002d3c0 	call	2d3c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12d4:	8809883a 	mov	r4,r17
    12d8:	0002d280 	call	2d28 <malloc>
	if (sobel_result != NULL)
    12dc:	d1271417 	ldw	r4,-25520(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12e0:	d0a71715 	stw	r2,-25508(gp)
	if (sobel_result != NULL)
    12e4:	20000126 	beq	r4,zero,12ec <init_sobel_arrays+0x7c>
		free(sobel_result);
    12e8:	0002d3c0 	call	2d3c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12ec:	8009883a 	mov	r4,r16
    12f0:	0002d280 	call	2d28 <malloc>
	if (sobel_rgb565 != NULL)
    12f4:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12f8:	d0a71415 	stw	r2,-25520(gp)
	if (sobel_rgb565 != NULL)
    12fc:	20000126 	beq	r4,zero,1304 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    1300:	0002d3c0 	call	2d3c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1304:	8809883a 	mov	r4,r17
    1308:	0002d280 	call	2d28 <malloc>
    130c:	d0a71815 	stw	r2,-25504(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1310:	0005883a 	mov	r2,zero
    1314:	04000f0e 	bge	zero,r16,1354 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    1318:	d1a71617 	ldw	r6,-25512(gp)
		sobel_y_result[loop] = 0;
    131c:	d1671717 	ldw	r5,-25508(gp)
		sobel_result[loop] = 0;
    1320:	d1271417 	ldw	r4,-25520(gp)
    1324:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1328:	30cd883a 	add	r6,r6,r3
    132c:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    1330:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    1334:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1338:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    133c:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    1340:	d1271817 	ldw	r4,-25504(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1344:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1348:	20c7883a 	add	r3,r4,r3
    134c:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1350:	80bff11e 	bne	r16,r2,1318 <__alt_data_end+0xff001318>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1354:	dfc00217 	ldw	ra,8(sp)
    1358:	dc400117 	ldw	r17,4(sp)
    135c:	dc000017 	ldw	r16,0(sp)
    1360:	dec00304 	addi	sp,sp,12
    1364:	f800283a 	ret

00001368 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1368:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    136c:	31bfffc4 	addi	r6,r6,-1
    1370:	38c00047 	ldb	r3,1(r7)
    1374:	328d383a 	mul	r6,r6,r10
    1378:	3b8000c7 	ldb	r14,3(r7)
    137c:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1380:	5185883a 	add	r2,r10,r6
    1384:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1388:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    138c:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1390:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1394:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1398:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    139c:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a0:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13a4:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a8:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13ac:	49000043 	ldbu	r4,1(r9)
    13b0:	3a800147 	ldb	r10,5(r7)
    13b4:	139d383a 	mul	r14,r2,r14
    13b8:	60d9383a 	mul	r12,r12,r3
    13bc:	68800003 	ldbu	r2,0(r13)
    13c0:	38c001c7 	ldb	r3,7(r7)
    13c4:	5a17383a 	mul	r11,r11,r8
    13c8:	33ffffc3 	ldbu	r15,-1(r6)
    13cc:	3a000007 	ldb	r8,0(r7)
    13d0:	2295383a 	mul	r10,r4,r10
    13d4:	31000043 	ldbu	r4,1(r6)
    13d8:	39800087 	ldb	r6,2(r7)
    13dc:	730b883a 	add	r5,r14,r12
    13e0:	10d3383a 	mul	r9,r2,r3
    13e4:	6b3fffc3 	ldbu	r12,-1(r13)
    13e8:	38c00187 	ldb	r3,6(r7)
    13ec:	2acb883a 	add	r5,r5,r11
    13f0:	7a11383a 	mul	r8,r15,r8
    13f4:	6ac00043 	ldbu	r11,1(r13)
    13f8:	39c00207 	ldb	r7,8(r7)
    13fc:	2a8b883a 	add	r5,r5,r10
    1400:	2189383a 	mul	r4,r4,r6
    1404:	2a45883a 	add	r2,r5,r9
    1408:	60c7383a 	mul	r3,r12,r3
    140c:	1205883a 	add	r2,r2,r8
    1410:	59cb383a 	mul	r5,r11,r7
    1414:	1105883a 	add	r2,r2,r4
    1418:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    141c:	1145883a 	add	r2,r2,r5
    1420:	f800283a 	ret

00001424 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1424:	defff604 	addi	sp,sp,-40
    1428:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    142c:	d4671517 	ldw	r17,-25516(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    1430:	dfc00915 	stw	ra,36(sp)
    1434:	df000815 	stw	fp,32(sp)
    1438:	ddc00715 	stw	r23,28(sp)
    143c:	dd800615 	stw	r22,24(sp)
    1440:	dd400515 	stw	r21,20(sp)
    1444:	dd000415 	stw	r20,16(sp)
    1448:	dcc00315 	stw	r19,12(sp)
    144c:	dc800215 	stw	r18,8(sp)
    1450:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1454:	8c7fffc4 	addi	r17,r17,-1
    1458:	00800044 	movi	r2,1
    145c:	14402e0e 	bge	r2,r17,1518 <sobel_x+0xf4>
    1460:	d3671317 	ldw	r13,-25524(gp)
    1464:	d3e71617 	ldw	r15,-25512(gp)
    1468:	03800084 	movi	r14,2
    146c:	6b65883a 	add	r18,r13,r13
    1470:	9385883a 	add	r2,r18,r14
    1474:	2359883a 	add	r12,r4,r13
    1478:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    147c:	7027883a 	mov	r19,r14
    1480:	736bc83a 	sub	r21,r14,r13
    1484:	6ba9883a 	add	r20,r13,r14
    1488:	9b402f0e 	bge	r19,r13,1548 <sobel_x+0x124>
    148c:	637f883a 	add	ra,r12,r13
    1490:	7021883a 	mov	r16,r14
    1494:	6357c83a 	sub	r11,r12,r13
    1498:	ab0b883a 	add	r5,r21,r12
    149c:	62800084 	addi	r10,r12,2
    14a0:	f813883a 	mov	r9,ra
    14a4:	a311883a 	add	r8,r20,r12
    14a8:	780f883a 	mov	r7,r15
    14ac:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14b0:	29000003 	ldbu	r4,0(r5)
    14b4:	40c00003 	ldbu	r3,0(r8)
    14b8:	37000003 	ldbu	fp,0(r6)
    14bc:	50800003 	ldbu	r2,0(r10)
    14c0:	20c7883a 	add	r3,r4,r3
    14c4:	5dc00003 	ldbu	r23,0(r11)
    14c8:	1f07c83a 	sub	r3,r3,fp
    14cc:	4d800003 	ldbu	r22,0(r9)
    14d0:	1f09c83a 	sub	r4,r3,fp
    14d4:	1087883a 	add	r3,r2,r2
    14d8:	20c7883a 	add	r3,r4,r3
    14dc:	1dc5c83a 	sub	r2,r3,r23
    14e0:	1585c83a 	sub	r2,r2,r22
    14e4:	3880000d 	sth	r2,0(r7)
    14e8:	29400044 	addi	r5,r5,1
    14ec:	5ac00044 	addi	r11,r11,1
    14f0:	31800044 	addi	r6,r6,1
    14f4:	52800044 	addi	r10,r10,1
    14f8:	4a400044 	addi	r9,r9,1
    14fc:	42000044 	addi	r8,r8,1
    1500:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1504:	617fea1e 	bne	r12,r5,14b0 <__alt_data_end+0xff0014b0>
    1508:	73800044 	addi	r14,r14,1
    150c:	f819883a 	mov	r12,ra
    1510:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1514:	847fdc16 	blt	r16,r17,1488 <__alt_data_end+0xff001488>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1518:	dfc00917 	ldw	ra,36(sp)
    151c:	df000817 	ldw	fp,32(sp)
    1520:	ddc00717 	ldw	r23,28(sp)
    1524:	dd800617 	ldw	r22,24(sp)
    1528:	dd400517 	ldw	r21,20(sp)
    152c:	dd000417 	ldw	r20,16(sp)
    1530:	dcc00317 	ldw	r19,12(sp)
    1534:	dc800217 	ldw	r18,8(sp)
    1538:	dc400117 	ldw	r17,4(sp)
    153c:	dc000017 	ldw	r16,0(sp)
    1540:	dec00a04 	addi	sp,sp,40
    1544:	f800283a 	ret
    1548:	7021883a 	mov	r16,r14
    154c:	637f883a 	add	ra,r12,r13
    1550:	73800044 	addi	r14,r14,1
    1554:	f819883a 	mov	r12,ra
    1558:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    155c:	847fca16 	blt	r16,r17,1488 <__alt_data_end+0xff001488>
    1560:	003fed06 	br	1518 <__alt_data_end+0xff001518>

00001564 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1564:	defff504 	addi	sp,sp,-44
    1568:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    156c:	d5a71517 	ldw	r22,-25516(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1570:	dfc00a15 	stw	ra,40(sp)
    1574:	df000915 	stw	fp,36(sp)
    1578:	ddc00815 	stw	r23,32(sp)
    157c:	dd400615 	stw	r21,24(sp)
    1580:	dd000515 	stw	r20,20(sp)
    1584:	dcc00415 	stw	r19,16(sp)
    1588:	dc800315 	stw	r18,12(sp)
    158c:	dc400215 	stw	r17,8(sp)
    1590:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1594:	b5bfffc4 	addi	r22,r22,-1
    1598:	00800044 	movi	r2,1
    159c:	1580440e 	bge	r2,r22,16b0 <sobel_x_with_rgb+0x14c>
    15a0:	d7e71317 	ldw	ra,-25524(gp)
    15a4:	d4a71617 	ldw	r18,-25512(gp)
    15a8:	d4671817 	ldw	r17,-25504(gp)
    15ac:	ffe9883a 	add	r20,ra,ra
    15b0:	a0800084 	addi	r2,r20,2
    15b4:	04000084 	movi	r16,2
    15b8:	90a5883a 	add	r18,r18,r2
    15bc:	88a3883a 	add	r17,r17,r2
    15c0:	fc05883a 	add	r2,ra,r16
    15c4:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15c8:	802f883a 	mov	r23,r16
    15cc:	87f9c83a 	sub	fp,r16,ra
    15d0:	d8800015 	stw	r2,0(sp)
    15d4:	bfc02f0e 	bge	r23,ra,1694 <sobel_x_with_rgb+0x130>
    15d8:	d8800017 	ldw	r2,0(sp)
    15dc:	7fe7883a 	add	r19,r15,ra
    15e0:	802b883a 	mov	r21,r16
    15e4:	7fdbc83a 	sub	r13,r15,ra
    15e8:	e3cf883a 	add	r7,fp,r15
    15ec:	7b000084 	addi	r12,r15,2
    15f0:	9817883a 	mov	r11,r19
    15f4:	13d5883a 	add	r10,r2,r15
    15f8:	881d883a 	mov	r14,r17
    15fc:	9013883a 	mov	r9,r18
    1600:	7811883a 	mov	r8,r15
    1604:	00000b06 	br	1634 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1608:	180692fa 	slli	r3,r3,11
    160c:	70c0000d 	sth	r3,0(r14)
    1610:	39c00044 	addi	r7,r7,1
    1614:	6b400044 	addi	r13,r13,1
    1618:	42000044 	addi	r8,r8,1
    161c:	63000044 	addi	r12,r12,1
    1620:	5ac00044 	addi	r11,r11,1
    1624:	52800044 	addi	r10,r10,1
    1628:	4a400084 	addi	r9,r9,2
    162c:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1630:	79c01a26 	beq	r15,r7,169c <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1634:	50800003 	ldbu	r2,0(r10)
    1638:	39400003 	ldbu	r5,0(r7)
    163c:	41800003 	ldbu	r6,0(r8)
    1640:	60c00003 	ldbu	r3,0(r12)
    1644:	288b883a 	add	r5,r5,r2
    1648:	298bc83a 	sub	r5,r5,r6
    164c:	68800003 	ldbu	r2,0(r13)
    1650:	59000003 	ldbu	r4,0(r11)
    1654:	298bc83a 	sub	r5,r5,r6
    1658:	18c7883a 	add	r3,r3,r3
    165c:	28c7883a 	add	r3,r5,r3
    1660:	1887c83a 	sub	r3,r3,r2
    1664:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1668:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    166c:	10bfffcc 	andi	r2,r2,65535
    1670:	10a0001c 	xori	r2,r2,32768
    1674:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1678:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    167c:	103fe20e 	bge	r2,zero,1608 <__alt_data_end+0xff001608>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1680:	0085c83a 	sub	r2,zero,r2
    1684:	1005d0ba 	srai	r2,r2,2
    1688:	1004917a 	slli	r2,r2,5
    168c:	7080000d 	sth	r2,0(r14)
    1690:	003fdf06 	br	1610 <__alt_data_end+0xff001610>
    1694:	802b883a 	mov	r21,r16
    1698:	7fe7883a 	add	r19,r15,ra
    169c:	84000044 	addi	r16,r16,1
    16a0:	981f883a 	mov	r15,r19
    16a4:	9525883a 	add	r18,r18,r20
    16a8:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16ac:	adbfc916 	blt	r21,r22,15d4 <__alt_data_end+0xff0015d4>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16b0:	dfc00a17 	ldw	ra,40(sp)
    16b4:	df000917 	ldw	fp,36(sp)
    16b8:	ddc00817 	ldw	r23,32(sp)
    16bc:	dd800717 	ldw	r22,28(sp)
    16c0:	dd400617 	ldw	r21,24(sp)
    16c4:	dd000517 	ldw	r20,20(sp)
    16c8:	dcc00417 	ldw	r19,16(sp)
    16cc:	dc800317 	ldw	r18,12(sp)
    16d0:	dc400217 	ldw	r17,8(sp)
    16d4:	dc000117 	ldw	r16,4(sp)
    16d8:	dec00b04 	addi	sp,sp,44
    16dc:	f800283a 	ret

000016e0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    16e0:	defff704 	addi	sp,sp,-36
    16e4:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16e8:	d4671517 	ldw	r17,-25516(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    16ec:	dfc00815 	stw	ra,32(sp)
    16f0:	ddc00715 	stw	r23,28(sp)
    16f4:	dd800615 	stw	r22,24(sp)
    16f8:	dd400515 	stw	r21,20(sp)
    16fc:	dd000415 	stw	r20,16(sp)
    1700:	dcc00315 	stw	r19,12(sp)
    1704:	dc800215 	stw	r18,8(sp)
    1708:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    170c:	8c7fffc4 	addi	r17,r17,-1
    1710:	00800044 	movi	r2,1
    1714:	14402d0e 	bge	r2,r17,17cc <sobel_y+0xec>
    1718:	d3e71317 	ldw	r15,-25524(gp)
    171c:	d3a71717 	ldw	r14,-25508(gp)
    1720:	03400084 	movi	r13,2
    1724:	7bff883a 	add	ra,r15,r15
    1728:	fb67883a 	add	r19,ra,r13
    172c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1730:	6825883a 	mov	r18,r13
    1734:	f8a9883a 	add	r20,ra,r2
    1738:	6821883a 	mov	r16,r13
    173c:	93c01f0e 	bge	r18,r15,17bc <sobel_y+0xdc>
    1740:	27cd883a 	add	r6,r4,ra
    1744:	6821883a 	mov	r16,r13
    1748:	22c00044 	addi	r11,r4,1
    174c:	22800084 	addi	r10,r4,2
    1750:	a113883a 	add	r9,r20,r4
    1754:	990b883a 	add	r5,r19,r4
    1758:	7999883a 	add	r12,r15,r6
    175c:	7011883a 	mov	r8,r14
    1760:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1764:	3d800003 	ldbu	r22,0(r7)
    1768:	50c00003 	ldbu	r3,0(r10)
    176c:	58800003 	ldbu	r2,0(r11)
    1770:	4d400003 	ldbu	r21,0(r9)
    1774:	b0c7883a 	add	r3,r22,r3
    1778:	1085883a 	add	r2,r2,r2
    177c:	35c00003 	ldbu	r23,0(r6)
    1780:	1887883a 	add	r3,r3,r2
    1784:	2d800003 	ldbu	r22,0(r5)
    1788:	1d47c83a 	sub	r3,r3,r21
    178c:	1d47c83a 	sub	r3,r3,r21
    1790:	1dc5c83a 	sub	r2,r3,r23
    1794:	1585c83a 	sub	r2,r2,r22
    1798:	4080000d 	sth	r2,0(r8)
    179c:	29400044 	addi	r5,r5,1
    17a0:	39c00044 	addi	r7,r7,1
    17a4:	5ac00044 	addi	r11,r11,1
    17a8:	52800044 	addi	r10,r10,1
    17ac:	4a400044 	addi	r9,r9,1
    17b0:	31800044 	addi	r6,r6,1
    17b4:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17b8:	617fea1e 	bne	r12,r5,1764 <__alt_data_end+0xff001764>
    17bc:	6b400044 	addi	r13,r13,1
    17c0:	23c9883a 	add	r4,r4,r15
    17c4:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17c8:	847fdb16 	blt	r16,r17,1738 <__alt_data_end+0xff001738>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    17cc:	dfc00817 	ldw	ra,32(sp)
    17d0:	ddc00717 	ldw	r23,28(sp)
    17d4:	dd800617 	ldw	r22,24(sp)
    17d8:	dd400517 	ldw	r21,20(sp)
    17dc:	dd000417 	ldw	r20,16(sp)
    17e0:	dcc00317 	ldw	r19,12(sp)
    17e4:	dc800217 	ldw	r18,8(sp)
    17e8:	dc400117 	ldw	r17,4(sp)
    17ec:	dc000017 	ldw	r16,0(sp)
    17f0:	dec00904 	addi	sp,sp,36
    17f4:	f800283a 	ret

000017f8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    17f8:	defff604 	addi	sp,sp,-40
    17fc:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1800:	d4e71517 	ldw	r19,-25516(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1804:	dfc00915 	stw	ra,36(sp)
    1808:	df000815 	stw	fp,32(sp)
    180c:	ddc00715 	stw	r23,28(sp)
    1810:	dd800615 	stw	r22,24(sp)
    1814:	dd400515 	stw	r21,20(sp)
    1818:	dd000415 	stw	r20,16(sp)
    181c:	dc800215 	stw	r18,8(sp)
    1820:	dc400115 	stw	r17,4(sp)
    1824:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1828:	9cffffc4 	addi	r19,r19,-1
    182c:	00800044 	movi	r2,1
    1830:	14c03f0e 	bge	r2,r19,1930 <sobel_y_with_rgb+0x138>
    1834:	d4671317 	ldw	r17,-25524(gp)
    1838:	d4271717 	ldw	r16,-25508(gp)
    183c:	d7e71817 	ldw	ra,-25504(gp)
    1840:	8c5d883a 	add	r14,r17,r17
    1844:	75000084 	addi	r20,r14,2
    1848:	03c00084 	movi	r15,2
    184c:	8521883a 	add	r16,r16,r20
    1850:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1854:	782b883a 	mov	r21,r15
    1858:	70ad883a 	add	r22,r14,r2
    185c:	7825883a 	mov	r18,r15
    1860:	ac402e0e 	bge	r21,r17,191c <sobel_y_with_rgb+0x124>
    1864:	238d883a 	add	r6,r4,r14
    1868:	7825883a 	mov	r18,r15
    186c:	22c00044 	addi	r11,r4,1
    1870:	22800084 	addi	r10,r4,2
    1874:	b113883a 	add	r9,r22,r4
    1878:	a10b883a 	add	r5,r20,r4
    187c:	899b883a 	add	r13,r17,r6
    1880:	f819883a 	mov	r12,ra
    1884:	8011883a 	mov	r8,r16
    1888:	200f883a 	mov	r7,r4
    188c:	00000b06 	br	18bc <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1890:	180692fa 	slli	r3,r3,11
    1894:	60c0000d 	sth	r3,0(r12)
    1898:	29400044 	addi	r5,r5,1
    189c:	39c00044 	addi	r7,r7,1
    18a0:	5ac00044 	addi	r11,r11,1
    18a4:	52800044 	addi	r10,r10,1
    18a8:	4a400044 	addi	r9,r9,1
    18ac:	31800044 	addi	r6,r6,1
    18b0:	42000084 	addi	r8,r8,2
    18b4:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18b8:	69401826 	beq	r13,r5,191c <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    18bc:	50800003 	ldbu	r2,0(r10)
    18c0:	3f000003 	ldbu	fp,0(r7)
    18c4:	58c00003 	ldbu	r3,0(r11)
    18c8:	4dc00003 	ldbu	r23,0(r9)
    18cc:	e0b9883a 	add	fp,fp,r2
    18d0:	18c7883a 	add	r3,r3,r3
    18d4:	30800003 	ldbu	r2,0(r6)
    18d8:	e0c7883a 	add	r3,fp,r3
    18dc:	1dc7c83a 	sub	r3,r3,r23
    18e0:	2f000003 	ldbu	fp,0(r5)
    18e4:	1dc7c83a 	sub	r3,r3,r23
    18e8:	1885c83a 	sub	r2,r3,r2
    18ec:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    18f0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    18f4:	10bfffcc 	andi	r2,r2,65535
    18f8:	10a0001c 	xori	r2,r2,32768
    18fc:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1900:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1904:	103fe20e 	bge	r2,zero,1890 <__alt_data_end+0xff001890>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1908:	0085c83a 	sub	r2,zero,r2
    190c:	1005d0ba 	srai	r2,r2,2
    1910:	1004917a 	slli	r2,r2,5
    1914:	6080000d 	sth	r2,0(r12)
    1918:	003fdf06 	br	1898 <__alt_data_end+0xff001898>
    191c:	7bc00044 	addi	r15,r15,1
    1920:	2449883a 	add	r4,r4,r17
    1924:	83a1883a 	add	r16,r16,r14
    1928:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    192c:	94ffcb16 	blt	r18,r19,185c <__alt_data_end+0xff00185c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1930:	dfc00917 	ldw	ra,36(sp)
    1934:	df000817 	ldw	fp,32(sp)
    1938:	ddc00717 	ldw	r23,28(sp)
    193c:	dd800617 	ldw	r22,24(sp)
    1940:	dd400517 	ldw	r21,20(sp)
    1944:	dd000417 	ldw	r20,16(sp)
    1948:	dcc00317 	ldw	r19,12(sp)
    194c:	dc800217 	ldw	r18,8(sp)
    1950:	dc400117 	ldw	r17,4(sp)
    1954:	dc000017 	ldw	r16,0(sp)
    1958:	dec00a04 	addi	sp,sp,40
    195c:	f800283a 	ret

00001960 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1960:	d0a71517 	ldw	r2,-25516(gp)
    1964:	02400084 	movi	r9,2
    1968:	4880290e 	bge	r9,r2,1a10 <sobel_threshold+0xb0>
    196c:	223fffcc 	andi	r8,r4,65535
    1970:	d0e71317 	ldw	r3,-25524(gp)
    1974:	4220001c 	xori	r8,r8,32768
    1978:	01c00044 	movi	r7,1
    197c:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1980:	48c0200e 	bge	r9,r3,1a04 <sobel_threshold+0xa4>
    1984:	01400044 	movi	r5,1
    1988:	00000c06 	br	19bc <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    198c:	2080000f 	ldh	r2,0(r4)
    1990:	10001916 	blt	r2,zero,19f8 <sobel_threshold+0x98>
    1994:	3085883a 	add	r2,r6,r2
    1998:	10bfffcc 	andi	r2,r2,65535
    199c:	10a0001c 	xori	r2,r2,32768
    19a0:	10a00004 	addi	r2,r2,-32768
    19a4:	4084803a 	cmplt	r2,r8,r2
    19a8:	0085c83a 	sub	r2,zero,r2
    19ac:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19b0:	d0e71317 	ldw	r3,-25524(gp)
    19b4:	18bfffc4 	addi	r2,r3,-1
    19b8:	2880110e 	bge	r5,r2,1a00 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19bc:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19c0:	d1a71717 	ldw	r6,-25508(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19c4:	d1271617 	ldw	r4,-25512(gp)
    19c8:	1947883a 	add	r3,r3,r5
    19cc:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19d0:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19d4:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19d8:	3180000f 	ldh	r6,0(r6)
    19dc:	d0a71417 	ldw	r2,-25520(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19e0:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19e4:	10c7883a 	add	r3,r2,r3
    19e8:	303fe80e 	bge	r6,zero,198c <__alt_data_end+0xff00198c>
    19ec:	2080000f 	ldh	r2,0(r4)
    19f0:	018dc83a 	sub	r6,zero,r6
    19f4:	103fe70e 	bge	r2,zero,1994 <__alt_data_end+0xff001994>
    19f8:	0085c83a 	sub	r2,zero,r2
    19fc:	003fe506 	br	1994 <__alt_data_end+0xff001994>
    1a00:	d0a71517 	ldw	r2,-25516(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a04:	39c00044 	addi	r7,r7,1
    1a08:	113fffc4 	addi	r4,r2,-1
    1a0c:	393fdc16 	blt	r7,r4,1980 <__alt_data_end+0xff001980>
    1a10:	f800283a 	ret

00001a14 <sobel_complete>:
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a14:	d0e71517 	ldw	r3,-25516(gp)
    1a18:	02000084 	movi	r8,2
    1a1c:	40c05a0e 	bge	r8,r3,1b88 <sobel_complete+0x174>
    1a20:	d3a71317 	ldw	r14,-25524(gp)
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1a24:	defffa04 	addi	sp,sp,-24
    1a28:	dfc00515 	stw	ra,20(sp)
    1a2c:	dd000415 	stw	r20,16(sp)
    1a30:	dcc00315 	stw	r19,12(sp)
    1a34:	dc800215 	stw	r18,8(sp)
    1a38:	dc400115 	stw	r17,4(sp)
    1a3c:	dc000015 	stw	r16,0(sp)
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a40:	401b883a 	mov	r13,r8
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a44:	02c02004 	movi	r11,128
    1a48:	427fffc4 	addi	r9,r8,-1
    1a4c:	4019883a 	mov	r12,r8
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a50:	6b80430e 	bge	r13,r14,1b60 <sobel_complete+0x14c>
    1a54:	42bfff84 	addi	r10,r8,-2
    1a58:	4019883a 	mov	r12,r8
    1a5c:	01800044 	movi	r6,1
    1a60:	00000606 	br	1a7c <sobel_complete+0x68>
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a64:	00803fc4 	movi	r2,255
    1a68:	70800025 	stbio	r2,0(r14)
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a6c:	d3a71317 	ldw	r14,-25524(gp)
    1a70:	380d883a 	mov	r6,r7
    1a74:	70bfffc4 	addi	r2,r14,-1
    1a78:	3880380e 	bge	r7,r2,1b5c <sobel_complete+0x148>
			a = source[(y-1)*sobel_width+(x-1)];
    1a7c:	7287383a 	mul	r3,r14,r10
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1a80:	7205383a 	mul	r2,r14,r8
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
    1a84:	31c00044 	addi	r7,r6,1
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
    1a88:	20c7883a 	add	r3,r4,r3
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
    1a8c:	199f883a 	add	r15,r3,r6
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
    1a90:	21ff883a 	add	ra,r4,r7
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1a94:	20a9883a 	add	r20,r4,r2
			d = source[(y+1)*sobel_width+(x+1)];
    1a98:	f88b883a 	add	r5,ra,r2
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1a9c:	78800003 	ldbu	r2,0(r15)
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
    1aa0:	a1a1883a 	add	r16,r20,r6
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
    1aa4:	19e3883a 	add	r17,r3,r7
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1aa8:	29400003 	ldbu	r5,0(r5)
    1aac:	33ffffc4 	addi	r15,r6,-1
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ab0:	84c00003 	ldbu	r19,0(r16)
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1ab4:	8c400003 	ldbu	r17,0(r17)
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
    1ab8:	1be1883a 	add	r16,r3,r15
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1abc:	1087883a 	add	r3,r2,r2
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1ac0:	84800003 	ldbu	r18,0(r16)
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1ac4:	a3e9883a 	add	r20,r20,r15
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ac8:	1947c83a 	sub	r3,r3,r5
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1acc:	a4000003 	ldbu	r16,0(r20)
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ad0:	1c47883a 	add	r3,r3,r17
    1ad4:	9cc5883a 	add	r2,r19,r19
    1ad8:	1885c83a 	sub	r2,r3,r2
    1adc:	1485883a 	add	r2,r2,r18
    1ae0:	1405c83a 	sub	r2,r2,r16
    1ae4:	10bfffcc 	andi	r2,r2,65535
    1ae8:	10a0001c 	xori	r2,r2,32768
    1aec:	10a00004 	addi	r2,r2,-32768
    1af0:	1005c072 	custom	1,r2,r2,zero
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
    1af4:	4b9d383a 	mul	r14,r9,r14
			sum += ALT_CI_ABSOLUTE_0(value);
    1af8:	894b883a 	add	r5,r17,r5
    1afc:	2c8bc83a 	sub	r5,r5,r18
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
    1b00:	2387883a 	add	r3,r4,r14
					2 * source[(y)*sobel_width+(x+1)] - c + d;
    1b04:	fbbf883a 	add	ra,ra,r14
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
    1b08:	1bdf883a 	add	r15,r3,r15
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
    1b0c:	7bc00003 	ldbu	r15,0(r15)
    1b10:	f8c00003 	ldbu	r3,0(ra)
    1b14:	2c0bc83a 	sub	r5,r5,r16
    1b18:	1bc7c83a 	sub	r3,r3,r15
    1b1c:	18c7883a 	add	r3,r3,r3
    1b20:	1947883a 	add	r3,r3,r5
    1b24:	18ffffcc 	andi	r3,r3,65535
    1b28:	18e0001c 	xori	r3,r3,32768
    1b2c:	18e00004 	addi	r3,r3,-32768
    1b30:	1807c072 	custom	1,r3,r3,zero
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b34:	1885883a 	add	r2,r3,r2
    1b38:	719d883a 	add	r14,r14,r6
    1b3c:	10bfffcc 	andi	r2,r2,65535
    1b40:	d1a71417 	ldw	r6,-25520(gp)
    1b44:	10a0001c 	xori	r2,r2,32768
    1b48:	10a00004 	addi	r2,r2,-32768
    1b4c:	339d883a 	add	r14,r6,r14
    1b50:	58bfc416 	blt	r11,r2,1a64 <__alt_data_end+0xff001a64>
    1b54:	0005883a 	mov	r2,zero
    1b58:	003fc306 	br	1a68 <__alt_data_end+0xff001a68>
    1b5c:	d0e71517 	ldw	r3,-25516(gp)
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b60:	18bfffc4 	addi	r2,r3,-1
    1b64:	42000044 	addi	r8,r8,1
    1b68:	60bfb716 	blt	r12,r2,1a48 <__alt_data_end+0xff001a48>
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1b6c:	dfc00517 	ldw	ra,20(sp)
    1b70:	dd000417 	ldw	r20,16(sp)
    1b74:	dcc00317 	ldw	r19,12(sp)
    1b78:	dc800217 	ldw	r18,8(sp)
    1b7c:	dc400117 	ldw	r17,4(sp)
    1b80:	dc000017 	ldw	r16,0(sp)
    1b84:	dec00604 	addi	sp,sp,24
    1b88:	f800283a 	ret

00001b8c <sobel_complete_sub>:

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
    1b8c:	298d883a 	add	r6,r5,r6
    1b90:	33bfffc4 	addi	r14,r6,-1
    1b94:	28800044 	addi	r2,r5,1
    1b98:	1380600e 	bge	r2,r14,1d1c <sobel_complete_sub+0x190>
    1b9c:	d0e71317 	ldw	r3,-25524(gp)
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}

void sobel_complete_sub(unsigned char *source, int from, int size){
    1ba0:	defff804 	addi	sp,sp,-32
    1ba4:	dfc00715 	stw	ra,28(sp)
    1ba8:	dd800615 	stw	r22,24(sp)
    1bac:	dd400515 	stw	r21,20(sp)
    1bb0:	dd000415 	stw	r20,16(sp)
    1bb4:	dcc00315 	stw	r19,12(sp)
    1bb8:	dc800215 	stw	r18,8(sp)
    1bbc:	dc400115 	stw	r17,4(sp)
    1bc0:	dc000015 	stw	r16,0(sp)
    1bc4:	2a400084 	addi	r9,r5,2
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bc8:	03c00084 	movi	r15,2
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1bcc:	03002004 	movi	r12,128
    1bd0:	4abfffc4 	addi	r10,r9,-1
    1bd4:	481b883a 	mov	r13,r9

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bd8:	78c0450e 	bge	r15,r3,1cf0 <sobel_complete_sub+0x164>
    1bdc:	4affff84 	addi	r11,r9,-2
    1be0:	481b883a 	mov	r13,r9
    1be4:	01c00044 	movi	r7,1
    1be8:	00000606 	br	1c04 <sobel_complete_sub+0x78>
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1bec:	00803fc4 	movi	r2,255
    1bf0:	18800025 	stbio	r2,0(r3)

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bf4:	d0e71317 	ldw	r3,-25524(gp)
    1bf8:	400f883a 	mov	r7,r8
    1bfc:	18bfffc4 	addi	r2,r3,-1
    1c00:	40803b0e 	bge	r8,r2,1cf0 <sobel_complete_sub+0x164>
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1c04:	1acb383a 	mul	r5,r3,r11
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1c08:	1a67383a 	mul	r19,r3,r9
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c0c:	3a000044 	addi	r8,r7,1
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1c10:	2165883a 	add	r18,r4,r5
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1c14:	24eb883a 	add	r21,r4,r19
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1c18:	91c5883a 	add	r2,r18,r7
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c1c:	11800003 	ldbu	r6,0(r2)
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1c20:	a9c5883a 	add	r2,r21,r7
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c24:	15800003 	ldbu	r22,0(r2)
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1c28:	2223883a 	add	r17,r4,r8
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c2c:	9205883a 	add	r2,r18,r8
    1c30:	3d3fffc4 	addi	r20,r7,-1
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c34:	31a1883a 	add	r16,r6,r6
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1c38:	8ce7883a 	add	r19,r17,r19
			sum = ALT_CI_ABSOLUTE_0(value);
    1c3c:	11800003 	ldbu	r6,0(r2)
    1c40:	9fc00003 	ldbu	ra,0(r19)
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1c44:	9525883a 	add	r18,r18,r20
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c48:	8585c83a 	sub	r2,r16,r22
    1c4c:	94c00003 	ldbu	r19,0(r18)
    1c50:	1585c83a 	sub	r2,r2,r22
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1c54:	ad2b883a 	add	r21,r21,r20
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c58:	1185883a 	add	r2,r2,r6
    1c5c:	ac800003 	ldbu	r18,0(r21)
    1c60:	17c5c83a 	sub	r2,r2,ra
    1c64:	14c5883a 	add	r2,r2,r19
    1c68:	1485c83a 	sub	r2,r2,r18
    1c6c:	10bfffcc 	andi	r2,r2,65535
    1c70:	10a0001c 	xori	r2,r2,32768
    1c74:	10a00004 	addi	r2,r2,-32768
    1c78:	1005c072 	custom	1,r2,r2,zero
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1c7c:	1a87383a 	mul	r3,r3,r10
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c80:	894b883a 	add	r5,r17,r5
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c84:	2c000003 	ldbu	r16,0(r5)
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
    1c88:	20cb883a 	add	r5,r4,r3
    1c8c:	2d29883a 	add	r20,r5,r20
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c90:	a1400003 	ldbu	r5,0(r20)
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1c94:	88e3883a 	add	r17,r17,r3
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c98:	89800003 	ldbu	r6,0(r17)
    1c9c:	295fffe4 	muli	r5,r5,32767
    1ca0:	87e1883a 	add	r16,r16,ra
    1ca4:	84ffc83a 	sub	ra,r16,r19
    1ca8:	298b883a 	add	r5,r5,r6
    1cac:	fcbfc83a 	sub	ra,ra,r18
    1cb0:	294b883a 	add	r5,r5,r5
    1cb4:	f94b883a 	add	r5,ra,r5
    1cb8:	297fffcc 	andi	r5,r5,65535
    1cbc:	2960001c 	xori	r5,r5,32768
    1cc0:	29600004 	addi	r5,r5,-32768
    1cc4:	280bc072 	custom	1,r5,r5,zero
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1cc8:	2885883a 	add	r2,r5,r2
    1ccc:	19c7883a 	add	r3,r3,r7
    1cd0:	10bfffcc 	andi	r2,r2,65535
    1cd4:	d1e71417 	ldw	r7,-25520(gp)
    1cd8:	10a0001c 	xori	r2,r2,32768
    1cdc:	10a00004 	addi	r2,r2,-32768
    1ce0:	38c7883a 	add	r3,r7,r3
    1ce4:	60bfc116 	blt	r12,r2,1bec <__alt_data_end+0xff001bec>
    1ce8:	0005883a 	mov	r2,zero
    1cec:	003fc006 	br	1bf0 <__alt_data_end+0xff001bf0>
    1cf0:	4a400044 	addi	r9,r9,1
}

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
    1cf4:	6bbfb616 	blt	r13,r14,1bd0 <__alt_data_end+0xff001bd0>
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1cf8:	dfc00717 	ldw	ra,28(sp)
    1cfc:	dd800617 	ldw	r22,24(sp)
    1d00:	dd400517 	ldw	r21,20(sp)
    1d04:	dd000417 	ldw	r20,16(sp)
    1d08:	dcc00317 	ldw	r19,12(sp)
    1d0c:	dc800217 	ldw	r18,8(sp)
    1d10:	dc400117 	ldw	r17,4(sp)
    1d14:	dc000017 	ldw	r16,0(sp)
    1d18:	dec00804 	addi	sp,sp,32
    1d1c:	f800283a 	ret

00001d20 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d20:	d0a71817 	ldw	r2,-25504(gp)
    1d24:	f800283a 	ret

00001d28 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d28:	d0a71417 	ldw	r2,-25520(gp)
    1d2c:	f800283a 	ret

00001d30 <sobel_all_init>:
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d30:	defffe04 	addi	sp,sp,-8
    1d34:	dc000015 	stw	r16,0(sp)
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
    1d38:	2161383a 	mul	r16,r4,r5
	if (grayscale_array != NULL)
    1d3c:	d0a70d17 	ldw	r2,-25548(gp)
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d40:	dfc00115 	stw	ra,4(sp)
	int loop = 0;
	array_width = width;
    1d44:	d1271f15 	stw	r4,-25476(gp)
	array_height = height;
    1d48:	d1671e15 	stw	r5,-25480(gp)
	size = width*height;
    1d4c:	d4271d15 	stw	r16,-25484(gp)
	if (grayscale_array != NULL)
    1d50:	10000226 	beq	r2,zero,1d5c <sobel_all_init+0x2c>
		free(grayscale_array);
    1d54:	1009883a 	mov	r4,r2
    1d58:	0002d3c0 	call	2d3c <free>
	grayscale_array = (unsigned char *) malloc(width* height);
    1d5c:	8009883a 	mov	r4,r16
    1d60:	0002d280 	call	2d28 <malloc>
	if (sobel_result != NULL)
    1d64:	d1271417 	ldw	r4,-25520(gp)
	array_width = width;
	array_height = height;
	size = width*height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
    1d68:	d0a70d15 	stw	r2,-25548(gp)
	if (sobel_result != NULL)
    1d6c:	20000126 	beq	r4,zero,1d74 <sobel_all_init+0x44>
		free(sobel_result);
    1d70:	0002d3c0 	call	2d3c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1d74:	8009883a 	mov	r4,r16
    1d78:	0002d280 	call	2d28 <malloc>
    1d7c:	d0a71415 	stw	r2,-25520(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1d80:	0400070e 	bge	zero,r16,1da0 <sobel_all_init+0x70>
    1d84:	0007883a 	mov	r3,zero
    1d88:	00000106 	br	1d90 <sobel_all_init+0x60>
    1d8c:	d0a71417 	ldw	r2,-25520(gp)
		sobel_result[loop] = 0;
    1d90:	10c5883a 	add	r2,r2,r3
    1d94:	10000005 	stb	zero,0(r2)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1d98:	18c00044 	addi	r3,r3,1
    1d9c:	80fffb1e 	bne	r16,r3,1d8c <__alt_data_end+0xff001d8c>
		sobel_result[loop] = 0;
	}
}
    1da0:	dfc00117 	ldw	ra,4(sp)
    1da4:	dc000017 	ldw	r16,0(sp)
    1da8:	dec00204 	addi	sp,sp,8
    1dac:	f800283a 	ret

00001db0 <sobel_all_complete>:

void sobel_all_complete(void *picture){
    1db0:	defffb04 	addi	sp,sp,-20
    1db4:	dc000015 	stw	r16,0(sp)
    1db8:	dfc00415 	stw	ra,16(sp)
    1dbc:	dcc00315 	stw	r19,12(sp)
    1dc0:	dc800215 	stw	r18,8(sp)
    1dc4:	dc400115 	stw	r17,4(sp)
    1dc8:	2021883a 	mov	r16,r4



	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale = alt_timestamp();
    1dcc:	00100f80 	call	100f8 <alt_timestamp>
    1dd0:	d0a71a15 	stw	r2,-25496(gp)
	for (pos = 0 ; pos < size ; pos++) {
    1dd4:	d0a71d17 	ldw	r2,-25484(gp)
    1dd8:	00800b0e 	bge	zero,r2,1e08 <sobel_all_complete+0x58>
    1ddc:	8009883a 	mov	r4,r16
    1de0:	0005883a 	mov	r2,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1de4:	d0e70d17 	ldw	r3,-25548(gp)
    1de8:	2140000b 	ldhu	r5,0(r4)
    1dec:	1887883a 	add	r3,r3,r2
    1df0:	280bc032 	custom	0,r5,r5,zero
    1df4:	19400005 	stb	r5,0(r3)


	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale = alt_timestamp();
	for (pos = 0 ; pos < size ; pos++) {
    1df8:	d0e71d17 	ldw	r3,-25484(gp)
    1dfc:	10800044 	addi	r2,r2,1
    1e00:	21000084 	addi	r4,r4,2
    1e04:	10fff716 	blt	r2,r3,1de4 <__alt_data_end+0xff001de4>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
	end_conv_grayscale = alt_timestamp();
    1e08:	00100f80 	call	100f8 <alt_timestamp>
    1e0c:	d0a71915 	stw	r2,-25500(gp)

	start_sobel = alt_timestamp();
    1e10:	00100f80 	call	100f8 <alt_timestamp>
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e14:	d0e71e17 	ldw	r3,-25480(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
    1e18:	d0a71c15 	stw	r2,-25488(gp)
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e1c:	02400084 	movi	r9,2
    1e20:	48c0410e 	bge	r9,r3,1f28 <sobel_all_complete+0x178>
    1e24:	d1271f17 	ldw	r4,-25476(gp)
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e28:	481d883a 	mov	r14,r9
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e2c:	03002004 	movi	r12,128
    1e30:	4abfffc4 	addi	r10,r9,-1
    1e34:	481b883a 	mov	r13,r9

	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e38:	7100380e 	bge	r14,r4,1f1c <sobel_all_complete+0x16c>
    1e3c:	4affff84 	addi	r11,r9,-2
    1e40:	481b883a 	mov	r13,r9
    1e44:	01400044 	movi	r5,1
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e48:	d1e70d17 	ldw	r7,-25548(gp)
    1e4c:	22c7383a 	mul	r3,r4,r11
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e50:	2265383a 	mul	r18,r4,r9
    1e54:	2bffffc4 	addi	r15,r5,-1
	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e58:	38c7883a 	add	r3,r7,r3
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e5c:	1945883a 	add	r2,r3,r5
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e60:	2a000044 	addi	r8,r5,1
	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e64:	1bcd883a 	add	r6,r3,r15
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e68:	10800003 	ldbu	r2,0(r2)
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e6c:	3ca3883a 	add	r17,r7,r18
	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e70:	34000003 	ldbu	r16,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e74:	1a07883a 	add	r3,r3,r8
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e78:	8967883a 	add	r19,r17,r5
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e7c:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e80:	8bc7883a 	add	r3,r17,r15
    1e84:	1fc00003 	ldbu	ra,0(r3)
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e88:	1087883a 	add	r3,r2,r2
    1e8c:	98800003 	ldbu	r2,0(r19)
    1e90:	1c07883a 	add	r3,r3,r16
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1e94:	3a23883a 	add	r17,r7,r8
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e98:	1987883a 	add	r3,r3,r6
    1e9c:	1fc7c83a 	sub	r3,r3,ra
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1ea0:	8ca5883a 	add	r18,r17,r18
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ea4:	2289383a 	mul	r4,r4,r10
    1ea8:	1085883a 	add	r2,r2,r2
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1eac:	94800003 	ldbu	r18,0(r18)
				ALT_CI_ABSOLUTE_0(a + 2 * grayscale_array[(y-1)*array_width+(x)] +
					b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
				ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
					2 * grayscale_array[(y)*array_width+(x+1)] - c + d);*/
			//sobel_result_a[(y*array_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1eb0:	1885c83a 	sub	r2,r3,r2
    1eb4:	d0e71417 	ldw	r3,-25520(gp)
    1eb8:	214b883a 	add	r5,r4,r5
    1ebc:	1485c83a 	sub	r2,r2,r18
    1ec0:	194b883a 	add	r5,r3,r5
    1ec4:	1005c072 	custom	1,r2,r2,zero
    1ec8:	390f883a 	add	r7,r7,r4
    1ecc:	3bcf883a 	add	r7,r7,r15
    1ed0:	38c00003 	ldbu	r3,0(r7)
    1ed4:	8909883a 	add	r4,r17,r4
    1ed8:	21000003 	ldbu	r4,0(r4)
    1edc:	340dc83a 	sub	r6,r6,r16
    1ee0:	18c7883a 	add	r3,r3,r3
    1ee4:	30c7c83a 	sub	r3,r6,r3
    1ee8:	2109883a 	add	r4,r4,r4
    1eec:	1907883a 	add	r3,r3,r4
    1ef0:	1fc7c83a 	sub	r3,r3,ra
    1ef4:	1c87883a 	add	r3,r3,r18
    1ef8:	1807c072 	custom	1,r3,r3,zero
    1efc:	10c5883a 	add	r2,r2,r3
    1f00:	1305c0b2 	custom	2,r2,r2,r12
    1f04:	28800025 	stbio	r2,0(r5)

	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1f08:	d1271f17 	ldw	r4,-25476(gp)
    1f0c:	400b883a 	mov	r5,r8
    1f10:	20bfffc4 	addi	r2,r4,-1
    1f14:	40bfcc16 	blt	r8,r2,1e48 <__alt_data_end+0xff001e48>
    1f18:	d0e71e17 	ldw	r3,-25480(gp)
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
	int a,b,c,d;
	short sum;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1f1c:	18bfffc4 	addi	r2,r3,-1
    1f20:	4a400044 	addi	r9,r9,1
    1f24:	68bfc216 	blt	r13,r2,1e30 <__alt_data_end+0xff001e30>
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
	}
	end_sobel = alt_timestamp();
    1f28:	00100f80 	call	100f8 <alt_timestamp>
    1f2c:	d0a71b15 	stw	r2,-25492(gp)
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1f30:	d1671917 	ldw	r5,-25500(gp)
    1f34:	d0a71a17 	ldw	r2,-25496(gp)
    1f38:	01000074 	movhi	r4,1
    1f3c:	21067604 	addi	r4,r4,6616
    1f40:	288bc83a 	sub	r5,r5,r2
    1f44:	000358c0 	call	358c <printf>
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1f48:	d0a71c17 	ldw	r2,-25488(gp)
    1f4c:	d1671b17 	ldw	r5,-25492(gp)
    1f50:	01000074 	movhi	r4,1
    1f54:	21067b04 	addi	r4,r4,6636
    1f58:	288bc83a 	sub	r5,r5,r2
}
    1f5c:	dfc00417 	ldw	ra,16(sp)
    1f60:	dcc00317 	ldw	r19,12(sp)
    1f64:	dc800217 	ldw	r18,8(sp)
    1f68:	dc400117 	ldw	r17,4(sp)
    1f6c:	dc000017 	ldw	r16,0(sp)
    1f70:	dec00504 	addi	sp,sp,20
					,128));
		}
	}
	end_sobel = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1f74:	000358c1 	jmpi	358c <printf>

00001f78 <sobel_all_partial>:



	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (y = from ; y < from+size ; y++) {
    1f78:	298d883a 	add	r6,r5,r6
    1f7c:	2980130e 	bge	r5,r6,1fcc <sobel_all_partial+0x54>
    1f80:	d0a71f17 	ldw	r2,-25476(gp)
    1f84:	2815883a 	mov	r10,r5
		for (x = 0 ; x < array_width ; x++) {
    1f88:	000f883a 	mov	r7,zero
    1f8c:	00800d0e 	bge	zero,r2,1fc4 <sobel_all_partial+0x4c>
			gray = ALT_CI_RGB2GRAY_0(pixels[y*array_width+x]);
    1f90:	5085383a 	mul	r2,r10,r2
    1f94:	11c7883a 	add	r3,r2,r7
    1f98:	18c7883a 	add	r3,r3,r3
    1f9c:	20c7883a 	add	r3,r4,r3
    1fa0:	18c0000b 	ldhu	r3,0(r3)
    1fa4:	1807c032 	custom	0,r3,r3,zero
			grayscale_array[y*array_width+x] = gray;
    1fa8:	d2270d17 	ldw	r8,-25548(gp)
    1fac:	41d1883a 	add	r8,r8,r7
    1fb0:	4085883a 	add	r2,r8,r2
    1fb4:	10c00005 	stb	r3,0(r2)


	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (y = from ; y < from+size ; y++) {
		for (x = 0 ; x < array_width ; x++) {
    1fb8:	d0a71f17 	ldw	r2,-25476(gp)
    1fbc:	39c00044 	addi	r7,r7,1
    1fc0:	38bff316 	blt	r7,r2,1f90 <__alt_data_end+0xff001f90>



	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (y = from ; y < from+size ; y++) {
    1fc4:	52800044 	addi	r10,r10,1
    1fc8:	51bfef1e 	bne	r10,r6,1f88 <__alt_data_end+0xff001f88>
		}
	}



	for (y = from+1 ; y < (from+size-1) ; y++) {
    1fcc:	337fffc4 	addi	r13,r6,-1
    1fd0:	28800044 	addi	r2,r5,1
    1fd4:	13405f0e 	bge	r2,r13,2154 <sobel_all_partial+0x1dc>
    1fd8:	d0a71f17 	ldw	r2,-25476(gp)
	end_sobel = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
}

void sobel_all_partial(void *picture, int from, int size){
    1fdc:	defff904 	addi	sp,sp,-28
    1fe0:	dfc00615 	stw	ra,24(sp)
    1fe4:	dd400515 	stw	r21,20(sp)
    1fe8:	dd000415 	stw	r20,16(sp)
    1fec:	dcc00315 	stw	r19,12(sp)
    1ff0:	dc800215 	stw	r18,8(sp)
    1ff4:	dc400115 	stw	r17,4(sp)
    1ff8:	dc000015 	stw	r16,0(sp)
    1ffc:	2a400084 	addi	r9,r5,2
	}



	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2000:	03c00084 	movi	r15,2
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
						2 * grayscale_array[(y)*array_width+(x+1)]   +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,(sum > 128) ? 0xFF : 0);
    2004:	03002004 	movi	r12,128
    2008:	4abfffc4 	addi	r10,r9,-1
    200c:	481d883a 	mov	r14,r9
	}



	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2010:	7880460e 	bge	r15,r2,212c <sobel_all_partial+0x1b4>
    2014:	4affff84 	addi	r11,r9,-2
    2018:	481d883a 	mov	r14,r9
    201c:	01c00044 	movi	r7,1
    2020:	00000606 	br	203c <sobel_all_partial+0xc4>
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
						2 * grayscale_array[(y)*array_width+(x+1)]   +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,(sum > 128) ? 0xFF : 0);
    2024:	00c03fc4 	movi	r3,255
    2028:	10c00025 	stbio	r3,0(r2)
	}



	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    202c:	d0a71f17 	ldw	r2,-25476(gp)
    2030:	400f883a 	mov	r7,r8
    2034:	10ffffc4 	addi	r3,r2,-1
    2038:	40c03c0e 	bge	r8,r3,212c <sobel_all_partial+0x1b4>
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
    203c:	d1670d17 	ldw	r5,-25548(gp)
    2040:	12c9383a 	mul	r4,r2,r11
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
    2044:	1269383a 	mul	r20,r2,r9
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
    2048:	3a000044 	addi	r8,r7,1

	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
    204c:	2925883a 	add	r18,r5,r4
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
    2050:	2d27883a 	add	r19,r5,r20

	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
    2054:	91c7883a 	add	r3,r18,r7
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    2058:	19800003 	ldbu	r6,0(r3)
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
    205c:	99c7883a 	add	r3,r19,r7
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    2060:	1d400003 	ldbu	r21,0(r3)
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
    2064:	2a3f883a 	add	ra,r5,r8
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
    2068:	9207883a 	add	r3,r18,r8
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    206c:	1c400003 	ldbu	r17,0(r3)
    2070:	3c3fffc4 	addi	r16,r7,-1
    2074:	318d883a 	add	r6,r6,r6
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
    2078:	fd29883a 	add	r20,ra,r20
			sum = ALT_CI_ABSOLUTE_0(value);
    207c:	3547c83a 	sub	r3,r6,r21


	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
    2080:	9425883a 	add	r18,r18,r16
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    2084:	a1800003 	ldbu	r6,0(r20)
    2088:	1d47c83a 	sub	r3,r3,r21
    208c:	94800003 	ldbu	r18,0(r18)
		for (x = 1 ; x < (array_width-1) ; x++) {
			value =
						1 * grayscale_array[(y-1)*array_width+(x-1)] +
						2 * grayscale_array[(y-1)*array_width+(x)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
    2090:	9c27883a 	add	r19,r19,r16
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    2094:	1c47883a 	add	r3,r3,r17
    2098:	9c400003 	ldbu	r17,0(r19)
    209c:	1987c83a 	sub	r3,r3,r6
    20a0:	1c87883a 	add	r3,r3,r18
    20a4:	1c47c83a 	sub	r3,r3,r17
    20a8:	18ffffcc 	andi	r3,r3,65535
    20ac:	18e0001c 	xori	r3,r3,32768
    20b0:	18e00004 	addi	r3,r3,-32768
    20b4:	1807c072 	custom	1,r3,r3,zero
			value =
						-1 * grayscale_array[(y-1)*array_width+(x-1)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
						2 * grayscale_array[(y)*array_width+(x+1)]   +
    20b8:	1285383a 	mul	r2,r2,r10
						-2 * grayscale_array[(y+1)*array_width+(x)] +
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
						-1 * grayscale_array[(y-1)*array_width+(x-1)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
    20bc:	f909883a 	add	r4,ra,r4
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
						2 * grayscale_array[(y)*array_width+(x+1)]   +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    20c0:	24c00003 	ldbu	r19,0(r4)
						-1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
						-1 * grayscale_array[(y-1)*array_width+(x-1)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
    20c4:	288b883a 	add	r5,r5,r2
    20c8:	2c0b883a 	add	r5,r5,r16
						2 * grayscale_array[(y)*array_width+(x+1)]   +
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    20cc:	29000003 	ldbu	r4,0(r5)
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
						-1 * grayscale_array[(y-1)*array_width+(x-1)] +
						1 * grayscale_array[(y-1)*array_width+(x+1)] +
						-2 * grayscale_array[(y)*array_width+(x-1)]   +
						2 * grayscale_array[(y)*array_width+(x+1)]   +
    20d0:	f8bf883a 	add	ra,ra,r2
						-1 * grayscale_array[(y+1)*array_width+(x-1)] +
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    20d4:	f9400003 	ldbu	r5,0(ra)
    20d8:	211fffe4 	muli	r4,r4,32767
    20dc:	998d883a 	add	r6,r19,r6
    20e0:	34a5c83a 	sub	r18,r6,r18
    20e4:	2149883a 	add	r4,r4,r5
    20e8:	9463c83a 	sub	r17,r18,r17
    20ec:	2109883a 	add	r4,r4,r4
    20f0:	8909883a 	add	r4,r17,r4
    20f4:	213fffcc 	andi	r4,r4,65535
    20f8:	2120001c 	xori	r4,r4,32768
    20fc:	21200004 	addi	r4,r4,-32768
    2100:	2009c072 	custom	1,r4,r4,zero
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,(sum > 128) ? 0xFF : 0);
    2104:	20c7883a 	add	r3,r4,r3
    2108:	11c5883a 	add	r2,r2,r7
    210c:	18ffffcc 	andi	r3,r3,65535
    2110:	d1e71417 	ldw	r7,-25520(gp)
    2114:	18e0001c 	xori	r3,r3,32768
    2118:	18e00004 	addi	r3,r3,-32768
    211c:	3885883a 	add	r2,r7,r2
    2120:	60ffc016 	blt	r12,r3,2024 <__alt_data_end+0xff002024>
    2124:	0007883a 	mov	r3,zero
    2128:	003fbf06 	br	2028 <__alt_data_end+0xff002028>
    212c:	4a400044 	addi	r9,r9,1
		}
	}



	for (y = from+1 ; y < (from+size-1) ; y++) {
    2130:	737fb516 	blt	r14,r13,2008 <__alt_data_end+0xff002008>
						1 * grayscale_array[(y+1)*array_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    2134:	dfc00617 	ldw	ra,24(sp)
    2138:	dd400517 	ldw	r21,20(sp)
    213c:	dd000417 	ldw	r20,16(sp)
    2140:	dcc00317 	ldw	r19,12(sp)
    2144:	dc800217 	ldw	r18,8(sp)
    2148:	dc400117 	ldw	r17,4(sp)
    214c:	dc000017 	ldw	r16,0(sp)
    2150:	dec00704 	addi	sp,sp,28
    2154:	f800283a 	ret

00002158 <GetSobelAllResult>:

unsigned char *GetSobelAllResult() {
	return sobel_result;
}
    2158:	d0a71417 	ldw	r2,-25520(gp)
    215c:	f800283a 	ret

00002160 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2160:	00804034 	movhi	r2,256
    2164:	10843404 	addi	r2,r2,4304
    2168:	11000035 	stwio	r4,0(r2)
    216c:	f800283a 	ret

00002170 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2170:	00804034 	movhi	r2,256
    2174:	10843504 	addi	r2,r2,4308
    2178:	11000025 	stbio	r4,0(r2)
    217c:	f800283a 	ret

00002180 <__divsi3>:
    2180:	20001b16 	blt	r4,zero,21f0 <__divsi3+0x70>
    2184:	000f883a 	mov	r7,zero
    2188:	28001616 	blt	r5,zero,21e4 <__divsi3+0x64>
    218c:	200d883a 	mov	r6,r4
    2190:	29001a2e 	bgeu	r5,r4,21fc <__divsi3+0x7c>
    2194:	00800804 	movi	r2,32
    2198:	00c00044 	movi	r3,1
    219c:	00000106 	br	21a4 <__divsi3+0x24>
    21a0:	10000d26 	beq	r2,zero,21d8 <__divsi3+0x58>
    21a4:	294b883a 	add	r5,r5,r5
    21a8:	10bfffc4 	addi	r2,r2,-1
    21ac:	18c7883a 	add	r3,r3,r3
    21b0:	293ffb36 	bltu	r5,r4,21a0 <__alt_data_end+0xff0021a0>
    21b4:	0005883a 	mov	r2,zero
    21b8:	18000726 	beq	r3,zero,21d8 <__divsi3+0x58>
    21bc:	0005883a 	mov	r2,zero
    21c0:	31400236 	bltu	r6,r5,21cc <__divsi3+0x4c>
    21c4:	314dc83a 	sub	r6,r6,r5
    21c8:	10c4b03a 	or	r2,r2,r3
    21cc:	1806d07a 	srli	r3,r3,1
    21d0:	280ad07a 	srli	r5,r5,1
    21d4:	183ffa1e 	bne	r3,zero,21c0 <__alt_data_end+0xff0021c0>
    21d8:	38000126 	beq	r7,zero,21e0 <__divsi3+0x60>
    21dc:	0085c83a 	sub	r2,zero,r2
    21e0:	f800283a 	ret
    21e4:	014bc83a 	sub	r5,zero,r5
    21e8:	39c0005c 	xori	r7,r7,1
    21ec:	003fe706 	br	218c <__alt_data_end+0xff00218c>
    21f0:	0109c83a 	sub	r4,zero,r4
    21f4:	01c00044 	movi	r7,1
    21f8:	003fe306 	br	2188 <__alt_data_end+0xff002188>
    21fc:	00c00044 	movi	r3,1
    2200:	003fee06 	br	21bc <__alt_data_end+0xff0021bc>

00002204 <__modsi3>:
    2204:	20001716 	blt	r4,zero,2264 <__modsi3+0x60>
    2208:	000f883a 	mov	r7,zero
    220c:	2005883a 	mov	r2,r4
    2210:	28001216 	blt	r5,zero,225c <__modsi3+0x58>
    2214:	2900162e 	bgeu	r5,r4,2270 <__modsi3+0x6c>
    2218:	01800804 	movi	r6,32
    221c:	00c00044 	movi	r3,1
    2220:	00000106 	br	2228 <__modsi3+0x24>
    2224:	30000a26 	beq	r6,zero,2250 <__modsi3+0x4c>
    2228:	294b883a 	add	r5,r5,r5
    222c:	31bfffc4 	addi	r6,r6,-1
    2230:	18c7883a 	add	r3,r3,r3
    2234:	293ffb36 	bltu	r5,r4,2224 <__alt_data_end+0xff002224>
    2238:	18000526 	beq	r3,zero,2250 <__modsi3+0x4c>
    223c:	1806d07a 	srli	r3,r3,1
    2240:	11400136 	bltu	r2,r5,2248 <__modsi3+0x44>
    2244:	1145c83a 	sub	r2,r2,r5
    2248:	280ad07a 	srli	r5,r5,1
    224c:	183ffb1e 	bne	r3,zero,223c <__alt_data_end+0xff00223c>
    2250:	38000126 	beq	r7,zero,2258 <__modsi3+0x54>
    2254:	0085c83a 	sub	r2,zero,r2
    2258:	f800283a 	ret
    225c:	014bc83a 	sub	r5,zero,r5
    2260:	003fec06 	br	2214 <__alt_data_end+0xff002214>
    2264:	0109c83a 	sub	r4,zero,r4
    2268:	01c00044 	movi	r7,1
    226c:	003fe706 	br	220c <__alt_data_end+0xff00220c>
    2270:	00c00044 	movi	r3,1
    2274:	003ff106 	br	223c <__alt_data_end+0xff00223c>

00002278 <__udivsi3>:
    2278:	200d883a 	mov	r6,r4
    227c:	2900152e 	bgeu	r5,r4,22d4 <__udivsi3+0x5c>
    2280:	28001416 	blt	r5,zero,22d4 <__udivsi3+0x5c>
    2284:	00800804 	movi	r2,32
    2288:	00c00044 	movi	r3,1
    228c:	00000206 	br	2298 <__udivsi3+0x20>
    2290:	10000e26 	beq	r2,zero,22cc <__udivsi3+0x54>
    2294:	28000516 	blt	r5,zero,22ac <__udivsi3+0x34>
    2298:	294b883a 	add	r5,r5,r5
    229c:	10bfffc4 	addi	r2,r2,-1
    22a0:	18c7883a 	add	r3,r3,r3
    22a4:	293ffa36 	bltu	r5,r4,2290 <__alt_data_end+0xff002290>
    22a8:	18000826 	beq	r3,zero,22cc <__udivsi3+0x54>
    22ac:	0005883a 	mov	r2,zero
    22b0:	31400236 	bltu	r6,r5,22bc <__udivsi3+0x44>
    22b4:	314dc83a 	sub	r6,r6,r5
    22b8:	10c4b03a 	or	r2,r2,r3
    22bc:	1806d07a 	srli	r3,r3,1
    22c0:	280ad07a 	srli	r5,r5,1
    22c4:	183ffa1e 	bne	r3,zero,22b0 <__alt_data_end+0xff0022b0>
    22c8:	f800283a 	ret
    22cc:	0005883a 	mov	r2,zero
    22d0:	f800283a 	ret
    22d4:	00c00044 	movi	r3,1
    22d8:	003ff406 	br	22ac <__alt_data_end+0xff0022ac>

000022dc <__umodsi3>:
    22dc:	2005883a 	mov	r2,r4
    22e0:	2900122e 	bgeu	r5,r4,232c <__umodsi3+0x50>
    22e4:	28001116 	blt	r5,zero,232c <__umodsi3+0x50>
    22e8:	01800804 	movi	r6,32
    22ec:	00c00044 	movi	r3,1
    22f0:	00000206 	br	22fc <__umodsi3+0x20>
    22f4:	30000c26 	beq	r6,zero,2328 <__umodsi3+0x4c>
    22f8:	28000516 	blt	r5,zero,2310 <__umodsi3+0x34>
    22fc:	294b883a 	add	r5,r5,r5
    2300:	31bfffc4 	addi	r6,r6,-1
    2304:	18c7883a 	add	r3,r3,r3
    2308:	293ffa36 	bltu	r5,r4,22f4 <__alt_data_end+0xff0022f4>
    230c:	18000626 	beq	r3,zero,2328 <__umodsi3+0x4c>
    2310:	1806d07a 	srli	r3,r3,1
    2314:	11400136 	bltu	r2,r5,231c <__umodsi3+0x40>
    2318:	1145c83a 	sub	r2,r2,r5
    231c:	280ad07a 	srli	r5,r5,1
    2320:	183ffb1e 	bne	r3,zero,2310 <__alt_data_end+0xff002310>
    2324:	f800283a 	ret
    2328:	f800283a 	ret
    232c:	00c00044 	movi	r3,1
    2330:	003ff706 	br	2310 <__alt_data_end+0xff002310>

00002334 <__divdf3>:
    2334:	defff204 	addi	sp,sp,-56
    2338:	dd400915 	stw	r21,36(sp)
    233c:	282ad53a 	srli	r21,r5,20
    2340:	dd000815 	stw	r20,32(sp)
    2344:	2828d7fa 	srli	r20,r5,31
    2348:	dc000415 	stw	r16,16(sp)
    234c:	04000434 	movhi	r16,16
    2350:	df000c15 	stw	fp,48(sp)
    2354:	843fffc4 	addi	r16,r16,-1
    2358:	dfc00d15 	stw	ra,52(sp)
    235c:	ddc00b15 	stw	r23,44(sp)
    2360:	dd800a15 	stw	r22,40(sp)
    2364:	dcc00715 	stw	r19,28(sp)
    2368:	dc800615 	stw	r18,24(sp)
    236c:	dc400515 	stw	r17,20(sp)
    2370:	ad41ffcc 	andi	r21,r21,2047
    2374:	2c20703a 	and	r16,r5,r16
    2378:	a7003fcc 	andi	fp,r20,255
    237c:	a8006126 	beq	r21,zero,2504 <__divdf3+0x1d0>
    2380:	0081ffc4 	movi	r2,2047
    2384:	2025883a 	mov	r18,r4
    2388:	a8803726 	beq	r21,r2,2468 <__divdf3+0x134>
    238c:	80800434 	orhi	r2,r16,16
    2390:	100490fa 	slli	r2,r2,3
    2394:	2020d77a 	srli	r16,r4,29
    2398:	202490fa 	slli	r18,r4,3
    239c:	ad7f0044 	addi	r21,r21,-1023
    23a0:	80a0b03a 	or	r16,r16,r2
    23a4:	0027883a 	mov	r19,zero
    23a8:	0013883a 	mov	r9,zero
    23ac:	3804d53a 	srli	r2,r7,20
    23b0:	382cd7fa 	srli	r22,r7,31
    23b4:	04400434 	movhi	r17,16
    23b8:	8c7fffc4 	addi	r17,r17,-1
    23bc:	1081ffcc 	andi	r2,r2,2047
    23c0:	3011883a 	mov	r8,r6
    23c4:	3c62703a 	and	r17,r7,r17
    23c8:	b5c03fcc 	andi	r23,r22,255
    23cc:	10006c26 	beq	r2,zero,2580 <__divdf3+0x24c>
    23d0:	00c1ffc4 	movi	r3,2047
    23d4:	10c06426 	beq	r2,r3,2568 <__divdf3+0x234>
    23d8:	88c00434 	orhi	r3,r17,16
    23dc:	180690fa 	slli	r3,r3,3
    23e0:	3022d77a 	srli	r17,r6,29
    23e4:	301090fa 	slli	r8,r6,3
    23e8:	10bf0044 	addi	r2,r2,-1023
    23ec:	88e2b03a 	or	r17,r17,r3
    23f0:	000f883a 	mov	r7,zero
    23f4:	a58cf03a 	xor	r6,r20,r22
    23f8:	3cc8b03a 	or	r4,r7,r19
    23fc:	a8abc83a 	sub	r21,r21,r2
    2400:	008003c4 	movi	r2,15
    2404:	3007883a 	mov	r3,r6
    2408:	34c03fcc 	andi	r19,r6,255
    240c:	11009036 	bltu	r2,r4,2650 <__divdf3+0x31c>
    2410:	200890ba 	slli	r4,r4,2
    2414:	00800034 	movhi	r2,0
    2418:	10890a04 	addi	r2,r2,9256
    241c:	2089883a 	add	r4,r4,r2
    2420:	20800017 	ldw	r2,0(r4)
    2424:	1000683a 	jmp	r2
    2428:	00002650 	cmplti	zero,zero,153
    242c:	000024a0 	cmpeqi	zero,zero,146
    2430:	00002640 	call	264 <_start+0x20>
    2434:	00002494 	movui	zero,146
    2438:	00002640 	call	264 <_start+0x20>
    243c:	00002614 	movui	zero,152
    2440:	00002640 	call	264 <_start+0x20>
    2444:	00002494 	movui	zero,146
    2448:	000024a0 	cmpeqi	zero,zero,146
    244c:	000024a0 	cmpeqi	zero,zero,146
    2450:	00002614 	movui	zero,152
    2454:	00002494 	movui	zero,146
    2458:	00002484 	movi	zero,146
    245c:	00002484 	movi	zero,146
    2460:	00002484 	movi	zero,146
    2464:	00002934 	movhi	zero,164
    2468:	2404b03a 	or	r2,r4,r16
    246c:	1000661e 	bne	r2,zero,2608 <__divdf3+0x2d4>
    2470:	04c00204 	movi	r19,8
    2474:	0021883a 	mov	r16,zero
    2478:	0025883a 	mov	r18,zero
    247c:	02400084 	movi	r9,2
    2480:	003fca06 	br	23ac <__alt_data_end+0xff0023ac>
    2484:	8023883a 	mov	r17,r16
    2488:	9011883a 	mov	r8,r18
    248c:	e02f883a 	mov	r23,fp
    2490:	480f883a 	mov	r7,r9
    2494:	00800084 	movi	r2,2
    2498:	3881311e 	bne	r7,r2,2960 <__divdf3+0x62c>
    249c:	b827883a 	mov	r19,r23
    24a0:	98c0004c 	andi	r3,r19,1
    24a4:	0081ffc4 	movi	r2,2047
    24a8:	000b883a 	mov	r5,zero
    24ac:	0025883a 	mov	r18,zero
    24b0:	1004953a 	slli	r2,r2,20
    24b4:	18c03fcc 	andi	r3,r3,255
    24b8:	04400434 	movhi	r17,16
    24bc:	8c7fffc4 	addi	r17,r17,-1
    24c0:	180697fa 	slli	r3,r3,31
    24c4:	2c4a703a 	and	r5,r5,r17
    24c8:	288ab03a 	or	r5,r5,r2
    24cc:	28c6b03a 	or	r3,r5,r3
    24d0:	9005883a 	mov	r2,r18
    24d4:	dfc00d17 	ldw	ra,52(sp)
    24d8:	df000c17 	ldw	fp,48(sp)
    24dc:	ddc00b17 	ldw	r23,44(sp)
    24e0:	dd800a17 	ldw	r22,40(sp)
    24e4:	dd400917 	ldw	r21,36(sp)
    24e8:	dd000817 	ldw	r20,32(sp)
    24ec:	dcc00717 	ldw	r19,28(sp)
    24f0:	dc800617 	ldw	r18,24(sp)
    24f4:	dc400517 	ldw	r17,20(sp)
    24f8:	dc000417 	ldw	r16,16(sp)
    24fc:	dec00e04 	addi	sp,sp,56
    2500:	f800283a 	ret
    2504:	2404b03a 	or	r2,r4,r16
    2508:	2027883a 	mov	r19,r4
    250c:	10003926 	beq	r2,zero,25f4 <__divdf3+0x2c0>
    2510:	80012e26 	beq	r16,zero,29cc <__divdf3+0x698>
    2514:	8009883a 	mov	r4,r16
    2518:	d9800315 	stw	r6,12(sp)
    251c:	d9c00215 	stw	r7,8(sp)
    2520:	0002cc40 	call	2cc4 <__clzsi2>
    2524:	d9800317 	ldw	r6,12(sp)
    2528:	d9c00217 	ldw	r7,8(sp)
    252c:	113ffd44 	addi	r4,r2,-11
    2530:	00c00704 	movi	r3,28
    2534:	19012116 	blt	r3,r4,29bc <__divdf3+0x688>
    2538:	00c00744 	movi	r3,29
    253c:	147ffe04 	addi	r17,r2,-8
    2540:	1907c83a 	sub	r3,r3,r4
    2544:	8460983a 	sll	r16,r16,r17
    2548:	98c6d83a 	srl	r3,r19,r3
    254c:	9c64983a 	sll	r18,r19,r17
    2550:	1c20b03a 	or	r16,r3,r16
    2554:	1080fcc4 	addi	r2,r2,1011
    2558:	00abc83a 	sub	r21,zero,r2
    255c:	0027883a 	mov	r19,zero
    2560:	0013883a 	mov	r9,zero
    2564:	003f9106 	br	23ac <__alt_data_end+0xff0023ac>
    2568:	3446b03a 	or	r3,r6,r17
    256c:	18001f1e 	bne	r3,zero,25ec <__divdf3+0x2b8>
    2570:	0023883a 	mov	r17,zero
    2574:	0011883a 	mov	r8,zero
    2578:	01c00084 	movi	r7,2
    257c:	003f9d06 	br	23f4 <__alt_data_end+0xff0023f4>
    2580:	3446b03a 	or	r3,r6,r17
    2584:	18001526 	beq	r3,zero,25dc <__divdf3+0x2a8>
    2588:	88011b26 	beq	r17,zero,29f8 <__divdf3+0x6c4>
    258c:	8809883a 	mov	r4,r17
    2590:	d9800315 	stw	r6,12(sp)
    2594:	da400115 	stw	r9,4(sp)
    2598:	0002cc40 	call	2cc4 <__clzsi2>
    259c:	d9800317 	ldw	r6,12(sp)
    25a0:	da400117 	ldw	r9,4(sp)
    25a4:	113ffd44 	addi	r4,r2,-11
    25a8:	00c00704 	movi	r3,28
    25ac:	19010e16 	blt	r3,r4,29e8 <__divdf3+0x6b4>
    25b0:	00c00744 	movi	r3,29
    25b4:	123ffe04 	addi	r8,r2,-8
    25b8:	1907c83a 	sub	r3,r3,r4
    25bc:	8a22983a 	sll	r17,r17,r8
    25c0:	30c6d83a 	srl	r3,r6,r3
    25c4:	3210983a 	sll	r8,r6,r8
    25c8:	1c62b03a 	or	r17,r3,r17
    25cc:	1080fcc4 	addi	r2,r2,1011
    25d0:	0085c83a 	sub	r2,zero,r2
    25d4:	000f883a 	mov	r7,zero
    25d8:	003f8606 	br	23f4 <__alt_data_end+0xff0023f4>
    25dc:	0023883a 	mov	r17,zero
    25e0:	0011883a 	mov	r8,zero
    25e4:	01c00044 	movi	r7,1
    25e8:	003f8206 	br	23f4 <__alt_data_end+0xff0023f4>
    25ec:	01c000c4 	movi	r7,3
    25f0:	003f8006 	br	23f4 <__alt_data_end+0xff0023f4>
    25f4:	04c00104 	movi	r19,4
    25f8:	0021883a 	mov	r16,zero
    25fc:	0025883a 	mov	r18,zero
    2600:	02400044 	movi	r9,1
    2604:	003f6906 	br	23ac <__alt_data_end+0xff0023ac>
    2608:	04c00304 	movi	r19,12
    260c:	024000c4 	movi	r9,3
    2610:	003f6606 	br	23ac <__alt_data_end+0xff0023ac>
    2614:	01400434 	movhi	r5,16
    2618:	0007883a 	mov	r3,zero
    261c:	297fffc4 	addi	r5,r5,-1
    2620:	04bfffc4 	movi	r18,-1
    2624:	0081ffc4 	movi	r2,2047
    2628:	003fa106 	br	24b0 <__alt_data_end+0xff0024b0>
    262c:	00c00044 	movi	r3,1
    2630:	1887c83a 	sub	r3,r3,r2
    2634:	01000e04 	movi	r4,56
    2638:	20c1210e 	bge	r4,r3,2ac0 <__divdf3+0x78c>
    263c:	98c0004c 	andi	r3,r19,1
    2640:	0005883a 	mov	r2,zero
    2644:	000b883a 	mov	r5,zero
    2648:	0025883a 	mov	r18,zero
    264c:	003f9806 	br	24b0 <__alt_data_end+0xff0024b0>
    2650:	8c00fd36 	bltu	r17,r16,2a48 <__divdf3+0x714>
    2654:	8440fb26 	beq	r16,r17,2a44 <__divdf3+0x710>
    2658:	8007883a 	mov	r3,r16
    265c:	ad7fffc4 	addi	r21,r21,-1
    2660:	0021883a 	mov	r16,zero
    2664:	4004d63a 	srli	r2,r8,24
    2668:	8822923a 	slli	r17,r17,8
    266c:	1809883a 	mov	r4,r3
    2670:	402c923a 	slli	r22,r8,8
    2674:	88b8b03a 	or	fp,r17,r2
    2678:	e028d43a 	srli	r20,fp,16
    267c:	d8c00015 	stw	r3,0(sp)
    2680:	e5ffffcc 	andi	r23,fp,65535
    2684:	a00b883a 	mov	r5,r20
    2688:	00022780 	call	2278 <__udivsi3>
    268c:	d8c00017 	ldw	r3,0(sp)
    2690:	a00b883a 	mov	r5,r20
    2694:	d8800315 	stw	r2,12(sp)
    2698:	1809883a 	mov	r4,r3
    269c:	00022dc0 	call	22dc <__umodsi3>
    26a0:	d9800317 	ldw	r6,12(sp)
    26a4:	1006943a 	slli	r3,r2,16
    26a8:	9004d43a 	srli	r2,r18,16
    26ac:	b9a3383a 	mul	r17,r23,r6
    26b0:	10c4b03a 	or	r2,r2,r3
    26b4:	1440062e 	bgeu	r2,r17,26d0 <__divdf3+0x39c>
    26b8:	1705883a 	add	r2,r2,fp
    26bc:	30ffffc4 	addi	r3,r6,-1
    26c0:	1700ee36 	bltu	r2,fp,2a7c <__divdf3+0x748>
    26c4:	1440ed2e 	bgeu	r2,r17,2a7c <__divdf3+0x748>
    26c8:	31bfff84 	addi	r6,r6,-2
    26cc:	1705883a 	add	r2,r2,fp
    26d0:	1463c83a 	sub	r17,r2,r17
    26d4:	a00b883a 	mov	r5,r20
    26d8:	8809883a 	mov	r4,r17
    26dc:	d9800315 	stw	r6,12(sp)
    26e0:	00022780 	call	2278 <__udivsi3>
    26e4:	a00b883a 	mov	r5,r20
    26e8:	8809883a 	mov	r4,r17
    26ec:	d8800215 	stw	r2,8(sp)
    26f0:	00022dc0 	call	22dc <__umodsi3>
    26f4:	d9c00217 	ldw	r7,8(sp)
    26f8:	1004943a 	slli	r2,r2,16
    26fc:	94bfffcc 	andi	r18,r18,65535
    2700:	b9d1383a 	mul	r8,r23,r7
    2704:	90a4b03a 	or	r18,r18,r2
    2708:	d9800317 	ldw	r6,12(sp)
    270c:	9200062e 	bgeu	r18,r8,2728 <__divdf3+0x3f4>
    2710:	9725883a 	add	r18,r18,fp
    2714:	38bfffc4 	addi	r2,r7,-1
    2718:	9700d636 	bltu	r18,fp,2a74 <__divdf3+0x740>
    271c:	9200d52e 	bgeu	r18,r8,2a74 <__divdf3+0x740>
    2720:	39ffff84 	addi	r7,r7,-2
    2724:	9725883a 	add	r18,r18,fp
    2728:	3004943a 	slli	r2,r6,16
    272c:	b012d43a 	srli	r9,r22,16
    2730:	b1bfffcc 	andi	r6,r22,65535
    2734:	11e2b03a 	or	r17,r2,r7
    2738:	8806d43a 	srli	r3,r17,16
    273c:	893fffcc 	andi	r4,r17,65535
    2740:	218b383a 	mul	r5,r4,r6
    2744:	30c5383a 	mul	r2,r6,r3
    2748:	2249383a 	mul	r4,r4,r9
    274c:	280ed43a 	srli	r7,r5,16
    2750:	9225c83a 	sub	r18,r18,r8
    2754:	2089883a 	add	r4,r4,r2
    2758:	3909883a 	add	r4,r7,r4
    275c:	1a47383a 	mul	r3,r3,r9
    2760:	2080022e 	bgeu	r4,r2,276c <__divdf3+0x438>
    2764:	00800074 	movhi	r2,1
    2768:	1887883a 	add	r3,r3,r2
    276c:	2004d43a 	srli	r2,r4,16
    2770:	2008943a 	slli	r4,r4,16
    2774:	297fffcc 	andi	r5,r5,65535
    2778:	10c7883a 	add	r3,r2,r3
    277c:	2149883a 	add	r4,r4,r5
    2780:	90c0a536 	bltu	r18,r3,2a18 <__divdf3+0x6e4>
    2784:	90c0bf26 	beq	r18,r3,2a84 <__divdf3+0x750>
    2788:	90c7c83a 	sub	r3,r18,r3
    278c:	810fc83a 	sub	r7,r16,r4
    2790:	81e5803a 	cmpltu	r18,r16,r7
    2794:	1ca5c83a 	sub	r18,r3,r18
    2798:	e480c126 	beq	fp,r18,2aa0 <__divdf3+0x76c>
    279c:	a00b883a 	mov	r5,r20
    27a0:	9009883a 	mov	r4,r18
    27a4:	d9800315 	stw	r6,12(sp)
    27a8:	d9c00215 	stw	r7,8(sp)
    27ac:	da400115 	stw	r9,4(sp)
    27b0:	00022780 	call	2278 <__udivsi3>
    27b4:	a00b883a 	mov	r5,r20
    27b8:	9009883a 	mov	r4,r18
    27bc:	d8800015 	stw	r2,0(sp)
    27c0:	00022dc0 	call	22dc <__umodsi3>
    27c4:	d9c00217 	ldw	r7,8(sp)
    27c8:	da000017 	ldw	r8,0(sp)
    27cc:	1006943a 	slli	r3,r2,16
    27d0:	3804d43a 	srli	r2,r7,16
    27d4:	ba21383a 	mul	r16,r23,r8
    27d8:	d9800317 	ldw	r6,12(sp)
    27dc:	10c4b03a 	or	r2,r2,r3
    27e0:	da400117 	ldw	r9,4(sp)
    27e4:	1400062e 	bgeu	r2,r16,2800 <__divdf3+0x4cc>
    27e8:	1705883a 	add	r2,r2,fp
    27ec:	40ffffc4 	addi	r3,r8,-1
    27f0:	1700ad36 	bltu	r2,fp,2aa8 <__divdf3+0x774>
    27f4:	1400ac2e 	bgeu	r2,r16,2aa8 <__divdf3+0x774>
    27f8:	423fff84 	addi	r8,r8,-2
    27fc:	1705883a 	add	r2,r2,fp
    2800:	1421c83a 	sub	r16,r2,r16
    2804:	a00b883a 	mov	r5,r20
    2808:	8009883a 	mov	r4,r16
    280c:	d9800315 	stw	r6,12(sp)
    2810:	d9c00215 	stw	r7,8(sp)
    2814:	da000015 	stw	r8,0(sp)
    2818:	da400115 	stw	r9,4(sp)
    281c:	00022780 	call	2278 <__udivsi3>
    2820:	8009883a 	mov	r4,r16
    2824:	a00b883a 	mov	r5,r20
    2828:	1025883a 	mov	r18,r2
    282c:	00022dc0 	call	22dc <__umodsi3>
    2830:	d9c00217 	ldw	r7,8(sp)
    2834:	1004943a 	slli	r2,r2,16
    2838:	bcaf383a 	mul	r23,r23,r18
    283c:	393fffcc 	andi	r4,r7,65535
    2840:	2088b03a 	or	r4,r4,r2
    2844:	d9800317 	ldw	r6,12(sp)
    2848:	da000017 	ldw	r8,0(sp)
    284c:	da400117 	ldw	r9,4(sp)
    2850:	25c0062e 	bgeu	r4,r23,286c <__divdf3+0x538>
    2854:	2709883a 	add	r4,r4,fp
    2858:	90bfffc4 	addi	r2,r18,-1
    285c:	27009436 	bltu	r4,fp,2ab0 <__divdf3+0x77c>
    2860:	25c0932e 	bgeu	r4,r23,2ab0 <__divdf3+0x77c>
    2864:	94bfff84 	addi	r18,r18,-2
    2868:	2709883a 	add	r4,r4,fp
    286c:	4004943a 	slli	r2,r8,16
    2870:	25efc83a 	sub	r23,r4,r23
    2874:	1490b03a 	or	r8,r2,r18
    2878:	4008d43a 	srli	r4,r8,16
    287c:	40ffffcc 	andi	r3,r8,65535
    2880:	30c5383a 	mul	r2,r6,r3
    2884:	1a47383a 	mul	r3,r3,r9
    2888:	310d383a 	mul	r6,r6,r4
    288c:	100ad43a 	srli	r5,r2,16
    2890:	4913383a 	mul	r9,r9,r4
    2894:	1987883a 	add	r3,r3,r6
    2898:	28c7883a 	add	r3,r5,r3
    289c:	1980022e 	bgeu	r3,r6,28a8 <__divdf3+0x574>
    28a0:	01000074 	movhi	r4,1
    28a4:	4913883a 	add	r9,r9,r4
    28a8:	1808d43a 	srli	r4,r3,16
    28ac:	1806943a 	slli	r3,r3,16
    28b0:	10bfffcc 	andi	r2,r2,65535
    28b4:	2253883a 	add	r9,r4,r9
    28b8:	1887883a 	add	r3,r3,r2
    28bc:	ba403836 	bltu	r23,r9,29a0 <__divdf3+0x66c>
    28c0:	ba403626 	beq	r23,r9,299c <__divdf3+0x668>
    28c4:	42000054 	ori	r8,r8,1
    28c8:	a880ffc4 	addi	r2,r21,1023
    28cc:	00bf570e 	bge	zero,r2,262c <__alt_data_end+0xff00262c>
    28d0:	40c001cc 	andi	r3,r8,7
    28d4:	18000726 	beq	r3,zero,28f4 <__divdf3+0x5c0>
    28d8:	40c003cc 	andi	r3,r8,15
    28dc:	01000104 	movi	r4,4
    28e0:	19000426 	beq	r3,r4,28f4 <__divdf3+0x5c0>
    28e4:	4107883a 	add	r3,r8,r4
    28e8:	1a11803a 	cmpltu	r8,r3,r8
    28ec:	8a23883a 	add	r17,r17,r8
    28f0:	1811883a 	mov	r8,r3
    28f4:	88c0402c 	andhi	r3,r17,256
    28f8:	18000426 	beq	r3,zero,290c <__divdf3+0x5d8>
    28fc:	00ffc034 	movhi	r3,65280
    2900:	18ffffc4 	addi	r3,r3,-1
    2904:	a8810004 	addi	r2,r21,1024
    2908:	88e2703a 	and	r17,r17,r3
    290c:	00c1ff84 	movi	r3,2046
    2910:	18bee316 	blt	r3,r2,24a0 <__alt_data_end+0xff0024a0>
    2914:	8824977a 	slli	r18,r17,29
    2918:	4010d0fa 	srli	r8,r8,3
    291c:	8822927a 	slli	r17,r17,9
    2920:	1081ffcc 	andi	r2,r2,2047
    2924:	9224b03a 	or	r18,r18,r8
    2928:	880ad33a 	srli	r5,r17,12
    292c:	98c0004c 	andi	r3,r19,1
    2930:	003edf06 	br	24b0 <__alt_data_end+0xff0024b0>
    2934:	8080022c 	andhi	r2,r16,8
    2938:	10001226 	beq	r2,zero,2984 <__divdf3+0x650>
    293c:	8880022c 	andhi	r2,r17,8
    2940:	1000101e 	bne	r2,zero,2984 <__divdf3+0x650>
    2944:	00800434 	movhi	r2,16
    2948:	89400234 	orhi	r5,r17,8
    294c:	10bfffc4 	addi	r2,r2,-1
    2950:	b007883a 	mov	r3,r22
    2954:	288a703a 	and	r5,r5,r2
    2958:	4025883a 	mov	r18,r8
    295c:	003f3106 	br	2624 <__alt_data_end+0xff002624>
    2960:	008000c4 	movi	r2,3
    2964:	3880a626 	beq	r7,r2,2c00 <__divdf3+0x8cc>
    2968:	00800044 	movi	r2,1
    296c:	3880521e 	bne	r7,r2,2ab8 <__divdf3+0x784>
    2970:	b807883a 	mov	r3,r23
    2974:	0005883a 	mov	r2,zero
    2978:	000b883a 	mov	r5,zero
    297c:	0025883a 	mov	r18,zero
    2980:	003ecb06 	br	24b0 <__alt_data_end+0xff0024b0>
    2984:	00800434 	movhi	r2,16
    2988:	81400234 	orhi	r5,r16,8
    298c:	10bfffc4 	addi	r2,r2,-1
    2990:	a007883a 	mov	r3,r20
    2994:	288a703a 	and	r5,r5,r2
    2998:	003f2206 	br	2624 <__alt_data_end+0xff002624>
    299c:	183fca26 	beq	r3,zero,28c8 <__alt_data_end+0xff0028c8>
    29a0:	e5ef883a 	add	r23,fp,r23
    29a4:	40bfffc4 	addi	r2,r8,-1
    29a8:	bf00392e 	bgeu	r23,fp,2a90 <__divdf3+0x75c>
    29ac:	1011883a 	mov	r8,r2
    29b0:	ba7fc41e 	bne	r23,r9,28c4 <__alt_data_end+0xff0028c4>
    29b4:	b0ffc31e 	bne	r22,r3,28c4 <__alt_data_end+0xff0028c4>
    29b8:	003fc306 	br	28c8 <__alt_data_end+0xff0028c8>
    29bc:	143ff604 	addi	r16,r2,-40
    29c0:	9c20983a 	sll	r16,r19,r16
    29c4:	0025883a 	mov	r18,zero
    29c8:	003ee206 	br	2554 <__alt_data_end+0xff002554>
    29cc:	d9800315 	stw	r6,12(sp)
    29d0:	d9c00215 	stw	r7,8(sp)
    29d4:	0002cc40 	call	2cc4 <__clzsi2>
    29d8:	10800804 	addi	r2,r2,32
    29dc:	d9c00217 	ldw	r7,8(sp)
    29e0:	d9800317 	ldw	r6,12(sp)
    29e4:	003ed106 	br	252c <__alt_data_end+0xff00252c>
    29e8:	147ff604 	addi	r17,r2,-40
    29ec:	3462983a 	sll	r17,r6,r17
    29f0:	0011883a 	mov	r8,zero
    29f4:	003ef506 	br	25cc <__alt_data_end+0xff0025cc>
    29f8:	3009883a 	mov	r4,r6
    29fc:	d9800315 	stw	r6,12(sp)
    2a00:	da400115 	stw	r9,4(sp)
    2a04:	0002cc40 	call	2cc4 <__clzsi2>
    2a08:	10800804 	addi	r2,r2,32
    2a0c:	da400117 	ldw	r9,4(sp)
    2a10:	d9800317 	ldw	r6,12(sp)
    2a14:	003ee306 	br	25a4 <__alt_data_end+0xff0025a4>
    2a18:	85a1883a 	add	r16,r16,r22
    2a1c:	8585803a 	cmpltu	r2,r16,r22
    2a20:	1705883a 	add	r2,r2,fp
    2a24:	14a5883a 	add	r18,r2,r18
    2a28:	88bfffc4 	addi	r2,r17,-1
    2a2c:	e4800c2e 	bgeu	fp,r18,2a60 <__divdf3+0x72c>
    2a30:	90c03e36 	bltu	r18,r3,2b2c <__divdf3+0x7f8>
    2a34:	1c806926 	beq	r3,r18,2bdc <__divdf3+0x8a8>
    2a38:	90c7c83a 	sub	r3,r18,r3
    2a3c:	1023883a 	mov	r17,r2
    2a40:	003f5206 	br	278c <__alt_data_end+0xff00278c>
    2a44:	923f0436 	bltu	r18,r8,2658 <__alt_data_end+0xff002658>
    2a48:	800897fa 	slli	r4,r16,31
    2a4c:	9004d07a 	srli	r2,r18,1
    2a50:	8006d07a 	srli	r3,r16,1
    2a54:	902097fa 	slli	r16,r18,31
    2a58:	20a4b03a 	or	r18,r4,r2
    2a5c:	003f0106 	br	2664 <__alt_data_end+0xff002664>
    2a60:	e4bff51e 	bne	fp,r18,2a38 <__alt_data_end+0xff002a38>
    2a64:	85bff22e 	bgeu	r16,r22,2a30 <__alt_data_end+0xff002a30>
    2a68:	e0c7c83a 	sub	r3,fp,r3
    2a6c:	1023883a 	mov	r17,r2
    2a70:	003f4606 	br	278c <__alt_data_end+0xff00278c>
    2a74:	100f883a 	mov	r7,r2
    2a78:	003f2b06 	br	2728 <__alt_data_end+0xff002728>
    2a7c:	180d883a 	mov	r6,r3
    2a80:	003f1306 	br	26d0 <__alt_data_end+0xff0026d0>
    2a84:	813fe436 	bltu	r16,r4,2a18 <__alt_data_end+0xff002a18>
    2a88:	0007883a 	mov	r3,zero
    2a8c:	003f3f06 	br	278c <__alt_data_end+0xff00278c>
    2a90:	ba402c36 	bltu	r23,r9,2b44 <__divdf3+0x810>
    2a94:	4dc05426 	beq	r9,r23,2be8 <__divdf3+0x8b4>
    2a98:	1011883a 	mov	r8,r2
    2a9c:	003f8906 	br	28c4 <__alt_data_end+0xff0028c4>
    2aa0:	023fffc4 	movi	r8,-1
    2aa4:	003f8806 	br	28c8 <__alt_data_end+0xff0028c8>
    2aa8:	1811883a 	mov	r8,r3
    2aac:	003f5406 	br	2800 <__alt_data_end+0xff002800>
    2ab0:	1025883a 	mov	r18,r2
    2ab4:	003f6d06 	br	286c <__alt_data_end+0xff00286c>
    2ab8:	b827883a 	mov	r19,r23
    2abc:	003f8206 	br	28c8 <__alt_data_end+0xff0028c8>
    2ac0:	010007c4 	movi	r4,31
    2ac4:	20c02616 	blt	r4,r3,2b60 <__divdf3+0x82c>
    2ac8:	00800804 	movi	r2,32
    2acc:	10c5c83a 	sub	r2,r2,r3
    2ad0:	888a983a 	sll	r5,r17,r2
    2ad4:	40c8d83a 	srl	r4,r8,r3
    2ad8:	4084983a 	sll	r2,r8,r2
    2adc:	88e2d83a 	srl	r17,r17,r3
    2ae0:	2906b03a 	or	r3,r5,r4
    2ae4:	1004c03a 	cmpne	r2,r2,zero
    2ae8:	1886b03a 	or	r3,r3,r2
    2aec:	188001cc 	andi	r2,r3,7
    2af0:	10000726 	beq	r2,zero,2b10 <__divdf3+0x7dc>
    2af4:	188003cc 	andi	r2,r3,15
    2af8:	01000104 	movi	r4,4
    2afc:	11000426 	beq	r2,r4,2b10 <__divdf3+0x7dc>
    2b00:	1805883a 	mov	r2,r3
    2b04:	10c00104 	addi	r3,r2,4
    2b08:	1885803a 	cmpltu	r2,r3,r2
    2b0c:	88a3883a 	add	r17,r17,r2
    2b10:	8880202c 	andhi	r2,r17,128
    2b14:	10002726 	beq	r2,zero,2bb4 <__divdf3+0x880>
    2b18:	98c0004c 	andi	r3,r19,1
    2b1c:	00800044 	movi	r2,1
    2b20:	000b883a 	mov	r5,zero
    2b24:	0025883a 	mov	r18,zero
    2b28:	003e6106 	br	24b0 <__alt_data_end+0xff0024b0>
    2b2c:	85a1883a 	add	r16,r16,r22
    2b30:	8585803a 	cmpltu	r2,r16,r22
    2b34:	1705883a 	add	r2,r2,fp
    2b38:	14a5883a 	add	r18,r2,r18
    2b3c:	8c7fff84 	addi	r17,r17,-2
    2b40:	003f1106 	br	2788 <__alt_data_end+0xff002788>
    2b44:	b589883a 	add	r4,r22,r22
    2b48:	25ad803a 	cmpltu	r22,r4,r22
    2b4c:	b739883a 	add	fp,r22,fp
    2b50:	40bfff84 	addi	r2,r8,-2
    2b54:	bf2f883a 	add	r23,r23,fp
    2b58:	202d883a 	mov	r22,r4
    2b5c:	003f9306 	br	29ac <__alt_data_end+0xff0029ac>
    2b60:	013ff844 	movi	r4,-31
    2b64:	2085c83a 	sub	r2,r4,r2
    2b68:	8888d83a 	srl	r4,r17,r2
    2b6c:	00800804 	movi	r2,32
    2b70:	18802126 	beq	r3,r2,2bf8 <__divdf3+0x8c4>
    2b74:	00801004 	movi	r2,64
    2b78:	10c5c83a 	sub	r2,r2,r3
    2b7c:	8884983a 	sll	r2,r17,r2
    2b80:	1204b03a 	or	r2,r2,r8
    2b84:	1004c03a 	cmpne	r2,r2,zero
    2b88:	2084b03a 	or	r2,r4,r2
    2b8c:	144001cc 	andi	r17,r2,7
    2b90:	88000d1e 	bne	r17,zero,2bc8 <__divdf3+0x894>
    2b94:	000b883a 	mov	r5,zero
    2b98:	1024d0fa 	srli	r18,r2,3
    2b9c:	98c0004c 	andi	r3,r19,1
    2ba0:	0005883a 	mov	r2,zero
    2ba4:	9464b03a 	or	r18,r18,r17
    2ba8:	003e4106 	br	24b0 <__alt_data_end+0xff0024b0>
    2bac:	1007883a 	mov	r3,r2
    2bb0:	0023883a 	mov	r17,zero
    2bb4:	880a927a 	slli	r5,r17,9
    2bb8:	1805883a 	mov	r2,r3
    2bbc:	8822977a 	slli	r17,r17,29
    2bc0:	280ad33a 	srli	r5,r5,12
    2bc4:	003ff406 	br	2b98 <__alt_data_end+0xff002b98>
    2bc8:	10c003cc 	andi	r3,r2,15
    2bcc:	01000104 	movi	r4,4
    2bd0:	193ff626 	beq	r3,r4,2bac <__alt_data_end+0xff002bac>
    2bd4:	0023883a 	mov	r17,zero
    2bd8:	003fca06 	br	2b04 <__alt_data_end+0xff002b04>
    2bdc:	813fd336 	bltu	r16,r4,2b2c <__alt_data_end+0xff002b2c>
    2be0:	1023883a 	mov	r17,r2
    2be4:	003fa806 	br	2a88 <__alt_data_end+0xff002a88>
    2be8:	b0ffd636 	bltu	r22,r3,2b44 <__alt_data_end+0xff002b44>
    2bec:	1011883a 	mov	r8,r2
    2bf0:	b0ff341e 	bne	r22,r3,28c4 <__alt_data_end+0xff0028c4>
    2bf4:	003f3406 	br	28c8 <__alt_data_end+0xff0028c8>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	003fe006 	br	2b80 <__alt_data_end+0xff002b80>
    2c00:	00800434 	movhi	r2,16
    2c04:	89400234 	orhi	r5,r17,8
    2c08:	10bfffc4 	addi	r2,r2,-1
    2c0c:	b807883a 	mov	r3,r23
    2c10:	288a703a 	and	r5,r5,r2
    2c14:	4025883a 	mov	r18,r8
    2c18:	003e8206 	br	2624 <__alt_data_end+0xff002624>

00002c1c <__floatunsidf>:
    2c1c:	defffe04 	addi	sp,sp,-8
    2c20:	dc000015 	stw	r16,0(sp)
    2c24:	dfc00115 	stw	ra,4(sp)
    2c28:	2021883a 	mov	r16,r4
    2c2c:	20002226 	beq	r4,zero,2cb8 <__floatunsidf+0x9c>
    2c30:	0002cc40 	call	2cc4 <__clzsi2>
    2c34:	01010784 	movi	r4,1054
    2c38:	2089c83a 	sub	r4,r4,r2
    2c3c:	01810cc4 	movi	r6,1075
    2c40:	310dc83a 	sub	r6,r6,r4
    2c44:	00c007c4 	movi	r3,31
    2c48:	1980120e 	bge	r3,r6,2c94 <__floatunsidf+0x78>
    2c4c:	00c104c4 	movi	r3,1043
    2c50:	1907c83a 	sub	r3,r3,r4
    2c54:	80ca983a 	sll	r5,r16,r3
    2c58:	00800434 	movhi	r2,16
    2c5c:	10bfffc4 	addi	r2,r2,-1
    2c60:	2101ffcc 	andi	r4,r4,2047
    2c64:	0021883a 	mov	r16,zero
    2c68:	288a703a 	and	r5,r5,r2
    2c6c:	2008953a 	slli	r4,r4,20
    2c70:	00c00434 	movhi	r3,16
    2c74:	18ffffc4 	addi	r3,r3,-1
    2c78:	28c6703a 	and	r3,r5,r3
    2c7c:	8005883a 	mov	r2,r16
    2c80:	1906b03a 	or	r3,r3,r4
    2c84:	dfc00117 	ldw	ra,4(sp)
    2c88:	dc000017 	ldw	r16,0(sp)
    2c8c:	dec00204 	addi	sp,sp,8
    2c90:	f800283a 	ret
    2c94:	00c002c4 	movi	r3,11
    2c98:	188bc83a 	sub	r5,r3,r2
    2c9c:	814ad83a 	srl	r5,r16,r5
    2ca0:	00c00434 	movhi	r3,16
    2ca4:	18ffffc4 	addi	r3,r3,-1
    2ca8:	81a0983a 	sll	r16,r16,r6
    2cac:	2101ffcc 	andi	r4,r4,2047
    2cb0:	28ca703a 	and	r5,r5,r3
    2cb4:	003fed06 	br	2c6c <__alt_data_end+0xff002c6c>
    2cb8:	0009883a 	mov	r4,zero
    2cbc:	000b883a 	mov	r5,zero
    2cc0:	003fea06 	br	2c6c <__alt_data_end+0xff002c6c>

00002cc4 <__clzsi2>:
    2cc4:	00bfffd4 	movui	r2,65535
    2cc8:	11000536 	bltu	r2,r4,2ce0 <__clzsi2+0x1c>
    2ccc:	00803fc4 	movi	r2,255
    2cd0:	11000f36 	bltu	r2,r4,2d10 <__clzsi2+0x4c>
    2cd4:	00800804 	movi	r2,32
    2cd8:	0007883a 	mov	r3,zero
    2cdc:	00000506 	br	2cf4 <__clzsi2+0x30>
    2ce0:	00804034 	movhi	r2,256
    2ce4:	10bfffc4 	addi	r2,r2,-1
    2ce8:	11000c2e 	bgeu	r2,r4,2d1c <__clzsi2+0x58>
    2cec:	00800204 	movi	r2,8
    2cf0:	00c00604 	movi	r3,24
    2cf4:	20c8d83a 	srl	r4,r4,r3
    2cf8:	00c00074 	movhi	r3,1
    2cfc:	18c67dc4 	addi	r3,r3,6647
    2d00:	1909883a 	add	r4,r3,r4
    2d04:	20c00003 	ldbu	r3,0(r4)
    2d08:	10c5c83a 	sub	r2,r2,r3
    2d0c:	f800283a 	ret
    2d10:	00800604 	movi	r2,24
    2d14:	00c00204 	movi	r3,8
    2d18:	003ff606 	br	2cf4 <__alt_data_end+0xff002cf4>
    2d1c:	00800404 	movi	r2,16
    2d20:	1007883a 	mov	r3,r2
    2d24:	003ff306 	br	2cf4 <__alt_data_end+0xff002cf4>

00002d28 <malloc>:
    2d28:	00800074 	movhi	r2,1
    2d2c:	108e2904 	addi	r2,r2,14500
    2d30:	200b883a 	mov	r5,r4
    2d34:	11000017 	ldw	r4,0(r2)
    2d38:	0002d501 	jmpi	2d50 <_malloc_r>

00002d3c <free>:
    2d3c:	00800074 	movhi	r2,1
    2d40:	108e2904 	addi	r2,r2,14500
    2d44:	200b883a 	mov	r5,r4
    2d48:	11000017 	ldw	r4,0(r2)
    2d4c:	0007ba01 	jmpi	7ba0 <_free_r>

00002d50 <_malloc_r>:
    2d50:	defff504 	addi	sp,sp,-44
    2d54:	dc800315 	stw	r18,12(sp)
    2d58:	dfc00a15 	stw	ra,40(sp)
    2d5c:	df000915 	stw	fp,36(sp)
    2d60:	ddc00815 	stw	r23,32(sp)
    2d64:	dd800715 	stw	r22,28(sp)
    2d68:	dd400615 	stw	r21,24(sp)
    2d6c:	dd000515 	stw	r20,20(sp)
    2d70:	dcc00415 	stw	r19,16(sp)
    2d74:	dc400215 	stw	r17,8(sp)
    2d78:	dc000115 	stw	r16,4(sp)
    2d7c:	288002c4 	addi	r2,r5,11
    2d80:	00c00584 	movi	r3,22
    2d84:	2025883a 	mov	r18,r4
    2d88:	18807f2e 	bgeu	r3,r2,2f88 <_malloc_r+0x238>
    2d8c:	047ffe04 	movi	r17,-8
    2d90:	1462703a 	and	r17,r2,r17
    2d94:	8800a316 	blt	r17,zero,3024 <_malloc_r+0x2d4>
    2d98:	8940a236 	bltu	r17,r5,3024 <_malloc_r+0x2d4>
    2d9c:	000f0440 	call	f044 <__malloc_lock>
    2da0:	00807dc4 	movi	r2,503
    2da4:	1441e92e 	bgeu	r2,r17,354c <_malloc_r+0x7fc>
    2da8:	8804d27a 	srli	r2,r17,9
    2dac:	1000a126 	beq	r2,zero,3034 <_malloc_r+0x2e4>
    2db0:	00c00104 	movi	r3,4
    2db4:	18811e36 	bltu	r3,r2,3230 <_malloc_r+0x4e0>
    2db8:	8804d1ba 	srli	r2,r17,6
    2dbc:	12000e44 	addi	r8,r2,57
    2dc0:	11c00e04 	addi	r7,r2,56
    2dc4:	4209883a 	add	r4,r8,r8
    2dc8:	04c00074 	movhi	r19,1
    2dcc:	2109883a 	add	r4,r4,r4
    2dd0:	9cc77b04 	addi	r19,r19,7660
    2dd4:	2109883a 	add	r4,r4,r4
    2dd8:	9909883a 	add	r4,r19,r4
    2ddc:	24000117 	ldw	r16,4(r4)
    2de0:	213ffe04 	addi	r4,r4,-8
    2de4:	24009726 	beq	r4,r16,3044 <_malloc_r+0x2f4>
    2de8:	80800117 	ldw	r2,4(r16)
    2dec:	01bfff04 	movi	r6,-4
    2df0:	014003c4 	movi	r5,15
    2df4:	1184703a 	and	r2,r2,r6
    2df8:	1447c83a 	sub	r3,r2,r17
    2dfc:	28c00716 	blt	r5,r3,2e1c <_malloc_r+0xcc>
    2e00:	1800920e 	bge	r3,zero,304c <_malloc_r+0x2fc>
    2e04:	84000317 	ldw	r16,12(r16)
    2e08:	24008e26 	beq	r4,r16,3044 <_malloc_r+0x2f4>
    2e0c:	80800117 	ldw	r2,4(r16)
    2e10:	1184703a 	and	r2,r2,r6
    2e14:	1447c83a 	sub	r3,r2,r17
    2e18:	28fff90e 	bge	r5,r3,2e00 <__alt_data_end+0xff002e00>
    2e1c:	3809883a 	mov	r4,r7
    2e20:	01800074 	movhi	r6,1
    2e24:	9c000417 	ldw	r16,16(r19)
    2e28:	31877b04 	addi	r6,r6,7660
    2e2c:	32000204 	addi	r8,r6,8
    2e30:	82013426 	beq	r16,r8,3304 <_malloc_r+0x5b4>
    2e34:	80c00117 	ldw	r3,4(r16)
    2e38:	00bfff04 	movi	r2,-4
    2e3c:	188e703a 	and	r7,r3,r2
    2e40:	3c45c83a 	sub	r2,r7,r17
    2e44:	00c003c4 	movi	r3,15
    2e48:	18811f16 	blt	r3,r2,32c8 <_malloc_r+0x578>
    2e4c:	32000515 	stw	r8,20(r6)
    2e50:	32000415 	stw	r8,16(r6)
    2e54:	10007f0e 	bge	r2,zero,3054 <_malloc_r+0x304>
    2e58:	00807fc4 	movi	r2,511
    2e5c:	11c0fd36 	bltu	r2,r7,3254 <_malloc_r+0x504>
    2e60:	3806d0fa 	srli	r3,r7,3
    2e64:	01c00044 	movi	r7,1
    2e68:	30800117 	ldw	r2,4(r6)
    2e6c:	19400044 	addi	r5,r3,1
    2e70:	294b883a 	add	r5,r5,r5
    2e74:	1807d0ba 	srai	r3,r3,2
    2e78:	294b883a 	add	r5,r5,r5
    2e7c:	294b883a 	add	r5,r5,r5
    2e80:	298b883a 	add	r5,r5,r6
    2e84:	38c6983a 	sll	r3,r7,r3
    2e88:	29c00017 	ldw	r7,0(r5)
    2e8c:	2a7ffe04 	addi	r9,r5,-8
    2e90:	1886b03a 	or	r3,r3,r2
    2e94:	82400315 	stw	r9,12(r16)
    2e98:	81c00215 	stw	r7,8(r16)
    2e9c:	30c00115 	stw	r3,4(r6)
    2ea0:	2c000015 	stw	r16,0(r5)
    2ea4:	3c000315 	stw	r16,12(r7)
    2ea8:	2005d0ba 	srai	r2,r4,2
    2eac:	01400044 	movi	r5,1
    2eb0:	288a983a 	sll	r5,r5,r2
    2eb4:	19406f36 	bltu	r3,r5,3074 <_malloc_r+0x324>
    2eb8:	28c4703a 	and	r2,r5,r3
    2ebc:	10000a1e 	bne	r2,zero,2ee8 <_malloc_r+0x198>
    2ec0:	00bfff04 	movi	r2,-4
    2ec4:	294b883a 	add	r5,r5,r5
    2ec8:	2088703a 	and	r4,r4,r2
    2ecc:	28c4703a 	and	r2,r5,r3
    2ed0:	21000104 	addi	r4,r4,4
    2ed4:	1000041e 	bne	r2,zero,2ee8 <_malloc_r+0x198>
    2ed8:	294b883a 	add	r5,r5,r5
    2edc:	28c4703a 	and	r2,r5,r3
    2ee0:	21000104 	addi	r4,r4,4
    2ee4:	103ffc26 	beq	r2,zero,2ed8 <__alt_data_end+0xff002ed8>
    2ee8:	02bfff04 	movi	r10,-4
    2eec:	024003c4 	movi	r9,15
    2ef0:	21800044 	addi	r6,r4,1
    2ef4:	318d883a 	add	r6,r6,r6
    2ef8:	318d883a 	add	r6,r6,r6
    2efc:	318d883a 	add	r6,r6,r6
    2f00:	998d883a 	add	r6,r19,r6
    2f04:	333ffe04 	addi	r12,r6,-8
    2f08:	2017883a 	mov	r11,r4
    2f0c:	31800104 	addi	r6,r6,4
    2f10:	34000017 	ldw	r16,0(r6)
    2f14:	31fffd04 	addi	r7,r6,-12
    2f18:	81c0041e 	bne	r16,r7,2f2c <_malloc_r+0x1dc>
    2f1c:	0000fb06 	br	330c <_malloc_r+0x5bc>
    2f20:	1801030e 	bge	r3,zero,3330 <_malloc_r+0x5e0>
    2f24:	84000317 	ldw	r16,12(r16)
    2f28:	81c0f826 	beq	r16,r7,330c <_malloc_r+0x5bc>
    2f2c:	80800117 	ldw	r2,4(r16)
    2f30:	1284703a 	and	r2,r2,r10
    2f34:	1447c83a 	sub	r3,r2,r17
    2f38:	48fff90e 	bge	r9,r3,2f20 <__alt_data_end+0xff002f20>
    2f3c:	80800317 	ldw	r2,12(r16)
    2f40:	81000217 	ldw	r4,8(r16)
    2f44:	89400054 	ori	r5,r17,1
    2f48:	81400115 	stw	r5,4(r16)
    2f4c:	20800315 	stw	r2,12(r4)
    2f50:	11000215 	stw	r4,8(r2)
    2f54:	8463883a 	add	r17,r16,r17
    2f58:	9c400515 	stw	r17,20(r19)
    2f5c:	9c400415 	stw	r17,16(r19)
    2f60:	18800054 	ori	r2,r3,1
    2f64:	88800115 	stw	r2,4(r17)
    2f68:	8a000315 	stw	r8,12(r17)
    2f6c:	8a000215 	stw	r8,8(r17)
    2f70:	88e3883a 	add	r17,r17,r3
    2f74:	88c00015 	stw	r3,0(r17)
    2f78:	9009883a 	mov	r4,r18
    2f7c:	000f0680 	call	f068 <__malloc_unlock>
    2f80:	80800204 	addi	r2,r16,8
    2f84:	00001b06 	br	2ff4 <_malloc_r+0x2a4>
    2f88:	04400404 	movi	r17,16
    2f8c:	89402536 	bltu	r17,r5,3024 <_malloc_r+0x2d4>
    2f90:	000f0440 	call	f044 <__malloc_lock>
    2f94:	00800184 	movi	r2,6
    2f98:	01000084 	movi	r4,2
    2f9c:	04c00074 	movhi	r19,1
    2fa0:	1085883a 	add	r2,r2,r2
    2fa4:	9cc77b04 	addi	r19,r19,7660
    2fa8:	1085883a 	add	r2,r2,r2
    2fac:	9885883a 	add	r2,r19,r2
    2fb0:	14000117 	ldw	r16,4(r2)
    2fb4:	10fffe04 	addi	r3,r2,-8
    2fb8:	80c0d926 	beq	r16,r3,3320 <_malloc_r+0x5d0>
    2fbc:	80c00117 	ldw	r3,4(r16)
    2fc0:	81000317 	ldw	r4,12(r16)
    2fc4:	00bfff04 	movi	r2,-4
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	81400217 	ldw	r5,8(r16)
    2fd0:	8085883a 	add	r2,r16,r2
    2fd4:	10c00117 	ldw	r3,4(r2)
    2fd8:	29000315 	stw	r4,12(r5)
    2fdc:	21400215 	stw	r5,8(r4)
    2fe0:	18c00054 	ori	r3,r3,1
    2fe4:	10c00115 	stw	r3,4(r2)
    2fe8:	9009883a 	mov	r4,r18
    2fec:	000f0680 	call	f068 <__malloc_unlock>
    2ff0:	80800204 	addi	r2,r16,8
    2ff4:	dfc00a17 	ldw	ra,40(sp)
    2ff8:	df000917 	ldw	fp,36(sp)
    2ffc:	ddc00817 	ldw	r23,32(sp)
    3000:	dd800717 	ldw	r22,28(sp)
    3004:	dd400617 	ldw	r21,24(sp)
    3008:	dd000517 	ldw	r20,20(sp)
    300c:	dcc00417 	ldw	r19,16(sp)
    3010:	dc800317 	ldw	r18,12(sp)
    3014:	dc400217 	ldw	r17,8(sp)
    3018:	dc000117 	ldw	r16,4(sp)
    301c:	dec00b04 	addi	sp,sp,44
    3020:	f800283a 	ret
    3024:	00800304 	movi	r2,12
    3028:	90800015 	stw	r2,0(r18)
    302c:	0005883a 	mov	r2,zero
    3030:	003ff006 	br	2ff4 <__alt_data_end+0xff002ff4>
    3034:	01002004 	movi	r4,128
    3038:	02001004 	movi	r8,64
    303c:	01c00fc4 	movi	r7,63
    3040:	003f6106 	br	2dc8 <__alt_data_end+0xff002dc8>
    3044:	4009883a 	mov	r4,r8
    3048:	003f7506 	br	2e20 <__alt_data_end+0xff002e20>
    304c:	81000317 	ldw	r4,12(r16)
    3050:	003fde06 	br	2fcc <__alt_data_end+0xff002fcc>
    3054:	81c5883a 	add	r2,r16,r7
    3058:	11400117 	ldw	r5,4(r2)
    305c:	9009883a 	mov	r4,r18
    3060:	29400054 	ori	r5,r5,1
    3064:	11400115 	stw	r5,4(r2)
    3068:	000f0680 	call	f068 <__malloc_unlock>
    306c:	80800204 	addi	r2,r16,8
    3070:	003fe006 	br	2ff4 <__alt_data_end+0xff002ff4>
    3074:	9c000217 	ldw	r16,8(r19)
    3078:	00bfff04 	movi	r2,-4
    307c:	85800117 	ldw	r22,4(r16)
    3080:	b0ac703a 	and	r22,r22,r2
    3084:	b4400336 	bltu	r22,r17,3094 <_malloc_r+0x344>
    3088:	b445c83a 	sub	r2,r22,r17
    308c:	00c003c4 	movi	r3,15
    3090:	18805d16 	blt	r3,r2,3208 <_malloc_r+0x4b8>
    3094:	05c00074 	movhi	r23,1
    3098:	00800074 	movhi	r2,1
    309c:	10954804 	addi	r2,r2,21792
    30a0:	bdce2604 	addi	r23,r23,14488
    30a4:	15400017 	ldw	r21,0(r2)
    30a8:	b8c00017 	ldw	r3,0(r23)
    30ac:	00bfffc4 	movi	r2,-1
    30b0:	858d883a 	add	r6,r16,r22
    30b4:	8d6b883a 	add	r21,r17,r21
    30b8:	1880ea26 	beq	r3,r2,3464 <_malloc_r+0x714>
    30bc:	ad4403c4 	addi	r21,r21,4111
    30c0:	00bc0004 	movi	r2,-4096
    30c4:	a8aa703a 	and	r21,r21,r2
    30c8:	a80b883a 	mov	r5,r21
    30cc:	9009883a 	mov	r4,r18
    30d0:	d9800015 	stw	r6,0(sp)
    30d4:	000369c0 	call	369c <_sbrk_r>
    30d8:	1029883a 	mov	r20,r2
    30dc:	00bfffc4 	movi	r2,-1
    30e0:	d9800017 	ldw	r6,0(sp)
    30e4:	a080e826 	beq	r20,r2,3488 <_malloc_r+0x738>
    30e8:	a180a636 	bltu	r20,r6,3384 <_malloc_r+0x634>
    30ec:	07000074 	movhi	fp,1
    30f0:	e7155604 	addi	fp,fp,21848
    30f4:	e0800017 	ldw	r2,0(fp)
    30f8:	a887883a 	add	r3,r21,r2
    30fc:	e0c00015 	stw	r3,0(fp)
    3100:	3500e626 	beq	r6,r20,349c <_malloc_r+0x74c>
    3104:	b9000017 	ldw	r4,0(r23)
    3108:	00bfffc4 	movi	r2,-1
    310c:	2080ee26 	beq	r4,r2,34c8 <_malloc_r+0x778>
    3110:	a185c83a 	sub	r2,r20,r6
    3114:	10c5883a 	add	r2,r2,r3
    3118:	e0800015 	stw	r2,0(fp)
    311c:	a0c001cc 	andi	r3,r20,7
    3120:	1800bc26 	beq	r3,zero,3414 <_malloc_r+0x6c4>
    3124:	a0e9c83a 	sub	r20,r20,r3
    3128:	00840204 	movi	r2,4104
    312c:	a5000204 	addi	r20,r20,8
    3130:	10c7c83a 	sub	r3,r2,r3
    3134:	a545883a 	add	r2,r20,r21
    3138:	1083ffcc 	andi	r2,r2,4095
    313c:	18abc83a 	sub	r21,r3,r2
    3140:	a80b883a 	mov	r5,r21
    3144:	9009883a 	mov	r4,r18
    3148:	000369c0 	call	369c <_sbrk_r>
    314c:	00ffffc4 	movi	r3,-1
    3150:	10c0e126 	beq	r2,r3,34d8 <_malloc_r+0x788>
    3154:	1505c83a 	sub	r2,r2,r20
    3158:	1545883a 	add	r2,r2,r21
    315c:	10800054 	ori	r2,r2,1
    3160:	e0c00017 	ldw	r3,0(fp)
    3164:	9d000215 	stw	r20,8(r19)
    3168:	a0800115 	stw	r2,4(r20)
    316c:	a8c7883a 	add	r3,r21,r3
    3170:	e0c00015 	stw	r3,0(fp)
    3174:	84c00e26 	beq	r16,r19,31b0 <_malloc_r+0x460>
    3178:	018003c4 	movi	r6,15
    317c:	3580a72e 	bgeu	r6,r22,341c <_malloc_r+0x6cc>
    3180:	81400117 	ldw	r5,4(r16)
    3184:	013ffe04 	movi	r4,-8
    3188:	b0bffd04 	addi	r2,r22,-12
    318c:	1104703a 	and	r2,r2,r4
    3190:	2900004c 	andi	r4,r5,1
    3194:	2088b03a 	or	r4,r4,r2
    3198:	81000115 	stw	r4,4(r16)
    319c:	01400144 	movi	r5,5
    31a0:	8089883a 	add	r4,r16,r2
    31a4:	21400115 	stw	r5,4(r4)
    31a8:	21400215 	stw	r5,8(r4)
    31ac:	3080cd36 	bltu	r6,r2,34e4 <_malloc_r+0x794>
    31b0:	00800074 	movhi	r2,1
    31b4:	10954704 	addi	r2,r2,21788
    31b8:	11000017 	ldw	r4,0(r2)
    31bc:	20c0012e 	bgeu	r4,r3,31c4 <_malloc_r+0x474>
    31c0:	10c00015 	stw	r3,0(r2)
    31c4:	00800074 	movhi	r2,1
    31c8:	10954604 	addi	r2,r2,21784
    31cc:	11000017 	ldw	r4,0(r2)
    31d0:	9c000217 	ldw	r16,8(r19)
    31d4:	20c0012e 	bgeu	r4,r3,31dc <_malloc_r+0x48c>
    31d8:	10c00015 	stw	r3,0(r2)
    31dc:	80c00117 	ldw	r3,4(r16)
    31e0:	00bfff04 	movi	r2,-4
    31e4:	1886703a 	and	r3,r3,r2
    31e8:	1c45c83a 	sub	r2,r3,r17
    31ec:	1c400236 	bltu	r3,r17,31f8 <_malloc_r+0x4a8>
    31f0:	00c003c4 	movi	r3,15
    31f4:	18800416 	blt	r3,r2,3208 <_malloc_r+0x4b8>
    31f8:	9009883a 	mov	r4,r18
    31fc:	000f0680 	call	f068 <__malloc_unlock>
    3200:	0005883a 	mov	r2,zero
    3204:	003f7b06 	br	2ff4 <__alt_data_end+0xff002ff4>
    3208:	88c00054 	ori	r3,r17,1
    320c:	80c00115 	stw	r3,4(r16)
    3210:	8463883a 	add	r17,r16,r17
    3214:	10800054 	ori	r2,r2,1
    3218:	9c400215 	stw	r17,8(r19)
    321c:	88800115 	stw	r2,4(r17)
    3220:	9009883a 	mov	r4,r18
    3224:	000f0680 	call	f068 <__malloc_unlock>
    3228:	80800204 	addi	r2,r16,8
    322c:	003f7106 	br	2ff4 <__alt_data_end+0xff002ff4>
    3230:	00c00504 	movi	r3,20
    3234:	18804a2e 	bgeu	r3,r2,3360 <_malloc_r+0x610>
    3238:	00c01504 	movi	r3,84
    323c:	18806e36 	bltu	r3,r2,33f8 <_malloc_r+0x6a8>
    3240:	8804d33a 	srli	r2,r17,12
    3244:	12001bc4 	addi	r8,r2,111
    3248:	11c01b84 	addi	r7,r2,110
    324c:	4209883a 	add	r4,r8,r8
    3250:	003edd06 	br	2dc8 <__alt_data_end+0xff002dc8>
    3254:	3804d27a 	srli	r2,r7,9
    3258:	00c00104 	movi	r3,4
    325c:	1880442e 	bgeu	r3,r2,3370 <_malloc_r+0x620>
    3260:	00c00504 	movi	r3,20
    3264:	18808136 	bltu	r3,r2,346c <_malloc_r+0x71c>
    3268:	11401704 	addi	r5,r2,92
    326c:	10c016c4 	addi	r3,r2,91
    3270:	294b883a 	add	r5,r5,r5
    3274:	294b883a 	add	r5,r5,r5
    3278:	294b883a 	add	r5,r5,r5
    327c:	994b883a 	add	r5,r19,r5
    3280:	28800017 	ldw	r2,0(r5)
    3284:	01800074 	movhi	r6,1
    3288:	297ffe04 	addi	r5,r5,-8
    328c:	31877b04 	addi	r6,r6,7660
    3290:	28806526 	beq	r5,r2,3428 <_malloc_r+0x6d8>
    3294:	01bfff04 	movi	r6,-4
    3298:	10c00117 	ldw	r3,4(r2)
    329c:	1986703a 	and	r3,r3,r6
    32a0:	38c0022e 	bgeu	r7,r3,32ac <_malloc_r+0x55c>
    32a4:	10800217 	ldw	r2,8(r2)
    32a8:	28bffb1e 	bne	r5,r2,3298 <__alt_data_end+0xff003298>
    32ac:	11400317 	ldw	r5,12(r2)
    32b0:	98c00117 	ldw	r3,4(r19)
    32b4:	81400315 	stw	r5,12(r16)
    32b8:	80800215 	stw	r2,8(r16)
    32bc:	2c000215 	stw	r16,8(r5)
    32c0:	14000315 	stw	r16,12(r2)
    32c4:	003ef806 	br	2ea8 <__alt_data_end+0xff002ea8>
    32c8:	88c00054 	ori	r3,r17,1
    32cc:	80c00115 	stw	r3,4(r16)
    32d0:	8463883a 	add	r17,r16,r17
    32d4:	34400515 	stw	r17,20(r6)
    32d8:	34400415 	stw	r17,16(r6)
    32dc:	10c00054 	ori	r3,r2,1
    32e0:	8a000315 	stw	r8,12(r17)
    32e4:	8a000215 	stw	r8,8(r17)
    32e8:	88c00115 	stw	r3,4(r17)
    32ec:	88a3883a 	add	r17,r17,r2
    32f0:	88800015 	stw	r2,0(r17)
    32f4:	9009883a 	mov	r4,r18
    32f8:	000f0680 	call	f068 <__malloc_unlock>
    32fc:	80800204 	addi	r2,r16,8
    3300:	003f3c06 	br	2ff4 <__alt_data_end+0xff002ff4>
    3304:	30c00117 	ldw	r3,4(r6)
    3308:	003ee706 	br	2ea8 <__alt_data_end+0xff002ea8>
    330c:	5ac00044 	addi	r11,r11,1
    3310:	588000cc 	andi	r2,r11,3
    3314:	31800204 	addi	r6,r6,8
    3318:	103efd1e 	bne	r2,zero,2f10 <__alt_data_end+0xff002f10>
    331c:	00002406 	br	33b0 <_malloc_r+0x660>
    3320:	14000317 	ldw	r16,12(r2)
    3324:	143f251e 	bne	r2,r16,2fbc <__alt_data_end+0xff002fbc>
    3328:	21000084 	addi	r4,r4,2
    332c:	003ebc06 	br	2e20 <__alt_data_end+0xff002e20>
    3330:	8085883a 	add	r2,r16,r2
    3334:	10c00117 	ldw	r3,4(r2)
    3338:	81000317 	ldw	r4,12(r16)
    333c:	81400217 	ldw	r5,8(r16)
    3340:	18c00054 	ori	r3,r3,1
    3344:	10c00115 	stw	r3,4(r2)
    3348:	29000315 	stw	r4,12(r5)
    334c:	21400215 	stw	r5,8(r4)
    3350:	9009883a 	mov	r4,r18
    3354:	000f0680 	call	f068 <__malloc_unlock>
    3358:	80800204 	addi	r2,r16,8
    335c:	003f2506 	br	2ff4 <__alt_data_end+0xff002ff4>
    3360:	12001704 	addi	r8,r2,92
    3364:	11c016c4 	addi	r7,r2,91
    3368:	4209883a 	add	r4,r8,r8
    336c:	003e9606 	br	2dc8 <__alt_data_end+0xff002dc8>
    3370:	3804d1ba 	srli	r2,r7,6
    3374:	11400e44 	addi	r5,r2,57
    3378:	10c00e04 	addi	r3,r2,56
    337c:	294b883a 	add	r5,r5,r5
    3380:	003fbc06 	br	3274 <__alt_data_end+0xff003274>
    3384:	84ff5926 	beq	r16,r19,30ec <__alt_data_end+0xff0030ec>
    3388:	00800074 	movhi	r2,1
    338c:	10877b04 	addi	r2,r2,7660
    3390:	14000217 	ldw	r16,8(r2)
    3394:	00bfff04 	movi	r2,-4
    3398:	80c00117 	ldw	r3,4(r16)
    339c:	1886703a 	and	r3,r3,r2
    33a0:	003f9106 	br	31e8 <__alt_data_end+0xff0031e8>
    33a4:	60800217 	ldw	r2,8(r12)
    33a8:	213fffc4 	addi	r4,r4,-1
    33ac:	1300651e 	bne	r2,r12,3544 <_malloc_r+0x7f4>
    33b0:	208000cc 	andi	r2,r4,3
    33b4:	633ffe04 	addi	r12,r12,-8
    33b8:	103ffa1e 	bne	r2,zero,33a4 <__alt_data_end+0xff0033a4>
    33bc:	98800117 	ldw	r2,4(r19)
    33c0:	0146303a 	nor	r3,zero,r5
    33c4:	1884703a 	and	r2,r3,r2
    33c8:	98800115 	stw	r2,4(r19)
    33cc:	294b883a 	add	r5,r5,r5
    33d0:	117f2836 	bltu	r2,r5,3074 <__alt_data_end+0xff003074>
    33d4:	283f2726 	beq	r5,zero,3074 <__alt_data_end+0xff003074>
    33d8:	2886703a 	and	r3,r5,r2
    33dc:	5809883a 	mov	r4,r11
    33e0:	183ec31e 	bne	r3,zero,2ef0 <__alt_data_end+0xff002ef0>
    33e4:	294b883a 	add	r5,r5,r5
    33e8:	2886703a 	and	r3,r5,r2
    33ec:	21000104 	addi	r4,r4,4
    33f0:	183ffc26 	beq	r3,zero,33e4 <__alt_data_end+0xff0033e4>
    33f4:	003ebe06 	br	2ef0 <__alt_data_end+0xff002ef0>
    33f8:	00c05504 	movi	r3,340
    33fc:	18801236 	bltu	r3,r2,3448 <_malloc_r+0x6f8>
    3400:	8804d3fa 	srli	r2,r17,15
    3404:	12001e04 	addi	r8,r2,120
    3408:	11c01dc4 	addi	r7,r2,119
    340c:	4209883a 	add	r4,r8,r8
    3410:	003e6d06 	br	2dc8 <__alt_data_end+0xff002dc8>
    3414:	00c40004 	movi	r3,4096
    3418:	003f4606 	br	3134 <__alt_data_end+0xff003134>
    341c:	00800044 	movi	r2,1
    3420:	a0800115 	stw	r2,4(r20)
    3424:	003f7406 	br	31f8 <__alt_data_end+0xff0031f8>
    3428:	1805d0ba 	srai	r2,r3,2
    342c:	01c00044 	movi	r7,1
    3430:	30c00117 	ldw	r3,4(r6)
    3434:	388e983a 	sll	r7,r7,r2
    3438:	2805883a 	mov	r2,r5
    343c:	38c6b03a 	or	r3,r7,r3
    3440:	30c00115 	stw	r3,4(r6)
    3444:	003f9b06 	br	32b4 <__alt_data_end+0xff0032b4>
    3448:	00c15504 	movi	r3,1364
    344c:	18801a36 	bltu	r3,r2,34b8 <_malloc_r+0x768>
    3450:	8804d4ba 	srli	r2,r17,18
    3454:	12001f44 	addi	r8,r2,125
    3458:	11c01f04 	addi	r7,r2,124
    345c:	4209883a 	add	r4,r8,r8
    3460:	003e5906 	br	2dc8 <__alt_data_end+0xff002dc8>
    3464:	ad400404 	addi	r21,r21,16
    3468:	003f1706 	br	30c8 <__alt_data_end+0xff0030c8>
    346c:	00c01504 	movi	r3,84
    3470:	18802336 	bltu	r3,r2,3500 <_malloc_r+0x7b0>
    3474:	3804d33a 	srli	r2,r7,12
    3478:	11401bc4 	addi	r5,r2,111
    347c:	10c01b84 	addi	r3,r2,110
    3480:	294b883a 	add	r5,r5,r5
    3484:	003f7b06 	br	3274 <__alt_data_end+0xff003274>
    3488:	9c000217 	ldw	r16,8(r19)
    348c:	00bfff04 	movi	r2,-4
    3490:	80c00117 	ldw	r3,4(r16)
    3494:	1886703a 	and	r3,r3,r2
    3498:	003f5306 	br	31e8 <__alt_data_end+0xff0031e8>
    349c:	3083ffcc 	andi	r2,r6,4095
    34a0:	103f181e 	bne	r2,zero,3104 <__alt_data_end+0xff003104>
    34a4:	99000217 	ldw	r4,8(r19)
    34a8:	b545883a 	add	r2,r22,r21
    34ac:	10800054 	ori	r2,r2,1
    34b0:	20800115 	stw	r2,4(r4)
    34b4:	003f3e06 	br	31b0 <__alt_data_end+0xff0031b0>
    34b8:	01003f84 	movi	r4,254
    34bc:	02001fc4 	movi	r8,127
    34c0:	01c01f84 	movi	r7,126
    34c4:	003e4006 	br	2dc8 <__alt_data_end+0xff002dc8>
    34c8:	00800074 	movhi	r2,1
    34cc:	108e2604 	addi	r2,r2,14488
    34d0:	15000015 	stw	r20,0(r2)
    34d4:	003f1106 	br	311c <__alt_data_end+0xff00311c>
    34d8:	00800044 	movi	r2,1
    34dc:	002b883a 	mov	r21,zero
    34e0:	003f1f06 	br	3160 <__alt_data_end+0xff003160>
    34e4:	81400204 	addi	r5,r16,8
    34e8:	9009883a 	mov	r4,r18
    34ec:	0007ba00 	call	7ba0 <_free_r>
    34f0:	00800074 	movhi	r2,1
    34f4:	10955604 	addi	r2,r2,21848
    34f8:	10c00017 	ldw	r3,0(r2)
    34fc:	003f2c06 	br	31b0 <__alt_data_end+0xff0031b0>
    3500:	00c05504 	movi	r3,340
    3504:	18800536 	bltu	r3,r2,351c <_malloc_r+0x7cc>
    3508:	3804d3fa 	srli	r2,r7,15
    350c:	11401e04 	addi	r5,r2,120
    3510:	10c01dc4 	addi	r3,r2,119
    3514:	294b883a 	add	r5,r5,r5
    3518:	003f5606 	br	3274 <__alt_data_end+0xff003274>
    351c:	00c15504 	movi	r3,1364
    3520:	18800536 	bltu	r3,r2,3538 <_malloc_r+0x7e8>
    3524:	3804d4ba 	srli	r2,r7,18
    3528:	11401f44 	addi	r5,r2,125
    352c:	10c01f04 	addi	r3,r2,124
    3530:	294b883a 	add	r5,r5,r5
    3534:	003f4f06 	br	3274 <__alt_data_end+0xff003274>
    3538:	01403f84 	movi	r5,254
    353c:	00c01f84 	movi	r3,126
    3540:	003f4c06 	br	3274 <__alt_data_end+0xff003274>
    3544:	98800117 	ldw	r2,4(r19)
    3548:	003fa006 	br	33cc <__alt_data_end+0xff0033cc>
    354c:	8808d0fa 	srli	r4,r17,3
    3550:	20800044 	addi	r2,r4,1
    3554:	1085883a 	add	r2,r2,r2
    3558:	003e9006 	br	2f9c <__alt_data_end+0xff002f9c>

0000355c <_printf_r>:
    355c:	defffd04 	addi	sp,sp,-12
    3560:	2805883a 	mov	r2,r5
    3564:	dfc00015 	stw	ra,0(sp)
    3568:	d9800115 	stw	r6,4(sp)
    356c:	d9c00215 	stw	r7,8(sp)
    3570:	21400217 	ldw	r5,8(r4)
    3574:	d9c00104 	addi	r7,sp,4
    3578:	100d883a 	mov	r6,r2
    357c:	00037880 	call	3788 <___vfprintf_internal_r>
    3580:	dfc00017 	ldw	ra,0(sp)
    3584:	dec00304 	addi	sp,sp,12
    3588:	f800283a 	ret

0000358c <printf>:
    358c:	defffc04 	addi	sp,sp,-16
    3590:	dfc00015 	stw	ra,0(sp)
    3594:	d9400115 	stw	r5,4(sp)
    3598:	d9800215 	stw	r6,8(sp)
    359c:	d9c00315 	stw	r7,12(sp)
    35a0:	00800074 	movhi	r2,1
    35a4:	108e2904 	addi	r2,r2,14500
    35a8:	10800017 	ldw	r2,0(r2)
    35ac:	200b883a 	mov	r5,r4
    35b0:	d9800104 	addi	r6,sp,4
    35b4:	11000217 	ldw	r4,8(r2)
    35b8:	00059800 	call	5980 <__vfprintf_internal>
    35bc:	dfc00017 	ldw	ra,0(sp)
    35c0:	dec00404 	addi	sp,sp,16
    35c4:	f800283a 	ret

000035c8 <_puts_r>:
    35c8:	defff604 	addi	sp,sp,-40
    35cc:	dc000715 	stw	r16,28(sp)
    35d0:	2021883a 	mov	r16,r4
    35d4:	2809883a 	mov	r4,r5
    35d8:	dc400815 	stw	r17,32(sp)
    35dc:	dfc00915 	stw	ra,36(sp)
    35e0:	2823883a 	mov	r17,r5
    35e4:	00036f00 	call	36f0 <strlen>
    35e8:	10c00044 	addi	r3,r2,1
    35ec:	d8800115 	stw	r2,4(sp)
    35f0:	00800074 	movhi	r2,1
    35f4:	10866404 	addi	r2,r2,6544
    35f8:	d8800215 	stw	r2,8(sp)
    35fc:	00800044 	movi	r2,1
    3600:	d8800315 	stw	r2,12(sp)
    3604:	00800084 	movi	r2,2
    3608:	dc400015 	stw	r17,0(sp)
    360c:	d8c00615 	stw	r3,24(sp)
    3610:	dec00415 	stw	sp,16(sp)
    3614:	d8800515 	stw	r2,20(sp)
    3618:	80000226 	beq	r16,zero,3624 <_puts_r+0x5c>
    361c:	80800e17 	ldw	r2,56(r16)
    3620:	10001426 	beq	r2,zero,3674 <_puts_r+0xac>
    3624:	81400217 	ldw	r5,8(r16)
    3628:	2880030b 	ldhu	r2,12(r5)
    362c:	10c8000c 	andi	r3,r2,8192
    3630:	1800061e 	bne	r3,zero,364c <_puts_r+0x84>
    3634:	29001917 	ldw	r4,100(r5)
    3638:	00f7ffc4 	movi	r3,-8193
    363c:	10880014 	ori	r2,r2,8192
    3640:	20c6703a 	and	r3,r4,r3
    3644:	2880030d 	sth	r2,12(r5)
    3648:	28c01915 	stw	r3,100(r5)
    364c:	d9800404 	addi	r6,sp,16
    3650:	8009883a 	mov	r4,r16
    3654:	0007eb00 	call	7eb0 <__sfvwrite_r>
    3658:	1000091e 	bne	r2,zero,3680 <_puts_r+0xb8>
    365c:	00800284 	movi	r2,10
    3660:	dfc00917 	ldw	ra,36(sp)
    3664:	dc400817 	ldw	r17,32(sp)
    3668:	dc000717 	ldw	r16,28(sp)
    366c:	dec00a04 	addi	sp,sp,40
    3670:	f800283a 	ret
    3674:	8009883a 	mov	r4,r16
    3678:	0007a2c0 	call	7a2c <__sinit>
    367c:	003fe906 	br	3624 <__alt_data_end+0xff003624>
    3680:	00bfffc4 	movi	r2,-1
    3684:	003ff606 	br	3660 <__alt_data_end+0xff003660>

00003688 <puts>:
    3688:	00800074 	movhi	r2,1
    368c:	108e2904 	addi	r2,r2,14500
    3690:	200b883a 	mov	r5,r4
    3694:	11000017 	ldw	r4,0(r2)
    3698:	00035c81 	jmpi	35c8 <_puts_r>

0000369c <_sbrk_r>:
    369c:	defffd04 	addi	sp,sp,-12
    36a0:	dc000015 	stw	r16,0(sp)
    36a4:	04000074 	movhi	r16,1
    36a8:	dc400115 	stw	r17,4(sp)
    36ac:	84154904 	addi	r16,r16,21796
    36b0:	2023883a 	mov	r17,r4
    36b4:	2809883a 	mov	r4,r5
    36b8:	dfc00215 	stw	ra,8(sp)
    36bc:	80000015 	stw	zero,0(r16)
    36c0:	000f2280 	call	f228 <sbrk>
    36c4:	00ffffc4 	movi	r3,-1
    36c8:	10c00526 	beq	r2,r3,36e0 <_sbrk_r+0x44>
    36cc:	dfc00217 	ldw	ra,8(sp)
    36d0:	dc400117 	ldw	r17,4(sp)
    36d4:	dc000017 	ldw	r16,0(sp)
    36d8:	dec00304 	addi	sp,sp,12
    36dc:	f800283a 	ret
    36e0:	80c00017 	ldw	r3,0(r16)
    36e4:	183ff926 	beq	r3,zero,36cc <__alt_data_end+0xff0036cc>
    36e8:	88c00015 	stw	r3,0(r17)
    36ec:	003ff706 	br	36cc <__alt_data_end+0xff0036cc>

000036f0 <strlen>:
    36f0:	208000cc 	andi	r2,r4,3
    36f4:	10002026 	beq	r2,zero,3778 <strlen+0x88>
    36f8:	20800007 	ldb	r2,0(r4)
    36fc:	10002026 	beq	r2,zero,3780 <strlen+0x90>
    3700:	2005883a 	mov	r2,r4
    3704:	00000206 	br	3710 <strlen+0x20>
    3708:	10c00007 	ldb	r3,0(r2)
    370c:	18001826 	beq	r3,zero,3770 <strlen+0x80>
    3710:	10800044 	addi	r2,r2,1
    3714:	10c000cc 	andi	r3,r2,3
    3718:	183ffb1e 	bne	r3,zero,3708 <__alt_data_end+0xff003708>
    371c:	10c00017 	ldw	r3,0(r2)
    3720:	01ffbff4 	movhi	r7,65279
    3724:	39ffbfc4 	addi	r7,r7,-257
    3728:	00ca303a 	nor	r5,zero,r3
    372c:	01a02074 	movhi	r6,32897
    3730:	19c7883a 	add	r3,r3,r7
    3734:	31a02004 	addi	r6,r6,-32640
    3738:	1946703a 	and	r3,r3,r5
    373c:	1986703a 	and	r3,r3,r6
    3740:	1800091e 	bne	r3,zero,3768 <strlen+0x78>
    3744:	10800104 	addi	r2,r2,4
    3748:	10c00017 	ldw	r3,0(r2)
    374c:	19cb883a 	add	r5,r3,r7
    3750:	00c6303a 	nor	r3,zero,r3
    3754:	28c6703a 	and	r3,r5,r3
    3758:	1986703a 	and	r3,r3,r6
    375c:	183ff926 	beq	r3,zero,3744 <__alt_data_end+0xff003744>
    3760:	00000106 	br	3768 <strlen+0x78>
    3764:	10800044 	addi	r2,r2,1
    3768:	10c00007 	ldb	r3,0(r2)
    376c:	183ffd1e 	bne	r3,zero,3764 <__alt_data_end+0xff003764>
    3770:	1105c83a 	sub	r2,r2,r4
    3774:	f800283a 	ret
    3778:	2005883a 	mov	r2,r4
    377c:	003fe706 	br	371c <__alt_data_end+0xff00371c>
    3780:	0005883a 	mov	r2,zero
    3784:	f800283a 	ret

00003788 <___vfprintf_internal_r>:
    3788:	deffb804 	addi	sp,sp,-288
    378c:	dfc04715 	stw	ra,284(sp)
    3790:	ddc04515 	stw	r23,276(sp)
    3794:	dd404315 	stw	r21,268(sp)
    3798:	d9002c15 	stw	r4,176(sp)
    379c:	282f883a 	mov	r23,r5
    37a0:	302b883a 	mov	r21,r6
    37a4:	d9c02d15 	stw	r7,180(sp)
    37a8:	df004615 	stw	fp,280(sp)
    37ac:	dd804415 	stw	r22,272(sp)
    37b0:	dd004215 	stw	r20,264(sp)
    37b4:	dcc04115 	stw	r19,260(sp)
    37b8:	dc804015 	stw	r18,256(sp)
    37bc:	dc403f15 	stw	r17,252(sp)
    37c0:	dc003e15 	stw	r16,248(sp)
    37c4:	00085a00 	call	85a0 <_localeconv_r>
    37c8:	10800017 	ldw	r2,0(r2)
    37cc:	1009883a 	mov	r4,r2
    37d0:	d8803415 	stw	r2,208(sp)
    37d4:	00036f00 	call	36f0 <strlen>
    37d8:	d8803715 	stw	r2,220(sp)
    37dc:	d8802c17 	ldw	r2,176(sp)
    37e0:	10000226 	beq	r2,zero,37ec <___vfprintf_internal_r+0x64>
    37e4:	10800e17 	ldw	r2,56(r2)
    37e8:	1000f926 	beq	r2,zero,3bd0 <___vfprintf_internal_r+0x448>
    37ec:	b880030b 	ldhu	r2,12(r23)
    37f0:	10c8000c 	andi	r3,r2,8192
    37f4:	1800061e 	bne	r3,zero,3810 <___vfprintf_internal_r+0x88>
    37f8:	b9001917 	ldw	r4,100(r23)
    37fc:	00f7ffc4 	movi	r3,-8193
    3800:	10880014 	ori	r2,r2,8192
    3804:	20c6703a 	and	r3,r4,r3
    3808:	b880030d 	sth	r2,12(r23)
    380c:	b8c01915 	stw	r3,100(r23)
    3810:	10c0020c 	andi	r3,r2,8
    3814:	1800c126 	beq	r3,zero,3b1c <___vfprintf_internal_r+0x394>
    3818:	b8c00417 	ldw	r3,16(r23)
    381c:	1800bf26 	beq	r3,zero,3b1c <___vfprintf_internal_r+0x394>
    3820:	1080068c 	andi	r2,r2,26
    3824:	00c00284 	movi	r3,10
    3828:	10c0c426 	beq	r2,r3,3b3c <___vfprintf_internal_r+0x3b4>
    382c:	d8c00404 	addi	r3,sp,16
    3830:	05000074 	movhi	r20,1
    3834:	d9001e04 	addi	r4,sp,120
    3838:	a506ce84 	addi	r20,r20,6970
    383c:	d8c01e15 	stw	r3,120(sp)
    3840:	d8002015 	stw	zero,128(sp)
    3844:	d8001f15 	stw	zero,124(sp)
    3848:	d8003315 	stw	zero,204(sp)
    384c:	d8003615 	stw	zero,216(sp)
    3850:	d8003815 	stw	zero,224(sp)
    3854:	1811883a 	mov	r8,r3
    3858:	d8003915 	stw	zero,228(sp)
    385c:	d8003a15 	stw	zero,232(sp)
    3860:	d8002f15 	stw	zero,188(sp)
    3864:	d9002815 	stw	r4,160(sp)
    3868:	a8800007 	ldb	r2,0(r21)
    386c:	10027b26 	beq	r2,zero,425c <___vfprintf_internal_r+0xad4>
    3870:	00c00944 	movi	r3,37
    3874:	a821883a 	mov	r16,r21
    3878:	10c0021e 	bne	r2,r3,3884 <___vfprintf_internal_r+0xfc>
    387c:	00001406 	br	38d0 <___vfprintf_internal_r+0x148>
    3880:	10c00326 	beq	r2,r3,3890 <___vfprintf_internal_r+0x108>
    3884:	84000044 	addi	r16,r16,1
    3888:	80800007 	ldb	r2,0(r16)
    388c:	103ffc1e 	bne	r2,zero,3880 <__alt_data_end+0xff003880>
    3890:	8563c83a 	sub	r17,r16,r21
    3894:	88000e26 	beq	r17,zero,38d0 <___vfprintf_internal_r+0x148>
    3898:	d8c02017 	ldw	r3,128(sp)
    389c:	d8801f17 	ldw	r2,124(sp)
    38a0:	45400015 	stw	r21,0(r8)
    38a4:	1c47883a 	add	r3,r3,r17
    38a8:	10800044 	addi	r2,r2,1
    38ac:	d8c02015 	stw	r3,128(sp)
    38b0:	44400115 	stw	r17,4(r8)
    38b4:	d8801f15 	stw	r2,124(sp)
    38b8:	00c001c4 	movi	r3,7
    38bc:	1880a716 	blt	r3,r2,3b5c <___vfprintf_internal_r+0x3d4>
    38c0:	42000204 	addi	r8,r8,8
    38c4:	d9402f17 	ldw	r5,188(sp)
    38c8:	2c4b883a 	add	r5,r5,r17
    38cc:	d9402f15 	stw	r5,188(sp)
    38d0:	80800007 	ldb	r2,0(r16)
    38d4:	1000a826 	beq	r2,zero,3b78 <___vfprintf_internal_r+0x3f0>
    38d8:	84400047 	ldb	r17,1(r16)
    38dc:	00bfffc4 	movi	r2,-1
    38e0:	85400044 	addi	r21,r16,1
    38e4:	d8002785 	stb	zero,158(sp)
    38e8:	0007883a 	mov	r3,zero
    38ec:	000f883a 	mov	r7,zero
    38f0:	d8802915 	stw	r2,164(sp)
    38f4:	d8003115 	stw	zero,196(sp)
    38f8:	0025883a 	mov	r18,zero
    38fc:	01401604 	movi	r5,88
    3900:	01800244 	movi	r6,9
    3904:	02800a84 	movi	r10,42
    3908:	02401b04 	movi	r9,108
    390c:	ad400044 	addi	r21,r21,1
    3910:	88bff804 	addi	r2,r17,-32
    3914:	28830436 	bltu	r5,r2,4528 <___vfprintf_internal_r+0xda0>
    3918:	100490ba 	slli	r2,r2,2
    391c:	01000034 	movhi	r4,0
    3920:	210e4c04 	addi	r4,r4,14640
    3924:	1105883a 	add	r2,r2,r4
    3928:	10800017 	ldw	r2,0(r2)
    392c:	1000683a 	jmp	r2
    3930:	00004448 	cmpgei	zero,zero,273
    3934:	00004528 	cmpgeui	zero,zero,276
    3938:	00004528 	cmpgeui	zero,zero,276
    393c:	00004468 	cmpgeui	zero,zero,273
    3940:	00004528 	cmpgeui	zero,zero,276
    3944:	00004528 	cmpgeui	zero,zero,276
    3948:	00004528 	cmpgeui	zero,zero,276
    394c:	00004528 	cmpgeui	zero,zero,276
    3950:	00004528 	cmpgeui	zero,zero,276
    3954:	00004528 	cmpgeui	zero,zero,276
    3958:	00003bdc 	xori	zero,zero,239
    395c:	00004384 	movi	zero,270
    3960:	00004528 	cmpgeui	zero,zero,276
    3964:	00003aa4 	muli	zero,zero,234
    3968:	00003c04 	movi	zero,240
    396c:	00004528 	cmpgeui	zero,zero,276
    3970:	00003c44 	movi	zero,241
    3974:	00003c50 	cmplti	zero,zero,241
    3978:	00003c50 	cmplti	zero,zero,241
    397c:	00003c50 	cmplti	zero,zero,241
    3980:	00003c50 	cmplti	zero,zero,241
    3984:	00003c50 	cmplti	zero,zero,241
    3988:	00003c50 	cmplti	zero,zero,241
    398c:	00003c50 	cmplti	zero,zero,241
    3990:	00003c50 	cmplti	zero,zero,241
    3994:	00003c50 	cmplti	zero,zero,241
    3998:	00004528 	cmpgeui	zero,zero,276
    399c:	00004528 	cmpgeui	zero,zero,276
    39a0:	00004528 	cmpgeui	zero,zero,276
    39a4:	00004528 	cmpgeui	zero,zero,276
    39a8:	00004528 	cmpgeui	zero,zero,276
    39ac:	00004528 	cmpgeui	zero,zero,276
    39b0:	00004528 	cmpgeui	zero,zero,276
    39b4:	00004528 	cmpgeui	zero,zero,276
    39b8:	00004528 	cmpgeui	zero,zero,276
    39bc:	00004528 	cmpgeui	zero,zero,276
    39c0:	00003c84 	movi	zero,242
    39c4:	00003d40 	call	3d4 <init_camera+0x144>
    39c8:	00004528 	cmpgeui	zero,zero,276
    39cc:	00003d40 	call	3d4 <init_camera+0x144>
    39d0:	00004528 	cmpgeui	zero,zero,276
    39d4:	00004528 	cmpgeui	zero,zero,276
    39d8:	00004528 	cmpgeui	zero,zero,276
    39dc:	00004528 	cmpgeui	zero,zero,276
    39e0:	00003de0 	cmpeqi	zero,zero,247
    39e4:	00004528 	cmpgeui	zero,zero,276
    39e8:	00004528 	cmpgeui	zero,zero,276
    39ec:	00003dec 	andhi	zero,zero,247
    39f0:	00004528 	cmpgeui	zero,zero,276
    39f4:	00004528 	cmpgeui	zero,zero,276
    39f8:	00004528 	cmpgeui	zero,zero,276
    39fc:	00004528 	cmpgeui	zero,zero,276
    3a00:	00004528 	cmpgeui	zero,zero,276
    3a04:	00004264 	muli	zero,zero,265
    3a08:	00004528 	cmpgeui	zero,zero,276
    3a0c:	00004528 	cmpgeui	zero,zero,276
    3a10:	000042c4 	movi	zero,267
    3a14:	00004528 	cmpgeui	zero,zero,276
    3a18:	00004528 	cmpgeui	zero,zero,276
    3a1c:	00004528 	cmpgeui	zero,zero,276
    3a20:	00004528 	cmpgeui	zero,zero,276
    3a24:	00004528 	cmpgeui	zero,zero,276
    3a28:	00004528 	cmpgeui	zero,zero,276
    3a2c:	00004528 	cmpgeui	zero,zero,276
    3a30:	00004528 	cmpgeui	zero,zero,276
    3a34:	00004528 	cmpgeui	zero,zero,276
    3a38:	00004528 	cmpgeui	zero,zero,276
    3a3c:	000044d4 	movui	zero,275
    3a40:	00004474 	movhi	zero,273
    3a44:	00003d40 	call	3d4 <init_camera+0x144>
    3a48:	00003d40 	call	3d4 <init_camera+0x144>
    3a4c:	00003d40 	call	3d4 <init_camera+0x144>
    3a50:	00004484 	movi	zero,274
    3a54:	00004474 	movhi	zero,273
    3a58:	00004528 	cmpgeui	zero,zero,276
    3a5c:	00004528 	cmpgeui	zero,zero,276
    3a60:	00004490 	cmplti	zero,zero,274
    3a64:	00004528 	cmpgeui	zero,zero,276
    3a68:	000044a0 	cmpeqi	zero,zero,274
    3a6c:	00004374 	movhi	zero,269
    3a70:	00003ab0 	cmpltui	zero,zero,234
    3a74:	00004394 	movui	zero,270
    3a78:	00004528 	cmpgeui	zero,zero,276
    3a7c:	000043a0 	cmpeqi	zero,zero,270
    3a80:	00004528 	cmpgeui	zero,zero,276
    3a84:	000043fc 	xorhi	zero,zero,271
    3a88:	00004528 	cmpgeui	zero,zero,276
    3a8c:	00004528 	cmpgeui	zero,zero,276
    3a90:	0000440c 	andi	zero,zero,272
    3a94:	d9003117 	ldw	r4,196(sp)
    3a98:	d8802d15 	stw	r2,180(sp)
    3a9c:	0109c83a 	sub	r4,zero,r4
    3aa0:	d9003115 	stw	r4,196(sp)
    3aa4:	94800114 	ori	r18,r18,4
    3aa8:	ac400007 	ldb	r17,0(r21)
    3aac:	003f9706 	br	390c <__alt_data_end+0xff00390c>
    3ab0:	00800c04 	movi	r2,48
    3ab4:	d9002d17 	ldw	r4,180(sp)
    3ab8:	d9402917 	ldw	r5,164(sp)
    3abc:	d8802705 	stb	r2,156(sp)
    3ac0:	00801e04 	movi	r2,120
    3ac4:	d8802745 	stb	r2,157(sp)
    3ac8:	d8002785 	stb	zero,158(sp)
    3acc:	20c00104 	addi	r3,r4,4
    3ad0:	24c00017 	ldw	r19,0(r4)
    3ad4:	002d883a 	mov	r22,zero
    3ad8:	90800094 	ori	r2,r18,2
    3adc:	28029a16 	blt	r5,zero,4548 <___vfprintf_internal_r+0xdc0>
    3ae0:	00bfdfc4 	movi	r2,-129
    3ae4:	90a4703a 	and	r18,r18,r2
    3ae8:	d8c02d15 	stw	r3,180(sp)
    3aec:	94800094 	ori	r18,r18,2
    3af0:	9802871e 	bne	r19,zero,4510 <___vfprintf_internal_r+0xd88>
    3af4:	00800074 	movhi	r2,1
    3af8:	1086c704 	addi	r2,r2,6940
    3afc:	d8803915 	stw	r2,228(sp)
    3b00:	04401e04 	movi	r17,120
    3b04:	d8802917 	ldw	r2,164(sp)
    3b08:	0039883a 	mov	fp,zero
    3b0c:	1001e926 	beq	r2,zero,42b4 <___vfprintf_internal_r+0xb2c>
    3b10:	0027883a 	mov	r19,zero
    3b14:	002d883a 	mov	r22,zero
    3b18:	00020506 	br	4330 <___vfprintf_internal_r+0xba8>
    3b1c:	d9002c17 	ldw	r4,176(sp)
    3b20:	b80b883a 	mov	r5,r23
    3b24:	0005a580 	call	5a58 <__swsetup_r>
    3b28:	1005ac1e 	bne	r2,zero,51dc <___vfprintf_internal_r+0x1a54>
    3b2c:	b880030b 	ldhu	r2,12(r23)
    3b30:	00c00284 	movi	r3,10
    3b34:	1080068c 	andi	r2,r2,26
    3b38:	10ff3c1e 	bne	r2,r3,382c <__alt_data_end+0xff00382c>
    3b3c:	b880038f 	ldh	r2,14(r23)
    3b40:	103f3a16 	blt	r2,zero,382c <__alt_data_end+0xff00382c>
    3b44:	d9c02d17 	ldw	r7,180(sp)
    3b48:	d9002c17 	ldw	r4,176(sp)
    3b4c:	a80d883a 	mov	r6,r21
    3b50:	b80b883a 	mov	r5,r23
    3b54:	000599c0 	call	599c <__sbprintf>
    3b58:	00001106 	br	3ba0 <___vfprintf_internal_r+0x418>
    3b5c:	d9002c17 	ldw	r4,176(sp)
    3b60:	d9801e04 	addi	r6,sp,120
    3b64:	b80b883a 	mov	r5,r23
    3b68:	000a5240 	call	a524 <__sprint_r>
    3b6c:	1000081e 	bne	r2,zero,3b90 <___vfprintf_internal_r+0x408>
    3b70:	da000404 	addi	r8,sp,16
    3b74:	003f5306 	br	38c4 <__alt_data_end+0xff0038c4>
    3b78:	d8802017 	ldw	r2,128(sp)
    3b7c:	10000426 	beq	r2,zero,3b90 <___vfprintf_internal_r+0x408>
    3b80:	d9002c17 	ldw	r4,176(sp)
    3b84:	d9801e04 	addi	r6,sp,120
    3b88:	b80b883a 	mov	r5,r23
    3b8c:	000a5240 	call	a524 <__sprint_r>
    3b90:	b880030b 	ldhu	r2,12(r23)
    3b94:	1080100c 	andi	r2,r2,64
    3b98:	1005901e 	bne	r2,zero,51dc <___vfprintf_internal_r+0x1a54>
    3b9c:	d8802f17 	ldw	r2,188(sp)
    3ba0:	dfc04717 	ldw	ra,284(sp)
    3ba4:	df004617 	ldw	fp,280(sp)
    3ba8:	ddc04517 	ldw	r23,276(sp)
    3bac:	dd804417 	ldw	r22,272(sp)
    3bb0:	dd404317 	ldw	r21,268(sp)
    3bb4:	dd004217 	ldw	r20,264(sp)
    3bb8:	dcc04117 	ldw	r19,260(sp)
    3bbc:	dc804017 	ldw	r18,256(sp)
    3bc0:	dc403f17 	ldw	r17,252(sp)
    3bc4:	dc003e17 	ldw	r16,248(sp)
    3bc8:	dec04804 	addi	sp,sp,288
    3bcc:	f800283a 	ret
    3bd0:	d9002c17 	ldw	r4,176(sp)
    3bd4:	0007a2c0 	call	7a2c <__sinit>
    3bd8:	003f0406 	br	37ec <__alt_data_end+0xff0037ec>
    3bdc:	d8802d17 	ldw	r2,180(sp)
    3be0:	d9002d17 	ldw	r4,180(sp)
    3be4:	10800017 	ldw	r2,0(r2)
    3be8:	d8803115 	stw	r2,196(sp)
    3bec:	20800104 	addi	r2,r4,4
    3bf0:	d9003117 	ldw	r4,196(sp)
    3bf4:	203fa716 	blt	r4,zero,3a94 <__alt_data_end+0xff003a94>
    3bf8:	d8802d15 	stw	r2,180(sp)
    3bfc:	ac400007 	ldb	r17,0(r21)
    3c00:	003f4206 	br	390c <__alt_data_end+0xff00390c>
    3c04:	ac400007 	ldb	r17,0(r21)
    3c08:	aac00044 	addi	r11,r21,1
    3c0c:	8a872826 	beq	r17,r10,58b0 <___vfprintf_internal_r+0x2128>
    3c10:	88bff404 	addi	r2,r17,-48
    3c14:	0009883a 	mov	r4,zero
    3c18:	30867d36 	bltu	r6,r2,5610 <___vfprintf_internal_r+0x1e88>
    3c1c:	5c400007 	ldb	r17,0(r11)
    3c20:	210002a4 	muli	r4,r4,10
    3c24:	5d400044 	addi	r21,r11,1
    3c28:	a817883a 	mov	r11,r21
    3c2c:	2089883a 	add	r4,r4,r2
    3c30:	88bff404 	addi	r2,r17,-48
    3c34:	30bff92e 	bgeu	r6,r2,3c1c <__alt_data_end+0xff003c1c>
    3c38:	2005c916 	blt	r4,zero,5360 <___vfprintf_internal_r+0x1bd8>
    3c3c:	d9002915 	stw	r4,164(sp)
    3c40:	003f3306 	br	3910 <__alt_data_end+0xff003910>
    3c44:	94802014 	ori	r18,r18,128
    3c48:	ac400007 	ldb	r17,0(r21)
    3c4c:	003f2f06 	br	390c <__alt_data_end+0xff00390c>
    3c50:	a809883a 	mov	r4,r21
    3c54:	d8003115 	stw	zero,196(sp)
    3c58:	88bff404 	addi	r2,r17,-48
    3c5c:	0017883a 	mov	r11,zero
    3c60:	24400007 	ldb	r17,0(r4)
    3c64:	5ac002a4 	muli	r11,r11,10
    3c68:	ad400044 	addi	r21,r21,1
    3c6c:	a809883a 	mov	r4,r21
    3c70:	12d7883a 	add	r11,r2,r11
    3c74:	88bff404 	addi	r2,r17,-48
    3c78:	30bff92e 	bgeu	r6,r2,3c60 <__alt_data_end+0xff003c60>
    3c7c:	dac03115 	stw	r11,196(sp)
    3c80:	003f2306 	br	3910 <__alt_data_end+0xff003910>
    3c84:	18c03fcc 	andi	r3,r3,255
    3c88:	18072b1e 	bne	r3,zero,5938 <___vfprintf_internal_r+0x21b0>
    3c8c:	94800414 	ori	r18,r18,16
    3c90:	9080080c 	andi	r2,r18,32
    3c94:	10037b26 	beq	r2,zero,4a84 <___vfprintf_internal_r+0x12fc>
    3c98:	d9402d17 	ldw	r5,180(sp)
    3c9c:	28800117 	ldw	r2,4(r5)
    3ca0:	2cc00017 	ldw	r19,0(r5)
    3ca4:	29400204 	addi	r5,r5,8
    3ca8:	d9402d15 	stw	r5,180(sp)
    3cac:	102d883a 	mov	r22,r2
    3cb0:	10044b16 	blt	r2,zero,4de0 <___vfprintf_internal_r+0x1658>
    3cb4:	d9402917 	ldw	r5,164(sp)
    3cb8:	df002783 	ldbu	fp,158(sp)
    3cbc:	2803bc16 	blt	r5,zero,4bb0 <___vfprintf_internal_r+0x1428>
    3cc0:	00ffdfc4 	movi	r3,-129
    3cc4:	9d84b03a 	or	r2,r19,r22
    3cc8:	90e4703a 	and	r18,r18,r3
    3ccc:	10017726 	beq	r2,zero,42ac <___vfprintf_internal_r+0xb24>
    3cd0:	b0038326 	beq	r22,zero,4ae0 <___vfprintf_internal_r+0x1358>
    3cd4:	dc402a15 	stw	r17,168(sp)
    3cd8:	dc001e04 	addi	r16,sp,120
    3cdc:	b023883a 	mov	r17,r22
    3ce0:	402d883a 	mov	r22,r8
    3ce4:	9809883a 	mov	r4,r19
    3ce8:	880b883a 	mov	r5,r17
    3cec:	01800284 	movi	r6,10
    3cf0:	000f883a 	mov	r7,zero
    3cf4:	000c91c0 	call	c91c <__umoddi3>
    3cf8:	10800c04 	addi	r2,r2,48
    3cfc:	843fffc4 	addi	r16,r16,-1
    3d00:	9809883a 	mov	r4,r19
    3d04:	880b883a 	mov	r5,r17
    3d08:	80800005 	stb	r2,0(r16)
    3d0c:	01800284 	movi	r6,10
    3d10:	000f883a 	mov	r7,zero
    3d14:	000c3a40 	call	c3a4 <__udivdi3>
    3d18:	1027883a 	mov	r19,r2
    3d1c:	10c4b03a 	or	r2,r2,r3
    3d20:	1823883a 	mov	r17,r3
    3d24:	103fef1e 	bne	r2,zero,3ce4 <__alt_data_end+0xff003ce4>
    3d28:	d8c02817 	ldw	r3,160(sp)
    3d2c:	dc402a17 	ldw	r17,168(sp)
    3d30:	b011883a 	mov	r8,r22
    3d34:	1c07c83a 	sub	r3,r3,r16
    3d38:	d8c02e15 	stw	r3,184(sp)
    3d3c:	00005906 	br	3ea4 <___vfprintf_internal_r+0x71c>
    3d40:	18c03fcc 	andi	r3,r3,255
    3d44:	1806fa1e 	bne	r3,zero,5930 <___vfprintf_internal_r+0x21a8>
    3d48:	9080020c 	andi	r2,r18,8
    3d4c:	10048a26 	beq	r2,zero,4f78 <___vfprintf_internal_r+0x17f0>
    3d50:	d8c02d17 	ldw	r3,180(sp)
    3d54:	d9002d17 	ldw	r4,180(sp)
    3d58:	d9402d17 	ldw	r5,180(sp)
    3d5c:	18c00017 	ldw	r3,0(r3)
    3d60:	21000117 	ldw	r4,4(r4)
    3d64:	29400204 	addi	r5,r5,8
    3d68:	d8c03615 	stw	r3,216(sp)
    3d6c:	d9003815 	stw	r4,224(sp)
    3d70:	d9402d15 	stw	r5,180(sp)
    3d74:	d9003617 	ldw	r4,216(sp)
    3d78:	d9403817 	ldw	r5,224(sp)
    3d7c:	da003d15 	stw	r8,244(sp)
    3d80:	04000044 	movi	r16,1
    3d84:	000a19c0 	call	a19c <__fpclassifyd>
    3d88:	da003d17 	ldw	r8,244(sp)
    3d8c:	14041f1e 	bne	r2,r16,4e0c <___vfprintf_internal_r+0x1684>
    3d90:	d9003617 	ldw	r4,216(sp)
    3d94:	d9403817 	ldw	r5,224(sp)
    3d98:	000d883a 	mov	r6,zero
    3d9c:	000f883a 	mov	r7,zero
    3da0:	000d8640 	call	d864 <__ledf2>
    3da4:	da003d17 	ldw	r8,244(sp)
    3da8:	1005be16 	blt	r2,zero,54a4 <___vfprintf_internal_r+0x1d1c>
    3dac:	df002783 	ldbu	fp,158(sp)
    3db0:	008011c4 	movi	r2,71
    3db4:	1445330e 	bge	r2,r17,5284 <___vfprintf_internal_r+0x1afc>
    3db8:	04000074 	movhi	r16,1
    3dbc:	8406bf04 	addi	r16,r16,6908
    3dc0:	00c000c4 	movi	r3,3
    3dc4:	00bfdfc4 	movi	r2,-129
    3dc8:	d8c02a15 	stw	r3,168(sp)
    3dcc:	90a4703a 	and	r18,r18,r2
    3dd0:	d8c02e15 	stw	r3,184(sp)
    3dd4:	d8002915 	stw	zero,164(sp)
    3dd8:	d8003215 	stw	zero,200(sp)
    3ddc:	00003706 	br	3ebc <___vfprintf_internal_r+0x734>
    3de0:	94800214 	ori	r18,r18,8
    3de4:	ac400007 	ldb	r17,0(r21)
    3de8:	003ec806 	br	390c <__alt_data_end+0xff00390c>
    3dec:	18c03fcc 	andi	r3,r3,255
    3df0:	1806db1e 	bne	r3,zero,5960 <___vfprintf_internal_r+0x21d8>
    3df4:	94800414 	ori	r18,r18,16
    3df8:	9080080c 	andi	r2,r18,32
    3dfc:	1002d826 	beq	r2,zero,4960 <___vfprintf_internal_r+0x11d8>
    3e00:	d9402d17 	ldw	r5,180(sp)
    3e04:	d8c02917 	ldw	r3,164(sp)
    3e08:	d8002785 	stb	zero,158(sp)
    3e0c:	28800204 	addi	r2,r5,8
    3e10:	2cc00017 	ldw	r19,0(r5)
    3e14:	2d800117 	ldw	r22,4(r5)
    3e18:	18048f16 	blt	r3,zero,5058 <___vfprintf_internal_r+0x18d0>
    3e1c:	013fdfc4 	movi	r4,-129
    3e20:	9d86b03a 	or	r3,r19,r22
    3e24:	d8802d15 	stw	r2,180(sp)
    3e28:	9124703a 	and	r18,r18,r4
    3e2c:	1802d91e 	bne	r3,zero,4994 <___vfprintf_internal_r+0x120c>
    3e30:	d8c02917 	ldw	r3,164(sp)
    3e34:	0039883a 	mov	fp,zero
    3e38:	1805c326 	beq	r3,zero,5548 <___vfprintf_internal_r+0x1dc0>
    3e3c:	0027883a 	mov	r19,zero
    3e40:	002d883a 	mov	r22,zero
    3e44:	dc001e04 	addi	r16,sp,120
    3e48:	9806d0fa 	srli	r3,r19,3
    3e4c:	b008977a 	slli	r4,r22,29
    3e50:	b02cd0fa 	srli	r22,r22,3
    3e54:	9cc001cc 	andi	r19,r19,7
    3e58:	98800c04 	addi	r2,r19,48
    3e5c:	843fffc4 	addi	r16,r16,-1
    3e60:	20e6b03a 	or	r19,r4,r3
    3e64:	80800005 	stb	r2,0(r16)
    3e68:	9d86b03a 	or	r3,r19,r22
    3e6c:	183ff61e 	bne	r3,zero,3e48 <__alt_data_end+0xff003e48>
    3e70:	90c0004c 	andi	r3,r18,1
    3e74:	18013b26 	beq	r3,zero,4364 <___vfprintf_internal_r+0xbdc>
    3e78:	10803fcc 	andi	r2,r2,255
    3e7c:	1080201c 	xori	r2,r2,128
    3e80:	10bfe004 	addi	r2,r2,-128
    3e84:	00c00c04 	movi	r3,48
    3e88:	10c13626 	beq	r2,r3,4364 <___vfprintf_internal_r+0xbdc>
    3e8c:	80ffffc5 	stb	r3,-1(r16)
    3e90:	d8c02817 	ldw	r3,160(sp)
    3e94:	80bfffc4 	addi	r2,r16,-1
    3e98:	1021883a 	mov	r16,r2
    3e9c:	1887c83a 	sub	r3,r3,r2
    3ea0:	d8c02e15 	stw	r3,184(sp)
    3ea4:	d8802e17 	ldw	r2,184(sp)
    3ea8:	d9002917 	ldw	r4,164(sp)
    3eac:	1100010e 	bge	r2,r4,3eb4 <___vfprintf_internal_r+0x72c>
    3eb0:	2005883a 	mov	r2,r4
    3eb4:	d8802a15 	stw	r2,168(sp)
    3eb8:	d8003215 	stw	zero,200(sp)
    3ebc:	e7003fcc 	andi	fp,fp,255
    3ec0:	e700201c 	xori	fp,fp,128
    3ec4:	e73fe004 	addi	fp,fp,-128
    3ec8:	e0000326 	beq	fp,zero,3ed8 <___vfprintf_internal_r+0x750>
    3ecc:	d8c02a17 	ldw	r3,168(sp)
    3ed0:	18c00044 	addi	r3,r3,1
    3ed4:	d8c02a15 	stw	r3,168(sp)
    3ed8:	90c0008c 	andi	r3,r18,2
    3edc:	d8c02b15 	stw	r3,172(sp)
    3ee0:	18000326 	beq	r3,zero,3ef0 <___vfprintf_internal_r+0x768>
    3ee4:	d8c02a17 	ldw	r3,168(sp)
    3ee8:	18c00084 	addi	r3,r3,2
    3eec:	d8c02a15 	stw	r3,168(sp)
    3ef0:	90c0210c 	andi	r3,r18,132
    3ef4:	d8c03015 	stw	r3,192(sp)
    3ef8:	1801a31e 	bne	r3,zero,4588 <___vfprintf_internal_r+0xe00>
    3efc:	d9003117 	ldw	r4,196(sp)
    3f00:	d8c02a17 	ldw	r3,168(sp)
    3f04:	20e7c83a 	sub	r19,r4,r3
    3f08:	04c19f0e 	bge	zero,r19,4588 <___vfprintf_internal_r+0xe00>
    3f0c:	02400404 	movi	r9,16
    3f10:	d8c02017 	ldw	r3,128(sp)
    3f14:	d8801f17 	ldw	r2,124(sp)
    3f18:	4cc50d0e 	bge	r9,r19,5350 <___vfprintf_internal_r+0x1bc8>
    3f1c:	01400074 	movhi	r5,1
    3f20:	2946d284 	addi	r5,r5,6986
    3f24:	dc403b15 	stw	r17,236(sp)
    3f28:	d9403515 	stw	r5,212(sp)
    3f2c:	9823883a 	mov	r17,r19
    3f30:	482d883a 	mov	r22,r9
    3f34:	9027883a 	mov	r19,r18
    3f38:	070001c4 	movi	fp,7
    3f3c:	8025883a 	mov	r18,r16
    3f40:	dc002c17 	ldw	r16,176(sp)
    3f44:	00000306 	br	3f54 <___vfprintf_internal_r+0x7cc>
    3f48:	8c7ffc04 	addi	r17,r17,-16
    3f4c:	42000204 	addi	r8,r8,8
    3f50:	b440130e 	bge	r22,r17,3fa0 <___vfprintf_internal_r+0x818>
    3f54:	01000074 	movhi	r4,1
    3f58:	18c00404 	addi	r3,r3,16
    3f5c:	10800044 	addi	r2,r2,1
    3f60:	2106d284 	addi	r4,r4,6986
    3f64:	41000015 	stw	r4,0(r8)
    3f68:	45800115 	stw	r22,4(r8)
    3f6c:	d8c02015 	stw	r3,128(sp)
    3f70:	d8801f15 	stw	r2,124(sp)
    3f74:	e0bff40e 	bge	fp,r2,3f48 <__alt_data_end+0xff003f48>
    3f78:	d9801e04 	addi	r6,sp,120
    3f7c:	b80b883a 	mov	r5,r23
    3f80:	8009883a 	mov	r4,r16
    3f84:	000a5240 	call	a524 <__sprint_r>
    3f88:	103f011e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    3f8c:	8c7ffc04 	addi	r17,r17,-16
    3f90:	d8c02017 	ldw	r3,128(sp)
    3f94:	d8801f17 	ldw	r2,124(sp)
    3f98:	da000404 	addi	r8,sp,16
    3f9c:	b47fed16 	blt	r22,r17,3f54 <__alt_data_end+0xff003f54>
    3fa0:	9021883a 	mov	r16,r18
    3fa4:	9825883a 	mov	r18,r19
    3fa8:	8827883a 	mov	r19,r17
    3fac:	dc403b17 	ldw	r17,236(sp)
    3fb0:	d9403517 	ldw	r5,212(sp)
    3fb4:	98c7883a 	add	r3,r19,r3
    3fb8:	10800044 	addi	r2,r2,1
    3fbc:	41400015 	stw	r5,0(r8)
    3fc0:	44c00115 	stw	r19,4(r8)
    3fc4:	d8c02015 	stw	r3,128(sp)
    3fc8:	d8801f15 	stw	r2,124(sp)
    3fcc:	010001c4 	movi	r4,7
    3fd0:	2082a316 	blt	r4,r2,4a60 <___vfprintf_internal_r+0x12d8>
    3fd4:	df002787 	ldb	fp,158(sp)
    3fd8:	42000204 	addi	r8,r8,8
    3fdc:	e0000c26 	beq	fp,zero,4010 <___vfprintf_internal_r+0x888>
    3fe0:	d8801f17 	ldw	r2,124(sp)
    3fe4:	d9002784 	addi	r4,sp,158
    3fe8:	18c00044 	addi	r3,r3,1
    3fec:	10800044 	addi	r2,r2,1
    3ff0:	41000015 	stw	r4,0(r8)
    3ff4:	01000044 	movi	r4,1
    3ff8:	41000115 	stw	r4,4(r8)
    3ffc:	d8c02015 	stw	r3,128(sp)
    4000:	d8801f15 	stw	r2,124(sp)
    4004:	010001c4 	movi	r4,7
    4008:	20823c16 	blt	r4,r2,48fc <___vfprintf_internal_r+0x1174>
    400c:	42000204 	addi	r8,r8,8
    4010:	d8802b17 	ldw	r2,172(sp)
    4014:	10000c26 	beq	r2,zero,4048 <___vfprintf_internal_r+0x8c0>
    4018:	d8801f17 	ldw	r2,124(sp)
    401c:	d9002704 	addi	r4,sp,156
    4020:	18c00084 	addi	r3,r3,2
    4024:	10800044 	addi	r2,r2,1
    4028:	41000015 	stw	r4,0(r8)
    402c:	01000084 	movi	r4,2
    4030:	41000115 	stw	r4,4(r8)
    4034:	d8c02015 	stw	r3,128(sp)
    4038:	d8801f15 	stw	r2,124(sp)
    403c:	010001c4 	movi	r4,7
    4040:	20823616 	blt	r4,r2,491c <___vfprintf_internal_r+0x1194>
    4044:	42000204 	addi	r8,r8,8
    4048:	d9003017 	ldw	r4,192(sp)
    404c:	00802004 	movi	r2,128
    4050:	20819926 	beq	r4,r2,46b8 <___vfprintf_internal_r+0xf30>
    4054:	d9402917 	ldw	r5,164(sp)
    4058:	d8802e17 	ldw	r2,184(sp)
    405c:	28adc83a 	sub	r22,r5,r2
    4060:	0580310e 	bge	zero,r22,4128 <___vfprintf_internal_r+0x9a0>
    4064:	07000404 	movi	fp,16
    4068:	d8801f17 	ldw	r2,124(sp)
    406c:	e584140e 	bge	fp,r22,50c0 <___vfprintf_internal_r+0x1938>
    4070:	01400074 	movhi	r5,1
    4074:	2946ce84 	addi	r5,r5,6970
    4078:	dc402915 	stw	r17,164(sp)
    407c:	d9402b15 	stw	r5,172(sp)
    4080:	b023883a 	mov	r17,r22
    4084:	04c001c4 	movi	r19,7
    4088:	a82d883a 	mov	r22,r21
    408c:	902b883a 	mov	r21,r18
    4090:	8025883a 	mov	r18,r16
    4094:	dc002c17 	ldw	r16,176(sp)
    4098:	00000306 	br	40a8 <___vfprintf_internal_r+0x920>
    409c:	8c7ffc04 	addi	r17,r17,-16
    40a0:	42000204 	addi	r8,r8,8
    40a4:	e440110e 	bge	fp,r17,40ec <___vfprintf_internal_r+0x964>
    40a8:	18c00404 	addi	r3,r3,16
    40ac:	10800044 	addi	r2,r2,1
    40b0:	45000015 	stw	r20,0(r8)
    40b4:	47000115 	stw	fp,4(r8)
    40b8:	d8c02015 	stw	r3,128(sp)
    40bc:	d8801f15 	stw	r2,124(sp)
    40c0:	98bff60e 	bge	r19,r2,409c <__alt_data_end+0xff00409c>
    40c4:	d9801e04 	addi	r6,sp,120
    40c8:	b80b883a 	mov	r5,r23
    40cc:	8009883a 	mov	r4,r16
    40d0:	000a5240 	call	a524 <__sprint_r>
    40d4:	103eae1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    40d8:	8c7ffc04 	addi	r17,r17,-16
    40dc:	d8c02017 	ldw	r3,128(sp)
    40e0:	d8801f17 	ldw	r2,124(sp)
    40e4:	da000404 	addi	r8,sp,16
    40e8:	e47fef16 	blt	fp,r17,40a8 <__alt_data_end+0xff0040a8>
    40ec:	9021883a 	mov	r16,r18
    40f0:	a825883a 	mov	r18,r21
    40f4:	b02b883a 	mov	r21,r22
    40f8:	882d883a 	mov	r22,r17
    40fc:	dc402917 	ldw	r17,164(sp)
    4100:	d9002b17 	ldw	r4,172(sp)
    4104:	1d87883a 	add	r3,r3,r22
    4108:	10800044 	addi	r2,r2,1
    410c:	41000015 	stw	r4,0(r8)
    4110:	45800115 	stw	r22,4(r8)
    4114:	d8c02015 	stw	r3,128(sp)
    4118:	d8801f15 	stw	r2,124(sp)
    411c:	010001c4 	movi	r4,7
    4120:	2081ee16 	blt	r4,r2,48dc <___vfprintf_internal_r+0x1154>
    4124:	42000204 	addi	r8,r8,8
    4128:	9080400c 	andi	r2,r18,256
    412c:	1001181e 	bne	r2,zero,4590 <___vfprintf_internal_r+0xe08>
    4130:	d9402e17 	ldw	r5,184(sp)
    4134:	d8801f17 	ldw	r2,124(sp)
    4138:	44000015 	stw	r16,0(r8)
    413c:	1947883a 	add	r3,r3,r5
    4140:	10800044 	addi	r2,r2,1
    4144:	41400115 	stw	r5,4(r8)
    4148:	d8c02015 	stw	r3,128(sp)
    414c:	d8801f15 	stw	r2,124(sp)
    4150:	010001c4 	movi	r4,7
    4154:	2081d316 	blt	r4,r2,48a4 <___vfprintf_internal_r+0x111c>
    4158:	42000204 	addi	r8,r8,8
    415c:	9480010c 	andi	r18,r18,4
    4160:	90003226 	beq	r18,zero,422c <___vfprintf_internal_r+0xaa4>
    4164:	d9403117 	ldw	r5,196(sp)
    4168:	d8802a17 	ldw	r2,168(sp)
    416c:	28a1c83a 	sub	r16,r5,r2
    4170:	04002e0e 	bge	zero,r16,422c <___vfprintf_internal_r+0xaa4>
    4174:	04400404 	movi	r17,16
    4178:	d8801f17 	ldw	r2,124(sp)
    417c:	8c04a20e 	bge	r17,r16,5408 <___vfprintf_internal_r+0x1c80>
    4180:	01400074 	movhi	r5,1
    4184:	2946d284 	addi	r5,r5,6986
    4188:	d9403515 	stw	r5,212(sp)
    418c:	048001c4 	movi	r18,7
    4190:	dcc02c17 	ldw	r19,176(sp)
    4194:	00000306 	br	41a4 <___vfprintf_internal_r+0xa1c>
    4198:	843ffc04 	addi	r16,r16,-16
    419c:	42000204 	addi	r8,r8,8
    41a0:	8c00130e 	bge	r17,r16,41f0 <___vfprintf_internal_r+0xa68>
    41a4:	01000074 	movhi	r4,1
    41a8:	18c00404 	addi	r3,r3,16
    41ac:	10800044 	addi	r2,r2,1
    41b0:	2106d284 	addi	r4,r4,6986
    41b4:	41000015 	stw	r4,0(r8)
    41b8:	44400115 	stw	r17,4(r8)
    41bc:	d8c02015 	stw	r3,128(sp)
    41c0:	d8801f15 	stw	r2,124(sp)
    41c4:	90bff40e 	bge	r18,r2,4198 <__alt_data_end+0xff004198>
    41c8:	d9801e04 	addi	r6,sp,120
    41cc:	b80b883a 	mov	r5,r23
    41d0:	9809883a 	mov	r4,r19
    41d4:	000a5240 	call	a524 <__sprint_r>
    41d8:	103e6d1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    41dc:	843ffc04 	addi	r16,r16,-16
    41e0:	d8c02017 	ldw	r3,128(sp)
    41e4:	d8801f17 	ldw	r2,124(sp)
    41e8:	da000404 	addi	r8,sp,16
    41ec:	8c3fed16 	blt	r17,r16,41a4 <__alt_data_end+0xff0041a4>
    41f0:	d9403517 	ldw	r5,212(sp)
    41f4:	1c07883a 	add	r3,r3,r16
    41f8:	10800044 	addi	r2,r2,1
    41fc:	41400015 	stw	r5,0(r8)
    4200:	44000115 	stw	r16,4(r8)
    4204:	d8c02015 	stw	r3,128(sp)
    4208:	d8801f15 	stw	r2,124(sp)
    420c:	010001c4 	movi	r4,7
    4210:	2080060e 	bge	r4,r2,422c <___vfprintf_internal_r+0xaa4>
    4214:	d9002c17 	ldw	r4,176(sp)
    4218:	d9801e04 	addi	r6,sp,120
    421c:	b80b883a 	mov	r5,r23
    4220:	000a5240 	call	a524 <__sprint_r>
    4224:	103e5a1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4228:	d8c02017 	ldw	r3,128(sp)
    422c:	d8803117 	ldw	r2,196(sp)
    4230:	d9002a17 	ldw	r4,168(sp)
    4234:	1100010e 	bge	r2,r4,423c <___vfprintf_internal_r+0xab4>
    4238:	2005883a 	mov	r2,r4
    423c:	d9402f17 	ldw	r5,188(sp)
    4240:	288b883a 	add	r5,r5,r2
    4244:	d9402f15 	stw	r5,188(sp)
    4248:	18019e1e 	bne	r3,zero,48c4 <___vfprintf_internal_r+0x113c>
    424c:	a8800007 	ldb	r2,0(r21)
    4250:	d8001f15 	stw	zero,124(sp)
    4254:	da000404 	addi	r8,sp,16
    4258:	103d851e 	bne	r2,zero,3870 <__alt_data_end+0xff003870>
    425c:	a821883a 	mov	r16,r21
    4260:	003d9b06 	br	38d0 <__alt_data_end+0xff0038d0>
    4264:	18c03fcc 	andi	r3,r3,255
    4268:	1805c11e 	bne	r3,zero,5970 <___vfprintf_internal_r+0x21e8>
    426c:	94800414 	ori	r18,r18,16
    4270:	9080080c 	andi	r2,r18,32
    4274:	10020c26 	beq	r2,zero,4aa8 <___vfprintf_internal_r+0x1320>
    4278:	d8802d17 	ldw	r2,180(sp)
    427c:	d9002917 	ldw	r4,164(sp)
    4280:	d8002785 	stb	zero,158(sp)
    4284:	10c00204 	addi	r3,r2,8
    4288:	14c00017 	ldw	r19,0(r2)
    428c:	15800117 	ldw	r22,4(r2)
    4290:	20040f16 	blt	r4,zero,52d0 <___vfprintf_internal_r+0x1b48>
    4294:	013fdfc4 	movi	r4,-129
    4298:	9d84b03a 	or	r2,r19,r22
    429c:	d8c02d15 	stw	r3,180(sp)
    42a0:	9124703a 	and	r18,r18,r4
    42a4:	0039883a 	mov	fp,zero
    42a8:	103e891e 	bne	r2,zero,3cd0 <__alt_data_end+0xff003cd0>
    42ac:	d9002917 	ldw	r4,164(sp)
    42b0:	2002c11e 	bne	r4,zero,4db8 <___vfprintf_internal_r+0x1630>
    42b4:	d8002915 	stw	zero,164(sp)
    42b8:	d8002e15 	stw	zero,184(sp)
    42bc:	dc001e04 	addi	r16,sp,120
    42c0:	003ef806 	br	3ea4 <__alt_data_end+0xff003ea4>
    42c4:	18c03fcc 	andi	r3,r3,255
    42c8:	18059d1e 	bne	r3,zero,5940 <___vfprintf_internal_r+0x21b8>
    42cc:	01400074 	movhi	r5,1
    42d0:	2946c204 	addi	r5,r5,6920
    42d4:	d9403915 	stw	r5,228(sp)
    42d8:	9080080c 	andi	r2,r18,32
    42dc:	10005226 	beq	r2,zero,4428 <___vfprintf_internal_r+0xca0>
    42e0:	d8802d17 	ldw	r2,180(sp)
    42e4:	14c00017 	ldw	r19,0(r2)
    42e8:	15800117 	ldw	r22,4(r2)
    42ec:	10800204 	addi	r2,r2,8
    42f0:	d8802d15 	stw	r2,180(sp)
    42f4:	9080004c 	andi	r2,r18,1
    42f8:	10019026 	beq	r2,zero,493c <___vfprintf_internal_r+0x11b4>
    42fc:	9d84b03a 	or	r2,r19,r22
    4300:	10036926 	beq	r2,zero,50a8 <___vfprintf_internal_r+0x1920>
    4304:	d8c02917 	ldw	r3,164(sp)
    4308:	00800c04 	movi	r2,48
    430c:	d8802705 	stb	r2,156(sp)
    4310:	dc402745 	stb	r17,157(sp)
    4314:	d8002785 	stb	zero,158(sp)
    4318:	90800094 	ori	r2,r18,2
    431c:	18045d16 	blt	r3,zero,5494 <___vfprintf_internal_r+0x1d0c>
    4320:	00bfdfc4 	movi	r2,-129
    4324:	90a4703a 	and	r18,r18,r2
    4328:	94800094 	ori	r18,r18,2
    432c:	0039883a 	mov	fp,zero
    4330:	d9003917 	ldw	r4,228(sp)
    4334:	dc001e04 	addi	r16,sp,120
    4338:	988003cc 	andi	r2,r19,15
    433c:	b006973a 	slli	r3,r22,28
    4340:	2085883a 	add	r2,r4,r2
    4344:	9826d13a 	srli	r19,r19,4
    4348:	10800003 	ldbu	r2,0(r2)
    434c:	b02cd13a 	srli	r22,r22,4
    4350:	843fffc4 	addi	r16,r16,-1
    4354:	1ce6b03a 	or	r19,r3,r19
    4358:	80800005 	stb	r2,0(r16)
    435c:	9d84b03a 	or	r2,r19,r22
    4360:	103ff51e 	bne	r2,zero,4338 <__alt_data_end+0xff004338>
    4364:	d8c02817 	ldw	r3,160(sp)
    4368:	1c07c83a 	sub	r3,r3,r16
    436c:	d8c02e15 	stw	r3,184(sp)
    4370:	003ecc06 	br	3ea4 <__alt_data_end+0xff003ea4>
    4374:	18c03fcc 	andi	r3,r3,255
    4378:	183e9f26 	beq	r3,zero,3df8 <__alt_data_end+0xff003df8>
    437c:	d9c02785 	stb	r7,158(sp)
    4380:	003e9d06 	br	3df8 <__alt_data_end+0xff003df8>
    4384:	00c00044 	movi	r3,1
    4388:	01c00ac4 	movi	r7,43
    438c:	ac400007 	ldb	r17,0(r21)
    4390:	003d5e06 	br	390c <__alt_data_end+0xff00390c>
    4394:	94800814 	ori	r18,r18,32
    4398:	ac400007 	ldb	r17,0(r21)
    439c:	003d5b06 	br	390c <__alt_data_end+0xff00390c>
    43a0:	d8c02d17 	ldw	r3,180(sp)
    43a4:	d8002785 	stb	zero,158(sp)
    43a8:	1c000017 	ldw	r16,0(r3)
    43ac:	1cc00104 	addi	r19,r3,4
    43b0:	80041926 	beq	r16,zero,5418 <___vfprintf_internal_r+0x1c90>
    43b4:	d9002917 	ldw	r4,164(sp)
    43b8:	2003d016 	blt	r4,zero,52fc <___vfprintf_internal_r+0x1b74>
    43bc:	200d883a 	mov	r6,r4
    43c0:	000b883a 	mov	r5,zero
    43c4:	8009883a 	mov	r4,r16
    43c8:	da003d15 	stw	r8,244(sp)
    43cc:	000878c0 	call	878c <memchr>
    43d0:	da003d17 	ldw	r8,244(sp)
    43d4:	10045426 	beq	r2,zero,5528 <___vfprintf_internal_r+0x1da0>
    43d8:	1405c83a 	sub	r2,r2,r16
    43dc:	d8802e15 	stw	r2,184(sp)
    43e0:	1003cc16 	blt	r2,zero,5314 <___vfprintf_internal_r+0x1b8c>
    43e4:	df002783 	ldbu	fp,158(sp)
    43e8:	d8802a15 	stw	r2,168(sp)
    43ec:	dcc02d15 	stw	r19,180(sp)
    43f0:	d8002915 	stw	zero,164(sp)
    43f4:	d8003215 	stw	zero,200(sp)
    43f8:	003eb006 	br	3ebc <__alt_data_end+0xff003ebc>
    43fc:	18c03fcc 	andi	r3,r3,255
    4400:	183f9b26 	beq	r3,zero,4270 <__alt_data_end+0xff004270>
    4404:	d9c02785 	stb	r7,158(sp)
    4408:	003f9906 	br	4270 <__alt_data_end+0xff004270>
    440c:	18c03fcc 	andi	r3,r3,255
    4410:	1805551e 	bne	r3,zero,5968 <___vfprintf_internal_r+0x21e0>
    4414:	01400074 	movhi	r5,1
    4418:	2946c704 	addi	r5,r5,6940
    441c:	d9403915 	stw	r5,228(sp)
    4420:	9080080c 	andi	r2,r18,32
    4424:	103fae1e 	bne	r2,zero,42e0 <__alt_data_end+0xff0042e0>
    4428:	9080040c 	andi	r2,r18,16
    442c:	1002de26 	beq	r2,zero,4fa8 <___vfprintf_internal_r+0x1820>
    4430:	d8c02d17 	ldw	r3,180(sp)
    4434:	002d883a 	mov	r22,zero
    4438:	1cc00017 	ldw	r19,0(r3)
    443c:	18c00104 	addi	r3,r3,4
    4440:	d8c02d15 	stw	r3,180(sp)
    4444:	003fab06 	br	42f4 <__alt_data_end+0xff0042f4>
    4448:	38803fcc 	andi	r2,r7,255
    444c:	1080201c 	xori	r2,r2,128
    4450:	10bfe004 	addi	r2,r2,-128
    4454:	1002d21e 	bne	r2,zero,4fa0 <___vfprintf_internal_r+0x1818>
    4458:	00c00044 	movi	r3,1
    445c:	01c00804 	movi	r7,32
    4460:	ac400007 	ldb	r17,0(r21)
    4464:	003d2906 	br	390c <__alt_data_end+0xff00390c>
    4468:	94800054 	ori	r18,r18,1
    446c:	ac400007 	ldb	r17,0(r21)
    4470:	003d2606 	br	390c <__alt_data_end+0xff00390c>
    4474:	18c03fcc 	andi	r3,r3,255
    4478:	183e0526 	beq	r3,zero,3c90 <__alt_data_end+0xff003c90>
    447c:	d9c02785 	stb	r7,158(sp)
    4480:	003e0306 	br	3c90 <__alt_data_end+0xff003c90>
    4484:	94801014 	ori	r18,r18,64
    4488:	ac400007 	ldb	r17,0(r21)
    448c:	003d1f06 	br	390c <__alt_data_end+0xff00390c>
    4490:	ac400007 	ldb	r17,0(r21)
    4494:	8a438726 	beq	r17,r9,52b4 <___vfprintf_internal_r+0x1b2c>
    4498:	94800414 	ori	r18,r18,16
    449c:	003d1b06 	br	390c <__alt_data_end+0xff00390c>
    44a0:	18c03fcc 	andi	r3,r3,255
    44a4:	1805341e 	bne	r3,zero,5978 <___vfprintf_internal_r+0x21f0>
    44a8:	9080080c 	andi	r2,r18,32
    44ac:	1002cd26 	beq	r2,zero,4fe4 <___vfprintf_internal_r+0x185c>
    44b0:	d9402d17 	ldw	r5,180(sp)
    44b4:	d9002f17 	ldw	r4,188(sp)
    44b8:	28800017 	ldw	r2,0(r5)
    44bc:	2007d7fa 	srai	r3,r4,31
    44c0:	29400104 	addi	r5,r5,4
    44c4:	d9402d15 	stw	r5,180(sp)
    44c8:	11000015 	stw	r4,0(r2)
    44cc:	10c00115 	stw	r3,4(r2)
    44d0:	003ce506 	br	3868 <__alt_data_end+0xff003868>
    44d4:	d8c02d17 	ldw	r3,180(sp)
    44d8:	d9002d17 	ldw	r4,180(sp)
    44dc:	d8002785 	stb	zero,158(sp)
    44e0:	18800017 	ldw	r2,0(r3)
    44e4:	21000104 	addi	r4,r4,4
    44e8:	00c00044 	movi	r3,1
    44ec:	d8c02a15 	stw	r3,168(sp)
    44f0:	d8801405 	stb	r2,80(sp)
    44f4:	d9002d15 	stw	r4,180(sp)
    44f8:	d8c02e15 	stw	r3,184(sp)
    44fc:	d8002915 	stw	zero,164(sp)
    4500:	d8003215 	stw	zero,200(sp)
    4504:	dc001404 	addi	r16,sp,80
    4508:	0039883a 	mov	fp,zero
    450c:	003e7206 	br	3ed8 <__alt_data_end+0xff003ed8>
    4510:	01000074 	movhi	r4,1
    4514:	2106c704 	addi	r4,r4,6940
    4518:	0039883a 	mov	fp,zero
    451c:	d9003915 	stw	r4,228(sp)
    4520:	04401e04 	movi	r17,120
    4524:	003f8206 	br	4330 <__alt_data_end+0xff004330>
    4528:	18c03fcc 	andi	r3,r3,255
    452c:	1805061e 	bne	r3,zero,5948 <___vfprintf_internal_r+0x21c0>
    4530:	883d9126 	beq	r17,zero,3b78 <__alt_data_end+0xff003b78>
    4534:	00c00044 	movi	r3,1
    4538:	d8c02a15 	stw	r3,168(sp)
    453c:	dc401405 	stb	r17,80(sp)
    4540:	d8002785 	stb	zero,158(sp)
    4544:	003fec06 	br	44f8 <__alt_data_end+0xff0044f8>
    4548:	01400074 	movhi	r5,1
    454c:	2946c704 	addi	r5,r5,6940
    4550:	d9403915 	stw	r5,228(sp)
    4554:	d8c02d15 	stw	r3,180(sp)
    4558:	1025883a 	mov	r18,r2
    455c:	04401e04 	movi	r17,120
    4560:	9d84b03a 	or	r2,r19,r22
    4564:	1000fc1e 	bne	r2,zero,4958 <___vfprintf_internal_r+0x11d0>
    4568:	0039883a 	mov	fp,zero
    456c:	00800084 	movi	r2,2
    4570:	10803fcc 	andi	r2,r2,255
    4574:	00c00044 	movi	r3,1
    4578:	10c20f26 	beq	r2,r3,4db8 <___vfprintf_internal_r+0x1630>
    457c:	00c00084 	movi	r3,2
    4580:	10fd6326 	beq	r2,r3,3b10 <__alt_data_end+0xff003b10>
    4584:	003e2d06 	br	3e3c <__alt_data_end+0xff003e3c>
    4588:	d8c02017 	ldw	r3,128(sp)
    458c:	003e9306 	br	3fdc <__alt_data_end+0xff003fdc>
    4590:	00801944 	movi	r2,101
    4594:	14407e0e 	bge	r2,r17,4790 <___vfprintf_internal_r+0x1008>
    4598:	d9003617 	ldw	r4,216(sp)
    459c:	d9403817 	ldw	r5,224(sp)
    45a0:	000d883a 	mov	r6,zero
    45a4:	000f883a 	mov	r7,zero
    45a8:	d8c03c15 	stw	r3,240(sp)
    45ac:	da003d15 	stw	r8,244(sp)
    45b0:	000d7000 	call	d700 <__eqdf2>
    45b4:	d8c03c17 	ldw	r3,240(sp)
    45b8:	da003d17 	ldw	r8,244(sp)
    45bc:	1000f71e 	bne	r2,zero,499c <___vfprintf_internal_r+0x1214>
    45c0:	d8801f17 	ldw	r2,124(sp)
    45c4:	01000074 	movhi	r4,1
    45c8:	2106ce04 	addi	r4,r4,6968
    45cc:	18c00044 	addi	r3,r3,1
    45d0:	10800044 	addi	r2,r2,1
    45d4:	41000015 	stw	r4,0(r8)
    45d8:	01000044 	movi	r4,1
    45dc:	41000115 	stw	r4,4(r8)
    45e0:	d8c02015 	stw	r3,128(sp)
    45e4:	d8801f15 	stw	r2,124(sp)
    45e8:	010001c4 	movi	r4,7
    45ec:	2082b816 	blt	r4,r2,50d0 <___vfprintf_internal_r+0x1948>
    45f0:	42000204 	addi	r8,r8,8
    45f4:	d8802617 	ldw	r2,152(sp)
    45f8:	d9403317 	ldw	r5,204(sp)
    45fc:	11400216 	blt	r2,r5,4608 <___vfprintf_internal_r+0xe80>
    4600:	9080004c 	andi	r2,r18,1
    4604:	103ed526 	beq	r2,zero,415c <__alt_data_end+0xff00415c>
    4608:	d8803717 	ldw	r2,220(sp)
    460c:	d9003417 	ldw	r4,208(sp)
    4610:	d9403717 	ldw	r5,220(sp)
    4614:	1887883a 	add	r3,r3,r2
    4618:	d8801f17 	ldw	r2,124(sp)
    461c:	41000015 	stw	r4,0(r8)
    4620:	41400115 	stw	r5,4(r8)
    4624:	10800044 	addi	r2,r2,1
    4628:	d8c02015 	stw	r3,128(sp)
    462c:	d8801f15 	stw	r2,124(sp)
    4630:	010001c4 	movi	r4,7
    4634:	20832916 	blt	r4,r2,52dc <___vfprintf_internal_r+0x1b54>
    4638:	42000204 	addi	r8,r8,8
    463c:	d8803317 	ldw	r2,204(sp)
    4640:	143fffc4 	addi	r16,r2,-1
    4644:	043ec50e 	bge	zero,r16,415c <__alt_data_end+0xff00415c>
    4648:	04400404 	movi	r17,16
    464c:	d8801f17 	ldw	r2,124(sp)
    4650:	8c00880e 	bge	r17,r16,4874 <___vfprintf_internal_r+0x10ec>
    4654:	01400074 	movhi	r5,1
    4658:	2946ce84 	addi	r5,r5,6970
    465c:	d9402b15 	stw	r5,172(sp)
    4660:	058001c4 	movi	r22,7
    4664:	dcc02c17 	ldw	r19,176(sp)
    4668:	00000306 	br	4678 <___vfprintf_internal_r+0xef0>
    466c:	42000204 	addi	r8,r8,8
    4670:	843ffc04 	addi	r16,r16,-16
    4674:	8c00820e 	bge	r17,r16,4880 <___vfprintf_internal_r+0x10f8>
    4678:	18c00404 	addi	r3,r3,16
    467c:	10800044 	addi	r2,r2,1
    4680:	45000015 	stw	r20,0(r8)
    4684:	44400115 	stw	r17,4(r8)
    4688:	d8c02015 	stw	r3,128(sp)
    468c:	d8801f15 	stw	r2,124(sp)
    4690:	b0bff60e 	bge	r22,r2,466c <__alt_data_end+0xff00466c>
    4694:	d9801e04 	addi	r6,sp,120
    4698:	b80b883a 	mov	r5,r23
    469c:	9809883a 	mov	r4,r19
    46a0:	000a5240 	call	a524 <__sprint_r>
    46a4:	103d3a1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    46a8:	d8c02017 	ldw	r3,128(sp)
    46ac:	d8801f17 	ldw	r2,124(sp)
    46b0:	da000404 	addi	r8,sp,16
    46b4:	003fee06 	br	4670 <__alt_data_end+0xff004670>
    46b8:	d9403117 	ldw	r5,196(sp)
    46bc:	d8802a17 	ldw	r2,168(sp)
    46c0:	28adc83a 	sub	r22,r5,r2
    46c4:	05be630e 	bge	zero,r22,4054 <__alt_data_end+0xff004054>
    46c8:	07000404 	movi	fp,16
    46cc:	d8801f17 	ldw	r2,124(sp)
    46d0:	e5838f0e 	bge	fp,r22,5510 <___vfprintf_internal_r+0x1d88>
    46d4:	01400074 	movhi	r5,1
    46d8:	2946ce84 	addi	r5,r5,6970
    46dc:	dc403015 	stw	r17,192(sp)
    46e0:	d9402b15 	stw	r5,172(sp)
    46e4:	b023883a 	mov	r17,r22
    46e8:	04c001c4 	movi	r19,7
    46ec:	a82d883a 	mov	r22,r21
    46f0:	902b883a 	mov	r21,r18
    46f4:	8025883a 	mov	r18,r16
    46f8:	dc002c17 	ldw	r16,176(sp)
    46fc:	00000306 	br	470c <___vfprintf_internal_r+0xf84>
    4700:	8c7ffc04 	addi	r17,r17,-16
    4704:	42000204 	addi	r8,r8,8
    4708:	e440110e 	bge	fp,r17,4750 <___vfprintf_internal_r+0xfc8>
    470c:	18c00404 	addi	r3,r3,16
    4710:	10800044 	addi	r2,r2,1
    4714:	45000015 	stw	r20,0(r8)
    4718:	47000115 	stw	fp,4(r8)
    471c:	d8c02015 	stw	r3,128(sp)
    4720:	d8801f15 	stw	r2,124(sp)
    4724:	98bff60e 	bge	r19,r2,4700 <__alt_data_end+0xff004700>
    4728:	d9801e04 	addi	r6,sp,120
    472c:	b80b883a 	mov	r5,r23
    4730:	8009883a 	mov	r4,r16
    4734:	000a5240 	call	a524 <__sprint_r>
    4738:	103d151e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    473c:	8c7ffc04 	addi	r17,r17,-16
    4740:	d8c02017 	ldw	r3,128(sp)
    4744:	d8801f17 	ldw	r2,124(sp)
    4748:	da000404 	addi	r8,sp,16
    474c:	e47fef16 	blt	fp,r17,470c <__alt_data_end+0xff00470c>
    4750:	9021883a 	mov	r16,r18
    4754:	a825883a 	mov	r18,r21
    4758:	b02b883a 	mov	r21,r22
    475c:	882d883a 	mov	r22,r17
    4760:	dc403017 	ldw	r17,192(sp)
    4764:	d9002b17 	ldw	r4,172(sp)
    4768:	1d87883a 	add	r3,r3,r22
    476c:	10800044 	addi	r2,r2,1
    4770:	41000015 	stw	r4,0(r8)
    4774:	45800115 	stw	r22,4(r8)
    4778:	d8c02015 	stw	r3,128(sp)
    477c:	d8801f15 	stw	r2,124(sp)
    4780:	010001c4 	movi	r4,7
    4784:	20818e16 	blt	r4,r2,4dc0 <___vfprintf_internal_r+0x1638>
    4788:	42000204 	addi	r8,r8,8
    478c:	003e3106 	br	4054 <__alt_data_end+0xff004054>
    4790:	d9403317 	ldw	r5,204(sp)
    4794:	00800044 	movi	r2,1
    4798:	18c00044 	addi	r3,r3,1
    479c:	1141530e 	bge	r2,r5,4cec <___vfprintf_internal_r+0x1564>
    47a0:	dc401f17 	ldw	r17,124(sp)
    47a4:	00800044 	movi	r2,1
    47a8:	40800115 	stw	r2,4(r8)
    47ac:	8c400044 	addi	r17,r17,1
    47b0:	44000015 	stw	r16,0(r8)
    47b4:	d8c02015 	stw	r3,128(sp)
    47b8:	dc401f15 	stw	r17,124(sp)
    47bc:	008001c4 	movi	r2,7
    47c0:	14416b16 	blt	r2,r17,4d70 <___vfprintf_internal_r+0x15e8>
    47c4:	42000204 	addi	r8,r8,8
    47c8:	d8803717 	ldw	r2,220(sp)
    47cc:	d9003417 	ldw	r4,208(sp)
    47d0:	8c400044 	addi	r17,r17,1
    47d4:	10c7883a 	add	r3,r2,r3
    47d8:	40800115 	stw	r2,4(r8)
    47dc:	41000015 	stw	r4,0(r8)
    47e0:	d8c02015 	stw	r3,128(sp)
    47e4:	dc401f15 	stw	r17,124(sp)
    47e8:	008001c4 	movi	r2,7
    47ec:	14416916 	blt	r2,r17,4d94 <___vfprintf_internal_r+0x160c>
    47f0:	45800204 	addi	r22,r8,8
    47f4:	d9003617 	ldw	r4,216(sp)
    47f8:	d9403817 	ldw	r5,224(sp)
    47fc:	000d883a 	mov	r6,zero
    4800:	000f883a 	mov	r7,zero
    4804:	d8c03c15 	stw	r3,240(sp)
    4808:	000d7000 	call	d700 <__eqdf2>
    480c:	d8c03c17 	ldw	r3,240(sp)
    4810:	1000bc26 	beq	r2,zero,4b04 <___vfprintf_internal_r+0x137c>
    4814:	d9403317 	ldw	r5,204(sp)
    4818:	84000044 	addi	r16,r16,1
    481c:	8c400044 	addi	r17,r17,1
    4820:	28bfffc4 	addi	r2,r5,-1
    4824:	1887883a 	add	r3,r3,r2
    4828:	b0800115 	stw	r2,4(r22)
    482c:	b4000015 	stw	r16,0(r22)
    4830:	d8c02015 	stw	r3,128(sp)
    4834:	dc401f15 	stw	r17,124(sp)
    4838:	008001c4 	movi	r2,7
    483c:	14414316 	blt	r2,r17,4d4c <___vfprintf_internal_r+0x15c4>
    4840:	b5800204 	addi	r22,r22,8
    4844:	d9003a17 	ldw	r4,232(sp)
    4848:	df0022c4 	addi	fp,sp,139
    484c:	8c400044 	addi	r17,r17,1
    4850:	20c7883a 	add	r3,r4,r3
    4854:	b7000015 	stw	fp,0(r22)
    4858:	b1000115 	stw	r4,4(r22)
    485c:	d8c02015 	stw	r3,128(sp)
    4860:	dc401f15 	stw	r17,124(sp)
    4864:	008001c4 	movi	r2,7
    4868:	14400e16 	blt	r2,r17,48a4 <___vfprintf_internal_r+0x111c>
    486c:	b2000204 	addi	r8,r22,8
    4870:	003e3a06 	br	415c <__alt_data_end+0xff00415c>
    4874:	01000074 	movhi	r4,1
    4878:	2106ce84 	addi	r4,r4,6970
    487c:	d9002b15 	stw	r4,172(sp)
    4880:	d9002b17 	ldw	r4,172(sp)
    4884:	1c07883a 	add	r3,r3,r16
    4888:	44000115 	stw	r16,4(r8)
    488c:	41000015 	stw	r4,0(r8)
    4890:	10800044 	addi	r2,r2,1
    4894:	d8c02015 	stw	r3,128(sp)
    4898:	d8801f15 	stw	r2,124(sp)
    489c:	010001c4 	movi	r4,7
    48a0:	20be2d0e 	bge	r4,r2,4158 <__alt_data_end+0xff004158>
    48a4:	d9002c17 	ldw	r4,176(sp)
    48a8:	d9801e04 	addi	r6,sp,120
    48ac:	b80b883a 	mov	r5,r23
    48b0:	000a5240 	call	a524 <__sprint_r>
    48b4:	103cb61e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    48b8:	d8c02017 	ldw	r3,128(sp)
    48bc:	da000404 	addi	r8,sp,16
    48c0:	003e2606 	br	415c <__alt_data_end+0xff00415c>
    48c4:	d9002c17 	ldw	r4,176(sp)
    48c8:	d9801e04 	addi	r6,sp,120
    48cc:	b80b883a 	mov	r5,r23
    48d0:	000a5240 	call	a524 <__sprint_r>
    48d4:	103e5d26 	beq	r2,zero,424c <__alt_data_end+0xff00424c>
    48d8:	003cad06 	br	3b90 <__alt_data_end+0xff003b90>
    48dc:	d9002c17 	ldw	r4,176(sp)
    48e0:	d9801e04 	addi	r6,sp,120
    48e4:	b80b883a 	mov	r5,r23
    48e8:	000a5240 	call	a524 <__sprint_r>
    48ec:	103ca81e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    48f0:	d8c02017 	ldw	r3,128(sp)
    48f4:	da000404 	addi	r8,sp,16
    48f8:	003e0b06 	br	4128 <__alt_data_end+0xff004128>
    48fc:	d9002c17 	ldw	r4,176(sp)
    4900:	d9801e04 	addi	r6,sp,120
    4904:	b80b883a 	mov	r5,r23
    4908:	000a5240 	call	a524 <__sprint_r>
    490c:	103ca01e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4910:	d8c02017 	ldw	r3,128(sp)
    4914:	da000404 	addi	r8,sp,16
    4918:	003dbd06 	br	4010 <__alt_data_end+0xff004010>
    491c:	d9002c17 	ldw	r4,176(sp)
    4920:	d9801e04 	addi	r6,sp,120
    4924:	b80b883a 	mov	r5,r23
    4928:	000a5240 	call	a524 <__sprint_r>
    492c:	103c981e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4930:	d8c02017 	ldw	r3,128(sp)
    4934:	da000404 	addi	r8,sp,16
    4938:	003dc306 	br	4048 <__alt_data_end+0xff004048>
    493c:	d8802917 	ldw	r2,164(sp)
    4940:	d8002785 	stb	zero,158(sp)
    4944:	103f0616 	blt	r2,zero,4560 <__alt_data_end+0xff004560>
    4948:	00ffdfc4 	movi	r3,-129
    494c:	9d84b03a 	or	r2,r19,r22
    4950:	90e4703a 	and	r18,r18,r3
    4954:	103c6b26 	beq	r2,zero,3b04 <__alt_data_end+0xff003b04>
    4958:	0039883a 	mov	fp,zero
    495c:	003e7406 	br	4330 <__alt_data_end+0xff004330>
    4960:	9080040c 	andi	r2,r18,16
    4964:	1001b326 	beq	r2,zero,5034 <___vfprintf_internal_r+0x18ac>
    4968:	d9002d17 	ldw	r4,180(sp)
    496c:	d9402917 	ldw	r5,164(sp)
    4970:	d8002785 	stb	zero,158(sp)
    4974:	20800104 	addi	r2,r4,4
    4978:	24c00017 	ldw	r19,0(r4)
    497c:	002d883a 	mov	r22,zero
    4980:	2801b516 	blt	r5,zero,5058 <___vfprintf_internal_r+0x18d0>
    4984:	00ffdfc4 	movi	r3,-129
    4988:	d8802d15 	stw	r2,180(sp)
    498c:	90e4703a 	and	r18,r18,r3
    4990:	983d2726 	beq	r19,zero,3e30 <__alt_data_end+0xff003e30>
    4994:	0039883a 	mov	fp,zero
    4998:	003d2a06 	br	3e44 <__alt_data_end+0xff003e44>
    499c:	dc402617 	ldw	r17,152(sp)
    49a0:	0441d30e 	bge	zero,r17,50f0 <___vfprintf_internal_r+0x1968>
    49a4:	dc403217 	ldw	r17,200(sp)
    49a8:	d8803317 	ldw	r2,204(sp)
    49ac:	1440010e 	bge	r2,r17,49b4 <___vfprintf_internal_r+0x122c>
    49b0:	1023883a 	mov	r17,r2
    49b4:	04400a0e 	bge	zero,r17,49e0 <___vfprintf_internal_r+0x1258>
    49b8:	d8801f17 	ldw	r2,124(sp)
    49bc:	1c47883a 	add	r3,r3,r17
    49c0:	44000015 	stw	r16,0(r8)
    49c4:	10800044 	addi	r2,r2,1
    49c8:	44400115 	stw	r17,4(r8)
    49cc:	d8c02015 	stw	r3,128(sp)
    49d0:	d8801f15 	stw	r2,124(sp)
    49d4:	010001c4 	movi	r4,7
    49d8:	20826516 	blt	r4,r2,5370 <___vfprintf_internal_r+0x1be8>
    49dc:	42000204 	addi	r8,r8,8
    49e0:	88026116 	blt	r17,zero,5368 <___vfprintf_internal_r+0x1be0>
    49e4:	d9003217 	ldw	r4,200(sp)
    49e8:	2463c83a 	sub	r17,r4,r17
    49ec:	04407b0e 	bge	zero,r17,4bdc <___vfprintf_internal_r+0x1454>
    49f0:	05800404 	movi	r22,16
    49f4:	d8801f17 	ldw	r2,124(sp)
    49f8:	b4419d0e 	bge	r22,r17,5070 <___vfprintf_internal_r+0x18e8>
    49fc:	01000074 	movhi	r4,1
    4a00:	2106ce84 	addi	r4,r4,6970
    4a04:	d9002b15 	stw	r4,172(sp)
    4a08:	070001c4 	movi	fp,7
    4a0c:	dcc02c17 	ldw	r19,176(sp)
    4a10:	00000306 	br	4a20 <___vfprintf_internal_r+0x1298>
    4a14:	42000204 	addi	r8,r8,8
    4a18:	8c7ffc04 	addi	r17,r17,-16
    4a1c:	b441970e 	bge	r22,r17,507c <___vfprintf_internal_r+0x18f4>
    4a20:	18c00404 	addi	r3,r3,16
    4a24:	10800044 	addi	r2,r2,1
    4a28:	45000015 	stw	r20,0(r8)
    4a2c:	45800115 	stw	r22,4(r8)
    4a30:	d8c02015 	stw	r3,128(sp)
    4a34:	d8801f15 	stw	r2,124(sp)
    4a38:	e0bff60e 	bge	fp,r2,4a14 <__alt_data_end+0xff004a14>
    4a3c:	d9801e04 	addi	r6,sp,120
    4a40:	b80b883a 	mov	r5,r23
    4a44:	9809883a 	mov	r4,r19
    4a48:	000a5240 	call	a524 <__sprint_r>
    4a4c:	103c501e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4a50:	d8c02017 	ldw	r3,128(sp)
    4a54:	d8801f17 	ldw	r2,124(sp)
    4a58:	da000404 	addi	r8,sp,16
    4a5c:	003fee06 	br	4a18 <__alt_data_end+0xff004a18>
    4a60:	d9002c17 	ldw	r4,176(sp)
    4a64:	d9801e04 	addi	r6,sp,120
    4a68:	b80b883a 	mov	r5,r23
    4a6c:	000a5240 	call	a524 <__sprint_r>
    4a70:	103c471e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4a74:	d8c02017 	ldw	r3,128(sp)
    4a78:	df002787 	ldb	fp,158(sp)
    4a7c:	da000404 	addi	r8,sp,16
    4a80:	003d5606 	br	3fdc <__alt_data_end+0xff003fdc>
    4a84:	9080040c 	andi	r2,r18,16
    4a88:	10016126 	beq	r2,zero,5010 <___vfprintf_internal_r+0x1888>
    4a8c:	d8802d17 	ldw	r2,180(sp)
    4a90:	14c00017 	ldw	r19,0(r2)
    4a94:	10800104 	addi	r2,r2,4
    4a98:	d8802d15 	stw	r2,180(sp)
    4a9c:	982dd7fa 	srai	r22,r19,31
    4aa0:	b005883a 	mov	r2,r22
    4aa4:	003c8206 	br	3cb0 <__alt_data_end+0xff003cb0>
    4aa8:	9080040c 	andi	r2,r18,16
    4aac:	10003526 	beq	r2,zero,4b84 <___vfprintf_internal_r+0x13fc>
    4ab0:	d9402d17 	ldw	r5,180(sp)
    4ab4:	d8c02917 	ldw	r3,164(sp)
    4ab8:	d8002785 	stb	zero,158(sp)
    4abc:	28800104 	addi	r2,r5,4
    4ac0:	2cc00017 	ldw	r19,0(r5)
    4ac4:	002d883a 	mov	r22,zero
    4ac8:	18003716 	blt	r3,zero,4ba8 <___vfprintf_internal_r+0x1420>
    4acc:	00ffdfc4 	movi	r3,-129
    4ad0:	d8802d15 	stw	r2,180(sp)
    4ad4:	90e4703a 	and	r18,r18,r3
    4ad8:	0039883a 	mov	fp,zero
    4adc:	983df326 	beq	r19,zero,42ac <__alt_data_end+0xff0042ac>
    4ae0:	00800244 	movi	r2,9
    4ae4:	14fc7b36 	bltu	r2,r19,3cd4 <__alt_data_end+0xff003cd4>
    4ae8:	d8c02817 	ldw	r3,160(sp)
    4aec:	dc001dc4 	addi	r16,sp,119
    4af0:	9cc00c04 	addi	r19,r19,48
    4af4:	1c07c83a 	sub	r3,r3,r16
    4af8:	dcc01dc5 	stb	r19,119(sp)
    4afc:	d8c02e15 	stw	r3,184(sp)
    4b00:	003ce806 	br	3ea4 <__alt_data_end+0xff003ea4>
    4b04:	d8803317 	ldw	r2,204(sp)
    4b08:	143fffc4 	addi	r16,r2,-1
    4b0c:	043f4d0e 	bge	zero,r16,4844 <__alt_data_end+0xff004844>
    4b10:	07000404 	movi	fp,16
    4b14:	e400810e 	bge	fp,r16,4d1c <___vfprintf_internal_r+0x1594>
    4b18:	01400074 	movhi	r5,1
    4b1c:	2946ce84 	addi	r5,r5,6970
    4b20:	d9402b15 	stw	r5,172(sp)
    4b24:	01c001c4 	movi	r7,7
    4b28:	dcc02c17 	ldw	r19,176(sp)
    4b2c:	00000306 	br	4b3c <___vfprintf_internal_r+0x13b4>
    4b30:	b5800204 	addi	r22,r22,8
    4b34:	843ffc04 	addi	r16,r16,-16
    4b38:	e4007b0e 	bge	fp,r16,4d28 <___vfprintf_internal_r+0x15a0>
    4b3c:	18c00404 	addi	r3,r3,16
    4b40:	8c400044 	addi	r17,r17,1
    4b44:	b5000015 	stw	r20,0(r22)
    4b48:	b7000115 	stw	fp,4(r22)
    4b4c:	d8c02015 	stw	r3,128(sp)
    4b50:	dc401f15 	stw	r17,124(sp)
    4b54:	3c7ff60e 	bge	r7,r17,4b30 <__alt_data_end+0xff004b30>
    4b58:	d9801e04 	addi	r6,sp,120
    4b5c:	b80b883a 	mov	r5,r23
    4b60:	9809883a 	mov	r4,r19
    4b64:	d9c03c15 	stw	r7,240(sp)
    4b68:	000a5240 	call	a524 <__sprint_r>
    4b6c:	d9c03c17 	ldw	r7,240(sp)
    4b70:	103c071e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4b74:	d8c02017 	ldw	r3,128(sp)
    4b78:	dc401f17 	ldw	r17,124(sp)
    4b7c:	dd800404 	addi	r22,sp,16
    4b80:	003fec06 	br	4b34 <__alt_data_end+0xff004b34>
    4b84:	9080100c 	andi	r2,r18,64
    4b88:	d8002785 	stb	zero,158(sp)
    4b8c:	10010e26 	beq	r2,zero,4fc8 <___vfprintf_internal_r+0x1840>
    4b90:	d9002d17 	ldw	r4,180(sp)
    4b94:	d9402917 	ldw	r5,164(sp)
    4b98:	002d883a 	mov	r22,zero
    4b9c:	20800104 	addi	r2,r4,4
    4ba0:	24c0000b 	ldhu	r19,0(r4)
    4ba4:	283fc90e 	bge	r5,zero,4acc <__alt_data_end+0xff004acc>
    4ba8:	d8802d15 	stw	r2,180(sp)
    4bac:	0039883a 	mov	fp,zero
    4bb0:	9d84b03a 	or	r2,r19,r22
    4bb4:	103c461e 	bne	r2,zero,3cd0 <__alt_data_end+0xff003cd0>
    4bb8:	00800044 	movi	r2,1
    4bbc:	003e6c06 	br	4570 <__alt_data_end+0xff004570>
    4bc0:	d9002c17 	ldw	r4,176(sp)
    4bc4:	d9801e04 	addi	r6,sp,120
    4bc8:	b80b883a 	mov	r5,r23
    4bcc:	000a5240 	call	a524 <__sprint_r>
    4bd0:	103bef1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4bd4:	d8c02017 	ldw	r3,128(sp)
    4bd8:	da000404 	addi	r8,sp,16
    4bdc:	d9003217 	ldw	r4,200(sp)
    4be0:	d8802617 	ldw	r2,152(sp)
    4be4:	d9403317 	ldw	r5,204(sp)
    4be8:	8123883a 	add	r17,r16,r4
    4bec:	11400216 	blt	r2,r5,4bf8 <___vfprintf_internal_r+0x1470>
    4bf0:	9100004c 	andi	r4,r18,1
    4bf4:	20000d26 	beq	r4,zero,4c2c <___vfprintf_internal_r+0x14a4>
    4bf8:	d9003717 	ldw	r4,220(sp)
    4bfc:	d9403417 	ldw	r5,208(sp)
    4c00:	1907883a 	add	r3,r3,r4
    4c04:	d9001f17 	ldw	r4,124(sp)
    4c08:	41400015 	stw	r5,0(r8)
    4c0c:	d9403717 	ldw	r5,220(sp)
    4c10:	21000044 	addi	r4,r4,1
    4c14:	d8c02015 	stw	r3,128(sp)
    4c18:	41400115 	stw	r5,4(r8)
    4c1c:	d9001f15 	stw	r4,124(sp)
    4c20:	014001c4 	movi	r5,7
    4c24:	2901e816 	blt	r5,r4,53c8 <___vfprintf_internal_r+0x1c40>
    4c28:	42000204 	addi	r8,r8,8
    4c2c:	d9003317 	ldw	r4,204(sp)
    4c30:	8121883a 	add	r16,r16,r4
    4c34:	2085c83a 	sub	r2,r4,r2
    4c38:	8461c83a 	sub	r16,r16,r17
    4c3c:	1400010e 	bge	r2,r16,4c44 <___vfprintf_internal_r+0x14bc>
    4c40:	1021883a 	mov	r16,r2
    4c44:	04000a0e 	bge	zero,r16,4c70 <___vfprintf_internal_r+0x14e8>
    4c48:	d9001f17 	ldw	r4,124(sp)
    4c4c:	1c07883a 	add	r3,r3,r16
    4c50:	44400015 	stw	r17,0(r8)
    4c54:	21000044 	addi	r4,r4,1
    4c58:	44000115 	stw	r16,4(r8)
    4c5c:	d8c02015 	stw	r3,128(sp)
    4c60:	d9001f15 	stw	r4,124(sp)
    4c64:	014001c4 	movi	r5,7
    4c68:	2901fb16 	blt	r5,r4,5458 <___vfprintf_internal_r+0x1cd0>
    4c6c:	42000204 	addi	r8,r8,8
    4c70:	8001f716 	blt	r16,zero,5450 <___vfprintf_internal_r+0x1cc8>
    4c74:	1421c83a 	sub	r16,r2,r16
    4c78:	043d380e 	bge	zero,r16,415c <__alt_data_end+0xff00415c>
    4c7c:	04400404 	movi	r17,16
    4c80:	d8801f17 	ldw	r2,124(sp)
    4c84:	8c3efb0e 	bge	r17,r16,4874 <__alt_data_end+0xff004874>
    4c88:	01400074 	movhi	r5,1
    4c8c:	2946ce84 	addi	r5,r5,6970
    4c90:	d9402b15 	stw	r5,172(sp)
    4c94:	058001c4 	movi	r22,7
    4c98:	dcc02c17 	ldw	r19,176(sp)
    4c9c:	00000306 	br	4cac <___vfprintf_internal_r+0x1524>
    4ca0:	42000204 	addi	r8,r8,8
    4ca4:	843ffc04 	addi	r16,r16,-16
    4ca8:	8c3ef50e 	bge	r17,r16,4880 <__alt_data_end+0xff004880>
    4cac:	18c00404 	addi	r3,r3,16
    4cb0:	10800044 	addi	r2,r2,1
    4cb4:	45000015 	stw	r20,0(r8)
    4cb8:	44400115 	stw	r17,4(r8)
    4cbc:	d8c02015 	stw	r3,128(sp)
    4cc0:	d8801f15 	stw	r2,124(sp)
    4cc4:	b0bff60e 	bge	r22,r2,4ca0 <__alt_data_end+0xff004ca0>
    4cc8:	d9801e04 	addi	r6,sp,120
    4ccc:	b80b883a 	mov	r5,r23
    4cd0:	9809883a 	mov	r4,r19
    4cd4:	000a5240 	call	a524 <__sprint_r>
    4cd8:	103bad1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4cdc:	d8c02017 	ldw	r3,128(sp)
    4ce0:	d8801f17 	ldw	r2,124(sp)
    4ce4:	da000404 	addi	r8,sp,16
    4ce8:	003fee06 	br	4ca4 <__alt_data_end+0xff004ca4>
    4cec:	9088703a 	and	r4,r18,r2
    4cf0:	203eab1e 	bne	r4,zero,47a0 <__alt_data_end+0xff0047a0>
    4cf4:	dc401f17 	ldw	r17,124(sp)
    4cf8:	40800115 	stw	r2,4(r8)
    4cfc:	44000015 	stw	r16,0(r8)
    4d00:	8c400044 	addi	r17,r17,1
    4d04:	d8c02015 	stw	r3,128(sp)
    4d08:	dc401f15 	stw	r17,124(sp)
    4d0c:	008001c4 	movi	r2,7
    4d10:	14400e16 	blt	r2,r17,4d4c <___vfprintf_internal_r+0x15c4>
    4d14:	45800204 	addi	r22,r8,8
    4d18:	003eca06 	br	4844 <__alt_data_end+0xff004844>
    4d1c:	01000074 	movhi	r4,1
    4d20:	2106ce84 	addi	r4,r4,6970
    4d24:	d9002b15 	stw	r4,172(sp)
    4d28:	d8802b17 	ldw	r2,172(sp)
    4d2c:	1c07883a 	add	r3,r3,r16
    4d30:	8c400044 	addi	r17,r17,1
    4d34:	b0800015 	stw	r2,0(r22)
    4d38:	b4000115 	stw	r16,4(r22)
    4d3c:	d8c02015 	stw	r3,128(sp)
    4d40:	dc401f15 	stw	r17,124(sp)
    4d44:	008001c4 	movi	r2,7
    4d48:	147ebd0e 	bge	r2,r17,4840 <__alt_data_end+0xff004840>
    4d4c:	d9002c17 	ldw	r4,176(sp)
    4d50:	d9801e04 	addi	r6,sp,120
    4d54:	b80b883a 	mov	r5,r23
    4d58:	000a5240 	call	a524 <__sprint_r>
    4d5c:	103b8c1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4d60:	d8c02017 	ldw	r3,128(sp)
    4d64:	dc401f17 	ldw	r17,124(sp)
    4d68:	dd800404 	addi	r22,sp,16
    4d6c:	003eb506 	br	4844 <__alt_data_end+0xff004844>
    4d70:	d9002c17 	ldw	r4,176(sp)
    4d74:	d9801e04 	addi	r6,sp,120
    4d78:	b80b883a 	mov	r5,r23
    4d7c:	000a5240 	call	a524 <__sprint_r>
    4d80:	103b831e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4d84:	d8c02017 	ldw	r3,128(sp)
    4d88:	dc401f17 	ldw	r17,124(sp)
    4d8c:	da000404 	addi	r8,sp,16
    4d90:	003e8d06 	br	47c8 <__alt_data_end+0xff0047c8>
    4d94:	d9002c17 	ldw	r4,176(sp)
    4d98:	d9801e04 	addi	r6,sp,120
    4d9c:	b80b883a 	mov	r5,r23
    4da0:	000a5240 	call	a524 <__sprint_r>
    4da4:	103b7a1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4da8:	d8c02017 	ldw	r3,128(sp)
    4dac:	dc401f17 	ldw	r17,124(sp)
    4db0:	dd800404 	addi	r22,sp,16
    4db4:	003e8f06 	br	47f4 <__alt_data_end+0xff0047f4>
    4db8:	0027883a 	mov	r19,zero
    4dbc:	003f4a06 	br	4ae8 <__alt_data_end+0xff004ae8>
    4dc0:	d9002c17 	ldw	r4,176(sp)
    4dc4:	d9801e04 	addi	r6,sp,120
    4dc8:	b80b883a 	mov	r5,r23
    4dcc:	000a5240 	call	a524 <__sprint_r>
    4dd0:	103b6f1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    4dd4:	d8c02017 	ldw	r3,128(sp)
    4dd8:	da000404 	addi	r8,sp,16
    4ddc:	003c9d06 	br	4054 <__alt_data_end+0xff004054>
    4de0:	04e7c83a 	sub	r19,zero,r19
    4de4:	9804c03a 	cmpne	r2,r19,zero
    4de8:	05adc83a 	sub	r22,zero,r22
    4dec:	b0adc83a 	sub	r22,r22,r2
    4df0:	d8802917 	ldw	r2,164(sp)
    4df4:	07000b44 	movi	fp,45
    4df8:	df002785 	stb	fp,158(sp)
    4dfc:	10017b16 	blt	r2,zero,53ec <___vfprintf_internal_r+0x1c64>
    4e00:	00bfdfc4 	movi	r2,-129
    4e04:	90a4703a 	and	r18,r18,r2
    4e08:	003bb106 	br	3cd0 <__alt_data_end+0xff003cd0>
    4e0c:	d9003617 	ldw	r4,216(sp)
    4e10:	d9403817 	ldw	r5,224(sp)
    4e14:	da003d15 	stw	r8,244(sp)
    4e18:	000a19c0 	call	a19c <__fpclassifyd>
    4e1c:	da003d17 	ldw	r8,244(sp)
    4e20:	1000f026 	beq	r2,zero,51e4 <___vfprintf_internal_r+0x1a5c>
    4e24:	d9002917 	ldw	r4,164(sp)
    4e28:	05bff7c4 	movi	r22,-33
    4e2c:	00bfffc4 	movi	r2,-1
    4e30:	8dac703a 	and	r22,r17,r22
    4e34:	20820026 	beq	r4,r2,5638 <___vfprintf_internal_r+0x1eb0>
    4e38:	008011c4 	movi	r2,71
    4e3c:	b081f726 	beq	r22,r2,561c <___vfprintf_internal_r+0x1e94>
    4e40:	d9003817 	ldw	r4,224(sp)
    4e44:	90c04014 	ori	r3,r18,256
    4e48:	d8c02b15 	stw	r3,172(sp)
    4e4c:	20021516 	blt	r4,zero,56a4 <___vfprintf_internal_r+0x1f1c>
    4e50:	dcc03817 	ldw	r19,224(sp)
    4e54:	d8002a05 	stb	zero,168(sp)
    4e58:	00801984 	movi	r2,102
    4e5c:	8881f926 	beq	r17,r2,5644 <___vfprintf_internal_r+0x1ebc>
    4e60:	00801184 	movi	r2,70
    4e64:	88821c26 	beq	r17,r2,56d8 <___vfprintf_internal_r+0x1f50>
    4e68:	00801144 	movi	r2,69
    4e6c:	b081ef26 	beq	r22,r2,562c <___vfprintf_internal_r+0x1ea4>
    4e70:	d8c02917 	ldw	r3,164(sp)
    4e74:	d8802104 	addi	r2,sp,132
    4e78:	d8800315 	stw	r2,12(sp)
    4e7c:	d9403617 	ldw	r5,216(sp)
    4e80:	d8802504 	addi	r2,sp,148
    4e84:	d9002c17 	ldw	r4,176(sp)
    4e88:	d8800215 	stw	r2,8(sp)
    4e8c:	d8802604 	addi	r2,sp,152
    4e90:	d8c00015 	stw	r3,0(sp)
    4e94:	d8800115 	stw	r2,4(sp)
    4e98:	01c00084 	movi	r7,2
    4e9c:	980d883a 	mov	r6,r19
    4ea0:	d8c03c15 	stw	r3,240(sp)
    4ea4:	da003d15 	stw	r8,244(sp)
    4ea8:	0005dac0 	call	5dac <_dtoa_r>
    4eac:	1021883a 	mov	r16,r2
    4eb0:	008019c4 	movi	r2,103
    4eb4:	d8c03c17 	ldw	r3,240(sp)
    4eb8:	da003d17 	ldw	r8,244(sp)
    4ebc:	88817126 	beq	r17,r2,5484 <___vfprintf_internal_r+0x1cfc>
    4ec0:	008011c4 	movi	r2,71
    4ec4:	88829226 	beq	r17,r2,5910 <___vfprintf_internal_r+0x2188>
    4ec8:	80f9883a 	add	fp,r16,r3
    4ecc:	d9003617 	ldw	r4,216(sp)
    4ed0:	000d883a 	mov	r6,zero
    4ed4:	000f883a 	mov	r7,zero
    4ed8:	980b883a 	mov	r5,r19
    4edc:	da003d15 	stw	r8,244(sp)
    4ee0:	000d7000 	call	d700 <__eqdf2>
    4ee4:	da003d17 	ldw	r8,244(sp)
    4ee8:	10018d26 	beq	r2,zero,5520 <___vfprintf_internal_r+0x1d98>
    4eec:	d8802117 	ldw	r2,132(sp)
    4ef0:	1700062e 	bgeu	r2,fp,4f0c <___vfprintf_internal_r+0x1784>
    4ef4:	01000c04 	movi	r4,48
    4ef8:	10c00044 	addi	r3,r2,1
    4efc:	d8c02115 	stw	r3,132(sp)
    4f00:	11000005 	stb	r4,0(r2)
    4f04:	d8802117 	ldw	r2,132(sp)
    4f08:	173ffb36 	bltu	r2,fp,4ef8 <__alt_data_end+0xff004ef8>
    4f0c:	1405c83a 	sub	r2,r2,r16
    4f10:	d8803315 	stw	r2,204(sp)
    4f14:	008011c4 	movi	r2,71
    4f18:	b0817626 	beq	r22,r2,54f4 <___vfprintf_internal_r+0x1d6c>
    4f1c:	00801944 	movi	r2,101
    4f20:	1442810e 	bge	r2,r17,5928 <___vfprintf_internal_r+0x21a0>
    4f24:	d8c02617 	ldw	r3,152(sp)
    4f28:	00801984 	movi	r2,102
    4f2c:	d8c03215 	stw	r3,200(sp)
    4f30:	8881fe26 	beq	r17,r2,572c <___vfprintf_internal_r+0x1fa4>
    4f34:	d8c03217 	ldw	r3,200(sp)
    4f38:	d9003317 	ldw	r4,204(sp)
    4f3c:	1901dd16 	blt	r3,r4,56b4 <___vfprintf_internal_r+0x1f2c>
    4f40:	9480004c 	andi	r18,r18,1
    4f44:	90022b1e 	bne	r18,zero,57f4 <___vfprintf_internal_r+0x206c>
    4f48:	1805883a 	mov	r2,r3
    4f4c:	18028016 	blt	r3,zero,5950 <___vfprintf_internal_r+0x21c8>
    4f50:	d8c03217 	ldw	r3,200(sp)
    4f54:	044019c4 	movi	r17,103
    4f58:	d8c02e15 	stw	r3,184(sp)
    4f5c:	df002a07 	ldb	fp,168(sp)
    4f60:	e001531e 	bne	fp,zero,54b0 <___vfprintf_internal_r+0x1d28>
    4f64:	df002783 	ldbu	fp,158(sp)
    4f68:	d8802a15 	stw	r2,168(sp)
    4f6c:	dc802b17 	ldw	r18,172(sp)
    4f70:	d8002915 	stw	zero,164(sp)
    4f74:	003bd106 	br	3ebc <__alt_data_end+0xff003ebc>
    4f78:	d8802d17 	ldw	r2,180(sp)
    4f7c:	d8c02d17 	ldw	r3,180(sp)
    4f80:	d9002d17 	ldw	r4,180(sp)
    4f84:	10800017 	ldw	r2,0(r2)
    4f88:	18c00117 	ldw	r3,4(r3)
    4f8c:	21000204 	addi	r4,r4,8
    4f90:	d8803615 	stw	r2,216(sp)
    4f94:	d8c03815 	stw	r3,224(sp)
    4f98:	d9002d15 	stw	r4,180(sp)
    4f9c:	003b7506 	br	3d74 <__alt_data_end+0xff003d74>
    4fa0:	ac400007 	ldb	r17,0(r21)
    4fa4:	003a5906 	br	390c <__alt_data_end+0xff00390c>
    4fa8:	9080100c 	andi	r2,r18,64
    4fac:	1000a826 	beq	r2,zero,5250 <___vfprintf_internal_r+0x1ac8>
    4fb0:	d9002d17 	ldw	r4,180(sp)
    4fb4:	002d883a 	mov	r22,zero
    4fb8:	24c0000b 	ldhu	r19,0(r4)
    4fbc:	21000104 	addi	r4,r4,4
    4fc0:	d9002d15 	stw	r4,180(sp)
    4fc4:	003ccb06 	br	42f4 <__alt_data_end+0xff0042f4>
    4fc8:	d8c02d17 	ldw	r3,180(sp)
    4fcc:	d9002917 	ldw	r4,164(sp)
    4fd0:	002d883a 	mov	r22,zero
    4fd4:	18800104 	addi	r2,r3,4
    4fd8:	1cc00017 	ldw	r19,0(r3)
    4fdc:	203ebb0e 	bge	r4,zero,4acc <__alt_data_end+0xff004acc>
    4fe0:	003ef106 	br	4ba8 <__alt_data_end+0xff004ba8>
    4fe4:	9080040c 	andi	r2,r18,16
    4fe8:	1000921e 	bne	r2,zero,5234 <___vfprintf_internal_r+0x1aac>
    4fec:	9480100c 	andi	r18,r18,64
    4ff0:	90013926 	beq	r18,zero,54d8 <___vfprintf_internal_r+0x1d50>
    4ff4:	d9002d17 	ldw	r4,180(sp)
    4ff8:	d9402f17 	ldw	r5,188(sp)
    4ffc:	20800017 	ldw	r2,0(r4)
    5000:	21000104 	addi	r4,r4,4
    5004:	d9002d15 	stw	r4,180(sp)
    5008:	1140000d 	sth	r5,0(r2)
    500c:	003a1606 	br	3868 <__alt_data_end+0xff003868>
    5010:	9080100c 	andi	r2,r18,64
    5014:	10008026 	beq	r2,zero,5218 <___vfprintf_internal_r+0x1a90>
    5018:	d8c02d17 	ldw	r3,180(sp)
    501c:	1cc0000f 	ldh	r19,0(r3)
    5020:	18c00104 	addi	r3,r3,4
    5024:	d8c02d15 	stw	r3,180(sp)
    5028:	982dd7fa 	srai	r22,r19,31
    502c:	b005883a 	mov	r2,r22
    5030:	003b1f06 	br	3cb0 <__alt_data_end+0xff003cb0>
    5034:	9080100c 	andi	r2,r18,64
    5038:	d8002785 	stb	zero,158(sp)
    503c:	10008a1e 	bne	r2,zero,5268 <___vfprintf_internal_r+0x1ae0>
    5040:	d9402d17 	ldw	r5,180(sp)
    5044:	d8c02917 	ldw	r3,164(sp)
    5048:	002d883a 	mov	r22,zero
    504c:	28800104 	addi	r2,r5,4
    5050:	2cc00017 	ldw	r19,0(r5)
    5054:	183e4b0e 	bge	r3,zero,4984 <__alt_data_end+0xff004984>
    5058:	9d86b03a 	or	r3,r19,r22
    505c:	d8802d15 	stw	r2,180(sp)
    5060:	183e4c1e 	bne	r3,zero,4994 <__alt_data_end+0xff004994>
    5064:	0039883a 	mov	fp,zero
    5068:	0005883a 	mov	r2,zero
    506c:	003d4006 	br	4570 <__alt_data_end+0xff004570>
    5070:	01400074 	movhi	r5,1
    5074:	2946ce84 	addi	r5,r5,6970
    5078:	d9402b15 	stw	r5,172(sp)
    507c:	d9402b17 	ldw	r5,172(sp)
    5080:	1c47883a 	add	r3,r3,r17
    5084:	10800044 	addi	r2,r2,1
    5088:	41400015 	stw	r5,0(r8)
    508c:	44400115 	stw	r17,4(r8)
    5090:	d8c02015 	stw	r3,128(sp)
    5094:	d8801f15 	stw	r2,124(sp)
    5098:	010001c4 	movi	r4,7
    509c:	20bec816 	blt	r4,r2,4bc0 <__alt_data_end+0xff004bc0>
    50a0:	42000204 	addi	r8,r8,8
    50a4:	003ecd06 	br	4bdc <__alt_data_end+0xff004bdc>
    50a8:	d9002917 	ldw	r4,164(sp)
    50ac:	d8002785 	stb	zero,158(sp)
    50b0:	203d2d16 	blt	r4,zero,4568 <__alt_data_end+0xff004568>
    50b4:	00bfdfc4 	movi	r2,-129
    50b8:	90a4703a 	and	r18,r18,r2
    50bc:	003a9106 	br	3b04 <__alt_data_end+0xff003b04>
    50c0:	01000074 	movhi	r4,1
    50c4:	2106ce84 	addi	r4,r4,6970
    50c8:	d9002b15 	stw	r4,172(sp)
    50cc:	003c0c06 	br	4100 <__alt_data_end+0xff004100>
    50d0:	d9002c17 	ldw	r4,176(sp)
    50d4:	d9801e04 	addi	r6,sp,120
    50d8:	b80b883a 	mov	r5,r23
    50dc:	000a5240 	call	a524 <__sprint_r>
    50e0:	103aab1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    50e4:	d8c02017 	ldw	r3,128(sp)
    50e8:	da000404 	addi	r8,sp,16
    50ec:	003d4106 	br	45f4 <__alt_data_end+0xff0045f4>
    50f0:	d8801f17 	ldw	r2,124(sp)
    50f4:	01400074 	movhi	r5,1
    50f8:	01000044 	movi	r4,1
    50fc:	18c00044 	addi	r3,r3,1
    5100:	10800044 	addi	r2,r2,1
    5104:	2946ce04 	addi	r5,r5,6968
    5108:	41000115 	stw	r4,4(r8)
    510c:	41400015 	stw	r5,0(r8)
    5110:	d8c02015 	stw	r3,128(sp)
    5114:	d8801f15 	stw	r2,124(sp)
    5118:	010001c4 	movi	r4,7
    511c:	20805c16 	blt	r4,r2,5290 <___vfprintf_internal_r+0x1b08>
    5120:	42000204 	addi	r8,r8,8
    5124:	8800041e 	bne	r17,zero,5138 <___vfprintf_internal_r+0x19b0>
    5128:	d8803317 	ldw	r2,204(sp)
    512c:	1000021e 	bne	r2,zero,5138 <___vfprintf_internal_r+0x19b0>
    5130:	9080004c 	andi	r2,r18,1
    5134:	103c0926 	beq	r2,zero,415c <__alt_data_end+0xff00415c>
    5138:	d9003717 	ldw	r4,220(sp)
    513c:	d8801f17 	ldw	r2,124(sp)
    5140:	d9403417 	ldw	r5,208(sp)
    5144:	20c7883a 	add	r3,r4,r3
    5148:	10800044 	addi	r2,r2,1
    514c:	41000115 	stw	r4,4(r8)
    5150:	41400015 	stw	r5,0(r8)
    5154:	d8c02015 	stw	r3,128(sp)
    5158:	d8801f15 	stw	r2,124(sp)
    515c:	010001c4 	movi	r4,7
    5160:	20812116 	blt	r4,r2,55e8 <___vfprintf_internal_r+0x1e60>
    5164:	42000204 	addi	r8,r8,8
    5168:	0463c83a 	sub	r17,zero,r17
    516c:	0440730e 	bge	zero,r17,533c <___vfprintf_internal_r+0x1bb4>
    5170:	05800404 	movi	r22,16
    5174:	b440860e 	bge	r22,r17,5390 <___vfprintf_internal_r+0x1c08>
    5178:	01400074 	movhi	r5,1
    517c:	2946ce84 	addi	r5,r5,6970
    5180:	d9402b15 	stw	r5,172(sp)
    5184:	070001c4 	movi	fp,7
    5188:	dcc02c17 	ldw	r19,176(sp)
    518c:	00000306 	br	519c <___vfprintf_internal_r+0x1a14>
    5190:	42000204 	addi	r8,r8,8
    5194:	8c7ffc04 	addi	r17,r17,-16
    5198:	b440800e 	bge	r22,r17,539c <___vfprintf_internal_r+0x1c14>
    519c:	18c00404 	addi	r3,r3,16
    51a0:	10800044 	addi	r2,r2,1
    51a4:	45000015 	stw	r20,0(r8)
    51a8:	45800115 	stw	r22,4(r8)
    51ac:	d8c02015 	stw	r3,128(sp)
    51b0:	d8801f15 	stw	r2,124(sp)
    51b4:	e0bff60e 	bge	fp,r2,5190 <__alt_data_end+0xff005190>
    51b8:	d9801e04 	addi	r6,sp,120
    51bc:	b80b883a 	mov	r5,r23
    51c0:	9809883a 	mov	r4,r19
    51c4:	000a5240 	call	a524 <__sprint_r>
    51c8:	103a711e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    51cc:	d8c02017 	ldw	r3,128(sp)
    51d0:	d8801f17 	ldw	r2,124(sp)
    51d4:	da000404 	addi	r8,sp,16
    51d8:	003fee06 	br	5194 <__alt_data_end+0xff005194>
    51dc:	00bfffc4 	movi	r2,-1
    51e0:	003a6f06 	br	3ba0 <__alt_data_end+0xff003ba0>
    51e4:	008011c4 	movi	r2,71
    51e8:	1440b816 	blt	r2,r17,54cc <___vfprintf_internal_r+0x1d44>
    51ec:	04000074 	movhi	r16,1
    51f0:	8406c004 	addi	r16,r16,6912
    51f4:	00c000c4 	movi	r3,3
    51f8:	00bfdfc4 	movi	r2,-129
    51fc:	d8c02a15 	stw	r3,168(sp)
    5200:	90a4703a 	and	r18,r18,r2
    5204:	df002783 	ldbu	fp,158(sp)
    5208:	d8c02e15 	stw	r3,184(sp)
    520c:	d8002915 	stw	zero,164(sp)
    5210:	d8003215 	stw	zero,200(sp)
    5214:	003b2906 	br	3ebc <__alt_data_end+0xff003ebc>
    5218:	d9002d17 	ldw	r4,180(sp)
    521c:	24c00017 	ldw	r19,0(r4)
    5220:	21000104 	addi	r4,r4,4
    5224:	d9002d15 	stw	r4,180(sp)
    5228:	982dd7fa 	srai	r22,r19,31
    522c:	b005883a 	mov	r2,r22
    5230:	003a9f06 	br	3cb0 <__alt_data_end+0xff003cb0>
    5234:	d9402d17 	ldw	r5,180(sp)
    5238:	d8c02f17 	ldw	r3,188(sp)
    523c:	28800017 	ldw	r2,0(r5)
    5240:	29400104 	addi	r5,r5,4
    5244:	d9402d15 	stw	r5,180(sp)
    5248:	10c00015 	stw	r3,0(r2)
    524c:	00398606 	br	3868 <__alt_data_end+0xff003868>
    5250:	d9402d17 	ldw	r5,180(sp)
    5254:	002d883a 	mov	r22,zero
    5258:	2cc00017 	ldw	r19,0(r5)
    525c:	29400104 	addi	r5,r5,4
    5260:	d9402d15 	stw	r5,180(sp)
    5264:	003c2306 	br	42f4 <__alt_data_end+0xff0042f4>
    5268:	d8c02d17 	ldw	r3,180(sp)
    526c:	d9002917 	ldw	r4,164(sp)
    5270:	002d883a 	mov	r22,zero
    5274:	18800104 	addi	r2,r3,4
    5278:	1cc0000b 	ldhu	r19,0(r3)
    527c:	203dc10e 	bge	r4,zero,4984 <__alt_data_end+0xff004984>
    5280:	003f7506 	br	5058 <__alt_data_end+0xff005058>
    5284:	04000074 	movhi	r16,1
    5288:	8406be04 	addi	r16,r16,6904
    528c:	003acc06 	br	3dc0 <__alt_data_end+0xff003dc0>
    5290:	d9002c17 	ldw	r4,176(sp)
    5294:	d9801e04 	addi	r6,sp,120
    5298:	b80b883a 	mov	r5,r23
    529c:	000a5240 	call	a524 <__sprint_r>
    52a0:	103a3b1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    52a4:	dc402617 	ldw	r17,152(sp)
    52a8:	d8c02017 	ldw	r3,128(sp)
    52ac:	da000404 	addi	r8,sp,16
    52b0:	003f9c06 	br	5124 <__alt_data_end+0xff005124>
    52b4:	ac400043 	ldbu	r17,1(r21)
    52b8:	94800814 	ori	r18,r18,32
    52bc:	ad400044 	addi	r21,r21,1
    52c0:	8c403fcc 	andi	r17,r17,255
    52c4:	8c40201c 	xori	r17,r17,128
    52c8:	8c7fe004 	addi	r17,r17,-128
    52cc:	00398f06 	br	390c <__alt_data_end+0xff00390c>
    52d0:	d8c02d15 	stw	r3,180(sp)
    52d4:	0039883a 	mov	fp,zero
    52d8:	003e3506 	br	4bb0 <__alt_data_end+0xff004bb0>
    52dc:	d9002c17 	ldw	r4,176(sp)
    52e0:	d9801e04 	addi	r6,sp,120
    52e4:	b80b883a 	mov	r5,r23
    52e8:	000a5240 	call	a524 <__sprint_r>
    52ec:	103a281e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    52f0:	d8c02017 	ldw	r3,128(sp)
    52f4:	da000404 	addi	r8,sp,16
    52f8:	003cd006 	br	463c <__alt_data_end+0xff00463c>
    52fc:	8009883a 	mov	r4,r16
    5300:	da003d15 	stw	r8,244(sp)
    5304:	00036f00 	call	36f0 <strlen>
    5308:	d8802e15 	stw	r2,184(sp)
    530c:	da003d17 	ldw	r8,244(sp)
    5310:	103c340e 	bge	r2,zero,43e4 <__alt_data_end+0xff0043e4>
    5314:	0005883a 	mov	r2,zero
    5318:	003c3206 	br	43e4 <__alt_data_end+0xff0043e4>
    531c:	d9002c17 	ldw	r4,176(sp)
    5320:	d9801e04 	addi	r6,sp,120
    5324:	b80b883a 	mov	r5,r23
    5328:	000a5240 	call	a524 <__sprint_r>
    532c:	103a181e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    5330:	d8c02017 	ldw	r3,128(sp)
    5334:	d8801f17 	ldw	r2,124(sp)
    5338:	da000404 	addi	r8,sp,16
    533c:	d9403317 	ldw	r5,204(sp)
    5340:	10800044 	addi	r2,r2,1
    5344:	44000015 	stw	r16,0(r8)
    5348:	28c7883a 	add	r3,r5,r3
    534c:	003b7d06 	br	4144 <__alt_data_end+0xff004144>
    5350:	01000074 	movhi	r4,1
    5354:	2106d284 	addi	r4,r4,6986
    5358:	d9003515 	stw	r4,212(sp)
    535c:	003b1406 	br	3fb0 <__alt_data_end+0xff003fb0>
    5360:	013fffc4 	movi	r4,-1
    5364:	003a3506 	br	3c3c <__alt_data_end+0xff003c3c>
    5368:	0023883a 	mov	r17,zero
    536c:	003d9d06 	br	49e4 <__alt_data_end+0xff0049e4>
    5370:	d9002c17 	ldw	r4,176(sp)
    5374:	d9801e04 	addi	r6,sp,120
    5378:	b80b883a 	mov	r5,r23
    537c:	000a5240 	call	a524 <__sprint_r>
    5380:	103a031e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    5384:	d8c02017 	ldw	r3,128(sp)
    5388:	da000404 	addi	r8,sp,16
    538c:	003d9406 	br	49e0 <__alt_data_end+0xff0049e0>
    5390:	01000074 	movhi	r4,1
    5394:	2106ce84 	addi	r4,r4,6970
    5398:	d9002b15 	stw	r4,172(sp)
    539c:	d9002b17 	ldw	r4,172(sp)
    53a0:	1c47883a 	add	r3,r3,r17
    53a4:	10800044 	addi	r2,r2,1
    53a8:	41000015 	stw	r4,0(r8)
    53ac:	44400115 	stw	r17,4(r8)
    53b0:	d8c02015 	stw	r3,128(sp)
    53b4:	d8801f15 	stw	r2,124(sp)
    53b8:	010001c4 	movi	r4,7
    53bc:	20bfd716 	blt	r4,r2,531c <__alt_data_end+0xff00531c>
    53c0:	42000204 	addi	r8,r8,8
    53c4:	003fdd06 	br	533c <__alt_data_end+0xff00533c>
    53c8:	d9002c17 	ldw	r4,176(sp)
    53cc:	d9801e04 	addi	r6,sp,120
    53d0:	b80b883a 	mov	r5,r23
    53d4:	000a5240 	call	a524 <__sprint_r>
    53d8:	1039ed1e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    53dc:	d8802617 	ldw	r2,152(sp)
    53e0:	d8c02017 	ldw	r3,128(sp)
    53e4:	da000404 	addi	r8,sp,16
    53e8:	003e1006 	br	4c2c <__alt_data_end+0xff004c2c>
    53ec:	00800044 	movi	r2,1
    53f0:	10803fcc 	andi	r2,r2,255
    53f4:	00c00044 	movi	r3,1
    53f8:	10fa3526 	beq	r2,r3,3cd0 <__alt_data_end+0xff003cd0>
    53fc:	00c00084 	movi	r3,2
    5400:	10fbcb26 	beq	r2,r3,4330 <__alt_data_end+0xff004330>
    5404:	003a8f06 	br	3e44 <__alt_data_end+0xff003e44>
    5408:	01000074 	movhi	r4,1
    540c:	2106d284 	addi	r4,r4,6986
    5410:	d9003515 	stw	r4,212(sp)
    5414:	003b7606 	br	41f0 <__alt_data_end+0xff0041f0>
    5418:	d8802917 	ldw	r2,164(sp)
    541c:	00c00184 	movi	r3,6
    5420:	1880012e 	bgeu	r3,r2,5428 <___vfprintf_internal_r+0x1ca0>
    5424:	1805883a 	mov	r2,r3
    5428:	d8802e15 	stw	r2,184(sp)
    542c:	1000ef16 	blt	r2,zero,57ec <___vfprintf_internal_r+0x2064>
    5430:	04000074 	movhi	r16,1
    5434:	d8802a15 	stw	r2,168(sp)
    5438:	dcc02d15 	stw	r19,180(sp)
    543c:	d8002915 	stw	zero,164(sp)
    5440:	d8003215 	stw	zero,200(sp)
    5444:	8406cc04 	addi	r16,r16,6960
    5448:	0039883a 	mov	fp,zero
    544c:	003aa206 	br	3ed8 <__alt_data_end+0xff003ed8>
    5450:	0021883a 	mov	r16,zero
    5454:	003e0706 	br	4c74 <__alt_data_end+0xff004c74>
    5458:	d9002c17 	ldw	r4,176(sp)
    545c:	d9801e04 	addi	r6,sp,120
    5460:	b80b883a 	mov	r5,r23
    5464:	000a5240 	call	a524 <__sprint_r>
    5468:	1039c91e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    546c:	d8802617 	ldw	r2,152(sp)
    5470:	d9403317 	ldw	r5,204(sp)
    5474:	d8c02017 	ldw	r3,128(sp)
    5478:	da000404 	addi	r8,sp,16
    547c:	2885c83a 	sub	r2,r5,r2
    5480:	003dfb06 	br	4c70 <__alt_data_end+0xff004c70>
    5484:	9080004c 	andi	r2,r18,1
    5488:	103e8f1e 	bne	r2,zero,4ec8 <__alt_data_end+0xff004ec8>
    548c:	d8802117 	ldw	r2,132(sp)
    5490:	003e9e06 	br	4f0c <__alt_data_end+0xff004f0c>
    5494:	1025883a 	mov	r18,r2
    5498:	0039883a 	mov	fp,zero
    549c:	00800084 	movi	r2,2
    54a0:	003fd306 	br	53f0 <__alt_data_end+0xff0053f0>
    54a4:	07000b44 	movi	fp,45
    54a8:	df002785 	stb	fp,158(sp)
    54ac:	003a4006 	br	3db0 <__alt_data_end+0xff003db0>
    54b0:	00c00b44 	movi	r3,45
    54b4:	d8c02785 	stb	r3,158(sp)
    54b8:	d8802a15 	stw	r2,168(sp)
    54bc:	dc802b17 	ldw	r18,172(sp)
    54c0:	d8002915 	stw	zero,164(sp)
    54c4:	07000b44 	movi	fp,45
    54c8:	003a8006 	br	3ecc <__alt_data_end+0xff003ecc>
    54cc:	04000074 	movhi	r16,1
    54d0:	8406c104 	addi	r16,r16,6916
    54d4:	003f4706 	br	51f4 <__alt_data_end+0xff0051f4>
    54d8:	d8c02d17 	ldw	r3,180(sp)
    54dc:	d9002f17 	ldw	r4,188(sp)
    54e0:	18800017 	ldw	r2,0(r3)
    54e4:	18c00104 	addi	r3,r3,4
    54e8:	d8c02d15 	stw	r3,180(sp)
    54ec:	11000015 	stw	r4,0(r2)
    54f0:	0038dd06 	br	3868 <__alt_data_end+0xff003868>
    54f4:	dd802617 	ldw	r22,152(sp)
    54f8:	00bfff44 	movi	r2,-3
    54fc:	b0801c16 	blt	r22,r2,5570 <___vfprintf_internal_r+0x1de8>
    5500:	d9402917 	ldw	r5,164(sp)
    5504:	2d801a16 	blt	r5,r22,5570 <___vfprintf_internal_r+0x1de8>
    5508:	dd803215 	stw	r22,200(sp)
    550c:	003e8906 	br	4f34 <__alt_data_end+0xff004f34>
    5510:	01000074 	movhi	r4,1
    5514:	2106ce84 	addi	r4,r4,6970
    5518:	d9002b15 	stw	r4,172(sp)
    551c:	003c9106 	br	4764 <__alt_data_end+0xff004764>
    5520:	e005883a 	mov	r2,fp
    5524:	003e7906 	br	4f0c <__alt_data_end+0xff004f0c>
    5528:	d9402917 	ldw	r5,164(sp)
    552c:	df002783 	ldbu	fp,158(sp)
    5530:	dcc02d15 	stw	r19,180(sp)
    5534:	d9402a15 	stw	r5,168(sp)
    5538:	d9402e15 	stw	r5,184(sp)
    553c:	d8002915 	stw	zero,164(sp)
    5540:	d8003215 	stw	zero,200(sp)
    5544:	003a5d06 	br	3ebc <__alt_data_end+0xff003ebc>
    5548:	9080004c 	andi	r2,r18,1
    554c:	0039883a 	mov	fp,zero
    5550:	10000426 	beq	r2,zero,5564 <___vfprintf_internal_r+0x1ddc>
    5554:	00800c04 	movi	r2,48
    5558:	dc001dc4 	addi	r16,sp,119
    555c:	d8801dc5 	stb	r2,119(sp)
    5560:	003b8006 	br	4364 <__alt_data_end+0xff004364>
    5564:	d8002e15 	stw	zero,184(sp)
    5568:	dc001e04 	addi	r16,sp,120
    556c:	003a4d06 	br	3ea4 <__alt_data_end+0xff003ea4>
    5570:	8c7fff84 	addi	r17,r17,-2
    5574:	b5bfffc4 	addi	r22,r22,-1
    5578:	dd802615 	stw	r22,152(sp)
    557c:	dc4022c5 	stb	r17,139(sp)
    5580:	b000bf16 	blt	r22,zero,5880 <___vfprintf_internal_r+0x20f8>
    5584:	00800ac4 	movi	r2,43
    5588:	d8802305 	stb	r2,140(sp)
    558c:	00800244 	movi	r2,9
    5590:	15807016 	blt	r2,r22,5754 <___vfprintf_internal_r+0x1fcc>
    5594:	00800c04 	movi	r2,48
    5598:	b5800c04 	addi	r22,r22,48
    559c:	d8802345 	stb	r2,141(sp)
    55a0:	dd802385 	stb	r22,142(sp)
    55a4:	d88023c4 	addi	r2,sp,143
    55a8:	df0022c4 	addi	fp,sp,139
    55ac:	d8c03317 	ldw	r3,204(sp)
    55b0:	1739c83a 	sub	fp,r2,fp
    55b4:	d9003317 	ldw	r4,204(sp)
    55b8:	e0c7883a 	add	r3,fp,r3
    55bc:	df003a15 	stw	fp,232(sp)
    55c0:	d8c02e15 	stw	r3,184(sp)
    55c4:	00800044 	movi	r2,1
    55c8:	1100b30e 	bge	r2,r4,5898 <___vfprintf_internal_r+0x2110>
    55cc:	d8c02e17 	ldw	r3,184(sp)
    55d0:	18c00044 	addi	r3,r3,1
    55d4:	d8c02e15 	stw	r3,184(sp)
    55d8:	1805883a 	mov	r2,r3
    55dc:	1800ac16 	blt	r3,zero,5890 <___vfprintf_internal_r+0x2108>
    55e0:	d8003215 	stw	zero,200(sp)
    55e4:	003e5d06 	br	4f5c <__alt_data_end+0xff004f5c>
    55e8:	d9002c17 	ldw	r4,176(sp)
    55ec:	d9801e04 	addi	r6,sp,120
    55f0:	b80b883a 	mov	r5,r23
    55f4:	000a5240 	call	a524 <__sprint_r>
    55f8:	1039651e 	bne	r2,zero,3b90 <__alt_data_end+0xff003b90>
    55fc:	dc402617 	ldw	r17,152(sp)
    5600:	d8c02017 	ldw	r3,128(sp)
    5604:	d8801f17 	ldw	r2,124(sp)
    5608:	da000404 	addi	r8,sp,16
    560c:	003ed606 	br	5168 <__alt_data_end+0xff005168>
    5610:	582b883a 	mov	r21,r11
    5614:	d8002915 	stw	zero,164(sp)
    5618:	0038bd06 	br	3910 <__alt_data_end+0xff003910>
    561c:	d8802917 	ldw	r2,164(sp)
    5620:	103e071e 	bne	r2,zero,4e40 <__alt_data_end+0xff004e40>
    5624:	dc002915 	stw	r16,164(sp)
    5628:	003e0506 	br	4e40 <__alt_data_end+0xff004e40>
    562c:	d9002917 	ldw	r4,164(sp)
    5630:	20c00044 	addi	r3,r4,1
    5634:	003e0f06 	br	4e74 <__alt_data_end+0xff004e74>
    5638:	01400184 	movi	r5,6
    563c:	d9402915 	stw	r5,164(sp)
    5640:	003dff06 	br	4e40 <__alt_data_end+0xff004e40>
    5644:	d8802104 	addi	r2,sp,132
    5648:	d8800315 	stw	r2,12(sp)
    564c:	d8802504 	addi	r2,sp,148
    5650:	d8800215 	stw	r2,8(sp)
    5654:	d8802604 	addi	r2,sp,152
    5658:	d8800115 	stw	r2,4(sp)
    565c:	d8802917 	ldw	r2,164(sp)
    5660:	d9403617 	ldw	r5,216(sp)
    5664:	d9002c17 	ldw	r4,176(sp)
    5668:	d8800015 	stw	r2,0(sp)
    566c:	01c000c4 	movi	r7,3
    5670:	980d883a 	mov	r6,r19
    5674:	da003d15 	stw	r8,244(sp)
    5678:	0005dac0 	call	5dac <_dtoa_r>
    567c:	d8c02917 	ldw	r3,164(sp)
    5680:	da003d17 	ldw	r8,244(sp)
    5684:	1021883a 	mov	r16,r2
    5688:	10f9883a 	add	fp,r2,r3
    568c:	81000007 	ldb	r4,0(r16)
    5690:	00800c04 	movi	r2,48
    5694:	20805e26 	beq	r4,r2,5810 <___vfprintf_internal_r+0x2088>
    5698:	d8c02617 	ldw	r3,152(sp)
    569c:	e0f9883a 	add	fp,fp,r3
    56a0:	003e0a06 	br	4ecc <__alt_data_end+0xff004ecc>
    56a4:	00c00b44 	movi	r3,45
    56a8:	24e0003c 	xorhi	r19,r4,32768
    56ac:	d8c02a05 	stb	r3,168(sp)
    56b0:	003de906 	br	4e58 <__alt_data_end+0xff004e58>
    56b4:	d8c03217 	ldw	r3,200(sp)
    56b8:	00c07a0e 	bge	zero,r3,58a4 <___vfprintf_internal_r+0x211c>
    56bc:	00800044 	movi	r2,1
    56c0:	d9003317 	ldw	r4,204(sp)
    56c4:	1105883a 	add	r2,r2,r4
    56c8:	d8802e15 	stw	r2,184(sp)
    56cc:	10004e16 	blt	r2,zero,5808 <___vfprintf_internal_r+0x2080>
    56d0:	044019c4 	movi	r17,103
    56d4:	003e2106 	br	4f5c <__alt_data_end+0xff004f5c>
    56d8:	d9002917 	ldw	r4,164(sp)
    56dc:	d8802104 	addi	r2,sp,132
    56e0:	d8800315 	stw	r2,12(sp)
    56e4:	d9000015 	stw	r4,0(sp)
    56e8:	d8802504 	addi	r2,sp,148
    56ec:	d9403617 	ldw	r5,216(sp)
    56f0:	d9002c17 	ldw	r4,176(sp)
    56f4:	d8800215 	stw	r2,8(sp)
    56f8:	d8802604 	addi	r2,sp,152
    56fc:	d8800115 	stw	r2,4(sp)
    5700:	01c000c4 	movi	r7,3
    5704:	980d883a 	mov	r6,r19
    5708:	da003d15 	stw	r8,244(sp)
    570c:	0005dac0 	call	5dac <_dtoa_r>
    5710:	d8c02917 	ldw	r3,164(sp)
    5714:	da003d17 	ldw	r8,244(sp)
    5718:	1021883a 	mov	r16,r2
    571c:	00801184 	movi	r2,70
    5720:	80f9883a 	add	fp,r16,r3
    5724:	88bfd926 	beq	r17,r2,568c <__alt_data_end+0xff00568c>
    5728:	003de806 	br	4ecc <__alt_data_end+0xff004ecc>
    572c:	d9002917 	ldw	r4,164(sp)
    5730:	00c04d0e 	bge	zero,r3,5868 <___vfprintf_internal_r+0x20e0>
    5734:	2000441e 	bne	r4,zero,5848 <___vfprintf_internal_r+0x20c0>
    5738:	9480004c 	andi	r18,r18,1
    573c:	9000421e 	bne	r18,zero,5848 <___vfprintf_internal_r+0x20c0>
    5740:	1805883a 	mov	r2,r3
    5744:	18007016 	blt	r3,zero,5908 <___vfprintf_internal_r+0x2180>
    5748:	d8c03217 	ldw	r3,200(sp)
    574c:	d8c02e15 	stw	r3,184(sp)
    5750:	003e0206 	br	4f5c <__alt_data_end+0xff004f5c>
    5754:	df0022c4 	addi	fp,sp,139
    5758:	dc002915 	stw	r16,164(sp)
    575c:	4027883a 	mov	r19,r8
    5760:	e021883a 	mov	r16,fp
    5764:	b009883a 	mov	r4,r22
    5768:	01400284 	movi	r5,10
    576c:	00022040 	call	2204 <__modsi3>
    5770:	10800c04 	addi	r2,r2,48
    5774:	843fffc4 	addi	r16,r16,-1
    5778:	b009883a 	mov	r4,r22
    577c:	01400284 	movi	r5,10
    5780:	80800005 	stb	r2,0(r16)
    5784:	00021800 	call	2180 <__divsi3>
    5788:	102d883a 	mov	r22,r2
    578c:	00800244 	movi	r2,9
    5790:	15bff416 	blt	r2,r22,5764 <__alt_data_end+0xff005764>
    5794:	9811883a 	mov	r8,r19
    5798:	b0800c04 	addi	r2,r22,48
    579c:	8027883a 	mov	r19,r16
    57a0:	997fffc4 	addi	r5,r19,-1
    57a4:	98bfffc5 	stb	r2,-1(r19)
    57a8:	dc002917 	ldw	r16,164(sp)
    57ac:	2f006a2e 	bgeu	r5,fp,5958 <___vfprintf_internal_r+0x21d0>
    57b0:	d9c02384 	addi	r7,sp,142
    57b4:	3ccfc83a 	sub	r7,r7,r19
    57b8:	d9002344 	addi	r4,sp,141
    57bc:	e1cf883a 	add	r7,fp,r7
    57c0:	00000106 	br	57c8 <___vfprintf_internal_r+0x2040>
    57c4:	28800003 	ldbu	r2,0(r5)
    57c8:	20800005 	stb	r2,0(r4)
    57cc:	21000044 	addi	r4,r4,1
    57d0:	29400044 	addi	r5,r5,1
    57d4:	393ffb1e 	bne	r7,r4,57c4 <__alt_data_end+0xff0057c4>
    57d8:	d8802304 	addi	r2,sp,140
    57dc:	14c5c83a 	sub	r2,r2,r19
    57e0:	d8c02344 	addi	r3,sp,141
    57e4:	1885883a 	add	r2,r3,r2
    57e8:	003f7006 	br	55ac <__alt_data_end+0xff0055ac>
    57ec:	0005883a 	mov	r2,zero
    57f0:	003f0f06 	br	5430 <__alt_data_end+0xff005430>
    57f4:	d8c03217 	ldw	r3,200(sp)
    57f8:	18c00044 	addi	r3,r3,1
    57fc:	d8c02e15 	stw	r3,184(sp)
    5800:	1805883a 	mov	r2,r3
    5804:	183fb20e 	bge	r3,zero,56d0 <__alt_data_end+0xff0056d0>
    5808:	0005883a 	mov	r2,zero
    580c:	003fb006 	br	56d0 <__alt_data_end+0xff0056d0>
    5810:	d9003617 	ldw	r4,216(sp)
    5814:	000d883a 	mov	r6,zero
    5818:	000f883a 	mov	r7,zero
    581c:	980b883a 	mov	r5,r19
    5820:	d8c03c15 	stw	r3,240(sp)
    5824:	da003d15 	stw	r8,244(sp)
    5828:	000d7000 	call	d700 <__eqdf2>
    582c:	d8c03c17 	ldw	r3,240(sp)
    5830:	da003d17 	ldw	r8,244(sp)
    5834:	103f9826 	beq	r2,zero,5698 <__alt_data_end+0xff005698>
    5838:	00800044 	movi	r2,1
    583c:	10c7c83a 	sub	r3,r2,r3
    5840:	d8c02615 	stw	r3,152(sp)
    5844:	003f9506 	br	569c <__alt_data_end+0xff00569c>
    5848:	d9002917 	ldw	r4,164(sp)
    584c:	d8c03217 	ldw	r3,200(sp)
    5850:	20800044 	addi	r2,r4,1
    5854:	1885883a 	add	r2,r3,r2
    5858:	d8802e15 	stw	r2,184(sp)
    585c:	103dbf0e 	bge	r2,zero,4f5c <__alt_data_end+0xff004f5c>
    5860:	0005883a 	mov	r2,zero
    5864:	003dbd06 	br	4f5c <__alt_data_end+0xff004f5c>
    5868:	2000211e 	bne	r4,zero,58f0 <___vfprintf_internal_r+0x2168>
    586c:	9480004c 	andi	r18,r18,1
    5870:	90001f1e 	bne	r18,zero,58f0 <___vfprintf_internal_r+0x2168>
    5874:	00800044 	movi	r2,1
    5878:	d8802e15 	stw	r2,184(sp)
    587c:	003db706 	br	4f5c <__alt_data_end+0xff004f5c>
    5880:	00800b44 	movi	r2,45
    5884:	05adc83a 	sub	r22,zero,r22
    5888:	d8802305 	stb	r2,140(sp)
    588c:	003f3f06 	br	558c <__alt_data_end+0xff00558c>
    5890:	0005883a 	mov	r2,zero
    5894:	003f5206 	br	55e0 <__alt_data_end+0xff0055e0>
    5898:	90a4703a 	and	r18,r18,r2
    589c:	903f4e26 	beq	r18,zero,55d8 <__alt_data_end+0xff0055d8>
    58a0:	003f4a06 	br	55cc <__alt_data_end+0xff0055cc>
    58a4:	00800084 	movi	r2,2
    58a8:	10c5c83a 	sub	r2,r2,r3
    58ac:	003f8406 	br	56c0 <__alt_data_end+0xff0056c0>
    58b0:	d8802d17 	ldw	r2,180(sp)
    58b4:	d9002d17 	ldw	r4,180(sp)
    58b8:	ac400043 	ldbu	r17,1(r21)
    58bc:	10800017 	ldw	r2,0(r2)
    58c0:	582b883a 	mov	r21,r11
    58c4:	d8802915 	stw	r2,164(sp)
    58c8:	20800104 	addi	r2,r4,4
    58cc:	d9002917 	ldw	r4,164(sp)
    58d0:	d8802d15 	stw	r2,180(sp)
    58d4:	203e7a0e 	bge	r4,zero,52c0 <__alt_data_end+0xff0052c0>
    58d8:	8c403fcc 	andi	r17,r17,255
    58dc:	00bfffc4 	movi	r2,-1
    58e0:	8c40201c 	xori	r17,r17,128
    58e4:	d8802915 	stw	r2,164(sp)
    58e8:	8c7fe004 	addi	r17,r17,-128
    58ec:	00380706 	br	390c <__alt_data_end+0xff00390c>
    58f0:	d8c02917 	ldw	r3,164(sp)
    58f4:	18c00084 	addi	r3,r3,2
    58f8:	d8c02e15 	stw	r3,184(sp)
    58fc:	1805883a 	mov	r2,r3
    5900:	183d960e 	bge	r3,zero,4f5c <__alt_data_end+0xff004f5c>
    5904:	003fd606 	br	5860 <__alt_data_end+0xff005860>
    5908:	0005883a 	mov	r2,zero
    590c:	003f8e06 	br	5748 <__alt_data_end+0xff005748>
    5910:	9080004c 	andi	r2,r18,1
    5914:	103f811e 	bne	r2,zero,571c <__alt_data_end+0xff00571c>
    5918:	d8802117 	ldw	r2,132(sp)
    591c:	1405c83a 	sub	r2,r2,r16
    5920:	d8803315 	stw	r2,204(sp)
    5924:	b47ef326 	beq	r22,r17,54f4 <__alt_data_end+0xff0054f4>
    5928:	dd802617 	ldw	r22,152(sp)
    592c:	003f1106 	br	5574 <__alt_data_end+0xff005574>
    5930:	d9c02785 	stb	r7,158(sp)
    5934:	00390406 	br	3d48 <__alt_data_end+0xff003d48>
    5938:	d9c02785 	stb	r7,158(sp)
    593c:	0038d306 	br	3c8c <__alt_data_end+0xff003c8c>
    5940:	d9c02785 	stb	r7,158(sp)
    5944:	003a6106 	br	42cc <__alt_data_end+0xff0042cc>
    5948:	d9c02785 	stb	r7,158(sp)
    594c:	003af806 	br	4530 <__alt_data_end+0xff004530>
    5950:	0005883a 	mov	r2,zero
    5954:	003d7e06 	br	4f50 <__alt_data_end+0xff004f50>
    5958:	d8802344 	addi	r2,sp,141
    595c:	003f1306 	br	55ac <__alt_data_end+0xff0055ac>
    5960:	d9c02785 	stb	r7,158(sp)
    5964:	00392306 	br	3df4 <__alt_data_end+0xff003df4>
    5968:	d9c02785 	stb	r7,158(sp)
    596c:	003aa906 	br	4414 <__alt_data_end+0xff004414>
    5970:	d9c02785 	stb	r7,158(sp)
    5974:	003a3d06 	br	426c <__alt_data_end+0xff00426c>
    5978:	d9c02785 	stb	r7,158(sp)
    597c:	003aca06 	br	44a8 <__alt_data_end+0xff0044a8>

00005980 <__vfprintf_internal>:
    5980:	00800074 	movhi	r2,1
    5984:	108e2904 	addi	r2,r2,14500
    5988:	300f883a 	mov	r7,r6
    598c:	280d883a 	mov	r6,r5
    5990:	200b883a 	mov	r5,r4
    5994:	11000017 	ldw	r4,0(r2)
    5998:	00037881 	jmpi	3788 <___vfprintf_internal_r>

0000599c <__sbprintf>:
    599c:	2880030b 	ldhu	r2,12(r5)
    59a0:	2ac01917 	ldw	r11,100(r5)
    59a4:	2a80038b 	ldhu	r10,14(r5)
    59a8:	2a400717 	ldw	r9,28(r5)
    59ac:	2a000917 	ldw	r8,36(r5)
    59b0:	defee204 	addi	sp,sp,-1144
    59b4:	00c10004 	movi	r3,1024
    59b8:	dc011a15 	stw	r16,1128(sp)
    59bc:	10bfff4c 	andi	r2,r2,65533
    59c0:	2821883a 	mov	r16,r5
    59c4:	d8cb883a 	add	r5,sp,r3
    59c8:	dc811c15 	stw	r18,1136(sp)
    59cc:	dc411b15 	stw	r17,1132(sp)
    59d0:	dfc11d15 	stw	ra,1140(sp)
    59d4:	2025883a 	mov	r18,r4
    59d8:	d881030d 	sth	r2,1036(sp)
    59dc:	dac11915 	stw	r11,1124(sp)
    59e0:	da81038d 	sth	r10,1038(sp)
    59e4:	da410715 	stw	r9,1052(sp)
    59e8:	da010915 	stw	r8,1060(sp)
    59ec:	dec10015 	stw	sp,1024(sp)
    59f0:	dec10415 	stw	sp,1040(sp)
    59f4:	d8c10215 	stw	r3,1032(sp)
    59f8:	d8c10515 	stw	r3,1044(sp)
    59fc:	d8010615 	stw	zero,1048(sp)
    5a00:	00037880 	call	3788 <___vfprintf_internal_r>
    5a04:	1023883a 	mov	r17,r2
    5a08:	10000416 	blt	r2,zero,5a1c <__sbprintf+0x80>
    5a0c:	d9410004 	addi	r5,sp,1024
    5a10:	9009883a 	mov	r4,r18
    5a14:	00076500 	call	7650 <_fflush_r>
    5a18:	10000d1e 	bne	r2,zero,5a50 <__sbprintf+0xb4>
    5a1c:	d881030b 	ldhu	r2,1036(sp)
    5a20:	1080100c 	andi	r2,r2,64
    5a24:	10000326 	beq	r2,zero,5a34 <__sbprintf+0x98>
    5a28:	8080030b 	ldhu	r2,12(r16)
    5a2c:	10801014 	ori	r2,r2,64
    5a30:	8080030d 	sth	r2,12(r16)
    5a34:	8805883a 	mov	r2,r17
    5a38:	dfc11d17 	ldw	ra,1140(sp)
    5a3c:	dc811c17 	ldw	r18,1136(sp)
    5a40:	dc411b17 	ldw	r17,1132(sp)
    5a44:	dc011a17 	ldw	r16,1128(sp)
    5a48:	dec11e04 	addi	sp,sp,1144
    5a4c:	f800283a 	ret
    5a50:	047fffc4 	movi	r17,-1
    5a54:	003ff106 	br	5a1c <__alt_data_end+0xff005a1c>

00005a58 <__swsetup_r>:
    5a58:	00800074 	movhi	r2,1
    5a5c:	defffd04 	addi	sp,sp,-12
    5a60:	108e2904 	addi	r2,r2,14500
    5a64:	dc400115 	stw	r17,4(sp)
    5a68:	2023883a 	mov	r17,r4
    5a6c:	11000017 	ldw	r4,0(r2)
    5a70:	dc000015 	stw	r16,0(sp)
    5a74:	dfc00215 	stw	ra,8(sp)
    5a78:	2821883a 	mov	r16,r5
    5a7c:	20000226 	beq	r4,zero,5a88 <__swsetup_r+0x30>
    5a80:	20800e17 	ldw	r2,56(r4)
    5a84:	10003126 	beq	r2,zero,5b4c <__swsetup_r+0xf4>
    5a88:	8080030b 	ldhu	r2,12(r16)
    5a8c:	10c0020c 	andi	r3,r2,8
    5a90:	1009883a 	mov	r4,r2
    5a94:	18000f26 	beq	r3,zero,5ad4 <__swsetup_r+0x7c>
    5a98:	80c00417 	ldw	r3,16(r16)
    5a9c:	18001526 	beq	r3,zero,5af4 <__swsetup_r+0x9c>
    5aa0:	1100004c 	andi	r4,r2,1
    5aa4:	20001c1e 	bne	r4,zero,5b18 <__swsetup_r+0xc0>
    5aa8:	1080008c 	andi	r2,r2,2
    5aac:	1000291e 	bne	r2,zero,5b54 <__swsetup_r+0xfc>
    5ab0:	80800517 	ldw	r2,20(r16)
    5ab4:	80800215 	stw	r2,8(r16)
    5ab8:	18001c26 	beq	r3,zero,5b2c <__swsetup_r+0xd4>
    5abc:	0005883a 	mov	r2,zero
    5ac0:	dfc00217 	ldw	ra,8(sp)
    5ac4:	dc400117 	ldw	r17,4(sp)
    5ac8:	dc000017 	ldw	r16,0(sp)
    5acc:	dec00304 	addi	sp,sp,12
    5ad0:	f800283a 	ret
    5ad4:	2080040c 	andi	r2,r4,16
    5ad8:	10002e26 	beq	r2,zero,5b94 <__swsetup_r+0x13c>
    5adc:	2080010c 	andi	r2,r4,4
    5ae0:	10001e1e 	bne	r2,zero,5b5c <__swsetup_r+0x104>
    5ae4:	80c00417 	ldw	r3,16(r16)
    5ae8:	20800214 	ori	r2,r4,8
    5aec:	8080030d 	sth	r2,12(r16)
    5af0:	183feb1e 	bne	r3,zero,5aa0 <__alt_data_end+0xff005aa0>
    5af4:	1100a00c 	andi	r4,r2,640
    5af8:	01408004 	movi	r5,512
    5afc:	217fe826 	beq	r4,r5,5aa0 <__alt_data_end+0xff005aa0>
    5b00:	800b883a 	mov	r5,r16
    5b04:	8809883a 	mov	r4,r17
    5b08:	00085d00 	call	85d0 <__smakebuf_r>
    5b0c:	8080030b 	ldhu	r2,12(r16)
    5b10:	80c00417 	ldw	r3,16(r16)
    5b14:	003fe206 	br	5aa0 <__alt_data_end+0xff005aa0>
    5b18:	80800517 	ldw	r2,20(r16)
    5b1c:	80000215 	stw	zero,8(r16)
    5b20:	0085c83a 	sub	r2,zero,r2
    5b24:	80800615 	stw	r2,24(r16)
    5b28:	183fe41e 	bne	r3,zero,5abc <__alt_data_end+0xff005abc>
    5b2c:	80c0030b 	ldhu	r3,12(r16)
    5b30:	0005883a 	mov	r2,zero
    5b34:	1900200c 	andi	r4,r3,128
    5b38:	203fe126 	beq	r4,zero,5ac0 <__alt_data_end+0xff005ac0>
    5b3c:	18c01014 	ori	r3,r3,64
    5b40:	80c0030d 	sth	r3,12(r16)
    5b44:	00bfffc4 	movi	r2,-1
    5b48:	003fdd06 	br	5ac0 <__alt_data_end+0xff005ac0>
    5b4c:	0007a2c0 	call	7a2c <__sinit>
    5b50:	003fcd06 	br	5a88 <__alt_data_end+0xff005a88>
    5b54:	0005883a 	mov	r2,zero
    5b58:	003fd606 	br	5ab4 <__alt_data_end+0xff005ab4>
    5b5c:	81400c17 	ldw	r5,48(r16)
    5b60:	28000626 	beq	r5,zero,5b7c <__swsetup_r+0x124>
    5b64:	80801004 	addi	r2,r16,64
    5b68:	28800326 	beq	r5,r2,5b78 <__swsetup_r+0x120>
    5b6c:	8809883a 	mov	r4,r17
    5b70:	0007ba00 	call	7ba0 <_free_r>
    5b74:	8100030b 	ldhu	r4,12(r16)
    5b78:	80000c15 	stw	zero,48(r16)
    5b7c:	80c00417 	ldw	r3,16(r16)
    5b80:	00bff6c4 	movi	r2,-37
    5b84:	1108703a 	and	r4,r2,r4
    5b88:	80000115 	stw	zero,4(r16)
    5b8c:	80c00015 	stw	r3,0(r16)
    5b90:	003fd506 	br	5ae8 <__alt_data_end+0xff005ae8>
    5b94:	00800244 	movi	r2,9
    5b98:	88800015 	stw	r2,0(r17)
    5b9c:	20801014 	ori	r2,r4,64
    5ba0:	8080030d 	sth	r2,12(r16)
    5ba4:	00bfffc4 	movi	r2,-1
    5ba8:	003fc506 	br	5ac0 <__alt_data_end+0xff005ac0>

00005bac <quorem>:
    5bac:	defff704 	addi	sp,sp,-36
    5bb0:	dc800215 	stw	r18,8(sp)
    5bb4:	20800417 	ldw	r2,16(r4)
    5bb8:	2c800417 	ldw	r18,16(r5)
    5bbc:	dfc00815 	stw	ra,32(sp)
    5bc0:	ddc00715 	stw	r23,28(sp)
    5bc4:	dd800615 	stw	r22,24(sp)
    5bc8:	dd400515 	stw	r21,20(sp)
    5bcc:	dd000415 	stw	r20,16(sp)
    5bd0:	dcc00315 	stw	r19,12(sp)
    5bd4:	dc400115 	stw	r17,4(sp)
    5bd8:	dc000015 	stw	r16,0(sp)
    5bdc:	14807116 	blt	r2,r18,5da4 <quorem+0x1f8>
    5be0:	94bfffc4 	addi	r18,r18,-1
    5be4:	94ad883a 	add	r22,r18,r18
    5be8:	b5ad883a 	add	r22,r22,r22
    5bec:	2c400504 	addi	r17,r5,20
    5bf0:	8da9883a 	add	r20,r17,r22
    5bf4:	25400504 	addi	r21,r4,20
    5bf8:	282f883a 	mov	r23,r5
    5bfc:	adad883a 	add	r22,r21,r22
    5c00:	a1400017 	ldw	r5,0(r20)
    5c04:	2021883a 	mov	r16,r4
    5c08:	b1000017 	ldw	r4,0(r22)
    5c0c:	29400044 	addi	r5,r5,1
    5c10:	00022780 	call	2278 <__udivsi3>
    5c14:	1027883a 	mov	r19,r2
    5c18:	10002c26 	beq	r2,zero,5ccc <quorem+0x120>
    5c1c:	a813883a 	mov	r9,r21
    5c20:	880b883a 	mov	r5,r17
    5c24:	0009883a 	mov	r4,zero
    5c28:	000d883a 	mov	r6,zero
    5c2c:	2a000017 	ldw	r8,0(r5)
    5c30:	49c00017 	ldw	r7,0(r9)
    5c34:	29400104 	addi	r5,r5,4
    5c38:	40bfffcc 	andi	r2,r8,65535
    5c3c:	14c5383a 	mul	r2,r2,r19
    5c40:	4010d43a 	srli	r8,r8,16
    5c44:	38ffffcc 	andi	r3,r7,65535
    5c48:	1105883a 	add	r2,r2,r4
    5c4c:	1008d43a 	srli	r4,r2,16
    5c50:	44d1383a 	mul	r8,r8,r19
    5c54:	198d883a 	add	r6,r3,r6
    5c58:	10ffffcc 	andi	r3,r2,65535
    5c5c:	30c7c83a 	sub	r3,r6,r3
    5c60:	380ed43a 	srli	r7,r7,16
    5c64:	4105883a 	add	r2,r8,r4
    5c68:	180dd43a 	srai	r6,r3,16
    5c6c:	113fffcc 	andi	r4,r2,65535
    5c70:	390fc83a 	sub	r7,r7,r4
    5c74:	398d883a 	add	r6,r7,r6
    5c78:	300e943a 	slli	r7,r6,16
    5c7c:	18ffffcc 	andi	r3,r3,65535
    5c80:	1008d43a 	srli	r4,r2,16
    5c84:	38ceb03a 	or	r7,r7,r3
    5c88:	49c00015 	stw	r7,0(r9)
    5c8c:	300dd43a 	srai	r6,r6,16
    5c90:	4a400104 	addi	r9,r9,4
    5c94:	a17fe52e 	bgeu	r20,r5,5c2c <__alt_data_end+0xff005c2c>
    5c98:	b0800017 	ldw	r2,0(r22)
    5c9c:	10000b1e 	bne	r2,zero,5ccc <quorem+0x120>
    5ca0:	b0bfff04 	addi	r2,r22,-4
    5ca4:	a880082e 	bgeu	r21,r2,5cc8 <quorem+0x11c>
    5ca8:	b0ffff17 	ldw	r3,-4(r22)
    5cac:	18000326 	beq	r3,zero,5cbc <quorem+0x110>
    5cb0:	00000506 	br	5cc8 <quorem+0x11c>
    5cb4:	10c00017 	ldw	r3,0(r2)
    5cb8:	1800031e 	bne	r3,zero,5cc8 <quorem+0x11c>
    5cbc:	10bfff04 	addi	r2,r2,-4
    5cc0:	94bfffc4 	addi	r18,r18,-1
    5cc4:	a8bffb36 	bltu	r21,r2,5cb4 <__alt_data_end+0xff005cb4>
    5cc8:	84800415 	stw	r18,16(r16)
    5ccc:	b80b883a 	mov	r5,r23
    5cd0:	8009883a 	mov	r4,r16
    5cd4:	00095040 	call	9504 <__mcmp>
    5cd8:	10002616 	blt	r2,zero,5d74 <quorem+0x1c8>
    5cdc:	9cc00044 	addi	r19,r19,1
    5ce0:	a805883a 	mov	r2,r21
    5ce4:	000b883a 	mov	r5,zero
    5ce8:	11000017 	ldw	r4,0(r2)
    5cec:	89800017 	ldw	r6,0(r17)
    5cf0:	10800104 	addi	r2,r2,4
    5cf4:	20ffffcc 	andi	r3,r4,65535
    5cf8:	194b883a 	add	r5,r3,r5
    5cfc:	30ffffcc 	andi	r3,r6,65535
    5d00:	28c7c83a 	sub	r3,r5,r3
    5d04:	300cd43a 	srli	r6,r6,16
    5d08:	2008d43a 	srli	r4,r4,16
    5d0c:	180bd43a 	srai	r5,r3,16
    5d10:	18ffffcc 	andi	r3,r3,65535
    5d14:	2189c83a 	sub	r4,r4,r6
    5d18:	2149883a 	add	r4,r4,r5
    5d1c:	200c943a 	slli	r6,r4,16
    5d20:	8c400104 	addi	r17,r17,4
    5d24:	200bd43a 	srai	r5,r4,16
    5d28:	30c6b03a 	or	r3,r6,r3
    5d2c:	10ffff15 	stw	r3,-4(r2)
    5d30:	a47fed2e 	bgeu	r20,r17,5ce8 <__alt_data_end+0xff005ce8>
    5d34:	9485883a 	add	r2,r18,r18
    5d38:	1085883a 	add	r2,r2,r2
    5d3c:	a887883a 	add	r3,r21,r2
    5d40:	18800017 	ldw	r2,0(r3)
    5d44:	10000b1e 	bne	r2,zero,5d74 <quorem+0x1c8>
    5d48:	18bfff04 	addi	r2,r3,-4
    5d4c:	a880082e 	bgeu	r21,r2,5d70 <quorem+0x1c4>
    5d50:	18ffff17 	ldw	r3,-4(r3)
    5d54:	18000326 	beq	r3,zero,5d64 <quorem+0x1b8>
    5d58:	00000506 	br	5d70 <quorem+0x1c4>
    5d5c:	10c00017 	ldw	r3,0(r2)
    5d60:	1800031e 	bne	r3,zero,5d70 <quorem+0x1c4>
    5d64:	10bfff04 	addi	r2,r2,-4
    5d68:	94bfffc4 	addi	r18,r18,-1
    5d6c:	a8bffb36 	bltu	r21,r2,5d5c <__alt_data_end+0xff005d5c>
    5d70:	84800415 	stw	r18,16(r16)
    5d74:	9805883a 	mov	r2,r19
    5d78:	dfc00817 	ldw	ra,32(sp)
    5d7c:	ddc00717 	ldw	r23,28(sp)
    5d80:	dd800617 	ldw	r22,24(sp)
    5d84:	dd400517 	ldw	r21,20(sp)
    5d88:	dd000417 	ldw	r20,16(sp)
    5d8c:	dcc00317 	ldw	r19,12(sp)
    5d90:	dc800217 	ldw	r18,8(sp)
    5d94:	dc400117 	ldw	r17,4(sp)
    5d98:	dc000017 	ldw	r16,0(sp)
    5d9c:	dec00904 	addi	sp,sp,36
    5da0:	f800283a 	ret
    5da4:	0005883a 	mov	r2,zero
    5da8:	003ff306 	br	5d78 <__alt_data_end+0xff005d78>

00005dac <_dtoa_r>:
    5dac:	20801017 	ldw	r2,64(r4)
    5db0:	deffde04 	addi	sp,sp,-136
    5db4:	df002015 	stw	fp,128(sp)
    5db8:	dcc01b15 	stw	r19,108(sp)
    5dbc:	dc801a15 	stw	r18,104(sp)
    5dc0:	dc401915 	stw	r17,100(sp)
    5dc4:	dc001815 	stw	r16,96(sp)
    5dc8:	dfc02115 	stw	ra,132(sp)
    5dcc:	ddc01f15 	stw	r23,124(sp)
    5dd0:	dd801e15 	stw	r22,120(sp)
    5dd4:	dd401d15 	stw	r21,116(sp)
    5dd8:	dd001c15 	stw	r20,112(sp)
    5ddc:	d9c00315 	stw	r7,12(sp)
    5de0:	2039883a 	mov	fp,r4
    5de4:	3023883a 	mov	r17,r6
    5de8:	2825883a 	mov	r18,r5
    5dec:	dc002417 	ldw	r16,144(sp)
    5df0:	3027883a 	mov	r19,r6
    5df4:	10000826 	beq	r2,zero,5e18 <_dtoa_r+0x6c>
    5df8:	21801117 	ldw	r6,68(r4)
    5dfc:	00c00044 	movi	r3,1
    5e00:	100b883a 	mov	r5,r2
    5e04:	1986983a 	sll	r3,r3,r6
    5e08:	11800115 	stw	r6,4(r2)
    5e0c:	10c00215 	stw	r3,8(r2)
    5e10:	0008ce40 	call	8ce4 <_Bfree>
    5e14:	e0001015 	stw	zero,64(fp)
    5e18:	88002e16 	blt	r17,zero,5ed4 <_dtoa_r+0x128>
    5e1c:	80000015 	stw	zero,0(r16)
    5e20:	889ffc2c 	andhi	r2,r17,32752
    5e24:	00dffc34 	movhi	r3,32752
    5e28:	10c01c26 	beq	r2,r3,5e9c <_dtoa_r+0xf0>
    5e2c:	000d883a 	mov	r6,zero
    5e30:	000f883a 	mov	r7,zero
    5e34:	9009883a 	mov	r4,r18
    5e38:	980b883a 	mov	r5,r19
    5e3c:	000d7000 	call	d700 <__eqdf2>
    5e40:	10002b1e 	bne	r2,zero,5ef0 <_dtoa_r+0x144>
    5e44:	d9c02317 	ldw	r7,140(sp)
    5e48:	00800044 	movi	r2,1
    5e4c:	38800015 	stw	r2,0(r7)
    5e50:	d8802517 	ldw	r2,148(sp)
    5e54:	10019e26 	beq	r2,zero,64d0 <_dtoa_r+0x724>
    5e58:	d8c02517 	ldw	r3,148(sp)
    5e5c:	00800074 	movhi	r2,1
    5e60:	1086ce44 	addi	r2,r2,6969
    5e64:	18800015 	stw	r2,0(r3)
    5e68:	10bfffc4 	addi	r2,r2,-1
    5e6c:	dfc02117 	ldw	ra,132(sp)
    5e70:	df002017 	ldw	fp,128(sp)
    5e74:	ddc01f17 	ldw	r23,124(sp)
    5e78:	dd801e17 	ldw	r22,120(sp)
    5e7c:	dd401d17 	ldw	r21,116(sp)
    5e80:	dd001c17 	ldw	r20,112(sp)
    5e84:	dcc01b17 	ldw	r19,108(sp)
    5e88:	dc801a17 	ldw	r18,104(sp)
    5e8c:	dc401917 	ldw	r17,100(sp)
    5e90:	dc001817 	ldw	r16,96(sp)
    5e94:	dec02204 	addi	sp,sp,136
    5e98:	f800283a 	ret
    5e9c:	d8c02317 	ldw	r3,140(sp)
    5ea0:	0089c3c4 	movi	r2,9999
    5ea4:	18800015 	stw	r2,0(r3)
    5ea8:	90017726 	beq	r18,zero,6488 <_dtoa_r+0x6dc>
    5eac:	00800074 	movhi	r2,1
    5eb0:	1086da04 	addi	r2,r2,7016
    5eb4:	d9002517 	ldw	r4,148(sp)
    5eb8:	203fec26 	beq	r4,zero,5e6c <__alt_data_end+0xff005e6c>
    5ebc:	10c000c7 	ldb	r3,3(r2)
    5ec0:	1801781e 	bne	r3,zero,64a4 <_dtoa_r+0x6f8>
    5ec4:	10c000c4 	addi	r3,r2,3
    5ec8:	d9802517 	ldw	r6,148(sp)
    5ecc:	30c00015 	stw	r3,0(r6)
    5ed0:	003fe606 	br	5e6c <__alt_data_end+0xff005e6c>
    5ed4:	04e00034 	movhi	r19,32768
    5ed8:	9cffffc4 	addi	r19,r19,-1
    5edc:	00800044 	movi	r2,1
    5ee0:	8ce6703a 	and	r19,r17,r19
    5ee4:	80800015 	stw	r2,0(r16)
    5ee8:	9823883a 	mov	r17,r19
    5eec:	003fcc06 	br	5e20 <__alt_data_end+0xff005e20>
    5ef0:	d8800204 	addi	r2,sp,8
    5ef4:	d8800015 	stw	r2,0(sp)
    5ef8:	d9c00104 	addi	r7,sp,4
    5efc:	900b883a 	mov	r5,r18
    5f00:	980d883a 	mov	r6,r19
    5f04:	e009883a 	mov	r4,fp
    5f08:	8820d53a 	srli	r16,r17,20
    5f0c:	00098d00 	call	98d0 <__d2b>
    5f10:	d8800915 	stw	r2,36(sp)
    5f14:	8001651e 	bne	r16,zero,64ac <_dtoa_r+0x700>
    5f18:	dd800217 	ldw	r22,8(sp)
    5f1c:	dc000117 	ldw	r16,4(sp)
    5f20:	00800804 	movi	r2,32
    5f24:	b421883a 	add	r16,r22,r16
    5f28:	80c10c84 	addi	r3,r16,1074
    5f2c:	10c2d10e 	bge	r2,r3,6a74 <_dtoa_r+0xcc8>
    5f30:	00801004 	movi	r2,64
    5f34:	81010484 	addi	r4,r16,1042
    5f38:	10c7c83a 	sub	r3,r2,r3
    5f3c:	9108d83a 	srl	r4,r18,r4
    5f40:	88e2983a 	sll	r17,r17,r3
    5f44:	2448b03a 	or	r4,r4,r17
    5f48:	0002c1c0 	call	2c1c <__floatunsidf>
    5f4c:	017f8434 	movhi	r5,65040
    5f50:	01800044 	movi	r6,1
    5f54:	1009883a 	mov	r4,r2
    5f58:	194b883a 	add	r5,r3,r5
    5f5c:	843fffc4 	addi	r16,r16,-1
    5f60:	d9801115 	stw	r6,68(sp)
    5f64:	000d883a 	mov	r6,zero
    5f68:	01cffe34 	movhi	r7,16376
    5f6c:	000e0700 	call	e070 <__subdf3>
    5f70:	0198dbf4 	movhi	r6,25455
    5f74:	01cff4f4 	movhi	r7,16339
    5f78:	3190d844 	addi	r6,r6,17249
    5f7c:	39e1e9c4 	addi	r7,r7,-30809
    5f80:	1009883a 	mov	r4,r2
    5f84:	180b883a 	mov	r5,r3
    5f88:	000d9580 	call	d958 <__muldf3>
    5f8c:	01a2d874 	movhi	r6,35681
    5f90:	01cff1f4 	movhi	r7,16327
    5f94:	31b22cc4 	addi	r6,r6,-14157
    5f98:	39e28a04 	addi	r7,r7,-30168
    5f9c:	180b883a 	mov	r5,r3
    5fa0:	1009883a 	mov	r4,r2
    5fa4:	000ce540 	call	ce54 <__adddf3>
    5fa8:	8009883a 	mov	r4,r16
    5fac:	1029883a 	mov	r20,r2
    5fb0:	1823883a 	mov	r17,r3
    5fb4:	000e9ec0 	call	e9ec <__floatsidf>
    5fb8:	019427f4 	movhi	r6,20639
    5fbc:	01cff4f4 	movhi	r7,16339
    5fc0:	319e7ec4 	addi	r6,r6,31227
    5fc4:	39d104c4 	addi	r7,r7,17427
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	180b883a 	mov	r5,r3
    5fd0:	000d9580 	call	d958 <__muldf3>
    5fd4:	100d883a 	mov	r6,r2
    5fd8:	180f883a 	mov	r7,r3
    5fdc:	a009883a 	mov	r4,r20
    5fe0:	880b883a 	mov	r5,r17
    5fe4:	000ce540 	call	ce54 <__adddf3>
    5fe8:	1009883a 	mov	r4,r2
    5fec:	180b883a 	mov	r5,r3
    5ff0:	1029883a 	mov	r20,r2
    5ff4:	1823883a 	mov	r17,r3
    5ff8:	000e96c0 	call	e96c <__fixdfsi>
    5ffc:	000d883a 	mov	r6,zero
    6000:	000f883a 	mov	r7,zero
    6004:	a009883a 	mov	r4,r20
    6008:	880b883a 	mov	r5,r17
    600c:	d8800515 	stw	r2,20(sp)
    6010:	000d8640 	call	d864 <__ledf2>
    6014:	10028716 	blt	r2,zero,6a34 <_dtoa_r+0xc88>
    6018:	d8c00517 	ldw	r3,20(sp)
    601c:	00800584 	movi	r2,22
    6020:	10c27536 	bltu	r2,r3,69f8 <_dtoa_r+0xc4c>
    6024:	180490fa 	slli	r2,r3,3
    6028:	00c00074 	movhi	r3,1
    602c:	18c6f604 	addi	r3,r3,7128
    6030:	1885883a 	add	r2,r3,r2
    6034:	11000017 	ldw	r4,0(r2)
    6038:	11400117 	ldw	r5,4(r2)
    603c:	900d883a 	mov	r6,r18
    6040:	980f883a 	mov	r7,r19
    6044:	000d7880 	call	d788 <__gedf2>
    6048:	00828d0e 	bge	zero,r2,6a80 <_dtoa_r+0xcd4>
    604c:	d9000517 	ldw	r4,20(sp)
    6050:	d8000e15 	stw	zero,56(sp)
    6054:	213fffc4 	addi	r4,r4,-1
    6058:	d9000515 	stw	r4,20(sp)
    605c:	b42dc83a 	sub	r22,r22,r16
    6060:	b5bfffc4 	addi	r22,r22,-1
    6064:	b0026f16 	blt	r22,zero,6a24 <_dtoa_r+0xc78>
    6068:	d8000815 	stw	zero,32(sp)
    606c:	d9c00517 	ldw	r7,20(sp)
    6070:	38026416 	blt	r7,zero,6a04 <_dtoa_r+0xc58>
    6074:	b1ed883a 	add	r22,r22,r7
    6078:	d9c00d15 	stw	r7,52(sp)
    607c:	d8000a15 	stw	zero,40(sp)
    6080:	d9800317 	ldw	r6,12(sp)
    6084:	00800244 	movi	r2,9
    6088:	11811436 	bltu	r2,r6,64dc <_dtoa_r+0x730>
    608c:	00800144 	movi	r2,5
    6090:	1184e10e 	bge	r2,r6,7418 <_dtoa_r+0x166c>
    6094:	31bfff04 	addi	r6,r6,-4
    6098:	d9800315 	stw	r6,12(sp)
    609c:	0023883a 	mov	r17,zero
    60a0:	d9800317 	ldw	r6,12(sp)
    60a4:	008000c4 	movi	r2,3
    60a8:	30836726 	beq	r6,r2,6e48 <_dtoa_r+0x109c>
    60ac:	1183410e 	bge	r2,r6,6db4 <_dtoa_r+0x1008>
    60b0:	d9c00317 	ldw	r7,12(sp)
    60b4:	00800104 	movi	r2,4
    60b8:	38827c26 	beq	r7,r2,6aac <_dtoa_r+0xd00>
    60bc:	00800144 	movi	r2,5
    60c0:	3884c41e 	bne	r7,r2,73d4 <_dtoa_r+0x1628>
    60c4:	00800044 	movi	r2,1
    60c8:	d8800b15 	stw	r2,44(sp)
    60cc:	d8c00517 	ldw	r3,20(sp)
    60d0:	d9002217 	ldw	r4,136(sp)
    60d4:	1907883a 	add	r3,r3,r4
    60d8:	19800044 	addi	r6,r3,1
    60dc:	d8c00c15 	stw	r3,48(sp)
    60e0:	d9800615 	stw	r6,24(sp)
    60e4:	0183a40e 	bge	zero,r6,6f78 <_dtoa_r+0x11cc>
    60e8:	d9800617 	ldw	r6,24(sp)
    60ec:	3021883a 	mov	r16,r6
    60f0:	e0001115 	stw	zero,68(fp)
    60f4:	008005c4 	movi	r2,23
    60f8:	1184c92e 	bgeu	r2,r6,7420 <_dtoa_r+0x1674>
    60fc:	00c00044 	movi	r3,1
    6100:	00800104 	movi	r2,4
    6104:	1085883a 	add	r2,r2,r2
    6108:	11000504 	addi	r4,r2,20
    610c:	180b883a 	mov	r5,r3
    6110:	18c00044 	addi	r3,r3,1
    6114:	313ffb2e 	bgeu	r6,r4,6104 <__alt_data_end+0xff006104>
    6118:	e1401115 	stw	r5,68(fp)
    611c:	e009883a 	mov	r4,fp
    6120:	0008c3c0 	call	8c3c <_Balloc>
    6124:	d8800715 	stw	r2,28(sp)
    6128:	e0801015 	stw	r2,64(fp)
    612c:	00800384 	movi	r2,14
    6130:	1400f736 	bltu	r2,r16,6510 <_dtoa_r+0x764>
    6134:	8800f626 	beq	r17,zero,6510 <_dtoa_r+0x764>
    6138:	d9c00517 	ldw	r7,20(sp)
    613c:	01c39a0e 	bge	zero,r7,6fa8 <_dtoa_r+0x11fc>
    6140:	388003cc 	andi	r2,r7,15
    6144:	100490fa 	slli	r2,r2,3
    6148:	382bd13a 	srai	r21,r7,4
    614c:	00c00074 	movhi	r3,1
    6150:	18c6f604 	addi	r3,r3,7128
    6154:	1885883a 	add	r2,r3,r2
    6158:	a8c0040c 	andi	r3,r21,16
    615c:	12400017 	ldw	r9,0(r2)
    6160:	12000117 	ldw	r8,4(r2)
    6164:	18037926 	beq	r3,zero,6f4c <_dtoa_r+0x11a0>
    6168:	00800074 	movhi	r2,1
    616c:	1086ec04 	addi	r2,r2,7088
    6170:	11800817 	ldw	r6,32(r2)
    6174:	11c00917 	ldw	r7,36(r2)
    6178:	9009883a 	mov	r4,r18
    617c:	980b883a 	mov	r5,r19
    6180:	da001715 	stw	r8,92(sp)
    6184:	da401615 	stw	r9,88(sp)
    6188:	00023340 	call	2334 <__divdf3>
    618c:	da001717 	ldw	r8,92(sp)
    6190:	da401617 	ldw	r9,88(sp)
    6194:	ad4003cc 	andi	r21,r21,15
    6198:	040000c4 	movi	r16,3
    619c:	1023883a 	mov	r17,r2
    61a0:	1829883a 	mov	r20,r3
    61a4:	a8001126 	beq	r21,zero,61ec <_dtoa_r+0x440>
    61a8:	05c00074 	movhi	r23,1
    61ac:	bdc6ec04 	addi	r23,r23,7088
    61b0:	4805883a 	mov	r2,r9
    61b4:	4007883a 	mov	r3,r8
    61b8:	a980004c 	andi	r6,r21,1
    61bc:	1009883a 	mov	r4,r2
    61c0:	a82bd07a 	srai	r21,r21,1
    61c4:	180b883a 	mov	r5,r3
    61c8:	30000426 	beq	r6,zero,61dc <_dtoa_r+0x430>
    61cc:	b9800017 	ldw	r6,0(r23)
    61d0:	b9c00117 	ldw	r7,4(r23)
    61d4:	84000044 	addi	r16,r16,1
    61d8:	000d9580 	call	d958 <__muldf3>
    61dc:	bdc00204 	addi	r23,r23,8
    61e0:	a83ff51e 	bne	r21,zero,61b8 <__alt_data_end+0xff0061b8>
    61e4:	1013883a 	mov	r9,r2
    61e8:	1811883a 	mov	r8,r3
    61ec:	480d883a 	mov	r6,r9
    61f0:	400f883a 	mov	r7,r8
    61f4:	8809883a 	mov	r4,r17
    61f8:	a00b883a 	mov	r5,r20
    61fc:	00023340 	call	2334 <__divdf3>
    6200:	d8800f15 	stw	r2,60(sp)
    6204:	d8c01015 	stw	r3,64(sp)
    6208:	d8c00e17 	ldw	r3,56(sp)
    620c:	18000626 	beq	r3,zero,6228 <_dtoa_r+0x47c>
    6210:	d9000f17 	ldw	r4,60(sp)
    6214:	d9401017 	ldw	r5,64(sp)
    6218:	000d883a 	mov	r6,zero
    621c:	01cffc34 	movhi	r7,16368
    6220:	000d8640 	call	d864 <__ledf2>
    6224:	10040b16 	blt	r2,zero,7254 <_dtoa_r+0x14a8>
    6228:	8009883a 	mov	r4,r16
    622c:	000e9ec0 	call	e9ec <__floatsidf>
    6230:	d9800f17 	ldw	r6,60(sp)
    6234:	d9c01017 	ldw	r7,64(sp)
    6238:	1009883a 	mov	r4,r2
    623c:	180b883a 	mov	r5,r3
    6240:	000d9580 	call	d958 <__muldf3>
    6244:	000d883a 	mov	r6,zero
    6248:	01d00734 	movhi	r7,16412
    624c:	1009883a 	mov	r4,r2
    6250:	180b883a 	mov	r5,r3
    6254:	000ce540 	call	ce54 <__adddf3>
    6258:	1021883a 	mov	r16,r2
    625c:	d8800617 	ldw	r2,24(sp)
    6260:	047f3034 	movhi	r17,64704
    6264:	1c63883a 	add	r17,r3,r17
    6268:	10031826 	beq	r2,zero,6ecc <_dtoa_r+0x1120>
    626c:	d8c00517 	ldw	r3,20(sp)
    6270:	db000617 	ldw	r12,24(sp)
    6274:	d8c01315 	stw	r3,76(sp)
    6278:	d9000b17 	ldw	r4,44(sp)
    627c:	20038f26 	beq	r4,zero,70bc <_dtoa_r+0x1310>
    6280:	60bfffc4 	addi	r2,r12,-1
    6284:	100490fa 	slli	r2,r2,3
    6288:	00c00074 	movhi	r3,1
    628c:	18c6f604 	addi	r3,r3,7128
    6290:	1885883a 	add	r2,r3,r2
    6294:	11800017 	ldw	r6,0(r2)
    6298:	11c00117 	ldw	r7,4(r2)
    629c:	d8800717 	ldw	r2,28(sp)
    62a0:	0009883a 	mov	r4,zero
    62a4:	014ff834 	movhi	r5,16352
    62a8:	db001615 	stw	r12,88(sp)
    62ac:	15c00044 	addi	r23,r2,1
    62b0:	00023340 	call	2334 <__divdf3>
    62b4:	800d883a 	mov	r6,r16
    62b8:	880f883a 	mov	r7,r17
    62bc:	1009883a 	mov	r4,r2
    62c0:	180b883a 	mov	r5,r3
    62c4:	000e0700 	call	e070 <__subdf3>
    62c8:	d9401017 	ldw	r5,64(sp)
    62cc:	d9000f17 	ldw	r4,60(sp)
    62d0:	102b883a 	mov	r21,r2
    62d4:	d8c01215 	stw	r3,72(sp)
    62d8:	000e96c0 	call	e96c <__fixdfsi>
    62dc:	1009883a 	mov	r4,r2
    62e0:	1029883a 	mov	r20,r2
    62e4:	000e9ec0 	call	e9ec <__floatsidf>
    62e8:	d9000f17 	ldw	r4,60(sp)
    62ec:	d9401017 	ldw	r5,64(sp)
    62f0:	100d883a 	mov	r6,r2
    62f4:	180f883a 	mov	r7,r3
    62f8:	000e0700 	call	e070 <__subdf3>
    62fc:	1823883a 	mov	r17,r3
    6300:	d8c00717 	ldw	r3,28(sp)
    6304:	d9401217 	ldw	r5,72(sp)
    6308:	a2000c04 	addi	r8,r20,48
    630c:	1021883a 	mov	r16,r2
    6310:	1a000005 	stb	r8,0(r3)
    6314:	800d883a 	mov	r6,r16
    6318:	880f883a 	mov	r7,r17
    631c:	a809883a 	mov	r4,r21
    6320:	4029883a 	mov	r20,r8
    6324:	000d7880 	call	d788 <__gedf2>
    6328:	00841d16 	blt	zero,r2,73a0 <_dtoa_r+0x15f4>
    632c:	800d883a 	mov	r6,r16
    6330:	880f883a 	mov	r7,r17
    6334:	0009883a 	mov	r4,zero
    6338:	014ffc34 	movhi	r5,16368
    633c:	000e0700 	call	e070 <__subdf3>
    6340:	d9401217 	ldw	r5,72(sp)
    6344:	100d883a 	mov	r6,r2
    6348:	180f883a 	mov	r7,r3
    634c:	a809883a 	mov	r4,r21
    6350:	000d7880 	call	d788 <__gedf2>
    6354:	db001617 	ldw	r12,88(sp)
    6358:	00840e16 	blt	zero,r2,7394 <_dtoa_r+0x15e8>
    635c:	00800044 	movi	r2,1
    6360:	13006b0e 	bge	r2,r12,6510 <_dtoa_r+0x764>
    6364:	d9000717 	ldw	r4,28(sp)
    6368:	dd800f15 	stw	r22,60(sp)
    636c:	dcc01015 	stw	r19,64(sp)
    6370:	2319883a 	add	r12,r4,r12
    6374:	dcc01217 	ldw	r19,72(sp)
    6378:	602d883a 	mov	r22,r12
    637c:	dc801215 	stw	r18,72(sp)
    6380:	b825883a 	mov	r18,r23
    6384:	00000906 	br	63ac <_dtoa_r+0x600>
    6388:	000e0700 	call	e070 <__subdf3>
    638c:	a80d883a 	mov	r6,r21
    6390:	980f883a 	mov	r7,r19
    6394:	1009883a 	mov	r4,r2
    6398:	180b883a 	mov	r5,r3
    639c:	000d8640 	call	d864 <__ledf2>
    63a0:	1003e816 	blt	r2,zero,7344 <_dtoa_r+0x1598>
    63a4:	b825883a 	mov	r18,r23
    63a8:	bd83e926 	beq	r23,r22,7350 <_dtoa_r+0x15a4>
    63ac:	a809883a 	mov	r4,r21
    63b0:	980b883a 	mov	r5,r19
    63b4:	000d883a 	mov	r6,zero
    63b8:	01d00934 	movhi	r7,16420
    63bc:	000d9580 	call	d958 <__muldf3>
    63c0:	000d883a 	mov	r6,zero
    63c4:	01d00934 	movhi	r7,16420
    63c8:	8009883a 	mov	r4,r16
    63cc:	880b883a 	mov	r5,r17
    63d0:	102b883a 	mov	r21,r2
    63d4:	1827883a 	mov	r19,r3
    63d8:	000d9580 	call	d958 <__muldf3>
    63dc:	180b883a 	mov	r5,r3
    63e0:	1009883a 	mov	r4,r2
    63e4:	1821883a 	mov	r16,r3
    63e8:	1023883a 	mov	r17,r2
    63ec:	000e96c0 	call	e96c <__fixdfsi>
    63f0:	1009883a 	mov	r4,r2
    63f4:	1029883a 	mov	r20,r2
    63f8:	000e9ec0 	call	e9ec <__floatsidf>
    63fc:	8809883a 	mov	r4,r17
    6400:	800b883a 	mov	r5,r16
    6404:	100d883a 	mov	r6,r2
    6408:	180f883a 	mov	r7,r3
    640c:	000e0700 	call	e070 <__subdf3>
    6410:	a5000c04 	addi	r20,r20,48
    6414:	a80d883a 	mov	r6,r21
    6418:	980f883a 	mov	r7,r19
    641c:	1009883a 	mov	r4,r2
    6420:	180b883a 	mov	r5,r3
    6424:	95000005 	stb	r20,0(r18)
    6428:	1021883a 	mov	r16,r2
    642c:	1823883a 	mov	r17,r3
    6430:	000d8640 	call	d864 <__ledf2>
    6434:	bdc00044 	addi	r23,r23,1
    6438:	800d883a 	mov	r6,r16
    643c:	880f883a 	mov	r7,r17
    6440:	0009883a 	mov	r4,zero
    6444:	014ffc34 	movhi	r5,16368
    6448:	103fcf0e 	bge	r2,zero,6388 <__alt_data_end+0xff006388>
    644c:	d8c01317 	ldw	r3,76(sp)
    6450:	d8c00515 	stw	r3,20(sp)
    6454:	d9400917 	ldw	r5,36(sp)
    6458:	e009883a 	mov	r4,fp
    645c:	0008ce40 	call	8ce4 <_Bfree>
    6460:	d9000517 	ldw	r4,20(sp)
    6464:	d9802317 	ldw	r6,140(sp)
    6468:	d9c02517 	ldw	r7,148(sp)
    646c:	b8000005 	stb	zero,0(r23)
    6470:	20800044 	addi	r2,r4,1
    6474:	30800015 	stw	r2,0(r6)
    6478:	3802aa26 	beq	r7,zero,6f24 <_dtoa_r+0x1178>
    647c:	3dc00015 	stw	r23,0(r7)
    6480:	d8800717 	ldw	r2,28(sp)
    6484:	003e7906 	br	5e6c <__alt_data_end+0xff005e6c>
    6488:	00800434 	movhi	r2,16
    648c:	10bfffc4 	addi	r2,r2,-1
    6490:	88a2703a 	and	r17,r17,r2
    6494:	883e851e 	bne	r17,zero,5eac <__alt_data_end+0xff005eac>
    6498:	00800074 	movhi	r2,1
    649c:	1086d704 	addi	r2,r2,7004
    64a0:	003e8406 	br	5eb4 <__alt_data_end+0xff005eb4>
    64a4:	10c00204 	addi	r3,r2,8
    64a8:	003e8706 	br	5ec8 <__alt_data_end+0xff005ec8>
    64ac:	01400434 	movhi	r5,16
    64b0:	297fffc4 	addi	r5,r5,-1
    64b4:	994a703a 	and	r5,r19,r5
    64b8:	9009883a 	mov	r4,r18
    64bc:	843f0044 	addi	r16,r16,-1023
    64c0:	294ffc34 	orhi	r5,r5,16368
    64c4:	dd800217 	ldw	r22,8(sp)
    64c8:	d8001115 	stw	zero,68(sp)
    64cc:	003ea506 	br	5f64 <__alt_data_end+0xff005f64>
    64d0:	00800074 	movhi	r2,1
    64d4:	1086ce04 	addi	r2,r2,6968
    64d8:	003e6406 	br	5e6c <__alt_data_end+0xff005e6c>
    64dc:	e0001115 	stw	zero,68(fp)
    64e0:	000b883a 	mov	r5,zero
    64e4:	e009883a 	mov	r4,fp
    64e8:	0008c3c0 	call	8c3c <_Balloc>
    64ec:	01bfffc4 	movi	r6,-1
    64f0:	01c00044 	movi	r7,1
    64f4:	d8800715 	stw	r2,28(sp)
    64f8:	d9800c15 	stw	r6,48(sp)
    64fc:	e0801015 	stw	r2,64(fp)
    6500:	d8000315 	stw	zero,12(sp)
    6504:	d9c00b15 	stw	r7,44(sp)
    6508:	d9800615 	stw	r6,24(sp)
    650c:	d8002215 	stw	zero,136(sp)
    6510:	d8800117 	ldw	r2,4(sp)
    6514:	10008916 	blt	r2,zero,673c <_dtoa_r+0x990>
    6518:	d9000517 	ldw	r4,20(sp)
    651c:	00c00384 	movi	r3,14
    6520:	19008616 	blt	r3,r4,673c <_dtoa_r+0x990>
    6524:	200490fa 	slli	r2,r4,3
    6528:	00c00074 	movhi	r3,1
    652c:	d9802217 	ldw	r6,136(sp)
    6530:	18c6f604 	addi	r3,r3,7128
    6534:	1885883a 	add	r2,r3,r2
    6538:	14000017 	ldw	r16,0(r2)
    653c:	14400117 	ldw	r17,4(r2)
    6540:	30016316 	blt	r6,zero,6ad0 <_dtoa_r+0xd24>
    6544:	800d883a 	mov	r6,r16
    6548:	880f883a 	mov	r7,r17
    654c:	9009883a 	mov	r4,r18
    6550:	980b883a 	mov	r5,r19
    6554:	00023340 	call	2334 <__divdf3>
    6558:	180b883a 	mov	r5,r3
    655c:	1009883a 	mov	r4,r2
    6560:	000e96c0 	call	e96c <__fixdfsi>
    6564:	1009883a 	mov	r4,r2
    6568:	102b883a 	mov	r21,r2
    656c:	000e9ec0 	call	e9ec <__floatsidf>
    6570:	800d883a 	mov	r6,r16
    6574:	880f883a 	mov	r7,r17
    6578:	1009883a 	mov	r4,r2
    657c:	180b883a 	mov	r5,r3
    6580:	000d9580 	call	d958 <__muldf3>
    6584:	100d883a 	mov	r6,r2
    6588:	180f883a 	mov	r7,r3
    658c:	9009883a 	mov	r4,r18
    6590:	980b883a 	mov	r5,r19
    6594:	000e0700 	call	e070 <__subdf3>
    6598:	d9c00717 	ldw	r7,28(sp)
    659c:	1009883a 	mov	r4,r2
    65a0:	a8800c04 	addi	r2,r21,48
    65a4:	38800005 	stb	r2,0(r7)
    65a8:	3dc00044 	addi	r23,r7,1
    65ac:	d9c00617 	ldw	r7,24(sp)
    65b0:	01800044 	movi	r6,1
    65b4:	180b883a 	mov	r5,r3
    65b8:	2005883a 	mov	r2,r4
    65bc:	39803826 	beq	r7,r6,66a0 <_dtoa_r+0x8f4>
    65c0:	000d883a 	mov	r6,zero
    65c4:	01d00934 	movhi	r7,16420
    65c8:	000d9580 	call	d958 <__muldf3>
    65cc:	000d883a 	mov	r6,zero
    65d0:	000f883a 	mov	r7,zero
    65d4:	1009883a 	mov	r4,r2
    65d8:	180b883a 	mov	r5,r3
    65dc:	1025883a 	mov	r18,r2
    65e0:	1827883a 	mov	r19,r3
    65e4:	000d7000 	call	d700 <__eqdf2>
    65e8:	103f9a26 	beq	r2,zero,6454 <__alt_data_end+0xff006454>
    65ec:	d9c00617 	ldw	r7,24(sp)
    65f0:	d8c00717 	ldw	r3,28(sp)
    65f4:	b829883a 	mov	r20,r23
    65f8:	38bfffc4 	addi	r2,r7,-1
    65fc:	18ad883a 	add	r22,r3,r2
    6600:	00000a06 	br	662c <_dtoa_r+0x880>
    6604:	000d9580 	call	d958 <__muldf3>
    6608:	000d883a 	mov	r6,zero
    660c:	000f883a 	mov	r7,zero
    6610:	1009883a 	mov	r4,r2
    6614:	180b883a 	mov	r5,r3
    6618:	1025883a 	mov	r18,r2
    661c:	1827883a 	mov	r19,r3
    6620:	b829883a 	mov	r20,r23
    6624:	000d7000 	call	d700 <__eqdf2>
    6628:	103f8a26 	beq	r2,zero,6454 <__alt_data_end+0xff006454>
    662c:	800d883a 	mov	r6,r16
    6630:	880f883a 	mov	r7,r17
    6634:	9009883a 	mov	r4,r18
    6638:	980b883a 	mov	r5,r19
    663c:	00023340 	call	2334 <__divdf3>
    6640:	180b883a 	mov	r5,r3
    6644:	1009883a 	mov	r4,r2
    6648:	000e96c0 	call	e96c <__fixdfsi>
    664c:	1009883a 	mov	r4,r2
    6650:	102b883a 	mov	r21,r2
    6654:	000e9ec0 	call	e9ec <__floatsidf>
    6658:	800d883a 	mov	r6,r16
    665c:	880f883a 	mov	r7,r17
    6660:	1009883a 	mov	r4,r2
    6664:	180b883a 	mov	r5,r3
    6668:	000d9580 	call	d958 <__muldf3>
    666c:	100d883a 	mov	r6,r2
    6670:	180f883a 	mov	r7,r3
    6674:	9009883a 	mov	r4,r18
    6678:	980b883a 	mov	r5,r19
    667c:	000e0700 	call	e070 <__subdf3>
    6680:	aa000c04 	addi	r8,r21,48
    6684:	a2000005 	stb	r8,0(r20)
    6688:	000d883a 	mov	r6,zero
    668c:	01d00934 	movhi	r7,16420
    6690:	1009883a 	mov	r4,r2
    6694:	180b883a 	mov	r5,r3
    6698:	a5c00044 	addi	r23,r20,1
    669c:	b53fd91e 	bne	r22,r20,6604 <__alt_data_end+0xff006604>
    66a0:	100d883a 	mov	r6,r2
    66a4:	180f883a 	mov	r7,r3
    66a8:	1009883a 	mov	r4,r2
    66ac:	180b883a 	mov	r5,r3
    66b0:	000ce540 	call	ce54 <__adddf3>
    66b4:	100d883a 	mov	r6,r2
    66b8:	180f883a 	mov	r7,r3
    66bc:	8009883a 	mov	r4,r16
    66c0:	880b883a 	mov	r5,r17
    66c4:	1027883a 	mov	r19,r2
    66c8:	1825883a 	mov	r18,r3
    66cc:	000d8640 	call	d864 <__ledf2>
    66d0:	10000816 	blt	r2,zero,66f4 <_dtoa_r+0x948>
    66d4:	980d883a 	mov	r6,r19
    66d8:	900f883a 	mov	r7,r18
    66dc:	8009883a 	mov	r4,r16
    66e0:	880b883a 	mov	r5,r17
    66e4:	000d7000 	call	d700 <__eqdf2>
    66e8:	103f5a1e 	bne	r2,zero,6454 <__alt_data_end+0xff006454>
    66ec:	ad40004c 	andi	r21,r21,1
    66f0:	a83f5826 	beq	r21,zero,6454 <__alt_data_end+0xff006454>
    66f4:	bd3fffc3 	ldbu	r20,-1(r23)
    66f8:	b8bfffc4 	addi	r2,r23,-1
    66fc:	1007883a 	mov	r3,r2
    6700:	01400e44 	movi	r5,57
    6704:	d9800717 	ldw	r6,28(sp)
    6708:	00000506 	br	6720 <_dtoa_r+0x974>
    670c:	18ffffc4 	addi	r3,r3,-1
    6710:	11824726 	beq	r2,r6,7030 <_dtoa_r+0x1284>
    6714:	1d000003 	ldbu	r20,0(r3)
    6718:	102f883a 	mov	r23,r2
    671c:	10bfffc4 	addi	r2,r2,-1
    6720:	a1003fcc 	andi	r4,r20,255
    6724:	2100201c 	xori	r4,r4,128
    6728:	213fe004 	addi	r4,r4,-128
    672c:	217ff726 	beq	r4,r5,670c <__alt_data_end+0xff00670c>
    6730:	a2000044 	addi	r8,r20,1
    6734:	12000005 	stb	r8,0(r2)
    6738:	003f4606 	br	6454 <__alt_data_end+0xff006454>
    673c:	d9000b17 	ldw	r4,44(sp)
    6740:	2000c826 	beq	r4,zero,6a64 <_dtoa_r+0xcb8>
    6744:	d9800317 	ldw	r6,12(sp)
    6748:	00c00044 	movi	r3,1
    674c:	1980f90e 	bge	r3,r6,6b34 <_dtoa_r+0xd88>
    6750:	d8800617 	ldw	r2,24(sp)
    6754:	d8c00a17 	ldw	r3,40(sp)
    6758:	157fffc4 	addi	r21,r2,-1
    675c:	1d41f316 	blt	r3,r21,6f2c <_dtoa_r+0x1180>
    6760:	1d6bc83a 	sub	r21,r3,r21
    6764:	d9c00617 	ldw	r7,24(sp)
    6768:	3802aa16 	blt	r7,zero,7214 <_dtoa_r+0x1468>
    676c:	dd000817 	ldw	r20,32(sp)
    6770:	d8800617 	ldw	r2,24(sp)
    6774:	d8c00817 	ldw	r3,32(sp)
    6778:	01400044 	movi	r5,1
    677c:	e009883a 	mov	r4,fp
    6780:	1887883a 	add	r3,r3,r2
    6784:	d8c00815 	stw	r3,32(sp)
    6788:	b0ad883a 	add	r22,r22,r2
    678c:	00090480 	call	9048 <__i2b>
    6790:	1023883a 	mov	r17,r2
    6794:	a0000826 	beq	r20,zero,67b8 <_dtoa_r+0xa0c>
    6798:	0580070e 	bge	zero,r22,67b8 <_dtoa_r+0xa0c>
    679c:	a005883a 	mov	r2,r20
    67a0:	b500b916 	blt	r22,r20,6a88 <_dtoa_r+0xcdc>
    67a4:	d9000817 	ldw	r4,32(sp)
    67a8:	a0a9c83a 	sub	r20,r20,r2
    67ac:	b0adc83a 	sub	r22,r22,r2
    67b0:	2089c83a 	sub	r4,r4,r2
    67b4:	d9000815 	stw	r4,32(sp)
    67b8:	d9800a17 	ldw	r6,40(sp)
    67bc:	0181810e 	bge	zero,r6,6dc4 <_dtoa_r+0x1018>
    67c0:	d9c00b17 	ldw	r7,44(sp)
    67c4:	3800b326 	beq	r7,zero,6a94 <_dtoa_r+0xce8>
    67c8:	a800b226 	beq	r21,zero,6a94 <_dtoa_r+0xce8>
    67cc:	880b883a 	mov	r5,r17
    67d0:	a80d883a 	mov	r6,r21
    67d4:	e009883a 	mov	r4,fp
    67d8:	000927c0 	call	927c <__pow5mult>
    67dc:	d9800917 	ldw	r6,36(sp)
    67e0:	100b883a 	mov	r5,r2
    67e4:	e009883a 	mov	r4,fp
    67e8:	1023883a 	mov	r17,r2
    67ec:	00090840 	call	9084 <__multiply>
    67f0:	1021883a 	mov	r16,r2
    67f4:	d8800a17 	ldw	r2,40(sp)
    67f8:	d9400917 	ldw	r5,36(sp)
    67fc:	e009883a 	mov	r4,fp
    6800:	1545c83a 	sub	r2,r2,r21
    6804:	d8800a15 	stw	r2,40(sp)
    6808:	0008ce40 	call	8ce4 <_Bfree>
    680c:	d8c00a17 	ldw	r3,40(sp)
    6810:	18009f1e 	bne	r3,zero,6a90 <_dtoa_r+0xce4>
    6814:	05c00044 	movi	r23,1
    6818:	e009883a 	mov	r4,fp
    681c:	b80b883a 	mov	r5,r23
    6820:	00090480 	call	9048 <__i2b>
    6824:	d9000d17 	ldw	r4,52(sp)
    6828:	102b883a 	mov	r21,r2
    682c:	2000ce26 	beq	r4,zero,6b68 <_dtoa_r+0xdbc>
    6830:	200d883a 	mov	r6,r4
    6834:	100b883a 	mov	r5,r2
    6838:	e009883a 	mov	r4,fp
    683c:	000927c0 	call	927c <__pow5mult>
    6840:	d9800317 	ldw	r6,12(sp)
    6844:	102b883a 	mov	r21,r2
    6848:	b981810e 	bge	r23,r6,6e50 <_dtoa_r+0x10a4>
    684c:	0027883a 	mov	r19,zero
    6850:	a8800417 	ldw	r2,16(r21)
    6854:	05c00804 	movi	r23,32
    6858:	10800104 	addi	r2,r2,4
    685c:	1085883a 	add	r2,r2,r2
    6860:	1085883a 	add	r2,r2,r2
    6864:	a885883a 	add	r2,r21,r2
    6868:	11000017 	ldw	r4,0(r2)
    686c:	0008f300 	call	8f30 <__hi0bits>
    6870:	b885c83a 	sub	r2,r23,r2
    6874:	1585883a 	add	r2,r2,r22
    6878:	108007cc 	andi	r2,r2,31
    687c:	1000b326 	beq	r2,zero,6b4c <_dtoa_r+0xda0>
    6880:	00c00804 	movi	r3,32
    6884:	1887c83a 	sub	r3,r3,r2
    6888:	01000104 	movi	r4,4
    688c:	20c2cd0e 	bge	r4,r3,73c4 <_dtoa_r+0x1618>
    6890:	00c00704 	movi	r3,28
    6894:	1885c83a 	sub	r2,r3,r2
    6898:	d8c00817 	ldw	r3,32(sp)
    689c:	a0a9883a 	add	r20,r20,r2
    68a0:	b0ad883a 	add	r22,r22,r2
    68a4:	1887883a 	add	r3,r3,r2
    68a8:	d8c00815 	stw	r3,32(sp)
    68ac:	d9800817 	ldw	r6,32(sp)
    68b0:	0180040e 	bge	zero,r6,68c4 <_dtoa_r+0xb18>
    68b4:	800b883a 	mov	r5,r16
    68b8:	e009883a 	mov	r4,fp
    68bc:	00093bc0 	call	93bc <__lshift>
    68c0:	1021883a 	mov	r16,r2
    68c4:	0580050e 	bge	zero,r22,68dc <_dtoa_r+0xb30>
    68c8:	a80b883a 	mov	r5,r21
    68cc:	b00d883a 	mov	r6,r22
    68d0:	e009883a 	mov	r4,fp
    68d4:	00093bc0 	call	93bc <__lshift>
    68d8:	102b883a 	mov	r21,r2
    68dc:	d9c00e17 	ldw	r7,56(sp)
    68e0:	3801211e 	bne	r7,zero,6d68 <_dtoa_r+0xfbc>
    68e4:	d9800617 	ldw	r6,24(sp)
    68e8:	0181380e 	bge	zero,r6,6dcc <_dtoa_r+0x1020>
    68ec:	d8c00b17 	ldw	r3,44(sp)
    68f0:	1800ab1e 	bne	r3,zero,6ba0 <_dtoa_r+0xdf4>
    68f4:	dc800717 	ldw	r18,28(sp)
    68f8:	dcc00617 	ldw	r19,24(sp)
    68fc:	9029883a 	mov	r20,r18
    6900:	00000206 	br	690c <_dtoa_r+0xb60>
    6904:	0008d0c0 	call	8d0c <__multadd>
    6908:	1021883a 	mov	r16,r2
    690c:	a80b883a 	mov	r5,r21
    6910:	8009883a 	mov	r4,r16
    6914:	0005bac0 	call	5bac <quorem>
    6918:	10800c04 	addi	r2,r2,48
    691c:	90800005 	stb	r2,0(r18)
    6920:	94800044 	addi	r18,r18,1
    6924:	9507c83a 	sub	r3,r18,r20
    6928:	000f883a 	mov	r7,zero
    692c:	01800284 	movi	r6,10
    6930:	800b883a 	mov	r5,r16
    6934:	e009883a 	mov	r4,fp
    6938:	1cfff216 	blt	r3,r19,6904 <__alt_data_end+0xff006904>
    693c:	1011883a 	mov	r8,r2
    6940:	d8800617 	ldw	r2,24(sp)
    6944:	0082370e 	bge	zero,r2,7224 <_dtoa_r+0x1478>
    6948:	d9000717 	ldw	r4,28(sp)
    694c:	0025883a 	mov	r18,zero
    6950:	20af883a 	add	r23,r4,r2
    6954:	01800044 	movi	r6,1
    6958:	800b883a 	mov	r5,r16
    695c:	e009883a 	mov	r4,fp
    6960:	da001715 	stw	r8,92(sp)
    6964:	00093bc0 	call	93bc <__lshift>
    6968:	a80b883a 	mov	r5,r21
    696c:	1009883a 	mov	r4,r2
    6970:	d8800915 	stw	r2,36(sp)
    6974:	00095040 	call	9504 <__mcmp>
    6978:	da001717 	ldw	r8,92(sp)
    697c:	0081800e 	bge	zero,r2,6f80 <_dtoa_r+0x11d4>
    6980:	b93fffc3 	ldbu	r4,-1(r23)
    6984:	b8bfffc4 	addi	r2,r23,-1
    6988:	1007883a 	mov	r3,r2
    698c:	01800e44 	movi	r6,57
    6990:	d9c00717 	ldw	r7,28(sp)
    6994:	00000506 	br	69ac <_dtoa_r+0xc00>
    6998:	18ffffc4 	addi	r3,r3,-1
    699c:	11c12326 	beq	r2,r7,6e2c <_dtoa_r+0x1080>
    69a0:	19000003 	ldbu	r4,0(r3)
    69a4:	102f883a 	mov	r23,r2
    69a8:	10bfffc4 	addi	r2,r2,-1
    69ac:	21403fcc 	andi	r5,r4,255
    69b0:	2940201c 	xori	r5,r5,128
    69b4:	297fe004 	addi	r5,r5,-128
    69b8:	29bff726 	beq	r5,r6,6998 <__alt_data_end+0xff006998>
    69bc:	21000044 	addi	r4,r4,1
    69c0:	11000005 	stb	r4,0(r2)
    69c4:	a80b883a 	mov	r5,r21
    69c8:	e009883a 	mov	r4,fp
    69cc:	0008ce40 	call	8ce4 <_Bfree>
    69d0:	883ea026 	beq	r17,zero,6454 <__alt_data_end+0xff006454>
    69d4:	90000426 	beq	r18,zero,69e8 <_dtoa_r+0xc3c>
    69d8:	94400326 	beq	r18,r17,69e8 <_dtoa_r+0xc3c>
    69dc:	900b883a 	mov	r5,r18
    69e0:	e009883a 	mov	r4,fp
    69e4:	0008ce40 	call	8ce4 <_Bfree>
    69e8:	880b883a 	mov	r5,r17
    69ec:	e009883a 	mov	r4,fp
    69f0:	0008ce40 	call	8ce4 <_Bfree>
    69f4:	003e9706 	br	6454 <__alt_data_end+0xff006454>
    69f8:	01800044 	movi	r6,1
    69fc:	d9800e15 	stw	r6,56(sp)
    6a00:	003d9606 	br	605c <__alt_data_end+0xff00605c>
    6a04:	d8800817 	ldw	r2,32(sp)
    6a08:	d8c00517 	ldw	r3,20(sp)
    6a0c:	d8000d15 	stw	zero,52(sp)
    6a10:	10c5c83a 	sub	r2,r2,r3
    6a14:	00c9c83a 	sub	r4,zero,r3
    6a18:	d8800815 	stw	r2,32(sp)
    6a1c:	d9000a15 	stw	r4,40(sp)
    6a20:	003d9706 	br	6080 <__alt_data_end+0xff006080>
    6a24:	05adc83a 	sub	r22,zero,r22
    6a28:	dd800815 	stw	r22,32(sp)
    6a2c:	002d883a 	mov	r22,zero
    6a30:	003d8e06 	br	606c <__alt_data_end+0xff00606c>
    6a34:	d9000517 	ldw	r4,20(sp)
    6a38:	000e9ec0 	call	e9ec <__floatsidf>
    6a3c:	100d883a 	mov	r6,r2
    6a40:	180f883a 	mov	r7,r3
    6a44:	a009883a 	mov	r4,r20
    6a48:	880b883a 	mov	r5,r17
    6a4c:	000d7000 	call	d700 <__eqdf2>
    6a50:	103d7126 	beq	r2,zero,6018 <__alt_data_end+0xff006018>
    6a54:	d9c00517 	ldw	r7,20(sp)
    6a58:	39ffffc4 	addi	r7,r7,-1
    6a5c:	d9c00515 	stw	r7,20(sp)
    6a60:	003d6d06 	br	6018 <__alt_data_end+0xff006018>
    6a64:	dd400a17 	ldw	r21,40(sp)
    6a68:	dd000817 	ldw	r20,32(sp)
    6a6c:	0023883a 	mov	r17,zero
    6a70:	003f4806 	br	6794 <__alt_data_end+0xff006794>
    6a74:	10e3c83a 	sub	r17,r2,r3
    6a78:	9448983a 	sll	r4,r18,r17
    6a7c:	003d3206 	br	5f48 <__alt_data_end+0xff005f48>
    6a80:	d8000e15 	stw	zero,56(sp)
    6a84:	003d7506 	br	605c <__alt_data_end+0xff00605c>
    6a88:	b005883a 	mov	r2,r22
    6a8c:	003f4506 	br	67a4 <__alt_data_end+0xff0067a4>
    6a90:	dc000915 	stw	r16,36(sp)
    6a94:	d9800a17 	ldw	r6,40(sp)
    6a98:	d9400917 	ldw	r5,36(sp)
    6a9c:	e009883a 	mov	r4,fp
    6aa0:	000927c0 	call	927c <__pow5mult>
    6aa4:	1021883a 	mov	r16,r2
    6aa8:	003f5a06 	br	6814 <__alt_data_end+0xff006814>
    6aac:	01c00044 	movi	r7,1
    6ab0:	d9c00b15 	stw	r7,44(sp)
    6ab4:	d8802217 	ldw	r2,136(sp)
    6ab8:	0081280e 	bge	zero,r2,6f5c <_dtoa_r+0x11b0>
    6abc:	100d883a 	mov	r6,r2
    6ac0:	1021883a 	mov	r16,r2
    6ac4:	d8800c15 	stw	r2,48(sp)
    6ac8:	d8800615 	stw	r2,24(sp)
    6acc:	003d8806 	br	60f0 <__alt_data_end+0xff0060f0>
    6ad0:	d8800617 	ldw	r2,24(sp)
    6ad4:	00be9b16 	blt	zero,r2,6544 <__alt_data_end+0xff006544>
    6ad8:	10010f1e 	bne	r2,zero,6f18 <_dtoa_r+0x116c>
    6adc:	880b883a 	mov	r5,r17
    6ae0:	000d883a 	mov	r6,zero
    6ae4:	01d00534 	movhi	r7,16404
    6ae8:	8009883a 	mov	r4,r16
    6aec:	000d9580 	call	d958 <__muldf3>
    6af0:	900d883a 	mov	r6,r18
    6af4:	980f883a 	mov	r7,r19
    6af8:	1009883a 	mov	r4,r2
    6afc:	180b883a 	mov	r5,r3
    6b00:	000d7880 	call	d788 <__gedf2>
    6b04:	002b883a 	mov	r21,zero
    6b08:	0023883a 	mov	r17,zero
    6b0c:	1000bf16 	blt	r2,zero,6e0c <_dtoa_r+0x1060>
    6b10:	d9802217 	ldw	r6,136(sp)
    6b14:	ddc00717 	ldw	r23,28(sp)
    6b18:	018c303a 	nor	r6,zero,r6
    6b1c:	d9800515 	stw	r6,20(sp)
    6b20:	a80b883a 	mov	r5,r21
    6b24:	e009883a 	mov	r4,fp
    6b28:	0008ce40 	call	8ce4 <_Bfree>
    6b2c:	883e4926 	beq	r17,zero,6454 <__alt_data_end+0xff006454>
    6b30:	003fad06 	br	69e8 <__alt_data_end+0xff0069e8>
    6b34:	d9c01117 	ldw	r7,68(sp)
    6b38:	3801bc26 	beq	r7,zero,722c <_dtoa_r+0x1480>
    6b3c:	10810cc4 	addi	r2,r2,1075
    6b40:	dd400a17 	ldw	r21,40(sp)
    6b44:	dd000817 	ldw	r20,32(sp)
    6b48:	003f0a06 	br	6774 <__alt_data_end+0xff006774>
    6b4c:	00800704 	movi	r2,28
    6b50:	d9000817 	ldw	r4,32(sp)
    6b54:	a0a9883a 	add	r20,r20,r2
    6b58:	b0ad883a 	add	r22,r22,r2
    6b5c:	2089883a 	add	r4,r4,r2
    6b60:	d9000815 	stw	r4,32(sp)
    6b64:	003f5106 	br	68ac <__alt_data_end+0xff0068ac>
    6b68:	d8c00317 	ldw	r3,12(sp)
    6b6c:	b8c1fc0e 	bge	r23,r3,7360 <_dtoa_r+0x15b4>
    6b70:	0027883a 	mov	r19,zero
    6b74:	b805883a 	mov	r2,r23
    6b78:	003f3e06 	br	6874 <__alt_data_end+0xff006874>
    6b7c:	880b883a 	mov	r5,r17
    6b80:	e009883a 	mov	r4,fp
    6b84:	000f883a 	mov	r7,zero
    6b88:	01800284 	movi	r6,10
    6b8c:	0008d0c0 	call	8d0c <__multadd>
    6b90:	d9000c17 	ldw	r4,48(sp)
    6b94:	1023883a 	mov	r17,r2
    6b98:	0102040e 	bge	zero,r4,73ac <_dtoa_r+0x1600>
    6b9c:	d9000615 	stw	r4,24(sp)
    6ba0:	0500050e 	bge	zero,r20,6bb8 <_dtoa_r+0xe0c>
    6ba4:	880b883a 	mov	r5,r17
    6ba8:	a00d883a 	mov	r6,r20
    6bac:	e009883a 	mov	r4,fp
    6bb0:	00093bc0 	call	93bc <__lshift>
    6bb4:	1023883a 	mov	r17,r2
    6bb8:	9801241e 	bne	r19,zero,704c <_dtoa_r+0x12a0>
    6bbc:	8829883a 	mov	r20,r17
    6bc0:	d9000617 	ldw	r4,24(sp)
    6bc4:	dcc00717 	ldw	r19,28(sp)
    6bc8:	9480004c 	andi	r18,r18,1
    6bcc:	20bfffc4 	addi	r2,r4,-1
    6bd0:	9885883a 	add	r2,r19,r2
    6bd4:	d8800415 	stw	r2,16(sp)
    6bd8:	dc800615 	stw	r18,24(sp)
    6bdc:	a80b883a 	mov	r5,r21
    6be0:	8009883a 	mov	r4,r16
    6be4:	0005bac0 	call	5bac <quorem>
    6be8:	880b883a 	mov	r5,r17
    6bec:	8009883a 	mov	r4,r16
    6bf0:	102f883a 	mov	r23,r2
    6bf4:	00095040 	call	9504 <__mcmp>
    6bf8:	a80b883a 	mov	r5,r21
    6bfc:	a00d883a 	mov	r6,r20
    6c00:	e009883a 	mov	r4,fp
    6c04:	102d883a 	mov	r22,r2
    6c08:	00095640 	call	9564 <__mdiff>
    6c0c:	1007883a 	mov	r3,r2
    6c10:	10800317 	ldw	r2,12(r2)
    6c14:	bc800c04 	addi	r18,r23,48
    6c18:	180b883a 	mov	r5,r3
    6c1c:	10004e1e 	bne	r2,zero,6d58 <_dtoa_r+0xfac>
    6c20:	8009883a 	mov	r4,r16
    6c24:	d8c01615 	stw	r3,88(sp)
    6c28:	00095040 	call	9504 <__mcmp>
    6c2c:	d8c01617 	ldw	r3,88(sp)
    6c30:	e009883a 	mov	r4,fp
    6c34:	d8801615 	stw	r2,88(sp)
    6c38:	180b883a 	mov	r5,r3
    6c3c:	0008ce40 	call	8ce4 <_Bfree>
    6c40:	d8801617 	ldw	r2,88(sp)
    6c44:	1000041e 	bne	r2,zero,6c58 <_dtoa_r+0xeac>
    6c48:	d9800317 	ldw	r6,12(sp)
    6c4c:	3000021e 	bne	r6,zero,6c58 <_dtoa_r+0xeac>
    6c50:	d8c00617 	ldw	r3,24(sp)
    6c54:	18003726 	beq	r3,zero,6d34 <_dtoa_r+0xf88>
    6c58:	b0002016 	blt	r22,zero,6cdc <_dtoa_r+0xf30>
    6c5c:	b000041e 	bne	r22,zero,6c70 <_dtoa_r+0xec4>
    6c60:	d9000317 	ldw	r4,12(sp)
    6c64:	2000021e 	bne	r4,zero,6c70 <_dtoa_r+0xec4>
    6c68:	d8c00617 	ldw	r3,24(sp)
    6c6c:	18001b26 	beq	r3,zero,6cdc <_dtoa_r+0xf30>
    6c70:	00810716 	blt	zero,r2,7090 <_dtoa_r+0x12e4>
    6c74:	d8c00417 	ldw	r3,16(sp)
    6c78:	9d800044 	addi	r22,r19,1
    6c7c:	9c800005 	stb	r18,0(r19)
    6c80:	b02f883a 	mov	r23,r22
    6c84:	98c10626 	beq	r19,r3,70a0 <_dtoa_r+0x12f4>
    6c88:	800b883a 	mov	r5,r16
    6c8c:	000f883a 	mov	r7,zero
    6c90:	01800284 	movi	r6,10
    6c94:	e009883a 	mov	r4,fp
    6c98:	0008d0c0 	call	8d0c <__multadd>
    6c9c:	1021883a 	mov	r16,r2
    6ca0:	000f883a 	mov	r7,zero
    6ca4:	01800284 	movi	r6,10
    6ca8:	880b883a 	mov	r5,r17
    6cac:	e009883a 	mov	r4,fp
    6cb0:	8d002526 	beq	r17,r20,6d48 <_dtoa_r+0xf9c>
    6cb4:	0008d0c0 	call	8d0c <__multadd>
    6cb8:	a00b883a 	mov	r5,r20
    6cbc:	000f883a 	mov	r7,zero
    6cc0:	01800284 	movi	r6,10
    6cc4:	e009883a 	mov	r4,fp
    6cc8:	1023883a 	mov	r17,r2
    6ccc:	0008d0c0 	call	8d0c <__multadd>
    6cd0:	1029883a 	mov	r20,r2
    6cd4:	b027883a 	mov	r19,r22
    6cd8:	003fc006 	br	6bdc <__alt_data_end+0xff006bdc>
    6cdc:	9011883a 	mov	r8,r18
    6ce0:	00800e0e 	bge	zero,r2,6d1c <_dtoa_r+0xf70>
    6ce4:	800b883a 	mov	r5,r16
    6ce8:	01800044 	movi	r6,1
    6cec:	e009883a 	mov	r4,fp
    6cf0:	da001715 	stw	r8,92(sp)
    6cf4:	00093bc0 	call	93bc <__lshift>
    6cf8:	a80b883a 	mov	r5,r21
    6cfc:	1009883a 	mov	r4,r2
    6d00:	1021883a 	mov	r16,r2
    6d04:	00095040 	call	9504 <__mcmp>
    6d08:	da001717 	ldw	r8,92(sp)
    6d0c:	0081960e 	bge	zero,r2,7368 <_dtoa_r+0x15bc>
    6d10:	00800e44 	movi	r2,57
    6d14:	40817026 	beq	r8,r2,72d8 <_dtoa_r+0x152c>
    6d18:	ba000c44 	addi	r8,r23,49
    6d1c:	8825883a 	mov	r18,r17
    6d20:	9dc00044 	addi	r23,r19,1
    6d24:	9a000005 	stb	r8,0(r19)
    6d28:	a023883a 	mov	r17,r20
    6d2c:	dc000915 	stw	r16,36(sp)
    6d30:	003f2406 	br	69c4 <__alt_data_end+0xff0069c4>
    6d34:	00800e44 	movi	r2,57
    6d38:	9011883a 	mov	r8,r18
    6d3c:	90816626 	beq	r18,r2,72d8 <_dtoa_r+0x152c>
    6d40:	05bff516 	blt	zero,r22,6d18 <__alt_data_end+0xff006d18>
    6d44:	003ff506 	br	6d1c <__alt_data_end+0xff006d1c>
    6d48:	0008d0c0 	call	8d0c <__multadd>
    6d4c:	1023883a 	mov	r17,r2
    6d50:	1029883a 	mov	r20,r2
    6d54:	003fdf06 	br	6cd4 <__alt_data_end+0xff006cd4>
    6d58:	e009883a 	mov	r4,fp
    6d5c:	0008ce40 	call	8ce4 <_Bfree>
    6d60:	00800044 	movi	r2,1
    6d64:	003fbc06 	br	6c58 <__alt_data_end+0xff006c58>
    6d68:	a80b883a 	mov	r5,r21
    6d6c:	8009883a 	mov	r4,r16
    6d70:	00095040 	call	9504 <__mcmp>
    6d74:	103edb0e 	bge	r2,zero,68e4 <__alt_data_end+0xff0068e4>
    6d78:	800b883a 	mov	r5,r16
    6d7c:	000f883a 	mov	r7,zero
    6d80:	01800284 	movi	r6,10
    6d84:	e009883a 	mov	r4,fp
    6d88:	0008d0c0 	call	8d0c <__multadd>
    6d8c:	1021883a 	mov	r16,r2
    6d90:	d8800517 	ldw	r2,20(sp)
    6d94:	d8c00b17 	ldw	r3,44(sp)
    6d98:	10bfffc4 	addi	r2,r2,-1
    6d9c:	d8800515 	stw	r2,20(sp)
    6da0:	183f761e 	bne	r3,zero,6b7c <__alt_data_end+0xff006b7c>
    6da4:	d9000c17 	ldw	r4,48(sp)
    6da8:	0101730e 	bge	zero,r4,7378 <_dtoa_r+0x15cc>
    6dac:	d9000615 	stw	r4,24(sp)
    6db0:	003ed006 	br	68f4 <__alt_data_end+0xff0068f4>
    6db4:	00800084 	movi	r2,2
    6db8:	3081861e 	bne	r6,r2,73d4 <_dtoa_r+0x1628>
    6dbc:	d8000b15 	stw	zero,44(sp)
    6dc0:	003f3c06 	br	6ab4 <__alt_data_end+0xff006ab4>
    6dc4:	dc000917 	ldw	r16,36(sp)
    6dc8:	003e9206 	br	6814 <__alt_data_end+0xff006814>
    6dcc:	d9c00317 	ldw	r7,12(sp)
    6dd0:	00800084 	movi	r2,2
    6dd4:	11fec50e 	bge	r2,r7,68ec <__alt_data_end+0xff0068ec>
    6dd8:	d9000617 	ldw	r4,24(sp)
    6ddc:	20013c1e 	bne	r4,zero,72d0 <_dtoa_r+0x1524>
    6de0:	a80b883a 	mov	r5,r21
    6de4:	000f883a 	mov	r7,zero
    6de8:	01800144 	movi	r6,5
    6dec:	e009883a 	mov	r4,fp
    6df0:	0008d0c0 	call	8d0c <__multadd>
    6df4:	100b883a 	mov	r5,r2
    6df8:	8009883a 	mov	r4,r16
    6dfc:	102b883a 	mov	r21,r2
    6e00:	00095040 	call	9504 <__mcmp>
    6e04:	dc000915 	stw	r16,36(sp)
    6e08:	00bf410e 	bge	zero,r2,6b10 <__alt_data_end+0xff006b10>
    6e0c:	d9c00717 	ldw	r7,28(sp)
    6e10:	00800c44 	movi	r2,49
    6e14:	38800005 	stb	r2,0(r7)
    6e18:	d8800517 	ldw	r2,20(sp)
    6e1c:	3dc00044 	addi	r23,r7,1
    6e20:	10800044 	addi	r2,r2,1
    6e24:	d8800515 	stw	r2,20(sp)
    6e28:	003f3d06 	br	6b20 <__alt_data_end+0xff006b20>
    6e2c:	d9800517 	ldw	r6,20(sp)
    6e30:	d9c00717 	ldw	r7,28(sp)
    6e34:	00800c44 	movi	r2,49
    6e38:	31800044 	addi	r6,r6,1
    6e3c:	d9800515 	stw	r6,20(sp)
    6e40:	38800005 	stb	r2,0(r7)
    6e44:	003edf06 	br	69c4 <__alt_data_end+0xff0069c4>
    6e48:	d8000b15 	stw	zero,44(sp)
    6e4c:	003c9f06 	br	60cc <__alt_data_end+0xff0060cc>
    6e50:	903e7e1e 	bne	r18,zero,684c <__alt_data_end+0xff00684c>
    6e54:	00800434 	movhi	r2,16
    6e58:	10bfffc4 	addi	r2,r2,-1
    6e5c:	9884703a 	and	r2,r19,r2
    6e60:	1000ea1e 	bne	r2,zero,720c <_dtoa_r+0x1460>
    6e64:	9cdffc2c 	andhi	r19,r19,32752
    6e68:	9800e826 	beq	r19,zero,720c <_dtoa_r+0x1460>
    6e6c:	d9c00817 	ldw	r7,32(sp)
    6e70:	b5800044 	addi	r22,r22,1
    6e74:	04c00044 	movi	r19,1
    6e78:	39c00044 	addi	r7,r7,1
    6e7c:	d9c00815 	stw	r7,32(sp)
    6e80:	d8800d17 	ldw	r2,52(sp)
    6e84:	103e721e 	bne	r2,zero,6850 <__alt_data_end+0xff006850>
    6e88:	00800044 	movi	r2,1
    6e8c:	003e7906 	br	6874 <__alt_data_end+0xff006874>
    6e90:	8009883a 	mov	r4,r16
    6e94:	000e9ec0 	call	e9ec <__floatsidf>
    6e98:	d9800f17 	ldw	r6,60(sp)
    6e9c:	d9c01017 	ldw	r7,64(sp)
    6ea0:	1009883a 	mov	r4,r2
    6ea4:	180b883a 	mov	r5,r3
    6ea8:	000d9580 	call	d958 <__muldf3>
    6eac:	000d883a 	mov	r6,zero
    6eb0:	01d00734 	movhi	r7,16412
    6eb4:	1009883a 	mov	r4,r2
    6eb8:	180b883a 	mov	r5,r3
    6ebc:	000ce540 	call	ce54 <__adddf3>
    6ec0:	047f3034 	movhi	r17,64704
    6ec4:	1021883a 	mov	r16,r2
    6ec8:	1c63883a 	add	r17,r3,r17
    6ecc:	d9000f17 	ldw	r4,60(sp)
    6ed0:	d9401017 	ldw	r5,64(sp)
    6ed4:	000d883a 	mov	r6,zero
    6ed8:	01d00534 	movhi	r7,16404
    6edc:	000e0700 	call	e070 <__subdf3>
    6ee0:	800d883a 	mov	r6,r16
    6ee4:	880f883a 	mov	r7,r17
    6ee8:	1009883a 	mov	r4,r2
    6eec:	180b883a 	mov	r5,r3
    6ef0:	102b883a 	mov	r21,r2
    6ef4:	1829883a 	mov	r20,r3
    6ef8:	000d7880 	call	d788 <__gedf2>
    6efc:	00806c16 	blt	zero,r2,70b0 <_dtoa_r+0x1304>
    6f00:	89e0003c 	xorhi	r7,r17,32768
    6f04:	800d883a 	mov	r6,r16
    6f08:	a809883a 	mov	r4,r21
    6f0c:	a00b883a 	mov	r5,r20
    6f10:	000d8640 	call	d864 <__ledf2>
    6f14:	103d7e0e 	bge	r2,zero,6510 <__alt_data_end+0xff006510>
    6f18:	002b883a 	mov	r21,zero
    6f1c:	0023883a 	mov	r17,zero
    6f20:	003efb06 	br	6b10 <__alt_data_end+0xff006b10>
    6f24:	d8800717 	ldw	r2,28(sp)
    6f28:	003bd006 	br	5e6c <__alt_data_end+0xff005e6c>
    6f2c:	d9000a17 	ldw	r4,40(sp)
    6f30:	d9800d17 	ldw	r6,52(sp)
    6f34:	dd400a15 	stw	r21,40(sp)
    6f38:	a905c83a 	sub	r2,r21,r4
    6f3c:	308d883a 	add	r6,r6,r2
    6f40:	d9800d15 	stw	r6,52(sp)
    6f44:	002b883a 	mov	r21,zero
    6f48:	003e0606 	br	6764 <__alt_data_end+0xff006764>
    6f4c:	9023883a 	mov	r17,r18
    6f50:	9829883a 	mov	r20,r19
    6f54:	04000084 	movi	r16,2
    6f58:	003c9206 	br	61a4 <__alt_data_end+0xff0061a4>
    6f5c:	04000044 	movi	r16,1
    6f60:	dc000c15 	stw	r16,48(sp)
    6f64:	dc000615 	stw	r16,24(sp)
    6f68:	dc002215 	stw	r16,136(sp)
    6f6c:	e0001115 	stw	zero,68(fp)
    6f70:	000b883a 	mov	r5,zero
    6f74:	003c6906 	br	611c <__alt_data_end+0xff00611c>
    6f78:	3021883a 	mov	r16,r6
    6f7c:	003ffb06 	br	6f6c <__alt_data_end+0xff006f6c>
    6f80:	1000021e 	bne	r2,zero,6f8c <_dtoa_r+0x11e0>
    6f84:	4200004c 	andi	r8,r8,1
    6f88:	403e7d1e 	bne	r8,zero,6980 <__alt_data_end+0xff006980>
    6f8c:	01000c04 	movi	r4,48
    6f90:	00000106 	br	6f98 <_dtoa_r+0x11ec>
    6f94:	102f883a 	mov	r23,r2
    6f98:	b8bfffc4 	addi	r2,r23,-1
    6f9c:	10c00007 	ldb	r3,0(r2)
    6fa0:	193ffc26 	beq	r3,r4,6f94 <__alt_data_end+0xff006f94>
    6fa4:	003e8706 	br	69c4 <__alt_data_end+0xff0069c4>
    6fa8:	d8800517 	ldw	r2,20(sp)
    6fac:	00a3c83a 	sub	r17,zero,r2
    6fb0:	8800a426 	beq	r17,zero,7244 <_dtoa_r+0x1498>
    6fb4:	888003cc 	andi	r2,r17,15
    6fb8:	100490fa 	slli	r2,r2,3
    6fbc:	00c00074 	movhi	r3,1
    6fc0:	18c6f604 	addi	r3,r3,7128
    6fc4:	1885883a 	add	r2,r3,r2
    6fc8:	11800017 	ldw	r6,0(r2)
    6fcc:	11c00117 	ldw	r7,4(r2)
    6fd0:	9009883a 	mov	r4,r18
    6fd4:	980b883a 	mov	r5,r19
    6fd8:	8823d13a 	srai	r17,r17,4
    6fdc:	000d9580 	call	d958 <__muldf3>
    6fe0:	d8800f15 	stw	r2,60(sp)
    6fe4:	d8c01015 	stw	r3,64(sp)
    6fe8:	8800e826 	beq	r17,zero,738c <_dtoa_r+0x15e0>
    6fec:	05000074 	movhi	r20,1
    6ff0:	a506ec04 	addi	r20,r20,7088
    6ff4:	04000084 	movi	r16,2
    6ff8:	8980004c 	andi	r6,r17,1
    6ffc:	1009883a 	mov	r4,r2
    7000:	8823d07a 	srai	r17,r17,1
    7004:	180b883a 	mov	r5,r3
    7008:	30000426 	beq	r6,zero,701c <_dtoa_r+0x1270>
    700c:	a1800017 	ldw	r6,0(r20)
    7010:	a1c00117 	ldw	r7,4(r20)
    7014:	84000044 	addi	r16,r16,1
    7018:	000d9580 	call	d958 <__muldf3>
    701c:	a5000204 	addi	r20,r20,8
    7020:	883ff51e 	bne	r17,zero,6ff8 <__alt_data_end+0xff006ff8>
    7024:	d8800f15 	stw	r2,60(sp)
    7028:	d8c01015 	stw	r3,64(sp)
    702c:	003c7606 	br	6208 <__alt_data_end+0xff006208>
    7030:	00c00c04 	movi	r3,48
    7034:	10c00005 	stb	r3,0(r2)
    7038:	d8c00517 	ldw	r3,20(sp)
    703c:	bd3fffc3 	ldbu	r20,-1(r23)
    7040:	18c00044 	addi	r3,r3,1
    7044:	d8c00515 	stw	r3,20(sp)
    7048:	003db906 	br	6730 <__alt_data_end+0xff006730>
    704c:	89400117 	ldw	r5,4(r17)
    7050:	e009883a 	mov	r4,fp
    7054:	0008c3c0 	call	8c3c <_Balloc>
    7058:	89800417 	ldw	r6,16(r17)
    705c:	89400304 	addi	r5,r17,12
    7060:	11000304 	addi	r4,r2,12
    7064:	31800084 	addi	r6,r6,2
    7068:	318d883a 	add	r6,r6,r6
    706c:	318d883a 	add	r6,r6,r6
    7070:	1027883a 	mov	r19,r2
    7074:	00088700 	call	8870 <memcpy>
    7078:	01800044 	movi	r6,1
    707c:	980b883a 	mov	r5,r19
    7080:	e009883a 	mov	r4,fp
    7084:	00093bc0 	call	93bc <__lshift>
    7088:	1029883a 	mov	r20,r2
    708c:	003ecc06 	br	6bc0 <__alt_data_end+0xff006bc0>
    7090:	00800e44 	movi	r2,57
    7094:	90809026 	beq	r18,r2,72d8 <_dtoa_r+0x152c>
    7098:	92000044 	addi	r8,r18,1
    709c:	003f1f06 	br	6d1c <__alt_data_end+0xff006d1c>
    70a0:	9011883a 	mov	r8,r18
    70a4:	8825883a 	mov	r18,r17
    70a8:	a023883a 	mov	r17,r20
    70ac:	003e2906 	br	6954 <__alt_data_end+0xff006954>
    70b0:	002b883a 	mov	r21,zero
    70b4:	0023883a 	mov	r17,zero
    70b8:	003f5406 	br	6e0c <__alt_data_end+0xff006e0c>
    70bc:	61bfffc4 	addi	r6,r12,-1
    70c0:	300490fa 	slli	r2,r6,3
    70c4:	00c00074 	movhi	r3,1
    70c8:	18c6f604 	addi	r3,r3,7128
    70cc:	1885883a 	add	r2,r3,r2
    70d0:	11000017 	ldw	r4,0(r2)
    70d4:	11400117 	ldw	r5,4(r2)
    70d8:	d8800717 	ldw	r2,28(sp)
    70dc:	880f883a 	mov	r7,r17
    70e0:	d9801215 	stw	r6,72(sp)
    70e4:	800d883a 	mov	r6,r16
    70e8:	db001615 	stw	r12,88(sp)
    70ec:	15c00044 	addi	r23,r2,1
    70f0:	000d9580 	call	d958 <__muldf3>
    70f4:	d9401017 	ldw	r5,64(sp)
    70f8:	d9000f17 	ldw	r4,60(sp)
    70fc:	d8c01515 	stw	r3,84(sp)
    7100:	d8801415 	stw	r2,80(sp)
    7104:	000e96c0 	call	e96c <__fixdfsi>
    7108:	1009883a 	mov	r4,r2
    710c:	1021883a 	mov	r16,r2
    7110:	000e9ec0 	call	e9ec <__floatsidf>
    7114:	d9000f17 	ldw	r4,60(sp)
    7118:	d9401017 	ldw	r5,64(sp)
    711c:	100d883a 	mov	r6,r2
    7120:	180f883a 	mov	r7,r3
    7124:	000e0700 	call	e070 <__subdf3>
    7128:	1829883a 	mov	r20,r3
    712c:	d8c00717 	ldw	r3,28(sp)
    7130:	84000c04 	addi	r16,r16,48
    7134:	1023883a 	mov	r17,r2
    7138:	1c000005 	stb	r16,0(r3)
    713c:	db001617 	ldw	r12,88(sp)
    7140:	00800044 	movi	r2,1
    7144:	60802226 	beq	r12,r2,71d0 <_dtoa_r+0x1424>
    7148:	d9c00717 	ldw	r7,28(sp)
    714c:	8805883a 	mov	r2,r17
    7150:	b82b883a 	mov	r21,r23
    7154:	3b19883a 	add	r12,r7,r12
    7158:	6023883a 	mov	r17,r12
    715c:	a007883a 	mov	r3,r20
    7160:	dc800f15 	stw	r18,60(sp)
    7164:	000d883a 	mov	r6,zero
    7168:	01d00934 	movhi	r7,16420
    716c:	1009883a 	mov	r4,r2
    7170:	180b883a 	mov	r5,r3
    7174:	000d9580 	call	d958 <__muldf3>
    7178:	180b883a 	mov	r5,r3
    717c:	1009883a 	mov	r4,r2
    7180:	1829883a 	mov	r20,r3
    7184:	1025883a 	mov	r18,r2
    7188:	000e96c0 	call	e96c <__fixdfsi>
    718c:	1009883a 	mov	r4,r2
    7190:	1021883a 	mov	r16,r2
    7194:	000e9ec0 	call	e9ec <__floatsidf>
    7198:	100d883a 	mov	r6,r2
    719c:	180f883a 	mov	r7,r3
    71a0:	9009883a 	mov	r4,r18
    71a4:	a00b883a 	mov	r5,r20
    71a8:	84000c04 	addi	r16,r16,48
    71ac:	000e0700 	call	e070 <__subdf3>
    71b0:	ad400044 	addi	r21,r21,1
    71b4:	ac3fffc5 	stb	r16,-1(r21)
    71b8:	ac7fea1e 	bne	r21,r17,7164 <__alt_data_end+0xff007164>
    71bc:	1023883a 	mov	r17,r2
    71c0:	d8801217 	ldw	r2,72(sp)
    71c4:	dc800f17 	ldw	r18,60(sp)
    71c8:	1829883a 	mov	r20,r3
    71cc:	b8af883a 	add	r23,r23,r2
    71d0:	d9001417 	ldw	r4,80(sp)
    71d4:	d9401517 	ldw	r5,84(sp)
    71d8:	000d883a 	mov	r6,zero
    71dc:	01cff834 	movhi	r7,16352
    71e0:	000ce540 	call	ce54 <__adddf3>
    71e4:	880d883a 	mov	r6,r17
    71e8:	a00f883a 	mov	r7,r20
    71ec:	1009883a 	mov	r4,r2
    71f0:	180b883a 	mov	r5,r3
    71f4:	000d8640 	call	d864 <__ledf2>
    71f8:	10003e0e 	bge	r2,zero,72f4 <_dtoa_r+0x1548>
    71fc:	d9001317 	ldw	r4,76(sp)
    7200:	bd3fffc3 	ldbu	r20,-1(r23)
    7204:	d9000515 	stw	r4,20(sp)
    7208:	003d3b06 	br	66f8 <__alt_data_end+0xff0066f8>
    720c:	0027883a 	mov	r19,zero
    7210:	003f1b06 	br	6e80 <__alt_data_end+0xff006e80>
    7214:	d8800817 	ldw	r2,32(sp)
    7218:	11e9c83a 	sub	r20,r2,r7
    721c:	0005883a 	mov	r2,zero
    7220:	003d5406 	br	6774 <__alt_data_end+0xff006774>
    7224:	00800044 	movi	r2,1
    7228:	003dc706 	br	6948 <__alt_data_end+0xff006948>
    722c:	d8c00217 	ldw	r3,8(sp)
    7230:	00800d84 	movi	r2,54
    7234:	dd400a17 	ldw	r21,40(sp)
    7238:	10c5c83a 	sub	r2,r2,r3
    723c:	dd000817 	ldw	r20,32(sp)
    7240:	003d4c06 	br	6774 <__alt_data_end+0xff006774>
    7244:	dc800f15 	stw	r18,60(sp)
    7248:	dcc01015 	stw	r19,64(sp)
    724c:	04000084 	movi	r16,2
    7250:	003bed06 	br	6208 <__alt_data_end+0xff006208>
    7254:	d9000617 	ldw	r4,24(sp)
    7258:	203f0d26 	beq	r4,zero,6e90 <__alt_data_end+0xff006e90>
    725c:	d9800c17 	ldw	r6,48(sp)
    7260:	01bcab0e 	bge	zero,r6,6510 <__alt_data_end+0xff006510>
    7264:	d9401017 	ldw	r5,64(sp)
    7268:	d9000f17 	ldw	r4,60(sp)
    726c:	000d883a 	mov	r6,zero
    7270:	01d00934 	movhi	r7,16420
    7274:	000d9580 	call	d958 <__muldf3>
    7278:	81000044 	addi	r4,r16,1
    727c:	d8800f15 	stw	r2,60(sp)
    7280:	d8c01015 	stw	r3,64(sp)
    7284:	000e9ec0 	call	e9ec <__floatsidf>
    7288:	d9800f17 	ldw	r6,60(sp)
    728c:	d9c01017 	ldw	r7,64(sp)
    7290:	1009883a 	mov	r4,r2
    7294:	180b883a 	mov	r5,r3
    7298:	000d9580 	call	d958 <__muldf3>
    729c:	01d00734 	movhi	r7,16412
    72a0:	000d883a 	mov	r6,zero
    72a4:	1009883a 	mov	r4,r2
    72a8:	180b883a 	mov	r5,r3
    72ac:	000ce540 	call	ce54 <__adddf3>
    72b0:	d9c00517 	ldw	r7,20(sp)
    72b4:	047f3034 	movhi	r17,64704
    72b8:	1021883a 	mov	r16,r2
    72bc:	39ffffc4 	addi	r7,r7,-1
    72c0:	d9c01315 	stw	r7,76(sp)
    72c4:	1c63883a 	add	r17,r3,r17
    72c8:	db000c17 	ldw	r12,48(sp)
    72cc:	003bea06 	br	6278 <__alt_data_end+0xff006278>
    72d0:	dc000915 	stw	r16,36(sp)
    72d4:	003e0e06 	br	6b10 <__alt_data_end+0xff006b10>
    72d8:	01000e44 	movi	r4,57
    72dc:	8825883a 	mov	r18,r17
    72e0:	9dc00044 	addi	r23,r19,1
    72e4:	99000005 	stb	r4,0(r19)
    72e8:	a023883a 	mov	r17,r20
    72ec:	dc000915 	stw	r16,36(sp)
    72f0:	003da406 	br	6984 <__alt_data_end+0xff006984>
    72f4:	d9801417 	ldw	r6,80(sp)
    72f8:	d9c01517 	ldw	r7,84(sp)
    72fc:	0009883a 	mov	r4,zero
    7300:	014ff834 	movhi	r5,16352
    7304:	000e0700 	call	e070 <__subdf3>
    7308:	880d883a 	mov	r6,r17
    730c:	a00f883a 	mov	r7,r20
    7310:	1009883a 	mov	r4,r2
    7314:	180b883a 	mov	r5,r3
    7318:	000d7880 	call	d788 <__gedf2>
    731c:	00bc7c0e 	bge	zero,r2,6510 <__alt_data_end+0xff006510>
    7320:	01000c04 	movi	r4,48
    7324:	00000106 	br	732c <_dtoa_r+0x1580>
    7328:	102f883a 	mov	r23,r2
    732c:	b8bfffc4 	addi	r2,r23,-1
    7330:	10c00007 	ldb	r3,0(r2)
    7334:	193ffc26 	beq	r3,r4,7328 <__alt_data_end+0xff007328>
    7338:	d9801317 	ldw	r6,76(sp)
    733c:	d9800515 	stw	r6,20(sp)
    7340:	003c4406 	br	6454 <__alt_data_end+0xff006454>
    7344:	d9801317 	ldw	r6,76(sp)
    7348:	d9800515 	stw	r6,20(sp)
    734c:	003cea06 	br	66f8 <__alt_data_end+0xff0066f8>
    7350:	dd800f17 	ldw	r22,60(sp)
    7354:	dcc01017 	ldw	r19,64(sp)
    7358:	dc801217 	ldw	r18,72(sp)
    735c:	003c6c06 	br	6510 <__alt_data_end+0xff006510>
    7360:	903e031e 	bne	r18,zero,6b70 <__alt_data_end+0xff006b70>
    7364:	003ebb06 	br	6e54 <__alt_data_end+0xff006e54>
    7368:	103e6c1e 	bne	r2,zero,6d1c <__alt_data_end+0xff006d1c>
    736c:	4080004c 	andi	r2,r8,1
    7370:	103e6a26 	beq	r2,zero,6d1c <__alt_data_end+0xff006d1c>
    7374:	003e6606 	br	6d10 <__alt_data_end+0xff006d10>
    7378:	d8c00317 	ldw	r3,12(sp)
    737c:	00800084 	movi	r2,2
    7380:	10c02916 	blt	r2,r3,7428 <_dtoa_r+0x167c>
    7384:	d9000c17 	ldw	r4,48(sp)
    7388:	003e8806 	br	6dac <__alt_data_end+0xff006dac>
    738c:	04000084 	movi	r16,2
    7390:	003b9d06 	br	6208 <__alt_data_end+0xff006208>
    7394:	d9001317 	ldw	r4,76(sp)
    7398:	d9000515 	stw	r4,20(sp)
    739c:	003cd606 	br	66f8 <__alt_data_end+0xff0066f8>
    73a0:	d8801317 	ldw	r2,76(sp)
    73a4:	d8800515 	stw	r2,20(sp)
    73a8:	003c2a06 	br	6454 <__alt_data_end+0xff006454>
    73ac:	d9800317 	ldw	r6,12(sp)
    73b0:	00800084 	movi	r2,2
    73b4:	11801516 	blt	r2,r6,740c <_dtoa_r+0x1660>
    73b8:	d9c00c17 	ldw	r7,48(sp)
    73bc:	d9c00615 	stw	r7,24(sp)
    73c0:	003df706 	br	6ba0 <__alt_data_end+0xff006ba0>
    73c4:	193d3926 	beq	r3,r4,68ac <__alt_data_end+0xff0068ac>
    73c8:	00c00f04 	movi	r3,60
    73cc:	1885c83a 	sub	r2,r3,r2
    73d0:	003ddf06 	br	6b50 <__alt_data_end+0xff006b50>
    73d4:	e009883a 	mov	r4,fp
    73d8:	e0001115 	stw	zero,68(fp)
    73dc:	000b883a 	mov	r5,zero
    73e0:	0008c3c0 	call	8c3c <_Balloc>
    73e4:	d8800715 	stw	r2,28(sp)
    73e8:	d8c00717 	ldw	r3,28(sp)
    73ec:	00bfffc4 	movi	r2,-1
    73f0:	01000044 	movi	r4,1
    73f4:	d8800c15 	stw	r2,48(sp)
    73f8:	e0c01015 	stw	r3,64(fp)
    73fc:	d9000b15 	stw	r4,44(sp)
    7400:	d8800615 	stw	r2,24(sp)
    7404:	d8002215 	stw	zero,136(sp)
    7408:	003c4106 	br	6510 <__alt_data_end+0xff006510>
    740c:	d8c00c17 	ldw	r3,48(sp)
    7410:	d8c00615 	stw	r3,24(sp)
    7414:	003e7006 	br	6dd8 <__alt_data_end+0xff006dd8>
    7418:	04400044 	movi	r17,1
    741c:	003b2006 	br	60a0 <__alt_data_end+0xff0060a0>
    7420:	000b883a 	mov	r5,zero
    7424:	003b3d06 	br	611c <__alt_data_end+0xff00611c>
    7428:	d8800c17 	ldw	r2,48(sp)
    742c:	d8800615 	stw	r2,24(sp)
    7430:	003e6906 	br	6dd8 <__alt_data_end+0xff006dd8>

00007434 <__sflush_r>:
    7434:	2880030b 	ldhu	r2,12(r5)
    7438:	defffb04 	addi	sp,sp,-20
    743c:	dcc00315 	stw	r19,12(sp)
    7440:	dc400115 	stw	r17,4(sp)
    7444:	dfc00415 	stw	ra,16(sp)
    7448:	dc800215 	stw	r18,8(sp)
    744c:	dc000015 	stw	r16,0(sp)
    7450:	10c0020c 	andi	r3,r2,8
    7454:	2823883a 	mov	r17,r5
    7458:	2027883a 	mov	r19,r4
    745c:	1800311e 	bne	r3,zero,7524 <__sflush_r+0xf0>
    7460:	28c00117 	ldw	r3,4(r5)
    7464:	10820014 	ori	r2,r2,2048
    7468:	2880030d 	sth	r2,12(r5)
    746c:	00c04b0e 	bge	zero,r3,759c <__sflush_r+0x168>
    7470:	8a000a17 	ldw	r8,40(r17)
    7474:	40002326 	beq	r8,zero,7504 <__sflush_r+0xd0>
    7478:	9c000017 	ldw	r16,0(r19)
    747c:	10c4000c 	andi	r3,r2,4096
    7480:	98000015 	stw	zero,0(r19)
    7484:	18004826 	beq	r3,zero,75a8 <__sflush_r+0x174>
    7488:	89801417 	ldw	r6,80(r17)
    748c:	10c0010c 	andi	r3,r2,4
    7490:	18000626 	beq	r3,zero,74ac <__sflush_r+0x78>
    7494:	88c00117 	ldw	r3,4(r17)
    7498:	88800c17 	ldw	r2,48(r17)
    749c:	30cdc83a 	sub	r6,r6,r3
    74a0:	10000226 	beq	r2,zero,74ac <__sflush_r+0x78>
    74a4:	88800f17 	ldw	r2,60(r17)
    74a8:	308dc83a 	sub	r6,r6,r2
    74ac:	89400717 	ldw	r5,28(r17)
    74b0:	000f883a 	mov	r7,zero
    74b4:	9809883a 	mov	r4,r19
    74b8:	403ee83a 	callr	r8
    74bc:	00ffffc4 	movi	r3,-1
    74c0:	10c04426 	beq	r2,r3,75d4 <__sflush_r+0x1a0>
    74c4:	88c0030b 	ldhu	r3,12(r17)
    74c8:	89000417 	ldw	r4,16(r17)
    74cc:	88000115 	stw	zero,4(r17)
    74d0:	197dffcc 	andi	r5,r3,63487
    74d4:	8940030d 	sth	r5,12(r17)
    74d8:	89000015 	stw	r4,0(r17)
    74dc:	18c4000c 	andi	r3,r3,4096
    74e0:	18002c1e 	bne	r3,zero,7594 <__sflush_r+0x160>
    74e4:	89400c17 	ldw	r5,48(r17)
    74e8:	9c000015 	stw	r16,0(r19)
    74ec:	28000526 	beq	r5,zero,7504 <__sflush_r+0xd0>
    74f0:	88801004 	addi	r2,r17,64
    74f4:	28800226 	beq	r5,r2,7500 <__sflush_r+0xcc>
    74f8:	9809883a 	mov	r4,r19
    74fc:	0007ba00 	call	7ba0 <_free_r>
    7500:	88000c15 	stw	zero,48(r17)
    7504:	0005883a 	mov	r2,zero
    7508:	dfc00417 	ldw	ra,16(sp)
    750c:	dcc00317 	ldw	r19,12(sp)
    7510:	dc800217 	ldw	r18,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00504 	addi	sp,sp,20
    7520:	f800283a 	ret
    7524:	2c800417 	ldw	r18,16(r5)
    7528:	903ff626 	beq	r18,zero,7504 <__alt_data_end+0xff007504>
    752c:	2c000017 	ldw	r16,0(r5)
    7530:	108000cc 	andi	r2,r2,3
    7534:	2c800015 	stw	r18,0(r5)
    7538:	84a1c83a 	sub	r16,r16,r18
    753c:	1000131e 	bne	r2,zero,758c <__sflush_r+0x158>
    7540:	28800517 	ldw	r2,20(r5)
    7544:	88800215 	stw	r2,8(r17)
    7548:	04000316 	blt	zero,r16,7558 <__sflush_r+0x124>
    754c:	003fed06 	br	7504 <__alt_data_end+0xff007504>
    7550:	90a5883a 	add	r18,r18,r2
    7554:	043feb0e 	bge	zero,r16,7504 <__alt_data_end+0xff007504>
    7558:	88800917 	ldw	r2,36(r17)
    755c:	89400717 	ldw	r5,28(r17)
    7560:	800f883a 	mov	r7,r16
    7564:	900d883a 	mov	r6,r18
    7568:	9809883a 	mov	r4,r19
    756c:	103ee83a 	callr	r2
    7570:	80a1c83a 	sub	r16,r16,r2
    7574:	00bff616 	blt	zero,r2,7550 <__alt_data_end+0xff007550>
    7578:	88c0030b 	ldhu	r3,12(r17)
    757c:	00bfffc4 	movi	r2,-1
    7580:	18c01014 	ori	r3,r3,64
    7584:	88c0030d 	sth	r3,12(r17)
    7588:	003fdf06 	br	7508 <__alt_data_end+0xff007508>
    758c:	0005883a 	mov	r2,zero
    7590:	003fec06 	br	7544 <__alt_data_end+0xff007544>
    7594:	88801415 	stw	r2,80(r17)
    7598:	003fd206 	br	74e4 <__alt_data_end+0xff0074e4>
    759c:	28c00f17 	ldw	r3,60(r5)
    75a0:	00ffb316 	blt	zero,r3,7470 <__alt_data_end+0xff007470>
    75a4:	003fd706 	br	7504 <__alt_data_end+0xff007504>
    75a8:	89400717 	ldw	r5,28(r17)
    75ac:	000d883a 	mov	r6,zero
    75b0:	01c00044 	movi	r7,1
    75b4:	9809883a 	mov	r4,r19
    75b8:	403ee83a 	callr	r8
    75bc:	100d883a 	mov	r6,r2
    75c0:	00bfffc4 	movi	r2,-1
    75c4:	30801426 	beq	r6,r2,7618 <__sflush_r+0x1e4>
    75c8:	8880030b 	ldhu	r2,12(r17)
    75cc:	8a000a17 	ldw	r8,40(r17)
    75d0:	003fae06 	br	748c <__alt_data_end+0xff00748c>
    75d4:	98c00017 	ldw	r3,0(r19)
    75d8:	183fba26 	beq	r3,zero,74c4 <__alt_data_end+0xff0074c4>
    75dc:	01000744 	movi	r4,29
    75e0:	19000626 	beq	r3,r4,75fc <__sflush_r+0x1c8>
    75e4:	01000584 	movi	r4,22
    75e8:	19000426 	beq	r3,r4,75fc <__sflush_r+0x1c8>
    75ec:	88c0030b 	ldhu	r3,12(r17)
    75f0:	18c01014 	ori	r3,r3,64
    75f4:	88c0030d 	sth	r3,12(r17)
    75f8:	003fc306 	br	7508 <__alt_data_end+0xff007508>
    75fc:	8880030b 	ldhu	r2,12(r17)
    7600:	88c00417 	ldw	r3,16(r17)
    7604:	88000115 	stw	zero,4(r17)
    7608:	10bdffcc 	andi	r2,r2,63487
    760c:	8880030d 	sth	r2,12(r17)
    7610:	88c00015 	stw	r3,0(r17)
    7614:	003fb306 	br	74e4 <__alt_data_end+0xff0074e4>
    7618:	98800017 	ldw	r2,0(r19)
    761c:	103fea26 	beq	r2,zero,75c8 <__alt_data_end+0xff0075c8>
    7620:	00c00744 	movi	r3,29
    7624:	10c00226 	beq	r2,r3,7630 <__sflush_r+0x1fc>
    7628:	00c00584 	movi	r3,22
    762c:	10c0031e 	bne	r2,r3,763c <__sflush_r+0x208>
    7630:	9c000015 	stw	r16,0(r19)
    7634:	0005883a 	mov	r2,zero
    7638:	003fb306 	br	7508 <__alt_data_end+0xff007508>
    763c:	88c0030b 	ldhu	r3,12(r17)
    7640:	3005883a 	mov	r2,r6
    7644:	18c01014 	ori	r3,r3,64
    7648:	88c0030d 	sth	r3,12(r17)
    764c:	003fae06 	br	7508 <__alt_data_end+0xff007508>

00007650 <_fflush_r>:
    7650:	defffd04 	addi	sp,sp,-12
    7654:	dc000115 	stw	r16,4(sp)
    7658:	dfc00215 	stw	ra,8(sp)
    765c:	2021883a 	mov	r16,r4
    7660:	20000226 	beq	r4,zero,766c <_fflush_r+0x1c>
    7664:	20800e17 	ldw	r2,56(r4)
    7668:	10000c26 	beq	r2,zero,769c <_fflush_r+0x4c>
    766c:	2880030f 	ldh	r2,12(r5)
    7670:	1000051e 	bne	r2,zero,7688 <_fflush_r+0x38>
    7674:	0005883a 	mov	r2,zero
    7678:	dfc00217 	ldw	ra,8(sp)
    767c:	dc000117 	ldw	r16,4(sp)
    7680:	dec00304 	addi	sp,sp,12
    7684:	f800283a 	ret
    7688:	8009883a 	mov	r4,r16
    768c:	dfc00217 	ldw	ra,8(sp)
    7690:	dc000117 	ldw	r16,4(sp)
    7694:	dec00304 	addi	sp,sp,12
    7698:	00074341 	jmpi	7434 <__sflush_r>
    769c:	d9400015 	stw	r5,0(sp)
    76a0:	0007a2c0 	call	7a2c <__sinit>
    76a4:	d9400017 	ldw	r5,0(sp)
    76a8:	003ff006 	br	766c <__alt_data_end+0xff00766c>

000076ac <fflush>:
    76ac:	20000526 	beq	r4,zero,76c4 <fflush+0x18>
    76b0:	00800074 	movhi	r2,1
    76b4:	108e2904 	addi	r2,r2,14500
    76b8:	200b883a 	mov	r5,r4
    76bc:	11000017 	ldw	r4,0(r2)
    76c0:	00076501 	jmpi	7650 <_fflush_r>
    76c4:	00800074 	movhi	r2,1
    76c8:	108e2804 	addi	r2,r2,14496
    76cc:	11000017 	ldw	r4,0(r2)
    76d0:	01400034 	movhi	r5,0
    76d4:	295d9404 	addi	r5,r5,30288
    76d8:	00084301 	jmpi	8430 <_fwalk_reent>

000076dc <__fp_unlock>:
    76dc:	0005883a 	mov	r2,zero
    76e0:	f800283a 	ret

000076e4 <_cleanup_r>:
    76e4:	01400074 	movhi	r5,1
    76e8:	296efa04 	addi	r5,r5,-17432
    76ec:	00084301 	jmpi	8430 <_fwalk_reent>

000076f0 <__sinit.part.1>:
    76f0:	defff704 	addi	sp,sp,-36
    76f4:	00c00034 	movhi	r3,0
    76f8:	dfc00815 	stw	ra,32(sp)
    76fc:	ddc00715 	stw	r23,28(sp)
    7700:	dd800615 	stw	r22,24(sp)
    7704:	dd400515 	stw	r21,20(sp)
    7708:	dd000415 	stw	r20,16(sp)
    770c:	dcc00315 	stw	r19,12(sp)
    7710:	dc800215 	stw	r18,8(sp)
    7714:	dc400115 	stw	r17,4(sp)
    7718:	dc000015 	stw	r16,0(sp)
    771c:	18ddb904 	addi	r3,r3,30436
    7720:	24000117 	ldw	r16,4(r4)
    7724:	20c00f15 	stw	r3,60(r4)
    7728:	2080bb04 	addi	r2,r4,748
    772c:	00c000c4 	movi	r3,3
    7730:	20c0b915 	stw	r3,740(r4)
    7734:	2080ba15 	stw	r2,744(r4)
    7738:	2000b815 	stw	zero,736(r4)
    773c:	05c00204 	movi	r23,8
    7740:	00800104 	movi	r2,4
    7744:	2025883a 	mov	r18,r4
    7748:	b80d883a 	mov	r6,r23
    774c:	81001704 	addi	r4,r16,92
    7750:	000b883a 	mov	r5,zero
    7754:	80000015 	stw	zero,0(r16)
    7758:	80000115 	stw	zero,4(r16)
    775c:	80000215 	stw	zero,8(r16)
    7760:	8080030d 	sth	r2,12(r16)
    7764:	80001915 	stw	zero,100(r16)
    7768:	8000038d 	sth	zero,14(r16)
    776c:	80000415 	stw	zero,16(r16)
    7770:	80000515 	stw	zero,20(r16)
    7774:	80000615 	stw	zero,24(r16)
    7778:	0008b140 	call	8b14 <memset>
    777c:	05800074 	movhi	r22,1
    7780:	94400217 	ldw	r17,8(r18)
    7784:	05400074 	movhi	r21,1
    7788:	05000074 	movhi	r20,1
    778c:	04c00074 	movhi	r19,1
    7790:	b5a88404 	addi	r22,r22,-24048
    7794:	ad689b04 	addi	r21,r21,-23956
    7798:	a528ba04 	addi	r20,r20,-23832
    779c:	9ce8d104 	addi	r19,r19,-23740
    77a0:	85800815 	stw	r22,32(r16)
    77a4:	85400915 	stw	r21,36(r16)
    77a8:	85000a15 	stw	r20,40(r16)
    77ac:	84c00b15 	stw	r19,44(r16)
    77b0:	84000715 	stw	r16,28(r16)
    77b4:	00800284 	movi	r2,10
    77b8:	8880030d 	sth	r2,12(r17)
    77bc:	00800044 	movi	r2,1
    77c0:	b80d883a 	mov	r6,r23
    77c4:	89001704 	addi	r4,r17,92
    77c8:	000b883a 	mov	r5,zero
    77cc:	88000015 	stw	zero,0(r17)
    77d0:	88000115 	stw	zero,4(r17)
    77d4:	88000215 	stw	zero,8(r17)
    77d8:	88001915 	stw	zero,100(r17)
    77dc:	8880038d 	sth	r2,14(r17)
    77e0:	88000415 	stw	zero,16(r17)
    77e4:	88000515 	stw	zero,20(r17)
    77e8:	88000615 	stw	zero,24(r17)
    77ec:	0008b140 	call	8b14 <memset>
    77f0:	94000317 	ldw	r16,12(r18)
    77f4:	00800484 	movi	r2,18
    77f8:	8c400715 	stw	r17,28(r17)
    77fc:	8d800815 	stw	r22,32(r17)
    7800:	8d400915 	stw	r21,36(r17)
    7804:	8d000a15 	stw	r20,40(r17)
    7808:	8cc00b15 	stw	r19,44(r17)
    780c:	8080030d 	sth	r2,12(r16)
    7810:	00800084 	movi	r2,2
    7814:	80000015 	stw	zero,0(r16)
    7818:	80000115 	stw	zero,4(r16)
    781c:	80000215 	stw	zero,8(r16)
    7820:	80001915 	stw	zero,100(r16)
    7824:	8080038d 	sth	r2,14(r16)
    7828:	80000415 	stw	zero,16(r16)
    782c:	80000515 	stw	zero,20(r16)
    7830:	80000615 	stw	zero,24(r16)
    7834:	b80d883a 	mov	r6,r23
    7838:	000b883a 	mov	r5,zero
    783c:	81001704 	addi	r4,r16,92
    7840:	0008b140 	call	8b14 <memset>
    7844:	00800044 	movi	r2,1
    7848:	84000715 	stw	r16,28(r16)
    784c:	85800815 	stw	r22,32(r16)
    7850:	85400915 	stw	r21,36(r16)
    7854:	85000a15 	stw	r20,40(r16)
    7858:	84c00b15 	stw	r19,44(r16)
    785c:	90800e15 	stw	r2,56(r18)
    7860:	dfc00817 	ldw	ra,32(sp)
    7864:	ddc00717 	ldw	r23,28(sp)
    7868:	dd800617 	ldw	r22,24(sp)
    786c:	dd400517 	ldw	r21,20(sp)
    7870:	dd000417 	ldw	r20,16(sp)
    7874:	dcc00317 	ldw	r19,12(sp)
    7878:	dc800217 	ldw	r18,8(sp)
    787c:	dc400117 	ldw	r17,4(sp)
    7880:	dc000017 	ldw	r16,0(sp)
    7884:	dec00904 	addi	sp,sp,36
    7888:	f800283a 	ret

0000788c <__fp_lock>:
    788c:	0005883a 	mov	r2,zero
    7890:	f800283a 	ret

00007894 <__sfmoreglue>:
    7894:	defffc04 	addi	sp,sp,-16
    7898:	dc400115 	stw	r17,4(sp)
    789c:	2c7fffc4 	addi	r17,r5,-1
    78a0:	8c401a24 	muli	r17,r17,104
    78a4:	dc800215 	stw	r18,8(sp)
    78a8:	2825883a 	mov	r18,r5
    78ac:	89401d04 	addi	r5,r17,116
    78b0:	dc000015 	stw	r16,0(sp)
    78b4:	dfc00315 	stw	ra,12(sp)
    78b8:	0002d500 	call	2d50 <_malloc_r>
    78bc:	1021883a 	mov	r16,r2
    78c0:	10000726 	beq	r2,zero,78e0 <__sfmoreglue+0x4c>
    78c4:	11000304 	addi	r4,r2,12
    78c8:	10000015 	stw	zero,0(r2)
    78cc:	14800115 	stw	r18,4(r2)
    78d0:	11000215 	stw	r4,8(r2)
    78d4:	89801a04 	addi	r6,r17,104
    78d8:	000b883a 	mov	r5,zero
    78dc:	0008b140 	call	8b14 <memset>
    78e0:	8005883a 	mov	r2,r16
    78e4:	dfc00317 	ldw	ra,12(sp)
    78e8:	dc800217 	ldw	r18,8(sp)
    78ec:	dc400117 	ldw	r17,4(sp)
    78f0:	dc000017 	ldw	r16,0(sp)
    78f4:	dec00404 	addi	sp,sp,16
    78f8:	f800283a 	ret

000078fc <__sfp>:
    78fc:	defffb04 	addi	sp,sp,-20
    7900:	dc000015 	stw	r16,0(sp)
    7904:	04000074 	movhi	r16,1
    7908:	840e2804 	addi	r16,r16,14496
    790c:	dcc00315 	stw	r19,12(sp)
    7910:	2027883a 	mov	r19,r4
    7914:	81000017 	ldw	r4,0(r16)
    7918:	dfc00415 	stw	ra,16(sp)
    791c:	dc800215 	stw	r18,8(sp)
    7920:	20800e17 	ldw	r2,56(r4)
    7924:	dc400115 	stw	r17,4(sp)
    7928:	1000021e 	bne	r2,zero,7934 <__sfp+0x38>
    792c:	00076f00 	call	76f0 <__sinit.part.1>
    7930:	81000017 	ldw	r4,0(r16)
    7934:	2480b804 	addi	r18,r4,736
    7938:	047fffc4 	movi	r17,-1
    793c:	91000117 	ldw	r4,4(r18)
    7940:	94000217 	ldw	r16,8(r18)
    7944:	213fffc4 	addi	r4,r4,-1
    7948:	20000a16 	blt	r4,zero,7974 <__sfp+0x78>
    794c:	8080030f 	ldh	r2,12(r16)
    7950:	10000c26 	beq	r2,zero,7984 <__sfp+0x88>
    7954:	80c01d04 	addi	r3,r16,116
    7958:	00000206 	br	7964 <__sfp+0x68>
    795c:	18bfe60f 	ldh	r2,-104(r3)
    7960:	10000826 	beq	r2,zero,7984 <__sfp+0x88>
    7964:	213fffc4 	addi	r4,r4,-1
    7968:	1c3ffd04 	addi	r16,r3,-12
    796c:	18c01a04 	addi	r3,r3,104
    7970:	247ffa1e 	bne	r4,r17,795c <__alt_data_end+0xff00795c>
    7974:	90800017 	ldw	r2,0(r18)
    7978:	10001d26 	beq	r2,zero,79f0 <__sfp+0xf4>
    797c:	1025883a 	mov	r18,r2
    7980:	003fee06 	br	793c <__alt_data_end+0xff00793c>
    7984:	00bfffc4 	movi	r2,-1
    7988:	8080038d 	sth	r2,14(r16)
    798c:	00800044 	movi	r2,1
    7990:	8080030d 	sth	r2,12(r16)
    7994:	80001915 	stw	zero,100(r16)
    7998:	80000015 	stw	zero,0(r16)
    799c:	80000215 	stw	zero,8(r16)
    79a0:	80000115 	stw	zero,4(r16)
    79a4:	80000415 	stw	zero,16(r16)
    79a8:	80000515 	stw	zero,20(r16)
    79ac:	80000615 	stw	zero,24(r16)
    79b0:	01800204 	movi	r6,8
    79b4:	000b883a 	mov	r5,zero
    79b8:	81001704 	addi	r4,r16,92
    79bc:	0008b140 	call	8b14 <memset>
    79c0:	8005883a 	mov	r2,r16
    79c4:	80000c15 	stw	zero,48(r16)
    79c8:	80000d15 	stw	zero,52(r16)
    79cc:	80001115 	stw	zero,68(r16)
    79d0:	80001215 	stw	zero,72(r16)
    79d4:	dfc00417 	ldw	ra,16(sp)
    79d8:	dcc00317 	ldw	r19,12(sp)
    79dc:	dc800217 	ldw	r18,8(sp)
    79e0:	dc400117 	ldw	r17,4(sp)
    79e4:	dc000017 	ldw	r16,0(sp)
    79e8:	dec00504 	addi	sp,sp,20
    79ec:	f800283a 	ret
    79f0:	01400104 	movi	r5,4
    79f4:	9809883a 	mov	r4,r19
    79f8:	00078940 	call	7894 <__sfmoreglue>
    79fc:	90800015 	stw	r2,0(r18)
    7a00:	103fde1e 	bne	r2,zero,797c <__alt_data_end+0xff00797c>
    7a04:	00800304 	movi	r2,12
    7a08:	98800015 	stw	r2,0(r19)
    7a0c:	0005883a 	mov	r2,zero
    7a10:	003ff006 	br	79d4 <__alt_data_end+0xff0079d4>

00007a14 <_cleanup>:
    7a14:	00800074 	movhi	r2,1
    7a18:	108e2804 	addi	r2,r2,14496
    7a1c:	11000017 	ldw	r4,0(r2)
    7a20:	01400074 	movhi	r5,1
    7a24:	296efa04 	addi	r5,r5,-17432
    7a28:	00084301 	jmpi	8430 <_fwalk_reent>

00007a2c <__sinit>:
    7a2c:	20800e17 	ldw	r2,56(r4)
    7a30:	10000126 	beq	r2,zero,7a38 <__sinit+0xc>
    7a34:	f800283a 	ret
    7a38:	00076f01 	jmpi	76f0 <__sinit.part.1>

00007a3c <__sfp_lock_acquire>:
    7a3c:	f800283a 	ret

00007a40 <__sfp_lock_release>:
    7a40:	f800283a 	ret

00007a44 <__sinit_lock_acquire>:
    7a44:	f800283a 	ret

00007a48 <__sinit_lock_release>:
    7a48:	f800283a 	ret

00007a4c <__fp_lock_all>:
    7a4c:	00800074 	movhi	r2,1
    7a50:	108e2904 	addi	r2,r2,14500
    7a54:	11000017 	ldw	r4,0(r2)
    7a58:	01400034 	movhi	r5,0
    7a5c:	295e2304 	addi	r5,r5,30860
    7a60:	000836c1 	jmpi	836c <_fwalk>

00007a64 <__fp_unlock_all>:
    7a64:	00800074 	movhi	r2,1
    7a68:	108e2904 	addi	r2,r2,14500
    7a6c:	11000017 	ldw	r4,0(r2)
    7a70:	01400034 	movhi	r5,0
    7a74:	295db704 	addi	r5,r5,30428
    7a78:	000836c1 	jmpi	836c <_fwalk>

00007a7c <_malloc_trim_r>:
    7a7c:	defffb04 	addi	sp,sp,-20
    7a80:	dcc00315 	stw	r19,12(sp)
    7a84:	04c00074 	movhi	r19,1
    7a88:	dc800215 	stw	r18,8(sp)
    7a8c:	dc400115 	stw	r17,4(sp)
    7a90:	dc000015 	stw	r16,0(sp)
    7a94:	dfc00415 	stw	ra,16(sp)
    7a98:	2821883a 	mov	r16,r5
    7a9c:	9cc77b04 	addi	r19,r19,7660
    7aa0:	2025883a 	mov	r18,r4
    7aa4:	000f0440 	call	f044 <__malloc_lock>
    7aa8:	98800217 	ldw	r2,8(r19)
    7aac:	14400117 	ldw	r17,4(r2)
    7ab0:	00bfff04 	movi	r2,-4
    7ab4:	88a2703a 	and	r17,r17,r2
    7ab8:	8c21c83a 	sub	r16,r17,r16
    7abc:	8403fbc4 	addi	r16,r16,4079
    7ac0:	8020d33a 	srli	r16,r16,12
    7ac4:	0083ffc4 	movi	r2,4095
    7ac8:	843fffc4 	addi	r16,r16,-1
    7acc:	8020933a 	slli	r16,r16,12
    7ad0:	1400060e 	bge	r2,r16,7aec <_malloc_trim_r+0x70>
    7ad4:	000b883a 	mov	r5,zero
    7ad8:	9009883a 	mov	r4,r18
    7adc:	000369c0 	call	369c <_sbrk_r>
    7ae0:	98c00217 	ldw	r3,8(r19)
    7ae4:	1c47883a 	add	r3,r3,r17
    7ae8:	10c00a26 	beq	r2,r3,7b14 <_malloc_trim_r+0x98>
    7aec:	9009883a 	mov	r4,r18
    7af0:	000f0680 	call	f068 <__malloc_unlock>
    7af4:	0005883a 	mov	r2,zero
    7af8:	dfc00417 	ldw	ra,16(sp)
    7afc:	dcc00317 	ldw	r19,12(sp)
    7b00:	dc800217 	ldw	r18,8(sp)
    7b04:	dc400117 	ldw	r17,4(sp)
    7b08:	dc000017 	ldw	r16,0(sp)
    7b0c:	dec00504 	addi	sp,sp,20
    7b10:	f800283a 	ret
    7b14:	040bc83a 	sub	r5,zero,r16
    7b18:	9009883a 	mov	r4,r18
    7b1c:	000369c0 	call	369c <_sbrk_r>
    7b20:	00ffffc4 	movi	r3,-1
    7b24:	10c00d26 	beq	r2,r3,7b5c <_malloc_trim_r+0xe0>
    7b28:	00c00074 	movhi	r3,1
    7b2c:	18d55604 	addi	r3,r3,21848
    7b30:	18800017 	ldw	r2,0(r3)
    7b34:	99000217 	ldw	r4,8(r19)
    7b38:	8c23c83a 	sub	r17,r17,r16
    7b3c:	8c400054 	ori	r17,r17,1
    7b40:	1421c83a 	sub	r16,r2,r16
    7b44:	24400115 	stw	r17,4(r4)
    7b48:	9009883a 	mov	r4,r18
    7b4c:	1c000015 	stw	r16,0(r3)
    7b50:	000f0680 	call	f068 <__malloc_unlock>
    7b54:	00800044 	movi	r2,1
    7b58:	003fe706 	br	7af8 <__alt_data_end+0xff007af8>
    7b5c:	000b883a 	mov	r5,zero
    7b60:	9009883a 	mov	r4,r18
    7b64:	000369c0 	call	369c <_sbrk_r>
    7b68:	99000217 	ldw	r4,8(r19)
    7b6c:	014003c4 	movi	r5,15
    7b70:	1107c83a 	sub	r3,r2,r4
    7b74:	28ffdd0e 	bge	r5,r3,7aec <__alt_data_end+0xff007aec>
    7b78:	01400074 	movhi	r5,1
    7b7c:	294e2604 	addi	r5,r5,14488
    7b80:	29400017 	ldw	r5,0(r5)
    7b84:	18c00054 	ori	r3,r3,1
    7b88:	20c00115 	stw	r3,4(r4)
    7b8c:	00c00074 	movhi	r3,1
    7b90:	1145c83a 	sub	r2,r2,r5
    7b94:	18d55604 	addi	r3,r3,21848
    7b98:	18800015 	stw	r2,0(r3)
    7b9c:	003fd306 	br	7aec <__alt_data_end+0xff007aec>

00007ba0 <_free_r>:
    7ba0:	28004126 	beq	r5,zero,7ca8 <_free_r+0x108>
    7ba4:	defffd04 	addi	sp,sp,-12
    7ba8:	dc400115 	stw	r17,4(sp)
    7bac:	dc000015 	stw	r16,0(sp)
    7bb0:	2023883a 	mov	r17,r4
    7bb4:	2821883a 	mov	r16,r5
    7bb8:	dfc00215 	stw	ra,8(sp)
    7bbc:	000f0440 	call	f044 <__malloc_lock>
    7bc0:	81ffff17 	ldw	r7,-4(r16)
    7bc4:	00bfff84 	movi	r2,-2
    7bc8:	01000074 	movhi	r4,1
    7bcc:	81bffe04 	addi	r6,r16,-8
    7bd0:	3884703a 	and	r2,r7,r2
    7bd4:	21077b04 	addi	r4,r4,7660
    7bd8:	308b883a 	add	r5,r6,r2
    7bdc:	2a400117 	ldw	r9,4(r5)
    7be0:	22000217 	ldw	r8,8(r4)
    7be4:	00ffff04 	movi	r3,-4
    7be8:	48c6703a 	and	r3,r9,r3
    7bec:	2a005726 	beq	r5,r8,7d4c <_free_r+0x1ac>
    7bf0:	28c00115 	stw	r3,4(r5)
    7bf4:	39c0004c 	andi	r7,r7,1
    7bf8:	3800091e 	bne	r7,zero,7c20 <_free_r+0x80>
    7bfc:	823ffe17 	ldw	r8,-8(r16)
    7c00:	22400204 	addi	r9,r4,8
    7c04:	320dc83a 	sub	r6,r6,r8
    7c08:	31c00217 	ldw	r7,8(r6)
    7c0c:	1205883a 	add	r2,r2,r8
    7c10:	3a406526 	beq	r7,r9,7da8 <_free_r+0x208>
    7c14:	32000317 	ldw	r8,12(r6)
    7c18:	3a000315 	stw	r8,12(r7)
    7c1c:	41c00215 	stw	r7,8(r8)
    7c20:	28cf883a 	add	r7,r5,r3
    7c24:	39c00117 	ldw	r7,4(r7)
    7c28:	39c0004c 	andi	r7,r7,1
    7c2c:	38003a26 	beq	r7,zero,7d18 <_free_r+0x178>
    7c30:	10c00054 	ori	r3,r2,1
    7c34:	30c00115 	stw	r3,4(r6)
    7c38:	3087883a 	add	r3,r6,r2
    7c3c:	18800015 	stw	r2,0(r3)
    7c40:	00c07fc4 	movi	r3,511
    7c44:	18801936 	bltu	r3,r2,7cac <_free_r+0x10c>
    7c48:	1004d0fa 	srli	r2,r2,3
    7c4c:	01c00044 	movi	r7,1
    7c50:	21400117 	ldw	r5,4(r4)
    7c54:	10c00044 	addi	r3,r2,1
    7c58:	18c7883a 	add	r3,r3,r3
    7c5c:	1005d0ba 	srai	r2,r2,2
    7c60:	18c7883a 	add	r3,r3,r3
    7c64:	18c7883a 	add	r3,r3,r3
    7c68:	1907883a 	add	r3,r3,r4
    7c6c:	3884983a 	sll	r2,r7,r2
    7c70:	19c00017 	ldw	r7,0(r3)
    7c74:	1a3ffe04 	addi	r8,r3,-8
    7c78:	1144b03a 	or	r2,r2,r5
    7c7c:	32000315 	stw	r8,12(r6)
    7c80:	31c00215 	stw	r7,8(r6)
    7c84:	20800115 	stw	r2,4(r4)
    7c88:	19800015 	stw	r6,0(r3)
    7c8c:	39800315 	stw	r6,12(r7)
    7c90:	8809883a 	mov	r4,r17
    7c94:	dfc00217 	ldw	ra,8(sp)
    7c98:	dc400117 	ldw	r17,4(sp)
    7c9c:	dc000017 	ldw	r16,0(sp)
    7ca0:	dec00304 	addi	sp,sp,12
    7ca4:	000f0681 	jmpi	f068 <__malloc_unlock>
    7ca8:	f800283a 	ret
    7cac:	100ad27a 	srli	r5,r2,9
    7cb0:	00c00104 	movi	r3,4
    7cb4:	19404a36 	bltu	r3,r5,7de0 <_free_r+0x240>
    7cb8:	100ad1ba 	srli	r5,r2,6
    7cbc:	28c00e44 	addi	r3,r5,57
    7cc0:	18c7883a 	add	r3,r3,r3
    7cc4:	29400e04 	addi	r5,r5,56
    7cc8:	18c7883a 	add	r3,r3,r3
    7ccc:	18c7883a 	add	r3,r3,r3
    7cd0:	1909883a 	add	r4,r3,r4
    7cd4:	20c00017 	ldw	r3,0(r4)
    7cd8:	01c00074 	movhi	r7,1
    7cdc:	213ffe04 	addi	r4,r4,-8
    7ce0:	39c77b04 	addi	r7,r7,7660
    7ce4:	20c04426 	beq	r4,r3,7df8 <_free_r+0x258>
    7ce8:	01ffff04 	movi	r7,-4
    7cec:	19400117 	ldw	r5,4(r3)
    7cf0:	29ca703a 	and	r5,r5,r7
    7cf4:	1140022e 	bgeu	r2,r5,7d00 <_free_r+0x160>
    7cf8:	18c00217 	ldw	r3,8(r3)
    7cfc:	20fffb1e 	bne	r4,r3,7cec <__alt_data_end+0xff007cec>
    7d00:	19000317 	ldw	r4,12(r3)
    7d04:	31000315 	stw	r4,12(r6)
    7d08:	30c00215 	stw	r3,8(r6)
    7d0c:	21800215 	stw	r6,8(r4)
    7d10:	19800315 	stw	r6,12(r3)
    7d14:	003fde06 	br	7c90 <__alt_data_end+0xff007c90>
    7d18:	29c00217 	ldw	r7,8(r5)
    7d1c:	10c5883a 	add	r2,r2,r3
    7d20:	00c00074 	movhi	r3,1
    7d24:	18c77d04 	addi	r3,r3,7668
    7d28:	38c03b26 	beq	r7,r3,7e18 <_free_r+0x278>
    7d2c:	2a000317 	ldw	r8,12(r5)
    7d30:	11400054 	ori	r5,r2,1
    7d34:	3087883a 	add	r3,r6,r2
    7d38:	3a000315 	stw	r8,12(r7)
    7d3c:	41c00215 	stw	r7,8(r8)
    7d40:	31400115 	stw	r5,4(r6)
    7d44:	18800015 	stw	r2,0(r3)
    7d48:	003fbd06 	br	7c40 <__alt_data_end+0xff007c40>
    7d4c:	39c0004c 	andi	r7,r7,1
    7d50:	10c5883a 	add	r2,r2,r3
    7d54:	3800071e 	bne	r7,zero,7d74 <_free_r+0x1d4>
    7d58:	81fffe17 	ldw	r7,-8(r16)
    7d5c:	31cdc83a 	sub	r6,r6,r7
    7d60:	30c00317 	ldw	r3,12(r6)
    7d64:	31400217 	ldw	r5,8(r6)
    7d68:	11c5883a 	add	r2,r2,r7
    7d6c:	28c00315 	stw	r3,12(r5)
    7d70:	19400215 	stw	r5,8(r3)
    7d74:	10c00054 	ori	r3,r2,1
    7d78:	30c00115 	stw	r3,4(r6)
    7d7c:	00c00074 	movhi	r3,1
    7d80:	18ce2704 	addi	r3,r3,14492
    7d84:	18c00017 	ldw	r3,0(r3)
    7d88:	21800215 	stw	r6,8(r4)
    7d8c:	10ffc036 	bltu	r2,r3,7c90 <__alt_data_end+0xff007c90>
    7d90:	00800074 	movhi	r2,1
    7d94:	10954804 	addi	r2,r2,21792
    7d98:	11400017 	ldw	r5,0(r2)
    7d9c:	8809883a 	mov	r4,r17
    7da0:	0007a7c0 	call	7a7c <_malloc_trim_r>
    7da4:	003fba06 	br	7c90 <__alt_data_end+0xff007c90>
    7da8:	28c9883a 	add	r4,r5,r3
    7dac:	21000117 	ldw	r4,4(r4)
    7db0:	2100004c 	andi	r4,r4,1
    7db4:	2000391e 	bne	r4,zero,7e9c <_free_r+0x2fc>
    7db8:	29c00217 	ldw	r7,8(r5)
    7dbc:	29000317 	ldw	r4,12(r5)
    7dc0:	1885883a 	add	r2,r3,r2
    7dc4:	10c00054 	ori	r3,r2,1
    7dc8:	39000315 	stw	r4,12(r7)
    7dcc:	21c00215 	stw	r7,8(r4)
    7dd0:	30c00115 	stw	r3,4(r6)
    7dd4:	308d883a 	add	r6,r6,r2
    7dd8:	30800015 	stw	r2,0(r6)
    7ddc:	003fac06 	br	7c90 <__alt_data_end+0xff007c90>
    7de0:	00c00504 	movi	r3,20
    7de4:	19401536 	bltu	r3,r5,7e3c <_free_r+0x29c>
    7de8:	28c01704 	addi	r3,r5,92
    7dec:	18c7883a 	add	r3,r3,r3
    7df0:	294016c4 	addi	r5,r5,91
    7df4:	003fb406 	br	7cc8 <__alt_data_end+0xff007cc8>
    7df8:	280bd0ba 	srai	r5,r5,2
    7dfc:	00c00044 	movi	r3,1
    7e00:	38800117 	ldw	r2,4(r7)
    7e04:	194a983a 	sll	r5,r3,r5
    7e08:	2007883a 	mov	r3,r4
    7e0c:	2884b03a 	or	r2,r5,r2
    7e10:	38800115 	stw	r2,4(r7)
    7e14:	003fbb06 	br	7d04 <__alt_data_end+0xff007d04>
    7e18:	21800515 	stw	r6,20(r4)
    7e1c:	21800415 	stw	r6,16(r4)
    7e20:	10c00054 	ori	r3,r2,1
    7e24:	31c00315 	stw	r7,12(r6)
    7e28:	31c00215 	stw	r7,8(r6)
    7e2c:	30c00115 	stw	r3,4(r6)
    7e30:	308d883a 	add	r6,r6,r2
    7e34:	30800015 	stw	r2,0(r6)
    7e38:	003f9506 	br	7c90 <__alt_data_end+0xff007c90>
    7e3c:	00c01504 	movi	r3,84
    7e40:	19400536 	bltu	r3,r5,7e58 <_free_r+0x2b8>
    7e44:	100ad33a 	srli	r5,r2,12
    7e48:	28c01bc4 	addi	r3,r5,111
    7e4c:	18c7883a 	add	r3,r3,r3
    7e50:	29401b84 	addi	r5,r5,110
    7e54:	003f9c06 	br	7cc8 <__alt_data_end+0xff007cc8>
    7e58:	00c05504 	movi	r3,340
    7e5c:	19400536 	bltu	r3,r5,7e74 <_free_r+0x2d4>
    7e60:	100ad3fa 	srli	r5,r2,15
    7e64:	28c01e04 	addi	r3,r5,120
    7e68:	18c7883a 	add	r3,r3,r3
    7e6c:	29401dc4 	addi	r5,r5,119
    7e70:	003f9506 	br	7cc8 <__alt_data_end+0xff007cc8>
    7e74:	00c15504 	movi	r3,1364
    7e78:	19400536 	bltu	r3,r5,7e90 <_free_r+0x2f0>
    7e7c:	100ad4ba 	srli	r5,r2,18
    7e80:	28c01f44 	addi	r3,r5,125
    7e84:	18c7883a 	add	r3,r3,r3
    7e88:	29401f04 	addi	r5,r5,124
    7e8c:	003f8e06 	br	7cc8 <__alt_data_end+0xff007cc8>
    7e90:	00c03f84 	movi	r3,254
    7e94:	01401f84 	movi	r5,126
    7e98:	003f8b06 	br	7cc8 <__alt_data_end+0xff007cc8>
    7e9c:	10c00054 	ori	r3,r2,1
    7ea0:	30c00115 	stw	r3,4(r6)
    7ea4:	308d883a 	add	r6,r6,r2
    7ea8:	30800015 	stw	r2,0(r6)
    7eac:	003f7806 	br	7c90 <__alt_data_end+0xff007c90>

00007eb0 <__sfvwrite_r>:
    7eb0:	30800217 	ldw	r2,8(r6)
    7eb4:	10006726 	beq	r2,zero,8054 <__sfvwrite_r+0x1a4>
    7eb8:	28c0030b 	ldhu	r3,12(r5)
    7ebc:	defff404 	addi	sp,sp,-48
    7ec0:	dd400715 	stw	r21,28(sp)
    7ec4:	dd000615 	stw	r20,24(sp)
    7ec8:	dc000215 	stw	r16,8(sp)
    7ecc:	dfc00b15 	stw	ra,44(sp)
    7ed0:	df000a15 	stw	fp,40(sp)
    7ed4:	ddc00915 	stw	r23,36(sp)
    7ed8:	dd800815 	stw	r22,32(sp)
    7edc:	dcc00515 	stw	r19,20(sp)
    7ee0:	dc800415 	stw	r18,16(sp)
    7ee4:	dc400315 	stw	r17,12(sp)
    7ee8:	1880020c 	andi	r2,r3,8
    7eec:	2821883a 	mov	r16,r5
    7ef0:	202b883a 	mov	r21,r4
    7ef4:	3029883a 	mov	r20,r6
    7ef8:	10002726 	beq	r2,zero,7f98 <__sfvwrite_r+0xe8>
    7efc:	28800417 	ldw	r2,16(r5)
    7f00:	10002526 	beq	r2,zero,7f98 <__sfvwrite_r+0xe8>
    7f04:	1880008c 	andi	r2,r3,2
    7f08:	a4400017 	ldw	r17,0(r20)
    7f0c:	10002a26 	beq	r2,zero,7fb8 <__sfvwrite_r+0x108>
    7f10:	05a00034 	movhi	r22,32768
    7f14:	0027883a 	mov	r19,zero
    7f18:	0025883a 	mov	r18,zero
    7f1c:	b5bf0004 	addi	r22,r22,-1024
    7f20:	980d883a 	mov	r6,r19
    7f24:	a809883a 	mov	r4,r21
    7f28:	90004626 	beq	r18,zero,8044 <__sfvwrite_r+0x194>
    7f2c:	900f883a 	mov	r7,r18
    7f30:	b480022e 	bgeu	r22,r18,7f3c <__sfvwrite_r+0x8c>
    7f34:	01e00034 	movhi	r7,32768
    7f38:	39ff0004 	addi	r7,r7,-1024
    7f3c:	80800917 	ldw	r2,36(r16)
    7f40:	81400717 	ldw	r5,28(r16)
    7f44:	103ee83a 	callr	r2
    7f48:	0080570e 	bge	zero,r2,80a8 <__sfvwrite_r+0x1f8>
    7f4c:	a0c00217 	ldw	r3,8(r20)
    7f50:	98a7883a 	add	r19,r19,r2
    7f54:	90a5c83a 	sub	r18,r18,r2
    7f58:	1885c83a 	sub	r2,r3,r2
    7f5c:	a0800215 	stw	r2,8(r20)
    7f60:	103fef1e 	bne	r2,zero,7f20 <__alt_data_end+0xff007f20>
    7f64:	0005883a 	mov	r2,zero
    7f68:	dfc00b17 	ldw	ra,44(sp)
    7f6c:	df000a17 	ldw	fp,40(sp)
    7f70:	ddc00917 	ldw	r23,36(sp)
    7f74:	dd800817 	ldw	r22,32(sp)
    7f78:	dd400717 	ldw	r21,28(sp)
    7f7c:	dd000617 	ldw	r20,24(sp)
    7f80:	dcc00517 	ldw	r19,20(sp)
    7f84:	dc800417 	ldw	r18,16(sp)
    7f88:	dc400317 	ldw	r17,12(sp)
    7f8c:	dc000217 	ldw	r16,8(sp)
    7f90:	dec00c04 	addi	sp,sp,48
    7f94:	f800283a 	ret
    7f98:	800b883a 	mov	r5,r16
    7f9c:	a809883a 	mov	r4,r21
    7fa0:	0005a580 	call	5a58 <__swsetup_r>
    7fa4:	1000eb1e 	bne	r2,zero,8354 <__sfvwrite_r+0x4a4>
    7fa8:	80c0030b 	ldhu	r3,12(r16)
    7fac:	a4400017 	ldw	r17,0(r20)
    7fb0:	1880008c 	andi	r2,r3,2
    7fb4:	103fd61e 	bne	r2,zero,7f10 <__alt_data_end+0xff007f10>
    7fb8:	1880004c 	andi	r2,r3,1
    7fbc:	10003f1e 	bne	r2,zero,80bc <__sfvwrite_r+0x20c>
    7fc0:	0039883a 	mov	fp,zero
    7fc4:	0025883a 	mov	r18,zero
    7fc8:	90001a26 	beq	r18,zero,8034 <__sfvwrite_r+0x184>
    7fcc:	1880800c 	andi	r2,r3,512
    7fd0:	84c00217 	ldw	r19,8(r16)
    7fd4:	10002126 	beq	r2,zero,805c <__sfvwrite_r+0x1ac>
    7fd8:	982f883a 	mov	r23,r19
    7fdc:	94c09336 	bltu	r18,r19,822c <__sfvwrite_r+0x37c>
    7fe0:	1881200c 	andi	r2,r3,1152
    7fe4:	10009e1e 	bne	r2,zero,8260 <__sfvwrite_r+0x3b0>
    7fe8:	81000017 	ldw	r4,0(r16)
    7fec:	b80d883a 	mov	r6,r23
    7ff0:	e00b883a 	mov	r5,fp
    7ff4:	00089b80 	call	89b8 <memmove>
    7ff8:	80c00217 	ldw	r3,8(r16)
    7ffc:	81000017 	ldw	r4,0(r16)
    8000:	9005883a 	mov	r2,r18
    8004:	1ce7c83a 	sub	r19,r3,r19
    8008:	25cf883a 	add	r7,r4,r23
    800c:	84c00215 	stw	r19,8(r16)
    8010:	81c00015 	stw	r7,0(r16)
    8014:	a0c00217 	ldw	r3,8(r20)
    8018:	e0b9883a 	add	fp,fp,r2
    801c:	90a5c83a 	sub	r18,r18,r2
    8020:	18a7c83a 	sub	r19,r3,r2
    8024:	a4c00215 	stw	r19,8(r20)
    8028:	983fce26 	beq	r19,zero,7f64 <__alt_data_end+0xff007f64>
    802c:	80c0030b 	ldhu	r3,12(r16)
    8030:	903fe61e 	bne	r18,zero,7fcc <__alt_data_end+0xff007fcc>
    8034:	8f000017 	ldw	fp,0(r17)
    8038:	8c800117 	ldw	r18,4(r17)
    803c:	8c400204 	addi	r17,r17,8
    8040:	003fe106 	br	7fc8 <__alt_data_end+0xff007fc8>
    8044:	8cc00017 	ldw	r19,0(r17)
    8048:	8c800117 	ldw	r18,4(r17)
    804c:	8c400204 	addi	r17,r17,8
    8050:	003fb306 	br	7f20 <__alt_data_end+0xff007f20>
    8054:	0005883a 	mov	r2,zero
    8058:	f800283a 	ret
    805c:	81000017 	ldw	r4,0(r16)
    8060:	80800417 	ldw	r2,16(r16)
    8064:	11005736 	bltu	r2,r4,81c4 <__sfvwrite_r+0x314>
    8068:	85c00517 	ldw	r23,20(r16)
    806c:	95c05536 	bltu	r18,r23,81c4 <__sfvwrite_r+0x314>
    8070:	00a00034 	movhi	r2,32768
    8074:	10bfffc4 	addi	r2,r2,-1
    8078:	9009883a 	mov	r4,r18
    807c:	1480012e 	bgeu	r2,r18,8084 <__sfvwrite_r+0x1d4>
    8080:	1009883a 	mov	r4,r2
    8084:	b80b883a 	mov	r5,r23
    8088:	00021800 	call	2180 <__divsi3>
    808c:	15cf383a 	mul	r7,r2,r23
    8090:	81400717 	ldw	r5,28(r16)
    8094:	80800917 	ldw	r2,36(r16)
    8098:	e00d883a 	mov	r6,fp
    809c:	a809883a 	mov	r4,r21
    80a0:	103ee83a 	callr	r2
    80a4:	00bfdb16 	blt	zero,r2,8014 <__alt_data_end+0xff008014>
    80a8:	8080030b 	ldhu	r2,12(r16)
    80ac:	10801014 	ori	r2,r2,64
    80b0:	8080030d 	sth	r2,12(r16)
    80b4:	00bfffc4 	movi	r2,-1
    80b8:	003fab06 	br	7f68 <__alt_data_end+0xff007f68>
    80bc:	0027883a 	mov	r19,zero
    80c0:	0011883a 	mov	r8,zero
    80c4:	0039883a 	mov	fp,zero
    80c8:	0025883a 	mov	r18,zero
    80cc:	90001f26 	beq	r18,zero,814c <__sfvwrite_r+0x29c>
    80d0:	40005a26 	beq	r8,zero,823c <__sfvwrite_r+0x38c>
    80d4:	982d883a 	mov	r22,r19
    80d8:	94c0012e 	bgeu	r18,r19,80e0 <__sfvwrite_r+0x230>
    80dc:	902d883a 	mov	r22,r18
    80e0:	81000017 	ldw	r4,0(r16)
    80e4:	80800417 	ldw	r2,16(r16)
    80e8:	b02f883a 	mov	r23,r22
    80ec:	81c00517 	ldw	r7,20(r16)
    80f0:	1100032e 	bgeu	r2,r4,8100 <__sfvwrite_r+0x250>
    80f4:	80c00217 	ldw	r3,8(r16)
    80f8:	38c7883a 	add	r3,r7,r3
    80fc:	1d801816 	blt	r3,r22,8160 <__sfvwrite_r+0x2b0>
    8100:	b1c03e16 	blt	r22,r7,81fc <__sfvwrite_r+0x34c>
    8104:	80800917 	ldw	r2,36(r16)
    8108:	81400717 	ldw	r5,28(r16)
    810c:	e00d883a 	mov	r6,fp
    8110:	da000115 	stw	r8,4(sp)
    8114:	a809883a 	mov	r4,r21
    8118:	103ee83a 	callr	r2
    811c:	102f883a 	mov	r23,r2
    8120:	da000117 	ldw	r8,4(sp)
    8124:	00bfe00e 	bge	zero,r2,80a8 <__alt_data_end+0xff0080a8>
    8128:	9de7c83a 	sub	r19,r19,r23
    812c:	98001f26 	beq	r19,zero,81ac <__sfvwrite_r+0x2fc>
    8130:	a0800217 	ldw	r2,8(r20)
    8134:	e5f9883a 	add	fp,fp,r23
    8138:	95e5c83a 	sub	r18,r18,r23
    813c:	15efc83a 	sub	r23,r2,r23
    8140:	a5c00215 	stw	r23,8(r20)
    8144:	b83f8726 	beq	r23,zero,7f64 <__alt_data_end+0xff007f64>
    8148:	903fe11e 	bne	r18,zero,80d0 <__alt_data_end+0xff0080d0>
    814c:	8f000017 	ldw	fp,0(r17)
    8150:	8c800117 	ldw	r18,4(r17)
    8154:	0011883a 	mov	r8,zero
    8158:	8c400204 	addi	r17,r17,8
    815c:	003fdb06 	br	80cc <__alt_data_end+0xff0080cc>
    8160:	180d883a 	mov	r6,r3
    8164:	e00b883a 	mov	r5,fp
    8168:	da000115 	stw	r8,4(sp)
    816c:	d8c00015 	stw	r3,0(sp)
    8170:	00089b80 	call	89b8 <memmove>
    8174:	d8c00017 	ldw	r3,0(sp)
    8178:	80800017 	ldw	r2,0(r16)
    817c:	800b883a 	mov	r5,r16
    8180:	a809883a 	mov	r4,r21
    8184:	10c5883a 	add	r2,r2,r3
    8188:	80800015 	stw	r2,0(r16)
    818c:	d8c00015 	stw	r3,0(sp)
    8190:	00076500 	call	7650 <_fflush_r>
    8194:	d8c00017 	ldw	r3,0(sp)
    8198:	da000117 	ldw	r8,4(sp)
    819c:	103fc21e 	bne	r2,zero,80a8 <__alt_data_end+0xff0080a8>
    81a0:	182f883a 	mov	r23,r3
    81a4:	9de7c83a 	sub	r19,r19,r23
    81a8:	983fe11e 	bne	r19,zero,8130 <__alt_data_end+0xff008130>
    81ac:	800b883a 	mov	r5,r16
    81b0:	a809883a 	mov	r4,r21
    81b4:	00076500 	call	7650 <_fflush_r>
    81b8:	103fbb1e 	bne	r2,zero,80a8 <__alt_data_end+0xff0080a8>
    81bc:	0011883a 	mov	r8,zero
    81c0:	003fdb06 	br	8130 <__alt_data_end+0xff008130>
    81c4:	94c0012e 	bgeu	r18,r19,81cc <__sfvwrite_r+0x31c>
    81c8:	9027883a 	mov	r19,r18
    81cc:	980d883a 	mov	r6,r19
    81d0:	e00b883a 	mov	r5,fp
    81d4:	00089b80 	call	89b8 <memmove>
    81d8:	80800217 	ldw	r2,8(r16)
    81dc:	80c00017 	ldw	r3,0(r16)
    81e0:	14c5c83a 	sub	r2,r2,r19
    81e4:	1cc7883a 	add	r3,r3,r19
    81e8:	80800215 	stw	r2,8(r16)
    81ec:	80c00015 	stw	r3,0(r16)
    81f0:	10004326 	beq	r2,zero,8300 <__sfvwrite_r+0x450>
    81f4:	9805883a 	mov	r2,r19
    81f8:	003f8606 	br	8014 <__alt_data_end+0xff008014>
    81fc:	b00d883a 	mov	r6,r22
    8200:	e00b883a 	mov	r5,fp
    8204:	da000115 	stw	r8,4(sp)
    8208:	00089b80 	call	89b8 <memmove>
    820c:	80800217 	ldw	r2,8(r16)
    8210:	80c00017 	ldw	r3,0(r16)
    8214:	da000117 	ldw	r8,4(sp)
    8218:	1585c83a 	sub	r2,r2,r22
    821c:	1dad883a 	add	r22,r3,r22
    8220:	80800215 	stw	r2,8(r16)
    8224:	85800015 	stw	r22,0(r16)
    8228:	003fbf06 	br	8128 <__alt_data_end+0xff008128>
    822c:	81000017 	ldw	r4,0(r16)
    8230:	9027883a 	mov	r19,r18
    8234:	902f883a 	mov	r23,r18
    8238:	003f6c06 	br	7fec <__alt_data_end+0xff007fec>
    823c:	900d883a 	mov	r6,r18
    8240:	01400284 	movi	r5,10
    8244:	e009883a 	mov	r4,fp
    8248:	000878c0 	call	878c <memchr>
    824c:	10003e26 	beq	r2,zero,8348 <__sfvwrite_r+0x498>
    8250:	10800044 	addi	r2,r2,1
    8254:	1727c83a 	sub	r19,r2,fp
    8258:	02000044 	movi	r8,1
    825c:	003f9d06 	br	80d4 <__alt_data_end+0xff0080d4>
    8260:	80800517 	ldw	r2,20(r16)
    8264:	81400417 	ldw	r5,16(r16)
    8268:	81c00017 	ldw	r7,0(r16)
    826c:	10a7883a 	add	r19,r2,r2
    8270:	9885883a 	add	r2,r19,r2
    8274:	1026d7fa 	srli	r19,r2,31
    8278:	396dc83a 	sub	r22,r7,r5
    827c:	b1000044 	addi	r4,r22,1
    8280:	9885883a 	add	r2,r19,r2
    8284:	1027d07a 	srai	r19,r2,1
    8288:	2485883a 	add	r2,r4,r18
    828c:	980d883a 	mov	r6,r19
    8290:	9880022e 	bgeu	r19,r2,829c <__sfvwrite_r+0x3ec>
    8294:	1027883a 	mov	r19,r2
    8298:	100d883a 	mov	r6,r2
    829c:	18c1000c 	andi	r3,r3,1024
    82a0:	18001c26 	beq	r3,zero,8314 <__sfvwrite_r+0x464>
    82a4:	300b883a 	mov	r5,r6
    82a8:	a809883a 	mov	r4,r21
    82ac:	0002d500 	call	2d50 <_malloc_r>
    82b0:	102f883a 	mov	r23,r2
    82b4:	10002926 	beq	r2,zero,835c <__sfvwrite_r+0x4ac>
    82b8:	81400417 	ldw	r5,16(r16)
    82bc:	b00d883a 	mov	r6,r22
    82c0:	1009883a 	mov	r4,r2
    82c4:	00088700 	call	8870 <memcpy>
    82c8:	8080030b 	ldhu	r2,12(r16)
    82cc:	00fedfc4 	movi	r3,-1153
    82d0:	10c4703a 	and	r2,r2,r3
    82d4:	10802014 	ori	r2,r2,128
    82d8:	8080030d 	sth	r2,12(r16)
    82dc:	bd89883a 	add	r4,r23,r22
    82e0:	9d8fc83a 	sub	r7,r19,r22
    82e4:	85c00415 	stw	r23,16(r16)
    82e8:	84c00515 	stw	r19,20(r16)
    82ec:	81000015 	stw	r4,0(r16)
    82f0:	9027883a 	mov	r19,r18
    82f4:	81c00215 	stw	r7,8(r16)
    82f8:	902f883a 	mov	r23,r18
    82fc:	003f3b06 	br	7fec <__alt_data_end+0xff007fec>
    8300:	800b883a 	mov	r5,r16
    8304:	a809883a 	mov	r4,r21
    8308:	00076500 	call	7650 <_fflush_r>
    830c:	103fb926 	beq	r2,zero,81f4 <__alt_data_end+0xff0081f4>
    8310:	003f6506 	br	80a8 <__alt_data_end+0xff0080a8>
    8314:	a809883a 	mov	r4,r21
    8318:	0009c380 	call	9c38 <_realloc_r>
    831c:	102f883a 	mov	r23,r2
    8320:	103fee1e 	bne	r2,zero,82dc <__alt_data_end+0xff0082dc>
    8324:	81400417 	ldw	r5,16(r16)
    8328:	a809883a 	mov	r4,r21
    832c:	0007ba00 	call	7ba0 <_free_r>
    8330:	8080030b 	ldhu	r2,12(r16)
    8334:	00ffdfc4 	movi	r3,-129
    8338:	1884703a 	and	r2,r3,r2
    833c:	00c00304 	movi	r3,12
    8340:	a8c00015 	stw	r3,0(r21)
    8344:	003f5906 	br	80ac <__alt_data_end+0xff0080ac>
    8348:	94c00044 	addi	r19,r18,1
    834c:	02000044 	movi	r8,1
    8350:	003f6006 	br	80d4 <__alt_data_end+0xff0080d4>
    8354:	00bfffc4 	movi	r2,-1
    8358:	003f0306 	br	7f68 <__alt_data_end+0xff007f68>
    835c:	00800304 	movi	r2,12
    8360:	a8800015 	stw	r2,0(r21)
    8364:	8080030b 	ldhu	r2,12(r16)
    8368:	003f5006 	br	80ac <__alt_data_end+0xff0080ac>

0000836c <_fwalk>:
    836c:	defff704 	addi	sp,sp,-36
    8370:	dd000415 	stw	r20,16(sp)
    8374:	dfc00815 	stw	ra,32(sp)
    8378:	ddc00715 	stw	r23,28(sp)
    837c:	dd800615 	stw	r22,24(sp)
    8380:	dd400515 	stw	r21,20(sp)
    8384:	dcc00315 	stw	r19,12(sp)
    8388:	dc800215 	stw	r18,8(sp)
    838c:	dc400115 	stw	r17,4(sp)
    8390:	dc000015 	stw	r16,0(sp)
    8394:	2500b804 	addi	r20,r4,736
    8398:	a0002326 	beq	r20,zero,8428 <_fwalk+0xbc>
    839c:	282b883a 	mov	r21,r5
    83a0:	002f883a 	mov	r23,zero
    83a4:	05800044 	movi	r22,1
    83a8:	04ffffc4 	movi	r19,-1
    83ac:	a4400117 	ldw	r17,4(r20)
    83b0:	a4800217 	ldw	r18,8(r20)
    83b4:	8c7fffc4 	addi	r17,r17,-1
    83b8:	88000d16 	blt	r17,zero,83f0 <_fwalk+0x84>
    83bc:	94000304 	addi	r16,r18,12
    83c0:	94800384 	addi	r18,r18,14
    83c4:	8080000b 	ldhu	r2,0(r16)
    83c8:	8c7fffc4 	addi	r17,r17,-1
    83cc:	813ffd04 	addi	r4,r16,-12
    83d0:	b080042e 	bgeu	r22,r2,83e4 <_fwalk+0x78>
    83d4:	9080000f 	ldh	r2,0(r18)
    83d8:	14c00226 	beq	r2,r19,83e4 <_fwalk+0x78>
    83dc:	a83ee83a 	callr	r21
    83e0:	b8aeb03a 	or	r23,r23,r2
    83e4:	84001a04 	addi	r16,r16,104
    83e8:	94801a04 	addi	r18,r18,104
    83ec:	8cfff51e 	bne	r17,r19,83c4 <__alt_data_end+0xff0083c4>
    83f0:	a5000017 	ldw	r20,0(r20)
    83f4:	a03fed1e 	bne	r20,zero,83ac <__alt_data_end+0xff0083ac>
    83f8:	b805883a 	mov	r2,r23
    83fc:	dfc00817 	ldw	ra,32(sp)
    8400:	ddc00717 	ldw	r23,28(sp)
    8404:	dd800617 	ldw	r22,24(sp)
    8408:	dd400517 	ldw	r21,20(sp)
    840c:	dd000417 	ldw	r20,16(sp)
    8410:	dcc00317 	ldw	r19,12(sp)
    8414:	dc800217 	ldw	r18,8(sp)
    8418:	dc400117 	ldw	r17,4(sp)
    841c:	dc000017 	ldw	r16,0(sp)
    8420:	dec00904 	addi	sp,sp,36
    8424:	f800283a 	ret
    8428:	002f883a 	mov	r23,zero
    842c:	003ff206 	br	83f8 <__alt_data_end+0xff0083f8>

00008430 <_fwalk_reent>:
    8430:	defff704 	addi	sp,sp,-36
    8434:	dd000415 	stw	r20,16(sp)
    8438:	dfc00815 	stw	ra,32(sp)
    843c:	ddc00715 	stw	r23,28(sp)
    8440:	dd800615 	stw	r22,24(sp)
    8444:	dd400515 	stw	r21,20(sp)
    8448:	dcc00315 	stw	r19,12(sp)
    844c:	dc800215 	stw	r18,8(sp)
    8450:	dc400115 	stw	r17,4(sp)
    8454:	dc000015 	stw	r16,0(sp)
    8458:	2500b804 	addi	r20,r4,736
    845c:	a0002326 	beq	r20,zero,84ec <_fwalk_reent+0xbc>
    8460:	282b883a 	mov	r21,r5
    8464:	2027883a 	mov	r19,r4
    8468:	002f883a 	mov	r23,zero
    846c:	05800044 	movi	r22,1
    8470:	04bfffc4 	movi	r18,-1
    8474:	a4400117 	ldw	r17,4(r20)
    8478:	a4000217 	ldw	r16,8(r20)
    847c:	8c7fffc4 	addi	r17,r17,-1
    8480:	88000c16 	blt	r17,zero,84b4 <_fwalk_reent+0x84>
    8484:	84000304 	addi	r16,r16,12
    8488:	8080000b 	ldhu	r2,0(r16)
    848c:	8c7fffc4 	addi	r17,r17,-1
    8490:	817ffd04 	addi	r5,r16,-12
    8494:	b080052e 	bgeu	r22,r2,84ac <_fwalk_reent+0x7c>
    8498:	8080008f 	ldh	r2,2(r16)
    849c:	9809883a 	mov	r4,r19
    84a0:	14800226 	beq	r2,r18,84ac <_fwalk_reent+0x7c>
    84a4:	a83ee83a 	callr	r21
    84a8:	b8aeb03a 	or	r23,r23,r2
    84ac:	84001a04 	addi	r16,r16,104
    84b0:	8cbff51e 	bne	r17,r18,8488 <__alt_data_end+0xff008488>
    84b4:	a5000017 	ldw	r20,0(r20)
    84b8:	a03fee1e 	bne	r20,zero,8474 <__alt_data_end+0xff008474>
    84bc:	b805883a 	mov	r2,r23
    84c0:	dfc00817 	ldw	ra,32(sp)
    84c4:	ddc00717 	ldw	r23,28(sp)
    84c8:	dd800617 	ldw	r22,24(sp)
    84cc:	dd400517 	ldw	r21,20(sp)
    84d0:	dd000417 	ldw	r20,16(sp)
    84d4:	dcc00317 	ldw	r19,12(sp)
    84d8:	dc800217 	ldw	r18,8(sp)
    84dc:	dc400117 	ldw	r17,4(sp)
    84e0:	dc000017 	ldw	r16,0(sp)
    84e4:	dec00904 	addi	sp,sp,36
    84e8:	f800283a 	ret
    84ec:	002f883a 	mov	r23,zero
    84f0:	003ff206 	br	84bc <__alt_data_end+0xff0084bc>

000084f4 <_setlocale_r>:
    84f4:	30001b26 	beq	r6,zero,8564 <_setlocale_r+0x70>
    84f8:	01400074 	movhi	r5,1
    84fc:	defffe04 	addi	sp,sp,-8
    8500:	2946dc04 	addi	r5,r5,7024
    8504:	3009883a 	mov	r4,r6
    8508:	dc000015 	stw	r16,0(sp)
    850c:	dfc00115 	stw	ra,4(sp)
    8510:	3021883a 	mov	r16,r6
    8514:	000a34c0 	call	a34c <strcmp>
    8518:	1000061e 	bne	r2,zero,8534 <_setlocale_r+0x40>
    851c:	00800074 	movhi	r2,1
    8520:	1086db04 	addi	r2,r2,7020
    8524:	dfc00117 	ldw	ra,4(sp)
    8528:	dc000017 	ldw	r16,0(sp)
    852c:	dec00204 	addi	sp,sp,8
    8530:	f800283a 	ret
    8534:	01400074 	movhi	r5,1
    8538:	2946db04 	addi	r5,r5,7020
    853c:	8009883a 	mov	r4,r16
    8540:	000a34c0 	call	a34c <strcmp>
    8544:	103ff526 	beq	r2,zero,851c <__alt_data_end+0xff00851c>
    8548:	01400074 	movhi	r5,1
    854c:	2946c604 	addi	r5,r5,6936
    8550:	8009883a 	mov	r4,r16
    8554:	000a34c0 	call	a34c <strcmp>
    8558:	103ff026 	beq	r2,zero,851c <__alt_data_end+0xff00851c>
    855c:	0005883a 	mov	r2,zero
    8560:	003ff006 	br	8524 <__alt_data_end+0xff008524>
    8564:	00800074 	movhi	r2,1
    8568:	1086db04 	addi	r2,r2,7020
    856c:	f800283a 	ret

00008570 <__locale_charset>:
    8570:	00800074 	movhi	r2,1
    8574:	10898e04 	addi	r2,r2,9784
    8578:	f800283a 	ret

0000857c <__locale_mb_cur_max>:
    857c:	00800074 	movhi	r2,1
    8580:	108e2a04 	addi	r2,r2,14504
    8584:	10800017 	ldw	r2,0(r2)
    8588:	f800283a 	ret

0000858c <__locale_msgcharset>:
    858c:	00800074 	movhi	r2,1
    8590:	10898604 	addi	r2,r2,9752
    8594:	f800283a 	ret

00008598 <__locale_cjk_lang>:
    8598:	0005883a 	mov	r2,zero
    859c:	f800283a 	ret

000085a0 <_localeconv_r>:
    85a0:	00800074 	movhi	r2,1
    85a4:	10899604 	addi	r2,r2,9816
    85a8:	f800283a 	ret

000085ac <setlocale>:
    85ac:	00800074 	movhi	r2,1
    85b0:	108e2904 	addi	r2,r2,14500
    85b4:	280d883a 	mov	r6,r5
    85b8:	200b883a 	mov	r5,r4
    85bc:	11000017 	ldw	r4,0(r2)
    85c0:	00084f41 	jmpi	84f4 <_setlocale_r>

000085c4 <localeconv>:
    85c4:	00800074 	movhi	r2,1
    85c8:	10899604 	addi	r2,r2,9816
    85cc:	f800283a 	ret

000085d0 <__smakebuf_r>:
    85d0:	2880030b 	ldhu	r2,12(r5)
    85d4:	10c0008c 	andi	r3,r2,2
    85d8:	1800411e 	bne	r3,zero,86e0 <__smakebuf_r+0x110>
    85dc:	deffec04 	addi	sp,sp,-80
    85e0:	dc000f15 	stw	r16,60(sp)
    85e4:	2821883a 	mov	r16,r5
    85e8:	2940038f 	ldh	r5,14(r5)
    85ec:	dc401015 	stw	r17,64(sp)
    85f0:	dfc01315 	stw	ra,76(sp)
    85f4:	dcc01215 	stw	r19,72(sp)
    85f8:	dc801115 	stw	r18,68(sp)
    85fc:	2023883a 	mov	r17,r4
    8600:	28001c16 	blt	r5,zero,8674 <__smakebuf_r+0xa4>
    8604:	d80d883a 	mov	r6,sp
    8608:	000bef40 	call	bef4 <_fstat_r>
    860c:	10001816 	blt	r2,zero,8670 <__smakebuf_r+0xa0>
    8610:	d8800117 	ldw	r2,4(sp)
    8614:	00e00014 	movui	r3,32768
    8618:	10bc000c 	andi	r2,r2,61440
    861c:	14c80020 	cmpeqi	r19,r2,8192
    8620:	10c03726 	beq	r2,r3,8700 <__smakebuf_r+0x130>
    8624:	80c0030b 	ldhu	r3,12(r16)
    8628:	18c20014 	ori	r3,r3,2048
    862c:	80c0030d 	sth	r3,12(r16)
    8630:	00c80004 	movi	r3,8192
    8634:	10c0521e 	bne	r2,r3,8780 <__smakebuf_r+0x1b0>
    8638:	8140038f 	ldh	r5,14(r16)
    863c:	8809883a 	mov	r4,r17
    8640:	000bf500 	call	bf50 <_isatty_r>
    8644:	10004c26 	beq	r2,zero,8778 <__smakebuf_r+0x1a8>
    8648:	8080030b 	ldhu	r2,12(r16)
    864c:	80c010c4 	addi	r3,r16,67
    8650:	80c00015 	stw	r3,0(r16)
    8654:	10800054 	ori	r2,r2,1
    8658:	8080030d 	sth	r2,12(r16)
    865c:	00800044 	movi	r2,1
    8660:	80c00415 	stw	r3,16(r16)
    8664:	80800515 	stw	r2,20(r16)
    8668:	04810004 	movi	r18,1024
    866c:	00000706 	br	868c <__smakebuf_r+0xbc>
    8670:	8080030b 	ldhu	r2,12(r16)
    8674:	10c0200c 	andi	r3,r2,128
    8678:	18001f1e 	bne	r3,zero,86f8 <__smakebuf_r+0x128>
    867c:	04810004 	movi	r18,1024
    8680:	10820014 	ori	r2,r2,2048
    8684:	8080030d 	sth	r2,12(r16)
    8688:	0027883a 	mov	r19,zero
    868c:	900b883a 	mov	r5,r18
    8690:	8809883a 	mov	r4,r17
    8694:	0002d500 	call	2d50 <_malloc_r>
    8698:	10002c26 	beq	r2,zero,874c <__smakebuf_r+0x17c>
    869c:	80c0030b 	ldhu	r3,12(r16)
    86a0:	01000034 	movhi	r4,0
    86a4:	211db904 	addi	r4,r4,30436
    86a8:	89000f15 	stw	r4,60(r17)
    86ac:	18c02014 	ori	r3,r3,128
    86b0:	80c0030d 	sth	r3,12(r16)
    86b4:	80800015 	stw	r2,0(r16)
    86b8:	80800415 	stw	r2,16(r16)
    86bc:	84800515 	stw	r18,20(r16)
    86c0:	98001a1e 	bne	r19,zero,872c <__smakebuf_r+0x15c>
    86c4:	dfc01317 	ldw	ra,76(sp)
    86c8:	dcc01217 	ldw	r19,72(sp)
    86cc:	dc801117 	ldw	r18,68(sp)
    86d0:	dc401017 	ldw	r17,64(sp)
    86d4:	dc000f17 	ldw	r16,60(sp)
    86d8:	dec01404 	addi	sp,sp,80
    86dc:	f800283a 	ret
    86e0:	288010c4 	addi	r2,r5,67
    86e4:	28800015 	stw	r2,0(r5)
    86e8:	28800415 	stw	r2,16(r5)
    86ec:	00800044 	movi	r2,1
    86f0:	28800515 	stw	r2,20(r5)
    86f4:	f800283a 	ret
    86f8:	04801004 	movi	r18,64
    86fc:	003fe006 	br	8680 <__alt_data_end+0xff008680>
    8700:	81000a17 	ldw	r4,40(r16)
    8704:	00c00074 	movhi	r3,1
    8708:	18e8ba04 	addi	r3,r3,-23832
    870c:	20ffc51e 	bne	r4,r3,8624 <__alt_data_end+0xff008624>
    8710:	8080030b 	ldhu	r2,12(r16)
    8714:	04810004 	movi	r18,1024
    8718:	84801315 	stw	r18,76(r16)
    871c:	1484b03a 	or	r2,r2,r18
    8720:	8080030d 	sth	r2,12(r16)
    8724:	0027883a 	mov	r19,zero
    8728:	003fd806 	br	868c <__alt_data_end+0xff00868c>
    872c:	8140038f 	ldh	r5,14(r16)
    8730:	8809883a 	mov	r4,r17
    8734:	000bf500 	call	bf50 <_isatty_r>
    8738:	103fe226 	beq	r2,zero,86c4 <__alt_data_end+0xff0086c4>
    873c:	8080030b 	ldhu	r2,12(r16)
    8740:	10800054 	ori	r2,r2,1
    8744:	8080030d 	sth	r2,12(r16)
    8748:	003fde06 	br	86c4 <__alt_data_end+0xff0086c4>
    874c:	8080030b 	ldhu	r2,12(r16)
    8750:	10c0800c 	andi	r3,r2,512
    8754:	183fdb1e 	bne	r3,zero,86c4 <__alt_data_end+0xff0086c4>
    8758:	10800094 	ori	r2,r2,2
    875c:	80c010c4 	addi	r3,r16,67
    8760:	8080030d 	sth	r2,12(r16)
    8764:	00800044 	movi	r2,1
    8768:	80c00015 	stw	r3,0(r16)
    876c:	80c00415 	stw	r3,16(r16)
    8770:	80800515 	stw	r2,20(r16)
    8774:	003fd306 	br	86c4 <__alt_data_end+0xff0086c4>
    8778:	04810004 	movi	r18,1024
    877c:	003fc306 	br	868c <__alt_data_end+0xff00868c>
    8780:	0027883a 	mov	r19,zero
    8784:	04810004 	movi	r18,1024
    8788:	003fc006 	br	868c <__alt_data_end+0xff00868c>

0000878c <memchr>:
    878c:	208000cc 	andi	r2,r4,3
    8790:	280f883a 	mov	r7,r5
    8794:	10003426 	beq	r2,zero,8868 <memchr+0xdc>
    8798:	30bfffc4 	addi	r2,r6,-1
    879c:	30001a26 	beq	r6,zero,8808 <memchr+0x7c>
    87a0:	20c00003 	ldbu	r3,0(r4)
    87a4:	29803fcc 	andi	r6,r5,255
    87a8:	30c0051e 	bne	r6,r3,87c0 <memchr+0x34>
    87ac:	00001806 	br	8810 <memchr+0x84>
    87b0:	10001526 	beq	r2,zero,8808 <memchr+0x7c>
    87b4:	20c00003 	ldbu	r3,0(r4)
    87b8:	10bfffc4 	addi	r2,r2,-1
    87bc:	30c01426 	beq	r6,r3,8810 <memchr+0x84>
    87c0:	21000044 	addi	r4,r4,1
    87c4:	20c000cc 	andi	r3,r4,3
    87c8:	183ff91e 	bne	r3,zero,87b0 <__alt_data_end+0xff0087b0>
    87cc:	020000c4 	movi	r8,3
    87d0:	40801136 	bltu	r8,r2,8818 <memchr+0x8c>
    87d4:	10000c26 	beq	r2,zero,8808 <memchr+0x7c>
    87d8:	20c00003 	ldbu	r3,0(r4)
    87dc:	29403fcc 	andi	r5,r5,255
    87e0:	28c00b26 	beq	r5,r3,8810 <memchr+0x84>
    87e4:	20c00044 	addi	r3,r4,1
    87e8:	39803fcc 	andi	r6,r7,255
    87ec:	2089883a 	add	r4,r4,r2
    87f0:	00000306 	br	8800 <memchr+0x74>
    87f4:	18c00044 	addi	r3,r3,1
    87f8:	197fffc3 	ldbu	r5,-1(r3)
    87fc:	31400526 	beq	r6,r5,8814 <memchr+0x88>
    8800:	1805883a 	mov	r2,r3
    8804:	20fffb1e 	bne	r4,r3,87f4 <__alt_data_end+0xff0087f4>
    8808:	0005883a 	mov	r2,zero
    880c:	f800283a 	ret
    8810:	2005883a 	mov	r2,r4
    8814:	f800283a 	ret
    8818:	28c03fcc 	andi	r3,r5,255
    881c:	1812923a 	slli	r9,r3,8
    8820:	02ffbff4 	movhi	r11,65279
    8824:	02a02074 	movhi	r10,32897
    8828:	48d2b03a 	or	r9,r9,r3
    882c:	4806943a 	slli	r3,r9,16
    8830:	5affbfc4 	addi	r11,r11,-257
    8834:	52a02004 	addi	r10,r10,-32640
    8838:	48d2b03a 	or	r9,r9,r3
    883c:	20c00017 	ldw	r3,0(r4)
    8840:	48c6f03a 	xor	r3,r9,r3
    8844:	1acd883a 	add	r6,r3,r11
    8848:	00c6303a 	nor	r3,zero,r3
    884c:	30c6703a 	and	r3,r6,r3
    8850:	1a86703a 	and	r3,r3,r10
    8854:	183fe01e 	bne	r3,zero,87d8 <__alt_data_end+0xff0087d8>
    8858:	10bfff04 	addi	r2,r2,-4
    885c:	21000104 	addi	r4,r4,4
    8860:	40bff636 	bltu	r8,r2,883c <__alt_data_end+0xff00883c>
    8864:	003fdb06 	br	87d4 <__alt_data_end+0xff0087d4>
    8868:	3005883a 	mov	r2,r6
    886c:	003fd706 	br	87cc <__alt_data_end+0xff0087cc>

00008870 <memcpy>:
    8870:	defffd04 	addi	sp,sp,-12
    8874:	dfc00215 	stw	ra,8(sp)
    8878:	dc400115 	stw	r17,4(sp)
    887c:	dc000015 	stw	r16,0(sp)
    8880:	00c003c4 	movi	r3,15
    8884:	2005883a 	mov	r2,r4
    8888:	1980452e 	bgeu	r3,r6,89a0 <memcpy+0x130>
    888c:	2906b03a 	or	r3,r5,r4
    8890:	18c000cc 	andi	r3,r3,3
    8894:	1800441e 	bne	r3,zero,89a8 <memcpy+0x138>
    8898:	347ffc04 	addi	r17,r6,-16
    889c:	8822d13a 	srli	r17,r17,4
    88a0:	28c00104 	addi	r3,r5,4
    88a4:	23400104 	addi	r13,r4,4
    88a8:	8820913a 	slli	r16,r17,4
    88ac:	2b000204 	addi	r12,r5,8
    88b0:	22c00204 	addi	r11,r4,8
    88b4:	84000504 	addi	r16,r16,20
    88b8:	2a800304 	addi	r10,r5,12
    88bc:	22400304 	addi	r9,r4,12
    88c0:	2c21883a 	add	r16,r5,r16
    88c4:	2811883a 	mov	r8,r5
    88c8:	200f883a 	mov	r7,r4
    88cc:	41000017 	ldw	r4,0(r8)
    88d0:	1fc00017 	ldw	ra,0(r3)
    88d4:	63c00017 	ldw	r15,0(r12)
    88d8:	39000015 	stw	r4,0(r7)
    88dc:	53800017 	ldw	r14,0(r10)
    88e0:	6fc00015 	stw	ra,0(r13)
    88e4:	5bc00015 	stw	r15,0(r11)
    88e8:	4b800015 	stw	r14,0(r9)
    88ec:	18c00404 	addi	r3,r3,16
    88f0:	39c00404 	addi	r7,r7,16
    88f4:	42000404 	addi	r8,r8,16
    88f8:	6b400404 	addi	r13,r13,16
    88fc:	63000404 	addi	r12,r12,16
    8900:	5ac00404 	addi	r11,r11,16
    8904:	52800404 	addi	r10,r10,16
    8908:	4a400404 	addi	r9,r9,16
    890c:	1c3fef1e 	bne	r3,r16,88cc <__alt_data_end+0xff0088cc>
    8910:	89c00044 	addi	r7,r17,1
    8914:	380e913a 	slli	r7,r7,4
    8918:	310003cc 	andi	r4,r6,15
    891c:	02c000c4 	movi	r11,3
    8920:	11c7883a 	add	r3,r2,r7
    8924:	29cb883a 	add	r5,r5,r7
    8928:	5900212e 	bgeu	r11,r4,89b0 <memcpy+0x140>
    892c:	1813883a 	mov	r9,r3
    8930:	2811883a 	mov	r8,r5
    8934:	200f883a 	mov	r7,r4
    8938:	42800017 	ldw	r10,0(r8)
    893c:	4a400104 	addi	r9,r9,4
    8940:	39ffff04 	addi	r7,r7,-4
    8944:	4abfff15 	stw	r10,-4(r9)
    8948:	42000104 	addi	r8,r8,4
    894c:	59fffa36 	bltu	r11,r7,8938 <__alt_data_end+0xff008938>
    8950:	213fff04 	addi	r4,r4,-4
    8954:	2008d0ba 	srli	r4,r4,2
    8958:	318000cc 	andi	r6,r6,3
    895c:	21000044 	addi	r4,r4,1
    8960:	2109883a 	add	r4,r4,r4
    8964:	2109883a 	add	r4,r4,r4
    8968:	1907883a 	add	r3,r3,r4
    896c:	290b883a 	add	r5,r5,r4
    8970:	30000626 	beq	r6,zero,898c <memcpy+0x11c>
    8974:	198d883a 	add	r6,r3,r6
    8978:	29c00003 	ldbu	r7,0(r5)
    897c:	18c00044 	addi	r3,r3,1
    8980:	29400044 	addi	r5,r5,1
    8984:	19ffffc5 	stb	r7,-1(r3)
    8988:	19bffb1e 	bne	r3,r6,8978 <__alt_data_end+0xff008978>
    898c:	dfc00217 	ldw	ra,8(sp)
    8990:	dc400117 	ldw	r17,4(sp)
    8994:	dc000017 	ldw	r16,0(sp)
    8998:	dec00304 	addi	sp,sp,12
    899c:	f800283a 	ret
    89a0:	2007883a 	mov	r3,r4
    89a4:	003ff206 	br	8970 <__alt_data_end+0xff008970>
    89a8:	2007883a 	mov	r3,r4
    89ac:	003ff106 	br	8974 <__alt_data_end+0xff008974>
    89b0:	200d883a 	mov	r6,r4
    89b4:	003fee06 	br	8970 <__alt_data_end+0xff008970>

000089b8 <memmove>:
    89b8:	2005883a 	mov	r2,r4
    89bc:	29000b2e 	bgeu	r5,r4,89ec <memmove+0x34>
    89c0:	298f883a 	add	r7,r5,r6
    89c4:	21c0092e 	bgeu	r4,r7,89ec <memmove+0x34>
    89c8:	2187883a 	add	r3,r4,r6
    89cc:	198bc83a 	sub	r5,r3,r6
    89d0:	30004826 	beq	r6,zero,8af4 <memmove+0x13c>
    89d4:	39ffffc4 	addi	r7,r7,-1
    89d8:	39000003 	ldbu	r4,0(r7)
    89dc:	18ffffc4 	addi	r3,r3,-1
    89e0:	19000005 	stb	r4,0(r3)
    89e4:	28fffb1e 	bne	r5,r3,89d4 <__alt_data_end+0xff0089d4>
    89e8:	f800283a 	ret
    89ec:	00c003c4 	movi	r3,15
    89f0:	1980412e 	bgeu	r3,r6,8af8 <memmove+0x140>
    89f4:	2886b03a 	or	r3,r5,r2
    89f8:	18c000cc 	andi	r3,r3,3
    89fc:	1800401e 	bne	r3,zero,8b00 <memmove+0x148>
    8a00:	33fffc04 	addi	r15,r6,-16
    8a04:	781ed13a 	srli	r15,r15,4
    8a08:	28c00104 	addi	r3,r5,4
    8a0c:	13400104 	addi	r13,r2,4
    8a10:	781c913a 	slli	r14,r15,4
    8a14:	2b000204 	addi	r12,r5,8
    8a18:	12c00204 	addi	r11,r2,8
    8a1c:	73800504 	addi	r14,r14,20
    8a20:	2a800304 	addi	r10,r5,12
    8a24:	12400304 	addi	r9,r2,12
    8a28:	2b9d883a 	add	r14,r5,r14
    8a2c:	2811883a 	mov	r8,r5
    8a30:	100f883a 	mov	r7,r2
    8a34:	41000017 	ldw	r4,0(r8)
    8a38:	39c00404 	addi	r7,r7,16
    8a3c:	18c00404 	addi	r3,r3,16
    8a40:	393ffc15 	stw	r4,-16(r7)
    8a44:	193ffc17 	ldw	r4,-16(r3)
    8a48:	6b400404 	addi	r13,r13,16
    8a4c:	5ac00404 	addi	r11,r11,16
    8a50:	693ffc15 	stw	r4,-16(r13)
    8a54:	61000017 	ldw	r4,0(r12)
    8a58:	4a400404 	addi	r9,r9,16
    8a5c:	42000404 	addi	r8,r8,16
    8a60:	593ffc15 	stw	r4,-16(r11)
    8a64:	51000017 	ldw	r4,0(r10)
    8a68:	63000404 	addi	r12,r12,16
    8a6c:	52800404 	addi	r10,r10,16
    8a70:	493ffc15 	stw	r4,-16(r9)
    8a74:	1bbfef1e 	bne	r3,r14,8a34 <__alt_data_end+0xff008a34>
    8a78:	79000044 	addi	r4,r15,1
    8a7c:	2008913a 	slli	r4,r4,4
    8a80:	328003cc 	andi	r10,r6,15
    8a84:	02c000c4 	movi	r11,3
    8a88:	1107883a 	add	r3,r2,r4
    8a8c:	290b883a 	add	r5,r5,r4
    8a90:	5a801e2e 	bgeu	r11,r10,8b0c <memmove+0x154>
    8a94:	1813883a 	mov	r9,r3
    8a98:	2811883a 	mov	r8,r5
    8a9c:	500f883a 	mov	r7,r10
    8aa0:	41000017 	ldw	r4,0(r8)
    8aa4:	4a400104 	addi	r9,r9,4
    8aa8:	39ffff04 	addi	r7,r7,-4
    8aac:	493fff15 	stw	r4,-4(r9)
    8ab0:	42000104 	addi	r8,r8,4
    8ab4:	59fffa36 	bltu	r11,r7,8aa0 <__alt_data_end+0xff008aa0>
    8ab8:	513fff04 	addi	r4,r10,-4
    8abc:	2008d0ba 	srli	r4,r4,2
    8ac0:	318000cc 	andi	r6,r6,3
    8ac4:	21000044 	addi	r4,r4,1
    8ac8:	2109883a 	add	r4,r4,r4
    8acc:	2109883a 	add	r4,r4,r4
    8ad0:	1907883a 	add	r3,r3,r4
    8ad4:	290b883a 	add	r5,r5,r4
    8ad8:	30000b26 	beq	r6,zero,8b08 <memmove+0x150>
    8adc:	198d883a 	add	r6,r3,r6
    8ae0:	29c00003 	ldbu	r7,0(r5)
    8ae4:	18c00044 	addi	r3,r3,1
    8ae8:	29400044 	addi	r5,r5,1
    8aec:	19ffffc5 	stb	r7,-1(r3)
    8af0:	19bffb1e 	bne	r3,r6,8ae0 <__alt_data_end+0xff008ae0>
    8af4:	f800283a 	ret
    8af8:	1007883a 	mov	r3,r2
    8afc:	003ff606 	br	8ad8 <__alt_data_end+0xff008ad8>
    8b00:	1007883a 	mov	r3,r2
    8b04:	003ff506 	br	8adc <__alt_data_end+0xff008adc>
    8b08:	f800283a 	ret
    8b0c:	500d883a 	mov	r6,r10
    8b10:	003ff106 	br	8ad8 <__alt_data_end+0xff008ad8>

00008b14 <memset>:
    8b14:	20c000cc 	andi	r3,r4,3
    8b18:	2005883a 	mov	r2,r4
    8b1c:	18004426 	beq	r3,zero,8c30 <memset+0x11c>
    8b20:	31ffffc4 	addi	r7,r6,-1
    8b24:	30004026 	beq	r6,zero,8c28 <memset+0x114>
    8b28:	2813883a 	mov	r9,r5
    8b2c:	200d883a 	mov	r6,r4
    8b30:	2007883a 	mov	r3,r4
    8b34:	00000406 	br	8b48 <memset+0x34>
    8b38:	3a3fffc4 	addi	r8,r7,-1
    8b3c:	31800044 	addi	r6,r6,1
    8b40:	38003926 	beq	r7,zero,8c28 <memset+0x114>
    8b44:	400f883a 	mov	r7,r8
    8b48:	18c00044 	addi	r3,r3,1
    8b4c:	32400005 	stb	r9,0(r6)
    8b50:	1a0000cc 	andi	r8,r3,3
    8b54:	403ff81e 	bne	r8,zero,8b38 <__alt_data_end+0xff008b38>
    8b58:	010000c4 	movi	r4,3
    8b5c:	21c02d2e 	bgeu	r4,r7,8c14 <memset+0x100>
    8b60:	29003fcc 	andi	r4,r5,255
    8b64:	200c923a 	slli	r6,r4,8
    8b68:	3108b03a 	or	r4,r6,r4
    8b6c:	200c943a 	slli	r6,r4,16
    8b70:	218cb03a 	or	r6,r4,r6
    8b74:	010003c4 	movi	r4,15
    8b78:	21c0182e 	bgeu	r4,r7,8bdc <memset+0xc8>
    8b7c:	3b3ffc04 	addi	r12,r7,-16
    8b80:	6018d13a 	srli	r12,r12,4
    8b84:	1a000104 	addi	r8,r3,4
    8b88:	1ac00204 	addi	r11,r3,8
    8b8c:	6008913a 	slli	r4,r12,4
    8b90:	1a800304 	addi	r10,r3,12
    8b94:	1813883a 	mov	r9,r3
    8b98:	21000504 	addi	r4,r4,20
    8b9c:	1909883a 	add	r4,r3,r4
    8ba0:	49800015 	stw	r6,0(r9)
    8ba4:	41800015 	stw	r6,0(r8)
    8ba8:	59800015 	stw	r6,0(r11)
    8bac:	51800015 	stw	r6,0(r10)
    8bb0:	42000404 	addi	r8,r8,16
    8bb4:	4a400404 	addi	r9,r9,16
    8bb8:	5ac00404 	addi	r11,r11,16
    8bbc:	52800404 	addi	r10,r10,16
    8bc0:	413ff71e 	bne	r8,r4,8ba0 <__alt_data_end+0xff008ba0>
    8bc4:	63000044 	addi	r12,r12,1
    8bc8:	6018913a 	slli	r12,r12,4
    8bcc:	39c003cc 	andi	r7,r7,15
    8bd0:	010000c4 	movi	r4,3
    8bd4:	1b07883a 	add	r3,r3,r12
    8bd8:	21c00e2e 	bgeu	r4,r7,8c14 <memset+0x100>
    8bdc:	1813883a 	mov	r9,r3
    8be0:	3811883a 	mov	r8,r7
    8be4:	010000c4 	movi	r4,3
    8be8:	49800015 	stw	r6,0(r9)
    8bec:	423fff04 	addi	r8,r8,-4
    8bf0:	4a400104 	addi	r9,r9,4
    8bf4:	223ffc36 	bltu	r4,r8,8be8 <__alt_data_end+0xff008be8>
    8bf8:	393fff04 	addi	r4,r7,-4
    8bfc:	2008d0ba 	srli	r4,r4,2
    8c00:	39c000cc 	andi	r7,r7,3
    8c04:	21000044 	addi	r4,r4,1
    8c08:	2109883a 	add	r4,r4,r4
    8c0c:	2109883a 	add	r4,r4,r4
    8c10:	1907883a 	add	r3,r3,r4
    8c14:	38000526 	beq	r7,zero,8c2c <memset+0x118>
    8c18:	19cf883a 	add	r7,r3,r7
    8c1c:	19400005 	stb	r5,0(r3)
    8c20:	18c00044 	addi	r3,r3,1
    8c24:	38fffd1e 	bne	r7,r3,8c1c <__alt_data_end+0xff008c1c>
    8c28:	f800283a 	ret
    8c2c:	f800283a 	ret
    8c30:	2007883a 	mov	r3,r4
    8c34:	300f883a 	mov	r7,r6
    8c38:	003fc706 	br	8b58 <__alt_data_end+0xff008b58>

00008c3c <_Balloc>:
    8c3c:	20801317 	ldw	r2,76(r4)
    8c40:	defffc04 	addi	sp,sp,-16
    8c44:	dc400115 	stw	r17,4(sp)
    8c48:	dc000015 	stw	r16,0(sp)
    8c4c:	dfc00315 	stw	ra,12(sp)
    8c50:	dc800215 	stw	r18,8(sp)
    8c54:	2023883a 	mov	r17,r4
    8c58:	2821883a 	mov	r16,r5
    8c5c:	10000f26 	beq	r2,zero,8c9c <_Balloc+0x60>
    8c60:	8407883a 	add	r3,r16,r16
    8c64:	18c7883a 	add	r3,r3,r3
    8c68:	10c7883a 	add	r3,r2,r3
    8c6c:	18800017 	ldw	r2,0(r3)
    8c70:	10001126 	beq	r2,zero,8cb8 <_Balloc+0x7c>
    8c74:	11000017 	ldw	r4,0(r2)
    8c78:	19000015 	stw	r4,0(r3)
    8c7c:	10000415 	stw	zero,16(r2)
    8c80:	10000315 	stw	zero,12(r2)
    8c84:	dfc00317 	ldw	ra,12(sp)
    8c88:	dc800217 	ldw	r18,8(sp)
    8c8c:	dc400117 	ldw	r17,4(sp)
    8c90:	dc000017 	ldw	r16,0(sp)
    8c94:	dec00404 	addi	sp,sp,16
    8c98:	f800283a 	ret
    8c9c:	01800844 	movi	r6,33
    8ca0:	01400104 	movi	r5,4
    8ca4:	000bb240 	call	bb24 <_calloc_r>
    8ca8:	88801315 	stw	r2,76(r17)
    8cac:	103fec1e 	bne	r2,zero,8c60 <__alt_data_end+0xff008c60>
    8cb0:	0005883a 	mov	r2,zero
    8cb4:	003ff306 	br	8c84 <__alt_data_end+0xff008c84>
    8cb8:	01400044 	movi	r5,1
    8cbc:	2c24983a 	sll	r18,r5,r16
    8cc0:	8809883a 	mov	r4,r17
    8cc4:	91800144 	addi	r6,r18,5
    8cc8:	318d883a 	add	r6,r6,r6
    8ccc:	318d883a 	add	r6,r6,r6
    8cd0:	000bb240 	call	bb24 <_calloc_r>
    8cd4:	103ff626 	beq	r2,zero,8cb0 <__alt_data_end+0xff008cb0>
    8cd8:	14000115 	stw	r16,4(r2)
    8cdc:	14800215 	stw	r18,8(r2)
    8ce0:	003fe606 	br	8c7c <__alt_data_end+0xff008c7c>

00008ce4 <_Bfree>:
    8ce4:	28000826 	beq	r5,zero,8d08 <_Bfree+0x24>
    8ce8:	28c00117 	ldw	r3,4(r5)
    8cec:	20801317 	ldw	r2,76(r4)
    8cf0:	18c7883a 	add	r3,r3,r3
    8cf4:	18c7883a 	add	r3,r3,r3
    8cf8:	10c5883a 	add	r2,r2,r3
    8cfc:	10c00017 	ldw	r3,0(r2)
    8d00:	28c00015 	stw	r3,0(r5)
    8d04:	11400015 	stw	r5,0(r2)
    8d08:	f800283a 	ret

00008d0c <__multadd>:
    8d0c:	defffa04 	addi	sp,sp,-24
    8d10:	dc800315 	stw	r18,12(sp)
    8d14:	dc400215 	stw	r17,8(sp)
    8d18:	dc000115 	stw	r16,4(sp)
    8d1c:	2823883a 	mov	r17,r5
    8d20:	2c000417 	ldw	r16,16(r5)
    8d24:	dfc00515 	stw	ra,20(sp)
    8d28:	dcc00415 	stw	r19,16(sp)
    8d2c:	2025883a 	mov	r18,r4
    8d30:	29400504 	addi	r5,r5,20
    8d34:	0011883a 	mov	r8,zero
    8d38:	28c00017 	ldw	r3,0(r5)
    8d3c:	29400104 	addi	r5,r5,4
    8d40:	42000044 	addi	r8,r8,1
    8d44:	18bfffcc 	andi	r2,r3,65535
    8d48:	1185383a 	mul	r2,r2,r6
    8d4c:	1806d43a 	srli	r3,r3,16
    8d50:	11cf883a 	add	r7,r2,r7
    8d54:	3808d43a 	srli	r4,r7,16
    8d58:	1987383a 	mul	r3,r3,r6
    8d5c:	38bfffcc 	andi	r2,r7,65535
    8d60:	1907883a 	add	r3,r3,r4
    8d64:	1808943a 	slli	r4,r3,16
    8d68:	180ed43a 	srli	r7,r3,16
    8d6c:	2085883a 	add	r2,r4,r2
    8d70:	28bfff15 	stw	r2,-4(r5)
    8d74:	443ff016 	blt	r8,r16,8d38 <__alt_data_end+0xff008d38>
    8d78:	38000926 	beq	r7,zero,8da0 <__multadd+0x94>
    8d7c:	88800217 	ldw	r2,8(r17)
    8d80:	80800f0e 	bge	r16,r2,8dc0 <__multadd+0xb4>
    8d84:	80800144 	addi	r2,r16,5
    8d88:	1085883a 	add	r2,r2,r2
    8d8c:	1085883a 	add	r2,r2,r2
    8d90:	8885883a 	add	r2,r17,r2
    8d94:	11c00015 	stw	r7,0(r2)
    8d98:	84000044 	addi	r16,r16,1
    8d9c:	8c000415 	stw	r16,16(r17)
    8da0:	8805883a 	mov	r2,r17
    8da4:	dfc00517 	ldw	ra,20(sp)
    8da8:	dcc00417 	ldw	r19,16(sp)
    8dac:	dc800317 	ldw	r18,12(sp)
    8db0:	dc400217 	ldw	r17,8(sp)
    8db4:	dc000117 	ldw	r16,4(sp)
    8db8:	dec00604 	addi	sp,sp,24
    8dbc:	f800283a 	ret
    8dc0:	89400117 	ldw	r5,4(r17)
    8dc4:	9009883a 	mov	r4,r18
    8dc8:	d9c00015 	stw	r7,0(sp)
    8dcc:	29400044 	addi	r5,r5,1
    8dd0:	0008c3c0 	call	8c3c <_Balloc>
    8dd4:	89800417 	ldw	r6,16(r17)
    8dd8:	89400304 	addi	r5,r17,12
    8ddc:	11000304 	addi	r4,r2,12
    8de0:	31800084 	addi	r6,r6,2
    8de4:	318d883a 	add	r6,r6,r6
    8de8:	318d883a 	add	r6,r6,r6
    8dec:	1027883a 	mov	r19,r2
    8df0:	00088700 	call	8870 <memcpy>
    8df4:	d9c00017 	ldw	r7,0(sp)
    8df8:	88000a26 	beq	r17,zero,8e24 <__multadd+0x118>
    8dfc:	88c00117 	ldw	r3,4(r17)
    8e00:	90801317 	ldw	r2,76(r18)
    8e04:	18c7883a 	add	r3,r3,r3
    8e08:	18c7883a 	add	r3,r3,r3
    8e0c:	10c5883a 	add	r2,r2,r3
    8e10:	10c00017 	ldw	r3,0(r2)
    8e14:	88c00015 	stw	r3,0(r17)
    8e18:	14400015 	stw	r17,0(r2)
    8e1c:	9823883a 	mov	r17,r19
    8e20:	003fd806 	br	8d84 <__alt_data_end+0xff008d84>
    8e24:	9823883a 	mov	r17,r19
    8e28:	003fd606 	br	8d84 <__alt_data_end+0xff008d84>

00008e2c <__s2b>:
    8e2c:	defff904 	addi	sp,sp,-28
    8e30:	dc400115 	stw	r17,4(sp)
    8e34:	dc000015 	stw	r16,0(sp)
    8e38:	2023883a 	mov	r17,r4
    8e3c:	2821883a 	mov	r16,r5
    8e40:	39000204 	addi	r4,r7,8
    8e44:	01400244 	movi	r5,9
    8e48:	dcc00315 	stw	r19,12(sp)
    8e4c:	dc800215 	stw	r18,8(sp)
    8e50:	dfc00615 	stw	ra,24(sp)
    8e54:	dd400515 	stw	r21,20(sp)
    8e58:	dd000415 	stw	r20,16(sp)
    8e5c:	3825883a 	mov	r18,r7
    8e60:	3027883a 	mov	r19,r6
    8e64:	00021800 	call	2180 <__divsi3>
    8e68:	00c00044 	movi	r3,1
    8e6c:	000b883a 	mov	r5,zero
    8e70:	1880030e 	bge	r3,r2,8e80 <__s2b+0x54>
    8e74:	18c7883a 	add	r3,r3,r3
    8e78:	29400044 	addi	r5,r5,1
    8e7c:	18bffd16 	blt	r3,r2,8e74 <__alt_data_end+0xff008e74>
    8e80:	8809883a 	mov	r4,r17
    8e84:	0008c3c0 	call	8c3c <_Balloc>
    8e88:	d8c00717 	ldw	r3,28(sp)
    8e8c:	10c00515 	stw	r3,20(r2)
    8e90:	00c00044 	movi	r3,1
    8e94:	10c00415 	stw	r3,16(r2)
    8e98:	00c00244 	movi	r3,9
    8e9c:	1cc0210e 	bge	r3,r19,8f24 <__s2b+0xf8>
    8ea0:	80eb883a 	add	r21,r16,r3
    8ea4:	a829883a 	mov	r20,r21
    8ea8:	84e1883a 	add	r16,r16,r19
    8eac:	a1c00007 	ldb	r7,0(r20)
    8eb0:	01800284 	movi	r6,10
    8eb4:	a5000044 	addi	r20,r20,1
    8eb8:	100b883a 	mov	r5,r2
    8ebc:	39fff404 	addi	r7,r7,-48
    8ec0:	8809883a 	mov	r4,r17
    8ec4:	0008d0c0 	call	8d0c <__multadd>
    8ec8:	a43ff81e 	bne	r20,r16,8eac <__alt_data_end+0xff008eac>
    8ecc:	ace1883a 	add	r16,r21,r19
    8ed0:	843ffe04 	addi	r16,r16,-8
    8ed4:	9c800a0e 	bge	r19,r18,8f00 <__s2b+0xd4>
    8ed8:	94e5c83a 	sub	r18,r18,r19
    8edc:	84a5883a 	add	r18,r16,r18
    8ee0:	81c00007 	ldb	r7,0(r16)
    8ee4:	01800284 	movi	r6,10
    8ee8:	84000044 	addi	r16,r16,1
    8eec:	100b883a 	mov	r5,r2
    8ef0:	39fff404 	addi	r7,r7,-48
    8ef4:	8809883a 	mov	r4,r17
    8ef8:	0008d0c0 	call	8d0c <__multadd>
    8efc:	84bff81e 	bne	r16,r18,8ee0 <__alt_data_end+0xff008ee0>
    8f00:	dfc00617 	ldw	ra,24(sp)
    8f04:	dd400517 	ldw	r21,20(sp)
    8f08:	dd000417 	ldw	r20,16(sp)
    8f0c:	dcc00317 	ldw	r19,12(sp)
    8f10:	dc800217 	ldw	r18,8(sp)
    8f14:	dc400117 	ldw	r17,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00704 	addi	sp,sp,28
    8f20:	f800283a 	ret
    8f24:	84000284 	addi	r16,r16,10
    8f28:	1827883a 	mov	r19,r3
    8f2c:	003fe906 	br	8ed4 <__alt_data_end+0xff008ed4>

00008f30 <__hi0bits>:
    8f30:	20bfffec 	andhi	r2,r4,65535
    8f34:	1000141e 	bne	r2,zero,8f88 <__hi0bits+0x58>
    8f38:	2008943a 	slli	r4,r4,16
    8f3c:	00800404 	movi	r2,16
    8f40:	20ffc02c 	andhi	r3,r4,65280
    8f44:	1800021e 	bne	r3,zero,8f50 <__hi0bits+0x20>
    8f48:	2008923a 	slli	r4,r4,8
    8f4c:	10800204 	addi	r2,r2,8
    8f50:	20fc002c 	andhi	r3,r4,61440
    8f54:	1800021e 	bne	r3,zero,8f60 <__hi0bits+0x30>
    8f58:	2008913a 	slli	r4,r4,4
    8f5c:	10800104 	addi	r2,r2,4
    8f60:	20f0002c 	andhi	r3,r4,49152
    8f64:	1800031e 	bne	r3,zero,8f74 <__hi0bits+0x44>
    8f68:	2109883a 	add	r4,r4,r4
    8f6c:	10800084 	addi	r2,r2,2
    8f70:	2109883a 	add	r4,r4,r4
    8f74:	20000316 	blt	r4,zero,8f84 <__hi0bits+0x54>
    8f78:	2110002c 	andhi	r4,r4,16384
    8f7c:	2000041e 	bne	r4,zero,8f90 <__hi0bits+0x60>
    8f80:	00800804 	movi	r2,32
    8f84:	f800283a 	ret
    8f88:	0005883a 	mov	r2,zero
    8f8c:	003fec06 	br	8f40 <__alt_data_end+0xff008f40>
    8f90:	10800044 	addi	r2,r2,1
    8f94:	f800283a 	ret

00008f98 <__lo0bits>:
    8f98:	20c00017 	ldw	r3,0(r4)
    8f9c:	188001cc 	andi	r2,r3,7
    8fa0:	10000826 	beq	r2,zero,8fc4 <__lo0bits+0x2c>
    8fa4:	1880004c 	andi	r2,r3,1
    8fa8:	1000211e 	bne	r2,zero,9030 <__lo0bits+0x98>
    8fac:	1880008c 	andi	r2,r3,2
    8fb0:	1000211e 	bne	r2,zero,9038 <__lo0bits+0xa0>
    8fb4:	1806d0ba 	srli	r3,r3,2
    8fb8:	00800084 	movi	r2,2
    8fbc:	20c00015 	stw	r3,0(r4)
    8fc0:	f800283a 	ret
    8fc4:	18bfffcc 	andi	r2,r3,65535
    8fc8:	10001326 	beq	r2,zero,9018 <__lo0bits+0x80>
    8fcc:	0005883a 	mov	r2,zero
    8fd0:	19403fcc 	andi	r5,r3,255
    8fd4:	2800021e 	bne	r5,zero,8fe0 <__lo0bits+0x48>
    8fd8:	1806d23a 	srli	r3,r3,8
    8fdc:	10800204 	addi	r2,r2,8
    8fe0:	194003cc 	andi	r5,r3,15
    8fe4:	2800021e 	bne	r5,zero,8ff0 <__lo0bits+0x58>
    8fe8:	1806d13a 	srli	r3,r3,4
    8fec:	10800104 	addi	r2,r2,4
    8ff0:	194000cc 	andi	r5,r3,3
    8ff4:	2800021e 	bne	r5,zero,9000 <__lo0bits+0x68>
    8ff8:	1806d0ba 	srli	r3,r3,2
    8ffc:	10800084 	addi	r2,r2,2
    9000:	1940004c 	andi	r5,r3,1
    9004:	2800081e 	bne	r5,zero,9028 <__lo0bits+0x90>
    9008:	1806d07a 	srli	r3,r3,1
    900c:	1800051e 	bne	r3,zero,9024 <__lo0bits+0x8c>
    9010:	00800804 	movi	r2,32
    9014:	f800283a 	ret
    9018:	1806d43a 	srli	r3,r3,16
    901c:	00800404 	movi	r2,16
    9020:	003feb06 	br	8fd0 <__alt_data_end+0xff008fd0>
    9024:	10800044 	addi	r2,r2,1
    9028:	20c00015 	stw	r3,0(r4)
    902c:	f800283a 	ret
    9030:	0005883a 	mov	r2,zero
    9034:	f800283a 	ret
    9038:	1806d07a 	srli	r3,r3,1
    903c:	00800044 	movi	r2,1
    9040:	20c00015 	stw	r3,0(r4)
    9044:	f800283a 	ret

00009048 <__i2b>:
    9048:	defffd04 	addi	sp,sp,-12
    904c:	dc000015 	stw	r16,0(sp)
    9050:	04000044 	movi	r16,1
    9054:	dc400115 	stw	r17,4(sp)
    9058:	2823883a 	mov	r17,r5
    905c:	800b883a 	mov	r5,r16
    9060:	dfc00215 	stw	ra,8(sp)
    9064:	0008c3c0 	call	8c3c <_Balloc>
    9068:	14400515 	stw	r17,20(r2)
    906c:	14000415 	stw	r16,16(r2)
    9070:	dfc00217 	ldw	ra,8(sp)
    9074:	dc400117 	ldw	r17,4(sp)
    9078:	dc000017 	ldw	r16,0(sp)
    907c:	dec00304 	addi	sp,sp,12
    9080:	f800283a 	ret

00009084 <__multiply>:
    9084:	defffa04 	addi	sp,sp,-24
    9088:	dcc00315 	stw	r19,12(sp)
    908c:	dc800215 	stw	r18,8(sp)
    9090:	34c00417 	ldw	r19,16(r6)
    9094:	2c800417 	ldw	r18,16(r5)
    9098:	dd000415 	stw	r20,16(sp)
    909c:	dc400115 	stw	r17,4(sp)
    90a0:	dfc00515 	stw	ra,20(sp)
    90a4:	dc000015 	stw	r16,0(sp)
    90a8:	2829883a 	mov	r20,r5
    90ac:	3023883a 	mov	r17,r6
    90b0:	94c0050e 	bge	r18,r19,90c8 <__multiply+0x44>
    90b4:	9007883a 	mov	r3,r18
    90b8:	3029883a 	mov	r20,r6
    90bc:	9825883a 	mov	r18,r19
    90c0:	2823883a 	mov	r17,r5
    90c4:	1827883a 	mov	r19,r3
    90c8:	a0800217 	ldw	r2,8(r20)
    90cc:	94e1883a 	add	r16,r18,r19
    90d0:	a1400117 	ldw	r5,4(r20)
    90d4:	1400010e 	bge	r2,r16,90dc <__multiply+0x58>
    90d8:	29400044 	addi	r5,r5,1
    90dc:	0008c3c0 	call	8c3c <_Balloc>
    90e0:	8415883a 	add	r10,r16,r16
    90e4:	12c00504 	addi	r11,r2,20
    90e8:	5295883a 	add	r10,r10,r10
    90ec:	5a95883a 	add	r10,r11,r10
    90f0:	5807883a 	mov	r3,r11
    90f4:	5a80032e 	bgeu	r11,r10,9104 <__multiply+0x80>
    90f8:	18000015 	stw	zero,0(r3)
    90fc:	18c00104 	addi	r3,r3,4
    9100:	1abffd36 	bltu	r3,r10,90f8 <__alt_data_end+0xff0090f8>
    9104:	9ce7883a 	add	r19,r19,r19
    9108:	94a5883a 	add	r18,r18,r18
    910c:	89800504 	addi	r6,r17,20
    9110:	9ce7883a 	add	r19,r19,r19
    9114:	a3400504 	addi	r13,r20,20
    9118:	94a5883a 	add	r18,r18,r18
    911c:	34d9883a 	add	r12,r6,r19
    9120:	6c93883a 	add	r9,r13,r18
    9124:	3300422e 	bgeu	r6,r12,9230 <__multiply+0x1ac>
    9128:	37c00017 	ldw	ra,0(r6)
    912c:	fbffffcc 	andi	r15,ra,65535
    9130:	78001b26 	beq	r15,zero,91a0 <__multiply+0x11c>
    9134:	5811883a 	mov	r8,r11
    9138:	681d883a 	mov	r14,r13
    913c:	000f883a 	mov	r7,zero
    9140:	71000017 	ldw	r4,0(r14)
    9144:	40c00017 	ldw	r3,0(r8)
    9148:	73800104 	addi	r14,r14,4
    914c:	217fffcc 	andi	r5,r4,65535
    9150:	2bcb383a 	mul	r5,r5,r15
    9154:	2008d43a 	srli	r4,r4,16
    9158:	1c7fffcc 	andi	r17,r3,65535
    915c:	2c4b883a 	add	r5,r5,r17
    9160:	29cb883a 	add	r5,r5,r7
    9164:	23c9383a 	mul	r4,r4,r15
    9168:	1806d43a 	srli	r3,r3,16
    916c:	280ed43a 	srli	r7,r5,16
    9170:	297fffcc 	andi	r5,r5,65535
    9174:	20c7883a 	add	r3,r4,r3
    9178:	19c7883a 	add	r3,r3,r7
    917c:	1808943a 	slli	r4,r3,16
    9180:	4023883a 	mov	r17,r8
    9184:	180ed43a 	srli	r7,r3,16
    9188:	214ab03a 	or	r5,r4,r5
    918c:	41400015 	stw	r5,0(r8)
    9190:	42000104 	addi	r8,r8,4
    9194:	727fea36 	bltu	r14,r9,9140 <__alt_data_end+0xff009140>
    9198:	89c00115 	stw	r7,4(r17)
    919c:	37c00017 	ldw	ra,0(r6)
    91a0:	f83ed43a 	srli	ra,ra,16
    91a4:	f8001f26 	beq	ra,zero,9224 <__multiply+0x1a0>
    91a8:	58c00017 	ldw	r3,0(r11)
    91ac:	681d883a 	mov	r14,r13
    91b0:	581f883a 	mov	r15,r11
    91b4:	1811883a 	mov	r8,r3
    91b8:	5825883a 	mov	r18,r11
    91bc:	000f883a 	mov	r7,zero
    91c0:	00000106 	br	91c8 <__multiply+0x144>
    91c4:	8825883a 	mov	r18,r17
    91c8:	7140000b 	ldhu	r5,0(r14)
    91cc:	4010d43a 	srli	r8,r8,16
    91d0:	193fffcc 	andi	r4,r3,65535
    91d4:	2fcb383a 	mul	r5,r5,ra
    91d8:	7bc00104 	addi	r15,r15,4
    91dc:	73800104 	addi	r14,r14,4
    91e0:	2a0b883a 	add	r5,r5,r8
    91e4:	29cb883a 	add	r5,r5,r7
    91e8:	2806943a 	slli	r3,r5,16
    91ec:	94400104 	addi	r17,r18,4
    91f0:	280ad43a 	srli	r5,r5,16
    91f4:	1908b03a 	or	r4,r3,r4
    91f8:	793fff15 	stw	r4,-4(r15)
    91fc:	70ffff17 	ldw	r3,-4(r14)
    9200:	8a000017 	ldw	r8,0(r17)
    9204:	1806d43a 	srli	r3,r3,16
    9208:	413fffcc 	andi	r4,r8,65535
    920c:	1fc7383a 	mul	r3,r3,ra
    9210:	1907883a 	add	r3,r3,r4
    9214:	1947883a 	add	r3,r3,r5
    9218:	180ed43a 	srli	r7,r3,16
    921c:	727fe936 	bltu	r14,r9,91c4 <__alt_data_end+0xff0091c4>
    9220:	90c00115 	stw	r3,4(r18)
    9224:	31800104 	addi	r6,r6,4
    9228:	5ac00104 	addi	r11,r11,4
    922c:	333fbe36 	bltu	r6,r12,9128 <__alt_data_end+0xff009128>
    9230:	0400090e 	bge	zero,r16,9258 <__multiply+0x1d4>
    9234:	50ffff17 	ldw	r3,-4(r10)
    9238:	52bfff04 	addi	r10,r10,-4
    923c:	18000326 	beq	r3,zero,924c <__multiply+0x1c8>
    9240:	00000506 	br	9258 <__multiply+0x1d4>
    9244:	50c00017 	ldw	r3,0(r10)
    9248:	1800031e 	bne	r3,zero,9258 <__multiply+0x1d4>
    924c:	843fffc4 	addi	r16,r16,-1
    9250:	52bfff04 	addi	r10,r10,-4
    9254:	803ffb1e 	bne	r16,zero,9244 <__alt_data_end+0xff009244>
    9258:	14000415 	stw	r16,16(r2)
    925c:	dfc00517 	ldw	ra,20(sp)
    9260:	dd000417 	ldw	r20,16(sp)
    9264:	dcc00317 	ldw	r19,12(sp)
    9268:	dc800217 	ldw	r18,8(sp)
    926c:	dc400117 	ldw	r17,4(sp)
    9270:	dc000017 	ldw	r16,0(sp)
    9274:	dec00604 	addi	sp,sp,24
    9278:	f800283a 	ret

0000927c <__pow5mult>:
    927c:	defffa04 	addi	sp,sp,-24
    9280:	dcc00315 	stw	r19,12(sp)
    9284:	dc000015 	stw	r16,0(sp)
    9288:	dfc00515 	stw	ra,20(sp)
    928c:	dd000415 	stw	r20,16(sp)
    9290:	dc800215 	stw	r18,8(sp)
    9294:	dc400115 	stw	r17,4(sp)
    9298:	308000cc 	andi	r2,r6,3
    929c:	3021883a 	mov	r16,r6
    92a0:	2027883a 	mov	r19,r4
    92a4:	10002f1e 	bne	r2,zero,9364 <__pow5mult+0xe8>
    92a8:	2825883a 	mov	r18,r5
    92ac:	8021d0ba 	srai	r16,r16,2
    92b0:	80001a26 	beq	r16,zero,931c <__pow5mult+0xa0>
    92b4:	9c401217 	ldw	r17,72(r19)
    92b8:	8800061e 	bne	r17,zero,92d4 <__pow5mult+0x58>
    92bc:	00003406 	br	9390 <__pow5mult+0x114>
    92c0:	8021d07a 	srai	r16,r16,1
    92c4:	80001526 	beq	r16,zero,931c <__pow5mult+0xa0>
    92c8:	88800017 	ldw	r2,0(r17)
    92cc:	10001c26 	beq	r2,zero,9340 <__pow5mult+0xc4>
    92d0:	1023883a 	mov	r17,r2
    92d4:	8080004c 	andi	r2,r16,1
    92d8:	103ff926 	beq	r2,zero,92c0 <__alt_data_end+0xff0092c0>
    92dc:	880d883a 	mov	r6,r17
    92e0:	900b883a 	mov	r5,r18
    92e4:	9809883a 	mov	r4,r19
    92e8:	00090840 	call	9084 <__multiply>
    92ec:	90001b26 	beq	r18,zero,935c <__pow5mult+0xe0>
    92f0:	91000117 	ldw	r4,4(r18)
    92f4:	98c01317 	ldw	r3,76(r19)
    92f8:	8021d07a 	srai	r16,r16,1
    92fc:	2109883a 	add	r4,r4,r4
    9300:	2109883a 	add	r4,r4,r4
    9304:	1907883a 	add	r3,r3,r4
    9308:	19000017 	ldw	r4,0(r3)
    930c:	91000015 	stw	r4,0(r18)
    9310:	1c800015 	stw	r18,0(r3)
    9314:	1025883a 	mov	r18,r2
    9318:	803feb1e 	bne	r16,zero,92c8 <__alt_data_end+0xff0092c8>
    931c:	9005883a 	mov	r2,r18
    9320:	dfc00517 	ldw	ra,20(sp)
    9324:	dd000417 	ldw	r20,16(sp)
    9328:	dcc00317 	ldw	r19,12(sp)
    932c:	dc800217 	ldw	r18,8(sp)
    9330:	dc400117 	ldw	r17,4(sp)
    9334:	dc000017 	ldw	r16,0(sp)
    9338:	dec00604 	addi	sp,sp,24
    933c:	f800283a 	ret
    9340:	880d883a 	mov	r6,r17
    9344:	880b883a 	mov	r5,r17
    9348:	9809883a 	mov	r4,r19
    934c:	00090840 	call	9084 <__multiply>
    9350:	88800015 	stw	r2,0(r17)
    9354:	10000015 	stw	zero,0(r2)
    9358:	003fdd06 	br	92d0 <__alt_data_end+0xff0092d0>
    935c:	1025883a 	mov	r18,r2
    9360:	003fd706 	br	92c0 <__alt_data_end+0xff0092c0>
    9364:	10bfffc4 	addi	r2,r2,-1
    9368:	1085883a 	add	r2,r2,r2
    936c:	00c00074 	movhi	r3,1
    9370:	18c6df04 	addi	r3,r3,7036
    9374:	1085883a 	add	r2,r2,r2
    9378:	1885883a 	add	r2,r3,r2
    937c:	11800017 	ldw	r6,0(r2)
    9380:	000f883a 	mov	r7,zero
    9384:	0008d0c0 	call	8d0c <__multadd>
    9388:	1025883a 	mov	r18,r2
    938c:	003fc706 	br	92ac <__alt_data_end+0xff0092ac>
    9390:	05000044 	movi	r20,1
    9394:	a00b883a 	mov	r5,r20
    9398:	9809883a 	mov	r4,r19
    939c:	0008c3c0 	call	8c3c <_Balloc>
    93a0:	1023883a 	mov	r17,r2
    93a4:	00809c44 	movi	r2,625
    93a8:	88800515 	stw	r2,20(r17)
    93ac:	8d000415 	stw	r20,16(r17)
    93b0:	9c401215 	stw	r17,72(r19)
    93b4:	88000015 	stw	zero,0(r17)
    93b8:	003fc606 	br	92d4 <__alt_data_end+0xff0092d4>

000093bc <__lshift>:
    93bc:	defff904 	addi	sp,sp,-28
    93c0:	dd400515 	stw	r21,20(sp)
    93c4:	dcc00315 	stw	r19,12(sp)
    93c8:	302bd17a 	srai	r21,r6,5
    93cc:	2cc00417 	ldw	r19,16(r5)
    93d0:	28800217 	ldw	r2,8(r5)
    93d4:	dd000415 	stw	r20,16(sp)
    93d8:	ace7883a 	add	r19,r21,r19
    93dc:	dc800215 	stw	r18,8(sp)
    93e0:	dc400115 	stw	r17,4(sp)
    93e4:	dc000015 	stw	r16,0(sp)
    93e8:	dfc00615 	stw	ra,24(sp)
    93ec:	9c000044 	addi	r16,r19,1
    93f0:	2823883a 	mov	r17,r5
    93f4:	3029883a 	mov	r20,r6
    93f8:	2025883a 	mov	r18,r4
    93fc:	29400117 	ldw	r5,4(r5)
    9400:	1400030e 	bge	r2,r16,9410 <__lshift+0x54>
    9404:	1085883a 	add	r2,r2,r2
    9408:	29400044 	addi	r5,r5,1
    940c:	143ffd16 	blt	r2,r16,9404 <__alt_data_end+0xff009404>
    9410:	9009883a 	mov	r4,r18
    9414:	0008c3c0 	call	8c3c <_Balloc>
    9418:	10c00504 	addi	r3,r2,20
    941c:	0540070e 	bge	zero,r21,943c <__lshift+0x80>
    9420:	ad6b883a 	add	r21,r21,r21
    9424:	ad6b883a 	add	r21,r21,r21
    9428:	1809883a 	mov	r4,r3
    942c:	1d47883a 	add	r3,r3,r21
    9430:	20000015 	stw	zero,0(r4)
    9434:	21000104 	addi	r4,r4,4
    9438:	193ffd1e 	bne	r3,r4,9430 <__alt_data_end+0xff009430>
    943c:	8a000417 	ldw	r8,16(r17)
    9440:	89000504 	addi	r4,r17,20
    9444:	a18007cc 	andi	r6,r20,31
    9448:	4211883a 	add	r8,r8,r8
    944c:	4211883a 	add	r8,r8,r8
    9450:	2211883a 	add	r8,r4,r8
    9454:	30002326 	beq	r6,zero,94e4 <__lshift+0x128>
    9458:	02400804 	movi	r9,32
    945c:	4993c83a 	sub	r9,r9,r6
    9460:	000b883a 	mov	r5,zero
    9464:	21c00017 	ldw	r7,0(r4)
    9468:	1815883a 	mov	r10,r3
    946c:	18c00104 	addi	r3,r3,4
    9470:	398e983a 	sll	r7,r7,r6
    9474:	21000104 	addi	r4,r4,4
    9478:	394ab03a 	or	r5,r7,r5
    947c:	197fff15 	stw	r5,-4(r3)
    9480:	217fff17 	ldw	r5,-4(r4)
    9484:	2a4ad83a 	srl	r5,r5,r9
    9488:	223ff636 	bltu	r4,r8,9464 <__alt_data_end+0xff009464>
    948c:	51400115 	stw	r5,4(r10)
    9490:	28001a1e 	bne	r5,zero,94fc <__lshift+0x140>
    9494:	843fffc4 	addi	r16,r16,-1
    9498:	14000415 	stw	r16,16(r2)
    949c:	88000826 	beq	r17,zero,94c0 <__lshift+0x104>
    94a0:	89000117 	ldw	r4,4(r17)
    94a4:	90c01317 	ldw	r3,76(r18)
    94a8:	2109883a 	add	r4,r4,r4
    94ac:	2109883a 	add	r4,r4,r4
    94b0:	1907883a 	add	r3,r3,r4
    94b4:	19000017 	ldw	r4,0(r3)
    94b8:	89000015 	stw	r4,0(r17)
    94bc:	1c400015 	stw	r17,0(r3)
    94c0:	dfc00617 	ldw	ra,24(sp)
    94c4:	dd400517 	ldw	r21,20(sp)
    94c8:	dd000417 	ldw	r20,16(sp)
    94cc:	dcc00317 	ldw	r19,12(sp)
    94d0:	dc800217 	ldw	r18,8(sp)
    94d4:	dc400117 	ldw	r17,4(sp)
    94d8:	dc000017 	ldw	r16,0(sp)
    94dc:	dec00704 	addi	sp,sp,28
    94e0:	f800283a 	ret
    94e4:	21400017 	ldw	r5,0(r4)
    94e8:	18c00104 	addi	r3,r3,4
    94ec:	21000104 	addi	r4,r4,4
    94f0:	197fff15 	stw	r5,-4(r3)
    94f4:	223ffb36 	bltu	r4,r8,94e4 <__alt_data_end+0xff0094e4>
    94f8:	003fe606 	br	9494 <__alt_data_end+0xff009494>
    94fc:	9c000084 	addi	r16,r19,2
    9500:	003fe406 	br	9494 <__alt_data_end+0xff009494>

00009504 <__mcmp>:
    9504:	20800417 	ldw	r2,16(r4)
    9508:	28c00417 	ldw	r3,16(r5)
    950c:	10c5c83a 	sub	r2,r2,r3
    9510:	1000111e 	bne	r2,zero,9558 <__mcmp+0x54>
    9514:	18c7883a 	add	r3,r3,r3
    9518:	18c7883a 	add	r3,r3,r3
    951c:	21000504 	addi	r4,r4,20
    9520:	29400504 	addi	r5,r5,20
    9524:	20c5883a 	add	r2,r4,r3
    9528:	28cb883a 	add	r5,r5,r3
    952c:	00000106 	br	9534 <__mcmp+0x30>
    9530:	20800a2e 	bgeu	r4,r2,955c <__mcmp+0x58>
    9534:	10bfff04 	addi	r2,r2,-4
    9538:	297fff04 	addi	r5,r5,-4
    953c:	11800017 	ldw	r6,0(r2)
    9540:	28c00017 	ldw	r3,0(r5)
    9544:	30fffa26 	beq	r6,r3,9530 <__alt_data_end+0xff009530>
    9548:	30c00236 	bltu	r6,r3,9554 <__mcmp+0x50>
    954c:	00800044 	movi	r2,1
    9550:	f800283a 	ret
    9554:	00bfffc4 	movi	r2,-1
    9558:	f800283a 	ret
    955c:	0005883a 	mov	r2,zero
    9560:	f800283a 	ret

00009564 <__mdiff>:
    9564:	28c00417 	ldw	r3,16(r5)
    9568:	30800417 	ldw	r2,16(r6)
    956c:	defffa04 	addi	sp,sp,-24
    9570:	dcc00315 	stw	r19,12(sp)
    9574:	dc800215 	stw	r18,8(sp)
    9578:	dfc00515 	stw	ra,20(sp)
    957c:	dd000415 	stw	r20,16(sp)
    9580:	dc400115 	stw	r17,4(sp)
    9584:	dc000015 	stw	r16,0(sp)
    9588:	1887c83a 	sub	r3,r3,r2
    958c:	2825883a 	mov	r18,r5
    9590:	3027883a 	mov	r19,r6
    9594:	1800141e 	bne	r3,zero,95e8 <__mdiff+0x84>
    9598:	1085883a 	add	r2,r2,r2
    959c:	1085883a 	add	r2,r2,r2
    95a0:	2a000504 	addi	r8,r5,20
    95a4:	34000504 	addi	r16,r6,20
    95a8:	4087883a 	add	r3,r8,r2
    95ac:	8085883a 	add	r2,r16,r2
    95b0:	00000106 	br	95b8 <__mdiff+0x54>
    95b4:	40c0592e 	bgeu	r8,r3,971c <__mdiff+0x1b8>
    95b8:	18ffff04 	addi	r3,r3,-4
    95bc:	10bfff04 	addi	r2,r2,-4
    95c0:	19c00017 	ldw	r7,0(r3)
    95c4:	11400017 	ldw	r5,0(r2)
    95c8:	397ffa26 	beq	r7,r5,95b4 <__alt_data_end+0xff0095b4>
    95cc:	3940592e 	bgeu	r7,r5,9734 <__mdiff+0x1d0>
    95d0:	9005883a 	mov	r2,r18
    95d4:	4023883a 	mov	r17,r8
    95d8:	9825883a 	mov	r18,r19
    95dc:	05000044 	movi	r20,1
    95e0:	1027883a 	mov	r19,r2
    95e4:	00000406 	br	95f8 <__mdiff+0x94>
    95e8:	18005616 	blt	r3,zero,9744 <__mdiff+0x1e0>
    95ec:	34400504 	addi	r17,r6,20
    95f0:	2c000504 	addi	r16,r5,20
    95f4:	0029883a 	mov	r20,zero
    95f8:	91400117 	ldw	r5,4(r18)
    95fc:	0008c3c0 	call	8c3c <_Balloc>
    9600:	92400417 	ldw	r9,16(r18)
    9604:	9b000417 	ldw	r12,16(r19)
    9608:	12c00504 	addi	r11,r2,20
    960c:	4a51883a 	add	r8,r9,r9
    9610:	6319883a 	add	r12,r12,r12
    9614:	4211883a 	add	r8,r8,r8
    9618:	6319883a 	add	r12,r12,r12
    961c:	15000315 	stw	r20,12(r2)
    9620:	8211883a 	add	r8,r16,r8
    9624:	8b19883a 	add	r12,r17,r12
    9628:	0007883a 	mov	r3,zero
    962c:	81400017 	ldw	r5,0(r16)
    9630:	89c00017 	ldw	r7,0(r17)
    9634:	59800104 	addi	r6,r11,4
    9638:	293fffcc 	andi	r4,r5,65535
    963c:	20c7883a 	add	r3,r4,r3
    9640:	393fffcc 	andi	r4,r7,65535
    9644:	1909c83a 	sub	r4,r3,r4
    9648:	280ad43a 	srli	r5,r5,16
    964c:	380ed43a 	srli	r7,r7,16
    9650:	2007d43a 	srai	r3,r4,16
    9654:	213fffcc 	andi	r4,r4,65535
    9658:	29cbc83a 	sub	r5,r5,r7
    965c:	28c7883a 	add	r3,r5,r3
    9660:	180a943a 	slli	r5,r3,16
    9664:	8c400104 	addi	r17,r17,4
    9668:	84000104 	addi	r16,r16,4
    966c:	2908b03a 	or	r4,r5,r4
    9670:	59000015 	stw	r4,0(r11)
    9674:	1807d43a 	srai	r3,r3,16
    9678:	3015883a 	mov	r10,r6
    967c:	3017883a 	mov	r11,r6
    9680:	8b3fea36 	bltu	r17,r12,962c <__alt_data_end+0xff00962c>
    9684:	8200162e 	bgeu	r16,r8,96e0 <__mdiff+0x17c>
    9688:	8017883a 	mov	r11,r16
    968c:	59400017 	ldw	r5,0(r11)
    9690:	31800104 	addi	r6,r6,4
    9694:	5ac00104 	addi	r11,r11,4
    9698:	293fffcc 	andi	r4,r5,65535
    969c:	20c7883a 	add	r3,r4,r3
    96a0:	280ed43a 	srli	r7,r5,16
    96a4:	180bd43a 	srai	r5,r3,16
    96a8:	193fffcc 	andi	r4,r3,65535
    96ac:	3947883a 	add	r3,r7,r5
    96b0:	180a943a 	slli	r5,r3,16
    96b4:	1807d43a 	srai	r3,r3,16
    96b8:	2908b03a 	or	r4,r5,r4
    96bc:	313fff15 	stw	r4,-4(r6)
    96c0:	5a3ff236 	bltu	r11,r8,968c <__alt_data_end+0xff00968c>
    96c4:	0406303a 	nor	r3,zero,r16
    96c8:	1a07883a 	add	r3,r3,r8
    96cc:	1806d0ba 	srli	r3,r3,2
    96d0:	18c00044 	addi	r3,r3,1
    96d4:	18c7883a 	add	r3,r3,r3
    96d8:	18c7883a 	add	r3,r3,r3
    96dc:	50d5883a 	add	r10,r10,r3
    96e0:	50ffff04 	addi	r3,r10,-4
    96e4:	2000041e 	bne	r4,zero,96f8 <__mdiff+0x194>
    96e8:	18ffff04 	addi	r3,r3,-4
    96ec:	19000017 	ldw	r4,0(r3)
    96f0:	4a7fffc4 	addi	r9,r9,-1
    96f4:	203ffc26 	beq	r4,zero,96e8 <__alt_data_end+0xff0096e8>
    96f8:	12400415 	stw	r9,16(r2)
    96fc:	dfc00517 	ldw	ra,20(sp)
    9700:	dd000417 	ldw	r20,16(sp)
    9704:	dcc00317 	ldw	r19,12(sp)
    9708:	dc800217 	ldw	r18,8(sp)
    970c:	dc400117 	ldw	r17,4(sp)
    9710:	dc000017 	ldw	r16,0(sp)
    9714:	dec00604 	addi	sp,sp,24
    9718:	f800283a 	ret
    971c:	000b883a 	mov	r5,zero
    9720:	0008c3c0 	call	8c3c <_Balloc>
    9724:	00c00044 	movi	r3,1
    9728:	10c00415 	stw	r3,16(r2)
    972c:	10000515 	stw	zero,20(r2)
    9730:	003ff206 	br	96fc <__alt_data_end+0xff0096fc>
    9734:	8023883a 	mov	r17,r16
    9738:	0029883a 	mov	r20,zero
    973c:	4021883a 	mov	r16,r8
    9740:	003fad06 	br	95f8 <__alt_data_end+0xff0095f8>
    9744:	9005883a 	mov	r2,r18
    9748:	94400504 	addi	r17,r18,20
    974c:	9c000504 	addi	r16,r19,20
    9750:	9825883a 	mov	r18,r19
    9754:	05000044 	movi	r20,1
    9758:	1027883a 	mov	r19,r2
    975c:	003fa606 	br	95f8 <__alt_data_end+0xff0095f8>

00009760 <__ulp>:
    9760:	295ffc2c 	andhi	r5,r5,32752
    9764:	00bf3034 	movhi	r2,64704
    9768:	2887883a 	add	r3,r5,r2
    976c:	00c0020e 	bge	zero,r3,9778 <__ulp+0x18>
    9770:	0005883a 	mov	r2,zero
    9774:	f800283a 	ret
    9778:	00c7c83a 	sub	r3,zero,r3
    977c:	1807d53a 	srai	r3,r3,20
    9780:	008004c4 	movi	r2,19
    9784:	10c00b0e 	bge	r2,r3,97b4 <__ulp+0x54>
    9788:	18bffb04 	addi	r2,r3,-20
    978c:	01000784 	movi	r4,30
    9790:	0007883a 	mov	r3,zero
    9794:	20800516 	blt	r4,r2,97ac <__ulp+0x4c>
    9798:	010007c4 	movi	r4,31
    979c:	2089c83a 	sub	r4,r4,r2
    97a0:	00800044 	movi	r2,1
    97a4:	1104983a 	sll	r2,r2,r4
    97a8:	f800283a 	ret
    97ac:	00800044 	movi	r2,1
    97b0:	f800283a 	ret
    97b4:	01400234 	movhi	r5,8
    97b8:	28c7d83a 	sra	r3,r5,r3
    97bc:	0005883a 	mov	r2,zero
    97c0:	f800283a 	ret

000097c4 <__b2d>:
    97c4:	defffa04 	addi	sp,sp,-24
    97c8:	dc000015 	stw	r16,0(sp)
    97cc:	24000417 	ldw	r16,16(r4)
    97d0:	dc400115 	stw	r17,4(sp)
    97d4:	24400504 	addi	r17,r4,20
    97d8:	8421883a 	add	r16,r16,r16
    97dc:	8421883a 	add	r16,r16,r16
    97e0:	8c21883a 	add	r16,r17,r16
    97e4:	dc800215 	stw	r18,8(sp)
    97e8:	84bfff17 	ldw	r18,-4(r16)
    97ec:	dd000415 	stw	r20,16(sp)
    97f0:	dcc00315 	stw	r19,12(sp)
    97f4:	9009883a 	mov	r4,r18
    97f8:	2829883a 	mov	r20,r5
    97fc:	dfc00515 	stw	ra,20(sp)
    9800:	0008f300 	call	8f30 <__hi0bits>
    9804:	00c00804 	movi	r3,32
    9808:	1889c83a 	sub	r4,r3,r2
    980c:	a1000015 	stw	r4,0(r20)
    9810:	01000284 	movi	r4,10
    9814:	84ffff04 	addi	r19,r16,-4
    9818:	20801216 	blt	r4,r2,9864 <__b2d+0xa0>
    981c:	018002c4 	movi	r6,11
    9820:	308dc83a 	sub	r6,r6,r2
    9824:	9186d83a 	srl	r3,r18,r6
    9828:	18cffc34 	orhi	r3,r3,16368
    982c:	8cc0212e 	bgeu	r17,r19,98b4 <__b2d+0xf0>
    9830:	813ffe17 	ldw	r4,-8(r16)
    9834:	218cd83a 	srl	r6,r4,r6
    9838:	10800544 	addi	r2,r2,21
    983c:	9084983a 	sll	r2,r18,r2
    9840:	1184b03a 	or	r2,r2,r6
    9844:	dfc00517 	ldw	ra,20(sp)
    9848:	dd000417 	ldw	r20,16(sp)
    984c:	dcc00317 	ldw	r19,12(sp)
    9850:	dc800217 	ldw	r18,8(sp)
    9854:	dc400117 	ldw	r17,4(sp)
    9858:	dc000017 	ldw	r16,0(sp)
    985c:	dec00604 	addi	sp,sp,24
    9860:	f800283a 	ret
    9864:	8cc00f2e 	bgeu	r17,r19,98a4 <__b2d+0xe0>
    9868:	117ffd44 	addi	r5,r2,-11
    986c:	80bffe17 	ldw	r2,-8(r16)
    9870:	28000e26 	beq	r5,zero,98ac <__b2d+0xe8>
    9874:	1949c83a 	sub	r4,r3,r5
    9878:	9164983a 	sll	r18,r18,r5
    987c:	1106d83a 	srl	r3,r2,r4
    9880:	81bffe04 	addi	r6,r16,-8
    9884:	948ffc34 	orhi	r18,r18,16368
    9888:	90c6b03a 	or	r3,r18,r3
    988c:	89800e2e 	bgeu	r17,r6,98c8 <__b2d+0x104>
    9890:	81bffd17 	ldw	r6,-12(r16)
    9894:	1144983a 	sll	r2,r2,r5
    9898:	310ad83a 	srl	r5,r6,r4
    989c:	2884b03a 	or	r2,r5,r2
    98a0:	003fe806 	br	9844 <__alt_data_end+0xff009844>
    98a4:	10bffd44 	addi	r2,r2,-11
    98a8:	1000041e 	bne	r2,zero,98bc <__b2d+0xf8>
    98ac:	90cffc34 	orhi	r3,r18,16368
    98b0:	003fe406 	br	9844 <__alt_data_end+0xff009844>
    98b4:	000d883a 	mov	r6,zero
    98b8:	003fdf06 	br	9838 <__alt_data_end+0xff009838>
    98bc:	90a4983a 	sll	r18,r18,r2
    98c0:	0005883a 	mov	r2,zero
    98c4:	003ff906 	br	98ac <__alt_data_end+0xff0098ac>
    98c8:	1144983a 	sll	r2,r2,r5
    98cc:	003fdd06 	br	9844 <__alt_data_end+0xff009844>

000098d0 <__d2b>:
    98d0:	defff804 	addi	sp,sp,-32
    98d4:	dc000215 	stw	r16,8(sp)
    98d8:	3021883a 	mov	r16,r6
    98dc:	dc400315 	stw	r17,12(sp)
    98e0:	8022907a 	slli	r17,r16,1
    98e4:	dd000615 	stw	r20,24(sp)
    98e8:	2829883a 	mov	r20,r5
    98ec:	01400044 	movi	r5,1
    98f0:	dcc00515 	stw	r19,20(sp)
    98f4:	dc800415 	stw	r18,16(sp)
    98f8:	dfc00715 	stw	ra,28(sp)
    98fc:	3825883a 	mov	r18,r7
    9900:	8822d57a 	srli	r17,r17,21
    9904:	0008c3c0 	call	8c3c <_Balloc>
    9908:	1027883a 	mov	r19,r2
    990c:	00800434 	movhi	r2,16
    9910:	10bfffc4 	addi	r2,r2,-1
    9914:	808c703a 	and	r6,r16,r2
    9918:	88000126 	beq	r17,zero,9920 <__d2b+0x50>
    991c:	31800434 	orhi	r6,r6,16
    9920:	d9800015 	stw	r6,0(sp)
    9924:	a0002426 	beq	r20,zero,99b8 <__d2b+0xe8>
    9928:	d9000104 	addi	r4,sp,4
    992c:	dd000115 	stw	r20,4(sp)
    9930:	0008f980 	call	8f98 <__lo0bits>
    9934:	d8c00017 	ldw	r3,0(sp)
    9938:	10002f1e 	bne	r2,zero,99f8 <__d2b+0x128>
    993c:	d9000117 	ldw	r4,4(sp)
    9940:	99000515 	stw	r4,20(r19)
    9944:	1821003a 	cmpeq	r16,r3,zero
    9948:	01000084 	movi	r4,2
    994c:	2421c83a 	sub	r16,r4,r16
    9950:	98c00615 	stw	r3,24(r19)
    9954:	9c000415 	stw	r16,16(r19)
    9958:	88001f1e 	bne	r17,zero,99d8 <__d2b+0x108>
    995c:	10bef384 	addi	r2,r2,-1074
    9960:	90800015 	stw	r2,0(r18)
    9964:	00900034 	movhi	r2,16384
    9968:	10bfffc4 	addi	r2,r2,-1
    996c:	8085883a 	add	r2,r16,r2
    9970:	1085883a 	add	r2,r2,r2
    9974:	1085883a 	add	r2,r2,r2
    9978:	9885883a 	add	r2,r19,r2
    997c:	11000517 	ldw	r4,20(r2)
    9980:	8020917a 	slli	r16,r16,5
    9984:	0008f300 	call	8f30 <__hi0bits>
    9988:	d8c00817 	ldw	r3,32(sp)
    998c:	8085c83a 	sub	r2,r16,r2
    9990:	18800015 	stw	r2,0(r3)
    9994:	9805883a 	mov	r2,r19
    9998:	dfc00717 	ldw	ra,28(sp)
    999c:	dd000617 	ldw	r20,24(sp)
    99a0:	dcc00517 	ldw	r19,20(sp)
    99a4:	dc800417 	ldw	r18,16(sp)
    99a8:	dc400317 	ldw	r17,12(sp)
    99ac:	dc000217 	ldw	r16,8(sp)
    99b0:	dec00804 	addi	sp,sp,32
    99b4:	f800283a 	ret
    99b8:	d809883a 	mov	r4,sp
    99bc:	0008f980 	call	8f98 <__lo0bits>
    99c0:	d8c00017 	ldw	r3,0(sp)
    99c4:	04000044 	movi	r16,1
    99c8:	9c000415 	stw	r16,16(r19)
    99cc:	98c00515 	stw	r3,20(r19)
    99d0:	10800804 	addi	r2,r2,32
    99d4:	883fe126 	beq	r17,zero,995c <__alt_data_end+0xff00995c>
    99d8:	00c00d44 	movi	r3,53
    99dc:	8c7ef344 	addi	r17,r17,-1075
    99e0:	88a3883a 	add	r17,r17,r2
    99e4:	1885c83a 	sub	r2,r3,r2
    99e8:	d8c00817 	ldw	r3,32(sp)
    99ec:	94400015 	stw	r17,0(r18)
    99f0:	18800015 	stw	r2,0(r3)
    99f4:	003fe706 	br	9994 <__alt_data_end+0xff009994>
    99f8:	01000804 	movi	r4,32
    99fc:	2089c83a 	sub	r4,r4,r2
    9a00:	1908983a 	sll	r4,r3,r4
    9a04:	d9400117 	ldw	r5,4(sp)
    9a08:	1886d83a 	srl	r3,r3,r2
    9a0c:	2148b03a 	or	r4,r4,r5
    9a10:	99000515 	stw	r4,20(r19)
    9a14:	d8c00015 	stw	r3,0(sp)
    9a18:	003fca06 	br	9944 <__alt_data_end+0xff009944>

00009a1c <__ratio>:
    9a1c:	defff904 	addi	sp,sp,-28
    9a20:	dc400315 	stw	r17,12(sp)
    9a24:	2823883a 	mov	r17,r5
    9a28:	d9400104 	addi	r5,sp,4
    9a2c:	dfc00615 	stw	ra,24(sp)
    9a30:	dcc00515 	stw	r19,20(sp)
    9a34:	dc800415 	stw	r18,16(sp)
    9a38:	2027883a 	mov	r19,r4
    9a3c:	dc000215 	stw	r16,8(sp)
    9a40:	00097c40 	call	97c4 <__b2d>
    9a44:	d80b883a 	mov	r5,sp
    9a48:	8809883a 	mov	r4,r17
    9a4c:	1025883a 	mov	r18,r2
    9a50:	1821883a 	mov	r16,r3
    9a54:	00097c40 	call	97c4 <__b2d>
    9a58:	8a000417 	ldw	r8,16(r17)
    9a5c:	99000417 	ldw	r4,16(r19)
    9a60:	d9400117 	ldw	r5,4(sp)
    9a64:	2209c83a 	sub	r4,r4,r8
    9a68:	2010917a 	slli	r8,r4,5
    9a6c:	d9000017 	ldw	r4,0(sp)
    9a70:	2909c83a 	sub	r4,r5,r4
    9a74:	4109883a 	add	r4,r8,r4
    9a78:	01000e0e 	bge	zero,r4,9ab4 <__ratio+0x98>
    9a7c:	2008953a 	slli	r4,r4,20
    9a80:	2421883a 	add	r16,r4,r16
    9a84:	100d883a 	mov	r6,r2
    9a88:	180f883a 	mov	r7,r3
    9a8c:	9009883a 	mov	r4,r18
    9a90:	800b883a 	mov	r5,r16
    9a94:	00023340 	call	2334 <__divdf3>
    9a98:	dfc00617 	ldw	ra,24(sp)
    9a9c:	dcc00517 	ldw	r19,20(sp)
    9aa0:	dc800417 	ldw	r18,16(sp)
    9aa4:	dc400317 	ldw	r17,12(sp)
    9aa8:	dc000217 	ldw	r16,8(sp)
    9aac:	dec00704 	addi	sp,sp,28
    9ab0:	f800283a 	ret
    9ab4:	2008953a 	slli	r4,r4,20
    9ab8:	1907c83a 	sub	r3,r3,r4
    9abc:	003ff106 	br	9a84 <__alt_data_end+0xff009a84>

00009ac0 <_mprec_log10>:
    9ac0:	defffe04 	addi	sp,sp,-8
    9ac4:	dc000015 	stw	r16,0(sp)
    9ac8:	dfc00115 	stw	ra,4(sp)
    9acc:	008005c4 	movi	r2,23
    9ad0:	2021883a 	mov	r16,r4
    9ad4:	11000d0e 	bge	r2,r4,9b0c <_mprec_log10+0x4c>
    9ad8:	0005883a 	mov	r2,zero
    9adc:	00cffc34 	movhi	r3,16368
    9ae0:	843fffc4 	addi	r16,r16,-1
    9ae4:	000d883a 	mov	r6,zero
    9ae8:	01d00934 	movhi	r7,16420
    9aec:	1009883a 	mov	r4,r2
    9af0:	180b883a 	mov	r5,r3
    9af4:	000d9580 	call	d958 <__muldf3>
    9af8:	803ff91e 	bne	r16,zero,9ae0 <__alt_data_end+0xff009ae0>
    9afc:	dfc00117 	ldw	ra,4(sp)
    9b00:	dc000017 	ldw	r16,0(sp)
    9b04:	dec00204 	addi	sp,sp,8
    9b08:	f800283a 	ret
    9b0c:	202090fa 	slli	r16,r4,3
    9b10:	00800074 	movhi	r2,1
    9b14:	1086f604 	addi	r2,r2,7128
    9b18:	1421883a 	add	r16,r2,r16
    9b1c:	80800017 	ldw	r2,0(r16)
    9b20:	80c00117 	ldw	r3,4(r16)
    9b24:	dfc00117 	ldw	ra,4(sp)
    9b28:	dc000017 	ldw	r16,0(sp)
    9b2c:	dec00204 	addi	sp,sp,8
    9b30:	f800283a 	ret

00009b34 <__copybits>:
    9b34:	297fffc4 	addi	r5,r5,-1
    9b38:	280fd17a 	srai	r7,r5,5
    9b3c:	30c00417 	ldw	r3,16(r6)
    9b40:	30800504 	addi	r2,r6,20
    9b44:	39c00044 	addi	r7,r7,1
    9b48:	18c7883a 	add	r3,r3,r3
    9b4c:	39cf883a 	add	r7,r7,r7
    9b50:	18c7883a 	add	r3,r3,r3
    9b54:	39cf883a 	add	r7,r7,r7
    9b58:	10c7883a 	add	r3,r2,r3
    9b5c:	21cf883a 	add	r7,r4,r7
    9b60:	10c00d2e 	bgeu	r2,r3,9b98 <__copybits+0x64>
    9b64:	200b883a 	mov	r5,r4
    9b68:	12000017 	ldw	r8,0(r2)
    9b6c:	29400104 	addi	r5,r5,4
    9b70:	10800104 	addi	r2,r2,4
    9b74:	2a3fff15 	stw	r8,-4(r5)
    9b78:	10fffb36 	bltu	r2,r3,9b68 <__alt_data_end+0xff009b68>
    9b7c:	1985c83a 	sub	r2,r3,r6
    9b80:	10bffac4 	addi	r2,r2,-21
    9b84:	1004d0ba 	srli	r2,r2,2
    9b88:	10800044 	addi	r2,r2,1
    9b8c:	1085883a 	add	r2,r2,r2
    9b90:	1085883a 	add	r2,r2,r2
    9b94:	2089883a 	add	r4,r4,r2
    9b98:	21c0032e 	bgeu	r4,r7,9ba8 <__copybits+0x74>
    9b9c:	20000015 	stw	zero,0(r4)
    9ba0:	21000104 	addi	r4,r4,4
    9ba4:	21fffd36 	bltu	r4,r7,9b9c <__alt_data_end+0xff009b9c>
    9ba8:	f800283a 	ret

00009bac <__any_on>:
    9bac:	20c00417 	ldw	r3,16(r4)
    9bb0:	2805d17a 	srai	r2,r5,5
    9bb4:	21000504 	addi	r4,r4,20
    9bb8:	18800d0e 	bge	r3,r2,9bf0 <__any_on+0x44>
    9bbc:	18c7883a 	add	r3,r3,r3
    9bc0:	18c7883a 	add	r3,r3,r3
    9bc4:	20c7883a 	add	r3,r4,r3
    9bc8:	20c0192e 	bgeu	r4,r3,9c30 <__any_on+0x84>
    9bcc:	18bfff17 	ldw	r2,-4(r3)
    9bd0:	18ffff04 	addi	r3,r3,-4
    9bd4:	1000041e 	bne	r2,zero,9be8 <__any_on+0x3c>
    9bd8:	20c0142e 	bgeu	r4,r3,9c2c <__any_on+0x80>
    9bdc:	18ffff04 	addi	r3,r3,-4
    9be0:	19400017 	ldw	r5,0(r3)
    9be4:	283ffc26 	beq	r5,zero,9bd8 <__alt_data_end+0xff009bd8>
    9be8:	00800044 	movi	r2,1
    9bec:	f800283a 	ret
    9bf0:	10c00a0e 	bge	r2,r3,9c1c <__any_on+0x70>
    9bf4:	1085883a 	add	r2,r2,r2
    9bf8:	1085883a 	add	r2,r2,r2
    9bfc:	294007cc 	andi	r5,r5,31
    9c00:	2087883a 	add	r3,r4,r2
    9c04:	283ff026 	beq	r5,zero,9bc8 <__alt_data_end+0xff009bc8>
    9c08:	19800017 	ldw	r6,0(r3)
    9c0c:	3144d83a 	srl	r2,r6,r5
    9c10:	114a983a 	sll	r5,r2,r5
    9c14:	317ff41e 	bne	r6,r5,9be8 <__alt_data_end+0xff009be8>
    9c18:	003feb06 	br	9bc8 <__alt_data_end+0xff009bc8>
    9c1c:	1085883a 	add	r2,r2,r2
    9c20:	1085883a 	add	r2,r2,r2
    9c24:	2087883a 	add	r3,r4,r2
    9c28:	003fe706 	br	9bc8 <__alt_data_end+0xff009bc8>
    9c2c:	f800283a 	ret
    9c30:	0005883a 	mov	r2,zero
    9c34:	f800283a 	ret

00009c38 <_realloc_r>:
    9c38:	defff604 	addi	sp,sp,-40
    9c3c:	dc800215 	stw	r18,8(sp)
    9c40:	dfc00915 	stw	ra,36(sp)
    9c44:	df000815 	stw	fp,32(sp)
    9c48:	ddc00715 	stw	r23,28(sp)
    9c4c:	dd800615 	stw	r22,24(sp)
    9c50:	dd400515 	stw	r21,20(sp)
    9c54:	dd000415 	stw	r20,16(sp)
    9c58:	dcc00315 	stw	r19,12(sp)
    9c5c:	dc400115 	stw	r17,4(sp)
    9c60:	dc000015 	stw	r16,0(sp)
    9c64:	3025883a 	mov	r18,r6
    9c68:	2800b726 	beq	r5,zero,9f48 <_realloc_r+0x310>
    9c6c:	282b883a 	mov	r21,r5
    9c70:	2029883a 	mov	r20,r4
    9c74:	000f0440 	call	f044 <__malloc_lock>
    9c78:	a8bfff17 	ldw	r2,-4(r21)
    9c7c:	043fff04 	movi	r16,-4
    9c80:	90c002c4 	addi	r3,r18,11
    9c84:	01000584 	movi	r4,22
    9c88:	acfffe04 	addi	r19,r21,-8
    9c8c:	1420703a 	and	r16,r2,r16
    9c90:	20c0332e 	bgeu	r4,r3,9d60 <_realloc_r+0x128>
    9c94:	047ffe04 	movi	r17,-8
    9c98:	1c62703a 	and	r17,r3,r17
    9c9c:	8807883a 	mov	r3,r17
    9ca0:	88005816 	blt	r17,zero,9e04 <_realloc_r+0x1cc>
    9ca4:	8c805736 	bltu	r17,r18,9e04 <_realloc_r+0x1cc>
    9ca8:	80c0300e 	bge	r16,r3,9d6c <_realloc_r+0x134>
    9cac:	07000074 	movhi	fp,1
    9cb0:	e7077b04 	addi	fp,fp,7660
    9cb4:	e1c00217 	ldw	r7,8(fp)
    9cb8:	9c09883a 	add	r4,r19,r16
    9cbc:	22000117 	ldw	r8,4(r4)
    9cc0:	21c06326 	beq	r4,r7,9e50 <_realloc_r+0x218>
    9cc4:	017fff84 	movi	r5,-2
    9cc8:	414a703a 	and	r5,r8,r5
    9ccc:	214b883a 	add	r5,r4,r5
    9cd0:	29800117 	ldw	r6,4(r5)
    9cd4:	3180004c 	andi	r6,r6,1
    9cd8:	30003f26 	beq	r6,zero,9dd8 <_realloc_r+0x1a0>
    9cdc:	1080004c 	andi	r2,r2,1
    9ce0:	10008326 	beq	r2,zero,9ef0 <_realloc_r+0x2b8>
    9ce4:	900b883a 	mov	r5,r18
    9ce8:	a009883a 	mov	r4,r20
    9cec:	0002d500 	call	2d50 <_malloc_r>
    9cf0:	1025883a 	mov	r18,r2
    9cf4:	10011e26 	beq	r2,zero,a170 <_realloc_r+0x538>
    9cf8:	a93fff17 	ldw	r4,-4(r21)
    9cfc:	10fffe04 	addi	r3,r2,-8
    9d00:	00bfff84 	movi	r2,-2
    9d04:	2084703a 	and	r2,r4,r2
    9d08:	9885883a 	add	r2,r19,r2
    9d0c:	1880ee26 	beq	r3,r2,a0c8 <_realloc_r+0x490>
    9d10:	81bfff04 	addi	r6,r16,-4
    9d14:	00800904 	movi	r2,36
    9d18:	1180b836 	bltu	r2,r6,9ffc <_realloc_r+0x3c4>
    9d1c:	00c004c4 	movi	r3,19
    9d20:	19809636 	bltu	r3,r6,9f7c <_realloc_r+0x344>
    9d24:	9005883a 	mov	r2,r18
    9d28:	a807883a 	mov	r3,r21
    9d2c:	19000017 	ldw	r4,0(r3)
    9d30:	11000015 	stw	r4,0(r2)
    9d34:	19000117 	ldw	r4,4(r3)
    9d38:	11000115 	stw	r4,4(r2)
    9d3c:	18c00217 	ldw	r3,8(r3)
    9d40:	10c00215 	stw	r3,8(r2)
    9d44:	a80b883a 	mov	r5,r21
    9d48:	a009883a 	mov	r4,r20
    9d4c:	0007ba00 	call	7ba0 <_free_r>
    9d50:	a009883a 	mov	r4,r20
    9d54:	000f0680 	call	f068 <__malloc_unlock>
    9d58:	9005883a 	mov	r2,r18
    9d5c:	00001206 	br	9da8 <_realloc_r+0x170>
    9d60:	00c00404 	movi	r3,16
    9d64:	1823883a 	mov	r17,r3
    9d68:	003fce06 	br	9ca4 <__alt_data_end+0xff009ca4>
    9d6c:	a825883a 	mov	r18,r21
    9d70:	8445c83a 	sub	r2,r16,r17
    9d74:	00c003c4 	movi	r3,15
    9d78:	18802636 	bltu	r3,r2,9e14 <_realloc_r+0x1dc>
    9d7c:	99800117 	ldw	r6,4(r19)
    9d80:	9c07883a 	add	r3,r19,r16
    9d84:	3180004c 	andi	r6,r6,1
    9d88:	3420b03a 	or	r16,r6,r16
    9d8c:	9c000115 	stw	r16,4(r19)
    9d90:	18800117 	ldw	r2,4(r3)
    9d94:	10800054 	ori	r2,r2,1
    9d98:	18800115 	stw	r2,4(r3)
    9d9c:	a009883a 	mov	r4,r20
    9da0:	000f0680 	call	f068 <__malloc_unlock>
    9da4:	9005883a 	mov	r2,r18
    9da8:	dfc00917 	ldw	ra,36(sp)
    9dac:	df000817 	ldw	fp,32(sp)
    9db0:	ddc00717 	ldw	r23,28(sp)
    9db4:	dd800617 	ldw	r22,24(sp)
    9db8:	dd400517 	ldw	r21,20(sp)
    9dbc:	dd000417 	ldw	r20,16(sp)
    9dc0:	dcc00317 	ldw	r19,12(sp)
    9dc4:	dc800217 	ldw	r18,8(sp)
    9dc8:	dc400117 	ldw	r17,4(sp)
    9dcc:	dc000017 	ldw	r16,0(sp)
    9dd0:	dec00a04 	addi	sp,sp,40
    9dd4:	f800283a 	ret
    9dd8:	017fff04 	movi	r5,-4
    9ddc:	414a703a 	and	r5,r8,r5
    9de0:	814d883a 	add	r6,r16,r5
    9de4:	30c01f16 	blt	r6,r3,9e64 <_realloc_r+0x22c>
    9de8:	20800317 	ldw	r2,12(r4)
    9dec:	20c00217 	ldw	r3,8(r4)
    9df0:	a825883a 	mov	r18,r21
    9df4:	3021883a 	mov	r16,r6
    9df8:	18800315 	stw	r2,12(r3)
    9dfc:	10c00215 	stw	r3,8(r2)
    9e00:	003fdb06 	br	9d70 <__alt_data_end+0xff009d70>
    9e04:	00800304 	movi	r2,12
    9e08:	a0800015 	stw	r2,0(r20)
    9e0c:	0005883a 	mov	r2,zero
    9e10:	003fe506 	br	9da8 <__alt_data_end+0xff009da8>
    9e14:	98c00117 	ldw	r3,4(r19)
    9e18:	9c4b883a 	add	r5,r19,r17
    9e1c:	11000054 	ori	r4,r2,1
    9e20:	18c0004c 	andi	r3,r3,1
    9e24:	1c62b03a 	or	r17,r3,r17
    9e28:	9c400115 	stw	r17,4(r19)
    9e2c:	29000115 	stw	r4,4(r5)
    9e30:	2885883a 	add	r2,r5,r2
    9e34:	10c00117 	ldw	r3,4(r2)
    9e38:	29400204 	addi	r5,r5,8
    9e3c:	a009883a 	mov	r4,r20
    9e40:	18c00054 	ori	r3,r3,1
    9e44:	10c00115 	stw	r3,4(r2)
    9e48:	0007ba00 	call	7ba0 <_free_r>
    9e4c:	003fd306 	br	9d9c <__alt_data_end+0xff009d9c>
    9e50:	017fff04 	movi	r5,-4
    9e54:	414a703a 	and	r5,r8,r5
    9e58:	89800404 	addi	r6,r17,16
    9e5c:	8151883a 	add	r8,r16,r5
    9e60:	4180590e 	bge	r8,r6,9fc8 <_realloc_r+0x390>
    9e64:	1080004c 	andi	r2,r2,1
    9e68:	103f9e1e 	bne	r2,zero,9ce4 <__alt_data_end+0xff009ce4>
    9e6c:	adbffe17 	ldw	r22,-8(r21)
    9e70:	00bfff04 	movi	r2,-4
    9e74:	9dadc83a 	sub	r22,r19,r22
    9e78:	b1800117 	ldw	r6,4(r22)
    9e7c:	3084703a 	and	r2,r6,r2
    9e80:	20002026 	beq	r4,zero,9f04 <_realloc_r+0x2cc>
    9e84:	80af883a 	add	r23,r16,r2
    9e88:	b96f883a 	add	r23,r23,r5
    9e8c:	21c05f26 	beq	r4,r7,a00c <_realloc_r+0x3d4>
    9e90:	b8c01c16 	blt	r23,r3,9f04 <_realloc_r+0x2cc>
    9e94:	20800317 	ldw	r2,12(r4)
    9e98:	20c00217 	ldw	r3,8(r4)
    9e9c:	81bfff04 	addi	r6,r16,-4
    9ea0:	01000904 	movi	r4,36
    9ea4:	18800315 	stw	r2,12(r3)
    9ea8:	10c00215 	stw	r3,8(r2)
    9eac:	b0c00217 	ldw	r3,8(r22)
    9eb0:	b0800317 	ldw	r2,12(r22)
    9eb4:	b4800204 	addi	r18,r22,8
    9eb8:	18800315 	stw	r2,12(r3)
    9ebc:	10c00215 	stw	r3,8(r2)
    9ec0:	21801b36 	bltu	r4,r6,9f30 <_realloc_r+0x2f8>
    9ec4:	008004c4 	movi	r2,19
    9ec8:	1180352e 	bgeu	r2,r6,9fa0 <_realloc_r+0x368>
    9ecc:	a8800017 	ldw	r2,0(r21)
    9ed0:	b0800215 	stw	r2,8(r22)
    9ed4:	a8800117 	ldw	r2,4(r21)
    9ed8:	b0800315 	stw	r2,12(r22)
    9edc:	008006c4 	movi	r2,27
    9ee0:	11807f36 	bltu	r2,r6,a0e0 <_realloc_r+0x4a8>
    9ee4:	b0800404 	addi	r2,r22,16
    9ee8:	ad400204 	addi	r21,r21,8
    9eec:	00002d06 	br	9fa4 <_realloc_r+0x36c>
    9ef0:	adbffe17 	ldw	r22,-8(r21)
    9ef4:	00bfff04 	movi	r2,-4
    9ef8:	9dadc83a 	sub	r22,r19,r22
    9efc:	b1000117 	ldw	r4,4(r22)
    9f00:	2084703a 	and	r2,r4,r2
    9f04:	b03f7726 	beq	r22,zero,9ce4 <__alt_data_end+0xff009ce4>
    9f08:	80af883a 	add	r23,r16,r2
    9f0c:	b8ff7516 	blt	r23,r3,9ce4 <__alt_data_end+0xff009ce4>
    9f10:	b0800317 	ldw	r2,12(r22)
    9f14:	b0c00217 	ldw	r3,8(r22)
    9f18:	81bfff04 	addi	r6,r16,-4
    9f1c:	01000904 	movi	r4,36
    9f20:	18800315 	stw	r2,12(r3)
    9f24:	10c00215 	stw	r3,8(r2)
    9f28:	b4800204 	addi	r18,r22,8
    9f2c:	21bfe52e 	bgeu	r4,r6,9ec4 <__alt_data_end+0xff009ec4>
    9f30:	a80b883a 	mov	r5,r21
    9f34:	9009883a 	mov	r4,r18
    9f38:	00089b80 	call	89b8 <memmove>
    9f3c:	b821883a 	mov	r16,r23
    9f40:	b027883a 	mov	r19,r22
    9f44:	003f8a06 	br	9d70 <__alt_data_end+0xff009d70>
    9f48:	300b883a 	mov	r5,r6
    9f4c:	dfc00917 	ldw	ra,36(sp)
    9f50:	df000817 	ldw	fp,32(sp)
    9f54:	ddc00717 	ldw	r23,28(sp)
    9f58:	dd800617 	ldw	r22,24(sp)
    9f5c:	dd400517 	ldw	r21,20(sp)
    9f60:	dd000417 	ldw	r20,16(sp)
    9f64:	dcc00317 	ldw	r19,12(sp)
    9f68:	dc800217 	ldw	r18,8(sp)
    9f6c:	dc400117 	ldw	r17,4(sp)
    9f70:	dc000017 	ldw	r16,0(sp)
    9f74:	dec00a04 	addi	sp,sp,40
    9f78:	0002d501 	jmpi	2d50 <_malloc_r>
    9f7c:	a8c00017 	ldw	r3,0(r21)
    9f80:	90c00015 	stw	r3,0(r18)
    9f84:	a8c00117 	ldw	r3,4(r21)
    9f88:	90c00115 	stw	r3,4(r18)
    9f8c:	00c006c4 	movi	r3,27
    9f90:	19804536 	bltu	r3,r6,a0a8 <_realloc_r+0x470>
    9f94:	90800204 	addi	r2,r18,8
    9f98:	a8c00204 	addi	r3,r21,8
    9f9c:	003f6306 	br	9d2c <__alt_data_end+0xff009d2c>
    9fa0:	9005883a 	mov	r2,r18
    9fa4:	a8c00017 	ldw	r3,0(r21)
    9fa8:	b821883a 	mov	r16,r23
    9fac:	b027883a 	mov	r19,r22
    9fb0:	10c00015 	stw	r3,0(r2)
    9fb4:	a8c00117 	ldw	r3,4(r21)
    9fb8:	10c00115 	stw	r3,4(r2)
    9fbc:	a8c00217 	ldw	r3,8(r21)
    9fc0:	10c00215 	stw	r3,8(r2)
    9fc4:	003f6a06 	br	9d70 <__alt_data_end+0xff009d70>
    9fc8:	9c67883a 	add	r19,r19,r17
    9fcc:	4445c83a 	sub	r2,r8,r17
    9fd0:	e4c00215 	stw	r19,8(fp)
    9fd4:	10800054 	ori	r2,r2,1
    9fd8:	98800115 	stw	r2,4(r19)
    9fdc:	a8bfff17 	ldw	r2,-4(r21)
    9fe0:	a009883a 	mov	r4,r20
    9fe4:	1080004c 	andi	r2,r2,1
    9fe8:	1462b03a 	or	r17,r2,r17
    9fec:	ac7fff15 	stw	r17,-4(r21)
    9ff0:	000f0680 	call	f068 <__malloc_unlock>
    9ff4:	a805883a 	mov	r2,r21
    9ff8:	003f6b06 	br	9da8 <__alt_data_end+0xff009da8>
    9ffc:	a80b883a 	mov	r5,r21
    a000:	9009883a 	mov	r4,r18
    a004:	00089b80 	call	89b8 <memmove>
    a008:	003f4e06 	br	9d44 <__alt_data_end+0xff009d44>
    a00c:	89000404 	addi	r4,r17,16
    a010:	b93fbc16 	blt	r23,r4,9f04 <__alt_data_end+0xff009f04>
    a014:	b0800317 	ldw	r2,12(r22)
    a018:	b0c00217 	ldw	r3,8(r22)
    a01c:	81bfff04 	addi	r6,r16,-4
    a020:	01000904 	movi	r4,36
    a024:	18800315 	stw	r2,12(r3)
    a028:	10c00215 	stw	r3,8(r2)
    a02c:	b4800204 	addi	r18,r22,8
    a030:	21804336 	bltu	r4,r6,a140 <_realloc_r+0x508>
    a034:	008004c4 	movi	r2,19
    a038:	11803f2e 	bgeu	r2,r6,a138 <_realloc_r+0x500>
    a03c:	a8800017 	ldw	r2,0(r21)
    a040:	b0800215 	stw	r2,8(r22)
    a044:	a8800117 	ldw	r2,4(r21)
    a048:	b0800315 	stw	r2,12(r22)
    a04c:	008006c4 	movi	r2,27
    a050:	11803f36 	bltu	r2,r6,a150 <_realloc_r+0x518>
    a054:	b0800404 	addi	r2,r22,16
    a058:	ad400204 	addi	r21,r21,8
    a05c:	a8c00017 	ldw	r3,0(r21)
    a060:	10c00015 	stw	r3,0(r2)
    a064:	a8c00117 	ldw	r3,4(r21)
    a068:	10c00115 	stw	r3,4(r2)
    a06c:	a8c00217 	ldw	r3,8(r21)
    a070:	10c00215 	stw	r3,8(r2)
    a074:	b447883a 	add	r3,r22,r17
    a078:	bc45c83a 	sub	r2,r23,r17
    a07c:	e0c00215 	stw	r3,8(fp)
    a080:	10800054 	ori	r2,r2,1
    a084:	18800115 	stw	r2,4(r3)
    a088:	b0800117 	ldw	r2,4(r22)
    a08c:	a009883a 	mov	r4,r20
    a090:	1080004c 	andi	r2,r2,1
    a094:	1462b03a 	or	r17,r2,r17
    a098:	b4400115 	stw	r17,4(r22)
    a09c:	000f0680 	call	f068 <__malloc_unlock>
    a0a0:	9005883a 	mov	r2,r18
    a0a4:	003f4006 	br	9da8 <__alt_data_end+0xff009da8>
    a0a8:	a8c00217 	ldw	r3,8(r21)
    a0ac:	90c00215 	stw	r3,8(r18)
    a0b0:	a8c00317 	ldw	r3,12(r21)
    a0b4:	90c00315 	stw	r3,12(r18)
    a0b8:	30801126 	beq	r6,r2,a100 <_realloc_r+0x4c8>
    a0bc:	90800404 	addi	r2,r18,16
    a0c0:	a8c00404 	addi	r3,r21,16
    a0c4:	003f1906 	br	9d2c <__alt_data_end+0xff009d2c>
    a0c8:	90ffff17 	ldw	r3,-4(r18)
    a0cc:	00bfff04 	movi	r2,-4
    a0d0:	a825883a 	mov	r18,r21
    a0d4:	1884703a 	and	r2,r3,r2
    a0d8:	80a1883a 	add	r16,r16,r2
    a0dc:	003f2406 	br	9d70 <__alt_data_end+0xff009d70>
    a0e0:	a8800217 	ldw	r2,8(r21)
    a0e4:	b0800415 	stw	r2,16(r22)
    a0e8:	a8800317 	ldw	r2,12(r21)
    a0ec:	b0800515 	stw	r2,20(r22)
    a0f0:	31000a26 	beq	r6,r4,a11c <_realloc_r+0x4e4>
    a0f4:	b0800604 	addi	r2,r22,24
    a0f8:	ad400404 	addi	r21,r21,16
    a0fc:	003fa906 	br	9fa4 <__alt_data_end+0xff009fa4>
    a100:	a9000417 	ldw	r4,16(r21)
    a104:	90800604 	addi	r2,r18,24
    a108:	a8c00604 	addi	r3,r21,24
    a10c:	91000415 	stw	r4,16(r18)
    a110:	a9000517 	ldw	r4,20(r21)
    a114:	91000515 	stw	r4,20(r18)
    a118:	003f0406 	br	9d2c <__alt_data_end+0xff009d2c>
    a11c:	a8c00417 	ldw	r3,16(r21)
    a120:	ad400604 	addi	r21,r21,24
    a124:	b0800804 	addi	r2,r22,32
    a128:	b0c00615 	stw	r3,24(r22)
    a12c:	a8ffff17 	ldw	r3,-4(r21)
    a130:	b0c00715 	stw	r3,28(r22)
    a134:	003f9b06 	br	9fa4 <__alt_data_end+0xff009fa4>
    a138:	9005883a 	mov	r2,r18
    a13c:	003fc706 	br	a05c <__alt_data_end+0xff00a05c>
    a140:	a80b883a 	mov	r5,r21
    a144:	9009883a 	mov	r4,r18
    a148:	00089b80 	call	89b8 <memmove>
    a14c:	003fc906 	br	a074 <__alt_data_end+0xff00a074>
    a150:	a8800217 	ldw	r2,8(r21)
    a154:	b0800415 	stw	r2,16(r22)
    a158:	a8800317 	ldw	r2,12(r21)
    a15c:	b0800515 	stw	r2,20(r22)
    a160:	31000726 	beq	r6,r4,a180 <_realloc_r+0x548>
    a164:	b0800604 	addi	r2,r22,24
    a168:	ad400404 	addi	r21,r21,16
    a16c:	003fbb06 	br	a05c <__alt_data_end+0xff00a05c>
    a170:	a009883a 	mov	r4,r20
    a174:	000f0680 	call	f068 <__malloc_unlock>
    a178:	0005883a 	mov	r2,zero
    a17c:	003f0a06 	br	9da8 <__alt_data_end+0xff009da8>
    a180:	a8c00417 	ldw	r3,16(r21)
    a184:	ad400604 	addi	r21,r21,24
    a188:	b0800804 	addi	r2,r22,32
    a18c:	b0c00615 	stw	r3,24(r22)
    a190:	a8ffff17 	ldw	r3,-4(r21)
    a194:	b0c00715 	stw	r3,28(r22)
    a198:	003fb006 	br	a05c <__alt_data_end+0xff00a05c>

0000a19c <__fpclassifyd>:
    a19c:	00a00034 	movhi	r2,32768
    a1a0:	10bfffc4 	addi	r2,r2,-1
    a1a4:	2884703a 	and	r2,r5,r2
    a1a8:	10000726 	beq	r2,zero,a1c8 <__fpclassifyd+0x2c>
    a1ac:	00fffc34 	movhi	r3,65520
    a1b0:	019ff834 	movhi	r6,32736
    a1b4:	28c7883a 	add	r3,r5,r3
    a1b8:	31bfffc4 	addi	r6,r6,-1
    a1bc:	30c00536 	bltu	r6,r3,a1d4 <__fpclassifyd+0x38>
    a1c0:	00800104 	movi	r2,4
    a1c4:	f800283a 	ret
    a1c8:	2000021e 	bne	r4,zero,a1d4 <__fpclassifyd+0x38>
    a1cc:	00800084 	movi	r2,2
    a1d0:	f800283a 	ret
    a1d4:	00dffc34 	movhi	r3,32752
    a1d8:	019ff834 	movhi	r6,32736
    a1dc:	28cb883a 	add	r5,r5,r3
    a1e0:	31bfffc4 	addi	r6,r6,-1
    a1e4:	317ff62e 	bgeu	r6,r5,a1c0 <__alt_data_end+0xff00a1c0>
    a1e8:	01400434 	movhi	r5,16
    a1ec:	297fffc4 	addi	r5,r5,-1
    a1f0:	28800236 	bltu	r5,r2,a1fc <__fpclassifyd+0x60>
    a1f4:	008000c4 	movi	r2,3
    a1f8:	f800283a 	ret
    a1fc:	10c00226 	beq	r2,r3,a208 <__fpclassifyd+0x6c>
    a200:	0005883a 	mov	r2,zero
    a204:	f800283a 	ret
    a208:	2005003a 	cmpeq	r2,r4,zero
    a20c:	f800283a 	ret

0000a210 <__sread>:
    a210:	defffe04 	addi	sp,sp,-8
    a214:	dc000015 	stw	r16,0(sp)
    a218:	2821883a 	mov	r16,r5
    a21c:	2940038f 	ldh	r5,14(r5)
    a220:	dfc00115 	stw	ra,4(sp)
    a224:	000c0040 	call	c004 <_read_r>
    a228:	10000716 	blt	r2,zero,a248 <__sread+0x38>
    a22c:	80c01417 	ldw	r3,80(r16)
    a230:	1887883a 	add	r3,r3,r2
    a234:	80c01415 	stw	r3,80(r16)
    a238:	dfc00117 	ldw	ra,4(sp)
    a23c:	dc000017 	ldw	r16,0(sp)
    a240:	dec00204 	addi	sp,sp,8
    a244:	f800283a 	ret
    a248:	80c0030b 	ldhu	r3,12(r16)
    a24c:	18fbffcc 	andi	r3,r3,61439
    a250:	80c0030d 	sth	r3,12(r16)
    a254:	dfc00117 	ldw	ra,4(sp)
    a258:	dc000017 	ldw	r16,0(sp)
    a25c:	dec00204 	addi	sp,sp,8
    a260:	f800283a 	ret

0000a264 <__seofread>:
    a264:	0005883a 	mov	r2,zero
    a268:	f800283a 	ret

0000a26c <__swrite>:
    a26c:	2880030b 	ldhu	r2,12(r5)
    a270:	defffb04 	addi	sp,sp,-20
    a274:	dcc00315 	stw	r19,12(sp)
    a278:	dc800215 	stw	r18,8(sp)
    a27c:	dc400115 	stw	r17,4(sp)
    a280:	dc000015 	stw	r16,0(sp)
    a284:	dfc00415 	stw	ra,16(sp)
    a288:	10c0400c 	andi	r3,r2,256
    a28c:	2821883a 	mov	r16,r5
    a290:	2023883a 	mov	r17,r4
    a294:	3025883a 	mov	r18,r6
    a298:	3827883a 	mov	r19,r7
    a29c:	18000526 	beq	r3,zero,a2b4 <__swrite+0x48>
    a2a0:	2940038f 	ldh	r5,14(r5)
    a2a4:	01c00084 	movi	r7,2
    a2a8:	000d883a 	mov	r6,zero
    a2ac:	000bfa40 	call	bfa4 <_lseek_r>
    a2b0:	8080030b 	ldhu	r2,12(r16)
    a2b4:	8140038f 	ldh	r5,14(r16)
    a2b8:	10bbffcc 	andi	r2,r2,61439
    a2bc:	980f883a 	mov	r7,r19
    a2c0:	900d883a 	mov	r6,r18
    a2c4:	8809883a 	mov	r4,r17
    a2c8:	8080030d 	sth	r2,12(r16)
    a2cc:	dfc00417 	ldw	ra,16(sp)
    a2d0:	dcc00317 	ldw	r19,12(sp)
    a2d4:	dc800217 	ldw	r18,8(sp)
    a2d8:	dc400117 	ldw	r17,4(sp)
    a2dc:	dc000017 	ldw	r16,0(sp)
    a2e0:	dec00504 	addi	sp,sp,20
    a2e4:	000ba701 	jmpi	ba70 <_write_r>

0000a2e8 <__sseek>:
    a2e8:	defffe04 	addi	sp,sp,-8
    a2ec:	dc000015 	stw	r16,0(sp)
    a2f0:	2821883a 	mov	r16,r5
    a2f4:	2940038f 	ldh	r5,14(r5)
    a2f8:	dfc00115 	stw	ra,4(sp)
    a2fc:	000bfa40 	call	bfa4 <_lseek_r>
    a300:	00ffffc4 	movi	r3,-1
    a304:	10c00826 	beq	r2,r3,a328 <__sseek+0x40>
    a308:	80c0030b 	ldhu	r3,12(r16)
    a30c:	80801415 	stw	r2,80(r16)
    a310:	18c40014 	ori	r3,r3,4096
    a314:	80c0030d 	sth	r3,12(r16)
    a318:	dfc00117 	ldw	ra,4(sp)
    a31c:	dc000017 	ldw	r16,0(sp)
    a320:	dec00204 	addi	sp,sp,8
    a324:	f800283a 	ret
    a328:	80c0030b 	ldhu	r3,12(r16)
    a32c:	18fbffcc 	andi	r3,r3,61439
    a330:	80c0030d 	sth	r3,12(r16)
    a334:	dfc00117 	ldw	ra,4(sp)
    a338:	dc000017 	ldw	r16,0(sp)
    a33c:	dec00204 	addi	sp,sp,8
    a340:	f800283a 	ret

0000a344 <__sclose>:
    a344:	2940038f 	ldh	r5,14(r5)
    a348:	000bad01 	jmpi	bad0 <_close_r>

0000a34c <strcmp>:
    a34c:	2144b03a 	or	r2,r4,r5
    a350:	108000cc 	andi	r2,r2,3
    a354:	1000171e 	bne	r2,zero,a3b4 <strcmp+0x68>
    a358:	20800017 	ldw	r2,0(r4)
    a35c:	28c00017 	ldw	r3,0(r5)
    a360:	10c0141e 	bne	r2,r3,a3b4 <strcmp+0x68>
    a364:	027fbff4 	movhi	r9,65279
    a368:	4a7fbfc4 	addi	r9,r9,-257
    a36c:	0086303a 	nor	r3,zero,r2
    a370:	02202074 	movhi	r8,32897
    a374:	1245883a 	add	r2,r2,r9
    a378:	42202004 	addi	r8,r8,-32640
    a37c:	10c4703a 	and	r2,r2,r3
    a380:	1204703a 	and	r2,r2,r8
    a384:	10000226 	beq	r2,zero,a390 <strcmp+0x44>
    a388:	00002306 	br	a418 <strcmp+0xcc>
    a38c:	1000221e 	bne	r2,zero,a418 <strcmp+0xcc>
    a390:	21000104 	addi	r4,r4,4
    a394:	20c00017 	ldw	r3,0(r4)
    a398:	29400104 	addi	r5,r5,4
    a39c:	29800017 	ldw	r6,0(r5)
    a3a0:	1a4f883a 	add	r7,r3,r9
    a3a4:	00c4303a 	nor	r2,zero,r3
    a3a8:	3884703a 	and	r2,r7,r2
    a3ac:	1204703a 	and	r2,r2,r8
    a3b0:	19bff626 	beq	r3,r6,a38c <__alt_data_end+0xff00a38c>
    a3b4:	20800003 	ldbu	r2,0(r4)
    a3b8:	10c03fcc 	andi	r3,r2,255
    a3bc:	18c0201c 	xori	r3,r3,128
    a3c0:	18ffe004 	addi	r3,r3,-128
    a3c4:	18000c26 	beq	r3,zero,a3f8 <strcmp+0xac>
    a3c8:	29800007 	ldb	r6,0(r5)
    a3cc:	19800326 	beq	r3,r6,a3dc <strcmp+0x90>
    a3d0:	00001306 	br	a420 <strcmp+0xd4>
    a3d4:	29800007 	ldb	r6,0(r5)
    a3d8:	11800b1e 	bne	r2,r6,a408 <strcmp+0xbc>
    a3dc:	21000044 	addi	r4,r4,1
    a3e0:	20c00003 	ldbu	r3,0(r4)
    a3e4:	29400044 	addi	r5,r5,1
    a3e8:	18803fcc 	andi	r2,r3,255
    a3ec:	1080201c 	xori	r2,r2,128
    a3f0:	10bfe004 	addi	r2,r2,-128
    a3f4:	103ff71e 	bne	r2,zero,a3d4 <__alt_data_end+0xff00a3d4>
    a3f8:	0007883a 	mov	r3,zero
    a3fc:	28800003 	ldbu	r2,0(r5)
    a400:	1885c83a 	sub	r2,r3,r2
    a404:	f800283a 	ret
    a408:	28800003 	ldbu	r2,0(r5)
    a40c:	18c03fcc 	andi	r3,r3,255
    a410:	1885c83a 	sub	r2,r3,r2
    a414:	f800283a 	ret
    a418:	0005883a 	mov	r2,zero
    a41c:	f800283a 	ret
    a420:	10c03fcc 	andi	r3,r2,255
    a424:	003ff506 	br	a3fc <__alt_data_end+0xff00a3fc>

0000a428 <__sprint_r.part.0>:
    a428:	28801917 	ldw	r2,100(r5)
    a42c:	defff604 	addi	sp,sp,-40
    a430:	dd400515 	stw	r21,20(sp)
    a434:	dfc00915 	stw	ra,36(sp)
    a438:	df000815 	stw	fp,32(sp)
    a43c:	ddc00715 	stw	r23,28(sp)
    a440:	dd800615 	stw	r22,24(sp)
    a444:	dd000415 	stw	r20,16(sp)
    a448:	dcc00315 	stw	r19,12(sp)
    a44c:	dc800215 	stw	r18,8(sp)
    a450:	dc400115 	stw	r17,4(sp)
    a454:	dc000015 	stw	r16,0(sp)
    a458:	1088000c 	andi	r2,r2,8192
    a45c:	302b883a 	mov	r21,r6
    a460:	10002e26 	beq	r2,zero,a51c <__sprint_r.part.0+0xf4>
    a464:	30800217 	ldw	r2,8(r6)
    a468:	35800017 	ldw	r22,0(r6)
    a46c:	10002926 	beq	r2,zero,a514 <__sprint_r.part.0+0xec>
    a470:	2827883a 	mov	r19,r5
    a474:	2029883a 	mov	r20,r4
    a478:	b5c00104 	addi	r23,r22,4
    a47c:	04bfffc4 	movi	r18,-1
    a480:	bc400017 	ldw	r17,0(r23)
    a484:	b4000017 	ldw	r16,0(r22)
    a488:	0039883a 	mov	fp,zero
    a48c:	8822d0ba 	srli	r17,r17,2
    a490:	8800031e 	bne	r17,zero,a4a0 <__sprint_r.part.0+0x78>
    a494:	00001806 	br	a4f8 <__sprint_r.part.0+0xd0>
    a498:	84000104 	addi	r16,r16,4
    a49c:	8f001526 	beq	r17,fp,a4f4 <__sprint_r.part.0+0xcc>
    a4a0:	81400017 	ldw	r5,0(r16)
    a4a4:	980d883a 	mov	r6,r19
    a4a8:	a009883a 	mov	r4,r20
    a4ac:	000be500 	call	be50 <_fputwc_r>
    a4b0:	e7000044 	addi	fp,fp,1
    a4b4:	14bff81e 	bne	r2,r18,a498 <__alt_data_end+0xff00a498>
    a4b8:	9005883a 	mov	r2,r18
    a4bc:	a8000215 	stw	zero,8(r21)
    a4c0:	a8000115 	stw	zero,4(r21)
    a4c4:	dfc00917 	ldw	ra,36(sp)
    a4c8:	df000817 	ldw	fp,32(sp)
    a4cc:	ddc00717 	ldw	r23,28(sp)
    a4d0:	dd800617 	ldw	r22,24(sp)
    a4d4:	dd400517 	ldw	r21,20(sp)
    a4d8:	dd000417 	ldw	r20,16(sp)
    a4dc:	dcc00317 	ldw	r19,12(sp)
    a4e0:	dc800217 	ldw	r18,8(sp)
    a4e4:	dc400117 	ldw	r17,4(sp)
    a4e8:	dc000017 	ldw	r16,0(sp)
    a4ec:	dec00a04 	addi	sp,sp,40
    a4f0:	f800283a 	ret
    a4f4:	a8800217 	ldw	r2,8(r21)
    a4f8:	8c63883a 	add	r17,r17,r17
    a4fc:	8c63883a 	add	r17,r17,r17
    a500:	1445c83a 	sub	r2,r2,r17
    a504:	a8800215 	stw	r2,8(r21)
    a508:	b5800204 	addi	r22,r22,8
    a50c:	bdc00204 	addi	r23,r23,8
    a510:	103fdb1e 	bne	r2,zero,a480 <__alt_data_end+0xff00a480>
    a514:	0005883a 	mov	r2,zero
    a518:	003fe806 	br	a4bc <__alt_data_end+0xff00a4bc>
    a51c:	0007eb00 	call	7eb0 <__sfvwrite_r>
    a520:	003fe606 	br	a4bc <__alt_data_end+0xff00a4bc>

0000a524 <__sprint_r>:
    a524:	30c00217 	ldw	r3,8(r6)
    a528:	18000126 	beq	r3,zero,a530 <__sprint_r+0xc>
    a52c:	000a4281 	jmpi	a428 <__sprint_r.part.0>
    a530:	30000115 	stw	zero,4(r6)
    a534:	0005883a 	mov	r2,zero
    a538:	f800283a 	ret

0000a53c <___vfiprintf_internal_r>:
    a53c:	deffc904 	addi	sp,sp,-220
    a540:	df003515 	stw	fp,212(sp)
    a544:	dd003115 	stw	r20,196(sp)
    a548:	dfc03615 	stw	ra,216(sp)
    a54c:	ddc03415 	stw	r23,208(sp)
    a550:	dd803315 	stw	r22,204(sp)
    a554:	dd403215 	stw	r21,200(sp)
    a558:	dcc03015 	stw	r19,192(sp)
    a55c:	dc802f15 	stw	r18,188(sp)
    a560:	dc402e15 	stw	r17,184(sp)
    a564:	dc002d15 	stw	r16,180(sp)
    a568:	d9002015 	stw	r4,128(sp)
    a56c:	d9c02215 	stw	r7,136(sp)
    a570:	2829883a 	mov	r20,r5
    a574:	3039883a 	mov	fp,r6
    a578:	20000226 	beq	r4,zero,a584 <___vfiprintf_internal_r+0x48>
    a57c:	20800e17 	ldw	r2,56(r4)
    a580:	1000cf26 	beq	r2,zero,a8c0 <___vfiprintf_internal_r+0x384>
    a584:	a080030b 	ldhu	r2,12(r20)
    a588:	10c8000c 	andi	r3,r2,8192
    a58c:	1800061e 	bne	r3,zero,a5a8 <___vfiprintf_internal_r+0x6c>
    a590:	a1001917 	ldw	r4,100(r20)
    a594:	00f7ffc4 	movi	r3,-8193
    a598:	10880014 	ori	r2,r2,8192
    a59c:	20c6703a 	and	r3,r4,r3
    a5a0:	a080030d 	sth	r2,12(r20)
    a5a4:	a0c01915 	stw	r3,100(r20)
    a5a8:	10c0020c 	andi	r3,r2,8
    a5ac:	1800a926 	beq	r3,zero,a854 <___vfiprintf_internal_r+0x318>
    a5b0:	a0c00417 	ldw	r3,16(r20)
    a5b4:	1800a726 	beq	r3,zero,a854 <___vfiprintf_internal_r+0x318>
    a5b8:	1080068c 	andi	r2,r2,26
    a5bc:	00c00284 	movi	r3,10
    a5c0:	10c0ac26 	beq	r2,r3,a874 <___vfiprintf_internal_r+0x338>
    a5c4:	da801a04 	addi	r10,sp,104
    a5c8:	da801e15 	stw	r10,120(sp)
    a5cc:	d8801e17 	ldw	r2,120(sp)
    a5d0:	da8019c4 	addi	r10,sp,103
    a5d4:	05800074 	movhi	r22,1
    a5d8:	05c00074 	movhi	r23,1
    a5dc:	da801f15 	stw	r10,124(sp)
    a5e0:	1295c83a 	sub	r10,r2,r10
    a5e4:	b5872c04 	addi	r22,r22,7344
    a5e8:	bdc72804 	addi	r23,r23,7328
    a5ec:	dec01a15 	stw	sp,104(sp)
    a5f0:	d8001c15 	stw	zero,112(sp)
    a5f4:	d8001b15 	stw	zero,108(sp)
    a5f8:	d8002615 	stw	zero,152(sp)
    a5fc:	d8002315 	stw	zero,140(sp)
    a600:	da802715 	stw	r10,156(sp)
    a604:	d811883a 	mov	r8,sp
    a608:	dd002115 	stw	r20,132(sp)
    a60c:	e021883a 	mov	r16,fp
    a610:	80800007 	ldb	r2,0(r16)
    a614:	1003ea26 	beq	r2,zero,b5c0 <___vfiprintf_internal_r+0x1084>
    a618:	00c00944 	movi	r3,37
    a61c:	8025883a 	mov	r18,r16
    a620:	10c0021e 	bne	r2,r3,a62c <___vfiprintf_internal_r+0xf0>
    a624:	00001606 	br	a680 <___vfiprintf_internal_r+0x144>
    a628:	10c00326 	beq	r2,r3,a638 <___vfiprintf_internal_r+0xfc>
    a62c:	94800044 	addi	r18,r18,1
    a630:	90800007 	ldb	r2,0(r18)
    a634:	103ffc1e 	bne	r2,zero,a628 <__alt_data_end+0xff00a628>
    a638:	9423c83a 	sub	r17,r18,r16
    a63c:	88001026 	beq	r17,zero,a680 <___vfiprintf_internal_r+0x144>
    a640:	d8c01c17 	ldw	r3,112(sp)
    a644:	d8801b17 	ldw	r2,108(sp)
    a648:	44000015 	stw	r16,0(r8)
    a64c:	88c7883a 	add	r3,r17,r3
    a650:	10800044 	addi	r2,r2,1
    a654:	44400115 	stw	r17,4(r8)
    a658:	d8c01c15 	stw	r3,112(sp)
    a65c:	d8801b15 	stw	r2,108(sp)
    a660:	010001c4 	movi	r4,7
    a664:	2080760e 	bge	r4,r2,a840 <___vfiprintf_internal_r+0x304>
    a668:	1803821e 	bne	r3,zero,b474 <___vfiprintf_internal_r+0xf38>
    a66c:	da802317 	ldw	r10,140(sp)
    a670:	d8001b15 	stw	zero,108(sp)
    a674:	d811883a 	mov	r8,sp
    a678:	5455883a 	add	r10,r10,r17
    a67c:	da802315 	stw	r10,140(sp)
    a680:	90800007 	ldb	r2,0(r18)
    a684:	10044626 	beq	r2,zero,b7a0 <___vfiprintf_internal_r+0x1264>
    a688:	90c00047 	ldb	r3,1(r18)
    a68c:	94000044 	addi	r16,r18,1
    a690:	d8001d85 	stb	zero,118(sp)
    a694:	0009883a 	mov	r4,zero
    a698:	000f883a 	mov	r7,zero
    a69c:	027fffc4 	movi	r9,-1
    a6a0:	0023883a 	mov	r17,zero
    a6a4:	0029883a 	mov	r20,zero
    a6a8:	01401604 	movi	r5,88
    a6ac:	01800244 	movi	r6,9
    a6b0:	03400a84 	movi	r13,42
    a6b4:	03001b04 	movi	r12,108
    a6b8:	84000044 	addi	r16,r16,1
    a6bc:	18bff804 	addi	r2,r3,-32
    a6c0:	28827336 	bltu	r5,r2,b090 <___vfiprintf_internal_r+0xb54>
    a6c4:	100490ba 	slli	r2,r2,2
    a6c8:	02800074 	movhi	r10,1
    a6cc:	52a9b704 	addi	r10,r10,-22820
    a6d0:	1285883a 	add	r2,r2,r10
    a6d4:	10800017 	ldw	r2,0(r2)
    a6d8:	1000683a 	jmp	r2
    a6dc:	0000adc4 	movi	zero,695
    a6e0:	0000b090 	cmplti	zero,zero,706
    a6e4:	0000b090 	cmplti	zero,zero,706
    a6e8:	0000ade4 	muli	zero,zero,695
    a6ec:	0000b090 	cmplti	zero,zero,706
    a6f0:	0000b090 	cmplti	zero,zero,706
    a6f4:	0000b090 	cmplti	zero,zero,706
    a6f8:	0000b090 	cmplti	zero,zero,706
    a6fc:	0000b090 	cmplti	zero,zero,706
    a700:	0000b090 	cmplti	zero,zero,706
    a704:	0000afcc 	andi	zero,zero,703
    a708:	0000afe8 	cmpgeui	zero,zero,703
    a70c:	0000b090 	cmplti	zero,zero,706
    a710:	0000a8d0 	cmplti	zero,zero,675
    a714:	0000aff8 	rdprs	zero,zero,703
    a718:	0000b090 	cmplti	zero,zero,706
    a71c:	0000adf0 	cmpltui	zero,zero,695
    a720:	0000adfc 	xorhi	zero,zero,695
    a724:	0000adfc 	xorhi	zero,zero,695
    a728:	0000adfc 	xorhi	zero,zero,695
    a72c:	0000adfc 	xorhi	zero,zero,695
    a730:	0000adfc 	xorhi	zero,zero,695
    a734:	0000adfc 	xorhi	zero,zero,695
    a738:	0000adfc 	xorhi	zero,zero,695
    a73c:	0000adfc 	xorhi	zero,zero,695
    a740:	0000adfc 	xorhi	zero,zero,695
    a744:	0000b090 	cmplti	zero,zero,706
    a748:	0000b090 	cmplti	zero,zero,706
    a74c:	0000b090 	cmplti	zero,zero,706
    a750:	0000b090 	cmplti	zero,zero,706
    a754:	0000b090 	cmplti	zero,zero,706
    a758:	0000b090 	cmplti	zero,zero,706
    a75c:	0000b090 	cmplti	zero,zero,706
    a760:	0000b090 	cmplti	zero,zero,706
    a764:	0000b090 	cmplti	zero,zero,706
    a768:	0000b090 	cmplti	zero,zero,706
    a76c:	0000ae28 	cmpgeui	zero,zero,696
    a770:	0000b090 	cmplti	zero,zero,706
    a774:	0000b090 	cmplti	zero,zero,706
    a778:	0000b090 	cmplti	zero,zero,706
    a77c:	0000b090 	cmplti	zero,zero,706
    a780:	0000b090 	cmplti	zero,zero,706
    a784:	0000b090 	cmplti	zero,zero,706
    a788:	0000b090 	cmplti	zero,zero,706
    a78c:	0000b090 	cmplti	zero,zero,706
    a790:	0000b090 	cmplti	zero,zero,706
    a794:	0000b090 	cmplti	zero,zero,706
    a798:	0000ae60 	cmpeqi	zero,zero,697
    a79c:	0000b090 	cmplti	zero,zero,706
    a7a0:	0000b090 	cmplti	zero,zero,706
    a7a4:	0000b090 	cmplti	zero,zero,706
    a7a8:	0000b090 	cmplti	zero,zero,706
    a7ac:	0000b090 	cmplti	zero,zero,706
    a7b0:	0000aeb8 	rdprs	zero,zero,698
    a7b4:	0000b090 	cmplti	zero,zero,706
    a7b8:	0000b090 	cmplti	zero,zero,706
    a7bc:	0000af28 	cmpgeui	zero,zero,700
    a7c0:	0000b090 	cmplti	zero,zero,706
    a7c4:	0000b090 	cmplti	zero,zero,706
    a7c8:	0000b090 	cmplti	zero,zero,706
    a7cc:	0000b090 	cmplti	zero,zero,706
    a7d0:	0000b090 	cmplti	zero,zero,706
    a7d4:	0000b090 	cmplti	zero,zero,706
    a7d8:	0000b090 	cmplti	zero,zero,706
    a7dc:	0000b090 	cmplti	zero,zero,706
    a7e0:	0000b090 	cmplti	zero,zero,706
    a7e4:	0000b090 	cmplti	zero,zero,706
    a7e8:	0000acd4 	movui	zero,691
    a7ec:	0000ad00 	call	ad0 <init_LCD+0x58>
    a7f0:	0000b090 	cmplti	zero,zero,706
    a7f4:	0000b090 	cmplti	zero,zero,706
    a7f8:	0000b090 	cmplti	zero,zero,706
    a7fc:	0000b038 	rdprs	zero,zero,704
    a800:	0000ad00 	call	ad0 <init_LCD+0x58>
    a804:	0000b090 	cmplti	zero,zero,706
    a808:	0000b090 	cmplti	zero,zero,706
    a80c:	0000ab94 	movui	zero,686
    a810:	0000b090 	cmplti	zero,zero,706
    a814:	0000aba4 	muli	zero,zero,686
    a818:	0000abe0 	cmpeqi	zero,zero,687
    a81c:	0000a8dc 	xori	zero,zero,675
    a820:	0000ab88 	cmpgei	zero,zero,686
    a824:	0000b090 	cmplti	zero,zero,706
    a828:	0000af64 	muli	zero,zero,701
    a82c:	0000b090 	cmplti	zero,zero,706
    a830:	0000afbc 	xorhi	zero,zero,702
    a834:	0000b090 	cmplti	zero,zero,706
    a838:	0000b090 	cmplti	zero,zero,706
    a83c:	0000ac80 	call	ac8 <init_LCD+0x50>
    a840:	42000204 	addi	r8,r8,8
    a844:	da802317 	ldw	r10,140(sp)
    a848:	5455883a 	add	r10,r10,r17
    a84c:	da802315 	stw	r10,140(sp)
    a850:	003f8b06 	br	a680 <__alt_data_end+0xff00a680>
    a854:	d9002017 	ldw	r4,128(sp)
    a858:	a00b883a 	mov	r5,r20
    a85c:	0005a580 	call	5a58 <__swsetup_r>
    a860:	1003b11e 	bne	r2,zero,b728 <___vfiprintf_internal_r+0x11ec>
    a864:	a080030b 	ldhu	r2,12(r20)
    a868:	00c00284 	movi	r3,10
    a86c:	1080068c 	andi	r2,r2,26
    a870:	10ff541e 	bne	r2,r3,a5c4 <__alt_data_end+0xff00a5c4>
    a874:	a080038f 	ldh	r2,14(r20)
    a878:	103f5216 	blt	r2,zero,a5c4 <__alt_data_end+0xff00a5c4>
    a87c:	d9c02217 	ldw	r7,136(sp)
    a880:	d9002017 	ldw	r4,128(sp)
    a884:	e00d883a 	mov	r6,fp
    a888:	a00b883a 	mov	r5,r20
    a88c:	000b9b40 	call	b9b4 <__sbprintf>
    a890:	dfc03617 	ldw	ra,216(sp)
    a894:	df003517 	ldw	fp,212(sp)
    a898:	ddc03417 	ldw	r23,208(sp)
    a89c:	dd803317 	ldw	r22,204(sp)
    a8a0:	dd403217 	ldw	r21,200(sp)
    a8a4:	dd003117 	ldw	r20,196(sp)
    a8a8:	dcc03017 	ldw	r19,192(sp)
    a8ac:	dc802f17 	ldw	r18,188(sp)
    a8b0:	dc402e17 	ldw	r17,184(sp)
    a8b4:	dc002d17 	ldw	r16,180(sp)
    a8b8:	dec03704 	addi	sp,sp,220
    a8bc:	f800283a 	ret
    a8c0:	0007a2c0 	call	7a2c <__sinit>
    a8c4:	003f2f06 	br	a584 <__alt_data_end+0xff00a584>
    a8c8:	0463c83a 	sub	r17,zero,r17
    a8cc:	d8802215 	stw	r2,136(sp)
    a8d0:	a5000114 	ori	r20,r20,4
    a8d4:	80c00007 	ldb	r3,0(r16)
    a8d8:	003f7706 	br	a6b8 <__alt_data_end+0xff00a6b8>
    a8dc:	00800c04 	movi	r2,48
    a8e0:	da802217 	ldw	r10,136(sp)
    a8e4:	d8801d05 	stb	r2,116(sp)
    a8e8:	00801e04 	movi	r2,120
    a8ec:	d8801d45 	stb	r2,117(sp)
    a8f0:	d8001d85 	stb	zero,118(sp)
    a8f4:	50c00104 	addi	r3,r10,4
    a8f8:	54800017 	ldw	r18,0(r10)
    a8fc:	0027883a 	mov	r19,zero
    a900:	a0800094 	ori	r2,r20,2
    a904:	48030b16 	blt	r9,zero,b534 <___vfiprintf_internal_r+0xff8>
    a908:	00bfdfc4 	movi	r2,-129
    a90c:	a096703a 	and	r11,r20,r2
    a910:	d8c02215 	stw	r3,136(sp)
    a914:	5d000094 	ori	r20,r11,2
    a918:	90032b1e 	bne	r18,zero,b5c8 <___vfiprintf_internal_r+0x108c>
    a91c:	00800074 	movhi	r2,1
    a920:	1086c704 	addi	r2,r2,6940
    a924:	d8802615 	stw	r2,152(sp)
    a928:	0039883a 	mov	fp,zero
    a92c:	48017b1e 	bne	r9,zero,af1c <___vfiprintf_internal_r+0x9e0>
    a930:	0013883a 	mov	r9,zero
    a934:	0027883a 	mov	r19,zero
    a938:	dd401a04 	addi	r21,sp,104
    a93c:	4825883a 	mov	r18,r9
    a940:	4cc0010e 	bge	r9,r19,a948 <___vfiprintf_internal_r+0x40c>
    a944:	9825883a 	mov	r18,r19
    a948:	e7003fcc 	andi	fp,fp,255
    a94c:	e700201c 	xori	fp,fp,128
    a950:	e73fe004 	addi	fp,fp,-128
    a954:	e0000126 	beq	fp,zero,a95c <___vfiprintf_internal_r+0x420>
    a958:	94800044 	addi	r18,r18,1
    a95c:	a380008c 	andi	r14,r20,2
    a960:	70000126 	beq	r14,zero,a968 <___vfiprintf_internal_r+0x42c>
    a964:	94800084 	addi	r18,r18,2
    a968:	a700210c 	andi	fp,r20,132
    a96c:	e001df1e 	bne	fp,zero,b0ec <___vfiprintf_internal_r+0xbb0>
    a970:	8c87c83a 	sub	r3,r17,r18
    a974:	00c1dd0e 	bge	zero,r3,b0ec <___vfiprintf_internal_r+0xbb0>
    a978:	01c00404 	movi	r7,16
    a97c:	d8801c17 	ldw	r2,112(sp)
    a980:	38c3ad0e 	bge	r7,r3,b838 <___vfiprintf_internal_r+0x12fc>
    a984:	02800074 	movhi	r10,1
    a988:	52872c04 	addi	r10,r10,7344
    a98c:	dc002915 	stw	r16,164(sp)
    a990:	d9801b17 	ldw	r6,108(sp)
    a994:	da802415 	stw	r10,144(sp)
    a998:	03c001c4 	movi	r15,7
    a99c:	da402515 	stw	r9,148(sp)
    a9a0:	db802815 	stw	r14,160(sp)
    a9a4:	1821883a 	mov	r16,r3
    a9a8:	00000506 	br	a9c0 <___vfiprintf_internal_r+0x484>
    a9ac:	31400084 	addi	r5,r6,2
    a9b0:	42000204 	addi	r8,r8,8
    a9b4:	200d883a 	mov	r6,r4
    a9b8:	843ffc04 	addi	r16,r16,-16
    a9bc:	3c000d0e 	bge	r7,r16,a9f4 <___vfiprintf_internal_r+0x4b8>
    a9c0:	10800404 	addi	r2,r2,16
    a9c4:	31000044 	addi	r4,r6,1
    a9c8:	45800015 	stw	r22,0(r8)
    a9cc:	41c00115 	stw	r7,4(r8)
    a9d0:	d8801c15 	stw	r2,112(sp)
    a9d4:	d9001b15 	stw	r4,108(sp)
    a9d8:	793ff40e 	bge	r15,r4,a9ac <__alt_data_end+0xff00a9ac>
    a9dc:	1001b51e 	bne	r2,zero,b0b4 <___vfiprintf_internal_r+0xb78>
    a9e0:	843ffc04 	addi	r16,r16,-16
    a9e4:	000d883a 	mov	r6,zero
    a9e8:	01400044 	movi	r5,1
    a9ec:	d811883a 	mov	r8,sp
    a9f0:	3c3ff316 	blt	r7,r16,a9c0 <__alt_data_end+0xff00a9c0>
    a9f4:	8007883a 	mov	r3,r16
    a9f8:	da402517 	ldw	r9,148(sp)
    a9fc:	db802817 	ldw	r14,160(sp)
    aa00:	dc002917 	ldw	r16,164(sp)
    aa04:	da802417 	ldw	r10,144(sp)
    aa08:	1885883a 	add	r2,r3,r2
    aa0c:	40c00115 	stw	r3,4(r8)
    aa10:	42800015 	stw	r10,0(r8)
    aa14:	d8801c15 	stw	r2,112(sp)
    aa18:	d9401b15 	stw	r5,108(sp)
    aa1c:	00c001c4 	movi	r3,7
    aa20:	19426016 	blt	r3,r5,b3a4 <___vfiprintf_internal_r+0xe68>
    aa24:	d8c01d87 	ldb	r3,118(sp)
    aa28:	42000204 	addi	r8,r8,8
    aa2c:	29000044 	addi	r4,r5,1
    aa30:	1801b31e 	bne	r3,zero,b100 <___vfiprintf_internal_r+0xbc4>
    aa34:	7001c026 	beq	r14,zero,b138 <___vfiprintf_internal_r+0xbfc>
    aa38:	d8c01d04 	addi	r3,sp,116
    aa3c:	10800084 	addi	r2,r2,2
    aa40:	40c00015 	stw	r3,0(r8)
    aa44:	00c00084 	movi	r3,2
    aa48:	40c00115 	stw	r3,4(r8)
    aa4c:	d8801c15 	stw	r2,112(sp)
    aa50:	d9001b15 	stw	r4,108(sp)
    aa54:	00c001c4 	movi	r3,7
    aa58:	1902650e 	bge	r3,r4,b3f0 <___vfiprintf_internal_r+0xeb4>
    aa5c:	10029a1e 	bne	r2,zero,b4c8 <___vfiprintf_internal_r+0xf8c>
    aa60:	00c02004 	movi	r3,128
    aa64:	01000044 	movi	r4,1
    aa68:	000b883a 	mov	r5,zero
    aa6c:	d811883a 	mov	r8,sp
    aa70:	e0c1b31e 	bne	fp,r3,b140 <___vfiprintf_internal_r+0xc04>
    aa74:	8cb9c83a 	sub	fp,r17,r18
    aa78:	0701b10e 	bge	zero,fp,b140 <___vfiprintf_internal_r+0xc04>
    aa7c:	01c00404 	movi	r7,16
    aa80:	3f03890e 	bge	r7,fp,b8a8 <___vfiprintf_internal_r+0x136c>
    aa84:	00c00074 	movhi	r3,1
    aa88:	18c72804 	addi	r3,r3,7328
    aa8c:	d8c02415 	stw	r3,144(sp)
    aa90:	8007883a 	mov	r3,r16
    aa94:	034001c4 	movi	r13,7
    aa98:	e021883a 	mov	r16,fp
    aa9c:	da402515 	stw	r9,148(sp)
    aaa0:	1839883a 	mov	fp,r3
    aaa4:	00000506 	br	aabc <___vfiprintf_internal_r+0x580>
    aaa8:	29800084 	addi	r6,r5,2
    aaac:	42000204 	addi	r8,r8,8
    aab0:	180b883a 	mov	r5,r3
    aab4:	843ffc04 	addi	r16,r16,-16
    aab8:	3c000d0e 	bge	r7,r16,aaf0 <___vfiprintf_internal_r+0x5b4>
    aabc:	10800404 	addi	r2,r2,16
    aac0:	28c00044 	addi	r3,r5,1
    aac4:	45c00015 	stw	r23,0(r8)
    aac8:	41c00115 	stw	r7,4(r8)
    aacc:	d8801c15 	stw	r2,112(sp)
    aad0:	d8c01b15 	stw	r3,108(sp)
    aad4:	68fff40e 	bge	r13,r3,aaa8 <__alt_data_end+0xff00aaa8>
    aad8:	1002241e 	bne	r2,zero,b36c <___vfiprintf_internal_r+0xe30>
    aadc:	843ffc04 	addi	r16,r16,-16
    aae0:	01800044 	movi	r6,1
    aae4:	000b883a 	mov	r5,zero
    aae8:	d811883a 	mov	r8,sp
    aaec:	3c3ff316 	blt	r7,r16,aabc <__alt_data_end+0xff00aabc>
    aaf0:	da402517 	ldw	r9,148(sp)
    aaf4:	e007883a 	mov	r3,fp
    aaf8:	8039883a 	mov	fp,r16
    aafc:	1821883a 	mov	r16,r3
    ab00:	d8c02417 	ldw	r3,144(sp)
    ab04:	1705883a 	add	r2,r2,fp
    ab08:	47000115 	stw	fp,4(r8)
    ab0c:	40c00015 	stw	r3,0(r8)
    ab10:	d8801c15 	stw	r2,112(sp)
    ab14:	d9801b15 	stw	r6,108(sp)
    ab18:	00c001c4 	movi	r3,7
    ab1c:	19827616 	blt	r3,r6,b4f8 <___vfiprintf_internal_r+0xfbc>
    ab20:	4cf9c83a 	sub	fp,r9,r19
    ab24:	42000204 	addi	r8,r8,8
    ab28:	31000044 	addi	r4,r6,1
    ab2c:	300b883a 	mov	r5,r6
    ab30:	07018516 	blt	zero,fp,b148 <___vfiprintf_internal_r+0xc0c>
    ab34:	9885883a 	add	r2,r19,r2
    ab38:	45400015 	stw	r21,0(r8)
    ab3c:	44c00115 	stw	r19,4(r8)
    ab40:	d8801c15 	stw	r2,112(sp)
    ab44:	d9001b15 	stw	r4,108(sp)
    ab48:	00c001c4 	movi	r3,7
    ab4c:	1901dd0e 	bge	r3,r4,b2c4 <___vfiprintf_internal_r+0xd88>
    ab50:	1002401e 	bne	r2,zero,b454 <___vfiprintf_internal_r+0xf18>
    ab54:	d8001b15 	stw	zero,108(sp)
    ab58:	a2c0010c 	andi	r11,r20,4
    ab5c:	58000226 	beq	r11,zero,ab68 <___vfiprintf_internal_r+0x62c>
    ab60:	8ca7c83a 	sub	r19,r17,r18
    ab64:	04c2f216 	blt	zero,r19,b730 <___vfiprintf_internal_r+0x11f4>
    ab68:	8c80010e 	bge	r17,r18,ab70 <___vfiprintf_internal_r+0x634>
    ab6c:	9023883a 	mov	r17,r18
    ab70:	da802317 	ldw	r10,140(sp)
    ab74:	5455883a 	add	r10,r10,r17
    ab78:	da802315 	stw	r10,140(sp)
    ab7c:	d8001b15 	stw	zero,108(sp)
    ab80:	d811883a 	mov	r8,sp
    ab84:	003ea206 	br	a610 <__alt_data_end+0xff00a610>
    ab88:	a5000814 	ori	r20,r20,32
    ab8c:	80c00007 	ldb	r3,0(r16)
    ab90:	003ec906 	br	a6b8 <__alt_data_end+0xff00a6b8>
    ab94:	80c00007 	ldb	r3,0(r16)
    ab98:	1b030926 	beq	r3,r12,b7c0 <___vfiprintf_internal_r+0x1284>
    ab9c:	a5000414 	ori	r20,r20,16
    aba0:	003ec506 	br	a6b8 <__alt_data_end+0xff00a6b8>
    aba4:	21003fcc 	andi	r4,r4,255
    aba8:	20035e1e 	bne	r4,zero,b924 <___vfiprintf_internal_r+0x13e8>
    abac:	a080080c 	andi	r2,r20,32
    abb0:	1002a526 	beq	r2,zero,b648 <___vfiprintf_internal_r+0x110c>
    abb4:	da802217 	ldw	r10,136(sp)
    abb8:	50800017 	ldw	r2,0(r10)
    abbc:	da802317 	ldw	r10,140(sp)
    abc0:	5007d7fa 	srai	r3,r10,31
    abc4:	da802217 	ldw	r10,136(sp)
    abc8:	10c00115 	stw	r3,4(r2)
    abcc:	52800104 	addi	r10,r10,4
    abd0:	da802215 	stw	r10,136(sp)
    abd4:	da802317 	ldw	r10,140(sp)
    abd8:	12800015 	stw	r10,0(r2)
    abdc:	003e8c06 	br	a610 <__alt_data_end+0xff00a610>
    abe0:	21003fcc 	andi	r4,r4,255
    abe4:	2003511e 	bne	r4,zero,b92c <___vfiprintf_internal_r+0x13f0>
    abe8:	a080080c 	andi	r2,r20,32
    abec:	1000a126 	beq	r2,zero,ae74 <___vfiprintf_internal_r+0x938>
    abf0:	da802217 	ldw	r10,136(sp)
    abf4:	d8001d85 	stb	zero,118(sp)
    abf8:	50800204 	addi	r2,r10,8
    abfc:	54800017 	ldw	r18,0(r10)
    ac00:	54c00117 	ldw	r19,4(r10)
    ac04:	4802b416 	blt	r9,zero,b6d8 <___vfiprintf_internal_r+0x119c>
    ac08:	013fdfc4 	movi	r4,-129
    ac0c:	94c6b03a 	or	r3,r18,r19
    ac10:	d8802215 	stw	r2,136(sp)
    ac14:	a128703a 	and	r20,r20,r4
    ac18:	1800a226 	beq	r3,zero,aea4 <___vfiprintf_internal_r+0x968>
    ac1c:	0039883a 	mov	fp,zero
    ac20:	dd401a04 	addi	r21,sp,104
    ac24:	9006d0fa 	srli	r3,r18,3
    ac28:	9808977a 	slli	r4,r19,29
    ac2c:	9826d0fa 	srli	r19,r19,3
    ac30:	948001cc 	andi	r18,r18,7
    ac34:	90800c04 	addi	r2,r18,48
    ac38:	ad7fffc4 	addi	r21,r21,-1
    ac3c:	20e4b03a 	or	r18,r4,r3
    ac40:	a8800005 	stb	r2,0(r21)
    ac44:	94c6b03a 	or	r3,r18,r19
    ac48:	183ff61e 	bne	r3,zero,ac24 <__alt_data_end+0xff00ac24>
    ac4c:	a0c0004c 	andi	r3,r20,1
    ac50:	18005926 	beq	r3,zero,adb8 <___vfiprintf_internal_r+0x87c>
    ac54:	10803fcc 	andi	r2,r2,255
    ac58:	1080201c 	xori	r2,r2,128
    ac5c:	10bfe004 	addi	r2,r2,-128
    ac60:	00c00c04 	movi	r3,48
    ac64:	10c05426 	beq	r2,r3,adb8 <___vfiprintf_internal_r+0x87c>
    ac68:	da801e17 	ldw	r10,120(sp)
    ac6c:	a8bfffc4 	addi	r2,r21,-1
    ac70:	a8ffffc5 	stb	r3,-1(r21)
    ac74:	50a7c83a 	sub	r19,r10,r2
    ac78:	102b883a 	mov	r21,r2
    ac7c:	003f2f06 	br	a93c <__alt_data_end+0xff00a93c>
    ac80:	21003fcc 	andi	r4,r4,255
    ac84:	2003421e 	bne	r4,zero,b990 <___vfiprintf_internal_r+0x1454>
    ac88:	00800074 	movhi	r2,1
    ac8c:	1086c704 	addi	r2,r2,6940
    ac90:	d8802615 	stw	r2,152(sp)
    ac94:	a080080c 	andi	r2,r20,32
    ac98:	1000aa26 	beq	r2,zero,af44 <___vfiprintf_internal_r+0xa08>
    ac9c:	da802217 	ldw	r10,136(sp)
    aca0:	54800017 	ldw	r18,0(r10)
    aca4:	54c00117 	ldw	r19,4(r10)
    aca8:	52800204 	addi	r10,r10,8
    acac:	da802215 	stw	r10,136(sp)
    acb0:	a080004c 	andi	r2,r20,1
    acb4:	1001d226 	beq	r2,zero,b400 <___vfiprintf_internal_r+0xec4>
    acb8:	94c4b03a 	or	r2,r18,r19
    acbc:	1002351e 	bne	r2,zero,b594 <___vfiprintf_internal_r+0x1058>
    acc0:	d8001d85 	stb	zero,118(sp)
    acc4:	48022216 	blt	r9,zero,b550 <___vfiprintf_internal_r+0x1014>
    acc8:	00bfdfc4 	movi	r2,-129
    accc:	a0a8703a 	and	r20,r20,r2
    acd0:	003f1506 	br	a928 <__alt_data_end+0xff00a928>
    acd4:	da802217 	ldw	r10,136(sp)
    acd8:	04800044 	movi	r18,1
    acdc:	d8001d85 	stb	zero,118(sp)
    ace0:	50800017 	ldw	r2,0(r10)
    ace4:	52800104 	addi	r10,r10,4
    ace8:	da802215 	stw	r10,136(sp)
    acec:	d8801005 	stb	r2,64(sp)
    acf0:	9027883a 	mov	r19,r18
    acf4:	dd401004 	addi	r21,sp,64
    acf8:	0013883a 	mov	r9,zero
    acfc:	003f1706 	br	a95c <__alt_data_end+0xff00a95c>
    ad00:	21003fcc 	andi	r4,r4,255
    ad04:	2003201e 	bne	r4,zero,b988 <___vfiprintf_internal_r+0x144c>
    ad08:	a080080c 	andi	r2,r20,32
    ad0c:	10004b26 	beq	r2,zero,ae3c <___vfiprintf_internal_r+0x900>
    ad10:	da802217 	ldw	r10,136(sp)
    ad14:	50800117 	ldw	r2,4(r10)
    ad18:	54800017 	ldw	r18,0(r10)
    ad1c:	52800204 	addi	r10,r10,8
    ad20:	da802215 	stw	r10,136(sp)
    ad24:	1027883a 	mov	r19,r2
    ad28:	10022c16 	blt	r2,zero,b5dc <___vfiprintf_internal_r+0x10a0>
    ad2c:	df001d83 	ldbu	fp,118(sp)
    ad30:	48007216 	blt	r9,zero,aefc <___vfiprintf_internal_r+0x9c0>
    ad34:	00ffdfc4 	movi	r3,-129
    ad38:	94c4b03a 	or	r2,r18,r19
    ad3c:	a0e8703a 	and	r20,r20,r3
    ad40:	1000cc26 	beq	r2,zero,b074 <___vfiprintf_internal_r+0xb38>
    ad44:	98021026 	beq	r19,zero,b588 <___vfiprintf_internal_r+0x104c>
    ad48:	dc402415 	stw	r17,144(sp)
    ad4c:	dc002515 	stw	r16,148(sp)
    ad50:	9823883a 	mov	r17,r19
    ad54:	9021883a 	mov	r16,r18
    ad58:	dd401a04 	addi	r21,sp,104
    ad5c:	4825883a 	mov	r18,r9
    ad60:	4027883a 	mov	r19,r8
    ad64:	8009883a 	mov	r4,r16
    ad68:	880b883a 	mov	r5,r17
    ad6c:	01800284 	movi	r6,10
    ad70:	000f883a 	mov	r7,zero
    ad74:	000c91c0 	call	c91c <__umoddi3>
    ad78:	10800c04 	addi	r2,r2,48
    ad7c:	ad7fffc4 	addi	r21,r21,-1
    ad80:	8009883a 	mov	r4,r16
    ad84:	880b883a 	mov	r5,r17
    ad88:	a8800005 	stb	r2,0(r21)
    ad8c:	01800284 	movi	r6,10
    ad90:	000f883a 	mov	r7,zero
    ad94:	000c3a40 	call	c3a4 <__udivdi3>
    ad98:	1021883a 	mov	r16,r2
    ad9c:	10c4b03a 	or	r2,r2,r3
    ada0:	1823883a 	mov	r17,r3
    ada4:	103fef1e 	bne	r2,zero,ad64 <__alt_data_end+0xff00ad64>
    ada8:	dc402417 	ldw	r17,144(sp)
    adac:	dc002517 	ldw	r16,148(sp)
    adb0:	9013883a 	mov	r9,r18
    adb4:	9811883a 	mov	r8,r19
    adb8:	da801e17 	ldw	r10,120(sp)
    adbc:	5567c83a 	sub	r19,r10,r21
    adc0:	003ede06 	br	a93c <__alt_data_end+0xff00a93c>
    adc4:	38803fcc 	andi	r2,r7,255
    adc8:	1080201c 	xori	r2,r2,128
    adcc:	10bfe004 	addi	r2,r2,-128
    add0:	1002371e 	bne	r2,zero,b6b0 <___vfiprintf_internal_r+0x1174>
    add4:	01000044 	movi	r4,1
    add8:	01c00804 	movi	r7,32
    addc:	80c00007 	ldb	r3,0(r16)
    ade0:	003e3506 	br	a6b8 <__alt_data_end+0xff00a6b8>
    ade4:	a5000054 	ori	r20,r20,1
    ade8:	80c00007 	ldb	r3,0(r16)
    adec:	003e3206 	br	a6b8 <__alt_data_end+0xff00a6b8>
    adf0:	a5002014 	ori	r20,r20,128
    adf4:	80c00007 	ldb	r3,0(r16)
    adf8:	003e2f06 	br	a6b8 <__alt_data_end+0xff00a6b8>
    adfc:	8015883a 	mov	r10,r16
    ae00:	0023883a 	mov	r17,zero
    ae04:	18bff404 	addi	r2,r3,-48
    ae08:	50c00007 	ldb	r3,0(r10)
    ae0c:	8c4002a4 	muli	r17,r17,10
    ae10:	84000044 	addi	r16,r16,1
    ae14:	8015883a 	mov	r10,r16
    ae18:	1463883a 	add	r17,r2,r17
    ae1c:	18bff404 	addi	r2,r3,-48
    ae20:	30bff92e 	bgeu	r6,r2,ae08 <__alt_data_end+0xff00ae08>
    ae24:	003e2506 	br	a6bc <__alt_data_end+0xff00a6bc>
    ae28:	21003fcc 	andi	r4,r4,255
    ae2c:	2002d41e 	bne	r4,zero,b980 <___vfiprintf_internal_r+0x1444>
    ae30:	a5000414 	ori	r20,r20,16
    ae34:	a080080c 	andi	r2,r20,32
    ae38:	103fb51e 	bne	r2,zero,ad10 <__alt_data_end+0xff00ad10>
    ae3c:	a080040c 	andi	r2,r20,16
    ae40:	1001f826 	beq	r2,zero,b624 <___vfiprintf_internal_r+0x10e8>
    ae44:	da802217 	ldw	r10,136(sp)
    ae48:	54800017 	ldw	r18,0(r10)
    ae4c:	52800104 	addi	r10,r10,4
    ae50:	da802215 	stw	r10,136(sp)
    ae54:	9027d7fa 	srai	r19,r18,31
    ae58:	9805883a 	mov	r2,r19
    ae5c:	003fb206 	br	ad28 <__alt_data_end+0xff00ad28>
    ae60:	21003fcc 	andi	r4,r4,255
    ae64:	2002c41e 	bne	r4,zero,b978 <___vfiprintf_internal_r+0x143c>
    ae68:	a5000414 	ori	r20,r20,16
    ae6c:	a080080c 	andi	r2,r20,32
    ae70:	103f5f1e 	bne	r2,zero,abf0 <__alt_data_end+0xff00abf0>
    ae74:	a080040c 	andi	r2,r20,16
    ae78:	10020f26 	beq	r2,zero,b6b8 <___vfiprintf_internal_r+0x117c>
    ae7c:	da802217 	ldw	r10,136(sp)
    ae80:	d8001d85 	stb	zero,118(sp)
    ae84:	0027883a 	mov	r19,zero
    ae88:	50800104 	addi	r2,r10,4
    ae8c:	54800017 	ldw	r18,0(r10)
    ae90:	48021116 	blt	r9,zero,b6d8 <___vfiprintf_internal_r+0x119c>
    ae94:	00ffdfc4 	movi	r3,-129
    ae98:	d8802215 	stw	r2,136(sp)
    ae9c:	a0e8703a 	and	r20,r20,r3
    aea0:	903f5e1e 	bne	r18,zero,ac1c <__alt_data_end+0xff00ac1c>
    aea4:	0039883a 	mov	fp,zero
    aea8:	4802a626 	beq	r9,zero,b944 <___vfiprintf_internal_r+0x1408>
    aeac:	0025883a 	mov	r18,zero
    aeb0:	0027883a 	mov	r19,zero
    aeb4:	003f5a06 	br	ac20 <__alt_data_end+0xff00ac20>
    aeb8:	21003fcc 	andi	r4,r4,255
    aebc:	20029f1e 	bne	r4,zero,b93c <___vfiprintf_internal_r+0x1400>
    aec0:	a5000414 	ori	r20,r20,16
    aec4:	a080080c 	andi	r2,r20,32
    aec8:	10005e1e 	bne	r2,zero,b044 <___vfiprintf_internal_r+0xb08>
    aecc:	a080040c 	andi	r2,r20,16
    aed0:	1001a21e 	bne	r2,zero,b55c <___vfiprintf_internal_r+0x1020>
    aed4:	a080100c 	andi	r2,r20,64
    aed8:	d8001d85 	stb	zero,118(sp)
    aedc:	da802217 	ldw	r10,136(sp)
    aee0:	1002231e 	bne	r2,zero,b770 <___vfiprintf_internal_r+0x1234>
    aee4:	50800104 	addi	r2,r10,4
    aee8:	54800017 	ldw	r18,0(r10)
    aeec:	0027883a 	mov	r19,zero
    aef0:	4801a00e 	bge	r9,zero,b574 <___vfiprintf_internal_r+0x1038>
    aef4:	d8802215 	stw	r2,136(sp)
    aef8:	0039883a 	mov	fp,zero
    aefc:	94c4b03a 	or	r2,r18,r19
    af00:	103f901e 	bne	r2,zero,ad44 <__alt_data_end+0xff00ad44>
    af04:	00800044 	movi	r2,1
    af08:	10803fcc 	andi	r2,r2,255
    af0c:	00c00044 	movi	r3,1
    af10:	10c05926 	beq	r2,r3,b078 <___vfiprintf_internal_r+0xb3c>
    af14:	00c00084 	movi	r3,2
    af18:	10ffe41e 	bne	r2,r3,aeac <__alt_data_end+0xff00aeac>
    af1c:	0025883a 	mov	r18,zero
    af20:	0027883a 	mov	r19,zero
    af24:	00013d06 	br	b41c <___vfiprintf_internal_r+0xee0>
    af28:	21003fcc 	andi	r4,r4,255
    af2c:	2002811e 	bne	r4,zero,b934 <___vfiprintf_internal_r+0x13f8>
    af30:	00800074 	movhi	r2,1
    af34:	1086c204 	addi	r2,r2,6920
    af38:	d8802615 	stw	r2,152(sp)
    af3c:	a080080c 	andi	r2,r20,32
    af40:	103f561e 	bne	r2,zero,ac9c <__alt_data_end+0xff00ac9c>
    af44:	a080040c 	andi	r2,r20,16
    af48:	1001d126 	beq	r2,zero,b690 <___vfiprintf_internal_r+0x1154>
    af4c:	da802217 	ldw	r10,136(sp)
    af50:	0027883a 	mov	r19,zero
    af54:	54800017 	ldw	r18,0(r10)
    af58:	52800104 	addi	r10,r10,4
    af5c:	da802215 	stw	r10,136(sp)
    af60:	003f5306 	br	acb0 <__alt_data_end+0xff00acb0>
    af64:	da802217 	ldw	r10,136(sp)
    af68:	d8001d85 	stb	zero,118(sp)
    af6c:	55400017 	ldw	r21,0(r10)
    af70:	50c00104 	addi	r3,r10,4
    af74:	a8024226 	beq	r21,zero,b880 <___vfiprintf_internal_r+0x1344>
    af78:	48021816 	blt	r9,zero,b7dc <___vfiprintf_internal_r+0x12a0>
    af7c:	480d883a 	mov	r6,r9
    af80:	000b883a 	mov	r5,zero
    af84:	a809883a 	mov	r4,r21
    af88:	d8c02a15 	stw	r3,168(sp)
    af8c:	da002b15 	stw	r8,172(sp)
    af90:	da402c15 	stw	r9,176(sp)
    af94:	000878c0 	call	878c <memchr>
    af98:	d8c02a17 	ldw	r3,168(sp)
    af9c:	da002b17 	ldw	r8,172(sp)
    afa0:	da402c17 	ldw	r9,176(sp)
    afa4:	10024826 	beq	r2,zero,b8c8 <___vfiprintf_internal_r+0x138c>
    afa8:	1567c83a 	sub	r19,r2,r21
    afac:	df001d83 	ldbu	fp,118(sp)
    afb0:	d8c02215 	stw	r3,136(sp)
    afb4:	0013883a 	mov	r9,zero
    afb8:	003e6006 	br	a93c <__alt_data_end+0xff00a93c>
    afbc:	21003fcc 	andi	r4,r4,255
    afc0:	203fc026 	beq	r4,zero,aec4 <__alt_data_end+0xff00aec4>
    afc4:	d9c01d85 	stb	r7,118(sp)
    afc8:	003fbe06 	br	aec4 <__alt_data_end+0xff00aec4>
    afcc:	da802217 	ldw	r10,136(sp)
    afd0:	54400017 	ldw	r17,0(r10)
    afd4:	50800104 	addi	r2,r10,4
    afd8:	883e3b16 	blt	r17,zero,a8c8 <__alt_data_end+0xff00a8c8>
    afdc:	d8802215 	stw	r2,136(sp)
    afe0:	80c00007 	ldb	r3,0(r16)
    afe4:	003db406 	br	a6b8 <__alt_data_end+0xff00a6b8>
    afe8:	01000044 	movi	r4,1
    afec:	01c00ac4 	movi	r7,43
    aff0:	80c00007 	ldb	r3,0(r16)
    aff4:	003db006 	br	a6b8 <__alt_data_end+0xff00a6b8>
    aff8:	80c00007 	ldb	r3,0(r16)
    affc:	82800044 	addi	r10,r16,1
    b000:	1b423c26 	beq	r3,r13,b8f4 <___vfiprintf_internal_r+0x13b8>
    b004:	18bff404 	addi	r2,r3,-48
    b008:	0013883a 	mov	r9,zero
    b00c:	30822b36 	bltu	r6,r2,b8bc <___vfiprintf_internal_r+0x1380>
    b010:	50c00007 	ldb	r3,0(r10)
    b014:	4a4002a4 	muli	r9,r9,10
    b018:	54000044 	addi	r16,r10,1
    b01c:	8015883a 	mov	r10,r16
    b020:	4893883a 	add	r9,r9,r2
    b024:	18bff404 	addi	r2,r3,-48
    b028:	30bff92e 	bgeu	r6,r2,b010 <__alt_data_end+0xff00b010>
    b02c:	483da30e 	bge	r9,zero,a6bc <__alt_data_end+0xff00a6bc>
    b030:	027fffc4 	movi	r9,-1
    b034:	003da106 	br	a6bc <__alt_data_end+0xff00a6bc>
    b038:	a5001014 	ori	r20,r20,64
    b03c:	80c00007 	ldb	r3,0(r16)
    b040:	003d9d06 	br	a6b8 <__alt_data_end+0xff00a6b8>
    b044:	da802217 	ldw	r10,136(sp)
    b048:	d8001d85 	stb	zero,118(sp)
    b04c:	50c00204 	addi	r3,r10,8
    b050:	54800017 	ldw	r18,0(r10)
    b054:	54c00117 	ldw	r19,4(r10)
    b058:	4801ca16 	blt	r9,zero,b784 <___vfiprintf_internal_r+0x1248>
    b05c:	013fdfc4 	movi	r4,-129
    b060:	94c4b03a 	or	r2,r18,r19
    b064:	d8c02215 	stw	r3,136(sp)
    b068:	a128703a 	and	r20,r20,r4
    b06c:	0039883a 	mov	fp,zero
    b070:	103f341e 	bne	r2,zero,ad44 <__alt_data_end+0xff00ad44>
    b074:	483e2e26 	beq	r9,zero,a930 <__alt_data_end+0xff00a930>
    b078:	0025883a 	mov	r18,zero
    b07c:	94800c04 	addi	r18,r18,48
    b080:	dc8019c5 	stb	r18,103(sp)
    b084:	dcc02717 	ldw	r19,156(sp)
    b088:	dd4019c4 	addi	r21,sp,103
    b08c:	003e2b06 	br	a93c <__alt_data_end+0xff00a93c>
    b090:	21003fcc 	andi	r4,r4,255
    b094:	2002361e 	bne	r4,zero,b970 <___vfiprintf_internal_r+0x1434>
    b098:	1801c126 	beq	r3,zero,b7a0 <___vfiprintf_internal_r+0x1264>
    b09c:	04800044 	movi	r18,1
    b0a0:	d8c01005 	stb	r3,64(sp)
    b0a4:	d8001d85 	stb	zero,118(sp)
    b0a8:	9027883a 	mov	r19,r18
    b0ac:	dd401004 	addi	r21,sp,64
    b0b0:	003f1106 	br	acf8 <__alt_data_end+0xff00acf8>
    b0b4:	d9402117 	ldw	r5,132(sp)
    b0b8:	d9002017 	ldw	r4,128(sp)
    b0bc:	d9801a04 	addi	r6,sp,104
    b0c0:	d9c02b15 	stw	r7,172(sp)
    b0c4:	dbc02a15 	stw	r15,168(sp)
    b0c8:	000a4280 	call	a428 <__sprint_r.part.0>
    b0cc:	d9c02b17 	ldw	r7,172(sp)
    b0d0:	dbc02a17 	ldw	r15,168(sp)
    b0d4:	10006d1e 	bne	r2,zero,b28c <___vfiprintf_internal_r+0xd50>
    b0d8:	d9801b17 	ldw	r6,108(sp)
    b0dc:	d8801c17 	ldw	r2,112(sp)
    b0e0:	d811883a 	mov	r8,sp
    b0e4:	31400044 	addi	r5,r6,1
    b0e8:	003e3306 	br	a9b8 <__alt_data_end+0xff00a9b8>
    b0ec:	d9401b17 	ldw	r5,108(sp)
    b0f0:	d8801c17 	ldw	r2,112(sp)
    b0f4:	29000044 	addi	r4,r5,1
    b0f8:	d8c01d87 	ldb	r3,118(sp)
    b0fc:	183e4d26 	beq	r3,zero,aa34 <__alt_data_end+0xff00aa34>
    b100:	00c00044 	movi	r3,1
    b104:	d9401d84 	addi	r5,sp,118
    b108:	10c5883a 	add	r2,r2,r3
    b10c:	41400015 	stw	r5,0(r8)
    b110:	40c00115 	stw	r3,4(r8)
    b114:	d8801c15 	stw	r2,112(sp)
    b118:	d9001b15 	stw	r4,108(sp)
    b11c:	014001c4 	movi	r5,7
    b120:	2900a90e 	bge	r5,r4,b3c8 <___vfiprintf_internal_r+0xe8c>
    b124:	1000da1e 	bne	r2,zero,b490 <___vfiprintf_internal_r+0xf54>
    b128:	7000ab1e 	bne	r14,zero,b3d8 <___vfiprintf_internal_r+0xe9c>
    b12c:	000b883a 	mov	r5,zero
    b130:	1809883a 	mov	r4,r3
    b134:	d811883a 	mov	r8,sp
    b138:	00c02004 	movi	r3,128
    b13c:	e0fe4d26 	beq	fp,r3,aa74 <__alt_data_end+0xff00aa74>
    b140:	4cf9c83a 	sub	fp,r9,r19
    b144:	073e7b0e 	bge	zero,fp,ab34 <__alt_data_end+0xff00ab34>
    b148:	01c00404 	movi	r7,16
    b14c:	3f01900e 	bge	r7,fp,b790 <___vfiprintf_internal_r+0x1254>
    b150:	00c00074 	movhi	r3,1
    b154:	18c72804 	addi	r3,r3,7328
    b158:	d8c02415 	stw	r3,144(sp)
    b15c:	034001c4 	movi	r13,7
    b160:	00000506 	br	b178 <___vfiprintf_internal_r+0xc3c>
    b164:	29000084 	addi	r4,r5,2
    b168:	42000204 	addi	r8,r8,8
    b16c:	180b883a 	mov	r5,r3
    b170:	e73ffc04 	addi	fp,fp,-16
    b174:	3f000d0e 	bge	r7,fp,b1ac <___vfiprintf_internal_r+0xc70>
    b178:	10800404 	addi	r2,r2,16
    b17c:	28c00044 	addi	r3,r5,1
    b180:	45c00015 	stw	r23,0(r8)
    b184:	41c00115 	stw	r7,4(r8)
    b188:	d8801c15 	stw	r2,112(sp)
    b18c:	d8c01b15 	stw	r3,108(sp)
    b190:	68fff40e 	bge	r13,r3,b164 <__alt_data_end+0xff00b164>
    b194:	1000101e 	bne	r2,zero,b1d8 <___vfiprintf_internal_r+0xc9c>
    b198:	e73ffc04 	addi	fp,fp,-16
    b19c:	01000044 	movi	r4,1
    b1a0:	000b883a 	mov	r5,zero
    b1a4:	d811883a 	mov	r8,sp
    b1a8:	3f3ff316 	blt	r7,fp,b178 <__alt_data_end+0xff00b178>
    b1ac:	da802417 	ldw	r10,144(sp)
    b1b0:	1705883a 	add	r2,r2,fp
    b1b4:	47000115 	stw	fp,4(r8)
    b1b8:	42800015 	stw	r10,0(r8)
    b1bc:	d8801c15 	stw	r2,112(sp)
    b1c0:	d9001b15 	stw	r4,108(sp)
    b1c4:	00c001c4 	movi	r3,7
    b1c8:	19003616 	blt	r3,r4,b2a4 <___vfiprintf_internal_r+0xd68>
    b1cc:	42000204 	addi	r8,r8,8
    b1d0:	21000044 	addi	r4,r4,1
    b1d4:	003e5706 	br	ab34 <__alt_data_end+0xff00ab34>
    b1d8:	d9402117 	ldw	r5,132(sp)
    b1dc:	d9002017 	ldw	r4,128(sp)
    b1e0:	d9801a04 	addi	r6,sp,104
    b1e4:	d9c02b15 	stw	r7,172(sp)
    b1e8:	db402a15 	stw	r13,168(sp)
    b1ec:	000a4280 	call	a428 <__sprint_r.part.0>
    b1f0:	d9c02b17 	ldw	r7,172(sp)
    b1f4:	db402a17 	ldw	r13,168(sp)
    b1f8:	1000241e 	bne	r2,zero,b28c <___vfiprintf_internal_r+0xd50>
    b1fc:	d9401b17 	ldw	r5,108(sp)
    b200:	d8801c17 	ldw	r2,112(sp)
    b204:	d811883a 	mov	r8,sp
    b208:	29000044 	addi	r4,r5,1
    b20c:	003fd806 	br	b170 <__alt_data_end+0xff00b170>
    b210:	d9401b17 	ldw	r5,108(sp)
    b214:	00c00074 	movhi	r3,1
    b218:	18c72c04 	addi	r3,r3,7344
    b21c:	d8c02415 	stw	r3,144(sp)
    b220:	29400044 	addi	r5,r5,1
    b224:	d8c02417 	ldw	r3,144(sp)
    b228:	14c5883a 	add	r2,r2,r19
    b22c:	44c00115 	stw	r19,4(r8)
    b230:	40c00015 	stw	r3,0(r8)
    b234:	d8801c15 	stw	r2,112(sp)
    b238:	d9401b15 	stw	r5,108(sp)
    b23c:	00c001c4 	movi	r3,7
    b240:	1940070e 	bge	r3,r5,b260 <___vfiprintf_internal_r+0xd24>
    b244:	103e4826 	beq	r2,zero,ab68 <__alt_data_end+0xff00ab68>
    b248:	d9402117 	ldw	r5,132(sp)
    b24c:	d9002017 	ldw	r4,128(sp)
    b250:	d9801a04 	addi	r6,sp,104
    b254:	000a4280 	call	a428 <__sprint_r.part.0>
    b258:	10000c1e 	bne	r2,zero,b28c <___vfiprintf_internal_r+0xd50>
    b25c:	d8801c17 	ldw	r2,112(sp)
    b260:	8c80010e 	bge	r17,r18,b268 <___vfiprintf_internal_r+0xd2c>
    b264:	9023883a 	mov	r17,r18
    b268:	da802317 	ldw	r10,140(sp)
    b26c:	5455883a 	add	r10,r10,r17
    b270:	da802315 	stw	r10,140(sp)
    b274:	103e4126 	beq	r2,zero,ab7c <__alt_data_end+0xff00ab7c>
    b278:	d9402117 	ldw	r5,132(sp)
    b27c:	d9002017 	ldw	r4,128(sp)
    b280:	d9801a04 	addi	r6,sp,104
    b284:	000a4280 	call	a428 <__sprint_r.part.0>
    b288:	103e3c26 	beq	r2,zero,ab7c <__alt_data_end+0xff00ab7c>
    b28c:	dd002117 	ldw	r20,132(sp)
    b290:	a080030b 	ldhu	r2,12(r20)
    b294:	1080100c 	andi	r2,r2,64
    b298:	1001231e 	bne	r2,zero,b728 <___vfiprintf_internal_r+0x11ec>
    b29c:	d8802317 	ldw	r2,140(sp)
    b2a0:	003d7b06 	br	a890 <__alt_data_end+0xff00a890>
    b2a4:	1000991e 	bne	r2,zero,b50c <___vfiprintf_internal_r+0xfd0>
    b2a8:	00c00044 	movi	r3,1
    b2ac:	9805883a 	mov	r2,r19
    b2b0:	dd400015 	stw	r21,0(sp)
    b2b4:	dcc00115 	stw	r19,4(sp)
    b2b8:	dcc01c15 	stw	r19,112(sp)
    b2bc:	d8c01b15 	stw	r3,108(sp)
    b2c0:	d811883a 	mov	r8,sp
    b2c4:	42000204 	addi	r8,r8,8
    b2c8:	a2c0010c 	andi	r11,r20,4
    b2cc:	583fe426 	beq	r11,zero,b260 <__alt_data_end+0xff00b260>
    b2d0:	8ca7c83a 	sub	r19,r17,r18
    b2d4:	04ffe20e 	bge	zero,r19,b260 <__alt_data_end+0xff00b260>
    b2d8:	01c00404 	movi	r7,16
    b2dc:	3cffcc0e 	bge	r7,r19,b210 <__alt_data_end+0xff00b210>
    b2e0:	02800074 	movhi	r10,1
    b2e4:	52872c04 	addi	r10,r10,7344
    b2e8:	d9001b17 	ldw	r4,108(sp)
    b2ec:	da802415 	stw	r10,144(sp)
    b2f0:	382b883a 	mov	r21,r7
    b2f4:	050001c4 	movi	r20,7
    b2f8:	df002017 	ldw	fp,128(sp)
    b2fc:	00000506 	br	b314 <___vfiprintf_internal_r+0xdd8>
    b300:	21400084 	addi	r5,r4,2
    b304:	42000204 	addi	r8,r8,8
    b308:	1809883a 	mov	r4,r3
    b30c:	9cfffc04 	addi	r19,r19,-16
    b310:	acffc40e 	bge	r21,r19,b224 <__alt_data_end+0xff00b224>
    b314:	10800404 	addi	r2,r2,16
    b318:	20c00044 	addi	r3,r4,1
    b31c:	45800015 	stw	r22,0(r8)
    b320:	45400115 	stw	r21,4(r8)
    b324:	d8801c15 	stw	r2,112(sp)
    b328:	d8c01b15 	stw	r3,108(sp)
    b32c:	a0fff40e 	bge	r20,r3,b300 <__alt_data_end+0xff00b300>
    b330:	1000041e 	bne	r2,zero,b344 <___vfiprintf_internal_r+0xe08>
    b334:	01400044 	movi	r5,1
    b338:	0009883a 	mov	r4,zero
    b33c:	d811883a 	mov	r8,sp
    b340:	003ff206 	br	b30c <__alt_data_end+0xff00b30c>
    b344:	d9402117 	ldw	r5,132(sp)
    b348:	d9801a04 	addi	r6,sp,104
    b34c:	e009883a 	mov	r4,fp
    b350:	000a4280 	call	a428 <__sprint_r.part.0>
    b354:	103fcd1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b358:	d9001b17 	ldw	r4,108(sp)
    b35c:	d8801c17 	ldw	r2,112(sp)
    b360:	d811883a 	mov	r8,sp
    b364:	21400044 	addi	r5,r4,1
    b368:	003fe806 	br	b30c <__alt_data_end+0xff00b30c>
    b36c:	d9402117 	ldw	r5,132(sp)
    b370:	d9002017 	ldw	r4,128(sp)
    b374:	d9801a04 	addi	r6,sp,104
    b378:	d9c02b15 	stw	r7,172(sp)
    b37c:	db402a15 	stw	r13,168(sp)
    b380:	000a4280 	call	a428 <__sprint_r.part.0>
    b384:	d9c02b17 	ldw	r7,172(sp)
    b388:	db402a17 	ldw	r13,168(sp)
    b38c:	103fbf1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b390:	d9401b17 	ldw	r5,108(sp)
    b394:	d8801c17 	ldw	r2,112(sp)
    b398:	d811883a 	mov	r8,sp
    b39c:	29800044 	addi	r6,r5,1
    b3a0:	003dc406 	br	aab4 <__alt_data_end+0xff00aab4>
    b3a4:	1000d21e 	bne	r2,zero,b6f0 <___vfiprintf_internal_r+0x11b4>
    b3a8:	d8c01d87 	ldb	r3,118(sp)
    b3ac:	18009526 	beq	r3,zero,b604 <___vfiprintf_internal_r+0x10c8>
    b3b0:	00800044 	movi	r2,1
    b3b4:	d8c01d84 	addi	r3,sp,118
    b3b8:	1009883a 	mov	r4,r2
    b3bc:	d8c00015 	stw	r3,0(sp)
    b3c0:	d8800115 	stw	r2,4(sp)
    b3c4:	d811883a 	mov	r8,sp
    b3c8:	200b883a 	mov	r5,r4
    b3cc:	42000204 	addi	r8,r8,8
    b3d0:	21000044 	addi	r4,r4,1
    b3d4:	003d9706 	br	aa34 <__alt_data_end+0xff00aa34>
    b3d8:	d9001d04 	addi	r4,sp,116
    b3dc:	00800084 	movi	r2,2
    b3e0:	d9000015 	stw	r4,0(sp)
    b3e4:	d8800115 	stw	r2,4(sp)
    b3e8:	1809883a 	mov	r4,r3
    b3ec:	d811883a 	mov	r8,sp
    b3f0:	200b883a 	mov	r5,r4
    b3f4:	42000204 	addi	r8,r8,8
    b3f8:	21000044 	addi	r4,r4,1
    b3fc:	003f4e06 	br	b138 <__alt_data_end+0xff00b138>
    b400:	d8001d85 	stb	zero,118(sp)
    b404:	48005016 	blt	r9,zero,b548 <___vfiprintf_internal_r+0x100c>
    b408:	00ffdfc4 	movi	r3,-129
    b40c:	94c4b03a 	or	r2,r18,r19
    b410:	a0e8703a 	and	r20,r20,r3
    b414:	103d4426 	beq	r2,zero,a928 <__alt_data_end+0xff00a928>
    b418:	0039883a 	mov	fp,zero
    b41c:	d9002617 	ldw	r4,152(sp)
    b420:	dd401a04 	addi	r21,sp,104
    b424:	908003cc 	andi	r2,r18,15
    b428:	9806973a 	slli	r3,r19,28
    b42c:	2085883a 	add	r2,r4,r2
    b430:	9024d13a 	srli	r18,r18,4
    b434:	10800003 	ldbu	r2,0(r2)
    b438:	9826d13a 	srli	r19,r19,4
    b43c:	ad7fffc4 	addi	r21,r21,-1
    b440:	1ca4b03a 	or	r18,r3,r18
    b444:	a8800005 	stb	r2,0(r21)
    b448:	94c4b03a 	or	r2,r18,r19
    b44c:	103ff51e 	bne	r2,zero,b424 <__alt_data_end+0xff00b424>
    b450:	003e5906 	br	adb8 <__alt_data_end+0xff00adb8>
    b454:	d9402117 	ldw	r5,132(sp)
    b458:	d9002017 	ldw	r4,128(sp)
    b45c:	d9801a04 	addi	r6,sp,104
    b460:	000a4280 	call	a428 <__sprint_r.part.0>
    b464:	103f891e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b468:	d8801c17 	ldw	r2,112(sp)
    b46c:	d811883a 	mov	r8,sp
    b470:	003f9506 	br	b2c8 <__alt_data_end+0xff00b2c8>
    b474:	d9402117 	ldw	r5,132(sp)
    b478:	d9002017 	ldw	r4,128(sp)
    b47c:	d9801a04 	addi	r6,sp,104
    b480:	000a4280 	call	a428 <__sprint_r.part.0>
    b484:	103f811e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b488:	d811883a 	mov	r8,sp
    b48c:	003ced06 	br	a844 <__alt_data_end+0xff00a844>
    b490:	d9402117 	ldw	r5,132(sp)
    b494:	d9002017 	ldw	r4,128(sp)
    b498:	d9801a04 	addi	r6,sp,104
    b49c:	da402c15 	stw	r9,176(sp)
    b4a0:	db802a15 	stw	r14,168(sp)
    b4a4:	000a4280 	call	a428 <__sprint_r.part.0>
    b4a8:	da402c17 	ldw	r9,176(sp)
    b4ac:	db802a17 	ldw	r14,168(sp)
    b4b0:	103f761e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b4b4:	d9401b17 	ldw	r5,108(sp)
    b4b8:	d8801c17 	ldw	r2,112(sp)
    b4bc:	d811883a 	mov	r8,sp
    b4c0:	29000044 	addi	r4,r5,1
    b4c4:	003d5b06 	br	aa34 <__alt_data_end+0xff00aa34>
    b4c8:	d9402117 	ldw	r5,132(sp)
    b4cc:	d9002017 	ldw	r4,128(sp)
    b4d0:	d9801a04 	addi	r6,sp,104
    b4d4:	da402c15 	stw	r9,176(sp)
    b4d8:	000a4280 	call	a428 <__sprint_r.part.0>
    b4dc:	da402c17 	ldw	r9,176(sp)
    b4e0:	103f6a1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b4e4:	d9401b17 	ldw	r5,108(sp)
    b4e8:	d8801c17 	ldw	r2,112(sp)
    b4ec:	d811883a 	mov	r8,sp
    b4f0:	29000044 	addi	r4,r5,1
    b4f4:	003f1006 	br	b138 <__alt_data_end+0xff00b138>
    b4f8:	1000c31e 	bne	r2,zero,b808 <___vfiprintf_internal_r+0x12cc>
    b4fc:	01000044 	movi	r4,1
    b500:	000b883a 	mov	r5,zero
    b504:	d811883a 	mov	r8,sp
    b508:	003f0d06 	br	b140 <__alt_data_end+0xff00b140>
    b50c:	d9402117 	ldw	r5,132(sp)
    b510:	d9002017 	ldw	r4,128(sp)
    b514:	d9801a04 	addi	r6,sp,104
    b518:	000a4280 	call	a428 <__sprint_r.part.0>
    b51c:	103f5b1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b520:	d9001b17 	ldw	r4,108(sp)
    b524:	d8801c17 	ldw	r2,112(sp)
    b528:	d811883a 	mov	r8,sp
    b52c:	21000044 	addi	r4,r4,1
    b530:	003d8006 	br	ab34 <__alt_data_end+0xff00ab34>
    b534:	01000074 	movhi	r4,1
    b538:	2106c704 	addi	r4,r4,6940
    b53c:	d9002615 	stw	r4,152(sp)
    b540:	d8c02215 	stw	r3,136(sp)
    b544:	1029883a 	mov	r20,r2
    b548:	94c4b03a 	or	r2,r18,r19
    b54c:	103fb21e 	bne	r2,zero,b418 <__alt_data_end+0xff00b418>
    b550:	0039883a 	mov	fp,zero
    b554:	00800084 	movi	r2,2
    b558:	003e6b06 	br	af08 <__alt_data_end+0xff00af08>
    b55c:	da802217 	ldw	r10,136(sp)
    b560:	d8001d85 	stb	zero,118(sp)
    b564:	0027883a 	mov	r19,zero
    b568:	50800104 	addi	r2,r10,4
    b56c:	54800017 	ldw	r18,0(r10)
    b570:	483e6016 	blt	r9,zero,aef4 <__alt_data_end+0xff00aef4>
    b574:	00ffdfc4 	movi	r3,-129
    b578:	d8802215 	stw	r2,136(sp)
    b57c:	a0e8703a 	and	r20,r20,r3
    b580:	0039883a 	mov	fp,zero
    b584:	903ebb26 	beq	r18,zero,b074 <__alt_data_end+0xff00b074>
    b588:	00800244 	movi	r2,9
    b58c:	14bdee36 	bltu	r2,r18,ad48 <__alt_data_end+0xff00ad48>
    b590:	003eba06 	br	b07c <__alt_data_end+0xff00b07c>
    b594:	00800c04 	movi	r2,48
    b598:	d8c01d45 	stb	r3,117(sp)
    b59c:	d8801d05 	stb	r2,116(sp)
    b5a0:	d8001d85 	stb	zero,118(sp)
    b5a4:	a0c00094 	ori	r3,r20,2
    b5a8:	4800a916 	blt	r9,zero,b850 <___vfiprintf_internal_r+0x1314>
    b5ac:	00bfdfc4 	movi	r2,-129
    b5b0:	a096703a 	and	r11,r20,r2
    b5b4:	5d000094 	ori	r20,r11,2
    b5b8:	0039883a 	mov	fp,zero
    b5bc:	003f9706 	br	b41c <__alt_data_end+0xff00b41c>
    b5c0:	8025883a 	mov	r18,r16
    b5c4:	003c2e06 	br	a680 <__alt_data_end+0xff00a680>
    b5c8:	00800074 	movhi	r2,1
    b5cc:	1086c704 	addi	r2,r2,6940
    b5d0:	0039883a 	mov	fp,zero
    b5d4:	d8802615 	stw	r2,152(sp)
    b5d8:	003f9006 	br	b41c <__alt_data_end+0xff00b41c>
    b5dc:	04a5c83a 	sub	r18,zero,r18
    b5e0:	07000b44 	movi	fp,45
    b5e4:	9004c03a 	cmpne	r2,r18,zero
    b5e8:	04e7c83a 	sub	r19,zero,r19
    b5ec:	df001d85 	stb	fp,118(sp)
    b5f0:	98a7c83a 	sub	r19,r19,r2
    b5f4:	48009f16 	blt	r9,zero,b874 <___vfiprintf_internal_r+0x1338>
    b5f8:	00bfdfc4 	movi	r2,-129
    b5fc:	a0a8703a 	and	r20,r20,r2
    b600:	003dd006 	br	ad44 <__alt_data_end+0xff00ad44>
    b604:	70004c26 	beq	r14,zero,b738 <___vfiprintf_internal_r+0x11fc>
    b608:	00800084 	movi	r2,2
    b60c:	d8c01d04 	addi	r3,sp,116
    b610:	d8c00015 	stw	r3,0(sp)
    b614:	d8800115 	stw	r2,4(sp)
    b618:	01000044 	movi	r4,1
    b61c:	d811883a 	mov	r8,sp
    b620:	003f7306 	br	b3f0 <__alt_data_end+0xff00b3f0>
    b624:	a080100c 	andi	r2,r20,64
    b628:	da802217 	ldw	r10,136(sp)
    b62c:	103e0626 	beq	r2,zero,ae48 <__alt_data_end+0xff00ae48>
    b630:	5480000f 	ldh	r18,0(r10)
    b634:	52800104 	addi	r10,r10,4
    b638:	da802215 	stw	r10,136(sp)
    b63c:	9027d7fa 	srai	r19,r18,31
    b640:	9805883a 	mov	r2,r19
    b644:	003db806 	br	ad28 <__alt_data_end+0xff00ad28>
    b648:	a080040c 	andi	r2,r20,16
    b64c:	1000091e 	bne	r2,zero,b674 <___vfiprintf_internal_r+0x1138>
    b650:	a2c0100c 	andi	r11,r20,64
    b654:	58000726 	beq	r11,zero,b674 <___vfiprintf_internal_r+0x1138>
    b658:	da802217 	ldw	r10,136(sp)
    b65c:	50800017 	ldw	r2,0(r10)
    b660:	52800104 	addi	r10,r10,4
    b664:	da802215 	stw	r10,136(sp)
    b668:	da802317 	ldw	r10,140(sp)
    b66c:	1280000d 	sth	r10,0(r2)
    b670:	003be706 	br	a610 <__alt_data_end+0xff00a610>
    b674:	da802217 	ldw	r10,136(sp)
    b678:	50800017 	ldw	r2,0(r10)
    b67c:	52800104 	addi	r10,r10,4
    b680:	da802215 	stw	r10,136(sp)
    b684:	da802317 	ldw	r10,140(sp)
    b688:	12800015 	stw	r10,0(r2)
    b68c:	003be006 	br	a610 <__alt_data_end+0xff00a610>
    b690:	a080100c 	andi	r2,r20,64
    b694:	da802217 	ldw	r10,136(sp)
    b698:	10003026 	beq	r2,zero,b75c <___vfiprintf_internal_r+0x1220>
    b69c:	5480000b 	ldhu	r18,0(r10)
    b6a0:	52800104 	addi	r10,r10,4
    b6a4:	0027883a 	mov	r19,zero
    b6a8:	da802215 	stw	r10,136(sp)
    b6ac:	003d8006 	br	acb0 <__alt_data_end+0xff00acb0>
    b6b0:	80c00007 	ldb	r3,0(r16)
    b6b4:	003c0006 	br	a6b8 <__alt_data_end+0xff00a6b8>
    b6b8:	a080100c 	andi	r2,r20,64
    b6bc:	d8001d85 	stb	zero,118(sp)
    b6c0:	da802217 	ldw	r10,136(sp)
    b6c4:	1000201e 	bne	r2,zero,b748 <___vfiprintf_internal_r+0x120c>
    b6c8:	50800104 	addi	r2,r10,4
    b6cc:	54800017 	ldw	r18,0(r10)
    b6d0:	0027883a 	mov	r19,zero
    b6d4:	483def0e 	bge	r9,zero,ae94 <__alt_data_end+0xff00ae94>
    b6d8:	94c6b03a 	or	r3,r18,r19
    b6dc:	d8802215 	stw	r2,136(sp)
    b6e0:	183d4e1e 	bne	r3,zero,ac1c <__alt_data_end+0xff00ac1c>
    b6e4:	0039883a 	mov	fp,zero
    b6e8:	0005883a 	mov	r2,zero
    b6ec:	003e0606 	br	af08 <__alt_data_end+0xff00af08>
    b6f0:	d9402117 	ldw	r5,132(sp)
    b6f4:	d9002017 	ldw	r4,128(sp)
    b6f8:	d9801a04 	addi	r6,sp,104
    b6fc:	da402c15 	stw	r9,176(sp)
    b700:	db802a15 	stw	r14,168(sp)
    b704:	000a4280 	call	a428 <__sprint_r.part.0>
    b708:	da402c17 	ldw	r9,176(sp)
    b70c:	db802a17 	ldw	r14,168(sp)
    b710:	103ede1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b714:	d9401b17 	ldw	r5,108(sp)
    b718:	d8801c17 	ldw	r2,112(sp)
    b71c:	d811883a 	mov	r8,sp
    b720:	29000044 	addi	r4,r5,1
    b724:	003e7406 	br	b0f8 <__alt_data_end+0xff00b0f8>
    b728:	00bfffc4 	movi	r2,-1
    b72c:	003c5806 	br	a890 <__alt_data_end+0xff00a890>
    b730:	d811883a 	mov	r8,sp
    b734:	003ee806 	br	b2d8 <__alt_data_end+0xff00b2d8>
    b738:	000b883a 	mov	r5,zero
    b73c:	01000044 	movi	r4,1
    b740:	d811883a 	mov	r8,sp
    b744:	003e7c06 	br	b138 <__alt_data_end+0xff00b138>
    b748:	50800104 	addi	r2,r10,4
    b74c:	5480000b 	ldhu	r18,0(r10)
    b750:	0027883a 	mov	r19,zero
    b754:	483dcf0e 	bge	r9,zero,ae94 <__alt_data_end+0xff00ae94>
    b758:	003fdf06 	br	b6d8 <__alt_data_end+0xff00b6d8>
    b75c:	54800017 	ldw	r18,0(r10)
    b760:	52800104 	addi	r10,r10,4
    b764:	0027883a 	mov	r19,zero
    b768:	da802215 	stw	r10,136(sp)
    b76c:	003d5006 	br	acb0 <__alt_data_end+0xff00acb0>
    b770:	50800104 	addi	r2,r10,4
    b774:	5480000b 	ldhu	r18,0(r10)
    b778:	0027883a 	mov	r19,zero
    b77c:	483f7d0e 	bge	r9,zero,b574 <__alt_data_end+0xff00b574>
    b780:	003ddc06 	br	aef4 <__alt_data_end+0xff00aef4>
    b784:	d8c02215 	stw	r3,136(sp)
    b788:	0039883a 	mov	fp,zero
    b78c:	003ddb06 	br	aefc <__alt_data_end+0xff00aefc>
    b790:	02800074 	movhi	r10,1
    b794:	52872804 	addi	r10,r10,7328
    b798:	da802415 	stw	r10,144(sp)
    b79c:	003e8306 	br	b1ac <__alt_data_end+0xff00b1ac>
    b7a0:	d8801c17 	ldw	r2,112(sp)
    b7a4:	dd002117 	ldw	r20,132(sp)
    b7a8:	103eb926 	beq	r2,zero,b290 <__alt_data_end+0xff00b290>
    b7ac:	d9002017 	ldw	r4,128(sp)
    b7b0:	d9801a04 	addi	r6,sp,104
    b7b4:	a00b883a 	mov	r5,r20
    b7b8:	000a4280 	call	a428 <__sprint_r.part.0>
    b7bc:	003eb406 	br	b290 <__alt_data_end+0xff00b290>
    b7c0:	80c00043 	ldbu	r3,1(r16)
    b7c4:	a5000814 	ori	r20,r20,32
    b7c8:	84000044 	addi	r16,r16,1
    b7cc:	18c03fcc 	andi	r3,r3,255
    b7d0:	18c0201c 	xori	r3,r3,128
    b7d4:	18ffe004 	addi	r3,r3,-128
    b7d8:	003bb706 	br	a6b8 <__alt_data_end+0xff00a6b8>
    b7dc:	a809883a 	mov	r4,r21
    b7e0:	d8c02a15 	stw	r3,168(sp)
    b7e4:	da002b15 	stw	r8,172(sp)
    b7e8:	00036f00 	call	36f0 <strlen>
    b7ec:	d8c02a17 	ldw	r3,168(sp)
    b7f0:	1027883a 	mov	r19,r2
    b7f4:	df001d83 	ldbu	fp,118(sp)
    b7f8:	d8c02215 	stw	r3,136(sp)
    b7fc:	0013883a 	mov	r9,zero
    b800:	da002b17 	ldw	r8,172(sp)
    b804:	003c4d06 	br	a93c <__alt_data_end+0xff00a93c>
    b808:	d9402117 	ldw	r5,132(sp)
    b80c:	d9002017 	ldw	r4,128(sp)
    b810:	d9801a04 	addi	r6,sp,104
    b814:	da402c15 	stw	r9,176(sp)
    b818:	000a4280 	call	a428 <__sprint_r.part.0>
    b81c:	da402c17 	ldw	r9,176(sp)
    b820:	103e9a1e 	bne	r2,zero,b28c <__alt_data_end+0xff00b28c>
    b824:	d9401b17 	ldw	r5,108(sp)
    b828:	d8801c17 	ldw	r2,112(sp)
    b82c:	d811883a 	mov	r8,sp
    b830:	29000044 	addi	r4,r5,1
    b834:	003e4206 	br	b140 <__alt_data_end+0xff00b140>
    b838:	d9401b17 	ldw	r5,108(sp)
    b83c:	01000074 	movhi	r4,1
    b840:	21072c04 	addi	r4,r4,7344
    b844:	d9002415 	stw	r4,144(sp)
    b848:	29400044 	addi	r5,r5,1
    b84c:	003c6d06 	br	aa04 <__alt_data_end+0xff00aa04>
    b850:	0039883a 	mov	fp,zero
    b854:	00800084 	movi	r2,2
    b858:	10803fcc 	andi	r2,r2,255
    b85c:	01000044 	movi	r4,1
    b860:	11001e26 	beq	r2,r4,b8dc <___vfiprintf_internal_r+0x13a0>
    b864:	01000084 	movi	r4,2
    b868:	11001e1e 	bne	r2,r4,b8e4 <___vfiprintf_internal_r+0x13a8>
    b86c:	1829883a 	mov	r20,r3
    b870:	003eea06 	br	b41c <__alt_data_end+0xff00b41c>
    b874:	a007883a 	mov	r3,r20
    b878:	00800044 	movi	r2,1
    b87c:	003ff606 	br	b858 <__alt_data_end+0xff00b858>
    b880:	00800184 	movi	r2,6
    b884:	1240012e 	bgeu	r2,r9,b88c <___vfiprintf_internal_r+0x1350>
    b888:	1013883a 	mov	r9,r2
    b88c:	4827883a 	mov	r19,r9
    b890:	4825883a 	mov	r18,r9
    b894:	48001516 	blt	r9,zero,b8ec <___vfiprintf_internal_r+0x13b0>
    b898:	05400074 	movhi	r21,1
    b89c:	d8c02215 	stw	r3,136(sp)
    b8a0:	ad46cc04 	addi	r21,r21,6960
    b8a4:	003d1406 	br	acf8 <__alt_data_end+0xff00acf8>
    b8a8:	02800074 	movhi	r10,1
    b8ac:	52872804 	addi	r10,r10,7328
    b8b0:	da802415 	stw	r10,144(sp)
    b8b4:	200d883a 	mov	r6,r4
    b8b8:	003c9106 	br	ab00 <__alt_data_end+0xff00ab00>
    b8bc:	5021883a 	mov	r16,r10
    b8c0:	0013883a 	mov	r9,zero
    b8c4:	003b7d06 	br	a6bc <__alt_data_end+0xff00a6bc>
    b8c8:	4827883a 	mov	r19,r9
    b8cc:	df001d83 	ldbu	fp,118(sp)
    b8d0:	d8c02215 	stw	r3,136(sp)
    b8d4:	0013883a 	mov	r9,zero
    b8d8:	003c1806 	br	a93c <__alt_data_end+0xff00a93c>
    b8dc:	1829883a 	mov	r20,r3
    b8e0:	003d1806 	br	ad44 <__alt_data_end+0xff00ad44>
    b8e4:	1829883a 	mov	r20,r3
    b8e8:	003ccd06 	br	ac20 <__alt_data_end+0xff00ac20>
    b8ec:	0025883a 	mov	r18,zero
    b8f0:	003fe906 	br	b898 <__alt_data_end+0xff00b898>
    b8f4:	d8802217 	ldw	r2,136(sp)
    b8f8:	80c00043 	ldbu	r3,1(r16)
    b8fc:	5021883a 	mov	r16,r10
    b900:	12400017 	ldw	r9,0(r2)
    b904:	10800104 	addi	r2,r2,4
    b908:	d8802215 	stw	r2,136(sp)
    b90c:	483faf0e 	bge	r9,zero,b7cc <__alt_data_end+0xff00b7cc>
    b910:	18c03fcc 	andi	r3,r3,255
    b914:	18c0201c 	xori	r3,r3,128
    b918:	027fffc4 	movi	r9,-1
    b91c:	18ffe004 	addi	r3,r3,-128
    b920:	003b6506 	br	a6b8 <__alt_data_end+0xff00a6b8>
    b924:	d9c01d85 	stb	r7,118(sp)
    b928:	003ca006 	br	abac <__alt_data_end+0xff00abac>
    b92c:	d9c01d85 	stb	r7,118(sp)
    b930:	003cad06 	br	abe8 <__alt_data_end+0xff00abe8>
    b934:	d9c01d85 	stb	r7,118(sp)
    b938:	003d7d06 	br	af30 <__alt_data_end+0xff00af30>
    b93c:	d9c01d85 	stb	r7,118(sp)
    b940:	003d5f06 	br	aec0 <__alt_data_end+0xff00aec0>
    b944:	a080004c 	andi	r2,r20,1
    b948:	0039883a 	mov	fp,zero
    b94c:	10000526 	beq	r2,zero,b964 <___vfiprintf_internal_r+0x1428>
    b950:	00800c04 	movi	r2,48
    b954:	d88019c5 	stb	r2,103(sp)
    b958:	dcc02717 	ldw	r19,156(sp)
    b95c:	dd4019c4 	addi	r21,sp,103
    b960:	003bf606 	br	a93c <__alt_data_end+0xff00a93c>
    b964:	0027883a 	mov	r19,zero
    b968:	dd401a04 	addi	r21,sp,104
    b96c:	003bf306 	br	a93c <__alt_data_end+0xff00a93c>
    b970:	d9c01d85 	stb	r7,118(sp)
    b974:	003dc806 	br	b098 <__alt_data_end+0xff00b098>
    b978:	d9c01d85 	stb	r7,118(sp)
    b97c:	003d3a06 	br	ae68 <__alt_data_end+0xff00ae68>
    b980:	d9c01d85 	stb	r7,118(sp)
    b984:	003d2a06 	br	ae30 <__alt_data_end+0xff00ae30>
    b988:	d9c01d85 	stb	r7,118(sp)
    b98c:	003cde06 	br	ad08 <__alt_data_end+0xff00ad08>
    b990:	d9c01d85 	stb	r7,118(sp)
    b994:	003cbc06 	br	ac88 <__alt_data_end+0xff00ac88>

0000b998 <__vfiprintf_internal>:
    b998:	00800074 	movhi	r2,1
    b99c:	108e2904 	addi	r2,r2,14500
    b9a0:	300f883a 	mov	r7,r6
    b9a4:	280d883a 	mov	r6,r5
    b9a8:	200b883a 	mov	r5,r4
    b9ac:	11000017 	ldw	r4,0(r2)
    b9b0:	000a53c1 	jmpi	a53c <___vfiprintf_internal_r>

0000b9b4 <__sbprintf>:
    b9b4:	2880030b 	ldhu	r2,12(r5)
    b9b8:	2ac01917 	ldw	r11,100(r5)
    b9bc:	2a80038b 	ldhu	r10,14(r5)
    b9c0:	2a400717 	ldw	r9,28(r5)
    b9c4:	2a000917 	ldw	r8,36(r5)
    b9c8:	defee204 	addi	sp,sp,-1144
    b9cc:	00c10004 	movi	r3,1024
    b9d0:	dc011a15 	stw	r16,1128(sp)
    b9d4:	10bfff4c 	andi	r2,r2,65533
    b9d8:	2821883a 	mov	r16,r5
    b9dc:	d8cb883a 	add	r5,sp,r3
    b9e0:	dc811c15 	stw	r18,1136(sp)
    b9e4:	dc411b15 	stw	r17,1132(sp)
    b9e8:	dfc11d15 	stw	ra,1140(sp)
    b9ec:	2025883a 	mov	r18,r4
    b9f0:	d881030d 	sth	r2,1036(sp)
    b9f4:	dac11915 	stw	r11,1124(sp)
    b9f8:	da81038d 	sth	r10,1038(sp)
    b9fc:	da410715 	stw	r9,1052(sp)
    ba00:	da010915 	stw	r8,1060(sp)
    ba04:	dec10015 	stw	sp,1024(sp)
    ba08:	dec10415 	stw	sp,1040(sp)
    ba0c:	d8c10215 	stw	r3,1032(sp)
    ba10:	d8c10515 	stw	r3,1044(sp)
    ba14:	d8010615 	stw	zero,1048(sp)
    ba18:	000a53c0 	call	a53c <___vfiprintf_internal_r>
    ba1c:	1023883a 	mov	r17,r2
    ba20:	10000416 	blt	r2,zero,ba34 <__sbprintf+0x80>
    ba24:	d9410004 	addi	r5,sp,1024
    ba28:	9009883a 	mov	r4,r18
    ba2c:	00076500 	call	7650 <_fflush_r>
    ba30:	10000d1e 	bne	r2,zero,ba68 <__sbprintf+0xb4>
    ba34:	d881030b 	ldhu	r2,1036(sp)
    ba38:	1080100c 	andi	r2,r2,64
    ba3c:	10000326 	beq	r2,zero,ba4c <__sbprintf+0x98>
    ba40:	8080030b 	ldhu	r2,12(r16)
    ba44:	10801014 	ori	r2,r2,64
    ba48:	8080030d 	sth	r2,12(r16)
    ba4c:	8805883a 	mov	r2,r17
    ba50:	dfc11d17 	ldw	ra,1140(sp)
    ba54:	dc811c17 	ldw	r18,1136(sp)
    ba58:	dc411b17 	ldw	r17,1132(sp)
    ba5c:	dc011a17 	ldw	r16,1128(sp)
    ba60:	dec11e04 	addi	sp,sp,1144
    ba64:	f800283a 	ret
    ba68:	047fffc4 	movi	r17,-1
    ba6c:	003ff106 	br	ba34 <__alt_data_end+0xff00ba34>

0000ba70 <_write_r>:
    ba70:	defffd04 	addi	sp,sp,-12
    ba74:	2805883a 	mov	r2,r5
    ba78:	dc000015 	stw	r16,0(sp)
    ba7c:	04000074 	movhi	r16,1
    ba80:	dc400115 	stw	r17,4(sp)
    ba84:	300b883a 	mov	r5,r6
    ba88:	84154904 	addi	r16,r16,21796
    ba8c:	2023883a 	mov	r17,r4
    ba90:	380d883a 	mov	r6,r7
    ba94:	1009883a 	mov	r4,r2
    ba98:	dfc00215 	stw	ra,8(sp)
    ba9c:	80000015 	stw	zero,0(r16)
    baa0:	000f3440 	call	f344 <write>
    baa4:	00ffffc4 	movi	r3,-1
    baa8:	10c00526 	beq	r2,r3,bac0 <_write_r+0x50>
    baac:	dfc00217 	ldw	ra,8(sp)
    bab0:	dc400117 	ldw	r17,4(sp)
    bab4:	dc000017 	ldw	r16,0(sp)
    bab8:	dec00304 	addi	sp,sp,12
    babc:	f800283a 	ret
    bac0:	80c00017 	ldw	r3,0(r16)
    bac4:	183ff926 	beq	r3,zero,baac <__alt_data_end+0xff00baac>
    bac8:	88c00015 	stw	r3,0(r17)
    bacc:	003ff706 	br	baac <__alt_data_end+0xff00baac>

0000bad0 <_close_r>:
    bad0:	defffd04 	addi	sp,sp,-12
    bad4:	dc000015 	stw	r16,0(sp)
    bad8:	04000074 	movhi	r16,1
    badc:	dc400115 	stw	r17,4(sp)
    bae0:	84154904 	addi	r16,r16,21796
    bae4:	2023883a 	mov	r17,r4
    bae8:	2809883a 	mov	r4,r5
    baec:	dfc00215 	stw	ra,8(sp)
    baf0:	80000015 	stw	zero,0(r16)
    baf4:	000eb040 	call	eb04 <close>
    baf8:	00ffffc4 	movi	r3,-1
    bafc:	10c00526 	beq	r2,r3,bb14 <_close_r+0x44>
    bb00:	dfc00217 	ldw	ra,8(sp)
    bb04:	dc400117 	ldw	r17,4(sp)
    bb08:	dc000017 	ldw	r16,0(sp)
    bb0c:	dec00304 	addi	sp,sp,12
    bb10:	f800283a 	ret
    bb14:	80c00017 	ldw	r3,0(r16)
    bb18:	183ff926 	beq	r3,zero,bb00 <__alt_data_end+0xff00bb00>
    bb1c:	88c00015 	stw	r3,0(r17)
    bb20:	003ff706 	br	bb00 <__alt_data_end+0xff00bb00>

0000bb24 <_calloc_r>:
    bb24:	298b383a 	mul	r5,r5,r6
    bb28:	defffe04 	addi	sp,sp,-8
    bb2c:	dfc00115 	stw	ra,4(sp)
    bb30:	dc000015 	stw	r16,0(sp)
    bb34:	0002d500 	call	2d50 <_malloc_r>
    bb38:	10002926 	beq	r2,zero,bbe0 <_calloc_r+0xbc>
    bb3c:	11bfff17 	ldw	r6,-4(r2)
    bb40:	1021883a 	mov	r16,r2
    bb44:	00bfff04 	movi	r2,-4
    bb48:	308c703a 	and	r6,r6,r2
    bb4c:	00c00904 	movi	r3,36
    bb50:	308d883a 	add	r6,r6,r2
    bb54:	19801636 	bltu	r3,r6,bbb0 <_calloc_r+0x8c>
    bb58:	008004c4 	movi	r2,19
    bb5c:	11800b2e 	bgeu	r2,r6,bb8c <_calloc_r+0x68>
    bb60:	80000015 	stw	zero,0(r16)
    bb64:	80000115 	stw	zero,4(r16)
    bb68:	008006c4 	movi	r2,27
    bb6c:	11801a2e 	bgeu	r2,r6,bbd8 <_calloc_r+0xb4>
    bb70:	80000215 	stw	zero,8(r16)
    bb74:	80000315 	stw	zero,12(r16)
    bb78:	30c0151e 	bne	r6,r3,bbd0 <_calloc_r+0xac>
    bb7c:	80000415 	stw	zero,16(r16)
    bb80:	80800604 	addi	r2,r16,24
    bb84:	80000515 	stw	zero,20(r16)
    bb88:	00000106 	br	bb90 <_calloc_r+0x6c>
    bb8c:	8005883a 	mov	r2,r16
    bb90:	10000015 	stw	zero,0(r2)
    bb94:	10000115 	stw	zero,4(r2)
    bb98:	10000215 	stw	zero,8(r2)
    bb9c:	8005883a 	mov	r2,r16
    bba0:	dfc00117 	ldw	ra,4(sp)
    bba4:	dc000017 	ldw	r16,0(sp)
    bba8:	dec00204 	addi	sp,sp,8
    bbac:	f800283a 	ret
    bbb0:	000b883a 	mov	r5,zero
    bbb4:	8009883a 	mov	r4,r16
    bbb8:	0008b140 	call	8b14 <memset>
    bbbc:	8005883a 	mov	r2,r16
    bbc0:	dfc00117 	ldw	ra,4(sp)
    bbc4:	dc000017 	ldw	r16,0(sp)
    bbc8:	dec00204 	addi	sp,sp,8
    bbcc:	f800283a 	ret
    bbd0:	80800404 	addi	r2,r16,16
    bbd4:	003fee06 	br	bb90 <__alt_data_end+0xff00bb90>
    bbd8:	80800204 	addi	r2,r16,8
    bbdc:	003fec06 	br	bb90 <__alt_data_end+0xff00bb90>
    bbe0:	0005883a 	mov	r2,zero
    bbe4:	003fee06 	br	bba0 <__alt_data_end+0xff00bba0>

0000bbe8 <_fclose_r>:
    bbe8:	28003926 	beq	r5,zero,bcd0 <_fclose_r+0xe8>
    bbec:	defffc04 	addi	sp,sp,-16
    bbf0:	dc400115 	stw	r17,4(sp)
    bbf4:	dc000015 	stw	r16,0(sp)
    bbf8:	dfc00315 	stw	ra,12(sp)
    bbfc:	dc800215 	stw	r18,8(sp)
    bc00:	2023883a 	mov	r17,r4
    bc04:	2821883a 	mov	r16,r5
    bc08:	20000226 	beq	r4,zero,bc14 <_fclose_r+0x2c>
    bc0c:	20800e17 	ldw	r2,56(r4)
    bc10:	10002726 	beq	r2,zero,bcb0 <_fclose_r+0xc8>
    bc14:	8080030f 	ldh	r2,12(r16)
    bc18:	1000071e 	bne	r2,zero,bc38 <_fclose_r+0x50>
    bc1c:	0005883a 	mov	r2,zero
    bc20:	dfc00317 	ldw	ra,12(sp)
    bc24:	dc800217 	ldw	r18,8(sp)
    bc28:	dc400117 	ldw	r17,4(sp)
    bc2c:	dc000017 	ldw	r16,0(sp)
    bc30:	dec00404 	addi	sp,sp,16
    bc34:	f800283a 	ret
    bc38:	800b883a 	mov	r5,r16
    bc3c:	8809883a 	mov	r4,r17
    bc40:	00074340 	call	7434 <__sflush_r>
    bc44:	1025883a 	mov	r18,r2
    bc48:	80800b17 	ldw	r2,44(r16)
    bc4c:	10000426 	beq	r2,zero,bc60 <_fclose_r+0x78>
    bc50:	81400717 	ldw	r5,28(r16)
    bc54:	8809883a 	mov	r4,r17
    bc58:	103ee83a 	callr	r2
    bc5c:	10001616 	blt	r2,zero,bcb8 <_fclose_r+0xd0>
    bc60:	8080030b 	ldhu	r2,12(r16)
    bc64:	1080200c 	andi	r2,r2,128
    bc68:	1000151e 	bne	r2,zero,bcc0 <_fclose_r+0xd8>
    bc6c:	81400c17 	ldw	r5,48(r16)
    bc70:	28000526 	beq	r5,zero,bc88 <_fclose_r+0xa0>
    bc74:	80801004 	addi	r2,r16,64
    bc78:	28800226 	beq	r5,r2,bc84 <_fclose_r+0x9c>
    bc7c:	8809883a 	mov	r4,r17
    bc80:	0007ba00 	call	7ba0 <_free_r>
    bc84:	80000c15 	stw	zero,48(r16)
    bc88:	81401117 	ldw	r5,68(r16)
    bc8c:	28000326 	beq	r5,zero,bc9c <_fclose_r+0xb4>
    bc90:	8809883a 	mov	r4,r17
    bc94:	0007ba00 	call	7ba0 <_free_r>
    bc98:	80001115 	stw	zero,68(r16)
    bc9c:	0007a3c0 	call	7a3c <__sfp_lock_acquire>
    bca0:	8000030d 	sth	zero,12(r16)
    bca4:	0007a400 	call	7a40 <__sfp_lock_release>
    bca8:	9005883a 	mov	r2,r18
    bcac:	003fdc06 	br	bc20 <__alt_data_end+0xff00bc20>
    bcb0:	0007a2c0 	call	7a2c <__sinit>
    bcb4:	003fd706 	br	bc14 <__alt_data_end+0xff00bc14>
    bcb8:	04bfffc4 	movi	r18,-1
    bcbc:	003fe806 	br	bc60 <__alt_data_end+0xff00bc60>
    bcc0:	81400417 	ldw	r5,16(r16)
    bcc4:	8809883a 	mov	r4,r17
    bcc8:	0007ba00 	call	7ba0 <_free_r>
    bccc:	003fe706 	br	bc6c <__alt_data_end+0xff00bc6c>
    bcd0:	0005883a 	mov	r2,zero
    bcd4:	f800283a 	ret

0000bcd8 <fclose>:
    bcd8:	00800074 	movhi	r2,1
    bcdc:	108e2904 	addi	r2,r2,14500
    bce0:	200b883a 	mov	r5,r4
    bce4:	11000017 	ldw	r4,0(r2)
    bce8:	000bbe81 	jmpi	bbe8 <_fclose_r>

0000bcec <__fputwc>:
    bcec:	defff804 	addi	sp,sp,-32
    bcf0:	dcc00415 	stw	r19,16(sp)
    bcf4:	dc800315 	stw	r18,12(sp)
    bcf8:	dc000115 	stw	r16,4(sp)
    bcfc:	dfc00715 	stw	ra,28(sp)
    bd00:	dd400615 	stw	r21,24(sp)
    bd04:	dd000515 	stw	r20,20(sp)
    bd08:	dc400215 	stw	r17,8(sp)
    bd0c:	2027883a 	mov	r19,r4
    bd10:	2825883a 	mov	r18,r5
    bd14:	3021883a 	mov	r16,r6
    bd18:	000857c0 	call	857c <__locale_mb_cur_max>
    bd1c:	00c00044 	movi	r3,1
    bd20:	10c03e26 	beq	r2,r3,be1c <__fputwc+0x130>
    bd24:	81c01704 	addi	r7,r16,92
    bd28:	900d883a 	mov	r6,r18
    bd2c:	d80b883a 	mov	r5,sp
    bd30:	9809883a 	mov	r4,r19
    bd34:	000c1bc0 	call	c1bc <_wcrtomb_r>
    bd38:	1029883a 	mov	r20,r2
    bd3c:	00bfffc4 	movi	r2,-1
    bd40:	a0802026 	beq	r20,r2,bdc4 <__fputwc+0xd8>
    bd44:	d9400003 	ldbu	r5,0(sp)
    bd48:	a0001c26 	beq	r20,zero,bdbc <__fputwc+0xd0>
    bd4c:	0023883a 	mov	r17,zero
    bd50:	05400284 	movi	r21,10
    bd54:	00000906 	br	bd7c <__fputwc+0x90>
    bd58:	80800017 	ldw	r2,0(r16)
    bd5c:	11400005 	stb	r5,0(r2)
    bd60:	80c00017 	ldw	r3,0(r16)
    bd64:	18c00044 	addi	r3,r3,1
    bd68:	80c00015 	stw	r3,0(r16)
    bd6c:	8c400044 	addi	r17,r17,1
    bd70:	dc45883a 	add	r2,sp,r17
    bd74:	8d00112e 	bgeu	r17,r20,bdbc <__fputwc+0xd0>
    bd78:	11400003 	ldbu	r5,0(r2)
    bd7c:	80c00217 	ldw	r3,8(r16)
    bd80:	18ffffc4 	addi	r3,r3,-1
    bd84:	80c00215 	stw	r3,8(r16)
    bd88:	183ff30e 	bge	r3,zero,bd58 <__alt_data_end+0xff00bd58>
    bd8c:	80800617 	ldw	r2,24(r16)
    bd90:	18801916 	blt	r3,r2,bdf8 <__fputwc+0x10c>
    bd94:	80800017 	ldw	r2,0(r16)
    bd98:	11400005 	stb	r5,0(r2)
    bd9c:	80800017 	ldw	r2,0(r16)
    bda0:	10c00003 	ldbu	r3,0(r2)
    bda4:	10800044 	addi	r2,r2,1
    bda8:	1d402326 	beq	r3,r21,be38 <__fputwc+0x14c>
    bdac:	80800015 	stw	r2,0(r16)
    bdb0:	8c400044 	addi	r17,r17,1
    bdb4:	dc45883a 	add	r2,sp,r17
    bdb8:	8d3fef36 	bltu	r17,r20,bd78 <__alt_data_end+0xff00bd78>
    bdbc:	9005883a 	mov	r2,r18
    bdc0:	00000406 	br	bdd4 <__fputwc+0xe8>
    bdc4:	80c0030b 	ldhu	r3,12(r16)
    bdc8:	a005883a 	mov	r2,r20
    bdcc:	18c01014 	ori	r3,r3,64
    bdd0:	80c0030d 	sth	r3,12(r16)
    bdd4:	dfc00717 	ldw	ra,28(sp)
    bdd8:	dd400617 	ldw	r21,24(sp)
    bddc:	dd000517 	ldw	r20,20(sp)
    bde0:	dcc00417 	ldw	r19,16(sp)
    bde4:	dc800317 	ldw	r18,12(sp)
    bde8:	dc400217 	ldw	r17,8(sp)
    bdec:	dc000117 	ldw	r16,4(sp)
    bdf0:	dec00804 	addi	sp,sp,32
    bdf4:	f800283a 	ret
    bdf8:	800d883a 	mov	r6,r16
    bdfc:	29403fcc 	andi	r5,r5,255
    be00:	9809883a 	mov	r4,r19
    be04:	000c0640 	call	c064 <__swbuf_r>
    be08:	10bfffe0 	cmpeqi	r2,r2,-1
    be0c:	10803fcc 	andi	r2,r2,255
    be10:	103fd626 	beq	r2,zero,bd6c <__alt_data_end+0xff00bd6c>
    be14:	00bfffc4 	movi	r2,-1
    be18:	003fee06 	br	bdd4 <__alt_data_end+0xff00bdd4>
    be1c:	90ffffc4 	addi	r3,r18,-1
    be20:	01003f84 	movi	r4,254
    be24:	20ffbf36 	bltu	r4,r3,bd24 <__alt_data_end+0xff00bd24>
    be28:	900b883a 	mov	r5,r18
    be2c:	dc800005 	stb	r18,0(sp)
    be30:	1029883a 	mov	r20,r2
    be34:	003fc506 	br	bd4c <__alt_data_end+0xff00bd4c>
    be38:	800d883a 	mov	r6,r16
    be3c:	a80b883a 	mov	r5,r21
    be40:	9809883a 	mov	r4,r19
    be44:	000c0640 	call	c064 <__swbuf_r>
    be48:	10bfffe0 	cmpeqi	r2,r2,-1
    be4c:	003fef06 	br	be0c <__alt_data_end+0xff00be0c>

0000be50 <_fputwc_r>:
    be50:	3080030b 	ldhu	r2,12(r6)
    be54:	10c8000c 	andi	r3,r2,8192
    be58:	1800051e 	bne	r3,zero,be70 <_fputwc_r+0x20>
    be5c:	30c01917 	ldw	r3,100(r6)
    be60:	10880014 	ori	r2,r2,8192
    be64:	3080030d 	sth	r2,12(r6)
    be68:	18880014 	ori	r2,r3,8192
    be6c:	30801915 	stw	r2,100(r6)
    be70:	000bcec1 	jmpi	bcec <__fputwc>

0000be74 <fputwc>:
    be74:	00800074 	movhi	r2,1
    be78:	defffc04 	addi	sp,sp,-16
    be7c:	108e2904 	addi	r2,r2,14500
    be80:	dc000115 	stw	r16,4(sp)
    be84:	14000017 	ldw	r16,0(r2)
    be88:	dc400215 	stw	r17,8(sp)
    be8c:	dfc00315 	stw	ra,12(sp)
    be90:	2023883a 	mov	r17,r4
    be94:	80000226 	beq	r16,zero,bea0 <fputwc+0x2c>
    be98:	80800e17 	ldw	r2,56(r16)
    be9c:	10001026 	beq	r2,zero,bee0 <fputwc+0x6c>
    bea0:	2880030b 	ldhu	r2,12(r5)
    bea4:	10c8000c 	andi	r3,r2,8192
    bea8:	1800051e 	bne	r3,zero,bec0 <fputwc+0x4c>
    beac:	28c01917 	ldw	r3,100(r5)
    beb0:	10880014 	ori	r2,r2,8192
    beb4:	2880030d 	sth	r2,12(r5)
    beb8:	18880014 	ori	r2,r3,8192
    bebc:	28801915 	stw	r2,100(r5)
    bec0:	280d883a 	mov	r6,r5
    bec4:	8009883a 	mov	r4,r16
    bec8:	880b883a 	mov	r5,r17
    becc:	dfc00317 	ldw	ra,12(sp)
    bed0:	dc400217 	ldw	r17,8(sp)
    bed4:	dc000117 	ldw	r16,4(sp)
    bed8:	dec00404 	addi	sp,sp,16
    bedc:	000bcec1 	jmpi	bcec <__fputwc>
    bee0:	8009883a 	mov	r4,r16
    bee4:	d9400015 	stw	r5,0(sp)
    bee8:	0007a2c0 	call	7a2c <__sinit>
    beec:	d9400017 	ldw	r5,0(sp)
    bef0:	003feb06 	br	bea0 <__alt_data_end+0xff00bea0>

0000bef4 <_fstat_r>:
    bef4:	defffd04 	addi	sp,sp,-12
    bef8:	2805883a 	mov	r2,r5
    befc:	dc000015 	stw	r16,0(sp)
    bf00:	04000074 	movhi	r16,1
    bf04:	dc400115 	stw	r17,4(sp)
    bf08:	84154904 	addi	r16,r16,21796
    bf0c:	2023883a 	mov	r17,r4
    bf10:	300b883a 	mov	r5,r6
    bf14:	1009883a 	mov	r4,r2
    bf18:	dfc00215 	stw	ra,8(sp)
    bf1c:	80000015 	stw	zero,0(r16)
    bf20:	000ec3c0 	call	ec3c <fstat>
    bf24:	00ffffc4 	movi	r3,-1
    bf28:	10c00526 	beq	r2,r3,bf40 <_fstat_r+0x4c>
    bf2c:	dfc00217 	ldw	ra,8(sp)
    bf30:	dc400117 	ldw	r17,4(sp)
    bf34:	dc000017 	ldw	r16,0(sp)
    bf38:	dec00304 	addi	sp,sp,12
    bf3c:	f800283a 	ret
    bf40:	80c00017 	ldw	r3,0(r16)
    bf44:	183ff926 	beq	r3,zero,bf2c <__alt_data_end+0xff00bf2c>
    bf48:	88c00015 	stw	r3,0(r17)
    bf4c:	003ff706 	br	bf2c <__alt_data_end+0xff00bf2c>

0000bf50 <_isatty_r>:
    bf50:	defffd04 	addi	sp,sp,-12
    bf54:	dc000015 	stw	r16,0(sp)
    bf58:	04000074 	movhi	r16,1
    bf5c:	dc400115 	stw	r17,4(sp)
    bf60:	84154904 	addi	r16,r16,21796
    bf64:	2023883a 	mov	r17,r4
    bf68:	2809883a 	mov	r4,r5
    bf6c:	dfc00215 	stw	ra,8(sp)
    bf70:	80000015 	stw	zero,0(r16)
    bf74:	000ed280 	call	ed28 <isatty>
    bf78:	00ffffc4 	movi	r3,-1
    bf7c:	10c00526 	beq	r2,r3,bf94 <_isatty_r+0x44>
    bf80:	dfc00217 	ldw	ra,8(sp)
    bf84:	dc400117 	ldw	r17,4(sp)
    bf88:	dc000017 	ldw	r16,0(sp)
    bf8c:	dec00304 	addi	sp,sp,12
    bf90:	f800283a 	ret
    bf94:	80c00017 	ldw	r3,0(r16)
    bf98:	183ff926 	beq	r3,zero,bf80 <__alt_data_end+0xff00bf80>
    bf9c:	88c00015 	stw	r3,0(r17)
    bfa0:	003ff706 	br	bf80 <__alt_data_end+0xff00bf80>

0000bfa4 <_lseek_r>:
    bfa4:	defffd04 	addi	sp,sp,-12
    bfa8:	2805883a 	mov	r2,r5
    bfac:	dc000015 	stw	r16,0(sp)
    bfb0:	04000074 	movhi	r16,1
    bfb4:	dc400115 	stw	r17,4(sp)
    bfb8:	300b883a 	mov	r5,r6
    bfbc:	84154904 	addi	r16,r16,21796
    bfc0:	2023883a 	mov	r17,r4
    bfc4:	380d883a 	mov	r6,r7
    bfc8:	1009883a 	mov	r4,r2
    bfcc:	dfc00215 	stw	ra,8(sp)
    bfd0:	80000015 	stw	zero,0(r16)
    bfd4:	000eef40 	call	eef4 <lseek>
    bfd8:	00ffffc4 	movi	r3,-1
    bfdc:	10c00526 	beq	r2,r3,bff4 <_lseek_r+0x50>
    bfe0:	dfc00217 	ldw	ra,8(sp)
    bfe4:	dc400117 	ldw	r17,4(sp)
    bfe8:	dc000017 	ldw	r16,0(sp)
    bfec:	dec00304 	addi	sp,sp,12
    bff0:	f800283a 	ret
    bff4:	80c00017 	ldw	r3,0(r16)
    bff8:	183ff926 	beq	r3,zero,bfe0 <__alt_data_end+0xff00bfe0>
    bffc:	88c00015 	stw	r3,0(r17)
    c000:	003ff706 	br	bfe0 <__alt_data_end+0xff00bfe0>

0000c004 <_read_r>:
    c004:	defffd04 	addi	sp,sp,-12
    c008:	2805883a 	mov	r2,r5
    c00c:	dc000015 	stw	r16,0(sp)
    c010:	04000074 	movhi	r16,1
    c014:	dc400115 	stw	r17,4(sp)
    c018:	300b883a 	mov	r5,r6
    c01c:	84154904 	addi	r16,r16,21796
    c020:	2023883a 	mov	r17,r4
    c024:	380d883a 	mov	r6,r7
    c028:	1009883a 	mov	r4,r2
    c02c:	dfc00215 	stw	ra,8(sp)
    c030:	80000015 	stw	zero,0(r16)
    c034:	000f0c80 	call	f0c8 <read>
    c038:	00ffffc4 	movi	r3,-1
    c03c:	10c00526 	beq	r2,r3,c054 <_read_r+0x50>
    c040:	dfc00217 	ldw	ra,8(sp)
    c044:	dc400117 	ldw	r17,4(sp)
    c048:	dc000017 	ldw	r16,0(sp)
    c04c:	dec00304 	addi	sp,sp,12
    c050:	f800283a 	ret
    c054:	80c00017 	ldw	r3,0(r16)
    c058:	183ff926 	beq	r3,zero,c040 <__alt_data_end+0xff00c040>
    c05c:	88c00015 	stw	r3,0(r17)
    c060:	003ff706 	br	c040 <__alt_data_end+0xff00c040>

0000c064 <__swbuf_r>:
    c064:	defffb04 	addi	sp,sp,-20
    c068:	dcc00315 	stw	r19,12(sp)
    c06c:	dc800215 	stw	r18,8(sp)
    c070:	dc000015 	stw	r16,0(sp)
    c074:	dfc00415 	stw	ra,16(sp)
    c078:	dc400115 	stw	r17,4(sp)
    c07c:	2025883a 	mov	r18,r4
    c080:	2827883a 	mov	r19,r5
    c084:	3021883a 	mov	r16,r6
    c088:	20000226 	beq	r4,zero,c094 <__swbuf_r+0x30>
    c08c:	20800e17 	ldw	r2,56(r4)
    c090:	10004226 	beq	r2,zero,c19c <__swbuf_r+0x138>
    c094:	80800617 	ldw	r2,24(r16)
    c098:	8100030b 	ldhu	r4,12(r16)
    c09c:	80800215 	stw	r2,8(r16)
    c0a0:	2080020c 	andi	r2,r4,8
    c0a4:	10003626 	beq	r2,zero,c180 <__swbuf_r+0x11c>
    c0a8:	80c00417 	ldw	r3,16(r16)
    c0ac:	18003426 	beq	r3,zero,c180 <__swbuf_r+0x11c>
    c0b0:	2088000c 	andi	r2,r4,8192
    c0b4:	9c403fcc 	andi	r17,r19,255
    c0b8:	10001a26 	beq	r2,zero,c124 <__swbuf_r+0xc0>
    c0bc:	80800017 	ldw	r2,0(r16)
    c0c0:	81000517 	ldw	r4,20(r16)
    c0c4:	10c7c83a 	sub	r3,r2,r3
    c0c8:	1900200e 	bge	r3,r4,c14c <__swbuf_r+0xe8>
    c0cc:	18c00044 	addi	r3,r3,1
    c0d0:	81000217 	ldw	r4,8(r16)
    c0d4:	11400044 	addi	r5,r2,1
    c0d8:	81400015 	stw	r5,0(r16)
    c0dc:	213fffc4 	addi	r4,r4,-1
    c0e0:	81000215 	stw	r4,8(r16)
    c0e4:	14c00005 	stb	r19,0(r2)
    c0e8:	80800517 	ldw	r2,20(r16)
    c0ec:	10c01e26 	beq	r2,r3,c168 <__swbuf_r+0x104>
    c0f0:	8080030b 	ldhu	r2,12(r16)
    c0f4:	1080004c 	andi	r2,r2,1
    c0f8:	10000226 	beq	r2,zero,c104 <__swbuf_r+0xa0>
    c0fc:	00800284 	movi	r2,10
    c100:	88801926 	beq	r17,r2,c168 <__swbuf_r+0x104>
    c104:	8805883a 	mov	r2,r17
    c108:	dfc00417 	ldw	ra,16(sp)
    c10c:	dcc00317 	ldw	r19,12(sp)
    c110:	dc800217 	ldw	r18,8(sp)
    c114:	dc400117 	ldw	r17,4(sp)
    c118:	dc000017 	ldw	r16,0(sp)
    c11c:	dec00504 	addi	sp,sp,20
    c120:	f800283a 	ret
    c124:	81401917 	ldw	r5,100(r16)
    c128:	00b7ffc4 	movi	r2,-8193
    c12c:	21080014 	ori	r4,r4,8192
    c130:	2884703a 	and	r2,r5,r2
    c134:	80801915 	stw	r2,100(r16)
    c138:	80800017 	ldw	r2,0(r16)
    c13c:	8100030d 	sth	r4,12(r16)
    c140:	81000517 	ldw	r4,20(r16)
    c144:	10c7c83a 	sub	r3,r2,r3
    c148:	193fe016 	blt	r3,r4,c0cc <__alt_data_end+0xff00c0cc>
    c14c:	800b883a 	mov	r5,r16
    c150:	9009883a 	mov	r4,r18
    c154:	00076500 	call	7650 <_fflush_r>
    c158:	1000071e 	bne	r2,zero,c178 <__swbuf_r+0x114>
    c15c:	80800017 	ldw	r2,0(r16)
    c160:	00c00044 	movi	r3,1
    c164:	003fda06 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c168:	800b883a 	mov	r5,r16
    c16c:	9009883a 	mov	r4,r18
    c170:	00076500 	call	7650 <_fflush_r>
    c174:	103fe326 	beq	r2,zero,c104 <__alt_data_end+0xff00c104>
    c178:	00bfffc4 	movi	r2,-1
    c17c:	003fe206 	br	c108 <__alt_data_end+0xff00c108>
    c180:	800b883a 	mov	r5,r16
    c184:	9009883a 	mov	r4,r18
    c188:	0005a580 	call	5a58 <__swsetup_r>
    c18c:	103ffa1e 	bne	r2,zero,c178 <__alt_data_end+0xff00c178>
    c190:	8100030b 	ldhu	r4,12(r16)
    c194:	80c00417 	ldw	r3,16(r16)
    c198:	003fc506 	br	c0b0 <__alt_data_end+0xff00c0b0>
    c19c:	0007a2c0 	call	7a2c <__sinit>
    c1a0:	003fbc06 	br	c094 <__alt_data_end+0xff00c094>

0000c1a4 <__swbuf>:
    c1a4:	00800074 	movhi	r2,1
    c1a8:	108e2904 	addi	r2,r2,14500
    c1ac:	280d883a 	mov	r6,r5
    c1b0:	200b883a 	mov	r5,r4
    c1b4:	11000017 	ldw	r4,0(r2)
    c1b8:	000c0641 	jmpi	c064 <__swbuf_r>

0000c1bc <_wcrtomb_r>:
    c1bc:	defff604 	addi	sp,sp,-40
    c1c0:	00800074 	movhi	r2,1
    c1c4:	dc800815 	stw	r18,32(sp)
    c1c8:	dc400715 	stw	r17,28(sp)
    c1cc:	dc000615 	stw	r16,24(sp)
    c1d0:	108e2b04 	addi	r2,r2,14508
    c1d4:	dfc00915 	stw	ra,36(sp)
    c1d8:	2021883a 	mov	r16,r4
    c1dc:	3823883a 	mov	r17,r7
    c1e0:	14800017 	ldw	r18,0(r2)
    c1e4:	28001426 	beq	r5,zero,c238 <_wcrtomb_r+0x7c>
    c1e8:	d9400415 	stw	r5,16(sp)
    c1ec:	d9800515 	stw	r6,20(sp)
    c1f0:	00085700 	call	8570 <__locale_charset>
    c1f4:	d9800517 	ldw	r6,20(sp)
    c1f8:	d9400417 	ldw	r5,16(sp)
    c1fc:	100f883a 	mov	r7,r2
    c200:	dc400015 	stw	r17,0(sp)
    c204:	8009883a 	mov	r4,r16
    c208:	903ee83a 	callr	r18
    c20c:	00ffffc4 	movi	r3,-1
    c210:	10c0031e 	bne	r2,r3,c220 <_wcrtomb_r+0x64>
    c214:	88000015 	stw	zero,0(r17)
    c218:	00c02284 	movi	r3,138
    c21c:	80c00015 	stw	r3,0(r16)
    c220:	dfc00917 	ldw	ra,36(sp)
    c224:	dc800817 	ldw	r18,32(sp)
    c228:	dc400717 	ldw	r17,28(sp)
    c22c:	dc000617 	ldw	r16,24(sp)
    c230:	dec00a04 	addi	sp,sp,40
    c234:	f800283a 	ret
    c238:	00085700 	call	8570 <__locale_charset>
    c23c:	100f883a 	mov	r7,r2
    c240:	dc400015 	stw	r17,0(sp)
    c244:	000d883a 	mov	r6,zero
    c248:	d9400104 	addi	r5,sp,4
    c24c:	8009883a 	mov	r4,r16
    c250:	903ee83a 	callr	r18
    c254:	003fed06 	br	c20c <__alt_data_end+0xff00c20c>

0000c258 <wcrtomb>:
    c258:	defff604 	addi	sp,sp,-40
    c25c:	00800074 	movhi	r2,1
    c260:	dc800615 	stw	r18,24(sp)
    c264:	dc400515 	stw	r17,20(sp)
    c268:	108e2904 	addi	r2,r2,14500
    c26c:	dfc00915 	stw	ra,36(sp)
    c270:	dd000815 	stw	r20,32(sp)
    c274:	dcc00715 	stw	r19,28(sp)
    c278:	dc000415 	stw	r16,16(sp)
    c27c:	3025883a 	mov	r18,r6
    c280:	14400017 	ldw	r17,0(r2)
    c284:	20001926 	beq	r4,zero,c2ec <wcrtomb+0x94>
    c288:	00800074 	movhi	r2,1
    c28c:	108e2b04 	addi	r2,r2,14508
    c290:	15000017 	ldw	r20,0(r2)
    c294:	2021883a 	mov	r16,r4
    c298:	2827883a 	mov	r19,r5
    c29c:	00085700 	call	8570 <__locale_charset>
    c2a0:	100f883a 	mov	r7,r2
    c2a4:	dc800015 	stw	r18,0(sp)
    c2a8:	980d883a 	mov	r6,r19
    c2ac:	800b883a 	mov	r5,r16
    c2b0:	8809883a 	mov	r4,r17
    c2b4:	a03ee83a 	callr	r20
    c2b8:	00ffffc4 	movi	r3,-1
    c2bc:	10c0031e 	bne	r2,r3,c2cc <wcrtomb+0x74>
    c2c0:	90000015 	stw	zero,0(r18)
    c2c4:	00c02284 	movi	r3,138
    c2c8:	88c00015 	stw	r3,0(r17)
    c2cc:	dfc00917 	ldw	ra,36(sp)
    c2d0:	dd000817 	ldw	r20,32(sp)
    c2d4:	dcc00717 	ldw	r19,28(sp)
    c2d8:	dc800617 	ldw	r18,24(sp)
    c2dc:	dc400517 	ldw	r17,20(sp)
    c2e0:	dc000417 	ldw	r16,16(sp)
    c2e4:	dec00a04 	addi	sp,sp,40
    c2e8:	f800283a 	ret
    c2ec:	00800074 	movhi	r2,1
    c2f0:	108e2b04 	addi	r2,r2,14508
    c2f4:	14000017 	ldw	r16,0(r2)
    c2f8:	00085700 	call	8570 <__locale_charset>
    c2fc:	100f883a 	mov	r7,r2
    c300:	dc800015 	stw	r18,0(sp)
    c304:	000d883a 	mov	r6,zero
    c308:	d9400104 	addi	r5,sp,4
    c30c:	8809883a 	mov	r4,r17
    c310:	803ee83a 	callr	r16
    c314:	003fe806 	br	c2b8 <__alt_data_end+0xff00c2b8>

0000c318 <__ascii_wctomb>:
    c318:	28000526 	beq	r5,zero,c330 <__ascii_wctomb+0x18>
    c31c:	00803fc4 	movi	r2,255
    c320:	11800536 	bltu	r2,r6,c338 <__ascii_wctomb+0x20>
    c324:	29800005 	stb	r6,0(r5)
    c328:	00800044 	movi	r2,1
    c32c:	f800283a 	ret
    c330:	0005883a 	mov	r2,zero
    c334:	f800283a 	ret
    c338:	00802284 	movi	r2,138
    c33c:	20800015 	stw	r2,0(r4)
    c340:	00bfffc4 	movi	r2,-1
    c344:	f800283a 	ret

0000c348 <_wctomb_r>:
    c348:	00800074 	movhi	r2,1
    c34c:	defff904 	addi	sp,sp,-28
    c350:	108e2b04 	addi	r2,r2,14508
    c354:	dfc00615 	stw	ra,24(sp)
    c358:	dc400515 	stw	r17,20(sp)
    c35c:	dc000415 	stw	r16,16(sp)
    c360:	3823883a 	mov	r17,r7
    c364:	14000017 	ldw	r16,0(r2)
    c368:	d9000115 	stw	r4,4(sp)
    c36c:	d9400215 	stw	r5,8(sp)
    c370:	d9800315 	stw	r6,12(sp)
    c374:	00085700 	call	8570 <__locale_charset>
    c378:	d9800317 	ldw	r6,12(sp)
    c37c:	d9400217 	ldw	r5,8(sp)
    c380:	d9000117 	ldw	r4,4(sp)
    c384:	100f883a 	mov	r7,r2
    c388:	dc400015 	stw	r17,0(sp)
    c38c:	803ee83a 	callr	r16
    c390:	dfc00617 	ldw	ra,24(sp)
    c394:	dc400517 	ldw	r17,20(sp)
    c398:	dc000417 	ldw	r16,16(sp)
    c39c:	dec00704 	addi	sp,sp,28
    c3a0:	f800283a 	ret

0000c3a4 <__udivdi3>:
    c3a4:	defff504 	addi	sp,sp,-44
    c3a8:	dcc00415 	stw	r19,16(sp)
    c3ac:	dc000115 	stw	r16,4(sp)
    c3b0:	dfc00a15 	stw	ra,40(sp)
    c3b4:	df000915 	stw	fp,36(sp)
    c3b8:	ddc00815 	stw	r23,32(sp)
    c3bc:	dd800715 	stw	r22,28(sp)
    c3c0:	dd400615 	stw	r21,24(sp)
    c3c4:	dd000515 	stw	r20,20(sp)
    c3c8:	dc800315 	stw	r18,12(sp)
    c3cc:	dc400215 	stw	r17,8(sp)
    c3d0:	2027883a 	mov	r19,r4
    c3d4:	2821883a 	mov	r16,r5
    c3d8:	3800411e 	bne	r7,zero,c4e0 <__udivdi3+0x13c>
    c3dc:	3023883a 	mov	r17,r6
    c3e0:	2025883a 	mov	r18,r4
    c3e4:	2980522e 	bgeu	r5,r6,c530 <__udivdi3+0x18c>
    c3e8:	00bfffd4 	movui	r2,65535
    c3ec:	282d883a 	mov	r22,r5
    c3f0:	1180a836 	bltu	r2,r6,c694 <__udivdi3+0x2f0>
    c3f4:	00803fc4 	movi	r2,255
    c3f8:	1185803a 	cmpltu	r2,r2,r6
    c3fc:	100490fa 	slli	r2,r2,3
    c400:	3086d83a 	srl	r3,r6,r2
    c404:	01000074 	movhi	r4,1
    c408:	21067dc4 	addi	r4,r4,6647
    c40c:	20c7883a 	add	r3,r4,r3
    c410:	18c00003 	ldbu	r3,0(r3)
    c414:	1885883a 	add	r2,r3,r2
    c418:	00c00804 	movi	r3,32
    c41c:	1887c83a 	sub	r3,r3,r2
    c420:	18000526 	beq	r3,zero,c438 <__udivdi3+0x94>
    c424:	80e0983a 	sll	r16,r16,r3
    c428:	9884d83a 	srl	r2,r19,r2
    c42c:	30e2983a 	sll	r17,r6,r3
    c430:	98e4983a 	sll	r18,r19,r3
    c434:	142cb03a 	or	r22,r2,r16
    c438:	882ad43a 	srli	r21,r17,16
    c43c:	b009883a 	mov	r4,r22
    c440:	8d3fffcc 	andi	r20,r17,65535
    c444:	a80b883a 	mov	r5,r21
    c448:	00022dc0 	call	22dc <__umodsi3>
    c44c:	b009883a 	mov	r4,r22
    c450:	a80b883a 	mov	r5,r21
    c454:	1027883a 	mov	r19,r2
    c458:	00022780 	call	2278 <__udivsi3>
    c45c:	102d883a 	mov	r22,r2
    c460:	9826943a 	slli	r19,r19,16
    c464:	9004d43a 	srli	r2,r18,16
    c468:	a5a1383a 	mul	r16,r20,r22
    c46c:	14c4b03a 	or	r2,r2,r19
    c470:	1400052e 	bgeu	r2,r16,c488 <__udivdi3+0xe4>
    c474:	1445883a 	add	r2,r2,r17
    c478:	b0ffffc4 	addi	r3,r22,-1
    c47c:	14400136 	bltu	r2,r17,c484 <__udivdi3+0xe0>
    c480:	14012336 	bltu	r2,r16,c910 <__udivdi3+0x56c>
    c484:	182d883a 	mov	r22,r3
    c488:	1421c83a 	sub	r16,r2,r16
    c48c:	a80b883a 	mov	r5,r21
    c490:	8009883a 	mov	r4,r16
    c494:	00022dc0 	call	22dc <__umodsi3>
    c498:	1027883a 	mov	r19,r2
    c49c:	a80b883a 	mov	r5,r21
    c4a0:	8009883a 	mov	r4,r16
    c4a4:	00022780 	call	2278 <__udivsi3>
    c4a8:	9826943a 	slli	r19,r19,16
    c4ac:	a0a9383a 	mul	r20,r20,r2
    c4b0:	94bfffcc 	andi	r18,r18,65535
    c4b4:	94e4b03a 	or	r18,r18,r19
    c4b8:	9500052e 	bgeu	r18,r20,c4d0 <__udivdi3+0x12c>
    c4bc:	8ca5883a 	add	r18,r17,r18
    c4c0:	10ffffc4 	addi	r3,r2,-1
    c4c4:	9440f136 	bltu	r18,r17,c88c <__udivdi3+0x4e8>
    c4c8:	9500f02e 	bgeu	r18,r20,c88c <__udivdi3+0x4e8>
    c4cc:	10bfff84 	addi	r2,r2,-2
    c4d0:	b00c943a 	slli	r6,r22,16
    c4d4:	0007883a 	mov	r3,zero
    c4d8:	3084b03a 	or	r2,r6,r2
    c4dc:	00005906 	br	c644 <__udivdi3+0x2a0>
    c4e0:	29c05636 	bltu	r5,r7,c63c <__udivdi3+0x298>
    c4e4:	00bfffd4 	movui	r2,65535
    c4e8:	11c0622e 	bgeu	r2,r7,c674 <__udivdi3+0x2d0>
    c4ec:	00804034 	movhi	r2,256
    c4f0:	10bfffc4 	addi	r2,r2,-1
    c4f4:	11c0ee36 	bltu	r2,r7,c8b0 <__udivdi3+0x50c>
    c4f8:	00800404 	movi	r2,16
    c4fc:	3886d83a 	srl	r3,r7,r2
    c500:	01000074 	movhi	r4,1
    c504:	21067dc4 	addi	r4,r4,6647
    c508:	20c7883a 	add	r3,r4,r3
    c50c:	18c00003 	ldbu	r3,0(r3)
    c510:	05400804 	movi	r21,32
    c514:	1885883a 	add	r2,r3,r2
    c518:	a8abc83a 	sub	r21,r21,r2
    c51c:	a800621e 	bne	r21,zero,c6a8 <__udivdi3+0x304>
    c520:	3c00e936 	bltu	r7,r16,c8c8 <__udivdi3+0x524>
    c524:	9985403a 	cmpgeu	r2,r19,r6
    c528:	0007883a 	mov	r3,zero
    c52c:	00004506 	br	c644 <__udivdi3+0x2a0>
    c530:	3000041e 	bne	r6,zero,c544 <__udivdi3+0x1a0>
    c534:	000b883a 	mov	r5,zero
    c538:	01000044 	movi	r4,1
    c53c:	00022780 	call	2278 <__udivsi3>
    c540:	1023883a 	mov	r17,r2
    c544:	00bfffd4 	movui	r2,65535
    c548:	14404e2e 	bgeu	r2,r17,c684 <__udivdi3+0x2e0>
    c54c:	00804034 	movhi	r2,256
    c550:	10bfffc4 	addi	r2,r2,-1
    c554:	1440d836 	bltu	r2,r17,c8b8 <__udivdi3+0x514>
    c558:	00800404 	movi	r2,16
    c55c:	8886d83a 	srl	r3,r17,r2
    c560:	01000074 	movhi	r4,1
    c564:	21067dc4 	addi	r4,r4,6647
    c568:	20c7883a 	add	r3,r4,r3
    c56c:	18c00003 	ldbu	r3,0(r3)
    c570:	1885883a 	add	r2,r3,r2
    c574:	00c00804 	movi	r3,32
    c578:	1887c83a 	sub	r3,r3,r2
    c57c:	18008f1e 	bne	r3,zero,c7bc <__udivdi3+0x418>
    c580:	882ad43a 	srli	r21,r17,16
    c584:	8461c83a 	sub	r16,r16,r17
    c588:	8d3fffcc 	andi	r20,r17,65535
    c58c:	00c00044 	movi	r3,1
    c590:	8009883a 	mov	r4,r16
    c594:	a80b883a 	mov	r5,r21
    c598:	d8c00015 	stw	r3,0(sp)
    c59c:	00022dc0 	call	22dc <__umodsi3>
    c5a0:	8009883a 	mov	r4,r16
    c5a4:	a80b883a 	mov	r5,r21
    c5a8:	1027883a 	mov	r19,r2
    c5ac:	00022780 	call	2278 <__udivsi3>
    c5b0:	9826943a 	slli	r19,r19,16
    c5b4:	9008d43a 	srli	r4,r18,16
    c5b8:	1521383a 	mul	r16,r2,r20
    c5bc:	102d883a 	mov	r22,r2
    c5c0:	24c8b03a 	or	r4,r4,r19
    c5c4:	d8c00017 	ldw	r3,0(sp)
    c5c8:	2400052e 	bgeu	r4,r16,c5e0 <__udivdi3+0x23c>
    c5cc:	2449883a 	add	r4,r4,r17
    c5d0:	b0bfffc4 	addi	r2,r22,-1
    c5d4:	24400136 	bltu	r4,r17,c5dc <__udivdi3+0x238>
    c5d8:	2400ca36 	bltu	r4,r16,c904 <__udivdi3+0x560>
    c5dc:	102d883a 	mov	r22,r2
    c5e0:	2421c83a 	sub	r16,r4,r16
    c5e4:	a80b883a 	mov	r5,r21
    c5e8:	8009883a 	mov	r4,r16
    c5ec:	d8c00015 	stw	r3,0(sp)
    c5f0:	00022dc0 	call	22dc <__umodsi3>
    c5f4:	1027883a 	mov	r19,r2
    c5f8:	a80b883a 	mov	r5,r21
    c5fc:	8009883a 	mov	r4,r16
    c600:	00022780 	call	2278 <__udivsi3>
    c604:	9826943a 	slli	r19,r19,16
    c608:	1529383a 	mul	r20,r2,r20
    c60c:	94bfffcc 	andi	r18,r18,65535
    c610:	94e4b03a 	or	r18,r18,r19
    c614:	d8c00017 	ldw	r3,0(sp)
    c618:	9500052e 	bgeu	r18,r20,c630 <__udivdi3+0x28c>
    c61c:	8ca5883a 	add	r18,r17,r18
    c620:	113fffc4 	addi	r4,r2,-1
    c624:	94409736 	bltu	r18,r17,c884 <__udivdi3+0x4e0>
    c628:	9500962e 	bgeu	r18,r20,c884 <__udivdi3+0x4e0>
    c62c:	10bfff84 	addi	r2,r2,-2
    c630:	b00c943a 	slli	r6,r22,16
    c634:	3084b03a 	or	r2,r6,r2
    c638:	00000206 	br	c644 <__udivdi3+0x2a0>
    c63c:	0007883a 	mov	r3,zero
    c640:	0005883a 	mov	r2,zero
    c644:	dfc00a17 	ldw	ra,40(sp)
    c648:	df000917 	ldw	fp,36(sp)
    c64c:	ddc00817 	ldw	r23,32(sp)
    c650:	dd800717 	ldw	r22,28(sp)
    c654:	dd400617 	ldw	r21,24(sp)
    c658:	dd000517 	ldw	r20,20(sp)
    c65c:	dcc00417 	ldw	r19,16(sp)
    c660:	dc800317 	ldw	r18,12(sp)
    c664:	dc400217 	ldw	r17,8(sp)
    c668:	dc000117 	ldw	r16,4(sp)
    c66c:	dec00b04 	addi	sp,sp,44
    c670:	f800283a 	ret
    c674:	00803fc4 	movi	r2,255
    c678:	11c5803a 	cmpltu	r2,r2,r7
    c67c:	100490fa 	slli	r2,r2,3
    c680:	003f9e06 	br	c4fc <__alt_data_end+0xff00c4fc>
    c684:	00803fc4 	movi	r2,255
    c688:	1445803a 	cmpltu	r2,r2,r17
    c68c:	100490fa 	slli	r2,r2,3
    c690:	003fb206 	br	c55c <__alt_data_end+0xff00c55c>
    c694:	00804034 	movhi	r2,256
    c698:	10bfffc4 	addi	r2,r2,-1
    c69c:	11808836 	bltu	r2,r6,c8c0 <__udivdi3+0x51c>
    c6a0:	00800404 	movi	r2,16
    c6a4:	003f5606 	br	c400 <__alt_data_end+0xff00c400>
    c6a8:	30aed83a 	srl	r23,r6,r2
    c6ac:	3d4e983a 	sll	r7,r7,r21
    c6b0:	80acd83a 	srl	r22,r16,r2
    c6b4:	9884d83a 	srl	r2,r19,r2
    c6b8:	3deeb03a 	or	r23,r7,r23
    c6bc:	b824d43a 	srli	r18,r23,16
    c6c0:	8560983a 	sll	r16,r16,r21
    c6c4:	b009883a 	mov	r4,r22
    c6c8:	900b883a 	mov	r5,r18
    c6cc:	3568983a 	sll	r20,r6,r21
    c6d0:	1420b03a 	or	r16,r2,r16
    c6d4:	00022dc0 	call	22dc <__umodsi3>
    c6d8:	b009883a 	mov	r4,r22
    c6dc:	900b883a 	mov	r5,r18
    c6e0:	1023883a 	mov	r17,r2
    c6e4:	00022780 	call	2278 <__udivsi3>
    c6e8:	8808943a 	slli	r4,r17,16
    c6ec:	bf3fffcc 	andi	fp,r23,65535
    c6f0:	8006d43a 	srli	r3,r16,16
    c6f4:	e0a3383a 	mul	r17,fp,r2
    c6f8:	100d883a 	mov	r6,r2
    c6fc:	1906b03a 	or	r3,r3,r4
    c700:	1c40042e 	bgeu	r3,r17,c714 <__udivdi3+0x370>
    c704:	1dc7883a 	add	r3,r3,r23
    c708:	10bfffc4 	addi	r2,r2,-1
    c70c:	1dc0752e 	bgeu	r3,r23,c8e4 <__udivdi3+0x540>
    c710:	100d883a 	mov	r6,r2
    c714:	1c63c83a 	sub	r17,r3,r17
    c718:	900b883a 	mov	r5,r18
    c71c:	8809883a 	mov	r4,r17
    c720:	d9800015 	stw	r6,0(sp)
    c724:	00022dc0 	call	22dc <__umodsi3>
    c728:	102d883a 	mov	r22,r2
    c72c:	8809883a 	mov	r4,r17
    c730:	900b883a 	mov	r5,r18
    c734:	00022780 	call	2278 <__udivsi3>
    c738:	b02c943a 	slli	r22,r22,16
    c73c:	e089383a 	mul	r4,fp,r2
    c740:	843fffcc 	andi	r16,r16,65535
    c744:	85a0b03a 	or	r16,r16,r22
    c748:	d9800017 	ldw	r6,0(sp)
    c74c:	8100042e 	bgeu	r16,r4,c760 <__udivdi3+0x3bc>
    c750:	85e1883a 	add	r16,r16,r23
    c754:	10ffffc4 	addi	r3,r2,-1
    c758:	85c05e2e 	bgeu	r16,r23,c8d4 <__udivdi3+0x530>
    c75c:	1805883a 	mov	r2,r3
    c760:	300c943a 	slli	r6,r6,16
    c764:	a17fffcc 	andi	r5,r20,65535
    c768:	a028d43a 	srli	r20,r20,16
    c76c:	3084b03a 	or	r2,r6,r2
    c770:	10ffffcc 	andi	r3,r2,65535
    c774:	100cd43a 	srli	r6,r2,16
    c778:	194f383a 	mul	r7,r3,r5
    c77c:	1d07383a 	mul	r3,r3,r20
    c780:	314b383a 	mul	r5,r6,r5
    c784:	3810d43a 	srli	r8,r7,16
    c788:	8121c83a 	sub	r16,r16,r4
    c78c:	1947883a 	add	r3,r3,r5
    c790:	40c7883a 	add	r3,r8,r3
    c794:	350d383a 	mul	r6,r6,r20
    c798:	1940022e 	bgeu	r3,r5,c7a4 <__udivdi3+0x400>
    c79c:	01000074 	movhi	r4,1
    c7a0:	310d883a 	add	r6,r6,r4
    c7a4:	1828d43a 	srli	r20,r3,16
    c7a8:	a18d883a 	add	r6,r20,r6
    c7ac:	81803e36 	bltu	r16,r6,c8a8 <__udivdi3+0x504>
    c7b0:	81803826 	beq	r16,r6,c894 <__udivdi3+0x4f0>
    c7b4:	0007883a 	mov	r3,zero
    c7b8:	003fa206 	br	c644 <__alt_data_end+0xff00c644>
    c7bc:	88e2983a 	sll	r17,r17,r3
    c7c0:	80a8d83a 	srl	r20,r16,r2
    c7c4:	80e0983a 	sll	r16,r16,r3
    c7c8:	882ad43a 	srli	r21,r17,16
    c7cc:	9884d83a 	srl	r2,r19,r2
    c7d0:	a009883a 	mov	r4,r20
    c7d4:	a80b883a 	mov	r5,r21
    c7d8:	142eb03a 	or	r23,r2,r16
    c7dc:	98e4983a 	sll	r18,r19,r3
    c7e0:	00022dc0 	call	22dc <__umodsi3>
    c7e4:	a009883a 	mov	r4,r20
    c7e8:	a80b883a 	mov	r5,r21
    c7ec:	1021883a 	mov	r16,r2
    c7f0:	00022780 	call	2278 <__udivsi3>
    c7f4:	1039883a 	mov	fp,r2
    c7f8:	8d3fffcc 	andi	r20,r17,65535
    c7fc:	8020943a 	slli	r16,r16,16
    c800:	b804d43a 	srli	r2,r23,16
    c804:	a72d383a 	mul	r22,r20,fp
    c808:	1404b03a 	or	r2,r2,r16
    c80c:	1580062e 	bgeu	r2,r22,c828 <__udivdi3+0x484>
    c810:	1445883a 	add	r2,r2,r17
    c814:	e0ffffc4 	addi	r3,fp,-1
    c818:	14403836 	bltu	r2,r17,c8fc <__udivdi3+0x558>
    c81c:	1580372e 	bgeu	r2,r22,c8fc <__udivdi3+0x558>
    c820:	e73fff84 	addi	fp,fp,-2
    c824:	1445883a 	add	r2,r2,r17
    c828:	15adc83a 	sub	r22,r2,r22
    c82c:	a80b883a 	mov	r5,r21
    c830:	b009883a 	mov	r4,r22
    c834:	00022dc0 	call	22dc <__umodsi3>
    c838:	1027883a 	mov	r19,r2
    c83c:	b009883a 	mov	r4,r22
    c840:	a80b883a 	mov	r5,r21
    c844:	00022780 	call	2278 <__udivsi3>
    c848:	9826943a 	slli	r19,r19,16
    c84c:	a0a1383a 	mul	r16,r20,r2
    c850:	b93fffcc 	andi	r4,r23,65535
    c854:	24c8b03a 	or	r4,r4,r19
    c858:	2400062e 	bgeu	r4,r16,c874 <__udivdi3+0x4d0>
    c85c:	2449883a 	add	r4,r4,r17
    c860:	10ffffc4 	addi	r3,r2,-1
    c864:	24402336 	bltu	r4,r17,c8f4 <__udivdi3+0x550>
    c868:	2400222e 	bgeu	r4,r16,c8f4 <__udivdi3+0x550>
    c86c:	10bfff84 	addi	r2,r2,-2
    c870:	2449883a 	add	r4,r4,r17
    c874:	e038943a 	slli	fp,fp,16
    c878:	2421c83a 	sub	r16,r4,r16
    c87c:	e086b03a 	or	r3,fp,r2
    c880:	003f4306 	br	c590 <__alt_data_end+0xff00c590>
    c884:	2005883a 	mov	r2,r4
    c888:	003f6906 	br	c630 <__alt_data_end+0xff00c630>
    c88c:	1805883a 	mov	r2,r3
    c890:	003f0f06 	br	c4d0 <__alt_data_end+0xff00c4d0>
    c894:	1806943a 	slli	r3,r3,16
    c898:	9d66983a 	sll	r19,r19,r21
    c89c:	39ffffcc 	andi	r7,r7,65535
    c8a0:	19c7883a 	add	r3,r3,r7
    c8a4:	98ffc32e 	bgeu	r19,r3,c7b4 <__alt_data_end+0xff00c7b4>
    c8a8:	10bfffc4 	addi	r2,r2,-1
    c8ac:	003fc106 	br	c7b4 <__alt_data_end+0xff00c7b4>
    c8b0:	00800604 	movi	r2,24
    c8b4:	003f1106 	br	c4fc <__alt_data_end+0xff00c4fc>
    c8b8:	00800604 	movi	r2,24
    c8bc:	003f2706 	br	c55c <__alt_data_end+0xff00c55c>
    c8c0:	00800604 	movi	r2,24
    c8c4:	003ece06 	br	c400 <__alt_data_end+0xff00c400>
    c8c8:	0007883a 	mov	r3,zero
    c8cc:	00800044 	movi	r2,1
    c8d0:	003f5c06 	br	c644 <__alt_data_end+0xff00c644>
    c8d4:	813fa12e 	bgeu	r16,r4,c75c <__alt_data_end+0xff00c75c>
    c8d8:	10bfff84 	addi	r2,r2,-2
    c8dc:	85e1883a 	add	r16,r16,r23
    c8e0:	003f9f06 	br	c760 <__alt_data_end+0xff00c760>
    c8e4:	1c7f8a2e 	bgeu	r3,r17,c710 <__alt_data_end+0xff00c710>
    c8e8:	31bfff84 	addi	r6,r6,-2
    c8ec:	1dc7883a 	add	r3,r3,r23
    c8f0:	003f8806 	br	c714 <__alt_data_end+0xff00c714>
    c8f4:	1805883a 	mov	r2,r3
    c8f8:	003fde06 	br	c874 <__alt_data_end+0xff00c874>
    c8fc:	1839883a 	mov	fp,r3
    c900:	003fc906 	br	c828 <__alt_data_end+0xff00c828>
    c904:	b5bfff84 	addi	r22,r22,-2
    c908:	2449883a 	add	r4,r4,r17
    c90c:	003f3406 	br	c5e0 <__alt_data_end+0xff00c5e0>
    c910:	b5bfff84 	addi	r22,r22,-2
    c914:	1445883a 	add	r2,r2,r17
    c918:	003edb06 	br	c488 <__alt_data_end+0xff00c488>

0000c91c <__umoddi3>:
    c91c:	defff404 	addi	sp,sp,-48
    c920:	df000a15 	stw	fp,40(sp)
    c924:	dc400315 	stw	r17,12(sp)
    c928:	dc000215 	stw	r16,8(sp)
    c92c:	dfc00b15 	stw	ra,44(sp)
    c930:	ddc00915 	stw	r23,36(sp)
    c934:	dd800815 	stw	r22,32(sp)
    c938:	dd400715 	stw	r21,28(sp)
    c93c:	dd000615 	stw	r20,24(sp)
    c940:	dcc00515 	stw	r19,20(sp)
    c944:	dc800415 	stw	r18,16(sp)
    c948:	2021883a 	mov	r16,r4
    c94c:	2823883a 	mov	r17,r5
    c950:	2839883a 	mov	fp,r5
    c954:	38003c1e 	bne	r7,zero,ca48 <__umoddi3+0x12c>
    c958:	3027883a 	mov	r19,r6
    c95c:	2029883a 	mov	r20,r4
    c960:	2980512e 	bgeu	r5,r6,caa8 <__umoddi3+0x18c>
    c964:	00bfffd4 	movui	r2,65535
    c968:	11809a36 	bltu	r2,r6,cbd4 <__umoddi3+0x2b8>
    c96c:	01003fc4 	movi	r4,255
    c970:	2189803a 	cmpltu	r4,r4,r6
    c974:	200890fa 	slli	r4,r4,3
    c978:	3104d83a 	srl	r2,r6,r4
    c97c:	00c00074 	movhi	r3,1
    c980:	18c67dc4 	addi	r3,r3,6647
    c984:	1885883a 	add	r2,r3,r2
    c988:	10c00003 	ldbu	r3,0(r2)
    c98c:	00800804 	movi	r2,32
    c990:	1909883a 	add	r4,r3,r4
    c994:	1125c83a 	sub	r18,r2,r4
    c998:	90000526 	beq	r18,zero,c9b0 <__umoddi3+0x94>
    c99c:	8ca2983a 	sll	r17,r17,r18
    c9a0:	8108d83a 	srl	r4,r16,r4
    c9a4:	34a6983a 	sll	r19,r6,r18
    c9a8:	84a8983a 	sll	r20,r16,r18
    c9ac:	2478b03a 	or	fp,r4,r17
    c9b0:	982ed43a 	srli	r23,r19,16
    c9b4:	e009883a 	mov	r4,fp
    c9b8:	9dbfffcc 	andi	r22,r19,65535
    c9bc:	b80b883a 	mov	r5,r23
    c9c0:	00022dc0 	call	22dc <__umodsi3>
    c9c4:	e009883a 	mov	r4,fp
    c9c8:	b80b883a 	mov	r5,r23
    c9cc:	102b883a 	mov	r21,r2
    c9d0:	00022780 	call	2278 <__udivsi3>
    c9d4:	a806943a 	slli	r3,r21,16
    c9d8:	a008d43a 	srli	r4,r20,16
    c9dc:	b085383a 	mul	r2,r22,r2
    c9e0:	20c8b03a 	or	r4,r4,r3
    c9e4:	2080032e 	bgeu	r4,r2,c9f4 <__umoddi3+0xd8>
    c9e8:	24c9883a 	add	r4,r4,r19
    c9ec:	24c00136 	bltu	r4,r19,c9f4 <__umoddi3+0xd8>
    c9f0:	20811036 	bltu	r4,r2,ce34 <__umoddi3+0x518>
    c9f4:	20abc83a 	sub	r21,r4,r2
    c9f8:	b80b883a 	mov	r5,r23
    c9fc:	a809883a 	mov	r4,r21
    ca00:	00022dc0 	call	22dc <__umodsi3>
    ca04:	1023883a 	mov	r17,r2
    ca08:	b80b883a 	mov	r5,r23
    ca0c:	a809883a 	mov	r4,r21
    ca10:	00022780 	call	2278 <__udivsi3>
    ca14:	8822943a 	slli	r17,r17,16
    ca18:	b085383a 	mul	r2,r22,r2
    ca1c:	a0ffffcc 	andi	r3,r20,65535
    ca20:	1c46b03a 	or	r3,r3,r17
    ca24:	1880042e 	bgeu	r3,r2,ca38 <__umoddi3+0x11c>
    ca28:	1cc7883a 	add	r3,r3,r19
    ca2c:	1cc00236 	bltu	r3,r19,ca38 <__umoddi3+0x11c>
    ca30:	1880012e 	bgeu	r3,r2,ca38 <__umoddi3+0x11c>
    ca34:	1cc7883a 	add	r3,r3,r19
    ca38:	1885c83a 	sub	r2,r3,r2
    ca3c:	1484d83a 	srl	r2,r2,r18
    ca40:	0007883a 	mov	r3,zero
    ca44:	00004f06 	br	cb84 <__umoddi3+0x268>
    ca48:	29c04c36 	bltu	r5,r7,cb7c <__umoddi3+0x260>
    ca4c:	00bfffd4 	movui	r2,65535
    ca50:	11c0582e 	bgeu	r2,r7,cbb4 <__umoddi3+0x298>
    ca54:	00804034 	movhi	r2,256
    ca58:	10bfffc4 	addi	r2,r2,-1
    ca5c:	11c0e736 	bltu	r2,r7,cdfc <__umoddi3+0x4e0>
    ca60:	01000404 	movi	r4,16
    ca64:	3904d83a 	srl	r2,r7,r4
    ca68:	00c00074 	movhi	r3,1
    ca6c:	18c67dc4 	addi	r3,r3,6647
    ca70:	1885883a 	add	r2,r3,r2
    ca74:	14c00003 	ldbu	r19,0(r2)
    ca78:	00c00804 	movi	r3,32
    ca7c:	9927883a 	add	r19,r19,r4
    ca80:	1ce9c83a 	sub	r20,r3,r19
    ca84:	a000581e 	bne	r20,zero,cbe8 <__umoddi3+0x2cc>
    ca88:	3c400136 	bltu	r7,r17,ca90 <__umoddi3+0x174>
    ca8c:	8180eb36 	bltu	r16,r6,ce3c <__umoddi3+0x520>
    ca90:	8185c83a 	sub	r2,r16,r6
    ca94:	89e3c83a 	sub	r17,r17,r7
    ca98:	8089803a 	cmpltu	r4,r16,r2
    ca9c:	8939c83a 	sub	fp,r17,r4
    caa0:	e007883a 	mov	r3,fp
    caa4:	00003706 	br	cb84 <__umoddi3+0x268>
    caa8:	3000041e 	bne	r6,zero,cabc <__umoddi3+0x1a0>
    caac:	000b883a 	mov	r5,zero
    cab0:	01000044 	movi	r4,1
    cab4:	00022780 	call	2278 <__udivsi3>
    cab8:	1027883a 	mov	r19,r2
    cabc:	00bfffd4 	movui	r2,65535
    cac0:	14c0402e 	bgeu	r2,r19,cbc4 <__umoddi3+0x2a8>
    cac4:	00804034 	movhi	r2,256
    cac8:	10bfffc4 	addi	r2,r2,-1
    cacc:	14c0cd36 	bltu	r2,r19,ce04 <__umoddi3+0x4e8>
    cad0:	00800404 	movi	r2,16
    cad4:	9886d83a 	srl	r3,r19,r2
    cad8:	01000074 	movhi	r4,1
    cadc:	21067dc4 	addi	r4,r4,6647
    cae0:	20c7883a 	add	r3,r4,r3
    cae4:	18c00003 	ldbu	r3,0(r3)
    cae8:	1887883a 	add	r3,r3,r2
    caec:	00800804 	movi	r2,32
    caf0:	10e5c83a 	sub	r18,r2,r3
    caf4:	9000901e 	bne	r18,zero,cd38 <__umoddi3+0x41c>
    caf8:	982cd43a 	srli	r22,r19,16
    cafc:	8ce3c83a 	sub	r17,r17,r19
    cb00:	9d7fffcc 	andi	r21,r19,65535
    cb04:	b00b883a 	mov	r5,r22
    cb08:	8809883a 	mov	r4,r17
    cb0c:	00022dc0 	call	22dc <__umodsi3>
    cb10:	8809883a 	mov	r4,r17
    cb14:	b00b883a 	mov	r5,r22
    cb18:	1021883a 	mov	r16,r2
    cb1c:	00022780 	call	2278 <__udivsi3>
    cb20:	8006943a 	slli	r3,r16,16
    cb24:	a008d43a 	srli	r4,r20,16
    cb28:	1545383a 	mul	r2,r2,r21
    cb2c:	20c8b03a 	or	r4,r4,r3
    cb30:	2080042e 	bgeu	r4,r2,cb44 <__umoddi3+0x228>
    cb34:	24c9883a 	add	r4,r4,r19
    cb38:	24c00236 	bltu	r4,r19,cb44 <__umoddi3+0x228>
    cb3c:	2080012e 	bgeu	r4,r2,cb44 <__umoddi3+0x228>
    cb40:	24c9883a 	add	r4,r4,r19
    cb44:	20a1c83a 	sub	r16,r4,r2
    cb48:	b00b883a 	mov	r5,r22
    cb4c:	8009883a 	mov	r4,r16
    cb50:	00022dc0 	call	22dc <__umodsi3>
    cb54:	1023883a 	mov	r17,r2
    cb58:	b00b883a 	mov	r5,r22
    cb5c:	8009883a 	mov	r4,r16
    cb60:	00022780 	call	2278 <__udivsi3>
    cb64:	8822943a 	slli	r17,r17,16
    cb68:	1545383a 	mul	r2,r2,r21
    cb6c:	a53fffcc 	andi	r20,r20,65535
    cb70:	a446b03a 	or	r3,r20,r17
    cb74:	18bfb02e 	bgeu	r3,r2,ca38 <__alt_data_end+0xff00ca38>
    cb78:	003fab06 	br	ca28 <__alt_data_end+0xff00ca28>
    cb7c:	2005883a 	mov	r2,r4
    cb80:	2807883a 	mov	r3,r5
    cb84:	dfc00b17 	ldw	ra,44(sp)
    cb88:	df000a17 	ldw	fp,40(sp)
    cb8c:	ddc00917 	ldw	r23,36(sp)
    cb90:	dd800817 	ldw	r22,32(sp)
    cb94:	dd400717 	ldw	r21,28(sp)
    cb98:	dd000617 	ldw	r20,24(sp)
    cb9c:	dcc00517 	ldw	r19,20(sp)
    cba0:	dc800417 	ldw	r18,16(sp)
    cba4:	dc400317 	ldw	r17,12(sp)
    cba8:	dc000217 	ldw	r16,8(sp)
    cbac:	dec00c04 	addi	sp,sp,48
    cbb0:	f800283a 	ret
    cbb4:	04c03fc4 	movi	r19,255
    cbb8:	99c9803a 	cmpltu	r4,r19,r7
    cbbc:	200890fa 	slli	r4,r4,3
    cbc0:	003fa806 	br	ca64 <__alt_data_end+0xff00ca64>
    cbc4:	00803fc4 	movi	r2,255
    cbc8:	14c5803a 	cmpltu	r2,r2,r19
    cbcc:	100490fa 	slli	r2,r2,3
    cbd0:	003fc006 	br	cad4 <__alt_data_end+0xff00cad4>
    cbd4:	00804034 	movhi	r2,256
    cbd8:	10bfffc4 	addi	r2,r2,-1
    cbdc:	11808b36 	bltu	r2,r6,ce0c <__umoddi3+0x4f0>
    cbe0:	01000404 	movi	r4,16
    cbe4:	003f6406 	br	c978 <__alt_data_end+0xff00c978>
    cbe8:	34c4d83a 	srl	r2,r6,r19
    cbec:	3d0e983a 	sll	r7,r7,r20
    cbf0:	8cf8d83a 	srl	fp,r17,r19
    cbf4:	8d10983a 	sll	r8,r17,r20
    cbf8:	38aab03a 	or	r21,r7,r2
    cbfc:	a82cd43a 	srli	r22,r21,16
    cc00:	84e2d83a 	srl	r17,r16,r19
    cc04:	e009883a 	mov	r4,fp
    cc08:	b00b883a 	mov	r5,r22
    cc0c:	8a22b03a 	or	r17,r17,r8
    cc10:	3524983a 	sll	r18,r6,r20
    cc14:	00022dc0 	call	22dc <__umodsi3>
    cc18:	e009883a 	mov	r4,fp
    cc1c:	b00b883a 	mov	r5,r22
    cc20:	102f883a 	mov	r23,r2
    cc24:	00022780 	call	2278 <__udivsi3>
    cc28:	100d883a 	mov	r6,r2
    cc2c:	b808943a 	slli	r4,r23,16
    cc30:	aa3fffcc 	andi	r8,r21,65535
    cc34:	8804d43a 	srli	r2,r17,16
    cc38:	41af383a 	mul	r23,r8,r6
    cc3c:	8520983a 	sll	r16,r16,r20
    cc40:	1104b03a 	or	r2,r2,r4
    cc44:	15c0042e 	bgeu	r2,r23,cc58 <__umoddi3+0x33c>
    cc48:	1545883a 	add	r2,r2,r21
    cc4c:	30ffffc4 	addi	r3,r6,-1
    cc50:	1540742e 	bgeu	r2,r21,ce24 <__umoddi3+0x508>
    cc54:	180d883a 	mov	r6,r3
    cc58:	15efc83a 	sub	r23,r2,r23
    cc5c:	b00b883a 	mov	r5,r22
    cc60:	b809883a 	mov	r4,r23
    cc64:	d9800115 	stw	r6,4(sp)
    cc68:	da000015 	stw	r8,0(sp)
    cc6c:	00022dc0 	call	22dc <__umodsi3>
    cc70:	b00b883a 	mov	r5,r22
    cc74:	b809883a 	mov	r4,r23
    cc78:	1039883a 	mov	fp,r2
    cc7c:	00022780 	call	2278 <__udivsi3>
    cc80:	da000017 	ldw	r8,0(sp)
    cc84:	e038943a 	slli	fp,fp,16
    cc88:	100b883a 	mov	r5,r2
    cc8c:	4089383a 	mul	r4,r8,r2
    cc90:	8a3fffcc 	andi	r8,r17,65535
    cc94:	4710b03a 	or	r8,r8,fp
    cc98:	d9800117 	ldw	r6,4(sp)
    cc9c:	4100042e 	bgeu	r8,r4,ccb0 <__umoddi3+0x394>
    cca0:	4551883a 	add	r8,r8,r21
    cca4:	10bfffc4 	addi	r2,r2,-1
    cca8:	45405a2e 	bgeu	r8,r21,ce14 <__umoddi3+0x4f8>
    ccac:	100b883a 	mov	r5,r2
    ccb0:	300c943a 	slli	r6,r6,16
    ccb4:	91ffffcc 	andi	r7,r18,65535
    ccb8:	9004d43a 	srli	r2,r18,16
    ccbc:	314cb03a 	or	r6,r6,r5
    ccc0:	317fffcc 	andi	r5,r6,65535
    ccc4:	300cd43a 	srli	r6,r6,16
    ccc8:	29d3383a 	mul	r9,r5,r7
    cccc:	288b383a 	mul	r5,r5,r2
    ccd0:	31cf383a 	mul	r7,r6,r7
    ccd4:	4806d43a 	srli	r3,r9,16
    ccd8:	4111c83a 	sub	r8,r8,r4
    ccdc:	29cb883a 	add	r5,r5,r7
    cce0:	194b883a 	add	r5,r3,r5
    cce4:	3085383a 	mul	r2,r6,r2
    cce8:	29c0022e 	bgeu	r5,r7,ccf4 <__umoddi3+0x3d8>
    ccec:	00c00074 	movhi	r3,1
    ccf0:	10c5883a 	add	r2,r2,r3
    ccf4:	2808d43a 	srli	r4,r5,16
    ccf8:	280a943a 	slli	r5,r5,16
    ccfc:	4a7fffcc 	andi	r9,r9,65535
    cd00:	2085883a 	add	r2,r4,r2
    cd04:	2a4b883a 	add	r5,r5,r9
    cd08:	40803636 	bltu	r8,r2,cde4 <__umoddi3+0x4c8>
    cd0c:	40804d26 	beq	r8,r2,ce44 <__umoddi3+0x528>
    cd10:	4089c83a 	sub	r4,r8,r2
    cd14:	280f883a 	mov	r7,r5
    cd18:	81cfc83a 	sub	r7,r16,r7
    cd1c:	81c7803a 	cmpltu	r3,r16,r7
    cd20:	20c7c83a 	sub	r3,r4,r3
    cd24:	1cc4983a 	sll	r2,r3,r19
    cd28:	3d0ed83a 	srl	r7,r7,r20
    cd2c:	1d06d83a 	srl	r3,r3,r20
    cd30:	11c4b03a 	or	r2,r2,r7
    cd34:	003f9306 	br	cb84 <__alt_data_end+0xff00cb84>
    cd38:	9ca6983a 	sll	r19,r19,r18
    cd3c:	88e8d83a 	srl	r20,r17,r3
    cd40:	80c4d83a 	srl	r2,r16,r3
    cd44:	982cd43a 	srli	r22,r19,16
    cd48:	8ca2983a 	sll	r17,r17,r18
    cd4c:	a009883a 	mov	r4,r20
    cd50:	b00b883a 	mov	r5,r22
    cd54:	1478b03a 	or	fp,r2,r17
    cd58:	00022dc0 	call	22dc <__umodsi3>
    cd5c:	a009883a 	mov	r4,r20
    cd60:	b00b883a 	mov	r5,r22
    cd64:	1023883a 	mov	r17,r2
    cd68:	00022780 	call	2278 <__udivsi3>
    cd6c:	9d7fffcc 	andi	r21,r19,65535
    cd70:	880a943a 	slli	r5,r17,16
    cd74:	e008d43a 	srli	r4,fp,16
    cd78:	a885383a 	mul	r2,r21,r2
    cd7c:	84a8983a 	sll	r20,r16,r18
    cd80:	2148b03a 	or	r4,r4,r5
    cd84:	2080042e 	bgeu	r4,r2,cd98 <__umoddi3+0x47c>
    cd88:	24c9883a 	add	r4,r4,r19
    cd8c:	24c00236 	bltu	r4,r19,cd98 <__umoddi3+0x47c>
    cd90:	2080012e 	bgeu	r4,r2,cd98 <__umoddi3+0x47c>
    cd94:	24c9883a 	add	r4,r4,r19
    cd98:	20a3c83a 	sub	r17,r4,r2
    cd9c:	b00b883a 	mov	r5,r22
    cda0:	8809883a 	mov	r4,r17
    cda4:	00022dc0 	call	22dc <__umodsi3>
    cda8:	102f883a 	mov	r23,r2
    cdac:	8809883a 	mov	r4,r17
    cdb0:	b00b883a 	mov	r5,r22
    cdb4:	00022780 	call	2278 <__udivsi3>
    cdb8:	b82e943a 	slli	r23,r23,16
    cdbc:	a885383a 	mul	r2,r21,r2
    cdc0:	e13fffcc 	andi	r4,fp,65535
    cdc4:	25c8b03a 	or	r4,r4,r23
    cdc8:	2080042e 	bgeu	r4,r2,cddc <__umoddi3+0x4c0>
    cdcc:	24c9883a 	add	r4,r4,r19
    cdd0:	24c00236 	bltu	r4,r19,cddc <__umoddi3+0x4c0>
    cdd4:	2080012e 	bgeu	r4,r2,cddc <__umoddi3+0x4c0>
    cdd8:	24c9883a 	add	r4,r4,r19
    cddc:	20a3c83a 	sub	r17,r4,r2
    cde0:	003f4806 	br	cb04 <__alt_data_end+0xff00cb04>
    cde4:	2c8fc83a 	sub	r7,r5,r18
    cde8:	1545c83a 	sub	r2,r2,r21
    cdec:	29cb803a 	cmpltu	r5,r5,r7
    cdf0:	1145c83a 	sub	r2,r2,r5
    cdf4:	4089c83a 	sub	r4,r8,r2
    cdf8:	003fc706 	br	cd18 <__alt_data_end+0xff00cd18>
    cdfc:	01000604 	movi	r4,24
    ce00:	003f1806 	br	ca64 <__alt_data_end+0xff00ca64>
    ce04:	00800604 	movi	r2,24
    ce08:	003f3206 	br	cad4 <__alt_data_end+0xff00cad4>
    ce0c:	01000604 	movi	r4,24
    ce10:	003ed906 	br	c978 <__alt_data_end+0xff00c978>
    ce14:	413fa52e 	bgeu	r8,r4,ccac <__alt_data_end+0xff00ccac>
    ce18:	297fff84 	addi	r5,r5,-2
    ce1c:	4551883a 	add	r8,r8,r21
    ce20:	003fa306 	br	ccb0 <__alt_data_end+0xff00ccb0>
    ce24:	15ff8b2e 	bgeu	r2,r23,cc54 <__alt_data_end+0xff00cc54>
    ce28:	31bfff84 	addi	r6,r6,-2
    ce2c:	1545883a 	add	r2,r2,r21
    ce30:	003f8906 	br	cc58 <__alt_data_end+0xff00cc58>
    ce34:	24c9883a 	add	r4,r4,r19
    ce38:	003eee06 	br	c9f4 <__alt_data_end+0xff00c9f4>
    ce3c:	8005883a 	mov	r2,r16
    ce40:	003f1706 	br	caa0 <__alt_data_end+0xff00caa0>
    ce44:	817fe736 	bltu	r16,r5,cde4 <__alt_data_end+0xff00cde4>
    ce48:	280f883a 	mov	r7,r5
    ce4c:	0009883a 	mov	r4,zero
    ce50:	003fb106 	br	cd18 <__alt_data_end+0xff00cd18>

0000ce54 <__adddf3>:
    ce54:	02c00434 	movhi	r11,16
    ce58:	5affffc4 	addi	r11,r11,-1
    ce5c:	2806d7fa 	srli	r3,r5,31
    ce60:	2ad4703a 	and	r10,r5,r11
    ce64:	3ad2703a 	and	r9,r7,r11
    ce68:	3804d53a 	srli	r2,r7,20
    ce6c:	3018d77a 	srli	r12,r6,29
    ce70:	280ad53a 	srli	r5,r5,20
    ce74:	501490fa 	slli	r10,r10,3
    ce78:	2010d77a 	srli	r8,r4,29
    ce7c:	481290fa 	slli	r9,r9,3
    ce80:	380ed7fa 	srli	r7,r7,31
    ce84:	defffb04 	addi	sp,sp,-20
    ce88:	dc800215 	stw	r18,8(sp)
    ce8c:	dc400115 	stw	r17,4(sp)
    ce90:	dc000015 	stw	r16,0(sp)
    ce94:	dfc00415 	stw	ra,16(sp)
    ce98:	dcc00315 	stw	r19,12(sp)
    ce9c:	1c803fcc 	andi	r18,r3,255
    cea0:	2c01ffcc 	andi	r16,r5,2047
    cea4:	5210b03a 	or	r8,r10,r8
    cea8:	202290fa 	slli	r17,r4,3
    ceac:	1081ffcc 	andi	r2,r2,2047
    ceb0:	4b12b03a 	or	r9,r9,r12
    ceb4:	300c90fa 	slli	r6,r6,3
    ceb8:	91c07526 	beq	r18,r7,d090 <__adddf3+0x23c>
    cebc:	8087c83a 	sub	r3,r16,r2
    cec0:	00c0ab0e 	bge	zero,r3,d170 <__adddf3+0x31c>
    cec4:	10002a1e 	bne	r2,zero,cf70 <__adddf3+0x11c>
    cec8:	4984b03a 	or	r2,r9,r6
    cecc:	1000961e 	bne	r2,zero,d128 <__adddf3+0x2d4>
    ced0:	888001cc 	andi	r2,r17,7
    ced4:	10000726 	beq	r2,zero,cef4 <__adddf3+0xa0>
    ced8:	888003cc 	andi	r2,r17,15
    cedc:	00c00104 	movi	r3,4
    cee0:	10c00426 	beq	r2,r3,cef4 <__adddf3+0xa0>
    cee4:	88c7883a 	add	r3,r17,r3
    cee8:	1c63803a 	cmpltu	r17,r3,r17
    ceec:	4451883a 	add	r8,r8,r17
    cef0:	1823883a 	mov	r17,r3
    cef4:	4080202c 	andhi	r2,r8,128
    cef8:	10005926 	beq	r2,zero,d060 <__adddf3+0x20c>
    cefc:	84000044 	addi	r16,r16,1
    cf00:	0081ffc4 	movi	r2,2047
    cf04:	8080ba26 	beq	r16,r2,d1f0 <__adddf3+0x39c>
    cf08:	00bfe034 	movhi	r2,65408
    cf0c:	10bfffc4 	addi	r2,r2,-1
    cf10:	4090703a 	and	r8,r8,r2
    cf14:	4004977a 	slli	r2,r8,29
    cf18:	4010927a 	slli	r8,r8,9
    cf1c:	8822d0fa 	srli	r17,r17,3
    cf20:	8401ffcc 	andi	r16,r16,2047
    cf24:	4010d33a 	srli	r8,r8,12
    cf28:	9007883a 	mov	r3,r18
    cf2c:	1444b03a 	or	r2,r2,r17
    cf30:	8401ffcc 	andi	r16,r16,2047
    cf34:	8020953a 	slli	r16,r16,20
    cf38:	18c03fcc 	andi	r3,r3,255
    cf3c:	01000434 	movhi	r4,16
    cf40:	213fffc4 	addi	r4,r4,-1
    cf44:	180697fa 	slli	r3,r3,31
    cf48:	4110703a 	and	r8,r8,r4
    cf4c:	4410b03a 	or	r8,r8,r16
    cf50:	40c6b03a 	or	r3,r8,r3
    cf54:	dfc00417 	ldw	ra,16(sp)
    cf58:	dcc00317 	ldw	r19,12(sp)
    cf5c:	dc800217 	ldw	r18,8(sp)
    cf60:	dc400117 	ldw	r17,4(sp)
    cf64:	dc000017 	ldw	r16,0(sp)
    cf68:	dec00504 	addi	sp,sp,20
    cf6c:	f800283a 	ret
    cf70:	0081ffc4 	movi	r2,2047
    cf74:	80bfd626 	beq	r16,r2,ced0 <__alt_data_end+0xff00ced0>
    cf78:	4a402034 	orhi	r9,r9,128
    cf7c:	00800e04 	movi	r2,56
    cf80:	10c09f16 	blt	r2,r3,d200 <__adddf3+0x3ac>
    cf84:	008007c4 	movi	r2,31
    cf88:	10c0c216 	blt	r2,r3,d294 <__adddf3+0x440>
    cf8c:	00800804 	movi	r2,32
    cf90:	10c5c83a 	sub	r2,r2,r3
    cf94:	488a983a 	sll	r5,r9,r2
    cf98:	30c8d83a 	srl	r4,r6,r3
    cf9c:	3084983a 	sll	r2,r6,r2
    cfa0:	48c6d83a 	srl	r3,r9,r3
    cfa4:	290cb03a 	or	r6,r5,r4
    cfa8:	1004c03a 	cmpne	r2,r2,zero
    cfac:	308cb03a 	or	r6,r6,r2
    cfb0:	898dc83a 	sub	r6,r17,r6
    cfb4:	89a3803a 	cmpltu	r17,r17,r6
    cfb8:	40d1c83a 	sub	r8,r8,r3
    cfbc:	4451c83a 	sub	r8,r8,r17
    cfc0:	3023883a 	mov	r17,r6
    cfc4:	4080202c 	andhi	r2,r8,128
    cfc8:	10002326 	beq	r2,zero,d058 <__adddf3+0x204>
    cfcc:	04c02034 	movhi	r19,128
    cfd0:	9cffffc4 	addi	r19,r19,-1
    cfd4:	44e6703a 	and	r19,r8,r19
    cfd8:	98007626 	beq	r19,zero,d1b4 <__adddf3+0x360>
    cfdc:	9809883a 	mov	r4,r19
    cfe0:	0002cc40 	call	2cc4 <__clzsi2>
    cfe4:	10fffe04 	addi	r3,r2,-8
    cfe8:	010007c4 	movi	r4,31
    cfec:	20c07716 	blt	r4,r3,d1cc <__adddf3+0x378>
    cff0:	00800804 	movi	r2,32
    cff4:	10c5c83a 	sub	r2,r2,r3
    cff8:	8884d83a 	srl	r2,r17,r2
    cffc:	98d0983a 	sll	r8,r19,r3
    d000:	88e2983a 	sll	r17,r17,r3
    d004:	1204b03a 	or	r2,r2,r8
    d008:	1c007416 	blt	r3,r16,d1dc <__adddf3+0x388>
    d00c:	1c21c83a 	sub	r16,r3,r16
    d010:	82000044 	addi	r8,r16,1
    d014:	00c007c4 	movi	r3,31
    d018:	1a009116 	blt	r3,r8,d260 <__adddf3+0x40c>
    d01c:	00c00804 	movi	r3,32
    d020:	1a07c83a 	sub	r3,r3,r8
    d024:	8a08d83a 	srl	r4,r17,r8
    d028:	88e2983a 	sll	r17,r17,r3
    d02c:	10c6983a 	sll	r3,r2,r3
    d030:	1210d83a 	srl	r8,r2,r8
    d034:	8804c03a 	cmpne	r2,r17,zero
    d038:	1906b03a 	or	r3,r3,r4
    d03c:	18a2b03a 	or	r17,r3,r2
    d040:	0021883a 	mov	r16,zero
    d044:	003fa206 	br	ced0 <__alt_data_end+0xff00ced0>
    d048:	1890b03a 	or	r8,r3,r2
    d04c:	40017d26 	beq	r8,zero,d644 <__adddf3+0x7f0>
    d050:	1011883a 	mov	r8,r2
    d054:	1823883a 	mov	r17,r3
    d058:	888001cc 	andi	r2,r17,7
    d05c:	103f9e1e 	bne	r2,zero,ced8 <__alt_data_end+0xff00ced8>
    d060:	4004977a 	slli	r2,r8,29
    d064:	8822d0fa 	srli	r17,r17,3
    d068:	4010d0fa 	srli	r8,r8,3
    d06c:	9007883a 	mov	r3,r18
    d070:	1444b03a 	or	r2,r2,r17
    d074:	0101ffc4 	movi	r4,2047
    d078:	81002426 	beq	r16,r4,d10c <__adddf3+0x2b8>
    d07c:	8120703a 	and	r16,r16,r4
    d080:	01000434 	movhi	r4,16
    d084:	213fffc4 	addi	r4,r4,-1
    d088:	4110703a 	and	r8,r8,r4
    d08c:	003fa806 	br	cf30 <__alt_data_end+0xff00cf30>
    d090:	8089c83a 	sub	r4,r16,r2
    d094:	01005e0e 	bge	zero,r4,d210 <__adddf3+0x3bc>
    d098:	10002b26 	beq	r2,zero,d148 <__adddf3+0x2f4>
    d09c:	0081ffc4 	movi	r2,2047
    d0a0:	80bf8b26 	beq	r16,r2,ced0 <__alt_data_end+0xff00ced0>
    d0a4:	4a402034 	orhi	r9,r9,128
    d0a8:	00800e04 	movi	r2,56
    d0ac:	1100a40e 	bge	r2,r4,d340 <__adddf3+0x4ec>
    d0b0:	498cb03a 	or	r6,r9,r6
    d0b4:	300ac03a 	cmpne	r5,r6,zero
    d0b8:	0013883a 	mov	r9,zero
    d0bc:	2c4b883a 	add	r5,r5,r17
    d0c0:	2c63803a 	cmpltu	r17,r5,r17
    d0c4:	4a11883a 	add	r8,r9,r8
    d0c8:	8a11883a 	add	r8,r17,r8
    d0cc:	2823883a 	mov	r17,r5
    d0d0:	4080202c 	andhi	r2,r8,128
    d0d4:	103fe026 	beq	r2,zero,d058 <__alt_data_end+0xff00d058>
    d0d8:	84000044 	addi	r16,r16,1
    d0dc:	0081ffc4 	movi	r2,2047
    d0e0:	8080d226 	beq	r16,r2,d42c <__adddf3+0x5d8>
    d0e4:	00bfe034 	movhi	r2,65408
    d0e8:	10bfffc4 	addi	r2,r2,-1
    d0ec:	4090703a 	and	r8,r8,r2
    d0f0:	880ad07a 	srli	r5,r17,1
    d0f4:	400897fa 	slli	r4,r8,31
    d0f8:	88c0004c 	andi	r3,r17,1
    d0fc:	28e2b03a 	or	r17,r5,r3
    d100:	4010d07a 	srli	r8,r8,1
    d104:	2462b03a 	or	r17,r4,r17
    d108:	003f7106 	br	ced0 <__alt_data_end+0xff00ced0>
    d10c:	4088b03a 	or	r4,r8,r2
    d110:	20014526 	beq	r4,zero,d628 <__adddf3+0x7d4>
    d114:	01000434 	movhi	r4,16
    d118:	42000234 	orhi	r8,r8,8
    d11c:	213fffc4 	addi	r4,r4,-1
    d120:	4110703a 	and	r8,r8,r4
    d124:	003f8206 	br	cf30 <__alt_data_end+0xff00cf30>
    d128:	18ffffc4 	addi	r3,r3,-1
    d12c:	1800491e 	bne	r3,zero,d254 <__adddf3+0x400>
    d130:	898bc83a 	sub	r5,r17,r6
    d134:	8963803a 	cmpltu	r17,r17,r5
    d138:	4251c83a 	sub	r8,r8,r9
    d13c:	4451c83a 	sub	r8,r8,r17
    d140:	2823883a 	mov	r17,r5
    d144:	003f9f06 	br	cfc4 <__alt_data_end+0xff00cfc4>
    d148:	4984b03a 	or	r2,r9,r6
    d14c:	103f6026 	beq	r2,zero,ced0 <__alt_data_end+0xff00ced0>
    d150:	213fffc4 	addi	r4,r4,-1
    d154:	2000931e 	bne	r4,zero,d3a4 <__adddf3+0x550>
    d158:	898d883a 	add	r6,r17,r6
    d15c:	3463803a 	cmpltu	r17,r6,r17
    d160:	4251883a 	add	r8,r8,r9
    d164:	8a11883a 	add	r8,r17,r8
    d168:	3023883a 	mov	r17,r6
    d16c:	003fd806 	br	d0d0 <__alt_data_end+0xff00d0d0>
    d170:	1800541e 	bne	r3,zero,d2c4 <__adddf3+0x470>
    d174:	80800044 	addi	r2,r16,1
    d178:	1081ffcc 	andi	r2,r2,2047
    d17c:	00c00044 	movi	r3,1
    d180:	1880a00e 	bge	r3,r2,d404 <__adddf3+0x5b0>
    d184:	8989c83a 	sub	r4,r17,r6
    d188:	8905803a 	cmpltu	r2,r17,r4
    d18c:	4267c83a 	sub	r19,r8,r9
    d190:	98a7c83a 	sub	r19,r19,r2
    d194:	9880202c 	andhi	r2,r19,128
    d198:	10006326 	beq	r2,zero,d328 <__adddf3+0x4d4>
    d19c:	3463c83a 	sub	r17,r6,r17
    d1a0:	4a07c83a 	sub	r3,r9,r8
    d1a4:	344d803a 	cmpltu	r6,r6,r17
    d1a8:	19a7c83a 	sub	r19,r3,r6
    d1ac:	3825883a 	mov	r18,r7
    d1b0:	983f8a1e 	bne	r19,zero,cfdc <__alt_data_end+0xff00cfdc>
    d1b4:	8809883a 	mov	r4,r17
    d1b8:	0002cc40 	call	2cc4 <__clzsi2>
    d1bc:	10800804 	addi	r2,r2,32
    d1c0:	10fffe04 	addi	r3,r2,-8
    d1c4:	010007c4 	movi	r4,31
    d1c8:	20ff890e 	bge	r4,r3,cff0 <__alt_data_end+0xff00cff0>
    d1cc:	10bff604 	addi	r2,r2,-40
    d1d0:	8884983a 	sll	r2,r17,r2
    d1d4:	0023883a 	mov	r17,zero
    d1d8:	1c3f8c0e 	bge	r3,r16,d00c <__alt_data_end+0xff00d00c>
    d1dc:	023fe034 	movhi	r8,65408
    d1e0:	423fffc4 	addi	r8,r8,-1
    d1e4:	80e1c83a 	sub	r16,r16,r3
    d1e8:	1210703a 	and	r8,r2,r8
    d1ec:	003f3806 	br	ced0 <__alt_data_end+0xff00ced0>
    d1f0:	9007883a 	mov	r3,r18
    d1f4:	0011883a 	mov	r8,zero
    d1f8:	0005883a 	mov	r2,zero
    d1fc:	003f4c06 	br	cf30 <__alt_data_end+0xff00cf30>
    d200:	498cb03a 	or	r6,r9,r6
    d204:	300cc03a 	cmpne	r6,r6,zero
    d208:	0007883a 	mov	r3,zero
    d20c:	003f6806 	br	cfb0 <__alt_data_end+0xff00cfb0>
    d210:	20009c1e 	bne	r4,zero,d484 <__adddf3+0x630>
    d214:	80800044 	addi	r2,r16,1
    d218:	1141ffcc 	andi	r5,r2,2047
    d21c:	01000044 	movi	r4,1
    d220:	2140670e 	bge	r4,r5,d3c0 <__adddf3+0x56c>
    d224:	0101ffc4 	movi	r4,2047
    d228:	11007f26 	beq	r2,r4,d428 <__adddf3+0x5d4>
    d22c:	898d883a 	add	r6,r17,r6
    d230:	4247883a 	add	r3,r8,r9
    d234:	3451803a 	cmpltu	r8,r6,r17
    d238:	40d1883a 	add	r8,r8,r3
    d23c:	402297fa 	slli	r17,r8,31
    d240:	300cd07a 	srli	r6,r6,1
    d244:	4010d07a 	srli	r8,r8,1
    d248:	1021883a 	mov	r16,r2
    d24c:	89a2b03a 	or	r17,r17,r6
    d250:	003f1f06 	br	ced0 <__alt_data_end+0xff00ced0>
    d254:	0081ffc4 	movi	r2,2047
    d258:	80bf481e 	bne	r16,r2,cf7c <__alt_data_end+0xff00cf7c>
    d25c:	003f1c06 	br	ced0 <__alt_data_end+0xff00ced0>
    d260:	843ff844 	addi	r16,r16,-31
    d264:	01000804 	movi	r4,32
    d268:	1406d83a 	srl	r3,r2,r16
    d26c:	41005026 	beq	r8,r4,d3b0 <__adddf3+0x55c>
    d270:	01001004 	movi	r4,64
    d274:	2211c83a 	sub	r8,r4,r8
    d278:	1204983a 	sll	r2,r2,r8
    d27c:	88a2b03a 	or	r17,r17,r2
    d280:	8822c03a 	cmpne	r17,r17,zero
    d284:	1c62b03a 	or	r17,r3,r17
    d288:	0011883a 	mov	r8,zero
    d28c:	0021883a 	mov	r16,zero
    d290:	003f7106 	br	d058 <__alt_data_end+0xff00d058>
    d294:	193ff804 	addi	r4,r3,-32
    d298:	00800804 	movi	r2,32
    d29c:	4908d83a 	srl	r4,r9,r4
    d2a0:	18804526 	beq	r3,r2,d3b8 <__adddf3+0x564>
    d2a4:	00801004 	movi	r2,64
    d2a8:	10c5c83a 	sub	r2,r2,r3
    d2ac:	4886983a 	sll	r3,r9,r2
    d2b0:	198cb03a 	or	r6,r3,r6
    d2b4:	300cc03a 	cmpne	r6,r6,zero
    d2b8:	218cb03a 	or	r6,r4,r6
    d2bc:	0007883a 	mov	r3,zero
    d2c0:	003f3b06 	br	cfb0 <__alt_data_end+0xff00cfb0>
    d2c4:	80002a26 	beq	r16,zero,d370 <__adddf3+0x51c>
    d2c8:	0101ffc4 	movi	r4,2047
    d2cc:	11006826 	beq	r2,r4,d470 <__adddf3+0x61c>
    d2d0:	00c7c83a 	sub	r3,zero,r3
    d2d4:	42002034 	orhi	r8,r8,128
    d2d8:	01000e04 	movi	r4,56
    d2dc:	20c07c16 	blt	r4,r3,d4d0 <__adddf3+0x67c>
    d2e0:	010007c4 	movi	r4,31
    d2e4:	20c0da16 	blt	r4,r3,d650 <__adddf3+0x7fc>
    d2e8:	01000804 	movi	r4,32
    d2ec:	20c9c83a 	sub	r4,r4,r3
    d2f0:	4114983a 	sll	r10,r8,r4
    d2f4:	88cad83a 	srl	r5,r17,r3
    d2f8:	8908983a 	sll	r4,r17,r4
    d2fc:	40c6d83a 	srl	r3,r8,r3
    d300:	5162b03a 	or	r17,r10,r5
    d304:	2008c03a 	cmpne	r4,r4,zero
    d308:	8922b03a 	or	r17,r17,r4
    d30c:	3463c83a 	sub	r17,r6,r17
    d310:	48c7c83a 	sub	r3,r9,r3
    d314:	344d803a 	cmpltu	r6,r6,r17
    d318:	1991c83a 	sub	r8,r3,r6
    d31c:	1021883a 	mov	r16,r2
    d320:	3825883a 	mov	r18,r7
    d324:	003f2706 	br	cfc4 <__alt_data_end+0xff00cfc4>
    d328:	24d0b03a 	or	r8,r4,r19
    d32c:	40001b1e 	bne	r8,zero,d39c <__adddf3+0x548>
    d330:	0005883a 	mov	r2,zero
    d334:	0007883a 	mov	r3,zero
    d338:	0021883a 	mov	r16,zero
    d33c:	003f4d06 	br	d074 <__alt_data_end+0xff00d074>
    d340:	008007c4 	movi	r2,31
    d344:	11003c16 	blt	r2,r4,d438 <__adddf3+0x5e4>
    d348:	00800804 	movi	r2,32
    d34c:	1105c83a 	sub	r2,r2,r4
    d350:	488e983a 	sll	r7,r9,r2
    d354:	310ad83a 	srl	r5,r6,r4
    d358:	3084983a 	sll	r2,r6,r2
    d35c:	4912d83a 	srl	r9,r9,r4
    d360:	394ab03a 	or	r5,r7,r5
    d364:	1004c03a 	cmpne	r2,r2,zero
    d368:	288ab03a 	or	r5,r5,r2
    d36c:	003f5306 	br	d0bc <__alt_data_end+0xff00d0bc>
    d370:	4448b03a 	or	r4,r8,r17
    d374:	20003e26 	beq	r4,zero,d470 <__adddf3+0x61c>
    d378:	00c6303a 	nor	r3,zero,r3
    d37c:	18003a1e 	bne	r3,zero,d468 <__adddf3+0x614>
    d380:	3463c83a 	sub	r17,r6,r17
    d384:	4a07c83a 	sub	r3,r9,r8
    d388:	344d803a 	cmpltu	r6,r6,r17
    d38c:	1991c83a 	sub	r8,r3,r6
    d390:	1021883a 	mov	r16,r2
    d394:	3825883a 	mov	r18,r7
    d398:	003f0a06 	br	cfc4 <__alt_data_end+0xff00cfc4>
    d39c:	2023883a 	mov	r17,r4
    d3a0:	003f0d06 	br	cfd8 <__alt_data_end+0xff00cfd8>
    d3a4:	0081ffc4 	movi	r2,2047
    d3a8:	80bf3f1e 	bne	r16,r2,d0a8 <__alt_data_end+0xff00d0a8>
    d3ac:	003ec806 	br	ced0 <__alt_data_end+0xff00ced0>
    d3b0:	0005883a 	mov	r2,zero
    d3b4:	003fb106 	br	d27c <__alt_data_end+0xff00d27c>
    d3b8:	0007883a 	mov	r3,zero
    d3bc:	003fbc06 	br	d2b0 <__alt_data_end+0xff00d2b0>
    d3c0:	4444b03a 	or	r2,r8,r17
    d3c4:	8000871e 	bne	r16,zero,d5e4 <__adddf3+0x790>
    d3c8:	1000ba26 	beq	r2,zero,d6b4 <__adddf3+0x860>
    d3cc:	4984b03a 	or	r2,r9,r6
    d3d0:	103ebf26 	beq	r2,zero,ced0 <__alt_data_end+0xff00ced0>
    d3d4:	8985883a 	add	r2,r17,r6
    d3d8:	4247883a 	add	r3,r8,r9
    d3dc:	1451803a 	cmpltu	r8,r2,r17
    d3e0:	40d1883a 	add	r8,r8,r3
    d3e4:	40c0202c 	andhi	r3,r8,128
    d3e8:	1023883a 	mov	r17,r2
    d3ec:	183f1a26 	beq	r3,zero,d058 <__alt_data_end+0xff00d058>
    d3f0:	00bfe034 	movhi	r2,65408
    d3f4:	10bfffc4 	addi	r2,r2,-1
    d3f8:	2021883a 	mov	r16,r4
    d3fc:	4090703a 	and	r8,r8,r2
    d400:	003eb306 	br	ced0 <__alt_data_end+0xff00ced0>
    d404:	4444b03a 	or	r2,r8,r17
    d408:	8000291e 	bne	r16,zero,d4b0 <__adddf3+0x65c>
    d40c:	10004b1e 	bne	r2,zero,d53c <__adddf3+0x6e8>
    d410:	4990b03a 	or	r8,r9,r6
    d414:	40008b26 	beq	r8,zero,d644 <__adddf3+0x7f0>
    d418:	4811883a 	mov	r8,r9
    d41c:	3023883a 	mov	r17,r6
    d420:	3825883a 	mov	r18,r7
    d424:	003eaa06 	br	ced0 <__alt_data_end+0xff00ced0>
    d428:	1021883a 	mov	r16,r2
    d42c:	0011883a 	mov	r8,zero
    d430:	0005883a 	mov	r2,zero
    d434:	003f0f06 	br	d074 <__alt_data_end+0xff00d074>
    d438:	217ff804 	addi	r5,r4,-32
    d43c:	00800804 	movi	r2,32
    d440:	494ad83a 	srl	r5,r9,r5
    d444:	20807d26 	beq	r4,r2,d63c <__adddf3+0x7e8>
    d448:	00801004 	movi	r2,64
    d44c:	1109c83a 	sub	r4,r2,r4
    d450:	4912983a 	sll	r9,r9,r4
    d454:	498cb03a 	or	r6,r9,r6
    d458:	300cc03a 	cmpne	r6,r6,zero
    d45c:	298ab03a 	or	r5,r5,r6
    d460:	0013883a 	mov	r9,zero
    d464:	003f1506 	br	d0bc <__alt_data_end+0xff00d0bc>
    d468:	0101ffc4 	movi	r4,2047
    d46c:	113f9a1e 	bne	r2,r4,d2d8 <__alt_data_end+0xff00d2d8>
    d470:	4811883a 	mov	r8,r9
    d474:	3023883a 	mov	r17,r6
    d478:	1021883a 	mov	r16,r2
    d47c:	3825883a 	mov	r18,r7
    d480:	003e9306 	br	ced0 <__alt_data_end+0xff00ced0>
    d484:	8000161e 	bne	r16,zero,d4e0 <__adddf3+0x68c>
    d488:	444ab03a 	or	r5,r8,r17
    d48c:	28005126 	beq	r5,zero,d5d4 <__adddf3+0x780>
    d490:	0108303a 	nor	r4,zero,r4
    d494:	20004d1e 	bne	r4,zero,d5cc <__adddf3+0x778>
    d498:	89a3883a 	add	r17,r17,r6
    d49c:	4253883a 	add	r9,r8,r9
    d4a0:	898d803a 	cmpltu	r6,r17,r6
    d4a4:	3251883a 	add	r8,r6,r9
    d4a8:	1021883a 	mov	r16,r2
    d4ac:	003f0806 	br	d0d0 <__alt_data_end+0xff00d0d0>
    d4b0:	1000301e 	bne	r2,zero,d574 <__adddf3+0x720>
    d4b4:	4984b03a 	or	r2,r9,r6
    d4b8:	10007126 	beq	r2,zero,d680 <__adddf3+0x82c>
    d4bc:	4811883a 	mov	r8,r9
    d4c0:	3023883a 	mov	r17,r6
    d4c4:	3825883a 	mov	r18,r7
    d4c8:	0401ffc4 	movi	r16,2047
    d4cc:	003e8006 	br	ced0 <__alt_data_end+0xff00ced0>
    d4d0:	4462b03a 	or	r17,r8,r17
    d4d4:	8822c03a 	cmpne	r17,r17,zero
    d4d8:	0007883a 	mov	r3,zero
    d4dc:	003f8b06 	br	d30c <__alt_data_end+0xff00d30c>
    d4e0:	0141ffc4 	movi	r5,2047
    d4e4:	11403b26 	beq	r2,r5,d5d4 <__adddf3+0x780>
    d4e8:	0109c83a 	sub	r4,zero,r4
    d4ec:	42002034 	orhi	r8,r8,128
    d4f0:	01400e04 	movi	r5,56
    d4f4:	29006716 	blt	r5,r4,d694 <__adddf3+0x840>
    d4f8:	014007c4 	movi	r5,31
    d4fc:	29007016 	blt	r5,r4,d6c0 <__adddf3+0x86c>
    d500:	01400804 	movi	r5,32
    d504:	290bc83a 	sub	r5,r5,r4
    d508:	4154983a 	sll	r10,r8,r5
    d50c:	890ed83a 	srl	r7,r17,r4
    d510:	894a983a 	sll	r5,r17,r5
    d514:	4108d83a 	srl	r4,r8,r4
    d518:	51e2b03a 	or	r17,r10,r7
    d51c:	280ac03a 	cmpne	r5,r5,zero
    d520:	8962b03a 	or	r17,r17,r5
    d524:	89a3883a 	add	r17,r17,r6
    d528:	2253883a 	add	r9,r4,r9
    d52c:	898d803a 	cmpltu	r6,r17,r6
    d530:	3251883a 	add	r8,r6,r9
    d534:	1021883a 	mov	r16,r2
    d538:	003ee506 	br	d0d0 <__alt_data_end+0xff00d0d0>
    d53c:	4984b03a 	or	r2,r9,r6
    d540:	103e6326 	beq	r2,zero,ced0 <__alt_data_end+0xff00ced0>
    d544:	8987c83a 	sub	r3,r17,r6
    d548:	88c9803a 	cmpltu	r4,r17,r3
    d54c:	4245c83a 	sub	r2,r8,r9
    d550:	1105c83a 	sub	r2,r2,r4
    d554:	1100202c 	andhi	r4,r2,128
    d558:	203ebb26 	beq	r4,zero,d048 <__alt_data_end+0xff00d048>
    d55c:	3463c83a 	sub	r17,r6,r17
    d560:	4a07c83a 	sub	r3,r9,r8
    d564:	344d803a 	cmpltu	r6,r6,r17
    d568:	1991c83a 	sub	r8,r3,r6
    d56c:	3825883a 	mov	r18,r7
    d570:	003e5706 	br	ced0 <__alt_data_end+0xff00ced0>
    d574:	4984b03a 	or	r2,r9,r6
    d578:	10002e26 	beq	r2,zero,d634 <__adddf3+0x7e0>
    d57c:	4004d0fa 	srli	r2,r8,3
    d580:	8822d0fa 	srli	r17,r17,3
    d584:	4010977a 	slli	r8,r8,29
    d588:	10c0022c 	andhi	r3,r2,8
    d58c:	4462b03a 	or	r17,r8,r17
    d590:	18000826 	beq	r3,zero,d5b4 <__adddf3+0x760>
    d594:	4808d0fa 	srli	r4,r9,3
    d598:	20c0022c 	andhi	r3,r4,8
    d59c:	1800051e 	bne	r3,zero,d5b4 <__adddf3+0x760>
    d5a0:	300cd0fa 	srli	r6,r6,3
    d5a4:	4806977a 	slli	r3,r9,29
    d5a8:	2005883a 	mov	r2,r4
    d5ac:	3825883a 	mov	r18,r7
    d5b0:	19a2b03a 	or	r17,r3,r6
    d5b4:	8810d77a 	srli	r8,r17,29
    d5b8:	100490fa 	slli	r2,r2,3
    d5bc:	882290fa 	slli	r17,r17,3
    d5c0:	0401ffc4 	movi	r16,2047
    d5c4:	4090b03a 	or	r8,r8,r2
    d5c8:	003e4106 	br	ced0 <__alt_data_end+0xff00ced0>
    d5cc:	0141ffc4 	movi	r5,2047
    d5d0:	117fc71e 	bne	r2,r5,d4f0 <__alt_data_end+0xff00d4f0>
    d5d4:	4811883a 	mov	r8,r9
    d5d8:	3023883a 	mov	r17,r6
    d5dc:	1021883a 	mov	r16,r2
    d5e0:	003e3b06 	br	ced0 <__alt_data_end+0xff00ced0>
    d5e4:	10002f26 	beq	r2,zero,d6a4 <__adddf3+0x850>
    d5e8:	4984b03a 	or	r2,r9,r6
    d5ec:	10001126 	beq	r2,zero,d634 <__adddf3+0x7e0>
    d5f0:	4004d0fa 	srli	r2,r8,3
    d5f4:	8822d0fa 	srli	r17,r17,3
    d5f8:	4010977a 	slli	r8,r8,29
    d5fc:	10c0022c 	andhi	r3,r2,8
    d600:	4462b03a 	or	r17,r8,r17
    d604:	183feb26 	beq	r3,zero,d5b4 <__alt_data_end+0xff00d5b4>
    d608:	4808d0fa 	srli	r4,r9,3
    d60c:	20c0022c 	andhi	r3,r4,8
    d610:	183fe81e 	bne	r3,zero,d5b4 <__alt_data_end+0xff00d5b4>
    d614:	300cd0fa 	srli	r6,r6,3
    d618:	4806977a 	slli	r3,r9,29
    d61c:	2005883a 	mov	r2,r4
    d620:	19a2b03a 	or	r17,r3,r6
    d624:	003fe306 	br	d5b4 <__alt_data_end+0xff00d5b4>
    d628:	0011883a 	mov	r8,zero
    d62c:	0005883a 	mov	r2,zero
    d630:	003e3f06 	br	cf30 <__alt_data_end+0xff00cf30>
    d634:	0401ffc4 	movi	r16,2047
    d638:	003e2506 	br	ced0 <__alt_data_end+0xff00ced0>
    d63c:	0013883a 	mov	r9,zero
    d640:	003f8406 	br	d454 <__alt_data_end+0xff00d454>
    d644:	0005883a 	mov	r2,zero
    d648:	0007883a 	mov	r3,zero
    d64c:	003e8906 	br	d074 <__alt_data_end+0xff00d074>
    d650:	197ff804 	addi	r5,r3,-32
    d654:	01000804 	movi	r4,32
    d658:	414ad83a 	srl	r5,r8,r5
    d65c:	19002426 	beq	r3,r4,d6f0 <__adddf3+0x89c>
    d660:	01001004 	movi	r4,64
    d664:	20c7c83a 	sub	r3,r4,r3
    d668:	40c6983a 	sll	r3,r8,r3
    d66c:	1c46b03a 	or	r3,r3,r17
    d670:	1806c03a 	cmpne	r3,r3,zero
    d674:	28e2b03a 	or	r17,r5,r3
    d678:	0007883a 	mov	r3,zero
    d67c:	003f2306 	br	d30c <__alt_data_end+0xff00d30c>
    d680:	0007883a 	mov	r3,zero
    d684:	5811883a 	mov	r8,r11
    d688:	00bfffc4 	movi	r2,-1
    d68c:	0401ffc4 	movi	r16,2047
    d690:	003e7806 	br	d074 <__alt_data_end+0xff00d074>
    d694:	4462b03a 	or	r17,r8,r17
    d698:	8822c03a 	cmpne	r17,r17,zero
    d69c:	0009883a 	mov	r4,zero
    d6a0:	003fa006 	br	d524 <__alt_data_end+0xff00d524>
    d6a4:	4811883a 	mov	r8,r9
    d6a8:	3023883a 	mov	r17,r6
    d6ac:	0401ffc4 	movi	r16,2047
    d6b0:	003e0706 	br	ced0 <__alt_data_end+0xff00ced0>
    d6b4:	4811883a 	mov	r8,r9
    d6b8:	3023883a 	mov	r17,r6
    d6bc:	003e0406 	br	ced0 <__alt_data_end+0xff00ced0>
    d6c0:	21fff804 	addi	r7,r4,-32
    d6c4:	01400804 	movi	r5,32
    d6c8:	41ced83a 	srl	r7,r8,r7
    d6cc:	21400a26 	beq	r4,r5,d6f8 <__adddf3+0x8a4>
    d6d0:	01401004 	movi	r5,64
    d6d4:	2909c83a 	sub	r4,r5,r4
    d6d8:	4108983a 	sll	r4,r8,r4
    d6dc:	2448b03a 	or	r4,r4,r17
    d6e0:	2008c03a 	cmpne	r4,r4,zero
    d6e4:	3922b03a 	or	r17,r7,r4
    d6e8:	0009883a 	mov	r4,zero
    d6ec:	003f8d06 	br	d524 <__alt_data_end+0xff00d524>
    d6f0:	0007883a 	mov	r3,zero
    d6f4:	003fdd06 	br	d66c <__alt_data_end+0xff00d66c>
    d6f8:	0009883a 	mov	r4,zero
    d6fc:	003ff706 	br	d6dc <__alt_data_end+0xff00d6dc>

0000d700 <__eqdf2>:
    d700:	2804d53a 	srli	r2,r5,20
    d704:	3806d53a 	srli	r3,r7,20
    d708:	02000434 	movhi	r8,16
    d70c:	423fffc4 	addi	r8,r8,-1
    d710:	1081ffcc 	andi	r2,r2,2047
    d714:	0281ffc4 	movi	r10,2047
    d718:	2a12703a 	and	r9,r5,r8
    d71c:	18c1ffcc 	andi	r3,r3,2047
    d720:	3a10703a 	and	r8,r7,r8
    d724:	280ad7fa 	srli	r5,r5,31
    d728:	380ed7fa 	srli	r7,r7,31
    d72c:	12801026 	beq	r2,r10,d770 <__eqdf2+0x70>
    d730:	0281ffc4 	movi	r10,2047
    d734:	1a800a26 	beq	r3,r10,d760 <__eqdf2+0x60>
    d738:	10c00226 	beq	r2,r3,d744 <__eqdf2+0x44>
    d73c:	00800044 	movi	r2,1
    d740:	f800283a 	ret
    d744:	4a3ffd1e 	bne	r9,r8,d73c <__alt_data_end+0xff00d73c>
    d748:	21bffc1e 	bne	r4,r6,d73c <__alt_data_end+0xff00d73c>
    d74c:	29c00c26 	beq	r5,r7,d780 <__eqdf2+0x80>
    d750:	103ffa1e 	bne	r2,zero,d73c <__alt_data_end+0xff00d73c>
    d754:	2244b03a 	or	r2,r4,r9
    d758:	1004c03a 	cmpne	r2,r2,zero
    d75c:	f800283a 	ret
    d760:	3214b03a 	or	r10,r6,r8
    d764:	503ff426 	beq	r10,zero,d738 <__alt_data_end+0xff00d738>
    d768:	00800044 	movi	r2,1
    d76c:	f800283a 	ret
    d770:	2254b03a 	or	r10,r4,r9
    d774:	503fee26 	beq	r10,zero,d730 <__alt_data_end+0xff00d730>
    d778:	00800044 	movi	r2,1
    d77c:	f800283a 	ret
    d780:	0005883a 	mov	r2,zero
    d784:	f800283a 	ret

0000d788 <__gedf2>:
    d788:	2804d53a 	srli	r2,r5,20
    d78c:	3806d53a 	srli	r3,r7,20
    d790:	02000434 	movhi	r8,16
    d794:	423fffc4 	addi	r8,r8,-1
    d798:	1081ffcc 	andi	r2,r2,2047
    d79c:	0241ffc4 	movi	r9,2047
    d7a0:	2a14703a 	and	r10,r5,r8
    d7a4:	18c1ffcc 	andi	r3,r3,2047
    d7a8:	3a10703a 	and	r8,r7,r8
    d7ac:	280ad7fa 	srli	r5,r5,31
    d7b0:	380ed7fa 	srli	r7,r7,31
    d7b4:	12401d26 	beq	r2,r9,d82c <__gedf2+0xa4>
    d7b8:	0241ffc4 	movi	r9,2047
    d7bc:	1a401226 	beq	r3,r9,d808 <__gedf2+0x80>
    d7c0:	1000081e 	bne	r2,zero,d7e4 <__gedf2+0x5c>
    d7c4:	2296b03a 	or	r11,r4,r10
    d7c8:	5813003a 	cmpeq	r9,r11,zero
    d7cc:	1800091e 	bne	r3,zero,d7f4 <__gedf2+0x6c>
    d7d0:	3218b03a 	or	r12,r6,r8
    d7d4:	6000071e 	bne	r12,zero,d7f4 <__gedf2+0x6c>
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	5800101e 	bne	r11,zero,d820 <__gedf2+0x98>
    d7e0:	f800283a 	ret
    d7e4:	18000c1e 	bne	r3,zero,d818 <__gedf2+0x90>
    d7e8:	3212b03a 	or	r9,r6,r8
    d7ec:	48000c26 	beq	r9,zero,d820 <__gedf2+0x98>
    d7f0:	0013883a 	mov	r9,zero
    d7f4:	39c03fcc 	andi	r7,r7,255
    d7f8:	48000826 	beq	r9,zero,d81c <__gedf2+0x94>
    d7fc:	38000926 	beq	r7,zero,d824 <__gedf2+0x9c>
    d800:	00800044 	movi	r2,1
    d804:	f800283a 	ret
    d808:	3212b03a 	or	r9,r6,r8
    d80c:	483fec26 	beq	r9,zero,d7c0 <__alt_data_end+0xff00d7c0>
    d810:	00bfff84 	movi	r2,-2
    d814:	f800283a 	ret
    d818:	39c03fcc 	andi	r7,r7,255
    d81c:	29c00626 	beq	r5,r7,d838 <__gedf2+0xb0>
    d820:	283ff726 	beq	r5,zero,d800 <__alt_data_end+0xff00d800>
    d824:	00bfffc4 	movi	r2,-1
    d828:	f800283a 	ret
    d82c:	2292b03a 	or	r9,r4,r10
    d830:	483fe126 	beq	r9,zero,d7b8 <__alt_data_end+0xff00d7b8>
    d834:	003ff606 	br	d810 <__alt_data_end+0xff00d810>
    d838:	18bff916 	blt	r3,r2,d820 <__alt_data_end+0xff00d820>
    d83c:	10c00316 	blt	r2,r3,d84c <__gedf2+0xc4>
    d840:	42bff736 	bltu	r8,r10,d820 <__alt_data_end+0xff00d820>
    d844:	52000326 	beq	r10,r8,d854 <__gedf2+0xcc>
    d848:	5200042e 	bgeu	r10,r8,d85c <__gedf2+0xd4>
    d84c:	283fec1e 	bne	r5,zero,d800 <__alt_data_end+0xff00d800>
    d850:	003ff406 	br	d824 <__alt_data_end+0xff00d824>
    d854:	313ff236 	bltu	r6,r4,d820 <__alt_data_end+0xff00d820>
    d858:	21bffc36 	bltu	r4,r6,d84c <__alt_data_end+0xff00d84c>
    d85c:	0005883a 	mov	r2,zero
    d860:	f800283a 	ret

0000d864 <__ledf2>:
    d864:	2804d53a 	srli	r2,r5,20
    d868:	3810d53a 	srli	r8,r7,20
    d86c:	00c00434 	movhi	r3,16
    d870:	18ffffc4 	addi	r3,r3,-1
    d874:	1081ffcc 	andi	r2,r2,2047
    d878:	0241ffc4 	movi	r9,2047
    d87c:	28d4703a 	and	r10,r5,r3
    d880:	4201ffcc 	andi	r8,r8,2047
    d884:	38c6703a 	and	r3,r7,r3
    d888:	280ad7fa 	srli	r5,r5,31
    d88c:	380ed7fa 	srli	r7,r7,31
    d890:	12401f26 	beq	r2,r9,d910 <__ledf2+0xac>
    d894:	0241ffc4 	movi	r9,2047
    d898:	42401426 	beq	r8,r9,d8ec <__ledf2+0x88>
    d89c:	1000091e 	bne	r2,zero,d8c4 <__ledf2+0x60>
    d8a0:	2296b03a 	or	r11,r4,r10
    d8a4:	5813003a 	cmpeq	r9,r11,zero
    d8a8:	29403fcc 	andi	r5,r5,255
    d8ac:	40000a1e 	bne	r8,zero,d8d8 <__ledf2+0x74>
    d8b0:	30d8b03a 	or	r12,r6,r3
    d8b4:	6000081e 	bne	r12,zero,d8d8 <__ledf2+0x74>
    d8b8:	0005883a 	mov	r2,zero
    d8bc:	5800111e 	bne	r11,zero,d904 <__ledf2+0xa0>
    d8c0:	f800283a 	ret
    d8c4:	29403fcc 	andi	r5,r5,255
    d8c8:	40000c1e 	bne	r8,zero,d8fc <__ledf2+0x98>
    d8cc:	30d2b03a 	or	r9,r6,r3
    d8d0:	48000c26 	beq	r9,zero,d904 <__ledf2+0xa0>
    d8d4:	0013883a 	mov	r9,zero
    d8d8:	39c03fcc 	andi	r7,r7,255
    d8dc:	48000826 	beq	r9,zero,d900 <__ledf2+0x9c>
    d8e0:	38001126 	beq	r7,zero,d928 <__ledf2+0xc4>
    d8e4:	00800044 	movi	r2,1
    d8e8:	f800283a 	ret
    d8ec:	30d2b03a 	or	r9,r6,r3
    d8f0:	483fea26 	beq	r9,zero,d89c <__alt_data_end+0xff00d89c>
    d8f4:	00800084 	movi	r2,2
    d8f8:	f800283a 	ret
    d8fc:	39c03fcc 	andi	r7,r7,255
    d900:	39400726 	beq	r7,r5,d920 <__ledf2+0xbc>
    d904:	2800081e 	bne	r5,zero,d928 <__ledf2+0xc4>
    d908:	00800044 	movi	r2,1
    d90c:	f800283a 	ret
    d910:	2292b03a 	or	r9,r4,r10
    d914:	483fdf26 	beq	r9,zero,d894 <__alt_data_end+0xff00d894>
    d918:	00800084 	movi	r2,2
    d91c:	f800283a 	ret
    d920:	4080030e 	bge	r8,r2,d930 <__ledf2+0xcc>
    d924:	383fef26 	beq	r7,zero,d8e4 <__alt_data_end+0xff00d8e4>
    d928:	00bfffc4 	movi	r2,-1
    d92c:	f800283a 	ret
    d930:	123feb16 	blt	r2,r8,d8e0 <__alt_data_end+0xff00d8e0>
    d934:	1abff336 	bltu	r3,r10,d904 <__alt_data_end+0xff00d904>
    d938:	50c00326 	beq	r10,r3,d948 <__ledf2+0xe4>
    d93c:	50c0042e 	bgeu	r10,r3,d950 <__ledf2+0xec>
    d940:	283fe81e 	bne	r5,zero,d8e4 <__alt_data_end+0xff00d8e4>
    d944:	003ff806 	br	d928 <__alt_data_end+0xff00d928>
    d948:	313fee36 	bltu	r6,r4,d904 <__alt_data_end+0xff00d904>
    d94c:	21bffc36 	bltu	r4,r6,d940 <__alt_data_end+0xff00d940>
    d950:	0005883a 	mov	r2,zero
    d954:	f800283a 	ret

0000d958 <__muldf3>:
    d958:	defff304 	addi	sp,sp,-52
    d95c:	2804d53a 	srli	r2,r5,20
    d960:	dd800915 	stw	r22,36(sp)
    d964:	282cd7fa 	srli	r22,r5,31
    d968:	dc000315 	stw	r16,12(sp)
    d96c:	04000434 	movhi	r16,16
    d970:	dd400815 	stw	r21,32(sp)
    d974:	dc800515 	stw	r18,20(sp)
    d978:	843fffc4 	addi	r16,r16,-1
    d97c:	dfc00c15 	stw	ra,48(sp)
    d980:	df000b15 	stw	fp,44(sp)
    d984:	ddc00a15 	stw	r23,40(sp)
    d988:	dd000715 	stw	r20,28(sp)
    d98c:	dcc00615 	stw	r19,24(sp)
    d990:	dc400415 	stw	r17,16(sp)
    d994:	1481ffcc 	andi	r18,r2,2047
    d998:	2c20703a 	and	r16,r5,r16
    d99c:	b02b883a 	mov	r21,r22
    d9a0:	b2403fcc 	andi	r9,r22,255
    d9a4:	90006026 	beq	r18,zero,db28 <__muldf3+0x1d0>
    d9a8:	0081ffc4 	movi	r2,2047
    d9ac:	2029883a 	mov	r20,r4
    d9b0:	90803626 	beq	r18,r2,da8c <__muldf3+0x134>
    d9b4:	80800434 	orhi	r2,r16,16
    d9b8:	100490fa 	slli	r2,r2,3
    d9bc:	2020d77a 	srli	r16,r4,29
    d9c0:	202890fa 	slli	r20,r4,3
    d9c4:	94bf0044 	addi	r18,r18,-1023
    d9c8:	80a0b03a 	or	r16,r16,r2
    d9cc:	0027883a 	mov	r19,zero
    d9d0:	0039883a 	mov	fp,zero
    d9d4:	3804d53a 	srli	r2,r7,20
    d9d8:	382ed7fa 	srli	r23,r7,31
    d9dc:	04400434 	movhi	r17,16
    d9e0:	8c7fffc4 	addi	r17,r17,-1
    d9e4:	1081ffcc 	andi	r2,r2,2047
    d9e8:	3011883a 	mov	r8,r6
    d9ec:	3c62703a 	and	r17,r7,r17
    d9f0:	ba803fcc 	andi	r10,r23,255
    d9f4:	10006d26 	beq	r2,zero,dbac <__muldf3+0x254>
    d9f8:	00c1ffc4 	movi	r3,2047
    d9fc:	10c06526 	beq	r2,r3,db94 <__muldf3+0x23c>
    da00:	88c00434 	orhi	r3,r17,16
    da04:	180690fa 	slli	r3,r3,3
    da08:	3022d77a 	srli	r17,r6,29
    da0c:	301090fa 	slli	r8,r6,3
    da10:	10bf0044 	addi	r2,r2,-1023
    da14:	88e2b03a 	or	r17,r17,r3
    da18:	000b883a 	mov	r5,zero
    da1c:	9085883a 	add	r2,r18,r2
    da20:	2cc8b03a 	or	r4,r5,r19
    da24:	00c003c4 	movi	r3,15
    da28:	bdacf03a 	xor	r22,r23,r22
    da2c:	12c00044 	addi	r11,r2,1
    da30:	19009936 	bltu	r3,r4,dc98 <__muldf3+0x340>
    da34:	200890ba 	slli	r4,r4,2
    da38:	00c00074 	movhi	r3,1
    da3c:	18f69304 	addi	r3,r3,-9652
    da40:	20c9883a 	add	r4,r4,r3
    da44:	20c00017 	ldw	r3,0(r4)
    da48:	1800683a 	jmp	r3
    da4c:	0000dc98 	cmpnei	zero,zero,882
    da50:	0000daac 	andhi	zero,zero,874
    da54:	0000daac 	andhi	zero,zero,874
    da58:	0000daa8 	cmpgeui	zero,zero,874
    da5c:	0000dc74 	movhi	zero,881
    da60:	0000dc74 	movhi	zero,881
    da64:	0000dc5c 	xori	zero,zero,881
    da68:	0000daa8 	cmpgeui	zero,zero,874
    da6c:	0000dc74 	movhi	zero,881
    da70:	0000dc5c 	xori	zero,zero,881
    da74:	0000dc74 	movhi	zero,881
    da78:	0000daa8 	cmpgeui	zero,zero,874
    da7c:	0000dc84 	movi	zero,882
    da80:	0000dc84 	movi	zero,882
    da84:	0000dc84 	movi	zero,882
    da88:	0000dea0 	cmpeqi	zero,zero,890
    da8c:	2404b03a 	or	r2,r4,r16
    da90:	10006f1e 	bne	r2,zero,dc50 <__muldf3+0x2f8>
    da94:	04c00204 	movi	r19,8
    da98:	0021883a 	mov	r16,zero
    da9c:	0029883a 	mov	r20,zero
    daa0:	07000084 	movi	fp,2
    daa4:	003fcb06 	br	d9d4 <__alt_data_end+0xff00d9d4>
    daa8:	502d883a 	mov	r22,r10
    daac:	00800084 	movi	r2,2
    dab0:	28805726 	beq	r5,r2,dc10 <__muldf3+0x2b8>
    dab4:	008000c4 	movi	r2,3
    dab8:	28816626 	beq	r5,r2,e054 <__muldf3+0x6fc>
    dabc:	00800044 	movi	r2,1
    dac0:	2881411e 	bne	r5,r2,dfc8 <__muldf3+0x670>
    dac4:	b02b883a 	mov	r21,r22
    dac8:	0005883a 	mov	r2,zero
    dacc:	000b883a 	mov	r5,zero
    dad0:	0029883a 	mov	r20,zero
    dad4:	1004953a 	slli	r2,r2,20
    dad8:	a8c03fcc 	andi	r3,r21,255
    dadc:	04400434 	movhi	r17,16
    dae0:	8c7fffc4 	addi	r17,r17,-1
    dae4:	180697fa 	slli	r3,r3,31
    dae8:	2c4a703a 	and	r5,r5,r17
    daec:	288ab03a 	or	r5,r5,r2
    daf0:	28c6b03a 	or	r3,r5,r3
    daf4:	a005883a 	mov	r2,r20
    daf8:	dfc00c17 	ldw	ra,48(sp)
    dafc:	df000b17 	ldw	fp,44(sp)
    db00:	ddc00a17 	ldw	r23,40(sp)
    db04:	dd800917 	ldw	r22,36(sp)
    db08:	dd400817 	ldw	r21,32(sp)
    db0c:	dd000717 	ldw	r20,28(sp)
    db10:	dcc00617 	ldw	r19,24(sp)
    db14:	dc800517 	ldw	r18,20(sp)
    db18:	dc400417 	ldw	r17,16(sp)
    db1c:	dc000317 	ldw	r16,12(sp)
    db20:	dec00d04 	addi	sp,sp,52
    db24:	f800283a 	ret
    db28:	2404b03a 	or	r2,r4,r16
    db2c:	2027883a 	mov	r19,r4
    db30:	10004226 	beq	r2,zero,dc3c <__muldf3+0x2e4>
    db34:	8000fc26 	beq	r16,zero,df28 <__muldf3+0x5d0>
    db38:	8009883a 	mov	r4,r16
    db3c:	d9800215 	stw	r6,8(sp)
    db40:	d9c00015 	stw	r7,0(sp)
    db44:	da400115 	stw	r9,4(sp)
    db48:	0002cc40 	call	2cc4 <__clzsi2>
    db4c:	d9800217 	ldw	r6,8(sp)
    db50:	d9c00017 	ldw	r7,0(sp)
    db54:	da400117 	ldw	r9,4(sp)
    db58:	113ffd44 	addi	r4,r2,-11
    db5c:	00c00704 	movi	r3,28
    db60:	1900ed16 	blt	r3,r4,df18 <__muldf3+0x5c0>
    db64:	00c00744 	movi	r3,29
    db68:	147ffe04 	addi	r17,r2,-8
    db6c:	1907c83a 	sub	r3,r3,r4
    db70:	8460983a 	sll	r16,r16,r17
    db74:	98c6d83a 	srl	r3,r19,r3
    db78:	9c68983a 	sll	r20,r19,r17
    db7c:	1c20b03a 	or	r16,r3,r16
    db80:	1080fcc4 	addi	r2,r2,1011
    db84:	00a5c83a 	sub	r18,zero,r2
    db88:	0027883a 	mov	r19,zero
    db8c:	0039883a 	mov	fp,zero
    db90:	003f9006 	br	d9d4 <__alt_data_end+0xff00d9d4>
    db94:	3446b03a 	or	r3,r6,r17
    db98:	1800261e 	bne	r3,zero,dc34 <__muldf3+0x2dc>
    db9c:	0023883a 	mov	r17,zero
    dba0:	0011883a 	mov	r8,zero
    dba4:	01400084 	movi	r5,2
    dba8:	003f9c06 	br	da1c <__alt_data_end+0xff00da1c>
    dbac:	3446b03a 	or	r3,r6,r17
    dbb0:	18001c26 	beq	r3,zero,dc24 <__muldf3+0x2cc>
    dbb4:	8800ce26 	beq	r17,zero,def0 <__muldf3+0x598>
    dbb8:	8809883a 	mov	r4,r17
    dbbc:	d9800215 	stw	r6,8(sp)
    dbc0:	da400115 	stw	r9,4(sp)
    dbc4:	da800015 	stw	r10,0(sp)
    dbc8:	0002cc40 	call	2cc4 <__clzsi2>
    dbcc:	d9800217 	ldw	r6,8(sp)
    dbd0:	da400117 	ldw	r9,4(sp)
    dbd4:	da800017 	ldw	r10,0(sp)
    dbd8:	113ffd44 	addi	r4,r2,-11
    dbdc:	00c00704 	movi	r3,28
    dbe0:	1900bf16 	blt	r3,r4,dee0 <__muldf3+0x588>
    dbe4:	00c00744 	movi	r3,29
    dbe8:	123ffe04 	addi	r8,r2,-8
    dbec:	1907c83a 	sub	r3,r3,r4
    dbf0:	8a22983a 	sll	r17,r17,r8
    dbf4:	30c6d83a 	srl	r3,r6,r3
    dbf8:	3210983a 	sll	r8,r6,r8
    dbfc:	1c62b03a 	or	r17,r3,r17
    dc00:	1080fcc4 	addi	r2,r2,1011
    dc04:	0085c83a 	sub	r2,zero,r2
    dc08:	000b883a 	mov	r5,zero
    dc0c:	003f8306 	br	da1c <__alt_data_end+0xff00da1c>
    dc10:	b02b883a 	mov	r21,r22
    dc14:	0081ffc4 	movi	r2,2047
    dc18:	000b883a 	mov	r5,zero
    dc1c:	0029883a 	mov	r20,zero
    dc20:	003fac06 	br	dad4 <__alt_data_end+0xff00dad4>
    dc24:	0023883a 	mov	r17,zero
    dc28:	0011883a 	mov	r8,zero
    dc2c:	01400044 	movi	r5,1
    dc30:	003f7a06 	br	da1c <__alt_data_end+0xff00da1c>
    dc34:	014000c4 	movi	r5,3
    dc38:	003f7806 	br	da1c <__alt_data_end+0xff00da1c>
    dc3c:	04c00104 	movi	r19,4
    dc40:	0021883a 	mov	r16,zero
    dc44:	0029883a 	mov	r20,zero
    dc48:	07000044 	movi	fp,1
    dc4c:	003f6106 	br	d9d4 <__alt_data_end+0xff00d9d4>
    dc50:	04c00304 	movi	r19,12
    dc54:	070000c4 	movi	fp,3
    dc58:	003f5e06 	br	d9d4 <__alt_data_end+0xff00d9d4>
    dc5c:	01400434 	movhi	r5,16
    dc60:	002b883a 	mov	r21,zero
    dc64:	297fffc4 	addi	r5,r5,-1
    dc68:	053fffc4 	movi	r20,-1
    dc6c:	0081ffc4 	movi	r2,2047
    dc70:	003f9806 	br	dad4 <__alt_data_end+0xff00dad4>
    dc74:	8023883a 	mov	r17,r16
    dc78:	a011883a 	mov	r8,r20
    dc7c:	e00b883a 	mov	r5,fp
    dc80:	003f8a06 	br	daac <__alt_data_end+0xff00daac>
    dc84:	8023883a 	mov	r17,r16
    dc88:	a011883a 	mov	r8,r20
    dc8c:	482d883a 	mov	r22,r9
    dc90:	e00b883a 	mov	r5,fp
    dc94:	003f8506 	br	daac <__alt_data_end+0xff00daac>
    dc98:	a00ad43a 	srli	r5,r20,16
    dc9c:	401ad43a 	srli	r13,r8,16
    dca0:	a53fffcc 	andi	r20,r20,65535
    dca4:	423fffcc 	andi	r8,r8,65535
    dca8:	4519383a 	mul	r12,r8,r20
    dcac:	4147383a 	mul	r3,r8,r5
    dcb0:	6d09383a 	mul	r4,r13,r20
    dcb4:	600cd43a 	srli	r6,r12,16
    dcb8:	2b5d383a 	mul	r14,r5,r13
    dcbc:	20c9883a 	add	r4,r4,r3
    dcc0:	310d883a 	add	r6,r6,r4
    dcc4:	30c0022e 	bgeu	r6,r3,dcd0 <__muldf3+0x378>
    dcc8:	00c00074 	movhi	r3,1
    dccc:	70dd883a 	add	r14,r14,r3
    dcd0:	8826d43a 	srli	r19,r17,16
    dcd4:	8bffffcc 	andi	r15,r17,65535
    dcd8:	7d23383a 	mul	r17,r15,r20
    dcdc:	7949383a 	mul	r4,r15,r5
    dce0:	9d29383a 	mul	r20,r19,r20
    dce4:	8814d43a 	srli	r10,r17,16
    dce8:	3012943a 	slli	r9,r6,16
    dcec:	a129883a 	add	r20,r20,r4
    dcf0:	633fffcc 	andi	r12,r12,65535
    dcf4:	5515883a 	add	r10,r10,r20
    dcf8:	3006d43a 	srli	r3,r6,16
    dcfc:	4b13883a 	add	r9,r9,r12
    dd00:	2ccb383a 	mul	r5,r5,r19
    dd04:	5100022e 	bgeu	r10,r4,dd10 <__muldf3+0x3b8>
    dd08:	01000074 	movhi	r4,1
    dd0c:	290b883a 	add	r5,r5,r4
    dd10:	802ad43a 	srli	r21,r16,16
    dd14:	843fffcc 	andi	r16,r16,65535
    dd18:	440d383a 	mul	r6,r8,r16
    dd1c:	4565383a 	mul	r18,r8,r21
    dd20:	8349383a 	mul	r4,r16,r13
    dd24:	500e943a 	slli	r7,r10,16
    dd28:	3010d43a 	srli	r8,r6,16
    dd2c:	5028d43a 	srli	r20,r10,16
    dd30:	2489883a 	add	r4,r4,r18
    dd34:	8abfffcc 	andi	r10,r17,65535
    dd38:	3a95883a 	add	r10,r7,r10
    dd3c:	4119883a 	add	r12,r8,r4
    dd40:	a169883a 	add	r20,r20,r5
    dd44:	1a87883a 	add	r3,r3,r10
    dd48:	6d5b383a 	mul	r13,r13,r21
    dd4c:	6480022e 	bgeu	r12,r18,dd58 <__muldf3+0x400>
    dd50:	01000074 	movhi	r4,1
    dd54:	691b883a 	add	r13,r13,r4
    dd58:	7c25383a 	mul	r18,r15,r16
    dd5c:	7d4b383a 	mul	r5,r15,r21
    dd60:	84cf383a 	mul	r7,r16,r19
    dd64:	901ed43a 	srli	r15,r18,16
    dd68:	6008d43a 	srli	r4,r12,16
    dd6c:	6010943a 	slli	r8,r12,16
    dd70:	394f883a 	add	r7,r7,r5
    dd74:	333fffcc 	andi	r12,r6,65535
    dd78:	79df883a 	add	r15,r15,r7
    dd7c:	235b883a 	add	r13,r4,r13
    dd80:	9d63383a 	mul	r17,r19,r21
    dd84:	4309883a 	add	r4,r8,r12
    dd88:	7940022e 	bgeu	r15,r5,dd94 <__muldf3+0x43c>
    dd8c:	01400074 	movhi	r5,1
    dd90:	8963883a 	add	r17,r17,r5
    dd94:	780a943a 	slli	r5,r15,16
    dd98:	91bfffcc 	andi	r6,r18,65535
    dd9c:	70c7883a 	add	r3,r14,r3
    dda0:	298d883a 	add	r6,r5,r6
    dda4:	1a8f803a 	cmpltu	r7,r3,r10
    dda8:	350b883a 	add	r5,r6,r20
    ddac:	20c7883a 	add	r3,r4,r3
    ddb0:	3955883a 	add	r10,r7,r5
    ddb4:	1909803a 	cmpltu	r4,r3,r4
    ddb8:	6a91883a 	add	r8,r13,r10
    ddbc:	780cd43a 	srli	r6,r15,16
    ddc0:	2219883a 	add	r12,r4,r8
    ddc4:	2d0b803a 	cmpltu	r5,r5,r20
    ddc8:	51cf803a 	cmpltu	r7,r10,r7
    ddcc:	29ceb03a 	or	r7,r5,r7
    ddd0:	4351803a 	cmpltu	r8,r8,r13
    ddd4:	610b803a 	cmpltu	r5,r12,r4
    ddd8:	4148b03a 	or	r4,r8,r5
    dddc:	398f883a 	add	r7,r7,r6
    dde0:	3909883a 	add	r4,r7,r4
    dde4:	1810927a 	slli	r8,r3,9
    dde8:	2449883a 	add	r4,r4,r17
    ddec:	2008927a 	slli	r4,r4,9
    ddf0:	6022d5fa 	srli	r17,r12,23
    ddf4:	1806d5fa 	srli	r3,r3,23
    ddf8:	4252b03a 	or	r9,r8,r9
    ddfc:	600a927a 	slli	r5,r12,9
    de00:	4810c03a 	cmpne	r8,r9,zero
    de04:	2462b03a 	or	r17,r4,r17
    de08:	40c6b03a 	or	r3,r8,r3
    de0c:	8900402c 	andhi	r4,r17,256
    de10:	1950b03a 	or	r8,r3,r5
    de14:	20000726 	beq	r4,zero,de34 <__muldf3+0x4dc>
    de18:	4006d07a 	srli	r3,r8,1
    de1c:	880497fa 	slli	r2,r17,31
    de20:	4200004c 	andi	r8,r8,1
    de24:	8822d07a 	srli	r17,r17,1
    de28:	1a10b03a 	or	r8,r3,r8
    de2c:	1210b03a 	or	r8,r2,r8
    de30:	5805883a 	mov	r2,r11
    de34:	1140ffc4 	addi	r5,r2,1023
    de38:	0140440e 	bge	zero,r5,df4c <__muldf3+0x5f4>
    de3c:	40c001cc 	andi	r3,r8,7
    de40:	18000726 	beq	r3,zero,de60 <__muldf3+0x508>
    de44:	40c003cc 	andi	r3,r8,15
    de48:	01000104 	movi	r4,4
    de4c:	19000426 	beq	r3,r4,de60 <__muldf3+0x508>
    de50:	4107883a 	add	r3,r8,r4
    de54:	1a11803a 	cmpltu	r8,r3,r8
    de58:	8a23883a 	add	r17,r17,r8
    de5c:	1811883a 	mov	r8,r3
    de60:	88c0402c 	andhi	r3,r17,256
    de64:	18000426 	beq	r3,zero,de78 <__muldf3+0x520>
    de68:	11410004 	addi	r5,r2,1024
    de6c:	00bfc034 	movhi	r2,65280
    de70:	10bfffc4 	addi	r2,r2,-1
    de74:	88a2703a 	and	r17,r17,r2
    de78:	0081ff84 	movi	r2,2046
    de7c:	117f6416 	blt	r2,r5,dc10 <__alt_data_end+0xff00dc10>
    de80:	8828977a 	slli	r20,r17,29
    de84:	4010d0fa 	srli	r8,r8,3
    de88:	8822927a 	slli	r17,r17,9
    de8c:	2881ffcc 	andi	r2,r5,2047
    de90:	a228b03a 	or	r20,r20,r8
    de94:	880ad33a 	srli	r5,r17,12
    de98:	b02b883a 	mov	r21,r22
    de9c:	003f0d06 	br	dad4 <__alt_data_end+0xff00dad4>
    dea0:	8080022c 	andhi	r2,r16,8
    dea4:	10000926 	beq	r2,zero,decc <__muldf3+0x574>
    dea8:	8880022c 	andhi	r2,r17,8
    deac:	1000071e 	bne	r2,zero,decc <__muldf3+0x574>
    deb0:	00800434 	movhi	r2,16
    deb4:	89400234 	orhi	r5,r17,8
    deb8:	10bfffc4 	addi	r2,r2,-1
    debc:	b82b883a 	mov	r21,r23
    dec0:	288a703a 	and	r5,r5,r2
    dec4:	4029883a 	mov	r20,r8
    dec8:	003f6806 	br	dc6c <__alt_data_end+0xff00dc6c>
    decc:	00800434 	movhi	r2,16
    ded0:	81400234 	orhi	r5,r16,8
    ded4:	10bfffc4 	addi	r2,r2,-1
    ded8:	288a703a 	and	r5,r5,r2
    dedc:	003f6306 	br	dc6c <__alt_data_end+0xff00dc6c>
    dee0:	147ff604 	addi	r17,r2,-40
    dee4:	3462983a 	sll	r17,r6,r17
    dee8:	0011883a 	mov	r8,zero
    deec:	003f4406 	br	dc00 <__alt_data_end+0xff00dc00>
    def0:	3009883a 	mov	r4,r6
    def4:	d9800215 	stw	r6,8(sp)
    def8:	da400115 	stw	r9,4(sp)
    defc:	da800015 	stw	r10,0(sp)
    df00:	0002cc40 	call	2cc4 <__clzsi2>
    df04:	10800804 	addi	r2,r2,32
    df08:	da800017 	ldw	r10,0(sp)
    df0c:	da400117 	ldw	r9,4(sp)
    df10:	d9800217 	ldw	r6,8(sp)
    df14:	003f3006 	br	dbd8 <__alt_data_end+0xff00dbd8>
    df18:	143ff604 	addi	r16,r2,-40
    df1c:	9c20983a 	sll	r16,r19,r16
    df20:	0029883a 	mov	r20,zero
    df24:	003f1606 	br	db80 <__alt_data_end+0xff00db80>
    df28:	d9800215 	stw	r6,8(sp)
    df2c:	d9c00015 	stw	r7,0(sp)
    df30:	da400115 	stw	r9,4(sp)
    df34:	0002cc40 	call	2cc4 <__clzsi2>
    df38:	10800804 	addi	r2,r2,32
    df3c:	da400117 	ldw	r9,4(sp)
    df40:	d9c00017 	ldw	r7,0(sp)
    df44:	d9800217 	ldw	r6,8(sp)
    df48:	003f0306 	br	db58 <__alt_data_end+0xff00db58>
    df4c:	00c00044 	movi	r3,1
    df50:	1947c83a 	sub	r3,r3,r5
    df54:	00800e04 	movi	r2,56
    df58:	10feda16 	blt	r2,r3,dac4 <__alt_data_end+0xff00dac4>
    df5c:	008007c4 	movi	r2,31
    df60:	10c01b16 	blt	r2,r3,dfd0 <__muldf3+0x678>
    df64:	00800804 	movi	r2,32
    df68:	10c5c83a 	sub	r2,r2,r3
    df6c:	888a983a 	sll	r5,r17,r2
    df70:	40c8d83a 	srl	r4,r8,r3
    df74:	4084983a 	sll	r2,r8,r2
    df78:	88e2d83a 	srl	r17,r17,r3
    df7c:	2906b03a 	or	r3,r5,r4
    df80:	1004c03a 	cmpne	r2,r2,zero
    df84:	1886b03a 	or	r3,r3,r2
    df88:	188001cc 	andi	r2,r3,7
    df8c:	10000726 	beq	r2,zero,dfac <__muldf3+0x654>
    df90:	188003cc 	andi	r2,r3,15
    df94:	01000104 	movi	r4,4
    df98:	11000426 	beq	r2,r4,dfac <__muldf3+0x654>
    df9c:	1805883a 	mov	r2,r3
    dfa0:	10c00104 	addi	r3,r2,4
    dfa4:	1885803a 	cmpltu	r2,r3,r2
    dfa8:	88a3883a 	add	r17,r17,r2
    dfac:	8880202c 	andhi	r2,r17,128
    dfb0:	10001c26 	beq	r2,zero,e024 <__muldf3+0x6cc>
    dfb4:	b02b883a 	mov	r21,r22
    dfb8:	00800044 	movi	r2,1
    dfbc:	000b883a 	mov	r5,zero
    dfc0:	0029883a 	mov	r20,zero
    dfc4:	003ec306 	br	dad4 <__alt_data_end+0xff00dad4>
    dfc8:	5805883a 	mov	r2,r11
    dfcc:	003f9906 	br	de34 <__alt_data_end+0xff00de34>
    dfd0:	00bff844 	movi	r2,-31
    dfd4:	1145c83a 	sub	r2,r2,r5
    dfd8:	8888d83a 	srl	r4,r17,r2
    dfdc:	00800804 	movi	r2,32
    dfe0:	18801a26 	beq	r3,r2,e04c <__muldf3+0x6f4>
    dfe4:	00801004 	movi	r2,64
    dfe8:	10c5c83a 	sub	r2,r2,r3
    dfec:	8884983a 	sll	r2,r17,r2
    dff0:	1204b03a 	or	r2,r2,r8
    dff4:	1004c03a 	cmpne	r2,r2,zero
    dff8:	2084b03a 	or	r2,r4,r2
    dffc:	144001cc 	andi	r17,r2,7
    e000:	88000d1e 	bne	r17,zero,e038 <__muldf3+0x6e0>
    e004:	000b883a 	mov	r5,zero
    e008:	1028d0fa 	srli	r20,r2,3
    e00c:	b02b883a 	mov	r21,r22
    e010:	0005883a 	mov	r2,zero
    e014:	a468b03a 	or	r20,r20,r17
    e018:	003eae06 	br	dad4 <__alt_data_end+0xff00dad4>
    e01c:	1007883a 	mov	r3,r2
    e020:	0023883a 	mov	r17,zero
    e024:	880a927a 	slli	r5,r17,9
    e028:	1805883a 	mov	r2,r3
    e02c:	8822977a 	slli	r17,r17,29
    e030:	280ad33a 	srli	r5,r5,12
    e034:	003ff406 	br	e008 <__alt_data_end+0xff00e008>
    e038:	10c003cc 	andi	r3,r2,15
    e03c:	01000104 	movi	r4,4
    e040:	193ff626 	beq	r3,r4,e01c <__alt_data_end+0xff00e01c>
    e044:	0023883a 	mov	r17,zero
    e048:	003fd506 	br	dfa0 <__alt_data_end+0xff00dfa0>
    e04c:	0005883a 	mov	r2,zero
    e050:	003fe706 	br	dff0 <__alt_data_end+0xff00dff0>
    e054:	00800434 	movhi	r2,16
    e058:	89400234 	orhi	r5,r17,8
    e05c:	10bfffc4 	addi	r2,r2,-1
    e060:	b02b883a 	mov	r21,r22
    e064:	288a703a 	and	r5,r5,r2
    e068:	4029883a 	mov	r20,r8
    e06c:	003eff06 	br	dc6c <__alt_data_end+0xff00dc6c>

0000e070 <__subdf3>:
    e070:	02000434 	movhi	r8,16
    e074:	423fffc4 	addi	r8,r8,-1
    e078:	defffb04 	addi	sp,sp,-20
    e07c:	2a14703a 	and	r10,r5,r8
    e080:	3812d53a 	srli	r9,r7,20
    e084:	3a10703a 	and	r8,r7,r8
    e088:	2006d77a 	srli	r3,r4,29
    e08c:	3004d77a 	srli	r2,r6,29
    e090:	dc000015 	stw	r16,0(sp)
    e094:	501490fa 	slli	r10,r10,3
    e098:	2820d53a 	srli	r16,r5,20
    e09c:	401090fa 	slli	r8,r8,3
    e0a0:	dc800215 	stw	r18,8(sp)
    e0a4:	dc400115 	stw	r17,4(sp)
    e0a8:	dfc00415 	stw	ra,16(sp)
    e0ac:	202290fa 	slli	r17,r4,3
    e0b0:	dcc00315 	stw	r19,12(sp)
    e0b4:	4a41ffcc 	andi	r9,r9,2047
    e0b8:	0101ffc4 	movi	r4,2047
    e0bc:	2824d7fa 	srli	r18,r5,31
    e0c0:	8401ffcc 	andi	r16,r16,2047
    e0c4:	50c6b03a 	or	r3,r10,r3
    e0c8:	380ed7fa 	srli	r7,r7,31
    e0cc:	408ab03a 	or	r5,r8,r2
    e0d0:	300c90fa 	slli	r6,r6,3
    e0d4:	49009626 	beq	r9,r4,e330 <__subdf3+0x2c0>
    e0d8:	39c0005c 	xori	r7,r7,1
    e0dc:	8245c83a 	sub	r2,r16,r9
    e0e0:	3c807426 	beq	r7,r18,e2b4 <__subdf3+0x244>
    e0e4:	0080af0e 	bge	zero,r2,e3a4 <__subdf3+0x334>
    e0e8:	48002a1e 	bne	r9,zero,e194 <__subdf3+0x124>
    e0ec:	2988b03a 	or	r4,r5,r6
    e0f0:	20009a1e 	bne	r4,zero,e35c <__subdf3+0x2ec>
    e0f4:	888001cc 	andi	r2,r17,7
    e0f8:	10000726 	beq	r2,zero,e118 <__subdf3+0xa8>
    e0fc:	888003cc 	andi	r2,r17,15
    e100:	01000104 	movi	r4,4
    e104:	11000426 	beq	r2,r4,e118 <__subdf3+0xa8>
    e108:	890b883a 	add	r5,r17,r4
    e10c:	2c63803a 	cmpltu	r17,r5,r17
    e110:	1c47883a 	add	r3,r3,r17
    e114:	2823883a 	mov	r17,r5
    e118:	1880202c 	andhi	r2,r3,128
    e11c:	10005926 	beq	r2,zero,e284 <__subdf3+0x214>
    e120:	84000044 	addi	r16,r16,1
    e124:	0081ffc4 	movi	r2,2047
    e128:	8080be26 	beq	r16,r2,e424 <__subdf3+0x3b4>
    e12c:	017fe034 	movhi	r5,65408
    e130:	297fffc4 	addi	r5,r5,-1
    e134:	1946703a 	and	r3,r3,r5
    e138:	1804977a 	slli	r2,r3,29
    e13c:	1806927a 	slli	r3,r3,9
    e140:	8822d0fa 	srli	r17,r17,3
    e144:	8401ffcc 	andi	r16,r16,2047
    e148:	180ad33a 	srli	r5,r3,12
    e14c:	9100004c 	andi	r4,r18,1
    e150:	1444b03a 	or	r2,r2,r17
    e154:	80c1ffcc 	andi	r3,r16,2047
    e158:	1820953a 	slli	r16,r3,20
    e15c:	20c03fcc 	andi	r3,r4,255
    e160:	180897fa 	slli	r4,r3,31
    e164:	00c00434 	movhi	r3,16
    e168:	18ffffc4 	addi	r3,r3,-1
    e16c:	28c6703a 	and	r3,r5,r3
    e170:	1c06b03a 	or	r3,r3,r16
    e174:	1906b03a 	or	r3,r3,r4
    e178:	dfc00417 	ldw	ra,16(sp)
    e17c:	dcc00317 	ldw	r19,12(sp)
    e180:	dc800217 	ldw	r18,8(sp)
    e184:	dc400117 	ldw	r17,4(sp)
    e188:	dc000017 	ldw	r16,0(sp)
    e18c:	dec00504 	addi	sp,sp,20
    e190:	f800283a 	ret
    e194:	0101ffc4 	movi	r4,2047
    e198:	813fd626 	beq	r16,r4,e0f4 <__alt_data_end+0xff00e0f4>
    e19c:	29402034 	orhi	r5,r5,128
    e1a0:	01000e04 	movi	r4,56
    e1a4:	2080a316 	blt	r4,r2,e434 <__subdf3+0x3c4>
    e1a8:	010007c4 	movi	r4,31
    e1ac:	2080c616 	blt	r4,r2,e4c8 <__subdf3+0x458>
    e1b0:	01000804 	movi	r4,32
    e1b4:	2089c83a 	sub	r4,r4,r2
    e1b8:	2910983a 	sll	r8,r5,r4
    e1bc:	308ed83a 	srl	r7,r6,r2
    e1c0:	3108983a 	sll	r4,r6,r4
    e1c4:	2884d83a 	srl	r2,r5,r2
    e1c8:	41ccb03a 	or	r6,r8,r7
    e1cc:	2008c03a 	cmpne	r4,r4,zero
    e1d0:	310cb03a 	or	r6,r6,r4
    e1d4:	898dc83a 	sub	r6,r17,r6
    e1d8:	89a3803a 	cmpltu	r17,r17,r6
    e1dc:	1887c83a 	sub	r3,r3,r2
    e1e0:	1c47c83a 	sub	r3,r3,r17
    e1e4:	3023883a 	mov	r17,r6
    e1e8:	1880202c 	andhi	r2,r3,128
    e1ec:	10002326 	beq	r2,zero,e27c <__subdf3+0x20c>
    e1f0:	04c02034 	movhi	r19,128
    e1f4:	9cffffc4 	addi	r19,r19,-1
    e1f8:	1ce6703a 	and	r19,r3,r19
    e1fc:	98007a26 	beq	r19,zero,e3e8 <__subdf3+0x378>
    e200:	9809883a 	mov	r4,r19
    e204:	0002cc40 	call	2cc4 <__clzsi2>
    e208:	113ffe04 	addi	r4,r2,-8
    e20c:	00c007c4 	movi	r3,31
    e210:	19007b16 	blt	r3,r4,e400 <__subdf3+0x390>
    e214:	00800804 	movi	r2,32
    e218:	1105c83a 	sub	r2,r2,r4
    e21c:	8884d83a 	srl	r2,r17,r2
    e220:	9906983a 	sll	r3,r19,r4
    e224:	8922983a 	sll	r17,r17,r4
    e228:	10c4b03a 	or	r2,r2,r3
    e22c:	24007816 	blt	r4,r16,e410 <__subdf3+0x3a0>
    e230:	2421c83a 	sub	r16,r4,r16
    e234:	80c00044 	addi	r3,r16,1
    e238:	010007c4 	movi	r4,31
    e23c:	20c09516 	blt	r4,r3,e494 <__subdf3+0x424>
    e240:	01400804 	movi	r5,32
    e244:	28cbc83a 	sub	r5,r5,r3
    e248:	88c8d83a 	srl	r4,r17,r3
    e24c:	8962983a 	sll	r17,r17,r5
    e250:	114a983a 	sll	r5,r2,r5
    e254:	10c6d83a 	srl	r3,r2,r3
    e258:	8804c03a 	cmpne	r2,r17,zero
    e25c:	290ab03a 	or	r5,r5,r4
    e260:	28a2b03a 	or	r17,r5,r2
    e264:	0021883a 	mov	r16,zero
    e268:	003fa206 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e26c:	2090b03a 	or	r8,r4,r2
    e270:	40018e26 	beq	r8,zero,e8ac <__subdf3+0x83c>
    e274:	1007883a 	mov	r3,r2
    e278:	2023883a 	mov	r17,r4
    e27c:	888001cc 	andi	r2,r17,7
    e280:	103f9e1e 	bne	r2,zero,e0fc <__alt_data_end+0xff00e0fc>
    e284:	1804977a 	slli	r2,r3,29
    e288:	8822d0fa 	srli	r17,r17,3
    e28c:	1810d0fa 	srli	r8,r3,3
    e290:	9100004c 	andi	r4,r18,1
    e294:	1444b03a 	or	r2,r2,r17
    e298:	00c1ffc4 	movi	r3,2047
    e29c:	80c02826 	beq	r16,r3,e340 <__subdf3+0x2d0>
    e2a0:	01400434 	movhi	r5,16
    e2a4:	297fffc4 	addi	r5,r5,-1
    e2a8:	80e0703a 	and	r16,r16,r3
    e2ac:	414a703a 	and	r5,r8,r5
    e2b0:	003fa806 	br	e154 <__alt_data_end+0xff00e154>
    e2b4:	0080630e 	bge	zero,r2,e444 <__subdf3+0x3d4>
    e2b8:	48003026 	beq	r9,zero,e37c <__subdf3+0x30c>
    e2bc:	0101ffc4 	movi	r4,2047
    e2c0:	813f8c26 	beq	r16,r4,e0f4 <__alt_data_end+0xff00e0f4>
    e2c4:	29402034 	orhi	r5,r5,128
    e2c8:	01000e04 	movi	r4,56
    e2cc:	2080a90e 	bge	r4,r2,e574 <__subdf3+0x504>
    e2d0:	298cb03a 	or	r6,r5,r6
    e2d4:	3012c03a 	cmpne	r9,r6,zero
    e2d8:	0005883a 	mov	r2,zero
    e2dc:	4c53883a 	add	r9,r9,r17
    e2e0:	4c63803a 	cmpltu	r17,r9,r17
    e2e4:	10c7883a 	add	r3,r2,r3
    e2e8:	88c7883a 	add	r3,r17,r3
    e2ec:	4823883a 	mov	r17,r9
    e2f0:	1880202c 	andhi	r2,r3,128
    e2f4:	1000d026 	beq	r2,zero,e638 <__subdf3+0x5c8>
    e2f8:	84000044 	addi	r16,r16,1
    e2fc:	0081ffc4 	movi	r2,2047
    e300:	8080fe26 	beq	r16,r2,e6fc <__subdf3+0x68c>
    e304:	00bfe034 	movhi	r2,65408
    e308:	10bfffc4 	addi	r2,r2,-1
    e30c:	1886703a 	and	r3,r3,r2
    e310:	880ad07a 	srli	r5,r17,1
    e314:	180497fa 	slli	r2,r3,31
    e318:	8900004c 	andi	r4,r17,1
    e31c:	2922b03a 	or	r17,r5,r4
    e320:	1806d07a 	srli	r3,r3,1
    e324:	1462b03a 	or	r17,r2,r17
    e328:	3825883a 	mov	r18,r7
    e32c:	003f7106 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e330:	2984b03a 	or	r2,r5,r6
    e334:	103f6826 	beq	r2,zero,e0d8 <__alt_data_end+0xff00e0d8>
    e338:	39c03fcc 	andi	r7,r7,255
    e33c:	003f6706 	br	e0dc <__alt_data_end+0xff00e0dc>
    e340:	4086b03a 	or	r3,r8,r2
    e344:	18015226 	beq	r3,zero,e890 <__subdf3+0x820>
    e348:	00c00434 	movhi	r3,16
    e34c:	41400234 	orhi	r5,r8,8
    e350:	18ffffc4 	addi	r3,r3,-1
    e354:	28ca703a 	and	r5,r5,r3
    e358:	003f7e06 	br	e154 <__alt_data_end+0xff00e154>
    e35c:	10bfffc4 	addi	r2,r2,-1
    e360:	1000491e 	bne	r2,zero,e488 <__subdf3+0x418>
    e364:	898fc83a 	sub	r7,r17,r6
    e368:	89e3803a 	cmpltu	r17,r17,r7
    e36c:	1947c83a 	sub	r3,r3,r5
    e370:	1c47c83a 	sub	r3,r3,r17
    e374:	3823883a 	mov	r17,r7
    e378:	003f9b06 	br	e1e8 <__alt_data_end+0xff00e1e8>
    e37c:	2988b03a 	or	r4,r5,r6
    e380:	203f5c26 	beq	r4,zero,e0f4 <__alt_data_end+0xff00e0f4>
    e384:	10bfffc4 	addi	r2,r2,-1
    e388:	1000931e 	bne	r2,zero,e5d8 <__subdf3+0x568>
    e38c:	898d883a 	add	r6,r17,r6
    e390:	3463803a 	cmpltu	r17,r6,r17
    e394:	1947883a 	add	r3,r3,r5
    e398:	88c7883a 	add	r3,r17,r3
    e39c:	3023883a 	mov	r17,r6
    e3a0:	003fd306 	br	e2f0 <__alt_data_end+0xff00e2f0>
    e3a4:	1000541e 	bne	r2,zero,e4f8 <__subdf3+0x488>
    e3a8:	80800044 	addi	r2,r16,1
    e3ac:	1081ffcc 	andi	r2,r2,2047
    e3b0:	01000044 	movi	r4,1
    e3b4:	2080a20e 	bge	r4,r2,e640 <__subdf3+0x5d0>
    e3b8:	8989c83a 	sub	r4,r17,r6
    e3bc:	8905803a 	cmpltu	r2,r17,r4
    e3c0:	1967c83a 	sub	r19,r3,r5
    e3c4:	98a7c83a 	sub	r19,r19,r2
    e3c8:	9880202c 	andhi	r2,r19,128
    e3cc:	10006326 	beq	r2,zero,e55c <__subdf3+0x4ec>
    e3d0:	3463c83a 	sub	r17,r6,r17
    e3d4:	28c7c83a 	sub	r3,r5,r3
    e3d8:	344d803a 	cmpltu	r6,r6,r17
    e3dc:	19a7c83a 	sub	r19,r3,r6
    e3e0:	3825883a 	mov	r18,r7
    e3e4:	983f861e 	bne	r19,zero,e200 <__alt_data_end+0xff00e200>
    e3e8:	8809883a 	mov	r4,r17
    e3ec:	0002cc40 	call	2cc4 <__clzsi2>
    e3f0:	10800804 	addi	r2,r2,32
    e3f4:	113ffe04 	addi	r4,r2,-8
    e3f8:	00c007c4 	movi	r3,31
    e3fc:	193f850e 	bge	r3,r4,e214 <__alt_data_end+0xff00e214>
    e400:	10bff604 	addi	r2,r2,-40
    e404:	8884983a 	sll	r2,r17,r2
    e408:	0023883a 	mov	r17,zero
    e40c:	243f880e 	bge	r4,r16,e230 <__alt_data_end+0xff00e230>
    e410:	00ffe034 	movhi	r3,65408
    e414:	18ffffc4 	addi	r3,r3,-1
    e418:	8121c83a 	sub	r16,r16,r4
    e41c:	10c6703a 	and	r3,r2,r3
    e420:	003f3406 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e424:	9100004c 	andi	r4,r18,1
    e428:	000b883a 	mov	r5,zero
    e42c:	0005883a 	mov	r2,zero
    e430:	003f4806 	br	e154 <__alt_data_end+0xff00e154>
    e434:	298cb03a 	or	r6,r5,r6
    e438:	300cc03a 	cmpne	r6,r6,zero
    e43c:	0005883a 	mov	r2,zero
    e440:	003f6406 	br	e1d4 <__alt_data_end+0xff00e1d4>
    e444:	10009a1e 	bne	r2,zero,e6b0 <__subdf3+0x640>
    e448:	82400044 	addi	r9,r16,1
    e44c:	4881ffcc 	andi	r2,r9,2047
    e450:	02800044 	movi	r10,1
    e454:	5080670e 	bge	r10,r2,e5f4 <__subdf3+0x584>
    e458:	0081ffc4 	movi	r2,2047
    e45c:	4880af26 	beq	r9,r2,e71c <__subdf3+0x6ac>
    e460:	898d883a 	add	r6,r17,r6
    e464:	1945883a 	add	r2,r3,r5
    e468:	3447803a 	cmpltu	r3,r6,r17
    e46c:	1887883a 	add	r3,r3,r2
    e470:	182297fa 	slli	r17,r3,31
    e474:	300cd07a 	srli	r6,r6,1
    e478:	1806d07a 	srli	r3,r3,1
    e47c:	4821883a 	mov	r16,r9
    e480:	89a2b03a 	or	r17,r17,r6
    e484:	003f1b06 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e488:	0101ffc4 	movi	r4,2047
    e48c:	813f441e 	bne	r16,r4,e1a0 <__alt_data_end+0xff00e1a0>
    e490:	003f1806 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e494:	843ff844 	addi	r16,r16,-31
    e498:	01400804 	movi	r5,32
    e49c:	1408d83a 	srl	r4,r2,r16
    e4a0:	19405026 	beq	r3,r5,e5e4 <__subdf3+0x574>
    e4a4:	01401004 	movi	r5,64
    e4a8:	28c7c83a 	sub	r3,r5,r3
    e4ac:	10c4983a 	sll	r2,r2,r3
    e4b0:	88a2b03a 	or	r17,r17,r2
    e4b4:	8822c03a 	cmpne	r17,r17,zero
    e4b8:	2462b03a 	or	r17,r4,r17
    e4bc:	0007883a 	mov	r3,zero
    e4c0:	0021883a 	mov	r16,zero
    e4c4:	003f6d06 	br	e27c <__alt_data_end+0xff00e27c>
    e4c8:	11fff804 	addi	r7,r2,-32
    e4cc:	01000804 	movi	r4,32
    e4d0:	29ced83a 	srl	r7,r5,r7
    e4d4:	11004526 	beq	r2,r4,e5ec <__subdf3+0x57c>
    e4d8:	01001004 	movi	r4,64
    e4dc:	2089c83a 	sub	r4,r4,r2
    e4e0:	2904983a 	sll	r2,r5,r4
    e4e4:	118cb03a 	or	r6,r2,r6
    e4e8:	300cc03a 	cmpne	r6,r6,zero
    e4ec:	398cb03a 	or	r6,r7,r6
    e4f0:	0005883a 	mov	r2,zero
    e4f4:	003f3706 	br	e1d4 <__alt_data_end+0xff00e1d4>
    e4f8:	80002a26 	beq	r16,zero,e5a4 <__subdf3+0x534>
    e4fc:	0101ffc4 	movi	r4,2047
    e500:	49006626 	beq	r9,r4,e69c <__subdf3+0x62c>
    e504:	0085c83a 	sub	r2,zero,r2
    e508:	18c02034 	orhi	r3,r3,128
    e50c:	01000e04 	movi	r4,56
    e510:	20807e16 	blt	r4,r2,e70c <__subdf3+0x69c>
    e514:	010007c4 	movi	r4,31
    e518:	2080e716 	blt	r4,r2,e8b8 <__subdf3+0x848>
    e51c:	01000804 	movi	r4,32
    e520:	2089c83a 	sub	r4,r4,r2
    e524:	1914983a 	sll	r10,r3,r4
    e528:	8890d83a 	srl	r8,r17,r2
    e52c:	8908983a 	sll	r4,r17,r4
    e530:	1884d83a 	srl	r2,r3,r2
    e534:	5222b03a 	or	r17,r10,r8
    e538:	2006c03a 	cmpne	r3,r4,zero
    e53c:	88e2b03a 	or	r17,r17,r3
    e540:	3463c83a 	sub	r17,r6,r17
    e544:	2885c83a 	sub	r2,r5,r2
    e548:	344d803a 	cmpltu	r6,r6,r17
    e54c:	1187c83a 	sub	r3,r2,r6
    e550:	4821883a 	mov	r16,r9
    e554:	3825883a 	mov	r18,r7
    e558:	003f2306 	br	e1e8 <__alt_data_end+0xff00e1e8>
    e55c:	24d0b03a 	or	r8,r4,r19
    e560:	40001b1e 	bne	r8,zero,e5d0 <__subdf3+0x560>
    e564:	0005883a 	mov	r2,zero
    e568:	0009883a 	mov	r4,zero
    e56c:	0021883a 	mov	r16,zero
    e570:	003f4906 	br	e298 <__alt_data_end+0xff00e298>
    e574:	010007c4 	movi	r4,31
    e578:	20803a16 	blt	r4,r2,e664 <__subdf3+0x5f4>
    e57c:	01000804 	movi	r4,32
    e580:	2089c83a 	sub	r4,r4,r2
    e584:	2912983a 	sll	r9,r5,r4
    e588:	3090d83a 	srl	r8,r6,r2
    e58c:	3108983a 	sll	r4,r6,r4
    e590:	2884d83a 	srl	r2,r5,r2
    e594:	4a12b03a 	or	r9,r9,r8
    e598:	2008c03a 	cmpne	r4,r4,zero
    e59c:	4912b03a 	or	r9,r9,r4
    e5a0:	003f4e06 	br	e2dc <__alt_data_end+0xff00e2dc>
    e5a4:	1c48b03a 	or	r4,r3,r17
    e5a8:	20003c26 	beq	r4,zero,e69c <__subdf3+0x62c>
    e5ac:	0084303a 	nor	r2,zero,r2
    e5b0:	1000381e 	bne	r2,zero,e694 <__subdf3+0x624>
    e5b4:	3463c83a 	sub	r17,r6,r17
    e5b8:	28c5c83a 	sub	r2,r5,r3
    e5bc:	344d803a 	cmpltu	r6,r6,r17
    e5c0:	1187c83a 	sub	r3,r2,r6
    e5c4:	4821883a 	mov	r16,r9
    e5c8:	3825883a 	mov	r18,r7
    e5cc:	003f0606 	br	e1e8 <__alt_data_end+0xff00e1e8>
    e5d0:	2023883a 	mov	r17,r4
    e5d4:	003f0906 	br	e1fc <__alt_data_end+0xff00e1fc>
    e5d8:	0101ffc4 	movi	r4,2047
    e5dc:	813f3a1e 	bne	r16,r4,e2c8 <__alt_data_end+0xff00e2c8>
    e5e0:	003ec406 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e5e4:	0005883a 	mov	r2,zero
    e5e8:	003fb106 	br	e4b0 <__alt_data_end+0xff00e4b0>
    e5ec:	0005883a 	mov	r2,zero
    e5f0:	003fbc06 	br	e4e4 <__alt_data_end+0xff00e4e4>
    e5f4:	1c44b03a 	or	r2,r3,r17
    e5f8:	80008e1e 	bne	r16,zero,e834 <__subdf3+0x7c4>
    e5fc:	1000c826 	beq	r2,zero,e920 <__subdf3+0x8b0>
    e600:	2984b03a 	or	r2,r5,r6
    e604:	103ebb26 	beq	r2,zero,e0f4 <__alt_data_end+0xff00e0f4>
    e608:	8989883a 	add	r4,r17,r6
    e60c:	1945883a 	add	r2,r3,r5
    e610:	2447803a 	cmpltu	r3,r4,r17
    e614:	1887883a 	add	r3,r3,r2
    e618:	1880202c 	andhi	r2,r3,128
    e61c:	2023883a 	mov	r17,r4
    e620:	103f1626 	beq	r2,zero,e27c <__alt_data_end+0xff00e27c>
    e624:	00bfe034 	movhi	r2,65408
    e628:	10bfffc4 	addi	r2,r2,-1
    e62c:	5021883a 	mov	r16,r10
    e630:	1886703a 	and	r3,r3,r2
    e634:	003eaf06 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e638:	3825883a 	mov	r18,r7
    e63c:	003f0f06 	br	e27c <__alt_data_end+0xff00e27c>
    e640:	1c44b03a 	or	r2,r3,r17
    e644:	8000251e 	bne	r16,zero,e6dc <__subdf3+0x66c>
    e648:	1000661e 	bne	r2,zero,e7e4 <__subdf3+0x774>
    e64c:	2990b03a 	or	r8,r5,r6
    e650:	40009626 	beq	r8,zero,e8ac <__subdf3+0x83c>
    e654:	2807883a 	mov	r3,r5
    e658:	3023883a 	mov	r17,r6
    e65c:	3825883a 	mov	r18,r7
    e660:	003ea406 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e664:	127ff804 	addi	r9,r2,-32
    e668:	01000804 	movi	r4,32
    e66c:	2a52d83a 	srl	r9,r5,r9
    e670:	11008c26 	beq	r2,r4,e8a4 <__subdf3+0x834>
    e674:	01001004 	movi	r4,64
    e678:	2085c83a 	sub	r2,r4,r2
    e67c:	2884983a 	sll	r2,r5,r2
    e680:	118cb03a 	or	r6,r2,r6
    e684:	300cc03a 	cmpne	r6,r6,zero
    e688:	4992b03a 	or	r9,r9,r6
    e68c:	0005883a 	mov	r2,zero
    e690:	003f1206 	br	e2dc <__alt_data_end+0xff00e2dc>
    e694:	0101ffc4 	movi	r4,2047
    e698:	493f9c1e 	bne	r9,r4,e50c <__alt_data_end+0xff00e50c>
    e69c:	2807883a 	mov	r3,r5
    e6a0:	3023883a 	mov	r17,r6
    e6a4:	4821883a 	mov	r16,r9
    e6a8:	3825883a 	mov	r18,r7
    e6ac:	003e9106 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e6b0:	80001f1e 	bne	r16,zero,e730 <__subdf3+0x6c0>
    e6b4:	1c48b03a 	or	r4,r3,r17
    e6b8:	20005a26 	beq	r4,zero,e824 <__subdf3+0x7b4>
    e6bc:	0084303a 	nor	r2,zero,r2
    e6c0:	1000561e 	bne	r2,zero,e81c <__subdf3+0x7ac>
    e6c4:	89a3883a 	add	r17,r17,r6
    e6c8:	1945883a 	add	r2,r3,r5
    e6cc:	898d803a 	cmpltu	r6,r17,r6
    e6d0:	3087883a 	add	r3,r6,r2
    e6d4:	4821883a 	mov	r16,r9
    e6d8:	003f0506 	br	e2f0 <__alt_data_end+0xff00e2f0>
    e6dc:	10002b1e 	bne	r2,zero,e78c <__subdf3+0x71c>
    e6e0:	2984b03a 	or	r2,r5,r6
    e6e4:	10008026 	beq	r2,zero,e8e8 <__subdf3+0x878>
    e6e8:	2807883a 	mov	r3,r5
    e6ec:	3023883a 	mov	r17,r6
    e6f0:	3825883a 	mov	r18,r7
    e6f4:	0401ffc4 	movi	r16,2047
    e6f8:	003e7e06 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e6fc:	3809883a 	mov	r4,r7
    e700:	0011883a 	mov	r8,zero
    e704:	0005883a 	mov	r2,zero
    e708:	003ee306 	br	e298 <__alt_data_end+0xff00e298>
    e70c:	1c62b03a 	or	r17,r3,r17
    e710:	8822c03a 	cmpne	r17,r17,zero
    e714:	0005883a 	mov	r2,zero
    e718:	003f8906 	br	e540 <__alt_data_end+0xff00e540>
    e71c:	3809883a 	mov	r4,r7
    e720:	4821883a 	mov	r16,r9
    e724:	0011883a 	mov	r8,zero
    e728:	0005883a 	mov	r2,zero
    e72c:	003eda06 	br	e298 <__alt_data_end+0xff00e298>
    e730:	0101ffc4 	movi	r4,2047
    e734:	49003b26 	beq	r9,r4,e824 <__subdf3+0x7b4>
    e738:	0085c83a 	sub	r2,zero,r2
    e73c:	18c02034 	orhi	r3,r3,128
    e740:	01000e04 	movi	r4,56
    e744:	20806e16 	blt	r4,r2,e900 <__subdf3+0x890>
    e748:	010007c4 	movi	r4,31
    e74c:	20807716 	blt	r4,r2,e92c <__subdf3+0x8bc>
    e750:	01000804 	movi	r4,32
    e754:	2089c83a 	sub	r4,r4,r2
    e758:	1914983a 	sll	r10,r3,r4
    e75c:	8890d83a 	srl	r8,r17,r2
    e760:	8908983a 	sll	r4,r17,r4
    e764:	1884d83a 	srl	r2,r3,r2
    e768:	5222b03a 	or	r17,r10,r8
    e76c:	2006c03a 	cmpne	r3,r4,zero
    e770:	88e2b03a 	or	r17,r17,r3
    e774:	89a3883a 	add	r17,r17,r6
    e778:	1145883a 	add	r2,r2,r5
    e77c:	898d803a 	cmpltu	r6,r17,r6
    e780:	3087883a 	add	r3,r6,r2
    e784:	4821883a 	mov	r16,r9
    e788:	003ed906 	br	e2f0 <__alt_data_end+0xff00e2f0>
    e78c:	2984b03a 	or	r2,r5,r6
    e790:	10004226 	beq	r2,zero,e89c <__subdf3+0x82c>
    e794:	1808d0fa 	srli	r4,r3,3
    e798:	8822d0fa 	srli	r17,r17,3
    e79c:	1806977a 	slli	r3,r3,29
    e7a0:	2080022c 	andhi	r2,r4,8
    e7a4:	1c62b03a 	or	r17,r3,r17
    e7a8:	10000826 	beq	r2,zero,e7cc <__subdf3+0x75c>
    e7ac:	2812d0fa 	srli	r9,r5,3
    e7b0:	4880022c 	andhi	r2,r9,8
    e7b4:	1000051e 	bne	r2,zero,e7cc <__subdf3+0x75c>
    e7b8:	300cd0fa 	srli	r6,r6,3
    e7bc:	2804977a 	slli	r2,r5,29
    e7c0:	4809883a 	mov	r4,r9
    e7c4:	3825883a 	mov	r18,r7
    e7c8:	11a2b03a 	or	r17,r2,r6
    e7cc:	8806d77a 	srli	r3,r17,29
    e7d0:	200890fa 	slli	r4,r4,3
    e7d4:	882290fa 	slli	r17,r17,3
    e7d8:	0401ffc4 	movi	r16,2047
    e7dc:	1906b03a 	or	r3,r3,r4
    e7e0:	003e4406 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e7e4:	2984b03a 	or	r2,r5,r6
    e7e8:	103e4226 	beq	r2,zero,e0f4 <__alt_data_end+0xff00e0f4>
    e7ec:	8989c83a 	sub	r4,r17,r6
    e7f0:	8911803a 	cmpltu	r8,r17,r4
    e7f4:	1945c83a 	sub	r2,r3,r5
    e7f8:	1205c83a 	sub	r2,r2,r8
    e7fc:	1200202c 	andhi	r8,r2,128
    e800:	403e9a26 	beq	r8,zero,e26c <__alt_data_end+0xff00e26c>
    e804:	3463c83a 	sub	r17,r6,r17
    e808:	28c5c83a 	sub	r2,r5,r3
    e80c:	344d803a 	cmpltu	r6,r6,r17
    e810:	1187c83a 	sub	r3,r2,r6
    e814:	3825883a 	mov	r18,r7
    e818:	003e3606 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e81c:	0101ffc4 	movi	r4,2047
    e820:	493fc71e 	bne	r9,r4,e740 <__alt_data_end+0xff00e740>
    e824:	2807883a 	mov	r3,r5
    e828:	3023883a 	mov	r17,r6
    e82c:	4821883a 	mov	r16,r9
    e830:	003e3006 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e834:	10003626 	beq	r2,zero,e910 <__subdf3+0x8a0>
    e838:	2984b03a 	or	r2,r5,r6
    e83c:	10001726 	beq	r2,zero,e89c <__subdf3+0x82c>
    e840:	1808d0fa 	srli	r4,r3,3
    e844:	8822d0fa 	srli	r17,r17,3
    e848:	1806977a 	slli	r3,r3,29
    e84c:	2080022c 	andhi	r2,r4,8
    e850:	1c62b03a 	or	r17,r3,r17
    e854:	10000726 	beq	r2,zero,e874 <__subdf3+0x804>
    e858:	2812d0fa 	srli	r9,r5,3
    e85c:	4880022c 	andhi	r2,r9,8
    e860:	1000041e 	bne	r2,zero,e874 <__subdf3+0x804>
    e864:	300cd0fa 	srli	r6,r6,3
    e868:	2804977a 	slli	r2,r5,29
    e86c:	4809883a 	mov	r4,r9
    e870:	11a2b03a 	or	r17,r2,r6
    e874:	8806d77a 	srli	r3,r17,29
    e878:	200890fa 	slli	r4,r4,3
    e87c:	882290fa 	slli	r17,r17,3
    e880:	3825883a 	mov	r18,r7
    e884:	1906b03a 	or	r3,r3,r4
    e888:	0401ffc4 	movi	r16,2047
    e88c:	003e1906 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e890:	000b883a 	mov	r5,zero
    e894:	0005883a 	mov	r2,zero
    e898:	003e2e06 	br	e154 <__alt_data_end+0xff00e154>
    e89c:	0401ffc4 	movi	r16,2047
    e8a0:	003e1406 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e8a4:	0005883a 	mov	r2,zero
    e8a8:	003f7506 	br	e680 <__alt_data_end+0xff00e680>
    e8ac:	0005883a 	mov	r2,zero
    e8b0:	0009883a 	mov	r4,zero
    e8b4:	003e7806 	br	e298 <__alt_data_end+0xff00e298>
    e8b8:	123ff804 	addi	r8,r2,-32
    e8bc:	01000804 	movi	r4,32
    e8c0:	1a10d83a 	srl	r8,r3,r8
    e8c4:	11002526 	beq	r2,r4,e95c <__subdf3+0x8ec>
    e8c8:	01001004 	movi	r4,64
    e8cc:	2085c83a 	sub	r2,r4,r2
    e8d0:	1884983a 	sll	r2,r3,r2
    e8d4:	1444b03a 	or	r2,r2,r17
    e8d8:	1004c03a 	cmpne	r2,r2,zero
    e8dc:	40a2b03a 	or	r17,r8,r2
    e8e0:	0005883a 	mov	r2,zero
    e8e4:	003f1606 	br	e540 <__alt_data_end+0xff00e540>
    e8e8:	02000434 	movhi	r8,16
    e8ec:	0009883a 	mov	r4,zero
    e8f0:	423fffc4 	addi	r8,r8,-1
    e8f4:	00bfffc4 	movi	r2,-1
    e8f8:	0401ffc4 	movi	r16,2047
    e8fc:	003e6606 	br	e298 <__alt_data_end+0xff00e298>
    e900:	1c62b03a 	or	r17,r3,r17
    e904:	8822c03a 	cmpne	r17,r17,zero
    e908:	0005883a 	mov	r2,zero
    e90c:	003f9906 	br	e774 <__alt_data_end+0xff00e774>
    e910:	2807883a 	mov	r3,r5
    e914:	3023883a 	mov	r17,r6
    e918:	0401ffc4 	movi	r16,2047
    e91c:	003df506 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e920:	2807883a 	mov	r3,r5
    e924:	3023883a 	mov	r17,r6
    e928:	003df206 	br	e0f4 <__alt_data_end+0xff00e0f4>
    e92c:	123ff804 	addi	r8,r2,-32
    e930:	01000804 	movi	r4,32
    e934:	1a10d83a 	srl	r8,r3,r8
    e938:	11000a26 	beq	r2,r4,e964 <__subdf3+0x8f4>
    e93c:	01001004 	movi	r4,64
    e940:	2085c83a 	sub	r2,r4,r2
    e944:	1884983a 	sll	r2,r3,r2
    e948:	1444b03a 	or	r2,r2,r17
    e94c:	1004c03a 	cmpne	r2,r2,zero
    e950:	40a2b03a 	or	r17,r8,r2
    e954:	0005883a 	mov	r2,zero
    e958:	003f8606 	br	e774 <__alt_data_end+0xff00e774>
    e95c:	0005883a 	mov	r2,zero
    e960:	003fdc06 	br	e8d4 <__alt_data_end+0xff00e8d4>
    e964:	0005883a 	mov	r2,zero
    e968:	003ff706 	br	e948 <__alt_data_end+0xff00e948>

0000e96c <__fixdfsi>:
    e96c:	280cd53a 	srli	r6,r5,20
    e970:	00c00434 	movhi	r3,16
    e974:	18ffffc4 	addi	r3,r3,-1
    e978:	3181ffcc 	andi	r6,r6,2047
    e97c:	01c0ff84 	movi	r7,1022
    e980:	28c6703a 	and	r3,r5,r3
    e984:	280ad7fa 	srli	r5,r5,31
    e988:	3980120e 	bge	r7,r6,e9d4 <__fixdfsi+0x68>
    e98c:	00810744 	movi	r2,1053
    e990:	11800c16 	blt	r2,r6,e9c4 <__fixdfsi+0x58>
    e994:	00810cc4 	movi	r2,1075
    e998:	1185c83a 	sub	r2,r2,r6
    e99c:	01c007c4 	movi	r7,31
    e9a0:	18c00434 	orhi	r3,r3,16
    e9a4:	38800d16 	blt	r7,r2,e9dc <__fixdfsi+0x70>
    e9a8:	31befb44 	addi	r6,r6,-1043
    e9ac:	2084d83a 	srl	r2,r4,r2
    e9b0:	1986983a 	sll	r3,r3,r6
    e9b4:	1884b03a 	or	r2,r3,r2
    e9b8:	28000726 	beq	r5,zero,e9d8 <__fixdfsi+0x6c>
    e9bc:	0085c83a 	sub	r2,zero,r2
    e9c0:	f800283a 	ret
    e9c4:	00a00034 	movhi	r2,32768
    e9c8:	10bfffc4 	addi	r2,r2,-1
    e9cc:	2885883a 	add	r2,r5,r2
    e9d0:	f800283a 	ret
    e9d4:	0005883a 	mov	r2,zero
    e9d8:	f800283a 	ret
    e9dc:	008104c4 	movi	r2,1043
    e9e0:	1185c83a 	sub	r2,r2,r6
    e9e4:	1884d83a 	srl	r2,r3,r2
    e9e8:	003ff306 	br	e9b8 <__alt_data_end+0xff00e9b8>

0000e9ec <__floatsidf>:
    e9ec:	defffd04 	addi	sp,sp,-12
    e9f0:	dfc00215 	stw	ra,8(sp)
    e9f4:	dc400115 	stw	r17,4(sp)
    e9f8:	dc000015 	stw	r16,0(sp)
    e9fc:	20002b26 	beq	r4,zero,eaac <__floatsidf+0xc0>
    ea00:	2023883a 	mov	r17,r4
    ea04:	2020d7fa 	srli	r16,r4,31
    ea08:	20002d16 	blt	r4,zero,eac0 <__floatsidf+0xd4>
    ea0c:	8809883a 	mov	r4,r17
    ea10:	0002cc40 	call	2cc4 <__clzsi2>
    ea14:	01410784 	movi	r5,1054
    ea18:	288bc83a 	sub	r5,r5,r2
    ea1c:	01010cc4 	movi	r4,1075
    ea20:	2149c83a 	sub	r4,r4,r5
    ea24:	00c007c4 	movi	r3,31
    ea28:	1900160e 	bge	r3,r4,ea84 <__floatsidf+0x98>
    ea2c:	00c104c4 	movi	r3,1043
    ea30:	1947c83a 	sub	r3,r3,r5
    ea34:	88c6983a 	sll	r3,r17,r3
    ea38:	00800434 	movhi	r2,16
    ea3c:	10bfffc4 	addi	r2,r2,-1
    ea40:	1886703a 	and	r3,r3,r2
    ea44:	2941ffcc 	andi	r5,r5,2047
    ea48:	800d883a 	mov	r6,r16
    ea4c:	0005883a 	mov	r2,zero
    ea50:	280a953a 	slli	r5,r5,20
    ea54:	31803fcc 	andi	r6,r6,255
    ea58:	01000434 	movhi	r4,16
    ea5c:	300c97fa 	slli	r6,r6,31
    ea60:	213fffc4 	addi	r4,r4,-1
    ea64:	1906703a 	and	r3,r3,r4
    ea68:	1946b03a 	or	r3,r3,r5
    ea6c:	1986b03a 	or	r3,r3,r6
    ea70:	dfc00217 	ldw	ra,8(sp)
    ea74:	dc400117 	ldw	r17,4(sp)
    ea78:	dc000017 	ldw	r16,0(sp)
    ea7c:	dec00304 	addi	sp,sp,12
    ea80:	f800283a 	ret
    ea84:	00c002c4 	movi	r3,11
    ea88:	1887c83a 	sub	r3,r3,r2
    ea8c:	88c6d83a 	srl	r3,r17,r3
    ea90:	8904983a 	sll	r2,r17,r4
    ea94:	01000434 	movhi	r4,16
    ea98:	213fffc4 	addi	r4,r4,-1
    ea9c:	2941ffcc 	andi	r5,r5,2047
    eaa0:	1906703a 	and	r3,r3,r4
    eaa4:	800d883a 	mov	r6,r16
    eaa8:	003fe906 	br	ea50 <__alt_data_end+0xff00ea50>
    eaac:	000d883a 	mov	r6,zero
    eab0:	000b883a 	mov	r5,zero
    eab4:	0007883a 	mov	r3,zero
    eab8:	0005883a 	mov	r2,zero
    eabc:	003fe406 	br	ea50 <__alt_data_end+0xff00ea50>
    eac0:	0123c83a 	sub	r17,zero,r4
    eac4:	003fd106 	br	ea0c <__alt_data_end+0xff00ea0c>

0000eac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eac8:	defffe04 	addi	sp,sp,-8
    eacc:	dfc00115 	stw	ra,4(sp)
    ead0:	df000015 	stw	fp,0(sp)
    ead4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ead8:	d0a00b17 	ldw	r2,-32724(gp)
    eadc:	10000326 	beq	r2,zero,eaec <alt_get_errno+0x24>
    eae0:	d0a00b17 	ldw	r2,-32724(gp)
    eae4:	103ee83a 	callr	r2
    eae8:	00000106 	br	eaf0 <alt_get_errno+0x28>
    eaec:	d0a72304 	addi	r2,gp,-25460
}
    eaf0:	e037883a 	mov	sp,fp
    eaf4:	dfc00117 	ldw	ra,4(sp)
    eaf8:	df000017 	ldw	fp,0(sp)
    eafc:	dec00204 	addi	sp,sp,8
    eb00:	f800283a 	ret

0000eb04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    eb04:	defffb04 	addi	sp,sp,-20
    eb08:	dfc00415 	stw	ra,16(sp)
    eb0c:	df000315 	stw	fp,12(sp)
    eb10:	df000304 	addi	fp,sp,12
    eb14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    eb18:	e0bfff17 	ldw	r2,-4(fp)
    eb1c:	10000616 	blt	r2,zero,eb38 <close+0x34>
    eb20:	e0bfff17 	ldw	r2,-4(fp)
    eb24:	10c00324 	muli	r3,r2,12
    eb28:	00800074 	movhi	r2,1
    eb2c:	1089ae04 	addi	r2,r2,9912
    eb30:	1885883a 	add	r2,r3,r2
    eb34:	00000106 	br	eb3c <close+0x38>
    eb38:	0005883a 	mov	r2,zero
    eb3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    eb40:	e0bffd17 	ldw	r2,-12(fp)
    eb44:	10001926 	beq	r2,zero,ebac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    eb48:	e0bffd17 	ldw	r2,-12(fp)
    eb4c:	10800017 	ldw	r2,0(r2)
    eb50:	10800417 	ldw	r2,16(r2)
    eb54:	10000626 	beq	r2,zero,eb70 <close+0x6c>
    eb58:	e0bffd17 	ldw	r2,-12(fp)
    eb5c:	10800017 	ldw	r2,0(r2)
    eb60:	10800417 	ldw	r2,16(r2)
    eb64:	e13ffd17 	ldw	r4,-12(fp)
    eb68:	103ee83a 	callr	r2
    eb6c:	00000106 	br	eb74 <close+0x70>
    eb70:	0005883a 	mov	r2,zero
    eb74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    eb78:	e13fff17 	ldw	r4,-4(fp)
    eb7c:	000f1c40 	call	f1c4 <alt_release_fd>
    if (rval < 0)
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	1000070e 	bge	r2,zero,eba4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    eb88:	000eac80 	call	eac8 <alt_get_errno>
    eb8c:	1007883a 	mov	r3,r2
    eb90:	e0bffe17 	ldw	r2,-8(fp)
    eb94:	0085c83a 	sub	r2,zero,r2
    eb98:	18800015 	stw	r2,0(r3)
      return -1;
    eb9c:	00bfffc4 	movi	r2,-1
    eba0:	00000706 	br	ebc0 <close+0xbc>
    }
    return 0;
    eba4:	0005883a 	mov	r2,zero
    eba8:	00000506 	br	ebc0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ebac:	000eac80 	call	eac8 <alt_get_errno>
    ebb0:	1007883a 	mov	r3,r2
    ebb4:	00801444 	movi	r2,81
    ebb8:	18800015 	stw	r2,0(r3)
    return -1;
    ebbc:	00bfffc4 	movi	r2,-1
  }
}
    ebc0:	e037883a 	mov	sp,fp
    ebc4:	dfc00117 	ldw	ra,4(sp)
    ebc8:	df000017 	ldw	fp,0(sp)
    ebcc:	dec00204 	addi	sp,sp,8
    ebd0:	f800283a 	ret

0000ebd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ebd4:	defffc04 	addi	sp,sp,-16
    ebd8:	df000315 	stw	fp,12(sp)
    ebdc:	df000304 	addi	fp,sp,12
    ebe0:	e13ffd15 	stw	r4,-12(fp)
    ebe4:	e17ffe15 	stw	r5,-8(fp)
    ebe8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ebec:	e0bfff17 	ldw	r2,-4(fp)
}
    ebf0:	e037883a 	mov	sp,fp
    ebf4:	df000017 	ldw	fp,0(sp)
    ebf8:	dec00104 	addi	sp,sp,4
    ebfc:	f800283a 	ret

0000ec00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec00:	defffe04 	addi	sp,sp,-8
    ec04:	dfc00115 	stw	ra,4(sp)
    ec08:	df000015 	stw	fp,0(sp)
    ec0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec10:	d0a00b17 	ldw	r2,-32724(gp)
    ec14:	10000326 	beq	r2,zero,ec24 <alt_get_errno+0x24>
    ec18:	d0a00b17 	ldw	r2,-32724(gp)
    ec1c:	103ee83a 	callr	r2
    ec20:	00000106 	br	ec28 <alt_get_errno+0x28>
    ec24:	d0a72304 	addi	r2,gp,-25460
}
    ec28:	e037883a 	mov	sp,fp
    ec2c:	dfc00117 	ldw	ra,4(sp)
    ec30:	df000017 	ldw	fp,0(sp)
    ec34:	dec00204 	addi	sp,sp,8
    ec38:	f800283a 	ret

0000ec3c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ec3c:	defffb04 	addi	sp,sp,-20
    ec40:	dfc00415 	stw	ra,16(sp)
    ec44:	df000315 	stw	fp,12(sp)
    ec48:	df000304 	addi	fp,sp,12
    ec4c:	e13ffe15 	stw	r4,-8(fp)
    ec50:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec54:	e0bffe17 	ldw	r2,-8(fp)
    ec58:	10000616 	blt	r2,zero,ec74 <fstat+0x38>
    ec5c:	e0bffe17 	ldw	r2,-8(fp)
    ec60:	10c00324 	muli	r3,r2,12
    ec64:	00800074 	movhi	r2,1
    ec68:	1089ae04 	addi	r2,r2,9912
    ec6c:	1885883a 	add	r2,r3,r2
    ec70:	00000106 	br	ec78 <fstat+0x3c>
    ec74:	0005883a 	mov	r2,zero
    ec78:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ec7c:	e0bffd17 	ldw	r2,-12(fp)
    ec80:	10001026 	beq	r2,zero,ecc4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ec84:	e0bffd17 	ldw	r2,-12(fp)
    ec88:	10800017 	ldw	r2,0(r2)
    ec8c:	10800817 	ldw	r2,32(r2)
    ec90:	10000726 	beq	r2,zero,ecb0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ec94:	e0bffd17 	ldw	r2,-12(fp)
    ec98:	10800017 	ldw	r2,0(r2)
    ec9c:	10800817 	ldw	r2,32(r2)
    eca0:	e17fff17 	ldw	r5,-4(fp)
    eca4:	e13ffd17 	ldw	r4,-12(fp)
    eca8:	103ee83a 	callr	r2
    ecac:	00000a06 	br	ecd8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ecb0:	e0bfff17 	ldw	r2,-4(fp)
    ecb4:	00c80004 	movi	r3,8192
    ecb8:	10c00115 	stw	r3,4(r2)
      return 0;
    ecbc:	0005883a 	mov	r2,zero
    ecc0:	00000506 	br	ecd8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ecc4:	000ec000 	call	ec00 <alt_get_errno>
    ecc8:	1007883a 	mov	r3,r2
    eccc:	00801444 	movi	r2,81
    ecd0:	18800015 	stw	r2,0(r3)
    return -1;
    ecd4:	00bfffc4 	movi	r2,-1
  }
}
    ecd8:	e037883a 	mov	sp,fp
    ecdc:	dfc00117 	ldw	ra,4(sp)
    ece0:	df000017 	ldw	fp,0(sp)
    ece4:	dec00204 	addi	sp,sp,8
    ece8:	f800283a 	ret

0000ecec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ecec:	defffe04 	addi	sp,sp,-8
    ecf0:	dfc00115 	stw	ra,4(sp)
    ecf4:	df000015 	stw	fp,0(sp)
    ecf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ecfc:	d0a00b17 	ldw	r2,-32724(gp)
    ed00:	10000326 	beq	r2,zero,ed10 <alt_get_errno+0x24>
    ed04:	d0a00b17 	ldw	r2,-32724(gp)
    ed08:	103ee83a 	callr	r2
    ed0c:	00000106 	br	ed14 <alt_get_errno+0x28>
    ed10:	d0a72304 	addi	r2,gp,-25460
}
    ed14:	e037883a 	mov	sp,fp
    ed18:	dfc00117 	ldw	ra,4(sp)
    ed1c:	df000017 	ldw	fp,0(sp)
    ed20:	dec00204 	addi	sp,sp,8
    ed24:	f800283a 	ret

0000ed28 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ed28:	deffed04 	addi	sp,sp,-76
    ed2c:	dfc01215 	stw	ra,72(sp)
    ed30:	df001115 	stw	fp,68(sp)
    ed34:	df001104 	addi	fp,sp,68
    ed38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed3c:	e0bfff17 	ldw	r2,-4(fp)
    ed40:	10000616 	blt	r2,zero,ed5c <isatty+0x34>
    ed44:	e0bfff17 	ldw	r2,-4(fp)
    ed48:	10c00324 	muli	r3,r2,12
    ed4c:	00800074 	movhi	r2,1
    ed50:	1089ae04 	addi	r2,r2,9912
    ed54:	1885883a 	add	r2,r3,r2
    ed58:	00000106 	br	ed60 <isatty+0x38>
    ed5c:	0005883a 	mov	r2,zero
    ed60:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ed64:	e0bfef17 	ldw	r2,-68(fp)
    ed68:	10000e26 	beq	r2,zero,eda4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ed6c:	e0bfef17 	ldw	r2,-68(fp)
    ed70:	10800017 	ldw	r2,0(r2)
    ed74:	10800817 	ldw	r2,32(r2)
    ed78:	1000021e 	bne	r2,zero,ed84 <isatty+0x5c>
    {
      return 1;
    ed7c:	00800044 	movi	r2,1
    ed80:	00000d06 	br	edb8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ed84:	e0bff004 	addi	r2,fp,-64
    ed88:	100b883a 	mov	r5,r2
    ed8c:	e13fff17 	ldw	r4,-4(fp)
    ed90:	000ec3c0 	call	ec3c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ed94:	e0bff117 	ldw	r2,-60(fp)
    ed98:	10880020 	cmpeqi	r2,r2,8192
    ed9c:	10803fcc 	andi	r2,r2,255
    eda0:	00000506 	br	edb8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eda4:	000ecec0 	call	ecec <alt_get_errno>
    eda8:	1007883a 	mov	r3,r2
    edac:	00801444 	movi	r2,81
    edb0:	18800015 	stw	r2,0(r3)
    return 0;
    edb4:	0005883a 	mov	r2,zero
  }
}
    edb8:	e037883a 	mov	sp,fp
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	df000017 	ldw	fp,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    edcc:	defffc04 	addi	sp,sp,-16
    edd0:	df000315 	stw	fp,12(sp)
    edd4:	df000304 	addi	fp,sp,12
    edd8:	e13ffd15 	stw	r4,-12(fp)
    eddc:	e17ffe15 	stw	r5,-8(fp)
    ede0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ede4:	e0fffe17 	ldw	r3,-8(fp)
    ede8:	e0bffd17 	ldw	r2,-12(fp)
    edec:	18800c26 	beq	r3,r2,ee20 <alt_load_section+0x54>
  {
    while( to != end )
    edf0:	00000806 	br	ee14 <alt_load_section+0x48>
    {
      *to++ = *from++;
    edf4:	e0bffe17 	ldw	r2,-8(fp)
    edf8:	10c00104 	addi	r3,r2,4
    edfc:	e0fffe15 	stw	r3,-8(fp)
    ee00:	e0fffd17 	ldw	r3,-12(fp)
    ee04:	19000104 	addi	r4,r3,4
    ee08:	e13ffd15 	stw	r4,-12(fp)
    ee0c:	18c00017 	ldw	r3,0(r3)
    ee10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ee14:	e0fffe17 	ldw	r3,-8(fp)
    ee18:	e0bfff17 	ldw	r2,-4(fp)
    ee1c:	18bff51e 	bne	r3,r2,edf4 <__alt_data_end+0xff00edf4>
    {
      *to++ = *from++;
    }
  }
}
    ee20:	0001883a 	nop
    ee24:	e037883a 	mov	sp,fp
    ee28:	df000017 	ldw	fp,0(sp)
    ee2c:	dec00104 	addi	sp,sp,4
    ee30:	f800283a 	ret

0000ee34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ee34:	defffe04 	addi	sp,sp,-8
    ee38:	dfc00115 	stw	ra,4(sp)
    ee3c:	df000015 	stw	fp,0(sp)
    ee40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ee44:	01800074 	movhi	r6,1
    ee48:	318e3604 	addi	r6,r6,14552
    ee4c:	01400074 	movhi	r5,1
    ee50:	29473b04 	addi	r5,r5,7404
    ee54:	01000074 	movhi	r4,1
    ee58:	210e3604 	addi	r4,r4,14552
    ee5c:	000edcc0 	call	edcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ee60:	01800034 	movhi	r6,0
    ee64:	31809104 	addi	r6,r6,580
    ee68:	01400034 	movhi	r5,0
    ee6c:	29400804 	addi	r5,r5,32
    ee70:	01000034 	movhi	r4,0
    ee74:	21000804 	addi	r4,r4,32
    ee78:	000edcc0 	call	edcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ee7c:	01800074 	movhi	r6,1
    ee80:	31873b04 	addi	r6,r6,7404
    ee84:	01400074 	movhi	r5,1
    ee88:	29454c04 	addi	r5,r5,5424
    ee8c:	01000074 	movhi	r4,1
    ee90:	21054c04 	addi	r4,r4,5424
    ee94:	000edcc0 	call	edcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ee98:	001041c0 	call	1041c <alt_dcache_flush_all>
  alt_icache_flush_all();
    ee9c:	00106040 	call	10604 <alt_icache_flush_all>
}
    eea0:	0001883a 	nop
    eea4:	e037883a 	mov	sp,fp
    eea8:	dfc00117 	ldw	ra,4(sp)
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00204 	addi	sp,sp,8
    eeb4:	f800283a 	ret

0000eeb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eeb8:	defffe04 	addi	sp,sp,-8
    eebc:	dfc00115 	stw	ra,4(sp)
    eec0:	df000015 	stw	fp,0(sp)
    eec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eec8:	d0a00b17 	ldw	r2,-32724(gp)
    eecc:	10000326 	beq	r2,zero,eedc <alt_get_errno+0x24>
    eed0:	d0a00b17 	ldw	r2,-32724(gp)
    eed4:	103ee83a 	callr	r2
    eed8:	00000106 	br	eee0 <alt_get_errno+0x28>
    eedc:	d0a72304 	addi	r2,gp,-25460
}
    eee0:	e037883a 	mov	sp,fp
    eee4:	dfc00117 	ldw	ra,4(sp)
    eee8:	df000017 	ldw	fp,0(sp)
    eeec:	dec00204 	addi	sp,sp,8
    eef0:	f800283a 	ret

0000eef4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    eef4:	defff904 	addi	sp,sp,-28
    eef8:	dfc00615 	stw	ra,24(sp)
    eefc:	df000515 	stw	fp,20(sp)
    ef00:	df000504 	addi	fp,sp,20
    ef04:	e13ffd15 	stw	r4,-12(fp)
    ef08:	e17ffe15 	stw	r5,-8(fp)
    ef0c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ef10:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef14:	e0bffd17 	ldw	r2,-12(fp)
    ef18:	10000616 	blt	r2,zero,ef34 <lseek+0x40>
    ef1c:	e0bffd17 	ldw	r2,-12(fp)
    ef20:	10c00324 	muli	r3,r2,12
    ef24:	00800074 	movhi	r2,1
    ef28:	1089ae04 	addi	r2,r2,9912
    ef2c:	1885883a 	add	r2,r3,r2
    ef30:	00000106 	br	ef38 <lseek+0x44>
    ef34:	0005883a 	mov	r2,zero
    ef38:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ef3c:	e0bffc17 	ldw	r2,-16(fp)
    ef40:	10001026 	beq	r2,zero,ef84 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ef44:	e0bffc17 	ldw	r2,-16(fp)
    ef48:	10800017 	ldw	r2,0(r2)
    ef4c:	10800717 	ldw	r2,28(r2)
    ef50:	10000926 	beq	r2,zero,ef78 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ef54:	e0bffc17 	ldw	r2,-16(fp)
    ef58:	10800017 	ldw	r2,0(r2)
    ef5c:	10800717 	ldw	r2,28(r2)
    ef60:	e1bfff17 	ldw	r6,-4(fp)
    ef64:	e17ffe17 	ldw	r5,-8(fp)
    ef68:	e13ffc17 	ldw	r4,-16(fp)
    ef6c:	103ee83a 	callr	r2
    ef70:	e0bffb15 	stw	r2,-20(fp)
    ef74:	00000506 	br	ef8c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ef78:	00bfde84 	movi	r2,-134
    ef7c:	e0bffb15 	stw	r2,-20(fp)
    ef80:	00000206 	br	ef8c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ef84:	00bfebc4 	movi	r2,-81
    ef88:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ef8c:	e0bffb17 	ldw	r2,-20(fp)
    ef90:	1000070e 	bge	r2,zero,efb0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ef94:	000eeb80 	call	eeb8 <alt_get_errno>
    ef98:	1007883a 	mov	r3,r2
    ef9c:	e0bffb17 	ldw	r2,-20(fp)
    efa0:	0085c83a 	sub	r2,zero,r2
    efa4:	18800015 	stw	r2,0(r3)
    rc = -1;
    efa8:	00bfffc4 	movi	r2,-1
    efac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    efb0:	e0bffb17 	ldw	r2,-20(fp)
}
    efb4:	e037883a 	mov	sp,fp
    efb8:	dfc00117 	ldw	ra,4(sp)
    efbc:	df000017 	ldw	fp,0(sp)
    efc0:	dec00204 	addi	sp,sp,8
    efc4:	f800283a 	ret

0000efc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    efc8:	defffd04 	addi	sp,sp,-12
    efcc:	dfc00215 	stw	ra,8(sp)
    efd0:	df000115 	stw	fp,4(sp)
    efd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    efd8:	0009883a 	mov	r4,zero
    efdc:	000f4700 	call	f470 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    efe0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    efe4:	000f4a80 	call	f4a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    efe8:	01800074 	movhi	r6,1
    efec:	31873304 	addi	r6,r6,7372
    eff0:	01400074 	movhi	r5,1
    eff4:	29473304 	addi	r5,r5,7372
    eff8:	01000074 	movhi	r4,1
    effc:	21073304 	addi	r4,r4,7372
    f000:	001099c0 	call	1099c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f004:	00105440 	call	10544 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f008:	01000074 	movhi	r4,1
    f00c:	21016904 	addi	r4,r4,1444
    f010:	001119c0 	call	1119c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f014:	d0a72717 	ldw	r2,-25444(gp)
    f018:	d0e72817 	ldw	r3,-25440(gp)
    f01c:	d1272917 	ldw	r4,-25436(gp)
    f020:	200d883a 	mov	r6,r4
    f024:	180b883a 	mov	r5,r3
    f028:	1009883a 	mov	r4,r2
    f02c:	0000f900 	call	f90 <main>
    f030:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f034:	01000044 	movi	r4,1
    f038:	000eb040 	call	eb04 <close>
  exit (result);
    f03c:	e13fff17 	ldw	r4,-4(fp)
    f040:	00111b00 	call	111b0 <exit>

0000f044 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f044:	defffe04 	addi	sp,sp,-8
    f048:	df000115 	stw	fp,4(sp)
    f04c:	df000104 	addi	fp,sp,4
    f050:	e13fff15 	stw	r4,-4(fp)
}
    f054:	0001883a 	nop
    f058:	e037883a 	mov	sp,fp
    f05c:	df000017 	ldw	fp,0(sp)
    f060:	dec00104 	addi	sp,sp,4
    f064:	f800283a 	ret

0000f068 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f068:	defffe04 	addi	sp,sp,-8
    f06c:	df000115 	stw	fp,4(sp)
    f070:	df000104 	addi	fp,sp,4
    f074:	e13fff15 	stw	r4,-4(fp)
}
    f078:	0001883a 	nop
    f07c:	e037883a 	mov	sp,fp
    f080:	df000017 	ldw	fp,0(sp)
    f084:	dec00104 	addi	sp,sp,4
    f088:	f800283a 	ret

0000f08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f08c:	defffe04 	addi	sp,sp,-8
    f090:	dfc00115 	stw	ra,4(sp)
    f094:	df000015 	stw	fp,0(sp)
    f098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f09c:	d0a00b17 	ldw	r2,-32724(gp)
    f0a0:	10000326 	beq	r2,zero,f0b0 <alt_get_errno+0x24>
    f0a4:	d0a00b17 	ldw	r2,-32724(gp)
    f0a8:	103ee83a 	callr	r2
    f0ac:	00000106 	br	f0b4 <alt_get_errno+0x28>
    f0b0:	d0a72304 	addi	r2,gp,-25460
}
    f0b4:	e037883a 	mov	sp,fp
    f0b8:	dfc00117 	ldw	ra,4(sp)
    f0bc:	df000017 	ldw	fp,0(sp)
    f0c0:	dec00204 	addi	sp,sp,8
    f0c4:	f800283a 	ret

0000f0c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f0c8:	defff904 	addi	sp,sp,-28
    f0cc:	dfc00615 	stw	ra,24(sp)
    f0d0:	df000515 	stw	fp,20(sp)
    f0d4:	df000504 	addi	fp,sp,20
    f0d8:	e13ffd15 	stw	r4,-12(fp)
    f0dc:	e17ffe15 	stw	r5,-8(fp)
    f0e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	10000616 	blt	r2,zero,f104 <read+0x3c>
    f0ec:	e0bffd17 	ldw	r2,-12(fp)
    f0f0:	10c00324 	muli	r3,r2,12
    f0f4:	00800074 	movhi	r2,1
    f0f8:	1089ae04 	addi	r2,r2,9912
    f0fc:	1885883a 	add	r2,r3,r2
    f100:	00000106 	br	f108 <read+0x40>
    f104:	0005883a 	mov	r2,zero
    f108:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f10c:	e0bffb17 	ldw	r2,-20(fp)
    f110:	10002226 	beq	r2,zero,f19c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f114:	e0bffb17 	ldw	r2,-20(fp)
    f118:	10800217 	ldw	r2,8(r2)
    f11c:	108000cc 	andi	r2,r2,3
    f120:	10800060 	cmpeqi	r2,r2,1
    f124:	1000181e 	bne	r2,zero,f188 <read+0xc0>
        (fd->dev->read))
    f128:	e0bffb17 	ldw	r2,-20(fp)
    f12c:	10800017 	ldw	r2,0(r2)
    f130:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f134:	10001426 	beq	r2,zero,f188 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f138:	e0bffb17 	ldw	r2,-20(fp)
    f13c:	10800017 	ldw	r2,0(r2)
    f140:	10800517 	ldw	r2,20(r2)
    f144:	e0ffff17 	ldw	r3,-4(fp)
    f148:	180d883a 	mov	r6,r3
    f14c:	e17ffe17 	ldw	r5,-8(fp)
    f150:	e13ffb17 	ldw	r4,-20(fp)
    f154:	103ee83a 	callr	r2
    f158:	e0bffc15 	stw	r2,-16(fp)
    f15c:	e0bffc17 	ldw	r2,-16(fp)
    f160:	1000070e 	bge	r2,zero,f180 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f164:	000f08c0 	call	f08c <alt_get_errno>
    f168:	1007883a 	mov	r3,r2
    f16c:	e0bffc17 	ldw	r2,-16(fp)
    f170:	0085c83a 	sub	r2,zero,r2
    f174:	18800015 	stw	r2,0(r3)
          return -1;
    f178:	00bfffc4 	movi	r2,-1
    f17c:	00000c06 	br	f1b0 <read+0xe8>
        }
        return rval;
    f180:	e0bffc17 	ldw	r2,-16(fp)
    f184:	00000a06 	br	f1b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f188:	000f08c0 	call	f08c <alt_get_errno>
    f18c:	1007883a 	mov	r3,r2
    f190:	00800344 	movi	r2,13
    f194:	18800015 	stw	r2,0(r3)
    f198:	00000406 	br	f1ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f19c:	000f08c0 	call	f08c <alt_get_errno>
    f1a0:	1007883a 	mov	r3,r2
    f1a4:	00801444 	movi	r2,81
    f1a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f1ac:	00bfffc4 	movi	r2,-1
}
    f1b0:	e037883a 	mov	sp,fp
    f1b4:	dfc00117 	ldw	ra,4(sp)
    f1b8:	df000017 	ldw	fp,0(sp)
    f1bc:	dec00204 	addi	sp,sp,8
    f1c0:	f800283a 	ret

0000f1c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f1c4:	defffe04 	addi	sp,sp,-8
    f1c8:	df000115 	stw	fp,4(sp)
    f1cc:	df000104 	addi	fp,sp,4
    f1d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f1d4:	e0bfff17 	ldw	r2,-4(fp)
    f1d8:	108000d0 	cmplti	r2,r2,3
    f1dc:	10000d1e 	bne	r2,zero,f214 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f1e0:	00800074 	movhi	r2,1
    f1e4:	1089ae04 	addi	r2,r2,9912
    f1e8:	e0ffff17 	ldw	r3,-4(fp)
    f1ec:	18c00324 	muli	r3,r3,12
    f1f0:	10c5883a 	add	r2,r2,r3
    f1f4:	10800204 	addi	r2,r2,8
    f1f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f1fc:	00800074 	movhi	r2,1
    f200:	1089ae04 	addi	r2,r2,9912
    f204:	e0ffff17 	ldw	r3,-4(fp)
    f208:	18c00324 	muli	r3,r3,12
    f20c:	10c5883a 	add	r2,r2,r3
    f210:	10000015 	stw	zero,0(r2)
  }
}
    f214:	0001883a 	nop
    f218:	e037883a 	mov	sp,fp
    f21c:	df000017 	ldw	fp,0(sp)
    f220:	dec00104 	addi	sp,sp,4
    f224:	f800283a 	ret

0000f228 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f228:	defff904 	addi	sp,sp,-28
    f22c:	df000615 	stw	fp,24(sp)
    f230:	df000604 	addi	fp,sp,24
    f234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f238:	0005303a 	rdctl	r2,status
    f23c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f240:	e0fffe17 	ldw	r3,-8(fp)
    f244:	00bfff84 	movi	r2,-2
    f248:	1884703a 	and	r2,r3,r2
    f24c:	1001703a 	wrctl	status,r2
  
  return context;
    f250:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f254:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f258:	d0a00c17 	ldw	r2,-32720(gp)
    f25c:	10c000c4 	addi	r3,r2,3
    f260:	00bfff04 	movi	r2,-4
    f264:	1884703a 	and	r2,r3,r2
    f268:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f26c:	d0e00c17 	ldw	r3,-32720(gp)
    f270:	e0bfff17 	ldw	r2,-4(fp)
    f274:	1887883a 	add	r3,r3,r2
    f278:	00804034 	movhi	r2,256
    f27c:	10800004 	addi	r2,r2,0
    f280:	10c0062e 	bgeu	r2,r3,f29c <sbrk+0x74>
    f284:	e0bffb17 	ldw	r2,-20(fp)
    f288:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f28c:	e0bffa17 	ldw	r2,-24(fp)
    f290:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f294:	00bfffc4 	movi	r2,-1
    f298:	00000b06 	br	f2c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f29c:	d0a00c17 	ldw	r2,-32720(gp)
    f2a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f2a4:	d0e00c17 	ldw	r3,-32720(gp)
    f2a8:	e0bfff17 	ldw	r2,-4(fp)
    f2ac:	1885883a 	add	r2,r3,r2
    f2b0:	d0a00c15 	stw	r2,-32720(gp)
    f2b4:	e0bffb17 	ldw	r2,-20(fp)
    f2b8:	e0bffc15 	stw	r2,-16(fp)
    f2bc:	e0bffc17 	ldw	r2,-16(fp)
    f2c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f2c4:	e0bffd17 	ldw	r2,-12(fp)
} 
    f2c8:	e037883a 	mov	sp,fp
    f2cc:	df000017 	ldw	fp,0(sp)
    f2d0:	dec00104 	addi	sp,sp,4
    f2d4:	f800283a 	ret

0000f2d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f2d8:	defffd04 	addi	sp,sp,-12
    f2dc:	dfc00215 	stw	ra,8(sp)
    f2e0:	df000115 	stw	fp,4(sp)
    f2e4:	df000104 	addi	fp,sp,4
    f2e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f2ec:	e13fff17 	ldw	r4,-4(fp)
    f2f0:	00102c40 	call	102c4 <alt_busy_sleep>
}
    f2f4:	e037883a 	mov	sp,fp
    f2f8:	dfc00117 	ldw	ra,4(sp)
    f2fc:	df000017 	ldw	fp,0(sp)
    f300:	dec00204 	addi	sp,sp,8
    f304:	f800283a 	ret

0000f308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f308:	defffe04 	addi	sp,sp,-8
    f30c:	dfc00115 	stw	ra,4(sp)
    f310:	df000015 	stw	fp,0(sp)
    f314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f318:	d0a00b17 	ldw	r2,-32724(gp)
    f31c:	10000326 	beq	r2,zero,f32c <alt_get_errno+0x24>
    f320:	d0a00b17 	ldw	r2,-32724(gp)
    f324:	103ee83a 	callr	r2
    f328:	00000106 	br	f330 <alt_get_errno+0x28>
    f32c:	d0a72304 	addi	r2,gp,-25460
}
    f330:	e037883a 	mov	sp,fp
    f334:	dfc00117 	ldw	ra,4(sp)
    f338:	df000017 	ldw	fp,0(sp)
    f33c:	dec00204 	addi	sp,sp,8
    f340:	f800283a 	ret

0000f344 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f344:	defff904 	addi	sp,sp,-28
    f348:	dfc00615 	stw	ra,24(sp)
    f34c:	df000515 	stw	fp,20(sp)
    f350:	df000504 	addi	fp,sp,20
    f354:	e13ffd15 	stw	r4,-12(fp)
    f358:	e17ffe15 	stw	r5,-8(fp)
    f35c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f360:	e0bffd17 	ldw	r2,-12(fp)
    f364:	10000616 	blt	r2,zero,f380 <write+0x3c>
    f368:	e0bffd17 	ldw	r2,-12(fp)
    f36c:	10c00324 	muli	r3,r2,12
    f370:	00800074 	movhi	r2,1
    f374:	1089ae04 	addi	r2,r2,9912
    f378:	1885883a 	add	r2,r3,r2
    f37c:	00000106 	br	f384 <write+0x40>
    f380:	0005883a 	mov	r2,zero
    f384:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f388:	e0bffb17 	ldw	r2,-20(fp)
    f38c:	10002126 	beq	r2,zero,f414 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f390:	e0bffb17 	ldw	r2,-20(fp)
    f394:	10800217 	ldw	r2,8(r2)
    f398:	108000cc 	andi	r2,r2,3
    f39c:	10001826 	beq	r2,zero,f400 <write+0xbc>
    f3a0:	e0bffb17 	ldw	r2,-20(fp)
    f3a4:	10800017 	ldw	r2,0(r2)
    f3a8:	10800617 	ldw	r2,24(r2)
    f3ac:	10001426 	beq	r2,zero,f400 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f3b0:	e0bffb17 	ldw	r2,-20(fp)
    f3b4:	10800017 	ldw	r2,0(r2)
    f3b8:	10800617 	ldw	r2,24(r2)
    f3bc:	e0ffff17 	ldw	r3,-4(fp)
    f3c0:	180d883a 	mov	r6,r3
    f3c4:	e17ffe17 	ldw	r5,-8(fp)
    f3c8:	e13ffb17 	ldw	r4,-20(fp)
    f3cc:	103ee83a 	callr	r2
    f3d0:	e0bffc15 	stw	r2,-16(fp)
    f3d4:	e0bffc17 	ldw	r2,-16(fp)
    f3d8:	1000070e 	bge	r2,zero,f3f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f3dc:	000f3080 	call	f308 <alt_get_errno>
    f3e0:	1007883a 	mov	r3,r2
    f3e4:	e0bffc17 	ldw	r2,-16(fp)
    f3e8:	0085c83a 	sub	r2,zero,r2
    f3ec:	18800015 	stw	r2,0(r3)
        return -1;
    f3f0:	00bfffc4 	movi	r2,-1
    f3f4:	00000c06 	br	f428 <write+0xe4>
      }
      return rval;
    f3f8:	e0bffc17 	ldw	r2,-16(fp)
    f3fc:	00000a06 	br	f428 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f400:	000f3080 	call	f308 <alt_get_errno>
    f404:	1007883a 	mov	r3,r2
    f408:	00800344 	movi	r2,13
    f40c:	18800015 	stw	r2,0(r3)
    f410:	00000406 	br	f424 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f414:	000f3080 	call	f308 <alt_get_errno>
    f418:	1007883a 	mov	r3,r2
    f41c:	00801444 	movi	r2,81
    f420:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f424:	00bfffc4 	movi	r2,-1
}
    f428:	e037883a 	mov	sp,fp
    f42c:	dfc00117 	ldw	ra,4(sp)
    f430:	df000017 	ldw	fp,0(sp)
    f434:	dec00204 	addi	sp,sp,8
    f438:	f800283a 	ret

0000f43c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f43c:	defffd04 	addi	sp,sp,-12
    f440:	dfc00215 	stw	ra,8(sp)
    f444:	df000115 	stw	fp,4(sp)
    f448:	df000104 	addi	fp,sp,4
    f44c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f450:	d1600804 	addi	r5,gp,-32736
    f454:	e13fff17 	ldw	r4,-4(fp)
    f458:	00104a00 	call	104a0 <alt_dev_llist_insert>
}
    f45c:	e037883a 	mov	sp,fp
    f460:	dfc00117 	ldw	ra,4(sp)
    f464:	df000017 	ldw	fp,0(sp)
    f468:	dec00204 	addi	sp,sp,8
    f46c:	f800283a 	ret

0000f470 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f470:	defffd04 	addi	sp,sp,-12
    f474:	dfc00215 	stw	ra,8(sp)
    f478:	df000115 	stw	fp,4(sp)
    f47c:	df000104 	addi	fp,sp,4
    f480:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f484:	0010e100 	call	10e10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f488:	00800044 	movi	r2,1
    f48c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f490:	0001883a 	nop
    f494:	e037883a 	mov	sp,fp
    f498:	dfc00117 	ldw	ra,4(sp)
    f49c:	df000017 	ldw	fp,0(sp)
    f4a0:	dec00204 	addi	sp,sp,8
    f4a4:	f800283a 	ret

0000f4a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f4a8:	defffe04 	addi	sp,sp,-8
    f4ac:	dfc00115 	stw	ra,4(sp)
    f4b0:	df000015 	stw	fp,0(sp)
    f4b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f4b8:	00804034 	movhi	r2,256
    f4bc:	10840004 	addi	r2,r2,4096
    f4c0:	d0a72a15 	stw	r2,-25432(gp)
    f4c4:	0080bef4 	movhi	r2,763
    f4c8:	10bc2004 	addi	r2,r2,-3968
    f4cc:	d0a72b15 	stw	r2,-25428(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f4d0:	01c0fa04 	movi	r7,1000
    f4d4:	01800104 	movi	r6,4
    f4d8:	000b883a 	mov	r5,zero
    f4dc:	01004034 	movhi	r4,256
    f4e0:	21040804 	addi	r4,r4,4128
    f4e4:	00100040 	call	10004 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f4e8:	000d883a 	mov	r6,zero
    f4ec:	000b883a 	mov	r5,zero
    f4f0:	01000074 	movhi	r4,1
    f4f4:	210a1804 	addi	r4,r4,10336
    f4f8:	000f6880 	call	f688 <altera_avalon_jtag_uart_init>
    f4fc:	01000074 	movhi	r4,1
    f500:	210a0e04 	addi	r4,r4,10296
    f504:	000f43c0 	call	f43c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f508:	0001883a 	nop
}
    f50c:	0001883a 	nop
    f510:	e037883a 	mov	sp,fp
    f514:	dfc00117 	ldw	ra,4(sp)
    f518:	df000017 	ldw	fp,0(sp)
    f51c:	dec00204 	addi	sp,sp,8
    f520:	f800283a 	ret

0000f524 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f524:	defffa04 	addi	sp,sp,-24
    f528:	dfc00515 	stw	ra,20(sp)
    f52c:	df000415 	stw	fp,16(sp)
    f530:	df000404 	addi	fp,sp,16
    f534:	e13ffd15 	stw	r4,-12(fp)
    f538:	e17ffe15 	stw	r5,-8(fp)
    f53c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f540:	e0bffd17 	ldw	r2,-12(fp)
    f544:	10800017 	ldw	r2,0(r2)
    f548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f54c:	e0bffc17 	ldw	r2,-16(fp)
    f550:	10c00a04 	addi	r3,r2,40
    f554:	e0bffd17 	ldw	r2,-12(fp)
    f558:	10800217 	ldw	r2,8(r2)
    f55c:	100f883a 	mov	r7,r2
    f560:	e1bfff17 	ldw	r6,-4(fp)
    f564:	e17ffe17 	ldw	r5,-8(fp)
    f568:	1809883a 	mov	r4,r3
    f56c:	000fb4c0 	call	fb4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f570:	e037883a 	mov	sp,fp
    f574:	dfc00117 	ldw	ra,4(sp)
    f578:	df000017 	ldw	fp,0(sp)
    f57c:	dec00204 	addi	sp,sp,8
    f580:	f800283a 	ret

0000f584 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f584:	defffa04 	addi	sp,sp,-24
    f588:	dfc00515 	stw	ra,20(sp)
    f58c:	df000415 	stw	fp,16(sp)
    f590:	df000404 	addi	fp,sp,16
    f594:	e13ffd15 	stw	r4,-12(fp)
    f598:	e17ffe15 	stw	r5,-8(fp)
    f59c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f5a0:	e0bffd17 	ldw	r2,-12(fp)
    f5a4:	10800017 	ldw	r2,0(r2)
    f5a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f5ac:	e0bffc17 	ldw	r2,-16(fp)
    f5b0:	10c00a04 	addi	r3,r2,40
    f5b4:	e0bffd17 	ldw	r2,-12(fp)
    f5b8:	10800217 	ldw	r2,8(r2)
    f5bc:	100f883a 	mov	r7,r2
    f5c0:	e1bfff17 	ldw	r6,-4(fp)
    f5c4:	e17ffe17 	ldw	r5,-8(fp)
    f5c8:	1809883a 	mov	r4,r3
    f5cc:	000fd680 	call	fd68 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f5d0:	e037883a 	mov	sp,fp
    f5d4:	dfc00117 	ldw	ra,4(sp)
    f5d8:	df000017 	ldw	fp,0(sp)
    f5dc:	dec00204 	addi	sp,sp,8
    f5e0:	f800283a 	ret

0000f5e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f5e4:	defffc04 	addi	sp,sp,-16
    f5e8:	dfc00315 	stw	ra,12(sp)
    f5ec:	df000215 	stw	fp,8(sp)
    f5f0:	df000204 	addi	fp,sp,8
    f5f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f5f8:	e0bfff17 	ldw	r2,-4(fp)
    f5fc:	10800017 	ldw	r2,0(r2)
    f600:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f604:	e0bffe17 	ldw	r2,-8(fp)
    f608:	10c00a04 	addi	r3,r2,40
    f60c:	e0bfff17 	ldw	r2,-4(fp)
    f610:	10800217 	ldw	r2,8(r2)
    f614:	100b883a 	mov	r5,r2
    f618:	1809883a 	mov	r4,r3
    f61c:	000f9f40 	call	f9f4 <altera_avalon_jtag_uart_close>
}
    f620:	e037883a 	mov	sp,fp
    f624:	dfc00117 	ldw	ra,4(sp)
    f628:	df000017 	ldw	fp,0(sp)
    f62c:	dec00204 	addi	sp,sp,8
    f630:	f800283a 	ret

0000f634 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f634:	defffa04 	addi	sp,sp,-24
    f638:	dfc00515 	stw	ra,20(sp)
    f63c:	df000415 	stw	fp,16(sp)
    f640:	df000404 	addi	fp,sp,16
    f644:	e13ffd15 	stw	r4,-12(fp)
    f648:	e17ffe15 	stw	r5,-8(fp)
    f64c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f650:	e0bffd17 	ldw	r2,-12(fp)
    f654:	10800017 	ldw	r2,0(r2)
    f658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f65c:	e0bffc17 	ldw	r2,-16(fp)
    f660:	10800a04 	addi	r2,r2,40
    f664:	e1bfff17 	ldw	r6,-4(fp)
    f668:	e17ffe17 	ldw	r5,-8(fp)
    f66c:	1009883a 	mov	r4,r2
    f670:	000fa5c0 	call	fa5c <altera_avalon_jtag_uart_ioctl>
}
    f674:	e037883a 	mov	sp,fp
    f678:	dfc00117 	ldw	ra,4(sp)
    f67c:	df000017 	ldw	fp,0(sp)
    f680:	dec00204 	addi	sp,sp,8
    f684:	f800283a 	ret

0000f688 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f688:	defffa04 	addi	sp,sp,-24
    f68c:	dfc00515 	stw	ra,20(sp)
    f690:	df000415 	stw	fp,16(sp)
    f694:	df000404 	addi	fp,sp,16
    f698:	e13ffd15 	stw	r4,-12(fp)
    f69c:	e17ffe15 	stw	r5,-8(fp)
    f6a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f6a4:	e0bffd17 	ldw	r2,-12(fp)
    f6a8:	00c00044 	movi	r3,1
    f6ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f6b0:	e0bffd17 	ldw	r2,-12(fp)
    f6b4:	10800017 	ldw	r2,0(r2)
    f6b8:	10800104 	addi	r2,r2,4
    f6bc:	1007883a 	mov	r3,r2
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	10800817 	ldw	r2,32(r2)
    f6c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f6cc:	e0bffe17 	ldw	r2,-8(fp)
    f6d0:	e0ffff17 	ldw	r3,-4(fp)
    f6d4:	d8000015 	stw	zero,0(sp)
    f6d8:	e1fffd17 	ldw	r7,-12(fp)
    f6dc:	01800074 	movhi	r6,1
    f6e0:	31bdd204 	addi	r6,r6,-2232
    f6e4:	180b883a 	mov	r5,r3
    f6e8:	1009883a 	mov	r4,r2
    f6ec:	00106380 	call	10638 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f6f0:	e0bffd17 	ldw	r2,-12(fp)
    f6f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f6f8:	e0bffd17 	ldw	r2,-12(fp)
    f6fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f700:	d0e72d17 	ldw	r3,-25420(gp)
    f704:	e1fffd17 	ldw	r7,-12(fp)
    f708:	01800074 	movhi	r6,1
    f70c:	31be5504 	addi	r6,r6,-1708
    f710:	180b883a 	mov	r5,r3
    f714:	1009883a 	mov	r4,r2
    f718:	00101980 	call	10198 <alt_alarm_start>
    f71c:	1000040e 	bge	r2,zero,f730 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f720:	e0fffd17 	ldw	r3,-12(fp)
    f724:	00a00034 	movhi	r2,32768
    f728:	10bfffc4 	addi	r2,r2,-1
    f72c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f730:	0001883a 	nop
    f734:	e037883a 	mov	sp,fp
    f738:	dfc00117 	ldw	ra,4(sp)
    f73c:	df000017 	ldw	fp,0(sp)
    f740:	dec00204 	addi	sp,sp,8
    f744:	f800283a 	ret

0000f748 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f748:	defff804 	addi	sp,sp,-32
    f74c:	df000715 	stw	fp,28(sp)
    f750:	df000704 	addi	fp,sp,28
    f754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f758:	e0bfff17 	ldw	r2,-4(fp)
    f75c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f760:	e0bffb17 	ldw	r2,-20(fp)
    f764:	10800017 	ldw	r2,0(r2)
    f768:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f76c:	e0bffc17 	ldw	r2,-16(fp)
    f770:	10800104 	addi	r2,r2,4
    f774:	10800037 	ldwio	r2,0(r2)
    f778:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f77c:	e0bffd17 	ldw	r2,-12(fp)
    f780:	1080c00c 	andi	r2,r2,768
    f784:	10006d26 	beq	r2,zero,f93c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f788:	e0bffd17 	ldw	r2,-12(fp)
    f78c:	1080400c 	andi	r2,r2,256
    f790:	10003526 	beq	r2,zero,f868 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f794:	00800074 	movhi	r2,1
    f798:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f79c:	e0bffb17 	ldw	r2,-20(fp)
    f7a0:	10800a17 	ldw	r2,40(r2)
    f7a4:	10800044 	addi	r2,r2,1
    f7a8:	1081ffcc 	andi	r2,r2,2047
    f7ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f7b0:	e0bffb17 	ldw	r2,-20(fp)
    f7b4:	10c00b17 	ldw	r3,44(r2)
    f7b8:	e0bffe17 	ldw	r2,-8(fp)
    f7bc:	18801526 	beq	r3,r2,f814 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f7c0:	e0bffc17 	ldw	r2,-16(fp)
    f7c4:	10800037 	ldwio	r2,0(r2)
    f7c8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f7cc:	e0bff917 	ldw	r2,-28(fp)
    f7d0:	10a0000c 	andi	r2,r2,32768
    f7d4:	10001126 	beq	r2,zero,f81c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f7d8:	e0bffb17 	ldw	r2,-20(fp)
    f7dc:	10800a17 	ldw	r2,40(r2)
    f7e0:	e0fff917 	ldw	r3,-28(fp)
    f7e4:	1809883a 	mov	r4,r3
    f7e8:	e0fffb17 	ldw	r3,-20(fp)
    f7ec:	1885883a 	add	r2,r3,r2
    f7f0:	10800e04 	addi	r2,r2,56
    f7f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f7f8:	e0bffb17 	ldw	r2,-20(fp)
    f7fc:	10800a17 	ldw	r2,40(r2)
    f800:	10800044 	addi	r2,r2,1
    f804:	10c1ffcc 	andi	r3,r2,2047
    f808:	e0bffb17 	ldw	r2,-20(fp)
    f80c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f810:	003fe206 	br	f79c <__alt_data_end+0xff00f79c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f814:	0001883a 	nop
    f818:	00000106 	br	f820 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f81c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f820:	e0bff917 	ldw	r2,-28(fp)
    f824:	10bfffec 	andhi	r2,r2,65535
    f828:	10000f26 	beq	r2,zero,f868 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f82c:	e0bffb17 	ldw	r2,-20(fp)
    f830:	10c00817 	ldw	r3,32(r2)
    f834:	00bfff84 	movi	r2,-2
    f838:	1886703a 	and	r3,r3,r2
    f83c:	e0bffb17 	ldw	r2,-20(fp)
    f840:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f844:	e0bffc17 	ldw	r2,-16(fp)
    f848:	10800104 	addi	r2,r2,4
    f84c:	1007883a 	mov	r3,r2
    f850:	e0bffb17 	ldw	r2,-20(fp)
    f854:	10800817 	ldw	r2,32(r2)
    f858:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f85c:	e0bffc17 	ldw	r2,-16(fp)
    f860:	10800104 	addi	r2,r2,4
    f864:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f868:	e0bffd17 	ldw	r2,-12(fp)
    f86c:	1080800c 	andi	r2,r2,512
    f870:	103fbe26 	beq	r2,zero,f76c <__alt_data_end+0xff00f76c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f874:	e0bffd17 	ldw	r2,-12(fp)
    f878:	1004d43a 	srli	r2,r2,16
    f87c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f880:	00001406 	br	f8d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f884:	e0bffc17 	ldw	r2,-16(fp)
    f888:	e0fffb17 	ldw	r3,-20(fp)
    f88c:	18c00d17 	ldw	r3,52(r3)
    f890:	e13ffb17 	ldw	r4,-20(fp)
    f894:	20c7883a 	add	r3,r4,r3
    f898:	18c20e04 	addi	r3,r3,2104
    f89c:	18c00003 	ldbu	r3,0(r3)
    f8a0:	18c03fcc 	andi	r3,r3,255
    f8a4:	18c0201c 	xori	r3,r3,128
    f8a8:	18ffe004 	addi	r3,r3,-128
    f8ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8b0:	e0bffb17 	ldw	r2,-20(fp)
    f8b4:	10800d17 	ldw	r2,52(r2)
    f8b8:	10800044 	addi	r2,r2,1
    f8bc:	10c1ffcc 	andi	r3,r2,2047
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f8c8:	e0bffa17 	ldw	r2,-24(fp)
    f8cc:	10bfffc4 	addi	r2,r2,-1
    f8d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f8d4:	e0bffa17 	ldw	r2,-24(fp)
    f8d8:	10000526 	beq	r2,zero,f8f0 <altera_avalon_jtag_uart_irq+0x1a8>
    f8dc:	e0bffb17 	ldw	r2,-20(fp)
    f8e0:	10c00d17 	ldw	r3,52(r2)
    f8e4:	e0bffb17 	ldw	r2,-20(fp)
    f8e8:	10800c17 	ldw	r2,48(r2)
    f8ec:	18bfe51e 	bne	r3,r2,f884 <__alt_data_end+0xff00f884>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f8f0:	e0bffa17 	ldw	r2,-24(fp)
    f8f4:	103f9d26 	beq	r2,zero,f76c <__alt_data_end+0xff00f76c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f8f8:	e0bffb17 	ldw	r2,-20(fp)
    f8fc:	10c00817 	ldw	r3,32(r2)
    f900:	00bfff44 	movi	r2,-3
    f904:	1886703a 	and	r3,r3,r2
    f908:	e0bffb17 	ldw	r2,-20(fp)
    f90c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f910:	e0bffb17 	ldw	r2,-20(fp)
    f914:	10800017 	ldw	r2,0(r2)
    f918:	10800104 	addi	r2,r2,4
    f91c:	1007883a 	mov	r3,r2
    f920:	e0bffb17 	ldw	r2,-20(fp)
    f924:	10800817 	ldw	r2,32(r2)
    f928:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800104 	addi	r2,r2,4
    f934:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f938:	003f8c06 	br	f76c <__alt_data_end+0xff00f76c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f93c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f940:	0001883a 	nop
    f944:	e037883a 	mov	sp,fp
    f948:	df000017 	ldw	fp,0(sp)
    f94c:	dec00104 	addi	sp,sp,4
    f950:	f800283a 	ret

0000f954 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f954:	defff804 	addi	sp,sp,-32
    f958:	df000715 	stw	fp,28(sp)
    f95c:	df000704 	addi	fp,sp,28
    f960:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f964:	e0bffb17 	ldw	r2,-20(fp)
    f968:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f96c:	e0bff917 	ldw	r2,-28(fp)
    f970:	10800017 	ldw	r2,0(r2)
    f974:	10800104 	addi	r2,r2,4
    f978:	10800037 	ldwio	r2,0(r2)
    f97c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f980:	e0bffa17 	ldw	r2,-24(fp)
    f984:	1081000c 	andi	r2,r2,1024
    f988:	10000b26 	beq	r2,zero,f9b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f98c:	e0bff917 	ldw	r2,-28(fp)
    f990:	10800017 	ldw	r2,0(r2)
    f994:	10800104 	addi	r2,r2,4
    f998:	1007883a 	mov	r3,r2
    f99c:	e0bff917 	ldw	r2,-28(fp)
    f9a0:	10800817 	ldw	r2,32(r2)
    f9a4:	10810014 	ori	r2,r2,1024
    f9a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f9ac:	e0bff917 	ldw	r2,-28(fp)
    f9b0:	10000915 	stw	zero,36(r2)
    f9b4:	00000a06 	br	f9e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f9b8:	e0bff917 	ldw	r2,-28(fp)
    f9bc:	10c00917 	ldw	r3,36(r2)
    f9c0:	00a00034 	movhi	r2,32768
    f9c4:	10bfff04 	addi	r2,r2,-4
    f9c8:	10c00536 	bltu	r2,r3,f9e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f9cc:	e0bff917 	ldw	r2,-28(fp)
    f9d0:	10800917 	ldw	r2,36(r2)
    f9d4:	10c00044 	addi	r3,r2,1
    f9d8:	e0bff917 	ldw	r2,-28(fp)
    f9dc:	10c00915 	stw	r3,36(r2)
    f9e0:	d0a72d17 	ldw	r2,-25420(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	df000017 	ldw	fp,0(sp)
    f9ec:	dec00104 	addi	sp,sp,4
    f9f0:	f800283a 	ret

0000f9f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f9f4:	defffd04 	addi	sp,sp,-12
    f9f8:	df000215 	stw	fp,8(sp)
    f9fc:	df000204 	addi	fp,sp,8
    fa00:	e13ffe15 	stw	r4,-8(fp)
    fa04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fa08:	00000506 	br	fa20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fa0c:	e0bfff17 	ldw	r2,-4(fp)
    fa10:	1090000c 	andi	r2,r2,16384
    fa14:	10000226 	beq	r2,zero,fa20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fa18:	00bffd44 	movi	r2,-11
    fa1c:	00000b06 	br	fa4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fa20:	e0bffe17 	ldw	r2,-8(fp)
    fa24:	10c00d17 	ldw	r3,52(r2)
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	10800c17 	ldw	r2,48(r2)
    fa30:	18800526 	beq	r3,r2,fa48 <altera_avalon_jtag_uart_close+0x54>
    fa34:	e0bffe17 	ldw	r2,-8(fp)
    fa38:	10c00917 	ldw	r3,36(r2)
    fa3c:	e0bffe17 	ldw	r2,-8(fp)
    fa40:	10800117 	ldw	r2,4(r2)
    fa44:	18bff136 	bltu	r3,r2,fa0c <__alt_data_end+0xff00fa0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fa48:	0005883a 	mov	r2,zero
}
    fa4c:	e037883a 	mov	sp,fp
    fa50:	df000017 	ldw	fp,0(sp)
    fa54:	dec00104 	addi	sp,sp,4
    fa58:	f800283a 	ret

0000fa5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fa5c:	defffa04 	addi	sp,sp,-24
    fa60:	df000515 	stw	fp,20(sp)
    fa64:	df000504 	addi	fp,sp,20
    fa68:	e13ffd15 	stw	r4,-12(fp)
    fa6c:	e17ffe15 	stw	r5,-8(fp)
    fa70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fa74:	00bff9c4 	movi	r2,-25
    fa78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fa7c:	e0bffe17 	ldw	r2,-8(fp)
    fa80:	10da8060 	cmpeqi	r3,r2,27137
    fa84:	1800031e 	bne	r3,zero,fa94 <altera_avalon_jtag_uart_ioctl+0x38>
    fa88:	109a80a0 	cmpeqi	r2,r2,27138
    fa8c:	1000181e 	bne	r2,zero,faf0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fa90:	00002906 	br	fb38 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fa94:	e0bffd17 	ldw	r2,-12(fp)
    fa98:	10c00117 	ldw	r3,4(r2)
    fa9c:	00a00034 	movhi	r2,32768
    faa0:	10bfffc4 	addi	r2,r2,-1
    faa4:	18802126 	beq	r3,r2,fb2c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    faa8:	e0bfff17 	ldw	r2,-4(fp)
    faac:	10800017 	ldw	r2,0(r2)
    fab0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	10800090 	cmplti	r2,r2,2
    fabc:	1000061e 	bne	r2,zero,fad8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fac0:	e0fffc17 	ldw	r3,-16(fp)
    fac4:	00a00034 	movhi	r2,32768
    fac8:	10bfffc4 	addi	r2,r2,-1
    facc:	18800226 	beq	r3,r2,fad8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fad0:	e0bffc17 	ldw	r2,-16(fp)
    fad4:	00000206 	br	fae0 <altera_avalon_jtag_uart_ioctl+0x84>
    fad8:	00a00034 	movhi	r2,32768
    fadc:	10bfff84 	addi	r2,r2,-2
    fae0:	e0fffd17 	ldw	r3,-12(fp)
    fae4:	18800115 	stw	r2,4(r3)
      rc = 0;
    fae8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    faec:	00000f06 	br	fb2c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    faf0:	e0bffd17 	ldw	r2,-12(fp)
    faf4:	10c00117 	ldw	r3,4(r2)
    faf8:	00a00034 	movhi	r2,32768
    fafc:	10bfffc4 	addi	r2,r2,-1
    fb00:	18800c26 	beq	r3,r2,fb34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fb04:	e0bffd17 	ldw	r2,-12(fp)
    fb08:	10c00917 	ldw	r3,36(r2)
    fb0c:	e0bffd17 	ldw	r2,-12(fp)
    fb10:	10800117 	ldw	r2,4(r2)
    fb14:	1885803a 	cmpltu	r2,r3,r2
    fb18:	10c03fcc 	andi	r3,r2,255
    fb1c:	e0bfff17 	ldw	r2,-4(fp)
    fb20:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fb24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fb28:	00000206 	br	fb34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fb2c:	0001883a 	nop
    fb30:	00000106 	br	fb38 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fb34:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fb38:	e0bffb17 	ldw	r2,-20(fp)
}
    fb3c:	e037883a 	mov	sp,fp
    fb40:	df000017 	ldw	fp,0(sp)
    fb44:	dec00104 	addi	sp,sp,4
    fb48:	f800283a 	ret

0000fb4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fb4c:	defff304 	addi	sp,sp,-52
    fb50:	dfc00c15 	stw	ra,48(sp)
    fb54:	df000b15 	stw	fp,44(sp)
    fb58:	df000b04 	addi	fp,sp,44
    fb5c:	e13ffc15 	stw	r4,-16(fp)
    fb60:	e17ffd15 	stw	r5,-12(fp)
    fb64:	e1bffe15 	stw	r6,-8(fp)
    fb68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fb6c:	e0bffd17 	ldw	r2,-12(fp)
    fb70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fb74:	00004706 	br	fc94 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fb78:	e0bffc17 	ldw	r2,-16(fp)
    fb7c:	10800a17 	ldw	r2,40(r2)
    fb80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fb84:	e0bffc17 	ldw	r2,-16(fp)
    fb88:	10800b17 	ldw	r2,44(r2)
    fb8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fb90:	e0fff717 	ldw	r3,-36(fp)
    fb94:	e0bff817 	ldw	r2,-32(fp)
    fb98:	18800536 	bltu	r3,r2,fbb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fb9c:	e0fff717 	ldw	r3,-36(fp)
    fba0:	e0bff817 	ldw	r2,-32(fp)
    fba4:	1885c83a 	sub	r2,r3,r2
    fba8:	e0bff615 	stw	r2,-40(fp)
    fbac:	00000406 	br	fbc0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fbb0:	00c20004 	movi	r3,2048
    fbb4:	e0bff817 	ldw	r2,-32(fp)
    fbb8:	1885c83a 	sub	r2,r3,r2
    fbbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fbc0:	e0bff617 	ldw	r2,-40(fp)
    fbc4:	10001e26 	beq	r2,zero,fc40 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fbc8:	e0fffe17 	ldw	r3,-8(fp)
    fbcc:	e0bff617 	ldw	r2,-40(fp)
    fbd0:	1880022e 	bgeu	r3,r2,fbdc <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fbd4:	e0bffe17 	ldw	r2,-8(fp)
    fbd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fbdc:	e0bffc17 	ldw	r2,-16(fp)
    fbe0:	10c00e04 	addi	r3,r2,56
    fbe4:	e0bff817 	ldw	r2,-32(fp)
    fbe8:	1885883a 	add	r2,r3,r2
    fbec:	e1bff617 	ldw	r6,-40(fp)
    fbf0:	100b883a 	mov	r5,r2
    fbf4:	e13ff517 	ldw	r4,-44(fp)
    fbf8:	00088700 	call	8870 <memcpy>
      ptr   += n;
    fbfc:	e0fff517 	ldw	r3,-44(fp)
    fc00:	e0bff617 	ldw	r2,-40(fp)
    fc04:	1885883a 	add	r2,r3,r2
    fc08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fc0c:	e0fffe17 	ldw	r3,-8(fp)
    fc10:	e0bff617 	ldw	r2,-40(fp)
    fc14:	1885c83a 	sub	r2,r3,r2
    fc18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc1c:	e0fff817 	ldw	r3,-32(fp)
    fc20:	e0bff617 	ldw	r2,-40(fp)
    fc24:	1885883a 	add	r2,r3,r2
    fc28:	10c1ffcc 	andi	r3,r2,2047
    fc2c:	e0bffc17 	ldw	r2,-16(fp)
    fc30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fc34:	e0bffe17 	ldw	r2,-8(fp)
    fc38:	00bfcf16 	blt	zero,r2,fb78 <__alt_data_end+0xff00fb78>
    fc3c:	00000106 	br	fc44 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fc40:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fc44:	e0fff517 	ldw	r3,-44(fp)
    fc48:	e0bffd17 	ldw	r2,-12(fp)
    fc4c:	1880141e 	bne	r3,r2,fca0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fc50:	e0bfff17 	ldw	r2,-4(fp)
    fc54:	1090000c 	andi	r2,r2,16384
    fc58:	1000131e 	bne	r2,zero,fca8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fc5c:	0001883a 	nop
    fc60:	e0bffc17 	ldw	r2,-16(fp)
    fc64:	10c00a17 	ldw	r3,40(r2)
    fc68:	e0bff717 	ldw	r2,-36(fp)
    fc6c:	1880051e 	bne	r3,r2,fc84 <altera_avalon_jtag_uart_read+0x138>
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	10c00917 	ldw	r3,36(r2)
    fc78:	e0bffc17 	ldw	r2,-16(fp)
    fc7c:	10800117 	ldw	r2,4(r2)
    fc80:	18bff736 	bltu	r3,r2,fc60 <__alt_data_end+0xff00fc60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fc84:	e0bffc17 	ldw	r2,-16(fp)
    fc88:	10c00a17 	ldw	r3,40(r2)
    fc8c:	e0bff717 	ldw	r2,-36(fp)
    fc90:	18800726 	beq	r3,r2,fcb0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc94:	e0bffe17 	ldw	r2,-8(fp)
    fc98:	00bfb716 	blt	zero,r2,fb78 <__alt_data_end+0xff00fb78>
    fc9c:	00000506 	br	fcb4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fca0:	0001883a 	nop
    fca4:	00000306 	br	fcb4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fca8:	0001883a 	nop
    fcac:	00000106 	br	fcb4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fcb0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fcb4:	e0fff517 	ldw	r3,-44(fp)
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	18801826 	beq	r3,r2,fd20 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcc0:	0005303a 	rdctl	r2,status
    fcc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcc8:	e0fffb17 	ldw	r3,-20(fp)
    fccc:	00bfff84 	movi	r2,-2
    fcd0:	1884703a 	and	r2,r3,r2
    fcd4:	1001703a 	wrctl	status,r2
  
  return context;
    fcd8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fcdc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fce0:	e0bffc17 	ldw	r2,-16(fp)
    fce4:	10800817 	ldw	r2,32(r2)
    fce8:	10c00054 	ori	r3,r2,1
    fcec:	e0bffc17 	ldw	r2,-16(fp)
    fcf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	10800017 	ldw	r2,0(r2)
    fcfc:	10800104 	addi	r2,r2,4
    fd00:	1007883a 	mov	r3,r2
    fd04:	e0bffc17 	ldw	r2,-16(fp)
    fd08:	10800817 	ldw	r2,32(r2)
    fd0c:	18800035 	stwio	r2,0(r3)
    fd10:	e0bffa17 	ldw	r2,-24(fp)
    fd14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd18:	e0bff917 	ldw	r2,-28(fp)
    fd1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fd20:	e0fff517 	ldw	r3,-44(fp)
    fd24:	e0bffd17 	ldw	r2,-12(fp)
    fd28:	18800426 	beq	r3,r2,fd3c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fd2c:	e0fff517 	ldw	r3,-44(fp)
    fd30:	e0bffd17 	ldw	r2,-12(fp)
    fd34:	1885c83a 	sub	r2,r3,r2
    fd38:	00000606 	br	fd54 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fd3c:	e0bfff17 	ldw	r2,-4(fp)
    fd40:	1090000c 	andi	r2,r2,16384
    fd44:	10000226 	beq	r2,zero,fd50 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fd48:	00bffd44 	movi	r2,-11
    fd4c:	00000106 	br	fd54 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fd50:	00bffec4 	movi	r2,-5
}
    fd54:	e037883a 	mov	sp,fp
    fd58:	dfc00117 	ldw	ra,4(sp)
    fd5c:	df000017 	ldw	fp,0(sp)
    fd60:	dec00204 	addi	sp,sp,8
    fd64:	f800283a 	ret

0000fd68 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fd68:	defff304 	addi	sp,sp,-52
    fd6c:	dfc00c15 	stw	ra,48(sp)
    fd70:	df000b15 	stw	fp,44(sp)
    fd74:	df000b04 	addi	fp,sp,44
    fd78:	e13ffc15 	stw	r4,-16(fp)
    fd7c:	e17ffd15 	stw	r5,-12(fp)
    fd80:	e1bffe15 	stw	r6,-8(fp)
    fd84:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fd88:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fd8c:	e0bffd17 	ldw	r2,-12(fp)
    fd90:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fd94:	00003706 	br	fe74 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10800c17 	ldw	r2,48(r2)
    fda0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fda4:	e0bffc17 	ldw	r2,-16(fp)
    fda8:	10800d17 	ldw	r2,52(r2)
    fdac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fdb0:	e0fff917 	ldw	r3,-28(fp)
    fdb4:	e0bff517 	ldw	r2,-44(fp)
    fdb8:	1880062e 	bgeu	r3,r2,fdd4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fdbc:	e0fff517 	ldw	r3,-44(fp)
    fdc0:	e0bff917 	ldw	r2,-28(fp)
    fdc4:	1885c83a 	sub	r2,r3,r2
    fdc8:	10bfffc4 	addi	r2,r2,-1
    fdcc:	e0bff615 	stw	r2,-40(fp)
    fdd0:	00000b06 	br	fe00 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fdd4:	e0bff517 	ldw	r2,-44(fp)
    fdd8:	10000526 	beq	r2,zero,fdf0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fddc:	00c20004 	movi	r3,2048
    fde0:	e0bff917 	ldw	r2,-28(fp)
    fde4:	1885c83a 	sub	r2,r3,r2
    fde8:	e0bff615 	stw	r2,-40(fp)
    fdec:	00000406 	br	fe00 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fdf0:	00c1ffc4 	movi	r3,2047
    fdf4:	e0bff917 	ldw	r2,-28(fp)
    fdf8:	1885c83a 	sub	r2,r3,r2
    fdfc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fe00:	e0bff617 	ldw	r2,-40(fp)
    fe04:	10001e26 	beq	r2,zero,fe80 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fe08:	e0fffe17 	ldw	r3,-8(fp)
    fe0c:	e0bff617 	ldw	r2,-40(fp)
    fe10:	1880022e 	bgeu	r3,r2,fe1c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fe14:	e0bffe17 	ldw	r2,-8(fp)
    fe18:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fe1c:	e0bffc17 	ldw	r2,-16(fp)
    fe20:	10c20e04 	addi	r3,r2,2104
    fe24:	e0bff917 	ldw	r2,-28(fp)
    fe28:	1885883a 	add	r2,r3,r2
    fe2c:	e1bff617 	ldw	r6,-40(fp)
    fe30:	e17ffd17 	ldw	r5,-12(fp)
    fe34:	1009883a 	mov	r4,r2
    fe38:	00088700 	call	8870 <memcpy>
      ptr   += n;
    fe3c:	e0fffd17 	ldw	r3,-12(fp)
    fe40:	e0bff617 	ldw	r2,-40(fp)
    fe44:	1885883a 	add	r2,r3,r2
    fe48:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fe4c:	e0fffe17 	ldw	r3,-8(fp)
    fe50:	e0bff617 	ldw	r2,-40(fp)
    fe54:	1885c83a 	sub	r2,r3,r2
    fe58:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe5c:	e0fff917 	ldw	r3,-28(fp)
    fe60:	e0bff617 	ldw	r2,-40(fp)
    fe64:	1885883a 	add	r2,r3,r2
    fe68:	10c1ffcc 	andi	r3,r2,2047
    fe6c:	e0bffc17 	ldw	r2,-16(fp)
    fe70:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe74:	e0bffe17 	ldw	r2,-8(fp)
    fe78:	00bfc716 	blt	zero,r2,fd98 <__alt_data_end+0xff00fd98>
    fe7c:	00000106 	br	fe84 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fe80:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe84:	0005303a 	rdctl	r2,status
    fe88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe8c:	e0fffb17 	ldw	r3,-20(fp)
    fe90:	00bfff84 	movi	r2,-2
    fe94:	1884703a 	and	r2,r3,r2
    fe98:	1001703a 	wrctl	status,r2
  
  return context;
    fe9c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fea0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fea4:	e0bffc17 	ldw	r2,-16(fp)
    fea8:	10800817 	ldw	r2,32(r2)
    feac:	10c00094 	ori	r3,r2,2
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    feb8:	e0bffc17 	ldw	r2,-16(fp)
    febc:	10800017 	ldw	r2,0(r2)
    fec0:	10800104 	addi	r2,r2,4
    fec4:	1007883a 	mov	r3,r2
    fec8:	e0bffc17 	ldw	r2,-16(fp)
    fecc:	10800817 	ldw	r2,32(r2)
    fed0:	18800035 	stwio	r2,0(r3)
    fed4:	e0bffa17 	ldw	r2,-24(fp)
    fed8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fedc:	e0bff817 	ldw	r2,-32(fp)
    fee0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	0080100e 	bge	zero,r2,ff2c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    feec:	e0bfff17 	ldw	r2,-4(fp)
    fef0:	1090000c 	andi	r2,r2,16384
    fef4:	1000101e 	bne	r2,zero,ff38 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fef8:	0001883a 	nop
    fefc:	e0bffc17 	ldw	r2,-16(fp)
    ff00:	10c00d17 	ldw	r3,52(r2)
    ff04:	e0bff517 	ldw	r2,-44(fp)
    ff08:	1880051e 	bne	r3,r2,ff20 <altera_avalon_jtag_uart_write+0x1b8>
    ff0c:	e0bffc17 	ldw	r2,-16(fp)
    ff10:	10c00917 	ldw	r3,36(r2)
    ff14:	e0bffc17 	ldw	r2,-16(fp)
    ff18:	10800117 	ldw	r2,4(r2)
    ff1c:	18bff736 	bltu	r3,r2,fefc <__alt_data_end+0xff00fefc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ff20:	e0bffc17 	ldw	r2,-16(fp)
    ff24:	10800917 	ldw	r2,36(r2)
    ff28:	1000051e 	bne	r2,zero,ff40 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ff2c:	e0bffe17 	ldw	r2,-8(fp)
    ff30:	00bfd016 	blt	zero,r2,fe74 <__alt_data_end+0xff00fe74>
    ff34:	00000306 	br	ff44 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ff38:	0001883a 	nop
    ff3c:	00000106 	br	ff44 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ff40:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ff44:	e0fffd17 	ldw	r3,-12(fp)
    ff48:	e0bff717 	ldw	r2,-36(fp)
    ff4c:	18800426 	beq	r3,r2,ff60 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ff50:	e0fffd17 	ldw	r3,-12(fp)
    ff54:	e0bff717 	ldw	r2,-36(fp)
    ff58:	1885c83a 	sub	r2,r3,r2
    ff5c:	00000606 	br	ff78 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    ff60:	e0bfff17 	ldw	r2,-4(fp)
    ff64:	1090000c 	andi	r2,r2,16384
    ff68:	10000226 	beq	r2,zero,ff74 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ff6c:	00bffd44 	movi	r2,-11
    ff70:	00000106 	br	ff78 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ff74:	00bffec4 	movi	r2,-5
}
    ff78:	e037883a 	mov	sp,fp
    ff7c:	dfc00117 	ldw	ra,4(sp)
    ff80:	df000017 	ldw	fp,0(sp)
    ff84:	dec00204 	addi	sp,sp,8
    ff88:	f800283a 	ret

0000ff8c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ff8c:	defffa04 	addi	sp,sp,-24
    ff90:	dfc00515 	stw	ra,20(sp)
    ff94:	df000415 	stw	fp,16(sp)
    ff98:	df000404 	addi	fp,sp,16
    ff9c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ffa0:	0007883a 	mov	r3,zero
    ffa4:	e0bfff17 	ldw	r2,-4(fp)
    ffa8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ffac:	e0bfff17 	ldw	r2,-4(fp)
    ffb0:	10800104 	addi	r2,r2,4
    ffb4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffb8:	0005303a 	rdctl	r2,status
    ffbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffc0:	e0fffd17 	ldw	r3,-12(fp)
    ffc4:	00bfff84 	movi	r2,-2
    ffc8:	1884703a 	and	r2,r3,r2
    ffcc:	1001703a 	wrctl	status,r2
  
  return context;
    ffd0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ffd4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    ffd8:	0010d080 	call	10d08 <alt_tick>
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffe4:	e0bffe17 	ldw	r2,-8(fp)
    ffe8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ffec:	0001883a 	nop
    fff0:	e037883a 	mov	sp,fp
    fff4:	dfc00117 	ldw	ra,4(sp)
    fff8:	df000017 	ldw	fp,0(sp)
    fffc:	dec00204 	addi	sp,sp,8
   10000:	f800283a 	ret

00010004 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10004:	defff804 	addi	sp,sp,-32
   10008:	dfc00715 	stw	ra,28(sp)
   1000c:	df000615 	stw	fp,24(sp)
   10010:	df000604 	addi	fp,sp,24
   10014:	e13ffc15 	stw	r4,-16(fp)
   10018:	e17ffd15 	stw	r5,-12(fp)
   1001c:	e1bffe15 	stw	r6,-8(fp)
   10020:	e1ffff15 	stw	r7,-4(fp)
   10024:	e0bfff17 	ldw	r2,-4(fp)
   10028:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1002c:	d0a72d17 	ldw	r2,-25420(gp)
   10030:	1000021e 	bne	r2,zero,1003c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10034:	e0bffb17 	ldw	r2,-20(fp)
   10038:	d0a72d15 	stw	r2,-25420(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1003c:	e0bffc17 	ldw	r2,-16(fp)
   10040:	10800104 	addi	r2,r2,4
   10044:	00c001c4 	movi	r3,7
   10048:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1004c:	d8000015 	stw	zero,0(sp)
   10050:	e1fffc17 	ldw	r7,-16(fp)
   10054:	01800074 	movhi	r6,1
   10058:	31bfe304 	addi	r6,r6,-116
   1005c:	e17ffe17 	ldw	r5,-8(fp)
   10060:	e13ffd17 	ldw	r4,-12(fp)
   10064:	00106380 	call	10638 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10068:	0001883a 	nop
   1006c:	e037883a 	mov	sp,fp
   10070:	dfc00117 	ldw	ra,4(sp)
   10074:	df000017 	ldw	fp,0(sp)
   10078:	dec00204 	addi	sp,sp,8
   1007c:	f800283a 	ret

00010080 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   10080:	defffe04 	addi	sp,sp,-8
   10084:	df000115 	stw	fp,4(sp)
   10088:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1008c:	d0a72a17 	ldw	r2,-25432(gp)
   10090:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   10094:	d0a72b17 	ldw	r2,-25428(gp)
   10098:	1000021e 	bne	r2,zero,100a4 <alt_timestamp_start+0x24>
  {
    return -1;
   1009c:	00bfffc4 	movi	r2,-1
   100a0:	00001106 	br	100e8 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   100a4:	e0bfff17 	ldw	r2,-4(fp)
   100a8:	10800104 	addi	r2,r2,4
   100ac:	00c00204 	movi	r3,8
   100b0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   100b4:	e0bfff17 	ldw	r2,-4(fp)
   100b8:	10800204 	addi	r2,r2,8
   100bc:	00ffffd4 	movui	r3,65535
   100c0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   100c4:	e0bfff17 	ldw	r2,-4(fp)
   100c8:	10800304 	addi	r2,r2,12
   100cc:	00ffffd4 	movui	r3,65535
   100d0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	10800104 	addi	r2,r2,4
   100dc:	00c00104 	movi	r3,4
   100e0:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   100e4:	0005883a 	mov	r2,zero
}
   100e8:	e037883a 	mov	sp,fp
   100ec:	df000017 	ldw	fp,0(sp)
   100f0:	dec00104 	addi	sp,sp,4
   100f4:	f800283a 	ret

000100f8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   100f8:	defffc04 	addi	sp,sp,-16
   100fc:	df000315 	stw	fp,12(sp)
   10100:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10104:	d0a72a17 	ldw	r2,-25432(gp)
   10108:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1010c:	d0a72b17 	ldw	r2,-25428(gp)
   10110:	1000021e 	bne	r2,zero,1011c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10114:	00bfffc4 	movi	r2,-1
   10118:	00001306 	br	10168 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1011c:	e0bffd17 	ldw	r2,-12(fp)
   10120:	10800404 	addi	r2,r2,16
   10124:	0007883a 	mov	r3,zero
   10128:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	10800404 	addi	r2,r2,16
   10134:	10800037 	ldwio	r2,0(r2)
   10138:	10bfffcc 	andi	r2,r2,65535
   1013c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10140:	e0bffd17 	ldw	r2,-12(fp)
   10144:	10800504 	addi	r2,r2,20
   10148:	10800037 	ldwio	r2,0(r2)
   1014c:	10bfffcc 	andi	r2,r2,65535
   10150:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10154:	e0bfff17 	ldw	r2,-4(fp)
   10158:	1006943a 	slli	r3,r2,16
   1015c:	e0bffe17 	ldw	r2,-8(fp)
   10160:	1884b03a 	or	r2,r3,r2
   10164:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10168:	e037883a 	mov	sp,fp
   1016c:	df000017 	ldw	fp,0(sp)
   10170:	dec00104 	addi	sp,sp,4
   10174:	f800283a 	ret

00010178 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10178:	deffff04 	addi	sp,sp,-4
   1017c:	df000015 	stw	fp,0(sp)
   10180:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10184:	d0a72b17 	ldw	r2,-25428(gp)
}
   10188:	e037883a 	mov	sp,fp
   1018c:	df000017 	ldw	fp,0(sp)
   10190:	dec00104 	addi	sp,sp,4
   10194:	f800283a 	ret

00010198 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10198:	defff504 	addi	sp,sp,-44
   1019c:	df000a15 	stw	fp,40(sp)
   101a0:	df000a04 	addi	fp,sp,40
   101a4:	e13ffc15 	stw	r4,-16(fp)
   101a8:	e17ffd15 	stw	r5,-12(fp)
   101ac:	e1bffe15 	stw	r6,-8(fp)
   101b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   101b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   101b8:	d0a72d17 	ldw	r2,-25420(gp)
  
  if (alt_ticks_per_second ())
   101bc:	10003c26 	beq	r2,zero,102b0 <alt_alarm_start+0x118>
  {
    if (alarm)
   101c0:	e0bffc17 	ldw	r2,-16(fp)
   101c4:	10003826 	beq	r2,zero,102a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   101c8:	e0bffc17 	ldw	r2,-16(fp)
   101cc:	e0fffe17 	ldw	r3,-8(fp)
   101d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   101d4:	e0bffc17 	ldw	r2,-16(fp)
   101d8:	e0ffff17 	ldw	r3,-4(fp)
   101dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101e0:	0005303a 	rdctl	r2,status
   101e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101e8:	e0fff917 	ldw	r3,-28(fp)
   101ec:	00bfff84 	movi	r2,-2
   101f0:	1884703a 	and	r2,r3,r2
   101f4:	1001703a 	wrctl	status,r2
  
  return context;
   101f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   101fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10200:	d0a72e17 	ldw	r2,-25416(gp)
      
      current_nticks = alt_nticks();
   10204:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10208:	e0fffd17 	ldw	r3,-12(fp)
   1020c:	e0bff617 	ldw	r2,-40(fp)
   10210:	1885883a 	add	r2,r3,r2
   10214:	10c00044 	addi	r3,r2,1
   10218:	e0bffc17 	ldw	r2,-16(fp)
   1021c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10220:	e0bffc17 	ldw	r2,-16(fp)
   10224:	10c00217 	ldw	r3,8(r2)
   10228:	e0bff617 	ldw	r2,-40(fp)
   1022c:	1880042e 	bgeu	r3,r2,10240 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10230:	e0bffc17 	ldw	r2,-16(fp)
   10234:	00c00044 	movi	r3,1
   10238:	10c00405 	stb	r3,16(r2)
   1023c:	00000206 	br	10248 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10240:	e0bffc17 	ldw	r2,-16(fp)
   10244:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10248:	e0bffc17 	ldw	r2,-16(fp)
   1024c:	d0e00e04 	addi	r3,gp,-32712
   10250:	e0fffa15 	stw	r3,-24(fp)
   10254:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10258:	e0bffb17 	ldw	r2,-20(fp)
   1025c:	e0fffa17 	ldw	r3,-24(fp)
   10260:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10264:	e0bffa17 	ldw	r2,-24(fp)
   10268:	10c00017 	ldw	r3,0(r2)
   1026c:	e0bffb17 	ldw	r2,-20(fp)
   10270:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10274:	e0bffa17 	ldw	r2,-24(fp)
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	e0fffb17 	ldw	r3,-20(fp)
   10280:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10284:	e0bffa17 	ldw	r2,-24(fp)
   10288:	e0fffb17 	ldw	r3,-20(fp)
   1028c:	10c00015 	stw	r3,0(r2)
   10290:	e0bff817 	ldw	r2,-32(fp)
   10294:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10298:	e0bff717 	ldw	r2,-36(fp)
   1029c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   102a0:	0005883a 	mov	r2,zero
   102a4:	00000306 	br	102b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   102a8:	00bffa84 	movi	r2,-22
   102ac:	00000106 	br	102b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   102b0:	00bfde84 	movi	r2,-134
  }
}
   102b4:	e037883a 	mov	sp,fp
   102b8:	df000017 	ldw	fp,0(sp)
   102bc:	dec00104 	addi	sp,sp,4
   102c0:	f800283a 	ret

000102c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   102c4:	defffa04 	addi	sp,sp,-24
   102c8:	dfc00515 	stw	ra,20(sp)
   102cc:	df000415 	stw	fp,16(sp)
   102d0:	df000404 	addi	fp,sp,16
   102d4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   102d8:	008000c4 	movi	r2,3
   102dc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   102e0:	e0fffd17 	ldw	r3,-12(fp)
   102e4:	008003f4 	movhi	r2,15
   102e8:	10909004 	addi	r2,r2,16960
   102ec:	1885383a 	mul	r2,r3,r2
   102f0:	100b883a 	mov	r5,r2
   102f4:	0100bef4 	movhi	r4,763
   102f8:	213c2004 	addi	r4,r4,-3968
   102fc:	00022780 	call	2278 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10300:	100b883a 	mov	r5,r2
   10304:	01200034 	movhi	r4,32768
   10308:	213fffc4 	addi	r4,r4,-1
   1030c:	00022780 	call	2278 <__udivsi3>
   10310:	100b883a 	mov	r5,r2
   10314:	e13fff17 	ldw	r4,-4(fp)
   10318:	00022780 	call	2278 <__udivsi3>
   1031c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10320:	e0bffe17 	ldw	r2,-8(fp)
   10324:	10002a26 	beq	r2,zero,103d0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10328:	e03ffc15 	stw	zero,-16(fp)
   1032c:	00001706 	br	1038c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10330:	00a00034 	movhi	r2,32768
   10334:	10bfffc4 	addi	r2,r2,-1
   10338:	10bfffc4 	addi	r2,r2,-1
   1033c:	103ffe1e 	bne	r2,zero,10338 <__alt_data_end+0xff010338>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10340:	e0fffd17 	ldw	r3,-12(fp)
   10344:	008003f4 	movhi	r2,15
   10348:	10909004 	addi	r2,r2,16960
   1034c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10350:	100b883a 	mov	r5,r2
   10354:	0100bef4 	movhi	r4,763
   10358:	213c2004 	addi	r4,r4,-3968
   1035c:	00022780 	call	2278 <__udivsi3>
   10360:	100b883a 	mov	r5,r2
   10364:	01200034 	movhi	r4,32768
   10368:	213fffc4 	addi	r4,r4,-1
   1036c:	00022780 	call	2278 <__udivsi3>
   10370:	1007883a 	mov	r3,r2
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	10c5c83a 	sub	r2,r2,r3
   1037c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	10800044 	addi	r2,r2,1
   10388:	e0bffc15 	stw	r2,-16(fp)
   1038c:	e0fffc17 	ldw	r3,-16(fp)
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	18bfe616 	blt	r3,r2,10330 <__alt_data_end+0xff010330>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10398:	e0fffd17 	ldw	r3,-12(fp)
   1039c:	008003f4 	movhi	r2,15
   103a0:	10909004 	addi	r2,r2,16960
   103a4:	1885383a 	mul	r2,r3,r2
   103a8:	100b883a 	mov	r5,r2
   103ac:	0100bef4 	movhi	r4,763
   103b0:	213c2004 	addi	r4,r4,-3968
   103b4:	00022780 	call	2278 <__udivsi3>
   103b8:	1007883a 	mov	r3,r2
   103bc:	e0bfff17 	ldw	r2,-4(fp)
   103c0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   103c4:	10bfffc4 	addi	r2,r2,-1
   103c8:	103ffe1e 	bne	r2,zero,103c4 <__alt_data_end+0xff0103c4>
   103cc:	00000d06 	br	10404 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   103d0:	e0fffd17 	ldw	r3,-12(fp)
   103d4:	008003f4 	movhi	r2,15
   103d8:	10909004 	addi	r2,r2,16960
   103dc:	1885383a 	mul	r2,r3,r2
   103e0:	100b883a 	mov	r5,r2
   103e4:	0100bef4 	movhi	r4,763
   103e8:	213c2004 	addi	r4,r4,-3968
   103ec:	00022780 	call	2278 <__udivsi3>
   103f0:	1007883a 	mov	r3,r2
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   103fc:	10bfffc4 	addi	r2,r2,-1
   10400:	00bffe16 	blt	zero,r2,103fc <__alt_data_end+0xff0103fc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10404:	0005883a 	mov	r2,zero
}
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1041c:	defffe04 	addi	sp,sp,-8
   10420:	df000115 	stw	fp,4(sp)
   10424:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10428:	e03fff15 	stw	zero,-4(fp)
   1042c:	00000506 	br	10444 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10438:	e0bfff17 	ldw	r2,-4(fp)
   1043c:	10800804 	addi	r2,r2,32
   10440:	e0bfff15 	stw	r2,-4(fp)
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	10a00030 	cmpltui	r2,r2,32768
   1044c:	103ff81e 	bne	r2,zero,10430 <__alt_data_end+0xff010430>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10450:	0001883a 	nop
   10454:	e037883a 	mov	sp,fp
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00104 	addi	sp,sp,4
   10460:	f800283a 	ret

00010464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10464:	defffe04 	addi	sp,sp,-8
   10468:	dfc00115 	stw	ra,4(sp)
   1046c:	df000015 	stw	fp,0(sp)
   10470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10474:	d0a00b17 	ldw	r2,-32724(gp)
   10478:	10000326 	beq	r2,zero,10488 <alt_get_errno+0x24>
   1047c:	d0a00b17 	ldw	r2,-32724(gp)
   10480:	103ee83a 	callr	r2
   10484:	00000106 	br	1048c <alt_get_errno+0x28>
   10488:	d0a72304 	addi	r2,gp,-25460
}
   1048c:	e037883a 	mov	sp,fp
   10490:	dfc00117 	ldw	ra,4(sp)
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00204 	addi	sp,sp,8
   1049c:	f800283a 	ret

000104a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   104a0:	defffa04 	addi	sp,sp,-24
   104a4:	dfc00515 	stw	ra,20(sp)
   104a8:	df000415 	stw	fp,16(sp)
   104ac:	df000404 	addi	fp,sp,16
   104b0:	e13ffe15 	stw	r4,-8(fp)
   104b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   104b8:	e0bffe17 	ldw	r2,-8(fp)
   104bc:	10000326 	beq	r2,zero,104cc <alt_dev_llist_insert+0x2c>
   104c0:	e0bffe17 	ldw	r2,-8(fp)
   104c4:	10800217 	ldw	r2,8(r2)
   104c8:	1000061e 	bne	r2,zero,104e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   104cc:	00104640 	call	10464 <alt_get_errno>
   104d0:	1007883a 	mov	r3,r2
   104d4:	00800584 	movi	r2,22
   104d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   104dc:	00bffa84 	movi	r2,-22
   104e0:	00001306 	br	10530 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   104e4:	e0bffe17 	ldw	r2,-8(fp)
   104e8:	e0ffff17 	ldw	r3,-4(fp)
   104ec:	e0fffc15 	stw	r3,-16(fp)
   104f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   104f4:	e0bffd17 	ldw	r2,-12(fp)
   104f8:	e0fffc17 	ldw	r3,-16(fp)
   104fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10500:	e0bffc17 	ldw	r2,-16(fp)
   10504:	10c00017 	ldw	r3,0(r2)
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10800017 	ldw	r2,0(r2)
   10518:	e0fffd17 	ldw	r3,-12(fp)
   1051c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10520:	e0bffc17 	ldw	r2,-16(fp)
   10524:	e0fffd17 	ldw	r3,-12(fp)
   10528:	10c00015 	stw	r3,0(r2)

  return 0;  
   1052c:	0005883a 	mov	r2,zero
}
   10530:	e037883a 	mov	sp,fp
   10534:	dfc00117 	ldw	ra,4(sp)
   10538:	df000017 	ldw	fp,0(sp)
   1053c:	dec00204 	addi	sp,sp,8
   10540:	f800283a 	ret

00010544 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10544:	defffd04 	addi	sp,sp,-12
   10548:	dfc00215 	stw	ra,8(sp)
   1054c:	df000115 	stw	fp,4(sp)
   10550:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10554:	00800074 	movhi	r2,1
   10558:	10854b04 	addi	r2,r2,5420
   1055c:	e0bfff15 	stw	r2,-4(fp)
   10560:	00000606 	br	1057c <_do_ctors+0x38>
        (*ctor) (); 
   10564:	e0bfff17 	ldw	r2,-4(fp)
   10568:	10800017 	ldw	r2,0(r2)
   1056c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10570:	e0bfff17 	ldw	r2,-4(fp)
   10574:	10bfff04 	addi	r2,r2,-4
   10578:	e0bfff15 	stw	r2,-4(fp)
   1057c:	e0ffff17 	ldw	r3,-4(fp)
   10580:	00800074 	movhi	r2,1
   10584:	10854c04 	addi	r2,r2,5424
   10588:	18bff62e 	bgeu	r3,r2,10564 <__alt_data_end+0xff010564>
        (*ctor) (); 
}
   1058c:	0001883a 	nop
   10590:	e037883a 	mov	sp,fp
   10594:	dfc00117 	ldw	ra,4(sp)
   10598:	df000017 	ldw	fp,0(sp)
   1059c:	dec00204 	addi	sp,sp,8
   105a0:	f800283a 	ret

000105a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   105a4:	defffd04 	addi	sp,sp,-12
   105a8:	dfc00215 	stw	ra,8(sp)
   105ac:	df000115 	stw	fp,4(sp)
   105b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105b4:	00800074 	movhi	r2,1
   105b8:	10854b04 	addi	r2,r2,5420
   105bc:	e0bfff15 	stw	r2,-4(fp)
   105c0:	00000606 	br	105dc <_do_dtors+0x38>
        (*dtor) (); 
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10800017 	ldw	r2,0(r2)
   105cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105d0:	e0bfff17 	ldw	r2,-4(fp)
   105d4:	10bfff04 	addi	r2,r2,-4
   105d8:	e0bfff15 	stw	r2,-4(fp)
   105dc:	e0ffff17 	ldw	r3,-4(fp)
   105e0:	00800074 	movhi	r2,1
   105e4:	10854c04 	addi	r2,r2,5424
   105e8:	18bff62e 	bgeu	r3,r2,105c4 <__alt_data_end+0xff0105c4>
        (*dtor) (); 
}
   105ec:	0001883a 	nop
   105f0:	e037883a 	mov	sp,fp
   105f4:	dfc00117 	ldw	ra,4(sp)
   105f8:	df000017 	ldw	fp,0(sp)
   105fc:	dec00204 	addi	sp,sp,8
   10600:	f800283a 	ret

00010604 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10604:	defffe04 	addi	sp,sp,-8
   10608:	dfc00115 	stw	ra,4(sp)
   1060c:	df000015 	stw	fp,0(sp)
   10610:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10614:	01440004 	movi	r5,4096
   10618:	0009883a 	mov	r4,zero
   1061c:	00110700 	call	11070 <alt_icache_flush>
#endif
}
   10620:	0001883a 	nop
   10624:	e037883a 	mov	sp,fp
   10628:	dfc00117 	ldw	ra,4(sp)
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00204 	addi	sp,sp,8
   10634:	f800283a 	ret

00010638 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10638:	defff904 	addi	sp,sp,-28
   1063c:	dfc00615 	stw	ra,24(sp)
   10640:	df000515 	stw	fp,20(sp)
   10644:	df000504 	addi	fp,sp,20
   10648:	e13ffc15 	stw	r4,-16(fp)
   1064c:	e17ffd15 	stw	r5,-12(fp)
   10650:	e1bffe15 	stw	r6,-8(fp)
   10654:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10658:	e0800217 	ldw	r2,8(fp)
   1065c:	d8800015 	stw	r2,0(sp)
   10660:	e1ffff17 	ldw	r7,-4(fp)
   10664:	e1bffe17 	ldw	r6,-8(fp)
   10668:	e17ffd17 	ldw	r5,-12(fp)
   1066c:	e13ffc17 	ldw	r4,-16(fp)
   10670:	00107e80 	call	107e8 <alt_iic_isr_register>
}  
   10674:	e037883a 	mov	sp,fp
   10678:	dfc00117 	ldw	ra,4(sp)
   1067c:	df000017 	ldw	fp,0(sp)
   10680:	dec00204 	addi	sp,sp,8
   10684:	f800283a 	ret

00010688 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10688:	defff904 	addi	sp,sp,-28
   1068c:	df000615 	stw	fp,24(sp)
   10690:	df000604 	addi	fp,sp,24
   10694:	e13ffe15 	stw	r4,-8(fp)
   10698:	e17fff15 	stw	r5,-4(fp)
   1069c:	e0bfff17 	ldw	r2,-4(fp)
   106a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106a4:	0005303a 	rdctl	r2,status
   106a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106ac:	e0fffb17 	ldw	r3,-20(fp)
   106b0:	00bfff84 	movi	r2,-2
   106b4:	1884703a 	and	r2,r3,r2
   106b8:	1001703a 	wrctl	status,r2
  
  return context;
   106bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   106c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   106c4:	00c00044 	movi	r3,1
   106c8:	e0bffa17 	ldw	r2,-24(fp)
   106cc:	1884983a 	sll	r2,r3,r2
   106d0:	1007883a 	mov	r3,r2
   106d4:	d0a72c17 	ldw	r2,-25424(gp)
   106d8:	1884b03a 	or	r2,r3,r2
   106dc:	d0a72c15 	stw	r2,-25424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   106e0:	d0a72c17 	ldw	r2,-25424(gp)
   106e4:	100170fa 	wrctl	ienable,r2
   106e8:	e0bffc17 	ldw	r2,-16(fp)
   106ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106f0:	e0bffd17 	ldw	r2,-12(fp)
   106f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   106f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   106fc:	0001883a 	nop
}
   10700:	e037883a 	mov	sp,fp
   10704:	df000017 	ldw	fp,0(sp)
   10708:	dec00104 	addi	sp,sp,4
   1070c:	f800283a 	ret

00010710 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10710:	defff904 	addi	sp,sp,-28
   10714:	df000615 	stw	fp,24(sp)
   10718:	df000604 	addi	fp,sp,24
   1071c:	e13ffe15 	stw	r4,-8(fp)
   10720:	e17fff15 	stw	r5,-4(fp)
   10724:	e0bfff17 	ldw	r2,-4(fp)
   10728:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1072c:	0005303a 	rdctl	r2,status
   10730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10734:	e0fffb17 	ldw	r3,-20(fp)
   10738:	00bfff84 	movi	r2,-2
   1073c:	1884703a 	and	r2,r3,r2
   10740:	1001703a 	wrctl	status,r2
  
  return context;
   10744:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10748:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1074c:	00c00044 	movi	r3,1
   10750:	e0bffa17 	ldw	r2,-24(fp)
   10754:	1884983a 	sll	r2,r3,r2
   10758:	0084303a 	nor	r2,zero,r2
   1075c:	1007883a 	mov	r3,r2
   10760:	d0a72c17 	ldw	r2,-25424(gp)
   10764:	1884703a 	and	r2,r3,r2
   10768:	d0a72c15 	stw	r2,-25424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1076c:	d0a72c17 	ldw	r2,-25424(gp)
   10770:	100170fa 	wrctl	ienable,r2
   10774:	e0bffc17 	ldw	r2,-16(fp)
   10778:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1077c:	e0bffd17 	ldw	r2,-12(fp)
   10780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10784:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10788:	0001883a 	nop
}
   1078c:	e037883a 	mov	sp,fp
   10790:	df000017 	ldw	fp,0(sp)
   10794:	dec00104 	addi	sp,sp,4
   10798:	f800283a 	ret

0001079c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1079c:	defffc04 	addi	sp,sp,-16
   107a0:	df000315 	stw	fp,12(sp)
   107a4:	df000304 	addi	fp,sp,12
   107a8:	e13ffe15 	stw	r4,-8(fp)
   107ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   107b0:	000530fa 	rdctl	r2,ienable
   107b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   107b8:	00c00044 	movi	r3,1
   107bc:	e0bfff17 	ldw	r2,-4(fp)
   107c0:	1884983a 	sll	r2,r3,r2
   107c4:	1007883a 	mov	r3,r2
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	1884703a 	and	r2,r3,r2
   107d0:	1004c03a 	cmpne	r2,r2,zero
   107d4:	10803fcc 	andi	r2,r2,255
}
   107d8:	e037883a 	mov	sp,fp
   107dc:	df000017 	ldw	fp,0(sp)
   107e0:	dec00104 	addi	sp,sp,4
   107e4:	f800283a 	ret

000107e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   107e8:	defff504 	addi	sp,sp,-44
   107ec:	dfc00a15 	stw	ra,40(sp)
   107f0:	df000915 	stw	fp,36(sp)
   107f4:	df000904 	addi	fp,sp,36
   107f8:	e13ffc15 	stw	r4,-16(fp)
   107fc:	e17ffd15 	stw	r5,-12(fp)
   10800:	e1bffe15 	stw	r6,-8(fp)
   10804:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10808:	00bffa84 	movi	r2,-22
   1080c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10810:	e0bffd17 	ldw	r2,-12(fp)
   10814:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10818:	e0bff817 	ldw	r2,-32(fp)
   1081c:	10800808 	cmpgei	r2,r2,32
   10820:	1000271e 	bne	r2,zero,108c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10824:	0005303a 	rdctl	r2,status
   10828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1082c:	e0fffb17 	ldw	r3,-20(fp)
   10830:	00bfff84 	movi	r2,-2
   10834:	1884703a 	and	r2,r3,r2
   10838:	1001703a 	wrctl	status,r2
  
  return context;
   1083c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10840:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10844:	00800074 	movhi	r2,1
   10848:	10956004 	addi	r2,r2,21888
   1084c:	e0fff817 	ldw	r3,-32(fp)
   10850:	180690fa 	slli	r3,r3,3
   10854:	10c5883a 	add	r2,r2,r3
   10858:	e0fffe17 	ldw	r3,-8(fp)
   1085c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10860:	00800074 	movhi	r2,1
   10864:	10956004 	addi	r2,r2,21888
   10868:	e0fff817 	ldw	r3,-32(fp)
   1086c:	180690fa 	slli	r3,r3,3
   10870:	10c5883a 	add	r2,r2,r3
   10874:	10800104 	addi	r2,r2,4
   10878:	e0ffff17 	ldw	r3,-4(fp)
   1087c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10880:	e0bffe17 	ldw	r2,-8(fp)
   10884:	10000526 	beq	r2,zero,1089c <alt_iic_isr_register+0xb4>
   10888:	e0bff817 	ldw	r2,-32(fp)
   1088c:	100b883a 	mov	r5,r2
   10890:	e13ffc17 	ldw	r4,-16(fp)
   10894:	00106880 	call	10688 <alt_ic_irq_enable>
   10898:	00000406 	br	108ac <alt_iic_isr_register+0xc4>
   1089c:	e0bff817 	ldw	r2,-32(fp)
   108a0:	100b883a 	mov	r5,r2
   108a4:	e13ffc17 	ldw	r4,-16(fp)
   108a8:	00107100 	call	10710 <alt_ic_irq_disable>
   108ac:	e0bff715 	stw	r2,-36(fp)
   108b0:	e0bffa17 	ldw	r2,-24(fp)
   108b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108b8:	e0bff917 	ldw	r2,-28(fp)
   108bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   108c0:	e0bff717 	ldw	r2,-36(fp)
}
   108c4:	e037883a 	mov	sp,fp
   108c8:	dfc00117 	ldw	ra,4(sp)
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00204 	addi	sp,sp,8
   108d4:	f800283a 	ret

000108d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   108d8:	defff904 	addi	sp,sp,-28
   108dc:	dfc00615 	stw	ra,24(sp)
   108e0:	df000515 	stw	fp,20(sp)
   108e4:	df000504 	addi	fp,sp,20
   108e8:	e13ffc15 	stw	r4,-16(fp)
   108ec:	e17ffd15 	stw	r5,-12(fp)
   108f0:	e1bffe15 	stw	r6,-8(fp)
   108f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   108f8:	e1bfff17 	ldw	r6,-4(fp)
   108fc:	e17ffe17 	ldw	r5,-8(fp)
   10900:	e13ffd17 	ldw	r4,-12(fp)
   10904:	0010b180 	call	10b18 <open>
   10908:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1090c:	e0bffb17 	ldw	r2,-20(fp)
   10910:	10001c16 	blt	r2,zero,10984 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10914:	00800074 	movhi	r2,1
   10918:	1089ae04 	addi	r2,r2,9912
   1091c:	e0fffb17 	ldw	r3,-20(fp)
   10920:	18c00324 	muli	r3,r3,12
   10924:	10c5883a 	add	r2,r2,r3
   10928:	10c00017 	ldw	r3,0(r2)
   1092c:	e0bffc17 	ldw	r2,-16(fp)
   10930:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10934:	00800074 	movhi	r2,1
   10938:	1089ae04 	addi	r2,r2,9912
   1093c:	e0fffb17 	ldw	r3,-20(fp)
   10940:	18c00324 	muli	r3,r3,12
   10944:	10c5883a 	add	r2,r2,r3
   10948:	10800104 	addi	r2,r2,4
   1094c:	10c00017 	ldw	r3,0(r2)
   10950:	e0bffc17 	ldw	r2,-16(fp)
   10954:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10958:	00800074 	movhi	r2,1
   1095c:	1089ae04 	addi	r2,r2,9912
   10960:	e0fffb17 	ldw	r3,-20(fp)
   10964:	18c00324 	muli	r3,r3,12
   10968:	10c5883a 	add	r2,r2,r3
   1096c:	10800204 	addi	r2,r2,8
   10970:	10c00017 	ldw	r3,0(r2)
   10974:	e0bffc17 	ldw	r2,-16(fp)
   10978:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1097c:	e13ffb17 	ldw	r4,-20(fp)
   10980:	000f1c40 	call	f1c4 <alt_release_fd>
  }
} 
   10984:	0001883a 	nop
   10988:	e037883a 	mov	sp,fp
   1098c:	dfc00117 	ldw	ra,4(sp)
   10990:	df000017 	ldw	fp,0(sp)
   10994:	dec00204 	addi	sp,sp,8
   10998:	f800283a 	ret

0001099c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1099c:	defffb04 	addi	sp,sp,-20
   109a0:	dfc00415 	stw	ra,16(sp)
   109a4:	df000315 	stw	fp,12(sp)
   109a8:	df000304 	addi	fp,sp,12
   109ac:	e13ffd15 	stw	r4,-12(fp)
   109b0:	e17ffe15 	stw	r5,-8(fp)
   109b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   109b8:	01c07fc4 	movi	r7,511
   109bc:	01800044 	movi	r6,1
   109c0:	e17ffd17 	ldw	r5,-12(fp)
   109c4:	01000074 	movhi	r4,1
   109c8:	2109b104 	addi	r4,r4,9924
   109cc:	00108d80 	call	108d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   109d0:	01c07fc4 	movi	r7,511
   109d4:	000d883a 	mov	r6,zero
   109d8:	e17ffe17 	ldw	r5,-8(fp)
   109dc:	01000074 	movhi	r4,1
   109e0:	2109ae04 	addi	r4,r4,9912
   109e4:	00108d80 	call	108d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   109e8:	01c07fc4 	movi	r7,511
   109ec:	01800044 	movi	r6,1
   109f0:	e17fff17 	ldw	r5,-4(fp)
   109f4:	01000074 	movhi	r4,1
   109f8:	2109b404 	addi	r4,r4,9936
   109fc:	00108d80 	call	108d8 <alt_open_fd>
}  
   10a00:	0001883a 	nop
   10a04:	e037883a 	mov	sp,fp
   10a08:	dfc00117 	ldw	ra,4(sp)
   10a0c:	df000017 	ldw	fp,0(sp)
   10a10:	dec00204 	addi	sp,sp,8
   10a14:	f800283a 	ret

00010a18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a18:	defffe04 	addi	sp,sp,-8
   10a1c:	dfc00115 	stw	ra,4(sp)
   10a20:	df000015 	stw	fp,0(sp)
   10a24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a28:	d0a00b17 	ldw	r2,-32724(gp)
   10a2c:	10000326 	beq	r2,zero,10a3c <alt_get_errno+0x24>
   10a30:	d0a00b17 	ldw	r2,-32724(gp)
   10a34:	103ee83a 	callr	r2
   10a38:	00000106 	br	10a40 <alt_get_errno+0x28>
   10a3c:	d0a72304 	addi	r2,gp,-25460
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	dfc00117 	ldw	ra,4(sp)
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00204 	addi	sp,sp,8
   10a50:	f800283a 	ret

00010a54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10a54:	defffd04 	addi	sp,sp,-12
   10a58:	df000215 	stw	fp,8(sp)
   10a5c:	df000204 	addi	fp,sp,8
   10a60:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10a64:	e0bfff17 	ldw	r2,-4(fp)
   10a68:	10800217 	ldw	r2,8(r2)
   10a6c:	10d00034 	orhi	r3,r2,16384
   10a70:	e0bfff17 	ldw	r2,-4(fp)
   10a74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10a78:	e03ffe15 	stw	zero,-8(fp)
   10a7c:	00001d06 	br	10af4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10a80:	00800074 	movhi	r2,1
   10a84:	1089ae04 	addi	r2,r2,9912
   10a88:	e0fffe17 	ldw	r3,-8(fp)
   10a8c:	18c00324 	muli	r3,r3,12
   10a90:	10c5883a 	add	r2,r2,r3
   10a94:	10c00017 	ldw	r3,0(r2)
   10a98:	e0bfff17 	ldw	r2,-4(fp)
   10a9c:	10800017 	ldw	r2,0(r2)
   10aa0:	1880111e 	bne	r3,r2,10ae8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10aa4:	00800074 	movhi	r2,1
   10aa8:	1089ae04 	addi	r2,r2,9912
   10aac:	e0fffe17 	ldw	r3,-8(fp)
   10ab0:	18c00324 	muli	r3,r3,12
   10ab4:	10c5883a 	add	r2,r2,r3
   10ab8:	10800204 	addi	r2,r2,8
   10abc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ac0:	1000090e 	bge	r2,zero,10ae8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10ac4:	e0bffe17 	ldw	r2,-8(fp)
   10ac8:	10c00324 	muli	r3,r2,12
   10acc:	00800074 	movhi	r2,1
   10ad0:	1089ae04 	addi	r2,r2,9912
   10ad4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10ad8:	e0bfff17 	ldw	r2,-4(fp)
   10adc:	18800226 	beq	r3,r2,10ae8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10ae0:	00bffcc4 	movi	r2,-13
   10ae4:	00000806 	br	10b08 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10ae8:	e0bffe17 	ldw	r2,-8(fp)
   10aec:	10800044 	addi	r2,r2,1
   10af0:	e0bffe15 	stw	r2,-8(fp)
   10af4:	d0a00a17 	ldw	r2,-32728(gp)
   10af8:	1007883a 	mov	r3,r2
   10afc:	e0bffe17 	ldw	r2,-8(fp)
   10b00:	18bfdf2e 	bgeu	r3,r2,10a80 <__alt_data_end+0xff010a80>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10b04:	0005883a 	mov	r2,zero
}
   10b08:	e037883a 	mov	sp,fp
   10b0c:	df000017 	ldw	fp,0(sp)
   10b10:	dec00104 	addi	sp,sp,4
   10b14:	f800283a 	ret

00010b18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10b18:	defff604 	addi	sp,sp,-40
   10b1c:	dfc00915 	stw	ra,36(sp)
   10b20:	df000815 	stw	fp,32(sp)
   10b24:	df000804 	addi	fp,sp,32
   10b28:	e13ffd15 	stw	r4,-12(fp)
   10b2c:	e17ffe15 	stw	r5,-8(fp)
   10b30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10b34:	00bfffc4 	movi	r2,-1
   10b38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10b3c:	00bffb44 	movi	r2,-19
   10b40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10b44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10b48:	d1600804 	addi	r5,gp,-32736
   10b4c:	e13ffd17 	ldw	r4,-12(fp)
   10b50:	0010e340 	call	10e34 <alt_find_dev>
   10b54:	e0bff815 	stw	r2,-32(fp)
   10b58:	e0bff817 	ldw	r2,-32(fp)
   10b5c:	1000051e 	bne	r2,zero,10b74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10b60:	e13ffd17 	ldw	r4,-12(fp)
   10b64:	0010ec40 	call	10ec4 <alt_find_file>
   10b68:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10b6c:	00800044 	movi	r2,1
   10b70:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10b74:	e0bff817 	ldw	r2,-32(fp)
   10b78:	10002926 	beq	r2,zero,10c20 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10b7c:	e13ff817 	ldw	r4,-32(fp)
   10b80:	0010fcc0 	call	10fcc <alt_get_fd>
   10b84:	e0bff915 	stw	r2,-28(fp)
   10b88:	e0bff917 	ldw	r2,-28(fp)
   10b8c:	1000030e 	bge	r2,zero,10b9c <open+0x84>
    {
      status = index;
   10b90:	e0bff917 	ldw	r2,-28(fp)
   10b94:	e0bffa15 	stw	r2,-24(fp)
   10b98:	00002306 	br	10c28 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10b9c:	e0bff917 	ldw	r2,-28(fp)
   10ba0:	10c00324 	muli	r3,r2,12
   10ba4:	00800074 	movhi	r2,1
   10ba8:	1089ae04 	addi	r2,r2,9912
   10bac:	1885883a 	add	r2,r3,r2
   10bb0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10bb4:	e0fffe17 	ldw	r3,-8(fp)
   10bb8:	00900034 	movhi	r2,16384
   10bbc:	10bfffc4 	addi	r2,r2,-1
   10bc0:	1886703a 	and	r3,r3,r2
   10bc4:	e0bffc17 	ldw	r2,-16(fp)
   10bc8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10bcc:	e0bffb17 	ldw	r2,-20(fp)
   10bd0:	1000051e 	bne	r2,zero,10be8 <open+0xd0>
   10bd4:	e13ffc17 	ldw	r4,-16(fp)
   10bd8:	0010a540 	call	10a54 <alt_file_locked>
   10bdc:	e0bffa15 	stw	r2,-24(fp)
   10be0:	e0bffa17 	ldw	r2,-24(fp)
   10be4:	10001016 	blt	r2,zero,10c28 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10be8:	e0bff817 	ldw	r2,-32(fp)
   10bec:	10800317 	ldw	r2,12(r2)
   10bf0:	10000826 	beq	r2,zero,10c14 <open+0xfc>
   10bf4:	e0bff817 	ldw	r2,-32(fp)
   10bf8:	10800317 	ldw	r2,12(r2)
   10bfc:	e1ffff17 	ldw	r7,-4(fp)
   10c00:	e1bffe17 	ldw	r6,-8(fp)
   10c04:	e17ffd17 	ldw	r5,-12(fp)
   10c08:	e13ffc17 	ldw	r4,-16(fp)
   10c0c:	103ee83a 	callr	r2
   10c10:	00000106 	br	10c18 <open+0x100>
   10c14:	0005883a 	mov	r2,zero
   10c18:	e0bffa15 	stw	r2,-24(fp)
   10c1c:	00000206 	br	10c28 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10c20:	00bffb44 	movi	r2,-19
   10c24:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10c28:	e0bffa17 	ldw	r2,-24(fp)
   10c2c:	1000090e 	bge	r2,zero,10c54 <open+0x13c>
  {
    alt_release_fd (index);  
   10c30:	e13ff917 	ldw	r4,-28(fp)
   10c34:	000f1c40 	call	f1c4 <alt_release_fd>
    ALT_ERRNO = -status;
   10c38:	0010a180 	call	10a18 <alt_get_errno>
   10c3c:	1007883a 	mov	r3,r2
   10c40:	e0bffa17 	ldw	r2,-24(fp)
   10c44:	0085c83a 	sub	r2,zero,r2
   10c48:	18800015 	stw	r2,0(r3)
    return -1;
   10c4c:	00bfffc4 	movi	r2,-1
   10c50:	00000106 	br	10c58 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10c54:	e0bff917 	ldw	r2,-28(fp)
}
   10c58:	e037883a 	mov	sp,fp
   10c5c:	dfc00117 	ldw	ra,4(sp)
   10c60:	df000017 	ldw	fp,0(sp)
   10c64:	dec00204 	addi	sp,sp,8
   10c68:	f800283a 	ret

00010c6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10c6c:	defffa04 	addi	sp,sp,-24
   10c70:	df000515 	stw	fp,20(sp)
   10c74:	df000504 	addi	fp,sp,20
   10c78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c7c:	0005303a 	rdctl	r2,status
   10c80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c84:	e0fffc17 	ldw	r3,-16(fp)
   10c88:	00bfff84 	movi	r2,-2
   10c8c:	1884703a 	and	r2,r3,r2
   10c90:	1001703a 	wrctl	status,r2
  
  return context;
   10c94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10c98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10c9c:	e0bfff17 	ldw	r2,-4(fp)
   10ca0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10ca4:	e0bffd17 	ldw	r2,-12(fp)
   10ca8:	10800017 	ldw	r2,0(r2)
   10cac:	e0fffd17 	ldw	r3,-12(fp)
   10cb0:	18c00117 	ldw	r3,4(r3)
   10cb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10cb8:	e0bffd17 	ldw	r2,-12(fp)
   10cbc:	10800117 	ldw	r2,4(r2)
   10cc0:	e0fffd17 	ldw	r3,-12(fp)
   10cc4:	18c00017 	ldw	r3,0(r3)
   10cc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	e0fffd17 	ldw	r3,-12(fp)
   10cd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10cd8:	e0bffd17 	ldw	r2,-12(fp)
   10cdc:	e0fffd17 	ldw	r3,-12(fp)
   10ce0:	10c00015 	stw	r3,0(r2)
   10ce4:	e0bffb17 	ldw	r2,-20(fp)
   10ce8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cec:	e0bffe17 	ldw	r2,-8(fp)
   10cf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10cf4:	0001883a 	nop
   10cf8:	e037883a 	mov	sp,fp
   10cfc:	df000017 	ldw	fp,0(sp)
   10d00:	dec00104 	addi	sp,sp,4
   10d04:	f800283a 	ret

00010d08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10d08:	defffb04 	addi	sp,sp,-20
   10d0c:	dfc00415 	stw	ra,16(sp)
   10d10:	df000315 	stw	fp,12(sp)
   10d14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10d18:	d0a00e17 	ldw	r2,-32712(gp)
   10d1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10d20:	d0a72e17 	ldw	r2,-25416(gp)
   10d24:	10800044 	addi	r2,r2,1
   10d28:	d0a72e15 	stw	r2,-25416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10d2c:	00002e06 	br	10de8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10d30:	e0bffd17 	ldw	r2,-12(fp)
   10d34:	10800017 	ldw	r2,0(r2)
   10d38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	10800403 	ldbu	r2,16(r2)
   10d44:	10803fcc 	andi	r2,r2,255
   10d48:	10000426 	beq	r2,zero,10d5c <alt_tick+0x54>
   10d4c:	d0a72e17 	ldw	r2,-25416(gp)
   10d50:	1000021e 	bne	r2,zero,10d5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10d54:	e0bffd17 	ldw	r2,-12(fp)
   10d58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10d5c:	e0bffd17 	ldw	r2,-12(fp)
   10d60:	10800217 	ldw	r2,8(r2)
   10d64:	d0e72e17 	ldw	r3,-25416(gp)
   10d68:	18801d36 	bltu	r3,r2,10de0 <alt_tick+0xd8>
   10d6c:	e0bffd17 	ldw	r2,-12(fp)
   10d70:	10800403 	ldbu	r2,16(r2)
   10d74:	10803fcc 	andi	r2,r2,255
   10d78:	1000191e 	bne	r2,zero,10de0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10d7c:	e0bffd17 	ldw	r2,-12(fp)
   10d80:	10800317 	ldw	r2,12(r2)
   10d84:	e0fffd17 	ldw	r3,-12(fp)
   10d88:	18c00517 	ldw	r3,20(r3)
   10d8c:	1809883a 	mov	r4,r3
   10d90:	103ee83a 	callr	r2
   10d94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10d98:	e0bfff17 	ldw	r2,-4(fp)
   10d9c:	1000031e 	bne	r2,zero,10dac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10da0:	e13ffd17 	ldw	r4,-12(fp)
   10da4:	0010c6c0 	call	10c6c <alt_alarm_stop>
   10da8:	00000d06 	br	10de0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	10c00217 	ldw	r3,8(r2)
   10db4:	e0bfff17 	ldw	r2,-4(fp)
   10db8:	1887883a 	add	r3,r3,r2
   10dbc:	e0bffd17 	ldw	r2,-12(fp)
   10dc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10dc4:	e0bffd17 	ldw	r2,-12(fp)
   10dc8:	10c00217 	ldw	r3,8(r2)
   10dcc:	d0a72e17 	ldw	r2,-25416(gp)
   10dd0:	1880032e 	bgeu	r3,r2,10de0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10dd4:	e0bffd17 	ldw	r2,-12(fp)
   10dd8:	00c00044 	movi	r3,1
   10ddc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10de0:	e0bffe17 	ldw	r2,-8(fp)
   10de4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10de8:	e0fffd17 	ldw	r3,-12(fp)
   10dec:	d0a00e04 	addi	r2,gp,-32712
   10df0:	18bfcf1e 	bne	r3,r2,10d30 <__alt_data_end+0xff010d30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10df4:	0001883a 	nop
}
   10df8:	0001883a 	nop
   10dfc:	e037883a 	mov	sp,fp
   10e00:	dfc00117 	ldw	ra,4(sp)
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00204 	addi	sp,sp,8
   10e0c:	f800283a 	ret

00010e10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10e10:	deffff04 	addi	sp,sp,-4
   10e14:	df000015 	stw	fp,0(sp)
   10e18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10e1c:	000170fa 	wrctl	ienable,zero
}
   10e20:	0001883a 	nop
   10e24:	e037883a 	mov	sp,fp
   10e28:	df000017 	ldw	fp,0(sp)
   10e2c:	dec00104 	addi	sp,sp,4
   10e30:	f800283a 	ret

00010e34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10e34:	defffa04 	addi	sp,sp,-24
   10e38:	dfc00515 	stw	ra,20(sp)
   10e3c:	df000415 	stw	fp,16(sp)
   10e40:	df000404 	addi	fp,sp,16
   10e44:	e13ffe15 	stw	r4,-8(fp)
   10e48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10e4c:	e0bfff17 	ldw	r2,-4(fp)
   10e50:	10800017 	ldw	r2,0(r2)
   10e54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10e58:	e13ffe17 	ldw	r4,-8(fp)
   10e5c:	00036f00 	call	36f0 <strlen>
   10e60:	10800044 	addi	r2,r2,1
   10e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e68:	00000d06 	br	10ea0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10800217 	ldw	r2,8(r2)
   10e74:	e0fffd17 	ldw	r3,-12(fp)
   10e78:	180d883a 	mov	r6,r3
   10e7c:	e17ffe17 	ldw	r5,-8(fp)
   10e80:	1009883a 	mov	r4,r2
   10e84:	00111e80 	call	111e8 <memcmp>
   10e88:	1000021e 	bne	r2,zero,10e94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10e8c:	e0bffc17 	ldw	r2,-16(fp)
   10e90:	00000706 	br	10eb0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10e94:	e0bffc17 	ldw	r2,-16(fp)
   10e98:	10800017 	ldw	r2,0(r2)
   10e9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10ea0:	e0fffc17 	ldw	r3,-16(fp)
   10ea4:	e0bfff17 	ldw	r2,-4(fp)
   10ea8:	18bff01e 	bne	r3,r2,10e6c <__alt_data_end+0xff010e6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10eac:	0005883a 	mov	r2,zero
}
   10eb0:	e037883a 	mov	sp,fp
   10eb4:	dfc00117 	ldw	ra,4(sp)
   10eb8:	df000017 	ldw	fp,0(sp)
   10ebc:	dec00204 	addi	sp,sp,8
   10ec0:	f800283a 	ret

00010ec4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ec4:	defffb04 	addi	sp,sp,-20
   10ec8:	dfc00415 	stw	ra,16(sp)
   10ecc:	df000315 	stw	fp,12(sp)
   10ed0:	df000304 	addi	fp,sp,12
   10ed4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10ed8:	d0a00617 	ldw	r2,-32744(gp)
   10edc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ee0:	00003106 	br	10fa8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10ee4:	e0bffd17 	ldw	r2,-12(fp)
   10ee8:	10800217 	ldw	r2,8(r2)
   10eec:	1009883a 	mov	r4,r2
   10ef0:	00036f00 	call	36f0 <strlen>
   10ef4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10ef8:	e0bffd17 	ldw	r2,-12(fp)
   10efc:	10c00217 	ldw	r3,8(r2)
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	10bfffc4 	addi	r2,r2,-1
   10f08:	1885883a 	add	r2,r3,r2
   10f0c:	10800003 	ldbu	r2,0(r2)
   10f10:	10803fcc 	andi	r2,r2,255
   10f14:	1080201c 	xori	r2,r2,128
   10f18:	10bfe004 	addi	r2,r2,-128
   10f1c:	10800bd8 	cmpnei	r2,r2,47
   10f20:	1000031e 	bne	r2,zero,10f30 <alt_find_file+0x6c>
    {
      len -= 1;
   10f24:	e0bffe17 	ldw	r2,-8(fp)
   10f28:	10bfffc4 	addi	r2,r2,-1
   10f2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	e0ffff17 	ldw	r3,-4(fp)
   10f38:	1885883a 	add	r2,r3,r2
   10f3c:	10800003 	ldbu	r2,0(r2)
   10f40:	10803fcc 	andi	r2,r2,255
   10f44:	1080201c 	xori	r2,r2,128
   10f48:	10bfe004 	addi	r2,r2,-128
   10f4c:	10800be0 	cmpeqi	r2,r2,47
   10f50:	1000081e 	bne	r2,zero,10f74 <alt_find_file+0xb0>
   10f54:	e0bffe17 	ldw	r2,-8(fp)
   10f58:	e0ffff17 	ldw	r3,-4(fp)
   10f5c:	1885883a 	add	r2,r3,r2
   10f60:	10800003 	ldbu	r2,0(r2)
   10f64:	10803fcc 	andi	r2,r2,255
   10f68:	1080201c 	xori	r2,r2,128
   10f6c:	10bfe004 	addi	r2,r2,-128
   10f70:	10000a1e 	bne	r2,zero,10f9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10f74:	e0bffd17 	ldw	r2,-12(fp)
   10f78:	10800217 	ldw	r2,8(r2)
   10f7c:	e0fffe17 	ldw	r3,-8(fp)
   10f80:	180d883a 	mov	r6,r3
   10f84:	e17fff17 	ldw	r5,-4(fp)
   10f88:	1009883a 	mov	r4,r2
   10f8c:	00111e80 	call	111e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f90:	1000021e 	bne	r2,zero,10f9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10f94:	e0bffd17 	ldw	r2,-12(fp)
   10f98:	00000706 	br	10fb8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	10800017 	ldw	r2,0(r2)
   10fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10fa8:	e0fffd17 	ldw	r3,-12(fp)
   10fac:	d0a00604 	addi	r2,gp,-32744
   10fb0:	18bfcc1e 	bne	r3,r2,10ee4 <__alt_data_end+0xff010ee4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10fb4:	0005883a 	mov	r2,zero
}
   10fb8:	e037883a 	mov	sp,fp
   10fbc:	dfc00117 	ldw	ra,4(sp)
   10fc0:	df000017 	ldw	fp,0(sp)
   10fc4:	dec00204 	addi	sp,sp,8
   10fc8:	f800283a 	ret

00010fcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10fcc:	defffc04 	addi	sp,sp,-16
   10fd0:	df000315 	stw	fp,12(sp)
   10fd4:	df000304 	addi	fp,sp,12
   10fd8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10fdc:	00bffa04 	movi	r2,-24
   10fe0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10fe4:	e03ffd15 	stw	zero,-12(fp)
   10fe8:	00001906 	br	11050 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10fec:	00800074 	movhi	r2,1
   10ff0:	1089ae04 	addi	r2,r2,9912
   10ff4:	e0fffd17 	ldw	r3,-12(fp)
   10ff8:	18c00324 	muli	r3,r3,12
   10ffc:	10c5883a 	add	r2,r2,r3
   11000:	10800017 	ldw	r2,0(r2)
   11004:	10000f1e 	bne	r2,zero,11044 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11008:	00800074 	movhi	r2,1
   1100c:	1089ae04 	addi	r2,r2,9912
   11010:	e0fffd17 	ldw	r3,-12(fp)
   11014:	18c00324 	muli	r3,r3,12
   11018:	10c5883a 	add	r2,r2,r3
   1101c:	e0ffff17 	ldw	r3,-4(fp)
   11020:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11024:	d0e00a17 	ldw	r3,-32728(gp)
   11028:	e0bffd17 	ldw	r2,-12(fp)
   1102c:	1880020e 	bge	r3,r2,11038 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11030:	e0bffd17 	ldw	r2,-12(fp)
   11034:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11040:	00000606 	br	1105c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11044:	e0bffd17 	ldw	r2,-12(fp)
   11048:	10800044 	addi	r2,r2,1
   1104c:	e0bffd15 	stw	r2,-12(fp)
   11050:	e0bffd17 	ldw	r2,-12(fp)
   11054:	10800810 	cmplti	r2,r2,32
   11058:	103fe41e 	bne	r2,zero,10fec <__alt_data_end+0xff010fec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1105c:	e0bffe17 	ldw	r2,-8(fp)
}
   11060:	e037883a 	mov	sp,fp
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00104 	addi	sp,sp,4
   1106c:	f800283a 	ret

00011070 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11070:	defffb04 	addi	sp,sp,-20
   11074:	df000415 	stw	fp,16(sp)
   11078:	df000404 	addi	fp,sp,16
   1107c:	e13ffe15 	stw	r4,-8(fp)
   11080:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11084:	e0bfff17 	ldw	r2,-4(fp)
   11088:	10840070 	cmpltui	r2,r2,4097
   1108c:	1000021e 	bne	r2,zero,11098 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11090:	00840004 	movi	r2,4096
   11094:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11098:	e0fffe17 	ldw	r3,-8(fp)
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	1885883a 	add	r2,r3,r2
   110a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   110a8:	e0bffe17 	ldw	r2,-8(fp)
   110ac:	e0bffc15 	stw	r2,-16(fp)
   110b0:	00000506 	br	110c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   110b4:	e0bffc17 	ldw	r2,-16(fp)
   110b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	10800804 	addi	r2,r2,32
   110c4:	e0bffc15 	stw	r2,-16(fp)
   110c8:	e0fffc17 	ldw	r3,-16(fp)
   110cc:	e0bffd17 	ldw	r2,-12(fp)
   110d0:	18bff836 	bltu	r3,r2,110b4 <__alt_data_end+0xff0110b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   110d4:	e0bffe17 	ldw	r2,-8(fp)
   110d8:	108007cc 	andi	r2,r2,31
   110dc:	10000226 	beq	r2,zero,110e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   110e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   110ec:	0001883a 	nop
   110f0:	e037883a 	mov	sp,fp
   110f4:	df000017 	ldw	fp,0(sp)
   110f8:	dec00104 	addi	sp,sp,4
   110fc:	f800283a 	ret

00011100 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11100:	defffe04 	addi	sp,sp,-8
   11104:	df000115 	stw	fp,4(sp)
   11108:	df000104 	addi	fp,sp,4
   1110c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11110:	e0bfff17 	ldw	r2,-4(fp)
   11114:	10bffe84 	addi	r2,r2,-6
   11118:	10c00428 	cmpgeui	r3,r2,16
   1111c:	18001a1e 	bne	r3,zero,11188 <alt_exception_cause_generated_bad_addr+0x88>
   11120:	100690ba 	slli	r3,r2,2
   11124:	00800074 	movhi	r2,1
   11128:	10844e04 	addi	r2,r2,4408
   1112c:	1885883a 	add	r2,r3,r2
   11130:	10800017 	ldw	r2,0(r2)
   11134:	1000683a 	jmp	r2
   11138:	00011178 	rdprs	zero,zero,1093
   1113c:	00011178 	rdprs	zero,zero,1093
   11140:	00011188 	cmpgei	zero,zero,1094
   11144:	00011188 	cmpgei	zero,zero,1094
   11148:	00011188 	cmpgei	zero,zero,1094
   1114c:	00011178 	rdprs	zero,zero,1093
   11150:	00011180 	call	1118 <main+0x188>
   11154:	00011188 	cmpgei	zero,zero,1094
   11158:	00011178 	rdprs	zero,zero,1093
   1115c:	00011178 	rdprs	zero,zero,1093
   11160:	00011188 	cmpgei	zero,zero,1094
   11164:	00011178 	rdprs	zero,zero,1093
   11168:	00011180 	call	1118 <main+0x188>
   1116c:	00011188 	cmpgei	zero,zero,1094
   11170:	00011188 	cmpgei	zero,zero,1094
   11174:	00011178 	rdprs	zero,zero,1093
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11178:	00800044 	movi	r2,1
   1117c:	00000306 	br	1118c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11180:	0005883a 	mov	r2,zero
   11184:	00000106 	br	1118c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11188:	0005883a 	mov	r2,zero
  }
}
   1118c:	e037883a 	mov	sp,fp
   11190:	df000017 	ldw	fp,0(sp)
   11194:	dec00104 	addi	sp,sp,4
   11198:	f800283a 	ret

0001119c <atexit>:
   1119c:	200b883a 	mov	r5,r4
   111a0:	000f883a 	mov	r7,zero
   111a4:	000d883a 	mov	r6,zero
   111a8:	0009883a 	mov	r4,zero
   111ac:	00112641 	jmpi	11264 <__register_exitproc>

000111b0 <exit>:
   111b0:	defffe04 	addi	sp,sp,-8
   111b4:	000b883a 	mov	r5,zero
   111b8:	dc000015 	stw	r16,0(sp)
   111bc:	dfc00115 	stw	ra,4(sp)
   111c0:	2021883a 	mov	r16,r4
   111c4:	001137c0 	call	1137c <__call_exitprocs>
   111c8:	00800074 	movhi	r2,1
   111cc:	108e2804 	addi	r2,r2,14496
   111d0:	11000017 	ldw	r4,0(r2)
   111d4:	20800f17 	ldw	r2,60(r4)
   111d8:	10000126 	beq	r2,zero,111e0 <exit+0x30>
   111dc:	103ee83a 	callr	r2
   111e0:	8009883a 	mov	r4,r16
   111e4:	00114fc0 	call	114fc <_exit>

000111e8 <memcmp>:
   111e8:	01c000c4 	movi	r7,3
   111ec:	3980192e 	bgeu	r7,r6,11254 <memcmp+0x6c>
   111f0:	2144b03a 	or	r2,r4,r5
   111f4:	11c4703a 	and	r2,r2,r7
   111f8:	10000f26 	beq	r2,zero,11238 <memcmp+0x50>
   111fc:	20800003 	ldbu	r2,0(r4)
   11200:	28c00003 	ldbu	r3,0(r5)
   11204:	10c0151e 	bne	r2,r3,1125c <memcmp+0x74>
   11208:	31bfff84 	addi	r6,r6,-2
   1120c:	01ffffc4 	movi	r7,-1
   11210:	00000406 	br	11224 <memcmp+0x3c>
   11214:	20800003 	ldbu	r2,0(r4)
   11218:	28c00003 	ldbu	r3,0(r5)
   1121c:	31bfffc4 	addi	r6,r6,-1
   11220:	10c00e1e 	bne	r2,r3,1125c <memcmp+0x74>
   11224:	21000044 	addi	r4,r4,1
   11228:	29400044 	addi	r5,r5,1
   1122c:	31fff91e 	bne	r6,r7,11214 <__alt_data_end+0xff011214>
   11230:	0005883a 	mov	r2,zero
   11234:	f800283a 	ret
   11238:	20c00017 	ldw	r3,0(r4)
   1123c:	28800017 	ldw	r2,0(r5)
   11240:	18bfee1e 	bne	r3,r2,111fc <__alt_data_end+0xff0111fc>
   11244:	31bfff04 	addi	r6,r6,-4
   11248:	21000104 	addi	r4,r4,4
   1124c:	29400104 	addi	r5,r5,4
   11250:	39bff936 	bltu	r7,r6,11238 <__alt_data_end+0xff011238>
   11254:	303fe91e 	bne	r6,zero,111fc <__alt_data_end+0xff0111fc>
   11258:	003ff506 	br	11230 <__alt_data_end+0xff011230>
   1125c:	10c5c83a 	sub	r2,r2,r3
   11260:	f800283a 	ret

00011264 <__register_exitproc>:
   11264:	defffa04 	addi	sp,sp,-24
   11268:	dc000315 	stw	r16,12(sp)
   1126c:	04000074 	movhi	r16,1
   11270:	840e2804 	addi	r16,r16,14496
   11274:	80c00017 	ldw	r3,0(r16)
   11278:	dc400415 	stw	r17,16(sp)
   1127c:	dfc00515 	stw	ra,20(sp)
   11280:	18805217 	ldw	r2,328(r3)
   11284:	2023883a 	mov	r17,r4
   11288:	10003726 	beq	r2,zero,11368 <__register_exitproc+0x104>
   1128c:	10c00117 	ldw	r3,4(r2)
   11290:	010007c4 	movi	r4,31
   11294:	20c00e16 	blt	r4,r3,112d0 <__register_exitproc+0x6c>
   11298:	1a000044 	addi	r8,r3,1
   1129c:	8800221e 	bne	r17,zero,11328 <__register_exitproc+0xc4>
   112a0:	18c00084 	addi	r3,r3,2
   112a4:	18c7883a 	add	r3,r3,r3
   112a8:	18c7883a 	add	r3,r3,r3
   112ac:	12000115 	stw	r8,4(r2)
   112b0:	10c7883a 	add	r3,r2,r3
   112b4:	19400015 	stw	r5,0(r3)
   112b8:	0005883a 	mov	r2,zero
   112bc:	dfc00517 	ldw	ra,20(sp)
   112c0:	dc400417 	ldw	r17,16(sp)
   112c4:	dc000317 	ldw	r16,12(sp)
   112c8:	dec00604 	addi	sp,sp,24
   112cc:	f800283a 	ret
   112d0:	00800034 	movhi	r2,0
   112d4:	108b4a04 	addi	r2,r2,11560
   112d8:	10002626 	beq	r2,zero,11374 <__register_exitproc+0x110>
   112dc:	01006404 	movi	r4,400
   112e0:	d9400015 	stw	r5,0(sp)
   112e4:	d9800115 	stw	r6,4(sp)
   112e8:	d9c00215 	stw	r7,8(sp)
   112ec:	0002d280 	call	2d28 <malloc>
   112f0:	d9400017 	ldw	r5,0(sp)
   112f4:	d9800117 	ldw	r6,4(sp)
   112f8:	d9c00217 	ldw	r7,8(sp)
   112fc:	10001d26 	beq	r2,zero,11374 <__register_exitproc+0x110>
   11300:	81000017 	ldw	r4,0(r16)
   11304:	10000115 	stw	zero,4(r2)
   11308:	02000044 	movi	r8,1
   1130c:	22405217 	ldw	r9,328(r4)
   11310:	0007883a 	mov	r3,zero
   11314:	12400015 	stw	r9,0(r2)
   11318:	20805215 	stw	r2,328(r4)
   1131c:	10006215 	stw	zero,392(r2)
   11320:	10006315 	stw	zero,396(r2)
   11324:	883fde26 	beq	r17,zero,112a0 <__alt_data_end+0xff0112a0>
   11328:	18c9883a 	add	r4,r3,r3
   1132c:	2109883a 	add	r4,r4,r4
   11330:	1109883a 	add	r4,r2,r4
   11334:	21802215 	stw	r6,136(r4)
   11338:	01800044 	movi	r6,1
   1133c:	12406217 	ldw	r9,392(r2)
   11340:	30cc983a 	sll	r6,r6,r3
   11344:	4992b03a 	or	r9,r9,r6
   11348:	12406215 	stw	r9,392(r2)
   1134c:	21c04215 	stw	r7,264(r4)
   11350:	01000084 	movi	r4,2
   11354:	893fd21e 	bne	r17,r4,112a0 <__alt_data_end+0xff0112a0>
   11358:	11006317 	ldw	r4,396(r2)
   1135c:	218cb03a 	or	r6,r4,r6
   11360:	11806315 	stw	r6,396(r2)
   11364:	003fce06 	br	112a0 <__alt_data_end+0xff0112a0>
   11368:	18805304 	addi	r2,r3,332
   1136c:	18805215 	stw	r2,328(r3)
   11370:	003fc606 	br	1128c <__alt_data_end+0xff01128c>
   11374:	00bfffc4 	movi	r2,-1
   11378:	003fd006 	br	112bc <__alt_data_end+0xff0112bc>

0001137c <__call_exitprocs>:
   1137c:	defff504 	addi	sp,sp,-44
   11380:	df000915 	stw	fp,36(sp)
   11384:	dd400615 	stw	r21,24(sp)
   11388:	dc800315 	stw	r18,12(sp)
   1138c:	dfc00a15 	stw	ra,40(sp)
   11390:	ddc00815 	stw	r23,32(sp)
   11394:	dd800715 	stw	r22,28(sp)
   11398:	dd000515 	stw	r20,20(sp)
   1139c:	dcc00415 	stw	r19,16(sp)
   113a0:	dc400215 	stw	r17,8(sp)
   113a4:	dc000115 	stw	r16,4(sp)
   113a8:	d9000015 	stw	r4,0(sp)
   113ac:	2839883a 	mov	fp,r5
   113b0:	04800044 	movi	r18,1
   113b4:	057fffc4 	movi	r21,-1
   113b8:	00800074 	movhi	r2,1
   113bc:	108e2804 	addi	r2,r2,14496
   113c0:	12000017 	ldw	r8,0(r2)
   113c4:	45005217 	ldw	r20,328(r8)
   113c8:	44c05204 	addi	r19,r8,328
   113cc:	a0001c26 	beq	r20,zero,11440 <__call_exitprocs+0xc4>
   113d0:	a0800117 	ldw	r2,4(r20)
   113d4:	15ffffc4 	addi	r23,r2,-1
   113d8:	b8000d16 	blt	r23,zero,11410 <__call_exitprocs+0x94>
   113dc:	14000044 	addi	r16,r2,1
   113e0:	8421883a 	add	r16,r16,r16
   113e4:	8421883a 	add	r16,r16,r16
   113e8:	84402004 	addi	r17,r16,128
   113ec:	a463883a 	add	r17,r20,r17
   113f0:	a421883a 	add	r16,r20,r16
   113f4:	e0001e26 	beq	fp,zero,11470 <__call_exitprocs+0xf4>
   113f8:	80804017 	ldw	r2,256(r16)
   113fc:	e0801c26 	beq	fp,r2,11470 <__call_exitprocs+0xf4>
   11400:	bdffffc4 	addi	r23,r23,-1
   11404:	843fff04 	addi	r16,r16,-4
   11408:	8c7fff04 	addi	r17,r17,-4
   1140c:	bd7ff91e 	bne	r23,r21,113f4 <__alt_data_end+0xff0113f4>
   11410:	00800034 	movhi	r2,0
   11414:	108b4f04 	addi	r2,r2,11580
   11418:	10000926 	beq	r2,zero,11440 <__call_exitprocs+0xc4>
   1141c:	a0800117 	ldw	r2,4(r20)
   11420:	1000301e 	bne	r2,zero,114e4 <__call_exitprocs+0x168>
   11424:	a0800017 	ldw	r2,0(r20)
   11428:	10003226 	beq	r2,zero,114f4 <__call_exitprocs+0x178>
   1142c:	a009883a 	mov	r4,r20
   11430:	98800015 	stw	r2,0(r19)
   11434:	0002d3c0 	call	2d3c <free>
   11438:	9d000017 	ldw	r20,0(r19)
   1143c:	a03fe41e 	bne	r20,zero,113d0 <__alt_data_end+0xff0113d0>
   11440:	dfc00a17 	ldw	ra,40(sp)
   11444:	df000917 	ldw	fp,36(sp)
   11448:	ddc00817 	ldw	r23,32(sp)
   1144c:	dd800717 	ldw	r22,28(sp)
   11450:	dd400617 	ldw	r21,24(sp)
   11454:	dd000517 	ldw	r20,20(sp)
   11458:	dcc00417 	ldw	r19,16(sp)
   1145c:	dc800317 	ldw	r18,12(sp)
   11460:	dc400217 	ldw	r17,8(sp)
   11464:	dc000117 	ldw	r16,4(sp)
   11468:	dec00b04 	addi	sp,sp,44
   1146c:	f800283a 	ret
   11470:	a0800117 	ldw	r2,4(r20)
   11474:	80c00017 	ldw	r3,0(r16)
   11478:	10bfffc4 	addi	r2,r2,-1
   1147c:	15c01426 	beq	r2,r23,114d0 <__call_exitprocs+0x154>
   11480:	80000015 	stw	zero,0(r16)
   11484:	183fde26 	beq	r3,zero,11400 <__alt_data_end+0xff011400>
   11488:	95c8983a 	sll	r4,r18,r23
   1148c:	a0806217 	ldw	r2,392(r20)
   11490:	a5800117 	ldw	r22,4(r20)
   11494:	2084703a 	and	r2,r4,r2
   11498:	10000b26 	beq	r2,zero,114c8 <__call_exitprocs+0x14c>
   1149c:	a0806317 	ldw	r2,396(r20)
   114a0:	2088703a 	and	r4,r4,r2
   114a4:	20000c1e 	bne	r4,zero,114d8 <__call_exitprocs+0x15c>
   114a8:	89400017 	ldw	r5,0(r17)
   114ac:	d9000017 	ldw	r4,0(sp)
   114b0:	183ee83a 	callr	r3
   114b4:	a0800117 	ldw	r2,4(r20)
   114b8:	15bfbf1e 	bne	r2,r22,113b8 <__alt_data_end+0xff0113b8>
   114bc:	98800017 	ldw	r2,0(r19)
   114c0:	153fcf26 	beq	r2,r20,11400 <__alt_data_end+0xff011400>
   114c4:	003fbc06 	br	113b8 <__alt_data_end+0xff0113b8>
   114c8:	183ee83a 	callr	r3
   114cc:	003ff906 	br	114b4 <__alt_data_end+0xff0114b4>
   114d0:	a5c00115 	stw	r23,4(r20)
   114d4:	003feb06 	br	11484 <__alt_data_end+0xff011484>
   114d8:	89000017 	ldw	r4,0(r17)
   114dc:	183ee83a 	callr	r3
   114e0:	003ff406 	br	114b4 <__alt_data_end+0xff0114b4>
   114e4:	a0800017 	ldw	r2,0(r20)
   114e8:	a027883a 	mov	r19,r20
   114ec:	1029883a 	mov	r20,r2
   114f0:	003fb606 	br	113cc <__alt_data_end+0xff0113cc>
   114f4:	0005883a 	mov	r2,zero
   114f8:	003ffb06 	br	114e8 <__alt_data_end+0xff0114e8>

000114fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   114fc:	defffd04 	addi	sp,sp,-12
   11500:	df000215 	stw	fp,8(sp)
   11504:	df000204 	addi	fp,sp,8
   11508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1150c:	0001883a 	nop
   11510:	e0bfff17 	ldw	r2,-4(fp)
   11514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1151c:	10000226 	beq	r2,zero,11528 <_exit+0x2c>
    ALT_SIM_FAIL();
   11520:	002af070 	cmpltui	zero,zero,43969
   11524:	00000106 	br	1152c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1152c:	003fff06 	br	1152c <__alt_data_end+0xff01152c>
