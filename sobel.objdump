
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000123cc memsz 0x000123cc flags r-x
    LOAD off    0x000133ec vaddr 0x000123ec paddr 0x00013fd8 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00015bc4 vaddr 0x00015bc4 paddr 0x00015bc4 align 2**12
         filesz 0x00000000 memsz 0x000001d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000119ec  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00011c30  00011c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000123ec  00013fd8  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001d4  00015bc4  00015bc4  00015bc4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015d98  00015d98  00014fd8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014fd8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010f0  00000000  00000000  00015000  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002859c  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a315  00000000  00000000  0003e68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ce0d  00000000  00000000  000489a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002850  00000000  00000000  000557b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000402c  00000000  00000000  00058000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001995c  00000000  00000000  0005c02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00075988  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  000759e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b1ae  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007b1b1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007b1bd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007b1be  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007b1bf  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007b1c3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007b1c7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007b1cb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007b1d4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007b1dd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007b1e6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  0007b1f1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007b229  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078d96  00000000  00000000  00080d01  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011c30 l    d  .rodata	00000000 .rodata
000123ec l    d  .rwdata	00000000 .rwdata
00015bc4 l    d  .bss	00000000 .bss
00015d98 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001223a l     O .rodata	00000010 zeroes.4404
00005dfc l     F .text	000000bc __sbprintf
0001224a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000600c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007b3c l     F .text	00000008 __fp_unlock
00007b50 l     F .text	0000019c __sinit.part.1
00007cec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000128f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012d38 l     O .rwdata	00000020 lc_ctype_charset
00012d18 l     O .rwdata	00000020 lc_message_charset
00012d58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001227c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a888 l     F .text	000000fc __sprint_r.part.0
000123b0 l     O .rodata	00000010 blanks.4348
000123a0 l     O .rodata	00000010 zeroes.4349
0000be14 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ef28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f034 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f14c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f22c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f318 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f4ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013fc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f7e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f914 l     F .text	00000034 alt_dev_reg
00012f38 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fc20 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fe2c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010464 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000109b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010e28 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010f68 l     F .text	0000003c alt_get_errno
00010fa4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c6c g     O .bss	00000004 alt_instruction_exception_handler
00009f20 g     F .text	00000074 _mprec_log10
0000a00c g     F .text	0000008c __any_on
0000c3b0 g     F .text	00000054 _isatty_r
00012288 g     O .rodata	00000028 __mprec_tinytens
0000f428 g     F .text	0000007c alt_main
00003a28 g     F .text	000000c0 _puts_r
00015c98 g     O .bss	00000100 alt_irq
0000c404 g     F .text	00000060 _lseek_r
000120e4 g     O .rodata	00000009 gy_array
00013fd8 g       *ABS*	00000000 __flash_rwdata_start
0000db60 g     F .text	00000088 .hidden __eqdf2
00015d98 g       *ABS*	00000000 __alt_heap_start
000039ec g     F .text	0000003c printf
0000c61c g     F .text	0000009c _wcrtomb_r
0000a748 g     F .text	0000005c __sseek
00007e8c g     F .text	00000010 __sinit
0000c4c4 g     F .text	00000140 __swbuf_r
00008954 g     F .text	0000007c _setlocale_r
00007cf4 g     F .text	00000068 __sfmoreglue
0000f4c8 g     F .text	00000024 __malloc_unlock
00000a48 g     F .text	00000014 LCD_Write_Command
00015bfc g     O .bss	00000004 sobel_width
00015be8 g     O .bss	00000004 start_all
00015c5c g     O .bss	00000004 altera_avalon_timer_ts_freq
00008e18 g     F .text	0000015c memmove
00000a5c g     F .text	00000014 LCD_Write_Data
00007e74 g     F .text	00000018 _cleanup
00015bf4 g     O .bss	00000004 end_sobel
0000909c g     F .text	000000a8 _Balloc
00001d78 g     F .text	0000009c sobel_all_init
0000dbe8 g     F .text	000000dc .hidden __gtdf2
00011360 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000c354 g     F .text	0000005c _fstat_r
00015c3c g     O .bss	00000004 errno
0000a6c4 g     F .text	00000008 __seofread
00015c50 g     O .bss	00000004 alt_argv
0001bf98 g       *ABS*	00000000 _gp
0000f7b0 g     F .text	00000030 usleep
0000f738 g     F .text	00000078 alt_uncached_malloc
00015c2c g     O .bss	00000004 array_width
00000668 g     F .text	00000074 cam_set_image_pointer
00012db8 g     O .rwdata	00000180 alt_fd_list
00001e14 g     F .text	000001c8 sobel_all_complete
000025c0 g     F .text	00000010 vga_set_pointer
00011384 g     F .text	00000090 alt_find_dev
00008cd0 g     F .text	00000148 memcpy
00007b44 g     F .text	0000000c _cleanup_r
0000ee4c g     F .text	000000dc .hidden __floatsidf
00010eec g     F .text	0000007c alt_io_redirect
00015be4 g     O .bss	00000004 end_all
0000dcc4 g     F .text	000000f4 .hidden __ltdf2
00011c30 g       *ABS*	00000000 __DTOR_END__
00015c1c g     O .bss	00000004 end_sobel_a
00003ae8 g     F .text	00000014 puts
00011650 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a5fc g     F .text	00000074 __fpclassifyd
00009e7c g     F .text	000000a4 __ratio
0000bdf8 g     F .text	0000001c __vfiprintf_internal
00010024 g     F .text	0000021c altera_avalon_jtag_uart_read
00003188 g     F .text	00000014 malloc
000039bc g     F .text	00000030 _printf_r
0000089c g     F .text	00000008 get_grayscale_picture
000026d8 g     F .text	00000064 .hidden __udivsi3
00011c90 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000f188 g     F .text	000000a4 isatty
000122d8 g     O .rodata	000000c8 __mprec_tens
000089d0 g     F .text	0000000c __locale_charset
000115c0 g     F .text	00000090 alt_icache_flush
00015c38 g     O .bss	00000004 __malloc_top_pad
00015bd0 g     O .bss	00000004 grayscale_array_int
00013fa8 g     O .rwdata	00000004 __mb_cur_max
00008a00 g     F .text	0000000c _localeconv_r
000014b4 g     F .text	00000140 sobel_x
000094a8 g     F .text	0000003c __i2b
00008310 g     F .text	000004bc __sfvwrite_r
00000a70 g     F .text	00000414 init_LCD
00003afc g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000c464 g     F .text	00000060 _read_r
000108f4 g     F .text	00000078 alt_dcache_flush
00015c00 g     O .bss	00000004 sobel_result
00013fc0 g     O .rwdata	00000004 alt_max_fd
0000c048 g     F .text	000000f0 _fclose_r
00007b0c g     F .text	00000030 fflush
00015c34 g     O .bss	00000004 __malloc_max_sbrked_mem
00015bd4 g     O .bss	00000004 grayscale_array
0000d2b4 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00009c24 g     F .text	0000010c __b2d
0000cd7c g     F .text	00000538 .hidden __umoddi3
0000f354 g     F .text	000000d4 lseek
00000964 g     F .text	0000008c i2c_short_read
00013fa0 g     O .rwdata	00000004 _global_impure_ptr
0000a098 g     F .text	00000564 _realloc_r
00015d98 g       *ABS*	00000000 __bss_end
00010d38 g     F .text	000000f0 alt_iic_isr_register
00011258 g     F .text	00000108 alt_tick
00015c14 g     O .bss	00000004 end_conv_grayscale_a
0000c804 g     F .text	00000578 .hidden __udivdi3
0000c2b0 g     F .text	00000024 _fputwc_r
000122b0 g     O .rodata	00000028 __mprec_bigtens
0000928c g     F .text	00000104 __s2b
0000307c g     F .text	000000a8 .hidden __floatunsidf
00009964 g     F .text	00000060 __mcmp
00007eac g     F .text	00000018 __fp_lock_all
00010cec g     F .text	0000004c alt_ic_irq_enabled
00015bc4 g     O .bss	00000004 grayscape_height
000111bc g     F .text	0000009c alt_alarm_stop
00015c60 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012d90 g     O .rwdata	00000028 alt_dev_null
00000f10 g     F .text	00000078 transfer_LCD_with_dma
00001aa4 g     F .text	00000168 sobel_complete
0001096c g     F .text	00000048 alt_dcache_flush_all
00009390 g     F .text	00000068 __hi0bits
0000edcc g     F .text	00000080 .hidden __fixdfsi
00013fd8 g       *ABS*	00000000 __ram_rwdata_end
00013fb8 g     O .rwdata	00000008 alt_dev_list
0000f81c g     F .text	000000f8 write
00010650 g     F .text	00000020 alt_timestamp_freq
000123ec g       *ABS*	00000000 __ram_rodata_end
0000f09c g     F .text	000000b0 fstat
0000dcc4 g     F .text	000000f4 .hidden __ledf2
000096dc g     F .text	00000140 __pow5mult
0000a99c g     F .text	0000145c ___vfiprintf_internal_r
00015c48 g     O .bss	00000004 __nlocale_changed
0000273c g     F .text	00000058 .hidden __umodsi3
0000083c g     F .text	00000050 conv_grayscale_partial
000007e4 g     F .text	00000058 conv_grayscale_init
00001d68 g     F .text	00000008 GetSobel_rgb
00015d98 g       *ABS*	00000000 end
00001d70 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001888 g     F .text	00000168 sobel_y_with_rgb
0000fb60 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00015c18 g     O .bss	00000004 start_conv_grayscale_a
00011c30 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
000104dc g     F .text	0000007c alt_avalon_timer_sc_init
00003124 g     F .text	00000064 .hidden __clzsi2
00010240 g     F .text	00000224 altera_avalon_jtag_uart_write
00007e9c g     F .text	00000004 __sfp_lock_acquire
00008bec g     F .text	000000e4 memchr
00003be8 g     F .text	000021f8 ___vfprintf_internal_r
00008000 g     F .text	00000310 _free_r
000089dc g     F .text	00000010 __locale_mb_cur_max
00001770 g     F .text	00000118 sobel_y
00011db8 g     O .rodata	00000140 noise_reduction_reg_settings_array
00011a7c g     F .text	00000180 __call_exitprocs
00015c44 g     O .bss	00000004 __mlocale_changed
00013f98 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015bec g     O .bss	00000004 end_conv_grayscale
00015c64 g     O .bss	00000004 _alt_tick_rate
0000981c g     F .text	00000148 __lshift
00015c68 g     O .bss	00000004 _alt_nticks
0000f528 g     F .text	000000fc read
0000f980 g     F .text	0000007c alt_sys_init
000015f4 g     F .text	0000017c sobel_x_with_rgb
00011964 g     F .text	00000118 __register_exitproc
000094e4 g     F .text	000001f8 __multiply
0000fecc g     F .text	00000068 altera_avalon_jtag_uart_close
000123ec g       *ABS*	00000000 __ram_rwdata_start
00011c30 g       *ABS*	00000000 __ram_rodata_start
00015c70 g     O .bss	00000028 __malloc_current_mallinfo
00009d30 g     F .text	0000014c __d2b
00015c04 g     O .bss	00000004 sobel_height
00015bcc g     O .bss	00000004 grayscale_width_int
00000720 g     F .text	00000014 enable_continues_mode
00002168 g     F .text	00000124 sobel_all_partial
0000f9fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001300 g     F .text	000000f8 init_sobel_arrays
0001151c g     F .text	000000a4 alt_get_fd
0001079c g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000bf30 g     F .text	00000054 _close_r
000118e8 g     F .text	0000007c memcmp
0000fabc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d98 g       *ABS*	00000000 __alt_stack_base
0000fb0c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005eb8 g     F .text	00000154 __swsetup_r
00002794 g     F .text	000008e8 .hidden __divdf3
00007d5c g     F .text	00000118 __sfp
00009f94 g     F .text	00000078 __copybits
000124ec g     O .rwdata	00000408 __malloc_av_
00007ea8 g     F .text	00000004 __sinit_lock_release
0000ddb8 g     F .text	00000718 .hidden __muldf3
0000a670 g     F .text	00000054 __sread
00011414 g     F .text	00000108 alt_find_file
000109f0 g     F .text	000000a4 alt_dev_llist_insert
0000f4a4 g     F .text	00000024 __malloc_lock
0000f688 g     F .text	000000b0 sbrk
00007ab0 g     F .text	0000005c _fflush_r
0000bf84 g     F .text	000000c4 _calloc_r
00015be0 g     O .bss	00000004 start_global
000123ec g     O .rwdata	00000100 .hidden __divsi3_table
00015bc4 g       *ABS*	00000000 __bss_start
00008f74 g     F .text	00000128 memset
00000f88 g     F .text	00000378 main
00015c54 g     O .bss	00000004 alt_envp
00015c30 g     O .bss	00000004 __malloc_max_total_mem
0000088c g     F .text	00000008 get_grayscale_width
0000fa5c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c604 g     F .text	00000018 __swbuf
00015c08 g     O .bss	00000004 sobel_x_result
0000a7a4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000c138 g     F .text	00000014 fclose
00015c24 g     O .bss	00000004 size
00010558 g     F .text	00000078 alt_timestamp_start
0000620c g     F .text	00001688 _dtoa_r
000031b0 g     F .text	0000080c _malloc_r
0000c778 g     F .text	00000030 __ascii_wctomb
00013fc4 g     O .rwdata	00000004 alt_errno
000087cc g     F .text	000000c4 _fwalk
00015c28 g     O .bss	00000004 array_height
00015bf8 g     O .bss	00000004 start_sobel
000025e0 g     F .text	00000084 .hidden __divsi3
00007edc g     F .text	00000124 _malloc_trim_r
00011c30 g       *ABS*	00000000 __CTOR_END__
00015bc8 g     O .bss	00000004 grayscale_width
0000a7ac g     F .text	000000dc strcmp
00000e84 g     F .text	0000008c transfer_LCD_no_dma
00011c30 g       *ABS*	00000000 __flash_rodata_start
00011c30 g       *ABS*	00000000 __DTOR_LIST__
0000db60 g     F .text	00000088 .hidden __nedf2
00011ef8 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f948 g     F .text	00000038 alt_irq_init
0000f624 g     F .text	00000064 alt_release_fd
0000228c g     F .text	0000032c sobel_all_complete_fusion
000008bc g     F .text	000000a8 i2c_auto_detect
00011738 g     F .text	00000018 memalign
000120f6 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00015c40 g     O .bss	00000004 _PathLocale
000008a4 g     F .text	00000018 i2c_busy_wait
000116ec g     F .text	00000014 atexit
0000bed0 g     F .text	00000060 _write_r
00008a0c g     F .text	00000018 setlocale
00013fa4 g     O .rwdata	00000004 _impure_ptr
00015c4c g     O .bss	00000004 alt_argc
00007894 g     F .text	0000021c __sflush_r
00015c58 g     O .bss	00000004 altera_avalon_timer_ts_base
00010af4 g     F .text	00000060 _do_dtors
000089f8 g     F .text	00000008 __locale_cjk_lang
00001fdc g     F .text	0000018c partial
00000020 g       .exceptions	00000000 alt_irq_entry
00001c0c g     F .text	0000015c sobel_complete_parted
00009bc0 g     F .text	00000064 __ulp
00007ec4 g     F .text	00000018 __fp_unlock_all
00013fb0 g     O .rwdata	00000008 alt_fs_list
00015c0c g     O .bss	00000004 sobel_y_result
000009f0 g     F .text	00000058 i2c_short_write
00015bf0 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015bd8 g     O .bss	00000002 LCD_height
00008a24 g     F .text	0000000c localeconv
000105d0 g     F .text	00000080 alt_timestamp
000025d0 g     F .text	00000010 vga_set_swap
00010b88 g     F .text	00000050 alt_ic_isr_register
000019f0 g     F .text	000000b4 sobel_threshold
00013fd8 g       *ABS*	00000000 _edata
00015d98 g       *ABS*	00000000 _end
0000c14c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000ff34 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000120ed g     O .rodata	00000009 gx_array
00010c60 g     F .text	0000008c alt_ic_irq_disable
0000a6cc g     F .text	0000007c __swrite
00013f9c g     O .rwdata	00000004 __malloc_trim_threshold
00015bda g     O .bss	00000002 LCD_width
00000774 g     F .text	00000070 conv_grayscale
000089ec g     F .text	0000000c __locale_msgcharset
00011700 g     F .text	00000038 exit
00008890 g     F .text	000000c4 _fwalk_reent
000099c4 g     F .text	000001fc __mdiff
00002664 g     F .text	00000074 .hidden __modsi3
00011750 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007ea0 g     F .text	00000004 __sfp_lock_release
00000894 g     F .text	00000008 get_grayscale_height
00011bfc g     F .text	00000034 _exit
000013f8 g     F .text	000000bc sobel_mac
00010670 g     F .text	0000012c alt_alarm_start
00008a30 g     F .text	000001bc __smakebuf_r
00015c10 g     O .bss	00000004 sobel_rgb565
00003b50 g     F .text	00000098 strlen
00011068 g     F .text	00000154 open
0000dbe8 g     F .text	000000dc .hidden __gedf2
00013fac g     O .rwdata	00000004 __wctomb
000025b8 g     F .text	00000008 GetSobelAllResult
0000a984 g     F .text	00000018 __sprint_r
00010b54 g     F .text	00000034 alt_icache_flush_all
00015c20 g     O .bss	00000004 start_sobel_a
00013fcc g     O .rwdata	00000004 alt_priority_mask
00010bd8 g     F .text	00000088 alt_ic_irq_enable
00005de0 g     F .text	0000001c __vfprintf_internal
0000c7a8 g     F .text	0000005c _wctomb_r
0000e4d0 g     F .text	000008fc .hidden __subdf3
000093f8 g     F .text	000000b0 __lo0bits
00013fd0 g     O .rwdata	00000008 alt_alarm_list
00010a94 g     F .text	00000060 _do_ctors
0000c6b8 g     F .text	000000c0 wcrtomb
0000ef64 g     F .text	000000d0 close
00015bdc g     O .bss	00000004 end_global
0000f294 g     F .text	00000084 alt_load
0000c2d4 g     F .text	00000080 fputwc
0000319c g     F .text	00000014 free
00007ea4 g     F .text	00000004 __sinit_lock_acquire
0000916c g     F .text	00000120 __multadd
00009144 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10972604 	addi	r2,r2,23704
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10972604 	addi	r2,r2,23704
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73517 	ldw	r2,-25388(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73517 	ldw	r2,-25388(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6afe614 	ori	gp,gp,49048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	1096f114 	ori	r2,r2,23492

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d76614 	ori	r3,r3,23960

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000f2940 	call	f294 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f4280 	call	f428 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009f00 	call	9f0 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009f00 	call	9f0 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009f00 	call	9f0 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	8407be04 	addi	r16,r16,7928
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009f00 	call	9f0 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009f00 	call	9f0 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84076e04 	addi	r16,r16,7608
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009f00 	call	9f0 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009f00 	call	9f0 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009f00 	call	9f0 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009f00 	call	9f0 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009f00 	call	9f0 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009f00 	call	9f0 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009f00 	call	9f0 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84072404 	addi	r16,r16,7312
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009f00 	call	9f0 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009f00 	call	9f0 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009f00 	call	9f0 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009f01 	jmpi	9f0 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	21070c04 	addi	r4,r4,7216
     620:	297fffcc 	andi	r5,r5,65535
     624:	00039ec0 	call	39ec <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	21071404 	addi	r4,r4,7248
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00039ec0 	call	39ec <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	21071c04 	addi	r4,r4,7280
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	00039ec1 	jmpi	39ec <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int width,
		            int height) {
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;

	for (y = 0 ; y < grayscape_height ; y++) {
     774:	d0e70b17 	ldw	r3,-25556(gp)
     778:	00c0190e 	bge	zero,r3,7e0 <conv_grayscale+0x6c>
     77c:	d0a70d17 	ldw	r2,-25548(gp)
     780:	0015883a 	mov	r10,zero
		y0 = y*grayscale_width_int;
     784:	5091383a 	mul	r8,r10,r2
		for (x = 0 ; x < grayscale_width_int ; x++) {
     788:	0080130e 	bge	zero,r2,7d8 <conv_grayscale+0x64>
     78c:	d2670e17 	ldw	r9,-25544(gp)
     790:	420d883a 	add	r6,r8,r8
     794:	318d883a 	add	r6,r6,r6
     798:	0007883a 	mov	r3,zero
			pos = y0+x;

			pxl = pos<<1;

			grayscale_array_int[pos] = ALT_CI_MULTIPLE_RGB2GRAY_0(pixels[pxl],pixels[pxl+1]);
     79c:	1a05883a 	add	r2,r3,r8
     7a0:	1085883a 	add	r2,r2,r2
     7a4:	1085883a 	add	r2,r2,r2
     7a8:	1085883a 	add	r2,r2,r2
     7ac:	2085883a 	add	r2,r4,r2
     7b0:	11400017 	ldw	r5,0(r2)
     7b4:	10800117 	ldw	r2,4(r2)
     7b8:	498f883a 	add	r7,r9,r6
     7bc:	2885c0f2 	custom	3,r2,r5,r2
     7c0:	38800015 	stw	r2,0(r7)
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;

	for (y = 0 ; y < grayscape_height ; y++) {
		y0 = y*grayscale_width_int;
		for (x = 0 ; x < grayscale_width_int ; x++) {
     7c4:	d0a70d17 	ldw	r2,-25548(gp)
     7c8:	18c00044 	addi	r3,r3,1
     7cc:	31800104 	addi	r6,r6,4
     7d0:	18bff216 	blt	r3,r2,79c <__alt_data_end+0xff00079c>
     7d4:	d0e70b17 	ldw	r3,-25556(gp)
		            int width,
		            int height) {
	int x,y,pos,pxl,y0;
	unsigned int *pixels = (unsigned int *)picture;

	for (y = 0 ; y < grayscape_height ; y++) {
     7d8:	52800044 	addi	r10,r10,1
     7dc:	50ffe916 	blt	r10,r3,784 <__alt_data_end+0xff000784>
     7e0:	f800283a 	ret

000007e4 <conv_grayscale_init>:
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     7e4:	defffd04 	addi	sp,sp,-12
		grayscale_width = width;
		grayscale_width_int = width>>2;
     7e8:	2005d0ba 	srai	r2,r4,2
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     7ec:	dc000015 	stw	r16,0(sp)
     7f0:	2021883a 	mov	r16,r4
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7f4:	d1270f17 	ldw	r4,-25540(gp)
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     7f8:	dc400115 	stw	r17,4(sp)
     7fc:	dfc00215 	stw	ra,8(sp)
		grayscale_width = width;
     800:	d4270c15 	stw	r16,-25552(gp)
		grayscale_width_int = width>>2;
     804:	d0a70d15 	stw	r2,-25548(gp)
		grayscape_height = height;
     808:	d1670b15 	stw	r5,-25556(gp)
			//grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		}
	}
}

void conv_grayscale_init(int width, int height){
     80c:	2823883a 	mov	r17,r5
		grayscale_width = width;
		grayscale_width_int = width>>2;
		grayscape_height = height;
		if (grayscale_array != NULL)
     810:	20000126 	beq	r4,zero,818 <conv_grayscale_init+0x34>
			free(grayscale_array);
     814:	000319c0 	call	319c <free>
		grayscale_array = (unsigned char *) malloc(width* height);
     818:	8449383a 	mul	r4,r16,r17
     81c:	00031880 	call	3188 <malloc>
     820:	d0a70f15 	stw	r2,-25540(gp)
		grayscale_array_int = (unsigned int *) grayscale_array;
     824:	d0a70e15 	stw	r2,-25544(gp)
}
     828:	dfc00217 	ldw	ra,8(sp)
     82c:	dc400117 	ldw	r17,4(sp)
     830:	dc000017 	ldw	r16,0(sp)
     834:	dec00304 	addi	sp,sp,12
     838:	f800283a 	ret

0000083c <conv_grayscale_partial>:

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
     83c:	298d883a 	add	r6,r5,r6
     840:	2980110e 	bge	r5,r6,888 <conv_grayscale_partial+0x4c>
     844:	d0a70c17 	ldw	r2,-25552(gp)
		for (x = 0 ; x < grayscale_width ; x++) {
     848:	0007883a 	mov	r3,zero
     84c:	00800c0e 	bge	zero,r2,880 <conv_grayscale_partial+0x44>
			pos = y*grayscale_width+x;
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     850:	2885383a 	mul	r2,r5,r2
     854:	d2270f17 	ldw	r8,-25540(gp)
     858:	10c5883a 	add	r2,r2,r3
     85c:	108f883a 	add	r7,r2,r2
     860:	21cf883a 	add	r7,r4,r7
     864:	39c0000b 	ldhu	r7,0(r7)
     868:	4085883a 	add	r2,r8,r2
     86c:	380fc032 	custom	0,r7,r7,zero
     870:	11c00005 	stb	r7,0(r2)

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
		for (x = 0 ; x < grayscale_width ; x++) {
     874:	d0a70c17 	ldw	r2,-25552(gp)
     878:	18c00044 	addi	r3,r3,1
     87c:	18bff416 	blt	r3,r2,850 <__alt_data_end+0xff000850>
}

void conv_grayscale_partial(void *picture, int offset, int len){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	for (y = offset ; y < offset+len ; y++) {
     880:	29400044 	addi	r5,r5,1
     884:	29bff01e 	bne	r5,r6,848 <__alt_data_end+0xff000848>
     888:	f800283a 	ret

0000088c <get_grayscale_width>:
}


int get_grayscale_width() {
	return grayscale_width;
}
     88c:	d0a70c17 	ldw	r2,-25552(gp)
     890:	f800283a 	ret

00000894 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     894:	d0a70b17 	ldw	r2,-25556(gp)
     898:	f800283a 	ret

0000089c <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     89c:	d0a70f17 	ldw	r2,-25540(gp)
     8a0:	f800283a 	ret

000008a4 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a4:	00c04034 	movhi	r3,256
     8a8:	18c42704 	addi	r3,r3,4252
     8ac:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8b0:	108000cc 	andi	r2,r2,3
     8b4:	103ffd1e 	bne	r2,zero,8ac <__alt_data_end+0xff0008ac>
}
     8b8:	f800283a 	ret

000008bc <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8bc:	01004034 	movhi	r4,256
     8c0:	21042704 	addi	r4,r4,4252
     8c4:	00c04034 	movhi	r3,256
     8c8:	18c42704 	addi	r3,r3,4252
     8cc:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d0:	108000cc 	andi	r2,r2,3
     8d4:	103ffb1e 	bne	r2,zero,8c4 <__alt_data_end+0xff0008c4>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8d8:	00800104 	movi	r2,4
     8dc:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8e0:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8e4:	108000cc 	andi	r2,r2,3
     8e8:	103ffd1e 	bne	r2,zero,8e0 <__alt_data_end+0xff0008e0>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8ec:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8f0:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8f4:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8f8:	dfc00315 	stw	ra,12(sp)
     8fc:	dc800215 	stw	r18,8(sp)
     900:	dc400115 	stw	r17,4(sp)
     904:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     908:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     90c:	01000074 	movhi	r4,1
     910:	21080404 	addi	r4,r4,8208
     914:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     918:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     91c:	00039ec0 	call	39ec <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     920:	04800a0e 	bge	zero,r18,94c <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     924:	04404034 	movhi	r17,256
     928:	8c442404 	addi	r17,r17,4240
     92c:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     930:	89800037 	ldwio	r6,0(r17)
     934:	01000074 	movhi	r4,1
     938:	800b883a 	mov	r5,r16
     93c:	21080d04 	addi	r4,r4,8244
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     940:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     944:	00039ec0 	call	39ec <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     948:	943ff81e 	bne	r18,r16,92c <__alt_data_end+0xff00092c>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     94c:	dfc00317 	ldw	ra,12(sp)
     950:	dc800217 	ldw	r18,8(sp)
     954:	dc400117 	ldw	r17,4(sp)
     958:	dc000017 	ldw	r16,0(sp)
     95c:	dec00404 	addi	sp,sp,16
     960:	f800283a 	ret

00000964 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     964:	01804034 	movhi	r6,256
     968:	31842704 	addi	r6,r6,4252
     96c:	00c04034 	movhi	r3,256
     970:	18c42704 	addi	r3,r3,4252
     974:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     978:	108000cc 	andi	r2,r2,3
     97c:	103ffb1e 	bne	r2,zero,96c <__alt_data_end+0xff00096c>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     980:	00804034 	movhi	r2,256
     984:	21003fcc 	andi	r4,r4,255
     988:	10842404 	addi	r2,r2,4240
     98c:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     990:	00804034 	movhi	r2,256
     994:	10842504 	addi	r2,r2,4244
     998:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     99c:	008010c4 	movi	r2,67
     9a0:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9a4:	180b883a 	mov	r5,r3
     9a8:	00c04034 	movhi	r3,256
     9ac:	18c42704 	addi	r3,r3,4252
     9b0:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9b4:	108000cc 	andi	r2,r2,3
     9b8:	103ffb1e 	bne	r2,zero,9a8 <__alt_data_end+0xff0009a8>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9bc:	00804034 	movhi	r2,256
     9c0:	21000044 	addi	r4,r4,1
     9c4:	10842404 	addi	r2,r2,4240
     9c8:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9cc:	00800884 	movi	r2,34
     9d0:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9d4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9d8:	108000cc 	andi	r2,r2,3
     9dc:	103ffd1e 	bne	r2,zero,9d4 <__alt_data_end+0xff0009d4>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9e0:	00804034 	movhi	r2,256
     9e4:	10842604 	addi	r2,r2,4248
}
     9e8:	10800037 	ldwio	r2,0(r2)
     9ec:	f800283a 	ret

000009f0 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9f0:	01c04034 	movhi	r7,256
     9f4:	39c42704 	addi	r7,r7,4252
     9f8:	00c04034 	movhi	r3,256
     9fc:	18c42704 	addi	r3,r3,4252
     a00:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a04:	108000cc 	andi	r2,r2,3
     a08:	103ffb1e 	bne	r2,zero,9f8 <__alt_data_end+0xff0009f8>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a0c:	00804034 	movhi	r2,256
     a10:	10842404 	addi	r2,r2,4240
     a14:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a18:	00804034 	movhi	r2,256
     a1c:	10842504 	addi	r2,r2,4244
     a20:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a24:	00804034 	movhi	r2,256
     a28:	10842604 	addi	r2,r2,4248
     a2c:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a30:	00801084 	movi	r2,66
     a34:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a38:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a3c:	108000cc 	andi	r2,r2,3
     a40:	103ffd1e 	bne	r2,zero,a38 <__alt_data_end+0xff000a38>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a44:	f800283a 	ret

00000a48 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a48:	00804034 	movhi	r2,256
     a4c:	10841804 	addi	r2,r2,4192
     a50:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a54:	01000284 	movi	r4,10
     a58:	000f7b01 	jmpi	f7b0 <usleep>

00000a5c <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a5c:	00804034 	movhi	r2,256
     a60:	10841904 	addi	r2,r2,4196
     a64:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a68:	01000284 	movi	r4,10
     a6c:	000f7b01 	jmpi	f7b0 <usleep>

00000a70 <init_LCD>:
}


void init_LCD() {
     a70:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a74:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a78:	dd400515 	stw	r21,20(sp)
     a7c:	dfc00815 	stw	ra,32(sp)
     a80:	ddc00715 	stw	r23,28(sp)
     a84:	dd800615 	stw	r22,24(sp)
     a88:	dd000415 	stw	r20,16(sp)
     a8c:	dcc00315 	stw	r19,12(sp)
     a90:	dc800215 	stw	r18,8(sp)
     a94:	dc400115 	stw	r17,4(sp)
     a98:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a9c:	05400084 	movi	r21,2
     aa0:	10841a04 	addi	r2,r2,4200
     aa4:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aa8:	04804034 	movhi	r18,256
     aac:	94841804 	addi	r18,r18,4192
     ab0:	00800a04 	movi	r2,40
     ab4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ab8:	04000284 	movi	r16,10
     abc:	8009883a 	mov	r4,r16
     ac0:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ac4:	05c00444 	movi	r23,17
     ac8:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     acc:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad0:	04404034 	movhi	r17,256
     ad4:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ad8:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	0027883a 	mov	r19,zero
     ae0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aec:	008032c4 	movi	r2,203
     af0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af4:	8009883a 	mov	r4,r16
     af8:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     afc:	00800e44 	movi	r2,57
     b00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b0c:	00800b04 	movi	r2,44
     b10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	00800d04 	movi	r2,52
     b2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b3c:	8009883a 	mov	r4,r16
     b40:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b44:	008033c4 	movi	r2,207
     b48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b54:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b58:	8009883a 	mov	r4,r16
     b5c:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b60:	05802044 	movi	r22,129
     b64:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b68:	8009883a 	mov	r4,r16
     b6c:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b70:	00800c04 	movi	r2,48
     b74:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b78:	8009883a 	mov	r4,r16
     b7c:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b80:	00803a04 	movi	r2,232
     b84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b88:	8009883a 	mov	r4,r16
     b8c:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b90:	00802144 	movi	r2,133
     b94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b98:	8009883a 	mov	r4,r16
     b9c:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba0:	05000044 	movi	r20,1
     ba4:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     ba8:	8009883a 	mov	r4,r16
     bac:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb0:	00801e44 	movi	r2,121
     bb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bc0:	00803a84 	movi	r2,234
     bc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bd4:	8009883a 	mov	r4,r16
     bd8:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bdc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     be0:	8009883a 	mov	r4,r16
     be4:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be8:	00801904 	movi	r2,100
     bec:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf0:	8009883a 	mov	r4,r16
     bf4:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf8:	008000c4 	movi	r2,3
     bfc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c00:	8009883a 	mov	r4,r16
     c04:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c08:	00800484 	movi	r2,18
     c0c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c10:	8009883a 	mov	r4,r16
     c14:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c18:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c1c:	8009883a 	mov	r4,r16
     c20:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c24:	00803dc4 	movi	r2,247
     c28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c2c:	8009883a 	mov	r4,r16
     c30:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c34:	00800804 	movi	r2,32
     c38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c44:	00803004 	movi	r2,192
     c48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c54:	05800984 	movi	r22,38
     c58:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c5c:	8009883a 	mov	r4,r16
     c60:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c64:	00800104 	movi	r2,4
     c68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c6c:	8009883a 	mov	r4,r16
     c70:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c74:	00803044 	movi	r2,193
     c78:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c7c:	8009883a 	mov	r4,r16
     c80:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c84:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c88:	8009883a 	mov	r4,r16
     c8c:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c90:	00803144 	movi	r2,197
     c94:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca0:	00800d44 	movi	r2,53
     ca4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00800f84 	movi	r2,62
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	008031c4 	movi	r2,199
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	00802f84 	movi	r2,190
     cd4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cd8:	8009883a 	mov	r4,r16
     cdc:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ce0:	00802c44 	movi	r2,177
     ce4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ce8:	8009883a 	mov	r4,r16
     cec:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cf4:	8009883a 	mov	r4,r16
     cf8:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cfc:	00800404 	movi	r2,16
     d00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d04:	8009883a 	mov	r4,r16
     d08:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d0c:	00800e84 	movi	r2,58
     d10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d14:	8009883a 	mov	r4,r16
     d18:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d1c:	00801544 	movi	r2,85
     d20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d24:	8009883a 	mov	r4,r16
     d28:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d2c:	00802d84 	movi	r2,182
     d30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d3c:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d40:	8009883a 	mov	r4,r16
     d44:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d48:	00802884 	movi	r2,162
     d4c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d58:	00803c84 	movi	r2,242
     d5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d60:	8009883a 	mov	r4,r16
     d64:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d68:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d6c:	8009883a 	mov	r4,r16
     d70:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d74:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d80:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	00800d84 	movi	r2,54
     d90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da8:	00800a84 	movi	r2,42
     dac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     db0:	8009883a 	mov	r4,r16
     db4:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ddc:	00803bc4 	movi	r2,239
     de0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000f7b00 	call	f7b0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dec:	00800ac4 	movi	r2,43
     df0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     df4:	8009883a 	mov	r4,r16
     df8:	000f7b00 	call	f7b0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dfc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e00:	8009883a 	mov	r4,r16
     e04:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e08:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e0c:	8009883a 	mov	r4,r16
     e10:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e14:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e18:	8009883a 	mov	r4,r16
     e1c:	000f7b00 	call	f7b0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e20:	00800fc4 	movi	r2,63
     e24:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e28:	8009883a 	mov	r4,r16
     e2c:	000f7b00 	call	f7b0 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e30:	00c04034 	movhi	r3,256
     e34:	00803c04 	movi	r2,240
     e38:	18c41d04 	addi	r3,r3,4212
     e3c:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e40:	d0a7108d 	sth	r2,-25534(gp)
	LCD_height = 320;
     e44:	00805004 	movi	r2,320
     e48:	d0a7100d 	sth	r2,-25536(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e4c:	00800a44 	movi	r2,41
     e50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e54:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e58:	dfc00817 	ldw	ra,32(sp)
     e5c:	ddc00717 	ldw	r23,28(sp)
     e60:	dd800617 	ldw	r22,24(sp)
     e64:	dd400517 	ldw	r21,20(sp)
     e68:	dd000417 	ldw	r20,16(sp)
     e6c:	dcc00317 	ldw	r19,12(sp)
     e70:	dc800217 	ldw	r18,8(sp)
     e74:	dc400117 	ldw	r17,4(sp)
     e78:	dc000017 	ldw	r16,0(sp)
     e7c:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e80:	000f7b01 	jmpi	f7b0 <usleep>

00000e84 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e84:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e88:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e8c:	dc000015 	stw	r16,0(sp)
     e90:	dfc00415 	stw	ra,16(sp)
     e94:	dcc00315 	stw	r19,12(sp)
     e98:	dc800215 	stw	r18,8(sp)
     e9c:	dc400115 	stw	r17,4(sp)
     ea0:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ea4:	10841e04 	addi	r2,r2,4216
     ea8:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eac:	00804034 	movhi	r2,256
     eb0:	10841804 	addi	r2,r2,4192
     eb4:	00c00b04 	movi	r3,44
     eb8:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ebc:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ec0:	01000284 	movi	r4,10
     ec4:	000f7b00 	call	f7b0 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ec8:	90000a26 	beq	r18,zero,ef4 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ecc:	04c04034 	movhi	r19,256
     ed0:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ed4:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ed8:	8080000b 	ldhu	r2,0(r16)
     edc:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ee0:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ee4:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     ee8:	000f7b00 	call	f7b0 <usleep>
     eec:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef0:	8cbff91e 	bne	r17,r18,ed8 <__alt_data_end+0xff000ed8>
		LCD_Write_Data(data_array[pixels]);
}
     ef4:	dfc00417 	ldw	ra,16(sp)
     ef8:	dcc00317 	ldw	r19,12(sp)
     efc:	dc800217 	ldw	r18,8(sp)
     f00:	dc400117 	ldw	r17,4(sp)
     f04:	dc000017 	ldw	r16,0(sp)
     f08:	dec00504 	addi	sp,sp,20
     f0c:	f800283a 	ret

00000f10 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f10:	d0a7100b 	ldhu	r2,-25536(gp)
     f14:	3080010e 	bge	r6,r2,f1c <transfer_LCD_with_dma+0xc>
     f18:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f1c:	d0e7108b 	ldhu	r3,-25534(gp)
     f20:	28c0010e 	bge	r5,r3,f28 <transfer_LCD_with_dma+0x18>
     f24:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f28:	01804034 	movhi	r6,256
     f2c:	31841e04 	addi	r6,r6,4216
     f30:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f34:	01404034 	movhi	r5,256
     f38:	29441b04 	addi	r5,r5,4204
     f3c:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f40:	18ffffcc 	andi	r3,r3,65535
     f44:	10bfffcc 	andi	r2,r2,65535
     f48:	1885383a 	mul	r2,r3,r2
     f4c:	00c04034 	movhi	r3,256
     f50:	18c41c04 	addi	r3,r3,4208
     f54:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f58:	39c03fcc 	andi	r7,r7,255
     f5c:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f60:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f64:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f68:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f6c:	38000326 	beq	r7,zero,f7c <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f70:	00c04404 	movi	r3,272
     f74:	10c0002d 	sthio	r3,0(r2)
     f78:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f7c:	00c04004 	movi	r3,256
     f80:	10c0002d 	sthio	r3,0(r2)
     f84:	f800283a 	ret

00000f88 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f88:	defff804 	addi	sp,sp,-32
     f8c:	dfc00715 	stw	ra,28(sp)
     f90:	dd800615 	stw	r22,24(sp)
     f94:	dd400515 	stw	r21,20(sp)
     f98:	dd000415 	stw	r20,16(sp)
     f9c:	dcc00315 	stw	r19,12(sp)
     fa0:	dc800215 	stw	r18,8(sp)
     fa4:	dc400115 	stw	r17,4(sp)
     fa8:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     fac:	0000a700 	call	a70 <init_LCD>
  init_camera();
     fb0:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fb4:	01000604 	movi	r4,24
     fb8:	00025d00 	call	25d0 <vga_set_swap>
  printf("Hello from Nios II!\n");
     fbc:	01000074 	movhi	r4,1
     fc0:	21081604 	addi	r4,r4,8280
     fc4:	0003ae80 	call	3ae8 <puts>
  cam_get_profiling();
     fc8:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fcc:	00005a80 	call	5a8 <cam_get_xsize>
     fd0:	1021883a 	mov	r16,r2
     fd4:	00005cc0 	call	5cc <cam_get_ysize>
     fd8:	10bfffcc 	andi	r2,r2,65535
     fdc:	813fffcc 	andi	r4,r16,65535
     fe0:	2089383a 	mul	r4,r4,r2
     fe4:	05000074 	movhi	r20,1
     fe8:	a508fb04 	addi	r20,r20,9196
     fec:	00031880 	call	3188 <malloc>
     ff0:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff4:	00005a80 	call	5a8 <cam_get_xsize>
     ff8:	1021883a 	mov	r16,r2
     ffc:	00005cc0 	call	5cc <cam_get_ysize>
    1000:	10bfffcc 	andi	r2,r2,65535
    1004:	813fffcc 	andi	r4,r16,65535
    1008:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    100c:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1010:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1014:	00031880 	call	3188 <malloc>
    1018:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    101c:	00005a80 	call	5a8 <cam_get_xsize>
    1020:	1021883a 	mov	r16,r2
    1024:	00005cc0 	call	5cc <cam_get_ysize>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	813fffcc 	andi	r4,r16,65535
    1030:	2089383a 	mul	r4,r4,r2
    1034:	00031880 	call	3188 <malloc>
    1038:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    103c:	00005a80 	call	5a8 <cam_get_xsize>
    1040:	1021883a 	mov	r16,r2
    1044:	00005cc0 	call	5cc <cam_get_ysize>
    1048:	10bfffcc 	andi	r2,r2,65535
    104c:	813fffcc 	andi	r4,r16,65535
    1050:	2089383a 	mul	r4,r4,r2
    1054:	00031880 	call	3188 <malloc>
  cam_set_image_pointer(0,buffer1);
    1058:	b00b883a 	mov	r5,r22
    105c:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1060:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    1064:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1068:	a80b883a 	mov	r5,r21
    106c:	01000044 	movi	r4,1
    1070:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1074:	880b883a 	mov	r5,r17
    1078:	01000084 	movi	r4,2
    107c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1080:	800b883a 	mov	r5,r16
    1084:	010000c4 	movi	r4,3
    1088:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    108c:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1090:	00005a80 	call	5a8 <cam_get_xsize>
    1094:	1021883a 	mov	r16,r2
    1098:	00005cc0 	call	5cc <cam_get_ysize>
    109c:	80ffffcc 	andi	r3,r16,65535
    10a0:	1806d07a 	srli	r3,r3,1
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	18a3383a 	mul	r17,r3,r2

  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    10ac:	00005a80 	call	5a8 <cam_get_xsize>
    10b0:	1021883a 	mov	r16,r2
    10b4:	00005cc0 	call	5cc <cam_get_ysize>
    10b8:	813fffcc 	andi	r4,r16,65535
    10bc:	2008d07a 	srli	r4,r4,1
    10c0:	117fffcc 	andi	r5,r2,65535
    10c4:	00013000 	call	1300 <init_sobel_arrays>
  conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
    10c8:	00005a80 	call	5a8 <cam_get_xsize>
    10cc:	1021883a 	mov	r16,r2
    10d0:	00005cc0 	call	5cc <cam_get_ysize>
    10d4:	813fffcc 	andi	r4,r16,65535
    10d8:	2008d07a 	srli	r4,r4,1
    10dc:	117fffcc 	andi	r5,r2,65535
    10e0:	00007e40 	call	7e4 <conv_grayscale_init>
  //sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());

  do {
	  if (new_image_available() != 0) {
    10e4:	00007340 	call	734 <new_image_available>
    10e8:	10803fcc 	andi	r2,r2,255
    10ec:	1080201c 	xori	r2,r2,128
    10f0:	10bfe004 	addi	r2,r2,-128
    10f4:	103ffb26 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>
		  if (current_image_valid()!=0) {
    10f8:	00006dc0 	call	6dc <current_image_valid>
    10fc:	10bfffcc 	andi	r2,r2,65535
    1100:	10a0001c 	xori	r2,r2,32768
    1104:	10a00004 	addi	r2,r2,-32768
    1108:	103ff626 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>

			  alt_timestamp_start();
    110c:	00105580 	call	10558 <alt_timestamp_start>

			  start_global = alt_timestamp();
    1110:	00105d00 	call	105d0 <alt_timestamp>
    1114:	d0a71215 	stw	r2,-25528(gp)
			  current_mode = DIPSW_get_value();
    1118:	00007600 	call	760 <DIPSW_get_value>
    111c:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1120:	00006f00 	call	6f0 <current_image_pointer>
    1124:	102b883a 	mov	r21,r2
		      switch (mode) {
    1128:	808001cc 	andi	r2,r16,7
    112c:	1000421e 	bne	r2,zero,1238 <main+0x2b0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1130:	00005a80 	call	5a8 <cam_get_xsize>
    1134:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    1138:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    113c:	b17fffcc 	andi	r5,r22,65535
    1140:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1144:	84003fcc 	andi	r16,r16,255
    1148:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    114c:	000f883a 	mov	r7,zero
    1150:	11bfffcc 	andi	r6,r2,65535
    1154:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1158:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    115c:	0000f100 	call	f10 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1160:	80006216 	blt	r16,zero,12ec <main+0x364>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    1164:	00105d00 	call	105d0 <alt_timestamp>
    1168:	d0a71115 	stw	r2,-25532(gp)
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    116c:	d1671517 	ldw	r5,-25516(gp)
    1170:	d0a71617 	ldw	r2,-25512(gp)
    1174:	01000074 	movhi	r4,1
    1178:	21081b04 	addi	r4,r4,8300
    117c:	288bc83a 	sub	r5,r5,r2
    1180:	00039ec0 	call	39ec <printf>
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1184:	d0a71817 	ldw	r2,-25504(gp)
    1188:	d1671717 	ldw	r5,-25508(gp)
    118c:	01000074 	movhi	r4,1
    1190:	21082004 	addi	r4,r4,8320
    1194:	288bc83a 	sub	r5,r5,r2
    1198:	00039ec0 	call	39ec <printf>
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    119c:	d0a71317 	ldw	r2,-25524(gp)
    11a0:	d4271417 	ldw	r16,-25520(gp)
    11a4:	1421c83a 	sub	r16,r2,r16
    11a8:	8444b03a 	or	r2,r16,r17
    11ac:	90801d36 	bltu	r18,r2,1224 <main+0x29c>
    11b0:	8004913a 	slli	r2,r16,4
    11b4:	1444b03a 	or	r2,r2,r17
    11b8:	1505883a 	add	r2,r2,r20
    11bc:	11800003 	ldbu	r6,0(r2)
    11c0:	01000074 	movhi	r4,1
    11c4:	800b883a 	mov	r5,r16
    11c8:	21082304 	addi	r4,r4,8332
    11cc:	00039ec0 	call	39ec <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    11d0:	d0a71217 	ldw	r2,-25528(gp)
    11d4:	d1271117 	ldw	r4,-25532(gp)
    11d8:	2089c83a 	sub	r4,r4,r2
    11dc:	000307c0 	call	307c <__floatunsidf>
    11e0:	01d06234 	movhi	r7,16776
    11e4:	39f5e104 	addi	r7,r7,-10364
    11e8:	1009883a 	mov	r4,r2
    11ec:	180b883a 	mov	r5,r3
    11f0:	000d883a 	mov	r6,zero
    11f4:	00027940 	call	2794 <__divdf3>
    11f8:	100d883a 	mov	r6,r2
    11fc:	180f883a 	mov	r7,r3
    1200:	0009883a 	mov	r4,zero
    1204:	014ffc34 	movhi	r5,16368
    1208:	00027940 	call	2794 <__divdf3>
    120c:	01000074 	movhi	r4,1
    1210:	100b883a 	mov	r5,r2
    1214:	180d883a 	mov	r6,r3
    1218:	21082d04 	addi	r4,r4,8372
    121c:	00039ec0 	call	39ec <printf>
    1220:	003fb006 	br	10e4 <__alt_data_end+0xff0010e4>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1224:	880b883a 	mov	r5,r17
    1228:	8009883a 	mov	r4,r16
    122c:	00025e00 	call	25e0 <__divsi3>
    1230:	100d883a 	mov	r6,r2
    1234:	003fe206 	br	11c0 <__alt_data_end+0xff0011c0>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    1238:	00105d00 	call	105d0 <alt_timestamp>
    123c:	d0a71415 	stw	r2,-25520(gp)


		    	  	   start_conv_grayscale = alt_timestamp();
    1240:	00105d00 	call	105d0 <alt_timestamp>
    1244:	d0a71615 	stw	r2,-25512(gp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1248:	00005a80 	call	5a8 <cam_get_xsize>
    124c:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    1250:	00005cc0 	call	5cc <cam_get_ysize>
		      default:
		    	  	   start_all = alt_timestamp();


		    	  	   start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1254:	b17fffcc 	andi	r5,r22,65535
    1258:	280ad07a 	srli	r5,r5,1
    125c:	11bfffcc 	andi	r6,r2,65535
    1260:	a809883a 	mov	r4,r21
    1264:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    1268:	00105d00 	call	105d0 <alt_timestamp>
    126c:	d0a71515 	stw	r2,-25516(gp)

                       grayscale = get_grayscale_picture();
    1270:	000089c0 	call	89c <get_grayscale_picture>
    1274:	102b883a 	mov	r21,r2

                       start_sobel = alt_timestamp();
    1278:	00105d00 	call	105d0 <alt_timestamp>
                       sobel_complete(grayscale, 128);
    127c:	a809883a 	mov	r4,r21
    1280:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();

                       grayscale = get_grayscale_picture();

                       start_sobel = alt_timestamp();
    1284:	d0a71815 	stw	r2,-25504(gp)
                       sobel_complete(grayscale, 128);
    1288:	0001aa40 	call	1aa4 <sobel_complete>
                       end_sobel = alt_timestamp();
    128c:	00105d00 	call	105d0 <alt_timestamp>
    1290:	d0a71715 	stw	r2,-25508(gp)

		    	  	   //sobel_all_partial((void *)image);
		    	  	   //sobel_all_complete((void *)image);
		    	  	   //sobel_all_complete_fusion((void *)image);

                       end_all = alt_timestamp();
    1294:	00105d00 	call	105d0 <alt_timestamp>
    1298:	d0a71315 	stw	r2,-25524(gp)

                       grayscale=GetSobelResult();
    129c:	0001d700 	call	1d70 <GetSobelResult>
    12a0:	102d883a 	mov	r22,r2
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    12a4:	00005a80 	call	5a8 <cam_get_xsize>
    12a8:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    12ac:	00005cc0 	call	5cc <cam_get_ysize>
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12b0:	a97fffcc 	andi	r5,r21,65535
    12b4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b8:	84003fcc 	andi	r16,r16,255
    12bc:	8400201c 	xori	r16,r16,128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12c0:	01c00044 	movi	r7,1
    12c4:	11bfffcc 	andi	r6,r2,65535
    12c8:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12cc:	843fe004 	addi	r16,r16,-128
                       end_all = alt_timestamp();

                       grayscale=GetSobelResult();
                       //grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    12d0:	0000f100 	call	f10 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12d4:	803fa30e 	bge	r16,zero,1164 <__alt_data_end+0xff001164>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12d8:	01000604 	movi	r4,24
    12dc:	00025d00 	call	25d0 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12e0:	b009883a 	mov	r4,r22
    12e4:	00025c00 	call	25c0 <vga_set_pointer>
    12e8:	003f9e06 	br	1164 <__alt_data_end+0xff001164>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12ec:	01000204 	movi	r4,8
    12f0:	00025d00 	call	25d0 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12f4:	a809883a 	mov	r4,r21
    12f8:	00025c00 	call	25c0 <vga_set_pointer>
    12fc:	003f9906 	br	1164 <__alt_data_end+0xff001164>

00001300 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1300:	defffd04 	addi	sp,sp,-12
    1304:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1308:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    130c:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1310:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1314:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1318:	21083104 	addi	r4,r4,8388
    131c:	280d883a 	mov	r6,r5
    1320:	800f883a 	mov	r7,r16
    1324:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1328:	dfc00215 	stw	ra,8(sp)
    132c:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    1330:	d0e71915 	stw	r3,-25500(gp)
	sobel_height = height;
    1334:	d0a71b15 	stw	r2,-25492(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1338:	00039ec0 	call	39ec <printf>
	if (sobel_x_result != NULL)
    133c:	d1271c17 	ldw	r4,-25488(gp)
    1340:	20000126 	beq	r4,zero,1348 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    1344:	000319c0 	call	319c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1348:	8423883a 	add	r17,r16,r16
    134c:	8809883a 	mov	r4,r17
    1350:	00031880 	call	3188 <malloc>
	if (sobel_y_result != NULL)
    1354:	d1271d17 	ldw	r4,-25484(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1358:	d0a71c15 	stw	r2,-25488(gp)
	if (sobel_y_result != NULL)
    135c:	20000126 	beq	r4,zero,1364 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    1360:	000319c0 	call	319c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1364:	8809883a 	mov	r4,r17
    1368:	00031880 	call	3188 <malloc>
	if (sobel_result != NULL)
    136c:	d1271a17 	ldw	r4,-25496(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1370:	d0a71d15 	stw	r2,-25484(gp)
	if (sobel_result != NULL)
    1374:	20000126 	beq	r4,zero,137c <init_sobel_arrays+0x7c>
		free(sobel_result);
    1378:	000319c0 	call	319c <free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    137c:	8009883a 	mov	r4,r16
    1380:	000f7380 	call	f738 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    1384:	d1271e17 	ldw	r4,-25480(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1388:	d0a71a15 	stw	r2,-25496(gp)
	if (sobel_rgb565 != NULL)
    138c:	20000126 	beq	r4,zero,1394 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    1390:	000319c0 	call	319c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1394:	8809883a 	mov	r4,r17
    1398:	00031880 	call	3188 <malloc>
    139c:	d0a71e15 	stw	r2,-25480(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    13a0:	0005883a 	mov	r2,zero
    13a4:	04000f0e 	bge	zero,r16,13e4 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    13a8:	d1a71c17 	ldw	r6,-25488(gp)
		sobel_y_result[loop] = 0;
    13ac:	d1671d17 	ldw	r5,-25484(gp)
		sobel_result[loop] = 0;
    13b0:	d1271a17 	ldw	r4,-25496(gp)
    13b4:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    13b8:	30cd883a 	add	r6,r6,r3
    13bc:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    13c0:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    13c4:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    13c8:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    13cc:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    13d0:	d1271e17 	ldw	r4,-25480(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13d4:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    13d8:	20c7883a 	add	r3,r4,r3
    13dc:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13e0:	80bff11e 	bne	r16,r2,13a8 <__alt_data_end+0xff0013a8>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    13e4:	dfc00217 	ldw	ra,8(sp)
    13e8:	dc400117 	ldw	r17,4(sp)
    13ec:	dc000017 	ldw	r16,0(sp)
    13f0:	dec00304 	addi	sp,sp,12
    13f4:	f800283a 	ret

000013f8 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13f8:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13fc:	31bfffc4 	addi	r6,r6,-1
    1400:	38c00047 	ldb	r3,1(r7)
    1404:	328d383a 	mul	r6,r6,r10
    1408:	3b8000c7 	ldb	r14,3(r7)
    140c:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1410:	5185883a 	add	r2,r10,r6
    1414:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1418:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    141c:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1420:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1424:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1428:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    142c:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1430:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1434:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1438:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    143c:	49000043 	ldbu	r4,1(r9)
    1440:	3a800147 	ldb	r10,5(r7)
    1444:	139d383a 	mul	r14,r2,r14
    1448:	60d9383a 	mul	r12,r12,r3
    144c:	68800003 	ldbu	r2,0(r13)
    1450:	38c001c7 	ldb	r3,7(r7)
    1454:	5a17383a 	mul	r11,r11,r8
    1458:	33ffffc3 	ldbu	r15,-1(r6)
    145c:	3a000007 	ldb	r8,0(r7)
    1460:	2295383a 	mul	r10,r4,r10
    1464:	31000043 	ldbu	r4,1(r6)
    1468:	39800087 	ldb	r6,2(r7)
    146c:	730b883a 	add	r5,r14,r12
    1470:	10d3383a 	mul	r9,r2,r3
    1474:	6b3fffc3 	ldbu	r12,-1(r13)
    1478:	38c00187 	ldb	r3,6(r7)
    147c:	2acb883a 	add	r5,r5,r11
    1480:	7a11383a 	mul	r8,r15,r8
    1484:	6ac00043 	ldbu	r11,1(r13)
    1488:	39c00207 	ldb	r7,8(r7)
    148c:	2a8b883a 	add	r5,r5,r10
    1490:	2189383a 	mul	r4,r4,r6
    1494:	2a45883a 	add	r2,r5,r9
    1498:	60c7383a 	mul	r3,r12,r3
    149c:	1205883a 	add	r2,r2,r8
    14a0:	59cb383a 	mul	r5,r11,r7
    14a4:	1105883a 	add	r2,r2,r4
    14a8:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    14ac:	1145883a 	add	r2,r2,r5
    14b0:	f800283a 	ret

000014b4 <sobel_x>:

void sobel_x( unsigned char *source ) {
    14b4:	defff604 	addi	sp,sp,-40
    14b8:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14bc:	d4671b17 	ldw	r17,-25492(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    14c0:	dfc00915 	stw	ra,36(sp)
    14c4:	df000815 	stw	fp,32(sp)
    14c8:	ddc00715 	stw	r23,28(sp)
    14cc:	dd800615 	stw	r22,24(sp)
    14d0:	dd400515 	stw	r21,20(sp)
    14d4:	dd000415 	stw	r20,16(sp)
    14d8:	dcc00315 	stw	r19,12(sp)
    14dc:	dc800215 	stw	r18,8(sp)
    14e0:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14e4:	8c7fffc4 	addi	r17,r17,-1
    14e8:	00800044 	movi	r2,1
    14ec:	14402e0e 	bge	r2,r17,15a8 <sobel_x+0xf4>
    14f0:	d3671917 	ldw	r13,-25500(gp)
    14f4:	d3e71c17 	ldw	r15,-25488(gp)
    14f8:	03800084 	movi	r14,2
    14fc:	6b65883a 	add	r18,r13,r13
    1500:	9385883a 	add	r2,r18,r14
    1504:	2359883a 	add	r12,r4,r13
    1508:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    150c:	7027883a 	mov	r19,r14
    1510:	736bc83a 	sub	r21,r14,r13
    1514:	6ba9883a 	add	r20,r13,r14
    1518:	9b402f0e 	bge	r19,r13,15d8 <sobel_x+0x124>
    151c:	637f883a 	add	ra,r12,r13
    1520:	7021883a 	mov	r16,r14
    1524:	6357c83a 	sub	r11,r12,r13
    1528:	ab0b883a 	add	r5,r21,r12
    152c:	62800084 	addi	r10,r12,2
    1530:	f813883a 	mov	r9,ra
    1534:	a311883a 	add	r8,r20,r12
    1538:	780f883a 	mov	r7,r15
    153c:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1540:	29000003 	ldbu	r4,0(r5)
    1544:	40c00003 	ldbu	r3,0(r8)
    1548:	37000003 	ldbu	fp,0(r6)
    154c:	50800003 	ldbu	r2,0(r10)
    1550:	20c7883a 	add	r3,r4,r3
    1554:	5dc00003 	ldbu	r23,0(r11)
    1558:	1f07c83a 	sub	r3,r3,fp
    155c:	4d800003 	ldbu	r22,0(r9)
    1560:	1f09c83a 	sub	r4,r3,fp
    1564:	1087883a 	add	r3,r2,r2
    1568:	20c7883a 	add	r3,r4,r3
    156c:	1dc5c83a 	sub	r2,r3,r23
    1570:	1585c83a 	sub	r2,r2,r22
    1574:	3880000d 	sth	r2,0(r7)
    1578:	29400044 	addi	r5,r5,1
    157c:	5ac00044 	addi	r11,r11,1
    1580:	31800044 	addi	r6,r6,1
    1584:	52800044 	addi	r10,r10,1
    1588:	4a400044 	addi	r9,r9,1
    158c:	42000044 	addi	r8,r8,1
    1590:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1594:	617fea1e 	bne	r12,r5,1540 <__alt_data_end+0xff001540>
    1598:	73800044 	addi	r14,r14,1
    159c:	f819883a 	mov	r12,ra
    15a0:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15a4:	847fdc16 	blt	r16,r17,1518 <__alt_data_end+0xff001518>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    15a8:	dfc00917 	ldw	ra,36(sp)
    15ac:	df000817 	ldw	fp,32(sp)
    15b0:	ddc00717 	ldw	r23,28(sp)
    15b4:	dd800617 	ldw	r22,24(sp)
    15b8:	dd400517 	ldw	r21,20(sp)
    15bc:	dd000417 	ldw	r20,16(sp)
    15c0:	dcc00317 	ldw	r19,12(sp)
    15c4:	dc800217 	ldw	r18,8(sp)
    15c8:	dc400117 	ldw	r17,4(sp)
    15cc:	dc000017 	ldw	r16,0(sp)
    15d0:	dec00a04 	addi	sp,sp,40
    15d4:	f800283a 	ret
    15d8:	7021883a 	mov	r16,r14
    15dc:	637f883a 	add	ra,r12,r13
    15e0:	73800044 	addi	r14,r14,1
    15e4:	f819883a 	mov	r12,ra
    15e8:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15ec:	847fca16 	blt	r16,r17,1518 <__alt_data_end+0xff001518>
    15f0:	003fed06 	br	15a8 <__alt_data_end+0xff0015a8>

000015f4 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15f4:	defff504 	addi	sp,sp,-44
    15f8:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15fc:	d5a71b17 	ldw	r22,-25492(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1600:	dfc00a15 	stw	ra,40(sp)
    1604:	df000915 	stw	fp,36(sp)
    1608:	ddc00815 	stw	r23,32(sp)
    160c:	dd400615 	stw	r21,24(sp)
    1610:	dd000515 	stw	r20,20(sp)
    1614:	dcc00415 	stw	r19,16(sp)
    1618:	dc800315 	stw	r18,12(sp)
    161c:	dc400215 	stw	r17,8(sp)
    1620:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1624:	b5bfffc4 	addi	r22,r22,-1
    1628:	00800044 	movi	r2,1
    162c:	1580440e 	bge	r2,r22,1740 <sobel_x_with_rgb+0x14c>
    1630:	d7e71917 	ldw	ra,-25500(gp)
    1634:	d4a71c17 	ldw	r18,-25488(gp)
    1638:	d4671e17 	ldw	r17,-25480(gp)
    163c:	ffe9883a 	add	r20,ra,ra
    1640:	a0800084 	addi	r2,r20,2
    1644:	04000084 	movi	r16,2
    1648:	90a5883a 	add	r18,r18,r2
    164c:	88a3883a 	add	r17,r17,r2
    1650:	fc05883a 	add	r2,ra,r16
    1654:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1658:	802f883a 	mov	r23,r16
    165c:	87f9c83a 	sub	fp,r16,ra
    1660:	d8800015 	stw	r2,0(sp)
    1664:	bfc02f0e 	bge	r23,ra,1724 <sobel_x_with_rgb+0x130>
    1668:	d8800017 	ldw	r2,0(sp)
    166c:	7fe7883a 	add	r19,r15,ra
    1670:	802b883a 	mov	r21,r16
    1674:	7fdbc83a 	sub	r13,r15,ra
    1678:	e3cf883a 	add	r7,fp,r15
    167c:	7b000084 	addi	r12,r15,2
    1680:	9817883a 	mov	r11,r19
    1684:	13d5883a 	add	r10,r2,r15
    1688:	881d883a 	mov	r14,r17
    168c:	9013883a 	mov	r9,r18
    1690:	7811883a 	mov	r8,r15
    1694:	00000b06 	br	16c4 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1698:	180692fa 	slli	r3,r3,11
    169c:	70c0000d 	sth	r3,0(r14)
    16a0:	39c00044 	addi	r7,r7,1
    16a4:	6b400044 	addi	r13,r13,1
    16a8:	42000044 	addi	r8,r8,1
    16ac:	63000044 	addi	r12,r12,1
    16b0:	5ac00044 	addi	r11,r11,1
    16b4:	52800044 	addi	r10,r10,1
    16b8:	4a400084 	addi	r9,r9,2
    16bc:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16c0:	79c01a26 	beq	r15,r7,172c <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    16c4:	50800003 	ldbu	r2,0(r10)
    16c8:	39400003 	ldbu	r5,0(r7)
    16cc:	41800003 	ldbu	r6,0(r8)
    16d0:	60c00003 	ldbu	r3,0(r12)
    16d4:	288b883a 	add	r5,r5,r2
    16d8:	298bc83a 	sub	r5,r5,r6
    16dc:	68800003 	ldbu	r2,0(r13)
    16e0:	59000003 	ldbu	r4,0(r11)
    16e4:	298bc83a 	sub	r5,r5,r6
    16e8:	18c7883a 	add	r3,r3,r3
    16ec:	28c7883a 	add	r3,r5,r3
    16f0:	1887c83a 	sub	r3,r3,r2
    16f4:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16f8:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16fc:	10bfffcc 	andi	r2,r2,65535
    1700:	10a0001c 	xori	r2,r2,32768
    1704:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1708:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    170c:	103fe20e 	bge	r2,zero,1698 <__alt_data_end+0xff001698>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1710:	0085c83a 	sub	r2,zero,r2
    1714:	1005d0ba 	srai	r2,r2,2
    1718:	1004917a 	slli	r2,r2,5
    171c:	7080000d 	sth	r2,0(r14)
    1720:	003fdf06 	br	16a0 <__alt_data_end+0xff0016a0>
    1724:	802b883a 	mov	r21,r16
    1728:	7fe7883a 	add	r19,r15,ra
    172c:	84000044 	addi	r16,r16,1
    1730:	981f883a 	mov	r15,r19
    1734:	9525883a 	add	r18,r18,r20
    1738:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    173c:	adbfc916 	blt	r21,r22,1664 <__alt_data_end+0xff001664>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1740:	dfc00a17 	ldw	ra,40(sp)
    1744:	df000917 	ldw	fp,36(sp)
    1748:	ddc00817 	ldw	r23,32(sp)
    174c:	dd800717 	ldw	r22,28(sp)
    1750:	dd400617 	ldw	r21,24(sp)
    1754:	dd000517 	ldw	r20,20(sp)
    1758:	dcc00417 	ldw	r19,16(sp)
    175c:	dc800317 	ldw	r18,12(sp)
    1760:	dc400217 	ldw	r17,8(sp)
    1764:	dc000117 	ldw	r16,4(sp)
    1768:	dec00b04 	addi	sp,sp,44
    176c:	f800283a 	ret

00001770 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1770:	defff704 	addi	sp,sp,-36
    1774:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1778:	d4671b17 	ldw	r17,-25492(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    177c:	dfc00815 	stw	ra,32(sp)
    1780:	ddc00715 	stw	r23,28(sp)
    1784:	dd800615 	stw	r22,24(sp)
    1788:	dd400515 	stw	r21,20(sp)
    178c:	dd000415 	stw	r20,16(sp)
    1790:	dcc00315 	stw	r19,12(sp)
    1794:	dc800215 	stw	r18,8(sp)
    1798:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    179c:	8c7fffc4 	addi	r17,r17,-1
    17a0:	00800044 	movi	r2,1
    17a4:	14402d0e 	bge	r2,r17,185c <sobel_y+0xec>
    17a8:	d3e71917 	ldw	r15,-25500(gp)
    17ac:	d3a71d17 	ldw	r14,-25484(gp)
    17b0:	03400084 	movi	r13,2
    17b4:	7bff883a 	add	ra,r15,r15
    17b8:	fb67883a 	add	r19,ra,r13
    17bc:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17c0:	6825883a 	mov	r18,r13
    17c4:	f8a9883a 	add	r20,ra,r2
    17c8:	6821883a 	mov	r16,r13
    17cc:	93c01f0e 	bge	r18,r15,184c <sobel_y+0xdc>
    17d0:	27cd883a 	add	r6,r4,ra
    17d4:	6821883a 	mov	r16,r13
    17d8:	22c00044 	addi	r11,r4,1
    17dc:	22800084 	addi	r10,r4,2
    17e0:	a113883a 	add	r9,r20,r4
    17e4:	990b883a 	add	r5,r19,r4
    17e8:	7999883a 	add	r12,r15,r6
    17ec:	7011883a 	mov	r8,r14
    17f0:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17f4:	3d800003 	ldbu	r22,0(r7)
    17f8:	50c00003 	ldbu	r3,0(r10)
    17fc:	58800003 	ldbu	r2,0(r11)
    1800:	4d400003 	ldbu	r21,0(r9)
    1804:	b0c7883a 	add	r3,r22,r3
    1808:	1085883a 	add	r2,r2,r2
    180c:	35c00003 	ldbu	r23,0(r6)
    1810:	1887883a 	add	r3,r3,r2
    1814:	2d800003 	ldbu	r22,0(r5)
    1818:	1d47c83a 	sub	r3,r3,r21
    181c:	1d47c83a 	sub	r3,r3,r21
    1820:	1dc5c83a 	sub	r2,r3,r23
    1824:	1585c83a 	sub	r2,r2,r22
    1828:	4080000d 	sth	r2,0(r8)
    182c:	29400044 	addi	r5,r5,1
    1830:	39c00044 	addi	r7,r7,1
    1834:	5ac00044 	addi	r11,r11,1
    1838:	52800044 	addi	r10,r10,1
    183c:	4a400044 	addi	r9,r9,1
    1840:	31800044 	addi	r6,r6,1
    1844:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1848:	617fea1e 	bne	r12,r5,17f4 <__alt_data_end+0xff0017f4>
    184c:	6b400044 	addi	r13,r13,1
    1850:	23c9883a 	add	r4,r4,r15
    1854:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1858:	847fdb16 	blt	r16,r17,17c8 <__alt_data_end+0xff0017c8>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    185c:	dfc00817 	ldw	ra,32(sp)
    1860:	ddc00717 	ldw	r23,28(sp)
    1864:	dd800617 	ldw	r22,24(sp)
    1868:	dd400517 	ldw	r21,20(sp)
    186c:	dd000417 	ldw	r20,16(sp)
    1870:	dcc00317 	ldw	r19,12(sp)
    1874:	dc800217 	ldw	r18,8(sp)
    1878:	dc400117 	ldw	r17,4(sp)
    187c:	dc000017 	ldw	r16,0(sp)
    1880:	dec00904 	addi	sp,sp,36
    1884:	f800283a 	ret

00001888 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1888:	defff604 	addi	sp,sp,-40
    188c:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1890:	d4e71b17 	ldw	r19,-25492(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1894:	dfc00915 	stw	ra,36(sp)
    1898:	df000815 	stw	fp,32(sp)
    189c:	ddc00715 	stw	r23,28(sp)
    18a0:	dd800615 	stw	r22,24(sp)
    18a4:	dd400515 	stw	r21,20(sp)
    18a8:	dd000415 	stw	r20,16(sp)
    18ac:	dc800215 	stw	r18,8(sp)
    18b0:	dc400115 	stw	r17,4(sp)
    18b4:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18b8:	9cffffc4 	addi	r19,r19,-1
    18bc:	00800044 	movi	r2,1
    18c0:	14c03f0e 	bge	r2,r19,19c0 <sobel_y_with_rgb+0x138>
    18c4:	d4671917 	ldw	r17,-25500(gp)
    18c8:	d4271d17 	ldw	r16,-25484(gp)
    18cc:	d7e71e17 	ldw	ra,-25480(gp)
    18d0:	8c5d883a 	add	r14,r17,r17
    18d4:	75000084 	addi	r20,r14,2
    18d8:	03c00084 	movi	r15,2
    18dc:	8521883a 	add	r16,r16,r20
    18e0:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18e4:	782b883a 	mov	r21,r15
    18e8:	70ad883a 	add	r22,r14,r2
    18ec:	7825883a 	mov	r18,r15
    18f0:	ac402e0e 	bge	r21,r17,19ac <sobel_y_with_rgb+0x124>
    18f4:	238d883a 	add	r6,r4,r14
    18f8:	7825883a 	mov	r18,r15
    18fc:	22c00044 	addi	r11,r4,1
    1900:	22800084 	addi	r10,r4,2
    1904:	b113883a 	add	r9,r22,r4
    1908:	a10b883a 	add	r5,r20,r4
    190c:	899b883a 	add	r13,r17,r6
    1910:	f819883a 	mov	r12,ra
    1914:	8011883a 	mov	r8,r16
    1918:	200f883a 	mov	r7,r4
    191c:	00000b06 	br	194c <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1920:	180692fa 	slli	r3,r3,11
    1924:	60c0000d 	sth	r3,0(r12)
    1928:	29400044 	addi	r5,r5,1
    192c:	39c00044 	addi	r7,r7,1
    1930:	5ac00044 	addi	r11,r11,1
    1934:	52800044 	addi	r10,r10,1
    1938:	4a400044 	addi	r9,r9,1
    193c:	31800044 	addi	r6,r6,1
    1940:	42000084 	addi	r8,r8,2
    1944:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1948:	69401826 	beq	r13,r5,19ac <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    194c:	50800003 	ldbu	r2,0(r10)
    1950:	3f000003 	ldbu	fp,0(r7)
    1954:	58c00003 	ldbu	r3,0(r11)
    1958:	4dc00003 	ldbu	r23,0(r9)
    195c:	e0b9883a 	add	fp,fp,r2
    1960:	18c7883a 	add	r3,r3,r3
    1964:	30800003 	ldbu	r2,0(r6)
    1968:	e0c7883a 	add	r3,fp,r3
    196c:	1dc7c83a 	sub	r3,r3,r23
    1970:	2f000003 	ldbu	fp,0(r5)
    1974:	1dc7c83a 	sub	r3,r3,r23
    1978:	1885c83a 	sub	r2,r3,r2
    197c:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1980:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1984:	10bfffcc 	andi	r2,r2,65535
    1988:	10a0001c 	xori	r2,r2,32768
    198c:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1990:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1994:	103fe20e 	bge	r2,zero,1920 <__alt_data_end+0xff001920>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1998:	0085c83a 	sub	r2,zero,r2
    199c:	1005d0ba 	srai	r2,r2,2
    19a0:	1004917a 	slli	r2,r2,5
    19a4:	6080000d 	sth	r2,0(r12)
    19a8:	003fdf06 	br	1928 <__alt_data_end+0xff001928>
    19ac:	7bc00044 	addi	r15,r15,1
    19b0:	2449883a 	add	r4,r4,r17
    19b4:	83a1883a 	add	r16,r16,r14
    19b8:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19bc:	94ffcb16 	blt	r18,r19,18ec <__alt_data_end+0xff0018ec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    19c0:	dfc00917 	ldw	ra,36(sp)
    19c4:	df000817 	ldw	fp,32(sp)
    19c8:	ddc00717 	ldw	r23,28(sp)
    19cc:	dd800617 	ldw	r22,24(sp)
    19d0:	dd400517 	ldw	r21,20(sp)
    19d4:	dd000417 	ldw	r20,16(sp)
    19d8:	dcc00317 	ldw	r19,12(sp)
    19dc:	dc800217 	ldw	r18,8(sp)
    19e0:	dc400117 	ldw	r17,4(sp)
    19e4:	dc000017 	ldw	r16,0(sp)
    19e8:	dec00a04 	addi	sp,sp,40
    19ec:	f800283a 	ret

000019f0 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    19f0:	d0a71b17 	ldw	r2,-25492(gp)
    19f4:	02400084 	movi	r9,2
    19f8:	4880290e 	bge	r9,r2,1aa0 <sobel_threshold+0xb0>
    19fc:	223fffcc 	andi	r8,r4,65535
    1a00:	d0e71917 	ldw	r3,-25500(gp)
    1a04:	4220001c 	xori	r8,r8,32768
    1a08:	01c00044 	movi	r7,1
    1a0c:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a10:	48c0200e 	bge	r9,r3,1a94 <sobel_threshold+0xa4>
    1a14:	01400044 	movi	r5,1
    1a18:	00000c06 	br	1a4c <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a1c:	2080000f 	ldh	r2,0(r4)
    1a20:	10001916 	blt	r2,zero,1a88 <sobel_threshold+0x98>
    1a24:	3085883a 	add	r2,r6,r2
    1a28:	10bfffcc 	andi	r2,r2,65535
    1a2c:	10a0001c 	xori	r2,r2,32768
    1a30:	10a00004 	addi	r2,r2,-32768
    1a34:	4084803a 	cmplt	r2,r8,r2
    1a38:	0085c83a 	sub	r2,zero,r2
    1a3c:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a40:	d0e71917 	ldw	r3,-25500(gp)
    1a44:	18bfffc4 	addi	r2,r3,-1
    1a48:	2880110e 	bge	r5,r2,1a90 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a4c:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a50:	d1a71d17 	ldw	r6,-25484(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a54:	d1271c17 	ldw	r4,-25488(gp)
    1a58:	1947883a 	add	r3,r3,r5
    1a5c:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a60:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a64:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a68:	3180000f 	ldh	r6,0(r6)
    1a6c:	d0a71a17 	ldw	r2,-25496(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a70:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a74:	10c7883a 	add	r3,r2,r3
    1a78:	303fe80e 	bge	r6,zero,1a1c <__alt_data_end+0xff001a1c>
    1a7c:	2080000f 	ldh	r2,0(r4)
    1a80:	018dc83a 	sub	r6,zero,r6
    1a84:	103fe70e 	bge	r2,zero,1a24 <__alt_data_end+0xff001a24>
    1a88:	0085c83a 	sub	r2,zero,r2
    1a8c:	003fe506 	br	1a24 <__alt_data_end+0xff001a24>
    1a90:	d0a71b17 	ldw	r2,-25492(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a94:	39c00044 	addi	r7,r7,1
    1a98:	113fffc4 	addi	r4,r2,-1
    1a9c:	393fdc16 	blt	r7,r4,1a10 <__alt_data_end+0xff001a10>
    1aa0:	f800283a 	ret

00001aa4 <sobel_complete>:
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1aa4:	defff704 	addi	sp,sp,-36
    1aa8:	d1e71b17 	ldw	r7,-25492(gp)
    1aac:	dd000415 	stw	r20,16(sp)
    1ab0:	dc800215 	stw	r18,8(sp)
    1ab4:	2d3fffcc 	andi	r20,r5,65535
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
    1ab8:	d4a71917 	ldw	r18,-25500(gp)
    1abc:	a520001c 	xori	r20,r20,32768
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1ac0:	dcc00315 	stw	r19,12(sp)
    1ac4:	dc400115 	stw	r17,4(sp)
    1ac8:	dc000015 	stw	r16,0(sp)
    1acc:	dfc00815 	stw	ra,32(sp)
    1ad0:	ddc00715 	stw	r23,28(sp)
    1ad4:	dd800615 	stw	r22,24(sp)
    1ad8:	dd400515 	stw	r21,20(sp)
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1adc:	04400044 	movi	r17,1
    1ae0:	39ffffc4 	addi	r7,r7,-1

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < width_len ; x++) {
    1ae4:	04c00084 	movi	r19,2
    1ae8:	a5200004 	addi	r20,r20,-32768
    1aec:	0120303a 	nor	r16,zero,r4
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1af0:	89c03b0e 	bge	r17,r7,1be0 <sobel_complete+0x13c>
			y0 = (y-1)*sobel_width;
    1af4:	d2671917 	ldw	r9,-25500(gp)
    1af8:	8abfffc4 	addi	r10,r17,-1
		    y1 = y*sobel_width;
    1afc:	8a4b383a 	mul	r5,r17,r9
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
    1b00:	5255383a 	mul	r10,r10,r9
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
    1b04:	8c400044 	addi	r17,r17,1
		    
			p2 = source[y0];
			p5 = source[y1];
			p8 = source[y2];
    1b08:	4953883a 	add	r9,r9,r5
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
			p5 = source[y1];
    1b0c:	2159883a 	add	r12,r4,r5
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
    1b10:	2297883a 	add	r11,r4,r10
			p5 = source[y1];
			p8 = source[y2];
    1b14:	2251883a 	add	r8,r4,r9
	for (y = 1 ; y < (sobel_height-1) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
    1b18:	58c00003 	ldbu	r3,0(r11)
			p5 = source[y1];
    1b1c:	61800003 	ldbu	r6,0(r12)
			p8 = source[y2];

			p3 = source[y0+1];
			p6 = source[y1+1];
    1b20:	67c00043 	ldbu	ra,1(r12)
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
		    
			p2 = source[y0];
			p5 = source[y1];
			p8 = source[y2];
    1b24:	40800003 	ldbu	r2,0(r8)

			p3 = source[y0+1];
    1b28:	5ac00043 	ldbu	r11,1(r11)
			p6 = source[y1+1];
			p9 = source[y2+1];
    1b2c:	43000043 	ldbu	r12,1(r8)

			for (x = 1 ; x < width_len ; x++) {
    1b30:	9cbfef0e 	bge	r19,r18,1af0 <__alt_data_end+0xff001af0>
    1b34:	29c00084 	addi	r7,r5,2
    1b38:	52800084 	addi	r10,r10,2
    1b3c:	4a400084 	addi	r9,r9,2
    1b40:	914b883a 	add	r5,r18,r5
    1b44:	2295883a 	add	r10,r4,r10
    1b48:	21cf883a 	add	r7,r4,r7
    1b4c:	2253883a 	add	r9,r4,r9
    1b50:	214b883a 	add	r5,r4,r5
    1b54:	00000106 	br	1b5c <sobel_complete+0xb8>
				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
    1b58:	783f883a 	mov	ra,r15

				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
    1b5c:	53800003 	ldbu	r14,0(r10)
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
    1b60:	4b400003 	ldbu	r13,0(r9)
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b64:	d5e71a17 	ldw	r23,-25496(gp)
				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
				
				a = p1 - p9;
				b = p3 - p7;
    1b68:	7085c83a 	sub	r2,r14,r2

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
				
				a = p1 - p9;
    1b6c:	1b47c83a 	sub	r3,r3,r13
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b70:	5b2bc83a 	sub	r21,r11,r12
				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1]; 
    1b74:	3bc00003 	ldbu	r15,0(r7)
				p9 = source[y2+x+1];
				
				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1b78:	81d1883a 	add	r8,r16,r7
    1b7c:	18ad883a 	add	r22,r3,r2
    1b80:	ad6b883a 	add	r21,r21,r21
    1b84:	ba11883a 	add	r8,r23,r8
    1b88:	adab883a 	add	r21,r21,r22
    1b8c:	a82bc072 	custom	1,r21,r21,zero
    1b90:	798dc83a 	sub	r6,r15,r6
    1b94:	318d883a 	add	r6,r6,r6
    1b98:	10c7c83a 	sub	r3,r2,r3
    1b9c:	30c5883a 	add	r2,r6,r3
    1ba0:	1005c072 	custom	1,r2,r2,zero
    1ba4:	a885883a 	add	r2,r21,r2
    1ba8:	1505c0b2 	custom	2,r2,r2,r20
    1bac:	40800025 	stbio	r2,0(r8)
    1bb0:	39c00044 	addi	r7,r7,1
    1bb4:	5807883a 	mov	r3,r11
    1bb8:	6005883a 	mov	r2,r12
    1bbc:	f80d883a 	mov	r6,ra
    1bc0:	52800044 	addi	r10,r10,1
    1bc4:	4a400044 	addi	r9,r9,1

				p2 = p3; 
				p5 = p6; 
				p8 = p9;

				p3 = source[y0+x+1];
    1bc8:	7017883a 	mov	r11,r14
				p6 = source[y1+x+1]; 
				p9 = source[y2+x+1];
    1bcc:	6819883a 	mov	r12,r13

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < width_len ; x++) {
    1bd0:	29ffe11e 	bne	r5,r7,1b58 <__alt_data_end+0xff001b58>
    1bd4:	d1e71b17 	ldw	r7,-25492(gp)
    1bd8:	39ffffc4 	addi	r7,r7,-1
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1bdc:	89ffc516 	blt	r17,r7,1af4 <__alt_data_end+0xff001af4>
						ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
						ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
						,threshold));
			}
		}
}
    1be0:	dfc00817 	ldw	ra,32(sp)
    1be4:	ddc00717 	ldw	r23,28(sp)
    1be8:	dd800617 	ldw	r22,24(sp)
    1bec:	dd400517 	ldw	r21,20(sp)
    1bf0:	dd000417 	ldw	r20,16(sp)
    1bf4:	dcc00317 	ldw	r19,12(sp)
    1bf8:	dc800217 	ldw	r18,8(sp)
    1bfc:	dc400117 	ldw	r17,4(sp)
    1c00:	dc000017 	ldw	r16,0(sp)
    1c04:	dec00904 	addi	sp,sp,36
    1c08:	f800283a 	ret

00001c0c <sobel_complete_parted>:

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
    1c0c:	defff604 	addi	sp,sp,-40
    1c10:	dd000415 	stw	r20,16(sp)
    1c14:	dc400115 	stw	r17,4(sp)
    1c18:	2d3fffcc 	andi	r20,r5,65535
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
    1c1c:	d4671917 	ldw	r17,-25500(gp)
    1c20:	a520001c 	xori	r20,r20,32768
						,threshold));
			}
		}
}

void sobel_complete_parted(unsigned char *source, short threshold, int offset, int len){
    1c24:	dcc00315 	stw	r19,12(sp)
    1c28:	dc800215 	stw	r18,8(sp)
    1c2c:	dc000015 	stw	r16,0(sp)
    1c30:	dfc00915 	stw	ra,36(sp)
    1c34:	df000815 	stw	fp,32(sp)
    1c38:	ddc00715 	stw	r23,28(sp)
    1c3c:	dd800615 	stw	r22,24(sp)
    1c40:	dd400515 	stw	r21,20(sp)
    1c44:	31e5883a 	add	r18,r6,r7

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < width_len ; x++) {
    1c48:	04c00084 	movi	r19,2
    1c4c:	a5200004 	addi	r20,r20,-32768
    1c50:	0120303a 	nor	r16,zero,r4
	int x,y;
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = offset ; y < (offset+len) ; y++) {
    1c54:	3480380e 	bge	r6,r18,1d38 <sobel_complete_parted+0x12c>
			y0 = (y-1)*sobel_width;
    1c58:	d2a71917 	ldw	r10,-25500(gp)
    1c5c:	32ffffc4 	addi	r11,r6,-1
		    y1 = y*sobel_width;
    1c60:	328f383a 	mul	r7,r6,r10
	int a,b;
	int y1, y2, y0;
	int p1, p2, p3, p4, p5, p6, p7, p8, p9;
	int width_len = sobel_width-1;
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width;
    1c64:	5a97383a 	mul	r11,r11,r10
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;
    1c68:	31800044 	addi	r6,r6,1

			p2 = source[y0];
			p5 = source[y1];
			p8 = source[y2];
    1c6c:	51d5883a 	add	r10,r10,r7
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;

			p2 = source[y0];
    1c70:	22d3883a 	add	r9,r4,r11
			p5 = source[y1];
    1c74:	21cb883a 	add	r5,r4,r7
			p8 = source[y2];
    1c78:	2291883a 	add	r8,r4,r10
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;

			p2 = source[y0];
			p5 = source[y1];
    1c7c:	2d400003 	ldbu	r21,0(r5)
	for (y = offset ; y < (offset+len) ; y++) {
			y0 = (y-1)*sobel_width;
		    y1 = y*sobel_width;
		    y2 = (y+1)*sobel_width;

			p2 = source[y0];
    1c80:	48c00003 	ldbu	r3,0(r9)
			p5 = source[y1];
			p8 = source[y2];
    1c84:	40800003 	ldbu	r2,0(r8)

			p3 = source[y0+1];
    1c88:	4b000043 	ldbu	r12,1(r9)
			p6 = source[y1+1];
    1c8c:	29400043 	ldbu	r5,1(r5)
			p9 = source[y2+1];
    1c90:	43400043 	ldbu	r13,1(r8)

			for (x = 1 ; x < width_len ; x++) {
    1c94:	9c7fef0e 	bge	r19,r17,1c54 <__alt_data_end+0xff001c54>
    1c98:	3a000084 	addi	r8,r7,2
    1c9c:	5ac00084 	addi	r11,r11,2
    1ca0:	52800084 	addi	r10,r10,2
    1ca4:	89cf883a 	add	r7,r17,r7
    1ca8:	22d7883a 	add	r11,r4,r11
    1cac:	2211883a 	add	r8,r4,r8
    1cb0:	2295883a 	add	r10,r4,r10
    1cb4:	21cf883a 	add	r7,r4,r7

				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x+1];
    1cb8:	5bc00003 	ldbu	r15,0(r11)
				p6 = source[y1+x+1];
				p9 = source[y2+x+1];
    1cbc:	53800003 	ldbu	r14,0(r10)

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1cc0:	d7271a17 	ldw	fp,-25496(gp)
    1cc4:	636dc83a 	sub	r22,r12,r13
				p3 = source[y0+x+1];
				p6 = source[y1+x+1];
				p9 = source[y2+x+1];

				a = p1 - p9;
				b = p3 - p7;
    1cc8:	7885c83a 	sub	r2,r15,r2

				p3 = source[y0+x+1];
				p6 = source[y1+x+1];
				p9 = source[y2+x+1];

				a = p1 - p9;
    1ccc:	1b87c83a 	sub	r3,r3,r14
				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1];
    1cd0:	47c00003 	ldbu	ra,0(r8)
				p9 = source[y2+x+1];

				a = p1 - p9;
				b = p3 - p7;
				IOWR_8DIRECT(sobel_result,y1+x,ALT_CI_THRESHOLD_0(
    1cd4:	b5af883a 	add	r23,r22,r22
    1cd8:	8213883a 	add	r9,r16,r8
    1cdc:	18ad883a 	add	r22,r3,r2
    1ce0:	e253883a 	add	r9,fp,r9
    1ce4:	bdad883a 	add	r22,r23,r22
    1ce8:	b02dc072 	custom	1,r22,r22,zero
    1cec:	fd6bc83a 	sub	r21,ra,r21
    1cf0:	ad6b883a 	add	r21,r21,r21
    1cf4:	10c7c83a 	sub	r3,r2,r3
    1cf8:	a8c5883a 	add	r2,r21,r3
    1cfc:	1005c072 	custom	1,r2,r2,zero
    1d00:	b085883a 	add	r2,r22,r2
    1d04:	1505c0b2 	custom	2,r2,r2,r20
    1d08:	48800025 	stbio	r2,0(r9)
    1d0c:	42000044 	addi	r8,r8,1
    1d10:	6007883a 	mov	r3,r12
    1d14:	6805883a 	mov	r2,r13
    1d18:	282b883a 	mov	r21,r5
    1d1c:	5ac00044 	addi	r11,r11,1
    1d20:	52800044 	addi	r10,r10,1

				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x+1];
    1d24:	7819883a 	mov	r12,r15
				p6 = source[y1+x+1];
				p9 = source[y2+x+1];
    1d28:	701b883a 	mov	r13,r14

			p3 = source[y0+1];
			p6 = source[y1+1];
			p9 = source[y2+1];

			for (x = 1 ; x < width_len ; x++) {
    1d2c:	3a3fc926 	beq	r7,r8,1c54 <__alt_data_end+0xff001c54>
				p2 = p3;
				p5 = p6;
				p8 = p9;

				p3 = source[y0+x+1];
				p6 = source[y1+x+1];
    1d30:	f80b883a 	mov	r5,ra
    1d34:	003fe006 	br	1cb8 <__alt_data_end+0xff001cb8>
						ALT_CI_ABSOLUTE_0(a + b + 2 * (p2 - p8)) +
						ALT_CI_ABSOLUTE_0(b - a + 2 * (p6 - p4))
						,threshold));
			}
		}
}
    1d38:	dfc00917 	ldw	ra,36(sp)
    1d3c:	df000817 	ldw	fp,32(sp)
    1d40:	ddc00717 	ldw	r23,28(sp)
    1d44:	dd800617 	ldw	r22,24(sp)
    1d48:	dd400517 	ldw	r21,20(sp)
    1d4c:	dd000417 	ldw	r20,16(sp)
    1d50:	dcc00317 	ldw	r19,12(sp)
    1d54:	dc800217 	ldw	r18,8(sp)
    1d58:	dc400117 	ldw	r17,4(sp)
    1d5c:	dc000017 	ldw	r16,0(sp)
    1d60:	dec00a04 	addi	sp,sp,40
    1d64:	f800283a 	ret

00001d68 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d68:	d0a71e17 	ldw	r2,-25480(gp)
    1d6c:	f800283a 	ret

00001d70 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d70:	d0a71a17 	ldw	r2,-25496(gp)
    1d74:	f800283a 	ret

00001d78 <sobel_all_init>:
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d78:	defffe04 	addi	sp,sp,-8
    1d7c:	dc000015 	stw	r16,0(sp)
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
    1d80:	2161383a 	mul	r16,r4,r5
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d84:	2007883a 	mov	r3,r4
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d88:	01000074 	movhi	r4,1
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1d8c:	2805883a 	mov	r2,r5
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d90:	21083104 	addi	r4,r4,8388
    1d94:	280d883a 	mov	r6,r5
    1d98:	800f883a 	mov	r7,r16
    1d9c:	180b883a 	mov	r5,r3
alt_u32 start_sobel_a = 0;
alt_u32 end_sobel_a = 0;
alt_u32 start_conv_grayscale_a = 0;
alt_u32 end_conv_grayscale_a = 0;

void sobel_all_init(int width, int height){
    1da0:	dfc00115 	stw	ra,4(sp)
	int loop = 0;
	array_width = width;
    1da4:	d0e72515 	stw	r3,-25452(gp)
	array_height = height;
    1da8:	d0a72415 	stw	r2,-25456(gp)
	size = width*height;
    1dac:	d4272315 	stw	r16,-25460(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1db0:	00039ec0 	call	39ec <printf>
	if (grayscale_array != NULL)
    1db4:	d1270f17 	ldw	r4,-25540(gp)
    1db8:	20000126 	beq	r4,zero,1dc0 <sobel_all_init+0x48>
		free(grayscale_array);
    1dbc:	000319c0 	call	319c <free>
	grayscale_array = (unsigned char *) malloc(width* height);
    1dc0:	8009883a 	mov	r4,r16
    1dc4:	00031880 	call	3188 <malloc>
	if (sobel_result != NULL)
    1dc8:	d1271a17 	ldw	r4,-25496(gp)
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
    1dcc:	d0a70f15 	stw	r2,-25540(gp)
	if (sobel_result != NULL)
    1dd0:	20000126 	beq	r4,zero,1dd8 <sobel_all_init+0x60>
		free(sobel_result);
    1dd4:	000319c0 	call	319c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1dd8:	8009883a 	mov	r4,r16
    1ddc:	00031880 	call	3188 <malloc>
    1de0:	d0a71a15 	stw	r2,-25496(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1de4:	0400070e 	bge	zero,r16,1e04 <sobel_all_init+0x8c>
    1de8:	0007883a 	mov	r3,zero
    1dec:	00000106 	br	1df4 <sobel_all_init+0x7c>
    1df0:	d0a71a17 	ldw	r2,-25496(gp)
		sobel_result[loop] = 0;
    1df4:	10c5883a 	add	r2,r2,r3
    1df8:	10000005 	stb	zero,0(r2)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1dfc:	18c00044 	addi	r3,r3,1
    1e00:	80fffb1e 	bne	r16,r3,1df0 <__alt_data_end+0xff001df0>
		sobel_result[loop] = 0;
	}
}
    1e04:	dfc00117 	ldw	ra,4(sp)
    1e08:	dc000017 	ldw	r16,0(sp)
    1e0c:	dec00204 	addi	sp,sp,8
    1e10:	f800283a 	ret

00001e14 <sobel_all_complete>:

void sobel_all_complete(void *picture){
    1e14:	defffb04 	addi	sp,sp,-20
    1e18:	dc000015 	stw	r16,0(sp)
    1e1c:	dfc00415 	stw	ra,16(sp)
    1e20:	dcc00315 	stw	r19,12(sp)
    1e24:	dc800215 	stw	r18,8(sp)
    1e28:	dc400115 	stw	r17,4(sp)
    1e2c:	2021883a 	mov	r16,r4

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale_a = alt_timestamp();
    1e30:	00105d00 	call	105d0 <alt_timestamp>
    1e34:	d0a72015 	stw	r2,-25472(gp)
	for (pos = 0 ; pos < size ; pos++) {
    1e38:	d0a72317 	ldw	r2,-25460(gp)
    1e3c:	00800b0e 	bge	zero,r2,1e6c <sobel_all_complete+0x58>
    1e40:	8009883a 	mov	r4,r16
    1e44:	0005883a 	mov	r2,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1e48:	d0e70f17 	ldw	r3,-25540(gp)
    1e4c:	2140000b 	ldhu	r5,0(r4)
    1e50:	1887883a 	add	r3,r3,r2
    1e54:	280bc032 	custom	0,r5,r5,zero
    1e58:	19400005 	stb	r5,0(r3)
void sobel_all_complete(void *picture){

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale_a = alt_timestamp();
	for (pos = 0 ; pos < size ; pos++) {
    1e5c:	d0e72317 	ldw	r3,-25460(gp)
    1e60:	10800044 	addi	r2,r2,1
    1e64:	21000084 	addi	r4,r4,2
    1e68:	10fff716 	blt	r2,r3,1e48 <__alt_data_end+0xff001e48>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,pos,ALT_CI_RGB2GRAY_0(pixels[pos]));
	}
	end_conv_grayscale_a = alt_timestamp();
    1e6c:	00105d00 	call	105d0 <alt_timestamp>
    1e70:	d0a71f15 	stw	r2,-25476(gp)

	start_sobel_a = alt_timestamp();
    1e74:	00105d00 	call	105d0 <alt_timestamp>
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e78:	d0e72417 	ldw	r3,-25456(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,pos,ALT_CI_RGB2GRAY_0(pixels[pos]));
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
    1e7c:	d0a72215 	stw	r2,-25464(gp)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e80:	02400084 	movi	r9,2
    1e84:	48c0410e 	bge	r9,r3,1f8c <sobel_all_complete+0x178>
    1e88:	d1272517 	ldw	r4,-25452(gp)
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e8c:	481d883a 	mov	r14,r9
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e90:	03002004 	movi	r12,128
    1e94:	4abfffc4 	addi	r10,r9,-1
    1e98:	481b883a 	mov	r13,r9
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e9c:	7100380e 	bge	r14,r4,1f80 <sobel_all_complete+0x16c>
    1ea0:	4affff84 	addi	r11,r9,-2
    1ea4:	481b883a 	mov	r13,r9
    1ea8:	01400044 	movi	r5,1
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1eac:	d1e70f17 	ldw	r7,-25540(gp)
    1eb0:	22c7383a 	mul	r3,r4,r11
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1eb4:	2265383a 	mul	r18,r4,r9
    1eb8:	2bffffc4 	addi	r15,r5,-1

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1ebc:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ec0:	1945883a 	add	r2,r3,r5
	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1ec4:	2a000044 	addi	r8,r5,1

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1ec8:	1bcd883a 	add	r6,r3,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ecc:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1ed0:	3ca3883a 	add	r17,r7,r18

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1ed4:	34000003 	ldbu	r16,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1ed8:	1a07883a 	add	r3,r3,r8
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1edc:	8967883a 	add	r19,r17,r5
	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1ee0:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1ee4:	8bc7883a 	add	r3,r17,r15
    1ee8:	1fc00003 	ldbu	ra,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1eec:	1087883a 	add	r3,r2,r2
    1ef0:	98800003 	ldbu	r2,0(r19)
    1ef4:	1c07883a 	add	r3,r3,r16
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1ef8:	3a23883a 	add	r17,r7,r8
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1efc:	1987883a 	add	r3,r3,r6
    1f00:	1fc7c83a 	sub	r3,r3,ra
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1f04:	8ca5883a 	add	r18,r17,r18
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1f08:	2289383a 	mul	r4,r4,r10
    1f0c:	1085883a 	add	r2,r2,r2
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1f10:	94800003 	ldbu	r18,0(r18)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1f14:	1885c83a 	sub	r2,r3,r2
    1f18:	d0e71a17 	ldw	r3,-25496(gp)
    1f1c:	214b883a 	add	r5,r4,r5
    1f20:	1485c83a 	sub	r2,r2,r18
    1f24:	194b883a 	add	r5,r3,r5
    1f28:	1005c072 	custom	1,r2,r2,zero
    1f2c:	390f883a 	add	r7,r7,r4
    1f30:	3bcf883a 	add	r7,r7,r15
    1f34:	38c00003 	ldbu	r3,0(r7)
    1f38:	8909883a 	add	r4,r17,r4
    1f3c:	21000003 	ldbu	r4,0(r4)
    1f40:	340dc83a 	sub	r6,r6,r16
    1f44:	18c7883a 	add	r3,r3,r3
    1f48:	30c7c83a 	sub	r3,r6,r3
    1f4c:	2109883a 	add	r4,r4,r4
    1f50:	1907883a 	add	r3,r3,r4
    1f54:	1fc7c83a 	sub	r3,r3,ra
    1f58:	1c87883a 	add	r3,r3,r18
    1f5c:	1807c072 	custom	1,r3,r3,zero
    1f60:	10c5883a 	add	r2,r2,r3
    1f64:	1305c0b2 	custom	2,r2,r2,r12
    1f68:	28800025 	stbio	r2,0(r5)
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1f6c:	d1272517 	ldw	r4,-25452(gp)
    1f70:	400b883a 	mov	r5,r8
    1f74:	20bfffc4 	addi	r2,r4,-1
    1f78:	40bfcc16 	blt	r8,r2,1eac <__alt_data_end+0xff001eac>
    1f7c:	d0e72417 	ldw	r3,-25456(gp)
	}
	end_conv_grayscale_a = alt_timestamp();

	start_sobel_a = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1f80:	18bfffc4 	addi	r2,r3,-1
    1f84:	4a400044 	addi	r9,r9,1
    1f88:	68bfc216 	blt	r13,r2,1e94 <__alt_data_end+0xff001e94>
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
	}
	end_sobel_a = alt_timestamp();
    1f8c:	00105d00 	call	105d0 <alt_timestamp>
    1f90:	d0a72115 	stw	r2,-25468(gp)
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
    1f94:	d1671f17 	ldw	r5,-25476(gp)
    1f98:	d0a72017 	ldw	r2,-25472(gp)
    1f9c:	01000074 	movhi	r4,1
    1fa0:	21081b04 	addi	r4,r4,8300
    1fa4:	288bc83a 	sub	r5,r5,r2
    1fa8:	00039ec0 	call	39ec <printf>
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    1fac:	d0a72217 	ldw	r2,-25464(gp)
    1fb0:	d1672117 	ldw	r5,-25468(gp)
    1fb4:	01000074 	movhi	r4,1
    1fb8:	21082004 	addi	r4,r4,8320
    1fbc:	288bc83a 	sub	r5,r5,r2
}
    1fc0:	dfc00417 	ldw	ra,16(sp)
    1fc4:	dcc00317 	ldw	r19,12(sp)
    1fc8:	dc800217 	ldw	r18,8(sp)
    1fcc:	dc400117 	ldw	r17,4(sp)
    1fd0:	dc000017 	ldw	r16,0(sp)
    1fd4:	dec00504 	addi	sp,sp,20
					,128));
		}
	}
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
    1fd8:	00039ec1 	jmpi	39ec <printf>

00001fdc <partial>:
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    1fdc:	d0e72517 	ldw	r3,-25452(gp)
    1fe0:	29cf883a 	add	r7,r5,r7
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    1fe4:	defffa04 	addi	sp,sp,-24
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
    1fe8:	1945383a 	mul	r2,r3,r5
    1fec:	38cf383a 	mul	r7,r7,r3
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
}

void partial(void *picture, int fromgray, int fromsobel, int linesgray, int linessobel){
    1ff0:	dfc00515 	stw	ra,20(sp)
    1ff4:	dd000415 	stw	r20,16(sp)
    1ff8:	dcc00315 	stw	r19,12(sp)
    1ffc:	dc800215 	stw	r18,8(sp)
    2000:	dc400115 	stw	r17,4(sp)
    2004:	dc000015 	stw	r16,0(sp)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    2008:	11c00a0e 	bge	r2,r7,2034 <partial+0x58>
    200c:	1087883a 	add	r3,r2,r2
    2010:	20cb883a 	add	r5,r4,r3
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    2014:	d0e70f17 	ldw	r3,-25540(gp)
    2018:	2900000b 	ldhu	r4,0(r5)
    201c:	1887883a 	add	r3,r3,r2
    2020:	2009c032 	custom	0,r4,r4,zero
    2024:	19000005 	stb	r4,0(r3)
	int x,y,pos, f = fromgray*array_width, t = fromgray*array_width+linesgray*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    2028:	10800044 	addi	r2,r2,1
    202c:	29400084 	addi	r5,r5,2
    2030:	38bff81e 	bne	r7,r2,2014 <__alt_data_end+0xff002014>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    2034:	db800617 	ldw	r14,24(sp)
    2038:	30800044 	addi	r2,r6,1
    203c:	339d883a 	add	r14,r6,r14
    2040:	73bfffc4 	addi	r14,r14,-1
    2044:	1380400e 	bge	r2,r14,2148 <partial+0x16c>
    2048:	d1272517 	ldw	r4,-25452(gp)
    204c:	32400084 	addi	r9,r6,2
		for (x = 1 ; x < (array_width-1) ; x++) {
    2050:	03c00084 	movi	r15,2
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2054:	03002004 	movi	r12,128
    2058:	4abfffc4 	addi	r10,r9,-1
    205c:	481b883a 	mov	r13,r9
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2060:	7900370e 	bge	r15,r4,2140 <partial+0x164>
    2064:	4affff84 	addi	r11,r9,-2
    2068:	481b883a 	mov	r13,r9
    206c:	01400044 	movi	r5,1
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2070:	d1e70f17 	ldw	r7,-25540(gp)
    2074:	22c7383a 	mul	r3,r4,r11
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2078:	2267383a 	mul	r19,r4,r9
    207c:	2fffffc4 	addi	ra,r5,-1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2080:	38c7883a 	add	r3,r7,r3
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2084:	1945883a 	add	r2,r3,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    2088:	2a000044 	addi	r8,r5,1


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    208c:	1fcd883a 	add	r6,r3,ra
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2090:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2094:	3ce1883a 	add	r16,r7,r19


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2098:	34400003 	ldbu	r17,0(r6)
					b = grayscale_array[(y-1)*array_width+(x+1)];
    209c:	1a07883a 	add	r3,r3,r8
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    20a0:	8169883a 	add	r20,r16,r5

	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    20a4:	19800003 	ldbu	r6,0(r3)
					c = grayscale_array[(y+1)*array_width+(x-1)];
    20a8:	87c7883a 	add	r3,r16,ra
    20ac:	1c000003 	ldbu	r16,0(r3)
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    20b0:	1087883a 	add	r3,r2,r2
    20b4:	a0800003 	ldbu	r2,0(r20)
    20b8:	1c47883a 	add	r3,r3,r17
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    20bc:	3a25883a 	add	r18,r7,r8
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    20c0:	1987883a 	add	r3,r3,r6
    20c4:	1c07c83a 	sub	r3,r3,r16
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    20c8:	94e7883a 	add	r19,r18,r19
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    20cc:	2289383a 	mul	r4,r4,r10
    20d0:	1085883a 	add	r2,r2,r2
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    20d4:	9cc00003 	ldbu	r19,0(r19)
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    20d8:	1885c83a 	sub	r2,r3,r2
    20dc:	d0e71a17 	ldw	r3,-25496(gp)
    20e0:	214b883a 	add	r5,r4,r5
    20e4:	14c5c83a 	sub	r2,r2,r19
    20e8:	194b883a 	add	r5,r3,r5
    20ec:	1005c072 	custom	1,r2,r2,zero
    20f0:	390f883a 	add	r7,r7,r4
    20f4:	3fcf883a 	add	r7,r7,ra
    20f8:	38c00003 	ldbu	r3,0(r7)
    20fc:	9109883a 	add	r4,r18,r4
    2100:	21000003 	ldbu	r4,0(r4)
    2104:	344dc83a 	sub	r6,r6,r17
    2108:	18c7883a 	add	r3,r3,r3
    210c:	30c7c83a 	sub	r3,r6,r3
    2110:	2109883a 	add	r4,r4,r4
    2114:	1907883a 	add	r3,r3,r4
    2118:	1c07c83a 	sub	r3,r3,r16
    211c:	1cc7883a 	add	r3,r3,r19
    2120:	1807c072 	custom	1,r3,r3,zero
    2124:	10c5883a 	add	r2,r2,r3
    2128:	1305c0b2 	custom	2,r2,r2,r12
    212c:	28800025 	stbio	r2,0(r5)
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2130:	d1272517 	ldw	r4,-25452(gp)
    2134:	400b883a 	mov	r5,r8
    2138:	20bfffc4 	addi	r2,r4,-1
    213c:	40bfcc16 	blt	r8,r2,2070 <__alt_data_end+0xff002070>
    2140:	4a400044 	addi	r9,r9,1
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = fromsobel+1 ; y < (fromsobel+linessobel-1) ; y++) {
    2144:	6bbfc416 	blt	r13,r14,2058 <__alt_data_end+0xff002058>
							ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
								2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
							,128));
		}
	}
}
    2148:	dfc00517 	ldw	ra,20(sp)
    214c:	dd000417 	ldw	r20,16(sp)
    2150:	dcc00317 	ldw	r19,12(sp)
    2154:	dc800217 	ldw	r18,8(sp)
    2158:	dc400117 	ldw	r17,4(sp)
    215c:	dc000017 	ldw	r16,0(sp)
    2160:	dec00604 	addi	sp,sp,24
    2164:	f800283a 	ret

00002168 <sobel_all_partial>:
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
    2168:	d0a72417 	ldw	r2,-25456(gp)
	end_sobel_a = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
    216c:	defff804 	addi	sp,sp,-32
    2170:	dcc00515 	stw	r19,20(sp)
    2174:	dfc00715 	stw	ra,28(sp)
    2178:	2027883a 	mov	r19,r4
    217c:	dd000615 	stw	r20,24(sp)
    2180:	dc800415 	stw	r18,16(sp)
    2184:	dc400315 	stw	r17,12(sp)
    2188:	dc000215 	stw	r16,8(sp)
	int i, divider = 27, sub = array_height/divider;
    218c:	10c006d4 	ori	r3,r2,27
    2190:	010003c4 	movi	r4,15
    2194:	20c03236 	bltu	r4,r3,2260 <sobel_all_partial+0xf8>
    2198:	1004913a 	slli	r2,r2,4
    219c:	00c00074 	movhi	r3,1
    21a0:	18c8fb04 	addi	r3,r3,9196
    21a4:	108006d4 	ori	r2,r2,27
    21a8:	10c5883a 	add	r2,r2,r3
    21ac:	14800003 	ldbu	r18,0(r2)
	partial(picture, 0, 0, sub, sub);
    21b0:	dc800015 	stw	r18,0(sp)
    21b4:	900f883a 	mov	r7,r18
    21b8:	000d883a 	mov	r6,zero
    21bc:	000b883a 	mov	r5,zero
    21c0:	9809883a 	mov	r4,r19
    21c4:	0001fdc0 	call	1fdc <partial>
    21c8:	95000084 	addi	r20,r18,2
    21cc:	9021883a 	mov	r16,r18
    21d0:	04400684 	movi	r17,26
	for (i = 1; i<divider; i++){
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
    21d4:	81bfff84 	addi	r6,r16,-2
    21d8:	800b883a 	mov	r5,r16
    21dc:	dd000015 	stw	r20,0(sp)
    21e0:	900f883a 	mov	r7,r18
    21e4:	9809883a 	mov	r4,r19
    21e8:	8c7fffc4 	addi	r17,r17,-1
    21ec:	0001fdc0 	call	1fdc <partial>
    21f0:	84a1883a 	add	r16,r16,r18
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
	partial(picture, 0, 0, sub, sub);
	for (i = 1; i<divider; i++){
    21f4:	883ff71e 	bne	r17,zero,21d4 <__alt_data_end+0xff0021d4>
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
    21f8:	d4272417 	ldw	r16,-25456(gp)
    21fc:	918006e4 	muli	r6,r18,27
    2200:	00c003c4 	movi	r3,15
    2204:	808006d4 	ori	r2,r16,27
    2208:	31bfff84 	addi	r6,r6,-2
    220c:	18801936 	bltu	r3,r2,2274 <sobel_all_partial+0x10c>
    2210:	8004913a 	slli	r2,r16,4
    2214:	10c006d4 	ori	r3,r2,27
    2218:	00800074 	movhi	r2,1
    221c:	1088fb04 	addi	r2,r2,9196
    2220:	1885883a 	add	r2,r3,r2
    2224:	10800003 	ldbu	r2,0(r2)
    2228:	11c006e4 	muli	r7,r2,27
    222c:	300b883a 	mov	r5,r6
    2230:	9809883a 	mov	r4,r19
    2234:	81cfc83a 	sub	r7,r16,r7
    2238:	d9c00015 	stw	r7,0(sp)
    223c:	0001fdc0 	call	1fdc <partial>
}
    2240:	dfc00717 	ldw	ra,28(sp)
    2244:	dd000617 	ldw	r20,24(sp)
    2248:	dcc00517 	ldw	r19,20(sp)
    224c:	dc800417 	ldw	r18,16(sp)
    2250:	dc400317 	ldw	r17,12(sp)
    2254:	dc000217 	ldw	r16,8(sp)
    2258:	dec00804 	addi	sp,sp,32
    225c:	f800283a 	ret
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale_a-start_conv_grayscale_a));
	printf("sobel: %d\n",(int)(end_sobel_a-start_sobel_a));
}

void sobel_all_partial(void *picture){
	int i, divider = 27, sub = array_height/divider;
    2260:	014006c4 	movi	r5,27
    2264:	1009883a 	mov	r4,r2
    2268:	00025e00 	call	25e0 <__divsi3>
    226c:	1025883a 	mov	r18,r2
    2270:	003fcf06 	br	21b0 <__alt_data_end+0xff0021b0>
	partial(picture, 0, 0, sub, sub);
	for (i = 1; i<divider; i++){
		partial(picture, (i*sub), (i*sub)-2, sub, sub+2);
	}
	partial(picture, divider *sub -2, divider *sub -2, array_height%divider, array_height%divider);
    2274:	014006c4 	movi	r5,27
    2278:	8009883a 	mov	r4,r16
    227c:	d9800115 	stw	r6,4(sp)
    2280:	00025e00 	call	25e0 <__divsi3>
    2284:	d9800117 	ldw	r6,4(sp)
    2288:	003fe706 	br	2228 <__alt_data_end+0xff002228>

0000228c <sobel_all_complete_fusion>:

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    228c:	d0a72517 	ldw	r2,-25452(gp)
							,128));
		}
	}
}

void sobel_all_complete_fusion(void *picture){
    2290:	defff904 	addi	sp,sp,-28
    2294:	dfc00615 	stw	ra,24(sp)
    2298:	dd400515 	stw	r21,20(sp)
    229c:	dd000415 	stw	r20,16(sp)
    22a0:	dcc00315 	stw	r19,12(sp)
    22a4:	dc800215 	stw	r18,8(sp)
    22a8:	dc400115 	stw	r17,4(sp)
    22ac:	dc000015 	stw	r16,0(sp)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    22b0:	00800d0e 	bge	zero,r2,22e8 <sobel_all_complete_fusion+0x5c>
    22b4:	200d883a 	mov	r6,r4
    22b8:	0007883a 	mov	r3,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    22bc:	d0a70f17 	ldw	r2,-25540(gp)
    22c0:	3140000b 	ldhu	r5,0(r6)
    22c4:	10c5883a 	add	r2,r2,r3
    22c8:	280bc032 	custom	0,r5,r5,zero
    22cc:	11400005 	stb	r5,0(r2)

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;


	for (pos = 0 ; pos < 3*array_width ; pos++) {
    22d0:	d0a72517 	ldw	r2,-25452(gp)
    22d4:	18c00044 	addi	r3,r3,1
    22d8:	31800084 	addi	r6,r6,2
    22dc:	108b883a 	add	r5,r2,r2
    22e0:	288b883a 	add	r5,r5,r2
    22e4:	197ff516 	blt	r3,r5,22bc <__alt_data_end+0xff0022bc>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    22e8:	d0e72417 	ldw	r3,-25456(gp)
    22ec:	01400044 	movi	r5,1
    22f0:	19bfff84 	addi	r6,r3,-2
    22f4:	2980620e 	bge	r5,r6,2480 <sobel_all_complete_fusion+0x1f4>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    22f8:	03200034 	movhi	r12,32768
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    22fc:	02000084 	movi	r8,2
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    2300:	633fffc4 	addi	r12,r12,-1


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    2304:	4017883a 	mov	r11,r8
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2308:	02802004 	movi	r10,128
    230c:	42400044 	addi	r9,r8,1
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
    2310:	4885383a 	mul	r2,r9,r2
    2314:	d1670f17 	ldw	r5,-25540(gp)
    2318:	43bfffc4 	addi	r14,r8,-1
    231c:	1087883a 	add	r3,r2,r2
    2320:	20c7883a 	add	r3,r4,r3
    2324:	18c0000b 	ldhu	r3,0(r3)
    2328:	2885883a 	add	r2,r5,r2
    232c:	1807c032 	custom	0,r3,r3,zero
    2330:	10c00005 	stb	r3,0(r2)
		for (x = 1 ; x < (array_width-1) ; x++) {
    2334:	d0a72517 	ldw	r2,-25452(gp)
    2338:	5880400e 	bge	r11,r2,243c <sobel_all_complete_fusion+0x1b0>
    233c:	43ffff84 	addi	r15,r8,-2
    2340:	01400044 	movi	r5,1
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
    2344:	1245383a 	mul	r2,r2,r9
    2348:	d1a70f17 	ldw	r6,-25540(gp)
    234c:	1145883a 	add	r2,r2,r5
    2350:	1087883a 	add	r3,r2,r2
    2354:	20c7883a 	add	r3,r4,r3
    2358:	18c0000b 	ldhu	r3,0(r3)
    235c:	3085883a 	add	r2,r6,r2
    2360:	1807c032 	custom	0,r3,r3,zero
    2364:	10c00005 	stb	r3,0(r2)
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2368:	d4e72517 	ldw	r19,-25452(gp)
    236c:	d1e70f17 	ldw	r7,-25540(gp)
    2370:	2b7fffc4 	addi	r13,r5,-1
    2374:	9bc7383a 	mul	r3,r19,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    2378:	9a29383a 	mul	r20,r19,r8
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    237c:	2fc00044 	addi	ra,r5,1
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2380:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2384:	1945883a 	add	r2,r3,r5
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2388:	1b4d883a 	add	r6,r3,r13
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    238c:	10800003 	ldbu	r2,0(r2)
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    2390:	3d21883a 	add	r16,r7,r20
	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
    2394:	34400003 	ldbu	r17,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    2398:	1fc7883a 	add	r3,r3,ra
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    239c:	816b883a 	add	r21,r16,r5
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    23a0:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    23a4:	8347883a 	add	r3,r16,r13
    23a8:	1c000003 	ldbu	r16,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    23ac:	1087883a 	add	r3,r2,r2
    23b0:	a8800003 	ldbu	r2,0(r21)
    23b4:	1c47883a 	add	r3,r3,r17
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    23b8:	3fe5883a 	add	r18,r7,ra
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    23bc:	1987883a 	add	r3,r3,r6
    23c0:	1c07c83a 	sub	r3,r3,r16
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    23c4:	9529883a 	add	r20,r18,r20
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    23c8:	9ba7383a 	mul	r19,r19,r14
    23cc:	1085883a 	add	r2,r2,r2
		for (x = 1 ; x < (array_width-1) ; x++) {
			grayscale_array[(y+2)*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width+x]);
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    23d0:	a5000003 	ldbu	r20,0(r20)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    23d4:	1885c83a 	sub	r2,r3,r2
    23d8:	d0e71a17 	ldw	r3,-25496(gp)
    23dc:	994b883a 	add	r5,r19,r5
    23e0:	1505c83a 	sub	r2,r2,r20
    23e4:	194b883a 	add	r5,r3,r5
    23e8:	1005c072 	custom	1,r2,r2,zero
    23ec:	3ccf883a 	add	r7,r7,r19
    23f0:	3b4f883a 	add	r7,r7,r13
    23f4:	39c00003 	ldbu	r7,0(r7)
    23f8:	94e5883a 	add	r18,r18,r19
    23fc:	90c00003 	ldbu	r3,0(r18)
    2400:	3463c83a 	sub	r17,r6,r17
    2404:	39cf883a 	add	r7,r7,r7
    2408:	89cdc83a 	sub	r6,r17,r7
    240c:	18c7883a 	add	r3,r3,r3
    2410:	30c7883a 	add	r3,r6,r3
    2414:	1c21c83a 	sub	r16,r3,r16
    2418:	8529883a 	add	r20,r16,r20
    241c:	a029c072 	custom	1,r20,r20,zero
    2420:	1505883a 	add	r2,r2,r20
    2424:	1285c0b2 	custom	2,r2,r2,r10
    2428:	28800025 	stbio	r2,0(r5)


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
		grayscale_array[(y+2)*array_width] = ALT_CI_RGB2GRAY_0(pixels[(y+2)*array_width]);
		for (x = 1 ; x < (array_width-1) ; x++) {
    242c:	d0a72517 	ldw	r2,-25452(gp)
    2430:	f80b883a 	mov	r5,ra
    2434:	10ffffc4 	addi	r3,r2,-1
    2438:	f8ffc216 	blt	ra,r3,2344 <__alt_data_end+0xff002344>
						b - c - 2 * grayscale_array[(y+1)*array_width+(x)] - d) +
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
    243c:	40c00084 	addi	r3,r8,2
    2440:	1885383a 	mul	r2,r3,r2
    2444:	d1670f17 	ldw	r5,-25540(gp)
    2448:	1307883a 	add	r3,r2,r12
    244c:	18c7883a 	add	r3,r3,r3
    2450:	20c7883a 	add	r3,r4,r3
    2454:	18c0000b 	ldhu	r3,0(r3)
    2458:	10bfffc4 	addi	r2,r2,-1
    245c:	2885883a 	add	r2,r5,r2
    2460:	1807c032 	custom	0,r3,r3,zero
    2464:	10c00005 	stb	r3,0(r2)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = 1 ; y < (array_height-2) ; y++) {
    2468:	d0e72417 	ldw	r3,-25456(gp)
    246c:	d0a72517 	ldw	r2,-25452(gp)
    2470:	19bfff84 	addi	r6,r3,-2
    2474:	4180020e 	bge	r8,r6,2480 <sobel_all_complete_fusion+0x1f4>
    2478:	4811883a 	mov	r8,r9
    247c:	003fa306 	br	230c <__alt_data_end+0xff00230c>
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    2480:	01400084 	movi	r5,2
    2484:	2880430e 	bge	r5,r2,2594 <sobel_all_complete_fusion+0x308>
    2488:	1a7fff44 	addi	r9,r3,-3
    248c:	02000044 	movi	r8,1
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2490:	02802004 	movi	r10,128
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
    2494:	3085383a 	mul	r2,r6,r2
    2498:	d1670f17 	ldw	r5,-25540(gp)
    249c:	1087883a 	add	r3,r2,r2
    24a0:	20c7883a 	add	r3,r4,r3
    24a4:	18c0000b 	ldhu	r3,0(r3)
    24a8:	1205883a 	add	r2,r2,r8
    24ac:	2885883a 	add	r2,r5,r2
    24b0:	1807c032 	custom	0,r3,r3,zero
    24b4:	10c00005 	stb	r3,0(r2)
				a = grayscale_array[(y-1)*array_width+(x-1)];
    24b8:	d1672517 	ldw	r5,-25452(gp)
    24bc:	d3270f17 	ldw	r12,-25540(gp)
    24c0:	447fffc4 	addi	r17,r8,-1
    24c4:	2a45383a 	mul	r2,r5,r9
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24c8:	6207883a 	add	r3,r12,r8
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    24cc:	294f883a 	add	r7,r5,r5
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    24d0:	609b883a 	add	r13,r12,r2
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24d4:	189f883a 	add	r15,r3,r2
	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    24d8:	388f883a 	add	r7,r7,r2

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    24dc:	42c00044 	addi	r11,r8,1
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    24e0:	6c5d883a 	add	r14,r13,r17
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24e4:	78800003 	ldbu	r2,0(r15)
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
    24e8:	74000003 	ldbu	r16,0(r14)
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
    24ec:	61df883a 	add	r15,r12,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    24f0:	6adb883a 	add	r13,r13,r11
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    24f4:	19e5883a 	add	r18,r3,r7

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
    24f8:	6b800003 	ldbu	r14,0(r13)
				c = grayscale_array[(y+1)*array_width+(x-1)];
    24fc:	7c5b883a 	add	r13,r15,r17
    2500:	6b400003 	ldbu	r13,0(r13)
				d = grayscale_array[(y+1)*array_width+(x+1)];
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2504:	1087883a 	add	r3,r2,r2
    2508:	90800003 	ldbu	r2,0(r18)
    250c:	1c07883a 	add	r3,r3,r16
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    2510:	62df883a 	add	r15,r12,r11
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2514:	1b87883a 	add	r3,r3,r14
    2518:	1b47c83a 	sub	r3,r3,r13
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    251c:	79cf883a 	add	r7,r15,r7
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2520:	298b383a 	mul	r5,r5,r6
    2524:	1085883a 	add	r2,r2,r2
	for (x = 1 ; x < (array_width-1) ; x++) {
				grayscale_array[y*array_width+x] = ALT_CI_RGB2GRAY_0(pixels[y*array_width]);
				a = grayscale_array[(y-1)*array_width+(x-1)];
				b = grayscale_array[(y-1)*array_width+(x+1)];
				c = grayscale_array[(y+1)*array_width+(x-1)];
				d = grayscale_array[(y+1)*array_width+(x+1)];
    2528:	39c00003 	ldbu	r7,0(r7)
				IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    252c:	1885c83a 	sub	r2,r3,r2
    2530:	d0e71a17 	ldw	r3,-25496(gp)
    2534:	2a11883a 	add	r8,r5,r8
    2538:	11c5c83a 	sub	r2,r2,r7
    253c:	1a11883a 	add	r8,r3,r8
    2540:	1005c072 	custom	1,r2,r2,zero
    2544:	6159883a 	add	r12,r12,r5
    2548:	6459883a 	add	r12,r12,r17
    254c:	63000003 	ldbu	r12,0(r12)
    2550:	795f883a 	add	r15,r15,r5
    2554:	79400003 	ldbu	r5,0(r15)
    2558:	741dc83a 	sub	r14,r14,r16
    255c:	6319883a 	add	r12,r12,r12
    2560:	7319c83a 	sub	r12,r14,r12
    2564:	294b883a 	add	r5,r5,r5
    2568:	614b883a 	add	r5,r12,r5
    256c:	2b47c83a 	sub	r3,r5,r13
    2570:	19c7883a 	add	r3,r3,r7
    2574:	1807c072 	custom	1,r3,r3,zero
    2578:	10c5883a 	add	r2,r2,r3
    257c:	1285c0b2 	custom	2,r2,r2,r10
    2580:	40800025 	stbio	r2,0(r8)
		}
		grayscale_array[(y+3)*array_width-1] = ALT_CI_RGB2GRAY_0(pixels[(y+3)*array_width-1]);
	}

	y = array_height-2;
	for (x = 1 ; x < (array_width-1) ; x++) {
    2584:	d0a72517 	ldw	r2,-25452(gp)
    2588:	5811883a 	mov	r8,r11
    258c:	10ffffc4 	addi	r3,r2,-1
    2590:	58ffc016 	blt	r11,r3,2494 <__alt_data_end+0xff002494>
						ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
							2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
						,128));
	}

}
    2594:	dfc00617 	ldw	ra,24(sp)
    2598:	dd400517 	ldw	r21,20(sp)
    259c:	dd000417 	ldw	r20,16(sp)
    25a0:	dcc00317 	ldw	r19,12(sp)
    25a4:	dc800217 	ldw	r18,8(sp)
    25a8:	dc400117 	ldw	r17,4(sp)
    25ac:	dc000017 	ldw	r16,0(sp)
    25b0:	dec00704 	addi	sp,sp,28
    25b4:	f800283a 	ret

000025b8 <GetSobelAllResult>:
unsigned char *GetSobelAllResult() {
	return sobel_result;
}
    25b8:	d0a71a17 	ldw	r2,-25496(gp)
    25bc:	f800283a 	ret

000025c0 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    25c0:	00804034 	movhi	r2,256
    25c4:	10843404 	addi	r2,r2,4304
    25c8:	11000035 	stwio	r4,0(r2)
    25cc:	f800283a 	ret

000025d0 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    25d0:	00804034 	movhi	r2,256
    25d4:	10843504 	addi	r2,r2,4308
    25d8:	11000025 	stbio	r4,0(r2)
    25dc:	f800283a 	ret

000025e0 <__divsi3>:
    25e0:	20001b16 	blt	r4,zero,2650 <__divsi3+0x70>
    25e4:	000f883a 	mov	r7,zero
    25e8:	28001616 	blt	r5,zero,2644 <__divsi3+0x64>
    25ec:	200d883a 	mov	r6,r4
    25f0:	29001a2e 	bgeu	r5,r4,265c <__divsi3+0x7c>
    25f4:	00800804 	movi	r2,32
    25f8:	00c00044 	movi	r3,1
    25fc:	00000106 	br	2604 <__divsi3+0x24>
    2600:	10000d26 	beq	r2,zero,2638 <__divsi3+0x58>
    2604:	294b883a 	add	r5,r5,r5
    2608:	10bfffc4 	addi	r2,r2,-1
    260c:	18c7883a 	add	r3,r3,r3
    2610:	293ffb36 	bltu	r5,r4,2600 <__alt_data_end+0xff002600>
    2614:	0005883a 	mov	r2,zero
    2618:	18000726 	beq	r3,zero,2638 <__divsi3+0x58>
    261c:	0005883a 	mov	r2,zero
    2620:	31400236 	bltu	r6,r5,262c <__divsi3+0x4c>
    2624:	314dc83a 	sub	r6,r6,r5
    2628:	10c4b03a 	or	r2,r2,r3
    262c:	1806d07a 	srli	r3,r3,1
    2630:	280ad07a 	srli	r5,r5,1
    2634:	183ffa1e 	bne	r3,zero,2620 <__alt_data_end+0xff002620>
    2638:	38000126 	beq	r7,zero,2640 <__divsi3+0x60>
    263c:	0085c83a 	sub	r2,zero,r2
    2640:	f800283a 	ret
    2644:	014bc83a 	sub	r5,zero,r5
    2648:	39c0005c 	xori	r7,r7,1
    264c:	003fe706 	br	25ec <__alt_data_end+0xff0025ec>
    2650:	0109c83a 	sub	r4,zero,r4
    2654:	01c00044 	movi	r7,1
    2658:	003fe306 	br	25e8 <__alt_data_end+0xff0025e8>
    265c:	00c00044 	movi	r3,1
    2660:	003fee06 	br	261c <__alt_data_end+0xff00261c>

00002664 <__modsi3>:
    2664:	20001716 	blt	r4,zero,26c4 <__modsi3+0x60>
    2668:	000f883a 	mov	r7,zero
    266c:	2005883a 	mov	r2,r4
    2670:	28001216 	blt	r5,zero,26bc <__modsi3+0x58>
    2674:	2900162e 	bgeu	r5,r4,26d0 <__modsi3+0x6c>
    2678:	01800804 	movi	r6,32
    267c:	00c00044 	movi	r3,1
    2680:	00000106 	br	2688 <__modsi3+0x24>
    2684:	30000a26 	beq	r6,zero,26b0 <__modsi3+0x4c>
    2688:	294b883a 	add	r5,r5,r5
    268c:	31bfffc4 	addi	r6,r6,-1
    2690:	18c7883a 	add	r3,r3,r3
    2694:	293ffb36 	bltu	r5,r4,2684 <__alt_data_end+0xff002684>
    2698:	18000526 	beq	r3,zero,26b0 <__modsi3+0x4c>
    269c:	1806d07a 	srli	r3,r3,1
    26a0:	11400136 	bltu	r2,r5,26a8 <__modsi3+0x44>
    26a4:	1145c83a 	sub	r2,r2,r5
    26a8:	280ad07a 	srli	r5,r5,1
    26ac:	183ffb1e 	bne	r3,zero,269c <__alt_data_end+0xff00269c>
    26b0:	38000126 	beq	r7,zero,26b8 <__modsi3+0x54>
    26b4:	0085c83a 	sub	r2,zero,r2
    26b8:	f800283a 	ret
    26bc:	014bc83a 	sub	r5,zero,r5
    26c0:	003fec06 	br	2674 <__alt_data_end+0xff002674>
    26c4:	0109c83a 	sub	r4,zero,r4
    26c8:	01c00044 	movi	r7,1
    26cc:	003fe706 	br	266c <__alt_data_end+0xff00266c>
    26d0:	00c00044 	movi	r3,1
    26d4:	003ff106 	br	269c <__alt_data_end+0xff00269c>

000026d8 <__udivsi3>:
    26d8:	200d883a 	mov	r6,r4
    26dc:	2900152e 	bgeu	r5,r4,2734 <__udivsi3+0x5c>
    26e0:	28001416 	blt	r5,zero,2734 <__udivsi3+0x5c>
    26e4:	00800804 	movi	r2,32
    26e8:	00c00044 	movi	r3,1
    26ec:	00000206 	br	26f8 <__udivsi3+0x20>
    26f0:	10000e26 	beq	r2,zero,272c <__udivsi3+0x54>
    26f4:	28000516 	blt	r5,zero,270c <__udivsi3+0x34>
    26f8:	294b883a 	add	r5,r5,r5
    26fc:	10bfffc4 	addi	r2,r2,-1
    2700:	18c7883a 	add	r3,r3,r3
    2704:	293ffa36 	bltu	r5,r4,26f0 <__alt_data_end+0xff0026f0>
    2708:	18000826 	beq	r3,zero,272c <__udivsi3+0x54>
    270c:	0005883a 	mov	r2,zero
    2710:	31400236 	bltu	r6,r5,271c <__udivsi3+0x44>
    2714:	314dc83a 	sub	r6,r6,r5
    2718:	10c4b03a 	or	r2,r2,r3
    271c:	1806d07a 	srli	r3,r3,1
    2720:	280ad07a 	srli	r5,r5,1
    2724:	183ffa1e 	bne	r3,zero,2710 <__alt_data_end+0xff002710>
    2728:	f800283a 	ret
    272c:	0005883a 	mov	r2,zero
    2730:	f800283a 	ret
    2734:	00c00044 	movi	r3,1
    2738:	003ff406 	br	270c <__alt_data_end+0xff00270c>

0000273c <__umodsi3>:
    273c:	2005883a 	mov	r2,r4
    2740:	2900122e 	bgeu	r5,r4,278c <__umodsi3+0x50>
    2744:	28001116 	blt	r5,zero,278c <__umodsi3+0x50>
    2748:	01800804 	movi	r6,32
    274c:	00c00044 	movi	r3,1
    2750:	00000206 	br	275c <__umodsi3+0x20>
    2754:	30000c26 	beq	r6,zero,2788 <__umodsi3+0x4c>
    2758:	28000516 	blt	r5,zero,2770 <__umodsi3+0x34>
    275c:	294b883a 	add	r5,r5,r5
    2760:	31bfffc4 	addi	r6,r6,-1
    2764:	18c7883a 	add	r3,r3,r3
    2768:	293ffa36 	bltu	r5,r4,2754 <__alt_data_end+0xff002754>
    276c:	18000626 	beq	r3,zero,2788 <__umodsi3+0x4c>
    2770:	1806d07a 	srli	r3,r3,1
    2774:	11400136 	bltu	r2,r5,277c <__umodsi3+0x40>
    2778:	1145c83a 	sub	r2,r2,r5
    277c:	280ad07a 	srli	r5,r5,1
    2780:	183ffb1e 	bne	r3,zero,2770 <__alt_data_end+0xff002770>
    2784:	f800283a 	ret
    2788:	f800283a 	ret
    278c:	00c00044 	movi	r3,1
    2790:	003ff706 	br	2770 <__alt_data_end+0xff002770>

00002794 <__divdf3>:
    2794:	defff204 	addi	sp,sp,-56
    2798:	dd400915 	stw	r21,36(sp)
    279c:	282ad53a 	srli	r21,r5,20
    27a0:	dd000815 	stw	r20,32(sp)
    27a4:	2828d7fa 	srli	r20,r5,31
    27a8:	dc000415 	stw	r16,16(sp)
    27ac:	04000434 	movhi	r16,16
    27b0:	df000c15 	stw	fp,48(sp)
    27b4:	843fffc4 	addi	r16,r16,-1
    27b8:	dfc00d15 	stw	ra,52(sp)
    27bc:	ddc00b15 	stw	r23,44(sp)
    27c0:	dd800a15 	stw	r22,40(sp)
    27c4:	dcc00715 	stw	r19,28(sp)
    27c8:	dc800615 	stw	r18,24(sp)
    27cc:	dc400515 	stw	r17,20(sp)
    27d0:	ad41ffcc 	andi	r21,r21,2047
    27d4:	2c20703a 	and	r16,r5,r16
    27d8:	a7003fcc 	andi	fp,r20,255
    27dc:	a8006126 	beq	r21,zero,2964 <__divdf3+0x1d0>
    27e0:	0081ffc4 	movi	r2,2047
    27e4:	2025883a 	mov	r18,r4
    27e8:	a8803726 	beq	r21,r2,28c8 <__divdf3+0x134>
    27ec:	80800434 	orhi	r2,r16,16
    27f0:	100490fa 	slli	r2,r2,3
    27f4:	2020d77a 	srli	r16,r4,29
    27f8:	202490fa 	slli	r18,r4,3
    27fc:	ad7f0044 	addi	r21,r21,-1023
    2800:	80a0b03a 	or	r16,r16,r2
    2804:	0027883a 	mov	r19,zero
    2808:	0013883a 	mov	r9,zero
    280c:	3804d53a 	srli	r2,r7,20
    2810:	382cd7fa 	srli	r22,r7,31
    2814:	04400434 	movhi	r17,16
    2818:	8c7fffc4 	addi	r17,r17,-1
    281c:	1081ffcc 	andi	r2,r2,2047
    2820:	3011883a 	mov	r8,r6
    2824:	3c62703a 	and	r17,r7,r17
    2828:	b5c03fcc 	andi	r23,r22,255
    282c:	10006c26 	beq	r2,zero,29e0 <__divdf3+0x24c>
    2830:	00c1ffc4 	movi	r3,2047
    2834:	10c06426 	beq	r2,r3,29c8 <__divdf3+0x234>
    2838:	88c00434 	orhi	r3,r17,16
    283c:	180690fa 	slli	r3,r3,3
    2840:	3022d77a 	srli	r17,r6,29
    2844:	301090fa 	slli	r8,r6,3
    2848:	10bf0044 	addi	r2,r2,-1023
    284c:	88e2b03a 	or	r17,r17,r3
    2850:	000f883a 	mov	r7,zero
    2854:	a58cf03a 	xor	r6,r20,r22
    2858:	3cc8b03a 	or	r4,r7,r19
    285c:	a8abc83a 	sub	r21,r21,r2
    2860:	008003c4 	movi	r2,15
    2864:	3007883a 	mov	r3,r6
    2868:	34c03fcc 	andi	r19,r6,255
    286c:	11009036 	bltu	r2,r4,2ab0 <__divdf3+0x31c>
    2870:	200890ba 	slli	r4,r4,2
    2874:	00800034 	movhi	r2,0
    2878:	108a2204 	addi	r2,r2,10376
    287c:	2089883a 	add	r4,r4,r2
    2880:	20800017 	ldw	r2,0(r4)
    2884:	1000683a 	jmp	r2
    2888:	00002ab0 	cmpltui	zero,zero,170
    288c:	00002900 	call	290 <init_camera>
    2890:	00002aa0 	cmpeqi	zero,zero,170
    2894:	000028f4 	movhi	zero,163
    2898:	00002aa0 	cmpeqi	zero,zero,170
    289c:	00002a74 	movhi	zero,169
    28a0:	00002aa0 	cmpeqi	zero,zero,170
    28a4:	000028f4 	movhi	zero,163
    28a8:	00002900 	call	290 <init_camera>
    28ac:	00002900 	call	290 <init_camera>
    28b0:	00002a74 	movhi	zero,169
    28b4:	000028f4 	movhi	zero,163
    28b8:	000028e4 	muli	zero,zero,163
    28bc:	000028e4 	muli	zero,zero,163
    28c0:	000028e4 	muli	zero,zero,163
    28c4:	00002d94 	movui	zero,182
    28c8:	2404b03a 	or	r2,r4,r16
    28cc:	1000661e 	bne	r2,zero,2a68 <__divdf3+0x2d4>
    28d0:	04c00204 	movi	r19,8
    28d4:	0021883a 	mov	r16,zero
    28d8:	0025883a 	mov	r18,zero
    28dc:	02400084 	movi	r9,2
    28e0:	003fca06 	br	280c <__alt_data_end+0xff00280c>
    28e4:	8023883a 	mov	r17,r16
    28e8:	9011883a 	mov	r8,r18
    28ec:	e02f883a 	mov	r23,fp
    28f0:	480f883a 	mov	r7,r9
    28f4:	00800084 	movi	r2,2
    28f8:	3881311e 	bne	r7,r2,2dc0 <__divdf3+0x62c>
    28fc:	b827883a 	mov	r19,r23
    2900:	98c0004c 	andi	r3,r19,1
    2904:	0081ffc4 	movi	r2,2047
    2908:	000b883a 	mov	r5,zero
    290c:	0025883a 	mov	r18,zero
    2910:	1004953a 	slli	r2,r2,20
    2914:	18c03fcc 	andi	r3,r3,255
    2918:	04400434 	movhi	r17,16
    291c:	8c7fffc4 	addi	r17,r17,-1
    2920:	180697fa 	slli	r3,r3,31
    2924:	2c4a703a 	and	r5,r5,r17
    2928:	288ab03a 	or	r5,r5,r2
    292c:	28c6b03a 	or	r3,r5,r3
    2930:	9005883a 	mov	r2,r18
    2934:	dfc00d17 	ldw	ra,52(sp)
    2938:	df000c17 	ldw	fp,48(sp)
    293c:	ddc00b17 	ldw	r23,44(sp)
    2940:	dd800a17 	ldw	r22,40(sp)
    2944:	dd400917 	ldw	r21,36(sp)
    2948:	dd000817 	ldw	r20,32(sp)
    294c:	dcc00717 	ldw	r19,28(sp)
    2950:	dc800617 	ldw	r18,24(sp)
    2954:	dc400517 	ldw	r17,20(sp)
    2958:	dc000417 	ldw	r16,16(sp)
    295c:	dec00e04 	addi	sp,sp,56
    2960:	f800283a 	ret
    2964:	2404b03a 	or	r2,r4,r16
    2968:	2027883a 	mov	r19,r4
    296c:	10003926 	beq	r2,zero,2a54 <__divdf3+0x2c0>
    2970:	80012e26 	beq	r16,zero,2e2c <__divdf3+0x698>
    2974:	8009883a 	mov	r4,r16
    2978:	d9800315 	stw	r6,12(sp)
    297c:	d9c00215 	stw	r7,8(sp)
    2980:	00031240 	call	3124 <__clzsi2>
    2984:	d9800317 	ldw	r6,12(sp)
    2988:	d9c00217 	ldw	r7,8(sp)
    298c:	113ffd44 	addi	r4,r2,-11
    2990:	00c00704 	movi	r3,28
    2994:	19012116 	blt	r3,r4,2e1c <__divdf3+0x688>
    2998:	00c00744 	movi	r3,29
    299c:	147ffe04 	addi	r17,r2,-8
    29a0:	1907c83a 	sub	r3,r3,r4
    29a4:	8460983a 	sll	r16,r16,r17
    29a8:	98c6d83a 	srl	r3,r19,r3
    29ac:	9c64983a 	sll	r18,r19,r17
    29b0:	1c20b03a 	or	r16,r3,r16
    29b4:	1080fcc4 	addi	r2,r2,1011
    29b8:	00abc83a 	sub	r21,zero,r2
    29bc:	0027883a 	mov	r19,zero
    29c0:	0013883a 	mov	r9,zero
    29c4:	003f9106 	br	280c <__alt_data_end+0xff00280c>
    29c8:	3446b03a 	or	r3,r6,r17
    29cc:	18001f1e 	bne	r3,zero,2a4c <__divdf3+0x2b8>
    29d0:	0023883a 	mov	r17,zero
    29d4:	0011883a 	mov	r8,zero
    29d8:	01c00084 	movi	r7,2
    29dc:	003f9d06 	br	2854 <__alt_data_end+0xff002854>
    29e0:	3446b03a 	or	r3,r6,r17
    29e4:	18001526 	beq	r3,zero,2a3c <__divdf3+0x2a8>
    29e8:	88011b26 	beq	r17,zero,2e58 <__divdf3+0x6c4>
    29ec:	8809883a 	mov	r4,r17
    29f0:	d9800315 	stw	r6,12(sp)
    29f4:	da400115 	stw	r9,4(sp)
    29f8:	00031240 	call	3124 <__clzsi2>
    29fc:	d9800317 	ldw	r6,12(sp)
    2a00:	da400117 	ldw	r9,4(sp)
    2a04:	113ffd44 	addi	r4,r2,-11
    2a08:	00c00704 	movi	r3,28
    2a0c:	19010e16 	blt	r3,r4,2e48 <__divdf3+0x6b4>
    2a10:	00c00744 	movi	r3,29
    2a14:	123ffe04 	addi	r8,r2,-8
    2a18:	1907c83a 	sub	r3,r3,r4
    2a1c:	8a22983a 	sll	r17,r17,r8
    2a20:	30c6d83a 	srl	r3,r6,r3
    2a24:	3210983a 	sll	r8,r6,r8
    2a28:	1c62b03a 	or	r17,r3,r17
    2a2c:	1080fcc4 	addi	r2,r2,1011
    2a30:	0085c83a 	sub	r2,zero,r2
    2a34:	000f883a 	mov	r7,zero
    2a38:	003f8606 	br	2854 <__alt_data_end+0xff002854>
    2a3c:	0023883a 	mov	r17,zero
    2a40:	0011883a 	mov	r8,zero
    2a44:	01c00044 	movi	r7,1
    2a48:	003f8206 	br	2854 <__alt_data_end+0xff002854>
    2a4c:	01c000c4 	movi	r7,3
    2a50:	003f8006 	br	2854 <__alt_data_end+0xff002854>
    2a54:	04c00104 	movi	r19,4
    2a58:	0021883a 	mov	r16,zero
    2a5c:	0025883a 	mov	r18,zero
    2a60:	02400044 	movi	r9,1
    2a64:	003f6906 	br	280c <__alt_data_end+0xff00280c>
    2a68:	04c00304 	movi	r19,12
    2a6c:	024000c4 	movi	r9,3
    2a70:	003f6606 	br	280c <__alt_data_end+0xff00280c>
    2a74:	01400434 	movhi	r5,16
    2a78:	0007883a 	mov	r3,zero
    2a7c:	297fffc4 	addi	r5,r5,-1
    2a80:	04bfffc4 	movi	r18,-1
    2a84:	0081ffc4 	movi	r2,2047
    2a88:	003fa106 	br	2910 <__alt_data_end+0xff002910>
    2a8c:	00c00044 	movi	r3,1
    2a90:	1887c83a 	sub	r3,r3,r2
    2a94:	01000e04 	movi	r4,56
    2a98:	20c1210e 	bge	r4,r3,2f20 <__divdf3+0x78c>
    2a9c:	98c0004c 	andi	r3,r19,1
    2aa0:	0005883a 	mov	r2,zero
    2aa4:	000b883a 	mov	r5,zero
    2aa8:	0025883a 	mov	r18,zero
    2aac:	003f9806 	br	2910 <__alt_data_end+0xff002910>
    2ab0:	8c00fd36 	bltu	r17,r16,2ea8 <__divdf3+0x714>
    2ab4:	8440fb26 	beq	r16,r17,2ea4 <__divdf3+0x710>
    2ab8:	8007883a 	mov	r3,r16
    2abc:	ad7fffc4 	addi	r21,r21,-1
    2ac0:	0021883a 	mov	r16,zero
    2ac4:	4004d63a 	srli	r2,r8,24
    2ac8:	8822923a 	slli	r17,r17,8
    2acc:	1809883a 	mov	r4,r3
    2ad0:	402c923a 	slli	r22,r8,8
    2ad4:	88b8b03a 	or	fp,r17,r2
    2ad8:	e028d43a 	srli	r20,fp,16
    2adc:	d8c00015 	stw	r3,0(sp)
    2ae0:	e5ffffcc 	andi	r23,fp,65535
    2ae4:	a00b883a 	mov	r5,r20
    2ae8:	00026d80 	call	26d8 <__udivsi3>
    2aec:	d8c00017 	ldw	r3,0(sp)
    2af0:	a00b883a 	mov	r5,r20
    2af4:	d8800315 	stw	r2,12(sp)
    2af8:	1809883a 	mov	r4,r3
    2afc:	000273c0 	call	273c <__umodsi3>
    2b00:	d9800317 	ldw	r6,12(sp)
    2b04:	1006943a 	slli	r3,r2,16
    2b08:	9004d43a 	srli	r2,r18,16
    2b0c:	b9a3383a 	mul	r17,r23,r6
    2b10:	10c4b03a 	or	r2,r2,r3
    2b14:	1440062e 	bgeu	r2,r17,2b30 <__divdf3+0x39c>
    2b18:	1705883a 	add	r2,r2,fp
    2b1c:	30ffffc4 	addi	r3,r6,-1
    2b20:	1700ee36 	bltu	r2,fp,2edc <__divdf3+0x748>
    2b24:	1440ed2e 	bgeu	r2,r17,2edc <__divdf3+0x748>
    2b28:	31bfff84 	addi	r6,r6,-2
    2b2c:	1705883a 	add	r2,r2,fp
    2b30:	1463c83a 	sub	r17,r2,r17
    2b34:	a00b883a 	mov	r5,r20
    2b38:	8809883a 	mov	r4,r17
    2b3c:	d9800315 	stw	r6,12(sp)
    2b40:	00026d80 	call	26d8 <__udivsi3>
    2b44:	a00b883a 	mov	r5,r20
    2b48:	8809883a 	mov	r4,r17
    2b4c:	d8800215 	stw	r2,8(sp)
    2b50:	000273c0 	call	273c <__umodsi3>
    2b54:	d9c00217 	ldw	r7,8(sp)
    2b58:	1004943a 	slli	r2,r2,16
    2b5c:	94bfffcc 	andi	r18,r18,65535
    2b60:	b9d1383a 	mul	r8,r23,r7
    2b64:	90a4b03a 	or	r18,r18,r2
    2b68:	d9800317 	ldw	r6,12(sp)
    2b6c:	9200062e 	bgeu	r18,r8,2b88 <__divdf3+0x3f4>
    2b70:	9725883a 	add	r18,r18,fp
    2b74:	38bfffc4 	addi	r2,r7,-1
    2b78:	9700d636 	bltu	r18,fp,2ed4 <__divdf3+0x740>
    2b7c:	9200d52e 	bgeu	r18,r8,2ed4 <__divdf3+0x740>
    2b80:	39ffff84 	addi	r7,r7,-2
    2b84:	9725883a 	add	r18,r18,fp
    2b88:	3004943a 	slli	r2,r6,16
    2b8c:	b012d43a 	srli	r9,r22,16
    2b90:	b1bfffcc 	andi	r6,r22,65535
    2b94:	11e2b03a 	or	r17,r2,r7
    2b98:	8806d43a 	srli	r3,r17,16
    2b9c:	893fffcc 	andi	r4,r17,65535
    2ba0:	218b383a 	mul	r5,r4,r6
    2ba4:	30c5383a 	mul	r2,r6,r3
    2ba8:	2249383a 	mul	r4,r4,r9
    2bac:	280ed43a 	srli	r7,r5,16
    2bb0:	9225c83a 	sub	r18,r18,r8
    2bb4:	2089883a 	add	r4,r4,r2
    2bb8:	3909883a 	add	r4,r7,r4
    2bbc:	1a47383a 	mul	r3,r3,r9
    2bc0:	2080022e 	bgeu	r4,r2,2bcc <__divdf3+0x438>
    2bc4:	00800074 	movhi	r2,1
    2bc8:	1887883a 	add	r3,r3,r2
    2bcc:	2004d43a 	srli	r2,r4,16
    2bd0:	2008943a 	slli	r4,r4,16
    2bd4:	297fffcc 	andi	r5,r5,65535
    2bd8:	10c7883a 	add	r3,r2,r3
    2bdc:	2149883a 	add	r4,r4,r5
    2be0:	90c0a536 	bltu	r18,r3,2e78 <__divdf3+0x6e4>
    2be4:	90c0bf26 	beq	r18,r3,2ee4 <__divdf3+0x750>
    2be8:	90c7c83a 	sub	r3,r18,r3
    2bec:	810fc83a 	sub	r7,r16,r4
    2bf0:	81e5803a 	cmpltu	r18,r16,r7
    2bf4:	1ca5c83a 	sub	r18,r3,r18
    2bf8:	e480c126 	beq	fp,r18,2f00 <__divdf3+0x76c>
    2bfc:	a00b883a 	mov	r5,r20
    2c00:	9009883a 	mov	r4,r18
    2c04:	d9800315 	stw	r6,12(sp)
    2c08:	d9c00215 	stw	r7,8(sp)
    2c0c:	da400115 	stw	r9,4(sp)
    2c10:	00026d80 	call	26d8 <__udivsi3>
    2c14:	a00b883a 	mov	r5,r20
    2c18:	9009883a 	mov	r4,r18
    2c1c:	d8800015 	stw	r2,0(sp)
    2c20:	000273c0 	call	273c <__umodsi3>
    2c24:	d9c00217 	ldw	r7,8(sp)
    2c28:	da000017 	ldw	r8,0(sp)
    2c2c:	1006943a 	slli	r3,r2,16
    2c30:	3804d43a 	srli	r2,r7,16
    2c34:	ba21383a 	mul	r16,r23,r8
    2c38:	d9800317 	ldw	r6,12(sp)
    2c3c:	10c4b03a 	or	r2,r2,r3
    2c40:	da400117 	ldw	r9,4(sp)
    2c44:	1400062e 	bgeu	r2,r16,2c60 <__divdf3+0x4cc>
    2c48:	1705883a 	add	r2,r2,fp
    2c4c:	40ffffc4 	addi	r3,r8,-1
    2c50:	1700ad36 	bltu	r2,fp,2f08 <__divdf3+0x774>
    2c54:	1400ac2e 	bgeu	r2,r16,2f08 <__divdf3+0x774>
    2c58:	423fff84 	addi	r8,r8,-2
    2c5c:	1705883a 	add	r2,r2,fp
    2c60:	1421c83a 	sub	r16,r2,r16
    2c64:	a00b883a 	mov	r5,r20
    2c68:	8009883a 	mov	r4,r16
    2c6c:	d9800315 	stw	r6,12(sp)
    2c70:	d9c00215 	stw	r7,8(sp)
    2c74:	da000015 	stw	r8,0(sp)
    2c78:	da400115 	stw	r9,4(sp)
    2c7c:	00026d80 	call	26d8 <__udivsi3>
    2c80:	8009883a 	mov	r4,r16
    2c84:	a00b883a 	mov	r5,r20
    2c88:	1025883a 	mov	r18,r2
    2c8c:	000273c0 	call	273c <__umodsi3>
    2c90:	d9c00217 	ldw	r7,8(sp)
    2c94:	1004943a 	slli	r2,r2,16
    2c98:	bcaf383a 	mul	r23,r23,r18
    2c9c:	393fffcc 	andi	r4,r7,65535
    2ca0:	2088b03a 	or	r4,r4,r2
    2ca4:	d9800317 	ldw	r6,12(sp)
    2ca8:	da000017 	ldw	r8,0(sp)
    2cac:	da400117 	ldw	r9,4(sp)
    2cb0:	25c0062e 	bgeu	r4,r23,2ccc <__divdf3+0x538>
    2cb4:	2709883a 	add	r4,r4,fp
    2cb8:	90bfffc4 	addi	r2,r18,-1
    2cbc:	27009436 	bltu	r4,fp,2f10 <__divdf3+0x77c>
    2cc0:	25c0932e 	bgeu	r4,r23,2f10 <__divdf3+0x77c>
    2cc4:	94bfff84 	addi	r18,r18,-2
    2cc8:	2709883a 	add	r4,r4,fp
    2ccc:	4004943a 	slli	r2,r8,16
    2cd0:	25efc83a 	sub	r23,r4,r23
    2cd4:	1490b03a 	or	r8,r2,r18
    2cd8:	4008d43a 	srli	r4,r8,16
    2cdc:	40ffffcc 	andi	r3,r8,65535
    2ce0:	30c5383a 	mul	r2,r6,r3
    2ce4:	1a47383a 	mul	r3,r3,r9
    2ce8:	310d383a 	mul	r6,r6,r4
    2cec:	100ad43a 	srli	r5,r2,16
    2cf0:	4913383a 	mul	r9,r9,r4
    2cf4:	1987883a 	add	r3,r3,r6
    2cf8:	28c7883a 	add	r3,r5,r3
    2cfc:	1980022e 	bgeu	r3,r6,2d08 <__divdf3+0x574>
    2d00:	01000074 	movhi	r4,1
    2d04:	4913883a 	add	r9,r9,r4
    2d08:	1808d43a 	srli	r4,r3,16
    2d0c:	1806943a 	slli	r3,r3,16
    2d10:	10bfffcc 	andi	r2,r2,65535
    2d14:	2253883a 	add	r9,r4,r9
    2d18:	1887883a 	add	r3,r3,r2
    2d1c:	ba403836 	bltu	r23,r9,2e00 <__divdf3+0x66c>
    2d20:	ba403626 	beq	r23,r9,2dfc <__divdf3+0x668>
    2d24:	42000054 	ori	r8,r8,1
    2d28:	a880ffc4 	addi	r2,r21,1023
    2d2c:	00bf570e 	bge	zero,r2,2a8c <__alt_data_end+0xff002a8c>
    2d30:	40c001cc 	andi	r3,r8,7
    2d34:	18000726 	beq	r3,zero,2d54 <__divdf3+0x5c0>
    2d38:	40c003cc 	andi	r3,r8,15
    2d3c:	01000104 	movi	r4,4
    2d40:	19000426 	beq	r3,r4,2d54 <__divdf3+0x5c0>
    2d44:	4107883a 	add	r3,r8,r4
    2d48:	1a11803a 	cmpltu	r8,r3,r8
    2d4c:	8a23883a 	add	r17,r17,r8
    2d50:	1811883a 	mov	r8,r3
    2d54:	88c0402c 	andhi	r3,r17,256
    2d58:	18000426 	beq	r3,zero,2d6c <__divdf3+0x5d8>
    2d5c:	00ffc034 	movhi	r3,65280
    2d60:	18ffffc4 	addi	r3,r3,-1
    2d64:	a8810004 	addi	r2,r21,1024
    2d68:	88e2703a 	and	r17,r17,r3
    2d6c:	00c1ff84 	movi	r3,2046
    2d70:	18bee316 	blt	r3,r2,2900 <__alt_data_end+0xff002900>
    2d74:	8824977a 	slli	r18,r17,29
    2d78:	4010d0fa 	srli	r8,r8,3
    2d7c:	8822927a 	slli	r17,r17,9
    2d80:	1081ffcc 	andi	r2,r2,2047
    2d84:	9224b03a 	or	r18,r18,r8
    2d88:	880ad33a 	srli	r5,r17,12
    2d8c:	98c0004c 	andi	r3,r19,1
    2d90:	003edf06 	br	2910 <__alt_data_end+0xff002910>
    2d94:	8080022c 	andhi	r2,r16,8
    2d98:	10001226 	beq	r2,zero,2de4 <__divdf3+0x650>
    2d9c:	8880022c 	andhi	r2,r17,8
    2da0:	1000101e 	bne	r2,zero,2de4 <__divdf3+0x650>
    2da4:	00800434 	movhi	r2,16
    2da8:	89400234 	orhi	r5,r17,8
    2dac:	10bfffc4 	addi	r2,r2,-1
    2db0:	b007883a 	mov	r3,r22
    2db4:	288a703a 	and	r5,r5,r2
    2db8:	4025883a 	mov	r18,r8
    2dbc:	003f3106 	br	2a84 <__alt_data_end+0xff002a84>
    2dc0:	008000c4 	movi	r2,3
    2dc4:	3880a626 	beq	r7,r2,3060 <__divdf3+0x8cc>
    2dc8:	00800044 	movi	r2,1
    2dcc:	3880521e 	bne	r7,r2,2f18 <__divdf3+0x784>
    2dd0:	b807883a 	mov	r3,r23
    2dd4:	0005883a 	mov	r2,zero
    2dd8:	000b883a 	mov	r5,zero
    2ddc:	0025883a 	mov	r18,zero
    2de0:	003ecb06 	br	2910 <__alt_data_end+0xff002910>
    2de4:	00800434 	movhi	r2,16
    2de8:	81400234 	orhi	r5,r16,8
    2dec:	10bfffc4 	addi	r2,r2,-1
    2df0:	a007883a 	mov	r3,r20
    2df4:	288a703a 	and	r5,r5,r2
    2df8:	003f2206 	br	2a84 <__alt_data_end+0xff002a84>
    2dfc:	183fca26 	beq	r3,zero,2d28 <__alt_data_end+0xff002d28>
    2e00:	e5ef883a 	add	r23,fp,r23
    2e04:	40bfffc4 	addi	r2,r8,-1
    2e08:	bf00392e 	bgeu	r23,fp,2ef0 <__divdf3+0x75c>
    2e0c:	1011883a 	mov	r8,r2
    2e10:	ba7fc41e 	bne	r23,r9,2d24 <__alt_data_end+0xff002d24>
    2e14:	b0ffc31e 	bne	r22,r3,2d24 <__alt_data_end+0xff002d24>
    2e18:	003fc306 	br	2d28 <__alt_data_end+0xff002d28>
    2e1c:	143ff604 	addi	r16,r2,-40
    2e20:	9c20983a 	sll	r16,r19,r16
    2e24:	0025883a 	mov	r18,zero
    2e28:	003ee206 	br	29b4 <__alt_data_end+0xff0029b4>
    2e2c:	d9800315 	stw	r6,12(sp)
    2e30:	d9c00215 	stw	r7,8(sp)
    2e34:	00031240 	call	3124 <__clzsi2>
    2e38:	10800804 	addi	r2,r2,32
    2e3c:	d9c00217 	ldw	r7,8(sp)
    2e40:	d9800317 	ldw	r6,12(sp)
    2e44:	003ed106 	br	298c <__alt_data_end+0xff00298c>
    2e48:	147ff604 	addi	r17,r2,-40
    2e4c:	3462983a 	sll	r17,r6,r17
    2e50:	0011883a 	mov	r8,zero
    2e54:	003ef506 	br	2a2c <__alt_data_end+0xff002a2c>
    2e58:	3009883a 	mov	r4,r6
    2e5c:	d9800315 	stw	r6,12(sp)
    2e60:	da400115 	stw	r9,4(sp)
    2e64:	00031240 	call	3124 <__clzsi2>
    2e68:	10800804 	addi	r2,r2,32
    2e6c:	da400117 	ldw	r9,4(sp)
    2e70:	d9800317 	ldw	r6,12(sp)
    2e74:	003ee306 	br	2a04 <__alt_data_end+0xff002a04>
    2e78:	85a1883a 	add	r16,r16,r22
    2e7c:	8585803a 	cmpltu	r2,r16,r22
    2e80:	1705883a 	add	r2,r2,fp
    2e84:	14a5883a 	add	r18,r2,r18
    2e88:	88bfffc4 	addi	r2,r17,-1
    2e8c:	e4800c2e 	bgeu	fp,r18,2ec0 <__divdf3+0x72c>
    2e90:	90c03e36 	bltu	r18,r3,2f8c <__divdf3+0x7f8>
    2e94:	1c806926 	beq	r3,r18,303c <__divdf3+0x8a8>
    2e98:	90c7c83a 	sub	r3,r18,r3
    2e9c:	1023883a 	mov	r17,r2
    2ea0:	003f5206 	br	2bec <__alt_data_end+0xff002bec>
    2ea4:	923f0436 	bltu	r18,r8,2ab8 <__alt_data_end+0xff002ab8>
    2ea8:	800897fa 	slli	r4,r16,31
    2eac:	9004d07a 	srli	r2,r18,1
    2eb0:	8006d07a 	srli	r3,r16,1
    2eb4:	902097fa 	slli	r16,r18,31
    2eb8:	20a4b03a 	or	r18,r4,r2
    2ebc:	003f0106 	br	2ac4 <__alt_data_end+0xff002ac4>
    2ec0:	e4bff51e 	bne	fp,r18,2e98 <__alt_data_end+0xff002e98>
    2ec4:	85bff22e 	bgeu	r16,r22,2e90 <__alt_data_end+0xff002e90>
    2ec8:	e0c7c83a 	sub	r3,fp,r3
    2ecc:	1023883a 	mov	r17,r2
    2ed0:	003f4606 	br	2bec <__alt_data_end+0xff002bec>
    2ed4:	100f883a 	mov	r7,r2
    2ed8:	003f2b06 	br	2b88 <__alt_data_end+0xff002b88>
    2edc:	180d883a 	mov	r6,r3
    2ee0:	003f1306 	br	2b30 <__alt_data_end+0xff002b30>
    2ee4:	813fe436 	bltu	r16,r4,2e78 <__alt_data_end+0xff002e78>
    2ee8:	0007883a 	mov	r3,zero
    2eec:	003f3f06 	br	2bec <__alt_data_end+0xff002bec>
    2ef0:	ba402c36 	bltu	r23,r9,2fa4 <__divdf3+0x810>
    2ef4:	4dc05426 	beq	r9,r23,3048 <__divdf3+0x8b4>
    2ef8:	1011883a 	mov	r8,r2
    2efc:	003f8906 	br	2d24 <__alt_data_end+0xff002d24>
    2f00:	023fffc4 	movi	r8,-1
    2f04:	003f8806 	br	2d28 <__alt_data_end+0xff002d28>
    2f08:	1811883a 	mov	r8,r3
    2f0c:	003f5406 	br	2c60 <__alt_data_end+0xff002c60>
    2f10:	1025883a 	mov	r18,r2
    2f14:	003f6d06 	br	2ccc <__alt_data_end+0xff002ccc>
    2f18:	b827883a 	mov	r19,r23
    2f1c:	003f8206 	br	2d28 <__alt_data_end+0xff002d28>
    2f20:	010007c4 	movi	r4,31
    2f24:	20c02616 	blt	r4,r3,2fc0 <__divdf3+0x82c>
    2f28:	00800804 	movi	r2,32
    2f2c:	10c5c83a 	sub	r2,r2,r3
    2f30:	888a983a 	sll	r5,r17,r2
    2f34:	40c8d83a 	srl	r4,r8,r3
    2f38:	4084983a 	sll	r2,r8,r2
    2f3c:	88e2d83a 	srl	r17,r17,r3
    2f40:	2906b03a 	or	r3,r5,r4
    2f44:	1004c03a 	cmpne	r2,r2,zero
    2f48:	1886b03a 	or	r3,r3,r2
    2f4c:	188001cc 	andi	r2,r3,7
    2f50:	10000726 	beq	r2,zero,2f70 <__divdf3+0x7dc>
    2f54:	188003cc 	andi	r2,r3,15
    2f58:	01000104 	movi	r4,4
    2f5c:	11000426 	beq	r2,r4,2f70 <__divdf3+0x7dc>
    2f60:	1805883a 	mov	r2,r3
    2f64:	10c00104 	addi	r3,r2,4
    2f68:	1885803a 	cmpltu	r2,r3,r2
    2f6c:	88a3883a 	add	r17,r17,r2
    2f70:	8880202c 	andhi	r2,r17,128
    2f74:	10002726 	beq	r2,zero,3014 <__divdf3+0x880>
    2f78:	98c0004c 	andi	r3,r19,1
    2f7c:	00800044 	movi	r2,1
    2f80:	000b883a 	mov	r5,zero
    2f84:	0025883a 	mov	r18,zero
    2f88:	003e6106 	br	2910 <__alt_data_end+0xff002910>
    2f8c:	85a1883a 	add	r16,r16,r22
    2f90:	8585803a 	cmpltu	r2,r16,r22
    2f94:	1705883a 	add	r2,r2,fp
    2f98:	14a5883a 	add	r18,r2,r18
    2f9c:	8c7fff84 	addi	r17,r17,-2
    2fa0:	003f1106 	br	2be8 <__alt_data_end+0xff002be8>
    2fa4:	b589883a 	add	r4,r22,r22
    2fa8:	25ad803a 	cmpltu	r22,r4,r22
    2fac:	b739883a 	add	fp,r22,fp
    2fb0:	40bfff84 	addi	r2,r8,-2
    2fb4:	bf2f883a 	add	r23,r23,fp
    2fb8:	202d883a 	mov	r22,r4
    2fbc:	003f9306 	br	2e0c <__alt_data_end+0xff002e0c>
    2fc0:	013ff844 	movi	r4,-31
    2fc4:	2085c83a 	sub	r2,r4,r2
    2fc8:	8888d83a 	srl	r4,r17,r2
    2fcc:	00800804 	movi	r2,32
    2fd0:	18802126 	beq	r3,r2,3058 <__divdf3+0x8c4>
    2fd4:	00801004 	movi	r2,64
    2fd8:	10c5c83a 	sub	r2,r2,r3
    2fdc:	8884983a 	sll	r2,r17,r2
    2fe0:	1204b03a 	or	r2,r2,r8
    2fe4:	1004c03a 	cmpne	r2,r2,zero
    2fe8:	2084b03a 	or	r2,r4,r2
    2fec:	144001cc 	andi	r17,r2,7
    2ff0:	88000d1e 	bne	r17,zero,3028 <__divdf3+0x894>
    2ff4:	000b883a 	mov	r5,zero
    2ff8:	1024d0fa 	srli	r18,r2,3
    2ffc:	98c0004c 	andi	r3,r19,1
    3000:	0005883a 	mov	r2,zero
    3004:	9464b03a 	or	r18,r18,r17
    3008:	003e4106 	br	2910 <__alt_data_end+0xff002910>
    300c:	1007883a 	mov	r3,r2
    3010:	0023883a 	mov	r17,zero
    3014:	880a927a 	slli	r5,r17,9
    3018:	1805883a 	mov	r2,r3
    301c:	8822977a 	slli	r17,r17,29
    3020:	280ad33a 	srli	r5,r5,12
    3024:	003ff406 	br	2ff8 <__alt_data_end+0xff002ff8>
    3028:	10c003cc 	andi	r3,r2,15
    302c:	01000104 	movi	r4,4
    3030:	193ff626 	beq	r3,r4,300c <__alt_data_end+0xff00300c>
    3034:	0023883a 	mov	r17,zero
    3038:	003fca06 	br	2f64 <__alt_data_end+0xff002f64>
    303c:	813fd336 	bltu	r16,r4,2f8c <__alt_data_end+0xff002f8c>
    3040:	1023883a 	mov	r17,r2
    3044:	003fa806 	br	2ee8 <__alt_data_end+0xff002ee8>
    3048:	b0ffd636 	bltu	r22,r3,2fa4 <__alt_data_end+0xff002fa4>
    304c:	1011883a 	mov	r8,r2
    3050:	b0ff341e 	bne	r22,r3,2d24 <__alt_data_end+0xff002d24>
    3054:	003f3406 	br	2d28 <__alt_data_end+0xff002d28>
    3058:	0005883a 	mov	r2,zero
    305c:	003fe006 	br	2fe0 <__alt_data_end+0xff002fe0>
    3060:	00800434 	movhi	r2,16
    3064:	89400234 	orhi	r5,r17,8
    3068:	10bfffc4 	addi	r2,r2,-1
    306c:	b807883a 	mov	r3,r23
    3070:	288a703a 	and	r5,r5,r2
    3074:	4025883a 	mov	r18,r8
    3078:	003e8206 	br	2a84 <__alt_data_end+0xff002a84>

0000307c <__floatunsidf>:
    307c:	defffe04 	addi	sp,sp,-8
    3080:	dc000015 	stw	r16,0(sp)
    3084:	dfc00115 	stw	ra,4(sp)
    3088:	2021883a 	mov	r16,r4
    308c:	20002226 	beq	r4,zero,3118 <__floatunsidf+0x9c>
    3090:	00031240 	call	3124 <__clzsi2>
    3094:	01010784 	movi	r4,1054
    3098:	2089c83a 	sub	r4,r4,r2
    309c:	01810cc4 	movi	r6,1075
    30a0:	310dc83a 	sub	r6,r6,r4
    30a4:	00c007c4 	movi	r3,31
    30a8:	1980120e 	bge	r3,r6,30f4 <__floatunsidf+0x78>
    30ac:	00c104c4 	movi	r3,1043
    30b0:	1907c83a 	sub	r3,r3,r4
    30b4:	80ca983a 	sll	r5,r16,r3
    30b8:	00800434 	movhi	r2,16
    30bc:	10bfffc4 	addi	r2,r2,-1
    30c0:	2101ffcc 	andi	r4,r4,2047
    30c4:	0021883a 	mov	r16,zero
    30c8:	288a703a 	and	r5,r5,r2
    30cc:	2008953a 	slli	r4,r4,20
    30d0:	00c00434 	movhi	r3,16
    30d4:	18ffffc4 	addi	r3,r3,-1
    30d8:	28c6703a 	and	r3,r5,r3
    30dc:	8005883a 	mov	r2,r16
    30e0:	1906b03a 	or	r3,r3,r4
    30e4:	dfc00117 	ldw	ra,4(sp)
    30e8:	dc000017 	ldw	r16,0(sp)
    30ec:	dec00204 	addi	sp,sp,8
    30f0:	f800283a 	ret
    30f4:	00c002c4 	movi	r3,11
    30f8:	188bc83a 	sub	r5,r3,r2
    30fc:	814ad83a 	srl	r5,r16,r5
    3100:	00c00434 	movhi	r3,16
    3104:	18ffffc4 	addi	r3,r3,-1
    3108:	81a0983a 	sll	r16,r16,r6
    310c:	2101ffcc 	andi	r4,r4,2047
    3110:	28ca703a 	and	r5,r5,r3
    3114:	003fed06 	br	30cc <__alt_data_end+0xff0030cc>
    3118:	0009883a 	mov	r4,zero
    311c:	000b883a 	mov	r5,zero
    3120:	003fea06 	br	30cc <__alt_data_end+0xff0030cc>

00003124 <__clzsi2>:
    3124:	00bfffd4 	movui	r2,65535
    3128:	11000536 	bltu	r2,r4,3140 <__clzsi2+0x1c>
    312c:	00803fc4 	movi	r2,255
    3130:	11000f36 	bltu	r2,r4,3170 <__clzsi2+0x4c>
    3134:	00800804 	movi	r2,32
    3138:	0007883a 	mov	r3,zero
    313c:	00000506 	br	3154 <__clzsi2+0x30>
    3140:	00804034 	movhi	r2,256
    3144:	10bfffc4 	addi	r2,r2,-1
    3148:	11000c2e 	bgeu	r2,r4,317c <__clzsi2+0x58>
    314c:	00800204 	movi	r2,8
    3150:	00c00604 	movi	r3,24
    3154:	20c8d83a 	srl	r4,r4,r3
    3158:	00c00074 	movhi	r3,1
    315c:	18c83d84 	addi	r3,r3,8438
    3160:	1909883a 	add	r4,r3,r4
    3164:	20c00003 	ldbu	r3,0(r4)
    3168:	10c5c83a 	sub	r2,r2,r3
    316c:	f800283a 	ret
    3170:	00800604 	movi	r2,24
    3174:	00c00204 	movi	r3,8
    3178:	003ff606 	br	3154 <__alt_data_end+0xff003154>
    317c:	00800404 	movi	r2,16
    3180:	1007883a 	mov	r3,r2
    3184:	003ff306 	br	3154 <__alt_data_end+0xff003154>

00003188 <malloc>:
    3188:	00800074 	movhi	r2,1
    318c:	108fe904 	addi	r2,r2,16292
    3190:	200b883a 	mov	r5,r4
    3194:	11000017 	ldw	r4,0(r2)
    3198:	00031b01 	jmpi	31b0 <_malloc_r>

0000319c <free>:
    319c:	00800074 	movhi	r2,1
    31a0:	108fe904 	addi	r2,r2,16292
    31a4:	200b883a 	mov	r5,r4
    31a8:	11000017 	ldw	r4,0(r2)
    31ac:	00080001 	jmpi	8000 <_free_r>

000031b0 <_malloc_r>:
    31b0:	defff504 	addi	sp,sp,-44
    31b4:	dc800315 	stw	r18,12(sp)
    31b8:	dfc00a15 	stw	ra,40(sp)
    31bc:	df000915 	stw	fp,36(sp)
    31c0:	ddc00815 	stw	r23,32(sp)
    31c4:	dd800715 	stw	r22,28(sp)
    31c8:	dd400615 	stw	r21,24(sp)
    31cc:	dd000515 	stw	r20,20(sp)
    31d0:	dcc00415 	stw	r19,16(sp)
    31d4:	dc400215 	stw	r17,8(sp)
    31d8:	dc000115 	stw	r16,4(sp)
    31dc:	288002c4 	addi	r2,r5,11
    31e0:	00c00584 	movi	r3,22
    31e4:	2025883a 	mov	r18,r4
    31e8:	18807f2e 	bgeu	r3,r2,33e8 <_malloc_r+0x238>
    31ec:	047ffe04 	movi	r17,-8
    31f0:	1462703a 	and	r17,r2,r17
    31f4:	8800a316 	blt	r17,zero,3484 <_malloc_r+0x2d4>
    31f8:	8940a236 	bltu	r17,r5,3484 <_malloc_r+0x2d4>
    31fc:	000f4a40 	call	f4a4 <__malloc_lock>
    3200:	00807dc4 	movi	r2,503
    3204:	1441e92e 	bgeu	r2,r17,39ac <_malloc_r+0x7fc>
    3208:	8804d27a 	srli	r2,r17,9
    320c:	1000a126 	beq	r2,zero,3494 <_malloc_r+0x2e4>
    3210:	00c00104 	movi	r3,4
    3214:	18811e36 	bltu	r3,r2,3690 <_malloc_r+0x4e0>
    3218:	8804d1ba 	srli	r2,r17,6
    321c:	12000e44 	addi	r8,r2,57
    3220:	11c00e04 	addi	r7,r2,56
    3224:	4209883a 	add	r4,r8,r8
    3228:	04c00074 	movhi	r19,1
    322c:	2109883a 	add	r4,r4,r4
    3230:	9cc93b04 	addi	r19,r19,9452
    3234:	2109883a 	add	r4,r4,r4
    3238:	9909883a 	add	r4,r19,r4
    323c:	24000117 	ldw	r16,4(r4)
    3240:	213ffe04 	addi	r4,r4,-8
    3244:	24009726 	beq	r4,r16,34a4 <_malloc_r+0x2f4>
    3248:	80800117 	ldw	r2,4(r16)
    324c:	01bfff04 	movi	r6,-4
    3250:	014003c4 	movi	r5,15
    3254:	1184703a 	and	r2,r2,r6
    3258:	1447c83a 	sub	r3,r2,r17
    325c:	28c00716 	blt	r5,r3,327c <_malloc_r+0xcc>
    3260:	1800920e 	bge	r3,zero,34ac <_malloc_r+0x2fc>
    3264:	84000317 	ldw	r16,12(r16)
    3268:	24008e26 	beq	r4,r16,34a4 <_malloc_r+0x2f4>
    326c:	80800117 	ldw	r2,4(r16)
    3270:	1184703a 	and	r2,r2,r6
    3274:	1447c83a 	sub	r3,r2,r17
    3278:	28fff90e 	bge	r5,r3,3260 <__alt_data_end+0xff003260>
    327c:	3809883a 	mov	r4,r7
    3280:	01800074 	movhi	r6,1
    3284:	9c000417 	ldw	r16,16(r19)
    3288:	31893b04 	addi	r6,r6,9452
    328c:	32000204 	addi	r8,r6,8
    3290:	82013426 	beq	r16,r8,3764 <_malloc_r+0x5b4>
    3294:	80c00117 	ldw	r3,4(r16)
    3298:	00bfff04 	movi	r2,-4
    329c:	188e703a 	and	r7,r3,r2
    32a0:	3c45c83a 	sub	r2,r7,r17
    32a4:	00c003c4 	movi	r3,15
    32a8:	18811f16 	blt	r3,r2,3728 <_malloc_r+0x578>
    32ac:	32000515 	stw	r8,20(r6)
    32b0:	32000415 	stw	r8,16(r6)
    32b4:	10007f0e 	bge	r2,zero,34b4 <_malloc_r+0x304>
    32b8:	00807fc4 	movi	r2,511
    32bc:	11c0fd36 	bltu	r2,r7,36b4 <_malloc_r+0x504>
    32c0:	3806d0fa 	srli	r3,r7,3
    32c4:	01c00044 	movi	r7,1
    32c8:	30800117 	ldw	r2,4(r6)
    32cc:	19400044 	addi	r5,r3,1
    32d0:	294b883a 	add	r5,r5,r5
    32d4:	1807d0ba 	srai	r3,r3,2
    32d8:	294b883a 	add	r5,r5,r5
    32dc:	294b883a 	add	r5,r5,r5
    32e0:	298b883a 	add	r5,r5,r6
    32e4:	38c6983a 	sll	r3,r7,r3
    32e8:	29c00017 	ldw	r7,0(r5)
    32ec:	2a7ffe04 	addi	r9,r5,-8
    32f0:	1886b03a 	or	r3,r3,r2
    32f4:	82400315 	stw	r9,12(r16)
    32f8:	81c00215 	stw	r7,8(r16)
    32fc:	30c00115 	stw	r3,4(r6)
    3300:	2c000015 	stw	r16,0(r5)
    3304:	3c000315 	stw	r16,12(r7)
    3308:	2005d0ba 	srai	r2,r4,2
    330c:	01400044 	movi	r5,1
    3310:	288a983a 	sll	r5,r5,r2
    3314:	19406f36 	bltu	r3,r5,34d4 <_malloc_r+0x324>
    3318:	28c4703a 	and	r2,r5,r3
    331c:	10000a1e 	bne	r2,zero,3348 <_malloc_r+0x198>
    3320:	00bfff04 	movi	r2,-4
    3324:	294b883a 	add	r5,r5,r5
    3328:	2088703a 	and	r4,r4,r2
    332c:	28c4703a 	and	r2,r5,r3
    3330:	21000104 	addi	r4,r4,4
    3334:	1000041e 	bne	r2,zero,3348 <_malloc_r+0x198>
    3338:	294b883a 	add	r5,r5,r5
    333c:	28c4703a 	and	r2,r5,r3
    3340:	21000104 	addi	r4,r4,4
    3344:	103ffc26 	beq	r2,zero,3338 <__alt_data_end+0xff003338>
    3348:	02bfff04 	movi	r10,-4
    334c:	024003c4 	movi	r9,15
    3350:	21800044 	addi	r6,r4,1
    3354:	318d883a 	add	r6,r6,r6
    3358:	318d883a 	add	r6,r6,r6
    335c:	318d883a 	add	r6,r6,r6
    3360:	998d883a 	add	r6,r19,r6
    3364:	333ffe04 	addi	r12,r6,-8
    3368:	2017883a 	mov	r11,r4
    336c:	31800104 	addi	r6,r6,4
    3370:	34000017 	ldw	r16,0(r6)
    3374:	31fffd04 	addi	r7,r6,-12
    3378:	81c0041e 	bne	r16,r7,338c <_malloc_r+0x1dc>
    337c:	0000fb06 	br	376c <_malloc_r+0x5bc>
    3380:	1801030e 	bge	r3,zero,3790 <_malloc_r+0x5e0>
    3384:	84000317 	ldw	r16,12(r16)
    3388:	81c0f826 	beq	r16,r7,376c <_malloc_r+0x5bc>
    338c:	80800117 	ldw	r2,4(r16)
    3390:	1284703a 	and	r2,r2,r10
    3394:	1447c83a 	sub	r3,r2,r17
    3398:	48fff90e 	bge	r9,r3,3380 <__alt_data_end+0xff003380>
    339c:	80800317 	ldw	r2,12(r16)
    33a0:	81000217 	ldw	r4,8(r16)
    33a4:	89400054 	ori	r5,r17,1
    33a8:	81400115 	stw	r5,4(r16)
    33ac:	20800315 	stw	r2,12(r4)
    33b0:	11000215 	stw	r4,8(r2)
    33b4:	8463883a 	add	r17,r16,r17
    33b8:	9c400515 	stw	r17,20(r19)
    33bc:	9c400415 	stw	r17,16(r19)
    33c0:	18800054 	ori	r2,r3,1
    33c4:	88800115 	stw	r2,4(r17)
    33c8:	8a000315 	stw	r8,12(r17)
    33cc:	8a000215 	stw	r8,8(r17)
    33d0:	88e3883a 	add	r17,r17,r3
    33d4:	88c00015 	stw	r3,0(r17)
    33d8:	9009883a 	mov	r4,r18
    33dc:	000f4c80 	call	f4c8 <__malloc_unlock>
    33e0:	80800204 	addi	r2,r16,8
    33e4:	00001b06 	br	3454 <_malloc_r+0x2a4>
    33e8:	04400404 	movi	r17,16
    33ec:	89402536 	bltu	r17,r5,3484 <_malloc_r+0x2d4>
    33f0:	000f4a40 	call	f4a4 <__malloc_lock>
    33f4:	00800184 	movi	r2,6
    33f8:	01000084 	movi	r4,2
    33fc:	04c00074 	movhi	r19,1
    3400:	1085883a 	add	r2,r2,r2
    3404:	9cc93b04 	addi	r19,r19,9452
    3408:	1085883a 	add	r2,r2,r2
    340c:	9885883a 	add	r2,r19,r2
    3410:	14000117 	ldw	r16,4(r2)
    3414:	10fffe04 	addi	r3,r2,-8
    3418:	80c0d926 	beq	r16,r3,3780 <_malloc_r+0x5d0>
    341c:	80c00117 	ldw	r3,4(r16)
    3420:	81000317 	ldw	r4,12(r16)
    3424:	00bfff04 	movi	r2,-4
    3428:	1884703a 	and	r2,r3,r2
    342c:	81400217 	ldw	r5,8(r16)
    3430:	8085883a 	add	r2,r16,r2
    3434:	10c00117 	ldw	r3,4(r2)
    3438:	29000315 	stw	r4,12(r5)
    343c:	21400215 	stw	r5,8(r4)
    3440:	18c00054 	ori	r3,r3,1
    3444:	10c00115 	stw	r3,4(r2)
    3448:	9009883a 	mov	r4,r18
    344c:	000f4c80 	call	f4c8 <__malloc_unlock>
    3450:	80800204 	addi	r2,r16,8
    3454:	dfc00a17 	ldw	ra,40(sp)
    3458:	df000917 	ldw	fp,36(sp)
    345c:	ddc00817 	ldw	r23,32(sp)
    3460:	dd800717 	ldw	r22,28(sp)
    3464:	dd400617 	ldw	r21,24(sp)
    3468:	dd000517 	ldw	r20,20(sp)
    346c:	dcc00417 	ldw	r19,16(sp)
    3470:	dc800317 	ldw	r18,12(sp)
    3474:	dc400217 	ldw	r17,8(sp)
    3478:	dc000117 	ldw	r16,4(sp)
    347c:	dec00b04 	addi	sp,sp,44
    3480:	f800283a 	ret
    3484:	00800304 	movi	r2,12
    3488:	90800015 	stw	r2,0(r18)
    348c:	0005883a 	mov	r2,zero
    3490:	003ff006 	br	3454 <__alt_data_end+0xff003454>
    3494:	01002004 	movi	r4,128
    3498:	02001004 	movi	r8,64
    349c:	01c00fc4 	movi	r7,63
    34a0:	003f6106 	br	3228 <__alt_data_end+0xff003228>
    34a4:	4009883a 	mov	r4,r8
    34a8:	003f7506 	br	3280 <__alt_data_end+0xff003280>
    34ac:	81000317 	ldw	r4,12(r16)
    34b0:	003fde06 	br	342c <__alt_data_end+0xff00342c>
    34b4:	81c5883a 	add	r2,r16,r7
    34b8:	11400117 	ldw	r5,4(r2)
    34bc:	9009883a 	mov	r4,r18
    34c0:	29400054 	ori	r5,r5,1
    34c4:	11400115 	stw	r5,4(r2)
    34c8:	000f4c80 	call	f4c8 <__malloc_unlock>
    34cc:	80800204 	addi	r2,r16,8
    34d0:	003fe006 	br	3454 <__alt_data_end+0xff003454>
    34d4:	9c000217 	ldw	r16,8(r19)
    34d8:	00bfff04 	movi	r2,-4
    34dc:	85800117 	ldw	r22,4(r16)
    34e0:	b0ac703a 	and	r22,r22,r2
    34e4:	b4400336 	bltu	r22,r17,34f4 <_malloc_r+0x344>
    34e8:	b445c83a 	sub	r2,r22,r17
    34ec:	00c003c4 	movi	r3,15
    34f0:	18805d16 	blt	r3,r2,3668 <_malloc_r+0x4b8>
    34f4:	05c00074 	movhi	r23,1
    34f8:	00800074 	movhi	r2,1
    34fc:	10970e04 	addi	r2,r2,23608
    3500:	bdcfe604 	addi	r23,r23,16280
    3504:	15400017 	ldw	r21,0(r2)
    3508:	b8c00017 	ldw	r3,0(r23)
    350c:	00bfffc4 	movi	r2,-1
    3510:	858d883a 	add	r6,r16,r22
    3514:	8d6b883a 	add	r21,r17,r21
    3518:	1880ea26 	beq	r3,r2,38c4 <_malloc_r+0x714>
    351c:	ad4403c4 	addi	r21,r21,4111
    3520:	00bc0004 	movi	r2,-4096
    3524:	a8aa703a 	and	r21,r21,r2
    3528:	a80b883a 	mov	r5,r21
    352c:	9009883a 	mov	r4,r18
    3530:	d9800015 	stw	r6,0(sp)
    3534:	0003afc0 	call	3afc <_sbrk_r>
    3538:	1029883a 	mov	r20,r2
    353c:	00bfffc4 	movi	r2,-1
    3540:	d9800017 	ldw	r6,0(sp)
    3544:	a080e826 	beq	r20,r2,38e8 <_malloc_r+0x738>
    3548:	a180a636 	bltu	r20,r6,37e4 <_malloc_r+0x634>
    354c:	07000074 	movhi	fp,1
    3550:	e7171c04 	addi	fp,fp,23664
    3554:	e0800017 	ldw	r2,0(fp)
    3558:	a887883a 	add	r3,r21,r2
    355c:	e0c00015 	stw	r3,0(fp)
    3560:	3500e626 	beq	r6,r20,38fc <_malloc_r+0x74c>
    3564:	b9000017 	ldw	r4,0(r23)
    3568:	00bfffc4 	movi	r2,-1
    356c:	2080ee26 	beq	r4,r2,3928 <_malloc_r+0x778>
    3570:	a185c83a 	sub	r2,r20,r6
    3574:	10c5883a 	add	r2,r2,r3
    3578:	e0800015 	stw	r2,0(fp)
    357c:	a0c001cc 	andi	r3,r20,7
    3580:	1800bc26 	beq	r3,zero,3874 <_malloc_r+0x6c4>
    3584:	a0e9c83a 	sub	r20,r20,r3
    3588:	00840204 	movi	r2,4104
    358c:	a5000204 	addi	r20,r20,8
    3590:	10c7c83a 	sub	r3,r2,r3
    3594:	a545883a 	add	r2,r20,r21
    3598:	1083ffcc 	andi	r2,r2,4095
    359c:	18abc83a 	sub	r21,r3,r2
    35a0:	a80b883a 	mov	r5,r21
    35a4:	9009883a 	mov	r4,r18
    35a8:	0003afc0 	call	3afc <_sbrk_r>
    35ac:	00ffffc4 	movi	r3,-1
    35b0:	10c0e126 	beq	r2,r3,3938 <_malloc_r+0x788>
    35b4:	1505c83a 	sub	r2,r2,r20
    35b8:	1545883a 	add	r2,r2,r21
    35bc:	10800054 	ori	r2,r2,1
    35c0:	e0c00017 	ldw	r3,0(fp)
    35c4:	9d000215 	stw	r20,8(r19)
    35c8:	a0800115 	stw	r2,4(r20)
    35cc:	a8c7883a 	add	r3,r21,r3
    35d0:	e0c00015 	stw	r3,0(fp)
    35d4:	84c00e26 	beq	r16,r19,3610 <_malloc_r+0x460>
    35d8:	018003c4 	movi	r6,15
    35dc:	3580a72e 	bgeu	r6,r22,387c <_malloc_r+0x6cc>
    35e0:	81400117 	ldw	r5,4(r16)
    35e4:	013ffe04 	movi	r4,-8
    35e8:	b0bffd04 	addi	r2,r22,-12
    35ec:	1104703a 	and	r2,r2,r4
    35f0:	2900004c 	andi	r4,r5,1
    35f4:	2088b03a 	or	r4,r4,r2
    35f8:	81000115 	stw	r4,4(r16)
    35fc:	01400144 	movi	r5,5
    3600:	8089883a 	add	r4,r16,r2
    3604:	21400115 	stw	r5,4(r4)
    3608:	21400215 	stw	r5,8(r4)
    360c:	3080cd36 	bltu	r6,r2,3944 <_malloc_r+0x794>
    3610:	00800074 	movhi	r2,1
    3614:	10970d04 	addi	r2,r2,23604
    3618:	11000017 	ldw	r4,0(r2)
    361c:	20c0012e 	bgeu	r4,r3,3624 <_malloc_r+0x474>
    3620:	10c00015 	stw	r3,0(r2)
    3624:	00800074 	movhi	r2,1
    3628:	10970c04 	addi	r2,r2,23600
    362c:	11000017 	ldw	r4,0(r2)
    3630:	9c000217 	ldw	r16,8(r19)
    3634:	20c0012e 	bgeu	r4,r3,363c <_malloc_r+0x48c>
    3638:	10c00015 	stw	r3,0(r2)
    363c:	80c00117 	ldw	r3,4(r16)
    3640:	00bfff04 	movi	r2,-4
    3644:	1886703a 	and	r3,r3,r2
    3648:	1c45c83a 	sub	r2,r3,r17
    364c:	1c400236 	bltu	r3,r17,3658 <_malloc_r+0x4a8>
    3650:	00c003c4 	movi	r3,15
    3654:	18800416 	blt	r3,r2,3668 <_malloc_r+0x4b8>
    3658:	9009883a 	mov	r4,r18
    365c:	000f4c80 	call	f4c8 <__malloc_unlock>
    3660:	0005883a 	mov	r2,zero
    3664:	003f7b06 	br	3454 <__alt_data_end+0xff003454>
    3668:	88c00054 	ori	r3,r17,1
    366c:	80c00115 	stw	r3,4(r16)
    3670:	8463883a 	add	r17,r16,r17
    3674:	10800054 	ori	r2,r2,1
    3678:	9c400215 	stw	r17,8(r19)
    367c:	88800115 	stw	r2,4(r17)
    3680:	9009883a 	mov	r4,r18
    3684:	000f4c80 	call	f4c8 <__malloc_unlock>
    3688:	80800204 	addi	r2,r16,8
    368c:	003f7106 	br	3454 <__alt_data_end+0xff003454>
    3690:	00c00504 	movi	r3,20
    3694:	18804a2e 	bgeu	r3,r2,37c0 <_malloc_r+0x610>
    3698:	00c01504 	movi	r3,84
    369c:	18806e36 	bltu	r3,r2,3858 <_malloc_r+0x6a8>
    36a0:	8804d33a 	srli	r2,r17,12
    36a4:	12001bc4 	addi	r8,r2,111
    36a8:	11c01b84 	addi	r7,r2,110
    36ac:	4209883a 	add	r4,r8,r8
    36b0:	003edd06 	br	3228 <__alt_data_end+0xff003228>
    36b4:	3804d27a 	srli	r2,r7,9
    36b8:	00c00104 	movi	r3,4
    36bc:	1880442e 	bgeu	r3,r2,37d0 <_malloc_r+0x620>
    36c0:	00c00504 	movi	r3,20
    36c4:	18808136 	bltu	r3,r2,38cc <_malloc_r+0x71c>
    36c8:	11401704 	addi	r5,r2,92
    36cc:	10c016c4 	addi	r3,r2,91
    36d0:	294b883a 	add	r5,r5,r5
    36d4:	294b883a 	add	r5,r5,r5
    36d8:	294b883a 	add	r5,r5,r5
    36dc:	994b883a 	add	r5,r19,r5
    36e0:	28800017 	ldw	r2,0(r5)
    36e4:	01800074 	movhi	r6,1
    36e8:	297ffe04 	addi	r5,r5,-8
    36ec:	31893b04 	addi	r6,r6,9452
    36f0:	28806526 	beq	r5,r2,3888 <_malloc_r+0x6d8>
    36f4:	01bfff04 	movi	r6,-4
    36f8:	10c00117 	ldw	r3,4(r2)
    36fc:	1986703a 	and	r3,r3,r6
    3700:	38c0022e 	bgeu	r7,r3,370c <_malloc_r+0x55c>
    3704:	10800217 	ldw	r2,8(r2)
    3708:	28bffb1e 	bne	r5,r2,36f8 <__alt_data_end+0xff0036f8>
    370c:	11400317 	ldw	r5,12(r2)
    3710:	98c00117 	ldw	r3,4(r19)
    3714:	81400315 	stw	r5,12(r16)
    3718:	80800215 	stw	r2,8(r16)
    371c:	2c000215 	stw	r16,8(r5)
    3720:	14000315 	stw	r16,12(r2)
    3724:	003ef806 	br	3308 <__alt_data_end+0xff003308>
    3728:	88c00054 	ori	r3,r17,1
    372c:	80c00115 	stw	r3,4(r16)
    3730:	8463883a 	add	r17,r16,r17
    3734:	34400515 	stw	r17,20(r6)
    3738:	34400415 	stw	r17,16(r6)
    373c:	10c00054 	ori	r3,r2,1
    3740:	8a000315 	stw	r8,12(r17)
    3744:	8a000215 	stw	r8,8(r17)
    3748:	88c00115 	stw	r3,4(r17)
    374c:	88a3883a 	add	r17,r17,r2
    3750:	88800015 	stw	r2,0(r17)
    3754:	9009883a 	mov	r4,r18
    3758:	000f4c80 	call	f4c8 <__malloc_unlock>
    375c:	80800204 	addi	r2,r16,8
    3760:	003f3c06 	br	3454 <__alt_data_end+0xff003454>
    3764:	30c00117 	ldw	r3,4(r6)
    3768:	003ee706 	br	3308 <__alt_data_end+0xff003308>
    376c:	5ac00044 	addi	r11,r11,1
    3770:	588000cc 	andi	r2,r11,3
    3774:	31800204 	addi	r6,r6,8
    3778:	103efd1e 	bne	r2,zero,3370 <__alt_data_end+0xff003370>
    377c:	00002406 	br	3810 <_malloc_r+0x660>
    3780:	14000317 	ldw	r16,12(r2)
    3784:	143f251e 	bne	r2,r16,341c <__alt_data_end+0xff00341c>
    3788:	21000084 	addi	r4,r4,2
    378c:	003ebc06 	br	3280 <__alt_data_end+0xff003280>
    3790:	8085883a 	add	r2,r16,r2
    3794:	10c00117 	ldw	r3,4(r2)
    3798:	81000317 	ldw	r4,12(r16)
    379c:	81400217 	ldw	r5,8(r16)
    37a0:	18c00054 	ori	r3,r3,1
    37a4:	10c00115 	stw	r3,4(r2)
    37a8:	29000315 	stw	r4,12(r5)
    37ac:	21400215 	stw	r5,8(r4)
    37b0:	9009883a 	mov	r4,r18
    37b4:	000f4c80 	call	f4c8 <__malloc_unlock>
    37b8:	80800204 	addi	r2,r16,8
    37bc:	003f2506 	br	3454 <__alt_data_end+0xff003454>
    37c0:	12001704 	addi	r8,r2,92
    37c4:	11c016c4 	addi	r7,r2,91
    37c8:	4209883a 	add	r4,r8,r8
    37cc:	003e9606 	br	3228 <__alt_data_end+0xff003228>
    37d0:	3804d1ba 	srli	r2,r7,6
    37d4:	11400e44 	addi	r5,r2,57
    37d8:	10c00e04 	addi	r3,r2,56
    37dc:	294b883a 	add	r5,r5,r5
    37e0:	003fbc06 	br	36d4 <__alt_data_end+0xff0036d4>
    37e4:	84ff5926 	beq	r16,r19,354c <__alt_data_end+0xff00354c>
    37e8:	00800074 	movhi	r2,1
    37ec:	10893b04 	addi	r2,r2,9452
    37f0:	14000217 	ldw	r16,8(r2)
    37f4:	00bfff04 	movi	r2,-4
    37f8:	80c00117 	ldw	r3,4(r16)
    37fc:	1886703a 	and	r3,r3,r2
    3800:	003f9106 	br	3648 <__alt_data_end+0xff003648>
    3804:	60800217 	ldw	r2,8(r12)
    3808:	213fffc4 	addi	r4,r4,-1
    380c:	1300651e 	bne	r2,r12,39a4 <_malloc_r+0x7f4>
    3810:	208000cc 	andi	r2,r4,3
    3814:	633ffe04 	addi	r12,r12,-8
    3818:	103ffa1e 	bne	r2,zero,3804 <__alt_data_end+0xff003804>
    381c:	98800117 	ldw	r2,4(r19)
    3820:	0146303a 	nor	r3,zero,r5
    3824:	1884703a 	and	r2,r3,r2
    3828:	98800115 	stw	r2,4(r19)
    382c:	294b883a 	add	r5,r5,r5
    3830:	117f2836 	bltu	r2,r5,34d4 <__alt_data_end+0xff0034d4>
    3834:	283f2726 	beq	r5,zero,34d4 <__alt_data_end+0xff0034d4>
    3838:	2886703a 	and	r3,r5,r2
    383c:	5809883a 	mov	r4,r11
    3840:	183ec31e 	bne	r3,zero,3350 <__alt_data_end+0xff003350>
    3844:	294b883a 	add	r5,r5,r5
    3848:	2886703a 	and	r3,r5,r2
    384c:	21000104 	addi	r4,r4,4
    3850:	183ffc26 	beq	r3,zero,3844 <__alt_data_end+0xff003844>
    3854:	003ebe06 	br	3350 <__alt_data_end+0xff003350>
    3858:	00c05504 	movi	r3,340
    385c:	18801236 	bltu	r3,r2,38a8 <_malloc_r+0x6f8>
    3860:	8804d3fa 	srli	r2,r17,15
    3864:	12001e04 	addi	r8,r2,120
    3868:	11c01dc4 	addi	r7,r2,119
    386c:	4209883a 	add	r4,r8,r8
    3870:	003e6d06 	br	3228 <__alt_data_end+0xff003228>
    3874:	00c40004 	movi	r3,4096
    3878:	003f4606 	br	3594 <__alt_data_end+0xff003594>
    387c:	00800044 	movi	r2,1
    3880:	a0800115 	stw	r2,4(r20)
    3884:	003f7406 	br	3658 <__alt_data_end+0xff003658>
    3888:	1805d0ba 	srai	r2,r3,2
    388c:	01c00044 	movi	r7,1
    3890:	30c00117 	ldw	r3,4(r6)
    3894:	388e983a 	sll	r7,r7,r2
    3898:	2805883a 	mov	r2,r5
    389c:	38c6b03a 	or	r3,r7,r3
    38a0:	30c00115 	stw	r3,4(r6)
    38a4:	003f9b06 	br	3714 <__alt_data_end+0xff003714>
    38a8:	00c15504 	movi	r3,1364
    38ac:	18801a36 	bltu	r3,r2,3918 <_malloc_r+0x768>
    38b0:	8804d4ba 	srli	r2,r17,18
    38b4:	12001f44 	addi	r8,r2,125
    38b8:	11c01f04 	addi	r7,r2,124
    38bc:	4209883a 	add	r4,r8,r8
    38c0:	003e5906 	br	3228 <__alt_data_end+0xff003228>
    38c4:	ad400404 	addi	r21,r21,16
    38c8:	003f1706 	br	3528 <__alt_data_end+0xff003528>
    38cc:	00c01504 	movi	r3,84
    38d0:	18802336 	bltu	r3,r2,3960 <_malloc_r+0x7b0>
    38d4:	3804d33a 	srli	r2,r7,12
    38d8:	11401bc4 	addi	r5,r2,111
    38dc:	10c01b84 	addi	r3,r2,110
    38e0:	294b883a 	add	r5,r5,r5
    38e4:	003f7b06 	br	36d4 <__alt_data_end+0xff0036d4>
    38e8:	9c000217 	ldw	r16,8(r19)
    38ec:	00bfff04 	movi	r2,-4
    38f0:	80c00117 	ldw	r3,4(r16)
    38f4:	1886703a 	and	r3,r3,r2
    38f8:	003f5306 	br	3648 <__alt_data_end+0xff003648>
    38fc:	3083ffcc 	andi	r2,r6,4095
    3900:	103f181e 	bne	r2,zero,3564 <__alt_data_end+0xff003564>
    3904:	99000217 	ldw	r4,8(r19)
    3908:	b545883a 	add	r2,r22,r21
    390c:	10800054 	ori	r2,r2,1
    3910:	20800115 	stw	r2,4(r4)
    3914:	003f3e06 	br	3610 <__alt_data_end+0xff003610>
    3918:	01003f84 	movi	r4,254
    391c:	02001fc4 	movi	r8,127
    3920:	01c01f84 	movi	r7,126
    3924:	003e4006 	br	3228 <__alt_data_end+0xff003228>
    3928:	00800074 	movhi	r2,1
    392c:	108fe604 	addi	r2,r2,16280
    3930:	15000015 	stw	r20,0(r2)
    3934:	003f1106 	br	357c <__alt_data_end+0xff00357c>
    3938:	00800044 	movi	r2,1
    393c:	002b883a 	mov	r21,zero
    3940:	003f1f06 	br	35c0 <__alt_data_end+0xff0035c0>
    3944:	81400204 	addi	r5,r16,8
    3948:	9009883a 	mov	r4,r18
    394c:	00080000 	call	8000 <_free_r>
    3950:	00800074 	movhi	r2,1
    3954:	10971c04 	addi	r2,r2,23664
    3958:	10c00017 	ldw	r3,0(r2)
    395c:	003f2c06 	br	3610 <__alt_data_end+0xff003610>
    3960:	00c05504 	movi	r3,340
    3964:	18800536 	bltu	r3,r2,397c <_malloc_r+0x7cc>
    3968:	3804d3fa 	srli	r2,r7,15
    396c:	11401e04 	addi	r5,r2,120
    3970:	10c01dc4 	addi	r3,r2,119
    3974:	294b883a 	add	r5,r5,r5
    3978:	003f5606 	br	36d4 <__alt_data_end+0xff0036d4>
    397c:	00c15504 	movi	r3,1364
    3980:	18800536 	bltu	r3,r2,3998 <_malloc_r+0x7e8>
    3984:	3804d4ba 	srli	r2,r7,18
    3988:	11401f44 	addi	r5,r2,125
    398c:	10c01f04 	addi	r3,r2,124
    3990:	294b883a 	add	r5,r5,r5
    3994:	003f4f06 	br	36d4 <__alt_data_end+0xff0036d4>
    3998:	01403f84 	movi	r5,254
    399c:	00c01f84 	movi	r3,126
    39a0:	003f4c06 	br	36d4 <__alt_data_end+0xff0036d4>
    39a4:	98800117 	ldw	r2,4(r19)
    39a8:	003fa006 	br	382c <__alt_data_end+0xff00382c>
    39ac:	8808d0fa 	srli	r4,r17,3
    39b0:	20800044 	addi	r2,r4,1
    39b4:	1085883a 	add	r2,r2,r2
    39b8:	003e9006 	br	33fc <__alt_data_end+0xff0033fc>

000039bc <_printf_r>:
    39bc:	defffd04 	addi	sp,sp,-12
    39c0:	2805883a 	mov	r2,r5
    39c4:	dfc00015 	stw	ra,0(sp)
    39c8:	d9800115 	stw	r6,4(sp)
    39cc:	d9c00215 	stw	r7,8(sp)
    39d0:	21400217 	ldw	r5,8(r4)
    39d4:	d9c00104 	addi	r7,sp,4
    39d8:	100d883a 	mov	r6,r2
    39dc:	0003be80 	call	3be8 <___vfprintf_internal_r>
    39e0:	dfc00017 	ldw	ra,0(sp)
    39e4:	dec00304 	addi	sp,sp,12
    39e8:	f800283a 	ret

000039ec <printf>:
    39ec:	defffc04 	addi	sp,sp,-16
    39f0:	dfc00015 	stw	ra,0(sp)
    39f4:	d9400115 	stw	r5,4(sp)
    39f8:	d9800215 	stw	r6,8(sp)
    39fc:	d9c00315 	stw	r7,12(sp)
    3a00:	00800074 	movhi	r2,1
    3a04:	108fe904 	addi	r2,r2,16292
    3a08:	10800017 	ldw	r2,0(r2)
    3a0c:	200b883a 	mov	r5,r4
    3a10:	d9800104 	addi	r6,sp,4
    3a14:	11000217 	ldw	r4,8(r2)
    3a18:	0005de00 	call	5de0 <__vfprintf_internal>
    3a1c:	dfc00017 	ldw	ra,0(sp)
    3a20:	dec00404 	addi	sp,sp,16
    3a24:	f800283a 	ret

00003a28 <_puts_r>:
    3a28:	defff604 	addi	sp,sp,-40
    3a2c:	dc000715 	stw	r16,28(sp)
    3a30:	2021883a 	mov	r16,r4
    3a34:	2809883a 	mov	r4,r5
    3a38:	dc400815 	stw	r17,32(sp)
    3a3c:	dfc00915 	stw	ra,36(sp)
    3a40:	2823883a 	mov	r17,r5
    3a44:	0003b500 	call	3b50 <strlen>
    3a48:	10c00044 	addi	r3,r2,1
    3a4c:	d8800115 	stw	r2,4(sp)
    3a50:	00800074 	movhi	r2,1
    3a54:	10882c04 	addi	r2,r2,8368
    3a58:	d8800215 	stw	r2,8(sp)
    3a5c:	00800044 	movi	r2,1
    3a60:	d8800315 	stw	r2,12(sp)
    3a64:	00800084 	movi	r2,2
    3a68:	dc400015 	stw	r17,0(sp)
    3a6c:	d8c00615 	stw	r3,24(sp)
    3a70:	dec00415 	stw	sp,16(sp)
    3a74:	d8800515 	stw	r2,20(sp)
    3a78:	80000226 	beq	r16,zero,3a84 <_puts_r+0x5c>
    3a7c:	80800e17 	ldw	r2,56(r16)
    3a80:	10001426 	beq	r2,zero,3ad4 <_puts_r+0xac>
    3a84:	81400217 	ldw	r5,8(r16)
    3a88:	2880030b 	ldhu	r2,12(r5)
    3a8c:	10c8000c 	andi	r3,r2,8192
    3a90:	1800061e 	bne	r3,zero,3aac <_puts_r+0x84>
    3a94:	29001917 	ldw	r4,100(r5)
    3a98:	00f7ffc4 	movi	r3,-8193
    3a9c:	10880014 	ori	r2,r2,8192
    3aa0:	20c6703a 	and	r3,r4,r3
    3aa4:	2880030d 	sth	r2,12(r5)
    3aa8:	28c01915 	stw	r3,100(r5)
    3aac:	d9800404 	addi	r6,sp,16
    3ab0:	8009883a 	mov	r4,r16
    3ab4:	00083100 	call	8310 <__sfvwrite_r>
    3ab8:	1000091e 	bne	r2,zero,3ae0 <_puts_r+0xb8>
    3abc:	00800284 	movi	r2,10
    3ac0:	dfc00917 	ldw	ra,36(sp)
    3ac4:	dc400817 	ldw	r17,32(sp)
    3ac8:	dc000717 	ldw	r16,28(sp)
    3acc:	dec00a04 	addi	sp,sp,40
    3ad0:	f800283a 	ret
    3ad4:	8009883a 	mov	r4,r16
    3ad8:	0007e8c0 	call	7e8c <__sinit>
    3adc:	003fe906 	br	3a84 <__alt_data_end+0xff003a84>
    3ae0:	00bfffc4 	movi	r2,-1
    3ae4:	003ff606 	br	3ac0 <__alt_data_end+0xff003ac0>

00003ae8 <puts>:
    3ae8:	00800074 	movhi	r2,1
    3aec:	108fe904 	addi	r2,r2,16292
    3af0:	200b883a 	mov	r5,r4
    3af4:	11000017 	ldw	r4,0(r2)
    3af8:	0003a281 	jmpi	3a28 <_puts_r>

00003afc <_sbrk_r>:
    3afc:	defffd04 	addi	sp,sp,-12
    3b00:	dc000015 	stw	r16,0(sp)
    3b04:	04000074 	movhi	r16,1
    3b08:	dc400115 	stw	r17,4(sp)
    3b0c:	84170f04 	addi	r16,r16,23612
    3b10:	2023883a 	mov	r17,r4
    3b14:	2809883a 	mov	r4,r5
    3b18:	dfc00215 	stw	ra,8(sp)
    3b1c:	80000015 	stw	zero,0(r16)
    3b20:	000f6880 	call	f688 <sbrk>
    3b24:	00ffffc4 	movi	r3,-1
    3b28:	10c00526 	beq	r2,r3,3b40 <_sbrk_r+0x44>
    3b2c:	dfc00217 	ldw	ra,8(sp)
    3b30:	dc400117 	ldw	r17,4(sp)
    3b34:	dc000017 	ldw	r16,0(sp)
    3b38:	dec00304 	addi	sp,sp,12
    3b3c:	f800283a 	ret
    3b40:	80c00017 	ldw	r3,0(r16)
    3b44:	183ff926 	beq	r3,zero,3b2c <__alt_data_end+0xff003b2c>
    3b48:	88c00015 	stw	r3,0(r17)
    3b4c:	003ff706 	br	3b2c <__alt_data_end+0xff003b2c>

00003b50 <strlen>:
    3b50:	208000cc 	andi	r2,r4,3
    3b54:	10002026 	beq	r2,zero,3bd8 <strlen+0x88>
    3b58:	20800007 	ldb	r2,0(r4)
    3b5c:	10002026 	beq	r2,zero,3be0 <strlen+0x90>
    3b60:	2005883a 	mov	r2,r4
    3b64:	00000206 	br	3b70 <strlen+0x20>
    3b68:	10c00007 	ldb	r3,0(r2)
    3b6c:	18001826 	beq	r3,zero,3bd0 <strlen+0x80>
    3b70:	10800044 	addi	r2,r2,1
    3b74:	10c000cc 	andi	r3,r2,3
    3b78:	183ffb1e 	bne	r3,zero,3b68 <__alt_data_end+0xff003b68>
    3b7c:	10c00017 	ldw	r3,0(r2)
    3b80:	01ffbff4 	movhi	r7,65279
    3b84:	39ffbfc4 	addi	r7,r7,-257
    3b88:	00ca303a 	nor	r5,zero,r3
    3b8c:	01a02074 	movhi	r6,32897
    3b90:	19c7883a 	add	r3,r3,r7
    3b94:	31a02004 	addi	r6,r6,-32640
    3b98:	1946703a 	and	r3,r3,r5
    3b9c:	1986703a 	and	r3,r3,r6
    3ba0:	1800091e 	bne	r3,zero,3bc8 <strlen+0x78>
    3ba4:	10800104 	addi	r2,r2,4
    3ba8:	10c00017 	ldw	r3,0(r2)
    3bac:	19cb883a 	add	r5,r3,r7
    3bb0:	00c6303a 	nor	r3,zero,r3
    3bb4:	28c6703a 	and	r3,r5,r3
    3bb8:	1986703a 	and	r3,r3,r6
    3bbc:	183ff926 	beq	r3,zero,3ba4 <__alt_data_end+0xff003ba4>
    3bc0:	00000106 	br	3bc8 <strlen+0x78>
    3bc4:	10800044 	addi	r2,r2,1
    3bc8:	10c00007 	ldb	r3,0(r2)
    3bcc:	183ffd1e 	bne	r3,zero,3bc4 <__alt_data_end+0xff003bc4>
    3bd0:	1105c83a 	sub	r2,r2,r4
    3bd4:	f800283a 	ret
    3bd8:	2005883a 	mov	r2,r4
    3bdc:	003fe706 	br	3b7c <__alt_data_end+0xff003b7c>
    3be0:	0005883a 	mov	r2,zero
    3be4:	f800283a 	ret

00003be8 <___vfprintf_internal_r>:
    3be8:	deffb804 	addi	sp,sp,-288
    3bec:	dfc04715 	stw	ra,284(sp)
    3bf0:	ddc04515 	stw	r23,276(sp)
    3bf4:	dd404315 	stw	r21,268(sp)
    3bf8:	d9002c15 	stw	r4,176(sp)
    3bfc:	282f883a 	mov	r23,r5
    3c00:	302b883a 	mov	r21,r6
    3c04:	d9c02d15 	stw	r7,180(sp)
    3c08:	df004615 	stw	fp,280(sp)
    3c0c:	dd804415 	stw	r22,272(sp)
    3c10:	dd004215 	stw	r20,264(sp)
    3c14:	dcc04115 	stw	r19,260(sp)
    3c18:	dc804015 	stw	r18,256(sp)
    3c1c:	dc403f15 	stw	r17,252(sp)
    3c20:	dc003e15 	stw	r16,248(sp)
    3c24:	0008a000 	call	8a00 <_localeconv_r>
    3c28:	10800017 	ldw	r2,0(r2)
    3c2c:	1009883a 	mov	r4,r2
    3c30:	d8803415 	stw	r2,208(sp)
    3c34:	0003b500 	call	3b50 <strlen>
    3c38:	d8803715 	stw	r2,220(sp)
    3c3c:	d8802c17 	ldw	r2,176(sp)
    3c40:	10000226 	beq	r2,zero,3c4c <___vfprintf_internal_r+0x64>
    3c44:	10800e17 	ldw	r2,56(r2)
    3c48:	1000f926 	beq	r2,zero,4030 <___vfprintf_internal_r+0x448>
    3c4c:	b880030b 	ldhu	r2,12(r23)
    3c50:	10c8000c 	andi	r3,r2,8192
    3c54:	1800061e 	bne	r3,zero,3c70 <___vfprintf_internal_r+0x88>
    3c58:	b9001917 	ldw	r4,100(r23)
    3c5c:	00f7ffc4 	movi	r3,-8193
    3c60:	10880014 	ori	r2,r2,8192
    3c64:	20c6703a 	and	r3,r4,r3
    3c68:	b880030d 	sth	r2,12(r23)
    3c6c:	b8c01915 	stw	r3,100(r23)
    3c70:	10c0020c 	andi	r3,r2,8
    3c74:	1800c126 	beq	r3,zero,3f7c <___vfprintf_internal_r+0x394>
    3c78:	b8c00417 	ldw	r3,16(r23)
    3c7c:	1800bf26 	beq	r3,zero,3f7c <___vfprintf_internal_r+0x394>
    3c80:	1080068c 	andi	r2,r2,26
    3c84:	00c00284 	movi	r3,10
    3c88:	10c0c426 	beq	r2,r3,3f9c <___vfprintf_internal_r+0x3b4>
    3c8c:	d8c00404 	addi	r3,sp,16
    3c90:	05000074 	movhi	r20,1
    3c94:	d9001e04 	addi	r4,sp,120
    3c98:	a5088e84 	addi	r20,r20,8762
    3c9c:	d8c01e15 	stw	r3,120(sp)
    3ca0:	d8002015 	stw	zero,128(sp)
    3ca4:	d8001f15 	stw	zero,124(sp)
    3ca8:	d8003315 	stw	zero,204(sp)
    3cac:	d8003615 	stw	zero,216(sp)
    3cb0:	d8003815 	stw	zero,224(sp)
    3cb4:	1811883a 	mov	r8,r3
    3cb8:	d8003915 	stw	zero,228(sp)
    3cbc:	d8003a15 	stw	zero,232(sp)
    3cc0:	d8002f15 	stw	zero,188(sp)
    3cc4:	d9002815 	stw	r4,160(sp)
    3cc8:	a8800007 	ldb	r2,0(r21)
    3ccc:	10027b26 	beq	r2,zero,46bc <___vfprintf_internal_r+0xad4>
    3cd0:	00c00944 	movi	r3,37
    3cd4:	a821883a 	mov	r16,r21
    3cd8:	10c0021e 	bne	r2,r3,3ce4 <___vfprintf_internal_r+0xfc>
    3cdc:	00001406 	br	3d30 <___vfprintf_internal_r+0x148>
    3ce0:	10c00326 	beq	r2,r3,3cf0 <___vfprintf_internal_r+0x108>
    3ce4:	84000044 	addi	r16,r16,1
    3ce8:	80800007 	ldb	r2,0(r16)
    3cec:	103ffc1e 	bne	r2,zero,3ce0 <__alt_data_end+0xff003ce0>
    3cf0:	8563c83a 	sub	r17,r16,r21
    3cf4:	88000e26 	beq	r17,zero,3d30 <___vfprintf_internal_r+0x148>
    3cf8:	d8c02017 	ldw	r3,128(sp)
    3cfc:	d8801f17 	ldw	r2,124(sp)
    3d00:	45400015 	stw	r21,0(r8)
    3d04:	1c47883a 	add	r3,r3,r17
    3d08:	10800044 	addi	r2,r2,1
    3d0c:	d8c02015 	stw	r3,128(sp)
    3d10:	44400115 	stw	r17,4(r8)
    3d14:	d8801f15 	stw	r2,124(sp)
    3d18:	00c001c4 	movi	r3,7
    3d1c:	1880a716 	blt	r3,r2,3fbc <___vfprintf_internal_r+0x3d4>
    3d20:	42000204 	addi	r8,r8,8
    3d24:	d9402f17 	ldw	r5,188(sp)
    3d28:	2c4b883a 	add	r5,r5,r17
    3d2c:	d9402f15 	stw	r5,188(sp)
    3d30:	80800007 	ldb	r2,0(r16)
    3d34:	1000a826 	beq	r2,zero,3fd8 <___vfprintf_internal_r+0x3f0>
    3d38:	84400047 	ldb	r17,1(r16)
    3d3c:	00bfffc4 	movi	r2,-1
    3d40:	85400044 	addi	r21,r16,1
    3d44:	d8002785 	stb	zero,158(sp)
    3d48:	0007883a 	mov	r3,zero
    3d4c:	000f883a 	mov	r7,zero
    3d50:	d8802915 	stw	r2,164(sp)
    3d54:	d8003115 	stw	zero,196(sp)
    3d58:	0025883a 	mov	r18,zero
    3d5c:	01401604 	movi	r5,88
    3d60:	01800244 	movi	r6,9
    3d64:	02800a84 	movi	r10,42
    3d68:	02401b04 	movi	r9,108
    3d6c:	ad400044 	addi	r21,r21,1
    3d70:	88bff804 	addi	r2,r17,-32
    3d74:	28830436 	bltu	r5,r2,4988 <___vfprintf_internal_r+0xda0>
    3d78:	100490ba 	slli	r2,r2,2
    3d7c:	01000034 	movhi	r4,0
    3d80:	210f6404 	addi	r4,r4,15760
    3d84:	1105883a 	add	r2,r2,r4
    3d88:	10800017 	ldw	r2,0(r2)
    3d8c:	1000683a 	jmp	r2
    3d90:	000048a8 	cmpgeui	zero,zero,290
    3d94:	00004988 	cmpgei	zero,zero,294
    3d98:	00004988 	cmpgei	zero,zero,294
    3d9c:	000048c8 	cmpgei	zero,zero,291
    3da0:	00004988 	cmpgei	zero,zero,294
    3da4:	00004988 	cmpgei	zero,zero,294
    3da8:	00004988 	cmpgei	zero,zero,294
    3dac:	00004988 	cmpgei	zero,zero,294
    3db0:	00004988 	cmpgei	zero,zero,294
    3db4:	00004988 	cmpgei	zero,zero,294
    3db8:	0000403c 	xorhi	zero,zero,256
    3dbc:	000047e4 	muli	zero,zero,287
    3dc0:	00004988 	cmpgei	zero,zero,294
    3dc4:	00003f04 	movi	zero,252
    3dc8:	00004064 	muli	zero,zero,257
    3dcc:	00004988 	cmpgei	zero,zero,294
    3dd0:	000040a4 	muli	zero,zero,258
    3dd4:	000040b0 	cmpltui	zero,zero,258
    3dd8:	000040b0 	cmpltui	zero,zero,258
    3ddc:	000040b0 	cmpltui	zero,zero,258
    3de0:	000040b0 	cmpltui	zero,zero,258
    3de4:	000040b0 	cmpltui	zero,zero,258
    3de8:	000040b0 	cmpltui	zero,zero,258
    3dec:	000040b0 	cmpltui	zero,zero,258
    3df0:	000040b0 	cmpltui	zero,zero,258
    3df4:	000040b0 	cmpltui	zero,zero,258
    3df8:	00004988 	cmpgei	zero,zero,294
    3dfc:	00004988 	cmpgei	zero,zero,294
    3e00:	00004988 	cmpgei	zero,zero,294
    3e04:	00004988 	cmpgei	zero,zero,294
    3e08:	00004988 	cmpgei	zero,zero,294
    3e0c:	00004988 	cmpgei	zero,zero,294
    3e10:	00004988 	cmpgei	zero,zero,294
    3e14:	00004988 	cmpgei	zero,zero,294
    3e18:	00004988 	cmpgei	zero,zero,294
    3e1c:	00004988 	cmpgei	zero,zero,294
    3e20:	000040e4 	muli	zero,zero,259
    3e24:	000041a0 	cmpeqi	zero,zero,262
    3e28:	00004988 	cmpgei	zero,zero,294
    3e2c:	000041a0 	cmpeqi	zero,zero,262
    3e30:	00004988 	cmpgei	zero,zero,294
    3e34:	00004988 	cmpgei	zero,zero,294
    3e38:	00004988 	cmpgei	zero,zero,294
    3e3c:	00004988 	cmpgei	zero,zero,294
    3e40:	00004240 	call	424 <init_camera+0x194>
    3e44:	00004988 	cmpgei	zero,zero,294
    3e48:	00004988 	cmpgei	zero,zero,294
    3e4c:	0000424c 	andi	zero,zero,265
    3e50:	00004988 	cmpgei	zero,zero,294
    3e54:	00004988 	cmpgei	zero,zero,294
    3e58:	00004988 	cmpgei	zero,zero,294
    3e5c:	00004988 	cmpgei	zero,zero,294
    3e60:	00004988 	cmpgei	zero,zero,294
    3e64:	000046c4 	movi	zero,283
    3e68:	00004988 	cmpgei	zero,zero,294
    3e6c:	00004988 	cmpgei	zero,zero,294
    3e70:	00004724 	muli	zero,zero,284
    3e74:	00004988 	cmpgei	zero,zero,294
    3e78:	00004988 	cmpgei	zero,zero,294
    3e7c:	00004988 	cmpgei	zero,zero,294
    3e80:	00004988 	cmpgei	zero,zero,294
    3e84:	00004988 	cmpgei	zero,zero,294
    3e88:	00004988 	cmpgei	zero,zero,294
    3e8c:	00004988 	cmpgei	zero,zero,294
    3e90:	00004988 	cmpgei	zero,zero,294
    3e94:	00004988 	cmpgei	zero,zero,294
    3e98:	00004988 	cmpgei	zero,zero,294
    3e9c:	00004934 	movhi	zero,292
    3ea0:	000048d4 	movui	zero,291
    3ea4:	000041a0 	cmpeqi	zero,zero,262
    3ea8:	000041a0 	cmpeqi	zero,zero,262
    3eac:	000041a0 	cmpeqi	zero,zero,262
    3eb0:	000048e4 	muli	zero,zero,291
    3eb4:	000048d4 	movui	zero,291
    3eb8:	00004988 	cmpgei	zero,zero,294
    3ebc:	00004988 	cmpgei	zero,zero,294
    3ec0:	000048f0 	cmpltui	zero,zero,291
    3ec4:	00004988 	cmpgei	zero,zero,294
    3ec8:	00004900 	call	490 <init_camera+0x200>
    3ecc:	000047d4 	movui	zero,287
    3ed0:	00003f10 	cmplti	zero,zero,252
    3ed4:	000047f4 	movhi	zero,287
    3ed8:	00004988 	cmpgei	zero,zero,294
    3edc:	00004800 	call	480 <init_camera+0x1f0>
    3ee0:	00004988 	cmpgei	zero,zero,294
    3ee4:	0000485c 	xori	zero,zero,289
    3ee8:	00004988 	cmpgei	zero,zero,294
    3eec:	00004988 	cmpgei	zero,zero,294
    3ef0:	0000486c 	andhi	zero,zero,289
    3ef4:	d9003117 	ldw	r4,196(sp)
    3ef8:	d8802d15 	stw	r2,180(sp)
    3efc:	0109c83a 	sub	r4,zero,r4
    3f00:	d9003115 	stw	r4,196(sp)
    3f04:	94800114 	ori	r18,r18,4
    3f08:	ac400007 	ldb	r17,0(r21)
    3f0c:	003f9706 	br	3d6c <__alt_data_end+0xff003d6c>
    3f10:	00800c04 	movi	r2,48
    3f14:	d9002d17 	ldw	r4,180(sp)
    3f18:	d9402917 	ldw	r5,164(sp)
    3f1c:	d8802705 	stb	r2,156(sp)
    3f20:	00801e04 	movi	r2,120
    3f24:	d8802745 	stb	r2,157(sp)
    3f28:	d8002785 	stb	zero,158(sp)
    3f2c:	20c00104 	addi	r3,r4,4
    3f30:	24c00017 	ldw	r19,0(r4)
    3f34:	002d883a 	mov	r22,zero
    3f38:	90800094 	ori	r2,r18,2
    3f3c:	28029a16 	blt	r5,zero,49a8 <___vfprintf_internal_r+0xdc0>
    3f40:	00bfdfc4 	movi	r2,-129
    3f44:	90a4703a 	and	r18,r18,r2
    3f48:	d8c02d15 	stw	r3,180(sp)
    3f4c:	94800094 	ori	r18,r18,2
    3f50:	9802871e 	bne	r19,zero,4970 <___vfprintf_internal_r+0xd88>
    3f54:	00800074 	movhi	r2,1
    3f58:	10888704 	addi	r2,r2,8732
    3f5c:	d8803915 	stw	r2,228(sp)
    3f60:	04401e04 	movi	r17,120
    3f64:	d8802917 	ldw	r2,164(sp)
    3f68:	0039883a 	mov	fp,zero
    3f6c:	1001e926 	beq	r2,zero,4714 <___vfprintf_internal_r+0xb2c>
    3f70:	0027883a 	mov	r19,zero
    3f74:	002d883a 	mov	r22,zero
    3f78:	00020506 	br	4790 <___vfprintf_internal_r+0xba8>
    3f7c:	d9002c17 	ldw	r4,176(sp)
    3f80:	b80b883a 	mov	r5,r23
    3f84:	0005eb80 	call	5eb8 <__swsetup_r>
    3f88:	1005ac1e 	bne	r2,zero,563c <___vfprintf_internal_r+0x1a54>
    3f8c:	b880030b 	ldhu	r2,12(r23)
    3f90:	00c00284 	movi	r3,10
    3f94:	1080068c 	andi	r2,r2,26
    3f98:	10ff3c1e 	bne	r2,r3,3c8c <__alt_data_end+0xff003c8c>
    3f9c:	b880038f 	ldh	r2,14(r23)
    3fa0:	103f3a16 	blt	r2,zero,3c8c <__alt_data_end+0xff003c8c>
    3fa4:	d9c02d17 	ldw	r7,180(sp)
    3fa8:	d9002c17 	ldw	r4,176(sp)
    3fac:	a80d883a 	mov	r6,r21
    3fb0:	b80b883a 	mov	r5,r23
    3fb4:	0005dfc0 	call	5dfc <__sbprintf>
    3fb8:	00001106 	br	4000 <___vfprintf_internal_r+0x418>
    3fbc:	d9002c17 	ldw	r4,176(sp)
    3fc0:	d9801e04 	addi	r6,sp,120
    3fc4:	b80b883a 	mov	r5,r23
    3fc8:	000a9840 	call	a984 <__sprint_r>
    3fcc:	1000081e 	bne	r2,zero,3ff0 <___vfprintf_internal_r+0x408>
    3fd0:	da000404 	addi	r8,sp,16
    3fd4:	003f5306 	br	3d24 <__alt_data_end+0xff003d24>
    3fd8:	d8802017 	ldw	r2,128(sp)
    3fdc:	10000426 	beq	r2,zero,3ff0 <___vfprintf_internal_r+0x408>
    3fe0:	d9002c17 	ldw	r4,176(sp)
    3fe4:	d9801e04 	addi	r6,sp,120
    3fe8:	b80b883a 	mov	r5,r23
    3fec:	000a9840 	call	a984 <__sprint_r>
    3ff0:	b880030b 	ldhu	r2,12(r23)
    3ff4:	1080100c 	andi	r2,r2,64
    3ff8:	1005901e 	bne	r2,zero,563c <___vfprintf_internal_r+0x1a54>
    3ffc:	d8802f17 	ldw	r2,188(sp)
    4000:	dfc04717 	ldw	ra,284(sp)
    4004:	df004617 	ldw	fp,280(sp)
    4008:	ddc04517 	ldw	r23,276(sp)
    400c:	dd804417 	ldw	r22,272(sp)
    4010:	dd404317 	ldw	r21,268(sp)
    4014:	dd004217 	ldw	r20,264(sp)
    4018:	dcc04117 	ldw	r19,260(sp)
    401c:	dc804017 	ldw	r18,256(sp)
    4020:	dc403f17 	ldw	r17,252(sp)
    4024:	dc003e17 	ldw	r16,248(sp)
    4028:	dec04804 	addi	sp,sp,288
    402c:	f800283a 	ret
    4030:	d9002c17 	ldw	r4,176(sp)
    4034:	0007e8c0 	call	7e8c <__sinit>
    4038:	003f0406 	br	3c4c <__alt_data_end+0xff003c4c>
    403c:	d8802d17 	ldw	r2,180(sp)
    4040:	d9002d17 	ldw	r4,180(sp)
    4044:	10800017 	ldw	r2,0(r2)
    4048:	d8803115 	stw	r2,196(sp)
    404c:	20800104 	addi	r2,r4,4
    4050:	d9003117 	ldw	r4,196(sp)
    4054:	203fa716 	blt	r4,zero,3ef4 <__alt_data_end+0xff003ef4>
    4058:	d8802d15 	stw	r2,180(sp)
    405c:	ac400007 	ldb	r17,0(r21)
    4060:	003f4206 	br	3d6c <__alt_data_end+0xff003d6c>
    4064:	ac400007 	ldb	r17,0(r21)
    4068:	aac00044 	addi	r11,r21,1
    406c:	8a872826 	beq	r17,r10,5d10 <___vfprintf_internal_r+0x2128>
    4070:	88bff404 	addi	r2,r17,-48
    4074:	0009883a 	mov	r4,zero
    4078:	30867d36 	bltu	r6,r2,5a70 <___vfprintf_internal_r+0x1e88>
    407c:	5c400007 	ldb	r17,0(r11)
    4080:	210002a4 	muli	r4,r4,10
    4084:	5d400044 	addi	r21,r11,1
    4088:	a817883a 	mov	r11,r21
    408c:	2089883a 	add	r4,r4,r2
    4090:	88bff404 	addi	r2,r17,-48
    4094:	30bff92e 	bgeu	r6,r2,407c <__alt_data_end+0xff00407c>
    4098:	2005c916 	blt	r4,zero,57c0 <___vfprintf_internal_r+0x1bd8>
    409c:	d9002915 	stw	r4,164(sp)
    40a0:	003f3306 	br	3d70 <__alt_data_end+0xff003d70>
    40a4:	94802014 	ori	r18,r18,128
    40a8:	ac400007 	ldb	r17,0(r21)
    40ac:	003f2f06 	br	3d6c <__alt_data_end+0xff003d6c>
    40b0:	a809883a 	mov	r4,r21
    40b4:	d8003115 	stw	zero,196(sp)
    40b8:	88bff404 	addi	r2,r17,-48
    40bc:	0017883a 	mov	r11,zero
    40c0:	24400007 	ldb	r17,0(r4)
    40c4:	5ac002a4 	muli	r11,r11,10
    40c8:	ad400044 	addi	r21,r21,1
    40cc:	a809883a 	mov	r4,r21
    40d0:	12d7883a 	add	r11,r2,r11
    40d4:	88bff404 	addi	r2,r17,-48
    40d8:	30bff92e 	bgeu	r6,r2,40c0 <__alt_data_end+0xff0040c0>
    40dc:	dac03115 	stw	r11,196(sp)
    40e0:	003f2306 	br	3d70 <__alt_data_end+0xff003d70>
    40e4:	18c03fcc 	andi	r3,r3,255
    40e8:	18072b1e 	bne	r3,zero,5d98 <___vfprintf_internal_r+0x21b0>
    40ec:	94800414 	ori	r18,r18,16
    40f0:	9080080c 	andi	r2,r18,32
    40f4:	10037b26 	beq	r2,zero,4ee4 <___vfprintf_internal_r+0x12fc>
    40f8:	d9402d17 	ldw	r5,180(sp)
    40fc:	28800117 	ldw	r2,4(r5)
    4100:	2cc00017 	ldw	r19,0(r5)
    4104:	29400204 	addi	r5,r5,8
    4108:	d9402d15 	stw	r5,180(sp)
    410c:	102d883a 	mov	r22,r2
    4110:	10044b16 	blt	r2,zero,5240 <___vfprintf_internal_r+0x1658>
    4114:	d9402917 	ldw	r5,164(sp)
    4118:	df002783 	ldbu	fp,158(sp)
    411c:	2803bc16 	blt	r5,zero,5010 <___vfprintf_internal_r+0x1428>
    4120:	00ffdfc4 	movi	r3,-129
    4124:	9d84b03a 	or	r2,r19,r22
    4128:	90e4703a 	and	r18,r18,r3
    412c:	10017726 	beq	r2,zero,470c <___vfprintf_internal_r+0xb24>
    4130:	b0038326 	beq	r22,zero,4f40 <___vfprintf_internal_r+0x1358>
    4134:	dc402a15 	stw	r17,168(sp)
    4138:	dc001e04 	addi	r16,sp,120
    413c:	b023883a 	mov	r17,r22
    4140:	402d883a 	mov	r22,r8
    4144:	9809883a 	mov	r4,r19
    4148:	880b883a 	mov	r5,r17
    414c:	01800284 	movi	r6,10
    4150:	000f883a 	mov	r7,zero
    4154:	000cd7c0 	call	cd7c <__umoddi3>
    4158:	10800c04 	addi	r2,r2,48
    415c:	843fffc4 	addi	r16,r16,-1
    4160:	9809883a 	mov	r4,r19
    4164:	880b883a 	mov	r5,r17
    4168:	80800005 	stb	r2,0(r16)
    416c:	01800284 	movi	r6,10
    4170:	000f883a 	mov	r7,zero
    4174:	000c8040 	call	c804 <__udivdi3>
    4178:	1027883a 	mov	r19,r2
    417c:	10c4b03a 	or	r2,r2,r3
    4180:	1823883a 	mov	r17,r3
    4184:	103fef1e 	bne	r2,zero,4144 <__alt_data_end+0xff004144>
    4188:	d8c02817 	ldw	r3,160(sp)
    418c:	dc402a17 	ldw	r17,168(sp)
    4190:	b011883a 	mov	r8,r22
    4194:	1c07c83a 	sub	r3,r3,r16
    4198:	d8c02e15 	stw	r3,184(sp)
    419c:	00005906 	br	4304 <___vfprintf_internal_r+0x71c>
    41a0:	18c03fcc 	andi	r3,r3,255
    41a4:	1806fa1e 	bne	r3,zero,5d90 <___vfprintf_internal_r+0x21a8>
    41a8:	9080020c 	andi	r2,r18,8
    41ac:	10048a26 	beq	r2,zero,53d8 <___vfprintf_internal_r+0x17f0>
    41b0:	d8c02d17 	ldw	r3,180(sp)
    41b4:	d9002d17 	ldw	r4,180(sp)
    41b8:	d9402d17 	ldw	r5,180(sp)
    41bc:	18c00017 	ldw	r3,0(r3)
    41c0:	21000117 	ldw	r4,4(r4)
    41c4:	29400204 	addi	r5,r5,8
    41c8:	d8c03615 	stw	r3,216(sp)
    41cc:	d9003815 	stw	r4,224(sp)
    41d0:	d9402d15 	stw	r5,180(sp)
    41d4:	d9003617 	ldw	r4,216(sp)
    41d8:	d9403817 	ldw	r5,224(sp)
    41dc:	da003d15 	stw	r8,244(sp)
    41e0:	04000044 	movi	r16,1
    41e4:	000a5fc0 	call	a5fc <__fpclassifyd>
    41e8:	da003d17 	ldw	r8,244(sp)
    41ec:	14041f1e 	bne	r2,r16,526c <___vfprintf_internal_r+0x1684>
    41f0:	d9003617 	ldw	r4,216(sp)
    41f4:	d9403817 	ldw	r5,224(sp)
    41f8:	000d883a 	mov	r6,zero
    41fc:	000f883a 	mov	r7,zero
    4200:	000dcc40 	call	dcc4 <__ledf2>
    4204:	da003d17 	ldw	r8,244(sp)
    4208:	1005be16 	blt	r2,zero,5904 <___vfprintf_internal_r+0x1d1c>
    420c:	df002783 	ldbu	fp,158(sp)
    4210:	008011c4 	movi	r2,71
    4214:	1445330e 	bge	r2,r17,56e4 <___vfprintf_internal_r+0x1afc>
    4218:	04000074 	movhi	r16,1
    421c:	84087f04 	addi	r16,r16,8700
    4220:	00c000c4 	movi	r3,3
    4224:	00bfdfc4 	movi	r2,-129
    4228:	d8c02a15 	stw	r3,168(sp)
    422c:	90a4703a 	and	r18,r18,r2
    4230:	d8c02e15 	stw	r3,184(sp)
    4234:	d8002915 	stw	zero,164(sp)
    4238:	d8003215 	stw	zero,200(sp)
    423c:	00003706 	br	431c <___vfprintf_internal_r+0x734>
    4240:	94800214 	ori	r18,r18,8
    4244:	ac400007 	ldb	r17,0(r21)
    4248:	003ec806 	br	3d6c <__alt_data_end+0xff003d6c>
    424c:	18c03fcc 	andi	r3,r3,255
    4250:	1806db1e 	bne	r3,zero,5dc0 <___vfprintf_internal_r+0x21d8>
    4254:	94800414 	ori	r18,r18,16
    4258:	9080080c 	andi	r2,r18,32
    425c:	1002d826 	beq	r2,zero,4dc0 <___vfprintf_internal_r+0x11d8>
    4260:	d9402d17 	ldw	r5,180(sp)
    4264:	d8c02917 	ldw	r3,164(sp)
    4268:	d8002785 	stb	zero,158(sp)
    426c:	28800204 	addi	r2,r5,8
    4270:	2cc00017 	ldw	r19,0(r5)
    4274:	2d800117 	ldw	r22,4(r5)
    4278:	18048f16 	blt	r3,zero,54b8 <___vfprintf_internal_r+0x18d0>
    427c:	013fdfc4 	movi	r4,-129
    4280:	9d86b03a 	or	r3,r19,r22
    4284:	d8802d15 	stw	r2,180(sp)
    4288:	9124703a 	and	r18,r18,r4
    428c:	1802d91e 	bne	r3,zero,4df4 <___vfprintf_internal_r+0x120c>
    4290:	d8c02917 	ldw	r3,164(sp)
    4294:	0039883a 	mov	fp,zero
    4298:	1805c326 	beq	r3,zero,59a8 <___vfprintf_internal_r+0x1dc0>
    429c:	0027883a 	mov	r19,zero
    42a0:	002d883a 	mov	r22,zero
    42a4:	dc001e04 	addi	r16,sp,120
    42a8:	9806d0fa 	srli	r3,r19,3
    42ac:	b008977a 	slli	r4,r22,29
    42b0:	b02cd0fa 	srli	r22,r22,3
    42b4:	9cc001cc 	andi	r19,r19,7
    42b8:	98800c04 	addi	r2,r19,48
    42bc:	843fffc4 	addi	r16,r16,-1
    42c0:	20e6b03a 	or	r19,r4,r3
    42c4:	80800005 	stb	r2,0(r16)
    42c8:	9d86b03a 	or	r3,r19,r22
    42cc:	183ff61e 	bne	r3,zero,42a8 <__alt_data_end+0xff0042a8>
    42d0:	90c0004c 	andi	r3,r18,1
    42d4:	18013b26 	beq	r3,zero,47c4 <___vfprintf_internal_r+0xbdc>
    42d8:	10803fcc 	andi	r2,r2,255
    42dc:	1080201c 	xori	r2,r2,128
    42e0:	10bfe004 	addi	r2,r2,-128
    42e4:	00c00c04 	movi	r3,48
    42e8:	10c13626 	beq	r2,r3,47c4 <___vfprintf_internal_r+0xbdc>
    42ec:	80ffffc5 	stb	r3,-1(r16)
    42f0:	d8c02817 	ldw	r3,160(sp)
    42f4:	80bfffc4 	addi	r2,r16,-1
    42f8:	1021883a 	mov	r16,r2
    42fc:	1887c83a 	sub	r3,r3,r2
    4300:	d8c02e15 	stw	r3,184(sp)
    4304:	d8802e17 	ldw	r2,184(sp)
    4308:	d9002917 	ldw	r4,164(sp)
    430c:	1100010e 	bge	r2,r4,4314 <___vfprintf_internal_r+0x72c>
    4310:	2005883a 	mov	r2,r4
    4314:	d8802a15 	stw	r2,168(sp)
    4318:	d8003215 	stw	zero,200(sp)
    431c:	e7003fcc 	andi	fp,fp,255
    4320:	e700201c 	xori	fp,fp,128
    4324:	e73fe004 	addi	fp,fp,-128
    4328:	e0000326 	beq	fp,zero,4338 <___vfprintf_internal_r+0x750>
    432c:	d8c02a17 	ldw	r3,168(sp)
    4330:	18c00044 	addi	r3,r3,1
    4334:	d8c02a15 	stw	r3,168(sp)
    4338:	90c0008c 	andi	r3,r18,2
    433c:	d8c02b15 	stw	r3,172(sp)
    4340:	18000326 	beq	r3,zero,4350 <___vfprintf_internal_r+0x768>
    4344:	d8c02a17 	ldw	r3,168(sp)
    4348:	18c00084 	addi	r3,r3,2
    434c:	d8c02a15 	stw	r3,168(sp)
    4350:	90c0210c 	andi	r3,r18,132
    4354:	d8c03015 	stw	r3,192(sp)
    4358:	1801a31e 	bne	r3,zero,49e8 <___vfprintf_internal_r+0xe00>
    435c:	d9003117 	ldw	r4,196(sp)
    4360:	d8c02a17 	ldw	r3,168(sp)
    4364:	20e7c83a 	sub	r19,r4,r3
    4368:	04c19f0e 	bge	zero,r19,49e8 <___vfprintf_internal_r+0xe00>
    436c:	02400404 	movi	r9,16
    4370:	d8c02017 	ldw	r3,128(sp)
    4374:	d8801f17 	ldw	r2,124(sp)
    4378:	4cc50d0e 	bge	r9,r19,57b0 <___vfprintf_internal_r+0x1bc8>
    437c:	01400074 	movhi	r5,1
    4380:	29489284 	addi	r5,r5,8778
    4384:	dc403b15 	stw	r17,236(sp)
    4388:	d9403515 	stw	r5,212(sp)
    438c:	9823883a 	mov	r17,r19
    4390:	482d883a 	mov	r22,r9
    4394:	9027883a 	mov	r19,r18
    4398:	070001c4 	movi	fp,7
    439c:	8025883a 	mov	r18,r16
    43a0:	dc002c17 	ldw	r16,176(sp)
    43a4:	00000306 	br	43b4 <___vfprintf_internal_r+0x7cc>
    43a8:	8c7ffc04 	addi	r17,r17,-16
    43ac:	42000204 	addi	r8,r8,8
    43b0:	b440130e 	bge	r22,r17,4400 <___vfprintf_internal_r+0x818>
    43b4:	01000074 	movhi	r4,1
    43b8:	18c00404 	addi	r3,r3,16
    43bc:	10800044 	addi	r2,r2,1
    43c0:	21089284 	addi	r4,r4,8778
    43c4:	41000015 	stw	r4,0(r8)
    43c8:	45800115 	stw	r22,4(r8)
    43cc:	d8c02015 	stw	r3,128(sp)
    43d0:	d8801f15 	stw	r2,124(sp)
    43d4:	e0bff40e 	bge	fp,r2,43a8 <__alt_data_end+0xff0043a8>
    43d8:	d9801e04 	addi	r6,sp,120
    43dc:	b80b883a 	mov	r5,r23
    43e0:	8009883a 	mov	r4,r16
    43e4:	000a9840 	call	a984 <__sprint_r>
    43e8:	103f011e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    43ec:	8c7ffc04 	addi	r17,r17,-16
    43f0:	d8c02017 	ldw	r3,128(sp)
    43f4:	d8801f17 	ldw	r2,124(sp)
    43f8:	da000404 	addi	r8,sp,16
    43fc:	b47fed16 	blt	r22,r17,43b4 <__alt_data_end+0xff0043b4>
    4400:	9021883a 	mov	r16,r18
    4404:	9825883a 	mov	r18,r19
    4408:	8827883a 	mov	r19,r17
    440c:	dc403b17 	ldw	r17,236(sp)
    4410:	d9403517 	ldw	r5,212(sp)
    4414:	98c7883a 	add	r3,r19,r3
    4418:	10800044 	addi	r2,r2,1
    441c:	41400015 	stw	r5,0(r8)
    4420:	44c00115 	stw	r19,4(r8)
    4424:	d8c02015 	stw	r3,128(sp)
    4428:	d8801f15 	stw	r2,124(sp)
    442c:	010001c4 	movi	r4,7
    4430:	2082a316 	blt	r4,r2,4ec0 <___vfprintf_internal_r+0x12d8>
    4434:	df002787 	ldb	fp,158(sp)
    4438:	42000204 	addi	r8,r8,8
    443c:	e0000c26 	beq	fp,zero,4470 <___vfprintf_internal_r+0x888>
    4440:	d8801f17 	ldw	r2,124(sp)
    4444:	d9002784 	addi	r4,sp,158
    4448:	18c00044 	addi	r3,r3,1
    444c:	10800044 	addi	r2,r2,1
    4450:	41000015 	stw	r4,0(r8)
    4454:	01000044 	movi	r4,1
    4458:	41000115 	stw	r4,4(r8)
    445c:	d8c02015 	stw	r3,128(sp)
    4460:	d8801f15 	stw	r2,124(sp)
    4464:	010001c4 	movi	r4,7
    4468:	20823c16 	blt	r4,r2,4d5c <___vfprintf_internal_r+0x1174>
    446c:	42000204 	addi	r8,r8,8
    4470:	d8802b17 	ldw	r2,172(sp)
    4474:	10000c26 	beq	r2,zero,44a8 <___vfprintf_internal_r+0x8c0>
    4478:	d8801f17 	ldw	r2,124(sp)
    447c:	d9002704 	addi	r4,sp,156
    4480:	18c00084 	addi	r3,r3,2
    4484:	10800044 	addi	r2,r2,1
    4488:	41000015 	stw	r4,0(r8)
    448c:	01000084 	movi	r4,2
    4490:	41000115 	stw	r4,4(r8)
    4494:	d8c02015 	stw	r3,128(sp)
    4498:	d8801f15 	stw	r2,124(sp)
    449c:	010001c4 	movi	r4,7
    44a0:	20823616 	blt	r4,r2,4d7c <___vfprintf_internal_r+0x1194>
    44a4:	42000204 	addi	r8,r8,8
    44a8:	d9003017 	ldw	r4,192(sp)
    44ac:	00802004 	movi	r2,128
    44b0:	20819926 	beq	r4,r2,4b18 <___vfprintf_internal_r+0xf30>
    44b4:	d9402917 	ldw	r5,164(sp)
    44b8:	d8802e17 	ldw	r2,184(sp)
    44bc:	28adc83a 	sub	r22,r5,r2
    44c0:	0580310e 	bge	zero,r22,4588 <___vfprintf_internal_r+0x9a0>
    44c4:	07000404 	movi	fp,16
    44c8:	d8801f17 	ldw	r2,124(sp)
    44cc:	e584140e 	bge	fp,r22,5520 <___vfprintf_internal_r+0x1938>
    44d0:	01400074 	movhi	r5,1
    44d4:	29488e84 	addi	r5,r5,8762
    44d8:	dc402915 	stw	r17,164(sp)
    44dc:	d9402b15 	stw	r5,172(sp)
    44e0:	b023883a 	mov	r17,r22
    44e4:	04c001c4 	movi	r19,7
    44e8:	a82d883a 	mov	r22,r21
    44ec:	902b883a 	mov	r21,r18
    44f0:	8025883a 	mov	r18,r16
    44f4:	dc002c17 	ldw	r16,176(sp)
    44f8:	00000306 	br	4508 <___vfprintf_internal_r+0x920>
    44fc:	8c7ffc04 	addi	r17,r17,-16
    4500:	42000204 	addi	r8,r8,8
    4504:	e440110e 	bge	fp,r17,454c <___vfprintf_internal_r+0x964>
    4508:	18c00404 	addi	r3,r3,16
    450c:	10800044 	addi	r2,r2,1
    4510:	45000015 	stw	r20,0(r8)
    4514:	47000115 	stw	fp,4(r8)
    4518:	d8c02015 	stw	r3,128(sp)
    451c:	d8801f15 	stw	r2,124(sp)
    4520:	98bff60e 	bge	r19,r2,44fc <__alt_data_end+0xff0044fc>
    4524:	d9801e04 	addi	r6,sp,120
    4528:	b80b883a 	mov	r5,r23
    452c:	8009883a 	mov	r4,r16
    4530:	000a9840 	call	a984 <__sprint_r>
    4534:	103eae1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4538:	8c7ffc04 	addi	r17,r17,-16
    453c:	d8c02017 	ldw	r3,128(sp)
    4540:	d8801f17 	ldw	r2,124(sp)
    4544:	da000404 	addi	r8,sp,16
    4548:	e47fef16 	blt	fp,r17,4508 <__alt_data_end+0xff004508>
    454c:	9021883a 	mov	r16,r18
    4550:	a825883a 	mov	r18,r21
    4554:	b02b883a 	mov	r21,r22
    4558:	882d883a 	mov	r22,r17
    455c:	dc402917 	ldw	r17,164(sp)
    4560:	d9002b17 	ldw	r4,172(sp)
    4564:	1d87883a 	add	r3,r3,r22
    4568:	10800044 	addi	r2,r2,1
    456c:	41000015 	stw	r4,0(r8)
    4570:	45800115 	stw	r22,4(r8)
    4574:	d8c02015 	stw	r3,128(sp)
    4578:	d8801f15 	stw	r2,124(sp)
    457c:	010001c4 	movi	r4,7
    4580:	2081ee16 	blt	r4,r2,4d3c <___vfprintf_internal_r+0x1154>
    4584:	42000204 	addi	r8,r8,8
    4588:	9080400c 	andi	r2,r18,256
    458c:	1001181e 	bne	r2,zero,49f0 <___vfprintf_internal_r+0xe08>
    4590:	d9402e17 	ldw	r5,184(sp)
    4594:	d8801f17 	ldw	r2,124(sp)
    4598:	44000015 	stw	r16,0(r8)
    459c:	1947883a 	add	r3,r3,r5
    45a0:	10800044 	addi	r2,r2,1
    45a4:	41400115 	stw	r5,4(r8)
    45a8:	d8c02015 	stw	r3,128(sp)
    45ac:	d8801f15 	stw	r2,124(sp)
    45b0:	010001c4 	movi	r4,7
    45b4:	2081d316 	blt	r4,r2,4d04 <___vfprintf_internal_r+0x111c>
    45b8:	42000204 	addi	r8,r8,8
    45bc:	9480010c 	andi	r18,r18,4
    45c0:	90003226 	beq	r18,zero,468c <___vfprintf_internal_r+0xaa4>
    45c4:	d9403117 	ldw	r5,196(sp)
    45c8:	d8802a17 	ldw	r2,168(sp)
    45cc:	28a1c83a 	sub	r16,r5,r2
    45d0:	04002e0e 	bge	zero,r16,468c <___vfprintf_internal_r+0xaa4>
    45d4:	04400404 	movi	r17,16
    45d8:	d8801f17 	ldw	r2,124(sp)
    45dc:	8c04a20e 	bge	r17,r16,5868 <___vfprintf_internal_r+0x1c80>
    45e0:	01400074 	movhi	r5,1
    45e4:	29489284 	addi	r5,r5,8778
    45e8:	d9403515 	stw	r5,212(sp)
    45ec:	048001c4 	movi	r18,7
    45f0:	dcc02c17 	ldw	r19,176(sp)
    45f4:	00000306 	br	4604 <___vfprintf_internal_r+0xa1c>
    45f8:	843ffc04 	addi	r16,r16,-16
    45fc:	42000204 	addi	r8,r8,8
    4600:	8c00130e 	bge	r17,r16,4650 <___vfprintf_internal_r+0xa68>
    4604:	01000074 	movhi	r4,1
    4608:	18c00404 	addi	r3,r3,16
    460c:	10800044 	addi	r2,r2,1
    4610:	21089284 	addi	r4,r4,8778
    4614:	41000015 	stw	r4,0(r8)
    4618:	44400115 	stw	r17,4(r8)
    461c:	d8c02015 	stw	r3,128(sp)
    4620:	d8801f15 	stw	r2,124(sp)
    4624:	90bff40e 	bge	r18,r2,45f8 <__alt_data_end+0xff0045f8>
    4628:	d9801e04 	addi	r6,sp,120
    462c:	b80b883a 	mov	r5,r23
    4630:	9809883a 	mov	r4,r19
    4634:	000a9840 	call	a984 <__sprint_r>
    4638:	103e6d1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    463c:	843ffc04 	addi	r16,r16,-16
    4640:	d8c02017 	ldw	r3,128(sp)
    4644:	d8801f17 	ldw	r2,124(sp)
    4648:	da000404 	addi	r8,sp,16
    464c:	8c3fed16 	blt	r17,r16,4604 <__alt_data_end+0xff004604>
    4650:	d9403517 	ldw	r5,212(sp)
    4654:	1c07883a 	add	r3,r3,r16
    4658:	10800044 	addi	r2,r2,1
    465c:	41400015 	stw	r5,0(r8)
    4660:	44000115 	stw	r16,4(r8)
    4664:	d8c02015 	stw	r3,128(sp)
    4668:	d8801f15 	stw	r2,124(sp)
    466c:	010001c4 	movi	r4,7
    4670:	2080060e 	bge	r4,r2,468c <___vfprintf_internal_r+0xaa4>
    4674:	d9002c17 	ldw	r4,176(sp)
    4678:	d9801e04 	addi	r6,sp,120
    467c:	b80b883a 	mov	r5,r23
    4680:	000a9840 	call	a984 <__sprint_r>
    4684:	103e5a1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4688:	d8c02017 	ldw	r3,128(sp)
    468c:	d8803117 	ldw	r2,196(sp)
    4690:	d9002a17 	ldw	r4,168(sp)
    4694:	1100010e 	bge	r2,r4,469c <___vfprintf_internal_r+0xab4>
    4698:	2005883a 	mov	r2,r4
    469c:	d9402f17 	ldw	r5,188(sp)
    46a0:	288b883a 	add	r5,r5,r2
    46a4:	d9402f15 	stw	r5,188(sp)
    46a8:	18019e1e 	bne	r3,zero,4d24 <___vfprintf_internal_r+0x113c>
    46ac:	a8800007 	ldb	r2,0(r21)
    46b0:	d8001f15 	stw	zero,124(sp)
    46b4:	da000404 	addi	r8,sp,16
    46b8:	103d851e 	bne	r2,zero,3cd0 <__alt_data_end+0xff003cd0>
    46bc:	a821883a 	mov	r16,r21
    46c0:	003d9b06 	br	3d30 <__alt_data_end+0xff003d30>
    46c4:	18c03fcc 	andi	r3,r3,255
    46c8:	1805c11e 	bne	r3,zero,5dd0 <___vfprintf_internal_r+0x21e8>
    46cc:	94800414 	ori	r18,r18,16
    46d0:	9080080c 	andi	r2,r18,32
    46d4:	10020c26 	beq	r2,zero,4f08 <___vfprintf_internal_r+0x1320>
    46d8:	d8802d17 	ldw	r2,180(sp)
    46dc:	d9002917 	ldw	r4,164(sp)
    46e0:	d8002785 	stb	zero,158(sp)
    46e4:	10c00204 	addi	r3,r2,8
    46e8:	14c00017 	ldw	r19,0(r2)
    46ec:	15800117 	ldw	r22,4(r2)
    46f0:	20040f16 	blt	r4,zero,5730 <___vfprintf_internal_r+0x1b48>
    46f4:	013fdfc4 	movi	r4,-129
    46f8:	9d84b03a 	or	r2,r19,r22
    46fc:	d8c02d15 	stw	r3,180(sp)
    4700:	9124703a 	and	r18,r18,r4
    4704:	0039883a 	mov	fp,zero
    4708:	103e891e 	bne	r2,zero,4130 <__alt_data_end+0xff004130>
    470c:	d9002917 	ldw	r4,164(sp)
    4710:	2002c11e 	bne	r4,zero,5218 <___vfprintf_internal_r+0x1630>
    4714:	d8002915 	stw	zero,164(sp)
    4718:	d8002e15 	stw	zero,184(sp)
    471c:	dc001e04 	addi	r16,sp,120
    4720:	003ef806 	br	4304 <__alt_data_end+0xff004304>
    4724:	18c03fcc 	andi	r3,r3,255
    4728:	18059d1e 	bne	r3,zero,5da0 <___vfprintf_internal_r+0x21b8>
    472c:	01400074 	movhi	r5,1
    4730:	29488204 	addi	r5,r5,8712
    4734:	d9403915 	stw	r5,228(sp)
    4738:	9080080c 	andi	r2,r18,32
    473c:	10005226 	beq	r2,zero,4888 <___vfprintf_internal_r+0xca0>
    4740:	d8802d17 	ldw	r2,180(sp)
    4744:	14c00017 	ldw	r19,0(r2)
    4748:	15800117 	ldw	r22,4(r2)
    474c:	10800204 	addi	r2,r2,8
    4750:	d8802d15 	stw	r2,180(sp)
    4754:	9080004c 	andi	r2,r18,1
    4758:	10019026 	beq	r2,zero,4d9c <___vfprintf_internal_r+0x11b4>
    475c:	9d84b03a 	or	r2,r19,r22
    4760:	10036926 	beq	r2,zero,5508 <___vfprintf_internal_r+0x1920>
    4764:	d8c02917 	ldw	r3,164(sp)
    4768:	00800c04 	movi	r2,48
    476c:	d8802705 	stb	r2,156(sp)
    4770:	dc402745 	stb	r17,157(sp)
    4774:	d8002785 	stb	zero,158(sp)
    4778:	90800094 	ori	r2,r18,2
    477c:	18045d16 	blt	r3,zero,58f4 <___vfprintf_internal_r+0x1d0c>
    4780:	00bfdfc4 	movi	r2,-129
    4784:	90a4703a 	and	r18,r18,r2
    4788:	94800094 	ori	r18,r18,2
    478c:	0039883a 	mov	fp,zero
    4790:	d9003917 	ldw	r4,228(sp)
    4794:	dc001e04 	addi	r16,sp,120
    4798:	988003cc 	andi	r2,r19,15
    479c:	b006973a 	slli	r3,r22,28
    47a0:	2085883a 	add	r2,r4,r2
    47a4:	9826d13a 	srli	r19,r19,4
    47a8:	10800003 	ldbu	r2,0(r2)
    47ac:	b02cd13a 	srli	r22,r22,4
    47b0:	843fffc4 	addi	r16,r16,-1
    47b4:	1ce6b03a 	or	r19,r3,r19
    47b8:	80800005 	stb	r2,0(r16)
    47bc:	9d84b03a 	or	r2,r19,r22
    47c0:	103ff51e 	bne	r2,zero,4798 <__alt_data_end+0xff004798>
    47c4:	d8c02817 	ldw	r3,160(sp)
    47c8:	1c07c83a 	sub	r3,r3,r16
    47cc:	d8c02e15 	stw	r3,184(sp)
    47d0:	003ecc06 	br	4304 <__alt_data_end+0xff004304>
    47d4:	18c03fcc 	andi	r3,r3,255
    47d8:	183e9f26 	beq	r3,zero,4258 <__alt_data_end+0xff004258>
    47dc:	d9c02785 	stb	r7,158(sp)
    47e0:	003e9d06 	br	4258 <__alt_data_end+0xff004258>
    47e4:	00c00044 	movi	r3,1
    47e8:	01c00ac4 	movi	r7,43
    47ec:	ac400007 	ldb	r17,0(r21)
    47f0:	003d5e06 	br	3d6c <__alt_data_end+0xff003d6c>
    47f4:	94800814 	ori	r18,r18,32
    47f8:	ac400007 	ldb	r17,0(r21)
    47fc:	003d5b06 	br	3d6c <__alt_data_end+0xff003d6c>
    4800:	d8c02d17 	ldw	r3,180(sp)
    4804:	d8002785 	stb	zero,158(sp)
    4808:	1c000017 	ldw	r16,0(r3)
    480c:	1cc00104 	addi	r19,r3,4
    4810:	80041926 	beq	r16,zero,5878 <___vfprintf_internal_r+0x1c90>
    4814:	d9002917 	ldw	r4,164(sp)
    4818:	2003d016 	blt	r4,zero,575c <___vfprintf_internal_r+0x1b74>
    481c:	200d883a 	mov	r6,r4
    4820:	000b883a 	mov	r5,zero
    4824:	8009883a 	mov	r4,r16
    4828:	da003d15 	stw	r8,244(sp)
    482c:	0008bec0 	call	8bec <memchr>
    4830:	da003d17 	ldw	r8,244(sp)
    4834:	10045426 	beq	r2,zero,5988 <___vfprintf_internal_r+0x1da0>
    4838:	1405c83a 	sub	r2,r2,r16
    483c:	d8802e15 	stw	r2,184(sp)
    4840:	1003cc16 	blt	r2,zero,5774 <___vfprintf_internal_r+0x1b8c>
    4844:	df002783 	ldbu	fp,158(sp)
    4848:	d8802a15 	stw	r2,168(sp)
    484c:	dcc02d15 	stw	r19,180(sp)
    4850:	d8002915 	stw	zero,164(sp)
    4854:	d8003215 	stw	zero,200(sp)
    4858:	003eb006 	br	431c <__alt_data_end+0xff00431c>
    485c:	18c03fcc 	andi	r3,r3,255
    4860:	183f9b26 	beq	r3,zero,46d0 <__alt_data_end+0xff0046d0>
    4864:	d9c02785 	stb	r7,158(sp)
    4868:	003f9906 	br	46d0 <__alt_data_end+0xff0046d0>
    486c:	18c03fcc 	andi	r3,r3,255
    4870:	1805551e 	bne	r3,zero,5dc8 <___vfprintf_internal_r+0x21e0>
    4874:	01400074 	movhi	r5,1
    4878:	29488704 	addi	r5,r5,8732
    487c:	d9403915 	stw	r5,228(sp)
    4880:	9080080c 	andi	r2,r18,32
    4884:	103fae1e 	bne	r2,zero,4740 <__alt_data_end+0xff004740>
    4888:	9080040c 	andi	r2,r18,16
    488c:	1002de26 	beq	r2,zero,5408 <___vfprintf_internal_r+0x1820>
    4890:	d8c02d17 	ldw	r3,180(sp)
    4894:	002d883a 	mov	r22,zero
    4898:	1cc00017 	ldw	r19,0(r3)
    489c:	18c00104 	addi	r3,r3,4
    48a0:	d8c02d15 	stw	r3,180(sp)
    48a4:	003fab06 	br	4754 <__alt_data_end+0xff004754>
    48a8:	38803fcc 	andi	r2,r7,255
    48ac:	1080201c 	xori	r2,r2,128
    48b0:	10bfe004 	addi	r2,r2,-128
    48b4:	1002d21e 	bne	r2,zero,5400 <___vfprintf_internal_r+0x1818>
    48b8:	00c00044 	movi	r3,1
    48bc:	01c00804 	movi	r7,32
    48c0:	ac400007 	ldb	r17,0(r21)
    48c4:	003d2906 	br	3d6c <__alt_data_end+0xff003d6c>
    48c8:	94800054 	ori	r18,r18,1
    48cc:	ac400007 	ldb	r17,0(r21)
    48d0:	003d2606 	br	3d6c <__alt_data_end+0xff003d6c>
    48d4:	18c03fcc 	andi	r3,r3,255
    48d8:	183e0526 	beq	r3,zero,40f0 <__alt_data_end+0xff0040f0>
    48dc:	d9c02785 	stb	r7,158(sp)
    48e0:	003e0306 	br	40f0 <__alt_data_end+0xff0040f0>
    48e4:	94801014 	ori	r18,r18,64
    48e8:	ac400007 	ldb	r17,0(r21)
    48ec:	003d1f06 	br	3d6c <__alt_data_end+0xff003d6c>
    48f0:	ac400007 	ldb	r17,0(r21)
    48f4:	8a438726 	beq	r17,r9,5714 <___vfprintf_internal_r+0x1b2c>
    48f8:	94800414 	ori	r18,r18,16
    48fc:	003d1b06 	br	3d6c <__alt_data_end+0xff003d6c>
    4900:	18c03fcc 	andi	r3,r3,255
    4904:	1805341e 	bne	r3,zero,5dd8 <___vfprintf_internal_r+0x21f0>
    4908:	9080080c 	andi	r2,r18,32
    490c:	1002cd26 	beq	r2,zero,5444 <___vfprintf_internal_r+0x185c>
    4910:	d9402d17 	ldw	r5,180(sp)
    4914:	d9002f17 	ldw	r4,188(sp)
    4918:	28800017 	ldw	r2,0(r5)
    491c:	2007d7fa 	srai	r3,r4,31
    4920:	29400104 	addi	r5,r5,4
    4924:	d9402d15 	stw	r5,180(sp)
    4928:	11000015 	stw	r4,0(r2)
    492c:	10c00115 	stw	r3,4(r2)
    4930:	003ce506 	br	3cc8 <__alt_data_end+0xff003cc8>
    4934:	d8c02d17 	ldw	r3,180(sp)
    4938:	d9002d17 	ldw	r4,180(sp)
    493c:	d8002785 	stb	zero,158(sp)
    4940:	18800017 	ldw	r2,0(r3)
    4944:	21000104 	addi	r4,r4,4
    4948:	00c00044 	movi	r3,1
    494c:	d8c02a15 	stw	r3,168(sp)
    4950:	d8801405 	stb	r2,80(sp)
    4954:	d9002d15 	stw	r4,180(sp)
    4958:	d8c02e15 	stw	r3,184(sp)
    495c:	d8002915 	stw	zero,164(sp)
    4960:	d8003215 	stw	zero,200(sp)
    4964:	dc001404 	addi	r16,sp,80
    4968:	0039883a 	mov	fp,zero
    496c:	003e7206 	br	4338 <__alt_data_end+0xff004338>
    4970:	01000074 	movhi	r4,1
    4974:	21088704 	addi	r4,r4,8732
    4978:	0039883a 	mov	fp,zero
    497c:	d9003915 	stw	r4,228(sp)
    4980:	04401e04 	movi	r17,120
    4984:	003f8206 	br	4790 <__alt_data_end+0xff004790>
    4988:	18c03fcc 	andi	r3,r3,255
    498c:	1805061e 	bne	r3,zero,5da8 <___vfprintf_internal_r+0x21c0>
    4990:	883d9126 	beq	r17,zero,3fd8 <__alt_data_end+0xff003fd8>
    4994:	00c00044 	movi	r3,1
    4998:	d8c02a15 	stw	r3,168(sp)
    499c:	dc401405 	stb	r17,80(sp)
    49a0:	d8002785 	stb	zero,158(sp)
    49a4:	003fec06 	br	4958 <__alt_data_end+0xff004958>
    49a8:	01400074 	movhi	r5,1
    49ac:	29488704 	addi	r5,r5,8732
    49b0:	d9403915 	stw	r5,228(sp)
    49b4:	d8c02d15 	stw	r3,180(sp)
    49b8:	1025883a 	mov	r18,r2
    49bc:	04401e04 	movi	r17,120
    49c0:	9d84b03a 	or	r2,r19,r22
    49c4:	1000fc1e 	bne	r2,zero,4db8 <___vfprintf_internal_r+0x11d0>
    49c8:	0039883a 	mov	fp,zero
    49cc:	00800084 	movi	r2,2
    49d0:	10803fcc 	andi	r2,r2,255
    49d4:	00c00044 	movi	r3,1
    49d8:	10c20f26 	beq	r2,r3,5218 <___vfprintf_internal_r+0x1630>
    49dc:	00c00084 	movi	r3,2
    49e0:	10fd6326 	beq	r2,r3,3f70 <__alt_data_end+0xff003f70>
    49e4:	003e2d06 	br	429c <__alt_data_end+0xff00429c>
    49e8:	d8c02017 	ldw	r3,128(sp)
    49ec:	003e9306 	br	443c <__alt_data_end+0xff00443c>
    49f0:	00801944 	movi	r2,101
    49f4:	14407e0e 	bge	r2,r17,4bf0 <___vfprintf_internal_r+0x1008>
    49f8:	d9003617 	ldw	r4,216(sp)
    49fc:	d9403817 	ldw	r5,224(sp)
    4a00:	000d883a 	mov	r6,zero
    4a04:	000f883a 	mov	r7,zero
    4a08:	d8c03c15 	stw	r3,240(sp)
    4a0c:	da003d15 	stw	r8,244(sp)
    4a10:	000db600 	call	db60 <__eqdf2>
    4a14:	d8c03c17 	ldw	r3,240(sp)
    4a18:	da003d17 	ldw	r8,244(sp)
    4a1c:	1000f71e 	bne	r2,zero,4dfc <___vfprintf_internal_r+0x1214>
    4a20:	d8801f17 	ldw	r2,124(sp)
    4a24:	01000074 	movhi	r4,1
    4a28:	21088e04 	addi	r4,r4,8760
    4a2c:	18c00044 	addi	r3,r3,1
    4a30:	10800044 	addi	r2,r2,1
    4a34:	41000015 	stw	r4,0(r8)
    4a38:	01000044 	movi	r4,1
    4a3c:	41000115 	stw	r4,4(r8)
    4a40:	d8c02015 	stw	r3,128(sp)
    4a44:	d8801f15 	stw	r2,124(sp)
    4a48:	010001c4 	movi	r4,7
    4a4c:	2082b816 	blt	r4,r2,5530 <___vfprintf_internal_r+0x1948>
    4a50:	42000204 	addi	r8,r8,8
    4a54:	d8802617 	ldw	r2,152(sp)
    4a58:	d9403317 	ldw	r5,204(sp)
    4a5c:	11400216 	blt	r2,r5,4a68 <___vfprintf_internal_r+0xe80>
    4a60:	9080004c 	andi	r2,r18,1
    4a64:	103ed526 	beq	r2,zero,45bc <__alt_data_end+0xff0045bc>
    4a68:	d8803717 	ldw	r2,220(sp)
    4a6c:	d9003417 	ldw	r4,208(sp)
    4a70:	d9403717 	ldw	r5,220(sp)
    4a74:	1887883a 	add	r3,r3,r2
    4a78:	d8801f17 	ldw	r2,124(sp)
    4a7c:	41000015 	stw	r4,0(r8)
    4a80:	41400115 	stw	r5,4(r8)
    4a84:	10800044 	addi	r2,r2,1
    4a88:	d8c02015 	stw	r3,128(sp)
    4a8c:	d8801f15 	stw	r2,124(sp)
    4a90:	010001c4 	movi	r4,7
    4a94:	20832916 	blt	r4,r2,573c <___vfprintf_internal_r+0x1b54>
    4a98:	42000204 	addi	r8,r8,8
    4a9c:	d8803317 	ldw	r2,204(sp)
    4aa0:	143fffc4 	addi	r16,r2,-1
    4aa4:	043ec50e 	bge	zero,r16,45bc <__alt_data_end+0xff0045bc>
    4aa8:	04400404 	movi	r17,16
    4aac:	d8801f17 	ldw	r2,124(sp)
    4ab0:	8c00880e 	bge	r17,r16,4cd4 <___vfprintf_internal_r+0x10ec>
    4ab4:	01400074 	movhi	r5,1
    4ab8:	29488e84 	addi	r5,r5,8762
    4abc:	d9402b15 	stw	r5,172(sp)
    4ac0:	058001c4 	movi	r22,7
    4ac4:	dcc02c17 	ldw	r19,176(sp)
    4ac8:	00000306 	br	4ad8 <___vfprintf_internal_r+0xef0>
    4acc:	42000204 	addi	r8,r8,8
    4ad0:	843ffc04 	addi	r16,r16,-16
    4ad4:	8c00820e 	bge	r17,r16,4ce0 <___vfprintf_internal_r+0x10f8>
    4ad8:	18c00404 	addi	r3,r3,16
    4adc:	10800044 	addi	r2,r2,1
    4ae0:	45000015 	stw	r20,0(r8)
    4ae4:	44400115 	stw	r17,4(r8)
    4ae8:	d8c02015 	stw	r3,128(sp)
    4aec:	d8801f15 	stw	r2,124(sp)
    4af0:	b0bff60e 	bge	r22,r2,4acc <__alt_data_end+0xff004acc>
    4af4:	d9801e04 	addi	r6,sp,120
    4af8:	b80b883a 	mov	r5,r23
    4afc:	9809883a 	mov	r4,r19
    4b00:	000a9840 	call	a984 <__sprint_r>
    4b04:	103d3a1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4b08:	d8c02017 	ldw	r3,128(sp)
    4b0c:	d8801f17 	ldw	r2,124(sp)
    4b10:	da000404 	addi	r8,sp,16
    4b14:	003fee06 	br	4ad0 <__alt_data_end+0xff004ad0>
    4b18:	d9403117 	ldw	r5,196(sp)
    4b1c:	d8802a17 	ldw	r2,168(sp)
    4b20:	28adc83a 	sub	r22,r5,r2
    4b24:	05be630e 	bge	zero,r22,44b4 <__alt_data_end+0xff0044b4>
    4b28:	07000404 	movi	fp,16
    4b2c:	d8801f17 	ldw	r2,124(sp)
    4b30:	e5838f0e 	bge	fp,r22,5970 <___vfprintf_internal_r+0x1d88>
    4b34:	01400074 	movhi	r5,1
    4b38:	29488e84 	addi	r5,r5,8762
    4b3c:	dc403015 	stw	r17,192(sp)
    4b40:	d9402b15 	stw	r5,172(sp)
    4b44:	b023883a 	mov	r17,r22
    4b48:	04c001c4 	movi	r19,7
    4b4c:	a82d883a 	mov	r22,r21
    4b50:	902b883a 	mov	r21,r18
    4b54:	8025883a 	mov	r18,r16
    4b58:	dc002c17 	ldw	r16,176(sp)
    4b5c:	00000306 	br	4b6c <___vfprintf_internal_r+0xf84>
    4b60:	8c7ffc04 	addi	r17,r17,-16
    4b64:	42000204 	addi	r8,r8,8
    4b68:	e440110e 	bge	fp,r17,4bb0 <___vfprintf_internal_r+0xfc8>
    4b6c:	18c00404 	addi	r3,r3,16
    4b70:	10800044 	addi	r2,r2,1
    4b74:	45000015 	stw	r20,0(r8)
    4b78:	47000115 	stw	fp,4(r8)
    4b7c:	d8c02015 	stw	r3,128(sp)
    4b80:	d8801f15 	stw	r2,124(sp)
    4b84:	98bff60e 	bge	r19,r2,4b60 <__alt_data_end+0xff004b60>
    4b88:	d9801e04 	addi	r6,sp,120
    4b8c:	b80b883a 	mov	r5,r23
    4b90:	8009883a 	mov	r4,r16
    4b94:	000a9840 	call	a984 <__sprint_r>
    4b98:	103d151e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4b9c:	8c7ffc04 	addi	r17,r17,-16
    4ba0:	d8c02017 	ldw	r3,128(sp)
    4ba4:	d8801f17 	ldw	r2,124(sp)
    4ba8:	da000404 	addi	r8,sp,16
    4bac:	e47fef16 	blt	fp,r17,4b6c <__alt_data_end+0xff004b6c>
    4bb0:	9021883a 	mov	r16,r18
    4bb4:	a825883a 	mov	r18,r21
    4bb8:	b02b883a 	mov	r21,r22
    4bbc:	882d883a 	mov	r22,r17
    4bc0:	dc403017 	ldw	r17,192(sp)
    4bc4:	d9002b17 	ldw	r4,172(sp)
    4bc8:	1d87883a 	add	r3,r3,r22
    4bcc:	10800044 	addi	r2,r2,1
    4bd0:	41000015 	stw	r4,0(r8)
    4bd4:	45800115 	stw	r22,4(r8)
    4bd8:	d8c02015 	stw	r3,128(sp)
    4bdc:	d8801f15 	stw	r2,124(sp)
    4be0:	010001c4 	movi	r4,7
    4be4:	20818e16 	blt	r4,r2,5220 <___vfprintf_internal_r+0x1638>
    4be8:	42000204 	addi	r8,r8,8
    4bec:	003e3106 	br	44b4 <__alt_data_end+0xff0044b4>
    4bf0:	d9403317 	ldw	r5,204(sp)
    4bf4:	00800044 	movi	r2,1
    4bf8:	18c00044 	addi	r3,r3,1
    4bfc:	1141530e 	bge	r2,r5,514c <___vfprintf_internal_r+0x1564>
    4c00:	dc401f17 	ldw	r17,124(sp)
    4c04:	00800044 	movi	r2,1
    4c08:	40800115 	stw	r2,4(r8)
    4c0c:	8c400044 	addi	r17,r17,1
    4c10:	44000015 	stw	r16,0(r8)
    4c14:	d8c02015 	stw	r3,128(sp)
    4c18:	dc401f15 	stw	r17,124(sp)
    4c1c:	008001c4 	movi	r2,7
    4c20:	14416b16 	blt	r2,r17,51d0 <___vfprintf_internal_r+0x15e8>
    4c24:	42000204 	addi	r8,r8,8
    4c28:	d8803717 	ldw	r2,220(sp)
    4c2c:	d9003417 	ldw	r4,208(sp)
    4c30:	8c400044 	addi	r17,r17,1
    4c34:	10c7883a 	add	r3,r2,r3
    4c38:	40800115 	stw	r2,4(r8)
    4c3c:	41000015 	stw	r4,0(r8)
    4c40:	d8c02015 	stw	r3,128(sp)
    4c44:	dc401f15 	stw	r17,124(sp)
    4c48:	008001c4 	movi	r2,7
    4c4c:	14416916 	blt	r2,r17,51f4 <___vfprintf_internal_r+0x160c>
    4c50:	45800204 	addi	r22,r8,8
    4c54:	d9003617 	ldw	r4,216(sp)
    4c58:	d9403817 	ldw	r5,224(sp)
    4c5c:	000d883a 	mov	r6,zero
    4c60:	000f883a 	mov	r7,zero
    4c64:	d8c03c15 	stw	r3,240(sp)
    4c68:	000db600 	call	db60 <__eqdf2>
    4c6c:	d8c03c17 	ldw	r3,240(sp)
    4c70:	1000bc26 	beq	r2,zero,4f64 <___vfprintf_internal_r+0x137c>
    4c74:	d9403317 	ldw	r5,204(sp)
    4c78:	84000044 	addi	r16,r16,1
    4c7c:	8c400044 	addi	r17,r17,1
    4c80:	28bfffc4 	addi	r2,r5,-1
    4c84:	1887883a 	add	r3,r3,r2
    4c88:	b0800115 	stw	r2,4(r22)
    4c8c:	b4000015 	stw	r16,0(r22)
    4c90:	d8c02015 	stw	r3,128(sp)
    4c94:	dc401f15 	stw	r17,124(sp)
    4c98:	008001c4 	movi	r2,7
    4c9c:	14414316 	blt	r2,r17,51ac <___vfprintf_internal_r+0x15c4>
    4ca0:	b5800204 	addi	r22,r22,8
    4ca4:	d9003a17 	ldw	r4,232(sp)
    4ca8:	df0022c4 	addi	fp,sp,139
    4cac:	8c400044 	addi	r17,r17,1
    4cb0:	20c7883a 	add	r3,r4,r3
    4cb4:	b7000015 	stw	fp,0(r22)
    4cb8:	b1000115 	stw	r4,4(r22)
    4cbc:	d8c02015 	stw	r3,128(sp)
    4cc0:	dc401f15 	stw	r17,124(sp)
    4cc4:	008001c4 	movi	r2,7
    4cc8:	14400e16 	blt	r2,r17,4d04 <___vfprintf_internal_r+0x111c>
    4ccc:	b2000204 	addi	r8,r22,8
    4cd0:	003e3a06 	br	45bc <__alt_data_end+0xff0045bc>
    4cd4:	01000074 	movhi	r4,1
    4cd8:	21088e84 	addi	r4,r4,8762
    4cdc:	d9002b15 	stw	r4,172(sp)
    4ce0:	d9002b17 	ldw	r4,172(sp)
    4ce4:	1c07883a 	add	r3,r3,r16
    4ce8:	44000115 	stw	r16,4(r8)
    4cec:	41000015 	stw	r4,0(r8)
    4cf0:	10800044 	addi	r2,r2,1
    4cf4:	d8c02015 	stw	r3,128(sp)
    4cf8:	d8801f15 	stw	r2,124(sp)
    4cfc:	010001c4 	movi	r4,7
    4d00:	20be2d0e 	bge	r4,r2,45b8 <__alt_data_end+0xff0045b8>
    4d04:	d9002c17 	ldw	r4,176(sp)
    4d08:	d9801e04 	addi	r6,sp,120
    4d0c:	b80b883a 	mov	r5,r23
    4d10:	000a9840 	call	a984 <__sprint_r>
    4d14:	103cb61e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4d18:	d8c02017 	ldw	r3,128(sp)
    4d1c:	da000404 	addi	r8,sp,16
    4d20:	003e2606 	br	45bc <__alt_data_end+0xff0045bc>
    4d24:	d9002c17 	ldw	r4,176(sp)
    4d28:	d9801e04 	addi	r6,sp,120
    4d2c:	b80b883a 	mov	r5,r23
    4d30:	000a9840 	call	a984 <__sprint_r>
    4d34:	103e5d26 	beq	r2,zero,46ac <__alt_data_end+0xff0046ac>
    4d38:	003cad06 	br	3ff0 <__alt_data_end+0xff003ff0>
    4d3c:	d9002c17 	ldw	r4,176(sp)
    4d40:	d9801e04 	addi	r6,sp,120
    4d44:	b80b883a 	mov	r5,r23
    4d48:	000a9840 	call	a984 <__sprint_r>
    4d4c:	103ca81e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4d50:	d8c02017 	ldw	r3,128(sp)
    4d54:	da000404 	addi	r8,sp,16
    4d58:	003e0b06 	br	4588 <__alt_data_end+0xff004588>
    4d5c:	d9002c17 	ldw	r4,176(sp)
    4d60:	d9801e04 	addi	r6,sp,120
    4d64:	b80b883a 	mov	r5,r23
    4d68:	000a9840 	call	a984 <__sprint_r>
    4d6c:	103ca01e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4d70:	d8c02017 	ldw	r3,128(sp)
    4d74:	da000404 	addi	r8,sp,16
    4d78:	003dbd06 	br	4470 <__alt_data_end+0xff004470>
    4d7c:	d9002c17 	ldw	r4,176(sp)
    4d80:	d9801e04 	addi	r6,sp,120
    4d84:	b80b883a 	mov	r5,r23
    4d88:	000a9840 	call	a984 <__sprint_r>
    4d8c:	103c981e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4d90:	d8c02017 	ldw	r3,128(sp)
    4d94:	da000404 	addi	r8,sp,16
    4d98:	003dc306 	br	44a8 <__alt_data_end+0xff0044a8>
    4d9c:	d8802917 	ldw	r2,164(sp)
    4da0:	d8002785 	stb	zero,158(sp)
    4da4:	103f0616 	blt	r2,zero,49c0 <__alt_data_end+0xff0049c0>
    4da8:	00ffdfc4 	movi	r3,-129
    4dac:	9d84b03a 	or	r2,r19,r22
    4db0:	90e4703a 	and	r18,r18,r3
    4db4:	103c6b26 	beq	r2,zero,3f64 <__alt_data_end+0xff003f64>
    4db8:	0039883a 	mov	fp,zero
    4dbc:	003e7406 	br	4790 <__alt_data_end+0xff004790>
    4dc0:	9080040c 	andi	r2,r18,16
    4dc4:	1001b326 	beq	r2,zero,5494 <___vfprintf_internal_r+0x18ac>
    4dc8:	d9002d17 	ldw	r4,180(sp)
    4dcc:	d9402917 	ldw	r5,164(sp)
    4dd0:	d8002785 	stb	zero,158(sp)
    4dd4:	20800104 	addi	r2,r4,4
    4dd8:	24c00017 	ldw	r19,0(r4)
    4ddc:	002d883a 	mov	r22,zero
    4de0:	2801b516 	blt	r5,zero,54b8 <___vfprintf_internal_r+0x18d0>
    4de4:	00ffdfc4 	movi	r3,-129
    4de8:	d8802d15 	stw	r2,180(sp)
    4dec:	90e4703a 	and	r18,r18,r3
    4df0:	983d2726 	beq	r19,zero,4290 <__alt_data_end+0xff004290>
    4df4:	0039883a 	mov	fp,zero
    4df8:	003d2a06 	br	42a4 <__alt_data_end+0xff0042a4>
    4dfc:	dc402617 	ldw	r17,152(sp)
    4e00:	0441d30e 	bge	zero,r17,5550 <___vfprintf_internal_r+0x1968>
    4e04:	dc403217 	ldw	r17,200(sp)
    4e08:	d8803317 	ldw	r2,204(sp)
    4e0c:	1440010e 	bge	r2,r17,4e14 <___vfprintf_internal_r+0x122c>
    4e10:	1023883a 	mov	r17,r2
    4e14:	04400a0e 	bge	zero,r17,4e40 <___vfprintf_internal_r+0x1258>
    4e18:	d8801f17 	ldw	r2,124(sp)
    4e1c:	1c47883a 	add	r3,r3,r17
    4e20:	44000015 	stw	r16,0(r8)
    4e24:	10800044 	addi	r2,r2,1
    4e28:	44400115 	stw	r17,4(r8)
    4e2c:	d8c02015 	stw	r3,128(sp)
    4e30:	d8801f15 	stw	r2,124(sp)
    4e34:	010001c4 	movi	r4,7
    4e38:	20826516 	blt	r4,r2,57d0 <___vfprintf_internal_r+0x1be8>
    4e3c:	42000204 	addi	r8,r8,8
    4e40:	88026116 	blt	r17,zero,57c8 <___vfprintf_internal_r+0x1be0>
    4e44:	d9003217 	ldw	r4,200(sp)
    4e48:	2463c83a 	sub	r17,r4,r17
    4e4c:	04407b0e 	bge	zero,r17,503c <___vfprintf_internal_r+0x1454>
    4e50:	05800404 	movi	r22,16
    4e54:	d8801f17 	ldw	r2,124(sp)
    4e58:	b4419d0e 	bge	r22,r17,54d0 <___vfprintf_internal_r+0x18e8>
    4e5c:	01000074 	movhi	r4,1
    4e60:	21088e84 	addi	r4,r4,8762
    4e64:	d9002b15 	stw	r4,172(sp)
    4e68:	070001c4 	movi	fp,7
    4e6c:	dcc02c17 	ldw	r19,176(sp)
    4e70:	00000306 	br	4e80 <___vfprintf_internal_r+0x1298>
    4e74:	42000204 	addi	r8,r8,8
    4e78:	8c7ffc04 	addi	r17,r17,-16
    4e7c:	b441970e 	bge	r22,r17,54dc <___vfprintf_internal_r+0x18f4>
    4e80:	18c00404 	addi	r3,r3,16
    4e84:	10800044 	addi	r2,r2,1
    4e88:	45000015 	stw	r20,0(r8)
    4e8c:	45800115 	stw	r22,4(r8)
    4e90:	d8c02015 	stw	r3,128(sp)
    4e94:	d8801f15 	stw	r2,124(sp)
    4e98:	e0bff60e 	bge	fp,r2,4e74 <__alt_data_end+0xff004e74>
    4e9c:	d9801e04 	addi	r6,sp,120
    4ea0:	b80b883a 	mov	r5,r23
    4ea4:	9809883a 	mov	r4,r19
    4ea8:	000a9840 	call	a984 <__sprint_r>
    4eac:	103c501e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4eb0:	d8c02017 	ldw	r3,128(sp)
    4eb4:	d8801f17 	ldw	r2,124(sp)
    4eb8:	da000404 	addi	r8,sp,16
    4ebc:	003fee06 	br	4e78 <__alt_data_end+0xff004e78>
    4ec0:	d9002c17 	ldw	r4,176(sp)
    4ec4:	d9801e04 	addi	r6,sp,120
    4ec8:	b80b883a 	mov	r5,r23
    4ecc:	000a9840 	call	a984 <__sprint_r>
    4ed0:	103c471e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4ed4:	d8c02017 	ldw	r3,128(sp)
    4ed8:	df002787 	ldb	fp,158(sp)
    4edc:	da000404 	addi	r8,sp,16
    4ee0:	003d5606 	br	443c <__alt_data_end+0xff00443c>
    4ee4:	9080040c 	andi	r2,r18,16
    4ee8:	10016126 	beq	r2,zero,5470 <___vfprintf_internal_r+0x1888>
    4eec:	d8802d17 	ldw	r2,180(sp)
    4ef0:	14c00017 	ldw	r19,0(r2)
    4ef4:	10800104 	addi	r2,r2,4
    4ef8:	d8802d15 	stw	r2,180(sp)
    4efc:	982dd7fa 	srai	r22,r19,31
    4f00:	b005883a 	mov	r2,r22
    4f04:	003c8206 	br	4110 <__alt_data_end+0xff004110>
    4f08:	9080040c 	andi	r2,r18,16
    4f0c:	10003526 	beq	r2,zero,4fe4 <___vfprintf_internal_r+0x13fc>
    4f10:	d9402d17 	ldw	r5,180(sp)
    4f14:	d8c02917 	ldw	r3,164(sp)
    4f18:	d8002785 	stb	zero,158(sp)
    4f1c:	28800104 	addi	r2,r5,4
    4f20:	2cc00017 	ldw	r19,0(r5)
    4f24:	002d883a 	mov	r22,zero
    4f28:	18003716 	blt	r3,zero,5008 <___vfprintf_internal_r+0x1420>
    4f2c:	00ffdfc4 	movi	r3,-129
    4f30:	d8802d15 	stw	r2,180(sp)
    4f34:	90e4703a 	and	r18,r18,r3
    4f38:	0039883a 	mov	fp,zero
    4f3c:	983df326 	beq	r19,zero,470c <__alt_data_end+0xff00470c>
    4f40:	00800244 	movi	r2,9
    4f44:	14fc7b36 	bltu	r2,r19,4134 <__alt_data_end+0xff004134>
    4f48:	d8c02817 	ldw	r3,160(sp)
    4f4c:	dc001dc4 	addi	r16,sp,119
    4f50:	9cc00c04 	addi	r19,r19,48
    4f54:	1c07c83a 	sub	r3,r3,r16
    4f58:	dcc01dc5 	stb	r19,119(sp)
    4f5c:	d8c02e15 	stw	r3,184(sp)
    4f60:	003ce806 	br	4304 <__alt_data_end+0xff004304>
    4f64:	d8803317 	ldw	r2,204(sp)
    4f68:	143fffc4 	addi	r16,r2,-1
    4f6c:	043f4d0e 	bge	zero,r16,4ca4 <__alt_data_end+0xff004ca4>
    4f70:	07000404 	movi	fp,16
    4f74:	e400810e 	bge	fp,r16,517c <___vfprintf_internal_r+0x1594>
    4f78:	01400074 	movhi	r5,1
    4f7c:	29488e84 	addi	r5,r5,8762
    4f80:	d9402b15 	stw	r5,172(sp)
    4f84:	01c001c4 	movi	r7,7
    4f88:	dcc02c17 	ldw	r19,176(sp)
    4f8c:	00000306 	br	4f9c <___vfprintf_internal_r+0x13b4>
    4f90:	b5800204 	addi	r22,r22,8
    4f94:	843ffc04 	addi	r16,r16,-16
    4f98:	e4007b0e 	bge	fp,r16,5188 <___vfprintf_internal_r+0x15a0>
    4f9c:	18c00404 	addi	r3,r3,16
    4fa0:	8c400044 	addi	r17,r17,1
    4fa4:	b5000015 	stw	r20,0(r22)
    4fa8:	b7000115 	stw	fp,4(r22)
    4fac:	d8c02015 	stw	r3,128(sp)
    4fb0:	dc401f15 	stw	r17,124(sp)
    4fb4:	3c7ff60e 	bge	r7,r17,4f90 <__alt_data_end+0xff004f90>
    4fb8:	d9801e04 	addi	r6,sp,120
    4fbc:	b80b883a 	mov	r5,r23
    4fc0:	9809883a 	mov	r4,r19
    4fc4:	d9c03c15 	stw	r7,240(sp)
    4fc8:	000a9840 	call	a984 <__sprint_r>
    4fcc:	d9c03c17 	ldw	r7,240(sp)
    4fd0:	103c071e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    4fd4:	d8c02017 	ldw	r3,128(sp)
    4fd8:	dc401f17 	ldw	r17,124(sp)
    4fdc:	dd800404 	addi	r22,sp,16
    4fe0:	003fec06 	br	4f94 <__alt_data_end+0xff004f94>
    4fe4:	9080100c 	andi	r2,r18,64
    4fe8:	d8002785 	stb	zero,158(sp)
    4fec:	10010e26 	beq	r2,zero,5428 <___vfprintf_internal_r+0x1840>
    4ff0:	d9002d17 	ldw	r4,180(sp)
    4ff4:	d9402917 	ldw	r5,164(sp)
    4ff8:	002d883a 	mov	r22,zero
    4ffc:	20800104 	addi	r2,r4,4
    5000:	24c0000b 	ldhu	r19,0(r4)
    5004:	283fc90e 	bge	r5,zero,4f2c <__alt_data_end+0xff004f2c>
    5008:	d8802d15 	stw	r2,180(sp)
    500c:	0039883a 	mov	fp,zero
    5010:	9d84b03a 	or	r2,r19,r22
    5014:	103c461e 	bne	r2,zero,4130 <__alt_data_end+0xff004130>
    5018:	00800044 	movi	r2,1
    501c:	003e6c06 	br	49d0 <__alt_data_end+0xff0049d0>
    5020:	d9002c17 	ldw	r4,176(sp)
    5024:	d9801e04 	addi	r6,sp,120
    5028:	b80b883a 	mov	r5,r23
    502c:	000a9840 	call	a984 <__sprint_r>
    5030:	103bef1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5034:	d8c02017 	ldw	r3,128(sp)
    5038:	da000404 	addi	r8,sp,16
    503c:	d9003217 	ldw	r4,200(sp)
    5040:	d8802617 	ldw	r2,152(sp)
    5044:	d9403317 	ldw	r5,204(sp)
    5048:	8123883a 	add	r17,r16,r4
    504c:	11400216 	blt	r2,r5,5058 <___vfprintf_internal_r+0x1470>
    5050:	9100004c 	andi	r4,r18,1
    5054:	20000d26 	beq	r4,zero,508c <___vfprintf_internal_r+0x14a4>
    5058:	d9003717 	ldw	r4,220(sp)
    505c:	d9403417 	ldw	r5,208(sp)
    5060:	1907883a 	add	r3,r3,r4
    5064:	d9001f17 	ldw	r4,124(sp)
    5068:	41400015 	stw	r5,0(r8)
    506c:	d9403717 	ldw	r5,220(sp)
    5070:	21000044 	addi	r4,r4,1
    5074:	d8c02015 	stw	r3,128(sp)
    5078:	41400115 	stw	r5,4(r8)
    507c:	d9001f15 	stw	r4,124(sp)
    5080:	014001c4 	movi	r5,7
    5084:	2901e816 	blt	r5,r4,5828 <___vfprintf_internal_r+0x1c40>
    5088:	42000204 	addi	r8,r8,8
    508c:	d9003317 	ldw	r4,204(sp)
    5090:	8121883a 	add	r16,r16,r4
    5094:	2085c83a 	sub	r2,r4,r2
    5098:	8461c83a 	sub	r16,r16,r17
    509c:	1400010e 	bge	r2,r16,50a4 <___vfprintf_internal_r+0x14bc>
    50a0:	1021883a 	mov	r16,r2
    50a4:	04000a0e 	bge	zero,r16,50d0 <___vfprintf_internal_r+0x14e8>
    50a8:	d9001f17 	ldw	r4,124(sp)
    50ac:	1c07883a 	add	r3,r3,r16
    50b0:	44400015 	stw	r17,0(r8)
    50b4:	21000044 	addi	r4,r4,1
    50b8:	44000115 	stw	r16,4(r8)
    50bc:	d8c02015 	stw	r3,128(sp)
    50c0:	d9001f15 	stw	r4,124(sp)
    50c4:	014001c4 	movi	r5,7
    50c8:	2901fb16 	blt	r5,r4,58b8 <___vfprintf_internal_r+0x1cd0>
    50cc:	42000204 	addi	r8,r8,8
    50d0:	8001f716 	blt	r16,zero,58b0 <___vfprintf_internal_r+0x1cc8>
    50d4:	1421c83a 	sub	r16,r2,r16
    50d8:	043d380e 	bge	zero,r16,45bc <__alt_data_end+0xff0045bc>
    50dc:	04400404 	movi	r17,16
    50e0:	d8801f17 	ldw	r2,124(sp)
    50e4:	8c3efb0e 	bge	r17,r16,4cd4 <__alt_data_end+0xff004cd4>
    50e8:	01400074 	movhi	r5,1
    50ec:	29488e84 	addi	r5,r5,8762
    50f0:	d9402b15 	stw	r5,172(sp)
    50f4:	058001c4 	movi	r22,7
    50f8:	dcc02c17 	ldw	r19,176(sp)
    50fc:	00000306 	br	510c <___vfprintf_internal_r+0x1524>
    5100:	42000204 	addi	r8,r8,8
    5104:	843ffc04 	addi	r16,r16,-16
    5108:	8c3ef50e 	bge	r17,r16,4ce0 <__alt_data_end+0xff004ce0>
    510c:	18c00404 	addi	r3,r3,16
    5110:	10800044 	addi	r2,r2,1
    5114:	45000015 	stw	r20,0(r8)
    5118:	44400115 	stw	r17,4(r8)
    511c:	d8c02015 	stw	r3,128(sp)
    5120:	d8801f15 	stw	r2,124(sp)
    5124:	b0bff60e 	bge	r22,r2,5100 <__alt_data_end+0xff005100>
    5128:	d9801e04 	addi	r6,sp,120
    512c:	b80b883a 	mov	r5,r23
    5130:	9809883a 	mov	r4,r19
    5134:	000a9840 	call	a984 <__sprint_r>
    5138:	103bad1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    513c:	d8c02017 	ldw	r3,128(sp)
    5140:	d8801f17 	ldw	r2,124(sp)
    5144:	da000404 	addi	r8,sp,16
    5148:	003fee06 	br	5104 <__alt_data_end+0xff005104>
    514c:	9088703a 	and	r4,r18,r2
    5150:	203eab1e 	bne	r4,zero,4c00 <__alt_data_end+0xff004c00>
    5154:	dc401f17 	ldw	r17,124(sp)
    5158:	40800115 	stw	r2,4(r8)
    515c:	44000015 	stw	r16,0(r8)
    5160:	8c400044 	addi	r17,r17,1
    5164:	d8c02015 	stw	r3,128(sp)
    5168:	dc401f15 	stw	r17,124(sp)
    516c:	008001c4 	movi	r2,7
    5170:	14400e16 	blt	r2,r17,51ac <___vfprintf_internal_r+0x15c4>
    5174:	45800204 	addi	r22,r8,8
    5178:	003eca06 	br	4ca4 <__alt_data_end+0xff004ca4>
    517c:	01000074 	movhi	r4,1
    5180:	21088e84 	addi	r4,r4,8762
    5184:	d9002b15 	stw	r4,172(sp)
    5188:	d8802b17 	ldw	r2,172(sp)
    518c:	1c07883a 	add	r3,r3,r16
    5190:	8c400044 	addi	r17,r17,1
    5194:	b0800015 	stw	r2,0(r22)
    5198:	b4000115 	stw	r16,4(r22)
    519c:	d8c02015 	stw	r3,128(sp)
    51a0:	dc401f15 	stw	r17,124(sp)
    51a4:	008001c4 	movi	r2,7
    51a8:	147ebd0e 	bge	r2,r17,4ca0 <__alt_data_end+0xff004ca0>
    51ac:	d9002c17 	ldw	r4,176(sp)
    51b0:	d9801e04 	addi	r6,sp,120
    51b4:	b80b883a 	mov	r5,r23
    51b8:	000a9840 	call	a984 <__sprint_r>
    51bc:	103b8c1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    51c0:	d8c02017 	ldw	r3,128(sp)
    51c4:	dc401f17 	ldw	r17,124(sp)
    51c8:	dd800404 	addi	r22,sp,16
    51cc:	003eb506 	br	4ca4 <__alt_data_end+0xff004ca4>
    51d0:	d9002c17 	ldw	r4,176(sp)
    51d4:	d9801e04 	addi	r6,sp,120
    51d8:	b80b883a 	mov	r5,r23
    51dc:	000a9840 	call	a984 <__sprint_r>
    51e0:	103b831e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    51e4:	d8c02017 	ldw	r3,128(sp)
    51e8:	dc401f17 	ldw	r17,124(sp)
    51ec:	da000404 	addi	r8,sp,16
    51f0:	003e8d06 	br	4c28 <__alt_data_end+0xff004c28>
    51f4:	d9002c17 	ldw	r4,176(sp)
    51f8:	d9801e04 	addi	r6,sp,120
    51fc:	b80b883a 	mov	r5,r23
    5200:	000a9840 	call	a984 <__sprint_r>
    5204:	103b7a1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5208:	d8c02017 	ldw	r3,128(sp)
    520c:	dc401f17 	ldw	r17,124(sp)
    5210:	dd800404 	addi	r22,sp,16
    5214:	003e8f06 	br	4c54 <__alt_data_end+0xff004c54>
    5218:	0027883a 	mov	r19,zero
    521c:	003f4a06 	br	4f48 <__alt_data_end+0xff004f48>
    5220:	d9002c17 	ldw	r4,176(sp)
    5224:	d9801e04 	addi	r6,sp,120
    5228:	b80b883a 	mov	r5,r23
    522c:	000a9840 	call	a984 <__sprint_r>
    5230:	103b6f1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5234:	d8c02017 	ldw	r3,128(sp)
    5238:	da000404 	addi	r8,sp,16
    523c:	003c9d06 	br	44b4 <__alt_data_end+0xff0044b4>
    5240:	04e7c83a 	sub	r19,zero,r19
    5244:	9804c03a 	cmpne	r2,r19,zero
    5248:	05adc83a 	sub	r22,zero,r22
    524c:	b0adc83a 	sub	r22,r22,r2
    5250:	d8802917 	ldw	r2,164(sp)
    5254:	07000b44 	movi	fp,45
    5258:	df002785 	stb	fp,158(sp)
    525c:	10017b16 	blt	r2,zero,584c <___vfprintf_internal_r+0x1c64>
    5260:	00bfdfc4 	movi	r2,-129
    5264:	90a4703a 	and	r18,r18,r2
    5268:	003bb106 	br	4130 <__alt_data_end+0xff004130>
    526c:	d9003617 	ldw	r4,216(sp)
    5270:	d9403817 	ldw	r5,224(sp)
    5274:	da003d15 	stw	r8,244(sp)
    5278:	000a5fc0 	call	a5fc <__fpclassifyd>
    527c:	da003d17 	ldw	r8,244(sp)
    5280:	1000f026 	beq	r2,zero,5644 <___vfprintf_internal_r+0x1a5c>
    5284:	d9002917 	ldw	r4,164(sp)
    5288:	05bff7c4 	movi	r22,-33
    528c:	00bfffc4 	movi	r2,-1
    5290:	8dac703a 	and	r22,r17,r22
    5294:	20820026 	beq	r4,r2,5a98 <___vfprintf_internal_r+0x1eb0>
    5298:	008011c4 	movi	r2,71
    529c:	b081f726 	beq	r22,r2,5a7c <___vfprintf_internal_r+0x1e94>
    52a0:	d9003817 	ldw	r4,224(sp)
    52a4:	90c04014 	ori	r3,r18,256
    52a8:	d8c02b15 	stw	r3,172(sp)
    52ac:	20021516 	blt	r4,zero,5b04 <___vfprintf_internal_r+0x1f1c>
    52b0:	dcc03817 	ldw	r19,224(sp)
    52b4:	d8002a05 	stb	zero,168(sp)
    52b8:	00801984 	movi	r2,102
    52bc:	8881f926 	beq	r17,r2,5aa4 <___vfprintf_internal_r+0x1ebc>
    52c0:	00801184 	movi	r2,70
    52c4:	88821c26 	beq	r17,r2,5b38 <___vfprintf_internal_r+0x1f50>
    52c8:	00801144 	movi	r2,69
    52cc:	b081ef26 	beq	r22,r2,5a8c <___vfprintf_internal_r+0x1ea4>
    52d0:	d8c02917 	ldw	r3,164(sp)
    52d4:	d8802104 	addi	r2,sp,132
    52d8:	d8800315 	stw	r2,12(sp)
    52dc:	d9403617 	ldw	r5,216(sp)
    52e0:	d8802504 	addi	r2,sp,148
    52e4:	d9002c17 	ldw	r4,176(sp)
    52e8:	d8800215 	stw	r2,8(sp)
    52ec:	d8802604 	addi	r2,sp,152
    52f0:	d8c00015 	stw	r3,0(sp)
    52f4:	d8800115 	stw	r2,4(sp)
    52f8:	01c00084 	movi	r7,2
    52fc:	980d883a 	mov	r6,r19
    5300:	d8c03c15 	stw	r3,240(sp)
    5304:	da003d15 	stw	r8,244(sp)
    5308:	000620c0 	call	620c <_dtoa_r>
    530c:	1021883a 	mov	r16,r2
    5310:	008019c4 	movi	r2,103
    5314:	d8c03c17 	ldw	r3,240(sp)
    5318:	da003d17 	ldw	r8,244(sp)
    531c:	88817126 	beq	r17,r2,58e4 <___vfprintf_internal_r+0x1cfc>
    5320:	008011c4 	movi	r2,71
    5324:	88829226 	beq	r17,r2,5d70 <___vfprintf_internal_r+0x2188>
    5328:	80f9883a 	add	fp,r16,r3
    532c:	d9003617 	ldw	r4,216(sp)
    5330:	000d883a 	mov	r6,zero
    5334:	000f883a 	mov	r7,zero
    5338:	980b883a 	mov	r5,r19
    533c:	da003d15 	stw	r8,244(sp)
    5340:	000db600 	call	db60 <__eqdf2>
    5344:	da003d17 	ldw	r8,244(sp)
    5348:	10018d26 	beq	r2,zero,5980 <___vfprintf_internal_r+0x1d98>
    534c:	d8802117 	ldw	r2,132(sp)
    5350:	1700062e 	bgeu	r2,fp,536c <___vfprintf_internal_r+0x1784>
    5354:	01000c04 	movi	r4,48
    5358:	10c00044 	addi	r3,r2,1
    535c:	d8c02115 	stw	r3,132(sp)
    5360:	11000005 	stb	r4,0(r2)
    5364:	d8802117 	ldw	r2,132(sp)
    5368:	173ffb36 	bltu	r2,fp,5358 <__alt_data_end+0xff005358>
    536c:	1405c83a 	sub	r2,r2,r16
    5370:	d8803315 	stw	r2,204(sp)
    5374:	008011c4 	movi	r2,71
    5378:	b0817626 	beq	r22,r2,5954 <___vfprintf_internal_r+0x1d6c>
    537c:	00801944 	movi	r2,101
    5380:	1442810e 	bge	r2,r17,5d88 <___vfprintf_internal_r+0x21a0>
    5384:	d8c02617 	ldw	r3,152(sp)
    5388:	00801984 	movi	r2,102
    538c:	d8c03215 	stw	r3,200(sp)
    5390:	8881fe26 	beq	r17,r2,5b8c <___vfprintf_internal_r+0x1fa4>
    5394:	d8c03217 	ldw	r3,200(sp)
    5398:	d9003317 	ldw	r4,204(sp)
    539c:	1901dd16 	blt	r3,r4,5b14 <___vfprintf_internal_r+0x1f2c>
    53a0:	9480004c 	andi	r18,r18,1
    53a4:	90022b1e 	bne	r18,zero,5c54 <___vfprintf_internal_r+0x206c>
    53a8:	1805883a 	mov	r2,r3
    53ac:	18028016 	blt	r3,zero,5db0 <___vfprintf_internal_r+0x21c8>
    53b0:	d8c03217 	ldw	r3,200(sp)
    53b4:	044019c4 	movi	r17,103
    53b8:	d8c02e15 	stw	r3,184(sp)
    53bc:	df002a07 	ldb	fp,168(sp)
    53c0:	e001531e 	bne	fp,zero,5910 <___vfprintf_internal_r+0x1d28>
    53c4:	df002783 	ldbu	fp,158(sp)
    53c8:	d8802a15 	stw	r2,168(sp)
    53cc:	dc802b17 	ldw	r18,172(sp)
    53d0:	d8002915 	stw	zero,164(sp)
    53d4:	003bd106 	br	431c <__alt_data_end+0xff00431c>
    53d8:	d8802d17 	ldw	r2,180(sp)
    53dc:	d8c02d17 	ldw	r3,180(sp)
    53e0:	d9002d17 	ldw	r4,180(sp)
    53e4:	10800017 	ldw	r2,0(r2)
    53e8:	18c00117 	ldw	r3,4(r3)
    53ec:	21000204 	addi	r4,r4,8
    53f0:	d8803615 	stw	r2,216(sp)
    53f4:	d8c03815 	stw	r3,224(sp)
    53f8:	d9002d15 	stw	r4,180(sp)
    53fc:	003b7506 	br	41d4 <__alt_data_end+0xff0041d4>
    5400:	ac400007 	ldb	r17,0(r21)
    5404:	003a5906 	br	3d6c <__alt_data_end+0xff003d6c>
    5408:	9080100c 	andi	r2,r18,64
    540c:	1000a826 	beq	r2,zero,56b0 <___vfprintf_internal_r+0x1ac8>
    5410:	d9002d17 	ldw	r4,180(sp)
    5414:	002d883a 	mov	r22,zero
    5418:	24c0000b 	ldhu	r19,0(r4)
    541c:	21000104 	addi	r4,r4,4
    5420:	d9002d15 	stw	r4,180(sp)
    5424:	003ccb06 	br	4754 <__alt_data_end+0xff004754>
    5428:	d8c02d17 	ldw	r3,180(sp)
    542c:	d9002917 	ldw	r4,164(sp)
    5430:	002d883a 	mov	r22,zero
    5434:	18800104 	addi	r2,r3,4
    5438:	1cc00017 	ldw	r19,0(r3)
    543c:	203ebb0e 	bge	r4,zero,4f2c <__alt_data_end+0xff004f2c>
    5440:	003ef106 	br	5008 <__alt_data_end+0xff005008>
    5444:	9080040c 	andi	r2,r18,16
    5448:	1000921e 	bne	r2,zero,5694 <___vfprintf_internal_r+0x1aac>
    544c:	9480100c 	andi	r18,r18,64
    5450:	90013926 	beq	r18,zero,5938 <___vfprintf_internal_r+0x1d50>
    5454:	d9002d17 	ldw	r4,180(sp)
    5458:	d9402f17 	ldw	r5,188(sp)
    545c:	20800017 	ldw	r2,0(r4)
    5460:	21000104 	addi	r4,r4,4
    5464:	d9002d15 	stw	r4,180(sp)
    5468:	1140000d 	sth	r5,0(r2)
    546c:	003a1606 	br	3cc8 <__alt_data_end+0xff003cc8>
    5470:	9080100c 	andi	r2,r18,64
    5474:	10008026 	beq	r2,zero,5678 <___vfprintf_internal_r+0x1a90>
    5478:	d8c02d17 	ldw	r3,180(sp)
    547c:	1cc0000f 	ldh	r19,0(r3)
    5480:	18c00104 	addi	r3,r3,4
    5484:	d8c02d15 	stw	r3,180(sp)
    5488:	982dd7fa 	srai	r22,r19,31
    548c:	b005883a 	mov	r2,r22
    5490:	003b1f06 	br	4110 <__alt_data_end+0xff004110>
    5494:	9080100c 	andi	r2,r18,64
    5498:	d8002785 	stb	zero,158(sp)
    549c:	10008a1e 	bne	r2,zero,56c8 <___vfprintf_internal_r+0x1ae0>
    54a0:	d9402d17 	ldw	r5,180(sp)
    54a4:	d8c02917 	ldw	r3,164(sp)
    54a8:	002d883a 	mov	r22,zero
    54ac:	28800104 	addi	r2,r5,4
    54b0:	2cc00017 	ldw	r19,0(r5)
    54b4:	183e4b0e 	bge	r3,zero,4de4 <__alt_data_end+0xff004de4>
    54b8:	9d86b03a 	or	r3,r19,r22
    54bc:	d8802d15 	stw	r2,180(sp)
    54c0:	183e4c1e 	bne	r3,zero,4df4 <__alt_data_end+0xff004df4>
    54c4:	0039883a 	mov	fp,zero
    54c8:	0005883a 	mov	r2,zero
    54cc:	003d4006 	br	49d0 <__alt_data_end+0xff0049d0>
    54d0:	01400074 	movhi	r5,1
    54d4:	29488e84 	addi	r5,r5,8762
    54d8:	d9402b15 	stw	r5,172(sp)
    54dc:	d9402b17 	ldw	r5,172(sp)
    54e0:	1c47883a 	add	r3,r3,r17
    54e4:	10800044 	addi	r2,r2,1
    54e8:	41400015 	stw	r5,0(r8)
    54ec:	44400115 	stw	r17,4(r8)
    54f0:	d8c02015 	stw	r3,128(sp)
    54f4:	d8801f15 	stw	r2,124(sp)
    54f8:	010001c4 	movi	r4,7
    54fc:	20bec816 	blt	r4,r2,5020 <__alt_data_end+0xff005020>
    5500:	42000204 	addi	r8,r8,8
    5504:	003ecd06 	br	503c <__alt_data_end+0xff00503c>
    5508:	d9002917 	ldw	r4,164(sp)
    550c:	d8002785 	stb	zero,158(sp)
    5510:	203d2d16 	blt	r4,zero,49c8 <__alt_data_end+0xff0049c8>
    5514:	00bfdfc4 	movi	r2,-129
    5518:	90a4703a 	and	r18,r18,r2
    551c:	003a9106 	br	3f64 <__alt_data_end+0xff003f64>
    5520:	01000074 	movhi	r4,1
    5524:	21088e84 	addi	r4,r4,8762
    5528:	d9002b15 	stw	r4,172(sp)
    552c:	003c0c06 	br	4560 <__alt_data_end+0xff004560>
    5530:	d9002c17 	ldw	r4,176(sp)
    5534:	d9801e04 	addi	r6,sp,120
    5538:	b80b883a 	mov	r5,r23
    553c:	000a9840 	call	a984 <__sprint_r>
    5540:	103aab1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5544:	d8c02017 	ldw	r3,128(sp)
    5548:	da000404 	addi	r8,sp,16
    554c:	003d4106 	br	4a54 <__alt_data_end+0xff004a54>
    5550:	d8801f17 	ldw	r2,124(sp)
    5554:	01400074 	movhi	r5,1
    5558:	01000044 	movi	r4,1
    555c:	18c00044 	addi	r3,r3,1
    5560:	10800044 	addi	r2,r2,1
    5564:	29488e04 	addi	r5,r5,8760
    5568:	41000115 	stw	r4,4(r8)
    556c:	41400015 	stw	r5,0(r8)
    5570:	d8c02015 	stw	r3,128(sp)
    5574:	d8801f15 	stw	r2,124(sp)
    5578:	010001c4 	movi	r4,7
    557c:	20805c16 	blt	r4,r2,56f0 <___vfprintf_internal_r+0x1b08>
    5580:	42000204 	addi	r8,r8,8
    5584:	8800041e 	bne	r17,zero,5598 <___vfprintf_internal_r+0x19b0>
    5588:	d8803317 	ldw	r2,204(sp)
    558c:	1000021e 	bne	r2,zero,5598 <___vfprintf_internal_r+0x19b0>
    5590:	9080004c 	andi	r2,r18,1
    5594:	103c0926 	beq	r2,zero,45bc <__alt_data_end+0xff0045bc>
    5598:	d9003717 	ldw	r4,220(sp)
    559c:	d8801f17 	ldw	r2,124(sp)
    55a0:	d9403417 	ldw	r5,208(sp)
    55a4:	20c7883a 	add	r3,r4,r3
    55a8:	10800044 	addi	r2,r2,1
    55ac:	41000115 	stw	r4,4(r8)
    55b0:	41400015 	stw	r5,0(r8)
    55b4:	d8c02015 	stw	r3,128(sp)
    55b8:	d8801f15 	stw	r2,124(sp)
    55bc:	010001c4 	movi	r4,7
    55c0:	20812116 	blt	r4,r2,5a48 <___vfprintf_internal_r+0x1e60>
    55c4:	42000204 	addi	r8,r8,8
    55c8:	0463c83a 	sub	r17,zero,r17
    55cc:	0440730e 	bge	zero,r17,579c <___vfprintf_internal_r+0x1bb4>
    55d0:	05800404 	movi	r22,16
    55d4:	b440860e 	bge	r22,r17,57f0 <___vfprintf_internal_r+0x1c08>
    55d8:	01400074 	movhi	r5,1
    55dc:	29488e84 	addi	r5,r5,8762
    55e0:	d9402b15 	stw	r5,172(sp)
    55e4:	070001c4 	movi	fp,7
    55e8:	dcc02c17 	ldw	r19,176(sp)
    55ec:	00000306 	br	55fc <___vfprintf_internal_r+0x1a14>
    55f0:	42000204 	addi	r8,r8,8
    55f4:	8c7ffc04 	addi	r17,r17,-16
    55f8:	b440800e 	bge	r22,r17,57fc <___vfprintf_internal_r+0x1c14>
    55fc:	18c00404 	addi	r3,r3,16
    5600:	10800044 	addi	r2,r2,1
    5604:	45000015 	stw	r20,0(r8)
    5608:	45800115 	stw	r22,4(r8)
    560c:	d8c02015 	stw	r3,128(sp)
    5610:	d8801f15 	stw	r2,124(sp)
    5614:	e0bff60e 	bge	fp,r2,55f0 <__alt_data_end+0xff0055f0>
    5618:	d9801e04 	addi	r6,sp,120
    561c:	b80b883a 	mov	r5,r23
    5620:	9809883a 	mov	r4,r19
    5624:	000a9840 	call	a984 <__sprint_r>
    5628:	103a711e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    562c:	d8c02017 	ldw	r3,128(sp)
    5630:	d8801f17 	ldw	r2,124(sp)
    5634:	da000404 	addi	r8,sp,16
    5638:	003fee06 	br	55f4 <__alt_data_end+0xff0055f4>
    563c:	00bfffc4 	movi	r2,-1
    5640:	003a6f06 	br	4000 <__alt_data_end+0xff004000>
    5644:	008011c4 	movi	r2,71
    5648:	1440b816 	blt	r2,r17,592c <___vfprintf_internal_r+0x1d44>
    564c:	04000074 	movhi	r16,1
    5650:	84088004 	addi	r16,r16,8704
    5654:	00c000c4 	movi	r3,3
    5658:	00bfdfc4 	movi	r2,-129
    565c:	d8c02a15 	stw	r3,168(sp)
    5660:	90a4703a 	and	r18,r18,r2
    5664:	df002783 	ldbu	fp,158(sp)
    5668:	d8c02e15 	stw	r3,184(sp)
    566c:	d8002915 	stw	zero,164(sp)
    5670:	d8003215 	stw	zero,200(sp)
    5674:	003b2906 	br	431c <__alt_data_end+0xff00431c>
    5678:	d9002d17 	ldw	r4,180(sp)
    567c:	24c00017 	ldw	r19,0(r4)
    5680:	21000104 	addi	r4,r4,4
    5684:	d9002d15 	stw	r4,180(sp)
    5688:	982dd7fa 	srai	r22,r19,31
    568c:	b005883a 	mov	r2,r22
    5690:	003a9f06 	br	4110 <__alt_data_end+0xff004110>
    5694:	d9402d17 	ldw	r5,180(sp)
    5698:	d8c02f17 	ldw	r3,188(sp)
    569c:	28800017 	ldw	r2,0(r5)
    56a0:	29400104 	addi	r5,r5,4
    56a4:	d9402d15 	stw	r5,180(sp)
    56a8:	10c00015 	stw	r3,0(r2)
    56ac:	00398606 	br	3cc8 <__alt_data_end+0xff003cc8>
    56b0:	d9402d17 	ldw	r5,180(sp)
    56b4:	002d883a 	mov	r22,zero
    56b8:	2cc00017 	ldw	r19,0(r5)
    56bc:	29400104 	addi	r5,r5,4
    56c0:	d9402d15 	stw	r5,180(sp)
    56c4:	003c2306 	br	4754 <__alt_data_end+0xff004754>
    56c8:	d8c02d17 	ldw	r3,180(sp)
    56cc:	d9002917 	ldw	r4,164(sp)
    56d0:	002d883a 	mov	r22,zero
    56d4:	18800104 	addi	r2,r3,4
    56d8:	1cc0000b 	ldhu	r19,0(r3)
    56dc:	203dc10e 	bge	r4,zero,4de4 <__alt_data_end+0xff004de4>
    56e0:	003f7506 	br	54b8 <__alt_data_end+0xff0054b8>
    56e4:	04000074 	movhi	r16,1
    56e8:	84087e04 	addi	r16,r16,8696
    56ec:	003acc06 	br	4220 <__alt_data_end+0xff004220>
    56f0:	d9002c17 	ldw	r4,176(sp)
    56f4:	d9801e04 	addi	r6,sp,120
    56f8:	b80b883a 	mov	r5,r23
    56fc:	000a9840 	call	a984 <__sprint_r>
    5700:	103a3b1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5704:	dc402617 	ldw	r17,152(sp)
    5708:	d8c02017 	ldw	r3,128(sp)
    570c:	da000404 	addi	r8,sp,16
    5710:	003f9c06 	br	5584 <__alt_data_end+0xff005584>
    5714:	ac400043 	ldbu	r17,1(r21)
    5718:	94800814 	ori	r18,r18,32
    571c:	ad400044 	addi	r21,r21,1
    5720:	8c403fcc 	andi	r17,r17,255
    5724:	8c40201c 	xori	r17,r17,128
    5728:	8c7fe004 	addi	r17,r17,-128
    572c:	00398f06 	br	3d6c <__alt_data_end+0xff003d6c>
    5730:	d8c02d15 	stw	r3,180(sp)
    5734:	0039883a 	mov	fp,zero
    5738:	003e3506 	br	5010 <__alt_data_end+0xff005010>
    573c:	d9002c17 	ldw	r4,176(sp)
    5740:	d9801e04 	addi	r6,sp,120
    5744:	b80b883a 	mov	r5,r23
    5748:	000a9840 	call	a984 <__sprint_r>
    574c:	103a281e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5750:	d8c02017 	ldw	r3,128(sp)
    5754:	da000404 	addi	r8,sp,16
    5758:	003cd006 	br	4a9c <__alt_data_end+0xff004a9c>
    575c:	8009883a 	mov	r4,r16
    5760:	da003d15 	stw	r8,244(sp)
    5764:	0003b500 	call	3b50 <strlen>
    5768:	d8802e15 	stw	r2,184(sp)
    576c:	da003d17 	ldw	r8,244(sp)
    5770:	103c340e 	bge	r2,zero,4844 <__alt_data_end+0xff004844>
    5774:	0005883a 	mov	r2,zero
    5778:	003c3206 	br	4844 <__alt_data_end+0xff004844>
    577c:	d9002c17 	ldw	r4,176(sp)
    5780:	d9801e04 	addi	r6,sp,120
    5784:	b80b883a 	mov	r5,r23
    5788:	000a9840 	call	a984 <__sprint_r>
    578c:	103a181e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5790:	d8c02017 	ldw	r3,128(sp)
    5794:	d8801f17 	ldw	r2,124(sp)
    5798:	da000404 	addi	r8,sp,16
    579c:	d9403317 	ldw	r5,204(sp)
    57a0:	10800044 	addi	r2,r2,1
    57a4:	44000015 	stw	r16,0(r8)
    57a8:	28c7883a 	add	r3,r5,r3
    57ac:	003b7d06 	br	45a4 <__alt_data_end+0xff0045a4>
    57b0:	01000074 	movhi	r4,1
    57b4:	21089284 	addi	r4,r4,8778
    57b8:	d9003515 	stw	r4,212(sp)
    57bc:	003b1406 	br	4410 <__alt_data_end+0xff004410>
    57c0:	013fffc4 	movi	r4,-1
    57c4:	003a3506 	br	409c <__alt_data_end+0xff00409c>
    57c8:	0023883a 	mov	r17,zero
    57cc:	003d9d06 	br	4e44 <__alt_data_end+0xff004e44>
    57d0:	d9002c17 	ldw	r4,176(sp)
    57d4:	d9801e04 	addi	r6,sp,120
    57d8:	b80b883a 	mov	r5,r23
    57dc:	000a9840 	call	a984 <__sprint_r>
    57e0:	103a031e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    57e4:	d8c02017 	ldw	r3,128(sp)
    57e8:	da000404 	addi	r8,sp,16
    57ec:	003d9406 	br	4e40 <__alt_data_end+0xff004e40>
    57f0:	01000074 	movhi	r4,1
    57f4:	21088e84 	addi	r4,r4,8762
    57f8:	d9002b15 	stw	r4,172(sp)
    57fc:	d9002b17 	ldw	r4,172(sp)
    5800:	1c47883a 	add	r3,r3,r17
    5804:	10800044 	addi	r2,r2,1
    5808:	41000015 	stw	r4,0(r8)
    580c:	44400115 	stw	r17,4(r8)
    5810:	d8c02015 	stw	r3,128(sp)
    5814:	d8801f15 	stw	r2,124(sp)
    5818:	010001c4 	movi	r4,7
    581c:	20bfd716 	blt	r4,r2,577c <__alt_data_end+0xff00577c>
    5820:	42000204 	addi	r8,r8,8
    5824:	003fdd06 	br	579c <__alt_data_end+0xff00579c>
    5828:	d9002c17 	ldw	r4,176(sp)
    582c:	d9801e04 	addi	r6,sp,120
    5830:	b80b883a 	mov	r5,r23
    5834:	000a9840 	call	a984 <__sprint_r>
    5838:	1039ed1e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    583c:	d8802617 	ldw	r2,152(sp)
    5840:	d8c02017 	ldw	r3,128(sp)
    5844:	da000404 	addi	r8,sp,16
    5848:	003e1006 	br	508c <__alt_data_end+0xff00508c>
    584c:	00800044 	movi	r2,1
    5850:	10803fcc 	andi	r2,r2,255
    5854:	00c00044 	movi	r3,1
    5858:	10fa3526 	beq	r2,r3,4130 <__alt_data_end+0xff004130>
    585c:	00c00084 	movi	r3,2
    5860:	10fbcb26 	beq	r2,r3,4790 <__alt_data_end+0xff004790>
    5864:	003a8f06 	br	42a4 <__alt_data_end+0xff0042a4>
    5868:	01000074 	movhi	r4,1
    586c:	21089284 	addi	r4,r4,8778
    5870:	d9003515 	stw	r4,212(sp)
    5874:	003b7606 	br	4650 <__alt_data_end+0xff004650>
    5878:	d8802917 	ldw	r2,164(sp)
    587c:	00c00184 	movi	r3,6
    5880:	1880012e 	bgeu	r3,r2,5888 <___vfprintf_internal_r+0x1ca0>
    5884:	1805883a 	mov	r2,r3
    5888:	d8802e15 	stw	r2,184(sp)
    588c:	1000ef16 	blt	r2,zero,5c4c <___vfprintf_internal_r+0x2064>
    5890:	04000074 	movhi	r16,1
    5894:	d8802a15 	stw	r2,168(sp)
    5898:	dcc02d15 	stw	r19,180(sp)
    589c:	d8002915 	stw	zero,164(sp)
    58a0:	d8003215 	stw	zero,200(sp)
    58a4:	84088c04 	addi	r16,r16,8752
    58a8:	0039883a 	mov	fp,zero
    58ac:	003aa206 	br	4338 <__alt_data_end+0xff004338>
    58b0:	0021883a 	mov	r16,zero
    58b4:	003e0706 	br	50d4 <__alt_data_end+0xff0050d4>
    58b8:	d9002c17 	ldw	r4,176(sp)
    58bc:	d9801e04 	addi	r6,sp,120
    58c0:	b80b883a 	mov	r5,r23
    58c4:	000a9840 	call	a984 <__sprint_r>
    58c8:	1039c91e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    58cc:	d8802617 	ldw	r2,152(sp)
    58d0:	d9403317 	ldw	r5,204(sp)
    58d4:	d8c02017 	ldw	r3,128(sp)
    58d8:	da000404 	addi	r8,sp,16
    58dc:	2885c83a 	sub	r2,r5,r2
    58e0:	003dfb06 	br	50d0 <__alt_data_end+0xff0050d0>
    58e4:	9080004c 	andi	r2,r18,1
    58e8:	103e8f1e 	bne	r2,zero,5328 <__alt_data_end+0xff005328>
    58ec:	d8802117 	ldw	r2,132(sp)
    58f0:	003e9e06 	br	536c <__alt_data_end+0xff00536c>
    58f4:	1025883a 	mov	r18,r2
    58f8:	0039883a 	mov	fp,zero
    58fc:	00800084 	movi	r2,2
    5900:	003fd306 	br	5850 <__alt_data_end+0xff005850>
    5904:	07000b44 	movi	fp,45
    5908:	df002785 	stb	fp,158(sp)
    590c:	003a4006 	br	4210 <__alt_data_end+0xff004210>
    5910:	00c00b44 	movi	r3,45
    5914:	d8c02785 	stb	r3,158(sp)
    5918:	d8802a15 	stw	r2,168(sp)
    591c:	dc802b17 	ldw	r18,172(sp)
    5920:	d8002915 	stw	zero,164(sp)
    5924:	07000b44 	movi	fp,45
    5928:	003a8006 	br	432c <__alt_data_end+0xff00432c>
    592c:	04000074 	movhi	r16,1
    5930:	84088104 	addi	r16,r16,8708
    5934:	003f4706 	br	5654 <__alt_data_end+0xff005654>
    5938:	d8c02d17 	ldw	r3,180(sp)
    593c:	d9002f17 	ldw	r4,188(sp)
    5940:	18800017 	ldw	r2,0(r3)
    5944:	18c00104 	addi	r3,r3,4
    5948:	d8c02d15 	stw	r3,180(sp)
    594c:	11000015 	stw	r4,0(r2)
    5950:	0038dd06 	br	3cc8 <__alt_data_end+0xff003cc8>
    5954:	dd802617 	ldw	r22,152(sp)
    5958:	00bfff44 	movi	r2,-3
    595c:	b0801c16 	blt	r22,r2,59d0 <___vfprintf_internal_r+0x1de8>
    5960:	d9402917 	ldw	r5,164(sp)
    5964:	2d801a16 	blt	r5,r22,59d0 <___vfprintf_internal_r+0x1de8>
    5968:	dd803215 	stw	r22,200(sp)
    596c:	003e8906 	br	5394 <__alt_data_end+0xff005394>
    5970:	01000074 	movhi	r4,1
    5974:	21088e84 	addi	r4,r4,8762
    5978:	d9002b15 	stw	r4,172(sp)
    597c:	003c9106 	br	4bc4 <__alt_data_end+0xff004bc4>
    5980:	e005883a 	mov	r2,fp
    5984:	003e7906 	br	536c <__alt_data_end+0xff00536c>
    5988:	d9402917 	ldw	r5,164(sp)
    598c:	df002783 	ldbu	fp,158(sp)
    5990:	dcc02d15 	stw	r19,180(sp)
    5994:	d9402a15 	stw	r5,168(sp)
    5998:	d9402e15 	stw	r5,184(sp)
    599c:	d8002915 	stw	zero,164(sp)
    59a0:	d8003215 	stw	zero,200(sp)
    59a4:	003a5d06 	br	431c <__alt_data_end+0xff00431c>
    59a8:	9080004c 	andi	r2,r18,1
    59ac:	0039883a 	mov	fp,zero
    59b0:	10000426 	beq	r2,zero,59c4 <___vfprintf_internal_r+0x1ddc>
    59b4:	00800c04 	movi	r2,48
    59b8:	dc001dc4 	addi	r16,sp,119
    59bc:	d8801dc5 	stb	r2,119(sp)
    59c0:	003b8006 	br	47c4 <__alt_data_end+0xff0047c4>
    59c4:	d8002e15 	stw	zero,184(sp)
    59c8:	dc001e04 	addi	r16,sp,120
    59cc:	003a4d06 	br	4304 <__alt_data_end+0xff004304>
    59d0:	8c7fff84 	addi	r17,r17,-2
    59d4:	b5bfffc4 	addi	r22,r22,-1
    59d8:	dd802615 	stw	r22,152(sp)
    59dc:	dc4022c5 	stb	r17,139(sp)
    59e0:	b000bf16 	blt	r22,zero,5ce0 <___vfprintf_internal_r+0x20f8>
    59e4:	00800ac4 	movi	r2,43
    59e8:	d8802305 	stb	r2,140(sp)
    59ec:	00800244 	movi	r2,9
    59f0:	15807016 	blt	r2,r22,5bb4 <___vfprintf_internal_r+0x1fcc>
    59f4:	00800c04 	movi	r2,48
    59f8:	b5800c04 	addi	r22,r22,48
    59fc:	d8802345 	stb	r2,141(sp)
    5a00:	dd802385 	stb	r22,142(sp)
    5a04:	d88023c4 	addi	r2,sp,143
    5a08:	df0022c4 	addi	fp,sp,139
    5a0c:	d8c03317 	ldw	r3,204(sp)
    5a10:	1739c83a 	sub	fp,r2,fp
    5a14:	d9003317 	ldw	r4,204(sp)
    5a18:	e0c7883a 	add	r3,fp,r3
    5a1c:	df003a15 	stw	fp,232(sp)
    5a20:	d8c02e15 	stw	r3,184(sp)
    5a24:	00800044 	movi	r2,1
    5a28:	1100b30e 	bge	r2,r4,5cf8 <___vfprintf_internal_r+0x2110>
    5a2c:	d8c02e17 	ldw	r3,184(sp)
    5a30:	18c00044 	addi	r3,r3,1
    5a34:	d8c02e15 	stw	r3,184(sp)
    5a38:	1805883a 	mov	r2,r3
    5a3c:	1800ac16 	blt	r3,zero,5cf0 <___vfprintf_internal_r+0x2108>
    5a40:	d8003215 	stw	zero,200(sp)
    5a44:	003e5d06 	br	53bc <__alt_data_end+0xff0053bc>
    5a48:	d9002c17 	ldw	r4,176(sp)
    5a4c:	d9801e04 	addi	r6,sp,120
    5a50:	b80b883a 	mov	r5,r23
    5a54:	000a9840 	call	a984 <__sprint_r>
    5a58:	1039651e 	bne	r2,zero,3ff0 <__alt_data_end+0xff003ff0>
    5a5c:	dc402617 	ldw	r17,152(sp)
    5a60:	d8c02017 	ldw	r3,128(sp)
    5a64:	d8801f17 	ldw	r2,124(sp)
    5a68:	da000404 	addi	r8,sp,16
    5a6c:	003ed606 	br	55c8 <__alt_data_end+0xff0055c8>
    5a70:	582b883a 	mov	r21,r11
    5a74:	d8002915 	stw	zero,164(sp)
    5a78:	0038bd06 	br	3d70 <__alt_data_end+0xff003d70>
    5a7c:	d8802917 	ldw	r2,164(sp)
    5a80:	103e071e 	bne	r2,zero,52a0 <__alt_data_end+0xff0052a0>
    5a84:	dc002915 	stw	r16,164(sp)
    5a88:	003e0506 	br	52a0 <__alt_data_end+0xff0052a0>
    5a8c:	d9002917 	ldw	r4,164(sp)
    5a90:	20c00044 	addi	r3,r4,1
    5a94:	003e0f06 	br	52d4 <__alt_data_end+0xff0052d4>
    5a98:	01400184 	movi	r5,6
    5a9c:	d9402915 	stw	r5,164(sp)
    5aa0:	003dff06 	br	52a0 <__alt_data_end+0xff0052a0>
    5aa4:	d8802104 	addi	r2,sp,132
    5aa8:	d8800315 	stw	r2,12(sp)
    5aac:	d8802504 	addi	r2,sp,148
    5ab0:	d8800215 	stw	r2,8(sp)
    5ab4:	d8802604 	addi	r2,sp,152
    5ab8:	d8800115 	stw	r2,4(sp)
    5abc:	d8802917 	ldw	r2,164(sp)
    5ac0:	d9403617 	ldw	r5,216(sp)
    5ac4:	d9002c17 	ldw	r4,176(sp)
    5ac8:	d8800015 	stw	r2,0(sp)
    5acc:	01c000c4 	movi	r7,3
    5ad0:	980d883a 	mov	r6,r19
    5ad4:	da003d15 	stw	r8,244(sp)
    5ad8:	000620c0 	call	620c <_dtoa_r>
    5adc:	d8c02917 	ldw	r3,164(sp)
    5ae0:	da003d17 	ldw	r8,244(sp)
    5ae4:	1021883a 	mov	r16,r2
    5ae8:	10f9883a 	add	fp,r2,r3
    5aec:	81000007 	ldb	r4,0(r16)
    5af0:	00800c04 	movi	r2,48
    5af4:	20805e26 	beq	r4,r2,5c70 <___vfprintf_internal_r+0x2088>
    5af8:	d8c02617 	ldw	r3,152(sp)
    5afc:	e0f9883a 	add	fp,fp,r3
    5b00:	003e0a06 	br	532c <__alt_data_end+0xff00532c>
    5b04:	00c00b44 	movi	r3,45
    5b08:	24e0003c 	xorhi	r19,r4,32768
    5b0c:	d8c02a05 	stb	r3,168(sp)
    5b10:	003de906 	br	52b8 <__alt_data_end+0xff0052b8>
    5b14:	d8c03217 	ldw	r3,200(sp)
    5b18:	00c07a0e 	bge	zero,r3,5d04 <___vfprintf_internal_r+0x211c>
    5b1c:	00800044 	movi	r2,1
    5b20:	d9003317 	ldw	r4,204(sp)
    5b24:	1105883a 	add	r2,r2,r4
    5b28:	d8802e15 	stw	r2,184(sp)
    5b2c:	10004e16 	blt	r2,zero,5c68 <___vfprintf_internal_r+0x2080>
    5b30:	044019c4 	movi	r17,103
    5b34:	003e2106 	br	53bc <__alt_data_end+0xff0053bc>
    5b38:	d9002917 	ldw	r4,164(sp)
    5b3c:	d8802104 	addi	r2,sp,132
    5b40:	d8800315 	stw	r2,12(sp)
    5b44:	d9000015 	stw	r4,0(sp)
    5b48:	d8802504 	addi	r2,sp,148
    5b4c:	d9403617 	ldw	r5,216(sp)
    5b50:	d9002c17 	ldw	r4,176(sp)
    5b54:	d8800215 	stw	r2,8(sp)
    5b58:	d8802604 	addi	r2,sp,152
    5b5c:	d8800115 	stw	r2,4(sp)
    5b60:	01c000c4 	movi	r7,3
    5b64:	980d883a 	mov	r6,r19
    5b68:	da003d15 	stw	r8,244(sp)
    5b6c:	000620c0 	call	620c <_dtoa_r>
    5b70:	d8c02917 	ldw	r3,164(sp)
    5b74:	da003d17 	ldw	r8,244(sp)
    5b78:	1021883a 	mov	r16,r2
    5b7c:	00801184 	movi	r2,70
    5b80:	80f9883a 	add	fp,r16,r3
    5b84:	88bfd926 	beq	r17,r2,5aec <__alt_data_end+0xff005aec>
    5b88:	003de806 	br	532c <__alt_data_end+0xff00532c>
    5b8c:	d9002917 	ldw	r4,164(sp)
    5b90:	00c04d0e 	bge	zero,r3,5cc8 <___vfprintf_internal_r+0x20e0>
    5b94:	2000441e 	bne	r4,zero,5ca8 <___vfprintf_internal_r+0x20c0>
    5b98:	9480004c 	andi	r18,r18,1
    5b9c:	9000421e 	bne	r18,zero,5ca8 <___vfprintf_internal_r+0x20c0>
    5ba0:	1805883a 	mov	r2,r3
    5ba4:	18007016 	blt	r3,zero,5d68 <___vfprintf_internal_r+0x2180>
    5ba8:	d8c03217 	ldw	r3,200(sp)
    5bac:	d8c02e15 	stw	r3,184(sp)
    5bb0:	003e0206 	br	53bc <__alt_data_end+0xff0053bc>
    5bb4:	df0022c4 	addi	fp,sp,139
    5bb8:	dc002915 	stw	r16,164(sp)
    5bbc:	4027883a 	mov	r19,r8
    5bc0:	e021883a 	mov	r16,fp
    5bc4:	b009883a 	mov	r4,r22
    5bc8:	01400284 	movi	r5,10
    5bcc:	00026640 	call	2664 <__modsi3>
    5bd0:	10800c04 	addi	r2,r2,48
    5bd4:	843fffc4 	addi	r16,r16,-1
    5bd8:	b009883a 	mov	r4,r22
    5bdc:	01400284 	movi	r5,10
    5be0:	80800005 	stb	r2,0(r16)
    5be4:	00025e00 	call	25e0 <__divsi3>
    5be8:	102d883a 	mov	r22,r2
    5bec:	00800244 	movi	r2,9
    5bf0:	15bff416 	blt	r2,r22,5bc4 <__alt_data_end+0xff005bc4>
    5bf4:	9811883a 	mov	r8,r19
    5bf8:	b0800c04 	addi	r2,r22,48
    5bfc:	8027883a 	mov	r19,r16
    5c00:	997fffc4 	addi	r5,r19,-1
    5c04:	98bfffc5 	stb	r2,-1(r19)
    5c08:	dc002917 	ldw	r16,164(sp)
    5c0c:	2f006a2e 	bgeu	r5,fp,5db8 <___vfprintf_internal_r+0x21d0>
    5c10:	d9c02384 	addi	r7,sp,142
    5c14:	3ccfc83a 	sub	r7,r7,r19
    5c18:	d9002344 	addi	r4,sp,141
    5c1c:	e1cf883a 	add	r7,fp,r7
    5c20:	00000106 	br	5c28 <___vfprintf_internal_r+0x2040>
    5c24:	28800003 	ldbu	r2,0(r5)
    5c28:	20800005 	stb	r2,0(r4)
    5c2c:	21000044 	addi	r4,r4,1
    5c30:	29400044 	addi	r5,r5,1
    5c34:	393ffb1e 	bne	r7,r4,5c24 <__alt_data_end+0xff005c24>
    5c38:	d8802304 	addi	r2,sp,140
    5c3c:	14c5c83a 	sub	r2,r2,r19
    5c40:	d8c02344 	addi	r3,sp,141
    5c44:	1885883a 	add	r2,r3,r2
    5c48:	003f7006 	br	5a0c <__alt_data_end+0xff005a0c>
    5c4c:	0005883a 	mov	r2,zero
    5c50:	003f0f06 	br	5890 <__alt_data_end+0xff005890>
    5c54:	d8c03217 	ldw	r3,200(sp)
    5c58:	18c00044 	addi	r3,r3,1
    5c5c:	d8c02e15 	stw	r3,184(sp)
    5c60:	1805883a 	mov	r2,r3
    5c64:	183fb20e 	bge	r3,zero,5b30 <__alt_data_end+0xff005b30>
    5c68:	0005883a 	mov	r2,zero
    5c6c:	003fb006 	br	5b30 <__alt_data_end+0xff005b30>
    5c70:	d9003617 	ldw	r4,216(sp)
    5c74:	000d883a 	mov	r6,zero
    5c78:	000f883a 	mov	r7,zero
    5c7c:	980b883a 	mov	r5,r19
    5c80:	d8c03c15 	stw	r3,240(sp)
    5c84:	da003d15 	stw	r8,244(sp)
    5c88:	000db600 	call	db60 <__eqdf2>
    5c8c:	d8c03c17 	ldw	r3,240(sp)
    5c90:	da003d17 	ldw	r8,244(sp)
    5c94:	103f9826 	beq	r2,zero,5af8 <__alt_data_end+0xff005af8>
    5c98:	00800044 	movi	r2,1
    5c9c:	10c7c83a 	sub	r3,r2,r3
    5ca0:	d8c02615 	stw	r3,152(sp)
    5ca4:	003f9506 	br	5afc <__alt_data_end+0xff005afc>
    5ca8:	d9002917 	ldw	r4,164(sp)
    5cac:	d8c03217 	ldw	r3,200(sp)
    5cb0:	20800044 	addi	r2,r4,1
    5cb4:	1885883a 	add	r2,r3,r2
    5cb8:	d8802e15 	stw	r2,184(sp)
    5cbc:	103dbf0e 	bge	r2,zero,53bc <__alt_data_end+0xff0053bc>
    5cc0:	0005883a 	mov	r2,zero
    5cc4:	003dbd06 	br	53bc <__alt_data_end+0xff0053bc>
    5cc8:	2000211e 	bne	r4,zero,5d50 <___vfprintf_internal_r+0x2168>
    5ccc:	9480004c 	andi	r18,r18,1
    5cd0:	90001f1e 	bne	r18,zero,5d50 <___vfprintf_internal_r+0x2168>
    5cd4:	00800044 	movi	r2,1
    5cd8:	d8802e15 	stw	r2,184(sp)
    5cdc:	003db706 	br	53bc <__alt_data_end+0xff0053bc>
    5ce0:	00800b44 	movi	r2,45
    5ce4:	05adc83a 	sub	r22,zero,r22
    5ce8:	d8802305 	stb	r2,140(sp)
    5cec:	003f3f06 	br	59ec <__alt_data_end+0xff0059ec>
    5cf0:	0005883a 	mov	r2,zero
    5cf4:	003f5206 	br	5a40 <__alt_data_end+0xff005a40>
    5cf8:	90a4703a 	and	r18,r18,r2
    5cfc:	903f4e26 	beq	r18,zero,5a38 <__alt_data_end+0xff005a38>
    5d00:	003f4a06 	br	5a2c <__alt_data_end+0xff005a2c>
    5d04:	00800084 	movi	r2,2
    5d08:	10c5c83a 	sub	r2,r2,r3
    5d0c:	003f8406 	br	5b20 <__alt_data_end+0xff005b20>
    5d10:	d8802d17 	ldw	r2,180(sp)
    5d14:	d9002d17 	ldw	r4,180(sp)
    5d18:	ac400043 	ldbu	r17,1(r21)
    5d1c:	10800017 	ldw	r2,0(r2)
    5d20:	582b883a 	mov	r21,r11
    5d24:	d8802915 	stw	r2,164(sp)
    5d28:	20800104 	addi	r2,r4,4
    5d2c:	d9002917 	ldw	r4,164(sp)
    5d30:	d8802d15 	stw	r2,180(sp)
    5d34:	203e7a0e 	bge	r4,zero,5720 <__alt_data_end+0xff005720>
    5d38:	8c403fcc 	andi	r17,r17,255
    5d3c:	00bfffc4 	movi	r2,-1
    5d40:	8c40201c 	xori	r17,r17,128
    5d44:	d8802915 	stw	r2,164(sp)
    5d48:	8c7fe004 	addi	r17,r17,-128
    5d4c:	00380706 	br	3d6c <__alt_data_end+0xff003d6c>
    5d50:	d8c02917 	ldw	r3,164(sp)
    5d54:	18c00084 	addi	r3,r3,2
    5d58:	d8c02e15 	stw	r3,184(sp)
    5d5c:	1805883a 	mov	r2,r3
    5d60:	183d960e 	bge	r3,zero,53bc <__alt_data_end+0xff0053bc>
    5d64:	003fd606 	br	5cc0 <__alt_data_end+0xff005cc0>
    5d68:	0005883a 	mov	r2,zero
    5d6c:	003f8e06 	br	5ba8 <__alt_data_end+0xff005ba8>
    5d70:	9080004c 	andi	r2,r18,1
    5d74:	103f811e 	bne	r2,zero,5b7c <__alt_data_end+0xff005b7c>
    5d78:	d8802117 	ldw	r2,132(sp)
    5d7c:	1405c83a 	sub	r2,r2,r16
    5d80:	d8803315 	stw	r2,204(sp)
    5d84:	b47ef326 	beq	r22,r17,5954 <__alt_data_end+0xff005954>
    5d88:	dd802617 	ldw	r22,152(sp)
    5d8c:	003f1106 	br	59d4 <__alt_data_end+0xff0059d4>
    5d90:	d9c02785 	stb	r7,158(sp)
    5d94:	00390406 	br	41a8 <__alt_data_end+0xff0041a8>
    5d98:	d9c02785 	stb	r7,158(sp)
    5d9c:	0038d306 	br	40ec <__alt_data_end+0xff0040ec>
    5da0:	d9c02785 	stb	r7,158(sp)
    5da4:	003a6106 	br	472c <__alt_data_end+0xff00472c>
    5da8:	d9c02785 	stb	r7,158(sp)
    5dac:	003af806 	br	4990 <__alt_data_end+0xff004990>
    5db0:	0005883a 	mov	r2,zero
    5db4:	003d7e06 	br	53b0 <__alt_data_end+0xff0053b0>
    5db8:	d8802344 	addi	r2,sp,141
    5dbc:	003f1306 	br	5a0c <__alt_data_end+0xff005a0c>
    5dc0:	d9c02785 	stb	r7,158(sp)
    5dc4:	00392306 	br	4254 <__alt_data_end+0xff004254>
    5dc8:	d9c02785 	stb	r7,158(sp)
    5dcc:	003aa906 	br	4874 <__alt_data_end+0xff004874>
    5dd0:	d9c02785 	stb	r7,158(sp)
    5dd4:	003a3d06 	br	46cc <__alt_data_end+0xff0046cc>
    5dd8:	d9c02785 	stb	r7,158(sp)
    5ddc:	003aca06 	br	4908 <__alt_data_end+0xff004908>

00005de0 <__vfprintf_internal>:
    5de0:	00800074 	movhi	r2,1
    5de4:	108fe904 	addi	r2,r2,16292
    5de8:	300f883a 	mov	r7,r6
    5dec:	280d883a 	mov	r6,r5
    5df0:	200b883a 	mov	r5,r4
    5df4:	11000017 	ldw	r4,0(r2)
    5df8:	0003be81 	jmpi	3be8 <___vfprintf_internal_r>

00005dfc <__sbprintf>:
    5dfc:	2880030b 	ldhu	r2,12(r5)
    5e00:	2ac01917 	ldw	r11,100(r5)
    5e04:	2a80038b 	ldhu	r10,14(r5)
    5e08:	2a400717 	ldw	r9,28(r5)
    5e0c:	2a000917 	ldw	r8,36(r5)
    5e10:	defee204 	addi	sp,sp,-1144
    5e14:	00c10004 	movi	r3,1024
    5e18:	dc011a15 	stw	r16,1128(sp)
    5e1c:	10bfff4c 	andi	r2,r2,65533
    5e20:	2821883a 	mov	r16,r5
    5e24:	d8cb883a 	add	r5,sp,r3
    5e28:	dc811c15 	stw	r18,1136(sp)
    5e2c:	dc411b15 	stw	r17,1132(sp)
    5e30:	dfc11d15 	stw	ra,1140(sp)
    5e34:	2025883a 	mov	r18,r4
    5e38:	d881030d 	sth	r2,1036(sp)
    5e3c:	dac11915 	stw	r11,1124(sp)
    5e40:	da81038d 	sth	r10,1038(sp)
    5e44:	da410715 	stw	r9,1052(sp)
    5e48:	da010915 	stw	r8,1060(sp)
    5e4c:	dec10015 	stw	sp,1024(sp)
    5e50:	dec10415 	stw	sp,1040(sp)
    5e54:	d8c10215 	stw	r3,1032(sp)
    5e58:	d8c10515 	stw	r3,1044(sp)
    5e5c:	d8010615 	stw	zero,1048(sp)
    5e60:	0003be80 	call	3be8 <___vfprintf_internal_r>
    5e64:	1023883a 	mov	r17,r2
    5e68:	10000416 	blt	r2,zero,5e7c <__sbprintf+0x80>
    5e6c:	d9410004 	addi	r5,sp,1024
    5e70:	9009883a 	mov	r4,r18
    5e74:	0007ab00 	call	7ab0 <_fflush_r>
    5e78:	10000d1e 	bne	r2,zero,5eb0 <__sbprintf+0xb4>
    5e7c:	d881030b 	ldhu	r2,1036(sp)
    5e80:	1080100c 	andi	r2,r2,64
    5e84:	10000326 	beq	r2,zero,5e94 <__sbprintf+0x98>
    5e88:	8080030b 	ldhu	r2,12(r16)
    5e8c:	10801014 	ori	r2,r2,64
    5e90:	8080030d 	sth	r2,12(r16)
    5e94:	8805883a 	mov	r2,r17
    5e98:	dfc11d17 	ldw	ra,1140(sp)
    5e9c:	dc811c17 	ldw	r18,1136(sp)
    5ea0:	dc411b17 	ldw	r17,1132(sp)
    5ea4:	dc011a17 	ldw	r16,1128(sp)
    5ea8:	dec11e04 	addi	sp,sp,1144
    5eac:	f800283a 	ret
    5eb0:	047fffc4 	movi	r17,-1
    5eb4:	003ff106 	br	5e7c <__alt_data_end+0xff005e7c>

00005eb8 <__swsetup_r>:
    5eb8:	00800074 	movhi	r2,1
    5ebc:	defffd04 	addi	sp,sp,-12
    5ec0:	108fe904 	addi	r2,r2,16292
    5ec4:	dc400115 	stw	r17,4(sp)
    5ec8:	2023883a 	mov	r17,r4
    5ecc:	11000017 	ldw	r4,0(r2)
    5ed0:	dc000015 	stw	r16,0(sp)
    5ed4:	dfc00215 	stw	ra,8(sp)
    5ed8:	2821883a 	mov	r16,r5
    5edc:	20000226 	beq	r4,zero,5ee8 <__swsetup_r+0x30>
    5ee0:	20800e17 	ldw	r2,56(r4)
    5ee4:	10003126 	beq	r2,zero,5fac <__swsetup_r+0xf4>
    5ee8:	8080030b 	ldhu	r2,12(r16)
    5eec:	10c0020c 	andi	r3,r2,8
    5ef0:	1009883a 	mov	r4,r2
    5ef4:	18000f26 	beq	r3,zero,5f34 <__swsetup_r+0x7c>
    5ef8:	80c00417 	ldw	r3,16(r16)
    5efc:	18001526 	beq	r3,zero,5f54 <__swsetup_r+0x9c>
    5f00:	1100004c 	andi	r4,r2,1
    5f04:	20001c1e 	bne	r4,zero,5f78 <__swsetup_r+0xc0>
    5f08:	1080008c 	andi	r2,r2,2
    5f0c:	1000291e 	bne	r2,zero,5fb4 <__swsetup_r+0xfc>
    5f10:	80800517 	ldw	r2,20(r16)
    5f14:	80800215 	stw	r2,8(r16)
    5f18:	18001c26 	beq	r3,zero,5f8c <__swsetup_r+0xd4>
    5f1c:	0005883a 	mov	r2,zero
    5f20:	dfc00217 	ldw	ra,8(sp)
    5f24:	dc400117 	ldw	r17,4(sp)
    5f28:	dc000017 	ldw	r16,0(sp)
    5f2c:	dec00304 	addi	sp,sp,12
    5f30:	f800283a 	ret
    5f34:	2080040c 	andi	r2,r4,16
    5f38:	10002e26 	beq	r2,zero,5ff4 <__swsetup_r+0x13c>
    5f3c:	2080010c 	andi	r2,r4,4
    5f40:	10001e1e 	bne	r2,zero,5fbc <__swsetup_r+0x104>
    5f44:	80c00417 	ldw	r3,16(r16)
    5f48:	20800214 	ori	r2,r4,8
    5f4c:	8080030d 	sth	r2,12(r16)
    5f50:	183feb1e 	bne	r3,zero,5f00 <__alt_data_end+0xff005f00>
    5f54:	1100a00c 	andi	r4,r2,640
    5f58:	01408004 	movi	r5,512
    5f5c:	217fe826 	beq	r4,r5,5f00 <__alt_data_end+0xff005f00>
    5f60:	800b883a 	mov	r5,r16
    5f64:	8809883a 	mov	r4,r17
    5f68:	0008a300 	call	8a30 <__smakebuf_r>
    5f6c:	8080030b 	ldhu	r2,12(r16)
    5f70:	80c00417 	ldw	r3,16(r16)
    5f74:	003fe206 	br	5f00 <__alt_data_end+0xff005f00>
    5f78:	80800517 	ldw	r2,20(r16)
    5f7c:	80000215 	stw	zero,8(r16)
    5f80:	0085c83a 	sub	r2,zero,r2
    5f84:	80800615 	stw	r2,24(r16)
    5f88:	183fe41e 	bne	r3,zero,5f1c <__alt_data_end+0xff005f1c>
    5f8c:	80c0030b 	ldhu	r3,12(r16)
    5f90:	0005883a 	mov	r2,zero
    5f94:	1900200c 	andi	r4,r3,128
    5f98:	203fe126 	beq	r4,zero,5f20 <__alt_data_end+0xff005f20>
    5f9c:	18c01014 	ori	r3,r3,64
    5fa0:	80c0030d 	sth	r3,12(r16)
    5fa4:	00bfffc4 	movi	r2,-1
    5fa8:	003fdd06 	br	5f20 <__alt_data_end+0xff005f20>
    5fac:	0007e8c0 	call	7e8c <__sinit>
    5fb0:	003fcd06 	br	5ee8 <__alt_data_end+0xff005ee8>
    5fb4:	0005883a 	mov	r2,zero
    5fb8:	003fd606 	br	5f14 <__alt_data_end+0xff005f14>
    5fbc:	81400c17 	ldw	r5,48(r16)
    5fc0:	28000626 	beq	r5,zero,5fdc <__swsetup_r+0x124>
    5fc4:	80801004 	addi	r2,r16,64
    5fc8:	28800326 	beq	r5,r2,5fd8 <__swsetup_r+0x120>
    5fcc:	8809883a 	mov	r4,r17
    5fd0:	00080000 	call	8000 <_free_r>
    5fd4:	8100030b 	ldhu	r4,12(r16)
    5fd8:	80000c15 	stw	zero,48(r16)
    5fdc:	80c00417 	ldw	r3,16(r16)
    5fe0:	00bff6c4 	movi	r2,-37
    5fe4:	1108703a 	and	r4,r2,r4
    5fe8:	80000115 	stw	zero,4(r16)
    5fec:	80c00015 	stw	r3,0(r16)
    5ff0:	003fd506 	br	5f48 <__alt_data_end+0xff005f48>
    5ff4:	00800244 	movi	r2,9
    5ff8:	88800015 	stw	r2,0(r17)
    5ffc:	20801014 	ori	r2,r4,64
    6000:	8080030d 	sth	r2,12(r16)
    6004:	00bfffc4 	movi	r2,-1
    6008:	003fc506 	br	5f20 <__alt_data_end+0xff005f20>

0000600c <quorem>:
    600c:	defff704 	addi	sp,sp,-36
    6010:	dc800215 	stw	r18,8(sp)
    6014:	20800417 	ldw	r2,16(r4)
    6018:	2c800417 	ldw	r18,16(r5)
    601c:	dfc00815 	stw	ra,32(sp)
    6020:	ddc00715 	stw	r23,28(sp)
    6024:	dd800615 	stw	r22,24(sp)
    6028:	dd400515 	stw	r21,20(sp)
    602c:	dd000415 	stw	r20,16(sp)
    6030:	dcc00315 	stw	r19,12(sp)
    6034:	dc400115 	stw	r17,4(sp)
    6038:	dc000015 	stw	r16,0(sp)
    603c:	14807116 	blt	r2,r18,6204 <quorem+0x1f8>
    6040:	94bfffc4 	addi	r18,r18,-1
    6044:	94ad883a 	add	r22,r18,r18
    6048:	b5ad883a 	add	r22,r22,r22
    604c:	2c400504 	addi	r17,r5,20
    6050:	8da9883a 	add	r20,r17,r22
    6054:	25400504 	addi	r21,r4,20
    6058:	282f883a 	mov	r23,r5
    605c:	adad883a 	add	r22,r21,r22
    6060:	a1400017 	ldw	r5,0(r20)
    6064:	2021883a 	mov	r16,r4
    6068:	b1000017 	ldw	r4,0(r22)
    606c:	29400044 	addi	r5,r5,1
    6070:	00026d80 	call	26d8 <__udivsi3>
    6074:	1027883a 	mov	r19,r2
    6078:	10002c26 	beq	r2,zero,612c <quorem+0x120>
    607c:	a813883a 	mov	r9,r21
    6080:	880b883a 	mov	r5,r17
    6084:	0009883a 	mov	r4,zero
    6088:	000d883a 	mov	r6,zero
    608c:	2a000017 	ldw	r8,0(r5)
    6090:	49c00017 	ldw	r7,0(r9)
    6094:	29400104 	addi	r5,r5,4
    6098:	40bfffcc 	andi	r2,r8,65535
    609c:	14c5383a 	mul	r2,r2,r19
    60a0:	4010d43a 	srli	r8,r8,16
    60a4:	38ffffcc 	andi	r3,r7,65535
    60a8:	1105883a 	add	r2,r2,r4
    60ac:	1008d43a 	srli	r4,r2,16
    60b0:	44d1383a 	mul	r8,r8,r19
    60b4:	198d883a 	add	r6,r3,r6
    60b8:	10ffffcc 	andi	r3,r2,65535
    60bc:	30c7c83a 	sub	r3,r6,r3
    60c0:	380ed43a 	srli	r7,r7,16
    60c4:	4105883a 	add	r2,r8,r4
    60c8:	180dd43a 	srai	r6,r3,16
    60cc:	113fffcc 	andi	r4,r2,65535
    60d0:	390fc83a 	sub	r7,r7,r4
    60d4:	398d883a 	add	r6,r7,r6
    60d8:	300e943a 	slli	r7,r6,16
    60dc:	18ffffcc 	andi	r3,r3,65535
    60e0:	1008d43a 	srli	r4,r2,16
    60e4:	38ceb03a 	or	r7,r7,r3
    60e8:	49c00015 	stw	r7,0(r9)
    60ec:	300dd43a 	srai	r6,r6,16
    60f0:	4a400104 	addi	r9,r9,4
    60f4:	a17fe52e 	bgeu	r20,r5,608c <__alt_data_end+0xff00608c>
    60f8:	b0800017 	ldw	r2,0(r22)
    60fc:	10000b1e 	bne	r2,zero,612c <quorem+0x120>
    6100:	b0bfff04 	addi	r2,r22,-4
    6104:	a880082e 	bgeu	r21,r2,6128 <quorem+0x11c>
    6108:	b0ffff17 	ldw	r3,-4(r22)
    610c:	18000326 	beq	r3,zero,611c <quorem+0x110>
    6110:	00000506 	br	6128 <quorem+0x11c>
    6114:	10c00017 	ldw	r3,0(r2)
    6118:	1800031e 	bne	r3,zero,6128 <quorem+0x11c>
    611c:	10bfff04 	addi	r2,r2,-4
    6120:	94bfffc4 	addi	r18,r18,-1
    6124:	a8bffb36 	bltu	r21,r2,6114 <__alt_data_end+0xff006114>
    6128:	84800415 	stw	r18,16(r16)
    612c:	b80b883a 	mov	r5,r23
    6130:	8009883a 	mov	r4,r16
    6134:	00099640 	call	9964 <__mcmp>
    6138:	10002616 	blt	r2,zero,61d4 <quorem+0x1c8>
    613c:	9cc00044 	addi	r19,r19,1
    6140:	a805883a 	mov	r2,r21
    6144:	000b883a 	mov	r5,zero
    6148:	11000017 	ldw	r4,0(r2)
    614c:	89800017 	ldw	r6,0(r17)
    6150:	10800104 	addi	r2,r2,4
    6154:	20ffffcc 	andi	r3,r4,65535
    6158:	194b883a 	add	r5,r3,r5
    615c:	30ffffcc 	andi	r3,r6,65535
    6160:	28c7c83a 	sub	r3,r5,r3
    6164:	300cd43a 	srli	r6,r6,16
    6168:	2008d43a 	srli	r4,r4,16
    616c:	180bd43a 	srai	r5,r3,16
    6170:	18ffffcc 	andi	r3,r3,65535
    6174:	2189c83a 	sub	r4,r4,r6
    6178:	2149883a 	add	r4,r4,r5
    617c:	200c943a 	slli	r6,r4,16
    6180:	8c400104 	addi	r17,r17,4
    6184:	200bd43a 	srai	r5,r4,16
    6188:	30c6b03a 	or	r3,r6,r3
    618c:	10ffff15 	stw	r3,-4(r2)
    6190:	a47fed2e 	bgeu	r20,r17,6148 <__alt_data_end+0xff006148>
    6194:	9485883a 	add	r2,r18,r18
    6198:	1085883a 	add	r2,r2,r2
    619c:	a887883a 	add	r3,r21,r2
    61a0:	18800017 	ldw	r2,0(r3)
    61a4:	10000b1e 	bne	r2,zero,61d4 <quorem+0x1c8>
    61a8:	18bfff04 	addi	r2,r3,-4
    61ac:	a880082e 	bgeu	r21,r2,61d0 <quorem+0x1c4>
    61b0:	18ffff17 	ldw	r3,-4(r3)
    61b4:	18000326 	beq	r3,zero,61c4 <quorem+0x1b8>
    61b8:	00000506 	br	61d0 <quorem+0x1c4>
    61bc:	10c00017 	ldw	r3,0(r2)
    61c0:	1800031e 	bne	r3,zero,61d0 <quorem+0x1c4>
    61c4:	10bfff04 	addi	r2,r2,-4
    61c8:	94bfffc4 	addi	r18,r18,-1
    61cc:	a8bffb36 	bltu	r21,r2,61bc <__alt_data_end+0xff0061bc>
    61d0:	84800415 	stw	r18,16(r16)
    61d4:	9805883a 	mov	r2,r19
    61d8:	dfc00817 	ldw	ra,32(sp)
    61dc:	ddc00717 	ldw	r23,28(sp)
    61e0:	dd800617 	ldw	r22,24(sp)
    61e4:	dd400517 	ldw	r21,20(sp)
    61e8:	dd000417 	ldw	r20,16(sp)
    61ec:	dcc00317 	ldw	r19,12(sp)
    61f0:	dc800217 	ldw	r18,8(sp)
    61f4:	dc400117 	ldw	r17,4(sp)
    61f8:	dc000017 	ldw	r16,0(sp)
    61fc:	dec00904 	addi	sp,sp,36
    6200:	f800283a 	ret
    6204:	0005883a 	mov	r2,zero
    6208:	003ff306 	br	61d8 <__alt_data_end+0xff0061d8>

0000620c <_dtoa_r>:
    620c:	20801017 	ldw	r2,64(r4)
    6210:	deffde04 	addi	sp,sp,-136
    6214:	df002015 	stw	fp,128(sp)
    6218:	dcc01b15 	stw	r19,108(sp)
    621c:	dc801a15 	stw	r18,104(sp)
    6220:	dc401915 	stw	r17,100(sp)
    6224:	dc001815 	stw	r16,96(sp)
    6228:	dfc02115 	stw	ra,132(sp)
    622c:	ddc01f15 	stw	r23,124(sp)
    6230:	dd801e15 	stw	r22,120(sp)
    6234:	dd401d15 	stw	r21,116(sp)
    6238:	dd001c15 	stw	r20,112(sp)
    623c:	d9c00315 	stw	r7,12(sp)
    6240:	2039883a 	mov	fp,r4
    6244:	3023883a 	mov	r17,r6
    6248:	2825883a 	mov	r18,r5
    624c:	dc002417 	ldw	r16,144(sp)
    6250:	3027883a 	mov	r19,r6
    6254:	10000826 	beq	r2,zero,6278 <_dtoa_r+0x6c>
    6258:	21801117 	ldw	r6,68(r4)
    625c:	00c00044 	movi	r3,1
    6260:	100b883a 	mov	r5,r2
    6264:	1986983a 	sll	r3,r3,r6
    6268:	11800115 	stw	r6,4(r2)
    626c:	10c00215 	stw	r3,8(r2)
    6270:	00091440 	call	9144 <_Bfree>
    6274:	e0001015 	stw	zero,64(fp)
    6278:	88002e16 	blt	r17,zero,6334 <_dtoa_r+0x128>
    627c:	80000015 	stw	zero,0(r16)
    6280:	889ffc2c 	andhi	r2,r17,32752
    6284:	00dffc34 	movhi	r3,32752
    6288:	10c01c26 	beq	r2,r3,62fc <_dtoa_r+0xf0>
    628c:	000d883a 	mov	r6,zero
    6290:	000f883a 	mov	r7,zero
    6294:	9009883a 	mov	r4,r18
    6298:	980b883a 	mov	r5,r19
    629c:	000db600 	call	db60 <__eqdf2>
    62a0:	10002b1e 	bne	r2,zero,6350 <_dtoa_r+0x144>
    62a4:	d9c02317 	ldw	r7,140(sp)
    62a8:	00800044 	movi	r2,1
    62ac:	38800015 	stw	r2,0(r7)
    62b0:	d8802517 	ldw	r2,148(sp)
    62b4:	10019e26 	beq	r2,zero,6930 <_dtoa_r+0x724>
    62b8:	d8c02517 	ldw	r3,148(sp)
    62bc:	00800074 	movhi	r2,1
    62c0:	10888e44 	addi	r2,r2,8761
    62c4:	18800015 	stw	r2,0(r3)
    62c8:	10bfffc4 	addi	r2,r2,-1
    62cc:	dfc02117 	ldw	ra,132(sp)
    62d0:	df002017 	ldw	fp,128(sp)
    62d4:	ddc01f17 	ldw	r23,124(sp)
    62d8:	dd801e17 	ldw	r22,120(sp)
    62dc:	dd401d17 	ldw	r21,116(sp)
    62e0:	dd001c17 	ldw	r20,112(sp)
    62e4:	dcc01b17 	ldw	r19,108(sp)
    62e8:	dc801a17 	ldw	r18,104(sp)
    62ec:	dc401917 	ldw	r17,100(sp)
    62f0:	dc001817 	ldw	r16,96(sp)
    62f4:	dec02204 	addi	sp,sp,136
    62f8:	f800283a 	ret
    62fc:	d8c02317 	ldw	r3,140(sp)
    6300:	0089c3c4 	movi	r2,9999
    6304:	18800015 	stw	r2,0(r3)
    6308:	90017726 	beq	r18,zero,68e8 <_dtoa_r+0x6dc>
    630c:	00800074 	movhi	r2,1
    6310:	10889a04 	addi	r2,r2,8808
    6314:	d9002517 	ldw	r4,148(sp)
    6318:	203fec26 	beq	r4,zero,62cc <__alt_data_end+0xff0062cc>
    631c:	10c000c7 	ldb	r3,3(r2)
    6320:	1801781e 	bne	r3,zero,6904 <_dtoa_r+0x6f8>
    6324:	10c000c4 	addi	r3,r2,3
    6328:	d9802517 	ldw	r6,148(sp)
    632c:	30c00015 	stw	r3,0(r6)
    6330:	003fe606 	br	62cc <__alt_data_end+0xff0062cc>
    6334:	04e00034 	movhi	r19,32768
    6338:	9cffffc4 	addi	r19,r19,-1
    633c:	00800044 	movi	r2,1
    6340:	8ce6703a 	and	r19,r17,r19
    6344:	80800015 	stw	r2,0(r16)
    6348:	9823883a 	mov	r17,r19
    634c:	003fcc06 	br	6280 <__alt_data_end+0xff006280>
    6350:	d8800204 	addi	r2,sp,8
    6354:	d8800015 	stw	r2,0(sp)
    6358:	d9c00104 	addi	r7,sp,4
    635c:	900b883a 	mov	r5,r18
    6360:	980d883a 	mov	r6,r19
    6364:	e009883a 	mov	r4,fp
    6368:	8820d53a 	srli	r16,r17,20
    636c:	0009d300 	call	9d30 <__d2b>
    6370:	d8800915 	stw	r2,36(sp)
    6374:	8001651e 	bne	r16,zero,690c <_dtoa_r+0x700>
    6378:	dd800217 	ldw	r22,8(sp)
    637c:	dc000117 	ldw	r16,4(sp)
    6380:	00800804 	movi	r2,32
    6384:	b421883a 	add	r16,r22,r16
    6388:	80c10c84 	addi	r3,r16,1074
    638c:	10c2d10e 	bge	r2,r3,6ed4 <_dtoa_r+0xcc8>
    6390:	00801004 	movi	r2,64
    6394:	81010484 	addi	r4,r16,1042
    6398:	10c7c83a 	sub	r3,r2,r3
    639c:	9108d83a 	srl	r4,r18,r4
    63a0:	88e2983a 	sll	r17,r17,r3
    63a4:	2448b03a 	or	r4,r4,r17
    63a8:	000307c0 	call	307c <__floatunsidf>
    63ac:	017f8434 	movhi	r5,65040
    63b0:	01800044 	movi	r6,1
    63b4:	1009883a 	mov	r4,r2
    63b8:	194b883a 	add	r5,r3,r5
    63bc:	843fffc4 	addi	r16,r16,-1
    63c0:	d9801115 	stw	r6,68(sp)
    63c4:	000d883a 	mov	r6,zero
    63c8:	01cffe34 	movhi	r7,16376
    63cc:	000e4d00 	call	e4d0 <__subdf3>
    63d0:	0198dbf4 	movhi	r6,25455
    63d4:	01cff4f4 	movhi	r7,16339
    63d8:	3190d844 	addi	r6,r6,17249
    63dc:	39e1e9c4 	addi	r7,r7,-30809
    63e0:	1009883a 	mov	r4,r2
    63e4:	180b883a 	mov	r5,r3
    63e8:	000ddb80 	call	ddb8 <__muldf3>
    63ec:	01a2d874 	movhi	r6,35681
    63f0:	01cff1f4 	movhi	r7,16327
    63f4:	31b22cc4 	addi	r6,r6,-14157
    63f8:	39e28a04 	addi	r7,r7,-30168
    63fc:	180b883a 	mov	r5,r3
    6400:	1009883a 	mov	r4,r2
    6404:	000d2b40 	call	d2b4 <__adddf3>
    6408:	8009883a 	mov	r4,r16
    640c:	1029883a 	mov	r20,r2
    6410:	1823883a 	mov	r17,r3
    6414:	000ee4c0 	call	ee4c <__floatsidf>
    6418:	019427f4 	movhi	r6,20639
    641c:	01cff4f4 	movhi	r7,16339
    6420:	319e7ec4 	addi	r6,r6,31227
    6424:	39d104c4 	addi	r7,r7,17427
    6428:	1009883a 	mov	r4,r2
    642c:	180b883a 	mov	r5,r3
    6430:	000ddb80 	call	ddb8 <__muldf3>
    6434:	100d883a 	mov	r6,r2
    6438:	180f883a 	mov	r7,r3
    643c:	a009883a 	mov	r4,r20
    6440:	880b883a 	mov	r5,r17
    6444:	000d2b40 	call	d2b4 <__adddf3>
    6448:	1009883a 	mov	r4,r2
    644c:	180b883a 	mov	r5,r3
    6450:	1029883a 	mov	r20,r2
    6454:	1823883a 	mov	r17,r3
    6458:	000edcc0 	call	edcc <__fixdfsi>
    645c:	000d883a 	mov	r6,zero
    6460:	000f883a 	mov	r7,zero
    6464:	a009883a 	mov	r4,r20
    6468:	880b883a 	mov	r5,r17
    646c:	d8800515 	stw	r2,20(sp)
    6470:	000dcc40 	call	dcc4 <__ledf2>
    6474:	10028716 	blt	r2,zero,6e94 <_dtoa_r+0xc88>
    6478:	d8c00517 	ldw	r3,20(sp)
    647c:	00800584 	movi	r2,22
    6480:	10c27536 	bltu	r2,r3,6e58 <_dtoa_r+0xc4c>
    6484:	180490fa 	slli	r2,r3,3
    6488:	00c00074 	movhi	r3,1
    648c:	18c8b604 	addi	r3,r3,8920
    6490:	1885883a 	add	r2,r3,r2
    6494:	11000017 	ldw	r4,0(r2)
    6498:	11400117 	ldw	r5,4(r2)
    649c:	900d883a 	mov	r6,r18
    64a0:	980f883a 	mov	r7,r19
    64a4:	000dbe80 	call	dbe8 <__gedf2>
    64a8:	00828d0e 	bge	zero,r2,6ee0 <_dtoa_r+0xcd4>
    64ac:	d9000517 	ldw	r4,20(sp)
    64b0:	d8000e15 	stw	zero,56(sp)
    64b4:	213fffc4 	addi	r4,r4,-1
    64b8:	d9000515 	stw	r4,20(sp)
    64bc:	b42dc83a 	sub	r22,r22,r16
    64c0:	b5bfffc4 	addi	r22,r22,-1
    64c4:	b0026f16 	blt	r22,zero,6e84 <_dtoa_r+0xc78>
    64c8:	d8000815 	stw	zero,32(sp)
    64cc:	d9c00517 	ldw	r7,20(sp)
    64d0:	38026416 	blt	r7,zero,6e64 <_dtoa_r+0xc58>
    64d4:	b1ed883a 	add	r22,r22,r7
    64d8:	d9c00d15 	stw	r7,52(sp)
    64dc:	d8000a15 	stw	zero,40(sp)
    64e0:	d9800317 	ldw	r6,12(sp)
    64e4:	00800244 	movi	r2,9
    64e8:	11811436 	bltu	r2,r6,693c <_dtoa_r+0x730>
    64ec:	00800144 	movi	r2,5
    64f0:	1184e10e 	bge	r2,r6,7878 <_dtoa_r+0x166c>
    64f4:	31bfff04 	addi	r6,r6,-4
    64f8:	d9800315 	stw	r6,12(sp)
    64fc:	0023883a 	mov	r17,zero
    6500:	d9800317 	ldw	r6,12(sp)
    6504:	008000c4 	movi	r2,3
    6508:	30836726 	beq	r6,r2,72a8 <_dtoa_r+0x109c>
    650c:	1183410e 	bge	r2,r6,7214 <_dtoa_r+0x1008>
    6510:	d9c00317 	ldw	r7,12(sp)
    6514:	00800104 	movi	r2,4
    6518:	38827c26 	beq	r7,r2,6f0c <_dtoa_r+0xd00>
    651c:	00800144 	movi	r2,5
    6520:	3884c41e 	bne	r7,r2,7834 <_dtoa_r+0x1628>
    6524:	00800044 	movi	r2,1
    6528:	d8800b15 	stw	r2,44(sp)
    652c:	d8c00517 	ldw	r3,20(sp)
    6530:	d9002217 	ldw	r4,136(sp)
    6534:	1907883a 	add	r3,r3,r4
    6538:	19800044 	addi	r6,r3,1
    653c:	d8c00c15 	stw	r3,48(sp)
    6540:	d9800615 	stw	r6,24(sp)
    6544:	0183a40e 	bge	zero,r6,73d8 <_dtoa_r+0x11cc>
    6548:	d9800617 	ldw	r6,24(sp)
    654c:	3021883a 	mov	r16,r6
    6550:	e0001115 	stw	zero,68(fp)
    6554:	008005c4 	movi	r2,23
    6558:	1184c92e 	bgeu	r2,r6,7880 <_dtoa_r+0x1674>
    655c:	00c00044 	movi	r3,1
    6560:	00800104 	movi	r2,4
    6564:	1085883a 	add	r2,r2,r2
    6568:	11000504 	addi	r4,r2,20
    656c:	180b883a 	mov	r5,r3
    6570:	18c00044 	addi	r3,r3,1
    6574:	313ffb2e 	bgeu	r6,r4,6564 <__alt_data_end+0xff006564>
    6578:	e1401115 	stw	r5,68(fp)
    657c:	e009883a 	mov	r4,fp
    6580:	000909c0 	call	909c <_Balloc>
    6584:	d8800715 	stw	r2,28(sp)
    6588:	e0801015 	stw	r2,64(fp)
    658c:	00800384 	movi	r2,14
    6590:	1400f736 	bltu	r2,r16,6970 <_dtoa_r+0x764>
    6594:	8800f626 	beq	r17,zero,6970 <_dtoa_r+0x764>
    6598:	d9c00517 	ldw	r7,20(sp)
    659c:	01c39a0e 	bge	zero,r7,7408 <_dtoa_r+0x11fc>
    65a0:	388003cc 	andi	r2,r7,15
    65a4:	100490fa 	slli	r2,r2,3
    65a8:	382bd13a 	srai	r21,r7,4
    65ac:	00c00074 	movhi	r3,1
    65b0:	18c8b604 	addi	r3,r3,8920
    65b4:	1885883a 	add	r2,r3,r2
    65b8:	a8c0040c 	andi	r3,r21,16
    65bc:	12400017 	ldw	r9,0(r2)
    65c0:	12000117 	ldw	r8,4(r2)
    65c4:	18037926 	beq	r3,zero,73ac <_dtoa_r+0x11a0>
    65c8:	00800074 	movhi	r2,1
    65cc:	1088ac04 	addi	r2,r2,8880
    65d0:	11800817 	ldw	r6,32(r2)
    65d4:	11c00917 	ldw	r7,36(r2)
    65d8:	9009883a 	mov	r4,r18
    65dc:	980b883a 	mov	r5,r19
    65e0:	da001715 	stw	r8,92(sp)
    65e4:	da401615 	stw	r9,88(sp)
    65e8:	00027940 	call	2794 <__divdf3>
    65ec:	da001717 	ldw	r8,92(sp)
    65f0:	da401617 	ldw	r9,88(sp)
    65f4:	ad4003cc 	andi	r21,r21,15
    65f8:	040000c4 	movi	r16,3
    65fc:	1023883a 	mov	r17,r2
    6600:	1829883a 	mov	r20,r3
    6604:	a8001126 	beq	r21,zero,664c <_dtoa_r+0x440>
    6608:	05c00074 	movhi	r23,1
    660c:	bdc8ac04 	addi	r23,r23,8880
    6610:	4805883a 	mov	r2,r9
    6614:	4007883a 	mov	r3,r8
    6618:	a980004c 	andi	r6,r21,1
    661c:	1009883a 	mov	r4,r2
    6620:	a82bd07a 	srai	r21,r21,1
    6624:	180b883a 	mov	r5,r3
    6628:	30000426 	beq	r6,zero,663c <_dtoa_r+0x430>
    662c:	b9800017 	ldw	r6,0(r23)
    6630:	b9c00117 	ldw	r7,4(r23)
    6634:	84000044 	addi	r16,r16,1
    6638:	000ddb80 	call	ddb8 <__muldf3>
    663c:	bdc00204 	addi	r23,r23,8
    6640:	a83ff51e 	bne	r21,zero,6618 <__alt_data_end+0xff006618>
    6644:	1013883a 	mov	r9,r2
    6648:	1811883a 	mov	r8,r3
    664c:	480d883a 	mov	r6,r9
    6650:	400f883a 	mov	r7,r8
    6654:	8809883a 	mov	r4,r17
    6658:	a00b883a 	mov	r5,r20
    665c:	00027940 	call	2794 <__divdf3>
    6660:	d8800f15 	stw	r2,60(sp)
    6664:	d8c01015 	stw	r3,64(sp)
    6668:	d8c00e17 	ldw	r3,56(sp)
    666c:	18000626 	beq	r3,zero,6688 <_dtoa_r+0x47c>
    6670:	d9000f17 	ldw	r4,60(sp)
    6674:	d9401017 	ldw	r5,64(sp)
    6678:	000d883a 	mov	r6,zero
    667c:	01cffc34 	movhi	r7,16368
    6680:	000dcc40 	call	dcc4 <__ledf2>
    6684:	10040b16 	blt	r2,zero,76b4 <_dtoa_r+0x14a8>
    6688:	8009883a 	mov	r4,r16
    668c:	000ee4c0 	call	ee4c <__floatsidf>
    6690:	d9800f17 	ldw	r6,60(sp)
    6694:	d9c01017 	ldw	r7,64(sp)
    6698:	1009883a 	mov	r4,r2
    669c:	180b883a 	mov	r5,r3
    66a0:	000ddb80 	call	ddb8 <__muldf3>
    66a4:	000d883a 	mov	r6,zero
    66a8:	01d00734 	movhi	r7,16412
    66ac:	1009883a 	mov	r4,r2
    66b0:	180b883a 	mov	r5,r3
    66b4:	000d2b40 	call	d2b4 <__adddf3>
    66b8:	1021883a 	mov	r16,r2
    66bc:	d8800617 	ldw	r2,24(sp)
    66c0:	047f3034 	movhi	r17,64704
    66c4:	1c63883a 	add	r17,r3,r17
    66c8:	10031826 	beq	r2,zero,732c <_dtoa_r+0x1120>
    66cc:	d8c00517 	ldw	r3,20(sp)
    66d0:	db000617 	ldw	r12,24(sp)
    66d4:	d8c01315 	stw	r3,76(sp)
    66d8:	d9000b17 	ldw	r4,44(sp)
    66dc:	20038f26 	beq	r4,zero,751c <_dtoa_r+0x1310>
    66e0:	60bfffc4 	addi	r2,r12,-1
    66e4:	100490fa 	slli	r2,r2,3
    66e8:	00c00074 	movhi	r3,1
    66ec:	18c8b604 	addi	r3,r3,8920
    66f0:	1885883a 	add	r2,r3,r2
    66f4:	11800017 	ldw	r6,0(r2)
    66f8:	11c00117 	ldw	r7,4(r2)
    66fc:	d8800717 	ldw	r2,28(sp)
    6700:	0009883a 	mov	r4,zero
    6704:	014ff834 	movhi	r5,16352
    6708:	db001615 	stw	r12,88(sp)
    670c:	15c00044 	addi	r23,r2,1
    6710:	00027940 	call	2794 <__divdf3>
    6714:	800d883a 	mov	r6,r16
    6718:	880f883a 	mov	r7,r17
    671c:	1009883a 	mov	r4,r2
    6720:	180b883a 	mov	r5,r3
    6724:	000e4d00 	call	e4d0 <__subdf3>
    6728:	d9401017 	ldw	r5,64(sp)
    672c:	d9000f17 	ldw	r4,60(sp)
    6730:	102b883a 	mov	r21,r2
    6734:	d8c01215 	stw	r3,72(sp)
    6738:	000edcc0 	call	edcc <__fixdfsi>
    673c:	1009883a 	mov	r4,r2
    6740:	1029883a 	mov	r20,r2
    6744:	000ee4c0 	call	ee4c <__floatsidf>
    6748:	d9000f17 	ldw	r4,60(sp)
    674c:	d9401017 	ldw	r5,64(sp)
    6750:	100d883a 	mov	r6,r2
    6754:	180f883a 	mov	r7,r3
    6758:	000e4d00 	call	e4d0 <__subdf3>
    675c:	1823883a 	mov	r17,r3
    6760:	d8c00717 	ldw	r3,28(sp)
    6764:	d9401217 	ldw	r5,72(sp)
    6768:	a2000c04 	addi	r8,r20,48
    676c:	1021883a 	mov	r16,r2
    6770:	1a000005 	stb	r8,0(r3)
    6774:	800d883a 	mov	r6,r16
    6778:	880f883a 	mov	r7,r17
    677c:	a809883a 	mov	r4,r21
    6780:	4029883a 	mov	r20,r8
    6784:	000dbe80 	call	dbe8 <__gedf2>
    6788:	00841d16 	blt	zero,r2,7800 <_dtoa_r+0x15f4>
    678c:	800d883a 	mov	r6,r16
    6790:	880f883a 	mov	r7,r17
    6794:	0009883a 	mov	r4,zero
    6798:	014ffc34 	movhi	r5,16368
    679c:	000e4d00 	call	e4d0 <__subdf3>
    67a0:	d9401217 	ldw	r5,72(sp)
    67a4:	100d883a 	mov	r6,r2
    67a8:	180f883a 	mov	r7,r3
    67ac:	a809883a 	mov	r4,r21
    67b0:	000dbe80 	call	dbe8 <__gedf2>
    67b4:	db001617 	ldw	r12,88(sp)
    67b8:	00840e16 	blt	zero,r2,77f4 <_dtoa_r+0x15e8>
    67bc:	00800044 	movi	r2,1
    67c0:	13006b0e 	bge	r2,r12,6970 <_dtoa_r+0x764>
    67c4:	d9000717 	ldw	r4,28(sp)
    67c8:	dd800f15 	stw	r22,60(sp)
    67cc:	dcc01015 	stw	r19,64(sp)
    67d0:	2319883a 	add	r12,r4,r12
    67d4:	dcc01217 	ldw	r19,72(sp)
    67d8:	602d883a 	mov	r22,r12
    67dc:	dc801215 	stw	r18,72(sp)
    67e0:	b825883a 	mov	r18,r23
    67e4:	00000906 	br	680c <_dtoa_r+0x600>
    67e8:	000e4d00 	call	e4d0 <__subdf3>
    67ec:	a80d883a 	mov	r6,r21
    67f0:	980f883a 	mov	r7,r19
    67f4:	1009883a 	mov	r4,r2
    67f8:	180b883a 	mov	r5,r3
    67fc:	000dcc40 	call	dcc4 <__ledf2>
    6800:	1003e816 	blt	r2,zero,77a4 <_dtoa_r+0x1598>
    6804:	b825883a 	mov	r18,r23
    6808:	bd83e926 	beq	r23,r22,77b0 <_dtoa_r+0x15a4>
    680c:	a809883a 	mov	r4,r21
    6810:	980b883a 	mov	r5,r19
    6814:	000d883a 	mov	r6,zero
    6818:	01d00934 	movhi	r7,16420
    681c:	000ddb80 	call	ddb8 <__muldf3>
    6820:	000d883a 	mov	r6,zero
    6824:	01d00934 	movhi	r7,16420
    6828:	8009883a 	mov	r4,r16
    682c:	880b883a 	mov	r5,r17
    6830:	102b883a 	mov	r21,r2
    6834:	1827883a 	mov	r19,r3
    6838:	000ddb80 	call	ddb8 <__muldf3>
    683c:	180b883a 	mov	r5,r3
    6840:	1009883a 	mov	r4,r2
    6844:	1821883a 	mov	r16,r3
    6848:	1023883a 	mov	r17,r2
    684c:	000edcc0 	call	edcc <__fixdfsi>
    6850:	1009883a 	mov	r4,r2
    6854:	1029883a 	mov	r20,r2
    6858:	000ee4c0 	call	ee4c <__floatsidf>
    685c:	8809883a 	mov	r4,r17
    6860:	800b883a 	mov	r5,r16
    6864:	100d883a 	mov	r6,r2
    6868:	180f883a 	mov	r7,r3
    686c:	000e4d00 	call	e4d0 <__subdf3>
    6870:	a5000c04 	addi	r20,r20,48
    6874:	a80d883a 	mov	r6,r21
    6878:	980f883a 	mov	r7,r19
    687c:	1009883a 	mov	r4,r2
    6880:	180b883a 	mov	r5,r3
    6884:	95000005 	stb	r20,0(r18)
    6888:	1021883a 	mov	r16,r2
    688c:	1823883a 	mov	r17,r3
    6890:	000dcc40 	call	dcc4 <__ledf2>
    6894:	bdc00044 	addi	r23,r23,1
    6898:	800d883a 	mov	r6,r16
    689c:	880f883a 	mov	r7,r17
    68a0:	0009883a 	mov	r4,zero
    68a4:	014ffc34 	movhi	r5,16368
    68a8:	103fcf0e 	bge	r2,zero,67e8 <__alt_data_end+0xff0067e8>
    68ac:	d8c01317 	ldw	r3,76(sp)
    68b0:	d8c00515 	stw	r3,20(sp)
    68b4:	d9400917 	ldw	r5,36(sp)
    68b8:	e009883a 	mov	r4,fp
    68bc:	00091440 	call	9144 <_Bfree>
    68c0:	d9000517 	ldw	r4,20(sp)
    68c4:	d9802317 	ldw	r6,140(sp)
    68c8:	d9c02517 	ldw	r7,148(sp)
    68cc:	b8000005 	stb	zero,0(r23)
    68d0:	20800044 	addi	r2,r4,1
    68d4:	30800015 	stw	r2,0(r6)
    68d8:	3802aa26 	beq	r7,zero,7384 <_dtoa_r+0x1178>
    68dc:	3dc00015 	stw	r23,0(r7)
    68e0:	d8800717 	ldw	r2,28(sp)
    68e4:	003e7906 	br	62cc <__alt_data_end+0xff0062cc>
    68e8:	00800434 	movhi	r2,16
    68ec:	10bfffc4 	addi	r2,r2,-1
    68f0:	88a2703a 	and	r17,r17,r2
    68f4:	883e851e 	bne	r17,zero,630c <__alt_data_end+0xff00630c>
    68f8:	00800074 	movhi	r2,1
    68fc:	10889704 	addi	r2,r2,8796
    6900:	003e8406 	br	6314 <__alt_data_end+0xff006314>
    6904:	10c00204 	addi	r3,r2,8
    6908:	003e8706 	br	6328 <__alt_data_end+0xff006328>
    690c:	01400434 	movhi	r5,16
    6910:	297fffc4 	addi	r5,r5,-1
    6914:	994a703a 	and	r5,r19,r5
    6918:	9009883a 	mov	r4,r18
    691c:	843f0044 	addi	r16,r16,-1023
    6920:	294ffc34 	orhi	r5,r5,16368
    6924:	dd800217 	ldw	r22,8(sp)
    6928:	d8001115 	stw	zero,68(sp)
    692c:	003ea506 	br	63c4 <__alt_data_end+0xff0063c4>
    6930:	00800074 	movhi	r2,1
    6934:	10888e04 	addi	r2,r2,8760
    6938:	003e6406 	br	62cc <__alt_data_end+0xff0062cc>
    693c:	e0001115 	stw	zero,68(fp)
    6940:	000b883a 	mov	r5,zero
    6944:	e009883a 	mov	r4,fp
    6948:	000909c0 	call	909c <_Balloc>
    694c:	01bfffc4 	movi	r6,-1
    6950:	01c00044 	movi	r7,1
    6954:	d8800715 	stw	r2,28(sp)
    6958:	d9800c15 	stw	r6,48(sp)
    695c:	e0801015 	stw	r2,64(fp)
    6960:	d8000315 	stw	zero,12(sp)
    6964:	d9c00b15 	stw	r7,44(sp)
    6968:	d9800615 	stw	r6,24(sp)
    696c:	d8002215 	stw	zero,136(sp)
    6970:	d8800117 	ldw	r2,4(sp)
    6974:	10008916 	blt	r2,zero,6b9c <_dtoa_r+0x990>
    6978:	d9000517 	ldw	r4,20(sp)
    697c:	00c00384 	movi	r3,14
    6980:	19008616 	blt	r3,r4,6b9c <_dtoa_r+0x990>
    6984:	200490fa 	slli	r2,r4,3
    6988:	00c00074 	movhi	r3,1
    698c:	d9802217 	ldw	r6,136(sp)
    6990:	18c8b604 	addi	r3,r3,8920
    6994:	1885883a 	add	r2,r3,r2
    6998:	14000017 	ldw	r16,0(r2)
    699c:	14400117 	ldw	r17,4(r2)
    69a0:	30016316 	blt	r6,zero,6f30 <_dtoa_r+0xd24>
    69a4:	800d883a 	mov	r6,r16
    69a8:	880f883a 	mov	r7,r17
    69ac:	9009883a 	mov	r4,r18
    69b0:	980b883a 	mov	r5,r19
    69b4:	00027940 	call	2794 <__divdf3>
    69b8:	180b883a 	mov	r5,r3
    69bc:	1009883a 	mov	r4,r2
    69c0:	000edcc0 	call	edcc <__fixdfsi>
    69c4:	1009883a 	mov	r4,r2
    69c8:	102b883a 	mov	r21,r2
    69cc:	000ee4c0 	call	ee4c <__floatsidf>
    69d0:	800d883a 	mov	r6,r16
    69d4:	880f883a 	mov	r7,r17
    69d8:	1009883a 	mov	r4,r2
    69dc:	180b883a 	mov	r5,r3
    69e0:	000ddb80 	call	ddb8 <__muldf3>
    69e4:	100d883a 	mov	r6,r2
    69e8:	180f883a 	mov	r7,r3
    69ec:	9009883a 	mov	r4,r18
    69f0:	980b883a 	mov	r5,r19
    69f4:	000e4d00 	call	e4d0 <__subdf3>
    69f8:	d9c00717 	ldw	r7,28(sp)
    69fc:	1009883a 	mov	r4,r2
    6a00:	a8800c04 	addi	r2,r21,48
    6a04:	38800005 	stb	r2,0(r7)
    6a08:	3dc00044 	addi	r23,r7,1
    6a0c:	d9c00617 	ldw	r7,24(sp)
    6a10:	01800044 	movi	r6,1
    6a14:	180b883a 	mov	r5,r3
    6a18:	2005883a 	mov	r2,r4
    6a1c:	39803826 	beq	r7,r6,6b00 <_dtoa_r+0x8f4>
    6a20:	000d883a 	mov	r6,zero
    6a24:	01d00934 	movhi	r7,16420
    6a28:	000ddb80 	call	ddb8 <__muldf3>
    6a2c:	000d883a 	mov	r6,zero
    6a30:	000f883a 	mov	r7,zero
    6a34:	1009883a 	mov	r4,r2
    6a38:	180b883a 	mov	r5,r3
    6a3c:	1025883a 	mov	r18,r2
    6a40:	1827883a 	mov	r19,r3
    6a44:	000db600 	call	db60 <__eqdf2>
    6a48:	103f9a26 	beq	r2,zero,68b4 <__alt_data_end+0xff0068b4>
    6a4c:	d9c00617 	ldw	r7,24(sp)
    6a50:	d8c00717 	ldw	r3,28(sp)
    6a54:	b829883a 	mov	r20,r23
    6a58:	38bfffc4 	addi	r2,r7,-1
    6a5c:	18ad883a 	add	r22,r3,r2
    6a60:	00000a06 	br	6a8c <_dtoa_r+0x880>
    6a64:	000ddb80 	call	ddb8 <__muldf3>
    6a68:	000d883a 	mov	r6,zero
    6a6c:	000f883a 	mov	r7,zero
    6a70:	1009883a 	mov	r4,r2
    6a74:	180b883a 	mov	r5,r3
    6a78:	1025883a 	mov	r18,r2
    6a7c:	1827883a 	mov	r19,r3
    6a80:	b829883a 	mov	r20,r23
    6a84:	000db600 	call	db60 <__eqdf2>
    6a88:	103f8a26 	beq	r2,zero,68b4 <__alt_data_end+0xff0068b4>
    6a8c:	800d883a 	mov	r6,r16
    6a90:	880f883a 	mov	r7,r17
    6a94:	9009883a 	mov	r4,r18
    6a98:	980b883a 	mov	r5,r19
    6a9c:	00027940 	call	2794 <__divdf3>
    6aa0:	180b883a 	mov	r5,r3
    6aa4:	1009883a 	mov	r4,r2
    6aa8:	000edcc0 	call	edcc <__fixdfsi>
    6aac:	1009883a 	mov	r4,r2
    6ab0:	102b883a 	mov	r21,r2
    6ab4:	000ee4c0 	call	ee4c <__floatsidf>
    6ab8:	800d883a 	mov	r6,r16
    6abc:	880f883a 	mov	r7,r17
    6ac0:	1009883a 	mov	r4,r2
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	000ddb80 	call	ddb8 <__muldf3>
    6acc:	100d883a 	mov	r6,r2
    6ad0:	180f883a 	mov	r7,r3
    6ad4:	9009883a 	mov	r4,r18
    6ad8:	980b883a 	mov	r5,r19
    6adc:	000e4d00 	call	e4d0 <__subdf3>
    6ae0:	aa000c04 	addi	r8,r21,48
    6ae4:	a2000005 	stb	r8,0(r20)
    6ae8:	000d883a 	mov	r6,zero
    6aec:	01d00934 	movhi	r7,16420
    6af0:	1009883a 	mov	r4,r2
    6af4:	180b883a 	mov	r5,r3
    6af8:	a5c00044 	addi	r23,r20,1
    6afc:	b53fd91e 	bne	r22,r20,6a64 <__alt_data_end+0xff006a64>
    6b00:	100d883a 	mov	r6,r2
    6b04:	180f883a 	mov	r7,r3
    6b08:	1009883a 	mov	r4,r2
    6b0c:	180b883a 	mov	r5,r3
    6b10:	000d2b40 	call	d2b4 <__adddf3>
    6b14:	100d883a 	mov	r6,r2
    6b18:	180f883a 	mov	r7,r3
    6b1c:	8009883a 	mov	r4,r16
    6b20:	880b883a 	mov	r5,r17
    6b24:	1027883a 	mov	r19,r2
    6b28:	1825883a 	mov	r18,r3
    6b2c:	000dcc40 	call	dcc4 <__ledf2>
    6b30:	10000816 	blt	r2,zero,6b54 <_dtoa_r+0x948>
    6b34:	980d883a 	mov	r6,r19
    6b38:	900f883a 	mov	r7,r18
    6b3c:	8009883a 	mov	r4,r16
    6b40:	880b883a 	mov	r5,r17
    6b44:	000db600 	call	db60 <__eqdf2>
    6b48:	103f5a1e 	bne	r2,zero,68b4 <__alt_data_end+0xff0068b4>
    6b4c:	ad40004c 	andi	r21,r21,1
    6b50:	a83f5826 	beq	r21,zero,68b4 <__alt_data_end+0xff0068b4>
    6b54:	bd3fffc3 	ldbu	r20,-1(r23)
    6b58:	b8bfffc4 	addi	r2,r23,-1
    6b5c:	1007883a 	mov	r3,r2
    6b60:	01400e44 	movi	r5,57
    6b64:	d9800717 	ldw	r6,28(sp)
    6b68:	00000506 	br	6b80 <_dtoa_r+0x974>
    6b6c:	18ffffc4 	addi	r3,r3,-1
    6b70:	11824726 	beq	r2,r6,7490 <_dtoa_r+0x1284>
    6b74:	1d000003 	ldbu	r20,0(r3)
    6b78:	102f883a 	mov	r23,r2
    6b7c:	10bfffc4 	addi	r2,r2,-1
    6b80:	a1003fcc 	andi	r4,r20,255
    6b84:	2100201c 	xori	r4,r4,128
    6b88:	213fe004 	addi	r4,r4,-128
    6b8c:	217ff726 	beq	r4,r5,6b6c <__alt_data_end+0xff006b6c>
    6b90:	a2000044 	addi	r8,r20,1
    6b94:	12000005 	stb	r8,0(r2)
    6b98:	003f4606 	br	68b4 <__alt_data_end+0xff0068b4>
    6b9c:	d9000b17 	ldw	r4,44(sp)
    6ba0:	2000c826 	beq	r4,zero,6ec4 <_dtoa_r+0xcb8>
    6ba4:	d9800317 	ldw	r6,12(sp)
    6ba8:	00c00044 	movi	r3,1
    6bac:	1980f90e 	bge	r3,r6,6f94 <_dtoa_r+0xd88>
    6bb0:	d8800617 	ldw	r2,24(sp)
    6bb4:	d8c00a17 	ldw	r3,40(sp)
    6bb8:	157fffc4 	addi	r21,r2,-1
    6bbc:	1d41f316 	blt	r3,r21,738c <_dtoa_r+0x1180>
    6bc0:	1d6bc83a 	sub	r21,r3,r21
    6bc4:	d9c00617 	ldw	r7,24(sp)
    6bc8:	3802aa16 	blt	r7,zero,7674 <_dtoa_r+0x1468>
    6bcc:	dd000817 	ldw	r20,32(sp)
    6bd0:	d8800617 	ldw	r2,24(sp)
    6bd4:	d8c00817 	ldw	r3,32(sp)
    6bd8:	01400044 	movi	r5,1
    6bdc:	e009883a 	mov	r4,fp
    6be0:	1887883a 	add	r3,r3,r2
    6be4:	d8c00815 	stw	r3,32(sp)
    6be8:	b0ad883a 	add	r22,r22,r2
    6bec:	00094a80 	call	94a8 <__i2b>
    6bf0:	1023883a 	mov	r17,r2
    6bf4:	a0000826 	beq	r20,zero,6c18 <_dtoa_r+0xa0c>
    6bf8:	0580070e 	bge	zero,r22,6c18 <_dtoa_r+0xa0c>
    6bfc:	a005883a 	mov	r2,r20
    6c00:	b500b916 	blt	r22,r20,6ee8 <_dtoa_r+0xcdc>
    6c04:	d9000817 	ldw	r4,32(sp)
    6c08:	a0a9c83a 	sub	r20,r20,r2
    6c0c:	b0adc83a 	sub	r22,r22,r2
    6c10:	2089c83a 	sub	r4,r4,r2
    6c14:	d9000815 	stw	r4,32(sp)
    6c18:	d9800a17 	ldw	r6,40(sp)
    6c1c:	0181810e 	bge	zero,r6,7224 <_dtoa_r+0x1018>
    6c20:	d9c00b17 	ldw	r7,44(sp)
    6c24:	3800b326 	beq	r7,zero,6ef4 <_dtoa_r+0xce8>
    6c28:	a800b226 	beq	r21,zero,6ef4 <_dtoa_r+0xce8>
    6c2c:	880b883a 	mov	r5,r17
    6c30:	a80d883a 	mov	r6,r21
    6c34:	e009883a 	mov	r4,fp
    6c38:	00096dc0 	call	96dc <__pow5mult>
    6c3c:	d9800917 	ldw	r6,36(sp)
    6c40:	100b883a 	mov	r5,r2
    6c44:	e009883a 	mov	r4,fp
    6c48:	1023883a 	mov	r17,r2
    6c4c:	00094e40 	call	94e4 <__multiply>
    6c50:	1021883a 	mov	r16,r2
    6c54:	d8800a17 	ldw	r2,40(sp)
    6c58:	d9400917 	ldw	r5,36(sp)
    6c5c:	e009883a 	mov	r4,fp
    6c60:	1545c83a 	sub	r2,r2,r21
    6c64:	d8800a15 	stw	r2,40(sp)
    6c68:	00091440 	call	9144 <_Bfree>
    6c6c:	d8c00a17 	ldw	r3,40(sp)
    6c70:	18009f1e 	bne	r3,zero,6ef0 <_dtoa_r+0xce4>
    6c74:	05c00044 	movi	r23,1
    6c78:	e009883a 	mov	r4,fp
    6c7c:	b80b883a 	mov	r5,r23
    6c80:	00094a80 	call	94a8 <__i2b>
    6c84:	d9000d17 	ldw	r4,52(sp)
    6c88:	102b883a 	mov	r21,r2
    6c8c:	2000ce26 	beq	r4,zero,6fc8 <_dtoa_r+0xdbc>
    6c90:	200d883a 	mov	r6,r4
    6c94:	100b883a 	mov	r5,r2
    6c98:	e009883a 	mov	r4,fp
    6c9c:	00096dc0 	call	96dc <__pow5mult>
    6ca0:	d9800317 	ldw	r6,12(sp)
    6ca4:	102b883a 	mov	r21,r2
    6ca8:	b981810e 	bge	r23,r6,72b0 <_dtoa_r+0x10a4>
    6cac:	0027883a 	mov	r19,zero
    6cb0:	a8800417 	ldw	r2,16(r21)
    6cb4:	05c00804 	movi	r23,32
    6cb8:	10800104 	addi	r2,r2,4
    6cbc:	1085883a 	add	r2,r2,r2
    6cc0:	1085883a 	add	r2,r2,r2
    6cc4:	a885883a 	add	r2,r21,r2
    6cc8:	11000017 	ldw	r4,0(r2)
    6ccc:	00093900 	call	9390 <__hi0bits>
    6cd0:	b885c83a 	sub	r2,r23,r2
    6cd4:	1585883a 	add	r2,r2,r22
    6cd8:	108007cc 	andi	r2,r2,31
    6cdc:	1000b326 	beq	r2,zero,6fac <_dtoa_r+0xda0>
    6ce0:	00c00804 	movi	r3,32
    6ce4:	1887c83a 	sub	r3,r3,r2
    6ce8:	01000104 	movi	r4,4
    6cec:	20c2cd0e 	bge	r4,r3,7824 <_dtoa_r+0x1618>
    6cf0:	00c00704 	movi	r3,28
    6cf4:	1885c83a 	sub	r2,r3,r2
    6cf8:	d8c00817 	ldw	r3,32(sp)
    6cfc:	a0a9883a 	add	r20,r20,r2
    6d00:	b0ad883a 	add	r22,r22,r2
    6d04:	1887883a 	add	r3,r3,r2
    6d08:	d8c00815 	stw	r3,32(sp)
    6d0c:	d9800817 	ldw	r6,32(sp)
    6d10:	0180040e 	bge	zero,r6,6d24 <_dtoa_r+0xb18>
    6d14:	800b883a 	mov	r5,r16
    6d18:	e009883a 	mov	r4,fp
    6d1c:	000981c0 	call	981c <__lshift>
    6d20:	1021883a 	mov	r16,r2
    6d24:	0580050e 	bge	zero,r22,6d3c <_dtoa_r+0xb30>
    6d28:	a80b883a 	mov	r5,r21
    6d2c:	b00d883a 	mov	r6,r22
    6d30:	e009883a 	mov	r4,fp
    6d34:	000981c0 	call	981c <__lshift>
    6d38:	102b883a 	mov	r21,r2
    6d3c:	d9c00e17 	ldw	r7,56(sp)
    6d40:	3801211e 	bne	r7,zero,71c8 <_dtoa_r+0xfbc>
    6d44:	d9800617 	ldw	r6,24(sp)
    6d48:	0181380e 	bge	zero,r6,722c <_dtoa_r+0x1020>
    6d4c:	d8c00b17 	ldw	r3,44(sp)
    6d50:	1800ab1e 	bne	r3,zero,7000 <_dtoa_r+0xdf4>
    6d54:	dc800717 	ldw	r18,28(sp)
    6d58:	dcc00617 	ldw	r19,24(sp)
    6d5c:	9029883a 	mov	r20,r18
    6d60:	00000206 	br	6d6c <_dtoa_r+0xb60>
    6d64:	000916c0 	call	916c <__multadd>
    6d68:	1021883a 	mov	r16,r2
    6d6c:	a80b883a 	mov	r5,r21
    6d70:	8009883a 	mov	r4,r16
    6d74:	000600c0 	call	600c <quorem>
    6d78:	10800c04 	addi	r2,r2,48
    6d7c:	90800005 	stb	r2,0(r18)
    6d80:	94800044 	addi	r18,r18,1
    6d84:	9507c83a 	sub	r3,r18,r20
    6d88:	000f883a 	mov	r7,zero
    6d8c:	01800284 	movi	r6,10
    6d90:	800b883a 	mov	r5,r16
    6d94:	e009883a 	mov	r4,fp
    6d98:	1cfff216 	blt	r3,r19,6d64 <__alt_data_end+0xff006d64>
    6d9c:	1011883a 	mov	r8,r2
    6da0:	d8800617 	ldw	r2,24(sp)
    6da4:	0082370e 	bge	zero,r2,7684 <_dtoa_r+0x1478>
    6da8:	d9000717 	ldw	r4,28(sp)
    6dac:	0025883a 	mov	r18,zero
    6db0:	20af883a 	add	r23,r4,r2
    6db4:	01800044 	movi	r6,1
    6db8:	800b883a 	mov	r5,r16
    6dbc:	e009883a 	mov	r4,fp
    6dc0:	da001715 	stw	r8,92(sp)
    6dc4:	000981c0 	call	981c <__lshift>
    6dc8:	a80b883a 	mov	r5,r21
    6dcc:	1009883a 	mov	r4,r2
    6dd0:	d8800915 	stw	r2,36(sp)
    6dd4:	00099640 	call	9964 <__mcmp>
    6dd8:	da001717 	ldw	r8,92(sp)
    6ddc:	0081800e 	bge	zero,r2,73e0 <_dtoa_r+0x11d4>
    6de0:	b93fffc3 	ldbu	r4,-1(r23)
    6de4:	b8bfffc4 	addi	r2,r23,-1
    6de8:	1007883a 	mov	r3,r2
    6dec:	01800e44 	movi	r6,57
    6df0:	d9c00717 	ldw	r7,28(sp)
    6df4:	00000506 	br	6e0c <_dtoa_r+0xc00>
    6df8:	18ffffc4 	addi	r3,r3,-1
    6dfc:	11c12326 	beq	r2,r7,728c <_dtoa_r+0x1080>
    6e00:	19000003 	ldbu	r4,0(r3)
    6e04:	102f883a 	mov	r23,r2
    6e08:	10bfffc4 	addi	r2,r2,-1
    6e0c:	21403fcc 	andi	r5,r4,255
    6e10:	2940201c 	xori	r5,r5,128
    6e14:	297fe004 	addi	r5,r5,-128
    6e18:	29bff726 	beq	r5,r6,6df8 <__alt_data_end+0xff006df8>
    6e1c:	21000044 	addi	r4,r4,1
    6e20:	11000005 	stb	r4,0(r2)
    6e24:	a80b883a 	mov	r5,r21
    6e28:	e009883a 	mov	r4,fp
    6e2c:	00091440 	call	9144 <_Bfree>
    6e30:	883ea026 	beq	r17,zero,68b4 <__alt_data_end+0xff0068b4>
    6e34:	90000426 	beq	r18,zero,6e48 <_dtoa_r+0xc3c>
    6e38:	94400326 	beq	r18,r17,6e48 <_dtoa_r+0xc3c>
    6e3c:	900b883a 	mov	r5,r18
    6e40:	e009883a 	mov	r4,fp
    6e44:	00091440 	call	9144 <_Bfree>
    6e48:	880b883a 	mov	r5,r17
    6e4c:	e009883a 	mov	r4,fp
    6e50:	00091440 	call	9144 <_Bfree>
    6e54:	003e9706 	br	68b4 <__alt_data_end+0xff0068b4>
    6e58:	01800044 	movi	r6,1
    6e5c:	d9800e15 	stw	r6,56(sp)
    6e60:	003d9606 	br	64bc <__alt_data_end+0xff0064bc>
    6e64:	d8800817 	ldw	r2,32(sp)
    6e68:	d8c00517 	ldw	r3,20(sp)
    6e6c:	d8000d15 	stw	zero,52(sp)
    6e70:	10c5c83a 	sub	r2,r2,r3
    6e74:	00c9c83a 	sub	r4,zero,r3
    6e78:	d8800815 	stw	r2,32(sp)
    6e7c:	d9000a15 	stw	r4,40(sp)
    6e80:	003d9706 	br	64e0 <__alt_data_end+0xff0064e0>
    6e84:	05adc83a 	sub	r22,zero,r22
    6e88:	dd800815 	stw	r22,32(sp)
    6e8c:	002d883a 	mov	r22,zero
    6e90:	003d8e06 	br	64cc <__alt_data_end+0xff0064cc>
    6e94:	d9000517 	ldw	r4,20(sp)
    6e98:	000ee4c0 	call	ee4c <__floatsidf>
    6e9c:	100d883a 	mov	r6,r2
    6ea0:	180f883a 	mov	r7,r3
    6ea4:	a009883a 	mov	r4,r20
    6ea8:	880b883a 	mov	r5,r17
    6eac:	000db600 	call	db60 <__eqdf2>
    6eb0:	103d7126 	beq	r2,zero,6478 <__alt_data_end+0xff006478>
    6eb4:	d9c00517 	ldw	r7,20(sp)
    6eb8:	39ffffc4 	addi	r7,r7,-1
    6ebc:	d9c00515 	stw	r7,20(sp)
    6ec0:	003d6d06 	br	6478 <__alt_data_end+0xff006478>
    6ec4:	dd400a17 	ldw	r21,40(sp)
    6ec8:	dd000817 	ldw	r20,32(sp)
    6ecc:	0023883a 	mov	r17,zero
    6ed0:	003f4806 	br	6bf4 <__alt_data_end+0xff006bf4>
    6ed4:	10e3c83a 	sub	r17,r2,r3
    6ed8:	9448983a 	sll	r4,r18,r17
    6edc:	003d3206 	br	63a8 <__alt_data_end+0xff0063a8>
    6ee0:	d8000e15 	stw	zero,56(sp)
    6ee4:	003d7506 	br	64bc <__alt_data_end+0xff0064bc>
    6ee8:	b005883a 	mov	r2,r22
    6eec:	003f4506 	br	6c04 <__alt_data_end+0xff006c04>
    6ef0:	dc000915 	stw	r16,36(sp)
    6ef4:	d9800a17 	ldw	r6,40(sp)
    6ef8:	d9400917 	ldw	r5,36(sp)
    6efc:	e009883a 	mov	r4,fp
    6f00:	00096dc0 	call	96dc <__pow5mult>
    6f04:	1021883a 	mov	r16,r2
    6f08:	003f5a06 	br	6c74 <__alt_data_end+0xff006c74>
    6f0c:	01c00044 	movi	r7,1
    6f10:	d9c00b15 	stw	r7,44(sp)
    6f14:	d8802217 	ldw	r2,136(sp)
    6f18:	0081280e 	bge	zero,r2,73bc <_dtoa_r+0x11b0>
    6f1c:	100d883a 	mov	r6,r2
    6f20:	1021883a 	mov	r16,r2
    6f24:	d8800c15 	stw	r2,48(sp)
    6f28:	d8800615 	stw	r2,24(sp)
    6f2c:	003d8806 	br	6550 <__alt_data_end+0xff006550>
    6f30:	d8800617 	ldw	r2,24(sp)
    6f34:	00be9b16 	blt	zero,r2,69a4 <__alt_data_end+0xff0069a4>
    6f38:	10010f1e 	bne	r2,zero,7378 <_dtoa_r+0x116c>
    6f3c:	880b883a 	mov	r5,r17
    6f40:	000d883a 	mov	r6,zero
    6f44:	01d00534 	movhi	r7,16404
    6f48:	8009883a 	mov	r4,r16
    6f4c:	000ddb80 	call	ddb8 <__muldf3>
    6f50:	900d883a 	mov	r6,r18
    6f54:	980f883a 	mov	r7,r19
    6f58:	1009883a 	mov	r4,r2
    6f5c:	180b883a 	mov	r5,r3
    6f60:	000dbe80 	call	dbe8 <__gedf2>
    6f64:	002b883a 	mov	r21,zero
    6f68:	0023883a 	mov	r17,zero
    6f6c:	1000bf16 	blt	r2,zero,726c <_dtoa_r+0x1060>
    6f70:	d9802217 	ldw	r6,136(sp)
    6f74:	ddc00717 	ldw	r23,28(sp)
    6f78:	018c303a 	nor	r6,zero,r6
    6f7c:	d9800515 	stw	r6,20(sp)
    6f80:	a80b883a 	mov	r5,r21
    6f84:	e009883a 	mov	r4,fp
    6f88:	00091440 	call	9144 <_Bfree>
    6f8c:	883e4926 	beq	r17,zero,68b4 <__alt_data_end+0xff0068b4>
    6f90:	003fad06 	br	6e48 <__alt_data_end+0xff006e48>
    6f94:	d9c01117 	ldw	r7,68(sp)
    6f98:	3801bc26 	beq	r7,zero,768c <_dtoa_r+0x1480>
    6f9c:	10810cc4 	addi	r2,r2,1075
    6fa0:	dd400a17 	ldw	r21,40(sp)
    6fa4:	dd000817 	ldw	r20,32(sp)
    6fa8:	003f0a06 	br	6bd4 <__alt_data_end+0xff006bd4>
    6fac:	00800704 	movi	r2,28
    6fb0:	d9000817 	ldw	r4,32(sp)
    6fb4:	a0a9883a 	add	r20,r20,r2
    6fb8:	b0ad883a 	add	r22,r22,r2
    6fbc:	2089883a 	add	r4,r4,r2
    6fc0:	d9000815 	stw	r4,32(sp)
    6fc4:	003f5106 	br	6d0c <__alt_data_end+0xff006d0c>
    6fc8:	d8c00317 	ldw	r3,12(sp)
    6fcc:	b8c1fc0e 	bge	r23,r3,77c0 <_dtoa_r+0x15b4>
    6fd0:	0027883a 	mov	r19,zero
    6fd4:	b805883a 	mov	r2,r23
    6fd8:	003f3e06 	br	6cd4 <__alt_data_end+0xff006cd4>
    6fdc:	880b883a 	mov	r5,r17
    6fe0:	e009883a 	mov	r4,fp
    6fe4:	000f883a 	mov	r7,zero
    6fe8:	01800284 	movi	r6,10
    6fec:	000916c0 	call	916c <__multadd>
    6ff0:	d9000c17 	ldw	r4,48(sp)
    6ff4:	1023883a 	mov	r17,r2
    6ff8:	0102040e 	bge	zero,r4,780c <_dtoa_r+0x1600>
    6ffc:	d9000615 	stw	r4,24(sp)
    7000:	0500050e 	bge	zero,r20,7018 <_dtoa_r+0xe0c>
    7004:	880b883a 	mov	r5,r17
    7008:	a00d883a 	mov	r6,r20
    700c:	e009883a 	mov	r4,fp
    7010:	000981c0 	call	981c <__lshift>
    7014:	1023883a 	mov	r17,r2
    7018:	9801241e 	bne	r19,zero,74ac <_dtoa_r+0x12a0>
    701c:	8829883a 	mov	r20,r17
    7020:	d9000617 	ldw	r4,24(sp)
    7024:	dcc00717 	ldw	r19,28(sp)
    7028:	9480004c 	andi	r18,r18,1
    702c:	20bfffc4 	addi	r2,r4,-1
    7030:	9885883a 	add	r2,r19,r2
    7034:	d8800415 	stw	r2,16(sp)
    7038:	dc800615 	stw	r18,24(sp)
    703c:	a80b883a 	mov	r5,r21
    7040:	8009883a 	mov	r4,r16
    7044:	000600c0 	call	600c <quorem>
    7048:	880b883a 	mov	r5,r17
    704c:	8009883a 	mov	r4,r16
    7050:	102f883a 	mov	r23,r2
    7054:	00099640 	call	9964 <__mcmp>
    7058:	a80b883a 	mov	r5,r21
    705c:	a00d883a 	mov	r6,r20
    7060:	e009883a 	mov	r4,fp
    7064:	102d883a 	mov	r22,r2
    7068:	00099c40 	call	99c4 <__mdiff>
    706c:	1007883a 	mov	r3,r2
    7070:	10800317 	ldw	r2,12(r2)
    7074:	bc800c04 	addi	r18,r23,48
    7078:	180b883a 	mov	r5,r3
    707c:	10004e1e 	bne	r2,zero,71b8 <_dtoa_r+0xfac>
    7080:	8009883a 	mov	r4,r16
    7084:	d8c01615 	stw	r3,88(sp)
    7088:	00099640 	call	9964 <__mcmp>
    708c:	d8c01617 	ldw	r3,88(sp)
    7090:	e009883a 	mov	r4,fp
    7094:	d8801615 	stw	r2,88(sp)
    7098:	180b883a 	mov	r5,r3
    709c:	00091440 	call	9144 <_Bfree>
    70a0:	d8801617 	ldw	r2,88(sp)
    70a4:	1000041e 	bne	r2,zero,70b8 <_dtoa_r+0xeac>
    70a8:	d9800317 	ldw	r6,12(sp)
    70ac:	3000021e 	bne	r6,zero,70b8 <_dtoa_r+0xeac>
    70b0:	d8c00617 	ldw	r3,24(sp)
    70b4:	18003726 	beq	r3,zero,7194 <_dtoa_r+0xf88>
    70b8:	b0002016 	blt	r22,zero,713c <_dtoa_r+0xf30>
    70bc:	b000041e 	bne	r22,zero,70d0 <_dtoa_r+0xec4>
    70c0:	d9000317 	ldw	r4,12(sp)
    70c4:	2000021e 	bne	r4,zero,70d0 <_dtoa_r+0xec4>
    70c8:	d8c00617 	ldw	r3,24(sp)
    70cc:	18001b26 	beq	r3,zero,713c <_dtoa_r+0xf30>
    70d0:	00810716 	blt	zero,r2,74f0 <_dtoa_r+0x12e4>
    70d4:	d8c00417 	ldw	r3,16(sp)
    70d8:	9d800044 	addi	r22,r19,1
    70dc:	9c800005 	stb	r18,0(r19)
    70e0:	b02f883a 	mov	r23,r22
    70e4:	98c10626 	beq	r19,r3,7500 <_dtoa_r+0x12f4>
    70e8:	800b883a 	mov	r5,r16
    70ec:	000f883a 	mov	r7,zero
    70f0:	01800284 	movi	r6,10
    70f4:	e009883a 	mov	r4,fp
    70f8:	000916c0 	call	916c <__multadd>
    70fc:	1021883a 	mov	r16,r2
    7100:	000f883a 	mov	r7,zero
    7104:	01800284 	movi	r6,10
    7108:	880b883a 	mov	r5,r17
    710c:	e009883a 	mov	r4,fp
    7110:	8d002526 	beq	r17,r20,71a8 <_dtoa_r+0xf9c>
    7114:	000916c0 	call	916c <__multadd>
    7118:	a00b883a 	mov	r5,r20
    711c:	000f883a 	mov	r7,zero
    7120:	01800284 	movi	r6,10
    7124:	e009883a 	mov	r4,fp
    7128:	1023883a 	mov	r17,r2
    712c:	000916c0 	call	916c <__multadd>
    7130:	1029883a 	mov	r20,r2
    7134:	b027883a 	mov	r19,r22
    7138:	003fc006 	br	703c <__alt_data_end+0xff00703c>
    713c:	9011883a 	mov	r8,r18
    7140:	00800e0e 	bge	zero,r2,717c <_dtoa_r+0xf70>
    7144:	800b883a 	mov	r5,r16
    7148:	01800044 	movi	r6,1
    714c:	e009883a 	mov	r4,fp
    7150:	da001715 	stw	r8,92(sp)
    7154:	000981c0 	call	981c <__lshift>
    7158:	a80b883a 	mov	r5,r21
    715c:	1009883a 	mov	r4,r2
    7160:	1021883a 	mov	r16,r2
    7164:	00099640 	call	9964 <__mcmp>
    7168:	da001717 	ldw	r8,92(sp)
    716c:	0081960e 	bge	zero,r2,77c8 <_dtoa_r+0x15bc>
    7170:	00800e44 	movi	r2,57
    7174:	40817026 	beq	r8,r2,7738 <_dtoa_r+0x152c>
    7178:	ba000c44 	addi	r8,r23,49
    717c:	8825883a 	mov	r18,r17
    7180:	9dc00044 	addi	r23,r19,1
    7184:	9a000005 	stb	r8,0(r19)
    7188:	a023883a 	mov	r17,r20
    718c:	dc000915 	stw	r16,36(sp)
    7190:	003f2406 	br	6e24 <__alt_data_end+0xff006e24>
    7194:	00800e44 	movi	r2,57
    7198:	9011883a 	mov	r8,r18
    719c:	90816626 	beq	r18,r2,7738 <_dtoa_r+0x152c>
    71a0:	05bff516 	blt	zero,r22,7178 <__alt_data_end+0xff007178>
    71a4:	003ff506 	br	717c <__alt_data_end+0xff00717c>
    71a8:	000916c0 	call	916c <__multadd>
    71ac:	1023883a 	mov	r17,r2
    71b0:	1029883a 	mov	r20,r2
    71b4:	003fdf06 	br	7134 <__alt_data_end+0xff007134>
    71b8:	e009883a 	mov	r4,fp
    71bc:	00091440 	call	9144 <_Bfree>
    71c0:	00800044 	movi	r2,1
    71c4:	003fbc06 	br	70b8 <__alt_data_end+0xff0070b8>
    71c8:	a80b883a 	mov	r5,r21
    71cc:	8009883a 	mov	r4,r16
    71d0:	00099640 	call	9964 <__mcmp>
    71d4:	103edb0e 	bge	r2,zero,6d44 <__alt_data_end+0xff006d44>
    71d8:	800b883a 	mov	r5,r16
    71dc:	000f883a 	mov	r7,zero
    71e0:	01800284 	movi	r6,10
    71e4:	e009883a 	mov	r4,fp
    71e8:	000916c0 	call	916c <__multadd>
    71ec:	1021883a 	mov	r16,r2
    71f0:	d8800517 	ldw	r2,20(sp)
    71f4:	d8c00b17 	ldw	r3,44(sp)
    71f8:	10bfffc4 	addi	r2,r2,-1
    71fc:	d8800515 	stw	r2,20(sp)
    7200:	183f761e 	bne	r3,zero,6fdc <__alt_data_end+0xff006fdc>
    7204:	d9000c17 	ldw	r4,48(sp)
    7208:	0101730e 	bge	zero,r4,77d8 <_dtoa_r+0x15cc>
    720c:	d9000615 	stw	r4,24(sp)
    7210:	003ed006 	br	6d54 <__alt_data_end+0xff006d54>
    7214:	00800084 	movi	r2,2
    7218:	3081861e 	bne	r6,r2,7834 <_dtoa_r+0x1628>
    721c:	d8000b15 	stw	zero,44(sp)
    7220:	003f3c06 	br	6f14 <__alt_data_end+0xff006f14>
    7224:	dc000917 	ldw	r16,36(sp)
    7228:	003e9206 	br	6c74 <__alt_data_end+0xff006c74>
    722c:	d9c00317 	ldw	r7,12(sp)
    7230:	00800084 	movi	r2,2
    7234:	11fec50e 	bge	r2,r7,6d4c <__alt_data_end+0xff006d4c>
    7238:	d9000617 	ldw	r4,24(sp)
    723c:	20013c1e 	bne	r4,zero,7730 <_dtoa_r+0x1524>
    7240:	a80b883a 	mov	r5,r21
    7244:	000f883a 	mov	r7,zero
    7248:	01800144 	movi	r6,5
    724c:	e009883a 	mov	r4,fp
    7250:	000916c0 	call	916c <__multadd>
    7254:	100b883a 	mov	r5,r2
    7258:	8009883a 	mov	r4,r16
    725c:	102b883a 	mov	r21,r2
    7260:	00099640 	call	9964 <__mcmp>
    7264:	dc000915 	stw	r16,36(sp)
    7268:	00bf410e 	bge	zero,r2,6f70 <__alt_data_end+0xff006f70>
    726c:	d9c00717 	ldw	r7,28(sp)
    7270:	00800c44 	movi	r2,49
    7274:	38800005 	stb	r2,0(r7)
    7278:	d8800517 	ldw	r2,20(sp)
    727c:	3dc00044 	addi	r23,r7,1
    7280:	10800044 	addi	r2,r2,1
    7284:	d8800515 	stw	r2,20(sp)
    7288:	003f3d06 	br	6f80 <__alt_data_end+0xff006f80>
    728c:	d9800517 	ldw	r6,20(sp)
    7290:	d9c00717 	ldw	r7,28(sp)
    7294:	00800c44 	movi	r2,49
    7298:	31800044 	addi	r6,r6,1
    729c:	d9800515 	stw	r6,20(sp)
    72a0:	38800005 	stb	r2,0(r7)
    72a4:	003edf06 	br	6e24 <__alt_data_end+0xff006e24>
    72a8:	d8000b15 	stw	zero,44(sp)
    72ac:	003c9f06 	br	652c <__alt_data_end+0xff00652c>
    72b0:	903e7e1e 	bne	r18,zero,6cac <__alt_data_end+0xff006cac>
    72b4:	00800434 	movhi	r2,16
    72b8:	10bfffc4 	addi	r2,r2,-1
    72bc:	9884703a 	and	r2,r19,r2
    72c0:	1000ea1e 	bne	r2,zero,766c <_dtoa_r+0x1460>
    72c4:	9cdffc2c 	andhi	r19,r19,32752
    72c8:	9800e826 	beq	r19,zero,766c <_dtoa_r+0x1460>
    72cc:	d9c00817 	ldw	r7,32(sp)
    72d0:	b5800044 	addi	r22,r22,1
    72d4:	04c00044 	movi	r19,1
    72d8:	39c00044 	addi	r7,r7,1
    72dc:	d9c00815 	stw	r7,32(sp)
    72e0:	d8800d17 	ldw	r2,52(sp)
    72e4:	103e721e 	bne	r2,zero,6cb0 <__alt_data_end+0xff006cb0>
    72e8:	00800044 	movi	r2,1
    72ec:	003e7906 	br	6cd4 <__alt_data_end+0xff006cd4>
    72f0:	8009883a 	mov	r4,r16
    72f4:	000ee4c0 	call	ee4c <__floatsidf>
    72f8:	d9800f17 	ldw	r6,60(sp)
    72fc:	d9c01017 	ldw	r7,64(sp)
    7300:	1009883a 	mov	r4,r2
    7304:	180b883a 	mov	r5,r3
    7308:	000ddb80 	call	ddb8 <__muldf3>
    730c:	000d883a 	mov	r6,zero
    7310:	01d00734 	movhi	r7,16412
    7314:	1009883a 	mov	r4,r2
    7318:	180b883a 	mov	r5,r3
    731c:	000d2b40 	call	d2b4 <__adddf3>
    7320:	047f3034 	movhi	r17,64704
    7324:	1021883a 	mov	r16,r2
    7328:	1c63883a 	add	r17,r3,r17
    732c:	d9000f17 	ldw	r4,60(sp)
    7330:	d9401017 	ldw	r5,64(sp)
    7334:	000d883a 	mov	r6,zero
    7338:	01d00534 	movhi	r7,16404
    733c:	000e4d00 	call	e4d0 <__subdf3>
    7340:	800d883a 	mov	r6,r16
    7344:	880f883a 	mov	r7,r17
    7348:	1009883a 	mov	r4,r2
    734c:	180b883a 	mov	r5,r3
    7350:	102b883a 	mov	r21,r2
    7354:	1829883a 	mov	r20,r3
    7358:	000dbe80 	call	dbe8 <__gedf2>
    735c:	00806c16 	blt	zero,r2,7510 <_dtoa_r+0x1304>
    7360:	89e0003c 	xorhi	r7,r17,32768
    7364:	800d883a 	mov	r6,r16
    7368:	a809883a 	mov	r4,r21
    736c:	a00b883a 	mov	r5,r20
    7370:	000dcc40 	call	dcc4 <__ledf2>
    7374:	103d7e0e 	bge	r2,zero,6970 <__alt_data_end+0xff006970>
    7378:	002b883a 	mov	r21,zero
    737c:	0023883a 	mov	r17,zero
    7380:	003efb06 	br	6f70 <__alt_data_end+0xff006f70>
    7384:	d8800717 	ldw	r2,28(sp)
    7388:	003bd006 	br	62cc <__alt_data_end+0xff0062cc>
    738c:	d9000a17 	ldw	r4,40(sp)
    7390:	d9800d17 	ldw	r6,52(sp)
    7394:	dd400a15 	stw	r21,40(sp)
    7398:	a905c83a 	sub	r2,r21,r4
    739c:	308d883a 	add	r6,r6,r2
    73a0:	d9800d15 	stw	r6,52(sp)
    73a4:	002b883a 	mov	r21,zero
    73a8:	003e0606 	br	6bc4 <__alt_data_end+0xff006bc4>
    73ac:	9023883a 	mov	r17,r18
    73b0:	9829883a 	mov	r20,r19
    73b4:	04000084 	movi	r16,2
    73b8:	003c9206 	br	6604 <__alt_data_end+0xff006604>
    73bc:	04000044 	movi	r16,1
    73c0:	dc000c15 	stw	r16,48(sp)
    73c4:	dc000615 	stw	r16,24(sp)
    73c8:	dc002215 	stw	r16,136(sp)
    73cc:	e0001115 	stw	zero,68(fp)
    73d0:	000b883a 	mov	r5,zero
    73d4:	003c6906 	br	657c <__alt_data_end+0xff00657c>
    73d8:	3021883a 	mov	r16,r6
    73dc:	003ffb06 	br	73cc <__alt_data_end+0xff0073cc>
    73e0:	1000021e 	bne	r2,zero,73ec <_dtoa_r+0x11e0>
    73e4:	4200004c 	andi	r8,r8,1
    73e8:	403e7d1e 	bne	r8,zero,6de0 <__alt_data_end+0xff006de0>
    73ec:	01000c04 	movi	r4,48
    73f0:	00000106 	br	73f8 <_dtoa_r+0x11ec>
    73f4:	102f883a 	mov	r23,r2
    73f8:	b8bfffc4 	addi	r2,r23,-1
    73fc:	10c00007 	ldb	r3,0(r2)
    7400:	193ffc26 	beq	r3,r4,73f4 <__alt_data_end+0xff0073f4>
    7404:	003e8706 	br	6e24 <__alt_data_end+0xff006e24>
    7408:	d8800517 	ldw	r2,20(sp)
    740c:	00a3c83a 	sub	r17,zero,r2
    7410:	8800a426 	beq	r17,zero,76a4 <_dtoa_r+0x1498>
    7414:	888003cc 	andi	r2,r17,15
    7418:	100490fa 	slli	r2,r2,3
    741c:	00c00074 	movhi	r3,1
    7420:	18c8b604 	addi	r3,r3,8920
    7424:	1885883a 	add	r2,r3,r2
    7428:	11800017 	ldw	r6,0(r2)
    742c:	11c00117 	ldw	r7,4(r2)
    7430:	9009883a 	mov	r4,r18
    7434:	980b883a 	mov	r5,r19
    7438:	8823d13a 	srai	r17,r17,4
    743c:	000ddb80 	call	ddb8 <__muldf3>
    7440:	d8800f15 	stw	r2,60(sp)
    7444:	d8c01015 	stw	r3,64(sp)
    7448:	8800e826 	beq	r17,zero,77ec <_dtoa_r+0x15e0>
    744c:	05000074 	movhi	r20,1
    7450:	a508ac04 	addi	r20,r20,8880
    7454:	04000084 	movi	r16,2
    7458:	8980004c 	andi	r6,r17,1
    745c:	1009883a 	mov	r4,r2
    7460:	8823d07a 	srai	r17,r17,1
    7464:	180b883a 	mov	r5,r3
    7468:	30000426 	beq	r6,zero,747c <_dtoa_r+0x1270>
    746c:	a1800017 	ldw	r6,0(r20)
    7470:	a1c00117 	ldw	r7,4(r20)
    7474:	84000044 	addi	r16,r16,1
    7478:	000ddb80 	call	ddb8 <__muldf3>
    747c:	a5000204 	addi	r20,r20,8
    7480:	883ff51e 	bne	r17,zero,7458 <__alt_data_end+0xff007458>
    7484:	d8800f15 	stw	r2,60(sp)
    7488:	d8c01015 	stw	r3,64(sp)
    748c:	003c7606 	br	6668 <__alt_data_end+0xff006668>
    7490:	00c00c04 	movi	r3,48
    7494:	10c00005 	stb	r3,0(r2)
    7498:	d8c00517 	ldw	r3,20(sp)
    749c:	bd3fffc3 	ldbu	r20,-1(r23)
    74a0:	18c00044 	addi	r3,r3,1
    74a4:	d8c00515 	stw	r3,20(sp)
    74a8:	003db906 	br	6b90 <__alt_data_end+0xff006b90>
    74ac:	89400117 	ldw	r5,4(r17)
    74b0:	e009883a 	mov	r4,fp
    74b4:	000909c0 	call	909c <_Balloc>
    74b8:	89800417 	ldw	r6,16(r17)
    74bc:	89400304 	addi	r5,r17,12
    74c0:	11000304 	addi	r4,r2,12
    74c4:	31800084 	addi	r6,r6,2
    74c8:	318d883a 	add	r6,r6,r6
    74cc:	318d883a 	add	r6,r6,r6
    74d0:	1027883a 	mov	r19,r2
    74d4:	0008cd00 	call	8cd0 <memcpy>
    74d8:	01800044 	movi	r6,1
    74dc:	980b883a 	mov	r5,r19
    74e0:	e009883a 	mov	r4,fp
    74e4:	000981c0 	call	981c <__lshift>
    74e8:	1029883a 	mov	r20,r2
    74ec:	003ecc06 	br	7020 <__alt_data_end+0xff007020>
    74f0:	00800e44 	movi	r2,57
    74f4:	90809026 	beq	r18,r2,7738 <_dtoa_r+0x152c>
    74f8:	92000044 	addi	r8,r18,1
    74fc:	003f1f06 	br	717c <__alt_data_end+0xff00717c>
    7500:	9011883a 	mov	r8,r18
    7504:	8825883a 	mov	r18,r17
    7508:	a023883a 	mov	r17,r20
    750c:	003e2906 	br	6db4 <__alt_data_end+0xff006db4>
    7510:	002b883a 	mov	r21,zero
    7514:	0023883a 	mov	r17,zero
    7518:	003f5406 	br	726c <__alt_data_end+0xff00726c>
    751c:	61bfffc4 	addi	r6,r12,-1
    7520:	300490fa 	slli	r2,r6,3
    7524:	00c00074 	movhi	r3,1
    7528:	18c8b604 	addi	r3,r3,8920
    752c:	1885883a 	add	r2,r3,r2
    7530:	11000017 	ldw	r4,0(r2)
    7534:	11400117 	ldw	r5,4(r2)
    7538:	d8800717 	ldw	r2,28(sp)
    753c:	880f883a 	mov	r7,r17
    7540:	d9801215 	stw	r6,72(sp)
    7544:	800d883a 	mov	r6,r16
    7548:	db001615 	stw	r12,88(sp)
    754c:	15c00044 	addi	r23,r2,1
    7550:	000ddb80 	call	ddb8 <__muldf3>
    7554:	d9401017 	ldw	r5,64(sp)
    7558:	d9000f17 	ldw	r4,60(sp)
    755c:	d8c01515 	stw	r3,84(sp)
    7560:	d8801415 	stw	r2,80(sp)
    7564:	000edcc0 	call	edcc <__fixdfsi>
    7568:	1009883a 	mov	r4,r2
    756c:	1021883a 	mov	r16,r2
    7570:	000ee4c0 	call	ee4c <__floatsidf>
    7574:	d9000f17 	ldw	r4,60(sp)
    7578:	d9401017 	ldw	r5,64(sp)
    757c:	100d883a 	mov	r6,r2
    7580:	180f883a 	mov	r7,r3
    7584:	000e4d00 	call	e4d0 <__subdf3>
    7588:	1829883a 	mov	r20,r3
    758c:	d8c00717 	ldw	r3,28(sp)
    7590:	84000c04 	addi	r16,r16,48
    7594:	1023883a 	mov	r17,r2
    7598:	1c000005 	stb	r16,0(r3)
    759c:	db001617 	ldw	r12,88(sp)
    75a0:	00800044 	movi	r2,1
    75a4:	60802226 	beq	r12,r2,7630 <_dtoa_r+0x1424>
    75a8:	d9c00717 	ldw	r7,28(sp)
    75ac:	8805883a 	mov	r2,r17
    75b0:	b82b883a 	mov	r21,r23
    75b4:	3b19883a 	add	r12,r7,r12
    75b8:	6023883a 	mov	r17,r12
    75bc:	a007883a 	mov	r3,r20
    75c0:	dc800f15 	stw	r18,60(sp)
    75c4:	000d883a 	mov	r6,zero
    75c8:	01d00934 	movhi	r7,16420
    75cc:	1009883a 	mov	r4,r2
    75d0:	180b883a 	mov	r5,r3
    75d4:	000ddb80 	call	ddb8 <__muldf3>
    75d8:	180b883a 	mov	r5,r3
    75dc:	1009883a 	mov	r4,r2
    75e0:	1829883a 	mov	r20,r3
    75e4:	1025883a 	mov	r18,r2
    75e8:	000edcc0 	call	edcc <__fixdfsi>
    75ec:	1009883a 	mov	r4,r2
    75f0:	1021883a 	mov	r16,r2
    75f4:	000ee4c0 	call	ee4c <__floatsidf>
    75f8:	100d883a 	mov	r6,r2
    75fc:	180f883a 	mov	r7,r3
    7600:	9009883a 	mov	r4,r18
    7604:	a00b883a 	mov	r5,r20
    7608:	84000c04 	addi	r16,r16,48
    760c:	000e4d00 	call	e4d0 <__subdf3>
    7610:	ad400044 	addi	r21,r21,1
    7614:	ac3fffc5 	stb	r16,-1(r21)
    7618:	ac7fea1e 	bne	r21,r17,75c4 <__alt_data_end+0xff0075c4>
    761c:	1023883a 	mov	r17,r2
    7620:	d8801217 	ldw	r2,72(sp)
    7624:	dc800f17 	ldw	r18,60(sp)
    7628:	1829883a 	mov	r20,r3
    762c:	b8af883a 	add	r23,r23,r2
    7630:	d9001417 	ldw	r4,80(sp)
    7634:	d9401517 	ldw	r5,84(sp)
    7638:	000d883a 	mov	r6,zero
    763c:	01cff834 	movhi	r7,16352
    7640:	000d2b40 	call	d2b4 <__adddf3>
    7644:	880d883a 	mov	r6,r17
    7648:	a00f883a 	mov	r7,r20
    764c:	1009883a 	mov	r4,r2
    7650:	180b883a 	mov	r5,r3
    7654:	000dcc40 	call	dcc4 <__ledf2>
    7658:	10003e0e 	bge	r2,zero,7754 <_dtoa_r+0x1548>
    765c:	d9001317 	ldw	r4,76(sp)
    7660:	bd3fffc3 	ldbu	r20,-1(r23)
    7664:	d9000515 	stw	r4,20(sp)
    7668:	003d3b06 	br	6b58 <__alt_data_end+0xff006b58>
    766c:	0027883a 	mov	r19,zero
    7670:	003f1b06 	br	72e0 <__alt_data_end+0xff0072e0>
    7674:	d8800817 	ldw	r2,32(sp)
    7678:	11e9c83a 	sub	r20,r2,r7
    767c:	0005883a 	mov	r2,zero
    7680:	003d5406 	br	6bd4 <__alt_data_end+0xff006bd4>
    7684:	00800044 	movi	r2,1
    7688:	003dc706 	br	6da8 <__alt_data_end+0xff006da8>
    768c:	d8c00217 	ldw	r3,8(sp)
    7690:	00800d84 	movi	r2,54
    7694:	dd400a17 	ldw	r21,40(sp)
    7698:	10c5c83a 	sub	r2,r2,r3
    769c:	dd000817 	ldw	r20,32(sp)
    76a0:	003d4c06 	br	6bd4 <__alt_data_end+0xff006bd4>
    76a4:	dc800f15 	stw	r18,60(sp)
    76a8:	dcc01015 	stw	r19,64(sp)
    76ac:	04000084 	movi	r16,2
    76b0:	003bed06 	br	6668 <__alt_data_end+0xff006668>
    76b4:	d9000617 	ldw	r4,24(sp)
    76b8:	203f0d26 	beq	r4,zero,72f0 <__alt_data_end+0xff0072f0>
    76bc:	d9800c17 	ldw	r6,48(sp)
    76c0:	01bcab0e 	bge	zero,r6,6970 <__alt_data_end+0xff006970>
    76c4:	d9401017 	ldw	r5,64(sp)
    76c8:	d9000f17 	ldw	r4,60(sp)
    76cc:	000d883a 	mov	r6,zero
    76d0:	01d00934 	movhi	r7,16420
    76d4:	000ddb80 	call	ddb8 <__muldf3>
    76d8:	81000044 	addi	r4,r16,1
    76dc:	d8800f15 	stw	r2,60(sp)
    76e0:	d8c01015 	stw	r3,64(sp)
    76e4:	000ee4c0 	call	ee4c <__floatsidf>
    76e8:	d9800f17 	ldw	r6,60(sp)
    76ec:	d9c01017 	ldw	r7,64(sp)
    76f0:	1009883a 	mov	r4,r2
    76f4:	180b883a 	mov	r5,r3
    76f8:	000ddb80 	call	ddb8 <__muldf3>
    76fc:	01d00734 	movhi	r7,16412
    7700:	000d883a 	mov	r6,zero
    7704:	1009883a 	mov	r4,r2
    7708:	180b883a 	mov	r5,r3
    770c:	000d2b40 	call	d2b4 <__adddf3>
    7710:	d9c00517 	ldw	r7,20(sp)
    7714:	047f3034 	movhi	r17,64704
    7718:	1021883a 	mov	r16,r2
    771c:	39ffffc4 	addi	r7,r7,-1
    7720:	d9c01315 	stw	r7,76(sp)
    7724:	1c63883a 	add	r17,r3,r17
    7728:	db000c17 	ldw	r12,48(sp)
    772c:	003bea06 	br	66d8 <__alt_data_end+0xff0066d8>
    7730:	dc000915 	stw	r16,36(sp)
    7734:	003e0e06 	br	6f70 <__alt_data_end+0xff006f70>
    7738:	01000e44 	movi	r4,57
    773c:	8825883a 	mov	r18,r17
    7740:	9dc00044 	addi	r23,r19,1
    7744:	99000005 	stb	r4,0(r19)
    7748:	a023883a 	mov	r17,r20
    774c:	dc000915 	stw	r16,36(sp)
    7750:	003da406 	br	6de4 <__alt_data_end+0xff006de4>
    7754:	d9801417 	ldw	r6,80(sp)
    7758:	d9c01517 	ldw	r7,84(sp)
    775c:	0009883a 	mov	r4,zero
    7760:	014ff834 	movhi	r5,16352
    7764:	000e4d00 	call	e4d0 <__subdf3>
    7768:	880d883a 	mov	r6,r17
    776c:	a00f883a 	mov	r7,r20
    7770:	1009883a 	mov	r4,r2
    7774:	180b883a 	mov	r5,r3
    7778:	000dbe80 	call	dbe8 <__gedf2>
    777c:	00bc7c0e 	bge	zero,r2,6970 <__alt_data_end+0xff006970>
    7780:	01000c04 	movi	r4,48
    7784:	00000106 	br	778c <_dtoa_r+0x1580>
    7788:	102f883a 	mov	r23,r2
    778c:	b8bfffc4 	addi	r2,r23,-1
    7790:	10c00007 	ldb	r3,0(r2)
    7794:	193ffc26 	beq	r3,r4,7788 <__alt_data_end+0xff007788>
    7798:	d9801317 	ldw	r6,76(sp)
    779c:	d9800515 	stw	r6,20(sp)
    77a0:	003c4406 	br	68b4 <__alt_data_end+0xff0068b4>
    77a4:	d9801317 	ldw	r6,76(sp)
    77a8:	d9800515 	stw	r6,20(sp)
    77ac:	003cea06 	br	6b58 <__alt_data_end+0xff006b58>
    77b0:	dd800f17 	ldw	r22,60(sp)
    77b4:	dcc01017 	ldw	r19,64(sp)
    77b8:	dc801217 	ldw	r18,72(sp)
    77bc:	003c6c06 	br	6970 <__alt_data_end+0xff006970>
    77c0:	903e031e 	bne	r18,zero,6fd0 <__alt_data_end+0xff006fd0>
    77c4:	003ebb06 	br	72b4 <__alt_data_end+0xff0072b4>
    77c8:	103e6c1e 	bne	r2,zero,717c <__alt_data_end+0xff00717c>
    77cc:	4080004c 	andi	r2,r8,1
    77d0:	103e6a26 	beq	r2,zero,717c <__alt_data_end+0xff00717c>
    77d4:	003e6606 	br	7170 <__alt_data_end+0xff007170>
    77d8:	d8c00317 	ldw	r3,12(sp)
    77dc:	00800084 	movi	r2,2
    77e0:	10c02916 	blt	r2,r3,7888 <_dtoa_r+0x167c>
    77e4:	d9000c17 	ldw	r4,48(sp)
    77e8:	003e8806 	br	720c <__alt_data_end+0xff00720c>
    77ec:	04000084 	movi	r16,2
    77f0:	003b9d06 	br	6668 <__alt_data_end+0xff006668>
    77f4:	d9001317 	ldw	r4,76(sp)
    77f8:	d9000515 	stw	r4,20(sp)
    77fc:	003cd606 	br	6b58 <__alt_data_end+0xff006b58>
    7800:	d8801317 	ldw	r2,76(sp)
    7804:	d8800515 	stw	r2,20(sp)
    7808:	003c2a06 	br	68b4 <__alt_data_end+0xff0068b4>
    780c:	d9800317 	ldw	r6,12(sp)
    7810:	00800084 	movi	r2,2
    7814:	11801516 	blt	r2,r6,786c <_dtoa_r+0x1660>
    7818:	d9c00c17 	ldw	r7,48(sp)
    781c:	d9c00615 	stw	r7,24(sp)
    7820:	003df706 	br	7000 <__alt_data_end+0xff007000>
    7824:	193d3926 	beq	r3,r4,6d0c <__alt_data_end+0xff006d0c>
    7828:	00c00f04 	movi	r3,60
    782c:	1885c83a 	sub	r2,r3,r2
    7830:	003ddf06 	br	6fb0 <__alt_data_end+0xff006fb0>
    7834:	e009883a 	mov	r4,fp
    7838:	e0001115 	stw	zero,68(fp)
    783c:	000b883a 	mov	r5,zero
    7840:	000909c0 	call	909c <_Balloc>
    7844:	d8800715 	stw	r2,28(sp)
    7848:	d8c00717 	ldw	r3,28(sp)
    784c:	00bfffc4 	movi	r2,-1
    7850:	01000044 	movi	r4,1
    7854:	d8800c15 	stw	r2,48(sp)
    7858:	e0c01015 	stw	r3,64(fp)
    785c:	d9000b15 	stw	r4,44(sp)
    7860:	d8800615 	stw	r2,24(sp)
    7864:	d8002215 	stw	zero,136(sp)
    7868:	003c4106 	br	6970 <__alt_data_end+0xff006970>
    786c:	d8c00c17 	ldw	r3,48(sp)
    7870:	d8c00615 	stw	r3,24(sp)
    7874:	003e7006 	br	7238 <__alt_data_end+0xff007238>
    7878:	04400044 	movi	r17,1
    787c:	003b2006 	br	6500 <__alt_data_end+0xff006500>
    7880:	000b883a 	mov	r5,zero
    7884:	003b3d06 	br	657c <__alt_data_end+0xff00657c>
    7888:	d8800c17 	ldw	r2,48(sp)
    788c:	d8800615 	stw	r2,24(sp)
    7890:	003e6906 	br	7238 <__alt_data_end+0xff007238>

00007894 <__sflush_r>:
    7894:	2880030b 	ldhu	r2,12(r5)
    7898:	defffb04 	addi	sp,sp,-20
    789c:	dcc00315 	stw	r19,12(sp)
    78a0:	dc400115 	stw	r17,4(sp)
    78a4:	dfc00415 	stw	ra,16(sp)
    78a8:	dc800215 	stw	r18,8(sp)
    78ac:	dc000015 	stw	r16,0(sp)
    78b0:	10c0020c 	andi	r3,r2,8
    78b4:	2823883a 	mov	r17,r5
    78b8:	2027883a 	mov	r19,r4
    78bc:	1800311e 	bne	r3,zero,7984 <__sflush_r+0xf0>
    78c0:	28c00117 	ldw	r3,4(r5)
    78c4:	10820014 	ori	r2,r2,2048
    78c8:	2880030d 	sth	r2,12(r5)
    78cc:	00c04b0e 	bge	zero,r3,79fc <__sflush_r+0x168>
    78d0:	8a000a17 	ldw	r8,40(r17)
    78d4:	40002326 	beq	r8,zero,7964 <__sflush_r+0xd0>
    78d8:	9c000017 	ldw	r16,0(r19)
    78dc:	10c4000c 	andi	r3,r2,4096
    78e0:	98000015 	stw	zero,0(r19)
    78e4:	18004826 	beq	r3,zero,7a08 <__sflush_r+0x174>
    78e8:	89801417 	ldw	r6,80(r17)
    78ec:	10c0010c 	andi	r3,r2,4
    78f0:	18000626 	beq	r3,zero,790c <__sflush_r+0x78>
    78f4:	88c00117 	ldw	r3,4(r17)
    78f8:	88800c17 	ldw	r2,48(r17)
    78fc:	30cdc83a 	sub	r6,r6,r3
    7900:	10000226 	beq	r2,zero,790c <__sflush_r+0x78>
    7904:	88800f17 	ldw	r2,60(r17)
    7908:	308dc83a 	sub	r6,r6,r2
    790c:	89400717 	ldw	r5,28(r17)
    7910:	000f883a 	mov	r7,zero
    7914:	9809883a 	mov	r4,r19
    7918:	403ee83a 	callr	r8
    791c:	00ffffc4 	movi	r3,-1
    7920:	10c04426 	beq	r2,r3,7a34 <__sflush_r+0x1a0>
    7924:	88c0030b 	ldhu	r3,12(r17)
    7928:	89000417 	ldw	r4,16(r17)
    792c:	88000115 	stw	zero,4(r17)
    7930:	197dffcc 	andi	r5,r3,63487
    7934:	8940030d 	sth	r5,12(r17)
    7938:	89000015 	stw	r4,0(r17)
    793c:	18c4000c 	andi	r3,r3,4096
    7940:	18002c1e 	bne	r3,zero,79f4 <__sflush_r+0x160>
    7944:	89400c17 	ldw	r5,48(r17)
    7948:	9c000015 	stw	r16,0(r19)
    794c:	28000526 	beq	r5,zero,7964 <__sflush_r+0xd0>
    7950:	88801004 	addi	r2,r17,64
    7954:	28800226 	beq	r5,r2,7960 <__sflush_r+0xcc>
    7958:	9809883a 	mov	r4,r19
    795c:	00080000 	call	8000 <_free_r>
    7960:	88000c15 	stw	zero,48(r17)
    7964:	0005883a 	mov	r2,zero
    7968:	dfc00417 	ldw	ra,16(sp)
    796c:	dcc00317 	ldw	r19,12(sp)
    7970:	dc800217 	ldw	r18,8(sp)
    7974:	dc400117 	ldw	r17,4(sp)
    7978:	dc000017 	ldw	r16,0(sp)
    797c:	dec00504 	addi	sp,sp,20
    7980:	f800283a 	ret
    7984:	2c800417 	ldw	r18,16(r5)
    7988:	903ff626 	beq	r18,zero,7964 <__alt_data_end+0xff007964>
    798c:	2c000017 	ldw	r16,0(r5)
    7990:	108000cc 	andi	r2,r2,3
    7994:	2c800015 	stw	r18,0(r5)
    7998:	84a1c83a 	sub	r16,r16,r18
    799c:	1000131e 	bne	r2,zero,79ec <__sflush_r+0x158>
    79a0:	28800517 	ldw	r2,20(r5)
    79a4:	88800215 	stw	r2,8(r17)
    79a8:	04000316 	blt	zero,r16,79b8 <__sflush_r+0x124>
    79ac:	003fed06 	br	7964 <__alt_data_end+0xff007964>
    79b0:	90a5883a 	add	r18,r18,r2
    79b4:	043feb0e 	bge	zero,r16,7964 <__alt_data_end+0xff007964>
    79b8:	88800917 	ldw	r2,36(r17)
    79bc:	89400717 	ldw	r5,28(r17)
    79c0:	800f883a 	mov	r7,r16
    79c4:	900d883a 	mov	r6,r18
    79c8:	9809883a 	mov	r4,r19
    79cc:	103ee83a 	callr	r2
    79d0:	80a1c83a 	sub	r16,r16,r2
    79d4:	00bff616 	blt	zero,r2,79b0 <__alt_data_end+0xff0079b0>
    79d8:	88c0030b 	ldhu	r3,12(r17)
    79dc:	00bfffc4 	movi	r2,-1
    79e0:	18c01014 	ori	r3,r3,64
    79e4:	88c0030d 	sth	r3,12(r17)
    79e8:	003fdf06 	br	7968 <__alt_data_end+0xff007968>
    79ec:	0005883a 	mov	r2,zero
    79f0:	003fec06 	br	79a4 <__alt_data_end+0xff0079a4>
    79f4:	88801415 	stw	r2,80(r17)
    79f8:	003fd206 	br	7944 <__alt_data_end+0xff007944>
    79fc:	28c00f17 	ldw	r3,60(r5)
    7a00:	00ffb316 	blt	zero,r3,78d0 <__alt_data_end+0xff0078d0>
    7a04:	003fd706 	br	7964 <__alt_data_end+0xff007964>
    7a08:	89400717 	ldw	r5,28(r17)
    7a0c:	000d883a 	mov	r6,zero
    7a10:	01c00044 	movi	r7,1
    7a14:	9809883a 	mov	r4,r19
    7a18:	403ee83a 	callr	r8
    7a1c:	100d883a 	mov	r6,r2
    7a20:	00bfffc4 	movi	r2,-1
    7a24:	30801426 	beq	r6,r2,7a78 <__sflush_r+0x1e4>
    7a28:	8880030b 	ldhu	r2,12(r17)
    7a2c:	8a000a17 	ldw	r8,40(r17)
    7a30:	003fae06 	br	78ec <__alt_data_end+0xff0078ec>
    7a34:	98c00017 	ldw	r3,0(r19)
    7a38:	183fba26 	beq	r3,zero,7924 <__alt_data_end+0xff007924>
    7a3c:	01000744 	movi	r4,29
    7a40:	19000626 	beq	r3,r4,7a5c <__sflush_r+0x1c8>
    7a44:	01000584 	movi	r4,22
    7a48:	19000426 	beq	r3,r4,7a5c <__sflush_r+0x1c8>
    7a4c:	88c0030b 	ldhu	r3,12(r17)
    7a50:	18c01014 	ori	r3,r3,64
    7a54:	88c0030d 	sth	r3,12(r17)
    7a58:	003fc306 	br	7968 <__alt_data_end+0xff007968>
    7a5c:	8880030b 	ldhu	r2,12(r17)
    7a60:	88c00417 	ldw	r3,16(r17)
    7a64:	88000115 	stw	zero,4(r17)
    7a68:	10bdffcc 	andi	r2,r2,63487
    7a6c:	8880030d 	sth	r2,12(r17)
    7a70:	88c00015 	stw	r3,0(r17)
    7a74:	003fb306 	br	7944 <__alt_data_end+0xff007944>
    7a78:	98800017 	ldw	r2,0(r19)
    7a7c:	103fea26 	beq	r2,zero,7a28 <__alt_data_end+0xff007a28>
    7a80:	00c00744 	movi	r3,29
    7a84:	10c00226 	beq	r2,r3,7a90 <__sflush_r+0x1fc>
    7a88:	00c00584 	movi	r3,22
    7a8c:	10c0031e 	bne	r2,r3,7a9c <__sflush_r+0x208>
    7a90:	9c000015 	stw	r16,0(r19)
    7a94:	0005883a 	mov	r2,zero
    7a98:	003fb306 	br	7968 <__alt_data_end+0xff007968>
    7a9c:	88c0030b 	ldhu	r3,12(r17)
    7aa0:	3005883a 	mov	r2,r6
    7aa4:	18c01014 	ori	r3,r3,64
    7aa8:	88c0030d 	sth	r3,12(r17)
    7aac:	003fae06 	br	7968 <__alt_data_end+0xff007968>

00007ab0 <_fflush_r>:
    7ab0:	defffd04 	addi	sp,sp,-12
    7ab4:	dc000115 	stw	r16,4(sp)
    7ab8:	dfc00215 	stw	ra,8(sp)
    7abc:	2021883a 	mov	r16,r4
    7ac0:	20000226 	beq	r4,zero,7acc <_fflush_r+0x1c>
    7ac4:	20800e17 	ldw	r2,56(r4)
    7ac8:	10000c26 	beq	r2,zero,7afc <_fflush_r+0x4c>
    7acc:	2880030f 	ldh	r2,12(r5)
    7ad0:	1000051e 	bne	r2,zero,7ae8 <_fflush_r+0x38>
    7ad4:	0005883a 	mov	r2,zero
    7ad8:	dfc00217 	ldw	ra,8(sp)
    7adc:	dc000117 	ldw	r16,4(sp)
    7ae0:	dec00304 	addi	sp,sp,12
    7ae4:	f800283a 	ret
    7ae8:	8009883a 	mov	r4,r16
    7aec:	dfc00217 	ldw	ra,8(sp)
    7af0:	dc000117 	ldw	r16,4(sp)
    7af4:	dec00304 	addi	sp,sp,12
    7af8:	00078941 	jmpi	7894 <__sflush_r>
    7afc:	d9400015 	stw	r5,0(sp)
    7b00:	0007e8c0 	call	7e8c <__sinit>
    7b04:	d9400017 	ldw	r5,0(sp)
    7b08:	003ff006 	br	7acc <__alt_data_end+0xff007acc>

00007b0c <fflush>:
    7b0c:	20000526 	beq	r4,zero,7b24 <fflush+0x18>
    7b10:	00800074 	movhi	r2,1
    7b14:	108fe904 	addi	r2,r2,16292
    7b18:	200b883a 	mov	r5,r4
    7b1c:	11000017 	ldw	r4,0(r2)
    7b20:	0007ab01 	jmpi	7ab0 <_fflush_r>
    7b24:	00800074 	movhi	r2,1
    7b28:	108fe804 	addi	r2,r2,16288
    7b2c:	11000017 	ldw	r4,0(r2)
    7b30:	01400034 	movhi	r5,0
    7b34:	295eac04 	addi	r5,r5,31408
    7b38:	00088901 	jmpi	8890 <_fwalk_reent>

00007b3c <__fp_unlock>:
    7b3c:	0005883a 	mov	r2,zero
    7b40:	f800283a 	ret

00007b44 <_cleanup_r>:
    7b44:	01400074 	movhi	r5,1
    7b48:	29701204 	addi	r5,r5,-16312
    7b4c:	00088901 	jmpi	8890 <_fwalk_reent>

00007b50 <__sinit.part.1>:
    7b50:	defff704 	addi	sp,sp,-36
    7b54:	00c00034 	movhi	r3,0
    7b58:	dfc00815 	stw	ra,32(sp)
    7b5c:	ddc00715 	stw	r23,28(sp)
    7b60:	dd800615 	stw	r22,24(sp)
    7b64:	dd400515 	stw	r21,20(sp)
    7b68:	dd000415 	stw	r20,16(sp)
    7b6c:	dcc00315 	stw	r19,12(sp)
    7b70:	dc800215 	stw	r18,8(sp)
    7b74:	dc400115 	stw	r17,4(sp)
    7b78:	dc000015 	stw	r16,0(sp)
    7b7c:	18ded104 	addi	r3,r3,31556
    7b80:	24000117 	ldw	r16,4(r4)
    7b84:	20c00f15 	stw	r3,60(r4)
    7b88:	2080bb04 	addi	r2,r4,748
    7b8c:	00c000c4 	movi	r3,3
    7b90:	20c0b915 	stw	r3,740(r4)
    7b94:	2080ba15 	stw	r2,744(r4)
    7b98:	2000b815 	stw	zero,736(r4)
    7b9c:	05c00204 	movi	r23,8
    7ba0:	00800104 	movi	r2,4
    7ba4:	2025883a 	mov	r18,r4
    7ba8:	b80d883a 	mov	r6,r23
    7bac:	81001704 	addi	r4,r16,92
    7bb0:	000b883a 	mov	r5,zero
    7bb4:	80000015 	stw	zero,0(r16)
    7bb8:	80000115 	stw	zero,4(r16)
    7bbc:	80000215 	stw	zero,8(r16)
    7bc0:	8080030d 	sth	r2,12(r16)
    7bc4:	80001915 	stw	zero,100(r16)
    7bc8:	8000038d 	sth	zero,14(r16)
    7bcc:	80000415 	stw	zero,16(r16)
    7bd0:	80000515 	stw	zero,20(r16)
    7bd4:	80000615 	stw	zero,24(r16)
    7bd8:	0008f740 	call	8f74 <memset>
    7bdc:	05800074 	movhi	r22,1
    7be0:	94400217 	ldw	r17,8(r18)
    7be4:	05400074 	movhi	r21,1
    7be8:	05000074 	movhi	r20,1
    7bec:	04c00074 	movhi	r19,1
    7bf0:	b5a99c04 	addi	r22,r22,-22928
    7bf4:	ad69b304 	addi	r21,r21,-22836
    7bf8:	a529d204 	addi	r20,r20,-22712
    7bfc:	9ce9e904 	addi	r19,r19,-22620
    7c00:	85800815 	stw	r22,32(r16)
    7c04:	85400915 	stw	r21,36(r16)
    7c08:	85000a15 	stw	r20,40(r16)
    7c0c:	84c00b15 	stw	r19,44(r16)
    7c10:	84000715 	stw	r16,28(r16)
    7c14:	00800284 	movi	r2,10
    7c18:	8880030d 	sth	r2,12(r17)
    7c1c:	00800044 	movi	r2,1
    7c20:	b80d883a 	mov	r6,r23
    7c24:	89001704 	addi	r4,r17,92
    7c28:	000b883a 	mov	r5,zero
    7c2c:	88000015 	stw	zero,0(r17)
    7c30:	88000115 	stw	zero,4(r17)
    7c34:	88000215 	stw	zero,8(r17)
    7c38:	88001915 	stw	zero,100(r17)
    7c3c:	8880038d 	sth	r2,14(r17)
    7c40:	88000415 	stw	zero,16(r17)
    7c44:	88000515 	stw	zero,20(r17)
    7c48:	88000615 	stw	zero,24(r17)
    7c4c:	0008f740 	call	8f74 <memset>
    7c50:	94000317 	ldw	r16,12(r18)
    7c54:	00800484 	movi	r2,18
    7c58:	8c400715 	stw	r17,28(r17)
    7c5c:	8d800815 	stw	r22,32(r17)
    7c60:	8d400915 	stw	r21,36(r17)
    7c64:	8d000a15 	stw	r20,40(r17)
    7c68:	8cc00b15 	stw	r19,44(r17)
    7c6c:	8080030d 	sth	r2,12(r16)
    7c70:	00800084 	movi	r2,2
    7c74:	80000015 	stw	zero,0(r16)
    7c78:	80000115 	stw	zero,4(r16)
    7c7c:	80000215 	stw	zero,8(r16)
    7c80:	80001915 	stw	zero,100(r16)
    7c84:	8080038d 	sth	r2,14(r16)
    7c88:	80000415 	stw	zero,16(r16)
    7c8c:	80000515 	stw	zero,20(r16)
    7c90:	80000615 	stw	zero,24(r16)
    7c94:	b80d883a 	mov	r6,r23
    7c98:	000b883a 	mov	r5,zero
    7c9c:	81001704 	addi	r4,r16,92
    7ca0:	0008f740 	call	8f74 <memset>
    7ca4:	00800044 	movi	r2,1
    7ca8:	84000715 	stw	r16,28(r16)
    7cac:	85800815 	stw	r22,32(r16)
    7cb0:	85400915 	stw	r21,36(r16)
    7cb4:	85000a15 	stw	r20,40(r16)
    7cb8:	84c00b15 	stw	r19,44(r16)
    7cbc:	90800e15 	stw	r2,56(r18)
    7cc0:	dfc00817 	ldw	ra,32(sp)
    7cc4:	ddc00717 	ldw	r23,28(sp)
    7cc8:	dd800617 	ldw	r22,24(sp)
    7ccc:	dd400517 	ldw	r21,20(sp)
    7cd0:	dd000417 	ldw	r20,16(sp)
    7cd4:	dcc00317 	ldw	r19,12(sp)
    7cd8:	dc800217 	ldw	r18,8(sp)
    7cdc:	dc400117 	ldw	r17,4(sp)
    7ce0:	dc000017 	ldw	r16,0(sp)
    7ce4:	dec00904 	addi	sp,sp,36
    7ce8:	f800283a 	ret

00007cec <__fp_lock>:
    7cec:	0005883a 	mov	r2,zero
    7cf0:	f800283a 	ret

00007cf4 <__sfmoreglue>:
    7cf4:	defffc04 	addi	sp,sp,-16
    7cf8:	dc400115 	stw	r17,4(sp)
    7cfc:	2c7fffc4 	addi	r17,r5,-1
    7d00:	8c401a24 	muli	r17,r17,104
    7d04:	dc800215 	stw	r18,8(sp)
    7d08:	2825883a 	mov	r18,r5
    7d0c:	89401d04 	addi	r5,r17,116
    7d10:	dc000015 	stw	r16,0(sp)
    7d14:	dfc00315 	stw	ra,12(sp)
    7d18:	00031b00 	call	31b0 <_malloc_r>
    7d1c:	1021883a 	mov	r16,r2
    7d20:	10000726 	beq	r2,zero,7d40 <__sfmoreglue+0x4c>
    7d24:	11000304 	addi	r4,r2,12
    7d28:	10000015 	stw	zero,0(r2)
    7d2c:	14800115 	stw	r18,4(r2)
    7d30:	11000215 	stw	r4,8(r2)
    7d34:	89801a04 	addi	r6,r17,104
    7d38:	000b883a 	mov	r5,zero
    7d3c:	0008f740 	call	8f74 <memset>
    7d40:	8005883a 	mov	r2,r16
    7d44:	dfc00317 	ldw	ra,12(sp)
    7d48:	dc800217 	ldw	r18,8(sp)
    7d4c:	dc400117 	ldw	r17,4(sp)
    7d50:	dc000017 	ldw	r16,0(sp)
    7d54:	dec00404 	addi	sp,sp,16
    7d58:	f800283a 	ret

00007d5c <__sfp>:
    7d5c:	defffb04 	addi	sp,sp,-20
    7d60:	dc000015 	stw	r16,0(sp)
    7d64:	04000074 	movhi	r16,1
    7d68:	840fe804 	addi	r16,r16,16288
    7d6c:	dcc00315 	stw	r19,12(sp)
    7d70:	2027883a 	mov	r19,r4
    7d74:	81000017 	ldw	r4,0(r16)
    7d78:	dfc00415 	stw	ra,16(sp)
    7d7c:	dc800215 	stw	r18,8(sp)
    7d80:	20800e17 	ldw	r2,56(r4)
    7d84:	dc400115 	stw	r17,4(sp)
    7d88:	1000021e 	bne	r2,zero,7d94 <__sfp+0x38>
    7d8c:	0007b500 	call	7b50 <__sinit.part.1>
    7d90:	81000017 	ldw	r4,0(r16)
    7d94:	2480b804 	addi	r18,r4,736
    7d98:	047fffc4 	movi	r17,-1
    7d9c:	91000117 	ldw	r4,4(r18)
    7da0:	94000217 	ldw	r16,8(r18)
    7da4:	213fffc4 	addi	r4,r4,-1
    7da8:	20000a16 	blt	r4,zero,7dd4 <__sfp+0x78>
    7dac:	8080030f 	ldh	r2,12(r16)
    7db0:	10000c26 	beq	r2,zero,7de4 <__sfp+0x88>
    7db4:	80c01d04 	addi	r3,r16,116
    7db8:	00000206 	br	7dc4 <__sfp+0x68>
    7dbc:	18bfe60f 	ldh	r2,-104(r3)
    7dc0:	10000826 	beq	r2,zero,7de4 <__sfp+0x88>
    7dc4:	213fffc4 	addi	r4,r4,-1
    7dc8:	1c3ffd04 	addi	r16,r3,-12
    7dcc:	18c01a04 	addi	r3,r3,104
    7dd0:	247ffa1e 	bne	r4,r17,7dbc <__alt_data_end+0xff007dbc>
    7dd4:	90800017 	ldw	r2,0(r18)
    7dd8:	10001d26 	beq	r2,zero,7e50 <__sfp+0xf4>
    7ddc:	1025883a 	mov	r18,r2
    7de0:	003fee06 	br	7d9c <__alt_data_end+0xff007d9c>
    7de4:	00bfffc4 	movi	r2,-1
    7de8:	8080038d 	sth	r2,14(r16)
    7dec:	00800044 	movi	r2,1
    7df0:	8080030d 	sth	r2,12(r16)
    7df4:	80001915 	stw	zero,100(r16)
    7df8:	80000015 	stw	zero,0(r16)
    7dfc:	80000215 	stw	zero,8(r16)
    7e00:	80000115 	stw	zero,4(r16)
    7e04:	80000415 	stw	zero,16(r16)
    7e08:	80000515 	stw	zero,20(r16)
    7e0c:	80000615 	stw	zero,24(r16)
    7e10:	01800204 	movi	r6,8
    7e14:	000b883a 	mov	r5,zero
    7e18:	81001704 	addi	r4,r16,92
    7e1c:	0008f740 	call	8f74 <memset>
    7e20:	8005883a 	mov	r2,r16
    7e24:	80000c15 	stw	zero,48(r16)
    7e28:	80000d15 	stw	zero,52(r16)
    7e2c:	80001115 	stw	zero,68(r16)
    7e30:	80001215 	stw	zero,72(r16)
    7e34:	dfc00417 	ldw	ra,16(sp)
    7e38:	dcc00317 	ldw	r19,12(sp)
    7e3c:	dc800217 	ldw	r18,8(sp)
    7e40:	dc400117 	ldw	r17,4(sp)
    7e44:	dc000017 	ldw	r16,0(sp)
    7e48:	dec00504 	addi	sp,sp,20
    7e4c:	f800283a 	ret
    7e50:	01400104 	movi	r5,4
    7e54:	9809883a 	mov	r4,r19
    7e58:	0007cf40 	call	7cf4 <__sfmoreglue>
    7e5c:	90800015 	stw	r2,0(r18)
    7e60:	103fde1e 	bne	r2,zero,7ddc <__alt_data_end+0xff007ddc>
    7e64:	00800304 	movi	r2,12
    7e68:	98800015 	stw	r2,0(r19)
    7e6c:	0005883a 	mov	r2,zero
    7e70:	003ff006 	br	7e34 <__alt_data_end+0xff007e34>

00007e74 <_cleanup>:
    7e74:	00800074 	movhi	r2,1
    7e78:	108fe804 	addi	r2,r2,16288
    7e7c:	11000017 	ldw	r4,0(r2)
    7e80:	01400074 	movhi	r5,1
    7e84:	29701204 	addi	r5,r5,-16312
    7e88:	00088901 	jmpi	8890 <_fwalk_reent>

00007e8c <__sinit>:
    7e8c:	20800e17 	ldw	r2,56(r4)
    7e90:	10000126 	beq	r2,zero,7e98 <__sinit+0xc>
    7e94:	f800283a 	ret
    7e98:	0007b501 	jmpi	7b50 <__sinit.part.1>

00007e9c <__sfp_lock_acquire>:
    7e9c:	f800283a 	ret

00007ea0 <__sfp_lock_release>:
    7ea0:	f800283a 	ret

00007ea4 <__sinit_lock_acquire>:
    7ea4:	f800283a 	ret

00007ea8 <__sinit_lock_release>:
    7ea8:	f800283a 	ret

00007eac <__fp_lock_all>:
    7eac:	00800074 	movhi	r2,1
    7eb0:	108fe904 	addi	r2,r2,16292
    7eb4:	11000017 	ldw	r4,0(r2)
    7eb8:	01400034 	movhi	r5,0
    7ebc:	295f3b04 	addi	r5,r5,31980
    7ec0:	00087cc1 	jmpi	87cc <_fwalk>

00007ec4 <__fp_unlock_all>:
    7ec4:	00800074 	movhi	r2,1
    7ec8:	108fe904 	addi	r2,r2,16292
    7ecc:	11000017 	ldw	r4,0(r2)
    7ed0:	01400034 	movhi	r5,0
    7ed4:	295ecf04 	addi	r5,r5,31548
    7ed8:	00087cc1 	jmpi	87cc <_fwalk>

00007edc <_malloc_trim_r>:
    7edc:	defffb04 	addi	sp,sp,-20
    7ee0:	dcc00315 	stw	r19,12(sp)
    7ee4:	04c00074 	movhi	r19,1
    7ee8:	dc800215 	stw	r18,8(sp)
    7eec:	dc400115 	stw	r17,4(sp)
    7ef0:	dc000015 	stw	r16,0(sp)
    7ef4:	dfc00415 	stw	ra,16(sp)
    7ef8:	2821883a 	mov	r16,r5
    7efc:	9cc93b04 	addi	r19,r19,9452
    7f00:	2025883a 	mov	r18,r4
    7f04:	000f4a40 	call	f4a4 <__malloc_lock>
    7f08:	98800217 	ldw	r2,8(r19)
    7f0c:	14400117 	ldw	r17,4(r2)
    7f10:	00bfff04 	movi	r2,-4
    7f14:	88a2703a 	and	r17,r17,r2
    7f18:	8c21c83a 	sub	r16,r17,r16
    7f1c:	8403fbc4 	addi	r16,r16,4079
    7f20:	8020d33a 	srli	r16,r16,12
    7f24:	0083ffc4 	movi	r2,4095
    7f28:	843fffc4 	addi	r16,r16,-1
    7f2c:	8020933a 	slli	r16,r16,12
    7f30:	1400060e 	bge	r2,r16,7f4c <_malloc_trim_r+0x70>
    7f34:	000b883a 	mov	r5,zero
    7f38:	9009883a 	mov	r4,r18
    7f3c:	0003afc0 	call	3afc <_sbrk_r>
    7f40:	98c00217 	ldw	r3,8(r19)
    7f44:	1c47883a 	add	r3,r3,r17
    7f48:	10c00a26 	beq	r2,r3,7f74 <_malloc_trim_r+0x98>
    7f4c:	9009883a 	mov	r4,r18
    7f50:	000f4c80 	call	f4c8 <__malloc_unlock>
    7f54:	0005883a 	mov	r2,zero
    7f58:	dfc00417 	ldw	ra,16(sp)
    7f5c:	dcc00317 	ldw	r19,12(sp)
    7f60:	dc800217 	ldw	r18,8(sp)
    7f64:	dc400117 	ldw	r17,4(sp)
    7f68:	dc000017 	ldw	r16,0(sp)
    7f6c:	dec00504 	addi	sp,sp,20
    7f70:	f800283a 	ret
    7f74:	040bc83a 	sub	r5,zero,r16
    7f78:	9009883a 	mov	r4,r18
    7f7c:	0003afc0 	call	3afc <_sbrk_r>
    7f80:	00ffffc4 	movi	r3,-1
    7f84:	10c00d26 	beq	r2,r3,7fbc <_malloc_trim_r+0xe0>
    7f88:	00c00074 	movhi	r3,1
    7f8c:	18d71c04 	addi	r3,r3,23664
    7f90:	18800017 	ldw	r2,0(r3)
    7f94:	99000217 	ldw	r4,8(r19)
    7f98:	8c23c83a 	sub	r17,r17,r16
    7f9c:	8c400054 	ori	r17,r17,1
    7fa0:	1421c83a 	sub	r16,r2,r16
    7fa4:	24400115 	stw	r17,4(r4)
    7fa8:	9009883a 	mov	r4,r18
    7fac:	1c000015 	stw	r16,0(r3)
    7fb0:	000f4c80 	call	f4c8 <__malloc_unlock>
    7fb4:	00800044 	movi	r2,1
    7fb8:	003fe706 	br	7f58 <__alt_data_end+0xff007f58>
    7fbc:	000b883a 	mov	r5,zero
    7fc0:	9009883a 	mov	r4,r18
    7fc4:	0003afc0 	call	3afc <_sbrk_r>
    7fc8:	99000217 	ldw	r4,8(r19)
    7fcc:	014003c4 	movi	r5,15
    7fd0:	1107c83a 	sub	r3,r2,r4
    7fd4:	28ffdd0e 	bge	r5,r3,7f4c <__alt_data_end+0xff007f4c>
    7fd8:	01400074 	movhi	r5,1
    7fdc:	294fe604 	addi	r5,r5,16280
    7fe0:	29400017 	ldw	r5,0(r5)
    7fe4:	18c00054 	ori	r3,r3,1
    7fe8:	20c00115 	stw	r3,4(r4)
    7fec:	00c00074 	movhi	r3,1
    7ff0:	1145c83a 	sub	r2,r2,r5
    7ff4:	18d71c04 	addi	r3,r3,23664
    7ff8:	18800015 	stw	r2,0(r3)
    7ffc:	003fd306 	br	7f4c <__alt_data_end+0xff007f4c>

00008000 <_free_r>:
    8000:	28004126 	beq	r5,zero,8108 <_free_r+0x108>
    8004:	defffd04 	addi	sp,sp,-12
    8008:	dc400115 	stw	r17,4(sp)
    800c:	dc000015 	stw	r16,0(sp)
    8010:	2023883a 	mov	r17,r4
    8014:	2821883a 	mov	r16,r5
    8018:	dfc00215 	stw	ra,8(sp)
    801c:	000f4a40 	call	f4a4 <__malloc_lock>
    8020:	81ffff17 	ldw	r7,-4(r16)
    8024:	00bfff84 	movi	r2,-2
    8028:	01000074 	movhi	r4,1
    802c:	81bffe04 	addi	r6,r16,-8
    8030:	3884703a 	and	r2,r7,r2
    8034:	21093b04 	addi	r4,r4,9452
    8038:	308b883a 	add	r5,r6,r2
    803c:	2a400117 	ldw	r9,4(r5)
    8040:	22000217 	ldw	r8,8(r4)
    8044:	00ffff04 	movi	r3,-4
    8048:	48c6703a 	and	r3,r9,r3
    804c:	2a005726 	beq	r5,r8,81ac <_free_r+0x1ac>
    8050:	28c00115 	stw	r3,4(r5)
    8054:	39c0004c 	andi	r7,r7,1
    8058:	3800091e 	bne	r7,zero,8080 <_free_r+0x80>
    805c:	823ffe17 	ldw	r8,-8(r16)
    8060:	22400204 	addi	r9,r4,8
    8064:	320dc83a 	sub	r6,r6,r8
    8068:	31c00217 	ldw	r7,8(r6)
    806c:	1205883a 	add	r2,r2,r8
    8070:	3a406526 	beq	r7,r9,8208 <_free_r+0x208>
    8074:	32000317 	ldw	r8,12(r6)
    8078:	3a000315 	stw	r8,12(r7)
    807c:	41c00215 	stw	r7,8(r8)
    8080:	28cf883a 	add	r7,r5,r3
    8084:	39c00117 	ldw	r7,4(r7)
    8088:	39c0004c 	andi	r7,r7,1
    808c:	38003a26 	beq	r7,zero,8178 <_free_r+0x178>
    8090:	10c00054 	ori	r3,r2,1
    8094:	30c00115 	stw	r3,4(r6)
    8098:	3087883a 	add	r3,r6,r2
    809c:	18800015 	stw	r2,0(r3)
    80a0:	00c07fc4 	movi	r3,511
    80a4:	18801936 	bltu	r3,r2,810c <_free_r+0x10c>
    80a8:	1004d0fa 	srli	r2,r2,3
    80ac:	01c00044 	movi	r7,1
    80b0:	21400117 	ldw	r5,4(r4)
    80b4:	10c00044 	addi	r3,r2,1
    80b8:	18c7883a 	add	r3,r3,r3
    80bc:	1005d0ba 	srai	r2,r2,2
    80c0:	18c7883a 	add	r3,r3,r3
    80c4:	18c7883a 	add	r3,r3,r3
    80c8:	1907883a 	add	r3,r3,r4
    80cc:	3884983a 	sll	r2,r7,r2
    80d0:	19c00017 	ldw	r7,0(r3)
    80d4:	1a3ffe04 	addi	r8,r3,-8
    80d8:	1144b03a 	or	r2,r2,r5
    80dc:	32000315 	stw	r8,12(r6)
    80e0:	31c00215 	stw	r7,8(r6)
    80e4:	20800115 	stw	r2,4(r4)
    80e8:	19800015 	stw	r6,0(r3)
    80ec:	39800315 	stw	r6,12(r7)
    80f0:	8809883a 	mov	r4,r17
    80f4:	dfc00217 	ldw	ra,8(sp)
    80f8:	dc400117 	ldw	r17,4(sp)
    80fc:	dc000017 	ldw	r16,0(sp)
    8100:	dec00304 	addi	sp,sp,12
    8104:	000f4c81 	jmpi	f4c8 <__malloc_unlock>
    8108:	f800283a 	ret
    810c:	100ad27a 	srli	r5,r2,9
    8110:	00c00104 	movi	r3,4
    8114:	19404a36 	bltu	r3,r5,8240 <_free_r+0x240>
    8118:	100ad1ba 	srli	r5,r2,6
    811c:	28c00e44 	addi	r3,r5,57
    8120:	18c7883a 	add	r3,r3,r3
    8124:	29400e04 	addi	r5,r5,56
    8128:	18c7883a 	add	r3,r3,r3
    812c:	18c7883a 	add	r3,r3,r3
    8130:	1909883a 	add	r4,r3,r4
    8134:	20c00017 	ldw	r3,0(r4)
    8138:	01c00074 	movhi	r7,1
    813c:	213ffe04 	addi	r4,r4,-8
    8140:	39c93b04 	addi	r7,r7,9452
    8144:	20c04426 	beq	r4,r3,8258 <_free_r+0x258>
    8148:	01ffff04 	movi	r7,-4
    814c:	19400117 	ldw	r5,4(r3)
    8150:	29ca703a 	and	r5,r5,r7
    8154:	1140022e 	bgeu	r2,r5,8160 <_free_r+0x160>
    8158:	18c00217 	ldw	r3,8(r3)
    815c:	20fffb1e 	bne	r4,r3,814c <__alt_data_end+0xff00814c>
    8160:	19000317 	ldw	r4,12(r3)
    8164:	31000315 	stw	r4,12(r6)
    8168:	30c00215 	stw	r3,8(r6)
    816c:	21800215 	stw	r6,8(r4)
    8170:	19800315 	stw	r6,12(r3)
    8174:	003fde06 	br	80f0 <__alt_data_end+0xff0080f0>
    8178:	29c00217 	ldw	r7,8(r5)
    817c:	10c5883a 	add	r2,r2,r3
    8180:	00c00074 	movhi	r3,1
    8184:	18c93d04 	addi	r3,r3,9460
    8188:	38c03b26 	beq	r7,r3,8278 <_free_r+0x278>
    818c:	2a000317 	ldw	r8,12(r5)
    8190:	11400054 	ori	r5,r2,1
    8194:	3087883a 	add	r3,r6,r2
    8198:	3a000315 	stw	r8,12(r7)
    819c:	41c00215 	stw	r7,8(r8)
    81a0:	31400115 	stw	r5,4(r6)
    81a4:	18800015 	stw	r2,0(r3)
    81a8:	003fbd06 	br	80a0 <__alt_data_end+0xff0080a0>
    81ac:	39c0004c 	andi	r7,r7,1
    81b0:	10c5883a 	add	r2,r2,r3
    81b4:	3800071e 	bne	r7,zero,81d4 <_free_r+0x1d4>
    81b8:	81fffe17 	ldw	r7,-8(r16)
    81bc:	31cdc83a 	sub	r6,r6,r7
    81c0:	30c00317 	ldw	r3,12(r6)
    81c4:	31400217 	ldw	r5,8(r6)
    81c8:	11c5883a 	add	r2,r2,r7
    81cc:	28c00315 	stw	r3,12(r5)
    81d0:	19400215 	stw	r5,8(r3)
    81d4:	10c00054 	ori	r3,r2,1
    81d8:	30c00115 	stw	r3,4(r6)
    81dc:	00c00074 	movhi	r3,1
    81e0:	18cfe704 	addi	r3,r3,16284
    81e4:	18c00017 	ldw	r3,0(r3)
    81e8:	21800215 	stw	r6,8(r4)
    81ec:	10ffc036 	bltu	r2,r3,80f0 <__alt_data_end+0xff0080f0>
    81f0:	00800074 	movhi	r2,1
    81f4:	10970e04 	addi	r2,r2,23608
    81f8:	11400017 	ldw	r5,0(r2)
    81fc:	8809883a 	mov	r4,r17
    8200:	0007edc0 	call	7edc <_malloc_trim_r>
    8204:	003fba06 	br	80f0 <__alt_data_end+0xff0080f0>
    8208:	28c9883a 	add	r4,r5,r3
    820c:	21000117 	ldw	r4,4(r4)
    8210:	2100004c 	andi	r4,r4,1
    8214:	2000391e 	bne	r4,zero,82fc <_free_r+0x2fc>
    8218:	29c00217 	ldw	r7,8(r5)
    821c:	29000317 	ldw	r4,12(r5)
    8220:	1885883a 	add	r2,r3,r2
    8224:	10c00054 	ori	r3,r2,1
    8228:	39000315 	stw	r4,12(r7)
    822c:	21c00215 	stw	r7,8(r4)
    8230:	30c00115 	stw	r3,4(r6)
    8234:	308d883a 	add	r6,r6,r2
    8238:	30800015 	stw	r2,0(r6)
    823c:	003fac06 	br	80f0 <__alt_data_end+0xff0080f0>
    8240:	00c00504 	movi	r3,20
    8244:	19401536 	bltu	r3,r5,829c <_free_r+0x29c>
    8248:	28c01704 	addi	r3,r5,92
    824c:	18c7883a 	add	r3,r3,r3
    8250:	294016c4 	addi	r5,r5,91
    8254:	003fb406 	br	8128 <__alt_data_end+0xff008128>
    8258:	280bd0ba 	srai	r5,r5,2
    825c:	00c00044 	movi	r3,1
    8260:	38800117 	ldw	r2,4(r7)
    8264:	194a983a 	sll	r5,r3,r5
    8268:	2007883a 	mov	r3,r4
    826c:	2884b03a 	or	r2,r5,r2
    8270:	38800115 	stw	r2,4(r7)
    8274:	003fbb06 	br	8164 <__alt_data_end+0xff008164>
    8278:	21800515 	stw	r6,20(r4)
    827c:	21800415 	stw	r6,16(r4)
    8280:	10c00054 	ori	r3,r2,1
    8284:	31c00315 	stw	r7,12(r6)
    8288:	31c00215 	stw	r7,8(r6)
    828c:	30c00115 	stw	r3,4(r6)
    8290:	308d883a 	add	r6,r6,r2
    8294:	30800015 	stw	r2,0(r6)
    8298:	003f9506 	br	80f0 <__alt_data_end+0xff0080f0>
    829c:	00c01504 	movi	r3,84
    82a0:	19400536 	bltu	r3,r5,82b8 <_free_r+0x2b8>
    82a4:	100ad33a 	srli	r5,r2,12
    82a8:	28c01bc4 	addi	r3,r5,111
    82ac:	18c7883a 	add	r3,r3,r3
    82b0:	29401b84 	addi	r5,r5,110
    82b4:	003f9c06 	br	8128 <__alt_data_end+0xff008128>
    82b8:	00c05504 	movi	r3,340
    82bc:	19400536 	bltu	r3,r5,82d4 <_free_r+0x2d4>
    82c0:	100ad3fa 	srli	r5,r2,15
    82c4:	28c01e04 	addi	r3,r5,120
    82c8:	18c7883a 	add	r3,r3,r3
    82cc:	29401dc4 	addi	r5,r5,119
    82d0:	003f9506 	br	8128 <__alt_data_end+0xff008128>
    82d4:	00c15504 	movi	r3,1364
    82d8:	19400536 	bltu	r3,r5,82f0 <_free_r+0x2f0>
    82dc:	100ad4ba 	srli	r5,r2,18
    82e0:	28c01f44 	addi	r3,r5,125
    82e4:	18c7883a 	add	r3,r3,r3
    82e8:	29401f04 	addi	r5,r5,124
    82ec:	003f8e06 	br	8128 <__alt_data_end+0xff008128>
    82f0:	00c03f84 	movi	r3,254
    82f4:	01401f84 	movi	r5,126
    82f8:	003f8b06 	br	8128 <__alt_data_end+0xff008128>
    82fc:	10c00054 	ori	r3,r2,1
    8300:	30c00115 	stw	r3,4(r6)
    8304:	308d883a 	add	r6,r6,r2
    8308:	30800015 	stw	r2,0(r6)
    830c:	003f7806 	br	80f0 <__alt_data_end+0xff0080f0>

00008310 <__sfvwrite_r>:
    8310:	30800217 	ldw	r2,8(r6)
    8314:	10006726 	beq	r2,zero,84b4 <__sfvwrite_r+0x1a4>
    8318:	28c0030b 	ldhu	r3,12(r5)
    831c:	defff404 	addi	sp,sp,-48
    8320:	dd400715 	stw	r21,28(sp)
    8324:	dd000615 	stw	r20,24(sp)
    8328:	dc000215 	stw	r16,8(sp)
    832c:	dfc00b15 	stw	ra,44(sp)
    8330:	df000a15 	stw	fp,40(sp)
    8334:	ddc00915 	stw	r23,36(sp)
    8338:	dd800815 	stw	r22,32(sp)
    833c:	dcc00515 	stw	r19,20(sp)
    8340:	dc800415 	stw	r18,16(sp)
    8344:	dc400315 	stw	r17,12(sp)
    8348:	1880020c 	andi	r2,r3,8
    834c:	2821883a 	mov	r16,r5
    8350:	202b883a 	mov	r21,r4
    8354:	3029883a 	mov	r20,r6
    8358:	10002726 	beq	r2,zero,83f8 <__sfvwrite_r+0xe8>
    835c:	28800417 	ldw	r2,16(r5)
    8360:	10002526 	beq	r2,zero,83f8 <__sfvwrite_r+0xe8>
    8364:	1880008c 	andi	r2,r3,2
    8368:	a4400017 	ldw	r17,0(r20)
    836c:	10002a26 	beq	r2,zero,8418 <__sfvwrite_r+0x108>
    8370:	05a00034 	movhi	r22,32768
    8374:	0027883a 	mov	r19,zero
    8378:	0025883a 	mov	r18,zero
    837c:	b5bf0004 	addi	r22,r22,-1024
    8380:	980d883a 	mov	r6,r19
    8384:	a809883a 	mov	r4,r21
    8388:	90004626 	beq	r18,zero,84a4 <__sfvwrite_r+0x194>
    838c:	900f883a 	mov	r7,r18
    8390:	b480022e 	bgeu	r22,r18,839c <__sfvwrite_r+0x8c>
    8394:	01e00034 	movhi	r7,32768
    8398:	39ff0004 	addi	r7,r7,-1024
    839c:	80800917 	ldw	r2,36(r16)
    83a0:	81400717 	ldw	r5,28(r16)
    83a4:	103ee83a 	callr	r2
    83a8:	0080570e 	bge	zero,r2,8508 <__sfvwrite_r+0x1f8>
    83ac:	a0c00217 	ldw	r3,8(r20)
    83b0:	98a7883a 	add	r19,r19,r2
    83b4:	90a5c83a 	sub	r18,r18,r2
    83b8:	1885c83a 	sub	r2,r3,r2
    83bc:	a0800215 	stw	r2,8(r20)
    83c0:	103fef1e 	bne	r2,zero,8380 <__alt_data_end+0xff008380>
    83c4:	0005883a 	mov	r2,zero
    83c8:	dfc00b17 	ldw	ra,44(sp)
    83cc:	df000a17 	ldw	fp,40(sp)
    83d0:	ddc00917 	ldw	r23,36(sp)
    83d4:	dd800817 	ldw	r22,32(sp)
    83d8:	dd400717 	ldw	r21,28(sp)
    83dc:	dd000617 	ldw	r20,24(sp)
    83e0:	dcc00517 	ldw	r19,20(sp)
    83e4:	dc800417 	ldw	r18,16(sp)
    83e8:	dc400317 	ldw	r17,12(sp)
    83ec:	dc000217 	ldw	r16,8(sp)
    83f0:	dec00c04 	addi	sp,sp,48
    83f4:	f800283a 	ret
    83f8:	800b883a 	mov	r5,r16
    83fc:	a809883a 	mov	r4,r21
    8400:	0005eb80 	call	5eb8 <__swsetup_r>
    8404:	1000eb1e 	bne	r2,zero,87b4 <__sfvwrite_r+0x4a4>
    8408:	80c0030b 	ldhu	r3,12(r16)
    840c:	a4400017 	ldw	r17,0(r20)
    8410:	1880008c 	andi	r2,r3,2
    8414:	103fd61e 	bne	r2,zero,8370 <__alt_data_end+0xff008370>
    8418:	1880004c 	andi	r2,r3,1
    841c:	10003f1e 	bne	r2,zero,851c <__sfvwrite_r+0x20c>
    8420:	0039883a 	mov	fp,zero
    8424:	0025883a 	mov	r18,zero
    8428:	90001a26 	beq	r18,zero,8494 <__sfvwrite_r+0x184>
    842c:	1880800c 	andi	r2,r3,512
    8430:	84c00217 	ldw	r19,8(r16)
    8434:	10002126 	beq	r2,zero,84bc <__sfvwrite_r+0x1ac>
    8438:	982f883a 	mov	r23,r19
    843c:	94c09336 	bltu	r18,r19,868c <__sfvwrite_r+0x37c>
    8440:	1881200c 	andi	r2,r3,1152
    8444:	10009e1e 	bne	r2,zero,86c0 <__sfvwrite_r+0x3b0>
    8448:	81000017 	ldw	r4,0(r16)
    844c:	b80d883a 	mov	r6,r23
    8450:	e00b883a 	mov	r5,fp
    8454:	0008e180 	call	8e18 <memmove>
    8458:	80c00217 	ldw	r3,8(r16)
    845c:	81000017 	ldw	r4,0(r16)
    8460:	9005883a 	mov	r2,r18
    8464:	1ce7c83a 	sub	r19,r3,r19
    8468:	25cf883a 	add	r7,r4,r23
    846c:	84c00215 	stw	r19,8(r16)
    8470:	81c00015 	stw	r7,0(r16)
    8474:	a0c00217 	ldw	r3,8(r20)
    8478:	e0b9883a 	add	fp,fp,r2
    847c:	90a5c83a 	sub	r18,r18,r2
    8480:	18a7c83a 	sub	r19,r3,r2
    8484:	a4c00215 	stw	r19,8(r20)
    8488:	983fce26 	beq	r19,zero,83c4 <__alt_data_end+0xff0083c4>
    848c:	80c0030b 	ldhu	r3,12(r16)
    8490:	903fe61e 	bne	r18,zero,842c <__alt_data_end+0xff00842c>
    8494:	8f000017 	ldw	fp,0(r17)
    8498:	8c800117 	ldw	r18,4(r17)
    849c:	8c400204 	addi	r17,r17,8
    84a0:	003fe106 	br	8428 <__alt_data_end+0xff008428>
    84a4:	8cc00017 	ldw	r19,0(r17)
    84a8:	8c800117 	ldw	r18,4(r17)
    84ac:	8c400204 	addi	r17,r17,8
    84b0:	003fb306 	br	8380 <__alt_data_end+0xff008380>
    84b4:	0005883a 	mov	r2,zero
    84b8:	f800283a 	ret
    84bc:	81000017 	ldw	r4,0(r16)
    84c0:	80800417 	ldw	r2,16(r16)
    84c4:	11005736 	bltu	r2,r4,8624 <__sfvwrite_r+0x314>
    84c8:	85c00517 	ldw	r23,20(r16)
    84cc:	95c05536 	bltu	r18,r23,8624 <__sfvwrite_r+0x314>
    84d0:	00a00034 	movhi	r2,32768
    84d4:	10bfffc4 	addi	r2,r2,-1
    84d8:	9009883a 	mov	r4,r18
    84dc:	1480012e 	bgeu	r2,r18,84e4 <__sfvwrite_r+0x1d4>
    84e0:	1009883a 	mov	r4,r2
    84e4:	b80b883a 	mov	r5,r23
    84e8:	00025e00 	call	25e0 <__divsi3>
    84ec:	15cf383a 	mul	r7,r2,r23
    84f0:	81400717 	ldw	r5,28(r16)
    84f4:	80800917 	ldw	r2,36(r16)
    84f8:	e00d883a 	mov	r6,fp
    84fc:	a809883a 	mov	r4,r21
    8500:	103ee83a 	callr	r2
    8504:	00bfdb16 	blt	zero,r2,8474 <__alt_data_end+0xff008474>
    8508:	8080030b 	ldhu	r2,12(r16)
    850c:	10801014 	ori	r2,r2,64
    8510:	8080030d 	sth	r2,12(r16)
    8514:	00bfffc4 	movi	r2,-1
    8518:	003fab06 	br	83c8 <__alt_data_end+0xff0083c8>
    851c:	0027883a 	mov	r19,zero
    8520:	0011883a 	mov	r8,zero
    8524:	0039883a 	mov	fp,zero
    8528:	0025883a 	mov	r18,zero
    852c:	90001f26 	beq	r18,zero,85ac <__sfvwrite_r+0x29c>
    8530:	40005a26 	beq	r8,zero,869c <__sfvwrite_r+0x38c>
    8534:	982d883a 	mov	r22,r19
    8538:	94c0012e 	bgeu	r18,r19,8540 <__sfvwrite_r+0x230>
    853c:	902d883a 	mov	r22,r18
    8540:	81000017 	ldw	r4,0(r16)
    8544:	80800417 	ldw	r2,16(r16)
    8548:	b02f883a 	mov	r23,r22
    854c:	81c00517 	ldw	r7,20(r16)
    8550:	1100032e 	bgeu	r2,r4,8560 <__sfvwrite_r+0x250>
    8554:	80c00217 	ldw	r3,8(r16)
    8558:	38c7883a 	add	r3,r7,r3
    855c:	1d801816 	blt	r3,r22,85c0 <__sfvwrite_r+0x2b0>
    8560:	b1c03e16 	blt	r22,r7,865c <__sfvwrite_r+0x34c>
    8564:	80800917 	ldw	r2,36(r16)
    8568:	81400717 	ldw	r5,28(r16)
    856c:	e00d883a 	mov	r6,fp
    8570:	da000115 	stw	r8,4(sp)
    8574:	a809883a 	mov	r4,r21
    8578:	103ee83a 	callr	r2
    857c:	102f883a 	mov	r23,r2
    8580:	da000117 	ldw	r8,4(sp)
    8584:	00bfe00e 	bge	zero,r2,8508 <__alt_data_end+0xff008508>
    8588:	9de7c83a 	sub	r19,r19,r23
    858c:	98001f26 	beq	r19,zero,860c <__sfvwrite_r+0x2fc>
    8590:	a0800217 	ldw	r2,8(r20)
    8594:	e5f9883a 	add	fp,fp,r23
    8598:	95e5c83a 	sub	r18,r18,r23
    859c:	15efc83a 	sub	r23,r2,r23
    85a0:	a5c00215 	stw	r23,8(r20)
    85a4:	b83f8726 	beq	r23,zero,83c4 <__alt_data_end+0xff0083c4>
    85a8:	903fe11e 	bne	r18,zero,8530 <__alt_data_end+0xff008530>
    85ac:	8f000017 	ldw	fp,0(r17)
    85b0:	8c800117 	ldw	r18,4(r17)
    85b4:	0011883a 	mov	r8,zero
    85b8:	8c400204 	addi	r17,r17,8
    85bc:	003fdb06 	br	852c <__alt_data_end+0xff00852c>
    85c0:	180d883a 	mov	r6,r3
    85c4:	e00b883a 	mov	r5,fp
    85c8:	da000115 	stw	r8,4(sp)
    85cc:	d8c00015 	stw	r3,0(sp)
    85d0:	0008e180 	call	8e18 <memmove>
    85d4:	d8c00017 	ldw	r3,0(sp)
    85d8:	80800017 	ldw	r2,0(r16)
    85dc:	800b883a 	mov	r5,r16
    85e0:	a809883a 	mov	r4,r21
    85e4:	10c5883a 	add	r2,r2,r3
    85e8:	80800015 	stw	r2,0(r16)
    85ec:	d8c00015 	stw	r3,0(sp)
    85f0:	0007ab00 	call	7ab0 <_fflush_r>
    85f4:	d8c00017 	ldw	r3,0(sp)
    85f8:	da000117 	ldw	r8,4(sp)
    85fc:	103fc21e 	bne	r2,zero,8508 <__alt_data_end+0xff008508>
    8600:	182f883a 	mov	r23,r3
    8604:	9de7c83a 	sub	r19,r19,r23
    8608:	983fe11e 	bne	r19,zero,8590 <__alt_data_end+0xff008590>
    860c:	800b883a 	mov	r5,r16
    8610:	a809883a 	mov	r4,r21
    8614:	0007ab00 	call	7ab0 <_fflush_r>
    8618:	103fbb1e 	bne	r2,zero,8508 <__alt_data_end+0xff008508>
    861c:	0011883a 	mov	r8,zero
    8620:	003fdb06 	br	8590 <__alt_data_end+0xff008590>
    8624:	94c0012e 	bgeu	r18,r19,862c <__sfvwrite_r+0x31c>
    8628:	9027883a 	mov	r19,r18
    862c:	980d883a 	mov	r6,r19
    8630:	e00b883a 	mov	r5,fp
    8634:	0008e180 	call	8e18 <memmove>
    8638:	80800217 	ldw	r2,8(r16)
    863c:	80c00017 	ldw	r3,0(r16)
    8640:	14c5c83a 	sub	r2,r2,r19
    8644:	1cc7883a 	add	r3,r3,r19
    8648:	80800215 	stw	r2,8(r16)
    864c:	80c00015 	stw	r3,0(r16)
    8650:	10004326 	beq	r2,zero,8760 <__sfvwrite_r+0x450>
    8654:	9805883a 	mov	r2,r19
    8658:	003f8606 	br	8474 <__alt_data_end+0xff008474>
    865c:	b00d883a 	mov	r6,r22
    8660:	e00b883a 	mov	r5,fp
    8664:	da000115 	stw	r8,4(sp)
    8668:	0008e180 	call	8e18 <memmove>
    866c:	80800217 	ldw	r2,8(r16)
    8670:	80c00017 	ldw	r3,0(r16)
    8674:	da000117 	ldw	r8,4(sp)
    8678:	1585c83a 	sub	r2,r2,r22
    867c:	1dad883a 	add	r22,r3,r22
    8680:	80800215 	stw	r2,8(r16)
    8684:	85800015 	stw	r22,0(r16)
    8688:	003fbf06 	br	8588 <__alt_data_end+0xff008588>
    868c:	81000017 	ldw	r4,0(r16)
    8690:	9027883a 	mov	r19,r18
    8694:	902f883a 	mov	r23,r18
    8698:	003f6c06 	br	844c <__alt_data_end+0xff00844c>
    869c:	900d883a 	mov	r6,r18
    86a0:	01400284 	movi	r5,10
    86a4:	e009883a 	mov	r4,fp
    86a8:	0008bec0 	call	8bec <memchr>
    86ac:	10003e26 	beq	r2,zero,87a8 <__sfvwrite_r+0x498>
    86b0:	10800044 	addi	r2,r2,1
    86b4:	1727c83a 	sub	r19,r2,fp
    86b8:	02000044 	movi	r8,1
    86bc:	003f9d06 	br	8534 <__alt_data_end+0xff008534>
    86c0:	80800517 	ldw	r2,20(r16)
    86c4:	81400417 	ldw	r5,16(r16)
    86c8:	81c00017 	ldw	r7,0(r16)
    86cc:	10a7883a 	add	r19,r2,r2
    86d0:	9885883a 	add	r2,r19,r2
    86d4:	1026d7fa 	srli	r19,r2,31
    86d8:	396dc83a 	sub	r22,r7,r5
    86dc:	b1000044 	addi	r4,r22,1
    86e0:	9885883a 	add	r2,r19,r2
    86e4:	1027d07a 	srai	r19,r2,1
    86e8:	2485883a 	add	r2,r4,r18
    86ec:	980d883a 	mov	r6,r19
    86f0:	9880022e 	bgeu	r19,r2,86fc <__sfvwrite_r+0x3ec>
    86f4:	1027883a 	mov	r19,r2
    86f8:	100d883a 	mov	r6,r2
    86fc:	18c1000c 	andi	r3,r3,1024
    8700:	18001c26 	beq	r3,zero,8774 <__sfvwrite_r+0x464>
    8704:	300b883a 	mov	r5,r6
    8708:	a809883a 	mov	r4,r21
    870c:	00031b00 	call	31b0 <_malloc_r>
    8710:	102f883a 	mov	r23,r2
    8714:	10002926 	beq	r2,zero,87bc <__sfvwrite_r+0x4ac>
    8718:	81400417 	ldw	r5,16(r16)
    871c:	b00d883a 	mov	r6,r22
    8720:	1009883a 	mov	r4,r2
    8724:	0008cd00 	call	8cd0 <memcpy>
    8728:	8080030b 	ldhu	r2,12(r16)
    872c:	00fedfc4 	movi	r3,-1153
    8730:	10c4703a 	and	r2,r2,r3
    8734:	10802014 	ori	r2,r2,128
    8738:	8080030d 	sth	r2,12(r16)
    873c:	bd89883a 	add	r4,r23,r22
    8740:	9d8fc83a 	sub	r7,r19,r22
    8744:	85c00415 	stw	r23,16(r16)
    8748:	84c00515 	stw	r19,20(r16)
    874c:	81000015 	stw	r4,0(r16)
    8750:	9027883a 	mov	r19,r18
    8754:	81c00215 	stw	r7,8(r16)
    8758:	902f883a 	mov	r23,r18
    875c:	003f3b06 	br	844c <__alt_data_end+0xff00844c>
    8760:	800b883a 	mov	r5,r16
    8764:	a809883a 	mov	r4,r21
    8768:	0007ab00 	call	7ab0 <_fflush_r>
    876c:	103fb926 	beq	r2,zero,8654 <__alt_data_end+0xff008654>
    8770:	003f6506 	br	8508 <__alt_data_end+0xff008508>
    8774:	a809883a 	mov	r4,r21
    8778:	000a0980 	call	a098 <_realloc_r>
    877c:	102f883a 	mov	r23,r2
    8780:	103fee1e 	bne	r2,zero,873c <__alt_data_end+0xff00873c>
    8784:	81400417 	ldw	r5,16(r16)
    8788:	a809883a 	mov	r4,r21
    878c:	00080000 	call	8000 <_free_r>
    8790:	8080030b 	ldhu	r2,12(r16)
    8794:	00ffdfc4 	movi	r3,-129
    8798:	1884703a 	and	r2,r3,r2
    879c:	00c00304 	movi	r3,12
    87a0:	a8c00015 	stw	r3,0(r21)
    87a4:	003f5906 	br	850c <__alt_data_end+0xff00850c>
    87a8:	94c00044 	addi	r19,r18,1
    87ac:	02000044 	movi	r8,1
    87b0:	003f6006 	br	8534 <__alt_data_end+0xff008534>
    87b4:	00bfffc4 	movi	r2,-1
    87b8:	003f0306 	br	83c8 <__alt_data_end+0xff0083c8>
    87bc:	00800304 	movi	r2,12
    87c0:	a8800015 	stw	r2,0(r21)
    87c4:	8080030b 	ldhu	r2,12(r16)
    87c8:	003f5006 	br	850c <__alt_data_end+0xff00850c>

000087cc <_fwalk>:
    87cc:	defff704 	addi	sp,sp,-36
    87d0:	dd000415 	stw	r20,16(sp)
    87d4:	dfc00815 	stw	ra,32(sp)
    87d8:	ddc00715 	stw	r23,28(sp)
    87dc:	dd800615 	stw	r22,24(sp)
    87e0:	dd400515 	stw	r21,20(sp)
    87e4:	dcc00315 	stw	r19,12(sp)
    87e8:	dc800215 	stw	r18,8(sp)
    87ec:	dc400115 	stw	r17,4(sp)
    87f0:	dc000015 	stw	r16,0(sp)
    87f4:	2500b804 	addi	r20,r4,736
    87f8:	a0002326 	beq	r20,zero,8888 <_fwalk+0xbc>
    87fc:	282b883a 	mov	r21,r5
    8800:	002f883a 	mov	r23,zero
    8804:	05800044 	movi	r22,1
    8808:	04ffffc4 	movi	r19,-1
    880c:	a4400117 	ldw	r17,4(r20)
    8810:	a4800217 	ldw	r18,8(r20)
    8814:	8c7fffc4 	addi	r17,r17,-1
    8818:	88000d16 	blt	r17,zero,8850 <_fwalk+0x84>
    881c:	94000304 	addi	r16,r18,12
    8820:	94800384 	addi	r18,r18,14
    8824:	8080000b 	ldhu	r2,0(r16)
    8828:	8c7fffc4 	addi	r17,r17,-1
    882c:	813ffd04 	addi	r4,r16,-12
    8830:	b080042e 	bgeu	r22,r2,8844 <_fwalk+0x78>
    8834:	9080000f 	ldh	r2,0(r18)
    8838:	14c00226 	beq	r2,r19,8844 <_fwalk+0x78>
    883c:	a83ee83a 	callr	r21
    8840:	b8aeb03a 	or	r23,r23,r2
    8844:	84001a04 	addi	r16,r16,104
    8848:	94801a04 	addi	r18,r18,104
    884c:	8cfff51e 	bne	r17,r19,8824 <__alt_data_end+0xff008824>
    8850:	a5000017 	ldw	r20,0(r20)
    8854:	a03fed1e 	bne	r20,zero,880c <__alt_data_end+0xff00880c>
    8858:	b805883a 	mov	r2,r23
    885c:	dfc00817 	ldw	ra,32(sp)
    8860:	ddc00717 	ldw	r23,28(sp)
    8864:	dd800617 	ldw	r22,24(sp)
    8868:	dd400517 	ldw	r21,20(sp)
    886c:	dd000417 	ldw	r20,16(sp)
    8870:	dcc00317 	ldw	r19,12(sp)
    8874:	dc800217 	ldw	r18,8(sp)
    8878:	dc400117 	ldw	r17,4(sp)
    887c:	dc000017 	ldw	r16,0(sp)
    8880:	dec00904 	addi	sp,sp,36
    8884:	f800283a 	ret
    8888:	002f883a 	mov	r23,zero
    888c:	003ff206 	br	8858 <__alt_data_end+0xff008858>

00008890 <_fwalk_reent>:
    8890:	defff704 	addi	sp,sp,-36
    8894:	dd000415 	stw	r20,16(sp)
    8898:	dfc00815 	stw	ra,32(sp)
    889c:	ddc00715 	stw	r23,28(sp)
    88a0:	dd800615 	stw	r22,24(sp)
    88a4:	dd400515 	stw	r21,20(sp)
    88a8:	dcc00315 	stw	r19,12(sp)
    88ac:	dc800215 	stw	r18,8(sp)
    88b0:	dc400115 	stw	r17,4(sp)
    88b4:	dc000015 	stw	r16,0(sp)
    88b8:	2500b804 	addi	r20,r4,736
    88bc:	a0002326 	beq	r20,zero,894c <_fwalk_reent+0xbc>
    88c0:	282b883a 	mov	r21,r5
    88c4:	2027883a 	mov	r19,r4
    88c8:	002f883a 	mov	r23,zero
    88cc:	05800044 	movi	r22,1
    88d0:	04bfffc4 	movi	r18,-1
    88d4:	a4400117 	ldw	r17,4(r20)
    88d8:	a4000217 	ldw	r16,8(r20)
    88dc:	8c7fffc4 	addi	r17,r17,-1
    88e0:	88000c16 	blt	r17,zero,8914 <_fwalk_reent+0x84>
    88e4:	84000304 	addi	r16,r16,12
    88e8:	8080000b 	ldhu	r2,0(r16)
    88ec:	8c7fffc4 	addi	r17,r17,-1
    88f0:	817ffd04 	addi	r5,r16,-12
    88f4:	b080052e 	bgeu	r22,r2,890c <_fwalk_reent+0x7c>
    88f8:	8080008f 	ldh	r2,2(r16)
    88fc:	9809883a 	mov	r4,r19
    8900:	14800226 	beq	r2,r18,890c <_fwalk_reent+0x7c>
    8904:	a83ee83a 	callr	r21
    8908:	b8aeb03a 	or	r23,r23,r2
    890c:	84001a04 	addi	r16,r16,104
    8910:	8cbff51e 	bne	r17,r18,88e8 <__alt_data_end+0xff0088e8>
    8914:	a5000017 	ldw	r20,0(r20)
    8918:	a03fee1e 	bne	r20,zero,88d4 <__alt_data_end+0xff0088d4>
    891c:	b805883a 	mov	r2,r23
    8920:	dfc00817 	ldw	ra,32(sp)
    8924:	ddc00717 	ldw	r23,28(sp)
    8928:	dd800617 	ldw	r22,24(sp)
    892c:	dd400517 	ldw	r21,20(sp)
    8930:	dd000417 	ldw	r20,16(sp)
    8934:	dcc00317 	ldw	r19,12(sp)
    8938:	dc800217 	ldw	r18,8(sp)
    893c:	dc400117 	ldw	r17,4(sp)
    8940:	dc000017 	ldw	r16,0(sp)
    8944:	dec00904 	addi	sp,sp,36
    8948:	f800283a 	ret
    894c:	002f883a 	mov	r23,zero
    8950:	003ff206 	br	891c <__alt_data_end+0xff00891c>

00008954 <_setlocale_r>:
    8954:	30001b26 	beq	r6,zero,89c4 <_setlocale_r+0x70>
    8958:	01400074 	movhi	r5,1
    895c:	defffe04 	addi	sp,sp,-8
    8960:	29489c04 	addi	r5,r5,8816
    8964:	3009883a 	mov	r4,r6
    8968:	dc000015 	stw	r16,0(sp)
    896c:	dfc00115 	stw	ra,4(sp)
    8970:	3021883a 	mov	r16,r6
    8974:	000a7ac0 	call	a7ac <strcmp>
    8978:	1000061e 	bne	r2,zero,8994 <_setlocale_r+0x40>
    897c:	00800074 	movhi	r2,1
    8980:	10889b04 	addi	r2,r2,8812
    8984:	dfc00117 	ldw	ra,4(sp)
    8988:	dc000017 	ldw	r16,0(sp)
    898c:	dec00204 	addi	sp,sp,8
    8990:	f800283a 	ret
    8994:	01400074 	movhi	r5,1
    8998:	29489b04 	addi	r5,r5,8812
    899c:	8009883a 	mov	r4,r16
    89a0:	000a7ac0 	call	a7ac <strcmp>
    89a4:	103ff526 	beq	r2,zero,897c <__alt_data_end+0xff00897c>
    89a8:	01400074 	movhi	r5,1
    89ac:	29488604 	addi	r5,r5,8728
    89b0:	8009883a 	mov	r4,r16
    89b4:	000a7ac0 	call	a7ac <strcmp>
    89b8:	103ff026 	beq	r2,zero,897c <__alt_data_end+0xff00897c>
    89bc:	0005883a 	mov	r2,zero
    89c0:	003ff006 	br	8984 <__alt_data_end+0xff008984>
    89c4:	00800074 	movhi	r2,1
    89c8:	10889b04 	addi	r2,r2,8812
    89cc:	f800283a 	ret

000089d0 <__locale_charset>:
    89d0:	00800074 	movhi	r2,1
    89d4:	108b4e04 	addi	r2,r2,11576
    89d8:	f800283a 	ret

000089dc <__locale_mb_cur_max>:
    89dc:	00800074 	movhi	r2,1
    89e0:	108fea04 	addi	r2,r2,16296
    89e4:	10800017 	ldw	r2,0(r2)
    89e8:	f800283a 	ret

000089ec <__locale_msgcharset>:
    89ec:	00800074 	movhi	r2,1
    89f0:	108b4604 	addi	r2,r2,11544
    89f4:	f800283a 	ret

000089f8 <__locale_cjk_lang>:
    89f8:	0005883a 	mov	r2,zero
    89fc:	f800283a 	ret

00008a00 <_localeconv_r>:
    8a00:	00800074 	movhi	r2,1
    8a04:	108b5604 	addi	r2,r2,11608
    8a08:	f800283a 	ret

00008a0c <setlocale>:
    8a0c:	00800074 	movhi	r2,1
    8a10:	108fe904 	addi	r2,r2,16292
    8a14:	280d883a 	mov	r6,r5
    8a18:	200b883a 	mov	r5,r4
    8a1c:	11000017 	ldw	r4,0(r2)
    8a20:	00089541 	jmpi	8954 <_setlocale_r>

00008a24 <localeconv>:
    8a24:	00800074 	movhi	r2,1
    8a28:	108b5604 	addi	r2,r2,11608
    8a2c:	f800283a 	ret

00008a30 <__smakebuf_r>:
    8a30:	2880030b 	ldhu	r2,12(r5)
    8a34:	10c0008c 	andi	r3,r2,2
    8a38:	1800411e 	bne	r3,zero,8b40 <__smakebuf_r+0x110>
    8a3c:	deffec04 	addi	sp,sp,-80
    8a40:	dc000f15 	stw	r16,60(sp)
    8a44:	2821883a 	mov	r16,r5
    8a48:	2940038f 	ldh	r5,14(r5)
    8a4c:	dc401015 	stw	r17,64(sp)
    8a50:	dfc01315 	stw	ra,76(sp)
    8a54:	dcc01215 	stw	r19,72(sp)
    8a58:	dc801115 	stw	r18,68(sp)
    8a5c:	2023883a 	mov	r17,r4
    8a60:	28001c16 	blt	r5,zero,8ad4 <__smakebuf_r+0xa4>
    8a64:	d80d883a 	mov	r6,sp
    8a68:	000c3540 	call	c354 <_fstat_r>
    8a6c:	10001816 	blt	r2,zero,8ad0 <__smakebuf_r+0xa0>
    8a70:	d8800117 	ldw	r2,4(sp)
    8a74:	00e00014 	movui	r3,32768
    8a78:	10bc000c 	andi	r2,r2,61440
    8a7c:	14c80020 	cmpeqi	r19,r2,8192
    8a80:	10c03726 	beq	r2,r3,8b60 <__smakebuf_r+0x130>
    8a84:	80c0030b 	ldhu	r3,12(r16)
    8a88:	18c20014 	ori	r3,r3,2048
    8a8c:	80c0030d 	sth	r3,12(r16)
    8a90:	00c80004 	movi	r3,8192
    8a94:	10c0521e 	bne	r2,r3,8be0 <__smakebuf_r+0x1b0>
    8a98:	8140038f 	ldh	r5,14(r16)
    8a9c:	8809883a 	mov	r4,r17
    8aa0:	000c3b00 	call	c3b0 <_isatty_r>
    8aa4:	10004c26 	beq	r2,zero,8bd8 <__smakebuf_r+0x1a8>
    8aa8:	8080030b 	ldhu	r2,12(r16)
    8aac:	80c010c4 	addi	r3,r16,67
    8ab0:	80c00015 	stw	r3,0(r16)
    8ab4:	10800054 	ori	r2,r2,1
    8ab8:	8080030d 	sth	r2,12(r16)
    8abc:	00800044 	movi	r2,1
    8ac0:	80c00415 	stw	r3,16(r16)
    8ac4:	80800515 	stw	r2,20(r16)
    8ac8:	04810004 	movi	r18,1024
    8acc:	00000706 	br	8aec <__smakebuf_r+0xbc>
    8ad0:	8080030b 	ldhu	r2,12(r16)
    8ad4:	10c0200c 	andi	r3,r2,128
    8ad8:	18001f1e 	bne	r3,zero,8b58 <__smakebuf_r+0x128>
    8adc:	04810004 	movi	r18,1024
    8ae0:	10820014 	ori	r2,r2,2048
    8ae4:	8080030d 	sth	r2,12(r16)
    8ae8:	0027883a 	mov	r19,zero
    8aec:	900b883a 	mov	r5,r18
    8af0:	8809883a 	mov	r4,r17
    8af4:	00031b00 	call	31b0 <_malloc_r>
    8af8:	10002c26 	beq	r2,zero,8bac <__smakebuf_r+0x17c>
    8afc:	80c0030b 	ldhu	r3,12(r16)
    8b00:	01000034 	movhi	r4,0
    8b04:	211ed104 	addi	r4,r4,31556
    8b08:	89000f15 	stw	r4,60(r17)
    8b0c:	18c02014 	ori	r3,r3,128
    8b10:	80c0030d 	sth	r3,12(r16)
    8b14:	80800015 	stw	r2,0(r16)
    8b18:	80800415 	stw	r2,16(r16)
    8b1c:	84800515 	stw	r18,20(r16)
    8b20:	98001a1e 	bne	r19,zero,8b8c <__smakebuf_r+0x15c>
    8b24:	dfc01317 	ldw	ra,76(sp)
    8b28:	dcc01217 	ldw	r19,72(sp)
    8b2c:	dc801117 	ldw	r18,68(sp)
    8b30:	dc401017 	ldw	r17,64(sp)
    8b34:	dc000f17 	ldw	r16,60(sp)
    8b38:	dec01404 	addi	sp,sp,80
    8b3c:	f800283a 	ret
    8b40:	288010c4 	addi	r2,r5,67
    8b44:	28800015 	stw	r2,0(r5)
    8b48:	28800415 	stw	r2,16(r5)
    8b4c:	00800044 	movi	r2,1
    8b50:	28800515 	stw	r2,20(r5)
    8b54:	f800283a 	ret
    8b58:	04801004 	movi	r18,64
    8b5c:	003fe006 	br	8ae0 <__alt_data_end+0xff008ae0>
    8b60:	81000a17 	ldw	r4,40(r16)
    8b64:	00c00074 	movhi	r3,1
    8b68:	18e9d204 	addi	r3,r3,-22712
    8b6c:	20ffc51e 	bne	r4,r3,8a84 <__alt_data_end+0xff008a84>
    8b70:	8080030b 	ldhu	r2,12(r16)
    8b74:	04810004 	movi	r18,1024
    8b78:	84801315 	stw	r18,76(r16)
    8b7c:	1484b03a 	or	r2,r2,r18
    8b80:	8080030d 	sth	r2,12(r16)
    8b84:	0027883a 	mov	r19,zero
    8b88:	003fd806 	br	8aec <__alt_data_end+0xff008aec>
    8b8c:	8140038f 	ldh	r5,14(r16)
    8b90:	8809883a 	mov	r4,r17
    8b94:	000c3b00 	call	c3b0 <_isatty_r>
    8b98:	103fe226 	beq	r2,zero,8b24 <__alt_data_end+0xff008b24>
    8b9c:	8080030b 	ldhu	r2,12(r16)
    8ba0:	10800054 	ori	r2,r2,1
    8ba4:	8080030d 	sth	r2,12(r16)
    8ba8:	003fde06 	br	8b24 <__alt_data_end+0xff008b24>
    8bac:	8080030b 	ldhu	r2,12(r16)
    8bb0:	10c0800c 	andi	r3,r2,512
    8bb4:	183fdb1e 	bne	r3,zero,8b24 <__alt_data_end+0xff008b24>
    8bb8:	10800094 	ori	r2,r2,2
    8bbc:	80c010c4 	addi	r3,r16,67
    8bc0:	8080030d 	sth	r2,12(r16)
    8bc4:	00800044 	movi	r2,1
    8bc8:	80c00015 	stw	r3,0(r16)
    8bcc:	80c00415 	stw	r3,16(r16)
    8bd0:	80800515 	stw	r2,20(r16)
    8bd4:	003fd306 	br	8b24 <__alt_data_end+0xff008b24>
    8bd8:	04810004 	movi	r18,1024
    8bdc:	003fc306 	br	8aec <__alt_data_end+0xff008aec>
    8be0:	0027883a 	mov	r19,zero
    8be4:	04810004 	movi	r18,1024
    8be8:	003fc006 	br	8aec <__alt_data_end+0xff008aec>

00008bec <memchr>:
    8bec:	208000cc 	andi	r2,r4,3
    8bf0:	280f883a 	mov	r7,r5
    8bf4:	10003426 	beq	r2,zero,8cc8 <memchr+0xdc>
    8bf8:	30bfffc4 	addi	r2,r6,-1
    8bfc:	30001a26 	beq	r6,zero,8c68 <memchr+0x7c>
    8c00:	20c00003 	ldbu	r3,0(r4)
    8c04:	29803fcc 	andi	r6,r5,255
    8c08:	30c0051e 	bne	r6,r3,8c20 <memchr+0x34>
    8c0c:	00001806 	br	8c70 <memchr+0x84>
    8c10:	10001526 	beq	r2,zero,8c68 <memchr+0x7c>
    8c14:	20c00003 	ldbu	r3,0(r4)
    8c18:	10bfffc4 	addi	r2,r2,-1
    8c1c:	30c01426 	beq	r6,r3,8c70 <memchr+0x84>
    8c20:	21000044 	addi	r4,r4,1
    8c24:	20c000cc 	andi	r3,r4,3
    8c28:	183ff91e 	bne	r3,zero,8c10 <__alt_data_end+0xff008c10>
    8c2c:	020000c4 	movi	r8,3
    8c30:	40801136 	bltu	r8,r2,8c78 <memchr+0x8c>
    8c34:	10000c26 	beq	r2,zero,8c68 <memchr+0x7c>
    8c38:	20c00003 	ldbu	r3,0(r4)
    8c3c:	29403fcc 	andi	r5,r5,255
    8c40:	28c00b26 	beq	r5,r3,8c70 <memchr+0x84>
    8c44:	20c00044 	addi	r3,r4,1
    8c48:	39803fcc 	andi	r6,r7,255
    8c4c:	2089883a 	add	r4,r4,r2
    8c50:	00000306 	br	8c60 <memchr+0x74>
    8c54:	18c00044 	addi	r3,r3,1
    8c58:	197fffc3 	ldbu	r5,-1(r3)
    8c5c:	31400526 	beq	r6,r5,8c74 <memchr+0x88>
    8c60:	1805883a 	mov	r2,r3
    8c64:	20fffb1e 	bne	r4,r3,8c54 <__alt_data_end+0xff008c54>
    8c68:	0005883a 	mov	r2,zero
    8c6c:	f800283a 	ret
    8c70:	2005883a 	mov	r2,r4
    8c74:	f800283a 	ret
    8c78:	28c03fcc 	andi	r3,r5,255
    8c7c:	1812923a 	slli	r9,r3,8
    8c80:	02ffbff4 	movhi	r11,65279
    8c84:	02a02074 	movhi	r10,32897
    8c88:	48d2b03a 	or	r9,r9,r3
    8c8c:	4806943a 	slli	r3,r9,16
    8c90:	5affbfc4 	addi	r11,r11,-257
    8c94:	52a02004 	addi	r10,r10,-32640
    8c98:	48d2b03a 	or	r9,r9,r3
    8c9c:	20c00017 	ldw	r3,0(r4)
    8ca0:	48c6f03a 	xor	r3,r9,r3
    8ca4:	1acd883a 	add	r6,r3,r11
    8ca8:	00c6303a 	nor	r3,zero,r3
    8cac:	30c6703a 	and	r3,r6,r3
    8cb0:	1a86703a 	and	r3,r3,r10
    8cb4:	183fe01e 	bne	r3,zero,8c38 <__alt_data_end+0xff008c38>
    8cb8:	10bfff04 	addi	r2,r2,-4
    8cbc:	21000104 	addi	r4,r4,4
    8cc0:	40bff636 	bltu	r8,r2,8c9c <__alt_data_end+0xff008c9c>
    8cc4:	003fdb06 	br	8c34 <__alt_data_end+0xff008c34>
    8cc8:	3005883a 	mov	r2,r6
    8ccc:	003fd706 	br	8c2c <__alt_data_end+0xff008c2c>

00008cd0 <memcpy>:
    8cd0:	defffd04 	addi	sp,sp,-12
    8cd4:	dfc00215 	stw	ra,8(sp)
    8cd8:	dc400115 	stw	r17,4(sp)
    8cdc:	dc000015 	stw	r16,0(sp)
    8ce0:	00c003c4 	movi	r3,15
    8ce4:	2005883a 	mov	r2,r4
    8ce8:	1980452e 	bgeu	r3,r6,8e00 <memcpy+0x130>
    8cec:	2906b03a 	or	r3,r5,r4
    8cf0:	18c000cc 	andi	r3,r3,3
    8cf4:	1800441e 	bne	r3,zero,8e08 <memcpy+0x138>
    8cf8:	347ffc04 	addi	r17,r6,-16
    8cfc:	8822d13a 	srli	r17,r17,4
    8d00:	28c00104 	addi	r3,r5,4
    8d04:	23400104 	addi	r13,r4,4
    8d08:	8820913a 	slli	r16,r17,4
    8d0c:	2b000204 	addi	r12,r5,8
    8d10:	22c00204 	addi	r11,r4,8
    8d14:	84000504 	addi	r16,r16,20
    8d18:	2a800304 	addi	r10,r5,12
    8d1c:	22400304 	addi	r9,r4,12
    8d20:	2c21883a 	add	r16,r5,r16
    8d24:	2811883a 	mov	r8,r5
    8d28:	200f883a 	mov	r7,r4
    8d2c:	41000017 	ldw	r4,0(r8)
    8d30:	1fc00017 	ldw	ra,0(r3)
    8d34:	63c00017 	ldw	r15,0(r12)
    8d38:	39000015 	stw	r4,0(r7)
    8d3c:	53800017 	ldw	r14,0(r10)
    8d40:	6fc00015 	stw	ra,0(r13)
    8d44:	5bc00015 	stw	r15,0(r11)
    8d48:	4b800015 	stw	r14,0(r9)
    8d4c:	18c00404 	addi	r3,r3,16
    8d50:	39c00404 	addi	r7,r7,16
    8d54:	42000404 	addi	r8,r8,16
    8d58:	6b400404 	addi	r13,r13,16
    8d5c:	63000404 	addi	r12,r12,16
    8d60:	5ac00404 	addi	r11,r11,16
    8d64:	52800404 	addi	r10,r10,16
    8d68:	4a400404 	addi	r9,r9,16
    8d6c:	1c3fef1e 	bne	r3,r16,8d2c <__alt_data_end+0xff008d2c>
    8d70:	89c00044 	addi	r7,r17,1
    8d74:	380e913a 	slli	r7,r7,4
    8d78:	310003cc 	andi	r4,r6,15
    8d7c:	02c000c4 	movi	r11,3
    8d80:	11c7883a 	add	r3,r2,r7
    8d84:	29cb883a 	add	r5,r5,r7
    8d88:	5900212e 	bgeu	r11,r4,8e10 <memcpy+0x140>
    8d8c:	1813883a 	mov	r9,r3
    8d90:	2811883a 	mov	r8,r5
    8d94:	200f883a 	mov	r7,r4
    8d98:	42800017 	ldw	r10,0(r8)
    8d9c:	4a400104 	addi	r9,r9,4
    8da0:	39ffff04 	addi	r7,r7,-4
    8da4:	4abfff15 	stw	r10,-4(r9)
    8da8:	42000104 	addi	r8,r8,4
    8dac:	59fffa36 	bltu	r11,r7,8d98 <__alt_data_end+0xff008d98>
    8db0:	213fff04 	addi	r4,r4,-4
    8db4:	2008d0ba 	srli	r4,r4,2
    8db8:	318000cc 	andi	r6,r6,3
    8dbc:	21000044 	addi	r4,r4,1
    8dc0:	2109883a 	add	r4,r4,r4
    8dc4:	2109883a 	add	r4,r4,r4
    8dc8:	1907883a 	add	r3,r3,r4
    8dcc:	290b883a 	add	r5,r5,r4
    8dd0:	30000626 	beq	r6,zero,8dec <memcpy+0x11c>
    8dd4:	198d883a 	add	r6,r3,r6
    8dd8:	29c00003 	ldbu	r7,0(r5)
    8ddc:	18c00044 	addi	r3,r3,1
    8de0:	29400044 	addi	r5,r5,1
    8de4:	19ffffc5 	stb	r7,-1(r3)
    8de8:	19bffb1e 	bne	r3,r6,8dd8 <__alt_data_end+0xff008dd8>
    8dec:	dfc00217 	ldw	ra,8(sp)
    8df0:	dc400117 	ldw	r17,4(sp)
    8df4:	dc000017 	ldw	r16,0(sp)
    8df8:	dec00304 	addi	sp,sp,12
    8dfc:	f800283a 	ret
    8e00:	2007883a 	mov	r3,r4
    8e04:	003ff206 	br	8dd0 <__alt_data_end+0xff008dd0>
    8e08:	2007883a 	mov	r3,r4
    8e0c:	003ff106 	br	8dd4 <__alt_data_end+0xff008dd4>
    8e10:	200d883a 	mov	r6,r4
    8e14:	003fee06 	br	8dd0 <__alt_data_end+0xff008dd0>

00008e18 <memmove>:
    8e18:	2005883a 	mov	r2,r4
    8e1c:	29000b2e 	bgeu	r5,r4,8e4c <memmove+0x34>
    8e20:	298f883a 	add	r7,r5,r6
    8e24:	21c0092e 	bgeu	r4,r7,8e4c <memmove+0x34>
    8e28:	2187883a 	add	r3,r4,r6
    8e2c:	198bc83a 	sub	r5,r3,r6
    8e30:	30004826 	beq	r6,zero,8f54 <memmove+0x13c>
    8e34:	39ffffc4 	addi	r7,r7,-1
    8e38:	39000003 	ldbu	r4,0(r7)
    8e3c:	18ffffc4 	addi	r3,r3,-1
    8e40:	19000005 	stb	r4,0(r3)
    8e44:	28fffb1e 	bne	r5,r3,8e34 <__alt_data_end+0xff008e34>
    8e48:	f800283a 	ret
    8e4c:	00c003c4 	movi	r3,15
    8e50:	1980412e 	bgeu	r3,r6,8f58 <memmove+0x140>
    8e54:	2886b03a 	or	r3,r5,r2
    8e58:	18c000cc 	andi	r3,r3,3
    8e5c:	1800401e 	bne	r3,zero,8f60 <memmove+0x148>
    8e60:	33fffc04 	addi	r15,r6,-16
    8e64:	781ed13a 	srli	r15,r15,4
    8e68:	28c00104 	addi	r3,r5,4
    8e6c:	13400104 	addi	r13,r2,4
    8e70:	781c913a 	slli	r14,r15,4
    8e74:	2b000204 	addi	r12,r5,8
    8e78:	12c00204 	addi	r11,r2,8
    8e7c:	73800504 	addi	r14,r14,20
    8e80:	2a800304 	addi	r10,r5,12
    8e84:	12400304 	addi	r9,r2,12
    8e88:	2b9d883a 	add	r14,r5,r14
    8e8c:	2811883a 	mov	r8,r5
    8e90:	100f883a 	mov	r7,r2
    8e94:	41000017 	ldw	r4,0(r8)
    8e98:	39c00404 	addi	r7,r7,16
    8e9c:	18c00404 	addi	r3,r3,16
    8ea0:	393ffc15 	stw	r4,-16(r7)
    8ea4:	193ffc17 	ldw	r4,-16(r3)
    8ea8:	6b400404 	addi	r13,r13,16
    8eac:	5ac00404 	addi	r11,r11,16
    8eb0:	693ffc15 	stw	r4,-16(r13)
    8eb4:	61000017 	ldw	r4,0(r12)
    8eb8:	4a400404 	addi	r9,r9,16
    8ebc:	42000404 	addi	r8,r8,16
    8ec0:	593ffc15 	stw	r4,-16(r11)
    8ec4:	51000017 	ldw	r4,0(r10)
    8ec8:	63000404 	addi	r12,r12,16
    8ecc:	52800404 	addi	r10,r10,16
    8ed0:	493ffc15 	stw	r4,-16(r9)
    8ed4:	1bbfef1e 	bne	r3,r14,8e94 <__alt_data_end+0xff008e94>
    8ed8:	79000044 	addi	r4,r15,1
    8edc:	2008913a 	slli	r4,r4,4
    8ee0:	328003cc 	andi	r10,r6,15
    8ee4:	02c000c4 	movi	r11,3
    8ee8:	1107883a 	add	r3,r2,r4
    8eec:	290b883a 	add	r5,r5,r4
    8ef0:	5a801e2e 	bgeu	r11,r10,8f6c <memmove+0x154>
    8ef4:	1813883a 	mov	r9,r3
    8ef8:	2811883a 	mov	r8,r5
    8efc:	500f883a 	mov	r7,r10
    8f00:	41000017 	ldw	r4,0(r8)
    8f04:	4a400104 	addi	r9,r9,4
    8f08:	39ffff04 	addi	r7,r7,-4
    8f0c:	493fff15 	stw	r4,-4(r9)
    8f10:	42000104 	addi	r8,r8,4
    8f14:	59fffa36 	bltu	r11,r7,8f00 <__alt_data_end+0xff008f00>
    8f18:	513fff04 	addi	r4,r10,-4
    8f1c:	2008d0ba 	srli	r4,r4,2
    8f20:	318000cc 	andi	r6,r6,3
    8f24:	21000044 	addi	r4,r4,1
    8f28:	2109883a 	add	r4,r4,r4
    8f2c:	2109883a 	add	r4,r4,r4
    8f30:	1907883a 	add	r3,r3,r4
    8f34:	290b883a 	add	r5,r5,r4
    8f38:	30000b26 	beq	r6,zero,8f68 <memmove+0x150>
    8f3c:	198d883a 	add	r6,r3,r6
    8f40:	29c00003 	ldbu	r7,0(r5)
    8f44:	18c00044 	addi	r3,r3,1
    8f48:	29400044 	addi	r5,r5,1
    8f4c:	19ffffc5 	stb	r7,-1(r3)
    8f50:	19bffb1e 	bne	r3,r6,8f40 <__alt_data_end+0xff008f40>
    8f54:	f800283a 	ret
    8f58:	1007883a 	mov	r3,r2
    8f5c:	003ff606 	br	8f38 <__alt_data_end+0xff008f38>
    8f60:	1007883a 	mov	r3,r2
    8f64:	003ff506 	br	8f3c <__alt_data_end+0xff008f3c>
    8f68:	f800283a 	ret
    8f6c:	500d883a 	mov	r6,r10
    8f70:	003ff106 	br	8f38 <__alt_data_end+0xff008f38>

00008f74 <memset>:
    8f74:	20c000cc 	andi	r3,r4,3
    8f78:	2005883a 	mov	r2,r4
    8f7c:	18004426 	beq	r3,zero,9090 <memset+0x11c>
    8f80:	31ffffc4 	addi	r7,r6,-1
    8f84:	30004026 	beq	r6,zero,9088 <memset+0x114>
    8f88:	2813883a 	mov	r9,r5
    8f8c:	200d883a 	mov	r6,r4
    8f90:	2007883a 	mov	r3,r4
    8f94:	00000406 	br	8fa8 <memset+0x34>
    8f98:	3a3fffc4 	addi	r8,r7,-1
    8f9c:	31800044 	addi	r6,r6,1
    8fa0:	38003926 	beq	r7,zero,9088 <memset+0x114>
    8fa4:	400f883a 	mov	r7,r8
    8fa8:	18c00044 	addi	r3,r3,1
    8fac:	32400005 	stb	r9,0(r6)
    8fb0:	1a0000cc 	andi	r8,r3,3
    8fb4:	403ff81e 	bne	r8,zero,8f98 <__alt_data_end+0xff008f98>
    8fb8:	010000c4 	movi	r4,3
    8fbc:	21c02d2e 	bgeu	r4,r7,9074 <memset+0x100>
    8fc0:	29003fcc 	andi	r4,r5,255
    8fc4:	200c923a 	slli	r6,r4,8
    8fc8:	3108b03a 	or	r4,r6,r4
    8fcc:	200c943a 	slli	r6,r4,16
    8fd0:	218cb03a 	or	r6,r4,r6
    8fd4:	010003c4 	movi	r4,15
    8fd8:	21c0182e 	bgeu	r4,r7,903c <memset+0xc8>
    8fdc:	3b3ffc04 	addi	r12,r7,-16
    8fe0:	6018d13a 	srli	r12,r12,4
    8fe4:	1a000104 	addi	r8,r3,4
    8fe8:	1ac00204 	addi	r11,r3,8
    8fec:	6008913a 	slli	r4,r12,4
    8ff0:	1a800304 	addi	r10,r3,12
    8ff4:	1813883a 	mov	r9,r3
    8ff8:	21000504 	addi	r4,r4,20
    8ffc:	1909883a 	add	r4,r3,r4
    9000:	49800015 	stw	r6,0(r9)
    9004:	41800015 	stw	r6,0(r8)
    9008:	59800015 	stw	r6,0(r11)
    900c:	51800015 	stw	r6,0(r10)
    9010:	42000404 	addi	r8,r8,16
    9014:	4a400404 	addi	r9,r9,16
    9018:	5ac00404 	addi	r11,r11,16
    901c:	52800404 	addi	r10,r10,16
    9020:	413ff71e 	bne	r8,r4,9000 <__alt_data_end+0xff009000>
    9024:	63000044 	addi	r12,r12,1
    9028:	6018913a 	slli	r12,r12,4
    902c:	39c003cc 	andi	r7,r7,15
    9030:	010000c4 	movi	r4,3
    9034:	1b07883a 	add	r3,r3,r12
    9038:	21c00e2e 	bgeu	r4,r7,9074 <memset+0x100>
    903c:	1813883a 	mov	r9,r3
    9040:	3811883a 	mov	r8,r7
    9044:	010000c4 	movi	r4,3
    9048:	49800015 	stw	r6,0(r9)
    904c:	423fff04 	addi	r8,r8,-4
    9050:	4a400104 	addi	r9,r9,4
    9054:	223ffc36 	bltu	r4,r8,9048 <__alt_data_end+0xff009048>
    9058:	393fff04 	addi	r4,r7,-4
    905c:	2008d0ba 	srli	r4,r4,2
    9060:	39c000cc 	andi	r7,r7,3
    9064:	21000044 	addi	r4,r4,1
    9068:	2109883a 	add	r4,r4,r4
    906c:	2109883a 	add	r4,r4,r4
    9070:	1907883a 	add	r3,r3,r4
    9074:	38000526 	beq	r7,zero,908c <memset+0x118>
    9078:	19cf883a 	add	r7,r3,r7
    907c:	19400005 	stb	r5,0(r3)
    9080:	18c00044 	addi	r3,r3,1
    9084:	38fffd1e 	bne	r7,r3,907c <__alt_data_end+0xff00907c>
    9088:	f800283a 	ret
    908c:	f800283a 	ret
    9090:	2007883a 	mov	r3,r4
    9094:	300f883a 	mov	r7,r6
    9098:	003fc706 	br	8fb8 <__alt_data_end+0xff008fb8>

0000909c <_Balloc>:
    909c:	20801317 	ldw	r2,76(r4)
    90a0:	defffc04 	addi	sp,sp,-16
    90a4:	dc400115 	stw	r17,4(sp)
    90a8:	dc000015 	stw	r16,0(sp)
    90ac:	dfc00315 	stw	ra,12(sp)
    90b0:	dc800215 	stw	r18,8(sp)
    90b4:	2023883a 	mov	r17,r4
    90b8:	2821883a 	mov	r16,r5
    90bc:	10000f26 	beq	r2,zero,90fc <_Balloc+0x60>
    90c0:	8407883a 	add	r3,r16,r16
    90c4:	18c7883a 	add	r3,r3,r3
    90c8:	10c7883a 	add	r3,r2,r3
    90cc:	18800017 	ldw	r2,0(r3)
    90d0:	10001126 	beq	r2,zero,9118 <_Balloc+0x7c>
    90d4:	11000017 	ldw	r4,0(r2)
    90d8:	19000015 	stw	r4,0(r3)
    90dc:	10000415 	stw	zero,16(r2)
    90e0:	10000315 	stw	zero,12(r2)
    90e4:	dfc00317 	ldw	ra,12(sp)
    90e8:	dc800217 	ldw	r18,8(sp)
    90ec:	dc400117 	ldw	r17,4(sp)
    90f0:	dc000017 	ldw	r16,0(sp)
    90f4:	dec00404 	addi	sp,sp,16
    90f8:	f800283a 	ret
    90fc:	01800844 	movi	r6,33
    9100:	01400104 	movi	r5,4
    9104:	000bf840 	call	bf84 <_calloc_r>
    9108:	88801315 	stw	r2,76(r17)
    910c:	103fec1e 	bne	r2,zero,90c0 <__alt_data_end+0xff0090c0>
    9110:	0005883a 	mov	r2,zero
    9114:	003ff306 	br	90e4 <__alt_data_end+0xff0090e4>
    9118:	01400044 	movi	r5,1
    911c:	2c24983a 	sll	r18,r5,r16
    9120:	8809883a 	mov	r4,r17
    9124:	91800144 	addi	r6,r18,5
    9128:	318d883a 	add	r6,r6,r6
    912c:	318d883a 	add	r6,r6,r6
    9130:	000bf840 	call	bf84 <_calloc_r>
    9134:	103ff626 	beq	r2,zero,9110 <__alt_data_end+0xff009110>
    9138:	14000115 	stw	r16,4(r2)
    913c:	14800215 	stw	r18,8(r2)
    9140:	003fe606 	br	90dc <__alt_data_end+0xff0090dc>

00009144 <_Bfree>:
    9144:	28000826 	beq	r5,zero,9168 <_Bfree+0x24>
    9148:	28c00117 	ldw	r3,4(r5)
    914c:	20801317 	ldw	r2,76(r4)
    9150:	18c7883a 	add	r3,r3,r3
    9154:	18c7883a 	add	r3,r3,r3
    9158:	10c5883a 	add	r2,r2,r3
    915c:	10c00017 	ldw	r3,0(r2)
    9160:	28c00015 	stw	r3,0(r5)
    9164:	11400015 	stw	r5,0(r2)
    9168:	f800283a 	ret

0000916c <__multadd>:
    916c:	defffa04 	addi	sp,sp,-24
    9170:	dc800315 	stw	r18,12(sp)
    9174:	dc400215 	stw	r17,8(sp)
    9178:	dc000115 	stw	r16,4(sp)
    917c:	2823883a 	mov	r17,r5
    9180:	2c000417 	ldw	r16,16(r5)
    9184:	dfc00515 	stw	ra,20(sp)
    9188:	dcc00415 	stw	r19,16(sp)
    918c:	2025883a 	mov	r18,r4
    9190:	29400504 	addi	r5,r5,20
    9194:	0011883a 	mov	r8,zero
    9198:	28c00017 	ldw	r3,0(r5)
    919c:	29400104 	addi	r5,r5,4
    91a0:	42000044 	addi	r8,r8,1
    91a4:	18bfffcc 	andi	r2,r3,65535
    91a8:	1185383a 	mul	r2,r2,r6
    91ac:	1806d43a 	srli	r3,r3,16
    91b0:	11cf883a 	add	r7,r2,r7
    91b4:	3808d43a 	srli	r4,r7,16
    91b8:	1987383a 	mul	r3,r3,r6
    91bc:	38bfffcc 	andi	r2,r7,65535
    91c0:	1907883a 	add	r3,r3,r4
    91c4:	1808943a 	slli	r4,r3,16
    91c8:	180ed43a 	srli	r7,r3,16
    91cc:	2085883a 	add	r2,r4,r2
    91d0:	28bfff15 	stw	r2,-4(r5)
    91d4:	443ff016 	blt	r8,r16,9198 <__alt_data_end+0xff009198>
    91d8:	38000926 	beq	r7,zero,9200 <__multadd+0x94>
    91dc:	88800217 	ldw	r2,8(r17)
    91e0:	80800f0e 	bge	r16,r2,9220 <__multadd+0xb4>
    91e4:	80800144 	addi	r2,r16,5
    91e8:	1085883a 	add	r2,r2,r2
    91ec:	1085883a 	add	r2,r2,r2
    91f0:	8885883a 	add	r2,r17,r2
    91f4:	11c00015 	stw	r7,0(r2)
    91f8:	84000044 	addi	r16,r16,1
    91fc:	8c000415 	stw	r16,16(r17)
    9200:	8805883a 	mov	r2,r17
    9204:	dfc00517 	ldw	ra,20(sp)
    9208:	dcc00417 	ldw	r19,16(sp)
    920c:	dc800317 	ldw	r18,12(sp)
    9210:	dc400217 	ldw	r17,8(sp)
    9214:	dc000117 	ldw	r16,4(sp)
    9218:	dec00604 	addi	sp,sp,24
    921c:	f800283a 	ret
    9220:	89400117 	ldw	r5,4(r17)
    9224:	9009883a 	mov	r4,r18
    9228:	d9c00015 	stw	r7,0(sp)
    922c:	29400044 	addi	r5,r5,1
    9230:	000909c0 	call	909c <_Balloc>
    9234:	89800417 	ldw	r6,16(r17)
    9238:	89400304 	addi	r5,r17,12
    923c:	11000304 	addi	r4,r2,12
    9240:	31800084 	addi	r6,r6,2
    9244:	318d883a 	add	r6,r6,r6
    9248:	318d883a 	add	r6,r6,r6
    924c:	1027883a 	mov	r19,r2
    9250:	0008cd00 	call	8cd0 <memcpy>
    9254:	d9c00017 	ldw	r7,0(sp)
    9258:	88000a26 	beq	r17,zero,9284 <__multadd+0x118>
    925c:	88c00117 	ldw	r3,4(r17)
    9260:	90801317 	ldw	r2,76(r18)
    9264:	18c7883a 	add	r3,r3,r3
    9268:	18c7883a 	add	r3,r3,r3
    926c:	10c5883a 	add	r2,r2,r3
    9270:	10c00017 	ldw	r3,0(r2)
    9274:	88c00015 	stw	r3,0(r17)
    9278:	14400015 	stw	r17,0(r2)
    927c:	9823883a 	mov	r17,r19
    9280:	003fd806 	br	91e4 <__alt_data_end+0xff0091e4>
    9284:	9823883a 	mov	r17,r19
    9288:	003fd606 	br	91e4 <__alt_data_end+0xff0091e4>

0000928c <__s2b>:
    928c:	defff904 	addi	sp,sp,-28
    9290:	dc400115 	stw	r17,4(sp)
    9294:	dc000015 	stw	r16,0(sp)
    9298:	2023883a 	mov	r17,r4
    929c:	2821883a 	mov	r16,r5
    92a0:	39000204 	addi	r4,r7,8
    92a4:	01400244 	movi	r5,9
    92a8:	dcc00315 	stw	r19,12(sp)
    92ac:	dc800215 	stw	r18,8(sp)
    92b0:	dfc00615 	stw	ra,24(sp)
    92b4:	dd400515 	stw	r21,20(sp)
    92b8:	dd000415 	stw	r20,16(sp)
    92bc:	3825883a 	mov	r18,r7
    92c0:	3027883a 	mov	r19,r6
    92c4:	00025e00 	call	25e0 <__divsi3>
    92c8:	00c00044 	movi	r3,1
    92cc:	000b883a 	mov	r5,zero
    92d0:	1880030e 	bge	r3,r2,92e0 <__s2b+0x54>
    92d4:	18c7883a 	add	r3,r3,r3
    92d8:	29400044 	addi	r5,r5,1
    92dc:	18bffd16 	blt	r3,r2,92d4 <__alt_data_end+0xff0092d4>
    92e0:	8809883a 	mov	r4,r17
    92e4:	000909c0 	call	909c <_Balloc>
    92e8:	d8c00717 	ldw	r3,28(sp)
    92ec:	10c00515 	stw	r3,20(r2)
    92f0:	00c00044 	movi	r3,1
    92f4:	10c00415 	stw	r3,16(r2)
    92f8:	00c00244 	movi	r3,9
    92fc:	1cc0210e 	bge	r3,r19,9384 <__s2b+0xf8>
    9300:	80eb883a 	add	r21,r16,r3
    9304:	a829883a 	mov	r20,r21
    9308:	84e1883a 	add	r16,r16,r19
    930c:	a1c00007 	ldb	r7,0(r20)
    9310:	01800284 	movi	r6,10
    9314:	a5000044 	addi	r20,r20,1
    9318:	100b883a 	mov	r5,r2
    931c:	39fff404 	addi	r7,r7,-48
    9320:	8809883a 	mov	r4,r17
    9324:	000916c0 	call	916c <__multadd>
    9328:	a43ff81e 	bne	r20,r16,930c <__alt_data_end+0xff00930c>
    932c:	ace1883a 	add	r16,r21,r19
    9330:	843ffe04 	addi	r16,r16,-8
    9334:	9c800a0e 	bge	r19,r18,9360 <__s2b+0xd4>
    9338:	94e5c83a 	sub	r18,r18,r19
    933c:	84a5883a 	add	r18,r16,r18
    9340:	81c00007 	ldb	r7,0(r16)
    9344:	01800284 	movi	r6,10
    9348:	84000044 	addi	r16,r16,1
    934c:	100b883a 	mov	r5,r2
    9350:	39fff404 	addi	r7,r7,-48
    9354:	8809883a 	mov	r4,r17
    9358:	000916c0 	call	916c <__multadd>
    935c:	84bff81e 	bne	r16,r18,9340 <__alt_data_end+0xff009340>
    9360:	dfc00617 	ldw	ra,24(sp)
    9364:	dd400517 	ldw	r21,20(sp)
    9368:	dd000417 	ldw	r20,16(sp)
    936c:	dcc00317 	ldw	r19,12(sp)
    9370:	dc800217 	ldw	r18,8(sp)
    9374:	dc400117 	ldw	r17,4(sp)
    9378:	dc000017 	ldw	r16,0(sp)
    937c:	dec00704 	addi	sp,sp,28
    9380:	f800283a 	ret
    9384:	84000284 	addi	r16,r16,10
    9388:	1827883a 	mov	r19,r3
    938c:	003fe906 	br	9334 <__alt_data_end+0xff009334>

00009390 <__hi0bits>:
    9390:	20bfffec 	andhi	r2,r4,65535
    9394:	1000141e 	bne	r2,zero,93e8 <__hi0bits+0x58>
    9398:	2008943a 	slli	r4,r4,16
    939c:	00800404 	movi	r2,16
    93a0:	20ffc02c 	andhi	r3,r4,65280
    93a4:	1800021e 	bne	r3,zero,93b0 <__hi0bits+0x20>
    93a8:	2008923a 	slli	r4,r4,8
    93ac:	10800204 	addi	r2,r2,8
    93b0:	20fc002c 	andhi	r3,r4,61440
    93b4:	1800021e 	bne	r3,zero,93c0 <__hi0bits+0x30>
    93b8:	2008913a 	slli	r4,r4,4
    93bc:	10800104 	addi	r2,r2,4
    93c0:	20f0002c 	andhi	r3,r4,49152
    93c4:	1800031e 	bne	r3,zero,93d4 <__hi0bits+0x44>
    93c8:	2109883a 	add	r4,r4,r4
    93cc:	10800084 	addi	r2,r2,2
    93d0:	2109883a 	add	r4,r4,r4
    93d4:	20000316 	blt	r4,zero,93e4 <__hi0bits+0x54>
    93d8:	2110002c 	andhi	r4,r4,16384
    93dc:	2000041e 	bne	r4,zero,93f0 <__hi0bits+0x60>
    93e0:	00800804 	movi	r2,32
    93e4:	f800283a 	ret
    93e8:	0005883a 	mov	r2,zero
    93ec:	003fec06 	br	93a0 <__alt_data_end+0xff0093a0>
    93f0:	10800044 	addi	r2,r2,1
    93f4:	f800283a 	ret

000093f8 <__lo0bits>:
    93f8:	20c00017 	ldw	r3,0(r4)
    93fc:	188001cc 	andi	r2,r3,7
    9400:	10000826 	beq	r2,zero,9424 <__lo0bits+0x2c>
    9404:	1880004c 	andi	r2,r3,1
    9408:	1000211e 	bne	r2,zero,9490 <__lo0bits+0x98>
    940c:	1880008c 	andi	r2,r3,2
    9410:	1000211e 	bne	r2,zero,9498 <__lo0bits+0xa0>
    9414:	1806d0ba 	srli	r3,r3,2
    9418:	00800084 	movi	r2,2
    941c:	20c00015 	stw	r3,0(r4)
    9420:	f800283a 	ret
    9424:	18bfffcc 	andi	r2,r3,65535
    9428:	10001326 	beq	r2,zero,9478 <__lo0bits+0x80>
    942c:	0005883a 	mov	r2,zero
    9430:	19403fcc 	andi	r5,r3,255
    9434:	2800021e 	bne	r5,zero,9440 <__lo0bits+0x48>
    9438:	1806d23a 	srli	r3,r3,8
    943c:	10800204 	addi	r2,r2,8
    9440:	194003cc 	andi	r5,r3,15
    9444:	2800021e 	bne	r5,zero,9450 <__lo0bits+0x58>
    9448:	1806d13a 	srli	r3,r3,4
    944c:	10800104 	addi	r2,r2,4
    9450:	194000cc 	andi	r5,r3,3
    9454:	2800021e 	bne	r5,zero,9460 <__lo0bits+0x68>
    9458:	1806d0ba 	srli	r3,r3,2
    945c:	10800084 	addi	r2,r2,2
    9460:	1940004c 	andi	r5,r3,1
    9464:	2800081e 	bne	r5,zero,9488 <__lo0bits+0x90>
    9468:	1806d07a 	srli	r3,r3,1
    946c:	1800051e 	bne	r3,zero,9484 <__lo0bits+0x8c>
    9470:	00800804 	movi	r2,32
    9474:	f800283a 	ret
    9478:	1806d43a 	srli	r3,r3,16
    947c:	00800404 	movi	r2,16
    9480:	003feb06 	br	9430 <__alt_data_end+0xff009430>
    9484:	10800044 	addi	r2,r2,1
    9488:	20c00015 	stw	r3,0(r4)
    948c:	f800283a 	ret
    9490:	0005883a 	mov	r2,zero
    9494:	f800283a 	ret
    9498:	1806d07a 	srli	r3,r3,1
    949c:	00800044 	movi	r2,1
    94a0:	20c00015 	stw	r3,0(r4)
    94a4:	f800283a 	ret

000094a8 <__i2b>:
    94a8:	defffd04 	addi	sp,sp,-12
    94ac:	dc000015 	stw	r16,0(sp)
    94b0:	04000044 	movi	r16,1
    94b4:	dc400115 	stw	r17,4(sp)
    94b8:	2823883a 	mov	r17,r5
    94bc:	800b883a 	mov	r5,r16
    94c0:	dfc00215 	stw	ra,8(sp)
    94c4:	000909c0 	call	909c <_Balloc>
    94c8:	14400515 	stw	r17,20(r2)
    94cc:	14000415 	stw	r16,16(r2)
    94d0:	dfc00217 	ldw	ra,8(sp)
    94d4:	dc400117 	ldw	r17,4(sp)
    94d8:	dc000017 	ldw	r16,0(sp)
    94dc:	dec00304 	addi	sp,sp,12
    94e0:	f800283a 	ret

000094e4 <__multiply>:
    94e4:	defffa04 	addi	sp,sp,-24
    94e8:	dcc00315 	stw	r19,12(sp)
    94ec:	dc800215 	stw	r18,8(sp)
    94f0:	34c00417 	ldw	r19,16(r6)
    94f4:	2c800417 	ldw	r18,16(r5)
    94f8:	dd000415 	stw	r20,16(sp)
    94fc:	dc400115 	stw	r17,4(sp)
    9500:	dfc00515 	stw	ra,20(sp)
    9504:	dc000015 	stw	r16,0(sp)
    9508:	2829883a 	mov	r20,r5
    950c:	3023883a 	mov	r17,r6
    9510:	94c0050e 	bge	r18,r19,9528 <__multiply+0x44>
    9514:	9007883a 	mov	r3,r18
    9518:	3029883a 	mov	r20,r6
    951c:	9825883a 	mov	r18,r19
    9520:	2823883a 	mov	r17,r5
    9524:	1827883a 	mov	r19,r3
    9528:	a0800217 	ldw	r2,8(r20)
    952c:	94e1883a 	add	r16,r18,r19
    9530:	a1400117 	ldw	r5,4(r20)
    9534:	1400010e 	bge	r2,r16,953c <__multiply+0x58>
    9538:	29400044 	addi	r5,r5,1
    953c:	000909c0 	call	909c <_Balloc>
    9540:	8415883a 	add	r10,r16,r16
    9544:	12c00504 	addi	r11,r2,20
    9548:	5295883a 	add	r10,r10,r10
    954c:	5a95883a 	add	r10,r11,r10
    9550:	5807883a 	mov	r3,r11
    9554:	5a80032e 	bgeu	r11,r10,9564 <__multiply+0x80>
    9558:	18000015 	stw	zero,0(r3)
    955c:	18c00104 	addi	r3,r3,4
    9560:	1abffd36 	bltu	r3,r10,9558 <__alt_data_end+0xff009558>
    9564:	9ce7883a 	add	r19,r19,r19
    9568:	94a5883a 	add	r18,r18,r18
    956c:	89800504 	addi	r6,r17,20
    9570:	9ce7883a 	add	r19,r19,r19
    9574:	a3400504 	addi	r13,r20,20
    9578:	94a5883a 	add	r18,r18,r18
    957c:	34d9883a 	add	r12,r6,r19
    9580:	6c93883a 	add	r9,r13,r18
    9584:	3300422e 	bgeu	r6,r12,9690 <__multiply+0x1ac>
    9588:	37c00017 	ldw	ra,0(r6)
    958c:	fbffffcc 	andi	r15,ra,65535
    9590:	78001b26 	beq	r15,zero,9600 <__multiply+0x11c>
    9594:	5811883a 	mov	r8,r11
    9598:	681d883a 	mov	r14,r13
    959c:	000f883a 	mov	r7,zero
    95a0:	71000017 	ldw	r4,0(r14)
    95a4:	40c00017 	ldw	r3,0(r8)
    95a8:	73800104 	addi	r14,r14,4
    95ac:	217fffcc 	andi	r5,r4,65535
    95b0:	2bcb383a 	mul	r5,r5,r15
    95b4:	2008d43a 	srli	r4,r4,16
    95b8:	1c7fffcc 	andi	r17,r3,65535
    95bc:	2c4b883a 	add	r5,r5,r17
    95c0:	29cb883a 	add	r5,r5,r7
    95c4:	23c9383a 	mul	r4,r4,r15
    95c8:	1806d43a 	srli	r3,r3,16
    95cc:	280ed43a 	srli	r7,r5,16
    95d0:	297fffcc 	andi	r5,r5,65535
    95d4:	20c7883a 	add	r3,r4,r3
    95d8:	19c7883a 	add	r3,r3,r7
    95dc:	1808943a 	slli	r4,r3,16
    95e0:	4023883a 	mov	r17,r8
    95e4:	180ed43a 	srli	r7,r3,16
    95e8:	214ab03a 	or	r5,r4,r5
    95ec:	41400015 	stw	r5,0(r8)
    95f0:	42000104 	addi	r8,r8,4
    95f4:	727fea36 	bltu	r14,r9,95a0 <__alt_data_end+0xff0095a0>
    95f8:	89c00115 	stw	r7,4(r17)
    95fc:	37c00017 	ldw	ra,0(r6)
    9600:	f83ed43a 	srli	ra,ra,16
    9604:	f8001f26 	beq	ra,zero,9684 <__multiply+0x1a0>
    9608:	58c00017 	ldw	r3,0(r11)
    960c:	681d883a 	mov	r14,r13
    9610:	581f883a 	mov	r15,r11
    9614:	1811883a 	mov	r8,r3
    9618:	5825883a 	mov	r18,r11
    961c:	000f883a 	mov	r7,zero
    9620:	00000106 	br	9628 <__multiply+0x144>
    9624:	8825883a 	mov	r18,r17
    9628:	7140000b 	ldhu	r5,0(r14)
    962c:	4010d43a 	srli	r8,r8,16
    9630:	193fffcc 	andi	r4,r3,65535
    9634:	2fcb383a 	mul	r5,r5,ra
    9638:	7bc00104 	addi	r15,r15,4
    963c:	73800104 	addi	r14,r14,4
    9640:	2a0b883a 	add	r5,r5,r8
    9644:	29cb883a 	add	r5,r5,r7
    9648:	2806943a 	slli	r3,r5,16
    964c:	94400104 	addi	r17,r18,4
    9650:	280ad43a 	srli	r5,r5,16
    9654:	1908b03a 	or	r4,r3,r4
    9658:	793fff15 	stw	r4,-4(r15)
    965c:	70ffff17 	ldw	r3,-4(r14)
    9660:	8a000017 	ldw	r8,0(r17)
    9664:	1806d43a 	srli	r3,r3,16
    9668:	413fffcc 	andi	r4,r8,65535
    966c:	1fc7383a 	mul	r3,r3,ra
    9670:	1907883a 	add	r3,r3,r4
    9674:	1947883a 	add	r3,r3,r5
    9678:	180ed43a 	srli	r7,r3,16
    967c:	727fe936 	bltu	r14,r9,9624 <__alt_data_end+0xff009624>
    9680:	90c00115 	stw	r3,4(r18)
    9684:	31800104 	addi	r6,r6,4
    9688:	5ac00104 	addi	r11,r11,4
    968c:	333fbe36 	bltu	r6,r12,9588 <__alt_data_end+0xff009588>
    9690:	0400090e 	bge	zero,r16,96b8 <__multiply+0x1d4>
    9694:	50ffff17 	ldw	r3,-4(r10)
    9698:	52bfff04 	addi	r10,r10,-4
    969c:	18000326 	beq	r3,zero,96ac <__multiply+0x1c8>
    96a0:	00000506 	br	96b8 <__multiply+0x1d4>
    96a4:	50c00017 	ldw	r3,0(r10)
    96a8:	1800031e 	bne	r3,zero,96b8 <__multiply+0x1d4>
    96ac:	843fffc4 	addi	r16,r16,-1
    96b0:	52bfff04 	addi	r10,r10,-4
    96b4:	803ffb1e 	bne	r16,zero,96a4 <__alt_data_end+0xff0096a4>
    96b8:	14000415 	stw	r16,16(r2)
    96bc:	dfc00517 	ldw	ra,20(sp)
    96c0:	dd000417 	ldw	r20,16(sp)
    96c4:	dcc00317 	ldw	r19,12(sp)
    96c8:	dc800217 	ldw	r18,8(sp)
    96cc:	dc400117 	ldw	r17,4(sp)
    96d0:	dc000017 	ldw	r16,0(sp)
    96d4:	dec00604 	addi	sp,sp,24
    96d8:	f800283a 	ret

000096dc <__pow5mult>:
    96dc:	defffa04 	addi	sp,sp,-24
    96e0:	dcc00315 	stw	r19,12(sp)
    96e4:	dc000015 	stw	r16,0(sp)
    96e8:	dfc00515 	stw	ra,20(sp)
    96ec:	dd000415 	stw	r20,16(sp)
    96f0:	dc800215 	stw	r18,8(sp)
    96f4:	dc400115 	stw	r17,4(sp)
    96f8:	308000cc 	andi	r2,r6,3
    96fc:	3021883a 	mov	r16,r6
    9700:	2027883a 	mov	r19,r4
    9704:	10002f1e 	bne	r2,zero,97c4 <__pow5mult+0xe8>
    9708:	2825883a 	mov	r18,r5
    970c:	8021d0ba 	srai	r16,r16,2
    9710:	80001a26 	beq	r16,zero,977c <__pow5mult+0xa0>
    9714:	9c401217 	ldw	r17,72(r19)
    9718:	8800061e 	bne	r17,zero,9734 <__pow5mult+0x58>
    971c:	00003406 	br	97f0 <__pow5mult+0x114>
    9720:	8021d07a 	srai	r16,r16,1
    9724:	80001526 	beq	r16,zero,977c <__pow5mult+0xa0>
    9728:	88800017 	ldw	r2,0(r17)
    972c:	10001c26 	beq	r2,zero,97a0 <__pow5mult+0xc4>
    9730:	1023883a 	mov	r17,r2
    9734:	8080004c 	andi	r2,r16,1
    9738:	103ff926 	beq	r2,zero,9720 <__alt_data_end+0xff009720>
    973c:	880d883a 	mov	r6,r17
    9740:	900b883a 	mov	r5,r18
    9744:	9809883a 	mov	r4,r19
    9748:	00094e40 	call	94e4 <__multiply>
    974c:	90001b26 	beq	r18,zero,97bc <__pow5mult+0xe0>
    9750:	91000117 	ldw	r4,4(r18)
    9754:	98c01317 	ldw	r3,76(r19)
    9758:	8021d07a 	srai	r16,r16,1
    975c:	2109883a 	add	r4,r4,r4
    9760:	2109883a 	add	r4,r4,r4
    9764:	1907883a 	add	r3,r3,r4
    9768:	19000017 	ldw	r4,0(r3)
    976c:	91000015 	stw	r4,0(r18)
    9770:	1c800015 	stw	r18,0(r3)
    9774:	1025883a 	mov	r18,r2
    9778:	803feb1e 	bne	r16,zero,9728 <__alt_data_end+0xff009728>
    977c:	9005883a 	mov	r2,r18
    9780:	dfc00517 	ldw	ra,20(sp)
    9784:	dd000417 	ldw	r20,16(sp)
    9788:	dcc00317 	ldw	r19,12(sp)
    978c:	dc800217 	ldw	r18,8(sp)
    9790:	dc400117 	ldw	r17,4(sp)
    9794:	dc000017 	ldw	r16,0(sp)
    9798:	dec00604 	addi	sp,sp,24
    979c:	f800283a 	ret
    97a0:	880d883a 	mov	r6,r17
    97a4:	880b883a 	mov	r5,r17
    97a8:	9809883a 	mov	r4,r19
    97ac:	00094e40 	call	94e4 <__multiply>
    97b0:	88800015 	stw	r2,0(r17)
    97b4:	10000015 	stw	zero,0(r2)
    97b8:	003fdd06 	br	9730 <__alt_data_end+0xff009730>
    97bc:	1025883a 	mov	r18,r2
    97c0:	003fd706 	br	9720 <__alt_data_end+0xff009720>
    97c4:	10bfffc4 	addi	r2,r2,-1
    97c8:	1085883a 	add	r2,r2,r2
    97cc:	00c00074 	movhi	r3,1
    97d0:	18c89f04 	addi	r3,r3,8828
    97d4:	1085883a 	add	r2,r2,r2
    97d8:	1885883a 	add	r2,r3,r2
    97dc:	11800017 	ldw	r6,0(r2)
    97e0:	000f883a 	mov	r7,zero
    97e4:	000916c0 	call	916c <__multadd>
    97e8:	1025883a 	mov	r18,r2
    97ec:	003fc706 	br	970c <__alt_data_end+0xff00970c>
    97f0:	05000044 	movi	r20,1
    97f4:	a00b883a 	mov	r5,r20
    97f8:	9809883a 	mov	r4,r19
    97fc:	000909c0 	call	909c <_Balloc>
    9800:	1023883a 	mov	r17,r2
    9804:	00809c44 	movi	r2,625
    9808:	88800515 	stw	r2,20(r17)
    980c:	8d000415 	stw	r20,16(r17)
    9810:	9c401215 	stw	r17,72(r19)
    9814:	88000015 	stw	zero,0(r17)
    9818:	003fc606 	br	9734 <__alt_data_end+0xff009734>

0000981c <__lshift>:
    981c:	defff904 	addi	sp,sp,-28
    9820:	dd400515 	stw	r21,20(sp)
    9824:	dcc00315 	stw	r19,12(sp)
    9828:	302bd17a 	srai	r21,r6,5
    982c:	2cc00417 	ldw	r19,16(r5)
    9830:	28800217 	ldw	r2,8(r5)
    9834:	dd000415 	stw	r20,16(sp)
    9838:	ace7883a 	add	r19,r21,r19
    983c:	dc800215 	stw	r18,8(sp)
    9840:	dc400115 	stw	r17,4(sp)
    9844:	dc000015 	stw	r16,0(sp)
    9848:	dfc00615 	stw	ra,24(sp)
    984c:	9c000044 	addi	r16,r19,1
    9850:	2823883a 	mov	r17,r5
    9854:	3029883a 	mov	r20,r6
    9858:	2025883a 	mov	r18,r4
    985c:	29400117 	ldw	r5,4(r5)
    9860:	1400030e 	bge	r2,r16,9870 <__lshift+0x54>
    9864:	1085883a 	add	r2,r2,r2
    9868:	29400044 	addi	r5,r5,1
    986c:	143ffd16 	blt	r2,r16,9864 <__alt_data_end+0xff009864>
    9870:	9009883a 	mov	r4,r18
    9874:	000909c0 	call	909c <_Balloc>
    9878:	10c00504 	addi	r3,r2,20
    987c:	0540070e 	bge	zero,r21,989c <__lshift+0x80>
    9880:	ad6b883a 	add	r21,r21,r21
    9884:	ad6b883a 	add	r21,r21,r21
    9888:	1809883a 	mov	r4,r3
    988c:	1d47883a 	add	r3,r3,r21
    9890:	20000015 	stw	zero,0(r4)
    9894:	21000104 	addi	r4,r4,4
    9898:	193ffd1e 	bne	r3,r4,9890 <__alt_data_end+0xff009890>
    989c:	8a000417 	ldw	r8,16(r17)
    98a0:	89000504 	addi	r4,r17,20
    98a4:	a18007cc 	andi	r6,r20,31
    98a8:	4211883a 	add	r8,r8,r8
    98ac:	4211883a 	add	r8,r8,r8
    98b0:	2211883a 	add	r8,r4,r8
    98b4:	30002326 	beq	r6,zero,9944 <__lshift+0x128>
    98b8:	02400804 	movi	r9,32
    98bc:	4993c83a 	sub	r9,r9,r6
    98c0:	000b883a 	mov	r5,zero
    98c4:	21c00017 	ldw	r7,0(r4)
    98c8:	1815883a 	mov	r10,r3
    98cc:	18c00104 	addi	r3,r3,4
    98d0:	398e983a 	sll	r7,r7,r6
    98d4:	21000104 	addi	r4,r4,4
    98d8:	394ab03a 	or	r5,r7,r5
    98dc:	197fff15 	stw	r5,-4(r3)
    98e0:	217fff17 	ldw	r5,-4(r4)
    98e4:	2a4ad83a 	srl	r5,r5,r9
    98e8:	223ff636 	bltu	r4,r8,98c4 <__alt_data_end+0xff0098c4>
    98ec:	51400115 	stw	r5,4(r10)
    98f0:	28001a1e 	bne	r5,zero,995c <__lshift+0x140>
    98f4:	843fffc4 	addi	r16,r16,-1
    98f8:	14000415 	stw	r16,16(r2)
    98fc:	88000826 	beq	r17,zero,9920 <__lshift+0x104>
    9900:	89000117 	ldw	r4,4(r17)
    9904:	90c01317 	ldw	r3,76(r18)
    9908:	2109883a 	add	r4,r4,r4
    990c:	2109883a 	add	r4,r4,r4
    9910:	1907883a 	add	r3,r3,r4
    9914:	19000017 	ldw	r4,0(r3)
    9918:	89000015 	stw	r4,0(r17)
    991c:	1c400015 	stw	r17,0(r3)
    9920:	dfc00617 	ldw	ra,24(sp)
    9924:	dd400517 	ldw	r21,20(sp)
    9928:	dd000417 	ldw	r20,16(sp)
    992c:	dcc00317 	ldw	r19,12(sp)
    9930:	dc800217 	ldw	r18,8(sp)
    9934:	dc400117 	ldw	r17,4(sp)
    9938:	dc000017 	ldw	r16,0(sp)
    993c:	dec00704 	addi	sp,sp,28
    9940:	f800283a 	ret
    9944:	21400017 	ldw	r5,0(r4)
    9948:	18c00104 	addi	r3,r3,4
    994c:	21000104 	addi	r4,r4,4
    9950:	197fff15 	stw	r5,-4(r3)
    9954:	223ffb36 	bltu	r4,r8,9944 <__alt_data_end+0xff009944>
    9958:	003fe606 	br	98f4 <__alt_data_end+0xff0098f4>
    995c:	9c000084 	addi	r16,r19,2
    9960:	003fe406 	br	98f4 <__alt_data_end+0xff0098f4>

00009964 <__mcmp>:
    9964:	20800417 	ldw	r2,16(r4)
    9968:	28c00417 	ldw	r3,16(r5)
    996c:	10c5c83a 	sub	r2,r2,r3
    9970:	1000111e 	bne	r2,zero,99b8 <__mcmp+0x54>
    9974:	18c7883a 	add	r3,r3,r3
    9978:	18c7883a 	add	r3,r3,r3
    997c:	21000504 	addi	r4,r4,20
    9980:	29400504 	addi	r5,r5,20
    9984:	20c5883a 	add	r2,r4,r3
    9988:	28cb883a 	add	r5,r5,r3
    998c:	00000106 	br	9994 <__mcmp+0x30>
    9990:	20800a2e 	bgeu	r4,r2,99bc <__mcmp+0x58>
    9994:	10bfff04 	addi	r2,r2,-4
    9998:	297fff04 	addi	r5,r5,-4
    999c:	11800017 	ldw	r6,0(r2)
    99a0:	28c00017 	ldw	r3,0(r5)
    99a4:	30fffa26 	beq	r6,r3,9990 <__alt_data_end+0xff009990>
    99a8:	30c00236 	bltu	r6,r3,99b4 <__mcmp+0x50>
    99ac:	00800044 	movi	r2,1
    99b0:	f800283a 	ret
    99b4:	00bfffc4 	movi	r2,-1
    99b8:	f800283a 	ret
    99bc:	0005883a 	mov	r2,zero
    99c0:	f800283a 	ret

000099c4 <__mdiff>:
    99c4:	28c00417 	ldw	r3,16(r5)
    99c8:	30800417 	ldw	r2,16(r6)
    99cc:	defffa04 	addi	sp,sp,-24
    99d0:	dcc00315 	stw	r19,12(sp)
    99d4:	dc800215 	stw	r18,8(sp)
    99d8:	dfc00515 	stw	ra,20(sp)
    99dc:	dd000415 	stw	r20,16(sp)
    99e0:	dc400115 	stw	r17,4(sp)
    99e4:	dc000015 	stw	r16,0(sp)
    99e8:	1887c83a 	sub	r3,r3,r2
    99ec:	2825883a 	mov	r18,r5
    99f0:	3027883a 	mov	r19,r6
    99f4:	1800141e 	bne	r3,zero,9a48 <__mdiff+0x84>
    99f8:	1085883a 	add	r2,r2,r2
    99fc:	1085883a 	add	r2,r2,r2
    9a00:	2a000504 	addi	r8,r5,20
    9a04:	34000504 	addi	r16,r6,20
    9a08:	4087883a 	add	r3,r8,r2
    9a0c:	8085883a 	add	r2,r16,r2
    9a10:	00000106 	br	9a18 <__mdiff+0x54>
    9a14:	40c0592e 	bgeu	r8,r3,9b7c <__mdiff+0x1b8>
    9a18:	18ffff04 	addi	r3,r3,-4
    9a1c:	10bfff04 	addi	r2,r2,-4
    9a20:	19c00017 	ldw	r7,0(r3)
    9a24:	11400017 	ldw	r5,0(r2)
    9a28:	397ffa26 	beq	r7,r5,9a14 <__alt_data_end+0xff009a14>
    9a2c:	3940592e 	bgeu	r7,r5,9b94 <__mdiff+0x1d0>
    9a30:	9005883a 	mov	r2,r18
    9a34:	4023883a 	mov	r17,r8
    9a38:	9825883a 	mov	r18,r19
    9a3c:	05000044 	movi	r20,1
    9a40:	1027883a 	mov	r19,r2
    9a44:	00000406 	br	9a58 <__mdiff+0x94>
    9a48:	18005616 	blt	r3,zero,9ba4 <__mdiff+0x1e0>
    9a4c:	34400504 	addi	r17,r6,20
    9a50:	2c000504 	addi	r16,r5,20
    9a54:	0029883a 	mov	r20,zero
    9a58:	91400117 	ldw	r5,4(r18)
    9a5c:	000909c0 	call	909c <_Balloc>
    9a60:	92400417 	ldw	r9,16(r18)
    9a64:	9b000417 	ldw	r12,16(r19)
    9a68:	12c00504 	addi	r11,r2,20
    9a6c:	4a51883a 	add	r8,r9,r9
    9a70:	6319883a 	add	r12,r12,r12
    9a74:	4211883a 	add	r8,r8,r8
    9a78:	6319883a 	add	r12,r12,r12
    9a7c:	15000315 	stw	r20,12(r2)
    9a80:	8211883a 	add	r8,r16,r8
    9a84:	8b19883a 	add	r12,r17,r12
    9a88:	0007883a 	mov	r3,zero
    9a8c:	81400017 	ldw	r5,0(r16)
    9a90:	89c00017 	ldw	r7,0(r17)
    9a94:	59800104 	addi	r6,r11,4
    9a98:	293fffcc 	andi	r4,r5,65535
    9a9c:	20c7883a 	add	r3,r4,r3
    9aa0:	393fffcc 	andi	r4,r7,65535
    9aa4:	1909c83a 	sub	r4,r3,r4
    9aa8:	280ad43a 	srli	r5,r5,16
    9aac:	380ed43a 	srli	r7,r7,16
    9ab0:	2007d43a 	srai	r3,r4,16
    9ab4:	213fffcc 	andi	r4,r4,65535
    9ab8:	29cbc83a 	sub	r5,r5,r7
    9abc:	28c7883a 	add	r3,r5,r3
    9ac0:	180a943a 	slli	r5,r3,16
    9ac4:	8c400104 	addi	r17,r17,4
    9ac8:	84000104 	addi	r16,r16,4
    9acc:	2908b03a 	or	r4,r5,r4
    9ad0:	59000015 	stw	r4,0(r11)
    9ad4:	1807d43a 	srai	r3,r3,16
    9ad8:	3015883a 	mov	r10,r6
    9adc:	3017883a 	mov	r11,r6
    9ae0:	8b3fea36 	bltu	r17,r12,9a8c <__alt_data_end+0xff009a8c>
    9ae4:	8200162e 	bgeu	r16,r8,9b40 <__mdiff+0x17c>
    9ae8:	8017883a 	mov	r11,r16
    9aec:	59400017 	ldw	r5,0(r11)
    9af0:	31800104 	addi	r6,r6,4
    9af4:	5ac00104 	addi	r11,r11,4
    9af8:	293fffcc 	andi	r4,r5,65535
    9afc:	20c7883a 	add	r3,r4,r3
    9b00:	280ed43a 	srli	r7,r5,16
    9b04:	180bd43a 	srai	r5,r3,16
    9b08:	193fffcc 	andi	r4,r3,65535
    9b0c:	3947883a 	add	r3,r7,r5
    9b10:	180a943a 	slli	r5,r3,16
    9b14:	1807d43a 	srai	r3,r3,16
    9b18:	2908b03a 	or	r4,r5,r4
    9b1c:	313fff15 	stw	r4,-4(r6)
    9b20:	5a3ff236 	bltu	r11,r8,9aec <__alt_data_end+0xff009aec>
    9b24:	0406303a 	nor	r3,zero,r16
    9b28:	1a07883a 	add	r3,r3,r8
    9b2c:	1806d0ba 	srli	r3,r3,2
    9b30:	18c00044 	addi	r3,r3,1
    9b34:	18c7883a 	add	r3,r3,r3
    9b38:	18c7883a 	add	r3,r3,r3
    9b3c:	50d5883a 	add	r10,r10,r3
    9b40:	50ffff04 	addi	r3,r10,-4
    9b44:	2000041e 	bne	r4,zero,9b58 <__mdiff+0x194>
    9b48:	18ffff04 	addi	r3,r3,-4
    9b4c:	19000017 	ldw	r4,0(r3)
    9b50:	4a7fffc4 	addi	r9,r9,-1
    9b54:	203ffc26 	beq	r4,zero,9b48 <__alt_data_end+0xff009b48>
    9b58:	12400415 	stw	r9,16(r2)
    9b5c:	dfc00517 	ldw	ra,20(sp)
    9b60:	dd000417 	ldw	r20,16(sp)
    9b64:	dcc00317 	ldw	r19,12(sp)
    9b68:	dc800217 	ldw	r18,8(sp)
    9b6c:	dc400117 	ldw	r17,4(sp)
    9b70:	dc000017 	ldw	r16,0(sp)
    9b74:	dec00604 	addi	sp,sp,24
    9b78:	f800283a 	ret
    9b7c:	000b883a 	mov	r5,zero
    9b80:	000909c0 	call	909c <_Balloc>
    9b84:	00c00044 	movi	r3,1
    9b88:	10c00415 	stw	r3,16(r2)
    9b8c:	10000515 	stw	zero,20(r2)
    9b90:	003ff206 	br	9b5c <__alt_data_end+0xff009b5c>
    9b94:	8023883a 	mov	r17,r16
    9b98:	0029883a 	mov	r20,zero
    9b9c:	4021883a 	mov	r16,r8
    9ba0:	003fad06 	br	9a58 <__alt_data_end+0xff009a58>
    9ba4:	9005883a 	mov	r2,r18
    9ba8:	94400504 	addi	r17,r18,20
    9bac:	9c000504 	addi	r16,r19,20
    9bb0:	9825883a 	mov	r18,r19
    9bb4:	05000044 	movi	r20,1
    9bb8:	1027883a 	mov	r19,r2
    9bbc:	003fa606 	br	9a58 <__alt_data_end+0xff009a58>

00009bc0 <__ulp>:
    9bc0:	295ffc2c 	andhi	r5,r5,32752
    9bc4:	00bf3034 	movhi	r2,64704
    9bc8:	2887883a 	add	r3,r5,r2
    9bcc:	00c0020e 	bge	zero,r3,9bd8 <__ulp+0x18>
    9bd0:	0005883a 	mov	r2,zero
    9bd4:	f800283a 	ret
    9bd8:	00c7c83a 	sub	r3,zero,r3
    9bdc:	1807d53a 	srai	r3,r3,20
    9be0:	008004c4 	movi	r2,19
    9be4:	10c00b0e 	bge	r2,r3,9c14 <__ulp+0x54>
    9be8:	18bffb04 	addi	r2,r3,-20
    9bec:	01000784 	movi	r4,30
    9bf0:	0007883a 	mov	r3,zero
    9bf4:	20800516 	blt	r4,r2,9c0c <__ulp+0x4c>
    9bf8:	010007c4 	movi	r4,31
    9bfc:	2089c83a 	sub	r4,r4,r2
    9c00:	00800044 	movi	r2,1
    9c04:	1104983a 	sll	r2,r2,r4
    9c08:	f800283a 	ret
    9c0c:	00800044 	movi	r2,1
    9c10:	f800283a 	ret
    9c14:	01400234 	movhi	r5,8
    9c18:	28c7d83a 	sra	r3,r5,r3
    9c1c:	0005883a 	mov	r2,zero
    9c20:	f800283a 	ret

00009c24 <__b2d>:
    9c24:	defffa04 	addi	sp,sp,-24
    9c28:	dc000015 	stw	r16,0(sp)
    9c2c:	24000417 	ldw	r16,16(r4)
    9c30:	dc400115 	stw	r17,4(sp)
    9c34:	24400504 	addi	r17,r4,20
    9c38:	8421883a 	add	r16,r16,r16
    9c3c:	8421883a 	add	r16,r16,r16
    9c40:	8c21883a 	add	r16,r17,r16
    9c44:	dc800215 	stw	r18,8(sp)
    9c48:	84bfff17 	ldw	r18,-4(r16)
    9c4c:	dd000415 	stw	r20,16(sp)
    9c50:	dcc00315 	stw	r19,12(sp)
    9c54:	9009883a 	mov	r4,r18
    9c58:	2829883a 	mov	r20,r5
    9c5c:	dfc00515 	stw	ra,20(sp)
    9c60:	00093900 	call	9390 <__hi0bits>
    9c64:	00c00804 	movi	r3,32
    9c68:	1889c83a 	sub	r4,r3,r2
    9c6c:	a1000015 	stw	r4,0(r20)
    9c70:	01000284 	movi	r4,10
    9c74:	84ffff04 	addi	r19,r16,-4
    9c78:	20801216 	blt	r4,r2,9cc4 <__b2d+0xa0>
    9c7c:	018002c4 	movi	r6,11
    9c80:	308dc83a 	sub	r6,r6,r2
    9c84:	9186d83a 	srl	r3,r18,r6
    9c88:	18cffc34 	orhi	r3,r3,16368
    9c8c:	8cc0212e 	bgeu	r17,r19,9d14 <__b2d+0xf0>
    9c90:	813ffe17 	ldw	r4,-8(r16)
    9c94:	218cd83a 	srl	r6,r4,r6
    9c98:	10800544 	addi	r2,r2,21
    9c9c:	9084983a 	sll	r2,r18,r2
    9ca0:	1184b03a 	or	r2,r2,r6
    9ca4:	dfc00517 	ldw	ra,20(sp)
    9ca8:	dd000417 	ldw	r20,16(sp)
    9cac:	dcc00317 	ldw	r19,12(sp)
    9cb0:	dc800217 	ldw	r18,8(sp)
    9cb4:	dc400117 	ldw	r17,4(sp)
    9cb8:	dc000017 	ldw	r16,0(sp)
    9cbc:	dec00604 	addi	sp,sp,24
    9cc0:	f800283a 	ret
    9cc4:	8cc00f2e 	bgeu	r17,r19,9d04 <__b2d+0xe0>
    9cc8:	117ffd44 	addi	r5,r2,-11
    9ccc:	80bffe17 	ldw	r2,-8(r16)
    9cd0:	28000e26 	beq	r5,zero,9d0c <__b2d+0xe8>
    9cd4:	1949c83a 	sub	r4,r3,r5
    9cd8:	9164983a 	sll	r18,r18,r5
    9cdc:	1106d83a 	srl	r3,r2,r4
    9ce0:	81bffe04 	addi	r6,r16,-8
    9ce4:	948ffc34 	orhi	r18,r18,16368
    9ce8:	90c6b03a 	or	r3,r18,r3
    9cec:	89800e2e 	bgeu	r17,r6,9d28 <__b2d+0x104>
    9cf0:	81bffd17 	ldw	r6,-12(r16)
    9cf4:	1144983a 	sll	r2,r2,r5
    9cf8:	310ad83a 	srl	r5,r6,r4
    9cfc:	2884b03a 	or	r2,r5,r2
    9d00:	003fe806 	br	9ca4 <__alt_data_end+0xff009ca4>
    9d04:	10bffd44 	addi	r2,r2,-11
    9d08:	1000041e 	bne	r2,zero,9d1c <__b2d+0xf8>
    9d0c:	90cffc34 	orhi	r3,r18,16368
    9d10:	003fe406 	br	9ca4 <__alt_data_end+0xff009ca4>
    9d14:	000d883a 	mov	r6,zero
    9d18:	003fdf06 	br	9c98 <__alt_data_end+0xff009c98>
    9d1c:	90a4983a 	sll	r18,r18,r2
    9d20:	0005883a 	mov	r2,zero
    9d24:	003ff906 	br	9d0c <__alt_data_end+0xff009d0c>
    9d28:	1144983a 	sll	r2,r2,r5
    9d2c:	003fdd06 	br	9ca4 <__alt_data_end+0xff009ca4>

00009d30 <__d2b>:
    9d30:	defff804 	addi	sp,sp,-32
    9d34:	dc000215 	stw	r16,8(sp)
    9d38:	3021883a 	mov	r16,r6
    9d3c:	dc400315 	stw	r17,12(sp)
    9d40:	8022907a 	slli	r17,r16,1
    9d44:	dd000615 	stw	r20,24(sp)
    9d48:	2829883a 	mov	r20,r5
    9d4c:	01400044 	movi	r5,1
    9d50:	dcc00515 	stw	r19,20(sp)
    9d54:	dc800415 	stw	r18,16(sp)
    9d58:	dfc00715 	stw	ra,28(sp)
    9d5c:	3825883a 	mov	r18,r7
    9d60:	8822d57a 	srli	r17,r17,21
    9d64:	000909c0 	call	909c <_Balloc>
    9d68:	1027883a 	mov	r19,r2
    9d6c:	00800434 	movhi	r2,16
    9d70:	10bfffc4 	addi	r2,r2,-1
    9d74:	808c703a 	and	r6,r16,r2
    9d78:	88000126 	beq	r17,zero,9d80 <__d2b+0x50>
    9d7c:	31800434 	orhi	r6,r6,16
    9d80:	d9800015 	stw	r6,0(sp)
    9d84:	a0002426 	beq	r20,zero,9e18 <__d2b+0xe8>
    9d88:	d9000104 	addi	r4,sp,4
    9d8c:	dd000115 	stw	r20,4(sp)
    9d90:	00093f80 	call	93f8 <__lo0bits>
    9d94:	d8c00017 	ldw	r3,0(sp)
    9d98:	10002f1e 	bne	r2,zero,9e58 <__d2b+0x128>
    9d9c:	d9000117 	ldw	r4,4(sp)
    9da0:	99000515 	stw	r4,20(r19)
    9da4:	1821003a 	cmpeq	r16,r3,zero
    9da8:	01000084 	movi	r4,2
    9dac:	2421c83a 	sub	r16,r4,r16
    9db0:	98c00615 	stw	r3,24(r19)
    9db4:	9c000415 	stw	r16,16(r19)
    9db8:	88001f1e 	bne	r17,zero,9e38 <__d2b+0x108>
    9dbc:	10bef384 	addi	r2,r2,-1074
    9dc0:	90800015 	stw	r2,0(r18)
    9dc4:	00900034 	movhi	r2,16384
    9dc8:	10bfffc4 	addi	r2,r2,-1
    9dcc:	8085883a 	add	r2,r16,r2
    9dd0:	1085883a 	add	r2,r2,r2
    9dd4:	1085883a 	add	r2,r2,r2
    9dd8:	9885883a 	add	r2,r19,r2
    9ddc:	11000517 	ldw	r4,20(r2)
    9de0:	8020917a 	slli	r16,r16,5
    9de4:	00093900 	call	9390 <__hi0bits>
    9de8:	d8c00817 	ldw	r3,32(sp)
    9dec:	8085c83a 	sub	r2,r16,r2
    9df0:	18800015 	stw	r2,0(r3)
    9df4:	9805883a 	mov	r2,r19
    9df8:	dfc00717 	ldw	ra,28(sp)
    9dfc:	dd000617 	ldw	r20,24(sp)
    9e00:	dcc00517 	ldw	r19,20(sp)
    9e04:	dc800417 	ldw	r18,16(sp)
    9e08:	dc400317 	ldw	r17,12(sp)
    9e0c:	dc000217 	ldw	r16,8(sp)
    9e10:	dec00804 	addi	sp,sp,32
    9e14:	f800283a 	ret
    9e18:	d809883a 	mov	r4,sp
    9e1c:	00093f80 	call	93f8 <__lo0bits>
    9e20:	d8c00017 	ldw	r3,0(sp)
    9e24:	04000044 	movi	r16,1
    9e28:	9c000415 	stw	r16,16(r19)
    9e2c:	98c00515 	stw	r3,20(r19)
    9e30:	10800804 	addi	r2,r2,32
    9e34:	883fe126 	beq	r17,zero,9dbc <__alt_data_end+0xff009dbc>
    9e38:	00c00d44 	movi	r3,53
    9e3c:	8c7ef344 	addi	r17,r17,-1075
    9e40:	88a3883a 	add	r17,r17,r2
    9e44:	1885c83a 	sub	r2,r3,r2
    9e48:	d8c00817 	ldw	r3,32(sp)
    9e4c:	94400015 	stw	r17,0(r18)
    9e50:	18800015 	stw	r2,0(r3)
    9e54:	003fe706 	br	9df4 <__alt_data_end+0xff009df4>
    9e58:	01000804 	movi	r4,32
    9e5c:	2089c83a 	sub	r4,r4,r2
    9e60:	1908983a 	sll	r4,r3,r4
    9e64:	d9400117 	ldw	r5,4(sp)
    9e68:	1886d83a 	srl	r3,r3,r2
    9e6c:	2148b03a 	or	r4,r4,r5
    9e70:	99000515 	stw	r4,20(r19)
    9e74:	d8c00015 	stw	r3,0(sp)
    9e78:	003fca06 	br	9da4 <__alt_data_end+0xff009da4>

00009e7c <__ratio>:
    9e7c:	defff904 	addi	sp,sp,-28
    9e80:	dc400315 	stw	r17,12(sp)
    9e84:	2823883a 	mov	r17,r5
    9e88:	d9400104 	addi	r5,sp,4
    9e8c:	dfc00615 	stw	ra,24(sp)
    9e90:	dcc00515 	stw	r19,20(sp)
    9e94:	dc800415 	stw	r18,16(sp)
    9e98:	2027883a 	mov	r19,r4
    9e9c:	dc000215 	stw	r16,8(sp)
    9ea0:	0009c240 	call	9c24 <__b2d>
    9ea4:	d80b883a 	mov	r5,sp
    9ea8:	8809883a 	mov	r4,r17
    9eac:	1025883a 	mov	r18,r2
    9eb0:	1821883a 	mov	r16,r3
    9eb4:	0009c240 	call	9c24 <__b2d>
    9eb8:	8a000417 	ldw	r8,16(r17)
    9ebc:	99000417 	ldw	r4,16(r19)
    9ec0:	d9400117 	ldw	r5,4(sp)
    9ec4:	2209c83a 	sub	r4,r4,r8
    9ec8:	2010917a 	slli	r8,r4,5
    9ecc:	d9000017 	ldw	r4,0(sp)
    9ed0:	2909c83a 	sub	r4,r5,r4
    9ed4:	4109883a 	add	r4,r8,r4
    9ed8:	01000e0e 	bge	zero,r4,9f14 <__ratio+0x98>
    9edc:	2008953a 	slli	r4,r4,20
    9ee0:	2421883a 	add	r16,r4,r16
    9ee4:	100d883a 	mov	r6,r2
    9ee8:	180f883a 	mov	r7,r3
    9eec:	9009883a 	mov	r4,r18
    9ef0:	800b883a 	mov	r5,r16
    9ef4:	00027940 	call	2794 <__divdf3>
    9ef8:	dfc00617 	ldw	ra,24(sp)
    9efc:	dcc00517 	ldw	r19,20(sp)
    9f00:	dc800417 	ldw	r18,16(sp)
    9f04:	dc400317 	ldw	r17,12(sp)
    9f08:	dc000217 	ldw	r16,8(sp)
    9f0c:	dec00704 	addi	sp,sp,28
    9f10:	f800283a 	ret
    9f14:	2008953a 	slli	r4,r4,20
    9f18:	1907c83a 	sub	r3,r3,r4
    9f1c:	003ff106 	br	9ee4 <__alt_data_end+0xff009ee4>

00009f20 <_mprec_log10>:
    9f20:	defffe04 	addi	sp,sp,-8
    9f24:	dc000015 	stw	r16,0(sp)
    9f28:	dfc00115 	stw	ra,4(sp)
    9f2c:	008005c4 	movi	r2,23
    9f30:	2021883a 	mov	r16,r4
    9f34:	11000d0e 	bge	r2,r4,9f6c <_mprec_log10+0x4c>
    9f38:	0005883a 	mov	r2,zero
    9f3c:	00cffc34 	movhi	r3,16368
    9f40:	843fffc4 	addi	r16,r16,-1
    9f44:	000d883a 	mov	r6,zero
    9f48:	01d00934 	movhi	r7,16420
    9f4c:	1009883a 	mov	r4,r2
    9f50:	180b883a 	mov	r5,r3
    9f54:	000ddb80 	call	ddb8 <__muldf3>
    9f58:	803ff91e 	bne	r16,zero,9f40 <__alt_data_end+0xff009f40>
    9f5c:	dfc00117 	ldw	ra,4(sp)
    9f60:	dc000017 	ldw	r16,0(sp)
    9f64:	dec00204 	addi	sp,sp,8
    9f68:	f800283a 	ret
    9f6c:	202090fa 	slli	r16,r4,3
    9f70:	00800074 	movhi	r2,1
    9f74:	1088b604 	addi	r2,r2,8920
    9f78:	1421883a 	add	r16,r2,r16
    9f7c:	80800017 	ldw	r2,0(r16)
    9f80:	80c00117 	ldw	r3,4(r16)
    9f84:	dfc00117 	ldw	ra,4(sp)
    9f88:	dc000017 	ldw	r16,0(sp)
    9f8c:	dec00204 	addi	sp,sp,8
    9f90:	f800283a 	ret

00009f94 <__copybits>:
    9f94:	297fffc4 	addi	r5,r5,-1
    9f98:	280fd17a 	srai	r7,r5,5
    9f9c:	30c00417 	ldw	r3,16(r6)
    9fa0:	30800504 	addi	r2,r6,20
    9fa4:	39c00044 	addi	r7,r7,1
    9fa8:	18c7883a 	add	r3,r3,r3
    9fac:	39cf883a 	add	r7,r7,r7
    9fb0:	18c7883a 	add	r3,r3,r3
    9fb4:	39cf883a 	add	r7,r7,r7
    9fb8:	10c7883a 	add	r3,r2,r3
    9fbc:	21cf883a 	add	r7,r4,r7
    9fc0:	10c00d2e 	bgeu	r2,r3,9ff8 <__copybits+0x64>
    9fc4:	200b883a 	mov	r5,r4
    9fc8:	12000017 	ldw	r8,0(r2)
    9fcc:	29400104 	addi	r5,r5,4
    9fd0:	10800104 	addi	r2,r2,4
    9fd4:	2a3fff15 	stw	r8,-4(r5)
    9fd8:	10fffb36 	bltu	r2,r3,9fc8 <__alt_data_end+0xff009fc8>
    9fdc:	1985c83a 	sub	r2,r3,r6
    9fe0:	10bffac4 	addi	r2,r2,-21
    9fe4:	1004d0ba 	srli	r2,r2,2
    9fe8:	10800044 	addi	r2,r2,1
    9fec:	1085883a 	add	r2,r2,r2
    9ff0:	1085883a 	add	r2,r2,r2
    9ff4:	2089883a 	add	r4,r4,r2
    9ff8:	21c0032e 	bgeu	r4,r7,a008 <__copybits+0x74>
    9ffc:	20000015 	stw	zero,0(r4)
    a000:	21000104 	addi	r4,r4,4
    a004:	21fffd36 	bltu	r4,r7,9ffc <__alt_data_end+0xff009ffc>
    a008:	f800283a 	ret

0000a00c <__any_on>:
    a00c:	20c00417 	ldw	r3,16(r4)
    a010:	2805d17a 	srai	r2,r5,5
    a014:	21000504 	addi	r4,r4,20
    a018:	18800d0e 	bge	r3,r2,a050 <__any_on+0x44>
    a01c:	18c7883a 	add	r3,r3,r3
    a020:	18c7883a 	add	r3,r3,r3
    a024:	20c7883a 	add	r3,r4,r3
    a028:	20c0192e 	bgeu	r4,r3,a090 <__any_on+0x84>
    a02c:	18bfff17 	ldw	r2,-4(r3)
    a030:	18ffff04 	addi	r3,r3,-4
    a034:	1000041e 	bne	r2,zero,a048 <__any_on+0x3c>
    a038:	20c0142e 	bgeu	r4,r3,a08c <__any_on+0x80>
    a03c:	18ffff04 	addi	r3,r3,-4
    a040:	19400017 	ldw	r5,0(r3)
    a044:	283ffc26 	beq	r5,zero,a038 <__alt_data_end+0xff00a038>
    a048:	00800044 	movi	r2,1
    a04c:	f800283a 	ret
    a050:	10c00a0e 	bge	r2,r3,a07c <__any_on+0x70>
    a054:	1085883a 	add	r2,r2,r2
    a058:	1085883a 	add	r2,r2,r2
    a05c:	294007cc 	andi	r5,r5,31
    a060:	2087883a 	add	r3,r4,r2
    a064:	283ff026 	beq	r5,zero,a028 <__alt_data_end+0xff00a028>
    a068:	19800017 	ldw	r6,0(r3)
    a06c:	3144d83a 	srl	r2,r6,r5
    a070:	114a983a 	sll	r5,r2,r5
    a074:	317ff41e 	bne	r6,r5,a048 <__alt_data_end+0xff00a048>
    a078:	003feb06 	br	a028 <__alt_data_end+0xff00a028>
    a07c:	1085883a 	add	r2,r2,r2
    a080:	1085883a 	add	r2,r2,r2
    a084:	2087883a 	add	r3,r4,r2
    a088:	003fe706 	br	a028 <__alt_data_end+0xff00a028>
    a08c:	f800283a 	ret
    a090:	0005883a 	mov	r2,zero
    a094:	f800283a 	ret

0000a098 <_realloc_r>:
    a098:	defff604 	addi	sp,sp,-40
    a09c:	dc800215 	stw	r18,8(sp)
    a0a0:	dfc00915 	stw	ra,36(sp)
    a0a4:	df000815 	stw	fp,32(sp)
    a0a8:	ddc00715 	stw	r23,28(sp)
    a0ac:	dd800615 	stw	r22,24(sp)
    a0b0:	dd400515 	stw	r21,20(sp)
    a0b4:	dd000415 	stw	r20,16(sp)
    a0b8:	dcc00315 	stw	r19,12(sp)
    a0bc:	dc400115 	stw	r17,4(sp)
    a0c0:	dc000015 	stw	r16,0(sp)
    a0c4:	3025883a 	mov	r18,r6
    a0c8:	2800b726 	beq	r5,zero,a3a8 <_realloc_r+0x310>
    a0cc:	282b883a 	mov	r21,r5
    a0d0:	2029883a 	mov	r20,r4
    a0d4:	000f4a40 	call	f4a4 <__malloc_lock>
    a0d8:	a8bfff17 	ldw	r2,-4(r21)
    a0dc:	043fff04 	movi	r16,-4
    a0e0:	90c002c4 	addi	r3,r18,11
    a0e4:	01000584 	movi	r4,22
    a0e8:	acfffe04 	addi	r19,r21,-8
    a0ec:	1420703a 	and	r16,r2,r16
    a0f0:	20c0332e 	bgeu	r4,r3,a1c0 <_realloc_r+0x128>
    a0f4:	047ffe04 	movi	r17,-8
    a0f8:	1c62703a 	and	r17,r3,r17
    a0fc:	8807883a 	mov	r3,r17
    a100:	88005816 	blt	r17,zero,a264 <_realloc_r+0x1cc>
    a104:	8c805736 	bltu	r17,r18,a264 <_realloc_r+0x1cc>
    a108:	80c0300e 	bge	r16,r3,a1cc <_realloc_r+0x134>
    a10c:	07000074 	movhi	fp,1
    a110:	e7093b04 	addi	fp,fp,9452
    a114:	e1c00217 	ldw	r7,8(fp)
    a118:	9c09883a 	add	r4,r19,r16
    a11c:	22000117 	ldw	r8,4(r4)
    a120:	21c06326 	beq	r4,r7,a2b0 <_realloc_r+0x218>
    a124:	017fff84 	movi	r5,-2
    a128:	414a703a 	and	r5,r8,r5
    a12c:	214b883a 	add	r5,r4,r5
    a130:	29800117 	ldw	r6,4(r5)
    a134:	3180004c 	andi	r6,r6,1
    a138:	30003f26 	beq	r6,zero,a238 <_realloc_r+0x1a0>
    a13c:	1080004c 	andi	r2,r2,1
    a140:	10008326 	beq	r2,zero,a350 <_realloc_r+0x2b8>
    a144:	900b883a 	mov	r5,r18
    a148:	a009883a 	mov	r4,r20
    a14c:	00031b00 	call	31b0 <_malloc_r>
    a150:	1025883a 	mov	r18,r2
    a154:	10011e26 	beq	r2,zero,a5d0 <_realloc_r+0x538>
    a158:	a93fff17 	ldw	r4,-4(r21)
    a15c:	10fffe04 	addi	r3,r2,-8
    a160:	00bfff84 	movi	r2,-2
    a164:	2084703a 	and	r2,r4,r2
    a168:	9885883a 	add	r2,r19,r2
    a16c:	1880ee26 	beq	r3,r2,a528 <_realloc_r+0x490>
    a170:	81bfff04 	addi	r6,r16,-4
    a174:	00800904 	movi	r2,36
    a178:	1180b836 	bltu	r2,r6,a45c <_realloc_r+0x3c4>
    a17c:	00c004c4 	movi	r3,19
    a180:	19809636 	bltu	r3,r6,a3dc <_realloc_r+0x344>
    a184:	9005883a 	mov	r2,r18
    a188:	a807883a 	mov	r3,r21
    a18c:	19000017 	ldw	r4,0(r3)
    a190:	11000015 	stw	r4,0(r2)
    a194:	19000117 	ldw	r4,4(r3)
    a198:	11000115 	stw	r4,4(r2)
    a19c:	18c00217 	ldw	r3,8(r3)
    a1a0:	10c00215 	stw	r3,8(r2)
    a1a4:	a80b883a 	mov	r5,r21
    a1a8:	a009883a 	mov	r4,r20
    a1ac:	00080000 	call	8000 <_free_r>
    a1b0:	a009883a 	mov	r4,r20
    a1b4:	000f4c80 	call	f4c8 <__malloc_unlock>
    a1b8:	9005883a 	mov	r2,r18
    a1bc:	00001206 	br	a208 <_realloc_r+0x170>
    a1c0:	00c00404 	movi	r3,16
    a1c4:	1823883a 	mov	r17,r3
    a1c8:	003fce06 	br	a104 <__alt_data_end+0xff00a104>
    a1cc:	a825883a 	mov	r18,r21
    a1d0:	8445c83a 	sub	r2,r16,r17
    a1d4:	00c003c4 	movi	r3,15
    a1d8:	18802636 	bltu	r3,r2,a274 <_realloc_r+0x1dc>
    a1dc:	99800117 	ldw	r6,4(r19)
    a1e0:	9c07883a 	add	r3,r19,r16
    a1e4:	3180004c 	andi	r6,r6,1
    a1e8:	3420b03a 	or	r16,r6,r16
    a1ec:	9c000115 	stw	r16,4(r19)
    a1f0:	18800117 	ldw	r2,4(r3)
    a1f4:	10800054 	ori	r2,r2,1
    a1f8:	18800115 	stw	r2,4(r3)
    a1fc:	a009883a 	mov	r4,r20
    a200:	000f4c80 	call	f4c8 <__malloc_unlock>
    a204:	9005883a 	mov	r2,r18
    a208:	dfc00917 	ldw	ra,36(sp)
    a20c:	df000817 	ldw	fp,32(sp)
    a210:	ddc00717 	ldw	r23,28(sp)
    a214:	dd800617 	ldw	r22,24(sp)
    a218:	dd400517 	ldw	r21,20(sp)
    a21c:	dd000417 	ldw	r20,16(sp)
    a220:	dcc00317 	ldw	r19,12(sp)
    a224:	dc800217 	ldw	r18,8(sp)
    a228:	dc400117 	ldw	r17,4(sp)
    a22c:	dc000017 	ldw	r16,0(sp)
    a230:	dec00a04 	addi	sp,sp,40
    a234:	f800283a 	ret
    a238:	017fff04 	movi	r5,-4
    a23c:	414a703a 	and	r5,r8,r5
    a240:	814d883a 	add	r6,r16,r5
    a244:	30c01f16 	blt	r6,r3,a2c4 <_realloc_r+0x22c>
    a248:	20800317 	ldw	r2,12(r4)
    a24c:	20c00217 	ldw	r3,8(r4)
    a250:	a825883a 	mov	r18,r21
    a254:	3021883a 	mov	r16,r6
    a258:	18800315 	stw	r2,12(r3)
    a25c:	10c00215 	stw	r3,8(r2)
    a260:	003fdb06 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a264:	00800304 	movi	r2,12
    a268:	a0800015 	stw	r2,0(r20)
    a26c:	0005883a 	mov	r2,zero
    a270:	003fe506 	br	a208 <__alt_data_end+0xff00a208>
    a274:	98c00117 	ldw	r3,4(r19)
    a278:	9c4b883a 	add	r5,r19,r17
    a27c:	11000054 	ori	r4,r2,1
    a280:	18c0004c 	andi	r3,r3,1
    a284:	1c62b03a 	or	r17,r3,r17
    a288:	9c400115 	stw	r17,4(r19)
    a28c:	29000115 	stw	r4,4(r5)
    a290:	2885883a 	add	r2,r5,r2
    a294:	10c00117 	ldw	r3,4(r2)
    a298:	29400204 	addi	r5,r5,8
    a29c:	a009883a 	mov	r4,r20
    a2a0:	18c00054 	ori	r3,r3,1
    a2a4:	10c00115 	stw	r3,4(r2)
    a2a8:	00080000 	call	8000 <_free_r>
    a2ac:	003fd306 	br	a1fc <__alt_data_end+0xff00a1fc>
    a2b0:	017fff04 	movi	r5,-4
    a2b4:	414a703a 	and	r5,r8,r5
    a2b8:	89800404 	addi	r6,r17,16
    a2bc:	8151883a 	add	r8,r16,r5
    a2c0:	4180590e 	bge	r8,r6,a428 <_realloc_r+0x390>
    a2c4:	1080004c 	andi	r2,r2,1
    a2c8:	103f9e1e 	bne	r2,zero,a144 <__alt_data_end+0xff00a144>
    a2cc:	adbffe17 	ldw	r22,-8(r21)
    a2d0:	00bfff04 	movi	r2,-4
    a2d4:	9dadc83a 	sub	r22,r19,r22
    a2d8:	b1800117 	ldw	r6,4(r22)
    a2dc:	3084703a 	and	r2,r6,r2
    a2e0:	20002026 	beq	r4,zero,a364 <_realloc_r+0x2cc>
    a2e4:	80af883a 	add	r23,r16,r2
    a2e8:	b96f883a 	add	r23,r23,r5
    a2ec:	21c05f26 	beq	r4,r7,a46c <_realloc_r+0x3d4>
    a2f0:	b8c01c16 	blt	r23,r3,a364 <_realloc_r+0x2cc>
    a2f4:	20800317 	ldw	r2,12(r4)
    a2f8:	20c00217 	ldw	r3,8(r4)
    a2fc:	81bfff04 	addi	r6,r16,-4
    a300:	01000904 	movi	r4,36
    a304:	18800315 	stw	r2,12(r3)
    a308:	10c00215 	stw	r3,8(r2)
    a30c:	b0c00217 	ldw	r3,8(r22)
    a310:	b0800317 	ldw	r2,12(r22)
    a314:	b4800204 	addi	r18,r22,8
    a318:	18800315 	stw	r2,12(r3)
    a31c:	10c00215 	stw	r3,8(r2)
    a320:	21801b36 	bltu	r4,r6,a390 <_realloc_r+0x2f8>
    a324:	008004c4 	movi	r2,19
    a328:	1180352e 	bgeu	r2,r6,a400 <_realloc_r+0x368>
    a32c:	a8800017 	ldw	r2,0(r21)
    a330:	b0800215 	stw	r2,8(r22)
    a334:	a8800117 	ldw	r2,4(r21)
    a338:	b0800315 	stw	r2,12(r22)
    a33c:	008006c4 	movi	r2,27
    a340:	11807f36 	bltu	r2,r6,a540 <_realloc_r+0x4a8>
    a344:	b0800404 	addi	r2,r22,16
    a348:	ad400204 	addi	r21,r21,8
    a34c:	00002d06 	br	a404 <_realloc_r+0x36c>
    a350:	adbffe17 	ldw	r22,-8(r21)
    a354:	00bfff04 	movi	r2,-4
    a358:	9dadc83a 	sub	r22,r19,r22
    a35c:	b1000117 	ldw	r4,4(r22)
    a360:	2084703a 	and	r2,r4,r2
    a364:	b03f7726 	beq	r22,zero,a144 <__alt_data_end+0xff00a144>
    a368:	80af883a 	add	r23,r16,r2
    a36c:	b8ff7516 	blt	r23,r3,a144 <__alt_data_end+0xff00a144>
    a370:	b0800317 	ldw	r2,12(r22)
    a374:	b0c00217 	ldw	r3,8(r22)
    a378:	81bfff04 	addi	r6,r16,-4
    a37c:	01000904 	movi	r4,36
    a380:	18800315 	stw	r2,12(r3)
    a384:	10c00215 	stw	r3,8(r2)
    a388:	b4800204 	addi	r18,r22,8
    a38c:	21bfe52e 	bgeu	r4,r6,a324 <__alt_data_end+0xff00a324>
    a390:	a80b883a 	mov	r5,r21
    a394:	9009883a 	mov	r4,r18
    a398:	0008e180 	call	8e18 <memmove>
    a39c:	b821883a 	mov	r16,r23
    a3a0:	b027883a 	mov	r19,r22
    a3a4:	003f8a06 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a3a8:	300b883a 	mov	r5,r6
    a3ac:	dfc00917 	ldw	ra,36(sp)
    a3b0:	df000817 	ldw	fp,32(sp)
    a3b4:	ddc00717 	ldw	r23,28(sp)
    a3b8:	dd800617 	ldw	r22,24(sp)
    a3bc:	dd400517 	ldw	r21,20(sp)
    a3c0:	dd000417 	ldw	r20,16(sp)
    a3c4:	dcc00317 	ldw	r19,12(sp)
    a3c8:	dc800217 	ldw	r18,8(sp)
    a3cc:	dc400117 	ldw	r17,4(sp)
    a3d0:	dc000017 	ldw	r16,0(sp)
    a3d4:	dec00a04 	addi	sp,sp,40
    a3d8:	00031b01 	jmpi	31b0 <_malloc_r>
    a3dc:	a8c00017 	ldw	r3,0(r21)
    a3e0:	90c00015 	stw	r3,0(r18)
    a3e4:	a8c00117 	ldw	r3,4(r21)
    a3e8:	90c00115 	stw	r3,4(r18)
    a3ec:	00c006c4 	movi	r3,27
    a3f0:	19804536 	bltu	r3,r6,a508 <_realloc_r+0x470>
    a3f4:	90800204 	addi	r2,r18,8
    a3f8:	a8c00204 	addi	r3,r21,8
    a3fc:	003f6306 	br	a18c <__alt_data_end+0xff00a18c>
    a400:	9005883a 	mov	r2,r18
    a404:	a8c00017 	ldw	r3,0(r21)
    a408:	b821883a 	mov	r16,r23
    a40c:	b027883a 	mov	r19,r22
    a410:	10c00015 	stw	r3,0(r2)
    a414:	a8c00117 	ldw	r3,4(r21)
    a418:	10c00115 	stw	r3,4(r2)
    a41c:	a8c00217 	ldw	r3,8(r21)
    a420:	10c00215 	stw	r3,8(r2)
    a424:	003f6a06 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a428:	9c67883a 	add	r19,r19,r17
    a42c:	4445c83a 	sub	r2,r8,r17
    a430:	e4c00215 	stw	r19,8(fp)
    a434:	10800054 	ori	r2,r2,1
    a438:	98800115 	stw	r2,4(r19)
    a43c:	a8bfff17 	ldw	r2,-4(r21)
    a440:	a009883a 	mov	r4,r20
    a444:	1080004c 	andi	r2,r2,1
    a448:	1462b03a 	or	r17,r2,r17
    a44c:	ac7fff15 	stw	r17,-4(r21)
    a450:	000f4c80 	call	f4c8 <__malloc_unlock>
    a454:	a805883a 	mov	r2,r21
    a458:	003f6b06 	br	a208 <__alt_data_end+0xff00a208>
    a45c:	a80b883a 	mov	r5,r21
    a460:	9009883a 	mov	r4,r18
    a464:	0008e180 	call	8e18 <memmove>
    a468:	003f4e06 	br	a1a4 <__alt_data_end+0xff00a1a4>
    a46c:	89000404 	addi	r4,r17,16
    a470:	b93fbc16 	blt	r23,r4,a364 <__alt_data_end+0xff00a364>
    a474:	b0800317 	ldw	r2,12(r22)
    a478:	b0c00217 	ldw	r3,8(r22)
    a47c:	81bfff04 	addi	r6,r16,-4
    a480:	01000904 	movi	r4,36
    a484:	18800315 	stw	r2,12(r3)
    a488:	10c00215 	stw	r3,8(r2)
    a48c:	b4800204 	addi	r18,r22,8
    a490:	21804336 	bltu	r4,r6,a5a0 <_realloc_r+0x508>
    a494:	008004c4 	movi	r2,19
    a498:	11803f2e 	bgeu	r2,r6,a598 <_realloc_r+0x500>
    a49c:	a8800017 	ldw	r2,0(r21)
    a4a0:	b0800215 	stw	r2,8(r22)
    a4a4:	a8800117 	ldw	r2,4(r21)
    a4a8:	b0800315 	stw	r2,12(r22)
    a4ac:	008006c4 	movi	r2,27
    a4b0:	11803f36 	bltu	r2,r6,a5b0 <_realloc_r+0x518>
    a4b4:	b0800404 	addi	r2,r22,16
    a4b8:	ad400204 	addi	r21,r21,8
    a4bc:	a8c00017 	ldw	r3,0(r21)
    a4c0:	10c00015 	stw	r3,0(r2)
    a4c4:	a8c00117 	ldw	r3,4(r21)
    a4c8:	10c00115 	stw	r3,4(r2)
    a4cc:	a8c00217 	ldw	r3,8(r21)
    a4d0:	10c00215 	stw	r3,8(r2)
    a4d4:	b447883a 	add	r3,r22,r17
    a4d8:	bc45c83a 	sub	r2,r23,r17
    a4dc:	e0c00215 	stw	r3,8(fp)
    a4e0:	10800054 	ori	r2,r2,1
    a4e4:	18800115 	stw	r2,4(r3)
    a4e8:	b0800117 	ldw	r2,4(r22)
    a4ec:	a009883a 	mov	r4,r20
    a4f0:	1080004c 	andi	r2,r2,1
    a4f4:	1462b03a 	or	r17,r2,r17
    a4f8:	b4400115 	stw	r17,4(r22)
    a4fc:	000f4c80 	call	f4c8 <__malloc_unlock>
    a500:	9005883a 	mov	r2,r18
    a504:	003f4006 	br	a208 <__alt_data_end+0xff00a208>
    a508:	a8c00217 	ldw	r3,8(r21)
    a50c:	90c00215 	stw	r3,8(r18)
    a510:	a8c00317 	ldw	r3,12(r21)
    a514:	90c00315 	stw	r3,12(r18)
    a518:	30801126 	beq	r6,r2,a560 <_realloc_r+0x4c8>
    a51c:	90800404 	addi	r2,r18,16
    a520:	a8c00404 	addi	r3,r21,16
    a524:	003f1906 	br	a18c <__alt_data_end+0xff00a18c>
    a528:	90ffff17 	ldw	r3,-4(r18)
    a52c:	00bfff04 	movi	r2,-4
    a530:	a825883a 	mov	r18,r21
    a534:	1884703a 	and	r2,r3,r2
    a538:	80a1883a 	add	r16,r16,r2
    a53c:	003f2406 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a540:	a8800217 	ldw	r2,8(r21)
    a544:	b0800415 	stw	r2,16(r22)
    a548:	a8800317 	ldw	r2,12(r21)
    a54c:	b0800515 	stw	r2,20(r22)
    a550:	31000a26 	beq	r6,r4,a57c <_realloc_r+0x4e4>
    a554:	b0800604 	addi	r2,r22,24
    a558:	ad400404 	addi	r21,r21,16
    a55c:	003fa906 	br	a404 <__alt_data_end+0xff00a404>
    a560:	a9000417 	ldw	r4,16(r21)
    a564:	90800604 	addi	r2,r18,24
    a568:	a8c00604 	addi	r3,r21,24
    a56c:	91000415 	stw	r4,16(r18)
    a570:	a9000517 	ldw	r4,20(r21)
    a574:	91000515 	stw	r4,20(r18)
    a578:	003f0406 	br	a18c <__alt_data_end+0xff00a18c>
    a57c:	a8c00417 	ldw	r3,16(r21)
    a580:	ad400604 	addi	r21,r21,24
    a584:	b0800804 	addi	r2,r22,32
    a588:	b0c00615 	stw	r3,24(r22)
    a58c:	a8ffff17 	ldw	r3,-4(r21)
    a590:	b0c00715 	stw	r3,28(r22)
    a594:	003f9b06 	br	a404 <__alt_data_end+0xff00a404>
    a598:	9005883a 	mov	r2,r18
    a59c:	003fc706 	br	a4bc <__alt_data_end+0xff00a4bc>
    a5a0:	a80b883a 	mov	r5,r21
    a5a4:	9009883a 	mov	r4,r18
    a5a8:	0008e180 	call	8e18 <memmove>
    a5ac:	003fc906 	br	a4d4 <__alt_data_end+0xff00a4d4>
    a5b0:	a8800217 	ldw	r2,8(r21)
    a5b4:	b0800415 	stw	r2,16(r22)
    a5b8:	a8800317 	ldw	r2,12(r21)
    a5bc:	b0800515 	stw	r2,20(r22)
    a5c0:	31000726 	beq	r6,r4,a5e0 <_realloc_r+0x548>
    a5c4:	b0800604 	addi	r2,r22,24
    a5c8:	ad400404 	addi	r21,r21,16
    a5cc:	003fbb06 	br	a4bc <__alt_data_end+0xff00a4bc>
    a5d0:	a009883a 	mov	r4,r20
    a5d4:	000f4c80 	call	f4c8 <__malloc_unlock>
    a5d8:	0005883a 	mov	r2,zero
    a5dc:	003f0a06 	br	a208 <__alt_data_end+0xff00a208>
    a5e0:	a8c00417 	ldw	r3,16(r21)
    a5e4:	ad400604 	addi	r21,r21,24
    a5e8:	b0800804 	addi	r2,r22,32
    a5ec:	b0c00615 	stw	r3,24(r22)
    a5f0:	a8ffff17 	ldw	r3,-4(r21)
    a5f4:	b0c00715 	stw	r3,28(r22)
    a5f8:	003fb006 	br	a4bc <__alt_data_end+0xff00a4bc>

0000a5fc <__fpclassifyd>:
    a5fc:	00a00034 	movhi	r2,32768
    a600:	10bfffc4 	addi	r2,r2,-1
    a604:	2884703a 	and	r2,r5,r2
    a608:	10000726 	beq	r2,zero,a628 <__fpclassifyd+0x2c>
    a60c:	00fffc34 	movhi	r3,65520
    a610:	019ff834 	movhi	r6,32736
    a614:	28c7883a 	add	r3,r5,r3
    a618:	31bfffc4 	addi	r6,r6,-1
    a61c:	30c00536 	bltu	r6,r3,a634 <__fpclassifyd+0x38>
    a620:	00800104 	movi	r2,4
    a624:	f800283a 	ret
    a628:	2000021e 	bne	r4,zero,a634 <__fpclassifyd+0x38>
    a62c:	00800084 	movi	r2,2
    a630:	f800283a 	ret
    a634:	00dffc34 	movhi	r3,32752
    a638:	019ff834 	movhi	r6,32736
    a63c:	28cb883a 	add	r5,r5,r3
    a640:	31bfffc4 	addi	r6,r6,-1
    a644:	317ff62e 	bgeu	r6,r5,a620 <__alt_data_end+0xff00a620>
    a648:	01400434 	movhi	r5,16
    a64c:	297fffc4 	addi	r5,r5,-1
    a650:	28800236 	bltu	r5,r2,a65c <__fpclassifyd+0x60>
    a654:	008000c4 	movi	r2,3
    a658:	f800283a 	ret
    a65c:	10c00226 	beq	r2,r3,a668 <__fpclassifyd+0x6c>
    a660:	0005883a 	mov	r2,zero
    a664:	f800283a 	ret
    a668:	2005003a 	cmpeq	r2,r4,zero
    a66c:	f800283a 	ret

0000a670 <__sread>:
    a670:	defffe04 	addi	sp,sp,-8
    a674:	dc000015 	stw	r16,0(sp)
    a678:	2821883a 	mov	r16,r5
    a67c:	2940038f 	ldh	r5,14(r5)
    a680:	dfc00115 	stw	ra,4(sp)
    a684:	000c4640 	call	c464 <_read_r>
    a688:	10000716 	blt	r2,zero,a6a8 <__sread+0x38>
    a68c:	80c01417 	ldw	r3,80(r16)
    a690:	1887883a 	add	r3,r3,r2
    a694:	80c01415 	stw	r3,80(r16)
    a698:	dfc00117 	ldw	ra,4(sp)
    a69c:	dc000017 	ldw	r16,0(sp)
    a6a0:	dec00204 	addi	sp,sp,8
    a6a4:	f800283a 	ret
    a6a8:	80c0030b 	ldhu	r3,12(r16)
    a6ac:	18fbffcc 	andi	r3,r3,61439
    a6b0:	80c0030d 	sth	r3,12(r16)
    a6b4:	dfc00117 	ldw	ra,4(sp)
    a6b8:	dc000017 	ldw	r16,0(sp)
    a6bc:	dec00204 	addi	sp,sp,8
    a6c0:	f800283a 	ret

0000a6c4 <__seofread>:
    a6c4:	0005883a 	mov	r2,zero
    a6c8:	f800283a 	ret

0000a6cc <__swrite>:
    a6cc:	2880030b 	ldhu	r2,12(r5)
    a6d0:	defffb04 	addi	sp,sp,-20
    a6d4:	dcc00315 	stw	r19,12(sp)
    a6d8:	dc800215 	stw	r18,8(sp)
    a6dc:	dc400115 	stw	r17,4(sp)
    a6e0:	dc000015 	stw	r16,0(sp)
    a6e4:	dfc00415 	stw	ra,16(sp)
    a6e8:	10c0400c 	andi	r3,r2,256
    a6ec:	2821883a 	mov	r16,r5
    a6f0:	2023883a 	mov	r17,r4
    a6f4:	3025883a 	mov	r18,r6
    a6f8:	3827883a 	mov	r19,r7
    a6fc:	18000526 	beq	r3,zero,a714 <__swrite+0x48>
    a700:	2940038f 	ldh	r5,14(r5)
    a704:	01c00084 	movi	r7,2
    a708:	000d883a 	mov	r6,zero
    a70c:	000c4040 	call	c404 <_lseek_r>
    a710:	8080030b 	ldhu	r2,12(r16)
    a714:	8140038f 	ldh	r5,14(r16)
    a718:	10bbffcc 	andi	r2,r2,61439
    a71c:	980f883a 	mov	r7,r19
    a720:	900d883a 	mov	r6,r18
    a724:	8809883a 	mov	r4,r17
    a728:	8080030d 	sth	r2,12(r16)
    a72c:	dfc00417 	ldw	ra,16(sp)
    a730:	dcc00317 	ldw	r19,12(sp)
    a734:	dc800217 	ldw	r18,8(sp)
    a738:	dc400117 	ldw	r17,4(sp)
    a73c:	dc000017 	ldw	r16,0(sp)
    a740:	dec00504 	addi	sp,sp,20
    a744:	000bed01 	jmpi	bed0 <_write_r>

0000a748 <__sseek>:
    a748:	defffe04 	addi	sp,sp,-8
    a74c:	dc000015 	stw	r16,0(sp)
    a750:	2821883a 	mov	r16,r5
    a754:	2940038f 	ldh	r5,14(r5)
    a758:	dfc00115 	stw	ra,4(sp)
    a75c:	000c4040 	call	c404 <_lseek_r>
    a760:	00ffffc4 	movi	r3,-1
    a764:	10c00826 	beq	r2,r3,a788 <__sseek+0x40>
    a768:	80c0030b 	ldhu	r3,12(r16)
    a76c:	80801415 	stw	r2,80(r16)
    a770:	18c40014 	ori	r3,r3,4096
    a774:	80c0030d 	sth	r3,12(r16)
    a778:	dfc00117 	ldw	ra,4(sp)
    a77c:	dc000017 	ldw	r16,0(sp)
    a780:	dec00204 	addi	sp,sp,8
    a784:	f800283a 	ret
    a788:	80c0030b 	ldhu	r3,12(r16)
    a78c:	18fbffcc 	andi	r3,r3,61439
    a790:	80c0030d 	sth	r3,12(r16)
    a794:	dfc00117 	ldw	ra,4(sp)
    a798:	dc000017 	ldw	r16,0(sp)
    a79c:	dec00204 	addi	sp,sp,8
    a7a0:	f800283a 	ret

0000a7a4 <__sclose>:
    a7a4:	2940038f 	ldh	r5,14(r5)
    a7a8:	000bf301 	jmpi	bf30 <_close_r>

0000a7ac <strcmp>:
    a7ac:	2144b03a 	or	r2,r4,r5
    a7b0:	108000cc 	andi	r2,r2,3
    a7b4:	1000171e 	bne	r2,zero,a814 <strcmp+0x68>
    a7b8:	20800017 	ldw	r2,0(r4)
    a7bc:	28c00017 	ldw	r3,0(r5)
    a7c0:	10c0141e 	bne	r2,r3,a814 <strcmp+0x68>
    a7c4:	027fbff4 	movhi	r9,65279
    a7c8:	4a7fbfc4 	addi	r9,r9,-257
    a7cc:	0086303a 	nor	r3,zero,r2
    a7d0:	02202074 	movhi	r8,32897
    a7d4:	1245883a 	add	r2,r2,r9
    a7d8:	42202004 	addi	r8,r8,-32640
    a7dc:	10c4703a 	and	r2,r2,r3
    a7e0:	1204703a 	and	r2,r2,r8
    a7e4:	10000226 	beq	r2,zero,a7f0 <strcmp+0x44>
    a7e8:	00002306 	br	a878 <strcmp+0xcc>
    a7ec:	1000221e 	bne	r2,zero,a878 <strcmp+0xcc>
    a7f0:	21000104 	addi	r4,r4,4
    a7f4:	20c00017 	ldw	r3,0(r4)
    a7f8:	29400104 	addi	r5,r5,4
    a7fc:	29800017 	ldw	r6,0(r5)
    a800:	1a4f883a 	add	r7,r3,r9
    a804:	00c4303a 	nor	r2,zero,r3
    a808:	3884703a 	and	r2,r7,r2
    a80c:	1204703a 	and	r2,r2,r8
    a810:	19bff626 	beq	r3,r6,a7ec <__alt_data_end+0xff00a7ec>
    a814:	20800003 	ldbu	r2,0(r4)
    a818:	10c03fcc 	andi	r3,r2,255
    a81c:	18c0201c 	xori	r3,r3,128
    a820:	18ffe004 	addi	r3,r3,-128
    a824:	18000c26 	beq	r3,zero,a858 <strcmp+0xac>
    a828:	29800007 	ldb	r6,0(r5)
    a82c:	19800326 	beq	r3,r6,a83c <strcmp+0x90>
    a830:	00001306 	br	a880 <strcmp+0xd4>
    a834:	29800007 	ldb	r6,0(r5)
    a838:	11800b1e 	bne	r2,r6,a868 <strcmp+0xbc>
    a83c:	21000044 	addi	r4,r4,1
    a840:	20c00003 	ldbu	r3,0(r4)
    a844:	29400044 	addi	r5,r5,1
    a848:	18803fcc 	andi	r2,r3,255
    a84c:	1080201c 	xori	r2,r2,128
    a850:	10bfe004 	addi	r2,r2,-128
    a854:	103ff71e 	bne	r2,zero,a834 <__alt_data_end+0xff00a834>
    a858:	0007883a 	mov	r3,zero
    a85c:	28800003 	ldbu	r2,0(r5)
    a860:	1885c83a 	sub	r2,r3,r2
    a864:	f800283a 	ret
    a868:	28800003 	ldbu	r2,0(r5)
    a86c:	18c03fcc 	andi	r3,r3,255
    a870:	1885c83a 	sub	r2,r3,r2
    a874:	f800283a 	ret
    a878:	0005883a 	mov	r2,zero
    a87c:	f800283a 	ret
    a880:	10c03fcc 	andi	r3,r2,255
    a884:	003ff506 	br	a85c <__alt_data_end+0xff00a85c>

0000a888 <__sprint_r.part.0>:
    a888:	28801917 	ldw	r2,100(r5)
    a88c:	defff604 	addi	sp,sp,-40
    a890:	dd400515 	stw	r21,20(sp)
    a894:	dfc00915 	stw	ra,36(sp)
    a898:	df000815 	stw	fp,32(sp)
    a89c:	ddc00715 	stw	r23,28(sp)
    a8a0:	dd800615 	stw	r22,24(sp)
    a8a4:	dd000415 	stw	r20,16(sp)
    a8a8:	dcc00315 	stw	r19,12(sp)
    a8ac:	dc800215 	stw	r18,8(sp)
    a8b0:	dc400115 	stw	r17,4(sp)
    a8b4:	dc000015 	stw	r16,0(sp)
    a8b8:	1088000c 	andi	r2,r2,8192
    a8bc:	302b883a 	mov	r21,r6
    a8c0:	10002e26 	beq	r2,zero,a97c <__sprint_r.part.0+0xf4>
    a8c4:	30800217 	ldw	r2,8(r6)
    a8c8:	35800017 	ldw	r22,0(r6)
    a8cc:	10002926 	beq	r2,zero,a974 <__sprint_r.part.0+0xec>
    a8d0:	2827883a 	mov	r19,r5
    a8d4:	2029883a 	mov	r20,r4
    a8d8:	b5c00104 	addi	r23,r22,4
    a8dc:	04bfffc4 	movi	r18,-1
    a8e0:	bc400017 	ldw	r17,0(r23)
    a8e4:	b4000017 	ldw	r16,0(r22)
    a8e8:	0039883a 	mov	fp,zero
    a8ec:	8822d0ba 	srli	r17,r17,2
    a8f0:	8800031e 	bne	r17,zero,a900 <__sprint_r.part.0+0x78>
    a8f4:	00001806 	br	a958 <__sprint_r.part.0+0xd0>
    a8f8:	84000104 	addi	r16,r16,4
    a8fc:	8f001526 	beq	r17,fp,a954 <__sprint_r.part.0+0xcc>
    a900:	81400017 	ldw	r5,0(r16)
    a904:	980d883a 	mov	r6,r19
    a908:	a009883a 	mov	r4,r20
    a90c:	000c2b00 	call	c2b0 <_fputwc_r>
    a910:	e7000044 	addi	fp,fp,1
    a914:	14bff81e 	bne	r2,r18,a8f8 <__alt_data_end+0xff00a8f8>
    a918:	9005883a 	mov	r2,r18
    a91c:	a8000215 	stw	zero,8(r21)
    a920:	a8000115 	stw	zero,4(r21)
    a924:	dfc00917 	ldw	ra,36(sp)
    a928:	df000817 	ldw	fp,32(sp)
    a92c:	ddc00717 	ldw	r23,28(sp)
    a930:	dd800617 	ldw	r22,24(sp)
    a934:	dd400517 	ldw	r21,20(sp)
    a938:	dd000417 	ldw	r20,16(sp)
    a93c:	dcc00317 	ldw	r19,12(sp)
    a940:	dc800217 	ldw	r18,8(sp)
    a944:	dc400117 	ldw	r17,4(sp)
    a948:	dc000017 	ldw	r16,0(sp)
    a94c:	dec00a04 	addi	sp,sp,40
    a950:	f800283a 	ret
    a954:	a8800217 	ldw	r2,8(r21)
    a958:	8c63883a 	add	r17,r17,r17
    a95c:	8c63883a 	add	r17,r17,r17
    a960:	1445c83a 	sub	r2,r2,r17
    a964:	a8800215 	stw	r2,8(r21)
    a968:	b5800204 	addi	r22,r22,8
    a96c:	bdc00204 	addi	r23,r23,8
    a970:	103fdb1e 	bne	r2,zero,a8e0 <__alt_data_end+0xff00a8e0>
    a974:	0005883a 	mov	r2,zero
    a978:	003fe806 	br	a91c <__alt_data_end+0xff00a91c>
    a97c:	00083100 	call	8310 <__sfvwrite_r>
    a980:	003fe606 	br	a91c <__alt_data_end+0xff00a91c>

0000a984 <__sprint_r>:
    a984:	30c00217 	ldw	r3,8(r6)
    a988:	18000126 	beq	r3,zero,a990 <__sprint_r+0xc>
    a98c:	000a8881 	jmpi	a888 <__sprint_r.part.0>
    a990:	30000115 	stw	zero,4(r6)
    a994:	0005883a 	mov	r2,zero
    a998:	f800283a 	ret

0000a99c <___vfiprintf_internal_r>:
    a99c:	deffc904 	addi	sp,sp,-220
    a9a0:	df003515 	stw	fp,212(sp)
    a9a4:	dd003115 	stw	r20,196(sp)
    a9a8:	dfc03615 	stw	ra,216(sp)
    a9ac:	ddc03415 	stw	r23,208(sp)
    a9b0:	dd803315 	stw	r22,204(sp)
    a9b4:	dd403215 	stw	r21,200(sp)
    a9b8:	dcc03015 	stw	r19,192(sp)
    a9bc:	dc802f15 	stw	r18,188(sp)
    a9c0:	dc402e15 	stw	r17,184(sp)
    a9c4:	dc002d15 	stw	r16,180(sp)
    a9c8:	d9002015 	stw	r4,128(sp)
    a9cc:	d9c02215 	stw	r7,136(sp)
    a9d0:	2829883a 	mov	r20,r5
    a9d4:	3039883a 	mov	fp,r6
    a9d8:	20000226 	beq	r4,zero,a9e4 <___vfiprintf_internal_r+0x48>
    a9dc:	20800e17 	ldw	r2,56(r4)
    a9e0:	1000cf26 	beq	r2,zero,ad20 <___vfiprintf_internal_r+0x384>
    a9e4:	a080030b 	ldhu	r2,12(r20)
    a9e8:	10c8000c 	andi	r3,r2,8192
    a9ec:	1800061e 	bne	r3,zero,aa08 <___vfiprintf_internal_r+0x6c>
    a9f0:	a1001917 	ldw	r4,100(r20)
    a9f4:	00f7ffc4 	movi	r3,-8193
    a9f8:	10880014 	ori	r2,r2,8192
    a9fc:	20c6703a 	and	r3,r4,r3
    aa00:	a080030d 	sth	r2,12(r20)
    aa04:	a0c01915 	stw	r3,100(r20)
    aa08:	10c0020c 	andi	r3,r2,8
    aa0c:	1800a926 	beq	r3,zero,acb4 <___vfiprintf_internal_r+0x318>
    aa10:	a0c00417 	ldw	r3,16(r20)
    aa14:	1800a726 	beq	r3,zero,acb4 <___vfiprintf_internal_r+0x318>
    aa18:	1080068c 	andi	r2,r2,26
    aa1c:	00c00284 	movi	r3,10
    aa20:	10c0ac26 	beq	r2,r3,acd4 <___vfiprintf_internal_r+0x338>
    aa24:	da801a04 	addi	r10,sp,104
    aa28:	da801e15 	stw	r10,120(sp)
    aa2c:	d8801e17 	ldw	r2,120(sp)
    aa30:	da8019c4 	addi	r10,sp,103
    aa34:	05800074 	movhi	r22,1
    aa38:	05c00074 	movhi	r23,1
    aa3c:	da801f15 	stw	r10,124(sp)
    aa40:	1295c83a 	sub	r10,r2,r10
    aa44:	b588ec04 	addi	r22,r22,9136
    aa48:	bdc8e804 	addi	r23,r23,9120
    aa4c:	dec01a15 	stw	sp,104(sp)
    aa50:	d8001c15 	stw	zero,112(sp)
    aa54:	d8001b15 	stw	zero,108(sp)
    aa58:	d8002615 	stw	zero,152(sp)
    aa5c:	d8002315 	stw	zero,140(sp)
    aa60:	da802715 	stw	r10,156(sp)
    aa64:	d811883a 	mov	r8,sp
    aa68:	dd002115 	stw	r20,132(sp)
    aa6c:	e021883a 	mov	r16,fp
    aa70:	80800007 	ldb	r2,0(r16)
    aa74:	1003ea26 	beq	r2,zero,ba20 <___vfiprintf_internal_r+0x1084>
    aa78:	00c00944 	movi	r3,37
    aa7c:	8025883a 	mov	r18,r16
    aa80:	10c0021e 	bne	r2,r3,aa8c <___vfiprintf_internal_r+0xf0>
    aa84:	00001606 	br	aae0 <___vfiprintf_internal_r+0x144>
    aa88:	10c00326 	beq	r2,r3,aa98 <___vfiprintf_internal_r+0xfc>
    aa8c:	94800044 	addi	r18,r18,1
    aa90:	90800007 	ldb	r2,0(r18)
    aa94:	103ffc1e 	bne	r2,zero,aa88 <__alt_data_end+0xff00aa88>
    aa98:	9423c83a 	sub	r17,r18,r16
    aa9c:	88001026 	beq	r17,zero,aae0 <___vfiprintf_internal_r+0x144>
    aaa0:	d8c01c17 	ldw	r3,112(sp)
    aaa4:	d8801b17 	ldw	r2,108(sp)
    aaa8:	44000015 	stw	r16,0(r8)
    aaac:	88c7883a 	add	r3,r17,r3
    aab0:	10800044 	addi	r2,r2,1
    aab4:	44400115 	stw	r17,4(r8)
    aab8:	d8c01c15 	stw	r3,112(sp)
    aabc:	d8801b15 	stw	r2,108(sp)
    aac0:	010001c4 	movi	r4,7
    aac4:	2080760e 	bge	r4,r2,aca0 <___vfiprintf_internal_r+0x304>
    aac8:	1803821e 	bne	r3,zero,b8d4 <___vfiprintf_internal_r+0xf38>
    aacc:	da802317 	ldw	r10,140(sp)
    aad0:	d8001b15 	stw	zero,108(sp)
    aad4:	d811883a 	mov	r8,sp
    aad8:	5455883a 	add	r10,r10,r17
    aadc:	da802315 	stw	r10,140(sp)
    aae0:	90800007 	ldb	r2,0(r18)
    aae4:	10044626 	beq	r2,zero,bc00 <___vfiprintf_internal_r+0x1264>
    aae8:	90c00047 	ldb	r3,1(r18)
    aaec:	94000044 	addi	r16,r18,1
    aaf0:	d8001d85 	stb	zero,118(sp)
    aaf4:	0009883a 	mov	r4,zero
    aaf8:	000f883a 	mov	r7,zero
    aafc:	027fffc4 	movi	r9,-1
    ab00:	0023883a 	mov	r17,zero
    ab04:	0029883a 	mov	r20,zero
    ab08:	01401604 	movi	r5,88
    ab0c:	01800244 	movi	r6,9
    ab10:	03400a84 	movi	r13,42
    ab14:	03001b04 	movi	r12,108
    ab18:	84000044 	addi	r16,r16,1
    ab1c:	18bff804 	addi	r2,r3,-32
    ab20:	28827336 	bltu	r5,r2,b4f0 <___vfiprintf_internal_r+0xb54>
    ab24:	100490ba 	slli	r2,r2,2
    ab28:	02800074 	movhi	r10,1
    ab2c:	52aacf04 	addi	r10,r10,-21700
    ab30:	1285883a 	add	r2,r2,r10
    ab34:	10800017 	ldw	r2,0(r2)
    ab38:	1000683a 	jmp	r2
    ab3c:	0000b224 	muli	zero,zero,712
    ab40:	0000b4f0 	cmpltui	zero,zero,723
    ab44:	0000b4f0 	cmpltui	zero,zero,723
    ab48:	0000b244 	movi	zero,713
    ab4c:	0000b4f0 	cmpltui	zero,zero,723
    ab50:	0000b4f0 	cmpltui	zero,zero,723
    ab54:	0000b4f0 	cmpltui	zero,zero,723
    ab58:	0000b4f0 	cmpltui	zero,zero,723
    ab5c:	0000b4f0 	cmpltui	zero,zero,723
    ab60:	0000b4f0 	cmpltui	zero,zero,723
    ab64:	0000b42c 	andhi	zero,zero,720
    ab68:	0000b448 	cmpgei	zero,zero,721
    ab6c:	0000b4f0 	cmpltui	zero,zero,723
    ab70:	0000ad30 	cmpltui	zero,zero,692
    ab74:	0000b458 	cmpnei	zero,zero,721
    ab78:	0000b4f0 	cmpltui	zero,zero,723
    ab7c:	0000b250 	cmplti	zero,zero,713
    ab80:	0000b25c 	xori	zero,zero,713
    ab84:	0000b25c 	xori	zero,zero,713
    ab88:	0000b25c 	xori	zero,zero,713
    ab8c:	0000b25c 	xori	zero,zero,713
    ab90:	0000b25c 	xori	zero,zero,713
    ab94:	0000b25c 	xori	zero,zero,713
    ab98:	0000b25c 	xori	zero,zero,713
    ab9c:	0000b25c 	xori	zero,zero,713
    aba0:	0000b25c 	xori	zero,zero,713
    aba4:	0000b4f0 	cmpltui	zero,zero,723
    aba8:	0000b4f0 	cmpltui	zero,zero,723
    abac:	0000b4f0 	cmpltui	zero,zero,723
    abb0:	0000b4f0 	cmpltui	zero,zero,723
    abb4:	0000b4f0 	cmpltui	zero,zero,723
    abb8:	0000b4f0 	cmpltui	zero,zero,723
    abbc:	0000b4f0 	cmpltui	zero,zero,723
    abc0:	0000b4f0 	cmpltui	zero,zero,723
    abc4:	0000b4f0 	cmpltui	zero,zero,723
    abc8:	0000b4f0 	cmpltui	zero,zero,723
    abcc:	0000b288 	cmpgei	zero,zero,714
    abd0:	0000b4f0 	cmpltui	zero,zero,723
    abd4:	0000b4f0 	cmpltui	zero,zero,723
    abd8:	0000b4f0 	cmpltui	zero,zero,723
    abdc:	0000b4f0 	cmpltui	zero,zero,723
    abe0:	0000b4f0 	cmpltui	zero,zero,723
    abe4:	0000b4f0 	cmpltui	zero,zero,723
    abe8:	0000b4f0 	cmpltui	zero,zero,723
    abec:	0000b4f0 	cmpltui	zero,zero,723
    abf0:	0000b4f0 	cmpltui	zero,zero,723
    abf4:	0000b4f0 	cmpltui	zero,zero,723
    abf8:	0000b2c0 	call	b2c <init_LCD+0xbc>
    abfc:	0000b4f0 	cmpltui	zero,zero,723
    ac00:	0000b4f0 	cmpltui	zero,zero,723
    ac04:	0000b4f0 	cmpltui	zero,zero,723
    ac08:	0000b4f0 	cmpltui	zero,zero,723
    ac0c:	0000b4f0 	cmpltui	zero,zero,723
    ac10:	0000b318 	cmpnei	zero,zero,716
    ac14:	0000b4f0 	cmpltui	zero,zero,723
    ac18:	0000b4f0 	cmpltui	zero,zero,723
    ac1c:	0000b388 	cmpgei	zero,zero,718
    ac20:	0000b4f0 	cmpltui	zero,zero,723
    ac24:	0000b4f0 	cmpltui	zero,zero,723
    ac28:	0000b4f0 	cmpltui	zero,zero,723
    ac2c:	0000b4f0 	cmpltui	zero,zero,723
    ac30:	0000b4f0 	cmpltui	zero,zero,723
    ac34:	0000b4f0 	cmpltui	zero,zero,723
    ac38:	0000b4f0 	cmpltui	zero,zero,723
    ac3c:	0000b4f0 	cmpltui	zero,zero,723
    ac40:	0000b4f0 	cmpltui	zero,zero,723
    ac44:	0000b4f0 	cmpltui	zero,zero,723
    ac48:	0000b134 	movhi	zero,708
    ac4c:	0000b160 	cmpeqi	zero,zero,709
    ac50:	0000b4f0 	cmpltui	zero,zero,723
    ac54:	0000b4f0 	cmpltui	zero,zero,723
    ac58:	0000b4f0 	cmpltui	zero,zero,723
    ac5c:	0000b498 	cmpnei	zero,zero,722
    ac60:	0000b160 	cmpeqi	zero,zero,709
    ac64:	0000b4f0 	cmpltui	zero,zero,723
    ac68:	0000b4f0 	cmpltui	zero,zero,723
    ac6c:	0000aff4 	movhi	zero,703
    ac70:	0000b4f0 	cmpltui	zero,zero,723
    ac74:	0000b004 	movi	zero,704
    ac78:	0000b040 	call	b04 <init_LCD+0x94>
    ac7c:	0000ad3c 	xorhi	zero,zero,692
    ac80:	0000afe8 	cmpgeui	zero,zero,703
    ac84:	0000b4f0 	cmpltui	zero,zero,723
    ac88:	0000b3c4 	movi	zero,719
    ac8c:	0000b4f0 	cmpltui	zero,zero,723
    ac90:	0000b41c 	xori	zero,zero,720
    ac94:	0000b4f0 	cmpltui	zero,zero,723
    ac98:	0000b4f0 	cmpltui	zero,zero,723
    ac9c:	0000b0e0 	cmpeqi	zero,zero,707
    aca0:	42000204 	addi	r8,r8,8
    aca4:	da802317 	ldw	r10,140(sp)
    aca8:	5455883a 	add	r10,r10,r17
    acac:	da802315 	stw	r10,140(sp)
    acb0:	003f8b06 	br	aae0 <__alt_data_end+0xff00aae0>
    acb4:	d9002017 	ldw	r4,128(sp)
    acb8:	a00b883a 	mov	r5,r20
    acbc:	0005eb80 	call	5eb8 <__swsetup_r>
    acc0:	1003b11e 	bne	r2,zero,bb88 <___vfiprintf_internal_r+0x11ec>
    acc4:	a080030b 	ldhu	r2,12(r20)
    acc8:	00c00284 	movi	r3,10
    accc:	1080068c 	andi	r2,r2,26
    acd0:	10ff541e 	bne	r2,r3,aa24 <__alt_data_end+0xff00aa24>
    acd4:	a080038f 	ldh	r2,14(r20)
    acd8:	103f5216 	blt	r2,zero,aa24 <__alt_data_end+0xff00aa24>
    acdc:	d9c02217 	ldw	r7,136(sp)
    ace0:	d9002017 	ldw	r4,128(sp)
    ace4:	e00d883a 	mov	r6,fp
    ace8:	a00b883a 	mov	r5,r20
    acec:	000be140 	call	be14 <__sbprintf>
    acf0:	dfc03617 	ldw	ra,216(sp)
    acf4:	df003517 	ldw	fp,212(sp)
    acf8:	ddc03417 	ldw	r23,208(sp)
    acfc:	dd803317 	ldw	r22,204(sp)
    ad00:	dd403217 	ldw	r21,200(sp)
    ad04:	dd003117 	ldw	r20,196(sp)
    ad08:	dcc03017 	ldw	r19,192(sp)
    ad0c:	dc802f17 	ldw	r18,188(sp)
    ad10:	dc402e17 	ldw	r17,184(sp)
    ad14:	dc002d17 	ldw	r16,180(sp)
    ad18:	dec03704 	addi	sp,sp,220
    ad1c:	f800283a 	ret
    ad20:	0007e8c0 	call	7e8c <__sinit>
    ad24:	003f2f06 	br	a9e4 <__alt_data_end+0xff00a9e4>
    ad28:	0463c83a 	sub	r17,zero,r17
    ad2c:	d8802215 	stw	r2,136(sp)
    ad30:	a5000114 	ori	r20,r20,4
    ad34:	80c00007 	ldb	r3,0(r16)
    ad38:	003f7706 	br	ab18 <__alt_data_end+0xff00ab18>
    ad3c:	00800c04 	movi	r2,48
    ad40:	da802217 	ldw	r10,136(sp)
    ad44:	d8801d05 	stb	r2,116(sp)
    ad48:	00801e04 	movi	r2,120
    ad4c:	d8801d45 	stb	r2,117(sp)
    ad50:	d8001d85 	stb	zero,118(sp)
    ad54:	50c00104 	addi	r3,r10,4
    ad58:	54800017 	ldw	r18,0(r10)
    ad5c:	0027883a 	mov	r19,zero
    ad60:	a0800094 	ori	r2,r20,2
    ad64:	48030b16 	blt	r9,zero,b994 <___vfiprintf_internal_r+0xff8>
    ad68:	00bfdfc4 	movi	r2,-129
    ad6c:	a096703a 	and	r11,r20,r2
    ad70:	d8c02215 	stw	r3,136(sp)
    ad74:	5d000094 	ori	r20,r11,2
    ad78:	90032b1e 	bne	r18,zero,ba28 <___vfiprintf_internal_r+0x108c>
    ad7c:	00800074 	movhi	r2,1
    ad80:	10888704 	addi	r2,r2,8732
    ad84:	d8802615 	stw	r2,152(sp)
    ad88:	0039883a 	mov	fp,zero
    ad8c:	48017b1e 	bne	r9,zero,b37c <___vfiprintf_internal_r+0x9e0>
    ad90:	0013883a 	mov	r9,zero
    ad94:	0027883a 	mov	r19,zero
    ad98:	dd401a04 	addi	r21,sp,104
    ad9c:	4825883a 	mov	r18,r9
    ada0:	4cc0010e 	bge	r9,r19,ada8 <___vfiprintf_internal_r+0x40c>
    ada4:	9825883a 	mov	r18,r19
    ada8:	e7003fcc 	andi	fp,fp,255
    adac:	e700201c 	xori	fp,fp,128
    adb0:	e73fe004 	addi	fp,fp,-128
    adb4:	e0000126 	beq	fp,zero,adbc <___vfiprintf_internal_r+0x420>
    adb8:	94800044 	addi	r18,r18,1
    adbc:	a380008c 	andi	r14,r20,2
    adc0:	70000126 	beq	r14,zero,adc8 <___vfiprintf_internal_r+0x42c>
    adc4:	94800084 	addi	r18,r18,2
    adc8:	a700210c 	andi	fp,r20,132
    adcc:	e001df1e 	bne	fp,zero,b54c <___vfiprintf_internal_r+0xbb0>
    add0:	8c87c83a 	sub	r3,r17,r18
    add4:	00c1dd0e 	bge	zero,r3,b54c <___vfiprintf_internal_r+0xbb0>
    add8:	01c00404 	movi	r7,16
    addc:	d8801c17 	ldw	r2,112(sp)
    ade0:	38c3ad0e 	bge	r7,r3,bc98 <___vfiprintf_internal_r+0x12fc>
    ade4:	02800074 	movhi	r10,1
    ade8:	5288ec04 	addi	r10,r10,9136
    adec:	dc002915 	stw	r16,164(sp)
    adf0:	d9801b17 	ldw	r6,108(sp)
    adf4:	da802415 	stw	r10,144(sp)
    adf8:	03c001c4 	movi	r15,7
    adfc:	da402515 	stw	r9,148(sp)
    ae00:	db802815 	stw	r14,160(sp)
    ae04:	1821883a 	mov	r16,r3
    ae08:	00000506 	br	ae20 <___vfiprintf_internal_r+0x484>
    ae0c:	31400084 	addi	r5,r6,2
    ae10:	42000204 	addi	r8,r8,8
    ae14:	200d883a 	mov	r6,r4
    ae18:	843ffc04 	addi	r16,r16,-16
    ae1c:	3c000d0e 	bge	r7,r16,ae54 <___vfiprintf_internal_r+0x4b8>
    ae20:	10800404 	addi	r2,r2,16
    ae24:	31000044 	addi	r4,r6,1
    ae28:	45800015 	stw	r22,0(r8)
    ae2c:	41c00115 	stw	r7,4(r8)
    ae30:	d8801c15 	stw	r2,112(sp)
    ae34:	d9001b15 	stw	r4,108(sp)
    ae38:	793ff40e 	bge	r15,r4,ae0c <__alt_data_end+0xff00ae0c>
    ae3c:	1001b51e 	bne	r2,zero,b514 <___vfiprintf_internal_r+0xb78>
    ae40:	843ffc04 	addi	r16,r16,-16
    ae44:	000d883a 	mov	r6,zero
    ae48:	01400044 	movi	r5,1
    ae4c:	d811883a 	mov	r8,sp
    ae50:	3c3ff316 	blt	r7,r16,ae20 <__alt_data_end+0xff00ae20>
    ae54:	8007883a 	mov	r3,r16
    ae58:	da402517 	ldw	r9,148(sp)
    ae5c:	db802817 	ldw	r14,160(sp)
    ae60:	dc002917 	ldw	r16,164(sp)
    ae64:	da802417 	ldw	r10,144(sp)
    ae68:	1885883a 	add	r2,r3,r2
    ae6c:	40c00115 	stw	r3,4(r8)
    ae70:	42800015 	stw	r10,0(r8)
    ae74:	d8801c15 	stw	r2,112(sp)
    ae78:	d9401b15 	stw	r5,108(sp)
    ae7c:	00c001c4 	movi	r3,7
    ae80:	19426016 	blt	r3,r5,b804 <___vfiprintf_internal_r+0xe68>
    ae84:	d8c01d87 	ldb	r3,118(sp)
    ae88:	42000204 	addi	r8,r8,8
    ae8c:	29000044 	addi	r4,r5,1
    ae90:	1801b31e 	bne	r3,zero,b560 <___vfiprintf_internal_r+0xbc4>
    ae94:	7001c026 	beq	r14,zero,b598 <___vfiprintf_internal_r+0xbfc>
    ae98:	d8c01d04 	addi	r3,sp,116
    ae9c:	10800084 	addi	r2,r2,2
    aea0:	40c00015 	stw	r3,0(r8)
    aea4:	00c00084 	movi	r3,2
    aea8:	40c00115 	stw	r3,4(r8)
    aeac:	d8801c15 	stw	r2,112(sp)
    aeb0:	d9001b15 	stw	r4,108(sp)
    aeb4:	00c001c4 	movi	r3,7
    aeb8:	1902650e 	bge	r3,r4,b850 <___vfiprintf_internal_r+0xeb4>
    aebc:	10029a1e 	bne	r2,zero,b928 <___vfiprintf_internal_r+0xf8c>
    aec0:	00c02004 	movi	r3,128
    aec4:	01000044 	movi	r4,1
    aec8:	000b883a 	mov	r5,zero
    aecc:	d811883a 	mov	r8,sp
    aed0:	e0c1b31e 	bne	fp,r3,b5a0 <___vfiprintf_internal_r+0xc04>
    aed4:	8cb9c83a 	sub	fp,r17,r18
    aed8:	0701b10e 	bge	zero,fp,b5a0 <___vfiprintf_internal_r+0xc04>
    aedc:	01c00404 	movi	r7,16
    aee0:	3f03890e 	bge	r7,fp,bd08 <___vfiprintf_internal_r+0x136c>
    aee4:	00c00074 	movhi	r3,1
    aee8:	18c8e804 	addi	r3,r3,9120
    aeec:	d8c02415 	stw	r3,144(sp)
    aef0:	8007883a 	mov	r3,r16
    aef4:	034001c4 	movi	r13,7
    aef8:	e021883a 	mov	r16,fp
    aefc:	da402515 	stw	r9,148(sp)
    af00:	1839883a 	mov	fp,r3
    af04:	00000506 	br	af1c <___vfiprintf_internal_r+0x580>
    af08:	29800084 	addi	r6,r5,2
    af0c:	42000204 	addi	r8,r8,8
    af10:	180b883a 	mov	r5,r3
    af14:	843ffc04 	addi	r16,r16,-16
    af18:	3c000d0e 	bge	r7,r16,af50 <___vfiprintf_internal_r+0x5b4>
    af1c:	10800404 	addi	r2,r2,16
    af20:	28c00044 	addi	r3,r5,1
    af24:	45c00015 	stw	r23,0(r8)
    af28:	41c00115 	stw	r7,4(r8)
    af2c:	d8801c15 	stw	r2,112(sp)
    af30:	d8c01b15 	stw	r3,108(sp)
    af34:	68fff40e 	bge	r13,r3,af08 <__alt_data_end+0xff00af08>
    af38:	1002241e 	bne	r2,zero,b7cc <___vfiprintf_internal_r+0xe30>
    af3c:	843ffc04 	addi	r16,r16,-16
    af40:	01800044 	movi	r6,1
    af44:	000b883a 	mov	r5,zero
    af48:	d811883a 	mov	r8,sp
    af4c:	3c3ff316 	blt	r7,r16,af1c <__alt_data_end+0xff00af1c>
    af50:	da402517 	ldw	r9,148(sp)
    af54:	e007883a 	mov	r3,fp
    af58:	8039883a 	mov	fp,r16
    af5c:	1821883a 	mov	r16,r3
    af60:	d8c02417 	ldw	r3,144(sp)
    af64:	1705883a 	add	r2,r2,fp
    af68:	47000115 	stw	fp,4(r8)
    af6c:	40c00015 	stw	r3,0(r8)
    af70:	d8801c15 	stw	r2,112(sp)
    af74:	d9801b15 	stw	r6,108(sp)
    af78:	00c001c4 	movi	r3,7
    af7c:	19827616 	blt	r3,r6,b958 <___vfiprintf_internal_r+0xfbc>
    af80:	4cf9c83a 	sub	fp,r9,r19
    af84:	42000204 	addi	r8,r8,8
    af88:	31000044 	addi	r4,r6,1
    af8c:	300b883a 	mov	r5,r6
    af90:	07018516 	blt	zero,fp,b5a8 <___vfiprintf_internal_r+0xc0c>
    af94:	9885883a 	add	r2,r19,r2
    af98:	45400015 	stw	r21,0(r8)
    af9c:	44c00115 	stw	r19,4(r8)
    afa0:	d8801c15 	stw	r2,112(sp)
    afa4:	d9001b15 	stw	r4,108(sp)
    afa8:	00c001c4 	movi	r3,7
    afac:	1901dd0e 	bge	r3,r4,b724 <___vfiprintf_internal_r+0xd88>
    afb0:	1002401e 	bne	r2,zero,b8b4 <___vfiprintf_internal_r+0xf18>
    afb4:	d8001b15 	stw	zero,108(sp)
    afb8:	a2c0010c 	andi	r11,r20,4
    afbc:	58000226 	beq	r11,zero,afc8 <___vfiprintf_internal_r+0x62c>
    afc0:	8ca7c83a 	sub	r19,r17,r18
    afc4:	04c2f216 	blt	zero,r19,bb90 <___vfiprintf_internal_r+0x11f4>
    afc8:	8c80010e 	bge	r17,r18,afd0 <___vfiprintf_internal_r+0x634>
    afcc:	9023883a 	mov	r17,r18
    afd0:	da802317 	ldw	r10,140(sp)
    afd4:	5455883a 	add	r10,r10,r17
    afd8:	da802315 	stw	r10,140(sp)
    afdc:	d8001b15 	stw	zero,108(sp)
    afe0:	d811883a 	mov	r8,sp
    afe4:	003ea206 	br	aa70 <__alt_data_end+0xff00aa70>
    afe8:	a5000814 	ori	r20,r20,32
    afec:	80c00007 	ldb	r3,0(r16)
    aff0:	003ec906 	br	ab18 <__alt_data_end+0xff00ab18>
    aff4:	80c00007 	ldb	r3,0(r16)
    aff8:	1b030926 	beq	r3,r12,bc20 <___vfiprintf_internal_r+0x1284>
    affc:	a5000414 	ori	r20,r20,16
    b000:	003ec506 	br	ab18 <__alt_data_end+0xff00ab18>
    b004:	21003fcc 	andi	r4,r4,255
    b008:	20035e1e 	bne	r4,zero,bd84 <___vfiprintf_internal_r+0x13e8>
    b00c:	a080080c 	andi	r2,r20,32
    b010:	1002a526 	beq	r2,zero,baa8 <___vfiprintf_internal_r+0x110c>
    b014:	da802217 	ldw	r10,136(sp)
    b018:	50800017 	ldw	r2,0(r10)
    b01c:	da802317 	ldw	r10,140(sp)
    b020:	5007d7fa 	srai	r3,r10,31
    b024:	da802217 	ldw	r10,136(sp)
    b028:	10c00115 	stw	r3,4(r2)
    b02c:	52800104 	addi	r10,r10,4
    b030:	da802215 	stw	r10,136(sp)
    b034:	da802317 	ldw	r10,140(sp)
    b038:	12800015 	stw	r10,0(r2)
    b03c:	003e8c06 	br	aa70 <__alt_data_end+0xff00aa70>
    b040:	21003fcc 	andi	r4,r4,255
    b044:	2003511e 	bne	r4,zero,bd8c <___vfiprintf_internal_r+0x13f0>
    b048:	a080080c 	andi	r2,r20,32
    b04c:	1000a126 	beq	r2,zero,b2d4 <___vfiprintf_internal_r+0x938>
    b050:	da802217 	ldw	r10,136(sp)
    b054:	d8001d85 	stb	zero,118(sp)
    b058:	50800204 	addi	r2,r10,8
    b05c:	54800017 	ldw	r18,0(r10)
    b060:	54c00117 	ldw	r19,4(r10)
    b064:	4802b416 	blt	r9,zero,bb38 <___vfiprintf_internal_r+0x119c>
    b068:	013fdfc4 	movi	r4,-129
    b06c:	94c6b03a 	or	r3,r18,r19
    b070:	d8802215 	stw	r2,136(sp)
    b074:	a128703a 	and	r20,r20,r4
    b078:	1800a226 	beq	r3,zero,b304 <___vfiprintf_internal_r+0x968>
    b07c:	0039883a 	mov	fp,zero
    b080:	dd401a04 	addi	r21,sp,104
    b084:	9006d0fa 	srli	r3,r18,3
    b088:	9808977a 	slli	r4,r19,29
    b08c:	9826d0fa 	srli	r19,r19,3
    b090:	948001cc 	andi	r18,r18,7
    b094:	90800c04 	addi	r2,r18,48
    b098:	ad7fffc4 	addi	r21,r21,-1
    b09c:	20e4b03a 	or	r18,r4,r3
    b0a0:	a8800005 	stb	r2,0(r21)
    b0a4:	94c6b03a 	or	r3,r18,r19
    b0a8:	183ff61e 	bne	r3,zero,b084 <__alt_data_end+0xff00b084>
    b0ac:	a0c0004c 	andi	r3,r20,1
    b0b0:	18005926 	beq	r3,zero,b218 <___vfiprintf_internal_r+0x87c>
    b0b4:	10803fcc 	andi	r2,r2,255
    b0b8:	1080201c 	xori	r2,r2,128
    b0bc:	10bfe004 	addi	r2,r2,-128
    b0c0:	00c00c04 	movi	r3,48
    b0c4:	10c05426 	beq	r2,r3,b218 <___vfiprintf_internal_r+0x87c>
    b0c8:	da801e17 	ldw	r10,120(sp)
    b0cc:	a8bfffc4 	addi	r2,r21,-1
    b0d0:	a8ffffc5 	stb	r3,-1(r21)
    b0d4:	50a7c83a 	sub	r19,r10,r2
    b0d8:	102b883a 	mov	r21,r2
    b0dc:	003f2f06 	br	ad9c <__alt_data_end+0xff00ad9c>
    b0e0:	21003fcc 	andi	r4,r4,255
    b0e4:	2003421e 	bne	r4,zero,bdf0 <___vfiprintf_internal_r+0x1454>
    b0e8:	00800074 	movhi	r2,1
    b0ec:	10888704 	addi	r2,r2,8732
    b0f0:	d8802615 	stw	r2,152(sp)
    b0f4:	a080080c 	andi	r2,r20,32
    b0f8:	1000aa26 	beq	r2,zero,b3a4 <___vfiprintf_internal_r+0xa08>
    b0fc:	da802217 	ldw	r10,136(sp)
    b100:	54800017 	ldw	r18,0(r10)
    b104:	54c00117 	ldw	r19,4(r10)
    b108:	52800204 	addi	r10,r10,8
    b10c:	da802215 	stw	r10,136(sp)
    b110:	a080004c 	andi	r2,r20,1
    b114:	1001d226 	beq	r2,zero,b860 <___vfiprintf_internal_r+0xec4>
    b118:	94c4b03a 	or	r2,r18,r19
    b11c:	1002351e 	bne	r2,zero,b9f4 <___vfiprintf_internal_r+0x1058>
    b120:	d8001d85 	stb	zero,118(sp)
    b124:	48022216 	blt	r9,zero,b9b0 <___vfiprintf_internal_r+0x1014>
    b128:	00bfdfc4 	movi	r2,-129
    b12c:	a0a8703a 	and	r20,r20,r2
    b130:	003f1506 	br	ad88 <__alt_data_end+0xff00ad88>
    b134:	da802217 	ldw	r10,136(sp)
    b138:	04800044 	movi	r18,1
    b13c:	d8001d85 	stb	zero,118(sp)
    b140:	50800017 	ldw	r2,0(r10)
    b144:	52800104 	addi	r10,r10,4
    b148:	da802215 	stw	r10,136(sp)
    b14c:	d8801005 	stb	r2,64(sp)
    b150:	9027883a 	mov	r19,r18
    b154:	dd401004 	addi	r21,sp,64
    b158:	0013883a 	mov	r9,zero
    b15c:	003f1706 	br	adbc <__alt_data_end+0xff00adbc>
    b160:	21003fcc 	andi	r4,r4,255
    b164:	2003201e 	bne	r4,zero,bde8 <___vfiprintf_internal_r+0x144c>
    b168:	a080080c 	andi	r2,r20,32
    b16c:	10004b26 	beq	r2,zero,b29c <___vfiprintf_internal_r+0x900>
    b170:	da802217 	ldw	r10,136(sp)
    b174:	50800117 	ldw	r2,4(r10)
    b178:	54800017 	ldw	r18,0(r10)
    b17c:	52800204 	addi	r10,r10,8
    b180:	da802215 	stw	r10,136(sp)
    b184:	1027883a 	mov	r19,r2
    b188:	10022c16 	blt	r2,zero,ba3c <___vfiprintf_internal_r+0x10a0>
    b18c:	df001d83 	ldbu	fp,118(sp)
    b190:	48007216 	blt	r9,zero,b35c <___vfiprintf_internal_r+0x9c0>
    b194:	00ffdfc4 	movi	r3,-129
    b198:	94c4b03a 	or	r2,r18,r19
    b19c:	a0e8703a 	and	r20,r20,r3
    b1a0:	1000cc26 	beq	r2,zero,b4d4 <___vfiprintf_internal_r+0xb38>
    b1a4:	98021026 	beq	r19,zero,b9e8 <___vfiprintf_internal_r+0x104c>
    b1a8:	dc402415 	stw	r17,144(sp)
    b1ac:	dc002515 	stw	r16,148(sp)
    b1b0:	9823883a 	mov	r17,r19
    b1b4:	9021883a 	mov	r16,r18
    b1b8:	dd401a04 	addi	r21,sp,104
    b1bc:	4825883a 	mov	r18,r9
    b1c0:	4027883a 	mov	r19,r8
    b1c4:	8009883a 	mov	r4,r16
    b1c8:	880b883a 	mov	r5,r17
    b1cc:	01800284 	movi	r6,10
    b1d0:	000f883a 	mov	r7,zero
    b1d4:	000cd7c0 	call	cd7c <__umoddi3>
    b1d8:	10800c04 	addi	r2,r2,48
    b1dc:	ad7fffc4 	addi	r21,r21,-1
    b1e0:	8009883a 	mov	r4,r16
    b1e4:	880b883a 	mov	r5,r17
    b1e8:	a8800005 	stb	r2,0(r21)
    b1ec:	01800284 	movi	r6,10
    b1f0:	000f883a 	mov	r7,zero
    b1f4:	000c8040 	call	c804 <__udivdi3>
    b1f8:	1021883a 	mov	r16,r2
    b1fc:	10c4b03a 	or	r2,r2,r3
    b200:	1823883a 	mov	r17,r3
    b204:	103fef1e 	bne	r2,zero,b1c4 <__alt_data_end+0xff00b1c4>
    b208:	dc402417 	ldw	r17,144(sp)
    b20c:	dc002517 	ldw	r16,148(sp)
    b210:	9013883a 	mov	r9,r18
    b214:	9811883a 	mov	r8,r19
    b218:	da801e17 	ldw	r10,120(sp)
    b21c:	5567c83a 	sub	r19,r10,r21
    b220:	003ede06 	br	ad9c <__alt_data_end+0xff00ad9c>
    b224:	38803fcc 	andi	r2,r7,255
    b228:	1080201c 	xori	r2,r2,128
    b22c:	10bfe004 	addi	r2,r2,-128
    b230:	1002371e 	bne	r2,zero,bb10 <___vfiprintf_internal_r+0x1174>
    b234:	01000044 	movi	r4,1
    b238:	01c00804 	movi	r7,32
    b23c:	80c00007 	ldb	r3,0(r16)
    b240:	003e3506 	br	ab18 <__alt_data_end+0xff00ab18>
    b244:	a5000054 	ori	r20,r20,1
    b248:	80c00007 	ldb	r3,0(r16)
    b24c:	003e3206 	br	ab18 <__alt_data_end+0xff00ab18>
    b250:	a5002014 	ori	r20,r20,128
    b254:	80c00007 	ldb	r3,0(r16)
    b258:	003e2f06 	br	ab18 <__alt_data_end+0xff00ab18>
    b25c:	8015883a 	mov	r10,r16
    b260:	0023883a 	mov	r17,zero
    b264:	18bff404 	addi	r2,r3,-48
    b268:	50c00007 	ldb	r3,0(r10)
    b26c:	8c4002a4 	muli	r17,r17,10
    b270:	84000044 	addi	r16,r16,1
    b274:	8015883a 	mov	r10,r16
    b278:	1463883a 	add	r17,r2,r17
    b27c:	18bff404 	addi	r2,r3,-48
    b280:	30bff92e 	bgeu	r6,r2,b268 <__alt_data_end+0xff00b268>
    b284:	003e2506 	br	ab1c <__alt_data_end+0xff00ab1c>
    b288:	21003fcc 	andi	r4,r4,255
    b28c:	2002d41e 	bne	r4,zero,bde0 <___vfiprintf_internal_r+0x1444>
    b290:	a5000414 	ori	r20,r20,16
    b294:	a080080c 	andi	r2,r20,32
    b298:	103fb51e 	bne	r2,zero,b170 <__alt_data_end+0xff00b170>
    b29c:	a080040c 	andi	r2,r20,16
    b2a0:	1001f826 	beq	r2,zero,ba84 <___vfiprintf_internal_r+0x10e8>
    b2a4:	da802217 	ldw	r10,136(sp)
    b2a8:	54800017 	ldw	r18,0(r10)
    b2ac:	52800104 	addi	r10,r10,4
    b2b0:	da802215 	stw	r10,136(sp)
    b2b4:	9027d7fa 	srai	r19,r18,31
    b2b8:	9805883a 	mov	r2,r19
    b2bc:	003fb206 	br	b188 <__alt_data_end+0xff00b188>
    b2c0:	21003fcc 	andi	r4,r4,255
    b2c4:	2002c41e 	bne	r4,zero,bdd8 <___vfiprintf_internal_r+0x143c>
    b2c8:	a5000414 	ori	r20,r20,16
    b2cc:	a080080c 	andi	r2,r20,32
    b2d0:	103f5f1e 	bne	r2,zero,b050 <__alt_data_end+0xff00b050>
    b2d4:	a080040c 	andi	r2,r20,16
    b2d8:	10020f26 	beq	r2,zero,bb18 <___vfiprintf_internal_r+0x117c>
    b2dc:	da802217 	ldw	r10,136(sp)
    b2e0:	d8001d85 	stb	zero,118(sp)
    b2e4:	0027883a 	mov	r19,zero
    b2e8:	50800104 	addi	r2,r10,4
    b2ec:	54800017 	ldw	r18,0(r10)
    b2f0:	48021116 	blt	r9,zero,bb38 <___vfiprintf_internal_r+0x119c>
    b2f4:	00ffdfc4 	movi	r3,-129
    b2f8:	d8802215 	stw	r2,136(sp)
    b2fc:	a0e8703a 	and	r20,r20,r3
    b300:	903f5e1e 	bne	r18,zero,b07c <__alt_data_end+0xff00b07c>
    b304:	0039883a 	mov	fp,zero
    b308:	4802a626 	beq	r9,zero,bda4 <___vfiprintf_internal_r+0x1408>
    b30c:	0025883a 	mov	r18,zero
    b310:	0027883a 	mov	r19,zero
    b314:	003f5a06 	br	b080 <__alt_data_end+0xff00b080>
    b318:	21003fcc 	andi	r4,r4,255
    b31c:	20029f1e 	bne	r4,zero,bd9c <___vfiprintf_internal_r+0x1400>
    b320:	a5000414 	ori	r20,r20,16
    b324:	a080080c 	andi	r2,r20,32
    b328:	10005e1e 	bne	r2,zero,b4a4 <___vfiprintf_internal_r+0xb08>
    b32c:	a080040c 	andi	r2,r20,16
    b330:	1001a21e 	bne	r2,zero,b9bc <___vfiprintf_internal_r+0x1020>
    b334:	a080100c 	andi	r2,r20,64
    b338:	d8001d85 	stb	zero,118(sp)
    b33c:	da802217 	ldw	r10,136(sp)
    b340:	1002231e 	bne	r2,zero,bbd0 <___vfiprintf_internal_r+0x1234>
    b344:	50800104 	addi	r2,r10,4
    b348:	54800017 	ldw	r18,0(r10)
    b34c:	0027883a 	mov	r19,zero
    b350:	4801a00e 	bge	r9,zero,b9d4 <___vfiprintf_internal_r+0x1038>
    b354:	d8802215 	stw	r2,136(sp)
    b358:	0039883a 	mov	fp,zero
    b35c:	94c4b03a 	or	r2,r18,r19
    b360:	103f901e 	bne	r2,zero,b1a4 <__alt_data_end+0xff00b1a4>
    b364:	00800044 	movi	r2,1
    b368:	10803fcc 	andi	r2,r2,255
    b36c:	00c00044 	movi	r3,1
    b370:	10c05926 	beq	r2,r3,b4d8 <___vfiprintf_internal_r+0xb3c>
    b374:	00c00084 	movi	r3,2
    b378:	10ffe41e 	bne	r2,r3,b30c <__alt_data_end+0xff00b30c>
    b37c:	0025883a 	mov	r18,zero
    b380:	0027883a 	mov	r19,zero
    b384:	00013d06 	br	b87c <___vfiprintf_internal_r+0xee0>
    b388:	21003fcc 	andi	r4,r4,255
    b38c:	2002811e 	bne	r4,zero,bd94 <___vfiprintf_internal_r+0x13f8>
    b390:	00800074 	movhi	r2,1
    b394:	10888204 	addi	r2,r2,8712
    b398:	d8802615 	stw	r2,152(sp)
    b39c:	a080080c 	andi	r2,r20,32
    b3a0:	103f561e 	bne	r2,zero,b0fc <__alt_data_end+0xff00b0fc>
    b3a4:	a080040c 	andi	r2,r20,16
    b3a8:	1001d126 	beq	r2,zero,baf0 <___vfiprintf_internal_r+0x1154>
    b3ac:	da802217 	ldw	r10,136(sp)
    b3b0:	0027883a 	mov	r19,zero
    b3b4:	54800017 	ldw	r18,0(r10)
    b3b8:	52800104 	addi	r10,r10,4
    b3bc:	da802215 	stw	r10,136(sp)
    b3c0:	003f5306 	br	b110 <__alt_data_end+0xff00b110>
    b3c4:	da802217 	ldw	r10,136(sp)
    b3c8:	d8001d85 	stb	zero,118(sp)
    b3cc:	55400017 	ldw	r21,0(r10)
    b3d0:	50c00104 	addi	r3,r10,4
    b3d4:	a8024226 	beq	r21,zero,bce0 <___vfiprintf_internal_r+0x1344>
    b3d8:	48021816 	blt	r9,zero,bc3c <___vfiprintf_internal_r+0x12a0>
    b3dc:	480d883a 	mov	r6,r9
    b3e0:	000b883a 	mov	r5,zero
    b3e4:	a809883a 	mov	r4,r21
    b3e8:	d8c02a15 	stw	r3,168(sp)
    b3ec:	da002b15 	stw	r8,172(sp)
    b3f0:	da402c15 	stw	r9,176(sp)
    b3f4:	0008bec0 	call	8bec <memchr>
    b3f8:	d8c02a17 	ldw	r3,168(sp)
    b3fc:	da002b17 	ldw	r8,172(sp)
    b400:	da402c17 	ldw	r9,176(sp)
    b404:	10024826 	beq	r2,zero,bd28 <___vfiprintf_internal_r+0x138c>
    b408:	1567c83a 	sub	r19,r2,r21
    b40c:	df001d83 	ldbu	fp,118(sp)
    b410:	d8c02215 	stw	r3,136(sp)
    b414:	0013883a 	mov	r9,zero
    b418:	003e6006 	br	ad9c <__alt_data_end+0xff00ad9c>
    b41c:	21003fcc 	andi	r4,r4,255
    b420:	203fc026 	beq	r4,zero,b324 <__alt_data_end+0xff00b324>
    b424:	d9c01d85 	stb	r7,118(sp)
    b428:	003fbe06 	br	b324 <__alt_data_end+0xff00b324>
    b42c:	da802217 	ldw	r10,136(sp)
    b430:	54400017 	ldw	r17,0(r10)
    b434:	50800104 	addi	r2,r10,4
    b438:	883e3b16 	blt	r17,zero,ad28 <__alt_data_end+0xff00ad28>
    b43c:	d8802215 	stw	r2,136(sp)
    b440:	80c00007 	ldb	r3,0(r16)
    b444:	003db406 	br	ab18 <__alt_data_end+0xff00ab18>
    b448:	01000044 	movi	r4,1
    b44c:	01c00ac4 	movi	r7,43
    b450:	80c00007 	ldb	r3,0(r16)
    b454:	003db006 	br	ab18 <__alt_data_end+0xff00ab18>
    b458:	80c00007 	ldb	r3,0(r16)
    b45c:	82800044 	addi	r10,r16,1
    b460:	1b423c26 	beq	r3,r13,bd54 <___vfiprintf_internal_r+0x13b8>
    b464:	18bff404 	addi	r2,r3,-48
    b468:	0013883a 	mov	r9,zero
    b46c:	30822b36 	bltu	r6,r2,bd1c <___vfiprintf_internal_r+0x1380>
    b470:	50c00007 	ldb	r3,0(r10)
    b474:	4a4002a4 	muli	r9,r9,10
    b478:	54000044 	addi	r16,r10,1
    b47c:	8015883a 	mov	r10,r16
    b480:	4893883a 	add	r9,r9,r2
    b484:	18bff404 	addi	r2,r3,-48
    b488:	30bff92e 	bgeu	r6,r2,b470 <__alt_data_end+0xff00b470>
    b48c:	483da30e 	bge	r9,zero,ab1c <__alt_data_end+0xff00ab1c>
    b490:	027fffc4 	movi	r9,-1
    b494:	003da106 	br	ab1c <__alt_data_end+0xff00ab1c>
    b498:	a5001014 	ori	r20,r20,64
    b49c:	80c00007 	ldb	r3,0(r16)
    b4a0:	003d9d06 	br	ab18 <__alt_data_end+0xff00ab18>
    b4a4:	da802217 	ldw	r10,136(sp)
    b4a8:	d8001d85 	stb	zero,118(sp)
    b4ac:	50c00204 	addi	r3,r10,8
    b4b0:	54800017 	ldw	r18,0(r10)
    b4b4:	54c00117 	ldw	r19,4(r10)
    b4b8:	4801ca16 	blt	r9,zero,bbe4 <___vfiprintf_internal_r+0x1248>
    b4bc:	013fdfc4 	movi	r4,-129
    b4c0:	94c4b03a 	or	r2,r18,r19
    b4c4:	d8c02215 	stw	r3,136(sp)
    b4c8:	a128703a 	and	r20,r20,r4
    b4cc:	0039883a 	mov	fp,zero
    b4d0:	103f341e 	bne	r2,zero,b1a4 <__alt_data_end+0xff00b1a4>
    b4d4:	483e2e26 	beq	r9,zero,ad90 <__alt_data_end+0xff00ad90>
    b4d8:	0025883a 	mov	r18,zero
    b4dc:	94800c04 	addi	r18,r18,48
    b4e0:	dc8019c5 	stb	r18,103(sp)
    b4e4:	dcc02717 	ldw	r19,156(sp)
    b4e8:	dd4019c4 	addi	r21,sp,103
    b4ec:	003e2b06 	br	ad9c <__alt_data_end+0xff00ad9c>
    b4f0:	21003fcc 	andi	r4,r4,255
    b4f4:	2002361e 	bne	r4,zero,bdd0 <___vfiprintf_internal_r+0x1434>
    b4f8:	1801c126 	beq	r3,zero,bc00 <___vfiprintf_internal_r+0x1264>
    b4fc:	04800044 	movi	r18,1
    b500:	d8c01005 	stb	r3,64(sp)
    b504:	d8001d85 	stb	zero,118(sp)
    b508:	9027883a 	mov	r19,r18
    b50c:	dd401004 	addi	r21,sp,64
    b510:	003f1106 	br	b158 <__alt_data_end+0xff00b158>
    b514:	d9402117 	ldw	r5,132(sp)
    b518:	d9002017 	ldw	r4,128(sp)
    b51c:	d9801a04 	addi	r6,sp,104
    b520:	d9c02b15 	stw	r7,172(sp)
    b524:	dbc02a15 	stw	r15,168(sp)
    b528:	000a8880 	call	a888 <__sprint_r.part.0>
    b52c:	d9c02b17 	ldw	r7,172(sp)
    b530:	dbc02a17 	ldw	r15,168(sp)
    b534:	10006d1e 	bne	r2,zero,b6ec <___vfiprintf_internal_r+0xd50>
    b538:	d9801b17 	ldw	r6,108(sp)
    b53c:	d8801c17 	ldw	r2,112(sp)
    b540:	d811883a 	mov	r8,sp
    b544:	31400044 	addi	r5,r6,1
    b548:	003e3306 	br	ae18 <__alt_data_end+0xff00ae18>
    b54c:	d9401b17 	ldw	r5,108(sp)
    b550:	d8801c17 	ldw	r2,112(sp)
    b554:	29000044 	addi	r4,r5,1
    b558:	d8c01d87 	ldb	r3,118(sp)
    b55c:	183e4d26 	beq	r3,zero,ae94 <__alt_data_end+0xff00ae94>
    b560:	00c00044 	movi	r3,1
    b564:	d9401d84 	addi	r5,sp,118
    b568:	10c5883a 	add	r2,r2,r3
    b56c:	41400015 	stw	r5,0(r8)
    b570:	40c00115 	stw	r3,4(r8)
    b574:	d8801c15 	stw	r2,112(sp)
    b578:	d9001b15 	stw	r4,108(sp)
    b57c:	014001c4 	movi	r5,7
    b580:	2900a90e 	bge	r5,r4,b828 <___vfiprintf_internal_r+0xe8c>
    b584:	1000da1e 	bne	r2,zero,b8f0 <___vfiprintf_internal_r+0xf54>
    b588:	7000ab1e 	bne	r14,zero,b838 <___vfiprintf_internal_r+0xe9c>
    b58c:	000b883a 	mov	r5,zero
    b590:	1809883a 	mov	r4,r3
    b594:	d811883a 	mov	r8,sp
    b598:	00c02004 	movi	r3,128
    b59c:	e0fe4d26 	beq	fp,r3,aed4 <__alt_data_end+0xff00aed4>
    b5a0:	4cf9c83a 	sub	fp,r9,r19
    b5a4:	073e7b0e 	bge	zero,fp,af94 <__alt_data_end+0xff00af94>
    b5a8:	01c00404 	movi	r7,16
    b5ac:	3f01900e 	bge	r7,fp,bbf0 <___vfiprintf_internal_r+0x1254>
    b5b0:	00c00074 	movhi	r3,1
    b5b4:	18c8e804 	addi	r3,r3,9120
    b5b8:	d8c02415 	stw	r3,144(sp)
    b5bc:	034001c4 	movi	r13,7
    b5c0:	00000506 	br	b5d8 <___vfiprintf_internal_r+0xc3c>
    b5c4:	29000084 	addi	r4,r5,2
    b5c8:	42000204 	addi	r8,r8,8
    b5cc:	180b883a 	mov	r5,r3
    b5d0:	e73ffc04 	addi	fp,fp,-16
    b5d4:	3f000d0e 	bge	r7,fp,b60c <___vfiprintf_internal_r+0xc70>
    b5d8:	10800404 	addi	r2,r2,16
    b5dc:	28c00044 	addi	r3,r5,1
    b5e0:	45c00015 	stw	r23,0(r8)
    b5e4:	41c00115 	stw	r7,4(r8)
    b5e8:	d8801c15 	stw	r2,112(sp)
    b5ec:	d8c01b15 	stw	r3,108(sp)
    b5f0:	68fff40e 	bge	r13,r3,b5c4 <__alt_data_end+0xff00b5c4>
    b5f4:	1000101e 	bne	r2,zero,b638 <___vfiprintf_internal_r+0xc9c>
    b5f8:	e73ffc04 	addi	fp,fp,-16
    b5fc:	01000044 	movi	r4,1
    b600:	000b883a 	mov	r5,zero
    b604:	d811883a 	mov	r8,sp
    b608:	3f3ff316 	blt	r7,fp,b5d8 <__alt_data_end+0xff00b5d8>
    b60c:	da802417 	ldw	r10,144(sp)
    b610:	1705883a 	add	r2,r2,fp
    b614:	47000115 	stw	fp,4(r8)
    b618:	42800015 	stw	r10,0(r8)
    b61c:	d8801c15 	stw	r2,112(sp)
    b620:	d9001b15 	stw	r4,108(sp)
    b624:	00c001c4 	movi	r3,7
    b628:	19003616 	blt	r3,r4,b704 <___vfiprintf_internal_r+0xd68>
    b62c:	42000204 	addi	r8,r8,8
    b630:	21000044 	addi	r4,r4,1
    b634:	003e5706 	br	af94 <__alt_data_end+0xff00af94>
    b638:	d9402117 	ldw	r5,132(sp)
    b63c:	d9002017 	ldw	r4,128(sp)
    b640:	d9801a04 	addi	r6,sp,104
    b644:	d9c02b15 	stw	r7,172(sp)
    b648:	db402a15 	stw	r13,168(sp)
    b64c:	000a8880 	call	a888 <__sprint_r.part.0>
    b650:	d9c02b17 	ldw	r7,172(sp)
    b654:	db402a17 	ldw	r13,168(sp)
    b658:	1000241e 	bne	r2,zero,b6ec <___vfiprintf_internal_r+0xd50>
    b65c:	d9401b17 	ldw	r5,108(sp)
    b660:	d8801c17 	ldw	r2,112(sp)
    b664:	d811883a 	mov	r8,sp
    b668:	29000044 	addi	r4,r5,1
    b66c:	003fd806 	br	b5d0 <__alt_data_end+0xff00b5d0>
    b670:	d9401b17 	ldw	r5,108(sp)
    b674:	00c00074 	movhi	r3,1
    b678:	18c8ec04 	addi	r3,r3,9136
    b67c:	d8c02415 	stw	r3,144(sp)
    b680:	29400044 	addi	r5,r5,1
    b684:	d8c02417 	ldw	r3,144(sp)
    b688:	14c5883a 	add	r2,r2,r19
    b68c:	44c00115 	stw	r19,4(r8)
    b690:	40c00015 	stw	r3,0(r8)
    b694:	d8801c15 	stw	r2,112(sp)
    b698:	d9401b15 	stw	r5,108(sp)
    b69c:	00c001c4 	movi	r3,7
    b6a0:	1940070e 	bge	r3,r5,b6c0 <___vfiprintf_internal_r+0xd24>
    b6a4:	103e4826 	beq	r2,zero,afc8 <__alt_data_end+0xff00afc8>
    b6a8:	d9402117 	ldw	r5,132(sp)
    b6ac:	d9002017 	ldw	r4,128(sp)
    b6b0:	d9801a04 	addi	r6,sp,104
    b6b4:	000a8880 	call	a888 <__sprint_r.part.0>
    b6b8:	10000c1e 	bne	r2,zero,b6ec <___vfiprintf_internal_r+0xd50>
    b6bc:	d8801c17 	ldw	r2,112(sp)
    b6c0:	8c80010e 	bge	r17,r18,b6c8 <___vfiprintf_internal_r+0xd2c>
    b6c4:	9023883a 	mov	r17,r18
    b6c8:	da802317 	ldw	r10,140(sp)
    b6cc:	5455883a 	add	r10,r10,r17
    b6d0:	da802315 	stw	r10,140(sp)
    b6d4:	103e4126 	beq	r2,zero,afdc <__alt_data_end+0xff00afdc>
    b6d8:	d9402117 	ldw	r5,132(sp)
    b6dc:	d9002017 	ldw	r4,128(sp)
    b6e0:	d9801a04 	addi	r6,sp,104
    b6e4:	000a8880 	call	a888 <__sprint_r.part.0>
    b6e8:	103e3c26 	beq	r2,zero,afdc <__alt_data_end+0xff00afdc>
    b6ec:	dd002117 	ldw	r20,132(sp)
    b6f0:	a080030b 	ldhu	r2,12(r20)
    b6f4:	1080100c 	andi	r2,r2,64
    b6f8:	1001231e 	bne	r2,zero,bb88 <___vfiprintf_internal_r+0x11ec>
    b6fc:	d8802317 	ldw	r2,140(sp)
    b700:	003d7b06 	br	acf0 <__alt_data_end+0xff00acf0>
    b704:	1000991e 	bne	r2,zero,b96c <___vfiprintf_internal_r+0xfd0>
    b708:	00c00044 	movi	r3,1
    b70c:	9805883a 	mov	r2,r19
    b710:	dd400015 	stw	r21,0(sp)
    b714:	dcc00115 	stw	r19,4(sp)
    b718:	dcc01c15 	stw	r19,112(sp)
    b71c:	d8c01b15 	stw	r3,108(sp)
    b720:	d811883a 	mov	r8,sp
    b724:	42000204 	addi	r8,r8,8
    b728:	a2c0010c 	andi	r11,r20,4
    b72c:	583fe426 	beq	r11,zero,b6c0 <__alt_data_end+0xff00b6c0>
    b730:	8ca7c83a 	sub	r19,r17,r18
    b734:	04ffe20e 	bge	zero,r19,b6c0 <__alt_data_end+0xff00b6c0>
    b738:	01c00404 	movi	r7,16
    b73c:	3cffcc0e 	bge	r7,r19,b670 <__alt_data_end+0xff00b670>
    b740:	02800074 	movhi	r10,1
    b744:	5288ec04 	addi	r10,r10,9136
    b748:	d9001b17 	ldw	r4,108(sp)
    b74c:	da802415 	stw	r10,144(sp)
    b750:	382b883a 	mov	r21,r7
    b754:	050001c4 	movi	r20,7
    b758:	df002017 	ldw	fp,128(sp)
    b75c:	00000506 	br	b774 <___vfiprintf_internal_r+0xdd8>
    b760:	21400084 	addi	r5,r4,2
    b764:	42000204 	addi	r8,r8,8
    b768:	1809883a 	mov	r4,r3
    b76c:	9cfffc04 	addi	r19,r19,-16
    b770:	acffc40e 	bge	r21,r19,b684 <__alt_data_end+0xff00b684>
    b774:	10800404 	addi	r2,r2,16
    b778:	20c00044 	addi	r3,r4,1
    b77c:	45800015 	stw	r22,0(r8)
    b780:	45400115 	stw	r21,4(r8)
    b784:	d8801c15 	stw	r2,112(sp)
    b788:	d8c01b15 	stw	r3,108(sp)
    b78c:	a0fff40e 	bge	r20,r3,b760 <__alt_data_end+0xff00b760>
    b790:	1000041e 	bne	r2,zero,b7a4 <___vfiprintf_internal_r+0xe08>
    b794:	01400044 	movi	r5,1
    b798:	0009883a 	mov	r4,zero
    b79c:	d811883a 	mov	r8,sp
    b7a0:	003ff206 	br	b76c <__alt_data_end+0xff00b76c>
    b7a4:	d9402117 	ldw	r5,132(sp)
    b7a8:	d9801a04 	addi	r6,sp,104
    b7ac:	e009883a 	mov	r4,fp
    b7b0:	000a8880 	call	a888 <__sprint_r.part.0>
    b7b4:	103fcd1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b7b8:	d9001b17 	ldw	r4,108(sp)
    b7bc:	d8801c17 	ldw	r2,112(sp)
    b7c0:	d811883a 	mov	r8,sp
    b7c4:	21400044 	addi	r5,r4,1
    b7c8:	003fe806 	br	b76c <__alt_data_end+0xff00b76c>
    b7cc:	d9402117 	ldw	r5,132(sp)
    b7d0:	d9002017 	ldw	r4,128(sp)
    b7d4:	d9801a04 	addi	r6,sp,104
    b7d8:	d9c02b15 	stw	r7,172(sp)
    b7dc:	db402a15 	stw	r13,168(sp)
    b7e0:	000a8880 	call	a888 <__sprint_r.part.0>
    b7e4:	d9c02b17 	ldw	r7,172(sp)
    b7e8:	db402a17 	ldw	r13,168(sp)
    b7ec:	103fbf1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b7f0:	d9401b17 	ldw	r5,108(sp)
    b7f4:	d8801c17 	ldw	r2,112(sp)
    b7f8:	d811883a 	mov	r8,sp
    b7fc:	29800044 	addi	r6,r5,1
    b800:	003dc406 	br	af14 <__alt_data_end+0xff00af14>
    b804:	1000d21e 	bne	r2,zero,bb50 <___vfiprintf_internal_r+0x11b4>
    b808:	d8c01d87 	ldb	r3,118(sp)
    b80c:	18009526 	beq	r3,zero,ba64 <___vfiprintf_internal_r+0x10c8>
    b810:	00800044 	movi	r2,1
    b814:	d8c01d84 	addi	r3,sp,118
    b818:	1009883a 	mov	r4,r2
    b81c:	d8c00015 	stw	r3,0(sp)
    b820:	d8800115 	stw	r2,4(sp)
    b824:	d811883a 	mov	r8,sp
    b828:	200b883a 	mov	r5,r4
    b82c:	42000204 	addi	r8,r8,8
    b830:	21000044 	addi	r4,r4,1
    b834:	003d9706 	br	ae94 <__alt_data_end+0xff00ae94>
    b838:	d9001d04 	addi	r4,sp,116
    b83c:	00800084 	movi	r2,2
    b840:	d9000015 	stw	r4,0(sp)
    b844:	d8800115 	stw	r2,4(sp)
    b848:	1809883a 	mov	r4,r3
    b84c:	d811883a 	mov	r8,sp
    b850:	200b883a 	mov	r5,r4
    b854:	42000204 	addi	r8,r8,8
    b858:	21000044 	addi	r4,r4,1
    b85c:	003f4e06 	br	b598 <__alt_data_end+0xff00b598>
    b860:	d8001d85 	stb	zero,118(sp)
    b864:	48005016 	blt	r9,zero,b9a8 <___vfiprintf_internal_r+0x100c>
    b868:	00ffdfc4 	movi	r3,-129
    b86c:	94c4b03a 	or	r2,r18,r19
    b870:	a0e8703a 	and	r20,r20,r3
    b874:	103d4426 	beq	r2,zero,ad88 <__alt_data_end+0xff00ad88>
    b878:	0039883a 	mov	fp,zero
    b87c:	d9002617 	ldw	r4,152(sp)
    b880:	dd401a04 	addi	r21,sp,104
    b884:	908003cc 	andi	r2,r18,15
    b888:	9806973a 	slli	r3,r19,28
    b88c:	2085883a 	add	r2,r4,r2
    b890:	9024d13a 	srli	r18,r18,4
    b894:	10800003 	ldbu	r2,0(r2)
    b898:	9826d13a 	srli	r19,r19,4
    b89c:	ad7fffc4 	addi	r21,r21,-1
    b8a0:	1ca4b03a 	or	r18,r3,r18
    b8a4:	a8800005 	stb	r2,0(r21)
    b8a8:	94c4b03a 	or	r2,r18,r19
    b8ac:	103ff51e 	bne	r2,zero,b884 <__alt_data_end+0xff00b884>
    b8b0:	003e5906 	br	b218 <__alt_data_end+0xff00b218>
    b8b4:	d9402117 	ldw	r5,132(sp)
    b8b8:	d9002017 	ldw	r4,128(sp)
    b8bc:	d9801a04 	addi	r6,sp,104
    b8c0:	000a8880 	call	a888 <__sprint_r.part.0>
    b8c4:	103f891e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b8c8:	d8801c17 	ldw	r2,112(sp)
    b8cc:	d811883a 	mov	r8,sp
    b8d0:	003f9506 	br	b728 <__alt_data_end+0xff00b728>
    b8d4:	d9402117 	ldw	r5,132(sp)
    b8d8:	d9002017 	ldw	r4,128(sp)
    b8dc:	d9801a04 	addi	r6,sp,104
    b8e0:	000a8880 	call	a888 <__sprint_r.part.0>
    b8e4:	103f811e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b8e8:	d811883a 	mov	r8,sp
    b8ec:	003ced06 	br	aca4 <__alt_data_end+0xff00aca4>
    b8f0:	d9402117 	ldw	r5,132(sp)
    b8f4:	d9002017 	ldw	r4,128(sp)
    b8f8:	d9801a04 	addi	r6,sp,104
    b8fc:	da402c15 	stw	r9,176(sp)
    b900:	db802a15 	stw	r14,168(sp)
    b904:	000a8880 	call	a888 <__sprint_r.part.0>
    b908:	da402c17 	ldw	r9,176(sp)
    b90c:	db802a17 	ldw	r14,168(sp)
    b910:	103f761e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b914:	d9401b17 	ldw	r5,108(sp)
    b918:	d8801c17 	ldw	r2,112(sp)
    b91c:	d811883a 	mov	r8,sp
    b920:	29000044 	addi	r4,r5,1
    b924:	003d5b06 	br	ae94 <__alt_data_end+0xff00ae94>
    b928:	d9402117 	ldw	r5,132(sp)
    b92c:	d9002017 	ldw	r4,128(sp)
    b930:	d9801a04 	addi	r6,sp,104
    b934:	da402c15 	stw	r9,176(sp)
    b938:	000a8880 	call	a888 <__sprint_r.part.0>
    b93c:	da402c17 	ldw	r9,176(sp)
    b940:	103f6a1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b944:	d9401b17 	ldw	r5,108(sp)
    b948:	d8801c17 	ldw	r2,112(sp)
    b94c:	d811883a 	mov	r8,sp
    b950:	29000044 	addi	r4,r5,1
    b954:	003f1006 	br	b598 <__alt_data_end+0xff00b598>
    b958:	1000c31e 	bne	r2,zero,bc68 <___vfiprintf_internal_r+0x12cc>
    b95c:	01000044 	movi	r4,1
    b960:	000b883a 	mov	r5,zero
    b964:	d811883a 	mov	r8,sp
    b968:	003f0d06 	br	b5a0 <__alt_data_end+0xff00b5a0>
    b96c:	d9402117 	ldw	r5,132(sp)
    b970:	d9002017 	ldw	r4,128(sp)
    b974:	d9801a04 	addi	r6,sp,104
    b978:	000a8880 	call	a888 <__sprint_r.part.0>
    b97c:	103f5b1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    b980:	d9001b17 	ldw	r4,108(sp)
    b984:	d8801c17 	ldw	r2,112(sp)
    b988:	d811883a 	mov	r8,sp
    b98c:	21000044 	addi	r4,r4,1
    b990:	003d8006 	br	af94 <__alt_data_end+0xff00af94>
    b994:	01000074 	movhi	r4,1
    b998:	21088704 	addi	r4,r4,8732
    b99c:	d9002615 	stw	r4,152(sp)
    b9a0:	d8c02215 	stw	r3,136(sp)
    b9a4:	1029883a 	mov	r20,r2
    b9a8:	94c4b03a 	or	r2,r18,r19
    b9ac:	103fb21e 	bne	r2,zero,b878 <__alt_data_end+0xff00b878>
    b9b0:	0039883a 	mov	fp,zero
    b9b4:	00800084 	movi	r2,2
    b9b8:	003e6b06 	br	b368 <__alt_data_end+0xff00b368>
    b9bc:	da802217 	ldw	r10,136(sp)
    b9c0:	d8001d85 	stb	zero,118(sp)
    b9c4:	0027883a 	mov	r19,zero
    b9c8:	50800104 	addi	r2,r10,4
    b9cc:	54800017 	ldw	r18,0(r10)
    b9d0:	483e6016 	blt	r9,zero,b354 <__alt_data_end+0xff00b354>
    b9d4:	00ffdfc4 	movi	r3,-129
    b9d8:	d8802215 	stw	r2,136(sp)
    b9dc:	a0e8703a 	and	r20,r20,r3
    b9e0:	0039883a 	mov	fp,zero
    b9e4:	903ebb26 	beq	r18,zero,b4d4 <__alt_data_end+0xff00b4d4>
    b9e8:	00800244 	movi	r2,9
    b9ec:	14bdee36 	bltu	r2,r18,b1a8 <__alt_data_end+0xff00b1a8>
    b9f0:	003eba06 	br	b4dc <__alt_data_end+0xff00b4dc>
    b9f4:	00800c04 	movi	r2,48
    b9f8:	d8c01d45 	stb	r3,117(sp)
    b9fc:	d8801d05 	stb	r2,116(sp)
    ba00:	d8001d85 	stb	zero,118(sp)
    ba04:	a0c00094 	ori	r3,r20,2
    ba08:	4800a916 	blt	r9,zero,bcb0 <___vfiprintf_internal_r+0x1314>
    ba0c:	00bfdfc4 	movi	r2,-129
    ba10:	a096703a 	and	r11,r20,r2
    ba14:	5d000094 	ori	r20,r11,2
    ba18:	0039883a 	mov	fp,zero
    ba1c:	003f9706 	br	b87c <__alt_data_end+0xff00b87c>
    ba20:	8025883a 	mov	r18,r16
    ba24:	003c2e06 	br	aae0 <__alt_data_end+0xff00aae0>
    ba28:	00800074 	movhi	r2,1
    ba2c:	10888704 	addi	r2,r2,8732
    ba30:	0039883a 	mov	fp,zero
    ba34:	d8802615 	stw	r2,152(sp)
    ba38:	003f9006 	br	b87c <__alt_data_end+0xff00b87c>
    ba3c:	04a5c83a 	sub	r18,zero,r18
    ba40:	07000b44 	movi	fp,45
    ba44:	9004c03a 	cmpne	r2,r18,zero
    ba48:	04e7c83a 	sub	r19,zero,r19
    ba4c:	df001d85 	stb	fp,118(sp)
    ba50:	98a7c83a 	sub	r19,r19,r2
    ba54:	48009f16 	blt	r9,zero,bcd4 <___vfiprintf_internal_r+0x1338>
    ba58:	00bfdfc4 	movi	r2,-129
    ba5c:	a0a8703a 	and	r20,r20,r2
    ba60:	003dd006 	br	b1a4 <__alt_data_end+0xff00b1a4>
    ba64:	70004c26 	beq	r14,zero,bb98 <___vfiprintf_internal_r+0x11fc>
    ba68:	00800084 	movi	r2,2
    ba6c:	d8c01d04 	addi	r3,sp,116
    ba70:	d8c00015 	stw	r3,0(sp)
    ba74:	d8800115 	stw	r2,4(sp)
    ba78:	01000044 	movi	r4,1
    ba7c:	d811883a 	mov	r8,sp
    ba80:	003f7306 	br	b850 <__alt_data_end+0xff00b850>
    ba84:	a080100c 	andi	r2,r20,64
    ba88:	da802217 	ldw	r10,136(sp)
    ba8c:	103e0626 	beq	r2,zero,b2a8 <__alt_data_end+0xff00b2a8>
    ba90:	5480000f 	ldh	r18,0(r10)
    ba94:	52800104 	addi	r10,r10,4
    ba98:	da802215 	stw	r10,136(sp)
    ba9c:	9027d7fa 	srai	r19,r18,31
    baa0:	9805883a 	mov	r2,r19
    baa4:	003db806 	br	b188 <__alt_data_end+0xff00b188>
    baa8:	a080040c 	andi	r2,r20,16
    baac:	1000091e 	bne	r2,zero,bad4 <___vfiprintf_internal_r+0x1138>
    bab0:	a2c0100c 	andi	r11,r20,64
    bab4:	58000726 	beq	r11,zero,bad4 <___vfiprintf_internal_r+0x1138>
    bab8:	da802217 	ldw	r10,136(sp)
    babc:	50800017 	ldw	r2,0(r10)
    bac0:	52800104 	addi	r10,r10,4
    bac4:	da802215 	stw	r10,136(sp)
    bac8:	da802317 	ldw	r10,140(sp)
    bacc:	1280000d 	sth	r10,0(r2)
    bad0:	003be706 	br	aa70 <__alt_data_end+0xff00aa70>
    bad4:	da802217 	ldw	r10,136(sp)
    bad8:	50800017 	ldw	r2,0(r10)
    badc:	52800104 	addi	r10,r10,4
    bae0:	da802215 	stw	r10,136(sp)
    bae4:	da802317 	ldw	r10,140(sp)
    bae8:	12800015 	stw	r10,0(r2)
    baec:	003be006 	br	aa70 <__alt_data_end+0xff00aa70>
    baf0:	a080100c 	andi	r2,r20,64
    baf4:	da802217 	ldw	r10,136(sp)
    baf8:	10003026 	beq	r2,zero,bbbc <___vfiprintf_internal_r+0x1220>
    bafc:	5480000b 	ldhu	r18,0(r10)
    bb00:	52800104 	addi	r10,r10,4
    bb04:	0027883a 	mov	r19,zero
    bb08:	da802215 	stw	r10,136(sp)
    bb0c:	003d8006 	br	b110 <__alt_data_end+0xff00b110>
    bb10:	80c00007 	ldb	r3,0(r16)
    bb14:	003c0006 	br	ab18 <__alt_data_end+0xff00ab18>
    bb18:	a080100c 	andi	r2,r20,64
    bb1c:	d8001d85 	stb	zero,118(sp)
    bb20:	da802217 	ldw	r10,136(sp)
    bb24:	1000201e 	bne	r2,zero,bba8 <___vfiprintf_internal_r+0x120c>
    bb28:	50800104 	addi	r2,r10,4
    bb2c:	54800017 	ldw	r18,0(r10)
    bb30:	0027883a 	mov	r19,zero
    bb34:	483def0e 	bge	r9,zero,b2f4 <__alt_data_end+0xff00b2f4>
    bb38:	94c6b03a 	or	r3,r18,r19
    bb3c:	d8802215 	stw	r2,136(sp)
    bb40:	183d4e1e 	bne	r3,zero,b07c <__alt_data_end+0xff00b07c>
    bb44:	0039883a 	mov	fp,zero
    bb48:	0005883a 	mov	r2,zero
    bb4c:	003e0606 	br	b368 <__alt_data_end+0xff00b368>
    bb50:	d9402117 	ldw	r5,132(sp)
    bb54:	d9002017 	ldw	r4,128(sp)
    bb58:	d9801a04 	addi	r6,sp,104
    bb5c:	da402c15 	stw	r9,176(sp)
    bb60:	db802a15 	stw	r14,168(sp)
    bb64:	000a8880 	call	a888 <__sprint_r.part.0>
    bb68:	da402c17 	ldw	r9,176(sp)
    bb6c:	db802a17 	ldw	r14,168(sp)
    bb70:	103ede1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    bb74:	d9401b17 	ldw	r5,108(sp)
    bb78:	d8801c17 	ldw	r2,112(sp)
    bb7c:	d811883a 	mov	r8,sp
    bb80:	29000044 	addi	r4,r5,1
    bb84:	003e7406 	br	b558 <__alt_data_end+0xff00b558>
    bb88:	00bfffc4 	movi	r2,-1
    bb8c:	003c5806 	br	acf0 <__alt_data_end+0xff00acf0>
    bb90:	d811883a 	mov	r8,sp
    bb94:	003ee806 	br	b738 <__alt_data_end+0xff00b738>
    bb98:	000b883a 	mov	r5,zero
    bb9c:	01000044 	movi	r4,1
    bba0:	d811883a 	mov	r8,sp
    bba4:	003e7c06 	br	b598 <__alt_data_end+0xff00b598>
    bba8:	50800104 	addi	r2,r10,4
    bbac:	5480000b 	ldhu	r18,0(r10)
    bbb0:	0027883a 	mov	r19,zero
    bbb4:	483dcf0e 	bge	r9,zero,b2f4 <__alt_data_end+0xff00b2f4>
    bbb8:	003fdf06 	br	bb38 <__alt_data_end+0xff00bb38>
    bbbc:	54800017 	ldw	r18,0(r10)
    bbc0:	52800104 	addi	r10,r10,4
    bbc4:	0027883a 	mov	r19,zero
    bbc8:	da802215 	stw	r10,136(sp)
    bbcc:	003d5006 	br	b110 <__alt_data_end+0xff00b110>
    bbd0:	50800104 	addi	r2,r10,4
    bbd4:	5480000b 	ldhu	r18,0(r10)
    bbd8:	0027883a 	mov	r19,zero
    bbdc:	483f7d0e 	bge	r9,zero,b9d4 <__alt_data_end+0xff00b9d4>
    bbe0:	003ddc06 	br	b354 <__alt_data_end+0xff00b354>
    bbe4:	d8c02215 	stw	r3,136(sp)
    bbe8:	0039883a 	mov	fp,zero
    bbec:	003ddb06 	br	b35c <__alt_data_end+0xff00b35c>
    bbf0:	02800074 	movhi	r10,1
    bbf4:	5288e804 	addi	r10,r10,9120
    bbf8:	da802415 	stw	r10,144(sp)
    bbfc:	003e8306 	br	b60c <__alt_data_end+0xff00b60c>
    bc00:	d8801c17 	ldw	r2,112(sp)
    bc04:	dd002117 	ldw	r20,132(sp)
    bc08:	103eb926 	beq	r2,zero,b6f0 <__alt_data_end+0xff00b6f0>
    bc0c:	d9002017 	ldw	r4,128(sp)
    bc10:	d9801a04 	addi	r6,sp,104
    bc14:	a00b883a 	mov	r5,r20
    bc18:	000a8880 	call	a888 <__sprint_r.part.0>
    bc1c:	003eb406 	br	b6f0 <__alt_data_end+0xff00b6f0>
    bc20:	80c00043 	ldbu	r3,1(r16)
    bc24:	a5000814 	ori	r20,r20,32
    bc28:	84000044 	addi	r16,r16,1
    bc2c:	18c03fcc 	andi	r3,r3,255
    bc30:	18c0201c 	xori	r3,r3,128
    bc34:	18ffe004 	addi	r3,r3,-128
    bc38:	003bb706 	br	ab18 <__alt_data_end+0xff00ab18>
    bc3c:	a809883a 	mov	r4,r21
    bc40:	d8c02a15 	stw	r3,168(sp)
    bc44:	da002b15 	stw	r8,172(sp)
    bc48:	0003b500 	call	3b50 <strlen>
    bc4c:	d8c02a17 	ldw	r3,168(sp)
    bc50:	1027883a 	mov	r19,r2
    bc54:	df001d83 	ldbu	fp,118(sp)
    bc58:	d8c02215 	stw	r3,136(sp)
    bc5c:	0013883a 	mov	r9,zero
    bc60:	da002b17 	ldw	r8,172(sp)
    bc64:	003c4d06 	br	ad9c <__alt_data_end+0xff00ad9c>
    bc68:	d9402117 	ldw	r5,132(sp)
    bc6c:	d9002017 	ldw	r4,128(sp)
    bc70:	d9801a04 	addi	r6,sp,104
    bc74:	da402c15 	stw	r9,176(sp)
    bc78:	000a8880 	call	a888 <__sprint_r.part.0>
    bc7c:	da402c17 	ldw	r9,176(sp)
    bc80:	103e9a1e 	bne	r2,zero,b6ec <__alt_data_end+0xff00b6ec>
    bc84:	d9401b17 	ldw	r5,108(sp)
    bc88:	d8801c17 	ldw	r2,112(sp)
    bc8c:	d811883a 	mov	r8,sp
    bc90:	29000044 	addi	r4,r5,1
    bc94:	003e4206 	br	b5a0 <__alt_data_end+0xff00b5a0>
    bc98:	d9401b17 	ldw	r5,108(sp)
    bc9c:	01000074 	movhi	r4,1
    bca0:	2108ec04 	addi	r4,r4,9136
    bca4:	d9002415 	stw	r4,144(sp)
    bca8:	29400044 	addi	r5,r5,1
    bcac:	003c6d06 	br	ae64 <__alt_data_end+0xff00ae64>
    bcb0:	0039883a 	mov	fp,zero
    bcb4:	00800084 	movi	r2,2
    bcb8:	10803fcc 	andi	r2,r2,255
    bcbc:	01000044 	movi	r4,1
    bcc0:	11001e26 	beq	r2,r4,bd3c <___vfiprintf_internal_r+0x13a0>
    bcc4:	01000084 	movi	r4,2
    bcc8:	11001e1e 	bne	r2,r4,bd44 <___vfiprintf_internal_r+0x13a8>
    bccc:	1829883a 	mov	r20,r3
    bcd0:	003eea06 	br	b87c <__alt_data_end+0xff00b87c>
    bcd4:	a007883a 	mov	r3,r20
    bcd8:	00800044 	movi	r2,1
    bcdc:	003ff606 	br	bcb8 <__alt_data_end+0xff00bcb8>
    bce0:	00800184 	movi	r2,6
    bce4:	1240012e 	bgeu	r2,r9,bcec <___vfiprintf_internal_r+0x1350>
    bce8:	1013883a 	mov	r9,r2
    bcec:	4827883a 	mov	r19,r9
    bcf0:	4825883a 	mov	r18,r9
    bcf4:	48001516 	blt	r9,zero,bd4c <___vfiprintf_internal_r+0x13b0>
    bcf8:	05400074 	movhi	r21,1
    bcfc:	d8c02215 	stw	r3,136(sp)
    bd00:	ad488c04 	addi	r21,r21,8752
    bd04:	003d1406 	br	b158 <__alt_data_end+0xff00b158>
    bd08:	02800074 	movhi	r10,1
    bd0c:	5288e804 	addi	r10,r10,9120
    bd10:	da802415 	stw	r10,144(sp)
    bd14:	200d883a 	mov	r6,r4
    bd18:	003c9106 	br	af60 <__alt_data_end+0xff00af60>
    bd1c:	5021883a 	mov	r16,r10
    bd20:	0013883a 	mov	r9,zero
    bd24:	003b7d06 	br	ab1c <__alt_data_end+0xff00ab1c>
    bd28:	4827883a 	mov	r19,r9
    bd2c:	df001d83 	ldbu	fp,118(sp)
    bd30:	d8c02215 	stw	r3,136(sp)
    bd34:	0013883a 	mov	r9,zero
    bd38:	003c1806 	br	ad9c <__alt_data_end+0xff00ad9c>
    bd3c:	1829883a 	mov	r20,r3
    bd40:	003d1806 	br	b1a4 <__alt_data_end+0xff00b1a4>
    bd44:	1829883a 	mov	r20,r3
    bd48:	003ccd06 	br	b080 <__alt_data_end+0xff00b080>
    bd4c:	0025883a 	mov	r18,zero
    bd50:	003fe906 	br	bcf8 <__alt_data_end+0xff00bcf8>
    bd54:	d8802217 	ldw	r2,136(sp)
    bd58:	80c00043 	ldbu	r3,1(r16)
    bd5c:	5021883a 	mov	r16,r10
    bd60:	12400017 	ldw	r9,0(r2)
    bd64:	10800104 	addi	r2,r2,4
    bd68:	d8802215 	stw	r2,136(sp)
    bd6c:	483faf0e 	bge	r9,zero,bc2c <__alt_data_end+0xff00bc2c>
    bd70:	18c03fcc 	andi	r3,r3,255
    bd74:	18c0201c 	xori	r3,r3,128
    bd78:	027fffc4 	movi	r9,-1
    bd7c:	18ffe004 	addi	r3,r3,-128
    bd80:	003b6506 	br	ab18 <__alt_data_end+0xff00ab18>
    bd84:	d9c01d85 	stb	r7,118(sp)
    bd88:	003ca006 	br	b00c <__alt_data_end+0xff00b00c>
    bd8c:	d9c01d85 	stb	r7,118(sp)
    bd90:	003cad06 	br	b048 <__alt_data_end+0xff00b048>
    bd94:	d9c01d85 	stb	r7,118(sp)
    bd98:	003d7d06 	br	b390 <__alt_data_end+0xff00b390>
    bd9c:	d9c01d85 	stb	r7,118(sp)
    bda0:	003d5f06 	br	b320 <__alt_data_end+0xff00b320>
    bda4:	a080004c 	andi	r2,r20,1
    bda8:	0039883a 	mov	fp,zero
    bdac:	10000526 	beq	r2,zero,bdc4 <___vfiprintf_internal_r+0x1428>
    bdb0:	00800c04 	movi	r2,48
    bdb4:	d88019c5 	stb	r2,103(sp)
    bdb8:	dcc02717 	ldw	r19,156(sp)
    bdbc:	dd4019c4 	addi	r21,sp,103
    bdc0:	003bf606 	br	ad9c <__alt_data_end+0xff00ad9c>
    bdc4:	0027883a 	mov	r19,zero
    bdc8:	dd401a04 	addi	r21,sp,104
    bdcc:	003bf306 	br	ad9c <__alt_data_end+0xff00ad9c>
    bdd0:	d9c01d85 	stb	r7,118(sp)
    bdd4:	003dc806 	br	b4f8 <__alt_data_end+0xff00b4f8>
    bdd8:	d9c01d85 	stb	r7,118(sp)
    bddc:	003d3a06 	br	b2c8 <__alt_data_end+0xff00b2c8>
    bde0:	d9c01d85 	stb	r7,118(sp)
    bde4:	003d2a06 	br	b290 <__alt_data_end+0xff00b290>
    bde8:	d9c01d85 	stb	r7,118(sp)
    bdec:	003cde06 	br	b168 <__alt_data_end+0xff00b168>
    bdf0:	d9c01d85 	stb	r7,118(sp)
    bdf4:	003cbc06 	br	b0e8 <__alt_data_end+0xff00b0e8>

0000bdf8 <__vfiprintf_internal>:
    bdf8:	00800074 	movhi	r2,1
    bdfc:	108fe904 	addi	r2,r2,16292
    be00:	300f883a 	mov	r7,r6
    be04:	280d883a 	mov	r6,r5
    be08:	200b883a 	mov	r5,r4
    be0c:	11000017 	ldw	r4,0(r2)
    be10:	000a99c1 	jmpi	a99c <___vfiprintf_internal_r>

0000be14 <__sbprintf>:
    be14:	2880030b 	ldhu	r2,12(r5)
    be18:	2ac01917 	ldw	r11,100(r5)
    be1c:	2a80038b 	ldhu	r10,14(r5)
    be20:	2a400717 	ldw	r9,28(r5)
    be24:	2a000917 	ldw	r8,36(r5)
    be28:	defee204 	addi	sp,sp,-1144
    be2c:	00c10004 	movi	r3,1024
    be30:	dc011a15 	stw	r16,1128(sp)
    be34:	10bfff4c 	andi	r2,r2,65533
    be38:	2821883a 	mov	r16,r5
    be3c:	d8cb883a 	add	r5,sp,r3
    be40:	dc811c15 	stw	r18,1136(sp)
    be44:	dc411b15 	stw	r17,1132(sp)
    be48:	dfc11d15 	stw	ra,1140(sp)
    be4c:	2025883a 	mov	r18,r4
    be50:	d881030d 	sth	r2,1036(sp)
    be54:	dac11915 	stw	r11,1124(sp)
    be58:	da81038d 	sth	r10,1038(sp)
    be5c:	da410715 	stw	r9,1052(sp)
    be60:	da010915 	stw	r8,1060(sp)
    be64:	dec10015 	stw	sp,1024(sp)
    be68:	dec10415 	stw	sp,1040(sp)
    be6c:	d8c10215 	stw	r3,1032(sp)
    be70:	d8c10515 	stw	r3,1044(sp)
    be74:	d8010615 	stw	zero,1048(sp)
    be78:	000a99c0 	call	a99c <___vfiprintf_internal_r>
    be7c:	1023883a 	mov	r17,r2
    be80:	10000416 	blt	r2,zero,be94 <__sbprintf+0x80>
    be84:	d9410004 	addi	r5,sp,1024
    be88:	9009883a 	mov	r4,r18
    be8c:	0007ab00 	call	7ab0 <_fflush_r>
    be90:	10000d1e 	bne	r2,zero,bec8 <__sbprintf+0xb4>
    be94:	d881030b 	ldhu	r2,1036(sp)
    be98:	1080100c 	andi	r2,r2,64
    be9c:	10000326 	beq	r2,zero,beac <__sbprintf+0x98>
    bea0:	8080030b 	ldhu	r2,12(r16)
    bea4:	10801014 	ori	r2,r2,64
    bea8:	8080030d 	sth	r2,12(r16)
    beac:	8805883a 	mov	r2,r17
    beb0:	dfc11d17 	ldw	ra,1140(sp)
    beb4:	dc811c17 	ldw	r18,1136(sp)
    beb8:	dc411b17 	ldw	r17,1132(sp)
    bebc:	dc011a17 	ldw	r16,1128(sp)
    bec0:	dec11e04 	addi	sp,sp,1144
    bec4:	f800283a 	ret
    bec8:	047fffc4 	movi	r17,-1
    becc:	003ff106 	br	be94 <__alt_data_end+0xff00be94>

0000bed0 <_write_r>:
    bed0:	defffd04 	addi	sp,sp,-12
    bed4:	2805883a 	mov	r2,r5
    bed8:	dc000015 	stw	r16,0(sp)
    bedc:	04000074 	movhi	r16,1
    bee0:	dc400115 	stw	r17,4(sp)
    bee4:	300b883a 	mov	r5,r6
    bee8:	84170f04 	addi	r16,r16,23612
    beec:	2023883a 	mov	r17,r4
    bef0:	380d883a 	mov	r6,r7
    bef4:	1009883a 	mov	r4,r2
    bef8:	dfc00215 	stw	ra,8(sp)
    befc:	80000015 	stw	zero,0(r16)
    bf00:	000f81c0 	call	f81c <write>
    bf04:	00ffffc4 	movi	r3,-1
    bf08:	10c00526 	beq	r2,r3,bf20 <_write_r+0x50>
    bf0c:	dfc00217 	ldw	ra,8(sp)
    bf10:	dc400117 	ldw	r17,4(sp)
    bf14:	dc000017 	ldw	r16,0(sp)
    bf18:	dec00304 	addi	sp,sp,12
    bf1c:	f800283a 	ret
    bf20:	80c00017 	ldw	r3,0(r16)
    bf24:	183ff926 	beq	r3,zero,bf0c <__alt_data_end+0xff00bf0c>
    bf28:	88c00015 	stw	r3,0(r17)
    bf2c:	003ff706 	br	bf0c <__alt_data_end+0xff00bf0c>

0000bf30 <_close_r>:
    bf30:	defffd04 	addi	sp,sp,-12
    bf34:	dc000015 	stw	r16,0(sp)
    bf38:	04000074 	movhi	r16,1
    bf3c:	dc400115 	stw	r17,4(sp)
    bf40:	84170f04 	addi	r16,r16,23612
    bf44:	2023883a 	mov	r17,r4
    bf48:	2809883a 	mov	r4,r5
    bf4c:	dfc00215 	stw	ra,8(sp)
    bf50:	80000015 	stw	zero,0(r16)
    bf54:	000ef640 	call	ef64 <close>
    bf58:	00ffffc4 	movi	r3,-1
    bf5c:	10c00526 	beq	r2,r3,bf74 <_close_r+0x44>
    bf60:	dfc00217 	ldw	ra,8(sp)
    bf64:	dc400117 	ldw	r17,4(sp)
    bf68:	dc000017 	ldw	r16,0(sp)
    bf6c:	dec00304 	addi	sp,sp,12
    bf70:	f800283a 	ret
    bf74:	80c00017 	ldw	r3,0(r16)
    bf78:	183ff926 	beq	r3,zero,bf60 <__alt_data_end+0xff00bf60>
    bf7c:	88c00015 	stw	r3,0(r17)
    bf80:	003ff706 	br	bf60 <__alt_data_end+0xff00bf60>

0000bf84 <_calloc_r>:
    bf84:	298b383a 	mul	r5,r5,r6
    bf88:	defffe04 	addi	sp,sp,-8
    bf8c:	dfc00115 	stw	ra,4(sp)
    bf90:	dc000015 	stw	r16,0(sp)
    bf94:	00031b00 	call	31b0 <_malloc_r>
    bf98:	10002926 	beq	r2,zero,c040 <_calloc_r+0xbc>
    bf9c:	11bfff17 	ldw	r6,-4(r2)
    bfa0:	1021883a 	mov	r16,r2
    bfa4:	00bfff04 	movi	r2,-4
    bfa8:	308c703a 	and	r6,r6,r2
    bfac:	00c00904 	movi	r3,36
    bfb0:	308d883a 	add	r6,r6,r2
    bfb4:	19801636 	bltu	r3,r6,c010 <_calloc_r+0x8c>
    bfb8:	008004c4 	movi	r2,19
    bfbc:	11800b2e 	bgeu	r2,r6,bfec <_calloc_r+0x68>
    bfc0:	80000015 	stw	zero,0(r16)
    bfc4:	80000115 	stw	zero,4(r16)
    bfc8:	008006c4 	movi	r2,27
    bfcc:	11801a2e 	bgeu	r2,r6,c038 <_calloc_r+0xb4>
    bfd0:	80000215 	stw	zero,8(r16)
    bfd4:	80000315 	stw	zero,12(r16)
    bfd8:	30c0151e 	bne	r6,r3,c030 <_calloc_r+0xac>
    bfdc:	80000415 	stw	zero,16(r16)
    bfe0:	80800604 	addi	r2,r16,24
    bfe4:	80000515 	stw	zero,20(r16)
    bfe8:	00000106 	br	bff0 <_calloc_r+0x6c>
    bfec:	8005883a 	mov	r2,r16
    bff0:	10000015 	stw	zero,0(r2)
    bff4:	10000115 	stw	zero,4(r2)
    bff8:	10000215 	stw	zero,8(r2)
    bffc:	8005883a 	mov	r2,r16
    c000:	dfc00117 	ldw	ra,4(sp)
    c004:	dc000017 	ldw	r16,0(sp)
    c008:	dec00204 	addi	sp,sp,8
    c00c:	f800283a 	ret
    c010:	000b883a 	mov	r5,zero
    c014:	8009883a 	mov	r4,r16
    c018:	0008f740 	call	8f74 <memset>
    c01c:	8005883a 	mov	r2,r16
    c020:	dfc00117 	ldw	ra,4(sp)
    c024:	dc000017 	ldw	r16,0(sp)
    c028:	dec00204 	addi	sp,sp,8
    c02c:	f800283a 	ret
    c030:	80800404 	addi	r2,r16,16
    c034:	003fee06 	br	bff0 <__alt_data_end+0xff00bff0>
    c038:	80800204 	addi	r2,r16,8
    c03c:	003fec06 	br	bff0 <__alt_data_end+0xff00bff0>
    c040:	0005883a 	mov	r2,zero
    c044:	003fee06 	br	c000 <__alt_data_end+0xff00c000>

0000c048 <_fclose_r>:
    c048:	28003926 	beq	r5,zero,c130 <_fclose_r+0xe8>
    c04c:	defffc04 	addi	sp,sp,-16
    c050:	dc400115 	stw	r17,4(sp)
    c054:	dc000015 	stw	r16,0(sp)
    c058:	dfc00315 	stw	ra,12(sp)
    c05c:	dc800215 	stw	r18,8(sp)
    c060:	2023883a 	mov	r17,r4
    c064:	2821883a 	mov	r16,r5
    c068:	20000226 	beq	r4,zero,c074 <_fclose_r+0x2c>
    c06c:	20800e17 	ldw	r2,56(r4)
    c070:	10002726 	beq	r2,zero,c110 <_fclose_r+0xc8>
    c074:	8080030f 	ldh	r2,12(r16)
    c078:	1000071e 	bne	r2,zero,c098 <_fclose_r+0x50>
    c07c:	0005883a 	mov	r2,zero
    c080:	dfc00317 	ldw	ra,12(sp)
    c084:	dc800217 	ldw	r18,8(sp)
    c088:	dc400117 	ldw	r17,4(sp)
    c08c:	dc000017 	ldw	r16,0(sp)
    c090:	dec00404 	addi	sp,sp,16
    c094:	f800283a 	ret
    c098:	800b883a 	mov	r5,r16
    c09c:	8809883a 	mov	r4,r17
    c0a0:	00078940 	call	7894 <__sflush_r>
    c0a4:	1025883a 	mov	r18,r2
    c0a8:	80800b17 	ldw	r2,44(r16)
    c0ac:	10000426 	beq	r2,zero,c0c0 <_fclose_r+0x78>
    c0b0:	81400717 	ldw	r5,28(r16)
    c0b4:	8809883a 	mov	r4,r17
    c0b8:	103ee83a 	callr	r2
    c0bc:	10001616 	blt	r2,zero,c118 <_fclose_r+0xd0>
    c0c0:	8080030b 	ldhu	r2,12(r16)
    c0c4:	1080200c 	andi	r2,r2,128
    c0c8:	1000151e 	bne	r2,zero,c120 <_fclose_r+0xd8>
    c0cc:	81400c17 	ldw	r5,48(r16)
    c0d0:	28000526 	beq	r5,zero,c0e8 <_fclose_r+0xa0>
    c0d4:	80801004 	addi	r2,r16,64
    c0d8:	28800226 	beq	r5,r2,c0e4 <_fclose_r+0x9c>
    c0dc:	8809883a 	mov	r4,r17
    c0e0:	00080000 	call	8000 <_free_r>
    c0e4:	80000c15 	stw	zero,48(r16)
    c0e8:	81401117 	ldw	r5,68(r16)
    c0ec:	28000326 	beq	r5,zero,c0fc <_fclose_r+0xb4>
    c0f0:	8809883a 	mov	r4,r17
    c0f4:	00080000 	call	8000 <_free_r>
    c0f8:	80001115 	stw	zero,68(r16)
    c0fc:	0007e9c0 	call	7e9c <__sfp_lock_acquire>
    c100:	8000030d 	sth	zero,12(r16)
    c104:	0007ea00 	call	7ea0 <__sfp_lock_release>
    c108:	9005883a 	mov	r2,r18
    c10c:	003fdc06 	br	c080 <__alt_data_end+0xff00c080>
    c110:	0007e8c0 	call	7e8c <__sinit>
    c114:	003fd706 	br	c074 <__alt_data_end+0xff00c074>
    c118:	04bfffc4 	movi	r18,-1
    c11c:	003fe806 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c120:	81400417 	ldw	r5,16(r16)
    c124:	8809883a 	mov	r4,r17
    c128:	00080000 	call	8000 <_free_r>
    c12c:	003fe706 	br	c0cc <__alt_data_end+0xff00c0cc>
    c130:	0005883a 	mov	r2,zero
    c134:	f800283a 	ret

0000c138 <fclose>:
    c138:	00800074 	movhi	r2,1
    c13c:	108fe904 	addi	r2,r2,16292
    c140:	200b883a 	mov	r5,r4
    c144:	11000017 	ldw	r4,0(r2)
    c148:	000c0481 	jmpi	c048 <_fclose_r>

0000c14c <__fputwc>:
    c14c:	defff804 	addi	sp,sp,-32
    c150:	dcc00415 	stw	r19,16(sp)
    c154:	dc800315 	stw	r18,12(sp)
    c158:	dc000115 	stw	r16,4(sp)
    c15c:	dfc00715 	stw	ra,28(sp)
    c160:	dd400615 	stw	r21,24(sp)
    c164:	dd000515 	stw	r20,20(sp)
    c168:	dc400215 	stw	r17,8(sp)
    c16c:	2027883a 	mov	r19,r4
    c170:	2825883a 	mov	r18,r5
    c174:	3021883a 	mov	r16,r6
    c178:	00089dc0 	call	89dc <__locale_mb_cur_max>
    c17c:	00c00044 	movi	r3,1
    c180:	10c03e26 	beq	r2,r3,c27c <__fputwc+0x130>
    c184:	81c01704 	addi	r7,r16,92
    c188:	900d883a 	mov	r6,r18
    c18c:	d80b883a 	mov	r5,sp
    c190:	9809883a 	mov	r4,r19
    c194:	000c61c0 	call	c61c <_wcrtomb_r>
    c198:	1029883a 	mov	r20,r2
    c19c:	00bfffc4 	movi	r2,-1
    c1a0:	a0802026 	beq	r20,r2,c224 <__fputwc+0xd8>
    c1a4:	d9400003 	ldbu	r5,0(sp)
    c1a8:	a0001c26 	beq	r20,zero,c21c <__fputwc+0xd0>
    c1ac:	0023883a 	mov	r17,zero
    c1b0:	05400284 	movi	r21,10
    c1b4:	00000906 	br	c1dc <__fputwc+0x90>
    c1b8:	80800017 	ldw	r2,0(r16)
    c1bc:	11400005 	stb	r5,0(r2)
    c1c0:	80c00017 	ldw	r3,0(r16)
    c1c4:	18c00044 	addi	r3,r3,1
    c1c8:	80c00015 	stw	r3,0(r16)
    c1cc:	8c400044 	addi	r17,r17,1
    c1d0:	dc45883a 	add	r2,sp,r17
    c1d4:	8d00112e 	bgeu	r17,r20,c21c <__fputwc+0xd0>
    c1d8:	11400003 	ldbu	r5,0(r2)
    c1dc:	80c00217 	ldw	r3,8(r16)
    c1e0:	18ffffc4 	addi	r3,r3,-1
    c1e4:	80c00215 	stw	r3,8(r16)
    c1e8:	183ff30e 	bge	r3,zero,c1b8 <__alt_data_end+0xff00c1b8>
    c1ec:	80800617 	ldw	r2,24(r16)
    c1f0:	18801916 	blt	r3,r2,c258 <__fputwc+0x10c>
    c1f4:	80800017 	ldw	r2,0(r16)
    c1f8:	11400005 	stb	r5,0(r2)
    c1fc:	80800017 	ldw	r2,0(r16)
    c200:	10c00003 	ldbu	r3,0(r2)
    c204:	10800044 	addi	r2,r2,1
    c208:	1d402326 	beq	r3,r21,c298 <__fputwc+0x14c>
    c20c:	80800015 	stw	r2,0(r16)
    c210:	8c400044 	addi	r17,r17,1
    c214:	dc45883a 	add	r2,sp,r17
    c218:	8d3fef36 	bltu	r17,r20,c1d8 <__alt_data_end+0xff00c1d8>
    c21c:	9005883a 	mov	r2,r18
    c220:	00000406 	br	c234 <__fputwc+0xe8>
    c224:	80c0030b 	ldhu	r3,12(r16)
    c228:	a005883a 	mov	r2,r20
    c22c:	18c01014 	ori	r3,r3,64
    c230:	80c0030d 	sth	r3,12(r16)
    c234:	dfc00717 	ldw	ra,28(sp)
    c238:	dd400617 	ldw	r21,24(sp)
    c23c:	dd000517 	ldw	r20,20(sp)
    c240:	dcc00417 	ldw	r19,16(sp)
    c244:	dc800317 	ldw	r18,12(sp)
    c248:	dc400217 	ldw	r17,8(sp)
    c24c:	dc000117 	ldw	r16,4(sp)
    c250:	dec00804 	addi	sp,sp,32
    c254:	f800283a 	ret
    c258:	800d883a 	mov	r6,r16
    c25c:	29403fcc 	andi	r5,r5,255
    c260:	9809883a 	mov	r4,r19
    c264:	000c4c40 	call	c4c4 <__swbuf_r>
    c268:	10bfffe0 	cmpeqi	r2,r2,-1
    c26c:	10803fcc 	andi	r2,r2,255
    c270:	103fd626 	beq	r2,zero,c1cc <__alt_data_end+0xff00c1cc>
    c274:	00bfffc4 	movi	r2,-1
    c278:	003fee06 	br	c234 <__alt_data_end+0xff00c234>
    c27c:	90ffffc4 	addi	r3,r18,-1
    c280:	01003f84 	movi	r4,254
    c284:	20ffbf36 	bltu	r4,r3,c184 <__alt_data_end+0xff00c184>
    c288:	900b883a 	mov	r5,r18
    c28c:	dc800005 	stb	r18,0(sp)
    c290:	1029883a 	mov	r20,r2
    c294:	003fc506 	br	c1ac <__alt_data_end+0xff00c1ac>
    c298:	800d883a 	mov	r6,r16
    c29c:	a80b883a 	mov	r5,r21
    c2a0:	9809883a 	mov	r4,r19
    c2a4:	000c4c40 	call	c4c4 <__swbuf_r>
    c2a8:	10bfffe0 	cmpeqi	r2,r2,-1
    c2ac:	003fef06 	br	c26c <__alt_data_end+0xff00c26c>

0000c2b0 <_fputwc_r>:
    c2b0:	3080030b 	ldhu	r2,12(r6)
    c2b4:	10c8000c 	andi	r3,r2,8192
    c2b8:	1800051e 	bne	r3,zero,c2d0 <_fputwc_r+0x20>
    c2bc:	30c01917 	ldw	r3,100(r6)
    c2c0:	10880014 	ori	r2,r2,8192
    c2c4:	3080030d 	sth	r2,12(r6)
    c2c8:	18880014 	ori	r2,r3,8192
    c2cc:	30801915 	stw	r2,100(r6)
    c2d0:	000c14c1 	jmpi	c14c <__fputwc>

0000c2d4 <fputwc>:
    c2d4:	00800074 	movhi	r2,1
    c2d8:	defffc04 	addi	sp,sp,-16
    c2dc:	108fe904 	addi	r2,r2,16292
    c2e0:	dc000115 	stw	r16,4(sp)
    c2e4:	14000017 	ldw	r16,0(r2)
    c2e8:	dc400215 	stw	r17,8(sp)
    c2ec:	dfc00315 	stw	ra,12(sp)
    c2f0:	2023883a 	mov	r17,r4
    c2f4:	80000226 	beq	r16,zero,c300 <fputwc+0x2c>
    c2f8:	80800e17 	ldw	r2,56(r16)
    c2fc:	10001026 	beq	r2,zero,c340 <fputwc+0x6c>
    c300:	2880030b 	ldhu	r2,12(r5)
    c304:	10c8000c 	andi	r3,r2,8192
    c308:	1800051e 	bne	r3,zero,c320 <fputwc+0x4c>
    c30c:	28c01917 	ldw	r3,100(r5)
    c310:	10880014 	ori	r2,r2,8192
    c314:	2880030d 	sth	r2,12(r5)
    c318:	18880014 	ori	r2,r3,8192
    c31c:	28801915 	stw	r2,100(r5)
    c320:	280d883a 	mov	r6,r5
    c324:	8009883a 	mov	r4,r16
    c328:	880b883a 	mov	r5,r17
    c32c:	dfc00317 	ldw	ra,12(sp)
    c330:	dc400217 	ldw	r17,8(sp)
    c334:	dc000117 	ldw	r16,4(sp)
    c338:	dec00404 	addi	sp,sp,16
    c33c:	000c14c1 	jmpi	c14c <__fputwc>
    c340:	8009883a 	mov	r4,r16
    c344:	d9400015 	stw	r5,0(sp)
    c348:	0007e8c0 	call	7e8c <__sinit>
    c34c:	d9400017 	ldw	r5,0(sp)
    c350:	003feb06 	br	c300 <__alt_data_end+0xff00c300>

0000c354 <_fstat_r>:
    c354:	defffd04 	addi	sp,sp,-12
    c358:	2805883a 	mov	r2,r5
    c35c:	dc000015 	stw	r16,0(sp)
    c360:	04000074 	movhi	r16,1
    c364:	dc400115 	stw	r17,4(sp)
    c368:	84170f04 	addi	r16,r16,23612
    c36c:	2023883a 	mov	r17,r4
    c370:	300b883a 	mov	r5,r6
    c374:	1009883a 	mov	r4,r2
    c378:	dfc00215 	stw	ra,8(sp)
    c37c:	80000015 	stw	zero,0(r16)
    c380:	000f09c0 	call	f09c <fstat>
    c384:	00ffffc4 	movi	r3,-1
    c388:	10c00526 	beq	r2,r3,c3a0 <_fstat_r+0x4c>
    c38c:	dfc00217 	ldw	ra,8(sp)
    c390:	dc400117 	ldw	r17,4(sp)
    c394:	dc000017 	ldw	r16,0(sp)
    c398:	dec00304 	addi	sp,sp,12
    c39c:	f800283a 	ret
    c3a0:	80c00017 	ldw	r3,0(r16)
    c3a4:	183ff926 	beq	r3,zero,c38c <__alt_data_end+0xff00c38c>
    c3a8:	88c00015 	stw	r3,0(r17)
    c3ac:	003ff706 	br	c38c <__alt_data_end+0xff00c38c>

0000c3b0 <_isatty_r>:
    c3b0:	defffd04 	addi	sp,sp,-12
    c3b4:	dc000015 	stw	r16,0(sp)
    c3b8:	04000074 	movhi	r16,1
    c3bc:	dc400115 	stw	r17,4(sp)
    c3c0:	84170f04 	addi	r16,r16,23612
    c3c4:	2023883a 	mov	r17,r4
    c3c8:	2809883a 	mov	r4,r5
    c3cc:	dfc00215 	stw	ra,8(sp)
    c3d0:	80000015 	stw	zero,0(r16)
    c3d4:	000f1880 	call	f188 <isatty>
    c3d8:	00ffffc4 	movi	r3,-1
    c3dc:	10c00526 	beq	r2,r3,c3f4 <_isatty_r+0x44>
    c3e0:	dfc00217 	ldw	ra,8(sp)
    c3e4:	dc400117 	ldw	r17,4(sp)
    c3e8:	dc000017 	ldw	r16,0(sp)
    c3ec:	dec00304 	addi	sp,sp,12
    c3f0:	f800283a 	ret
    c3f4:	80c00017 	ldw	r3,0(r16)
    c3f8:	183ff926 	beq	r3,zero,c3e0 <__alt_data_end+0xff00c3e0>
    c3fc:	88c00015 	stw	r3,0(r17)
    c400:	003ff706 	br	c3e0 <__alt_data_end+0xff00c3e0>

0000c404 <_lseek_r>:
    c404:	defffd04 	addi	sp,sp,-12
    c408:	2805883a 	mov	r2,r5
    c40c:	dc000015 	stw	r16,0(sp)
    c410:	04000074 	movhi	r16,1
    c414:	dc400115 	stw	r17,4(sp)
    c418:	300b883a 	mov	r5,r6
    c41c:	84170f04 	addi	r16,r16,23612
    c420:	2023883a 	mov	r17,r4
    c424:	380d883a 	mov	r6,r7
    c428:	1009883a 	mov	r4,r2
    c42c:	dfc00215 	stw	ra,8(sp)
    c430:	80000015 	stw	zero,0(r16)
    c434:	000f3540 	call	f354 <lseek>
    c438:	00ffffc4 	movi	r3,-1
    c43c:	10c00526 	beq	r2,r3,c454 <_lseek_r+0x50>
    c440:	dfc00217 	ldw	ra,8(sp)
    c444:	dc400117 	ldw	r17,4(sp)
    c448:	dc000017 	ldw	r16,0(sp)
    c44c:	dec00304 	addi	sp,sp,12
    c450:	f800283a 	ret
    c454:	80c00017 	ldw	r3,0(r16)
    c458:	183ff926 	beq	r3,zero,c440 <__alt_data_end+0xff00c440>
    c45c:	88c00015 	stw	r3,0(r17)
    c460:	003ff706 	br	c440 <__alt_data_end+0xff00c440>

0000c464 <_read_r>:
    c464:	defffd04 	addi	sp,sp,-12
    c468:	2805883a 	mov	r2,r5
    c46c:	dc000015 	stw	r16,0(sp)
    c470:	04000074 	movhi	r16,1
    c474:	dc400115 	stw	r17,4(sp)
    c478:	300b883a 	mov	r5,r6
    c47c:	84170f04 	addi	r16,r16,23612
    c480:	2023883a 	mov	r17,r4
    c484:	380d883a 	mov	r6,r7
    c488:	1009883a 	mov	r4,r2
    c48c:	dfc00215 	stw	ra,8(sp)
    c490:	80000015 	stw	zero,0(r16)
    c494:	000f5280 	call	f528 <read>
    c498:	00ffffc4 	movi	r3,-1
    c49c:	10c00526 	beq	r2,r3,c4b4 <_read_r+0x50>
    c4a0:	dfc00217 	ldw	ra,8(sp)
    c4a4:	dc400117 	ldw	r17,4(sp)
    c4a8:	dc000017 	ldw	r16,0(sp)
    c4ac:	dec00304 	addi	sp,sp,12
    c4b0:	f800283a 	ret
    c4b4:	80c00017 	ldw	r3,0(r16)
    c4b8:	183ff926 	beq	r3,zero,c4a0 <__alt_data_end+0xff00c4a0>
    c4bc:	88c00015 	stw	r3,0(r17)
    c4c0:	003ff706 	br	c4a0 <__alt_data_end+0xff00c4a0>

0000c4c4 <__swbuf_r>:
    c4c4:	defffb04 	addi	sp,sp,-20
    c4c8:	dcc00315 	stw	r19,12(sp)
    c4cc:	dc800215 	stw	r18,8(sp)
    c4d0:	dc000015 	stw	r16,0(sp)
    c4d4:	dfc00415 	stw	ra,16(sp)
    c4d8:	dc400115 	stw	r17,4(sp)
    c4dc:	2025883a 	mov	r18,r4
    c4e0:	2827883a 	mov	r19,r5
    c4e4:	3021883a 	mov	r16,r6
    c4e8:	20000226 	beq	r4,zero,c4f4 <__swbuf_r+0x30>
    c4ec:	20800e17 	ldw	r2,56(r4)
    c4f0:	10004226 	beq	r2,zero,c5fc <__swbuf_r+0x138>
    c4f4:	80800617 	ldw	r2,24(r16)
    c4f8:	8100030b 	ldhu	r4,12(r16)
    c4fc:	80800215 	stw	r2,8(r16)
    c500:	2080020c 	andi	r2,r4,8
    c504:	10003626 	beq	r2,zero,c5e0 <__swbuf_r+0x11c>
    c508:	80c00417 	ldw	r3,16(r16)
    c50c:	18003426 	beq	r3,zero,c5e0 <__swbuf_r+0x11c>
    c510:	2088000c 	andi	r2,r4,8192
    c514:	9c403fcc 	andi	r17,r19,255
    c518:	10001a26 	beq	r2,zero,c584 <__swbuf_r+0xc0>
    c51c:	80800017 	ldw	r2,0(r16)
    c520:	81000517 	ldw	r4,20(r16)
    c524:	10c7c83a 	sub	r3,r2,r3
    c528:	1900200e 	bge	r3,r4,c5ac <__swbuf_r+0xe8>
    c52c:	18c00044 	addi	r3,r3,1
    c530:	81000217 	ldw	r4,8(r16)
    c534:	11400044 	addi	r5,r2,1
    c538:	81400015 	stw	r5,0(r16)
    c53c:	213fffc4 	addi	r4,r4,-1
    c540:	81000215 	stw	r4,8(r16)
    c544:	14c00005 	stb	r19,0(r2)
    c548:	80800517 	ldw	r2,20(r16)
    c54c:	10c01e26 	beq	r2,r3,c5c8 <__swbuf_r+0x104>
    c550:	8080030b 	ldhu	r2,12(r16)
    c554:	1080004c 	andi	r2,r2,1
    c558:	10000226 	beq	r2,zero,c564 <__swbuf_r+0xa0>
    c55c:	00800284 	movi	r2,10
    c560:	88801926 	beq	r17,r2,c5c8 <__swbuf_r+0x104>
    c564:	8805883a 	mov	r2,r17
    c568:	dfc00417 	ldw	ra,16(sp)
    c56c:	dcc00317 	ldw	r19,12(sp)
    c570:	dc800217 	ldw	r18,8(sp)
    c574:	dc400117 	ldw	r17,4(sp)
    c578:	dc000017 	ldw	r16,0(sp)
    c57c:	dec00504 	addi	sp,sp,20
    c580:	f800283a 	ret
    c584:	81401917 	ldw	r5,100(r16)
    c588:	00b7ffc4 	movi	r2,-8193
    c58c:	21080014 	ori	r4,r4,8192
    c590:	2884703a 	and	r2,r5,r2
    c594:	80801915 	stw	r2,100(r16)
    c598:	80800017 	ldw	r2,0(r16)
    c59c:	8100030d 	sth	r4,12(r16)
    c5a0:	81000517 	ldw	r4,20(r16)
    c5a4:	10c7c83a 	sub	r3,r2,r3
    c5a8:	193fe016 	blt	r3,r4,c52c <__alt_data_end+0xff00c52c>
    c5ac:	800b883a 	mov	r5,r16
    c5b0:	9009883a 	mov	r4,r18
    c5b4:	0007ab00 	call	7ab0 <_fflush_r>
    c5b8:	1000071e 	bne	r2,zero,c5d8 <__swbuf_r+0x114>
    c5bc:	80800017 	ldw	r2,0(r16)
    c5c0:	00c00044 	movi	r3,1
    c5c4:	003fda06 	br	c530 <__alt_data_end+0xff00c530>
    c5c8:	800b883a 	mov	r5,r16
    c5cc:	9009883a 	mov	r4,r18
    c5d0:	0007ab00 	call	7ab0 <_fflush_r>
    c5d4:	103fe326 	beq	r2,zero,c564 <__alt_data_end+0xff00c564>
    c5d8:	00bfffc4 	movi	r2,-1
    c5dc:	003fe206 	br	c568 <__alt_data_end+0xff00c568>
    c5e0:	800b883a 	mov	r5,r16
    c5e4:	9009883a 	mov	r4,r18
    c5e8:	0005eb80 	call	5eb8 <__swsetup_r>
    c5ec:	103ffa1e 	bne	r2,zero,c5d8 <__alt_data_end+0xff00c5d8>
    c5f0:	8100030b 	ldhu	r4,12(r16)
    c5f4:	80c00417 	ldw	r3,16(r16)
    c5f8:	003fc506 	br	c510 <__alt_data_end+0xff00c510>
    c5fc:	0007e8c0 	call	7e8c <__sinit>
    c600:	003fbc06 	br	c4f4 <__alt_data_end+0xff00c4f4>

0000c604 <__swbuf>:
    c604:	00800074 	movhi	r2,1
    c608:	108fe904 	addi	r2,r2,16292
    c60c:	280d883a 	mov	r6,r5
    c610:	200b883a 	mov	r5,r4
    c614:	11000017 	ldw	r4,0(r2)
    c618:	000c4c41 	jmpi	c4c4 <__swbuf_r>

0000c61c <_wcrtomb_r>:
    c61c:	defff604 	addi	sp,sp,-40
    c620:	00800074 	movhi	r2,1
    c624:	dc800815 	stw	r18,32(sp)
    c628:	dc400715 	stw	r17,28(sp)
    c62c:	dc000615 	stw	r16,24(sp)
    c630:	108feb04 	addi	r2,r2,16300
    c634:	dfc00915 	stw	ra,36(sp)
    c638:	2021883a 	mov	r16,r4
    c63c:	3823883a 	mov	r17,r7
    c640:	14800017 	ldw	r18,0(r2)
    c644:	28001426 	beq	r5,zero,c698 <_wcrtomb_r+0x7c>
    c648:	d9400415 	stw	r5,16(sp)
    c64c:	d9800515 	stw	r6,20(sp)
    c650:	00089d00 	call	89d0 <__locale_charset>
    c654:	d9800517 	ldw	r6,20(sp)
    c658:	d9400417 	ldw	r5,16(sp)
    c65c:	100f883a 	mov	r7,r2
    c660:	dc400015 	stw	r17,0(sp)
    c664:	8009883a 	mov	r4,r16
    c668:	903ee83a 	callr	r18
    c66c:	00ffffc4 	movi	r3,-1
    c670:	10c0031e 	bne	r2,r3,c680 <_wcrtomb_r+0x64>
    c674:	88000015 	stw	zero,0(r17)
    c678:	00c02284 	movi	r3,138
    c67c:	80c00015 	stw	r3,0(r16)
    c680:	dfc00917 	ldw	ra,36(sp)
    c684:	dc800817 	ldw	r18,32(sp)
    c688:	dc400717 	ldw	r17,28(sp)
    c68c:	dc000617 	ldw	r16,24(sp)
    c690:	dec00a04 	addi	sp,sp,40
    c694:	f800283a 	ret
    c698:	00089d00 	call	89d0 <__locale_charset>
    c69c:	100f883a 	mov	r7,r2
    c6a0:	dc400015 	stw	r17,0(sp)
    c6a4:	000d883a 	mov	r6,zero
    c6a8:	d9400104 	addi	r5,sp,4
    c6ac:	8009883a 	mov	r4,r16
    c6b0:	903ee83a 	callr	r18
    c6b4:	003fed06 	br	c66c <__alt_data_end+0xff00c66c>

0000c6b8 <wcrtomb>:
    c6b8:	defff604 	addi	sp,sp,-40
    c6bc:	00800074 	movhi	r2,1
    c6c0:	dc800615 	stw	r18,24(sp)
    c6c4:	dc400515 	stw	r17,20(sp)
    c6c8:	108fe904 	addi	r2,r2,16292
    c6cc:	dfc00915 	stw	ra,36(sp)
    c6d0:	dd000815 	stw	r20,32(sp)
    c6d4:	dcc00715 	stw	r19,28(sp)
    c6d8:	dc000415 	stw	r16,16(sp)
    c6dc:	3025883a 	mov	r18,r6
    c6e0:	14400017 	ldw	r17,0(r2)
    c6e4:	20001926 	beq	r4,zero,c74c <wcrtomb+0x94>
    c6e8:	00800074 	movhi	r2,1
    c6ec:	108feb04 	addi	r2,r2,16300
    c6f0:	15000017 	ldw	r20,0(r2)
    c6f4:	2021883a 	mov	r16,r4
    c6f8:	2827883a 	mov	r19,r5
    c6fc:	00089d00 	call	89d0 <__locale_charset>
    c700:	100f883a 	mov	r7,r2
    c704:	dc800015 	stw	r18,0(sp)
    c708:	980d883a 	mov	r6,r19
    c70c:	800b883a 	mov	r5,r16
    c710:	8809883a 	mov	r4,r17
    c714:	a03ee83a 	callr	r20
    c718:	00ffffc4 	movi	r3,-1
    c71c:	10c0031e 	bne	r2,r3,c72c <wcrtomb+0x74>
    c720:	90000015 	stw	zero,0(r18)
    c724:	00c02284 	movi	r3,138
    c728:	88c00015 	stw	r3,0(r17)
    c72c:	dfc00917 	ldw	ra,36(sp)
    c730:	dd000817 	ldw	r20,32(sp)
    c734:	dcc00717 	ldw	r19,28(sp)
    c738:	dc800617 	ldw	r18,24(sp)
    c73c:	dc400517 	ldw	r17,20(sp)
    c740:	dc000417 	ldw	r16,16(sp)
    c744:	dec00a04 	addi	sp,sp,40
    c748:	f800283a 	ret
    c74c:	00800074 	movhi	r2,1
    c750:	108feb04 	addi	r2,r2,16300
    c754:	14000017 	ldw	r16,0(r2)
    c758:	00089d00 	call	89d0 <__locale_charset>
    c75c:	100f883a 	mov	r7,r2
    c760:	dc800015 	stw	r18,0(sp)
    c764:	000d883a 	mov	r6,zero
    c768:	d9400104 	addi	r5,sp,4
    c76c:	8809883a 	mov	r4,r17
    c770:	803ee83a 	callr	r16
    c774:	003fe806 	br	c718 <__alt_data_end+0xff00c718>

0000c778 <__ascii_wctomb>:
    c778:	28000526 	beq	r5,zero,c790 <__ascii_wctomb+0x18>
    c77c:	00803fc4 	movi	r2,255
    c780:	11800536 	bltu	r2,r6,c798 <__ascii_wctomb+0x20>
    c784:	29800005 	stb	r6,0(r5)
    c788:	00800044 	movi	r2,1
    c78c:	f800283a 	ret
    c790:	0005883a 	mov	r2,zero
    c794:	f800283a 	ret
    c798:	00802284 	movi	r2,138
    c79c:	20800015 	stw	r2,0(r4)
    c7a0:	00bfffc4 	movi	r2,-1
    c7a4:	f800283a 	ret

0000c7a8 <_wctomb_r>:
    c7a8:	00800074 	movhi	r2,1
    c7ac:	defff904 	addi	sp,sp,-28
    c7b0:	108feb04 	addi	r2,r2,16300
    c7b4:	dfc00615 	stw	ra,24(sp)
    c7b8:	dc400515 	stw	r17,20(sp)
    c7bc:	dc000415 	stw	r16,16(sp)
    c7c0:	3823883a 	mov	r17,r7
    c7c4:	14000017 	ldw	r16,0(r2)
    c7c8:	d9000115 	stw	r4,4(sp)
    c7cc:	d9400215 	stw	r5,8(sp)
    c7d0:	d9800315 	stw	r6,12(sp)
    c7d4:	00089d00 	call	89d0 <__locale_charset>
    c7d8:	d9800317 	ldw	r6,12(sp)
    c7dc:	d9400217 	ldw	r5,8(sp)
    c7e0:	d9000117 	ldw	r4,4(sp)
    c7e4:	100f883a 	mov	r7,r2
    c7e8:	dc400015 	stw	r17,0(sp)
    c7ec:	803ee83a 	callr	r16
    c7f0:	dfc00617 	ldw	ra,24(sp)
    c7f4:	dc400517 	ldw	r17,20(sp)
    c7f8:	dc000417 	ldw	r16,16(sp)
    c7fc:	dec00704 	addi	sp,sp,28
    c800:	f800283a 	ret

0000c804 <__udivdi3>:
    c804:	defff504 	addi	sp,sp,-44
    c808:	dcc00415 	stw	r19,16(sp)
    c80c:	dc000115 	stw	r16,4(sp)
    c810:	dfc00a15 	stw	ra,40(sp)
    c814:	df000915 	stw	fp,36(sp)
    c818:	ddc00815 	stw	r23,32(sp)
    c81c:	dd800715 	stw	r22,28(sp)
    c820:	dd400615 	stw	r21,24(sp)
    c824:	dd000515 	stw	r20,20(sp)
    c828:	dc800315 	stw	r18,12(sp)
    c82c:	dc400215 	stw	r17,8(sp)
    c830:	2027883a 	mov	r19,r4
    c834:	2821883a 	mov	r16,r5
    c838:	3800411e 	bne	r7,zero,c940 <__udivdi3+0x13c>
    c83c:	3023883a 	mov	r17,r6
    c840:	2025883a 	mov	r18,r4
    c844:	2980522e 	bgeu	r5,r6,c990 <__udivdi3+0x18c>
    c848:	00bfffd4 	movui	r2,65535
    c84c:	282d883a 	mov	r22,r5
    c850:	1180a836 	bltu	r2,r6,caf4 <__udivdi3+0x2f0>
    c854:	00803fc4 	movi	r2,255
    c858:	1185803a 	cmpltu	r2,r2,r6
    c85c:	100490fa 	slli	r2,r2,3
    c860:	3086d83a 	srl	r3,r6,r2
    c864:	01000074 	movhi	r4,1
    c868:	21083d84 	addi	r4,r4,8438
    c86c:	20c7883a 	add	r3,r4,r3
    c870:	18c00003 	ldbu	r3,0(r3)
    c874:	1885883a 	add	r2,r3,r2
    c878:	00c00804 	movi	r3,32
    c87c:	1887c83a 	sub	r3,r3,r2
    c880:	18000526 	beq	r3,zero,c898 <__udivdi3+0x94>
    c884:	80e0983a 	sll	r16,r16,r3
    c888:	9884d83a 	srl	r2,r19,r2
    c88c:	30e2983a 	sll	r17,r6,r3
    c890:	98e4983a 	sll	r18,r19,r3
    c894:	142cb03a 	or	r22,r2,r16
    c898:	882ad43a 	srli	r21,r17,16
    c89c:	b009883a 	mov	r4,r22
    c8a0:	8d3fffcc 	andi	r20,r17,65535
    c8a4:	a80b883a 	mov	r5,r21
    c8a8:	000273c0 	call	273c <__umodsi3>
    c8ac:	b009883a 	mov	r4,r22
    c8b0:	a80b883a 	mov	r5,r21
    c8b4:	1027883a 	mov	r19,r2
    c8b8:	00026d80 	call	26d8 <__udivsi3>
    c8bc:	102d883a 	mov	r22,r2
    c8c0:	9826943a 	slli	r19,r19,16
    c8c4:	9004d43a 	srli	r2,r18,16
    c8c8:	a5a1383a 	mul	r16,r20,r22
    c8cc:	14c4b03a 	or	r2,r2,r19
    c8d0:	1400052e 	bgeu	r2,r16,c8e8 <__udivdi3+0xe4>
    c8d4:	1445883a 	add	r2,r2,r17
    c8d8:	b0ffffc4 	addi	r3,r22,-1
    c8dc:	14400136 	bltu	r2,r17,c8e4 <__udivdi3+0xe0>
    c8e0:	14012336 	bltu	r2,r16,cd70 <__udivdi3+0x56c>
    c8e4:	182d883a 	mov	r22,r3
    c8e8:	1421c83a 	sub	r16,r2,r16
    c8ec:	a80b883a 	mov	r5,r21
    c8f0:	8009883a 	mov	r4,r16
    c8f4:	000273c0 	call	273c <__umodsi3>
    c8f8:	1027883a 	mov	r19,r2
    c8fc:	a80b883a 	mov	r5,r21
    c900:	8009883a 	mov	r4,r16
    c904:	00026d80 	call	26d8 <__udivsi3>
    c908:	9826943a 	slli	r19,r19,16
    c90c:	a0a9383a 	mul	r20,r20,r2
    c910:	94bfffcc 	andi	r18,r18,65535
    c914:	94e4b03a 	or	r18,r18,r19
    c918:	9500052e 	bgeu	r18,r20,c930 <__udivdi3+0x12c>
    c91c:	8ca5883a 	add	r18,r17,r18
    c920:	10ffffc4 	addi	r3,r2,-1
    c924:	9440f136 	bltu	r18,r17,ccec <__udivdi3+0x4e8>
    c928:	9500f02e 	bgeu	r18,r20,ccec <__udivdi3+0x4e8>
    c92c:	10bfff84 	addi	r2,r2,-2
    c930:	b00c943a 	slli	r6,r22,16
    c934:	0007883a 	mov	r3,zero
    c938:	3084b03a 	or	r2,r6,r2
    c93c:	00005906 	br	caa4 <__udivdi3+0x2a0>
    c940:	29c05636 	bltu	r5,r7,ca9c <__udivdi3+0x298>
    c944:	00bfffd4 	movui	r2,65535
    c948:	11c0622e 	bgeu	r2,r7,cad4 <__udivdi3+0x2d0>
    c94c:	00804034 	movhi	r2,256
    c950:	10bfffc4 	addi	r2,r2,-1
    c954:	11c0ee36 	bltu	r2,r7,cd10 <__udivdi3+0x50c>
    c958:	00800404 	movi	r2,16
    c95c:	3886d83a 	srl	r3,r7,r2
    c960:	01000074 	movhi	r4,1
    c964:	21083d84 	addi	r4,r4,8438
    c968:	20c7883a 	add	r3,r4,r3
    c96c:	18c00003 	ldbu	r3,0(r3)
    c970:	05400804 	movi	r21,32
    c974:	1885883a 	add	r2,r3,r2
    c978:	a8abc83a 	sub	r21,r21,r2
    c97c:	a800621e 	bne	r21,zero,cb08 <__udivdi3+0x304>
    c980:	3c00e936 	bltu	r7,r16,cd28 <__udivdi3+0x524>
    c984:	9985403a 	cmpgeu	r2,r19,r6
    c988:	0007883a 	mov	r3,zero
    c98c:	00004506 	br	caa4 <__udivdi3+0x2a0>
    c990:	3000041e 	bne	r6,zero,c9a4 <__udivdi3+0x1a0>
    c994:	000b883a 	mov	r5,zero
    c998:	01000044 	movi	r4,1
    c99c:	00026d80 	call	26d8 <__udivsi3>
    c9a0:	1023883a 	mov	r17,r2
    c9a4:	00bfffd4 	movui	r2,65535
    c9a8:	14404e2e 	bgeu	r2,r17,cae4 <__udivdi3+0x2e0>
    c9ac:	00804034 	movhi	r2,256
    c9b0:	10bfffc4 	addi	r2,r2,-1
    c9b4:	1440d836 	bltu	r2,r17,cd18 <__udivdi3+0x514>
    c9b8:	00800404 	movi	r2,16
    c9bc:	8886d83a 	srl	r3,r17,r2
    c9c0:	01000074 	movhi	r4,1
    c9c4:	21083d84 	addi	r4,r4,8438
    c9c8:	20c7883a 	add	r3,r4,r3
    c9cc:	18c00003 	ldbu	r3,0(r3)
    c9d0:	1885883a 	add	r2,r3,r2
    c9d4:	00c00804 	movi	r3,32
    c9d8:	1887c83a 	sub	r3,r3,r2
    c9dc:	18008f1e 	bne	r3,zero,cc1c <__udivdi3+0x418>
    c9e0:	882ad43a 	srli	r21,r17,16
    c9e4:	8461c83a 	sub	r16,r16,r17
    c9e8:	8d3fffcc 	andi	r20,r17,65535
    c9ec:	00c00044 	movi	r3,1
    c9f0:	8009883a 	mov	r4,r16
    c9f4:	a80b883a 	mov	r5,r21
    c9f8:	d8c00015 	stw	r3,0(sp)
    c9fc:	000273c0 	call	273c <__umodsi3>
    ca00:	8009883a 	mov	r4,r16
    ca04:	a80b883a 	mov	r5,r21
    ca08:	1027883a 	mov	r19,r2
    ca0c:	00026d80 	call	26d8 <__udivsi3>
    ca10:	9826943a 	slli	r19,r19,16
    ca14:	9008d43a 	srli	r4,r18,16
    ca18:	1521383a 	mul	r16,r2,r20
    ca1c:	102d883a 	mov	r22,r2
    ca20:	24c8b03a 	or	r4,r4,r19
    ca24:	d8c00017 	ldw	r3,0(sp)
    ca28:	2400052e 	bgeu	r4,r16,ca40 <__udivdi3+0x23c>
    ca2c:	2449883a 	add	r4,r4,r17
    ca30:	b0bfffc4 	addi	r2,r22,-1
    ca34:	24400136 	bltu	r4,r17,ca3c <__udivdi3+0x238>
    ca38:	2400ca36 	bltu	r4,r16,cd64 <__udivdi3+0x560>
    ca3c:	102d883a 	mov	r22,r2
    ca40:	2421c83a 	sub	r16,r4,r16
    ca44:	a80b883a 	mov	r5,r21
    ca48:	8009883a 	mov	r4,r16
    ca4c:	d8c00015 	stw	r3,0(sp)
    ca50:	000273c0 	call	273c <__umodsi3>
    ca54:	1027883a 	mov	r19,r2
    ca58:	a80b883a 	mov	r5,r21
    ca5c:	8009883a 	mov	r4,r16
    ca60:	00026d80 	call	26d8 <__udivsi3>
    ca64:	9826943a 	slli	r19,r19,16
    ca68:	1529383a 	mul	r20,r2,r20
    ca6c:	94bfffcc 	andi	r18,r18,65535
    ca70:	94e4b03a 	or	r18,r18,r19
    ca74:	d8c00017 	ldw	r3,0(sp)
    ca78:	9500052e 	bgeu	r18,r20,ca90 <__udivdi3+0x28c>
    ca7c:	8ca5883a 	add	r18,r17,r18
    ca80:	113fffc4 	addi	r4,r2,-1
    ca84:	94409736 	bltu	r18,r17,cce4 <__udivdi3+0x4e0>
    ca88:	9500962e 	bgeu	r18,r20,cce4 <__udivdi3+0x4e0>
    ca8c:	10bfff84 	addi	r2,r2,-2
    ca90:	b00c943a 	slli	r6,r22,16
    ca94:	3084b03a 	or	r2,r6,r2
    ca98:	00000206 	br	caa4 <__udivdi3+0x2a0>
    ca9c:	0007883a 	mov	r3,zero
    caa0:	0005883a 	mov	r2,zero
    caa4:	dfc00a17 	ldw	ra,40(sp)
    caa8:	df000917 	ldw	fp,36(sp)
    caac:	ddc00817 	ldw	r23,32(sp)
    cab0:	dd800717 	ldw	r22,28(sp)
    cab4:	dd400617 	ldw	r21,24(sp)
    cab8:	dd000517 	ldw	r20,20(sp)
    cabc:	dcc00417 	ldw	r19,16(sp)
    cac0:	dc800317 	ldw	r18,12(sp)
    cac4:	dc400217 	ldw	r17,8(sp)
    cac8:	dc000117 	ldw	r16,4(sp)
    cacc:	dec00b04 	addi	sp,sp,44
    cad0:	f800283a 	ret
    cad4:	00803fc4 	movi	r2,255
    cad8:	11c5803a 	cmpltu	r2,r2,r7
    cadc:	100490fa 	slli	r2,r2,3
    cae0:	003f9e06 	br	c95c <__alt_data_end+0xff00c95c>
    cae4:	00803fc4 	movi	r2,255
    cae8:	1445803a 	cmpltu	r2,r2,r17
    caec:	100490fa 	slli	r2,r2,3
    caf0:	003fb206 	br	c9bc <__alt_data_end+0xff00c9bc>
    caf4:	00804034 	movhi	r2,256
    caf8:	10bfffc4 	addi	r2,r2,-1
    cafc:	11808836 	bltu	r2,r6,cd20 <__udivdi3+0x51c>
    cb00:	00800404 	movi	r2,16
    cb04:	003f5606 	br	c860 <__alt_data_end+0xff00c860>
    cb08:	30aed83a 	srl	r23,r6,r2
    cb0c:	3d4e983a 	sll	r7,r7,r21
    cb10:	80acd83a 	srl	r22,r16,r2
    cb14:	9884d83a 	srl	r2,r19,r2
    cb18:	3deeb03a 	or	r23,r7,r23
    cb1c:	b824d43a 	srli	r18,r23,16
    cb20:	8560983a 	sll	r16,r16,r21
    cb24:	b009883a 	mov	r4,r22
    cb28:	900b883a 	mov	r5,r18
    cb2c:	3568983a 	sll	r20,r6,r21
    cb30:	1420b03a 	or	r16,r2,r16
    cb34:	000273c0 	call	273c <__umodsi3>
    cb38:	b009883a 	mov	r4,r22
    cb3c:	900b883a 	mov	r5,r18
    cb40:	1023883a 	mov	r17,r2
    cb44:	00026d80 	call	26d8 <__udivsi3>
    cb48:	8808943a 	slli	r4,r17,16
    cb4c:	bf3fffcc 	andi	fp,r23,65535
    cb50:	8006d43a 	srli	r3,r16,16
    cb54:	e0a3383a 	mul	r17,fp,r2
    cb58:	100d883a 	mov	r6,r2
    cb5c:	1906b03a 	or	r3,r3,r4
    cb60:	1c40042e 	bgeu	r3,r17,cb74 <__udivdi3+0x370>
    cb64:	1dc7883a 	add	r3,r3,r23
    cb68:	10bfffc4 	addi	r2,r2,-1
    cb6c:	1dc0752e 	bgeu	r3,r23,cd44 <__udivdi3+0x540>
    cb70:	100d883a 	mov	r6,r2
    cb74:	1c63c83a 	sub	r17,r3,r17
    cb78:	900b883a 	mov	r5,r18
    cb7c:	8809883a 	mov	r4,r17
    cb80:	d9800015 	stw	r6,0(sp)
    cb84:	000273c0 	call	273c <__umodsi3>
    cb88:	102d883a 	mov	r22,r2
    cb8c:	8809883a 	mov	r4,r17
    cb90:	900b883a 	mov	r5,r18
    cb94:	00026d80 	call	26d8 <__udivsi3>
    cb98:	b02c943a 	slli	r22,r22,16
    cb9c:	e089383a 	mul	r4,fp,r2
    cba0:	843fffcc 	andi	r16,r16,65535
    cba4:	85a0b03a 	or	r16,r16,r22
    cba8:	d9800017 	ldw	r6,0(sp)
    cbac:	8100042e 	bgeu	r16,r4,cbc0 <__udivdi3+0x3bc>
    cbb0:	85e1883a 	add	r16,r16,r23
    cbb4:	10ffffc4 	addi	r3,r2,-1
    cbb8:	85c05e2e 	bgeu	r16,r23,cd34 <__udivdi3+0x530>
    cbbc:	1805883a 	mov	r2,r3
    cbc0:	300c943a 	slli	r6,r6,16
    cbc4:	a17fffcc 	andi	r5,r20,65535
    cbc8:	a028d43a 	srli	r20,r20,16
    cbcc:	3084b03a 	or	r2,r6,r2
    cbd0:	10ffffcc 	andi	r3,r2,65535
    cbd4:	100cd43a 	srli	r6,r2,16
    cbd8:	194f383a 	mul	r7,r3,r5
    cbdc:	1d07383a 	mul	r3,r3,r20
    cbe0:	314b383a 	mul	r5,r6,r5
    cbe4:	3810d43a 	srli	r8,r7,16
    cbe8:	8121c83a 	sub	r16,r16,r4
    cbec:	1947883a 	add	r3,r3,r5
    cbf0:	40c7883a 	add	r3,r8,r3
    cbf4:	350d383a 	mul	r6,r6,r20
    cbf8:	1940022e 	bgeu	r3,r5,cc04 <__udivdi3+0x400>
    cbfc:	01000074 	movhi	r4,1
    cc00:	310d883a 	add	r6,r6,r4
    cc04:	1828d43a 	srli	r20,r3,16
    cc08:	a18d883a 	add	r6,r20,r6
    cc0c:	81803e36 	bltu	r16,r6,cd08 <__udivdi3+0x504>
    cc10:	81803826 	beq	r16,r6,ccf4 <__udivdi3+0x4f0>
    cc14:	0007883a 	mov	r3,zero
    cc18:	003fa206 	br	caa4 <__alt_data_end+0xff00caa4>
    cc1c:	88e2983a 	sll	r17,r17,r3
    cc20:	80a8d83a 	srl	r20,r16,r2
    cc24:	80e0983a 	sll	r16,r16,r3
    cc28:	882ad43a 	srli	r21,r17,16
    cc2c:	9884d83a 	srl	r2,r19,r2
    cc30:	a009883a 	mov	r4,r20
    cc34:	a80b883a 	mov	r5,r21
    cc38:	142eb03a 	or	r23,r2,r16
    cc3c:	98e4983a 	sll	r18,r19,r3
    cc40:	000273c0 	call	273c <__umodsi3>
    cc44:	a009883a 	mov	r4,r20
    cc48:	a80b883a 	mov	r5,r21
    cc4c:	1021883a 	mov	r16,r2
    cc50:	00026d80 	call	26d8 <__udivsi3>
    cc54:	1039883a 	mov	fp,r2
    cc58:	8d3fffcc 	andi	r20,r17,65535
    cc5c:	8020943a 	slli	r16,r16,16
    cc60:	b804d43a 	srli	r2,r23,16
    cc64:	a72d383a 	mul	r22,r20,fp
    cc68:	1404b03a 	or	r2,r2,r16
    cc6c:	1580062e 	bgeu	r2,r22,cc88 <__udivdi3+0x484>
    cc70:	1445883a 	add	r2,r2,r17
    cc74:	e0ffffc4 	addi	r3,fp,-1
    cc78:	14403836 	bltu	r2,r17,cd5c <__udivdi3+0x558>
    cc7c:	1580372e 	bgeu	r2,r22,cd5c <__udivdi3+0x558>
    cc80:	e73fff84 	addi	fp,fp,-2
    cc84:	1445883a 	add	r2,r2,r17
    cc88:	15adc83a 	sub	r22,r2,r22
    cc8c:	a80b883a 	mov	r5,r21
    cc90:	b009883a 	mov	r4,r22
    cc94:	000273c0 	call	273c <__umodsi3>
    cc98:	1027883a 	mov	r19,r2
    cc9c:	b009883a 	mov	r4,r22
    cca0:	a80b883a 	mov	r5,r21
    cca4:	00026d80 	call	26d8 <__udivsi3>
    cca8:	9826943a 	slli	r19,r19,16
    ccac:	a0a1383a 	mul	r16,r20,r2
    ccb0:	b93fffcc 	andi	r4,r23,65535
    ccb4:	24c8b03a 	or	r4,r4,r19
    ccb8:	2400062e 	bgeu	r4,r16,ccd4 <__udivdi3+0x4d0>
    ccbc:	2449883a 	add	r4,r4,r17
    ccc0:	10ffffc4 	addi	r3,r2,-1
    ccc4:	24402336 	bltu	r4,r17,cd54 <__udivdi3+0x550>
    ccc8:	2400222e 	bgeu	r4,r16,cd54 <__udivdi3+0x550>
    cccc:	10bfff84 	addi	r2,r2,-2
    ccd0:	2449883a 	add	r4,r4,r17
    ccd4:	e038943a 	slli	fp,fp,16
    ccd8:	2421c83a 	sub	r16,r4,r16
    ccdc:	e086b03a 	or	r3,fp,r2
    cce0:	003f4306 	br	c9f0 <__alt_data_end+0xff00c9f0>
    cce4:	2005883a 	mov	r2,r4
    cce8:	003f6906 	br	ca90 <__alt_data_end+0xff00ca90>
    ccec:	1805883a 	mov	r2,r3
    ccf0:	003f0f06 	br	c930 <__alt_data_end+0xff00c930>
    ccf4:	1806943a 	slli	r3,r3,16
    ccf8:	9d66983a 	sll	r19,r19,r21
    ccfc:	39ffffcc 	andi	r7,r7,65535
    cd00:	19c7883a 	add	r3,r3,r7
    cd04:	98ffc32e 	bgeu	r19,r3,cc14 <__alt_data_end+0xff00cc14>
    cd08:	10bfffc4 	addi	r2,r2,-1
    cd0c:	003fc106 	br	cc14 <__alt_data_end+0xff00cc14>
    cd10:	00800604 	movi	r2,24
    cd14:	003f1106 	br	c95c <__alt_data_end+0xff00c95c>
    cd18:	00800604 	movi	r2,24
    cd1c:	003f2706 	br	c9bc <__alt_data_end+0xff00c9bc>
    cd20:	00800604 	movi	r2,24
    cd24:	003ece06 	br	c860 <__alt_data_end+0xff00c860>
    cd28:	0007883a 	mov	r3,zero
    cd2c:	00800044 	movi	r2,1
    cd30:	003f5c06 	br	caa4 <__alt_data_end+0xff00caa4>
    cd34:	813fa12e 	bgeu	r16,r4,cbbc <__alt_data_end+0xff00cbbc>
    cd38:	10bfff84 	addi	r2,r2,-2
    cd3c:	85e1883a 	add	r16,r16,r23
    cd40:	003f9f06 	br	cbc0 <__alt_data_end+0xff00cbc0>
    cd44:	1c7f8a2e 	bgeu	r3,r17,cb70 <__alt_data_end+0xff00cb70>
    cd48:	31bfff84 	addi	r6,r6,-2
    cd4c:	1dc7883a 	add	r3,r3,r23
    cd50:	003f8806 	br	cb74 <__alt_data_end+0xff00cb74>
    cd54:	1805883a 	mov	r2,r3
    cd58:	003fde06 	br	ccd4 <__alt_data_end+0xff00ccd4>
    cd5c:	1839883a 	mov	fp,r3
    cd60:	003fc906 	br	cc88 <__alt_data_end+0xff00cc88>
    cd64:	b5bfff84 	addi	r22,r22,-2
    cd68:	2449883a 	add	r4,r4,r17
    cd6c:	003f3406 	br	ca40 <__alt_data_end+0xff00ca40>
    cd70:	b5bfff84 	addi	r22,r22,-2
    cd74:	1445883a 	add	r2,r2,r17
    cd78:	003edb06 	br	c8e8 <__alt_data_end+0xff00c8e8>

0000cd7c <__umoddi3>:
    cd7c:	defff404 	addi	sp,sp,-48
    cd80:	df000a15 	stw	fp,40(sp)
    cd84:	dc400315 	stw	r17,12(sp)
    cd88:	dc000215 	stw	r16,8(sp)
    cd8c:	dfc00b15 	stw	ra,44(sp)
    cd90:	ddc00915 	stw	r23,36(sp)
    cd94:	dd800815 	stw	r22,32(sp)
    cd98:	dd400715 	stw	r21,28(sp)
    cd9c:	dd000615 	stw	r20,24(sp)
    cda0:	dcc00515 	stw	r19,20(sp)
    cda4:	dc800415 	stw	r18,16(sp)
    cda8:	2021883a 	mov	r16,r4
    cdac:	2823883a 	mov	r17,r5
    cdb0:	2839883a 	mov	fp,r5
    cdb4:	38003c1e 	bne	r7,zero,cea8 <__umoddi3+0x12c>
    cdb8:	3027883a 	mov	r19,r6
    cdbc:	2029883a 	mov	r20,r4
    cdc0:	2980512e 	bgeu	r5,r6,cf08 <__umoddi3+0x18c>
    cdc4:	00bfffd4 	movui	r2,65535
    cdc8:	11809a36 	bltu	r2,r6,d034 <__umoddi3+0x2b8>
    cdcc:	01003fc4 	movi	r4,255
    cdd0:	2189803a 	cmpltu	r4,r4,r6
    cdd4:	200890fa 	slli	r4,r4,3
    cdd8:	3104d83a 	srl	r2,r6,r4
    cddc:	00c00074 	movhi	r3,1
    cde0:	18c83d84 	addi	r3,r3,8438
    cde4:	1885883a 	add	r2,r3,r2
    cde8:	10c00003 	ldbu	r3,0(r2)
    cdec:	00800804 	movi	r2,32
    cdf0:	1909883a 	add	r4,r3,r4
    cdf4:	1125c83a 	sub	r18,r2,r4
    cdf8:	90000526 	beq	r18,zero,ce10 <__umoddi3+0x94>
    cdfc:	8ca2983a 	sll	r17,r17,r18
    ce00:	8108d83a 	srl	r4,r16,r4
    ce04:	34a6983a 	sll	r19,r6,r18
    ce08:	84a8983a 	sll	r20,r16,r18
    ce0c:	2478b03a 	or	fp,r4,r17
    ce10:	982ed43a 	srli	r23,r19,16
    ce14:	e009883a 	mov	r4,fp
    ce18:	9dbfffcc 	andi	r22,r19,65535
    ce1c:	b80b883a 	mov	r5,r23
    ce20:	000273c0 	call	273c <__umodsi3>
    ce24:	e009883a 	mov	r4,fp
    ce28:	b80b883a 	mov	r5,r23
    ce2c:	102b883a 	mov	r21,r2
    ce30:	00026d80 	call	26d8 <__udivsi3>
    ce34:	a806943a 	slli	r3,r21,16
    ce38:	a008d43a 	srli	r4,r20,16
    ce3c:	b085383a 	mul	r2,r22,r2
    ce40:	20c8b03a 	or	r4,r4,r3
    ce44:	2080032e 	bgeu	r4,r2,ce54 <__umoddi3+0xd8>
    ce48:	24c9883a 	add	r4,r4,r19
    ce4c:	24c00136 	bltu	r4,r19,ce54 <__umoddi3+0xd8>
    ce50:	20811036 	bltu	r4,r2,d294 <__umoddi3+0x518>
    ce54:	20abc83a 	sub	r21,r4,r2
    ce58:	b80b883a 	mov	r5,r23
    ce5c:	a809883a 	mov	r4,r21
    ce60:	000273c0 	call	273c <__umodsi3>
    ce64:	1023883a 	mov	r17,r2
    ce68:	b80b883a 	mov	r5,r23
    ce6c:	a809883a 	mov	r4,r21
    ce70:	00026d80 	call	26d8 <__udivsi3>
    ce74:	8822943a 	slli	r17,r17,16
    ce78:	b085383a 	mul	r2,r22,r2
    ce7c:	a0ffffcc 	andi	r3,r20,65535
    ce80:	1c46b03a 	or	r3,r3,r17
    ce84:	1880042e 	bgeu	r3,r2,ce98 <__umoddi3+0x11c>
    ce88:	1cc7883a 	add	r3,r3,r19
    ce8c:	1cc00236 	bltu	r3,r19,ce98 <__umoddi3+0x11c>
    ce90:	1880012e 	bgeu	r3,r2,ce98 <__umoddi3+0x11c>
    ce94:	1cc7883a 	add	r3,r3,r19
    ce98:	1885c83a 	sub	r2,r3,r2
    ce9c:	1484d83a 	srl	r2,r2,r18
    cea0:	0007883a 	mov	r3,zero
    cea4:	00004f06 	br	cfe4 <__umoddi3+0x268>
    cea8:	29c04c36 	bltu	r5,r7,cfdc <__umoddi3+0x260>
    ceac:	00bfffd4 	movui	r2,65535
    ceb0:	11c0582e 	bgeu	r2,r7,d014 <__umoddi3+0x298>
    ceb4:	00804034 	movhi	r2,256
    ceb8:	10bfffc4 	addi	r2,r2,-1
    cebc:	11c0e736 	bltu	r2,r7,d25c <__umoddi3+0x4e0>
    cec0:	01000404 	movi	r4,16
    cec4:	3904d83a 	srl	r2,r7,r4
    cec8:	00c00074 	movhi	r3,1
    cecc:	18c83d84 	addi	r3,r3,8438
    ced0:	1885883a 	add	r2,r3,r2
    ced4:	14c00003 	ldbu	r19,0(r2)
    ced8:	00c00804 	movi	r3,32
    cedc:	9927883a 	add	r19,r19,r4
    cee0:	1ce9c83a 	sub	r20,r3,r19
    cee4:	a000581e 	bne	r20,zero,d048 <__umoddi3+0x2cc>
    cee8:	3c400136 	bltu	r7,r17,cef0 <__umoddi3+0x174>
    ceec:	8180eb36 	bltu	r16,r6,d29c <__umoddi3+0x520>
    cef0:	8185c83a 	sub	r2,r16,r6
    cef4:	89e3c83a 	sub	r17,r17,r7
    cef8:	8089803a 	cmpltu	r4,r16,r2
    cefc:	8939c83a 	sub	fp,r17,r4
    cf00:	e007883a 	mov	r3,fp
    cf04:	00003706 	br	cfe4 <__umoddi3+0x268>
    cf08:	3000041e 	bne	r6,zero,cf1c <__umoddi3+0x1a0>
    cf0c:	000b883a 	mov	r5,zero
    cf10:	01000044 	movi	r4,1
    cf14:	00026d80 	call	26d8 <__udivsi3>
    cf18:	1027883a 	mov	r19,r2
    cf1c:	00bfffd4 	movui	r2,65535
    cf20:	14c0402e 	bgeu	r2,r19,d024 <__umoddi3+0x2a8>
    cf24:	00804034 	movhi	r2,256
    cf28:	10bfffc4 	addi	r2,r2,-1
    cf2c:	14c0cd36 	bltu	r2,r19,d264 <__umoddi3+0x4e8>
    cf30:	00800404 	movi	r2,16
    cf34:	9886d83a 	srl	r3,r19,r2
    cf38:	01000074 	movhi	r4,1
    cf3c:	21083d84 	addi	r4,r4,8438
    cf40:	20c7883a 	add	r3,r4,r3
    cf44:	18c00003 	ldbu	r3,0(r3)
    cf48:	1887883a 	add	r3,r3,r2
    cf4c:	00800804 	movi	r2,32
    cf50:	10e5c83a 	sub	r18,r2,r3
    cf54:	9000901e 	bne	r18,zero,d198 <__umoddi3+0x41c>
    cf58:	982cd43a 	srli	r22,r19,16
    cf5c:	8ce3c83a 	sub	r17,r17,r19
    cf60:	9d7fffcc 	andi	r21,r19,65535
    cf64:	b00b883a 	mov	r5,r22
    cf68:	8809883a 	mov	r4,r17
    cf6c:	000273c0 	call	273c <__umodsi3>
    cf70:	8809883a 	mov	r4,r17
    cf74:	b00b883a 	mov	r5,r22
    cf78:	1021883a 	mov	r16,r2
    cf7c:	00026d80 	call	26d8 <__udivsi3>
    cf80:	8006943a 	slli	r3,r16,16
    cf84:	a008d43a 	srli	r4,r20,16
    cf88:	1545383a 	mul	r2,r2,r21
    cf8c:	20c8b03a 	or	r4,r4,r3
    cf90:	2080042e 	bgeu	r4,r2,cfa4 <__umoddi3+0x228>
    cf94:	24c9883a 	add	r4,r4,r19
    cf98:	24c00236 	bltu	r4,r19,cfa4 <__umoddi3+0x228>
    cf9c:	2080012e 	bgeu	r4,r2,cfa4 <__umoddi3+0x228>
    cfa0:	24c9883a 	add	r4,r4,r19
    cfa4:	20a1c83a 	sub	r16,r4,r2
    cfa8:	b00b883a 	mov	r5,r22
    cfac:	8009883a 	mov	r4,r16
    cfb0:	000273c0 	call	273c <__umodsi3>
    cfb4:	1023883a 	mov	r17,r2
    cfb8:	b00b883a 	mov	r5,r22
    cfbc:	8009883a 	mov	r4,r16
    cfc0:	00026d80 	call	26d8 <__udivsi3>
    cfc4:	8822943a 	slli	r17,r17,16
    cfc8:	1545383a 	mul	r2,r2,r21
    cfcc:	a53fffcc 	andi	r20,r20,65535
    cfd0:	a446b03a 	or	r3,r20,r17
    cfd4:	18bfb02e 	bgeu	r3,r2,ce98 <__alt_data_end+0xff00ce98>
    cfd8:	003fab06 	br	ce88 <__alt_data_end+0xff00ce88>
    cfdc:	2005883a 	mov	r2,r4
    cfe0:	2807883a 	mov	r3,r5
    cfe4:	dfc00b17 	ldw	ra,44(sp)
    cfe8:	df000a17 	ldw	fp,40(sp)
    cfec:	ddc00917 	ldw	r23,36(sp)
    cff0:	dd800817 	ldw	r22,32(sp)
    cff4:	dd400717 	ldw	r21,28(sp)
    cff8:	dd000617 	ldw	r20,24(sp)
    cffc:	dcc00517 	ldw	r19,20(sp)
    d000:	dc800417 	ldw	r18,16(sp)
    d004:	dc400317 	ldw	r17,12(sp)
    d008:	dc000217 	ldw	r16,8(sp)
    d00c:	dec00c04 	addi	sp,sp,48
    d010:	f800283a 	ret
    d014:	04c03fc4 	movi	r19,255
    d018:	99c9803a 	cmpltu	r4,r19,r7
    d01c:	200890fa 	slli	r4,r4,3
    d020:	003fa806 	br	cec4 <__alt_data_end+0xff00cec4>
    d024:	00803fc4 	movi	r2,255
    d028:	14c5803a 	cmpltu	r2,r2,r19
    d02c:	100490fa 	slli	r2,r2,3
    d030:	003fc006 	br	cf34 <__alt_data_end+0xff00cf34>
    d034:	00804034 	movhi	r2,256
    d038:	10bfffc4 	addi	r2,r2,-1
    d03c:	11808b36 	bltu	r2,r6,d26c <__umoddi3+0x4f0>
    d040:	01000404 	movi	r4,16
    d044:	003f6406 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d048:	34c4d83a 	srl	r2,r6,r19
    d04c:	3d0e983a 	sll	r7,r7,r20
    d050:	8cf8d83a 	srl	fp,r17,r19
    d054:	8d10983a 	sll	r8,r17,r20
    d058:	38aab03a 	or	r21,r7,r2
    d05c:	a82cd43a 	srli	r22,r21,16
    d060:	84e2d83a 	srl	r17,r16,r19
    d064:	e009883a 	mov	r4,fp
    d068:	b00b883a 	mov	r5,r22
    d06c:	8a22b03a 	or	r17,r17,r8
    d070:	3524983a 	sll	r18,r6,r20
    d074:	000273c0 	call	273c <__umodsi3>
    d078:	e009883a 	mov	r4,fp
    d07c:	b00b883a 	mov	r5,r22
    d080:	102f883a 	mov	r23,r2
    d084:	00026d80 	call	26d8 <__udivsi3>
    d088:	100d883a 	mov	r6,r2
    d08c:	b808943a 	slli	r4,r23,16
    d090:	aa3fffcc 	andi	r8,r21,65535
    d094:	8804d43a 	srli	r2,r17,16
    d098:	41af383a 	mul	r23,r8,r6
    d09c:	8520983a 	sll	r16,r16,r20
    d0a0:	1104b03a 	or	r2,r2,r4
    d0a4:	15c0042e 	bgeu	r2,r23,d0b8 <__umoddi3+0x33c>
    d0a8:	1545883a 	add	r2,r2,r21
    d0ac:	30ffffc4 	addi	r3,r6,-1
    d0b0:	1540742e 	bgeu	r2,r21,d284 <__umoddi3+0x508>
    d0b4:	180d883a 	mov	r6,r3
    d0b8:	15efc83a 	sub	r23,r2,r23
    d0bc:	b00b883a 	mov	r5,r22
    d0c0:	b809883a 	mov	r4,r23
    d0c4:	d9800115 	stw	r6,4(sp)
    d0c8:	da000015 	stw	r8,0(sp)
    d0cc:	000273c0 	call	273c <__umodsi3>
    d0d0:	b00b883a 	mov	r5,r22
    d0d4:	b809883a 	mov	r4,r23
    d0d8:	1039883a 	mov	fp,r2
    d0dc:	00026d80 	call	26d8 <__udivsi3>
    d0e0:	da000017 	ldw	r8,0(sp)
    d0e4:	e038943a 	slli	fp,fp,16
    d0e8:	100b883a 	mov	r5,r2
    d0ec:	4089383a 	mul	r4,r8,r2
    d0f0:	8a3fffcc 	andi	r8,r17,65535
    d0f4:	4710b03a 	or	r8,r8,fp
    d0f8:	d9800117 	ldw	r6,4(sp)
    d0fc:	4100042e 	bgeu	r8,r4,d110 <__umoddi3+0x394>
    d100:	4551883a 	add	r8,r8,r21
    d104:	10bfffc4 	addi	r2,r2,-1
    d108:	45405a2e 	bgeu	r8,r21,d274 <__umoddi3+0x4f8>
    d10c:	100b883a 	mov	r5,r2
    d110:	300c943a 	slli	r6,r6,16
    d114:	91ffffcc 	andi	r7,r18,65535
    d118:	9004d43a 	srli	r2,r18,16
    d11c:	314cb03a 	or	r6,r6,r5
    d120:	317fffcc 	andi	r5,r6,65535
    d124:	300cd43a 	srli	r6,r6,16
    d128:	29d3383a 	mul	r9,r5,r7
    d12c:	288b383a 	mul	r5,r5,r2
    d130:	31cf383a 	mul	r7,r6,r7
    d134:	4806d43a 	srli	r3,r9,16
    d138:	4111c83a 	sub	r8,r8,r4
    d13c:	29cb883a 	add	r5,r5,r7
    d140:	194b883a 	add	r5,r3,r5
    d144:	3085383a 	mul	r2,r6,r2
    d148:	29c0022e 	bgeu	r5,r7,d154 <__umoddi3+0x3d8>
    d14c:	00c00074 	movhi	r3,1
    d150:	10c5883a 	add	r2,r2,r3
    d154:	2808d43a 	srli	r4,r5,16
    d158:	280a943a 	slli	r5,r5,16
    d15c:	4a7fffcc 	andi	r9,r9,65535
    d160:	2085883a 	add	r2,r4,r2
    d164:	2a4b883a 	add	r5,r5,r9
    d168:	40803636 	bltu	r8,r2,d244 <__umoddi3+0x4c8>
    d16c:	40804d26 	beq	r8,r2,d2a4 <__umoddi3+0x528>
    d170:	4089c83a 	sub	r4,r8,r2
    d174:	280f883a 	mov	r7,r5
    d178:	81cfc83a 	sub	r7,r16,r7
    d17c:	81c7803a 	cmpltu	r3,r16,r7
    d180:	20c7c83a 	sub	r3,r4,r3
    d184:	1cc4983a 	sll	r2,r3,r19
    d188:	3d0ed83a 	srl	r7,r7,r20
    d18c:	1d06d83a 	srl	r3,r3,r20
    d190:	11c4b03a 	or	r2,r2,r7
    d194:	003f9306 	br	cfe4 <__alt_data_end+0xff00cfe4>
    d198:	9ca6983a 	sll	r19,r19,r18
    d19c:	88e8d83a 	srl	r20,r17,r3
    d1a0:	80c4d83a 	srl	r2,r16,r3
    d1a4:	982cd43a 	srli	r22,r19,16
    d1a8:	8ca2983a 	sll	r17,r17,r18
    d1ac:	a009883a 	mov	r4,r20
    d1b0:	b00b883a 	mov	r5,r22
    d1b4:	1478b03a 	or	fp,r2,r17
    d1b8:	000273c0 	call	273c <__umodsi3>
    d1bc:	a009883a 	mov	r4,r20
    d1c0:	b00b883a 	mov	r5,r22
    d1c4:	1023883a 	mov	r17,r2
    d1c8:	00026d80 	call	26d8 <__udivsi3>
    d1cc:	9d7fffcc 	andi	r21,r19,65535
    d1d0:	880a943a 	slli	r5,r17,16
    d1d4:	e008d43a 	srli	r4,fp,16
    d1d8:	a885383a 	mul	r2,r21,r2
    d1dc:	84a8983a 	sll	r20,r16,r18
    d1e0:	2148b03a 	or	r4,r4,r5
    d1e4:	2080042e 	bgeu	r4,r2,d1f8 <__umoddi3+0x47c>
    d1e8:	24c9883a 	add	r4,r4,r19
    d1ec:	24c00236 	bltu	r4,r19,d1f8 <__umoddi3+0x47c>
    d1f0:	2080012e 	bgeu	r4,r2,d1f8 <__umoddi3+0x47c>
    d1f4:	24c9883a 	add	r4,r4,r19
    d1f8:	20a3c83a 	sub	r17,r4,r2
    d1fc:	b00b883a 	mov	r5,r22
    d200:	8809883a 	mov	r4,r17
    d204:	000273c0 	call	273c <__umodsi3>
    d208:	102f883a 	mov	r23,r2
    d20c:	8809883a 	mov	r4,r17
    d210:	b00b883a 	mov	r5,r22
    d214:	00026d80 	call	26d8 <__udivsi3>
    d218:	b82e943a 	slli	r23,r23,16
    d21c:	a885383a 	mul	r2,r21,r2
    d220:	e13fffcc 	andi	r4,fp,65535
    d224:	25c8b03a 	or	r4,r4,r23
    d228:	2080042e 	bgeu	r4,r2,d23c <__umoddi3+0x4c0>
    d22c:	24c9883a 	add	r4,r4,r19
    d230:	24c00236 	bltu	r4,r19,d23c <__umoddi3+0x4c0>
    d234:	2080012e 	bgeu	r4,r2,d23c <__umoddi3+0x4c0>
    d238:	24c9883a 	add	r4,r4,r19
    d23c:	20a3c83a 	sub	r17,r4,r2
    d240:	003f4806 	br	cf64 <__alt_data_end+0xff00cf64>
    d244:	2c8fc83a 	sub	r7,r5,r18
    d248:	1545c83a 	sub	r2,r2,r21
    d24c:	29cb803a 	cmpltu	r5,r5,r7
    d250:	1145c83a 	sub	r2,r2,r5
    d254:	4089c83a 	sub	r4,r8,r2
    d258:	003fc706 	br	d178 <__alt_data_end+0xff00d178>
    d25c:	01000604 	movi	r4,24
    d260:	003f1806 	br	cec4 <__alt_data_end+0xff00cec4>
    d264:	00800604 	movi	r2,24
    d268:	003f3206 	br	cf34 <__alt_data_end+0xff00cf34>
    d26c:	01000604 	movi	r4,24
    d270:	003ed906 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d274:	413fa52e 	bgeu	r8,r4,d10c <__alt_data_end+0xff00d10c>
    d278:	297fff84 	addi	r5,r5,-2
    d27c:	4551883a 	add	r8,r8,r21
    d280:	003fa306 	br	d110 <__alt_data_end+0xff00d110>
    d284:	15ff8b2e 	bgeu	r2,r23,d0b4 <__alt_data_end+0xff00d0b4>
    d288:	31bfff84 	addi	r6,r6,-2
    d28c:	1545883a 	add	r2,r2,r21
    d290:	003f8906 	br	d0b8 <__alt_data_end+0xff00d0b8>
    d294:	24c9883a 	add	r4,r4,r19
    d298:	003eee06 	br	ce54 <__alt_data_end+0xff00ce54>
    d29c:	8005883a 	mov	r2,r16
    d2a0:	003f1706 	br	cf00 <__alt_data_end+0xff00cf00>
    d2a4:	817fe736 	bltu	r16,r5,d244 <__alt_data_end+0xff00d244>
    d2a8:	280f883a 	mov	r7,r5
    d2ac:	0009883a 	mov	r4,zero
    d2b0:	003fb106 	br	d178 <__alt_data_end+0xff00d178>

0000d2b4 <__adddf3>:
    d2b4:	02c00434 	movhi	r11,16
    d2b8:	5affffc4 	addi	r11,r11,-1
    d2bc:	2806d7fa 	srli	r3,r5,31
    d2c0:	2ad4703a 	and	r10,r5,r11
    d2c4:	3ad2703a 	and	r9,r7,r11
    d2c8:	3804d53a 	srli	r2,r7,20
    d2cc:	3018d77a 	srli	r12,r6,29
    d2d0:	280ad53a 	srli	r5,r5,20
    d2d4:	501490fa 	slli	r10,r10,3
    d2d8:	2010d77a 	srli	r8,r4,29
    d2dc:	481290fa 	slli	r9,r9,3
    d2e0:	380ed7fa 	srli	r7,r7,31
    d2e4:	defffb04 	addi	sp,sp,-20
    d2e8:	dc800215 	stw	r18,8(sp)
    d2ec:	dc400115 	stw	r17,4(sp)
    d2f0:	dc000015 	stw	r16,0(sp)
    d2f4:	dfc00415 	stw	ra,16(sp)
    d2f8:	dcc00315 	stw	r19,12(sp)
    d2fc:	1c803fcc 	andi	r18,r3,255
    d300:	2c01ffcc 	andi	r16,r5,2047
    d304:	5210b03a 	or	r8,r10,r8
    d308:	202290fa 	slli	r17,r4,3
    d30c:	1081ffcc 	andi	r2,r2,2047
    d310:	4b12b03a 	or	r9,r9,r12
    d314:	300c90fa 	slli	r6,r6,3
    d318:	91c07526 	beq	r18,r7,d4f0 <__adddf3+0x23c>
    d31c:	8087c83a 	sub	r3,r16,r2
    d320:	00c0ab0e 	bge	zero,r3,d5d0 <__adddf3+0x31c>
    d324:	10002a1e 	bne	r2,zero,d3d0 <__adddf3+0x11c>
    d328:	4984b03a 	or	r2,r9,r6
    d32c:	1000961e 	bne	r2,zero,d588 <__adddf3+0x2d4>
    d330:	888001cc 	andi	r2,r17,7
    d334:	10000726 	beq	r2,zero,d354 <__adddf3+0xa0>
    d338:	888003cc 	andi	r2,r17,15
    d33c:	00c00104 	movi	r3,4
    d340:	10c00426 	beq	r2,r3,d354 <__adddf3+0xa0>
    d344:	88c7883a 	add	r3,r17,r3
    d348:	1c63803a 	cmpltu	r17,r3,r17
    d34c:	4451883a 	add	r8,r8,r17
    d350:	1823883a 	mov	r17,r3
    d354:	4080202c 	andhi	r2,r8,128
    d358:	10005926 	beq	r2,zero,d4c0 <__adddf3+0x20c>
    d35c:	84000044 	addi	r16,r16,1
    d360:	0081ffc4 	movi	r2,2047
    d364:	8080ba26 	beq	r16,r2,d650 <__adddf3+0x39c>
    d368:	00bfe034 	movhi	r2,65408
    d36c:	10bfffc4 	addi	r2,r2,-1
    d370:	4090703a 	and	r8,r8,r2
    d374:	4004977a 	slli	r2,r8,29
    d378:	4010927a 	slli	r8,r8,9
    d37c:	8822d0fa 	srli	r17,r17,3
    d380:	8401ffcc 	andi	r16,r16,2047
    d384:	4010d33a 	srli	r8,r8,12
    d388:	9007883a 	mov	r3,r18
    d38c:	1444b03a 	or	r2,r2,r17
    d390:	8401ffcc 	andi	r16,r16,2047
    d394:	8020953a 	slli	r16,r16,20
    d398:	18c03fcc 	andi	r3,r3,255
    d39c:	01000434 	movhi	r4,16
    d3a0:	213fffc4 	addi	r4,r4,-1
    d3a4:	180697fa 	slli	r3,r3,31
    d3a8:	4110703a 	and	r8,r8,r4
    d3ac:	4410b03a 	or	r8,r8,r16
    d3b0:	40c6b03a 	or	r3,r8,r3
    d3b4:	dfc00417 	ldw	ra,16(sp)
    d3b8:	dcc00317 	ldw	r19,12(sp)
    d3bc:	dc800217 	ldw	r18,8(sp)
    d3c0:	dc400117 	ldw	r17,4(sp)
    d3c4:	dc000017 	ldw	r16,0(sp)
    d3c8:	dec00504 	addi	sp,sp,20
    d3cc:	f800283a 	ret
    d3d0:	0081ffc4 	movi	r2,2047
    d3d4:	80bfd626 	beq	r16,r2,d330 <__alt_data_end+0xff00d330>
    d3d8:	4a402034 	orhi	r9,r9,128
    d3dc:	00800e04 	movi	r2,56
    d3e0:	10c09f16 	blt	r2,r3,d660 <__adddf3+0x3ac>
    d3e4:	008007c4 	movi	r2,31
    d3e8:	10c0c216 	blt	r2,r3,d6f4 <__adddf3+0x440>
    d3ec:	00800804 	movi	r2,32
    d3f0:	10c5c83a 	sub	r2,r2,r3
    d3f4:	488a983a 	sll	r5,r9,r2
    d3f8:	30c8d83a 	srl	r4,r6,r3
    d3fc:	3084983a 	sll	r2,r6,r2
    d400:	48c6d83a 	srl	r3,r9,r3
    d404:	290cb03a 	or	r6,r5,r4
    d408:	1004c03a 	cmpne	r2,r2,zero
    d40c:	308cb03a 	or	r6,r6,r2
    d410:	898dc83a 	sub	r6,r17,r6
    d414:	89a3803a 	cmpltu	r17,r17,r6
    d418:	40d1c83a 	sub	r8,r8,r3
    d41c:	4451c83a 	sub	r8,r8,r17
    d420:	3023883a 	mov	r17,r6
    d424:	4080202c 	andhi	r2,r8,128
    d428:	10002326 	beq	r2,zero,d4b8 <__adddf3+0x204>
    d42c:	04c02034 	movhi	r19,128
    d430:	9cffffc4 	addi	r19,r19,-1
    d434:	44e6703a 	and	r19,r8,r19
    d438:	98007626 	beq	r19,zero,d614 <__adddf3+0x360>
    d43c:	9809883a 	mov	r4,r19
    d440:	00031240 	call	3124 <__clzsi2>
    d444:	10fffe04 	addi	r3,r2,-8
    d448:	010007c4 	movi	r4,31
    d44c:	20c07716 	blt	r4,r3,d62c <__adddf3+0x378>
    d450:	00800804 	movi	r2,32
    d454:	10c5c83a 	sub	r2,r2,r3
    d458:	8884d83a 	srl	r2,r17,r2
    d45c:	98d0983a 	sll	r8,r19,r3
    d460:	88e2983a 	sll	r17,r17,r3
    d464:	1204b03a 	or	r2,r2,r8
    d468:	1c007416 	blt	r3,r16,d63c <__adddf3+0x388>
    d46c:	1c21c83a 	sub	r16,r3,r16
    d470:	82000044 	addi	r8,r16,1
    d474:	00c007c4 	movi	r3,31
    d478:	1a009116 	blt	r3,r8,d6c0 <__adddf3+0x40c>
    d47c:	00c00804 	movi	r3,32
    d480:	1a07c83a 	sub	r3,r3,r8
    d484:	8a08d83a 	srl	r4,r17,r8
    d488:	88e2983a 	sll	r17,r17,r3
    d48c:	10c6983a 	sll	r3,r2,r3
    d490:	1210d83a 	srl	r8,r2,r8
    d494:	8804c03a 	cmpne	r2,r17,zero
    d498:	1906b03a 	or	r3,r3,r4
    d49c:	18a2b03a 	or	r17,r3,r2
    d4a0:	0021883a 	mov	r16,zero
    d4a4:	003fa206 	br	d330 <__alt_data_end+0xff00d330>
    d4a8:	1890b03a 	or	r8,r3,r2
    d4ac:	40017d26 	beq	r8,zero,daa4 <__adddf3+0x7f0>
    d4b0:	1011883a 	mov	r8,r2
    d4b4:	1823883a 	mov	r17,r3
    d4b8:	888001cc 	andi	r2,r17,7
    d4bc:	103f9e1e 	bne	r2,zero,d338 <__alt_data_end+0xff00d338>
    d4c0:	4004977a 	slli	r2,r8,29
    d4c4:	8822d0fa 	srli	r17,r17,3
    d4c8:	4010d0fa 	srli	r8,r8,3
    d4cc:	9007883a 	mov	r3,r18
    d4d0:	1444b03a 	or	r2,r2,r17
    d4d4:	0101ffc4 	movi	r4,2047
    d4d8:	81002426 	beq	r16,r4,d56c <__adddf3+0x2b8>
    d4dc:	8120703a 	and	r16,r16,r4
    d4e0:	01000434 	movhi	r4,16
    d4e4:	213fffc4 	addi	r4,r4,-1
    d4e8:	4110703a 	and	r8,r8,r4
    d4ec:	003fa806 	br	d390 <__alt_data_end+0xff00d390>
    d4f0:	8089c83a 	sub	r4,r16,r2
    d4f4:	01005e0e 	bge	zero,r4,d670 <__adddf3+0x3bc>
    d4f8:	10002b26 	beq	r2,zero,d5a8 <__adddf3+0x2f4>
    d4fc:	0081ffc4 	movi	r2,2047
    d500:	80bf8b26 	beq	r16,r2,d330 <__alt_data_end+0xff00d330>
    d504:	4a402034 	orhi	r9,r9,128
    d508:	00800e04 	movi	r2,56
    d50c:	1100a40e 	bge	r2,r4,d7a0 <__adddf3+0x4ec>
    d510:	498cb03a 	or	r6,r9,r6
    d514:	300ac03a 	cmpne	r5,r6,zero
    d518:	0013883a 	mov	r9,zero
    d51c:	2c4b883a 	add	r5,r5,r17
    d520:	2c63803a 	cmpltu	r17,r5,r17
    d524:	4a11883a 	add	r8,r9,r8
    d528:	8a11883a 	add	r8,r17,r8
    d52c:	2823883a 	mov	r17,r5
    d530:	4080202c 	andhi	r2,r8,128
    d534:	103fe026 	beq	r2,zero,d4b8 <__alt_data_end+0xff00d4b8>
    d538:	84000044 	addi	r16,r16,1
    d53c:	0081ffc4 	movi	r2,2047
    d540:	8080d226 	beq	r16,r2,d88c <__adddf3+0x5d8>
    d544:	00bfe034 	movhi	r2,65408
    d548:	10bfffc4 	addi	r2,r2,-1
    d54c:	4090703a 	and	r8,r8,r2
    d550:	880ad07a 	srli	r5,r17,1
    d554:	400897fa 	slli	r4,r8,31
    d558:	88c0004c 	andi	r3,r17,1
    d55c:	28e2b03a 	or	r17,r5,r3
    d560:	4010d07a 	srli	r8,r8,1
    d564:	2462b03a 	or	r17,r4,r17
    d568:	003f7106 	br	d330 <__alt_data_end+0xff00d330>
    d56c:	4088b03a 	or	r4,r8,r2
    d570:	20014526 	beq	r4,zero,da88 <__adddf3+0x7d4>
    d574:	01000434 	movhi	r4,16
    d578:	42000234 	orhi	r8,r8,8
    d57c:	213fffc4 	addi	r4,r4,-1
    d580:	4110703a 	and	r8,r8,r4
    d584:	003f8206 	br	d390 <__alt_data_end+0xff00d390>
    d588:	18ffffc4 	addi	r3,r3,-1
    d58c:	1800491e 	bne	r3,zero,d6b4 <__adddf3+0x400>
    d590:	898bc83a 	sub	r5,r17,r6
    d594:	8963803a 	cmpltu	r17,r17,r5
    d598:	4251c83a 	sub	r8,r8,r9
    d59c:	4451c83a 	sub	r8,r8,r17
    d5a0:	2823883a 	mov	r17,r5
    d5a4:	003f9f06 	br	d424 <__alt_data_end+0xff00d424>
    d5a8:	4984b03a 	or	r2,r9,r6
    d5ac:	103f6026 	beq	r2,zero,d330 <__alt_data_end+0xff00d330>
    d5b0:	213fffc4 	addi	r4,r4,-1
    d5b4:	2000931e 	bne	r4,zero,d804 <__adddf3+0x550>
    d5b8:	898d883a 	add	r6,r17,r6
    d5bc:	3463803a 	cmpltu	r17,r6,r17
    d5c0:	4251883a 	add	r8,r8,r9
    d5c4:	8a11883a 	add	r8,r17,r8
    d5c8:	3023883a 	mov	r17,r6
    d5cc:	003fd806 	br	d530 <__alt_data_end+0xff00d530>
    d5d0:	1800541e 	bne	r3,zero,d724 <__adddf3+0x470>
    d5d4:	80800044 	addi	r2,r16,1
    d5d8:	1081ffcc 	andi	r2,r2,2047
    d5dc:	00c00044 	movi	r3,1
    d5e0:	1880a00e 	bge	r3,r2,d864 <__adddf3+0x5b0>
    d5e4:	8989c83a 	sub	r4,r17,r6
    d5e8:	8905803a 	cmpltu	r2,r17,r4
    d5ec:	4267c83a 	sub	r19,r8,r9
    d5f0:	98a7c83a 	sub	r19,r19,r2
    d5f4:	9880202c 	andhi	r2,r19,128
    d5f8:	10006326 	beq	r2,zero,d788 <__adddf3+0x4d4>
    d5fc:	3463c83a 	sub	r17,r6,r17
    d600:	4a07c83a 	sub	r3,r9,r8
    d604:	344d803a 	cmpltu	r6,r6,r17
    d608:	19a7c83a 	sub	r19,r3,r6
    d60c:	3825883a 	mov	r18,r7
    d610:	983f8a1e 	bne	r19,zero,d43c <__alt_data_end+0xff00d43c>
    d614:	8809883a 	mov	r4,r17
    d618:	00031240 	call	3124 <__clzsi2>
    d61c:	10800804 	addi	r2,r2,32
    d620:	10fffe04 	addi	r3,r2,-8
    d624:	010007c4 	movi	r4,31
    d628:	20ff890e 	bge	r4,r3,d450 <__alt_data_end+0xff00d450>
    d62c:	10bff604 	addi	r2,r2,-40
    d630:	8884983a 	sll	r2,r17,r2
    d634:	0023883a 	mov	r17,zero
    d638:	1c3f8c0e 	bge	r3,r16,d46c <__alt_data_end+0xff00d46c>
    d63c:	023fe034 	movhi	r8,65408
    d640:	423fffc4 	addi	r8,r8,-1
    d644:	80e1c83a 	sub	r16,r16,r3
    d648:	1210703a 	and	r8,r2,r8
    d64c:	003f3806 	br	d330 <__alt_data_end+0xff00d330>
    d650:	9007883a 	mov	r3,r18
    d654:	0011883a 	mov	r8,zero
    d658:	0005883a 	mov	r2,zero
    d65c:	003f4c06 	br	d390 <__alt_data_end+0xff00d390>
    d660:	498cb03a 	or	r6,r9,r6
    d664:	300cc03a 	cmpne	r6,r6,zero
    d668:	0007883a 	mov	r3,zero
    d66c:	003f6806 	br	d410 <__alt_data_end+0xff00d410>
    d670:	20009c1e 	bne	r4,zero,d8e4 <__adddf3+0x630>
    d674:	80800044 	addi	r2,r16,1
    d678:	1141ffcc 	andi	r5,r2,2047
    d67c:	01000044 	movi	r4,1
    d680:	2140670e 	bge	r4,r5,d820 <__adddf3+0x56c>
    d684:	0101ffc4 	movi	r4,2047
    d688:	11007f26 	beq	r2,r4,d888 <__adddf3+0x5d4>
    d68c:	898d883a 	add	r6,r17,r6
    d690:	4247883a 	add	r3,r8,r9
    d694:	3451803a 	cmpltu	r8,r6,r17
    d698:	40d1883a 	add	r8,r8,r3
    d69c:	402297fa 	slli	r17,r8,31
    d6a0:	300cd07a 	srli	r6,r6,1
    d6a4:	4010d07a 	srli	r8,r8,1
    d6a8:	1021883a 	mov	r16,r2
    d6ac:	89a2b03a 	or	r17,r17,r6
    d6b0:	003f1f06 	br	d330 <__alt_data_end+0xff00d330>
    d6b4:	0081ffc4 	movi	r2,2047
    d6b8:	80bf481e 	bne	r16,r2,d3dc <__alt_data_end+0xff00d3dc>
    d6bc:	003f1c06 	br	d330 <__alt_data_end+0xff00d330>
    d6c0:	843ff844 	addi	r16,r16,-31
    d6c4:	01000804 	movi	r4,32
    d6c8:	1406d83a 	srl	r3,r2,r16
    d6cc:	41005026 	beq	r8,r4,d810 <__adddf3+0x55c>
    d6d0:	01001004 	movi	r4,64
    d6d4:	2211c83a 	sub	r8,r4,r8
    d6d8:	1204983a 	sll	r2,r2,r8
    d6dc:	88a2b03a 	or	r17,r17,r2
    d6e0:	8822c03a 	cmpne	r17,r17,zero
    d6e4:	1c62b03a 	or	r17,r3,r17
    d6e8:	0011883a 	mov	r8,zero
    d6ec:	0021883a 	mov	r16,zero
    d6f0:	003f7106 	br	d4b8 <__alt_data_end+0xff00d4b8>
    d6f4:	193ff804 	addi	r4,r3,-32
    d6f8:	00800804 	movi	r2,32
    d6fc:	4908d83a 	srl	r4,r9,r4
    d700:	18804526 	beq	r3,r2,d818 <__adddf3+0x564>
    d704:	00801004 	movi	r2,64
    d708:	10c5c83a 	sub	r2,r2,r3
    d70c:	4886983a 	sll	r3,r9,r2
    d710:	198cb03a 	or	r6,r3,r6
    d714:	300cc03a 	cmpne	r6,r6,zero
    d718:	218cb03a 	or	r6,r4,r6
    d71c:	0007883a 	mov	r3,zero
    d720:	003f3b06 	br	d410 <__alt_data_end+0xff00d410>
    d724:	80002a26 	beq	r16,zero,d7d0 <__adddf3+0x51c>
    d728:	0101ffc4 	movi	r4,2047
    d72c:	11006826 	beq	r2,r4,d8d0 <__adddf3+0x61c>
    d730:	00c7c83a 	sub	r3,zero,r3
    d734:	42002034 	orhi	r8,r8,128
    d738:	01000e04 	movi	r4,56
    d73c:	20c07c16 	blt	r4,r3,d930 <__adddf3+0x67c>
    d740:	010007c4 	movi	r4,31
    d744:	20c0da16 	blt	r4,r3,dab0 <__adddf3+0x7fc>
    d748:	01000804 	movi	r4,32
    d74c:	20c9c83a 	sub	r4,r4,r3
    d750:	4114983a 	sll	r10,r8,r4
    d754:	88cad83a 	srl	r5,r17,r3
    d758:	8908983a 	sll	r4,r17,r4
    d75c:	40c6d83a 	srl	r3,r8,r3
    d760:	5162b03a 	or	r17,r10,r5
    d764:	2008c03a 	cmpne	r4,r4,zero
    d768:	8922b03a 	or	r17,r17,r4
    d76c:	3463c83a 	sub	r17,r6,r17
    d770:	48c7c83a 	sub	r3,r9,r3
    d774:	344d803a 	cmpltu	r6,r6,r17
    d778:	1991c83a 	sub	r8,r3,r6
    d77c:	1021883a 	mov	r16,r2
    d780:	3825883a 	mov	r18,r7
    d784:	003f2706 	br	d424 <__alt_data_end+0xff00d424>
    d788:	24d0b03a 	or	r8,r4,r19
    d78c:	40001b1e 	bne	r8,zero,d7fc <__adddf3+0x548>
    d790:	0005883a 	mov	r2,zero
    d794:	0007883a 	mov	r3,zero
    d798:	0021883a 	mov	r16,zero
    d79c:	003f4d06 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d7a0:	008007c4 	movi	r2,31
    d7a4:	11003c16 	blt	r2,r4,d898 <__adddf3+0x5e4>
    d7a8:	00800804 	movi	r2,32
    d7ac:	1105c83a 	sub	r2,r2,r4
    d7b0:	488e983a 	sll	r7,r9,r2
    d7b4:	310ad83a 	srl	r5,r6,r4
    d7b8:	3084983a 	sll	r2,r6,r2
    d7bc:	4912d83a 	srl	r9,r9,r4
    d7c0:	394ab03a 	or	r5,r7,r5
    d7c4:	1004c03a 	cmpne	r2,r2,zero
    d7c8:	288ab03a 	or	r5,r5,r2
    d7cc:	003f5306 	br	d51c <__alt_data_end+0xff00d51c>
    d7d0:	4448b03a 	or	r4,r8,r17
    d7d4:	20003e26 	beq	r4,zero,d8d0 <__adddf3+0x61c>
    d7d8:	00c6303a 	nor	r3,zero,r3
    d7dc:	18003a1e 	bne	r3,zero,d8c8 <__adddf3+0x614>
    d7e0:	3463c83a 	sub	r17,r6,r17
    d7e4:	4a07c83a 	sub	r3,r9,r8
    d7e8:	344d803a 	cmpltu	r6,r6,r17
    d7ec:	1991c83a 	sub	r8,r3,r6
    d7f0:	1021883a 	mov	r16,r2
    d7f4:	3825883a 	mov	r18,r7
    d7f8:	003f0a06 	br	d424 <__alt_data_end+0xff00d424>
    d7fc:	2023883a 	mov	r17,r4
    d800:	003f0d06 	br	d438 <__alt_data_end+0xff00d438>
    d804:	0081ffc4 	movi	r2,2047
    d808:	80bf3f1e 	bne	r16,r2,d508 <__alt_data_end+0xff00d508>
    d80c:	003ec806 	br	d330 <__alt_data_end+0xff00d330>
    d810:	0005883a 	mov	r2,zero
    d814:	003fb106 	br	d6dc <__alt_data_end+0xff00d6dc>
    d818:	0007883a 	mov	r3,zero
    d81c:	003fbc06 	br	d710 <__alt_data_end+0xff00d710>
    d820:	4444b03a 	or	r2,r8,r17
    d824:	8000871e 	bne	r16,zero,da44 <__adddf3+0x790>
    d828:	1000ba26 	beq	r2,zero,db14 <__adddf3+0x860>
    d82c:	4984b03a 	or	r2,r9,r6
    d830:	103ebf26 	beq	r2,zero,d330 <__alt_data_end+0xff00d330>
    d834:	8985883a 	add	r2,r17,r6
    d838:	4247883a 	add	r3,r8,r9
    d83c:	1451803a 	cmpltu	r8,r2,r17
    d840:	40d1883a 	add	r8,r8,r3
    d844:	40c0202c 	andhi	r3,r8,128
    d848:	1023883a 	mov	r17,r2
    d84c:	183f1a26 	beq	r3,zero,d4b8 <__alt_data_end+0xff00d4b8>
    d850:	00bfe034 	movhi	r2,65408
    d854:	10bfffc4 	addi	r2,r2,-1
    d858:	2021883a 	mov	r16,r4
    d85c:	4090703a 	and	r8,r8,r2
    d860:	003eb306 	br	d330 <__alt_data_end+0xff00d330>
    d864:	4444b03a 	or	r2,r8,r17
    d868:	8000291e 	bne	r16,zero,d910 <__adddf3+0x65c>
    d86c:	10004b1e 	bne	r2,zero,d99c <__adddf3+0x6e8>
    d870:	4990b03a 	or	r8,r9,r6
    d874:	40008b26 	beq	r8,zero,daa4 <__adddf3+0x7f0>
    d878:	4811883a 	mov	r8,r9
    d87c:	3023883a 	mov	r17,r6
    d880:	3825883a 	mov	r18,r7
    d884:	003eaa06 	br	d330 <__alt_data_end+0xff00d330>
    d888:	1021883a 	mov	r16,r2
    d88c:	0011883a 	mov	r8,zero
    d890:	0005883a 	mov	r2,zero
    d894:	003f0f06 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d898:	217ff804 	addi	r5,r4,-32
    d89c:	00800804 	movi	r2,32
    d8a0:	494ad83a 	srl	r5,r9,r5
    d8a4:	20807d26 	beq	r4,r2,da9c <__adddf3+0x7e8>
    d8a8:	00801004 	movi	r2,64
    d8ac:	1109c83a 	sub	r4,r2,r4
    d8b0:	4912983a 	sll	r9,r9,r4
    d8b4:	498cb03a 	or	r6,r9,r6
    d8b8:	300cc03a 	cmpne	r6,r6,zero
    d8bc:	298ab03a 	or	r5,r5,r6
    d8c0:	0013883a 	mov	r9,zero
    d8c4:	003f1506 	br	d51c <__alt_data_end+0xff00d51c>
    d8c8:	0101ffc4 	movi	r4,2047
    d8cc:	113f9a1e 	bne	r2,r4,d738 <__alt_data_end+0xff00d738>
    d8d0:	4811883a 	mov	r8,r9
    d8d4:	3023883a 	mov	r17,r6
    d8d8:	1021883a 	mov	r16,r2
    d8dc:	3825883a 	mov	r18,r7
    d8e0:	003e9306 	br	d330 <__alt_data_end+0xff00d330>
    d8e4:	8000161e 	bne	r16,zero,d940 <__adddf3+0x68c>
    d8e8:	444ab03a 	or	r5,r8,r17
    d8ec:	28005126 	beq	r5,zero,da34 <__adddf3+0x780>
    d8f0:	0108303a 	nor	r4,zero,r4
    d8f4:	20004d1e 	bne	r4,zero,da2c <__adddf3+0x778>
    d8f8:	89a3883a 	add	r17,r17,r6
    d8fc:	4253883a 	add	r9,r8,r9
    d900:	898d803a 	cmpltu	r6,r17,r6
    d904:	3251883a 	add	r8,r6,r9
    d908:	1021883a 	mov	r16,r2
    d90c:	003f0806 	br	d530 <__alt_data_end+0xff00d530>
    d910:	1000301e 	bne	r2,zero,d9d4 <__adddf3+0x720>
    d914:	4984b03a 	or	r2,r9,r6
    d918:	10007126 	beq	r2,zero,dae0 <__adddf3+0x82c>
    d91c:	4811883a 	mov	r8,r9
    d920:	3023883a 	mov	r17,r6
    d924:	3825883a 	mov	r18,r7
    d928:	0401ffc4 	movi	r16,2047
    d92c:	003e8006 	br	d330 <__alt_data_end+0xff00d330>
    d930:	4462b03a 	or	r17,r8,r17
    d934:	8822c03a 	cmpne	r17,r17,zero
    d938:	0007883a 	mov	r3,zero
    d93c:	003f8b06 	br	d76c <__alt_data_end+0xff00d76c>
    d940:	0141ffc4 	movi	r5,2047
    d944:	11403b26 	beq	r2,r5,da34 <__adddf3+0x780>
    d948:	0109c83a 	sub	r4,zero,r4
    d94c:	42002034 	orhi	r8,r8,128
    d950:	01400e04 	movi	r5,56
    d954:	29006716 	blt	r5,r4,daf4 <__adddf3+0x840>
    d958:	014007c4 	movi	r5,31
    d95c:	29007016 	blt	r5,r4,db20 <__adddf3+0x86c>
    d960:	01400804 	movi	r5,32
    d964:	290bc83a 	sub	r5,r5,r4
    d968:	4154983a 	sll	r10,r8,r5
    d96c:	890ed83a 	srl	r7,r17,r4
    d970:	894a983a 	sll	r5,r17,r5
    d974:	4108d83a 	srl	r4,r8,r4
    d978:	51e2b03a 	or	r17,r10,r7
    d97c:	280ac03a 	cmpne	r5,r5,zero
    d980:	8962b03a 	or	r17,r17,r5
    d984:	89a3883a 	add	r17,r17,r6
    d988:	2253883a 	add	r9,r4,r9
    d98c:	898d803a 	cmpltu	r6,r17,r6
    d990:	3251883a 	add	r8,r6,r9
    d994:	1021883a 	mov	r16,r2
    d998:	003ee506 	br	d530 <__alt_data_end+0xff00d530>
    d99c:	4984b03a 	or	r2,r9,r6
    d9a0:	103e6326 	beq	r2,zero,d330 <__alt_data_end+0xff00d330>
    d9a4:	8987c83a 	sub	r3,r17,r6
    d9a8:	88c9803a 	cmpltu	r4,r17,r3
    d9ac:	4245c83a 	sub	r2,r8,r9
    d9b0:	1105c83a 	sub	r2,r2,r4
    d9b4:	1100202c 	andhi	r4,r2,128
    d9b8:	203ebb26 	beq	r4,zero,d4a8 <__alt_data_end+0xff00d4a8>
    d9bc:	3463c83a 	sub	r17,r6,r17
    d9c0:	4a07c83a 	sub	r3,r9,r8
    d9c4:	344d803a 	cmpltu	r6,r6,r17
    d9c8:	1991c83a 	sub	r8,r3,r6
    d9cc:	3825883a 	mov	r18,r7
    d9d0:	003e5706 	br	d330 <__alt_data_end+0xff00d330>
    d9d4:	4984b03a 	or	r2,r9,r6
    d9d8:	10002e26 	beq	r2,zero,da94 <__adddf3+0x7e0>
    d9dc:	4004d0fa 	srli	r2,r8,3
    d9e0:	8822d0fa 	srli	r17,r17,3
    d9e4:	4010977a 	slli	r8,r8,29
    d9e8:	10c0022c 	andhi	r3,r2,8
    d9ec:	4462b03a 	or	r17,r8,r17
    d9f0:	18000826 	beq	r3,zero,da14 <__adddf3+0x760>
    d9f4:	4808d0fa 	srli	r4,r9,3
    d9f8:	20c0022c 	andhi	r3,r4,8
    d9fc:	1800051e 	bne	r3,zero,da14 <__adddf3+0x760>
    da00:	300cd0fa 	srli	r6,r6,3
    da04:	4806977a 	slli	r3,r9,29
    da08:	2005883a 	mov	r2,r4
    da0c:	3825883a 	mov	r18,r7
    da10:	19a2b03a 	or	r17,r3,r6
    da14:	8810d77a 	srli	r8,r17,29
    da18:	100490fa 	slli	r2,r2,3
    da1c:	882290fa 	slli	r17,r17,3
    da20:	0401ffc4 	movi	r16,2047
    da24:	4090b03a 	or	r8,r8,r2
    da28:	003e4106 	br	d330 <__alt_data_end+0xff00d330>
    da2c:	0141ffc4 	movi	r5,2047
    da30:	117fc71e 	bne	r2,r5,d950 <__alt_data_end+0xff00d950>
    da34:	4811883a 	mov	r8,r9
    da38:	3023883a 	mov	r17,r6
    da3c:	1021883a 	mov	r16,r2
    da40:	003e3b06 	br	d330 <__alt_data_end+0xff00d330>
    da44:	10002f26 	beq	r2,zero,db04 <__adddf3+0x850>
    da48:	4984b03a 	or	r2,r9,r6
    da4c:	10001126 	beq	r2,zero,da94 <__adddf3+0x7e0>
    da50:	4004d0fa 	srli	r2,r8,3
    da54:	8822d0fa 	srli	r17,r17,3
    da58:	4010977a 	slli	r8,r8,29
    da5c:	10c0022c 	andhi	r3,r2,8
    da60:	4462b03a 	or	r17,r8,r17
    da64:	183feb26 	beq	r3,zero,da14 <__alt_data_end+0xff00da14>
    da68:	4808d0fa 	srli	r4,r9,3
    da6c:	20c0022c 	andhi	r3,r4,8
    da70:	183fe81e 	bne	r3,zero,da14 <__alt_data_end+0xff00da14>
    da74:	300cd0fa 	srli	r6,r6,3
    da78:	4806977a 	slli	r3,r9,29
    da7c:	2005883a 	mov	r2,r4
    da80:	19a2b03a 	or	r17,r3,r6
    da84:	003fe306 	br	da14 <__alt_data_end+0xff00da14>
    da88:	0011883a 	mov	r8,zero
    da8c:	0005883a 	mov	r2,zero
    da90:	003e3f06 	br	d390 <__alt_data_end+0xff00d390>
    da94:	0401ffc4 	movi	r16,2047
    da98:	003e2506 	br	d330 <__alt_data_end+0xff00d330>
    da9c:	0013883a 	mov	r9,zero
    daa0:	003f8406 	br	d8b4 <__alt_data_end+0xff00d8b4>
    daa4:	0005883a 	mov	r2,zero
    daa8:	0007883a 	mov	r3,zero
    daac:	003e8906 	br	d4d4 <__alt_data_end+0xff00d4d4>
    dab0:	197ff804 	addi	r5,r3,-32
    dab4:	01000804 	movi	r4,32
    dab8:	414ad83a 	srl	r5,r8,r5
    dabc:	19002426 	beq	r3,r4,db50 <__adddf3+0x89c>
    dac0:	01001004 	movi	r4,64
    dac4:	20c7c83a 	sub	r3,r4,r3
    dac8:	40c6983a 	sll	r3,r8,r3
    dacc:	1c46b03a 	or	r3,r3,r17
    dad0:	1806c03a 	cmpne	r3,r3,zero
    dad4:	28e2b03a 	or	r17,r5,r3
    dad8:	0007883a 	mov	r3,zero
    dadc:	003f2306 	br	d76c <__alt_data_end+0xff00d76c>
    dae0:	0007883a 	mov	r3,zero
    dae4:	5811883a 	mov	r8,r11
    dae8:	00bfffc4 	movi	r2,-1
    daec:	0401ffc4 	movi	r16,2047
    daf0:	003e7806 	br	d4d4 <__alt_data_end+0xff00d4d4>
    daf4:	4462b03a 	or	r17,r8,r17
    daf8:	8822c03a 	cmpne	r17,r17,zero
    dafc:	0009883a 	mov	r4,zero
    db00:	003fa006 	br	d984 <__alt_data_end+0xff00d984>
    db04:	4811883a 	mov	r8,r9
    db08:	3023883a 	mov	r17,r6
    db0c:	0401ffc4 	movi	r16,2047
    db10:	003e0706 	br	d330 <__alt_data_end+0xff00d330>
    db14:	4811883a 	mov	r8,r9
    db18:	3023883a 	mov	r17,r6
    db1c:	003e0406 	br	d330 <__alt_data_end+0xff00d330>
    db20:	21fff804 	addi	r7,r4,-32
    db24:	01400804 	movi	r5,32
    db28:	41ced83a 	srl	r7,r8,r7
    db2c:	21400a26 	beq	r4,r5,db58 <__adddf3+0x8a4>
    db30:	01401004 	movi	r5,64
    db34:	2909c83a 	sub	r4,r5,r4
    db38:	4108983a 	sll	r4,r8,r4
    db3c:	2448b03a 	or	r4,r4,r17
    db40:	2008c03a 	cmpne	r4,r4,zero
    db44:	3922b03a 	or	r17,r7,r4
    db48:	0009883a 	mov	r4,zero
    db4c:	003f8d06 	br	d984 <__alt_data_end+0xff00d984>
    db50:	0007883a 	mov	r3,zero
    db54:	003fdd06 	br	dacc <__alt_data_end+0xff00dacc>
    db58:	0009883a 	mov	r4,zero
    db5c:	003ff706 	br	db3c <__alt_data_end+0xff00db3c>

0000db60 <__eqdf2>:
    db60:	2804d53a 	srli	r2,r5,20
    db64:	3806d53a 	srli	r3,r7,20
    db68:	02000434 	movhi	r8,16
    db6c:	423fffc4 	addi	r8,r8,-1
    db70:	1081ffcc 	andi	r2,r2,2047
    db74:	0281ffc4 	movi	r10,2047
    db78:	2a12703a 	and	r9,r5,r8
    db7c:	18c1ffcc 	andi	r3,r3,2047
    db80:	3a10703a 	and	r8,r7,r8
    db84:	280ad7fa 	srli	r5,r5,31
    db88:	380ed7fa 	srli	r7,r7,31
    db8c:	12801026 	beq	r2,r10,dbd0 <__eqdf2+0x70>
    db90:	0281ffc4 	movi	r10,2047
    db94:	1a800a26 	beq	r3,r10,dbc0 <__eqdf2+0x60>
    db98:	10c00226 	beq	r2,r3,dba4 <__eqdf2+0x44>
    db9c:	00800044 	movi	r2,1
    dba0:	f800283a 	ret
    dba4:	4a3ffd1e 	bne	r9,r8,db9c <__alt_data_end+0xff00db9c>
    dba8:	21bffc1e 	bne	r4,r6,db9c <__alt_data_end+0xff00db9c>
    dbac:	29c00c26 	beq	r5,r7,dbe0 <__eqdf2+0x80>
    dbb0:	103ffa1e 	bne	r2,zero,db9c <__alt_data_end+0xff00db9c>
    dbb4:	2244b03a 	or	r2,r4,r9
    dbb8:	1004c03a 	cmpne	r2,r2,zero
    dbbc:	f800283a 	ret
    dbc0:	3214b03a 	or	r10,r6,r8
    dbc4:	503ff426 	beq	r10,zero,db98 <__alt_data_end+0xff00db98>
    dbc8:	00800044 	movi	r2,1
    dbcc:	f800283a 	ret
    dbd0:	2254b03a 	or	r10,r4,r9
    dbd4:	503fee26 	beq	r10,zero,db90 <__alt_data_end+0xff00db90>
    dbd8:	00800044 	movi	r2,1
    dbdc:	f800283a 	ret
    dbe0:	0005883a 	mov	r2,zero
    dbe4:	f800283a 	ret

0000dbe8 <__gedf2>:
    dbe8:	2804d53a 	srli	r2,r5,20
    dbec:	3806d53a 	srli	r3,r7,20
    dbf0:	02000434 	movhi	r8,16
    dbf4:	423fffc4 	addi	r8,r8,-1
    dbf8:	1081ffcc 	andi	r2,r2,2047
    dbfc:	0241ffc4 	movi	r9,2047
    dc00:	2a14703a 	and	r10,r5,r8
    dc04:	18c1ffcc 	andi	r3,r3,2047
    dc08:	3a10703a 	and	r8,r7,r8
    dc0c:	280ad7fa 	srli	r5,r5,31
    dc10:	380ed7fa 	srli	r7,r7,31
    dc14:	12401d26 	beq	r2,r9,dc8c <__gedf2+0xa4>
    dc18:	0241ffc4 	movi	r9,2047
    dc1c:	1a401226 	beq	r3,r9,dc68 <__gedf2+0x80>
    dc20:	1000081e 	bne	r2,zero,dc44 <__gedf2+0x5c>
    dc24:	2296b03a 	or	r11,r4,r10
    dc28:	5813003a 	cmpeq	r9,r11,zero
    dc2c:	1800091e 	bne	r3,zero,dc54 <__gedf2+0x6c>
    dc30:	3218b03a 	or	r12,r6,r8
    dc34:	6000071e 	bne	r12,zero,dc54 <__gedf2+0x6c>
    dc38:	0005883a 	mov	r2,zero
    dc3c:	5800101e 	bne	r11,zero,dc80 <__gedf2+0x98>
    dc40:	f800283a 	ret
    dc44:	18000c1e 	bne	r3,zero,dc78 <__gedf2+0x90>
    dc48:	3212b03a 	or	r9,r6,r8
    dc4c:	48000c26 	beq	r9,zero,dc80 <__gedf2+0x98>
    dc50:	0013883a 	mov	r9,zero
    dc54:	39c03fcc 	andi	r7,r7,255
    dc58:	48000826 	beq	r9,zero,dc7c <__gedf2+0x94>
    dc5c:	38000926 	beq	r7,zero,dc84 <__gedf2+0x9c>
    dc60:	00800044 	movi	r2,1
    dc64:	f800283a 	ret
    dc68:	3212b03a 	or	r9,r6,r8
    dc6c:	483fec26 	beq	r9,zero,dc20 <__alt_data_end+0xff00dc20>
    dc70:	00bfff84 	movi	r2,-2
    dc74:	f800283a 	ret
    dc78:	39c03fcc 	andi	r7,r7,255
    dc7c:	29c00626 	beq	r5,r7,dc98 <__gedf2+0xb0>
    dc80:	283ff726 	beq	r5,zero,dc60 <__alt_data_end+0xff00dc60>
    dc84:	00bfffc4 	movi	r2,-1
    dc88:	f800283a 	ret
    dc8c:	2292b03a 	or	r9,r4,r10
    dc90:	483fe126 	beq	r9,zero,dc18 <__alt_data_end+0xff00dc18>
    dc94:	003ff606 	br	dc70 <__alt_data_end+0xff00dc70>
    dc98:	18bff916 	blt	r3,r2,dc80 <__alt_data_end+0xff00dc80>
    dc9c:	10c00316 	blt	r2,r3,dcac <__gedf2+0xc4>
    dca0:	42bff736 	bltu	r8,r10,dc80 <__alt_data_end+0xff00dc80>
    dca4:	52000326 	beq	r10,r8,dcb4 <__gedf2+0xcc>
    dca8:	5200042e 	bgeu	r10,r8,dcbc <__gedf2+0xd4>
    dcac:	283fec1e 	bne	r5,zero,dc60 <__alt_data_end+0xff00dc60>
    dcb0:	003ff406 	br	dc84 <__alt_data_end+0xff00dc84>
    dcb4:	313ff236 	bltu	r6,r4,dc80 <__alt_data_end+0xff00dc80>
    dcb8:	21bffc36 	bltu	r4,r6,dcac <__alt_data_end+0xff00dcac>
    dcbc:	0005883a 	mov	r2,zero
    dcc0:	f800283a 	ret

0000dcc4 <__ledf2>:
    dcc4:	2804d53a 	srli	r2,r5,20
    dcc8:	3810d53a 	srli	r8,r7,20
    dccc:	00c00434 	movhi	r3,16
    dcd0:	18ffffc4 	addi	r3,r3,-1
    dcd4:	1081ffcc 	andi	r2,r2,2047
    dcd8:	0241ffc4 	movi	r9,2047
    dcdc:	28d4703a 	and	r10,r5,r3
    dce0:	4201ffcc 	andi	r8,r8,2047
    dce4:	38c6703a 	and	r3,r7,r3
    dce8:	280ad7fa 	srli	r5,r5,31
    dcec:	380ed7fa 	srli	r7,r7,31
    dcf0:	12401f26 	beq	r2,r9,dd70 <__ledf2+0xac>
    dcf4:	0241ffc4 	movi	r9,2047
    dcf8:	42401426 	beq	r8,r9,dd4c <__ledf2+0x88>
    dcfc:	1000091e 	bne	r2,zero,dd24 <__ledf2+0x60>
    dd00:	2296b03a 	or	r11,r4,r10
    dd04:	5813003a 	cmpeq	r9,r11,zero
    dd08:	29403fcc 	andi	r5,r5,255
    dd0c:	40000a1e 	bne	r8,zero,dd38 <__ledf2+0x74>
    dd10:	30d8b03a 	or	r12,r6,r3
    dd14:	6000081e 	bne	r12,zero,dd38 <__ledf2+0x74>
    dd18:	0005883a 	mov	r2,zero
    dd1c:	5800111e 	bne	r11,zero,dd64 <__ledf2+0xa0>
    dd20:	f800283a 	ret
    dd24:	29403fcc 	andi	r5,r5,255
    dd28:	40000c1e 	bne	r8,zero,dd5c <__ledf2+0x98>
    dd2c:	30d2b03a 	or	r9,r6,r3
    dd30:	48000c26 	beq	r9,zero,dd64 <__ledf2+0xa0>
    dd34:	0013883a 	mov	r9,zero
    dd38:	39c03fcc 	andi	r7,r7,255
    dd3c:	48000826 	beq	r9,zero,dd60 <__ledf2+0x9c>
    dd40:	38001126 	beq	r7,zero,dd88 <__ledf2+0xc4>
    dd44:	00800044 	movi	r2,1
    dd48:	f800283a 	ret
    dd4c:	30d2b03a 	or	r9,r6,r3
    dd50:	483fea26 	beq	r9,zero,dcfc <__alt_data_end+0xff00dcfc>
    dd54:	00800084 	movi	r2,2
    dd58:	f800283a 	ret
    dd5c:	39c03fcc 	andi	r7,r7,255
    dd60:	39400726 	beq	r7,r5,dd80 <__ledf2+0xbc>
    dd64:	2800081e 	bne	r5,zero,dd88 <__ledf2+0xc4>
    dd68:	00800044 	movi	r2,1
    dd6c:	f800283a 	ret
    dd70:	2292b03a 	or	r9,r4,r10
    dd74:	483fdf26 	beq	r9,zero,dcf4 <__alt_data_end+0xff00dcf4>
    dd78:	00800084 	movi	r2,2
    dd7c:	f800283a 	ret
    dd80:	4080030e 	bge	r8,r2,dd90 <__ledf2+0xcc>
    dd84:	383fef26 	beq	r7,zero,dd44 <__alt_data_end+0xff00dd44>
    dd88:	00bfffc4 	movi	r2,-1
    dd8c:	f800283a 	ret
    dd90:	123feb16 	blt	r2,r8,dd40 <__alt_data_end+0xff00dd40>
    dd94:	1abff336 	bltu	r3,r10,dd64 <__alt_data_end+0xff00dd64>
    dd98:	50c00326 	beq	r10,r3,dda8 <__ledf2+0xe4>
    dd9c:	50c0042e 	bgeu	r10,r3,ddb0 <__ledf2+0xec>
    dda0:	283fe81e 	bne	r5,zero,dd44 <__alt_data_end+0xff00dd44>
    dda4:	003ff806 	br	dd88 <__alt_data_end+0xff00dd88>
    dda8:	313fee36 	bltu	r6,r4,dd64 <__alt_data_end+0xff00dd64>
    ddac:	21bffc36 	bltu	r4,r6,dda0 <__alt_data_end+0xff00dda0>
    ddb0:	0005883a 	mov	r2,zero
    ddb4:	f800283a 	ret

0000ddb8 <__muldf3>:
    ddb8:	defff304 	addi	sp,sp,-52
    ddbc:	2804d53a 	srli	r2,r5,20
    ddc0:	dd800915 	stw	r22,36(sp)
    ddc4:	282cd7fa 	srli	r22,r5,31
    ddc8:	dc000315 	stw	r16,12(sp)
    ddcc:	04000434 	movhi	r16,16
    ddd0:	dd400815 	stw	r21,32(sp)
    ddd4:	dc800515 	stw	r18,20(sp)
    ddd8:	843fffc4 	addi	r16,r16,-1
    dddc:	dfc00c15 	stw	ra,48(sp)
    dde0:	df000b15 	stw	fp,44(sp)
    dde4:	ddc00a15 	stw	r23,40(sp)
    dde8:	dd000715 	stw	r20,28(sp)
    ddec:	dcc00615 	stw	r19,24(sp)
    ddf0:	dc400415 	stw	r17,16(sp)
    ddf4:	1481ffcc 	andi	r18,r2,2047
    ddf8:	2c20703a 	and	r16,r5,r16
    ddfc:	b02b883a 	mov	r21,r22
    de00:	b2403fcc 	andi	r9,r22,255
    de04:	90006026 	beq	r18,zero,df88 <__muldf3+0x1d0>
    de08:	0081ffc4 	movi	r2,2047
    de0c:	2029883a 	mov	r20,r4
    de10:	90803626 	beq	r18,r2,deec <__muldf3+0x134>
    de14:	80800434 	orhi	r2,r16,16
    de18:	100490fa 	slli	r2,r2,3
    de1c:	2020d77a 	srli	r16,r4,29
    de20:	202890fa 	slli	r20,r4,3
    de24:	94bf0044 	addi	r18,r18,-1023
    de28:	80a0b03a 	or	r16,r16,r2
    de2c:	0027883a 	mov	r19,zero
    de30:	0039883a 	mov	fp,zero
    de34:	3804d53a 	srli	r2,r7,20
    de38:	382ed7fa 	srli	r23,r7,31
    de3c:	04400434 	movhi	r17,16
    de40:	8c7fffc4 	addi	r17,r17,-1
    de44:	1081ffcc 	andi	r2,r2,2047
    de48:	3011883a 	mov	r8,r6
    de4c:	3c62703a 	and	r17,r7,r17
    de50:	ba803fcc 	andi	r10,r23,255
    de54:	10006d26 	beq	r2,zero,e00c <__muldf3+0x254>
    de58:	00c1ffc4 	movi	r3,2047
    de5c:	10c06526 	beq	r2,r3,dff4 <__muldf3+0x23c>
    de60:	88c00434 	orhi	r3,r17,16
    de64:	180690fa 	slli	r3,r3,3
    de68:	3022d77a 	srli	r17,r6,29
    de6c:	301090fa 	slli	r8,r6,3
    de70:	10bf0044 	addi	r2,r2,-1023
    de74:	88e2b03a 	or	r17,r17,r3
    de78:	000b883a 	mov	r5,zero
    de7c:	9085883a 	add	r2,r18,r2
    de80:	2cc8b03a 	or	r4,r5,r19
    de84:	00c003c4 	movi	r3,15
    de88:	bdacf03a 	xor	r22,r23,r22
    de8c:	12c00044 	addi	r11,r2,1
    de90:	19009936 	bltu	r3,r4,e0f8 <__muldf3+0x340>
    de94:	200890ba 	slli	r4,r4,2
    de98:	00c00074 	movhi	r3,1
    de9c:	18f7ab04 	addi	r3,r3,-8532
    dea0:	20c9883a 	add	r4,r4,r3
    dea4:	20c00017 	ldw	r3,0(r4)
    dea8:	1800683a 	jmp	r3
    deac:	0000e0f8 	rdprs	zero,zero,899
    deb0:	0000df0c 	andi	zero,zero,892
    deb4:	0000df0c 	andi	zero,zero,892
    deb8:	0000df08 	cmpgei	zero,zero,892
    debc:	0000e0d4 	movui	zero,899
    dec0:	0000e0d4 	movui	zero,899
    dec4:	0000e0bc 	xorhi	zero,zero,898
    dec8:	0000df08 	cmpgei	zero,zero,892
    decc:	0000e0d4 	movui	zero,899
    ded0:	0000e0bc 	xorhi	zero,zero,898
    ded4:	0000e0d4 	movui	zero,899
    ded8:	0000df08 	cmpgei	zero,zero,892
    dedc:	0000e0e4 	muli	zero,zero,899
    dee0:	0000e0e4 	muli	zero,zero,899
    dee4:	0000e0e4 	muli	zero,zero,899
    dee8:	0000e300 	call	e30 <init_LCD+0x3c0>
    deec:	2404b03a 	or	r2,r4,r16
    def0:	10006f1e 	bne	r2,zero,e0b0 <__muldf3+0x2f8>
    def4:	04c00204 	movi	r19,8
    def8:	0021883a 	mov	r16,zero
    defc:	0029883a 	mov	r20,zero
    df00:	07000084 	movi	fp,2
    df04:	003fcb06 	br	de34 <__alt_data_end+0xff00de34>
    df08:	502d883a 	mov	r22,r10
    df0c:	00800084 	movi	r2,2
    df10:	28805726 	beq	r5,r2,e070 <__muldf3+0x2b8>
    df14:	008000c4 	movi	r2,3
    df18:	28816626 	beq	r5,r2,e4b4 <__muldf3+0x6fc>
    df1c:	00800044 	movi	r2,1
    df20:	2881411e 	bne	r5,r2,e428 <__muldf3+0x670>
    df24:	b02b883a 	mov	r21,r22
    df28:	0005883a 	mov	r2,zero
    df2c:	000b883a 	mov	r5,zero
    df30:	0029883a 	mov	r20,zero
    df34:	1004953a 	slli	r2,r2,20
    df38:	a8c03fcc 	andi	r3,r21,255
    df3c:	04400434 	movhi	r17,16
    df40:	8c7fffc4 	addi	r17,r17,-1
    df44:	180697fa 	slli	r3,r3,31
    df48:	2c4a703a 	and	r5,r5,r17
    df4c:	288ab03a 	or	r5,r5,r2
    df50:	28c6b03a 	or	r3,r5,r3
    df54:	a005883a 	mov	r2,r20
    df58:	dfc00c17 	ldw	ra,48(sp)
    df5c:	df000b17 	ldw	fp,44(sp)
    df60:	ddc00a17 	ldw	r23,40(sp)
    df64:	dd800917 	ldw	r22,36(sp)
    df68:	dd400817 	ldw	r21,32(sp)
    df6c:	dd000717 	ldw	r20,28(sp)
    df70:	dcc00617 	ldw	r19,24(sp)
    df74:	dc800517 	ldw	r18,20(sp)
    df78:	dc400417 	ldw	r17,16(sp)
    df7c:	dc000317 	ldw	r16,12(sp)
    df80:	dec00d04 	addi	sp,sp,52
    df84:	f800283a 	ret
    df88:	2404b03a 	or	r2,r4,r16
    df8c:	2027883a 	mov	r19,r4
    df90:	10004226 	beq	r2,zero,e09c <__muldf3+0x2e4>
    df94:	8000fc26 	beq	r16,zero,e388 <__muldf3+0x5d0>
    df98:	8009883a 	mov	r4,r16
    df9c:	d9800215 	stw	r6,8(sp)
    dfa0:	d9c00015 	stw	r7,0(sp)
    dfa4:	da400115 	stw	r9,4(sp)
    dfa8:	00031240 	call	3124 <__clzsi2>
    dfac:	d9800217 	ldw	r6,8(sp)
    dfb0:	d9c00017 	ldw	r7,0(sp)
    dfb4:	da400117 	ldw	r9,4(sp)
    dfb8:	113ffd44 	addi	r4,r2,-11
    dfbc:	00c00704 	movi	r3,28
    dfc0:	1900ed16 	blt	r3,r4,e378 <__muldf3+0x5c0>
    dfc4:	00c00744 	movi	r3,29
    dfc8:	147ffe04 	addi	r17,r2,-8
    dfcc:	1907c83a 	sub	r3,r3,r4
    dfd0:	8460983a 	sll	r16,r16,r17
    dfd4:	98c6d83a 	srl	r3,r19,r3
    dfd8:	9c68983a 	sll	r20,r19,r17
    dfdc:	1c20b03a 	or	r16,r3,r16
    dfe0:	1080fcc4 	addi	r2,r2,1011
    dfe4:	00a5c83a 	sub	r18,zero,r2
    dfe8:	0027883a 	mov	r19,zero
    dfec:	0039883a 	mov	fp,zero
    dff0:	003f9006 	br	de34 <__alt_data_end+0xff00de34>
    dff4:	3446b03a 	or	r3,r6,r17
    dff8:	1800261e 	bne	r3,zero,e094 <__muldf3+0x2dc>
    dffc:	0023883a 	mov	r17,zero
    e000:	0011883a 	mov	r8,zero
    e004:	01400084 	movi	r5,2
    e008:	003f9c06 	br	de7c <__alt_data_end+0xff00de7c>
    e00c:	3446b03a 	or	r3,r6,r17
    e010:	18001c26 	beq	r3,zero,e084 <__muldf3+0x2cc>
    e014:	8800ce26 	beq	r17,zero,e350 <__muldf3+0x598>
    e018:	8809883a 	mov	r4,r17
    e01c:	d9800215 	stw	r6,8(sp)
    e020:	da400115 	stw	r9,4(sp)
    e024:	da800015 	stw	r10,0(sp)
    e028:	00031240 	call	3124 <__clzsi2>
    e02c:	d9800217 	ldw	r6,8(sp)
    e030:	da400117 	ldw	r9,4(sp)
    e034:	da800017 	ldw	r10,0(sp)
    e038:	113ffd44 	addi	r4,r2,-11
    e03c:	00c00704 	movi	r3,28
    e040:	1900bf16 	blt	r3,r4,e340 <__muldf3+0x588>
    e044:	00c00744 	movi	r3,29
    e048:	123ffe04 	addi	r8,r2,-8
    e04c:	1907c83a 	sub	r3,r3,r4
    e050:	8a22983a 	sll	r17,r17,r8
    e054:	30c6d83a 	srl	r3,r6,r3
    e058:	3210983a 	sll	r8,r6,r8
    e05c:	1c62b03a 	or	r17,r3,r17
    e060:	1080fcc4 	addi	r2,r2,1011
    e064:	0085c83a 	sub	r2,zero,r2
    e068:	000b883a 	mov	r5,zero
    e06c:	003f8306 	br	de7c <__alt_data_end+0xff00de7c>
    e070:	b02b883a 	mov	r21,r22
    e074:	0081ffc4 	movi	r2,2047
    e078:	000b883a 	mov	r5,zero
    e07c:	0029883a 	mov	r20,zero
    e080:	003fac06 	br	df34 <__alt_data_end+0xff00df34>
    e084:	0023883a 	mov	r17,zero
    e088:	0011883a 	mov	r8,zero
    e08c:	01400044 	movi	r5,1
    e090:	003f7a06 	br	de7c <__alt_data_end+0xff00de7c>
    e094:	014000c4 	movi	r5,3
    e098:	003f7806 	br	de7c <__alt_data_end+0xff00de7c>
    e09c:	04c00104 	movi	r19,4
    e0a0:	0021883a 	mov	r16,zero
    e0a4:	0029883a 	mov	r20,zero
    e0a8:	07000044 	movi	fp,1
    e0ac:	003f6106 	br	de34 <__alt_data_end+0xff00de34>
    e0b0:	04c00304 	movi	r19,12
    e0b4:	070000c4 	movi	fp,3
    e0b8:	003f5e06 	br	de34 <__alt_data_end+0xff00de34>
    e0bc:	01400434 	movhi	r5,16
    e0c0:	002b883a 	mov	r21,zero
    e0c4:	297fffc4 	addi	r5,r5,-1
    e0c8:	053fffc4 	movi	r20,-1
    e0cc:	0081ffc4 	movi	r2,2047
    e0d0:	003f9806 	br	df34 <__alt_data_end+0xff00df34>
    e0d4:	8023883a 	mov	r17,r16
    e0d8:	a011883a 	mov	r8,r20
    e0dc:	e00b883a 	mov	r5,fp
    e0e0:	003f8a06 	br	df0c <__alt_data_end+0xff00df0c>
    e0e4:	8023883a 	mov	r17,r16
    e0e8:	a011883a 	mov	r8,r20
    e0ec:	482d883a 	mov	r22,r9
    e0f0:	e00b883a 	mov	r5,fp
    e0f4:	003f8506 	br	df0c <__alt_data_end+0xff00df0c>
    e0f8:	a00ad43a 	srli	r5,r20,16
    e0fc:	401ad43a 	srli	r13,r8,16
    e100:	a53fffcc 	andi	r20,r20,65535
    e104:	423fffcc 	andi	r8,r8,65535
    e108:	4519383a 	mul	r12,r8,r20
    e10c:	4147383a 	mul	r3,r8,r5
    e110:	6d09383a 	mul	r4,r13,r20
    e114:	600cd43a 	srli	r6,r12,16
    e118:	2b5d383a 	mul	r14,r5,r13
    e11c:	20c9883a 	add	r4,r4,r3
    e120:	310d883a 	add	r6,r6,r4
    e124:	30c0022e 	bgeu	r6,r3,e130 <__muldf3+0x378>
    e128:	00c00074 	movhi	r3,1
    e12c:	70dd883a 	add	r14,r14,r3
    e130:	8826d43a 	srli	r19,r17,16
    e134:	8bffffcc 	andi	r15,r17,65535
    e138:	7d23383a 	mul	r17,r15,r20
    e13c:	7949383a 	mul	r4,r15,r5
    e140:	9d29383a 	mul	r20,r19,r20
    e144:	8814d43a 	srli	r10,r17,16
    e148:	3012943a 	slli	r9,r6,16
    e14c:	a129883a 	add	r20,r20,r4
    e150:	633fffcc 	andi	r12,r12,65535
    e154:	5515883a 	add	r10,r10,r20
    e158:	3006d43a 	srli	r3,r6,16
    e15c:	4b13883a 	add	r9,r9,r12
    e160:	2ccb383a 	mul	r5,r5,r19
    e164:	5100022e 	bgeu	r10,r4,e170 <__muldf3+0x3b8>
    e168:	01000074 	movhi	r4,1
    e16c:	290b883a 	add	r5,r5,r4
    e170:	802ad43a 	srli	r21,r16,16
    e174:	843fffcc 	andi	r16,r16,65535
    e178:	440d383a 	mul	r6,r8,r16
    e17c:	4565383a 	mul	r18,r8,r21
    e180:	8349383a 	mul	r4,r16,r13
    e184:	500e943a 	slli	r7,r10,16
    e188:	3010d43a 	srli	r8,r6,16
    e18c:	5028d43a 	srli	r20,r10,16
    e190:	2489883a 	add	r4,r4,r18
    e194:	8abfffcc 	andi	r10,r17,65535
    e198:	3a95883a 	add	r10,r7,r10
    e19c:	4119883a 	add	r12,r8,r4
    e1a0:	a169883a 	add	r20,r20,r5
    e1a4:	1a87883a 	add	r3,r3,r10
    e1a8:	6d5b383a 	mul	r13,r13,r21
    e1ac:	6480022e 	bgeu	r12,r18,e1b8 <__muldf3+0x400>
    e1b0:	01000074 	movhi	r4,1
    e1b4:	691b883a 	add	r13,r13,r4
    e1b8:	7c25383a 	mul	r18,r15,r16
    e1bc:	7d4b383a 	mul	r5,r15,r21
    e1c0:	84cf383a 	mul	r7,r16,r19
    e1c4:	901ed43a 	srli	r15,r18,16
    e1c8:	6008d43a 	srli	r4,r12,16
    e1cc:	6010943a 	slli	r8,r12,16
    e1d0:	394f883a 	add	r7,r7,r5
    e1d4:	333fffcc 	andi	r12,r6,65535
    e1d8:	79df883a 	add	r15,r15,r7
    e1dc:	235b883a 	add	r13,r4,r13
    e1e0:	9d63383a 	mul	r17,r19,r21
    e1e4:	4309883a 	add	r4,r8,r12
    e1e8:	7940022e 	bgeu	r15,r5,e1f4 <__muldf3+0x43c>
    e1ec:	01400074 	movhi	r5,1
    e1f0:	8963883a 	add	r17,r17,r5
    e1f4:	780a943a 	slli	r5,r15,16
    e1f8:	91bfffcc 	andi	r6,r18,65535
    e1fc:	70c7883a 	add	r3,r14,r3
    e200:	298d883a 	add	r6,r5,r6
    e204:	1a8f803a 	cmpltu	r7,r3,r10
    e208:	350b883a 	add	r5,r6,r20
    e20c:	20c7883a 	add	r3,r4,r3
    e210:	3955883a 	add	r10,r7,r5
    e214:	1909803a 	cmpltu	r4,r3,r4
    e218:	6a91883a 	add	r8,r13,r10
    e21c:	780cd43a 	srli	r6,r15,16
    e220:	2219883a 	add	r12,r4,r8
    e224:	2d0b803a 	cmpltu	r5,r5,r20
    e228:	51cf803a 	cmpltu	r7,r10,r7
    e22c:	29ceb03a 	or	r7,r5,r7
    e230:	4351803a 	cmpltu	r8,r8,r13
    e234:	610b803a 	cmpltu	r5,r12,r4
    e238:	4148b03a 	or	r4,r8,r5
    e23c:	398f883a 	add	r7,r7,r6
    e240:	3909883a 	add	r4,r7,r4
    e244:	1810927a 	slli	r8,r3,9
    e248:	2449883a 	add	r4,r4,r17
    e24c:	2008927a 	slli	r4,r4,9
    e250:	6022d5fa 	srli	r17,r12,23
    e254:	1806d5fa 	srli	r3,r3,23
    e258:	4252b03a 	or	r9,r8,r9
    e25c:	600a927a 	slli	r5,r12,9
    e260:	4810c03a 	cmpne	r8,r9,zero
    e264:	2462b03a 	or	r17,r4,r17
    e268:	40c6b03a 	or	r3,r8,r3
    e26c:	8900402c 	andhi	r4,r17,256
    e270:	1950b03a 	or	r8,r3,r5
    e274:	20000726 	beq	r4,zero,e294 <__muldf3+0x4dc>
    e278:	4006d07a 	srli	r3,r8,1
    e27c:	880497fa 	slli	r2,r17,31
    e280:	4200004c 	andi	r8,r8,1
    e284:	8822d07a 	srli	r17,r17,1
    e288:	1a10b03a 	or	r8,r3,r8
    e28c:	1210b03a 	or	r8,r2,r8
    e290:	5805883a 	mov	r2,r11
    e294:	1140ffc4 	addi	r5,r2,1023
    e298:	0140440e 	bge	zero,r5,e3ac <__muldf3+0x5f4>
    e29c:	40c001cc 	andi	r3,r8,7
    e2a0:	18000726 	beq	r3,zero,e2c0 <__muldf3+0x508>
    e2a4:	40c003cc 	andi	r3,r8,15
    e2a8:	01000104 	movi	r4,4
    e2ac:	19000426 	beq	r3,r4,e2c0 <__muldf3+0x508>
    e2b0:	4107883a 	add	r3,r8,r4
    e2b4:	1a11803a 	cmpltu	r8,r3,r8
    e2b8:	8a23883a 	add	r17,r17,r8
    e2bc:	1811883a 	mov	r8,r3
    e2c0:	88c0402c 	andhi	r3,r17,256
    e2c4:	18000426 	beq	r3,zero,e2d8 <__muldf3+0x520>
    e2c8:	11410004 	addi	r5,r2,1024
    e2cc:	00bfc034 	movhi	r2,65280
    e2d0:	10bfffc4 	addi	r2,r2,-1
    e2d4:	88a2703a 	and	r17,r17,r2
    e2d8:	0081ff84 	movi	r2,2046
    e2dc:	117f6416 	blt	r2,r5,e070 <__alt_data_end+0xff00e070>
    e2e0:	8828977a 	slli	r20,r17,29
    e2e4:	4010d0fa 	srli	r8,r8,3
    e2e8:	8822927a 	slli	r17,r17,9
    e2ec:	2881ffcc 	andi	r2,r5,2047
    e2f0:	a228b03a 	or	r20,r20,r8
    e2f4:	880ad33a 	srli	r5,r17,12
    e2f8:	b02b883a 	mov	r21,r22
    e2fc:	003f0d06 	br	df34 <__alt_data_end+0xff00df34>
    e300:	8080022c 	andhi	r2,r16,8
    e304:	10000926 	beq	r2,zero,e32c <__muldf3+0x574>
    e308:	8880022c 	andhi	r2,r17,8
    e30c:	1000071e 	bne	r2,zero,e32c <__muldf3+0x574>
    e310:	00800434 	movhi	r2,16
    e314:	89400234 	orhi	r5,r17,8
    e318:	10bfffc4 	addi	r2,r2,-1
    e31c:	b82b883a 	mov	r21,r23
    e320:	288a703a 	and	r5,r5,r2
    e324:	4029883a 	mov	r20,r8
    e328:	003f6806 	br	e0cc <__alt_data_end+0xff00e0cc>
    e32c:	00800434 	movhi	r2,16
    e330:	81400234 	orhi	r5,r16,8
    e334:	10bfffc4 	addi	r2,r2,-1
    e338:	288a703a 	and	r5,r5,r2
    e33c:	003f6306 	br	e0cc <__alt_data_end+0xff00e0cc>
    e340:	147ff604 	addi	r17,r2,-40
    e344:	3462983a 	sll	r17,r6,r17
    e348:	0011883a 	mov	r8,zero
    e34c:	003f4406 	br	e060 <__alt_data_end+0xff00e060>
    e350:	3009883a 	mov	r4,r6
    e354:	d9800215 	stw	r6,8(sp)
    e358:	da400115 	stw	r9,4(sp)
    e35c:	da800015 	stw	r10,0(sp)
    e360:	00031240 	call	3124 <__clzsi2>
    e364:	10800804 	addi	r2,r2,32
    e368:	da800017 	ldw	r10,0(sp)
    e36c:	da400117 	ldw	r9,4(sp)
    e370:	d9800217 	ldw	r6,8(sp)
    e374:	003f3006 	br	e038 <__alt_data_end+0xff00e038>
    e378:	143ff604 	addi	r16,r2,-40
    e37c:	9c20983a 	sll	r16,r19,r16
    e380:	0029883a 	mov	r20,zero
    e384:	003f1606 	br	dfe0 <__alt_data_end+0xff00dfe0>
    e388:	d9800215 	stw	r6,8(sp)
    e38c:	d9c00015 	stw	r7,0(sp)
    e390:	da400115 	stw	r9,4(sp)
    e394:	00031240 	call	3124 <__clzsi2>
    e398:	10800804 	addi	r2,r2,32
    e39c:	da400117 	ldw	r9,4(sp)
    e3a0:	d9c00017 	ldw	r7,0(sp)
    e3a4:	d9800217 	ldw	r6,8(sp)
    e3a8:	003f0306 	br	dfb8 <__alt_data_end+0xff00dfb8>
    e3ac:	00c00044 	movi	r3,1
    e3b0:	1947c83a 	sub	r3,r3,r5
    e3b4:	00800e04 	movi	r2,56
    e3b8:	10feda16 	blt	r2,r3,df24 <__alt_data_end+0xff00df24>
    e3bc:	008007c4 	movi	r2,31
    e3c0:	10c01b16 	blt	r2,r3,e430 <__muldf3+0x678>
    e3c4:	00800804 	movi	r2,32
    e3c8:	10c5c83a 	sub	r2,r2,r3
    e3cc:	888a983a 	sll	r5,r17,r2
    e3d0:	40c8d83a 	srl	r4,r8,r3
    e3d4:	4084983a 	sll	r2,r8,r2
    e3d8:	88e2d83a 	srl	r17,r17,r3
    e3dc:	2906b03a 	or	r3,r5,r4
    e3e0:	1004c03a 	cmpne	r2,r2,zero
    e3e4:	1886b03a 	or	r3,r3,r2
    e3e8:	188001cc 	andi	r2,r3,7
    e3ec:	10000726 	beq	r2,zero,e40c <__muldf3+0x654>
    e3f0:	188003cc 	andi	r2,r3,15
    e3f4:	01000104 	movi	r4,4
    e3f8:	11000426 	beq	r2,r4,e40c <__muldf3+0x654>
    e3fc:	1805883a 	mov	r2,r3
    e400:	10c00104 	addi	r3,r2,4
    e404:	1885803a 	cmpltu	r2,r3,r2
    e408:	88a3883a 	add	r17,r17,r2
    e40c:	8880202c 	andhi	r2,r17,128
    e410:	10001c26 	beq	r2,zero,e484 <__muldf3+0x6cc>
    e414:	b02b883a 	mov	r21,r22
    e418:	00800044 	movi	r2,1
    e41c:	000b883a 	mov	r5,zero
    e420:	0029883a 	mov	r20,zero
    e424:	003ec306 	br	df34 <__alt_data_end+0xff00df34>
    e428:	5805883a 	mov	r2,r11
    e42c:	003f9906 	br	e294 <__alt_data_end+0xff00e294>
    e430:	00bff844 	movi	r2,-31
    e434:	1145c83a 	sub	r2,r2,r5
    e438:	8888d83a 	srl	r4,r17,r2
    e43c:	00800804 	movi	r2,32
    e440:	18801a26 	beq	r3,r2,e4ac <__muldf3+0x6f4>
    e444:	00801004 	movi	r2,64
    e448:	10c5c83a 	sub	r2,r2,r3
    e44c:	8884983a 	sll	r2,r17,r2
    e450:	1204b03a 	or	r2,r2,r8
    e454:	1004c03a 	cmpne	r2,r2,zero
    e458:	2084b03a 	or	r2,r4,r2
    e45c:	144001cc 	andi	r17,r2,7
    e460:	88000d1e 	bne	r17,zero,e498 <__muldf3+0x6e0>
    e464:	000b883a 	mov	r5,zero
    e468:	1028d0fa 	srli	r20,r2,3
    e46c:	b02b883a 	mov	r21,r22
    e470:	0005883a 	mov	r2,zero
    e474:	a468b03a 	or	r20,r20,r17
    e478:	003eae06 	br	df34 <__alt_data_end+0xff00df34>
    e47c:	1007883a 	mov	r3,r2
    e480:	0023883a 	mov	r17,zero
    e484:	880a927a 	slli	r5,r17,9
    e488:	1805883a 	mov	r2,r3
    e48c:	8822977a 	slli	r17,r17,29
    e490:	280ad33a 	srli	r5,r5,12
    e494:	003ff406 	br	e468 <__alt_data_end+0xff00e468>
    e498:	10c003cc 	andi	r3,r2,15
    e49c:	01000104 	movi	r4,4
    e4a0:	193ff626 	beq	r3,r4,e47c <__alt_data_end+0xff00e47c>
    e4a4:	0023883a 	mov	r17,zero
    e4a8:	003fd506 	br	e400 <__alt_data_end+0xff00e400>
    e4ac:	0005883a 	mov	r2,zero
    e4b0:	003fe706 	br	e450 <__alt_data_end+0xff00e450>
    e4b4:	00800434 	movhi	r2,16
    e4b8:	89400234 	orhi	r5,r17,8
    e4bc:	10bfffc4 	addi	r2,r2,-1
    e4c0:	b02b883a 	mov	r21,r22
    e4c4:	288a703a 	and	r5,r5,r2
    e4c8:	4029883a 	mov	r20,r8
    e4cc:	003eff06 	br	e0cc <__alt_data_end+0xff00e0cc>

0000e4d0 <__subdf3>:
    e4d0:	02000434 	movhi	r8,16
    e4d4:	423fffc4 	addi	r8,r8,-1
    e4d8:	defffb04 	addi	sp,sp,-20
    e4dc:	2a14703a 	and	r10,r5,r8
    e4e0:	3812d53a 	srli	r9,r7,20
    e4e4:	3a10703a 	and	r8,r7,r8
    e4e8:	2006d77a 	srli	r3,r4,29
    e4ec:	3004d77a 	srli	r2,r6,29
    e4f0:	dc000015 	stw	r16,0(sp)
    e4f4:	501490fa 	slli	r10,r10,3
    e4f8:	2820d53a 	srli	r16,r5,20
    e4fc:	401090fa 	slli	r8,r8,3
    e500:	dc800215 	stw	r18,8(sp)
    e504:	dc400115 	stw	r17,4(sp)
    e508:	dfc00415 	stw	ra,16(sp)
    e50c:	202290fa 	slli	r17,r4,3
    e510:	dcc00315 	stw	r19,12(sp)
    e514:	4a41ffcc 	andi	r9,r9,2047
    e518:	0101ffc4 	movi	r4,2047
    e51c:	2824d7fa 	srli	r18,r5,31
    e520:	8401ffcc 	andi	r16,r16,2047
    e524:	50c6b03a 	or	r3,r10,r3
    e528:	380ed7fa 	srli	r7,r7,31
    e52c:	408ab03a 	or	r5,r8,r2
    e530:	300c90fa 	slli	r6,r6,3
    e534:	49009626 	beq	r9,r4,e790 <__subdf3+0x2c0>
    e538:	39c0005c 	xori	r7,r7,1
    e53c:	8245c83a 	sub	r2,r16,r9
    e540:	3c807426 	beq	r7,r18,e714 <__subdf3+0x244>
    e544:	0080af0e 	bge	zero,r2,e804 <__subdf3+0x334>
    e548:	48002a1e 	bne	r9,zero,e5f4 <__subdf3+0x124>
    e54c:	2988b03a 	or	r4,r5,r6
    e550:	20009a1e 	bne	r4,zero,e7bc <__subdf3+0x2ec>
    e554:	888001cc 	andi	r2,r17,7
    e558:	10000726 	beq	r2,zero,e578 <__subdf3+0xa8>
    e55c:	888003cc 	andi	r2,r17,15
    e560:	01000104 	movi	r4,4
    e564:	11000426 	beq	r2,r4,e578 <__subdf3+0xa8>
    e568:	890b883a 	add	r5,r17,r4
    e56c:	2c63803a 	cmpltu	r17,r5,r17
    e570:	1c47883a 	add	r3,r3,r17
    e574:	2823883a 	mov	r17,r5
    e578:	1880202c 	andhi	r2,r3,128
    e57c:	10005926 	beq	r2,zero,e6e4 <__subdf3+0x214>
    e580:	84000044 	addi	r16,r16,1
    e584:	0081ffc4 	movi	r2,2047
    e588:	8080be26 	beq	r16,r2,e884 <__subdf3+0x3b4>
    e58c:	017fe034 	movhi	r5,65408
    e590:	297fffc4 	addi	r5,r5,-1
    e594:	1946703a 	and	r3,r3,r5
    e598:	1804977a 	slli	r2,r3,29
    e59c:	1806927a 	slli	r3,r3,9
    e5a0:	8822d0fa 	srli	r17,r17,3
    e5a4:	8401ffcc 	andi	r16,r16,2047
    e5a8:	180ad33a 	srli	r5,r3,12
    e5ac:	9100004c 	andi	r4,r18,1
    e5b0:	1444b03a 	or	r2,r2,r17
    e5b4:	80c1ffcc 	andi	r3,r16,2047
    e5b8:	1820953a 	slli	r16,r3,20
    e5bc:	20c03fcc 	andi	r3,r4,255
    e5c0:	180897fa 	slli	r4,r3,31
    e5c4:	00c00434 	movhi	r3,16
    e5c8:	18ffffc4 	addi	r3,r3,-1
    e5cc:	28c6703a 	and	r3,r5,r3
    e5d0:	1c06b03a 	or	r3,r3,r16
    e5d4:	1906b03a 	or	r3,r3,r4
    e5d8:	dfc00417 	ldw	ra,16(sp)
    e5dc:	dcc00317 	ldw	r19,12(sp)
    e5e0:	dc800217 	ldw	r18,8(sp)
    e5e4:	dc400117 	ldw	r17,4(sp)
    e5e8:	dc000017 	ldw	r16,0(sp)
    e5ec:	dec00504 	addi	sp,sp,20
    e5f0:	f800283a 	ret
    e5f4:	0101ffc4 	movi	r4,2047
    e5f8:	813fd626 	beq	r16,r4,e554 <__alt_data_end+0xff00e554>
    e5fc:	29402034 	orhi	r5,r5,128
    e600:	01000e04 	movi	r4,56
    e604:	2080a316 	blt	r4,r2,e894 <__subdf3+0x3c4>
    e608:	010007c4 	movi	r4,31
    e60c:	2080c616 	blt	r4,r2,e928 <__subdf3+0x458>
    e610:	01000804 	movi	r4,32
    e614:	2089c83a 	sub	r4,r4,r2
    e618:	2910983a 	sll	r8,r5,r4
    e61c:	308ed83a 	srl	r7,r6,r2
    e620:	3108983a 	sll	r4,r6,r4
    e624:	2884d83a 	srl	r2,r5,r2
    e628:	41ccb03a 	or	r6,r8,r7
    e62c:	2008c03a 	cmpne	r4,r4,zero
    e630:	310cb03a 	or	r6,r6,r4
    e634:	898dc83a 	sub	r6,r17,r6
    e638:	89a3803a 	cmpltu	r17,r17,r6
    e63c:	1887c83a 	sub	r3,r3,r2
    e640:	1c47c83a 	sub	r3,r3,r17
    e644:	3023883a 	mov	r17,r6
    e648:	1880202c 	andhi	r2,r3,128
    e64c:	10002326 	beq	r2,zero,e6dc <__subdf3+0x20c>
    e650:	04c02034 	movhi	r19,128
    e654:	9cffffc4 	addi	r19,r19,-1
    e658:	1ce6703a 	and	r19,r3,r19
    e65c:	98007a26 	beq	r19,zero,e848 <__subdf3+0x378>
    e660:	9809883a 	mov	r4,r19
    e664:	00031240 	call	3124 <__clzsi2>
    e668:	113ffe04 	addi	r4,r2,-8
    e66c:	00c007c4 	movi	r3,31
    e670:	19007b16 	blt	r3,r4,e860 <__subdf3+0x390>
    e674:	00800804 	movi	r2,32
    e678:	1105c83a 	sub	r2,r2,r4
    e67c:	8884d83a 	srl	r2,r17,r2
    e680:	9906983a 	sll	r3,r19,r4
    e684:	8922983a 	sll	r17,r17,r4
    e688:	10c4b03a 	or	r2,r2,r3
    e68c:	24007816 	blt	r4,r16,e870 <__subdf3+0x3a0>
    e690:	2421c83a 	sub	r16,r4,r16
    e694:	80c00044 	addi	r3,r16,1
    e698:	010007c4 	movi	r4,31
    e69c:	20c09516 	blt	r4,r3,e8f4 <__subdf3+0x424>
    e6a0:	01400804 	movi	r5,32
    e6a4:	28cbc83a 	sub	r5,r5,r3
    e6a8:	88c8d83a 	srl	r4,r17,r3
    e6ac:	8962983a 	sll	r17,r17,r5
    e6b0:	114a983a 	sll	r5,r2,r5
    e6b4:	10c6d83a 	srl	r3,r2,r3
    e6b8:	8804c03a 	cmpne	r2,r17,zero
    e6bc:	290ab03a 	or	r5,r5,r4
    e6c0:	28a2b03a 	or	r17,r5,r2
    e6c4:	0021883a 	mov	r16,zero
    e6c8:	003fa206 	br	e554 <__alt_data_end+0xff00e554>
    e6cc:	2090b03a 	or	r8,r4,r2
    e6d0:	40018e26 	beq	r8,zero,ed0c <__subdf3+0x83c>
    e6d4:	1007883a 	mov	r3,r2
    e6d8:	2023883a 	mov	r17,r4
    e6dc:	888001cc 	andi	r2,r17,7
    e6e0:	103f9e1e 	bne	r2,zero,e55c <__alt_data_end+0xff00e55c>
    e6e4:	1804977a 	slli	r2,r3,29
    e6e8:	8822d0fa 	srli	r17,r17,3
    e6ec:	1810d0fa 	srli	r8,r3,3
    e6f0:	9100004c 	andi	r4,r18,1
    e6f4:	1444b03a 	or	r2,r2,r17
    e6f8:	00c1ffc4 	movi	r3,2047
    e6fc:	80c02826 	beq	r16,r3,e7a0 <__subdf3+0x2d0>
    e700:	01400434 	movhi	r5,16
    e704:	297fffc4 	addi	r5,r5,-1
    e708:	80e0703a 	and	r16,r16,r3
    e70c:	414a703a 	and	r5,r8,r5
    e710:	003fa806 	br	e5b4 <__alt_data_end+0xff00e5b4>
    e714:	0080630e 	bge	zero,r2,e8a4 <__subdf3+0x3d4>
    e718:	48003026 	beq	r9,zero,e7dc <__subdf3+0x30c>
    e71c:	0101ffc4 	movi	r4,2047
    e720:	813f8c26 	beq	r16,r4,e554 <__alt_data_end+0xff00e554>
    e724:	29402034 	orhi	r5,r5,128
    e728:	01000e04 	movi	r4,56
    e72c:	2080a90e 	bge	r4,r2,e9d4 <__subdf3+0x504>
    e730:	298cb03a 	or	r6,r5,r6
    e734:	3012c03a 	cmpne	r9,r6,zero
    e738:	0005883a 	mov	r2,zero
    e73c:	4c53883a 	add	r9,r9,r17
    e740:	4c63803a 	cmpltu	r17,r9,r17
    e744:	10c7883a 	add	r3,r2,r3
    e748:	88c7883a 	add	r3,r17,r3
    e74c:	4823883a 	mov	r17,r9
    e750:	1880202c 	andhi	r2,r3,128
    e754:	1000d026 	beq	r2,zero,ea98 <__subdf3+0x5c8>
    e758:	84000044 	addi	r16,r16,1
    e75c:	0081ffc4 	movi	r2,2047
    e760:	8080fe26 	beq	r16,r2,eb5c <__subdf3+0x68c>
    e764:	00bfe034 	movhi	r2,65408
    e768:	10bfffc4 	addi	r2,r2,-1
    e76c:	1886703a 	and	r3,r3,r2
    e770:	880ad07a 	srli	r5,r17,1
    e774:	180497fa 	slli	r2,r3,31
    e778:	8900004c 	andi	r4,r17,1
    e77c:	2922b03a 	or	r17,r5,r4
    e780:	1806d07a 	srli	r3,r3,1
    e784:	1462b03a 	or	r17,r2,r17
    e788:	3825883a 	mov	r18,r7
    e78c:	003f7106 	br	e554 <__alt_data_end+0xff00e554>
    e790:	2984b03a 	or	r2,r5,r6
    e794:	103f6826 	beq	r2,zero,e538 <__alt_data_end+0xff00e538>
    e798:	39c03fcc 	andi	r7,r7,255
    e79c:	003f6706 	br	e53c <__alt_data_end+0xff00e53c>
    e7a0:	4086b03a 	or	r3,r8,r2
    e7a4:	18015226 	beq	r3,zero,ecf0 <__subdf3+0x820>
    e7a8:	00c00434 	movhi	r3,16
    e7ac:	41400234 	orhi	r5,r8,8
    e7b0:	18ffffc4 	addi	r3,r3,-1
    e7b4:	28ca703a 	and	r5,r5,r3
    e7b8:	003f7e06 	br	e5b4 <__alt_data_end+0xff00e5b4>
    e7bc:	10bfffc4 	addi	r2,r2,-1
    e7c0:	1000491e 	bne	r2,zero,e8e8 <__subdf3+0x418>
    e7c4:	898fc83a 	sub	r7,r17,r6
    e7c8:	89e3803a 	cmpltu	r17,r17,r7
    e7cc:	1947c83a 	sub	r3,r3,r5
    e7d0:	1c47c83a 	sub	r3,r3,r17
    e7d4:	3823883a 	mov	r17,r7
    e7d8:	003f9b06 	br	e648 <__alt_data_end+0xff00e648>
    e7dc:	2988b03a 	or	r4,r5,r6
    e7e0:	203f5c26 	beq	r4,zero,e554 <__alt_data_end+0xff00e554>
    e7e4:	10bfffc4 	addi	r2,r2,-1
    e7e8:	1000931e 	bne	r2,zero,ea38 <__subdf3+0x568>
    e7ec:	898d883a 	add	r6,r17,r6
    e7f0:	3463803a 	cmpltu	r17,r6,r17
    e7f4:	1947883a 	add	r3,r3,r5
    e7f8:	88c7883a 	add	r3,r17,r3
    e7fc:	3023883a 	mov	r17,r6
    e800:	003fd306 	br	e750 <__alt_data_end+0xff00e750>
    e804:	1000541e 	bne	r2,zero,e958 <__subdf3+0x488>
    e808:	80800044 	addi	r2,r16,1
    e80c:	1081ffcc 	andi	r2,r2,2047
    e810:	01000044 	movi	r4,1
    e814:	2080a20e 	bge	r4,r2,eaa0 <__subdf3+0x5d0>
    e818:	8989c83a 	sub	r4,r17,r6
    e81c:	8905803a 	cmpltu	r2,r17,r4
    e820:	1967c83a 	sub	r19,r3,r5
    e824:	98a7c83a 	sub	r19,r19,r2
    e828:	9880202c 	andhi	r2,r19,128
    e82c:	10006326 	beq	r2,zero,e9bc <__subdf3+0x4ec>
    e830:	3463c83a 	sub	r17,r6,r17
    e834:	28c7c83a 	sub	r3,r5,r3
    e838:	344d803a 	cmpltu	r6,r6,r17
    e83c:	19a7c83a 	sub	r19,r3,r6
    e840:	3825883a 	mov	r18,r7
    e844:	983f861e 	bne	r19,zero,e660 <__alt_data_end+0xff00e660>
    e848:	8809883a 	mov	r4,r17
    e84c:	00031240 	call	3124 <__clzsi2>
    e850:	10800804 	addi	r2,r2,32
    e854:	113ffe04 	addi	r4,r2,-8
    e858:	00c007c4 	movi	r3,31
    e85c:	193f850e 	bge	r3,r4,e674 <__alt_data_end+0xff00e674>
    e860:	10bff604 	addi	r2,r2,-40
    e864:	8884983a 	sll	r2,r17,r2
    e868:	0023883a 	mov	r17,zero
    e86c:	243f880e 	bge	r4,r16,e690 <__alt_data_end+0xff00e690>
    e870:	00ffe034 	movhi	r3,65408
    e874:	18ffffc4 	addi	r3,r3,-1
    e878:	8121c83a 	sub	r16,r16,r4
    e87c:	10c6703a 	and	r3,r2,r3
    e880:	003f3406 	br	e554 <__alt_data_end+0xff00e554>
    e884:	9100004c 	andi	r4,r18,1
    e888:	000b883a 	mov	r5,zero
    e88c:	0005883a 	mov	r2,zero
    e890:	003f4806 	br	e5b4 <__alt_data_end+0xff00e5b4>
    e894:	298cb03a 	or	r6,r5,r6
    e898:	300cc03a 	cmpne	r6,r6,zero
    e89c:	0005883a 	mov	r2,zero
    e8a0:	003f6406 	br	e634 <__alt_data_end+0xff00e634>
    e8a4:	10009a1e 	bne	r2,zero,eb10 <__subdf3+0x640>
    e8a8:	82400044 	addi	r9,r16,1
    e8ac:	4881ffcc 	andi	r2,r9,2047
    e8b0:	02800044 	movi	r10,1
    e8b4:	5080670e 	bge	r10,r2,ea54 <__subdf3+0x584>
    e8b8:	0081ffc4 	movi	r2,2047
    e8bc:	4880af26 	beq	r9,r2,eb7c <__subdf3+0x6ac>
    e8c0:	898d883a 	add	r6,r17,r6
    e8c4:	1945883a 	add	r2,r3,r5
    e8c8:	3447803a 	cmpltu	r3,r6,r17
    e8cc:	1887883a 	add	r3,r3,r2
    e8d0:	182297fa 	slli	r17,r3,31
    e8d4:	300cd07a 	srli	r6,r6,1
    e8d8:	1806d07a 	srli	r3,r3,1
    e8dc:	4821883a 	mov	r16,r9
    e8e0:	89a2b03a 	or	r17,r17,r6
    e8e4:	003f1b06 	br	e554 <__alt_data_end+0xff00e554>
    e8e8:	0101ffc4 	movi	r4,2047
    e8ec:	813f441e 	bne	r16,r4,e600 <__alt_data_end+0xff00e600>
    e8f0:	003f1806 	br	e554 <__alt_data_end+0xff00e554>
    e8f4:	843ff844 	addi	r16,r16,-31
    e8f8:	01400804 	movi	r5,32
    e8fc:	1408d83a 	srl	r4,r2,r16
    e900:	19405026 	beq	r3,r5,ea44 <__subdf3+0x574>
    e904:	01401004 	movi	r5,64
    e908:	28c7c83a 	sub	r3,r5,r3
    e90c:	10c4983a 	sll	r2,r2,r3
    e910:	88a2b03a 	or	r17,r17,r2
    e914:	8822c03a 	cmpne	r17,r17,zero
    e918:	2462b03a 	or	r17,r4,r17
    e91c:	0007883a 	mov	r3,zero
    e920:	0021883a 	mov	r16,zero
    e924:	003f6d06 	br	e6dc <__alt_data_end+0xff00e6dc>
    e928:	11fff804 	addi	r7,r2,-32
    e92c:	01000804 	movi	r4,32
    e930:	29ced83a 	srl	r7,r5,r7
    e934:	11004526 	beq	r2,r4,ea4c <__subdf3+0x57c>
    e938:	01001004 	movi	r4,64
    e93c:	2089c83a 	sub	r4,r4,r2
    e940:	2904983a 	sll	r2,r5,r4
    e944:	118cb03a 	or	r6,r2,r6
    e948:	300cc03a 	cmpne	r6,r6,zero
    e94c:	398cb03a 	or	r6,r7,r6
    e950:	0005883a 	mov	r2,zero
    e954:	003f3706 	br	e634 <__alt_data_end+0xff00e634>
    e958:	80002a26 	beq	r16,zero,ea04 <__subdf3+0x534>
    e95c:	0101ffc4 	movi	r4,2047
    e960:	49006626 	beq	r9,r4,eafc <__subdf3+0x62c>
    e964:	0085c83a 	sub	r2,zero,r2
    e968:	18c02034 	orhi	r3,r3,128
    e96c:	01000e04 	movi	r4,56
    e970:	20807e16 	blt	r4,r2,eb6c <__subdf3+0x69c>
    e974:	010007c4 	movi	r4,31
    e978:	2080e716 	blt	r4,r2,ed18 <__subdf3+0x848>
    e97c:	01000804 	movi	r4,32
    e980:	2089c83a 	sub	r4,r4,r2
    e984:	1914983a 	sll	r10,r3,r4
    e988:	8890d83a 	srl	r8,r17,r2
    e98c:	8908983a 	sll	r4,r17,r4
    e990:	1884d83a 	srl	r2,r3,r2
    e994:	5222b03a 	or	r17,r10,r8
    e998:	2006c03a 	cmpne	r3,r4,zero
    e99c:	88e2b03a 	or	r17,r17,r3
    e9a0:	3463c83a 	sub	r17,r6,r17
    e9a4:	2885c83a 	sub	r2,r5,r2
    e9a8:	344d803a 	cmpltu	r6,r6,r17
    e9ac:	1187c83a 	sub	r3,r2,r6
    e9b0:	4821883a 	mov	r16,r9
    e9b4:	3825883a 	mov	r18,r7
    e9b8:	003f2306 	br	e648 <__alt_data_end+0xff00e648>
    e9bc:	24d0b03a 	or	r8,r4,r19
    e9c0:	40001b1e 	bne	r8,zero,ea30 <__subdf3+0x560>
    e9c4:	0005883a 	mov	r2,zero
    e9c8:	0009883a 	mov	r4,zero
    e9cc:	0021883a 	mov	r16,zero
    e9d0:	003f4906 	br	e6f8 <__alt_data_end+0xff00e6f8>
    e9d4:	010007c4 	movi	r4,31
    e9d8:	20803a16 	blt	r4,r2,eac4 <__subdf3+0x5f4>
    e9dc:	01000804 	movi	r4,32
    e9e0:	2089c83a 	sub	r4,r4,r2
    e9e4:	2912983a 	sll	r9,r5,r4
    e9e8:	3090d83a 	srl	r8,r6,r2
    e9ec:	3108983a 	sll	r4,r6,r4
    e9f0:	2884d83a 	srl	r2,r5,r2
    e9f4:	4a12b03a 	or	r9,r9,r8
    e9f8:	2008c03a 	cmpne	r4,r4,zero
    e9fc:	4912b03a 	or	r9,r9,r4
    ea00:	003f4e06 	br	e73c <__alt_data_end+0xff00e73c>
    ea04:	1c48b03a 	or	r4,r3,r17
    ea08:	20003c26 	beq	r4,zero,eafc <__subdf3+0x62c>
    ea0c:	0084303a 	nor	r2,zero,r2
    ea10:	1000381e 	bne	r2,zero,eaf4 <__subdf3+0x624>
    ea14:	3463c83a 	sub	r17,r6,r17
    ea18:	28c5c83a 	sub	r2,r5,r3
    ea1c:	344d803a 	cmpltu	r6,r6,r17
    ea20:	1187c83a 	sub	r3,r2,r6
    ea24:	4821883a 	mov	r16,r9
    ea28:	3825883a 	mov	r18,r7
    ea2c:	003f0606 	br	e648 <__alt_data_end+0xff00e648>
    ea30:	2023883a 	mov	r17,r4
    ea34:	003f0906 	br	e65c <__alt_data_end+0xff00e65c>
    ea38:	0101ffc4 	movi	r4,2047
    ea3c:	813f3a1e 	bne	r16,r4,e728 <__alt_data_end+0xff00e728>
    ea40:	003ec406 	br	e554 <__alt_data_end+0xff00e554>
    ea44:	0005883a 	mov	r2,zero
    ea48:	003fb106 	br	e910 <__alt_data_end+0xff00e910>
    ea4c:	0005883a 	mov	r2,zero
    ea50:	003fbc06 	br	e944 <__alt_data_end+0xff00e944>
    ea54:	1c44b03a 	or	r2,r3,r17
    ea58:	80008e1e 	bne	r16,zero,ec94 <__subdf3+0x7c4>
    ea5c:	1000c826 	beq	r2,zero,ed80 <__subdf3+0x8b0>
    ea60:	2984b03a 	or	r2,r5,r6
    ea64:	103ebb26 	beq	r2,zero,e554 <__alt_data_end+0xff00e554>
    ea68:	8989883a 	add	r4,r17,r6
    ea6c:	1945883a 	add	r2,r3,r5
    ea70:	2447803a 	cmpltu	r3,r4,r17
    ea74:	1887883a 	add	r3,r3,r2
    ea78:	1880202c 	andhi	r2,r3,128
    ea7c:	2023883a 	mov	r17,r4
    ea80:	103f1626 	beq	r2,zero,e6dc <__alt_data_end+0xff00e6dc>
    ea84:	00bfe034 	movhi	r2,65408
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	5021883a 	mov	r16,r10
    ea90:	1886703a 	and	r3,r3,r2
    ea94:	003eaf06 	br	e554 <__alt_data_end+0xff00e554>
    ea98:	3825883a 	mov	r18,r7
    ea9c:	003f0f06 	br	e6dc <__alt_data_end+0xff00e6dc>
    eaa0:	1c44b03a 	or	r2,r3,r17
    eaa4:	8000251e 	bne	r16,zero,eb3c <__subdf3+0x66c>
    eaa8:	1000661e 	bne	r2,zero,ec44 <__subdf3+0x774>
    eaac:	2990b03a 	or	r8,r5,r6
    eab0:	40009626 	beq	r8,zero,ed0c <__subdf3+0x83c>
    eab4:	2807883a 	mov	r3,r5
    eab8:	3023883a 	mov	r17,r6
    eabc:	3825883a 	mov	r18,r7
    eac0:	003ea406 	br	e554 <__alt_data_end+0xff00e554>
    eac4:	127ff804 	addi	r9,r2,-32
    eac8:	01000804 	movi	r4,32
    eacc:	2a52d83a 	srl	r9,r5,r9
    ead0:	11008c26 	beq	r2,r4,ed04 <__subdf3+0x834>
    ead4:	01001004 	movi	r4,64
    ead8:	2085c83a 	sub	r2,r4,r2
    eadc:	2884983a 	sll	r2,r5,r2
    eae0:	118cb03a 	or	r6,r2,r6
    eae4:	300cc03a 	cmpne	r6,r6,zero
    eae8:	4992b03a 	or	r9,r9,r6
    eaec:	0005883a 	mov	r2,zero
    eaf0:	003f1206 	br	e73c <__alt_data_end+0xff00e73c>
    eaf4:	0101ffc4 	movi	r4,2047
    eaf8:	493f9c1e 	bne	r9,r4,e96c <__alt_data_end+0xff00e96c>
    eafc:	2807883a 	mov	r3,r5
    eb00:	3023883a 	mov	r17,r6
    eb04:	4821883a 	mov	r16,r9
    eb08:	3825883a 	mov	r18,r7
    eb0c:	003e9106 	br	e554 <__alt_data_end+0xff00e554>
    eb10:	80001f1e 	bne	r16,zero,eb90 <__subdf3+0x6c0>
    eb14:	1c48b03a 	or	r4,r3,r17
    eb18:	20005a26 	beq	r4,zero,ec84 <__subdf3+0x7b4>
    eb1c:	0084303a 	nor	r2,zero,r2
    eb20:	1000561e 	bne	r2,zero,ec7c <__subdf3+0x7ac>
    eb24:	89a3883a 	add	r17,r17,r6
    eb28:	1945883a 	add	r2,r3,r5
    eb2c:	898d803a 	cmpltu	r6,r17,r6
    eb30:	3087883a 	add	r3,r6,r2
    eb34:	4821883a 	mov	r16,r9
    eb38:	003f0506 	br	e750 <__alt_data_end+0xff00e750>
    eb3c:	10002b1e 	bne	r2,zero,ebec <__subdf3+0x71c>
    eb40:	2984b03a 	or	r2,r5,r6
    eb44:	10008026 	beq	r2,zero,ed48 <__subdf3+0x878>
    eb48:	2807883a 	mov	r3,r5
    eb4c:	3023883a 	mov	r17,r6
    eb50:	3825883a 	mov	r18,r7
    eb54:	0401ffc4 	movi	r16,2047
    eb58:	003e7e06 	br	e554 <__alt_data_end+0xff00e554>
    eb5c:	3809883a 	mov	r4,r7
    eb60:	0011883a 	mov	r8,zero
    eb64:	0005883a 	mov	r2,zero
    eb68:	003ee306 	br	e6f8 <__alt_data_end+0xff00e6f8>
    eb6c:	1c62b03a 	or	r17,r3,r17
    eb70:	8822c03a 	cmpne	r17,r17,zero
    eb74:	0005883a 	mov	r2,zero
    eb78:	003f8906 	br	e9a0 <__alt_data_end+0xff00e9a0>
    eb7c:	3809883a 	mov	r4,r7
    eb80:	4821883a 	mov	r16,r9
    eb84:	0011883a 	mov	r8,zero
    eb88:	0005883a 	mov	r2,zero
    eb8c:	003eda06 	br	e6f8 <__alt_data_end+0xff00e6f8>
    eb90:	0101ffc4 	movi	r4,2047
    eb94:	49003b26 	beq	r9,r4,ec84 <__subdf3+0x7b4>
    eb98:	0085c83a 	sub	r2,zero,r2
    eb9c:	18c02034 	orhi	r3,r3,128
    eba0:	01000e04 	movi	r4,56
    eba4:	20806e16 	blt	r4,r2,ed60 <__subdf3+0x890>
    eba8:	010007c4 	movi	r4,31
    ebac:	20807716 	blt	r4,r2,ed8c <__subdf3+0x8bc>
    ebb0:	01000804 	movi	r4,32
    ebb4:	2089c83a 	sub	r4,r4,r2
    ebb8:	1914983a 	sll	r10,r3,r4
    ebbc:	8890d83a 	srl	r8,r17,r2
    ebc0:	8908983a 	sll	r4,r17,r4
    ebc4:	1884d83a 	srl	r2,r3,r2
    ebc8:	5222b03a 	or	r17,r10,r8
    ebcc:	2006c03a 	cmpne	r3,r4,zero
    ebd0:	88e2b03a 	or	r17,r17,r3
    ebd4:	89a3883a 	add	r17,r17,r6
    ebd8:	1145883a 	add	r2,r2,r5
    ebdc:	898d803a 	cmpltu	r6,r17,r6
    ebe0:	3087883a 	add	r3,r6,r2
    ebe4:	4821883a 	mov	r16,r9
    ebe8:	003ed906 	br	e750 <__alt_data_end+0xff00e750>
    ebec:	2984b03a 	or	r2,r5,r6
    ebf0:	10004226 	beq	r2,zero,ecfc <__subdf3+0x82c>
    ebf4:	1808d0fa 	srli	r4,r3,3
    ebf8:	8822d0fa 	srli	r17,r17,3
    ebfc:	1806977a 	slli	r3,r3,29
    ec00:	2080022c 	andhi	r2,r4,8
    ec04:	1c62b03a 	or	r17,r3,r17
    ec08:	10000826 	beq	r2,zero,ec2c <__subdf3+0x75c>
    ec0c:	2812d0fa 	srli	r9,r5,3
    ec10:	4880022c 	andhi	r2,r9,8
    ec14:	1000051e 	bne	r2,zero,ec2c <__subdf3+0x75c>
    ec18:	300cd0fa 	srli	r6,r6,3
    ec1c:	2804977a 	slli	r2,r5,29
    ec20:	4809883a 	mov	r4,r9
    ec24:	3825883a 	mov	r18,r7
    ec28:	11a2b03a 	or	r17,r2,r6
    ec2c:	8806d77a 	srli	r3,r17,29
    ec30:	200890fa 	slli	r4,r4,3
    ec34:	882290fa 	slli	r17,r17,3
    ec38:	0401ffc4 	movi	r16,2047
    ec3c:	1906b03a 	or	r3,r3,r4
    ec40:	003e4406 	br	e554 <__alt_data_end+0xff00e554>
    ec44:	2984b03a 	or	r2,r5,r6
    ec48:	103e4226 	beq	r2,zero,e554 <__alt_data_end+0xff00e554>
    ec4c:	8989c83a 	sub	r4,r17,r6
    ec50:	8911803a 	cmpltu	r8,r17,r4
    ec54:	1945c83a 	sub	r2,r3,r5
    ec58:	1205c83a 	sub	r2,r2,r8
    ec5c:	1200202c 	andhi	r8,r2,128
    ec60:	403e9a26 	beq	r8,zero,e6cc <__alt_data_end+0xff00e6cc>
    ec64:	3463c83a 	sub	r17,r6,r17
    ec68:	28c5c83a 	sub	r2,r5,r3
    ec6c:	344d803a 	cmpltu	r6,r6,r17
    ec70:	1187c83a 	sub	r3,r2,r6
    ec74:	3825883a 	mov	r18,r7
    ec78:	003e3606 	br	e554 <__alt_data_end+0xff00e554>
    ec7c:	0101ffc4 	movi	r4,2047
    ec80:	493fc71e 	bne	r9,r4,eba0 <__alt_data_end+0xff00eba0>
    ec84:	2807883a 	mov	r3,r5
    ec88:	3023883a 	mov	r17,r6
    ec8c:	4821883a 	mov	r16,r9
    ec90:	003e3006 	br	e554 <__alt_data_end+0xff00e554>
    ec94:	10003626 	beq	r2,zero,ed70 <__subdf3+0x8a0>
    ec98:	2984b03a 	or	r2,r5,r6
    ec9c:	10001726 	beq	r2,zero,ecfc <__subdf3+0x82c>
    eca0:	1808d0fa 	srli	r4,r3,3
    eca4:	8822d0fa 	srli	r17,r17,3
    eca8:	1806977a 	slli	r3,r3,29
    ecac:	2080022c 	andhi	r2,r4,8
    ecb0:	1c62b03a 	or	r17,r3,r17
    ecb4:	10000726 	beq	r2,zero,ecd4 <__subdf3+0x804>
    ecb8:	2812d0fa 	srli	r9,r5,3
    ecbc:	4880022c 	andhi	r2,r9,8
    ecc0:	1000041e 	bne	r2,zero,ecd4 <__subdf3+0x804>
    ecc4:	300cd0fa 	srli	r6,r6,3
    ecc8:	2804977a 	slli	r2,r5,29
    eccc:	4809883a 	mov	r4,r9
    ecd0:	11a2b03a 	or	r17,r2,r6
    ecd4:	8806d77a 	srli	r3,r17,29
    ecd8:	200890fa 	slli	r4,r4,3
    ecdc:	882290fa 	slli	r17,r17,3
    ece0:	3825883a 	mov	r18,r7
    ece4:	1906b03a 	or	r3,r3,r4
    ece8:	0401ffc4 	movi	r16,2047
    ecec:	003e1906 	br	e554 <__alt_data_end+0xff00e554>
    ecf0:	000b883a 	mov	r5,zero
    ecf4:	0005883a 	mov	r2,zero
    ecf8:	003e2e06 	br	e5b4 <__alt_data_end+0xff00e5b4>
    ecfc:	0401ffc4 	movi	r16,2047
    ed00:	003e1406 	br	e554 <__alt_data_end+0xff00e554>
    ed04:	0005883a 	mov	r2,zero
    ed08:	003f7506 	br	eae0 <__alt_data_end+0xff00eae0>
    ed0c:	0005883a 	mov	r2,zero
    ed10:	0009883a 	mov	r4,zero
    ed14:	003e7806 	br	e6f8 <__alt_data_end+0xff00e6f8>
    ed18:	123ff804 	addi	r8,r2,-32
    ed1c:	01000804 	movi	r4,32
    ed20:	1a10d83a 	srl	r8,r3,r8
    ed24:	11002526 	beq	r2,r4,edbc <__subdf3+0x8ec>
    ed28:	01001004 	movi	r4,64
    ed2c:	2085c83a 	sub	r2,r4,r2
    ed30:	1884983a 	sll	r2,r3,r2
    ed34:	1444b03a 	or	r2,r2,r17
    ed38:	1004c03a 	cmpne	r2,r2,zero
    ed3c:	40a2b03a 	or	r17,r8,r2
    ed40:	0005883a 	mov	r2,zero
    ed44:	003f1606 	br	e9a0 <__alt_data_end+0xff00e9a0>
    ed48:	02000434 	movhi	r8,16
    ed4c:	0009883a 	mov	r4,zero
    ed50:	423fffc4 	addi	r8,r8,-1
    ed54:	00bfffc4 	movi	r2,-1
    ed58:	0401ffc4 	movi	r16,2047
    ed5c:	003e6606 	br	e6f8 <__alt_data_end+0xff00e6f8>
    ed60:	1c62b03a 	or	r17,r3,r17
    ed64:	8822c03a 	cmpne	r17,r17,zero
    ed68:	0005883a 	mov	r2,zero
    ed6c:	003f9906 	br	ebd4 <__alt_data_end+0xff00ebd4>
    ed70:	2807883a 	mov	r3,r5
    ed74:	3023883a 	mov	r17,r6
    ed78:	0401ffc4 	movi	r16,2047
    ed7c:	003df506 	br	e554 <__alt_data_end+0xff00e554>
    ed80:	2807883a 	mov	r3,r5
    ed84:	3023883a 	mov	r17,r6
    ed88:	003df206 	br	e554 <__alt_data_end+0xff00e554>
    ed8c:	123ff804 	addi	r8,r2,-32
    ed90:	01000804 	movi	r4,32
    ed94:	1a10d83a 	srl	r8,r3,r8
    ed98:	11000a26 	beq	r2,r4,edc4 <__subdf3+0x8f4>
    ed9c:	01001004 	movi	r4,64
    eda0:	2085c83a 	sub	r2,r4,r2
    eda4:	1884983a 	sll	r2,r3,r2
    eda8:	1444b03a 	or	r2,r2,r17
    edac:	1004c03a 	cmpne	r2,r2,zero
    edb0:	40a2b03a 	or	r17,r8,r2
    edb4:	0005883a 	mov	r2,zero
    edb8:	003f8606 	br	ebd4 <__alt_data_end+0xff00ebd4>
    edbc:	0005883a 	mov	r2,zero
    edc0:	003fdc06 	br	ed34 <__alt_data_end+0xff00ed34>
    edc4:	0005883a 	mov	r2,zero
    edc8:	003ff706 	br	eda8 <__alt_data_end+0xff00eda8>

0000edcc <__fixdfsi>:
    edcc:	280cd53a 	srli	r6,r5,20
    edd0:	00c00434 	movhi	r3,16
    edd4:	18ffffc4 	addi	r3,r3,-1
    edd8:	3181ffcc 	andi	r6,r6,2047
    eddc:	01c0ff84 	movi	r7,1022
    ede0:	28c6703a 	and	r3,r5,r3
    ede4:	280ad7fa 	srli	r5,r5,31
    ede8:	3980120e 	bge	r7,r6,ee34 <__fixdfsi+0x68>
    edec:	00810744 	movi	r2,1053
    edf0:	11800c16 	blt	r2,r6,ee24 <__fixdfsi+0x58>
    edf4:	00810cc4 	movi	r2,1075
    edf8:	1185c83a 	sub	r2,r2,r6
    edfc:	01c007c4 	movi	r7,31
    ee00:	18c00434 	orhi	r3,r3,16
    ee04:	38800d16 	blt	r7,r2,ee3c <__fixdfsi+0x70>
    ee08:	31befb44 	addi	r6,r6,-1043
    ee0c:	2084d83a 	srl	r2,r4,r2
    ee10:	1986983a 	sll	r3,r3,r6
    ee14:	1884b03a 	or	r2,r3,r2
    ee18:	28000726 	beq	r5,zero,ee38 <__fixdfsi+0x6c>
    ee1c:	0085c83a 	sub	r2,zero,r2
    ee20:	f800283a 	ret
    ee24:	00a00034 	movhi	r2,32768
    ee28:	10bfffc4 	addi	r2,r2,-1
    ee2c:	2885883a 	add	r2,r5,r2
    ee30:	f800283a 	ret
    ee34:	0005883a 	mov	r2,zero
    ee38:	f800283a 	ret
    ee3c:	008104c4 	movi	r2,1043
    ee40:	1185c83a 	sub	r2,r2,r6
    ee44:	1884d83a 	srl	r2,r3,r2
    ee48:	003ff306 	br	ee18 <__alt_data_end+0xff00ee18>

0000ee4c <__floatsidf>:
    ee4c:	defffd04 	addi	sp,sp,-12
    ee50:	dfc00215 	stw	ra,8(sp)
    ee54:	dc400115 	stw	r17,4(sp)
    ee58:	dc000015 	stw	r16,0(sp)
    ee5c:	20002b26 	beq	r4,zero,ef0c <__floatsidf+0xc0>
    ee60:	2023883a 	mov	r17,r4
    ee64:	2020d7fa 	srli	r16,r4,31
    ee68:	20002d16 	blt	r4,zero,ef20 <__floatsidf+0xd4>
    ee6c:	8809883a 	mov	r4,r17
    ee70:	00031240 	call	3124 <__clzsi2>
    ee74:	01410784 	movi	r5,1054
    ee78:	288bc83a 	sub	r5,r5,r2
    ee7c:	01010cc4 	movi	r4,1075
    ee80:	2149c83a 	sub	r4,r4,r5
    ee84:	00c007c4 	movi	r3,31
    ee88:	1900160e 	bge	r3,r4,eee4 <__floatsidf+0x98>
    ee8c:	00c104c4 	movi	r3,1043
    ee90:	1947c83a 	sub	r3,r3,r5
    ee94:	88c6983a 	sll	r3,r17,r3
    ee98:	00800434 	movhi	r2,16
    ee9c:	10bfffc4 	addi	r2,r2,-1
    eea0:	1886703a 	and	r3,r3,r2
    eea4:	2941ffcc 	andi	r5,r5,2047
    eea8:	800d883a 	mov	r6,r16
    eeac:	0005883a 	mov	r2,zero
    eeb0:	280a953a 	slli	r5,r5,20
    eeb4:	31803fcc 	andi	r6,r6,255
    eeb8:	01000434 	movhi	r4,16
    eebc:	300c97fa 	slli	r6,r6,31
    eec0:	213fffc4 	addi	r4,r4,-1
    eec4:	1906703a 	and	r3,r3,r4
    eec8:	1946b03a 	or	r3,r3,r5
    eecc:	1986b03a 	or	r3,r3,r6
    eed0:	dfc00217 	ldw	ra,8(sp)
    eed4:	dc400117 	ldw	r17,4(sp)
    eed8:	dc000017 	ldw	r16,0(sp)
    eedc:	dec00304 	addi	sp,sp,12
    eee0:	f800283a 	ret
    eee4:	00c002c4 	movi	r3,11
    eee8:	1887c83a 	sub	r3,r3,r2
    eeec:	88c6d83a 	srl	r3,r17,r3
    eef0:	8904983a 	sll	r2,r17,r4
    eef4:	01000434 	movhi	r4,16
    eef8:	213fffc4 	addi	r4,r4,-1
    eefc:	2941ffcc 	andi	r5,r5,2047
    ef00:	1906703a 	and	r3,r3,r4
    ef04:	800d883a 	mov	r6,r16
    ef08:	003fe906 	br	eeb0 <__alt_data_end+0xff00eeb0>
    ef0c:	000d883a 	mov	r6,zero
    ef10:	000b883a 	mov	r5,zero
    ef14:	0007883a 	mov	r3,zero
    ef18:	0005883a 	mov	r2,zero
    ef1c:	003fe406 	br	eeb0 <__alt_data_end+0xff00eeb0>
    ef20:	0123c83a 	sub	r17,zero,r4
    ef24:	003fd106 	br	ee6c <__alt_data_end+0xff00ee6c>

0000ef28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef28:	defffe04 	addi	sp,sp,-8
    ef2c:	dfc00115 	stw	ra,4(sp)
    ef30:	df000015 	stw	fp,0(sp)
    ef34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef38:	d0a00b17 	ldw	r2,-32724(gp)
    ef3c:	10000326 	beq	r2,zero,ef4c <alt_get_errno+0x24>
    ef40:	d0a00b17 	ldw	r2,-32724(gp)
    ef44:	103ee83a 	callr	r2
    ef48:	00000106 	br	ef50 <alt_get_errno+0x28>
    ef4c:	d0a72904 	addi	r2,gp,-25436
}
    ef50:	e037883a 	mov	sp,fp
    ef54:	dfc00117 	ldw	ra,4(sp)
    ef58:	df000017 	ldw	fp,0(sp)
    ef5c:	dec00204 	addi	sp,sp,8
    ef60:	f800283a 	ret

0000ef64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ef64:	defffb04 	addi	sp,sp,-20
    ef68:	dfc00415 	stw	ra,16(sp)
    ef6c:	df000315 	stw	fp,12(sp)
    ef70:	df000304 	addi	fp,sp,12
    ef74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ef78:	e0bfff17 	ldw	r2,-4(fp)
    ef7c:	10000616 	blt	r2,zero,ef98 <close+0x34>
    ef80:	e0bfff17 	ldw	r2,-4(fp)
    ef84:	10c00324 	muli	r3,r2,12
    ef88:	00800074 	movhi	r2,1
    ef8c:	108b6e04 	addi	r2,r2,11704
    ef90:	1885883a 	add	r2,r3,r2
    ef94:	00000106 	br	ef9c <close+0x38>
    ef98:	0005883a 	mov	r2,zero
    ef9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    efa0:	e0bffd17 	ldw	r2,-12(fp)
    efa4:	10001926 	beq	r2,zero,f00c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    efa8:	e0bffd17 	ldw	r2,-12(fp)
    efac:	10800017 	ldw	r2,0(r2)
    efb0:	10800417 	ldw	r2,16(r2)
    efb4:	10000626 	beq	r2,zero,efd0 <close+0x6c>
    efb8:	e0bffd17 	ldw	r2,-12(fp)
    efbc:	10800017 	ldw	r2,0(r2)
    efc0:	10800417 	ldw	r2,16(r2)
    efc4:	e13ffd17 	ldw	r4,-12(fp)
    efc8:	103ee83a 	callr	r2
    efcc:	00000106 	br	efd4 <close+0x70>
    efd0:	0005883a 	mov	r2,zero
    efd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    efd8:	e13fff17 	ldw	r4,-4(fp)
    efdc:	000f6240 	call	f624 <alt_release_fd>
    if (rval < 0)
    efe0:	e0bffe17 	ldw	r2,-8(fp)
    efe4:	1000070e 	bge	r2,zero,f004 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    efe8:	000ef280 	call	ef28 <alt_get_errno>
    efec:	1007883a 	mov	r3,r2
    eff0:	e0bffe17 	ldw	r2,-8(fp)
    eff4:	0085c83a 	sub	r2,zero,r2
    eff8:	18800015 	stw	r2,0(r3)
      return -1;
    effc:	00bfffc4 	movi	r2,-1
    f000:	00000706 	br	f020 <close+0xbc>
    }
    return 0;
    f004:	0005883a 	mov	r2,zero
    f008:	00000506 	br	f020 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f00c:	000ef280 	call	ef28 <alt_get_errno>
    f010:	1007883a 	mov	r3,r2
    f014:	00801444 	movi	r2,81
    f018:	18800015 	stw	r2,0(r3)
    return -1;
    f01c:	00bfffc4 	movi	r2,-1
  }
}
    f020:	e037883a 	mov	sp,fp
    f024:	dfc00117 	ldw	ra,4(sp)
    f028:	df000017 	ldw	fp,0(sp)
    f02c:	dec00204 	addi	sp,sp,8
    f030:	f800283a 	ret

0000f034 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f034:	defffc04 	addi	sp,sp,-16
    f038:	df000315 	stw	fp,12(sp)
    f03c:	df000304 	addi	fp,sp,12
    f040:	e13ffd15 	stw	r4,-12(fp)
    f044:	e17ffe15 	stw	r5,-8(fp)
    f048:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f04c:	e0bfff17 	ldw	r2,-4(fp)
}
    f050:	e037883a 	mov	sp,fp
    f054:	df000017 	ldw	fp,0(sp)
    f058:	dec00104 	addi	sp,sp,4
    f05c:	f800283a 	ret

0000f060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f060:	defffe04 	addi	sp,sp,-8
    f064:	dfc00115 	stw	ra,4(sp)
    f068:	df000015 	stw	fp,0(sp)
    f06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f070:	d0a00b17 	ldw	r2,-32724(gp)
    f074:	10000326 	beq	r2,zero,f084 <alt_get_errno+0x24>
    f078:	d0a00b17 	ldw	r2,-32724(gp)
    f07c:	103ee83a 	callr	r2
    f080:	00000106 	br	f088 <alt_get_errno+0x28>
    f084:	d0a72904 	addi	r2,gp,-25436
}
    f088:	e037883a 	mov	sp,fp
    f08c:	dfc00117 	ldw	ra,4(sp)
    f090:	df000017 	ldw	fp,0(sp)
    f094:	dec00204 	addi	sp,sp,8
    f098:	f800283a 	ret

0000f09c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f09c:	defffb04 	addi	sp,sp,-20
    f0a0:	dfc00415 	stw	ra,16(sp)
    f0a4:	df000315 	stw	fp,12(sp)
    f0a8:	df000304 	addi	fp,sp,12
    f0ac:	e13ffe15 	stw	r4,-8(fp)
    f0b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f0b4:	e0bffe17 	ldw	r2,-8(fp)
    f0b8:	10000616 	blt	r2,zero,f0d4 <fstat+0x38>
    f0bc:	e0bffe17 	ldw	r2,-8(fp)
    f0c0:	10c00324 	muli	r3,r2,12
    f0c4:	00800074 	movhi	r2,1
    f0c8:	108b6e04 	addi	r2,r2,11704
    f0cc:	1885883a 	add	r2,r3,r2
    f0d0:	00000106 	br	f0d8 <fstat+0x3c>
    f0d4:	0005883a 	mov	r2,zero
    f0d8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f0dc:	e0bffd17 	ldw	r2,-12(fp)
    f0e0:	10001026 	beq	r2,zero,f124 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	10800017 	ldw	r2,0(r2)
    f0ec:	10800817 	ldw	r2,32(r2)
    f0f0:	10000726 	beq	r2,zero,f110 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f0f4:	e0bffd17 	ldw	r2,-12(fp)
    f0f8:	10800017 	ldw	r2,0(r2)
    f0fc:	10800817 	ldw	r2,32(r2)
    f100:	e17fff17 	ldw	r5,-4(fp)
    f104:	e13ffd17 	ldw	r4,-12(fp)
    f108:	103ee83a 	callr	r2
    f10c:	00000a06 	br	f138 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f110:	e0bfff17 	ldw	r2,-4(fp)
    f114:	00c80004 	movi	r3,8192
    f118:	10c00115 	stw	r3,4(r2)
      return 0;
    f11c:	0005883a 	mov	r2,zero
    f120:	00000506 	br	f138 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f124:	000f0600 	call	f060 <alt_get_errno>
    f128:	1007883a 	mov	r3,r2
    f12c:	00801444 	movi	r2,81
    f130:	18800015 	stw	r2,0(r3)
    return -1;
    f134:	00bfffc4 	movi	r2,-1
  }
}
    f138:	e037883a 	mov	sp,fp
    f13c:	dfc00117 	ldw	ra,4(sp)
    f140:	df000017 	ldw	fp,0(sp)
    f144:	dec00204 	addi	sp,sp,8
    f148:	f800283a 	ret

0000f14c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f14c:	defffe04 	addi	sp,sp,-8
    f150:	dfc00115 	stw	ra,4(sp)
    f154:	df000015 	stw	fp,0(sp)
    f158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f15c:	d0a00b17 	ldw	r2,-32724(gp)
    f160:	10000326 	beq	r2,zero,f170 <alt_get_errno+0x24>
    f164:	d0a00b17 	ldw	r2,-32724(gp)
    f168:	103ee83a 	callr	r2
    f16c:	00000106 	br	f174 <alt_get_errno+0x28>
    f170:	d0a72904 	addi	r2,gp,-25436
}
    f174:	e037883a 	mov	sp,fp
    f178:	dfc00117 	ldw	ra,4(sp)
    f17c:	df000017 	ldw	fp,0(sp)
    f180:	dec00204 	addi	sp,sp,8
    f184:	f800283a 	ret

0000f188 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f188:	deffed04 	addi	sp,sp,-76
    f18c:	dfc01215 	stw	ra,72(sp)
    f190:	df001115 	stw	fp,68(sp)
    f194:	df001104 	addi	fp,sp,68
    f198:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f19c:	e0bfff17 	ldw	r2,-4(fp)
    f1a0:	10000616 	blt	r2,zero,f1bc <isatty+0x34>
    f1a4:	e0bfff17 	ldw	r2,-4(fp)
    f1a8:	10c00324 	muli	r3,r2,12
    f1ac:	00800074 	movhi	r2,1
    f1b0:	108b6e04 	addi	r2,r2,11704
    f1b4:	1885883a 	add	r2,r3,r2
    f1b8:	00000106 	br	f1c0 <isatty+0x38>
    f1bc:	0005883a 	mov	r2,zero
    f1c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f1c4:	e0bfef17 	ldw	r2,-68(fp)
    f1c8:	10000e26 	beq	r2,zero,f204 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f1cc:	e0bfef17 	ldw	r2,-68(fp)
    f1d0:	10800017 	ldw	r2,0(r2)
    f1d4:	10800817 	ldw	r2,32(r2)
    f1d8:	1000021e 	bne	r2,zero,f1e4 <isatty+0x5c>
    {
      return 1;
    f1dc:	00800044 	movi	r2,1
    f1e0:	00000d06 	br	f218 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f1e4:	e0bff004 	addi	r2,fp,-64
    f1e8:	100b883a 	mov	r5,r2
    f1ec:	e13fff17 	ldw	r4,-4(fp)
    f1f0:	000f09c0 	call	f09c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f1f4:	e0bff117 	ldw	r2,-60(fp)
    f1f8:	10880020 	cmpeqi	r2,r2,8192
    f1fc:	10803fcc 	andi	r2,r2,255
    f200:	00000506 	br	f218 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f204:	000f14c0 	call	f14c <alt_get_errno>
    f208:	1007883a 	mov	r3,r2
    f20c:	00801444 	movi	r2,81
    f210:	18800015 	stw	r2,0(r3)
    return 0;
    f214:	0005883a 	mov	r2,zero
  }
}
    f218:	e037883a 	mov	sp,fp
    f21c:	dfc00117 	ldw	ra,4(sp)
    f220:	df000017 	ldw	fp,0(sp)
    f224:	dec00204 	addi	sp,sp,8
    f228:	f800283a 	ret

0000f22c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f22c:	defffc04 	addi	sp,sp,-16
    f230:	df000315 	stw	fp,12(sp)
    f234:	df000304 	addi	fp,sp,12
    f238:	e13ffd15 	stw	r4,-12(fp)
    f23c:	e17ffe15 	stw	r5,-8(fp)
    f240:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f244:	e0fffe17 	ldw	r3,-8(fp)
    f248:	e0bffd17 	ldw	r2,-12(fp)
    f24c:	18800c26 	beq	r3,r2,f280 <alt_load_section+0x54>
  {
    while( to != end )
    f250:	00000806 	br	f274 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f254:	e0bffe17 	ldw	r2,-8(fp)
    f258:	10c00104 	addi	r3,r2,4
    f25c:	e0fffe15 	stw	r3,-8(fp)
    f260:	e0fffd17 	ldw	r3,-12(fp)
    f264:	19000104 	addi	r4,r3,4
    f268:	e13ffd15 	stw	r4,-12(fp)
    f26c:	18c00017 	ldw	r3,0(r3)
    f270:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f274:	e0fffe17 	ldw	r3,-8(fp)
    f278:	e0bfff17 	ldw	r2,-4(fp)
    f27c:	18bff51e 	bne	r3,r2,f254 <__alt_data_end+0xff00f254>
    {
      *to++ = *from++;
    }
  }
}
    f280:	0001883a 	nop
    f284:	e037883a 	mov	sp,fp
    f288:	df000017 	ldw	fp,0(sp)
    f28c:	dec00104 	addi	sp,sp,4
    f290:	f800283a 	ret

0000f294 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f294:	defffe04 	addi	sp,sp,-8
    f298:	dfc00115 	stw	ra,4(sp)
    f29c:	df000015 	stw	fp,0(sp)
    f2a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f2a4:	01800074 	movhi	r6,1
    f2a8:	318ff604 	addi	r6,r6,16344
    f2ac:	01400074 	movhi	r5,1
    f2b0:	2948fb04 	addi	r5,r5,9196
    f2b4:	01000074 	movhi	r4,1
    f2b8:	210ff604 	addi	r4,r4,16344
    f2bc:	000f22c0 	call	f22c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f2c0:	01800034 	movhi	r6,0
    f2c4:	31809104 	addi	r6,r6,580
    f2c8:	01400034 	movhi	r5,0
    f2cc:	29400804 	addi	r5,r5,32
    f2d0:	01000034 	movhi	r4,0
    f2d4:	21000804 	addi	r4,r4,32
    f2d8:	000f22c0 	call	f22c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f2dc:	01800074 	movhi	r6,1
    f2e0:	3188fb04 	addi	r6,r6,9196
    f2e4:	01400074 	movhi	r5,1
    f2e8:	29470c04 	addi	r5,r5,7216
    f2ec:	01000074 	movhi	r4,1
    f2f0:	21070c04 	addi	r4,r4,7216
    f2f4:	000f22c0 	call	f22c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f2f8:	001096c0 	call	1096c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f2fc:	0010b540 	call	10b54 <alt_icache_flush_all>
}
    f300:	0001883a 	nop
    f304:	e037883a 	mov	sp,fp
    f308:	dfc00117 	ldw	ra,4(sp)
    f30c:	df000017 	ldw	fp,0(sp)
    f310:	dec00204 	addi	sp,sp,8
    f314:	f800283a 	ret

0000f318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f318:	defffe04 	addi	sp,sp,-8
    f31c:	dfc00115 	stw	ra,4(sp)
    f320:	df000015 	stw	fp,0(sp)
    f324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f328:	d0a00b17 	ldw	r2,-32724(gp)
    f32c:	10000326 	beq	r2,zero,f33c <alt_get_errno+0x24>
    f330:	d0a00b17 	ldw	r2,-32724(gp)
    f334:	103ee83a 	callr	r2
    f338:	00000106 	br	f340 <alt_get_errno+0x28>
    f33c:	d0a72904 	addi	r2,gp,-25436
}
    f340:	e037883a 	mov	sp,fp
    f344:	dfc00117 	ldw	ra,4(sp)
    f348:	df000017 	ldw	fp,0(sp)
    f34c:	dec00204 	addi	sp,sp,8
    f350:	f800283a 	ret

0000f354 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f354:	defff904 	addi	sp,sp,-28
    f358:	dfc00615 	stw	ra,24(sp)
    f35c:	df000515 	stw	fp,20(sp)
    f360:	df000504 	addi	fp,sp,20
    f364:	e13ffd15 	stw	r4,-12(fp)
    f368:	e17ffe15 	stw	r5,-8(fp)
    f36c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f370:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10000616 	blt	r2,zero,f394 <lseek+0x40>
    f37c:	e0bffd17 	ldw	r2,-12(fp)
    f380:	10c00324 	muli	r3,r2,12
    f384:	00800074 	movhi	r2,1
    f388:	108b6e04 	addi	r2,r2,11704
    f38c:	1885883a 	add	r2,r3,r2
    f390:	00000106 	br	f398 <lseek+0x44>
    f394:	0005883a 	mov	r2,zero
    f398:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f39c:	e0bffc17 	ldw	r2,-16(fp)
    f3a0:	10001026 	beq	r2,zero,f3e4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f3a4:	e0bffc17 	ldw	r2,-16(fp)
    f3a8:	10800017 	ldw	r2,0(r2)
    f3ac:	10800717 	ldw	r2,28(r2)
    f3b0:	10000926 	beq	r2,zero,f3d8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f3b4:	e0bffc17 	ldw	r2,-16(fp)
    f3b8:	10800017 	ldw	r2,0(r2)
    f3bc:	10800717 	ldw	r2,28(r2)
    f3c0:	e1bfff17 	ldw	r6,-4(fp)
    f3c4:	e17ffe17 	ldw	r5,-8(fp)
    f3c8:	e13ffc17 	ldw	r4,-16(fp)
    f3cc:	103ee83a 	callr	r2
    f3d0:	e0bffb15 	stw	r2,-20(fp)
    f3d4:	00000506 	br	f3ec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f3d8:	00bfde84 	movi	r2,-134
    f3dc:	e0bffb15 	stw	r2,-20(fp)
    f3e0:	00000206 	br	f3ec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f3e4:	00bfebc4 	movi	r2,-81
    f3e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f3ec:	e0bffb17 	ldw	r2,-20(fp)
    f3f0:	1000070e 	bge	r2,zero,f410 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f3f4:	000f3180 	call	f318 <alt_get_errno>
    f3f8:	1007883a 	mov	r3,r2
    f3fc:	e0bffb17 	ldw	r2,-20(fp)
    f400:	0085c83a 	sub	r2,zero,r2
    f404:	18800015 	stw	r2,0(r3)
    rc = -1;
    f408:	00bfffc4 	movi	r2,-1
    f40c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f410:	e0bffb17 	ldw	r2,-20(fp)
}
    f414:	e037883a 	mov	sp,fp
    f418:	dfc00117 	ldw	ra,4(sp)
    f41c:	df000017 	ldw	fp,0(sp)
    f420:	dec00204 	addi	sp,sp,8
    f424:	f800283a 	ret

0000f428 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f428:	defffd04 	addi	sp,sp,-12
    f42c:	dfc00215 	stw	ra,8(sp)
    f430:	df000115 	stw	fp,4(sp)
    f434:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f438:	0009883a 	mov	r4,zero
    f43c:	000f9480 	call	f948 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f440:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f444:	000f9800 	call	f980 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f448:	01800074 	movhi	r6,1
    f44c:	3188f304 	addi	r6,r6,9164
    f450:	01400074 	movhi	r5,1
    f454:	2948f304 	addi	r5,r5,9164
    f458:	01000074 	movhi	r4,1
    f45c:	2108f304 	addi	r4,r4,9164
    f460:	0010eec0 	call	10eec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f464:	0010a940 	call	10a94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f468:	01000074 	movhi	r4,1
    f46c:	2102bd04 	addi	r4,r4,2804
    f470:	00116ec0 	call	116ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f474:	d0a72d17 	ldw	r2,-25420(gp)
    f478:	d0e72e17 	ldw	r3,-25416(gp)
    f47c:	d1272f17 	ldw	r4,-25412(gp)
    f480:	200d883a 	mov	r6,r4
    f484:	180b883a 	mov	r5,r3
    f488:	1009883a 	mov	r4,r2
    f48c:	0000f880 	call	f88 <main>
    f490:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f494:	01000044 	movi	r4,1
    f498:	000ef640 	call	ef64 <close>
  exit (result);
    f49c:	e13fff17 	ldw	r4,-4(fp)
    f4a0:	00117000 	call	11700 <exit>

0000f4a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f4a4:	defffe04 	addi	sp,sp,-8
    f4a8:	df000115 	stw	fp,4(sp)
    f4ac:	df000104 	addi	fp,sp,4
    f4b0:	e13fff15 	stw	r4,-4(fp)
}
    f4b4:	0001883a 	nop
    f4b8:	e037883a 	mov	sp,fp
    f4bc:	df000017 	ldw	fp,0(sp)
    f4c0:	dec00104 	addi	sp,sp,4
    f4c4:	f800283a 	ret

0000f4c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f4c8:	defffe04 	addi	sp,sp,-8
    f4cc:	df000115 	stw	fp,4(sp)
    f4d0:	df000104 	addi	fp,sp,4
    f4d4:	e13fff15 	stw	r4,-4(fp)
}
    f4d8:	0001883a 	nop
    f4dc:	e037883a 	mov	sp,fp
    f4e0:	df000017 	ldw	fp,0(sp)
    f4e4:	dec00104 	addi	sp,sp,4
    f4e8:	f800283a 	ret

0000f4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f4ec:	defffe04 	addi	sp,sp,-8
    f4f0:	dfc00115 	stw	ra,4(sp)
    f4f4:	df000015 	stw	fp,0(sp)
    f4f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f4fc:	d0a00b17 	ldw	r2,-32724(gp)
    f500:	10000326 	beq	r2,zero,f510 <alt_get_errno+0x24>
    f504:	d0a00b17 	ldw	r2,-32724(gp)
    f508:	103ee83a 	callr	r2
    f50c:	00000106 	br	f514 <alt_get_errno+0x28>
    f510:	d0a72904 	addi	r2,gp,-25436
}
    f514:	e037883a 	mov	sp,fp
    f518:	dfc00117 	ldw	ra,4(sp)
    f51c:	df000017 	ldw	fp,0(sp)
    f520:	dec00204 	addi	sp,sp,8
    f524:	f800283a 	ret

0000f528 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f528:	defff904 	addi	sp,sp,-28
    f52c:	dfc00615 	stw	ra,24(sp)
    f530:	df000515 	stw	fp,20(sp)
    f534:	df000504 	addi	fp,sp,20
    f538:	e13ffd15 	stw	r4,-12(fp)
    f53c:	e17ffe15 	stw	r5,-8(fp)
    f540:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f544:	e0bffd17 	ldw	r2,-12(fp)
    f548:	10000616 	blt	r2,zero,f564 <read+0x3c>
    f54c:	e0bffd17 	ldw	r2,-12(fp)
    f550:	10c00324 	muli	r3,r2,12
    f554:	00800074 	movhi	r2,1
    f558:	108b6e04 	addi	r2,r2,11704
    f55c:	1885883a 	add	r2,r3,r2
    f560:	00000106 	br	f568 <read+0x40>
    f564:	0005883a 	mov	r2,zero
    f568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f56c:	e0bffb17 	ldw	r2,-20(fp)
    f570:	10002226 	beq	r2,zero,f5fc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f574:	e0bffb17 	ldw	r2,-20(fp)
    f578:	10800217 	ldw	r2,8(r2)
    f57c:	108000cc 	andi	r2,r2,3
    f580:	10800060 	cmpeqi	r2,r2,1
    f584:	1000181e 	bne	r2,zero,f5e8 <read+0xc0>
        (fd->dev->read))
    f588:	e0bffb17 	ldw	r2,-20(fp)
    f58c:	10800017 	ldw	r2,0(r2)
    f590:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f594:	10001426 	beq	r2,zero,f5e8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f598:	e0bffb17 	ldw	r2,-20(fp)
    f59c:	10800017 	ldw	r2,0(r2)
    f5a0:	10800517 	ldw	r2,20(r2)
    f5a4:	e0ffff17 	ldw	r3,-4(fp)
    f5a8:	180d883a 	mov	r6,r3
    f5ac:	e17ffe17 	ldw	r5,-8(fp)
    f5b0:	e13ffb17 	ldw	r4,-20(fp)
    f5b4:	103ee83a 	callr	r2
    f5b8:	e0bffc15 	stw	r2,-16(fp)
    f5bc:	e0bffc17 	ldw	r2,-16(fp)
    f5c0:	1000070e 	bge	r2,zero,f5e0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f5c4:	000f4ec0 	call	f4ec <alt_get_errno>
    f5c8:	1007883a 	mov	r3,r2
    f5cc:	e0bffc17 	ldw	r2,-16(fp)
    f5d0:	0085c83a 	sub	r2,zero,r2
    f5d4:	18800015 	stw	r2,0(r3)
          return -1;
    f5d8:	00bfffc4 	movi	r2,-1
    f5dc:	00000c06 	br	f610 <read+0xe8>
        }
        return rval;
    f5e0:	e0bffc17 	ldw	r2,-16(fp)
    f5e4:	00000a06 	br	f610 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f5e8:	000f4ec0 	call	f4ec <alt_get_errno>
    f5ec:	1007883a 	mov	r3,r2
    f5f0:	00800344 	movi	r2,13
    f5f4:	18800015 	stw	r2,0(r3)
    f5f8:	00000406 	br	f60c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f5fc:	000f4ec0 	call	f4ec <alt_get_errno>
    f600:	1007883a 	mov	r3,r2
    f604:	00801444 	movi	r2,81
    f608:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f60c:	00bfffc4 	movi	r2,-1
}
    f610:	e037883a 	mov	sp,fp
    f614:	dfc00117 	ldw	ra,4(sp)
    f618:	df000017 	ldw	fp,0(sp)
    f61c:	dec00204 	addi	sp,sp,8
    f620:	f800283a 	ret

0000f624 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f624:	defffe04 	addi	sp,sp,-8
    f628:	df000115 	stw	fp,4(sp)
    f62c:	df000104 	addi	fp,sp,4
    f630:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f634:	e0bfff17 	ldw	r2,-4(fp)
    f638:	108000d0 	cmplti	r2,r2,3
    f63c:	10000d1e 	bne	r2,zero,f674 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f640:	00800074 	movhi	r2,1
    f644:	108b6e04 	addi	r2,r2,11704
    f648:	e0ffff17 	ldw	r3,-4(fp)
    f64c:	18c00324 	muli	r3,r3,12
    f650:	10c5883a 	add	r2,r2,r3
    f654:	10800204 	addi	r2,r2,8
    f658:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f65c:	00800074 	movhi	r2,1
    f660:	108b6e04 	addi	r2,r2,11704
    f664:	e0ffff17 	ldw	r3,-4(fp)
    f668:	18c00324 	muli	r3,r3,12
    f66c:	10c5883a 	add	r2,r2,r3
    f670:	10000015 	stw	zero,0(r2)
  }
}
    f674:	0001883a 	nop
    f678:	e037883a 	mov	sp,fp
    f67c:	df000017 	ldw	fp,0(sp)
    f680:	dec00104 	addi	sp,sp,4
    f684:	f800283a 	ret

0000f688 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f688:	defff904 	addi	sp,sp,-28
    f68c:	df000615 	stw	fp,24(sp)
    f690:	df000604 	addi	fp,sp,24
    f694:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f698:	0005303a 	rdctl	r2,status
    f69c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6a0:	e0fffe17 	ldw	r3,-8(fp)
    f6a4:	00bfff84 	movi	r2,-2
    f6a8:	1884703a 	and	r2,r3,r2
    f6ac:	1001703a 	wrctl	status,r2
  
  return context;
    f6b0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f6b4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f6b8:	d0a00c17 	ldw	r2,-32720(gp)
    f6bc:	10c000c4 	addi	r3,r2,3
    f6c0:	00bfff04 	movi	r2,-4
    f6c4:	1884703a 	and	r2,r3,r2
    f6c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f6cc:	d0e00c17 	ldw	r3,-32720(gp)
    f6d0:	e0bfff17 	ldw	r2,-4(fp)
    f6d4:	1887883a 	add	r3,r3,r2
    f6d8:	00804034 	movhi	r2,256
    f6dc:	10800004 	addi	r2,r2,0
    f6e0:	10c0062e 	bgeu	r2,r3,f6fc <sbrk+0x74>
    f6e4:	e0bffb17 	ldw	r2,-20(fp)
    f6e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6ec:	e0bffa17 	ldw	r2,-24(fp)
    f6f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f6f4:	00bfffc4 	movi	r2,-1
    f6f8:	00000b06 	br	f728 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f6fc:	d0a00c17 	ldw	r2,-32720(gp)
    f700:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f704:	d0e00c17 	ldw	r3,-32720(gp)
    f708:	e0bfff17 	ldw	r2,-4(fp)
    f70c:	1885883a 	add	r2,r3,r2
    f710:	d0a00c15 	stw	r2,-32720(gp)
    f714:	e0bffb17 	ldw	r2,-20(fp)
    f718:	e0bffc15 	stw	r2,-16(fp)
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f724:	e0bffd17 	ldw	r2,-12(fp)
} 
    f728:	e037883a 	mov	sp,fp
    f72c:	df000017 	ldw	fp,0(sp)
    f730:	dec00104 	addi	sp,sp,4
    f734:	f800283a 	ret

0000f738 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    f738:	defffa04 	addi	sp,sp,-24
    f73c:	dfc00515 	stw	ra,20(sp)
    f740:	df000415 	stw	fp,16(sp)
    f744:	df000404 	addi	fp,sp,16
    f748:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
    f74c:	e0bfff17 	ldw	r2,-4(fp)
    f750:	108007c4 	addi	r2,r2,31
    f754:	1004d17a 	srli	r2,r2,5
    f758:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    f75c:	e0bffc17 	ldw	r2,-16(fp)
    f760:	1004917a 	slli	r2,r2,5
    f764:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    f768:	e17ffd17 	ldw	r5,-12(fp)
    f76c:	01000804 	movi	r4,32
    f770:	00117380 	call	11738 <memalign>
    f774:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
    f778:	e0bffe17 	ldw	r2,-8(fp)
    f77c:	1000021e 	bne	r2,zero,f788 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
    f780:	0005883a 	mov	r2,zero
    f784:	00000506 	br	f79c <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    f788:	e17ffd17 	ldw	r5,-12(fp)
    f78c:	e13ffe17 	ldw	r4,-8(fp)
    f790:	00108f40 	call	108f4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    f794:	e0bffe17 	ldw	r2,-8(fp)
    f798:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    f79c:	e037883a 	mov	sp,fp
    f7a0:	dfc00117 	ldw	ra,4(sp)
    f7a4:	df000017 	ldw	fp,0(sp)
    f7a8:	dec00204 	addi	sp,sp,8
    f7ac:	f800283a 	ret

0000f7b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f7b0:	defffd04 	addi	sp,sp,-12
    f7b4:	dfc00215 	stw	ra,8(sp)
    f7b8:	df000115 	stw	fp,4(sp)
    f7bc:	df000104 	addi	fp,sp,4
    f7c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f7c4:	e13fff17 	ldw	r4,-4(fp)
    f7c8:	001079c0 	call	1079c <alt_busy_sleep>
}
    f7cc:	e037883a 	mov	sp,fp
    f7d0:	dfc00117 	ldw	ra,4(sp)
    f7d4:	df000017 	ldw	fp,0(sp)
    f7d8:	dec00204 	addi	sp,sp,8
    f7dc:	f800283a 	ret

0000f7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7e0:	defffe04 	addi	sp,sp,-8
    f7e4:	dfc00115 	stw	ra,4(sp)
    f7e8:	df000015 	stw	fp,0(sp)
    f7ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7f0:	d0a00b17 	ldw	r2,-32724(gp)
    f7f4:	10000326 	beq	r2,zero,f804 <alt_get_errno+0x24>
    f7f8:	d0a00b17 	ldw	r2,-32724(gp)
    f7fc:	103ee83a 	callr	r2
    f800:	00000106 	br	f808 <alt_get_errno+0x28>
    f804:	d0a72904 	addi	r2,gp,-25436
}
    f808:	e037883a 	mov	sp,fp
    f80c:	dfc00117 	ldw	ra,4(sp)
    f810:	df000017 	ldw	fp,0(sp)
    f814:	dec00204 	addi	sp,sp,8
    f818:	f800283a 	ret

0000f81c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f81c:	defff904 	addi	sp,sp,-28
    f820:	dfc00615 	stw	ra,24(sp)
    f824:	df000515 	stw	fp,20(sp)
    f828:	df000504 	addi	fp,sp,20
    f82c:	e13ffd15 	stw	r4,-12(fp)
    f830:	e17ffe15 	stw	r5,-8(fp)
    f834:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f838:	e0bffd17 	ldw	r2,-12(fp)
    f83c:	10000616 	blt	r2,zero,f858 <write+0x3c>
    f840:	e0bffd17 	ldw	r2,-12(fp)
    f844:	10c00324 	muli	r3,r2,12
    f848:	00800074 	movhi	r2,1
    f84c:	108b6e04 	addi	r2,r2,11704
    f850:	1885883a 	add	r2,r3,r2
    f854:	00000106 	br	f85c <write+0x40>
    f858:	0005883a 	mov	r2,zero
    f85c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f860:	e0bffb17 	ldw	r2,-20(fp)
    f864:	10002126 	beq	r2,zero,f8ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f868:	e0bffb17 	ldw	r2,-20(fp)
    f86c:	10800217 	ldw	r2,8(r2)
    f870:	108000cc 	andi	r2,r2,3
    f874:	10001826 	beq	r2,zero,f8d8 <write+0xbc>
    f878:	e0bffb17 	ldw	r2,-20(fp)
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	10800617 	ldw	r2,24(r2)
    f884:	10001426 	beq	r2,zero,f8d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f888:	e0bffb17 	ldw	r2,-20(fp)
    f88c:	10800017 	ldw	r2,0(r2)
    f890:	10800617 	ldw	r2,24(r2)
    f894:	e0ffff17 	ldw	r3,-4(fp)
    f898:	180d883a 	mov	r6,r3
    f89c:	e17ffe17 	ldw	r5,-8(fp)
    f8a0:	e13ffb17 	ldw	r4,-20(fp)
    f8a4:	103ee83a 	callr	r2
    f8a8:	e0bffc15 	stw	r2,-16(fp)
    f8ac:	e0bffc17 	ldw	r2,-16(fp)
    f8b0:	1000070e 	bge	r2,zero,f8d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f8b4:	000f7e00 	call	f7e0 <alt_get_errno>
    f8b8:	1007883a 	mov	r3,r2
    f8bc:	e0bffc17 	ldw	r2,-16(fp)
    f8c0:	0085c83a 	sub	r2,zero,r2
    f8c4:	18800015 	stw	r2,0(r3)
        return -1;
    f8c8:	00bfffc4 	movi	r2,-1
    f8cc:	00000c06 	br	f900 <write+0xe4>
      }
      return rval;
    f8d0:	e0bffc17 	ldw	r2,-16(fp)
    f8d4:	00000a06 	br	f900 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f8d8:	000f7e00 	call	f7e0 <alt_get_errno>
    f8dc:	1007883a 	mov	r3,r2
    f8e0:	00800344 	movi	r2,13
    f8e4:	18800015 	stw	r2,0(r3)
    f8e8:	00000406 	br	f8fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f8ec:	000f7e00 	call	f7e0 <alt_get_errno>
    f8f0:	1007883a 	mov	r3,r2
    f8f4:	00801444 	movi	r2,81
    f8f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f8fc:	00bfffc4 	movi	r2,-1
}
    f900:	e037883a 	mov	sp,fp
    f904:	dfc00117 	ldw	ra,4(sp)
    f908:	df000017 	ldw	fp,0(sp)
    f90c:	dec00204 	addi	sp,sp,8
    f910:	f800283a 	ret

0000f914 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f914:	defffd04 	addi	sp,sp,-12
    f918:	dfc00215 	stw	ra,8(sp)
    f91c:	df000115 	stw	fp,4(sp)
    f920:	df000104 	addi	fp,sp,4
    f924:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f928:	d1600804 	addi	r5,gp,-32736
    f92c:	e13fff17 	ldw	r4,-4(fp)
    f930:	00109f00 	call	109f0 <alt_dev_llist_insert>
}
    f934:	e037883a 	mov	sp,fp
    f938:	dfc00117 	ldw	ra,4(sp)
    f93c:	df000017 	ldw	fp,0(sp)
    f940:	dec00204 	addi	sp,sp,8
    f944:	f800283a 	ret

0000f948 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f948:	defffd04 	addi	sp,sp,-12
    f94c:	dfc00215 	stw	ra,8(sp)
    f950:	df000115 	stw	fp,4(sp)
    f954:	df000104 	addi	fp,sp,4
    f958:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f95c:	00113600 	call	11360 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f960:	00800044 	movi	r2,1
    f964:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f968:	0001883a 	nop
    f96c:	e037883a 	mov	sp,fp
    f970:	dfc00117 	ldw	ra,4(sp)
    f974:	df000017 	ldw	fp,0(sp)
    f978:	dec00204 	addi	sp,sp,8
    f97c:	f800283a 	ret

0000f980 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f980:	defffe04 	addi	sp,sp,-8
    f984:	dfc00115 	stw	ra,4(sp)
    f988:	df000015 	stw	fp,0(sp)
    f98c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f990:	00804034 	movhi	r2,256
    f994:	10840004 	addi	r2,r2,4096
    f998:	d0a73015 	stw	r2,-25408(gp)
    f99c:	0080bef4 	movhi	r2,763
    f9a0:	10bc2004 	addi	r2,r2,-3968
    f9a4:	d0a73115 	stw	r2,-25404(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f9a8:	01c0fa04 	movi	r7,1000
    f9ac:	01800104 	movi	r6,4
    f9b0:	000b883a 	mov	r5,zero
    f9b4:	01004034 	movhi	r4,256
    f9b8:	21040804 	addi	r4,r4,4128
    f9bc:	00104dc0 	call	104dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f9c0:	000d883a 	mov	r6,zero
    f9c4:	000b883a 	mov	r5,zero
    f9c8:	01000074 	movhi	r4,1
    f9cc:	210bd804 	addi	r4,r4,12128
    f9d0:	000fb600 	call	fb60 <altera_avalon_jtag_uart_init>
    f9d4:	01000074 	movhi	r4,1
    f9d8:	210bce04 	addi	r4,r4,12088
    f9dc:	000f9140 	call	f914 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f9e0:	0001883a 	nop
}
    f9e4:	0001883a 	nop
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f9fc:	defffa04 	addi	sp,sp,-24
    fa00:	dfc00515 	stw	ra,20(sp)
    fa04:	df000415 	stw	fp,16(sp)
    fa08:	df000404 	addi	fp,sp,16
    fa0c:	e13ffd15 	stw	r4,-12(fp)
    fa10:	e17ffe15 	stw	r5,-8(fp)
    fa14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fa18:	e0bffd17 	ldw	r2,-12(fp)
    fa1c:	10800017 	ldw	r2,0(r2)
    fa20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fa24:	e0bffc17 	ldw	r2,-16(fp)
    fa28:	10c00a04 	addi	r3,r2,40
    fa2c:	e0bffd17 	ldw	r2,-12(fp)
    fa30:	10800217 	ldw	r2,8(r2)
    fa34:	100f883a 	mov	r7,r2
    fa38:	e1bfff17 	ldw	r6,-4(fp)
    fa3c:	e17ffe17 	ldw	r5,-8(fp)
    fa40:	1809883a 	mov	r4,r3
    fa44:	00100240 	call	10024 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fa48:	e037883a 	mov	sp,fp
    fa4c:	dfc00117 	ldw	ra,4(sp)
    fa50:	df000017 	ldw	fp,0(sp)
    fa54:	dec00204 	addi	sp,sp,8
    fa58:	f800283a 	ret

0000fa5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fa5c:	defffa04 	addi	sp,sp,-24
    fa60:	dfc00515 	stw	ra,20(sp)
    fa64:	df000415 	stw	fp,16(sp)
    fa68:	df000404 	addi	fp,sp,16
    fa6c:	e13ffd15 	stw	r4,-12(fp)
    fa70:	e17ffe15 	stw	r5,-8(fp)
    fa74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fa78:	e0bffd17 	ldw	r2,-12(fp)
    fa7c:	10800017 	ldw	r2,0(r2)
    fa80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fa84:	e0bffc17 	ldw	r2,-16(fp)
    fa88:	10c00a04 	addi	r3,r2,40
    fa8c:	e0bffd17 	ldw	r2,-12(fp)
    fa90:	10800217 	ldw	r2,8(r2)
    fa94:	100f883a 	mov	r7,r2
    fa98:	e1bfff17 	ldw	r6,-4(fp)
    fa9c:	e17ffe17 	ldw	r5,-8(fp)
    faa0:	1809883a 	mov	r4,r3
    faa4:	00102400 	call	10240 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    faa8:	e037883a 	mov	sp,fp
    faac:	dfc00117 	ldw	ra,4(sp)
    fab0:	df000017 	ldw	fp,0(sp)
    fab4:	dec00204 	addi	sp,sp,8
    fab8:	f800283a 	ret

0000fabc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fabc:	defffc04 	addi	sp,sp,-16
    fac0:	dfc00315 	stw	ra,12(sp)
    fac4:	df000215 	stw	fp,8(sp)
    fac8:	df000204 	addi	fp,sp,8
    facc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fad0:	e0bfff17 	ldw	r2,-4(fp)
    fad4:	10800017 	ldw	r2,0(r2)
    fad8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fadc:	e0bffe17 	ldw	r2,-8(fp)
    fae0:	10c00a04 	addi	r3,r2,40
    fae4:	e0bfff17 	ldw	r2,-4(fp)
    fae8:	10800217 	ldw	r2,8(r2)
    faec:	100b883a 	mov	r5,r2
    faf0:	1809883a 	mov	r4,r3
    faf4:	000fecc0 	call	fecc <altera_avalon_jtag_uart_close>
}
    faf8:	e037883a 	mov	sp,fp
    fafc:	dfc00117 	ldw	ra,4(sp)
    fb00:	df000017 	ldw	fp,0(sp)
    fb04:	dec00204 	addi	sp,sp,8
    fb08:	f800283a 	ret

0000fb0c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fb0c:	defffa04 	addi	sp,sp,-24
    fb10:	dfc00515 	stw	ra,20(sp)
    fb14:	df000415 	stw	fp,16(sp)
    fb18:	df000404 	addi	fp,sp,16
    fb1c:	e13ffd15 	stw	r4,-12(fp)
    fb20:	e17ffe15 	stw	r5,-8(fp)
    fb24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fb28:	e0bffd17 	ldw	r2,-12(fp)
    fb2c:	10800017 	ldw	r2,0(r2)
    fb30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fb34:	e0bffc17 	ldw	r2,-16(fp)
    fb38:	10800a04 	addi	r2,r2,40
    fb3c:	e1bfff17 	ldw	r6,-4(fp)
    fb40:	e17ffe17 	ldw	r5,-8(fp)
    fb44:	1009883a 	mov	r4,r2
    fb48:	000ff340 	call	ff34 <altera_avalon_jtag_uart_ioctl>
}
    fb4c:	e037883a 	mov	sp,fp
    fb50:	dfc00117 	ldw	ra,4(sp)
    fb54:	df000017 	ldw	fp,0(sp)
    fb58:	dec00204 	addi	sp,sp,8
    fb5c:	f800283a 	ret

0000fb60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    fb60:	defffa04 	addi	sp,sp,-24
    fb64:	dfc00515 	stw	ra,20(sp)
    fb68:	df000415 	stw	fp,16(sp)
    fb6c:	df000404 	addi	fp,sp,16
    fb70:	e13ffd15 	stw	r4,-12(fp)
    fb74:	e17ffe15 	stw	r5,-8(fp)
    fb78:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fb7c:	e0bffd17 	ldw	r2,-12(fp)
    fb80:	00c00044 	movi	r3,1
    fb84:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    fb88:	e0bffd17 	ldw	r2,-12(fp)
    fb8c:	10800017 	ldw	r2,0(r2)
    fb90:	10800104 	addi	r2,r2,4
    fb94:	1007883a 	mov	r3,r2
    fb98:	e0bffd17 	ldw	r2,-12(fp)
    fb9c:	10800817 	ldw	r2,32(r2)
    fba0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fba4:	e0bffe17 	ldw	r2,-8(fp)
    fba8:	e0ffff17 	ldw	r3,-4(fp)
    fbac:	d8000015 	stw	zero,0(sp)
    fbb0:	e1fffd17 	ldw	r7,-12(fp)
    fbb4:	01800074 	movhi	r6,1
    fbb8:	31bf0804 	addi	r6,r6,-992
    fbbc:	180b883a 	mov	r5,r3
    fbc0:	1009883a 	mov	r4,r2
    fbc4:	0010b880 	call	10b88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    fbc8:	e0bffd17 	ldw	r2,-12(fp)
    fbcc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fbd0:	e0bffd17 	ldw	r2,-12(fp)
    fbd4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fbd8:	d0e73317 	ldw	r3,-25396(gp)
    fbdc:	e1fffd17 	ldw	r7,-12(fp)
    fbe0:	01800074 	movhi	r6,1
    fbe4:	31bf8b04 	addi	r6,r6,-468
    fbe8:	180b883a 	mov	r5,r3
    fbec:	1009883a 	mov	r4,r2
    fbf0:	00106700 	call	10670 <alt_alarm_start>
    fbf4:	1000040e 	bge	r2,zero,fc08 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fbf8:	e0fffd17 	ldw	r3,-12(fp)
    fbfc:	00a00034 	movhi	r2,32768
    fc00:	10bfffc4 	addi	r2,r2,-1
    fc04:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fc08:	0001883a 	nop
    fc0c:	e037883a 	mov	sp,fp
    fc10:	dfc00117 	ldw	ra,4(sp)
    fc14:	df000017 	ldw	fp,0(sp)
    fc18:	dec00204 	addi	sp,sp,8
    fc1c:	f800283a 	ret

0000fc20 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    fc20:	defff804 	addi	sp,sp,-32
    fc24:	df000715 	stw	fp,28(sp)
    fc28:	df000704 	addi	fp,sp,28
    fc2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fc30:	e0bfff17 	ldw	r2,-4(fp)
    fc34:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fc38:	e0bffb17 	ldw	r2,-20(fp)
    fc3c:	10800017 	ldw	r2,0(r2)
    fc40:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	10800104 	addi	r2,r2,4
    fc4c:	10800037 	ldwio	r2,0(r2)
    fc50:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fc54:	e0bffd17 	ldw	r2,-12(fp)
    fc58:	1080c00c 	andi	r2,r2,768
    fc5c:	10006d26 	beq	r2,zero,fe14 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fc60:	e0bffd17 	ldw	r2,-12(fp)
    fc64:	1080400c 	andi	r2,r2,256
    fc68:	10003526 	beq	r2,zero,fd40 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    fc6c:	00800074 	movhi	r2,1
    fc70:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc74:	e0bffb17 	ldw	r2,-20(fp)
    fc78:	10800a17 	ldw	r2,40(r2)
    fc7c:	10800044 	addi	r2,r2,1
    fc80:	1081ffcc 	andi	r2,r2,2047
    fc84:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fc88:	e0bffb17 	ldw	r2,-20(fp)
    fc8c:	10c00b17 	ldw	r3,44(r2)
    fc90:	e0bffe17 	ldw	r2,-8(fp)
    fc94:	18801526 	beq	r3,r2,fcec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    fc98:	e0bffc17 	ldw	r2,-16(fp)
    fc9c:	10800037 	ldwio	r2,0(r2)
    fca0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fca4:	e0bff917 	ldw	r2,-28(fp)
    fca8:	10a0000c 	andi	r2,r2,32768
    fcac:	10001126 	beq	r2,zero,fcf4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fcb0:	e0bffb17 	ldw	r2,-20(fp)
    fcb4:	10800a17 	ldw	r2,40(r2)
    fcb8:	e0fff917 	ldw	r3,-28(fp)
    fcbc:	1809883a 	mov	r4,r3
    fcc0:	e0fffb17 	ldw	r3,-20(fp)
    fcc4:	1885883a 	add	r2,r3,r2
    fcc8:	10800e04 	addi	r2,r2,56
    fccc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fcd0:	e0bffb17 	ldw	r2,-20(fp)
    fcd4:	10800a17 	ldw	r2,40(r2)
    fcd8:	10800044 	addi	r2,r2,1
    fcdc:	10c1ffcc 	andi	r3,r2,2047
    fce0:	e0bffb17 	ldw	r2,-20(fp)
    fce4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fce8:	003fe206 	br	fc74 <__alt_data_end+0xff00fc74>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fcec:	0001883a 	nop
    fcf0:	00000106 	br	fcf8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fcf4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fcf8:	e0bff917 	ldw	r2,-28(fp)
    fcfc:	10bfffec 	andhi	r2,r2,65535
    fd00:	10000f26 	beq	r2,zero,fd40 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fd04:	e0bffb17 	ldw	r2,-20(fp)
    fd08:	10c00817 	ldw	r3,32(r2)
    fd0c:	00bfff84 	movi	r2,-2
    fd10:	1886703a 	and	r3,r3,r2
    fd14:	e0bffb17 	ldw	r2,-20(fp)
    fd18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fd1c:	e0bffc17 	ldw	r2,-16(fp)
    fd20:	10800104 	addi	r2,r2,4
    fd24:	1007883a 	mov	r3,r2
    fd28:	e0bffb17 	ldw	r2,-20(fp)
    fd2c:	10800817 	ldw	r2,32(r2)
    fd30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fd34:	e0bffc17 	ldw	r2,-16(fp)
    fd38:	10800104 	addi	r2,r2,4
    fd3c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fd40:	e0bffd17 	ldw	r2,-12(fp)
    fd44:	1080800c 	andi	r2,r2,512
    fd48:	103fbe26 	beq	r2,zero,fc44 <__alt_data_end+0xff00fc44>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fd4c:	e0bffd17 	ldw	r2,-12(fp)
    fd50:	1004d43a 	srli	r2,r2,16
    fd54:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fd58:	00001406 	br	fdac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fd5c:	e0bffc17 	ldw	r2,-16(fp)
    fd60:	e0fffb17 	ldw	r3,-20(fp)
    fd64:	18c00d17 	ldw	r3,52(r3)
    fd68:	e13ffb17 	ldw	r4,-20(fp)
    fd6c:	20c7883a 	add	r3,r4,r3
    fd70:	18c20e04 	addi	r3,r3,2104
    fd74:	18c00003 	ldbu	r3,0(r3)
    fd78:	18c03fcc 	andi	r3,r3,255
    fd7c:	18c0201c 	xori	r3,r3,128
    fd80:	18ffe004 	addi	r3,r3,-128
    fd84:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd88:	e0bffb17 	ldw	r2,-20(fp)
    fd8c:	10800d17 	ldw	r2,52(r2)
    fd90:	10800044 	addi	r2,r2,1
    fd94:	10c1ffcc 	andi	r3,r2,2047
    fd98:	e0bffb17 	ldw	r2,-20(fp)
    fd9c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fda0:	e0bffa17 	ldw	r2,-24(fp)
    fda4:	10bfffc4 	addi	r2,r2,-1
    fda8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fdac:	e0bffa17 	ldw	r2,-24(fp)
    fdb0:	10000526 	beq	r2,zero,fdc8 <altera_avalon_jtag_uart_irq+0x1a8>
    fdb4:	e0bffb17 	ldw	r2,-20(fp)
    fdb8:	10c00d17 	ldw	r3,52(r2)
    fdbc:	e0bffb17 	ldw	r2,-20(fp)
    fdc0:	10800c17 	ldw	r2,48(r2)
    fdc4:	18bfe51e 	bne	r3,r2,fd5c <__alt_data_end+0xff00fd5c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fdc8:	e0bffa17 	ldw	r2,-24(fp)
    fdcc:	103f9d26 	beq	r2,zero,fc44 <__alt_data_end+0xff00fc44>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fdd0:	e0bffb17 	ldw	r2,-20(fp)
    fdd4:	10c00817 	ldw	r3,32(r2)
    fdd8:	00bfff44 	movi	r2,-3
    fddc:	1886703a 	and	r3,r3,r2
    fde0:	e0bffb17 	ldw	r2,-20(fp)
    fde4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fde8:	e0bffb17 	ldw	r2,-20(fp)
    fdec:	10800017 	ldw	r2,0(r2)
    fdf0:	10800104 	addi	r2,r2,4
    fdf4:	1007883a 	mov	r3,r2
    fdf8:	e0bffb17 	ldw	r2,-20(fp)
    fdfc:	10800817 	ldw	r2,32(r2)
    fe00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fe04:	e0bffc17 	ldw	r2,-16(fp)
    fe08:	10800104 	addi	r2,r2,4
    fe0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fe10:	003f8c06 	br	fc44 <__alt_data_end+0xff00fc44>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fe14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fe18:	0001883a 	nop
    fe1c:	e037883a 	mov	sp,fp
    fe20:	df000017 	ldw	fp,0(sp)
    fe24:	dec00104 	addi	sp,sp,4
    fe28:	f800283a 	ret

0000fe2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fe2c:	defff804 	addi	sp,sp,-32
    fe30:	df000715 	stw	fp,28(sp)
    fe34:	df000704 	addi	fp,sp,28
    fe38:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fe3c:	e0bffb17 	ldw	r2,-20(fp)
    fe40:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fe44:	e0bff917 	ldw	r2,-28(fp)
    fe48:	10800017 	ldw	r2,0(r2)
    fe4c:	10800104 	addi	r2,r2,4
    fe50:	10800037 	ldwio	r2,0(r2)
    fe54:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fe58:	e0bffa17 	ldw	r2,-24(fp)
    fe5c:	1081000c 	andi	r2,r2,1024
    fe60:	10000b26 	beq	r2,zero,fe90 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fe64:	e0bff917 	ldw	r2,-28(fp)
    fe68:	10800017 	ldw	r2,0(r2)
    fe6c:	10800104 	addi	r2,r2,4
    fe70:	1007883a 	mov	r3,r2
    fe74:	e0bff917 	ldw	r2,-28(fp)
    fe78:	10800817 	ldw	r2,32(r2)
    fe7c:	10810014 	ori	r2,r2,1024
    fe80:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fe84:	e0bff917 	ldw	r2,-28(fp)
    fe88:	10000915 	stw	zero,36(r2)
    fe8c:	00000a06 	br	feb8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fe90:	e0bff917 	ldw	r2,-28(fp)
    fe94:	10c00917 	ldw	r3,36(r2)
    fe98:	00a00034 	movhi	r2,32768
    fe9c:	10bfff04 	addi	r2,r2,-4
    fea0:	10c00536 	bltu	r2,r3,feb8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fea4:	e0bff917 	ldw	r2,-28(fp)
    fea8:	10800917 	ldw	r2,36(r2)
    feac:	10c00044 	addi	r3,r2,1
    feb0:	e0bff917 	ldw	r2,-28(fp)
    feb4:	10c00915 	stw	r3,36(r2)
    feb8:	d0a73317 	ldw	r2,-25396(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    febc:	e037883a 	mov	sp,fp
    fec0:	df000017 	ldw	fp,0(sp)
    fec4:	dec00104 	addi	sp,sp,4
    fec8:	f800283a 	ret

0000fecc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fecc:	defffd04 	addi	sp,sp,-12
    fed0:	df000215 	stw	fp,8(sp)
    fed4:	df000204 	addi	fp,sp,8
    fed8:	e13ffe15 	stw	r4,-8(fp)
    fedc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fee0:	00000506 	br	fef8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fee4:	e0bfff17 	ldw	r2,-4(fp)
    fee8:	1090000c 	andi	r2,r2,16384
    feec:	10000226 	beq	r2,zero,fef8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fef0:	00bffd44 	movi	r2,-11
    fef4:	00000b06 	br	ff24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fef8:	e0bffe17 	ldw	r2,-8(fp)
    fefc:	10c00d17 	ldw	r3,52(r2)
    ff00:	e0bffe17 	ldw	r2,-8(fp)
    ff04:	10800c17 	ldw	r2,48(r2)
    ff08:	18800526 	beq	r3,r2,ff20 <altera_avalon_jtag_uart_close+0x54>
    ff0c:	e0bffe17 	ldw	r2,-8(fp)
    ff10:	10c00917 	ldw	r3,36(r2)
    ff14:	e0bffe17 	ldw	r2,-8(fp)
    ff18:	10800117 	ldw	r2,4(r2)
    ff1c:	18bff136 	bltu	r3,r2,fee4 <__alt_data_end+0xff00fee4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ff20:	0005883a 	mov	r2,zero
}
    ff24:	e037883a 	mov	sp,fp
    ff28:	df000017 	ldw	fp,0(sp)
    ff2c:	dec00104 	addi	sp,sp,4
    ff30:	f800283a 	ret

0000ff34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ff34:	defffa04 	addi	sp,sp,-24
    ff38:	df000515 	stw	fp,20(sp)
    ff3c:	df000504 	addi	fp,sp,20
    ff40:	e13ffd15 	stw	r4,-12(fp)
    ff44:	e17ffe15 	stw	r5,-8(fp)
    ff48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ff4c:	00bff9c4 	movi	r2,-25
    ff50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ff54:	e0bffe17 	ldw	r2,-8(fp)
    ff58:	10da8060 	cmpeqi	r3,r2,27137
    ff5c:	1800031e 	bne	r3,zero,ff6c <altera_avalon_jtag_uart_ioctl+0x38>
    ff60:	109a80a0 	cmpeqi	r2,r2,27138
    ff64:	1000181e 	bne	r2,zero,ffc8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ff68:	00002906 	br	10010 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ff6c:	e0bffd17 	ldw	r2,-12(fp)
    ff70:	10c00117 	ldw	r3,4(r2)
    ff74:	00a00034 	movhi	r2,32768
    ff78:	10bfffc4 	addi	r2,r2,-1
    ff7c:	18802126 	beq	r3,r2,10004 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	10800017 	ldw	r2,0(r2)
    ff88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ff8c:	e0bffc17 	ldw	r2,-16(fp)
    ff90:	10800090 	cmplti	r2,r2,2
    ff94:	1000061e 	bne	r2,zero,ffb0 <altera_avalon_jtag_uart_ioctl+0x7c>
    ff98:	e0fffc17 	ldw	r3,-16(fp)
    ff9c:	00a00034 	movhi	r2,32768
    ffa0:	10bfffc4 	addi	r2,r2,-1
    ffa4:	18800226 	beq	r3,r2,ffb0 <altera_avalon_jtag_uart_ioctl+0x7c>
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	00000206 	br	ffb8 <altera_avalon_jtag_uart_ioctl+0x84>
    ffb0:	00a00034 	movhi	r2,32768
    ffb4:	10bfff84 	addi	r2,r2,-2
    ffb8:	e0fffd17 	ldw	r3,-12(fp)
    ffbc:	18800115 	stw	r2,4(r3)
      rc = 0;
    ffc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ffc4:	00000f06 	br	10004 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ffc8:	e0bffd17 	ldw	r2,-12(fp)
    ffcc:	10c00117 	ldw	r3,4(r2)
    ffd0:	00a00034 	movhi	r2,32768
    ffd4:	10bfffc4 	addi	r2,r2,-1
    ffd8:	18800c26 	beq	r3,r2,1000c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ffdc:	e0bffd17 	ldw	r2,-12(fp)
    ffe0:	10c00917 	ldw	r3,36(r2)
    ffe4:	e0bffd17 	ldw	r2,-12(fp)
    ffe8:	10800117 	ldw	r2,4(r2)
    ffec:	1885803a 	cmpltu	r2,r3,r2
    fff0:	10c03fcc 	andi	r3,r2,255
    fff4:	e0bfff17 	ldw	r2,-4(fp)
    fff8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fffc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10000:	00000206 	br	1000c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10004:	0001883a 	nop
   10008:	00000106 	br	10010 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1000c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10010:	e0bffb17 	ldw	r2,-20(fp)
}
   10014:	e037883a 	mov	sp,fp
   10018:	df000017 	ldw	fp,0(sp)
   1001c:	dec00104 	addi	sp,sp,4
   10020:	f800283a 	ret

00010024 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10024:	defff304 	addi	sp,sp,-52
   10028:	dfc00c15 	stw	ra,48(sp)
   1002c:	df000b15 	stw	fp,44(sp)
   10030:	df000b04 	addi	fp,sp,44
   10034:	e13ffc15 	stw	r4,-16(fp)
   10038:	e17ffd15 	stw	r5,-12(fp)
   1003c:	e1bffe15 	stw	r6,-8(fp)
   10040:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10044:	e0bffd17 	ldw	r2,-12(fp)
   10048:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1004c:	00004706 	br	1016c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10050:	e0bffc17 	ldw	r2,-16(fp)
   10054:	10800a17 	ldw	r2,40(r2)
   10058:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1005c:	e0bffc17 	ldw	r2,-16(fp)
   10060:	10800b17 	ldw	r2,44(r2)
   10064:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10068:	e0fff717 	ldw	r3,-36(fp)
   1006c:	e0bff817 	ldw	r2,-32(fp)
   10070:	18800536 	bltu	r3,r2,10088 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10074:	e0fff717 	ldw	r3,-36(fp)
   10078:	e0bff817 	ldw	r2,-32(fp)
   1007c:	1885c83a 	sub	r2,r3,r2
   10080:	e0bff615 	stw	r2,-40(fp)
   10084:	00000406 	br	10098 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10088:	00c20004 	movi	r3,2048
   1008c:	e0bff817 	ldw	r2,-32(fp)
   10090:	1885c83a 	sub	r2,r3,r2
   10094:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10098:	e0bff617 	ldw	r2,-40(fp)
   1009c:	10001e26 	beq	r2,zero,10118 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   100a0:	e0fffe17 	ldw	r3,-8(fp)
   100a4:	e0bff617 	ldw	r2,-40(fp)
   100a8:	1880022e 	bgeu	r3,r2,100b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   100ac:	e0bffe17 	ldw	r2,-8(fp)
   100b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	10c00e04 	addi	r3,r2,56
   100bc:	e0bff817 	ldw	r2,-32(fp)
   100c0:	1885883a 	add	r2,r3,r2
   100c4:	e1bff617 	ldw	r6,-40(fp)
   100c8:	100b883a 	mov	r5,r2
   100cc:	e13ff517 	ldw	r4,-44(fp)
   100d0:	0008cd00 	call	8cd0 <memcpy>
      ptr   += n;
   100d4:	e0fff517 	ldw	r3,-44(fp)
   100d8:	e0bff617 	ldw	r2,-40(fp)
   100dc:	1885883a 	add	r2,r3,r2
   100e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   100e4:	e0fffe17 	ldw	r3,-8(fp)
   100e8:	e0bff617 	ldw	r2,-40(fp)
   100ec:	1885c83a 	sub	r2,r3,r2
   100f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100f4:	e0fff817 	ldw	r3,-32(fp)
   100f8:	e0bff617 	ldw	r2,-40(fp)
   100fc:	1885883a 	add	r2,r3,r2
   10100:	10c1ffcc 	andi	r3,r2,2047
   10104:	e0bffc17 	ldw	r2,-16(fp)
   10108:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1010c:	e0bffe17 	ldw	r2,-8(fp)
   10110:	00bfcf16 	blt	zero,r2,10050 <__alt_data_end+0xff010050>
   10114:	00000106 	br	1011c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10118:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1011c:	e0fff517 	ldw	r3,-44(fp)
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	1880141e 	bne	r3,r2,10178 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10128:	e0bfff17 	ldw	r2,-4(fp)
   1012c:	1090000c 	andi	r2,r2,16384
   10130:	1000131e 	bne	r2,zero,10180 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10134:	0001883a 	nop
   10138:	e0bffc17 	ldw	r2,-16(fp)
   1013c:	10c00a17 	ldw	r3,40(r2)
   10140:	e0bff717 	ldw	r2,-36(fp)
   10144:	1880051e 	bne	r3,r2,1015c <altera_avalon_jtag_uart_read+0x138>
   10148:	e0bffc17 	ldw	r2,-16(fp)
   1014c:	10c00917 	ldw	r3,36(r2)
   10150:	e0bffc17 	ldw	r2,-16(fp)
   10154:	10800117 	ldw	r2,4(r2)
   10158:	18bff736 	bltu	r3,r2,10138 <__alt_data_end+0xff010138>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1015c:	e0bffc17 	ldw	r2,-16(fp)
   10160:	10c00a17 	ldw	r3,40(r2)
   10164:	e0bff717 	ldw	r2,-36(fp)
   10168:	18800726 	beq	r3,r2,10188 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1016c:	e0bffe17 	ldw	r2,-8(fp)
   10170:	00bfb716 	blt	zero,r2,10050 <__alt_data_end+0xff010050>
   10174:	00000506 	br	1018c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10178:	0001883a 	nop
   1017c:	00000306 	br	1018c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10180:	0001883a 	nop
   10184:	00000106 	br	1018c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10188:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1018c:	e0fff517 	ldw	r3,-44(fp)
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	18801826 	beq	r3,r2,101f8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10198:	0005303a 	rdctl	r2,status
   1019c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101a0:	e0fffb17 	ldw	r3,-20(fp)
   101a4:	00bfff84 	movi	r2,-2
   101a8:	1884703a 	and	r2,r3,r2
   101ac:	1001703a 	wrctl	status,r2
  
  return context;
   101b0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   101b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   101b8:	e0bffc17 	ldw	r2,-16(fp)
   101bc:	10800817 	ldw	r2,32(r2)
   101c0:	10c00054 	ori	r3,r2,1
   101c4:	e0bffc17 	ldw	r2,-16(fp)
   101c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   101cc:	e0bffc17 	ldw	r2,-16(fp)
   101d0:	10800017 	ldw	r2,0(r2)
   101d4:	10800104 	addi	r2,r2,4
   101d8:	1007883a 	mov	r3,r2
   101dc:	e0bffc17 	ldw	r2,-16(fp)
   101e0:	10800817 	ldw	r2,32(r2)
   101e4:	18800035 	stwio	r2,0(r3)
   101e8:	e0bffa17 	ldw	r2,-24(fp)
   101ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101f0:	e0bff917 	ldw	r2,-28(fp)
   101f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   101f8:	e0fff517 	ldw	r3,-44(fp)
   101fc:	e0bffd17 	ldw	r2,-12(fp)
   10200:	18800426 	beq	r3,r2,10214 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10204:	e0fff517 	ldw	r3,-44(fp)
   10208:	e0bffd17 	ldw	r2,-12(fp)
   1020c:	1885c83a 	sub	r2,r3,r2
   10210:	00000606 	br	1022c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1090000c 	andi	r2,r2,16384
   1021c:	10000226 	beq	r2,zero,10228 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10220:	00bffd44 	movi	r2,-11
   10224:	00000106 	br	1022c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10228:	00bffec4 	movi	r2,-5
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

00010240 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10240:	defff304 	addi	sp,sp,-52
   10244:	dfc00c15 	stw	ra,48(sp)
   10248:	df000b15 	stw	fp,44(sp)
   1024c:	df000b04 	addi	fp,sp,44
   10250:	e13ffc15 	stw	r4,-16(fp)
   10254:	e17ffd15 	stw	r5,-12(fp)
   10258:	e1bffe15 	stw	r6,-8(fp)
   1025c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10260:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10264:	e0bffd17 	ldw	r2,-12(fp)
   10268:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1026c:	00003706 	br	1034c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10270:	e0bffc17 	ldw	r2,-16(fp)
   10274:	10800c17 	ldw	r2,48(r2)
   10278:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1027c:	e0bffc17 	ldw	r2,-16(fp)
   10280:	10800d17 	ldw	r2,52(r2)
   10284:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10288:	e0fff917 	ldw	r3,-28(fp)
   1028c:	e0bff517 	ldw	r2,-44(fp)
   10290:	1880062e 	bgeu	r3,r2,102ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10294:	e0fff517 	ldw	r3,-44(fp)
   10298:	e0bff917 	ldw	r2,-28(fp)
   1029c:	1885c83a 	sub	r2,r3,r2
   102a0:	10bfffc4 	addi	r2,r2,-1
   102a4:	e0bff615 	stw	r2,-40(fp)
   102a8:	00000b06 	br	102d8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   102ac:	e0bff517 	ldw	r2,-44(fp)
   102b0:	10000526 	beq	r2,zero,102c8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   102b4:	00c20004 	movi	r3,2048
   102b8:	e0bff917 	ldw	r2,-28(fp)
   102bc:	1885c83a 	sub	r2,r3,r2
   102c0:	e0bff615 	stw	r2,-40(fp)
   102c4:	00000406 	br	102d8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   102c8:	00c1ffc4 	movi	r3,2047
   102cc:	e0bff917 	ldw	r2,-28(fp)
   102d0:	1885c83a 	sub	r2,r3,r2
   102d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   102d8:	e0bff617 	ldw	r2,-40(fp)
   102dc:	10001e26 	beq	r2,zero,10358 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   102e0:	e0fffe17 	ldw	r3,-8(fp)
   102e4:	e0bff617 	ldw	r2,-40(fp)
   102e8:	1880022e 	bgeu	r3,r2,102f4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   102ec:	e0bffe17 	ldw	r2,-8(fp)
   102f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   102f4:	e0bffc17 	ldw	r2,-16(fp)
   102f8:	10c20e04 	addi	r3,r2,2104
   102fc:	e0bff917 	ldw	r2,-28(fp)
   10300:	1885883a 	add	r2,r3,r2
   10304:	e1bff617 	ldw	r6,-40(fp)
   10308:	e17ffd17 	ldw	r5,-12(fp)
   1030c:	1009883a 	mov	r4,r2
   10310:	0008cd00 	call	8cd0 <memcpy>
      ptr   += n;
   10314:	e0fffd17 	ldw	r3,-12(fp)
   10318:	e0bff617 	ldw	r2,-40(fp)
   1031c:	1885883a 	add	r2,r3,r2
   10320:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10324:	e0fffe17 	ldw	r3,-8(fp)
   10328:	e0bff617 	ldw	r2,-40(fp)
   1032c:	1885c83a 	sub	r2,r3,r2
   10330:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10334:	e0fff917 	ldw	r3,-28(fp)
   10338:	e0bff617 	ldw	r2,-40(fp)
   1033c:	1885883a 	add	r2,r3,r2
   10340:	10c1ffcc 	andi	r3,r2,2047
   10344:	e0bffc17 	ldw	r2,-16(fp)
   10348:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1034c:	e0bffe17 	ldw	r2,-8(fp)
   10350:	00bfc716 	blt	zero,r2,10270 <__alt_data_end+0xff010270>
   10354:	00000106 	br	1035c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10358:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1035c:	0005303a 	rdctl	r2,status
   10360:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10364:	e0fffb17 	ldw	r3,-20(fp)
   10368:	00bfff84 	movi	r2,-2
   1036c:	1884703a 	and	r2,r3,r2
   10370:	1001703a 	wrctl	status,r2
  
  return context;
   10374:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10378:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1037c:	e0bffc17 	ldw	r2,-16(fp)
   10380:	10800817 	ldw	r2,32(r2)
   10384:	10c00094 	ori	r3,r2,2
   10388:	e0bffc17 	ldw	r2,-16(fp)
   1038c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10390:	e0bffc17 	ldw	r2,-16(fp)
   10394:	10800017 	ldw	r2,0(r2)
   10398:	10800104 	addi	r2,r2,4
   1039c:	1007883a 	mov	r3,r2
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	10800817 	ldw	r2,32(r2)
   103a8:	18800035 	stwio	r2,0(r3)
   103ac:	e0bffa17 	ldw	r2,-24(fp)
   103b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103b4:	e0bff817 	ldw	r2,-32(fp)
   103b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   103bc:	e0bffe17 	ldw	r2,-8(fp)
   103c0:	0080100e 	bge	zero,r2,10404 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   103c4:	e0bfff17 	ldw	r2,-4(fp)
   103c8:	1090000c 	andi	r2,r2,16384
   103cc:	1000101e 	bne	r2,zero,10410 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   103d0:	0001883a 	nop
   103d4:	e0bffc17 	ldw	r2,-16(fp)
   103d8:	10c00d17 	ldw	r3,52(r2)
   103dc:	e0bff517 	ldw	r2,-44(fp)
   103e0:	1880051e 	bne	r3,r2,103f8 <altera_avalon_jtag_uart_write+0x1b8>
   103e4:	e0bffc17 	ldw	r2,-16(fp)
   103e8:	10c00917 	ldw	r3,36(r2)
   103ec:	e0bffc17 	ldw	r2,-16(fp)
   103f0:	10800117 	ldw	r2,4(r2)
   103f4:	18bff736 	bltu	r3,r2,103d4 <__alt_data_end+0xff0103d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10800917 	ldw	r2,36(r2)
   10400:	1000051e 	bne	r2,zero,10418 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10404:	e0bffe17 	ldw	r2,-8(fp)
   10408:	00bfd016 	blt	zero,r2,1034c <__alt_data_end+0xff01034c>
   1040c:	00000306 	br	1041c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10410:	0001883a 	nop
   10414:	00000106 	br	1041c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10418:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1041c:	e0fffd17 	ldw	r3,-12(fp)
   10420:	e0bff717 	ldw	r2,-36(fp)
   10424:	18800426 	beq	r3,r2,10438 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10428:	e0fffd17 	ldw	r3,-12(fp)
   1042c:	e0bff717 	ldw	r2,-36(fp)
   10430:	1885c83a 	sub	r2,r3,r2
   10434:	00000606 	br	10450 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10438:	e0bfff17 	ldw	r2,-4(fp)
   1043c:	1090000c 	andi	r2,r2,16384
   10440:	10000226 	beq	r2,zero,1044c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10444:	00bffd44 	movi	r2,-11
   10448:	00000106 	br	10450 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1044c:	00bffec4 	movi	r2,-5
}
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10464:	defffa04 	addi	sp,sp,-24
   10468:	dfc00515 	stw	ra,20(sp)
   1046c:	df000415 	stw	fp,16(sp)
   10470:	df000404 	addi	fp,sp,16
   10474:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10478:	0007883a 	mov	r3,zero
   1047c:	e0bfff17 	ldw	r2,-4(fp)
   10480:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10484:	e0bfff17 	ldw	r2,-4(fp)
   10488:	10800104 	addi	r2,r2,4
   1048c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10490:	0005303a 	rdctl	r2,status
   10494:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10498:	e0fffd17 	ldw	r3,-12(fp)
   1049c:	00bfff84 	movi	r2,-2
   104a0:	1884703a 	and	r2,r3,r2
   104a4:	1001703a 	wrctl	status,r2
  
  return context;
   104a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   104ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   104b0:	00112580 	call	11258 <alt_tick>
   104b4:	e0bffc17 	ldw	r2,-16(fp)
   104b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   104c4:	0001883a 	nop
   104c8:	e037883a 	mov	sp,fp
   104cc:	dfc00117 	ldw	ra,4(sp)
   104d0:	df000017 	ldw	fp,0(sp)
   104d4:	dec00204 	addi	sp,sp,8
   104d8:	f800283a 	ret

000104dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   104dc:	defff804 	addi	sp,sp,-32
   104e0:	dfc00715 	stw	ra,28(sp)
   104e4:	df000615 	stw	fp,24(sp)
   104e8:	df000604 	addi	fp,sp,24
   104ec:	e13ffc15 	stw	r4,-16(fp)
   104f0:	e17ffd15 	stw	r5,-12(fp)
   104f4:	e1bffe15 	stw	r6,-8(fp)
   104f8:	e1ffff15 	stw	r7,-4(fp)
   104fc:	e0bfff17 	ldw	r2,-4(fp)
   10500:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10504:	d0a73317 	ldw	r2,-25396(gp)
   10508:	1000021e 	bne	r2,zero,10514 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1050c:	e0bffb17 	ldw	r2,-20(fp)
   10510:	d0a73315 	stw	r2,-25396(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10514:	e0bffc17 	ldw	r2,-16(fp)
   10518:	10800104 	addi	r2,r2,4
   1051c:	00c001c4 	movi	r3,7
   10520:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10524:	d8000015 	stw	zero,0(sp)
   10528:	e1fffc17 	ldw	r7,-16(fp)
   1052c:	01800074 	movhi	r6,1
   10530:	31811904 	addi	r6,r6,1124
   10534:	e17ffe17 	ldw	r5,-8(fp)
   10538:	e13ffd17 	ldw	r4,-12(fp)
   1053c:	0010b880 	call	10b88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10540:	0001883a 	nop
   10544:	e037883a 	mov	sp,fp
   10548:	dfc00117 	ldw	ra,4(sp)
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00204 	addi	sp,sp,8
   10554:	f800283a 	ret

00010558 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   10558:	defffe04 	addi	sp,sp,-8
   1055c:	df000115 	stw	fp,4(sp)
   10560:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   10564:	d0a73017 	ldw	r2,-25408(gp)
   10568:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1056c:	d0a73117 	ldw	r2,-25404(gp)
   10570:	1000021e 	bne	r2,zero,1057c <alt_timestamp_start+0x24>
  {
    return -1;
   10574:	00bfffc4 	movi	r2,-1
   10578:	00001106 	br	105c0 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1057c:	e0bfff17 	ldw	r2,-4(fp)
   10580:	10800104 	addi	r2,r2,4
   10584:	00c00204 	movi	r3,8
   10588:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	10800204 	addi	r2,r2,8
   10594:	00ffffd4 	movui	r3,65535
   10598:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10800304 	addi	r2,r2,12
   105a4:	00ffffd4 	movui	r3,65535
   105a8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   105ac:	e0bfff17 	ldw	r2,-4(fp)
   105b0:	10800104 	addi	r2,r2,4
   105b4:	00c00104 	movi	r3,4
   105b8:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   105bc:	0005883a 	mov	r2,zero
}
   105c0:	e037883a 	mov	sp,fp
   105c4:	df000017 	ldw	fp,0(sp)
   105c8:	dec00104 	addi	sp,sp,4
   105cc:	f800283a 	ret

000105d0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   105d0:	defffc04 	addi	sp,sp,-16
   105d4:	df000315 	stw	fp,12(sp)
   105d8:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   105dc:	d0a73017 	ldw	r2,-25408(gp)
   105e0:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   105e4:	d0a73117 	ldw	r2,-25404(gp)
   105e8:	1000021e 	bne	r2,zero,105f4 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   105ec:	00bfffc4 	movi	r2,-1
   105f0:	00001306 	br	10640 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   105f4:	e0bffd17 	ldw	r2,-12(fp)
   105f8:	10800404 	addi	r2,r2,16
   105fc:	0007883a 	mov	r3,zero
   10600:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10604:	e0bffd17 	ldw	r2,-12(fp)
   10608:	10800404 	addi	r2,r2,16
   1060c:	10800037 	ldwio	r2,0(r2)
   10610:	10bfffcc 	andi	r2,r2,65535
   10614:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10618:	e0bffd17 	ldw	r2,-12(fp)
   1061c:	10800504 	addi	r2,r2,20
   10620:	10800037 	ldwio	r2,0(r2)
   10624:	10bfffcc 	andi	r2,r2,65535
   10628:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1062c:	e0bfff17 	ldw	r2,-4(fp)
   10630:	1006943a 	slli	r3,r2,16
   10634:	e0bffe17 	ldw	r2,-8(fp)
   10638:	1884b03a 	or	r2,r3,r2
   1063c:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10640:	e037883a 	mov	sp,fp
   10644:	df000017 	ldw	fp,0(sp)
   10648:	dec00104 	addi	sp,sp,4
   1064c:	f800283a 	ret

00010650 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10650:	deffff04 	addi	sp,sp,-4
   10654:	df000015 	stw	fp,0(sp)
   10658:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1065c:	d0a73117 	ldw	r2,-25404(gp)
}
   10660:	e037883a 	mov	sp,fp
   10664:	df000017 	ldw	fp,0(sp)
   10668:	dec00104 	addi	sp,sp,4
   1066c:	f800283a 	ret

00010670 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10670:	defff504 	addi	sp,sp,-44
   10674:	df000a15 	stw	fp,40(sp)
   10678:	df000a04 	addi	fp,sp,40
   1067c:	e13ffc15 	stw	r4,-16(fp)
   10680:	e17ffd15 	stw	r5,-12(fp)
   10684:	e1bffe15 	stw	r6,-8(fp)
   10688:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1068c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10690:	d0a73317 	ldw	r2,-25396(gp)
  
  if (alt_ticks_per_second ())
   10694:	10003c26 	beq	r2,zero,10788 <alt_alarm_start+0x118>
  {
    if (alarm)
   10698:	e0bffc17 	ldw	r2,-16(fp)
   1069c:	10003826 	beq	r2,zero,10780 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   106a0:	e0bffc17 	ldw	r2,-16(fp)
   106a4:	e0fffe17 	ldw	r3,-8(fp)
   106a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   106ac:	e0bffc17 	ldw	r2,-16(fp)
   106b0:	e0ffff17 	ldw	r3,-4(fp)
   106b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106b8:	0005303a 	rdctl	r2,status
   106bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106c0:	e0fff917 	ldw	r3,-28(fp)
   106c4:	00bfff84 	movi	r2,-2
   106c8:	1884703a 	and	r2,r3,r2
   106cc:	1001703a 	wrctl	status,r2
  
  return context;
   106d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   106d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   106d8:	d0a73417 	ldw	r2,-25392(gp)
      
      current_nticks = alt_nticks();
   106dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   106e0:	e0fffd17 	ldw	r3,-12(fp)
   106e4:	e0bff617 	ldw	r2,-40(fp)
   106e8:	1885883a 	add	r2,r3,r2
   106ec:	10c00044 	addi	r3,r2,1
   106f0:	e0bffc17 	ldw	r2,-16(fp)
   106f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10c00217 	ldw	r3,8(r2)
   10700:	e0bff617 	ldw	r2,-40(fp)
   10704:	1880042e 	bgeu	r3,r2,10718 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10708:	e0bffc17 	ldw	r2,-16(fp)
   1070c:	00c00044 	movi	r3,1
   10710:	10c00405 	stb	r3,16(r2)
   10714:	00000206 	br	10720 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10718:	e0bffc17 	ldw	r2,-16(fp)
   1071c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	d0e00e04 	addi	r3,gp,-32712
   10728:	e0fffa15 	stw	r3,-24(fp)
   1072c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10730:	e0bffb17 	ldw	r2,-20(fp)
   10734:	e0fffa17 	ldw	r3,-24(fp)
   10738:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1073c:	e0bffa17 	ldw	r2,-24(fp)
   10740:	10c00017 	ldw	r3,0(r2)
   10744:	e0bffb17 	ldw	r2,-20(fp)
   10748:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1074c:	e0bffa17 	ldw	r2,-24(fp)
   10750:	10800017 	ldw	r2,0(r2)
   10754:	e0fffb17 	ldw	r3,-20(fp)
   10758:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1075c:	e0bffa17 	ldw	r2,-24(fp)
   10760:	e0fffb17 	ldw	r3,-20(fp)
   10764:	10c00015 	stw	r3,0(r2)
   10768:	e0bff817 	ldw	r2,-32(fp)
   1076c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10770:	e0bff717 	ldw	r2,-36(fp)
   10774:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10778:	0005883a 	mov	r2,zero
   1077c:	00000306 	br	1078c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10780:	00bffa84 	movi	r2,-22
   10784:	00000106 	br	1078c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10788:	00bfde84 	movi	r2,-134
  }
}
   1078c:	e037883a 	mov	sp,fp
   10790:	df000017 	ldw	fp,0(sp)
   10794:	dec00104 	addi	sp,sp,4
   10798:	f800283a 	ret

0001079c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1079c:	defffa04 	addi	sp,sp,-24
   107a0:	dfc00515 	stw	ra,20(sp)
   107a4:	df000415 	stw	fp,16(sp)
   107a8:	df000404 	addi	fp,sp,16
   107ac:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   107b0:	008000c4 	movi	r2,3
   107b4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   107b8:	e0fffd17 	ldw	r3,-12(fp)
   107bc:	008003f4 	movhi	r2,15
   107c0:	10909004 	addi	r2,r2,16960
   107c4:	1885383a 	mul	r2,r3,r2
   107c8:	100b883a 	mov	r5,r2
   107cc:	0100bef4 	movhi	r4,763
   107d0:	213c2004 	addi	r4,r4,-3968
   107d4:	00026d80 	call	26d8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   107d8:	100b883a 	mov	r5,r2
   107dc:	01200034 	movhi	r4,32768
   107e0:	213fffc4 	addi	r4,r4,-1
   107e4:	00026d80 	call	26d8 <__udivsi3>
   107e8:	100b883a 	mov	r5,r2
   107ec:	e13fff17 	ldw	r4,-4(fp)
   107f0:	00026d80 	call	26d8 <__udivsi3>
   107f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   107f8:	e0bffe17 	ldw	r2,-8(fp)
   107fc:	10002a26 	beq	r2,zero,108a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10800:	e03ffc15 	stw	zero,-16(fp)
   10804:	00001706 	br	10864 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10808:	00a00034 	movhi	r2,32768
   1080c:	10bfffc4 	addi	r2,r2,-1
   10810:	10bfffc4 	addi	r2,r2,-1
   10814:	103ffe1e 	bne	r2,zero,10810 <__alt_data_end+0xff010810>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10818:	e0fffd17 	ldw	r3,-12(fp)
   1081c:	008003f4 	movhi	r2,15
   10820:	10909004 	addi	r2,r2,16960
   10824:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10828:	100b883a 	mov	r5,r2
   1082c:	0100bef4 	movhi	r4,763
   10830:	213c2004 	addi	r4,r4,-3968
   10834:	00026d80 	call	26d8 <__udivsi3>
   10838:	100b883a 	mov	r5,r2
   1083c:	01200034 	movhi	r4,32768
   10840:	213fffc4 	addi	r4,r4,-1
   10844:	00026d80 	call	26d8 <__udivsi3>
   10848:	1007883a 	mov	r3,r2
   1084c:	e0bfff17 	ldw	r2,-4(fp)
   10850:	10c5c83a 	sub	r2,r2,r3
   10854:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	10800044 	addi	r2,r2,1
   10860:	e0bffc15 	stw	r2,-16(fp)
   10864:	e0fffc17 	ldw	r3,-16(fp)
   10868:	e0bffe17 	ldw	r2,-8(fp)
   1086c:	18bfe616 	blt	r3,r2,10808 <__alt_data_end+0xff010808>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10870:	e0fffd17 	ldw	r3,-12(fp)
   10874:	008003f4 	movhi	r2,15
   10878:	10909004 	addi	r2,r2,16960
   1087c:	1885383a 	mul	r2,r3,r2
   10880:	100b883a 	mov	r5,r2
   10884:	0100bef4 	movhi	r4,763
   10888:	213c2004 	addi	r4,r4,-3968
   1088c:	00026d80 	call	26d8 <__udivsi3>
   10890:	1007883a 	mov	r3,r2
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1089c:	10bfffc4 	addi	r2,r2,-1
   108a0:	103ffe1e 	bne	r2,zero,1089c <__alt_data_end+0xff01089c>
   108a4:	00000d06 	br	108dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   108a8:	e0fffd17 	ldw	r3,-12(fp)
   108ac:	008003f4 	movhi	r2,15
   108b0:	10909004 	addi	r2,r2,16960
   108b4:	1885383a 	mul	r2,r3,r2
   108b8:	100b883a 	mov	r5,r2
   108bc:	0100bef4 	movhi	r4,763
   108c0:	213c2004 	addi	r4,r4,-3968
   108c4:	00026d80 	call	26d8 <__udivsi3>
   108c8:	1007883a 	mov	r3,r2
   108cc:	e0bfff17 	ldw	r2,-4(fp)
   108d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   108d4:	10bfffc4 	addi	r2,r2,-1
   108d8:	00bffe16 	blt	zero,r2,108d4 <__alt_data_end+0xff0108d4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   108dc:	0005883a 	mov	r2,zero
}
   108e0:	e037883a 	mov	sp,fp
   108e4:	dfc00117 	ldw	ra,4(sp)
   108e8:	df000017 	ldw	fp,0(sp)
   108ec:	dec00204 	addi	sp,sp,8
   108f0:	f800283a 	ret

000108f4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   108f4:	defffb04 	addi	sp,sp,-20
   108f8:	df000415 	stw	fp,16(sp)
   108fc:	df000404 	addi	fp,sp,16
   10900:	e13ffe15 	stw	r4,-8(fp)
   10904:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   10908:	e0fffe17 	ldw	r3,-8(fp)
   1090c:	e0bfff17 	ldw	r2,-4(fp)
   10910:	1885883a 	add	r2,r3,r2
   10914:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   10918:	e0bffe17 	ldw	r2,-8(fp)
   1091c:	e0bffc15 	stw	r2,-16(fp)
   10920:	00000506 	br	10938 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   10924:	e0bffc17 	ldw	r2,-16(fp)
   10928:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1092c:	e0bffc17 	ldw	r2,-16(fp)
   10930:	10800804 	addi	r2,r2,32
   10934:	e0bffc15 	stw	r2,-16(fp)
   10938:	e0fffc17 	ldw	r3,-16(fp)
   1093c:	e0bffd17 	ldw	r2,-12(fp)
   10940:	18bff836 	bltu	r3,r2,10924 <__alt_data_end+0xff010924>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   10944:	e0bffe17 	ldw	r2,-8(fp)
   10948:	108007cc 	andi	r2,r2,31
   1094c:	10000226 	beq	r2,zero,10958 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   10950:	e0bffc17 	ldw	r2,-16(fp)
   10954:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10958:	0001883a 	nop
   1095c:	e037883a 	mov	sp,fp
   10960:	df000017 	ldw	fp,0(sp)
   10964:	dec00104 	addi	sp,sp,4
   10968:	f800283a 	ret

0001096c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1096c:	defffe04 	addi	sp,sp,-8
   10970:	df000115 	stw	fp,4(sp)
   10974:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10978:	e03fff15 	stw	zero,-4(fp)
   1097c:	00000506 	br	10994 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10980:	e0bfff17 	ldw	r2,-4(fp)
   10984:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	10800804 	addi	r2,r2,32
   10990:	e0bfff15 	stw	r2,-4(fp)
   10994:	e0bfff17 	ldw	r2,-4(fp)
   10998:	10a00030 	cmpltui	r2,r2,32768
   1099c:	103ff81e 	bne	r2,zero,10980 <__alt_data_end+0xff010980>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   109a0:	0001883a 	nop
   109a4:	e037883a 	mov	sp,fp
   109a8:	df000017 	ldw	fp,0(sp)
   109ac:	dec00104 	addi	sp,sp,4
   109b0:	f800283a 	ret

000109b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   109b4:	defffe04 	addi	sp,sp,-8
   109b8:	dfc00115 	stw	ra,4(sp)
   109bc:	df000015 	stw	fp,0(sp)
   109c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   109c4:	d0a00b17 	ldw	r2,-32724(gp)
   109c8:	10000326 	beq	r2,zero,109d8 <alt_get_errno+0x24>
   109cc:	d0a00b17 	ldw	r2,-32724(gp)
   109d0:	103ee83a 	callr	r2
   109d4:	00000106 	br	109dc <alt_get_errno+0x28>
   109d8:	d0a72904 	addi	r2,gp,-25436
}
   109dc:	e037883a 	mov	sp,fp
   109e0:	dfc00117 	ldw	ra,4(sp)
   109e4:	df000017 	ldw	fp,0(sp)
   109e8:	dec00204 	addi	sp,sp,8
   109ec:	f800283a 	ret

000109f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   109f0:	defffa04 	addi	sp,sp,-24
   109f4:	dfc00515 	stw	ra,20(sp)
   109f8:	df000415 	stw	fp,16(sp)
   109fc:	df000404 	addi	fp,sp,16
   10a00:	e13ffe15 	stw	r4,-8(fp)
   10a04:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10a08:	e0bffe17 	ldw	r2,-8(fp)
   10a0c:	10000326 	beq	r2,zero,10a1c <alt_dev_llist_insert+0x2c>
   10a10:	e0bffe17 	ldw	r2,-8(fp)
   10a14:	10800217 	ldw	r2,8(r2)
   10a18:	1000061e 	bne	r2,zero,10a34 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10a1c:	00109b40 	call	109b4 <alt_get_errno>
   10a20:	1007883a 	mov	r3,r2
   10a24:	00800584 	movi	r2,22
   10a28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10a2c:	00bffa84 	movi	r2,-22
   10a30:	00001306 	br	10a80 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10a34:	e0bffe17 	ldw	r2,-8(fp)
   10a38:	e0ffff17 	ldw	r3,-4(fp)
   10a3c:	e0fffc15 	stw	r3,-16(fp)
   10a40:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	e0fffc17 	ldw	r3,-16(fp)
   10a4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10a50:	e0bffc17 	ldw	r2,-16(fp)
   10a54:	10c00017 	ldw	r3,0(r2)
   10a58:	e0bffd17 	ldw	r2,-12(fp)
   10a5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10a60:	e0bffc17 	ldw	r2,-16(fp)
   10a64:	10800017 	ldw	r2,0(r2)
   10a68:	e0fffd17 	ldw	r3,-12(fp)
   10a6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10a70:	e0bffc17 	ldw	r2,-16(fp)
   10a74:	e0fffd17 	ldw	r3,-12(fp)
   10a78:	10c00015 	stw	r3,0(r2)

  return 0;  
   10a7c:	0005883a 	mov	r2,zero
}
   10a80:	e037883a 	mov	sp,fp
   10a84:	dfc00117 	ldw	ra,4(sp)
   10a88:	df000017 	ldw	fp,0(sp)
   10a8c:	dec00204 	addi	sp,sp,8
   10a90:	f800283a 	ret

00010a94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10a94:	defffd04 	addi	sp,sp,-12
   10a98:	dfc00215 	stw	ra,8(sp)
   10a9c:	df000115 	stw	fp,4(sp)
   10aa0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10aa4:	00800074 	movhi	r2,1
   10aa8:	10870b04 	addi	r2,r2,7212
   10aac:	e0bfff15 	stw	r2,-4(fp)
   10ab0:	00000606 	br	10acc <_do_ctors+0x38>
        (*ctor) (); 
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	10800017 	ldw	r2,0(r2)
   10abc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10ac0:	e0bfff17 	ldw	r2,-4(fp)
   10ac4:	10bfff04 	addi	r2,r2,-4
   10ac8:	e0bfff15 	stw	r2,-4(fp)
   10acc:	e0ffff17 	ldw	r3,-4(fp)
   10ad0:	00800074 	movhi	r2,1
   10ad4:	10870c04 	addi	r2,r2,7216
   10ad8:	18bff62e 	bgeu	r3,r2,10ab4 <__alt_data_end+0xff010ab4>
        (*ctor) (); 
}
   10adc:	0001883a 	nop
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	dfc00117 	ldw	ra,4(sp)
   10ae8:	df000017 	ldw	fp,0(sp)
   10aec:	dec00204 	addi	sp,sp,8
   10af0:	f800283a 	ret

00010af4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10af4:	defffd04 	addi	sp,sp,-12
   10af8:	dfc00215 	stw	ra,8(sp)
   10afc:	df000115 	stw	fp,4(sp)
   10b00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10b04:	00800074 	movhi	r2,1
   10b08:	10870b04 	addi	r2,r2,7212
   10b0c:	e0bfff15 	stw	r2,-4(fp)
   10b10:	00000606 	br	10b2c <_do_dtors+0x38>
        (*dtor) (); 
   10b14:	e0bfff17 	ldw	r2,-4(fp)
   10b18:	10800017 	ldw	r2,0(r2)
   10b1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10b20:	e0bfff17 	ldw	r2,-4(fp)
   10b24:	10bfff04 	addi	r2,r2,-4
   10b28:	e0bfff15 	stw	r2,-4(fp)
   10b2c:	e0ffff17 	ldw	r3,-4(fp)
   10b30:	00800074 	movhi	r2,1
   10b34:	10870c04 	addi	r2,r2,7216
   10b38:	18bff62e 	bgeu	r3,r2,10b14 <__alt_data_end+0xff010b14>
        (*dtor) (); 
}
   10b3c:	0001883a 	nop
   10b40:	e037883a 	mov	sp,fp
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret

00010b54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10b54:	defffe04 	addi	sp,sp,-8
   10b58:	dfc00115 	stw	ra,4(sp)
   10b5c:	df000015 	stw	fp,0(sp)
   10b60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10b64:	01440004 	movi	r5,4096
   10b68:	0009883a 	mov	r4,zero
   10b6c:	00115c00 	call	115c0 <alt_icache_flush>
#endif
}
   10b70:	0001883a 	nop
   10b74:	e037883a 	mov	sp,fp
   10b78:	dfc00117 	ldw	ra,4(sp)
   10b7c:	df000017 	ldw	fp,0(sp)
   10b80:	dec00204 	addi	sp,sp,8
   10b84:	f800283a 	ret

00010b88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10b88:	defff904 	addi	sp,sp,-28
   10b8c:	dfc00615 	stw	ra,24(sp)
   10b90:	df000515 	stw	fp,20(sp)
   10b94:	df000504 	addi	fp,sp,20
   10b98:	e13ffc15 	stw	r4,-16(fp)
   10b9c:	e17ffd15 	stw	r5,-12(fp)
   10ba0:	e1bffe15 	stw	r6,-8(fp)
   10ba4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10ba8:	e0800217 	ldw	r2,8(fp)
   10bac:	d8800015 	stw	r2,0(sp)
   10bb0:	e1ffff17 	ldw	r7,-4(fp)
   10bb4:	e1bffe17 	ldw	r6,-8(fp)
   10bb8:	e17ffd17 	ldw	r5,-12(fp)
   10bbc:	e13ffc17 	ldw	r4,-16(fp)
   10bc0:	0010d380 	call	10d38 <alt_iic_isr_register>
}  
   10bc4:	e037883a 	mov	sp,fp
   10bc8:	dfc00117 	ldw	ra,4(sp)
   10bcc:	df000017 	ldw	fp,0(sp)
   10bd0:	dec00204 	addi	sp,sp,8
   10bd4:	f800283a 	ret

00010bd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10bd8:	defff904 	addi	sp,sp,-28
   10bdc:	df000615 	stw	fp,24(sp)
   10be0:	df000604 	addi	fp,sp,24
   10be4:	e13ffe15 	stw	r4,-8(fp)
   10be8:	e17fff15 	stw	r5,-4(fp)
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bf4:	0005303a 	rdctl	r2,status
   10bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bfc:	e0fffb17 	ldw	r3,-20(fp)
   10c00:	00bfff84 	movi	r2,-2
   10c04:	1884703a 	and	r2,r3,r2
   10c08:	1001703a 	wrctl	status,r2
  
  return context;
   10c0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10c14:	00c00044 	movi	r3,1
   10c18:	e0bffa17 	ldw	r2,-24(fp)
   10c1c:	1884983a 	sll	r2,r3,r2
   10c20:	1007883a 	mov	r3,r2
   10c24:	d0a73217 	ldw	r2,-25400(gp)
   10c28:	1884b03a 	or	r2,r3,r2
   10c2c:	d0a73215 	stw	r2,-25400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c30:	d0a73217 	ldw	r2,-25400(gp)
   10c34:	100170fa 	wrctl	ienable,r2
   10c38:	e0bffc17 	ldw	r2,-16(fp)
   10c3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c40:	e0bffd17 	ldw	r2,-12(fp)
   10c44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10c48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10c4c:	0001883a 	nop
}
   10c50:	e037883a 	mov	sp,fp
   10c54:	df000017 	ldw	fp,0(sp)
   10c58:	dec00104 	addi	sp,sp,4
   10c5c:	f800283a 	ret

00010c60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10c60:	defff904 	addi	sp,sp,-28
   10c64:	df000615 	stw	fp,24(sp)
   10c68:	df000604 	addi	fp,sp,24
   10c6c:	e13ffe15 	stw	r4,-8(fp)
   10c70:	e17fff15 	stw	r5,-4(fp)
   10c74:	e0bfff17 	ldw	r2,-4(fp)
   10c78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c7c:	0005303a 	rdctl	r2,status
   10c80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c84:	e0fffb17 	ldw	r3,-20(fp)
   10c88:	00bfff84 	movi	r2,-2
   10c8c:	1884703a 	and	r2,r3,r2
   10c90:	1001703a 	wrctl	status,r2
  
  return context;
   10c94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10c9c:	00c00044 	movi	r3,1
   10ca0:	e0bffa17 	ldw	r2,-24(fp)
   10ca4:	1884983a 	sll	r2,r3,r2
   10ca8:	0084303a 	nor	r2,zero,r2
   10cac:	1007883a 	mov	r3,r2
   10cb0:	d0a73217 	ldw	r2,-25400(gp)
   10cb4:	1884703a 	and	r2,r3,r2
   10cb8:	d0a73215 	stw	r2,-25400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10cbc:	d0a73217 	ldw	r2,-25400(gp)
   10cc0:	100170fa 	wrctl	ienable,r2
   10cc4:	e0bffc17 	ldw	r2,-16(fp)
   10cc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10cd4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10cd8:	0001883a 	nop
}
   10cdc:	e037883a 	mov	sp,fp
   10ce0:	df000017 	ldw	fp,0(sp)
   10ce4:	dec00104 	addi	sp,sp,4
   10ce8:	f800283a 	ret

00010cec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10cec:	defffc04 	addi	sp,sp,-16
   10cf0:	df000315 	stw	fp,12(sp)
   10cf4:	df000304 	addi	fp,sp,12
   10cf8:	e13ffe15 	stw	r4,-8(fp)
   10cfc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10d00:	000530fa 	rdctl	r2,ienable
   10d04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10d08:	00c00044 	movi	r3,1
   10d0c:	e0bfff17 	ldw	r2,-4(fp)
   10d10:	1884983a 	sll	r2,r3,r2
   10d14:	1007883a 	mov	r3,r2
   10d18:	e0bffd17 	ldw	r2,-12(fp)
   10d1c:	1884703a 	and	r2,r3,r2
   10d20:	1004c03a 	cmpne	r2,r2,zero
   10d24:	10803fcc 	andi	r2,r2,255
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10d38:	defff504 	addi	sp,sp,-44
   10d3c:	dfc00a15 	stw	ra,40(sp)
   10d40:	df000915 	stw	fp,36(sp)
   10d44:	df000904 	addi	fp,sp,36
   10d48:	e13ffc15 	stw	r4,-16(fp)
   10d4c:	e17ffd15 	stw	r5,-12(fp)
   10d50:	e1bffe15 	stw	r6,-8(fp)
   10d54:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10d58:	00bffa84 	movi	r2,-22
   10d5c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10d60:	e0bffd17 	ldw	r2,-12(fp)
   10d64:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10d68:	e0bff817 	ldw	r2,-32(fp)
   10d6c:	10800808 	cmpgei	r2,r2,32
   10d70:	1000271e 	bne	r2,zero,10e10 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d74:	0005303a 	rdctl	r2,status
   10d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d7c:	e0fffb17 	ldw	r3,-20(fp)
   10d80:	00bfff84 	movi	r2,-2
   10d84:	1884703a 	and	r2,r3,r2
   10d88:	1001703a 	wrctl	status,r2
  
  return context;
   10d8c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10d90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10d94:	00800074 	movhi	r2,1
   10d98:	10972604 	addi	r2,r2,23704
   10d9c:	e0fff817 	ldw	r3,-32(fp)
   10da0:	180690fa 	slli	r3,r3,3
   10da4:	10c5883a 	add	r2,r2,r3
   10da8:	e0fffe17 	ldw	r3,-8(fp)
   10dac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10db0:	00800074 	movhi	r2,1
   10db4:	10972604 	addi	r2,r2,23704
   10db8:	e0fff817 	ldw	r3,-32(fp)
   10dbc:	180690fa 	slli	r3,r3,3
   10dc0:	10c5883a 	add	r2,r2,r3
   10dc4:	10800104 	addi	r2,r2,4
   10dc8:	e0ffff17 	ldw	r3,-4(fp)
   10dcc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10dd0:	e0bffe17 	ldw	r2,-8(fp)
   10dd4:	10000526 	beq	r2,zero,10dec <alt_iic_isr_register+0xb4>
   10dd8:	e0bff817 	ldw	r2,-32(fp)
   10ddc:	100b883a 	mov	r5,r2
   10de0:	e13ffc17 	ldw	r4,-16(fp)
   10de4:	0010bd80 	call	10bd8 <alt_ic_irq_enable>
   10de8:	00000406 	br	10dfc <alt_iic_isr_register+0xc4>
   10dec:	e0bff817 	ldw	r2,-32(fp)
   10df0:	100b883a 	mov	r5,r2
   10df4:	e13ffc17 	ldw	r4,-16(fp)
   10df8:	0010c600 	call	10c60 <alt_ic_irq_disable>
   10dfc:	e0bff715 	stw	r2,-36(fp)
   10e00:	e0bffa17 	ldw	r2,-24(fp)
   10e04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e08:	e0bff917 	ldw	r2,-28(fp)
   10e0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10e10:	e0bff717 	ldw	r2,-36(fp)
}
   10e14:	e037883a 	mov	sp,fp
   10e18:	dfc00117 	ldw	ra,4(sp)
   10e1c:	df000017 	ldw	fp,0(sp)
   10e20:	dec00204 	addi	sp,sp,8
   10e24:	f800283a 	ret

00010e28 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10e28:	defff904 	addi	sp,sp,-28
   10e2c:	dfc00615 	stw	ra,24(sp)
   10e30:	df000515 	stw	fp,20(sp)
   10e34:	df000504 	addi	fp,sp,20
   10e38:	e13ffc15 	stw	r4,-16(fp)
   10e3c:	e17ffd15 	stw	r5,-12(fp)
   10e40:	e1bffe15 	stw	r6,-8(fp)
   10e44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10e48:	e1bfff17 	ldw	r6,-4(fp)
   10e4c:	e17ffe17 	ldw	r5,-8(fp)
   10e50:	e13ffd17 	ldw	r4,-12(fp)
   10e54:	00110680 	call	11068 <open>
   10e58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10e5c:	e0bffb17 	ldw	r2,-20(fp)
   10e60:	10001c16 	blt	r2,zero,10ed4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10e64:	00800074 	movhi	r2,1
   10e68:	108b6e04 	addi	r2,r2,11704
   10e6c:	e0fffb17 	ldw	r3,-20(fp)
   10e70:	18c00324 	muli	r3,r3,12
   10e74:	10c5883a 	add	r2,r2,r3
   10e78:	10c00017 	ldw	r3,0(r2)
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e84:	00800074 	movhi	r2,1
   10e88:	108b6e04 	addi	r2,r2,11704
   10e8c:	e0fffb17 	ldw	r3,-20(fp)
   10e90:	18c00324 	muli	r3,r3,12
   10e94:	10c5883a 	add	r2,r2,r3
   10e98:	10800104 	addi	r2,r2,4
   10e9c:	10c00017 	ldw	r3,0(r2)
   10ea0:	e0bffc17 	ldw	r2,-16(fp)
   10ea4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10ea8:	00800074 	movhi	r2,1
   10eac:	108b6e04 	addi	r2,r2,11704
   10eb0:	e0fffb17 	ldw	r3,-20(fp)
   10eb4:	18c00324 	muli	r3,r3,12
   10eb8:	10c5883a 	add	r2,r2,r3
   10ebc:	10800204 	addi	r2,r2,8
   10ec0:	10c00017 	ldw	r3,0(r2)
   10ec4:	e0bffc17 	ldw	r2,-16(fp)
   10ec8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10ecc:	e13ffb17 	ldw	r4,-20(fp)
   10ed0:	000f6240 	call	f624 <alt_release_fd>
  }
} 
   10ed4:	0001883a 	nop
   10ed8:	e037883a 	mov	sp,fp
   10edc:	dfc00117 	ldw	ra,4(sp)
   10ee0:	df000017 	ldw	fp,0(sp)
   10ee4:	dec00204 	addi	sp,sp,8
   10ee8:	f800283a 	ret

00010eec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10eec:	defffb04 	addi	sp,sp,-20
   10ef0:	dfc00415 	stw	ra,16(sp)
   10ef4:	df000315 	stw	fp,12(sp)
   10ef8:	df000304 	addi	fp,sp,12
   10efc:	e13ffd15 	stw	r4,-12(fp)
   10f00:	e17ffe15 	stw	r5,-8(fp)
   10f04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10f08:	01c07fc4 	movi	r7,511
   10f0c:	01800044 	movi	r6,1
   10f10:	e17ffd17 	ldw	r5,-12(fp)
   10f14:	01000074 	movhi	r4,1
   10f18:	210b7104 	addi	r4,r4,11716
   10f1c:	0010e280 	call	10e28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10f20:	01c07fc4 	movi	r7,511
   10f24:	000d883a 	mov	r6,zero
   10f28:	e17ffe17 	ldw	r5,-8(fp)
   10f2c:	01000074 	movhi	r4,1
   10f30:	210b6e04 	addi	r4,r4,11704
   10f34:	0010e280 	call	10e28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10f38:	01c07fc4 	movi	r7,511
   10f3c:	01800044 	movi	r6,1
   10f40:	e17fff17 	ldw	r5,-4(fp)
   10f44:	01000074 	movhi	r4,1
   10f48:	210b7404 	addi	r4,r4,11728
   10f4c:	0010e280 	call	10e28 <alt_open_fd>
}  
   10f50:	0001883a 	nop
   10f54:	e037883a 	mov	sp,fp
   10f58:	dfc00117 	ldw	ra,4(sp)
   10f5c:	df000017 	ldw	fp,0(sp)
   10f60:	dec00204 	addi	sp,sp,8
   10f64:	f800283a 	ret

00010f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f68:	defffe04 	addi	sp,sp,-8
   10f6c:	dfc00115 	stw	ra,4(sp)
   10f70:	df000015 	stw	fp,0(sp)
   10f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f78:	d0a00b17 	ldw	r2,-32724(gp)
   10f7c:	10000326 	beq	r2,zero,10f8c <alt_get_errno+0x24>
   10f80:	d0a00b17 	ldw	r2,-32724(gp)
   10f84:	103ee83a 	callr	r2
   10f88:	00000106 	br	10f90 <alt_get_errno+0x28>
   10f8c:	d0a72904 	addi	r2,gp,-25436
}
   10f90:	e037883a 	mov	sp,fp
   10f94:	dfc00117 	ldw	ra,4(sp)
   10f98:	df000017 	ldw	fp,0(sp)
   10f9c:	dec00204 	addi	sp,sp,8
   10fa0:	f800283a 	ret

00010fa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10fa4:	defffd04 	addi	sp,sp,-12
   10fa8:	df000215 	stw	fp,8(sp)
   10fac:	df000204 	addi	fp,sp,8
   10fb0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10fb4:	e0bfff17 	ldw	r2,-4(fp)
   10fb8:	10800217 	ldw	r2,8(r2)
   10fbc:	10d00034 	orhi	r3,r2,16384
   10fc0:	e0bfff17 	ldw	r2,-4(fp)
   10fc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10fc8:	e03ffe15 	stw	zero,-8(fp)
   10fcc:	00001d06 	br	11044 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10fd0:	00800074 	movhi	r2,1
   10fd4:	108b6e04 	addi	r2,r2,11704
   10fd8:	e0fffe17 	ldw	r3,-8(fp)
   10fdc:	18c00324 	muli	r3,r3,12
   10fe0:	10c5883a 	add	r2,r2,r3
   10fe4:	10c00017 	ldw	r3,0(r2)
   10fe8:	e0bfff17 	ldw	r2,-4(fp)
   10fec:	10800017 	ldw	r2,0(r2)
   10ff0:	1880111e 	bne	r3,r2,11038 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10ff4:	00800074 	movhi	r2,1
   10ff8:	108b6e04 	addi	r2,r2,11704
   10ffc:	e0fffe17 	ldw	r3,-8(fp)
   11000:	18c00324 	muli	r3,r3,12
   11004:	10c5883a 	add	r2,r2,r3
   11008:	10800204 	addi	r2,r2,8
   1100c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11010:	1000090e 	bge	r2,zero,11038 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11014:	e0bffe17 	ldw	r2,-8(fp)
   11018:	10c00324 	muli	r3,r2,12
   1101c:	00800074 	movhi	r2,1
   11020:	108b6e04 	addi	r2,r2,11704
   11024:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11028:	e0bfff17 	ldw	r2,-4(fp)
   1102c:	18800226 	beq	r3,r2,11038 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11030:	00bffcc4 	movi	r2,-13
   11034:	00000806 	br	11058 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	10800044 	addi	r2,r2,1
   11040:	e0bffe15 	stw	r2,-8(fp)
   11044:	d0a00a17 	ldw	r2,-32728(gp)
   11048:	1007883a 	mov	r3,r2
   1104c:	e0bffe17 	ldw	r2,-8(fp)
   11050:	18bfdf2e 	bgeu	r3,r2,10fd0 <__alt_data_end+0xff010fd0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11054:	0005883a 	mov	r2,zero
}
   11058:	e037883a 	mov	sp,fp
   1105c:	df000017 	ldw	fp,0(sp)
   11060:	dec00104 	addi	sp,sp,4
   11064:	f800283a 	ret

00011068 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11068:	defff604 	addi	sp,sp,-40
   1106c:	dfc00915 	stw	ra,36(sp)
   11070:	df000815 	stw	fp,32(sp)
   11074:	df000804 	addi	fp,sp,32
   11078:	e13ffd15 	stw	r4,-12(fp)
   1107c:	e17ffe15 	stw	r5,-8(fp)
   11080:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11084:	00bfffc4 	movi	r2,-1
   11088:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1108c:	00bffb44 	movi	r2,-19
   11090:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11094:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11098:	d1600804 	addi	r5,gp,-32736
   1109c:	e13ffd17 	ldw	r4,-12(fp)
   110a0:	00113840 	call	11384 <alt_find_dev>
   110a4:	e0bff815 	stw	r2,-32(fp)
   110a8:	e0bff817 	ldw	r2,-32(fp)
   110ac:	1000051e 	bne	r2,zero,110c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   110b0:	e13ffd17 	ldw	r4,-12(fp)
   110b4:	00114140 	call	11414 <alt_find_file>
   110b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   110bc:	00800044 	movi	r2,1
   110c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   110c4:	e0bff817 	ldw	r2,-32(fp)
   110c8:	10002926 	beq	r2,zero,11170 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   110cc:	e13ff817 	ldw	r4,-32(fp)
   110d0:	001151c0 	call	1151c <alt_get_fd>
   110d4:	e0bff915 	stw	r2,-28(fp)
   110d8:	e0bff917 	ldw	r2,-28(fp)
   110dc:	1000030e 	bge	r2,zero,110ec <open+0x84>
    {
      status = index;
   110e0:	e0bff917 	ldw	r2,-28(fp)
   110e4:	e0bffa15 	stw	r2,-24(fp)
   110e8:	00002306 	br	11178 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   110ec:	e0bff917 	ldw	r2,-28(fp)
   110f0:	10c00324 	muli	r3,r2,12
   110f4:	00800074 	movhi	r2,1
   110f8:	108b6e04 	addi	r2,r2,11704
   110fc:	1885883a 	add	r2,r3,r2
   11100:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11104:	e0fffe17 	ldw	r3,-8(fp)
   11108:	00900034 	movhi	r2,16384
   1110c:	10bfffc4 	addi	r2,r2,-1
   11110:	1886703a 	and	r3,r3,r2
   11114:	e0bffc17 	ldw	r2,-16(fp)
   11118:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1111c:	e0bffb17 	ldw	r2,-20(fp)
   11120:	1000051e 	bne	r2,zero,11138 <open+0xd0>
   11124:	e13ffc17 	ldw	r4,-16(fp)
   11128:	0010fa40 	call	10fa4 <alt_file_locked>
   1112c:	e0bffa15 	stw	r2,-24(fp)
   11130:	e0bffa17 	ldw	r2,-24(fp)
   11134:	10001016 	blt	r2,zero,11178 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11138:	e0bff817 	ldw	r2,-32(fp)
   1113c:	10800317 	ldw	r2,12(r2)
   11140:	10000826 	beq	r2,zero,11164 <open+0xfc>
   11144:	e0bff817 	ldw	r2,-32(fp)
   11148:	10800317 	ldw	r2,12(r2)
   1114c:	e1ffff17 	ldw	r7,-4(fp)
   11150:	e1bffe17 	ldw	r6,-8(fp)
   11154:	e17ffd17 	ldw	r5,-12(fp)
   11158:	e13ffc17 	ldw	r4,-16(fp)
   1115c:	103ee83a 	callr	r2
   11160:	00000106 	br	11168 <open+0x100>
   11164:	0005883a 	mov	r2,zero
   11168:	e0bffa15 	stw	r2,-24(fp)
   1116c:	00000206 	br	11178 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11170:	00bffb44 	movi	r2,-19
   11174:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11178:	e0bffa17 	ldw	r2,-24(fp)
   1117c:	1000090e 	bge	r2,zero,111a4 <open+0x13c>
  {
    alt_release_fd (index);  
   11180:	e13ff917 	ldw	r4,-28(fp)
   11184:	000f6240 	call	f624 <alt_release_fd>
    ALT_ERRNO = -status;
   11188:	0010f680 	call	10f68 <alt_get_errno>
   1118c:	1007883a 	mov	r3,r2
   11190:	e0bffa17 	ldw	r2,-24(fp)
   11194:	0085c83a 	sub	r2,zero,r2
   11198:	18800015 	stw	r2,0(r3)
    return -1;
   1119c:	00bfffc4 	movi	r2,-1
   111a0:	00000106 	br	111a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   111a4:	e0bff917 	ldw	r2,-28(fp)
}
   111a8:	e037883a 	mov	sp,fp
   111ac:	dfc00117 	ldw	ra,4(sp)
   111b0:	df000017 	ldw	fp,0(sp)
   111b4:	dec00204 	addi	sp,sp,8
   111b8:	f800283a 	ret

000111bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   111bc:	defffa04 	addi	sp,sp,-24
   111c0:	df000515 	stw	fp,20(sp)
   111c4:	df000504 	addi	fp,sp,20
   111c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111cc:	0005303a 	rdctl	r2,status
   111d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111d4:	e0fffc17 	ldw	r3,-16(fp)
   111d8:	00bfff84 	movi	r2,-2
   111dc:	1884703a 	and	r2,r3,r2
   111e0:	1001703a 	wrctl	status,r2
  
  return context;
   111e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   111e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   111ec:	e0bfff17 	ldw	r2,-4(fp)
   111f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	10800017 	ldw	r2,0(r2)
   111fc:	e0fffd17 	ldw	r3,-12(fp)
   11200:	18c00117 	ldw	r3,4(r3)
   11204:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11208:	e0bffd17 	ldw	r2,-12(fp)
   1120c:	10800117 	ldw	r2,4(r2)
   11210:	e0fffd17 	ldw	r3,-12(fp)
   11214:	18c00017 	ldw	r3,0(r3)
   11218:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1121c:	e0bffd17 	ldw	r2,-12(fp)
   11220:	e0fffd17 	ldw	r3,-12(fp)
   11224:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11228:	e0bffd17 	ldw	r2,-12(fp)
   1122c:	e0fffd17 	ldw	r3,-12(fp)
   11230:	10c00015 	stw	r3,0(r2)
   11234:	e0bffb17 	ldw	r2,-20(fp)
   11238:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1123c:	e0bffe17 	ldw	r2,-8(fp)
   11240:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11244:	0001883a 	nop
   11248:	e037883a 	mov	sp,fp
   1124c:	df000017 	ldw	fp,0(sp)
   11250:	dec00104 	addi	sp,sp,4
   11254:	f800283a 	ret

00011258 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11258:	defffb04 	addi	sp,sp,-20
   1125c:	dfc00415 	stw	ra,16(sp)
   11260:	df000315 	stw	fp,12(sp)
   11264:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11268:	d0a00e17 	ldw	r2,-32712(gp)
   1126c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11270:	d0a73417 	ldw	r2,-25392(gp)
   11274:	10800044 	addi	r2,r2,1
   11278:	d0a73415 	stw	r2,-25392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1127c:	00002e06 	br	11338 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11280:	e0bffd17 	ldw	r2,-12(fp)
   11284:	10800017 	ldw	r2,0(r2)
   11288:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1128c:	e0bffd17 	ldw	r2,-12(fp)
   11290:	10800403 	ldbu	r2,16(r2)
   11294:	10803fcc 	andi	r2,r2,255
   11298:	10000426 	beq	r2,zero,112ac <alt_tick+0x54>
   1129c:	d0a73417 	ldw	r2,-25392(gp)
   112a0:	1000021e 	bne	r2,zero,112ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   112a4:	e0bffd17 	ldw	r2,-12(fp)
   112a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   112ac:	e0bffd17 	ldw	r2,-12(fp)
   112b0:	10800217 	ldw	r2,8(r2)
   112b4:	d0e73417 	ldw	r3,-25392(gp)
   112b8:	18801d36 	bltu	r3,r2,11330 <alt_tick+0xd8>
   112bc:	e0bffd17 	ldw	r2,-12(fp)
   112c0:	10800403 	ldbu	r2,16(r2)
   112c4:	10803fcc 	andi	r2,r2,255
   112c8:	1000191e 	bne	r2,zero,11330 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	10800317 	ldw	r2,12(r2)
   112d4:	e0fffd17 	ldw	r3,-12(fp)
   112d8:	18c00517 	ldw	r3,20(r3)
   112dc:	1809883a 	mov	r4,r3
   112e0:	103ee83a 	callr	r2
   112e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   112e8:	e0bfff17 	ldw	r2,-4(fp)
   112ec:	1000031e 	bne	r2,zero,112fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   112f0:	e13ffd17 	ldw	r4,-12(fp)
   112f4:	00111bc0 	call	111bc <alt_alarm_stop>
   112f8:	00000d06 	br	11330 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	10c00217 	ldw	r3,8(r2)
   11304:	e0bfff17 	ldw	r2,-4(fp)
   11308:	1887883a 	add	r3,r3,r2
   1130c:	e0bffd17 	ldw	r2,-12(fp)
   11310:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11314:	e0bffd17 	ldw	r2,-12(fp)
   11318:	10c00217 	ldw	r3,8(r2)
   1131c:	d0a73417 	ldw	r2,-25392(gp)
   11320:	1880032e 	bgeu	r3,r2,11330 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11324:	e0bffd17 	ldw	r2,-12(fp)
   11328:	00c00044 	movi	r3,1
   1132c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11330:	e0bffe17 	ldw	r2,-8(fp)
   11334:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11338:	e0fffd17 	ldw	r3,-12(fp)
   1133c:	d0a00e04 	addi	r2,gp,-32712
   11340:	18bfcf1e 	bne	r3,r2,11280 <__alt_data_end+0xff011280>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11344:	0001883a 	nop
}
   11348:	0001883a 	nop
   1134c:	e037883a 	mov	sp,fp
   11350:	dfc00117 	ldw	ra,4(sp)
   11354:	df000017 	ldw	fp,0(sp)
   11358:	dec00204 	addi	sp,sp,8
   1135c:	f800283a 	ret

00011360 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11360:	deffff04 	addi	sp,sp,-4
   11364:	df000015 	stw	fp,0(sp)
   11368:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1136c:	000170fa 	wrctl	ienable,zero
}
   11370:	0001883a 	nop
   11374:	e037883a 	mov	sp,fp
   11378:	df000017 	ldw	fp,0(sp)
   1137c:	dec00104 	addi	sp,sp,4
   11380:	f800283a 	ret

00011384 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11384:	defffa04 	addi	sp,sp,-24
   11388:	dfc00515 	stw	ra,20(sp)
   1138c:	df000415 	stw	fp,16(sp)
   11390:	df000404 	addi	fp,sp,16
   11394:	e13ffe15 	stw	r4,-8(fp)
   11398:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1139c:	e0bfff17 	ldw	r2,-4(fp)
   113a0:	10800017 	ldw	r2,0(r2)
   113a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   113a8:	e13ffe17 	ldw	r4,-8(fp)
   113ac:	0003b500 	call	3b50 <strlen>
   113b0:	10800044 	addi	r2,r2,1
   113b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   113b8:	00000d06 	br	113f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   113bc:	e0bffc17 	ldw	r2,-16(fp)
   113c0:	10800217 	ldw	r2,8(r2)
   113c4:	e0fffd17 	ldw	r3,-12(fp)
   113c8:	180d883a 	mov	r6,r3
   113cc:	e17ffe17 	ldw	r5,-8(fp)
   113d0:	1009883a 	mov	r4,r2
   113d4:	00118e80 	call	118e8 <memcmp>
   113d8:	1000021e 	bne	r2,zero,113e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   113dc:	e0bffc17 	ldw	r2,-16(fp)
   113e0:	00000706 	br	11400 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   113e4:	e0bffc17 	ldw	r2,-16(fp)
   113e8:	10800017 	ldw	r2,0(r2)
   113ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   113f0:	e0fffc17 	ldw	r3,-16(fp)
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	18bff01e 	bne	r3,r2,113bc <__alt_data_end+0xff0113bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   113fc:	0005883a 	mov	r2,zero
}
   11400:	e037883a 	mov	sp,fp
   11404:	dfc00117 	ldw	ra,4(sp)
   11408:	df000017 	ldw	fp,0(sp)
   1140c:	dec00204 	addi	sp,sp,8
   11410:	f800283a 	ret

00011414 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11414:	defffb04 	addi	sp,sp,-20
   11418:	dfc00415 	stw	ra,16(sp)
   1141c:	df000315 	stw	fp,12(sp)
   11420:	df000304 	addi	fp,sp,12
   11424:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11428:	d0a00617 	ldw	r2,-32744(gp)
   1142c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11430:	00003106 	br	114f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11434:	e0bffd17 	ldw	r2,-12(fp)
   11438:	10800217 	ldw	r2,8(r2)
   1143c:	1009883a 	mov	r4,r2
   11440:	0003b500 	call	3b50 <strlen>
   11444:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	10c00217 	ldw	r3,8(r2)
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	10bfffc4 	addi	r2,r2,-1
   11458:	1885883a 	add	r2,r3,r2
   1145c:	10800003 	ldbu	r2,0(r2)
   11460:	10803fcc 	andi	r2,r2,255
   11464:	1080201c 	xori	r2,r2,128
   11468:	10bfe004 	addi	r2,r2,-128
   1146c:	10800bd8 	cmpnei	r2,r2,47
   11470:	1000031e 	bne	r2,zero,11480 <alt_find_file+0x6c>
    {
      len -= 1;
   11474:	e0bffe17 	ldw	r2,-8(fp)
   11478:	10bfffc4 	addi	r2,r2,-1
   1147c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11480:	e0bffe17 	ldw	r2,-8(fp)
   11484:	e0ffff17 	ldw	r3,-4(fp)
   11488:	1885883a 	add	r2,r3,r2
   1148c:	10800003 	ldbu	r2,0(r2)
   11490:	10803fcc 	andi	r2,r2,255
   11494:	1080201c 	xori	r2,r2,128
   11498:	10bfe004 	addi	r2,r2,-128
   1149c:	10800be0 	cmpeqi	r2,r2,47
   114a0:	1000081e 	bne	r2,zero,114c4 <alt_find_file+0xb0>
   114a4:	e0bffe17 	ldw	r2,-8(fp)
   114a8:	e0ffff17 	ldw	r3,-4(fp)
   114ac:	1885883a 	add	r2,r3,r2
   114b0:	10800003 	ldbu	r2,0(r2)
   114b4:	10803fcc 	andi	r2,r2,255
   114b8:	1080201c 	xori	r2,r2,128
   114bc:	10bfe004 	addi	r2,r2,-128
   114c0:	10000a1e 	bne	r2,zero,114ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	10800217 	ldw	r2,8(r2)
   114cc:	e0fffe17 	ldw	r3,-8(fp)
   114d0:	180d883a 	mov	r6,r3
   114d4:	e17fff17 	ldw	r5,-4(fp)
   114d8:	1009883a 	mov	r4,r2
   114dc:	00118e80 	call	118e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   114e0:	1000021e 	bne	r2,zero,114ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   114e4:	e0bffd17 	ldw	r2,-12(fp)
   114e8:	00000706 	br	11508 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   114ec:	e0bffd17 	ldw	r2,-12(fp)
   114f0:	10800017 	ldw	r2,0(r2)
   114f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   114f8:	e0fffd17 	ldw	r3,-12(fp)
   114fc:	d0a00604 	addi	r2,gp,-32744
   11500:	18bfcc1e 	bne	r3,r2,11434 <__alt_data_end+0xff011434>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11504:	0005883a 	mov	r2,zero
}
   11508:	e037883a 	mov	sp,fp
   1150c:	dfc00117 	ldw	ra,4(sp)
   11510:	df000017 	ldw	fp,0(sp)
   11514:	dec00204 	addi	sp,sp,8
   11518:	f800283a 	ret

0001151c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1151c:	defffc04 	addi	sp,sp,-16
   11520:	df000315 	stw	fp,12(sp)
   11524:	df000304 	addi	fp,sp,12
   11528:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1152c:	00bffa04 	movi	r2,-24
   11530:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11534:	e03ffd15 	stw	zero,-12(fp)
   11538:	00001906 	br	115a0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1153c:	00800074 	movhi	r2,1
   11540:	108b6e04 	addi	r2,r2,11704
   11544:	e0fffd17 	ldw	r3,-12(fp)
   11548:	18c00324 	muli	r3,r3,12
   1154c:	10c5883a 	add	r2,r2,r3
   11550:	10800017 	ldw	r2,0(r2)
   11554:	10000f1e 	bne	r2,zero,11594 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11558:	00800074 	movhi	r2,1
   1155c:	108b6e04 	addi	r2,r2,11704
   11560:	e0fffd17 	ldw	r3,-12(fp)
   11564:	18c00324 	muli	r3,r3,12
   11568:	10c5883a 	add	r2,r2,r3
   1156c:	e0ffff17 	ldw	r3,-4(fp)
   11570:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11574:	d0e00a17 	ldw	r3,-32728(gp)
   11578:	e0bffd17 	ldw	r2,-12(fp)
   1157c:	1880020e 	bge	r3,r2,11588 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11580:	e0bffd17 	ldw	r2,-12(fp)
   11584:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11590:	00000606 	br	115ac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	10800044 	addi	r2,r2,1
   1159c:	e0bffd15 	stw	r2,-12(fp)
   115a0:	e0bffd17 	ldw	r2,-12(fp)
   115a4:	10800810 	cmplti	r2,r2,32
   115a8:	103fe41e 	bne	r2,zero,1153c <__alt_data_end+0xff01153c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   115ac:	e0bffe17 	ldw	r2,-8(fp)
}
   115b0:	e037883a 	mov	sp,fp
   115b4:	df000017 	ldw	fp,0(sp)
   115b8:	dec00104 	addi	sp,sp,4
   115bc:	f800283a 	ret

000115c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   115c0:	defffb04 	addi	sp,sp,-20
   115c4:	df000415 	stw	fp,16(sp)
   115c8:	df000404 	addi	fp,sp,16
   115cc:	e13ffe15 	stw	r4,-8(fp)
   115d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   115d4:	e0bfff17 	ldw	r2,-4(fp)
   115d8:	10840070 	cmpltui	r2,r2,4097
   115dc:	1000021e 	bne	r2,zero,115e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   115e0:	00840004 	movi	r2,4096
   115e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   115e8:	e0fffe17 	ldw	r3,-8(fp)
   115ec:	e0bfff17 	ldw	r2,-4(fp)
   115f0:	1885883a 	add	r2,r3,r2
   115f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	e0bffc15 	stw	r2,-16(fp)
   11600:	00000506 	br	11618 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11604:	e0bffc17 	ldw	r2,-16(fp)
   11608:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1160c:	e0bffc17 	ldw	r2,-16(fp)
   11610:	10800804 	addi	r2,r2,32
   11614:	e0bffc15 	stw	r2,-16(fp)
   11618:	e0fffc17 	ldw	r3,-16(fp)
   1161c:	e0bffd17 	ldw	r2,-12(fp)
   11620:	18bff836 	bltu	r3,r2,11604 <__alt_data_end+0xff011604>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11624:	e0bffe17 	ldw	r2,-8(fp)
   11628:	108007cc 	andi	r2,r2,31
   1162c:	10000226 	beq	r2,zero,11638 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11630:	e0bffc17 	ldw	r2,-16(fp)
   11634:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11638:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1163c:	0001883a 	nop
   11640:	e037883a 	mov	sp,fp
   11644:	df000017 	ldw	fp,0(sp)
   11648:	dec00104 	addi	sp,sp,4
   1164c:	f800283a 	ret

00011650 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11650:	defffe04 	addi	sp,sp,-8
   11654:	df000115 	stw	fp,4(sp)
   11658:	df000104 	addi	fp,sp,4
   1165c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11660:	e0bfff17 	ldw	r2,-4(fp)
   11664:	10bffe84 	addi	r2,r2,-6
   11668:	10c00428 	cmpgeui	r3,r2,16
   1166c:	18001a1e 	bne	r3,zero,116d8 <alt_exception_cause_generated_bad_addr+0x88>
   11670:	100690ba 	slli	r3,r2,2
   11674:	00800074 	movhi	r2,1
   11678:	1085a204 	addi	r2,r2,5768
   1167c:	1885883a 	add	r2,r3,r2
   11680:	10800017 	ldw	r2,0(r2)
   11684:	1000683a 	jmp	r2
   11688:	000116c8 	cmpgei	zero,zero,1115
   1168c:	000116c8 	cmpgei	zero,zero,1115
   11690:	000116d8 	cmpnei	zero,zero,1115
   11694:	000116d8 	cmpnei	zero,zero,1115
   11698:	000116d8 	cmpnei	zero,zero,1115
   1169c:	000116c8 	cmpgei	zero,zero,1115
   116a0:	000116d0 	cmplti	zero,zero,1115
   116a4:	000116d8 	cmpnei	zero,zero,1115
   116a8:	000116c8 	cmpgei	zero,zero,1115
   116ac:	000116c8 	cmpgei	zero,zero,1115
   116b0:	000116d8 	cmpnei	zero,zero,1115
   116b4:	000116c8 	cmpgei	zero,zero,1115
   116b8:	000116d0 	cmplti	zero,zero,1115
   116bc:	000116d8 	cmpnei	zero,zero,1115
   116c0:	000116d8 	cmpnei	zero,zero,1115
   116c4:	000116c8 	cmpgei	zero,zero,1115
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   116c8:	00800044 	movi	r2,1
   116cc:	00000306 	br	116dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   116d0:	0005883a 	mov	r2,zero
   116d4:	00000106 	br	116dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   116d8:	0005883a 	mov	r2,zero
  }
}
   116dc:	e037883a 	mov	sp,fp
   116e0:	df000017 	ldw	fp,0(sp)
   116e4:	dec00104 	addi	sp,sp,4
   116e8:	f800283a 	ret

000116ec <atexit>:
   116ec:	200b883a 	mov	r5,r4
   116f0:	000f883a 	mov	r7,zero
   116f4:	000d883a 	mov	r6,zero
   116f8:	0009883a 	mov	r4,zero
   116fc:	00119641 	jmpi	11964 <__register_exitproc>

00011700 <exit>:
   11700:	defffe04 	addi	sp,sp,-8
   11704:	000b883a 	mov	r5,zero
   11708:	dc000015 	stw	r16,0(sp)
   1170c:	dfc00115 	stw	ra,4(sp)
   11710:	2021883a 	mov	r16,r4
   11714:	0011a7c0 	call	11a7c <__call_exitprocs>
   11718:	00800074 	movhi	r2,1
   1171c:	108fe804 	addi	r2,r2,16288
   11720:	11000017 	ldw	r4,0(r2)
   11724:	20800f17 	ldw	r2,60(r4)
   11728:	10000126 	beq	r2,zero,11730 <exit+0x30>
   1172c:	103ee83a 	callr	r2
   11730:	8009883a 	mov	r4,r16
   11734:	0011bfc0 	call	11bfc <_exit>

00011738 <memalign>:
   11738:	00800074 	movhi	r2,1
   1173c:	108fe904 	addi	r2,r2,16292
   11740:	280d883a 	mov	r6,r5
   11744:	200b883a 	mov	r5,r4
   11748:	11000017 	ldw	r4,0(r2)
   1174c:	00117501 	jmpi	11750 <_memalign_r>

00011750 <_memalign_r>:
   11750:	00800204 	movi	r2,8
   11754:	1140532e 	bgeu	r2,r5,118a4 <_memalign_r+0x154>
   11758:	defffa04 	addi	sp,sp,-24
   1175c:	dd000415 	stw	r20,16(sp)
   11760:	dc400115 	stw	r17,4(sp)
   11764:	dfc00515 	stw	ra,20(sp)
   11768:	dcc00315 	stw	r19,12(sp)
   1176c:	dc800215 	stw	r18,8(sp)
   11770:	dc000015 	stw	r16,0(sp)
   11774:	008003c4 	movi	r2,15
   11778:	2823883a 	mov	r17,r5
   1177c:	2029883a 	mov	r20,r4
   11780:	11400136 	bltu	r2,r5,11788 <_memalign_r+0x38>
   11784:	04400404 	movi	r17,16
   11788:	308002c4 	addi	r2,r6,11
   1178c:	00c00584 	movi	r3,22
   11790:	18803e2e 	bgeu	r3,r2,1188c <_memalign_r+0x13c>
   11794:	04bffe04 	movi	r18,-8
   11798:	14a4703a 	and	r18,r2,r18
   1179c:	90003d16 	blt	r18,zero,11894 <_memalign_r+0x144>
   117a0:	91803c36 	bltu	r18,r6,11894 <_memalign_r+0x144>
   117a4:	89400404 	addi	r5,r17,16
   117a8:	2c8b883a 	add	r5,r5,r18
   117ac:	a009883a 	mov	r4,r20
   117b0:	00031b00 	call	31b0 <_malloc_r>
   117b4:	1027883a 	mov	r19,r2
   117b8:	10004926 	beq	r2,zero,118e0 <_memalign_r+0x190>
   117bc:	a009883a 	mov	r4,r20
   117c0:	000f4a40 	call	f4a4 <__malloc_lock>
   117c4:	880b883a 	mov	r5,r17
   117c8:	9809883a 	mov	r4,r19
   117cc:	9c3ffe04 	addi	r16,r19,-8
   117d0:	000273c0 	call	273c <__umodsi3>
   117d4:	10001c26 	beq	r2,zero,11848 <_memalign_r+0xf8>
   117d8:	88bfffc4 	addi	r2,r17,-1
   117dc:	9887883a 	add	r3,r19,r2
   117e0:	0445c83a 	sub	r2,zero,r17
   117e4:	1884703a 	and	r2,r3,r2
   117e8:	10bffe04 	addi	r2,r2,-8
   117ec:	1409c83a 	sub	r4,r2,r16
   117f0:	014003c4 	movi	r5,15
   117f4:	8007883a 	mov	r3,r16
   117f8:	29002c0e 	bge	r5,r4,118ac <_memalign_r+0x15c>
   117fc:	1021883a 	mov	r16,r2
   11800:	993fff17 	ldw	r4,-4(r19)
   11804:	00bfff04 	movi	r2,-4
   11808:	80c7c83a 	sub	r3,r16,r3
   1180c:	2084703a 	and	r2,r4,r2
   11810:	10c5c83a 	sub	r2,r2,r3
   11814:	11000054 	ori	r4,r2,1
   11818:	81000115 	stw	r4,4(r16)
   1181c:	8085883a 	add	r2,r16,r2
   11820:	11800117 	ldw	r6,4(r2)
   11824:	980b883a 	mov	r5,r19
   11828:	a009883a 	mov	r4,r20
   1182c:	31800054 	ori	r6,r6,1
   11830:	11800115 	stw	r6,4(r2)
   11834:	98bfff17 	ldw	r2,-4(r19)
   11838:	1080004c 	andi	r2,r2,1
   1183c:	10c6b03a 	or	r3,r2,r3
   11840:	98ffff15 	stw	r3,-4(r19)
   11844:	00080000 	call	8000 <_free_r>
   11848:	80c00117 	ldw	r3,4(r16)
   1184c:	00bfff04 	movi	r2,-4
   11850:	1884703a 	and	r2,r3,r2
   11854:	1485c83a 	sub	r2,r2,r18
   11858:	00c003c4 	movi	r3,15
   1185c:	18801516 	blt	r3,r2,118b4 <_memalign_r+0x164>
   11860:	a009883a 	mov	r4,r20
   11864:	000f4c80 	call	f4c8 <__malloc_unlock>
   11868:	80800204 	addi	r2,r16,8
   1186c:	dfc00517 	ldw	ra,20(sp)
   11870:	dd000417 	ldw	r20,16(sp)
   11874:	dcc00317 	ldw	r19,12(sp)
   11878:	dc800217 	ldw	r18,8(sp)
   1187c:	dc400117 	ldw	r17,4(sp)
   11880:	dc000017 	ldw	r16,0(sp)
   11884:	dec00604 	addi	sp,sp,24
   11888:	f800283a 	ret
   1188c:	04800404 	movi	r18,16
   11890:	91bfc42e 	bgeu	r18,r6,117a4 <__alt_data_end+0xff0117a4>
   11894:	00800304 	movi	r2,12
   11898:	a0800015 	stw	r2,0(r20)
   1189c:	0005883a 	mov	r2,zero
   118a0:	003ff206 	br	1186c <__alt_data_end+0xff01186c>
   118a4:	300b883a 	mov	r5,r6
   118a8:	00031b01 	jmpi	31b0 <_malloc_r>
   118ac:	1461883a 	add	r16,r2,r17
   118b0:	003fd306 	br	11800 <__alt_data_end+0xff011800>
   118b4:	848b883a 	add	r5,r16,r18
   118b8:	10800054 	ori	r2,r2,1
   118bc:	28800115 	stw	r2,4(r5)
   118c0:	80800117 	ldw	r2,4(r16)
   118c4:	29400204 	addi	r5,r5,8
   118c8:	a009883a 	mov	r4,r20
   118cc:	1080004c 	andi	r2,r2,1
   118d0:	14a4b03a 	or	r18,r2,r18
   118d4:	84800115 	stw	r18,4(r16)
   118d8:	00080000 	call	8000 <_free_r>
   118dc:	003fe006 	br	11860 <__alt_data_end+0xff011860>
   118e0:	0005883a 	mov	r2,zero
   118e4:	003fe106 	br	1186c <__alt_data_end+0xff01186c>

000118e8 <memcmp>:
   118e8:	01c000c4 	movi	r7,3
   118ec:	3980192e 	bgeu	r7,r6,11954 <memcmp+0x6c>
   118f0:	2144b03a 	or	r2,r4,r5
   118f4:	11c4703a 	and	r2,r2,r7
   118f8:	10000f26 	beq	r2,zero,11938 <memcmp+0x50>
   118fc:	20800003 	ldbu	r2,0(r4)
   11900:	28c00003 	ldbu	r3,0(r5)
   11904:	10c0151e 	bne	r2,r3,1195c <memcmp+0x74>
   11908:	31bfff84 	addi	r6,r6,-2
   1190c:	01ffffc4 	movi	r7,-1
   11910:	00000406 	br	11924 <memcmp+0x3c>
   11914:	20800003 	ldbu	r2,0(r4)
   11918:	28c00003 	ldbu	r3,0(r5)
   1191c:	31bfffc4 	addi	r6,r6,-1
   11920:	10c00e1e 	bne	r2,r3,1195c <memcmp+0x74>
   11924:	21000044 	addi	r4,r4,1
   11928:	29400044 	addi	r5,r5,1
   1192c:	31fff91e 	bne	r6,r7,11914 <__alt_data_end+0xff011914>
   11930:	0005883a 	mov	r2,zero
   11934:	f800283a 	ret
   11938:	20c00017 	ldw	r3,0(r4)
   1193c:	28800017 	ldw	r2,0(r5)
   11940:	18bfee1e 	bne	r3,r2,118fc <__alt_data_end+0xff0118fc>
   11944:	31bfff04 	addi	r6,r6,-4
   11948:	21000104 	addi	r4,r4,4
   1194c:	29400104 	addi	r5,r5,4
   11950:	39bff936 	bltu	r7,r6,11938 <__alt_data_end+0xff011938>
   11954:	303fe91e 	bne	r6,zero,118fc <__alt_data_end+0xff0118fc>
   11958:	003ff506 	br	11930 <__alt_data_end+0xff011930>
   1195c:	10c5c83a 	sub	r2,r2,r3
   11960:	f800283a 	ret

00011964 <__register_exitproc>:
   11964:	defffa04 	addi	sp,sp,-24
   11968:	dc000315 	stw	r16,12(sp)
   1196c:	04000074 	movhi	r16,1
   11970:	840fe804 	addi	r16,r16,16288
   11974:	80c00017 	ldw	r3,0(r16)
   11978:	dc400415 	stw	r17,16(sp)
   1197c:	dfc00515 	stw	ra,20(sp)
   11980:	18805217 	ldw	r2,328(r3)
   11984:	2023883a 	mov	r17,r4
   11988:	10003726 	beq	r2,zero,11a68 <__register_exitproc+0x104>
   1198c:	10c00117 	ldw	r3,4(r2)
   11990:	010007c4 	movi	r4,31
   11994:	20c00e16 	blt	r4,r3,119d0 <__register_exitproc+0x6c>
   11998:	1a000044 	addi	r8,r3,1
   1199c:	8800221e 	bne	r17,zero,11a28 <__register_exitproc+0xc4>
   119a0:	18c00084 	addi	r3,r3,2
   119a4:	18c7883a 	add	r3,r3,r3
   119a8:	18c7883a 	add	r3,r3,r3
   119ac:	12000115 	stw	r8,4(r2)
   119b0:	10c7883a 	add	r3,r2,r3
   119b4:	19400015 	stw	r5,0(r3)
   119b8:	0005883a 	mov	r2,zero
   119bc:	dfc00517 	ldw	ra,20(sp)
   119c0:	dc400417 	ldw	r17,16(sp)
   119c4:	dc000317 	ldw	r16,12(sp)
   119c8:	dec00604 	addi	sp,sp,24
   119cc:	f800283a 	ret
   119d0:	00800034 	movhi	r2,0
   119d4:	108c6204 	addi	r2,r2,12680
   119d8:	10002626 	beq	r2,zero,11a74 <__register_exitproc+0x110>
   119dc:	01006404 	movi	r4,400
   119e0:	d9400015 	stw	r5,0(sp)
   119e4:	d9800115 	stw	r6,4(sp)
   119e8:	d9c00215 	stw	r7,8(sp)
   119ec:	00031880 	call	3188 <malloc>
   119f0:	d9400017 	ldw	r5,0(sp)
   119f4:	d9800117 	ldw	r6,4(sp)
   119f8:	d9c00217 	ldw	r7,8(sp)
   119fc:	10001d26 	beq	r2,zero,11a74 <__register_exitproc+0x110>
   11a00:	81000017 	ldw	r4,0(r16)
   11a04:	10000115 	stw	zero,4(r2)
   11a08:	02000044 	movi	r8,1
   11a0c:	22405217 	ldw	r9,328(r4)
   11a10:	0007883a 	mov	r3,zero
   11a14:	12400015 	stw	r9,0(r2)
   11a18:	20805215 	stw	r2,328(r4)
   11a1c:	10006215 	stw	zero,392(r2)
   11a20:	10006315 	stw	zero,396(r2)
   11a24:	883fde26 	beq	r17,zero,119a0 <__alt_data_end+0xff0119a0>
   11a28:	18c9883a 	add	r4,r3,r3
   11a2c:	2109883a 	add	r4,r4,r4
   11a30:	1109883a 	add	r4,r2,r4
   11a34:	21802215 	stw	r6,136(r4)
   11a38:	01800044 	movi	r6,1
   11a3c:	12406217 	ldw	r9,392(r2)
   11a40:	30cc983a 	sll	r6,r6,r3
   11a44:	4992b03a 	or	r9,r9,r6
   11a48:	12406215 	stw	r9,392(r2)
   11a4c:	21c04215 	stw	r7,264(r4)
   11a50:	01000084 	movi	r4,2
   11a54:	893fd21e 	bne	r17,r4,119a0 <__alt_data_end+0xff0119a0>
   11a58:	11006317 	ldw	r4,396(r2)
   11a5c:	218cb03a 	or	r6,r4,r6
   11a60:	11806315 	stw	r6,396(r2)
   11a64:	003fce06 	br	119a0 <__alt_data_end+0xff0119a0>
   11a68:	18805304 	addi	r2,r3,332
   11a6c:	18805215 	stw	r2,328(r3)
   11a70:	003fc606 	br	1198c <__alt_data_end+0xff01198c>
   11a74:	00bfffc4 	movi	r2,-1
   11a78:	003fd006 	br	119bc <__alt_data_end+0xff0119bc>

00011a7c <__call_exitprocs>:
   11a7c:	defff504 	addi	sp,sp,-44
   11a80:	df000915 	stw	fp,36(sp)
   11a84:	dd400615 	stw	r21,24(sp)
   11a88:	dc800315 	stw	r18,12(sp)
   11a8c:	dfc00a15 	stw	ra,40(sp)
   11a90:	ddc00815 	stw	r23,32(sp)
   11a94:	dd800715 	stw	r22,28(sp)
   11a98:	dd000515 	stw	r20,20(sp)
   11a9c:	dcc00415 	stw	r19,16(sp)
   11aa0:	dc400215 	stw	r17,8(sp)
   11aa4:	dc000115 	stw	r16,4(sp)
   11aa8:	d9000015 	stw	r4,0(sp)
   11aac:	2839883a 	mov	fp,r5
   11ab0:	04800044 	movi	r18,1
   11ab4:	057fffc4 	movi	r21,-1
   11ab8:	00800074 	movhi	r2,1
   11abc:	108fe804 	addi	r2,r2,16288
   11ac0:	12000017 	ldw	r8,0(r2)
   11ac4:	45005217 	ldw	r20,328(r8)
   11ac8:	44c05204 	addi	r19,r8,328
   11acc:	a0001c26 	beq	r20,zero,11b40 <__call_exitprocs+0xc4>
   11ad0:	a0800117 	ldw	r2,4(r20)
   11ad4:	15ffffc4 	addi	r23,r2,-1
   11ad8:	b8000d16 	blt	r23,zero,11b10 <__call_exitprocs+0x94>
   11adc:	14000044 	addi	r16,r2,1
   11ae0:	8421883a 	add	r16,r16,r16
   11ae4:	8421883a 	add	r16,r16,r16
   11ae8:	84402004 	addi	r17,r16,128
   11aec:	a463883a 	add	r17,r20,r17
   11af0:	a421883a 	add	r16,r20,r16
   11af4:	e0001e26 	beq	fp,zero,11b70 <__call_exitprocs+0xf4>
   11af8:	80804017 	ldw	r2,256(r16)
   11afc:	e0801c26 	beq	fp,r2,11b70 <__call_exitprocs+0xf4>
   11b00:	bdffffc4 	addi	r23,r23,-1
   11b04:	843fff04 	addi	r16,r16,-4
   11b08:	8c7fff04 	addi	r17,r17,-4
   11b0c:	bd7ff91e 	bne	r23,r21,11af4 <__alt_data_end+0xff011af4>
   11b10:	00800034 	movhi	r2,0
   11b14:	108c6704 	addi	r2,r2,12700
   11b18:	10000926 	beq	r2,zero,11b40 <__call_exitprocs+0xc4>
   11b1c:	a0800117 	ldw	r2,4(r20)
   11b20:	1000301e 	bne	r2,zero,11be4 <__call_exitprocs+0x168>
   11b24:	a0800017 	ldw	r2,0(r20)
   11b28:	10003226 	beq	r2,zero,11bf4 <__call_exitprocs+0x178>
   11b2c:	a009883a 	mov	r4,r20
   11b30:	98800015 	stw	r2,0(r19)
   11b34:	000319c0 	call	319c <free>
   11b38:	9d000017 	ldw	r20,0(r19)
   11b3c:	a03fe41e 	bne	r20,zero,11ad0 <__alt_data_end+0xff011ad0>
   11b40:	dfc00a17 	ldw	ra,40(sp)
   11b44:	df000917 	ldw	fp,36(sp)
   11b48:	ddc00817 	ldw	r23,32(sp)
   11b4c:	dd800717 	ldw	r22,28(sp)
   11b50:	dd400617 	ldw	r21,24(sp)
   11b54:	dd000517 	ldw	r20,20(sp)
   11b58:	dcc00417 	ldw	r19,16(sp)
   11b5c:	dc800317 	ldw	r18,12(sp)
   11b60:	dc400217 	ldw	r17,8(sp)
   11b64:	dc000117 	ldw	r16,4(sp)
   11b68:	dec00b04 	addi	sp,sp,44
   11b6c:	f800283a 	ret
   11b70:	a0800117 	ldw	r2,4(r20)
   11b74:	80c00017 	ldw	r3,0(r16)
   11b78:	10bfffc4 	addi	r2,r2,-1
   11b7c:	15c01426 	beq	r2,r23,11bd0 <__call_exitprocs+0x154>
   11b80:	80000015 	stw	zero,0(r16)
   11b84:	183fde26 	beq	r3,zero,11b00 <__alt_data_end+0xff011b00>
   11b88:	95c8983a 	sll	r4,r18,r23
   11b8c:	a0806217 	ldw	r2,392(r20)
   11b90:	a5800117 	ldw	r22,4(r20)
   11b94:	2084703a 	and	r2,r4,r2
   11b98:	10000b26 	beq	r2,zero,11bc8 <__call_exitprocs+0x14c>
   11b9c:	a0806317 	ldw	r2,396(r20)
   11ba0:	2088703a 	and	r4,r4,r2
   11ba4:	20000c1e 	bne	r4,zero,11bd8 <__call_exitprocs+0x15c>
   11ba8:	89400017 	ldw	r5,0(r17)
   11bac:	d9000017 	ldw	r4,0(sp)
   11bb0:	183ee83a 	callr	r3
   11bb4:	a0800117 	ldw	r2,4(r20)
   11bb8:	15bfbf1e 	bne	r2,r22,11ab8 <__alt_data_end+0xff011ab8>
   11bbc:	98800017 	ldw	r2,0(r19)
   11bc0:	153fcf26 	beq	r2,r20,11b00 <__alt_data_end+0xff011b00>
   11bc4:	003fbc06 	br	11ab8 <__alt_data_end+0xff011ab8>
   11bc8:	183ee83a 	callr	r3
   11bcc:	003ff906 	br	11bb4 <__alt_data_end+0xff011bb4>
   11bd0:	a5c00115 	stw	r23,4(r20)
   11bd4:	003feb06 	br	11b84 <__alt_data_end+0xff011b84>
   11bd8:	89000017 	ldw	r4,0(r17)
   11bdc:	183ee83a 	callr	r3
   11be0:	003ff406 	br	11bb4 <__alt_data_end+0xff011bb4>
   11be4:	a0800017 	ldw	r2,0(r20)
   11be8:	a027883a 	mov	r19,r20
   11bec:	1029883a 	mov	r20,r2
   11bf0:	003fb606 	br	11acc <__alt_data_end+0xff011acc>
   11bf4:	0005883a 	mov	r2,zero
   11bf8:	003ffb06 	br	11be8 <__alt_data_end+0xff011be8>

00011bfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11bfc:	defffd04 	addi	sp,sp,-12
   11c00:	df000215 	stw	fp,8(sp)
   11c04:	df000204 	addi	fp,sp,8
   11c08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11c0c:	0001883a 	nop
   11c10:	e0bfff17 	ldw	r2,-4(fp)
   11c14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11c18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11c1c:	10000226 	beq	r2,zero,11c28 <_exit+0x2c>
    ALT_SIM_FAIL();
   11c20:	002af070 	cmpltui	zero,zero,43969
   11c24:	00000106 	br	11c2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11c28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11c2c:	003fff06 	br	11c2c <__alt_data_end+0xff011c2c>
