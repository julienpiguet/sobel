
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011d9c memsz 0x00011d9c flags r-x
    LOAD off    0x00012dbc vaddr 0x00011dbc paddr 0x000139a8 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00015594 vaddr 0x00015594 paddr 0x00015594 align 2**12
         filesz 0x00000000 memsz 0x000001bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000113bc  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  00011600  00011600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00011dbc  000139a8  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001bc  00015594  00015594  00015594  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015750  00015750  000149a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000149a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001070  00000000  00000000  000149d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026d2a  00000000  00000000  00015a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009de5  00000000  00000000  0003c76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c734  00000000  00000000  0004654f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002730  00000000  00000000  00052c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ea4  00000000  00000000  000553b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000193ac  00000000  00000000  00059258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00072604  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001968  00000000  00000000  00072668  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077c36  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00077c39  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00077c45  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00077c46  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00077c47  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00077c4b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00077c4f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00077c53  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00077c5c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00077c65  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00077c6e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00077c79  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00077cb1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007752e  00000000  00000000  0007d789  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011600 l    d  .rodata	00000000 .rodata
00011dbc l    d  .rwdata	00000000 .rwdata
00015594 l    d  .bss	00000000 .bss
00015750 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/projects/intelFPGA/intelFPGA_mse_demo/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_all.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011c0a l     O .rodata	00000010 zeroes.4404
00005a6c l     F .text	000000bc __sbprintf
00011c1a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005c7c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000077ac l     F .text	00000008 __fp_unlock
000077c0 l     F .text	0000019c __sinit.part.1
0000795c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000122c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012708 l     O .rwdata	00000020 lc_ctype_charset
000126e8 l     O .rwdata	00000020 lc_message_charset
00012728 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011c4c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a4f8 l     F .text	000000fc __sprint_r.part.0
00011d80 l     O .rodata	00000010 blanks.4348
00011d70 l     O .rodata	00000010 zeroes.4349
0000ba84 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000eb98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000eca4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ecd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000edbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ee9c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ef88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f15c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013998 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f3d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f50c l     F .text	00000034 alt_dev_reg
00012908 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f818 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fa24 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001005c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000109a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010ae8 l     F .text	0000003c alt_get_errno
00010b24 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015624 g     O .bss	00000004 alt_instruction_exception_handler
00009b90 g     F .text	00000074 _mprec_log10
00009c7c g     F .text	0000008c __any_on
0000c020 g     F .text	00000054 _isatty_r
00011c58 g     O .rodata	00000028 __mprec_tinytens
0000f098 g     F .text	0000007c alt_main
00003698 g     F .text	000000c0 _puts_r
00015650 g     O .bss	00000100 alt_irq
0000c074 g     F .text	00000060 _lseek_r
00011a94 g     O .rodata	00000009 gy_array
000139a8 g       *ABS*	00000000 __flash_rwdata_start
0000d7d0 g     F .text	00000088 .hidden __eqdf2
00015750 g       *ABS*	00000000 __alt_heap_start
0000365c g     F .text	0000003c printf
0000c28c g     F .text	0000009c _wcrtomb_r
0000a3b8 g     F .text	0000005c __sseek
00007afc g     F .text	00000010 __sinit
0000c134 g     F .text	00000140 __swbuf_r
000085c4 g     F .text	0000007c _setlocale_r
00007964 g     F .text	00000068 __sfmoreglue
0000f138 g     F .text	00000024 __malloc_unlock
00000a50 g     F .text	00000014 LCD_Write_Command
000155b4 g     O .bss	00000004 sobel_width
000155b0 g     O .bss	00000004 start_all
00001b8c g     F .text	00000194 sobel_complete_sub
00015614 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008a88 g     F .text	0000015c memmove
00000a64 g     F .text	00000014 LCD_Write_Data
00007ae4 g     F .text	00000018 _cleanup
000155d4 g     O .bss	00000004 end_sobel
00008d0c g     F .text	000000a8 _Balloc
00001d30 g     F .text	0000009c sobel_all_init
0000d858 g     F .text	000000dc .hidden __gtdf2
00010ee0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000bfc4 g     F .text	0000005c _fstat_r
000155f4 g     O .bss	00000004 errno
0000a334 g     F .text	00000008 __seofread
00015608 g     O .bss	00000004 alt_argv
0001b968 g       *ABS*	00000000 _gp
0000f3a8 g     F .text	00000030 usleep
000155e4 g     O .bss	00000004 array_width
00000668 g     F .text	00000074 cam_set_image_pointer
00012788 g     O .rwdata	00000180 alt_fd_list
00001dcc g     F .text	000001c8 sobel_all_complete
00002230 g     F .text	00000010 vga_set_pointer
00010f04 g     F .text	00000090 alt_find_dev
00008940 g     F .text	00000148 memcpy
000077b4 g     F .text	0000000c _cleanup_r
0000eabc g     F .text	000000dc .hidden __floatsidf
00010a6c g     F .text	0000007c alt_io_redirect
000155ac g     O .bss	00000004 end_all
0000d934 g     F .text	000000f4 .hidden __ltdf2
00011600 g       *ABS*	00000000 __DTOR_END__
00003758 g     F .text	00000014 puts
000111d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a26c g     F .text	00000074 __fpclassifyd
00009aec g     F .text	000000a4 __ratio
0000ba68 g     F .text	0000001c __vfiprintf_internal
0000fc1c g     F .text	0000021c altera_avalon_jtag_uart_read
00002df8 g     F .text	00000014 malloc
0000362c g     F .text	00000030 _printf_r
000008a4 g     F .text	00000008 get_grayscale_picture
00002348 g     F .text	00000064 .hidden __udivsi3
00011660 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000edf8 g     F .text	000000a4 isatty
00011ca8 g     O .rodata	000000c8 __mprec_tens
00008640 g     F .text	0000000c __locale_charset
00011140 g     F .text	00000090 alt_icache_flush
000155f0 g     O .bss	00000004 __malloc_top_pad
00013978 g     O .rwdata	00000004 __mb_cur_max
00008670 g     F .text	0000000c _localeconv_r
00001424 g     F .text	00000140 sobel_x
00009118 g     F .text	0000003c __i2b
00007f80 g     F .text	000004bc __sfvwrite_r
00000a78 g     F .text	00000414 init_LCD
0000376c g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000c0d4 g     F .text	00000060 _read_r
000155b8 g     O .bss	00000004 sobel_result
00013990 g     O .rwdata	00000004 alt_max_fd
0000bcb8 g     F .text	000000f0 _fclose_r
0000777c g     F .text	00000030 fflush
000155ec g     O .bss	00000004 __malloc_max_sbrked_mem
0001559c g     O .bss	00000004 grayscale_array
0000cf24 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00009894 g     F .text	0000010c __b2d
0000c9ec g     F .text	00000538 .hidden __umoddi3
0000efc4 g     F .text	000000d4 lseek
0000096c g     F .text	0000008c i2c_short_read
00013970 g     O .rwdata	00000004 _global_impure_ptr
00009d08 g     F .text	00000564 _realloc_r
00015750 g       *ABS*	00000000 __bss_end
000108b8 g     F .text	000000f0 alt_iic_isr_register
00010dd8 g     F .text	00000108 alt_tick
0000c474 g     F .text	00000578 .hidden __udivdi3
0000bf20 g     F .text	00000024 _fputwc_r
00011c80 g     O .rodata	00000028 __mprec_bigtens
00008efc g     F .text	00000104 __s2b
00002cec g     F .text	000000a8 .hidden __floatunsidf
000095d4 g     F .text	00000060 __mcmp
00007b1c g     F .text	00000018 __fp_lock_all
0001086c g     F .text	0000004c alt_ic_irq_enabled
00015594 g     O .bss	00000004 grayscape_height
00010d3c g     F .text	0000009c alt_alarm_stop
00015618 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012760 g     O .rwdata	00000028 alt_dev_null
00000f18 g     F .text	00000078 transfer_LCD_with_dma
00001a14 g     F .text	00000178 sobel_complete
000104ec g     F .text	00000048 alt_dcache_flush_all
00009000 g     F .text	00000068 __hi0bits
0000ea3c g     F .text	00000080 .hidden __fixdfsi
000139a8 g       *ABS*	00000000 __ram_rwdata_end
00013988 g     O .rwdata	00000008 alt_dev_list
0000f414 g     F .text	000000f8 write
00010248 g     F .text	00000020 alt_timestamp_freq
00011dbc g       *ABS*	00000000 __ram_rodata_end
0000ed0c g     F .text	000000b0 fstat
0000d934 g     F .text	000000f4 .hidden __ledf2
0000934c g     F .text	00000140 __pow5mult
0000a60c g     F .text	0000145c ___vfiprintf_internal_r
00015600 g     O .bss	00000004 __nlocale_changed
000023ac g     F .text	00000058 .hidden __umodsi3
00000844 g     F .text	00000050 conv_grayscale_partial
000007f4 g     F .text	00000050 conv_grayscale_init
00001d20 g     F .text	00000008 GetSobel_rgb
00015750 g       *ABS*	00000000 end
00001d28 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
000017f8 g     F .text	00000168 sobel_y_with_rgb
0000f758 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00011600 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
000100d4 g     F .text	0000007c alt_avalon_timer_sc_init
00002d94 g     F .text	00000064 .hidden __clzsi2
0000fe38 g     F .text	00000224 altera_avalon_jtag_uart_write
00007b0c g     F .text	00000004 __sfp_lock_acquire
0000885c g     F .text	000000e4 memchr
00003858 g     F .text	000021f8 ___vfprintf_internal_r
00007c70 g     F .text	00000310 _free_r
0000864c g     F .text	00000010 __locale_mb_cur_max
000016e0 g     F .text	00000118 sobel_y
00011788 g     O .rodata	00000140 noise_reduction_reg_settings_array
0001144c g     F .text	00000180 __call_exitprocs
000155fc g     O .bss	00000004 __mlocale_changed
00013968 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
000155cc g     O .bss	00000004 end_conv_grayscale
0001561c g     O .bss	00000004 _alt_tick_rate
0000948c g     F .text	00000148 __lshift
00015620 g     O .bss	00000004 _alt_nticks
0000f198 g     F .text	000000fc read
0000f578 g     F .text	0000007c alt_sys_init
00001564 g     F .text	0000017c sobel_x_with_rgb
00011334 g     F .text	00000118 __register_exitproc
00009154 g     F .text	000001f8 __multiply
0000fac4 g     F .text	00000068 altera_avalon_jtag_uart_close
00011dbc g       *ABS*	00000000 __ram_rwdata_start
00011600 g       *ABS*	00000000 __ram_rodata_start
00015628 g     O .bss	00000028 __malloc_current_mallinfo
000099a0 g     F .text	0000014c __d2b
000155bc g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000211c g     F .text	0000010c sobel_all_partial
0000f5f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001270 g     F .text	000000f8 init_sobel_arrays
0001109c g     F .text	000000a4 alt_get_fd
00010394 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000bba0 g     F .text	00000054 _close_r
000112b8 g     F .text	0000007c memcmp
0000f6b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015750 g       *ABS*	00000000 __alt_stack_base
0000f704 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005b28 g     F .text	00000154 __swsetup_r
00002404 g     F .text	000008e8 .hidden __divdf3
000079cc g     F .text	00000118 __sfp
00009c04 g     F .text	00000078 __copybits
00011ebc g     O .rwdata	00000408 __malloc_av_
00007b18 g     F .text	00000004 __sinit_lock_release
0000da28 g     F .text	00000718 .hidden __muldf3
0000a2e0 g     F .text	00000054 __sread
00010f94 g     F .text	00000108 alt_find_file
00010570 g     F .text	000000a4 alt_dev_llist_insert
0000f114 g     F .text	00000024 __malloc_lock
0000f2f8 g     F .text	000000b0 sbrk
00007720 g     F .text	0000005c _fflush_r
0000bbf4 g     F .text	000000c4 _calloc_r
000155a8 g     O .bss	00000004 start_global
00011dbc g     O .rwdata	00000100 .hidden __divsi3_table
00015594 g       *ABS*	00000000 __bss_start
00008be4 g     F .text	00000128 memset
00000f90 g     F .text	000002e0 main
0001560c g     O .bss	00000004 alt_envp
000155e8 g     O .bss	00000004 __malloc_max_total_mem
00000894 g     F .text	00000008 get_grayscale_width
0000f654 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c274 g     F .text	00000018 __swbuf
000155c0 g     O .bss	00000004 sobel_x_result
0000a414 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000bda8 g     F .text	00000014 fclose
000155dc g     O .bss	00000004 size
00010150 g     F .text	00000078 alt_timestamp_start
00005e7c g     F .text	00001688 _dtoa_r
00002e20 g     F .text	0000080c _malloc_r
0000c3e8 g     F .text	00000030 __ascii_wctomb
00013994 g     O .rwdata	00000004 alt_errno
0000843c g     F .text	000000c4 _fwalk
000155e0 g     O .bss	00000004 array_height
000155d8 g     O .bss	00000004 start_sobel
00002250 g     F .text	00000084 .hidden __divsi3
00007b4c g     F .text	00000124 _malloc_trim_r
00011600 g       *ABS*	00000000 __CTOR_END__
00015598 g     O .bss	00000004 grayscale_width
0000a41c g     F .text	000000dc strcmp
00000e8c g     F .text	0000008c transfer_LCD_no_dma
00011600 g       *ABS*	00000000 __flash_rodata_start
00011600 g       *ABS*	00000000 __DTOR_LIST__
0000d7d0 g     F .text	00000088 .hidden __nedf2
000118c8 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f540 g     F .text	00000038 alt_irq_init
0000f294 g     F .text	00000064 alt_release_fd
000008c4 g     F .text	000000a8 i2c_auto_detect
00011ac7 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
000155f8 g     O .bss	00000004 _PathLocale
000008ac g     F .text	00000018 i2c_busy_wait
0001126c g     F .text	00000014 atexit
0000bb40 g     F .text	00000060 _write_r
0000867c g     F .text	00000018 setlocale
00013974 g     O .rwdata	00000004 _impure_ptr
00015604 g     O .bss	00000004 alt_argc
00007504 g     F .text	0000021c __sflush_r
00015610 g     O .bss	00000004 altera_avalon_timer_ts_base
00010674 g     F .text	00000060 _do_dtors
00008668 g     F .text	00000008 __locale_cjk_lang
00001f94 g     F .text	00000188 partial
00000020 g       .exceptions	00000000 alt_irq_entry
00009830 g     F .text	00000064 __ulp
00007b34 g     F .text	00000018 __fp_unlock_all
00013980 g     O .rwdata	00000008 alt_fs_list
000155c4 g     O .bss	00000004 sobel_y_result
000009f8 g     F .text	00000058 i2c_short_write
000155d0 g     O .bss	00000004 start_conv_grayscale
00000020 g       *ABS*	00000000 __ram_exceptions_start
000155a0 g     O .bss	00000002 LCD_height
00008694 g     F .text	0000000c localeconv
000101c8 g     F .text	00000080 alt_timestamp
00002240 g     F .text	00000010 vga_set_swap
00010708 g     F .text	00000050 alt_ic_isr_register
00001960 g     F .text	000000b4 sobel_threshold
000139a8 g       *ABS*	00000000 _edata
00015750 g       *ABS*	00000000 _end
0000bdbc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fb2c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011a9d g     O .rodata	00000009 gx_array
000107e0 g     F .text	0000008c alt_ic_irq_disable
0000a33c g     F .text	0000007c __swrite
0001396c g     O .rwdata	00000004 __malloc_trim_threshold
000155a2 g     O .bss	00000002 LCD_width
00000774 g     F .text	00000080 conv_grayscale
0000865c g     F .text	0000000c __locale_msgcharset
00011280 g     F .text	00000038 exit
00008500 g     F .text	000000c4 _fwalk_reent
00009634 g     F .text	000001fc __mdiff
000022d4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007b10 g     F .text	00000004 __sfp_lock_release
0000089c g     F .text	00000008 get_grayscale_height
000115cc g     F .text	00000034 _exit
00001368 g     F .text	000000bc sobel_mac
00010268 g     F .text	0000012c alt_alarm_start
000086a0 g     F .text	000001bc __smakebuf_r
000155c8 g     O .bss	00000004 sobel_rgb565
000037c0 g     F .text	00000098 strlen
00010be8 g     F .text	00000154 open
0000d858 g     F .text	000000dc .hidden __gedf2
0001397c g     O .rwdata	00000004 __wctomb
00002228 g     F .text	00000008 GetSobelAllResult
0000a5f4 g     F .text	00000018 __sprint_r
000106d4 g     F .text	00000034 alt_icache_flush_all
0001399c g     O .rwdata	00000004 alt_priority_mask
00010758 g     F .text	00000088 alt_ic_irq_enable
00005a50 g     F .text	0000001c __vfprintf_internal
0000c418 g     F .text	0000005c _wctomb_r
0000e140 g     F .text	000008fc .hidden __subdf3
00009068 g     F .text	000000b0 __lo0bits
000139a0 g     O .rwdata	00000008 alt_alarm_list
00010614 g     F .text	00000060 _do_ctors
0000c328 g     F .text	000000c0 wcrtomb
0000ebd4 g     F .text	000000d0 close
000155a4 g     O .bss	00000004 end_global
0000ef04 g     F .text	00000084 alt_load
0000bf44 g     F .text	00000080 fputwc
00002e0c g     F .text	00000014 free
00007b14 g     F .text	00000004 __sinit_lock_acquire
00008ddc g     F .text	00000120 __multadd
00008db4 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10959404 	addi	r2,r2,22096
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10959404 	addi	r2,r2,22096
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72f17 	ldw	r2,-25412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72f17 	ldw	r2,-25412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ae5a14 	ori	gp,gp,47464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10956514 	ori	r2,r2,21908

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d5d414 	ori	r3,r3,22352

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000ef040 	call	ef04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f0980 	call	f098 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009f80 	call	9f8 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009f80 	call	9f8 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009f80 	call	9f8 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84063204 	addi	r16,r16,6344
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009f80 	call	9f8 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009f80 	call	9f8 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	8405e204 	addi	r16,r16,6024
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009f80 	call	9f8 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009f80 	call	9f8 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009f80 	call	9f8 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009f80 	call	9f8 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009f80 	call	9f8 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009f80 	call	9f8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009f80 	call	9f8 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84059804 	addi	r16,r16,5728
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009f80 	call	9f8 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009f80 	call	9f8 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009f80 	call	9f8 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009f81 	jmpi	9f8 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	21058004 	addi	r4,r4,5632
     620:	297fffcc 	andi	r5,r5,65535
     624:	000365c0 	call	365c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	21058804 	addi	r4,r4,5664
     63c:	297fffcc 	andi	r5,r5,65535
     640:	000365c0 	call	365c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	21059004 	addi	r4,r4,5696
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	000365c1 	jmpi	365c <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int pos, size = width*height;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffd04 	addi	sp,sp,-12
     77c:	dc400115 	stw	r17,4(sp)
     780:	dc000015 	stw	r16,0(sp)
     784:	dfc00215 	stw	ra,8(sp)
	int pos, size = width*height;
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
     788:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     78c:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     790:	2021883a 	mov	r16,r4
	int pos, size = width*height;
     794:	29a3383a 	mul	r17,r5,r6
	unsigned short *pixels = (unsigned short *)picture;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     798:	10000226 	beq	r2,zero,7a4 <conv_grayscale+0x30>
		free(grayscale_array);
     79c:	1009883a 	mov	r4,r2
     7a0:	0002e0c0 	call	2e0c <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7a4:	8809883a 	mov	r4,r17
     7a8:	0002df80 	call	2df8 <malloc>
     7ac:	d0a70d15 	stw	r2,-25548(gp)
	for (pos = 0 ; pos < size ; pos++) {
     7b0:	04400b0e 	bge	zero,r17,7e0 <conv_grayscale+0x6c>
     7b4:	8009883a 	mov	r4,r16
     7b8:	0007883a 	mov	r3,zero
     7bc:	00000106 	br	7c4 <conv_grayscale+0x50>
     7c0:	d0a70d17 	ldw	r2,-25548(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     7c4:	21c0000b 	ldhu	r7,0(r4)
     7c8:	380fc032 	custom	0,r7,r7,zero
     7cc:	10c5883a 	add	r2,r2,r3
     7d0:	11c00005 	stb	r7,0(r2)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (pos = 0 ; pos < size ; pos++) {
     7d4:	18c00044 	addi	r3,r3,1
     7d8:	21000084 	addi	r4,r4,2
     7dc:	88fff81e 	bne	r17,r3,7c0 <__alt_data_end+0xff0007c0>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}
     7e0:	dfc00217 	ldw	ra,8(sp)
     7e4:	dc400117 	ldw	r17,4(sp)
     7e8:	dc000017 	ldw	r16,0(sp)
     7ec:	dec00304 	addi	sp,sp,12
     7f0:	f800283a 	ret

000007f4 <conv_grayscale_init>:

void conv_grayscale_init(int width, int height){
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     7f4:	d0a70d17 	ldw	r2,-25548(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}

void conv_grayscale_init(int width, int height){
     7f8:	defffd04 	addi	sp,sp,-12
     7fc:	dc400115 	stw	r17,4(sp)
     800:	dc000015 	stw	r16,0(sp)
     804:	dfc00215 	stw	ra,8(sp)
		grayscale_width = width;
     808:	d1270c15 	stw	r4,-25552(gp)
		grayscape_height = height;
     80c:	d1670b15 	stw	r5,-25556(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
}

void conv_grayscale_init(int width, int height){
     810:	2023883a 	mov	r17,r4
     814:	2821883a 	mov	r16,r5
		grayscale_width = width;
		grayscape_height = height;
		if (grayscale_array != NULL)
     818:	10000226 	beq	r2,zero,824 <conv_grayscale_init+0x30>
			free(grayscale_array);
     81c:	1009883a 	mov	r4,r2
     820:	0002e0c0 	call	2e0c <free>
		grayscale_array = (unsigned char *) malloc(width* height);
     824:	8c09383a 	mul	r4,r17,r16
     828:	0002df80 	call	2df8 <malloc>
     82c:	d0a70d15 	stw	r2,-25548(gp)
}
     830:	dfc00217 	ldw	ra,8(sp)
     834:	dc400117 	ldw	r17,4(sp)
     838:	dc000017 	ldw	r16,0(sp)
     83c:	dec00304 	addi	sp,sp,12
     840:	f800283a 	ret

00000844 <conv_grayscale_partial>:
void conv_grayscale_partial(void *picture, int from, int size){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
     844:	298d883a 	add	r6,r5,r6
     848:	2980110e 	bge	r5,r6,890 <conv_grayscale_partial+0x4c>
     84c:	d0a70c17 	ldw	r2,-25552(gp)
		for (x = 0 ; x < grayscale_width ; x++) {
     850:	0007883a 	mov	r3,zero
     854:	00800c0e 	bge	zero,r2,888 <conv_grayscale_partial+0x44>
			pos = y*grayscale_width+x;
			//IOWR_8DIRECT(grayscale_array,y*width+x,gray);
			grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
     858:	2885383a 	mul	r2,r5,r2
     85c:	d2270d17 	ldw	r8,-25548(gp)
     860:	10c5883a 	add	r2,r2,r3
     864:	108f883a 	add	r7,r2,r2
     868:	21cf883a 	add	r7,r4,r7
     86c:	39c0000b 	ldhu	r7,0(r7)
     870:	4085883a 	add	r2,r8,r2
     874:	380fc032 	custom	0,r7,r7,zero
     878:	11c00005 	stb	r7,0(r2)
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
		for (x = 0 ; x < grayscale_width ; x++) {
     87c:	d0a70c17 	ldw	r2,-25552(gp)
     880:	18c00044 	addi	r3,r3,1
     884:	18bff416 	blt	r3,r2,858 <__alt_data_end+0xff000858>
void conv_grayscale_partial(void *picture, int from, int size){
	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array+from, size*grayscale_width);
	for (y = from ; y < from+size ; y++) {
     888:	29400044 	addi	r5,r5,1
     88c:	29bff01e 	bne	r5,r6,850 <__alt_data_end+0xff000850>
     890:	f800283a 	ret

00000894 <get_grayscale_width>:
}


int get_grayscale_width() {
	return grayscale_width;
}
     894:	d0a70c17 	ldw	r2,-25552(gp)
     898:	f800283a 	ret

0000089c <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     89c:	d0a70b17 	ldw	r2,-25556(gp)
     8a0:	f800283a 	ret

000008a4 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8a4:	d0a70d17 	ldw	r2,-25548(gp)
     8a8:	f800283a 	ret

000008ac <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8ac:	00c04034 	movhi	r3,256
     8b0:	18c42704 	addi	r3,r3,4252
     8b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8b8:	108000cc 	andi	r2,r2,3
     8bc:	103ffd1e 	bne	r2,zero,8b4 <__alt_data_end+0xff0008b4>
}
     8c0:	f800283a 	ret

000008c4 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	01004034 	movhi	r4,256
     8c8:	21042704 	addi	r4,r4,4252
     8cc:	00c04034 	movhi	r3,256
     8d0:	18c42704 	addi	r3,r3,4252
     8d4:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d8:	108000cc 	andi	r2,r2,3
     8dc:	103ffb1e 	bne	r2,zero,8cc <__alt_data_end+0xff0008cc>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     8e0:	00800104 	movi	r2,4
     8e4:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8e8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ec:	108000cc 	andi	r2,r2,3
     8f0:	103ffd1e 	bne	r2,zero,8e8 <__alt_data_end+0xff0008e8>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8f4:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8f8:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8fc:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     900:	dfc00315 	stw	ra,12(sp)
     904:	dc800215 	stw	r18,8(sp)
     908:	dc400115 	stw	r17,4(sp)
     90c:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     910:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     914:	01000074 	movhi	r4,1
     918:	21067804 	addi	r4,r4,6624
     91c:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     920:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     924:	000365c0 	call	365c <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     928:	04800a0e 	bge	zero,r18,954 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     92c:	04404034 	movhi	r17,256
     930:	8c442404 	addi	r17,r17,4240
     934:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     938:	89800037 	ldwio	r6,0(r17)
     93c:	01000074 	movhi	r4,1
     940:	800b883a 	mov	r5,r16
     944:	21068104 	addi	r4,r4,6660
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     948:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     94c:	000365c0 	call	365c <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     950:	943ff81e 	bne	r18,r16,934 <__alt_data_end+0xff000934>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     954:	dfc00317 	ldw	ra,12(sp)
     958:	dc800217 	ldw	r18,8(sp)
     95c:	dc400117 	ldw	r17,4(sp)
     960:	dc000017 	ldw	r16,0(sp)
     964:	dec00404 	addi	sp,sp,16
     968:	f800283a 	ret

0000096c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     96c:	01804034 	movhi	r6,256
     970:	31842704 	addi	r6,r6,4252
     974:	00c04034 	movhi	r3,256
     978:	18c42704 	addi	r3,r3,4252
     97c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     980:	108000cc 	andi	r2,r2,3
     984:	103ffb1e 	bne	r2,zero,974 <__alt_data_end+0xff000974>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     988:	00804034 	movhi	r2,256
     98c:	21003fcc 	andi	r4,r4,255
     990:	10842404 	addi	r2,r2,4240
     994:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     998:	00804034 	movhi	r2,256
     99c:	10842504 	addi	r2,r2,4244
     9a0:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9a4:	008010c4 	movi	r2,67
     9a8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9ac:	180b883a 	mov	r5,r3
     9b0:	00c04034 	movhi	r3,256
     9b4:	18c42704 	addi	r3,r3,4252
     9b8:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9bc:	108000cc 	andi	r2,r2,3
     9c0:	103ffb1e 	bne	r2,zero,9b0 <__alt_data_end+0xff0009b0>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9c4:	00804034 	movhi	r2,256
     9c8:	21000044 	addi	r4,r4,1
     9cc:	10842404 	addi	r2,r2,4240
     9d0:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d4:	00800884 	movi	r2,34
     9d8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9dc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e0:	108000cc 	andi	r2,r2,3
     9e4:	103ffd1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     9e8:	00804034 	movhi	r2,256
     9ec:	10842604 	addi	r2,r2,4248
}
     9f0:	10800037 	ldwio	r2,0(r2)
     9f4:	f800283a 	ret

000009f8 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9f8:	01c04034 	movhi	r7,256
     9fc:	39c42704 	addi	r7,r7,4252
     a00:	00c04034 	movhi	r3,256
     a04:	18c42704 	addi	r3,r3,4252
     a08:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffb1e 	bne	r2,zero,a00 <__alt_data_end+0xff000a00>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a14:	00804034 	movhi	r2,256
     a18:	10842404 	addi	r2,r2,4240
     a1c:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a20:	00804034 	movhi	r2,256
     a24:	10842504 	addi	r2,r2,4244
     a28:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a2c:	00804034 	movhi	r2,256
     a30:	10842604 	addi	r2,r2,4248
     a34:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a38:	00801084 	movi	r2,66
     a3c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a40:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a44:	108000cc 	andi	r2,r2,3
     a48:	103ffd1e 	bne	r2,zero,a40 <__alt_data_end+0xff000a40>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a4c:	f800283a 	ret

00000a50 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a50:	00804034 	movhi	r2,256
     a54:	10841804 	addi	r2,r2,4192
     a58:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a5c:	01000284 	movi	r4,10
     a60:	000f3a81 	jmpi	f3a8 <usleep>

00000a64 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	00804034 	movhi	r2,256
     a68:	10841904 	addi	r2,r2,4196
     a6c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a70:	01000284 	movi	r4,10
     a74:	000f3a81 	jmpi	f3a8 <usleep>

00000a78 <init_LCD>:
}


void init_LCD() {
     a78:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a7c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a80:	dd400515 	stw	r21,20(sp)
     a84:	dfc00815 	stw	ra,32(sp)
     a88:	ddc00715 	stw	r23,28(sp)
     a8c:	dd800615 	stw	r22,24(sp)
     a90:	dd000415 	stw	r20,16(sp)
     a94:	dcc00315 	stw	r19,12(sp)
     a98:	dc800215 	stw	r18,8(sp)
     a9c:	dc400115 	stw	r17,4(sp)
     aa0:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     aa4:	05400084 	movi	r21,2
     aa8:	10841a04 	addi	r2,r2,4200
     aac:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ab0:	04804034 	movhi	r18,256
     ab4:	94841804 	addi	r18,r18,4192
     ab8:	00800a04 	movi	r2,40
     abc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ac0:	04000284 	movi	r16,10
     ac4:	8009883a 	mov	r4,r16
     ac8:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     acc:	05c00444 	movi	r23,17
     ad0:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad8:	04404034 	movhi	r17,256
     adc:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ae0:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae4:	0027883a 	mov	r19,zero
     ae8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af4:	008032c4 	movi	r2,203
     af8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	00800e44 	movi	r2,57
     b08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b14:	00800b04 	movi	r2,44
     b18:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b28:	8009883a 	mov	r4,r16
     b2c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b30:	00800d04 	movi	r2,52
     b34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b4c:	008033c4 	movi	r2,207
     b50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b68:	05802044 	movi	r22,129
     b6c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	00800c04 	movi	r2,48
     b7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b88:	00803a04 	movi	r2,232
     b8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b98:	00802144 	movi	r2,133
     b9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba0:	8009883a 	mov	r4,r16
     ba4:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba8:	05000044 	movi	r20,1
     bac:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb8:	00801e44 	movi	r2,121
     bbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bc8:	00803a84 	movi	r2,234
     bcc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00801904 	movi	r2,100
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	008000c4 	movi	r2,3
     c04:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	00800484 	movi	r2,18
     c14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c18:	8009883a 	mov	r4,r16
     c1c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c20:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c2c:	00803dc4 	movi	r2,247
     c30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800804 	movi	r2,32
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c4c:	00803004 	movi	r2,192
     c50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c5c:	05800984 	movi	r22,38
     c60:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c6c:	00800104 	movi	r2,4
     c70:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	00803044 	movi	r2,193
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c98:	00803144 	movi	r2,197
     c9c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca8:	00800d44 	movi	r2,53
     cac:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	00800f84 	movi	r2,62
     cbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cc0:	8009883a 	mov	r4,r16
     cc4:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc8:	008031c4 	movi	r2,199
     ccc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	00802f84 	movi	r2,190
     cdc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ce8:	00802c44 	movi	r2,177
     cec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf0:	8009883a 	mov	r4,r16
     cf4:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00800404 	movi	r2,16
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00800e84 	movi	r2,58
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	00801544 	movi	r2,85
     d28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d34:	00802d84 	movi	r2,182
     d38:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d3c:	8009883a 	mov	r4,r16
     d40:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d44:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	00802884 	movi	r2,162
     d54:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d60:	00803c84 	movi	r2,242
     d64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d74:	8009883a 	mov	r4,r16
     d78:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d7c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d80:	8009883a 	mov	r4,r16
     d84:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d88:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d8c:	8009883a 	mov	r4,r16
     d90:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d94:	00800d84 	movi	r2,54
     d98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d9c:	8009883a 	mov	r4,r16
     da0:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da8:	8009883a 	mov	r4,r16
     dac:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     db0:	00800a84 	movi	r2,42
     db4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dc4:	8009883a 	mov	r4,r16
     dc8:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dcc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd0:	8009883a 	mov	r4,r16
     dd4:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ddc:	8009883a 	mov	r4,r16
     de0:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     de4:	00803bc4 	movi	r2,239
     de8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dec:	8009883a 	mov	r4,r16
     df0:	000f3a80 	call	f3a8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     df4:	00800ac4 	movi	r2,43
     df8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000f3a80 	call	f3a8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e08:	8009883a 	mov	r4,r16
     e0c:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e14:	8009883a 	mov	r4,r16
     e18:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e1c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e20:	8009883a 	mov	r4,r16
     e24:	000f3a80 	call	f3a8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e28:	00800fc4 	movi	r2,63
     e2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e30:	8009883a 	mov	r4,r16
     e34:	000f3a80 	call	f3a8 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e38:	00c04034 	movhi	r3,256
     e3c:	00803c04 	movi	r2,240
     e40:	18c41d04 	addi	r3,r3,4212
     e44:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e48:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e4c:	00805004 	movi	r2,320
     e50:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e54:	00800a44 	movi	r2,41
     e58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e5c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e60:	dfc00817 	ldw	ra,32(sp)
     e64:	ddc00717 	ldw	r23,28(sp)
     e68:	dd800617 	ldw	r22,24(sp)
     e6c:	dd400517 	ldw	r21,20(sp)
     e70:	dd000417 	ldw	r20,16(sp)
     e74:	dcc00317 	ldw	r19,12(sp)
     e78:	dc800217 	ldw	r18,8(sp)
     e7c:	dc400117 	ldw	r17,4(sp)
     e80:	dc000017 	ldw	r16,0(sp)
     e84:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e88:	000f3a81 	jmpi	f3a8 <usleep>

00000e8c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e8c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e90:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e94:	dc000015 	stw	r16,0(sp)
     e98:	dfc00415 	stw	ra,16(sp)
     e9c:	dcc00315 	stw	r19,12(sp)
     ea0:	dc800215 	stw	r18,8(sp)
     ea4:	dc400115 	stw	r17,4(sp)
     ea8:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     eac:	10841e04 	addi	r2,r2,4216
     eb0:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb4:	00804034 	movhi	r2,256
     eb8:	10841804 	addi	r2,r2,4192
     ebc:	00c00b04 	movi	r3,44
     ec0:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ec4:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	000f3a80 	call	f3a8 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ed0:	90000a26 	beq	r18,zero,efc <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ed4:	04c04034 	movhi	r19,256
     ed8:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     edc:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ee0:	8080000b 	ldhu	r2,0(r16)
     ee4:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     ee8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eec:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     ef0:	000f3a80 	call	f3a8 <usleep>
     ef4:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef8:	8cbff91e 	bne	r17,r18,ee0 <__alt_data_end+0xff000ee0>
		LCD_Write_Data(data_array[pixels]);
}
     efc:	dfc00417 	ldw	ra,16(sp)
     f00:	dcc00317 	ldw	r19,12(sp)
     f04:	dc800217 	ldw	r18,8(sp)
     f08:	dc400117 	ldw	r17,4(sp)
     f0c:	dc000017 	ldw	r16,0(sp)
     f10:	dec00504 	addi	sp,sp,20
     f14:	f800283a 	ret

00000f18 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f18:	d0a70e0b 	ldhu	r2,-25544(gp)
     f1c:	3080010e 	bge	r6,r2,f24 <transfer_LCD_with_dma+0xc>
     f20:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f24:	d0e70e8b 	ldhu	r3,-25542(gp)
     f28:	28c0010e 	bge	r5,r3,f30 <transfer_LCD_with_dma+0x18>
     f2c:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f30:	01804034 	movhi	r6,256
     f34:	31841e04 	addi	r6,r6,4216
     f38:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f3c:	01404034 	movhi	r5,256
     f40:	29441b04 	addi	r5,r5,4204
     f44:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f48:	18ffffcc 	andi	r3,r3,65535
     f4c:	10bfffcc 	andi	r2,r2,65535
     f50:	1885383a 	mul	r2,r3,r2
     f54:	00c04034 	movhi	r3,256
     f58:	18c41c04 	addi	r3,r3,4208
     f5c:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f60:	39c03fcc 	andi	r7,r7,255
     f64:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f68:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f6c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f70:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f74:	38000326 	beq	r7,zero,f84 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f78:	00c04404 	movi	r3,272
     f7c:	10c0002d 	sthio	r3,0(r2)
     f80:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f84:	00c04004 	movi	r3,256
     f88:	10c0002d 	sthio	r3,0(r2)
     f8c:	f800283a 	ret

00000f90 <main>:
alt_u32 end_all = 0;
alt_u32 start_global = 0;
alt_u32 end_global = 0;

int main()
{
     f90:	defff804 	addi	sp,sp,-32
     f94:	dfc00715 	stw	ra,28(sp)
     f98:	dd800615 	stw	r22,24(sp)
     f9c:	dd400515 	stw	r21,20(sp)
     fa0:	dd000415 	stw	r20,16(sp)
     fa4:	dcc00315 	stw	r19,12(sp)
     fa8:	dc800215 	stw	r18,8(sp)
     fac:	dc400115 	stw	r17,4(sp)
     fb0:	dc000015 	stw	r16,0(sp)
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  init_LCD();
     fb4:	0000a780 	call	a78 <init_LCD>
  init_camera();
     fb8:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fbc:	01000604 	movi	r4,24
     fc0:	00022400 	call	2240 <vga_set_swap>
  printf("Hello from Nios II!\n");
     fc4:	01000074 	movhi	r4,1
     fc8:	21068a04 	addi	r4,r4,6696
     fcc:	00037580 	call	3758 <puts>
  cam_get_profiling();
     fd0:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd4:	00005a80 	call	5a8 <cam_get_xsize>
     fd8:	1021883a 	mov	r16,r2
     fdc:	00005cc0 	call	5cc <cam_get_ysize>
     fe0:	10bfffcc 	andi	r2,r2,65535
     fe4:	813fffcc 	andi	r4,r16,65535
     fe8:	2089383a 	mul	r4,r4,r2
     fec:	05000074 	movhi	r20,1
     ff0:	a5076f04 	addi	r20,r20,7612
     ff4:	0002df80 	call	2df8 <malloc>
     ff8:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ffc:	00005a80 	call	5a8 <cam_get_xsize>
    1000:	1021883a 	mov	r16,r2
    1004:	00005cc0 	call	5cc <cam_get_ysize>
    1008:	10bfffcc 	andi	r2,r2,65535
    100c:	813fffcc 	andi	r4,r16,65535
    1010:	2089383a 	mul	r4,r4,r2
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1014:	04e04414 	movui	r19,33040
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1018:	048003c4 	movi	r18,15
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    101c:	0002df80 	call	2df8 <malloc>
    1020:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1024:	00005a80 	call	5a8 <cam_get_xsize>
    1028:	1021883a 	mov	r16,r2
    102c:	00005cc0 	call	5cc <cam_get_ysize>
    1030:	10bfffcc 	andi	r2,r2,65535
    1034:	813fffcc 	andi	r4,r16,65535
    1038:	2089383a 	mul	r4,r4,r2
    103c:	0002df80 	call	2df8 <malloc>
    1040:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1044:	00005a80 	call	5a8 <cam_get_xsize>
    1048:	1021883a 	mov	r16,r2
    104c:	00005cc0 	call	5cc <cam_get_ysize>
    1050:	10bfffcc 	andi	r2,r2,65535
    1054:	813fffcc 	andi	r4,r16,65535
    1058:	2089383a 	mul	r4,r4,r2
    105c:	0002df80 	call	2df8 <malloc>
  cam_set_image_pointer(0,buffer1);
    1060:	b00b883a 	mov	r5,r22
    1064:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1068:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    106c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1070:	a80b883a 	mov	r5,r21
    1074:	01000044 	movi	r4,1
    1078:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    107c:	880b883a 	mov	r5,r17
    1080:	01000084 	movi	r4,2
    1084:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1088:	800b883a 	mov	r5,r16
    108c:	010000c4 	movi	r4,3
    1090:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1094:	00007200 	call	720 <enable_continues_mode>


  int pixels = (cam_get_xsize()>>1) * cam_get_ysize();
    1098:	00005a80 	call	5a8 <cam_get_xsize>
    109c:	1021883a 	mov	r16,r2
    10a0:	00005cc0 	call	5cc <cam_get_ysize>
    10a4:	80ffffcc 	andi	r3,r16,65535
    10a8:	1806d07a 	srli	r3,r3,1
    10ac:	10bfffcc 	andi	r2,r2,65535
    10b0:	18a3383a 	mul	r17,r3,r2

  //init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
  //conv_grayscale_init(cam_get_xsize()>>1, cam_get_ysize());
  sobel_all_init(cam_get_xsize()>>1, cam_get_ysize());
    10b4:	00005a80 	call	5a8 <cam_get_xsize>
    10b8:	1021883a 	mov	r16,r2
    10bc:	00005cc0 	call	5cc <cam_get_ysize>
    10c0:	813fffcc 	andi	r4,r16,65535
    10c4:	2008d07a 	srli	r4,r4,1
    10c8:	117fffcc 	andi	r5,r2,65535
    10cc:	0001d300 	call	1d30 <sobel_all_init>

  do {
	  if (new_image_available() != 0) {
    10d0:	00007340 	call	734 <new_image_available>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080201c 	xori	r2,r2,128
    10dc:	10bfe004 	addi	r2,r2,-128
    10e0:	103ffb26 	beq	r2,zero,10d0 <__alt_data_end+0xff0010d0>
		  if (current_image_valid()!=0) {
    10e4:	00006dc0 	call	6dc <current_image_valid>
    10e8:	10bfffcc 	andi	r2,r2,65535
    10ec:	10a0001c 	xori	r2,r2,32768
    10f0:	10a00004 	addi	r2,r2,-32768
    10f4:	103ff626 	beq	r2,zero,10d0 <__alt_data_end+0xff0010d0>

			  alt_timestamp_start();
    10f8:	00101500 	call	10150 <alt_timestamp_start>

			  start_global = alt_timestamp();
    10fc:	00101c80 	call	101c8 <alt_timestamp>
    1100:	d0a71015 	stw	r2,-25536(gp)
			  current_mode = DIPSW_get_value();
    1104:	00007600 	call	760 <DIPSW_get_value>
    1108:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    110c:	00006f00 	call	6f0 <current_image_pointer>
    1110:	102b883a 	mov	r21,r2
		      switch (mode) {
    1114:	808001cc 	andi	r2,r16,7
    1118:	1000361e 	bne	r2,zero,11f4 <main+0x264>
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    111c:	00005a80 	call	5a8 <cam_get_xsize>
    1120:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    1124:	00005cc0 	call	5cc <cam_get_ysize>
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1128:	b17fffcc 	andi	r5,r22,65535
    112c:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1130:	84003fcc 	andi	r16,r16,255
    1134:	8400201c 	xori	r16,r16,128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1138:	000f883a 	mov	r7,zero
    113c:	11bfffcc 	andi	r6,r2,65535
    1140:	acc9883a 	add	r4,r21,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1144:	843fe004 	addi	r16,r16,-128
			  start_global = alt_timestamp();
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1148:	0000f180 	call	f18 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    114c:	80004316 	blt	r16,zero,125c <main+0x2cc>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      end_global = alt_timestamp();
    1150:	00101c80 	call	101c8 <alt_timestamp>
    1154:	d0a70f15 	stw	r2,-25540(gp)
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    1158:	d4271217 	ldw	r16,-25528(gp)
    115c:	d0a71117 	ldw	r2,-25532(gp)
    1160:	1421c83a 	sub	r16,r2,r16
    1164:	8444b03a 	or	r2,r16,r17
    1168:	90801d36 	bltu	r18,r2,11e0 <main+0x250>
    116c:	8004913a 	slli	r2,r16,4
    1170:	1444b03a 	or	r2,r2,r17
    1174:	1505883a 	add	r2,r2,r20
    1178:	11800003 	ldbu	r6,0(r2)
    117c:	01000074 	movhi	r4,1
    1180:	800b883a 	mov	r5,r16
    1184:	21068f04 	addi	r4,r4,6716
    1188:	000365c0 	call	365c <printf>
		      printf("FPS: %lfImg/s\n", 1.0L / ((double)(end_global- start_global) / ALT_CPU_CPU_FREQ));
    118c:	d0a71017 	ldw	r2,-25536(gp)
    1190:	d1270f17 	ldw	r4,-25540(gp)
    1194:	2089c83a 	sub	r4,r4,r2
    1198:	0002cec0 	call	2cec <__floatunsidf>
    119c:	01d06234 	movhi	r7,16776
    11a0:	39f5e104 	addi	r7,r7,-10364
    11a4:	1009883a 	mov	r4,r2
    11a8:	180b883a 	mov	r5,r3
    11ac:	000d883a 	mov	r6,zero
    11b0:	00024040 	call	2404 <__divdf3>
    11b4:	100d883a 	mov	r6,r2
    11b8:	180f883a 	mov	r7,r3
    11bc:	0009883a 	mov	r4,zero
    11c0:	014ffc34 	movhi	r5,16368
    11c4:	00024040 	call	2404 <__divdf3>
    11c8:	01000074 	movhi	r4,1
    11cc:	100b883a 	mov	r5,r2
    11d0:	180d883a 	mov	r6,r3
    11d4:	21069904 	addi	r4,r4,6756
    11d8:	000365c0 	call	365c <printf>
    11dc:	003fbc06 	br	10d0 <__alt_data_end+0xff0010d0>
		      	  	   break;
		      }
		      end_global = alt_timestamp();
		      //printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
		      //printf("sobel: %d\n",(int)(end_sobel-start_sobel));
		      printf("Total: %d Cycles and %d Cycles/Pixel\n",(int)(end_all-start_all), (int)(end_all-start_all)/pixels);
    11e0:	880b883a 	mov	r5,r17
    11e4:	8009883a 	mov	r4,r16
    11e8:	00022500 	call	2250 <__divsi3>
    11ec:	100d883a 	mov	r6,r2
    11f0:	003fe206 	br	117c <__alt_data_end+0xff00117c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11f4:	00101c80 	call	101c8 <alt_timestamp>
		    	  	   grayscale = get_grayscale_picture();
		    	  	   sobel_complete_sub(grayscale, 348, 36);
						*/


		    	  	   sobel_all_partial((void *)image);
    11f8:	a809883a 	mov	r4,r21
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  	   start_all = alt_timestamp();
    11fc:	d0a71215 	stw	r2,-25528(gp)
		    	  	   grayscale = get_grayscale_picture();
		    	  	   sobel_complete_sub(grayscale, 348, 36);
						*/


		    	  	   sobel_all_partial((void *)image);
    1200:	000211c0 	call	211c <sobel_all_partial>
		    	  	   //sobel_all_complete((void *)image);

                       end_all = alt_timestamp();
    1204:	00101c80 	call	101c8 <alt_timestamp>
    1208:	d0a71115 	stw	r2,-25532(gp)

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();
    120c:	00022280 	call	2228 <GetSobelAllResult>
    1210:	102d883a 	mov	r22,r2

		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1214:	00005a80 	call	5a8 <cam_get_xsize>
    1218:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    121c:	00005cc0 	call	5cc <cam_get_ysize>
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1220:	a97fffcc 	andi	r5,r21,65535
    1224:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1228:	84003fcc 	andi	r16,r16,255
    122c:	8400201c 	xori	r16,r16,128
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1230:	01c00044 	movi	r7,1
    1234:	11bfffcc 	andi	r6,r2,65535
    1238:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    123c:	843fe004 	addi	r16,r16,-128
                       end_all = alt_timestamp();

                       //grayscale=GetSobelResult();
                       grayscale=GetSobelAllResult();

		               transfer_LCD_with_dma(&grayscale[16520],
    1240:	0000f180 	call	f18 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1244:	803fc20e 	bge	r16,zero,1150 <__alt_data_end+0xff001150>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1248:	01000604 	movi	r4,24
    124c:	00022400 	call	2240 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1250:	b009883a 	mov	r4,r22
    1254:	00022300 	call	2230 <vga_set_pointer>
    1258:	003fbd06 	br	1150 <__alt_data_end+0xff001150>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    125c:	01000204 	movi	r4,8
    1260:	00022400 	call	2240 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1264:	a809883a 	mov	r4,r21
    1268:	00022300 	call	2230 <vga_set_pointer>
    126c:	003fb806 	br	1150 <__alt_data_end+0xff001150>

00001270 <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1270:	defffd04 	addi	sp,sp,-12
    1274:	dc000015 	stw	r16,0(sp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1278:	2161383a 	mul	r16,r4,r5
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    127c:	2007883a 	mov	r3,r4
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1280:	01000074 	movhi	r4,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1284:	2805883a 	mov	r2,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    1288:	21069d04 	addi	r4,r4,6772
    128c:	280d883a 	mov	r6,r5
    1290:	800f883a 	mov	r7,r16
    1294:	180b883a 	mov	r5,r3
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1298:	dfc00215 	stw	ra,8(sp)
    129c:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    12a0:	d0e71315 	stw	r3,-25524(gp)
	sobel_height = height;
    12a4:	d0a71515 	stw	r2,-25516(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
    12a8:	000365c0 	call	365c <printf>
	if (sobel_x_result != NULL)
    12ac:	d1271617 	ldw	r4,-25512(gp)
    12b0:	20000126 	beq	r4,zero,12b8 <init_sobel_arrays+0x48>
		free(sobel_x_result);
    12b4:	0002e0c0 	call	2e0c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12b8:	8423883a 	add	r17,r16,r16
    12bc:	8809883a 	mov	r4,r17
    12c0:	0002df80 	call	2df8 <malloc>
	if (sobel_y_result != NULL)
    12c4:	d1271717 	ldw	r4,-25508(gp)
	sobel_width = width;
	sobel_height = height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, width*height);
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12c8:	d0a71615 	stw	r2,-25512(gp)
	if (sobel_y_result != NULL)
    12cc:	20000126 	beq	r4,zero,12d4 <init_sobel_arrays+0x64>
		free(sobel_y_result);
    12d0:	0002e0c0 	call	2e0c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12d4:	8809883a 	mov	r4,r17
    12d8:	0002df80 	call	2df8 <malloc>
	if (sobel_result != NULL)
    12dc:	d1271417 	ldw	r4,-25520(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12e0:	d0a71715 	stw	r2,-25508(gp)
	if (sobel_result != NULL)
    12e4:	20000126 	beq	r4,zero,12ec <init_sobel_arrays+0x7c>
		free(sobel_result);
    12e8:	0002e0c0 	call	2e0c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12ec:	8009883a 	mov	r4,r16
    12f0:	0002df80 	call	2df8 <malloc>
	if (sobel_rgb565 != NULL)
    12f4:	d1271817 	ldw	r4,-25504(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12f8:	d0a71415 	stw	r2,-25520(gp)
	if (sobel_rgb565 != NULL)
    12fc:	20000126 	beq	r4,zero,1304 <init_sobel_arrays+0x94>
		free(sobel_rgb565);
    1300:	0002e0c0 	call	2e0c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1304:	8809883a 	mov	r4,r17
    1308:	0002df80 	call	2df8 <malloc>
    130c:	d0a71815 	stw	r2,-25504(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1310:	0005883a 	mov	r2,zero
    1314:	04000f0e 	bge	zero,r16,1354 <init_sobel_arrays+0xe4>
		sobel_x_result[loop] = 0;
    1318:	d1a71617 	ldw	r6,-25512(gp)
		sobel_y_result[loop] = 0;
    131c:	d1671717 	ldw	r5,-25508(gp)
		sobel_result[loop] = 0;
    1320:	d1271417 	ldw	r4,-25520(gp)
    1324:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1328:	30cd883a 	add	r6,r6,r3
    132c:	3000000d 	sth	zero,0(r6)
		sobel_y_result[loop] = 0;
    1330:	28cb883a 	add	r5,r5,r3
		sobel_result[loop] = 0;
    1334:	2089883a 	add	r4,r4,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1338:	2800000d 	sth	zero,0(r5)
		sobel_result[loop] = 0;
    133c:	20000005 	stb	zero,0(r4)
		sobel_rgb565[loop] = 0;
    1340:	d1271817 	ldw	r4,-25504(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1344:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1348:	20c7883a 	add	r3,r4,r3
    134c:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1350:	80bff11e 	bne	r16,r2,1318 <__alt_data_end+0xff001318>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1354:	dfc00217 	ldw	ra,8(sp)
    1358:	dc400117 	ldw	r17,4(sp)
    135c:	dc000017 	ldw	r16,0(sp)
    1360:	dec00304 	addi	sp,sp,12
    1364:	f800283a 	ret

00001368 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1368:	da800017 	ldw	r10,0(sp)
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    136c:	31bfffc4 	addi	r6,r6,-1
    1370:	38c00047 	ldb	r3,1(r7)
    1374:	328d383a 	mul	r6,r6,r10
    1378:	3b8000c7 	ldb	r14,3(r7)
    137c:	3a000107 	ldb	r8,4(r7)
	         	filter[1] * pixels[(y-1)*width+(x)] +
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1380:	5185883a 	add	r2,r10,r6
    1384:	2893883a 	add	r9,r5,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1388:	314d883a 	add	r6,r6,r5
	         	filter[1] * pixels[(y-1)*width+(x)] +
    138c:	218d883a 	add	r6,r4,r6
				filter[2] * pixels[(y-1)*width+(x+1)] +

				filter[3] * pixels[(y)*width+(x-1)] +
    1390:	2253883a 	add	r9,r4,r9
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1394:	33000003 	ldbu	r12,0(r6)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    1398:	5095883a 	add	r10,r10,r2
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    139c:	48bfffc3 	ldbu	r2,-1(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a0:	5155883a 	add	r10,r10,r5
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13a4:	4ac00003 	ldbu	r11,0(r9)
				filter[3] * pixels[(y)*width+(x-1)] +
			    filter[4] * pixels[(y)*width+(x)] +
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
    13a8:	229b883a 	add	r13,r4,r10
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    13ac:	49000043 	ldbu	r4,1(r9)
    13b0:	3a800147 	ldb	r10,5(r7)
    13b4:	139d383a 	mul	r14,r2,r14
    13b8:	60d9383a 	mul	r12,r12,r3
    13bc:	68800003 	ldbu	r2,0(r13)
    13c0:	38c001c7 	ldb	r3,7(r7)
    13c4:	5a17383a 	mul	r11,r11,r8
    13c8:	33ffffc3 	ldbu	r15,-1(r6)
    13cc:	3a000007 	ldb	r8,0(r7)
    13d0:	2295383a 	mul	r10,r4,r10
    13d4:	31000043 	ldbu	r4,1(r6)
    13d8:	39800087 	ldb	r6,2(r7)
    13dc:	730b883a 	add	r5,r14,r12
    13e0:	10d3383a 	mul	r9,r2,r3
    13e4:	6b3fffc3 	ldbu	r12,-1(r13)
    13e8:	38c00187 	ldb	r3,6(r7)
    13ec:	2acb883a 	add	r5,r5,r11
    13f0:	7a11383a 	mul	r8,r15,r8
    13f4:	6ac00043 	ldbu	r11,1(r13)
    13f8:	39c00207 	ldb	r7,8(r7)
    13fc:	2a8b883a 	add	r5,r5,r10
    1400:	2189383a 	mul	r4,r4,r6
    1404:	2a45883a 	add	r2,r5,r9
    1408:	60c7383a 	mul	r3,r12,r3
    140c:	1205883a 	add	r2,r2,r8
    1410:	59cb383a 	mul	r5,r11,r7
    1414:	1105883a 	add	r2,r2,r4
    1418:	10c5883a 	add	r2,r2,r3
				filter[5] * pixels[(y)*width+(x+1)] +

				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}
    141c:	1145883a 	add	r2,r2,r5
    1420:	f800283a 	ret

00001424 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1424:	defff604 	addi	sp,sp,-40
    1428:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    142c:	d4671517 	ldw	r17,-25516(gp)
				filter[6] * pixels[(y+1)*width+(x-1)] +
			    filter[7] * pixels[(y+1)*width+(x)] +
				filter[8] * pixels[(y+1)*width+(x+1)];
}

void sobel_x( unsigned char *source ) {
    1430:	dfc00915 	stw	ra,36(sp)
    1434:	df000815 	stw	fp,32(sp)
    1438:	ddc00715 	stw	r23,28(sp)
    143c:	dd800615 	stw	r22,24(sp)
    1440:	dd400515 	stw	r21,20(sp)
    1444:	dd000415 	stw	r20,16(sp)
    1448:	dcc00315 	stw	r19,12(sp)
    144c:	dc800215 	stw	r18,8(sp)
    1450:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1454:	8c7fffc4 	addi	r17,r17,-1
    1458:	00800044 	movi	r2,1
    145c:	14402e0e 	bge	r2,r17,1518 <sobel_x+0xf4>
    1460:	d3671317 	ldw	r13,-25524(gp)
    1464:	d3e71617 	ldw	r15,-25512(gp)
    1468:	03800084 	movi	r14,2
    146c:	6b65883a 	add	r18,r13,r13
    1470:	9385883a 	add	r2,r18,r14
    1474:	2359883a 	add	r12,r4,r13
    1478:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    147c:	7027883a 	mov	r19,r14
    1480:	736bc83a 	sub	r21,r14,r13
    1484:	6ba9883a 	add	r20,r13,r14
    1488:	9b402f0e 	bge	r19,r13,1548 <sobel_x+0x124>
    148c:	637f883a 	add	ra,r12,r13
    1490:	7021883a 	mov	r16,r14
    1494:	6357c83a 	sub	r11,r12,r13
    1498:	ab0b883a 	add	r5,r21,r12
    149c:	62800084 	addi	r10,r12,2
    14a0:	f813883a 	mov	r9,ra
    14a4:	a311883a 	add	r8,r20,r12
    14a8:	780f883a 	mov	r7,r15
    14ac:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14b0:	29000003 	ldbu	r4,0(r5)
    14b4:	40c00003 	ldbu	r3,0(r8)
    14b8:	37000003 	ldbu	fp,0(r6)
    14bc:	50800003 	ldbu	r2,0(r10)
    14c0:	20c7883a 	add	r3,r4,r3
    14c4:	5dc00003 	ldbu	r23,0(r11)
    14c8:	1f07c83a 	sub	r3,r3,fp
    14cc:	4d800003 	ldbu	r22,0(r9)
    14d0:	1f09c83a 	sub	r4,r3,fp
    14d4:	1087883a 	add	r3,r2,r2
    14d8:	20c7883a 	add	r3,r4,r3
    14dc:	1dc5c83a 	sub	r2,r3,r23
    14e0:	1585c83a 	sub	r2,r2,r22
    14e4:	3880000d 	sth	r2,0(r7)
    14e8:	29400044 	addi	r5,r5,1
    14ec:	5ac00044 	addi	r11,r11,1
    14f0:	31800044 	addi	r6,r6,1
    14f4:	52800044 	addi	r10,r10,1
    14f8:	4a400044 	addi	r9,r9,1
    14fc:	42000044 	addi	r8,r8,1
    1500:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1504:	617fea1e 	bne	r12,r5,14b0 <__alt_data_end+0xff0014b0>
    1508:	73800044 	addi	r14,r14,1
    150c:	f819883a 	mov	r12,ra
    1510:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1514:	847fdc16 	blt	r16,r17,1488 <__alt_data_end+0xff001488>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1518:	dfc00917 	ldw	ra,36(sp)
    151c:	df000817 	ldw	fp,32(sp)
    1520:	ddc00717 	ldw	r23,28(sp)
    1524:	dd800617 	ldw	r22,24(sp)
    1528:	dd400517 	ldw	r21,20(sp)
    152c:	dd000417 	ldw	r20,16(sp)
    1530:	dcc00317 	ldw	r19,12(sp)
    1534:	dc800217 	ldw	r18,8(sp)
    1538:	dc400117 	ldw	r17,4(sp)
    153c:	dc000017 	ldw	r16,0(sp)
    1540:	dec00a04 	addi	sp,sp,40
    1544:	f800283a 	ret
    1548:	7021883a 	mov	r16,r14
    154c:	637f883a 	add	ra,r12,r13
    1550:	73800044 	addi	r14,r14,1
    1554:	f819883a 	mov	r12,ra
    1558:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    155c:	847fca16 	blt	r16,r17,1488 <__alt_data_end+0xff001488>
    1560:	003fed06 	br	1518 <__alt_data_end+0xff001518>

00001564 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1564:	defff504 	addi	sp,sp,-44
    1568:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    156c:	d5a71517 	ldw	r22,-25516(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1570:	dfc00a15 	stw	ra,40(sp)
    1574:	df000915 	stw	fp,36(sp)
    1578:	ddc00815 	stw	r23,32(sp)
    157c:	dd400615 	stw	r21,24(sp)
    1580:	dd000515 	stw	r20,20(sp)
    1584:	dcc00415 	stw	r19,16(sp)
    1588:	dc800315 	stw	r18,12(sp)
    158c:	dc400215 	stw	r17,8(sp)
    1590:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1594:	b5bfffc4 	addi	r22,r22,-1
    1598:	00800044 	movi	r2,1
    159c:	1580440e 	bge	r2,r22,16b0 <sobel_x_with_rgb+0x14c>
    15a0:	d7e71317 	ldw	ra,-25524(gp)
    15a4:	d4a71617 	ldw	r18,-25512(gp)
    15a8:	d4671817 	ldw	r17,-25504(gp)
    15ac:	ffe9883a 	add	r20,ra,ra
    15b0:	a0800084 	addi	r2,r20,2
    15b4:	04000084 	movi	r16,2
    15b8:	90a5883a 	add	r18,r18,r2
    15bc:	88a3883a 	add	r17,r17,r2
    15c0:	fc05883a 	add	r2,ra,r16
    15c4:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15c8:	802f883a 	mov	r23,r16
    15cc:	87f9c83a 	sub	fp,r16,ra
    15d0:	d8800015 	stw	r2,0(sp)
    15d4:	bfc02f0e 	bge	r23,ra,1694 <sobel_x_with_rgb+0x130>
    15d8:	d8800017 	ldw	r2,0(sp)
    15dc:	7fe7883a 	add	r19,r15,ra
    15e0:	802b883a 	mov	r21,r16
    15e4:	7fdbc83a 	sub	r13,r15,ra
    15e8:	e3cf883a 	add	r7,fp,r15
    15ec:	7b000084 	addi	r12,r15,2
    15f0:	9817883a 	mov	r11,r19
    15f4:	13d5883a 	add	r10,r2,r15
    15f8:	881d883a 	mov	r14,r17
    15fc:	9013883a 	mov	r9,r18
    1600:	7811883a 	mov	r8,r15
    1604:	00000b06 	br	1634 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1608:	180692fa 	slli	r3,r3,11
    160c:	70c0000d 	sth	r3,0(r14)
    1610:	39c00044 	addi	r7,r7,1
    1614:	6b400044 	addi	r13,r13,1
    1618:	42000044 	addi	r8,r8,1
    161c:	63000044 	addi	r12,r12,1
    1620:	5ac00044 	addi	r11,r11,1
    1624:	52800044 	addi	r10,r10,1
    1628:	4a400084 	addi	r9,r9,2
    162c:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1630:	79c01a26 	beq	r15,r7,169c <sobel_x_with_rgb+0x138>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    1634:	50800003 	ldbu	r2,0(r10)
    1638:	39400003 	ldbu	r5,0(r7)
    163c:	41800003 	ldbu	r6,0(r8)
    1640:	60c00003 	ldbu	r3,0(r12)
    1644:	288b883a 	add	r5,r5,r2
    1648:	298bc83a 	sub	r5,r5,r6
    164c:	68800003 	ldbu	r2,0(r13)
    1650:	59000003 	ldbu	r4,0(r11)
    1654:	298bc83a 	sub	r5,r5,r6
    1658:	18c7883a 	add	r3,r3,r3
    165c:	28c7883a 	add	r3,r5,r3
    1660:	1887c83a 	sub	r3,r3,r2
    1664:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1668:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    166c:	10bfffcc 	andi	r2,r2,65535
    1670:	10a0001c 	xori	r2,r2,32768
    1674:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1678:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    167c:	103fe20e 	bge	r2,zero,1608 <__alt_data_end+0xff001608>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1680:	0085c83a 	sub	r2,zero,r2
    1684:	1005d0ba 	srai	r2,r2,2
    1688:	1004917a 	slli	r2,r2,5
    168c:	7080000d 	sth	r2,0(r14)
    1690:	003fdf06 	br	1610 <__alt_data_end+0xff001610>
    1694:	802b883a 	mov	r21,r16
    1698:	7fe7883a 	add	r19,r15,ra
    169c:	84000044 	addi	r16,r16,1
    16a0:	981f883a 	mov	r15,r19
    16a4:	9525883a 	add	r18,r18,r20
    16a8:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16ac:	adbfc916 	blt	r21,r22,15d4 <__alt_data_end+0xff0015d4>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16b0:	dfc00a17 	ldw	ra,40(sp)
    16b4:	df000917 	ldw	fp,36(sp)
    16b8:	ddc00817 	ldw	r23,32(sp)
    16bc:	dd800717 	ldw	r22,28(sp)
    16c0:	dd400617 	ldw	r21,24(sp)
    16c4:	dd000517 	ldw	r20,20(sp)
    16c8:	dcc00417 	ldw	r19,16(sp)
    16cc:	dc800317 	ldw	r18,12(sp)
    16d0:	dc400217 	ldw	r17,8(sp)
    16d4:	dc000117 	ldw	r16,4(sp)
    16d8:	dec00b04 	addi	sp,sp,44
    16dc:	f800283a 	ret

000016e0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    16e0:	defff704 	addi	sp,sp,-36
    16e4:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16e8:	d4671517 	ldw	r17,-25516(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    16ec:	dfc00815 	stw	ra,32(sp)
    16f0:	ddc00715 	stw	r23,28(sp)
    16f4:	dd800615 	stw	r22,24(sp)
    16f8:	dd400515 	stw	r21,20(sp)
    16fc:	dd000415 	stw	r20,16(sp)
    1700:	dcc00315 	stw	r19,12(sp)
    1704:	dc800215 	stw	r18,8(sp)
    1708:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    170c:	8c7fffc4 	addi	r17,r17,-1
    1710:	00800044 	movi	r2,1
    1714:	14402d0e 	bge	r2,r17,17cc <sobel_y+0xec>
    1718:	d3e71317 	ldw	r15,-25524(gp)
    171c:	d3a71717 	ldw	r14,-25508(gp)
    1720:	03400084 	movi	r13,2
    1724:	7bff883a 	add	ra,r15,r15
    1728:	fb67883a 	add	r19,ra,r13
    172c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1730:	6825883a 	mov	r18,r13
    1734:	f8a9883a 	add	r20,ra,r2
    1738:	6821883a 	mov	r16,r13
    173c:	93c01f0e 	bge	r18,r15,17bc <sobel_y+0xdc>
    1740:	27cd883a 	add	r6,r4,ra
    1744:	6821883a 	mov	r16,r13
    1748:	22c00044 	addi	r11,r4,1
    174c:	22800084 	addi	r10,r4,2
    1750:	a113883a 	add	r9,r20,r4
    1754:	990b883a 	add	r5,r19,r4
    1758:	7999883a 	add	r12,r15,r6
    175c:	7011883a 	mov	r8,r14
    1760:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1764:	3d800003 	ldbu	r22,0(r7)
    1768:	50c00003 	ldbu	r3,0(r10)
    176c:	58800003 	ldbu	r2,0(r11)
    1770:	4d400003 	ldbu	r21,0(r9)
    1774:	b0c7883a 	add	r3,r22,r3
    1778:	1085883a 	add	r2,r2,r2
    177c:	35c00003 	ldbu	r23,0(r6)
    1780:	1887883a 	add	r3,r3,r2
    1784:	2d800003 	ldbu	r22,0(r5)
    1788:	1d47c83a 	sub	r3,r3,r21
    178c:	1d47c83a 	sub	r3,r3,r21
    1790:	1dc5c83a 	sub	r2,r3,r23
    1794:	1585c83a 	sub	r2,r2,r22
    1798:	4080000d 	sth	r2,0(r8)
    179c:	29400044 	addi	r5,r5,1
    17a0:	39c00044 	addi	r7,r7,1
    17a4:	5ac00044 	addi	r11,r11,1
    17a8:	52800044 	addi	r10,r10,1
    17ac:	4a400044 	addi	r9,r9,1
    17b0:	31800044 	addi	r6,r6,1
    17b4:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17b8:	617fea1e 	bne	r12,r5,1764 <__alt_data_end+0xff001764>
    17bc:	6b400044 	addi	r13,r13,1
    17c0:	23c9883a 	add	r4,r4,r15
    17c4:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17c8:	847fdb16 	blt	r16,r17,1738 <__alt_data_end+0xff001738>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    17cc:	dfc00817 	ldw	ra,32(sp)
    17d0:	ddc00717 	ldw	r23,28(sp)
    17d4:	dd800617 	ldw	r22,24(sp)
    17d8:	dd400517 	ldw	r21,20(sp)
    17dc:	dd000417 	ldw	r20,16(sp)
    17e0:	dcc00317 	ldw	r19,12(sp)
    17e4:	dc800217 	ldw	r18,8(sp)
    17e8:	dc400117 	ldw	r17,4(sp)
    17ec:	dc000017 	ldw	r16,0(sp)
    17f0:	dec00904 	addi	sp,sp,36
    17f4:	f800283a 	ret

000017f8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    17f8:	defff604 	addi	sp,sp,-40
    17fc:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1800:	d4e71517 	ldw	r19,-25516(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1804:	dfc00915 	stw	ra,36(sp)
    1808:	df000815 	stw	fp,32(sp)
    180c:	ddc00715 	stw	r23,28(sp)
    1810:	dd800615 	stw	r22,24(sp)
    1814:	dd400515 	stw	r21,20(sp)
    1818:	dd000415 	stw	r20,16(sp)
    181c:	dc800215 	stw	r18,8(sp)
    1820:	dc400115 	stw	r17,4(sp)
    1824:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1828:	9cffffc4 	addi	r19,r19,-1
    182c:	00800044 	movi	r2,1
    1830:	14c03f0e 	bge	r2,r19,1930 <sobel_y_with_rgb+0x138>
    1834:	d4671317 	ldw	r17,-25524(gp)
    1838:	d4271717 	ldw	r16,-25508(gp)
    183c:	d7e71817 	ldw	ra,-25504(gp)
    1840:	8c5d883a 	add	r14,r17,r17
    1844:	75000084 	addi	r20,r14,2
    1848:	03c00084 	movi	r15,2
    184c:	8521883a 	add	r16,r16,r20
    1850:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1854:	782b883a 	mov	r21,r15
    1858:	70ad883a 	add	r22,r14,r2
    185c:	7825883a 	mov	r18,r15
    1860:	ac402e0e 	bge	r21,r17,191c <sobel_y_with_rgb+0x124>
    1864:	238d883a 	add	r6,r4,r14
    1868:	7825883a 	mov	r18,r15
    186c:	22c00044 	addi	r11,r4,1
    1870:	22800084 	addi	r10,r4,2
    1874:	b113883a 	add	r9,r22,r4
    1878:	a10b883a 	add	r5,r20,r4
    187c:	899b883a 	add	r13,r17,r6
    1880:	f819883a 	mov	r12,ra
    1884:	8011883a 	mov	r8,r16
    1888:	200f883a 	mov	r7,r4
    188c:	00000b06 	br	18bc <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1890:	180692fa 	slli	r3,r3,11
    1894:	60c0000d 	sth	r3,0(r12)
    1898:	29400044 	addi	r5,r5,1
    189c:	39c00044 	addi	r7,r7,1
    18a0:	5ac00044 	addi	r11,r11,1
    18a4:	52800044 	addi	r10,r10,1
    18a8:	4a400044 	addi	r9,r9,1
    18ac:	31800044 	addi	r6,r6,1
    18b0:	42000084 	addi	r8,r8,2
    18b4:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18b8:	69401826 	beq	r13,r5,191c <sobel_y_with_rgb+0x124>
short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
	return		filter[0] * pixels[(y-1)*width+(x-1)] +
    18bc:	50800003 	ldbu	r2,0(r10)
    18c0:	3f000003 	ldbu	fp,0(r7)
    18c4:	58c00003 	ldbu	r3,0(r11)
    18c8:	4dc00003 	ldbu	r23,0(r9)
    18cc:	e0b9883a 	add	fp,fp,r2
    18d0:	18c7883a 	add	r3,r3,r3
    18d4:	30800003 	ldbu	r2,0(r6)
    18d8:	e0c7883a 	add	r3,fp,r3
    18dc:	1dc7c83a 	sub	r3,r3,r23
    18e0:	2f000003 	ldbu	fp,0(r5)
    18e4:	1dc7c83a 	sub	r3,r3,r23
    18e8:	1885c83a 	sub	r2,r3,r2
    18ec:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    18f0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    18f4:	10bfffcc 	andi	r2,r2,65535
    18f8:	10a0001c 	xori	r2,r2,32768
    18fc:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1900:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1904:	103fe20e 	bge	r2,zero,1890 <__alt_data_end+0xff001890>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1908:	0085c83a 	sub	r2,zero,r2
    190c:	1005d0ba 	srai	r2,r2,2
    1910:	1004917a 	slli	r2,r2,5
    1914:	6080000d 	sth	r2,0(r12)
    1918:	003fdf06 	br	1898 <__alt_data_end+0xff001898>
    191c:	7bc00044 	addi	r15,r15,1
    1920:	2449883a 	add	r4,r4,r17
    1924:	83a1883a 	add	r16,r16,r14
    1928:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    192c:	94ffcb16 	blt	r18,r19,185c <__alt_data_end+0xff00185c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1930:	dfc00917 	ldw	ra,36(sp)
    1934:	df000817 	ldw	fp,32(sp)
    1938:	ddc00717 	ldw	r23,28(sp)
    193c:	dd800617 	ldw	r22,24(sp)
    1940:	dd400517 	ldw	r21,20(sp)
    1944:	dd000417 	ldw	r20,16(sp)
    1948:	dcc00317 	ldw	r19,12(sp)
    194c:	dc800217 	ldw	r18,8(sp)
    1950:	dc400117 	ldw	r17,4(sp)
    1954:	dc000017 	ldw	r16,0(sp)
    1958:	dec00a04 	addi	sp,sp,40
    195c:	f800283a 	ret

00001960 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1960:	d0a71517 	ldw	r2,-25516(gp)
    1964:	02400084 	movi	r9,2
    1968:	4880290e 	bge	r9,r2,1a10 <sobel_threshold+0xb0>
    196c:	223fffcc 	andi	r8,r4,65535
    1970:	d0e71317 	ldw	r3,-25524(gp)
    1974:	4220001c 	xori	r8,r8,32768
    1978:	01c00044 	movi	r7,1
    197c:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1980:	48c0200e 	bge	r9,r3,1a04 <sobel_threshold+0xa4>
    1984:	01400044 	movi	r5,1
    1988:	00000c06 	br	19bc <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    198c:	2080000f 	ldh	r2,0(r4)
    1990:	10001916 	blt	r2,zero,19f8 <sobel_threshold+0x98>
    1994:	3085883a 	add	r2,r6,r2
    1998:	10bfffcc 	andi	r2,r2,65535
    199c:	10a0001c 	xori	r2,r2,32768
    19a0:	10a00004 	addi	r2,r2,-32768
    19a4:	4084803a 	cmplt	r2,r8,r2
    19a8:	0085c83a 	sub	r2,zero,r2
    19ac:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19b0:	d0e71317 	ldw	r3,-25524(gp)
    19b4:	18bfffc4 	addi	r2,r3,-1
    19b8:	2880110e 	bge	r5,r2,1a00 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19bc:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19c0:	d1a71717 	ldw	r6,-25508(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19c4:	d1271617 	ldw	r4,-25512(gp)
    19c8:	1947883a 	add	r3,r3,r5
    19cc:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    19d0:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    19d4:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19d8:	3180000f 	ldh	r6,0(r6)
    19dc:	d0a71417 	ldw	r2,-25520(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19e0:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19e4:	10c7883a 	add	r3,r2,r3
    19e8:	303fe80e 	bge	r6,zero,198c <__alt_data_end+0xff00198c>
    19ec:	2080000f 	ldh	r2,0(r4)
    19f0:	018dc83a 	sub	r6,zero,r6
    19f4:	103fe70e 	bge	r2,zero,1994 <__alt_data_end+0xff001994>
    19f8:	0085c83a 	sub	r2,zero,r2
    19fc:	003fe506 	br	1994 <__alt_data_end+0xff001994>
    1a00:	d0a71517 	ldw	r2,-25516(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a04:	39c00044 	addi	r7,r7,1
    1a08:	113fffc4 	addi	r4,r2,-1
    1a0c:	393fdc16 	blt	r7,r4,1980 <__alt_data_end+0xff001980>
    1a10:	f800283a 	ret

00001a14 <sobel_complete>:
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a14:	d0e71517 	ldw	r3,-25516(gp)
    1a18:	02000084 	movi	r8,2
    1a1c:	40c05a0e 	bge	r8,r3,1b88 <sobel_complete+0x174>
    1a20:	d3a71317 	ldw	r14,-25524(gp)
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
void sobel_complete(unsigned char *source, short threshold){
    1a24:	defffa04 	addi	sp,sp,-24
    1a28:	dfc00515 	stw	ra,20(sp)
    1a2c:	dd000415 	stw	r20,16(sp)
    1a30:	dcc00315 	stw	r19,12(sp)
    1a34:	dc800215 	stw	r18,8(sp)
    1a38:	dc400115 	stw	r17,4(sp)
    1a3c:	dc000015 	stw	r16,0(sp)
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a40:	401b883a 	mov	r13,r8
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a44:	02c02004 	movi	r11,128
    1a48:	427fffc4 	addi	r9,r8,-1
    1a4c:	4019883a 	mov	r12,r8
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a50:	6b80430e 	bge	r13,r14,1b60 <sobel_complete+0x14c>
    1a54:	42bfff84 	addi	r10,r8,-2
    1a58:	4019883a 	mov	r12,r8
    1a5c:	01800044 	movi	r6,1
    1a60:	00000606 	br	1a7c <sobel_complete+0x68>
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1a64:	00803fc4 	movi	r2,255
    1a68:	70800025 	stbio	r2,0(r14)
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a6c:	d3a71317 	ldw	r14,-25524(gp)
    1a70:	380d883a 	mov	r6,r7
    1a74:	70bfffc4 	addi	r2,r14,-1
    1a78:	3880380e 	bge	r7,r2,1b5c <sobel_complete+0x148>
			a = source[(y-1)*sobel_width+(x-1)];
    1a7c:	7287383a 	mul	r3,r14,r10
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1a80:	7205383a 	mul	r2,r14,r8
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
    1a84:	31c00044 	addi	r7,r6,1
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
    1a88:	20c7883a 	add	r3,r4,r3
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
    1a8c:	199f883a 	add	r15,r3,r6
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
    1a90:	21ff883a 	add	ra,r4,r7
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1a94:	20a9883a 	add	r20,r4,r2
			d = source[(y+1)*sobel_width+(x+1)];
    1a98:	f88b883a 	add	r5,ra,r2
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1a9c:	78800003 	ldbu	r2,0(r15)
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
    1aa0:	a1a1883a 	add	r16,r20,r6
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
    1aa4:	19e3883a 	add	r17,r3,r7
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1aa8:	29400003 	ldbu	r5,0(r5)
    1aac:	33ffffc4 	addi	r15,r6,-1
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ab0:	84c00003 	ldbu	r19,0(r16)
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1ab4:	8c400003 	ldbu	r17,0(r17)
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
    1ab8:	1be1883a 	add	r16,r3,r15
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1abc:	1087883a 	add	r3,r2,r2
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1ac0:	84800003 	ldbu	r18,0(r16)
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
    1ac4:	a3e9883a 	add	r20,r20,r15
			d = source[(y+1)*sobel_width+(x+1)];
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ac8:	1947c83a 	sub	r3,r3,r5
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			a = source[(y-1)*sobel_width+(x-1)];
			b = source[(y-1)*sobel_width+(x+1)];
			c = source[(y+1)*sobel_width+(x-1)];
			d = source[(y+1)*sobel_width+(x+1)];
			value =
    1acc:	a4000003 	ldbu	r16,0(r20)
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
    1ad0:	1c47883a 	add	r3,r3,r17
    1ad4:	9cc5883a 	add	r2,r19,r19
    1ad8:	1885c83a 	sub	r2,r3,r2
    1adc:	1485883a 	add	r2,r2,r18
    1ae0:	1405c83a 	sub	r2,r2,r16
    1ae4:	10bfffcc 	andi	r2,r2,65535
    1ae8:	10a0001c 	xori	r2,r2,32768
    1aec:	10a00004 	addi	r2,r2,-32768
    1af0:	1005c072 	custom	1,r2,r2,zero
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
					2 * source[(y)*sobel_width+(x+1)] - c + d;
    1af4:	4b9d383a 	mul	r14,r9,r14
			sum += ALT_CI_ABSOLUTE_0(value);
    1af8:	894b883a 	add	r5,r17,r5
    1afc:	2c8bc83a 	sub	r5,r5,r18
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
    1b00:	2387883a 	add	r3,r4,r14
					2 * source[(y)*sobel_width+(x+1)] - c + d;
    1b04:	fbbf883a 	add	ra,ra,r14
			value =
					a + 2 * source[(y-1)*sobel_width+(x)] +
					b - c - 2 * source[(y+1)*sobel_width+(x)] - d;
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					b - a - 2 * source[(y)*sobel_width+(x-1)] +
    1b08:	1bdf883a 	add	r15,r3,r15
					2 * source[(y)*sobel_width+(x+1)] - c + d;
			sum += ALT_CI_ABSOLUTE_0(value);
    1b0c:	7bc00003 	ldbu	r15,0(r15)
    1b10:	f8c00003 	ldbu	r3,0(ra)
    1b14:	2c0bc83a 	sub	r5,r5,r16
    1b18:	1bc7c83a 	sub	r3,r3,r15
    1b1c:	18c7883a 	add	r3,r3,r3
    1b20:	1947883a 	add	r3,r3,r5
    1b24:	18ffffcc 	andi	r3,r3,65535
    1b28:	18e0001c 	xori	r3,r3,32768
    1b2c:	18e00004 	addi	r3,r3,-32768
    1b30:	1807c072 	custom	1,r3,r3,zero
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1b34:	1885883a 	add	r2,r3,r2
    1b38:	719d883a 	add	r14,r14,r6
    1b3c:	10bfffcc 	andi	r2,r2,65535
    1b40:	d1a71417 	ldw	r6,-25520(gp)
    1b44:	10a0001c 	xori	r2,r2,32768
    1b48:	10a00004 	addi	r2,r2,-32768
    1b4c:	339d883a 	add	r14,r6,r14
    1b50:	58bfc416 	blt	r11,r2,1a64 <__alt_data_end+0xff001a64>
    1b54:	0005883a 	mov	r2,zero
    1b58:	003fc306 	br	1a68 <__alt_data_end+0xff001a68>
    1b5c:	d0e71517 	ldw	r3,-25516(gp)
}
void sobel_complete(unsigned char *source, short threshold){
	int x,y;
	int a,b,c,d;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b60:	18bfffc4 	addi	r2,r3,-1
    1b64:	42000044 	addi	r8,r8,1
    1b68:	60bfb716 	blt	r12,r2,1a48 <__alt_data_end+0xff001a48>
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1b6c:	dfc00517 	ldw	ra,20(sp)
    1b70:	dd000417 	ldw	r20,16(sp)
    1b74:	dcc00317 	ldw	r19,12(sp)
    1b78:	dc800217 	ldw	r18,8(sp)
    1b7c:	dc400117 	ldw	r17,4(sp)
    1b80:	dc000017 	ldw	r16,0(sp)
    1b84:	dec00604 	addi	sp,sp,24
    1b88:	f800283a 	ret

00001b8c <sobel_complete_sub>:

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
    1b8c:	298d883a 	add	r6,r5,r6
    1b90:	33bfffc4 	addi	r14,r6,-1
    1b94:	28800044 	addi	r2,r5,1
    1b98:	1380600e 	bge	r2,r14,1d1c <sobel_complete_sub+0x190>
    1b9c:	d0e71317 	ldw	r3,-25524(gp)
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}

void sobel_complete_sub(unsigned char *source, int from, int size){
    1ba0:	defff804 	addi	sp,sp,-32
    1ba4:	dfc00715 	stw	ra,28(sp)
    1ba8:	dd800615 	stw	r22,24(sp)
    1bac:	dd400515 	stw	r21,20(sp)
    1bb0:	dd000415 	stw	r20,16(sp)
    1bb4:	dcc00315 	stw	r19,12(sp)
    1bb8:	dc800215 	stw	r18,8(sp)
    1bbc:	dc400115 	stw	r17,4(sp)
    1bc0:	dc000015 	stw	r16,0(sp)
    1bc4:	2a400084 	addi	r9,r5,2
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bc8:	03c00084 	movi	r15,2
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1bcc:	03002004 	movi	r12,128
    1bd0:	4abfffc4 	addi	r10,r9,-1
    1bd4:	481b883a 	mov	r13,r9

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bd8:	78c0450e 	bge	r15,r3,1cf0 <sobel_complete_sub+0x164>
    1bdc:	4affff84 	addi	r11,r9,-2
    1be0:	481b883a 	mov	r13,r9
    1be4:	01c00044 	movi	r7,1
    1be8:	00000606 	br	1c04 <sobel_complete_sub+0x78>
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1bec:	00803fc4 	movi	r2,255
    1bf0:	18800025 	stbio	r2,0(r3)

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bf4:	d0e71317 	ldw	r3,-25524(gp)
    1bf8:	400f883a 	mov	r7,r8
    1bfc:	18bfffc4 	addi	r2,r3,-1
    1c00:	40803b0e 	bge	r8,r2,1cf0 <sobel_complete_sub+0x164>
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1c04:	1acb383a 	mul	r5,r3,r11
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1c08:	1a67383a 	mul	r19,r3,r9
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c0c:	3a000044 	addi	r8,r7,1
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1c10:	2165883a 	add	r18,r4,r5
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1c14:	24eb883a 	add	r21,r4,r19
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
    1c18:	91c5883a 	add	r2,r18,r7
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c1c:	11800003 	ldbu	r6,0(r2)
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
    1c20:	a9c5883a 	add	r2,r21,r7
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c24:	15800003 	ldbu	r22,0(r2)
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1c28:	2223883a 	add	r17,r4,r8
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c2c:	9205883a 	add	r2,r18,r8
    1c30:	3d3fffc4 	addi	r20,r7,-1
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c34:	31a1883a 	add	r16,r6,r6
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
    1c38:	8ce7883a 	add	r19,r17,r19
			sum = ALT_CI_ABSOLUTE_0(value);
    1c3c:	11800003 	ldbu	r6,0(r2)
    1c40:	9fc00003 	ldbu	ra,0(r19)
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
    1c44:	9525883a 	add	r18,r18,r20
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c48:	8585c83a 	sub	r2,r16,r22
    1c4c:	94c00003 	ldbu	r19,0(r18)
    1c50:	1585c83a 	sub	r2,r2,r22
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			value =
					1 * source[(y-1)*sobel_width+(x-1)] +
					2 * source[(y-1)*sobel_width+(x)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-1 * source[(y+1)*sobel_width+(x-1)] +
    1c54:	ad2b883a 	add	r21,r21,r20
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
    1c58:	1185883a 	add	r2,r2,r6
    1c5c:	ac800003 	ldbu	r18,0(r21)
    1c60:	17c5c83a 	sub	r2,r2,ra
    1c64:	14c5883a 	add	r2,r2,r19
    1c68:	1485c83a 	sub	r2,r2,r18
    1c6c:	10bfffcc 	andi	r2,r2,65535
    1c70:	10a0001c 	xori	r2,r2,32768
    1c74:	10a00004 	addi	r2,r2,-32768
    1c78:	1005c072 	custom	1,r2,r2,zero
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1c7c:	1a87383a 	mul	r3,r3,r10
					-2 * source[(y+1)*sobel_width+(x)] +
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
    1c80:	894b883a 	add	r5,r17,r5
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c84:	2c000003 	ldbu	r16,0(r5)
					-1 * source[(y+1)*sobel_width+(x+1)];
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
    1c88:	20cb883a 	add	r5,r4,r3
    1c8c:	2d29883a 	add	r20,r5,r20
					2 * source[(y)*sobel_width+(x+1)]   +
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c90:	a1400003 	ldbu	r5,0(r20)
			sum = ALT_CI_ABSOLUTE_0(value);
			value =
					-1 * source[(y-1)*sobel_width+(x-1)] +
					1 * source[(y-1)*sobel_width+(x+1)] +
					-2 * source[(y)*sobel_width+(x-1)]   +
					2 * source[(y)*sobel_width+(x+1)]   +
    1c94:	88e3883a 	add	r17,r17,r3
					-1 * source[(y+1)*sobel_width+(x-1)] +
					1 * source[(y+1)*sobel_width+(x+1)];
			sum += ALT_CI_ABSOLUTE_0(value);
    1c98:	89800003 	ldbu	r6,0(r17)
    1c9c:	295fffe4 	muli	r5,r5,32767
    1ca0:	87e1883a 	add	r16,r16,ra
    1ca4:	84ffc83a 	sub	ra,r16,r19
    1ca8:	298b883a 	add	r5,r5,r6
    1cac:	fcbfc83a 	sub	ra,ra,r18
    1cb0:	294b883a 	add	r5,r5,r5
    1cb4:	f94b883a 	add	r5,ra,r5
    1cb8:	297fffcc 	andi	r5,r5,65535
    1cbc:	2960001c 	xori	r5,r5,32768
    1cc0:	29600004 	addi	r5,r5,-32768
    1cc4:	280bc072 	custom	1,r5,r5,zero
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
    1cc8:	2885883a 	add	r2,r5,r2
    1ccc:	19c7883a 	add	r3,r3,r7
    1cd0:	10bfffcc 	andi	r2,r2,65535
    1cd4:	d1e71417 	ldw	r7,-25520(gp)
    1cd8:	10a0001c 	xori	r2,r2,32768
    1cdc:	10a00004 	addi	r2,r2,-32768
    1ce0:	38c7883a 	add	r3,r7,r3
    1ce4:	60bfc116 	blt	r12,r2,1bec <__alt_data_end+0xff001bec>
    1ce8:	0005883a 	mov	r2,zero
    1cec:	003fc006 	br	1bf0 <__alt_data_end+0xff001bf0>
    1cf0:	4a400044 	addi	r9,r9,1
}

void sobel_complete_sub(unsigned char *source, int from, int size){
	int x,y;
	short sum,value;
	for (y = from+1 ; y < (from+size-1) ; y++) {
    1cf4:	6bbfb616 	blt	r13,r14,1bd0 <__alt_data_end+0xff001bd0>
			sum += ALT_CI_ABSOLUTE_0(value);
			//sobel_result[(y*sobel_width)+x] = (sum > 128) ? 0xFF : 0;
			IOWR_8DIRECT(sobel_result,(y*sobel_width)+x,(sum > 128) ? 0xFF : 0);
		}
	}
}
    1cf8:	dfc00717 	ldw	ra,28(sp)
    1cfc:	dd800617 	ldw	r22,24(sp)
    1d00:	dd400517 	ldw	r21,20(sp)
    1d04:	dd000417 	ldw	r20,16(sp)
    1d08:	dcc00317 	ldw	r19,12(sp)
    1d0c:	dc800217 	ldw	r18,8(sp)
    1d10:	dc400117 	ldw	r17,4(sp)
    1d14:	dc000017 	ldw	r16,0(sp)
    1d18:	dec00804 	addi	sp,sp,32
    1d1c:	f800283a 	ret

00001d20 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d20:	d0a71817 	ldw	r2,-25504(gp)
    1d24:	f800283a 	ret

00001d28 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d28:	d0a71417 	ldw	r2,-25520(gp)
    1d2c:	f800283a 	ret

00001d30 <sobel_all_init>:
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d30:	defffe04 	addi	sp,sp,-8
    1d34:	dc000015 	stw	r16,0(sp)
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
    1d38:	2161383a 	mul	r16,r4,r5
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d3c:	2007883a 	mov	r3,r4
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d40:	01000074 	movhi	r4,1
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d44:	2805883a 	mov	r2,r5
	int loop = 0;
	array_width = width;
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d48:	21069d04 	addi	r4,r4,6772
    1d4c:	280d883a 	mov	r6,r5
    1d50:	800f883a 	mov	r7,r16
    1d54:	180b883a 	mov	r5,r3
alt_u32 start_sobel = 0;
alt_u32 end_sobel = 0;
alt_u32 start_conv_grayscale = 0;
alt_u32 end_conv_grayscale = 0;

void sobel_all_init(int width, int height){
    1d58:	dfc00115 	stw	ra,4(sp)
	int loop = 0;
	array_width = width;
    1d5c:	d0e71f15 	stw	r3,-25476(gp)
	array_height = height;
    1d60:	d0a71e15 	stw	r2,-25480(gp)
	size = width*height;
    1d64:	d4271d15 	stw	r16,-25484(gp)
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
    1d68:	000365c0 	call	365c <printf>
	if (grayscale_array != NULL)
    1d6c:	d1270d17 	ldw	r4,-25548(gp)
    1d70:	20000126 	beq	r4,zero,1d78 <sobel_all_init+0x48>
		free(grayscale_array);
    1d74:	0002e0c0 	call	2e0c <free>
	grayscale_array = (unsigned char *) malloc(width* height);
    1d78:	8009883a 	mov	r4,r16
    1d7c:	0002df80 	call	2df8 <malloc>
	if (sobel_result != NULL)
    1d80:	d1271417 	ldw	r4,-25520(gp)
	array_height = height;
	size = width*height;
	printf("Sobel size: %d x %d = %d pixel\n", width, height, size);
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
    1d84:	d0a70d15 	stw	r2,-25548(gp)
	if (sobel_result != NULL)
    1d88:	20000126 	beq	r4,zero,1d90 <sobel_all_init+0x60>
		free(sobel_result);
    1d8c:	0002e0c0 	call	2e0c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1d90:	8009883a 	mov	r4,r16
    1d94:	0002df80 	call	2df8 <malloc>
    1d98:	d0a71415 	stw	r2,-25520(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1d9c:	0400070e 	bge	zero,r16,1dbc <sobel_all_init+0x8c>
    1da0:	0007883a 	mov	r3,zero
    1da4:	00000106 	br	1dac <sobel_all_init+0x7c>
    1da8:	d0a71417 	ldw	r2,-25520(gp)
		sobel_result[loop] = 0;
    1dac:	10c5883a 	add	r2,r2,r3
    1db0:	10000005 	stb	zero,0(r2)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width* height);
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	for (loop = 0 ; loop < width*height ; loop++) {
    1db4:	18c00044 	addi	r3,r3,1
    1db8:	80fffb1e 	bne	r16,r3,1da8 <__alt_data_end+0xff001da8>
		sobel_result[loop] = 0;
	}
}
    1dbc:	dfc00117 	ldw	ra,4(sp)
    1dc0:	dc000017 	ldw	r16,0(sp)
    1dc4:	dec00204 	addi	sp,sp,8
    1dc8:	f800283a 	ret

00001dcc <sobel_all_complete>:

void sobel_all_complete(void *picture){
    1dcc:	defffb04 	addi	sp,sp,-20
    1dd0:	dc000015 	stw	r16,0(sp)
    1dd4:	dfc00415 	stw	ra,16(sp)
    1dd8:	dcc00315 	stw	r19,12(sp)
    1ddc:	dc800215 	stw	r18,8(sp)
    1de0:	dc400115 	stw	r17,4(sp)
    1de4:	2021883a 	mov	r16,r4

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale = alt_timestamp();
    1de8:	00101c80 	call	101c8 <alt_timestamp>
    1dec:	d0a71a15 	stw	r2,-25496(gp)
	for (pos = 0 ; pos < size ; pos++) {
    1df0:	d0a71d17 	ldw	r2,-25484(gp)
    1df4:	00800b0e 	bge	zero,r2,1e24 <sobel_all_complete+0x58>
    1df8:	8009883a 	mov	r4,r16
    1dfc:	0005883a 	mov	r2,zero
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1e00:	d0e70d17 	ldw	r3,-25548(gp)
    1e04:	2140000b 	ldhu	r5,0(r4)
    1e08:	1887883a 	add	r3,r3,r2
    1e0c:	280bc032 	custom	0,r5,r5,zero
    1e10:	19400005 	stb	r5,0(r3)
void sobel_all_complete(void *picture){

	int x,y,pos;
	unsigned short *pixels = (unsigned short *)picture;
	start_conv_grayscale = alt_timestamp();
	for (pos = 0 ; pos < size ; pos++) {
    1e14:	d0e71d17 	ldw	r3,-25484(gp)
    1e18:	10800044 	addi	r2,r2,1
    1e1c:	21000084 	addi	r4,r4,2
    1e20:	10fff716 	blt	r2,r3,1e00 <__alt_data_end+0xff001e00>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
	end_conv_grayscale = alt_timestamp();
    1e24:	00101c80 	call	101c8 <alt_timestamp>
    1e28:	d0a71915 	stw	r2,-25500(gp)

	start_sobel = alt_timestamp();
    1e2c:	00101c80 	call	101c8 <alt_timestamp>
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e30:	d0e71e17 	ldw	r3,-25480(gp)
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
		//IOWR_8DIRECT(grayscale_array,p,ALT_CI_RGB2GRAY_0(pixels[p]));
	}
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
    1e34:	d0a71c15 	stw	r2,-25488(gp)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1e38:	02400084 	movi	r9,2
    1e3c:	48c0410e 	bge	r9,r3,1f44 <sobel_all_complete+0x178>
    1e40:	d1271f17 	ldw	r4,-25476(gp)
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e44:	481d883a 	mov	r14,r9
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e48:	03002004 	movi	r12,128
    1e4c:	4abfffc4 	addi	r10,r9,-1
    1e50:	481b883a 	mov	r13,r9
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1e54:	7100380e 	bge	r14,r4,1f38 <sobel_all_complete+0x16c>
    1e58:	4affff84 	addi	r11,r9,-2
    1e5c:	481b883a 	mov	r13,r9
    1e60:	01400044 	movi	r5,1
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e64:	d1e70d17 	ldw	r7,-25548(gp)
    1e68:	22c7383a 	mul	r3,r4,r11
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e6c:	2265383a 	mul	r18,r4,r9
    1e70:	2bffffc4 	addi	r15,r5,-1

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e74:	38c7883a 	add	r3,r7,r3
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e78:	1945883a 	add	r2,r3,r5
	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e7c:	2a000044 	addi	r8,r5,1

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e80:	1bcd883a 	add	r6,r3,r15
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e84:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e88:	3ca3883a 	add	r17,r7,r18

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
    1e8c:	34000003 	ldbu	r16,0(r6)
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e90:	1a07883a 	add	r3,r3,r8
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1e94:	8967883a 	add	r19,r17,r5
	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
    1e98:	19800003 	ldbu	r6,0(r3)
			c = grayscale_array[(y+1)*array_width+(x-1)];
    1e9c:	8bc7883a 	add	r3,r17,r15
    1ea0:	1fc00003 	ldbu	ra,0(r3)
			d = grayscale_array[(y+1)*array_width+(x+1)];
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ea4:	1087883a 	add	r3,r2,r2
    1ea8:	98800003 	ldbu	r2,0(r19)
    1eac:	1c07883a 	add	r3,r3,r16
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1eb0:	3a23883a 	add	r17,r7,r8
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1eb4:	1987883a 	add	r3,r3,r6
    1eb8:	1fc7c83a 	sub	r3,r3,ra
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1ebc:	8ca5883a 	add	r18,r17,r18
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ec0:	2289383a 	mul	r4,r4,r10
    1ec4:	1085883a 	add	r2,r2,r2
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
			a = grayscale_array[(y-1)*array_width+(x-1)];
			b = grayscale_array[(y-1)*array_width+(x+1)];
			c = grayscale_array[(y+1)*array_width+(x-1)];
			d = grayscale_array[(y+1)*array_width+(x+1)];
    1ec8:	94800003 	ldbu	r18,0(r18)
			IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    1ecc:	1885c83a 	sub	r2,r3,r2
    1ed0:	d0e71417 	ldw	r3,-25520(gp)
    1ed4:	214b883a 	add	r5,r4,r5
    1ed8:	1485c83a 	sub	r2,r2,r18
    1edc:	194b883a 	add	r5,r3,r5
    1ee0:	1005c072 	custom	1,r2,r2,zero
    1ee4:	390f883a 	add	r7,r7,r4
    1ee8:	3bcf883a 	add	r7,r7,r15
    1eec:	38c00003 	ldbu	r3,0(r7)
    1ef0:	8909883a 	add	r4,r17,r4
    1ef4:	21000003 	ldbu	r4,0(r4)
    1ef8:	340dc83a 	sub	r6,r6,r16
    1efc:	18c7883a 	add	r3,r3,r3
    1f00:	30c7c83a 	sub	r3,r6,r3
    1f04:	2109883a 	add	r4,r4,r4
    1f08:	1907883a 	add	r3,r3,r4
    1f0c:	1fc7c83a 	sub	r3,r3,ra
    1f10:	1c87883a 	add	r3,r3,r18
    1f14:	1807c072 	custom	1,r3,r3,zero
    1f18:	10c5883a 	add	r2,r2,r3
    1f1c:	1305c0b2 	custom	2,r2,r2,r12
    1f20:	28800025 	stbio	r2,0(r5)
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    1f24:	d1271f17 	ldw	r4,-25476(gp)
    1f28:	400b883a 	mov	r5,r8
    1f2c:	20bfffc4 	addi	r2,r4,-1
    1f30:	40bfcc16 	blt	r8,r2,1e64 <__alt_data_end+0xff001e64>
    1f34:	d0e71e17 	ldw	r3,-25480(gp)
	}
	end_conv_grayscale = alt_timestamp();

	start_sobel = alt_timestamp();
	int a,b,c,d;
	for (y = 1 ; y < (array_height-1) ; y++) {
    1f38:	18bfffc4 	addi	r2,r3,-1
    1f3c:	4a400044 	addi	r9,r9,1
    1f40:	68bfc216 	blt	r13,r2,1e4c <__alt_data_end+0xff001e4c>
					ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
						2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
					,128));
		}
	}
	end_sobel = alt_timestamp();
    1f44:	00101c80 	call	101c8 <alt_timestamp>
    1f48:	d0a71b15 	stw	r2,-25492(gp)
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
    1f4c:	d1671917 	ldw	r5,-25500(gp)
    1f50:	d0a71a17 	ldw	r2,-25496(gp)
    1f54:	01000074 	movhi	r4,1
    1f58:	2106aa04 	addi	r4,r4,6824
    1f5c:	288bc83a 	sub	r5,r5,r2
    1f60:	000365c0 	call	365c <printf>
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1f64:	d0a71c17 	ldw	r2,-25488(gp)
    1f68:	d1671b17 	ldw	r5,-25492(gp)
    1f6c:	01000074 	movhi	r4,1
    1f70:	2106af04 	addi	r4,r4,6844
    1f74:	288bc83a 	sub	r5,r5,r2
}
    1f78:	dfc00417 	ldw	ra,16(sp)
    1f7c:	dcc00317 	ldw	r19,12(sp)
    1f80:	dc800217 	ldw	r18,8(sp)
    1f84:	dc400117 	ldw	r17,4(sp)
    1f88:	dc000017 	ldw	r16,0(sp)
    1f8c:	dec00504 	addi	sp,sp,20
					,128));
		}
	}
	end_sobel = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
    1f90:	000365c1 	jmpi	365c <printf>

00001f94 <partial>:
	}
	partial(picture, divider * (sub-2), array_height%divider, 0);
}

void partial(void *picture, int from, int lines, int offsetfrom){
	int x,y,pos, f = from*array_width, t = from*array_width+lines*array_width;
    1f94:	d2671f17 	ldw	r9,-25476(gp)
    1f98:	298d883a 	add	r6,r5,r6
    1f9c:	4945383a 	mul	r2,r9,r5
    1fa0:	4993383a 	mul	r9,r9,r6
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    1fa4:	12400a0e 	bge	r2,r9,1fd0 <partial+0x3c>
    1fa8:	1087883a 	add	r3,r2,r2
    1fac:	20d1883a 	add	r8,r4,r3
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
    1fb0:	d0e70d17 	ldw	r3,-25548(gp)
    1fb4:	4100000b 	ldhu	r4,0(r8)
    1fb8:	1887883a 	add	r3,r3,r2
    1fbc:	2009c032 	custom	0,r4,r4,zero
    1fc0:	19000005 	stb	r4,0(r3)
	int x,y,pos, f = from*array_width, t = from*array_width+lines*array_width;
	unsigned short *pixels = (unsigned short *)picture;

	//alt_dcache_flush_all();
	//alt_remap_cached(grayscale_array_a+from, size*array_width);
	for (pos = f ; pos < t ; pos++) {
    1fc4:	10800044 	addi	r2,r2,1
    1fc8:	42000084 	addi	r8,r8,2
    1fcc:	48bff81e 	bne	r9,r2,1fb0 <__alt_data_end+0xff001fb0>
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
    1fd0:	29d3883a 	add	r9,r5,r7
    1fd4:	33bfffc4 	addi	r14,r6,-1
    1fd8:	4b804f0e 	bge	r9,r14,2118 <partial+0x184>
    1fdc:	d1271f17 	ldw	r4,-25476(gp)
		partial(picture, (i * sub)-1, sub+1, 0);
	}
	partial(picture, divider * (sub-2), array_height%divider, 0);
}

void partial(void *picture, int from, int lines, int offsetfrom){
    1fe0:	defffa04 	addi	sp,sp,-24
    1fe4:	dfc00515 	stw	ra,20(sp)
    1fe8:	dd000415 	stw	r20,16(sp)
    1fec:	dcc00315 	stw	r19,12(sp)
    1ff0:	dc800215 	stw	r18,8(sp)
    1ff4:	dc400115 	stw	r17,4(sp)
    1ff8:	dc000015 	stw	r16,0(sp)
    1ffc:	4a400044 	addi	r9,r9,1
	}


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2000:	03c00084 	movi	r15,2
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2004:	03002004 	movi	r12,128
    2008:	4abfffc4 	addi	r10,r9,-1
    200c:	481b883a 	mov	r13,r9
	}


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    2010:	7900370e 	bge	r15,r4,20f0 <partial+0x15c>
    2014:	4affff84 	addi	r11,r9,-2
    2018:	481b883a 	mov	r13,r9
    201c:	01400044 	movi	r5,1
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2020:	d1e70d17 	ldw	r7,-25548(gp)
    2024:	22c7383a 	mul	r3,r4,r11
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2028:	2267383a 	mul	r19,r4,r9
    202c:	2fffffc4 	addi	ra,r5,-1


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2030:	38c7883a 	add	r3,r7,r3
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2034:	1945883a 	add	r2,r3,r5

	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    2038:	2a000044 	addi	r8,r5,1


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    203c:	1fcd883a 	add	r6,r3,ra
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2040:	10800003 	ldbu	r2,0(r2)
	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2044:	3ce1883a 	add	r16,r7,r19


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
    2048:	34400003 	ldbu	r17,0(r6)
					b = grayscale_array[(y-1)*array_width+(x+1)];
    204c:	1a07883a 	add	r3,r3,r8
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2050:	8169883a 	add	r20,r16,r5

	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
    2054:	19800003 	ldbu	r6,0(r3)
					c = grayscale_array[(y+1)*array_width+(x-1)];
    2058:	87c7883a 	add	r3,r16,ra
    205c:	1c000003 	ldbu	r16,0(r3)
					d = grayscale_array[(y+1)*array_width+(x+1)];
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2060:	1087883a 	add	r3,r2,r2
    2064:	a0800003 	ldbu	r2,0(r20)
    2068:	1c47883a 	add	r3,r3,r17
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    206c:	3a25883a 	add	r18,r7,r8
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2070:	1987883a 	add	r3,r3,r6
    2074:	1c07c83a 	sub	r3,r3,r16
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    2078:	94e7883a 	add	r19,r18,r19
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    207c:	2289383a 	mul	r4,r4,r10
    2080:	1085883a 	add	r2,r2,r2
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
					a = grayscale_array[(y-1)*array_width+(x-1)];
					b = grayscale_array[(y-1)*array_width+(x+1)];
					c = grayscale_array[(y+1)*array_width+(x-1)];
					d = grayscale_array[(y+1)*array_width+(x+1)];
    2084:	9cc00003 	ldbu	r19,0(r19)
					IOWR_8DIRECT(sobel_result,(y*array_width)+x,ALT_CI_THRESHOLD_0(
    2088:	1885c83a 	sub	r2,r3,r2
    208c:	d0e71417 	ldw	r3,-25520(gp)
    2090:	214b883a 	add	r5,r4,r5
    2094:	14c5c83a 	sub	r2,r2,r19
    2098:	194b883a 	add	r5,r3,r5
    209c:	1005c072 	custom	1,r2,r2,zero
    20a0:	390f883a 	add	r7,r7,r4
    20a4:	3fcf883a 	add	r7,r7,ra
    20a8:	38c00003 	ldbu	r3,0(r7)
    20ac:	9109883a 	add	r4,r18,r4
    20b0:	21000003 	ldbu	r4,0(r4)
    20b4:	344dc83a 	sub	r6,r6,r17
    20b8:	18c7883a 	add	r3,r3,r3
    20bc:	30c7c83a 	sub	r3,r6,r3
    20c0:	2109883a 	add	r4,r4,r4
    20c4:	1907883a 	add	r3,r3,r4
    20c8:	1c07c83a 	sub	r3,r3,r16
    20cc:	1cc7883a 	add	r3,r3,r19
    20d0:	1807c072 	custom	1,r3,r3,zero
    20d4:	10c5883a 	add	r2,r2,r3
    20d8:	1305c0b2 	custom	2,r2,r2,r12
    20dc:	28800025 	stbio	r2,0(r5)
	}


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
		for (x = 1 ; x < (array_width-1) ; x++) {
    20e0:	d1271f17 	ldw	r4,-25476(gp)
    20e4:	400b883a 	mov	r5,r8
    20e8:	20bfffc4 	addi	r2,r4,-1
    20ec:	40bfcc16 	blt	r8,r2,2020 <__alt_data_end+0xff002020>
    20f0:	4a400044 	addi	r9,r9,1
		grayscale_array[pos] = ALT_CI_RGB2GRAY_0(pixels[pos]);
	}


	int a,b,c,d;
	for (y = from+offsetfrom ; y < (from+lines-1) ; y++) {
    20f4:	6bbfc416 	blt	r13,r14,2008 <__alt_data_end+0xff002008>
							ALT_CI_ABSOLUTE_0(b - a - 2 * grayscale_array[(y)*array_width+(x-1)] +
								2 * grayscale_array[(y)*array_width+(x+1)] - c + d)
							,128));
		}
	}
}
    20f8:	dfc00517 	ldw	ra,20(sp)
    20fc:	dd000417 	ldw	r20,16(sp)
    2100:	dcc00317 	ldw	r19,12(sp)
    2104:	dc800217 	ldw	r18,8(sp)
    2108:	dc400117 	ldw	r17,4(sp)
    210c:	dc000017 	ldw	r16,0(sp)
    2110:	dec00604 	addi	sp,sp,24
    2114:	f800283a 	ret
    2118:	f800283a 	ret

0000211c <sobel_all_partial>:
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
}

void sobel_all_partial(void *picture){
	int i, divider = 28, sub = array_height/divider;
    211c:	d0a71e17 	ldw	r2,-25480(gp)
	end_sobel = alt_timestamp();
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
}

void sobel_all_partial(void *picture){
    2120:	defffa04 	addi	sp,sp,-24
    2124:	dcc00315 	stw	r19,12(sp)
    2128:	dfc00515 	stw	ra,20(sp)
    212c:	2027883a 	mov	r19,r4
    2130:	dd000415 	stw	r20,16(sp)
    2134:	dc800215 	stw	r18,8(sp)
    2138:	dc400115 	stw	r17,4(sp)
    213c:	dc000015 	stw	r16,0(sp)
	int i, divider = 28, sub = array_height/divider;
    2140:	10c00714 	ori	r3,r2,28
    2144:	010003c4 	movi	r4,15
    2148:	20c02e36 	bltu	r4,r3,2204 <sobel_all_partial+0xe8>
    214c:	1004913a 	slli	r2,r2,4
    2150:	00c00074 	movhi	r3,1
    2154:	18c76f04 	addi	r3,r3,7612
    2158:	10800714 	ori	r2,r2,28
    215c:	10c5883a 	add	r2,r2,r3
    2160:	14800003 	ldbu	r18,0(r2)
	partial(picture, 0, sub,1);
    2164:	01c00044 	movi	r7,1
    2168:	900d883a 	mov	r6,r18
    216c:	000b883a 	mov	r5,zero
    2170:	9809883a 	mov	r4,r19
    2174:	0001f940 	call	1f94 <partial>
    2178:	95000044 	addi	r20,r18,1
    217c:	947fffc4 	addi	r17,r18,-1
    2180:	040006c4 	movi	r16,27
	for (i = 1; i<divider; i++){
		partial(picture, (i * sub)-1, sub+1, 0);
    2184:	880b883a 	mov	r5,r17
    2188:	000f883a 	mov	r7,zero
    218c:	a00d883a 	mov	r6,r20
    2190:	9809883a 	mov	r4,r19
    2194:	843fffc4 	addi	r16,r16,-1
    2198:	0001f940 	call	1f94 <partial>
    219c:	8ca3883a 	add	r17,r17,r18
}

void sobel_all_partial(void *picture){
	int i, divider = 28, sub = array_height/divider;
	partial(picture, 0, sub,1);
	for (i = 1; i<divider; i++){
    21a0:	803ff81e 	bne	r16,zero,2184 <__alt_data_end+0xff002184>
		partial(picture, (i * sub)-1, sub+1, 0);
	}
	partial(picture, divider * (sub-2), array_height%divider, 0);
    21a4:	d4271e17 	ldw	r16,-25480(gp)
    21a8:	00c003c4 	movi	r3,15
    21ac:	80800714 	ori	r2,r16,28
    21b0:	18801936 	bltu	r3,r2,2218 <sobel_all_partial+0xfc>
    21b4:	8004913a 	slli	r2,r16,4
    21b8:	10c00714 	ori	r3,r2,28
    21bc:	00800074 	movhi	r2,1
    21c0:	10876f04 	addi	r2,r2,7612
    21c4:	1885883a 	add	r2,r3,r2
    21c8:	10800003 	ldbu	r2,0(r2)
    21cc:	11800724 	muli	r6,r2,28
    21d0:	917fff84 	addi	r5,r18,-2
    21d4:	29400724 	muli	r5,r5,28
    21d8:	000f883a 	mov	r7,zero
    21dc:	818dc83a 	sub	r6,r16,r6
    21e0:	9809883a 	mov	r4,r19
}
    21e4:	dfc00517 	ldw	ra,20(sp)
    21e8:	dd000417 	ldw	r20,16(sp)
    21ec:	dcc00317 	ldw	r19,12(sp)
    21f0:	dc800217 	ldw	r18,8(sp)
    21f4:	dc400117 	ldw	r17,4(sp)
    21f8:	dc000017 	ldw	r16,0(sp)
    21fc:	dec00604 	addi	sp,sp,24
	int i, divider = 28, sub = array_height/divider;
	partial(picture, 0, sub,1);
	for (i = 1; i<divider; i++){
		partial(picture, (i * sub)-1, sub+1, 0);
	}
	partial(picture, divider * (sub-2), array_height%divider, 0);
    2200:	0001f941 	jmpi	1f94 <partial>
	printf("conv grayscale: %d\n",(int)(end_conv_grayscale-start_conv_grayscale));
	printf("sobel: %d\n",(int)(end_sobel-start_sobel));
}

void sobel_all_partial(void *picture){
	int i, divider = 28, sub = array_height/divider;
    2204:	01400704 	movi	r5,28
    2208:	1009883a 	mov	r4,r2
    220c:	00022500 	call	2250 <__divsi3>
    2210:	1025883a 	mov	r18,r2
    2214:	003fd306 	br	2164 <__alt_data_end+0xff002164>
	partial(picture, 0, sub,1);
	for (i = 1; i<divider; i++){
		partial(picture, (i * sub)-1, sub+1, 0);
	}
	partial(picture, divider * (sub-2), array_height%divider, 0);
    2218:	01400704 	movi	r5,28
    221c:	8009883a 	mov	r4,r16
    2220:	00022500 	call	2250 <__divsi3>
    2224:	003fe906 	br	21cc <__alt_data_end+0xff0021cc>

00002228 <GetSobelAllResult>:
	}
}

unsigned char *GetSobelAllResult() {
	return sobel_result;
}
    2228:	d0a71417 	ldw	r2,-25520(gp)
    222c:	f800283a 	ret

00002230 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2230:	00804034 	movhi	r2,256
    2234:	10843404 	addi	r2,r2,4304
    2238:	11000035 	stwio	r4,0(r2)
    223c:	f800283a 	ret

00002240 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2240:	00804034 	movhi	r2,256
    2244:	10843504 	addi	r2,r2,4308
    2248:	11000025 	stbio	r4,0(r2)
    224c:	f800283a 	ret

00002250 <__divsi3>:
    2250:	20001b16 	blt	r4,zero,22c0 <__divsi3+0x70>
    2254:	000f883a 	mov	r7,zero
    2258:	28001616 	blt	r5,zero,22b4 <__divsi3+0x64>
    225c:	200d883a 	mov	r6,r4
    2260:	29001a2e 	bgeu	r5,r4,22cc <__divsi3+0x7c>
    2264:	00800804 	movi	r2,32
    2268:	00c00044 	movi	r3,1
    226c:	00000106 	br	2274 <__divsi3+0x24>
    2270:	10000d26 	beq	r2,zero,22a8 <__divsi3+0x58>
    2274:	294b883a 	add	r5,r5,r5
    2278:	10bfffc4 	addi	r2,r2,-1
    227c:	18c7883a 	add	r3,r3,r3
    2280:	293ffb36 	bltu	r5,r4,2270 <__alt_data_end+0xff002270>
    2284:	0005883a 	mov	r2,zero
    2288:	18000726 	beq	r3,zero,22a8 <__divsi3+0x58>
    228c:	0005883a 	mov	r2,zero
    2290:	31400236 	bltu	r6,r5,229c <__divsi3+0x4c>
    2294:	314dc83a 	sub	r6,r6,r5
    2298:	10c4b03a 	or	r2,r2,r3
    229c:	1806d07a 	srli	r3,r3,1
    22a0:	280ad07a 	srli	r5,r5,1
    22a4:	183ffa1e 	bne	r3,zero,2290 <__alt_data_end+0xff002290>
    22a8:	38000126 	beq	r7,zero,22b0 <__divsi3+0x60>
    22ac:	0085c83a 	sub	r2,zero,r2
    22b0:	f800283a 	ret
    22b4:	014bc83a 	sub	r5,zero,r5
    22b8:	39c0005c 	xori	r7,r7,1
    22bc:	003fe706 	br	225c <__alt_data_end+0xff00225c>
    22c0:	0109c83a 	sub	r4,zero,r4
    22c4:	01c00044 	movi	r7,1
    22c8:	003fe306 	br	2258 <__alt_data_end+0xff002258>
    22cc:	00c00044 	movi	r3,1
    22d0:	003fee06 	br	228c <__alt_data_end+0xff00228c>

000022d4 <__modsi3>:
    22d4:	20001716 	blt	r4,zero,2334 <__modsi3+0x60>
    22d8:	000f883a 	mov	r7,zero
    22dc:	2005883a 	mov	r2,r4
    22e0:	28001216 	blt	r5,zero,232c <__modsi3+0x58>
    22e4:	2900162e 	bgeu	r5,r4,2340 <__modsi3+0x6c>
    22e8:	01800804 	movi	r6,32
    22ec:	00c00044 	movi	r3,1
    22f0:	00000106 	br	22f8 <__modsi3+0x24>
    22f4:	30000a26 	beq	r6,zero,2320 <__modsi3+0x4c>
    22f8:	294b883a 	add	r5,r5,r5
    22fc:	31bfffc4 	addi	r6,r6,-1
    2300:	18c7883a 	add	r3,r3,r3
    2304:	293ffb36 	bltu	r5,r4,22f4 <__alt_data_end+0xff0022f4>
    2308:	18000526 	beq	r3,zero,2320 <__modsi3+0x4c>
    230c:	1806d07a 	srli	r3,r3,1
    2310:	11400136 	bltu	r2,r5,2318 <__modsi3+0x44>
    2314:	1145c83a 	sub	r2,r2,r5
    2318:	280ad07a 	srli	r5,r5,1
    231c:	183ffb1e 	bne	r3,zero,230c <__alt_data_end+0xff00230c>
    2320:	38000126 	beq	r7,zero,2328 <__modsi3+0x54>
    2324:	0085c83a 	sub	r2,zero,r2
    2328:	f800283a 	ret
    232c:	014bc83a 	sub	r5,zero,r5
    2330:	003fec06 	br	22e4 <__alt_data_end+0xff0022e4>
    2334:	0109c83a 	sub	r4,zero,r4
    2338:	01c00044 	movi	r7,1
    233c:	003fe706 	br	22dc <__alt_data_end+0xff0022dc>
    2340:	00c00044 	movi	r3,1
    2344:	003ff106 	br	230c <__alt_data_end+0xff00230c>

00002348 <__udivsi3>:
    2348:	200d883a 	mov	r6,r4
    234c:	2900152e 	bgeu	r5,r4,23a4 <__udivsi3+0x5c>
    2350:	28001416 	blt	r5,zero,23a4 <__udivsi3+0x5c>
    2354:	00800804 	movi	r2,32
    2358:	00c00044 	movi	r3,1
    235c:	00000206 	br	2368 <__udivsi3+0x20>
    2360:	10000e26 	beq	r2,zero,239c <__udivsi3+0x54>
    2364:	28000516 	blt	r5,zero,237c <__udivsi3+0x34>
    2368:	294b883a 	add	r5,r5,r5
    236c:	10bfffc4 	addi	r2,r2,-1
    2370:	18c7883a 	add	r3,r3,r3
    2374:	293ffa36 	bltu	r5,r4,2360 <__alt_data_end+0xff002360>
    2378:	18000826 	beq	r3,zero,239c <__udivsi3+0x54>
    237c:	0005883a 	mov	r2,zero
    2380:	31400236 	bltu	r6,r5,238c <__udivsi3+0x44>
    2384:	314dc83a 	sub	r6,r6,r5
    2388:	10c4b03a 	or	r2,r2,r3
    238c:	1806d07a 	srli	r3,r3,1
    2390:	280ad07a 	srli	r5,r5,1
    2394:	183ffa1e 	bne	r3,zero,2380 <__alt_data_end+0xff002380>
    2398:	f800283a 	ret
    239c:	0005883a 	mov	r2,zero
    23a0:	f800283a 	ret
    23a4:	00c00044 	movi	r3,1
    23a8:	003ff406 	br	237c <__alt_data_end+0xff00237c>

000023ac <__umodsi3>:
    23ac:	2005883a 	mov	r2,r4
    23b0:	2900122e 	bgeu	r5,r4,23fc <__umodsi3+0x50>
    23b4:	28001116 	blt	r5,zero,23fc <__umodsi3+0x50>
    23b8:	01800804 	movi	r6,32
    23bc:	00c00044 	movi	r3,1
    23c0:	00000206 	br	23cc <__umodsi3+0x20>
    23c4:	30000c26 	beq	r6,zero,23f8 <__umodsi3+0x4c>
    23c8:	28000516 	blt	r5,zero,23e0 <__umodsi3+0x34>
    23cc:	294b883a 	add	r5,r5,r5
    23d0:	31bfffc4 	addi	r6,r6,-1
    23d4:	18c7883a 	add	r3,r3,r3
    23d8:	293ffa36 	bltu	r5,r4,23c4 <__alt_data_end+0xff0023c4>
    23dc:	18000626 	beq	r3,zero,23f8 <__umodsi3+0x4c>
    23e0:	1806d07a 	srli	r3,r3,1
    23e4:	11400136 	bltu	r2,r5,23ec <__umodsi3+0x40>
    23e8:	1145c83a 	sub	r2,r2,r5
    23ec:	280ad07a 	srli	r5,r5,1
    23f0:	183ffb1e 	bne	r3,zero,23e0 <__alt_data_end+0xff0023e0>
    23f4:	f800283a 	ret
    23f8:	f800283a 	ret
    23fc:	00c00044 	movi	r3,1
    2400:	003ff706 	br	23e0 <__alt_data_end+0xff0023e0>

00002404 <__divdf3>:
    2404:	defff204 	addi	sp,sp,-56
    2408:	dd400915 	stw	r21,36(sp)
    240c:	282ad53a 	srli	r21,r5,20
    2410:	dd000815 	stw	r20,32(sp)
    2414:	2828d7fa 	srli	r20,r5,31
    2418:	dc000415 	stw	r16,16(sp)
    241c:	04000434 	movhi	r16,16
    2420:	df000c15 	stw	fp,48(sp)
    2424:	843fffc4 	addi	r16,r16,-1
    2428:	dfc00d15 	stw	ra,52(sp)
    242c:	ddc00b15 	stw	r23,44(sp)
    2430:	dd800a15 	stw	r22,40(sp)
    2434:	dcc00715 	stw	r19,28(sp)
    2438:	dc800615 	stw	r18,24(sp)
    243c:	dc400515 	stw	r17,20(sp)
    2440:	ad41ffcc 	andi	r21,r21,2047
    2444:	2c20703a 	and	r16,r5,r16
    2448:	a7003fcc 	andi	fp,r20,255
    244c:	a8006126 	beq	r21,zero,25d4 <__divdf3+0x1d0>
    2450:	0081ffc4 	movi	r2,2047
    2454:	2025883a 	mov	r18,r4
    2458:	a8803726 	beq	r21,r2,2538 <__divdf3+0x134>
    245c:	80800434 	orhi	r2,r16,16
    2460:	100490fa 	slli	r2,r2,3
    2464:	2020d77a 	srli	r16,r4,29
    2468:	202490fa 	slli	r18,r4,3
    246c:	ad7f0044 	addi	r21,r21,-1023
    2470:	80a0b03a 	or	r16,r16,r2
    2474:	0027883a 	mov	r19,zero
    2478:	0013883a 	mov	r9,zero
    247c:	3804d53a 	srli	r2,r7,20
    2480:	382cd7fa 	srli	r22,r7,31
    2484:	04400434 	movhi	r17,16
    2488:	8c7fffc4 	addi	r17,r17,-1
    248c:	1081ffcc 	andi	r2,r2,2047
    2490:	3011883a 	mov	r8,r6
    2494:	3c62703a 	and	r17,r7,r17
    2498:	b5c03fcc 	andi	r23,r22,255
    249c:	10006c26 	beq	r2,zero,2650 <__divdf3+0x24c>
    24a0:	00c1ffc4 	movi	r3,2047
    24a4:	10c06426 	beq	r2,r3,2638 <__divdf3+0x234>
    24a8:	88c00434 	orhi	r3,r17,16
    24ac:	180690fa 	slli	r3,r3,3
    24b0:	3022d77a 	srli	r17,r6,29
    24b4:	301090fa 	slli	r8,r6,3
    24b8:	10bf0044 	addi	r2,r2,-1023
    24bc:	88e2b03a 	or	r17,r17,r3
    24c0:	000f883a 	mov	r7,zero
    24c4:	a58cf03a 	xor	r6,r20,r22
    24c8:	3cc8b03a 	or	r4,r7,r19
    24cc:	a8abc83a 	sub	r21,r21,r2
    24d0:	008003c4 	movi	r2,15
    24d4:	3007883a 	mov	r3,r6
    24d8:	34c03fcc 	andi	r19,r6,255
    24dc:	11009036 	bltu	r2,r4,2720 <__divdf3+0x31c>
    24e0:	200890ba 	slli	r4,r4,2
    24e4:	00800034 	movhi	r2,0
    24e8:	10893e04 	addi	r2,r2,9464
    24ec:	2089883a 	add	r4,r4,r2
    24f0:	20800017 	ldw	r2,0(r4)
    24f4:	1000683a 	jmp	r2
    24f8:	00002720 	cmpeqi	zero,zero,156
    24fc:	00002570 	cmpltui	zero,zero,149
    2500:	00002710 	cmplti	zero,zero,156
    2504:	00002564 	muli	zero,zero,149
    2508:	00002710 	cmplti	zero,zero,156
    250c:	000026e4 	muli	zero,zero,155
    2510:	00002710 	cmplti	zero,zero,156
    2514:	00002564 	muli	zero,zero,149
    2518:	00002570 	cmpltui	zero,zero,149
    251c:	00002570 	cmpltui	zero,zero,149
    2520:	000026e4 	muli	zero,zero,155
    2524:	00002564 	muli	zero,zero,149
    2528:	00002554 	movui	zero,149
    252c:	00002554 	movui	zero,149
    2530:	00002554 	movui	zero,149
    2534:	00002a04 	movi	zero,168
    2538:	2404b03a 	or	r2,r4,r16
    253c:	1000661e 	bne	r2,zero,26d8 <__divdf3+0x2d4>
    2540:	04c00204 	movi	r19,8
    2544:	0021883a 	mov	r16,zero
    2548:	0025883a 	mov	r18,zero
    254c:	02400084 	movi	r9,2
    2550:	003fca06 	br	247c <__alt_data_end+0xff00247c>
    2554:	8023883a 	mov	r17,r16
    2558:	9011883a 	mov	r8,r18
    255c:	e02f883a 	mov	r23,fp
    2560:	480f883a 	mov	r7,r9
    2564:	00800084 	movi	r2,2
    2568:	3881311e 	bne	r7,r2,2a30 <__divdf3+0x62c>
    256c:	b827883a 	mov	r19,r23
    2570:	98c0004c 	andi	r3,r19,1
    2574:	0081ffc4 	movi	r2,2047
    2578:	000b883a 	mov	r5,zero
    257c:	0025883a 	mov	r18,zero
    2580:	1004953a 	slli	r2,r2,20
    2584:	18c03fcc 	andi	r3,r3,255
    2588:	04400434 	movhi	r17,16
    258c:	8c7fffc4 	addi	r17,r17,-1
    2590:	180697fa 	slli	r3,r3,31
    2594:	2c4a703a 	and	r5,r5,r17
    2598:	288ab03a 	or	r5,r5,r2
    259c:	28c6b03a 	or	r3,r5,r3
    25a0:	9005883a 	mov	r2,r18
    25a4:	dfc00d17 	ldw	ra,52(sp)
    25a8:	df000c17 	ldw	fp,48(sp)
    25ac:	ddc00b17 	ldw	r23,44(sp)
    25b0:	dd800a17 	ldw	r22,40(sp)
    25b4:	dd400917 	ldw	r21,36(sp)
    25b8:	dd000817 	ldw	r20,32(sp)
    25bc:	dcc00717 	ldw	r19,28(sp)
    25c0:	dc800617 	ldw	r18,24(sp)
    25c4:	dc400517 	ldw	r17,20(sp)
    25c8:	dc000417 	ldw	r16,16(sp)
    25cc:	dec00e04 	addi	sp,sp,56
    25d0:	f800283a 	ret
    25d4:	2404b03a 	or	r2,r4,r16
    25d8:	2027883a 	mov	r19,r4
    25dc:	10003926 	beq	r2,zero,26c4 <__divdf3+0x2c0>
    25e0:	80012e26 	beq	r16,zero,2a9c <__divdf3+0x698>
    25e4:	8009883a 	mov	r4,r16
    25e8:	d9800315 	stw	r6,12(sp)
    25ec:	d9c00215 	stw	r7,8(sp)
    25f0:	0002d940 	call	2d94 <__clzsi2>
    25f4:	d9800317 	ldw	r6,12(sp)
    25f8:	d9c00217 	ldw	r7,8(sp)
    25fc:	113ffd44 	addi	r4,r2,-11
    2600:	00c00704 	movi	r3,28
    2604:	19012116 	blt	r3,r4,2a8c <__divdf3+0x688>
    2608:	00c00744 	movi	r3,29
    260c:	147ffe04 	addi	r17,r2,-8
    2610:	1907c83a 	sub	r3,r3,r4
    2614:	8460983a 	sll	r16,r16,r17
    2618:	98c6d83a 	srl	r3,r19,r3
    261c:	9c64983a 	sll	r18,r19,r17
    2620:	1c20b03a 	or	r16,r3,r16
    2624:	1080fcc4 	addi	r2,r2,1011
    2628:	00abc83a 	sub	r21,zero,r2
    262c:	0027883a 	mov	r19,zero
    2630:	0013883a 	mov	r9,zero
    2634:	003f9106 	br	247c <__alt_data_end+0xff00247c>
    2638:	3446b03a 	or	r3,r6,r17
    263c:	18001f1e 	bne	r3,zero,26bc <__divdf3+0x2b8>
    2640:	0023883a 	mov	r17,zero
    2644:	0011883a 	mov	r8,zero
    2648:	01c00084 	movi	r7,2
    264c:	003f9d06 	br	24c4 <__alt_data_end+0xff0024c4>
    2650:	3446b03a 	or	r3,r6,r17
    2654:	18001526 	beq	r3,zero,26ac <__divdf3+0x2a8>
    2658:	88011b26 	beq	r17,zero,2ac8 <__divdf3+0x6c4>
    265c:	8809883a 	mov	r4,r17
    2660:	d9800315 	stw	r6,12(sp)
    2664:	da400115 	stw	r9,4(sp)
    2668:	0002d940 	call	2d94 <__clzsi2>
    266c:	d9800317 	ldw	r6,12(sp)
    2670:	da400117 	ldw	r9,4(sp)
    2674:	113ffd44 	addi	r4,r2,-11
    2678:	00c00704 	movi	r3,28
    267c:	19010e16 	blt	r3,r4,2ab8 <__divdf3+0x6b4>
    2680:	00c00744 	movi	r3,29
    2684:	123ffe04 	addi	r8,r2,-8
    2688:	1907c83a 	sub	r3,r3,r4
    268c:	8a22983a 	sll	r17,r17,r8
    2690:	30c6d83a 	srl	r3,r6,r3
    2694:	3210983a 	sll	r8,r6,r8
    2698:	1c62b03a 	or	r17,r3,r17
    269c:	1080fcc4 	addi	r2,r2,1011
    26a0:	0085c83a 	sub	r2,zero,r2
    26a4:	000f883a 	mov	r7,zero
    26a8:	003f8606 	br	24c4 <__alt_data_end+0xff0024c4>
    26ac:	0023883a 	mov	r17,zero
    26b0:	0011883a 	mov	r8,zero
    26b4:	01c00044 	movi	r7,1
    26b8:	003f8206 	br	24c4 <__alt_data_end+0xff0024c4>
    26bc:	01c000c4 	movi	r7,3
    26c0:	003f8006 	br	24c4 <__alt_data_end+0xff0024c4>
    26c4:	04c00104 	movi	r19,4
    26c8:	0021883a 	mov	r16,zero
    26cc:	0025883a 	mov	r18,zero
    26d0:	02400044 	movi	r9,1
    26d4:	003f6906 	br	247c <__alt_data_end+0xff00247c>
    26d8:	04c00304 	movi	r19,12
    26dc:	024000c4 	movi	r9,3
    26e0:	003f6606 	br	247c <__alt_data_end+0xff00247c>
    26e4:	01400434 	movhi	r5,16
    26e8:	0007883a 	mov	r3,zero
    26ec:	297fffc4 	addi	r5,r5,-1
    26f0:	04bfffc4 	movi	r18,-1
    26f4:	0081ffc4 	movi	r2,2047
    26f8:	003fa106 	br	2580 <__alt_data_end+0xff002580>
    26fc:	00c00044 	movi	r3,1
    2700:	1887c83a 	sub	r3,r3,r2
    2704:	01000e04 	movi	r4,56
    2708:	20c1210e 	bge	r4,r3,2b90 <__divdf3+0x78c>
    270c:	98c0004c 	andi	r3,r19,1
    2710:	0005883a 	mov	r2,zero
    2714:	000b883a 	mov	r5,zero
    2718:	0025883a 	mov	r18,zero
    271c:	003f9806 	br	2580 <__alt_data_end+0xff002580>
    2720:	8c00fd36 	bltu	r17,r16,2b18 <__divdf3+0x714>
    2724:	8440fb26 	beq	r16,r17,2b14 <__divdf3+0x710>
    2728:	8007883a 	mov	r3,r16
    272c:	ad7fffc4 	addi	r21,r21,-1
    2730:	0021883a 	mov	r16,zero
    2734:	4004d63a 	srli	r2,r8,24
    2738:	8822923a 	slli	r17,r17,8
    273c:	1809883a 	mov	r4,r3
    2740:	402c923a 	slli	r22,r8,8
    2744:	88b8b03a 	or	fp,r17,r2
    2748:	e028d43a 	srli	r20,fp,16
    274c:	d8c00015 	stw	r3,0(sp)
    2750:	e5ffffcc 	andi	r23,fp,65535
    2754:	a00b883a 	mov	r5,r20
    2758:	00023480 	call	2348 <__udivsi3>
    275c:	d8c00017 	ldw	r3,0(sp)
    2760:	a00b883a 	mov	r5,r20
    2764:	d8800315 	stw	r2,12(sp)
    2768:	1809883a 	mov	r4,r3
    276c:	00023ac0 	call	23ac <__umodsi3>
    2770:	d9800317 	ldw	r6,12(sp)
    2774:	1006943a 	slli	r3,r2,16
    2778:	9004d43a 	srli	r2,r18,16
    277c:	b9a3383a 	mul	r17,r23,r6
    2780:	10c4b03a 	or	r2,r2,r3
    2784:	1440062e 	bgeu	r2,r17,27a0 <__divdf3+0x39c>
    2788:	1705883a 	add	r2,r2,fp
    278c:	30ffffc4 	addi	r3,r6,-1
    2790:	1700ee36 	bltu	r2,fp,2b4c <__divdf3+0x748>
    2794:	1440ed2e 	bgeu	r2,r17,2b4c <__divdf3+0x748>
    2798:	31bfff84 	addi	r6,r6,-2
    279c:	1705883a 	add	r2,r2,fp
    27a0:	1463c83a 	sub	r17,r2,r17
    27a4:	a00b883a 	mov	r5,r20
    27a8:	8809883a 	mov	r4,r17
    27ac:	d9800315 	stw	r6,12(sp)
    27b0:	00023480 	call	2348 <__udivsi3>
    27b4:	a00b883a 	mov	r5,r20
    27b8:	8809883a 	mov	r4,r17
    27bc:	d8800215 	stw	r2,8(sp)
    27c0:	00023ac0 	call	23ac <__umodsi3>
    27c4:	d9c00217 	ldw	r7,8(sp)
    27c8:	1004943a 	slli	r2,r2,16
    27cc:	94bfffcc 	andi	r18,r18,65535
    27d0:	b9d1383a 	mul	r8,r23,r7
    27d4:	90a4b03a 	or	r18,r18,r2
    27d8:	d9800317 	ldw	r6,12(sp)
    27dc:	9200062e 	bgeu	r18,r8,27f8 <__divdf3+0x3f4>
    27e0:	9725883a 	add	r18,r18,fp
    27e4:	38bfffc4 	addi	r2,r7,-1
    27e8:	9700d636 	bltu	r18,fp,2b44 <__divdf3+0x740>
    27ec:	9200d52e 	bgeu	r18,r8,2b44 <__divdf3+0x740>
    27f0:	39ffff84 	addi	r7,r7,-2
    27f4:	9725883a 	add	r18,r18,fp
    27f8:	3004943a 	slli	r2,r6,16
    27fc:	b012d43a 	srli	r9,r22,16
    2800:	b1bfffcc 	andi	r6,r22,65535
    2804:	11e2b03a 	or	r17,r2,r7
    2808:	8806d43a 	srli	r3,r17,16
    280c:	893fffcc 	andi	r4,r17,65535
    2810:	218b383a 	mul	r5,r4,r6
    2814:	30c5383a 	mul	r2,r6,r3
    2818:	2249383a 	mul	r4,r4,r9
    281c:	280ed43a 	srli	r7,r5,16
    2820:	9225c83a 	sub	r18,r18,r8
    2824:	2089883a 	add	r4,r4,r2
    2828:	3909883a 	add	r4,r7,r4
    282c:	1a47383a 	mul	r3,r3,r9
    2830:	2080022e 	bgeu	r4,r2,283c <__divdf3+0x438>
    2834:	00800074 	movhi	r2,1
    2838:	1887883a 	add	r3,r3,r2
    283c:	2004d43a 	srli	r2,r4,16
    2840:	2008943a 	slli	r4,r4,16
    2844:	297fffcc 	andi	r5,r5,65535
    2848:	10c7883a 	add	r3,r2,r3
    284c:	2149883a 	add	r4,r4,r5
    2850:	90c0a536 	bltu	r18,r3,2ae8 <__divdf3+0x6e4>
    2854:	90c0bf26 	beq	r18,r3,2b54 <__divdf3+0x750>
    2858:	90c7c83a 	sub	r3,r18,r3
    285c:	810fc83a 	sub	r7,r16,r4
    2860:	81e5803a 	cmpltu	r18,r16,r7
    2864:	1ca5c83a 	sub	r18,r3,r18
    2868:	e480c126 	beq	fp,r18,2b70 <__divdf3+0x76c>
    286c:	a00b883a 	mov	r5,r20
    2870:	9009883a 	mov	r4,r18
    2874:	d9800315 	stw	r6,12(sp)
    2878:	d9c00215 	stw	r7,8(sp)
    287c:	da400115 	stw	r9,4(sp)
    2880:	00023480 	call	2348 <__udivsi3>
    2884:	a00b883a 	mov	r5,r20
    2888:	9009883a 	mov	r4,r18
    288c:	d8800015 	stw	r2,0(sp)
    2890:	00023ac0 	call	23ac <__umodsi3>
    2894:	d9c00217 	ldw	r7,8(sp)
    2898:	da000017 	ldw	r8,0(sp)
    289c:	1006943a 	slli	r3,r2,16
    28a0:	3804d43a 	srli	r2,r7,16
    28a4:	ba21383a 	mul	r16,r23,r8
    28a8:	d9800317 	ldw	r6,12(sp)
    28ac:	10c4b03a 	or	r2,r2,r3
    28b0:	da400117 	ldw	r9,4(sp)
    28b4:	1400062e 	bgeu	r2,r16,28d0 <__divdf3+0x4cc>
    28b8:	1705883a 	add	r2,r2,fp
    28bc:	40ffffc4 	addi	r3,r8,-1
    28c0:	1700ad36 	bltu	r2,fp,2b78 <__divdf3+0x774>
    28c4:	1400ac2e 	bgeu	r2,r16,2b78 <__divdf3+0x774>
    28c8:	423fff84 	addi	r8,r8,-2
    28cc:	1705883a 	add	r2,r2,fp
    28d0:	1421c83a 	sub	r16,r2,r16
    28d4:	a00b883a 	mov	r5,r20
    28d8:	8009883a 	mov	r4,r16
    28dc:	d9800315 	stw	r6,12(sp)
    28e0:	d9c00215 	stw	r7,8(sp)
    28e4:	da000015 	stw	r8,0(sp)
    28e8:	da400115 	stw	r9,4(sp)
    28ec:	00023480 	call	2348 <__udivsi3>
    28f0:	8009883a 	mov	r4,r16
    28f4:	a00b883a 	mov	r5,r20
    28f8:	1025883a 	mov	r18,r2
    28fc:	00023ac0 	call	23ac <__umodsi3>
    2900:	d9c00217 	ldw	r7,8(sp)
    2904:	1004943a 	slli	r2,r2,16
    2908:	bcaf383a 	mul	r23,r23,r18
    290c:	393fffcc 	andi	r4,r7,65535
    2910:	2088b03a 	or	r4,r4,r2
    2914:	d9800317 	ldw	r6,12(sp)
    2918:	da000017 	ldw	r8,0(sp)
    291c:	da400117 	ldw	r9,4(sp)
    2920:	25c0062e 	bgeu	r4,r23,293c <__divdf3+0x538>
    2924:	2709883a 	add	r4,r4,fp
    2928:	90bfffc4 	addi	r2,r18,-1
    292c:	27009436 	bltu	r4,fp,2b80 <__divdf3+0x77c>
    2930:	25c0932e 	bgeu	r4,r23,2b80 <__divdf3+0x77c>
    2934:	94bfff84 	addi	r18,r18,-2
    2938:	2709883a 	add	r4,r4,fp
    293c:	4004943a 	slli	r2,r8,16
    2940:	25efc83a 	sub	r23,r4,r23
    2944:	1490b03a 	or	r8,r2,r18
    2948:	4008d43a 	srli	r4,r8,16
    294c:	40ffffcc 	andi	r3,r8,65535
    2950:	30c5383a 	mul	r2,r6,r3
    2954:	1a47383a 	mul	r3,r3,r9
    2958:	310d383a 	mul	r6,r6,r4
    295c:	100ad43a 	srli	r5,r2,16
    2960:	4913383a 	mul	r9,r9,r4
    2964:	1987883a 	add	r3,r3,r6
    2968:	28c7883a 	add	r3,r5,r3
    296c:	1980022e 	bgeu	r3,r6,2978 <__divdf3+0x574>
    2970:	01000074 	movhi	r4,1
    2974:	4913883a 	add	r9,r9,r4
    2978:	1808d43a 	srli	r4,r3,16
    297c:	1806943a 	slli	r3,r3,16
    2980:	10bfffcc 	andi	r2,r2,65535
    2984:	2253883a 	add	r9,r4,r9
    2988:	1887883a 	add	r3,r3,r2
    298c:	ba403836 	bltu	r23,r9,2a70 <__divdf3+0x66c>
    2990:	ba403626 	beq	r23,r9,2a6c <__divdf3+0x668>
    2994:	42000054 	ori	r8,r8,1
    2998:	a880ffc4 	addi	r2,r21,1023
    299c:	00bf570e 	bge	zero,r2,26fc <__alt_data_end+0xff0026fc>
    29a0:	40c001cc 	andi	r3,r8,7
    29a4:	18000726 	beq	r3,zero,29c4 <__divdf3+0x5c0>
    29a8:	40c003cc 	andi	r3,r8,15
    29ac:	01000104 	movi	r4,4
    29b0:	19000426 	beq	r3,r4,29c4 <__divdf3+0x5c0>
    29b4:	4107883a 	add	r3,r8,r4
    29b8:	1a11803a 	cmpltu	r8,r3,r8
    29bc:	8a23883a 	add	r17,r17,r8
    29c0:	1811883a 	mov	r8,r3
    29c4:	88c0402c 	andhi	r3,r17,256
    29c8:	18000426 	beq	r3,zero,29dc <__divdf3+0x5d8>
    29cc:	00ffc034 	movhi	r3,65280
    29d0:	18ffffc4 	addi	r3,r3,-1
    29d4:	a8810004 	addi	r2,r21,1024
    29d8:	88e2703a 	and	r17,r17,r3
    29dc:	00c1ff84 	movi	r3,2046
    29e0:	18bee316 	blt	r3,r2,2570 <__alt_data_end+0xff002570>
    29e4:	8824977a 	slli	r18,r17,29
    29e8:	4010d0fa 	srli	r8,r8,3
    29ec:	8822927a 	slli	r17,r17,9
    29f0:	1081ffcc 	andi	r2,r2,2047
    29f4:	9224b03a 	or	r18,r18,r8
    29f8:	880ad33a 	srli	r5,r17,12
    29fc:	98c0004c 	andi	r3,r19,1
    2a00:	003edf06 	br	2580 <__alt_data_end+0xff002580>
    2a04:	8080022c 	andhi	r2,r16,8
    2a08:	10001226 	beq	r2,zero,2a54 <__divdf3+0x650>
    2a0c:	8880022c 	andhi	r2,r17,8
    2a10:	1000101e 	bne	r2,zero,2a54 <__divdf3+0x650>
    2a14:	00800434 	movhi	r2,16
    2a18:	89400234 	orhi	r5,r17,8
    2a1c:	10bfffc4 	addi	r2,r2,-1
    2a20:	b007883a 	mov	r3,r22
    2a24:	288a703a 	and	r5,r5,r2
    2a28:	4025883a 	mov	r18,r8
    2a2c:	003f3106 	br	26f4 <__alt_data_end+0xff0026f4>
    2a30:	008000c4 	movi	r2,3
    2a34:	3880a626 	beq	r7,r2,2cd0 <__divdf3+0x8cc>
    2a38:	00800044 	movi	r2,1
    2a3c:	3880521e 	bne	r7,r2,2b88 <__divdf3+0x784>
    2a40:	b807883a 	mov	r3,r23
    2a44:	0005883a 	mov	r2,zero
    2a48:	000b883a 	mov	r5,zero
    2a4c:	0025883a 	mov	r18,zero
    2a50:	003ecb06 	br	2580 <__alt_data_end+0xff002580>
    2a54:	00800434 	movhi	r2,16
    2a58:	81400234 	orhi	r5,r16,8
    2a5c:	10bfffc4 	addi	r2,r2,-1
    2a60:	a007883a 	mov	r3,r20
    2a64:	288a703a 	and	r5,r5,r2
    2a68:	003f2206 	br	26f4 <__alt_data_end+0xff0026f4>
    2a6c:	183fca26 	beq	r3,zero,2998 <__alt_data_end+0xff002998>
    2a70:	e5ef883a 	add	r23,fp,r23
    2a74:	40bfffc4 	addi	r2,r8,-1
    2a78:	bf00392e 	bgeu	r23,fp,2b60 <__divdf3+0x75c>
    2a7c:	1011883a 	mov	r8,r2
    2a80:	ba7fc41e 	bne	r23,r9,2994 <__alt_data_end+0xff002994>
    2a84:	b0ffc31e 	bne	r22,r3,2994 <__alt_data_end+0xff002994>
    2a88:	003fc306 	br	2998 <__alt_data_end+0xff002998>
    2a8c:	143ff604 	addi	r16,r2,-40
    2a90:	9c20983a 	sll	r16,r19,r16
    2a94:	0025883a 	mov	r18,zero
    2a98:	003ee206 	br	2624 <__alt_data_end+0xff002624>
    2a9c:	d9800315 	stw	r6,12(sp)
    2aa0:	d9c00215 	stw	r7,8(sp)
    2aa4:	0002d940 	call	2d94 <__clzsi2>
    2aa8:	10800804 	addi	r2,r2,32
    2aac:	d9c00217 	ldw	r7,8(sp)
    2ab0:	d9800317 	ldw	r6,12(sp)
    2ab4:	003ed106 	br	25fc <__alt_data_end+0xff0025fc>
    2ab8:	147ff604 	addi	r17,r2,-40
    2abc:	3462983a 	sll	r17,r6,r17
    2ac0:	0011883a 	mov	r8,zero
    2ac4:	003ef506 	br	269c <__alt_data_end+0xff00269c>
    2ac8:	3009883a 	mov	r4,r6
    2acc:	d9800315 	stw	r6,12(sp)
    2ad0:	da400115 	stw	r9,4(sp)
    2ad4:	0002d940 	call	2d94 <__clzsi2>
    2ad8:	10800804 	addi	r2,r2,32
    2adc:	da400117 	ldw	r9,4(sp)
    2ae0:	d9800317 	ldw	r6,12(sp)
    2ae4:	003ee306 	br	2674 <__alt_data_end+0xff002674>
    2ae8:	85a1883a 	add	r16,r16,r22
    2aec:	8585803a 	cmpltu	r2,r16,r22
    2af0:	1705883a 	add	r2,r2,fp
    2af4:	14a5883a 	add	r18,r2,r18
    2af8:	88bfffc4 	addi	r2,r17,-1
    2afc:	e4800c2e 	bgeu	fp,r18,2b30 <__divdf3+0x72c>
    2b00:	90c03e36 	bltu	r18,r3,2bfc <__divdf3+0x7f8>
    2b04:	1c806926 	beq	r3,r18,2cac <__divdf3+0x8a8>
    2b08:	90c7c83a 	sub	r3,r18,r3
    2b0c:	1023883a 	mov	r17,r2
    2b10:	003f5206 	br	285c <__alt_data_end+0xff00285c>
    2b14:	923f0436 	bltu	r18,r8,2728 <__alt_data_end+0xff002728>
    2b18:	800897fa 	slli	r4,r16,31
    2b1c:	9004d07a 	srli	r2,r18,1
    2b20:	8006d07a 	srli	r3,r16,1
    2b24:	902097fa 	slli	r16,r18,31
    2b28:	20a4b03a 	or	r18,r4,r2
    2b2c:	003f0106 	br	2734 <__alt_data_end+0xff002734>
    2b30:	e4bff51e 	bne	fp,r18,2b08 <__alt_data_end+0xff002b08>
    2b34:	85bff22e 	bgeu	r16,r22,2b00 <__alt_data_end+0xff002b00>
    2b38:	e0c7c83a 	sub	r3,fp,r3
    2b3c:	1023883a 	mov	r17,r2
    2b40:	003f4606 	br	285c <__alt_data_end+0xff00285c>
    2b44:	100f883a 	mov	r7,r2
    2b48:	003f2b06 	br	27f8 <__alt_data_end+0xff0027f8>
    2b4c:	180d883a 	mov	r6,r3
    2b50:	003f1306 	br	27a0 <__alt_data_end+0xff0027a0>
    2b54:	813fe436 	bltu	r16,r4,2ae8 <__alt_data_end+0xff002ae8>
    2b58:	0007883a 	mov	r3,zero
    2b5c:	003f3f06 	br	285c <__alt_data_end+0xff00285c>
    2b60:	ba402c36 	bltu	r23,r9,2c14 <__divdf3+0x810>
    2b64:	4dc05426 	beq	r9,r23,2cb8 <__divdf3+0x8b4>
    2b68:	1011883a 	mov	r8,r2
    2b6c:	003f8906 	br	2994 <__alt_data_end+0xff002994>
    2b70:	023fffc4 	movi	r8,-1
    2b74:	003f8806 	br	2998 <__alt_data_end+0xff002998>
    2b78:	1811883a 	mov	r8,r3
    2b7c:	003f5406 	br	28d0 <__alt_data_end+0xff0028d0>
    2b80:	1025883a 	mov	r18,r2
    2b84:	003f6d06 	br	293c <__alt_data_end+0xff00293c>
    2b88:	b827883a 	mov	r19,r23
    2b8c:	003f8206 	br	2998 <__alt_data_end+0xff002998>
    2b90:	010007c4 	movi	r4,31
    2b94:	20c02616 	blt	r4,r3,2c30 <__divdf3+0x82c>
    2b98:	00800804 	movi	r2,32
    2b9c:	10c5c83a 	sub	r2,r2,r3
    2ba0:	888a983a 	sll	r5,r17,r2
    2ba4:	40c8d83a 	srl	r4,r8,r3
    2ba8:	4084983a 	sll	r2,r8,r2
    2bac:	88e2d83a 	srl	r17,r17,r3
    2bb0:	2906b03a 	or	r3,r5,r4
    2bb4:	1004c03a 	cmpne	r2,r2,zero
    2bb8:	1886b03a 	or	r3,r3,r2
    2bbc:	188001cc 	andi	r2,r3,7
    2bc0:	10000726 	beq	r2,zero,2be0 <__divdf3+0x7dc>
    2bc4:	188003cc 	andi	r2,r3,15
    2bc8:	01000104 	movi	r4,4
    2bcc:	11000426 	beq	r2,r4,2be0 <__divdf3+0x7dc>
    2bd0:	1805883a 	mov	r2,r3
    2bd4:	10c00104 	addi	r3,r2,4
    2bd8:	1885803a 	cmpltu	r2,r3,r2
    2bdc:	88a3883a 	add	r17,r17,r2
    2be0:	8880202c 	andhi	r2,r17,128
    2be4:	10002726 	beq	r2,zero,2c84 <__divdf3+0x880>
    2be8:	98c0004c 	andi	r3,r19,1
    2bec:	00800044 	movi	r2,1
    2bf0:	000b883a 	mov	r5,zero
    2bf4:	0025883a 	mov	r18,zero
    2bf8:	003e6106 	br	2580 <__alt_data_end+0xff002580>
    2bfc:	85a1883a 	add	r16,r16,r22
    2c00:	8585803a 	cmpltu	r2,r16,r22
    2c04:	1705883a 	add	r2,r2,fp
    2c08:	14a5883a 	add	r18,r2,r18
    2c0c:	8c7fff84 	addi	r17,r17,-2
    2c10:	003f1106 	br	2858 <__alt_data_end+0xff002858>
    2c14:	b589883a 	add	r4,r22,r22
    2c18:	25ad803a 	cmpltu	r22,r4,r22
    2c1c:	b739883a 	add	fp,r22,fp
    2c20:	40bfff84 	addi	r2,r8,-2
    2c24:	bf2f883a 	add	r23,r23,fp
    2c28:	202d883a 	mov	r22,r4
    2c2c:	003f9306 	br	2a7c <__alt_data_end+0xff002a7c>
    2c30:	013ff844 	movi	r4,-31
    2c34:	2085c83a 	sub	r2,r4,r2
    2c38:	8888d83a 	srl	r4,r17,r2
    2c3c:	00800804 	movi	r2,32
    2c40:	18802126 	beq	r3,r2,2cc8 <__divdf3+0x8c4>
    2c44:	00801004 	movi	r2,64
    2c48:	10c5c83a 	sub	r2,r2,r3
    2c4c:	8884983a 	sll	r2,r17,r2
    2c50:	1204b03a 	or	r2,r2,r8
    2c54:	1004c03a 	cmpne	r2,r2,zero
    2c58:	2084b03a 	or	r2,r4,r2
    2c5c:	144001cc 	andi	r17,r2,7
    2c60:	88000d1e 	bne	r17,zero,2c98 <__divdf3+0x894>
    2c64:	000b883a 	mov	r5,zero
    2c68:	1024d0fa 	srli	r18,r2,3
    2c6c:	98c0004c 	andi	r3,r19,1
    2c70:	0005883a 	mov	r2,zero
    2c74:	9464b03a 	or	r18,r18,r17
    2c78:	003e4106 	br	2580 <__alt_data_end+0xff002580>
    2c7c:	1007883a 	mov	r3,r2
    2c80:	0023883a 	mov	r17,zero
    2c84:	880a927a 	slli	r5,r17,9
    2c88:	1805883a 	mov	r2,r3
    2c8c:	8822977a 	slli	r17,r17,29
    2c90:	280ad33a 	srli	r5,r5,12
    2c94:	003ff406 	br	2c68 <__alt_data_end+0xff002c68>
    2c98:	10c003cc 	andi	r3,r2,15
    2c9c:	01000104 	movi	r4,4
    2ca0:	193ff626 	beq	r3,r4,2c7c <__alt_data_end+0xff002c7c>
    2ca4:	0023883a 	mov	r17,zero
    2ca8:	003fca06 	br	2bd4 <__alt_data_end+0xff002bd4>
    2cac:	813fd336 	bltu	r16,r4,2bfc <__alt_data_end+0xff002bfc>
    2cb0:	1023883a 	mov	r17,r2
    2cb4:	003fa806 	br	2b58 <__alt_data_end+0xff002b58>
    2cb8:	b0ffd636 	bltu	r22,r3,2c14 <__alt_data_end+0xff002c14>
    2cbc:	1011883a 	mov	r8,r2
    2cc0:	b0ff341e 	bne	r22,r3,2994 <__alt_data_end+0xff002994>
    2cc4:	003f3406 	br	2998 <__alt_data_end+0xff002998>
    2cc8:	0005883a 	mov	r2,zero
    2ccc:	003fe006 	br	2c50 <__alt_data_end+0xff002c50>
    2cd0:	00800434 	movhi	r2,16
    2cd4:	89400234 	orhi	r5,r17,8
    2cd8:	10bfffc4 	addi	r2,r2,-1
    2cdc:	b807883a 	mov	r3,r23
    2ce0:	288a703a 	and	r5,r5,r2
    2ce4:	4025883a 	mov	r18,r8
    2ce8:	003e8206 	br	26f4 <__alt_data_end+0xff0026f4>

00002cec <__floatunsidf>:
    2cec:	defffe04 	addi	sp,sp,-8
    2cf0:	dc000015 	stw	r16,0(sp)
    2cf4:	dfc00115 	stw	ra,4(sp)
    2cf8:	2021883a 	mov	r16,r4
    2cfc:	20002226 	beq	r4,zero,2d88 <__floatunsidf+0x9c>
    2d00:	0002d940 	call	2d94 <__clzsi2>
    2d04:	01010784 	movi	r4,1054
    2d08:	2089c83a 	sub	r4,r4,r2
    2d0c:	01810cc4 	movi	r6,1075
    2d10:	310dc83a 	sub	r6,r6,r4
    2d14:	00c007c4 	movi	r3,31
    2d18:	1980120e 	bge	r3,r6,2d64 <__floatunsidf+0x78>
    2d1c:	00c104c4 	movi	r3,1043
    2d20:	1907c83a 	sub	r3,r3,r4
    2d24:	80ca983a 	sll	r5,r16,r3
    2d28:	00800434 	movhi	r2,16
    2d2c:	10bfffc4 	addi	r2,r2,-1
    2d30:	2101ffcc 	andi	r4,r4,2047
    2d34:	0021883a 	mov	r16,zero
    2d38:	288a703a 	and	r5,r5,r2
    2d3c:	2008953a 	slli	r4,r4,20
    2d40:	00c00434 	movhi	r3,16
    2d44:	18ffffc4 	addi	r3,r3,-1
    2d48:	28c6703a 	and	r3,r5,r3
    2d4c:	8005883a 	mov	r2,r16
    2d50:	1906b03a 	or	r3,r3,r4
    2d54:	dfc00117 	ldw	ra,4(sp)
    2d58:	dc000017 	ldw	r16,0(sp)
    2d5c:	dec00204 	addi	sp,sp,8
    2d60:	f800283a 	ret
    2d64:	00c002c4 	movi	r3,11
    2d68:	188bc83a 	sub	r5,r3,r2
    2d6c:	814ad83a 	srl	r5,r16,r5
    2d70:	00c00434 	movhi	r3,16
    2d74:	18ffffc4 	addi	r3,r3,-1
    2d78:	81a0983a 	sll	r16,r16,r6
    2d7c:	2101ffcc 	andi	r4,r4,2047
    2d80:	28ca703a 	and	r5,r5,r3
    2d84:	003fed06 	br	2d3c <__alt_data_end+0xff002d3c>
    2d88:	0009883a 	mov	r4,zero
    2d8c:	000b883a 	mov	r5,zero
    2d90:	003fea06 	br	2d3c <__alt_data_end+0xff002d3c>

00002d94 <__clzsi2>:
    2d94:	00bfffd4 	movui	r2,65535
    2d98:	11000536 	bltu	r2,r4,2db0 <__clzsi2+0x1c>
    2d9c:	00803fc4 	movi	r2,255
    2da0:	11000f36 	bltu	r2,r4,2de0 <__clzsi2+0x4c>
    2da4:	00800804 	movi	r2,32
    2da8:	0007883a 	mov	r3,zero
    2dac:	00000506 	br	2dc4 <__clzsi2+0x30>
    2db0:	00804034 	movhi	r2,256
    2db4:	10bfffc4 	addi	r2,r2,-1
    2db8:	11000c2e 	bgeu	r2,r4,2dec <__clzsi2+0x58>
    2dbc:	00800204 	movi	r2,8
    2dc0:	00c00604 	movi	r3,24
    2dc4:	20c8d83a 	srl	r4,r4,r3
    2dc8:	00c00074 	movhi	r3,1
    2dcc:	18c6b1c4 	addi	r3,r3,6855
    2dd0:	1909883a 	add	r4,r3,r4
    2dd4:	20c00003 	ldbu	r3,0(r4)
    2dd8:	10c5c83a 	sub	r2,r2,r3
    2ddc:	f800283a 	ret
    2de0:	00800604 	movi	r2,24
    2de4:	00c00204 	movi	r3,8
    2de8:	003ff606 	br	2dc4 <__alt_data_end+0xff002dc4>
    2dec:	00800404 	movi	r2,16
    2df0:	1007883a 	mov	r3,r2
    2df4:	003ff306 	br	2dc4 <__alt_data_end+0xff002dc4>

00002df8 <malloc>:
    2df8:	00800074 	movhi	r2,1
    2dfc:	108e5d04 	addi	r2,r2,14708
    2e00:	200b883a 	mov	r5,r4
    2e04:	11000017 	ldw	r4,0(r2)
    2e08:	0002e201 	jmpi	2e20 <_malloc_r>

00002e0c <free>:
    2e0c:	00800074 	movhi	r2,1
    2e10:	108e5d04 	addi	r2,r2,14708
    2e14:	200b883a 	mov	r5,r4
    2e18:	11000017 	ldw	r4,0(r2)
    2e1c:	0007c701 	jmpi	7c70 <_free_r>

00002e20 <_malloc_r>:
    2e20:	defff504 	addi	sp,sp,-44
    2e24:	dc800315 	stw	r18,12(sp)
    2e28:	dfc00a15 	stw	ra,40(sp)
    2e2c:	df000915 	stw	fp,36(sp)
    2e30:	ddc00815 	stw	r23,32(sp)
    2e34:	dd800715 	stw	r22,28(sp)
    2e38:	dd400615 	stw	r21,24(sp)
    2e3c:	dd000515 	stw	r20,20(sp)
    2e40:	dcc00415 	stw	r19,16(sp)
    2e44:	dc400215 	stw	r17,8(sp)
    2e48:	dc000115 	stw	r16,4(sp)
    2e4c:	288002c4 	addi	r2,r5,11
    2e50:	00c00584 	movi	r3,22
    2e54:	2025883a 	mov	r18,r4
    2e58:	18807f2e 	bgeu	r3,r2,3058 <_malloc_r+0x238>
    2e5c:	047ffe04 	movi	r17,-8
    2e60:	1462703a 	and	r17,r2,r17
    2e64:	8800a316 	blt	r17,zero,30f4 <_malloc_r+0x2d4>
    2e68:	8940a236 	bltu	r17,r5,30f4 <_malloc_r+0x2d4>
    2e6c:	000f1140 	call	f114 <__malloc_lock>
    2e70:	00807dc4 	movi	r2,503
    2e74:	1441e92e 	bgeu	r2,r17,361c <_malloc_r+0x7fc>
    2e78:	8804d27a 	srli	r2,r17,9
    2e7c:	1000a126 	beq	r2,zero,3104 <_malloc_r+0x2e4>
    2e80:	00c00104 	movi	r3,4
    2e84:	18811e36 	bltu	r3,r2,3300 <_malloc_r+0x4e0>
    2e88:	8804d1ba 	srli	r2,r17,6
    2e8c:	12000e44 	addi	r8,r2,57
    2e90:	11c00e04 	addi	r7,r2,56
    2e94:	4209883a 	add	r4,r8,r8
    2e98:	04c00074 	movhi	r19,1
    2e9c:	2109883a 	add	r4,r4,r4
    2ea0:	9cc7af04 	addi	r19,r19,7868
    2ea4:	2109883a 	add	r4,r4,r4
    2ea8:	9909883a 	add	r4,r19,r4
    2eac:	24000117 	ldw	r16,4(r4)
    2eb0:	213ffe04 	addi	r4,r4,-8
    2eb4:	24009726 	beq	r4,r16,3114 <_malloc_r+0x2f4>
    2eb8:	80800117 	ldw	r2,4(r16)
    2ebc:	01bfff04 	movi	r6,-4
    2ec0:	014003c4 	movi	r5,15
    2ec4:	1184703a 	and	r2,r2,r6
    2ec8:	1447c83a 	sub	r3,r2,r17
    2ecc:	28c00716 	blt	r5,r3,2eec <_malloc_r+0xcc>
    2ed0:	1800920e 	bge	r3,zero,311c <_malloc_r+0x2fc>
    2ed4:	84000317 	ldw	r16,12(r16)
    2ed8:	24008e26 	beq	r4,r16,3114 <_malloc_r+0x2f4>
    2edc:	80800117 	ldw	r2,4(r16)
    2ee0:	1184703a 	and	r2,r2,r6
    2ee4:	1447c83a 	sub	r3,r2,r17
    2ee8:	28fff90e 	bge	r5,r3,2ed0 <__alt_data_end+0xff002ed0>
    2eec:	3809883a 	mov	r4,r7
    2ef0:	01800074 	movhi	r6,1
    2ef4:	9c000417 	ldw	r16,16(r19)
    2ef8:	3187af04 	addi	r6,r6,7868
    2efc:	32000204 	addi	r8,r6,8
    2f00:	82013426 	beq	r16,r8,33d4 <_malloc_r+0x5b4>
    2f04:	80c00117 	ldw	r3,4(r16)
    2f08:	00bfff04 	movi	r2,-4
    2f0c:	188e703a 	and	r7,r3,r2
    2f10:	3c45c83a 	sub	r2,r7,r17
    2f14:	00c003c4 	movi	r3,15
    2f18:	18811f16 	blt	r3,r2,3398 <_malloc_r+0x578>
    2f1c:	32000515 	stw	r8,20(r6)
    2f20:	32000415 	stw	r8,16(r6)
    2f24:	10007f0e 	bge	r2,zero,3124 <_malloc_r+0x304>
    2f28:	00807fc4 	movi	r2,511
    2f2c:	11c0fd36 	bltu	r2,r7,3324 <_malloc_r+0x504>
    2f30:	3806d0fa 	srli	r3,r7,3
    2f34:	01c00044 	movi	r7,1
    2f38:	30800117 	ldw	r2,4(r6)
    2f3c:	19400044 	addi	r5,r3,1
    2f40:	294b883a 	add	r5,r5,r5
    2f44:	1807d0ba 	srai	r3,r3,2
    2f48:	294b883a 	add	r5,r5,r5
    2f4c:	294b883a 	add	r5,r5,r5
    2f50:	298b883a 	add	r5,r5,r6
    2f54:	38c6983a 	sll	r3,r7,r3
    2f58:	29c00017 	ldw	r7,0(r5)
    2f5c:	2a7ffe04 	addi	r9,r5,-8
    2f60:	1886b03a 	or	r3,r3,r2
    2f64:	82400315 	stw	r9,12(r16)
    2f68:	81c00215 	stw	r7,8(r16)
    2f6c:	30c00115 	stw	r3,4(r6)
    2f70:	2c000015 	stw	r16,0(r5)
    2f74:	3c000315 	stw	r16,12(r7)
    2f78:	2005d0ba 	srai	r2,r4,2
    2f7c:	01400044 	movi	r5,1
    2f80:	288a983a 	sll	r5,r5,r2
    2f84:	19406f36 	bltu	r3,r5,3144 <_malloc_r+0x324>
    2f88:	28c4703a 	and	r2,r5,r3
    2f8c:	10000a1e 	bne	r2,zero,2fb8 <_malloc_r+0x198>
    2f90:	00bfff04 	movi	r2,-4
    2f94:	294b883a 	add	r5,r5,r5
    2f98:	2088703a 	and	r4,r4,r2
    2f9c:	28c4703a 	and	r2,r5,r3
    2fa0:	21000104 	addi	r4,r4,4
    2fa4:	1000041e 	bne	r2,zero,2fb8 <_malloc_r+0x198>
    2fa8:	294b883a 	add	r5,r5,r5
    2fac:	28c4703a 	and	r2,r5,r3
    2fb0:	21000104 	addi	r4,r4,4
    2fb4:	103ffc26 	beq	r2,zero,2fa8 <__alt_data_end+0xff002fa8>
    2fb8:	02bfff04 	movi	r10,-4
    2fbc:	024003c4 	movi	r9,15
    2fc0:	21800044 	addi	r6,r4,1
    2fc4:	318d883a 	add	r6,r6,r6
    2fc8:	318d883a 	add	r6,r6,r6
    2fcc:	318d883a 	add	r6,r6,r6
    2fd0:	998d883a 	add	r6,r19,r6
    2fd4:	333ffe04 	addi	r12,r6,-8
    2fd8:	2017883a 	mov	r11,r4
    2fdc:	31800104 	addi	r6,r6,4
    2fe0:	34000017 	ldw	r16,0(r6)
    2fe4:	31fffd04 	addi	r7,r6,-12
    2fe8:	81c0041e 	bne	r16,r7,2ffc <_malloc_r+0x1dc>
    2fec:	0000fb06 	br	33dc <_malloc_r+0x5bc>
    2ff0:	1801030e 	bge	r3,zero,3400 <_malloc_r+0x5e0>
    2ff4:	84000317 	ldw	r16,12(r16)
    2ff8:	81c0f826 	beq	r16,r7,33dc <_malloc_r+0x5bc>
    2ffc:	80800117 	ldw	r2,4(r16)
    3000:	1284703a 	and	r2,r2,r10
    3004:	1447c83a 	sub	r3,r2,r17
    3008:	48fff90e 	bge	r9,r3,2ff0 <__alt_data_end+0xff002ff0>
    300c:	80800317 	ldw	r2,12(r16)
    3010:	81000217 	ldw	r4,8(r16)
    3014:	89400054 	ori	r5,r17,1
    3018:	81400115 	stw	r5,4(r16)
    301c:	20800315 	stw	r2,12(r4)
    3020:	11000215 	stw	r4,8(r2)
    3024:	8463883a 	add	r17,r16,r17
    3028:	9c400515 	stw	r17,20(r19)
    302c:	9c400415 	stw	r17,16(r19)
    3030:	18800054 	ori	r2,r3,1
    3034:	88800115 	stw	r2,4(r17)
    3038:	8a000315 	stw	r8,12(r17)
    303c:	8a000215 	stw	r8,8(r17)
    3040:	88e3883a 	add	r17,r17,r3
    3044:	88c00015 	stw	r3,0(r17)
    3048:	9009883a 	mov	r4,r18
    304c:	000f1380 	call	f138 <__malloc_unlock>
    3050:	80800204 	addi	r2,r16,8
    3054:	00001b06 	br	30c4 <_malloc_r+0x2a4>
    3058:	04400404 	movi	r17,16
    305c:	89402536 	bltu	r17,r5,30f4 <_malloc_r+0x2d4>
    3060:	000f1140 	call	f114 <__malloc_lock>
    3064:	00800184 	movi	r2,6
    3068:	01000084 	movi	r4,2
    306c:	04c00074 	movhi	r19,1
    3070:	1085883a 	add	r2,r2,r2
    3074:	9cc7af04 	addi	r19,r19,7868
    3078:	1085883a 	add	r2,r2,r2
    307c:	9885883a 	add	r2,r19,r2
    3080:	14000117 	ldw	r16,4(r2)
    3084:	10fffe04 	addi	r3,r2,-8
    3088:	80c0d926 	beq	r16,r3,33f0 <_malloc_r+0x5d0>
    308c:	80c00117 	ldw	r3,4(r16)
    3090:	81000317 	ldw	r4,12(r16)
    3094:	00bfff04 	movi	r2,-4
    3098:	1884703a 	and	r2,r3,r2
    309c:	81400217 	ldw	r5,8(r16)
    30a0:	8085883a 	add	r2,r16,r2
    30a4:	10c00117 	ldw	r3,4(r2)
    30a8:	29000315 	stw	r4,12(r5)
    30ac:	21400215 	stw	r5,8(r4)
    30b0:	18c00054 	ori	r3,r3,1
    30b4:	10c00115 	stw	r3,4(r2)
    30b8:	9009883a 	mov	r4,r18
    30bc:	000f1380 	call	f138 <__malloc_unlock>
    30c0:	80800204 	addi	r2,r16,8
    30c4:	dfc00a17 	ldw	ra,40(sp)
    30c8:	df000917 	ldw	fp,36(sp)
    30cc:	ddc00817 	ldw	r23,32(sp)
    30d0:	dd800717 	ldw	r22,28(sp)
    30d4:	dd400617 	ldw	r21,24(sp)
    30d8:	dd000517 	ldw	r20,20(sp)
    30dc:	dcc00417 	ldw	r19,16(sp)
    30e0:	dc800317 	ldw	r18,12(sp)
    30e4:	dc400217 	ldw	r17,8(sp)
    30e8:	dc000117 	ldw	r16,4(sp)
    30ec:	dec00b04 	addi	sp,sp,44
    30f0:	f800283a 	ret
    30f4:	00800304 	movi	r2,12
    30f8:	90800015 	stw	r2,0(r18)
    30fc:	0005883a 	mov	r2,zero
    3100:	003ff006 	br	30c4 <__alt_data_end+0xff0030c4>
    3104:	01002004 	movi	r4,128
    3108:	02001004 	movi	r8,64
    310c:	01c00fc4 	movi	r7,63
    3110:	003f6106 	br	2e98 <__alt_data_end+0xff002e98>
    3114:	4009883a 	mov	r4,r8
    3118:	003f7506 	br	2ef0 <__alt_data_end+0xff002ef0>
    311c:	81000317 	ldw	r4,12(r16)
    3120:	003fde06 	br	309c <__alt_data_end+0xff00309c>
    3124:	81c5883a 	add	r2,r16,r7
    3128:	11400117 	ldw	r5,4(r2)
    312c:	9009883a 	mov	r4,r18
    3130:	29400054 	ori	r5,r5,1
    3134:	11400115 	stw	r5,4(r2)
    3138:	000f1380 	call	f138 <__malloc_unlock>
    313c:	80800204 	addi	r2,r16,8
    3140:	003fe006 	br	30c4 <__alt_data_end+0xff0030c4>
    3144:	9c000217 	ldw	r16,8(r19)
    3148:	00bfff04 	movi	r2,-4
    314c:	85800117 	ldw	r22,4(r16)
    3150:	b0ac703a 	and	r22,r22,r2
    3154:	b4400336 	bltu	r22,r17,3164 <_malloc_r+0x344>
    3158:	b445c83a 	sub	r2,r22,r17
    315c:	00c003c4 	movi	r3,15
    3160:	18805d16 	blt	r3,r2,32d8 <_malloc_r+0x4b8>
    3164:	05c00074 	movhi	r23,1
    3168:	00800074 	movhi	r2,1
    316c:	10957c04 	addi	r2,r2,22000
    3170:	bdce5a04 	addi	r23,r23,14696
    3174:	15400017 	ldw	r21,0(r2)
    3178:	b8c00017 	ldw	r3,0(r23)
    317c:	00bfffc4 	movi	r2,-1
    3180:	858d883a 	add	r6,r16,r22
    3184:	8d6b883a 	add	r21,r17,r21
    3188:	1880ea26 	beq	r3,r2,3534 <_malloc_r+0x714>
    318c:	ad4403c4 	addi	r21,r21,4111
    3190:	00bc0004 	movi	r2,-4096
    3194:	a8aa703a 	and	r21,r21,r2
    3198:	a80b883a 	mov	r5,r21
    319c:	9009883a 	mov	r4,r18
    31a0:	d9800015 	stw	r6,0(sp)
    31a4:	000376c0 	call	376c <_sbrk_r>
    31a8:	1029883a 	mov	r20,r2
    31ac:	00bfffc4 	movi	r2,-1
    31b0:	d9800017 	ldw	r6,0(sp)
    31b4:	a080e826 	beq	r20,r2,3558 <_malloc_r+0x738>
    31b8:	a180a636 	bltu	r20,r6,3454 <_malloc_r+0x634>
    31bc:	07000074 	movhi	fp,1
    31c0:	e7158a04 	addi	fp,fp,22056
    31c4:	e0800017 	ldw	r2,0(fp)
    31c8:	a887883a 	add	r3,r21,r2
    31cc:	e0c00015 	stw	r3,0(fp)
    31d0:	3500e626 	beq	r6,r20,356c <_malloc_r+0x74c>
    31d4:	b9000017 	ldw	r4,0(r23)
    31d8:	00bfffc4 	movi	r2,-1
    31dc:	2080ee26 	beq	r4,r2,3598 <_malloc_r+0x778>
    31e0:	a185c83a 	sub	r2,r20,r6
    31e4:	10c5883a 	add	r2,r2,r3
    31e8:	e0800015 	stw	r2,0(fp)
    31ec:	a0c001cc 	andi	r3,r20,7
    31f0:	1800bc26 	beq	r3,zero,34e4 <_malloc_r+0x6c4>
    31f4:	a0e9c83a 	sub	r20,r20,r3
    31f8:	00840204 	movi	r2,4104
    31fc:	a5000204 	addi	r20,r20,8
    3200:	10c7c83a 	sub	r3,r2,r3
    3204:	a545883a 	add	r2,r20,r21
    3208:	1083ffcc 	andi	r2,r2,4095
    320c:	18abc83a 	sub	r21,r3,r2
    3210:	a80b883a 	mov	r5,r21
    3214:	9009883a 	mov	r4,r18
    3218:	000376c0 	call	376c <_sbrk_r>
    321c:	00ffffc4 	movi	r3,-1
    3220:	10c0e126 	beq	r2,r3,35a8 <_malloc_r+0x788>
    3224:	1505c83a 	sub	r2,r2,r20
    3228:	1545883a 	add	r2,r2,r21
    322c:	10800054 	ori	r2,r2,1
    3230:	e0c00017 	ldw	r3,0(fp)
    3234:	9d000215 	stw	r20,8(r19)
    3238:	a0800115 	stw	r2,4(r20)
    323c:	a8c7883a 	add	r3,r21,r3
    3240:	e0c00015 	stw	r3,0(fp)
    3244:	84c00e26 	beq	r16,r19,3280 <_malloc_r+0x460>
    3248:	018003c4 	movi	r6,15
    324c:	3580a72e 	bgeu	r6,r22,34ec <_malloc_r+0x6cc>
    3250:	81400117 	ldw	r5,4(r16)
    3254:	013ffe04 	movi	r4,-8
    3258:	b0bffd04 	addi	r2,r22,-12
    325c:	1104703a 	and	r2,r2,r4
    3260:	2900004c 	andi	r4,r5,1
    3264:	2088b03a 	or	r4,r4,r2
    3268:	81000115 	stw	r4,4(r16)
    326c:	01400144 	movi	r5,5
    3270:	8089883a 	add	r4,r16,r2
    3274:	21400115 	stw	r5,4(r4)
    3278:	21400215 	stw	r5,8(r4)
    327c:	3080cd36 	bltu	r6,r2,35b4 <_malloc_r+0x794>
    3280:	00800074 	movhi	r2,1
    3284:	10957b04 	addi	r2,r2,21996
    3288:	11000017 	ldw	r4,0(r2)
    328c:	20c0012e 	bgeu	r4,r3,3294 <_malloc_r+0x474>
    3290:	10c00015 	stw	r3,0(r2)
    3294:	00800074 	movhi	r2,1
    3298:	10957a04 	addi	r2,r2,21992
    329c:	11000017 	ldw	r4,0(r2)
    32a0:	9c000217 	ldw	r16,8(r19)
    32a4:	20c0012e 	bgeu	r4,r3,32ac <_malloc_r+0x48c>
    32a8:	10c00015 	stw	r3,0(r2)
    32ac:	80c00117 	ldw	r3,4(r16)
    32b0:	00bfff04 	movi	r2,-4
    32b4:	1886703a 	and	r3,r3,r2
    32b8:	1c45c83a 	sub	r2,r3,r17
    32bc:	1c400236 	bltu	r3,r17,32c8 <_malloc_r+0x4a8>
    32c0:	00c003c4 	movi	r3,15
    32c4:	18800416 	blt	r3,r2,32d8 <_malloc_r+0x4b8>
    32c8:	9009883a 	mov	r4,r18
    32cc:	000f1380 	call	f138 <__malloc_unlock>
    32d0:	0005883a 	mov	r2,zero
    32d4:	003f7b06 	br	30c4 <__alt_data_end+0xff0030c4>
    32d8:	88c00054 	ori	r3,r17,1
    32dc:	80c00115 	stw	r3,4(r16)
    32e0:	8463883a 	add	r17,r16,r17
    32e4:	10800054 	ori	r2,r2,1
    32e8:	9c400215 	stw	r17,8(r19)
    32ec:	88800115 	stw	r2,4(r17)
    32f0:	9009883a 	mov	r4,r18
    32f4:	000f1380 	call	f138 <__malloc_unlock>
    32f8:	80800204 	addi	r2,r16,8
    32fc:	003f7106 	br	30c4 <__alt_data_end+0xff0030c4>
    3300:	00c00504 	movi	r3,20
    3304:	18804a2e 	bgeu	r3,r2,3430 <_malloc_r+0x610>
    3308:	00c01504 	movi	r3,84
    330c:	18806e36 	bltu	r3,r2,34c8 <_malloc_r+0x6a8>
    3310:	8804d33a 	srli	r2,r17,12
    3314:	12001bc4 	addi	r8,r2,111
    3318:	11c01b84 	addi	r7,r2,110
    331c:	4209883a 	add	r4,r8,r8
    3320:	003edd06 	br	2e98 <__alt_data_end+0xff002e98>
    3324:	3804d27a 	srli	r2,r7,9
    3328:	00c00104 	movi	r3,4
    332c:	1880442e 	bgeu	r3,r2,3440 <_malloc_r+0x620>
    3330:	00c00504 	movi	r3,20
    3334:	18808136 	bltu	r3,r2,353c <_malloc_r+0x71c>
    3338:	11401704 	addi	r5,r2,92
    333c:	10c016c4 	addi	r3,r2,91
    3340:	294b883a 	add	r5,r5,r5
    3344:	294b883a 	add	r5,r5,r5
    3348:	294b883a 	add	r5,r5,r5
    334c:	994b883a 	add	r5,r19,r5
    3350:	28800017 	ldw	r2,0(r5)
    3354:	01800074 	movhi	r6,1
    3358:	297ffe04 	addi	r5,r5,-8
    335c:	3187af04 	addi	r6,r6,7868
    3360:	28806526 	beq	r5,r2,34f8 <_malloc_r+0x6d8>
    3364:	01bfff04 	movi	r6,-4
    3368:	10c00117 	ldw	r3,4(r2)
    336c:	1986703a 	and	r3,r3,r6
    3370:	38c0022e 	bgeu	r7,r3,337c <_malloc_r+0x55c>
    3374:	10800217 	ldw	r2,8(r2)
    3378:	28bffb1e 	bne	r5,r2,3368 <__alt_data_end+0xff003368>
    337c:	11400317 	ldw	r5,12(r2)
    3380:	98c00117 	ldw	r3,4(r19)
    3384:	81400315 	stw	r5,12(r16)
    3388:	80800215 	stw	r2,8(r16)
    338c:	2c000215 	stw	r16,8(r5)
    3390:	14000315 	stw	r16,12(r2)
    3394:	003ef806 	br	2f78 <__alt_data_end+0xff002f78>
    3398:	88c00054 	ori	r3,r17,1
    339c:	80c00115 	stw	r3,4(r16)
    33a0:	8463883a 	add	r17,r16,r17
    33a4:	34400515 	stw	r17,20(r6)
    33a8:	34400415 	stw	r17,16(r6)
    33ac:	10c00054 	ori	r3,r2,1
    33b0:	8a000315 	stw	r8,12(r17)
    33b4:	8a000215 	stw	r8,8(r17)
    33b8:	88c00115 	stw	r3,4(r17)
    33bc:	88a3883a 	add	r17,r17,r2
    33c0:	88800015 	stw	r2,0(r17)
    33c4:	9009883a 	mov	r4,r18
    33c8:	000f1380 	call	f138 <__malloc_unlock>
    33cc:	80800204 	addi	r2,r16,8
    33d0:	003f3c06 	br	30c4 <__alt_data_end+0xff0030c4>
    33d4:	30c00117 	ldw	r3,4(r6)
    33d8:	003ee706 	br	2f78 <__alt_data_end+0xff002f78>
    33dc:	5ac00044 	addi	r11,r11,1
    33e0:	588000cc 	andi	r2,r11,3
    33e4:	31800204 	addi	r6,r6,8
    33e8:	103efd1e 	bne	r2,zero,2fe0 <__alt_data_end+0xff002fe0>
    33ec:	00002406 	br	3480 <_malloc_r+0x660>
    33f0:	14000317 	ldw	r16,12(r2)
    33f4:	143f251e 	bne	r2,r16,308c <__alt_data_end+0xff00308c>
    33f8:	21000084 	addi	r4,r4,2
    33fc:	003ebc06 	br	2ef0 <__alt_data_end+0xff002ef0>
    3400:	8085883a 	add	r2,r16,r2
    3404:	10c00117 	ldw	r3,4(r2)
    3408:	81000317 	ldw	r4,12(r16)
    340c:	81400217 	ldw	r5,8(r16)
    3410:	18c00054 	ori	r3,r3,1
    3414:	10c00115 	stw	r3,4(r2)
    3418:	29000315 	stw	r4,12(r5)
    341c:	21400215 	stw	r5,8(r4)
    3420:	9009883a 	mov	r4,r18
    3424:	000f1380 	call	f138 <__malloc_unlock>
    3428:	80800204 	addi	r2,r16,8
    342c:	003f2506 	br	30c4 <__alt_data_end+0xff0030c4>
    3430:	12001704 	addi	r8,r2,92
    3434:	11c016c4 	addi	r7,r2,91
    3438:	4209883a 	add	r4,r8,r8
    343c:	003e9606 	br	2e98 <__alt_data_end+0xff002e98>
    3440:	3804d1ba 	srli	r2,r7,6
    3444:	11400e44 	addi	r5,r2,57
    3448:	10c00e04 	addi	r3,r2,56
    344c:	294b883a 	add	r5,r5,r5
    3450:	003fbc06 	br	3344 <__alt_data_end+0xff003344>
    3454:	84ff5926 	beq	r16,r19,31bc <__alt_data_end+0xff0031bc>
    3458:	00800074 	movhi	r2,1
    345c:	1087af04 	addi	r2,r2,7868
    3460:	14000217 	ldw	r16,8(r2)
    3464:	00bfff04 	movi	r2,-4
    3468:	80c00117 	ldw	r3,4(r16)
    346c:	1886703a 	and	r3,r3,r2
    3470:	003f9106 	br	32b8 <__alt_data_end+0xff0032b8>
    3474:	60800217 	ldw	r2,8(r12)
    3478:	213fffc4 	addi	r4,r4,-1
    347c:	1300651e 	bne	r2,r12,3614 <_malloc_r+0x7f4>
    3480:	208000cc 	andi	r2,r4,3
    3484:	633ffe04 	addi	r12,r12,-8
    3488:	103ffa1e 	bne	r2,zero,3474 <__alt_data_end+0xff003474>
    348c:	98800117 	ldw	r2,4(r19)
    3490:	0146303a 	nor	r3,zero,r5
    3494:	1884703a 	and	r2,r3,r2
    3498:	98800115 	stw	r2,4(r19)
    349c:	294b883a 	add	r5,r5,r5
    34a0:	117f2836 	bltu	r2,r5,3144 <__alt_data_end+0xff003144>
    34a4:	283f2726 	beq	r5,zero,3144 <__alt_data_end+0xff003144>
    34a8:	2886703a 	and	r3,r5,r2
    34ac:	5809883a 	mov	r4,r11
    34b0:	183ec31e 	bne	r3,zero,2fc0 <__alt_data_end+0xff002fc0>
    34b4:	294b883a 	add	r5,r5,r5
    34b8:	2886703a 	and	r3,r5,r2
    34bc:	21000104 	addi	r4,r4,4
    34c0:	183ffc26 	beq	r3,zero,34b4 <__alt_data_end+0xff0034b4>
    34c4:	003ebe06 	br	2fc0 <__alt_data_end+0xff002fc0>
    34c8:	00c05504 	movi	r3,340
    34cc:	18801236 	bltu	r3,r2,3518 <_malloc_r+0x6f8>
    34d0:	8804d3fa 	srli	r2,r17,15
    34d4:	12001e04 	addi	r8,r2,120
    34d8:	11c01dc4 	addi	r7,r2,119
    34dc:	4209883a 	add	r4,r8,r8
    34e0:	003e6d06 	br	2e98 <__alt_data_end+0xff002e98>
    34e4:	00c40004 	movi	r3,4096
    34e8:	003f4606 	br	3204 <__alt_data_end+0xff003204>
    34ec:	00800044 	movi	r2,1
    34f0:	a0800115 	stw	r2,4(r20)
    34f4:	003f7406 	br	32c8 <__alt_data_end+0xff0032c8>
    34f8:	1805d0ba 	srai	r2,r3,2
    34fc:	01c00044 	movi	r7,1
    3500:	30c00117 	ldw	r3,4(r6)
    3504:	388e983a 	sll	r7,r7,r2
    3508:	2805883a 	mov	r2,r5
    350c:	38c6b03a 	or	r3,r7,r3
    3510:	30c00115 	stw	r3,4(r6)
    3514:	003f9b06 	br	3384 <__alt_data_end+0xff003384>
    3518:	00c15504 	movi	r3,1364
    351c:	18801a36 	bltu	r3,r2,3588 <_malloc_r+0x768>
    3520:	8804d4ba 	srli	r2,r17,18
    3524:	12001f44 	addi	r8,r2,125
    3528:	11c01f04 	addi	r7,r2,124
    352c:	4209883a 	add	r4,r8,r8
    3530:	003e5906 	br	2e98 <__alt_data_end+0xff002e98>
    3534:	ad400404 	addi	r21,r21,16
    3538:	003f1706 	br	3198 <__alt_data_end+0xff003198>
    353c:	00c01504 	movi	r3,84
    3540:	18802336 	bltu	r3,r2,35d0 <_malloc_r+0x7b0>
    3544:	3804d33a 	srli	r2,r7,12
    3548:	11401bc4 	addi	r5,r2,111
    354c:	10c01b84 	addi	r3,r2,110
    3550:	294b883a 	add	r5,r5,r5
    3554:	003f7b06 	br	3344 <__alt_data_end+0xff003344>
    3558:	9c000217 	ldw	r16,8(r19)
    355c:	00bfff04 	movi	r2,-4
    3560:	80c00117 	ldw	r3,4(r16)
    3564:	1886703a 	and	r3,r3,r2
    3568:	003f5306 	br	32b8 <__alt_data_end+0xff0032b8>
    356c:	3083ffcc 	andi	r2,r6,4095
    3570:	103f181e 	bne	r2,zero,31d4 <__alt_data_end+0xff0031d4>
    3574:	99000217 	ldw	r4,8(r19)
    3578:	b545883a 	add	r2,r22,r21
    357c:	10800054 	ori	r2,r2,1
    3580:	20800115 	stw	r2,4(r4)
    3584:	003f3e06 	br	3280 <__alt_data_end+0xff003280>
    3588:	01003f84 	movi	r4,254
    358c:	02001fc4 	movi	r8,127
    3590:	01c01f84 	movi	r7,126
    3594:	003e4006 	br	2e98 <__alt_data_end+0xff002e98>
    3598:	00800074 	movhi	r2,1
    359c:	108e5a04 	addi	r2,r2,14696
    35a0:	15000015 	stw	r20,0(r2)
    35a4:	003f1106 	br	31ec <__alt_data_end+0xff0031ec>
    35a8:	00800044 	movi	r2,1
    35ac:	002b883a 	mov	r21,zero
    35b0:	003f1f06 	br	3230 <__alt_data_end+0xff003230>
    35b4:	81400204 	addi	r5,r16,8
    35b8:	9009883a 	mov	r4,r18
    35bc:	0007c700 	call	7c70 <_free_r>
    35c0:	00800074 	movhi	r2,1
    35c4:	10958a04 	addi	r2,r2,22056
    35c8:	10c00017 	ldw	r3,0(r2)
    35cc:	003f2c06 	br	3280 <__alt_data_end+0xff003280>
    35d0:	00c05504 	movi	r3,340
    35d4:	18800536 	bltu	r3,r2,35ec <_malloc_r+0x7cc>
    35d8:	3804d3fa 	srli	r2,r7,15
    35dc:	11401e04 	addi	r5,r2,120
    35e0:	10c01dc4 	addi	r3,r2,119
    35e4:	294b883a 	add	r5,r5,r5
    35e8:	003f5606 	br	3344 <__alt_data_end+0xff003344>
    35ec:	00c15504 	movi	r3,1364
    35f0:	18800536 	bltu	r3,r2,3608 <_malloc_r+0x7e8>
    35f4:	3804d4ba 	srli	r2,r7,18
    35f8:	11401f44 	addi	r5,r2,125
    35fc:	10c01f04 	addi	r3,r2,124
    3600:	294b883a 	add	r5,r5,r5
    3604:	003f4f06 	br	3344 <__alt_data_end+0xff003344>
    3608:	01403f84 	movi	r5,254
    360c:	00c01f84 	movi	r3,126
    3610:	003f4c06 	br	3344 <__alt_data_end+0xff003344>
    3614:	98800117 	ldw	r2,4(r19)
    3618:	003fa006 	br	349c <__alt_data_end+0xff00349c>
    361c:	8808d0fa 	srli	r4,r17,3
    3620:	20800044 	addi	r2,r4,1
    3624:	1085883a 	add	r2,r2,r2
    3628:	003e9006 	br	306c <__alt_data_end+0xff00306c>

0000362c <_printf_r>:
    362c:	defffd04 	addi	sp,sp,-12
    3630:	2805883a 	mov	r2,r5
    3634:	dfc00015 	stw	ra,0(sp)
    3638:	d9800115 	stw	r6,4(sp)
    363c:	d9c00215 	stw	r7,8(sp)
    3640:	21400217 	ldw	r5,8(r4)
    3644:	d9c00104 	addi	r7,sp,4
    3648:	100d883a 	mov	r6,r2
    364c:	00038580 	call	3858 <___vfprintf_internal_r>
    3650:	dfc00017 	ldw	ra,0(sp)
    3654:	dec00304 	addi	sp,sp,12
    3658:	f800283a 	ret

0000365c <printf>:
    365c:	defffc04 	addi	sp,sp,-16
    3660:	dfc00015 	stw	ra,0(sp)
    3664:	d9400115 	stw	r5,4(sp)
    3668:	d9800215 	stw	r6,8(sp)
    366c:	d9c00315 	stw	r7,12(sp)
    3670:	00800074 	movhi	r2,1
    3674:	108e5d04 	addi	r2,r2,14708
    3678:	10800017 	ldw	r2,0(r2)
    367c:	200b883a 	mov	r5,r4
    3680:	d9800104 	addi	r6,sp,4
    3684:	11000217 	ldw	r4,8(r2)
    3688:	0005a500 	call	5a50 <__vfprintf_internal>
    368c:	dfc00017 	ldw	ra,0(sp)
    3690:	dec00404 	addi	sp,sp,16
    3694:	f800283a 	ret

00003698 <_puts_r>:
    3698:	defff604 	addi	sp,sp,-40
    369c:	dc000715 	stw	r16,28(sp)
    36a0:	2021883a 	mov	r16,r4
    36a4:	2809883a 	mov	r4,r5
    36a8:	dc400815 	stw	r17,32(sp)
    36ac:	dfc00915 	stw	ra,36(sp)
    36b0:	2823883a 	mov	r17,r5
    36b4:	00037c00 	call	37c0 <strlen>
    36b8:	10c00044 	addi	r3,r2,1
    36bc:	d8800115 	stw	r2,4(sp)
    36c0:	00800074 	movhi	r2,1
    36c4:	10869804 	addi	r2,r2,6752
    36c8:	d8800215 	stw	r2,8(sp)
    36cc:	00800044 	movi	r2,1
    36d0:	d8800315 	stw	r2,12(sp)
    36d4:	00800084 	movi	r2,2
    36d8:	dc400015 	stw	r17,0(sp)
    36dc:	d8c00615 	stw	r3,24(sp)
    36e0:	dec00415 	stw	sp,16(sp)
    36e4:	d8800515 	stw	r2,20(sp)
    36e8:	80000226 	beq	r16,zero,36f4 <_puts_r+0x5c>
    36ec:	80800e17 	ldw	r2,56(r16)
    36f0:	10001426 	beq	r2,zero,3744 <_puts_r+0xac>
    36f4:	81400217 	ldw	r5,8(r16)
    36f8:	2880030b 	ldhu	r2,12(r5)
    36fc:	10c8000c 	andi	r3,r2,8192
    3700:	1800061e 	bne	r3,zero,371c <_puts_r+0x84>
    3704:	29001917 	ldw	r4,100(r5)
    3708:	00f7ffc4 	movi	r3,-8193
    370c:	10880014 	ori	r2,r2,8192
    3710:	20c6703a 	and	r3,r4,r3
    3714:	2880030d 	sth	r2,12(r5)
    3718:	28c01915 	stw	r3,100(r5)
    371c:	d9800404 	addi	r6,sp,16
    3720:	8009883a 	mov	r4,r16
    3724:	0007f800 	call	7f80 <__sfvwrite_r>
    3728:	1000091e 	bne	r2,zero,3750 <_puts_r+0xb8>
    372c:	00800284 	movi	r2,10
    3730:	dfc00917 	ldw	ra,36(sp)
    3734:	dc400817 	ldw	r17,32(sp)
    3738:	dc000717 	ldw	r16,28(sp)
    373c:	dec00a04 	addi	sp,sp,40
    3740:	f800283a 	ret
    3744:	8009883a 	mov	r4,r16
    3748:	0007afc0 	call	7afc <__sinit>
    374c:	003fe906 	br	36f4 <__alt_data_end+0xff0036f4>
    3750:	00bfffc4 	movi	r2,-1
    3754:	003ff606 	br	3730 <__alt_data_end+0xff003730>

00003758 <puts>:
    3758:	00800074 	movhi	r2,1
    375c:	108e5d04 	addi	r2,r2,14708
    3760:	200b883a 	mov	r5,r4
    3764:	11000017 	ldw	r4,0(r2)
    3768:	00036981 	jmpi	3698 <_puts_r>

0000376c <_sbrk_r>:
    376c:	defffd04 	addi	sp,sp,-12
    3770:	dc000015 	stw	r16,0(sp)
    3774:	04000074 	movhi	r16,1
    3778:	dc400115 	stw	r17,4(sp)
    377c:	84157d04 	addi	r16,r16,22004
    3780:	2023883a 	mov	r17,r4
    3784:	2809883a 	mov	r4,r5
    3788:	dfc00215 	stw	ra,8(sp)
    378c:	80000015 	stw	zero,0(r16)
    3790:	000f2f80 	call	f2f8 <sbrk>
    3794:	00ffffc4 	movi	r3,-1
    3798:	10c00526 	beq	r2,r3,37b0 <_sbrk_r+0x44>
    379c:	dfc00217 	ldw	ra,8(sp)
    37a0:	dc400117 	ldw	r17,4(sp)
    37a4:	dc000017 	ldw	r16,0(sp)
    37a8:	dec00304 	addi	sp,sp,12
    37ac:	f800283a 	ret
    37b0:	80c00017 	ldw	r3,0(r16)
    37b4:	183ff926 	beq	r3,zero,379c <__alt_data_end+0xff00379c>
    37b8:	88c00015 	stw	r3,0(r17)
    37bc:	003ff706 	br	379c <__alt_data_end+0xff00379c>

000037c0 <strlen>:
    37c0:	208000cc 	andi	r2,r4,3
    37c4:	10002026 	beq	r2,zero,3848 <strlen+0x88>
    37c8:	20800007 	ldb	r2,0(r4)
    37cc:	10002026 	beq	r2,zero,3850 <strlen+0x90>
    37d0:	2005883a 	mov	r2,r4
    37d4:	00000206 	br	37e0 <strlen+0x20>
    37d8:	10c00007 	ldb	r3,0(r2)
    37dc:	18001826 	beq	r3,zero,3840 <strlen+0x80>
    37e0:	10800044 	addi	r2,r2,1
    37e4:	10c000cc 	andi	r3,r2,3
    37e8:	183ffb1e 	bne	r3,zero,37d8 <__alt_data_end+0xff0037d8>
    37ec:	10c00017 	ldw	r3,0(r2)
    37f0:	01ffbff4 	movhi	r7,65279
    37f4:	39ffbfc4 	addi	r7,r7,-257
    37f8:	00ca303a 	nor	r5,zero,r3
    37fc:	01a02074 	movhi	r6,32897
    3800:	19c7883a 	add	r3,r3,r7
    3804:	31a02004 	addi	r6,r6,-32640
    3808:	1946703a 	and	r3,r3,r5
    380c:	1986703a 	and	r3,r3,r6
    3810:	1800091e 	bne	r3,zero,3838 <strlen+0x78>
    3814:	10800104 	addi	r2,r2,4
    3818:	10c00017 	ldw	r3,0(r2)
    381c:	19cb883a 	add	r5,r3,r7
    3820:	00c6303a 	nor	r3,zero,r3
    3824:	28c6703a 	and	r3,r5,r3
    3828:	1986703a 	and	r3,r3,r6
    382c:	183ff926 	beq	r3,zero,3814 <__alt_data_end+0xff003814>
    3830:	00000106 	br	3838 <strlen+0x78>
    3834:	10800044 	addi	r2,r2,1
    3838:	10c00007 	ldb	r3,0(r2)
    383c:	183ffd1e 	bne	r3,zero,3834 <__alt_data_end+0xff003834>
    3840:	1105c83a 	sub	r2,r2,r4
    3844:	f800283a 	ret
    3848:	2005883a 	mov	r2,r4
    384c:	003fe706 	br	37ec <__alt_data_end+0xff0037ec>
    3850:	0005883a 	mov	r2,zero
    3854:	f800283a 	ret

00003858 <___vfprintf_internal_r>:
    3858:	deffb804 	addi	sp,sp,-288
    385c:	dfc04715 	stw	ra,284(sp)
    3860:	ddc04515 	stw	r23,276(sp)
    3864:	dd404315 	stw	r21,268(sp)
    3868:	d9002c15 	stw	r4,176(sp)
    386c:	282f883a 	mov	r23,r5
    3870:	302b883a 	mov	r21,r6
    3874:	d9c02d15 	stw	r7,180(sp)
    3878:	df004615 	stw	fp,280(sp)
    387c:	dd804415 	stw	r22,272(sp)
    3880:	dd004215 	stw	r20,264(sp)
    3884:	dcc04115 	stw	r19,260(sp)
    3888:	dc804015 	stw	r18,256(sp)
    388c:	dc403f15 	stw	r17,252(sp)
    3890:	dc003e15 	stw	r16,248(sp)
    3894:	00086700 	call	8670 <_localeconv_r>
    3898:	10800017 	ldw	r2,0(r2)
    389c:	1009883a 	mov	r4,r2
    38a0:	d8803415 	stw	r2,208(sp)
    38a4:	00037c00 	call	37c0 <strlen>
    38a8:	d8803715 	stw	r2,220(sp)
    38ac:	d8802c17 	ldw	r2,176(sp)
    38b0:	10000226 	beq	r2,zero,38bc <___vfprintf_internal_r+0x64>
    38b4:	10800e17 	ldw	r2,56(r2)
    38b8:	1000f926 	beq	r2,zero,3ca0 <___vfprintf_internal_r+0x448>
    38bc:	b880030b 	ldhu	r2,12(r23)
    38c0:	10c8000c 	andi	r3,r2,8192
    38c4:	1800061e 	bne	r3,zero,38e0 <___vfprintf_internal_r+0x88>
    38c8:	b9001917 	ldw	r4,100(r23)
    38cc:	00f7ffc4 	movi	r3,-8193
    38d0:	10880014 	ori	r2,r2,8192
    38d4:	20c6703a 	and	r3,r4,r3
    38d8:	b880030d 	sth	r2,12(r23)
    38dc:	b8c01915 	stw	r3,100(r23)
    38e0:	10c0020c 	andi	r3,r2,8
    38e4:	1800c126 	beq	r3,zero,3bec <___vfprintf_internal_r+0x394>
    38e8:	b8c00417 	ldw	r3,16(r23)
    38ec:	1800bf26 	beq	r3,zero,3bec <___vfprintf_internal_r+0x394>
    38f0:	1080068c 	andi	r2,r2,26
    38f4:	00c00284 	movi	r3,10
    38f8:	10c0c426 	beq	r2,r3,3c0c <___vfprintf_internal_r+0x3b4>
    38fc:	d8c00404 	addi	r3,sp,16
    3900:	05000074 	movhi	r20,1
    3904:	d9001e04 	addi	r4,sp,120
    3908:	a5070284 	addi	r20,r20,7178
    390c:	d8c01e15 	stw	r3,120(sp)
    3910:	d8002015 	stw	zero,128(sp)
    3914:	d8001f15 	stw	zero,124(sp)
    3918:	d8003315 	stw	zero,204(sp)
    391c:	d8003615 	stw	zero,216(sp)
    3920:	d8003815 	stw	zero,224(sp)
    3924:	1811883a 	mov	r8,r3
    3928:	d8003915 	stw	zero,228(sp)
    392c:	d8003a15 	stw	zero,232(sp)
    3930:	d8002f15 	stw	zero,188(sp)
    3934:	d9002815 	stw	r4,160(sp)
    3938:	a8800007 	ldb	r2,0(r21)
    393c:	10027b26 	beq	r2,zero,432c <___vfprintf_internal_r+0xad4>
    3940:	00c00944 	movi	r3,37
    3944:	a821883a 	mov	r16,r21
    3948:	10c0021e 	bne	r2,r3,3954 <___vfprintf_internal_r+0xfc>
    394c:	00001406 	br	39a0 <___vfprintf_internal_r+0x148>
    3950:	10c00326 	beq	r2,r3,3960 <___vfprintf_internal_r+0x108>
    3954:	84000044 	addi	r16,r16,1
    3958:	80800007 	ldb	r2,0(r16)
    395c:	103ffc1e 	bne	r2,zero,3950 <__alt_data_end+0xff003950>
    3960:	8563c83a 	sub	r17,r16,r21
    3964:	88000e26 	beq	r17,zero,39a0 <___vfprintf_internal_r+0x148>
    3968:	d8c02017 	ldw	r3,128(sp)
    396c:	d8801f17 	ldw	r2,124(sp)
    3970:	45400015 	stw	r21,0(r8)
    3974:	1c47883a 	add	r3,r3,r17
    3978:	10800044 	addi	r2,r2,1
    397c:	d8c02015 	stw	r3,128(sp)
    3980:	44400115 	stw	r17,4(r8)
    3984:	d8801f15 	stw	r2,124(sp)
    3988:	00c001c4 	movi	r3,7
    398c:	1880a716 	blt	r3,r2,3c2c <___vfprintf_internal_r+0x3d4>
    3990:	42000204 	addi	r8,r8,8
    3994:	d9402f17 	ldw	r5,188(sp)
    3998:	2c4b883a 	add	r5,r5,r17
    399c:	d9402f15 	stw	r5,188(sp)
    39a0:	80800007 	ldb	r2,0(r16)
    39a4:	1000a826 	beq	r2,zero,3c48 <___vfprintf_internal_r+0x3f0>
    39a8:	84400047 	ldb	r17,1(r16)
    39ac:	00bfffc4 	movi	r2,-1
    39b0:	85400044 	addi	r21,r16,1
    39b4:	d8002785 	stb	zero,158(sp)
    39b8:	0007883a 	mov	r3,zero
    39bc:	000f883a 	mov	r7,zero
    39c0:	d8802915 	stw	r2,164(sp)
    39c4:	d8003115 	stw	zero,196(sp)
    39c8:	0025883a 	mov	r18,zero
    39cc:	01401604 	movi	r5,88
    39d0:	01800244 	movi	r6,9
    39d4:	02800a84 	movi	r10,42
    39d8:	02401b04 	movi	r9,108
    39dc:	ad400044 	addi	r21,r21,1
    39e0:	88bff804 	addi	r2,r17,-32
    39e4:	28830436 	bltu	r5,r2,45f8 <___vfprintf_internal_r+0xda0>
    39e8:	100490ba 	slli	r2,r2,2
    39ec:	01000034 	movhi	r4,0
    39f0:	210e8004 	addi	r4,r4,14848
    39f4:	1105883a 	add	r2,r2,r4
    39f8:	10800017 	ldw	r2,0(r2)
    39fc:	1000683a 	jmp	r2
    3a00:	00004518 	cmpnei	zero,zero,276
    3a04:	000045f8 	rdprs	zero,zero,279
    3a08:	000045f8 	rdprs	zero,zero,279
    3a0c:	00004538 	rdprs	zero,zero,276
    3a10:	000045f8 	rdprs	zero,zero,279
    3a14:	000045f8 	rdprs	zero,zero,279
    3a18:	000045f8 	rdprs	zero,zero,279
    3a1c:	000045f8 	rdprs	zero,zero,279
    3a20:	000045f8 	rdprs	zero,zero,279
    3a24:	000045f8 	rdprs	zero,zero,279
    3a28:	00003cac 	andhi	zero,zero,242
    3a2c:	00004454 	movui	zero,273
    3a30:	000045f8 	rdprs	zero,zero,279
    3a34:	00003b74 	movhi	zero,237
    3a38:	00003cd4 	movui	zero,243
    3a3c:	000045f8 	rdprs	zero,zero,279
    3a40:	00003d14 	movui	zero,244
    3a44:	00003d20 	cmpeqi	zero,zero,244
    3a48:	00003d20 	cmpeqi	zero,zero,244
    3a4c:	00003d20 	cmpeqi	zero,zero,244
    3a50:	00003d20 	cmpeqi	zero,zero,244
    3a54:	00003d20 	cmpeqi	zero,zero,244
    3a58:	00003d20 	cmpeqi	zero,zero,244
    3a5c:	00003d20 	cmpeqi	zero,zero,244
    3a60:	00003d20 	cmpeqi	zero,zero,244
    3a64:	00003d20 	cmpeqi	zero,zero,244
    3a68:	000045f8 	rdprs	zero,zero,279
    3a6c:	000045f8 	rdprs	zero,zero,279
    3a70:	000045f8 	rdprs	zero,zero,279
    3a74:	000045f8 	rdprs	zero,zero,279
    3a78:	000045f8 	rdprs	zero,zero,279
    3a7c:	000045f8 	rdprs	zero,zero,279
    3a80:	000045f8 	rdprs	zero,zero,279
    3a84:	000045f8 	rdprs	zero,zero,279
    3a88:	000045f8 	rdprs	zero,zero,279
    3a8c:	000045f8 	rdprs	zero,zero,279
    3a90:	00003d54 	movui	zero,245
    3a94:	00003e10 	cmplti	zero,zero,248
    3a98:	000045f8 	rdprs	zero,zero,279
    3a9c:	00003e10 	cmplti	zero,zero,248
    3aa0:	000045f8 	rdprs	zero,zero,279
    3aa4:	000045f8 	rdprs	zero,zero,279
    3aa8:	000045f8 	rdprs	zero,zero,279
    3aac:	000045f8 	rdprs	zero,zero,279
    3ab0:	00003eb0 	cmpltui	zero,zero,250
    3ab4:	000045f8 	rdprs	zero,zero,279
    3ab8:	000045f8 	rdprs	zero,zero,279
    3abc:	00003ebc 	xorhi	zero,zero,250
    3ac0:	000045f8 	rdprs	zero,zero,279
    3ac4:	000045f8 	rdprs	zero,zero,279
    3ac8:	000045f8 	rdprs	zero,zero,279
    3acc:	000045f8 	rdprs	zero,zero,279
    3ad0:	000045f8 	rdprs	zero,zero,279
    3ad4:	00004334 	movhi	zero,268
    3ad8:	000045f8 	rdprs	zero,zero,279
    3adc:	000045f8 	rdprs	zero,zero,279
    3ae0:	00004394 	movui	zero,270
    3ae4:	000045f8 	rdprs	zero,zero,279
    3ae8:	000045f8 	rdprs	zero,zero,279
    3aec:	000045f8 	rdprs	zero,zero,279
    3af0:	000045f8 	rdprs	zero,zero,279
    3af4:	000045f8 	rdprs	zero,zero,279
    3af8:	000045f8 	rdprs	zero,zero,279
    3afc:	000045f8 	rdprs	zero,zero,279
    3b00:	000045f8 	rdprs	zero,zero,279
    3b04:	000045f8 	rdprs	zero,zero,279
    3b08:	000045f8 	rdprs	zero,zero,279
    3b0c:	000045a4 	muli	zero,zero,278
    3b10:	00004544 	movi	zero,277
    3b14:	00003e10 	cmplti	zero,zero,248
    3b18:	00003e10 	cmplti	zero,zero,248
    3b1c:	00003e10 	cmplti	zero,zero,248
    3b20:	00004554 	movui	zero,277
    3b24:	00004544 	movi	zero,277
    3b28:	000045f8 	rdprs	zero,zero,279
    3b2c:	000045f8 	rdprs	zero,zero,279
    3b30:	00004560 	cmpeqi	zero,zero,277
    3b34:	000045f8 	rdprs	zero,zero,279
    3b38:	00004570 	cmpltui	zero,zero,277
    3b3c:	00004444 	movi	zero,273
    3b40:	00003b80 	call	3b8 <init_camera+0x128>
    3b44:	00004464 	muli	zero,zero,273
    3b48:	000045f8 	rdprs	zero,zero,279
    3b4c:	00004470 	cmpltui	zero,zero,273
    3b50:	000045f8 	rdprs	zero,zero,279
    3b54:	000044cc 	andi	zero,zero,275
    3b58:	000045f8 	rdprs	zero,zero,279
    3b5c:	000045f8 	rdprs	zero,zero,279
    3b60:	000044dc 	xori	zero,zero,275
    3b64:	d9003117 	ldw	r4,196(sp)
    3b68:	d8802d15 	stw	r2,180(sp)
    3b6c:	0109c83a 	sub	r4,zero,r4
    3b70:	d9003115 	stw	r4,196(sp)
    3b74:	94800114 	ori	r18,r18,4
    3b78:	ac400007 	ldb	r17,0(r21)
    3b7c:	003f9706 	br	39dc <__alt_data_end+0xff0039dc>
    3b80:	00800c04 	movi	r2,48
    3b84:	d9002d17 	ldw	r4,180(sp)
    3b88:	d9402917 	ldw	r5,164(sp)
    3b8c:	d8802705 	stb	r2,156(sp)
    3b90:	00801e04 	movi	r2,120
    3b94:	d8802745 	stb	r2,157(sp)
    3b98:	d8002785 	stb	zero,158(sp)
    3b9c:	20c00104 	addi	r3,r4,4
    3ba0:	24c00017 	ldw	r19,0(r4)
    3ba4:	002d883a 	mov	r22,zero
    3ba8:	90800094 	ori	r2,r18,2
    3bac:	28029a16 	blt	r5,zero,4618 <___vfprintf_internal_r+0xdc0>
    3bb0:	00bfdfc4 	movi	r2,-129
    3bb4:	90a4703a 	and	r18,r18,r2
    3bb8:	d8c02d15 	stw	r3,180(sp)
    3bbc:	94800094 	ori	r18,r18,2
    3bc0:	9802871e 	bne	r19,zero,45e0 <___vfprintf_internal_r+0xd88>
    3bc4:	00800074 	movhi	r2,1
    3bc8:	1086fb04 	addi	r2,r2,7148
    3bcc:	d8803915 	stw	r2,228(sp)
    3bd0:	04401e04 	movi	r17,120
    3bd4:	d8802917 	ldw	r2,164(sp)
    3bd8:	0039883a 	mov	fp,zero
    3bdc:	1001e926 	beq	r2,zero,4384 <___vfprintf_internal_r+0xb2c>
    3be0:	0027883a 	mov	r19,zero
    3be4:	002d883a 	mov	r22,zero
    3be8:	00020506 	br	4400 <___vfprintf_internal_r+0xba8>
    3bec:	d9002c17 	ldw	r4,176(sp)
    3bf0:	b80b883a 	mov	r5,r23
    3bf4:	0005b280 	call	5b28 <__swsetup_r>
    3bf8:	1005ac1e 	bne	r2,zero,52ac <___vfprintf_internal_r+0x1a54>
    3bfc:	b880030b 	ldhu	r2,12(r23)
    3c00:	00c00284 	movi	r3,10
    3c04:	1080068c 	andi	r2,r2,26
    3c08:	10ff3c1e 	bne	r2,r3,38fc <__alt_data_end+0xff0038fc>
    3c0c:	b880038f 	ldh	r2,14(r23)
    3c10:	103f3a16 	blt	r2,zero,38fc <__alt_data_end+0xff0038fc>
    3c14:	d9c02d17 	ldw	r7,180(sp)
    3c18:	d9002c17 	ldw	r4,176(sp)
    3c1c:	a80d883a 	mov	r6,r21
    3c20:	b80b883a 	mov	r5,r23
    3c24:	0005a6c0 	call	5a6c <__sbprintf>
    3c28:	00001106 	br	3c70 <___vfprintf_internal_r+0x418>
    3c2c:	d9002c17 	ldw	r4,176(sp)
    3c30:	d9801e04 	addi	r6,sp,120
    3c34:	b80b883a 	mov	r5,r23
    3c38:	000a5f40 	call	a5f4 <__sprint_r>
    3c3c:	1000081e 	bne	r2,zero,3c60 <___vfprintf_internal_r+0x408>
    3c40:	da000404 	addi	r8,sp,16
    3c44:	003f5306 	br	3994 <__alt_data_end+0xff003994>
    3c48:	d8802017 	ldw	r2,128(sp)
    3c4c:	10000426 	beq	r2,zero,3c60 <___vfprintf_internal_r+0x408>
    3c50:	d9002c17 	ldw	r4,176(sp)
    3c54:	d9801e04 	addi	r6,sp,120
    3c58:	b80b883a 	mov	r5,r23
    3c5c:	000a5f40 	call	a5f4 <__sprint_r>
    3c60:	b880030b 	ldhu	r2,12(r23)
    3c64:	1080100c 	andi	r2,r2,64
    3c68:	1005901e 	bne	r2,zero,52ac <___vfprintf_internal_r+0x1a54>
    3c6c:	d8802f17 	ldw	r2,188(sp)
    3c70:	dfc04717 	ldw	ra,284(sp)
    3c74:	df004617 	ldw	fp,280(sp)
    3c78:	ddc04517 	ldw	r23,276(sp)
    3c7c:	dd804417 	ldw	r22,272(sp)
    3c80:	dd404317 	ldw	r21,268(sp)
    3c84:	dd004217 	ldw	r20,264(sp)
    3c88:	dcc04117 	ldw	r19,260(sp)
    3c8c:	dc804017 	ldw	r18,256(sp)
    3c90:	dc403f17 	ldw	r17,252(sp)
    3c94:	dc003e17 	ldw	r16,248(sp)
    3c98:	dec04804 	addi	sp,sp,288
    3c9c:	f800283a 	ret
    3ca0:	d9002c17 	ldw	r4,176(sp)
    3ca4:	0007afc0 	call	7afc <__sinit>
    3ca8:	003f0406 	br	38bc <__alt_data_end+0xff0038bc>
    3cac:	d8802d17 	ldw	r2,180(sp)
    3cb0:	d9002d17 	ldw	r4,180(sp)
    3cb4:	10800017 	ldw	r2,0(r2)
    3cb8:	d8803115 	stw	r2,196(sp)
    3cbc:	20800104 	addi	r2,r4,4
    3cc0:	d9003117 	ldw	r4,196(sp)
    3cc4:	203fa716 	blt	r4,zero,3b64 <__alt_data_end+0xff003b64>
    3cc8:	d8802d15 	stw	r2,180(sp)
    3ccc:	ac400007 	ldb	r17,0(r21)
    3cd0:	003f4206 	br	39dc <__alt_data_end+0xff0039dc>
    3cd4:	ac400007 	ldb	r17,0(r21)
    3cd8:	aac00044 	addi	r11,r21,1
    3cdc:	8a872826 	beq	r17,r10,5980 <___vfprintf_internal_r+0x2128>
    3ce0:	88bff404 	addi	r2,r17,-48
    3ce4:	0009883a 	mov	r4,zero
    3ce8:	30867d36 	bltu	r6,r2,56e0 <___vfprintf_internal_r+0x1e88>
    3cec:	5c400007 	ldb	r17,0(r11)
    3cf0:	210002a4 	muli	r4,r4,10
    3cf4:	5d400044 	addi	r21,r11,1
    3cf8:	a817883a 	mov	r11,r21
    3cfc:	2089883a 	add	r4,r4,r2
    3d00:	88bff404 	addi	r2,r17,-48
    3d04:	30bff92e 	bgeu	r6,r2,3cec <__alt_data_end+0xff003cec>
    3d08:	2005c916 	blt	r4,zero,5430 <___vfprintf_internal_r+0x1bd8>
    3d0c:	d9002915 	stw	r4,164(sp)
    3d10:	003f3306 	br	39e0 <__alt_data_end+0xff0039e0>
    3d14:	94802014 	ori	r18,r18,128
    3d18:	ac400007 	ldb	r17,0(r21)
    3d1c:	003f2f06 	br	39dc <__alt_data_end+0xff0039dc>
    3d20:	a809883a 	mov	r4,r21
    3d24:	d8003115 	stw	zero,196(sp)
    3d28:	88bff404 	addi	r2,r17,-48
    3d2c:	0017883a 	mov	r11,zero
    3d30:	24400007 	ldb	r17,0(r4)
    3d34:	5ac002a4 	muli	r11,r11,10
    3d38:	ad400044 	addi	r21,r21,1
    3d3c:	a809883a 	mov	r4,r21
    3d40:	12d7883a 	add	r11,r2,r11
    3d44:	88bff404 	addi	r2,r17,-48
    3d48:	30bff92e 	bgeu	r6,r2,3d30 <__alt_data_end+0xff003d30>
    3d4c:	dac03115 	stw	r11,196(sp)
    3d50:	003f2306 	br	39e0 <__alt_data_end+0xff0039e0>
    3d54:	18c03fcc 	andi	r3,r3,255
    3d58:	18072b1e 	bne	r3,zero,5a08 <___vfprintf_internal_r+0x21b0>
    3d5c:	94800414 	ori	r18,r18,16
    3d60:	9080080c 	andi	r2,r18,32
    3d64:	10037b26 	beq	r2,zero,4b54 <___vfprintf_internal_r+0x12fc>
    3d68:	d9402d17 	ldw	r5,180(sp)
    3d6c:	28800117 	ldw	r2,4(r5)
    3d70:	2cc00017 	ldw	r19,0(r5)
    3d74:	29400204 	addi	r5,r5,8
    3d78:	d9402d15 	stw	r5,180(sp)
    3d7c:	102d883a 	mov	r22,r2
    3d80:	10044b16 	blt	r2,zero,4eb0 <___vfprintf_internal_r+0x1658>
    3d84:	d9402917 	ldw	r5,164(sp)
    3d88:	df002783 	ldbu	fp,158(sp)
    3d8c:	2803bc16 	blt	r5,zero,4c80 <___vfprintf_internal_r+0x1428>
    3d90:	00ffdfc4 	movi	r3,-129
    3d94:	9d84b03a 	or	r2,r19,r22
    3d98:	90e4703a 	and	r18,r18,r3
    3d9c:	10017726 	beq	r2,zero,437c <___vfprintf_internal_r+0xb24>
    3da0:	b0038326 	beq	r22,zero,4bb0 <___vfprintf_internal_r+0x1358>
    3da4:	dc402a15 	stw	r17,168(sp)
    3da8:	dc001e04 	addi	r16,sp,120
    3dac:	b023883a 	mov	r17,r22
    3db0:	402d883a 	mov	r22,r8
    3db4:	9809883a 	mov	r4,r19
    3db8:	880b883a 	mov	r5,r17
    3dbc:	01800284 	movi	r6,10
    3dc0:	000f883a 	mov	r7,zero
    3dc4:	000c9ec0 	call	c9ec <__umoddi3>
    3dc8:	10800c04 	addi	r2,r2,48
    3dcc:	843fffc4 	addi	r16,r16,-1
    3dd0:	9809883a 	mov	r4,r19
    3dd4:	880b883a 	mov	r5,r17
    3dd8:	80800005 	stb	r2,0(r16)
    3ddc:	01800284 	movi	r6,10
    3de0:	000f883a 	mov	r7,zero
    3de4:	000c4740 	call	c474 <__udivdi3>
    3de8:	1027883a 	mov	r19,r2
    3dec:	10c4b03a 	or	r2,r2,r3
    3df0:	1823883a 	mov	r17,r3
    3df4:	103fef1e 	bne	r2,zero,3db4 <__alt_data_end+0xff003db4>
    3df8:	d8c02817 	ldw	r3,160(sp)
    3dfc:	dc402a17 	ldw	r17,168(sp)
    3e00:	b011883a 	mov	r8,r22
    3e04:	1c07c83a 	sub	r3,r3,r16
    3e08:	d8c02e15 	stw	r3,184(sp)
    3e0c:	00005906 	br	3f74 <___vfprintf_internal_r+0x71c>
    3e10:	18c03fcc 	andi	r3,r3,255
    3e14:	1806fa1e 	bne	r3,zero,5a00 <___vfprintf_internal_r+0x21a8>
    3e18:	9080020c 	andi	r2,r18,8
    3e1c:	10048a26 	beq	r2,zero,5048 <___vfprintf_internal_r+0x17f0>
    3e20:	d8c02d17 	ldw	r3,180(sp)
    3e24:	d9002d17 	ldw	r4,180(sp)
    3e28:	d9402d17 	ldw	r5,180(sp)
    3e2c:	18c00017 	ldw	r3,0(r3)
    3e30:	21000117 	ldw	r4,4(r4)
    3e34:	29400204 	addi	r5,r5,8
    3e38:	d8c03615 	stw	r3,216(sp)
    3e3c:	d9003815 	stw	r4,224(sp)
    3e40:	d9402d15 	stw	r5,180(sp)
    3e44:	d9003617 	ldw	r4,216(sp)
    3e48:	d9403817 	ldw	r5,224(sp)
    3e4c:	da003d15 	stw	r8,244(sp)
    3e50:	04000044 	movi	r16,1
    3e54:	000a26c0 	call	a26c <__fpclassifyd>
    3e58:	da003d17 	ldw	r8,244(sp)
    3e5c:	14041f1e 	bne	r2,r16,4edc <___vfprintf_internal_r+0x1684>
    3e60:	d9003617 	ldw	r4,216(sp)
    3e64:	d9403817 	ldw	r5,224(sp)
    3e68:	000d883a 	mov	r6,zero
    3e6c:	000f883a 	mov	r7,zero
    3e70:	000d9340 	call	d934 <__ledf2>
    3e74:	da003d17 	ldw	r8,244(sp)
    3e78:	1005be16 	blt	r2,zero,5574 <___vfprintf_internal_r+0x1d1c>
    3e7c:	df002783 	ldbu	fp,158(sp)
    3e80:	008011c4 	movi	r2,71
    3e84:	1445330e 	bge	r2,r17,5354 <___vfprintf_internal_r+0x1afc>
    3e88:	04000074 	movhi	r16,1
    3e8c:	8406f304 	addi	r16,r16,7116
    3e90:	00c000c4 	movi	r3,3
    3e94:	00bfdfc4 	movi	r2,-129
    3e98:	d8c02a15 	stw	r3,168(sp)
    3e9c:	90a4703a 	and	r18,r18,r2
    3ea0:	d8c02e15 	stw	r3,184(sp)
    3ea4:	d8002915 	stw	zero,164(sp)
    3ea8:	d8003215 	stw	zero,200(sp)
    3eac:	00003706 	br	3f8c <___vfprintf_internal_r+0x734>
    3eb0:	94800214 	ori	r18,r18,8
    3eb4:	ac400007 	ldb	r17,0(r21)
    3eb8:	003ec806 	br	39dc <__alt_data_end+0xff0039dc>
    3ebc:	18c03fcc 	andi	r3,r3,255
    3ec0:	1806db1e 	bne	r3,zero,5a30 <___vfprintf_internal_r+0x21d8>
    3ec4:	94800414 	ori	r18,r18,16
    3ec8:	9080080c 	andi	r2,r18,32
    3ecc:	1002d826 	beq	r2,zero,4a30 <___vfprintf_internal_r+0x11d8>
    3ed0:	d9402d17 	ldw	r5,180(sp)
    3ed4:	d8c02917 	ldw	r3,164(sp)
    3ed8:	d8002785 	stb	zero,158(sp)
    3edc:	28800204 	addi	r2,r5,8
    3ee0:	2cc00017 	ldw	r19,0(r5)
    3ee4:	2d800117 	ldw	r22,4(r5)
    3ee8:	18048f16 	blt	r3,zero,5128 <___vfprintf_internal_r+0x18d0>
    3eec:	013fdfc4 	movi	r4,-129
    3ef0:	9d86b03a 	or	r3,r19,r22
    3ef4:	d8802d15 	stw	r2,180(sp)
    3ef8:	9124703a 	and	r18,r18,r4
    3efc:	1802d91e 	bne	r3,zero,4a64 <___vfprintf_internal_r+0x120c>
    3f00:	d8c02917 	ldw	r3,164(sp)
    3f04:	0039883a 	mov	fp,zero
    3f08:	1805c326 	beq	r3,zero,5618 <___vfprintf_internal_r+0x1dc0>
    3f0c:	0027883a 	mov	r19,zero
    3f10:	002d883a 	mov	r22,zero
    3f14:	dc001e04 	addi	r16,sp,120
    3f18:	9806d0fa 	srli	r3,r19,3
    3f1c:	b008977a 	slli	r4,r22,29
    3f20:	b02cd0fa 	srli	r22,r22,3
    3f24:	9cc001cc 	andi	r19,r19,7
    3f28:	98800c04 	addi	r2,r19,48
    3f2c:	843fffc4 	addi	r16,r16,-1
    3f30:	20e6b03a 	or	r19,r4,r3
    3f34:	80800005 	stb	r2,0(r16)
    3f38:	9d86b03a 	or	r3,r19,r22
    3f3c:	183ff61e 	bne	r3,zero,3f18 <__alt_data_end+0xff003f18>
    3f40:	90c0004c 	andi	r3,r18,1
    3f44:	18013b26 	beq	r3,zero,4434 <___vfprintf_internal_r+0xbdc>
    3f48:	10803fcc 	andi	r2,r2,255
    3f4c:	1080201c 	xori	r2,r2,128
    3f50:	10bfe004 	addi	r2,r2,-128
    3f54:	00c00c04 	movi	r3,48
    3f58:	10c13626 	beq	r2,r3,4434 <___vfprintf_internal_r+0xbdc>
    3f5c:	80ffffc5 	stb	r3,-1(r16)
    3f60:	d8c02817 	ldw	r3,160(sp)
    3f64:	80bfffc4 	addi	r2,r16,-1
    3f68:	1021883a 	mov	r16,r2
    3f6c:	1887c83a 	sub	r3,r3,r2
    3f70:	d8c02e15 	stw	r3,184(sp)
    3f74:	d8802e17 	ldw	r2,184(sp)
    3f78:	d9002917 	ldw	r4,164(sp)
    3f7c:	1100010e 	bge	r2,r4,3f84 <___vfprintf_internal_r+0x72c>
    3f80:	2005883a 	mov	r2,r4
    3f84:	d8802a15 	stw	r2,168(sp)
    3f88:	d8003215 	stw	zero,200(sp)
    3f8c:	e7003fcc 	andi	fp,fp,255
    3f90:	e700201c 	xori	fp,fp,128
    3f94:	e73fe004 	addi	fp,fp,-128
    3f98:	e0000326 	beq	fp,zero,3fa8 <___vfprintf_internal_r+0x750>
    3f9c:	d8c02a17 	ldw	r3,168(sp)
    3fa0:	18c00044 	addi	r3,r3,1
    3fa4:	d8c02a15 	stw	r3,168(sp)
    3fa8:	90c0008c 	andi	r3,r18,2
    3fac:	d8c02b15 	stw	r3,172(sp)
    3fb0:	18000326 	beq	r3,zero,3fc0 <___vfprintf_internal_r+0x768>
    3fb4:	d8c02a17 	ldw	r3,168(sp)
    3fb8:	18c00084 	addi	r3,r3,2
    3fbc:	d8c02a15 	stw	r3,168(sp)
    3fc0:	90c0210c 	andi	r3,r18,132
    3fc4:	d8c03015 	stw	r3,192(sp)
    3fc8:	1801a31e 	bne	r3,zero,4658 <___vfprintf_internal_r+0xe00>
    3fcc:	d9003117 	ldw	r4,196(sp)
    3fd0:	d8c02a17 	ldw	r3,168(sp)
    3fd4:	20e7c83a 	sub	r19,r4,r3
    3fd8:	04c19f0e 	bge	zero,r19,4658 <___vfprintf_internal_r+0xe00>
    3fdc:	02400404 	movi	r9,16
    3fe0:	d8c02017 	ldw	r3,128(sp)
    3fe4:	d8801f17 	ldw	r2,124(sp)
    3fe8:	4cc50d0e 	bge	r9,r19,5420 <___vfprintf_internal_r+0x1bc8>
    3fec:	01400074 	movhi	r5,1
    3ff0:	29470684 	addi	r5,r5,7194
    3ff4:	dc403b15 	stw	r17,236(sp)
    3ff8:	d9403515 	stw	r5,212(sp)
    3ffc:	9823883a 	mov	r17,r19
    4000:	482d883a 	mov	r22,r9
    4004:	9027883a 	mov	r19,r18
    4008:	070001c4 	movi	fp,7
    400c:	8025883a 	mov	r18,r16
    4010:	dc002c17 	ldw	r16,176(sp)
    4014:	00000306 	br	4024 <___vfprintf_internal_r+0x7cc>
    4018:	8c7ffc04 	addi	r17,r17,-16
    401c:	42000204 	addi	r8,r8,8
    4020:	b440130e 	bge	r22,r17,4070 <___vfprintf_internal_r+0x818>
    4024:	01000074 	movhi	r4,1
    4028:	18c00404 	addi	r3,r3,16
    402c:	10800044 	addi	r2,r2,1
    4030:	21070684 	addi	r4,r4,7194
    4034:	41000015 	stw	r4,0(r8)
    4038:	45800115 	stw	r22,4(r8)
    403c:	d8c02015 	stw	r3,128(sp)
    4040:	d8801f15 	stw	r2,124(sp)
    4044:	e0bff40e 	bge	fp,r2,4018 <__alt_data_end+0xff004018>
    4048:	d9801e04 	addi	r6,sp,120
    404c:	b80b883a 	mov	r5,r23
    4050:	8009883a 	mov	r4,r16
    4054:	000a5f40 	call	a5f4 <__sprint_r>
    4058:	103f011e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    405c:	8c7ffc04 	addi	r17,r17,-16
    4060:	d8c02017 	ldw	r3,128(sp)
    4064:	d8801f17 	ldw	r2,124(sp)
    4068:	da000404 	addi	r8,sp,16
    406c:	b47fed16 	blt	r22,r17,4024 <__alt_data_end+0xff004024>
    4070:	9021883a 	mov	r16,r18
    4074:	9825883a 	mov	r18,r19
    4078:	8827883a 	mov	r19,r17
    407c:	dc403b17 	ldw	r17,236(sp)
    4080:	d9403517 	ldw	r5,212(sp)
    4084:	98c7883a 	add	r3,r19,r3
    4088:	10800044 	addi	r2,r2,1
    408c:	41400015 	stw	r5,0(r8)
    4090:	44c00115 	stw	r19,4(r8)
    4094:	d8c02015 	stw	r3,128(sp)
    4098:	d8801f15 	stw	r2,124(sp)
    409c:	010001c4 	movi	r4,7
    40a0:	2082a316 	blt	r4,r2,4b30 <___vfprintf_internal_r+0x12d8>
    40a4:	df002787 	ldb	fp,158(sp)
    40a8:	42000204 	addi	r8,r8,8
    40ac:	e0000c26 	beq	fp,zero,40e0 <___vfprintf_internal_r+0x888>
    40b0:	d8801f17 	ldw	r2,124(sp)
    40b4:	d9002784 	addi	r4,sp,158
    40b8:	18c00044 	addi	r3,r3,1
    40bc:	10800044 	addi	r2,r2,1
    40c0:	41000015 	stw	r4,0(r8)
    40c4:	01000044 	movi	r4,1
    40c8:	41000115 	stw	r4,4(r8)
    40cc:	d8c02015 	stw	r3,128(sp)
    40d0:	d8801f15 	stw	r2,124(sp)
    40d4:	010001c4 	movi	r4,7
    40d8:	20823c16 	blt	r4,r2,49cc <___vfprintf_internal_r+0x1174>
    40dc:	42000204 	addi	r8,r8,8
    40e0:	d8802b17 	ldw	r2,172(sp)
    40e4:	10000c26 	beq	r2,zero,4118 <___vfprintf_internal_r+0x8c0>
    40e8:	d8801f17 	ldw	r2,124(sp)
    40ec:	d9002704 	addi	r4,sp,156
    40f0:	18c00084 	addi	r3,r3,2
    40f4:	10800044 	addi	r2,r2,1
    40f8:	41000015 	stw	r4,0(r8)
    40fc:	01000084 	movi	r4,2
    4100:	41000115 	stw	r4,4(r8)
    4104:	d8c02015 	stw	r3,128(sp)
    4108:	d8801f15 	stw	r2,124(sp)
    410c:	010001c4 	movi	r4,7
    4110:	20823616 	blt	r4,r2,49ec <___vfprintf_internal_r+0x1194>
    4114:	42000204 	addi	r8,r8,8
    4118:	d9003017 	ldw	r4,192(sp)
    411c:	00802004 	movi	r2,128
    4120:	20819926 	beq	r4,r2,4788 <___vfprintf_internal_r+0xf30>
    4124:	d9402917 	ldw	r5,164(sp)
    4128:	d8802e17 	ldw	r2,184(sp)
    412c:	28adc83a 	sub	r22,r5,r2
    4130:	0580310e 	bge	zero,r22,41f8 <___vfprintf_internal_r+0x9a0>
    4134:	07000404 	movi	fp,16
    4138:	d8801f17 	ldw	r2,124(sp)
    413c:	e584140e 	bge	fp,r22,5190 <___vfprintf_internal_r+0x1938>
    4140:	01400074 	movhi	r5,1
    4144:	29470284 	addi	r5,r5,7178
    4148:	dc402915 	stw	r17,164(sp)
    414c:	d9402b15 	stw	r5,172(sp)
    4150:	b023883a 	mov	r17,r22
    4154:	04c001c4 	movi	r19,7
    4158:	a82d883a 	mov	r22,r21
    415c:	902b883a 	mov	r21,r18
    4160:	8025883a 	mov	r18,r16
    4164:	dc002c17 	ldw	r16,176(sp)
    4168:	00000306 	br	4178 <___vfprintf_internal_r+0x920>
    416c:	8c7ffc04 	addi	r17,r17,-16
    4170:	42000204 	addi	r8,r8,8
    4174:	e440110e 	bge	fp,r17,41bc <___vfprintf_internal_r+0x964>
    4178:	18c00404 	addi	r3,r3,16
    417c:	10800044 	addi	r2,r2,1
    4180:	45000015 	stw	r20,0(r8)
    4184:	47000115 	stw	fp,4(r8)
    4188:	d8c02015 	stw	r3,128(sp)
    418c:	d8801f15 	stw	r2,124(sp)
    4190:	98bff60e 	bge	r19,r2,416c <__alt_data_end+0xff00416c>
    4194:	d9801e04 	addi	r6,sp,120
    4198:	b80b883a 	mov	r5,r23
    419c:	8009883a 	mov	r4,r16
    41a0:	000a5f40 	call	a5f4 <__sprint_r>
    41a4:	103eae1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    41a8:	8c7ffc04 	addi	r17,r17,-16
    41ac:	d8c02017 	ldw	r3,128(sp)
    41b0:	d8801f17 	ldw	r2,124(sp)
    41b4:	da000404 	addi	r8,sp,16
    41b8:	e47fef16 	blt	fp,r17,4178 <__alt_data_end+0xff004178>
    41bc:	9021883a 	mov	r16,r18
    41c0:	a825883a 	mov	r18,r21
    41c4:	b02b883a 	mov	r21,r22
    41c8:	882d883a 	mov	r22,r17
    41cc:	dc402917 	ldw	r17,164(sp)
    41d0:	d9002b17 	ldw	r4,172(sp)
    41d4:	1d87883a 	add	r3,r3,r22
    41d8:	10800044 	addi	r2,r2,1
    41dc:	41000015 	stw	r4,0(r8)
    41e0:	45800115 	stw	r22,4(r8)
    41e4:	d8c02015 	stw	r3,128(sp)
    41e8:	d8801f15 	stw	r2,124(sp)
    41ec:	010001c4 	movi	r4,7
    41f0:	2081ee16 	blt	r4,r2,49ac <___vfprintf_internal_r+0x1154>
    41f4:	42000204 	addi	r8,r8,8
    41f8:	9080400c 	andi	r2,r18,256
    41fc:	1001181e 	bne	r2,zero,4660 <___vfprintf_internal_r+0xe08>
    4200:	d9402e17 	ldw	r5,184(sp)
    4204:	d8801f17 	ldw	r2,124(sp)
    4208:	44000015 	stw	r16,0(r8)
    420c:	1947883a 	add	r3,r3,r5
    4210:	10800044 	addi	r2,r2,1
    4214:	41400115 	stw	r5,4(r8)
    4218:	d8c02015 	stw	r3,128(sp)
    421c:	d8801f15 	stw	r2,124(sp)
    4220:	010001c4 	movi	r4,7
    4224:	2081d316 	blt	r4,r2,4974 <___vfprintf_internal_r+0x111c>
    4228:	42000204 	addi	r8,r8,8
    422c:	9480010c 	andi	r18,r18,4
    4230:	90003226 	beq	r18,zero,42fc <___vfprintf_internal_r+0xaa4>
    4234:	d9403117 	ldw	r5,196(sp)
    4238:	d8802a17 	ldw	r2,168(sp)
    423c:	28a1c83a 	sub	r16,r5,r2
    4240:	04002e0e 	bge	zero,r16,42fc <___vfprintf_internal_r+0xaa4>
    4244:	04400404 	movi	r17,16
    4248:	d8801f17 	ldw	r2,124(sp)
    424c:	8c04a20e 	bge	r17,r16,54d8 <___vfprintf_internal_r+0x1c80>
    4250:	01400074 	movhi	r5,1
    4254:	29470684 	addi	r5,r5,7194
    4258:	d9403515 	stw	r5,212(sp)
    425c:	048001c4 	movi	r18,7
    4260:	dcc02c17 	ldw	r19,176(sp)
    4264:	00000306 	br	4274 <___vfprintf_internal_r+0xa1c>
    4268:	843ffc04 	addi	r16,r16,-16
    426c:	42000204 	addi	r8,r8,8
    4270:	8c00130e 	bge	r17,r16,42c0 <___vfprintf_internal_r+0xa68>
    4274:	01000074 	movhi	r4,1
    4278:	18c00404 	addi	r3,r3,16
    427c:	10800044 	addi	r2,r2,1
    4280:	21070684 	addi	r4,r4,7194
    4284:	41000015 	stw	r4,0(r8)
    4288:	44400115 	stw	r17,4(r8)
    428c:	d8c02015 	stw	r3,128(sp)
    4290:	d8801f15 	stw	r2,124(sp)
    4294:	90bff40e 	bge	r18,r2,4268 <__alt_data_end+0xff004268>
    4298:	d9801e04 	addi	r6,sp,120
    429c:	b80b883a 	mov	r5,r23
    42a0:	9809883a 	mov	r4,r19
    42a4:	000a5f40 	call	a5f4 <__sprint_r>
    42a8:	103e6d1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    42ac:	843ffc04 	addi	r16,r16,-16
    42b0:	d8c02017 	ldw	r3,128(sp)
    42b4:	d8801f17 	ldw	r2,124(sp)
    42b8:	da000404 	addi	r8,sp,16
    42bc:	8c3fed16 	blt	r17,r16,4274 <__alt_data_end+0xff004274>
    42c0:	d9403517 	ldw	r5,212(sp)
    42c4:	1c07883a 	add	r3,r3,r16
    42c8:	10800044 	addi	r2,r2,1
    42cc:	41400015 	stw	r5,0(r8)
    42d0:	44000115 	stw	r16,4(r8)
    42d4:	d8c02015 	stw	r3,128(sp)
    42d8:	d8801f15 	stw	r2,124(sp)
    42dc:	010001c4 	movi	r4,7
    42e0:	2080060e 	bge	r4,r2,42fc <___vfprintf_internal_r+0xaa4>
    42e4:	d9002c17 	ldw	r4,176(sp)
    42e8:	d9801e04 	addi	r6,sp,120
    42ec:	b80b883a 	mov	r5,r23
    42f0:	000a5f40 	call	a5f4 <__sprint_r>
    42f4:	103e5a1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    42f8:	d8c02017 	ldw	r3,128(sp)
    42fc:	d8803117 	ldw	r2,196(sp)
    4300:	d9002a17 	ldw	r4,168(sp)
    4304:	1100010e 	bge	r2,r4,430c <___vfprintf_internal_r+0xab4>
    4308:	2005883a 	mov	r2,r4
    430c:	d9402f17 	ldw	r5,188(sp)
    4310:	288b883a 	add	r5,r5,r2
    4314:	d9402f15 	stw	r5,188(sp)
    4318:	18019e1e 	bne	r3,zero,4994 <___vfprintf_internal_r+0x113c>
    431c:	a8800007 	ldb	r2,0(r21)
    4320:	d8001f15 	stw	zero,124(sp)
    4324:	da000404 	addi	r8,sp,16
    4328:	103d851e 	bne	r2,zero,3940 <__alt_data_end+0xff003940>
    432c:	a821883a 	mov	r16,r21
    4330:	003d9b06 	br	39a0 <__alt_data_end+0xff0039a0>
    4334:	18c03fcc 	andi	r3,r3,255
    4338:	1805c11e 	bne	r3,zero,5a40 <___vfprintf_internal_r+0x21e8>
    433c:	94800414 	ori	r18,r18,16
    4340:	9080080c 	andi	r2,r18,32
    4344:	10020c26 	beq	r2,zero,4b78 <___vfprintf_internal_r+0x1320>
    4348:	d8802d17 	ldw	r2,180(sp)
    434c:	d9002917 	ldw	r4,164(sp)
    4350:	d8002785 	stb	zero,158(sp)
    4354:	10c00204 	addi	r3,r2,8
    4358:	14c00017 	ldw	r19,0(r2)
    435c:	15800117 	ldw	r22,4(r2)
    4360:	20040f16 	blt	r4,zero,53a0 <___vfprintf_internal_r+0x1b48>
    4364:	013fdfc4 	movi	r4,-129
    4368:	9d84b03a 	or	r2,r19,r22
    436c:	d8c02d15 	stw	r3,180(sp)
    4370:	9124703a 	and	r18,r18,r4
    4374:	0039883a 	mov	fp,zero
    4378:	103e891e 	bne	r2,zero,3da0 <__alt_data_end+0xff003da0>
    437c:	d9002917 	ldw	r4,164(sp)
    4380:	2002c11e 	bne	r4,zero,4e88 <___vfprintf_internal_r+0x1630>
    4384:	d8002915 	stw	zero,164(sp)
    4388:	d8002e15 	stw	zero,184(sp)
    438c:	dc001e04 	addi	r16,sp,120
    4390:	003ef806 	br	3f74 <__alt_data_end+0xff003f74>
    4394:	18c03fcc 	andi	r3,r3,255
    4398:	18059d1e 	bne	r3,zero,5a10 <___vfprintf_internal_r+0x21b8>
    439c:	01400074 	movhi	r5,1
    43a0:	2946f604 	addi	r5,r5,7128
    43a4:	d9403915 	stw	r5,228(sp)
    43a8:	9080080c 	andi	r2,r18,32
    43ac:	10005226 	beq	r2,zero,44f8 <___vfprintf_internal_r+0xca0>
    43b0:	d8802d17 	ldw	r2,180(sp)
    43b4:	14c00017 	ldw	r19,0(r2)
    43b8:	15800117 	ldw	r22,4(r2)
    43bc:	10800204 	addi	r2,r2,8
    43c0:	d8802d15 	stw	r2,180(sp)
    43c4:	9080004c 	andi	r2,r18,1
    43c8:	10019026 	beq	r2,zero,4a0c <___vfprintf_internal_r+0x11b4>
    43cc:	9d84b03a 	or	r2,r19,r22
    43d0:	10036926 	beq	r2,zero,5178 <___vfprintf_internal_r+0x1920>
    43d4:	d8c02917 	ldw	r3,164(sp)
    43d8:	00800c04 	movi	r2,48
    43dc:	d8802705 	stb	r2,156(sp)
    43e0:	dc402745 	stb	r17,157(sp)
    43e4:	d8002785 	stb	zero,158(sp)
    43e8:	90800094 	ori	r2,r18,2
    43ec:	18045d16 	blt	r3,zero,5564 <___vfprintf_internal_r+0x1d0c>
    43f0:	00bfdfc4 	movi	r2,-129
    43f4:	90a4703a 	and	r18,r18,r2
    43f8:	94800094 	ori	r18,r18,2
    43fc:	0039883a 	mov	fp,zero
    4400:	d9003917 	ldw	r4,228(sp)
    4404:	dc001e04 	addi	r16,sp,120
    4408:	988003cc 	andi	r2,r19,15
    440c:	b006973a 	slli	r3,r22,28
    4410:	2085883a 	add	r2,r4,r2
    4414:	9826d13a 	srli	r19,r19,4
    4418:	10800003 	ldbu	r2,0(r2)
    441c:	b02cd13a 	srli	r22,r22,4
    4420:	843fffc4 	addi	r16,r16,-1
    4424:	1ce6b03a 	or	r19,r3,r19
    4428:	80800005 	stb	r2,0(r16)
    442c:	9d84b03a 	or	r2,r19,r22
    4430:	103ff51e 	bne	r2,zero,4408 <__alt_data_end+0xff004408>
    4434:	d8c02817 	ldw	r3,160(sp)
    4438:	1c07c83a 	sub	r3,r3,r16
    443c:	d8c02e15 	stw	r3,184(sp)
    4440:	003ecc06 	br	3f74 <__alt_data_end+0xff003f74>
    4444:	18c03fcc 	andi	r3,r3,255
    4448:	183e9f26 	beq	r3,zero,3ec8 <__alt_data_end+0xff003ec8>
    444c:	d9c02785 	stb	r7,158(sp)
    4450:	003e9d06 	br	3ec8 <__alt_data_end+0xff003ec8>
    4454:	00c00044 	movi	r3,1
    4458:	01c00ac4 	movi	r7,43
    445c:	ac400007 	ldb	r17,0(r21)
    4460:	003d5e06 	br	39dc <__alt_data_end+0xff0039dc>
    4464:	94800814 	ori	r18,r18,32
    4468:	ac400007 	ldb	r17,0(r21)
    446c:	003d5b06 	br	39dc <__alt_data_end+0xff0039dc>
    4470:	d8c02d17 	ldw	r3,180(sp)
    4474:	d8002785 	stb	zero,158(sp)
    4478:	1c000017 	ldw	r16,0(r3)
    447c:	1cc00104 	addi	r19,r3,4
    4480:	80041926 	beq	r16,zero,54e8 <___vfprintf_internal_r+0x1c90>
    4484:	d9002917 	ldw	r4,164(sp)
    4488:	2003d016 	blt	r4,zero,53cc <___vfprintf_internal_r+0x1b74>
    448c:	200d883a 	mov	r6,r4
    4490:	000b883a 	mov	r5,zero
    4494:	8009883a 	mov	r4,r16
    4498:	da003d15 	stw	r8,244(sp)
    449c:	000885c0 	call	885c <memchr>
    44a0:	da003d17 	ldw	r8,244(sp)
    44a4:	10045426 	beq	r2,zero,55f8 <___vfprintf_internal_r+0x1da0>
    44a8:	1405c83a 	sub	r2,r2,r16
    44ac:	d8802e15 	stw	r2,184(sp)
    44b0:	1003cc16 	blt	r2,zero,53e4 <___vfprintf_internal_r+0x1b8c>
    44b4:	df002783 	ldbu	fp,158(sp)
    44b8:	d8802a15 	stw	r2,168(sp)
    44bc:	dcc02d15 	stw	r19,180(sp)
    44c0:	d8002915 	stw	zero,164(sp)
    44c4:	d8003215 	stw	zero,200(sp)
    44c8:	003eb006 	br	3f8c <__alt_data_end+0xff003f8c>
    44cc:	18c03fcc 	andi	r3,r3,255
    44d0:	183f9b26 	beq	r3,zero,4340 <__alt_data_end+0xff004340>
    44d4:	d9c02785 	stb	r7,158(sp)
    44d8:	003f9906 	br	4340 <__alt_data_end+0xff004340>
    44dc:	18c03fcc 	andi	r3,r3,255
    44e0:	1805551e 	bne	r3,zero,5a38 <___vfprintf_internal_r+0x21e0>
    44e4:	01400074 	movhi	r5,1
    44e8:	2946fb04 	addi	r5,r5,7148
    44ec:	d9403915 	stw	r5,228(sp)
    44f0:	9080080c 	andi	r2,r18,32
    44f4:	103fae1e 	bne	r2,zero,43b0 <__alt_data_end+0xff0043b0>
    44f8:	9080040c 	andi	r2,r18,16
    44fc:	1002de26 	beq	r2,zero,5078 <___vfprintf_internal_r+0x1820>
    4500:	d8c02d17 	ldw	r3,180(sp)
    4504:	002d883a 	mov	r22,zero
    4508:	1cc00017 	ldw	r19,0(r3)
    450c:	18c00104 	addi	r3,r3,4
    4510:	d8c02d15 	stw	r3,180(sp)
    4514:	003fab06 	br	43c4 <__alt_data_end+0xff0043c4>
    4518:	38803fcc 	andi	r2,r7,255
    451c:	1080201c 	xori	r2,r2,128
    4520:	10bfe004 	addi	r2,r2,-128
    4524:	1002d21e 	bne	r2,zero,5070 <___vfprintf_internal_r+0x1818>
    4528:	00c00044 	movi	r3,1
    452c:	01c00804 	movi	r7,32
    4530:	ac400007 	ldb	r17,0(r21)
    4534:	003d2906 	br	39dc <__alt_data_end+0xff0039dc>
    4538:	94800054 	ori	r18,r18,1
    453c:	ac400007 	ldb	r17,0(r21)
    4540:	003d2606 	br	39dc <__alt_data_end+0xff0039dc>
    4544:	18c03fcc 	andi	r3,r3,255
    4548:	183e0526 	beq	r3,zero,3d60 <__alt_data_end+0xff003d60>
    454c:	d9c02785 	stb	r7,158(sp)
    4550:	003e0306 	br	3d60 <__alt_data_end+0xff003d60>
    4554:	94801014 	ori	r18,r18,64
    4558:	ac400007 	ldb	r17,0(r21)
    455c:	003d1f06 	br	39dc <__alt_data_end+0xff0039dc>
    4560:	ac400007 	ldb	r17,0(r21)
    4564:	8a438726 	beq	r17,r9,5384 <___vfprintf_internal_r+0x1b2c>
    4568:	94800414 	ori	r18,r18,16
    456c:	003d1b06 	br	39dc <__alt_data_end+0xff0039dc>
    4570:	18c03fcc 	andi	r3,r3,255
    4574:	1805341e 	bne	r3,zero,5a48 <___vfprintf_internal_r+0x21f0>
    4578:	9080080c 	andi	r2,r18,32
    457c:	1002cd26 	beq	r2,zero,50b4 <___vfprintf_internal_r+0x185c>
    4580:	d9402d17 	ldw	r5,180(sp)
    4584:	d9002f17 	ldw	r4,188(sp)
    4588:	28800017 	ldw	r2,0(r5)
    458c:	2007d7fa 	srai	r3,r4,31
    4590:	29400104 	addi	r5,r5,4
    4594:	d9402d15 	stw	r5,180(sp)
    4598:	11000015 	stw	r4,0(r2)
    459c:	10c00115 	stw	r3,4(r2)
    45a0:	003ce506 	br	3938 <__alt_data_end+0xff003938>
    45a4:	d8c02d17 	ldw	r3,180(sp)
    45a8:	d9002d17 	ldw	r4,180(sp)
    45ac:	d8002785 	stb	zero,158(sp)
    45b0:	18800017 	ldw	r2,0(r3)
    45b4:	21000104 	addi	r4,r4,4
    45b8:	00c00044 	movi	r3,1
    45bc:	d8c02a15 	stw	r3,168(sp)
    45c0:	d8801405 	stb	r2,80(sp)
    45c4:	d9002d15 	stw	r4,180(sp)
    45c8:	d8c02e15 	stw	r3,184(sp)
    45cc:	d8002915 	stw	zero,164(sp)
    45d0:	d8003215 	stw	zero,200(sp)
    45d4:	dc001404 	addi	r16,sp,80
    45d8:	0039883a 	mov	fp,zero
    45dc:	003e7206 	br	3fa8 <__alt_data_end+0xff003fa8>
    45e0:	01000074 	movhi	r4,1
    45e4:	2106fb04 	addi	r4,r4,7148
    45e8:	0039883a 	mov	fp,zero
    45ec:	d9003915 	stw	r4,228(sp)
    45f0:	04401e04 	movi	r17,120
    45f4:	003f8206 	br	4400 <__alt_data_end+0xff004400>
    45f8:	18c03fcc 	andi	r3,r3,255
    45fc:	1805061e 	bne	r3,zero,5a18 <___vfprintf_internal_r+0x21c0>
    4600:	883d9126 	beq	r17,zero,3c48 <__alt_data_end+0xff003c48>
    4604:	00c00044 	movi	r3,1
    4608:	d8c02a15 	stw	r3,168(sp)
    460c:	dc401405 	stb	r17,80(sp)
    4610:	d8002785 	stb	zero,158(sp)
    4614:	003fec06 	br	45c8 <__alt_data_end+0xff0045c8>
    4618:	01400074 	movhi	r5,1
    461c:	2946fb04 	addi	r5,r5,7148
    4620:	d9403915 	stw	r5,228(sp)
    4624:	d8c02d15 	stw	r3,180(sp)
    4628:	1025883a 	mov	r18,r2
    462c:	04401e04 	movi	r17,120
    4630:	9d84b03a 	or	r2,r19,r22
    4634:	1000fc1e 	bne	r2,zero,4a28 <___vfprintf_internal_r+0x11d0>
    4638:	0039883a 	mov	fp,zero
    463c:	00800084 	movi	r2,2
    4640:	10803fcc 	andi	r2,r2,255
    4644:	00c00044 	movi	r3,1
    4648:	10c20f26 	beq	r2,r3,4e88 <___vfprintf_internal_r+0x1630>
    464c:	00c00084 	movi	r3,2
    4650:	10fd6326 	beq	r2,r3,3be0 <__alt_data_end+0xff003be0>
    4654:	003e2d06 	br	3f0c <__alt_data_end+0xff003f0c>
    4658:	d8c02017 	ldw	r3,128(sp)
    465c:	003e9306 	br	40ac <__alt_data_end+0xff0040ac>
    4660:	00801944 	movi	r2,101
    4664:	14407e0e 	bge	r2,r17,4860 <___vfprintf_internal_r+0x1008>
    4668:	d9003617 	ldw	r4,216(sp)
    466c:	d9403817 	ldw	r5,224(sp)
    4670:	000d883a 	mov	r6,zero
    4674:	000f883a 	mov	r7,zero
    4678:	d8c03c15 	stw	r3,240(sp)
    467c:	da003d15 	stw	r8,244(sp)
    4680:	000d7d00 	call	d7d0 <__eqdf2>
    4684:	d8c03c17 	ldw	r3,240(sp)
    4688:	da003d17 	ldw	r8,244(sp)
    468c:	1000f71e 	bne	r2,zero,4a6c <___vfprintf_internal_r+0x1214>
    4690:	d8801f17 	ldw	r2,124(sp)
    4694:	01000074 	movhi	r4,1
    4698:	21070204 	addi	r4,r4,7176
    469c:	18c00044 	addi	r3,r3,1
    46a0:	10800044 	addi	r2,r2,1
    46a4:	41000015 	stw	r4,0(r8)
    46a8:	01000044 	movi	r4,1
    46ac:	41000115 	stw	r4,4(r8)
    46b0:	d8c02015 	stw	r3,128(sp)
    46b4:	d8801f15 	stw	r2,124(sp)
    46b8:	010001c4 	movi	r4,7
    46bc:	2082b816 	blt	r4,r2,51a0 <___vfprintf_internal_r+0x1948>
    46c0:	42000204 	addi	r8,r8,8
    46c4:	d8802617 	ldw	r2,152(sp)
    46c8:	d9403317 	ldw	r5,204(sp)
    46cc:	11400216 	blt	r2,r5,46d8 <___vfprintf_internal_r+0xe80>
    46d0:	9080004c 	andi	r2,r18,1
    46d4:	103ed526 	beq	r2,zero,422c <__alt_data_end+0xff00422c>
    46d8:	d8803717 	ldw	r2,220(sp)
    46dc:	d9003417 	ldw	r4,208(sp)
    46e0:	d9403717 	ldw	r5,220(sp)
    46e4:	1887883a 	add	r3,r3,r2
    46e8:	d8801f17 	ldw	r2,124(sp)
    46ec:	41000015 	stw	r4,0(r8)
    46f0:	41400115 	stw	r5,4(r8)
    46f4:	10800044 	addi	r2,r2,1
    46f8:	d8c02015 	stw	r3,128(sp)
    46fc:	d8801f15 	stw	r2,124(sp)
    4700:	010001c4 	movi	r4,7
    4704:	20832916 	blt	r4,r2,53ac <___vfprintf_internal_r+0x1b54>
    4708:	42000204 	addi	r8,r8,8
    470c:	d8803317 	ldw	r2,204(sp)
    4710:	143fffc4 	addi	r16,r2,-1
    4714:	043ec50e 	bge	zero,r16,422c <__alt_data_end+0xff00422c>
    4718:	04400404 	movi	r17,16
    471c:	d8801f17 	ldw	r2,124(sp)
    4720:	8c00880e 	bge	r17,r16,4944 <___vfprintf_internal_r+0x10ec>
    4724:	01400074 	movhi	r5,1
    4728:	29470284 	addi	r5,r5,7178
    472c:	d9402b15 	stw	r5,172(sp)
    4730:	058001c4 	movi	r22,7
    4734:	dcc02c17 	ldw	r19,176(sp)
    4738:	00000306 	br	4748 <___vfprintf_internal_r+0xef0>
    473c:	42000204 	addi	r8,r8,8
    4740:	843ffc04 	addi	r16,r16,-16
    4744:	8c00820e 	bge	r17,r16,4950 <___vfprintf_internal_r+0x10f8>
    4748:	18c00404 	addi	r3,r3,16
    474c:	10800044 	addi	r2,r2,1
    4750:	45000015 	stw	r20,0(r8)
    4754:	44400115 	stw	r17,4(r8)
    4758:	d8c02015 	stw	r3,128(sp)
    475c:	d8801f15 	stw	r2,124(sp)
    4760:	b0bff60e 	bge	r22,r2,473c <__alt_data_end+0xff00473c>
    4764:	d9801e04 	addi	r6,sp,120
    4768:	b80b883a 	mov	r5,r23
    476c:	9809883a 	mov	r4,r19
    4770:	000a5f40 	call	a5f4 <__sprint_r>
    4774:	103d3a1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4778:	d8c02017 	ldw	r3,128(sp)
    477c:	d8801f17 	ldw	r2,124(sp)
    4780:	da000404 	addi	r8,sp,16
    4784:	003fee06 	br	4740 <__alt_data_end+0xff004740>
    4788:	d9403117 	ldw	r5,196(sp)
    478c:	d8802a17 	ldw	r2,168(sp)
    4790:	28adc83a 	sub	r22,r5,r2
    4794:	05be630e 	bge	zero,r22,4124 <__alt_data_end+0xff004124>
    4798:	07000404 	movi	fp,16
    479c:	d8801f17 	ldw	r2,124(sp)
    47a0:	e5838f0e 	bge	fp,r22,55e0 <___vfprintf_internal_r+0x1d88>
    47a4:	01400074 	movhi	r5,1
    47a8:	29470284 	addi	r5,r5,7178
    47ac:	dc403015 	stw	r17,192(sp)
    47b0:	d9402b15 	stw	r5,172(sp)
    47b4:	b023883a 	mov	r17,r22
    47b8:	04c001c4 	movi	r19,7
    47bc:	a82d883a 	mov	r22,r21
    47c0:	902b883a 	mov	r21,r18
    47c4:	8025883a 	mov	r18,r16
    47c8:	dc002c17 	ldw	r16,176(sp)
    47cc:	00000306 	br	47dc <___vfprintf_internal_r+0xf84>
    47d0:	8c7ffc04 	addi	r17,r17,-16
    47d4:	42000204 	addi	r8,r8,8
    47d8:	e440110e 	bge	fp,r17,4820 <___vfprintf_internal_r+0xfc8>
    47dc:	18c00404 	addi	r3,r3,16
    47e0:	10800044 	addi	r2,r2,1
    47e4:	45000015 	stw	r20,0(r8)
    47e8:	47000115 	stw	fp,4(r8)
    47ec:	d8c02015 	stw	r3,128(sp)
    47f0:	d8801f15 	stw	r2,124(sp)
    47f4:	98bff60e 	bge	r19,r2,47d0 <__alt_data_end+0xff0047d0>
    47f8:	d9801e04 	addi	r6,sp,120
    47fc:	b80b883a 	mov	r5,r23
    4800:	8009883a 	mov	r4,r16
    4804:	000a5f40 	call	a5f4 <__sprint_r>
    4808:	103d151e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    480c:	8c7ffc04 	addi	r17,r17,-16
    4810:	d8c02017 	ldw	r3,128(sp)
    4814:	d8801f17 	ldw	r2,124(sp)
    4818:	da000404 	addi	r8,sp,16
    481c:	e47fef16 	blt	fp,r17,47dc <__alt_data_end+0xff0047dc>
    4820:	9021883a 	mov	r16,r18
    4824:	a825883a 	mov	r18,r21
    4828:	b02b883a 	mov	r21,r22
    482c:	882d883a 	mov	r22,r17
    4830:	dc403017 	ldw	r17,192(sp)
    4834:	d9002b17 	ldw	r4,172(sp)
    4838:	1d87883a 	add	r3,r3,r22
    483c:	10800044 	addi	r2,r2,1
    4840:	41000015 	stw	r4,0(r8)
    4844:	45800115 	stw	r22,4(r8)
    4848:	d8c02015 	stw	r3,128(sp)
    484c:	d8801f15 	stw	r2,124(sp)
    4850:	010001c4 	movi	r4,7
    4854:	20818e16 	blt	r4,r2,4e90 <___vfprintf_internal_r+0x1638>
    4858:	42000204 	addi	r8,r8,8
    485c:	003e3106 	br	4124 <__alt_data_end+0xff004124>
    4860:	d9403317 	ldw	r5,204(sp)
    4864:	00800044 	movi	r2,1
    4868:	18c00044 	addi	r3,r3,1
    486c:	1141530e 	bge	r2,r5,4dbc <___vfprintf_internal_r+0x1564>
    4870:	dc401f17 	ldw	r17,124(sp)
    4874:	00800044 	movi	r2,1
    4878:	40800115 	stw	r2,4(r8)
    487c:	8c400044 	addi	r17,r17,1
    4880:	44000015 	stw	r16,0(r8)
    4884:	d8c02015 	stw	r3,128(sp)
    4888:	dc401f15 	stw	r17,124(sp)
    488c:	008001c4 	movi	r2,7
    4890:	14416b16 	blt	r2,r17,4e40 <___vfprintf_internal_r+0x15e8>
    4894:	42000204 	addi	r8,r8,8
    4898:	d8803717 	ldw	r2,220(sp)
    489c:	d9003417 	ldw	r4,208(sp)
    48a0:	8c400044 	addi	r17,r17,1
    48a4:	10c7883a 	add	r3,r2,r3
    48a8:	40800115 	stw	r2,4(r8)
    48ac:	41000015 	stw	r4,0(r8)
    48b0:	d8c02015 	stw	r3,128(sp)
    48b4:	dc401f15 	stw	r17,124(sp)
    48b8:	008001c4 	movi	r2,7
    48bc:	14416916 	blt	r2,r17,4e64 <___vfprintf_internal_r+0x160c>
    48c0:	45800204 	addi	r22,r8,8
    48c4:	d9003617 	ldw	r4,216(sp)
    48c8:	d9403817 	ldw	r5,224(sp)
    48cc:	000d883a 	mov	r6,zero
    48d0:	000f883a 	mov	r7,zero
    48d4:	d8c03c15 	stw	r3,240(sp)
    48d8:	000d7d00 	call	d7d0 <__eqdf2>
    48dc:	d8c03c17 	ldw	r3,240(sp)
    48e0:	1000bc26 	beq	r2,zero,4bd4 <___vfprintf_internal_r+0x137c>
    48e4:	d9403317 	ldw	r5,204(sp)
    48e8:	84000044 	addi	r16,r16,1
    48ec:	8c400044 	addi	r17,r17,1
    48f0:	28bfffc4 	addi	r2,r5,-1
    48f4:	1887883a 	add	r3,r3,r2
    48f8:	b0800115 	stw	r2,4(r22)
    48fc:	b4000015 	stw	r16,0(r22)
    4900:	d8c02015 	stw	r3,128(sp)
    4904:	dc401f15 	stw	r17,124(sp)
    4908:	008001c4 	movi	r2,7
    490c:	14414316 	blt	r2,r17,4e1c <___vfprintf_internal_r+0x15c4>
    4910:	b5800204 	addi	r22,r22,8
    4914:	d9003a17 	ldw	r4,232(sp)
    4918:	df0022c4 	addi	fp,sp,139
    491c:	8c400044 	addi	r17,r17,1
    4920:	20c7883a 	add	r3,r4,r3
    4924:	b7000015 	stw	fp,0(r22)
    4928:	b1000115 	stw	r4,4(r22)
    492c:	d8c02015 	stw	r3,128(sp)
    4930:	dc401f15 	stw	r17,124(sp)
    4934:	008001c4 	movi	r2,7
    4938:	14400e16 	blt	r2,r17,4974 <___vfprintf_internal_r+0x111c>
    493c:	b2000204 	addi	r8,r22,8
    4940:	003e3a06 	br	422c <__alt_data_end+0xff00422c>
    4944:	01000074 	movhi	r4,1
    4948:	21070284 	addi	r4,r4,7178
    494c:	d9002b15 	stw	r4,172(sp)
    4950:	d9002b17 	ldw	r4,172(sp)
    4954:	1c07883a 	add	r3,r3,r16
    4958:	44000115 	stw	r16,4(r8)
    495c:	41000015 	stw	r4,0(r8)
    4960:	10800044 	addi	r2,r2,1
    4964:	d8c02015 	stw	r3,128(sp)
    4968:	d8801f15 	stw	r2,124(sp)
    496c:	010001c4 	movi	r4,7
    4970:	20be2d0e 	bge	r4,r2,4228 <__alt_data_end+0xff004228>
    4974:	d9002c17 	ldw	r4,176(sp)
    4978:	d9801e04 	addi	r6,sp,120
    497c:	b80b883a 	mov	r5,r23
    4980:	000a5f40 	call	a5f4 <__sprint_r>
    4984:	103cb61e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4988:	d8c02017 	ldw	r3,128(sp)
    498c:	da000404 	addi	r8,sp,16
    4990:	003e2606 	br	422c <__alt_data_end+0xff00422c>
    4994:	d9002c17 	ldw	r4,176(sp)
    4998:	d9801e04 	addi	r6,sp,120
    499c:	b80b883a 	mov	r5,r23
    49a0:	000a5f40 	call	a5f4 <__sprint_r>
    49a4:	103e5d26 	beq	r2,zero,431c <__alt_data_end+0xff00431c>
    49a8:	003cad06 	br	3c60 <__alt_data_end+0xff003c60>
    49ac:	d9002c17 	ldw	r4,176(sp)
    49b0:	d9801e04 	addi	r6,sp,120
    49b4:	b80b883a 	mov	r5,r23
    49b8:	000a5f40 	call	a5f4 <__sprint_r>
    49bc:	103ca81e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    49c0:	d8c02017 	ldw	r3,128(sp)
    49c4:	da000404 	addi	r8,sp,16
    49c8:	003e0b06 	br	41f8 <__alt_data_end+0xff0041f8>
    49cc:	d9002c17 	ldw	r4,176(sp)
    49d0:	d9801e04 	addi	r6,sp,120
    49d4:	b80b883a 	mov	r5,r23
    49d8:	000a5f40 	call	a5f4 <__sprint_r>
    49dc:	103ca01e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    49e0:	d8c02017 	ldw	r3,128(sp)
    49e4:	da000404 	addi	r8,sp,16
    49e8:	003dbd06 	br	40e0 <__alt_data_end+0xff0040e0>
    49ec:	d9002c17 	ldw	r4,176(sp)
    49f0:	d9801e04 	addi	r6,sp,120
    49f4:	b80b883a 	mov	r5,r23
    49f8:	000a5f40 	call	a5f4 <__sprint_r>
    49fc:	103c981e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4a00:	d8c02017 	ldw	r3,128(sp)
    4a04:	da000404 	addi	r8,sp,16
    4a08:	003dc306 	br	4118 <__alt_data_end+0xff004118>
    4a0c:	d8802917 	ldw	r2,164(sp)
    4a10:	d8002785 	stb	zero,158(sp)
    4a14:	103f0616 	blt	r2,zero,4630 <__alt_data_end+0xff004630>
    4a18:	00ffdfc4 	movi	r3,-129
    4a1c:	9d84b03a 	or	r2,r19,r22
    4a20:	90e4703a 	and	r18,r18,r3
    4a24:	103c6b26 	beq	r2,zero,3bd4 <__alt_data_end+0xff003bd4>
    4a28:	0039883a 	mov	fp,zero
    4a2c:	003e7406 	br	4400 <__alt_data_end+0xff004400>
    4a30:	9080040c 	andi	r2,r18,16
    4a34:	1001b326 	beq	r2,zero,5104 <___vfprintf_internal_r+0x18ac>
    4a38:	d9002d17 	ldw	r4,180(sp)
    4a3c:	d9402917 	ldw	r5,164(sp)
    4a40:	d8002785 	stb	zero,158(sp)
    4a44:	20800104 	addi	r2,r4,4
    4a48:	24c00017 	ldw	r19,0(r4)
    4a4c:	002d883a 	mov	r22,zero
    4a50:	2801b516 	blt	r5,zero,5128 <___vfprintf_internal_r+0x18d0>
    4a54:	00ffdfc4 	movi	r3,-129
    4a58:	d8802d15 	stw	r2,180(sp)
    4a5c:	90e4703a 	and	r18,r18,r3
    4a60:	983d2726 	beq	r19,zero,3f00 <__alt_data_end+0xff003f00>
    4a64:	0039883a 	mov	fp,zero
    4a68:	003d2a06 	br	3f14 <__alt_data_end+0xff003f14>
    4a6c:	dc402617 	ldw	r17,152(sp)
    4a70:	0441d30e 	bge	zero,r17,51c0 <___vfprintf_internal_r+0x1968>
    4a74:	dc403217 	ldw	r17,200(sp)
    4a78:	d8803317 	ldw	r2,204(sp)
    4a7c:	1440010e 	bge	r2,r17,4a84 <___vfprintf_internal_r+0x122c>
    4a80:	1023883a 	mov	r17,r2
    4a84:	04400a0e 	bge	zero,r17,4ab0 <___vfprintf_internal_r+0x1258>
    4a88:	d8801f17 	ldw	r2,124(sp)
    4a8c:	1c47883a 	add	r3,r3,r17
    4a90:	44000015 	stw	r16,0(r8)
    4a94:	10800044 	addi	r2,r2,1
    4a98:	44400115 	stw	r17,4(r8)
    4a9c:	d8c02015 	stw	r3,128(sp)
    4aa0:	d8801f15 	stw	r2,124(sp)
    4aa4:	010001c4 	movi	r4,7
    4aa8:	20826516 	blt	r4,r2,5440 <___vfprintf_internal_r+0x1be8>
    4aac:	42000204 	addi	r8,r8,8
    4ab0:	88026116 	blt	r17,zero,5438 <___vfprintf_internal_r+0x1be0>
    4ab4:	d9003217 	ldw	r4,200(sp)
    4ab8:	2463c83a 	sub	r17,r4,r17
    4abc:	04407b0e 	bge	zero,r17,4cac <___vfprintf_internal_r+0x1454>
    4ac0:	05800404 	movi	r22,16
    4ac4:	d8801f17 	ldw	r2,124(sp)
    4ac8:	b4419d0e 	bge	r22,r17,5140 <___vfprintf_internal_r+0x18e8>
    4acc:	01000074 	movhi	r4,1
    4ad0:	21070284 	addi	r4,r4,7178
    4ad4:	d9002b15 	stw	r4,172(sp)
    4ad8:	070001c4 	movi	fp,7
    4adc:	dcc02c17 	ldw	r19,176(sp)
    4ae0:	00000306 	br	4af0 <___vfprintf_internal_r+0x1298>
    4ae4:	42000204 	addi	r8,r8,8
    4ae8:	8c7ffc04 	addi	r17,r17,-16
    4aec:	b441970e 	bge	r22,r17,514c <___vfprintf_internal_r+0x18f4>
    4af0:	18c00404 	addi	r3,r3,16
    4af4:	10800044 	addi	r2,r2,1
    4af8:	45000015 	stw	r20,0(r8)
    4afc:	45800115 	stw	r22,4(r8)
    4b00:	d8c02015 	stw	r3,128(sp)
    4b04:	d8801f15 	stw	r2,124(sp)
    4b08:	e0bff60e 	bge	fp,r2,4ae4 <__alt_data_end+0xff004ae4>
    4b0c:	d9801e04 	addi	r6,sp,120
    4b10:	b80b883a 	mov	r5,r23
    4b14:	9809883a 	mov	r4,r19
    4b18:	000a5f40 	call	a5f4 <__sprint_r>
    4b1c:	103c501e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4b20:	d8c02017 	ldw	r3,128(sp)
    4b24:	d8801f17 	ldw	r2,124(sp)
    4b28:	da000404 	addi	r8,sp,16
    4b2c:	003fee06 	br	4ae8 <__alt_data_end+0xff004ae8>
    4b30:	d9002c17 	ldw	r4,176(sp)
    4b34:	d9801e04 	addi	r6,sp,120
    4b38:	b80b883a 	mov	r5,r23
    4b3c:	000a5f40 	call	a5f4 <__sprint_r>
    4b40:	103c471e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4b44:	d8c02017 	ldw	r3,128(sp)
    4b48:	df002787 	ldb	fp,158(sp)
    4b4c:	da000404 	addi	r8,sp,16
    4b50:	003d5606 	br	40ac <__alt_data_end+0xff0040ac>
    4b54:	9080040c 	andi	r2,r18,16
    4b58:	10016126 	beq	r2,zero,50e0 <___vfprintf_internal_r+0x1888>
    4b5c:	d8802d17 	ldw	r2,180(sp)
    4b60:	14c00017 	ldw	r19,0(r2)
    4b64:	10800104 	addi	r2,r2,4
    4b68:	d8802d15 	stw	r2,180(sp)
    4b6c:	982dd7fa 	srai	r22,r19,31
    4b70:	b005883a 	mov	r2,r22
    4b74:	003c8206 	br	3d80 <__alt_data_end+0xff003d80>
    4b78:	9080040c 	andi	r2,r18,16
    4b7c:	10003526 	beq	r2,zero,4c54 <___vfprintf_internal_r+0x13fc>
    4b80:	d9402d17 	ldw	r5,180(sp)
    4b84:	d8c02917 	ldw	r3,164(sp)
    4b88:	d8002785 	stb	zero,158(sp)
    4b8c:	28800104 	addi	r2,r5,4
    4b90:	2cc00017 	ldw	r19,0(r5)
    4b94:	002d883a 	mov	r22,zero
    4b98:	18003716 	blt	r3,zero,4c78 <___vfprintf_internal_r+0x1420>
    4b9c:	00ffdfc4 	movi	r3,-129
    4ba0:	d8802d15 	stw	r2,180(sp)
    4ba4:	90e4703a 	and	r18,r18,r3
    4ba8:	0039883a 	mov	fp,zero
    4bac:	983df326 	beq	r19,zero,437c <__alt_data_end+0xff00437c>
    4bb0:	00800244 	movi	r2,9
    4bb4:	14fc7b36 	bltu	r2,r19,3da4 <__alt_data_end+0xff003da4>
    4bb8:	d8c02817 	ldw	r3,160(sp)
    4bbc:	dc001dc4 	addi	r16,sp,119
    4bc0:	9cc00c04 	addi	r19,r19,48
    4bc4:	1c07c83a 	sub	r3,r3,r16
    4bc8:	dcc01dc5 	stb	r19,119(sp)
    4bcc:	d8c02e15 	stw	r3,184(sp)
    4bd0:	003ce806 	br	3f74 <__alt_data_end+0xff003f74>
    4bd4:	d8803317 	ldw	r2,204(sp)
    4bd8:	143fffc4 	addi	r16,r2,-1
    4bdc:	043f4d0e 	bge	zero,r16,4914 <__alt_data_end+0xff004914>
    4be0:	07000404 	movi	fp,16
    4be4:	e400810e 	bge	fp,r16,4dec <___vfprintf_internal_r+0x1594>
    4be8:	01400074 	movhi	r5,1
    4bec:	29470284 	addi	r5,r5,7178
    4bf0:	d9402b15 	stw	r5,172(sp)
    4bf4:	01c001c4 	movi	r7,7
    4bf8:	dcc02c17 	ldw	r19,176(sp)
    4bfc:	00000306 	br	4c0c <___vfprintf_internal_r+0x13b4>
    4c00:	b5800204 	addi	r22,r22,8
    4c04:	843ffc04 	addi	r16,r16,-16
    4c08:	e4007b0e 	bge	fp,r16,4df8 <___vfprintf_internal_r+0x15a0>
    4c0c:	18c00404 	addi	r3,r3,16
    4c10:	8c400044 	addi	r17,r17,1
    4c14:	b5000015 	stw	r20,0(r22)
    4c18:	b7000115 	stw	fp,4(r22)
    4c1c:	d8c02015 	stw	r3,128(sp)
    4c20:	dc401f15 	stw	r17,124(sp)
    4c24:	3c7ff60e 	bge	r7,r17,4c00 <__alt_data_end+0xff004c00>
    4c28:	d9801e04 	addi	r6,sp,120
    4c2c:	b80b883a 	mov	r5,r23
    4c30:	9809883a 	mov	r4,r19
    4c34:	d9c03c15 	stw	r7,240(sp)
    4c38:	000a5f40 	call	a5f4 <__sprint_r>
    4c3c:	d9c03c17 	ldw	r7,240(sp)
    4c40:	103c071e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4c44:	d8c02017 	ldw	r3,128(sp)
    4c48:	dc401f17 	ldw	r17,124(sp)
    4c4c:	dd800404 	addi	r22,sp,16
    4c50:	003fec06 	br	4c04 <__alt_data_end+0xff004c04>
    4c54:	9080100c 	andi	r2,r18,64
    4c58:	d8002785 	stb	zero,158(sp)
    4c5c:	10010e26 	beq	r2,zero,5098 <___vfprintf_internal_r+0x1840>
    4c60:	d9002d17 	ldw	r4,180(sp)
    4c64:	d9402917 	ldw	r5,164(sp)
    4c68:	002d883a 	mov	r22,zero
    4c6c:	20800104 	addi	r2,r4,4
    4c70:	24c0000b 	ldhu	r19,0(r4)
    4c74:	283fc90e 	bge	r5,zero,4b9c <__alt_data_end+0xff004b9c>
    4c78:	d8802d15 	stw	r2,180(sp)
    4c7c:	0039883a 	mov	fp,zero
    4c80:	9d84b03a 	or	r2,r19,r22
    4c84:	103c461e 	bne	r2,zero,3da0 <__alt_data_end+0xff003da0>
    4c88:	00800044 	movi	r2,1
    4c8c:	003e6c06 	br	4640 <__alt_data_end+0xff004640>
    4c90:	d9002c17 	ldw	r4,176(sp)
    4c94:	d9801e04 	addi	r6,sp,120
    4c98:	b80b883a 	mov	r5,r23
    4c9c:	000a5f40 	call	a5f4 <__sprint_r>
    4ca0:	103bef1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4ca4:	d8c02017 	ldw	r3,128(sp)
    4ca8:	da000404 	addi	r8,sp,16
    4cac:	d9003217 	ldw	r4,200(sp)
    4cb0:	d8802617 	ldw	r2,152(sp)
    4cb4:	d9403317 	ldw	r5,204(sp)
    4cb8:	8123883a 	add	r17,r16,r4
    4cbc:	11400216 	blt	r2,r5,4cc8 <___vfprintf_internal_r+0x1470>
    4cc0:	9100004c 	andi	r4,r18,1
    4cc4:	20000d26 	beq	r4,zero,4cfc <___vfprintf_internal_r+0x14a4>
    4cc8:	d9003717 	ldw	r4,220(sp)
    4ccc:	d9403417 	ldw	r5,208(sp)
    4cd0:	1907883a 	add	r3,r3,r4
    4cd4:	d9001f17 	ldw	r4,124(sp)
    4cd8:	41400015 	stw	r5,0(r8)
    4cdc:	d9403717 	ldw	r5,220(sp)
    4ce0:	21000044 	addi	r4,r4,1
    4ce4:	d8c02015 	stw	r3,128(sp)
    4ce8:	41400115 	stw	r5,4(r8)
    4cec:	d9001f15 	stw	r4,124(sp)
    4cf0:	014001c4 	movi	r5,7
    4cf4:	2901e816 	blt	r5,r4,5498 <___vfprintf_internal_r+0x1c40>
    4cf8:	42000204 	addi	r8,r8,8
    4cfc:	d9003317 	ldw	r4,204(sp)
    4d00:	8121883a 	add	r16,r16,r4
    4d04:	2085c83a 	sub	r2,r4,r2
    4d08:	8461c83a 	sub	r16,r16,r17
    4d0c:	1400010e 	bge	r2,r16,4d14 <___vfprintf_internal_r+0x14bc>
    4d10:	1021883a 	mov	r16,r2
    4d14:	04000a0e 	bge	zero,r16,4d40 <___vfprintf_internal_r+0x14e8>
    4d18:	d9001f17 	ldw	r4,124(sp)
    4d1c:	1c07883a 	add	r3,r3,r16
    4d20:	44400015 	stw	r17,0(r8)
    4d24:	21000044 	addi	r4,r4,1
    4d28:	44000115 	stw	r16,4(r8)
    4d2c:	d8c02015 	stw	r3,128(sp)
    4d30:	d9001f15 	stw	r4,124(sp)
    4d34:	014001c4 	movi	r5,7
    4d38:	2901fb16 	blt	r5,r4,5528 <___vfprintf_internal_r+0x1cd0>
    4d3c:	42000204 	addi	r8,r8,8
    4d40:	8001f716 	blt	r16,zero,5520 <___vfprintf_internal_r+0x1cc8>
    4d44:	1421c83a 	sub	r16,r2,r16
    4d48:	043d380e 	bge	zero,r16,422c <__alt_data_end+0xff00422c>
    4d4c:	04400404 	movi	r17,16
    4d50:	d8801f17 	ldw	r2,124(sp)
    4d54:	8c3efb0e 	bge	r17,r16,4944 <__alt_data_end+0xff004944>
    4d58:	01400074 	movhi	r5,1
    4d5c:	29470284 	addi	r5,r5,7178
    4d60:	d9402b15 	stw	r5,172(sp)
    4d64:	058001c4 	movi	r22,7
    4d68:	dcc02c17 	ldw	r19,176(sp)
    4d6c:	00000306 	br	4d7c <___vfprintf_internal_r+0x1524>
    4d70:	42000204 	addi	r8,r8,8
    4d74:	843ffc04 	addi	r16,r16,-16
    4d78:	8c3ef50e 	bge	r17,r16,4950 <__alt_data_end+0xff004950>
    4d7c:	18c00404 	addi	r3,r3,16
    4d80:	10800044 	addi	r2,r2,1
    4d84:	45000015 	stw	r20,0(r8)
    4d88:	44400115 	stw	r17,4(r8)
    4d8c:	d8c02015 	stw	r3,128(sp)
    4d90:	d8801f15 	stw	r2,124(sp)
    4d94:	b0bff60e 	bge	r22,r2,4d70 <__alt_data_end+0xff004d70>
    4d98:	d9801e04 	addi	r6,sp,120
    4d9c:	b80b883a 	mov	r5,r23
    4da0:	9809883a 	mov	r4,r19
    4da4:	000a5f40 	call	a5f4 <__sprint_r>
    4da8:	103bad1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4dac:	d8c02017 	ldw	r3,128(sp)
    4db0:	d8801f17 	ldw	r2,124(sp)
    4db4:	da000404 	addi	r8,sp,16
    4db8:	003fee06 	br	4d74 <__alt_data_end+0xff004d74>
    4dbc:	9088703a 	and	r4,r18,r2
    4dc0:	203eab1e 	bne	r4,zero,4870 <__alt_data_end+0xff004870>
    4dc4:	dc401f17 	ldw	r17,124(sp)
    4dc8:	40800115 	stw	r2,4(r8)
    4dcc:	44000015 	stw	r16,0(r8)
    4dd0:	8c400044 	addi	r17,r17,1
    4dd4:	d8c02015 	stw	r3,128(sp)
    4dd8:	dc401f15 	stw	r17,124(sp)
    4ddc:	008001c4 	movi	r2,7
    4de0:	14400e16 	blt	r2,r17,4e1c <___vfprintf_internal_r+0x15c4>
    4de4:	45800204 	addi	r22,r8,8
    4de8:	003eca06 	br	4914 <__alt_data_end+0xff004914>
    4dec:	01000074 	movhi	r4,1
    4df0:	21070284 	addi	r4,r4,7178
    4df4:	d9002b15 	stw	r4,172(sp)
    4df8:	d8802b17 	ldw	r2,172(sp)
    4dfc:	1c07883a 	add	r3,r3,r16
    4e00:	8c400044 	addi	r17,r17,1
    4e04:	b0800015 	stw	r2,0(r22)
    4e08:	b4000115 	stw	r16,4(r22)
    4e0c:	d8c02015 	stw	r3,128(sp)
    4e10:	dc401f15 	stw	r17,124(sp)
    4e14:	008001c4 	movi	r2,7
    4e18:	147ebd0e 	bge	r2,r17,4910 <__alt_data_end+0xff004910>
    4e1c:	d9002c17 	ldw	r4,176(sp)
    4e20:	d9801e04 	addi	r6,sp,120
    4e24:	b80b883a 	mov	r5,r23
    4e28:	000a5f40 	call	a5f4 <__sprint_r>
    4e2c:	103b8c1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4e30:	d8c02017 	ldw	r3,128(sp)
    4e34:	dc401f17 	ldw	r17,124(sp)
    4e38:	dd800404 	addi	r22,sp,16
    4e3c:	003eb506 	br	4914 <__alt_data_end+0xff004914>
    4e40:	d9002c17 	ldw	r4,176(sp)
    4e44:	d9801e04 	addi	r6,sp,120
    4e48:	b80b883a 	mov	r5,r23
    4e4c:	000a5f40 	call	a5f4 <__sprint_r>
    4e50:	103b831e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4e54:	d8c02017 	ldw	r3,128(sp)
    4e58:	dc401f17 	ldw	r17,124(sp)
    4e5c:	da000404 	addi	r8,sp,16
    4e60:	003e8d06 	br	4898 <__alt_data_end+0xff004898>
    4e64:	d9002c17 	ldw	r4,176(sp)
    4e68:	d9801e04 	addi	r6,sp,120
    4e6c:	b80b883a 	mov	r5,r23
    4e70:	000a5f40 	call	a5f4 <__sprint_r>
    4e74:	103b7a1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4e78:	d8c02017 	ldw	r3,128(sp)
    4e7c:	dc401f17 	ldw	r17,124(sp)
    4e80:	dd800404 	addi	r22,sp,16
    4e84:	003e8f06 	br	48c4 <__alt_data_end+0xff0048c4>
    4e88:	0027883a 	mov	r19,zero
    4e8c:	003f4a06 	br	4bb8 <__alt_data_end+0xff004bb8>
    4e90:	d9002c17 	ldw	r4,176(sp)
    4e94:	d9801e04 	addi	r6,sp,120
    4e98:	b80b883a 	mov	r5,r23
    4e9c:	000a5f40 	call	a5f4 <__sprint_r>
    4ea0:	103b6f1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    4ea4:	d8c02017 	ldw	r3,128(sp)
    4ea8:	da000404 	addi	r8,sp,16
    4eac:	003c9d06 	br	4124 <__alt_data_end+0xff004124>
    4eb0:	04e7c83a 	sub	r19,zero,r19
    4eb4:	9804c03a 	cmpne	r2,r19,zero
    4eb8:	05adc83a 	sub	r22,zero,r22
    4ebc:	b0adc83a 	sub	r22,r22,r2
    4ec0:	d8802917 	ldw	r2,164(sp)
    4ec4:	07000b44 	movi	fp,45
    4ec8:	df002785 	stb	fp,158(sp)
    4ecc:	10017b16 	blt	r2,zero,54bc <___vfprintf_internal_r+0x1c64>
    4ed0:	00bfdfc4 	movi	r2,-129
    4ed4:	90a4703a 	and	r18,r18,r2
    4ed8:	003bb106 	br	3da0 <__alt_data_end+0xff003da0>
    4edc:	d9003617 	ldw	r4,216(sp)
    4ee0:	d9403817 	ldw	r5,224(sp)
    4ee4:	da003d15 	stw	r8,244(sp)
    4ee8:	000a26c0 	call	a26c <__fpclassifyd>
    4eec:	da003d17 	ldw	r8,244(sp)
    4ef0:	1000f026 	beq	r2,zero,52b4 <___vfprintf_internal_r+0x1a5c>
    4ef4:	d9002917 	ldw	r4,164(sp)
    4ef8:	05bff7c4 	movi	r22,-33
    4efc:	00bfffc4 	movi	r2,-1
    4f00:	8dac703a 	and	r22,r17,r22
    4f04:	20820026 	beq	r4,r2,5708 <___vfprintf_internal_r+0x1eb0>
    4f08:	008011c4 	movi	r2,71
    4f0c:	b081f726 	beq	r22,r2,56ec <___vfprintf_internal_r+0x1e94>
    4f10:	d9003817 	ldw	r4,224(sp)
    4f14:	90c04014 	ori	r3,r18,256
    4f18:	d8c02b15 	stw	r3,172(sp)
    4f1c:	20021516 	blt	r4,zero,5774 <___vfprintf_internal_r+0x1f1c>
    4f20:	dcc03817 	ldw	r19,224(sp)
    4f24:	d8002a05 	stb	zero,168(sp)
    4f28:	00801984 	movi	r2,102
    4f2c:	8881f926 	beq	r17,r2,5714 <___vfprintf_internal_r+0x1ebc>
    4f30:	00801184 	movi	r2,70
    4f34:	88821c26 	beq	r17,r2,57a8 <___vfprintf_internal_r+0x1f50>
    4f38:	00801144 	movi	r2,69
    4f3c:	b081ef26 	beq	r22,r2,56fc <___vfprintf_internal_r+0x1ea4>
    4f40:	d8c02917 	ldw	r3,164(sp)
    4f44:	d8802104 	addi	r2,sp,132
    4f48:	d8800315 	stw	r2,12(sp)
    4f4c:	d9403617 	ldw	r5,216(sp)
    4f50:	d8802504 	addi	r2,sp,148
    4f54:	d9002c17 	ldw	r4,176(sp)
    4f58:	d8800215 	stw	r2,8(sp)
    4f5c:	d8802604 	addi	r2,sp,152
    4f60:	d8c00015 	stw	r3,0(sp)
    4f64:	d8800115 	stw	r2,4(sp)
    4f68:	01c00084 	movi	r7,2
    4f6c:	980d883a 	mov	r6,r19
    4f70:	d8c03c15 	stw	r3,240(sp)
    4f74:	da003d15 	stw	r8,244(sp)
    4f78:	0005e7c0 	call	5e7c <_dtoa_r>
    4f7c:	1021883a 	mov	r16,r2
    4f80:	008019c4 	movi	r2,103
    4f84:	d8c03c17 	ldw	r3,240(sp)
    4f88:	da003d17 	ldw	r8,244(sp)
    4f8c:	88817126 	beq	r17,r2,5554 <___vfprintf_internal_r+0x1cfc>
    4f90:	008011c4 	movi	r2,71
    4f94:	88829226 	beq	r17,r2,59e0 <___vfprintf_internal_r+0x2188>
    4f98:	80f9883a 	add	fp,r16,r3
    4f9c:	d9003617 	ldw	r4,216(sp)
    4fa0:	000d883a 	mov	r6,zero
    4fa4:	000f883a 	mov	r7,zero
    4fa8:	980b883a 	mov	r5,r19
    4fac:	da003d15 	stw	r8,244(sp)
    4fb0:	000d7d00 	call	d7d0 <__eqdf2>
    4fb4:	da003d17 	ldw	r8,244(sp)
    4fb8:	10018d26 	beq	r2,zero,55f0 <___vfprintf_internal_r+0x1d98>
    4fbc:	d8802117 	ldw	r2,132(sp)
    4fc0:	1700062e 	bgeu	r2,fp,4fdc <___vfprintf_internal_r+0x1784>
    4fc4:	01000c04 	movi	r4,48
    4fc8:	10c00044 	addi	r3,r2,1
    4fcc:	d8c02115 	stw	r3,132(sp)
    4fd0:	11000005 	stb	r4,0(r2)
    4fd4:	d8802117 	ldw	r2,132(sp)
    4fd8:	173ffb36 	bltu	r2,fp,4fc8 <__alt_data_end+0xff004fc8>
    4fdc:	1405c83a 	sub	r2,r2,r16
    4fe0:	d8803315 	stw	r2,204(sp)
    4fe4:	008011c4 	movi	r2,71
    4fe8:	b0817626 	beq	r22,r2,55c4 <___vfprintf_internal_r+0x1d6c>
    4fec:	00801944 	movi	r2,101
    4ff0:	1442810e 	bge	r2,r17,59f8 <___vfprintf_internal_r+0x21a0>
    4ff4:	d8c02617 	ldw	r3,152(sp)
    4ff8:	00801984 	movi	r2,102
    4ffc:	d8c03215 	stw	r3,200(sp)
    5000:	8881fe26 	beq	r17,r2,57fc <___vfprintf_internal_r+0x1fa4>
    5004:	d8c03217 	ldw	r3,200(sp)
    5008:	d9003317 	ldw	r4,204(sp)
    500c:	1901dd16 	blt	r3,r4,5784 <___vfprintf_internal_r+0x1f2c>
    5010:	9480004c 	andi	r18,r18,1
    5014:	90022b1e 	bne	r18,zero,58c4 <___vfprintf_internal_r+0x206c>
    5018:	1805883a 	mov	r2,r3
    501c:	18028016 	blt	r3,zero,5a20 <___vfprintf_internal_r+0x21c8>
    5020:	d8c03217 	ldw	r3,200(sp)
    5024:	044019c4 	movi	r17,103
    5028:	d8c02e15 	stw	r3,184(sp)
    502c:	df002a07 	ldb	fp,168(sp)
    5030:	e001531e 	bne	fp,zero,5580 <___vfprintf_internal_r+0x1d28>
    5034:	df002783 	ldbu	fp,158(sp)
    5038:	d8802a15 	stw	r2,168(sp)
    503c:	dc802b17 	ldw	r18,172(sp)
    5040:	d8002915 	stw	zero,164(sp)
    5044:	003bd106 	br	3f8c <__alt_data_end+0xff003f8c>
    5048:	d8802d17 	ldw	r2,180(sp)
    504c:	d8c02d17 	ldw	r3,180(sp)
    5050:	d9002d17 	ldw	r4,180(sp)
    5054:	10800017 	ldw	r2,0(r2)
    5058:	18c00117 	ldw	r3,4(r3)
    505c:	21000204 	addi	r4,r4,8
    5060:	d8803615 	stw	r2,216(sp)
    5064:	d8c03815 	stw	r3,224(sp)
    5068:	d9002d15 	stw	r4,180(sp)
    506c:	003b7506 	br	3e44 <__alt_data_end+0xff003e44>
    5070:	ac400007 	ldb	r17,0(r21)
    5074:	003a5906 	br	39dc <__alt_data_end+0xff0039dc>
    5078:	9080100c 	andi	r2,r18,64
    507c:	1000a826 	beq	r2,zero,5320 <___vfprintf_internal_r+0x1ac8>
    5080:	d9002d17 	ldw	r4,180(sp)
    5084:	002d883a 	mov	r22,zero
    5088:	24c0000b 	ldhu	r19,0(r4)
    508c:	21000104 	addi	r4,r4,4
    5090:	d9002d15 	stw	r4,180(sp)
    5094:	003ccb06 	br	43c4 <__alt_data_end+0xff0043c4>
    5098:	d8c02d17 	ldw	r3,180(sp)
    509c:	d9002917 	ldw	r4,164(sp)
    50a0:	002d883a 	mov	r22,zero
    50a4:	18800104 	addi	r2,r3,4
    50a8:	1cc00017 	ldw	r19,0(r3)
    50ac:	203ebb0e 	bge	r4,zero,4b9c <__alt_data_end+0xff004b9c>
    50b0:	003ef106 	br	4c78 <__alt_data_end+0xff004c78>
    50b4:	9080040c 	andi	r2,r18,16
    50b8:	1000921e 	bne	r2,zero,5304 <___vfprintf_internal_r+0x1aac>
    50bc:	9480100c 	andi	r18,r18,64
    50c0:	90013926 	beq	r18,zero,55a8 <___vfprintf_internal_r+0x1d50>
    50c4:	d9002d17 	ldw	r4,180(sp)
    50c8:	d9402f17 	ldw	r5,188(sp)
    50cc:	20800017 	ldw	r2,0(r4)
    50d0:	21000104 	addi	r4,r4,4
    50d4:	d9002d15 	stw	r4,180(sp)
    50d8:	1140000d 	sth	r5,0(r2)
    50dc:	003a1606 	br	3938 <__alt_data_end+0xff003938>
    50e0:	9080100c 	andi	r2,r18,64
    50e4:	10008026 	beq	r2,zero,52e8 <___vfprintf_internal_r+0x1a90>
    50e8:	d8c02d17 	ldw	r3,180(sp)
    50ec:	1cc0000f 	ldh	r19,0(r3)
    50f0:	18c00104 	addi	r3,r3,4
    50f4:	d8c02d15 	stw	r3,180(sp)
    50f8:	982dd7fa 	srai	r22,r19,31
    50fc:	b005883a 	mov	r2,r22
    5100:	003b1f06 	br	3d80 <__alt_data_end+0xff003d80>
    5104:	9080100c 	andi	r2,r18,64
    5108:	d8002785 	stb	zero,158(sp)
    510c:	10008a1e 	bne	r2,zero,5338 <___vfprintf_internal_r+0x1ae0>
    5110:	d9402d17 	ldw	r5,180(sp)
    5114:	d8c02917 	ldw	r3,164(sp)
    5118:	002d883a 	mov	r22,zero
    511c:	28800104 	addi	r2,r5,4
    5120:	2cc00017 	ldw	r19,0(r5)
    5124:	183e4b0e 	bge	r3,zero,4a54 <__alt_data_end+0xff004a54>
    5128:	9d86b03a 	or	r3,r19,r22
    512c:	d8802d15 	stw	r2,180(sp)
    5130:	183e4c1e 	bne	r3,zero,4a64 <__alt_data_end+0xff004a64>
    5134:	0039883a 	mov	fp,zero
    5138:	0005883a 	mov	r2,zero
    513c:	003d4006 	br	4640 <__alt_data_end+0xff004640>
    5140:	01400074 	movhi	r5,1
    5144:	29470284 	addi	r5,r5,7178
    5148:	d9402b15 	stw	r5,172(sp)
    514c:	d9402b17 	ldw	r5,172(sp)
    5150:	1c47883a 	add	r3,r3,r17
    5154:	10800044 	addi	r2,r2,1
    5158:	41400015 	stw	r5,0(r8)
    515c:	44400115 	stw	r17,4(r8)
    5160:	d8c02015 	stw	r3,128(sp)
    5164:	d8801f15 	stw	r2,124(sp)
    5168:	010001c4 	movi	r4,7
    516c:	20bec816 	blt	r4,r2,4c90 <__alt_data_end+0xff004c90>
    5170:	42000204 	addi	r8,r8,8
    5174:	003ecd06 	br	4cac <__alt_data_end+0xff004cac>
    5178:	d9002917 	ldw	r4,164(sp)
    517c:	d8002785 	stb	zero,158(sp)
    5180:	203d2d16 	blt	r4,zero,4638 <__alt_data_end+0xff004638>
    5184:	00bfdfc4 	movi	r2,-129
    5188:	90a4703a 	and	r18,r18,r2
    518c:	003a9106 	br	3bd4 <__alt_data_end+0xff003bd4>
    5190:	01000074 	movhi	r4,1
    5194:	21070284 	addi	r4,r4,7178
    5198:	d9002b15 	stw	r4,172(sp)
    519c:	003c0c06 	br	41d0 <__alt_data_end+0xff0041d0>
    51a0:	d9002c17 	ldw	r4,176(sp)
    51a4:	d9801e04 	addi	r6,sp,120
    51a8:	b80b883a 	mov	r5,r23
    51ac:	000a5f40 	call	a5f4 <__sprint_r>
    51b0:	103aab1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    51b4:	d8c02017 	ldw	r3,128(sp)
    51b8:	da000404 	addi	r8,sp,16
    51bc:	003d4106 	br	46c4 <__alt_data_end+0xff0046c4>
    51c0:	d8801f17 	ldw	r2,124(sp)
    51c4:	01400074 	movhi	r5,1
    51c8:	01000044 	movi	r4,1
    51cc:	18c00044 	addi	r3,r3,1
    51d0:	10800044 	addi	r2,r2,1
    51d4:	29470204 	addi	r5,r5,7176
    51d8:	41000115 	stw	r4,4(r8)
    51dc:	41400015 	stw	r5,0(r8)
    51e0:	d8c02015 	stw	r3,128(sp)
    51e4:	d8801f15 	stw	r2,124(sp)
    51e8:	010001c4 	movi	r4,7
    51ec:	20805c16 	blt	r4,r2,5360 <___vfprintf_internal_r+0x1b08>
    51f0:	42000204 	addi	r8,r8,8
    51f4:	8800041e 	bne	r17,zero,5208 <___vfprintf_internal_r+0x19b0>
    51f8:	d8803317 	ldw	r2,204(sp)
    51fc:	1000021e 	bne	r2,zero,5208 <___vfprintf_internal_r+0x19b0>
    5200:	9080004c 	andi	r2,r18,1
    5204:	103c0926 	beq	r2,zero,422c <__alt_data_end+0xff00422c>
    5208:	d9003717 	ldw	r4,220(sp)
    520c:	d8801f17 	ldw	r2,124(sp)
    5210:	d9403417 	ldw	r5,208(sp)
    5214:	20c7883a 	add	r3,r4,r3
    5218:	10800044 	addi	r2,r2,1
    521c:	41000115 	stw	r4,4(r8)
    5220:	41400015 	stw	r5,0(r8)
    5224:	d8c02015 	stw	r3,128(sp)
    5228:	d8801f15 	stw	r2,124(sp)
    522c:	010001c4 	movi	r4,7
    5230:	20812116 	blt	r4,r2,56b8 <___vfprintf_internal_r+0x1e60>
    5234:	42000204 	addi	r8,r8,8
    5238:	0463c83a 	sub	r17,zero,r17
    523c:	0440730e 	bge	zero,r17,540c <___vfprintf_internal_r+0x1bb4>
    5240:	05800404 	movi	r22,16
    5244:	b440860e 	bge	r22,r17,5460 <___vfprintf_internal_r+0x1c08>
    5248:	01400074 	movhi	r5,1
    524c:	29470284 	addi	r5,r5,7178
    5250:	d9402b15 	stw	r5,172(sp)
    5254:	070001c4 	movi	fp,7
    5258:	dcc02c17 	ldw	r19,176(sp)
    525c:	00000306 	br	526c <___vfprintf_internal_r+0x1a14>
    5260:	42000204 	addi	r8,r8,8
    5264:	8c7ffc04 	addi	r17,r17,-16
    5268:	b440800e 	bge	r22,r17,546c <___vfprintf_internal_r+0x1c14>
    526c:	18c00404 	addi	r3,r3,16
    5270:	10800044 	addi	r2,r2,1
    5274:	45000015 	stw	r20,0(r8)
    5278:	45800115 	stw	r22,4(r8)
    527c:	d8c02015 	stw	r3,128(sp)
    5280:	d8801f15 	stw	r2,124(sp)
    5284:	e0bff60e 	bge	fp,r2,5260 <__alt_data_end+0xff005260>
    5288:	d9801e04 	addi	r6,sp,120
    528c:	b80b883a 	mov	r5,r23
    5290:	9809883a 	mov	r4,r19
    5294:	000a5f40 	call	a5f4 <__sprint_r>
    5298:	103a711e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    529c:	d8c02017 	ldw	r3,128(sp)
    52a0:	d8801f17 	ldw	r2,124(sp)
    52a4:	da000404 	addi	r8,sp,16
    52a8:	003fee06 	br	5264 <__alt_data_end+0xff005264>
    52ac:	00bfffc4 	movi	r2,-1
    52b0:	003a6f06 	br	3c70 <__alt_data_end+0xff003c70>
    52b4:	008011c4 	movi	r2,71
    52b8:	1440b816 	blt	r2,r17,559c <___vfprintf_internal_r+0x1d44>
    52bc:	04000074 	movhi	r16,1
    52c0:	8406f404 	addi	r16,r16,7120
    52c4:	00c000c4 	movi	r3,3
    52c8:	00bfdfc4 	movi	r2,-129
    52cc:	d8c02a15 	stw	r3,168(sp)
    52d0:	90a4703a 	and	r18,r18,r2
    52d4:	df002783 	ldbu	fp,158(sp)
    52d8:	d8c02e15 	stw	r3,184(sp)
    52dc:	d8002915 	stw	zero,164(sp)
    52e0:	d8003215 	stw	zero,200(sp)
    52e4:	003b2906 	br	3f8c <__alt_data_end+0xff003f8c>
    52e8:	d9002d17 	ldw	r4,180(sp)
    52ec:	24c00017 	ldw	r19,0(r4)
    52f0:	21000104 	addi	r4,r4,4
    52f4:	d9002d15 	stw	r4,180(sp)
    52f8:	982dd7fa 	srai	r22,r19,31
    52fc:	b005883a 	mov	r2,r22
    5300:	003a9f06 	br	3d80 <__alt_data_end+0xff003d80>
    5304:	d9402d17 	ldw	r5,180(sp)
    5308:	d8c02f17 	ldw	r3,188(sp)
    530c:	28800017 	ldw	r2,0(r5)
    5310:	29400104 	addi	r5,r5,4
    5314:	d9402d15 	stw	r5,180(sp)
    5318:	10c00015 	stw	r3,0(r2)
    531c:	00398606 	br	3938 <__alt_data_end+0xff003938>
    5320:	d9402d17 	ldw	r5,180(sp)
    5324:	002d883a 	mov	r22,zero
    5328:	2cc00017 	ldw	r19,0(r5)
    532c:	29400104 	addi	r5,r5,4
    5330:	d9402d15 	stw	r5,180(sp)
    5334:	003c2306 	br	43c4 <__alt_data_end+0xff0043c4>
    5338:	d8c02d17 	ldw	r3,180(sp)
    533c:	d9002917 	ldw	r4,164(sp)
    5340:	002d883a 	mov	r22,zero
    5344:	18800104 	addi	r2,r3,4
    5348:	1cc0000b 	ldhu	r19,0(r3)
    534c:	203dc10e 	bge	r4,zero,4a54 <__alt_data_end+0xff004a54>
    5350:	003f7506 	br	5128 <__alt_data_end+0xff005128>
    5354:	04000074 	movhi	r16,1
    5358:	8406f204 	addi	r16,r16,7112
    535c:	003acc06 	br	3e90 <__alt_data_end+0xff003e90>
    5360:	d9002c17 	ldw	r4,176(sp)
    5364:	d9801e04 	addi	r6,sp,120
    5368:	b80b883a 	mov	r5,r23
    536c:	000a5f40 	call	a5f4 <__sprint_r>
    5370:	103a3b1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    5374:	dc402617 	ldw	r17,152(sp)
    5378:	d8c02017 	ldw	r3,128(sp)
    537c:	da000404 	addi	r8,sp,16
    5380:	003f9c06 	br	51f4 <__alt_data_end+0xff0051f4>
    5384:	ac400043 	ldbu	r17,1(r21)
    5388:	94800814 	ori	r18,r18,32
    538c:	ad400044 	addi	r21,r21,1
    5390:	8c403fcc 	andi	r17,r17,255
    5394:	8c40201c 	xori	r17,r17,128
    5398:	8c7fe004 	addi	r17,r17,-128
    539c:	00398f06 	br	39dc <__alt_data_end+0xff0039dc>
    53a0:	d8c02d15 	stw	r3,180(sp)
    53a4:	0039883a 	mov	fp,zero
    53a8:	003e3506 	br	4c80 <__alt_data_end+0xff004c80>
    53ac:	d9002c17 	ldw	r4,176(sp)
    53b0:	d9801e04 	addi	r6,sp,120
    53b4:	b80b883a 	mov	r5,r23
    53b8:	000a5f40 	call	a5f4 <__sprint_r>
    53bc:	103a281e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    53c0:	d8c02017 	ldw	r3,128(sp)
    53c4:	da000404 	addi	r8,sp,16
    53c8:	003cd006 	br	470c <__alt_data_end+0xff00470c>
    53cc:	8009883a 	mov	r4,r16
    53d0:	da003d15 	stw	r8,244(sp)
    53d4:	00037c00 	call	37c0 <strlen>
    53d8:	d8802e15 	stw	r2,184(sp)
    53dc:	da003d17 	ldw	r8,244(sp)
    53e0:	103c340e 	bge	r2,zero,44b4 <__alt_data_end+0xff0044b4>
    53e4:	0005883a 	mov	r2,zero
    53e8:	003c3206 	br	44b4 <__alt_data_end+0xff0044b4>
    53ec:	d9002c17 	ldw	r4,176(sp)
    53f0:	d9801e04 	addi	r6,sp,120
    53f4:	b80b883a 	mov	r5,r23
    53f8:	000a5f40 	call	a5f4 <__sprint_r>
    53fc:	103a181e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    5400:	d8c02017 	ldw	r3,128(sp)
    5404:	d8801f17 	ldw	r2,124(sp)
    5408:	da000404 	addi	r8,sp,16
    540c:	d9403317 	ldw	r5,204(sp)
    5410:	10800044 	addi	r2,r2,1
    5414:	44000015 	stw	r16,0(r8)
    5418:	28c7883a 	add	r3,r5,r3
    541c:	003b7d06 	br	4214 <__alt_data_end+0xff004214>
    5420:	01000074 	movhi	r4,1
    5424:	21070684 	addi	r4,r4,7194
    5428:	d9003515 	stw	r4,212(sp)
    542c:	003b1406 	br	4080 <__alt_data_end+0xff004080>
    5430:	013fffc4 	movi	r4,-1
    5434:	003a3506 	br	3d0c <__alt_data_end+0xff003d0c>
    5438:	0023883a 	mov	r17,zero
    543c:	003d9d06 	br	4ab4 <__alt_data_end+0xff004ab4>
    5440:	d9002c17 	ldw	r4,176(sp)
    5444:	d9801e04 	addi	r6,sp,120
    5448:	b80b883a 	mov	r5,r23
    544c:	000a5f40 	call	a5f4 <__sprint_r>
    5450:	103a031e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    5454:	d8c02017 	ldw	r3,128(sp)
    5458:	da000404 	addi	r8,sp,16
    545c:	003d9406 	br	4ab0 <__alt_data_end+0xff004ab0>
    5460:	01000074 	movhi	r4,1
    5464:	21070284 	addi	r4,r4,7178
    5468:	d9002b15 	stw	r4,172(sp)
    546c:	d9002b17 	ldw	r4,172(sp)
    5470:	1c47883a 	add	r3,r3,r17
    5474:	10800044 	addi	r2,r2,1
    5478:	41000015 	stw	r4,0(r8)
    547c:	44400115 	stw	r17,4(r8)
    5480:	d8c02015 	stw	r3,128(sp)
    5484:	d8801f15 	stw	r2,124(sp)
    5488:	010001c4 	movi	r4,7
    548c:	20bfd716 	blt	r4,r2,53ec <__alt_data_end+0xff0053ec>
    5490:	42000204 	addi	r8,r8,8
    5494:	003fdd06 	br	540c <__alt_data_end+0xff00540c>
    5498:	d9002c17 	ldw	r4,176(sp)
    549c:	d9801e04 	addi	r6,sp,120
    54a0:	b80b883a 	mov	r5,r23
    54a4:	000a5f40 	call	a5f4 <__sprint_r>
    54a8:	1039ed1e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    54ac:	d8802617 	ldw	r2,152(sp)
    54b0:	d8c02017 	ldw	r3,128(sp)
    54b4:	da000404 	addi	r8,sp,16
    54b8:	003e1006 	br	4cfc <__alt_data_end+0xff004cfc>
    54bc:	00800044 	movi	r2,1
    54c0:	10803fcc 	andi	r2,r2,255
    54c4:	00c00044 	movi	r3,1
    54c8:	10fa3526 	beq	r2,r3,3da0 <__alt_data_end+0xff003da0>
    54cc:	00c00084 	movi	r3,2
    54d0:	10fbcb26 	beq	r2,r3,4400 <__alt_data_end+0xff004400>
    54d4:	003a8f06 	br	3f14 <__alt_data_end+0xff003f14>
    54d8:	01000074 	movhi	r4,1
    54dc:	21070684 	addi	r4,r4,7194
    54e0:	d9003515 	stw	r4,212(sp)
    54e4:	003b7606 	br	42c0 <__alt_data_end+0xff0042c0>
    54e8:	d8802917 	ldw	r2,164(sp)
    54ec:	00c00184 	movi	r3,6
    54f0:	1880012e 	bgeu	r3,r2,54f8 <___vfprintf_internal_r+0x1ca0>
    54f4:	1805883a 	mov	r2,r3
    54f8:	d8802e15 	stw	r2,184(sp)
    54fc:	1000ef16 	blt	r2,zero,58bc <___vfprintf_internal_r+0x2064>
    5500:	04000074 	movhi	r16,1
    5504:	d8802a15 	stw	r2,168(sp)
    5508:	dcc02d15 	stw	r19,180(sp)
    550c:	d8002915 	stw	zero,164(sp)
    5510:	d8003215 	stw	zero,200(sp)
    5514:	84070004 	addi	r16,r16,7168
    5518:	0039883a 	mov	fp,zero
    551c:	003aa206 	br	3fa8 <__alt_data_end+0xff003fa8>
    5520:	0021883a 	mov	r16,zero
    5524:	003e0706 	br	4d44 <__alt_data_end+0xff004d44>
    5528:	d9002c17 	ldw	r4,176(sp)
    552c:	d9801e04 	addi	r6,sp,120
    5530:	b80b883a 	mov	r5,r23
    5534:	000a5f40 	call	a5f4 <__sprint_r>
    5538:	1039c91e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    553c:	d8802617 	ldw	r2,152(sp)
    5540:	d9403317 	ldw	r5,204(sp)
    5544:	d8c02017 	ldw	r3,128(sp)
    5548:	da000404 	addi	r8,sp,16
    554c:	2885c83a 	sub	r2,r5,r2
    5550:	003dfb06 	br	4d40 <__alt_data_end+0xff004d40>
    5554:	9080004c 	andi	r2,r18,1
    5558:	103e8f1e 	bne	r2,zero,4f98 <__alt_data_end+0xff004f98>
    555c:	d8802117 	ldw	r2,132(sp)
    5560:	003e9e06 	br	4fdc <__alt_data_end+0xff004fdc>
    5564:	1025883a 	mov	r18,r2
    5568:	0039883a 	mov	fp,zero
    556c:	00800084 	movi	r2,2
    5570:	003fd306 	br	54c0 <__alt_data_end+0xff0054c0>
    5574:	07000b44 	movi	fp,45
    5578:	df002785 	stb	fp,158(sp)
    557c:	003a4006 	br	3e80 <__alt_data_end+0xff003e80>
    5580:	00c00b44 	movi	r3,45
    5584:	d8c02785 	stb	r3,158(sp)
    5588:	d8802a15 	stw	r2,168(sp)
    558c:	dc802b17 	ldw	r18,172(sp)
    5590:	d8002915 	stw	zero,164(sp)
    5594:	07000b44 	movi	fp,45
    5598:	003a8006 	br	3f9c <__alt_data_end+0xff003f9c>
    559c:	04000074 	movhi	r16,1
    55a0:	8406f504 	addi	r16,r16,7124
    55a4:	003f4706 	br	52c4 <__alt_data_end+0xff0052c4>
    55a8:	d8c02d17 	ldw	r3,180(sp)
    55ac:	d9002f17 	ldw	r4,188(sp)
    55b0:	18800017 	ldw	r2,0(r3)
    55b4:	18c00104 	addi	r3,r3,4
    55b8:	d8c02d15 	stw	r3,180(sp)
    55bc:	11000015 	stw	r4,0(r2)
    55c0:	0038dd06 	br	3938 <__alt_data_end+0xff003938>
    55c4:	dd802617 	ldw	r22,152(sp)
    55c8:	00bfff44 	movi	r2,-3
    55cc:	b0801c16 	blt	r22,r2,5640 <___vfprintf_internal_r+0x1de8>
    55d0:	d9402917 	ldw	r5,164(sp)
    55d4:	2d801a16 	blt	r5,r22,5640 <___vfprintf_internal_r+0x1de8>
    55d8:	dd803215 	stw	r22,200(sp)
    55dc:	003e8906 	br	5004 <__alt_data_end+0xff005004>
    55e0:	01000074 	movhi	r4,1
    55e4:	21070284 	addi	r4,r4,7178
    55e8:	d9002b15 	stw	r4,172(sp)
    55ec:	003c9106 	br	4834 <__alt_data_end+0xff004834>
    55f0:	e005883a 	mov	r2,fp
    55f4:	003e7906 	br	4fdc <__alt_data_end+0xff004fdc>
    55f8:	d9402917 	ldw	r5,164(sp)
    55fc:	df002783 	ldbu	fp,158(sp)
    5600:	dcc02d15 	stw	r19,180(sp)
    5604:	d9402a15 	stw	r5,168(sp)
    5608:	d9402e15 	stw	r5,184(sp)
    560c:	d8002915 	stw	zero,164(sp)
    5610:	d8003215 	stw	zero,200(sp)
    5614:	003a5d06 	br	3f8c <__alt_data_end+0xff003f8c>
    5618:	9080004c 	andi	r2,r18,1
    561c:	0039883a 	mov	fp,zero
    5620:	10000426 	beq	r2,zero,5634 <___vfprintf_internal_r+0x1ddc>
    5624:	00800c04 	movi	r2,48
    5628:	dc001dc4 	addi	r16,sp,119
    562c:	d8801dc5 	stb	r2,119(sp)
    5630:	003b8006 	br	4434 <__alt_data_end+0xff004434>
    5634:	d8002e15 	stw	zero,184(sp)
    5638:	dc001e04 	addi	r16,sp,120
    563c:	003a4d06 	br	3f74 <__alt_data_end+0xff003f74>
    5640:	8c7fff84 	addi	r17,r17,-2
    5644:	b5bfffc4 	addi	r22,r22,-1
    5648:	dd802615 	stw	r22,152(sp)
    564c:	dc4022c5 	stb	r17,139(sp)
    5650:	b000bf16 	blt	r22,zero,5950 <___vfprintf_internal_r+0x20f8>
    5654:	00800ac4 	movi	r2,43
    5658:	d8802305 	stb	r2,140(sp)
    565c:	00800244 	movi	r2,9
    5660:	15807016 	blt	r2,r22,5824 <___vfprintf_internal_r+0x1fcc>
    5664:	00800c04 	movi	r2,48
    5668:	b5800c04 	addi	r22,r22,48
    566c:	d8802345 	stb	r2,141(sp)
    5670:	dd802385 	stb	r22,142(sp)
    5674:	d88023c4 	addi	r2,sp,143
    5678:	df0022c4 	addi	fp,sp,139
    567c:	d8c03317 	ldw	r3,204(sp)
    5680:	1739c83a 	sub	fp,r2,fp
    5684:	d9003317 	ldw	r4,204(sp)
    5688:	e0c7883a 	add	r3,fp,r3
    568c:	df003a15 	stw	fp,232(sp)
    5690:	d8c02e15 	stw	r3,184(sp)
    5694:	00800044 	movi	r2,1
    5698:	1100b30e 	bge	r2,r4,5968 <___vfprintf_internal_r+0x2110>
    569c:	d8c02e17 	ldw	r3,184(sp)
    56a0:	18c00044 	addi	r3,r3,1
    56a4:	d8c02e15 	stw	r3,184(sp)
    56a8:	1805883a 	mov	r2,r3
    56ac:	1800ac16 	blt	r3,zero,5960 <___vfprintf_internal_r+0x2108>
    56b0:	d8003215 	stw	zero,200(sp)
    56b4:	003e5d06 	br	502c <__alt_data_end+0xff00502c>
    56b8:	d9002c17 	ldw	r4,176(sp)
    56bc:	d9801e04 	addi	r6,sp,120
    56c0:	b80b883a 	mov	r5,r23
    56c4:	000a5f40 	call	a5f4 <__sprint_r>
    56c8:	1039651e 	bne	r2,zero,3c60 <__alt_data_end+0xff003c60>
    56cc:	dc402617 	ldw	r17,152(sp)
    56d0:	d8c02017 	ldw	r3,128(sp)
    56d4:	d8801f17 	ldw	r2,124(sp)
    56d8:	da000404 	addi	r8,sp,16
    56dc:	003ed606 	br	5238 <__alt_data_end+0xff005238>
    56e0:	582b883a 	mov	r21,r11
    56e4:	d8002915 	stw	zero,164(sp)
    56e8:	0038bd06 	br	39e0 <__alt_data_end+0xff0039e0>
    56ec:	d8802917 	ldw	r2,164(sp)
    56f0:	103e071e 	bne	r2,zero,4f10 <__alt_data_end+0xff004f10>
    56f4:	dc002915 	stw	r16,164(sp)
    56f8:	003e0506 	br	4f10 <__alt_data_end+0xff004f10>
    56fc:	d9002917 	ldw	r4,164(sp)
    5700:	20c00044 	addi	r3,r4,1
    5704:	003e0f06 	br	4f44 <__alt_data_end+0xff004f44>
    5708:	01400184 	movi	r5,6
    570c:	d9402915 	stw	r5,164(sp)
    5710:	003dff06 	br	4f10 <__alt_data_end+0xff004f10>
    5714:	d8802104 	addi	r2,sp,132
    5718:	d8800315 	stw	r2,12(sp)
    571c:	d8802504 	addi	r2,sp,148
    5720:	d8800215 	stw	r2,8(sp)
    5724:	d8802604 	addi	r2,sp,152
    5728:	d8800115 	stw	r2,4(sp)
    572c:	d8802917 	ldw	r2,164(sp)
    5730:	d9403617 	ldw	r5,216(sp)
    5734:	d9002c17 	ldw	r4,176(sp)
    5738:	d8800015 	stw	r2,0(sp)
    573c:	01c000c4 	movi	r7,3
    5740:	980d883a 	mov	r6,r19
    5744:	da003d15 	stw	r8,244(sp)
    5748:	0005e7c0 	call	5e7c <_dtoa_r>
    574c:	d8c02917 	ldw	r3,164(sp)
    5750:	da003d17 	ldw	r8,244(sp)
    5754:	1021883a 	mov	r16,r2
    5758:	10f9883a 	add	fp,r2,r3
    575c:	81000007 	ldb	r4,0(r16)
    5760:	00800c04 	movi	r2,48
    5764:	20805e26 	beq	r4,r2,58e0 <___vfprintf_internal_r+0x2088>
    5768:	d8c02617 	ldw	r3,152(sp)
    576c:	e0f9883a 	add	fp,fp,r3
    5770:	003e0a06 	br	4f9c <__alt_data_end+0xff004f9c>
    5774:	00c00b44 	movi	r3,45
    5778:	24e0003c 	xorhi	r19,r4,32768
    577c:	d8c02a05 	stb	r3,168(sp)
    5780:	003de906 	br	4f28 <__alt_data_end+0xff004f28>
    5784:	d8c03217 	ldw	r3,200(sp)
    5788:	00c07a0e 	bge	zero,r3,5974 <___vfprintf_internal_r+0x211c>
    578c:	00800044 	movi	r2,1
    5790:	d9003317 	ldw	r4,204(sp)
    5794:	1105883a 	add	r2,r2,r4
    5798:	d8802e15 	stw	r2,184(sp)
    579c:	10004e16 	blt	r2,zero,58d8 <___vfprintf_internal_r+0x2080>
    57a0:	044019c4 	movi	r17,103
    57a4:	003e2106 	br	502c <__alt_data_end+0xff00502c>
    57a8:	d9002917 	ldw	r4,164(sp)
    57ac:	d8802104 	addi	r2,sp,132
    57b0:	d8800315 	stw	r2,12(sp)
    57b4:	d9000015 	stw	r4,0(sp)
    57b8:	d8802504 	addi	r2,sp,148
    57bc:	d9403617 	ldw	r5,216(sp)
    57c0:	d9002c17 	ldw	r4,176(sp)
    57c4:	d8800215 	stw	r2,8(sp)
    57c8:	d8802604 	addi	r2,sp,152
    57cc:	d8800115 	stw	r2,4(sp)
    57d0:	01c000c4 	movi	r7,3
    57d4:	980d883a 	mov	r6,r19
    57d8:	da003d15 	stw	r8,244(sp)
    57dc:	0005e7c0 	call	5e7c <_dtoa_r>
    57e0:	d8c02917 	ldw	r3,164(sp)
    57e4:	da003d17 	ldw	r8,244(sp)
    57e8:	1021883a 	mov	r16,r2
    57ec:	00801184 	movi	r2,70
    57f0:	80f9883a 	add	fp,r16,r3
    57f4:	88bfd926 	beq	r17,r2,575c <__alt_data_end+0xff00575c>
    57f8:	003de806 	br	4f9c <__alt_data_end+0xff004f9c>
    57fc:	d9002917 	ldw	r4,164(sp)
    5800:	00c04d0e 	bge	zero,r3,5938 <___vfprintf_internal_r+0x20e0>
    5804:	2000441e 	bne	r4,zero,5918 <___vfprintf_internal_r+0x20c0>
    5808:	9480004c 	andi	r18,r18,1
    580c:	9000421e 	bne	r18,zero,5918 <___vfprintf_internal_r+0x20c0>
    5810:	1805883a 	mov	r2,r3
    5814:	18007016 	blt	r3,zero,59d8 <___vfprintf_internal_r+0x2180>
    5818:	d8c03217 	ldw	r3,200(sp)
    581c:	d8c02e15 	stw	r3,184(sp)
    5820:	003e0206 	br	502c <__alt_data_end+0xff00502c>
    5824:	df0022c4 	addi	fp,sp,139
    5828:	dc002915 	stw	r16,164(sp)
    582c:	4027883a 	mov	r19,r8
    5830:	e021883a 	mov	r16,fp
    5834:	b009883a 	mov	r4,r22
    5838:	01400284 	movi	r5,10
    583c:	00022d40 	call	22d4 <__modsi3>
    5840:	10800c04 	addi	r2,r2,48
    5844:	843fffc4 	addi	r16,r16,-1
    5848:	b009883a 	mov	r4,r22
    584c:	01400284 	movi	r5,10
    5850:	80800005 	stb	r2,0(r16)
    5854:	00022500 	call	2250 <__divsi3>
    5858:	102d883a 	mov	r22,r2
    585c:	00800244 	movi	r2,9
    5860:	15bff416 	blt	r2,r22,5834 <__alt_data_end+0xff005834>
    5864:	9811883a 	mov	r8,r19
    5868:	b0800c04 	addi	r2,r22,48
    586c:	8027883a 	mov	r19,r16
    5870:	997fffc4 	addi	r5,r19,-1
    5874:	98bfffc5 	stb	r2,-1(r19)
    5878:	dc002917 	ldw	r16,164(sp)
    587c:	2f006a2e 	bgeu	r5,fp,5a28 <___vfprintf_internal_r+0x21d0>
    5880:	d9c02384 	addi	r7,sp,142
    5884:	3ccfc83a 	sub	r7,r7,r19
    5888:	d9002344 	addi	r4,sp,141
    588c:	e1cf883a 	add	r7,fp,r7
    5890:	00000106 	br	5898 <___vfprintf_internal_r+0x2040>
    5894:	28800003 	ldbu	r2,0(r5)
    5898:	20800005 	stb	r2,0(r4)
    589c:	21000044 	addi	r4,r4,1
    58a0:	29400044 	addi	r5,r5,1
    58a4:	393ffb1e 	bne	r7,r4,5894 <__alt_data_end+0xff005894>
    58a8:	d8802304 	addi	r2,sp,140
    58ac:	14c5c83a 	sub	r2,r2,r19
    58b0:	d8c02344 	addi	r3,sp,141
    58b4:	1885883a 	add	r2,r3,r2
    58b8:	003f7006 	br	567c <__alt_data_end+0xff00567c>
    58bc:	0005883a 	mov	r2,zero
    58c0:	003f0f06 	br	5500 <__alt_data_end+0xff005500>
    58c4:	d8c03217 	ldw	r3,200(sp)
    58c8:	18c00044 	addi	r3,r3,1
    58cc:	d8c02e15 	stw	r3,184(sp)
    58d0:	1805883a 	mov	r2,r3
    58d4:	183fb20e 	bge	r3,zero,57a0 <__alt_data_end+0xff0057a0>
    58d8:	0005883a 	mov	r2,zero
    58dc:	003fb006 	br	57a0 <__alt_data_end+0xff0057a0>
    58e0:	d9003617 	ldw	r4,216(sp)
    58e4:	000d883a 	mov	r6,zero
    58e8:	000f883a 	mov	r7,zero
    58ec:	980b883a 	mov	r5,r19
    58f0:	d8c03c15 	stw	r3,240(sp)
    58f4:	da003d15 	stw	r8,244(sp)
    58f8:	000d7d00 	call	d7d0 <__eqdf2>
    58fc:	d8c03c17 	ldw	r3,240(sp)
    5900:	da003d17 	ldw	r8,244(sp)
    5904:	103f9826 	beq	r2,zero,5768 <__alt_data_end+0xff005768>
    5908:	00800044 	movi	r2,1
    590c:	10c7c83a 	sub	r3,r2,r3
    5910:	d8c02615 	stw	r3,152(sp)
    5914:	003f9506 	br	576c <__alt_data_end+0xff00576c>
    5918:	d9002917 	ldw	r4,164(sp)
    591c:	d8c03217 	ldw	r3,200(sp)
    5920:	20800044 	addi	r2,r4,1
    5924:	1885883a 	add	r2,r3,r2
    5928:	d8802e15 	stw	r2,184(sp)
    592c:	103dbf0e 	bge	r2,zero,502c <__alt_data_end+0xff00502c>
    5930:	0005883a 	mov	r2,zero
    5934:	003dbd06 	br	502c <__alt_data_end+0xff00502c>
    5938:	2000211e 	bne	r4,zero,59c0 <___vfprintf_internal_r+0x2168>
    593c:	9480004c 	andi	r18,r18,1
    5940:	90001f1e 	bne	r18,zero,59c0 <___vfprintf_internal_r+0x2168>
    5944:	00800044 	movi	r2,1
    5948:	d8802e15 	stw	r2,184(sp)
    594c:	003db706 	br	502c <__alt_data_end+0xff00502c>
    5950:	00800b44 	movi	r2,45
    5954:	05adc83a 	sub	r22,zero,r22
    5958:	d8802305 	stb	r2,140(sp)
    595c:	003f3f06 	br	565c <__alt_data_end+0xff00565c>
    5960:	0005883a 	mov	r2,zero
    5964:	003f5206 	br	56b0 <__alt_data_end+0xff0056b0>
    5968:	90a4703a 	and	r18,r18,r2
    596c:	903f4e26 	beq	r18,zero,56a8 <__alt_data_end+0xff0056a8>
    5970:	003f4a06 	br	569c <__alt_data_end+0xff00569c>
    5974:	00800084 	movi	r2,2
    5978:	10c5c83a 	sub	r2,r2,r3
    597c:	003f8406 	br	5790 <__alt_data_end+0xff005790>
    5980:	d8802d17 	ldw	r2,180(sp)
    5984:	d9002d17 	ldw	r4,180(sp)
    5988:	ac400043 	ldbu	r17,1(r21)
    598c:	10800017 	ldw	r2,0(r2)
    5990:	582b883a 	mov	r21,r11
    5994:	d8802915 	stw	r2,164(sp)
    5998:	20800104 	addi	r2,r4,4
    599c:	d9002917 	ldw	r4,164(sp)
    59a0:	d8802d15 	stw	r2,180(sp)
    59a4:	203e7a0e 	bge	r4,zero,5390 <__alt_data_end+0xff005390>
    59a8:	8c403fcc 	andi	r17,r17,255
    59ac:	00bfffc4 	movi	r2,-1
    59b0:	8c40201c 	xori	r17,r17,128
    59b4:	d8802915 	stw	r2,164(sp)
    59b8:	8c7fe004 	addi	r17,r17,-128
    59bc:	00380706 	br	39dc <__alt_data_end+0xff0039dc>
    59c0:	d8c02917 	ldw	r3,164(sp)
    59c4:	18c00084 	addi	r3,r3,2
    59c8:	d8c02e15 	stw	r3,184(sp)
    59cc:	1805883a 	mov	r2,r3
    59d0:	183d960e 	bge	r3,zero,502c <__alt_data_end+0xff00502c>
    59d4:	003fd606 	br	5930 <__alt_data_end+0xff005930>
    59d8:	0005883a 	mov	r2,zero
    59dc:	003f8e06 	br	5818 <__alt_data_end+0xff005818>
    59e0:	9080004c 	andi	r2,r18,1
    59e4:	103f811e 	bne	r2,zero,57ec <__alt_data_end+0xff0057ec>
    59e8:	d8802117 	ldw	r2,132(sp)
    59ec:	1405c83a 	sub	r2,r2,r16
    59f0:	d8803315 	stw	r2,204(sp)
    59f4:	b47ef326 	beq	r22,r17,55c4 <__alt_data_end+0xff0055c4>
    59f8:	dd802617 	ldw	r22,152(sp)
    59fc:	003f1106 	br	5644 <__alt_data_end+0xff005644>
    5a00:	d9c02785 	stb	r7,158(sp)
    5a04:	00390406 	br	3e18 <__alt_data_end+0xff003e18>
    5a08:	d9c02785 	stb	r7,158(sp)
    5a0c:	0038d306 	br	3d5c <__alt_data_end+0xff003d5c>
    5a10:	d9c02785 	stb	r7,158(sp)
    5a14:	003a6106 	br	439c <__alt_data_end+0xff00439c>
    5a18:	d9c02785 	stb	r7,158(sp)
    5a1c:	003af806 	br	4600 <__alt_data_end+0xff004600>
    5a20:	0005883a 	mov	r2,zero
    5a24:	003d7e06 	br	5020 <__alt_data_end+0xff005020>
    5a28:	d8802344 	addi	r2,sp,141
    5a2c:	003f1306 	br	567c <__alt_data_end+0xff00567c>
    5a30:	d9c02785 	stb	r7,158(sp)
    5a34:	00392306 	br	3ec4 <__alt_data_end+0xff003ec4>
    5a38:	d9c02785 	stb	r7,158(sp)
    5a3c:	003aa906 	br	44e4 <__alt_data_end+0xff0044e4>
    5a40:	d9c02785 	stb	r7,158(sp)
    5a44:	003a3d06 	br	433c <__alt_data_end+0xff00433c>
    5a48:	d9c02785 	stb	r7,158(sp)
    5a4c:	003aca06 	br	4578 <__alt_data_end+0xff004578>

00005a50 <__vfprintf_internal>:
    5a50:	00800074 	movhi	r2,1
    5a54:	108e5d04 	addi	r2,r2,14708
    5a58:	300f883a 	mov	r7,r6
    5a5c:	280d883a 	mov	r6,r5
    5a60:	200b883a 	mov	r5,r4
    5a64:	11000017 	ldw	r4,0(r2)
    5a68:	00038581 	jmpi	3858 <___vfprintf_internal_r>

00005a6c <__sbprintf>:
    5a6c:	2880030b 	ldhu	r2,12(r5)
    5a70:	2ac01917 	ldw	r11,100(r5)
    5a74:	2a80038b 	ldhu	r10,14(r5)
    5a78:	2a400717 	ldw	r9,28(r5)
    5a7c:	2a000917 	ldw	r8,36(r5)
    5a80:	defee204 	addi	sp,sp,-1144
    5a84:	00c10004 	movi	r3,1024
    5a88:	dc011a15 	stw	r16,1128(sp)
    5a8c:	10bfff4c 	andi	r2,r2,65533
    5a90:	2821883a 	mov	r16,r5
    5a94:	d8cb883a 	add	r5,sp,r3
    5a98:	dc811c15 	stw	r18,1136(sp)
    5a9c:	dc411b15 	stw	r17,1132(sp)
    5aa0:	dfc11d15 	stw	ra,1140(sp)
    5aa4:	2025883a 	mov	r18,r4
    5aa8:	d881030d 	sth	r2,1036(sp)
    5aac:	dac11915 	stw	r11,1124(sp)
    5ab0:	da81038d 	sth	r10,1038(sp)
    5ab4:	da410715 	stw	r9,1052(sp)
    5ab8:	da010915 	stw	r8,1060(sp)
    5abc:	dec10015 	stw	sp,1024(sp)
    5ac0:	dec10415 	stw	sp,1040(sp)
    5ac4:	d8c10215 	stw	r3,1032(sp)
    5ac8:	d8c10515 	stw	r3,1044(sp)
    5acc:	d8010615 	stw	zero,1048(sp)
    5ad0:	00038580 	call	3858 <___vfprintf_internal_r>
    5ad4:	1023883a 	mov	r17,r2
    5ad8:	10000416 	blt	r2,zero,5aec <__sbprintf+0x80>
    5adc:	d9410004 	addi	r5,sp,1024
    5ae0:	9009883a 	mov	r4,r18
    5ae4:	00077200 	call	7720 <_fflush_r>
    5ae8:	10000d1e 	bne	r2,zero,5b20 <__sbprintf+0xb4>
    5aec:	d881030b 	ldhu	r2,1036(sp)
    5af0:	1080100c 	andi	r2,r2,64
    5af4:	10000326 	beq	r2,zero,5b04 <__sbprintf+0x98>
    5af8:	8080030b 	ldhu	r2,12(r16)
    5afc:	10801014 	ori	r2,r2,64
    5b00:	8080030d 	sth	r2,12(r16)
    5b04:	8805883a 	mov	r2,r17
    5b08:	dfc11d17 	ldw	ra,1140(sp)
    5b0c:	dc811c17 	ldw	r18,1136(sp)
    5b10:	dc411b17 	ldw	r17,1132(sp)
    5b14:	dc011a17 	ldw	r16,1128(sp)
    5b18:	dec11e04 	addi	sp,sp,1144
    5b1c:	f800283a 	ret
    5b20:	047fffc4 	movi	r17,-1
    5b24:	003ff106 	br	5aec <__alt_data_end+0xff005aec>

00005b28 <__swsetup_r>:
    5b28:	00800074 	movhi	r2,1
    5b2c:	defffd04 	addi	sp,sp,-12
    5b30:	108e5d04 	addi	r2,r2,14708
    5b34:	dc400115 	stw	r17,4(sp)
    5b38:	2023883a 	mov	r17,r4
    5b3c:	11000017 	ldw	r4,0(r2)
    5b40:	dc000015 	stw	r16,0(sp)
    5b44:	dfc00215 	stw	ra,8(sp)
    5b48:	2821883a 	mov	r16,r5
    5b4c:	20000226 	beq	r4,zero,5b58 <__swsetup_r+0x30>
    5b50:	20800e17 	ldw	r2,56(r4)
    5b54:	10003126 	beq	r2,zero,5c1c <__swsetup_r+0xf4>
    5b58:	8080030b 	ldhu	r2,12(r16)
    5b5c:	10c0020c 	andi	r3,r2,8
    5b60:	1009883a 	mov	r4,r2
    5b64:	18000f26 	beq	r3,zero,5ba4 <__swsetup_r+0x7c>
    5b68:	80c00417 	ldw	r3,16(r16)
    5b6c:	18001526 	beq	r3,zero,5bc4 <__swsetup_r+0x9c>
    5b70:	1100004c 	andi	r4,r2,1
    5b74:	20001c1e 	bne	r4,zero,5be8 <__swsetup_r+0xc0>
    5b78:	1080008c 	andi	r2,r2,2
    5b7c:	1000291e 	bne	r2,zero,5c24 <__swsetup_r+0xfc>
    5b80:	80800517 	ldw	r2,20(r16)
    5b84:	80800215 	stw	r2,8(r16)
    5b88:	18001c26 	beq	r3,zero,5bfc <__swsetup_r+0xd4>
    5b8c:	0005883a 	mov	r2,zero
    5b90:	dfc00217 	ldw	ra,8(sp)
    5b94:	dc400117 	ldw	r17,4(sp)
    5b98:	dc000017 	ldw	r16,0(sp)
    5b9c:	dec00304 	addi	sp,sp,12
    5ba0:	f800283a 	ret
    5ba4:	2080040c 	andi	r2,r4,16
    5ba8:	10002e26 	beq	r2,zero,5c64 <__swsetup_r+0x13c>
    5bac:	2080010c 	andi	r2,r4,4
    5bb0:	10001e1e 	bne	r2,zero,5c2c <__swsetup_r+0x104>
    5bb4:	80c00417 	ldw	r3,16(r16)
    5bb8:	20800214 	ori	r2,r4,8
    5bbc:	8080030d 	sth	r2,12(r16)
    5bc0:	183feb1e 	bne	r3,zero,5b70 <__alt_data_end+0xff005b70>
    5bc4:	1100a00c 	andi	r4,r2,640
    5bc8:	01408004 	movi	r5,512
    5bcc:	217fe826 	beq	r4,r5,5b70 <__alt_data_end+0xff005b70>
    5bd0:	800b883a 	mov	r5,r16
    5bd4:	8809883a 	mov	r4,r17
    5bd8:	00086a00 	call	86a0 <__smakebuf_r>
    5bdc:	8080030b 	ldhu	r2,12(r16)
    5be0:	80c00417 	ldw	r3,16(r16)
    5be4:	003fe206 	br	5b70 <__alt_data_end+0xff005b70>
    5be8:	80800517 	ldw	r2,20(r16)
    5bec:	80000215 	stw	zero,8(r16)
    5bf0:	0085c83a 	sub	r2,zero,r2
    5bf4:	80800615 	stw	r2,24(r16)
    5bf8:	183fe41e 	bne	r3,zero,5b8c <__alt_data_end+0xff005b8c>
    5bfc:	80c0030b 	ldhu	r3,12(r16)
    5c00:	0005883a 	mov	r2,zero
    5c04:	1900200c 	andi	r4,r3,128
    5c08:	203fe126 	beq	r4,zero,5b90 <__alt_data_end+0xff005b90>
    5c0c:	18c01014 	ori	r3,r3,64
    5c10:	80c0030d 	sth	r3,12(r16)
    5c14:	00bfffc4 	movi	r2,-1
    5c18:	003fdd06 	br	5b90 <__alt_data_end+0xff005b90>
    5c1c:	0007afc0 	call	7afc <__sinit>
    5c20:	003fcd06 	br	5b58 <__alt_data_end+0xff005b58>
    5c24:	0005883a 	mov	r2,zero
    5c28:	003fd606 	br	5b84 <__alt_data_end+0xff005b84>
    5c2c:	81400c17 	ldw	r5,48(r16)
    5c30:	28000626 	beq	r5,zero,5c4c <__swsetup_r+0x124>
    5c34:	80801004 	addi	r2,r16,64
    5c38:	28800326 	beq	r5,r2,5c48 <__swsetup_r+0x120>
    5c3c:	8809883a 	mov	r4,r17
    5c40:	0007c700 	call	7c70 <_free_r>
    5c44:	8100030b 	ldhu	r4,12(r16)
    5c48:	80000c15 	stw	zero,48(r16)
    5c4c:	80c00417 	ldw	r3,16(r16)
    5c50:	00bff6c4 	movi	r2,-37
    5c54:	1108703a 	and	r4,r2,r4
    5c58:	80000115 	stw	zero,4(r16)
    5c5c:	80c00015 	stw	r3,0(r16)
    5c60:	003fd506 	br	5bb8 <__alt_data_end+0xff005bb8>
    5c64:	00800244 	movi	r2,9
    5c68:	88800015 	stw	r2,0(r17)
    5c6c:	20801014 	ori	r2,r4,64
    5c70:	8080030d 	sth	r2,12(r16)
    5c74:	00bfffc4 	movi	r2,-1
    5c78:	003fc506 	br	5b90 <__alt_data_end+0xff005b90>

00005c7c <quorem>:
    5c7c:	defff704 	addi	sp,sp,-36
    5c80:	dc800215 	stw	r18,8(sp)
    5c84:	20800417 	ldw	r2,16(r4)
    5c88:	2c800417 	ldw	r18,16(r5)
    5c8c:	dfc00815 	stw	ra,32(sp)
    5c90:	ddc00715 	stw	r23,28(sp)
    5c94:	dd800615 	stw	r22,24(sp)
    5c98:	dd400515 	stw	r21,20(sp)
    5c9c:	dd000415 	stw	r20,16(sp)
    5ca0:	dcc00315 	stw	r19,12(sp)
    5ca4:	dc400115 	stw	r17,4(sp)
    5ca8:	dc000015 	stw	r16,0(sp)
    5cac:	14807116 	blt	r2,r18,5e74 <quorem+0x1f8>
    5cb0:	94bfffc4 	addi	r18,r18,-1
    5cb4:	94ad883a 	add	r22,r18,r18
    5cb8:	b5ad883a 	add	r22,r22,r22
    5cbc:	2c400504 	addi	r17,r5,20
    5cc0:	8da9883a 	add	r20,r17,r22
    5cc4:	25400504 	addi	r21,r4,20
    5cc8:	282f883a 	mov	r23,r5
    5ccc:	adad883a 	add	r22,r21,r22
    5cd0:	a1400017 	ldw	r5,0(r20)
    5cd4:	2021883a 	mov	r16,r4
    5cd8:	b1000017 	ldw	r4,0(r22)
    5cdc:	29400044 	addi	r5,r5,1
    5ce0:	00023480 	call	2348 <__udivsi3>
    5ce4:	1027883a 	mov	r19,r2
    5ce8:	10002c26 	beq	r2,zero,5d9c <quorem+0x120>
    5cec:	a813883a 	mov	r9,r21
    5cf0:	880b883a 	mov	r5,r17
    5cf4:	0009883a 	mov	r4,zero
    5cf8:	000d883a 	mov	r6,zero
    5cfc:	2a000017 	ldw	r8,0(r5)
    5d00:	49c00017 	ldw	r7,0(r9)
    5d04:	29400104 	addi	r5,r5,4
    5d08:	40bfffcc 	andi	r2,r8,65535
    5d0c:	14c5383a 	mul	r2,r2,r19
    5d10:	4010d43a 	srli	r8,r8,16
    5d14:	38ffffcc 	andi	r3,r7,65535
    5d18:	1105883a 	add	r2,r2,r4
    5d1c:	1008d43a 	srli	r4,r2,16
    5d20:	44d1383a 	mul	r8,r8,r19
    5d24:	198d883a 	add	r6,r3,r6
    5d28:	10ffffcc 	andi	r3,r2,65535
    5d2c:	30c7c83a 	sub	r3,r6,r3
    5d30:	380ed43a 	srli	r7,r7,16
    5d34:	4105883a 	add	r2,r8,r4
    5d38:	180dd43a 	srai	r6,r3,16
    5d3c:	113fffcc 	andi	r4,r2,65535
    5d40:	390fc83a 	sub	r7,r7,r4
    5d44:	398d883a 	add	r6,r7,r6
    5d48:	300e943a 	slli	r7,r6,16
    5d4c:	18ffffcc 	andi	r3,r3,65535
    5d50:	1008d43a 	srli	r4,r2,16
    5d54:	38ceb03a 	or	r7,r7,r3
    5d58:	49c00015 	stw	r7,0(r9)
    5d5c:	300dd43a 	srai	r6,r6,16
    5d60:	4a400104 	addi	r9,r9,4
    5d64:	a17fe52e 	bgeu	r20,r5,5cfc <__alt_data_end+0xff005cfc>
    5d68:	b0800017 	ldw	r2,0(r22)
    5d6c:	10000b1e 	bne	r2,zero,5d9c <quorem+0x120>
    5d70:	b0bfff04 	addi	r2,r22,-4
    5d74:	a880082e 	bgeu	r21,r2,5d98 <quorem+0x11c>
    5d78:	b0ffff17 	ldw	r3,-4(r22)
    5d7c:	18000326 	beq	r3,zero,5d8c <quorem+0x110>
    5d80:	00000506 	br	5d98 <quorem+0x11c>
    5d84:	10c00017 	ldw	r3,0(r2)
    5d88:	1800031e 	bne	r3,zero,5d98 <quorem+0x11c>
    5d8c:	10bfff04 	addi	r2,r2,-4
    5d90:	94bfffc4 	addi	r18,r18,-1
    5d94:	a8bffb36 	bltu	r21,r2,5d84 <__alt_data_end+0xff005d84>
    5d98:	84800415 	stw	r18,16(r16)
    5d9c:	b80b883a 	mov	r5,r23
    5da0:	8009883a 	mov	r4,r16
    5da4:	00095d40 	call	95d4 <__mcmp>
    5da8:	10002616 	blt	r2,zero,5e44 <quorem+0x1c8>
    5dac:	9cc00044 	addi	r19,r19,1
    5db0:	a805883a 	mov	r2,r21
    5db4:	000b883a 	mov	r5,zero
    5db8:	11000017 	ldw	r4,0(r2)
    5dbc:	89800017 	ldw	r6,0(r17)
    5dc0:	10800104 	addi	r2,r2,4
    5dc4:	20ffffcc 	andi	r3,r4,65535
    5dc8:	194b883a 	add	r5,r3,r5
    5dcc:	30ffffcc 	andi	r3,r6,65535
    5dd0:	28c7c83a 	sub	r3,r5,r3
    5dd4:	300cd43a 	srli	r6,r6,16
    5dd8:	2008d43a 	srli	r4,r4,16
    5ddc:	180bd43a 	srai	r5,r3,16
    5de0:	18ffffcc 	andi	r3,r3,65535
    5de4:	2189c83a 	sub	r4,r4,r6
    5de8:	2149883a 	add	r4,r4,r5
    5dec:	200c943a 	slli	r6,r4,16
    5df0:	8c400104 	addi	r17,r17,4
    5df4:	200bd43a 	srai	r5,r4,16
    5df8:	30c6b03a 	or	r3,r6,r3
    5dfc:	10ffff15 	stw	r3,-4(r2)
    5e00:	a47fed2e 	bgeu	r20,r17,5db8 <__alt_data_end+0xff005db8>
    5e04:	9485883a 	add	r2,r18,r18
    5e08:	1085883a 	add	r2,r2,r2
    5e0c:	a887883a 	add	r3,r21,r2
    5e10:	18800017 	ldw	r2,0(r3)
    5e14:	10000b1e 	bne	r2,zero,5e44 <quorem+0x1c8>
    5e18:	18bfff04 	addi	r2,r3,-4
    5e1c:	a880082e 	bgeu	r21,r2,5e40 <quorem+0x1c4>
    5e20:	18ffff17 	ldw	r3,-4(r3)
    5e24:	18000326 	beq	r3,zero,5e34 <quorem+0x1b8>
    5e28:	00000506 	br	5e40 <quorem+0x1c4>
    5e2c:	10c00017 	ldw	r3,0(r2)
    5e30:	1800031e 	bne	r3,zero,5e40 <quorem+0x1c4>
    5e34:	10bfff04 	addi	r2,r2,-4
    5e38:	94bfffc4 	addi	r18,r18,-1
    5e3c:	a8bffb36 	bltu	r21,r2,5e2c <__alt_data_end+0xff005e2c>
    5e40:	84800415 	stw	r18,16(r16)
    5e44:	9805883a 	mov	r2,r19
    5e48:	dfc00817 	ldw	ra,32(sp)
    5e4c:	ddc00717 	ldw	r23,28(sp)
    5e50:	dd800617 	ldw	r22,24(sp)
    5e54:	dd400517 	ldw	r21,20(sp)
    5e58:	dd000417 	ldw	r20,16(sp)
    5e5c:	dcc00317 	ldw	r19,12(sp)
    5e60:	dc800217 	ldw	r18,8(sp)
    5e64:	dc400117 	ldw	r17,4(sp)
    5e68:	dc000017 	ldw	r16,0(sp)
    5e6c:	dec00904 	addi	sp,sp,36
    5e70:	f800283a 	ret
    5e74:	0005883a 	mov	r2,zero
    5e78:	003ff306 	br	5e48 <__alt_data_end+0xff005e48>

00005e7c <_dtoa_r>:
    5e7c:	20801017 	ldw	r2,64(r4)
    5e80:	deffde04 	addi	sp,sp,-136
    5e84:	df002015 	stw	fp,128(sp)
    5e88:	dcc01b15 	stw	r19,108(sp)
    5e8c:	dc801a15 	stw	r18,104(sp)
    5e90:	dc401915 	stw	r17,100(sp)
    5e94:	dc001815 	stw	r16,96(sp)
    5e98:	dfc02115 	stw	ra,132(sp)
    5e9c:	ddc01f15 	stw	r23,124(sp)
    5ea0:	dd801e15 	stw	r22,120(sp)
    5ea4:	dd401d15 	stw	r21,116(sp)
    5ea8:	dd001c15 	stw	r20,112(sp)
    5eac:	d9c00315 	stw	r7,12(sp)
    5eb0:	2039883a 	mov	fp,r4
    5eb4:	3023883a 	mov	r17,r6
    5eb8:	2825883a 	mov	r18,r5
    5ebc:	dc002417 	ldw	r16,144(sp)
    5ec0:	3027883a 	mov	r19,r6
    5ec4:	10000826 	beq	r2,zero,5ee8 <_dtoa_r+0x6c>
    5ec8:	21801117 	ldw	r6,68(r4)
    5ecc:	00c00044 	movi	r3,1
    5ed0:	100b883a 	mov	r5,r2
    5ed4:	1986983a 	sll	r3,r3,r6
    5ed8:	11800115 	stw	r6,4(r2)
    5edc:	10c00215 	stw	r3,8(r2)
    5ee0:	0008db40 	call	8db4 <_Bfree>
    5ee4:	e0001015 	stw	zero,64(fp)
    5ee8:	88002e16 	blt	r17,zero,5fa4 <_dtoa_r+0x128>
    5eec:	80000015 	stw	zero,0(r16)
    5ef0:	889ffc2c 	andhi	r2,r17,32752
    5ef4:	00dffc34 	movhi	r3,32752
    5ef8:	10c01c26 	beq	r2,r3,5f6c <_dtoa_r+0xf0>
    5efc:	000d883a 	mov	r6,zero
    5f00:	000f883a 	mov	r7,zero
    5f04:	9009883a 	mov	r4,r18
    5f08:	980b883a 	mov	r5,r19
    5f0c:	000d7d00 	call	d7d0 <__eqdf2>
    5f10:	10002b1e 	bne	r2,zero,5fc0 <_dtoa_r+0x144>
    5f14:	d9c02317 	ldw	r7,140(sp)
    5f18:	00800044 	movi	r2,1
    5f1c:	38800015 	stw	r2,0(r7)
    5f20:	d8802517 	ldw	r2,148(sp)
    5f24:	10019e26 	beq	r2,zero,65a0 <_dtoa_r+0x724>
    5f28:	d8c02517 	ldw	r3,148(sp)
    5f2c:	00800074 	movhi	r2,1
    5f30:	10870244 	addi	r2,r2,7177
    5f34:	18800015 	stw	r2,0(r3)
    5f38:	10bfffc4 	addi	r2,r2,-1
    5f3c:	dfc02117 	ldw	ra,132(sp)
    5f40:	df002017 	ldw	fp,128(sp)
    5f44:	ddc01f17 	ldw	r23,124(sp)
    5f48:	dd801e17 	ldw	r22,120(sp)
    5f4c:	dd401d17 	ldw	r21,116(sp)
    5f50:	dd001c17 	ldw	r20,112(sp)
    5f54:	dcc01b17 	ldw	r19,108(sp)
    5f58:	dc801a17 	ldw	r18,104(sp)
    5f5c:	dc401917 	ldw	r17,100(sp)
    5f60:	dc001817 	ldw	r16,96(sp)
    5f64:	dec02204 	addi	sp,sp,136
    5f68:	f800283a 	ret
    5f6c:	d8c02317 	ldw	r3,140(sp)
    5f70:	0089c3c4 	movi	r2,9999
    5f74:	18800015 	stw	r2,0(r3)
    5f78:	90017726 	beq	r18,zero,6558 <_dtoa_r+0x6dc>
    5f7c:	00800074 	movhi	r2,1
    5f80:	10870e04 	addi	r2,r2,7224
    5f84:	d9002517 	ldw	r4,148(sp)
    5f88:	203fec26 	beq	r4,zero,5f3c <__alt_data_end+0xff005f3c>
    5f8c:	10c000c7 	ldb	r3,3(r2)
    5f90:	1801781e 	bne	r3,zero,6574 <_dtoa_r+0x6f8>
    5f94:	10c000c4 	addi	r3,r2,3
    5f98:	d9802517 	ldw	r6,148(sp)
    5f9c:	30c00015 	stw	r3,0(r6)
    5fa0:	003fe606 	br	5f3c <__alt_data_end+0xff005f3c>
    5fa4:	04e00034 	movhi	r19,32768
    5fa8:	9cffffc4 	addi	r19,r19,-1
    5fac:	00800044 	movi	r2,1
    5fb0:	8ce6703a 	and	r19,r17,r19
    5fb4:	80800015 	stw	r2,0(r16)
    5fb8:	9823883a 	mov	r17,r19
    5fbc:	003fcc06 	br	5ef0 <__alt_data_end+0xff005ef0>
    5fc0:	d8800204 	addi	r2,sp,8
    5fc4:	d8800015 	stw	r2,0(sp)
    5fc8:	d9c00104 	addi	r7,sp,4
    5fcc:	900b883a 	mov	r5,r18
    5fd0:	980d883a 	mov	r6,r19
    5fd4:	e009883a 	mov	r4,fp
    5fd8:	8820d53a 	srli	r16,r17,20
    5fdc:	00099a00 	call	99a0 <__d2b>
    5fe0:	d8800915 	stw	r2,36(sp)
    5fe4:	8001651e 	bne	r16,zero,657c <_dtoa_r+0x700>
    5fe8:	dd800217 	ldw	r22,8(sp)
    5fec:	dc000117 	ldw	r16,4(sp)
    5ff0:	00800804 	movi	r2,32
    5ff4:	b421883a 	add	r16,r22,r16
    5ff8:	80c10c84 	addi	r3,r16,1074
    5ffc:	10c2d10e 	bge	r2,r3,6b44 <_dtoa_r+0xcc8>
    6000:	00801004 	movi	r2,64
    6004:	81010484 	addi	r4,r16,1042
    6008:	10c7c83a 	sub	r3,r2,r3
    600c:	9108d83a 	srl	r4,r18,r4
    6010:	88e2983a 	sll	r17,r17,r3
    6014:	2448b03a 	or	r4,r4,r17
    6018:	0002cec0 	call	2cec <__floatunsidf>
    601c:	017f8434 	movhi	r5,65040
    6020:	01800044 	movi	r6,1
    6024:	1009883a 	mov	r4,r2
    6028:	194b883a 	add	r5,r3,r5
    602c:	843fffc4 	addi	r16,r16,-1
    6030:	d9801115 	stw	r6,68(sp)
    6034:	000d883a 	mov	r6,zero
    6038:	01cffe34 	movhi	r7,16376
    603c:	000e1400 	call	e140 <__subdf3>
    6040:	0198dbf4 	movhi	r6,25455
    6044:	01cff4f4 	movhi	r7,16339
    6048:	3190d844 	addi	r6,r6,17249
    604c:	39e1e9c4 	addi	r7,r7,-30809
    6050:	1009883a 	mov	r4,r2
    6054:	180b883a 	mov	r5,r3
    6058:	000da280 	call	da28 <__muldf3>
    605c:	01a2d874 	movhi	r6,35681
    6060:	01cff1f4 	movhi	r7,16327
    6064:	31b22cc4 	addi	r6,r6,-14157
    6068:	39e28a04 	addi	r7,r7,-30168
    606c:	180b883a 	mov	r5,r3
    6070:	1009883a 	mov	r4,r2
    6074:	000cf240 	call	cf24 <__adddf3>
    6078:	8009883a 	mov	r4,r16
    607c:	1029883a 	mov	r20,r2
    6080:	1823883a 	mov	r17,r3
    6084:	000eabc0 	call	eabc <__floatsidf>
    6088:	019427f4 	movhi	r6,20639
    608c:	01cff4f4 	movhi	r7,16339
    6090:	319e7ec4 	addi	r6,r6,31227
    6094:	39d104c4 	addi	r7,r7,17427
    6098:	1009883a 	mov	r4,r2
    609c:	180b883a 	mov	r5,r3
    60a0:	000da280 	call	da28 <__muldf3>
    60a4:	100d883a 	mov	r6,r2
    60a8:	180f883a 	mov	r7,r3
    60ac:	a009883a 	mov	r4,r20
    60b0:	880b883a 	mov	r5,r17
    60b4:	000cf240 	call	cf24 <__adddf3>
    60b8:	1009883a 	mov	r4,r2
    60bc:	180b883a 	mov	r5,r3
    60c0:	1029883a 	mov	r20,r2
    60c4:	1823883a 	mov	r17,r3
    60c8:	000ea3c0 	call	ea3c <__fixdfsi>
    60cc:	000d883a 	mov	r6,zero
    60d0:	000f883a 	mov	r7,zero
    60d4:	a009883a 	mov	r4,r20
    60d8:	880b883a 	mov	r5,r17
    60dc:	d8800515 	stw	r2,20(sp)
    60e0:	000d9340 	call	d934 <__ledf2>
    60e4:	10028716 	blt	r2,zero,6b04 <_dtoa_r+0xc88>
    60e8:	d8c00517 	ldw	r3,20(sp)
    60ec:	00800584 	movi	r2,22
    60f0:	10c27536 	bltu	r2,r3,6ac8 <_dtoa_r+0xc4c>
    60f4:	180490fa 	slli	r2,r3,3
    60f8:	00c00074 	movhi	r3,1
    60fc:	18c72a04 	addi	r3,r3,7336
    6100:	1885883a 	add	r2,r3,r2
    6104:	11000017 	ldw	r4,0(r2)
    6108:	11400117 	ldw	r5,4(r2)
    610c:	900d883a 	mov	r6,r18
    6110:	980f883a 	mov	r7,r19
    6114:	000d8580 	call	d858 <__gedf2>
    6118:	00828d0e 	bge	zero,r2,6b50 <_dtoa_r+0xcd4>
    611c:	d9000517 	ldw	r4,20(sp)
    6120:	d8000e15 	stw	zero,56(sp)
    6124:	213fffc4 	addi	r4,r4,-1
    6128:	d9000515 	stw	r4,20(sp)
    612c:	b42dc83a 	sub	r22,r22,r16
    6130:	b5bfffc4 	addi	r22,r22,-1
    6134:	b0026f16 	blt	r22,zero,6af4 <_dtoa_r+0xc78>
    6138:	d8000815 	stw	zero,32(sp)
    613c:	d9c00517 	ldw	r7,20(sp)
    6140:	38026416 	blt	r7,zero,6ad4 <_dtoa_r+0xc58>
    6144:	b1ed883a 	add	r22,r22,r7
    6148:	d9c00d15 	stw	r7,52(sp)
    614c:	d8000a15 	stw	zero,40(sp)
    6150:	d9800317 	ldw	r6,12(sp)
    6154:	00800244 	movi	r2,9
    6158:	11811436 	bltu	r2,r6,65ac <_dtoa_r+0x730>
    615c:	00800144 	movi	r2,5
    6160:	1184e10e 	bge	r2,r6,74e8 <_dtoa_r+0x166c>
    6164:	31bfff04 	addi	r6,r6,-4
    6168:	d9800315 	stw	r6,12(sp)
    616c:	0023883a 	mov	r17,zero
    6170:	d9800317 	ldw	r6,12(sp)
    6174:	008000c4 	movi	r2,3
    6178:	30836726 	beq	r6,r2,6f18 <_dtoa_r+0x109c>
    617c:	1183410e 	bge	r2,r6,6e84 <_dtoa_r+0x1008>
    6180:	d9c00317 	ldw	r7,12(sp)
    6184:	00800104 	movi	r2,4
    6188:	38827c26 	beq	r7,r2,6b7c <_dtoa_r+0xd00>
    618c:	00800144 	movi	r2,5
    6190:	3884c41e 	bne	r7,r2,74a4 <_dtoa_r+0x1628>
    6194:	00800044 	movi	r2,1
    6198:	d8800b15 	stw	r2,44(sp)
    619c:	d8c00517 	ldw	r3,20(sp)
    61a0:	d9002217 	ldw	r4,136(sp)
    61a4:	1907883a 	add	r3,r3,r4
    61a8:	19800044 	addi	r6,r3,1
    61ac:	d8c00c15 	stw	r3,48(sp)
    61b0:	d9800615 	stw	r6,24(sp)
    61b4:	0183a40e 	bge	zero,r6,7048 <_dtoa_r+0x11cc>
    61b8:	d9800617 	ldw	r6,24(sp)
    61bc:	3021883a 	mov	r16,r6
    61c0:	e0001115 	stw	zero,68(fp)
    61c4:	008005c4 	movi	r2,23
    61c8:	1184c92e 	bgeu	r2,r6,74f0 <_dtoa_r+0x1674>
    61cc:	00c00044 	movi	r3,1
    61d0:	00800104 	movi	r2,4
    61d4:	1085883a 	add	r2,r2,r2
    61d8:	11000504 	addi	r4,r2,20
    61dc:	180b883a 	mov	r5,r3
    61e0:	18c00044 	addi	r3,r3,1
    61e4:	313ffb2e 	bgeu	r6,r4,61d4 <__alt_data_end+0xff0061d4>
    61e8:	e1401115 	stw	r5,68(fp)
    61ec:	e009883a 	mov	r4,fp
    61f0:	0008d0c0 	call	8d0c <_Balloc>
    61f4:	d8800715 	stw	r2,28(sp)
    61f8:	e0801015 	stw	r2,64(fp)
    61fc:	00800384 	movi	r2,14
    6200:	1400f736 	bltu	r2,r16,65e0 <_dtoa_r+0x764>
    6204:	8800f626 	beq	r17,zero,65e0 <_dtoa_r+0x764>
    6208:	d9c00517 	ldw	r7,20(sp)
    620c:	01c39a0e 	bge	zero,r7,7078 <_dtoa_r+0x11fc>
    6210:	388003cc 	andi	r2,r7,15
    6214:	100490fa 	slli	r2,r2,3
    6218:	382bd13a 	srai	r21,r7,4
    621c:	00c00074 	movhi	r3,1
    6220:	18c72a04 	addi	r3,r3,7336
    6224:	1885883a 	add	r2,r3,r2
    6228:	a8c0040c 	andi	r3,r21,16
    622c:	12400017 	ldw	r9,0(r2)
    6230:	12000117 	ldw	r8,4(r2)
    6234:	18037926 	beq	r3,zero,701c <_dtoa_r+0x11a0>
    6238:	00800074 	movhi	r2,1
    623c:	10872004 	addi	r2,r2,7296
    6240:	11800817 	ldw	r6,32(r2)
    6244:	11c00917 	ldw	r7,36(r2)
    6248:	9009883a 	mov	r4,r18
    624c:	980b883a 	mov	r5,r19
    6250:	da001715 	stw	r8,92(sp)
    6254:	da401615 	stw	r9,88(sp)
    6258:	00024040 	call	2404 <__divdf3>
    625c:	da001717 	ldw	r8,92(sp)
    6260:	da401617 	ldw	r9,88(sp)
    6264:	ad4003cc 	andi	r21,r21,15
    6268:	040000c4 	movi	r16,3
    626c:	1023883a 	mov	r17,r2
    6270:	1829883a 	mov	r20,r3
    6274:	a8001126 	beq	r21,zero,62bc <_dtoa_r+0x440>
    6278:	05c00074 	movhi	r23,1
    627c:	bdc72004 	addi	r23,r23,7296
    6280:	4805883a 	mov	r2,r9
    6284:	4007883a 	mov	r3,r8
    6288:	a980004c 	andi	r6,r21,1
    628c:	1009883a 	mov	r4,r2
    6290:	a82bd07a 	srai	r21,r21,1
    6294:	180b883a 	mov	r5,r3
    6298:	30000426 	beq	r6,zero,62ac <_dtoa_r+0x430>
    629c:	b9800017 	ldw	r6,0(r23)
    62a0:	b9c00117 	ldw	r7,4(r23)
    62a4:	84000044 	addi	r16,r16,1
    62a8:	000da280 	call	da28 <__muldf3>
    62ac:	bdc00204 	addi	r23,r23,8
    62b0:	a83ff51e 	bne	r21,zero,6288 <__alt_data_end+0xff006288>
    62b4:	1013883a 	mov	r9,r2
    62b8:	1811883a 	mov	r8,r3
    62bc:	480d883a 	mov	r6,r9
    62c0:	400f883a 	mov	r7,r8
    62c4:	8809883a 	mov	r4,r17
    62c8:	a00b883a 	mov	r5,r20
    62cc:	00024040 	call	2404 <__divdf3>
    62d0:	d8800f15 	stw	r2,60(sp)
    62d4:	d8c01015 	stw	r3,64(sp)
    62d8:	d8c00e17 	ldw	r3,56(sp)
    62dc:	18000626 	beq	r3,zero,62f8 <_dtoa_r+0x47c>
    62e0:	d9000f17 	ldw	r4,60(sp)
    62e4:	d9401017 	ldw	r5,64(sp)
    62e8:	000d883a 	mov	r6,zero
    62ec:	01cffc34 	movhi	r7,16368
    62f0:	000d9340 	call	d934 <__ledf2>
    62f4:	10040b16 	blt	r2,zero,7324 <_dtoa_r+0x14a8>
    62f8:	8009883a 	mov	r4,r16
    62fc:	000eabc0 	call	eabc <__floatsidf>
    6300:	d9800f17 	ldw	r6,60(sp)
    6304:	d9c01017 	ldw	r7,64(sp)
    6308:	1009883a 	mov	r4,r2
    630c:	180b883a 	mov	r5,r3
    6310:	000da280 	call	da28 <__muldf3>
    6314:	000d883a 	mov	r6,zero
    6318:	01d00734 	movhi	r7,16412
    631c:	1009883a 	mov	r4,r2
    6320:	180b883a 	mov	r5,r3
    6324:	000cf240 	call	cf24 <__adddf3>
    6328:	1021883a 	mov	r16,r2
    632c:	d8800617 	ldw	r2,24(sp)
    6330:	047f3034 	movhi	r17,64704
    6334:	1c63883a 	add	r17,r3,r17
    6338:	10031826 	beq	r2,zero,6f9c <_dtoa_r+0x1120>
    633c:	d8c00517 	ldw	r3,20(sp)
    6340:	db000617 	ldw	r12,24(sp)
    6344:	d8c01315 	stw	r3,76(sp)
    6348:	d9000b17 	ldw	r4,44(sp)
    634c:	20038f26 	beq	r4,zero,718c <_dtoa_r+0x1310>
    6350:	60bfffc4 	addi	r2,r12,-1
    6354:	100490fa 	slli	r2,r2,3
    6358:	00c00074 	movhi	r3,1
    635c:	18c72a04 	addi	r3,r3,7336
    6360:	1885883a 	add	r2,r3,r2
    6364:	11800017 	ldw	r6,0(r2)
    6368:	11c00117 	ldw	r7,4(r2)
    636c:	d8800717 	ldw	r2,28(sp)
    6370:	0009883a 	mov	r4,zero
    6374:	014ff834 	movhi	r5,16352
    6378:	db001615 	stw	r12,88(sp)
    637c:	15c00044 	addi	r23,r2,1
    6380:	00024040 	call	2404 <__divdf3>
    6384:	800d883a 	mov	r6,r16
    6388:	880f883a 	mov	r7,r17
    638c:	1009883a 	mov	r4,r2
    6390:	180b883a 	mov	r5,r3
    6394:	000e1400 	call	e140 <__subdf3>
    6398:	d9401017 	ldw	r5,64(sp)
    639c:	d9000f17 	ldw	r4,60(sp)
    63a0:	102b883a 	mov	r21,r2
    63a4:	d8c01215 	stw	r3,72(sp)
    63a8:	000ea3c0 	call	ea3c <__fixdfsi>
    63ac:	1009883a 	mov	r4,r2
    63b0:	1029883a 	mov	r20,r2
    63b4:	000eabc0 	call	eabc <__floatsidf>
    63b8:	d9000f17 	ldw	r4,60(sp)
    63bc:	d9401017 	ldw	r5,64(sp)
    63c0:	100d883a 	mov	r6,r2
    63c4:	180f883a 	mov	r7,r3
    63c8:	000e1400 	call	e140 <__subdf3>
    63cc:	1823883a 	mov	r17,r3
    63d0:	d8c00717 	ldw	r3,28(sp)
    63d4:	d9401217 	ldw	r5,72(sp)
    63d8:	a2000c04 	addi	r8,r20,48
    63dc:	1021883a 	mov	r16,r2
    63e0:	1a000005 	stb	r8,0(r3)
    63e4:	800d883a 	mov	r6,r16
    63e8:	880f883a 	mov	r7,r17
    63ec:	a809883a 	mov	r4,r21
    63f0:	4029883a 	mov	r20,r8
    63f4:	000d8580 	call	d858 <__gedf2>
    63f8:	00841d16 	blt	zero,r2,7470 <_dtoa_r+0x15f4>
    63fc:	800d883a 	mov	r6,r16
    6400:	880f883a 	mov	r7,r17
    6404:	0009883a 	mov	r4,zero
    6408:	014ffc34 	movhi	r5,16368
    640c:	000e1400 	call	e140 <__subdf3>
    6410:	d9401217 	ldw	r5,72(sp)
    6414:	100d883a 	mov	r6,r2
    6418:	180f883a 	mov	r7,r3
    641c:	a809883a 	mov	r4,r21
    6420:	000d8580 	call	d858 <__gedf2>
    6424:	db001617 	ldw	r12,88(sp)
    6428:	00840e16 	blt	zero,r2,7464 <_dtoa_r+0x15e8>
    642c:	00800044 	movi	r2,1
    6430:	13006b0e 	bge	r2,r12,65e0 <_dtoa_r+0x764>
    6434:	d9000717 	ldw	r4,28(sp)
    6438:	dd800f15 	stw	r22,60(sp)
    643c:	dcc01015 	stw	r19,64(sp)
    6440:	2319883a 	add	r12,r4,r12
    6444:	dcc01217 	ldw	r19,72(sp)
    6448:	602d883a 	mov	r22,r12
    644c:	dc801215 	stw	r18,72(sp)
    6450:	b825883a 	mov	r18,r23
    6454:	00000906 	br	647c <_dtoa_r+0x600>
    6458:	000e1400 	call	e140 <__subdf3>
    645c:	a80d883a 	mov	r6,r21
    6460:	980f883a 	mov	r7,r19
    6464:	1009883a 	mov	r4,r2
    6468:	180b883a 	mov	r5,r3
    646c:	000d9340 	call	d934 <__ledf2>
    6470:	1003e816 	blt	r2,zero,7414 <_dtoa_r+0x1598>
    6474:	b825883a 	mov	r18,r23
    6478:	bd83e926 	beq	r23,r22,7420 <_dtoa_r+0x15a4>
    647c:	a809883a 	mov	r4,r21
    6480:	980b883a 	mov	r5,r19
    6484:	000d883a 	mov	r6,zero
    6488:	01d00934 	movhi	r7,16420
    648c:	000da280 	call	da28 <__muldf3>
    6490:	000d883a 	mov	r6,zero
    6494:	01d00934 	movhi	r7,16420
    6498:	8009883a 	mov	r4,r16
    649c:	880b883a 	mov	r5,r17
    64a0:	102b883a 	mov	r21,r2
    64a4:	1827883a 	mov	r19,r3
    64a8:	000da280 	call	da28 <__muldf3>
    64ac:	180b883a 	mov	r5,r3
    64b0:	1009883a 	mov	r4,r2
    64b4:	1821883a 	mov	r16,r3
    64b8:	1023883a 	mov	r17,r2
    64bc:	000ea3c0 	call	ea3c <__fixdfsi>
    64c0:	1009883a 	mov	r4,r2
    64c4:	1029883a 	mov	r20,r2
    64c8:	000eabc0 	call	eabc <__floatsidf>
    64cc:	8809883a 	mov	r4,r17
    64d0:	800b883a 	mov	r5,r16
    64d4:	100d883a 	mov	r6,r2
    64d8:	180f883a 	mov	r7,r3
    64dc:	000e1400 	call	e140 <__subdf3>
    64e0:	a5000c04 	addi	r20,r20,48
    64e4:	a80d883a 	mov	r6,r21
    64e8:	980f883a 	mov	r7,r19
    64ec:	1009883a 	mov	r4,r2
    64f0:	180b883a 	mov	r5,r3
    64f4:	95000005 	stb	r20,0(r18)
    64f8:	1021883a 	mov	r16,r2
    64fc:	1823883a 	mov	r17,r3
    6500:	000d9340 	call	d934 <__ledf2>
    6504:	bdc00044 	addi	r23,r23,1
    6508:	800d883a 	mov	r6,r16
    650c:	880f883a 	mov	r7,r17
    6510:	0009883a 	mov	r4,zero
    6514:	014ffc34 	movhi	r5,16368
    6518:	103fcf0e 	bge	r2,zero,6458 <__alt_data_end+0xff006458>
    651c:	d8c01317 	ldw	r3,76(sp)
    6520:	d8c00515 	stw	r3,20(sp)
    6524:	d9400917 	ldw	r5,36(sp)
    6528:	e009883a 	mov	r4,fp
    652c:	0008db40 	call	8db4 <_Bfree>
    6530:	d9000517 	ldw	r4,20(sp)
    6534:	d9802317 	ldw	r6,140(sp)
    6538:	d9c02517 	ldw	r7,148(sp)
    653c:	b8000005 	stb	zero,0(r23)
    6540:	20800044 	addi	r2,r4,1
    6544:	30800015 	stw	r2,0(r6)
    6548:	3802aa26 	beq	r7,zero,6ff4 <_dtoa_r+0x1178>
    654c:	3dc00015 	stw	r23,0(r7)
    6550:	d8800717 	ldw	r2,28(sp)
    6554:	003e7906 	br	5f3c <__alt_data_end+0xff005f3c>
    6558:	00800434 	movhi	r2,16
    655c:	10bfffc4 	addi	r2,r2,-1
    6560:	88a2703a 	and	r17,r17,r2
    6564:	883e851e 	bne	r17,zero,5f7c <__alt_data_end+0xff005f7c>
    6568:	00800074 	movhi	r2,1
    656c:	10870b04 	addi	r2,r2,7212
    6570:	003e8406 	br	5f84 <__alt_data_end+0xff005f84>
    6574:	10c00204 	addi	r3,r2,8
    6578:	003e8706 	br	5f98 <__alt_data_end+0xff005f98>
    657c:	01400434 	movhi	r5,16
    6580:	297fffc4 	addi	r5,r5,-1
    6584:	994a703a 	and	r5,r19,r5
    6588:	9009883a 	mov	r4,r18
    658c:	843f0044 	addi	r16,r16,-1023
    6590:	294ffc34 	orhi	r5,r5,16368
    6594:	dd800217 	ldw	r22,8(sp)
    6598:	d8001115 	stw	zero,68(sp)
    659c:	003ea506 	br	6034 <__alt_data_end+0xff006034>
    65a0:	00800074 	movhi	r2,1
    65a4:	10870204 	addi	r2,r2,7176
    65a8:	003e6406 	br	5f3c <__alt_data_end+0xff005f3c>
    65ac:	e0001115 	stw	zero,68(fp)
    65b0:	000b883a 	mov	r5,zero
    65b4:	e009883a 	mov	r4,fp
    65b8:	0008d0c0 	call	8d0c <_Balloc>
    65bc:	01bfffc4 	movi	r6,-1
    65c0:	01c00044 	movi	r7,1
    65c4:	d8800715 	stw	r2,28(sp)
    65c8:	d9800c15 	stw	r6,48(sp)
    65cc:	e0801015 	stw	r2,64(fp)
    65d0:	d8000315 	stw	zero,12(sp)
    65d4:	d9c00b15 	stw	r7,44(sp)
    65d8:	d9800615 	stw	r6,24(sp)
    65dc:	d8002215 	stw	zero,136(sp)
    65e0:	d8800117 	ldw	r2,4(sp)
    65e4:	10008916 	blt	r2,zero,680c <_dtoa_r+0x990>
    65e8:	d9000517 	ldw	r4,20(sp)
    65ec:	00c00384 	movi	r3,14
    65f0:	19008616 	blt	r3,r4,680c <_dtoa_r+0x990>
    65f4:	200490fa 	slli	r2,r4,3
    65f8:	00c00074 	movhi	r3,1
    65fc:	d9802217 	ldw	r6,136(sp)
    6600:	18c72a04 	addi	r3,r3,7336
    6604:	1885883a 	add	r2,r3,r2
    6608:	14000017 	ldw	r16,0(r2)
    660c:	14400117 	ldw	r17,4(r2)
    6610:	30016316 	blt	r6,zero,6ba0 <_dtoa_r+0xd24>
    6614:	800d883a 	mov	r6,r16
    6618:	880f883a 	mov	r7,r17
    661c:	9009883a 	mov	r4,r18
    6620:	980b883a 	mov	r5,r19
    6624:	00024040 	call	2404 <__divdf3>
    6628:	180b883a 	mov	r5,r3
    662c:	1009883a 	mov	r4,r2
    6630:	000ea3c0 	call	ea3c <__fixdfsi>
    6634:	1009883a 	mov	r4,r2
    6638:	102b883a 	mov	r21,r2
    663c:	000eabc0 	call	eabc <__floatsidf>
    6640:	800d883a 	mov	r6,r16
    6644:	880f883a 	mov	r7,r17
    6648:	1009883a 	mov	r4,r2
    664c:	180b883a 	mov	r5,r3
    6650:	000da280 	call	da28 <__muldf3>
    6654:	100d883a 	mov	r6,r2
    6658:	180f883a 	mov	r7,r3
    665c:	9009883a 	mov	r4,r18
    6660:	980b883a 	mov	r5,r19
    6664:	000e1400 	call	e140 <__subdf3>
    6668:	d9c00717 	ldw	r7,28(sp)
    666c:	1009883a 	mov	r4,r2
    6670:	a8800c04 	addi	r2,r21,48
    6674:	38800005 	stb	r2,0(r7)
    6678:	3dc00044 	addi	r23,r7,1
    667c:	d9c00617 	ldw	r7,24(sp)
    6680:	01800044 	movi	r6,1
    6684:	180b883a 	mov	r5,r3
    6688:	2005883a 	mov	r2,r4
    668c:	39803826 	beq	r7,r6,6770 <_dtoa_r+0x8f4>
    6690:	000d883a 	mov	r6,zero
    6694:	01d00934 	movhi	r7,16420
    6698:	000da280 	call	da28 <__muldf3>
    669c:	000d883a 	mov	r6,zero
    66a0:	000f883a 	mov	r7,zero
    66a4:	1009883a 	mov	r4,r2
    66a8:	180b883a 	mov	r5,r3
    66ac:	1025883a 	mov	r18,r2
    66b0:	1827883a 	mov	r19,r3
    66b4:	000d7d00 	call	d7d0 <__eqdf2>
    66b8:	103f9a26 	beq	r2,zero,6524 <__alt_data_end+0xff006524>
    66bc:	d9c00617 	ldw	r7,24(sp)
    66c0:	d8c00717 	ldw	r3,28(sp)
    66c4:	b829883a 	mov	r20,r23
    66c8:	38bfffc4 	addi	r2,r7,-1
    66cc:	18ad883a 	add	r22,r3,r2
    66d0:	00000a06 	br	66fc <_dtoa_r+0x880>
    66d4:	000da280 	call	da28 <__muldf3>
    66d8:	000d883a 	mov	r6,zero
    66dc:	000f883a 	mov	r7,zero
    66e0:	1009883a 	mov	r4,r2
    66e4:	180b883a 	mov	r5,r3
    66e8:	1025883a 	mov	r18,r2
    66ec:	1827883a 	mov	r19,r3
    66f0:	b829883a 	mov	r20,r23
    66f4:	000d7d00 	call	d7d0 <__eqdf2>
    66f8:	103f8a26 	beq	r2,zero,6524 <__alt_data_end+0xff006524>
    66fc:	800d883a 	mov	r6,r16
    6700:	880f883a 	mov	r7,r17
    6704:	9009883a 	mov	r4,r18
    6708:	980b883a 	mov	r5,r19
    670c:	00024040 	call	2404 <__divdf3>
    6710:	180b883a 	mov	r5,r3
    6714:	1009883a 	mov	r4,r2
    6718:	000ea3c0 	call	ea3c <__fixdfsi>
    671c:	1009883a 	mov	r4,r2
    6720:	102b883a 	mov	r21,r2
    6724:	000eabc0 	call	eabc <__floatsidf>
    6728:	800d883a 	mov	r6,r16
    672c:	880f883a 	mov	r7,r17
    6730:	1009883a 	mov	r4,r2
    6734:	180b883a 	mov	r5,r3
    6738:	000da280 	call	da28 <__muldf3>
    673c:	100d883a 	mov	r6,r2
    6740:	180f883a 	mov	r7,r3
    6744:	9009883a 	mov	r4,r18
    6748:	980b883a 	mov	r5,r19
    674c:	000e1400 	call	e140 <__subdf3>
    6750:	aa000c04 	addi	r8,r21,48
    6754:	a2000005 	stb	r8,0(r20)
    6758:	000d883a 	mov	r6,zero
    675c:	01d00934 	movhi	r7,16420
    6760:	1009883a 	mov	r4,r2
    6764:	180b883a 	mov	r5,r3
    6768:	a5c00044 	addi	r23,r20,1
    676c:	b53fd91e 	bne	r22,r20,66d4 <__alt_data_end+0xff0066d4>
    6770:	100d883a 	mov	r6,r2
    6774:	180f883a 	mov	r7,r3
    6778:	1009883a 	mov	r4,r2
    677c:	180b883a 	mov	r5,r3
    6780:	000cf240 	call	cf24 <__adddf3>
    6784:	100d883a 	mov	r6,r2
    6788:	180f883a 	mov	r7,r3
    678c:	8009883a 	mov	r4,r16
    6790:	880b883a 	mov	r5,r17
    6794:	1027883a 	mov	r19,r2
    6798:	1825883a 	mov	r18,r3
    679c:	000d9340 	call	d934 <__ledf2>
    67a0:	10000816 	blt	r2,zero,67c4 <_dtoa_r+0x948>
    67a4:	980d883a 	mov	r6,r19
    67a8:	900f883a 	mov	r7,r18
    67ac:	8009883a 	mov	r4,r16
    67b0:	880b883a 	mov	r5,r17
    67b4:	000d7d00 	call	d7d0 <__eqdf2>
    67b8:	103f5a1e 	bne	r2,zero,6524 <__alt_data_end+0xff006524>
    67bc:	ad40004c 	andi	r21,r21,1
    67c0:	a83f5826 	beq	r21,zero,6524 <__alt_data_end+0xff006524>
    67c4:	bd3fffc3 	ldbu	r20,-1(r23)
    67c8:	b8bfffc4 	addi	r2,r23,-1
    67cc:	1007883a 	mov	r3,r2
    67d0:	01400e44 	movi	r5,57
    67d4:	d9800717 	ldw	r6,28(sp)
    67d8:	00000506 	br	67f0 <_dtoa_r+0x974>
    67dc:	18ffffc4 	addi	r3,r3,-1
    67e0:	11824726 	beq	r2,r6,7100 <_dtoa_r+0x1284>
    67e4:	1d000003 	ldbu	r20,0(r3)
    67e8:	102f883a 	mov	r23,r2
    67ec:	10bfffc4 	addi	r2,r2,-1
    67f0:	a1003fcc 	andi	r4,r20,255
    67f4:	2100201c 	xori	r4,r4,128
    67f8:	213fe004 	addi	r4,r4,-128
    67fc:	217ff726 	beq	r4,r5,67dc <__alt_data_end+0xff0067dc>
    6800:	a2000044 	addi	r8,r20,1
    6804:	12000005 	stb	r8,0(r2)
    6808:	003f4606 	br	6524 <__alt_data_end+0xff006524>
    680c:	d9000b17 	ldw	r4,44(sp)
    6810:	2000c826 	beq	r4,zero,6b34 <_dtoa_r+0xcb8>
    6814:	d9800317 	ldw	r6,12(sp)
    6818:	00c00044 	movi	r3,1
    681c:	1980f90e 	bge	r3,r6,6c04 <_dtoa_r+0xd88>
    6820:	d8800617 	ldw	r2,24(sp)
    6824:	d8c00a17 	ldw	r3,40(sp)
    6828:	157fffc4 	addi	r21,r2,-1
    682c:	1d41f316 	blt	r3,r21,6ffc <_dtoa_r+0x1180>
    6830:	1d6bc83a 	sub	r21,r3,r21
    6834:	d9c00617 	ldw	r7,24(sp)
    6838:	3802aa16 	blt	r7,zero,72e4 <_dtoa_r+0x1468>
    683c:	dd000817 	ldw	r20,32(sp)
    6840:	d8800617 	ldw	r2,24(sp)
    6844:	d8c00817 	ldw	r3,32(sp)
    6848:	01400044 	movi	r5,1
    684c:	e009883a 	mov	r4,fp
    6850:	1887883a 	add	r3,r3,r2
    6854:	d8c00815 	stw	r3,32(sp)
    6858:	b0ad883a 	add	r22,r22,r2
    685c:	00091180 	call	9118 <__i2b>
    6860:	1023883a 	mov	r17,r2
    6864:	a0000826 	beq	r20,zero,6888 <_dtoa_r+0xa0c>
    6868:	0580070e 	bge	zero,r22,6888 <_dtoa_r+0xa0c>
    686c:	a005883a 	mov	r2,r20
    6870:	b500b916 	blt	r22,r20,6b58 <_dtoa_r+0xcdc>
    6874:	d9000817 	ldw	r4,32(sp)
    6878:	a0a9c83a 	sub	r20,r20,r2
    687c:	b0adc83a 	sub	r22,r22,r2
    6880:	2089c83a 	sub	r4,r4,r2
    6884:	d9000815 	stw	r4,32(sp)
    6888:	d9800a17 	ldw	r6,40(sp)
    688c:	0181810e 	bge	zero,r6,6e94 <_dtoa_r+0x1018>
    6890:	d9c00b17 	ldw	r7,44(sp)
    6894:	3800b326 	beq	r7,zero,6b64 <_dtoa_r+0xce8>
    6898:	a800b226 	beq	r21,zero,6b64 <_dtoa_r+0xce8>
    689c:	880b883a 	mov	r5,r17
    68a0:	a80d883a 	mov	r6,r21
    68a4:	e009883a 	mov	r4,fp
    68a8:	000934c0 	call	934c <__pow5mult>
    68ac:	d9800917 	ldw	r6,36(sp)
    68b0:	100b883a 	mov	r5,r2
    68b4:	e009883a 	mov	r4,fp
    68b8:	1023883a 	mov	r17,r2
    68bc:	00091540 	call	9154 <__multiply>
    68c0:	1021883a 	mov	r16,r2
    68c4:	d8800a17 	ldw	r2,40(sp)
    68c8:	d9400917 	ldw	r5,36(sp)
    68cc:	e009883a 	mov	r4,fp
    68d0:	1545c83a 	sub	r2,r2,r21
    68d4:	d8800a15 	stw	r2,40(sp)
    68d8:	0008db40 	call	8db4 <_Bfree>
    68dc:	d8c00a17 	ldw	r3,40(sp)
    68e0:	18009f1e 	bne	r3,zero,6b60 <_dtoa_r+0xce4>
    68e4:	05c00044 	movi	r23,1
    68e8:	e009883a 	mov	r4,fp
    68ec:	b80b883a 	mov	r5,r23
    68f0:	00091180 	call	9118 <__i2b>
    68f4:	d9000d17 	ldw	r4,52(sp)
    68f8:	102b883a 	mov	r21,r2
    68fc:	2000ce26 	beq	r4,zero,6c38 <_dtoa_r+0xdbc>
    6900:	200d883a 	mov	r6,r4
    6904:	100b883a 	mov	r5,r2
    6908:	e009883a 	mov	r4,fp
    690c:	000934c0 	call	934c <__pow5mult>
    6910:	d9800317 	ldw	r6,12(sp)
    6914:	102b883a 	mov	r21,r2
    6918:	b981810e 	bge	r23,r6,6f20 <_dtoa_r+0x10a4>
    691c:	0027883a 	mov	r19,zero
    6920:	a8800417 	ldw	r2,16(r21)
    6924:	05c00804 	movi	r23,32
    6928:	10800104 	addi	r2,r2,4
    692c:	1085883a 	add	r2,r2,r2
    6930:	1085883a 	add	r2,r2,r2
    6934:	a885883a 	add	r2,r21,r2
    6938:	11000017 	ldw	r4,0(r2)
    693c:	00090000 	call	9000 <__hi0bits>
    6940:	b885c83a 	sub	r2,r23,r2
    6944:	1585883a 	add	r2,r2,r22
    6948:	108007cc 	andi	r2,r2,31
    694c:	1000b326 	beq	r2,zero,6c1c <_dtoa_r+0xda0>
    6950:	00c00804 	movi	r3,32
    6954:	1887c83a 	sub	r3,r3,r2
    6958:	01000104 	movi	r4,4
    695c:	20c2cd0e 	bge	r4,r3,7494 <_dtoa_r+0x1618>
    6960:	00c00704 	movi	r3,28
    6964:	1885c83a 	sub	r2,r3,r2
    6968:	d8c00817 	ldw	r3,32(sp)
    696c:	a0a9883a 	add	r20,r20,r2
    6970:	b0ad883a 	add	r22,r22,r2
    6974:	1887883a 	add	r3,r3,r2
    6978:	d8c00815 	stw	r3,32(sp)
    697c:	d9800817 	ldw	r6,32(sp)
    6980:	0180040e 	bge	zero,r6,6994 <_dtoa_r+0xb18>
    6984:	800b883a 	mov	r5,r16
    6988:	e009883a 	mov	r4,fp
    698c:	000948c0 	call	948c <__lshift>
    6990:	1021883a 	mov	r16,r2
    6994:	0580050e 	bge	zero,r22,69ac <_dtoa_r+0xb30>
    6998:	a80b883a 	mov	r5,r21
    699c:	b00d883a 	mov	r6,r22
    69a0:	e009883a 	mov	r4,fp
    69a4:	000948c0 	call	948c <__lshift>
    69a8:	102b883a 	mov	r21,r2
    69ac:	d9c00e17 	ldw	r7,56(sp)
    69b0:	3801211e 	bne	r7,zero,6e38 <_dtoa_r+0xfbc>
    69b4:	d9800617 	ldw	r6,24(sp)
    69b8:	0181380e 	bge	zero,r6,6e9c <_dtoa_r+0x1020>
    69bc:	d8c00b17 	ldw	r3,44(sp)
    69c0:	1800ab1e 	bne	r3,zero,6c70 <_dtoa_r+0xdf4>
    69c4:	dc800717 	ldw	r18,28(sp)
    69c8:	dcc00617 	ldw	r19,24(sp)
    69cc:	9029883a 	mov	r20,r18
    69d0:	00000206 	br	69dc <_dtoa_r+0xb60>
    69d4:	0008ddc0 	call	8ddc <__multadd>
    69d8:	1021883a 	mov	r16,r2
    69dc:	a80b883a 	mov	r5,r21
    69e0:	8009883a 	mov	r4,r16
    69e4:	0005c7c0 	call	5c7c <quorem>
    69e8:	10800c04 	addi	r2,r2,48
    69ec:	90800005 	stb	r2,0(r18)
    69f0:	94800044 	addi	r18,r18,1
    69f4:	9507c83a 	sub	r3,r18,r20
    69f8:	000f883a 	mov	r7,zero
    69fc:	01800284 	movi	r6,10
    6a00:	800b883a 	mov	r5,r16
    6a04:	e009883a 	mov	r4,fp
    6a08:	1cfff216 	blt	r3,r19,69d4 <__alt_data_end+0xff0069d4>
    6a0c:	1011883a 	mov	r8,r2
    6a10:	d8800617 	ldw	r2,24(sp)
    6a14:	0082370e 	bge	zero,r2,72f4 <_dtoa_r+0x1478>
    6a18:	d9000717 	ldw	r4,28(sp)
    6a1c:	0025883a 	mov	r18,zero
    6a20:	20af883a 	add	r23,r4,r2
    6a24:	01800044 	movi	r6,1
    6a28:	800b883a 	mov	r5,r16
    6a2c:	e009883a 	mov	r4,fp
    6a30:	da001715 	stw	r8,92(sp)
    6a34:	000948c0 	call	948c <__lshift>
    6a38:	a80b883a 	mov	r5,r21
    6a3c:	1009883a 	mov	r4,r2
    6a40:	d8800915 	stw	r2,36(sp)
    6a44:	00095d40 	call	95d4 <__mcmp>
    6a48:	da001717 	ldw	r8,92(sp)
    6a4c:	0081800e 	bge	zero,r2,7050 <_dtoa_r+0x11d4>
    6a50:	b93fffc3 	ldbu	r4,-1(r23)
    6a54:	b8bfffc4 	addi	r2,r23,-1
    6a58:	1007883a 	mov	r3,r2
    6a5c:	01800e44 	movi	r6,57
    6a60:	d9c00717 	ldw	r7,28(sp)
    6a64:	00000506 	br	6a7c <_dtoa_r+0xc00>
    6a68:	18ffffc4 	addi	r3,r3,-1
    6a6c:	11c12326 	beq	r2,r7,6efc <_dtoa_r+0x1080>
    6a70:	19000003 	ldbu	r4,0(r3)
    6a74:	102f883a 	mov	r23,r2
    6a78:	10bfffc4 	addi	r2,r2,-1
    6a7c:	21403fcc 	andi	r5,r4,255
    6a80:	2940201c 	xori	r5,r5,128
    6a84:	297fe004 	addi	r5,r5,-128
    6a88:	29bff726 	beq	r5,r6,6a68 <__alt_data_end+0xff006a68>
    6a8c:	21000044 	addi	r4,r4,1
    6a90:	11000005 	stb	r4,0(r2)
    6a94:	a80b883a 	mov	r5,r21
    6a98:	e009883a 	mov	r4,fp
    6a9c:	0008db40 	call	8db4 <_Bfree>
    6aa0:	883ea026 	beq	r17,zero,6524 <__alt_data_end+0xff006524>
    6aa4:	90000426 	beq	r18,zero,6ab8 <_dtoa_r+0xc3c>
    6aa8:	94400326 	beq	r18,r17,6ab8 <_dtoa_r+0xc3c>
    6aac:	900b883a 	mov	r5,r18
    6ab0:	e009883a 	mov	r4,fp
    6ab4:	0008db40 	call	8db4 <_Bfree>
    6ab8:	880b883a 	mov	r5,r17
    6abc:	e009883a 	mov	r4,fp
    6ac0:	0008db40 	call	8db4 <_Bfree>
    6ac4:	003e9706 	br	6524 <__alt_data_end+0xff006524>
    6ac8:	01800044 	movi	r6,1
    6acc:	d9800e15 	stw	r6,56(sp)
    6ad0:	003d9606 	br	612c <__alt_data_end+0xff00612c>
    6ad4:	d8800817 	ldw	r2,32(sp)
    6ad8:	d8c00517 	ldw	r3,20(sp)
    6adc:	d8000d15 	stw	zero,52(sp)
    6ae0:	10c5c83a 	sub	r2,r2,r3
    6ae4:	00c9c83a 	sub	r4,zero,r3
    6ae8:	d8800815 	stw	r2,32(sp)
    6aec:	d9000a15 	stw	r4,40(sp)
    6af0:	003d9706 	br	6150 <__alt_data_end+0xff006150>
    6af4:	05adc83a 	sub	r22,zero,r22
    6af8:	dd800815 	stw	r22,32(sp)
    6afc:	002d883a 	mov	r22,zero
    6b00:	003d8e06 	br	613c <__alt_data_end+0xff00613c>
    6b04:	d9000517 	ldw	r4,20(sp)
    6b08:	000eabc0 	call	eabc <__floatsidf>
    6b0c:	100d883a 	mov	r6,r2
    6b10:	180f883a 	mov	r7,r3
    6b14:	a009883a 	mov	r4,r20
    6b18:	880b883a 	mov	r5,r17
    6b1c:	000d7d00 	call	d7d0 <__eqdf2>
    6b20:	103d7126 	beq	r2,zero,60e8 <__alt_data_end+0xff0060e8>
    6b24:	d9c00517 	ldw	r7,20(sp)
    6b28:	39ffffc4 	addi	r7,r7,-1
    6b2c:	d9c00515 	stw	r7,20(sp)
    6b30:	003d6d06 	br	60e8 <__alt_data_end+0xff0060e8>
    6b34:	dd400a17 	ldw	r21,40(sp)
    6b38:	dd000817 	ldw	r20,32(sp)
    6b3c:	0023883a 	mov	r17,zero
    6b40:	003f4806 	br	6864 <__alt_data_end+0xff006864>
    6b44:	10e3c83a 	sub	r17,r2,r3
    6b48:	9448983a 	sll	r4,r18,r17
    6b4c:	003d3206 	br	6018 <__alt_data_end+0xff006018>
    6b50:	d8000e15 	stw	zero,56(sp)
    6b54:	003d7506 	br	612c <__alt_data_end+0xff00612c>
    6b58:	b005883a 	mov	r2,r22
    6b5c:	003f4506 	br	6874 <__alt_data_end+0xff006874>
    6b60:	dc000915 	stw	r16,36(sp)
    6b64:	d9800a17 	ldw	r6,40(sp)
    6b68:	d9400917 	ldw	r5,36(sp)
    6b6c:	e009883a 	mov	r4,fp
    6b70:	000934c0 	call	934c <__pow5mult>
    6b74:	1021883a 	mov	r16,r2
    6b78:	003f5a06 	br	68e4 <__alt_data_end+0xff0068e4>
    6b7c:	01c00044 	movi	r7,1
    6b80:	d9c00b15 	stw	r7,44(sp)
    6b84:	d8802217 	ldw	r2,136(sp)
    6b88:	0081280e 	bge	zero,r2,702c <_dtoa_r+0x11b0>
    6b8c:	100d883a 	mov	r6,r2
    6b90:	1021883a 	mov	r16,r2
    6b94:	d8800c15 	stw	r2,48(sp)
    6b98:	d8800615 	stw	r2,24(sp)
    6b9c:	003d8806 	br	61c0 <__alt_data_end+0xff0061c0>
    6ba0:	d8800617 	ldw	r2,24(sp)
    6ba4:	00be9b16 	blt	zero,r2,6614 <__alt_data_end+0xff006614>
    6ba8:	10010f1e 	bne	r2,zero,6fe8 <_dtoa_r+0x116c>
    6bac:	880b883a 	mov	r5,r17
    6bb0:	000d883a 	mov	r6,zero
    6bb4:	01d00534 	movhi	r7,16404
    6bb8:	8009883a 	mov	r4,r16
    6bbc:	000da280 	call	da28 <__muldf3>
    6bc0:	900d883a 	mov	r6,r18
    6bc4:	980f883a 	mov	r7,r19
    6bc8:	1009883a 	mov	r4,r2
    6bcc:	180b883a 	mov	r5,r3
    6bd0:	000d8580 	call	d858 <__gedf2>
    6bd4:	002b883a 	mov	r21,zero
    6bd8:	0023883a 	mov	r17,zero
    6bdc:	1000bf16 	blt	r2,zero,6edc <_dtoa_r+0x1060>
    6be0:	d9802217 	ldw	r6,136(sp)
    6be4:	ddc00717 	ldw	r23,28(sp)
    6be8:	018c303a 	nor	r6,zero,r6
    6bec:	d9800515 	stw	r6,20(sp)
    6bf0:	a80b883a 	mov	r5,r21
    6bf4:	e009883a 	mov	r4,fp
    6bf8:	0008db40 	call	8db4 <_Bfree>
    6bfc:	883e4926 	beq	r17,zero,6524 <__alt_data_end+0xff006524>
    6c00:	003fad06 	br	6ab8 <__alt_data_end+0xff006ab8>
    6c04:	d9c01117 	ldw	r7,68(sp)
    6c08:	3801bc26 	beq	r7,zero,72fc <_dtoa_r+0x1480>
    6c0c:	10810cc4 	addi	r2,r2,1075
    6c10:	dd400a17 	ldw	r21,40(sp)
    6c14:	dd000817 	ldw	r20,32(sp)
    6c18:	003f0a06 	br	6844 <__alt_data_end+0xff006844>
    6c1c:	00800704 	movi	r2,28
    6c20:	d9000817 	ldw	r4,32(sp)
    6c24:	a0a9883a 	add	r20,r20,r2
    6c28:	b0ad883a 	add	r22,r22,r2
    6c2c:	2089883a 	add	r4,r4,r2
    6c30:	d9000815 	stw	r4,32(sp)
    6c34:	003f5106 	br	697c <__alt_data_end+0xff00697c>
    6c38:	d8c00317 	ldw	r3,12(sp)
    6c3c:	b8c1fc0e 	bge	r23,r3,7430 <_dtoa_r+0x15b4>
    6c40:	0027883a 	mov	r19,zero
    6c44:	b805883a 	mov	r2,r23
    6c48:	003f3e06 	br	6944 <__alt_data_end+0xff006944>
    6c4c:	880b883a 	mov	r5,r17
    6c50:	e009883a 	mov	r4,fp
    6c54:	000f883a 	mov	r7,zero
    6c58:	01800284 	movi	r6,10
    6c5c:	0008ddc0 	call	8ddc <__multadd>
    6c60:	d9000c17 	ldw	r4,48(sp)
    6c64:	1023883a 	mov	r17,r2
    6c68:	0102040e 	bge	zero,r4,747c <_dtoa_r+0x1600>
    6c6c:	d9000615 	stw	r4,24(sp)
    6c70:	0500050e 	bge	zero,r20,6c88 <_dtoa_r+0xe0c>
    6c74:	880b883a 	mov	r5,r17
    6c78:	a00d883a 	mov	r6,r20
    6c7c:	e009883a 	mov	r4,fp
    6c80:	000948c0 	call	948c <__lshift>
    6c84:	1023883a 	mov	r17,r2
    6c88:	9801241e 	bne	r19,zero,711c <_dtoa_r+0x12a0>
    6c8c:	8829883a 	mov	r20,r17
    6c90:	d9000617 	ldw	r4,24(sp)
    6c94:	dcc00717 	ldw	r19,28(sp)
    6c98:	9480004c 	andi	r18,r18,1
    6c9c:	20bfffc4 	addi	r2,r4,-1
    6ca0:	9885883a 	add	r2,r19,r2
    6ca4:	d8800415 	stw	r2,16(sp)
    6ca8:	dc800615 	stw	r18,24(sp)
    6cac:	a80b883a 	mov	r5,r21
    6cb0:	8009883a 	mov	r4,r16
    6cb4:	0005c7c0 	call	5c7c <quorem>
    6cb8:	880b883a 	mov	r5,r17
    6cbc:	8009883a 	mov	r4,r16
    6cc0:	102f883a 	mov	r23,r2
    6cc4:	00095d40 	call	95d4 <__mcmp>
    6cc8:	a80b883a 	mov	r5,r21
    6ccc:	a00d883a 	mov	r6,r20
    6cd0:	e009883a 	mov	r4,fp
    6cd4:	102d883a 	mov	r22,r2
    6cd8:	00096340 	call	9634 <__mdiff>
    6cdc:	1007883a 	mov	r3,r2
    6ce0:	10800317 	ldw	r2,12(r2)
    6ce4:	bc800c04 	addi	r18,r23,48
    6ce8:	180b883a 	mov	r5,r3
    6cec:	10004e1e 	bne	r2,zero,6e28 <_dtoa_r+0xfac>
    6cf0:	8009883a 	mov	r4,r16
    6cf4:	d8c01615 	stw	r3,88(sp)
    6cf8:	00095d40 	call	95d4 <__mcmp>
    6cfc:	d8c01617 	ldw	r3,88(sp)
    6d00:	e009883a 	mov	r4,fp
    6d04:	d8801615 	stw	r2,88(sp)
    6d08:	180b883a 	mov	r5,r3
    6d0c:	0008db40 	call	8db4 <_Bfree>
    6d10:	d8801617 	ldw	r2,88(sp)
    6d14:	1000041e 	bne	r2,zero,6d28 <_dtoa_r+0xeac>
    6d18:	d9800317 	ldw	r6,12(sp)
    6d1c:	3000021e 	bne	r6,zero,6d28 <_dtoa_r+0xeac>
    6d20:	d8c00617 	ldw	r3,24(sp)
    6d24:	18003726 	beq	r3,zero,6e04 <_dtoa_r+0xf88>
    6d28:	b0002016 	blt	r22,zero,6dac <_dtoa_r+0xf30>
    6d2c:	b000041e 	bne	r22,zero,6d40 <_dtoa_r+0xec4>
    6d30:	d9000317 	ldw	r4,12(sp)
    6d34:	2000021e 	bne	r4,zero,6d40 <_dtoa_r+0xec4>
    6d38:	d8c00617 	ldw	r3,24(sp)
    6d3c:	18001b26 	beq	r3,zero,6dac <_dtoa_r+0xf30>
    6d40:	00810716 	blt	zero,r2,7160 <_dtoa_r+0x12e4>
    6d44:	d8c00417 	ldw	r3,16(sp)
    6d48:	9d800044 	addi	r22,r19,1
    6d4c:	9c800005 	stb	r18,0(r19)
    6d50:	b02f883a 	mov	r23,r22
    6d54:	98c10626 	beq	r19,r3,7170 <_dtoa_r+0x12f4>
    6d58:	800b883a 	mov	r5,r16
    6d5c:	000f883a 	mov	r7,zero
    6d60:	01800284 	movi	r6,10
    6d64:	e009883a 	mov	r4,fp
    6d68:	0008ddc0 	call	8ddc <__multadd>
    6d6c:	1021883a 	mov	r16,r2
    6d70:	000f883a 	mov	r7,zero
    6d74:	01800284 	movi	r6,10
    6d78:	880b883a 	mov	r5,r17
    6d7c:	e009883a 	mov	r4,fp
    6d80:	8d002526 	beq	r17,r20,6e18 <_dtoa_r+0xf9c>
    6d84:	0008ddc0 	call	8ddc <__multadd>
    6d88:	a00b883a 	mov	r5,r20
    6d8c:	000f883a 	mov	r7,zero
    6d90:	01800284 	movi	r6,10
    6d94:	e009883a 	mov	r4,fp
    6d98:	1023883a 	mov	r17,r2
    6d9c:	0008ddc0 	call	8ddc <__multadd>
    6da0:	1029883a 	mov	r20,r2
    6da4:	b027883a 	mov	r19,r22
    6da8:	003fc006 	br	6cac <__alt_data_end+0xff006cac>
    6dac:	9011883a 	mov	r8,r18
    6db0:	00800e0e 	bge	zero,r2,6dec <_dtoa_r+0xf70>
    6db4:	800b883a 	mov	r5,r16
    6db8:	01800044 	movi	r6,1
    6dbc:	e009883a 	mov	r4,fp
    6dc0:	da001715 	stw	r8,92(sp)
    6dc4:	000948c0 	call	948c <__lshift>
    6dc8:	a80b883a 	mov	r5,r21
    6dcc:	1009883a 	mov	r4,r2
    6dd0:	1021883a 	mov	r16,r2
    6dd4:	00095d40 	call	95d4 <__mcmp>
    6dd8:	da001717 	ldw	r8,92(sp)
    6ddc:	0081960e 	bge	zero,r2,7438 <_dtoa_r+0x15bc>
    6de0:	00800e44 	movi	r2,57
    6de4:	40817026 	beq	r8,r2,73a8 <_dtoa_r+0x152c>
    6de8:	ba000c44 	addi	r8,r23,49
    6dec:	8825883a 	mov	r18,r17
    6df0:	9dc00044 	addi	r23,r19,1
    6df4:	9a000005 	stb	r8,0(r19)
    6df8:	a023883a 	mov	r17,r20
    6dfc:	dc000915 	stw	r16,36(sp)
    6e00:	003f2406 	br	6a94 <__alt_data_end+0xff006a94>
    6e04:	00800e44 	movi	r2,57
    6e08:	9011883a 	mov	r8,r18
    6e0c:	90816626 	beq	r18,r2,73a8 <_dtoa_r+0x152c>
    6e10:	05bff516 	blt	zero,r22,6de8 <__alt_data_end+0xff006de8>
    6e14:	003ff506 	br	6dec <__alt_data_end+0xff006dec>
    6e18:	0008ddc0 	call	8ddc <__multadd>
    6e1c:	1023883a 	mov	r17,r2
    6e20:	1029883a 	mov	r20,r2
    6e24:	003fdf06 	br	6da4 <__alt_data_end+0xff006da4>
    6e28:	e009883a 	mov	r4,fp
    6e2c:	0008db40 	call	8db4 <_Bfree>
    6e30:	00800044 	movi	r2,1
    6e34:	003fbc06 	br	6d28 <__alt_data_end+0xff006d28>
    6e38:	a80b883a 	mov	r5,r21
    6e3c:	8009883a 	mov	r4,r16
    6e40:	00095d40 	call	95d4 <__mcmp>
    6e44:	103edb0e 	bge	r2,zero,69b4 <__alt_data_end+0xff0069b4>
    6e48:	800b883a 	mov	r5,r16
    6e4c:	000f883a 	mov	r7,zero
    6e50:	01800284 	movi	r6,10
    6e54:	e009883a 	mov	r4,fp
    6e58:	0008ddc0 	call	8ddc <__multadd>
    6e5c:	1021883a 	mov	r16,r2
    6e60:	d8800517 	ldw	r2,20(sp)
    6e64:	d8c00b17 	ldw	r3,44(sp)
    6e68:	10bfffc4 	addi	r2,r2,-1
    6e6c:	d8800515 	stw	r2,20(sp)
    6e70:	183f761e 	bne	r3,zero,6c4c <__alt_data_end+0xff006c4c>
    6e74:	d9000c17 	ldw	r4,48(sp)
    6e78:	0101730e 	bge	zero,r4,7448 <_dtoa_r+0x15cc>
    6e7c:	d9000615 	stw	r4,24(sp)
    6e80:	003ed006 	br	69c4 <__alt_data_end+0xff0069c4>
    6e84:	00800084 	movi	r2,2
    6e88:	3081861e 	bne	r6,r2,74a4 <_dtoa_r+0x1628>
    6e8c:	d8000b15 	stw	zero,44(sp)
    6e90:	003f3c06 	br	6b84 <__alt_data_end+0xff006b84>
    6e94:	dc000917 	ldw	r16,36(sp)
    6e98:	003e9206 	br	68e4 <__alt_data_end+0xff0068e4>
    6e9c:	d9c00317 	ldw	r7,12(sp)
    6ea0:	00800084 	movi	r2,2
    6ea4:	11fec50e 	bge	r2,r7,69bc <__alt_data_end+0xff0069bc>
    6ea8:	d9000617 	ldw	r4,24(sp)
    6eac:	20013c1e 	bne	r4,zero,73a0 <_dtoa_r+0x1524>
    6eb0:	a80b883a 	mov	r5,r21
    6eb4:	000f883a 	mov	r7,zero
    6eb8:	01800144 	movi	r6,5
    6ebc:	e009883a 	mov	r4,fp
    6ec0:	0008ddc0 	call	8ddc <__multadd>
    6ec4:	100b883a 	mov	r5,r2
    6ec8:	8009883a 	mov	r4,r16
    6ecc:	102b883a 	mov	r21,r2
    6ed0:	00095d40 	call	95d4 <__mcmp>
    6ed4:	dc000915 	stw	r16,36(sp)
    6ed8:	00bf410e 	bge	zero,r2,6be0 <__alt_data_end+0xff006be0>
    6edc:	d9c00717 	ldw	r7,28(sp)
    6ee0:	00800c44 	movi	r2,49
    6ee4:	38800005 	stb	r2,0(r7)
    6ee8:	d8800517 	ldw	r2,20(sp)
    6eec:	3dc00044 	addi	r23,r7,1
    6ef0:	10800044 	addi	r2,r2,1
    6ef4:	d8800515 	stw	r2,20(sp)
    6ef8:	003f3d06 	br	6bf0 <__alt_data_end+0xff006bf0>
    6efc:	d9800517 	ldw	r6,20(sp)
    6f00:	d9c00717 	ldw	r7,28(sp)
    6f04:	00800c44 	movi	r2,49
    6f08:	31800044 	addi	r6,r6,1
    6f0c:	d9800515 	stw	r6,20(sp)
    6f10:	38800005 	stb	r2,0(r7)
    6f14:	003edf06 	br	6a94 <__alt_data_end+0xff006a94>
    6f18:	d8000b15 	stw	zero,44(sp)
    6f1c:	003c9f06 	br	619c <__alt_data_end+0xff00619c>
    6f20:	903e7e1e 	bne	r18,zero,691c <__alt_data_end+0xff00691c>
    6f24:	00800434 	movhi	r2,16
    6f28:	10bfffc4 	addi	r2,r2,-1
    6f2c:	9884703a 	and	r2,r19,r2
    6f30:	1000ea1e 	bne	r2,zero,72dc <_dtoa_r+0x1460>
    6f34:	9cdffc2c 	andhi	r19,r19,32752
    6f38:	9800e826 	beq	r19,zero,72dc <_dtoa_r+0x1460>
    6f3c:	d9c00817 	ldw	r7,32(sp)
    6f40:	b5800044 	addi	r22,r22,1
    6f44:	04c00044 	movi	r19,1
    6f48:	39c00044 	addi	r7,r7,1
    6f4c:	d9c00815 	stw	r7,32(sp)
    6f50:	d8800d17 	ldw	r2,52(sp)
    6f54:	103e721e 	bne	r2,zero,6920 <__alt_data_end+0xff006920>
    6f58:	00800044 	movi	r2,1
    6f5c:	003e7906 	br	6944 <__alt_data_end+0xff006944>
    6f60:	8009883a 	mov	r4,r16
    6f64:	000eabc0 	call	eabc <__floatsidf>
    6f68:	d9800f17 	ldw	r6,60(sp)
    6f6c:	d9c01017 	ldw	r7,64(sp)
    6f70:	1009883a 	mov	r4,r2
    6f74:	180b883a 	mov	r5,r3
    6f78:	000da280 	call	da28 <__muldf3>
    6f7c:	000d883a 	mov	r6,zero
    6f80:	01d00734 	movhi	r7,16412
    6f84:	1009883a 	mov	r4,r2
    6f88:	180b883a 	mov	r5,r3
    6f8c:	000cf240 	call	cf24 <__adddf3>
    6f90:	047f3034 	movhi	r17,64704
    6f94:	1021883a 	mov	r16,r2
    6f98:	1c63883a 	add	r17,r3,r17
    6f9c:	d9000f17 	ldw	r4,60(sp)
    6fa0:	d9401017 	ldw	r5,64(sp)
    6fa4:	000d883a 	mov	r6,zero
    6fa8:	01d00534 	movhi	r7,16404
    6fac:	000e1400 	call	e140 <__subdf3>
    6fb0:	800d883a 	mov	r6,r16
    6fb4:	880f883a 	mov	r7,r17
    6fb8:	1009883a 	mov	r4,r2
    6fbc:	180b883a 	mov	r5,r3
    6fc0:	102b883a 	mov	r21,r2
    6fc4:	1829883a 	mov	r20,r3
    6fc8:	000d8580 	call	d858 <__gedf2>
    6fcc:	00806c16 	blt	zero,r2,7180 <_dtoa_r+0x1304>
    6fd0:	89e0003c 	xorhi	r7,r17,32768
    6fd4:	800d883a 	mov	r6,r16
    6fd8:	a809883a 	mov	r4,r21
    6fdc:	a00b883a 	mov	r5,r20
    6fe0:	000d9340 	call	d934 <__ledf2>
    6fe4:	103d7e0e 	bge	r2,zero,65e0 <__alt_data_end+0xff0065e0>
    6fe8:	002b883a 	mov	r21,zero
    6fec:	0023883a 	mov	r17,zero
    6ff0:	003efb06 	br	6be0 <__alt_data_end+0xff006be0>
    6ff4:	d8800717 	ldw	r2,28(sp)
    6ff8:	003bd006 	br	5f3c <__alt_data_end+0xff005f3c>
    6ffc:	d9000a17 	ldw	r4,40(sp)
    7000:	d9800d17 	ldw	r6,52(sp)
    7004:	dd400a15 	stw	r21,40(sp)
    7008:	a905c83a 	sub	r2,r21,r4
    700c:	308d883a 	add	r6,r6,r2
    7010:	d9800d15 	stw	r6,52(sp)
    7014:	002b883a 	mov	r21,zero
    7018:	003e0606 	br	6834 <__alt_data_end+0xff006834>
    701c:	9023883a 	mov	r17,r18
    7020:	9829883a 	mov	r20,r19
    7024:	04000084 	movi	r16,2
    7028:	003c9206 	br	6274 <__alt_data_end+0xff006274>
    702c:	04000044 	movi	r16,1
    7030:	dc000c15 	stw	r16,48(sp)
    7034:	dc000615 	stw	r16,24(sp)
    7038:	dc002215 	stw	r16,136(sp)
    703c:	e0001115 	stw	zero,68(fp)
    7040:	000b883a 	mov	r5,zero
    7044:	003c6906 	br	61ec <__alt_data_end+0xff0061ec>
    7048:	3021883a 	mov	r16,r6
    704c:	003ffb06 	br	703c <__alt_data_end+0xff00703c>
    7050:	1000021e 	bne	r2,zero,705c <_dtoa_r+0x11e0>
    7054:	4200004c 	andi	r8,r8,1
    7058:	403e7d1e 	bne	r8,zero,6a50 <__alt_data_end+0xff006a50>
    705c:	01000c04 	movi	r4,48
    7060:	00000106 	br	7068 <_dtoa_r+0x11ec>
    7064:	102f883a 	mov	r23,r2
    7068:	b8bfffc4 	addi	r2,r23,-1
    706c:	10c00007 	ldb	r3,0(r2)
    7070:	193ffc26 	beq	r3,r4,7064 <__alt_data_end+0xff007064>
    7074:	003e8706 	br	6a94 <__alt_data_end+0xff006a94>
    7078:	d8800517 	ldw	r2,20(sp)
    707c:	00a3c83a 	sub	r17,zero,r2
    7080:	8800a426 	beq	r17,zero,7314 <_dtoa_r+0x1498>
    7084:	888003cc 	andi	r2,r17,15
    7088:	100490fa 	slli	r2,r2,3
    708c:	00c00074 	movhi	r3,1
    7090:	18c72a04 	addi	r3,r3,7336
    7094:	1885883a 	add	r2,r3,r2
    7098:	11800017 	ldw	r6,0(r2)
    709c:	11c00117 	ldw	r7,4(r2)
    70a0:	9009883a 	mov	r4,r18
    70a4:	980b883a 	mov	r5,r19
    70a8:	8823d13a 	srai	r17,r17,4
    70ac:	000da280 	call	da28 <__muldf3>
    70b0:	d8800f15 	stw	r2,60(sp)
    70b4:	d8c01015 	stw	r3,64(sp)
    70b8:	8800e826 	beq	r17,zero,745c <_dtoa_r+0x15e0>
    70bc:	05000074 	movhi	r20,1
    70c0:	a5072004 	addi	r20,r20,7296
    70c4:	04000084 	movi	r16,2
    70c8:	8980004c 	andi	r6,r17,1
    70cc:	1009883a 	mov	r4,r2
    70d0:	8823d07a 	srai	r17,r17,1
    70d4:	180b883a 	mov	r5,r3
    70d8:	30000426 	beq	r6,zero,70ec <_dtoa_r+0x1270>
    70dc:	a1800017 	ldw	r6,0(r20)
    70e0:	a1c00117 	ldw	r7,4(r20)
    70e4:	84000044 	addi	r16,r16,1
    70e8:	000da280 	call	da28 <__muldf3>
    70ec:	a5000204 	addi	r20,r20,8
    70f0:	883ff51e 	bne	r17,zero,70c8 <__alt_data_end+0xff0070c8>
    70f4:	d8800f15 	stw	r2,60(sp)
    70f8:	d8c01015 	stw	r3,64(sp)
    70fc:	003c7606 	br	62d8 <__alt_data_end+0xff0062d8>
    7100:	00c00c04 	movi	r3,48
    7104:	10c00005 	stb	r3,0(r2)
    7108:	d8c00517 	ldw	r3,20(sp)
    710c:	bd3fffc3 	ldbu	r20,-1(r23)
    7110:	18c00044 	addi	r3,r3,1
    7114:	d8c00515 	stw	r3,20(sp)
    7118:	003db906 	br	6800 <__alt_data_end+0xff006800>
    711c:	89400117 	ldw	r5,4(r17)
    7120:	e009883a 	mov	r4,fp
    7124:	0008d0c0 	call	8d0c <_Balloc>
    7128:	89800417 	ldw	r6,16(r17)
    712c:	89400304 	addi	r5,r17,12
    7130:	11000304 	addi	r4,r2,12
    7134:	31800084 	addi	r6,r6,2
    7138:	318d883a 	add	r6,r6,r6
    713c:	318d883a 	add	r6,r6,r6
    7140:	1027883a 	mov	r19,r2
    7144:	00089400 	call	8940 <memcpy>
    7148:	01800044 	movi	r6,1
    714c:	980b883a 	mov	r5,r19
    7150:	e009883a 	mov	r4,fp
    7154:	000948c0 	call	948c <__lshift>
    7158:	1029883a 	mov	r20,r2
    715c:	003ecc06 	br	6c90 <__alt_data_end+0xff006c90>
    7160:	00800e44 	movi	r2,57
    7164:	90809026 	beq	r18,r2,73a8 <_dtoa_r+0x152c>
    7168:	92000044 	addi	r8,r18,1
    716c:	003f1f06 	br	6dec <__alt_data_end+0xff006dec>
    7170:	9011883a 	mov	r8,r18
    7174:	8825883a 	mov	r18,r17
    7178:	a023883a 	mov	r17,r20
    717c:	003e2906 	br	6a24 <__alt_data_end+0xff006a24>
    7180:	002b883a 	mov	r21,zero
    7184:	0023883a 	mov	r17,zero
    7188:	003f5406 	br	6edc <__alt_data_end+0xff006edc>
    718c:	61bfffc4 	addi	r6,r12,-1
    7190:	300490fa 	slli	r2,r6,3
    7194:	00c00074 	movhi	r3,1
    7198:	18c72a04 	addi	r3,r3,7336
    719c:	1885883a 	add	r2,r3,r2
    71a0:	11000017 	ldw	r4,0(r2)
    71a4:	11400117 	ldw	r5,4(r2)
    71a8:	d8800717 	ldw	r2,28(sp)
    71ac:	880f883a 	mov	r7,r17
    71b0:	d9801215 	stw	r6,72(sp)
    71b4:	800d883a 	mov	r6,r16
    71b8:	db001615 	stw	r12,88(sp)
    71bc:	15c00044 	addi	r23,r2,1
    71c0:	000da280 	call	da28 <__muldf3>
    71c4:	d9401017 	ldw	r5,64(sp)
    71c8:	d9000f17 	ldw	r4,60(sp)
    71cc:	d8c01515 	stw	r3,84(sp)
    71d0:	d8801415 	stw	r2,80(sp)
    71d4:	000ea3c0 	call	ea3c <__fixdfsi>
    71d8:	1009883a 	mov	r4,r2
    71dc:	1021883a 	mov	r16,r2
    71e0:	000eabc0 	call	eabc <__floatsidf>
    71e4:	d9000f17 	ldw	r4,60(sp)
    71e8:	d9401017 	ldw	r5,64(sp)
    71ec:	100d883a 	mov	r6,r2
    71f0:	180f883a 	mov	r7,r3
    71f4:	000e1400 	call	e140 <__subdf3>
    71f8:	1829883a 	mov	r20,r3
    71fc:	d8c00717 	ldw	r3,28(sp)
    7200:	84000c04 	addi	r16,r16,48
    7204:	1023883a 	mov	r17,r2
    7208:	1c000005 	stb	r16,0(r3)
    720c:	db001617 	ldw	r12,88(sp)
    7210:	00800044 	movi	r2,1
    7214:	60802226 	beq	r12,r2,72a0 <_dtoa_r+0x1424>
    7218:	d9c00717 	ldw	r7,28(sp)
    721c:	8805883a 	mov	r2,r17
    7220:	b82b883a 	mov	r21,r23
    7224:	3b19883a 	add	r12,r7,r12
    7228:	6023883a 	mov	r17,r12
    722c:	a007883a 	mov	r3,r20
    7230:	dc800f15 	stw	r18,60(sp)
    7234:	000d883a 	mov	r6,zero
    7238:	01d00934 	movhi	r7,16420
    723c:	1009883a 	mov	r4,r2
    7240:	180b883a 	mov	r5,r3
    7244:	000da280 	call	da28 <__muldf3>
    7248:	180b883a 	mov	r5,r3
    724c:	1009883a 	mov	r4,r2
    7250:	1829883a 	mov	r20,r3
    7254:	1025883a 	mov	r18,r2
    7258:	000ea3c0 	call	ea3c <__fixdfsi>
    725c:	1009883a 	mov	r4,r2
    7260:	1021883a 	mov	r16,r2
    7264:	000eabc0 	call	eabc <__floatsidf>
    7268:	100d883a 	mov	r6,r2
    726c:	180f883a 	mov	r7,r3
    7270:	9009883a 	mov	r4,r18
    7274:	a00b883a 	mov	r5,r20
    7278:	84000c04 	addi	r16,r16,48
    727c:	000e1400 	call	e140 <__subdf3>
    7280:	ad400044 	addi	r21,r21,1
    7284:	ac3fffc5 	stb	r16,-1(r21)
    7288:	ac7fea1e 	bne	r21,r17,7234 <__alt_data_end+0xff007234>
    728c:	1023883a 	mov	r17,r2
    7290:	d8801217 	ldw	r2,72(sp)
    7294:	dc800f17 	ldw	r18,60(sp)
    7298:	1829883a 	mov	r20,r3
    729c:	b8af883a 	add	r23,r23,r2
    72a0:	d9001417 	ldw	r4,80(sp)
    72a4:	d9401517 	ldw	r5,84(sp)
    72a8:	000d883a 	mov	r6,zero
    72ac:	01cff834 	movhi	r7,16352
    72b0:	000cf240 	call	cf24 <__adddf3>
    72b4:	880d883a 	mov	r6,r17
    72b8:	a00f883a 	mov	r7,r20
    72bc:	1009883a 	mov	r4,r2
    72c0:	180b883a 	mov	r5,r3
    72c4:	000d9340 	call	d934 <__ledf2>
    72c8:	10003e0e 	bge	r2,zero,73c4 <_dtoa_r+0x1548>
    72cc:	d9001317 	ldw	r4,76(sp)
    72d0:	bd3fffc3 	ldbu	r20,-1(r23)
    72d4:	d9000515 	stw	r4,20(sp)
    72d8:	003d3b06 	br	67c8 <__alt_data_end+0xff0067c8>
    72dc:	0027883a 	mov	r19,zero
    72e0:	003f1b06 	br	6f50 <__alt_data_end+0xff006f50>
    72e4:	d8800817 	ldw	r2,32(sp)
    72e8:	11e9c83a 	sub	r20,r2,r7
    72ec:	0005883a 	mov	r2,zero
    72f0:	003d5406 	br	6844 <__alt_data_end+0xff006844>
    72f4:	00800044 	movi	r2,1
    72f8:	003dc706 	br	6a18 <__alt_data_end+0xff006a18>
    72fc:	d8c00217 	ldw	r3,8(sp)
    7300:	00800d84 	movi	r2,54
    7304:	dd400a17 	ldw	r21,40(sp)
    7308:	10c5c83a 	sub	r2,r2,r3
    730c:	dd000817 	ldw	r20,32(sp)
    7310:	003d4c06 	br	6844 <__alt_data_end+0xff006844>
    7314:	dc800f15 	stw	r18,60(sp)
    7318:	dcc01015 	stw	r19,64(sp)
    731c:	04000084 	movi	r16,2
    7320:	003bed06 	br	62d8 <__alt_data_end+0xff0062d8>
    7324:	d9000617 	ldw	r4,24(sp)
    7328:	203f0d26 	beq	r4,zero,6f60 <__alt_data_end+0xff006f60>
    732c:	d9800c17 	ldw	r6,48(sp)
    7330:	01bcab0e 	bge	zero,r6,65e0 <__alt_data_end+0xff0065e0>
    7334:	d9401017 	ldw	r5,64(sp)
    7338:	d9000f17 	ldw	r4,60(sp)
    733c:	000d883a 	mov	r6,zero
    7340:	01d00934 	movhi	r7,16420
    7344:	000da280 	call	da28 <__muldf3>
    7348:	81000044 	addi	r4,r16,1
    734c:	d8800f15 	stw	r2,60(sp)
    7350:	d8c01015 	stw	r3,64(sp)
    7354:	000eabc0 	call	eabc <__floatsidf>
    7358:	d9800f17 	ldw	r6,60(sp)
    735c:	d9c01017 	ldw	r7,64(sp)
    7360:	1009883a 	mov	r4,r2
    7364:	180b883a 	mov	r5,r3
    7368:	000da280 	call	da28 <__muldf3>
    736c:	01d00734 	movhi	r7,16412
    7370:	000d883a 	mov	r6,zero
    7374:	1009883a 	mov	r4,r2
    7378:	180b883a 	mov	r5,r3
    737c:	000cf240 	call	cf24 <__adddf3>
    7380:	d9c00517 	ldw	r7,20(sp)
    7384:	047f3034 	movhi	r17,64704
    7388:	1021883a 	mov	r16,r2
    738c:	39ffffc4 	addi	r7,r7,-1
    7390:	d9c01315 	stw	r7,76(sp)
    7394:	1c63883a 	add	r17,r3,r17
    7398:	db000c17 	ldw	r12,48(sp)
    739c:	003bea06 	br	6348 <__alt_data_end+0xff006348>
    73a0:	dc000915 	stw	r16,36(sp)
    73a4:	003e0e06 	br	6be0 <__alt_data_end+0xff006be0>
    73a8:	01000e44 	movi	r4,57
    73ac:	8825883a 	mov	r18,r17
    73b0:	9dc00044 	addi	r23,r19,1
    73b4:	99000005 	stb	r4,0(r19)
    73b8:	a023883a 	mov	r17,r20
    73bc:	dc000915 	stw	r16,36(sp)
    73c0:	003da406 	br	6a54 <__alt_data_end+0xff006a54>
    73c4:	d9801417 	ldw	r6,80(sp)
    73c8:	d9c01517 	ldw	r7,84(sp)
    73cc:	0009883a 	mov	r4,zero
    73d0:	014ff834 	movhi	r5,16352
    73d4:	000e1400 	call	e140 <__subdf3>
    73d8:	880d883a 	mov	r6,r17
    73dc:	a00f883a 	mov	r7,r20
    73e0:	1009883a 	mov	r4,r2
    73e4:	180b883a 	mov	r5,r3
    73e8:	000d8580 	call	d858 <__gedf2>
    73ec:	00bc7c0e 	bge	zero,r2,65e0 <__alt_data_end+0xff0065e0>
    73f0:	01000c04 	movi	r4,48
    73f4:	00000106 	br	73fc <_dtoa_r+0x1580>
    73f8:	102f883a 	mov	r23,r2
    73fc:	b8bfffc4 	addi	r2,r23,-1
    7400:	10c00007 	ldb	r3,0(r2)
    7404:	193ffc26 	beq	r3,r4,73f8 <__alt_data_end+0xff0073f8>
    7408:	d9801317 	ldw	r6,76(sp)
    740c:	d9800515 	stw	r6,20(sp)
    7410:	003c4406 	br	6524 <__alt_data_end+0xff006524>
    7414:	d9801317 	ldw	r6,76(sp)
    7418:	d9800515 	stw	r6,20(sp)
    741c:	003cea06 	br	67c8 <__alt_data_end+0xff0067c8>
    7420:	dd800f17 	ldw	r22,60(sp)
    7424:	dcc01017 	ldw	r19,64(sp)
    7428:	dc801217 	ldw	r18,72(sp)
    742c:	003c6c06 	br	65e0 <__alt_data_end+0xff0065e0>
    7430:	903e031e 	bne	r18,zero,6c40 <__alt_data_end+0xff006c40>
    7434:	003ebb06 	br	6f24 <__alt_data_end+0xff006f24>
    7438:	103e6c1e 	bne	r2,zero,6dec <__alt_data_end+0xff006dec>
    743c:	4080004c 	andi	r2,r8,1
    7440:	103e6a26 	beq	r2,zero,6dec <__alt_data_end+0xff006dec>
    7444:	003e6606 	br	6de0 <__alt_data_end+0xff006de0>
    7448:	d8c00317 	ldw	r3,12(sp)
    744c:	00800084 	movi	r2,2
    7450:	10c02916 	blt	r2,r3,74f8 <_dtoa_r+0x167c>
    7454:	d9000c17 	ldw	r4,48(sp)
    7458:	003e8806 	br	6e7c <__alt_data_end+0xff006e7c>
    745c:	04000084 	movi	r16,2
    7460:	003b9d06 	br	62d8 <__alt_data_end+0xff0062d8>
    7464:	d9001317 	ldw	r4,76(sp)
    7468:	d9000515 	stw	r4,20(sp)
    746c:	003cd606 	br	67c8 <__alt_data_end+0xff0067c8>
    7470:	d8801317 	ldw	r2,76(sp)
    7474:	d8800515 	stw	r2,20(sp)
    7478:	003c2a06 	br	6524 <__alt_data_end+0xff006524>
    747c:	d9800317 	ldw	r6,12(sp)
    7480:	00800084 	movi	r2,2
    7484:	11801516 	blt	r2,r6,74dc <_dtoa_r+0x1660>
    7488:	d9c00c17 	ldw	r7,48(sp)
    748c:	d9c00615 	stw	r7,24(sp)
    7490:	003df706 	br	6c70 <__alt_data_end+0xff006c70>
    7494:	193d3926 	beq	r3,r4,697c <__alt_data_end+0xff00697c>
    7498:	00c00f04 	movi	r3,60
    749c:	1885c83a 	sub	r2,r3,r2
    74a0:	003ddf06 	br	6c20 <__alt_data_end+0xff006c20>
    74a4:	e009883a 	mov	r4,fp
    74a8:	e0001115 	stw	zero,68(fp)
    74ac:	000b883a 	mov	r5,zero
    74b0:	0008d0c0 	call	8d0c <_Balloc>
    74b4:	d8800715 	stw	r2,28(sp)
    74b8:	d8c00717 	ldw	r3,28(sp)
    74bc:	00bfffc4 	movi	r2,-1
    74c0:	01000044 	movi	r4,1
    74c4:	d8800c15 	stw	r2,48(sp)
    74c8:	e0c01015 	stw	r3,64(fp)
    74cc:	d9000b15 	stw	r4,44(sp)
    74d0:	d8800615 	stw	r2,24(sp)
    74d4:	d8002215 	stw	zero,136(sp)
    74d8:	003c4106 	br	65e0 <__alt_data_end+0xff0065e0>
    74dc:	d8c00c17 	ldw	r3,48(sp)
    74e0:	d8c00615 	stw	r3,24(sp)
    74e4:	003e7006 	br	6ea8 <__alt_data_end+0xff006ea8>
    74e8:	04400044 	movi	r17,1
    74ec:	003b2006 	br	6170 <__alt_data_end+0xff006170>
    74f0:	000b883a 	mov	r5,zero
    74f4:	003b3d06 	br	61ec <__alt_data_end+0xff0061ec>
    74f8:	d8800c17 	ldw	r2,48(sp)
    74fc:	d8800615 	stw	r2,24(sp)
    7500:	003e6906 	br	6ea8 <__alt_data_end+0xff006ea8>

00007504 <__sflush_r>:
    7504:	2880030b 	ldhu	r2,12(r5)
    7508:	defffb04 	addi	sp,sp,-20
    750c:	dcc00315 	stw	r19,12(sp)
    7510:	dc400115 	stw	r17,4(sp)
    7514:	dfc00415 	stw	ra,16(sp)
    7518:	dc800215 	stw	r18,8(sp)
    751c:	dc000015 	stw	r16,0(sp)
    7520:	10c0020c 	andi	r3,r2,8
    7524:	2823883a 	mov	r17,r5
    7528:	2027883a 	mov	r19,r4
    752c:	1800311e 	bne	r3,zero,75f4 <__sflush_r+0xf0>
    7530:	28c00117 	ldw	r3,4(r5)
    7534:	10820014 	ori	r2,r2,2048
    7538:	2880030d 	sth	r2,12(r5)
    753c:	00c04b0e 	bge	zero,r3,766c <__sflush_r+0x168>
    7540:	8a000a17 	ldw	r8,40(r17)
    7544:	40002326 	beq	r8,zero,75d4 <__sflush_r+0xd0>
    7548:	9c000017 	ldw	r16,0(r19)
    754c:	10c4000c 	andi	r3,r2,4096
    7550:	98000015 	stw	zero,0(r19)
    7554:	18004826 	beq	r3,zero,7678 <__sflush_r+0x174>
    7558:	89801417 	ldw	r6,80(r17)
    755c:	10c0010c 	andi	r3,r2,4
    7560:	18000626 	beq	r3,zero,757c <__sflush_r+0x78>
    7564:	88c00117 	ldw	r3,4(r17)
    7568:	88800c17 	ldw	r2,48(r17)
    756c:	30cdc83a 	sub	r6,r6,r3
    7570:	10000226 	beq	r2,zero,757c <__sflush_r+0x78>
    7574:	88800f17 	ldw	r2,60(r17)
    7578:	308dc83a 	sub	r6,r6,r2
    757c:	89400717 	ldw	r5,28(r17)
    7580:	000f883a 	mov	r7,zero
    7584:	9809883a 	mov	r4,r19
    7588:	403ee83a 	callr	r8
    758c:	00ffffc4 	movi	r3,-1
    7590:	10c04426 	beq	r2,r3,76a4 <__sflush_r+0x1a0>
    7594:	88c0030b 	ldhu	r3,12(r17)
    7598:	89000417 	ldw	r4,16(r17)
    759c:	88000115 	stw	zero,4(r17)
    75a0:	197dffcc 	andi	r5,r3,63487
    75a4:	8940030d 	sth	r5,12(r17)
    75a8:	89000015 	stw	r4,0(r17)
    75ac:	18c4000c 	andi	r3,r3,4096
    75b0:	18002c1e 	bne	r3,zero,7664 <__sflush_r+0x160>
    75b4:	89400c17 	ldw	r5,48(r17)
    75b8:	9c000015 	stw	r16,0(r19)
    75bc:	28000526 	beq	r5,zero,75d4 <__sflush_r+0xd0>
    75c0:	88801004 	addi	r2,r17,64
    75c4:	28800226 	beq	r5,r2,75d0 <__sflush_r+0xcc>
    75c8:	9809883a 	mov	r4,r19
    75cc:	0007c700 	call	7c70 <_free_r>
    75d0:	88000c15 	stw	zero,48(r17)
    75d4:	0005883a 	mov	r2,zero
    75d8:	dfc00417 	ldw	ra,16(sp)
    75dc:	dcc00317 	ldw	r19,12(sp)
    75e0:	dc800217 	ldw	r18,8(sp)
    75e4:	dc400117 	ldw	r17,4(sp)
    75e8:	dc000017 	ldw	r16,0(sp)
    75ec:	dec00504 	addi	sp,sp,20
    75f0:	f800283a 	ret
    75f4:	2c800417 	ldw	r18,16(r5)
    75f8:	903ff626 	beq	r18,zero,75d4 <__alt_data_end+0xff0075d4>
    75fc:	2c000017 	ldw	r16,0(r5)
    7600:	108000cc 	andi	r2,r2,3
    7604:	2c800015 	stw	r18,0(r5)
    7608:	84a1c83a 	sub	r16,r16,r18
    760c:	1000131e 	bne	r2,zero,765c <__sflush_r+0x158>
    7610:	28800517 	ldw	r2,20(r5)
    7614:	88800215 	stw	r2,8(r17)
    7618:	04000316 	blt	zero,r16,7628 <__sflush_r+0x124>
    761c:	003fed06 	br	75d4 <__alt_data_end+0xff0075d4>
    7620:	90a5883a 	add	r18,r18,r2
    7624:	043feb0e 	bge	zero,r16,75d4 <__alt_data_end+0xff0075d4>
    7628:	88800917 	ldw	r2,36(r17)
    762c:	89400717 	ldw	r5,28(r17)
    7630:	800f883a 	mov	r7,r16
    7634:	900d883a 	mov	r6,r18
    7638:	9809883a 	mov	r4,r19
    763c:	103ee83a 	callr	r2
    7640:	80a1c83a 	sub	r16,r16,r2
    7644:	00bff616 	blt	zero,r2,7620 <__alt_data_end+0xff007620>
    7648:	88c0030b 	ldhu	r3,12(r17)
    764c:	00bfffc4 	movi	r2,-1
    7650:	18c01014 	ori	r3,r3,64
    7654:	88c0030d 	sth	r3,12(r17)
    7658:	003fdf06 	br	75d8 <__alt_data_end+0xff0075d8>
    765c:	0005883a 	mov	r2,zero
    7660:	003fec06 	br	7614 <__alt_data_end+0xff007614>
    7664:	88801415 	stw	r2,80(r17)
    7668:	003fd206 	br	75b4 <__alt_data_end+0xff0075b4>
    766c:	28c00f17 	ldw	r3,60(r5)
    7670:	00ffb316 	blt	zero,r3,7540 <__alt_data_end+0xff007540>
    7674:	003fd706 	br	75d4 <__alt_data_end+0xff0075d4>
    7678:	89400717 	ldw	r5,28(r17)
    767c:	000d883a 	mov	r6,zero
    7680:	01c00044 	movi	r7,1
    7684:	9809883a 	mov	r4,r19
    7688:	403ee83a 	callr	r8
    768c:	100d883a 	mov	r6,r2
    7690:	00bfffc4 	movi	r2,-1
    7694:	30801426 	beq	r6,r2,76e8 <__sflush_r+0x1e4>
    7698:	8880030b 	ldhu	r2,12(r17)
    769c:	8a000a17 	ldw	r8,40(r17)
    76a0:	003fae06 	br	755c <__alt_data_end+0xff00755c>
    76a4:	98c00017 	ldw	r3,0(r19)
    76a8:	183fba26 	beq	r3,zero,7594 <__alt_data_end+0xff007594>
    76ac:	01000744 	movi	r4,29
    76b0:	19000626 	beq	r3,r4,76cc <__sflush_r+0x1c8>
    76b4:	01000584 	movi	r4,22
    76b8:	19000426 	beq	r3,r4,76cc <__sflush_r+0x1c8>
    76bc:	88c0030b 	ldhu	r3,12(r17)
    76c0:	18c01014 	ori	r3,r3,64
    76c4:	88c0030d 	sth	r3,12(r17)
    76c8:	003fc306 	br	75d8 <__alt_data_end+0xff0075d8>
    76cc:	8880030b 	ldhu	r2,12(r17)
    76d0:	88c00417 	ldw	r3,16(r17)
    76d4:	88000115 	stw	zero,4(r17)
    76d8:	10bdffcc 	andi	r2,r2,63487
    76dc:	8880030d 	sth	r2,12(r17)
    76e0:	88c00015 	stw	r3,0(r17)
    76e4:	003fb306 	br	75b4 <__alt_data_end+0xff0075b4>
    76e8:	98800017 	ldw	r2,0(r19)
    76ec:	103fea26 	beq	r2,zero,7698 <__alt_data_end+0xff007698>
    76f0:	00c00744 	movi	r3,29
    76f4:	10c00226 	beq	r2,r3,7700 <__sflush_r+0x1fc>
    76f8:	00c00584 	movi	r3,22
    76fc:	10c0031e 	bne	r2,r3,770c <__sflush_r+0x208>
    7700:	9c000015 	stw	r16,0(r19)
    7704:	0005883a 	mov	r2,zero
    7708:	003fb306 	br	75d8 <__alt_data_end+0xff0075d8>
    770c:	88c0030b 	ldhu	r3,12(r17)
    7710:	3005883a 	mov	r2,r6
    7714:	18c01014 	ori	r3,r3,64
    7718:	88c0030d 	sth	r3,12(r17)
    771c:	003fae06 	br	75d8 <__alt_data_end+0xff0075d8>

00007720 <_fflush_r>:
    7720:	defffd04 	addi	sp,sp,-12
    7724:	dc000115 	stw	r16,4(sp)
    7728:	dfc00215 	stw	ra,8(sp)
    772c:	2021883a 	mov	r16,r4
    7730:	20000226 	beq	r4,zero,773c <_fflush_r+0x1c>
    7734:	20800e17 	ldw	r2,56(r4)
    7738:	10000c26 	beq	r2,zero,776c <_fflush_r+0x4c>
    773c:	2880030f 	ldh	r2,12(r5)
    7740:	1000051e 	bne	r2,zero,7758 <_fflush_r+0x38>
    7744:	0005883a 	mov	r2,zero
    7748:	dfc00217 	ldw	ra,8(sp)
    774c:	dc000117 	ldw	r16,4(sp)
    7750:	dec00304 	addi	sp,sp,12
    7754:	f800283a 	ret
    7758:	8009883a 	mov	r4,r16
    775c:	dfc00217 	ldw	ra,8(sp)
    7760:	dc000117 	ldw	r16,4(sp)
    7764:	dec00304 	addi	sp,sp,12
    7768:	00075041 	jmpi	7504 <__sflush_r>
    776c:	d9400015 	stw	r5,0(sp)
    7770:	0007afc0 	call	7afc <__sinit>
    7774:	d9400017 	ldw	r5,0(sp)
    7778:	003ff006 	br	773c <__alt_data_end+0xff00773c>

0000777c <fflush>:
    777c:	20000526 	beq	r4,zero,7794 <fflush+0x18>
    7780:	00800074 	movhi	r2,1
    7784:	108e5d04 	addi	r2,r2,14708
    7788:	200b883a 	mov	r5,r4
    778c:	11000017 	ldw	r4,0(r2)
    7790:	00077201 	jmpi	7720 <_fflush_r>
    7794:	00800074 	movhi	r2,1
    7798:	108e5c04 	addi	r2,r2,14704
    779c:	11000017 	ldw	r4,0(r2)
    77a0:	01400034 	movhi	r5,0
    77a4:	295dc804 	addi	r5,r5,30496
    77a8:	00085001 	jmpi	8500 <_fwalk_reent>

000077ac <__fp_unlock>:
    77ac:	0005883a 	mov	r2,zero
    77b0:	f800283a 	ret

000077b4 <_cleanup_r>:
    77b4:	01400074 	movhi	r5,1
    77b8:	296f2e04 	addi	r5,r5,-17224
    77bc:	00085001 	jmpi	8500 <_fwalk_reent>

000077c0 <__sinit.part.1>:
    77c0:	defff704 	addi	sp,sp,-36
    77c4:	00c00034 	movhi	r3,0
    77c8:	dfc00815 	stw	ra,32(sp)
    77cc:	ddc00715 	stw	r23,28(sp)
    77d0:	dd800615 	stw	r22,24(sp)
    77d4:	dd400515 	stw	r21,20(sp)
    77d8:	dd000415 	stw	r20,16(sp)
    77dc:	dcc00315 	stw	r19,12(sp)
    77e0:	dc800215 	stw	r18,8(sp)
    77e4:	dc400115 	stw	r17,4(sp)
    77e8:	dc000015 	stw	r16,0(sp)
    77ec:	18dded04 	addi	r3,r3,30644
    77f0:	24000117 	ldw	r16,4(r4)
    77f4:	20c00f15 	stw	r3,60(r4)
    77f8:	2080bb04 	addi	r2,r4,748
    77fc:	00c000c4 	movi	r3,3
    7800:	20c0b915 	stw	r3,740(r4)
    7804:	2080ba15 	stw	r2,744(r4)
    7808:	2000b815 	stw	zero,736(r4)
    780c:	05c00204 	movi	r23,8
    7810:	00800104 	movi	r2,4
    7814:	2025883a 	mov	r18,r4
    7818:	b80d883a 	mov	r6,r23
    781c:	81001704 	addi	r4,r16,92
    7820:	000b883a 	mov	r5,zero
    7824:	80000015 	stw	zero,0(r16)
    7828:	80000115 	stw	zero,4(r16)
    782c:	80000215 	stw	zero,8(r16)
    7830:	8080030d 	sth	r2,12(r16)
    7834:	80001915 	stw	zero,100(r16)
    7838:	8000038d 	sth	zero,14(r16)
    783c:	80000415 	stw	zero,16(r16)
    7840:	80000515 	stw	zero,20(r16)
    7844:	80000615 	stw	zero,24(r16)
    7848:	0008be40 	call	8be4 <memset>
    784c:	05800074 	movhi	r22,1
    7850:	94400217 	ldw	r17,8(r18)
    7854:	05400074 	movhi	r21,1
    7858:	05000074 	movhi	r20,1
    785c:	04c00074 	movhi	r19,1
    7860:	b5a8b804 	addi	r22,r22,-23840
    7864:	ad68cf04 	addi	r21,r21,-23748
    7868:	a528ee04 	addi	r20,r20,-23624
    786c:	9ce90504 	addi	r19,r19,-23532
    7870:	85800815 	stw	r22,32(r16)
    7874:	85400915 	stw	r21,36(r16)
    7878:	85000a15 	stw	r20,40(r16)
    787c:	84c00b15 	stw	r19,44(r16)
    7880:	84000715 	stw	r16,28(r16)
    7884:	00800284 	movi	r2,10
    7888:	8880030d 	sth	r2,12(r17)
    788c:	00800044 	movi	r2,1
    7890:	b80d883a 	mov	r6,r23
    7894:	89001704 	addi	r4,r17,92
    7898:	000b883a 	mov	r5,zero
    789c:	88000015 	stw	zero,0(r17)
    78a0:	88000115 	stw	zero,4(r17)
    78a4:	88000215 	stw	zero,8(r17)
    78a8:	88001915 	stw	zero,100(r17)
    78ac:	8880038d 	sth	r2,14(r17)
    78b0:	88000415 	stw	zero,16(r17)
    78b4:	88000515 	stw	zero,20(r17)
    78b8:	88000615 	stw	zero,24(r17)
    78bc:	0008be40 	call	8be4 <memset>
    78c0:	94000317 	ldw	r16,12(r18)
    78c4:	00800484 	movi	r2,18
    78c8:	8c400715 	stw	r17,28(r17)
    78cc:	8d800815 	stw	r22,32(r17)
    78d0:	8d400915 	stw	r21,36(r17)
    78d4:	8d000a15 	stw	r20,40(r17)
    78d8:	8cc00b15 	stw	r19,44(r17)
    78dc:	8080030d 	sth	r2,12(r16)
    78e0:	00800084 	movi	r2,2
    78e4:	80000015 	stw	zero,0(r16)
    78e8:	80000115 	stw	zero,4(r16)
    78ec:	80000215 	stw	zero,8(r16)
    78f0:	80001915 	stw	zero,100(r16)
    78f4:	8080038d 	sth	r2,14(r16)
    78f8:	80000415 	stw	zero,16(r16)
    78fc:	80000515 	stw	zero,20(r16)
    7900:	80000615 	stw	zero,24(r16)
    7904:	b80d883a 	mov	r6,r23
    7908:	000b883a 	mov	r5,zero
    790c:	81001704 	addi	r4,r16,92
    7910:	0008be40 	call	8be4 <memset>
    7914:	00800044 	movi	r2,1
    7918:	84000715 	stw	r16,28(r16)
    791c:	85800815 	stw	r22,32(r16)
    7920:	85400915 	stw	r21,36(r16)
    7924:	85000a15 	stw	r20,40(r16)
    7928:	84c00b15 	stw	r19,44(r16)
    792c:	90800e15 	stw	r2,56(r18)
    7930:	dfc00817 	ldw	ra,32(sp)
    7934:	ddc00717 	ldw	r23,28(sp)
    7938:	dd800617 	ldw	r22,24(sp)
    793c:	dd400517 	ldw	r21,20(sp)
    7940:	dd000417 	ldw	r20,16(sp)
    7944:	dcc00317 	ldw	r19,12(sp)
    7948:	dc800217 	ldw	r18,8(sp)
    794c:	dc400117 	ldw	r17,4(sp)
    7950:	dc000017 	ldw	r16,0(sp)
    7954:	dec00904 	addi	sp,sp,36
    7958:	f800283a 	ret

0000795c <__fp_lock>:
    795c:	0005883a 	mov	r2,zero
    7960:	f800283a 	ret

00007964 <__sfmoreglue>:
    7964:	defffc04 	addi	sp,sp,-16
    7968:	dc400115 	stw	r17,4(sp)
    796c:	2c7fffc4 	addi	r17,r5,-1
    7970:	8c401a24 	muli	r17,r17,104
    7974:	dc800215 	stw	r18,8(sp)
    7978:	2825883a 	mov	r18,r5
    797c:	89401d04 	addi	r5,r17,116
    7980:	dc000015 	stw	r16,0(sp)
    7984:	dfc00315 	stw	ra,12(sp)
    7988:	0002e200 	call	2e20 <_malloc_r>
    798c:	1021883a 	mov	r16,r2
    7990:	10000726 	beq	r2,zero,79b0 <__sfmoreglue+0x4c>
    7994:	11000304 	addi	r4,r2,12
    7998:	10000015 	stw	zero,0(r2)
    799c:	14800115 	stw	r18,4(r2)
    79a0:	11000215 	stw	r4,8(r2)
    79a4:	89801a04 	addi	r6,r17,104
    79a8:	000b883a 	mov	r5,zero
    79ac:	0008be40 	call	8be4 <memset>
    79b0:	8005883a 	mov	r2,r16
    79b4:	dfc00317 	ldw	ra,12(sp)
    79b8:	dc800217 	ldw	r18,8(sp)
    79bc:	dc400117 	ldw	r17,4(sp)
    79c0:	dc000017 	ldw	r16,0(sp)
    79c4:	dec00404 	addi	sp,sp,16
    79c8:	f800283a 	ret

000079cc <__sfp>:
    79cc:	defffb04 	addi	sp,sp,-20
    79d0:	dc000015 	stw	r16,0(sp)
    79d4:	04000074 	movhi	r16,1
    79d8:	840e5c04 	addi	r16,r16,14704
    79dc:	dcc00315 	stw	r19,12(sp)
    79e0:	2027883a 	mov	r19,r4
    79e4:	81000017 	ldw	r4,0(r16)
    79e8:	dfc00415 	stw	ra,16(sp)
    79ec:	dc800215 	stw	r18,8(sp)
    79f0:	20800e17 	ldw	r2,56(r4)
    79f4:	dc400115 	stw	r17,4(sp)
    79f8:	1000021e 	bne	r2,zero,7a04 <__sfp+0x38>
    79fc:	00077c00 	call	77c0 <__sinit.part.1>
    7a00:	81000017 	ldw	r4,0(r16)
    7a04:	2480b804 	addi	r18,r4,736
    7a08:	047fffc4 	movi	r17,-1
    7a0c:	91000117 	ldw	r4,4(r18)
    7a10:	94000217 	ldw	r16,8(r18)
    7a14:	213fffc4 	addi	r4,r4,-1
    7a18:	20000a16 	blt	r4,zero,7a44 <__sfp+0x78>
    7a1c:	8080030f 	ldh	r2,12(r16)
    7a20:	10000c26 	beq	r2,zero,7a54 <__sfp+0x88>
    7a24:	80c01d04 	addi	r3,r16,116
    7a28:	00000206 	br	7a34 <__sfp+0x68>
    7a2c:	18bfe60f 	ldh	r2,-104(r3)
    7a30:	10000826 	beq	r2,zero,7a54 <__sfp+0x88>
    7a34:	213fffc4 	addi	r4,r4,-1
    7a38:	1c3ffd04 	addi	r16,r3,-12
    7a3c:	18c01a04 	addi	r3,r3,104
    7a40:	247ffa1e 	bne	r4,r17,7a2c <__alt_data_end+0xff007a2c>
    7a44:	90800017 	ldw	r2,0(r18)
    7a48:	10001d26 	beq	r2,zero,7ac0 <__sfp+0xf4>
    7a4c:	1025883a 	mov	r18,r2
    7a50:	003fee06 	br	7a0c <__alt_data_end+0xff007a0c>
    7a54:	00bfffc4 	movi	r2,-1
    7a58:	8080038d 	sth	r2,14(r16)
    7a5c:	00800044 	movi	r2,1
    7a60:	8080030d 	sth	r2,12(r16)
    7a64:	80001915 	stw	zero,100(r16)
    7a68:	80000015 	stw	zero,0(r16)
    7a6c:	80000215 	stw	zero,8(r16)
    7a70:	80000115 	stw	zero,4(r16)
    7a74:	80000415 	stw	zero,16(r16)
    7a78:	80000515 	stw	zero,20(r16)
    7a7c:	80000615 	stw	zero,24(r16)
    7a80:	01800204 	movi	r6,8
    7a84:	000b883a 	mov	r5,zero
    7a88:	81001704 	addi	r4,r16,92
    7a8c:	0008be40 	call	8be4 <memset>
    7a90:	8005883a 	mov	r2,r16
    7a94:	80000c15 	stw	zero,48(r16)
    7a98:	80000d15 	stw	zero,52(r16)
    7a9c:	80001115 	stw	zero,68(r16)
    7aa0:	80001215 	stw	zero,72(r16)
    7aa4:	dfc00417 	ldw	ra,16(sp)
    7aa8:	dcc00317 	ldw	r19,12(sp)
    7aac:	dc800217 	ldw	r18,8(sp)
    7ab0:	dc400117 	ldw	r17,4(sp)
    7ab4:	dc000017 	ldw	r16,0(sp)
    7ab8:	dec00504 	addi	sp,sp,20
    7abc:	f800283a 	ret
    7ac0:	01400104 	movi	r5,4
    7ac4:	9809883a 	mov	r4,r19
    7ac8:	00079640 	call	7964 <__sfmoreglue>
    7acc:	90800015 	stw	r2,0(r18)
    7ad0:	103fde1e 	bne	r2,zero,7a4c <__alt_data_end+0xff007a4c>
    7ad4:	00800304 	movi	r2,12
    7ad8:	98800015 	stw	r2,0(r19)
    7adc:	0005883a 	mov	r2,zero
    7ae0:	003ff006 	br	7aa4 <__alt_data_end+0xff007aa4>

00007ae4 <_cleanup>:
    7ae4:	00800074 	movhi	r2,1
    7ae8:	108e5c04 	addi	r2,r2,14704
    7aec:	11000017 	ldw	r4,0(r2)
    7af0:	01400074 	movhi	r5,1
    7af4:	296f2e04 	addi	r5,r5,-17224
    7af8:	00085001 	jmpi	8500 <_fwalk_reent>

00007afc <__sinit>:
    7afc:	20800e17 	ldw	r2,56(r4)
    7b00:	10000126 	beq	r2,zero,7b08 <__sinit+0xc>
    7b04:	f800283a 	ret
    7b08:	00077c01 	jmpi	77c0 <__sinit.part.1>

00007b0c <__sfp_lock_acquire>:
    7b0c:	f800283a 	ret

00007b10 <__sfp_lock_release>:
    7b10:	f800283a 	ret

00007b14 <__sinit_lock_acquire>:
    7b14:	f800283a 	ret

00007b18 <__sinit_lock_release>:
    7b18:	f800283a 	ret

00007b1c <__fp_lock_all>:
    7b1c:	00800074 	movhi	r2,1
    7b20:	108e5d04 	addi	r2,r2,14708
    7b24:	11000017 	ldw	r4,0(r2)
    7b28:	01400034 	movhi	r5,0
    7b2c:	295e5704 	addi	r5,r5,31068
    7b30:	000843c1 	jmpi	843c <_fwalk>

00007b34 <__fp_unlock_all>:
    7b34:	00800074 	movhi	r2,1
    7b38:	108e5d04 	addi	r2,r2,14708
    7b3c:	11000017 	ldw	r4,0(r2)
    7b40:	01400034 	movhi	r5,0
    7b44:	295deb04 	addi	r5,r5,30636
    7b48:	000843c1 	jmpi	843c <_fwalk>

00007b4c <_malloc_trim_r>:
    7b4c:	defffb04 	addi	sp,sp,-20
    7b50:	dcc00315 	stw	r19,12(sp)
    7b54:	04c00074 	movhi	r19,1
    7b58:	dc800215 	stw	r18,8(sp)
    7b5c:	dc400115 	stw	r17,4(sp)
    7b60:	dc000015 	stw	r16,0(sp)
    7b64:	dfc00415 	stw	ra,16(sp)
    7b68:	2821883a 	mov	r16,r5
    7b6c:	9cc7af04 	addi	r19,r19,7868
    7b70:	2025883a 	mov	r18,r4
    7b74:	000f1140 	call	f114 <__malloc_lock>
    7b78:	98800217 	ldw	r2,8(r19)
    7b7c:	14400117 	ldw	r17,4(r2)
    7b80:	00bfff04 	movi	r2,-4
    7b84:	88a2703a 	and	r17,r17,r2
    7b88:	8c21c83a 	sub	r16,r17,r16
    7b8c:	8403fbc4 	addi	r16,r16,4079
    7b90:	8020d33a 	srli	r16,r16,12
    7b94:	0083ffc4 	movi	r2,4095
    7b98:	843fffc4 	addi	r16,r16,-1
    7b9c:	8020933a 	slli	r16,r16,12
    7ba0:	1400060e 	bge	r2,r16,7bbc <_malloc_trim_r+0x70>
    7ba4:	000b883a 	mov	r5,zero
    7ba8:	9009883a 	mov	r4,r18
    7bac:	000376c0 	call	376c <_sbrk_r>
    7bb0:	98c00217 	ldw	r3,8(r19)
    7bb4:	1c47883a 	add	r3,r3,r17
    7bb8:	10c00a26 	beq	r2,r3,7be4 <_malloc_trim_r+0x98>
    7bbc:	9009883a 	mov	r4,r18
    7bc0:	000f1380 	call	f138 <__malloc_unlock>
    7bc4:	0005883a 	mov	r2,zero
    7bc8:	dfc00417 	ldw	ra,16(sp)
    7bcc:	dcc00317 	ldw	r19,12(sp)
    7bd0:	dc800217 	ldw	r18,8(sp)
    7bd4:	dc400117 	ldw	r17,4(sp)
    7bd8:	dc000017 	ldw	r16,0(sp)
    7bdc:	dec00504 	addi	sp,sp,20
    7be0:	f800283a 	ret
    7be4:	040bc83a 	sub	r5,zero,r16
    7be8:	9009883a 	mov	r4,r18
    7bec:	000376c0 	call	376c <_sbrk_r>
    7bf0:	00ffffc4 	movi	r3,-1
    7bf4:	10c00d26 	beq	r2,r3,7c2c <_malloc_trim_r+0xe0>
    7bf8:	00c00074 	movhi	r3,1
    7bfc:	18d58a04 	addi	r3,r3,22056
    7c00:	18800017 	ldw	r2,0(r3)
    7c04:	99000217 	ldw	r4,8(r19)
    7c08:	8c23c83a 	sub	r17,r17,r16
    7c0c:	8c400054 	ori	r17,r17,1
    7c10:	1421c83a 	sub	r16,r2,r16
    7c14:	24400115 	stw	r17,4(r4)
    7c18:	9009883a 	mov	r4,r18
    7c1c:	1c000015 	stw	r16,0(r3)
    7c20:	000f1380 	call	f138 <__malloc_unlock>
    7c24:	00800044 	movi	r2,1
    7c28:	003fe706 	br	7bc8 <__alt_data_end+0xff007bc8>
    7c2c:	000b883a 	mov	r5,zero
    7c30:	9009883a 	mov	r4,r18
    7c34:	000376c0 	call	376c <_sbrk_r>
    7c38:	99000217 	ldw	r4,8(r19)
    7c3c:	014003c4 	movi	r5,15
    7c40:	1107c83a 	sub	r3,r2,r4
    7c44:	28ffdd0e 	bge	r5,r3,7bbc <__alt_data_end+0xff007bbc>
    7c48:	01400074 	movhi	r5,1
    7c4c:	294e5a04 	addi	r5,r5,14696
    7c50:	29400017 	ldw	r5,0(r5)
    7c54:	18c00054 	ori	r3,r3,1
    7c58:	20c00115 	stw	r3,4(r4)
    7c5c:	00c00074 	movhi	r3,1
    7c60:	1145c83a 	sub	r2,r2,r5
    7c64:	18d58a04 	addi	r3,r3,22056
    7c68:	18800015 	stw	r2,0(r3)
    7c6c:	003fd306 	br	7bbc <__alt_data_end+0xff007bbc>

00007c70 <_free_r>:
    7c70:	28004126 	beq	r5,zero,7d78 <_free_r+0x108>
    7c74:	defffd04 	addi	sp,sp,-12
    7c78:	dc400115 	stw	r17,4(sp)
    7c7c:	dc000015 	stw	r16,0(sp)
    7c80:	2023883a 	mov	r17,r4
    7c84:	2821883a 	mov	r16,r5
    7c88:	dfc00215 	stw	ra,8(sp)
    7c8c:	000f1140 	call	f114 <__malloc_lock>
    7c90:	81ffff17 	ldw	r7,-4(r16)
    7c94:	00bfff84 	movi	r2,-2
    7c98:	01000074 	movhi	r4,1
    7c9c:	81bffe04 	addi	r6,r16,-8
    7ca0:	3884703a 	and	r2,r7,r2
    7ca4:	2107af04 	addi	r4,r4,7868
    7ca8:	308b883a 	add	r5,r6,r2
    7cac:	2a400117 	ldw	r9,4(r5)
    7cb0:	22000217 	ldw	r8,8(r4)
    7cb4:	00ffff04 	movi	r3,-4
    7cb8:	48c6703a 	and	r3,r9,r3
    7cbc:	2a005726 	beq	r5,r8,7e1c <_free_r+0x1ac>
    7cc0:	28c00115 	stw	r3,4(r5)
    7cc4:	39c0004c 	andi	r7,r7,1
    7cc8:	3800091e 	bne	r7,zero,7cf0 <_free_r+0x80>
    7ccc:	823ffe17 	ldw	r8,-8(r16)
    7cd0:	22400204 	addi	r9,r4,8
    7cd4:	320dc83a 	sub	r6,r6,r8
    7cd8:	31c00217 	ldw	r7,8(r6)
    7cdc:	1205883a 	add	r2,r2,r8
    7ce0:	3a406526 	beq	r7,r9,7e78 <_free_r+0x208>
    7ce4:	32000317 	ldw	r8,12(r6)
    7ce8:	3a000315 	stw	r8,12(r7)
    7cec:	41c00215 	stw	r7,8(r8)
    7cf0:	28cf883a 	add	r7,r5,r3
    7cf4:	39c00117 	ldw	r7,4(r7)
    7cf8:	39c0004c 	andi	r7,r7,1
    7cfc:	38003a26 	beq	r7,zero,7de8 <_free_r+0x178>
    7d00:	10c00054 	ori	r3,r2,1
    7d04:	30c00115 	stw	r3,4(r6)
    7d08:	3087883a 	add	r3,r6,r2
    7d0c:	18800015 	stw	r2,0(r3)
    7d10:	00c07fc4 	movi	r3,511
    7d14:	18801936 	bltu	r3,r2,7d7c <_free_r+0x10c>
    7d18:	1004d0fa 	srli	r2,r2,3
    7d1c:	01c00044 	movi	r7,1
    7d20:	21400117 	ldw	r5,4(r4)
    7d24:	10c00044 	addi	r3,r2,1
    7d28:	18c7883a 	add	r3,r3,r3
    7d2c:	1005d0ba 	srai	r2,r2,2
    7d30:	18c7883a 	add	r3,r3,r3
    7d34:	18c7883a 	add	r3,r3,r3
    7d38:	1907883a 	add	r3,r3,r4
    7d3c:	3884983a 	sll	r2,r7,r2
    7d40:	19c00017 	ldw	r7,0(r3)
    7d44:	1a3ffe04 	addi	r8,r3,-8
    7d48:	1144b03a 	or	r2,r2,r5
    7d4c:	32000315 	stw	r8,12(r6)
    7d50:	31c00215 	stw	r7,8(r6)
    7d54:	20800115 	stw	r2,4(r4)
    7d58:	19800015 	stw	r6,0(r3)
    7d5c:	39800315 	stw	r6,12(r7)
    7d60:	8809883a 	mov	r4,r17
    7d64:	dfc00217 	ldw	ra,8(sp)
    7d68:	dc400117 	ldw	r17,4(sp)
    7d6c:	dc000017 	ldw	r16,0(sp)
    7d70:	dec00304 	addi	sp,sp,12
    7d74:	000f1381 	jmpi	f138 <__malloc_unlock>
    7d78:	f800283a 	ret
    7d7c:	100ad27a 	srli	r5,r2,9
    7d80:	00c00104 	movi	r3,4
    7d84:	19404a36 	bltu	r3,r5,7eb0 <_free_r+0x240>
    7d88:	100ad1ba 	srli	r5,r2,6
    7d8c:	28c00e44 	addi	r3,r5,57
    7d90:	18c7883a 	add	r3,r3,r3
    7d94:	29400e04 	addi	r5,r5,56
    7d98:	18c7883a 	add	r3,r3,r3
    7d9c:	18c7883a 	add	r3,r3,r3
    7da0:	1909883a 	add	r4,r3,r4
    7da4:	20c00017 	ldw	r3,0(r4)
    7da8:	01c00074 	movhi	r7,1
    7dac:	213ffe04 	addi	r4,r4,-8
    7db0:	39c7af04 	addi	r7,r7,7868
    7db4:	20c04426 	beq	r4,r3,7ec8 <_free_r+0x258>
    7db8:	01ffff04 	movi	r7,-4
    7dbc:	19400117 	ldw	r5,4(r3)
    7dc0:	29ca703a 	and	r5,r5,r7
    7dc4:	1140022e 	bgeu	r2,r5,7dd0 <_free_r+0x160>
    7dc8:	18c00217 	ldw	r3,8(r3)
    7dcc:	20fffb1e 	bne	r4,r3,7dbc <__alt_data_end+0xff007dbc>
    7dd0:	19000317 	ldw	r4,12(r3)
    7dd4:	31000315 	stw	r4,12(r6)
    7dd8:	30c00215 	stw	r3,8(r6)
    7ddc:	21800215 	stw	r6,8(r4)
    7de0:	19800315 	stw	r6,12(r3)
    7de4:	003fde06 	br	7d60 <__alt_data_end+0xff007d60>
    7de8:	29c00217 	ldw	r7,8(r5)
    7dec:	10c5883a 	add	r2,r2,r3
    7df0:	00c00074 	movhi	r3,1
    7df4:	18c7b104 	addi	r3,r3,7876
    7df8:	38c03b26 	beq	r7,r3,7ee8 <_free_r+0x278>
    7dfc:	2a000317 	ldw	r8,12(r5)
    7e00:	11400054 	ori	r5,r2,1
    7e04:	3087883a 	add	r3,r6,r2
    7e08:	3a000315 	stw	r8,12(r7)
    7e0c:	41c00215 	stw	r7,8(r8)
    7e10:	31400115 	stw	r5,4(r6)
    7e14:	18800015 	stw	r2,0(r3)
    7e18:	003fbd06 	br	7d10 <__alt_data_end+0xff007d10>
    7e1c:	39c0004c 	andi	r7,r7,1
    7e20:	10c5883a 	add	r2,r2,r3
    7e24:	3800071e 	bne	r7,zero,7e44 <_free_r+0x1d4>
    7e28:	81fffe17 	ldw	r7,-8(r16)
    7e2c:	31cdc83a 	sub	r6,r6,r7
    7e30:	30c00317 	ldw	r3,12(r6)
    7e34:	31400217 	ldw	r5,8(r6)
    7e38:	11c5883a 	add	r2,r2,r7
    7e3c:	28c00315 	stw	r3,12(r5)
    7e40:	19400215 	stw	r5,8(r3)
    7e44:	10c00054 	ori	r3,r2,1
    7e48:	30c00115 	stw	r3,4(r6)
    7e4c:	00c00074 	movhi	r3,1
    7e50:	18ce5b04 	addi	r3,r3,14700
    7e54:	18c00017 	ldw	r3,0(r3)
    7e58:	21800215 	stw	r6,8(r4)
    7e5c:	10ffc036 	bltu	r2,r3,7d60 <__alt_data_end+0xff007d60>
    7e60:	00800074 	movhi	r2,1
    7e64:	10957c04 	addi	r2,r2,22000
    7e68:	11400017 	ldw	r5,0(r2)
    7e6c:	8809883a 	mov	r4,r17
    7e70:	0007b4c0 	call	7b4c <_malloc_trim_r>
    7e74:	003fba06 	br	7d60 <__alt_data_end+0xff007d60>
    7e78:	28c9883a 	add	r4,r5,r3
    7e7c:	21000117 	ldw	r4,4(r4)
    7e80:	2100004c 	andi	r4,r4,1
    7e84:	2000391e 	bne	r4,zero,7f6c <_free_r+0x2fc>
    7e88:	29c00217 	ldw	r7,8(r5)
    7e8c:	29000317 	ldw	r4,12(r5)
    7e90:	1885883a 	add	r2,r3,r2
    7e94:	10c00054 	ori	r3,r2,1
    7e98:	39000315 	stw	r4,12(r7)
    7e9c:	21c00215 	stw	r7,8(r4)
    7ea0:	30c00115 	stw	r3,4(r6)
    7ea4:	308d883a 	add	r6,r6,r2
    7ea8:	30800015 	stw	r2,0(r6)
    7eac:	003fac06 	br	7d60 <__alt_data_end+0xff007d60>
    7eb0:	00c00504 	movi	r3,20
    7eb4:	19401536 	bltu	r3,r5,7f0c <_free_r+0x29c>
    7eb8:	28c01704 	addi	r3,r5,92
    7ebc:	18c7883a 	add	r3,r3,r3
    7ec0:	294016c4 	addi	r5,r5,91
    7ec4:	003fb406 	br	7d98 <__alt_data_end+0xff007d98>
    7ec8:	280bd0ba 	srai	r5,r5,2
    7ecc:	00c00044 	movi	r3,1
    7ed0:	38800117 	ldw	r2,4(r7)
    7ed4:	194a983a 	sll	r5,r3,r5
    7ed8:	2007883a 	mov	r3,r4
    7edc:	2884b03a 	or	r2,r5,r2
    7ee0:	38800115 	stw	r2,4(r7)
    7ee4:	003fbb06 	br	7dd4 <__alt_data_end+0xff007dd4>
    7ee8:	21800515 	stw	r6,20(r4)
    7eec:	21800415 	stw	r6,16(r4)
    7ef0:	10c00054 	ori	r3,r2,1
    7ef4:	31c00315 	stw	r7,12(r6)
    7ef8:	31c00215 	stw	r7,8(r6)
    7efc:	30c00115 	stw	r3,4(r6)
    7f00:	308d883a 	add	r6,r6,r2
    7f04:	30800015 	stw	r2,0(r6)
    7f08:	003f9506 	br	7d60 <__alt_data_end+0xff007d60>
    7f0c:	00c01504 	movi	r3,84
    7f10:	19400536 	bltu	r3,r5,7f28 <_free_r+0x2b8>
    7f14:	100ad33a 	srli	r5,r2,12
    7f18:	28c01bc4 	addi	r3,r5,111
    7f1c:	18c7883a 	add	r3,r3,r3
    7f20:	29401b84 	addi	r5,r5,110
    7f24:	003f9c06 	br	7d98 <__alt_data_end+0xff007d98>
    7f28:	00c05504 	movi	r3,340
    7f2c:	19400536 	bltu	r3,r5,7f44 <_free_r+0x2d4>
    7f30:	100ad3fa 	srli	r5,r2,15
    7f34:	28c01e04 	addi	r3,r5,120
    7f38:	18c7883a 	add	r3,r3,r3
    7f3c:	29401dc4 	addi	r5,r5,119
    7f40:	003f9506 	br	7d98 <__alt_data_end+0xff007d98>
    7f44:	00c15504 	movi	r3,1364
    7f48:	19400536 	bltu	r3,r5,7f60 <_free_r+0x2f0>
    7f4c:	100ad4ba 	srli	r5,r2,18
    7f50:	28c01f44 	addi	r3,r5,125
    7f54:	18c7883a 	add	r3,r3,r3
    7f58:	29401f04 	addi	r5,r5,124
    7f5c:	003f8e06 	br	7d98 <__alt_data_end+0xff007d98>
    7f60:	00c03f84 	movi	r3,254
    7f64:	01401f84 	movi	r5,126
    7f68:	003f8b06 	br	7d98 <__alt_data_end+0xff007d98>
    7f6c:	10c00054 	ori	r3,r2,1
    7f70:	30c00115 	stw	r3,4(r6)
    7f74:	308d883a 	add	r6,r6,r2
    7f78:	30800015 	stw	r2,0(r6)
    7f7c:	003f7806 	br	7d60 <__alt_data_end+0xff007d60>

00007f80 <__sfvwrite_r>:
    7f80:	30800217 	ldw	r2,8(r6)
    7f84:	10006726 	beq	r2,zero,8124 <__sfvwrite_r+0x1a4>
    7f88:	28c0030b 	ldhu	r3,12(r5)
    7f8c:	defff404 	addi	sp,sp,-48
    7f90:	dd400715 	stw	r21,28(sp)
    7f94:	dd000615 	stw	r20,24(sp)
    7f98:	dc000215 	stw	r16,8(sp)
    7f9c:	dfc00b15 	stw	ra,44(sp)
    7fa0:	df000a15 	stw	fp,40(sp)
    7fa4:	ddc00915 	stw	r23,36(sp)
    7fa8:	dd800815 	stw	r22,32(sp)
    7fac:	dcc00515 	stw	r19,20(sp)
    7fb0:	dc800415 	stw	r18,16(sp)
    7fb4:	dc400315 	stw	r17,12(sp)
    7fb8:	1880020c 	andi	r2,r3,8
    7fbc:	2821883a 	mov	r16,r5
    7fc0:	202b883a 	mov	r21,r4
    7fc4:	3029883a 	mov	r20,r6
    7fc8:	10002726 	beq	r2,zero,8068 <__sfvwrite_r+0xe8>
    7fcc:	28800417 	ldw	r2,16(r5)
    7fd0:	10002526 	beq	r2,zero,8068 <__sfvwrite_r+0xe8>
    7fd4:	1880008c 	andi	r2,r3,2
    7fd8:	a4400017 	ldw	r17,0(r20)
    7fdc:	10002a26 	beq	r2,zero,8088 <__sfvwrite_r+0x108>
    7fe0:	05a00034 	movhi	r22,32768
    7fe4:	0027883a 	mov	r19,zero
    7fe8:	0025883a 	mov	r18,zero
    7fec:	b5bf0004 	addi	r22,r22,-1024
    7ff0:	980d883a 	mov	r6,r19
    7ff4:	a809883a 	mov	r4,r21
    7ff8:	90004626 	beq	r18,zero,8114 <__sfvwrite_r+0x194>
    7ffc:	900f883a 	mov	r7,r18
    8000:	b480022e 	bgeu	r22,r18,800c <__sfvwrite_r+0x8c>
    8004:	01e00034 	movhi	r7,32768
    8008:	39ff0004 	addi	r7,r7,-1024
    800c:	80800917 	ldw	r2,36(r16)
    8010:	81400717 	ldw	r5,28(r16)
    8014:	103ee83a 	callr	r2
    8018:	0080570e 	bge	zero,r2,8178 <__sfvwrite_r+0x1f8>
    801c:	a0c00217 	ldw	r3,8(r20)
    8020:	98a7883a 	add	r19,r19,r2
    8024:	90a5c83a 	sub	r18,r18,r2
    8028:	1885c83a 	sub	r2,r3,r2
    802c:	a0800215 	stw	r2,8(r20)
    8030:	103fef1e 	bne	r2,zero,7ff0 <__alt_data_end+0xff007ff0>
    8034:	0005883a 	mov	r2,zero
    8038:	dfc00b17 	ldw	ra,44(sp)
    803c:	df000a17 	ldw	fp,40(sp)
    8040:	ddc00917 	ldw	r23,36(sp)
    8044:	dd800817 	ldw	r22,32(sp)
    8048:	dd400717 	ldw	r21,28(sp)
    804c:	dd000617 	ldw	r20,24(sp)
    8050:	dcc00517 	ldw	r19,20(sp)
    8054:	dc800417 	ldw	r18,16(sp)
    8058:	dc400317 	ldw	r17,12(sp)
    805c:	dc000217 	ldw	r16,8(sp)
    8060:	dec00c04 	addi	sp,sp,48
    8064:	f800283a 	ret
    8068:	800b883a 	mov	r5,r16
    806c:	a809883a 	mov	r4,r21
    8070:	0005b280 	call	5b28 <__swsetup_r>
    8074:	1000eb1e 	bne	r2,zero,8424 <__sfvwrite_r+0x4a4>
    8078:	80c0030b 	ldhu	r3,12(r16)
    807c:	a4400017 	ldw	r17,0(r20)
    8080:	1880008c 	andi	r2,r3,2
    8084:	103fd61e 	bne	r2,zero,7fe0 <__alt_data_end+0xff007fe0>
    8088:	1880004c 	andi	r2,r3,1
    808c:	10003f1e 	bne	r2,zero,818c <__sfvwrite_r+0x20c>
    8090:	0039883a 	mov	fp,zero
    8094:	0025883a 	mov	r18,zero
    8098:	90001a26 	beq	r18,zero,8104 <__sfvwrite_r+0x184>
    809c:	1880800c 	andi	r2,r3,512
    80a0:	84c00217 	ldw	r19,8(r16)
    80a4:	10002126 	beq	r2,zero,812c <__sfvwrite_r+0x1ac>
    80a8:	982f883a 	mov	r23,r19
    80ac:	94c09336 	bltu	r18,r19,82fc <__sfvwrite_r+0x37c>
    80b0:	1881200c 	andi	r2,r3,1152
    80b4:	10009e1e 	bne	r2,zero,8330 <__sfvwrite_r+0x3b0>
    80b8:	81000017 	ldw	r4,0(r16)
    80bc:	b80d883a 	mov	r6,r23
    80c0:	e00b883a 	mov	r5,fp
    80c4:	0008a880 	call	8a88 <memmove>
    80c8:	80c00217 	ldw	r3,8(r16)
    80cc:	81000017 	ldw	r4,0(r16)
    80d0:	9005883a 	mov	r2,r18
    80d4:	1ce7c83a 	sub	r19,r3,r19
    80d8:	25cf883a 	add	r7,r4,r23
    80dc:	84c00215 	stw	r19,8(r16)
    80e0:	81c00015 	stw	r7,0(r16)
    80e4:	a0c00217 	ldw	r3,8(r20)
    80e8:	e0b9883a 	add	fp,fp,r2
    80ec:	90a5c83a 	sub	r18,r18,r2
    80f0:	18a7c83a 	sub	r19,r3,r2
    80f4:	a4c00215 	stw	r19,8(r20)
    80f8:	983fce26 	beq	r19,zero,8034 <__alt_data_end+0xff008034>
    80fc:	80c0030b 	ldhu	r3,12(r16)
    8100:	903fe61e 	bne	r18,zero,809c <__alt_data_end+0xff00809c>
    8104:	8f000017 	ldw	fp,0(r17)
    8108:	8c800117 	ldw	r18,4(r17)
    810c:	8c400204 	addi	r17,r17,8
    8110:	003fe106 	br	8098 <__alt_data_end+0xff008098>
    8114:	8cc00017 	ldw	r19,0(r17)
    8118:	8c800117 	ldw	r18,4(r17)
    811c:	8c400204 	addi	r17,r17,8
    8120:	003fb306 	br	7ff0 <__alt_data_end+0xff007ff0>
    8124:	0005883a 	mov	r2,zero
    8128:	f800283a 	ret
    812c:	81000017 	ldw	r4,0(r16)
    8130:	80800417 	ldw	r2,16(r16)
    8134:	11005736 	bltu	r2,r4,8294 <__sfvwrite_r+0x314>
    8138:	85c00517 	ldw	r23,20(r16)
    813c:	95c05536 	bltu	r18,r23,8294 <__sfvwrite_r+0x314>
    8140:	00a00034 	movhi	r2,32768
    8144:	10bfffc4 	addi	r2,r2,-1
    8148:	9009883a 	mov	r4,r18
    814c:	1480012e 	bgeu	r2,r18,8154 <__sfvwrite_r+0x1d4>
    8150:	1009883a 	mov	r4,r2
    8154:	b80b883a 	mov	r5,r23
    8158:	00022500 	call	2250 <__divsi3>
    815c:	15cf383a 	mul	r7,r2,r23
    8160:	81400717 	ldw	r5,28(r16)
    8164:	80800917 	ldw	r2,36(r16)
    8168:	e00d883a 	mov	r6,fp
    816c:	a809883a 	mov	r4,r21
    8170:	103ee83a 	callr	r2
    8174:	00bfdb16 	blt	zero,r2,80e4 <__alt_data_end+0xff0080e4>
    8178:	8080030b 	ldhu	r2,12(r16)
    817c:	10801014 	ori	r2,r2,64
    8180:	8080030d 	sth	r2,12(r16)
    8184:	00bfffc4 	movi	r2,-1
    8188:	003fab06 	br	8038 <__alt_data_end+0xff008038>
    818c:	0027883a 	mov	r19,zero
    8190:	0011883a 	mov	r8,zero
    8194:	0039883a 	mov	fp,zero
    8198:	0025883a 	mov	r18,zero
    819c:	90001f26 	beq	r18,zero,821c <__sfvwrite_r+0x29c>
    81a0:	40005a26 	beq	r8,zero,830c <__sfvwrite_r+0x38c>
    81a4:	982d883a 	mov	r22,r19
    81a8:	94c0012e 	bgeu	r18,r19,81b0 <__sfvwrite_r+0x230>
    81ac:	902d883a 	mov	r22,r18
    81b0:	81000017 	ldw	r4,0(r16)
    81b4:	80800417 	ldw	r2,16(r16)
    81b8:	b02f883a 	mov	r23,r22
    81bc:	81c00517 	ldw	r7,20(r16)
    81c0:	1100032e 	bgeu	r2,r4,81d0 <__sfvwrite_r+0x250>
    81c4:	80c00217 	ldw	r3,8(r16)
    81c8:	38c7883a 	add	r3,r7,r3
    81cc:	1d801816 	blt	r3,r22,8230 <__sfvwrite_r+0x2b0>
    81d0:	b1c03e16 	blt	r22,r7,82cc <__sfvwrite_r+0x34c>
    81d4:	80800917 	ldw	r2,36(r16)
    81d8:	81400717 	ldw	r5,28(r16)
    81dc:	e00d883a 	mov	r6,fp
    81e0:	da000115 	stw	r8,4(sp)
    81e4:	a809883a 	mov	r4,r21
    81e8:	103ee83a 	callr	r2
    81ec:	102f883a 	mov	r23,r2
    81f0:	da000117 	ldw	r8,4(sp)
    81f4:	00bfe00e 	bge	zero,r2,8178 <__alt_data_end+0xff008178>
    81f8:	9de7c83a 	sub	r19,r19,r23
    81fc:	98001f26 	beq	r19,zero,827c <__sfvwrite_r+0x2fc>
    8200:	a0800217 	ldw	r2,8(r20)
    8204:	e5f9883a 	add	fp,fp,r23
    8208:	95e5c83a 	sub	r18,r18,r23
    820c:	15efc83a 	sub	r23,r2,r23
    8210:	a5c00215 	stw	r23,8(r20)
    8214:	b83f8726 	beq	r23,zero,8034 <__alt_data_end+0xff008034>
    8218:	903fe11e 	bne	r18,zero,81a0 <__alt_data_end+0xff0081a0>
    821c:	8f000017 	ldw	fp,0(r17)
    8220:	8c800117 	ldw	r18,4(r17)
    8224:	0011883a 	mov	r8,zero
    8228:	8c400204 	addi	r17,r17,8
    822c:	003fdb06 	br	819c <__alt_data_end+0xff00819c>
    8230:	180d883a 	mov	r6,r3
    8234:	e00b883a 	mov	r5,fp
    8238:	da000115 	stw	r8,4(sp)
    823c:	d8c00015 	stw	r3,0(sp)
    8240:	0008a880 	call	8a88 <memmove>
    8244:	d8c00017 	ldw	r3,0(sp)
    8248:	80800017 	ldw	r2,0(r16)
    824c:	800b883a 	mov	r5,r16
    8250:	a809883a 	mov	r4,r21
    8254:	10c5883a 	add	r2,r2,r3
    8258:	80800015 	stw	r2,0(r16)
    825c:	d8c00015 	stw	r3,0(sp)
    8260:	00077200 	call	7720 <_fflush_r>
    8264:	d8c00017 	ldw	r3,0(sp)
    8268:	da000117 	ldw	r8,4(sp)
    826c:	103fc21e 	bne	r2,zero,8178 <__alt_data_end+0xff008178>
    8270:	182f883a 	mov	r23,r3
    8274:	9de7c83a 	sub	r19,r19,r23
    8278:	983fe11e 	bne	r19,zero,8200 <__alt_data_end+0xff008200>
    827c:	800b883a 	mov	r5,r16
    8280:	a809883a 	mov	r4,r21
    8284:	00077200 	call	7720 <_fflush_r>
    8288:	103fbb1e 	bne	r2,zero,8178 <__alt_data_end+0xff008178>
    828c:	0011883a 	mov	r8,zero
    8290:	003fdb06 	br	8200 <__alt_data_end+0xff008200>
    8294:	94c0012e 	bgeu	r18,r19,829c <__sfvwrite_r+0x31c>
    8298:	9027883a 	mov	r19,r18
    829c:	980d883a 	mov	r6,r19
    82a0:	e00b883a 	mov	r5,fp
    82a4:	0008a880 	call	8a88 <memmove>
    82a8:	80800217 	ldw	r2,8(r16)
    82ac:	80c00017 	ldw	r3,0(r16)
    82b0:	14c5c83a 	sub	r2,r2,r19
    82b4:	1cc7883a 	add	r3,r3,r19
    82b8:	80800215 	stw	r2,8(r16)
    82bc:	80c00015 	stw	r3,0(r16)
    82c0:	10004326 	beq	r2,zero,83d0 <__sfvwrite_r+0x450>
    82c4:	9805883a 	mov	r2,r19
    82c8:	003f8606 	br	80e4 <__alt_data_end+0xff0080e4>
    82cc:	b00d883a 	mov	r6,r22
    82d0:	e00b883a 	mov	r5,fp
    82d4:	da000115 	stw	r8,4(sp)
    82d8:	0008a880 	call	8a88 <memmove>
    82dc:	80800217 	ldw	r2,8(r16)
    82e0:	80c00017 	ldw	r3,0(r16)
    82e4:	da000117 	ldw	r8,4(sp)
    82e8:	1585c83a 	sub	r2,r2,r22
    82ec:	1dad883a 	add	r22,r3,r22
    82f0:	80800215 	stw	r2,8(r16)
    82f4:	85800015 	stw	r22,0(r16)
    82f8:	003fbf06 	br	81f8 <__alt_data_end+0xff0081f8>
    82fc:	81000017 	ldw	r4,0(r16)
    8300:	9027883a 	mov	r19,r18
    8304:	902f883a 	mov	r23,r18
    8308:	003f6c06 	br	80bc <__alt_data_end+0xff0080bc>
    830c:	900d883a 	mov	r6,r18
    8310:	01400284 	movi	r5,10
    8314:	e009883a 	mov	r4,fp
    8318:	000885c0 	call	885c <memchr>
    831c:	10003e26 	beq	r2,zero,8418 <__sfvwrite_r+0x498>
    8320:	10800044 	addi	r2,r2,1
    8324:	1727c83a 	sub	r19,r2,fp
    8328:	02000044 	movi	r8,1
    832c:	003f9d06 	br	81a4 <__alt_data_end+0xff0081a4>
    8330:	80800517 	ldw	r2,20(r16)
    8334:	81400417 	ldw	r5,16(r16)
    8338:	81c00017 	ldw	r7,0(r16)
    833c:	10a7883a 	add	r19,r2,r2
    8340:	9885883a 	add	r2,r19,r2
    8344:	1026d7fa 	srli	r19,r2,31
    8348:	396dc83a 	sub	r22,r7,r5
    834c:	b1000044 	addi	r4,r22,1
    8350:	9885883a 	add	r2,r19,r2
    8354:	1027d07a 	srai	r19,r2,1
    8358:	2485883a 	add	r2,r4,r18
    835c:	980d883a 	mov	r6,r19
    8360:	9880022e 	bgeu	r19,r2,836c <__sfvwrite_r+0x3ec>
    8364:	1027883a 	mov	r19,r2
    8368:	100d883a 	mov	r6,r2
    836c:	18c1000c 	andi	r3,r3,1024
    8370:	18001c26 	beq	r3,zero,83e4 <__sfvwrite_r+0x464>
    8374:	300b883a 	mov	r5,r6
    8378:	a809883a 	mov	r4,r21
    837c:	0002e200 	call	2e20 <_malloc_r>
    8380:	102f883a 	mov	r23,r2
    8384:	10002926 	beq	r2,zero,842c <__sfvwrite_r+0x4ac>
    8388:	81400417 	ldw	r5,16(r16)
    838c:	b00d883a 	mov	r6,r22
    8390:	1009883a 	mov	r4,r2
    8394:	00089400 	call	8940 <memcpy>
    8398:	8080030b 	ldhu	r2,12(r16)
    839c:	00fedfc4 	movi	r3,-1153
    83a0:	10c4703a 	and	r2,r2,r3
    83a4:	10802014 	ori	r2,r2,128
    83a8:	8080030d 	sth	r2,12(r16)
    83ac:	bd89883a 	add	r4,r23,r22
    83b0:	9d8fc83a 	sub	r7,r19,r22
    83b4:	85c00415 	stw	r23,16(r16)
    83b8:	84c00515 	stw	r19,20(r16)
    83bc:	81000015 	stw	r4,0(r16)
    83c0:	9027883a 	mov	r19,r18
    83c4:	81c00215 	stw	r7,8(r16)
    83c8:	902f883a 	mov	r23,r18
    83cc:	003f3b06 	br	80bc <__alt_data_end+0xff0080bc>
    83d0:	800b883a 	mov	r5,r16
    83d4:	a809883a 	mov	r4,r21
    83d8:	00077200 	call	7720 <_fflush_r>
    83dc:	103fb926 	beq	r2,zero,82c4 <__alt_data_end+0xff0082c4>
    83e0:	003f6506 	br	8178 <__alt_data_end+0xff008178>
    83e4:	a809883a 	mov	r4,r21
    83e8:	0009d080 	call	9d08 <_realloc_r>
    83ec:	102f883a 	mov	r23,r2
    83f0:	103fee1e 	bne	r2,zero,83ac <__alt_data_end+0xff0083ac>
    83f4:	81400417 	ldw	r5,16(r16)
    83f8:	a809883a 	mov	r4,r21
    83fc:	0007c700 	call	7c70 <_free_r>
    8400:	8080030b 	ldhu	r2,12(r16)
    8404:	00ffdfc4 	movi	r3,-129
    8408:	1884703a 	and	r2,r3,r2
    840c:	00c00304 	movi	r3,12
    8410:	a8c00015 	stw	r3,0(r21)
    8414:	003f5906 	br	817c <__alt_data_end+0xff00817c>
    8418:	94c00044 	addi	r19,r18,1
    841c:	02000044 	movi	r8,1
    8420:	003f6006 	br	81a4 <__alt_data_end+0xff0081a4>
    8424:	00bfffc4 	movi	r2,-1
    8428:	003f0306 	br	8038 <__alt_data_end+0xff008038>
    842c:	00800304 	movi	r2,12
    8430:	a8800015 	stw	r2,0(r21)
    8434:	8080030b 	ldhu	r2,12(r16)
    8438:	003f5006 	br	817c <__alt_data_end+0xff00817c>

0000843c <_fwalk>:
    843c:	defff704 	addi	sp,sp,-36
    8440:	dd000415 	stw	r20,16(sp)
    8444:	dfc00815 	stw	ra,32(sp)
    8448:	ddc00715 	stw	r23,28(sp)
    844c:	dd800615 	stw	r22,24(sp)
    8450:	dd400515 	stw	r21,20(sp)
    8454:	dcc00315 	stw	r19,12(sp)
    8458:	dc800215 	stw	r18,8(sp)
    845c:	dc400115 	stw	r17,4(sp)
    8460:	dc000015 	stw	r16,0(sp)
    8464:	2500b804 	addi	r20,r4,736
    8468:	a0002326 	beq	r20,zero,84f8 <_fwalk+0xbc>
    846c:	282b883a 	mov	r21,r5
    8470:	002f883a 	mov	r23,zero
    8474:	05800044 	movi	r22,1
    8478:	04ffffc4 	movi	r19,-1
    847c:	a4400117 	ldw	r17,4(r20)
    8480:	a4800217 	ldw	r18,8(r20)
    8484:	8c7fffc4 	addi	r17,r17,-1
    8488:	88000d16 	blt	r17,zero,84c0 <_fwalk+0x84>
    848c:	94000304 	addi	r16,r18,12
    8490:	94800384 	addi	r18,r18,14
    8494:	8080000b 	ldhu	r2,0(r16)
    8498:	8c7fffc4 	addi	r17,r17,-1
    849c:	813ffd04 	addi	r4,r16,-12
    84a0:	b080042e 	bgeu	r22,r2,84b4 <_fwalk+0x78>
    84a4:	9080000f 	ldh	r2,0(r18)
    84a8:	14c00226 	beq	r2,r19,84b4 <_fwalk+0x78>
    84ac:	a83ee83a 	callr	r21
    84b0:	b8aeb03a 	or	r23,r23,r2
    84b4:	84001a04 	addi	r16,r16,104
    84b8:	94801a04 	addi	r18,r18,104
    84bc:	8cfff51e 	bne	r17,r19,8494 <__alt_data_end+0xff008494>
    84c0:	a5000017 	ldw	r20,0(r20)
    84c4:	a03fed1e 	bne	r20,zero,847c <__alt_data_end+0xff00847c>
    84c8:	b805883a 	mov	r2,r23
    84cc:	dfc00817 	ldw	ra,32(sp)
    84d0:	ddc00717 	ldw	r23,28(sp)
    84d4:	dd800617 	ldw	r22,24(sp)
    84d8:	dd400517 	ldw	r21,20(sp)
    84dc:	dd000417 	ldw	r20,16(sp)
    84e0:	dcc00317 	ldw	r19,12(sp)
    84e4:	dc800217 	ldw	r18,8(sp)
    84e8:	dc400117 	ldw	r17,4(sp)
    84ec:	dc000017 	ldw	r16,0(sp)
    84f0:	dec00904 	addi	sp,sp,36
    84f4:	f800283a 	ret
    84f8:	002f883a 	mov	r23,zero
    84fc:	003ff206 	br	84c8 <__alt_data_end+0xff0084c8>

00008500 <_fwalk_reent>:
    8500:	defff704 	addi	sp,sp,-36
    8504:	dd000415 	stw	r20,16(sp)
    8508:	dfc00815 	stw	ra,32(sp)
    850c:	ddc00715 	stw	r23,28(sp)
    8510:	dd800615 	stw	r22,24(sp)
    8514:	dd400515 	stw	r21,20(sp)
    8518:	dcc00315 	stw	r19,12(sp)
    851c:	dc800215 	stw	r18,8(sp)
    8520:	dc400115 	stw	r17,4(sp)
    8524:	dc000015 	stw	r16,0(sp)
    8528:	2500b804 	addi	r20,r4,736
    852c:	a0002326 	beq	r20,zero,85bc <_fwalk_reent+0xbc>
    8530:	282b883a 	mov	r21,r5
    8534:	2027883a 	mov	r19,r4
    8538:	002f883a 	mov	r23,zero
    853c:	05800044 	movi	r22,1
    8540:	04bfffc4 	movi	r18,-1
    8544:	a4400117 	ldw	r17,4(r20)
    8548:	a4000217 	ldw	r16,8(r20)
    854c:	8c7fffc4 	addi	r17,r17,-1
    8550:	88000c16 	blt	r17,zero,8584 <_fwalk_reent+0x84>
    8554:	84000304 	addi	r16,r16,12
    8558:	8080000b 	ldhu	r2,0(r16)
    855c:	8c7fffc4 	addi	r17,r17,-1
    8560:	817ffd04 	addi	r5,r16,-12
    8564:	b080052e 	bgeu	r22,r2,857c <_fwalk_reent+0x7c>
    8568:	8080008f 	ldh	r2,2(r16)
    856c:	9809883a 	mov	r4,r19
    8570:	14800226 	beq	r2,r18,857c <_fwalk_reent+0x7c>
    8574:	a83ee83a 	callr	r21
    8578:	b8aeb03a 	or	r23,r23,r2
    857c:	84001a04 	addi	r16,r16,104
    8580:	8cbff51e 	bne	r17,r18,8558 <__alt_data_end+0xff008558>
    8584:	a5000017 	ldw	r20,0(r20)
    8588:	a03fee1e 	bne	r20,zero,8544 <__alt_data_end+0xff008544>
    858c:	b805883a 	mov	r2,r23
    8590:	dfc00817 	ldw	ra,32(sp)
    8594:	ddc00717 	ldw	r23,28(sp)
    8598:	dd800617 	ldw	r22,24(sp)
    859c:	dd400517 	ldw	r21,20(sp)
    85a0:	dd000417 	ldw	r20,16(sp)
    85a4:	dcc00317 	ldw	r19,12(sp)
    85a8:	dc800217 	ldw	r18,8(sp)
    85ac:	dc400117 	ldw	r17,4(sp)
    85b0:	dc000017 	ldw	r16,0(sp)
    85b4:	dec00904 	addi	sp,sp,36
    85b8:	f800283a 	ret
    85bc:	002f883a 	mov	r23,zero
    85c0:	003ff206 	br	858c <__alt_data_end+0xff00858c>

000085c4 <_setlocale_r>:
    85c4:	30001b26 	beq	r6,zero,8634 <_setlocale_r+0x70>
    85c8:	01400074 	movhi	r5,1
    85cc:	defffe04 	addi	sp,sp,-8
    85d0:	29471004 	addi	r5,r5,7232
    85d4:	3009883a 	mov	r4,r6
    85d8:	dc000015 	stw	r16,0(sp)
    85dc:	dfc00115 	stw	ra,4(sp)
    85e0:	3021883a 	mov	r16,r6
    85e4:	000a41c0 	call	a41c <strcmp>
    85e8:	1000061e 	bne	r2,zero,8604 <_setlocale_r+0x40>
    85ec:	00800074 	movhi	r2,1
    85f0:	10870f04 	addi	r2,r2,7228
    85f4:	dfc00117 	ldw	ra,4(sp)
    85f8:	dc000017 	ldw	r16,0(sp)
    85fc:	dec00204 	addi	sp,sp,8
    8600:	f800283a 	ret
    8604:	01400074 	movhi	r5,1
    8608:	29470f04 	addi	r5,r5,7228
    860c:	8009883a 	mov	r4,r16
    8610:	000a41c0 	call	a41c <strcmp>
    8614:	103ff526 	beq	r2,zero,85ec <__alt_data_end+0xff0085ec>
    8618:	01400074 	movhi	r5,1
    861c:	2946fa04 	addi	r5,r5,7144
    8620:	8009883a 	mov	r4,r16
    8624:	000a41c0 	call	a41c <strcmp>
    8628:	103ff026 	beq	r2,zero,85ec <__alt_data_end+0xff0085ec>
    862c:	0005883a 	mov	r2,zero
    8630:	003ff006 	br	85f4 <__alt_data_end+0xff0085f4>
    8634:	00800074 	movhi	r2,1
    8638:	10870f04 	addi	r2,r2,7228
    863c:	f800283a 	ret

00008640 <__locale_charset>:
    8640:	00800074 	movhi	r2,1
    8644:	1089c204 	addi	r2,r2,9992
    8648:	f800283a 	ret

0000864c <__locale_mb_cur_max>:
    864c:	00800074 	movhi	r2,1
    8650:	108e5e04 	addi	r2,r2,14712
    8654:	10800017 	ldw	r2,0(r2)
    8658:	f800283a 	ret

0000865c <__locale_msgcharset>:
    865c:	00800074 	movhi	r2,1
    8660:	1089ba04 	addi	r2,r2,9960
    8664:	f800283a 	ret

00008668 <__locale_cjk_lang>:
    8668:	0005883a 	mov	r2,zero
    866c:	f800283a 	ret

00008670 <_localeconv_r>:
    8670:	00800074 	movhi	r2,1
    8674:	1089ca04 	addi	r2,r2,10024
    8678:	f800283a 	ret

0000867c <setlocale>:
    867c:	00800074 	movhi	r2,1
    8680:	108e5d04 	addi	r2,r2,14708
    8684:	280d883a 	mov	r6,r5
    8688:	200b883a 	mov	r5,r4
    868c:	11000017 	ldw	r4,0(r2)
    8690:	00085c41 	jmpi	85c4 <_setlocale_r>

00008694 <localeconv>:
    8694:	00800074 	movhi	r2,1
    8698:	1089ca04 	addi	r2,r2,10024
    869c:	f800283a 	ret

000086a0 <__smakebuf_r>:
    86a0:	2880030b 	ldhu	r2,12(r5)
    86a4:	10c0008c 	andi	r3,r2,2
    86a8:	1800411e 	bne	r3,zero,87b0 <__smakebuf_r+0x110>
    86ac:	deffec04 	addi	sp,sp,-80
    86b0:	dc000f15 	stw	r16,60(sp)
    86b4:	2821883a 	mov	r16,r5
    86b8:	2940038f 	ldh	r5,14(r5)
    86bc:	dc401015 	stw	r17,64(sp)
    86c0:	dfc01315 	stw	ra,76(sp)
    86c4:	dcc01215 	stw	r19,72(sp)
    86c8:	dc801115 	stw	r18,68(sp)
    86cc:	2023883a 	mov	r17,r4
    86d0:	28001c16 	blt	r5,zero,8744 <__smakebuf_r+0xa4>
    86d4:	d80d883a 	mov	r6,sp
    86d8:	000bfc40 	call	bfc4 <_fstat_r>
    86dc:	10001816 	blt	r2,zero,8740 <__smakebuf_r+0xa0>
    86e0:	d8800117 	ldw	r2,4(sp)
    86e4:	00e00014 	movui	r3,32768
    86e8:	10bc000c 	andi	r2,r2,61440
    86ec:	14c80020 	cmpeqi	r19,r2,8192
    86f0:	10c03726 	beq	r2,r3,87d0 <__smakebuf_r+0x130>
    86f4:	80c0030b 	ldhu	r3,12(r16)
    86f8:	18c20014 	ori	r3,r3,2048
    86fc:	80c0030d 	sth	r3,12(r16)
    8700:	00c80004 	movi	r3,8192
    8704:	10c0521e 	bne	r2,r3,8850 <__smakebuf_r+0x1b0>
    8708:	8140038f 	ldh	r5,14(r16)
    870c:	8809883a 	mov	r4,r17
    8710:	000c0200 	call	c020 <_isatty_r>
    8714:	10004c26 	beq	r2,zero,8848 <__smakebuf_r+0x1a8>
    8718:	8080030b 	ldhu	r2,12(r16)
    871c:	80c010c4 	addi	r3,r16,67
    8720:	80c00015 	stw	r3,0(r16)
    8724:	10800054 	ori	r2,r2,1
    8728:	8080030d 	sth	r2,12(r16)
    872c:	00800044 	movi	r2,1
    8730:	80c00415 	stw	r3,16(r16)
    8734:	80800515 	stw	r2,20(r16)
    8738:	04810004 	movi	r18,1024
    873c:	00000706 	br	875c <__smakebuf_r+0xbc>
    8740:	8080030b 	ldhu	r2,12(r16)
    8744:	10c0200c 	andi	r3,r2,128
    8748:	18001f1e 	bne	r3,zero,87c8 <__smakebuf_r+0x128>
    874c:	04810004 	movi	r18,1024
    8750:	10820014 	ori	r2,r2,2048
    8754:	8080030d 	sth	r2,12(r16)
    8758:	0027883a 	mov	r19,zero
    875c:	900b883a 	mov	r5,r18
    8760:	8809883a 	mov	r4,r17
    8764:	0002e200 	call	2e20 <_malloc_r>
    8768:	10002c26 	beq	r2,zero,881c <__smakebuf_r+0x17c>
    876c:	80c0030b 	ldhu	r3,12(r16)
    8770:	01000034 	movhi	r4,0
    8774:	211ded04 	addi	r4,r4,30644
    8778:	89000f15 	stw	r4,60(r17)
    877c:	18c02014 	ori	r3,r3,128
    8780:	80c0030d 	sth	r3,12(r16)
    8784:	80800015 	stw	r2,0(r16)
    8788:	80800415 	stw	r2,16(r16)
    878c:	84800515 	stw	r18,20(r16)
    8790:	98001a1e 	bne	r19,zero,87fc <__smakebuf_r+0x15c>
    8794:	dfc01317 	ldw	ra,76(sp)
    8798:	dcc01217 	ldw	r19,72(sp)
    879c:	dc801117 	ldw	r18,68(sp)
    87a0:	dc401017 	ldw	r17,64(sp)
    87a4:	dc000f17 	ldw	r16,60(sp)
    87a8:	dec01404 	addi	sp,sp,80
    87ac:	f800283a 	ret
    87b0:	288010c4 	addi	r2,r5,67
    87b4:	28800015 	stw	r2,0(r5)
    87b8:	28800415 	stw	r2,16(r5)
    87bc:	00800044 	movi	r2,1
    87c0:	28800515 	stw	r2,20(r5)
    87c4:	f800283a 	ret
    87c8:	04801004 	movi	r18,64
    87cc:	003fe006 	br	8750 <__alt_data_end+0xff008750>
    87d0:	81000a17 	ldw	r4,40(r16)
    87d4:	00c00074 	movhi	r3,1
    87d8:	18e8ee04 	addi	r3,r3,-23624
    87dc:	20ffc51e 	bne	r4,r3,86f4 <__alt_data_end+0xff0086f4>
    87e0:	8080030b 	ldhu	r2,12(r16)
    87e4:	04810004 	movi	r18,1024
    87e8:	84801315 	stw	r18,76(r16)
    87ec:	1484b03a 	or	r2,r2,r18
    87f0:	8080030d 	sth	r2,12(r16)
    87f4:	0027883a 	mov	r19,zero
    87f8:	003fd806 	br	875c <__alt_data_end+0xff00875c>
    87fc:	8140038f 	ldh	r5,14(r16)
    8800:	8809883a 	mov	r4,r17
    8804:	000c0200 	call	c020 <_isatty_r>
    8808:	103fe226 	beq	r2,zero,8794 <__alt_data_end+0xff008794>
    880c:	8080030b 	ldhu	r2,12(r16)
    8810:	10800054 	ori	r2,r2,1
    8814:	8080030d 	sth	r2,12(r16)
    8818:	003fde06 	br	8794 <__alt_data_end+0xff008794>
    881c:	8080030b 	ldhu	r2,12(r16)
    8820:	10c0800c 	andi	r3,r2,512
    8824:	183fdb1e 	bne	r3,zero,8794 <__alt_data_end+0xff008794>
    8828:	10800094 	ori	r2,r2,2
    882c:	80c010c4 	addi	r3,r16,67
    8830:	8080030d 	sth	r2,12(r16)
    8834:	00800044 	movi	r2,1
    8838:	80c00015 	stw	r3,0(r16)
    883c:	80c00415 	stw	r3,16(r16)
    8840:	80800515 	stw	r2,20(r16)
    8844:	003fd306 	br	8794 <__alt_data_end+0xff008794>
    8848:	04810004 	movi	r18,1024
    884c:	003fc306 	br	875c <__alt_data_end+0xff00875c>
    8850:	0027883a 	mov	r19,zero
    8854:	04810004 	movi	r18,1024
    8858:	003fc006 	br	875c <__alt_data_end+0xff00875c>

0000885c <memchr>:
    885c:	208000cc 	andi	r2,r4,3
    8860:	280f883a 	mov	r7,r5
    8864:	10003426 	beq	r2,zero,8938 <memchr+0xdc>
    8868:	30bfffc4 	addi	r2,r6,-1
    886c:	30001a26 	beq	r6,zero,88d8 <memchr+0x7c>
    8870:	20c00003 	ldbu	r3,0(r4)
    8874:	29803fcc 	andi	r6,r5,255
    8878:	30c0051e 	bne	r6,r3,8890 <memchr+0x34>
    887c:	00001806 	br	88e0 <memchr+0x84>
    8880:	10001526 	beq	r2,zero,88d8 <memchr+0x7c>
    8884:	20c00003 	ldbu	r3,0(r4)
    8888:	10bfffc4 	addi	r2,r2,-1
    888c:	30c01426 	beq	r6,r3,88e0 <memchr+0x84>
    8890:	21000044 	addi	r4,r4,1
    8894:	20c000cc 	andi	r3,r4,3
    8898:	183ff91e 	bne	r3,zero,8880 <__alt_data_end+0xff008880>
    889c:	020000c4 	movi	r8,3
    88a0:	40801136 	bltu	r8,r2,88e8 <memchr+0x8c>
    88a4:	10000c26 	beq	r2,zero,88d8 <memchr+0x7c>
    88a8:	20c00003 	ldbu	r3,0(r4)
    88ac:	29403fcc 	andi	r5,r5,255
    88b0:	28c00b26 	beq	r5,r3,88e0 <memchr+0x84>
    88b4:	20c00044 	addi	r3,r4,1
    88b8:	39803fcc 	andi	r6,r7,255
    88bc:	2089883a 	add	r4,r4,r2
    88c0:	00000306 	br	88d0 <memchr+0x74>
    88c4:	18c00044 	addi	r3,r3,1
    88c8:	197fffc3 	ldbu	r5,-1(r3)
    88cc:	31400526 	beq	r6,r5,88e4 <memchr+0x88>
    88d0:	1805883a 	mov	r2,r3
    88d4:	20fffb1e 	bne	r4,r3,88c4 <__alt_data_end+0xff0088c4>
    88d8:	0005883a 	mov	r2,zero
    88dc:	f800283a 	ret
    88e0:	2005883a 	mov	r2,r4
    88e4:	f800283a 	ret
    88e8:	28c03fcc 	andi	r3,r5,255
    88ec:	1812923a 	slli	r9,r3,8
    88f0:	02ffbff4 	movhi	r11,65279
    88f4:	02a02074 	movhi	r10,32897
    88f8:	48d2b03a 	or	r9,r9,r3
    88fc:	4806943a 	slli	r3,r9,16
    8900:	5affbfc4 	addi	r11,r11,-257
    8904:	52a02004 	addi	r10,r10,-32640
    8908:	48d2b03a 	or	r9,r9,r3
    890c:	20c00017 	ldw	r3,0(r4)
    8910:	48c6f03a 	xor	r3,r9,r3
    8914:	1acd883a 	add	r6,r3,r11
    8918:	00c6303a 	nor	r3,zero,r3
    891c:	30c6703a 	and	r3,r6,r3
    8920:	1a86703a 	and	r3,r3,r10
    8924:	183fe01e 	bne	r3,zero,88a8 <__alt_data_end+0xff0088a8>
    8928:	10bfff04 	addi	r2,r2,-4
    892c:	21000104 	addi	r4,r4,4
    8930:	40bff636 	bltu	r8,r2,890c <__alt_data_end+0xff00890c>
    8934:	003fdb06 	br	88a4 <__alt_data_end+0xff0088a4>
    8938:	3005883a 	mov	r2,r6
    893c:	003fd706 	br	889c <__alt_data_end+0xff00889c>

00008940 <memcpy>:
    8940:	defffd04 	addi	sp,sp,-12
    8944:	dfc00215 	stw	ra,8(sp)
    8948:	dc400115 	stw	r17,4(sp)
    894c:	dc000015 	stw	r16,0(sp)
    8950:	00c003c4 	movi	r3,15
    8954:	2005883a 	mov	r2,r4
    8958:	1980452e 	bgeu	r3,r6,8a70 <memcpy+0x130>
    895c:	2906b03a 	or	r3,r5,r4
    8960:	18c000cc 	andi	r3,r3,3
    8964:	1800441e 	bne	r3,zero,8a78 <memcpy+0x138>
    8968:	347ffc04 	addi	r17,r6,-16
    896c:	8822d13a 	srli	r17,r17,4
    8970:	28c00104 	addi	r3,r5,4
    8974:	23400104 	addi	r13,r4,4
    8978:	8820913a 	slli	r16,r17,4
    897c:	2b000204 	addi	r12,r5,8
    8980:	22c00204 	addi	r11,r4,8
    8984:	84000504 	addi	r16,r16,20
    8988:	2a800304 	addi	r10,r5,12
    898c:	22400304 	addi	r9,r4,12
    8990:	2c21883a 	add	r16,r5,r16
    8994:	2811883a 	mov	r8,r5
    8998:	200f883a 	mov	r7,r4
    899c:	41000017 	ldw	r4,0(r8)
    89a0:	1fc00017 	ldw	ra,0(r3)
    89a4:	63c00017 	ldw	r15,0(r12)
    89a8:	39000015 	stw	r4,0(r7)
    89ac:	53800017 	ldw	r14,0(r10)
    89b0:	6fc00015 	stw	ra,0(r13)
    89b4:	5bc00015 	stw	r15,0(r11)
    89b8:	4b800015 	stw	r14,0(r9)
    89bc:	18c00404 	addi	r3,r3,16
    89c0:	39c00404 	addi	r7,r7,16
    89c4:	42000404 	addi	r8,r8,16
    89c8:	6b400404 	addi	r13,r13,16
    89cc:	63000404 	addi	r12,r12,16
    89d0:	5ac00404 	addi	r11,r11,16
    89d4:	52800404 	addi	r10,r10,16
    89d8:	4a400404 	addi	r9,r9,16
    89dc:	1c3fef1e 	bne	r3,r16,899c <__alt_data_end+0xff00899c>
    89e0:	89c00044 	addi	r7,r17,1
    89e4:	380e913a 	slli	r7,r7,4
    89e8:	310003cc 	andi	r4,r6,15
    89ec:	02c000c4 	movi	r11,3
    89f0:	11c7883a 	add	r3,r2,r7
    89f4:	29cb883a 	add	r5,r5,r7
    89f8:	5900212e 	bgeu	r11,r4,8a80 <memcpy+0x140>
    89fc:	1813883a 	mov	r9,r3
    8a00:	2811883a 	mov	r8,r5
    8a04:	200f883a 	mov	r7,r4
    8a08:	42800017 	ldw	r10,0(r8)
    8a0c:	4a400104 	addi	r9,r9,4
    8a10:	39ffff04 	addi	r7,r7,-4
    8a14:	4abfff15 	stw	r10,-4(r9)
    8a18:	42000104 	addi	r8,r8,4
    8a1c:	59fffa36 	bltu	r11,r7,8a08 <__alt_data_end+0xff008a08>
    8a20:	213fff04 	addi	r4,r4,-4
    8a24:	2008d0ba 	srli	r4,r4,2
    8a28:	318000cc 	andi	r6,r6,3
    8a2c:	21000044 	addi	r4,r4,1
    8a30:	2109883a 	add	r4,r4,r4
    8a34:	2109883a 	add	r4,r4,r4
    8a38:	1907883a 	add	r3,r3,r4
    8a3c:	290b883a 	add	r5,r5,r4
    8a40:	30000626 	beq	r6,zero,8a5c <memcpy+0x11c>
    8a44:	198d883a 	add	r6,r3,r6
    8a48:	29c00003 	ldbu	r7,0(r5)
    8a4c:	18c00044 	addi	r3,r3,1
    8a50:	29400044 	addi	r5,r5,1
    8a54:	19ffffc5 	stb	r7,-1(r3)
    8a58:	19bffb1e 	bne	r3,r6,8a48 <__alt_data_end+0xff008a48>
    8a5c:	dfc00217 	ldw	ra,8(sp)
    8a60:	dc400117 	ldw	r17,4(sp)
    8a64:	dc000017 	ldw	r16,0(sp)
    8a68:	dec00304 	addi	sp,sp,12
    8a6c:	f800283a 	ret
    8a70:	2007883a 	mov	r3,r4
    8a74:	003ff206 	br	8a40 <__alt_data_end+0xff008a40>
    8a78:	2007883a 	mov	r3,r4
    8a7c:	003ff106 	br	8a44 <__alt_data_end+0xff008a44>
    8a80:	200d883a 	mov	r6,r4
    8a84:	003fee06 	br	8a40 <__alt_data_end+0xff008a40>

00008a88 <memmove>:
    8a88:	2005883a 	mov	r2,r4
    8a8c:	29000b2e 	bgeu	r5,r4,8abc <memmove+0x34>
    8a90:	298f883a 	add	r7,r5,r6
    8a94:	21c0092e 	bgeu	r4,r7,8abc <memmove+0x34>
    8a98:	2187883a 	add	r3,r4,r6
    8a9c:	198bc83a 	sub	r5,r3,r6
    8aa0:	30004826 	beq	r6,zero,8bc4 <memmove+0x13c>
    8aa4:	39ffffc4 	addi	r7,r7,-1
    8aa8:	39000003 	ldbu	r4,0(r7)
    8aac:	18ffffc4 	addi	r3,r3,-1
    8ab0:	19000005 	stb	r4,0(r3)
    8ab4:	28fffb1e 	bne	r5,r3,8aa4 <__alt_data_end+0xff008aa4>
    8ab8:	f800283a 	ret
    8abc:	00c003c4 	movi	r3,15
    8ac0:	1980412e 	bgeu	r3,r6,8bc8 <memmove+0x140>
    8ac4:	2886b03a 	or	r3,r5,r2
    8ac8:	18c000cc 	andi	r3,r3,3
    8acc:	1800401e 	bne	r3,zero,8bd0 <memmove+0x148>
    8ad0:	33fffc04 	addi	r15,r6,-16
    8ad4:	781ed13a 	srli	r15,r15,4
    8ad8:	28c00104 	addi	r3,r5,4
    8adc:	13400104 	addi	r13,r2,4
    8ae0:	781c913a 	slli	r14,r15,4
    8ae4:	2b000204 	addi	r12,r5,8
    8ae8:	12c00204 	addi	r11,r2,8
    8aec:	73800504 	addi	r14,r14,20
    8af0:	2a800304 	addi	r10,r5,12
    8af4:	12400304 	addi	r9,r2,12
    8af8:	2b9d883a 	add	r14,r5,r14
    8afc:	2811883a 	mov	r8,r5
    8b00:	100f883a 	mov	r7,r2
    8b04:	41000017 	ldw	r4,0(r8)
    8b08:	39c00404 	addi	r7,r7,16
    8b0c:	18c00404 	addi	r3,r3,16
    8b10:	393ffc15 	stw	r4,-16(r7)
    8b14:	193ffc17 	ldw	r4,-16(r3)
    8b18:	6b400404 	addi	r13,r13,16
    8b1c:	5ac00404 	addi	r11,r11,16
    8b20:	693ffc15 	stw	r4,-16(r13)
    8b24:	61000017 	ldw	r4,0(r12)
    8b28:	4a400404 	addi	r9,r9,16
    8b2c:	42000404 	addi	r8,r8,16
    8b30:	593ffc15 	stw	r4,-16(r11)
    8b34:	51000017 	ldw	r4,0(r10)
    8b38:	63000404 	addi	r12,r12,16
    8b3c:	52800404 	addi	r10,r10,16
    8b40:	493ffc15 	stw	r4,-16(r9)
    8b44:	1bbfef1e 	bne	r3,r14,8b04 <__alt_data_end+0xff008b04>
    8b48:	79000044 	addi	r4,r15,1
    8b4c:	2008913a 	slli	r4,r4,4
    8b50:	328003cc 	andi	r10,r6,15
    8b54:	02c000c4 	movi	r11,3
    8b58:	1107883a 	add	r3,r2,r4
    8b5c:	290b883a 	add	r5,r5,r4
    8b60:	5a801e2e 	bgeu	r11,r10,8bdc <memmove+0x154>
    8b64:	1813883a 	mov	r9,r3
    8b68:	2811883a 	mov	r8,r5
    8b6c:	500f883a 	mov	r7,r10
    8b70:	41000017 	ldw	r4,0(r8)
    8b74:	4a400104 	addi	r9,r9,4
    8b78:	39ffff04 	addi	r7,r7,-4
    8b7c:	493fff15 	stw	r4,-4(r9)
    8b80:	42000104 	addi	r8,r8,4
    8b84:	59fffa36 	bltu	r11,r7,8b70 <__alt_data_end+0xff008b70>
    8b88:	513fff04 	addi	r4,r10,-4
    8b8c:	2008d0ba 	srli	r4,r4,2
    8b90:	318000cc 	andi	r6,r6,3
    8b94:	21000044 	addi	r4,r4,1
    8b98:	2109883a 	add	r4,r4,r4
    8b9c:	2109883a 	add	r4,r4,r4
    8ba0:	1907883a 	add	r3,r3,r4
    8ba4:	290b883a 	add	r5,r5,r4
    8ba8:	30000b26 	beq	r6,zero,8bd8 <memmove+0x150>
    8bac:	198d883a 	add	r6,r3,r6
    8bb0:	29c00003 	ldbu	r7,0(r5)
    8bb4:	18c00044 	addi	r3,r3,1
    8bb8:	29400044 	addi	r5,r5,1
    8bbc:	19ffffc5 	stb	r7,-1(r3)
    8bc0:	19bffb1e 	bne	r3,r6,8bb0 <__alt_data_end+0xff008bb0>
    8bc4:	f800283a 	ret
    8bc8:	1007883a 	mov	r3,r2
    8bcc:	003ff606 	br	8ba8 <__alt_data_end+0xff008ba8>
    8bd0:	1007883a 	mov	r3,r2
    8bd4:	003ff506 	br	8bac <__alt_data_end+0xff008bac>
    8bd8:	f800283a 	ret
    8bdc:	500d883a 	mov	r6,r10
    8be0:	003ff106 	br	8ba8 <__alt_data_end+0xff008ba8>

00008be4 <memset>:
    8be4:	20c000cc 	andi	r3,r4,3
    8be8:	2005883a 	mov	r2,r4
    8bec:	18004426 	beq	r3,zero,8d00 <memset+0x11c>
    8bf0:	31ffffc4 	addi	r7,r6,-1
    8bf4:	30004026 	beq	r6,zero,8cf8 <memset+0x114>
    8bf8:	2813883a 	mov	r9,r5
    8bfc:	200d883a 	mov	r6,r4
    8c00:	2007883a 	mov	r3,r4
    8c04:	00000406 	br	8c18 <memset+0x34>
    8c08:	3a3fffc4 	addi	r8,r7,-1
    8c0c:	31800044 	addi	r6,r6,1
    8c10:	38003926 	beq	r7,zero,8cf8 <memset+0x114>
    8c14:	400f883a 	mov	r7,r8
    8c18:	18c00044 	addi	r3,r3,1
    8c1c:	32400005 	stb	r9,0(r6)
    8c20:	1a0000cc 	andi	r8,r3,3
    8c24:	403ff81e 	bne	r8,zero,8c08 <__alt_data_end+0xff008c08>
    8c28:	010000c4 	movi	r4,3
    8c2c:	21c02d2e 	bgeu	r4,r7,8ce4 <memset+0x100>
    8c30:	29003fcc 	andi	r4,r5,255
    8c34:	200c923a 	slli	r6,r4,8
    8c38:	3108b03a 	or	r4,r6,r4
    8c3c:	200c943a 	slli	r6,r4,16
    8c40:	218cb03a 	or	r6,r4,r6
    8c44:	010003c4 	movi	r4,15
    8c48:	21c0182e 	bgeu	r4,r7,8cac <memset+0xc8>
    8c4c:	3b3ffc04 	addi	r12,r7,-16
    8c50:	6018d13a 	srli	r12,r12,4
    8c54:	1a000104 	addi	r8,r3,4
    8c58:	1ac00204 	addi	r11,r3,8
    8c5c:	6008913a 	slli	r4,r12,4
    8c60:	1a800304 	addi	r10,r3,12
    8c64:	1813883a 	mov	r9,r3
    8c68:	21000504 	addi	r4,r4,20
    8c6c:	1909883a 	add	r4,r3,r4
    8c70:	49800015 	stw	r6,0(r9)
    8c74:	41800015 	stw	r6,0(r8)
    8c78:	59800015 	stw	r6,0(r11)
    8c7c:	51800015 	stw	r6,0(r10)
    8c80:	42000404 	addi	r8,r8,16
    8c84:	4a400404 	addi	r9,r9,16
    8c88:	5ac00404 	addi	r11,r11,16
    8c8c:	52800404 	addi	r10,r10,16
    8c90:	413ff71e 	bne	r8,r4,8c70 <__alt_data_end+0xff008c70>
    8c94:	63000044 	addi	r12,r12,1
    8c98:	6018913a 	slli	r12,r12,4
    8c9c:	39c003cc 	andi	r7,r7,15
    8ca0:	010000c4 	movi	r4,3
    8ca4:	1b07883a 	add	r3,r3,r12
    8ca8:	21c00e2e 	bgeu	r4,r7,8ce4 <memset+0x100>
    8cac:	1813883a 	mov	r9,r3
    8cb0:	3811883a 	mov	r8,r7
    8cb4:	010000c4 	movi	r4,3
    8cb8:	49800015 	stw	r6,0(r9)
    8cbc:	423fff04 	addi	r8,r8,-4
    8cc0:	4a400104 	addi	r9,r9,4
    8cc4:	223ffc36 	bltu	r4,r8,8cb8 <__alt_data_end+0xff008cb8>
    8cc8:	393fff04 	addi	r4,r7,-4
    8ccc:	2008d0ba 	srli	r4,r4,2
    8cd0:	39c000cc 	andi	r7,r7,3
    8cd4:	21000044 	addi	r4,r4,1
    8cd8:	2109883a 	add	r4,r4,r4
    8cdc:	2109883a 	add	r4,r4,r4
    8ce0:	1907883a 	add	r3,r3,r4
    8ce4:	38000526 	beq	r7,zero,8cfc <memset+0x118>
    8ce8:	19cf883a 	add	r7,r3,r7
    8cec:	19400005 	stb	r5,0(r3)
    8cf0:	18c00044 	addi	r3,r3,1
    8cf4:	38fffd1e 	bne	r7,r3,8cec <__alt_data_end+0xff008cec>
    8cf8:	f800283a 	ret
    8cfc:	f800283a 	ret
    8d00:	2007883a 	mov	r3,r4
    8d04:	300f883a 	mov	r7,r6
    8d08:	003fc706 	br	8c28 <__alt_data_end+0xff008c28>

00008d0c <_Balloc>:
    8d0c:	20801317 	ldw	r2,76(r4)
    8d10:	defffc04 	addi	sp,sp,-16
    8d14:	dc400115 	stw	r17,4(sp)
    8d18:	dc000015 	stw	r16,0(sp)
    8d1c:	dfc00315 	stw	ra,12(sp)
    8d20:	dc800215 	stw	r18,8(sp)
    8d24:	2023883a 	mov	r17,r4
    8d28:	2821883a 	mov	r16,r5
    8d2c:	10000f26 	beq	r2,zero,8d6c <_Balloc+0x60>
    8d30:	8407883a 	add	r3,r16,r16
    8d34:	18c7883a 	add	r3,r3,r3
    8d38:	10c7883a 	add	r3,r2,r3
    8d3c:	18800017 	ldw	r2,0(r3)
    8d40:	10001126 	beq	r2,zero,8d88 <_Balloc+0x7c>
    8d44:	11000017 	ldw	r4,0(r2)
    8d48:	19000015 	stw	r4,0(r3)
    8d4c:	10000415 	stw	zero,16(r2)
    8d50:	10000315 	stw	zero,12(r2)
    8d54:	dfc00317 	ldw	ra,12(sp)
    8d58:	dc800217 	ldw	r18,8(sp)
    8d5c:	dc400117 	ldw	r17,4(sp)
    8d60:	dc000017 	ldw	r16,0(sp)
    8d64:	dec00404 	addi	sp,sp,16
    8d68:	f800283a 	ret
    8d6c:	01800844 	movi	r6,33
    8d70:	01400104 	movi	r5,4
    8d74:	000bbf40 	call	bbf4 <_calloc_r>
    8d78:	88801315 	stw	r2,76(r17)
    8d7c:	103fec1e 	bne	r2,zero,8d30 <__alt_data_end+0xff008d30>
    8d80:	0005883a 	mov	r2,zero
    8d84:	003ff306 	br	8d54 <__alt_data_end+0xff008d54>
    8d88:	01400044 	movi	r5,1
    8d8c:	2c24983a 	sll	r18,r5,r16
    8d90:	8809883a 	mov	r4,r17
    8d94:	91800144 	addi	r6,r18,5
    8d98:	318d883a 	add	r6,r6,r6
    8d9c:	318d883a 	add	r6,r6,r6
    8da0:	000bbf40 	call	bbf4 <_calloc_r>
    8da4:	103ff626 	beq	r2,zero,8d80 <__alt_data_end+0xff008d80>
    8da8:	14000115 	stw	r16,4(r2)
    8dac:	14800215 	stw	r18,8(r2)
    8db0:	003fe606 	br	8d4c <__alt_data_end+0xff008d4c>

00008db4 <_Bfree>:
    8db4:	28000826 	beq	r5,zero,8dd8 <_Bfree+0x24>
    8db8:	28c00117 	ldw	r3,4(r5)
    8dbc:	20801317 	ldw	r2,76(r4)
    8dc0:	18c7883a 	add	r3,r3,r3
    8dc4:	18c7883a 	add	r3,r3,r3
    8dc8:	10c5883a 	add	r2,r2,r3
    8dcc:	10c00017 	ldw	r3,0(r2)
    8dd0:	28c00015 	stw	r3,0(r5)
    8dd4:	11400015 	stw	r5,0(r2)
    8dd8:	f800283a 	ret

00008ddc <__multadd>:
    8ddc:	defffa04 	addi	sp,sp,-24
    8de0:	dc800315 	stw	r18,12(sp)
    8de4:	dc400215 	stw	r17,8(sp)
    8de8:	dc000115 	stw	r16,4(sp)
    8dec:	2823883a 	mov	r17,r5
    8df0:	2c000417 	ldw	r16,16(r5)
    8df4:	dfc00515 	stw	ra,20(sp)
    8df8:	dcc00415 	stw	r19,16(sp)
    8dfc:	2025883a 	mov	r18,r4
    8e00:	29400504 	addi	r5,r5,20
    8e04:	0011883a 	mov	r8,zero
    8e08:	28c00017 	ldw	r3,0(r5)
    8e0c:	29400104 	addi	r5,r5,4
    8e10:	42000044 	addi	r8,r8,1
    8e14:	18bfffcc 	andi	r2,r3,65535
    8e18:	1185383a 	mul	r2,r2,r6
    8e1c:	1806d43a 	srli	r3,r3,16
    8e20:	11cf883a 	add	r7,r2,r7
    8e24:	3808d43a 	srli	r4,r7,16
    8e28:	1987383a 	mul	r3,r3,r6
    8e2c:	38bfffcc 	andi	r2,r7,65535
    8e30:	1907883a 	add	r3,r3,r4
    8e34:	1808943a 	slli	r4,r3,16
    8e38:	180ed43a 	srli	r7,r3,16
    8e3c:	2085883a 	add	r2,r4,r2
    8e40:	28bfff15 	stw	r2,-4(r5)
    8e44:	443ff016 	blt	r8,r16,8e08 <__alt_data_end+0xff008e08>
    8e48:	38000926 	beq	r7,zero,8e70 <__multadd+0x94>
    8e4c:	88800217 	ldw	r2,8(r17)
    8e50:	80800f0e 	bge	r16,r2,8e90 <__multadd+0xb4>
    8e54:	80800144 	addi	r2,r16,5
    8e58:	1085883a 	add	r2,r2,r2
    8e5c:	1085883a 	add	r2,r2,r2
    8e60:	8885883a 	add	r2,r17,r2
    8e64:	11c00015 	stw	r7,0(r2)
    8e68:	84000044 	addi	r16,r16,1
    8e6c:	8c000415 	stw	r16,16(r17)
    8e70:	8805883a 	mov	r2,r17
    8e74:	dfc00517 	ldw	ra,20(sp)
    8e78:	dcc00417 	ldw	r19,16(sp)
    8e7c:	dc800317 	ldw	r18,12(sp)
    8e80:	dc400217 	ldw	r17,8(sp)
    8e84:	dc000117 	ldw	r16,4(sp)
    8e88:	dec00604 	addi	sp,sp,24
    8e8c:	f800283a 	ret
    8e90:	89400117 	ldw	r5,4(r17)
    8e94:	9009883a 	mov	r4,r18
    8e98:	d9c00015 	stw	r7,0(sp)
    8e9c:	29400044 	addi	r5,r5,1
    8ea0:	0008d0c0 	call	8d0c <_Balloc>
    8ea4:	89800417 	ldw	r6,16(r17)
    8ea8:	89400304 	addi	r5,r17,12
    8eac:	11000304 	addi	r4,r2,12
    8eb0:	31800084 	addi	r6,r6,2
    8eb4:	318d883a 	add	r6,r6,r6
    8eb8:	318d883a 	add	r6,r6,r6
    8ebc:	1027883a 	mov	r19,r2
    8ec0:	00089400 	call	8940 <memcpy>
    8ec4:	d9c00017 	ldw	r7,0(sp)
    8ec8:	88000a26 	beq	r17,zero,8ef4 <__multadd+0x118>
    8ecc:	88c00117 	ldw	r3,4(r17)
    8ed0:	90801317 	ldw	r2,76(r18)
    8ed4:	18c7883a 	add	r3,r3,r3
    8ed8:	18c7883a 	add	r3,r3,r3
    8edc:	10c5883a 	add	r2,r2,r3
    8ee0:	10c00017 	ldw	r3,0(r2)
    8ee4:	88c00015 	stw	r3,0(r17)
    8ee8:	14400015 	stw	r17,0(r2)
    8eec:	9823883a 	mov	r17,r19
    8ef0:	003fd806 	br	8e54 <__alt_data_end+0xff008e54>
    8ef4:	9823883a 	mov	r17,r19
    8ef8:	003fd606 	br	8e54 <__alt_data_end+0xff008e54>

00008efc <__s2b>:
    8efc:	defff904 	addi	sp,sp,-28
    8f00:	dc400115 	stw	r17,4(sp)
    8f04:	dc000015 	stw	r16,0(sp)
    8f08:	2023883a 	mov	r17,r4
    8f0c:	2821883a 	mov	r16,r5
    8f10:	39000204 	addi	r4,r7,8
    8f14:	01400244 	movi	r5,9
    8f18:	dcc00315 	stw	r19,12(sp)
    8f1c:	dc800215 	stw	r18,8(sp)
    8f20:	dfc00615 	stw	ra,24(sp)
    8f24:	dd400515 	stw	r21,20(sp)
    8f28:	dd000415 	stw	r20,16(sp)
    8f2c:	3825883a 	mov	r18,r7
    8f30:	3027883a 	mov	r19,r6
    8f34:	00022500 	call	2250 <__divsi3>
    8f38:	00c00044 	movi	r3,1
    8f3c:	000b883a 	mov	r5,zero
    8f40:	1880030e 	bge	r3,r2,8f50 <__s2b+0x54>
    8f44:	18c7883a 	add	r3,r3,r3
    8f48:	29400044 	addi	r5,r5,1
    8f4c:	18bffd16 	blt	r3,r2,8f44 <__alt_data_end+0xff008f44>
    8f50:	8809883a 	mov	r4,r17
    8f54:	0008d0c0 	call	8d0c <_Balloc>
    8f58:	d8c00717 	ldw	r3,28(sp)
    8f5c:	10c00515 	stw	r3,20(r2)
    8f60:	00c00044 	movi	r3,1
    8f64:	10c00415 	stw	r3,16(r2)
    8f68:	00c00244 	movi	r3,9
    8f6c:	1cc0210e 	bge	r3,r19,8ff4 <__s2b+0xf8>
    8f70:	80eb883a 	add	r21,r16,r3
    8f74:	a829883a 	mov	r20,r21
    8f78:	84e1883a 	add	r16,r16,r19
    8f7c:	a1c00007 	ldb	r7,0(r20)
    8f80:	01800284 	movi	r6,10
    8f84:	a5000044 	addi	r20,r20,1
    8f88:	100b883a 	mov	r5,r2
    8f8c:	39fff404 	addi	r7,r7,-48
    8f90:	8809883a 	mov	r4,r17
    8f94:	0008ddc0 	call	8ddc <__multadd>
    8f98:	a43ff81e 	bne	r20,r16,8f7c <__alt_data_end+0xff008f7c>
    8f9c:	ace1883a 	add	r16,r21,r19
    8fa0:	843ffe04 	addi	r16,r16,-8
    8fa4:	9c800a0e 	bge	r19,r18,8fd0 <__s2b+0xd4>
    8fa8:	94e5c83a 	sub	r18,r18,r19
    8fac:	84a5883a 	add	r18,r16,r18
    8fb0:	81c00007 	ldb	r7,0(r16)
    8fb4:	01800284 	movi	r6,10
    8fb8:	84000044 	addi	r16,r16,1
    8fbc:	100b883a 	mov	r5,r2
    8fc0:	39fff404 	addi	r7,r7,-48
    8fc4:	8809883a 	mov	r4,r17
    8fc8:	0008ddc0 	call	8ddc <__multadd>
    8fcc:	84bff81e 	bne	r16,r18,8fb0 <__alt_data_end+0xff008fb0>
    8fd0:	dfc00617 	ldw	ra,24(sp)
    8fd4:	dd400517 	ldw	r21,20(sp)
    8fd8:	dd000417 	ldw	r20,16(sp)
    8fdc:	dcc00317 	ldw	r19,12(sp)
    8fe0:	dc800217 	ldw	r18,8(sp)
    8fe4:	dc400117 	ldw	r17,4(sp)
    8fe8:	dc000017 	ldw	r16,0(sp)
    8fec:	dec00704 	addi	sp,sp,28
    8ff0:	f800283a 	ret
    8ff4:	84000284 	addi	r16,r16,10
    8ff8:	1827883a 	mov	r19,r3
    8ffc:	003fe906 	br	8fa4 <__alt_data_end+0xff008fa4>

00009000 <__hi0bits>:
    9000:	20bfffec 	andhi	r2,r4,65535
    9004:	1000141e 	bne	r2,zero,9058 <__hi0bits+0x58>
    9008:	2008943a 	slli	r4,r4,16
    900c:	00800404 	movi	r2,16
    9010:	20ffc02c 	andhi	r3,r4,65280
    9014:	1800021e 	bne	r3,zero,9020 <__hi0bits+0x20>
    9018:	2008923a 	slli	r4,r4,8
    901c:	10800204 	addi	r2,r2,8
    9020:	20fc002c 	andhi	r3,r4,61440
    9024:	1800021e 	bne	r3,zero,9030 <__hi0bits+0x30>
    9028:	2008913a 	slli	r4,r4,4
    902c:	10800104 	addi	r2,r2,4
    9030:	20f0002c 	andhi	r3,r4,49152
    9034:	1800031e 	bne	r3,zero,9044 <__hi0bits+0x44>
    9038:	2109883a 	add	r4,r4,r4
    903c:	10800084 	addi	r2,r2,2
    9040:	2109883a 	add	r4,r4,r4
    9044:	20000316 	blt	r4,zero,9054 <__hi0bits+0x54>
    9048:	2110002c 	andhi	r4,r4,16384
    904c:	2000041e 	bne	r4,zero,9060 <__hi0bits+0x60>
    9050:	00800804 	movi	r2,32
    9054:	f800283a 	ret
    9058:	0005883a 	mov	r2,zero
    905c:	003fec06 	br	9010 <__alt_data_end+0xff009010>
    9060:	10800044 	addi	r2,r2,1
    9064:	f800283a 	ret

00009068 <__lo0bits>:
    9068:	20c00017 	ldw	r3,0(r4)
    906c:	188001cc 	andi	r2,r3,7
    9070:	10000826 	beq	r2,zero,9094 <__lo0bits+0x2c>
    9074:	1880004c 	andi	r2,r3,1
    9078:	1000211e 	bne	r2,zero,9100 <__lo0bits+0x98>
    907c:	1880008c 	andi	r2,r3,2
    9080:	1000211e 	bne	r2,zero,9108 <__lo0bits+0xa0>
    9084:	1806d0ba 	srli	r3,r3,2
    9088:	00800084 	movi	r2,2
    908c:	20c00015 	stw	r3,0(r4)
    9090:	f800283a 	ret
    9094:	18bfffcc 	andi	r2,r3,65535
    9098:	10001326 	beq	r2,zero,90e8 <__lo0bits+0x80>
    909c:	0005883a 	mov	r2,zero
    90a0:	19403fcc 	andi	r5,r3,255
    90a4:	2800021e 	bne	r5,zero,90b0 <__lo0bits+0x48>
    90a8:	1806d23a 	srli	r3,r3,8
    90ac:	10800204 	addi	r2,r2,8
    90b0:	194003cc 	andi	r5,r3,15
    90b4:	2800021e 	bne	r5,zero,90c0 <__lo0bits+0x58>
    90b8:	1806d13a 	srli	r3,r3,4
    90bc:	10800104 	addi	r2,r2,4
    90c0:	194000cc 	andi	r5,r3,3
    90c4:	2800021e 	bne	r5,zero,90d0 <__lo0bits+0x68>
    90c8:	1806d0ba 	srli	r3,r3,2
    90cc:	10800084 	addi	r2,r2,2
    90d0:	1940004c 	andi	r5,r3,1
    90d4:	2800081e 	bne	r5,zero,90f8 <__lo0bits+0x90>
    90d8:	1806d07a 	srli	r3,r3,1
    90dc:	1800051e 	bne	r3,zero,90f4 <__lo0bits+0x8c>
    90e0:	00800804 	movi	r2,32
    90e4:	f800283a 	ret
    90e8:	1806d43a 	srli	r3,r3,16
    90ec:	00800404 	movi	r2,16
    90f0:	003feb06 	br	90a0 <__alt_data_end+0xff0090a0>
    90f4:	10800044 	addi	r2,r2,1
    90f8:	20c00015 	stw	r3,0(r4)
    90fc:	f800283a 	ret
    9100:	0005883a 	mov	r2,zero
    9104:	f800283a 	ret
    9108:	1806d07a 	srli	r3,r3,1
    910c:	00800044 	movi	r2,1
    9110:	20c00015 	stw	r3,0(r4)
    9114:	f800283a 	ret

00009118 <__i2b>:
    9118:	defffd04 	addi	sp,sp,-12
    911c:	dc000015 	stw	r16,0(sp)
    9120:	04000044 	movi	r16,1
    9124:	dc400115 	stw	r17,4(sp)
    9128:	2823883a 	mov	r17,r5
    912c:	800b883a 	mov	r5,r16
    9130:	dfc00215 	stw	ra,8(sp)
    9134:	0008d0c0 	call	8d0c <_Balloc>
    9138:	14400515 	stw	r17,20(r2)
    913c:	14000415 	stw	r16,16(r2)
    9140:	dfc00217 	ldw	ra,8(sp)
    9144:	dc400117 	ldw	r17,4(sp)
    9148:	dc000017 	ldw	r16,0(sp)
    914c:	dec00304 	addi	sp,sp,12
    9150:	f800283a 	ret

00009154 <__multiply>:
    9154:	defffa04 	addi	sp,sp,-24
    9158:	dcc00315 	stw	r19,12(sp)
    915c:	dc800215 	stw	r18,8(sp)
    9160:	34c00417 	ldw	r19,16(r6)
    9164:	2c800417 	ldw	r18,16(r5)
    9168:	dd000415 	stw	r20,16(sp)
    916c:	dc400115 	stw	r17,4(sp)
    9170:	dfc00515 	stw	ra,20(sp)
    9174:	dc000015 	stw	r16,0(sp)
    9178:	2829883a 	mov	r20,r5
    917c:	3023883a 	mov	r17,r6
    9180:	94c0050e 	bge	r18,r19,9198 <__multiply+0x44>
    9184:	9007883a 	mov	r3,r18
    9188:	3029883a 	mov	r20,r6
    918c:	9825883a 	mov	r18,r19
    9190:	2823883a 	mov	r17,r5
    9194:	1827883a 	mov	r19,r3
    9198:	a0800217 	ldw	r2,8(r20)
    919c:	94e1883a 	add	r16,r18,r19
    91a0:	a1400117 	ldw	r5,4(r20)
    91a4:	1400010e 	bge	r2,r16,91ac <__multiply+0x58>
    91a8:	29400044 	addi	r5,r5,1
    91ac:	0008d0c0 	call	8d0c <_Balloc>
    91b0:	8415883a 	add	r10,r16,r16
    91b4:	12c00504 	addi	r11,r2,20
    91b8:	5295883a 	add	r10,r10,r10
    91bc:	5a95883a 	add	r10,r11,r10
    91c0:	5807883a 	mov	r3,r11
    91c4:	5a80032e 	bgeu	r11,r10,91d4 <__multiply+0x80>
    91c8:	18000015 	stw	zero,0(r3)
    91cc:	18c00104 	addi	r3,r3,4
    91d0:	1abffd36 	bltu	r3,r10,91c8 <__alt_data_end+0xff0091c8>
    91d4:	9ce7883a 	add	r19,r19,r19
    91d8:	94a5883a 	add	r18,r18,r18
    91dc:	89800504 	addi	r6,r17,20
    91e0:	9ce7883a 	add	r19,r19,r19
    91e4:	a3400504 	addi	r13,r20,20
    91e8:	94a5883a 	add	r18,r18,r18
    91ec:	34d9883a 	add	r12,r6,r19
    91f0:	6c93883a 	add	r9,r13,r18
    91f4:	3300422e 	bgeu	r6,r12,9300 <__multiply+0x1ac>
    91f8:	37c00017 	ldw	ra,0(r6)
    91fc:	fbffffcc 	andi	r15,ra,65535
    9200:	78001b26 	beq	r15,zero,9270 <__multiply+0x11c>
    9204:	5811883a 	mov	r8,r11
    9208:	681d883a 	mov	r14,r13
    920c:	000f883a 	mov	r7,zero
    9210:	71000017 	ldw	r4,0(r14)
    9214:	40c00017 	ldw	r3,0(r8)
    9218:	73800104 	addi	r14,r14,4
    921c:	217fffcc 	andi	r5,r4,65535
    9220:	2bcb383a 	mul	r5,r5,r15
    9224:	2008d43a 	srli	r4,r4,16
    9228:	1c7fffcc 	andi	r17,r3,65535
    922c:	2c4b883a 	add	r5,r5,r17
    9230:	29cb883a 	add	r5,r5,r7
    9234:	23c9383a 	mul	r4,r4,r15
    9238:	1806d43a 	srli	r3,r3,16
    923c:	280ed43a 	srli	r7,r5,16
    9240:	297fffcc 	andi	r5,r5,65535
    9244:	20c7883a 	add	r3,r4,r3
    9248:	19c7883a 	add	r3,r3,r7
    924c:	1808943a 	slli	r4,r3,16
    9250:	4023883a 	mov	r17,r8
    9254:	180ed43a 	srli	r7,r3,16
    9258:	214ab03a 	or	r5,r4,r5
    925c:	41400015 	stw	r5,0(r8)
    9260:	42000104 	addi	r8,r8,4
    9264:	727fea36 	bltu	r14,r9,9210 <__alt_data_end+0xff009210>
    9268:	89c00115 	stw	r7,4(r17)
    926c:	37c00017 	ldw	ra,0(r6)
    9270:	f83ed43a 	srli	ra,ra,16
    9274:	f8001f26 	beq	ra,zero,92f4 <__multiply+0x1a0>
    9278:	58c00017 	ldw	r3,0(r11)
    927c:	681d883a 	mov	r14,r13
    9280:	581f883a 	mov	r15,r11
    9284:	1811883a 	mov	r8,r3
    9288:	5825883a 	mov	r18,r11
    928c:	000f883a 	mov	r7,zero
    9290:	00000106 	br	9298 <__multiply+0x144>
    9294:	8825883a 	mov	r18,r17
    9298:	7140000b 	ldhu	r5,0(r14)
    929c:	4010d43a 	srli	r8,r8,16
    92a0:	193fffcc 	andi	r4,r3,65535
    92a4:	2fcb383a 	mul	r5,r5,ra
    92a8:	7bc00104 	addi	r15,r15,4
    92ac:	73800104 	addi	r14,r14,4
    92b0:	2a0b883a 	add	r5,r5,r8
    92b4:	29cb883a 	add	r5,r5,r7
    92b8:	2806943a 	slli	r3,r5,16
    92bc:	94400104 	addi	r17,r18,4
    92c0:	280ad43a 	srli	r5,r5,16
    92c4:	1908b03a 	or	r4,r3,r4
    92c8:	793fff15 	stw	r4,-4(r15)
    92cc:	70ffff17 	ldw	r3,-4(r14)
    92d0:	8a000017 	ldw	r8,0(r17)
    92d4:	1806d43a 	srli	r3,r3,16
    92d8:	413fffcc 	andi	r4,r8,65535
    92dc:	1fc7383a 	mul	r3,r3,ra
    92e0:	1907883a 	add	r3,r3,r4
    92e4:	1947883a 	add	r3,r3,r5
    92e8:	180ed43a 	srli	r7,r3,16
    92ec:	727fe936 	bltu	r14,r9,9294 <__alt_data_end+0xff009294>
    92f0:	90c00115 	stw	r3,4(r18)
    92f4:	31800104 	addi	r6,r6,4
    92f8:	5ac00104 	addi	r11,r11,4
    92fc:	333fbe36 	bltu	r6,r12,91f8 <__alt_data_end+0xff0091f8>
    9300:	0400090e 	bge	zero,r16,9328 <__multiply+0x1d4>
    9304:	50ffff17 	ldw	r3,-4(r10)
    9308:	52bfff04 	addi	r10,r10,-4
    930c:	18000326 	beq	r3,zero,931c <__multiply+0x1c8>
    9310:	00000506 	br	9328 <__multiply+0x1d4>
    9314:	50c00017 	ldw	r3,0(r10)
    9318:	1800031e 	bne	r3,zero,9328 <__multiply+0x1d4>
    931c:	843fffc4 	addi	r16,r16,-1
    9320:	52bfff04 	addi	r10,r10,-4
    9324:	803ffb1e 	bne	r16,zero,9314 <__alt_data_end+0xff009314>
    9328:	14000415 	stw	r16,16(r2)
    932c:	dfc00517 	ldw	ra,20(sp)
    9330:	dd000417 	ldw	r20,16(sp)
    9334:	dcc00317 	ldw	r19,12(sp)
    9338:	dc800217 	ldw	r18,8(sp)
    933c:	dc400117 	ldw	r17,4(sp)
    9340:	dc000017 	ldw	r16,0(sp)
    9344:	dec00604 	addi	sp,sp,24
    9348:	f800283a 	ret

0000934c <__pow5mult>:
    934c:	defffa04 	addi	sp,sp,-24
    9350:	dcc00315 	stw	r19,12(sp)
    9354:	dc000015 	stw	r16,0(sp)
    9358:	dfc00515 	stw	ra,20(sp)
    935c:	dd000415 	stw	r20,16(sp)
    9360:	dc800215 	stw	r18,8(sp)
    9364:	dc400115 	stw	r17,4(sp)
    9368:	308000cc 	andi	r2,r6,3
    936c:	3021883a 	mov	r16,r6
    9370:	2027883a 	mov	r19,r4
    9374:	10002f1e 	bne	r2,zero,9434 <__pow5mult+0xe8>
    9378:	2825883a 	mov	r18,r5
    937c:	8021d0ba 	srai	r16,r16,2
    9380:	80001a26 	beq	r16,zero,93ec <__pow5mult+0xa0>
    9384:	9c401217 	ldw	r17,72(r19)
    9388:	8800061e 	bne	r17,zero,93a4 <__pow5mult+0x58>
    938c:	00003406 	br	9460 <__pow5mult+0x114>
    9390:	8021d07a 	srai	r16,r16,1
    9394:	80001526 	beq	r16,zero,93ec <__pow5mult+0xa0>
    9398:	88800017 	ldw	r2,0(r17)
    939c:	10001c26 	beq	r2,zero,9410 <__pow5mult+0xc4>
    93a0:	1023883a 	mov	r17,r2
    93a4:	8080004c 	andi	r2,r16,1
    93a8:	103ff926 	beq	r2,zero,9390 <__alt_data_end+0xff009390>
    93ac:	880d883a 	mov	r6,r17
    93b0:	900b883a 	mov	r5,r18
    93b4:	9809883a 	mov	r4,r19
    93b8:	00091540 	call	9154 <__multiply>
    93bc:	90001b26 	beq	r18,zero,942c <__pow5mult+0xe0>
    93c0:	91000117 	ldw	r4,4(r18)
    93c4:	98c01317 	ldw	r3,76(r19)
    93c8:	8021d07a 	srai	r16,r16,1
    93cc:	2109883a 	add	r4,r4,r4
    93d0:	2109883a 	add	r4,r4,r4
    93d4:	1907883a 	add	r3,r3,r4
    93d8:	19000017 	ldw	r4,0(r3)
    93dc:	91000015 	stw	r4,0(r18)
    93e0:	1c800015 	stw	r18,0(r3)
    93e4:	1025883a 	mov	r18,r2
    93e8:	803feb1e 	bne	r16,zero,9398 <__alt_data_end+0xff009398>
    93ec:	9005883a 	mov	r2,r18
    93f0:	dfc00517 	ldw	ra,20(sp)
    93f4:	dd000417 	ldw	r20,16(sp)
    93f8:	dcc00317 	ldw	r19,12(sp)
    93fc:	dc800217 	ldw	r18,8(sp)
    9400:	dc400117 	ldw	r17,4(sp)
    9404:	dc000017 	ldw	r16,0(sp)
    9408:	dec00604 	addi	sp,sp,24
    940c:	f800283a 	ret
    9410:	880d883a 	mov	r6,r17
    9414:	880b883a 	mov	r5,r17
    9418:	9809883a 	mov	r4,r19
    941c:	00091540 	call	9154 <__multiply>
    9420:	88800015 	stw	r2,0(r17)
    9424:	10000015 	stw	zero,0(r2)
    9428:	003fdd06 	br	93a0 <__alt_data_end+0xff0093a0>
    942c:	1025883a 	mov	r18,r2
    9430:	003fd706 	br	9390 <__alt_data_end+0xff009390>
    9434:	10bfffc4 	addi	r2,r2,-1
    9438:	1085883a 	add	r2,r2,r2
    943c:	00c00074 	movhi	r3,1
    9440:	18c71304 	addi	r3,r3,7244
    9444:	1085883a 	add	r2,r2,r2
    9448:	1885883a 	add	r2,r3,r2
    944c:	11800017 	ldw	r6,0(r2)
    9450:	000f883a 	mov	r7,zero
    9454:	0008ddc0 	call	8ddc <__multadd>
    9458:	1025883a 	mov	r18,r2
    945c:	003fc706 	br	937c <__alt_data_end+0xff00937c>
    9460:	05000044 	movi	r20,1
    9464:	a00b883a 	mov	r5,r20
    9468:	9809883a 	mov	r4,r19
    946c:	0008d0c0 	call	8d0c <_Balloc>
    9470:	1023883a 	mov	r17,r2
    9474:	00809c44 	movi	r2,625
    9478:	88800515 	stw	r2,20(r17)
    947c:	8d000415 	stw	r20,16(r17)
    9480:	9c401215 	stw	r17,72(r19)
    9484:	88000015 	stw	zero,0(r17)
    9488:	003fc606 	br	93a4 <__alt_data_end+0xff0093a4>

0000948c <__lshift>:
    948c:	defff904 	addi	sp,sp,-28
    9490:	dd400515 	stw	r21,20(sp)
    9494:	dcc00315 	stw	r19,12(sp)
    9498:	302bd17a 	srai	r21,r6,5
    949c:	2cc00417 	ldw	r19,16(r5)
    94a0:	28800217 	ldw	r2,8(r5)
    94a4:	dd000415 	stw	r20,16(sp)
    94a8:	ace7883a 	add	r19,r21,r19
    94ac:	dc800215 	stw	r18,8(sp)
    94b0:	dc400115 	stw	r17,4(sp)
    94b4:	dc000015 	stw	r16,0(sp)
    94b8:	dfc00615 	stw	ra,24(sp)
    94bc:	9c000044 	addi	r16,r19,1
    94c0:	2823883a 	mov	r17,r5
    94c4:	3029883a 	mov	r20,r6
    94c8:	2025883a 	mov	r18,r4
    94cc:	29400117 	ldw	r5,4(r5)
    94d0:	1400030e 	bge	r2,r16,94e0 <__lshift+0x54>
    94d4:	1085883a 	add	r2,r2,r2
    94d8:	29400044 	addi	r5,r5,1
    94dc:	143ffd16 	blt	r2,r16,94d4 <__alt_data_end+0xff0094d4>
    94e0:	9009883a 	mov	r4,r18
    94e4:	0008d0c0 	call	8d0c <_Balloc>
    94e8:	10c00504 	addi	r3,r2,20
    94ec:	0540070e 	bge	zero,r21,950c <__lshift+0x80>
    94f0:	ad6b883a 	add	r21,r21,r21
    94f4:	ad6b883a 	add	r21,r21,r21
    94f8:	1809883a 	mov	r4,r3
    94fc:	1d47883a 	add	r3,r3,r21
    9500:	20000015 	stw	zero,0(r4)
    9504:	21000104 	addi	r4,r4,4
    9508:	193ffd1e 	bne	r3,r4,9500 <__alt_data_end+0xff009500>
    950c:	8a000417 	ldw	r8,16(r17)
    9510:	89000504 	addi	r4,r17,20
    9514:	a18007cc 	andi	r6,r20,31
    9518:	4211883a 	add	r8,r8,r8
    951c:	4211883a 	add	r8,r8,r8
    9520:	2211883a 	add	r8,r4,r8
    9524:	30002326 	beq	r6,zero,95b4 <__lshift+0x128>
    9528:	02400804 	movi	r9,32
    952c:	4993c83a 	sub	r9,r9,r6
    9530:	000b883a 	mov	r5,zero
    9534:	21c00017 	ldw	r7,0(r4)
    9538:	1815883a 	mov	r10,r3
    953c:	18c00104 	addi	r3,r3,4
    9540:	398e983a 	sll	r7,r7,r6
    9544:	21000104 	addi	r4,r4,4
    9548:	394ab03a 	or	r5,r7,r5
    954c:	197fff15 	stw	r5,-4(r3)
    9550:	217fff17 	ldw	r5,-4(r4)
    9554:	2a4ad83a 	srl	r5,r5,r9
    9558:	223ff636 	bltu	r4,r8,9534 <__alt_data_end+0xff009534>
    955c:	51400115 	stw	r5,4(r10)
    9560:	28001a1e 	bne	r5,zero,95cc <__lshift+0x140>
    9564:	843fffc4 	addi	r16,r16,-1
    9568:	14000415 	stw	r16,16(r2)
    956c:	88000826 	beq	r17,zero,9590 <__lshift+0x104>
    9570:	89000117 	ldw	r4,4(r17)
    9574:	90c01317 	ldw	r3,76(r18)
    9578:	2109883a 	add	r4,r4,r4
    957c:	2109883a 	add	r4,r4,r4
    9580:	1907883a 	add	r3,r3,r4
    9584:	19000017 	ldw	r4,0(r3)
    9588:	89000015 	stw	r4,0(r17)
    958c:	1c400015 	stw	r17,0(r3)
    9590:	dfc00617 	ldw	ra,24(sp)
    9594:	dd400517 	ldw	r21,20(sp)
    9598:	dd000417 	ldw	r20,16(sp)
    959c:	dcc00317 	ldw	r19,12(sp)
    95a0:	dc800217 	ldw	r18,8(sp)
    95a4:	dc400117 	ldw	r17,4(sp)
    95a8:	dc000017 	ldw	r16,0(sp)
    95ac:	dec00704 	addi	sp,sp,28
    95b0:	f800283a 	ret
    95b4:	21400017 	ldw	r5,0(r4)
    95b8:	18c00104 	addi	r3,r3,4
    95bc:	21000104 	addi	r4,r4,4
    95c0:	197fff15 	stw	r5,-4(r3)
    95c4:	223ffb36 	bltu	r4,r8,95b4 <__alt_data_end+0xff0095b4>
    95c8:	003fe606 	br	9564 <__alt_data_end+0xff009564>
    95cc:	9c000084 	addi	r16,r19,2
    95d0:	003fe406 	br	9564 <__alt_data_end+0xff009564>

000095d4 <__mcmp>:
    95d4:	20800417 	ldw	r2,16(r4)
    95d8:	28c00417 	ldw	r3,16(r5)
    95dc:	10c5c83a 	sub	r2,r2,r3
    95e0:	1000111e 	bne	r2,zero,9628 <__mcmp+0x54>
    95e4:	18c7883a 	add	r3,r3,r3
    95e8:	18c7883a 	add	r3,r3,r3
    95ec:	21000504 	addi	r4,r4,20
    95f0:	29400504 	addi	r5,r5,20
    95f4:	20c5883a 	add	r2,r4,r3
    95f8:	28cb883a 	add	r5,r5,r3
    95fc:	00000106 	br	9604 <__mcmp+0x30>
    9600:	20800a2e 	bgeu	r4,r2,962c <__mcmp+0x58>
    9604:	10bfff04 	addi	r2,r2,-4
    9608:	297fff04 	addi	r5,r5,-4
    960c:	11800017 	ldw	r6,0(r2)
    9610:	28c00017 	ldw	r3,0(r5)
    9614:	30fffa26 	beq	r6,r3,9600 <__alt_data_end+0xff009600>
    9618:	30c00236 	bltu	r6,r3,9624 <__mcmp+0x50>
    961c:	00800044 	movi	r2,1
    9620:	f800283a 	ret
    9624:	00bfffc4 	movi	r2,-1
    9628:	f800283a 	ret
    962c:	0005883a 	mov	r2,zero
    9630:	f800283a 	ret

00009634 <__mdiff>:
    9634:	28c00417 	ldw	r3,16(r5)
    9638:	30800417 	ldw	r2,16(r6)
    963c:	defffa04 	addi	sp,sp,-24
    9640:	dcc00315 	stw	r19,12(sp)
    9644:	dc800215 	stw	r18,8(sp)
    9648:	dfc00515 	stw	ra,20(sp)
    964c:	dd000415 	stw	r20,16(sp)
    9650:	dc400115 	stw	r17,4(sp)
    9654:	dc000015 	stw	r16,0(sp)
    9658:	1887c83a 	sub	r3,r3,r2
    965c:	2825883a 	mov	r18,r5
    9660:	3027883a 	mov	r19,r6
    9664:	1800141e 	bne	r3,zero,96b8 <__mdiff+0x84>
    9668:	1085883a 	add	r2,r2,r2
    966c:	1085883a 	add	r2,r2,r2
    9670:	2a000504 	addi	r8,r5,20
    9674:	34000504 	addi	r16,r6,20
    9678:	4087883a 	add	r3,r8,r2
    967c:	8085883a 	add	r2,r16,r2
    9680:	00000106 	br	9688 <__mdiff+0x54>
    9684:	40c0592e 	bgeu	r8,r3,97ec <__mdiff+0x1b8>
    9688:	18ffff04 	addi	r3,r3,-4
    968c:	10bfff04 	addi	r2,r2,-4
    9690:	19c00017 	ldw	r7,0(r3)
    9694:	11400017 	ldw	r5,0(r2)
    9698:	397ffa26 	beq	r7,r5,9684 <__alt_data_end+0xff009684>
    969c:	3940592e 	bgeu	r7,r5,9804 <__mdiff+0x1d0>
    96a0:	9005883a 	mov	r2,r18
    96a4:	4023883a 	mov	r17,r8
    96a8:	9825883a 	mov	r18,r19
    96ac:	05000044 	movi	r20,1
    96b0:	1027883a 	mov	r19,r2
    96b4:	00000406 	br	96c8 <__mdiff+0x94>
    96b8:	18005616 	blt	r3,zero,9814 <__mdiff+0x1e0>
    96bc:	34400504 	addi	r17,r6,20
    96c0:	2c000504 	addi	r16,r5,20
    96c4:	0029883a 	mov	r20,zero
    96c8:	91400117 	ldw	r5,4(r18)
    96cc:	0008d0c0 	call	8d0c <_Balloc>
    96d0:	92400417 	ldw	r9,16(r18)
    96d4:	9b000417 	ldw	r12,16(r19)
    96d8:	12c00504 	addi	r11,r2,20
    96dc:	4a51883a 	add	r8,r9,r9
    96e0:	6319883a 	add	r12,r12,r12
    96e4:	4211883a 	add	r8,r8,r8
    96e8:	6319883a 	add	r12,r12,r12
    96ec:	15000315 	stw	r20,12(r2)
    96f0:	8211883a 	add	r8,r16,r8
    96f4:	8b19883a 	add	r12,r17,r12
    96f8:	0007883a 	mov	r3,zero
    96fc:	81400017 	ldw	r5,0(r16)
    9700:	89c00017 	ldw	r7,0(r17)
    9704:	59800104 	addi	r6,r11,4
    9708:	293fffcc 	andi	r4,r5,65535
    970c:	20c7883a 	add	r3,r4,r3
    9710:	393fffcc 	andi	r4,r7,65535
    9714:	1909c83a 	sub	r4,r3,r4
    9718:	280ad43a 	srli	r5,r5,16
    971c:	380ed43a 	srli	r7,r7,16
    9720:	2007d43a 	srai	r3,r4,16
    9724:	213fffcc 	andi	r4,r4,65535
    9728:	29cbc83a 	sub	r5,r5,r7
    972c:	28c7883a 	add	r3,r5,r3
    9730:	180a943a 	slli	r5,r3,16
    9734:	8c400104 	addi	r17,r17,4
    9738:	84000104 	addi	r16,r16,4
    973c:	2908b03a 	or	r4,r5,r4
    9740:	59000015 	stw	r4,0(r11)
    9744:	1807d43a 	srai	r3,r3,16
    9748:	3015883a 	mov	r10,r6
    974c:	3017883a 	mov	r11,r6
    9750:	8b3fea36 	bltu	r17,r12,96fc <__alt_data_end+0xff0096fc>
    9754:	8200162e 	bgeu	r16,r8,97b0 <__mdiff+0x17c>
    9758:	8017883a 	mov	r11,r16
    975c:	59400017 	ldw	r5,0(r11)
    9760:	31800104 	addi	r6,r6,4
    9764:	5ac00104 	addi	r11,r11,4
    9768:	293fffcc 	andi	r4,r5,65535
    976c:	20c7883a 	add	r3,r4,r3
    9770:	280ed43a 	srli	r7,r5,16
    9774:	180bd43a 	srai	r5,r3,16
    9778:	193fffcc 	andi	r4,r3,65535
    977c:	3947883a 	add	r3,r7,r5
    9780:	180a943a 	slli	r5,r3,16
    9784:	1807d43a 	srai	r3,r3,16
    9788:	2908b03a 	or	r4,r5,r4
    978c:	313fff15 	stw	r4,-4(r6)
    9790:	5a3ff236 	bltu	r11,r8,975c <__alt_data_end+0xff00975c>
    9794:	0406303a 	nor	r3,zero,r16
    9798:	1a07883a 	add	r3,r3,r8
    979c:	1806d0ba 	srli	r3,r3,2
    97a0:	18c00044 	addi	r3,r3,1
    97a4:	18c7883a 	add	r3,r3,r3
    97a8:	18c7883a 	add	r3,r3,r3
    97ac:	50d5883a 	add	r10,r10,r3
    97b0:	50ffff04 	addi	r3,r10,-4
    97b4:	2000041e 	bne	r4,zero,97c8 <__mdiff+0x194>
    97b8:	18ffff04 	addi	r3,r3,-4
    97bc:	19000017 	ldw	r4,0(r3)
    97c0:	4a7fffc4 	addi	r9,r9,-1
    97c4:	203ffc26 	beq	r4,zero,97b8 <__alt_data_end+0xff0097b8>
    97c8:	12400415 	stw	r9,16(r2)
    97cc:	dfc00517 	ldw	ra,20(sp)
    97d0:	dd000417 	ldw	r20,16(sp)
    97d4:	dcc00317 	ldw	r19,12(sp)
    97d8:	dc800217 	ldw	r18,8(sp)
    97dc:	dc400117 	ldw	r17,4(sp)
    97e0:	dc000017 	ldw	r16,0(sp)
    97e4:	dec00604 	addi	sp,sp,24
    97e8:	f800283a 	ret
    97ec:	000b883a 	mov	r5,zero
    97f0:	0008d0c0 	call	8d0c <_Balloc>
    97f4:	00c00044 	movi	r3,1
    97f8:	10c00415 	stw	r3,16(r2)
    97fc:	10000515 	stw	zero,20(r2)
    9800:	003ff206 	br	97cc <__alt_data_end+0xff0097cc>
    9804:	8023883a 	mov	r17,r16
    9808:	0029883a 	mov	r20,zero
    980c:	4021883a 	mov	r16,r8
    9810:	003fad06 	br	96c8 <__alt_data_end+0xff0096c8>
    9814:	9005883a 	mov	r2,r18
    9818:	94400504 	addi	r17,r18,20
    981c:	9c000504 	addi	r16,r19,20
    9820:	9825883a 	mov	r18,r19
    9824:	05000044 	movi	r20,1
    9828:	1027883a 	mov	r19,r2
    982c:	003fa606 	br	96c8 <__alt_data_end+0xff0096c8>

00009830 <__ulp>:
    9830:	295ffc2c 	andhi	r5,r5,32752
    9834:	00bf3034 	movhi	r2,64704
    9838:	2887883a 	add	r3,r5,r2
    983c:	00c0020e 	bge	zero,r3,9848 <__ulp+0x18>
    9840:	0005883a 	mov	r2,zero
    9844:	f800283a 	ret
    9848:	00c7c83a 	sub	r3,zero,r3
    984c:	1807d53a 	srai	r3,r3,20
    9850:	008004c4 	movi	r2,19
    9854:	10c00b0e 	bge	r2,r3,9884 <__ulp+0x54>
    9858:	18bffb04 	addi	r2,r3,-20
    985c:	01000784 	movi	r4,30
    9860:	0007883a 	mov	r3,zero
    9864:	20800516 	blt	r4,r2,987c <__ulp+0x4c>
    9868:	010007c4 	movi	r4,31
    986c:	2089c83a 	sub	r4,r4,r2
    9870:	00800044 	movi	r2,1
    9874:	1104983a 	sll	r2,r2,r4
    9878:	f800283a 	ret
    987c:	00800044 	movi	r2,1
    9880:	f800283a 	ret
    9884:	01400234 	movhi	r5,8
    9888:	28c7d83a 	sra	r3,r5,r3
    988c:	0005883a 	mov	r2,zero
    9890:	f800283a 	ret

00009894 <__b2d>:
    9894:	defffa04 	addi	sp,sp,-24
    9898:	dc000015 	stw	r16,0(sp)
    989c:	24000417 	ldw	r16,16(r4)
    98a0:	dc400115 	stw	r17,4(sp)
    98a4:	24400504 	addi	r17,r4,20
    98a8:	8421883a 	add	r16,r16,r16
    98ac:	8421883a 	add	r16,r16,r16
    98b0:	8c21883a 	add	r16,r17,r16
    98b4:	dc800215 	stw	r18,8(sp)
    98b8:	84bfff17 	ldw	r18,-4(r16)
    98bc:	dd000415 	stw	r20,16(sp)
    98c0:	dcc00315 	stw	r19,12(sp)
    98c4:	9009883a 	mov	r4,r18
    98c8:	2829883a 	mov	r20,r5
    98cc:	dfc00515 	stw	ra,20(sp)
    98d0:	00090000 	call	9000 <__hi0bits>
    98d4:	00c00804 	movi	r3,32
    98d8:	1889c83a 	sub	r4,r3,r2
    98dc:	a1000015 	stw	r4,0(r20)
    98e0:	01000284 	movi	r4,10
    98e4:	84ffff04 	addi	r19,r16,-4
    98e8:	20801216 	blt	r4,r2,9934 <__b2d+0xa0>
    98ec:	018002c4 	movi	r6,11
    98f0:	308dc83a 	sub	r6,r6,r2
    98f4:	9186d83a 	srl	r3,r18,r6
    98f8:	18cffc34 	orhi	r3,r3,16368
    98fc:	8cc0212e 	bgeu	r17,r19,9984 <__b2d+0xf0>
    9900:	813ffe17 	ldw	r4,-8(r16)
    9904:	218cd83a 	srl	r6,r4,r6
    9908:	10800544 	addi	r2,r2,21
    990c:	9084983a 	sll	r2,r18,r2
    9910:	1184b03a 	or	r2,r2,r6
    9914:	dfc00517 	ldw	ra,20(sp)
    9918:	dd000417 	ldw	r20,16(sp)
    991c:	dcc00317 	ldw	r19,12(sp)
    9920:	dc800217 	ldw	r18,8(sp)
    9924:	dc400117 	ldw	r17,4(sp)
    9928:	dc000017 	ldw	r16,0(sp)
    992c:	dec00604 	addi	sp,sp,24
    9930:	f800283a 	ret
    9934:	8cc00f2e 	bgeu	r17,r19,9974 <__b2d+0xe0>
    9938:	117ffd44 	addi	r5,r2,-11
    993c:	80bffe17 	ldw	r2,-8(r16)
    9940:	28000e26 	beq	r5,zero,997c <__b2d+0xe8>
    9944:	1949c83a 	sub	r4,r3,r5
    9948:	9164983a 	sll	r18,r18,r5
    994c:	1106d83a 	srl	r3,r2,r4
    9950:	81bffe04 	addi	r6,r16,-8
    9954:	948ffc34 	orhi	r18,r18,16368
    9958:	90c6b03a 	or	r3,r18,r3
    995c:	89800e2e 	bgeu	r17,r6,9998 <__b2d+0x104>
    9960:	81bffd17 	ldw	r6,-12(r16)
    9964:	1144983a 	sll	r2,r2,r5
    9968:	310ad83a 	srl	r5,r6,r4
    996c:	2884b03a 	or	r2,r5,r2
    9970:	003fe806 	br	9914 <__alt_data_end+0xff009914>
    9974:	10bffd44 	addi	r2,r2,-11
    9978:	1000041e 	bne	r2,zero,998c <__b2d+0xf8>
    997c:	90cffc34 	orhi	r3,r18,16368
    9980:	003fe406 	br	9914 <__alt_data_end+0xff009914>
    9984:	000d883a 	mov	r6,zero
    9988:	003fdf06 	br	9908 <__alt_data_end+0xff009908>
    998c:	90a4983a 	sll	r18,r18,r2
    9990:	0005883a 	mov	r2,zero
    9994:	003ff906 	br	997c <__alt_data_end+0xff00997c>
    9998:	1144983a 	sll	r2,r2,r5
    999c:	003fdd06 	br	9914 <__alt_data_end+0xff009914>

000099a0 <__d2b>:
    99a0:	defff804 	addi	sp,sp,-32
    99a4:	dc000215 	stw	r16,8(sp)
    99a8:	3021883a 	mov	r16,r6
    99ac:	dc400315 	stw	r17,12(sp)
    99b0:	8022907a 	slli	r17,r16,1
    99b4:	dd000615 	stw	r20,24(sp)
    99b8:	2829883a 	mov	r20,r5
    99bc:	01400044 	movi	r5,1
    99c0:	dcc00515 	stw	r19,20(sp)
    99c4:	dc800415 	stw	r18,16(sp)
    99c8:	dfc00715 	stw	ra,28(sp)
    99cc:	3825883a 	mov	r18,r7
    99d0:	8822d57a 	srli	r17,r17,21
    99d4:	0008d0c0 	call	8d0c <_Balloc>
    99d8:	1027883a 	mov	r19,r2
    99dc:	00800434 	movhi	r2,16
    99e0:	10bfffc4 	addi	r2,r2,-1
    99e4:	808c703a 	and	r6,r16,r2
    99e8:	88000126 	beq	r17,zero,99f0 <__d2b+0x50>
    99ec:	31800434 	orhi	r6,r6,16
    99f0:	d9800015 	stw	r6,0(sp)
    99f4:	a0002426 	beq	r20,zero,9a88 <__d2b+0xe8>
    99f8:	d9000104 	addi	r4,sp,4
    99fc:	dd000115 	stw	r20,4(sp)
    9a00:	00090680 	call	9068 <__lo0bits>
    9a04:	d8c00017 	ldw	r3,0(sp)
    9a08:	10002f1e 	bne	r2,zero,9ac8 <__d2b+0x128>
    9a0c:	d9000117 	ldw	r4,4(sp)
    9a10:	99000515 	stw	r4,20(r19)
    9a14:	1821003a 	cmpeq	r16,r3,zero
    9a18:	01000084 	movi	r4,2
    9a1c:	2421c83a 	sub	r16,r4,r16
    9a20:	98c00615 	stw	r3,24(r19)
    9a24:	9c000415 	stw	r16,16(r19)
    9a28:	88001f1e 	bne	r17,zero,9aa8 <__d2b+0x108>
    9a2c:	10bef384 	addi	r2,r2,-1074
    9a30:	90800015 	stw	r2,0(r18)
    9a34:	00900034 	movhi	r2,16384
    9a38:	10bfffc4 	addi	r2,r2,-1
    9a3c:	8085883a 	add	r2,r16,r2
    9a40:	1085883a 	add	r2,r2,r2
    9a44:	1085883a 	add	r2,r2,r2
    9a48:	9885883a 	add	r2,r19,r2
    9a4c:	11000517 	ldw	r4,20(r2)
    9a50:	8020917a 	slli	r16,r16,5
    9a54:	00090000 	call	9000 <__hi0bits>
    9a58:	d8c00817 	ldw	r3,32(sp)
    9a5c:	8085c83a 	sub	r2,r16,r2
    9a60:	18800015 	stw	r2,0(r3)
    9a64:	9805883a 	mov	r2,r19
    9a68:	dfc00717 	ldw	ra,28(sp)
    9a6c:	dd000617 	ldw	r20,24(sp)
    9a70:	dcc00517 	ldw	r19,20(sp)
    9a74:	dc800417 	ldw	r18,16(sp)
    9a78:	dc400317 	ldw	r17,12(sp)
    9a7c:	dc000217 	ldw	r16,8(sp)
    9a80:	dec00804 	addi	sp,sp,32
    9a84:	f800283a 	ret
    9a88:	d809883a 	mov	r4,sp
    9a8c:	00090680 	call	9068 <__lo0bits>
    9a90:	d8c00017 	ldw	r3,0(sp)
    9a94:	04000044 	movi	r16,1
    9a98:	9c000415 	stw	r16,16(r19)
    9a9c:	98c00515 	stw	r3,20(r19)
    9aa0:	10800804 	addi	r2,r2,32
    9aa4:	883fe126 	beq	r17,zero,9a2c <__alt_data_end+0xff009a2c>
    9aa8:	00c00d44 	movi	r3,53
    9aac:	8c7ef344 	addi	r17,r17,-1075
    9ab0:	88a3883a 	add	r17,r17,r2
    9ab4:	1885c83a 	sub	r2,r3,r2
    9ab8:	d8c00817 	ldw	r3,32(sp)
    9abc:	94400015 	stw	r17,0(r18)
    9ac0:	18800015 	stw	r2,0(r3)
    9ac4:	003fe706 	br	9a64 <__alt_data_end+0xff009a64>
    9ac8:	01000804 	movi	r4,32
    9acc:	2089c83a 	sub	r4,r4,r2
    9ad0:	1908983a 	sll	r4,r3,r4
    9ad4:	d9400117 	ldw	r5,4(sp)
    9ad8:	1886d83a 	srl	r3,r3,r2
    9adc:	2148b03a 	or	r4,r4,r5
    9ae0:	99000515 	stw	r4,20(r19)
    9ae4:	d8c00015 	stw	r3,0(sp)
    9ae8:	003fca06 	br	9a14 <__alt_data_end+0xff009a14>

00009aec <__ratio>:
    9aec:	defff904 	addi	sp,sp,-28
    9af0:	dc400315 	stw	r17,12(sp)
    9af4:	2823883a 	mov	r17,r5
    9af8:	d9400104 	addi	r5,sp,4
    9afc:	dfc00615 	stw	ra,24(sp)
    9b00:	dcc00515 	stw	r19,20(sp)
    9b04:	dc800415 	stw	r18,16(sp)
    9b08:	2027883a 	mov	r19,r4
    9b0c:	dc000215 	stw	r16,8(sp)
    9b10:	00098940 	call	9894 <__b2d>
    9b14:	d80b883a 	mov	r5,sp
    9b18:	8809883a 	mov	r4,r17
    9b1c:	1025883a 	mov	r18,r2
    9b20:	1821883a 	mov	r16,r3
    9b24:	00098940 	call	9894 <__b2d>
    9b28:	8a000417 	ldw	r8,16(r17)
    9b2c:	99000417 	ldw	r4,16(r19)
    9b30:	d9400117 	ldw	r5,4(sp)
    9b34:	2209c83a 	sub	r4,r4,r8
    9b38:	2010917a 	slli	r8,r4,5
    9b3c:	d9000017 	ldw	r4,0(sp)
    9b40:	2909c83a 	sub	r4,r5,r4
    9b44:	4109883a 	add	r4,r8,r4
    9b48:	01000e0e 	bge	zero,r4,9b84 <__ratio+0x98>
    9b4c:	2008953a 	slli	r4,r4,20
    9b50:	2421883a 	add	r16,r4,r16
    9b54:	100d883a 	mov	r6,r2
    9b58:	180f883a 	mov	r7,r3
    9b5c:	9009883a 	mov	r4,r18
    9b60:	800b883a 	mov	r5,r16
    9b64:	00024040 	call	2404 <__divdf3>
    9b68:	dfc00617 	ldw	ra,24(sp)
    9b6c:	dcc00517 	ldw	r19,20(sp)
    9b70:	dc800417 	ldw	r18,16(sp)
    9b74:	dc400317 	ldw	r17,12(sp)
    9b78:	dc000217 	ldw	r16,8(sp)
    9b7c:	dec00704 	addi	sp,sp,28
    9b80:	f800283a 	ret
    9b84:	2008953a 	slli	r4,r4,20
    9b88:	1907c83a 	sub	r3,r3,r4
    9b8c:	003ff106 	br	9b54 <__alt_data_end+0xff009b54>

00009b90 <_mprec_log10>:
    9b90:	defffe04 	addi	sp,sp,-8
    9b94:	dc000015 	stw	r16,0(sp)
    9b98:	dfc00115 	stw	ra,4(sp)
    9b9c:	008005c4 	movi	r2,23
    9ba0:	2021883a 	mov	r16,r4
    9ba4:	11000d0e 	bge	r2,r4,9bdc <_mprec_log10+0x4c>
    9ba8:	0005883a 	mov	r2,zero
    9bac:	00cffc34 	movhi	r3,16368
    9bb0:	843fffc4 	addi	r16,r16,-1
    9bb4:	000d883a 	mov	r6,zero
    9bb8:	01d00934 	movhi	r7,16420
    9bbc:	1009883a 	mov	r4,r2
    9bc0:	180b883a 	mov	r5,r3
    9bc4:	000da280 	call	da28 <__muldf3>
    9bc8:	803ff91e 	bne	r16,zero,9bb0 <__alt_data_end+0xff009bb0>
    9bcc:	dfc00117 	ldw	ra,4(sp)
    9bd0:	dc000017 	ldw	r16,0(sp)
    9bd4:	dec00204 	addi	sp,sp,8
    9bd8:	f800283a 	ret
    9bdc:	202090fa 	slli	r16,r4,3
    9be0:	00800074 	movhi	r2,1
    9be4:	10872a04 	addi	r2,r2,7336
    9be8:	1421883a 	add	r16,r2,r16
    9bec:	80800017 	ldw	r2,0(r16)
    9bf0:	80c00117 	ldw	r3,4(r16)
    9bf4:	dfc00117 	ldw	ra,4(sp)
    9bf8:	dc000017 	ldw	r16,0(sp)
    9bfc:	dec00204 	addi	sp,sp,8
    9c00:	f800283a 	ret

00009c04 <__copybits>:
    9c04:	297fffc4 	addi	r5,r5,-1
    9c08:	280fd17a 	srai	r7,r5,5
    9c0c:	30c00417 	ldw	r3,16(r6)
    9c10:	30800504 	addi	r2,r6,20
    9c14:	39c00044 	addi	r7,r7,1
    9c18:	18c7883a 	add	r3,r3,r3
    9c1c:	39cf883a 	add	r7,r7,r7
    9c20:	18c7883a 	add	r3,r3,r3
    9c24:	39cf883a 	add	r7,r7,r7
    9c28:	10c7883a 	add	r3,r2,r3
    9c2c:	21cf883a 	add	r7,r4,r7
    9c30:	10c00d2e 	bgeu	r2,r3,9c68 <__copybits+0x64>
    9c34:	200b883a 	mov	r5,r4
    9c38:	12000017 	ldw	r8,0(r2)
    9c3c:	29400104 	addi	r5,r5,4
    9c40:	10800104 	addi	r2,r2,4
    9c44:	2a3fff15 	stw	r8,-4(r5)
    9c48:	10fffb36 	bltu	r2,r3,9c38 <__alt_data_end+0xff009c38>
    9c4c:	1985c83a 	sub	r2,r3,r6
    9c50:	10bffac4 	addi	r2,r2,-21
    9c54:	1004d0ba 	srli	r2,r2,2
    9c58:	10800044 	addi	r2,r2,1
    9c5c:	1085883a 	add	r2,r2,r2
    9c60:	1085883a 	add	r2,r2,r2
    9c64:	2089883a 	add	r4,r4,r2
    9c68:	21c0032e 	bgeu	r4,r7,9c78 <__copybits+0x74>
    9c6c:	20000015 	stw	zero,0(r4)
    9c70:	21000104 	addi	r4,r4,4
    9c74:	21fffd36 	bltu	r4,r7,9c6c <__alt_data_end+0xff009c6c>
    9c78:	f800283a 	ret

00009c7c <__any_on>:
    9c7c:	20c00417 	ldw	r3,16(r4)
    9c80:	2805d17a 	srai	r2,r5,5
    9c84:	21000504 	addi	r4,r4,20
    9c88:	18800d0e 	bge	r3,r2,9cc0 <__any_on+0x44>
    9c8c:	18c7883a 	add	r3,r3,r3
    9c90:	18c7883a 	add	r3,r3,r3
    9c94:	20c7883a 	add	r3,r4,r3
    9c98:	20c0192e 	bgeu	r4,r3,9d00 <__any_on+0x84>
    9c9c:	18bfff17 	ldw	r2,-4(r3)
    9ca0:	18ffff04 	addi	r3,r3,-4
    9ca4:	1000041e 	bne	r2,zero,9cb8 <__any_on+0x3c>
    9ca8:	20c0142e 	bgeu	r4,r3,9cfc <__any_on+0x80>
    9cac:	18ffff04 	addi	r3,r3,-4
    9cb0:	19400017 	ldw	r5,0(r3)
    9cb4:	283ffc26 	beq	r5,zero,9ca8 <__alt_data_end+0xff009ca8>
    9cb8:	00800044 	movi	r2,1
    9cbc:	f800283a 	ret
    9cc0:	10c00a0e 	bge	r2,r3,9cec <__any_on+0x70>
    9cc4:	1085883a 	add	r2,r2,r2
    9cc8:	1085883a 	add	r2,r2,r2
    9ccc:	294007cc 	andi	r5,r5,31
    9cd0:	2087883a 	add	r3,r4,r2
    9cd4:	283ff026 	beq	r5,zero,9c98 <__alt_data_end+0xff009c98>
    9cd8:	19800017 	ldw	r6,0(r3)
    9cdc:	3144d83a 	srl	r2,r6,r5
    9ce0:	114a983a 	sll	r5,r2,r5
    9ce4:	317ff41e 	bne	r6,r5,9cb8 <__alt_data_end+0xff009cb8>
    9ce8:	003feb06 	br	9c98 <__alt_data_end+0xff009c98>
    9cec:	1085883a 	add	r2,r2,r2
    9cf0:	1085883a 	add	r2,r2,r2
    9cf4:	2087883a 	add	r3,r4,r2
    9cf8:	003fe706 	br	9c98 <__alt_data_end+0xff009c98>
    9cfc:	f800283a 	ret
    9d00:	0005883a 	mov	r2,zero
    9d04:	f800283a 	ret

00009d08 <_realloc_r>:
    9d08:	defff604 	addi	sp,sp,-40
    9d0c:	dc800215 	stw	r18,8(sp)
    9d10:	dfc00915 	stw	ra,36(sp)
    9d14:	df000815 	stw	fp,32(sp)
    9d18:	ddc00715 	stw	r23,28(sp)
    9d1c:	dd800615 	stw	r22,24(sp)
    9d20:	dd400515 	stw	r21,20(sp)
    9d24:	dd000415 	stw	r20,16(sp)
    9d28:	dcc00315 	stw	r19,12(sp)
    9d2c:	dc400115 	stw	r17,4(sp)
    9d30:	dc000015 	stw	r16,0(sp)
    9d34:	3025883a 	mov	r18,r6
    9d38:	2800b726 	beq	r5,zero,a018 <_realloc_r+0x310>
    9d3c:	282b883a 	mov	r21,r5
    9d40:	2029883a 	mov	r20,r4
    9d44:	000f1140 	call	f114 <__malloc_lock>
    9d48:	a8bfff17 	ldw	r2,-4(r21)
    9d4c:	043fff04 	movi	r16,-4
    9d50:	90c002c4 	addi	r3,r18,11
    9d54:	01000584 	movi	r4,22
    9d58:	acfffe04 	addi	r19,r21,-8
    9d5c:	1420703a 	and	r16,r2,r16
    9d60:	20c0332e 	bgeu	r4,r3,9e30 <_realloc_r+0x128>
    9d64:	047ffe04 	movi	r17,-8
    9d68:	1c62703a 	and	r17,r3,r17
    9d6c:	8807883a 	mov	r3,r17
    9d70:	88005816 	blt	r17,zero,9ed4 <_realloc_r+0x1cc>
    9d74:	8c805736 	bltu	r17,r18,9ed4 <_realloc_r+0x1cc>
    9d78:	80c0300e 	bge	r16,r3,9e3c <_realloc_r+0x134>
    9d7c:	07000074 	movhi	fp,1
    9d80:	e707af04 	addi	fp,fp,7868
    9d84:	e1c00217 	ldw	r7,8(fp)
    9d88:	9c09883a 	add	r4,r19,r16
    9d8c:	22000117 	ldw	r8,4(r4)
    9d90:	21c06326 	beq	r4,r7,9f20 <_realloc_r+0x218>
    9d94:	017fff84 	movi	r5,-2
    9d98:	414a703a 	and	r5,r8,r5
    9d9c:	214b883a 	add	r5,r4,r5
    9da0:	29800117 	ldw	r6,4(r5)
    9da4:	3180004c 	andi	r6,r6,1
    9da8:	30003f26 	beq	r6,zero,9ea8 <_realloc_r+0x1a0>
    9dac:	1080004c 	andi	r2,r2,1
    9db0:	10008326 	beq	r2,zero,9fc0 <_realloc_r+0x2b8>
    9db4:	900b883a 	mov	r5,r18
    9db8:	a009883a 	mov	r4,r20
    9dbc:	0002e200 	call	2e20 <_malloc_r>
    9dc0:	1025883a 	mov	r18,r2
    9dc4:	10011e26 	beq	r2,zero,a240 <_realloc_r+0x538>
    9dc8:	a93fff17 	ldw	r4,-4(r21)
    9dcc:	10fffe04 	addi	r3,r2,-8
    9dd0:	00bfff84 	movi	r2,-2
    9dd4:	2084703a 	and	r2,r4,r2
    9dd8:	9885883a 	add	r2,r19,r2
    9ddc:	1880ee26 	beq	r3,r2,a198 <_realloc_r+0x490>
    9de0:	81bfff04 	addi	r6,r16,-4
    9de4:	00800904 	movi	r2,36
    9de8:	1180b836 	bltu	r2,r6,a0cc <_realloc_r+0x3c4>
    9dec:	00c004c4 	movi	r3,19
    9df0:	19809636 	bltu	r3,r6,a04c <_realloc_r+0x344>
    9df4:	9005883a 	mov	r2,r18
    9df8:	a807883a 	mov	r3,r21
    9dfc:	19000017 	ldw	r4,0(r3)
    9e00:	11000015 	stw	r4,0(r2)
    9e04:	19000117 	ldw	r4,4(r3)
    9e08:	11000115 	stw	r4,4(r2)
    9e0c:	18c00217 	ldw	r3,8(r3)
    9e10:	10c00215 	stw	r3,8(r2)
    9e14:	a80b883a 	mov	r5,r21
    9e18:	a009883a 	mov	r4,r20
    9e1c:	0007c700 	call	7c70 <_free_r>
    9e20:	a009883a 	mov	r4,r20
    9e24:	000f1380 	call	f138 <__malloc_unlock>
    9e28:	9005883a 	mov	r2,r18
    9e2c:	00001206 	br	9e78 <_realloc_r+0x170>
    9e30:	00c00404 	movi	r3,16
    9e34:	1823883a 	mov	r17,r3
    9e38:	003fce06 	br	9d74 <__alt_data_end+0xff009d74>
    9e3c:	a825883a 	mov	r18,r21
    9e40:	8445c83a 	sub	r2,r16,r17
    9e44:	00c003c4 	movi	r3,15
    9e48:	18802636 	bltu	r3,r2,9ee4 <_realloc_r+0x1dc>
    9e4c:	99800117 	ldw	r6,4(r19)
    9e50:	9c07883a 	add	r3,r19,r16
    9e54:	3180004c 	andi	r6,r6,1
    9e58:	3420b03a 	or	r16,r6,r16
    9e5c:	9c000115 	stw	r16,4(r19)
    9e60:	18800117 	ldw	r2,4(r3)
    9e64:	10800054 	ori	r2,r2,1
    9e68:	18800115 	stw	r2,4(r3)
    9e6c:	a009883a 	mov	r4,r20
    9e70:	000f1380 	call	f138 <__malloc_unlock>
    9e74:	9005883a 	mov	r2,r18
    9e78:	dfc00917 	ldw	ra,36(sp)
    9e7c:	df000817 	ldw	fp,32(sp)
    9e80:	ddc00717 	ldw	r23,28(sp)
    9e84:	dd800617 	ldw	r22,24(sp)
    9e88:	dd400517 	ldw	r21,20(sp)
    9e8c:	dd000417 	ldw	r20,16(sp)
    9e90:	dcc00317 	ldw	r19,12(sp)
    9e94:	dc800217 	ldw	r18,8(sp)
    9e98:	dc400117 	ldw	r17,4(sp)
    9e9c:	dc000017 	ldw	r16,0(sp)
    9ea0:	dec00a04 	addi	sp,sp,40
    9ea4:	f800283a 	ret
    9ea8:	017fff04 	movi	r5,-4
    9eac:	414a703a 	and	r5,r8,r5
    9eb0:	814d883a 	add	r6,r16,r5
    9eb4:	30c01f16 	blt	r6,r3,9f34 <_realloc_r+0x22c>
    9eb8:	20800317 	ldw	r2,12(r4)
    9ebc:	20c00217 	ldw	r3,8(r4)
    9ec0:	a825883a 	mov	r18,r21
    9ec4:	3021883a 	mov	r16,r6
    9ec8:	18800315 	stw	r2,12(r3)
    9ecc:	10c00215 	stw	r3,8(r2)
    9ed0:	003fdb06 	br	9e40 <__alt_data_end+0xff009e40>
    9ed4:	00800304 	movi	r2,12
    9ed8:	a0800015 	stw	r2,0(r20)
    9edc:	0005883a 	mov	r2,zero
    9ee0:	003fe506 	br	9e78 <__alt_data_end+0xff009e78>
    9ee4:	98c00117 	ldw	r3,4(r19)
    9ee8:	9c4b883a 	add	r5,r19,r17
    9eec:	11000054 	ori	r4,r2,1
    9ef0:	18c0004c 	andi	r3,r3,1
    9ef4:	1c62b03a 	or	r17,r3,r17
    9ef8:	9c400115 	stw	r17,4(r19)
    9efc:	29000115 	stw	r4,4(r5)
    9f00:	2885883a 	add	r2,r5,r2
    9f04:	10c00117 	ldw	r3,4(r2)
    9f08:	29400204 	addi	r5,r5,8
    9f0c:	a009883a 	mov	r4,r20
    9f10:	18c00054 	ori	r3,r3,1
    9f14:	10c00115 	stw	r3,4(r2)
    9f18:	0007c700 	call	7c70 <_free_r>
    9f1c:	003fd306 	br	9e6c <__alt_data_end+0xff009e6c>
    9f20:	017fff04 	movi	r5,-4
    9f24:	414a703a 	and	r5,r8,r5
    9f28:	89800404 	addi	r6,r17,16
    9f2c:	8151883a 	add	r8,r16,r5
    9f30:	4180590e 	bge	r8,r6,a098 <_realloc_r+0x390>
    9f34:	1080004c 	andi	r2,r2,1
    9f38:	103f9e1e 	bne	r2,zero,9db4 <__alt_data_end+0xff009db4>
    9f3c:	adbffe17 	ldw	r22,-8(r21)
    9f40:	00bfff04 	movi	r2,-4
    9f44:	9dadc83a 	sub	r22,r19,r22
    9f48:	b1800117 	ldw	r6,4(r22)
    9f4c:	3084703a 	and	r2,r6,r2
    9f50:	20002026 	beq	r4,zero,9fd4 <_realloc_r+0x2cc>
    9f54:	80af883a 	add	r23,r16,r2
    9f58:	b96f883a 	add	r23,r23,r5
    9f5c:	21c05f26 	beq	r4,r7,a0dc <_realloc_r+0x3d4>
    9f60:	b8c01c16 	blt	r23,r3,9fd4 <_realloc_r+0x2cc>
    9f64:	20800317 	ldw	r2,12(r4)
    9f68:	20c00217 	ldw	r3,8(r4)
    9f6c:	81bfff04 	addi	r6,r16,-4
    9f70:	01000904 	movi	r4,36
    9f74:	18800315 	stw	r2,12(r3)
    9f78:	10c00215 	stw	r3,8(r2)
    9f7c:	b0c00217 	ldw	r3,8(r22)
    9f80:	b0800317 	ldw	r2,12(r22)
    9f84:	b4800204 	addi	r18,r22,8
    9f88:	18800315 	stw	r2,12(r3)
    9f8c:	10c00215 	stw	r3,8(r2)
    9f90:	21801b36 	bltu	r4,r6,a000 <_realloc_r+0x2f8>
    9f94:	008004c4 	movi	r2,19
    9f98:	1180352e 	bgeu	r2,r6,a070 <_realloc_r+0x368>
    9f9c:	a8800017 	ldw	r2,0(r21)
    9fa0:	b0800215 	stw	r2,8(r22)
    9fa4:	a8800117 	ldw	r2,4(r21)
    9fa8:	b0800315 	stw	r2,12(r22)
    9fac:	008006c4 	movi	r2,27
    9fb0:	11807f36 	bltu	r2,r6,a1b0 <_realloc_r+0x4a8>
    9fb4:	b0800404 	addi	r2,r22,16
    9fb8:	ad400204 	addi	r21,r21,8
    9fbc:	00002d06 	br	a074 <_realloc_r+0x36c>
    9fc0:	adbffe17 	ldw	r22,-8(r21)
    9fc4:	00bfff04 	movi	r2,-4
    9fc8:	9dadc83a 	sub	r22,r19,r22
    9fcc:	b1000117 	ldw	r4,4(r22)
    9fd0:	2084703a 	and	r2,r4,r2
    9fd4:	b03f7726 	beq	r22,zero,9db4 <__alt_data_end+0xff009db4>
    9fd8:	80af883a 	add	r23,r16,r2
    9fdc:	b8ff7516 	blt	r23,r3,9db4 <__alt_data_end+0xff009db4>
    9fe0:	b0800317 	ldw	r2,12(r22)
    9fe4:	b0c00217 	ldw	r3,8(r22)
    9fe8:	81bfff04 	addi	r6,r16,-4
    9fec:	01000904 	movi	r4,36
    9ff0:	18800315 	stw	r2,12(r3)
    9ff4:	10c00215 	stw	r3,8(r2)
    9ff8:	b4800204 	addi	r18,r22,8
    9ffc:	21bfe52e 	bgeu	r4,r6,9f94 <__alt_data_end+0xff009f94>
    a000:	a80b883a 	mov	r5,r21
    a004:	9009883a 	mov	r4,r18
    a008:	0008a880 	call	8a88 <memmove>
    a00c:	b821883a 	mov	r16,r23
    a010:	b027883a 	mov	r19,r22
    a014:	003f8a06 	br	9e40 <__alt_data_end+0xff009e40>
    a018:	300b883a 	mov	r5,r6
    a01c:	dfc00917 	ldw	ra,36(sp)
    a020:	df000817 	ldw	fp,32(sp)
    a024:	ddc00717 	ldw	r23,28(sp)
    a028:	dd800617 	ldw	r22,24(sp)
    a02c:	dd400517 	ldw	r21,20(sp)
    a030:	dd000417 	ldw	r20,16(sp)
    a034:	dcc00317 	ldw	r19,12(sp)
    a038:	dc800217 	ldw	r18,8(sp)
    a03c:	dc400117 	ldw	r17,4(sp)
    a040:	dc000017 	ldw	r16,0(sp)
    a044:	dec00a04 	addi	sp,sp,40
    a048:	0002e201 	jmpi	2e20 <_malloc_r>
    a04c:	a8c00017 	ldw	r3,0(r21)
    a050:	90c00015 	stw	r3,0(r18)
    a054:	a8c00117 	ldw	r3,4(r21)
    a058:	90c00115 	stw	r3,4(r18)
    a05c:	00c006c4 	movi	r3,27
    a060:	19804536 	bltu	r3,r6,a178 <_realloc_r+0x470>
    a064:	90800204 	addi	r2,r18,8
    a068:	a8c00204 	addi	r3,r21,8
    a06c:	003f6306 	br	9dfc <__alt_data_end+0xff009dfc>
    a070:	9005883a 	mov	r2,r18
    a074:	a8c00017 	ldw	r3,0(r21)
    a078:	b821883a 	mov	r16,r23
    a07c:	b027883a 	mov	r19,r22
    a080:	10c00015 	stw	r3,0(r2)
    a084:	a8c00117 	ldw	r3,4(r21)
    a088:	10c00115 	stw	r3,4(r2)
    a08c:	a8c00217 	ldw	r3,8(r21)
    a090:	10c00215 	stw	r3,8(r2)
    a094:	003f6a06 	br	9e40 <__alt_data_end+0xff009e40>
    a098:	9c67883a 	add	r19,r19,r17
    a09c:	4445c83a 	sub	r2,r8,r17
    a0a0:	e4c00215 	stw	r19,8(fp)
    a0a4:	10800054 	ori	r2,r2,1
    a0a8:	98800115 	stw	r2,4(r19)
    a0ac:	a8bfff17 	ldw	r2,-4(r21)
    a0b0:	a009883a 	mov	r4,r20
    a0b4:	1080004c 	andi	r2,r2,1
    a0b8:	1462b03a 	or	r17,r2,r17
    a0bc:	ac7fff15 	stw	r17,-4(r21)
    a0c0:	000f1380 	call	f138 <__malloc_unlock>
    a0c4:	a805883a 	mov	r2,r21
    a0c8:	003f6b06 	br	9e78 <__alt_data_end+0xff009e78>
    a0cc:	a80b883a 	mov	r5,r21
    a0d0:	9009883a 	mov	r4,r18
    a0d4:	0008a880 	call	8a88 <memmove>
    a0d8:	003f4e06 	br	9e14 <__alt_data_end+0xff009e14>
    a0dc:	89000404 	addi	r4,r17,16
    a0e0:	b93fbc16 	blt	r23,r4,9fd4 <__alt_data_end+0xff009fd4>
    a0e4:	b0800317 	ldw	r2,12(r22)
    a0e8:	b0c00217 	ldw	r3,8(r22)
    a0ec:	81bfff04 	addi	r6,r16,-4
    a0f0:	01000904 	movi	r4,36
    a0f4:	18800315 	stw	r2,12(r3)
    a0f8:	10c00215 	stw	r3,8(r2)
    a0fc:	b4800204 	addi	r18,r22,8
    a100:	21804336 	bltu	r4,r6,a210 <_realloc_r+0x508>
    a104:	008004c4 	movi	r2,19
    a108:	11803f2e 	bgeu	r2,r6,a208 <_realloc_r+0x500>
    a10c:	a8800017 	ldw	r2,0(r21)
    a110:	b0800215 	stw	r2,8(r22)
    a114:	a8800117 	ldw	r2,4(r21)
    a118:	b0800315 	stw	r2,12(r22)
    a11c:	008006c4 	movi	r2,27
    a120:	11803f36 	bltu	r2,r6,a220 <_realloc_r+0x518>
    a124:	b0800404 	addi	r2,r22,16
    a128:	ad400204 	addi	r21,r21,8
    a12c:	a8c00017 	ldw	r3,0(r21)
    a130:	10c00015 	stw	r3,0(r2)
    a134:	a8c00117 	ldw	r3,4(r21)
    a138:	10c00115 	stw	r3,4(r2)
    a13c:	a8c00217 	ldw	r3,8(r21)
    a140:	10c00215 	stw	r3,8(r2)
    a144:	b447883a 	add	r3,r22,r17
    a148:	bc45c83a 	sub	r2,r23,r17
    a14c:	e0c00215 	stw	r3,8(fp)
    a150:	10800054 	ori	r2,r2,1
    a154:	18800115 	stw	r2,4(r3)
    a158:	b0800117 	ldw	r2,4(r22)
    a15c:	a009883a 	mov	r4,r20
    a160:	1080004c 	andi	r2,r2,1
    a164:	1462b03a 	or	r17,r2,r17
    a168:	b4400115 	stw	r17,4(r22)
    a16c:	000f1380 	call	f138 <__malloc_unlock>
    a170:	9005883a 	mov	r2,r18
    a174:	003f4006 	br	9e78 <__alt_data_end+0xff009e78>
    a178:	a8c00217 	ldw	r3,8(r21)
    a17c:	90c00215 	stw	r3,8(r18)
    a180:	a8c00317 	ldw	r3,12(r21)
    a184:	90c00315 	stw	r3,12(r18)
    a188:	30801126 	beq	r6,r2,a1d0 <_realloc_r+0x4c8>
    a18c:	90800404 	addi	r2,r18,16
    a190:	a8c00404 	addi	r3,r21,16
    a194:	003f1906 	br	9dfc <__alt_data_end+0xff009dfc>
    a198:	90ffff17 	ldw	r3,-4(r18)
    a19c:	00bfff04 	movi	r2,-4
    a1a0:	a825883a 	mov	r18,r21
    a1a4:	1884703a 	and	r2,r3,r2
    a1a8:	80a1883a 	add	r16,r16,r2
    a1ac:	003f2406 	br	9e40 <__alt_data_end+0xff009e40>
    a1b0:	a8800217 	ldw	r2,8(r21)
    a1b4:	b0800415 	stw	r2,16(r22)
    a1b8:	a8800317 	ldw	r2,12(r21)
    a1bc:	b0800515 	stw	r2,20(r22)
    a1c0:	31000a26 	beq	r6,r4,a1ec <_realloc_r+0x4e4>
    a1c4:	b0800604 	addi	r2,r22,24
    a1c8:	ad400404 	addi	r21,r21,16
    a1cc:	003fa906 	br	a074 <__alt_data_end+0xff00a074>
    a1d0:	a9000417 	ldw	r4,16(r21)
    a1d4:	90800604 	addi	r2,r18,24
    a1d8:	a8c00604 	addi	r3,r21,24
    a1dc:	91000415 	stw	r4,16(r18)
    a1e0:	a9000517 	ldw	r4,20(r21)
    a1e4:	91000515 	stw	r4,20(r18)
    a1e8:	003f0406 	br	9dfc <__alt_data_end+0xff009dfc>
    a1ec:	a8c00417 	ldw	r3,16(r21)
    a1f0:	ad400604 	addi	r21,r21,24
    a1f4:	b0800804 	addi	r2,r22,32
    a1f8:	b0c00615 	stw	r3,24(r22)
    a1fc:	a8ffff17 	ldw	r3,-4(r21)
    a200:	b0c00715 	stw	r3,28(r22)
    a204:	003f9b06 	br	a074 <__alt_data_end+0xff00a074>
    a208:	9005883a 	mov	r2,r18
    a20c:	003fc706 	br	a12c <__alt_data_end+0xff00a12c>
    a210:	a80b883a 	mov	r5,r21
    a214:	9009883a 	mov	r4,r18
    a218:	0008a880 	call	8a88 <memmove>
    a21c:	003fc906 	br	a144 <__alt_data_end+0xff00a144>
    a220:	a8800217 	ldw	r2,8(r21)
    a224:	b0800415 	stw	r2,16(r22)
    a228:	a8800317 	ldw	r2,12(r21)
    a22c:	b0800515 	stw	r2,20(r22)
    a230:	31000726 	beq	r6,r4,a250 <_realloc_r+0x548>
    a234:	b0800604 	addi	r2,r22,24
    a238:	ad400404 	addi	r21,r21,16
    a23c:	003fbb06 	br	a12c <__alt_data_end+0xff00a12c>
    a240:	a009883a 	mov	r4,r20
    a244:	000f1380 	call	f138 <__malloc_unlock>
    a248:	0005883a 	mov	r2,zero
    a24c:	003f0a06 	br	9e78 <__alt_data_end+0xff009e78>
    a250:	a8c00417 	ldw	r3,16(r21)
    a254:	ad400604 	addi	r21,r21,24
    a258:	b0800804 	addi	r2,r22,32
    a25c:	b0c00615 	stw	r3,24(r22)
    a260:	a8ffff17 	ldw	r3,-4(r21)
    a264:	b0c00715 	stw	r3,28(r22)
    a268:	003fb006 	br	a12c <__alt_data_end+0xff00a12c>

0000a26c <__fpclassifyd>:
    a26c:	00a00034 	movhi	r2,32768
    a270:	10bfffc4 	addi	r2,r2,-1
    a274:	2884703a 	and	r2,r5,r2
    a278:	10000726 	beq	r2,zero,a298 <__fpclassifyd+0x2c>
    a27c:	00fffc34 	movhi	r3,65520
    a280:	019ff834 	movhi	r6,32736
    a284:	28c7883a 	add	r3,r5,r3
    a288:	31bfffc4 	addi	r6,r6,-1
    a28c:	30c00536 	bltu	r6,r3,a2a4 <__fpclassifyd+0x38>
    a290:	00800104 	movi	r2,4
    a294:	f800283a 	ret
    a298:	2000021e 	bne	r4,zero,a2a4 <__fpclassifyd+0x38>
    a29c:	00800084 	movi	r2,2
    a2a0:	f800283a 	ret
    a2a4:	00dffc34 	movhi	r3,32752
    a2a8:	019ff834 	movhi	r6,32736
    a2ac:	28cb883a 	add	r5,r5,r3
    a2b0:	31bfffc4 	addi	r6,r6,-1
    a2b4:	317ff62e 	bgeu	r6,r5,a290 <__alt_data_end+0xff00a290>
    a2b8:	01400434 	movhi	r5,16
    a2bc:	297fffc4 	addi	r5,r5,-1
    a2c0:	28800236 	bltu	r5,r2,a2cc <__fpclassifyd+0x60>
    a2c4:	008000c4 	movi	r2,3
    a2c8:	f800283a 	ret
    a2cc:	10c00226 	beq	r2,r3,a2d8 <__fpclassifyd+0x6c>
    a2d0:	0005883a 	mov	r2,zero
    a2d4:	f800283a 	ret
    a2d8:	2005003a 	cmpeq	r2,r4,zero
    a2dc:	f800283a 	ret

0000a2e0 <__sread>:
    a2e0:	defffe04 	addi	sp,sp,-8
    a2e4:	dc000015 	stw	r16,0(sp)
    a2e8:	2821883a 	mov	r16,r5
    a2ec:	2940038f 	ldh	r5,14(r5)
    a2f0:	dfc00115 	stw	ra,4(sp)
    a2f4:	000c0d40 	call	c0d4 <_read_r>
    a2f8:	10000716 	blt	r2,zero,a318 <__sread+0x38>
    a2fc:	80c01417 	ldw	r3,80(r16)
    a300:	1887883a 	add	r3,r3,r2
    a304:	80c01415 	stw	r3,80(r16)
    a308:	dfc00117 	ldw	ra,4(sp)
    a30c:	dc000017 	ldw	r16,0(sp)
    a310:	dec00204 	addi	sp,sp,8
    a314:	f800283a 	ret
    a318:	80c0030b 	ldhu	r3,12(r16)
    a31c:	18fbffcc 	andi	r3,r3,61439
    a320:	80c0030d 	sth	r3,12(r16)
    a324:	dfc00117 	ldw	ra,4(sp)
    a328:	dc000017 	ldw	r16,0(sp)
    a32c:	dec00204 	addi	sp,sp,8
    a330:	f800283a 	ret

0000a334 <__seofread>:
    a334:	0005883a 	mov	r2,zero
    a338:	f800283a 	ret

0000a33c <__swrite>:
    a33c:	2880030b 	ldhu	r2,12(r5)
    a340:	defffb04 	addi	sp,sp,-20
    a344:	dcc00315 	stw	r19,12(sp)
    a348:	dc800215 	stw	r18,8(sp)
    a34c:	dc400115 	stw	r17,4(sp)
    a350:	dc000015 	stw	r16,0(sp)
    a354:	dfc00415 	stw	ra,16(sp)
    a358:	10c0400c 	andi	r3,r2,256
    a35c:	2821883a 	mov	r16,r5
    a360:	2023883a 	mov	r17,r4
    a364:	3025883a 	mov	r18,r6
    a368:	3827883a 	mov	r19,r7
    a36c:	18000526 	beq	r3,zero,a384 <__swrite+0x48>
    a370:	2940038f 	ldh	r5,14(r5)
    a374:	01c00084 	movi	r7,2
    a378:	000d883a 	mov	r6,zero
    a37c:	000c0740 	call	c074 <_lseek_r>
    a380:	8080030b 	ldhu	r2,12(r16)
    a384:	8140038f 	ldh	r5,14(r16)
    a388:	10bbffcc 	andi	r2,r2,61439
    a38c:	980f883a 	mov	r7,r19
    a390:	900d883a 	mov	r6,r18
    a394:	8809883a 	mov	r4,r17
    a398:	8080030d 	sth	r2,12(r16)
    a39c:	dfc00417 	ldw	ra,16(sp)
    a3a0:	dcc00317 	ldw	r19,12(sp)
    a3a4:	dc800217 	ldw	r18,8(sp)
    a3a8:	dc400117 	ldw	r17,4(sp)
    a3ac:	dc000017 	ldw	r16,0(sp)
    a3b0:	dec00504 	addi	sp,sp,20
    a3b4:	000bb401 	jmpi	bb40 <_write_r>

0000a3b8 <__sseek>:
    a3b8:	defffe04 	addi	sp,sp,-8
    a3bc:	dc000015 	stw	r16,0(sp)
    a3c0:	2821883a 	mov	r16,r5
    a3c4:	2940038f 	ldh	r5,14(r5)
    a3c8:	dfc00115 	stw	ra,4(sp)
    a3cc:	000c0740 	call	c074 <_lseek_r>
    a3d0:	00ffffc4 	movi	r3,-1
    a3d4:	10c00826 	beq	r2,r3,a3f8 <__sseek+0x40>
    a3d8:	80c0030b 	ldhu	r3,12(r16)
    a3dc:	80801415 	stw	r2,80(r16)
    a3e0:	18c40014 	ori	r3,r3,4096
    a3e4:	80c0030d 	sth	r3,12(r16)
    a3e8:	dfc00117 	ldw	ra,4(sp)
    a3ec:	dc000017 	ldw	r16,0(sp)
    a3f0:	dec00204 	addi	sp,sp,8
    a3f4:	f800283a 	ret
    a3f8:	80c0030b 	ldhu	r3,12(r16)
    a3fc:	18fbffcc 	andi	r3,r3,61439
    a400:	80c0030d 	sth	r3,12(r16)
    a404:	dfc00117 	ldw	ra,4(sp)
    a408:	dc000017 	ldw	r16,0(sp)
    a40c:	dec00204 	addi	sp,sp,8
    a410:	f800283a 	ret

0000a414 <__sclose>:
    a414:	2940038f 	ldh	r5,14(r5)
    a418:	000bba01 	jmpi	bba0 <_close_r>

0000a41c <strcmp>:
    a41c:	2144b03a 	or	r2,r4,r5
    a420:	108000cc 	andi	r2,r2,3
    a424:	1000171e 	bne	r2,zero,a484 <strcmp+0x68>
    a428:	20800017 	ldw	r2,0(r4)
    a42c:	28c00017 	ldw	r3,0(r5)
    a430:	10c0141e 	bne	r2,r3,a484 <strcmp+0x68>
    a434:	027fbff4 	movhi	r9,65279
    a438:	4a7fbfc4 	addi	r9,r9,-257
    a43c:	0086303a 	nor	r3,zero,r2
    a440:	02202074 	movhi	r8,32897
    a444:	1245883a 	add	r2,r2,r9
    a448:	42202004 	addi	r8,r8,-32640
    a44c:	10c4703a 	and	r2,r2,r3
    a450:	1204703a 	and	r2,r2,r8
    a454:	10000226 	beq	r2,zero,a460 <strcmp+0x44>
    a458:	00002306 	br	a4e8 <strcmp+0xcc>
    a45c:	1000221e 	bne	r2,zero,a4e8 <strcmp+0xcc>
    a460:	21000104 	addi	r4,r4,4
    a464:	20c00017 	ldw	r3,0(r4)
    a468:	29400104 	addi	r5,r5,4
    a46c:	29800017 	ldw	r6,0(r5)
    a470:	1a4f883a 	add	r7,r3,r9
    a474:	00c4303a 	nor	r2,zero,r3
    a478:	3884703a 	and	r2,r7,r2
    a47c:	1204703a 	and	r2,r2,r8
    a480:	19bff626 	beq	r3,r6,a45c <__alt_data_end+0xff00a45c>
    a484:	20800003 	ldbu	r2,0(r4)
    a488:	10c03fcc 	andi	r3,r2,255
    a48c:	18c0201c 	xori	r3,r3,128
    a490:	18ffe004 	addi	r3,r3,-128
    a494:	18000c26 	beq	r3,zero,a4c8 <strcmp+0xac>
    a498:	29800007 	ldb	r6,0(r5)
    a49c:	19800326 	beq	r3,r6,a4ac <strcmp+0x90>
    a4a0:	00001306 	br	a4f0 <strcmp+0xd4>
    a4a4:	29800007 	ldb	r6,0(r5)
    a4a8:	11800b1e 	bne	r2,r6,a4d8 <strcmp+0xbc>
    a4ac:	21000044 	addi	r4,r4,1
    a4b0:	20c00003 	ldbu	r3,0(r4)
    a4b4:	29400044 	addi	r5,r5,1
    a4b8:	18803fcc 	andi	r2,r3,255
    a4bc:	1080201c 	xori	r2,r2,128
    a4c0:	10bfe004 	addi	r2,r2,-128
    a4c4:	103ff71e 	bne	r2,zero,a4a4 <__alt_data_end+0xff00a4a4>
    a4c8:	0007883a 	mov	r3,zero
    a4cc:	28800003 	ldbu	r2,0(r5)
    a4d0:	1885c83a 	sub	r2,r3,r2
    a4d4:	f800283a 	ret
    a4d8:	28800003 	ldbu	r2,0(r5)
    a4dc:	18c03fcc 	andi	r3,r3,255
    a4e0:	1885c83a 	sub	r2,r3,r2
    a4e4:	f800283a 	ret
    a4e8:	0005883a 	mov	r2,zero
    a4ec:	f800283a 	ret
    a4f0:	10c03fcc 	andi	r3,r2,255
    a4f4:	003ff506 	br	a4cc <__alt_data_end+0xff00a4cc>

0000a4f8 <__sprint_r.part.0>:
    a4f8:	28801917 	ldw	r2,100(r5)
    a4fc:	defff604 	addi	sp,sp,-40
    a500:	dd400515 	stw	r21,20(sp)
    a504:	dfc00915 	stw	ra,36(sp)
    a508:	df000815 	stw	fp,32(sp)
    a50c:	ddc00715 	stw	r23,28(sp)
    a510:	dd800615 	stw	r22,24(sp)
    a514:	dd000415 	stw	r20,16(sp)
    a518:	dcc00315 	stw	r19,12(sp)
    a51c:	dc800215 	stw	r18,8(sp)
    a520:	dc400115 	stw	r17,4(sp)
    a524:	dc000015 	stw	r16,0(sp)
    a528:	1088000c 	andi	r2,r2,8192
    a52c:	302b883a 	mov	r21,r6
    a530:	10002e26 	beq	r2,zero,a5ec <__sprint_r.part.0+0xf4>
    a534:	30800217 	ldw	r2,8(r6)
    a538:	35800017 	ldw	r22,0(r6)
    a53c:	10002926 	beq	r2,zero,a5e4 <__sprint_r.part.0+0xec>
    a540:	2827883a 	mov	r19,r5
    a544:	2029883a 	mov	r20,r4
    a548:	b5c00104 	addi	r23,r22,4
    a54c:	04bfffc4 	movi	r18,-1
    a550:	bc400017 	ldw	r17,0(r23)
    a554:	b4000017 	ldw	r16,0(r22)
    a558:	0039883a 	mov	fp,zero
    a55c:	8822d0ba 	srli	r17,r17,2
    a560:	8800031e 	bne	r17,zero,a570 <__sprint_r.part.0+0x78>
    a564:	00001806 	br	a5c8 <__sprint_r.part.0+0xd0>
    a568:	84000104 	addi	r16,r16,4
    a56c:	8f001526 	beq	r17,fp,a5c4 <__sprint_r.part.0+0xcc>
    a570:	81400017 	ldw	r5,0(r16)
    a574:	980d883a 	mov	r6,r19
    a578:	a009883a 	mov	r4,r20
    a57c:	000bf200 	call	bf20 <_fputwc_r>
    a580:	e7000044 	addi	fp,fp,1
    a584:	14bff81e 	bne	r2,r18,a568 <__alt_data_end+0xff00a568>
    a588:	9005883a 	mov	r2,r18
    a58c:	a8000215 	stw	zero,8(r21)
    a590:	a8000115 	stw	zero,4(r21)
    a594:	dfc00917 	ldw	ra,36(sp)
    a598:	df000817 	ldw	fp,32(sp)
    a59c:	ddc00717 	ldw	r23,28(sp)
    a5a0:	dd800617 	ldw	r22,24(sp)
    a5a4:	dd400517 	ldw	r21,20(sp)
    a5a8:	dd000417 	ldw	r20,16(sp)
    a5ac:	dcc00317 	ldw	r19,12(sp)
    a5b0:	dc800217 	ldw	r18,8(sp)
    a5b4:	dc400117 	ldw	r17,4(sp)
    a5b8:	dc000017 	ldw	r16,0(sp)
    a5bc:	dec00a04 	addi	sp,sp,40
    a5c0:	f800283a 	ret
    a5c4:	a8800217 	ldw	r2,8(r21)
    a5c8:	8c63883a 	add	r17,r17,r17
    a5cc:	8c63883a 	add	r17,r17,r17
    a5d0:	1445c83a 	sub	r2,r2,r17
    a5d4:	a8800215 	stw	r2,8(r21)
    a5d8:	b5800204 	addi	r22,r22,8
    a5dc:	bdc00204 	addi	r23,r23,8
    a5e0:	103fdb1e 	bne	r2,zero,a550 <__alt_data_end+0xff00a550>
    a5e4:	0005883a 	mov	r2,zero
    a5e8:	003fe806 	br	a58c <__alt_data_end+0xff00a58c>
    a5ec:	0007f800 	call	7f80 <__sfvwrite_r>
    a5f0:	003fe606 	br	a58c <__alt_data_end+0xff00a58c>

0000a5f4 <__sprint_r>:
    a5f4:	30c00217 	ldw	r3,8(r6)
    a5f8:	18000126 	beq	r3,zero,a600 <__sprint_r+0xc>
    a5fc:	000a4f81 	jmpi	a4f8 <__sprint_r.part.0>
    a600:	30000115 	stw	zero,4(r6)
    a604:	0005883a 	mov	r2,zero
    a608:	f800283a 	ret

0000a60c <___vfiprintf_internal_r>:
    a60c:	deffc904 	addi	sp,sp,-220
    a610:	df003515 	stw	fp,212(sp)
    a614:	dd003115 	stw	r20,196(sp)
    a618:	dfc03615 	stw	ra,216(sp)
    a61c:	ddc03415 	stw	r23,208(sp)
    a620:	dd803315 	stw	r22,204(sp)
    a624:	dd403215 	stw	r21,200(sp)
    a628:	dcc03015 	stw	r19,192(sp)
    a62c:	dc802f15 	stw	r18,188(sp)
    a630:	dc402e15 	stw	r17,184(sp)
    a634:	dc002d15 	stw	r16,180(sp)
    a638:	d9002015 	stw	r4,128(sp)
    a63c:	d9c02215 	stw	r7,136(sp)
    a640:	2829883a 	mov	r20,r5
    a644:	3039883a 	mov	fp,r6
    a648:	20000226 	beq	r4,zero,a654 <___vfiprintf_internal_r+0x48>
    a64c:	20800e17 	ldw	r2,56(r4)
    a650:	1000cf26 	beq	r2,zero,a990 <___vfiprintf_internal_r+0x384>
    a654:	a080030b 	ldhu	r2,12(r20)
    a658:	10c8000c 	andi	r3,r2,8192
    a65c:	1800061e 	bne	r3,zero,a678 <___vfiprintf_internal_r+0x6c>
    a660:	a1001917 	ldw	r4,100(r20)
    a664:	00f7ffc4 	movi	r3,-8193
    a668:	10880014 	ori	r2,r2,8192
    a66c:	20c6703a 	and	r3,r4,r3
    a670:	a080030d 	sth	r2,12(r20)
    a674:	a0c01915 	stw	r3,100(r20)
    a678:	10c0020c 	andi	r3,r2,8
    a67c:	1800a926 	beq	r3,zero,a924 <___vfiprintf_internal_r+0x318>
    a680:	a0c00417 	ldw	r3,16(r20)
    a684:	1800a726 	beq	r3,zero,a924 <___vfiprintf_internal_r+0x318>
    a688:	1080068c 	andi	r2,r2,26
    a68c:	00c00284 	movi	r3,10
    a690:	10c0ac26 	beq	r2,r3,a944 <___vfiprintf_internal_r+0x338>
    a694:	da801a04 	addi	r10,sp,104
    a698:	da801e15 	stw	r10,120(sp)
    a69c:	d8801e17 	ldw	r2,120(sp)
    a6a0:	da8019c4 	addi	r10,sp,103
    a6a4:	05800074 	movhi	r22,1
    a6a8:	05c00074 	movhi	r23,1
    a6ac:	da801f15 	stw	r10,124(sp)
    a6b0:	1295c83a 	sub	r10,r2,r10
    a6b4:	b5876004 	addi	r22,r22,7552
    a6b8:	bdc75c04 	addi	r23,r23,7536
    a6bc:	dec01a15 	stw	sp,104(sp)
    a6c0:	d8001c15 	stw	zero,112(sp)
    a6c4:	d8001b15 	stw	zero,108(sp)
    a6c8:	d8002615 	stw	zero,152(sp)
    a6cc:	d8002315 	stw	zero,140(sp)
    a6d0:	da802715 	stw	r10,156(sp)
    a6d4:	d811883a 	mov	r8,sp
    a6d8:	dd002115 	stw	r20,132(sp)
    a6dc:	e021883a 	mov	r16,fp
    a6e0:	80800007 	ldb	r2,0(r16)
    a6e4:	1003ea26 	beq	r2,zero,b690 <___vfiprintf_internal_r+0x1084>
    a6e8:	00c00944 	movi	r3,37
    a6ec:	8025883a 	mov	r18,r16
    a6f0:	10c0021e 	bne	r2,r3,a6fc <___vfiprintf_internal_r+0xf0>
    a6f4:	00001606 	br	a750 <___vfiprintf_internal_r+0x144>
    a6f8:	10c00326 	beq	r2,r3,a708 <___vfiprintf_internal_r+0xfc>
    a6fc:	94800044 	addi	r18,r18,1
    a700:	90800007 	ldb	r2,0(r18)
    a704:	103ffc1e 	bne	r2,zero,a6f8 <__alt_data_end+0xff00a6f8>
    a708:	9423c83a 	sub	r17,r18,r16
    a70c:	88001026 	beq	r17,zero,a750 <___vfiprintf_internal_r+0x144>
    a710:	d8c01c17 	ldw	r3,112(sp)
    a714:	d8801b17 	ldw	r2,108(sp)
    a718:	44000015 	stw	r16,0(r8)
    a71c:	88c7883a 	add	r3,r17,r3
    a720:	10800044 	addi	r2,r2,1
    a724:	44400115 	stw	r17,4(r8)
    a728:	d8c01c15 	stw	r3,112(sp)
    a72c:	d8801b15 	stw	r2,108(sp)
    a730:	010001c4 	movi	r4,7
    a734:	2080760e 	bge	r4,r2,a910 <___vfiprintf_internal_r+0x304>
    a738:	1803821e 	bne	r3,zero,b544 <___vfiprintf_internal_r+0xf38>
    a73c:	da802317 	ldw	r10,140(sp)
    a740:	d8001b15 	stw	zero,108(sp)
    a744:	d811883a 	mov	r8,sp
    a748:	5455883a 	add	r10,r10,r17
    a74c:	da802315 	stw	r10,140(sp)
    a750:	90800007 	ldb	r2,0(r18)
    a754:	10044626 	beq	r2,zero,b870 <___vfiprintf_internal_r+0x1264>
    a758:	90c00047 	ldb	r3,1(r18)
    a75c:	94000044 	addi	r16,r18,1
    a760:	d8001d85 	stb	zero,118(sp)
    a764:	0009883a 	mov	r4,zero
    a768:	000f883a 	mov	r7,zero
    a76c:	027fffc4 	movi	r9,-1
    a770:	0023883a 	mov	r17,zero
    a774:	0029883a 	mov	r20,zero
    a778:	01401604 	movi	r5,88
    a77c:	01800244 	movi	r6,9
    a780:	03400a84 	movi	r13,42
    a784:	03001b04 	movi	r12,108
    a788:	84000044 	addi	r16,r16,1
    a78c:	18bff804 	addi	r2,r3,-32
    a790:	28827336 	bltu	r5,r2,b160 <___vfiprintf_internal_r+0xb54>
    a794:	100490ba 	slli	r2,r2,2
    a798:	02800074 	movhi	r10,1
    a79c:	52a9eb04 	addi	r10,r10,-22612
    a7a0:	1285883a 	add	r2,r2,r10
    a7a4:	10800017 	ldw	r2,0(r2)
    a7a8:	1000683a 	jmp	r2
    a7ac:	0000ae94 	movui	zero,698
    a7b0:	0000b160 	cmpeqi	zero,zero,709
    a7b4:	0000b160 	cmpeqi	zero,zero,709
    a7b8:	0000aeb4 	movhi	zero,698
    a7bc:	0000b160 	cmpeqi	zero,zero,709
    a7c0:	0000b160 	cmpeqi	zero,zero,709
    a7c4:	0000b160 	cmpeqi	zero,zero,709
    a7c8:	0000b160 	cmpeqi	zero,zero,709
    a7cc:	0000b160 	cmpeqi	zero,zero,709
    a7d0:	0000b160 	cmpeqi	zero,zero,709
    a7d4:	0000b09c 	xori	zero,zero,706
    a7d8:	0000b0b8 	rdprs	zero,zero,706
    a7dc:	0000b160 	cmpeqi	zero,zero,709
    a7e0:	0000a9a0 	cmpeqi	zero,zero,678
    a7e4:	0000b0c8 	cmpgei	zero,zero,707
    a7e8:	0000b160 	cmpeqi	zero,zero,709
    a7ec:	0000aec0 	call	aec <init_LCD+0x74>
    a7f0:	0000aecc 	andi	zero,zero,699
    a7f4:	0000aecc 	andi	zero,zero,699
    a7f8:	0000aecc 	andi	zero,zero,699
    a7fc:	0000aecc 	andi	zero,zero,699
    a800:	0000aecc 	andi	zero,zero,699
    a804:	0000aecc 	andi	zero,zero,699
    a808:	0000aecc 	andi	zero,zero,699
    a80c:	0000aecc 	andi	zero,zero,699
    a810:	0000aecc 	andi	zero,zero,699
    a814:	0000b160 	cmpeqi	zero,zero,709
    a818:	0000b160 	cmpeqi	zero,zero,709
    a81c:	0000b160 	cmpeqi	zero,zero,709
    a820:	0000b160 	cmpeqi	zero,zero,709
    a824:	0000b160 	cmpeqi	zero,zero,709
    a828:	0000b160 	cmpeqi	zero,zero,709
    a82c:	0000b160 	cmpeqi	zero,zero,709
    a830:	0000b160 	cmpeqi	zero,zero,709
    a834:	0000b160 	cmpeqi	zero,zero,709
    a838:	0000b160 	cmpeqi	zero,zero,709
    a83c:	0000aef8 	rdprs	zero,zero,699
    a840:	0000b160 	cmpeqi	zero,zero,709
    a844:	0000b160 	cmpeqi	zero,zero,709
    a848:	0000b160 	cmpeqi	zero,zero,709
    a84c:	0000b160 	cmpeqi	zero,zero,709
    a850:	0000b160 	cmpeqi	zero,zero,709
    a854:	0000b160 	cmpeqi	zero,zero,709
    a858:	0000b160 	cmpeqi	zero,zero,709
    a85c:	0000b160 	cmpeqi	zero,zero,709
    a860:	0000b160 	cmpeqi	zero,zero,709
    a864:	0000b160 	cmpeqi	zero,zero,709
    a868:	0000af30 	cmpltui	zero,zero,700
    a86c:	0000b160 	cmpeqi	zero,zero,709
    a870:	0000b160 	cmpeqi	zero,zero,709
    a874:	0000b160 	cmpeqi	zero,zero,709
    a878:	0000b160 	cmpeqi	zero,zero,709
    a87c:	0000b160 	cmpeqi	zero,zero,709
    a880:	0000af88 	cmpgei	zero,zero,702
    a884:	0000b160 	cmpeqi	zero,zero,709
    a888:	0000b160 	cmpeqi	zero,zero,709
    a88c:	0000aff8 	rdprs	zero,zero,703
    a890:	0000b160 	cmpeqi	zero,zero,709
    a894:	0000b160 	cmpeqi	zero,zero,709
    a898:	0000b160 	cmpeqi	zero,zero,709
    a89c:	0000b160 	cmpeqi	zero,zero,709
    a8a0:	0000b160 	cmpeqi	zero,zero,709
    a8a4:	0000b160 	cmpeqi	zero,zero,709
    a8a8:	0000b160 	cmpeqi	zero,zero,709
    a8ac:	0000b160 	cmpeqi	zero,zero,709
    a8b0:	0000b160 	cmpeqi	zero,zero,709
    a8b4:	0000b160 	cmpeqi	zero,zero,709
    a8b8:	0000ada4 	muli	zero,zero,694
    a8bc:	0000add0 	cmplti	zero,zero,695
    a8c0:	0000b160 	cmpeqi	zero,zero,709
    a8c4:	0000b160 	cmpeqi	zero,zero,709
    a8c8:	0000b160 	cmpeqi	zero,zero,709
    a8cc:	0000b108 	cmpgei	zero,zero,708
    a8d0:	0000add0 	cmplti	zero,zero,695
    a8d4:	0000b160 	cmpeqi	zero,zero,709
    a8d8:	0000b160 	cmpeqi	zero,zero,709
    a8dc:	0000ac64 	muli	zero,zero,689
    a8e0:	0000b160 	cmpeqi	zero,zero,709
    a8e4:	0000ac74 	movhi	zero,689
    a8e8:	0000acb0 	cmpltui	zero,zero,690
    a8ec:	0000a9ac 	andhi	zero,zero,678
    a8f0:	0000ac58 	cmpnei	zero,zero,689
    a8f4:	0000b160 	cmpeqi	zero,zero,709
    a8f8:	0000b034 	movhi	zero,704
    a8fc:	0000b160 	cmpeqi	zero,zero,709
    a900:	0000b08c 	andi	zero,zero,706
    a904:	0000b160 	cmpeqi	zero,zero,709
    a908:	0000b160 	cmpeqi	zero,zero,709
    a90c:	0000ad50 	cmplti	zero,zero,693
    a910:	42000204 	addi	r8,r8,8
    a914:	da802317 	ldw	r10,140(sp)
    a918:	5455883a 	add	r10,r10,r17
    a91c:	da802315 	stw	r10,140(sp)
    a920:	003f8b06 	br	a750 <__alt_data_end+0xff00a750>
    a924:	d9002017 	ldw	r4,128(sp)
    a928:	a00b883a 	mov	r5,r20
    a92c:	0005b280 	call	5b28 <__swsetup_r>
    a930:	1003b11e 	bne	r2,zero,b7f8 <___vfiprintf_internal_r+0x11ec>
    a934:	a080030b 	ldhu	r2,12(r20)
    a938:	00c00284 	movi	r3,10
    a93c:	1080068c 	andi	r2,r2,26
    a940:	10ff541e 	bne	r2,r3,a694 <__alt_data_end+0xff00a694>
    a944:	a080038f 	ldh	r2,14(r20)
    a948:	103f5216 	blt	r2,zero,a694 <__alt_data_end+0xff00a694>
    a94c:	d9c02217 	ldw	r7,136(sp)
    a950:	d9002017 	ldw	r4,128(sp)
    a954:	e00d883a 	mov	r6,fp
    a958:	a00b883a 	mov	r5,r20
    a95c:	000ba840 	call	ba84 <__sbprintf>
    a960:	dfc03617 	ldw	ra,216(sp)
    a964:	df003517 	ldw	fp,212(sp)
    a968:	ddc03417 	ldw	r23,208(sp)
    a96c:	dd803317 	ldw	r22,204(sp)
    a970:	dd403217 	ldw	r21,200(sp)
    a974:	dd003117 	ldw	r20,196(sp)
    a978:	dcc03017 	ldw	r19,192(sp)
    a97c:	dc802f17 	ldw	r18,188(sp)
    a980:	dc402e17 	ldw	r17,184(sp)
    a984:	dc002d17 	ldw	r16,180(sp)
    a988:	dec03704 	addi	sp,sp,220
    a98c:	f800283a 	ret
    a990:	0007afc0 	call	7afc <__sinit>
    a994:	003f2f06 	br	a654 <__alt_data_end+0xff00a654>
    a998:	0463c83a 	sub	r17,zero,r17
    a99c:	d8802215 	stw	r2,136(sp)
    a9a0:	a5000114 	ori	r20,r20,4
    a9a4:	80c00007 	ldb	r3,0(r16)
    a9a8:	003f7706 	br	a788 <__alt_data_end+0xff00a788>
    a9ac:	00800c04 	movi	r2,48
    a9b0:	da802217 	ldw	r10,136(sp)
    a9b4:	d8801d05 	stb	r2,116(sp)
    a9b8:	00801e04 	movi	r2,120
    a9bc:	d8801d45 	stb	r2,117(sp)
    a9c0:	d8001d85 	stb	zero,118(sp)
    a9c4:	50c00104 	addi	r3,r10,4
    a9c8:	54800017 	ldw	r18,0(r10)
    a9cc:	0027883a 	mov	r19,zero
    a9d0:	a0800094 	ori	r2,r20,2
    a9d4:	48030b16 	blt	r9,zero,b604 <___vfiprintf_internal_r+0xff8>
    a9d8:	00bfdfc4 	movi	r2,-129
    a9dc:	a096703a 	and	r11,r20,r2
    a9e0:	d8c02215 	stw	r3,136(sp)
    a9e4:	5d000094 	ori	r20,r11,2
    a9e8:	90032b1e 	bne	r18,zero,b698 <___vfiprintf_internal_r+0x108c>
    a9ec:	00800074 	movhi	r2,1
    a9f0:	1086fb04 	addi	r2,r2,7148
    a9f4:	d8802615 	stw	r2,152(sp)
    a9f8:	0039883a 	mov	fp,zero
    a9fc:	48017b1e 	bne	r9,zero,afec <___vfiprintf_internal_r+0x9e0>
    aa00:	0013883a 	mov	r9,zero
    aa04:	0027883a 	mov	r19,zero
    aa08:	dd401a04 	addi	r21,sp,104
    aa0c:	4825883a 	mov	r18,r9
    aa10:	4cc0010e 	bge	r9,r19,aa18 <___vfiprintf_internal_r+0x40c>
    aa14:	9825883a 	mov	r18,r19
    aa18:	e7003fcc 	andi	fp,fp,255
    aa1c:	e700201c 	xori	fp,fp,128
    aa20:	e73fe004 	addi	fp,fp,-128
    aa24:	e0000126 	beq	fp,zero,aa2c <___vfiprintf_internal_r+0x420>
    aa28:	94800044 	addi	r18,r18,1
    aa2c:	a380008c 	andi	r14,r20,2
    aa30:	70000126 	beq	r14,zero,aa38 <___vfiprintf_internal_r+0x42c>
    aa34:	94800084 	addi	r18,r18,2
    aa38:	a700210c 	andi	fp,r20,132
    aa3c:	e001df1e 	bne	fp,zero,b1bc <___vfiprintf_internal_r+0xbb0>
    aa40:	8c87c83a 	sub	r3,r17,r18
    aa44:	00c1dd0e 	bge	zero,r3,b1bc <___vfiprintf_internal_r+0xbb0>
    aa48:	01c00404 	movi	r7,16
    aa4c:	d8801c17 	ldw	r2,112(sp)
    aa50:	38c3ad0e 	bge	r7,r3,b908 <___vfiprintf_internal_r+0x12fc>
    aa54:	02800074 	movhi	r10,1
    aa58:	52876004 	addi	r10,r10,7552
    aa5c:	dc002915 	stw	r16,164(sp)
    aa60:	d9801b17 	ldw	r6,108(sp)
    aa64:	da802415 	stw	r10,144(sp)
    aa68:	03c001c4 	movi	r15,7
    aa6c:	da402515 	stw	r9,148(sp)
    aa70:	db802815 	stw	r14,160(sp)
    aa74:	1821883a 	mov	r16,r3
    aa78:	00000506 	br	aa90 <___vfiprintf_internal_r+0x484>
    aa7c:	31400084 	addi	r5,r6,2
    aa80:	42000204 	addi	r8,r8,8
    aa84:	200d883a 	mov	r6,r4
    aa88:	843ffc04 	addi	r16,r16,-16
    aa8c:	3c000d0e 	bge	r7,r16,aac4 <___vfiprintf_internal_r+0x4b8>
    aa90:	10800404 	addi	r2,r2,16
    aa94:	31000044 	addi	r4,r6,1
    aa98:	45800015 	stw	r22,0(r8)
    aa9c:	41c00115 	stw	r7,4(r8)
    aaa0:	d8801c15 	stw	r2,112(sp)
    aaa4:	d9001b15 	stw	r4,108(sp)
    aaa8:	793ff40e 	bge	r15,r4,aa7c <__alt_data_end+0xff00aa7c>
    aaac:	1001b51e 	bne	r2,zero,b184 <___vfiprintf_internal_r+0xb78>
    aab0:	843ffc04 	addi	r16,r16,-16
    aab4:	000d883a 	mov	r6,zero
    aab8:	01400044 	movi	r5,1
    aabc:	d811883a 	mov	r8,sp
    aac0:	3c3ff316 	blt	r7,r16,aa90 <__alt_data_end+0xff00aa90>
    aac4:	8007883a 	mov	r3,r16
    aac8:	da402517 	ldw	r9,148(sp)
    aacc:	db802817 	ldw	r14,160(sp)
    aad0:	dc002917 	ldw	r16,164(sp)
    aad4:	da802417 	ldw	r10,144(sp)
    aad8:	1885883a 	add	r2,r3,r2
    aadc:	40c00115 	stw	r3,4(r8)
    aae0:	42800015 	stw	r10,0(r8)
    aae4:	d8801c15 	stw	r2,112(sp)
    aae8:	d9401b15 	stw	r5,108(sp)
    aaec:	00c001c4 	movi	r3,7
    aaf0:	19426016 	blt	r3,r5,b474 <___vfiprintf_internal_r+0xe68>
    aaf4:	d8c01d87 	ldb	r3,118(sp)
    aaf8:	42000204 	addi	r8,r8,8
    aafc:	29000044 	addi	r4,r5,1
    ab00:	1801b31e 	bne	r3,zero,b1d0 <___vfiprintf_internal_r+0xbc4>
    ab04:	7001c026 	beq	r14,zero,b208 <___vfiprintf_internal_r+0xbfc>
    ab08:	d8c01d04 	addi	r3,sp,116
    ab0c:	10800084 	addi	r2,r2,2
    ab10:	40c00015 	stw	r3,0(r8)
    ab14:	00c00084 	movi	r3,2
    ab18:	40c00115 	stw	r3,4(r8)
    ab1c:	d8801c15 	stw	r2,112(sp)
    ab20:	d9001b15 	stw	r4,108(sp)
    ab24:	00c001c4 	movi	r3,7
    ab28:	1902650e 	bge	r3,r4,b4c0 <___vfiprintf_internal_r+0xeb4>
    ab2c:	10029a1e 	bne	r2,zero,b598 <___vfiprintf_internal_r+0xf8c>
    ab30:	00c02004 	movi	r3,128
    ab34:	01000044 	movi	r4,1
    ab38:	000b883a 	mov	r5,zero
    ab3c:	d811883a 	mov	r8,sp
    ab40:	e0c1b31e 	bne	fp,r3,b210 <___vfiprintf_internal_r+0xc04>
    ab44:	8cb9c83a 	sub	fp,r17,r18
    ab48:	0701b10e 	bge	zero,fp,b210 <___vfiprintf_internal_r+0xc04>
    ab4c:	01c00404 	movi	r7,16
    ab50:	3f03890e 	bge	r7,fp,b978 <___vfiprintf_internal_r+0x136c>
    ab54:	00c00074 	movhi	r3,1
    ab58:	18c75c04 	addi	r3,r3,7536
    ab5c:	d8c02415 	stw	r3,144(sp)
    ab60:	8007883a 	mov	r3,r16
    ab64:	034001c4 	movi	r13,7
    ab68:	e021883a 	mov	r16,fp
    ab6c:	da402515 	stw	r9,148(sp)
    ab70:	1839883a 	mov	fp,r3
    ab74:	00000506 	br	ab8c <___vfiprintf_internal_r+0x580>
    ab78:	29800084 	addi	r6,r5,2
    ab7c:	42000204 	addi	r8,r8,8
    ab80:	180b883a 	mov	r5,r3
    ab84:	843ffc04 	addi	r16,r16,-16
    ab88:	3c000d0e 	bge	r7,r16,abc0 <___vfiprintf_internal_r+0x5b4>
    ab8c:	10800404 	addi	r2,r2,16
    ab90:	28c00044 	addi	r3,r5,1
    ab94:	45c00015 	stw	r23,0(r8)
    ab98:	41c00115 	stw	r7,4(r8)
    ab9c:	d8801c15 	stw	r2,112(sp)
    aba0:	d8c01b15 	stw	r3,108(sp)
    aba4:	68fff40e 	bge	r13,r3,ab78 <__alt_data_end+0xff00ab78>
    aba8:	1002241e 	bne	r2,zero,b43c <___vfiprintf_internal_r+0xe30>
    abac:	843ffc04 	addi	r16,r16,-16
    abb0:	01800044 	movi	r6,1
    abb4:	000b883a 	mov	r5,zero
    abb8:	d811883a 	mov	r8,sp
    abbc:	3c3ff316 	blt	r7,r16,ab8c <__alt_data_end+0xff00ab8c>
    abc0:	da402517 	ldw	r9,148(sp)
    abc4:	e007883a 	mov	r3,fp
    abc8:	8039883a 	mov	fp,r16
    abcc:	1821883a 	mov	r16,r3
    abd0:	d8c02417 	ldw	r3,144(sp)
    abd4:	1705883a 	add	r2,r2,fp
    abd8:	47000115 	stw	fp,4(r8)
    abdc:	40c00015 	stw	r3,0(r8)
    abe0:	d8801c15 	stw	r2,112(sp)
    abe4:	d9801b15 	stw	r6,108(sp)
    abe8:	00c001c4 	movi	r3,7
    abec:	19827616 	blt	r3,r6,b5c8 <___vfiprintf_internal_r+0xfbc>
    abf0:	4cf9c83a 	sub	fp,r9,r19
    abf4:	42000204 	addi	r8,r8,8
    abf8:	31000044 	addi	r4,r6,1
    abfc:	300b883a 	mov	r5,r6
    ac00:	07018516 	blt	zero,fp,b218 <___vfiprintf_internal_r+0xc0c>
    ac04:	9885883a 	add	r2,r19,r2
    ac08:	45400015 	stw	r21,0(r8)
    ac0c:	44c00115 	stw	r19,4(r8)
    ac10:	d8801c15 	stw	r2,112(sp)
    ac14:	d9001b15 	stw	r4,108(sp)
    ac18:	00c001c4 	movi	r3,7
    ac1c:	1901dd0e 	bge	r3,r4,b394 <___vfiprintf_internal_r+0xd88>
    ac20:	1002401e 	bne	r2,zero,b524 <___vfiprintf_internal_r+0xf18>
    ac24:	d8001b15 	stw	zero,108(sp)
    ac28:	a2c0010c 	andi	r11,r20,4
    ac2c:	58000226 	beq	r11,zero,ac38 <___vfiprintf_internal_r+0x62c>
    ac30:	8ca7c83a 	sub	r19,r17,r18
    ac34:	04c2f216 	blt	zero,r19,b800 <___vfiprintf_internal_r+0x11f4>
    ac38:	8c80010e 	bge	r17,r18,ac40 <___vfiprintf_internal_r+0x634>
    ac3c:	9023883a 	mov	r17,r18
    ac40:	da802317 	ldw	r10,140(sp)
    ac44:	5455883a 	add	r10,r10,r17
    ac48:	da802315 	stw	r10,140(sp)
    ac4c:	d8001b15 	stw	zero,108(sp)
    ac50:	d811883a 	mov	r8,sp
    ac54:	003ea206 	br	a6e0 <__alt_data_end+0xff00a6e0>
    ac58:	a5000814 	ori	r20,r20,32
    ac5c:	80c00007 	ldb	r3,0(r16)
    ac60:	003ec906 	br	a788 <__alt_data_end+0xff00a788>
    ac64:	80c00007 	ldb	r3,0(r16)
    ac68:	1b030926 	beq	r3,r12,b890 <___vfiprintf_internal_r+0x1284>
    ac6c:	a5000414 	ori	r20,r20,16
    ac70:	003ec506 	br	a788 <__alt_data_end+0xff00a788>
    ac74:	21003fcc 	andi	r4,r4,255
    ac78:	20035e1e 	bne	r4,zero,b9f4 <___vfiprintf_internal_r+0x13e8>
    ac7c:	a080080c 	andi	r2,r20,32
    ac80:	1002a526 	beq	r2,zero,b718 <___vfiprintf_internal_r+0x110c>
    ac84:	da802217 	ldw	r10,136(sp)
    ac88:	50800017 	ldw	r2,0(r10)
    ac8c:	da802317 	ldw	r10,140(sp)
    ac90:	5007d7fa 	srai	r3,r10,31
    ac94:	da802217 	ldw	r10,136(sp)
    ac98:	10c00115 	stw	r3,4(r2)
    ac9c:	52800104 	addi	r10,r10,4
    aca0:	da802215 	stw	r10,136(sp)
    aca4:	da802317 	ldw	r10,140(sp)
    aca8:	12800015 	stw	r10,0(r2)
    acac:	003e8c06 	br	a6e0 <__alt_data_end+0xff00a6e0>
    acb0:	21003fcc 	andi	r4,r4,255
    acb4:	2003511e 	bne	r4,zero,b9fc <___vfiprintf_internal_r+0x13f0>
    acb8:	a080080c 	andi	r2,r20,32
    acbc:	1000a126 	beq	r2,zero,af44 <___vfiprintf_internal_r+0x938>
    acc0:	da802217 	ldw	r10,136(sp)
    acc4:	d8001d85 	stb	zero,118(sp)
    acc8:	50800204 	addi	r2,r10,8
    accc:	54800017 	ldw	r18,0(r10)
    acd0:	54c00117 	ldw	r19,4(r10)
    acd4:	4802b416 	blt	r9,zero,b7a8 <___vfiprintf_internal_r+0x119c>
    acd8:	013fdfc4 	movi	r4,-129
    acdc:	94c6b03a 	or	r3,r18,r19
    ace0:	d8802215 	stw	r2,136(sp)
    ace4:	a128703a 	and	r20,r20,r4
    ace8:	1800a226 	beq	r3,zero,af74 <___vfiprintf_internal_r+0x968>
    acec:	0039883a 	mov	fp,zero
    acf0:	dd401a04 	addi	r21,sp,104
    acf4:	9006d0fa 	srli	r3,r18,3
    acf8:	9808977a 	slli	r4,r19,29
    acfc:	9826d0fa 	srli	r19,r19,3
    ad00:	948001cc 	andi	r18,r18,7
    ad04:	90800c04 	addi	r2,r18,48
    ad08:	ad7fffc4 	addi	r21,r21,-1
    ad0c:	20e4b03a 	or	r18,r4,r3
    ad10:	a8800005 	stb	r2,0(r21)
    ad14:	94c6b03a 	or	r3,r18,r19
    ad18:	183ff61e 	bne	r3,zero,acf4 <__alt_data_end+0xff00acf4>
    ad1c:	a0c0004c 	andi	r3,r20,1
    ad20:	18005926 	beq	r3,zero,ae88 <___vfiprintf_internal_r+0x87c>
    ad24:	10803fcc 	andi	r2,r2,255
    ad28:	1080201c 	xori	r2,r2,128
    ad2c:	10bfe004 	addi	r2,r2,-128
    ad30:	00c00c04 	movi	r3,48
    ad34:	10c05426 	beq	r2,r3,ae88 <___vfiprintf_internal_r+0x87c>
    ad38:	da801e17 	ldw	r10,120(sp)
    ad3c:	a8bfffc4 	addi	r2,r21,-1
    ad40:	a8ffffc5 	stb	r3,-1(r21)
    ad44:	50a7c83a 	sub	r19,r10,r2
    ad48:	102b883a 	mov	r21,r2
    ad4c:	003f2f06 	br	aa0c <__alt_data_end+0xff00aa0c>
    ad50:	21003fcc 	andi	r4,r4,255
    ad54:	2003421e 	bne	r4,zero,ba60 <___vfiprintf_internal_r+0x1454>
    ad58:	00800074 	movhi	r2,1
    ad5c:	1086fb04 	addi	r2,r2,7148
    ad60:	d8802615 	stw	r2,152(sp)
    ad64:	a080080c 	andi	r2,r20,32
    ad68:	1000aa26 	beq	r2,zero,b014 <___vfiprintf_internal_r+0xa08>
    ad6c:	da802217 	ldw	r10,136(sp)
    ad70:	54800017 	ldw	r18,0(r10)
    ad74:	54c00117 	ldw	r19,4(r10)
    ad78:	52800204 	addi	r10,r10,8
    ad7c:	da802215 	stw	r10,136(sp)
    ad80:	a080004c 	andi	r2,r20,1
    ad84:	1001d226 	beq	r2,zero,b4d0 <___vfiprintf_internal_r+0xec4>
    ad88:	94c4b03a 	or	r2,r18,r19
    ad8c:	1002351e 	bne	r2,zero,b664 <___vfiprintf_internal_r+0x1058>
    ad90:	d8001d85 	stb	zero,118(sp)
    ad94:	48022216 	blt	r9,zero,b620 <___vfiprintf_internal_r+0x1014>
    ad98:	00bfdfc4 	movi	r2,-129
    ad9c:	a0a8703a 	and	r20,r20,r2
    ada0:	003f1506 	br	a9f8 <__alt_data_end+0xff00a9f8>
    ada4:	da802217 	ldw	r10,136(sp)
    ada8:	04800044 	movi	r18,1
    adac:	d8001d85 	stb	zero,118(sp)
    adb0:	50800017 	ldw	r2,0(r10)
    adb4:	52800104 	addi	r10,r10,4
    adb8:	da802215 	stw	r10,136(sp)
    adbc:	d8801005 	stb	r2,64(sp)
    adc0:	9027883a 	mov	r19,r18
    adc4:	dd401004 	addi	r21,sp,64
    adc8:	0013883a 	mov	r9,zero
    adcc:	003f1706 	br	aa2c <__alt_data_end+0xff00aa2c>
    add0:	21003fcc 	andi	r4,r4,255
    add4:	2003201e 	bne	r4,zero,ba58 <___vfiprintf_internal_r+0x144c>
    add8:	a080080c 	andi	r2,r20,32
    addc:	10004b26 	beq	r2,zero,af0c <___vfiprintf_internal_r+0x900>
    ade0:	da802217 	ldw	r10,136(sp)
    ade4:	50800117 	ldw	r2,4(r10)
    ade8:	54800017 	ldw	r18,0(r10)
    adec:	52800204 	addi	r10,r10,8
    adf0:	da802215 	stw	r10,136(sp)
    adf4:	1027883a 	mov	r19,r2
    adf8:	10022c16 	blt	r2,zero,b6ac <___vfiprintf_internal_r+0x10a0>
    adfc:	df001d83 	ldbu	fp,118(sp)
    ae00:	48007216 	blt	r9,zero,afcc <___vfiprintf_internal_r+0x9c0>
    ae04:	00ffdfc4 	movi	r3,-129
    ae08:	94c4b03a 	or	r2,r18,r19
    ae0c:	a0e8703a 	and	r20,r20,r3
    ae10:	1000cc26 	beq	r2,zero,b144 <___vfiprintf_internal_r+0xb38>
    ae14:	98021026 	beq	r19,zero,b658 <___vfiprintf_internal_r+0x104c>
    ae18:	dc402415 	stw	r17,144(sp)
    ae1c:	dc002515 	stw	r16,148(sp)
    ae20:	9823883a 	mov	r17,r19
    ae24:	9021883a 	mov	r16,r18
    ae28:	dd401a04 	addi	r21,sp,104
    ae2c:	4825883a 	mov	r18,r9
    ae30:	4027883a 	mov	r19,r8
    ae34:	8009883a 	mov	r4,r16
    ae38:	880b883a 	mov	r5,r17
    ae3c:	01800284 	movi	r6,10
    ae40:	000f883a 	mov	r7,zero
    ae44:	000c9ec0 	call	c9ec <__umoddi3>
    ae48:	10800c04 	addi	r2,r2,48
    ae4c:	ad7fffc4 	addi	r21,r21,-1
    ae50:	8009883a 	mov	r4,r16
    ae54:	880b883a 	mov	r5,r17
    ae58:	a8800005 	stb	r2,0(r21)
    ae5c:	01800284 	movi	r6,10
    ae60:	000f883a 	mov	r7,zero
    ae64:	000c4740 	call	c474 <__udivdi3>
    ae68:	1021883a 	mov	r16,r2
    ae6c:	10c4b03a 	or	r2,r2,r3
    ae70:	1823883a 	mov	r17,r3
    ae74:	103fef1e 	bne	r2,zero,ae34 <__alt_data_end+0xff00ae34>
    ae78:	dc402417 	ldw	r17,144(sp)
    ae7c:	dc002517 	ldw	r16,148(sp)
    ae80:	9013883a 	mov	r9,r18
    ae84:	9811883a 	mov	r8,r19
    ae88:	da801e17 	ldw	r10,120(sp)
    ae8c:	5567c83a 	sub	r19,r10,r21
    ae90:	003ede06 	br	aa0c <__alt_data_end+0xff00aa0c>
    ae94:	38803fcc 	andi	r2,r7,255
    ae98:	1080201c 	xori	r2,r2,128
    ae9c:	10bfe004 	addi	r2,r2,-128
    aea0:	1002371e 	bne	r2,zero,b780 <___vfiprintf_internal_r+0x1174>
    aea4:	01000044 	movi	r4,1
    aea8:	01c00804 	movi	r7,32
    aeac:	80c00007 	ldb	r3,0(r16)
    aeb0:	003e3506 	br	a788 <__alt_data_end+0xff00a788>
    aeb4:	a5000054 	ori	r20,r20,1
    aeb8:	80c00007 	ldb	r3,0(r16)
    aebc:	003e3206 	br	a788 <__alt_data_end+0xff00a788>
    aec0:	a5002014 	ori	r20,r20,128
    aec4:	80c00007 	ldb	r3,0(r16)
    aec8:	003e2f06 	br	a788 <__alt_data_end+0xff00a788>
    aecc:	8015883a 	mov	r10,r16
    aed0:	0023883a 	mov	r17,zero
    aed4:	18bff404 	addi	r2,r3,-48
    aed8:	50c00007 	ldb	r3,0(r10)
    aedc:	8c4002a4 	muli	r17,r17,10
    aee0:	84000044 	addi	r16,r16,1
    aee4:	8015883a 	mov	r10,r16
    aee8:	1463883a 	add	r17,r2,r17
    aeec:	18bff404 	addi	r2,r3,-48
    aef0:	30bff92e 	bgeu	r6,r2,aed8 <__alt_data_end+0xff00aed8>
    aef4:	003e2506 	br	a78c <__alt_data_end+0xff00a78c>
    aef8:	21003fcc 	andi	r4,r4,255
    aefc:	2002d41e 	bne	r4,zero,ba50 <___vfiprintf_internal_r+0x1444>
    af00:	a5000414 	ori	r20,r20,16
    af04:	a080080c 	andi	r2,r20,32
    af08:	103fb51e 	bne	r2,zero,ade0 <__alt_data_end+0xff00ade0>
    af0c:	a080040c 	andi	r2,r20,16
    af10:	1001f826 	beq	r2,zero,b6f4 <___vfiprintf_internal_r+0x10e8>
    af14:	da802217 	ldw	r10,136(sp)
    af18:	54800017 	ldw	r18,0(r10)
    af1c:	52800104 	addi	r10,r10,4
    af20:	da802215 	stw	r10,136(sp)
    af24:	9027d7fa 	srai	r19,r18,31
    af28:	9805883a 	mov	r2,r19
    af2c:	003fb206 	br	adf8 <__alt_data_end+0xff00adf8>
    af30:	21003fcc 	andi	r4,r4,255
    af34:	2002c41e 	bne	r4,zero,ba48 <___vfiprintf_internal_r+0x143c>
    af38:	a5000414 	ori	r20,r20,16
    af3c:	a080080c 	andi	r2,r20,32
    af40:	103f5f1e 	bne	r2,zero,acc0 <__alt_data_end+0xff00acc0>
    af44:	a080040c 	andi	r2,r20,16
    af48:	10020f26 	beq	r2,zero,b788 <___vfiprintf_internal_r+0x117c>
    af4c:	da802217 	ldw	r10,136(sp)
    af50:	d8001d85 	stb	zero,118(sp)
    af54:	0027883a 	mov	r19,zero
    af58:	50800104 	addi	r2,r10,4
    af5c:	54800017 	ldw	r18,0(r10)
    af60:	48021116 	blt	r9,zero,b7a8 <___vfiprintf_internal_r+0x119c>
    af64:	00ffdfc4 	movi	r3,-129
    af68:	d8802215 	stw	r2,136(sp)
    af6c:	a0e8703a 	and	r20,r20,r3
    af70:	903f5e1e 	bne	r18,zero,acec <__alt_data_end+0xff00acec>
    af74:	0039883a 	mov	fp,zero
    af78:	4802a626 	beq	r9,zero,ba14 <___vfiprintf_internal_r+0x1408>
    af7c:	0025883a 	mov	r18,zero
    af80:	0027883a 	mov	r19,zero
    af84:	003f5a06 	br	acf0 <__alt_data_end+0xff00acf0>
    af88:	21003fcc 	andi	r4,r4,255
    af8c:	20029f1e 	bne	r4,zero,ba0c <___vfiprintf_internal_r+0x1400>
    af90:	a5000414 	ori	r20,r20,16
    af94:	a080080c 	andi	r2,r20,32
    af98:	10005e1e 	bne	r2,zero,b114 <___vfiprintf_internal_r+0xb08>
    af9c:	a080040c 	andi	r2,r20,16
    afa0:	1001a21e 	bne	r2,zero,b62c <___vfiprintf_internal_r+0x1020>
    afa4:	a080100c 	andi	r2,r20,64
    afa8:	d8001d85 	stb	zero,118(sp)
    afac:	da802217 	ldw	r10,136(sp)
    afb0:	1002231e 	bne	r2,zero,b840 <___vfiprintf_internal_r+0x1234>
    afb4:	50800104 	addi	r2,r10,4
    afb8:	54800017 	ldw	r18,0(r10)
    afbc:	0027883a 	mov	r19,zero
    afc0:	4801a00e 	bge	r9,zero,b644 <___vfiprintf_internal_r+0x1038>
    afc4:	d8802215 	stw	r2,136(sp)
    afc8:	0039883a 	mov	fp,zero
    afcc:	94c4b03a 	or	r2,r18,r19
    afd0:	103f901e 	bne	r2,zero,ae14 <__alt_data_end+0xff00ae14>
    afd4:	00800044 	movi	r2,1
    afd8:	10803fcc 	andi	r2,r2,255
    afdc:	00c00044 	movi	r3,1
    afe0:	10c05926 	beq	r2,r3,b148 <___vfiprintf_internal_r+0xb3c>
    afe4:	00c00084 	movi	r3,2
    afe8:	10ffe41e 	bne	r2,r3,af7c <__alt_data_end+0xff00af7c>
    afec:	0025883a 	mov	r18,zero
    aff0:	0027883a 	mov	r19,zero
    aff4:	00013d06 	br	b4ec <___vfiprintf_internal_r+0xee0>
    aff8:	21003fcc 	andi	r4,r4,255
    affc:	2002811e 	bne	r4,zero,ba04 <___vfiprintf_internal_r+0x13f8>
    b000:	00800074 	movhi	r2,1
    b004:	1086f604 	addi	r2,r2,7128
    b008:	d8802615 	stw	r2,152(sp)
    b00c:	a080080c 	andi	r2,r20,32
    b010:	103f561e 	bne	r2,zero,ad6c <__alt_data_end+0xff00ad6c>
    b014:	a080040c 	andi	r2,r20,16
    b018:	1001d126 	beq	r2,zero,b760 <___vfiprintf_internal_r+0x1154>
    b01c:	da802217 	ldw	r10,136(sp)
    b020:	0027883a 	mov	r19,zero
    b024:	54800017 	ldw	r18,0(r10)
    b028:	52800104 	addi	r10,r10,4
    b02c:	da802215 	stw	r10,136(sp)
    b030:	003f5306 	br	ad80 <__alt_data_end+0xff00ad80>
    b034:	da802217 	ldw	r10,136(sp)
    b038:	d8001d85 	stb	zero,118(sp)
    b03c:	55400017 	ldw	r21,0(r10)
    b040:	50c00104 	addi	r3,r10,4
    b044:	a8024226 	beq	r21,zero,b950 <___vfiprintf_internal_r+0x1344>
    b048:	48021816 	blt	r9,zero,b8ac <___vfiprintf_internal_r+0x12a0>
    b04c:	480d883a 	mov	r6,r9
    b050:	000b883a 	mov	r5,zero
    b054:	a809883a 	mov	r4,r21
    b058:	d8c02a15 	stw	r3,168(sp)
    b05c:	da002b15 	stw	r8,172(sp)
    b060:	da402c15 	stw	r9,176(sp)
    b064:	000885c0 	call	885c <memchr>
    b068:	d8c02a17 	ldw	r3,168(sp)
    b06c:	da002b17 	ldw	r8,172(sp)
    b070:	da402c17 	ldw	r9,176(sp)
    b074:	10024826 	beq	r2,zero,b998 <___vfiprintf_internal_r+0x138c>
    b078:	1567c83a 	sub	r19,r2,r21
    b07c:	df001d83 	ldbu	fp,118(sp)
    b080:	d8c02215 	stw	r3,136(sp)
    b084:	0013883a 	mov	r9,zero
    b088:	003e6006 	br	aa0c <__alt_data_end+0xff00aa0c>
    b08c:	21003fcc 	andi	r4,r4,255
    b090:	203fc026 	beq	r4,zero,af94 <__alt_data_end+0xff00af94>
    b094:	d9c01d85 	stb	r7,118(sp)
    b098:	003fbe06 	br	af94 <__alt_data_end+0xff00af94>
    b09c:	da802217 	ldw	r10,136(sp)
    b0a0:	54400017 	ldw	r17,0(r10)
    b0a4:	50800104 	addi	r2,r10,4
    b0a8:	883e3b16 	blt	r17,zero,a998 <__alt_data_end+0xff00a998>
    b0ac:	d8802215 	stw	r2,136(sp)
    b0b0:	80c00007 	ldb	r3,0(r16)
    b0b4:	003db406 	br	a788 <__alt_data_end+0xff00a788>
    b0b8:	01000044 	movi	r4,1
    b0bc:	01c00ac4 	movi	r7,43
    b0c0:	80c00007 	ldb	r3,0(r16)
    b0c4:	003db006 	br	a788 <__alt_data_end+0xff00a788>
    b0c8:	80c00007 	ldb	r3,0(r16)
    b0cc:	82800044 	addi	r10,r16,1
    b0d0:	1b423c26 	beq	r3,r13,b9c4 <___vfiprintf_internal_r+0x13b8>
    b0d4:	18bff404 	addi	r2,r3,-48
    b0d8:	0013883a 	mov	r9,zero
    b0dc:	30822b36 	bltu	r6,r2,b98c <___vfiprintf_internal_r+0x1380>
    b0e0:	50c00007 	ldb	r3,0(r10)
    b0e4:	4a4002a4 	muli	r9,r9,10
    b0e8:	54000044 	addi	r16,r10,1
    b0ec:	8015883a 	mov	r10,r16
    b0f0:	4893883a 	add	r9,r9,r2
    b0f4:	18bff404 	addi	r2,r3,-48
    b0f8:	30bff92e 	bgeu	r6,r2,b0e0 <__alt_data_end+0xff00b0e0>
    b0fc:	483da30e 	bge	r9,zero,a78c <__alt_data_end+0xff00a78c>
    b100:	027fffc4 	movi	r9,-1
    b104:	003da106 	br	a78c <__alt_data_end+0xff00a78c>
    b108:	a5001014 	ori	r20,r20,64
    b10c:	80c00007 	ldb	r3,0(r16)
    b110:	003d9d06 	br	a788 <__alt_data_end+0xff00a788>
    b114:	da802217 	ldw	r10,136(sp)
    b118:	d8001d85 	stb	zero,118(sp)
    b11c:	50c00204 	addi	r3,r10,8
    b120:	54800017 	ldw	r18,0(r10)
    b124:	54c00117 	ldw	r19,4(r10)
    b128:	4801ca16 	blt	r9,zero,b854 <___vfiprintf_internal_r+0x1248>
    b12c:	013fdfc4 	movi	r4,-129
    b130:	94c4b03a 	or	r2,r18,r19
    b134:	d8c02215 	stw	r3,136(sp)
    b138:	a128703a 	and	r20,r20,r4
    b13c:	0039883a 	mov	fp,zero
    b140:	103f341e 	bne	r2,zero,ae14 <__alt_data_end+0xff00ae14>
    b144:	483e2e26 	beq	r9,zero,aa00 <__alt_data_end+0xff00aa00>
    b148:	0025883a 	mov	r18,zero
    b14c:	94800c04 	addi	r18,r18,48
    b150:	dc8019c5 	stb	r18,103(sp)
    b154:	dcc02717 	ldw	r19,156(sp)
    b158:	dd4019c4 	addi	r21,sp,103
    b15c:	003e2b06 	br	aa0c <__alt_data_end+0xff00aa0c>
    b160:	21003fcc 	andi	r4,r4,255
    b164:	2002361e 	bne	r4,zero,ba40 <___vfiprintf_internal_r+0x1434>
    b168:	1801c126 	beq	r3,zero,b870 <___vfiprintf_internal_r+0x1264>
    b16c:	04800044 	movi	r18,1
    b170:	d8c01005 	stb	r3,64(sp)
    b174:	d8001d85 	stb	zero,118(sp)
    b178:	9027883a 	mov	r19,r18
    b17c:	dd401004 	addi	r21,sp,64
    b180:	003f1106 	br	adc8 <__alt_data_end+0xff00adc8>
    b184:	d9402117 	ldw	r5,132(sp)
    b188:	d9002017 	ldw	r4,128(sp)
    b18c:	d9801a04 	addi	r6,sp,104
    b190:	d9c02b15 	stw	r7,172(sp)
    b194:	dbc02a15 	stw	r15,168(sp)
    b198:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b19c:	d9c02b17 	ldw	r7,172(sp)
    b1a0:	dbc02a17 	ldw	r15,168(sp)
    b1a4:	10006d1e 	bne	r2,zero,b35c <___vfiprintf_internal_r+0xd50>
    b1a8:	d9801b17 	ldw	r6,108(sp)
    b1ac:	d8801c17 	ldw	r2,112(sp)
    b1b0:	d811883a 	mov	r8,sp
    b1b4:	31400044 	addi	r5,r6,1
    b1b8:	003e3306 	br	aa88 <__alt_data_end+0xff00aa88>
    b1bc:	d9401b17 	ldw	r5,108(sp)
    b1c0:	d8801c17 	ldw	r2,112(sp)
    b1c4:	29000044 	addi	r4,r5,1
    b1c8:	d8c01d87 	ldb	r3,118(sp)
    b1cc:	183e4d26 	beq	r3,zero,ab04 <__alt_data_end+0xff00ab04>
    b1d0:	00c00044 	movi	r3,1
    b1d4:	d9401d84 	addi	r5,sp,118
    b1d8:	10c5883a 	add	r2,r2,r3
    b1dc:	41400015 	stw	r5,0(r8)
    b1e0:	40c00115 	stw	r3,4(r8)
    b1e4:	d8801c15 	stw	r2,112(sp)
    b1e8:	d9001b15 	stw	r4,108(sp)
    b1ec:	014001c4 	movi	r5,7
    b1f0:	2900a90e 	bge	r5,r4,b498 <___vfiprintf_internal_r+0xe8c>
    b1f4:	1000da1e 	bne	r2,zero,b560 <___vfiprintf_internal_r+0xf54>
    b1f8:	7000ab1e 	bne	r14,zero,b4a8 <___vfiprintf_internal_r+0xe9c>
    b1fc:	000b883a 	mov	r5,zero
    b200:	1809883a 	mov	r4,r3
    b204:	d811883a 	mov	r8,sp
    b208:	00c02004 	movi	r3,128
    b20c:	e0fe4d26 	beq	fp,r3,ab44 <__alt_data_end+0xff00ab44>
    b210:	4cf9c83a 	sub	fp,r9,r19
    b214:	073e7b0e 	bge	zero,fp,ac04 <__alt_data_end+0xff00ac04>
    b218:	01c00404 	movi	r7,16
    b21c:	3f01900e 	bge	r7,fp,b860 <___vfiprintf_internal_r+0x1254>
    b220:	00c00074 	movhi	r3,1
    b224:	18c75c04 	addi	r3,r3,7536
    b228:	d8c02415 	stw	r3,144(sp)
    b22c:	034001c4 	movi	r13,7
    b230:	00000506 	br	b248 <___vfiprintf_internal_r+0xc3c>
    b234:	29000084 	addi	r4,r5,2
    b238:	42000204 	addi	r8,r8,8
    b23c:	180b883a 	mov	r5,r3
    b240:	e73ffc04 	addi	fp,fp,-16
    b244:	3f000d0e 	bge	r7,fp,b27c <___vfiprintf_internal_r+0xc70>
    b248:	10800404 	addi	r2,r2,16
    b24c:	28c00044 	addi	r3,r5,1
    b250:	45c00015 	stw	r23,0(r8)
    b254:	41c00115 	stw	r7,4(r8)
    b258:	d8801c15 	stw	r2,112(sp)
    b25c:	d8c01b15 	stw	r3,108(sp)
    b260:	68fff40e 	bge	r13,r3,b234 <__alt_data_end+0xff00b234>
    b264:	1000101e 	bne	r2,zero,b2a8 <___vfiprintf_internal_r+0xc9c>
    b268:	e73ffc04 	addi	fp,fp,-16
    b26c:	01000044 	movi	r4,1
    b270:	000b883a 	mov	r5,zero
    b274:	d811883a 	mov	r8,sp
    b278:	3f3ff316 	blt	r7,fp,b248 <__alt_data_end+0xff00b248>
    b27c:	da802417 	ldw	r10,144(sp)
    b280:	1705883a 	add	r2,r2,fp
    b284:	47000115 	stw	fp,4(r8)
    b288:	42800015 	stw	r10,0(r8)
    b28c:	d8801c15 	stw	r2,112(sp)
    b290:	d9001b15 	stw	r4,108(sp)
    b294:	00c001c4 	movi	r3,7
    b298:	19003616 	blt	r3,r4,b374 <___vfiprintf_internal_r+0xd68>
    b29c:	42000204 	addi	r8,r8,8
    b2a0:	21000044 	addi	r4,r4,1
    b2a4:	003e5706 	br	ac04 <__alt_data_end+0xff00ac04>
    b2a8:	d9402117 	ldw	r5,132(sp)
    b2ac:	d9002017 	ldw	r4,128(sp)
    b2b0:	d9801a04 	addi	r6,sp,104
    b2b4:	d9c02b15 	stw	r7,172(sp)
    b2b8:	db402a15 	stw	r13,168(sp)
    b2bc:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b2c0:	d9c02b17 	ldw	r7,172(sp)
    b2c4:	db402a17 	ldw	r13,168(sp)
    b2c8:	1000241e 	bne	r2,zero,b35c <___vfiprintf_internal_r+0xd50>
    b2cc:	d9401b17 	ldw	r5,108(sp)
    b2d0:	d8801c17 	ldw	r2,112(sp)
    b2d4:	d811883a 	mov	r8,sp
    b2d8:	29000044 	addi	r4,r5,1
    b2dc:	003fd806 	br	b240 <__alt_data_end+0xff00b240>
    b2e0:	d9401b17 	ldw	r5,108(sp)
    b2e4:	00c00074 	movhi	r3,1
    b2e8:	18c76004 	addi	r3,r3,7552
    b2ec:	d8c02415 	stw	r3,144(sp)
    b2f0:	29400044 	addi	r5,r5,1
    b2f4:	d8c02417 	ldw	r3,144(sp)
    b2f8:	14c5883a 	add	r2,r2,r19
    b2fc:	44c00115 	stw	r19,4(r8)
    b300:	40c00015 	stw	r3,0(r8)
    b304:	d8801c15 	stw	r2,112(sp)
    b308:	d9401b15 	stw	r5,108(sp)
    b30c:	00c001c4 	movi	r3,7
    b310:	1940070e 	bge	r3,r5,b330 <___vfiprintf_internal_r+0xd24>
    b314:	103e4826 	beq	r2,zero,ac38 <__alt_data_end+0xff00ac38>
    b318:	d9402117 	ldw	r5,132(sp)
    b31c:	d9002017 	ldw	r4,128(sp)
    b320:	d9801a04 	addi	r6,sp,104
    b324:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b328:	10000c1e 	bne	r2,zero,b35c <___vfiprintf_internal_r+0xd50>
    b32c:	d8801c17 	ldw	r2,112(sp)
    b330:	8c80010e 	bge	r17,r18,b338 <___vfiprintf_internal_r+0xd2c>
    b334:	9023883a 	mov	r17,r18
    b338:	da802317 	ldw	r10,140(sp)
    b33c:	5455883a 	add	r10,r10,r17
    b340:	da802315 	stw	r10,140(sp)
    b344:	103e4126 	beq	r2,zero,ac4c <__alt_data_end+0xff00ac4c>
    b348:	d9402117 	ldw	r5,132(sp)
    b34c:	d9002017 	ldw	r4,128(sp)
    b350:	d9801a04 	addi	r6,sp,104
    b354:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b358:	103e3c26 	beq	r2,zero,ac4c <__alt_data_end+0xff00ac4c>
    b35c:	dd002117 	ldw	r20,132(sp)
    b360:	a080030b 	ldhu	r2,12(r20)
    b364:	1080100c 	andi	r2,r2,64
    b368:	1001231e 	bne	r2,zero,b7f8 <___vfiprintf_internal_r+0x11ec>
    b36c:	d8802317 	ldw	r2,140(sp)
    b370:	003d7b06 	br	a960 <__alt_data_end+0xff00a960>
    b374:	1000991e 	bne	r2,zero,b5dc <___vfiprintf_internal_r+0xfd0>
    b378:	00c00044 	movi	r3,1
    b37c:	9805883a 	mov	r2,r19
    b380:	dd400015 	stw	r21,0(sp)
    b384:	dcc00115 	stw	r19,4(sp)
    b388:	dcc01c15 	stw	r19,112(sp)
    b38c:	d8c01b15 	stw	r3,108(sp)
    b390:	d811883a 	mov	r8,sp
    b394:	42000204 	addi	r8,r8,8
    b398:	a2c0010c 	andi	r11,r20,4
    b39c:	583fe426 	beq	r11,zero,b330 <__alt_data_end+0xff00b330>
    b3a0:	8ca7c83a 	sub	r19,r17,r18
    b3a4:	04ffe20e 	bge	zero,r19,b330 <__alt_data_end+0xff00b330>
    b3a8:	01c00404 	movi	r7,16
    b3ac:	3cffcc0e 	bge	r7,r19,b2e0 <__alt_data_end+0xff00b2e0>
    b3b0:	02800074 	movhi	r10,1
    b3b4:	52876004 	addi	r10,r10,7552
    b3b8:	d9001b17 	ldw	r4,108(sp)
    b3bc:	da802415 	stw	r10,144(sp)
    b3c0:	382b883a 	mov	r21,r7
    b3c4:	050001c4 	movi	r20,7
    b3c8:	df002017 	ldw	fp,128(sp)
    b3cc:	00000506 	br	b3e4 <___vfiprintf_internal_r+0xdd8>
    b3d0:	21400084 	addi	r5,r4,2
    b3d4:	42000204 	addi	r8,r8,8
    b3d8:	1809883a 	mov	r4,r3
    b3dc:	9cfffc04 	addi	r19,r19,-16
    b3e0:	acffc40e 	bge	r21,r19,b2f4 <__alt_data_end+0xff00b2f4>
    b3e4:	10800404 	addi	r2,r2,16
    b3e8:	20c00044 	addi	r3,r4,1
    b3ec:	45800015 	stw	r22,0(r8)
    b3f0:	45400115 	stw	r21,4(r8)
    b3f4:	d8801c15 	stw	r2,112(sp)
    b3f8:	d8c01b15 	stw	r3,108(sp)
    b3fc:	a0fff40e 	bge	r20,r3,b3d0 <__alt_data_end+0xff00b3d0>
    b400:	1000041e 	bne	r2,zero,b414 <___vfiprintf_internal_r+0xe08>
    b404:	01400044 	movi	r5,1
    b408:	0009883a 	mov	r4,zero
    b40c:	d811883a 	mov	r8,sp
    b410:	003ff206 	br	b3dc <__alt_data_end+0xff00b3dc>
    b414:	d9402117 	ldw	r5,132(sp)
    b418:	d9801a04 	addi	r6,sp,104
    b41c:	e009883a 	mov	r4,fp
    b420:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b424:	103fcd1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b428:	d9001b17 	ldw	r4,108(sp)
    b42c:	d8801c17 	ldw	r2,112(sp)
    b430:	d811883a 	mov	r8,sp
    b434:	21400044 	addi	r5,r4,1
    b438:	003fe806 	br	b3dc <__alt_data_end+0xff00b3dc>
    b43c:	d9402117 	ldw	r5,132(sp)
    b440:	d9002017 	ldw	r4,128(sp)
    b444:	d9801a04 	addi	r6,sp,104
    b448:	d9c02b15 	stw	r7,172(sp)
    b44c:	db402a15 	stw	r13,168(sp)
    b450:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b454:	d9c02b17 	ldw	r7,172(sp)
    b458:	db402a17 	ldw	r13,168(sp)
    b45c:	103fbf1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b460:	d9401b17 	ldw	r5,108(sp)
    b464:	d8801c17 	ldw	r2,112(sp)
    b468:	d811883a 	mov	r8,sp
    b46c:	29800044 	addi	r6,r5,1
    b470:	003dc406 	br	ab84 <__alt_data_end+0xff00ab84>
    b474:	1000d21e 	bne	r2,zero,b7c0 <___vfiprintf_internal_r+0x11b4>
    b478:	d8c01d87 	ldb	r3,118(sp)
    b47c:	18009526 	beq	r3,zero,b6d4 <___vfiprintf_internal_r+0x10c8>
    b480:	00800044 	movi	r2,1
    b484:	d8c01d84 	addi	r3,sp,118
    b488:	1009883a 	mov	r4,r2
    b48c:	d8c00015 	stw	r3,0(sp)
    b490:	d8800115 	stw	r2,4(sp)
    b494:	d811883a 	mov	r8,sp
    b498:	200b883a 	mov	r5,r4
    b49c:	42000204 	addi	r8,r8,8
    b4a0:	21000044 	addi	r4,r4,1
    b4a4:	003d9706 	br	ab04 <__alt_data_end+0xff00ab04>
    b4a8:	d9001d04 	addi	r4,sp,116
    b4ac:	00800084 	movi	r2,2
    b4b0:	d9000015 	stw	r4,0(sp)
    b4b4:	d8800115 	stw	r2,4(sp)
    b4b8:	1809883a 	mov	r4,r3
    b4bc:	d811883a 	mov	r8,sp
    b4c0:	200b883a 	mov	r5,r4
    b4c4:	42000204 	addi	r8,r8,8
    b4c8:	21000044 	addi	r4,r4,1
    b4cc:	003f4e06 	br	b208 <__alt_data_end+0xff00b208>
    b4d0:	d8001d85 	stb	zero,118(sp)
    b4d4:	48005016 	blt	r9,zero,b618 <___vfiprintf_internal_r+0x100c>
    b4d8:	00ffdfc4 	movi	r3,-129
    b4dc:	94c4b03a 	or	r2,r18,r19
    b4e0:	a0e8703a 	and	r20,r20,r3
    b4e4:	103d4426 	beq	r2,zero,a9f8 <__alt_data_end+0xff00a9f8>
    b4e8:	0039883a 	mov	fp,zero
    b4ec:	d9002617 	ldw	r4,152(sp)
    b4f0:	dd401a04 	addi	r21,sp,104
    b4f4:	908003cc 	andi	r2,r18,15
    b4f8:	9806973a 	slli	r3,r19,28
    b4fc:	2085883a 	add	r2,r4,r2
    b500:	9024d13a 	srli	r18,r18,4
    b504:	10800003 	ldbu	r2,0(r2)
    b508:	9826d13a 	srli	r19,r19,4
    b50c:	ad7fffc4 	addi	r21,r21,-1
    b510:	1ca4b03a 	or	r18,r3,r18
    b514:	a8800005 	stb	r2,0(r21)
    b518:	94c4b03a 	or	r2,r18,r19
    b51c:	103ff51e 	bne	r2,zero,b4f4 <__alt_data_end+0xff00b4f4>
    b520:	003e5906 	br	ae88 <__alt_data_end+0xff00ae88>
    b524:	d9402117 	ldw	r5,132(sp)
    b528:	d9002017 	ldw	r4,128(sp)
    b52c:	d9801a04 	addi	r6,sp,104
    b530:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b534:	103f891e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b538:	d8801c17 	ldw	r2,112(sp)
    b53c:	d811883a 	mov	r8,sp
    b540:	003f9506 	br	b398 <__alt_data_end+0xff00b398>
    b544:	d9402117 	ldw	r5,132(sp)
    b548:	d9002017 	ldw	r4,128(sp)
    b54c:	d9801a04 	addi	r6,sp,104
    b550:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b554:	103f811e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b558:	d811883a 	mov	r8,sp
    b55c:	003ced06 	br	a914 <__alt_data_end+0xff00a914>
    b560:	d9402117 	ldw	r5,132(sp)
    b564:	d9002017 	ldw	r4,128(sp)
    b568:	d9801a04 	addi	r6,sp,104
    b56c:	da402c15 	stw	r9,176(sp)
    b570:	db802a15 	stw	r14,168(sp)
    b574:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b578:	da402c17 	ldw	r9,176(sp)
    b57c:	db802a17 	ldw	r14,168(sp)
    b580:	103f761e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b584:	d9401b17 	ldw	r5,108(sp)
    b588:	d8801c17 	ldw	r2,112(sp)
    b58c:	d811883a 	mov	r8,sp
    b590:	29000044 	addi	r4,r5,1
    b594:	003d5b06 	br	ab04 <__alt_data_end+0xff00ab04>
    b598:	d9402117 	ldw	r5,132(sp)
    b59c:	d9002017 	ldw	r4,128(sp)
    b5a0:	d9801a04 	addi	r6,sp,104
    b5a4:	da402c15 	stw	r9,176(sp)
    b5a8:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b5ac:	da402c17 	ldw	r9,176(sp)
    b5b0:	103f6a1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b5b4:	d9401b17 	ldw	r5,108(sp)
    b5b8:	d8801c17 	ldw	r2,112(sp)
    b5bc:	d811883a 	mov	r8,sp
    b5c0:	29000044 	addi	r4,r5,1
    b5c4:	003f1006 	br	b208 <__alt_data_end+0xff00b208>
    b5c8:	1000c31e 	bne	r2,zero,b8d8 <___vfiprintf_internal_r+0x12cc>
    b5cc:	01000044 	movi	r4,1
    b5d0:	000b883a 	mov	r5,zero
    b5d4:	d811883a 	mov	r8,sp
    b5d8:	003f0d06 	br	b210 <__alt_data_end+0xff00b210>
    b5dc:	d9402117 	ldw	r5,132(sp)
    b5e0:	d9002017 	ldw	r4,128(sp)
    b5e4:	d9801a04 	addi	r6,sp,104
    b5e8:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b5ec:	103f5b1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b5f0:	d9001b17 	ldw	r4,108(sp)
    b5f4:	d8801c17 	ldw	r2,112(sp)
    b5f8:	d811883a 	mov	r8,sp
    b5fc:	21000044 	addi	r4,r4,1
    b600:	003d8006 	br	ac04 <__alt_data_end+0xff00ac04>
    b604:	01000074 	movhi	r4,1
    b608:	2106fb04 	addi	r4,r4,7148
    b60c:	d9002615 	stw	r4,152(sp)
    b610:	d8c02215 	stw	r3,136(sp)
    b614:	1029883a 	mov	r20,r2
    b618:	94c4b03a 	or	r2,r18,r19
    b61c:	103fb21e 	bne	r2,zero,b4e8 <__alt_data_end+0xff00b4e8>
    b620:	0039883a 	mov	fp,zero
    b624:	00800084 	movi	r2,2
    b628:	003e6b06 	br	afd8 <__alt_data_end+0xff00afd8>
    b62c:	da802217 	ldw	r10,136(sp)
    b630:	d8001d85 	stb	zero,118(sp)
    b634:	0027883a 	mov	r19,zero
    b638:	50800104 	addi	r2,r10,4
    b63c:	54800017 	ldw	r18,0(r10)
    b640:	483e6016 	blt	r9,zero,afc4 <__alt_data_end+0xff00afc4>
    b644:	00ffdfc4 	movi	r3,-129
    b648:	d8802215 	stw	r2,136(sp)
    b64c:	a0e8703a 	and	r20,r20,r3
    b650:	0039883a 	mov	fp,zero
    b654:	903ebb26 	beq	r18,zero,b144 <__alt_data_end+0xff00b144>
    b658:	00800244 	movi	r2,9
    b65c:	14bdee36 	bltu	r2,r18,ae18 <__alt_data_end+0xff00ae18>
    b660:	003eba06 	br	b14c <__alt_data_end+0xff00b14c>
    b664:	00800c04 	movi	r2,48
    b668:	d8c01d45 	stb	r3,117(sp)
    b66c:	d8801d05 	stb	r2,116(sp)
    b670:	d8001d85 	stb	zero,118(sp)
    b674:	a0c00094 	ori	r3,r20,2
    b678:	4800a916 	blt	r9,zero,b920 <___vfiprintf_internal_r+0x1314>
    b67c:	00bfdfc4 	movi	r2,-129
    b680:	a096703a 	and	r11,r20,r2
    b684:	5d000094 	ori	r20,r11,2
    b688:	0039883a 	mov	fp,zero
    b68c:	003f9706 	br	b4ec <__alt_data_end+0xff00b4ec>
    b690:	8025883a 	mov	r18,r16
    b694:	003c2e06 	br	a750 <__alt_data_end+0xff00a750>
    b698:	00800074 	movhi	r2,1
    b69c:	1086fb04 	addi	r2,r2,7148
    b6a0:	0039883a 	mov	fp,zero
    b6a4:	d8802615 	stw	r2,152(sp)
    b6a8:	003f9006 	br	b4ec <__alt_data_end+0xff00b4ec>
    b6ac:	04a5c83a 	sub	r18,zero,r18
    b6b0:	07000b44 	movi	fp,45
    b6b4:	9004c03a 	cmpne	r2,r18,zero
    b6b8:	04e7c83a 	sub	r19,zero,r19
    b6bc:	df001d85 	stb	fp,118(sp)
    b6c0:	98a7c83a 	sub	r19,r19,r2
    b6c4:	48009f16 	blt	r9,zero,b944 <___vfiprintf_internal_r+0x1338>
    b6c8:	00bfdfc4 	movi	r2,-129
    b6cc:	a0a8703a 	and	r20,r20,r2
    b6d0:	003dd006 	br	ae14 <__alt_data_end+0xff00ae14>
    b6d4:	70004c26 	beq	r14,zero,b808 <___vfiprintf_internal_r+0x11fc>
    b6d8:	00800084 	movi	r2,2
    b6dc:	d8c01d04 	addi	r3,sp,116
    b6e0:	d8c00015 	stw	r3,0(sp)
    b6e4:	d8800115 	stw	r2,4(sp)
    b6e8:	01000044 	movi	r4,1
    b6ec:	d811883a 	mov	r8,sp
    b6f0:	003f7306 	br	b4c0 <__alt_data_end+0xff00b4c0>
    b6f4:	a080100c 	andi	r2,r20,64
    b6f8:	da802217 	ldw	r10,136(sp)
    b6fc:	103e0626 	beq	r2,zero,af18 <__alt_data_end+0xff00af18>
    b700:	5480000f 	ldh	r18,0(r10)
    b704:	52800104 	addi	r10,r10,4
    b708:	da802215 	stw	r10,136(sp)
    b70c:	9027d7fa 	srai	r19,r18,31
    b710:	9805883a 	mov	r2,r19
    b714:	003db806 	br	adf8 <__alt_data_end+0xff00adf8>
    b718:	a080040c 	andi	r2,r20,16
    b71c:	1000091e 	bne	r2,zero,b744 <___vfiprintf_internal_r+0x1138>
    b720:	a2c0100c 	andi	r11,r20,64
    b724:	58000726 	beq	r11,zero,b744 <___vfiprintf_internal_r+0x1138>
    b728:	da802217 	ldw	r10,136(sp)
    b72c:	50800017 	ldw	r2,0(r10)
    b730:	52800104 	addi	r10,r10,4
    b734:	da802215 	stw	r10,136(sp)
    b738:	da802317 	ldw	r10,140(sp)
    b73c:	1280000d 	sth	r10,0(r2)
    b740:	003be706 	br	a6e0 <__alt_data_end+0xff00a6e0>
    b744:	da802217 	ldw	r10,136(sp)
    b748:	50800017 	ldw	r2,0(r10)
    b74c:	52800104 	addi	r10,r10,4
    b750:	da802215 	stw	r10,136(sp)
    b754:	da802317 	ldw	r10,140(sp)
    b758:	12800015 	stw	r10,0(r2)
    b75c:	003be006 	br	a6e0 <__alt_data_end+0xff00a6e0>
    b760:	a080100c 	andi	r2,r20,64
    b764:	da802217 	ldw	r10,136(sp)
    b768:	10003026 	beq	r2,zero,b82c <___vfiprintf_internal_r+0x1220>
    b76c:	5480000b 	ldhu	r18,0(r10)
    b770:	52800104 	addi	r10,r10,4
    b774:	0027883a 	mov	r19,zero
    b778:	da802215 	stw	r10,136(sp)
    b77c:	003d8006 	br	ad80 <__alt_data_end+0xff00ad80>
    b780:	80c00007 	ldb	r3,0(r16)
    b784:	003c0006 	br	a788 <__alt_data_end+0xff00a788>
    b788:	a080100c 	andi	r2,r20,64
    b78c:	d8001d85 	stb	zero,118(sp)
    b790:	da802217 	ldw	r10,136(sp)
    b794:	1000201e 	bne	r2,zero,b818 <___vfiprintf_internal_r+0x120c>
    b798:	50800104 	addi	r2,r10,4
    b79c:	54800017 	ldw	r18,0(r10)
    b7a0:	0027883a 	mov	r19,zero
    b7a4:	483def0e 	bge	r9,zero,af64 <__alt_data_end+0xff00af64>
    b7a8:	94c6b03a 	or	r3,r18,r19
    b7ac:	d8802215 	stw	r2,136(sp)
    b7b0:	183d4e1e 	bne	r3,zero,acec <__alt_data_end+0xff00acec>
    b7b4:	0039883a 	mov	fp,zero
    b7b8:	0005883a 	mov	r2,zero
    b7bc:	003e0606 	br	afd8 <__alt_data_end+0xff00afd8>
    b7c0:	d9402117 	ldw	r5,132(sp)
    b7c4:	d9002017 	ldw	r4,128(sp)
    b7c8:	d9801a04 	addi	r6,sp,104
    b7cc:	da402c15 	stw	r9,176(sp)
    b7d0:	db802a15 	stw	r14,168(sp)
    b7d4:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b7d8:	da402c17 	ldw	r9,176(sp)
    b7dc:	db802a17 	ldw	r14,168(sp)
    b7e0:	103ede1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b7e4:	d9401b17 	ldw	r5,108(sp)
    b7e8:	d8801c17 	ldw	r2,112(sp)
    b7ec:	d811883a 	mov	r8,sp
    b7f0:	29000044 	addi	r4,r5,1
    b7f4:	003e7406 	br	b1c8 <__alt_data_end+0xff00b1c8>
    b7f8:	00bfffc4 	movi	r2,-1
    b7fc:	003c5806 	br	a960 <__alt_data_end+0xff00a960>
    b800:	d811883a 	mov	r8,sp
    b804:	003ee806 	br	b3a8 <__alt_data_end+0xff00b3a8>
    b808:	000b883a 	mov	r5,zero
    b80c:	01000044 	movi	r4,1
    b810:	d811883a 	mov	r8,sp
    b814:	003e7c06 	br	b208 <__alt_data_end+0xff00b208>
    b818:	50800104 	addi	r2,r10,4
    b81c:	5480000b 	ldhu	r18,0(r10)
    b820:	0027883a 	mov	r19,zero
    b824:	483dcf0e 	bge	r9,zero,af64 <__alt_data_end+0xff00af64>
    b828:	003fdf06 	br	b7a8 <__alt_data_end+0xff00b7a8>
    b82c:	54800017 	ldw	r18,0(r10)
    b830:	52800104 	addi	r10,r10,4
    b834:	0027883a 	mov	r19,zero
    b838:	da802215 	stw	r10,136(sp)
    b83c:	003d5006 	br	ad80 <__alt_data_end+0xff00ad80>
    b840:	50800104 	addi	r2,r10,4
    b844:	5480000b 	ldhu	r18,0(r10)
    b848:	0027883a 	mov	r19,zero
    b84c:	483f7d0e 	bge	r9,zero,b644 <__alt_data_end+0xff00b644>
    b850:	003ddc06 	br	afc4 <__alt_data_end+0xff00afc4>
    b854:	d8c02215 	stw	r3,136(sp)
    b858:	0039883a 	mov	fp,zero
    b85c:	003ddb06 	br	afcc <__alt_data_end+0xff00afcc>
    b860:	02800074 	movhi	r10,1
    b864:	52875c04 	addi	r10,r10,7536
    b868:	da802415 	stw	r10,144(sp)
    b86c:	003e8306 	br	b27c <__alt_data_end+0xff00b27c>
    b870:	d8801c17 	ldw	r2,112(sp)
    b874:	dd002117 	ldw	r20,132(sp)
    b878:	103eb926 	beq	r2,zero,b360 <__alt_data_end+0xff00b360>
    b87c:	d9002017 	ldw	r4,128(sp)
    b880:	d9801a04 	addi	r6,sp,104
    b884:	a00b883a 	mov	r5,r20
    b888:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b88c:	003eb406 	br	b360 <__alt_data_end+0xff00b360>
    b890:	80c00043 	ldbu	r3,1(r16)
    b894:	a5000814 	ori	r20,r20,32
    b898:	84000044 	addi	r16,r16,1
    b89c:	18c03fcc 	andi	r3,r3,255
    b8a0:	18c0201c 	xori	r3,r3,128
    b8a4:	18ffe004 	addi	r3,r3,-128
    b8a8:	003bb706 	br	a788 <__alt_data_end+0xff00a788>
    b8ac:	a809883a 	mov	r4,r21
    b8b0:	d8c02a15 	stw	r3,168(sp)
    b8b4:	da002b15 	stw	r8,172(sp)
    b8b8:	00037c00 	call	37c0 <strlen>
    b8bc:	d8c02a17 	ldw	r3,168(sp)
    b8c0:	1027883a 	mov	r19,r2
    b8c4:	df001d83 	ldbu	fp,118(sp)
    b8c8:	d8c02215 	stw	r3,136(sp)
    b8cc:	0013883a 	mov	r9,zero
    b8d0:	da002b17 	ldw	r8,172(sp)
    b8d4:	003c4d06 	br	aa0c <__alt_data_end+0xff00aa0c>
    b8d8:	d9402117 	ldw	r5,132(sp)
    b8dc:	d9002017 	ldw	r4,128(sp)
    b8e0:	d9801a04 	addi	r6,sp,104
    b8e4:	da402c15 	stw	r9,176(sp)
    b8e8:	000a4f80 	call	a4f8 <__sprint_r.part.0>
    b8ec:	da402c17 	ldw	r9,176(sp)
    b8f0:	103e9a1e 	bne	r2,zero,b35c <__alt_data_end+0xff00b35c>
    b8f4:	d9401b17 	ldw	r5,108(sp)
    b8f8:	d8801c17 	ldw	r2,112(sp)
    b8fc:	d811883a 	mov	r8,sp
    b900:	29000044 	addi	r4,r5,1
    b904:	003e4206 	br	b210 <__alt_data_end+0xff00b210>
    b908:	d9401b17 	ldw	r5,108(sp)
    b90c:	01000074 	movhi	r4,1
    b910:	21076004 	addi	r4,r4,7552
    b914:	d9002415 	stw	r4,144(sp)
    b918:	29400044 	addi	r5,r5,1
    b91c:	003c6d06 	br	aad4 <__alt_data_end+0xff00aad4>
    b920:	0039883a 	mov	fp,zero
    b924:	00800084 	movi	r2,2
    b928:	10803fcc 	andi	r2,r2,255
    b92c:	01000044 	movi	r4,1
    b930:	11001e26 	beq	r2,r4,b9ac <___vfiprintf_internal_r+0x13a0>
    b934:	01000084 	movi	r4,2
    b938:	11001e1e 	bne	r2,r4,b9b4 <___vfiprintf_internal_r+0x13a8>
    b93c:	1829883a 	mov	r20,r3
    b940:	003eea06 	br	b4ec <__alt_data_end+0xff00b4ec>
    b944:	a007883a 	mov	r3,r20
    b948:	00800044 	movi	r2,1
    b94c:	003ff606 	br	b928 <__alt_data_end+0xff00b928>
    b950:	00800184 	movi	r2,6
    b954:	1240012e 	bgeu	r2,r9,b95c <___vfiprintf_internal_r+0x1350>
    b958:	1013883a 	mov	r9,r2
    b95c:	4827883a 	mov	r19,r9
    b960:	4825883a 	mov	r18,r9
    b964:	48001516 	blt	r9,zero,b9bc <___vfiprintf_internal_r+0x13b0>
    b968:	05400074 	movhi	r21,1
    b96c:	d8c02215 	stw	r3,136(sp)
    b970:	ad470004 	addi	r21,r21,7168
    b974:	003d1406 	br	adc8 <__alt_data_end+0xff00adc8>
    b978:	02800074 	movhi	r10,1
    b97c:	52875c04 	addi	r10,r10,7536
    b980:	da802415 	stw	r10,144(sp)
    b984:	200d883a 	mov	r6,r4
    b988:	003c9106 	br	abd0 <__alt_data_end+0xff00abd0>
    b98c:	5021883a 	mov	r16,r10
    b990:	0013883a 	mov	r9,zero
    b994:	003b7d06 	br	a78c <__alt_data_end+0xff00a78c>
    b998:	4827883a 	mov	r19,r9
    b99c:	df001d83 	ldbu	fp,118(sp)
    b9a0:	d8c02215 	stw	r3,136(sp)
    b9a4:	0013883a 	mov	r9,zero
    b9a8:	003c1806 	br	aa0c <__alt_data_end+0xff00aa0c>
    b9ac:	1829883a 	mov	r20,r3
    b9b0:	003d1806 	br	ae14 <__alt_data_end+0xff00ae14>
    b9b4:	1829883a 	mov	r20,r3
    b9b8:	003ccd06 	br	acf0 <__alt_data_end+0xff00acf0>
    b9bc:	0025883a 	mov	r18,zero
    b9c0:	003fe906 	br	b968 <__alt_data_end+0xff00b968>
    b9c4:	d8802217 	ldw	r2,136(sp)
    b9c8:	80c00043 	ldbu	r3,1(r16)
    b9cc:	5021883a 	mov	r16,r10
    b9d0:	12400017 	ldw	r9,0(r2)
    b9d4:	10800104 	addi	r2,r2,4
    b9d8:	d8802215 	stw	r2,136(sp)
    b9dc:	483faf0e 	bge	r9,zero,b89c <__alt_data_end+0xff00b89c>
    b9e0:	18c03fcc 	andi	r3,r3,255
    b9e4:	18c0201c 	xori	r3,r3,128
    b9e8:	027fffc4 	movi	r9,-1
    b9ec:	18ffe004 	addi	r3,r3,-128
    b9f0:	003b6506 	br	a788 <__alt_data_end+0xff00a788>
    b9f4:	d9c01d85 	stb	r7,118(sp)
    b9f8:	003ca006 	br	ac7c <__alt_data_end+0xff00ac7c>
    b9fc:	d9c01d85 	stb	r7,118(sp)
    ba00:	003cad06 	br	acb8 <__alt_data_end+0xff00acb8>
    ba04:	d9c01d85 	stb	r7,118(sp)
    ba08:	003d7d06 	br	b000 <__alt_data_end+0xff00b000>
    ba0c:	d9c01d85 	stb	r7,118(sp)
    ba10:	003d5f06 	br	af90 <__alt_data_end+0xff00af90>
    ba14:	a080004c 	andi	r2,r20,1
    ba18:	0039883a 	mov	fp,zero
    ba1c:	10000526 	beq	r2,zero,ba34 <___vfiprintf_internal_r+0x1428>
    ba20:	00800c04 	movi	r2,48
    ba24:	d88019c5 	stb	r2,103(sp)
    ba28:	dcc02717 	ldw	r19,156(sp)
    ba2c:	dd4019c4 	addi	r21,sp,103
    ba30:	003bf606 	br	aa0c <__alt_data_end+0xff00aa0c>
    ba34:	0027883a 	mov	r19,zero
    ba38:	dd401a04 	addi	r21,sp,104
    ba3c:	003bf306 	br	aa0c <__alt_data_end+0xff00aa0c>
    ba40:	d9c01d85 	stb	r7,118(sp)
    ba44:	003dc806 	br	b168 <__alt_data_end+0xff00b168>
    ba48:	d9c01d85 	stb	r7,118(sp)
    ba4c:	003d3a06 	br	af38 <__alt_data_end+0xff00af38>
    ba50:	d9c01d85 	stb	r7,118(sp)
    ba54:	003d2a06 	br	af00 <__alt_data_end+0xff00af00>
    ba58:	d9c01d85 	stb	r7,118(sp)
    ba5c:	003cde06 	br	add8 <__alt_data_end+0xff00add8>
    ba60:	d9c01d85 	stb	r7,118(sp)
    ba64:	003cbc06 	br	ad58 <__alt_data_end+0xff00ad58>

0000ba68 <__vfiprintf_internal>:
    ba68:	00800074 	movhi	r2,1
    ba6c:	108e5d04 	addi	r2,r2,14708
    ba70:	300f883a 	mov	r7,r6
    ba74:	280d883a 	mov	r6,r5
    ba78:	200b883a 	mov	r5,r4
    ba7c:	11000017 	ldw	r4,0(r2)
    ba80:	000a60c1 	jmpi	a60c <___vfiprintf_internal_r>

0000ba84 <__sbprintf>:
    ba84:	2880030b 	ldhu	r2,12(r5)
    ba88:	2ac01917 	ldw	r11,100(r5)
    ba8c:	2a80038b 	ldhu	r10,14(r5)
    ba90:	2a400717 	ldw	r9,28(r5)
    ba94:	2a000917 	ldw	r8,36(r5)
    ba98:	defee204 	addi	sp,sp,-1144
    ba9c:	00c10004 	movi	r3,1024
    baa0:	dc011a15 	stw	r16,1128(sp)
    baa4:	10bfff4c 	andi	r2,r2,65533
    baa8:	2821883a 	mov	r16,r5
    baac:	d8cb883a 	add	r5,sp,r3
    bab0:	dc811c15 	stw	r18,1136(sp)
    bab4:	dc411b15 	stw	r17,1132(sp)
    bab8:	dfc11d15 	stw	ra,1140(sp)
    babc:	2025883a 	mov	r18,r4
    bac0:	d881030d 	sth	r2,1036(sp)
    bac4:	dac11915 	stw	r11,1124(sp)
    bac8:	da81038d 	sth	r10,1038(sp)
    bacc:	da410715 	stw	r9,1052(sp)
    bad0:	da010915 	stw	r8,1060(sp)
    bad4:	dec10015 	stw	sp,1024(sp)
    bad8:	dec10415 	stw	sp,1040(sp)
    badc:	d8c10215 	stw	r3,1032(sp)
    bae0:	d8c10515 	stw	r3,1044(sp)
    bae4:	d8010615 	stw	zero,1048(sp)
    bae8:	000a60c0 	call	a60c <___vfiprintf_internal_r>
    baec:	1023883a 	mov	r17,r2
    baf0:	10000416 	blt	r2,zero,bb04 <__sbprintf+0x80>
    baf4:	d9410004 	addi	r5,sp,1024
    baf8:	9009883a 	mov	r4,r18
    bafc:	00077200 	call	7720 <_fflush_r>
    bb00:	10000d1e 	bne	r2,zero,bb38 <__sbprintf+0xb4>
    bb04:	d881030b 	ldhu	r2,1036(sp)
    bb08:	1080100c 	andi	r2,r2,64
    bb0c:	10000326 	beq	r2,zero,bb1c <__sbprintf+0x98>
    bb10:	8080030b 	ldhu	r2,12(r16)
    bb14:	10801014 	ori	r2,r2,64
    bb18:	8080030d 	sth	r2,12(r16)
    bb1c:	8805883a 	mov	r2,r17
    bb20:	dfc11d17 	ldw	ra,1140(sp)
    bb24:	dc811c17 	ldw	r18,1136(sp)
    bb28:	dc411b17 	ldw	r17,1132(sp)
    bb2c:	dc011a17 	ldw	r16,1128(sp)
    bb30:	dec11e04 	addi	sp,sp,1144
    bb34:	f800283a 	ret
    bb38:	047fffc4 	movi	r17,-1
    bb3c:	003ff106 	br	bb04 <__alt_data_end+0xff00bb04>

0000bb40 <_write_r>:
    bb40:	defffd04 	addi	sp,sp,-12
    bb44:	2805883a 	mov	r2,r5
    bb48:	dc000015 	stw	r16,0(sp)
    bb4c:	04000074 	movhi	r16,1
    bb50:	dc400115 	stw	r17,4(sp)
    bb54:	300b883a 	mov	r5,r6
    bb58:	84157d04 	addi	r16,r16,22004
    bb5c:	2023883a 	mov	r17,r4
    bb60:	380d883a 	mov	r6,r7
    bb64:	1009883a 	mov	r4,r2
    bb68:	dfc00215 	stw	ra,8(sp)
    bb6c:	80000015 	stw	zero,0(r16)
    bb70:	000f4140 	call	f414 <write>
    bb74:	00ffffc4 	movi	r3,-1
    bb78:	10c00526 	beq	r2,r3,bb90 <_write_r+0x50>
    bb7c:	dfc00217 	ldw	ra,8(sp)
    bb80:	dc400117 	ldw	r17,4(sp)
    bb84:	dc000017 	ldw	r16,0(sp)
    bb88:	dec00304 	addi	sp,sp,12
    bb8c:	f800283a 	ret
    bb90:	80c00017 	ldw	r3,0(r16)
    bb94:	183ff926 	beq	r3,zero,bb7c <__alt_data_end+0xff00bb7c>
    bb98:	88c00015 	stw	r3,0(r17)
    bb9c:	003ff706 	br	bb7c <__alt_data_end+0xff00bb7c>

0000bba0 <_close_r>:
    bba0:	defffd04 	addi	sp,sp,-12
    bba4:	dc000015 	stw	r16,0(sp)
    bba8:	04000074 	movhi	r16,1
    bbac:	dc400115 	stw	r17,4(sp)
    bbb0:	84157d04 	addi	r16,r16,22004
    bbb4:	2023883a 	mov	r17,r4
    bbb8:	2809883a 	mov	r4,r5
    bbbc:	dfc00215 	stw	ra,8(sp)
    bbc0:	80000015 	stw	zero,0(r16)
    bbc4:	000ebd40 	call	ebd4 <close>
    bbc8:	00ffffc4 	movi	r3,-1
    bbcc:	10c00526 	beq	r2,r3,bbe4 <_close_r+0x44>
    bbd0:	dfc00217 	ldw	ra,8(sp)
    bbd4:	dc400117 	ldw	r17,4(sp)
    bbd8:	dc000017 	ldw	r16,0(sp)
    bbdc:	dec00304 	addi	sp,sp,12
    bbe0:	f800283a 	ret
    bbe4:	80c00017 	ldw	r3,0(r16)
    bbe8:	183ff926 	beq	r3,zero,bbd0 <__alt_data_end+0xff00bbd0>
    bbec:	88c00015 	stw	r3,0(r17)
    bbf0:	003ff706 	br	bbd0 <__alt_data_end+0xff00bbd0>

0000bbf4 <_calloc_r>:
    bbf4:	298b383a 	mul	r5,r5,r6
    bbf8:	defffe04 	addi	sp,sp,-8
    bbfc:	dfc00115 	stw	ra,4(sp)
    bc00:	dc000015 	stw	r16,0(sp)
    bc04:	0002e200 	call	2e20 <_malloc_r>
    bc08:	10002926 	beq	r2,zero,bcb0 <_calloc_r+0xbc>
    bc0c:	11bfff17 	ldw	r6,-4(r2)
    bc10:	1021883a 	mov	r16,r2
    bc14:	00bfff04 	movi	r2,-4
    bc18:	308c703a 	and	r6,r6,r2
    bc1c:	00c00904 	movi	r3,36
    bc20:	308d883a 	add	r6,r6,r2
    bc24:	19801636 	bltu	r3,r6,bc80 <_calloc_r+0x8c>
    bc28:	008004c4 	movi	r2,19
    bc2c:	11800b2e 	bgeu	r2,r6,bc5c <_calloc_r+0x68>
    bc30:	80000015 	stw	zero,0(r16)
    bc34:	80000115 	stw	zero,4(r16)
    bc38:	008006c4 	movi	r2,27
    bc3c:	11801a2e 	bgeu	r2,r6,bca8 <_calloc_r+0xb4>
    bc40:	80000215 	stw	zero,8(r16)
    bc44:	80000315 	stw	zero,12(r16)
    bc48:	30c0151e 	bne	r6,r3,bca0 <_calloc_r+0xac>
    bc4c:	80000415 	stw	zero,16(r16)
    bc50:	80800604 	addi	r2,r16,24
    bc54:	80000515 	stw	zero,20(r16)
    bc58:	00000106 	br	bc60 <_calloc_r+0x6c>
    bc5c:	8005883a 	mov	r2,r16
    bc60:	10000015 	stw	zero,0(r2)
    bc64:	10000115 	stw	zero,4(r2)
    bc68:	10000215 	stw	zero,8(r2)
    bc6c:	8005883a 	mov	r2,r16
    bc70:	dfc00117 	ldw	ra,4(sp)
    bc74:	dc000017 	ldw	r16,0(sp)
    bc78:	dec00204 	addi	sp,sp,8
    bc7c:	f800283a 	ret
    bc80:	000b883a 	mov	r5,zero
    bc84:	8009883a 	mov	r4,r16
    bc88:	0008be40 	call	8be4 <memset>
    bc8c:	8005883a 	mov	r2,r16
    bc90:	dfc00117 	ldw	ra,4(sp)
    bc94:	dc000017 	ldw	r16,0(sp)
    bc98:	dec00204 	addi	sp,sp,8
    bc9c:	f800283a 	ret
    bca0:	80800404 	addi	r2,r16,16
    bca4:	003fee06 	br	bc60 <__alt_data_end+0xff00bc60>
    bca8:	80800204 	addi	r2,r16,8
    bcac:	003fec06 	br	bc60 <__alt_data_end+0xff00bc60>
    bcb0:	0005883a 	mov	r2,zero
    bcb4:	003fee06 	br	bc70 <__alt_data_end+0xff00bc70>

0000bcb8 <_fclose_r>:
    bcb8:	28003926 	beq	r5,zero,bda0 <_fclose_r+0xe8>
    bcbc:	defffc04 	addi	sp,sp,-16
    bcc0:	dc400115 	stw	r17,4(sp)
    bcc4:	dc000015 	stw	r16,0(sp)
    bcc8:	dfc00315 	stw	ra,12(sp)
    bccc:	dc800215 	stw	r18,8(sp)
    bcd0:	2023883a 	mov	r17,r4
    bcd4:	2821883a 	mov	r16,r5
    bcd8:	20000226 	beq	r4,zero,bce4 <_fclose_r+0x2c>
    bcdc:	20800e17 	ldw	r2,56(r4)
    bce0:	10002726 	beq	r2,zero,bd80 <_fclose_r+0xc8>
    bce4:	8080030f 	ldh	r2,12(r16)
    bce8:	1000071e 	bne	r2,zero,bd08 <_fclose_r+0x50>
    bcec:	0005883a 	mov	r2,zero
    bcf0:	dfc00317 	ldw	ra,12(sp)
    bcf4:	dc800217 	ldw	r18,8(sp)
    bcf8:	dc400117 	ldw	r17,4(sp)
    bcfc:	dc000017 	ldw	r16,0(sp)
    bd00:	dec00404 	addi	sp,sp,16
    bd04:	f800283a 	ret
    bd08:	800b883a 	mov	r5,r16
    bd0c:	8809883a 	mov	r4,r17
    bd10:	00075040 	call	7504 <__sflush_r>
    bd14:	1025883a 	mov	r18,r2
    bd18:	80800b17 	ldw	r2,44(r16)
    bd1c:	10000426 	beq	r2,zero,bd30 <_fclose_r+0x78>
    bd20:	81400717 	ldw	r5,28(r16)
    bd24:	8809883a 	mov	r4,r17
    bd28:	103ee83a 	callr	r2
    bd2c:	10001616 	blt	r2,zero,bd88 <_fclose_r+0xd0>
    bd30:	8080030b 	ldhu	r2,12(r16)
    bd34:	1080200c 	andi	r2,r2,128
    bd38:	1000151e 	bne	r2,zero,bd90 <_fclose_r+0xd8>
    bd3c:	81400c17 	ldw	r5,48(r16)
    bd40:	28000526 	beq	r5,zero,bd58 <_fclose_r+0xa0>
    bd44:	80801004 	addi	r2,r16,64
    bd48:	28800226 	beq	r5,r2,bd54 <_fclose_r+0x9c>
    bd4c:	8809883a 	mov	r4,r17
    bd50:	0007c700 	call	7c70 <_free_r>
    bd54:	80000c15 	stw	zero,48(r16)
    bd58:	81401117 	ldw	r5,68(r16)
    bd5c:	28000326 	beq	r5,zero,bd6c <_fclose_r+0xb4>
    bd60:	8809883a 	mov	r4,r17
    bd64:	0007c700 	call	7c70 <_free_r>
    bd68:	80001115 	stw	zero,68(r16)
    bd6c:	0007b0c0 	call	7b0c <__sfp_lock_acquire>
    bd70:	8000030d 	sth	zero,12(r16)
    bd74:	0007b100 	call	7b10 <__sfp_lock_release>
    bd78:	9005883a 	mov	r2,r18
    bd7c:	003fdc06 	br	bcf0 <__alt_data_end+0xff00bcf0>
    bd80:	0007afc0 	call	7afc <__sinit>
    bd84:	003fd706 	br	bce4 <__alt_data_end+0xff00bce4>
    bd88:	04bfffc4 	movi	r18,-1
    bd8c:	003fe806 	br	bd30 <__alt_data_end+0xff00bd30>
    bd90:	81400417 	ldw	r5,16(r16)
    bd94:	8809883a 	mov	r4,r17
    bd98:	0007c700 	call	7c70 <_free_r>
    bd9c:	003fe706 	br	bd3c <__alt_data_end+0xff00bd3c>
    bda0:	0005883a 	mov	r2,zero
    bda4:	f800283a 	ret

0000bda8 <fclose>:
    bda8:	00800074 	movhi	r2,1
    bdac:	108e5d04 	addi	r2,r2,14708
    bdb0:	200b883a 	mov	r5,r4
    bdb4:	11000017 	ldw	r4,0(r2)
    bdb8:	000bcb81 	jmpi	bcb8 <_fclose_r>

0000bdbc <__fputwc>:
    bdbc:	defff804 	addi	sp,sp,-32
    bdc0:	dcc00415 	stw	r19,16(sp)
    bdc4:	dc800315 	stw	r18,12(sp)
    bdc8:	dc000115 	stw	r16,4(sp)
    bdcc:	dfc00715 	stw	ra,28(sp)
    bdd0:	dd400615 	stw	r21,24(sp)
    bdd4:	dd000515 	stw	r20,20(sp)
    bdd8:	dc400215 	stw	r17,8(sp)
    bddc:	2027883a 	mov	r19,r4
    bde0:	2825883a 	mov	r18,r5
    bde4:	3021883a 	mov	r16,r6
    bde8:	000864c0 	call	864c <__locale_mb_cur_max>
    bdec:	00c00044 	movi	r3,1
    bdf0:	10c03e26 	beq	r2,r3,beec <__fputwc+0x130>
    bdf4:	81c01704 	addi	r7,r16,92
    bdf8:	900d883a 	mov	r6,r18
    bdfc:	d80b883a 	mov	r5,sp
    be00:	9809883a 	mov	r4,r19
    be04:	000c28c0 	call	c28c <_wcrtomb_r>
    be08:	1029883a 	mov	r20,r2
    be0c:	00bfffc4 	movi	r2,-1
    be10:	a0802026 	beq	r20,r2,be94 <__fputwc+0xd8>
    be14:	d9400003 	ldbu	r5,0(sp)
    be18:	a0001c26 	beq	r20,zero,be8c <__fputwc+0xd0>
    be1c:	0023883a 	mov	r17,zero
    be20:	05400284 	movi	r21,10
    be24:	00000906 	br	be4c <__fputwc+0x90>
    be28:	80800017 	ldw	r2,0(r16)
    be2c:	11400005 	stb	r5,0(r2)
    be30:	80c00017 	ldw	r3,0(r16)
    be34:	18c00044 	addi	r3,r3,1
    be38:	80c00015 	stw	r3,0(r16)
    be3c:	8c400044 	addi	r17,r17,1
    be40:	dc45883a 	add	r2,sp,r17
    be44:	8d00112e 	bgeu	r17,r20,be8c <__fputwc+0xd0>
    be48:	11400003 	ldbu	r5,0(r2)
    be4c:	80c00217 	ldw	r3,8(r16)
    be50:	18ffffc4 	addi	r3,r3,-1
    be54:	80c00215 	stw	r3,8(r16)
    be58:	183ff30e 	bge	r3,zero,be28 <__alt_data_end+0xff00be28>
    be5c:	80800617 	ldw	r2,24(r16)
    be60:	18801916 	blt	r3,r2,bec8 <__fputwc+0x10c>
    be64:	80800017 	ldw	r2,0(r16)
    be68:	11400005 	stb	r5,0(r2)
    be6c:	80800017 	ldw	r2,0(r16)
    be70:	10c00003 	ldbu	r3,0(r2)
    be74:	10800044 	addi	r2,r2,1
    be78:	1d402326 	beq	r3,r21,bf08 <__fputwc+0x14c>
    be7c:	80800015 	stw	r2,0(r16)
    be80:	8c400044 	addi	r17,r17,1
    be84:	dc45883a 	add	r2,sp,r17
    be88:	8d3fef36 	bltu	r17,r20,be48 <__alt_data_end+0xff00be48>
    be8c:	9005883a 	mov	r2,r18
    be90:	00000406 	br	bea4 <__fputwc+0xe8>
    be94:	80c0030b 	ldhu	r3,12(r16)
    be98:	a005883a 	mov	r2,r20
    be9c:	18c01014 	ori	r3,r3,64
    bea0:	80c0030d 	sth	r3,12(r16)
    bea4:	dfc00717 	ldw	ra,28(sp)
    bea8:	dd400617 	ldw	r21,24(sp)
    beac:	dd000517 	ldw	r20,20(sp)
    beb0:	dcc00417 	ldw	r19,16(sp)
    beb4:	dc800317 	ldw	r18,12(sp)
    beb8:	dc400217 	ldw	r17,8(sp)
    bebc:	dc000117 	ldw	r16,4(sp)
    bec0:	dec00804 	addi	sp,sp,32
    bec4:	f800283a 	ret
    bec8:	800d883a 	mov	r6,r16
    becc:	29403fcc 	andi	r5,r5,255
    bed0:	9809883a 	mov	r4,r19
    bed4:	000c1340 	call	c134 <__swbuf_r>
    bed8:	10bfffe0 	cmpeqi	r2,r2,-1
    bedc:	10803fcc 	andi	r2,r2,255
    bee0:	103fd626 	beq	r2,zero,be3c <__alt_data_end+0xff00be3c>
    bee4:	00bfffc4 	movi	r2,-1
    bee8:	003fee06 	br	bea4 <__alt_data_end+0xff00bea4>
    beec:	90ffffc4 	addi	r3,r18,-1
    bef0:	01003f84 	movi	r4,254
    bef4:	20ffbf36 	bltu	r4,r3,bdf4 <__alt_data_end+0xff00bdf4>
    bef8:	900b883a 	mov	r5,r18
    befc:	dc800005 	stb	r18,0(sp)
    bf00:	1029883a 	mov	r20,r2
    bf04:	003fc506 	br	be1c <__alt_data_end+0xff00be1c>
    bf08:	800d883a 	mov	r6,r16
    bf0c:	a80b883a 	mov	r5,r21
    bf10:	9809883a 	mov	r4,r19
    bf14:	000c1340 	call	c134 <__swbuf_r>
    bf18:	10bfffe0 	cmpeqi	r2,r2,-1
    bf1c:	003fef06 	br	bedc <__alt_data_end+0xff00bedc>

0000bf20 <_fputwc_r>:
    bf20:	3080030b 	ldhu	r2,12(r6)
    bf24:	10c8000c 	andi	r3,r2,8192
    bf28:	1800051e 	bne	r3,zero,bf40 <_fputwc_r+0x20>
    bf2c:	30c01917 	ldw	r3,100(r6)
    bf30:	10880014 	ori	r2,r2,8192
    bf34:	3080030d 	sth	r2,12(r6)
    bf38:	18880014 	ori	r2,r3,8192
    bf3c:	30801915 	stw	r2,100(r6)
    bf40:	000bdbc1 	jmpi	bdbc <__fputwc>

0000bf44 <fputwc>:
    bf44:	00800074 	movhi	r2,1
    bf48:	defffc04 	addi	sp,sp,-16
    bf4c:	108e5d04 	addi	r2,r2,14708
    bf50:	dc000115 	stw	r16,4(sp)
    bf54:	14000017 	ldw	r16,0(r2)
    bf58:	dc400215 	stw	r17,8(sp)
    bf5c:	dfc00315 	stw	ra,12(sp)
    bf60:	2023883a 	mov	r17,r4
    bf64:	80000226 	beq	r16,zero,bf70 <fputwc+0x2c>
    bf68:	80800e17 	ldw	r2,56(r16)
    bf6c:	10001026 	beq	r2,zero,bfb0 <fputwc+0x6c>
    bf70:	2880030b 	ldhu	r2,12(r5)
    bf74:	10c8000c 	andi	r3,r2,8192
    bf78:	1800051e 	bne	r3,zero,bf90 <fputwc+0x4c>
    bf7c:	28c01917 	ldw	r3,100(r5)
    bf80:	10880014 	ori	r2,r2,8192
    bf84:	2880030d 	sth	r2,12(r5)
    bf88:	18880014 	ori	r2,r3,8192
    bf8c:	28801915 	stw	r2,100(r5)
    bf90:	280d883a 	mov	r6,r5
    bf94:	8009883a 	mov	r4,r16
    bf98:	880b883a 	mov	r5,r17
    bf9c:	dfc00317 	ldw	ra,12(sp)
    bfa0:	dc400217 	ldw	r17,8(sp)
    bfa4:	dc000117 	ldw	r16,4(sp)
    bfa8:	dec00404 	addi	sp,sp,16
    bfac:	000bdbc1 	jmpi	bdbc <__fputwc>
    bfb0:	8009883a 	mov	r4,r16
    bfb4:	d9400015 	stw	r5,0(sp)
    bfb8:	0007afc0 	call	7afc <__sinit>
    bfbc:	d9400017 	ldw	r5,0(sp)
    bfc0:	003feb06 	br	bf70 <__alt_data_end+0xff00bf70>

0000bfc4 <_fstat_r>:
    bfc4:	defffd04 	addi	sp,sp,-12
    bfc8:	2805883a 	mov	r2,r5
    bfcc:	dc000015 	stw	r16,0(sp)
    bfd0:	04000074 	movhi	r16,1
    bfd4:	dc400115 	stw	r17,4(sp)
    bfd8:	84157d04 	addi	r16,r16,22004
    bfdc:	2023883a 	mov	r17,r4
    bfe0:	300b883a 	mov	r5,r6
    bfe4:	1009883a 	mov	r4,r2
    bfe8:	dfc00215 	stw	ra,8(sp)
    bfec:	80000015 	stw	zero,0(r16)
    bff0:	000ed0c0 	call	ed0c <fstat>
    bff4:	00ffffc4 	movi	r3,-1
    bff8:	10c00526 	beq	r2,r3,c010 <_fstat_r+0x4c>
    bffc:	dfc00217 	ldw	ra,8(sp)
    c000:	dc400117 	ldw	r17,4(sp)
    c004:	dc000017 	ldw	r16,0(sp)
    c008:	dec00304 	addi	sp,sp,12
    c00c:	f800283a 	ret
    c010:	80c00017 	ldw	r3,0(r16)
    c014:	183ff926 	beq	r3,zero,bffc <__alt_data_end+0xff00bffc>
    c018:	88c00015 	stw	r3,0(r17)
    c01c:	003ff706 	br	bffc <__alt_data_end+0xff00bffc>

0000c020 <_isatty_r>:
    c020:	defffd04 	addi	sp,sp,-12
    c024:	dc000015 	stw	r16,0(sp)
    c028:	04000074 	movhi	r16,1
    c02c:	dc400115 	stw	r17,4(sp)
    c030:	84157d04 	addi	r16,r16,22004
    c034:	2023883a 	mov	r17,r4
    c038:	2809883a 	mov	r4,r5
    c03c:	dfc00215 	stw	ra,8(sp)
    c040:	80000015 	stw	zero,0(r16)
    c044:	000edf80 	call	edf8 <isatty>
    c048:	00ffffc4 	movi	r3,-1
    c04c:	10c00526 	beq	r2,r3,c064 <_isatty_r+0x44>
    c050:	dfc00217 	ldw	ra,8(sp)
    c054:	dc400117 	ldw	r17,4(sp)
    c058:	dc000017 	ldw	r16,0(sp)
    c05c:	dec00304 	addi	sp,sp,12
    c060:	f800283a 	ret
    c064:	80c00017 	ldw	r3,0(r16)
    c068:	183ff926 	beq	r3,zero,c050 <__alt_data_end+0xff00c050>
    c06c:	88c00015 	stw	r3,0(r17)
    c070:	003ff706 	br	c050 <__alt_data_end+0xff00c050>

0000c074 <_lseek_r>:
    c074:	defffd04 	addi	sp,sp,-12
    c078:	2805883a 	mov	r2,r5
    c07c:	dc000015 	stw	r16,0(sp)
    c080:	04000074 	movhi	r16,1
    c084:	dc400115 	stw	r17,4(sp)
    c088:	300b883a 	mov	r5,r6
    c08c:	84157d04 	addi	r16,r16,22004
    c090:	2023883a 	mov	r17,r4
    c094:	380d883a 	mov	r6,r7
    c098:	1009883a 	mov	r4,r2
    c09c:	dfc00215 	stw	ra,8(sp)
    c0a0:	80000015 	stw	zero,0(r16)
    c0a4:	000efc40 	call	efc4 <lseek>
    c0a8:	00ffffc4 	movi	r3,-1
    c0ac:	10c00526 	beq	r2,r3,c0c4 <_lseek_r+0x50>
    c0b0:	dfc00217 	ldw	ra,8(sp)
    c0b4:	dc400117 	ldw	r17,4(sp)
    c0b8:	dc000017 	ldw	r16,0(sp)
    c0bc:	dec00304 	addi	sp,sp,12
    c0c0:	f800283a 	ret
    c0c4:	80c00017 	ldw	r3,0(r16)
    c0c8:	183ff926 	beq	r3,zero,c0b0 <__alt_data_end+0xff00c0b0>
    c0cc:	88c00015 	stw	r3,0(r17)
    c0d0:	003ff706 	br	c0b0 <__alt_data_end+0xff00c0b0>

0000c0d4 <_read_r>:
    c0d4:	defffd04 	addi	sp,sp,-12
    c0d8:	2805883a 	mov	r2,r5
    c0dc:	dc000015 	stw	r16,0(sp)
    c0e0:	04000074 	movhi	r16,1
    c0e4:	dc400115 	stw	r17,4(sp)
    c0e8:	300b883a 	mov	r5,r6
    c0ec:	84157d04 	addi	r16,r16,22004
    c0f0:	2023883a 	mov	r17,r4
    c0f4:	380d883a 	mov	r6,r7
    c0f8:	1009883a 	mov	r4,r2
    c0fc:	dfc00215 	stw	ra,8(sp)
    c100:	80000015 	stw	zero,0(r16)
    c104:	000f1980 	call	f198 <read>
    c108:	00ffffc4 	movi	r3,-1
    c10c:	10c00526 	beq	r2,r3,c124 <_read_r+0x50>
    c110:	dfc00217 	ldw	ra,8(sp)
    c114:	dc400117 	ldw	r17,4(sp)
    c118:	dc000017 	ldw	r16,0(sp)
    c11c:	dec00304 	addi	sp,sp,12
    c120:	f800283a 	ret
    c124:	80c00017 	ldw	r3,0(r16)
    c128:	183ff926 	beq	r3,zero,c110 <__alt_data_end+0xff00c110>
    c12c:	88c00015 	stw	r3,0(r17)
    c130:	003ff706 	br	c110 <__alt_data_end+0xff00c110>

0000c134 <__swbuf_r>:
    c134:	defffb04 	addi	sp,sp,-20
    c138:	dcc00315 	stw	r19,12(sp)
    c13c:	dc800215 	stw	r18,8(sp)
    c140:	dc000015 	stw	r16,0(sp)
    c144:	dfc00415 	stw	ra,16(sp)
    c148:	dc400115 	stw	r17,4(sp)
    c14c:	2025883a 	mov	r18,r4
    c150:	2827883a 	mov	r19,r5
    c154:	3021883a 	mov	r16,r6
    c158:	20000226 	beq	r4,zero,c164 <__swbuf_r+0x30>
    c15c:	20800e17 	ldw	r2,56(r4)
    c160:	10004226 	beq	r2,zero,c26c <__swbuf_r+0x138>
    c164:	80800617 	ldw	r2,24(r16)
    c168:	8100030b 	ldhu	r4,12(r16)
    c16c:	80800215 	stw	r2,8(r16)
    c170:	2080020c 	andi	r2,r4,8
    c174:	10003626 	beq	r2,zero,c250 <__swbuf_r+0x11c>
    c178:	80c00417 	ldw	r3,16(r16)
    c17c:	18003426 	beq	r3,zero,c250 <__swbuf_r+0x11c>
    c180:	2088000c 	andi	r2,r4,8192
    c184:	9c403fcc 	andi	r17,r19,255
    c188:	10001a26 	beq	r2,zero,c1f4 <__swbuf_r+0xc0>
    c18c:	80800017 	ldw	r2,0(r16)
    c190:	81000517 	ldw	r4,20(r16)
    c194:	10c7c83a 	sub	r3,r2,r3
    c198:	1900200e 	bge	r3,r4,c21c <__swbuf_r+0xe8>
    c19c:	18c00044 	addi	r3,r3,1
    c1a0:	81000217 	ldw	r4,8(r16)
    c1a4:	11400044 	addi	r5,r2,1
    c1a8:	81400015 	stw	r5,0(r16)
    c1ac:	213fffc4 	addi	r4,r4,-1
    c1b0:	81000215 	stw	r4,8(r16)
    c1b4:	14c00005 	stb	r19,0(r2)
    c1b8:	80800517 	ldw	r2,20(r16)
    c1bc:	10c01e26 	beq	r2,r3,c238 <__swbuf_r+0x104>
    c1c0:	8080030b 	ldhu	r2,12(r16)
    c1c4:	1080004c 	andi	r2,r2,1
    c1c8:	10000226 	beq	r2,zero,c1d4 <__swbuf_r+0xa0>
    c1cc:	00800284 	movi	r2,10
    c1d0:	88801926 	beq	r17,r2,c238 <__swbuf_r+0x104>
    c1d4:	8805883a 	mov	r2,r17
    c1d8:	dfc00417 	ldw	ra,16(sp)
    c1dc:	dcc00317 	ldw	r19,12(sp)
    c1e0:	dc800217 	ldw	r18,8(sp)
    c1e4:	dc400117 	ldw	r17,4(sp)
    c1e8:	dc000017 	ldw	r16,0(sp)
    c1ec:	dec00504 	addi	sp,sp,20
    c1f0:	f800283a 	ret
    c1f4:	81401917 	ldw	r5,100(r16)
    c1f8:	00b7ffc4 	movi	r2,-8193
    c1fc:	21080014 	ori	r4,r4,8192
    c200:	2884703a 	and	r2,r5,r2
    c204:	80801915 	stw	r2,100(r16)
    c208:	80800017 	ldw	r2,0(r16)
    c20c:	8100030d 	sth	r4,12(r16)
    c210:	81000517 	ldw	r4,20(r16)
    c214:	10c7c83a 	sub	r3,r2,r3
    c218:	193fe016 	blt	r3,r4,c19c <__alt_data_end+0xff00c19c>
    c21c:	800b883a 	mov	r5,r16
    c220:	9009883a 	mov	r4,r18
    c224:	00077200 	call	7720 <_fflush_r>
    c228:	1000071e 	bne	r2,zero,c248 <__swbuf_r+0x114>
    c22c:	80800017 	ldw	r2,0(r16)
    c230:	00c00044 	movi	r3,1
    c234:	003fda06 	br	c1a0 <__alt_data_end+0xff00c1a0>
    c238:	800b883a 	mov	r5,r16
    c23c:	9009883a 	mov	r4,r18
    c240:	00077200 	call	7720 <_fflush_r>
    c244:	103fe326 	beq	r2,zero,c1d4 <__alt_data_end+0xff00c1d4>
    c248:	00bfffc4 	movi	r2,-1
    c24c:	003fe206 	br	c1d8 <__alt_data_end+0xff00c1d8>
    c250:	800b883a 	mov	r5,r16
    c254:	9009883a 	mov	r4,r18
    c258:	0005b280 	call	5b28 <__swsetup_r>
    c25c:	103ffa1e 	bne	r2,zero,c248 <__alt_data_end+0xff00c248>
    c260:	8100030b 	ldhu	r4,12(r16)
    c264:	80c00417 	ldw	r3,16(r16)
    c268:	003fc506 	br	c180 <__alt_data_end+0xff00c180>
    c26c:	0007afc0 	call	7afc <__sinit>
    c270:	003fbc06 	br	c164 <__alt_data_end+0xff00c164>

0000c274 <__swbuf>:
    c274:	00800074 	movhi	r2,1
    c278:	108e5d04 	addi	r2,r2,14708
    c27c:	280d883a 	mov	r6,r5
    c280:	200b883a 	mov	r5,r4
    c284:	11000017 	ldw	r4,0(r2)
    c288:	000c1341 	jmpi	c134 <__swbuf_r>

0000c28c <_wcrtomb_r>:
    c28c:	defff604 	addi	sp,sp,-40
    c290:	00800074 	movhi	r2,1
    c294:	dc800815 	stw	r18,32(sp)
    c298:	dc400715 	stw	r17,28(sp)
    c29c:	dc000615 	stw	r16,24(sp)
    c2a0:	108e5f04 	addi	r2,r2,14716
    c2a4:	dfc00915 	stw	ra,36(sp)
    c2a8:	2021883a 	mov	r16,r4
    c2ac:	3823883a 	mov	r17,r7
    c2b0:	14800017 	ldw	r18,0(r2)
    c2b4:	28001426 	beq	r5,zero,c308 <_wcrtomb_r+0x7c>
    c2b8:	d9400415 	stw	r5,16(sp)
    c2bc:	d9800515 	stw	r6,20(sp)
    c2c0:	00086400 	call	8640 <__locale_charset>
    c2c4:	d9800517 	ldw	r6,20(sp)
    c2c8:	d9400417 	ldw	r5,16(sp)
    c2cc:	100f883a 	mov	r7,r2
    c2d0:	dc400015 	stw	r17,0(sp)
    c2d4:	8009883a 	mov	r4,r16
    c2d8:	903ee83a 	callr	r18
    c2dc:	00ffffc4 	movi	r3,-1
    c2e0:	10c0031e 	bne	r2,r3,c2f0 <_wcrtomb_r+0x64>
    c2e4:	88000015 	stw	zero,0(r17)
    c2e8:	00c02284 	movi	r3,138
    c2ec:	80c00015 	stw	r3,0(r16)
    c2f0:	dfc00917 	ldw	ra,36(sp)
    c2f4:	dc800817 	ldw	r18,32(sp)
    c2f8:	dc400717 	ldw	r17,28(sp)
    c2fc:	dc000617 	ldw	r16,24(sp)
    c300:	dec00a04 	addi	sp,sp,40
    c304:	f800283a 	ret
    c308:	00086400 	call	8640 <__locale_charset>
    c30c:	100f883a 	mov	r7,r2
    c310:	dc400015 	stw	r17,0(sp)
    c314:	000d883a 	mov	r6,zero
    c318:	d9400104 	addi	r5,sp,4
    c31c:	8009883a 	mov	r4,r16
    c320:	903ee83a 	callr	r18
    c324:	003fed06 	br	c2dc <__alt_data_end+0xff00c2dc>

0000c328 <wcrtomb>:
    c328:	defff604 	addi	sp,sp,-40
    c32c:	00800074 	movhi	r2,1
    c330:	dc800615 	stw	r18,24(sp)
    c334:	dc400515 	stw	r17,20(sp)
    c338:	108e5d04 	addi	r2,r2,14708
    c33c:	dfc00915 	stw	ra,36(sp)
    c340:	dd000815 	stw	r20,32(sp)
    c344:	dcc00715 	stw	r19,28(sp)
    c348:	dc000415 	stw	r16,16(sp)
    c34c:	3025883a 	mov	r18,r6
    c350:	14400017 	ldw	r17,0(r2)
    c354:	20001926 	beq	r4,zero,c3bc <wcrtomb+0x94>
    c358:	00800074 	movhi	r2,1
    c35c:	108e5f04 	addi	r2,r2,14716
    c360:	15000017 	ldw	r20,0(r2)
    c364:	2021883a 	mov	r16,r4
    c368:	2827883a 	mov	r19,r5
    c36c:	00086400 	call	8640 <__locale_charset>
    c370:	100f883a 	mov	r7,r2
    c374:	dc800015 	stw	r18,0(sp)
    c378:	980d883a 	mov	r6,r19
    c37c:	800b883a 	mov	r5,r16
    c380:	8809883a 	mov	r4,r17
    c384:	a03ee83a 	callr	r20
    c388:	00ffffc4 	movi	r3,-1
    c38c:	10c0031e 	bne	r2,r3,c39c <wcrtomb+0x74>
    c390:	90000015 	stw	zero,0(r18)
    c394:	00c02284 	movi	r3,138
    c398:	88c00015 	stw	r3,0(r17)
    c39c:	dfc00917 	ldw	ra,36(sp)
    c3a0:	dd000817 	ldw	r20,32(sp)
    c3a4:	dcc00717 	ldw	r19,28(sp)
    c3a8:	dc800617 	ldw	r18,24(sp)
    c3ac:	dc400517 	ldw	r17,20(sp)
    c3b0:	dc000417 	ldw	r16,16(sp)
    c3b4:	dec00a04 	addi	sp,sp,40
    c3b8:	f800283a 	ret
    c3bc:	00800074 	movhi	r2,1
    c3c0:	108e5f04 	addi	r2,r2,14716
    c3c4:	14000017 	ldw	r16,0(r2)
    c3c8:	00086400 	call	8640 <__locale_charset>
    c3cc:	100f883a 	mov	r7,r2
    c3d0:	dc800015 	stw	r18,0(sp)
    c3d4:	000d883a 	mov	r6,zero
    c3d8:	d9400104 	addi	r5,sp,4
    c3dc:	8809883a 	mov	r4,r17
    c3e0:	803ee83a 	callr	r16
    c3e4:	003fe806 	br	c388 <__alt_data_end+0xff00c388>

0000c3e8 <__ascii_wctomb>:
    c3e8:	28000526 	beq	r5,zero,c400 <__ascii_wctomb+0x18>
    c3ec:	00803fc4 	movi	r2,255
    c3f0:	11800536 	bltu	r2,r6,c408 <__ascii_wctomb+0x20>
    c3f4:	29800005 	stb	r6,0(r5)
    c3f8:	00800044 	movi	r2,1
    c3fc:	f800283a 	ret
    c400:	0005883a 	mov	r2,zero
    c404:	f800283a 	ret
    c408:	00802284 	movi	r2,138
    c40c:	20800015 	stw	r2,0(r4)
    c410:	00bfffc4 	movi	r2,-1
    c414:	f800283a 	ret

0000c418 <_wctomb_r>:
    c418:	00800074 	movhi	r2,1
    c41c:	defff904 	addi	sp,sp,-28
    c420:	108e5f04 	addi	r2,r2,14716
    c424:	dfc00615 	stw	ra,24(sp)
    c428:	dc400515 	stw	r17,20(sp)
    c42c:	dc000415 	stw	r16,16(sp)
    c430:	3823883a 	mov	r17,r7
    c434:	14000017 	ldw	r16,0(r2)
    c438:	d9000115 	stw	r4,4(sp)
    c43c:	d9400215 	stw	r5,8(sp)
    c440:	d9800315 	stw	r6,12(sp)
    c444:	00086400 	call	8640 <__locale_charset>
    c448:	d9800317 	ldw	r6,12(sp)
    c44c:	d9400217 	ldw	r5,8(sp)
    c450:	d9000117 	ldw	r4,4(sp)
    c454:	100f883a 	mov	r7,r2
    c458:	dc400015 	stw	r17,0(sp)
    c45c:	803ee83a 	callr	r16
    c460:	dfc00617 	ldw	ra,24(sp)
    c464:	dc400517 	ldw	r17,20(sp)
    c468:	dc000417 	ldw	r16,16(sp)
    c46c:	dec00704 	addi	sp,sp,28
    c470:	f800283a 	ret

0000c474 <__udivdi3>:
    c474:	defff504 	addi	sp,sp,-44
    c478:	dcc00415 	stw	r19,16(sp)
    c47c:	dc000115 	stw	r16,4(sp)
    c480:	dfc00a15 	stw	ra,40(sp)
    c484:	df000915 	stw	fp,36(sp)
    c488:	ddc00815 	stw	r23,32(sp)
    c48c:	dd800715 	stw	r22,28(sp)
    c490:	dd400615 	stw	r21,24(sp)
    c494:	dd000515 	stw	r20,20(sp)
    c498:	dc800315 	stw	r18,12(sp)
    c49c:	dc400215 	stw	r17,8(sp)
    c4a0:	2027883a 	mov	r19,r4
    c4a4:	2821883a 	mov	r16,r5
    c4a8:	3800411e 	bne	r7,zero,c5b0 <__udivdi3+0x13c>
    c4ac:	3023883a 	mov	r17,r6
    c4b0:	2025883a 	mov	r18,r4
    c4b4:	2980522e 	bgeu	r5,r6,c600 <__udivdi3+0x18c>
    c4b8:	00bfffd4 	movui	r2,65535
    c4bc:	282d883a 	mov	r22,r5
    c4c0:	1180a836 	bltu	r2,r6,c764 <__udivdi3+0x2f0>
    c4c4:	00803fc4 	movi	r2,255
    c4c8:	1185803a 	cmpltu	r2,r2,r6
    c4cc:	100490fa 	slli	r2,r2,3
    c4d0:	3086d83a 	srl	r3,r6,r2
    c4d4:	01000074 	movhi	r4,1
    c4d8:	2106b1c4 	addi	r4,r4,6855
    c4dc:	20c7883a 	add	r3,r4,r3
    c4e0:	18c00003 	ldbu	r3,0(r3)
    c4e4:	1885883a 	add	r2,r3,r2
    c4e8:	00c00804 	movi	r3,32
    c4ec:	1887c83a 	sub	r3,r3,r2
    c4f0:	18000526 	beq	r3,zero,c508 <__udivdi3+0x94>
    c4f4:	80e0983a 	sll	r16,r16,r3
    c4f8:	9884d83a 	srl	r2,r19,r2
    c4fc:	30e2983a 	sll	r17,r6,r3
    c500:	98e4983a 	sll	r18,r19,r3
    c504:	142cb03a 	or	r22,r2,r16
    c508:	882ad43a 	srli	r21,r17,16
    c50c:	b009883a 	mov	r4,r22
    c510:	8d3fffcc 	andi	r20,r17,65535
    c514:	a80b883a 	mov	r5,r21
    c518:	00023ac0 	call	23ac <__umodsi3>
    c51c:	b009883a 	mov	r4,r22
    c520:	a80b883a 	mov	r5,r21
    c524:	1027883a 	mov	r19,r2
    c528:	00023480 	call	2348 <__udivsi3>
    c52c:	102d883a 	mov	r22,r2
    c530:	9826943a 	slli	r19,r19,16
    c534:	9004d43a 	srli	r2,r18,16
    c538:	a5a1383a 	mul	r16,r20,r22
    c53c:	14c4b03a 	or	r2,r2,r19
    c540:	1400052e 	bgeu	r2,r16,c558 <__udivdi3+0xe4>
    c544:	1445883a 	add	r2,r2,r17
    c548:	b0ffffc4 	addi	r3,r22,-1
    c54c:	14400136 	bltu	r2,r17,c554 <__udivdi3+0xe0>
    c550:	14012336 	bltu	r2,r16,c9e0 <__udivdi3+0x56c>
    c554:	182d883a 	mov	r22,r3
    c558:	1421c83a 	sub	r16,r2,r16
    c55c:	a80b883a 	mov	r5,r21
    c560:	8009883a 	mov	r4,r16
    c564:	00023ac0 	call	23ac <__umodsi3>
    c568:	1027883a 	mov	r19,r2
    c56c:	a80b883a 	mov	r5,r21
    c570:	8009883a 	mov	r4,r16
    c574:	00023480 	call	2348 <__udivsi3>
    c578:	9826943a 	slli	r19,r19,16
    c57c:	a0a9383a 	mul	r20,r20,r2
    c580:	94bfffcc 	andi	r18,r18,65535
    c584:	94e4b03a 	or	r18,r18,r19
    c588:	9500052e 	bgeu	r18,r20,c5a0 <__udivdi3+0x12c>
    c58c:	8ca5883a 	add	r18,r17,r18
    c590:	10ffffc4 	addi	r3,r2,-1
    c594:	9440f136 	bltu	r18,r17,c95c <__udivdi3+0x4e8>
    c598:	9500f02e 	bgeu	r18,r20,c95c <__udivdi3+0x4e8>
    c59c:	10bfff84 	addi	r2,r2,-2
    c5a0:	b00c943a 	slli	r6,r22,16
    c5a4:	0007883a 	mov	r3,zero
    c5a8:	3084b03a 	or	r2,r6,r2
    c5ac:	00005906 	br	c714 <__udivdi3+0x2a0>
    c5b0:	29c05636 	bltu	r5,r7,c70c <__udivdi3+0x298>
    c5b4:	00bfffd4 	movui	r2,65535
    c5b8:	11c0622e 	bgeu	r2,r7,c744 <__udivdi3+0x2d0>
    c5bc:	00804034 	movhi	r2,256
    c5c0:	10bfffc4 	addi	r2,r2,-1
    c5c4:	11c0ee36 	bltu	r2,r7,c980 <__udivdi3+0x50c>
    c5c8:	00800404 	movi	r2,16
    c5cc:	3886d83a 	srl	r3,r7,r2
    c5d0:	01000074 	movhi	r4,1
    c5d4:	2106b1c4 	addi	r4,r4,6855
    c5d8:	20c7883a 	add	r3,r4,r3
    c5dc:	18c00003 	ldbu	r3,0(r3)
    c5e0:	05400804 	movi	r21,32
    c5e4:	1885883a 	add	r2,r3,r2
    c5e8:	a8abc83a 	sub	r21,r21,r2
    c5ec:	a800621e 	bne	r21,zero,c778 <__udivdi3+0x304>
    c5f0:	3c00e936 	bltu	r7,r16,c998 <__udivdi3+0x524>
    c5f4:	9985403a 	cmpgeu	r2,r19,r6
    c5f8:	0007883a 	mov	r3,zero
    c5fc:	00004506 	br	c714 <__udivdi3+0x2a0>
    c600:	3000041e 	bne	r6,zero,c614 <__udivdi3+0x1a0>
    c604:	000b883a 	mov	r5,zero
    c608:	01000044 	movi	r4,1
    c60c:	00023480 	call	2348 <__udivsi3>
    c610:	1023883a 	mov	r17,r2
    c614:	00bfffd4 	movui	r2,65535
    c618:	14404e2e 	bgeu	r2,r17,c754 <__udivdi3+0x2e0>
    c61c:	00804034 	movhi	r2,256
    c620:	10bfffc4 	addi	r2,r2,-1
    c624:	1440d836 	bltu	r2,r17,c988 <__udivdi3+0x514>
    c628:	00800404 	movi	r2,16
    c62c:	8886d83a 	srl	r3,r17,r2
    c630:	01000074 	movhi	r4,1
    c634:	2106b1c4 	addi	r4,r4,6855
    c638:	20c7883a 	add	r3,r4,r3
    c63c:	18c00003 	ldbu	r3,0(r3)
    c640:	1885883a 	add	r2,r3,r2
    c644:	00c00804 	movi	r3,32
    c648:	1887c83a 	sub	r3,r3,r2
    c64c:	18008f1e 	bne	r3,zero,c88c <__udivdi3+0x418>
    c650:	882ad43a 	srli	r21,r17,16
    c654:	8461c83a 	sub	r16,r16,r17
    c658:	8d3fffcc 	andi	r20,r17,65535
    c65c:	00c00044 	movi	r3,1
    c660:	8009883a 	mov	r4,r16
    c664:	a80b883a 	mov	r5,r21
    c668:	d8c00015 	stw	r3,0(sp)
    c66c:	00023ac0 	call	23ac <__umodsi3>
    c670:	8009883a 	mov	r4,r16
    c674:	a80b883a 	mov	r5,r21
    c678:	1027883a 	mov	r19,r2
    c67c:	00023480 	call	2348 <__udivsi3>
    c680:	9826943a 	slli	r19,r19,16
    c684:	9008d43a 	srli	r4,r18,16
    c688:	1521383a 	mul	r16,r2,r20
    c68c:	102d883a 	mov	r22,r2
    c690:	24c8b03a 	or	r4,r4,r19
    c694:	d8c00017 	ldw	r3,0(sp)
    c698:	2400052e 	bgeu	r4,r16,c6b0 <__udivdi3+0x23c>
    c69c:	2449883a 	add	r4,r4,r17
    c6a0:	b0bfffc4 	addi	r2,r22,-1
    c6a4:	24400136 	bltu	r4,r17,c6ac <__udivdi3+0x238>
    c6a8:	2400ca36 	bltu	r4,r16,c9d4 <__udivdi3+0x560>
    c6ac:	102d883a 	mov	r22,r2
    c6b0:	2421c83a 	sub	r16,r4,r16
    c6b4:	a80b883a 	mov	r5,r21
    c6b8:	8009883a 	mov	r4,r16
    c6bc:	d8c00015 	stw	r3,0(sp)
    c6c0:	00023ac0 	call	23ac <__umodsi3>
    c6c4:	1027883a 	mov	r19,r2
    c6c8:	a80b883a 	mov	r5,r21
    c6cc:	8009883a 	mov	r4,r16
    c6d0:	00023480 	call	2348 <__udivsi3>
    c6d4:	9826943a 	slli	r19,r19,16
    c6d8:	1529383a 	mul	r20,r2,r20
    c6dc:	94bfffcc 	andi	r18,r18,65535
    c6e0:	94e4b03a 	or	r18,r18,r19
    c6e4:	d8c00017 	ldw	r3,0(sp)
    c6e8:	9500052e 	bgeu	r18,r20,c700 <__udivdi3+0x28c>
    c6ec:	8ca5883a 	add	r18,r17,r18
    c6f0:	113fffc4 	addi	r4,r2,-1
    c6f4:	94409736 	bltu	r18,r17,c954 <__udivdi3+0x4e0>
    c6f8:	9500962e 	bgeu	r18,r20,c954 <__udivdi3+0x4e0>
    c6fc:	10bfff84 	addi	r2,r2,-2
    c700:	b00c943a 	slli	r6,r22,16
    c704:	3084b03a 	or	r2,r6,r2
    c708:	00000206 	br	c714 <__udivdi3+0x2a0>
    c70c:	0007883a 	mov	r3,zero
    c710:	0005883a 	mov	r2,zero
    c714:	dfc00a17 	ldw	ra,40(sp)
    c718:	df000917 	ldw	fp,36(sp)
    c71c:	ddc00817 	ldw	r23,32(sp)
    c720:	dd800717 	ldw	r22,28(sp)
    c724:	dd400617 	ldw	r21,24(sp)
    c728:	dd000517 	ldw	r20,20(sp)
    c72c:	dcc00417 	ldw	r19,16(sp)
    c730:	dc800317 	ldw	r18,12(sp)
    c734:	dc400217 	ldw	r17,8(sp)
    c738:	dc000117 	ldw	r16,4(sp)
    c73c:	dec00b04 	addi	sp,sp,44
    c740:	f800283a 	ret
    c744:	00803fc4 	movi	r2,255
    c748:	11c5803a 	cmpltu	r2,r2,r7
    c74c:	100490fa 	slli	r2,r2,3
    c750:	003f9e06 	br	c5cc <__alt_data_end+0xff00c5cc>
    c754:	00803fc4 	movi	r2,255
    c758:	1445803a 	cmpltu	r2,r2,r17
    c75c:	100490fa 	slli	r2,r2,3
    c760:	003fb206 	br	c62c <__alt_data_end+0xff00c62c>
    c764:	00804034 	movhi	r2,256
    c768:	10bfffc4 	addi	r2,r2,-1
    c76c:	11808836 	bltu	r2,r6,c990 <__udivdi3+0x51c>
    c770:	00800404 	movi	r2,16
    c774:	003f5606 	br	c4d0 <__alt_data_end+0xff00c4d0>
    c778:	30aed83a 	srl	r23,r6,r2
    c77c:	3d4e983a 	sll	r7,r7,r21
    c780:	80acd83a 	srl	r22,r16,r2
    c784:	9884d83a 	srl	r2,r19,r2
    c788:	3deeb03a 	or	r23,r7,r23
    c78c:	b824d43a 	srli	r18,r23,16
    c790:	8560983a 	sll	r16,r16,r21
    c794:	b009883a 	mov	r4,r22
    c798:	900b883a 	mov	r5,r18
    c79c:	3568983a 	sll	r20,r6,r21
    c7a0:	1420b03a 	or	r16,r2,r16
    c7a4:	00023ac0 	call	23ac <__umodsi3>
    c7a8:	b009883a 	mov	r4,r22
    c7ac:	900b883a 	mov	r5,r18
    c7b0:	1023883a 	mov	r17,r2
    c7b4:	00023480 	call	2348 <__udivsi3>
    c7b8:	8808943a 	slli	r4,r17,16
    c7bc:	bf3fffcc 	andi	fp,r23,65535
    c7c0:	8006d43a 	srli	r3,r16,16
    c7c4:	e0a3383a 	mul	r17,fp,r2
    c7c8:	100d883a 	mov	r6,r2
    c7cc:	1906b03a 	or	r3,r3,r4
    c7d0:	1c40042e 	bgeu	r3,r17,c7e4 <__udivdi3+0x370>
    c7d4:	1dc7883a 	add	r3,r3,r23
    c7d8:	10bfffc4 	addi	r2,r2,-1
    c7dc:	1dc0752e 	bgeu	r3,r23,c9b4 <__udivdi3+0x540>
    c7e0:	100d883a 	mov	r6,r2
    c7e4:	1c63c83a 	sub	r17,r3,r17
    c7e8:	900b883a 	mov	r5,r18
    c7ec:	8809883a 	mov	r4,r17
    c7f0:	d9800015 	stw	r6,0(sp)
    c7f4:	00023ac0 	call	23ac <__umodsi3>
    c7f8:	102d883a 	mov	r22,r2
    c7fc:	8809883a 	mov	r4,r17
    c800:	900b883a 	mov	r5,r18
    c804:	00023480 	call	2348 <__udivsi3>
    c808:	b02c943a 	slli	r22,r22,16
    c80c:	e089383a 	mul	r4,fp,r2
    c810:	843fffcc 	andi	r16,r16,65535
    c814:	85a0b03a 	or	r16,r16,r22
    c818:	d9800017 	ldw	r6,0(sp)
    c81c:	8100042e 	bgeu	r16,r4,c830 <__udivdi3+0x3bc>
    c820:	85e1883a 	add	r16,r16,r23
    c824:	10ffffc4 	addi	r3,r2,-1
    c828:	85c05e2e 	bgeu	r16,r23,c9a4 <__udivdi3+0x530>
    c82c:	1805883a 	mov	r2,r3
    c830:	300c943a 	slli	r6,r6,16
    c834:	a17fffcc 	andi	r5,r20,65535
    c838:	a028d43a 	srli	r20,r20,16
    c83c:	3084b03a 	or	r2,r6,r2
    c840:	10ffffcc 	andi	r3,r2,65535
    c844:	100cd43a 	srli	r6,r2,16
    c848:	194f383a 	mul	r7,r3,r5
    c84c:	1d07383a 	mul	r3,r3,r20
    c850:	314b383a 	mul	r5,r6,r5
    c854:	3810d43a 	srli	r8,r7,16
    c858:	8121c83a 	sub	r16,r16,r4
    c85c:	1947883a 	add	r3,r3,r5
    c860:	40c7883a 	add	r3,r8,r3
    c864:	350d383a 	mul	r6,r6,r20
    c868:	1940022e 	bgeu	r3,r5,c874 <__udivdi3+0x400>
    c86c:	01000074 	movhi	r4,1
    c870:	310d883a 	add	r6,r6,r4
    c874:	1828d43a 	srli	r20,r3,16
    c878:	a18d883a 	add	r6,r20,r6
    c87c:	81803e36 	bltu	r16,r6,c978 <__udivdi3+0x504>
    c880:	81803826 	beq	r16,r6,c964 <__udivdi3+0x4f0>
    c884:	0007883a 	mov	r3,zero
    c888:	003fa206 	br	c714 <__alt_data_end+0xff00c714>
    c88c:	88e2983a 	sll	r17,r17,r3
    c890:	80a8d83a 	srl	r20,r16,r2
    c894:	80e0983a 	sll	r16,r16,r3
    c898:	882ad43a 	srli	r21,r17,16
    c89c:	9884d83a 	srl	r2,r19,r2
    c8a0:	a009883a 	mov	r4,r20
    c8a4:	a80b883a 	mov	r5,r21
    c8a8:	142eb03a 	or	r23,r2,r16
    c8ac:	98e4983a 	sll	r18,r19,r3
    c8b0:	00023ac0 	call	23ac <__umodsi3>
    c8b4:	a009883a 	mov	r4,r20
    c8b8:	a80b883a 	mov	r5,r21
    c8bc:	1021883a 	mov	r16,r2
    c8c0:	00023480 	call	2348 <__udivsi3>
    c8c4:	1039883a 	mov	fp,r2
    c8c8:	8d3fffcc 	andi	r20,r17,65535
    c8cc:	8020943a 	slli	r16,r16,16
    c8d0:	b804d43a 	srli	r2,r23,16
    c8d4:	a72d383a 	mul	r22,r20,fp
    c8d8:	1404b03a 	or	r2,r2,r16
    c8dc:	1580062e 	bgeu	r2,r22,c8f8 <__udivdi3+0x484>
    c8e0:	1445883a 	add	r2,r2,r17
    c8e4:	e0ffffc4 	addi	r3,fp,-1
    c8e8:	14403836 	bltu	r2,r17,c9cc <__udivdi3+0x558>
    c8ec:	1580372e 	bgeu	r2,r22,c9cc <__udivdi3+0x558>
    c8f0:	e73fff84 	addi	fp,fp,-2
    c8f4:	1445883a 	add	r2,r2,r17
    c8f8:	15adc83a 	sub	r22,r2,r22
    c8fc:	a80b883a 	mov	r5,r21
    c900:	b009883a 	mov	r4,r22
    c904:	00023ac0 	call	23ac <__umodsi3>
    c908:	1027883a 	mov	r19,r2
    c90c:	b009883a 	mov	r4,r22
    c910:	a80b883a 	mov	r5,r21
    c914:	00023480 	call	2348 <__udivsi3>
    c918:	9826943a 	slli	r19,r19,16
    c91c:	a0a1383a 	mul	r16,r20,r2
    c920:	b93fffcc 	andi	r4,r23,65535
    c924:	24c8b03a 	or	r4,r4,r19
    c928:	2400062e 	bgeu	r4,r16,c944 <__udivdi3+0x4d0>
    c92c:	2449883a 	add	r4,r4,r17
    c930:	10ffffc4 	addi	r3,r2,-1
    c934:	24402336 	bltu	r4,r17,c9c4 <__udivdi3+0x550>
    c938:	2400222e 	bgeu	r4,r16,c9c4 <__udivdi3+0x550>
    c93c:	10bfff84 	addi	r2,r2,-2
    c940:	2449883a 	add	r4,r4,r17
    c944:	e038943a 	slli	fp,fp,16
    c948:	2421c83a 	sub	r16,r4,r16
    c94c:	e086b03a 	or	r3,fp,r2
    c950:	003f4306 	br	c660 <__alt_data_end+0xff00c660>
    c954:	2005883a 	mov	r2,r4
    c958:	003f6906 	br	c700 <__alt_data_end+0xff00c700>
    c95c:	1805883a 	mov	r2,r3
    c960:	003f0f06 	br	c5a0 <__alt_data_end+0xff00c5a0>
    c964:	1806943a 	slli	r3,r3,16
    c968:	9d66983a 	sll	r19,r19,r21
    c96c:	39ffffcc 	andi	r7,r7,65535
    c970:	19c7883a 	add	r3,r3,r7
    c974:	98ffc32e 	bgeu	r19,r3,c884 <__alt_data_end+0xff00c884>
    c978:	10bfffc4 	addi	r2,r2,-1
    c97c:	003fc106 	br	c884 <__alt_data_end+0xff00c884>
    c980:	00800604 	movi	r2,24
    c984:	003f1106 	br	c5cc <__alt_data_end+0xff00c5cc>
    c988:	00800604 	movi	r2,24
    c98c:	003f2706 	br	c62c <__alt_data_end+0xff00c62c>
    c990:	00800604 	movi	r2,24
    c994:	003ece06 	br	c4d0 <__alt_data_end+0xff00c4d0>
    c998:	0007883a 	mov	r3,zero
    c99c:	00800044 	movi	r2,1
    c9a0:	003f5c06 	br	c714 <__alt_data_end+0xff00c714>
    c9a4:	813fa12e 	bgeu	r16,r4,c82c <__alt_data_end+0xff00c82c>
    c9a8:	10bfff84 	addi	r2,r2,-2
    c9ac:	85e1883a 	add	r16,r16,r23
    c9b0:	003f9f06 	br	c830 <__alt_data_end+0xff00c830>
    c9b4:	1c7f8a2e 	bgeu	r3,r17,c7e0 <__alt_data_end+0xff00c7e0>
    c9b8:	31bfff84 	addi	r6,r6,-2
    c9bc:	1dc7883a 	add	r3,r3,r23
    c9c0:	003f8806 	br	c7e4 <__alt_data_end+0xff00c7e4>
    c9c4:	1805883a 	mov	r2,r3
    c9c8:	003fde06 	br	c944 <__alt_data_end+0xff00c944>
    c9cc:	1839883a 	mov	fp,r3
    c9d0:	003fc906 	br	c8f8 <__alt_data_end+0xff00c8f8>
    c9d4:	b5bfff84 	addi	r22,r22,-2
    c9d8:	2449883a 	add	r4,r4,r17
    c9dc:	003f3406 	br	c6b0 <__alt_data_end+0xff00c6b0>
    c9e0:	b5bfff84 	addi	r22,r22,-2
    c9e4:	1445883a 	add	r2,r2,r17
    c9e8:	003edb06 	br	c558 <__alt_data_end+0xff00c558>

0000c9ec <__umoddi3>:
    c9ec:	defff404 	addi	sp,sp,-48
    c9f0:	df000a15 	stw	fp,40(sp)
    c9f4:	dc400315 	stw	r17,12(sp)
    c9f8:	dc000215 	stw	r16,8(sp)
    c9fc:	dfc00b15 	stw	ra,44(sp)
    ca00:	ddc00915 	stw	r23,36(sp)
    ca04:	dd800815 	stw	r22,32(sp)
    ca08:	dd400715 	stw	r21,28(sp)
    ca0c:	dd000615 	stw	r20,24(sp)
    ca10:	dcc00515 	stw	r19,20(sp)
    ca14:	dc800415 	stw	r18,16(sp)
    ca18:	2021883a 	mov	r16,r4
    ca1c:	2823883a 	mov	r17,r5
    ca20:	2839883a 	mov	fp,r5
    ca24:	38003c1e 	bne	r7,zero,cb18 <__umoddi3+0x12c>
    ca28:	3027883a 	mov	r19,r6
    ca2c:	2029883a 	mov	r20,r4
    ca30:	2980512e 	bgeu	r5,r6,cb78 <__umoddi3+0x18c>
    ca34:	00bfffd4 	movui	r2,65535
    ca38:	11809a36 	bltu	r2,r6,cca4 <__umoddi3+0x2b8>
    ca3c:	01003fc4 	movi	r4,255
    ca40:	2189803a 	cmpltu	r4,r4,r6
    ca44:	200890fa 	slli	r4,r4,3
    ca48:	3104d83a 	srl	r2,r6,r4
    ca4c:	00c00074 	movhi	r3,1
    ca50:	18c6b1c4 	addi	r3,r3,6855
    ca54:	1885883a 	add	r2,r3,r2
    ca58:	10c00003 	ldbu	r3,0(r2)
    ca5c:	00800804 	movi	r2,32
    ca60:	1909883a 	add	r4,r3,r4
    ca64:	1125c83a 	sub	r18,r2,r4
    ca68:	90000526 	beq	r18,zero,ca80 <__umoddi3+0x94>
    ca6c:	8ca2983a 	sll	r17,r17,r18
    ca70:	8108d83a 	srl	r4,r16,r4
    ca74:	34a6983a 	sll	r19,r6,r18
    ca78:	84a8983a 	sll	r20,r16,r18
    ca7c:	2478b03a 	or	fp,r4,r17
    ca80:	982ed43a 	srli	r23,r19,16
    ca84:	e009883a 	mov	r4,fp
    ca88:	9dbfffcc 	andi	r22,r19,65535
    ca8c:	b80b883a 	mov	r5,r23
    ca90:	00023ac0 	call	23ac <__umodsi3>
    ca94:	e009883a 	mov	r4,fp
    ca98:	b80b883a 	mov	r5,r23
    ca9c:	102b883a 	mov	r21,r2
    caa0:	00023480 	call	2348 <__udivsi3>
    caa4:	a806943a 	slli	r3,r21,16
    caa8:	a008d43a 	srli	r4,r20,16
    caac:	b085383a 	mul	r2,r22,r2
    cab0:	20c8b03a 	or	r4,r4,r3
    cab4:	2080032e 	bgeu	r4,r2,cac4 <__umoddi3+0xd8>
    cab8:	24c9883a 	add	r4,r4,r19
    cabc:	24c00136 	bltu	r4,r19,cac4 <__umoddi3+0xd8>
    cac0:	20811036 	bltu	r4,r2,cf04 <__umoddi3+0x518>
    cac4:	20abc83a 	sub	r21,r4,r2
    cac8:	b80b883a 	mov	r5,r23
    cacc:	a809883a 	mov	r4,r21
    cad0:	00023ac0 	call	23ac <__umodsi3>
    cad4:	1023883a 	mov	r17,r2
    cad8:	b80b883a 	mov	r5,r23
    cadc:	a809883a 	mov	r4,r21
    cae0:	00023480 	call	2348 <__udivsi3>
    cae4:	8822943a 	slli	r17,r17,16
    cae8:	b085383a 	mul	r2,r22,r2
    caec:	a0ffffcc 	andi	r3,r20,65535
    caf0:	1c46b03a 	or	r3,r3,r17
    caf4:	1880042e 	bgeu	r3,r2,cb08 <__umoddi3+0x11c>
    caf8:	1cc7883a 	add	r3,r3,r19
    cafc:	1cc00236 	bltu	r3,r19,cb08 <__umoddi3+0x11c>
    cb00:	1880012e 	bgeu	r3,r2,cb08 <__umoddi3+0x11c>
    cb04:	1cc7883a 	add	r3,r3,r19
    cb08:	1885c83a 	sub	r2,r3,r2
    cb0c:	1484d83a 	srl	r2,r2,r18
    cb10:	0007883a 	mov	r3,zero
    cb14:	00004f06 	br	cc54 <__umoddi3+0x268>
    cb18:	29c04c36 	bltu	r5,r7,cc4c <__umoddi3+0x260>
    cb1c:	00bfffd4 	movui	r2,65535
    cb20:	11c0582e 	bgeu	r2,r7,cc84 <__umoddi3+0x298>
    cb24:	00804034 	movhi	r2,256
    cb28:	10bfffc4 	addi	r2,r2,-1
    cb2c:	11c0e736 	bltu	r2,r7,cecc <__umoddi3+0x4e0>
    cb30:	01000404 	movi	r4,16
    cb34:	3904d83a 	srl	r2,r7,r4
    cb38:	00c00074 	movhi	r3,1
    cb3c:	18c6b1c4 	addi	r3,r3,6855
    cb40:	1885883a 	add	r2,r3,r2
    cb44:	14c00003 	ldbu	r19,0(r2)
    cb48:	00c00804 	movi	r3,32
    cb4c:	9927883a 	add	r19,r19,r4
    cb50:	1ce9c83a 	sub	r20,r3,r19
    cb54:	a000581e 	bne	r20,zero,ccb8 <__umoddi3+0x2cc>
    cb58:	3c400136 	bltu	r7,r17,cb60 <__umoddi3+0x174>
    cb5c:	8180eb36 	bltu	r16,r6,cf0c <__umoddi3+0x520>
    cb60:	8185c83a 	sub	r2,r16,r6
    cb64:	89e3c83a 	sub	r17,r17,r7
    cb68:	8089803a 	cmpltu	r4,r16,r2
    cb6c:	8939c83a 	sub	fp,r17,r4
    cb70:	e007883a 	mov	r3,fp
    cb74:	00003706 	br	cc54 <__umoddi3+0x268>
    cb78:	3000041e 	bne	r6,zero,cb8c <__umoddi3+0x1a0>
    cb7c:	000b883a 	mov	r5,zero
    cb80:	01000044 	movi	r4,1
    cb84:	00023480 	call	2348 <__udivsi3>
    cb88:	1027883a 	mov	r19,r2
    cb8c:	00bfffd4 	movui	r2,65535
    cb90:	14c0402e 	bgeu	r2,r19,cc94 <__umoddi3+0x2a8>
    cb94:	00804034 	movhi	r2,256
    cb98:	10bfffc4 	addi	r2,r2,-1
    cb9c:	14c0cd36 	bltu	r2,r19,ced4 <__umoddi3+0x4e8>
    cba0:	00800404 	movi	r2,16
    cba4:	9886d83a 	srl	r3,r19,r2
    cba8:	01000074 	movhi	r4,1
    cbac:	2106b1c4 	addi	r4,r4,6855
    cbb0:	20c7883a 	add	r3,r4,r3
    cbb4:	18c00003 	ldbu	r3,0(r3)
    cbb8:	1887883a 	add	r3,r3,r2
    cbbc:	00800804 	movi	r2,32
    cbc0:	10e5c83a 	sub	r18,r2,r3
    cbc4:	9000901e 	bne	r18,zero,ce08 <__umoddi3+0x41c>
    cbc8:	982cd43a 	srli	r22,r19,16
    cbcc:	8ce3c83a 	sub	r17,r17,r19
    cbd0:	9d7fffcc 	andi	r21,r19,65535
    cbd4:	b00b883a 	mov	r5,r22
    cbd8:	8809883a 	mov	r4,r17
    cbdc:	00023ac0 	call	23ac <__umodsi3>
    cbe0:	8809883a 	mov	r4,r17
    cbe4:	b00b883a 	mov	r5,r22
    cbe8:	1021883a 	mov	r16,r2
    cbec:	00023480 	call	2348 <__udivsi3>
    cbf0:	8006943a 	slli	r3,r16,16
    cbf4:	a008d43a 	srli	r4,r20,16
    cbf8:	1545383a 	mul	r2,r2,r21
    cbfc:	20c8b03a 	or	r4,r4,r3
    cc00:	2080042e 	bgeu	r4,r2,cc14 <__umoddi3+0x228>
    cc04:	24c9883a 	add	r4,r4,r19
    cc08:	24c00236 	bltu	r4,r19,cc14 <__umoddi3+0x228>
    cc0c:	2080012e 	bgeu	r4,r2,cc14 <__umoddi3+0x228>
    cc10:	24c9883a 	add	r4,r4,r19
    cc14:	20a1c83a 	sub	r16,r4,r2
    cc18:	b00b883a 	mov	r5,r22
    cc1c:	8009883a 	mov	r4,r16
    cc20:	00023ac0 	call	23ac <__umodsi3>
    cc24:	1023883a 	mov	r17,r2
    cc28:	b00b883a 	mov	r5,r22
    cc2c:	8009883a 	mov	r4,r16
    cc30:	00023480 	call	2348 <__udivsi3>
    cc34:	8822943a 	slli	r17,r17,16
    cc38:	1545383a 	mul	r2,r2,r21
    cc3c:	a53fffcc 	andi	r20,r20,65535
    cc40:	a446b03a 	or	r3,r20,r17
    cc44:	18bfb02e 	bgeu	r3,r2,cb08 <__alt_data_end+0xff00cb08>
    cc48:	003fab06 	br	caf8 <__alt_data_end+0xff00caf8>
    cc4c:	2005883a 	mov	r2,r4
    cc50:	2807883a 	mov	r3,r5
    cc54:	dfc00b17 	ldw	ra,44(sp)
    cc58:	df000a17 	ldw	fp,40(sp)
    cc5c:	ddc00917 	ldw	r23,36(sp)
    cc60:	dd800817 	ldw	r22,32(sp)
    cc64:	dd400717 	ldw	r21,28(sp)
    cc68:	dd000617 	ldw	r20,24(sp)
    cc6c:	dcc00517 	ldw	r19,20(sp)
    cc70:	dc800417 	ldw	r18,16(sp)
    cc74:	dc400317 	ldw	r17,12(sp)
    cc78:	dc000217 	ldw	r16,8(sp)
    cc7c:	dec00c04 	addi	sp,sp,48
    cc80:	f800283a 	ret
    cc84:	04c03fc4 	movi	r19,255
    cc88:	99c9803a 	cmpltu	r4,r19,r7
    cc8c:	200890fa 	slli	r4,r4,3
    cc90:	003fa806 	br	cb34 <__alt_data_end+0xff00cb34>
    cc94:	00803fc4 	movi	r2,255
    cc98:	14c5803a 	cmpltu	r2,r2,r19
    cc9c:	100490fa 	slli	r2,r2,3
    cca0:	003fc006 	br	cba4 <__alt_data_end+0xff00cba4>
    cca4:	00804034 	movhi	r2,256
    cca8:	10bfffc4 	addi	r2,r2,-1
    ccac:	11808b36 	bltu	r2,r6,cedc <__umoddi3+0x4f0>
    ccb0:	01000404 	movi	r4,16
    ccb4:	003f6406 	br	ca48 <__alt_data_end+0xff00ca48>
    ccb8:	34c4d83a 	srl	r2,r6,r19
    ccbc:	3d0e983a 	sll	r7,r7,r20
    ccc0:	8cf8d83a 	srl	fp,r17,r19
    ccc4:	8d10983a 	sll	r8,r17,r20
    ccc8:	38aab03a 	or	r21,r7,r2
    cccc:	a82cd43a 	srli	r22,r21,16
    ccd0:	84e2d83a 	srl	r17,r16,r19
    ccd4:	e009883a 	mov	r4,fp
    ccd8:	b00b883a 	mov	r5,r22
    ccdc:	8a22b03a 	or	r17,r17,r8
    cce0:	3524983a 	sll	r18,r6,r20
    cce4:	00023ac0 	call	23ac <__umodsi3>
    cce8:	e009883a 	mov	r4,fp
    ccec:	b00b883a 	mov	r5,r22
    ccf0:	102f883a 	mov	r23,r2
    ccf4:	00023480 	call	2348 <__udivsi3>
    ccf8:	100d883a 	mov	r6,r2
    ccfc:	b808943a 	slli	r4,r23,16
    cd00:	aa3fffcc 	andi	r8,r21,65535
    cd04:	8804d43a 	srli	r2,r17,16
    cd08:	41af383a 	mul	r23,r8,r6
    cd0c:	8520983a 	sll	r16,r16,r20
    cd10:	1104b03a 	or	r2,r2,r4
    cd14:	15c0042e 	bgeu	r2,r23,cd28 <__umoddi3+0x33c>
    cd18:	1545883a 	add	r2,r2,r21
    cd1c:	30ffffc4 	addi	r3,r6,-1
    cd20:	1540742e 	bgeu	r2,r21,cef4 <__umoddi3+0x508>
    cd24:	180d883a 	mov	r6,r3
    cd28:	15efc83a 	sub	r23,r2,r23
    cd2c:	b00b883a 	mov	r5,r22
    cd30:	b809883a 	mov	r4,r23
    cd34:	d9800115 	stw	r6,4(sp)
    cd38:	da000015 	stw	r8,0(sp)
    cd3c:	00023ac0 	call	23ac <__umodsi3>
    cd40:	b00b883a 	mov	r5,r22
    cd44:	b809883a 	mov	r4,r23
    cd48:	1039883a 	mov	fp,r2
    cd4c:	00023480 	call	2348 <__udivsi3>
    cd50:	da000017 	ldw	r8,0(sp)
    cd54:	e038943a 	slli	fp,fp,16
    cd58:	100b883a 	mov	r5,r2
    cd5c:	4089383a 	mul	r4,r8,r2
    cd60:	8a3fffcc 	andi	r8,r17,65535
    cd64:	4710b03a 	or	r8,r8,fp
    cd68:	d9800117 	ldw	r6,4(sp)
    cd6c:	4100042e 	bgeu	r8,r4,cd80 <__umoddi3+0x394>
    cd70:	4551883a 	add	r8,r8,r21
    cd74:	10bfffc4 	addi	r2,r2,-1
    cd78:	45405a2e 	bgeu	r8,r21,cee4 <__umoddi3+0x4f8>
    cd7c:	100b883a 	mov	r5,r2
    cd80:	300c943a 	slli	r6,r6,16
    cd84:	91ffffcc 	andi	r7,r18,65535
    cd88:	9004d43a 	srli	r2,r18,16
    cd8c:	314cb03a 	or	r6,r6,r5
    cd90:	317fffcc 	andi	r5,r6,65535
    cd94:	300cd43a 	srli	r6,r6,16
    cd98:	29d3383a 	mul	r9,r5,r7
    cd9c:	288b383a 	mul	r5,r5,r2
    cda0:	31cf383a 	mul	r7,r6,r7
    cda4:	4806d43a 	srli	r3,r9,16
    cda8:	4111c83a 	sub	r8,r8,r4
    cdac:	29cb883a 	add	r5,r5,r7
    cdb0:	194b883a 	add	r5,r3,r5
    cdb4:	3085383a 	mul	r2,r6,r2
    cdb8:	29c0022e 	bgeu	r5,r7,cdc4 <__umoddi3+0x3d8>
    cdbc:	00c00074 	movhi	r3,1
    cdc0:	10c5883a 	add	r2,r2,r3
    cdc4:	2808d43a 	srli	r4,r5,16
    cdc8:	280a943a 	slli	r5,r5,16
    cdcc:	4a7fffcc 	andi	r9,r9,65535
    cdd0:	2085883a 	add	r2,r4,r2
    cdd4:	2a4b883a 	add	r5,r5,r9
    cdd8:	40803636 	bltu	r8,r2,ceb4 <__umoddi3+0x4c8>
    cddc:	40804d26 	beq	r8,r2,cf14 <__umoddi3+0x528>
    cde0:	4089c83a 	sub	r4,r8,r2
    cde4:	280f883a 	mov	r7,r5
    cde8:	81cfc83a 	sub	r7,r16,r7
    cdec:	81c7803a 	cmpltu	r3,r16,r7
    cdf0:	20c7c83a 	sub	r3,r4,r3
    cdf4:	1cc4983a 	sll	r2,r3,r19
    cdf8:	3d0ed83a 	srl	r7,r7,r20
    cdfc:	1d06d83a 	srl	r3,r3,r20
    ce00:	11c4b03a 	or	r2,r2,r7
    ce04:	003f9306 	br	cc54 <__alt_data_end+0xff00cc54>
    ce08:	9ca6983a 	sll	r19,r19,r18
    ce0c:	88e8d83a 	srl	r20,r17,r3
    ce10:	80c4d83a 	srl	r2,r16,r3
    ce14:	982cd43a 	srli	r22,r19,16
    ce18:	8ca2983a 	sll	r17,r17,r18
    ce1c:	a009883a 	mov	r4,r20
    ce20:	b00b883a 	mov	r5,r22
    ce24:	1478b03a 	or	fp,r2,r17
    ce28:	00023ac0 	call	23ac <__umodsi3>
    ce2c:	a009883a 	mov	r4,r20
    ce30:	b00b883a 	mov	r5,r22
    ce34:	1023883a 	mov	r17,r2
    ce38:	00023480 	call	2348 <__udivsi3>
    ce3c:	9d7fffcc 	andi	r21,r19,65535
    ce40:	880a943a 	slli	r5,r17,16
    ce44:	e008d43a 	srli	r4,fp,16
    ce48:	a885383a 	mul	r2,r21,r2
    ce4c:	84a8983a 	sll	r20,r16,r18
    ce50:	2148b03a 	or	r4,r4,r5
    ce54:	2080042e 	bgeu	r4,r2,ce68 <__umoddi3+0x47c>
    ce58:	24c9883a 	add	r4,r4,r19
    ce5c:	24c00236 	bltu	r4,r19,ce68 <__umoddi3+0x47c>
    ce60:	2080012e 	bgeu	r4,r2,ce68 <__umoddi3+0x47c>
    ce64:	24c9883a 	add	r4,r4,r19
    ce68:	20a3c83a 	sub	r17,r4,r2
    ce6c:	b00b883a 	mov	r5,r22
    ce70:	8809883a 	mov	r4,r17
    ce74:	00023ac0 	call	23ac <__umodsi3>
    ce78:	102f883a 	mov	r23,r2
    ce7c:	8809883a 	mov	r4,r17
    ce80:	b00b883a 	mov	r5,r22
    ce84:	00023480 	call	2348 <__udivsi3>
    ce88:	b82e943a 	slli	r23,r23,16
    ce8c:	a885383a 	mul	r2,r21,r2
    ce90:	e13fffcc 	andi	r4,fp,65535
    ce94:	25c8b03a 	or	r4,r4,r23
    ce98:	2080042e 	bgeu	r4,r2,ceac <__umoddi3+0x4c0>
    ce9c:	24c9883a 	add	r4,r4,r19
    cea0:	24c00236 	bltu	r4,r19,ceac <__umoddi3+0x4c0>
    cea4:	2080012e 	bgeu	r4,r2,ceac <__umoddi3+0x4c0>
    cea8:	24c9883a 	add	r4,r4,r19
    ceac:	20a3c83a 	sub	r17,r4,r2
    ceb0:	003f4806 	br	cbd4 <__alt_data_end+0xff00cbd4>
    ceb4:	2c8fc83a 	sub	r7,r5,r18
    ceb8:	1545c83a 	sub	r2,r2,r21
    cebc:	29cb803a 	cmpltu	r5,r5,r7
    cec0:	1145c83a 	sub	r2,r2,r5
    cec4:	4089c83a 	sub	r4,r8,r2
    cec8:	003fc706 	br	cde8 <__alt_data_end+0xff00cde8>
    cecc:	01000604 	movi	r4,24
    ced0:	003f1806 	br	cb34 <__alt_data_end+0xff00cb34>
    ced4:	00800604 	movi	r2,24
    ced8:	003f3206 	br	cba4 <__alt_data_end+0xff00cba4>
    cedc:	01000604 	movi	r4,24
    cee0:	003ed906 	br	ca48 <__alt_data_end+0xff00ca48>
    cee4:	413fa52e 	bgeu	r8,r4,cd7c <__alt_data_end+0xff00cd7c>
    cee8:	297fff84 	addi	r5,r5,-2
    ceec:	4551883a 	add	r8,r8,r21
    cef0:	003fa306 	br	cd80 <__alt_data_end+0xff00cd80>
    cef4:	15ff8b2e 	bgeu	r2,r23,cd24 <__alt_data_end+0xff00cd24>
    cef8:	31bfff84 	addi	r6,r6,-2
    cefc:	1545883a 	add	r2,r2,r21
    cf00:	003f8906 	br	cd28 <__alt_data_end+0xff00cd28>
    cf04:	24c9883a 	add	r4,r4,r19
    cf08:	003eee06 	br	cac4 <__alt_data_end+0xff00cac4>
    cf0c:	8005883a 	mov	r2,r16
    cf10:	003f1706 	br	cb70 <__alt_data_end+0xff00cb70>
    cf14:	817fe736 	bltu	r16,r5,ceb4 <__alt_data_end+0xff00ceb4>
    cf18:	280f883a 	mov	r7,r5
    cf1c:	0009883a 	mov	r4,zero
    cf20:	003fb106 	br	cde8 <__alt_data_end+0xff00cde8>

0000cf24 <__adddf3>:
    cf24:	02c00434 	movhi	r11,16
    cf28:	5affffc4 	addi	r11,r11,-1
    cf2c:	2806d7fa 	srli	r3,r5,31
    cf30:	2ad4703a 	and	r10,r5,r11
    cf34:	3ad2703a 	and	r9,r7,r11
    cf38:	3804d53a 	srli	r2,r7,20
    cf3c:	3018d77a 	srli	r12,r6,29
    cf40:	280ad53a 	srli	r5,r5,20
    cf44:	501490fa 	slli	r10,r10,3
    cf48:	2010d77a 	srli	r8,r4,29
    cf4c:	481290fa 	slli	r9,r9,3
    cf50:	380ed7fa 	srli	r7,r7,31
    cf54:	defffb04 	addi	sp,sp,-20
    cf58:	dc800215 	stw	r18,8(sp)
    cf5c:	dc400115 	stw	r17,4(sp)
    cf60:	dc000015 	stw	r16,0(sp)
    cf64:	dfc00415 	stw	ra,16(sp)
    cf68:	dcc00315 	stw	r19,12(sp)
    cf6c:	1c803fcc 	andi	r18,r3,255
    cf70:	2c01ffcc 	andi	r16,r5,2047
    cf74:	5210b03a 	or	r8,r10,r8
    cf78:	202290fa 	slli	r17,r4,3
    cf7c:	1081ffcc 	andi	r2,r2,2047
    cf80:	4b12b03a 	or	r9,r9,r12
    cf84:	300c90fa 	slli	r6,r6,3
    cf88:	91c07526 	beq	r18,r7,d160 <__adddf3+0x23c>
    cf8c:	8087c83a 	sub	r3,r16,r2
    cf90:	00c0ab0e 	bge	zero,r3,d240 <__adddf3+0x31c>
    cf94:	10002a1e 	bne	r2,zero,d040 <__adddf3+0x11c>
    cf98:	4984b03a 	or	r2,r9,r6
    cf9c:	1000961e 	bne	r2,zero,d1f8 <__adddf3+0x2d4>
    cfa0:	888001cc 	andi	r2,r17,7
    cfa4:	10000726 	beq	r2,zero,cfc4 <__adddf3+0xa0>
    cfa8:	888003cc 	andi	r2,r17,15
    cfac:	00c00104 	movi	r3,4
    cfb0:	10c00426 	beq	r2,r3,cfc4 <__adddf3+0xa0>
    cfb4:	88c7883a 	add	r3,r17,r3
    cfb8:	1c63803a 	cmpltu	r17,r3,r17
    cfbc:	4451883a 	add	r8,r8,r17
    cfc0:	1823883a 	mov	r17,r3
    cfc4:	4080202c 	andhi	r2,r8,128
    cfc8:	10005926 	beq	r2,zero,d130 <__adddf3+0x20c>
    cfcc:	84000044 	addi	r16,r16,1
    cfd0:	0081ffc4 	movi	r2,2047
    cfd4:	8080ba26 	beq	r16,r2,d2c0 <__adddf3+0x39c>
    cfd8:	00bfe034 	movhi	r2,65408
    cfdc:	10bfffc4 	addi	r2,r2,-1
    cfe0:	4090703a 	and	r8,r8,r2
    cfe4:	4004977a 	slli	r2,r8,29
    cfe8:	4010927a 	slli	r8,r8,9
    cfec:	8822d0fa 	srli	r17,r17,3
    cff0:	8401ffcc 	andi	r16,r16,2047
    cff4:	4010d33a 	srli	r8,r8,12
    cff8:	9007883a 	mov	r3,r18
    cffc:	1444b03a 	or	r2,r2,r17
    d000:	8401ffcc 	andi	r16,r16,2047
    d004:	8020953a 	slli	r16,r16,20
    d008:	18c03fcc 	andi	r3,r3,255
    d00c:	01000434 	movhi	r4,16
    d010:	213fffc4 	addi	r4,r4,-1
    d014:	180697fa 	slli	r3,r3,31
    d018:	4110703a 	and	r8,r8,r4
    d01c:	4410b03a 	or	r8,r8,r16
    d020:	40c6b03a 	or	r3,r8,r3
    d024:	dfc00417 	ldw	ra,16(sp)
    d028:	dcc00317 	ldw	r19,12(sp)
    d02c:	dc800217 	ldw	r18,8(sp)
    d030:	dc400117 	ldw	r17,4(sp)
    d034:	dc000017 	ldw	r16,0(sp)
    d038:	dec00504 	addi	sp,sp,20
    d03c:	f800283a 	ret
    d040:	0081ffc4 	movi	r2,2047
    d044:	80bfd626 	beq	r16,r2,cfa0 <__alt_data_end+0xff00cfa0>
    d048:	4a402034 	orhi	r9,r9,128
    d04c:	00800e04 	movi	r2,56
    d050:	10c09f16 	blt	r2,r3,d2d0 <__adddf3+0x3ac>
    d054:	008007c4 	movi	r2,31
    d058:	10c0c216 	blt	r2,r3,d364 <__adddf3+0x440>
    d05c:	00800804 	movi	r2,32
    d060:	10c5c83a 	sub	r2,r2,r3
    d064:	488a983a 	sll	r5,r9,r2
    d068:	30c8d83a 	srl	r4,r6,r3
    d06c:	3084983a 	sll	r2,r6,r2
    d070:	48c6d83a 	srl	r3,r9,r3
    d074:	290cb03a 	or	r6,r5,r4
    d078:	1004c03a 	cmpne	r2,r2,zero
    d07c:	308cb03a 	or	r6,r6,r2
    d080:	898dc83a 	sub	r6,r17,r6
    d084:	89a3803a 	cmpltu	r17,r17,r6
    d088:	40d1c83a 	sub	r8,r8,r3
    d08c:	4451c83a 	sub	r8,r8,r17
    d090:	3023883a 	mov	r17,r6
    d094:	4080202c 	andhi	r2,r8,128
    d098:	10002326 	beq	r2,zero,d128 <__adddf3+0x204>
    d09c:	04c02034 	movhi	r19,128
    d0a0:	9cffffc4 	addi	r19,r19,-1
    d0a4:	44e6703a 	and	r19,r8,r19
    d0a8:	98007626 	beq	r19,zero,d284 <__adddf3+0x360>
    d0ac:	9809883a 	mov	r4,r19
    d0b0:	0002d940 	call	2d94 <__clzsi2>
    d0b4:	10fffe04 	addi	r3,r2,-8
    d0b8:	010007c4 	movi	r4,31
    d0bc:	20c07716 	blt	r4,r3,d29c <__adddf3+0x378>
    d0c0:	00800804 	movi	r2,32
    d0c4:	10c5c83a 	sub	r2,r2,r3
    d0c8:	8884d83a 	srl	r2,r17,r2
    d0cc:	98d0983a 	sll	r8,r19,r3
    d0d0:	88e2983a 	sll	r17,r17,r3
    d0d4:	1204b03a 	or	r2,r2,r8
    d0d8:	1c007416 	blt	r3,r16,d2ac <__adddf3+0x388>
    d0dc:	1c21c83a 	sub	r16,r3,r16
    d0e0:	82000044 	addi	r8,r16,1
    d0e4:	00c007c4 	movi	r3,31
    d0e8:	1a009116 	blt	r3,r8,d330 <__adddf3+0x40c>
    d0ec:	00c00804 	movi	r3,32
    d0f0:	1a07c83a 	sub	r3,r3,r8
    d0f4:	8a08d83a 	srl	r4,r17,r8
    d0f8:	88e2983a 	sll	r17,r17,r3
    d0fc:	10c6983a 	sll	r3,r2,r3
    d100:	1210d83a 	srl	r8,r2,r8
    d104:	8804c03a 	cmpne	r2,r17,zero
    d108:	1906b03a 	or	r3,r3,r4
    d10c:	18a2b03a 	or	r17,r3,r2
    d110:	0021883a 	mov	r16,zero
    d114:	003fa206 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d118:	1890b03a 	or	r8,r3,r2
    d11c:	40017d26 	beq	r8,zero,d714 <__adddf3+0x7f0>
    d120:	1011883a 	mov	r8,r2
    d124:	1823883a 	mov	r17,r3
    d128:	888001cc 	andi	r2,r17,7
    d12c:	103f9e1e 	bne	r2,zero,cfa8 <__alt_data_end+0xff00cfa8>
    d130:	4004977a 	slli	r2,r8,29
    d134:	8822d0fa 	srli	r17,r17,3
    d138:	4010d0fa 	srli	r8,r8,3
    d13c:	9007883a 	mov	r3,r18
    d140:	1444b03a 	or	r2,r2,r17
    d144:	0101ffc4 	movi	r4,2047
    d148:	81002426 	beq	r16,r4,d1dc <__adddf3+0x2b8>
    d14c:	8120703a 	and	r16,r16,r4
    d150:	01000434 	movhi	r4,16
    d154:	213fffc4 	addi	r4,r4,-1
    d158:	4110703a 	and	r8,r8,r4
    d15c:	003fa806 	br	d000 <__alt_data_end+0xff00d000>
    d160:	8089c83a 	sub	r4,r16,r2
    d164:	01005e0e 	bge	zero,r4,d2e0 <__adddf3+0x3bc>
    d168:	10002b26 	beq	r2,zero,d218 <__adddf3+0x2f4>
    d16c:	0081ffc4 	movi	r2,2047
    d170:	80bf8b26 	beq	r16,r2,cfa0 <__alt_data_end+0xff00cfa0>
    d174:	4a402034 	orhi	r9,r9,128
    d178:	00800e04 	movi	r2,56
    d17c:	1100a40e 	bge	r2,r4,d410 <__adddf3+0x4ec>
    d180:	498cb03a 	or	r6,r9,r6
    d184:	300ac03a 	cmpne	r5,r6,zero
    d188:	0013883a 	mov	r9,zero
    d18c:	2c4b883a 	add	r5,r5,r17
    d190:	2c63803a 	cmpltu	r17,r5,r17
    d194:	4a11883a 	add	r8,r9,r8
    d198:	8a11883a 	add	r8,r17,r8
    d19c:	2823883a 	mov	r17,r5
    d1a0:	4080202c 	andhi	r2,r8,128
    d1a4:	103fe026 	beq	r2,zero,d128 <__alt_data_end+0xff00d128>
    d1a8:	84000044 	addi	r16,r16,1
    d1ac:	0081ffc4 	movi	r2,2047
    d1b0:	8080d226 	beq	r16,r2,d4fc <__adddf3+0x5d8>
    d1b4:	00bfe034 	movhi	r2,65408
    d1b8:	10bfffc4 	addi	r2,r2,-1
    d1bc:	4090703a 	and	r8,r8,r2
    d1c0:	880ad07a 	srli	r5,r17,1
    d1c4:	400897fa 	slli	r4,r8,31
    d1c8:	88c0004c 	andi	r3,r17,1
    d1cc:	28e2b03a 	or	r17,r5,r3
    d1d0:	4010d07a 	srli	r8,r8,1
    d1d4:	2462b03a 	or	r17,r4,r17
    d1d8:	003f7106 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d1dc:	4088b03a 	or	r4,r8,r2
    d1e0:	20014526 	beq	r4,zero,d6f8 <__adddf3+0x7d4>
    d1e4:	01000434 	movhi	r4,16
    d1e8:	42000234 	orhi	r8,r8,8
    d1ec:	213fffc4 	addi	r4,r4,-1
    d1f0:	4110703a 	and	r8,r8,r4
    d1f4:	003f8206 	br	d000 <__alt_data_end+0xff00d000>
    d1f8:	18ffffc4 	addi	r3,r3,-1
    d1fc:	1800491e 	bne	r3,zero,d324 <__adddf3+0x400>
    d200:	898bc83a 	sub	r5,r17,r6
    d204:	8963803a 	cmpltu	r17,r17,r5
    d208:	4251c83a 	sub	r8,r8,r9
    d20c:	4451c83a 	sub	r8,r8,r17
    d210:	2823883a 	mov	r17,r5
    d214:	003f9f06 	br	d094 <__alt_data_end+0xff00d094>
    d218:	4984b03a 	or	r2,r9,r6
    d21c:	103f6026 	beq	r2,zero,cfa0 <__alt_data_end+0xff00cfa0>
    d220:	213fffc4 	addi	r4,r4,-1
    d224:	2000931e 	bne	r4,zero,d474 <__adddf3+0x550>
    d228:	898d883a 	add	r6,r17,r6
    d22c:	3463803a 	cmpltu	r17,r6,r17
    d230:	4251883a 	add	r8,r8,r9
    d234:	8a11883a 	add	r8,r17,r8
    d238:	3023883a 	mov	r17,r6
    d23c:	003fd806 	br	d1a0 <__alt_data_end+0xff00d1a0>
    d240:	1800541e 	bne	r3,zero,d394 <__adddf3+0x470>
    d244:	80800044 	addi	r2,r16,1
    d248:	1081ffcc 	andi	r2,r2,2047
    d24c:	00c00044 	movi	r3,1
    d250:	1880a00e 	bge	r3,r2,d4d4 <__adddf3+0x5b0>
    d254:	8989c83a 	sub	r4,r17,r6
    d258:	8905803a 	cmpltu	r2,r17,r4
    d25c:	4267c83a 	sub	r19,r8,r9
    d260:	98a7c83a 	sub	r19,r19,r2
    d264:	9880202c 	andhi	r2,r19,128
    d268:	10006326 	beq	r2,zero,d3f8 <__adddf3+0x4d4>
    d26c:	3463c83a 	sub	r17,r6,r17
    d270:	4a07c83a 	sub	r3,r9,r8
    d274:	344d803a 	cmpltu	r6,r6,r17
    d278:	19a7c83a 	sub	r19,r3,r6
    d27c:	3825883a 	mov	r18,r7
    d280:	983f8a1e 	bne	r19,zero,d0ac <__alt_data_end+0xff00d0ac>
    d284:	8809883a 	mov	r4,r17
    d288:	0002d940 	call	2d94 <__clzsi2>
    d28c:	10800804 	addi	r2,r2,32
    d290:	10fffe04 	addi	r3,r2,-8
    d294:	010007c4 	movi	r4,31
    d298:	20ff890e 	bge	r4,r3,d0c0 <__alt_data_end+0xff00d0c0>
    d29c:	10bff604 	addi	r2,r2,-40
    d2a0:	8884983a 	sll	r2,r17,r2
    d2a4:	0023883a 	mov	r17,zero
    d2a8:	1c3f8c0e 	bge	r3,r16,d0dc <__alt_data_end+0xff00d0dc>
    d2ac:	023fe034 	movhi	r8,65408
    d2b0:	423fffc4 	addi	r8,r8,-1
    d2b4:	80e1c83a 	sub	r16,r16,r3
    d2b8:	1210703a 	and	r8,r2,r8
    d2bc:	003f3806 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d2c0:	9007883a 	mov	r3,r18
    d2c4:	0011883a 	mov	r8,zero
    d2c8:	0005883a 	mov	r2,zero
    d2cc:	003f4c06 	br	d000 <__alt_data_end+0xff00d000>
    d2d0:	498cb03a 	or	r6,r9,r6
    d2d4:	300cc03a 	cmpne	r6,r6,zero
    d2d8:	0007883a 	mov	r3,zero
    d2dc:	003f6806 	br	d080 <__alt_data_end+0xff00d080>
    d2e0:	20009c1e 	bne	r4,zero,d554 <__adddf3+0x630>
    d2e4:	80800044 	addi	r2,r16,1
    d2e8:	1141ffcc 	andi	r5,r2,2047
    d2ec:	01000044 	movi	r4,1
    d2f0:	2140670e 	bge	r4,r5,d490 <__adddf3+0x56c>
    d2f4:	0101ffc4 	movi	r4,2047
    d2f8:	11007f26 	beq	r2,r4,d4f8 <__adddf3+0x5d4>
    d2fc:	898d883a 	add	r6,r17,r6
    d300:	4247883a 	add	r3,r8,r9
    d304:	3451803a 	cmpltu	r8,r6,r17
    d308:	40d1883a 	add	r8,r8,r3
    d30c:	402297fa 	slli	r17,r8,31
    d310:	300cd07a 	srli	r6,r6,1
    d314:	4010d07a 	srli	r8,r8,1
    d318:	1021883a 	mov	r16,r2
    d31c:	89a2b03a 	or	r17,r17,r6
    d320:	003f1f06 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d324:	0081ffc4 	movi	r2,2047
    d328:	80bf481e 	bne	r16,r2,d04c <__alt_data_end+0xff00d04c>
    d32c:	003f1c06 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d330:	843ff844 	addi	r16,r16,-31
    d334:	01000804 	movi	r4,32
    d338:	1406d83a 	srl	r3,r2,r16
    d33c:	41005026 	beq	r8,r4,d480 <__adddf3+0x55c>
    d340:	01001004 	movi	r4,64
    d344:	2211c83a 	sub	r8,r4,r8
    d348:	1204983a 	sll	r2,r2,r8
    d34c:	88a2b03a 	or	r17,r17,r2
    d350:	8822c03a 	cmpne	r17,r17,zero
    d354:	1c62b03a 	or	r17,r3,r17
    d358:	0011883a 	mov	r8,zero
    d35c:	0021883a 	mov	r16,zero
    d360:	003f7106 	br	d128 <__alt_data_end+0xff00d128>
    d364:	193ff804 	addi	r4,r3,-32
    d368:	00800804 	movi	r2,32
    d36c:	4908d83a 	srl	r4,r9,r4
    d370:	18804526 	beq	r3,r2,d488 <__adddf3+0x564>
    d374:	00801004 	movi	r2,64
    d378:	10c5c83a 	sub	r2,r2,r3
    d37c:	4886983a 	sll	r3,r9,r2
    d380:	198cb03a 	or	r6,r3,r6
    d384:	300cc03a 	cmpne	r6,r6,zero
    d388:	218cb03a 	or	r6,r4,r6
    d38c:	0007883a 	mov	r3,zero
    d390:	003f3b06 	br	d080 <__alt_data_end+0xff00d080>
    d394:	80002a26 	beq	r16,zero,d440 <__adddf3+0x51c>
    d398:	0101ffc4 	movi	r4,2047
    d39c:	11006826 	beq	r2,r4,d540 <__adddf3+0x61c>
    d3a0:	00c7c83a 	sub	r3,zero,r3
    d3a4:	42002034 	orhi	r8,r8,128
    d3a8:	01000e04 	movi	r4,56
    d3ac:	20c07c16 	blt	r4,r3,d5a0 <__adddf3+0x67c>
    d3b0:	010007c4 	movi	r4,31
    d3b4:	20c0da16 	blt	r4,r3,d720 <__adddf3+0x7fc>
    d3b8:	01000804 	movi	r4,32
    d3bc:	20c9c83a 	sub	r4,r4,r3
    d3c0:	4114983a 	sll	r10,r8,r4
    d3c4:	88cad83a 	srl	r5,r17,r3
    d3c8:	8908983a 	sll	r4,r17,r4
    d3cc:	40c6d83a 	srl	r3,r8,r3
    d3d0:	5162b03a 	or	r17,r10,r5
    d3d4:	2008c03a 	cmpne	r4,r4,zero
    d3d8:	8922b03a 	or	r17,r17,r4
    d3dc:	3463c83a 	sub	r17,r6,r17
    d3e0:	48c7c83a 	sub	r3,r9,r3
    d3e4:	344d803a 	cmpltu	r6,r6,r17
    d3e8:	1991c83a 	sub	r8,r3,r6
    d3ec:	1021883a 	mov	r16,r2
    d3f0:	3825883a 	mov	r18,r7
    d3f4:	003f2706 	br	d094 <__alt_data_end+0xff00d094>
    d3f8:	24d0b03a 	or	r8,r4,r19
    d3fc:	40001b1e 	bne	r8,zero,d46c <__adddf3+0x548>
    d400:	0005883a 	mov	r2,zero
    d404:	0007883a 	mov	r3,zero
    d408:	0021883a 	mov	r16,zero
    d40c:	003f4d06 	br	d144 <__alt_data_end+0xff00d144>
    d410:	008007c4 	movi	r2,31
    d414:	11003c16 	blt	r2,r4,d508 <__adddf3+0x5e4>
    d418:	00800804 	movi	r2,32
    d41c:	1105c83a 	sub	r2,r2,r4
    d420:	488e983a 	sll	r7,r9,r2
    d424:	310ad83a 	srl	r5,r6,r4
    d428:	3084983a 	sll	r2,r6,r2
    d42c:	4912d83a 	srl	r9,r9,r4
    d430:	394ab03a 	or	r5,r7,r5
    d434:	1004c03a 	cmpne	r2,r2,zero
    d438:	288ab03a 	or	r5,r5,r2
    d43c:	003f5306 	br	d18c <__alt_data_end+0xff00d18c>
    d440:	4448b03a 	or	r4,r8,r17
    d444:	20003e26 	beq	r4,zero,d540 <__adddf3+0x61c>
    d448:	00c6303a 	nor	r3,zero,r3
    d44c:	18003a1e 	bne	r3,zero,d538 <__adddf3+0x614>
    d450:	3463c83a 	sub	r17,r6,r17
    d454:	4a07c83a 	sub	r3,r9,r8
    d458:	344d803a 	cmpltu	r6,r6,r17
    d45c:	1991c83a 	sub	r8,r3,r6
    d460:	1021883a 	mov	r16,r2
    d464:	3825883a 	mov	r18,r7
    d468:	003f0a06 	br	d094 <__alt_data_end+0xff00d094>
    d46c:	2023883a 	mov	r17,r4
    d470:	003f0d06 	br	d0a8 <__alt_data_end+0xff00d0a8>
    d474:	0081ffc4 	movi	r2,2047
    d478:	80bf3f1e 	bne	r16,r2,d178 <__alt_data_end+0xff00d178>
    d47c:	003ec806 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d480:	0005883a 	mov	r2,zero
    d484:	003fb106 	br	d34c <__alt_data_end+0xff00d34c>
    d488:	0007883a 	mov	r3,zero
    d48c:	003fbc06 	br	d380 <__alt_data_end+0xff00d380>
    d490:	4444b03a 	or	r2,r8,r17
    d494:	8000871e 	bne	r16,zero,d6b4 <__adddf3+0x790>
    d498:	1000ba26 	beq	r2,zero,d784 <__adddf3+0x860>
    d49c:	4984b03a 	or	r2,r9,r6
    d4a0:	103ebf26 	beq	r2,zero,cfa0 <__alt_data_end+0xff00cfa0>
    d4a4:	8985883a 	add	r2,r17,r6
    d4a8:	4247883a 	add	r3,r8,r9
    d4ac:	1451803a 	cmpltu	r8,r2,r17
    d4b0:	40d1883a 	add	r8,r8,r3
    d4b4:	40c0202c 	andhi	r3,r8,128
    d4b8:	1023883a 	mov	r17,r2
    d4bc:	183f1a26 	beq	r3,zero,d128 <__alt_data_end+0xff00d128>
    d4c0:	00bfe034 	movhi	r2,65408
    d4c4:	10bfffc4 	addi	r2,r2,-1
    d4c8:	2021883a 	mov	r16,r4
    d4cc:	4090703a 	and	r8,r8,r2
    d4d0:	003eb306 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d4d4:	4444b03a 	or	r2,r8,r17
    d4d8:	8000291e 	bne	r16,zero,d580 <__adddf3+0x65c>
    d4dc:	10004b1e 	bne	r2,zero,d60c <__adddf3+0x6e8>
    d4e0:	4990b03a 	or	r8,r9,r6
    d4e4:	40008b26 	beq	r8,zero,d714 <__adddf3+0x7f0>
    d4e8:	4811883a 	mov	r8,r9
    d4ec:	3023883a 	mov	r17,r6
    d4f0:	3825883a 	mov	r18,r7
    d4f4:	003eaa06 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d4f8:	1021883a 	mov	r16,r2
    d4fc:	0011883a 	mov	r8,zero
    d500:	0005883a 	mov	r2,zero
    d504:	003f0f06 	br	d144 <__alt_data_end+0xff00d144>
    d508:	217ff804 	addi	r5,r4,-32
    d50c:	00800804 	movi	r2,32
    d510:	494ad83a 	srl	r5,r9,r5
    d514:	20807d26 	beq	r4,r2,d70c <__adddf3+0x7e8>
    d518:	00801004 	movi	r2,64
    d51c:	1109c83a 	sub	r4,r2,r4
    d520:	4912983a 	sll	r9,r9,r4
    d524:	498cb03a 	or	r6,r9,r6
    d528:	300cc03a 	cmpne	r6,r6,zero
    d52c:	298ab03a 	or	r5,r5,r6
    d530:	0013883a 	mov	r9,zero
    d534:	003f1506 	br	d18c <__alt_data_end+0xff00d18c>
    d538:	0101ffc4 	movi	r4,2047
    d53c:	113f9a1e 	bne	r2,r4,d3a8 <__alt_data_end+0xff00d3a8>
    d540:	4811883a 	mov	r8,r9
    d544:	3023883a 	mov	r17,r6
    d548:	1021883a 	mov	r16,r2
    d54c:	3825883a 	mov	r18,r7
    d550:	003e9306 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d554:	8000161e 	bne	r16,zero,d5b0 <__adddf3+0x68c>
    d558:	444ab03a 	or	r5,r8,r17
    d55c:	28005126 	beq	r5,zero,d6a4 <__adddf3+0x780>
    d560:	0108303a 	nor	r4,zero,r4
    d564:	20004d1e 	bne	r4,zero,d69c <__adddf3+0x778>
    d568:	89a3883a 	add	r17,r17,r6
    d56c:	4253883a 	add	r9,r8,r9
    d570:	898d803a 	cmpltu	r6,r17,r6
    d574:	3251883a 	add	r8,r6,r9
    d578:	1021883a 	mov	r16,r2
    d57c:	003f0806 	br	d1a0 <__alt_data_end+0xff00d1a0>
    d580:	1000301e 	bne	r2,zero,d644 <__adddf3+0x720>
    d584:	4984b03a 	or	r2,r9,r6
    d588:	10007126 	beq	r2,zero,d750 <__adddf3+0x82c>
    d58c:	4811883a 	mov	r8,r9
    d590:	3023883a 	mov	r17,r6
    d594:	3825883a 	mov	r18,r7
    d598:	0401ffc4 	movi	r16,2047
    d59c:	003e8006 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d5a0:	4462b03a 	or	r17,r8,r17
    d5a4:	8822c03a 	cmpne	r17,r17,zero
    d5a8:	0007883a 	mov	r3,zero
    d5ac:	003f8b06 	br	d3dc <__alt_data_end+0xff00d3dc>
    d5b0:	0141ffc4 	movi	r5,2047
    d5b4:	11403b26 	beq	r2,r5,d6a4 <__adddf3+0x780>
    d5b8:	0109c83a 	sub	r4,zero,r4
    d5bc:	42002034 	orhi	r8,r8,128
    d5c0:	01400e04 	movi	r5,56
    d5c4:	29006716 	blt	r5,r4,d764 <__adddf3+0x840>
    d5c8:	014007c4 	movi	r5,31
    d5cc:	29007016 	blt	r5,r4,d790 <__adddf3+0x86c>
    d5d0:	01400804 	movi	r5,32
    d5d4:	290bc83a 	sub	r5,r5,r4
    d5d8:	4154983a 	sll	r10,r8,r5
    d5dc:	890ed83a 	srl	r7,r17,r4
    d5e0:	894a983a 	sll	r5,r17,r5
    d5e4:	4108d83a 	srl	r4,r8,r4
    d5e8:	51e2b03a 	or	r17,r10,r7
    d5ec:	280ac03a 	cmpne	r5,r5,zero
    d5f0:	8962b03a 	or	r17,r17,r5
    d5f4:	89a3883a 	add	r17,r17,r6
    d5f8:	2253883a 	add	r9,r4,r9
    d5fc:	898d803a 	cmpltu	r6,r17,r6
    d600:	3251883a 	add	r8,r6,r9
    d604:	1021883a 	mov	r16,r2
    d608:	003ee506 	br	d1a0 <__alt_data_end+0xff00d1a0>
    d60c:	4984b03a 	or	r2,r9,r6
    d610:	103e6326 	beq	r2,zero,cfa0 <__alt_data_end+0xff00cfa0>
    d614:	8987c83a 	sub	r3,r17,r6
    d618:	88c9803a 	cmpltu	r4,r17,r3
    d61c:	4245c83a 	sub	r2,r8,r9
    d620:	1105c83a 	sub	r2,r2,r4
    d624:	1100202c 	andhi	r4,r2,128
    d628:	203ebb26 	beq	r4,zero,d118 <__alt_data_end+0xff00d118>
    d62c:	3463c83a 	sub	r17,r6,r17
    d630:	4a07c83a 	sub	r3,r9,r8
    d634:	344d803a 	cmpltu	r6,r6,r17
    d638:	1991c83a 	sub	r8,r3,r6
    d63c:	3825883a 	mov	r18,r7
    d640:	003e5706 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d644:	4984b03a 	or	r2,r9,r6
    d648:	10002e26 	beq	r2,zero,d704 <__adddf3+0x7e0>
    d64c:	4004d0fa 	srli	r2,r8,3
    d650:	8822d0fa 	srli	r17,r17,3
    d654:	4010977a 	slli	r8,r8,29
    d658:	10c0022c 	andhi	r3,r2,8
    d65c:	4462b03a 	or	r17,r8,r17
    d660:	18000826 	beq	r3,zero,d684 <__adddf3+0x760>
    d664:	4808d0fa 	srli	r4,r9,3
    d668:	20c0022c 	andhi	r3,r4,8
    d66c:	1800051e 	bne	r3,zero,d684 <__adddf3+0x760>
    d670:	300cd0fa 	srli	r6,r6,3
    d674:	4806977a 	slli	r3,r9,29
    d678:	2005883a 	mov	r2,r4
    d67c:	3825883a 	mov	r18,r7
    d680:	19a2b03a 	or	r17,r3,r6
    d684:	8810d77a 	srli	r8,r17,29
    d688:	100490fa 	slli	r2,r2,3
    d68c:	882290fa 	slli	r17,r17,3
    d690:	0401ffc4 	movi	r16,2047
    d694:	4090b03a 	or	r8,r8,r2
    d698:	003e4106 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d69c:	0141ffc4 	movi	r5,2047
    d6a0:	117fc71e 	bne	r2,r5,d5c0 <__alt_data_end+0xff00d5c0>
    d6a4:	4811883a 	mov	r8,r9
    d6a8:	3023883a 	mov	r17,r6
    d6ac:	1021883a 	mov	r16,r2
    d6b0:	003e3b06 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d6b4:	10002f26 	beq	r2,zero,d774 <__adddf3+0x850>
    d6b8:	4984b03a 	or	r2,r9,r6
    d6bc:	10001126 	beq	r2,zero,d704 <__adddf3+0x7e0>
    d6c0:	4004d0fa 	srli	r2,r8,3
    d6c4:	8822d0fa 	srli	r17,r17,3
    d6c8:	4010977a 	slli	r8,r8,29
    d6cc:	10c0022c 	andhi	r3,r2,8
    d6d0:	4462b03a 	or	r17,r8,r17
    d6d4:	183feb26 	beq	r3,zero,d684 <__alt_data_end+0xff00d684>
    d6d8:	4808d0fa 	srli	r4,r9,3
    d6dc:	20c0022c 	andhi	r3,r4,8
    d6e0:	183fe81e 	bne	r3,zero,d684 <__alt_data_end+0xff00d684>
    d6e4:	300cd0fa 	srli	r6,r6,3
    d6e8:	4806977a 	slli	r3,r9,29
    d6ec:	2005883a 	mov	r2,r4
    d6f0:	19a2b03a 	or	r17,r3,r6
    d6f4:	003fe306 	br	d684 <__alt_data_end+0xff00d684>
    d6f8:	0011883a 	mov	r8,zero
    d6fc:	0005883a 	mov	r2,zero
    d700:	003e3f06 	br	d000 <__alt_data_end+0xff00d000>
    d704:	0401ffc4 	movi	r16,2047
    d708:	003e2506 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d70c:	0013883a 	mov	r9,zero
    d710:	003f8406 	br	d524 <__alt_data_end+0xff00d524>
    d714:	0005883a 	mov	r2,zero
    d718:	0007883a 	mov	r3,zero
    d71c:	003e8906 	br	d144 <__alt_data_end+0xff00d144>
    d720:	197ff804 	addi	r5,r3,-32
    d724:	01000804 	movi	r4,32
    d728:	414ad83a 	srl	r5,r8,r5
    d72c:	19002426 	beq	r3,r4,d7c0 <__adddf3+0x89c>
    d730:	01001004 	movi	r4,64
    d734:	20c7c83a 	sub	r3,r4,r3
    d738:	40c6983a 	sll	r3,r8,r3
    d73c:	1c46b03a 	or	r3,r3,r17
    d740:	1806c03a 	cmpne	r3,r3,zero
    d744:	28e2b03a 	or	r17,r5,r3
    d748:	0007883a 	mov	r3,zero
    d74c:	003f2306 	br	d3dc <__alt_data_end+0xff00d3dc>
    d750:	0007883a 	mov	r3,zero
    d754:	5811883a 	mov	r8,r11
    d758:	00bfffc4 	movi	r2,-1
    d75c:	0401ffc4 	movi	r16,2047
    d760:	003e7806 	br	d144 <__alt_data_end+0xff00d144>
    d764:	4462b03a 	or	r17,r8,r17
    d768:	8822c03a 	cmpne	r17,r17,zero
    d76c:	0009883a 	mov	r4,zero
    d770:	003fa006 	br	d5f4 <__alt_data_end+0xff00d5f4>
    d774:	4811883a 	mov	r8,r9
    d778:	3023883a 	mov	r17,r6
    d77c:	0401ffc4 	movi	r16,2047
    d780:	003e0706 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d784:	4811883a 	mov	r8,r9
    d788:	3023883a 	mov	r17,r6
    d78c:	003e0406 	br	cfa0 <__alt_data_end+0xff00cfa0>
    d790:	21fff804 	addi	r7,r4,-32
    d794:	01400804 	movi	r5,32
    d798:	41ced83a 	srl	r7,r8,r7
    d79c:	21400a26 	beq	r4,r5,d7c8 <__adddf3+0x8a4>
    d7a0:	01401004 	movi	r5,64
    d7a4:	2909c83a 	sub	r4,r5,r4
    d7a8:	4108983a 	sll	r4,r8,r4
    d7ac:	2448b03a 	or	r4,r4,r17
    d7b0:	2008c03a 	cmpne	r4,r4,zero
    d7b4:	3922b03a 	or	r17,r7,r4
    d7b8:	0009883a 	mov	r4,zero
    d7bc:	003f8d06 	br	d5f4 <__alt_data_end+0xff00d5f4>
    d7c0:	0007883a 	mov	r3,zero
    d7c4:	003fdd06 	br	d73c <__alt_data_end+0xff00d73c>
    d7c8:	0009883a 	mov	r4,zero
    d7cc:	003ff706 	br	d7ac <__alt_data_end+0xff00d7ac>

0000d7d0 <__eqdf2>:
    d7d0:	2804d53a 	srli	r2,r5,20
    d7d4:	3806d53a 	srli	r3,r7,20
    d7d8:	02000434 	movhi	r8,16
    d7dc:	423fffc4 	addi	r8,r8,-1
    d7e0:	1081ffcc 	andi	r2,r2,2047
    d7e4:	0281ffc4 	movi	r10,2047
    d7e8:	2a12703a 	and	r9,r5,r8
    d7ec:	18c1ffcc 	andi	r3,r3,2047
    d7f0:	3a10703a 	and	r8,r7,r8
    d7f4:	280ad7fa 	srli	r5,r5,31
    d7f8:	380ed7fa 	srli	r7,r7,31
    d7fc:	12801026 	beq	r2,r10,d840 <__eqdf2+0x70>
    d800:	0281ffc4 	movi	r10,2047
    d804:	1a800a26 	beq	r3,r10,d830 <__eqdf2+0x60>
    d808:	10c00226 	beq	r2,r3,d814 <__eqdf2+0x44>
    d80c:	00800044 	movi	r2,1
    d810:	f800283a 	ret
    d814:	4a3ffd1e 	bne	r9,r8,d80c <__alt_data_end+0xff00d80c>
    d818:	21bffc1e 	bne	r4,r6,d80c <__alt_data_end+0xff00d80c>
    d81c:	29c00c26 	beq	r5,r7,d850 <__eqdf2+0x80>
    d820:	103ffa1e 	bne	r2,zero,d80c <__alt_data_end+0xff00d80c>
    d824:	2244b03a 	or	r2,r4,r9
    d828:	1004c03a 	cmpne	r2,r2,zero
    d82c:	f800283a 	ret
    d830:	3214b03a 	or	r10,r6,r8
    d834:	503ff426 	beq	r10,zero,d808 <__alt_data_end+0xff00d808>
    d838:	00800044 	movi	r2,1
    d83c:	f800283a 	ret
    d840:	2254b03a 	or	r10,r4,r9
    d844:	503fee26 	beq	r10,zero,d800 <__alt_data_end+0xff00d800>
    d848:	00800044 	movi	r2,1
    d84c:	f800283a 	ret
    d850:	0005883a 	mov	r2,zero
    d854:	f800283a 	ret

0000d858 <__gedf2>:
    d858:	2804d53a 	srli	r2,r5,20
    d85c:	3806d53a 	srli	r3,r7,20
    d860:	02000434 	movhi	r8,16
    d864:	423fffc4 	addi	r8,r8,-1
    d868:	1081ffcc 	andi	r2,r2,2047
    d86c:	0241ffc4 	movi	r9,2047
    d870:	2a14703a 	and	r10,r5,r8
    d874:	18c1ffcc 	andi	r3,r3,2047
    d878:	3a10703a 	and	r8,r7,r8
    d87c:	280ad7fa 	srli	r5,r5,31
    d880:	380ed7fa 	srli	r7,r7,31
    d884:	12401d26 	beq	r2,r9,d8fc <__gedf2+0xa4>
    d888:	0241ffc4 	movi	r9,2047
    d88c:	1a401226 	beq	r3,r9,d8d8 <__gedf2+0x80>
    d890:	1000081e 	bne	r2,zero,d8b4 <__gedf2+0x5c>
    d894:	2296b03a 	or	r11,r4,r10
    d898:	5813003a 	cmpeq	r9,r11,zero
    d89c:	1800091e 	bne	r3,zero,d8c4 <__gedf2+0x6c>
    d8a0:	3218b03a 	or	r12,r6,r8
    d8a4:	6000071e 	bne	r12,zero,d8c4 <__gedf2+0x6c>
    d8a8:	0005883a 	mov	r2,zero
    d8ac:	5800101e 	bne	r11,zero,d8f0 <__gedf2+0x98>
    d8b0:	f800283a 	ret
    d8b4:	18000c1e 	bne	r3,zero,d8e8 <__gedf2+0x90>
    d8b8:	3212b03a 	or	r9,r6,r8
    d8bc:	48000c26 	beq	r9,zero,d8f0 <__gedf2+0x98>
    d8c0:	0013883a 	mov	r9,zero
    d8c4:	39c03fcc 	andi	r7,r7,255
    d8c8:	48000826 	beq	r9,zero,d8ec <__gedf2+0x94>
    d8cc:	38000926 	beq	r7,zero,d8f4 <__gedf2+0x9c>
    d8d0:	00800044 	movi	r2,1
    d8d4:	f800283a 	ret
    d8d8:	3212b03a 	or	r9,r6,r8
    d8dc:	483fec26 	beq	r9,zero,d890 <__alt_data_end+0xff00d890>
    d8e0:	00bfff84 	movi	r2,-2
    d8e4:	f800283a 	ret
    d8e8:	39c03fcc 	andi	r7,r7,255
    d8ec:	29c00626 	beq	r5,r7,d908 <__gedf2+0xb0>
    d8f0:	283ff726 	beq	r5,zero,d8d0 <__alt_data_end+0xff00d8d0>
    d8f4:	00bfffc4 	movi	r2,-1
    d8f8:	f800283a 	ret
    d8fc:	2292b03a 	or	r9,r4,r10
    d900:	483fe126 	beq	r9,zero,d888 <__alt_data_end+0xff00d888>
    d904:	003ff606 	br	d8e0 <__alt_data_end+0xff00d8e0>
    d908:	18bff916 	blt	r3,r2,d8f0 <__alt_data_end+0xff00d8f0>
    d90c:	10c00316 	blt	r2,r3,d91c <__gedf2+0xc4>
    d910:	42bff736 	bltu	r8,r10,d8f0 <__alt_data_end+0xff00d8f0>
    d914:	52000326 	beq	r10,r8,d924 <__gedf2+0xcc>
    d918:	5200042e 	bgeu	r10,r8,d92c <__gedf2+0xd4>
    d91c:	283fec1e 	bne	r5,zero,d8d0 <__alt_data_end+0xff00d8d0>
    d920:	003ff406 	br	d8f4 <__alt_data_end+0xff00d8f4>
    d924:	313ff236 	bltu	r6,r4,d8f0 <__alt_data_end+0xff00d8f0>
    d928:	21bffc36 	bltu	r4,r6,d91c <__alt_data_end+0xff00d91c>
    d92c:	0005883a 	mov	r2,zero
    d930:	f800283a 	ret

0000d934 <__ledf2>:
    d934:	2804d53a 	srli	r2,r5,20
    d938:	3810d53a 	srli	r8,r7,20
    d93c:	00c00434 	movhi	r3,16
    d940:	18ffffc4 	addi	r3,r3,-1
    d944:	1081ffcc 	andi	r2,r2,2047
    d948:	0241ffc4 	movi	r9,2047
    d94c:	28d4703a 	and	r10,r5,r3
    d950:	4201ffcc 	andi	r8,r8,2047
    d954:	38c6703a 	and	r3,r7,r3
    d958:	280ad7fa 	srli	r5,r5,31
    d95c:	380ed7fa 	srli	r7,r7,31
    d960:	12401f26 	beq	r2,r9,d9e0 <__ledf2+0xac>
    d964:	0241ffc4 	movi	r9,2047
    d968:	42401426 	beq	r8,r9,d9bc <__ledf2+0x88>
    d96c:	1000091e 	bne	r2,zero,d994 <__ledf2+0x60>
    d970:	2296b03a 	or	r11,r4,r10
    d974:	5813003a 	cmpeq	r9,r11,zero
    d978:	29403fcc 	andi	r5,r5,255
    d97c:	40000a1e 	bne	r8,zero,d9a8 <__ledf2+0x74>
    d980:	30d8b03a 	or	r12,r6,r3
    d984:	6000081e 	bne	r12,zero,d9a8 <__ledf2+0x74>
    d988:	0005883a 	mov	r2,zero
    d98c:	5800111e 	bne	r11,zero,d9d4 <__ledf2+0xa0>
    d990:	f800283a 	ret
    d994:	29403fcc 	andi	r5,r5,255
    d998:	40000c1e 	bne	r8,zero,d9cc <__ledf2+0x98>
    d99c:	30d2b03a 	or	r9,r6,r3
    d9a0:	48000c26 	beq	r9,zero,d9d4 <__ledf2+0xa0>
    d9a4:	0013883a 	mov	r9,zero
    d9a8:	39c03fcc 	andi	r7,r7,255
    d9ac:	48000826 	beq	r9,zero,d9d0 <__ledf2+0x9c>
    d9b0:	38001126 	beq	r7,zero,d9f8 <__ledf2+0xc4>
    d9b4:	00800044 	movi	r2,1
    d9b8:	f800283a 	ret
    d9bc:	30d2b03a 	or	r9,r6,r3
    d9c0:	483fea26 	beq	r9,zero,d96c <__alt_data_end+0xff00d96c>
    d9c4:	00800084 	movi	r2,2
    d9c8:	f800283a 	ret
    d9cc:	39c03fcc 	andi	r7,r7,255
    d9d0:	39400726 	beq	r7,r5,d9f0 <__ledf2+0xbc>
    d9d4:	2800081e 	bne	r5,zero,d9f8 <__ledf2+0xc4>
    d9d8:	00800044 	movi	r2,1
    d9dc:	f800283a 	ret
    d9e0:	2292b03a 	or	r9,r4,r10
    d9e4:	483fdf26 	beq	r9,zero,d964 <__alt_data_end+0xff00d964>
    d9e8:	00800084 	movi	r2,2
    d9ec:	f800283a 	ret
    d9f0:	4080030e 	bge	r8,r2,da00 <__ledf2+0xcc>
    d9f4:	383fef26 	beq	r7,zero,d9b4 <__alt_data_end+0xff00d9b4>
    d9f8:	00bfffc4 	movi	r2,-1
    d9fc:	f800283a 	ret
    da00:	123feb16 	blt	r2,r8,d9b0 <__alt_data_end+0xff00d9b0>
    da04:	1abff336 	bltu	r3,r10,d9d4 <__alt_data_end+0xff00d9d4>
    da08:	50c00326 	beq	r10,r3,da18 <__ledf2+0xe4>
    da0c:	50c0042e 	bgeu	r10,r3,da20 <__ledf2+0xec>
    da10:	283fe81e 	bne	r5,zero,d9b4 <__alt_data_end+0xff00d9b4>
    da14:	003ff806 	br	d9f8 <__alt_data_end+0xff00d9f8>
    da18:	313fee36 	bltu	r6,r4,d9d4 <__alt_data_end+0xff00d9d4>
    da1c:	21bffc36 	bltu	r4,r6,da10 <__alt_data_end+0xff00da10>
    da20:	0005883a 	mov	r2,zero
    da24:	f800283a 	ret

0000da28 <__muldf3>:
    da28:	defff304 	addi	sp,sp,-52
    da2c:	2804d53a 	srli	r2,r5,20
    da30:	dd800915 	stw	r22,36(sp)
    da34:	282cd7fa 	srli	r22,r5,31
    da38:	dc000315 	stw	r16,12(sp)
    da3c:	04000434 	movhi	r16,16
    da40:	dd400815 	stw	r21,32(sp)
    da44:	dc800515 	stw	r18,20(sp)
    da48:	843fffc4 	addi	r16,r16,-1
    da4c:	dfc00c15 	stw	ra,48(sp)
    da50:	df000b15 	stw	fp,44(sp)
    da54:	ddc00a15 	stw	r23,40(sp)
    da58:	dd000715 	stw	r20,28(sp)
    da5c:	dcc00615 	stw	r19,24(sp)
    da60:	dc400415 	stw	r17,16(sp)
    da64:	1481ffcc 	andi	r18,r2,2047
    da68:	2c20703a 	and	r16,r5,r16
    da6c:	b02b883a 	mov	r21,r22
    da70:	b2403fcc 	andi	r9,r22,255
    da74:	90006026 	beq	r18,zero,dbf8 <__muldf3+0x1d0>
    da78:	0081ffc4 	movi	r2,2047
    da7c:	2029883a 	mov	r20,r4
    da80:	90803626 	beq	r18,r2,db5c <__muldf3+0x134>
    da84:	80800434 	orhi	r2,r16,16
    da88:	100490fa 	slli	r2,r2,3
    da8c:	2020d77a 	srli	r16,r4,29
    da90:	202890fa 	slli	r20,r4,3
    da94:	94bf0044 	addi	r18,r18,-1023
    da98:	80a0b03a 	or	r16,r16,r2
    da9c:	0027883a 	mov	r19,zero
    daa0:	0039883a 	mov	fp,zero
    daa4:	3804d53a 	srli	r2,r7,20
    daa8:	382ed7fa 	srli	r23,r7,31
    daac:	04400434 	movhi	r17,16
    dab0:	8c7fffc4 	addi	r17,r17,-1
    dab4:	1081ffcc 	andi	r2,r2,2047
    dab8:	3011883a 	mov	r8,r6
    dabc:	3c62703a 	and	r17,r7,r17
    dac0:	ba803fcc 	andi	r10,r23,255
    dac4:	10006d26 	beq	r2,zero,dc7c <__muldf3+0x254>
    dac8:	00c1ffc4 	movi	r3,2047
    dacc:	10c06526 	beq	r2,r3,dc64 <__muldf3+0x23c>
    dad0:	88c00434 	orhi	r3,r17,16
    dad4:	180690fa 	slli	r3,r3,3
    dad8:	3022d77a 	srli	r17,r6,29
    dadc:	301090fa 	slli	r8,r6,3
    dae0:	10bf0044 	addi	r2,r2,-1023
    dae4:	88e2b03a 	or	r17,r17,r3
    dae8:	000b883a 	mov	r5,zero
    daec:	9085883a 	add	r2,r18,r2
    daf0:	2cc8b03a 	or	r4,r5,r19
    daf4:	00c003c4 	movi	r3,15
    daf8:	bdacf03a 	xor	r22,r23,r22
    dafc:	12c00044 	addi	r11,r2,1
    db00:	19009936 	bltu	r3,r4,dd68 <__muldf3+0x340>
    db04:	200890ba 	slli	r4,r4,2
    db08:	00c00074 	movhi	r3,1
    db0c:	18f6c704 	addi	r3,r3,-9444
    db10:	20c9883a 	add	r4,r4,r3
    db14:	20c00017 	ldw	r3,0(r4)
    db18:	1800683a 	jmp	r3
    db1c:	0000dd68 	cmpgeui	zero,zero,885
    db20:	0000db7c 	xorhi	zero,zero,877
    db24:	0000db7c 	xorhi	zero,zero,877
    db28:	0000db78 	rdprs	zero,zero,877
    db2c:	0000dd44 	movi	zero,885
    db30:	0000dd44 	movi	zero,885
    db34:	0000dd2c 	andhi	zero,zero,884
    db38:	0000db78 	rdprs	zero,zero,877
    db3c:	0000dd44 	movi	zero,885
    db40:	0000dd2c 	andhi	zero,zero,884
    db44:	0000dd44 	movi	zero,885
    db48:	0000db78 	rdprs	zero,zero,877
    db4c:	0000dd54 	movui	zero,885
    db50:	0000dd54 	movui	zero,885
    db54:	0000dd54 	movui	zero,885
    db58:	0000df70 	cmpltui	zero,zero,893
    db5c:	2404b03a 	or	r2,r4,r16
    db60:	10006f1e 	bne	r2,zero,dd20 <__muldf3+0x2f8>
    db64:	04c00204 	movi	r19,8
    db68:	0021883a 	mov	r16,zero
    db6c:	0029883a 	mov	r20,zero
    db70:	07000084 	movi	fp,2
    db74:	003fcb06 	br	daa4 <__alt_data_end+0xff00daa4>
    db78:	502d883a 	mov	r22,r10
    db7c:	00800084 	movi	r2,2
    db80:	28805726 	beq	r5,r2,dce0 <__muldf3+0x2b8>
    db84:	008000c4 	movi	r2,3
    db88:	28816626 	beq	r5,r2,e124 <__muldf3+0x6fc>
    db8c:	00800044 	movi	r2,1
    db90:	2881411e 	bne	r5,r2,e098 <__muldf3+0x670>
    db94:	b02b883a 	mov	r21,r22
    db98:	0005883a 	mov	r2,zero
    db9c:	000b883a 	mov	r5,zero
    dba0:	0029883a 	mov	r20,zero
    dba4:	1004953a 	slli	r2,r2,20
    dba8:	a8c03fcc 	andi	r3,r21,255
    dbac:	04400434 	movhi	r17,16
    dbb0:	8c7fffc4 	addi	r17,r17,-1
    dbb4:	180697fa 	slli	r3,r3,31
    dbb8:	2c4a703a 	and	r5,r5,r17
    dbbc:	288ab03a 	or	r5,r5,r2
    dbc0:	28c6b03a 	or	r3,r5,r3
    dbc4:	a005883a 	mov	r2,r20
    dbc8:	dfc00c17 	ldw	ra,48(sp)
    dbcc:	df000b17 	ldw	fp,44(sp)
    dbd0:	ddc00a17 	ldw	r23,40(sp)
    dbd4:	dd800917 	ldw	r22,36(sp)
    dbd8:	dd400817 	ldw	r21,32(sp)
    dbdc:	dd000717 	ldw	r20,28(sp)
    dbe0:	dcc00617 	ldw	r19,24(sp)
    dbe4:	dc800517 	ldw	r18,20(sp)
    dbe8:	dc400417 	ldw	r17,16(sp)
    dbec:	dc000317 	ldw	r16,12(sp)
    dbf0:	dec00d04 	addi	sp,sp,52
    dbf4:	f800283a 	ret
    dbf8:	2404b03a 	or	r2,r4,r16
    dbfc:	2027883a 	mov	r19,r4
    dc00:	10004226 	beq	r2,zero,dd0c <__muldf3+0x2e4>
    dc04:	8000fc26 	beq	r16,zero,dff8 <__muldf3+0x5d0>
    dc08:	8009883a 	mov	r4,r16
    dc0c:	d9800215 	stw	r6,8(sp)
    dc10:	d9c00015 	stw	r7,0(sp)
    dc14:	da400115 	stw	r9,4(sp)
    dc18:	0002d940 	call	2d94 <__clzsi2>
    dc1c:	d9800217 	ldw	r6,8(sp)
    dc20:	d9c00017 	ldw	r7,0(sp)
    dc24:	da400117 	ldw	r9,4(sp)
    dc28:	113ffd44 	addi	r4,r2,-11
    dc2c:	00c00704 	movi	r3,28
    dc30:	1900ed16 	blt	r3,r4,dfe8 <__muldf3+0x5c0>
    dc34:	00c00744 	movi	r3,29
    dc38:	147ffe04 	addi	r17,r2,-8
    dc3c:	1907c83a 	sub	r3,r3,r4
    dc40:	8460983a 	sll	r16,r16,r17
    dc44:	98c6d83a 	srl	r3,r19,r3
    dc48:	9c68983a 	sll	r20,r19,r17
    dc4c:	1c20b03a 	or	r16,r3,r16
    dc50:	1080fcc4 	addi	r2,r2,1011
    dc54:	00a5c83a 	sub	r18,zero,r2
    dc58:	0027883a 	mov	r19,zero
    dc5c:	0039883a 	mov	fp,zero
    dc60:	003f9006 	br	daa4 <__alt_data_end+0xff00daa4>
    dc64:	3446b03a 	or	r3,r6,r17
    dc68:	1800261e 	bne	r3,zero,dd04 <__muldf3+0x2dc>
    dc6c:	0023883a 	mov	r17,zero
    dc70:	0011883a 	mov	r8,zero
    dc74:	01400084 	movi	r5,2
    dc78:	003f9c06 	br	daec <__alt_data_end+0xff00daec>
    dc7c:	3446b03a 	or	r3,r6,r17
    dc80:	18001c26 	beq	r3,zero,dcf4 <__muldf3+0x2cc>
    dc84:	8800ce26 	beq	r17,zero,dfc0 <__muldf3+0x598>
    dc88:	8809883a 	mov	r4,r17
    dc8c:	d9800215 	stw	r6,8(sp)
    dc90:	da400115 	stw	r9,4(sp)
    dc94:	da800015 	stw	r10,0(sp)
    dc98:	0002d940 	call	2d94 <__clzsi2>
    dc9c:	d9800217 	ldw	r6,8(sp)
    dca0:	da400117 	ldw	r9,4(sp)
    dca4:	da800017 	ldw	r10,0(sp)
    dca8:	113ffd44 	addi	r4,r2,-11
    dcac:	00c00704 	movi	r3,28
    dcb0:	1900bf16 	blt	r3,r4,dfb0 <__muldf3+0x588>
    dcb4:	00c00744 	movi	r3,29
    dcb8:	123ffe04 	addi	r8,r2,-8
    dcbc:	1907c83a 	sub	r3,r3,r4
    dcc0:	8a22983a 	sll	r17,r17,r8
    dcc4:	30c6d83a 	srl	r3,r6,r3
    dcc8:	3210983a 	sll	r8,r6,r8
    dccc:	1c62b03a 	or	r17,r3,r17
    dcd0:	1080fcc4 	addi	r2,r2,1011
    dcd4:	0085c83a 	sub	r2,zero,r2
    dcd8:	000b883a 	mov	r5,zero
    dcdc:	003f8306 	br	daec <__alt_data_end+0xff00daec>
    dce0:	b02b883a 	mov	r21,r22
    dce4:	0081ffc4 	movi	r2,2047
    dce8:	000b883a 	mov	r5,zero
    dcec:	0029883a 	mov	r20,zero
    dcf0:	003fac06 	br	dba4 <__alt_data_end+0xff00dba4>
    dcf4:	0023883a 	mov	r17,zero
    dcf8:	0011883a 	mov	r8,zero
    dcfc:	01400044 	movi	r5,1
    dd00:	003f7a06 	br	daec <__alt_data_end+0xff00daec>
    dd04:	014000c4 	movi	r5,3
    dd08:	003f7806 	br	daec <__alt_data_end+0xff00daec>
    dd0c:	04c00104 	movi	r19,4
    dd10:	0021883a 	mov	r16,zero
    dd14:	0029883a 	mov	r20,zero
    dd18:	07000044 	movi	fp,1
    dd1c:	003f6106 	br	daa4 <__alt_data_end+0xff00daa4>
    dd20:	04c00304 	movi	r19,12
    dd24:	070000c4 	movi	fp,3
    dd28:	003f5e06 	br	daa4 <__alt_data_end+0xff00daa4>
    dd2c:	01400434 	movhi	r5,16
    dd30:	002b883a 	mov	r21,zero
    dd34:	297fffc4 	addi	r5,r5,-1
    dd38:	053fffc4 	movi	r20,-1
    dd3c:	0081ffc4 	movi	r2,2047
    dd40:	003f9806 	br	dba4 <__alt_data_end+0xff00dba4>
    dd44:	8023883a 	mov	r17,r16
    dd48:	a011883a 	mov	r8,r20
    dd4c:	e00b883a 	mov	r5,fp
    dd50:	003f8a06 	br	db7c <__alt_data_end+0xff00db7c>
    dd54:	8023883a 	mov	r17,r16
    dd58:	a011883a 	mov	r8,r20
    dd5c:	482d883a 	mov	r22,r9
    dd60:	e00b883a 	mov	r5,fp
    dd64:	003f8506 	br	db7c <__alt_data_end+0xff00db7c>
    dd68:	a00ad43a 	srli	r5,r20,16
    dd6c:	401ad43a 	srli	r13,r8,16
    dd70:	a53fffcc 	andi	r20,r20,65535
    dd74:	423fffcc 	andi	r8,r8,65535
    dd78:	4519383a 	mul	r12,r8,r20
    dd7c:	4147383a 	mul	r3,r8,r5
    dd80:	6d09383a 	mul	r4,r13,r20
    dd84:	600cd43a 	srli	r6,r12,16
    dd88:	2b5d383a 	mul	r14,r5,r13
    dd8c:	20c9883a 	add	r4,r4,r3
    dd90:	310d883a 	add	r6,r6,r4
    dd94:	30c0022e 	bgeu	r6,r3,dda0 <__muldf3+0x378>
    dd98:	00c00074 	movhi	r3,1
    dd9c:	70dd883a 	add	r14,r14,r3
    dda0:	8826d43a 	srli	r19,r17,16
    dda4:	8bffffcc 	andi	r15,r17,65535
    dda8:	7d23383a 	mul	r17,r15,r20
    ddac:	7949383a 	mul	r4,r15,r5
    ddb0:	9d29383a 	mul	r20,r19,r20
    ddb4:	8814d43a 	srli	r10,r17,16
    ddb8:	3012943a 	slli	r9,r6,16
    ddbc:	a129883a 	add	r20,r20,r4
    ddc0:	633fffcc 	andi	r12,r12,65535
    ddc4:	5515883a 	add	r10,r10,r20
    ddc8:	3006d43a 	srli	r3,r6,16
    ddcc:	4b13883a 	add	r9,r9,r12
    ddd0:	2ccb383a 	mul	r5,r5,r19
    ddd4:	5100022e 	bgeu	r10,r4,dde0 <__muldf3+0x3b8>
    ddd8:	01000074 	movhi	r4,1
    dddc:	290b883a 	add	r5,r5,r4
    dde0:	802ad43a 	srli	r21,r16,16
    dde4:	843fffcc 	andi	r16,r16,65535
    dde8:	440d383a 	mul	r6,r8,r16
    ddec:	4565383a 	mul	r18,r8,r21
    ddf0:	8349383a 	mul	r4,r16,r13
    ddf4:	500e943a 	slli	r7,r10,16
    ddf8:	3010d43a 	srli	r8,r6,16
    ddfc:	5028d43a 	srli	r20,r10,16
    de00:	2489883a 	add	r4,r4,r18
    de04:	8abfffcc 	andi	r10,r17,65535
    de08:	3a95883a 	add	r10,r7,r10
    de0c:	4119883a 	add	r12,r8,r4
    de10:	a169883a 	add	r20,r20,r5
    de14:	1a87883a 	add	r3,r3,r10
    de18:	6d5b383a 	mul	r13,r13,r21
    de1c:	6480022e 	bgeu	r12,r18,de28 <__muldf3+0x400>
    de20:	01000074 	movhi	r4,1
    de24:	691b883a 	add	r13,r13,r4
    de28:	7c25383a 	mul	r18,r15,r16
    de2c:	7d4b383a 	mul	r5,r15,r21
    de30:	84cf383a 	mul	r7,r16,r19
    de34:	901ed43a 	srli	r15,r18,16
    de38:	6008d43a 	srli	r4,r12,16
    de3c:	6010943a 	slli	r8,r12,16
    de40:	394f883a 	add	r7,r7,r5
    de44:	333fffcc 	andi	r12,r6,65535
    de48:	79df883a 	add	r15,r15,r7
    de4c:	235b883a 	add	r13,r4,r13
    de50:	9d63383a 	mul	r17,r19,r21
    de54:	4309883a 	add	r4,r8,r12
    de58:	7940022e 	bgeu	r15,r5,de64 <__muldf3+0x43c>
    de5c:	01400074 	movhi	r5,1
    de60:	8963883a 	add	r17,r17,r5
    de64:	780a943a 	slli	r5,r15,16
    de68:	91bfffcc 	andi	r6,r18,65535
    de6c:	70c7883a 	add	r3,r14,r3
    de70:	298d883a 	add	r6,r5,r6
    de74:	1a8f803a 	cmpltu	r7,r3,r10
    de78:	350b883a 	add	r5,r6,r20
    de7c:	20c7883a 	add	r3,r4,r3
    de80:	3955883a 	add	r10,r7,r5
    de84:	1909803a 	cmpltu	r4,r3,r4
    de88:	6a91883a 	add	r8,r13,r10
    de8c:	780cd43a 	srli	r6,r15,16
    de90:	2219883a 	add	r12,r4,r8
    de94:	2d0b803a 	cmpltu	r5,r5,r20
    de98:	51cf803a 	cmpltu	r7,r10,r7
    de9c:	29ceb03a 	or	r7,r5,r7
    dea0:	4351803a 	cmpltu	r8,r8,r13
    dea4:	610b803a 	cmpltu	r5,r12,r4
    dea8:	4148b03a 	or	r4,r8,r5
    deac:	398f883a 	add	r7,r7,r6
    deb0:	3909883a 	add	r4,r7,r4
    deb4:	1810927a 	slli	r8,r3,9
    deb8:	2449883a 	add	r4,r4,r17
    debc:	2008927a 	slli	r4,r4,9
    dec0:	6022d5fa 	srli	r17,r12,23
    dec4:	1806d5fa 	srli	r3,r3,23
    dec8:	4252b03a 	or	r9,r8,r9
    decc:	600a927a 	slli	r5,r12,9
    ded0:	4810c03a 	cmpne	r8,r9,zero
    ded4:	2462b03a 	or	r17,r4,r17
    ded8:	40c6b03a 	or	r3,r8,r3
    dedc:	8900402c 	andhi	r4,r17,256
    dee0:	1950b03a 	or	r8,r3,r5
    dee4:	20000726 	beq	r4,zero,df04 <__muldf3+0x4dc>
    dee8:	4006d07a 	srli	r3,r8,1
    deec:	880497fa 	slli	r2,r17,31
    def0:	4200004c 	andi	r8,r8,1
    def4:	8822d07a 	srli	r17,r17,1
    def8:	1a10b03a 	or	r8,r3,r8
    defc:	1210b03a 	or	r8,r2,r8
    df00:	5805883a 	mov	r2,r11
    df04:	1140ffc4 	addi	r5,r2,1023
    df08:	0140440e 	bge	zero,r5,e01c <__muldf3+0x5f4>
    df0c:	40c001cc 	andi	r3,r8,7
    df10:	18000726 	beq	r3,zero,df30 <__muldf3+0x508>
    df14:	40c003cc 	andi	r3,r8,15
    df18:	01000104 	movi	r4,4
    df1c:	19000426 	beq	r3,r4,df30 <__muldf3+0x508>
    df20:	4107883a 	add	r3,r8,r4
    df24:	1a11803a 	cmpltu	r8,r3,r8
    df28:	8a23883a 	add	r17,r17,r8
    df2c:	1811883a 	mov	r8,r3
    df30:	88c0402c 	andhi	r3,r17,256
    df34:	18000426 	beq	r3,zero,df48 <__muldf3+0x520>
    df38:	11410004 	addi	r5,r2,1024
    df3c:	00bfc034 	movhi	r2,65280
    df40:	10bfffc4 	addi	r2,r2,-1
    df44:	88a2703a 	and	r17,r17,r2
    df48:	0081ff84 	movi	r2,2046
    df4c:	117f6416 	blt	r2,r5,dce0 <__alt_data_end+0xff00dce0>
    df50:	8828977a 	slli	r20,r17,29
    df54:	4010d0fa 	srli	r8,r8,3
    df58:	8822927a 	slli	r17,r17,9
    df5c:	2881ffcc 	andi	r2,r5,2047
    df60:	a228b03a 	or	r20,r20,r8
    df64:	880ad33a 	srli	r5,r17,12
    df68:	b02b883a 	mov	r21,r22
    df6c:	003f0d06 	br	dba4 <__alt_data_end+0xff00dba4>
    df70:	8080022c 	andhi	r2,r16,8
    df74:	10000926 	beq	r2,zero,df9c <__muldf3+0x574>
    df78:	8880022c 	andhi	r2,r17,8
    df7c:	1000071e 	bne	r2,zero,df9c <__muldf3+0x574>
    df80:	00800434 	movhi	r2,16
    df84:	89400234 	orhi	r5,r17,8
    df88:	10bfffc4 	addi	r2,r2,-1
    df8c:	b82b883a 	mov	r21,r23
    df90:	288a703a 	and	r5,r5,r2
    df94:	4029883a 	mov	r20,r8
    df98:	003f6806 	br	dd3c <__alt_data_end+0xff00dd3c>
    df9c:	00800434 	movhi	r2,16
    dfa0:	81400234 	orhi	r5,r16,8
    dfa4:	10bfffc4 	addi	r2,r2,-1
    dfa8:	288a703a 	and	r5,r5,r2
    dfac:	003f6306 	br	dd3c <__alt_data_end+0xff00dd3c>
    dfb0:	147ff604 	addi	r17,r2,-40
    dfb4:	3462983a 	sll	r17,r6,r17
    dfb8:	0011883a 	mov	r8,zero
    dfbc:	003f4406 	br	dcd0 <__alt_data_end+0xff00dcd0>
    dfc0:	3009883a 	mov	r4,r6
    dfc4:	d9800215 	stw	r6,8(sp)
    dfc8:	da400115 	stw	r9,4(sp)
    dfcc:	da800015 	stw	r10,0(sp)
    dfd0:	0002d940 	call	2d94 <__clzsi2>
    dfd4:	10800804 	addi	r2,r2,32
    dfd8:	da800017 	ldw	r10,0(sp)
    dfdc:	da400117 	ldw	r9,4(sp)
    dfe0:	d9800217 	ldw	r6,8(sp)
    dfe4:	003f3006 	br	dca8 <__alt_data_end+0xff00dca8>
    dfe8:	143ff604 	addi	r16,r2,-40
    dfec:	9c20983a 	sll	r16,r19,r16
    dff0:	0029883a 	mov	r20,zero
    dff4:	003f1606 	br	dc50 <__alt_data_end+0xff00dc50>
    dff8:	d9800215 	stw	r6,8(sp)
    dffc:	d9c00015 	stw	r7,0(sp)
    e000:	da400115 	stw	r9,4(sp)
    e004:	0002d940 	call	2d94 <__clzsi2>
    e008:	10800804 	addi	r2,r2,32
    e00c:	da400117 	ldw	r9,4(sp)
    e010:	d9c00017 	ldw	r7,0(sp)
    e014:	d9800217 	ldw	r6,8(sp)
    e018:	003f0306 	br	dc28 <__alt_data_end+0xff00dc28>
    e01c:	00c00044 	movi	r3,1
    e020:	1947c83a 	sub	r3,r3,r5
    e024:	00800e04 	movi	r2,56
    e028:	10feda16 	blt	r2,r3,db94 <__alt_data_end+0xff00db94>
    e02c:	008007c4 	movi	r2,31
    e030:	10c01b16 	blt	r2,r3,e0a0 <__muldf3+0x678>
    e034:	00800804 	movi	r2,32
    e038:	10c5c83a 	sub	r2,r2,r3
    e03c:	888a983a 	sll	r5,r17,r2
    e040:	40c8d83a 	srl	r4,r8,r3
    e044:	4084983a 	sll	r2,r8,r2
    e048:	88e2d83a 	srl	r17,r17,r3
    e04c:	2906b03a 	or	r3,r5,r4
    e050:	1004c03a 	cmpne	r2,r2,zero
    e054:	1886b03a 	or	r3,r3,r2
    e058:	188001cc 	andi	r2,r3,7
    e05c:	10000726 	beq	r2,zero,e07c <__muldf3+0x654>
    e060:	188003cc 	andi	r2,r3,15
    e064:	01000104 	movi	r4,4
    e068:	11000426 	beq	r2,r4,e07c <__muldf3+0x654>
    e06c:	1805883a 	mov	r2,r3
    e070:	10c00104 	addi	r3,r2,4
    e074:	1885803a 	cmpltu	r2,r3,r2
    e078:	88a3883a 	add	r17,r17,r2
    e07c:	8880202c 	andhi	r2,r17,128
    e080:	10001c26 	beq	r2,zero,e0f4 <__muldf3+0x6cc>
    e084:	b02b883a 	mov	r21,r22
    e088:	00800044 	movi	r2,1
    e08c:	000b883a 	mov	r5,zero
    e090:	0029883a 	mov	r20,zero
    e094:	003ec306 	br	dba4 <__alt_data_end+0xff00dba4>
    e098:	5805883a 	mov	r2,r11
    e09c:	003f9906 	br	df04 <__alt_data_end+0xff00df04>
    e0a0:	00bff844 	movi	r2,-31
    e0a4:	1145c83a 	sub	r2,r2,r5
    e0a8:	8888d83a 	srl	r4,r17,r2
    e0ac:	00800804 	movi	r2,32
    e0b0:	18801a26 	beq	r3,r2,e11c <__muldf3+0x6f4>
    e0b4:	00801004 	movi	r2,64
    e0b8:	10c5c83a 	sub	r2,r2,r3
    e0bc:	8884983a 	sll	r2,r17,r2
    e0c0:	1204b03a 	or	r2,r2,r8
    e0c4:	1004c03a 	cmpne	r2,r2,zero
    e0c8:	2084b03a 	or	r2,r4,r2
    e0cc:	144001cc 	andi	r17,r2,7
    e0d0:	88000d1e 	bne	r17,zero,e108 <__muldf3+0x6e0>
    e0d4:	000b883a 	mov	r5,zero
    e0d8:	1028d0fa 	srli	r20,r2,3
    e0dc:	b02b883a 	mov	r21,r22
    e0e0:	0005883a 	mov	r2,zero
    e0e4:	a468b03a 	or	r20,r20,r17
    e0e8:	003eae06 	br	dba4 <__alt_data_end+0xff00dba4>
    e0ec:	1007883a 	mov	r3,r2
    e0f0:	0023883a 	mov	r17,zero
    e0f4:	880a927a 	slli	r5,r17,9
    e0f8:	1805883a 	mov	r2,r3
    e0fc:	8822977a 	slli	r17,r17,29
    e100:	280ad33a 	srli	r5,r5,12
    e104:	003ff406 	br	e0d8 <__alt_data_end+0xff00e0d8>
    e108:	10c003cc 	andi	r3,r2,15
    e10c:	01000104 	movi	r4,4
    e110:	193ff626 	beq	r3,r4,e0ec <__alt_data_end+0xff00e0ec>
    e114:	0023883a 	mov	r17,zero
    e118:	003fd506 	br	e070 <__alt_data_end+0xff00e070>
    e11c:	0005883a 	mov	r2,zero
    e120:	003fe706 	br	e0c0 <__alt_data_end+0xff00e0c0>
    e124:	00800434 	movhi	r2,16
    e128:	89400234 	orhi	r5,r17,8
    e12c:	10bfffc4 	addi	r2,r2,-1
    e130:	b02b883a 	mov	r21,r22
    e134:	288a703a 	and	r5,r5,r2
    e138:	4029883a 	mov	r20,r8
    e13c:	003eff06 	br	dd3c <__alt_data_end+0xff00dd3c>

0000e140 <__subdf3>:
    e140:	02000434 	movhi	r8,16
    e144:	423fffc4 	addi	r8,r8,-1
    e148:	defffb04 	addi	sp,sp,-20
    e14c:	2a14703a 	and	r10,r5,r8
    e150:	3812d53a 	srli	r9,r7,20
    e154:	3a10703a 	and	r8,r7,r8
    e158:	2006d77a 	srli	r3,r4,29
    e15c:	3004d77a 	srli	r2,r6,29
    e160:	dc000015 	stw	r16,0(sp)
    e164:	501490fa 	slli	r10,r10,3
    e168:	2820d53a 	srli	r16,r5,20
    e16c:	401090fa 	slli	r8,r8,3
    e170:	dc800215 	stw	r18,8(sp)
    e174:	dc400115 	stw	r17,4(sp)
    e178:	dfc00415 	stw	ra,16(sp)
    e17c:	202290fa 	slli	r17,r4,3
    e180:	dcc00315 	stw	r19,12(sp)
    e184:	4a41ffcc 	andi	r9,r9,2047
    e188:	0101ffc4 	movi	r4,2047
    e18c:	2824d7fa 	srli	r18,r5,31
    e190:	8401ffcc 	andi	r16,r16,2047
    e194:	50c6b03a 	or	r3,r10,r3
    e198:	380ed7fa 	srli	r7,r7,31
    e19c:	408ab03a 	or	r5,r8,r2
    e1a0:	300c90fa 	slli	r6,r6,3
    e1a4:	49009626 	beq	r9,r4,e400 <__subdf3+0x2c0>
    e1a8:	39c0005c 	xori	r7,r7,1
    e1ac:	8245c83a 	sub	r2,r16,r9
    e1b0:	3c807426 	beq	r7,r18,e384 <__subdf3+0x244>
    e1b4:	0080af0e 	bge	zero,r2,e474 <__subdf3+0x334>
    e1b8:	48002a1e 	bne	r9,zero,e264 <__subdf3+0x124>
    e1bc:	2988b03a 	or	r4,r5,r6
    e1c0:	20009a1e 	bne	r4,zero,e42c <__subdf3+0x2ec>
    e1c4:	888001cc 	andi	r2,r17,7
    e1c8:	10000726 	beq	r2,zero,e1e8 <__subdf3+0xa8>
    e1cc:	888003cc 	andi	r2,r17,15
    e1d0:	01000104 	movi	r4,4
    e1d4:	11000426 	beq	r2,r4,e1e8 <__subdf3+0xa8>
    e1d8:	890b883a 	add	r5,r17,r4
    e1dc:	2c63803a 	cmpltu	r17,r5,r17
    e1e0:	1c47883a 	add	r3,r3,r17
    e1e4:	2823883a 	mov	r17,r5
    e1e8:	1880202c 	andhi	r2,r3,128
    e1ec:	10005926 	beq	r2,zero,e354 <__subdf3+0x214>
    e1f0:	84000044 	addi	r16,r16,1
    e1f4:	0081ffc4 	movi	r2,2047
    e1f8:	8080be26 	beq	r16,r2,e4f4 <__subdf3+0x3b4>
    e1fc:	017fe034 	movhi	r5,65408
    e200:	297fffc4 	addi	r5,r5,-1
    e204:	1946703a 	and	r3,r3,r5
    e208:	1804977a 	slli	r2,r3,29
    e20c:	1806927a 	slli	r3,r3,9
    e210:	8822d0fa 	srli	r17,r17,3
    e214:	8401ffcc 	andi	r16,r16,2047
    e218:	180ad33a 	srli	r5,r3,12
    e21c:	9100004c 	andi	r4,r18,1
    e220:	1444b03a 	or	r2,r2,r17
    e224:	80c1ffcc 	andi	r3,r16,2047
    e228:	1820953a 	slli	r16,r3,20
    e22c:	20c03fcc 	andi	r3,r4,255
    e230:	180897fa 	slli	r4,r3,31
    e234:	00c00434 	movhi	r3,16
    e238:	18ffffc4 	addi	r3,r3,-1
    e23c:	28c6703a 	and	r3,r5,r3
    e240:	1c06b03a 	or	r3,r3,r16
    e244:	1906b03a 	or	r3,r3,r4
    e248:	dfc00417 	ldw	ra,16(sp)
    e24c:	dcc00317 	ldw	r19,12(sp)
    e250:	dc800217 	ldw	r18,8(sp)
    e254:	dc400117 	ldw	r17,4(sp)
    e258:	dc000017 	ldw	r16,0(sp)
    e25c:	dec00504 	addi	sp,sp,20
    e260:	f800283a 	ret
    e264:	0101ffc4 	movi	r4,2047
    e268:	813fd626 	beq	r16,r4,e1c4 <__alt_data_end+0xff00e1c4>
    e26c:	29402034 	orhi	r5,r5,128
    e270:	01000e04 	movi	r4,56
    e274:	2080a316 	blt	r4,r2,e504 <__subdf3+0x3c4>
    e278:	010007c4 	movi	r4,31
    e27c:	2080c616 	blt	r4,r2,e598 <__subdf3+0x458>
    e280:	01000804 	movi	r4,32
    e284:	2089c83a 	sub	r4,r4,r2
    e288:	2910983a 	sll	r8,r5,r4
    e28c:	308ed83a 	srl	r7,r6,r2
    e290:	3108983a 	sll	r4,r6,r4
    e294:	2884d83a 	srl	r2,r5,r2
    e298:	41ccb03a 	or	r6,r8,r7
    e29c:	2008c03a 	cmpne	r4,r4,zero
    e2a0:	310cb03a 	or	r6,r6,r4
    e2a4:	898dc83a 	sub	r6,r17,r6
    e2a8:	89a3803a 	cmpltu	r17,r17,r6
    e2ac:	1887c83a 	sub	r3,r3,r2
    e2b0:	1c47c83a 	sub	r3,r3,r17
    e2b4:	3023883a 	mov	r17,r6
    e2b8:	1880202c 	andhi	r2,r3,128
    e2bc:	10002326 	beq	r2,zero,e34c <__subdf3+0x20c>
    e2c0:	04c02034 	movhi	r19,128
    e2c4:	9cffffc4 	addi	r19,r19,-1
    e2c8:	1ce6703a 	and	r19,r3,r19
    e2cc:	98007a26 	beq	r19,zero,e4b8 <__subdf3+0x378>
    e2d0:	9809883a 	mov	r4,r19
    e2d4:	0002d940 	call	2d94 <__clzsi2>
    e2d8:	113ffe04 	addi	r4,r2,-8
    e2dc:	00c007c4 	movi	r3,31
    e2e0:	19007b16 	blt	r3,r4,e4d0 <__subdf3+0x390>
    e2e4:	00800804 	movi	r2,32
    e2e8:	1105c83a 	sub	r2,r2,r4
    e2ec:	8884d83a 	srl	r2,r17,r2
    e2f0:	9906983a 	sll	r3,r19,r4
    e2f4:	8922983a 	sll	r17,r17,r4
    e2f8:	10c4b03a 	or	r2,r2,r3
    e2fc:	24007816 	blt	r4,r16,e4e0 <__subdf3+0x3a0>
    e300:	2421c83a 	sub	r16,r4,r16
    e304:	80c00044 	addi	r3,r16,1
    e308:	010007c4 	movi	r4,31
    e30c:	20c09516 	blt	r4,r3,e564 <__subdf3+0x424>
    e310:	01400804 	movi	r5,32
    e314:	28cbc83a 	sub	r5,r5,r3
    e318:	88c8d83a 	srl	r4,r17,r3
    e31c:	8962983a 	sll	r17,r17,r5
    e320:	114a983a 	sll	r5,r2,r5
    e324:	10c6d83a 	srl	r3,r2,r3
    e328:	8804c03a 	cmpne	r2,r17,zero
    e32c:	290ab03a 	or	r5,r5,r4
    e330:	28a2b03a 	or	r17,r5,r2
    e334:	0021883a 	mov	r16,zero
    e338:	003fa206 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e33c:	2090b03a 	or	r8,r4,r2
    e340:	40018e26 	beq	r8,zero,e97c <__subdf3+0x83c>
    e344:	1007883a 	mov	r3,r2
    e348:	2023883a 	mov	r17,r4
    e34c:	888001cc 	andi	r2,r17,7
    e350:	103f9e1e 	bne	r2,zero,e1cc <__alt_data_end+0xff00e1cc>
    e354:	1804977a 	slli	r2,r3,29
    e358:	8822d0fa 	srli	r17,r17,3
    e35c:	1810d0fa 	srli	r8,r3,3
    e360:	9100004c 	andi	r4,r18,1
    e364:	1444b03a 	or	r2,r2,r17
    e368:	00c1ffc4 	movi	r3,2047
    e36c:	80c02826 	beq	r16,r3,e410 <__subdf3+0x2d0>
    e370:	01400434 	movhi	r5,16
    e374:	297fffc4 	addi	r5,r5,-1
    e378:	80e0703a 	and	r16,r16,r3
    e37c:	414a703a 	and	r5,r8,r5
    e380:	003fa806 	br	e224 <__alt_data_end+0xff00e224>
    e384:	0080630e 	bge	zero,r2,e514 <__subdf3+0x3d4>
    e388:	48003026 	beq	r9,zero,e44c <__subdf3+0x30c>
    e38c:	0101ffc4 	movi	r4,2047
    e390:	813f8c26 	beq	r16,r4,e1c4 <__alt_data_end+0xff00e1c4>
    e394:	29402034 	orhi	r5,r5,128
    e398:	01000e04 	movi	r4,56
    e39c:	2080a90e 	bge	r4,r2,e644 <__subdf3+0x504>
    e3a0:	298cb03a 	or	r6,r5,r6
    e3a4:	3012c03a 	cmpne	r9,r6,zero
    e3a8:	0005883a 	mov	r2,zero
    e3ac:	4c53883a 	add	r9,r9,r17
    e3b0:	4c63803a 	cmpltu	r17,r9,r17
    e3b4:	10c7883a 	add	r3,r2,r3
    e3b8:	88c7883a 	add	r3,r17,r3
    e3bc:	4823883a 	mov	r17,r9
    e3c0:	1880202c 	andhi	r2,r3,128
    e3c4:	1000d026 	beq	r2,zero,e708 <__subdf3+0x5c8>
    e3c8:	84000044 	addi	r16,r16,1
    e3cc:	0081ffc4 	movi	r2,2047
    e3d0:	8080fe26 	beq	r16,r2,e7cc <__subdf3+0x68c>
    e3d4:	00bfe034 	movhi	r2,65408
    e3d8:	10bfffc4 	addi	r2,r2,-1
    e3dc:	1886703a 	and	r3,r3,r2
    e3e0:	880ad07a 	srli	r5,r17,1
    e3e4:	180497fa 	slli	r2,r3,31
    e3e8:	8900004c 	andi	r4,r17,1
    e3ec:	2922b03a 	or	r17,r5,r4
    e3f0:	1806d07a 	srli	r3,r3,1
    e3f4:	1462b03a 	or	r17,r2,r17
    e3f8:	3825883a 	mov	r18,r7
    e3fc:	003f7106 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e400:	2984b03a 	or	r2,r5,r6
    e404:	103f6826 	beq	r2,zero,e1a8 <__alt_data_end+0xff00e1a8>
    e408:	39c03fcc 	andi	r7,r7,255
    e40c:	003f6706 	br	e1ac <__alt_data_end+0xff00e1ac>
    e410:	4086b03a 	or	r3,r8,r2
    e414:	18015226 	beq	r3,zero,e960 <__subdf3+0x820>
    e418:	00c00434 	movhi	r3,16
    e41c:	41400234 	orhi	r5,r8,8
    e420:	18ffffc4 	addi	r3,r3,-1
    e424:	28ca703a 	and	r5,r5,r3
    e428:	003f7e06 	br	e224 <__alt_data_end+0xff00e224>
    e42c:	10bfffc4 	addi	r2,r2,-1
    e430:	1000491e 	bne	r2,zero,e558 <__subdf3+0x418>
    e434:	898fc83a 	sub	r7,r17,r6
    e438:	89e3803a 	cmpltu	r17,r17,r7
    e43c:	1947c83a 	sub	r3,r3,r5
    e440:	1c47c83a 	sub	r3,r3,r17
    e444:	3823883a 	mov	r17,r7
    e448:	003f9b06 	br	e2b8 <__alt_data_end+0xff00e2b8>
    e44c:	2988b03a 	or	r4,r5,r6
    e450:	203f5c26 	beq	r4,zero,e1c4 <__alt_data_end+0xff00e1c4>
    e454:	10bfffc4 	addi	r2,r2,-1
    e458:	1000931e 	bne	r2,zero,e6a8 <__subdf3+0x568>
    e45c:	898d883a 	add	r6,r17,r6
    e460:	3463803a 	cmpltu	r17,r6,r17
    e464:	1947883a 	add	r3,r3,r5
    e468:	88c7883a 	add	r3,r17,r3
    e46c:	3023883a 	mov	r17,r6
    e470:	003fd306 	br	e3c0 <__alt_data_end+0xff00e3c0>
    e474:	1000541e 	bne	r2,zero,e5c8 <__subdf3+0x488>
    e478:	80800044 	addi	r2,r16,1
    e47c:	1081ffcc 	andi	r2,r2,2047
    e480:	01000044 	movi	r4,1
    e484:	2080a20e 	bge	r4,r2,e710 <__subdf3+0x5d0>
    e488:	8989c83a 	sub	r4,r17,r6
    e48c:	8905803a 	cmpltu	r2,r17,r4
    e490:	1967c83a 	sub	r19,r3,r5
    e494:	98a7c83a 	sub	r19,r19,r2
    e498:	9880202c 	andhi	r2,r19,128
    e49c:	10006326 	beq	r2,zero,e62c <__subdf3+0x4ec>
    e4a0:	3463c83a 	sub	r17,r6,r17
    e4a4:	28c7c83a 	sub	r3,r5,r3
    e4a8:	344d803a 	cmpltu	r6,r6,r17
    e4ac:	19a7c83a 	sub	r19,r3,r6
    e4b0:	3825883a 	mov	r18,r7
    e4b4:	983f861e 	bne	r19,zero,e2d0 <__alt_data_end+0xff00e2d0>
    e4b8:	8809883a 	mov	r4,r17
    e4bc:	0002d940 	call	2d94 <__clzsi2>
    e4c0:	10800804 	addi	r2,r2,32
    e4c4:	113ffe04 	addi	r4,r2,-8
    e4c8:	00c007c4 	movi	r3,31
    e4cc:	193f850e 	bge	r3,r4,e2e4 <__alt_data_end+0xff00e2e4>
    e4d0:	10bff604 	addi	r2,r2,-40
    e4d4:	8884983a 	sll	r2,r17,r2
    e4d8:	0023883a 	mov	r17,zero
    e4dc:	243f880e 	bge	r4,r16,e300 <__alt_data_end+0xff00e300>
    e4e0:	00ffe034 	movhi	r3,65408
    e4e4:	18ffffc4 	addi	r3,r3,-1
    e4e8:	8121c83a 	sub	r16,r16,r4
    e4ec:	10c6703a 	and	r3,r2,r3
    e4f0:	003f3406 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e4f4:	9100004c 	andi	r4,r18,1
    e4f8:	000b883a 	mov	r5,zero
    e4fc:	0005883a 	mov	r2,zero
    e500:	003f4806 	br	e224 <__alt_data_end+0xff00e224>
    e504:	298cb03a 	or	r6,r5,r6
    e508:	300cc03a 	cmpne	r6,r6,zero
    e50c:	0005883a 	mov	r2,zero
    e510:	003f6406 	br	e2a4 <__alt_data_end+0xff00e2a4>
    e514:	10009a1e 	bne	r2,zero,e780 <__subdf3+0x640>
    e518:	82400044 	addi	r9,r16,1
    e51c:	4881ffcc 	andi	r2,r9,2047
    e520:	02800044 	movi	r10,1
    e524:	5080670e 	bge	r10,r2,e6c4 <__subdf3+0x584>
    e528:	0081ffc4 	movi	r2,2047
    e52c:	4880af26 	beq	r9,r2,e7ec <__subdf3+0x6ac>
    e530:	898d883a 	add	r6,r17,r6
    e534:	1945883a 	add	r2,r3,r5
    e538:	3447803a 	cmpltu	r3,r6,r17
    e53c:	1887883a 	add	r3,r3,r2
    e540:	182297fa 	slli	r17,r3,31
    e544:	300cd07a 	srli	r6,r6,1
    e548:	1806d07a 	srli	r3,r3,1
    e54c:	4821883a 	mov	r16,r9
    e550:	89a2b03a 	or	r17,r17,r6
    e554:	003f1b06 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e558:	0101ffc4 	movi	r4,2047
    e55c:	813f441e 	bne	r16,r4,e270 <__alt_data_end+0xff00e270>
    e560:	003f1806 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e564:	843ff844 	addi	r16,r16,-31
    e568:	01400804 	movi	r5,32
    e56c:	1408d83a 	srl	r4,r2,r16
    e570:	19405026 	beq	r3,r5,e6b4 <__subdf3+0x574>
    e574:	01401004 	movi	r5,64
    e578:	28c7c83a 	sub	r3,r5,r3
    e57c:	10c4983a 	sll	r2,r2,r3
    e580:	88a2b03a 	or	r17,r17,r2
    e584:	8822c03a 	cmpne	r17,r17,zero
    e588:	2462b03a 	or	r17,r4,r17
    e58c:	0007883a 	mov	r3,zero
    e590:	0021883a 	mov	r16,zero
    e594:	003f6d06 	br	e34c <__alt_data_end+0xff00e34c>
    e598:	11fff804 	addi	r7,r2,-32
    e59c:	01000804 	movi	r4,32
    e5a0:	29ced83a 	srl	r7,r5,r7
    e5a4:	11004526 	beq	r2,r4,e6bc <__subdf3+0x57c>
    e5a8:	01001004 	movi	r4,64
    e5ac:	2089c83a 	sub	r4,r4,r2
    e5b0:	2904983a 	sll	r2,r5,r4
    e5b4:	118cb03a 	or	r6,r2,r6
    e5b8:	300cc03a 	cmpne	r6,r6,zero
    e5bc:	398cb03a 	or	r6,r7,r6
    e5c0:	0005883a 	mov	r2,zero
    e5c4:	003f3706 	br	e2a4 <__alt_data_end+0xff00e2a4>
    e5c8:	80002a26 	beq	r16,zero,e674 <__subdf3+0x534>
    e5cc:	0101ffc4 	movi	r4,2047
    e5d0:	49006626 	beq	r9,r4,e76c <__subdf3+0x62c>
    e5d4:	0085c83a 	sub	r2,zero,r2
    e5d8:	18c02034 	orhi	r3,r3,128
    e5dc:	01000e04 	movi	r4,56
    e5e0:	20807e16 	blt	r4,r2,e7dc <__subdf3+0x69c>
    e5e4:	010007c4 	movi	r4,31
    e5e8:	2080e716 	blt	r4,r2,e988 <__subdf3+0x848>
    e5ec:	01000804 	movi	r4,32
    e5f0:	2089c83a 	sub	r4,r4,r2
    e5f4:	1914983a 	sll	r10,r3,r4
    e5f8:	8890d83a 	srl	r8,r17,r2
    e5fc:	8908983a 	sll	r4,r17,r4
    e600:	1884d83a 	srl	r2,r3,r2
    e604:	5222b03a 	or	r17,r10,r8
    e608:	2006c03a 	cmpne	r3,r4,zero
    e60c:	88e2b03a 	or	r17,r17,r3
    e610:	3463c83a 	sub	r17,r6,r17
    e614:	2885c83a 	sub	r2,r5,r2
    e618:	344d803a 	cmpltu	r6,r6,r17
    e61c:	1187c83a 	sub	r3,r2,r6
    e620:	4821883a 	mov	r16,r9
    e624:	3825883a 	mov	r18,r7
    e628:	003f2306 	br	e2b8 <__alt_data_end+0xff00e2b8>
    e62c:	24d0b03a 	or	r8,r4,r19
    e630:	40001b1e 	bne	r8,zero,e6a0 <__subdf3+0x560>
    e634:	0005883a 	mov	r2,zero
    e638:	0009883a 	mov	r4,zero
    e63c:	0021883a 	mov	r16,zero
    e640:	003f4906 	br	e368 <__alt_data_end+0xff00e368>
    e644:	010007c4 	movi	r4,31
    e648:	20803a16 	blt	r4,r2,e734 <__subdf3+0x5f4>
    e64c:	01000804 	movi	r4,32
    e650:	2089c83a 	sub	r4,r4,r2
    e654:	2912983a 	sll	r9,r5,r4
    e658:	3090d83a 	srl	r8,r6,r2
    e65c:	3108983a 	sll	r4,r6,r4
    e660:	2884d83a 	srl	r2,r5,r2
    e664:	4a12b03a 	or	r9,r9,r8
    e668:	2008c03a 	cmpne	r4,r4,zero
    e66c:	4912b03a 	or	r9,r9,r4
    e670:	003f4e06 	br	e3ac <__alt_data_end+0xff00e3ac>
    e674:	1c48b03a 	or	r4,r3,r17
    e678:	20003c26 	beq	r4,zero,e76c <__subdf3+0x62c>
    e67c:	0084303a 	nor	r2,zero,r2
    e680:	1000381e 	bne	r2,zero,e764 <__subdf3+0x624>
    e684:	3463c83a 	sub	r17,r6,r17
    e688:	28c5c83a 	sub	r2,r5,r3
    e68c:	344d803a 	cmpltu	r6,r6,r17
    e690:	1187c83a 	sub	r3,r2,r6
    e694:	4821883a 	mov	r16,r9
    e698:	3825883a 	mov	r18,r7
    e69c:	003f0606 	br	e2b8 <__alt_data_end+0xff00e2b8>
    e6a0:	2023883a 	mov	r17,r4
    e6a4:	003f0906 	br	e2cc <__alt_data_end+0xff00e2cc>
    e6a8:	0101ffc4 	movi	r4,2047
    e6ac:	813f3a1e 	bne	r16,r4,e398 <__alt_data_end+0xff00e398>
    e6b0:	003ec406 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e6b4:	0005883a 	mov	r2,zero
    e6b8:	003fb106 	br	e580 <__alt_data_end+0xff00e580>
    e6bc:	0005883a 	mov	r2,zero
    e6c0:	003fbc06 	br	e5b4 <__alt_data_end+0xff00e5b4>
    e6c4:	1c44b03a 	or	r2,r3,r17
    e6c8:	80008e1e 	bne	r16,zero,e904 <__subdf3+0x7c4>
    e6cc:	1000c826 	beq	r2,zero,e9f0 <__subdf3+0x8b0>
    e6d0:	2984b03a 	or	r2,r5,r6
    e6d4:	103ebb26 	beq	r2,zero,e1c4 <__alt_data_end+0xff00e1c4>
    e6d8:	8989883a 	add	r4,r17,r6
    e6dc:	1945883a 	add	r2,r3,r5
    e6e0:	2447803a 	cmpltu	r3,r4,r17
    e6e4:	1887883a 	add	r3,r3,r2
    e6e8:	1880202c 	andhi	r2,r3,128
    e6ec:	2023883a 	mov	r17,r4
    e6f0:	103f1626 	beq	r2,zero,e34c <__alt_data_end+0xff00e34c>
    e6f4:	00bfe034 	movhi	r2,65408
    e6f8:	10bfffc4 	addi	r2,r2,-1
    e6fc:	5021883a 	mov	r16,r10
    e700:	1886703a 	and	r3,r3,r2
    e704:	003eaf06 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e708:	3825883a 	mov	r18,r7
    e70c:	003f0f06 	br	e34c <__alt_data_end+0xff00e34c>
    e710:	1c44b03a 	or	r2,r3,r17
    e714:	8000251e 	bne	r16,zero,e7ac <__subdf3+0x66c>
    e718:	1000661e 	bne	r2,zero,e8b4 <__subdf3+0x774>
    e71c:	2990b03a 	or	r8,r5,r6
    e720:	40009626 	beq	r8,zero,e97c <__subdf3+0x83c>
    e724:	2807883a 	mov	r3,r5
    e728:	3023883a 	mov	r17,r6
    e72c:	3825883a 	mov	r18,r7
    e730:	003ea406 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e734:	127ff804 	addi	r9,r2,-32
    e738:	01000804 	movi	r4,32
    e73c:	2a52d83a 	srl	r9,r5,r9
    e740:	11008c26 	beq	r2,r4,e974 <__subdf3+0x834>
    e744:	01001004 	movi	r4,64
    e748:	2085c83a 	sub	r2,r4,r2
    e74c:	2884983a 	sll	r2,r5,r2
    e750:	118cb03a 	or	r6,r2,r6
    e754:	300cc03a 	cmpne	r6,r6,zero
    e758:	4992b03a 	or	r9,r9,r6
    e75c:	0005883a 	mov	r2,zero
    e760:	003f1206 	br	e3ac <__alt_data_end+0xff00e3ac>
    e764:	0101ffc4 	movi	r4,2047
    e768:	493f9c1e 	bne	r9,r4,e5dc <__alt_data_end+0xff00e5dc>
    e76c:	2807883a 	mov	r3,r5
    e770:	3023883a 	mov	r17,r6
    e774:	4821883a 	mov	r16,r9
    e778:	3825883a 	mov	r18,r7
    e77c:	003e9106 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e780:	80001f1e 	bne	r16,zero,e800 <__subdf3+0x6c0>
    e784:	1c48b03a 	or	r4,r3,r17
    e788:	20005a26 	beq	r4,zero,e8f4 <__subdf3+0x7b4>
    e78c:	0084303a 	nor	r2,zero,r2
    e790:	1000561e 	bne	r2,zero,e8ec <__subdf3+0x7ac>
    e794:	89a3883a 	add	r17,r17,r6
    e798:	1945883a 	add	r2,r3,r5
    e79c:	898d803a 	cmpltu	r6,r17,r6
    e7a0:	3087883a 	add	r3,r6,r2
    e7a4:	4821883a 	mov	r16,r9
    e7a8:	003f0506 	br	e3c0 <__alt_data_end+0xff00e3c0>
    e7ac:	10002b1e 	bne	r2,zero,e85c <__subdf3+0x71c>
    e7b0:	2984b03a 	or	r2,r5,r6
    e7b4:	10008026 	beq	r2,zero,e9b8 <__subdf3+0x878>
    e7b8:	2807883a 	mov	r3,r5
    e7bc:	3023883a 	mov	r17,r6
    e7c0:	3825883a 	mov	r18,r7
    e7c4:	0401ffc4 	movi	r16,2047
    e7c8:	003e7e06 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e7cc:	3809883a 	mov	r4,r7
    e7d0:	0011883a 	mov	r8,zero
    e7d4:	0005883a 	mov	r2,zero
    e7d8:	003ee306 	br	e368 <__alt_data_end+0xff00e368>
    e7dc:	1c62b03a 	or	r17,r3,r17
    e7e0:	8822c03a 	cmpne	r17,r17,zero
    e7e4:	0005883a 	mov	r2,zero
    e7e8:	003f8906 	br	e610 <__alt_data_end+0xff00e610>
    e7ec:	3809883a 	mov	r4,r7
    e7f0:	4821883a 	mov	r16,r9
    e7f4:	0011883a 	mov	r8,zero
    e7f8:	0005883a 	mov	r2,zero
    e7fc:	003eda06 	br	e368 <__alt_data_end+0xff00e368>
    e800:	0101ffc4 	movi	r4,2047
    e804:	49003b26 	beq	r9,r4,e8f4 <__subdf3+0x7b4>
    e808:	0085c83a 	sub	r2,zero,r2
    e80c:	18c02034 	orhi	r3,r3,128
    e810:	01000e04 	movi	r4,56
    e814:	20806e16 	blt	r4,r2,e9d0 <__subdf3+0x890>
    e818:	010007c4 	movi	r4,31
    e81c:	20807716 	blt	r4,r2,e9fc <__subdf3+0x8bc>
    e820:	01000804 	movi	r4,32
    e824:	2089c83a 	sub	r4,r4,r2
    e828:	1914983a 	sll	r10,r3,r4
    e82c:	8890d83a 	srl	r8,r17,r2
    e830:	8908983a 	sll	r4,r17,r4
    e834:	1884d83a 	srl	r2,r3,r2
    e838:	5222b03a 	or	r17,r10,r8
    e83c:	2006c03a 	cmpne	r3,r4,zero
    e840:	88e2b03a 	or	r17,r17,r3
    e844:	89a3883a 	add	r17,r17,r6
    e848:	1145883a 	add	r2,r2,r5
    e84c:	898d803a 	cmpltu	r6,r17,r6
    e850:	3087883a 	add	r3,r6,r2
    e854:	4821883a 	mov	r16,r9
    e858:	003ed906 	br	e3c0 <__alt_data_end+0xff00e3c0>
    e85c:	2984b03a 	or	r2,r5,r6
    e860:	10004226 	beq	r2,zero,e96c <__subdf3+0x82c>
    e864:	1808d0fa 	srli	r4,r3,3
    e868:	8822d0fa 	srli	r17,r17,3
    e86c:	1806977a 	slli	r3,r3,29
    e870:	2080022c 	andhi	r2,r4,8
    e874:	1c62b03a 	or	r17,r3,r17
    e878:	10000826 	beq	r2,zero,e89c <__subdf3+0x75c>
    e87c:	2812d0fa 	srli	r9,r5,3
    e880:	4880022c 	andhi	r2,r9,8
    e884:	1000051e 	bne	r2,zero,e89c <__subdf3+0x75c>
    e888:	300cd0fa 	srli	r6,r6,3
    e88c:	2804977a 	slli	r2,r5,29
    e890:	4809883a 	mov	r4,r9
    e894:	3825883a 	mov	r18,r7
    e898:	11a2b03a 	or	r17,r2,r6
    e89c:	8806d77a 	srli	r3,r17,29
    e8a0:	200890fa 	slli	r4,r4,3
    e8a4:	882290fa 	slli	r17,r17,3
    e8a8:	0401ffc4 	movi	r16,2047
    e8ac:	1906b03a 	or	r3,r3,r4
    e8b0:	003e4406 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e8b4:	2984b03a 	or	r2,r5,r6
    e8b8:	103e4226 	beq	r2,zero,e1c4 <__alt_data_end+0xff00e1c4>
    e8bc:	8989c83a 	sub	r4,r17,r6
    e8c0:	8911803a 	cmpltu	r8,r17,r4
    e8c4:	1945c83a 	sub	r2,r3,r5
    e8c8:	1205c83a 	sub	r2,r2,r8
    e8cc:	1200202c 	andhi	r8,r2,128
    e8d0:	403e9a26 	beq	r8,zero,e33c <__alt_data_end+0xff00e33c>
    e8d4:	3463c83a 	sub	r17,r6,r17
    e8d8:	28c5c83a 	sub	r2,r5,r3
    e8dc:	344d803a 	cmpltu	r6,r6,r17
    e8e0:	1187c83a 	sub	r3,r2,r6
    e8e4:	3825883a 	mov	r18,r7
    e8e8:	003e3606 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e8ec:	0101ffc4 	movi	r4,2047
    e8f0:	493fc71e 	bne	r9,r4,e810 <__alt_data_end+0xff00e810>
    e8f4:	2807883a 	mov	r3,r5
    e8f8:	3023883a 	mov	r17,r6
    e8fc:	4821883a 	mov	r16,r9
    e900:	003e3006 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e904:	10003626 	beq	r2,zero,e9e0 <__subdf3+0x8a0>
    e908:	2984b03a 	or	r2,r5,r6
    e90c:	10001726 	beq	r2,zero,e96c <__subdf3+0x82c>
    e910:	1808d0fa 	srli	r4,r3,3
    e914:	8822d0fa 	srli	r17,r17,3
    e918:	1806977a 	slli	r3,r3,29
    e91c:	2080022c 	andhi	r2,r4,8
    e920:	1c62b03a 	or	r17,r3,r17
    e924:	10000726 	beq	r2,zero,e944 <__subdf3+0x804>
    e928:	2812d0fa 	srli	r9,r5,3
    e92c:	4880022c 	andhi	r2,r9,8
    e930:	1000041e 	bne	r2,zero,e944 <__subdf3+0x804>
    e934:	300cd0fa 	srli	r6,r6,3
    e938:	2804977a 	slli	r2,r5,29
    e93c:	4809883a 	mov	r4,r9
    e940:	11a2b03a 	or	r17,r2,r6
    e944:	8806d77a 	srli	r3,r17,29
    e948:	200890fa 	slli	r4,r4,3
    e94c:	882290fa 	slli	r17,r17,3
    e950:	3825883a 	mov	r18,r7
    e954:	1906b03a 	or	r3,r3,r4
    e958:	0401ffc4 	movi	r16,2047
    e95c:	003e1906 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e960:	000b883a 	mov	r5,zero
    e964:	0005883a 	mov	r2,zero
    e968:	003e2e06 	br	e224 <__alt_data_end+0xff00e224>
    e96c:	0401ffc4 	movi	r16,2047
    e970:	003e1406 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e974:	0005883a 	mov	r2,zero
    e978:	003f7506 	br	e750 <__alt_data_end+0xff00e750>
    e97c:	0005883a 	mov	r2,zero
    e980:	0009883a 	mov	r4,zero
    e984:	003e7806 	br	e368 <__alt_data_end+0xff00e368>
    e988:	123ff804 	addi	r8,r2,-32
    e98c:	01000804 	movi	r4,32
    e990:	1a10d83a 	srl	r8,r3,r8
    e994:	11002526 	beq	r2,r4,ea2c <__subdf3+0x8ec>
    e998:	01001004 	movi	r4,64
    e99c:	2085c83a 	sub	r2,r4,r2
    e9a0:	1884983a 	sll	r2,r3,r2
    e9a4:	1444b03a 	or	r2,r2,r17
    e9a8:	1004c03a 	cmpne	r2,r2,zero
    e9ac:	40a2b03a 	or	r17,r8,r2
    e9b0:	0005883a 	mov	r2,zero
    e9b4:	003f1606 	br	e610 <__alt_data_end+0xff00e610>
    e9b8:	02000434 	movhi	r8,16
    e9bc:	0009883a 	mov	r4,zero
    e9c0:	423fffc4 	addi	r8,r8,-1
    e9c4:	00bfffc4 	movi	r2,-1
    e9c8:	0401ffc4 	movi	r16,2047
    e9cc:	003e6606 	br	e368 <__alt_data_end+0xff00e368>
    e9d0:	1c62b03a 	or	r17,r3,r17
    e9d4:	8822c03a 	cmpne	r17,r17,zero
    e9d8:	0005883a 	mov	r2,zero
    e9dc:	003f9906 	br	e844 <__alt_data_end+0xff00e844>
    e9e0:	2807883a 	mov	r3,r5
    e9e4:	3023883a 	mov	r17,r6
    e9e8:	0401ffc4 	movi	r16,2047
    e9ec:	003df506 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e9f0:	2807883a 	mov	r3,r5
    e9f4:	3023883a 	mov	r17,r6
    e9f8:	003df206 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e9fc:	123ff804 	addi	r8,r2,-32
    ea00:	01000804 	movi	r4,32
    ea04:	1a10d83a 	srl	r8,r3,r8
    ea08:	11000a26 	beq	r2,r4,ea34 <__subdf3+0x8f4>
    ea0c:	01001004 	movi	r4,64
    ea10:	2085c83a 	sub	r2,r4,r2
    ea14:	1884983a 	sll	r2,r3,r2
    ea18:	1444b03a 	or	r2,r2,r17
    ea1c:	1004c03a 	cmpne	r2,r2,zero
    ea20:	40a2b03a 	or	r17,r8,r2
    ea24:	0005883a 	mov	r2,zero
    ea28:	003f8606 	br	e844 <__alt_data_end+0xff00e844>
    ea2c:	0005883a 	mov	r2,zero
    ea30:	003fdc06 	br	e9a4 <__alt_data_end+0xff00e9a4>
    ea34:	0005883a 	mov	r2,zero
    ea38:	003ff706 	br	ea18 <__alt_data_end+0xff00ea18>

0000ea3c <__fixdfsi>:
    ea3c:	280cd53a 	srli	r6,r5,20
    ea40:	00c00434 	movhi	r3,16
    ea44:	18ffffc4 	addi	r3,r3,-1
    ea48:	3181ffcc 	andi	r6,r6,2047
    ea4c:	01c0ff84 	movi	r7,1022
    ea50:	28c6703a 	and	r3,r5,r3
    ea54:	280ad7fa 	srli	r5,r5,31
    ea58:	3980120e 	bge	r7,r6,eaa4 <__fixdfsi+0x68>
    ea5c:	00810744 	movi	r2,1053
    ea60:	11800c16 	blt	r2,r6,ea94 <__fixdfsi+0x58>
    ea64:	00810cc4 	movi	r2,1075
    ea68:	1185c83a 	sub	r2,r2,r6
    ea6c:	01c007c4 	movi	r7,31
    ea70:	18c00434 	orhi	r3,r3,16
    ea74:	38800d16 	blt	r7,r2,eaac <__fixdfsi+0x70>
    ea78:	31befb44 	addi	r6,r6,-1043
    ea7c:	2084d83a 	srl	r2,r4,r2
    ea80:	1986983a 	sll	r3,r3,r6
    ea84:	1884b03a 	or	r2,r3,r2
    ea88:	28000726 	beq	r5,zero,eaa8 <__fixdfsi+0x6c>
    ea8c:	0085c83a 	sub	r2,zero,r2
    ea90:	f800283a 	ret
    ea94:	00a00034 	movhi	r2,32768
    ea98:	10bfffc4 	addi	r2,r2,-1
    ea9c:	2885883a 	add	r2,r5,r2
    eaa0:	f800283a 	ret
    eaa4:	0005883a 	mov	r2,zero
    eaa8:	f800283a 	ret
    eaac:	008104c4 	movi	r2,1043
    eab0:	1185c83a 	sub	r2,r2,r6
    eab4:	1884d83a 	srl	r2,r3,r2
    eab8:	003ff306 	br	ea88 <__alt_data_end+0xff00ea88>

0000eabc <__floatsidf>:
    eabc:	defffd04 	addi	sp,sp,-12
    eac0:	dfc00215 	stw	ra,8(sp)
    eac4:	dc400115 	stw	r17,4(sp)
    eac8:	dc000015 	stw	r16,0(sp)
    eacc:	20002b26 	beq	r4,zero,eb7c <__floatsidf+0xc0>
    ead0:	2023883a 	mov	r17,r4
    ead4:	2020d7fa 	srli	r16,r4,31
    ead8:	20002d16 	blt	r4,zero,eb90 <__floatsidf+0xd4>
    eadc:	8809883a 	mov	r4,r17
    eae0:	0002d940 	call	2d94 <__clzsi2>
    eae4:	01410784 	movi	r5,1054
    eae8:	288bc83a 	sub	r5,r5,r2
    eaec:	01010cc4 	movi	r4,1075
    eaf0:	2149c83a 	sub	r4,r4,r5
    eaf4:	00c007c4 	movi	r3,31
    eaf8:	1900160e 	bge	r3,r4,eb54 <__floatsidf+0x98>
    eafc:	00c104c4 	movi	r3,1043
    eb00:	1947c83a 	sub	r3,r3,r5
    eb04:	88c6983a 	sll	r3,r17,r3
    eb08:	00800434 	movhi	r2,16
    eb0c:	10bfffc4 	addi	r2,r2,-1
    eb10:	1886703a 	and	r3,r3,r2
    eb14:	2941ffcc 	andi	r5,r5,2047
    eb18:	800d883a 	mov	r6,r16
    eb1c:	0005883a 	mov	r2,zero
    eb20:	280a953a 	slli	r5,r5,20
    eb24:	31803fcc 	andi	r6,r6,255
    eb28:	01000434 	movhi	r4,16
    eb2c:	300c97fa 	slli	r6,r6,31
    eb30:	213fffc4 	addi	r4,r4,-1
    eb34:	1906703a 	and	r3,r3,r4
    eb38:	1946b03a 	or	r3,r3,r5
    eb3c:	1986b03a 	or	r3,r3,r6
    eb40:	dfc00217 	ldw	ra,8(sp)
    eb44:	dc400117 	ldw	r17,4(sp)
    eb48:	dc000017 	ldw	r16,0(sp)
    eb4c:	dec00304 	addi	sp,sp,12
    eb50:	f800283a 	ret
    eb54:	00c002c4 	movi	r3,11
    eb58:	1887c83a 	sub	r3,r3,r2
    eb5c:	88c6d83a 	srl	r3,r17,r3
    eb60:	8904983a 	sll	r2,r17,r4
    eb64:	01000434 	movhi	r4,16
    eb68:	213fffc4 	addi	r4,r4,-1
    eb6c:	2941ffcc 	andi	r5,r5,2047
    eb70:	1906703a 	and	r3,r3,r4
    eb74:	800d883a 	mov	r6,r16
    eb78:	003fe906 	br	eb20 <__alt_data_end+0xff00eb20>
    eb7c:	000d883a 	mov	r6,zero
    eb80:	000b883a 	mov	r5,zero
    eb84:	0007883a 	mov	r3,zero
    eb88:	0005883a 	mov	r2,zero
    eb8c:	003fe406 	br	eb20 <__alt_data_end+0xff00eb20>
    eb90:	0123c83a 	sub	r17,zero,r4
    eb94:	003fd106 	br	eadc <__alt_data_end+0xff00eadc>

0000eb98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb98:	defffe04 	addi	sp,sp,-8
    eb9c:	dfc00115 	stw	ra,4(sp)
    eba0:	df000015 	stw	fp,0(sp)
    eba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eba8:	d0a00b17 	ldw	r2,-32724(gp)
    ebac:	10000326 	beq	r2,zero,ebbc <alt_get_errno+0x24>
    ebb0:	d0a00b17 	ldw	r2,-32724(gp)
    ebb4:	103ee83a 	callr	r2
    ebb8:	00000106 	br	ebc0 <alt_get_errno+0x28>
    ebbc:	d0a72304 	addi	r2,gp,-25460
}
    ebc0:	e037883a 	mov	sp,fp
    ebc4:	dfc00117 	ldw	ra,4(sp)
    ebc8:	df000017 	ldw	fp,0(sp)
    ebcc:	dec00204 	addi	sp,sp,8
    ebd0:	f800283a 	ret

0000ebd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ebd4:	defffb04 	addi	sp,sp,-20
    ebd8:	dfc00415 	stw	ra,16(sp)
    ebdc:	df000315 	stw	fp,12(sp)
    ebe0:	df000304 	addi	fp,sp,12
    ebe4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ebe8:	e0bfff17 	ldw	r2,-4(fp)
    ebec:	10000616 	blt	r2,zero,ec08 <close+0x34>
    ebf0:	e0bfff17 	ldw	r2,-4(fp)
    ebf4:	10c00324 	muli	r3,r2,12
    ebf8:	00800074 	movhi	r2,1
    ebfc:	1089e204 	addi	r2,r2,10120
    ec00:	1885883a 	add	r2,r3,r2
    ec04:	00000106 	br	ec0c <close+0x38>
    ec08:	0005883a 	mov	r2,zero
    ec0c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ec10:	e0bffd17 	ldw	r2,-12(fp)
    ec14:	10001926 	beq	r2,zero,ec7c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10800017 	ldw	r2,0(r2)
    ec20:	10800417 	ldw	r2,16(r2)
    ec24:	10000626 	beq	r2,zero,ec40 <close+0x6c>
    ec28:	e0bffd17 	ldw	r2,-12(fp)
    ec2c:	10800017 	ldw	r2,0(r2)
    ec30:	10800417 	ldw	r2,16(r2)
    ec34:	e13ffd17 	ldw	r4,-12(fp)
    ec38:	103ee83a 	callr	r2
    ec3c:	00000106 	br	ec44 <close+0x70>
    ec40:	0005883a 	mov	r2,zero
    ec44:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ec48:	e13fff17 	ldw	r4,-4(fp)
    ec4c:	000f2940 	call	f294 <alt_release_fd>
    if (rval < 0)
    ec50:	e0bffe17 	ldw	r2,-8(fp)
    ec54:	1000070e 	bge	r2,zero,ec74 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ec58:	000eb980 	call	eb98 <alt_get_errno>
    ec5c:	1007883a 	mov	r3,r2
    ec60:	e0bffe17 	ldw	r2,-8(fp)
    ec64:	0085c83a 	sub	r2,zero,r2
    ec68:	18800015 	stw	r2,0(r3)
      return -1;
    ec6c:	00bfffc4 	movi	r2,-1
    ec70:	00000706 	br	ec90 <close+0xbc>
    }
    return 0;
    ec74:	0005883a 	mov	r2,zero
    ec78:	00000506 	br	ec90 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ec7c:	000eb980 	call	eb98 <alt_get_errno>
    ec80:	1007883a 	mov	r3,r2
    ec84:	00801444 	movi	r2,81
    ec88:	18800015 	stw	r2,0(r3)
    return -1;
    ec8c:	00bfffc4 	movi	r2,-1
  }
}
    ec90:	e037883a 	mov	sp,fp
    ec94:	dfc00117 	ldw	ra,4(sp)
    ec98:	df000017 	ldw	fp,0(sp)
    ec9c:	dec00204 	addi	sp,sp,8
    eca0:	f800283a 	ret

0000eca4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    eca4:	defffc04 	addi	sp,sp,-16
    eca8:	df000315 	stw	fp,12(sp)
    ecac:	df000304 	addi	fp,sp,12
    ecb0:	e13ffd15 	stw	r4,-12(fp)
    ecb4:	e17ffe15 	stw	r5,-8(fp)
    ecb8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ecbc:	e0bfff17 	ldw	r2,-4(fp)
}
    ecc0:	e037883a 	mov	sp,fp
    ecc4:	df000017 	ldw	fp,0(sp)
    ecc8:	dec00104 	addi	sp,sp,4
    eccc:	f800283a 	ret

0000ecd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ecd0:	defffe04 	addi	sp,sp,-8
    ecd4:	dfc00115 	stw	ra,4(sp)
    ecd8:	df000015 	stw	fp,0(sp)
    ecdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ece0:	d0a00b17 	ldw	r2,-32724(gp)
    ece4:	10000326 	beq	r2,zero,ecf4 <alt_get_errno+0x24>
    ece8:	d0a00b17 	ldw	r2,-32724(gp)
    ecec:	103ee83a 	callr	r2
    ecf0:	00000106 	br	ecf8 <alt_get_errno+0x28>
    ecf4:	d0a72304 	addi	r2,gp,-25460
}
    ecf8:	e037883a 	mov	sp,fp
    ecfc:	dfc00117 	ldw	ra,4(sp)
    ed00:	df000017 	ldw	fp,0(sp)
    ed04:	dec00204 	addi	sp,sp,8
    ed08:	f800283a 	ret

0000ed0c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ed0c:	defffb04 	addi	sp,sp,-20
    ed10:	dfc00415 	stw	ra,16(sp)
    ed14:	df000315 	stw	fp,12(sp)
    ed18:	df000304 	addi	fp,sp,12
    ed1c:	e13ffe15 	stw	r4,-8(fp)
    ed20:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed24:	e0bffe17 	ldw	r2,-8(fp)
    ed28:	10000616 	blt	r2,zero,ed44 <fstat+0x38>
    ed2c:	e0bffe17 	ldw	r2,-8(fp)
    ed30:	10c00324 	muli	r3,r2,12
    ed34:	00800074 	movhi	r2,1
    ed38:	1089e204 	addi	r2,r2,10120
    ed3c:	1885883a 	add	r2,r3,r2
    ed40:	00000106 	br	ed48 <fstat+0x3c>
    ed44:	0005883a 	mov	r2,zero
    ed48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ed4c:	e0bffd17 	ldw	r2,-12(fp)
    ed50:	10001026 	beq	r2,zero,ed94 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ed54:	e0bffd17 	ldw	r2,-12(fp)
    ed58:	10800017 	ldw	r2,0(r2)
    ed5c:	10800817 	ldw	r2,32(r2)
    ed60:	10000726 	beq	r2,zero,ed80 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ed64:	e0bffd17 	ldw	r2,-12(fp)
    ed68:	10800017 	ldw	r2,0(r2)
    ed6c:	10800817 	ldw	r2,32(r2)
    ed70:	e17fff17 	ldw	r5,-4(fp)
    ed74:	e13ffd17 	ldw	r4,-12(fp)
    ed78:	103ee83a 	callr	r2
    ed7c:	00000a06 	br	eda8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ed80:	e0bfff17 	ldw	r2,-4(fp)
    ed84:	00c80004 	movi	r3,8192
    ed88:	10c00115 	stw	r3,4(r2)
      return 0;
    ed8c:	0005883a 	mov	r2,zero
    ed90:	00000506 	br	eda8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ed94:	000ecd00 	call	ecd0 <alt_get_errno>
    ed98:	1007883a 	mov	r3,r2
    ed9c:	00801444 	movi	r2,81
    eda0:	18800015 	stw	r2,0(r3)
    return -1;
    eda4:	00bfffc4 	movi	r2,-1
  }
}
    eda8:	e037883a 	mov	sp,fp
    edac:	dfc00117 	ldw	ra,4(sp)
    edb0:	df000017 	ldw	fp,0(sp)
    edb4:	dec00204 	addi	sp,sp,8
    edb8:	f800283a 	ret

0000edbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    edbc:	defffe04 	addi	sp,sp,-8
    edc0:	dfc00115 	stw	ra,4(sp)
    edc4:	df000015 	stw	fp,0(sp)
    edc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    edcc:	d0a00b17 	ldw	r2,-32724(gp)
    edd0:	10000326 	beq	r2,zero,ede0 <alt_get_errno+0x24>
    edd4:	d0a00b17 	ldw	r2,-32724(gp)
    edd8:	103ee83a 	callr	r2
    eddc:	00000106 	br	ede4 <alt_get_errno+0x28>
    ede0:	d0a72304 	addi	r2,gp,-25460
}
    ede4:	e037883a 	mov	sp,fp
    ede8:	dfc00117 	ldw	ra,4(sp)
    edec:	df000017 	ldw	fp,0(sp)
    edf0:	dec00204 	addi	sp,sp,8
    edf4:	f800283a 	ret

0000edf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    edf8:	deffed04 	addi	sp,sp,-76
    edfc:	dfc01215 	stw	ra,72(sp)
    ee00:	df001115 	stw	fp,68(sp)
    ee04:	df001104 	addi	fp,sp,68
    ee08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
    ee10:	10000616 	blt	r2,zero,ee2c <isatty+0x34>
    ee14:	e0bfff17 	ldw	r2,-4(fp)
    ee18:	10c00324 	muli	r3,r2,12
    ee1c:	00800074 	movhi	r2,1
    ee20:	1089e204 	addi	r2,r2,10120
    ee24:	1885883a 	add	r2,r3,r2
    ee28:	00000106 	br	ee30 <isatty+0x38>
    ee2c:	0005883a 	mov	r2,zero
    ee30:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ee34:	e0bfef17 	ldw	r2,-68(fp)
    ee38:	10000e26 	beq	r2,zero,ee74 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ee3c:	e0bfef17 	ldw	r2,-68(fp)
    ee40:	10800017 	ldw	r2,0(r2)
    ee44:	10800817 	ldw	r2,32(r2)
    ee48:	1000021e 	bne	r2,zero,ee54 <isatty+0x5c>
    {
      return 1;
    ee4c:	00800044 	movi	r2,1
    ee50:	00000d06 	br	ee88 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ee54:	e0bff004 	addi	r2,fp,-64
    ee58:	100b883a 	mov	r5,r2
    ee5c:	e13fff17 	ldw	r4,-4(fp)
    ee60:	000ed0c0 	call	ed0c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ee64:	e0bff117 	ldw	r2,-60(fp)
    ee68:	10880020 	cmpeqi	r2,r2,8192
    ee6c:	10803fcc 	andi	r2,r2,255
    ee70:	00000506 	br	ee88 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ee74:	000edbc0 	call	edbc <alt_get_errno>
    ee78:	1007883a 	mov	r3,r2
    ee7c:	00801444 	movi	r2,81
    ee80:	18800015 	stw	r2,0(r3)
    return 0;
    ee84:	0005883a 	mov	r2,zero
  }
}
    ee88:	e037883a 	mov	sp,fp
    ee8c:	dfc00117 	ldw	ra,4(sp)
    ee90:	df000017 	ldw	fp,0(sp)
    ee94:	dec00204 	addi	sp,sp,8
    ee98:	f800283a 	ret

0000ee9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ee9c:	defffc04 	addi	sp,sp,-16
    eea0:	df000315 	stw	fp,12(sp)
    eea4:	df000304 	addi	fp,sp,12
    eea8:	e13ffd15 	stw	r4,-12(fp)
    eeac:	e17ffe15 	stw	r5,-8(fp)
    eeb0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    eeb4:	e0fffe17 	ldw	r3,-8(fp)
    eeb8:	e0bffd17 	ldw	r2,-12(fp)
    eebc:	18800c26 	beq	r3,r2,eef0 <alt_load_section+0x54>
  {
    while( to != end )
    eec0:	00000806 	br	eee4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    eec4:	e0bffe17 	ldw	r2,-8(fp)
    eec8:	10c00104 	addi	r3,r2,4
    eecc:	e0fffe15 	stw	r3,-8(fp)
    eed0:	e0fffd17 	ldw	r3,-12(fp)
    eed4:	19000104 	addi	r4,r3,4
    eed8:	e13ffd15 	stw	r4,-12(fp)
    eedc:	18c00017 	ldw	r3,0(r3)
    eee0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    eee4:	e0fffe17 	ldw	r3,-8(fp)
    eee8:	e0bfff17 	ldw	r2,-4(fp)
    eeec:	18bff51e 	bne	r3,r2,eec4 <__alt_data_end+0xff00eec4>
    {
      *to++ = *from++;
    }
  }
}
    eef0:	0001883a 	nop
    eef4:	e037883a 	mov	sp,fp
    eef8:	df000017 	ldw	fp,0(sp)
    eefc:	dec00104 	addi	sp,sp,4
    ef00:	f800283a 	ret

0000ef04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ef04:	defffe04 	addi	sp,sp,-8
    ef08:	dfc00115 	stw	ra,4(sp)
    ef0c:	df000015 	stw	fp,0(sp)
    ef10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ef14:	01800074 	movhi	r6,1
    ef18:	318e6a04 	addi	r6,r6,14760
    ef1c:	01400074 	movhi	r5,1
    ef20:	29476f04 	addi	r5,r5,7612
    ef24:	01000074 	movhi	r4,1
    ef28:	210e6a04 	addi	r4,r4,14760
    ef2c:	000ee9c0 	call	ee9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ef30:	01800034 	movhi	r6,0
    ef34:	31809104 	addi	r6,r6,580
    ef38:	01400034 	movhi	r5,0
    ef3c:	29400804 	addi	r5,r5,32
    ef40:	01000034 	movhi	r4,0
    ef44:	21000804 	addi	r4,r4,32
    ef48:	000ee9c0 	call	ee9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ef4c:	01800074 	movhi	r6,1
    ef50:	31876f04 	addi	r6,r6,7612
    ef54:	01400074 	movhi	r5,1
    ef58:	29458004 	addi	r5,r5,5632
    ef5c:	01000074 	movhi	r4,1
    ef60:	21058004 	addi	r4,r4,5632
    ef64:	000ee9c0 	call	ee9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ef68:	00104ec0 	call	104ec <alt_dcache_flush_all>
  alt_icache_flush_all();
    ef6c:	00106d40 	call	106d4 <alt_icache_flush_all>
}
    ef70:	0001883a 	nop
    ef74:	e037883a 	mov	sp,fp
    ef78:	dfc00117 	ldw	ra,4(sp)
    ef7c:	df000017 	ldw	fp,0(sp)
    ef80:	dec00204 	addi	sp,sp,8
    ef84:	f800283a 	ret

0000ef88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef88:	defffe04 	addi	sp,sp,-8
    ef8c:	dfc00115 	stw	ra,4(sp)
    ef90:	df000015 	stw	fp,0(sp)
    ef94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef98:	d0a00b17 	ldw	r2,-32724(gp)
    ef9c:	10000326 	beq	r2,zero,efac <alt_get_errno+0x24>
    efa0:	d0a00b17 	ldw	r2,-32724(gp)
    efa4:	103ee83a 	callr	r2
    efa8:	00000106 	br	efb0 <alt_get_errno+0x28>
    efac:	d0a72304 	addi	r2,gp,-25460
}
    efb0:	e037883a 	mov	sp,fp
    efb4:	dfc00117 	ldw	ra,4(sp)
    efb8:	df000017 	ldw	fp,0(sp)
    efbc:	dec00204 	addi	sp,sp,8
    efc0:	f800283a 	ret

0000efc4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    efc4:	defff904 	addi	sp,sp,-28
    efc8:	dfc00615 	stw	ra,24(sp)
    efcc:	df000515 	stw	fp,20(sp)
    efd0:	df000504 	addi	fp,sp,20
    efd4:	e13ffd15 	stw	r4,-12(fp)
    efd8:	e17ffe15 	stw	r5,-8(fp)
    efdc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    efe0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    efe4:	e0bffd17 	ldw	r2,-12(fp)
    efe8:	10000616 	blt	r2,zero,f004 <lseek+0x40>
    efec:	e0bffd17 	ldw	r2,-12(fp)
    eff0:	10c00324 	muli	r3,r2,12
    eff4:	00800074 	movhi	r2,1
    eff8:	1089e204 	addi	r2,r2,10120
    effc:	1885883a 	add	r2,r3,r2
    f000:	00000106 	br	f008 <lseek+0x44>
    f004:	0005883a 	mov	r2,zero
    f008:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f00c:	e0bffc17 	ldw	r2,-16(fp)
    f010:	10001026 	beq	r2,zero,f054 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f014:	e0bffc17 	ldw	r2,-16(fp)
    f018:	10800017 	ldw	r2,0(r2)
    f01c:	10800717 	ldw	r2,28(r2)
    f020:	10000926 	beq	r2,zero,f048 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f024:	e0bffc17 	ldw	r2,-16(fp)
    f028:	10800017 	ldw	r2,0(r2)
    f02c:	10800717 	ldw	r2,28(r2)
    f030:	e1bfff17 	ldw	r6,-4(fp)
    f034:	e17ffe17 	ldw	r5,-8(fp)
    f038:	e13ffc17 	ldw	r4,-16(fp)
    f03c:	103ee83a 	callr	r2
    f040:	e0bffb15 	stw	r2,-20(fp)
    f044:	00000506 	br	f05c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f048:	00bfde84 	movi	r2,-134
    f04c:	e0bffb15 	stw	r2,-20(fp)
    f050:	00000206 	br	f05c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f054:	00bfebc4 	movi	r2,-81
    f058:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f05c:	e0bffb17 	ldw	r2,-20(fp)
    f060:	1000070e 	bge	r2,zero,f080 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f064:	000ef880 	call	ef88 <alt_get_errno>
    f068:	1007883a 	mov	r3,r2
    f06c:	e0bffb17 	ldw	r2,-20(fp)
    f070:	0085c83a 	sub	r2,zero,r2
    f074:	18800015 	stw	r2,0(r3)
    rc = -1;
    f078:	00bfffc4 	movi	r2,-1
    f07c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f080:	e0bffb17 	ldw	r2,-20(fp)
}
    f084:	e037883a 	mov	sp,fp
    f088:	dfc00117 	ldw	ra,4(sp)
    f08c:	df000017 	ldw	fp,0(sp)
    f090:	dec00204 	addi	sp,sp,8
    f094:	f800283a 	ret

0000f098 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f098:	defffd04 	addi	sp,sp,-12
    f09c:	dfc00215 	stw	ra,8(sp)
    f0a0:	df000115 	stw	fp,4(sp)
    f0a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f0a8:	0009883a 	mov	r4,zero
    f0ac:	000f5400 	call	f540 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f0b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f0b4:	000f5780 	call	f578 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f0b8:	01800074 	movhi	r6,1
    f0bc:	31876704 	addi	r6,r6,7580
    f0c0:	01400074 	movhi	r5,1
    f0c4:	29476704 	addi	r5,r5,7580
    f0c8:	01000074 	movhi	r4,1
    f0cc:	21076704 	addi	r4,r4,7580
    f0d0:	0010a6c0 	call	10a6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f0d4:	00106140 	call	10614 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f0d8:	01000074 	movhi	r4,1
    f0dc:	21019d04 	addi	r4,r4,1652
    f0e0:	001126c0 	call	1126c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f0e4:	d0a72717 	ldw	r2,-25444(gp)
    f0e8:	d0e72817 	ldw	r3,-25440(gp)
    f0ec:	d1272917 	ldw	r4,-25436(gp)
    f0f0:	200d883a 	mov	r6,r4
    f0f4:	180b883a 	mov	r5,r3
    f0f8:	1009883a 	mov	r4,r2
    f0fc:	0000f900 	call	f90 <main>
    f100:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f104:	01000044 	movi	r4,1
    f108:	000ebd40 	call	ebd4 <close>
  exit (result);
    f10c:	e13fff17 	ldw	r4,-4(fp)
    f110:	00112800 	call	11280 <exit>

0000f114 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f114:	defffe04 	addi	sp,sp,-8
    f118:	df000115 	stw	fp,4(sp)
    f11c:	df000104 	addi	fp,sp,4
    f120:	e13fff15 	stw	r4,-4(fp)
}
    f124:	0001883a 	nop
    f128:	e037883a 	mov	sp,fp
    f12c:	df000017 	ldw	fp,0(sp)
    f130:	dec00104 	addi	sp,sp,4
    f134:	f800283a 	ret

0000f138 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f138:	defffe04 	addi	sp,sp,-8
    f13c:	df000115 	stw	fp,4(sp)
    f140:	df000104 	addi	fp,sp,4
    f144:	e13fff15 	stw	r4,-4(fp)
}
    f148:	0001883a 	nop
    f14c:	e037883a 	mov	sp,fp
    f150:	df000017 	ldw	fp,0(sp)
    f154:	dec00104 	addi	sp,sp,4
    f158:	f800283a 	ret

0000f15c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f15c:	defffe04 	addi	sp,sp,-8
    f160:	dfc00115 	stw	ra,4(sp)
    f164:	df000015 	stw	fp,0(sp)
    f168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f16c:	d0a00b17 	ldw	r2,-32724(gp)
    f170:	10000326 	beq	r2,zero,f180 <alt_get_errno+0x24>
    f174:	d0a00b17 	ldw	r2,-32724(gp)
    f178:	103ee83a 	callr	r2
    f17c:	00000106 	br	f184 <alt_get_errno+0x28>
    f180:	d0a72304 	addi	r2,gp,-25460
}
    f184:	e037883a 	mov	sp,fp
    f188:	dfc00117 	ldw	ra,4(sp)
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00204 	addi	sp,sp,8
    f194:	f800283a 	ret

0000f198 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f198:	defff904 	addi	sp,sp,-28
    f19c:	dfc00615 	stw	ra,24(sp)
    f1a0:	df000515 	stw	fp,20(sp)
    f1a4:	df000504 	addi	fp,sp,20
    f1a8:	e13ffd15 	stw	r4,-12(fp)
    f1ac:	e17ffe15 	stw	r5,-8(fp)
    f1b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f1b4:	e0bffd17 	ldw	r2,-12(fp)
    f1b8:	10000616 	blt	r2,zero,f1d4 <read+0x3c>
    f1bc:	e0bffd17 	ldw	r2,-12(fp)
    f1c0:	10c00324 	muli	r3,r2,12
    f1c4:	00800074 	movhi	r2,1
    f1c8:	1089e204 	addi	r2,r2,10120
    f1cc:	1885883a 	add	r2,r3,r2
    f1d0:	00000106 	br	f1d8 <read+0x40>
    f1d4:	0005883a 	mov	r2,zero
    f1d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f1dc:	e0bffb17 	ldw	r2,-20(fp)
    f1e0:	10002226 	beq	r2,zero,f26c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f1e4:	e0bffb17 	ldw	r2,-20(fp)
    f1e8:	10800217 	ldw	r2,8(r2)
    f1ec:	108000cc 	andi	r2,r2,3
    f1f0:	10800060 	cmpeqi	r2,r2,1
    f1f4:	1000181e 	bne	r2,zero,f258 <read+0xc0>
        (fd->dev->read))
    f1f8:	e0bffb17 	ldw	r2,-20(fp)
    f1fc:	10800017 	ldw	r2,0(r2)
    f200:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f204:	10001426 	beq	r2,zero,f258 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f208:	e0bffb17 	ldw	r2,-20(fp)
    f20c:	10800017 	ldw	r2,0(r2)
    f210:	10800517 	ldw	r2,20(r2)
    f214:	e0ffff17 	ldw	r3,-4(fp)
    f218:	180d883a 	mov	r6,r3
    f21c:	e17ffe17 	ldw	r5,-8(fp)
    f220:	e13ffb17 	ldw	r4,-20(fp)
    f224:	103ee83a 	callr	r2
    f228:	e0bffc15 	stw	r2,-16(fp)
    f22c:	e0bffc17 	ldw	r2,-16(fp)
    f230:	1000070e 	bge	r2,zero,f250 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f234:	000f15c0 	call	f15c <alt_get_errno>
    f238:	1007883a 	mov	r3,r2
    f23c:	e0bffc17 	ldw	r2,-16(fp)
    f240:	0085c83a 	sub	r2,zero,r2
    f244:	18800015 	stw	r2,0(r3)
          return -1;
    f248:	00bfffc4 	movi	r2,-1
    f24c:	00000c06 	br	f280 <read+0xe8>
        }
        return rval;
    f250:	e0bffc17 	ldw	r2,-16(fp)
    f254:	00000a06 	br	f280 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f258:	000f15c0 	call	f15c <alt_get_errno>
    f25c:	1007883a 	mov	r3,r2
    f260:	00800344 	movi	r2,13
    f264:	18800015 	stw	r2,0(r3)
    f268:	00000406 	br	f27c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f26c:	000f15c0 	call	f15c <alt_get_errno>
    f270:	1007883a 	mov	r3,r2
    f274:	00801444 	movi	r2,81
    f278:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f27c:	00bfffc4 	movi	r2,-1
}
    f280:	e037883a 	mov	sp,fp
    f284:	dfc00117 	ldw	ra,4(sp)
    f288:	df000017 	ldw	fp,0(sp)
    f28c:	dec00204 	addi	sp,sp,8
    f290:	f800283a 	ret

0000f294 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f294:	defffe04 	addi	sp,sp,-8
    f298:	df000115 	stw	fp,4(sp)
    f29c:	df000104 	addi	fp,sp,4
    f2a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f2a4:	e0bfff17 	ldw	r2,-4(fp)
    f2a8:	108000d0 	cmplti	r2,r2,3
    f2ac:	10000d1e 	bne	r2,zero,f2e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f2b0:	00800074 	movhi	r2,1
    f2b4:	1089e204 	addi	r2,r2,10120
    f2b8:	e0ffff17 	ldw	r3,-4(fp)
    f2bc:	18c00324 	muli	r3,r3,12
    f2c0:	10c5883a 	add	r2,r2,r3
    f2c4:	10800204 	addi	r2,r2,8
    f2c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f2cc:	00800074 	movhi	r2,1
    f2d0:	1089e204 	addi	r2,r2,10120
    f2d4:	e0ffff17 	ldw	r3,-4(fp)
    f2d8:	18c00324 	muli	r3,r3,12
    f2dc:	10c5883a 	add	r2,r2,r3
    f2e0:	10000015 	stw	zero,0(r2)
  }
}
    f2e4:	0001883a 	nop
    f2e8:	e037883a 	mov	sp,fp
    f2ec:	df000017 	ldw	fp,0(sp)
    f2f0:	dec00104 	addi	sp,sp,4
    f2f4:	f800283a 	ret

0000f2f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f2f8:	defff904 	addi	sp,sp,-28
    f2fc:	df000615 	stw	fp,24(sp)
    f300:	df000604 	addi	fp,sp,24
    f304:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f308:	0005303a 	rdctl	r2,status
    f30c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f310:	e0fffe17 	ldw	r3,-8(fp)
    f314:	00bfff84 	movi	r2,-2
    f318:	1884703a 	and	r2,r3,r2
    f31c:	1001703a 	wrctl	status,r2
  
  return context;
    f320:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f324:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f328:	d0a00c17 	ldw	r2,-32720(gp)
    f32c:	10c000c4 	addi	r3,r2,3
    f330:	00bfff04 	movi	r2,-4
    f334:	1884703a 	and	r2,r3,r2
    f338:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f33c:	d0e00c17 	ldw	r3,-32720(gp)
    f340:	e0bfff17 	ldw	r2,-4(fp)
    f344:	1887883a 	add	r3,r3,r2
    f348:	00804034 	movhi	r2,256
    f34c:	10800004 	addi	r2,r2,0
    f350:	10c0062e 	bgeu	r2,r3,f36c <sbrk+0x74>
    f354:	e0bffb17 	ldw	r2,-20(fp)
    f358:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f35c:	e0bffa17 	ldw	r2,-24(fp)
    f360:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f364:	00bfffc4 	movi	r2,-1
    f368:	00000b06 	br	f398 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f36c:	d0a00c17 	ldw	r2,-32720(gp)
    f370:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f374:	d0e00c17 	ldw	r3,-32720(gp)
    f378:	e0bfff17 	ldw	r2,-4(fp)
    f37c:	1885883a 	add	r2,r3,r2
    f380:	d0a00c15 	stw	r2,-32720(gp)
    f384:	e0bffb17 	ldw	r2,-20(fp)
    f388:	e0bffc15 	stw	r2,-16(fp)
    f38c:	e0bffc17 	ldw	r2,-16(fp)
    f390:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f394:	e0bffd17 	ldw	r2,-12(fp)
} 
    f398:	e037883a 	mov	sp,fp
    f39c:	df000017 	ldw	fp,0(sp)
    f3a0:	dec00104 	addi	sp,sp,4
    f3a4:	f800283a 	ret

0000f3a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f3a8:	defffd04 	addi	sp,sp,-12
    f3ac:	dfc00215 	stw	ra,8(sp)
    f3b0:	df000115 	stw	fp,4(sp)
    f3b4:	df000104 	addi	fp,sp,4
    f3b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f3bc:	e13fff17 	ldw	r4,-4(fp)
    f3c0:	00103940 	call	10394 <alt_busy_sleep>
}
    f3c4:	e037883a 	mov	sp,fp
    f3c8:	dfc00117 	ldw	ra,4(sp)
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00204 	addi	sp,sp,8
    f3d4:	f800283a 	ret

0000f3d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3d8:	defffe04 	addi	sp,sp,-8
    f3dc:	dfc00115 	stw	ra,4(sp)
    f3e0:	df000015 	stw	fp,0(sp)
    f3e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3e8:	d0a00b17 	ldw	r2,-32724(gp)
    f3ec:	10000326 	beq	r2,zero,f3fc <alt_get_errno+0x24>
    f3f0:	d0a00b17 	ldw	r2,-32724(gp)
    f3f4:	103ee83a 	callr	r2
    f3f8:	00000106 	br	f400 <alt_get_errno+0x28>
    f3fc:	d0a72304 	addi	r2,gp,-25460
}
    f400:	e037883a 	mov	sp,fp
    f404:	dfc00117 	ldw	ra,4(sp)
    f408:	df000017 	ldw	fp,0(sp)
    f40c:	dec00204 	addi	sp,sp,8
    f410:	f800283a 	ret

0000f414 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f414:	defff904 	addi	sp,sp,-28
    f418:	dfc00615 	stw	ra,24(sp)
    f41c:	df000515 	stw	fp,20(sp)
    f420:	df000504 	addi	fp,sp,20
    f424:	e13ffd15 	stw	r4,-12(fp)
    f428:	e17ffe15 	stw	r5,-8(fp)
    f42c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f430:	e0bffd17 	ldw	r2,-12(fp)
    f434:	10000616 	blt	r2,zero,f450 <write+0x3c>
    f438:	e0bffd17 	ldw	r2,-12(fp)
    f43c:	10c00324 	muli	r3,r2,12
    f440:	00800074 	movhi	r2,1
    f444:	1089e204 	addi	r2,r2,10120
    f448:	1885883a 	add	r2,r3,r2
    f44c:	00000106 	br	f454 <write+0x40>
    f450:	0005883a 	mov	r2,zero
    f454:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f458:	e0bffb17 	ldw	r2,-20(fp)
    f45c:	10002126 	beq	r2,zero,f4e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f460:	e0bffb17 	ldw	r2,-20(fp)
    f464:	10800217 	ldw	r2,8(r2)
    f468:	108000cc 	andi	r2,r2,3
    f46c:	10001826 	beq	r2,zero,f4d0 <write+0xbc>
    f470:	e0bffb17 	ldw	r2,-20(fp)
    f474:	10800017 	ldw	r2,0(r2)
    f478:	10800617 	ldw	r2,24(r2)
    f47c:	10001426 	beq	r2,zero,f4d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f480:	e0bffb17 	ldw	r2,-20(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	10800617 	ldw	r2,24(r2)
    f48c:	e0ffff17 	ldw	r3,-4(fp)
    f490:	180d883a 	mov	r6,r3
    f494:	e17ffe17 	ldw	r5,-8(fp)
    f498:	e13ffb17 	ldw	r4,-20(fp)
    f49c:	103ee83a 	callr	r2
    f4a0:	e0bffc15 	stw	r2,-16(fp)
    f4a4:	e0bffc17 	ldw	r2,-16(fp)
    f4a8:	1000070e 	bge	r2,zero,f4c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f4ac:	000f3d80 	call	f3d8 <alt_get_errno>
    f4b0:	1007883a 	mov	r3,r2
    f4b4:	e0bffc17 	ldw	r2,-16(fp)
    f4b8:	0085c83a 	sub	r2,zero,r2
    f4bc:	18800015 	stw	r2,0(r3)
        return -1;
    f4c0:	00bfffc4 	movi	r2,-1
    f4c4:	00000c06 	br	f4f8 <write+0xe4>
      }
      return rval;
    f4c8:	e0bffc17 	ldw	r2,-16(fp)
    f4cc:	00000a06 	br	f4f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f4d0:	000f3d80 	call	f3d8 <alt_get_errno>
    f4d4:	1007883a 	mov	r3,r2
    f4d8:	00800344 	movi	r2,13
    f4dc:	18800015 	stw	r2,0(r3)
    f4e0:	00000406 	br	f4f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f4e4:	000f3d80 	call	f3d8 <alt_get_errno>
    f4e8:	1007883a 	mov	r3,r2
    f4ec:	00801444 	movi	r2,81
    f4f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f4f4:	00bfffc4 	movi	r2,-1
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f50c:	defffd04 	addi	sp,sp,-12
    f510:	dfc00215 	stw	ra,8(sp)
    f514:	df000115 	stw	fp,4(sp)
    f518:	df000104 	addi	fp,sp,4
    f51c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f520:	d1600804 	addi	r5,gp,-32736
    f524:	e13fff17 	ldw	r4,-4(fp)
    f528:	00105700 	call	10570 <alt_dev_llist_insert>
}
    f52c:	e037883a 	mov	sp,fp
    f530:	dfc00117 	ldw	ra,4(sp)
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00204 	addi	sp,sp,8
    f53c:	f800283a 	ret

0000f540 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f540:	defffd04 	addi	sp,sp,-12
    f544:	dfc00215 	stw	ra,8(sp)
    f548:	df000115 	stw	fp,4(sp)
    f54c:	df000104 	addi	fp,sp,4
    f550:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f554:	0010ee00 	call	10ee0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f558:	00800044 	movi	r2,1
    f55c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f560:	0001883a 	nop
    f564:	e037883a 	mov	sp,fp
    f568:	dfc00117 	ldw	ra,4(sp)
    f56c:	df000017 	ldw	fp,0(sp)
    f570:	dec00204 	addi	sp,sp,8
    f574:	f800283a 	ret

0000f578 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f578:	defffe04 	addi	sp,sp,-8
    f57c:	dfc00115 	stw	ra,4(sp)
    f580:	df000015 	stw	fp,0(sp)
    f584:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f588:	00804034 	movhi	r2,256
    f58c:	10840004 	addi	r2,r2,4096
    f590:	d0a72a15 	stw	r2,-25432(gp)
    f594:	0080bef4 	movhi	r2,763
    f598:	10bc2004 	addi	r2,r2,-3968
    f59c:	d0a72b15 	stw	r2,-25428(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f5a0:	01c0fa04 	movi	r7,1000
    f5a4:	01800104 	movi	r6,4
    f5a8:	000b883a 	mov	r5,zero
    f5ac:	01004034 	movhi	r4,256
    f5b0:	21040804 	addi	r4,r4,4128
    f5b4:	00100d40 	call	100d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f5b8:	000d883a 	mov	r6,zero
    f5bc:	000b883a 	mov	r5,zero
    f5c0:	01000074 	movhi	r4,1
    f5c4:	210a4c04 	addi	r4,r4,10544
    f5c8:	000f7580 	call	f758 <altera_avalon_jtag_uart_init>
    f5cc:	01000074 	movhi	r4,1
    f5d0:	210a4204 	addi	r4,r4,10504
    f5d4:	000f50c0 	call	f50c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f5d8:	0001883a 	nop
}
    f5dc:	0001883a 	nop
    f5e0:	e037883a 	mov	sp,fp
    f5e4:	dfc00117 	ldw	ra,4(sp)
    f5e8:	df000017 	ldw	fp,0(sp)
    f5ec:	dec00204 	addi	sp,sp,8
    f5f0:	f800283a 	ret

0000f5f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f5f4:	defffa04 	addi	sp,sp,-24
    f5f8:	dfc00515 	stw	ra,20(sp)
    f5fc:	df000415 	stw	fp,16(sp)
    f600:	df000404 	addi	fp,sp,16
    f604:	e13ffd15 	stw	r4,-12(fp)
    f608:	e17ffe15 	stw	r5,-8(fp)
    f60c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f610:	e0bffd17 	ldw	r2,-12(fp)
    f614:	10800017 	ldw	r2,0(r2)
    f618:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f61c:	e0bffc17 	ldw	r2,-16(fp)
    f620:	10c00a04 	addi	r3,r2,40
    f624:	e0bffd17 	ldw	r2,-12(fp)
    f628:	10800217 	ldw	r2,8(r2)
    f62c:	100f883a 	mov	r7,r2
    f630:	e1bfff17 	ldw	r6,-4(fp)
    f634:	e17ffe17 	ldw	r5,-8(fp)
    f638:	1809883a 	mov	r4,r3
    f63c:	000fc1c0 	call	fc1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f640:	e037883a 	mov	sp,fp
    f644:	dfc00117 	ldw	ra,4(sp)
    f648:	df000017 	ldw	fp,0(sp)
    f64c:	dec00204 	addi	sp,sp,8
    f650:	f800283a 	ret

0000f654 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f654:	defffa04 	addi	sp,sp,-24
    f658:	dfc00515 	stw	ra,20(sp)
    f65c:	df000415 	stw	fp,16(sp)
    f660:	df000404 	addi	fp,sp,16
    f664:	e13ffd15 	stw	r4,-12(fp)
    f668:	e17ffe15 	stw	r5,-8(fp)
    f66c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f670:	e0bffd17 	ldw	r2,-12(fp)
    f674:	10800017 	ldw	r2,0(r2)
    f678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f67c:	e0bffc17 	ldw	r2,-16(fp)
    f680:	10c00a04 	addi	r3,r2,40
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	10800217 	ldw	r2,8(r2)
    f68c:	100f883a 	mov	r7,r2
    f690:	e1bfff17 	ldw	r6,-4(fp)
    f694:	e17ffe17 	ldw	r5,-8(fp)
    f698:	1809883a 	mov	r4,r3
    f69c:	000fe380 	call	fe38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f6a0:	e037883a 	mov	sp,fp
    f6a4:	dfc00117 	ldw	ra,4(sp)
    f6a8:	df000017 	ldw	fp,0(sp)
    f6ac:	dec00204 	addi	sp,sp,8
    f6b0:	f800283a 	ret

0000f6b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f6b4:	defffc04 	addi	sp,sp,-16
    f6b8:	dfc00315 	stw	ra,12(sp)
    f6bc:	df000215 	stw	fp,8(sp)
    f6c0:	df000204 	addi	fp,sp,8
    f6c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f6c8:	e0bfff17 	ldw	r2,-4(fp)
    f6cc:	10800017 	ldw	r2,0(r2)
    f6d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f6d4:	e0bffe17 	ldw	r2,-8(fp)
    f6d8:	10c00a04 	addi	r3,r2,40
    f6dc:	e0bfff17 	ldw	r2,-4(fp)
    f6e0:	10800217 	ldw	r2,8(r2)
    f6e4:	100b883a 	mov	r5,r2
    f6e8:	1809883a 	mov	r4,r3
    f6ec:	000fac40 	call	fac4 <altera_avalon_jtag_uart_close>
}
    f6f0:	e037883a 	mov	sp,fp
    f6f4:	dfc00117 	ldw	ra,4(sp)
    f6f8:	df000017 	ldw	fp,0(sp)
    f6fc:	dec00204 	addi	sp,sp,8
    f700:	f800283a 	ret

0000f704 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f704:	defffa04 	addi	sp,sp,-24
    f708:	dfc00515 	stw	ra,20(sp)
    f70c:	df000415 	stw	fp,16(sp)
    f710:	df000404 	addi	fp,sp,16
    f714:	e13ffd15 	stw	r4,-12(fp)
    f718:	e17ffe15 	stw	r5,-8(fp)
    f71c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f720:	e0bffd17 	ldw	r2,-12(fp)
    f724:	10800017 	ldw	r2,0(r2)
    f728:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f72c:	e0bffc17 	ldw	r2,-16(fp)
    f730:	10800a04 	addi	r2,r2,40
    f734:	e1bfff17 	ldw	r6,-4(fp)
    f738:	e17ffe17 	ldw	r5,-8(fp)
    f73c:	1009883a 	mov	r4,r2
    f740:	000fb2c0 	call	fb2c <altera_avalon_jtag_uart_ioctl>
}
    f744:	e037883a 	mov	sp,fp
    f748:	dfc00117 	ldw	ra,4(sp)
    f74c:	df000017 	ldw	fp,0(sp)
    f750:	dec00204 	addi	sp,sp,8
    f754:	f800283a 	ret

0000f758 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f758:	defffa04 	addi	sp,sp,-24
    f75c:	dfc00515 	stw	ra,20(sp)
    f760:	df000415 	stw	fp,16(sp)
    f764:	df000404 	addi	fp,sp,16
    f768:	e13ffd15 	stw	r4,-12(fp)
    f76c:	e17ffe15 	stw	r5,-8(fp)
    f770:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	00c00044 	movi	r3,1
    f77c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f780:	e0bffd17 	ldw	r2,-12(fp)
    f784:	10800017 	ldw	r2,0(r2)
    f788:	10800104 	addi	r2,r2,4
    f78c:	1007883a 	mov	r3,r2
    f790:	e0bffd17 	ldw	r2,-12(fp)
    f794:	10800817 	ldw	r2,32(r2)
    f798:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f79c:	e0bffe17 	ldw	r2,-8(fp)
    f7a0:	e0ffff17 	ldw	r3,-4(fp)
    f7a4:	d8000015 	stw	zero,0(sp)
    f7a8:	e1fffd17 	ldw	r7,-12(fp)
    f7ac:	01800074 	movhi	r6,1
    f7b0:	31be0604 	addi	r6,r6,-2024
    f7b4:	180b883a 	mov	r5,r3
    f7b8:	1009883a 	mov	r4,r2
    f7bc:	00107080 	call	10708 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f7c0:	e0bffd17 	ldw	r2,-12(fp)
    f7c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f7c8:	e0bffd17 	ldw	r2,-12(fp)
    f7cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f7d0:	d0e72d17 	ldw	r3,-25420(gp)
    f7d4:	e1fffd17 	ldw	r7,-12(fp)
    f7d8:	01800074 	movhi	r6,1
    f7dc:	31be8904 	addi	r6,r6,-1500
    f7e0:	180b883a 	mov	r5,r3
    f7e4:	1009883a 	mov	r4,r2
    f7e8:	00102680 	call	10268 <alt_alarm_start>
    f7ec:	1000040e 	bge	r2,zero,f800 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f7f0:	e0fffd17 	ldw	r3,-12(fp)
    f7f4:	00a00034 	movhi	r2,32768
    f7f8:	10bfffc4 	addi	r2,r2,-1
    f7fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f800:	0001883a 	nop
    f804:	e037883a 	mov	sp,fp
    f808:	dfc00117 	ldw	ra,4(sp)
    f80c:	df000017 	ldw	fp,0(sp)
    f810:	dec00204 	addi	sp,sp,8
    f814:	f800283a 	ret

0000f818 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f818:	defff804 	addi	sp,sp,-32
    f81c:	df000715 	stw	fp,28(sp)
    f820:	df000704 	addi	fp,sp,28
    f824:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f828:	e0bfff17 	ldw	r2,-4(fp)
    f82c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f830:	e0bffb17 	ldw	r2,-20(fp)
    f834:	10800017 	ldw	r2,0(r2)
    f838:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f83c:	e0bffc17 	ldw	r2,-16(fp)
    f840:	10800104 	addi	r2,r2,4
    f844:	10800037 	ldwio	r2,0(r2)
    f848:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	1080c00c 	andi	r2,r2,768
    f854:	10006d26 	beq	r2,zero,fa0c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f858:	e0bffd17 	ldw	r2,-12(fp)
    f85c:	1080400c 	andi	r2,r2,256
    f860:	10003526 	beq	r2,zero,f938 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f864:	00800074 	movhi	r2,1
    f868:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f86c:	e0bffb17 	ldw	r2,-20(fp)
    f870:	10800a17 	ldw	r2,40(r2)
    f874:	10800044 	addi	r2,r2,1
    f878:	1081ffcc 	andi	r2,r2,2047
    f87c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f880:	e0bffb17 	ldw	r2,-20(fp)
    f884:	10c00b17 	ldw	r3,44(r2)
    f888:	e0bffe17 	ldw	r2,-8(fp)
    f88c:	18801526 	beq	r3,r2,f8e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f890:	e0bffc17 	ldw	r2,-16(fp)
    f894:	10800037 	ldwio	r2,0(r2)
    f898:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f89c:	e0bff917 	ldw	r2,-28(fp)
    f8a0:	10a0000c 	andi	r2,r2,32768
    f8a4:	10001126 	beq	r2,zero,f8ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f8a8:	e0bffb17 	ldw	r2,-20(fp)
    f8ac:	10800a17 	ldw	r2,40(r2)
    f8b0:	e0fff917 	ldw	r3,-28(fp)
    f8b4:	1809883a 	mov	r4,r3
    f8b8:	e0fffb17 	ldw	r3,-20(fp)
    f8bc:	1885883a 	add	r2,r3,r2
    f8c0:	10800e04 	addi	r2,r2,56
    f8c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8c8:	e0bffb17 	ldw	r2,-20(fp)
    f8cc:	10800a17 	ldw	r2,40(r2)
    f8d0:	10800044 	addi	r2,r2,1
    f8d4:	10c1ffcc 	andi	r3,r2,2047
    f8d8:	e0bffb17 	ldw	r2,-20(fp)
    f8dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f8e0:	003fe206 	br	f86c <__alt_data_end+0xff00f86c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f8e4:	0001883a 	nop
    f8e8:	00000106 	br	f8f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f8ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f8f0:	e0bff917 	ldw	r2,-28(fp)
    f8f4:	10bfffec 	andhi	r2,r2,65535
    f8f8:	10000f26 	beq	r2,zero,f938 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f8fc:	e0bffb17 	ldw	r2,-20(fp)
    f900:	10c00817 	ldw	r3,32(r2)
    f904:	00bfff84 	movi	r2,-2
    f908:	1886703a 	and	r3,r3,r2
    f90c:	e0bffb17 	ldw	r2,-20(fp)
    f910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f914:	e0bffc17 	ldw	r2,-16(fp)
    f918:	10800104 	addi	r2,r2,4
    f91c:	1007883a 	mov	r3,r2
    f920:	e0bffb17 	ldw	r2,-20(fp)
    f924:	10800817 	ldw	r2,32(r2)
    f928:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800104 	addi	r2,r2,4
    f934:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f938:	e0bffd17 	ldw	r2,-12(fp)
    f93c:	1080800c 	andi	r2,r2,512
    f940:	103fbe26 	beq	r2,zero,f83c <__alt_data_end+0xff00f83c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f944:	e0bffd17 	ldw	r2,-12(fp)
    f948:	1004d43a 	srli	r2,r2,16
    f94c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f950:	00001406 	br	f9a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f954:	e0bffc17 	ldw	r2,-16(fp)
    f958:	e0fffb17 	ldw	r3,-20(fp)
    f95c:	18c00d17 	ldw	r3,52(r3)
    f960:	e13ffb17 	ldw	r4,-20(fp)
    f964:	20c7883a 	add	r3,r4,r3
    f968:	18c20e04 	addi	r3,r3,2104
    f96c:	18c00003 	ldbu	r3,0(r3)
    f970:	18c03fcc 	andi	r3,r3,255
    f974:	18c0201c 	xori	r3,r3,128
    f978:	18ffe004 	addi	r3,r3,-128
    f97c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f980:	e0bffb17 	ldw	r2,-20(fp)
    f984:	10800d17 	ldw	r2,52(r2)
    f988:	10800044 	addi	r2,r2,1
    f98c:	10c1ffcc 	andi	r3,r2,2047
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f998:	e0bffa17 	ldw	r2,-24(fp)
    f99c:	10bfffc4 	addi	r2,r2,-1
    f9a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f9a4:	e0bffa17 	ldw	r2,-24(fp)
    f9a8:	10000526 	beq	r2,zero,f9c0 <altera_avalon_jtag_uart_irq+0x1a8>
    f9ac:	e0bffb17 	ldw	r2,-20(fp)
    f9b0:	10c00d17 	ldw	r3,52(r2)
    f9b4:	e0bffb17 	ldw	r2,-20(fp)
    f9b8:	10800c17 	ldw	r2,48(r2)
    f9bc:	18bfe51e 	bne	r3,r2,f954 <__alt_data_end+0xff00f954>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f9c0:	e0bffa17 	ldw	r2,-24(fp)
    f9c4:	103f9d26 	beq	r2,zero,f83c <__alt_data_end+0xff00f83c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f9c8:	e0bffb17 	ldw	r2,-20(fp)
    f9cc:	10c00817 	ldw	r3,32(r2)
    f9d0:	00bfff44 	movi	r2,-3
    f9d4:	1886703a 	and	r3,r3,r2
    f9d8:	e0bffb17 	ldw	r2,-20(fp)
    f9dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f9e0:	e0bffb17 	ldw	r2,-20(fp)
    f9e4:	10800017 	ldw	r2,0(r2)
    f9e8:	10800104 	addi	r2,r2,4
    f9ec:	1007883a 	mov	r3,r2
    f9f0:	e0bffb17 	ldw	r2,-20(fp)
    f9f4:	10800817 	ldw	r2,32(r2)
    f9f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9fc:	e0bffc17 	ldw	r2,-16(fp)
    fa00:	10800104 	addi	r2,r2,4
    fa04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fa08:	003f8c06 	br	f83c <__alt_data_end+0xff00f83c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fa0c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fa10:	0001883a 	nop
    fa14:	e037883a 	mov	sp,fp
    fa18:	df000017 	ldw	fp,0(sp)
    fa1c:	dec00104 	addi	sp,sp,4
    fa20:	f800283a 	ret

0000fa24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fa24:	defff804 	addi	sp,sp,-32
    fa28:	df000715 	stw	fp,28(sp)
    fa2c:	df000704 	addi	fp,sp,28
    fa30:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fa34:	e0bffb17 	ldw	r2,-20(fp)
    fa38:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fa3c:	e0bff917 	ldw	r2,-28(fp)
    fa40:	10800017 	ldw	r2,0(r2)
    fa44:	10800104 	addi	r2,r2,4
    fa48:	10800037 	ldwio	r2,0(r2)
    fa4c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fa50:	e0bffa17 	ldw	r2,-24(fp)
    fa54:	1081000c 	andi	r2,r2,1024
    fa58:	10000b26 	beq	r2,zero,fa88 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fa5c:	e0bff917 	ldw	r2,-28(fp)
    fa60:	10800017 	ldw	r2,0(r2)
    fa64:	10800104 	addi	r2,r2,4
    fa68:	1007883a 	mov	r3,r2
    fa6c:	e0bff917 	ldw	r2,-28(fp)
    fa70:	10800817 	ldw	r2,32(r2)
    fa74:	10810014 	ori	r2,r2,1024
    fa78:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fa7c:	e0bff917 	ldw	r2,-28(fp)
    fa80:	10000915 	stw	zero,36(r2)
    fa84:	00000a06 	br	fab0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fa88:	e0bff917 	ldw	r2,-28(fp)
    fa8c:	10c00917 	ldw	r3,36(r2)
    fa90:	00a00034 	movhi	r2,32768
    fa94:	10bfff04 	addi	r2,r2,-4
    fa98:	10c00536 	bltu	r2,r3,fab0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fa9c:	e0bff917 	ldw	r2,-28(fp)
    faa0:	10800917 	ldw	r2,36(r2)
    faa4:	10c00044 	addi	r3,r2,1
    faa8:	e0bff917 	ldw	r2,-28(fp)
    faac:	10c00915 	stw	r3,36(r2)
    fab0:	d0a72d17 	ldw	r2,-25420(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fab4:	e037883a 	mov	sp,fp
    fab8:	df000017 	ldw	fp,0(sp)
    fabc:	dec00104 	addi	sp,sp,4
    fac0:	f800283a 	ret

0000fac4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fac4:	defffd04 	addi	sp,sp,-12
    fac8:	df000215 	stw	fp,8(sp)
    facc:	df000204 	addi	fp,sp,8
    fad0:	e13ffe15 	stw	r4,-8(fp)
    fad4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fad8:	00000506 	br	faf0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fadc:	e0bfff17 	ldw	r2,-4(fp)
    fae0:	1090000c 	andi	r2,r2,16384
    fae4:	10000226 	beq	r2,zero,faf0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fae8:	00bffd44 	movi	r2,-11
    faec:	00000b06 	br	fb1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    faf0:	e0bffe17 	ldw	r2,-8(fp)
    faf4:	10c00d17 	ldw	r3,52(r2)
    faf8:	e0bffe17 	ldw	r2,-8(fp)
    fafc:	10800c17 	ldw	r2,48(r2)
    fb00:	18800526 	beq	r3,r2,fb18 <altera_avalon_jtag_uart_close+0x54>
    fb04:	e0bffe17 	ldw	r2,-8(fp)
    fb08:	10c00917 	ldw	r3,36(r2)
    fb0c:	e0bffe17 	ldw	r2,-8(fp)
    fb10:	10800117 	ldw	r2,4(r2)
    fb14:	18bff136 	bltu	r3,r2,fadc <__alt_data_end+0xff00fadc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fb18:	0005883a 	mov	r2,zero
}
    fb1c:	e037883a 	mov	sp,fp
    fb20:	df000017 	ldw	fp,0(sp)
    fb24:	dec00104 	addi	sp,sp,4
    fb28:	f800283a 	ret

0000fb2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fb2c:	defffa04 	addi	sp,sp,-24
    fb30:	df000515 	stw	fp,20(sp)
    fb34:	df000504 	addi	fp,sp,20
    fb38:	e13ffd15 	stw	r4,-12(fp)
    fb3c:	e17ffe15 	stw	r5,-8(fp)
    fb40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fb44:	00bff9c4 	movi	r2,-25
    fb48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fb4c:	e0bffe17 	ldw	r2,-8(fp)
    fb50:	10da8060 	cmpeqi	r3,r2,27137
    fb54:	1800031e 	bne	r3,zero,fb64 <altera_avalon_jtag_uart_ioctl+0x38>
    fb58:	109a80a0 	cmpeqi	r2,r2,27138
    fb5c:	1000181e 	bne	r2,zero,fbc0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fb60:	00002906 	br	fc08 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fb64:	e0bffd17 	ldw	r2,-12(fp)
    fb68:	10c00117 	ldw	r3,4(r2)
    fb6c:	00a00034 	movhi	r2,32768
    fb70:	10bfffc4 	addi	r2,r2,-1
    fb74:	18802126 	beq	r3,r2,fbfc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fb78:	e0bfff17 	ldw	r2,-4(fp)
    fb7c:	10800017 	ldw	r2,0(r2)
    fb80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fb84:	e0bffc17 	ldw	r2,-16(fp)
    fb88:	10800090 	cmplti	r2,r2,2
    fb8c:	1000061e 	bne	r2,zero,fba8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fb90:	e0fffc17 	ldw	r3,-16(fp)
    fb94:	00a00034 	movhi	r2,32768
    fb98:	10bfffc4 	addi	r2,r2,-1
    fb9c:	18800226 	beq	r3,r2,fba8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fba0:	e0bffc17 	ldw	r2,-16(fp)
    fba4:	00000206 	br	fbb0 <altera_avalon_jtag_uart_ioctl+0x84>
    fba8:	00a00034 	movhi	r2,32768
    fbac:	10bfff84 	addi	r2,r2,-2
    fbb0:	e0fffd17 	ldw	r3,-12(fp)
    fbb4:	18800115 	stw	r2,4(r3)
      rc = 0;
    fbb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fbbc:	00000f06 	br	fbfc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fbc0:	e0bffd17 	ldw	r2,-12(fp)
    fbc4:	10c00117 	ldw	r3,4(r2)
    fbc8:	00a00034 	movhi	r2,32768
    fbcc:	10bfffc4 	addi	r2,r2,-1
    fbd0:	18800c26 	beq	r3,r2,fc04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	10c00917 	ldw	r3,36(r2)
    fbdc:	e0bffd17 	ldw	r2,-12(fp)
    fbe0:	10800117 	ldw	r2,4(r2)
    fbe4:	1885803a 	cmpltu	r2,r3,r2
    fbe8:	10c03fcc 	andi	r3,r2,255
    fbec:	e0bfff17 	ldw	r2,-4(fp)
    fbf0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fbf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fbf8:	00000206 	br	fc04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fbfc:	0001883a 	nop
    fc00:	00000106 	br	fc08 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fc04:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fc08:	e0bffb17 	ldw	r2,-20(fp)
}
    fc0c:	e037883a 	mov	sp,fp
    fc10:	df000017 	ldw	fp,0(sp)
    fc14:	dec00104 	addi	sp,sp,4
    fc18:	f800283a 	ret

0000fc1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fc1c:	defff304 	addi	sp,sp,-52
    fc20:	dfc00c15 	stw	ra,48(sp)
    fc24:	df000b15 	stw	fp,44(sp)
    fc28:	df000b04 	addi	fp,sp,44
    fc2c:	e13ffc15 	stw	r4,-16(fp)
    fc30:	e17ffd15 	stw	r5,-12(fp)
    fc34:	e1bffe15 	stw	r6,-8(fp)
    fc38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fc3c:	e0bffd17 	ldw	r2,-12(fp)
    fc40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc44:	00004706 	br	fd64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	10800a17 	ldw	r2,40(r2)
    fc50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fc54:	e0bffc17 	ldw	r2,-16(fp)
    fc58:	10800b17 	ldw	r2,44(r2)
    fc5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fc60:	e0fff717 	ldw	r3,-36(fp)
    fc64:	e0bff817 	ldw	r2,-32(fp)
    fc68:	18800536 	bltu	r3,r2,fc80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fc6c:	e0fff717 	ldw	r3,-36(fp)
    fc70:	e0bff817 	ldw	r2,-32(fp)
    fc74:	1885c83a 	sub	r2,r3,r2
    fc78:	e0bff615 	stw	r2,-40(fp)
    fc7c:	00000406 	br	fc90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fc80:	00c20004 	movi	r3,2048
    fc84:	e0bff817 	ldw	r2,-32(fp)
    fc88:	1885c83a 	sub	r2,r3,r2
    fc8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fc90:	e0bff617 	ldw	r2,-40(fp)
    fc94:	10001e26 	beq	r2,zero,fd10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fc98:	e0fffe17 	ldw	r3,-8(fp)
    fc9c:	e0bff617 	ldw	r2,-40(fp)
    fca0:	1880022e 	bgeu	r3,r2,fcac <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fca4:	e0bffe17 	ldw	r2,-8(fp)
    fca8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fcac:	e0bffc17 	ldw	r2,-16(fp)
    fcb0:	10c00e04 	addi	r3,r2,56
    fcb4:	e0bff817 	ldw	r2,-32(fp)
    fcb8:	1885883a 	add	r2,r3,r2
    fcbc:	e1bff617 	ldw	r6,-40(fp)
    fcc0:	100b883a 	mov	r5,r2
    fcc4:	e13ff517 	ldw	r4,-44(fp)
    fcc8:	00089400 	call	8940 <memcpy>
      ptr   += n;
    fccc:	e0fff517 	ldw	r3,-44(fp)
    fcd0:	e0bff617 	ldw	r2,-40(fp)
    fcd4:	1885883a 	add	r2,r3,r2
    fcd8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fcdc:	e0fffe17 	ldw	r3,-8(fp)
    fce0:	e0bff617 	ldw	r2,-40(fp)
    fce4:	1885c83a 	sub	r2,r3,r2
    fce8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fcec:	e0fff817 	ldw	r3,-32(fp)
    fcf0:	e0bff617 	ldw	r2,-40(fp)
    fcf4:	1885883a 	add	r2,r3,r2
    fcf8:	10c1ffcc 	andi	r3,r2,2047
    fcfc:	e0bffc17 	ldw	r2,-16(fp)
    fd00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fd04:	e0bffe17 	ldw	r2,-8(fp)
    fd08:	00bfcf16 	blt	zero,r2,fc48 <__alt_data_end+0xff00fc48>
    fd0c:	00000106 	br	fd14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fd10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fd14:	e0fff517 	ldw	r3,-44(fp)
    fd18:	e0bffd17 	ldw	r2,-12(fp)
    fd1c:	1880141e 	bne	r3,r2,fd70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	1090000c 	andi	r2,r2,16384
    fd28:	1000131e 	bne	r2,zero,fd78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fd2c:	0001883a 	nop
    fd30:	e0bffc17 	ldw	r2,-16(fp)
    fd34:	10c00a17 	ldw	r3,40(r2)
    fd38:	e0bff717 	ldw	r2,-36(fp)
    fd3c:	1880051e 	bne	r3,r2,fd54 <altera_avalon_jtag_uart_read+0x138>
    fd40:	e0bffc17 	ldw	r2,-16(fp)
    fd44:	10c00917 	ldw	r3,36(r2)
    fd48:	e0bffc17 	ldw	r2,-16(fp)
    fd4c:	10800117 	ldw	r2,4(r2)
    fd50:	18bff736 	bltu	r3,r2,fd30 <__alt_data_end+0xff00fd30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fd54:	e0bffc17 	ldw	r2,-16(fp)
    fd58:	10c00a17 	ldw	r3,40(r2)
    fd5c:	e0bff717 	ldw	r2,-36(fp)
    fd60:	18800726 	beq	r3,r2,fd80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fd64:	e0bffe17 	ldw	r2,-8(fp)
    fd68:	00bfb716 	blt	zero,r2,fc48 <__alt_data_end+0xff00fc48>
    fd6c:	00000506 	br	fd84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fd70:	0001883a 	nop
    fd74:	00000306 	br	fd84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fd78:	0001883a 	nop
    fd7c:	00000106 	br	fd84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fd80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fd84:	e0fff517 	ldw	r3,-44(fp)
    fd88:	e0bffd17 	ldw	r2,-12(fp)
    fd8c:	18801826 	beq	r3,r2,fdf0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd90:	0005303a 	rdctl	r2,status
    fd94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd98:	e0fffb17 	ldw	r3,-20(fp)
    fd9c:	00bfff84 	movi	r2,-2
    fda0:	1884703a 	and	r2,r3,r2
    fda4:	1001703a 	wrctl	status,r2
  
  return context;
    fda8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fdac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fdb0:	e0bffc17 	ldw	r2,-16(fp)
    fdb4:	10800817 	ldw	r2,32(r2)
    fdb8:	10c00054 	ori	r3,r2,1
    fdbc:	e0bffc17 	ldw	r2,-16(fp)
    fdc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fdc4:	e0bffc17 	ldw	r2,-16(fp)
    fdc8:	10800017 	ldw	r2,0(r2)
    fdcc:	10800104 	addi	r2,r2,4
    fdd0:	1007883a 	mov	r3,r2
    fdd4:	e0bffc17 	ldw	r2,-16(fp)
    fdd8:	10800817 	ldw	r2,32(r2)
    fddc:	18800035 	stwio	r2,0(r3)
    fde0:	e0bffa17 	ldw	r2,-24(fp)
    fde4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fde8:	e0bff917 	ldw	r2,-28(fp)
    fdec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fdf0:	e0fff517 	ldw	r3,-44(fp)
    fdf4:	e0bffd17 	ldw	r2,-12(fp)
    fdf8:	18800426 	beq	r3,r2,fe0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fdfc:	e0fff517 	ldw	r3,-44(fp)
    fe00:	e0bffd17 	ldw	r2,-12(fp)
    fe04:	1885c83a 	sub	r2,r3,r2
    fe08:	00000606 	br	fe24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fe0c:	e0bfff17 	ldw	r2,-4(fp)
    fe10:	1090000c 	andi	r2,r2,16384
    fe14:	10000226 	beq	r2,zero,fe20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fe18:	00bffd44 	movi	r2,-11
    fe1c:	00000106 	br	fe24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fe20:	00bffec4 	movi	r2,-5
}
    fe24:	e037883a 	mov	sp,fp
    fe28:	dfc00117 	ldw	ra,4(sp)
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00204 	addi	sp,sp,8
    fe34:	f800283a 	ret

0000fe38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fe38:	defff304 	addi	sp,sp,-52
    fe3c:	dfc00c15 	stw	ra,48(sp)
    fe40:	df000b15 	stw	fp,44(sp)
    fe44:	df000b04 	addi	fp,sp,44
    fe48:	e13ffc15 	stw	r4,-16(fp)
    fe4c:	e17ffd15 	stw	r5,-12(fp)
    fe50:	e1bffe15 	stw	r6,-8(fp)
    fe54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fe58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fe5c:	e0bffd17 	ldw	r2,-12(fp)
    fe60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe64:	00003706 	br	ff44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fe68:	e0bffc17 	ldw	r2,-16(fp)
    fe6c:	10800c17 	ldw	r2,48(r2)
    fe70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fe74:	e0bffc17 	ldw	r2,-16(fp)
    fe78:	10800d17 	ldw	r2,52(r2)
    fe7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fe80:	e0fff917 	ldw	r3,-28(fp)
    fe84:	e0bff517 	ldw	r2,-44(fp)
    fe88:	1880062e 	bgeu	r3,r2,fea4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fe8c:	e0fff517 	ldw	r3,-44(fp)
    fe90:	e0bff917 	ldw	r2,-28(fp)
    fe94:	1885c83a 	sub	r2,r3,r2
    fe98:	10bfffc4 	addi	r2,r2,-1
    fe9c:	e0bff615 	stw	r2,-40(fp)
    fea0:	00000b06 	br	fed0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fea4:	e0bff517 	ldw	r2,-44(fp)
    fea8:	10000526 	beq	r2,zero,fec0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    feac:	00c20004 	movi	r3,2048
    feb0:	e0bff917 	ldw	r2,-28(fp)
    feb4:	1885c83a 	sub	r2,r3,r2
    feb8:	e0bff615 	stw	r2,-40(fp)
    febc:	00000406 	br	fed0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fec0:	00c1ffc4 	movi	r3,2047
    fec4:	e0bff917 	ldw	r2,-28(fp)
    fec8:	1885c83a 	sub	r2,r3,r2
    fecc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fed0:	e0bff617 	ldw	r2,-40(fp)
    fed4:	10001e26 	beq	r2,zero,ff50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fed8:	e0fffe17 	ldw	r3,-8(fp)
    fedc:	e0bff617 	ldw	r2,-40(fp)
    fee0:	1880022e 	bgeu	r3,r2,feec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    feec:	e0bffc17 	ldw	r2,-16(fp)
    fef0:	10c20e04 	addi	r3,r2,2104
    fef4:	e0bff917 	ldw	r2,-28(fp)
    fef8:	1885883a 	add	r2,r3,r2
    fefc:	e1bff617 	ldw	r6,-40(fp)
    ff00:	e17ffd17 	ldw	r5,-12(fp)
    ff04:	1009883a 	mov	r4,r2
    ff08:	00089400 	call	8940 <memcpy>
      ptr   += n;
    ff0c:	e0fffd17 	ldw	r3,-12(fp)
    ff10:	e0bff617 	ldw	r2,-40(fp)
    ff14:	1885883a 	add	r2,r3,r2
    ff18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ff1c:	e0fffe17 	ldw	r3,-8(fp)
    ff20:	e0bff617 	ldw	r2,-40(fp)
    ff24:	1885c83a 	sub	r2,r3,r2
    ff28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff2c:	e0fff917 	ldw	r3,-28(fp)
    ff30:	e0bff617 	ldw	r2,-40(fp)
    ff34:	1885883a 	add	r2,r3,r2
    ff38:	10c1ffcc 	andi	r3,r2,2047
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ff44:	e0bffe17 	ldw	r2,-8(fp)
    ff48:	00bfc716 	blt	zero,r2,fe68 <__alt_data_end+0xff00fe68>
    ff4c:	00000106 	br	ff54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ff50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff54:	0005303a 	rdctl	r2,status
    ff58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff5c:	e0fffb17 	ldw	r3,-20(fp)
    ff60:	00bfff84 	movi	r2,-2
    ff64:	1884703a 	and	r2,r3,r2
    ff68:	1001703a 	wrctl	status,r2
  
  return context;
    ff6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ff70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ff74:	e0bffc17 	ldw	r2,-16(fp)
    ff78:	10800817 	ldw	r2,32(r2)
    ff7c:	10c00094 	ori	r3,r2,2
    ff80:	e0bffc17 	ldw	r2,-16(fp)
    ff84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff88:	e0bffc17 	ldw	r2,-16(fp)
    ff8c:	10800017 	ldw	r2,0(r2)
    ff90:	10800104 	addi	r2,r2,4
    ff94:	1007883a 	mov	r3,r2
    ff98:	e0bffc17 	ldw	r2,-16(fp)
    ff9c:	10800817 	ldw	r2,32(r2)
    ffa0:	18800035 	stwio	r2,0(r3)
    ffa4:	e0bffa17 	ldw	r2,-24(fp)
    ffa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffac:	e0bff817 	ldw	r2,-32(fp)
    ffb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ffb4:	e0bffe17 	ldw	r2,-8(fp)
    ffb8:	0080100e 	bge	zero,r2,fffc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ffbc:	e0bfff17 	ldw	r2,-4(fp)
    ffc0:	1090000c 	andi	r2,r2,16384
    ffc4:	1000101e 	bne	r2,zero,10008 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ffc8:	0001883a 	nop
    ffcc:	e0bffc17 	ldw	r2,-16(fp)
    ffd0:	10c00d17 	ldw	r3,52(r2)
    ffd4:	e0bff517 	ldw	r2,-44(fp)
    ffd8:	1880051e 	bne	r3,r2,fff0 <altera_avalon_jtag_uart_write+0x1b8>
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	10c00917 	ldw	r3,36(r2)
    ffe4:	e0bffc17 	ldw	r2,-16(fp)
    ffe8:	10800117 	ldw	r2,4(r2)
    ffec:	18bff736 	bltu	r3,r2,ffcc <__alt_data_end+0xff00ffcc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fff0:	e0bffc17 	ldw	r2,-16(fp)
    fff4:	10800917 	ldw	r2,36(r2)
    fff8:	1000051e 	bne	r2,zero,10010 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fffc:	e0bffe17 	ldw	r2,-8(fp)
   10000:	00bfd016 	blt	zero,r2,ff44 <__alt_data_end+0xff00ff44>
   10004:	00000306 	br	10014 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10008:	0001883a 	nop
   1000c:	00000106 	br	10014 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10010:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10014:	e0fffd17 	ldw	r3,-12(fp)
   10018:	e0bff717 	ldw	r2,-36(fp)
   1001c:	18800426 	beq	r3,r2,10030 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10020:	e0fffd17 	ldw	r3,-12(fp)
   10024:	e0bff717 	ldw	r2,-36(fp)
   10028:	1885c83a 	sub	r2,r3,r2
   1002c:	00000606 	br	10048 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10030:	e0bfff17 	ldw	r2,-4(fp)
   10034:	1090000c 	andi	r2,r2,16384
   10038:	10000226 	beq	r2,zero,10044 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1003c:	00bffd44 	movi	r2,-11
   10040:	00000106 	br	10048 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10044:	00bffec4 	movi	r2,-5
}
   10048:	e037883a 	mov	sp,fp
   1004c:	dfc00117 	ldw	ra,4(sp)
   10050:	df000017 	ldw	fp,0(sp)
   10054:	dec00204 	addi	sp,sp,8
   10058:	f800283a 	ret

0001005c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1005c:	defffa04 	addi	sp,sp,-24
   10060:	dfc00515 	stw	ra,20(sp)
   10064:	df000415 	stw	fp,16(sp)
   10068:	df000404 	addi	fp,sp,16
   1006c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10070:	0007883a 	mov	r3,zero
   10074:	e0bfff17 	ldw	r2,-4(fp)
   10078:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1007c:	e0bfff17 	ldw	r2,-4(fp)
   10080:	10800104 	addi	r2,r2,4
   10084:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10088:	0005303a 	rdctl	r2,status
   1008c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10090:	e0fffd17 	ldw	r3,-12(fp)
   10094:	00bfff84 	movi	r2,-2
   10098:	1884703a 	and	r2,r3,r2
   1009c:	1001703a 	wrctl	status,r2
  
  return context;
   100a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   100a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   100a8:	0010dd80 	call	10dd8 <alt_tick>
   100ac:	e0bffc17 	ldw	r2,-16(fp)
   100b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100b4:	e0bffe17 	ldw	r2,-8(fp)
   100b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   100bc:	0001883a 	nop
   100c0:	e037883a 	mov	sp,fp
   100c4:	dfc00117 	ldw	ra,4(sp)
   100c8:	df000017 	ldw	fp,0(sp)
   100cc:	dec00204 	addi	sp,sp,8
   100d0:	f800283a 	ret

000100d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   100d4:	defff804 	addi	sp,sp,-32
   100d8:	dfc00715 	stw	ra,28(sp)
   100dc:	df000615 	stw	fp,24(sp)
   100e0:	df000604 	addi	fp,sp,24
   100e4:	e13ffc15 	stw	r4,-16(fp)
   100e8:	e17ffd15 	stw	r5,-12(fp)
   100ec:	e1bffe15 	stw	r6,-8(fp)
   100f0:	e1ffff15 	stw	r7,-4(fp)
   100f4:	e0bfff17 	ldw	r2,-4(fp)
   100f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   100fc:	d0a72d17 	ldw	r2,-25420(gp)
   10100:	1000021e 	bne	r2,zero,1010c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10104:	e0bffb17 	ldw	r2,-20(fp)
   10108:	d0a72d15 	stw	r2,-25420(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1010c:	e0bffc17 	ldw	r2,-16(fp)
   10110:	10800104 	addi	r2,r2,4
   10114:	00c001c4 	movi	r3,7
   10118:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1011c:	d8000015 	stw	zero,0(sp)
   10120:	e1fffc17 	ldw	r7,-16(fp)
   10124:	01800074 	movhi	r6,1
   10128:	31801704 	addi	r6,r6,92
   1012c:	e17ffe17 	ldw	r5,-8(fp)
   10130:	e13ffd17 	ldw	r4,-12(fp)
   10134:	00107080 	call	10708 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10138:	0001883a 	nop
   1013c:	e037883a 	mov	sp,fp
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	df000017 	ldw	fp,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret

00010150 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   10150:	defffe04 	addi	sp,sp,-8
   10154:	df000115 	stw	fp,4(sp)
   10158:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1015c:	d0a72a17 	ldw	r2,-25432(gp)
   10160:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   10164:	d0a72b17 	ldw	r2,-25428(gp)
   10168:	1000021e 	bne	r2,zero,10174 <alt_timestamp_start+0x24>
  {
    return -1;
   1016c:	00bfffc4 	movi	r2,-1
   10170:	00001106 	br	101b8 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	10800104 	addi	r2,r2,4
   1017c:	00c00204 	movi	r3,8
   10180:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	10800204 	addi	r2,r2,8
   1018c:	00ffffd4 	movui	r3,65535
   10190:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   10194:	e0bfff17 	ldw	r2,-4(fp)
   10198:	10800304 	addi	r2,r2,12
   1019c:	00ffffd4 	movui	r3,65535
   101a0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   101a4:	e0bfff17 	ldw	r2,-4(fp)
   101a8:	10800104 	addi	r2,r2,4
   101ac:	00c00104 	movi	r3,4
   101b0:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   101b4:	0005883a 	mov	r2,zero
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00104 	addi	sp,sp,4
   101c4:	f800283a 	ret

000101c8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   101c8:	defffc04 	addi	sp,sp,-16
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   101d4:	d0a72a17 	ldw	r2,-25432(gp)
   101d8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   101dc:	d0a72b17 	ldw	r2,-25428(gp)
   101e0:	1000021e 	bne	r2,zero,101ec <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	00001306 	br	10238 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10800404 	addi	r2,r2,16
   101f4:	0007883a 	mov	r3,zero
   101f8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   101fc:	e0bffd17 	ldw	r2,-12(fp)
   10200:	10800404 	addi	r2,r2,16
   10204:	10800037 	ldwio	r2,0(r2)
   10208:	10bfffcc 	andi	r2,r2,65535
   1020c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10210:	e0bffd17 	ldw	r2,-12(fp)
   10214:	10800504 	addi	r2,r2,20
   10218:	10800037 	ldwio	r2,0(r2)
   1021c:	10bfffcc 	andi	r2,r2,65535
   10220:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10224:	e0bfff17 	ldw	r2,-4(fp)
   10228:	1006943a 	slli	r3,r2,16
   1022c:	e0bffe17 	ldw	r2,-8(fp)
   10230:	1884b03a 	or	r2,r3,r2
   10234:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10238:	e037883a 	mov	sp,fp
   1023c:	df000017 	ldw	fp,0(sp)
   10240:	dec00104 	addi	sp,sp,4
   10244:	f800283a 	ret

00010248 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10248:	deffff04 	addi	sp,sp,-4
   1024c:	df000015 	stw	fp,0(sp)
   10250:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10254:	d0a72b17 	ldw	r2,-25428(gp)
}
   10258:	e037883a 	mov	sp,fp
   1025c:	df000017 	ldw	fp,0(sp)
   10260:	dec00104 	addi	sp,sp,4
   10264:	f800283a 	ret

00010268 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10268:	defff504 	addi	sp,sp,-44
   1026c:	df000a15 	stw	fp,40(sp)
   10270:	df000a04 	addi	fp,sp,40
   10274:	e13ffc15 	stw	r4,-16(fp)
   10278:	e17ffd15 	stw	r5,-12(fp)
   1027c:	e1bffe15 	stw	r6,-8(fp)
   10280:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10284:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10288:	d0a72d17 	ldw	r2,-25420(gp)
  
  if (alt_ticks_per_second ())
   1028c:	10003c26 	beq	r2,zero,10380 <alt_alarm_start+0x118>
  {
    if (alarm)
   10290:	e0bffc17 	ldw	r2,-16(fp)
   10294:	10003826 	beq	r2,zero,10378 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10298:	e0bffc17 	ldw	r2,-16(fp)
   1029c:	e0fffe17 	ldw	r3,-8(fp)
   102a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   102a4:	e0bffc17 	ldw	r2,-16(fp)
   102a8:	e0ffff17 	ldw	r3,-4(fp)
   102ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102b0:	0005303a 	rdctl	r2,status
   102b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102b8:	e0fff917 	ldw	r3,-28(fp)
   102bc:	00bfff84 	movi	r2,-2
   102c0:	1884703a 	and	r2,r3,r2
   102c4:	1001703a 	wrctl	status,r2
  
  return context;
   102c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   102cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   102d0:	d0a72e17 	ldw	r2,-25416(gp)
      
      current_nticks = alt_nticks();
   102d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   102d8:	e0fffd17 	ldw	r3,-12(fp)
   102dc:	e0bff617 	ldw	r2,-40(fp)
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	10c00044 	addi	r3,r2,1
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   102f0:	e0bffc17 	ldw	r2,-16(fp)
   102f4:	10c00217 	ldw	r3,8(r2)
   102f8:	e0bff617 	ldw	r2,-40(fp)
   102fc:	1880042e 	bgeu	r3,r2,10310 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10300:	e0bffc17 	ldw	r2,-16(fp)
   10304:	00c00044 	movi	r3,1
   10308:	10c00405 	stb	r3,16(r2)
   1030c:	00000206 	br	10318 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10310:	e0bffc17 	ldw	r2,-16(fp)
   10314:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10318:	e0bffc17 	ldw	r2,-16(fp)
   1031c:	d0e00e04 	addi	r3,gp,-32712
   10320:	e0fffa15 	stw	r3,-24(fp)
   10324:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10328:	e0bffb17 	ldw	r2,-20(fp)
   1032c:	e0fffa17 	ldw	r3,-24(fp)
   10330:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10334:	e0bffa17 	ldw	r2,-24(fp)
   10338:	10c00017 	ldw	r3,0(r2)
   1033c:	e0bffb17 	ldw	r2,-20(fp)
   10340:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10344:	e0bffa17 	ldw	r2,-24(fp)
   10348:	10800017 	ldw	r2,0(r2)
   1034c:	e0fffb17 	ldw	r3,-20(fp)
   10350:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10354:	e0bffa17 	ldw	r2,-24(fp)
   10358:	e0fffb17 	ldw	r3,-20(fp)
   1035c:	10c00015 	stw	r3,0(r2)
   10360:	e0bff817 	ldw	r2,-32(fp)
   10364:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10368:	e0bff717 	ldw	r2,-36(fp)
   1036c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10370:	0005883a 	mov	r2,zero
   10374:	00000306 	br	10384 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10378:	00bffa84 	movi	r2,-22
   1037c:	00000106 	br	10384 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10380:	00bfde84 	movi	r2,-134
  }
}
   10384:	e037883a 	mov	sp,fp
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00104 	addi	sp,sp,4
   10390:	f800283a 	ret

00010394 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10394:	defffa04 	addi	sp,sp,-24
   10398:	dfc00515 	stw	ra,20(sp)
   1039c:	df000415 	stw	fp,16(sp)
   103a0:	df000404 	addi	fp,sp,16
   103a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   103a8:	008000c4 	movi	r2,3
   103ac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   103b0:	e0fffd17 	ldw	r3,-12(fp)
   103b4:	008003f4 	movhi	r2,15
   103b8:	10909004 	addi	r2,r2,16960
   103bc:	1885383a 	mul	r2,r3,r2
   103c0:	100b883a 	mov	r5,r2
   103c4:	0100bef4 	movhi	r4,763
   103c8:	213c2004 	addi	r4,r4,-3968
   103cc:	00023480 	call	2348 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   103d0:	100b883a 	mov	r5,r2
   103d4:	01200034 	movhi	r4,32768
   103d8:	213fffc4 	addi	r4,r4,-1
   103dc:	00023480 	call	2348 <__udivsi3>
   103e0:	100b883a 	mov	r5,r2
   103e4:	e13fff17 	ldw	r4,-4(fp)
   103e8:	00023480 	call	2348 <__udivsi3>
   103ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   103f0:	e0bffe17 	ldw	r2,-8(fp)
   103f4:	10002a26 	beq	r2,zero,104a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   103f8:	e03ffc15 	stw	zero,-16(fp)
   103fc:	00001706 	br	1045c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10400:	00a00034 	movhi	r2,32768
   10404:	10bfffc4 	addi	r2,r2,-1
   10408:	10bfffc4 	addi	r2,r2,-1
   1040c:	103ffe1e 	bne	r2,zero,10408 <__alt_data_end+0xff010408>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10410:	e0fffd17 	ldw	r3,-12(fp)
   10414:	008003f4 	movhi	r2,15
   10418:	10909004 	addi	r2,r2,16960
   1041c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10420:	100b883a 	mov	r5,r2
   10424:	0100bef4 	movhi	r4,763
   10428:	213c2004 	addi	r4,r4,-3968
   1042c:	00023480 	call	2348 <__udivsi3>
   10430:	100b883a 	mov	r5,r2
   10434:	01200034 	movhi	r4,32768
   10438:	213fffc4 	addi	r4,r4,-1
   1043c:	00023480 	call	2348 <__udivsi3>
   10440:	1007883a 	mov	r3,r2
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	10c5c83a 	sub	r2,r2,r3
   1044c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10450:	e0bffc17 	ldw	r2,-16(fp)
   10454:	10800044 	addi	r2,r2,1
   10458:	e0bffc15 	stw	r2,-16(fp)
   1045c:	e0fffc17 	ldw	r3,-16(fp)
   10460:	e0bffe17 	ldw	r2,-8(fp)
   10464:	18bfe616 	blt	r3,r2,10400 <__alt_data_end+0xff010400>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10468:	e0fffd17 	ldw	r3,-12(fp)
   1046c:	008003f4 	movhi	r2,15
   10470:	10909004 	addi	r2,r2,16960
   10474:	1885383a 	mul	r2,r3,r2
   10478:	100b883a 	mov	r5,r2
   1047c:	0100bef4 	movhi	r4,763
   10480:	213c2004 	addi	r4,r4,-3968
   10484:	00023480 	call	2348 <__udivsi3>
   10488:	1007883a 	mov	r3,r2
   1048c:	e0bfff17 	ldw	r2,-4(fp)
   10490:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10494:	10bfffc4 	addi	r2,r2,-1
   10498:	103ffe1e 	bne	r2,zero,10494 <__alt_data_end+0xff010494>
   1049c:	00000d06 	br	104d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   104a0:	e0fffd17 	ldw	r3,-12(fp)
   104a4:	008003f4 	movhi	r2,15
   104a8:	10909004 	addi	r2,r2,16960
   104ac:	1885383a 	mul	r2,r3,r2
   104b0:	100b883a 	mov	r5,r2
   104b4:	0100bef4 	movhi	r4,763
   104b8:	213c2004 	addi	r4,r4,-3968
   104bc:	00023480 	call	2348 <__udivsi3>
   104c0:	1007883a 	mov	r3,r2
   104c4:	e0bfff17 	ldw	r2,-4(fp)
   104c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   104cc:	10bfffc4 	addi	r2,r2,-1
   104d0:	00bffe16 	blt	zero,r2,104cc <__alt_data_end+0xff0104cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   104d4:	0005883a 	mov	r2,zero
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   104ec:	defffe04 	addi	sp,sp,-8
   104f0:	df000115 	stw	fp,4(sp)
   104f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   104f8:	e03fff15 	stw	zero,-4(fp)
   104fc:	00000506 	br	10514 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10500:	e0bfff17 	ldw	r2,-4(fp)
   10504:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	10800804 	addi	r2,r2,32
   10510:	e0bfff15 	stw	r2,-4(fp)
   10514:	e0bfff17 	ldw	r2,-4(fp)
   10518:	10a00030 	cmpltui	r2,r2,32768
   1051c:	103ff81e 	bne	r2,zero,10500 <__alt_data_end+0xff010500>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10520:	0001883a 	nop
   10524:	e037883a 	mov	sp,fp
   10528:	df000017 	ldw	fp,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10534:	defffe04 	addi	sp,sp,-8
   10538:	dfc00115 	stw	ra,4(sp)
   1053c:	df000015 	stw	fp,0(sp)
   10540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10544:	d0a00b17 	ldw	r2,-32724(gp)
   10548:	10000326 	beq	r2,zero,10558 <alt_get_errno+0x24>
   1054c:	d0a00b17 	ldw	r2,-32724(gp)
   10550:	103ee83a 	callr	r2
   10554:	00000106 	br	1055c <alt_get_errno+0x28>
   10558:	d0a72304 	addi	r2,gp,-25460
}
   1055c:	e037883a 	mov	sp,fp
   10560:	dfc00117 	ldw	ra,4(sp)
   10564:	df000017 	ldw	fp,0(sp)
   10568:	dec00204 	addi	sp,sp,8
   1056c:	f800283a 	ret

00010570 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10570:	defffa04 	addi	sp,sp,-24
   10574:	dfc00515 	stw	ra,20(sp)
   10578:	df000415 	stw	fp,16(sp)
   1057c:	df000404 	addi	fp,sp,16
   10580:	e13ffe15 	stw	r4,-8(fp)
   10584:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10588:	e0bffe17 	ldw	r2,-8(fp)
   1058c:	10000326 	beq	r2,zero,1059c <alt_dev_llist_insert+0x2c>
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	10800217 	ldw	r2,8(r2)
   10598:	1000061e 	bne	r2,zero,105b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1059c:	00105340 	call	10534 <alt_get_errno>
   105a0:	1007883a 	mov	r3,r2
   105a4:	00800584 	movi	r2,22
   105a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   105ac:	00bffa84 	movi	r2,-22
   105b0:	00001306 	br	10600 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   105b4:	e0bffe17 	ldw	r2,-8(fp)
   105b8:	e0ffff17 	ldw	r3,-4(fp)
   105bc:	e0fffc15 	stw	r3,-16(fp)
   105c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   105c4:	e0bffd17 	ldw	r2,-12(fp)
   105c8:	e0fffc17 	ldw	r3,-16(fp)
   105cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   105d0:	e0bffc17 	ldw	r2,-16(fp)
   105d4:	10c00017 	ldw	r3,0(r2)
   105d8:	e0bffd17 	ldw	r2,-12(fp)
   105dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   105e0:	e0bffc17 	ldw	r2,-16(fp)
   105e4:	10800017 	ldw	r2,0(r2)
   105e8:	e0fffd17 	ldw	r3,-12(fp)
   105ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	e0fffd17 	ldw	r3,-12(fp)
   105f8:	10c00015 	stw	r3,0(r2)

  return 0;  
   105fc:	0005883a 	mov	r2,zero
}
   10600:	e037883a 	mov	sp,fp
   10604:	dfc00117 	ldw	ra,4(sp)
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00204 	addi	sp,sp,8
   10610:	f800283a 	ret

00010614 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10614:	defffd04 	addi	sp,sp,-12
   10618:	dfc00215 	stw	ra,8(sp)
   1061c:	df000115 	stw	fp,4(sp)
   10620:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10624:	00800074 	movhi	r2,1
   10628:	10857f04 	addi	r2,r2,5628
   1062c:	e0bfff15 	stw	r2,-4(fp)
   10630:	00000606 	br	1064c <_do_ctors+0x38>
        (*ctor) (); 
   10634:	e0bfff17 	ldw	r2,-4(fp)
   10638:	10800017 	ldw	r2,0(r2)
   1063c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10640:	e0bfff17 	ldw	r2,-4(fp)
   10644:	10bfff04 	addi	r2,r2,-4
   10648:	e0bfff15 	stw	r2,-4(fp)
   1064c:	e0ffff17 	ldw	r3,-4(fp)
   10650:	00800074 	movhi	r2,1
   10654:	10858004 	addi	r2,r2,5632
   10658:	18bff62e 	bgeu	r3,r2,10634 <__alt_data_end+0xff010634>
        (*ctor) (); 
}
   1065c:	0001883a 	nop
   10660:	e037883a 	mov	sp,fp
   10664:	dfc00117 	ldw	ra,4(sp)
   10668:	df000017 	ldw	fp,0(sp)
   1066c:	dec00204 	addi	sp,sp,8
   10670:	f800283a 	ret

00010674 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10674:	defffd04 	addi	sp,sp,-12
   10678:	dfc00215 	stw	ra,8(sp)
   1067c:	df000115 	stw	fp,4(sp)
   10680:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10684:	00800074 	movhi	r2,1
   10688:	10857f04 	addi	r2,r2,5628
   1068c:	e0bfff15 	stw	r2,-4(fp)
   10690:	00000606 	br	106ac <_do_dtors+0x38>
        (*dtor) (); 
   10694:	e0bfff17 	ldw	r2,-4(fp)
   10698:	10800017 	ldw	r2,0(r2)
   1069c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   106a0:	e0bfff17 	ldw	r2,-4(fp)
   106a4:	10bfff04 	addi	r2,r2,-4
   106a8:	e0bfff15 	stw	r2,-4(fp)
   106ac:	e0ffff17 	ldw	r3,-4(fp)
   106b0:	00800074 	movhi	r2,1
   106b4:	10858004 	addi	r2,r2,5632
   106b8:	18bff62e 	bgeu	r3,r2,10694 <__alt_data_end+0xff010694>
        (*dtor) (); 
}
   106bc:	0001883a 	nop
   106c0:	e037883a 	mov	sp,fp
   106c4:	dfc00117 	ldw	ra,4(sp)
   106c8:	df000017 	ldw	fp,0(sp)
   106cc:	dec00204 	addi	sp,sp,8
   106d0:	f800283a 	ret

000106d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   106d4:	defffe04 	addi	sp,sp,-8
   106d8:	dfc00115 	stw	ra,4(sp)
   106dc:	df000015 	stw	fp,0(sp)
   106e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   106e4:	01440004 	movi	r5,4096
   106e8:	0009883a 	mov	r4,zero
   106ec:	00111400 	call	11140 <alt_icache_flush>
#endif
}
   106f0:	0001883a 	nop
   106f4:	e037883a 	mov	sp,fp
   106f8:	dfc00117 	ldw	ra,4(sp)
   106fc:	df000017 	ldw	fp,0(sp)
   10700:	dec00204 	addi	sp,sp,8
   10704:	f800283a 	ret

00010708 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10708:	defff904 	addi	sp,sp,-28
   1070c:	dfc00615 	stw	ra,24(sp)
   10710:	df000515 	stw	fp,20(sp)
   10714:	df000504 	addi	fp,sp,20
   10718:	e13ffc15 	stw	r4,-16(fp)
   1071c:	e17ffd15 	stw	r5,-12(fp)
   10720:	e1bffe15 	stw	r6,-8(fp)
   10724:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10728:	e0800217 	ldw	r2,8(fp)
   1072c:	d8800015 	stw	r2,0(sp)
   10730:	e1ffff17 	ldw	r7,-4(fp)
   10734:	e1bffe17 	ldw	r6,-8(fp)
   10738:	e17ffd17 	ldw	r5,-12(fp)
   1073c:	e13ffc17 	ldw	r4,-16(fp)
   10740:	00108b80 	call	108b8 <alt_iic_isr_register>
}  
   10744:	e037883a 	mov	sp,fp
   10748:	dfc00117 	ldw	ra,4(sp)
   1074c:	df000017 	ldw	fp,0(sp)
   10750:	dec00204 	addi	sp,sp,8
   10754:	f800283a 	ret

00010758 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10758:	defff904 	addi	sp,sp,-28
   1075c:	df000615 	stw	fp,24(sp)
   10760:	df000604 	addi	fp,sp,24
   10764:	e13ffe15 	stw	r4,-8(fp)
   10768:	e17fff15 	stw	r5,-4(fp)
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10774:	0005303a 	rdctl	r2,status
   10778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1077c:	e0fffb17 	ldw	r3,-20(fp)
   10780:	00bfff84 	movi	r2,-2
   10784:	1884703a 	and	r2,r3,r2
   10788:	1001703a 	wrctl	status,r2
  
  return context;
   1078c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10790:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10794:	00c00044 	movi	r3,1
   10798:	e0bffa17 	ldw	r2,-24(fp)
   1079c:	1884983a 	sll	r2,r3,r2
   107a0:	1007883a 	mov	r3,r2
   107a4:	d0a72c17 	ldw	r2,-25424(gp)
   107a8:	1884b03a 	or	r2,r3,r2
   107ac:	d0a72c15 	stw	r2,-25424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   107b0:	d0a72c17 	ldw	r2,-25424(gp)
   107b4:	100170fa 	wrctl	ienable,r2
   107b8:	e0bffc17 	ldw	r2,-16(fp)
   107bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107c0:	e0bffd17 	ldw	r2,-12(fp)
   107c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   107c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   107cc:	0001883a 	nop
}
   107d0:	e037883a 	mov	sp,fp
   107d4:	df000017 	ldw	fp,0(sp)
   107d8:	dec00104 	addi	sp,sp,4
   107dc:	f800283a 	ret

000107e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   107e0:	defff904 	addi	sp,sp,-28
   107e4:	df000615 	stw	fp,24(sp)
   107e8:	df000604 	addi	fp,sp,24
   107ec:	e13ffe15 	stw	r4,-8(fp)
   107f0:	e17fff15 	stw	r5,-4(fp)
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107fc:	0005303a 	rdctl	r2,status
   10800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10804:	e0fffb17 	ldw	r3,-20(fp)
   10808:	00bfff84 	movi	r2,-2
   1080c:	1884703a 	and	r2,r3,r2
   10810:	1001703a 	wrctl	status,r2
  
  return context;
   10814:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10818:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1081c:	00c00044 	movi	r3,1
   10820:	e0bffa17 	ldw	r2,-24(fp)
   10824:	1884983a 	sll	r2,r3,r2
   10828:	0084303a 	nor	r2,zero,r2
   1082c:	1007883a 	mov	r3,r2
   10830:	d0a72c17 	ldw	r2,-25424(gp)
   10834:	1884703a 	and	r2,r3,r2
   10838:	d0a72c15 	stw	r2,-25424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1083c:	d0a72c17 	ldw	r2,-25424(gp)
   10840:	100170fa 	wrctl	ienable,r2
   10844:	e0bffc17 	ldw	r2,-16(fp)
   10848:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1084c:	e0bffd17 	ldw	r2,-12(fp)
   10850:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10854:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10858:	0001883a 	nop
}
   1085c:	e037883a 	mov	sp,fp
   10860:	df000017 	ldw	fp,0(sp)
   10864:	dec00104 	addi	sp,sp,4
   10868:	f800283a 	ret

0001086c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1086c:	defffc04 	addi	sp,sp,-16
   10870:	df000315 	stw	fp,12(sp)
   10874:	df000304 	addi	fp,sp,12
   10878:	e13ffe15 	stw	r4,-8(fp)
   1087c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10880:	000530fa 	rdctl	r2,ienable
   10884:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10888:	00c00044 	movi	r3,1
   1088c:	e0bfff17 	ldw	r2,-4(fp)
   10890:	1884983a 	sll	r2,r3,r2
   10894:	1007883a 	mov	r3,r2
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	1884703a 	and	r2,r3,r2
   108a0:	1004c03a 	cmpne	r2,r2,zero
   108a4:	10803fcc 	andi	r2,r2,255
}
   108a8:	e037883a 	mov	sp,fp
   108ac:	df000017 	ldw	fp,0(sp)
   108b0:	dec00104 	addi	sp,sp,4
   108b4:	f800283a 	ret

000108b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   108b8:	defff504 	addi	sp,sp,-44
   108bc:	dfc00a15 	stw	ra,40(sp)
   108c0:	df000915 	stw	fp,36(sp)
   108c4:	df000904 	addi	fp,sp,36
   108c8:	e13ffc15 	stw	r4,-16(fp)
   108cc:	e17ffd15 	stw	r5,-12(fp)
   108d0:	e1bffe15 	stw	r6,-8(fp)
   108d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   108d8:	00bffa84 	movi	r2,-22
   108dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   108e0:	e0bffd17 	ldw	r2,-12(fp)
   108e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   108e8:	e0bff817 	ldw	r2,-32(fp)
   108ec:	10800808 	cmpgei	r2,r2,32
   108f0:	1000271e 	bne	r2,zero,10990 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108f4:	0005303a 	rdctl	r2,status
   108f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108fc:	e0fffb17 	ldw	r3,-20(fp)
   10900:	00bfff84 	movi	r2,-2
   10904:	1884703a 	and	r2,r3,r2
   10908:	1001703a 	wrctl	status,r2
  
  return context;
   1090c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10910:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10914:	00800074 	movhi	r2,1
   10918:	10959404 	addi	r2,r2,22096
   1091c:	e0fff817 	ldw	r3,-32(fp)
   10920:	180690fa 	slli	r3,r3,3
   10924:	10c5883a 	add	r2,r2,r3
   10928:	e0fffe17 	ldw	r3,-8(fp)
   1092c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10930:	00800074 	movhi	r2,1
   10934:	10959404 	addi	r2,r2,22096
   10938:	e0fff817 	ldw	r3,-32(fp)
   1093c:	180690fa 	slli	r3,r3,3
   10940:	10c5883a 	add	r2,r2,r3
   10944:	10800104 	addi	r2,r2,4
   10948:	e0ffff17 	ldw	r3,-4(fp)
   1094c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10950:	e0bffe17 	ldw	r2,-8(fp)
   10954:	10000526 	beq	r2,zero,1096c <alt_iic_isr_register+0xb4>
   10958:	e0bff817 	ldw	r2,-32(fp)
   1095c:	100b883a 	mov	r5,r2
   10960:	e13ffc17 	ldw	r4,-16(fp)
   10964:	00107580 	call	10758 <alt_ic_irq_enable>
   10968:	00000406 	br	1097c <alt_iic_isr_register+0xc4>
   1096c:	e0bff817 	ldw	r2,-32(fp)
   10970:	100b883a 	mov	r5,r2
   10974:	e13ffc17 	ldw	r4,-16(fp)
   10978:	00107e00 	call	107e0 <alt_ic_irq_disable>
   1097c:	e0bff715 	stw	r2,-36(fp)
   10980:	e0bffa17 	ldw	r2,-24(fp)
   10984:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10988:	e0bff917 	ldw	r2,-28(fp)
   1098c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10990:	e0bff717 	ldw	r2,-36(fp)
}
   10994:	e037883a 	mov	sp,fp
   10998:	dfc00117 	ldw	ra,4(sp)
   1099c:	df000017 	ldw	fp,0(sp)
   109a0:	dec00204 	addi	sp,sp,8
   109a4:	f800283a 	ret

000109a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   109a8:	defff904 	addi	sp,sp,-28
   109ac:	dfc00615 	stw	ra,24(sp)
   109b0:	df000515 	stw	fp,20(sp)
   109b4:	df000504 	addi	fp,sp,20
   109b8:	e13ffc15 	stw	r4,-16(fp)
   109bc:	e17ffd15 	stw	r5,-12(fp)
   109c0:	e1bffe15 	stw	r6,-8(fp)
   109c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   109c8:	e1bfff17 	ldw	r6,-4(fp)
   109cc:	e17ffe17 	ldw	r5,-8(fp)
   109d0:	e13ffd17 	ldw	r4,-12(fp)
   109d4:	0010be80 	call	10be8 <open>
   109d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   109dc:	e0bffb17 	ldw	r2,-20(fp)
   109e0:	10001c16 	blt	r2,zero,10a54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   109e4:	00800074 	movhi	r2,1
   109e8:	1089e204 	addi	r2,r2,10120
   109ec:	e0fffb17 	ldw	r3,-20(fp)
   109f0:	18c00324 	muli	r3,r3,12
   109f4:	10c5883a 	add	r2,r2,r3
   109f8:	10c00017 	ldw	r3,0(r2)
   109fc:	e0bffc17 	ldw	r2,-16(fp)
   10a00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10a04:	00800074 	movhi	r2,1
   10a08:	1089e204 	addi	r2,r2,10120
   10a0c:	e0fffb17 	ldw	r3,-20(fp)
   10a10:	18c00324 	muli	r3,r3,12
   10a14:	10c5883a 	add	r2,r2,r3
   10a18:	10800104 	addi	r2,r2,4
   10a1c:	10c00017 	ldw	r3,0(r2)
   10a20:	e0bffc17 	ldw	r2,-16(fp)
   10a24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10a28:	00800074 	movhi	r2,1
   10a2c:	1089e204 	addi	r2,r2,10120
   10a30:	e0fffb17 	ldw	r3,-20(fp)
   10a34:	18c00324 	muli	r3,r3,12
   10a38:	10c5883a 	add	r2,r2,r3
   10a3c:	10800204 	addi	r2,r2,8
   10a40:	10c00017 	ldw	r3,0(r2)
   10a44:	e0bffc17 	ldw	r2,-16(fp)
   10a48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10a4c:	e13ffb17 	ldw	r4,-20(fp)
   10a50:	000f2940 	call	f294 <alt_release_fd>
  }
} 
   10a54:	0001883a 	nop
   10a58:	e037883a 	mov	sp,fp
   10a5c:	dfc00117 	ldw	ra,4(sp)
   10a60:	df000017 	ldw	fp,0(sp)
   10a64:	dec00204 	addi	sp,sp,8
   10a68:	f800283a 	ret

00010a6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10a6c:	defffb04 	addi	sp,sp,-20
   10a70:	dfc00415 	stw	ra,16(sp)
   10a74:	df000315 	stw	fp,12(sp)
   10a78:	df000304 	addi	fp,sp,12
   10a7c:	e13ffd15 	stw	r4,-12(fp)
   10a80:	e17ffe15 	stw	r5,-8(fp)
   10a84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10a88:	01c07fc4 	movi	r7,511
   10a8c:	01800044 	movi	r6,1
   10a90:	e17ffd17 	ldw	r5,-12(fp)
   10a94:	01000074 	movhi	r4,1
   10a98:	2109e504 	addi	r4,r4,10132
   10a9c:	00109a80 	call	109a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10aa0:	01c07fc4 	movi	r7,511
   10aa4:	000d883a 	mov	r6,zero
   10aa8:	e17ffe17 	ldw	r5,-8(fp)
   10aac:	01000074 	movhi	r4,1
   10ab0:	2109e204 	addi	r4,r4,10120
   10ab4:	00109a80 	call	109a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ab8:	01c07fc4 	movi	r7,511
   10abc:	01800044 	movi	r6,1
   10ac0:	e17fff17 	ldw	r5,-4(fp)
   10ac4:	01000074 	movhi	r4,1
   10ac8:	2109e804 	addi	r4,r4,10144
   10acc:	00109a80 	call	109a8 <alt_open_fd>
}  
   10ad0:	0001883a 	nop
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ae8:	defffe04 	addi	sp,sp,-8
   10aec:	dfc00115 	stw	ra,4(sp)
   10af0:	df000015 	stw	fp,0(sp)
   10af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10af8:	d0a00b17 	ldw	r2,-32724(gp)
   10afc:	10000326 	beq	r2,zero,10b0c <alt_get_errno+0x24>
   10b00:	d0a00b17 	ldw	r2,-32724(gp)
   10b04:	103ee83a 	callr	r2
   10b08:	00000106 	br	10b10 <alt_get_errno+0x28>
   10b0c:	d0a72304 	addi	r2,gp,-25460
}
   10b10:	e037883a 	mov	sp,fp
   10b14:	dfc00117 	ldw	ra,4(sp)
   10b18:	df000017 	ldw	fp,0(sp)
   10b1c:	dec00204 	addi	sp,sp,8
   10b20:	f800283a 	ret

00010b24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10b24:	defffd04 	addi	sp,sp,-12
   10b28:	df000215 	stw	fp,8(sp)
   10b2c:	df000204 	addi	fp,sp,8
   10b30:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10b34:	e0bfff17 	ldw	r2,-4(fp)
   10b38:	10800217 	ldw	r2,8(r2)
   10b3c:	10d00034 	orhi	r3,r2,16384
   10b40:	e0bfff17 	ldw	r2,-4(fp)
   10b44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b48:	e03ffe15 	stw	zero,-8(fp)
   10b4c:	00001d06 	br	10bc4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b50:	00800074 	movhi	r2,1
   10b54:	1089e204 	addi	r2,r2,10120
   10b58:	e0fffe17 	ldw	r3,-8(fp)
   10b5c:	18c00324 	muli	r3,r3,12
   10b60:	10c5883a 	add	r2,r2,r3
   10b64:	10c00017 	ldw	r3,0(r2)
   10b68:	e0bfff17 	ldw	r2,-4(fp)
   10b6c:	10800017 	ldw	r2,0(r2)
   10b70:	1880111e 	bne	r3,r2,10bb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10b74:	00800074 	movhi	r2,1
   10b78:	1089e204 	addi	r2,r2,10120
   10b7c:	e0fffe17 	ldw	r3,-8(fp)
   10b80:	18c00324 	muli	r3,r3,12
   10b84:	10c5883a 	add	r2,r2,r3
   10b88:	10800204 	addi	r2,r2,8
   10b8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b90:	1000090e 	bge	r2,zero,10bb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10b94:	e0bffe17 	ldw	r2,-8(fp)
   10b98:	10c00324 	muli	r3,r2,12
   10b9c:	00800074 	movhi	r2,1
   10ba0:	1089e204 	addi	r2,r2,10120
   10ba4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10ba8:	e0bfff17 	ldw	r2,-4(fp)
   10bac:	18800226 	beq	r3,r2,10bb8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10bb0:	00bffcc4 	movi	r2,-13
   10bb4:	00000806 	br	10bd8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10bb8:	e0bffe17 	ldw	r2,-8(fp)
   10bbc:	10800044 	addi	r2,r2,1
   10bc0:	e0bffe15 	stw	r2,-8(fp)
   10bc4:	d0a00a17 	ldw	r2,-32728(gp)
   10bc8:	1007883a 	mov	r3,r2
   10bcc:	e0bffe17 	ldw	r2,-8(fp)
   10bd0:	18bfdf2e 	bgeu	r3,r2,10b50 <__alt_data_end+0xff010b50>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10bd4:	0005883a 	mov	r2,zero
}
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	df000017 	ldw	fp,0(sp)
   10be0:	dec00104 	addi	sp,sp,4
   10be4:	f800283a 	ret

00010be8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10be8:	defff604 	addi	sp,sp,-40
   10bec:	dfc00915 	stw	ra,36(sp)
   10bf0:	df000815 	stw	fp,32(sp)
   10bf4:	df000804 	addi	fp,sp,32
   10bf8:	e13ffd15 	stw	r4,-12(fp)
   10bfc:	e17ffe15 	stw	r5,-8(fp)
   10c00:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10c04:	00bfffc4 	movi	r2,-1
   10c08:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10c0c:	00bffb44 	movi	r2,-19
   10c10:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10c14:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10c18:	d1600804 	addi	r5,gp,-32736
   10c1c:	e13ffd17 	ldw	r4,-12(fp)
   10c20:	0010f040 	call	10f04 <alt_find_dev>
   10c24:	e0bff815 	stw	r2,-32(fp)
   10c28:	e0bff817 	ldw	r2,-32(fp)
   10c2c:	1000051e 	bne	r2,zero,10c44 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c30:	e13ffd17 	ldw	r4,-12(fp)
   10c34:	0010f940 	call	10f94 <alt_find_file>
   10c38:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10c3c:	00800044 	movi	r2,1
   10c40:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c44:	e0bff817 	ldw	r2,-32(fp)
   10c48:	10002926 	beq	r2,zero,10cf0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c4c:	e13ff817 	ldw	r4,-32(fp)
   10c50:	001109c0 	call	1109c <alt_get_fd>
   10c54:	e0bff915 	stw	r2,-28(fp)
   10c58:	e0bff917 	ldw	r2,-28(fp)
   10c5c:	1000030e 	bge	r2,zero,10c6c <open+0x84>
    {
      status = index;
   10c60:	e0bff917 	ldw	r2,-28(fp)
   10c64:	e0bffa15 	stw	r2,-24(fp)
   10c68:	00002306 	br	10cf8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10c6c:	e0bff917 	ldw	r2,-28(fp)
   10c70:	10c00324 	muli	r3,r2,12
   10c74:	00800074 	movhi	r2,1
   10c78:	1089e204 	addi	r2,r2,10120
   10c7c:	1885883a 	add	r2,r3,r2
   10c80:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10c84:	e0fffe17 	ldw	r3,-8(fp)
   10c88:	00900034 	movhi	r2,16384
   10c8c:	10bfffc4 	addi	r2,r2,-1
   10c90:	1886703a 	and	r3,r3,r2
   10c94:	e0bffc17 	ldw	r2,-16(fp)
   10c98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10c9c:	e0bffb17 	ldw	r2,-20(fp)
   10ca0:	1000051e 	bne	r2,zero,10cb8 <open+0xd0>
   10ca4:	e13ffc17 	ldw	r4,-16(fp)
   10ca8:	0010b240 	call	10b24 <alt_file_locked>
   10cac:	e0bffa15 	stw	r2,-24(fp)
   10cb0:	e0bffa17 	ldw	r2,-24(fp)
   10cb4:	10001016 	blt	r2,zero,10cf8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10cb8:	e0bff817 	ldw	r2,-32(fp)
   10cbc:	10800317 	ldw	r2,12(r2)
   10cc0:	10000826 	beq	r2,zero,10ce4 <open+0xfc>
   10cc4:	e0bff817 	ldw	r2,-32(fp)
   10cc8:	10800317 	ldw	r2,12(r2)
   10ccc:	e1ffff17 	ldw	r7,-4(fp)
   10cd0:	e1bffe17 	ldw	r6,-8(fp)
   10cd4:	e17ffd17 	ldw	r5,-12(fp)
   10cd8:	e13ffc17 	ldw	r4,-16(fp)
   10cdc:	103ee83a 	callr	r2
   10ce0:	00000106 	br	10ce8 <open+0x100>
   10ce4:	0005883a 	mov	r2,zero
   10ce8:	e0bffa15 	stw	r2,-24(fp)
   10cec:	00000206 	br	10cf8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10cf0:	00bffb44 	movi	r2,-19
   10cf4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10cf8:	e0bffa17 	ldw	r2,-24(fp)
   10cfc:	1000090e 	bge	r2,zero,10d24 <open+0x13c>
  {
    alt_release_fd (index);  
   10d00:	e13ff917 	ldw	r4,-28(fp)
   10d04:	000f2940 	call	f294 <alt_release_fd>
    ALT_ERRNO = -status;
   10d08:	0010ae80 	call	10ae8 <alt_get_errno>
   10d0c:	1007883a 	mov	r3,r2
   10d10:	e0bffa17 	ldw	r2,-24(fp)
   10d14:	0085c83a 	sub	r2,zero,r2
   10d18:	18800015 	stw	r2,0(r3)
    return -1;
   10d1c:	00bfffc4 	movi	r2,-1
   10d20:	00000106 	br	10d28 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10d24:	e0bff917 	ldw	r2,-28(fp)
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	dfc00117 	ldw	ra,4(sp)
   10d30:	df000017 	ldw	fp,0(sp)
   10d34:	dec00204 	addi	sp,sp,8
   10d38:	f800283a 	ret

00010d3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10d3c:	defffa04 	addi	sp,sp,-24
   10d40:	df000515 	stw	fp,20(sp)
   10d44:	df000504 	addi	fp,sp,20
   10d48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d4c:	0005303a 	rdctl	r2,status
   10d50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d54:	e0fffc17 	ldw	r3,-16(fp)
   10d58:	00bfff84 	movi	r2,-2
   10d5c:	1884703a 	and	r2,r3,r2
   10d60:	1001703a 	wrctl	status,r2
  
  return context;
   10d64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10d68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10d6c:	e0bfff17 	ldw	r2,-4(fp)
   10d70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10d74:	e0bffd17 	ldw	r2,-12(fp)
   10d78:	10800017 	ldw	r2,0(r2)
   10d7c:	e0fffd17 	ldw	r3,-12(fp)
   10d80:	18c00117 	ldw	r3,4(r3)
   10d84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10d88:	e0bffd17 	ldw	r2,-12(fp)
   10d8c:	10800117 	ldw	r2,4(r2)
   10d90:	e0fffd17 	ldw	r3,-12(fp)
   10d94:	18c00017 	ldw	r3,0(r3)
   10d98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	e0fffd17 	ldw	r3,-12(fp)
   10da4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	e0fffd17 	ldw	r3,-12(fp)
   10db0:	10c00015 	stw	r3,0(r2)
   10db4:	e0bffb17 	ldw	r2,-20(fp)
   10db8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dbc:	e0bffe17 	ldw	r2,-8(fp)
   10dc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10dc4:	0001883a 	nop
   10dc8:	e037883a 	mov	sp,fp
   10dcc:	df000017 	ldw	fp,0(sp)
   10dd0:	dec00104 	addi	sp,sp,4
   10dd4:	f800283a 	ret

00010dd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10dd8:	defffb04 	addi	sp,sp,-20
   10ddc:	dfc00415 	stw	ra,16(sp)
   10de0:	df000315 	stw	fp,12(sp)
   10de4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10de8:	d0a00e17 	ldw	r2,-32712(gp)
   10dec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10df0:	d0a72e17 	ldw	r2,-25416(gp)
   10df4:	10800044 	addi	r2,r2,1
   10df8:	d0a72e15 	stw	r2,-25416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10dfc:	00002e06 	br	10eb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10e00:	e0bffd17 	ldw	r2,-12(fp)
   10e04:	10800017 	ldw	r2,0(r2)
   10e08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10e0c:	e0bffd17 	ldw	r2,-12(fp)
   10e10:	10800403 	ldbu	r2,16(r2)
   10e14:	10803fcc 	andi	r2,r2,255
   10e18:	10000426 	beq	r2,zero,10e2c <alt_tick+0x54>
   10e1c:	d0a72e17 	ldw	r2,-25416(gp)
   10e20:	1000021e 	bne	r2,zero,10e2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10e24:	e0bffd17 	ldw	r2,-12(fp)
   10e28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10e2c:	e0bffd17 	ldw	r2,-12(fp)
   10e30:	10800217 	ldw	r2,8(r2)
   10e34:	d0e72e17 	ldw	r3,-25416(gp)
   10e38:	18801d36 	bltu	r3,r2,10eb0 <alt_tick+0xd8>
   10e3c:	e0bffd17 	ldw	r2,-12(fp)
   10e40:	10800403 	ldbu	r2,16(r2)
   10e44:	10803fcc 	andi	r2,r2,255
   10e48:	1000191e 	bne	r2,zero,10eb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10e4c:	e0bffd17 	ldw	r2,-12(fp)
   10e50:	10800317 	ldw	r2,12(r2)
   10e54:	e0fffd17 	ldw	r3,-12(fp)
   10e58:	18c00517 	ldw	r3,20(r3)
   10e5c:	1809883a 	mov	r4,r3
   10e60:	103ee83a 	callr	r2
   10e64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10e68:	e0bfff17 	ldw	r2,-4(fp)
   10e6c:	1000031e 	bne	r2,zero,10e7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10e70:	e13ffd17 	ldw	r4,-12(fp)
   10e74:	0010d3c0 	call	10d3c <alt_alarm_stop>
   10e78:	00000d06 	br	10eb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10e7c:	e0bffd17 	ldw	r2,-12(fp)
   10e80:	10c00217 	ldw	r3,8(r2)
   10e84:	e0bfff17 	ldw	r2,-4(fp)
   10e88:	1887883a 	add	r3,r3,r2
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10e94:	e0bffd17 	ldw	r2,-12(fp)
   10e98:	10c00217 	ldw	r3,8(r2)
   10e9c:	d0a72e17 	ldw	r2,-25416(gp)
   10ea0:	1880032e 	bgeu	r3,r2,10eb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10ea4:	e0bffd17 	ldw	r2,-12(fp)
   10ea8:	00c00044 	movi	r3,1
   10eac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10eb0:	e0bffe17 	ldw	r2,-8(fp)
   10eb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10eb8:	e0fffd17 	ldw	r3,-12(fp)
   10ebc:	d0a00e04 	addi	r2,gp,-32712
   10ec0:	18bfcf1e 	bne	r3,r2,10e00 <__alt_data_end+0xff010e00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10ec4:	0001883a 	nop
}
   10ec8:	0001883a 	nop
   10ecc:	e037883a 	mov	sp,fp
   10ed0:	dfc00117 	ldw	ra,4(sp)
   10ed4:	df000017 	ldw	fp,0(sp)
   10ed8:	dec00204 	addi	sp,sp,8
   10edc:	f800283a 	ret

00010ee0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10ee0:	deffff04 	addi	sp,sp,-4
   10ee4:	df000015 	stw	fp,0(sp)
   10ee8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10eec:	000170fa 	wrctl	ienable,zero
}
   10ef0:	0001883a 	nop
   10ef4:	e037883a 	mov	sp,fp
   10ef8:	df000017 	ldw	fp,0(sp)
   10efc:	dec00104 	addi	sp,sp,4
   10f00:	f800283a 	ret

00010f04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10f04:	defffa04 	addi	sp,sp,-24
   10f08:	dfc00515 	stw	ra,20(sp)
   10f0c:	df000415 	stw	fp,16(sp)
   10f10:	df000404 	addi	fp,sp,16
   10f14:	e13ffe15 	stw	r4,-8(fp)
   10f18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10f1c:	e0bfff17 	ldw	r2,-4(fp)
   10f20:	10800017 	ldw	r2,0(r2)
   10f24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10f28:	e13ffe17 	ldw	r4,-8(fp)
   10f2c:	00037c00 	call	37c0 <strlen>
   10f30:	10800044 	addi	r2,r2,1
   10f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10f38:	00000d06 	br	10f70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	10800217 	ldw	r2,8(r2)
   10f44:	e0fffd17 	ldw	r3,-12(fp)
   10f48:	180d883a 	mov	r6,r3
   10f4c:	e17ffe17 	ldw	r5,-8(fp)
   10f50:	1009883a 	mov	r4,r2
   10f54:	00112b80 	call	112b8 <memcmp>
   10f58:	1000021e 	bne	r2,zero,10f64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10f5c:	e0bffc17 	ldw	r2,-16(fp)
   10f60:	00000706 	br	10f80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10f64:	e0bffc17 	ldw	r2,-16(fp)
   10f68:	10800017 	ldw	r2,0(r2)
   10f6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10f70:	e0fffc17 	ldw	r3,-16(fp)
   10f74:	e0bfff17 	ldw	r2,-4(fp)
   10f78:	18bff01e 	bne	r3,r2,10f3c <__alt_data_end+0xff010f3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10f7c:	0005883a 	mov	r2,zero
}
   10f80:	e037883a 	mov	sp,fp
   10f84:	dfc00117 	ldw	ra,4(sp)
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00204 	addi	sp,sp,8
   10f90:	f800283a 	ret

00010f94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10f94:	defffb04 	addi	sp,sp,-20
   10f98:	dfc00415 	stw	ra,16(sp)
   10f9c:	df000315 	stw	fp,12(sp)
   10fa0:	df000304 	addi	fp,sp,12
   10fa4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10fa8:	d0a00617 	ldw	r2,-32744(gp)
   10fac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10fb0:	00003106 	br	11078 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10fb4:	e0bffd17 	ldw	r2,-12(fp)
   10fb8:	10800217 	ldw	r2,8(r2)
   10fbc:	1009883a 	mov	r4,r2
   10fc0:	00037c00 	call	37c0 <strlen>
   10fc4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10fc8:	e0bffd17 	ldw	r2,-12(fp)
   10fcc:	10c00217 	ldw	r3,8(r2)
   10fd0:	e0bffe17 	ldw	r2,-8(fp)
   10fd4:	10bfffc4 	addi	r2,r2,-1
   10fd8:	1885883a 	add	r2,r3,r2
   10fdc:	10800003 	ldbu	r2,0(r2)
   10fe0:	10803fcc 	andi	r2,r2,255
   10fe4:	1080201c 	xori	r2,r2,128
   10fe8:	10bfe004 	addi	r2,r2,-128
   10fec:	10800bd8 	cmpnei	r2,r2,47
   10ff0:	1000031e 	bne	r2,zero,11000 <alt_find_file+0x6c>
    {
      len -= 1;
   10ff4:	e0bffe17 	ldw	r2,-8(fp)
   10ff8:	10bfffc4 	addi	r2,r2,-1
   10ffc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11000:	e0bffe17 	ldw	r2,-8(fp)
   11004:	e0ffff17 	ldw	r3,-4(fp)
   11008:	1885883a 	add	r2,r3,r2
   1100c:	10800003 	ldbu	r2,0(r2)
   11010:	10803fcc 	andi	r2,r2,255
   11014:	1080201c 	xori	r2,r2,128
   11018:	10bfe004 	addi	r2,r2,-128
   1101c:	10800be0 	cmpeqi	r2,r2,47
   11020:	1000081e 	bne	r2,zero,11044 <alt_find_file+0xb0>
   11024:	e0bffe17 	ldw	r2,-8(fp)
   11028:	e0ffff17 	ldw	r3,-4(fp)
   1102c:	1885883a 	add	r2,r3,r2
   11030:	10800003 	ldbu	r2,0(r2)
   11034:	10803fcc 	andi	r2,r2,255
   11038:	1080201c 	xori	r2,r2,128
   1103c:	10bfe004 	addi	r2,r2,-128
   11040:	10000a1e 	bne	r2,zero,1106c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11044:	e0bffd17 	ldw	r2,-12(fp)
   11048:	10800217 	ldw	r2,8(r2)
   1104c:	e0fffe17 	ldw	r3,-8(fp)
   11050:	180d883a 	mov	r6,r3
   11054:	e17fff17 	ldw	r5,-4(fp)
   11058:	1009883a 	mov	r4,r2
   1105c:	00112b80 	call	112b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11060:	1000021e 	bne	r2,zero,1106c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11064:	e0bffd17 	ldw	r2,-12(fp)
   11068:	00000706 	br	11088 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1106c:	e0bffd17 	ldw	r2,-12(fp)
   11070:	10800017 	ldw	r2,0(r2)
   11074:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11078:	e0fffd17 	ldw	r3,-12(fp)
   1107c:	d0a00604 	addi	r2,gp,-32744
   11080:	18bfcc1e 	bne	r3,r2,10fb4 <__alt_data_end+0xff010fb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11084:	0005883a 	mov	r2,zero
}
   11088:	e037883a 	mov	sp,fp
   1108c:	dfc00117 	ldw	ra,4(sp)
   11090:	df000017 	ldw	fp,0(sp)
   11094:	dec00204 	addi	sp,sp,8
   11098:	f800283a 	ret

0001109c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1109c:	defffc04 	addi	sp,sp,-16
   110a0:	df000315 	stw	fp,12(sp)
   110a4:	df000304 	addi	fp,sp,12
   110a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   110ac:	00bffa04 	movi	r2,-24
   110b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   110b4:	e03ffd15 	stw	zero,-12(fp)
   110b8:	00001906 	br	11120 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   110bc:	00800074 	movhi	r2,1
   110c0:	1089e204 	addi	r2,r2,10120
   110c4:	e0fffd17 	ldw	r3,-12(fp)
   110c8:	18c00324 	muli	r3,r3,12
   110cc:	10c5883a 	add	r2,r2,r3
   110d0:	10800017 	ldw	r2,0(r2)
   110d4:	10000f1e 	bne	r2,zero,11114 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   110d8:	00800074 	movhi	r2,1
   110dc:	1089e204 	addi	r2,r2,10120
   110e0:	e0fffd17 	ldw	r3,-12(fp)
   110e4:	18c00324 	muli	r3,r3,12
   110e8:	10c5883a 	add	r2,r2,r3
   110ec:	e0ffff17 	ldw	r3,-4(fp)
   110f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   110f4:	d0e00a17 	ldw	r3,-32728(gp)
   110f8:	e0bffd17 	ldw	r2,-12(fp)
   110fc:	1880020e 	bge	r3,r2,11108 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11100:	e0bffd17 	ldw	r2,-12(fp)
   11104:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11108:	e0bffd17 	ldw	r2,-12(fp)
   1110c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11110:	00000606 	br	1112c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11114:	e0bffd17 	ldw	r2,-12(fp)
   11118:	10800044 	addi	r2,r2,1
   1111c:	e0bffd15 	stw	r2,-12(fp)
   11120:	e0bffd17 	ldw	r2,-12(fp)
   11124:	10800810 	cmplti	r2,r2,32
   11128:	103fe41e 	bne	r2,zero,110bc <__alt_data_end+0xff0110bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1112c:	e0bffe17 	ldw	r2,-8(fp)
}
   11130:	e037883a 	mov	sp,fp
   11134:	df000017 	ldw	fp,0(sp)
   11138:	dec00104 	addi	sp,sp,4
   1113c:	f800283a 	ret

00011140 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11140:	defffb04 	addi	sp,sp,-20
   11144:	df000415 	stw	fp,16(sp)
   11148:	df000404 	addi	fp,sp,16
   1114c:	e13ffe15 	stw	r4,-8(fp)
   11150:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11154:	e0bfff17 	ldw	r2,-4(fp)
   11158:	10840070 	cmpltui	r2,r2,4097
   1115c:	1000021e 	bne	r2,zero,11168 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11160:	00840004 	movi	r2,4096
   11164:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11168:	e0fffe17 	ldw	r3,-8(fp)
   1116c:	e0bfff17 	ldw	r2,-4(fp)
   11170:	1885883a 	add	r2,r3,r2
   11174:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11178:	e0bffe17 	ldw	r2,-8(fp)
   1117c:	e0bffc15 	stw	r2,-16(fp)
   11180:	00000506 	br	11198 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11184:	e0bffc17 	ldw	r2,-16(fp)
   11188:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1118c:	e0bffc17 	ldw	r2,-16(fp)
   11190:	10800804 	addi	r2,r2,32
   11194:	e0bffc15 	stw	r2,-16(fp)
   11198:	e0fffc17 	ldw	r3,-16(fp)
   1119c:	e0bffd17 	ldw	r2,-12(fp)
   111a0:	18bff836 	bltu	r3,r2,11184 <__alt_data_end+0xff011184>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   111a4:	e0bffe17 	ldw	r2,-8(fp)
   111a8:	108007cc 	andi	r2,r2,31
   111ac:	10000226 	beq	r2,zero,111b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   111b0:	e0bffc17 	ldw	r2,-16(fp)
   111b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   111b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   111bc:	0001883a 	nop
   111c0:	e037883a 	mov	sp,fp
   111c4:	df000017 	ldw	fp,0(sp)
   111c8:	dec00104 	addi	sp,sp,4
   111cc:	f800283a 	ret

000111d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   111d0:	defffe04 	addi	sp,sp,-8
   111d4:	df000115 	stw	fp,4(sp)
   111d8:	df000104 	addi	fp,sp,4
   111dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   111e0:	e0bfff17 	ldw	r2,-4(fp)
   111e4:	10bffe84 	addi	r2,r2,-6
   111e8:	10c00428 	cmpgeui	r3,r2,16
   111ec:	18001a1e 	bne	r3,zero,11258 <alt_exception_cause_generated_bad_addr+0x88>
   111f0:	100690ba 	slli	r3,r2,2
   111f4:	00800074 	movhi	r2,1
   111f8:	10848204 	addi	r2,r2,4616
   111fc:	1885883a 	add	r2,r3,r2
   11200:	10800017 	ldw	r2,0(r2)
   11204:	1000683a 	jmp	r2
   11208:	00011248 	cmpgei	zero,zero,1097
   1120c:	00011248 	cmpgei	zero,zero,1097
   11210:	00011258 	cmpnei	zero,zero,1097
   11214:	00011258 	cmpnei	zero,zero,1097
   11218:	00011258 	cmpnei	zero,zero,1097
   1121c:	00011248 	cmpgei	zero,zero,1097
   11220:	00011250 	cmplti	zero,zero,1097
   11224:	00011258 	cmpnei	zero,zero,1097
   11228:	00011248 	cmpgei	zero,zero,1097
   1122c:	00011248 	cmpgei	zero,zero,1097
   11230:	00011258 	cmpnei	zero,zero,1097
   11234:	00011248 	cmpgei	zero,zero,1097
   11238:	00011250 	cmplti	zero,zero,1097
   1123c:	00011258 	cmpnei	zero,zero,1097
   11240:	00011258 	cmpnei	zero,zero,1097
   11244:	00011248 	cmpgei	zero,zero,1097
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11248:	00800044 	movi	r2,1
   1124c:	00000306 	br	1125c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11250:	0005883a 	mov	r2,zero
   11254:	00000106 	br	1125c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11258:	0005883a 	mov	r2,zero
  }
}
   1125c:	e037883a 	mov	sp,fp
   11260:	df000017 	ldw	fp,0(sp)
   11264:	dec00104 	addi	sp,sp,4
   11268:	f800283a 	ret

0001126c <atexit>:
   1126c:	200b883a 	mov	r5,r4
   11270:	000f883a 	mov	r7,zero
   11274:	000d883a 	mov	r6,zero
   11278:	0009883a 	mov	r4,zero
   1127c:	00113341 	jmpi	11334 <__register_exitproc>

00011280 <exit>:
   11280:	defffe04 	addi	sp,sp,-8
   11284:	000b883a 	mov	r5,zero
   11288:	dc000015 	stw	r16,0(sp)
   1128c:	dfc00115 	stw	ra,4(sp)
   11290:	2021883a 	mov	r16,r4
   11294:	001144c0 	call	1144c <__call_exitprocs>
   11298:	00800074 	movhi	r2,1
   1129c:	108e5c04 	addi	r2,r2,14704
   112a0:	11000017 	ldw	r4,0(r2)
   112a4:	20800f17 	ldw	r2,60(r4)
   112a8:	10000126 	beq	r2,zero,112b0 <exit+0x30>
   112ac:	103ee83a 	callr	r2
   112b0:	8009883a 	mov	r4,r16
   112b4:	00115cc0 	call	115cc <_exit>

000112b8 <memcmp>:
   112b8:	01c000c4 	movi	r7,3
   112bc:	3980192e 	bgeu	r7,r6,11324 <memcmp+0x6c>
   112c0:	2144b03a 	or	r2,r4,r5
   112c4:	11c4703a 	and	r2,r2,r7
   112c8:	10000f26 	beq	r2,zero,11308 <memcmp+0x50>
   112cc:	20800003 	ldbu	r2,0(r4)
   112d0:	28c00003 	ldbu	r3,0(r5)
   112d4:	10c0151e 	bne	r2,r3,1132c <memcmp+0x74>
   112d8:	31bfff84 	addi	r6,r6,-2
   112dc:	01ffffc4 	movi	r7,-1
   112e0:	00000406 	br	112f4 <memcmp+0x3c>
   112e4:	20800003 	ldbu	r2,0(r4)
   112e8:	28c00003 	ldbu	r3,0(r5)
   112ec:	31bfffc4 	addi	r6,r6,-1
   112f0:	10c00e1e 	bne	r2,r3,1132c <memcmp+0x74>
   112f4:	21000044 	addi	r4,r4,1
   112f8:	29400044 	addi	r5,r5,1
   112fc:	31fff91e 	bne	r6,r7,112e4 <__alt_data_end+0xff0112e4>
   11300:	0005883a 	mov	r2,zero
   11304:	f800283a 	ret
   11308:	20c00017 	ldw	r3,0(r4)
   1130c:	28800017 	ldw	r2,0(r5)
   11310:	18bfee1e 	bne	r3,r2,112cc <__alt_data_end+0xff0112cc>
   11314:	31bfff04 	addi	r6,r6,-4
   11318:	21000104 	addi	r4,r4,4
   1131c:	29400104 	addi	r5,r5,4
   11320:	39bff936 	bltu	r7,r6,11308 <__alt_data_end+0xff011308>
   11324:	303fe91e 	bne	r6,zero,112cc <__alt_data_end+0xff0112cc>
   11328:	003ff506 	br	11300 <__alt_data_end+0xff011300>
   1132c:	10c5c83a 	sub	r2,r2,r3
   11330:	f800283a 	ret

00011334 <__register_exitproc>:
   11334:	defffa04 	addi	sp,sp,-24
   11338:	dc000315 	stw	r16,12(sp)
   1133c:	04000074 	movhi	r16,1
   11340:	840e5c04 	addi	r16,r16,14704
   11344:	80c00017 	ldw	r3,0(r16)
   11348:	dc400415 	stw	r17,16(sp)
   1134c:	dfc00515 	stw	ra,20(sp)
   11350:	18805217 	ldw	r2,328(r3)
   11354:	2023883a 	mov	r17,r4
   11358:	10003726 	beq	r2,zero,11438 <__register_exitproc+0x104>
   1135c:	10c00117 	ldw	r3,4(r2)
   11360:	010007c4 	movi	r4,31
   11364:	20c00e16 	blt	r4,r3,113a0 <__register_exitproc+0x6c>
   11368:	1a000044 	addi	r8,r3,1
   1136c:	8800221e 	bne	r17,zero,113f8 <__register_exitproc+0xc4>
   11370:	18c00084 	addi	r3,r3,2
   11374:	18c7883a 	add	r3,r3,r3
   11378:	18c7883a 	add	r3,r3,r3
   1137c:	12000115 	stw	r8,4(r2)
   11380:	10c7883a 	add	r3,r2,r3
   11384:	19400015 	stw	r5,0(r3)
   11388:	0005883a 	mov	r2,zero
   1138c:	dfc00517 	ldw	ra,20(sp)
   11390:	dc400417 	ldw	r17,16(sp)
   11394:	dc000317 	ldw	r16,12(sp)
   11398:	dec00604 	addi	sp,sp,24
   1139c:	f800283a 	ret
   113a0:	00800034 	movhi	r2,0
   113a4:	108b7e04 	addi	r2,r2,11768
   113a8:	10002626 	beq	r2,zero,11444 <__register_exitproc+0x110>
   113ac:	01006404 	movi	r4,400
   113b0:	d9400015 	stw	r5,0(sp)
   113b4:	d9800115 	stw	r6,4(sp)
   113b8:	d9c00215 	stw	r7,8(sp)
   113bc:	0002df80 	call	2df8 <malloc>
   113c0:	d9400017 	ldw	r5,0(sp)
   113c4:	d9800117 	ldw	r6,4(sp)
   113c8:	d9c00217 	ldw	r7,8(sp)
   113cc:	10001d26 	beq	r2,zero,11444 <__register_exitproc+0x110>
   113d0:	81000017 	ldw	r4,0(r16)
   113d4:	10000115 	stw	zero,4(r2)
   113d8:	02000044 	movi	r8,1
   113dc:	22405217 	ldw	r9,328(r4)
   113e0:	0007883a 	mov	r3,zero
   113e4:	12400015 	stw	r9,0(r2)
   113e8:	20805215 	stw	r2,328(r4)
   113ec:	10006215 	stw	zero,392(r2)
   113f0:	10006315 	stw	zero,396(r2)
   113f4:	883fde26 	beq	r17,zero,11370 <__alt_data_end+0xff011370>
   113f8:	18c9883a 	add	r4,r3,r3
   113fc:	2109883a 	add	r4,r4,r4
   11400:	1109883a 	add	r4,r2,r4
   11404:	21802215 	stw	r6,136(r4)
   11408:	01800044 	movi	r6,1
   1140c:	12406217 	ldw	r9,392(r2)
   11410:	30cc983a 	sll	r6,r6,r3
   11414:	4992b03a 	or	r9,r9,r6
   11418:	12406215 	stw	r9,392(r2)
   1141c:	21c04215 	stw	r7,264(r4)
   11420:	01000084 	movi	r4,2
   11424:	893fd21e 	bne	r17,r4,11370 <__alt_data_end+0xff011370>
   11428:	11006317 	ldw	r4,396(r2)
   1142c:	218cb03a 	or	r6,r4,r6
   11430:	11806315 	stw	r6,396(r2)
   11434:	003fce06 	br	11370 <__alt_data_end+0xff011370>
   11438:	18805304 	addi	r2,r3,332
   1143c:	18805215 	stw	r2,328(r3)
   11440:	003fc606 	br	1135c <__alt_data_end+0xff01135c>
   11444:	00bfffc4 	movi	r2,-1
   11448:	003fd006 	br	1138c <__alt_data_end+0xff01138c>

0001144c <__call_exitprocs>:
   1144c:	defff504 	addi	sp,sp,-44
   11450:	df000915 	stw	fp,36(sp)
   11454:	dd400615 	stw	r21,24(sp)
   11458:	dc800315 	stw	r18,12(sp)
   1145c:	dfc00a15 	stw	ra,40(sp)
   11460:	ddc00815 	stw	r23,32(sp)
   11464:	dd800715 	stw	r22,28(sp)
   11468:	dd000515 	stw	r20,20(sp)
   1146c:	dcc00415 	stw	r19,16(sp)
   11470:	dc400215 	stw	r17,8(sp)
   11474:	dc000115 	stw	r16,4(sp)
   11478:	d9000015 	stw	r4,0(sp)
   1147c:	2839883a 	mov	fp,r5
   11480:	04800044 	movi	r18,1
   11484:	057fffc4 	movi	r21,-1
   11488:	00800074 	movhi	r2,1
   1148c:	108e5c04 	addi	r2,r2,14704
   11490:	12000017 	ldw	r8,0(r2)
   11494:	45005217 	ldw	r20,328(r8)
   11498:	44c05204 	addi	r19,r8,328
   1149c:	a0001c26 	beq	r20,zero,11510 <__call_exitprocs+0xc4>
   114a0:	a0800117 	ldw	r2,4(r20)
   114a4:	15ffffc4 	addi	r23,r2,-1
   114a8:	b8000d16 	blt	r23,zero,114e0 <__call_exitprocs+0x94>
   114ac:	14000044 	addi	r16,r2,1
   114b0:	8421883a 	add	r16,r16,r16
   114b4:	8421883a 	add	r16,r16,r16
   114b8:	84402004 	addi	r17,r16,128
   114bc:	a463883a 	add	r17,r20,r17
   114c0:	a421883a 	add	r16,r20,r16
   114c4:	e0001e26 	beq	fp,zero,11540 <__call_exitprocs+0xf4>
   114c8:	80804017 	ldw	r2,256(r16)
   114cc:	e0801c26 	beq	fp,r2,11540 <__call_exitprocs+0xf4>
   114d0:	bdffffc4 	addi	r23,r23,-1
   114d4:	843fff04 	addi	r16,r16,-4
   114d8:	8c7fff04 	addi	r17,r17,-4
   114dc:	bd7ff91e 	bne	r23,r21,114c4 <__alt_data_end+0xff0114c4>
   114e0:	00800034 	movhi	r2,0
   114e4:	108b8304 	addi	r2,r2,11788
   114e8:	10000926 	beq	r2,zero,11510 <__call_exitprocs+0xc4>
   114ec:	a0800117 	ldw	r2,4(r20)
   114f0:	1000301e 	bne	r2,zero,115b4 <__call_exitprocs+0x168>
   114f4:	a0800017 	ldw	r2,0(r20)
   114f8:	10003226 	beq	r2,zero,115c4 <__call_exitprocs+0x178>
   114fc:	a009883a 	mov	r4,r20
   11500:	98800015 	stw	r2,0(r19)
   11504:	0002e0c0 	call	2e0c <free>
   11508:	9d000017 	ldw	r20,0(r19)
   1150c:	a03fe41e 	bne	r20,zero,114a0 <__alt_data_end+0xff0114a0>
   11510:	dfc00a17 	ldw	ra,40(sp)
   11514:	df000917 	ldw	fp,36(sp)
   11518:	ddc00817 	ldw	r23,32(sp)
   1151c:	dd800717 	ldw	r22,28(sp)
   11520:	dd400617 	ldw	r21,24(sp)
   11524:	dd000517 	ldw	r20,20(sp)
   11528:	dcc00417 	ldw	r19,16(sp)
   1152c:	dc800317 	ldw	r18,12(sp)
   11530:	dc400217 	ldw	r17,8(sp)
   11534:	dc000117 	ldw	r16,4(sp)
   11538:	dec00b04 	addi	sp,sp,44
   1153c:	f800283a 	ret
   11540:	a0800117 	ldw	r2,4(r20)
   11544:	80c00017 	ldw	r3,0(r16)
   11548:	10bfffc4 	addi	r2,r2,-1
   1154c:	15c01426 	beq	r2,r23,115a0 <__call_exitprocs+0x154>
   11550:	80000015 	stw	zero,0(r16)
   11554:	183fde26 	beq	r3,zero,114d0 <__alt_data_end+0xff0114d0>
   11558:	95c8983a 	sll	r4,r18,r23
   1155c:	a0806217 	ldw	r2,392(r20)
   11560:	a5800117 	ldw	r22,4(r20)
   11564:	2084703a 	and	r2,r4,r2
   11568:	10000b26 	beq	r2,zero,11598 <__call_exitprocs+0x14c>
   1156c:	a0806317 	ldw	r2,396(r20)
   11570:	2088703a 	and	r4,r4,r2
   11574:	20000c1e 	bne	r4,zero,115a8 <__call_exitprocs+0x15c>
   11578:	89400017 	ldw	r5,0(r17)
   1157c:	d9000017 	ldw	r4,0(sp)
   11580:	183ee83a 	callr	r3
   11584:	a0800117 	ldw	r2,4(r20)
   11588:	15bfbf1e 	bne	r2,r22,11488 <__alt_data_end+0xff011488>
   1158c:	98800017 	ldw	r2,0(r19)
   11590:	153fcf26 	beq	r2,r20,114d0 <__alt_data_end+0xff0114d0>
   11594:	003fbc06 	br	11488 <__alt_data_end+0xff011488>
   11598:	183ee83a 	callr	r3
   1159c:	003ff906 	br	11584 <__alt_data_end+0xff011584>
   115a0:	a5c00115 	stw	r23,4(r20)
   115a4:	003feb06 	br	11554 <__alt_data_end+0xff011554>
   115a8:	89000017 	ldw	r4,0(r17)
   115ac:	183ee83a 	callr	r3
   115b0:	003ff406 	br	11584 <__alt_data_end+0xff011584>
   115b4:	a0800017 	ldw	r2,0(r20)
   115b8:	a027883a 	mov	r19,r20
   115bc:	1029883a 	mov	r20,r2
   115c0:	003fb606 	br	1149c <__alt_data_end+0xff01149c>
   115c4:	0005883a 	mov	r2,zero
   115c8:	003ffb06 	br	115b8 <__alt_data_end+0xff0115b8>

000115cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   115cc:	defffd04 	addi	sp,sp,-12
   115d0:	df000215 	stw	fp,8(sp)
   115d4:	df000204 	addi	fp,sp,8
   115d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   115dc:	0001883a 	nop
   115e0:	e0bfff17 	ldw	r2,-4(fp)
   115e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   115e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   115ec:	10000226 	beq	r2,zero,115f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   115f0:	002af070 	cmpltui	zero,zero,43969
   115f4:	00000106 	br	115fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   115f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   115fc:	003fff06 	br	115fc <__alt_data_end+0xff0115fc>
